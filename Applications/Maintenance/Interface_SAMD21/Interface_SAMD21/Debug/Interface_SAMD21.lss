
Interface_SAMD21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005270  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005270  00005270  00015270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000049c  20000000  00005278  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000006dc  2000049c  00005714  0002049c  2**2
                  ALLOC
  4 .stack        00002000  20000b78  00005df0  0002049c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000204c4  2**0
                  CONTENTS, READONLY
  7 .debug_info   0004d05c  00000000  00000000  0002051d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006f5b  00000000  00000000  0006d579  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00019ecf  00000000  00000000  000744d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000014c8  00000000  00000000  0008e3a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001ec0  00000000  00000000  0008f86b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00022c36  00000000  00000000  0009172b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001d20a  00000000  00000000  000b4361  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009a556  00000000  00000000  000d156b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000392c  00000000  00000000  0016bac4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 2b 00 20 95 03 00 00 91 03 00 00 91 03 00 00     x+. ............
	...
      2c:	91 03 00 00 00 00 00 00 00 00 00 00 91 03 00 00     ................
      3c:	91 03 00 00 91 03 00 00 91 03 00 00 91 03 00 00     ................
      4c:	95 26 00 00 91 03 00 00 91 03 00 00 91 03 00 00     .&..............
      5c:	15 3d 00 00 91 03 00 00 91 03 00 00 91 03 00 00     .=..............
      6c:	91 03 00 00 91 03 00 00 91 03 00 00 91 03 00 00     ................
      7c:	91 03 00 00 91 03 00 00 91 03 00 00 c5 2b 00 00     .............+..
      8c:	d9 2b 00 00 91 03 00 00 91 03 00 00 91 03 00 00     .+..............
      9c:	91 03 00 00 91 03 00 00 91 03 00 00 91 03 00 00     ................
      ac:	91 03 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000049c 	.word	0x2000049c
      d4:	00000000 	.word	0x00000000
      d8:	00005278 	.word	0x00005278

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004a0 	.word	0x200004a0
     108:	00005278 	.word	0x00005278
     10c:	00005278 	.word	0x00005278
     110:	00000000 	.word	0x00000000

00000114 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     114:	2000      	movs	r0, #0
     116:	4770      	bx	lr

00000118 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     118:	4770      	bx	lr
	...

0000011c <_ZL12cb_bulk_readh13usb_xfer_codem>:
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	
	ptrCDCClass->rxReady=true;
     11c:	4b03      	ldr	r3, [pc, #12]	; (12c <_ZL12cb_bulk_readh13usb_xfer_codem+0x10>)
     11e:	681b      	ldr	r3, [r3, #0]
     120:	2201      	movs	r2, #1
     122:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->terminalStarted=true;
     124:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
     126:	741a      	strb	r2, [r3, #16]


	return false;
}
     128:	2000      	movs	r0, #0
     12a:	4770      	bx	lr
     12c:	200004b8 	.word	0x200004b8

00000130 <_ZL13cb_bulk_writeh13usb_xfer_codem>:
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
     130:	4b03      	ldr	r3, [pc, #12]	; (140 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x10>)
     132:	681b      	ldr	r3, [r3, #0]
     134:	2201      	movs	r2, #1
     136:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->terminalStarted=true;
     138:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
     13a:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
}
     13c:	2000      	movs	r0, #0
     13e:	4770      	bx	lr
     140:	200004b8 	.word	0x200004b8

00000144 <_ZN9CDC_Class4peekEv>:
	return cdcdf_acm_is_enabled();
	
}

int CDC_Class::peek(void)
{
     144:	b530      	push	{r4, r5, lr}
     146:	b083      	sub	sp, #12
     148:	0004      	movs	r4, r0
	uint8_t	r;
	if (_serialPeek != -1)
     14a:	6983      	ldr	r3, [r0, #24]
     14c:	3301      	adds	r3, #1
     14e:	d002      	beq.n	156 <_ZN9CDC_Class4peekEv+0x12>
	return _serialPeek;
     150:	6980      	ldr	r0, [r0, #24]
	_serialPeek = readData(&r,1);
	_serialPeek=(int)r;
	return _serialPeek;
}
     152:	b003      	add	sp, #12
     154:	bd30      	pop	{r4, r5, pc}
	_serialPeek = readData(&r,1);
     156:	466b      	mov	r3, sp
     158:	1ddd      	adds	r5, r3, #7
     15a:	6803      	ldr	r3, [r0, #0]
     15c:	69db      	ldr	r3, [r3, #28]
     15e:	2201      	movs	r2, #1
     160:	0029      	movs	r1, r5
     162:	4798      	blx	r3
     164:	61a0      	str	r0, [r4, #24]
	_serialPeek=(int)r;
     166:	782b      	ldrb	r3, [r5, #0]
     168:	61a3      	str	r3, [r4, #24]
	return _serialPeek;
     16a:	69a0      	ldr	r0, [r4, #24]
     16c:	e7f1      	b.n	152 <_ZN9CDC_Class4peekEv+0xe>

0000016e <_ZN9CDC_Class5writeEh>:
}

void	CDC_Class::clear(void){
	cdcdf_acm_stop_xfer();
}
size_t CDC_Class::write(uint8_t c) {
     16e:	b500      	push	{lr}
     170:	b083      	sub	sp, #12
     172:	466b      	mov	r3, sp
     174:	71d9      	strb	r1, [r3, #7]
		while(!txReady);
     176:	7d03      	ldrb	r3, [r0, #20]
     178:	2b00      	cmp	r3, #0
     17a:	d0fc      	beq.n	176 <_ZN9CDC_Class5writeEh+0x8>
	
		return writeData(&c, 1);
     17c:	6803      	ldr	r3, [r0, #0]
     17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     180:	2201      	movs	r2, #1
     182:	4669      	mov	r1, sp
     184:	3107      	adds	r1, #7
     186:	4798      	blx	r3
}
     188:	b003      	add	sp, #12
     18a:	bd00      	pop	{pc}

0000018c <_ZN9CDC_Class9availableEv>:
	return r;		
}


bool	CDC_Class::available(void){
	if (rxReady && txReady)
     18c:	7d43      	ldrb	r3, [r0, #21]
     18e:	b2db      	uxtb	r3, r3
     190:	2b00      	cmp	r3, #0
     192:	d001      	beq.n	198 <_ZN9CDC_Class9availableEv+0xc>
     194:	7d03      	ldrb	r3, [r0, #20]
     196:	b2db      	uxtb	r3, r3
	{
		
	return false;
	}
	
}
     198:	0018      	movs	r0, r3
     19a:	4770      	bx	lr

0000019c <_ZN9CDC_ClassD1Ev>:
CDC_Class::~CDC_Class()
     19c:	b510      	push	{r4, lr}
     19e:	0004      	movs	r4, r0
     1a0:	4b03      	ldr	r3, [pc, #12]	; (1b0 <_ZN9CDC_ClassD1Ev+0x14>)
     1a2:	3308      	adds	r3, #8
     1a4:	6003      	str	r3, [r0, #0]
     1a6:	3010      	adds	r0, #16
     1a8:	4b02      	ldr	r3, [pc, #8]	; (1b4 <_ZN9CDC_ClassD1Ev+0x18>)
     1aa:	4798      	blx	r3
} //~CDC_Class
     1ac:	0020      	movs	r0, r4
     1ae:	bd10      	pop	{r4, pc}
     1b0:	00005024 	.word	0x00005024
     1b4:	00000bf1 	.word	0x00000bf1

000001b8 <_ZL10cb_state_c22usb_cdc_control_signal>:
{
     1b8:	b510      	push	{r4, lr}
     1ba:	b082      	sub	sp, #8
     1bc:	1c03      	adds	r3, r0, #0
     1be:	aa01      	add	r2, sp, #4
     1c0:	8010      	strh	r0, [r2, #0]
	if (state.rs232.DTR) {
     1c2:	07db      	lsls	r3, r3, #31
     1c4:	d402      	bmi.n	1cc <_ZL10cb_state_c22usb_cdc_control_signal+0x14>
}
     1c6:	2000      	movs	r0, #0
     1c8:	b002      	add	sp, #8
     1ca:	bd10      	pop	{r4, pc}
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
     1cc:	4906      	ldr	r1, [pc, #24]	; (1e8 <_ZL10cb_state_c22usb_cdc_control_signal+0x30>)
     1ce:	2000      	movs	r0, #0
     1d0:	4c06      	ldr	r4, [pc, #24]	; (1ec <_ZL10cb_state_c22usb_cdc_control_signal+0x34>)
     1d2:	47a0      	blx	r4
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
     1d4:	4906      	ldr	r1, [pc, #24]	; (1f0 <_ZL10cb_state_c22usb_cdc_control_signal+0x38>)
     1d6:	2001      	movs	r0, #1
     1d8:	47a0      	blx	r4
		ptrCDCClass->txReady=true;
     1da:	4b06      	ldr	r3, [pc, #24]	; (1f4 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
     1dc:	681b      	ldr	r3, [r3, #0]
     1de:	2201      	movs	r2, #1
     1e0:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
     1e2:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->plugged=true;
     1e4:	741a      	strb	r2, [r3, #16]
     1e6:	e7ee      	b.n	1c6 <_ZL10cb_state_c22usb_cdc_control_signal+0xe>
     1e8:	0000011d 	.word	0x0000011d
     1ec:	000042c5 	.word	0x000042c5
     1f0:	00000131 	.word	0x00000131
     1f4:	200004b8 	.word	0x200004b8

000001f8 <_ZN9CDC_Class8readDataEPvl>:
{
     1f8:	b510      	push	{r4, lr}
     1fa:	0004      	movs	r4, r0
     1fc:	0008      	movs	r0, r1
	rxReady=false;
     1fe:	2300      	movs	r3, #0
     200:	7563      	strb	r3, [r4, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
     202:	0011      	movs	r1, r2
     204:	4b03      	ldr	r3, [pc, #12]	; (214 <_ZN9CDC_Class8readDataEPvl+0x1c>)
     206:	4798      	blx	r3
	while(!rxReady);
     208:	7d63      	ldrb	r3, [r4, #21]
     20a:	2b00      	cmp	r3, #0
     20c:	d0fc      	beq.n	208 <_ZN9CDC_Class8readDataEPvl+0x10>
	return r;
     20e:	23ff      	movs	r3, #255	; 0xff
     210:	4018      	ands	r0, r3
}
     212:	bd10      	pop	{r4, pc}
     214:	00004255 	.word	0x00004255

00000218 <_ZN9CDC_Class4readEv>:
{
     218:	b510      	push	{r4, lr}
     21a:	b082      	sub	sp, #8
     21c:	0004      	movs	r4, r0
	rxReady=false;
     21e:	2300      	movs	r3, #0
     220:	7543      	strb	r3, [r0, #21]
	cdcdf_acm_read(&p, 1);
     222:	2101      	movs	r1, #1
     224:	466b      	mov	r3, sp
     226:	1dd8      	adds	r0, r3, #7
     228:	4b04      	ldr	r3, [pc, #16]	; (23c <_ZN9CDC_Class4readEv+0x24>)
     22a:	4798      	blx	r3
	while(!rxReady);
     22c:	7d63      	ldrb	r3, [r4, #21]
     22e:	2b00      	cmp	r3, #0
     230:	d0fc      	beq.n	22c <_ZN9CDC_Class4readEv+0x14>
	return (int)p;
     232:	466b      	mov	r3, sp
     234:	79d8      	ldrb	r0, [r3, #7]
}
     236:	b002      	add	sp, #8
     238:	bd10      	pop	{r4, pc}
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	00004255 	.word	0x00004255

00000240 <_ZN9CDC_Class5flushEv>:
void	CDC_Class::flush(void){
     240:	b510      	push	{r4, lr}
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
     242:	301c      	adds	r0, #28
     244:	2140      	movs	r1, #64	; 0x40
     246:	4b01      	ldr	r3, [pc, #4]	; (24c <_ZN9CDC_Class5flushEv+0xc>)
     248:	4798      	blx	r3
}
     24a:	bd10      	pop	{r4, pc}
     24c:	00004281 	.word	0x00004281

00000250 <_ZN9CDC_Class5clearEv>:
void	CDC_Class::clear(void){
     250:	b510      	push	{r4, lr}
	cdcdf_acm_stop_xfer();
     252:	4b01      	ldr	r3, [pc, #4]	; (258 <_ZN9CDC_Class5clearEv+0x8>)
     254:	4798      	blx	r3
}
     256:	bd10      	pop	{r4, pc}
     258:	000042ad 	.word	0x000042ad

0000025c <_ZN9CDC_Class9writeDataEPKvl>:
{
     25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     25e:	0004      	movs	r4, r0
     260:	000e      	movs	r6, r1
     262:	0017      	movs	r7, r2
	txReady=false;
     264:	2300      	movs	r3, #0
     266:	7503      	strb	r3, [r0, #20]
	if (CheckTerminal())
     268:	3010      	adds	r0, #16
     26a:	4b0a      	ldr	r3, [pc, #40]	; (294 <_ZN9CDC_Class9writeDataEPKvl+0x38>)
     26c:	4798      	blx	r3
		return 0;
     26e:	2500      	movs	r5, #0
	if (CheckTerminal())
     270:	2800      	cmp	r0, #0
     272:	d00d      	beq.n	290 <_ZN9CDC_Class9writeDataEPKvl+0x34>
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
     274:	0039      	movs	r1, r7
     276:	0030      	movs	r0, r6
     278:	4b07      	ldr	r3, [pc, #28]	; (298 <_ZN9CDC_Class9writeDataEPKvl+0x3c>)
     27a:	4798      	blx	r3
     27c:	0005      	movs	r5, r0
		while((!txReady)&&(terminalStarted)){
     27e:	7d23      	ldrb	r3, [r4, #20]
     280:	2b00      	cmp	r3, #0
     282:	d102      	bne.n	28a <_ZN9CDC_Class9writeDataEPKvl+0x2e>
     284:	7c63      	ldrb	r3, [r4, #17]
     286:	2b00      	cmp	r3, #0
     288:	d1f9      	bne.n	27e <_ZN9CDC_Class9writeDataEPKvl+0x22>
			usbTimer.Stop();
     28a:	4804      	ldr	r0, [pc, #16]	; (29c <_ZN9CDC_Class9writeDataEPKvl+0x40>)
     28c:	4b04      	ldr	r3, [pc, #16]	; (2a0 <_ZN9CDC_Class9writeDataEPKvl+0x44>)
     28e:	4798      	blx	r3
}
     290:	0028      	movs	r0, r5
     292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     294:	00000c61 	.word	0x00000c61
     298:	00004281 	.word	0x00004281
     29c:	200005bc 	.word	0x200005bc
     2a0:	00000cf1 	.word	0x00000cf1

000002a4 <_ZN9CDC_Class5writeEPKhj>:
{
     2a4:	b570      	push	{r4, r5, r6, lr}
     2a6:	0004      	movs	r4, r0
     2a8:	0008      	movs	r0, r1
	txReady=false;
     2aa:	2300      	movs	r3, #0
     2ac:	7523      	strb	r3, [r4, #20]
 	if (plugged){
     2ae:	7c23      	ldrb	r3, [r4, #16]
 		r=0;
     2b0:	2500      	movs	r5, #0
 	if (plugged){
     2b2:	2b00      	cmp	r3, #0
     2b4:	d00c      	beq.n	2d0 <_ZN9CDC_Class5writeEPKhj+0x2c>
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
     2b6:	0011      	movs	r1, r2
     2b8:	4b06      	ldr	r3, [pc, #24]	; (2d4 <_ZN9CDC_Class5writeEPKhj+0x30>)
     2ba:	4798      	blx	r3
     2bc:	0005      	movs	r5, r0
		while((!txReady)&&(terminalStarted));
     2be:	7d23      	ldrb	r3, [r4, #20]
     2c0:	2b00      	cmp	r3, #0
     2c2:	d102      	bne.n	2ca <_ZN9CDC_Class5writeEPKhj+0x26>
     2c4:	7c63      	ldrb	r3, [r4, #17]
     2c6:	2b00      	cmp	r3, #0
     2c8:	d1f9      	bne.n	2be <_ZN9CDC_Class5writeEPKhj+0x1a>
		usbTimer.Stop();
     2ca:	4803      	ldr	r0, [pc, #12]	; (2d8 <_ZN9CDC_Class5writeEPKhj+0x34>)
     2cc:	4b03      	ldr	r3, [pc, #12]	; (2dc <_ZN9CDC_Class5writeEPKhj+0x38>)
     2ce:	4798      	blx	r3
}
     2d0:	0028      	movs	r0, r5
     2d2:	bd70      	pop	{r4, r5, r6, pc}
     2d4:	00004281 	.word	0x00004281
     2d8:	200005bc 	.word	0x200005bc
     2dc:	00000cf1 	.word	0x00000cf1

000002e0 <_ZN9CDC_ClassC1Ev>:
CDC_Class::CDC_Class()
     2e0:	b510      	push	{r4, lr}
     2e2:	0004      	movs	r4, r0
    Print() : write_error(0) {}
     2e4:	2300      	movs	r3, #0
     2e6:	6043      	str	r3, [r0, #4]
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
     2e8:	4b08      	ldr	r3, [pc, #32]	; (30c <_ZN9CDC_ClassC1Ev+0x2c>)
     2ea:	6003      	str	r3, [r0, #0]
     2ec:	23fa      	movs	r3, #250	; 0xfa
     2ee:	009b      	lsls	r3, r3, #2
     2f0:	6083      	str	r3, [r0, #8]
     2f2:	3010      	adds	r0, #16
     2f4:	4b06      	ldr	r3, [pc, #24]	; (310 <_ZN9CDC_ClassC1Ev+0x30>)
     2f6:	4798      	blx	r3
     2f8:	4b06      	ldr	r3, [pc, #24]	; (314 <_ZN9CDC_ClassC1Ev+0x34>)
     2fa:	3308      	adds	r3, #8
     2fc:	6023      	str	r3, [r4, #0]
	_serialPeek=-1;
     2fe:	2301      	movs	r3, #1
     300:	425b      	negs	r3, r3
     302:	61a3      	str	r3, [r4, #24]
	ptrCDCClass=this;
     304:	4b04      	ldr	r3, [pc, #16]	; (318 <_ZN9CDC_ClassC1Ev+0x38>)
     306:	601c      	str	r4, [r3, #0]
} //CDC_Class
     308:	0020      	movs	r0, r4
     30a:	bd10      	pop	{r4, pc}
     30c:	00005008 	.word	0x00005008
     310:	00000be5 	.word	0x00000be5
     314:	00005024 	.word	0x00005024
     318:	200004b8 	.word	0x200004b8

0000031c <_ZN9CDC_Class4InitEv>:
void CDC_Class::Init(void){
     31c:	b510      	push	{r4, lr}
     31e:	0004      	movs	r4, r0
	OnInit();
     320:	3010      	adds	r0, #16
     322:	4b04      	ldr	r3, [pc, #16]	; (334 <_ZN9CDC_Class4InitEv+0x18>)
     324:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
     326:	4904      	ldr	r1, [pc, #16]	; (338 <_ZN9CDC_Class4InitEv+0x1c>)
     328:	2003      	movs	r0, #3
     32a:	4b04      	ldr	r3, [pc, #16]	; (33c <_ZN9CDC_Class4InitEv+0x20>)
     32c:	4798      	blx	r3
	if (plugged)
     32e:	7c23      	ldrb	r3, [r4, #16]
}
     330:	bd10      	pop	{r4, pc}
     332:	46c0      	nop			; (mov r8, r8)
     334:	00000bf5 	.word	0x00000bf5
     338:	000001b9 	.word	0x000001b9
     33c:	000042c5 	.word	0x000042c5

00000340 <_ZN9CDC_Class9IsEnabledEv>:
bool CDC_Class::IsEnabled(void){
     340:	b510      	push	{r4, lr}
	return cdcdf_acm_is_enabled();
     342:	4b01      	ldr	r3, [pc, #4]	; (348 <_ZN9CDC_Class9IsEnabledEv+0x8>)
     344:	4798      	blx	r3
}
     346:	bd10      	pop	{r4, pc}
     348:	00004315 	.word	0x00004315

0000034c <_ZN9CDC_Class12readDataAsynEPvl>:
{
     34c:	b510      	push	{r4, lr}
     34e:	000b      	movs	r3, r1
	rxReady=false;
     350:	2100      	movs	r1, #0
     352:	7541      	strb	r1, [r0, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
     354:	0011      	movs	r1, r2
     356:	0018      	movs	r0, r3
     358:	4b01      	ldr	r3, [pc, #4]	; (360 <_ZN9CDC_Class12readDataAsynEPvl+0x14>)
     35a:	4798      	blx	r3
}
     35c:	bd10      	pop	{r4, pc}
     35e:	46c0      	nop			; (mov r8, r8)
     360:	00004255 	.word	0x00004255

00000364 <_GLOBAL__sub_I_ptrCDCClass>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
     364:	b510      	push	{r4, lr}
     366:	4c05      	ldr	r4, [pc, #20]	; (37c <_GLOBAL__sub_I_ptrCDCClass+0x18>)
     368:	3404      	adds	r4, #4
     36a:	0020      	movs	r0, r4
     36c:	4b04      	ldr	r3, [pc, #16]	; (380 <_GLOBAL__sub_I_ptrCDCClass+0x1c>)
     36e:	4798      	blx	r3
     370:	4a04      	ldr	r2, [pc, #16]	; (384 <_GLOBAL__sub_I_ptrCDCClass+0x20>)
     372:	4905      	ldr	r1, [pc, #20]	; (388 <_GLOBAL__sub_I_ptrCDCClass+0x24>)
     374:	0020      	movs	r0, r4
     376:	4b05      	ldr	r3, [pc, #20]	; (38c <_GLOBAL__sub_I_ptrCDCClass+0x28>)
     378:	4798      	blx	r3
     37a:	bd10      	pop	{r4, pc}
     37c:	200004b8 	.word	0x200004b8
     380:	000002e1 	.word	0x000002e1
     384:	20000000 	.word	0x20000000
     388:	0000019d 	.word	0x0000019d
     38c:	00004bad 	.word	0x00004bad

00000390 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     390:	e7fe      	b.n	390 <Dummy_Handler>
	...

00000394 <Reset_Handler>:
{
     394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     396:	4a2a      	ldr	r2, [pc, #168]	; (440 <Reset_Handler+0xac>)
     398:	4b2a      	ldr	r3, [pc, #168]	; (444 <Reset_Handler+0xb0>)
     39a:	429a      	cmp	r2, r3
     39c:	d011      	beq.n	3c2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     39e:	001a      	movs	r2, r3
     3a0:	4b29      	ldr	r3, [pc, #164]	; (448 <Reset_Handler+0xb4>)
     3a2:	429a      	cmp	r2, r3
     3a4:	d20d      	bcs.n	3c2 <Reset_Handler+0x2e>
     3a6:	4a29      	ldr	r2, [pc, #164]	; (44c <Reset_Handler+0xb8>)
     3a8:	3303      	adds	r3, #3
     3aa:	1a9b      	subs	r3, r3, r2
     3ac:	089b      	lsrs	r3, r3, #2
     3ae:	3301      	adds	r3, #1
     3b0:	009b      	lsls	r3, r3, #2
     3b2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     3b4:	4823      	ldr	r0, [pc, #140]	; (444 <Reset_Handler+0xb0>)
     3b6:	4922      	ldr	r1, [pc, #136]	; (440 <Reset_Handler+0xac>)
     3b8:	588c      	ldr	r4, [r1, r2]
     3ba:	5084      	str	r4, [r0, r2]
     3bc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     3be:	429a      	cmp	r2, r3
     3c0:	d1fa      	bne.n	3b8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     3c2:	4a23      	ldr	r2, [pc, #140]	; (450 <Reset_Handler+0xbc>)
     3c4:	4b23      	ldr	r3, [pc, #140]	; (454 <Reset_Handler+0xc0>)
     3c6:	429a      	cmp	r2, r3
     3c8:	d20a      	bcs.n	3e0 <Reset_Handler+0x4c>
     3ca:	43d3      	mvns	r3, r2
     3cc:	4921      	ldr	r1, [pc, #132]	; (454 <Reset_Handler+0xc0>)
     3ce:	185b      	adds	r3, r3, r1
     3d0:	2103      	movs	r1, #3
     3d2:	438b      	bics	r3, r1
     3d4:	3304      	adds	r3, #4
     3d6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     3d8:	2100      	movs	r1, #0
     3da:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     3dc:	4293      	cmp	r3, r2
     3de:	d1fc      	bne.n	3da <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     3e0:	4a1d      	ldr	r2, [pc, #116]	; (458 <Reset_Handler+0xc4>)
     3e2:	21ff      	movs	r1, #255	; 0xff
     3e4:	4b1d      	ldr	r3, [pc, #116]	; (45c <Reset_Handler+0xc8>)
     3e6:	438b      	bics	r3, r1
     3e8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     3ea:	39fd      	subs	r1, #253	; 0xfd
     3ec:	2390      	movs	r3, #144	; 0x90
     3ee:	005b      	lsls	r3, r3, #1
     3f0:	4a1b      	ldr	r2, [pc, #108]	; (460 <Reset_Handler+0xcc>)
     3f2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     3f4:	4a1b      	ldr	r2, [pc, #108]	; (464 <Reset_Handler+0xd0>)
     3f6:	78d3      	ldrb	r3, [r2, #3]
     3f8:	2503      	movs	r5, #3
     3fa:	43ab      	bics	r3, r5
     3fc:	2402      	movs	r4, #2
     3fe:	4323      	orrs	r3, r4
     400:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     402:	78d3      	ldrb	r3, [r2, #3]
     404:	270c      	movs	r7, #12
     406:	43bb      	bics	r3, r7
     408:	2608      	movs	r6, #8
     40a:	4333      	orrs	r3, r6
     40c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     40e:	4b16      	ldr	r3, [pc, #88]	; (468 <Reset_Handler+0xd4>)
     410:	7b98      	ldrb	r0, [r3, #14]
     412:	2230      	movs	r2, #48	; 0x30
     414:	4390      	bics	r0, r2
     416:	2220      	movs	r2, #32
     418:	4310      	orrs	r0, r2
     41a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     41c:	7b99      	ldrb	r1, [r3, #14]
     41e:	43b9      	bics	r1, r7
     420:	4331      	orrs	r1, r6
     422:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     424:	7b9a      	ldrb	r2, [r3, #14]
     426:	43aa      	bics	r2, r5
     428:	4322      	orrs	r2, r4
     42a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     42c:	4a0f      	ldr	r2, [pc, #60]	; (46c <Reset_Handler+0xd8>)
     42e:	6853      	ldr	r3, [r2, #4]
     430:	2180      	movs	r1, #128	; 0x80
     432:	430b      	orrs	r3, r1
     434:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     436:	4b0e      	ldr	r3, [pc, #56]	; (470 <Reset_Handler+0xdc>)
     438:	4798      	blx	r3
        main();
     43a:	4b0e      	ldr	r3, [pc, #56]	; (474 <Reset_Handler+0xe0>)
     43c:	4798      	blx	r3
     43e:	e7fe      	b.n	43e <Reset_Handler+0xaa>
     440:	00005278 	.word	0x00005278
     444:	20000000 	.word	0x20000000
     448:	2000049c 	.word	0x2000049c
     44c:	20000004 	.word	0x20000004
     450:	2000049c 	.word	0x2000049c
     454:	20000b78 	.word	0x20000b78
     458:	e000ed00 	.word	0xe000ed00
     45c:	00000000 	.word	0x00000000
     460:	41007000 	.word	0x41007000
     464:	41005000 	.word	0x41005000
     468:	41004800 	.word	0x41004800
     46c:	41004000 	.word	0x41004000
     470:	00004ce5 	.word	0x00004ce5
     474:	000004e5 	.word	0x000004e5

00000478 <malloc>:

//............................................................................
extern "C" void *malloc(size_t)
	{
    return (void *)0;
	}
     478:	2000      	movs	r0, #0
     47a:	4770      	bx	lr

0000047c <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
		}
     47c:	4770      	bx	lr
	...

00000480 <_Z24WriteUserParametersFlashv>:
	}
	usb.readDataAsyn(localbuffer,4);
	return	result;
}

bool	WriteUserParametersFlash(void){
     480:	b530      	push	{r4, r5, lr}
     482:	b083      	sub	sp, #12

	userParameters	p=defaultParameters;
     484:	ac01      	add	r4, sp, #4
     486:	4b10      	ldr	r3, [pc, #64]	; (4c8 <_Z24WriteUserParametersFlashv+0x48>)
     488:	781b      	ldrb	r3, [r3, #0]
     48a:	7023      	strb	r3, [r4, #0]
	flash.eraseFlash((uint32_t)&flashMap->parameters,sizeof(userParameters));
     48c:	4b0f      	ldr	r3, [pc, #60]	; (4cc <_Z24WriteUserParametersFlashv+0x4c>)
     48e:	6819      	ldr	r1, [r3, #0]
     490:	2380      	movs	r3, #128	; 0x80
     492:	031b      	lsls	r3, r3, #12
     494:	469c      	mov	ip, r3
     496:	4461      	add	r1, ip
     498:	4d0d      	ldr	r5, [pc, #52]	; (4d0 <_Z24WriteUserParametersFlashv+0x50>)
     49a:	2201      	movs	r2, #1
     49c:	0028      	movs	r0, r5
     49e:	4b0d      	ldr	r3, [pc, #52]	; (4d4 <_Z24WriteUserParametersFlashv+0x54>)
     4a0:	4798      	blx	r3
	
	flash.flushConfigurationData(&p);
     4a2:	0021      	movs	r1, r4
     4a4:	0028      	movs	r0, r5
     4a6:	4b0c      	ldr	r3, [pc, #48]	; (4d8 <_Z24WriteUserParametersFlashv+0x58>)
     4a8:	4798      	blx	r3
	delay_ms(WRITE_DELAY);
     4aa:	2064      	movs	r0, #100	; 0x64
     4ac:	4b0b      	ldr	r3, [pc, #44]	; (4dc <_Z24WriteUserParametersFlashv+0x5c>)
     4ae:	4798      	blx	r3
	userParameters	q;
	q=flash.readConfigurationData(q);
     4b0:	4669      	mov	r1, sp
     4b2:	0028      	movs	r0, r5
     4b4:	4b0a      	ldr	r3, [pc, #40]	; (4e0 <_Z24WriteUserParametersFlashv+0x60>)
     4b6:	4798      	blx	r3
	if (p.flapperValveOffset==q.flapperValveOffset)
     4b8:	7823      	ldrb	r3, [r4, #0]
     4ba:	b2c0      	uxtb	r0, r0
     4bc:	1a18      	subs	r0, r3, r0
     4be:	4243      	negs	r3, r0
     4c0:	4158      	adcs	r0, r3
     4c2:	b2c0      	uxtb	r0, r0
	} 
	else
	{
		return false;
	}
}
     4c4:	b003      	add	sp, #12
     4c6:	bd30      	pop	{r4, r5, pc}
     4c8:	000050bc 	.word	0x000050bc
     4cc:	200005dc 	.word	0x200005dc
     4d0:	200005e0 	.word	0x200005e0
     4d4:	000012a1 	.word	0x000012a1
     4d8:	000011c1 	.word	0x000011c1
     4dc:	000018c5 	.word	0x000018c5
     4e0:	000011fd 	.word	0x000011fd

000004e4 <main>:


int main(void)
{
     4e4:	b530      	push	{r4, r5, lr}
     4e6:	b0c9      	sub	sp, #292	; 0x124
	atmel_start_init();
     4e8:	4b1d      	ldr	r3, [pc, #116]	; (560 <main+0x7c>)
     4ea:	4798      	blx	r3
		usb.Init();
     4ec:	481d      	ldr	r0, [pc, #116]	; (564 <main+0x80>)
     4ee:	4b1e      	ldr	r3, [pc, #120]	; (568 <main+0x84>)
     4f0:	4798      	blx	r3
		delay_ms(500);
     4f2:	20fa      	movs	r0, #250	; 0xfa
     4f4:	0040      	lsls	r0, r0, #1
     4f6:	4b1d      	ldr	r3, [pc, #116]	; (56c <main+0x88>)
     4f8:	4798      	blx	r3
		flash.Init();
     4fa:	481d      	ldr	r0, [pc, #116]	; (570 <main+0x8c>)
     4fc:	4b1d      	ldr	r3, [pc, #116]	; (574 <main+0x90>)
     4fe:	4798      	blx	r3
		WriteUserParametersFlash();
     500:	4b1d      	ldr	r3, [pc, #116]	; (578 <main+0x94>)
     502:	4798      	blx	r3
		Maintenance_Tool	toolApp;
     504:	4668      	mov	r0, sp
     506:	4b1d      	ldr	r3, [pc, #116]	; (57c <main+0x98>)
     508:	4798      	blx	r3
		toolApp.Init();
     50a:	4668      	mov	r0, sp
     50c:	4b1c      	ldr	r3, [pc, #112]	; (580 <main+0x9c>)
     50e:	4798      	blx	r3
		while (1)
		{
			if (toolApp.IsAppConnected())
     510:	4d1c      	ldr	r5, [pc, #112]	; (584 <main+0xa0>)
				
				
			} 
			else
			{
				usb.writeData(localbuffer,4);
     512:	4b1d      	ldr	r3, [pc, #116]	; (588 <main+0xa4>)
     514:	1d1c      	adds	r4, r3, #4
     516:	e009      	b.n	52c <main+0x48>
						toolApp.NotifyConnectionAcknowledge();
     518:	4668      	mov	r0, sp
     51a:	4b1c      	ldr	r3, [pc, #112]	; (58c <main+0xa8>)
     51c:	4798      	blx	r3
						toolApp.ClearLocalBuffer();
     51e:	4668      	mov	r0, sp
     520:	4b1b      	ldr	r3, [pc, #108]	; (590 <main+0xac>)
     522:	4798      	blx	r3
						while (!usb.txReady);
     524:	4a0f      	ldr	r2, [pc, #60]	; (564 <main+0x80>)
     526:	7d13      	ldrb	r3, [r2, #20]
     528:	2b00      	cmp	r3, #0
     52a:	d0fc      	beq.n	526 <main+0x42>
			if (toolApp.IsAppConnected())
     52c:	4668      	mov	r0, sp
     52e:	47a8      	blx	r5
     530:	2800      	cmp	r0, #0
     532:	d007      	beq.n	544 <main+0x60>
				if (toolApp.localBuffer[sizeof(GAINMessageHeader)]==(uint8_t)'f')
     534:	466b      	mov	r3, sp
     536:	7a5b      	ldrb	r3, [r3, #9]
     538:	2b66      	cmp	r3, #102	; 0x66
     53a:	d0ed      	beq.n	518 <main+0x34>
					toolApp.handleCommunication();
     53c:	4668      	mov	r0, sp
     53e:	4b15      	ldr	r3, [pc, #84]	; (594 <main+0xb0>)
     540:	4798      	blx	r3
     542:	e7f3      	b.n	52c <main+0x48>
				usb.writeData(localbuffer,4);
     544:	2204      	movs	r2, #4
     546:	0021      	movs	r1, r4
     548:	4806      	ldr	r0, [pc, #24]	; (564 <main+0x80>)
     54a:	4b13      	ldr	r3, [pc, #76]	; (598 <main+0xb4>)
     54c:	4798      	blx	r3
				toolApp.setConnected(false);
     54e:	2100      	movs	r1, #0
     550:	4668      	mov	r0, sp
     552:	4b12      	ldr	r3, [pc, #72]	; (59c <main+0xb8>)
     554:	4798      	blx	r3
				delay_ms(100);
     556:	2064      	movs	r0, #100	; 0x64
     558:	4b04      	ldr	r3, [pc, #16]	; (56c <main+0x88>)
     55a:	4798      	blx	r3
     55c:	e7e6      	b.n	52c <main+0x48>
     55e:	46c0      	nop			; (mov r8, r8)
     560:	0000155d 	.word	0x0000155d
     564:	200004bc 	.word	0x200004bc
     568:	0000031d 	.word	0x0000031d
     56c:	000018c5 	.word	0x000018c5
     570:	200005e0 	.word	0x200005e0
     574:	00001179 	.word	0x00001179
     578:	00000481 	.word	0x00000481
     57c:	000005c1 	.word	0x000005c1
     580:	000007e1 	.word	0x000007e1
     584:	00000621 	.word	0x00000621
     588:	2000051c 	.word	0x2000051c
     58c:	000006c5 	.word	0x000006c5
     590:	000006ad 	.word	0x000006ad
     594:	000009e1 	.word	0x000009e1
     598:	0000025d 	.word	0x0000025d
     59c:	000005d9 	.word	0x000005d9

000005a0 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
     5a0:	4b02      	ldr	r3, [pc, #8]	; (5ac <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
     5a2:	681a      	ldr	r2, [r3, #0]
     5a4:	6813      	ldr	r3, [r2, #0]
     5a6:	3301      	adds	r3, #1
     5a8:	6013      	str	r3, [r2, #0]

}
     5aa:	4770      	bx	lr
     5ac:	20000560 	.word	0x20000560

000005b0 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
     5b0:	4b02      	ldr	r3, [pc, #8]	; (5bc <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
     5b2:	681b      	ldr	r3, [r3, #0]
     5b4:	2200      	movs	r2, #0
     5b6:	711a      	strb	r2, [r3, #4]

}
     5b8:	4770      	bx	lr
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	20000560 	.word	0x20000560

000005c0 <_ZN16Maintenance_ToolC1Ev>:


// default constructor
Maintenance_Tool::Maintenance_Tool()
{
	ptrMaintenanceTool=this;
     5c0:	4b04      	ldr	r3, [pc, #16]	; (5d4 <_ZN16Maintenance_ToolC1Ev+0x14>)
     5c2:	6018      	str	r0, [r3, #0]
	maintenanceIsConnected = false;
     5c4:	2300      	movs	r3, #0
     5c6:	2254      	movs	r2, #84	; 0x54
     5c8:	5483      	strb	r3, [r0, r2]
	nextMaintenanceSyncTime = 0;
     5ca:	6483      	str	r3, [r0, #72]	; 0x48
	nextMaintenanceUsageTimerSyncTime = 0;
     5cc:	64c3      	str	r3, [r0, #76]	; 0x4c
	ticks=0;
     5ce:	6003      	str	r3, [r0, #0]
	
} //Maintenance_Tool
     5d0:	4770      	bx	lr
     5d2:	46c0      	nop			; (mov r8, r8)
     5d4:	20000560 	.word	0x20000560

000005d8 <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
     5d8:	b510      	push	{r4, lr}
		maintenanceIsConnected = isConnected;
     5da:	2354      	movs	r3, #84	; 0x54
     5dc:	54c1      	strb	r1, [r0, r3]
		if (isConnected)
     5de:	2900      	cmp	r1, #0
     5e0:	d103      	bne.n	5ea <_ZN16Maintenance_Tool12setConnectedEb+0x12>
				
				
		} 
		else
		{
			usbTimer.Stop();
     5e2:	4808      	ldr	r0, [pc, #32]	; (604 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
     5e4:	4b08      	ldr	r3, [pc, #32]	; (608 <_ZN16Maintenance_Tool12setConnectedEb+0x30>)
     5e6:	4798      	blx	r3
				
		}

	//lastMaintenanceMessageReceivedTime = controller.ticks();
	}
     5e8:	bd10      	pop	{r4, pc}
			usbTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
     5ea:	4c06      	ldr	r4, [pc, #24]	; (604 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
     5ec:	22fa      	movs	r2, #250	; 0xfa
     5ee:	0092      	lsls	r2, r2, #2
     5f0:	4906      	ldr	r1, [pc, #24]	; (60c <_ZN16Maintenance_Tool12setConnectedEb+0x34>)
     5f2:	0020      	movs	r0, r4
     5f4:	4b06      	ldr	r3, [pc, #24]	; (610 <_ZN16Maintenance_Tool12setConnectedEb+0x38>)
     5f6:	4798      	blx	r3
			usbTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
     5f8:	4a06      	ldr	r2, [pc, #24]	; (614 <_ZN16Maintenance_Tool12setConnectedEb+0x3c>)
     5fa:	4907      	ldr	r1, [pc, #28]	; (618 <_ZN16Maintenance_Tool12setConnectedEb+0x40>)
     5fc:	0020      	movs	r0, r4
     5fe:	4b07      	ldr	r3, [pc, #28]	; (61c <_ZN16Maintenance_Tool12setConnectedEb+0x44>)
     600:	4798      	blx	r3
     602:	e7f1      	b.n	5e8 <_ZN16Maintenance_Tool12setConnectedEb+0x10>
     604:	200005bc 	.word	0x200005bc
     608:	00000cf1 	.word	0x00000cf1
     60c:	000005a1 	.word	0x000005a1
     610:	00000d81 	.word	0x00000d81
     614:	0000ea60 	.word	0x0000ea60
     618:	000005b1 	.word	0x000005b1
     61c:	00000da1 	.word	0x00000da1

00000620 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
     620:	b570      	push	{r4, r5, r6, lr}
     622:	0004      	movs	r4, r0
	result=false;
     624:	2300      	movs	r3, #0
     626:	22f8      	movs	r2, #248	; 0xf8
     628:	5483      	strb	r3, [r0, r2]
	magic=0;
     62a:	3220      	adds	r2, #32
     62c:	5083      	str	r3, [r0, r2]
	if (gotAccess==true)
     62e:	33f9      	adds	r3, #249	; 0xf9
     630:	5cc3      	ldrb	r3, [r0, r3]
     632:	2b00      	cmp	r3, #0
     634:	d006      	beq.n	644 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x24>
		result=gotAccess;
     636:	3a18      	subs	r2, #24
     638:	3aff      	subs	r2, #255	; 0xff
     63a:	23f8      	movs	r3, #248	; 0xf8
     63c:	54c2      	strb	r2, [r0, r3]
	return	result;
     63e:	23f8      	movs	r3, #248	; 0xf8
     640:	5ce0      	ldrb	r0, [r4, r3]
}
     642:	bd70      	pop	{r4, r5, r6, pc}
		if (usb.rxReady)
     644:	4b15      	ldr	r3, [pc, #84]	; (69c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     646:	7d5b      	ldrb	r3, [r3, #21]
     648:	2b00      	cmp	r3, #0
     64a:	d013      	beq.n	674 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x54>
     64c:	1d42      	adds	r2, r0, #5
     64e:	3009      	adds	r0, #9
     650:	2300      	movs	r3, #0
				magic=magic<<8;
     652:	021b      	lsls	r3, r3, #8
				magic|= localBuffer[i];
     654:	7811      	ldrb	r1, [r2, #0]
     656:	430b      	orrs	r3, r1
     658:	3201      	adds	r2, #1
			for (int i = 0; i < 4; i++)
     65a:	4282      	cmp	r2, r0
     65c:	d1f9      	bne.n	652 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x32>
     65e:	228c      	movs	r2, #140	; 0x8c
     660:	0052      	lsls	r2, r2, #1
     662:	50a3      	str	r3, [r4, r2]
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
     664:	4a0e      	ldr	r2, [pc, #56]	; (6a0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
     666:	0010      	movs	r0, r2
     668:	4058      	eors	r0, r3
     66a:	218a      	movs	r1, #138	; 0x8a
     66c:	0049      	lsls	r1, r1, #1
     66e:	5060      	str	r0, [r4, r1]
			if (xorResult==0)
     670:	4293      	cmp	r3, r2
     672:	d005      	beq.n	680 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x60>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     674:	1d61      	adds	r1, r4, #5
     676:	2240      	movs	r2, #64	; 0x40
     678:	4808      	ldr	r0, [pc, #32]	; (69c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     67a:	4b0a      	ldr	r3, [pc, #40]	; (6a4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
     67c:	4798      	blx	r3
     67e:	e7de      	b.n	63e <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1e>
				gotAccess=true;
     680:	2301      	movs	r3, #1
     682:	22f9      	movs	r2, #249	; 0xf9
     684:	54a3      	strb	r3, [r4, r2]
				result=true;
     686:	25f8      	movs	r5, #248	; 0xf8
     688:	5563      	strb	r3, [r4, r5]
				is_MTPC_Beaming=true;
     68a:	7123      	strb	r3, [r4, #4]
				setConnected(true);
     68c:	3914      	subs	r1, #20
     68e:	39ff      	subs	r1, #255	; 0xff
     690:	0020      	movs	r0, r4
     692:	4b05      	ldr	r3, [pc, #20]	; (6a8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x88>)
     694:	4798      	blx	r3
				return	result;
     696:	5d60      	ldrb	r0, [r4, r5]
     698:	e7d3      	b.n	642 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x22>
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	200004bc 	.word	0x200004bc
     6a0:	61626364 	.word	0x61626364
     6a4:	0000034d 	.word	0x0000034d
     6a8:	000005d9 	.word	0x000005d9

000006ac <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
     6ac:	2301      	movs	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
     6ae:	2100      	movs	r1, #0
     6b0:	18c2      	adds	r2, r0, r3
     6b2:	7111      	strb	r1, [r2, #4]
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
     6b4:	b2da      	uxtb	r2, r3
     6b6:	3301      	adds	r3, #1
     6b8:	2b41      	cmp	r3, #65	; 0x41
     6ba:	d1f9      	bne.n	6b0 <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x4>
     6bc:	33db      	adds	r3, #219	; 0xdb
     6be:	54c2      	strb	r2, [r0, r3]
	}
	return	i;
}
     6c0:	0010      	movs	r0, r2
     6c2:	4770      	bx	lr

000006c4 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv>:
// 	io.writeData(&checksum, sizeof(checksum));

	return result;
	}
	
bool	Maintenance_Tool::NotifyConnectionAcknowledge(void){
     6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6c6:	0005      	movs	r5, r0
	memcpy(&deviceID.cpuSerialNumber,cpuSerial,sizeof(cpuSerial));
     6c8:	30b0      	adds	r0, #176	; 0xb0
     6ca:	1ce9      	adds	r1, r5, #3
     6cc:	31ff      	adds	r1, #255	; 0xff
     6ce:	2210      	movs	r2, #16
     6d0:	4b14      	ldr	r3, [pc, #80]	; (724 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x60>)
     6d2:	4798      	blx	r3
	//deviceID.cpuSerialNumber=cpuSerial;
	delay_ms(200);
     6d4:	20c8      	movs	r0, #200	; 0xc8
     6d6:	4b14      	ldr	r3, [pc, #80]	; (728 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x64>)
     6d8:	4798      	blx	r3
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     6da:	4914      	ldr	r1, [pc, #80]	; (72c <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x68>)
     6dc:	4814      	ldr	r0, [pc, #80]	; (730 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x6c>)
     6de:	4b15      	ldr	r3, [pc, #84]	; (734 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x70>)
     6e0:	4798      	blx	r3
	usb<<"CPU Serial: ";
	for (i = 0; i < sizeof(cpuSerial); i++)
     6e2:	2200      	movs	r2, #0
     6e4:	238e      	movs	r3, #142	; 0x8e
     6e6:	005b      	lsls	r3, r3, #1
     6e8:	54ea      	strb	r2, [r5, r3]
     6ea:	2300      	movs	r3, #0
	{
		usb.print(cpuSerial[i],HEX);
     6ec:	4c10      	ldr	r4, [pc, #64]	; (730 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x6c>)
     6ee:	4f12      	ldr	r7, [pc, #72]	; (738 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x74>)
	for (i = 0; i < sizeof(cpuSerial); i++)
     6f0:	268e      	movs	r6, #142	; 0x8e
     6f2:	0076      	lsls	r6, r6, #1
		usb.print(cpuSerial[i],HEX);
     6f4:	18eb      	adds	r3, r5, r3
     6f6:	3303      	adds	r3, #3
     6f8:	33ff      	adds	r3, #255	; 0xff
     6fa:	7819      	ldrb	r1, [r3, #0]
     6fc:	2210      	movs	r2, #16
     6fe:	0020      	movs	r0, r4
     700:	47b8      	blx	r7
	for (i = 0; i < sizeof(cpuSerial); i++)
     702:	5dab      	ldrb	r3, [r5, r6]
     704:	3301      	adds	r3, #1
     706:	b2db      	uxtb	r3, r3
     708:	55ab      	strb	r3, [r5, r6]
     70a:	2b0f      	cmp	r3, #15
     70c:	d9f2      	bls.n	6f4 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x30>
	}

	usb.println();
     70e:	4808      	ldr	r0, [pc, #32]	; (730 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x6c>)
     710:	4b0a      	ldr	r3, [pc, #40]	; (73c <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x78>)
     712:	4798      	blx	r3
	result=(bool)(i>0);
     714:	238e      	movs	r3, #142	; 0x8e
     716:	005b      	lsls	r3, r3, #1
     718:	5ce8      	ldrb	r0, [r5, r3]
     71a:	4240      	negs	r0, r0
     71c:	0fc0      	lsrs	r0, r0, #31
     71e:	3b24      	subs	r3, #36	; 0x24
     720:	54e8      	strb	r0, [r5, r3]
	return result;
}
     722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     724:	00004d2d 	.word	0x00004d2d
     728:	000018c5 	.word	0x000018c5
     72c:	0000508c 	.word	0x0000508c
     730:	200004bc 	.word	0x200004bc
     734:	00000ad5 	.word	0x00000ad5
     738:	00000bc5 	.word	0x00000bc5
     73c:	00000af9 	.word	0x00000af9

00000740 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17GAINMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( GAINMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
     740:	2354      	movs	r3, #84	; 0x54
     742:	5cc3      	ldrb	r3, [r0, r3]
     744:	2b00      	cmp	r3, #0
     746:	d105      	bne.n	754 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17GAINMessageHeader+0x14>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
     748:	6483      	str	r3, [r0, #72]	; 0x48
		maintenanceIsConnected = true;
     74a:	3301      	adds	r3, #1
     74c:	2254      	movs	r2, #84	; 0x54
     74e:	5483      	strb	r3, [r0, r2]
		bSendNotifications = true;
     750:	3201      	adds	r2, #1
     752:	5483      	strb	r3, [r0, r2]
// 	#ifdef E_DEVICE
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
     754:	23f8      	movs	r3, #248	; 0xf8
     756:	5cc0      	ldrb	r0, [r0, r3]
	}
     758:	4770      	bx	lr

0000075a <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
     75a:	b530      	push	{r4, r5, lr}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
     75c:	0855      	lsrs	r5, r2, #1
     75e:	2d00      	cmp	r5, #0
     760:	dd07      	ble.n	772 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x18>
     762:	2000      	movs	r0, #0
		checksum ^= ((uint16*)data)[i];
     764:	0044      	lsls	r4, r0, #1
     766:	5ae4      	ldrh	r4, [r4, r3]
     768:	4061      	eors	r1, r4
	for (i=0; i<(size/2); i++)
     76a:	3001      	adds	r0, #1
     76c:	b280      	uxth	r0, r0
     76e:	42a8      	cmp	r0, r5
     770:	dbf8      	blt.n	764 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0xa>
     772:	0008      	movs	r0, r1
	
	if (size & 0x01)
     774:	07d4      	lsls	r4, r2, #31
     776:	d503      	bpl.n	780 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x26>
		checksum ^= (uint16)((uint8*)data)[size - 1];
     778:	189b      	adds	r3, r3, r2
     77a:	3b01      	subs	r3, #1
     77c:	7818      	ldrb	r0, [r3, #0]
     77e:	4048      	eors	r0, r1

	return checksum;
	}
     780:	bd30      	pop	{r4, r5, pc}
	...

00000784 <_ZN16Maintenance_Tool17calculateChecksumERK17GAINMessageHeader>:
	{
     784:	b570      	push	{r4, r5, r6, lr}
     786:	0004      	movs	r4, r0
     788:	000b      	movs	r3, r1
	checksum=0;
     78a:	25fc      	movs	r5, #252	; 0xfc
     78c:	2200      	movs	r2, #0
     78e:	5342      	strh	r2, [r0, r5]
	checksum = calculateChecksum(0, sizeof(header), &header);
     790:	3204      	adds	r2, #4
     792:	2100      	movs	r1, #0
     794:	4e01      	ldr	r6, [pc, #4]	; (79c <_ZN16Maintenance_Tool17calculateChecksumERK17GAINMessageHeader+0x18>)
     796:	47b0      	blx	r6
     798:	5360      	strh	r0, [r4, r5]
	}
     79a:	bd70      	pop	{r4, r5, r6, pc}
     79c:	0000075b 	.word	0x0000075b

000007a0 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
	}
	return	ticks;
}

void Maintenance_Tool::GetCPUSerialNumber(uint8_t* buffer)
{
     7a0:	b570      	push	{r4, r5, r6, lr}
     7a2:	000c      	movs	r4, r1
	memcpy(buffer, (uint8_t*)0x0080A00C, 4);
     7a4:	2204      	movs	r2, #4
     7a6:	4909      	ldr	r1, [pc, #36]	; (7cc <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x2c>)
     7a8:	0020      	movs	r0, r4
     7aa:	4d09      	ldr	r5, [pc, #36]	; (7d0 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x30>)
     7ac:	47a8      	blx	r5
	memcpy(buffer + 4, (uint8_t*)0x0080A040, 4);
     7ae:	1d20      	adds	r0, r4, #4
     7b0:	2204      	movs	r2, #4
     7b2:	4908      	ldr	r1, [pc, #32]	; (7d4 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x34>)
     7b4:	47a8      	blx	r5
	memcpy(buffer + 8, (uint8_t*)0x0080A044, 4);
     7b6:	0020      	movs	r0, r4
     7b8:	3008      	adds	r0, #8
     7ba:	2204      	movs	r2, #4
     7bc:	4906      	ldr	r1, [pc, #24]	; (7d8 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x38>)
     7be:	47a8      	blx	r5
	memcpy(buffer + 12, (uint8_t*)0x0080A048, 4);
     7c0:	0020      	movs	r0, r4
     7c2:	300c      	adds	r0, #12
     7c4:	2204      	movs	r2, #4
     7c6:	4905      	ldr	r1, [pc, #20]	; (7dc <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x3c>)
     7c8:	47a8      	blx	r5
     7ca:	bd70      	pop	{r4, r5, r6, pc}
     7cc:	0080a00c 	.word	0x0080a00c
     7d0:	00004d2d 	.word	0x00004d2d
     7d4:	0080a040 	.word	0x0080a040
     7d8:	0080a044 	.word	0x0080a044
     7dc:	0080a048 	.word	0x0080a048

000007e0 <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
     7e0:	b570      	push	{r4, r5, r6, lr}
     7e2:	0004      	movs	r4, r0
	ticks=0;
     7e4:	2500      	movs	r5, #0
     7e6:	6005      	str	r5, [r0, #0]
	GetCPUSerialNumber(cpuSerial);
     7e8:	1cc1      	adds	r1, r0, #3
     7ea:	31ff      	adds	r1, #255	; 0xff
     7ec:	4b05      	ldr	r3, [pc, #20]	; (804 <_ZN16Maintenance_Tool4InitEv+0x24>)
     7ee:	4798      	blx	r3
	memcpy(localBuffer,0,4);
     7f0:	1d60      	adds	r0, r4, #5
     7f2:	2204      	movs	r2, #4
     7f4:	2100      	movs	r1, #0
     7f6:	4b04      	ldr	r3, [pc, #16]	; (808 <_ZN16Maintenance_Tool4InitEv+0x28>)
     7f8:	4798      	blx	r3
	gotAccess=false;
     7fa:	23f9      	movs	r3, #249	; 0xf9
     7fc:	54e5      	strb	r5, [r4, r3]
	return result;
     7fe:	3b01      	subs	r3, #1
     800:	5ce0      	ldrb	r0, [r4, r3]
}
     802:	bd70      	pop	{r4, r5, r6, pc}
     804:	000007a1 	.word	0x000007a1
     808:	00004d2d 	.word	0x00004d2d

0000080c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb>:
	{
     80c:	b570      	push	{r4, r5, r6, lr}
     80e:	0005      	movs	r5, r0
     810:	000c      	movs	r4, r1
	header.selector = header.command;
     812:	780b      	ldrb	r3, [r1, #0]
     814:	704b      	strb	r3, [r1, #1]
	header.command = kGAINNotifyCommandReceived;
     816:	2165      	movs	r1, #101	; 0x65
     818:	7021      	strb	r1, [r4, #0]
	header.dataSize = 0;
     81a:	2100      	movs	r1, #0
     81c:	8061      	strh	r1, [r4, #2]
	if (!result)
     81e:	2a00      	cmp	r2, #0
     820:	d102      	bne.n	828 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x1c>
		header.selector |= 0x80;
     822:	3a80      	subs	r2, #128	; 0x80
     824:	4313      	orrs	r3, r2
     826:	7063      	strb	r3, [r4, #1]
	checksum = calculateChecksum(header);
     828:	0021      	movs	r1, r4
     82a:	0028      	movs	r0, r5
     82c:	4b04      	ldr	r3, [pc, #16]	; (840 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x34>)
     82e:	4798      	blx	r3
     830:	23fc      	movs	r3, #252	; 0xfc
     832:	52e8      	strh	r0, [r5, r3]
	usb.writeData(&header, sizeof(header));
     834:	2204      	movs	r2, #4
     836:	0021      	movs	r1, r4
     838:	4802      	ldr	r0, [pc, #8]	; (844 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x38>)
     83a:	4b03      	ldr	r3, [pc, #12]	; (848 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x3c>)
     83c:	4798      	blx	r3
	}
     83e:	bd70      	pop	{r4, r5, r6, pc}
     840:	00000785 	.word	0x00000785
     844:	200004bc 	.word	0x200004bc
     848:	0000025d 	.word	0x0000025d

0000084c <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader>:
bool Maintenance_Tool::handleGAINCommandReadParameters(GAINMessageHeader& header){
     84c:	b570      	push	{r4, r5, r6, lr}
		if (result){
     84e:	780a      	ldrb	r2, [r1, #0]
	 	bool	result(header.command == kGAINCommandReadParameters);
     850:	2300      	movs	r3, #0
		if (result){
     852:	2a48      	cmp	r2, #72	; 0x48
     854:	d001      	beq.n	85a <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0xe>
}
     856:	0018      	movs	r0, r3
     858:	bd70      	pop	{r4, r5, r6, pc}
			r=flash.ReadAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(userParameters));
     85a:	1c44      	adds	r4, r0, #1
     85c:	34ff      	adds	r4, #255	; 0xff
			uint32_t add=(uint32_t)&flashMap->parameters;
     85e:	4b0b      	ldr	r3, [pc, #44]	; (88c <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0x40>)
     860:	681a      	ldr	r2, [r3, #0]
     862:	2380      	movs	r3, #128	; 0x80
     864:	031b      	lsls	r3, r3, #12
     866:	469c      	mov	ip, r3
     868:	4462      	add	r2, ip
			r=flash.ReadAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(userParameters));
     86a:	2301      	movs	r3, #1
     86c:	0021      	movs	r1, r4
     86e:	4808      	ldr	r0, [pc, #32]	; (890 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0x44>)
     870:	4d08      	ldr	r5, [pc, #32]	; (894 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0x48>)
     872:	47a8      	blx	r5
	 	bool	result(header.command == kGAINCommandReadParameters);
     874:	2301      	movs	r3, #1
			 if (r>0)
     876:	2800      	cmp	r0, #0
     878:	d0ed      	beq.n	856 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0xa>
				w= usb.writeData((void*)&parameters,sizeof(userParameters));
     87a:	2201      	movs	r2, #1
     87c:	0021      	movs	r1, r4
     87e:	4806      	ldr	r0, [pc, #24]	; (898 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0x4c>)
     880:	4b06      	ldr	r3, [pc, #24]	; (89c <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0x50>)
     882:	4798      	blx	r3
				 result=w>0;
     884:	1e43      	subs	r3, r0, #1
     886:	4198      	sbcs	r0, r3
     888:	b2c3      	uxtb	r3, r0
     88a:	e7e4      	b.n	856 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0xa>
     88c:	200005dc 	.word	0x200005dc
     890:	200005e0 	.word	0x200005e0
     894:	000013f1 	.word	0x000013f1
     898:	200004bc 	.word	0x200004bc
     89c:	0000025d 	.word	0x0000025d

000008a0 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader>:
bool Maintenance_Tool::handleGAINCommandWriteParameters(GAINMessageHeader& header)	{
     8a0:	b510      	push	{r4, lr}
	if (result){
     8a2:	884a      	ldrh	r2, [r1, #2]
	bool	result(header.dataSize == sizeof(userParameters));
     8a4:	2300      	movs	r3, #0
	if (result){
     8a6:	2a01      	cmp	r2, #1
     8a8:	d001      	beq.n	8ae <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader+0xe>
}
     8aa:	0018      	movs	r0, r3
     8ac:	bd10      	pop	{r4, pc}
		r= usb.readData((void*)&parameters,sizeof(userParameters));
     8ae:	1c44      	adds	r4, r0, #1
     8b0:	34ff      	adds	r4, #255	; 0xff
     8b2:	0021      	movs	r1, r4
     8b4:	480a      	ldr	r0, [pc, #40]	; (8e0 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader+0x40>)
     8b6:	4b0b      	ldr	r3, [pc, #44]	; (8e4 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader+0x44>)
     8b8:	4798      	blx	r3
	bool	result(header.dataSize == sizeof(userParameters));
     8ba:	2301      	movs	r3, #1
		if (r>0)
     8bc:	2800      	cmp	r0, #0
     8be:	d0f4      	beq.n	8aa <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader+0xa>
			uint32_t add=(uint32_t)&flashMap->parameters;
     8c0:	4b09      	ldr	r3, [pc, #36]	; (8e8 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader+0x48>)
     8c2:	681a      	ldr	r2, [r3, #0]
     8c4:	2380      	movs	r3, #128	; 0x80
     8c6:	031b      	lsls	r3, r3, #12
     8c8:	469c      	mov	ip, r3
     8ca:	4462      	add	r2, ip
			r=flash.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(userParameters));
     8cc:	2301      	movs	r3, #1
     8ce:	0021      	movs	r1, r4
     8d0:	4806      	ldr	r0, [pc, #24]	; (8ec <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader+0x4c>)
     8d2:	4c07      	ldr	r4, [pc, #28]	; (8f0 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader+0x50>)
     8d4:	47a0      	blx	r4
			result=(bool)(r==0);
     8d6:	4243      	negs	r3, r0
     8d8:	4143      	adcs	r3, r0
     8da:	b2db      	uxtb	r3, r3
     8dc:	e7e5      	b.n	8aa <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader+0xa>
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	200004bc 	.word	0x200004bc
     8e4:	000001f9 	.word	0x000001f9
     8e8:	200005dc 	.word	0x200005dc
     8ec:	200005e0 	.word	0x200005e0
     8f0:	00001349 	.word	0x00001349

000008f4 <_ZN16Maintenance_Tool17handleGAINCommandEv>:
bool Maintenance_Tool::handleGAINCommand(void){
     8f4:	b570      	push	{r4, r5, r6, lr}
     8f6:	0004      	movs	r4, r0
	if ((localBuffer[n]>=kGAINCommandConnect)
     8f8:	7a83      	ldrb	r3, [r0, #10]
     8fa:	001a      	movs	r2, r3
     8fc:	3a41      	subs	r2, #65	; 0x41
     8fe:	2a0d      	cmp	r2, #13
     900:	d810      	bhi.n	924 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x30>
		gotTask=true;
     902:	2201      	movs	r2, #1
     904:	21fb      	movs	r1, #251	; 0xfb
     906:	5442      	strb	r2, [r0, r1]
		result=gotTask;
     908:	3903      	subs	r1, #3
     90a:	5442      	strb	r2, [r0, r1]
		header.command=localBuffer[n];
     90c:	3297      	adds	r2, #151	; 0x97
     90e:	5483      	strb	r3, [r0, r2]
		switch (header.command)
     910:	2398      	movs	r3, #152	; 0x98
     912:	5ce3      	ldrb	r3, [r4, r3]
     914:	3b41      	subs	r3, #65	; 0x41
     916:	b2da      	uxtb	r2, r3
     918:	2a0d      	cmp	r2, #13
     91a:	d84f      	bhi.n	9bc <_ZN16Maintenance_Tool17handleGAINCommandEv+0xc8>
     91c:	0093      	lsls	r3, r2, #2
     91e:	4a29      	ldr	r2, [pc, #164]	; (9c4 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xd0>)
     920:	58d3      	ldr	r3, [r2, r3]
     922:	469f      	mov	pc, r3
		gotTask=false;
     924:	2200      	movs	r2, #0
     926:	23fb      	movs	r3, #251	; 0xfb
     928:	54c2      	strb	r2, [r0, r3]
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
     92a:	1d41      	adds	r1, r0, #5
     92c:	4d26      	ldr	r5, [pc, #152]	; (9c8 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xd4>)
     92e:	3240      	adds	r2, #64	; 0x40
     930:	0028      	movs	r0, r5
     932:	4b26      	ldr	r3, [pc, #152]	; (9cc <_ZN16Maintenance_Tool17handleGAINCommandEv+0xd8>)
     934:	4798      	blx	r3
		result=usb.rxReady;
     936:	7d6b      	ldrb	r3, [r5, #21]
     938:	b2db      	uxtb	r3, r3
     93a:	22f8      	movs	r2, #248	; 0xf8
     93c:	54a3      	strb	r3, [r4, r2]
	if (result)
     93e:	2b00      	cmp	r3, #0
     940:	d1e6      	bne.n	910 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x1c>
	return result;
     942:	23f8      	movs	r3, #248	; 0xf8
     944:	5ce0      	ldrb	r0, [r4, r3]
	}
     946:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
     948:	0021      	movs	r1, r4
     94a:	3198      	adds	r1, #152	; 0x98
     94c:	0020      	movs	r0, r4
     94e:	4b20      	ldr	r3, [pc, #128]	; (9d0 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xdc>)
     950:	4798      	blx	r3
     952:	23f8      	movs	r3, #248	; 0xf8
     954:	54e0      	strb	r0, [r4, r3]
				break;
     956:	e7f4      	b.n	942 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x4e>
	maintenanceIsConnected = false;
     958:	2300      	movs	r3, #0
     95a:	2254      	movs	r2, #84	; 0x54
     95c:	54a3      	strb	r3, [r4, r2]
	bSendNotifications = false;
     95e:	3201      	adds	r2, #1
     960:	54a3      	strb	r3, [r4, r2]
				break;
     962:	e7ee      	b.n	942 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x4e>
	bSendNotifications = (header.selector == 1);
     964:	0023      	movs	r3, r4
     966:	3398      	adds	r3, #152	; 0x98
     968:	785b      	ldrb	r3, [r3, #1]
     96a:	3b01      	subs	r3, #1
     96c:	425a      	negs	r2, r3
     96e:	4153      	adcs	r3, r2
     970:	2255      	movs	r2, #85	; 0x55
     972:	54a3      	strb	r3, [r4, r2]
				break;
     974:	e7e5      	b.n	942 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x4e>
				notifyGAINCommandReceived( header, result);
     976:	0021      	movs	r1, r4
     978:	3198      	adds	r1, #152	; 0x98
     97a:	2201      	movs	r2, #1
     97c:	0020      	movs	r0, r4
     97e:	4b15      	ldr	r3, [pc, #84]	; (9d4 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xe0>)
     980:	4798      	blx	r3
				result = handleGAINCommandReset(header);
     982:	2201      	movs	r2, #1
     984:	23f8      	movs	r3, #248	; 0xf8
     986:	54e2      	strb	r2, [r4, r3]
				break;
     988:	e7db      	b.n	942 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x4e>
	bool	result(header.dataSize == sizeof(GAINControllerPortState));
     98a:	0023      	movs	r3, r4
     98c:	3398      	adds	r3, #152	; 0x98
     98e:	885b      	ldrh	r3, [r3, #2]
     990:	3b1a      	subs	r3, #26
     992:	425a      	negs	r2, r3
     994:	4153      	adcs	r3, r2
				result = handleGAINCommandSetControllerState( header);
     996:	22f8      	movs	r2, #248	; 0xf8
     998:	54a3      	strb	r3, [r4, r2]
				break;
     99a:	e7d2      	b.n	942 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x4e>
				result = handleGAINCommandWriteParameters( header);
     99c:	0021      	movs	r1, r4
     99e:	3198      	adds	r1, #152	; 0x98
     9a0:	0020      	movs	r0, r4
     9a2:	4b0d      	ldr	r3, [pc, #52]	; (9d8 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xe4>)
     9a4:	4798      	blx	r3
     9a6:	23f8      	movs	r3, #248	; 0xf8
     9a8:	54e0      	strb	r0, [r4, r3]
			break;
     9aa:	e7ca      	b.n	942 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x4e>
				result = handleGAINCommandReadParameters( header);
     9ac:	0021      	movs	r1, r4
     9ae:	3198      	adds	r1, #152	; 0x98
     9b0:	0020      	movs	r0, r4
     9b2:	4b0a      	ldr	r3, [pc, #40]	; (9dc <_ZN16Maintenance_Tool17handleGAINCommandEv+0xe8>)
     9b4:	4798      	blx	r3
     9b6:	23f8      	movs	r3, #248	; 0xf8
     9b8:	54e0      	strb	r0, [r4, r3]
			break;
     9ba:	e7c2      	b.n	942 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x4e>
				result = false;
     9bc:	2200      	movs	r2, #0
     9be:	23f8      	movs	r3, #248	; 0xf8
     9c0:	54e2      	strb	r2, [r4, r3]
				break;
     9c2:	e7be      	b.n	942 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x4e>
     9c4:	00005054 	.word	0x00005054
     9c8:	200004bc 	.word	0x200004bc
     9cc:	0000034d 	.word	0x0000034d
     9d0:	00000741 	.word	0x00000741
     9d4:	0000080d 	.word	0x0000080d
     9d8:	000008a1 	.word	0x000008a1
     9dc:	0000084d 	.word	0x0000084d

000009e0 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
     9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9e2:	0004      	movs	r4, r0
	result=false;
     9e4:	2200      	movs	r2, #0
     9e6:	23f8      	movs	r3, #248	; 0xf8
     9e8:	54c2      	strb	r2, [r0, r3]
	if (gotAccess)
     9ea:	3301      	adds	r3, #1
     9ec:	5cc3      	ldrb	r3, [r0, r3]
     9ee:	2b00      	cmp	r3, #0
     9f0:	d043      	beq.n	a7a <_ZN16Maintenance_Tool19handleCommunicationEv+0x9a>
		if (usb.rxReady)
     9f2:	4b24      	ldr	r3, [pc, #144]	; (a84 <_ZN16Maintenance_Tool19handleCommunicationEv+0xa4>)
     9f4:	7d5b      	ldrb	r3, [r3, #21]
     9f6:	2b00      	cmp	r3, #0
     9f8:	d03b      	beq.n	a72 <_ZN16Maintenance_Tool19handleCommunicationEv+0x92>
			switch (input){
     9fa:	7a43      	ldrb	r3, [r0, #9]
     9fc:	2b3d      	cmp	r3, #61	; 0x3d
     9fe:	d01e      	beq.n	a3e <_ZN16Maintenance_Tool19handleCommunicationEv+0x5e>
     a00:	2b3e      	cmp	r3, #62	; 0x3e
     a02:	d017      	beq.n	a34 <_ZN16Maintenance_Tool19handleCommunicationEv+0x54>
     a04:	2b3c      	cmp	r3, #60	; 0x3c
     a06:	d003      	beq.n	a10 <_ZN16Maintenance_Tool19handleCommunicationEv+0x30>
					gotCommand=false;
     a08:	2200      	movs	r2, #0
     a0a:	23fa      	movs	r3, #250	; 0xfa
     a0c:	54c2      	strb	r2, [r0, r3]
				break;
     a0e:	e006      	b.n	a1e <_ZN16Maintenance_Tool19handleCommunicationEv+0x3e>
					gotCommand=true;
     a10:	3201      	adds	r2, #1
     a12:	33be      	adds	r3, #190	; 0xbe
     a14:	54c2      	strb	r2, [r0, r3]
					result = handleGAINCommand();
     a16:	4b1c      	ldr	r3, [pc, #112]	; (a88 <_ZN16Maintenance_Tool19handleCommunicationEv+0xa8>)
     a18:	4798      	blx	r3
     a1a:	23f8      	movs	r3, #248	; 0xf8
     a1c:	54e0      	strb	r0, [r4, r3]
			ClearLocalBuffer();
     a1e:	0020      	movs	r0, r4
     a20:	4b1a      	ldr	r3, [pc, #104]	; (a8c <_ZN16Maintenance_Tool19handleCommunicationEv+0xac>)
     a22:	4798      	blx	r3
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     a24:	1d61      	adds	r1, r4, #5
     a26:	2240      	movs	r2, #64	; 0x40
     a28:	4816      	ldr	r0, [pc, #88]	; (a84 <_ZN16Maintenance_Tool19handleCommunicationEv+0xa4>)
     a2a:	4b19      	ldr	r3, [pc, #100]	; (a90 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb0>)
     a2c:	4798      	blx	r3
	return result;
     a2e:	23f8      	movs	r3, #248	; 0xf8
     a30:	5ce0      	ldrb	r0, [r4, r3]
	}
     a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					result = handleGAINCommand();
     a34:	4b14      	ldr	r3, [pc, #80]	; (a88 <_ZN16Maintenance_Tool19handleCommunicationEv+0xa8>)
     a36:	4798      	blx	r3
     a38:	23f8      	movs	r3, #248	; 0xf8
     a3a:	54e0      	strb	r0, [r4, r3]
				break;
     a3c:	e7ef      	b.n	a1e <_ZN16Maintenance_Tool19handleCommunicationEv+0x3e>
					is_MTPC_Beaming=true;
     a3e:	2501      	movs	r5, #1
     a40:	7105      	strb	r5, [r0, #4]
					usbTimer.Stop();
     a42:	4e14      	ldr	r6, [pc, #80]	; (a94 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     a44:	0030      	movs	r0, r6
     a46:	4b14      	ldr	r3, [pc, #80]	; (a98 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb8>)
     a48:	4798      	blx	r3
					usbTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
     a4a:	4f14      	ldr	r7, [pc, #80]	; (a9c <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     a4c:	0039      	movs	r1, r7
     a4e:	0030      	movs	r0, r6
     a50:	4b13      	ldr	r3, [pc, #76]	; (aa0 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
     a52:	4798      	blx	r3
					usbTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
     a54:	4a13      	ldr	r2, [pc, #76]	; (aa4 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
     a56:	0039      	movs	r1, r7
     a58:	0030      	movs	r0, r6
     a5a:	4b13      	ldr	r3, [pc, #76]	; (aa8 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
     a5c:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
     a5e:	2300      	movs	r3, #0
     a60:	64a3      	str	r3, [r4, #72]	; 0x48
					maintenanceIsConnected = true;
     a62:	3354      	adds	r3, #84	; 0x54
     a64:	54e5      	strb	r5, [r4, r3]
					bSendNotifications = true;
     a66:	3301      	adds	r3, #1
     a68:	54e5      	strb	r5, [r4, r3]
					result=is_MTPC_Beaming;
     a6a:	7922      	ldrb	r2, [r4, #4]
     a6c:	33a3      	adds	r3, #163	; 0xa3
     a6e:	54e2      	strb	r2, [r4, r3]
				break;
     a70:	e7d5      	b.n	a1e <_ZN16Maintenance_Tool19handleCommunicationEv+0x3e>
			gotCommand=false;
     a72:	2200      	movs	r2, #0
     a74:	23fa      	movs	r3, #250	; 0xfa
     a76:	54c2      	strb	r2, [r0, r3]
     a78:	e7d4      	b.n	a24 <_ZN16Maintenance_Tool19handleCommunicationEv+0x44>
		gotCommand=false;
     a7a:	2200      	movs	r2, #0
     a7c:	23fa      	movs	r3, #250	; 0xfa
     a7e:	54c2      	strb	r2, [r0, r3]
     a80:	e7d5      	b.n	a2e <_ZN16Maintenance_Tool19handleCommunicationEv+0x4e>
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	200004bc 	.word	0x200004bc
     a88:	000008f5 	.word	0x000008f5
     a8c:	000006ad 	.word	0x000006ad
     a90:	0000034d 	.word	0x0000034d
     a94:	200005bc 	.word	0x200005bc
     a98:	00000cf1 	.word	0x00000cf1
     a9c:	000005b1 	.word	0x000005b1
     aa0:	00000e09 	.word	0x00000e09
     aa4:	0000ea60 	.word	0x0000ea60
     aa8:	00000da1 	.word	0x00000da1

00000aac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     aae:	0005      	movs	r5, r0
     ab0:	000f      	movs	r7, r1
     ab2:	1e16      	subs	r6, r2, #0
  size_t n = 0;
  while (size--) {
     ab4:	d00c      	beq.n	ad0 <_ZN5Print5writeEPKhj+0x24>
     ab6:	2400      	movs	r4, #0
    if (write(*buffer++)) n++;
     ab8:	5d39      	ldrb	r1, [r7, r4]
     aba:	682b      	ldr	r3, [r5, #0]
     abc:	681b      	ldr	r3, [r3, #0]
     abe:	0028      	movs	r0, r5
     ac0:	4798      	blx	r3
     ac2:	2800      	cmp	r0, #0
     ac4:	d002      	beq.n	acc <_ZN5Print5writeEPKhj+0x20>
     ac6:	3401      	adds	r4, #1
  while (size--) {
     ac8:	42a6      	cmp	r6, r4
     aca:	d1f5      	bne.n	ab8 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
     acc:	0020      	movs	r0, r4
     ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  size_t n = 0;
     ad0:	0014      	movs	r4, r2
  return n;
     ad2:	e7fb      	b.n	acc <_ZN5Print5writeEPKhj+0x20>

00000ad4 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
     ad4:	b570      	push	{r4, r5, r6, lr}
     ad6:	0005      	movs	r5, r0
     ad8:	1e0c      	subs	r4, r1, #0
      if (str == NULL) return 0;
     ada:	d009      	beq.n	af0 <_ZN5Print5printEPKc+0x1c>
      return write((const uint8_t *)str, strlen(str));
     adc:	0008      	movs	r0, r1
     ade:	4b05      	ldr	r3, [pc, #20]	; (af4 <_ZN5Print5printEPKc+0x20>)
     ae0:	4798      	blx	r3
     ae2:	0002      	movs	r2, r0
     ae4:	682b      	ldr	r3, [r5, #0]
     ae6:	685b      	ldr	r3, [r3, #4]
     ae8:	0021      	movs	r1, r4
     aea:	0028      	movs	r0, r5
     aec:	4798      	blx	r3
  return write(str);
}
     aee:	bd70      	pop	{r4, r5, r6, pc}
      if (str == NULL) return 0;
     af0:	2000      	movs	r0, #0
  return write(str);
     af2:	e7fc      	b.n	aee <_ZN5Print5printEPKc+0x1a>
     af4:	00004e45 	.word	0x00004e45

00000af8 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     af8:	b510      	push	{r4, lr}
      return write((const uint8_t *)str, strlen(str));
     afa:	6803      	ldr	r3, [r0, #0]
     afc:	685b      	ldr	r3, [r3, #4]
     afe:	2202      	movs	r2, #2
     b00:	4901      	ldr	r1, [pc, #4]	; (b08 <_ZN5Print7printlnEv+0x10>)
     b02:	4798      	blx	r3
  return write("\r\n");
}
     b04:	bd10      	pop	{r4, pc}
     b06:	46c0      	nop			; (mov r8, r8)
     b08:	000050a4 	.word	0x000050a4

00000b0c <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b0e:	46de      	mov	lr, fp
     b10:	4657      	mov	r7, sl
     b12:	464e      	mov	r6, r9
     b14:	4645      	mov	r5, r8
     b16:	b5e0      	push	{r5, r6, r7, lr}
     b18:	b08d      	sub	sp, #52	; 0x34
     b1a:	4683      	mov	fp, r0
     b1c:	000e      	movs	r6, r1
     b1e:	0010      	movs	r0, r2
     b20:	9201      	str	r2, [sp, #4]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     b22:	2100      	movs	r1, #0
     b24:	2320      	movs	r3, #32
     b26:	aa03      	add	r2, sp, #12
     b28:	54d1      	strb	r1, [r2, r3]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     b2a:	2801      	cmp	r0, #1
     b2c:	dd07      	ble.n	b3e <_ZN5Print11printNumberEmh+0x32>
     b2e:	af0b      	add	r7, sp, #44	; 0x2c

  do {
    char c = n % base;
     b30:	4b1a      	ldr	r3, [pc, #104]	; (b9c <_ZN5Print11printNumberEmh+0x90>)
     b32:	469a      	mov	sl, r3
    n /= base;
     b34:	4b1a      	ldr	r3, [pc, #104]	; (ba0 <_ZN5Print11printNumberEmh+0x94>)
     b36:	4699      	mov	r9, r3

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     b38:	23ff      	movs	r3, #255	; 0xff
     b3a:	4698      	mov	r8, r3
     b3c:	e007      	b.n	b4e <_ZN5Print11printNumberEmh+0x42>
  if (base < 2) base = 10;
     b3e:	230a      	movs	r3, #10
     b40:	9301      	str	r3, [sp, #4]
     b42:	e7f4      	b.n	b2e <_ZN5Print11printNumberEmh+0x22>
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     b44:	3437      	adds	r4, #55	; 0x37
     b46:	b2e4      	uxtb	r4, r4
     b48:	703c      	strb	r4, [r7, #0]
  } while(n);
     b4a:	2e00      	cmp	r6, #0
     b4c:	d010      	beq.n	b70 <_ZN5Print11printNumberEmh+0x64>
    char c = n % base;
     b4e:	9901      	ldr	r1, [sp, #4]
     b50:	0030      	movs	r0, r6
     b52:	47d0      	blx	sl
     b54:	000d      	movs	r5, r1
     b56:	b2cc      	uxtb	r4, r1
    n /= base;
     b58:	9901      	ldr	r1, [sp, #4]
     b5a:	0030      	movs	r0, r6
     b5c:	47c8      	blx	r9
     b5e:	0006      	movs	r6, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     b60:	3f01      	subs	r7, #1
     b62:	4643      	mov	r3, r8
     b64:	401d      	ands	r5, r3
     b66:	2d09      	cmp	r5, #9
     b68:	dcec      	bgt.n	b44 <_ZN5Print11printNumberEmh+0x38>
     b6a:	3430      	adds	r4, #48	; 0x30
     b6c:	b2e4      	uxtb	r4, r4
     b6e:	e7eb      	b.n	b48 <_ZN5Print11printNumberEmh+0x3c>
      if (str == NULL) return 0;
     b70:	2f00      	cmp	r7, #0
     b72:	d010      	beq.n	b96 <_ZN5Print11printNumberEmh+0x8a>
      return write((const uint8_t *)str, strlen(str));
     b74:	0038      	movs	r0, r7
     b76:	4b0b      	ldr	r3, [pc, #44]	; (ba4 <_ZN5Print11printNumberEmh+0x98>)
     b78:	4798      	blx	r3
     b7a:	0002      	movs	r2, r0
     b7c:	465b      	mov	r3, fp
     b7e:	681b      	ldr	r3, [r3, #0]
     b80:	685b      	ldr	r3, [r3, #4]
     b82:	0039      	movs	r1, r7
     b84:	4658      	mov	r0, fp
     b86:	4798      	blx	r3

  return write(str);
}
     b88:	b00d      	add	sp, #52	; 0x34
     b8a:	bc3c      	pop	{r2, r3, r4, r5}
     b8c:	4690      	mov	r8, r2
     b8e:	4699      	mov	r9, r3
     b90:	46a2      	mov	sl, r4
     b92:	46ab      	mov	fp, r5
     b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (str == NULL) return 0;
     b96:	2000      	movs	r0, #0
  return write(str);
     b98:	e7f6      	b.n	b88 <_ZN5Print11printNumberEmh+0x7c>
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	00004cc9 	.word	0x00004cc9
     ba0:	00004bbd 	.word	0x00004bbd
     ba4:	00004e45 	.word	0x00004e45

00000ba8 <_ZN5Print5printEmi>:
{
     ba8:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
     baa:	2a00      	cmp	r2, #0
     bac:	d003      	beq.n	bb6 <_ZN5Print5printEmi+0xe>
  else return printNumber(n, base);
     bae:	b2d2      	uxtb	r2, r2
     bb0:	4b03      	ldr	r3, [pc, #12]	; (bc0 <_ZN5Print5printEmi+0x18>)
     bb2:	4798      	blx	r3
}
     bb4:	bd10      	pop	{r4, pc}
  if (base == 0) return write(n);
     bb6:	b2c9      	uxtb	r1, r1
     bb8:	6803      	ldr	r3, [r0, #0]
     bba:	681b      	ldr	r3, [r3, #0]
     bbc:	4798      	blx	r3
     bbe:	e7f9      	b.n	bb4 <_ZN5Print5printEmi+0xc>
     bc0:	00000b0d 	.word	0x00000b0d

00000bc4 <_ZN5Print5printEhi>:
{
     bc4:	b510      	push	{r4, lr}
  return print((unsigned long) b, base);
     bc6:	4b01      	ldr	r3, [pc, #4]	; (bcc <_ZN5Print5printEhi+0x8>)
     bc8:	4798      	blx	r3
}
     bca:	bd10      	pop	{r4, pc}
     bcc:	00000ba9 	.word	0x00000ba9

00000bd0 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
	ptrSerialTerminalClass->timeout=true;
     bd0:	4b03      	ldr	r3, [pc, #12]	; (be0 <_ZL14USBTimeoutTaskPK10timer_task+0x10>)
     bd2:	2201      	movs	r2, #1
     bd4:	6819      	ldr	r1, [r3, #0]
     bd6:	708a      	strb	r2, [r1, #2]
	ptrSerialTerminalClass->terminalStarted=false;
     bd8:	681b      	ldr	r3, [r3, #0]
     bda:	2200      	movs	r2, #0
     bdc:	705a      	strb	r2, [r3, #1]
}
     bde:	4770      	bx	lr
     be0:	20000564 	.word	0x20000564

00000be4 <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
{
	ptrSerialTerminalClass=this;
     be4:	4b01      	ldr	r3, [pc, #4]	; (bec <_ZN20SerialTerminal_ClassC1Ev+0x8>)
     be6:	6018      	str	r0, [r3, #0]
} //SerialTerminal_Class
     be8:	4770      	bx	lr
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	20000564 	.word	0x20000564

00000bf0 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
{
} //~SerialTerminal_Class
     bf0:	4770      	bx	lr
	...

00000bf4 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
     bf4:	b570      	push	{r4, r5, r6, lr}
     bf6:	0004      	movs	r4, r0
		//vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
		if (vbusDetected)
     bf8:	78c3      	ldrb	r3, [r0, #3]
     bfa:	2b00      	cmp	r3, #0
     bfc:	d103      	bne.n	c06 <_ZN20SerialTerminal_Class6OnInitEv+0x12>
			
			usbTimer.Stop();
		} 
		else
		{
			plugged=false;
     bfe:	2300      	movs	r3, #0
     c00:	7003      	strb	r3, [r0, #0]
			terminalStarted=false;
     c02:	7043      	strb	r3, [r0, #1]
		}
		
}
     c04:	bd70      	pop	{r4, r5, r6, pc}
			timeout=false;
     c06:	2300      	movs	r3, #0
     c08:	7083      	strb	r3, [r0, #2]
			terminalStarted=true;
     c0a:	3301      	adds	r3, #1
     c0c:	7043      	strb	r3, [r0, #1]
			usbTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
     c0e:	4d0d      	ldr	r5, [pc, #52]	; (c44 <_ZN20SerialTerminal_Class6OnInitEv+0x50>)
     c10:	2296      	movs	r2, #150	; 0x96
     c12:	0092      	lsls	r2, r2, #2
     c14:	490c      	ldr	r1, [pc, #48]	; (c48 <_ZN20SerialTerminal_Class6OnInitEv+0x54>)
     c16:	0028      	movs	r0, r5
     c18:	4b0c      	ldr	r3, [pc, #48]	; (c4c <_ZN20SerialTerminal_Class6OnInitEv+0x58>)
     c1a:	4798      	blx	r3
			usbTimer.Start();
     c1c:	0028      	movs	r0, r5
     c1e:	4b0c      	ldr	r3, [pc, #48]	; (c50 <_ZN20SerialTerminal_Class6OnInitEv+0x5c>)
     c20:	4798      	blx	r3
			while (!usb.IsEnabled()){
     c22:	4d0c      	ldr	r5, [pc, #48]	; (c54 <_ZN20SerialTerminal_Class6OnInitEv+0x60>)
     c24:	4e0c      	ldr	r6, [pc, #48]	; (c58 <_ZN20SerialTerminal_Class6OnInitEv+0x64>)
     c26:	0028      	movs	r0, r5
     c28:	47b0      	blx	r6
     c2a:	2800      	cmp	r0, #0
     c2c:	d105      	bne.n	c3a <_ZN20SerialTerminal_Class6OnInitEv+0x46>
				if (timeout)
     c2e:	78a3      	ldrb	r3, [r4, #2]
     c30:	2b00      	cmp	r3, #0
     c32:	d0f8      	beq.n	c26 <_ZN20SerialTerminal_Class6OnInitEv+0x32>
					plugged=false;
     c34:	2300      	movs	r3, #0
     c36:	7023      	strb	r3, [r4, #0]
					return;
     c38:	e7e4      	b.n	c04 <_ZN20SerialTerminal_Class6OnInitEv+0x10>
			usbTimer.Stop();
     c3a:	4802      	ldr	r0, [pc, #8]	; (c44 <_ZN20SerialTerminal_Class6OnInitEv+0x50>)
     c3c:	4b07      	ldr	r3, [pc, #28]	; (c5c <_ZN20SerialTerminal_Class6OnInitEv+0x68>)
     c3e:	4798      	blx	r3
     c40:	e7e0      	b.n	c04 <_ZN20SerialTerminal_Class6OnInitEv+0x10>
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	200005bc 	.word	0x200005bc
     c48:	00000bd1 	.word	0x00000bd1
     c4c:	00000d91 	.word	0x00000d91
     c50:	00000ce1 	.word	0x00000ce1
     c54:	200004bc 	.word	0x200004bc
     c58:	00000341 	.word	0x00000341
     c5c:	00000cf1 	.word	0x00000cf1

00000c60 <_ZN20SerialTerminal_Class13CheckTerminalEv>:
		}
	}
	usbTimer.Stop();
	
}
bool	SerialTerminal_Class::CheckTerminal(void){
     c60:	b510      	push	{r4, lr}
     c62:	0004      	movs	r4, r0
	if (terminalStarted)
     c64:	7843      	ldrb	r3, [r0, #1]
     c66:	2b00      	cmp	r3, #0
     c68:	d014      	beq.n	c94 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x34>
	{
		if (plugged||usb.IsEnabled())
     c6a:	7803      	ldrb	r3, [r0, #0]
     c6c:	2b00      	cmp	r3, #0
     c6e:	d007      	beq.n	c80 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x20>
		{
			terminalStarted=usbTimer.Start()==0;
     c70:	480a      	ldr	r0, [pc, #40]	; (c9c <_ZN20SerialTerminal_Class13CheckTerminalEv+0x3c>)
     c72:	4b0b      	ldr	r3, [pc, #44]	; (ca0 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x40>)
     c74:	4798      	blx	r3
     c76:	4243      	negs	r3, r0
     c78:	4158      	adcs	r0, r3
     c7a:	b2c0      	uxtb	r0, r0
     c7c:	7060      	strb	r0, [r4, #1]
     c7e:	e006      	b.n	c8e <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2e>
		if (plugged||usb.IsEnabled())
     c80:	4808      	ldr	r0, [pc, #32]	; (ca4 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x44>)
     c82:	4b09      	ldr	r3, [pc, #36]	; (ca8 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x48>)
     c84:	4798      	blx	r3
     c86:	2800      	cmp	r0, #0
     c88:	d1f2      	bne.n	c70 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x10>
		}
		else
		{
			terminalStarted=false;
     c8a:	2300      	movs	r3, #0
     c8c:	7063      	strb	r3, [r4, #1]
	else
	{
		return	terminalStarted;
	}
	
	return	terminalStarted;
     c8e:	7860      	ldrb	r0, [r4, #1]
     c90:	b2c0      	uxtb	r0, r0
}
     c92:	bd10      	pop	{r4, pc}
		return	terminalStarted;
     c94:	7840      	ldrb	r0, [r0, #1]
     c96:	b2c0      	uxtb	r0, r0
     c98:	e7fb      	b.n	c92 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x32>
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	200005bc 	.word	0x200005bc
     ca0:	00000ce1 	.word	0x00000ce1
     ca4:	200004bc 	.word	0x200004bc
     ca8:	00000341 	.word	0x00000341

00000cac <_ZN17TimerSerial_ClassD1Ev>:
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
{
	timeout=0;
     cac:	2300      	movs	r3, #0
     cae:	7043      	strb	r3, [r0, #1]
} //~Timer_Class
     cb0:	4770      	bx	lr
	...

00000cb4 <_ZL7task_cbPK10timer_task>:
	ptrTimerSerialClass->setTimeout();
     cb4:	4b02      	ldr	r3, [pc, #8]	; (cc0 <_ZL7task_cbPK10timer_task+0xc>)
     cb6:	681b      	ldr	r3, [r3, #0]
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
	timeout=1;
     cb8:	2201      	movs	r2, #1
     cba:	705a      	strb	r2, [r3, #1]
}
     cbc:	4770      	bx	lr
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	20000568 	.word	0x20000568

00000cc4 <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	timer_descr=descr;
     cc4:	60c1      	str	r1, [r0, #12]
	ptrTimerSerialClass=this;
     cc6:	4b04      	ldr	r3, [pc, #16]	; (cd8 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x14>)
     cc8:	6018      	str	r0, [r3, #0]
	clockCycles=1024;
     cca:	2380      	movs	r3, #128	; 0x80
     ccc:	00db      	lsls	r3, r3, #3
     cce:	6143      	str	r3, [r0, #20]
	task->cb=task_cb;
     cd0:	6883      	ldr	r3, [r0, #8]
     cd2:	4a02      	ldr	r2, [pc, #8]	; (cdc <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x18>)
     cd4:	60da      	str	r2, [r3, #12]
} //Timer_Class
     cd6:	4770      	bx	lr
     cd8:	20000568 	.word	0x20000568
     cdc:	00000cb5 	.word	0x00000cb5

00000ce0 <_ZN17TimerSerial_Class5StartEv>:
int32_t TimerSerial_Class::Start(void){
     ce0:	b510      	push	{r4, lr}
	status=timer_start(timer_descr);
     ce2:	68c0      	ldr	r0, [r0, #12]
     ce4:	4b01      	ldr	r3, [pc, #4]	; (cec <_ZN17TimerSerial_Class5StartEv+0xc>)
     ce6:	4798      	blx	r3
}
     ce8:	bd10      	pop	{r4, pc}
     cea:	46c0      	nop			; (mov r8, r8)
     cec:	00001c21 	.word	0x00001c21

00000cf0 <_ZN17TimerSerial_Class4StopEv>:
int32_t TimerSerial_Class::Stop( void){
     cf0:	b510      	push	{r4, lr}
     cf2:	0004      	movs	r4, r0
	status=timer_stop(timer_descr);
     cf4:	68c0      	ldr	r0, [r0, #12]
     cf6:	4b02      	ldr	r3, [pc, #8]	; (d00 <_ZN17TimerSerial_Class4StopEv+0x10>)
     cf8:	4798      	blx	r3
	timeout=0;
     cfa:	2300      	movs	r3, #0
     cfc:	7063      	strb	r3, [r4, #1]
}
     cfe:	bd10      	pop	{r4, pc}
     d00:	00001c5d 	.word	0x00001c5d

00000d04 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
     d04:	b510      	push	{r4, lr}
	for (i = 0; i < TASK_NUMBER; i++)
     d06:	2300      	movs	r3, #0
     d08:	7703      	strb	r3, [r0, #28]
	{
			if (taskArray[i].cb==NULL)
     d0a:	4b11      	ldr	r3, [pc, #68]	; (d50 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4c>)
     d0c:	691b      	ldr	r3, [r3, #16]
     d0e:	2b00      	cmp	r3, #0
     d10:	d015      	beq.n	d3e <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3a>
	for (i = 0; i < TASK_NUMBER; i++)
     d12:	2301      	movs	r3, #1
     d14:	7703      	strb	r3, [r0, #28]
     d16:	2202      	movs	r2, #2
     d18:	2101      	movs	r1, #1
			if (taskArray[i].cb==NULL)
     d1a:	4c0d      	ldr	r4, [pc, #52]	; (d50 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4c>)
     d1c:	008b      	lsls	r3, r1, #2
     d1e:	185b      	adds	r3, r3, r1
     d20:	009b      	lsls	r3, r3, #2
     d22:	18e3      	adds	r3, r4, r3
     d24:	691b      	ldr	r3, [r3, #16]
     d26:	2b00      	cmp	r3, #0
     d28:	d00a      	beq.n	d40 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
	for (i = 0; i < TASK_NUMBER; i++)
     d2a:	7702      	strb	r2, [r0, #28]
     d2c:	0011      	movs	r1, r2
     d2e:	3201      	adds	r2, #1
     d30:	b2d2      	uxtb	r2, r2
     d32:	2903      	cmp	r1, #3
     d34:	ddf2      	ble.n	d1c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x18>
				task=&taskArray[i];
			return;
				
			}
	}
	task=&taskArray[0];
     d36:	4b06      	ldr	r3, [pc, #24]	; (d50 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4c>)
     d38:	3304      	adds	r3, #4
     d3a:	6083      	str	r3, [r0, #8]

}
     d3c:	bd10      	pop	{r4, pc}
	for (i = 0; i < TASK_NUMBER; i++)
     d3e:	2100      	movs	r1, #0
				task=&taskArray[i];
     d40:	008a      	lsls	r2, r1, #2
     d42:	1852      	adds	r2, r2, r1
     d44:	0092      	lsls	r2, r2, #2
     d46:	4902      	ldr	r1, [pc, #8]	; (d50 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4c>)
     d48:	3104      	adds	r1, #4
     d4a:	1889      	adds	r1, r1, r2
     d4c:	6081      	str	r1, [r0, #8]
			return;
     d4e:	e7f5      	b.n	d3c <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x38>
     d50:	20000568 	.word	0x20000568

00000d54 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
     d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d56:	0004      	movs	r4, r0
     d58:	000e      	movs	r6, r1
     d5a:	0017      	movs	r7, r2
     d5c:	001d      	movs	r5, r3
	ChooseAvailableTimerTask();
     d5e:	4b06      	ldr	r3, [pc, #24]	; (d78 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x24>)
     d60:	4798      	blx	r3
	task->interval = interval;
     d62:	68a3      	ldr	r3, [r4, #8]
     d64:	609f      	str	r7, [r3, #8]
	task->cb       = (timer_cb_t)func;
     d66:	68a3      	ldr	r3, [r4, #8]
     d68:	60de      	str	r6, [r3, #12]
	task->mode     = modeTask;
     d6a:	68a3      	ldr	r3, [r4, #8]
     d6c:	741d      	strb	r5, [r3, #16]
	status=timer_add_task(timer_descr, task);
     d6e:	68a1      	ldr	r1, [r4, #8]
     d70:	68e0      	ldr	r0, [r4, #12]
     d72:	4b02      	ldr	r3, [pc, #8]	; (d7c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x28>)
     d74:	4798      	blx	r3
}
     d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d78:	00000d05 	.word	0x00000d05
     d7c:	00001c99 	.word	0x00001c99

00000d80 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
     d80:	b510      	push	{r4, lr}
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
     d82:	2301      	movs	r3, #1
     d84:	4c01      	ldr	r4, [pc, #4]	; (d8c <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0xc>)
     d86:	47a0      	blx	r4
}
     d88:	bd10      	pop	{r4, pc}
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	00000d55 	.word	0x00000d55

00000d90 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
     d90:	b510      	push	{r4, lr}
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
     d92:	2300      	movs	r3, #0
     d94:	4c01      	ldr	r4, [pc, #4]	; (d9c <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0xc>)
     d96:	47a0      	blx	r4
}
     d98:	bd10      	pop	{r4, pc}
     d9a:	46c0      	nop			; (mov r8, r8)
     d9c:	00000d55 	.word	0x00000d55

00000da0 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
     da0:	b570      	push	{r4, r5, r6, lr}
     da2:	0004      	movs	r4, r0
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
     da4:	2300      	movs	r3, #0
     da6:	4d03      	ldr	r5, [pc, #12]	; (db4 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x14>)
     da8:	47a8      	blx	r5
	status=timer_start(timer_descr);
     daa:	68e0      	ldr	r0, [r4, #12]
     dac:	4b02      	ldr	r3, [pc, #8]	; (db8 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x18>)
     dae:	4798      	blx	r3
}
     db0:	bd70      	pop	{r4, r5, r6, pc}
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	00000d55 	.word	0x00000d55
     db8:	00001c21 	.word	0x00001c21

00000dbc <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
     dbc:	b530      	push	{r4, r5, lr}
	for (i = 0; i < TASK_NUMBER; i++)
     dbe:	2300      	movs	r3, #0
     dc0:	7703      	strb	r3, [r0, #28]
	{
		if (taskArray[i].cb==(timer_cb_t)func)
     dc2:	4b10      	ldr	r3, [pc, #64]	; (e04 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>)
     dc4:	691b      	ldr	r3, [r3, #16]
     dc6:	4299      	cmp	r1, r3
     dc8:	d012      	beq.n	df0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x34>
	for (i = 0; i < TASK_NUMBER; i++)
     dca:	2301      	movs	r3, #1
     dcc:	7703      	strb	r3, [r0, #28]
     dce:	2202      	movs	r2, #2
     dd0:	2401      	movs	r4, #1
		if (taskArray[i].cb==(timer_cb_t)func)
     dd2:	4d0c      	ldr	r5, [pc, #48]	; (e04 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>)
     dd4:	00a3      	lsls	r3, r4, #2
     dd6:	191b      	adds	r3, r3, r4
     dd8:	009b      	lsls	r3, r3, #2
     dda:	18eb      	adds	r3, r5, r3
     ddc:	691b      	ldr	r3, [r3, #16]
     dde:	428b      	cmp	r3, r1
     de0:	d007      	beq.n	df2 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x36>
	for (i = 0; i < TASK_NUMBER; i++)
     de2:	7702      	strb	r2, [r0, #28]
     de4:	0014      	movs	r4, r2
     de6:	3201      	adds	r2, #1
     de8:	b2d2      	uxtb	r2, r2
     dea:	2c03      	cmp	r4, #3
     dec:	ddf2      	ble.n	dd4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x18>
     dee:	e007      	b.n	e00 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x44>
     df0:	2400      	movs	r4, #0
		{
			
			task=&taskArray[i];
     df2:	00a2      	lsls	r2, r4, #2
     df4:	1912      	adds	r2, r2, r4
     df6:	0092      	lsls	r2, r2, #2
     df8:	4c02      	ldr	r4, [pc, #8]	; (e04 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>)
     dfa:	3404      	adds	r4, #4
     dfc:	18a4      	adds	r4, r4, r2
     dfe:	6084      	str	r4, [r0, #8]
			
		}
	}


}
     e00:	bd30      	pop	{r4, r5, pc}
     e02:	46c0      	nop			; (mov r8, r8)
     e04:	20000568 	.word	0x20000568

00000e08 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
void	TimerSerial_Class::Remove_task(FUNC_PTR func){
     e08:	b510      	push	{r4, lr}
     e0a:	0004      	movs	r4, r0
	GetTaskFunction(func);
     e0c:	4b08      	ldr	r3, [pc, #32]	; (e30 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x28>)
     e0e:	4798      	blx	r3
	if (is_list_element(&timer_descr->tasks, task))
     e10:	68e0      	ldr	r0, [r4, #12]
     e12:	3014      	adds	r0, #20
     e14:	68a1      	ldr	r1, [r4, #8]
     e16:	4b07      	ldr	r3, [pc, #28]	; (e34 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x2c>)
     e18:	4798      	blx	r3
     e1a:	2800      	cmp	r0, #0
     e1c:	d103      	bne.n	e26 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x1e>
	task->cb=NULL;
     e1e:	68a3      	ldr	r3, [r4, #8]
     e20:	2200      	movs	r2, #0
     e22:	60da      	str	r2, [r3, #12]
}
     e24:	bd10      	pop	{r4, pc}
		timer_remove_task(timer_descr, task);
     e26:	68a1      	ldr	r1, [r4, #8]
     e28:	68e0      	ldr	r0, [r4, #12]
     e2a:	4b03      	ldr	r3, [pc, #12]	; (e38 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x30>)
     e2c:	4798      	blx	r3
     e2e:	e7f6      	b.n	e1e <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x16>
     e30:	00000dbd 	.word	0x00000dbd
     e34:	000023e5 	.word	0x000023e5
     e38:	00001d45 	.word	0x00001d45

00000e3c <_GLOBAL__sub_I_ptrTimerSerialClass>:


TimerSerial_Class usbTimer(&TIMER_INTERFACE);
     e3c:	b510      	push	{r4, lr}
     e3e:	4c06      	ldr	r4, [pc, #24]	; (e58 <_GLOBAL__sub_I_ptrTimerSerialClass+0x1c>)
     e40:	3454      	adds	r4, #84	; 0x54
     e42:	4906      	ldr	r1, [pc, #24]	; (e5c <_GLOBAL__sub_I_ptrTimerSerialClass+0x20>)
     e44:	0020      	movs	r0, r4
     e46:	4b06      	ldr	r3, [pc, #24]	; (e60 <_GLOBAL__sub_I_ptrTimerSerialClass+0x24>)
     e48:	4798      	blx	r3
     e4a:	4a06      	ldr	r2, [pc, #24]	; (e64 <_GLOBAL__sub_I_ptrTimerSerialClass+0x28>)
     e4c:	4906      	ldr	r1, [pc, #24]	; (e68 <_GLOBAL__sub_I_ptrTimerSerialClass+0x2c>)
     e4e:	0020      	movs	r0, r4
     e50:	4b06      	ldr	r3, [pc, #24]	; (e6c <_GLOBAL__sub_I_ptrTimerSerialClass+0x30>)
     e52:	4798      	blx	r3
     e54:	bd10      	pop	{r4, pc}
     e56:	46c0      	nop			; (mov r8, r8)
     e58:	20000568 	.word	0x20000568
     e5c:	20000b1c 	.word	0x20000b1c
     e60:	00000cc5 	.word	0x00000cc5
     e64:	20000000 	.word	0x20000000
     e68:	00000cad 	.word	0x00000cad
     e6c:	00004bad 	.word	0x00004bad

00000e70 <_ZN16FlashMemoryClassD1Ev>:
	spi_descriptor=spi_des;
	memoryMap=flashMap;
} //FlashMemoryClass

// default destructor
FlashMemoryClass::~FlashMemoryClass()
     e70:	b510      	push	{r4, lr}
     e72:	0004      	movs	r4, r0
     e74:	3018      	adds	r0, #24
     e76:	4b02      	ldr	r3, [pc, #8]	; (e80 <_ZN16FlashMemoryClassD1Ev+0x10>)
     e78:	4798      	blx	r3
{
} //~FlashMemoryClass
     e7a:	0020      	movs	r0, r4
     e7c:	bd10      	pop	{r4, pc}
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	000014b5 	.word	0x000014b5

00000e84 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
     e84:	b570      	push	{r4, r5, r6, lr}
     e86:	0004      	movs	r4, r0
     e88:	000d      	movs	r5, r1
     e8a:	3018      	adds	r0, #24
     e8c:	4b05      	ldr	r3, [pc, #20]	; (ea4 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x20>)
     e8e:	4798      	blx	r3
	appParameters=defaultParameters;
     e90:	4b05      	ldr	r3, [pc, #20]	; (ea8 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x24>)
     e92:	781b      	ldrb	r3, [r3, #0]
     e94:	7123      	strb	r3, [r4, #4]
	spi_descriptor=spi_des;
     e96:	6165      	str	r5, [r4, #20]
	memoryMap=flashMap;
     e98:	4b04      	ldr	r3, [pc, #16]	; (eac <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x28>)
     e9a:	681b      	ldr	r3, [r3, #0]
     e9c:	6023      	str	r3, [r4, #0]
} //FlashMemoryClass
     e9e:	0020      	movs	r0, r4
     ea0:	bd70      	pop	{r4, r5, r6, pc}
     ea2:	46c0      	nop			; (mov r8, r8)
     ea4:	000014a9 	.word	0x000014a9
     ea8:	000050bc 	.word	0x000050bc
     eac:	200005dc 	.word	0x200005dc

00000eb0 <_ZN16FlashMemoryClass9flashOpenEv>:
}



void FlashMemoryClass::flashOpen(void)
{
     eb0:	b510      	push	{r4, lr}
     eb2:	0004      	movs	r4, r0
	garbage=spi.enable();
     eb4:	3018      	adds	r0, #24
     eb6:	4b02      	ldr	r3, [pc, #8]	; (ec0 <_ZN16FlashMemoryClass9flashOpenEv+0x10>)
     eb8:	4798      	blx	r3
     eba:	60a0      	str	r0, [r4, #8]
	
	
}
     ebc:	bd10      	pop	{r4, pc}
     ebe:	46c0      	nop			; (mov r8, r8)
     ec0:	000014e9 	.word	0x000014e9

00000ec4 <_ZN16FlashMemoryClass12CE_Low_FlashEv>:
	CE_High_Flash();
	return (uint8_t)src;
}
void FlashMemoryClass::CE_Low_Flash(void)
{
	garbage=0;
     ec4:	2300      	movs	r3, #0
     ec6:	6083      	str	r3, [r0, #8]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ec8:	23c0      	movs	r3, #192	; 0xc0
     eca:	05db      	lsls	r3, r3, #23
     ecc:	2280      	movs	r2, #128	; 0x80
     ece:	0512      	lsls	r2, r2, #20
     ed0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ed2:	2280      	movs	r2, #128	; 0x80
     ed4:	0552      	lsls	r2, r2, #21
     ed6:	619a      	str	r2, [r3, #24]
		// <id> pad_initial_level
		// <false"> Low
		// <true"> High
		false);
		gpio_set_pin_level(CS_FRAM,true);
}
     ed8:	4770      	bx	lr

00000eda <_ZN16FlashMemoryClass13CE_High_FlashEv>:

void FlashMemoryClass::CE_High_Flash(void)
{
	garbage=0;
     eda:	2300      	movs	r3, #0
     edc:	6083      	str	r3, [r0, #8]
     ede:	23c0      	movs	r3, #192	; 0xc0
     ee0:	05db      	lsls	r3, r3, #23
     ee2:	2280      	movs	r2, #128	; 0x80
     ee4:	0512      	lsls	r2, r2, #20
     ee6:	619a      	str	r2, [r3, #24]
     ee8:	2280      	movs	r2, #128	; 0x80
     eea:	0552      	lsls	r2, r2, #21
     eec:	619a      	str	r2, [r3, #24]
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);
	gpio_set_pin_level(CS_FRAM,true);
}
     eee:	4770      	bx	lr

00000ef0 <_ZN16FlashMemoryClass9Send_ByteEh>:
uint8_t FlashMemoryClass::Send_Byte(uint8_t byte)
{
     ef0:	b510      	push	{r4, lr}
     ef2:	b082      	sub	sp, #8
     ef4:	466b      	mov	r3, sp
     ef6:	1ddc      	adds	r4, r3, #7
     ef8:	71d9      	strb	r1, [r3, #7]
	//WaitBusy();
	spi.write(&byte,1);
     efa:	3018      	adds	r0, #24
     efc:	2201      	movs	r2, #1
     efe:	0021      	movs	r1, r4
     f00:	4b02      	ldr	r3, [pc, #8]	; (f0c <_ZN16FlashMemoryClass9Send_ByteEh+0x1c>)
     f02:	4798      	blx	r3
	return byte;
     f04:	7820      	ldrb	r0, [r4, #0]
}
     f06:	b002      	add	sp, #8
     f08:	bd10      	pop	{r4, pc}
     f0a:	46c0      	nop			; (mov r8, r8)
     f0c:	0000150d 	.word	0x0000150d

00000f10 <_ZN16FlashMemoryClass9readFlashEPvmm>:
{
     f10:	b5f0      	push	{r4, r5, r6, r7, lr}
     f12:	b083      	sub	sp, #12
     f14:	0004      	movs	r4, r0
     f16:	9101      	str	r1, [sp, #4]
     f18:	0015      	movs	r5, r2
     f1a:	001e      	movs	r6, r3
	CE_Low_Flash();
     f1c:	4b0f      	ldr	r3, [pc, #60]	; (f5c <_ZN16FlashMemoryClass9readFlashEPvmm+0x4c>)
     f1e:	4798      	blx	r3
	Send_Byte(kFlashRead);
     f20:	2103      	movs	r1, #3
     f22:	0020      	movs	r0, r4
     f24:	4f0e      	ldr	r7, [pc, #56]	; (f60 <_ZN16FlashMemoryClass9readFlashEPvmm+0x50>)
     f26:	47b8      	blx	r7
	Send_Byte(((src & 0xFFFFFF) >> 16));
     f28:	0c29      	lsrs	r1, r5, #16
     f2a:	b2c9      	uxtb	r1, r1
     f2c:	0020      	movs	r0, r4
     f2e:	47b8      	blx	r7
	Send_Byte(((src & 0xFFFF) >> 8));
     f30:	0a29      	lsrs	r1, r5, #8
     f32:	b2c9      	uxtb	r1, r1
     f34:	0020      	movs	r0, r4
     f36:	47b8      	blx	r7
	Send_Byte(src & 0xFF);
     f38:	b2ed      	uxtb	r5, r5
     f3a:	0029      	movs	r1, r5
     f3c:	0020      	movs	r0, r4
     f3e:	47b8      	blx	r7
	spi.read((uint8_t *)dest, (uint16_t)size);
     f40:	0432      	lsls	r2, r6, #16
     f42:	0c12      	lsrs	r2, r2, #16
     f44:	0020      	movs	r0, r4
     f46:	3018      	adds	r0, #24
     f48:	9901      	ldr	r1, [sp, #4]
     f4a:	4b06      	ldr	r3, [pc, #24]	; (f64 <_ZN16FlashMemoryClass9readFlashEPvmm+0x54>)
     f4c:	4798      	blx	r3
	CE_High_Flash();
     f4e:	0020      	movs	r0, r4
     f50:	4b05      	ldr	r3, [pc, #20]	; (f68 <_ZN16FlashMemoryClass9readFlashEPvmm+0x58>)
     f52:	4798      	blx	r3
}
     f54:	0028      	movs	r0, r5
     f56:	b003      	add	sp, #12
     f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f5a:	46c0      	nop			; (mov r8, r8)
     f5c:	00000ec5 	.word	0x00000ec5
     f60:	00000ef1 	.word	0x00000ef1
     f64:	0000152d 	.word	0x0000152d
     f68:	00000edb 	.word	0x00000edb

00000f6c <_ZN16FlashMemoryClass8Get_ByteEv>:

uint8_t FlashMemoryClass::Get_Byte(void)
{
     f6c:	b510      	push	{r4, lr}
     f6e:	b082      	sub	sp, #8
	uint8_t byte;
	//WaitBusy();
	spi.read(&byte,1);
     f70:	466b      	mov	r3, sp
     f72:	1ddc      	adds	r4, r3, #7
     f74:	3018      	adds	r0, #24
     f76:	2201      	movs	r2, #1
     f78:	0021      	movs	r1, r4
     f7a:	4b02      	ldr	r3, [pc, #8]	; (f84 <_ZN16FlashMemoryClass8Get_ByteEv+0x18>)
     f7c:	4798      	blx	r3
	
	return byte;
     f7e:	7820      	ldrb	r0, [r4, #0]
}
     f80:	b002      	add	sp, #8
     f82:	bd10      	pop	{r4, pc}
     f84:	0000152d 	.word	0x0000152d

00000f88 <_ZN16FlashMemoryClass4WRDIEv>:

}


void FlashMemoryClass::WRDI(void)
{
     f88:	b510      	push	{r4, lr}
     f8a:	0004      	movs	r4, r0
	CE_Low_Flash();			// enable device
     f8c:	4b04      	ldr	r3, [pc, #16]	; (fa0 <_ZN16FlashMemoryClass4WRDIEv+0x18>)
     f8e:	4798      	blx	r3
	Send_Byte(kFlashWRinhibit);	// send WRDI command
     f90:	2104      	movs	r1, #4
     f92:	0020      	movs	r0, r4
     f94:	4b03      	ldr	r3, [pc, #12]	; (fa4 <_ZN16FlashMemoryClass4WRDIEv+0x1c>)
     f96:	4798      	blx	r3
//	WaitBusy();
	CE_High_Flash();			// disable device
     f98:	0020      	movs	r0, r4
     f9a:	4b03      	ldr	r3, [pc, #12]	; (fa8 <_ZN16FlashMemoryClass4WRDIEv+0x20>)
     f9c:	4798      	blx	r3
	
}
     f9e:	bd10      	pop	{r4, pc}
     fa0:	00000ec5 	.word	0x00000ec5
     fa4:	00000ef1 	.word	0x00000ef1
     fa8:	00000edb 	.word	0x00000edb

00000fac <_ZN16FlashMemoryClass15Block_Erase_64KEm>:
	WRDI();
	}
	flashClose();
}
	
void	FlashMemoryClass::Block_Erase_64K(uint32_t Dst){
     fac:	b570      	push	{r4, r5, r6, lr}
     fae:	0004      	movs	r4, r0
     fb0:	000d      	movs	r5, r1

		CE_Low_Flash();				// enable device
     fb2:	4b0a      	ldr	r3, [pc, #40]	; (fdc <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x30>)
     fb4:	4798      	blx	r3
		Send_Byte(kFlash64KBlockErase);		// send Sector Erase command
     fb6:	21d8      	movs	r1, #216	; 0xd8
     fb8:	0020      	movs	r0, r4
     fba:	4e09      	ldr	r6, [pc, #36]	; (fe0 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x34>)
     fbc:	47b0      	blx	r6
		Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
     fbe:	0c29      	lsrs	r1, r5, #16
     fc0:	b2c9      	uxtb	r1, r1
     fc2:	0020      	movs	r0, r4
     fc4:	47b0      	blx	r6
		Send_Byte(((Dst & 0xFFFF) >> 8));
     fc6:	0a29      	lsrs	r1, r5, #8
     fc8:	b2c9      	uxtb	r1, r1
     fca:	0020      	movs	r0, r4
     fcc:	47b0      	blx	r6
		Send_Byte(Dst & 0xFF);
     fce:	b2e9      	uxtb	r1, r5
     fd0:	0020      	movs	r0, r4
     fd2:	47b0      	blx	r6
		CE_High_Flash();				// disable device
     fd4:	0020      	movs	r0, r4
     fd6:	4b03      	ldr	r3, [pc, #12]	; (fe4 <_ZN16FlashMemoryClass15Block_Erase_64KEm+0x38>)
     fd8:	4798      	blx	r3
		
}
     fda:	bd70      	pop	{r4, r5, r6, pc}
     fdc:	00000ec5 	.word	0x00000ec5
     fe0:	00000ef1 	.word	0x00000ef1
     fe4:	00000edb 	.word	0x00000edb

00000fe8 <_ZN16FlashMemoryClass18ReadSingleRegisterEh>:
uint8_t  FlashMemoryClass::ReadFunctionRegister(void){
			// disable device
		return ReadSingleRegister(kFlashReadFunction);
	}
	
uint8_t  FlashMemoryClass::ReadSingleRegister(uint8_t r){
     fe8:	b570      	push	{r4, r5, r6, lr}
     fea:	0004      	movs	r4, r0
     fec:	000d      	movs	r5, r1
	uint8_t b = 0;
	CE_Low_Flash();			// enable device
     fee:	4b07      	ldr	r3, [pc, #28]	; (100c <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x24>)
     ff0:	4798      	blx	r3
	Send_Byte(r);	// send RDSR command
     ff2:	0029      	movs	r1, r5
     ff4:	0020      	movs	r0, r4
     ff6:	4b06      	ldr	r3, [pc, #24]	; (1010 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x28>)
     ff8:	4798      	blx	r3
	b = Get_Byte();		/* receive byte */
     ffa:	0020      	movs	r0, r4
     ffc:	4b05      	ldr	r3, [pc, #20]	; (1014 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x2c>)
     ffe:	4798      	blx	r3
    1000:	0005      	movs	r5, r0
	CE_High_Flash();			// disable device
    1002:	0020      	movs	r0, r4
    1004:	4b04      	ldr	r3, [pc, #16]	; (1018 <_ZN16FlashMemoryClass18ReadSingleRegisterEh+0x30>)
    1006:	4798      	blx	r3
	return b;
}
    1008:	0028      	movs	r0, r5
    100a:	bd70      	pop	{r4, r5, r6, pc}
    100c:	00000ec5 	.word	0x00000ec5
    1010:	00000ef1 	.word	0x00000ef1
    1014:	00000f6d 	.word	0x00000f6d
    1018:	00000edb 	.word	0x00000edb

0000101c <_ZN16FlashMemoryClass18ReadStatusRegisterEv>:
uint8_t  FlashMemoryClass::ReadStatusRegister(void){
    101c:	b510      	push	{r4, lr}
    101e:	0004      	movs	r4, r0
			status=ReadSingleRegister(kFlashReadSR);
    1020:	2105      	movs	r1, #5
    1022:	4b02      	ldr	r3, [pc, #8]	; (102c <_ZN16FlashMemoryClass18ReadStatusRegisterEv+0x10>)
    1024:	4798      	blx	r3
    1026:	2344      	movs	r3, #68	; 0x44
    1028:	54e0      	strb	r0, [r4, r3]
	}
    102a:	bd10      	pop	{r4, pc}
    102c:	00000fe9 	.word	0x00000fe9

00001030 <_ZN16FlashMemoryClass4WRENEv>:
{
    1030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1032:	0004      	movs	r4, r0
		CE_Low_Flash();			// enable device
    1034:	4f08      	ldr	r7, [pc, #32]	; (1058 <_ZN16FlashMemoryClass4WRENEv+0x28>)
		Send_Byte(kFlashWREnable);	// send WREN command
    1036:	4e09      	ldr	r6, [pc, #36]	; (105c <_ZN16FlashMemoryClass4WRENEv+0x2c>)
		CE_High_Flash();
    1038:	4d09      	ldr	r5, [pc, #36]	; (1060 <_ZN16FlashMemoryClass4WRENEv+0x30>)
		CE_Low_Flash();			// enable device
    103a:	0020      	movs	r0, r4
    103c:	47b8      	blx	r7
		Send_Byte(kFlashWREnable);	// send WREN command
    103e:	2106      	movs	r1, #6
    1040:	0020      	movs	r0, r4
    1042:	47b0      	blx	r6
		CE_High_Flash();
    1044:	0020      	movs	r0, r4
    1046:	47a8      	blx	r5
		status=ReadStatusRegister();
    1048:	0020      	movs	r0, r4
    104a:	4b06      	ldr	r3, [pc, #24]	; (1064 <_ZN16FlashMemoryClass4WRENEv+0x34>)
    104c:	4798      	blx	r3
    104e:	2344      	movs	r3, #68	; 0x44
    1050:	54e0      	strb	r0, [r4, r3]
	} while ((status&&(0x02))==0);
    1052:	2800      	cmp	r0, #0
    1054:	d0f1      	beq.n	103a <_ZN16FlashMemoryClass4WRENEv+0xa>
}
    1056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1058:	00000ec5 	.word	0x00000ec5
    105c:	00000ef1 	.word	0x00000ef1
    1060:	00000edb 	.word	0x00000edb
    1064:	0000101d 	.word	0x0000101d

00001068 <_ZN16FlashMemoryClass10writeFlashEmPKvm>:
uint8_t FlashMemoryClass::writeFlash(uint32_t dest, const void* src, uint32_t size){
    1068:	b5f0      	push	{r4, r5, r6, r7, lr}
    106a:	46de      	mov	lr, fp
    106c:	4657      	mov	r7, sl
    106e:	4646      	mov	r6, r8
    1070:	b5c0      	push	{r6, r7, lr}
    1072:	b082      	sub	sp, #8
    1074:	9000      	str	r0, [sp, #0]
    1076:	468a      	mov	sl, r1
    1078:	4698      	mov	r8, r3
	while (size > 0){
    107a:	2b00      	cmp	r3, #0
    107c:	d042      	beq.n	1104 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0x9c>
    107e:	0015      	movs	r5, r2
		WREN();
    1080:	4b28      	ldr	r3, [pc, #160]	; (1124 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xbc>)
    1082:	469b      	mov	fp, r3
			Send_Byte(*srcPtr++);
    1084:	4f28      	ldr	r7, [pc, #160]	; (1128 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xc0>)
    1086:	e018      	b.n	10ba <_ZN16FlashMemoryClass10writeFlashEmPKvm+0x52>
    1088:	0035      	movs	r5, r6
		for (i=0; (i < 256) && (i<size); i++){
    108a:	4544      	cmp	r4, r8
    108c:	d208      	bcs.n	10a0 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0x38>
			Send_Byte(*srcPtr++);
    108e:	1c6e      	adds	r6, r5, #1
    1090:	7829      	ldrb	r1, [r5, #0]
    1092:	9800      	ldr	r0, [sp, #0]
    1094:	47b8      	blx	r7
		for (i=0; (i < 256) && (i<size); i++){
    1096:	3401      	adds	r4, #1
    1098:	b2a4      	uxth	r4, r4
    109a:	2cff      	cmp	r4, #255	; 0xff
    109c:	ddf4      	ble.n	1088 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0x20>
			Send_Byte(*srcPtr++);
    109e:	0035      	movs	r5, r6
		CE_High_Flash();
    10a0:	9e00      	ldr	r6, [sp, #0]
    10a2:	0030      	movs	r0, r6
    10a4:	4b21      	ldr	r3, [pc, #132]	; (112c <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xc4>)
    10a6:	4798      	blx	r3
		WRDI();
    10a8:	0030      	movs	r0, r6
    10aa:	4b21      	ldr	r3, [pc, #132]	; (1130 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xc8>)
    10ac:	4798      	blx	r3
		size -= i;
    10ae:	4643      	mov	r3, r8
    10b0:	1b1b      	subs	r3, r3, r4
    10b2:	4698      	mov	r8, r3
		dest += i;
    10b4:	44a2      	add	sl, r4
	while (size > 0){
    10b6:	2b00      	cmp	r3, #0
    10b8:	d02d      	beq.n	1116 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xae>
		WREN();
    10ba:	9e00      	ldr	r6, [sp, #0]
    10bc:	0030      	movs	r0, r6
    10be:	47d8      	blx	fp
		CE_Low_Flash();
    10c0:	0030      	movs	r0, r6
    10c2:	4b1c      	ldr	r3, [pc, #112]	; (1134 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xcc>)
    10c4:	4798      	blx	r3
		Send_Byte(0x02);
    10c6:	2102      	movs	r1, #2
    10c8:	0030      	movs	r0, r6
    10ca:	4c17      	ldr	r4, [pc, #92]	; (1128 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xc0>)
    10cc:	47a0      	blx	r4
		Send_Byte(((dest & 0xFFFFFF) >> 16));
    10ce:	4653      	mov	r3, sl
    10d0:	0c19      	lsrs	r1, r3, #16
    10d2:	b2c9      	uxtb	r1, r1
    10d4:	0030      	movs	r0, r6
    10d6:	47a0      	blx	r4
		Send_Byte(((dest & 0xFFFF) >> 8));
    10d8:	4653      	mov	r3, sl
    10da:	0a19      	lsrs	r1, r3, #8
    10dc:	b2c9      	uxtb	r1, r1
    10de:	0030      	movs	r0, r6
    10e0:	47a0      	blx	r4
		Send_Byte(dest & 0xFF);
    10e2:	4653      	mov	r3, sl
    10e4:	466a      	mov	r2, sp
    10e6:	71d3      	strb	r3, [r2, #7]
    10e8:	79d1      	ldrb	r1, [r2, #7]
    10ea:	0030      	movs	r0, r6
    10ec:	47a0      	blx	r4
		for (i=0; (i < 256) && (i<size); i++){
    10ee:	4643      	mov	r3, r8
    10f0:	2b00      	cmp	r3, #0
    10f2:	d009      	beq.n	1108 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xa0>
			Send_Byte(*srcPtr++);
    10f4:	1c6c      	adds	r4, r5, #1
    10f6:	7829      	ldrb	r1, [r5, #0]
    10f8:	9800      	ldr	r0, [sp, #0]
    10fa:	4b0b      	ldr	r3, [pc, #44]	; (1128 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xc0>)
    10fc:	4798      	blx	r3
    10fe:	0025      	movs	r5, r4
		for (i=0; (i < 256) && (i<size); i++){
    1100:	2401      	movs	r4, #1
    1102:	e7c2      	b.n	108a <_ZN16FlashMemoryClass10writeFlashEmPKvm+0x22>
	const uint8_t*	srcPtr = (const uint8_t*)src;
    1104:	0015      	movs	r5, r2
    1106:	e006      	b.n	1116 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xae>
		CE_High_Flash();
    1108:	9c00      	ldr	r4, [sp, #0]
    110a:	0020      	movs	r0, r4
    110c:	4b07      	ldr	r3, [pc, #28]	; (112c <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xc4>)
    110e:	4798      	blx	r3
		WRDI();
    1110:	0020      	movs	r0, r4
    1112:	4b07      	ldr	r3, [pc, #28]	; (1130 <_ZN16FlashMemoryClass10writeFlashEmPKvm+0xc8>)
    1114:	4798      	blx	r3
		return *srcPtr;
    1116:	7828      	ldrb	r0, [r5, #0]
	}
    1118:	b002      	add	sp, #8
    111a:	bc1c      	pop	{r2, r3, r4}
    111c:	4690      	mov	r8, r2
    111e:	469a      	mov	sl, r3
    1120:	46a3      	mov	fp, r4
    1122:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1124:	00001031 	.word	0x00001031
    1128:	00000ef1 	.word	0x00000ef1
    112c:	00000edb 	.word	0x00000edb
    1130:	00000f89 	.word	0x00000f89
    1134:	00000ec5 	.word	0x00000ec5

00001138 <_ZN16FlashMemoryClass8WaitBusyEv>:
uint8_t  FlashMemoryClass::WaitBusy(void){
    1138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    113a:	0004      	movs	r4, r0
	status = ReadStatusRegister();
    113c:	4b08      	ldr	r3, [pc, #32]	; (1160 <_ZN16FlashMemoryClass8WaitBusyEv+0x28>)
    113e:	4798      	blx	r3
    1140:	0003      	movs	r3, r0
    1142:	2244      	movs	r2, #68	; 0x44
    1144:	54a0      	strb	r0, [r4, r2]
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    1146:	07c2      	lsls	r2, r0, #31
    1148:	d508      	bpl.n	115c <_ZN16FlashMemoryClass8WaitBusyEv+0x24>
			status = ReadStatusRegister();
    114a:	4f05      	ldr	r7, [pc, #20]	; (1160 <_ZN16FlashMemoryClass8WaitBusyEv+0x28>)
    114c:	2644      	movs	r6, #68	; 0x44
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    114e:	2501      	movs	r5, #1
			status = ReadStatusRegister();
    1150:	0020      	movs	r0, r4
    1152:	47b8      	blx	r7
    1154:	0003      	movs	r3, r0
    1156:	55a0      	strb	r0, [r4, r6]
		while ((status & kFlashWriteSR) == 1){// waste time until not busy
    1158:	4205      	tst	r5, r0
    115a:	d1f9      	bne.n	1150 <_ZN16FlashMemoryClass8WaitBusyEv+0x18>
	}
    115c:	0018      	movs	r0, r3
    115e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1160:	0000101d 	.word	0x0000101d

00001164 <_ZN16FlashMemoryClass10flashCloseEv>:
	Send_Byte(byte);		/* receive byte */
	CE_High_Flash();			// disable device
	return byte;
}

void FlashMemoryClass::flashClose(void){
    1164:	b510      	push	{r4, lr}
	garbage=0;
    1166:	2300      	movs	r3, #0
    1168:	6083      	str	r3, [r0, #8]
		spi.disable();
    116a:	3018      	adds	r0, #24
    116c:	4b01      	ldr	r3, [pc, #4]	; (1174 <_ZN16FlashMemoryClass10flashCloseEv+0x10>)
    116e:	4798      	blx	r3
	}
    1170:	bd10      	pop	{r4, pc}
    1172:	46c0      	nop			; (mov r8, r8)
    1174:	0000154d 	.word	0x0000154d

00001178 <_ZN16FlashMemoryClass4InitEv>:
void	FlashMemoryClass::Init(void){
    1178:	b570      	push	{r4, r5, r6, lr}
    117a:	0004      	movs	r4, r0
	spi.SetDescriptor(spi_descriptor);
    117c:	0005      	movs	r5, r0
    117e:	3518      	adds	r5, #24
    1180:	6941      	ldr	r1, [r0, #20]
    1182:	0028      	movs	r0, r5
    1184:	4b09      	ldr	r3, [pc, #36]	; (11ac <_ZN16FlashMemoryClass4InitEv+0x34>)
    1186:	4798      	blx	r3
	spi.init();
    1188:	0028      	movs	r0, r5
    118a:	4b09      	ldr	r3, [pc, #36]	; (11b0 <_ZN16FlashMemoryClass4InitEv+0x38>)
    118c:	4798      	blx	r3
	memoryMap=0x00;
    118e:	2300      	movs	r3, #0
    1190:	6023      	str	r3, [r4, #0]
	flashOpen();
    1192:	0020      	movs	r0, r4
    1194:	4b07      	ldr	r3, [pc, #28]	; (11b4 <_ZN16FlashMemoryClass4InitEv+0x3c>)
    1196:	4798      	blx	r3
	status=ReadStatusRegister();
    1198:	0020      	movs	r0, r4
    119a:	4b07      	ldr	r3, [pc, #28]	; (11b8 <_ZN16FlashMemoryClass4InitEv+0x40>)
    119c:	4798      	blx	r3
    119e:	2344      	movs	r3, #68	; 0x44
    11a0:	54e0      	strb	r0, [r4, r3]
	flashClose();
    11a2:	0020      	movs	r0, r4
    11a4:	4b05      	ldr	r3, [pc, #20]	; (11bc <_ZN16FlashMemoryClass4InitEv+0x44>)
    11a6:	4798      	blx	r3
}
    11a8:	bd70      	pop	{r4, r5, r6, pc}
    11aa:	46c0      	nop			; (mov r8, r8)
    11ac:	000014dd 	.word	0x000014dd
    11b0:	000014b9 	.word	0x000014b9
    11b4:	00000eb1 	.word	0x00000eb1
    11b8:	0000101d 	.word	0x0000101d
    11bc:	00001165 	.word	0x00001165

000011c0 <_ZN16FlashMemoryClass22flushConfigurationDataEP14userParameters>:
{
    11c0:	b530      	push	{r4, r5, lr}
    11c2:	b083      	sub	sp, #12
    11c4:	0004      	movs	r4, r0
	appData=*data;
    11c6:	ad01      	add	r5, sp, #4
    11c8:	780b      	ldrb	r3, [r1, #0]
    11ca:	702b      	strb	r3, [r5, #0]
	flashOpen();
    11cc:	4b08      	ldr	r3, [pc, #32]	; (11f0 <_ZN16FlashMemoryClass22flushConfigurationDataEP14userParameters+0x30>)
    11ce:	4798      	blx	r3
	writeFlash((uint32_t)&memoryMap->parameters, &appData, sizeof(userParameters));
    11d0:	6823      	ldr	r3, [r4, #0]
    11d2:	2280      	movs	r2, #128	; 0x80
    11d4:	0312      	lsls	r2, r2, #12
    11d6:	4694      	mov	ip, r2
    11d8:	4463      	add	r3, ip
    11da:	0019      	movs	r1, r3
    11dc:	2301      	movs	r3, #1
    11de:	002a      	movs	r2, r5
    11e0:	0020      	movs	r0, r4
    11e2:	4d04      	ldr	r5, [pc, #16]	; (11f4 <_ZN16FlashMemoryClass22flushConfigurationDataEP14userParameters+0x34>)
    11e4:	47a8      	blx	r5
	flashClose();
    11e6:	0020      	movs	r0, r4
    11e8:	4b03      	ldr	r3, [pc, #12]	; (11f8 <_ZN16FlashMemoryClass22flushConfigurationDataEP14userParameters+0x38>)
    11ea:	4798      	blx	r3
}
    11ec:	b003      	add	sp, #12
    11ee:	bd30      	pop	{r4, r5, pc}
    11f0:	00000eb1 	.word	0x00000eb1
    11f4:	00001069 	.word	0x00001069
    11f8:	00001165 	.word	0x00001165

000011fc <_ZN16FlashMemoryClass21readConfigurationDataER14userParameters>:
{
    11fc:	b570      	push	{r4, r5, r6, lr}
    11fe:	0004      	movs	r4, r0
    1200:	000d      	movs	r5, r1
	flashOpen();
    1202:	4b09      	ldr	r3, [pc, #36]	; (1228 <_ZN16FlashMemoryClass21readConfigurationDataER14userParameters+0x2c>)
    1204:	4798      	blx	r3
	readFlash((void*)&p, (uint32_t)&memoryMap->parameters, sizeof(userParameters));
    1206:	6823      	ldr	r3, [r4, #0]
    1208:	2180      	movs	r1, #128	; 0x80
    120a:	0309      	lsls	r1, r1, #12
    120c:	468c      	mov	ip, r1
    120e:	4463      	add	r3, ip
    1210:	001a      	movs	r2, r3
    1212:	2301      	movs	r3, #1
    1214:	0029      	movs	r1, r5
    1216:	0020      	movs	r0, r4
    1218:	4e04      	ldr	r6, [pc, #16]	; (122c <_ZN16FlashMemoryClass21readConfigurationDataER14userParameters+0x30>)
    121a:	47b0      	blx	r6
	flashClose();
    121c:	0020      	movs	r0, r4
    121e:	4b04      	ldr	r3, [pc, #16]	; (1230 <_ZN16FlashMemoryClass21readConfigurationDataER14userParameters+0x34>)
    1220:	4798      	blx	r3
	return	p;
    1222:	7828      	ldrb	r0, [r5, #0]
}
    1224:	bd70      	pop	{r4, r5, r6, pc}
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	00000eb1 	.word	0x00000eb1
    122c:	00000f11 	.word	0x00000f11
    1230:	00001165 	.word	0x00001165

00001234 <_ZN16FlashMemoryClass7IsReadyEv>:
bool  FlashMemoryClass::IsReady(void){
    1234:	b570      	push	{r4, r5, r6, lr}
    1236:	0004      	movs	r4, r0
	flashOpen();
    1238:	4b07      	ldr	r3, [pc, #28]	; (1258 <_ZN16FlashMemoryClass7IsReadyEv+0x24>)
    123a:	4798      	blx	r3
	status = ReadStatusRegister();
    123c:	0020      	movs	r0, r4
    123e:	4b07      	ldr	r3, [pc, #28]	; (125c <_ZN16FlashMemoryClass7IsReadyEv+0x28>)
    1240:	4798      	blx	r3
    1242:	2544      	movs	r5, #68	; 0x44
    1244:	5560      	strb	r0, [r4, r5]
	flashClose();
    1246:	0020      	movs	r0, r4
    1248:	4b05      	ldr	r3, [pc, #20]	; (1260 <_ZN16FlashMemoryClass7IsReadyEv+0x2c>)
    124a:	4798      	blx	r3
	return	(status&0x01)==0;
    124c:	5d60      	ldrb	r0, [r4, r5]
    124e:	2301      	movs	r3, #1
    1250:	4043      	eors	r3, r0
    1252:	2001      	movs	r0, #1
    1254:	4018      	ands	r0, r3
}
    1256:	bd70      	pop	{r4, r5, r6, pc}
    1258:	00000eb1 	.word	0x00000eb1
    125c:	0000101d 	.word	0x0000101d
    1260:	00001165 	.word	0x00001165

00001264 <_ZN16FlashMemoryClass12Sector_EraseEm>:
void FlashMemoryClass::Sector_Erase(uint32_t Dst)
{
    1264:	b570      	push	{r4, r5, r6, lr}
    1266:	0004      	movs	r4, r0
    1268:	000d      	movs	r5, r1
	CE_Low_Flash();				// enable device
    126a:	4b0a      	ldr	r3, [pc, #40]	; (1294 <_ZN16FlashMemoryClass12Sector_EraseEm+0x30>)
    126c:	4798      	blx	r3
	Send_Byte(kFlash4KSectorErase);		// send Sector Erase command
    126e:	2120      	movs	r1, #32
    1270:	0020      	movs	r0, r4
    1272:	4e09      	ldr	r6, [pc, #36]	; (1298 <_ZN16FlashMemoryClass12Sector_EraseEm+0x34>)
    1274:	47b0      	blx	r6
	Send_Byte(((Dst & 0xFFFFFF) >> 16)); // send 3 address bytes
    1276:	0c29      	lsrs	r1, r5, #16
    1278:	b2c9      	uxtb	r1, r1
    127a:	0020      	movs	r0, r4
    127c:	47b0      	blx	r6
	Send_Byte(((Dst & 0xFFFF) >> 8));
    127e:	0a29      	lsrs	r1, r5, #8
    1280:	b2c9      	uxtb	r1, r1
    1282:	0020      	movs	r0, r4
    1284:	47b0      	blx	r6
	Send_Byte(Dst & 0xFF);
    1286:	b2e9      	uxtb	r1, r5
    1288:	0020      	movs	r0, r4
    128a:	47b0      	blx	r6
	CE_High_Flash();				// disable device
    128c:	0020      	movs	r0, r4
    128e:	4b03      	ldr	r3, [pc, #12]	; (129c <_ZN16FlashMemoryClass12Sector_EraseEm+0x38>)
    1290:	4798      	blx	r3
}
    1292:	bd70      	pop	{r4, r5, r6, pc}
    1294:	00000ec5 	.word	0x00000ec5
    1298:	00000ef1 	.word	0x00000ef1
    129c:	00000edb 	.word	0x00000edb

000012a0 <_ZN16FlashMemoryClass10eraseFlashEmm>:
	{
    12a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12a2:	0004      	movs	r4, r0
    12a4:	000e      	movs	r6, r1
    12a6:	0015      	movs	r5, r2
	flashOpen();
    12a8:	4b1d      	ldr	r3, [pc, #116]	; (1320 <_ZN16FlashMemoryClass10eraseFlashEmm+0x80>)
    12aa:	4798      	blx	r3
	while (eraseRemaining > 0)
    12ac:	2d00      	cmp	r5, #0
    12ae:	d00b      	beq.n	12c8 <_ZN16FlashMemoryClass10eraseFlashEmm+0x28>
	WREN();
    12b0:	4f1c      	ldr	r7, [pc, #112]	; (1324 <_ZN16FlashMemoryClass10eraseFlashEmm+0x84>)
    12b2:	e020      	b.n	12f6 <_ZN16FlashMemoryClass10eraseFlashEmm+0x56>
		Sector_Erase(eraseAddress);
    12b4:	0031      	movs	r1, r6
    12b6:	0020      	movs	r0, r4
    12b8:	4b1b      	ldr	r3, [pc, #108]	; (1328 <_ZN16FlashMemoryClass10eraseFlashEmm+0x88>)
    12ba:	4798      	blx	r3
	WaitBusy();
    12bc:	0020      	movs	r0, r4
    12be:	4b1b      	ldr	r3, [pc, #108]	; (132c <_ZN16FlashMemoryClass10eraseFlashEmm+0x8c>)
    12c0:	4798      	blx	r3
	WRDI();
    12c2:	0020      	movs	r0, r4
    12c4:	4b1a      	ldr	r3, [pc, #104]	; (1330 <_ZN16FlashMemoryClass10eraseFlashEmm+0x90>)
    12c6:	4798      	blx	r3
	flashClose();
    12c8:	0020      	movs	r0, r4
    12ca:	4b1a      	ldr	r3, [pc, #104]	; (1334 <_ZN16FlashMemoryClass10eraseFlashEmm+0x94>)
    12cc:	4798      	blx	r3
}
    12ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Block_Erase_64K(eraseAddress);
    12d0:	0031      	movs	r1, r6
    12d2:	0020      	movs	r0, r4
    12d4:	4b18      	ldr	r3, [pc, #96]	; (1338 <_ZN16FlashMemoryClass10eraseFlashEmm+0x98>)
    12d6:	4798      	blx	r3
		eraseAddress += (64 * 1024);
    12d8:	2380      	movs	r3, #128	; 0x80
    12da:	025b      	lsls	r3, r3, #9
    12dc:	469c      	mov	ip, r3
    12de:	4466      	add	r6, ip
		eraseRemaining -= (64 * 1024);
    12e0:	4b16      	ldr	r3, [pc, #88]	; (133c <_ZN16FlashMemoryClass10eraseFlashEmm+0x9c>)
    12e2:	469c      	mov	ip, r3
    12e4:	4465      	add	r5, ip
	WaitBusy();
    12e6:	0020      	movs	r0, r4
    12e8:	4b10      	ldr	r3, [pc, #64]	; (132c <_ZN16FlashMemoryClass10eraseFlashEmm+0x8c>)
    12ea:	4798      	blx	r3
	WRDI();
    12ec:	0020      	movs	r0, r4
    12ee:	4b10      	ldr	r3, [pc, #64]	; (1330 <_ZN16FlashMemoryClass10eraseFlashEmm+0x90>)
    12f0:	4798      	blx	r3
	while (eraseRemaining > 0)
    12f2:	2d00      	cmp	r5, #0
    12f4:	d0e8      	beq.n	12c8 <_ZN16FlashMemoryClass10eraseFlashEmm+0x28>
	WREN();
    12f6:	0020      	movs	r0, r4
    12f8:	47b8      	blx	r7
	if (eraseRemaining <= 4 * 1024)
    12fa:	2380      	movs	r3, #128	; 0x80
    12fc:	015b      	lsls	r3, r3, #5
    12fe:	429d      	cmp	r5, r3
    1300:	d9d8      	bls.n	12b4 <_ZN16FlashMemoryClass10eraseFlashEmm+0x14>
	else if (eraseRemaining < 64 * 1024)
    1302:	4b0f      	ldr	r3, [pc, #60]	; (1340 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa0>)
    1304:	429d      	cmp	r5, r3
    1306:	d8e3      	bhi.n	12d0 <_ZN16FlashMemoryClass10eraseFlashEmm+0x30>
		Sector_Erase(eraseAddress);
    1308:	0031      	movs	r1, r6
    130a:	0020      	movs	r0, r4
    130c:	4b06      	ldr	r3, [pc, #24]	; (1328 <_ZN16FlashMemoryClass10eraseFlashEmm+0x88>)
    130e:	4798      	blx	r3
		eraseAddress += (4 * 1024);
    1310:	2380      	movs	r3, #128	; 0x80
    1312:	015b      	lsls	r3, r3, #5
    1314:	469c      	mov	ip, r3
    1316:	4466      	add	r6, ip
		eraseRemaining -= (4 * 1024);
    1318:	4b0a      	ldr	r3, [pc, #40]	; (1344 <_ZN16FlashMemoryClass10eraseFlashEmm+0xa4>)
    131a:	469c      	mov	ip, r3
    131c:	4465      	add	r5, ip
    131e:	e7e2      	b.n	12e6 <_ZN16FlashMemoryClass10eraseFlashEmm+0x46>
    1320:	00000eb1 	.word	0x00000eb1
    1324:	00001031 	.word	0x00001031
    1328:	00001265 	.word	0x00001265
    132c:	00001139 	.word	0x00001139
    1330:	00000f89 	.word	0x00000f89
    1334:	00001165 	.word	0x00001165
    1338:	00000fad 	.word	0x00000fad
    133c:	ffff0000 	.word	0xffff0000
    1340:	0000ffff 	.word	0x0000ffff
    1344:	fffff000 	.word	0xfffff000

00001348 <_ZN16FlashMemoryClass12WriteAddressEPhmm>:
	delay_ms(100);
	CE_Low_Flash();
	Send_Byte(0x99);
	CE_High_Flash();				// disable device
}
uint32_t	FlashMemoryClass::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
    1348:	b5f0      	push	{r4, r5, r6, r7, lr}
    134a:	46c6      	mov	lr, r8
    134c:	b500      	push	{lr}
    134e:	0005      	movs	r5, r0
    1350:	000c      	movs	r4, r1
    1352:	4690      	mov	r8, r2
    1354:	001e      	movs	r6, r3
	uint32_t	w;
	while(!IsReady());
    1356:	4f1e      	ldr	r7, [pc, #120]	; (13d0 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x88>)
    1358:	0028      	movs	r0, r5
    135a:	47b8      	blx	r7
    135c:	2800      	cmp	r0, #0
    135e:	d0fb      	beq.n	1358 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x10>
	flashOpen();
    1360:	0028      	movs	r0, r5
    1362:	4b1c      	ldr	r3, [pc, #112]	; (13d4 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x8c>)
    1364:	4798      	blx	r3
	WREN();
    1366:	0028      	movs	r0, r5
    1368:	4b1b      	ldr	r3, [pc, #108]	; (13d8 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x90>)
    136a:	4798      	blx	r3
	CE_Low_Flash();
    136c:	0028      	movs	r0, r5
    136e:	4b1b      	ldr	r3, [pc, #108]	; (13dc <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x94>)
    1370:	4798      	blx	r3
	localBuffer[0]=kFlashByteProgram;
    1372:	2202      	movs	r2, #2
    1374:	232c      	movs	r3, #44	; 0x2c
    1376:	54ea      	strb	r2, [r5, r3]
	localBuffer[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    1378:	4643      	mov	r3, r8
    137a:	0c1a      	lsrs	r2, r3, #16
    137c:	232d      	movs	r3, #45	; 0x2d
    137e:	54ea      	strb	r2, [r5, r3]
	localBuffer[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    1380:	4643      	mov	r3, r8
    1382:	0a1a      	lsrs	r2, r3, #8
    1384:	232e      	movs	r3, #46	; 0x2e
    1386:	54ea      	strb	r2, [r5, r3]
	localBuffer[3]=(uint8_t)(addr&0xFF);
    1388:	3301      	adds	r3, #1
    138a:	4642      	mov	r2, r8
    138c:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i = 4; i <(size)+4; i++)
    138e:	1d32      	adds	r2, r6, #4
    1390:	2a04      	cmp	r2, #4
    1392:	d908      	bls.n	13a6 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x5e>
    1394:	0029      	movs	r1, r5
    1396:	3130      	adds	r1, #48	; 0x30
    1398:	19a6      	adds	r6, r4, r6
	{
		localBuffer[i]=*p;
    139a:	7820      	ldrb	r0, [r4, #0]
    139c:	7008      	strb	r0, [r1, #0]
		p++;
    139e:	3401      	adds	r4, #1
    13a0:	3101      	adds	r1, #1
	for (uint32_t i = 4; i <(size)+4; i++)
    13a2:	42b4      	cmp	r4, r6
    13a4:	d1f9      	bne.n	139a <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x52>
	}


	w=spi.write(&localBuffer[0],size+4);
    13a6:	0029      	movs	r1, r5
    13a8:	312c      	adds	r1, #44	; 0x2c
    13aa:	0028      	movs	r0, r5
    13ac:	3018      	adds	r0, #24
    13ae:	4b0c      	ldr	r3, [pc, #48]	; (13e0 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x98>)
    13b0:	4798      	blx	r3
    13b2:	0004      	movs	r4, r0

	CE_High_Flash();
    13b4:	0028      	movs	r0, r5
    13b6:	4b0b      	ldr	r3, [pc, #44]	; (13e4 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0x9c>)
    13b8:	4798      	blx	r3
	WRDI();
    13ba:	0028      	movs	r0, r5
    13bc:	4b0a      	ldr	r3, [pc, #40]	; (13e8 <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xa0>)
    13be:	4798      	blx	r3
	flashClose();
    13c0:	0028      	movs	r0, r5
    13c2:	4b0a      	ldr	r3, [pc, #40]	; (13ec <_ZN16FlashMemoryClass12WriteAddressEPhmm+0xa4>)
    13c4:	4798      	blx	r3
	return	w;
	/*return (uint32_t)writeFlash(addr,(void*)p,size);*/
}
    13c6:	0020      	movs	r0, r4
    13c8:	bc04      	pop	{r2}
    13ca:	4690      	mov	r8, r2
    13cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13ce:	46c0      	nop			; (mov r8, r8)
    13d0:	00001235 	.word	0x00001235
    13d4:	00000eb1 	.word	0x00000eb1
    13d8:	00001031 	.word	0x00001031
    13dc:	00000ec5 	.word	0x00000ec5
    13e0:	0000150d 	.word	0x0000150d
    13e4:	00000edb 	.word	0x00000edb
    13e8:	00000f89 	.word	0x00000f89
    13ec:	00001165 	.word	0x00001165

000013f0 <_ZN16FlashMemoryClass11ReadAddressEPhmm>:
uint32_t	FlashMemoryClass::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
    13f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13f2:	b083      	sub	sp, #12
    13f4:	0004      	movs	r4, r0
    13f6:	9101      	str	r1, [sp, #4]
    13f8:	0015      	movs	r5, r2
    13fa:	001e      	movs	r6, r3
	uint8_t	dummy;
	while(!IsReady());
    13fc:	4f16      	ldr	r7, [pc, #88]	; (1458 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x68>)
    13fe:	0020      	movs	r0, r4
    1400:	47b8      	blx	r7
    1402:	2800      	cmp	r0, #0
    1404:	d0fb      	beq.n	13fe <_ZN16FlashMemoryClass11ReadAddressEPhmm+0xe>
	flashOpen();
    1406:	0020      	movs	r0, r4
    1408:	4b14      	ldr	r3, [pc, #80]	; (145c <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x6c>)
    140a:	4798      	blx	r3
	CE_Low_Flash();
    140c:	0020      	movs	r0, r4
    140e:	4b14      	ldr	r3, [pc, #80]	; (1460 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x70>)
    1410:	4798      	blx	r3
	instruction[0]=kFlashRead;
    1412:	2203      	movs	r2, #3
    1414:	2340      	movs	r3, #64	; 0x40
    1416:	54e2      	strb	r2, [r4, r3]
	instruction[1]=(uint8_t)((addr & 0xFFFFFF) >> 16);
    1418:	0c2a      	lsrs	r2, r5, #16
    141a:	3301      	adds	r3, #1
    141c:	54e2      	strb	r2, [r4, r3]
	instruction[2]=(uint8_t)((addr & 0xFFFF) >> 8);
    141e:	0a2a      	lsrs	r2, r5, #8
    1420:	3301      	adds	r3, #1
    1422:	54e2      	strb	r2, [r4, r3]
	instruction[3]=(uint8_t)(addr&0xFF);
    1424:	3301      	adds	r3, #1
    1426:	54e5      	strb	r5, [r4, r3]
		
	uint32_t	r=spi.write(instruction,4);
    1428:	0027      	movs	r7, r4
    142a:	3718      	adds	r7, #24
    142c:	0021      	movs	r1, r4
    142e:	3140      	adds	r1, #64	; 0x40
    1430:	2204      	movs	r2, #4
    1432:	0038      	movs	r0, r7
    1434:	4b0b      	ldr	r3, [pc, #44]	; (1464 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x74>)
    1436:	4798      	blx	r3
	r=spi.read(p,size);
    1438:	0032      	movs	r2, r6
    143a:	9901      	ldr	r1, [sp, #4]
    143c:	0038      	movs	r0, r7
    143e:	4b0a      	ldr	r3, [pc, #40]	; (1468 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x78>)
    1440:	4798      	blx	r3
    1442:	0005      	movs	r5, r0
	CE_High_Flash();
    1444:	0020      	movs	r0, r4
    1446:	4b09      	ldr	r3, [pc, #36]	; (146c <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x7c>)
    1448:	4798      	blx	r3
	flashClose();
    144a:	0020      	movs	r0, r4
    144c:	4b08      	ldr	r3, [pc, #32]	; (1470 <_ZN16FlashMemoryClass11ReadAddressEPhmm+0x80>)
    144e:	4798      	blx	r3
	
	return	r;
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
    1450:	0028      	movs	r0, r5
    1452:	b003      	add	sp, #12
    1454:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1456:	46c0      	nop			; (mov r8, r8)
    1458:	00001235 	.word	0x00001235
    145c:	00000eb1 	.word	0x00000eb1
    1460:	00000ec5 	.word	0x00000ec5
    1464:	0000150d 	.word	0x0000150d
    1468:	0000152d 	.word	0x0000152d
    146c:	00000edb 	.word	0x00000edb
    1470:	00001165 	.word	0x00001165

00001474 <_GLOBAL__sub_I_flashMap>:
    1474:	b510      	push	{r4, lr}
    1476:	4c06      	ldr	r4, [pc, #24]	; (1490 <_GLOBAL__sub_I_flashMap+0x1c>)
    1478:	3404      	adds	r4, #4
    147a:	4906      	ldr	r1, [pc, #24]	; (1494 <_GLOBAL__sub_I_flashMap+0x20>)
    147c:	0020      	movs	r0, r4
    147e:	4b06      	ldr	r3, [pc, #24]	; (1498 <_GLOBAL__sub_I_flashMap+0x24>)
    1480:	4798      	blx	r3
    1482:	4a06      	ldr	r2, [pc, #24]	; (149c <_GLOBAL__sub_I_flashMap+0x28>)
    1484:	4906      	ldr	r1, [pc, #24]	; (14a0 <_GLOBAL__sub_I_flashMap+0x2c>)
    1486:	0020      	movs	r0, r4
    1488:	4b06      	ldr	r3, [pc, #24]	; (14a4 <_GLOBAL__sub_I_flashMap+0x30>)
    148a:	4798      	blx	r3
    148c:	bd10      	pop	{r4, pc}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	200005dc 	.word	0x200005dc
    1494:	20000ae8 	.word	0x20000ae8
    1498:	00000e85 	.word	0x00000e85
    149c:	20000000 	.word	0x20000000
    14a0:	00000e71 	.word	0x00000e71
    14a4:	00004bad 	.word	0x00004bad

000014a8 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
{
		ptrSPISync=this;
    14a8:	4b01      	ldr	r3, [pc, #4]	; (14b0 <_ZN13SPI_Syn_ClassC1Ev+0x8>)
    14aa:	6018      	str	r0, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    14ac:	4770      	bx	lr
    14ae:	46c0      	nop			; (mov r8, r8)
    14b0:	20000628 	.word	0x20000628

000014b4 <_ZN13SPI_Syn_ClassD1Ev>:
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
{
} //~SPI_Syn_Class
    14b4:	4770      	bx	lr
	...

000014b8 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
    14b8:	b510      	push	{r4, lr}
    14ba:	0004      	movs	r4, r0
	spi_m_sync_get_io_descriptor(SPI, &spio);
    14bc:	0001      	movs	r1, r0
    14be:	3108      	adds	r1, #8
    14c0:	6840      	ldr	r0, [r0, #4]
    14c2:	4b04      	ldr	r3, [pc, #16]	; (14d4 <_ZN13SPI_Syn_Class4initEv+0x1c>)
    14c4:	4798      	blx	r3

	spi_m_sync_enable(SPI);
    14c6:	6860      	ldr	r0, [r4, #4]
    14c8:	4b03      	ldr	r3, [pc, #12]	; (14d8 <_ZN13SPI_Syn_Class4initEv+0x20>)
    14ca:	4798      	blx	r3
	
	ready=true;
    14cc:	2301      	movs	r3, #1
    14ce:	7023      	strb	r3, [r4, #0]
	xferDone=true;
    14d0:	7063      	strb	r3, [r4, #1]
	
}
    14d2:	bd10      	pop	{r4, pc}
    14d4:	00001ab1 	.word	0x00001ab1
    14d8:	000019a1 	.word	0x000019a1

000014dc <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
	ptrSPISync=this;
    14dc:	4b01      	ldr	r3, [pc, #4]	; (14e4 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x8>)
    14de:	6018      	str	r0, [r3, #0]
	SPI=spiDesc;
    14e0:	6041      	str	r1, [r0, #4]
}
    14e2:	4770      	bx	lr
    14e4:	20000628 	.word	0x20000628

000014e8 <_ZN13SPI_Syn_Class6enableEv>:


int32_t SPI_Syn_Class::enable(){
    14e8:	b510      	push	{r4, lr}
    14ea:	0004      	movs	r4, r0
	spi_m_sync_get_io_descriptor(SPI, &spio);
    14ec:	0001      	movs	r1, r0
    14ee:	3108      	adds	r1, #8
    14f0:	6840      	ldr	r0, [r0, #4]
    14f2:	4b04      	ldr	r3, [pc, #16]	; (1504 <_ZN13SPI_Syn_Class6enableEv+0x1c>)
    14f4:	4798      	blx	r3
	spi_m_sync_enable(SPI);
    14f6:	6860      	ldr	r0, [r4, #4]
    14f8:	4b03      	ldr	r3, [pc, #12]	; (1508 <_ZN13SPI_Syn_Class6enableEv+0x20>)
    14fa:	4798      	blx	r3
	ready=true;
    14fc:	2301      	movs	r3, #1
    14fe:	7023      	strb	r3, [r4, #0]
	return 0;
}
    1500:	2000      	movs	r0, #0
    1502:	bd10      	pop	{r4, pc}
    1504:	00001ab1 	.word	0x00001ab1
    1508:	000019a1 	.word	0x000019a1

0000150c <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
    150c:	b510      	push	{r4, lr}
    150e:	0004      	movs	r4, r0
	int32_t w;
	wFlag=true;
    1510:	2301      	movs	r3, #1
    1512:	7403      	strb	r3, [r0, #16]
	w= io_write(spio,p,(uint16_t)n);
    1514:	b292      	uxth	r2, r2
    1516:	6880      	ldr	r0, [r0, #8]
    1518:	4b03      	ldr	r3, [pc, #12]	; (1528 <_ZN13SPI_Syn_Class5writeEPKhl+0x1c>)
    151a:	4798      	blx	r3
	wFlag=(bool)w;
    151c:	0003      	movs	r3, r0
    151e:	1e5a      	subs	r2, r3, #1
    1520:	4193      	sbcs	r3, r2
    1522:	b2db      	uxtb	r3, r3
    1524:	7423      	strb	r3, [r4, #16]
	 return w;
	
}
    1526:	bd10      	pop	{r4, pc}
    1528:	000018e5 	.word	0x000018e5

0000152c <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
    152c:	b510      	push	{r4, lr}
    152e:	0004      	movs	r4, r0
	int32_t r;
	rFlag=true;
    1530:	2301      	movs	r3, #1
    1532:	7443      	strb	r3, [r0, #17]
	r=io_read(spio,p,(uint16_t)n);
    1534:	b292      	uxth	r2, r2
    1536:	6880      	ldr	r0, [r0, #8]
    1538:	4b03      	ldr	r3, [pc, #12]	; (1548 <_ZN13SPI_Syn_Class4readEPhl+0x1c>)
    153a:	4798      	blx	r3
	rFlag=(bool)r;
    153c:	0003      	movs	r3, r0
    153e:	1e5a      	subs	r2, r3, #1
    1540:	4193      	sbcs	r3, r2
    1542:	b2db      	uxtb	r3, r3
    1544:	7463      	strb	r3, [r4, #17]
	return  r;
}
    1546:	bd10      	pop	{r4, pc}
    1548:	00001919 	.word	0x00001919

0000154c <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
    154c:	b510      	push	{r4, lr}
	spi_m_sync_disable(SPI);
    154e:	6840      	ldr	r0, [r0, #4]
    1550:	4b01      	ldr	r3, [pc, #4]	; (1558 <_ZN13SPI_Syn_Class7disableEv+0xc>)
    1552:	4798      	blx	r3
	
}
    1554:	bd10      	pop	{r4, pc}
    1556:	46c0      	nop			; (mov r8, r8)
    1558:	000019c9 	.word	0x000019c9

0000155c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    155c:	b510      	push	{r4, lr}
	system_init();
    155e:	4b02      	ldr	r3, [pc, #8]	; (1568 <atmel_start_init+0xc>)
    1560:	4798      	blx	r3
	usb_init();
    1562:	4b02      	ldr	r3, [pc, #8]	; (156c <atmel_start_init+0x10>)
    1564:	4798      	blx	r3
}
    1566:	bd10      	pop	{r4, pc}
    1568:	00001781 	.word	0x00001781
    156c:	00004b85 	.word	0x00004b85

00001570 <SPI_MEMORIES_PORT_init>:
struct timer_descriptor      TIMER_CALENDAR;

struct calendar_descriptor CALENDAR;

void SPI_MEMORIES_PORT_init(void)
{
    1570:	b5f0      	push	{r4, r5, r6, r7, lr}
    1572:	46ce      	mov	lr, r9
    1574:	4647      	mov	r7, r8
    1576:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1578:	21c0      	movs	r1, #192	; 0xc0
    157a:	05c9      	lsls	r1, r1, #23
    157c:	2380      	movs	r3, #128	; 0x80
    157e:	009b      	lsls	r3, r3, #2
    1580:	604b      	str	r3, [r1, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1582:	4b25      	ldr	r3, [pc, #148]	; (1618 <SPI_MEMORIES_PORT_init+0xa8>)
    1584:	4a25      	ldr	r2, [pc, #148]	; (161c <SPI_MEMORIES_PORT_init+0xac>)
    1586:	629a      	str	r2, [r3, #40]	; 0x28
    1588:	4a25      	ldr	r2, [pc, #148]	; (1620 <SPI_MEMORIES_PORT_init+0xb0>)
    158a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    158c:	2449      	movs	r4, #73	; 0x49
    158e:	5d1a      	ldrb	r2, [r3, r4]
    1590:	2004      	movs	r0, #4
    1592:	4382      	bics	r2, r0
    1594:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1596:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1598:	2601      	movs	r6, #1
    159a:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    159c:	2201      	movs	r2, #1
    159e:	4310      	orrs	r0, r2
    15a0:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    15a2:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    15a4:	2734      	movs	r7, #52	; 0x34
    15a6:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    15a8:	250f      	movs	r5, #15
    15aa:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
    15ac:	2420      	movs	r4, #32
    15ae:	46a1      	mov	r9, r4
    15b0:	464c      	mov	r4, r9
    15b2:	4320      	orrs	r0, r4
    15b4:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    15b6:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    15b8:	2080      	movs	r0, #128	; 0x80
    15ba:	00c0      	lsls	r0, r0, #3
    15bc:	6148      	str	r0, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    15be:	6088      	str	r0, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    15c0:	4818      	ldr	r0, [pc, #96]	; (1624 <SPI_MEMORIES_PORT_init+0xb4>)
    15c2:	6298      	str	r0, [r3, #40]	; 0x28
    15c4:	20c0      	movs	r0, #192	; 0xc0
    15c6:	0600      	lsls	r0, r0, #24
    15c8:	4684      	mov	ip, r0
    15ca:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    15cc:	3716      	adds	r7, #22
    15ce:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    15d0:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    15d2:	4310      	orrs	r0, r2
    15d4:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    15d6:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    15d8:	2035      	movs	r0, #53	; 0x35
    15da:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    15dc:	240f      	movs	r4, #15
    15de:	43a7      	bics	r7, r4
	tmp |= PORT_PMUX_PMUXE(data);
    15e0:	3c0d      	subs	r4, #13
    15e2:	4327      	orrs	r7, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    15e4:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    15e6:	2780      	movs	r7, #128	; 0x80
    15e8:	013f      	lsls	r7, r7, #4
    15ea:	614f      	str	r7, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    15ec:	608f      	str	r7, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    15ee:	490e      	ldr	r1, [pc, #56]	; (1628 <SPI_MEMORIES_PORT_init+0xb8>)
    15f0:	6299      	str	r1, [r3, #40]	; 0x28
    15f2:	4661      	mov	r1, ip
    15f4:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    15f6:	274b      	movs	r7, #75	; 0x4b
    15f8:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    15fa:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    15fc:	4311      	orrs	r1, r2
    15fe:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1600:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1602:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1604:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
    1606:	4649      	mov	r1, r9
    1608:	430a      	orrs	r2, r1
    160a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    160c:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA11, PINMUX_PA11C_SERCOM0_PAD3);
}
    160e:	bc0c      	pop	{r2, r3}
    1610:	4690      	mov	r8, r2
    1612:	4699      	mov	r9, r3
    1614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	41004400 	.word	0x41004400
    161c:	40020200 	.word	0x40020200
    1620:	c0020000 	.word	0xc0020000
    1624:	40000400 	.word	0x40000400
    1628:	40000800 	.word	0x40000800

0000162c <SPI_MEMORIES_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    162c:	4a04      	ldr	r2, [pc, #16]	; (1640 <SPI_MEMORIES_CLOCK_init+0x14>)
    162e:	6a13      	ldr	r3, [r2, #32]
    1630:	2104      	movs	r1, #4
    1632:	430b      	orrs	r3, r1
    1634:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
    1636:	4a03      	ldr	r2, [pc, #12]	; (1644 <SPI_MEMORIES_CLOCK_init+0x18>)
    1638:	4b03      	ldr	r3, [pc, #12]	; (1648 <SPI_MEMORIES_CLOCK_init+0x1c>)
    163a:	805a      	strh	r2, [r3, #2]

void SPI_MEMORIES_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
    163c:	4770      	bx	lr
    163e:	46c0      	nop			; (mov r8, r8)
    1640:	40000400 	.word	0x40000400
    1644:	00004014 	.word	0x00004014
    1648:	40000c00 	.word	0x40000c00

0000164c <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    164c:	b510      	push	{r4, lr}
	SPI_MEMORIES_CLOCK_init();
    164e:	4b04      	ldr	r3, [pc, #16]	; (1660 <SPI_MEMORIES_init+0x14>)
    1650:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM0);
    1652:	4904      	ldr	r1, [pc, #16]	; (1664 <SPI_MEMORIES_init+0x18>)
    1654:	4804      	ldr	r0, [pc, #16]	; (1668 <SPI_MEMORIES_init+0x1c>)
    1656:	4b05      	ldr	r3, [pc, #20]	; (166c <SPI_MEMORIES_init+0x20>)
    1658:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    165a:	4b05      	ldr	r3, [pc, #20]	; (1670 <SPI_MEMORIES_init+0x24>)
    165c:	4798      	blx	r3
}
    165e:	bd10      	pop	{r4, pc}
    1660:	0000162d 	.word	0x0000162d
    1664:	42000800 	.word	0x42000800
    1668:	20000ae8 	.word	0x20000ae8
    166c:	0000194d 	.word	0x0000194d
    1670:	00001571 	.word	0x00001571

00001674 <CALENDAR_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
    1674:	4a04      	ldr	r2, [pc, #16]	; (1688 <CALENDAR_CLOCK_init+0x14>)
    1676:	6993      	ldr	r3, [r2, #24]
    1678:	2120      	movs	r1, #32
    167a:	430b      	orrs	r3, r1
    167c:	6193      	str	r3, [r2, #24]
    167e:	4a03      	ldr	r2, [pc, #12]	; (168c <CALENDAR_CLOCK_init+0x18>)
    1680:	4b03      	ldr	r3, [pc, #12]	; (1690 <CALENDAR_CLOCK_init+0x1c>)
    1682:	805a      	strh	r2, [r3, #2]

void CALENDAR_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
    1684:	4770      	bx	lr
    1686:	46c0      	nop			; (mov r8, r8)
    1688:	40000400 	.word	0x40000400
    168c:	00004304 	.word	0x00004304
    1690:	40000c00 	.word	0x40000c00

00001694 <CALENDAR_init>:

void CALENDAR_init(void)
{
    1694:	b510      	push	{r4, lr}
	CALENDAR_CLOCK_init();
    1696:	4b03      	ldr	r3, [pc, #12]	; (16a4 <CALENDAR_init+0x10>)
    1698:	4798      	blx	r3
	calendar_init(&CALENDAR, RTC);
    169a:	4903      	ldr	r1, [pc, #12]	; (16a8 <CALENDAR_init+0x14>)
    169c:	4803      	ldr	r0, [pc, #12]	; (16ac <CALENDAR_init+0x18>)
    169e:	4b04      	ldr	r3, [pc, #16]	; (16b0 <CALENDAR_init+0x1c>)
    16a0:	4798      	blx	r3
}
    16a2:	bd10      	pop	{r4, pc}
    16a4:	00001675 	.word	0x00001675
    16a8:	40001400 	.word	0x40001400
    16ac:	20000b00 	.word	0x20000b00
    16b0:	0000187d 	.word	0x0000187d

000016b4 <USB_DEVICE_INSTANCE_PORT_init>:

	timer_init(&TIMER_CALENDAR, TC4, _tc_get_timer());
}

void USB_DEVICE_INSTANCE_PORT_init(void)
{
    16b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16b6:	46c6      	mov	lr, r8
    16b8:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    16ba:	24c0      	movs	r4, #192	; 0xc0
    16bc:	05e4      	lsls	r4, r4, #23
    16be:	2280      	movs	r2, #128	; 0x80
    16c0:	0452      	lsls	r2, r2, #17
    16c2:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    16c4:	4b1a      	ldr	r3, [pc, #104]	; (1730 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
    16c6:	2780      	movs	r7, #128	; 0x80
    16c8:	05ff      	lsls	r7, r7, #23
    16ca:	629f      	str	r7, [r3, #40]	; 0x28
    16cc:	4919      	ldr	r1, [pc, #100]	; (1734 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
    16ce:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    16d0:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    16d2:	2058      	movs	r0, #88	; 0x58
    16d4:	5c19      	ldrb	r1, [r3, r0]
    16d6:	2204      	movs	r2, #4
    16d8:	4690      	mov	r8, r2
    16da:	4391      	bics	r1, r2
    16dc:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    16de:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    16e0:	2601      	movs	r6, #1
    16e2:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    16e4:	2501      	movs	r5, #1
    16e6:	4329      	orrs	r1, r5
    16e8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    16ea:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    16ec:	381c      	subs	r0, #28
    16ee:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    16f0:	320b      	adds	r2, #11
    16f2:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    16f4:	3a09      	subs	r2, #9
    16f6:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    16f8:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    16fa:	2180      	movs	r1, #128	; 0x80
    16fc:	0489      	lsls	r1, r1, #18
    16fe:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1700:	629f      	str	r7, [r3, #40]	; 0x28
    1702:	4f0d      	ldr	r7, [pc, #52]	; (1738 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
    1704:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1706:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1708:	2159      	movs	r1, #89	; 0x59
    170a:	5c5c      	ldrb	r4, [r3, r1]
    170c:	4642      	mov	r2, r8
    170e:	4394      	bics	r4, r2
    1710:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1712:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1714:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1716:	432a      	orrs	r2, r5
    1718:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    171a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    171c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    171e:	394a      	subs	r1, #74	; 0x4a
    1720:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    1722:	3151      	adds	r1, #81	; 0x51
    1724:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1726:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
    1728:	bc04      	pop	{r2}
    172a:	4690      	mov	r8, r2
    172c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    172e:	46c0      	nop			; (mov r8, r8)
    1730:	41004400 	.word	0x41004400
    1734:	c0000100 	.word	0xc0000100
    1738:	c0000200 	.word	0xc0000200

0000173c <USB_DEVICE_INSTANCE_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
    173c:	4b06      	ldr	r3, [pc, #24]	; (1758 <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
    173e:	69da      	ldr	r2, [r3, #28]
    1740:	2120      	movs	r1, #32
    1742:	430a      	orrs	r2, r1
    1744:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
    1746:	695a      	ldr	r2, [r3, #20]
    1748:	3120      	adds	r1, #32
    174a:	430a      	orrs	r2, r1
    174c:	615a      	str	r2, [r3, #20]
    174e:	4a03      	ldr	r2, [pc, #12]	; (175c <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
    1750:	4b03      	ldr	r3, [pc, #12]	; (1760 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
    1752:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
    1754:	4770      	bx	lr
    1756:	46c0      	nop			; (mov r8, r8)
    1758:	40000400 	.word	0x40000400
    175c:	00004106 	.word	0x00004106
    1760:	40000c00 	.word	0x40000c00

00001764 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
    1764:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
    1766:	4b03      	ldr	r3, [pc, #12]	; (1774 <USB_DEVICE_INSTANCE_init+0x10>)
    1768:	4798      	blx	r3
	usb_d_init();
    176a:	4b03      	ldr	r3, [pc, #12]	; (1778 <USB_DEVICE_INSTANCE_init+0x14>)
    176c:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    176e:	4b03      	ldr	r3, [pc, #12]	; (177c <USB_DEVICE_INSTANCE_init+0x18>)
    1770:	4798      	blx	r3
}
    1772:	bd10      	pop	{r4, pc}
    1774:	0000173d 	.word	0x0000173d
    1778:	00002059 	.word	0x00002059
    177c:	000016b5 	.word	0x000016b5

00001780 <system_init>:

void system_init(void)
{
    1780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    1782:	4b2b      	ldr	r3, [pc, #172]	; (1830 <system_init+0xb0>)
    1784:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1786:	22c0      	movs	r2, #192	; 0xc0
    1788:	05d2      	lsls	r2, r2, #23
    178a:	2380      	movs	r3, #128	; 0x80
    178c:	039b      	lsls	r3, r3, #14
    178e:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1790:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1792:	4b28      	ldr	r3, [pc, #160]	; (1834 <system_init+0xb4>)
    1794:	2080      	movs	r0, #128	; 0x80
    1796:	05c0      	lsls	r0, r0, #23
    1798:	6298      	str	r0, [r3, #40]	; 0x28
    179a:	4927      	ldr	r1, [pc, #156]	; (1838 <system_init+0xb8>)
    179c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    179e:	2555      	movs	r5, #85	; 0x55
    17a0:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    17a2:	2101      	movs	r1, #1
    17a4:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    17a6:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    17a8:	2480      	movs	r4, #128	; 0x80
    17aa:	03e4      	lsls	r4, r4, #15
    17ac:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    17ae:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    17b0:	6298      	str	r0, [r3, #40]	; 0x28
    17b2:	4c22      	ldr	r4, [pc, #136]	; (183c <system_init+0xbc>)
    17b4:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    17b6:	3501      	adds	r5, #1
    17b8:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    17ba:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    17bc:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    17be:	2480      	movs	r4, #128	; 0x80
    17c0:	0524      	lsls	r4, r4, #20
    17c2:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    17c4:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    17c6:	6298      	str	r0, [r3, #40]	; 0x28
    17c8:	4c1d      	ldr	r4, [pc, #116]	; (1840 <system_init+0xc0>)
    17ca:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    17cc:	3505      	adds	r5, #5
    17ce:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    17d0:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    17d2:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    17d4:	2480      	movs	r4, #128	; 0x80
    17d6:	0564      	lsls	r4, r4, #21
    17d8:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    17da:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    17dc:	6298      	str	r0, [r3, #40]	; 0x28
    17de:	4a19      	ldr	r2, [pc, #100]	; (1844 <system_init+0xc4>)
    17e0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    17e2:	205c      	movs	r0, #92	; 0x5c
    17e4:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    17e6:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    17e8:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);

	SPI_MEMORIES_init();
    17ea:	4b17      	ldr	r3, [pc, #92]	; (1848 <system_init+0xc8>)
    17ec:	4798      	blx	r3

	CALENDAR_init();
    17ee:	4b17      	ldr	r3, [pc, #92]	; (184c <system_init+0xcc>)
    17f0:	4798      	blx	r3
		PM->APBCMASK.reg |= 1 << peripheral;
    17f2:	4c17      	ldr	r4, [pc, #92]	; (1850 <system_init+0xd0>)
    17f4:	6a22      	ldr	r2, [r4, #32]
    17f6:	2380      	movs	r3, #128	; 0x80
    17f8:	011b      	lsls	r3, r3, #4
    17fa:	4313      	orrs	r3, r2
    17fc:	6223      	str	r3, [r4, #32]
    17fe:	4f15      	ldr	r7, [pc, #84]	; (1854 <system_init+0xd4>)
    1800:	4b15      	ldr	r3, [pc, #84]	; (1858 <system_init+0xd8>)
    1802:	807b      	strh	r3, [r7, #2]
	timer_init(&TIMER_INTERFACE, TC3, _tc_get_timer());
    1804:	4e15      	ldr	r6, [pc, #84]	; (185c <system_init+0xdc>)
    1806:	47b0      	blx	r6
    1808:	0002      	movs	r2, r0
    180a:	4915      	ldr	r1, [pc, #84]	; (1860 <system_init+0xe0>)
    180c:	4815      	ldr	r0, [pc, #84]	; (1864 <system_init+0xe4>)
    180e:	4d16      	ldr	r5, [pc, #88]	; (1868 <system_init+0xe8>)
    1810:	47a8      	blx	r5
    1812:	6a22      	ldr	r2, [r4, #32]
    1814:	2380      	movs	r3, #128	; 0x80
    1816:	015b      	lsls	r3, r3, #5
    1818:	4313      	orrs	r3, r2
    181a:	6223      	str	r3, [r4, #32]
    181c:	4b13      	ldr	r3, [pc, #76]	; (186c <system_init+0xec>)
    181e:	807b      	strh	r3, [r7, #2]
	timer_init(&TIMER_CALENDAR, TC4, _tc_get_timer());
    1820:	47b0      	blx	r6
    1822:	0002      	movs	r2, r0
    1824:	4912      	ldr	r1, [pc, #72]	; (1870 <system_init+0xf0>)
    1826:	4813      	ldr	r0, [pc, #76]	; (1874 <system_init+0xf4>)
    1828:	47a8      	blx	r5

	TIMER_INTERFACE_init();
	TIMER_CALENDAR_init();

	USB_DEVICE_INSTANCE_init();
    182a:	4b13      	ldr	r3, [pc, #76]	; (1878 <system_init+0xf8>)
    182c:	4798      	blx	r3
}
    182e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1830:	00002511 	.word	0x00002511
    1834:	41004400 	.word	0x41004400
    1838:	c0000020 	.word	0xc0000020
    183c:	c0000040 	.word	0xc0000040
    1840:	c0000800 	.word	0xc0000800
    1844:	c0001000 	.word	0xc0001000
    1848:	0000164d 	.word	0x0000164d
    184c:	00001695 	.word	0x00001695
    1850:	40000400 	.word	0x40000400
    1854:	40000c00 	.word	0x40000c00
    1858:	0000431b 	.word	0x0000431b
    185c:	00002b9f 	.word	0x00002b9f
    1860:	42002c00 	.word	0x42002c00
    1864:	20000b1c 	.word	0x20000b1c
    1868:	00001bdd 	.word	0x00001bdd
    186c:	0000431c 	.word	0x0000431c
    1870:	42003000 	.word	0x42003000
    1874:	20000b38 	.word	0x20000b38
    1878:	00001765 	.word	0x00001765

0000187c <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    187c:	b570      	push	{r4, r5, r6, lr}
    187e:	0004      	movs	r4, r0
    1880:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
    1882:	1e43      	subs	r3, r0, #1
    1884:	4198      	sbcs	r0, r3
    1886:	b2c0      	uxtb	r0, r0
    1888:	22e0      	movs	r2, #224	; 0xe0
    188a:	0052      	lsls	r2, r2, #1
    188c:	4909      	ldr	r1, [pc, #36]	; (18b4 <calendar_init+0x38>)
    188e:	4b0a      	ldr	r3, [pc, #40]	; (18b8 <calendar_init+0x3c>)
    1890:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    1892:	6823      	ldr	r3, [r4, #0]
    1894:	42ab      	cmp	r3, r5
    1896:	d008      	beq.n	18aa <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
    1898:	2b00      	cmp	r3, #0
    189a:	d108      	bne.n	18ae <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
    189c:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
    189e:	0020      	movs	r0, r4
    18a0:	4b06      	ldr	r3, [pc, #24]	; (18bc <calendar_init+0x40>)
    18a2:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
    18a4:	4b06      	ldr	r3, [pc, #24]	; (18c0 <calendar_init+0x44>)
    18a6:	6163      	str	r3, [r4, #20]

	return ret;
}
    18a8:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NONE;
    18aa:	2000      	movs	r0, #0
    18ac:	e7fc      	b.n	18a8 <calendar_init+0x2c>
		return ERR_ALREADY_INITIALIZED;
    18ae:	2012      	movs	r0, #18
    18b0:	4240      	negs	r0, r0
    18b2:	e7f9      	b.n	18a8 <calendar_init+0x2c>
    18b4:	000050c0 	.word	0x000050c0
    18b8:	000023dd 	.word	0x000023dd
    18bc:	00002611 	.word	0x00002611
    18c0:	000007b2 	.word	0x000007b2

000018c4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    18c4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    18c6:	4b04      	ldr	r3, [pc, #16]	; (18d8 <delay_ms+0x14>)
    18c8:	681c      	ldr	r4, [r3, #0]
    18ca:	4b04      	ldr	r3, [pc, #16]	; (18dc <delay_ms+0x18>)
    18cc:	4798      	blx	r3
    18ce:	0001      	movs	r1, r0
    18d0:	0020      	movs	r0, r4
    18d2:	4b03      	ldr	r3, [pc, #12]	; (18e0 <delay_ms+0x1c>)
    18d4:	4798      	blx	r3
}
    18d6:	bd10      	pop	{r4, pc}
    18d8:	2000062c 	.word	0x2000062c
    18dc:	000024e9 	.word	0x000024e9
    18e0:	00002509 	.word	0x00002509

000018e4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    18e4:	b570      	push	{r4, r5, r6, lr}
    18e6:	0006      	movs	r6, r0
    18e8:	000c      	movs	r4, r1
    18ea:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    18ec:	2800      	cmp	r0, #0
    18ee:	d00d      	beq.n	190c <io_write+0x28>
    18f0:	0008      	movs	r0, r1
    18f2:	1e43      	subs	r3, r0, #1
    18f4:	4198      	sbcs	r0, r3
    18f6:	b2c0      	uxtb	r0, r0
    18f8:	2234      	movs	r2, #52	; 0x34
    18fa:	4905      	ldr	r1, [pc, #20]	; (1910 <io_write+0x2c>)
    18fc:	4b05      	ldr	r3, [pc, #20]	; (1914 <io_write+0x30>)
    18fe:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1900:	6833      	ldr	r3, [r6, #0]
    1902:	002a      	movs	r2, r5
    1904:	0021      	movs	r1, r4
    1906:	0030      	movs	r0, r6
    1908:	4798      	blx	r3
}
    190a:	bd70      	pop	{r4, r5, r6, pc}
    190c:	2000      	movs	r0, #0
    190e:	e7f3      	b.n	18f8 <io_write+0x14>
    1910:	000050dc 	.word	0x000050dc
    1914:	000023dd 	.word	0x000023dd

00001918 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1918:	b570      	push	{r4, r5, r6, lr}
    191a:	0006      	movs	r6, r0
    191c:	000c      	movs	r4, r1
    191e:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    1920:	2800      	cmp	r0, #0
    1922:	d00d      	beq.n	1940 <io_read+0x28>
    1924:	0008      	movs	r0, r1
    1926:	1e43      	subs	r3, r0, #1
    1928:	4198      	sbcs	r0, r3
    192a:	b2c0      	uxtb	r0, r0
    192c:	223d      	movs	r2, #61	; 0x3d
    192e:	4905      	ldr	r1, [pc, #20]	; (1944 <io_read+0x2c>)
    1930:	4b05      	ldr	r3, [pc, #20]	; (1948 <io_read+0x30>)
    1932:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1934:	6873      	ldr	r3, [r6, #4]
    1936:	002a      	movs	r2, r5
    1938:	0021      	movs	r1, r4
    193a:	0030      	movs	r0, r6
    193c:	4798      	blx	r3
}
    193e:	bd70      	pop	{r4, r5, r6, pc}
    1940:	2000      	movs	r0, #0
    1942:	e7f3      	b.n	192c <io_read+0x14>
    1944:	000050dc 	.word	0x000050dc
    1948:	000023dd 	.word	0x000023dd

0000194c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    194c:	b570      	push	{r4, r5, r6, lr}
    194e:	0004      	movs	r4, r0
    1950:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    1952:	2800      	cmp	r0, #0
    1954:	d016      	beq.n	1984 <spi_m_sync_init+0x38>
    1956:	0008      	movs	r0, r1
    1958:	1e43      	subs	r3, r0, #1
    195a:	4198      	sbcs	r0, r3
    195c:	b2c0      	uxtb	r0, r0
    195e:	2240      	movs	r2, #64	; 0x40
    1960:	4909      	ldr	r1, [pc, #36]	; (1988 <spi_m_sync_init+0x3c>)
    1962:	4b0a      	ldr	r3, [pc, #40]	; (198c <spi_m_sync_init+0x40>)
    1964:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1966:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1968:	1d20      	adds	r0, r4, #4
    196a:	0029      	movs	r1, r5
    196c:	4b08      	ldr	r3, [pc, #32]	; (1990 <spi_m_sync_init+0x44>)
    196e:	4798      	blx	r3

	if (rc < 0) {
    1970:	2800      	cmp	r0, #0
    1972:	db06      	blt.n	1982 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    1974:	4b07      	ldr	r3, [pc, #28]	; (1994 <spi_m_sync_init+0x48>)
    1976:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1978:	4b07      	ldr	r3, [pc, #28]	; (1998 <spi_m_sync_init+0x4c>)
    197a:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    197c:	4b07      	ldr	r3, [pc, #28]	; (199c <spi_m_sync_init+0x50>)
    197e:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    1980:	2000      	movs	r0, #0
}
    1982:	bd70      	pop	{r4, r5, r6, pc}
    1984:	2000      	movs	r0, #0
    1986:	e7ea      	b.n	195e <spi_m_sync_init+0x12>
    1988:	000050f0 	.word	0x000050f0
    198c:	000023dd 	.word	0x000023dd
    1990:	000026f9 	.word	0x000026f9
    1994:	ffff8000 	.word	0xffff8000
    1998:	00001a75 	.word	0x00001a75
    199c:	00001a39 	.word	0x00001a39

000019a0 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    19a0:	b510      	push	{r4, lr}
    19a2:	0004      	movs	r4, r0
	ASSERT(spi);
    19a4:	1e43      	subs	r3, r0, #1
    19a6:	4198      	sbcs	r0, r3
    19a8:	b2c0      	uxtb	r0, r0
    19aa:	2257      	movs	r2, #87	; 0x57
    19ac:	4903      	ldr	r1, [pc, #12]	; (19bc <spi_m_sync_enable+0x1c>)
    19ae:	4b04      	ldr	r3, [pc, #16]	; (19c0 <spi_m_sync_enable+0x20>)
    19b0:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    19b2:	1d20      	adds	r0, r4, #4
    19b4:	4b03      	ldr	r3, [pc, #12]	; (19c4 <spi_m_sync_enable+0x24>)
    19b6:	4798      	blx	r3
}
    19b8:	bd10      	pop	{r4, pc}
    19ba:	46c0      	nop			; (mov r8, r8)
    19bc:	000050f0 	.word	0x000050f0
    19c0:	000023dd 	.word	0x000023dd
    19c4:	000027f1 	.word	0x000027f1

000019c8 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    19c8:	b510      	push	{r4, lr}
    19ca:	0004      	movs	r4, r0
	ASSERT(spi);
    19cc:	1e43      	subs	r3, r0, #1
    19ce:	4198      	sbcs	r0, r3
    19d0:	b2c0      	uxtb	r0, r0
    19d2:	225d      	movs	r2, #93	; 0x5d
    19d4:	4903      	ldr	r1, [pc, #12]	; (19e4 <spi_m_sync_disable+0x1c>)
    19d6:	4b04      	ldr	r3, [pc, #16]	; (19e8 <spi_m_sync_disable+0x20>)
    19d8:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    19da:	1d20      	adds	r0, r4, #4
    19dc:	4b03      	ldr	r3, [pc, #12]	; (19ec <spi_m_sync_disable+0x24>)
    19de:	4798      	blx	r3
}
    19e0:	bd10      	pop	{r4, pc}
    19e2:	46c0      	nop			; (mov r8, r8)
    19e4:	000050f0 	.word	0x000050f0
    19e8:	000023dd 	.word	0x000023dd
    19ec:	00002821 	.word	0x00002821

000019f0 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    19f0:	b530      	push	{r4, r5, lr}
    19f2:	b087      	sub	sp, #28
    19f4:	0004      	movs	r4, r0
    19f6:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    19f8:	2800      	cmp	r0, #0
    19fa:	d014      	beq.n	1a26 <spi_m_sync_transfer+0x36>
    19fc:	0008      	movs	r0, r1
    19fe:	1e43      	subs	r3, r0, #1
    1a00:	4198      	sbcs	r0, r3
    1a02:	b2c0      	uxtb	r0, r0
    1a04:	22b3      	movs	r2, #179	; 0xb3
    1a06:	4909      	ldr	r1, [pc, #36]	; (1a2c <spi_m_sync_transfer+0x3c>)
    1a08:	4b09      	ldr	r3, [pc, #36]	; (1a30 <spi_m_sync_transfer+0x40>)
    1a0a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1a0c:	682b      	ldr	r3, [r5, #0]
    1a0e:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    1a10:	686b      	ldr	r3, [r5, #4]
    1a12:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    1a14:	68ab      	ldr	r3, [r5, #8]
    1a16:	9301      	str	r3, [sp, #4]
    1a18:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1a1a:	1d20      	adds	r0, r4, #4
    1a1c:	a903      	add	r1, sp, #12
    1a1e:	4b05      	ldr	r3, [pc, #20]	; (1a34 <spi_m_sync_transfer+0x44>)
    1a20:	4798      	blx	r3
}
    1a22:	b007      	add	sp, #28
    1a24:	bd30      	pop	{r4, r5, pc}
    1a26:	2000      	movs	r0, #0
    1a28:	e7ec      	b.n	1a04 <spi_m_sync_transfer+0x14>
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	000050f0 	.word	0x000050f0
    1a30:	000023dd 	.word	0x000023dd
    1a34:	00002855 	.word	0x00002855

00001a38 <_spi_m_sync_io_write>:
{
    1a38:	b570      	push	{r4, r5, r6, lr}
    1a3a:	b084      	sub	sp, #16
    1a3c:	0004      	movs	r4, r0
    1a3e:	000e      	movs	r6, r1
    1a40:	0015      	movs	r5, r2
	ASSERT(io);
    1a42:	1e43      	subs	r3, r0, #1
    1a44:	4198      	sbcs	r0, r3
    1a46:	b2c0      	uxtb	r0, r0
    1a48:	22a3      	movs	r2, #163	; 0xa3
    1a4a:	4907      	ldr	r1, [pc, #28]	; (1a68 <_spi_m_sync_io_write+0x30>)
    1a4c:	4b07      	ldr	r3, [pc, #28]	; (1a6c <_spi_m_sync_io_write+0x34>)
    1a4e:	4798      	blx	r3
	xfer.rxbuf = 0;
    1a50:	2300      	movs	r3, #0
    1a52:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1a54:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    1a56:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1a58:	0020      	movs	r0, r4
    1a5a:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    1a5c:	a901      	add	r1, sp, #4
    1a5e:	4b04      	ldr	r3, [pc, #16]	; (1a70 <_spi_m_sync_io_write+0x38>)
    1a60:	4798      	blx	r3
}
    1a62:	b004      	add	sp, #16
    1a64:	bd70      	pop	{r4, r5, r6, pc}
    1a66:	46c0      	nop			; (mov r8, r8)
    1a68:	000050f0 	.word	0x000050f0
    1a6c:	000023dd 	.word	0x000023dd
    1a70:	000019f1 	.word	0x000019f1

00001a74 <_spi_m_sync_io_read>:
{
    1a74:	b570      	push	{r4, r5, r6, lr}
    1a76:	b084      	sub	sp, #16
    1a78:	0004      	movs	r4, r0
    1a7a:	000e      	movs	r6, r1
    1a7c:	0015      	movs	r5, r2
	ASSERT(io);
    1a7e:	1e43      	subs	r3, r0, #1
    1a80:	4198      	sbcs	r0, r3
    1a82:	b2c0      	uxtb	r0, r0
    1a84:	2287      	movs	r2, #135	; 0x87
    1a86:	4907      	ldr	r1, [pc, #28]	; (1aa4 <_spi_m_sync_io_read+0x30>)
    1a88:	4b07      	ldr	r3, [pc, #28]	; (1aa8 <_spi_m_sync_io_read+0x34>)
    1a8a:	4798      	blx	r3
	xfer.rxbuf = buf;
    1a8c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    1a8e:	2300      	movs	r3, #0
    1a90:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    1a92:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1a94:	0020      	movs	r0, r4
    1a96:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    1a98:	a901      	add	r1, sp, #4
    1a9a:	4b04      	ldr	r3, [pc, #16]	; (1aac <_spi_m_sync_io_read+0x38>)
    1a9c:	4798      	blx	r3
}
    1a9e:	b004      	add	sp, #16
    1aa0:	bd70      	pop	{r4, r5, r6, pc}
    1aa2:	46c0      	nop			; (mov r8, r8)
    1aa4:	000050f0 	.word	0x000050f0
    1aa8:	000023dd 	.word	0x000023dd
    1aac:	000019f1 	.word	0x000019f1

00001ab0 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    1ab0:	b570      	push	{r4, r5, r6, lr}
    1ab2:	0004      	movs	r4, r0
    1ab4:	000d      	movs	r5, r1
	ASSERT(spi && io);
    1ab6:	2800      	cmp	r0, #0
    1ab8:	d00b      	beq.n	1ad2 <spi_m_sync_get_io_descriptor+0x22>
    1aba:	0008      	movs	r0, r1
    1abc:	1e43      	subs	r3, r0, #1
    1abe:	4198      	sbcs	r0, r3
    1ac0:	b2c0      	uxtb	r0, r0
    1ac2:	22bd      	movs	r2, #189	; 0xbd
    1ac4:	4904      	ldr	r1, [pc, #16]	; (1ad8 <spi_m_sync_get_io_descriptor+0x28>)
    1ac6:	4b05      	ldr	r3, [pc, #20]	; (1adc <spi_m_sync_get_io_descriptor+0x2c>)
    1ac8:	4798      	blx	r3
	*io = &spi->io;
    1aca:	340c      	adds	r4, #12
    1acc:	602c      	str	r4, [r5, #0]
	return 0;
}
    1ace:	2000      	movs	r0, #0
    1ad0:	bd70      	pop	{r4, r5, r6, pc}
    1ad2:	2000      	movs	r0, #0
    1ad4:	e7f5      	b.n	1ac2 <spi_m_sync_get_io_descriptor+0x12>
    1ad6:	46c0      	nop			; (mov r8, r8)
    1ad8:	000050f0 	.word	0x000050f0
    1adc:	000023dd 	.word	0x000023dd

00001ae0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ae2:	46ce      	mov	lr, r9
    1ae4:	4647      	mov	r7, r8
    1ae6:	b580      	push	{r7, lr}
    1ae8:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1aea:	6803      	ldr	r3, [r0, #0]
    1aec:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1aee:	2b00      	cmp	r3, #0
    1af0:	d005      	beq.n	1afe <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1af2:	688e      	ldr	r6, [r1, #8]
    1af4:	001c      	movs	r4, r3
    1af6:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1af8:	2701      	movs	r7, #1
    1afa:	1abf      	subs	r7, r7, r2
    1afc:	e00d      	b.n	1b1a <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
    1afe:	4b12      	ldr	r3, [pc, #72]	; (1b48 <timer_add_timer_task+0x68>)
    1b00:	4798      	blx	r3
		return;
    1b02:	e018      	b.n	1b36 <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1b04:	18fb      	adds	r3, r7, r3
    1b06:	68a0      	ldr	r0, [r4, #8]
    1b08:	4680      	mov	r8, r0
    1b0a:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
    1b0c:	42b3      	cmp	r3, r6
    1b0e:	d20c      	bcs.n	1b2a <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1b10:	6823      	ldr	r3, [r4, #0]
    1b12:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1b14:	2b00      	cmp	r3, #0
    1b16:	d00b      	beq.n	1b30 <timer_add_timer_task+0x50>
    1b18:	001c      	movs	r4, r3
		if (it->time_label <= time) {
    1b1a:	6863      	ldr	r3, [r4, #4]
    1b1c:	4293      	cmp	r3, r2
    1b1e:	d8f1      	bhi.n	1b04 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
    1b20:	68a0      	ldr	r0, [r4, #8]
    1b22:	4680      	mov	r8, r0
    1b24:	4443      	add	r3, r8
    1b26:	1a9b      	subs	r3, r3, r2
    1b28:	e7f0      	b.n	1b0c <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
    1b2a:	45a4      	cmp	ip, r4
    1b2c:	d007      	beq.n	1b3e <timer_add_timer_task+0x5e>
    1b2e:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1b30:	0020      	movs	r0, r4
    1b32:	4b06      	ldr	r3, [pc, #24]	; (1b4c <timer_add_timer_task+0x6c>)
    1b34:	4798      	blx	r3
	}
}
    1b36:	bc0c      	pop	{r2, r3}
    1b38:	4690      	mov	r8, r2
    1b3a:	4699      	mov	r9, r3
    1b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1b3e:	4648      	mov	r0, r9
    1b40:	4b01      	ldr	r3, [pc, #4]	; (1b48 <timer_add_timer_task+0x68>)
    1b42:	4798      	blx	r3
    1b44:	e7f7      	b.n	1b36 <timer_add_timer_task+0x56>
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	00002409 	.word	0x00002409
    1b4c:	00002435 	.word	0x00002435

00001b50 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b52:	46c6      	mov	lr, r8
    1b54:	b500      	push	{lr}
    1b56:	b082      	sub	sp, #8
    1b58:	0007      	movs	r7, r0
	return (void *)list->head;
    1b5a:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1b5c:	6903      	ldr	r3, [r0, #16]
    1b5e:	3301      	adds	r3, #1
    1b60:	4698      	mov	r8, r3
    1b62:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1b64:	7e03      	ldrb	r3, [r0, #24]
    1b66:	07db      	lsls	r3, r3, #31
    1b68:	d411      	bmi.n	1b8e <timer_process_counted+0x3e>
    1b6a:	7e03      	ldrb	r3, [r0, #24]
    1b6c:	079b      	lsls	r3, r3, #30
    1b6e:	d40e      	bmi.n	1b8e <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1b70:	2c00      	cmp	r4, #0
    1b72:	d010      	beq.n	1b96 <timer_process_counted+0x46>
    1b74:	4643      	mov	r3, r8
    1b76:	6862      	ldr	r2, [r4, #4]
    1b78:	1a9b      	subs	r3, r3, r2
    1b7a:	68a2      	ldr	r2, [r4, #8]
    1b7c:	4293      	cmp	r3, r2
    1b7e:	d30a      	bcc.n	1b96 <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1b80:	2314      	movs	r3, #20
    1b82:	469c      	mov	ip, r3
    1b84:	4484      	add	ip, r0
    1b86:	4663      	mov	r3, ip
    1b88:	9301      	str	r3, [sp, #4]
    1b8a:	4e12      	ldr	r6, [pc, #72]	; (1bd4 <timer_process_counted+0x84>)
    1b8c:	e014      	b.n	1bb8 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1b8e:	7e3b      	ldrb	r3, [r7, #24]
    1b90:	2202      	movs	r2, #2
    1b92:	4313      	orrs	r3, r2
    1b94:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    1b96:	b002      	add	sp, #8
    1b98:	bc04      	pop	{r2}
    1b9a:	4690      	mov	r8, r2
    1b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b9e:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
    1ba0:	68e3      	ldr	r3, [r4, #12]
    1ba2:	0020      	movs	r0, r4
    1ba4:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1ba6:	2d00      	cmp	r5, #0
    1ba8:	d0f5      	beq.n	1b96 <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1baa:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1bac:	4643      	mov	r3, r8
    1bae:	686a      	ldr	r2, [r5, #4]
    1bb0:	1a9b      	subs	r3, r3, r2
    1bb2:	68aa      	ldr	r2, [r5, #8]
    1bb4:	4293      	cmp	r3, r2
    1bb6:	d3ee      	bcc.n	1b96 <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
    1bb8:	9801      	ldr	r0, [sp, #4]
    1bba:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1bbc:	7c23      	ldrb	r3, [r4, #16]
    1bbe:	2b01      	cmp	r3, #1
    1bc0:	d1ed      	bne.n	1b9e <timer_process_counted+0x4e>
			tmp->time_label = time;
    1bc2:	4643      	mov	r3, r8
    1bc4:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1bc6:	4642      	mov	r2, r8
    1bc8:	0021      	movs	r1, r4
    1bca:	9801      	ldr	r0, [sp, #4]
    1bcc:	4b02      	ldr	r3, [pc, #8]	; (1bd8 <timer_process_counted+0x88>)
    1bce:	4798      	blx	r3
    1bd0:	e7e5      	b.n	1b9e <timer_process_counted+0x4e>
    1bd2:	46c0      	nop			; (mov r8, r8)
    1bd4:	0000247d 	.word	0x0000247d
    1bd8:	00001ae1 	.word	0x00001ae1

00001bdc <timer_init>:
{
    1bdc:	b570      	push	{r4, r5, r6, lr}
    1bde:	0005      	movs	r5, r0
    1be0:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    1be2:	2800      	cmp	r0, #0
    1be4:	d011      	beq.n	1c0a <timer_init+0x2e>
    1be6:	0008      	movs	r0, r1
    1be8:	1e43      	subs	r3, r0, #1
    1bea:	4198      	sbcs	r0, r3
    1bec:	b2c0      	uxtb	r0, r0
    1bee:	223b      	movs	r2, #59	; 0x3b
    1bf0:	4907      	ldr	r1, [pc, #28]	; (1c10 <timer_init+0x34>)
    1bf2:	4b08      	ldr	r3, [pc, #32]	; (1c14 <timer_init+0x38>)
    1bf4:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1bf6:	0021      	movs	r1, r4
    1bf8:	0028      	movs	r0, r5
    1bfa:	4b07      	ldr	r3, [pc, #28]	; (1c18 <timer_init+0x3c>)
    1bfc:	4798      	blx	r3
	descr->time                           = 0;
    1bfe:	2300      	movs	r3, #0
    1c00:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1c02:	4b06      	ldr	r3, [pc, #24]	; (1c1c <timer_init+0x40>)
    1c04:	602b      	str	r3, [r5, #0]
}
    1c06:	2000      	movs	r0, #0
    1c08:	bd70      	pop	{r4, r5, r6, pc}
    1c0a:	2000      	movs	r0, #0
    1c0c:	e7ef      	b.n	1bee <timer_init+0x12>
    1c0e:	46c0      	nop			; (mov r8, r8)
    1c10:	0000510c 	.word	0x0000510c
    1c14:	000023dd 	.word	0x000023dd
    1c18:	00002a41 	.word	0x00002a41
    1c1c:	00001b51 	.word	0x00001b51

00001c20 <timer_start>:
{
    1c20:	b510      	push	{r4, lr}
    1c22:	0004      	movs	r4, r0
	ASSERT(descr);
    1c24:	1e43      	subs	r3, r0, #1
    1c26:	4198      	sbcs	r0, r3
    1c28:	b2c0      	uxtb	r0, r0
    1c2a:	2253      	movs	r2, #83	; 0x53
    1c2c:	4907      	ldr	r1, [pc, #28]	; (1c4c <timer_start+0x2c>)
    1c2e:	4b08      	ldr	r3, [pc, #32]	; (1c50 <timer_start+0x30>)
    1c30:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    1c32:	0020      	movs	r0, r4
    1c34:	4b07      	ldr	r3, [pc, #28]	; (1c54 <timer_start+0x34>)
    1c36:	4798      	blx	r3
    1c38:	2800      	cmp	r0, #0
    1c3a:	d104      	bne.n	1c46 <timer_start+0x26>
	_timer_start(&descr->device);
    1c3c:	0020      	movs	r0, r4
    1c3e:	4b06      	ldr	r3, [pc, #24]	; (1c58 <timer_start+0x38>)
    1c40:	4798      	blx	r3
	return ERR_NONE;
    1c42:	2000      	movs	r0, #0
}
    1c44:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1c46:	2011      	movs	r0, #17
    1c48:	4240      	negs	r0, r0
    1c4a:	e7fb      	b.n	1c44 <timer_start+0x24>
    1c4c:	0000510c 	.word	0x0000510c
    1c50:	000023dd 	.word	0x000023dd
    1c54:	00002b95 	.word	0x00002b95
    1c58:	00002b7d 	.word	0x00002b7d

00001c5c <timer_stop>:
{
    1c5c:	b510      	push	{r4, lr}
    1c5e:	0004      	movs	r4, r0
	ASSERT(descr);
    1c60:	1e43      	subs	r3, r0, #1
    1c62:	4198      	sbcs	r0, r3
    1c64:	b2c0      	uxtb	r0, r0
    1c66:	2261      	movs	r2, #97	; 0x61
    1c68:	4907      	ldr	r1, [pc, #28]	; (1c88 <timer_stop+0x2c>)
    1c6a:	4b08      	ldr	r3, [pc, #32]	; (1c8c <timer_stop+0x30>)
    1c6c:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    1c6e:	0020      	movs	r0, r4
    1c70:	4b07      	ldr	r3, [pc, #28]	; (1c90 <timer_stop+0x34>)
    1c72:	4798      	blx	r3
    1c74:	2800      	cmp	r0, #0
    1c76:	d004      	beq.n	1c82 <timer_stop+0x26>
	_timer_stop(&descr->device);
    1c78:	0020      	movs	r0, r4
    1c7a:	4b06      	ldr	r3, [pc, #24]	; (1c94 <timer_stop+0x38>)
    1c7c:	4798      	blx	r3
	return ERR_NONE;
    1c7e:	2000      	movs	r0, #0
}
    1c80:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1c82:	2011      	movs	r0, #17
    1c84:	4240      	negs	r0, r0
    1c86:	e7fb      	b.n	1c80 <timer_stop+0x24>
    1c88:	0000510c 	.word	0x0000510c
    1c8c:	000023dd 	.word	0x000023dd
    1c90:	00002b95 	.word	0x00002b95
    1c94:	00002b89 	.word	0x00002b89

00001c98 <timer_add_task>:
{
    1c98:	b570      	push	{r4, r5, r6, lr}
    1c9a:	b082      	sub	sp, #8
    1c9c:	0004      	movs	r4, r0
    1c9e:	000d      	movs	r5, r1
	ASSERT(descr && task);
    1ca0:	2800      	cmp	r0, #0
    1ca2:	d024      	beq.n	1cee <timer_add_task+0x56>
    1ca4:	0008      	movs	r0, r1
    1ca6:	1e43      	subs	r3, r0, #1
    1ca8:	4198      	sbcs	r0, r3
    1caa:	b2c0      	uxtb	r0, r0
    1cac:	227a      	movs	r2, #122	; 0x7a
    1cae:	491e      	ldr	r1, [pc, #120]	; (1d28 <timer_add_task+0x90>)
    1cb0:	4b1e      	ldr	r3, [pc, #120]	; (1d2c <timer_add_task+0x94>)
    1cb2:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1cb4:	7e23      	ldrb	r3, [r4, #24]
    1cb6:	2201      	movs	r2, #1
    1cb8:	4313      	orrs	r3, r2
    1cba:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    1cbc:	0026      	movs	r6, r4
    1cbe:	3614      	adds	r6, #20
    1cc0:	0029      	movs	r1, r5
    1cc2:	0030      	movs	r0, r6
    1cc4:	4b1a      	ldr	r3, [pc, #104]	; (1d30 <timer_add_task+0x98>)
    1cc6:	4798      	blx	r3
    1cc8:	2800      	cmp	r0, #0
    1cca:	d112      	bne.n	1cf2 <timer_add_task+0x5a>
	task->time_label = descr->time;
    1ccc:	6923      	ldr	r3, [r4, #16]
    1cce:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    1cd0:	6922      	ldr	r2, [r4, #16]
    1cd2:	0029      	movs	r1, r5
    1cd4:	0030      	movs	r0, r6
    1cd6:	4b17      	ldr	r3, [pc, #92]	; (1d34 <timer_add_task+0x9c>)
    1cd8:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1cda:	7e23      	ldrb	r3, [r4, #24]
    1cdc:	2201      	movs	r2, #1
    1cde:	4393      	bics	r3, r2
    1ce0:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1ce2:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
    1ce4:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1ce6:	079b      	lsls	r3, r3, #30
    1ce8:	d40f      	bmi.n	1d0a <timer_add_task+0x72>
}
    1cea:	b002      	add	sp, #8
    1cec:	bd70      	pop	{r4, r5, r6, pc}
    1cee:	2000      	movs	r0, #0
    1cf0:	e7dc      	b.n	1cac <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1cf2:	7e23      	ldrb	r3, [r4, #24]
    1cf4:	2201      	movs	r2, #1
    1cf6:	4393      	bics	r3, r2
    1cf8:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    1cfa:	327e      	adds	r2, #126	; 0x7e
    1cfc:	490a      	ldr	r1, [pc, #40]	; (1d28 <timer_add_task+0x90>)
    1cfe:	2000      	movs	r0, #0
    1d00:	4b0a      	ldr	r3, [pc, #40]	; (1d2c <timer_add_task+0x94>)
    1d02:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    1d04:	2012      	movs	r0, #18
    1d06:	4240      	negs	r0, r0
    1d08:	e7ef      	b.n	1cea <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    1d0a:	a801      	add	r0, sp, #4
    1d0c:	4b0a      	ldr	r3, [pc, #40]	; (1d38 <timer_add_task+0xa0>)
    1d0e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1d10:	7e23      	ldrb	r3, [r4, #24]
    1d12:	2202      	movs	r2, #2
    1d14:	4393      	bics	r3, r2
    1d16:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    1d18:	0020      	movs	r0, r4
    1d1a:	4b08      	ldr	r3, [pc, #32]	; (1d3c <timer_add_task+0xa4>)
    1d1c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1d1e:	a801      	add	r0, sp, #4
    1d20:	4b07      	ldr	r3, [pc, #28]	; (1d40 <timer_add_task+0xa8>)
    1d22:	4798      	blx	r3
	return ERR_NONE;
    1d24:	2000      	movs	r0, #0
    1d26:	e7e0      	b.n	1cea <timer_add_task+0x52>
    1d28:	0000510c 	.word	0x0000510c
    1d2c:	000023dd 	.word	0x000023dd
    1d30:	000023e5 	.word	0x000023e5
    1d34:	00001ae1 	.word	0x00001ae1
    1d38:	00004b91 	.word	0x00004b91
    1d3c:	00002ba5 	.word	0x00002ba5
    1d40:	00004b9f 	.word	0x00004b9f

00001d44 <timer_remove_task>:
{
    1d44:	b570      	push	{r4, r5, r6, lr}
    1d46:	b082      	sub	sp, #8
    1d48:	0004      	movs	r4, r0
    1d4a:	000d      	movs	r5, r1
	ASSERT(descr && task);
    1d4c:	2800      	cmp	r0, #0
    1d4e:	d021      	beq.n	1d94 <timer_remove_task+0x50>
    1d50:	0008      	movs	r0, r1
    1d52:	1e43      	subs	r3, r0, #1
    1d54:	4198      	sbcs	r0, r3
    1d56:	b2c0      	uxtb	r0, r0
    1d58:	2295      	movs	r2, #149	; 0x95
    1d5a:	491c      	ldr	r1, [pc, #112]	; (1dcc <timer_remove_task+0x88>)
    1d5c:	4b1c      	ldr	r3, [pc, #112]	; (1dd0 <timer_remove_task+0x8c>)
    1d5e:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1d60:	7e23      	ldrb	r3, [r4, #24]
    1d62:	2201      	movs	r2, #1
    1d64:	4313      	orrs	r3, r2
    1d66:	7623      	strb	r3, [r4, #24]
	if (!is_list_element(&descr->tasks, task)) {
    1d68:	0026      	movs	r6, r4
    1d6a:	3614      	adds	r6, #20
    1d6c:	0029      	movs	r1, r5
    1d6e:	0030      	movs	r0, r6
    1d70:	4b18      	ldr	r3, [pc, #96]	; (1dd4 <timer_remove_task+0x90>)
    1d72:	4798      	blx	r3
    1d74:	2800      	cmp	r0, #0
    1d76:	d00f      	beq.n	1d98 <timer_remove_task+0x54>
	list_delete_element(&descr->tasks, task);
    1d78:	0029      	movs	r1, r5
    1d7a:	0030      	movs	r0, r6
    1d7c:	4b16      	ldr	r3, [pc, #88]	; (1dd8 <timer_remove_task+0x94>)
    1d7e:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1d80:	7e23      	ldrb	r3, [r4, #24]
    1d82:	2201      	movs	r2, #1
    1d84:	4393      	bics	r3, r2
    1d86:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1d88:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
    1d8a:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1d8c:	079b      	lsls	r3, r3, #30
    1d8e:	d40e      	bmi.n	1dae <timer_remove_task+0x6a>
}
    1d90:	b002      	add	sp, #8
    1d92:	bd70      	pop	{r4, r5, r6, pc}
    1d94:	2000      	movs	r0, #0
    1d96:	e7df      	b.n	1d58 <timer_remove_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1d98:	7e23      	ldrb	r3, [r4, #24]
    1d9a:	2201      	movs	r2, #1
    1d9c:	4393      	bics	r3, r2
    1d9e:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    1da0:	3299      	adds	r2, #153	; 0x99
    1da2:	490a      	ldr	r1, [pc, #40]	; (1dcc <timer_remove_task+0x88>)
    1da4:	4b0a      	ldr	r3, [pc, #40]	; (1dd0 <timer_remove_task+0x8c>)
    1da6:	4798      	blx	r3
		return ERR_NOT_FOUND;
    1da8:	200a      	movs	r0, #10
    1daa:	4240      	negs	r0, r0
    1dac:	e7f0      	b.n	1d90 <timer_remove_task+0x4c>
		CRITICAL_SECTION_ENTER()
    1dae:	a801      	add	r0, sp, #4
    1db0:	4b0a      	ldr	r3, [pc, #40]	; (1ddc <timer_remove_task+0x98>)
    1db2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1db4:	7e23      	ldrb	r3, [r4, #24]
    1db6:	2202      	movs	r2, #2
    1db8:	4393      	bics	r3, r2
    1dba:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    1dbc:	0020      	movs	r0, r4
    1dbe:	4b08      	ldr	r3, [pc, #32]	; (1de0 <timer_remove_task+0x9c>)
    1dc0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1dc2:	a801      	add	r0, sp, #4
    1dc4:	4b07      	ldr	r3, [pc, #28]	; (1de4 <timer_remove_task+0xa0>)
    1dc6:	4798      	blx	r3
	return ERR_NONE;
    1dc8:	2000      	movs	r0, #0
    1dca:	e7e1      	b.n	1d90 <timer_remove_task+0x4c>
    1dcc:	0000510c 	.word	0x0000510c
    1dd0:	000023dd 	.word	0x000023dd
    1dd4:	000023e5 	.word	0x000023e5
    1dd8:	0000248b 	.word	0x0000248b
    1ddc:	00004b91 	.word	0x00004b91
    1de0:	00002ba5 	.word	0x00002ba5
    1de4:	00004b9f 	.word	0x00004b9f

00001de8 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    1de8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dea:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1dec:	4b0e      	ldr	r3, [pc, #56]	; (1e28 <_usb_d_find_ep+0x40>)
    1dee:	785a      	ldrb	r2, [r3, #1]
    1df0:	4290      	cmp	r0, r2
    1df2:	d017      	beq.n	1e24 <_usb_d_find_ep+0x3c>
    1df4:	2300      	movs	r3, #0
    1df6:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1df8:	4f0b      	ldr	r7, [pc, #44]	; (1e28 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1dfa:	260f      	movs	r6, #15
    1dfc:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1dfe:	003d      	movs	r5, r7
    1e00:	e008      	b.n	1e14 <_usb_d_find_ep+0x2c>
    1e02:	3001      	adds	r0, #1
    1e04:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1e06:	2804      	cmp	r0, #4
    1e08:	d00a      	beq.n	1e20 <_usb_d_find_ep+0x38>
    1e0a:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1e0c:	18ea      	adds	r2, r5, r3
    1e0e:	7852      	ldrb	r2, [r2, #1]
    1e10:	42a2      	cmp	r2, r4
    1e12:	d006      	beq.n	1e22 <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1e14:	5dd9      	ldrb	r1, [r3, r7]
    1e16:	2900      	cmp	r1, #0
    1e18:	d1f3      	bne.n	1e02 <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1e1a:	4296      	cmp	r6, r2
    1e1c:	d1f1      	bne.n	1e02 <_usb_d_find_ep+0x1a>
    1e1e:	e000      	b.n	1e22 <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
    1e20:	3805      	subs	r0, #5
}
    1e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1e24:	2000      	movs	r0, #0
    1e26:	e7fc      	b.n	1e22 <_usb_d_find_ep+0x3a>
    1e28:	20000630 	.word	0x20000630

00001e2c <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1e2c:	2000      	movs	r0, #0
    1e2e:	4770      	bx	lr

00001e30 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1e30:	b570      	push	{r4, r5, r6, lr}
    1e32:	0004      	movs	r4, r0
    1e34:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    1e36:	4b0a      	ldr	r3, [pc, #40]	; (1e60 <usb_d_cb_trans_more+0x30>)
    1e38:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1e3a:	0142      	lsls	r2, r0, #5
    1e3c:	4b09      	ldr	r3, [pc, #36]	; (1e64 <usb_d_cb_trans_more+0x34>)
    1e3e:	189b      	adds	r3, r3, r2
    1e40:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    1e42:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1e44:	2a03      	cmp	r2, #3
    1e46:	d001      	beq.n	1e4c <usb_d_cb_trans_more+0x1c>
}
    1e48:	0018      	movs	r0, r3
    1e4a:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
    1e4c:	0140      	lsls	r0, r0, #5
    1e4e:	4b05      	ldr	r3, [pc, #20]	; (1e64 <usb_d_cb_trans_more+0x34>)
    1e50:	1818      	adds	r0, r3, r0
    1e52:	6983      	ldr	r3, [r0, #24]
    1e54:	0029      	movs	r1, r5
    1e56:	0020      	movs	r0, r4
    1e58:	4798      	blx	r3
    1e5a:	0003      	movs	r3, r0
    1e5c:	e7f4      	b.n	1e48 <usb_d_cb_trans_more+0x18>
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	00001de9 	.word	0x00001de9
    1e64:	20000630 	.word	0x20000630

00001e68 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e6a:	b085      	sub	sp, #20
    1e6c:	0005      	movs	r5, r0
    1e6e:	000f      	movs	r7, r1
    1e70:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1e72:	4b51      	ldr	r3, [pc, #324]	; (1fb8 <_usb_d_cb_trans_done+0x150>)
    1e74:	4798      	blx	r3
    1e76:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    1e78:	2f00      	cmp	r7, #0
    1e7a:	d162      	bne.n	1f42 <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1e7c:	4b4f      	ldr	r3, [pc, #316]	; (1fbc <_usb_d_cb_trans_done+0x154>)
    1e7e:	0142      	lsls	r2, r0, #5
    1e80:	1899      	adds	r1, r3, r2
    1e82:	2000      	movs	r0, #0
    1e84:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1e86:	5cd3      	ldrb	r3, [r2, r3]
    1e88:	2b00      	cmp	r3, #0
    1e8a:	d00e      	beq.n	1eaa <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1e8c:	0162      	lsls	r2, r4, #5
    1e8e:	4b4b      	ldr	r3, [pc, #300]	; (1fbc <_usb_d_cb_trans_done+0x154>)
    1e90:	189b      	adds	r3, r3, r2
    1e92:	2201      	movs	r2, #1
    1e94:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1e96:	0164      	lsls	r4, r4, #5
    1e98:	4b48      	ldr	r3, [pc, #288]	; (1fbc <_usb_d_cb_trans_done+0x154>)
    1e9a:	191c      	adds	r4, r3, r4
    1e9c:	78e1      	ldrb	r1, [r4, #3]
    1e9e:	69e3      	ldr	r3, [r4, #28]
    1ea0:	0032      	movs	r2, r6
    1ea2:	0028      	movs	r0, r5
    1ea4:	4798      	blx	r3
}
    1ea6:	b005      	add	sp, #20
    1ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    1eaa:	788b      	ldrb	r3, [r1, #2]
    1eac:	2b03      	cmp	r3, #3
    1eae:	d00c      	beq.n	1eca <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1eb0:	4b42      	ldr	r3, [pc, #264]	; (1fbc <_usb_d_cb_trans_done+0x154>)
    1eb2:	0162      	lsls	r2, r4, #5
    1eb4:	320c      	adds	r2, #12
    1eb6:	189a      	adds	r2, r3, r2
    1eb8:	0164      	lsls	r4, r4, #5
    1eba:	191c      	adds	r4, r3, r4
    1ebc:	7860      	ldrb	r0, [r4, #1]
    1ebe:	2100      	movs	r1, #0
    1ec0:	69e3      	ldr	r3, [r4, #28]
    1ec2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1ec4:	2302      	movs	r3, #2
    1ec6:	70a3      	strb	r3, [r4, #2]
    1ec8:	e7ed      	b.n	1ea6 <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    1eca:	4a3c      	ldr	r2, [pc, #240]	; (1fbc <_usb_d_cb_trans_done+0x154>)
    1ecc:	000b      	movs	r3, r1
    1ece:	250c      	movs	r5, #12
    1ed0:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1ed2:	0161      	lsls	r1, r4, #5
    1ed4:	310c      	adds	r1, #12
    1ed6:	1852      	adds	r2, r2, r1
    1ed8:	7858      	ldrb	r0, [r3, #1]
    1eda:	69db      	ldr	r3, [r3, #28]
    1edc:	2101      	movs	r1, #1
    1ede:	4798      	blx	r3
		if (err) {
    1ee0:	2800      	cmp	r0, #0
    1ee2:	d017      	beq.n	1f14 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    1ee4:	0162      	lsls	r2, r4, #5
    1ee6:	4b35      	ldr	r3, [pc, #212]	; (1fbc <_usb_d_cb_trans_done+0x154>)
    1ee8:	189b      	adds	r3, r3, r2
    1eea:	2205      	movs	r2, #5
    1eec:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1eee:	3a03      	subs	r2, #3
    1ef0:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1ef2:	2d00      	cmp	r5, #0
    1ef4:	db09      	blt.n	1f0a <_usb_d_cb_trans_done+0xa2>
    1ef6:	0164      	lsls	r4, r4, #5
    1ef8:	4b30      	ldr	r3, [pc, #192]	; (1fbc <_usb_d_cb_trans_done+0x154>)
    1efa:	191c      	adds	r4, r3, r4
    1efc:	7860      	ldrb	r0, [r4, #1]
    1efe:	2380      	movs	r3, #128	; 0x80
    1f00:	4318      	orrs	r0, r3
    1f02:	2101      	movs	r1, #1
    1f04:	4b2e      	ldr	r3, [pc, #184]	; (1fc0 <_usb_d_cb_trans_done+0x158>)
    1f06:	4798      	blx	r3
    1f08:	e7cd      	b.n	1ea6 <_usb_d_cb_trans_done+0x3e>
    1f0a:	0164      	lsls	r4, r4, #5
    1f0c:	4b2b      	ldr	r3, [pc, #172]	; (1fbc <_usb_d_cb_trans_done+0x154>)
    1f0e:	191c      	adds	r4, r3, r4
    1f10:	7860      	ldrb	r0, [r4, #1]
    1f12:	e7f6      	b.n	1f02 <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1f14:	0164      	lsls	r4, r4, #5
    1f16:	4b29      	ldr	r3, [pc, #164]	; (1fbc <_usb_d_cb_trans_done+0x154>)
    1f18:	191c      	adds	r4, r3, r4
    1f1a:	2304      	movs	r3, #4
    1f1c:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    1f1e:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    1f20:	2200      	movs	r2, #0
    1f22:	9201      	str	r2, [sp, #4]
    1f24:	9202      	str	r2, [sp, #8]
    1f26:	2d00      	cmp	r5, #0
    1f28:	db08      	blt.n	1f3c <_usb_d_cb_trans_done+0xd4>
    1f2a:	3280      	adds	r2, #128	; 0x80
    1f2c:	4313      	orrs	r3, r2
    1f2e:	a801      	add	r0, sp, #4
    1f30:	7203      	strb	r3, [r0, #8]
    1f32:	2301      	movs	r3, #1
    1f34:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    1f36:	4b23      	ldr	r3, [pc, #140]	; (1fc4 <_usb_d_cb_trans_done+0x15c>)
    1f38:	4798      	blx	r3
    1f3a:	e7b4      	b.n	1ea6 <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
    1f3c:	220f      	movs	r2, #15
    1f3e:	4013      	ands	r3, r2
    1f40:	e7f5      	b.n	1f2e <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
    1f42:	2f01      	cmp	r7, #1
    1f44:	d00a      	beq.n	1f5c <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
    1f46:	2f02      	cmp	r7, #2
    1f48:	d01d      	beq.n	1f86 <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
    1f4a:	2f03      	cmp	r7, #3
    1f4c:	d02c      	beq.n	1fa8 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1f4e:	0142      	lsls	r2, r0, #5
    1f50:	4b1a      	ldr	r3, [pc, #104]	; (1fbc <_usb_d_cb_trans_done+0x154>)
    1f52:	189b      	adds	r3, r3, r2
    1f54:	2206      	movs	r2, #6
    1f56:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    1f58:	70da      	strb	r2, [r3, #3]
    1f5a:	e79c      	b.n	1e96 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
    1f5c:	4b17      	ldr	r3, [pc, #92]	; (1fbc <_usb_d_cb_trans_done+0x154>)
    1f5e:	0142      	lsls	r2, r0, #5
    1f60:	1899      	adds	r1, r3, r2
    1f62:	2002      	movs	r0, #2
    1f64:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1f66:	5cd3      	ldrb	r3, [r2, r3]
    1f68:	2b00      	cmp	r3, #0
    1f6a:	d005      	beq.n	1f78 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1f6c:	0162      	lsls	r2, r4, #5
    1f6e:	4b13      	ldr	r3, [pc, #76]	; (1fbc <_usb_d_cb_trans_done+0x154>)
    1f70:	189b      	adds	r3, r3, r2
    1f72:	2205      	movs	r2, #5
    1f74:	709a      	strb	r2, [r3, #2]
    1f76:	e78e      	b.n	1e96 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1f78:	2202      	movs	r2, #2
    1f7a:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1f7c:	2100      	movs	r1, #0
    1f7e:	0028      	movs	r0, r5
    1f80:	4b0f      	ldr	r3, [pc, #60]	; (1fc0 <_usb_d_cb_trans_done+0x158>)
    1f82:	4798      	blx	r3
    1f84:	e787      	b.n	1e96 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    1f86:	4b0d      	ldr	r3, [pc, #52]	; (1fbc <_usb_d_cb_trans_done+0x154>)
    1f88:	0142      	lsls	r2, r0, #5
    1f8a:	1899      	adds	r1, r3, r2
    1f8c:	2004      	movs	r0, #4
    1f8e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1f90:	5cd3      	ldrb	r3, [r2, r3]
    1f92:	2b00      	cmp	r3, #0
    1f94:	d005      	beq.n	1fa2 <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1f96:	0162      	lsls	r2, r4, #5
    1f98:	4b08      	ldr	r3, [pc, #32]	; (1fbc <_usb_d_cb_trans_done+0x154>)
    1f9a:	189b      	adds	r3, r3, r2
    1f9c:	2201      	movs	r2, #1
    1f9e:	709a      	strb	r2, [r3, #2]
    1fa0:	e779      	b.n	1e96 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1fa2:	2302      	movs	r3, #2
    1fa4:	708b      	strb	r3, [r1, #2]
			return;
    1fa6:	e77e      	b.n	1ea6 <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1fa8:	0142      	lsls	r2, r0, #5
    1faa:	4b04      	ldr	r3, [pc, #16]	; (1fbc <_usb_d_cb_trans_done+0x154>)
    1fac:	189b      	adds	r3, r3, r2
    1fae:	2200      	movs	r2, #0
    1fb0:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    1fb2:	3205      	adds	r2, #5
    1fb4:	70da      	strb	r2, [r3, #3]
    1fb6:	e76e      	b.n	1e96 <_usb_d_cb_trans_done+0x2e>
    1fb8:	00001de9 	.word	0x00001de9
    1fbc:	20000630 	.word	0x20000630
    1fc0:	0000389d 	.word	0x0000389d
    1fc4:	00003a71 	.word	0x00003a71

00001fc8 <usb_d_cb_trans_setup>:
{
    1fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fca:	46c6      	mov	lr, r8
    1fcc:	b500      	push	{lr}
    1fce:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1fd0:	4b1d      	ldr	r3, [pc, #116]	; (2048 <STACK_SIZE+0x48>)
    1fd2:	4798      	blx	r3
    1fd4:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
    1fd6:	0145      	lsls	r5, r0, #5
    1fd8:	350c      	adds	r5, #12
    1fda:	4b1c      	ldr	r3, [pc, #112]	; (204c <STACK_SIZE+0x4c>)
    1fdc:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1fde:	0029      	movs	r1, r5
    1fe0:	0020      	movs	r0, r4
    1fe2:	4b1b      	ldr	r3, [pc, #108]	; (2050 <STACK_SIZE+0x50>)
    1fe4:	4798      	blx	r3
	if (n != 8) {
    1fe6:	b2c0      	uxtb	r0, r0
    1fe8:	2808      	cmp	r0, #8
    1fea:	d00a      	beq.n	2002 <STACK_SIZE+0x2>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1fec:	2101      	movs	r1, #1
    1fee:	0020      	movs	r0, r4
    1ff0:	4d18      	ldr	r5, [pc, #96]	; (2054 <STACK_SIZE+0x54>)
    1ff2:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1ff4:	2080      	movs	r0, #128	; 0x80
    1ff6:	4320      	orrs	r0, r4
    1ff8:	2101      	movs	r1, #1
    1ffa:	47a8      	blx	r5
}
    1ffc:	bc04      	pop	{r2}
    1ffe:	4690      	mov	r8, r2
    2000:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2002:	2100      	movs	r1, #0
    2004:	0020      	movs	r0, r4
    2006:	4b13      	ldr	r3, [pc, #76]	; (2054 <STACK_SIZE+0x54>)
    2008:	4698      	mov	r8, r3
    200a:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    200c:	2780      	movs	r7, #128	; 0x80
    200e:	4327      	orrs	r7, r4
    2010:	2100      	movs	r1, #0
    2012:	0038      	movs	r0, r7
    2014:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2016:	0172      	lsls	r2, r6, #5
    2018:	4b0c      	ldr	r3, [pc, #48]	; (204c <STACK_SIZE+0x4c>)
    201a:	189b      	adds	r3, r3, r2
    201c:	2201      	movs	r2, #1
    201e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2020:	695b      	ldr	r3, [r3, #20]
    2022:	0029      	movs	r1, r5
    2024:	0020      	movs	r0, r4
    2026:	4798      	blx	r3
    2028:	2800      	cmp	r0, #0
    202a:	d1e7      	bne.n	1ffc <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    202c:	0176      	lsls	r6, r6, #5
    202e:	4b07      	ldr	r3, [pc, #28]	; (204c <STACK_SIZE+0x4c>)
    2030:	199e      	adds	r6, r3, r6
    2032:	2305      	movs	r3, #5
    2034:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2036:	2101      	movs	r1, #1
    2038:	0020      	movs	r0, r4
    203a:	4c06      	ldr	r4, [pc, #24]	; (2054 <STACK_SIZE+0x54>)
    203c:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    203e:	2101      	movs	r1, #1
    2040:	0038      	movs	r0, r7
    2042:	47a0      	blx	r4
    2044:	e7da      	b.n	1ffc <usb_d_cb_trans_setup+0x34>
    2046:	46c0      	nop			; (mov r8, r8)
    2048:	00001de9 	.word	0x00001de9
    204c:	20000630 	.word	0x20000630
    2050:	00003a01 	.word	0x00003a01
    2054:	0000389d 	.word	0x0000389d

00002058 <usb_d_init>:

int32_t usb_d_init(void)
{
    2058:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    205a:	4b10      	ldr	r3, [pc, #64]	; (209c <usb_d_init+0x44>)
    205c:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    205e:	2800      	cmp	r0, #0
    2060:	db1b      	blt.n	209a <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    2062:	4c0f      	ldr	r4, [pc, #60]	; (20a0 <usb_d_init+0x48>)
    2064:	2280      	movs	r2, #128	; 0x80
    2066:	2100      	movs	r1, #0
    2068:	0020      	movs	r0, r4
    206a:	4b0e      	ldr	r3, [pc, #56]	; (20a4 <usb_d_init+0x4c>)
    206c:	4798      	blx	r3
    206e:	0023      	movs	r3, r4
    2070:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2072:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2074:	4a0c      	ldr	r2, [pc, #48]	; (20a8 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2076:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2078:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    207a:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    207c:	61da      	str	r2, [r3, #28]
    207e:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    2080:	42a3      	cmp	r3, r4
    2082:	d1f8      	bne.n	2076 <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    2084:	4909      	ldr	r1, [pc, #36]	; (20ac <usb_d_init+0x54>)
    2086:	2000      	movs	r0, #0
    2088:	4c09      	ldr	r4, [pc, #36]	; (20b0 <usb_d_init+0x58>)
    208a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    208c:	4909      	ldr	r1, [pc, #36]	; (20b4 <usb_d_init+0x5c>)
    208e:	2001      	movs	r0, #1
    2090:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    2092:	4909      	ldr	r1, [pc, #36]	; (20b8 <usb_d_init+0x60>)
    2094:	2002      	movs	r0, #2
    2096:	47a0      	blx	r4
	return ERR_NONE;
    2098:	2000      	movs	r0, #0
}
    209a:	bd10      	pop	{r4, pc}
    209c:	00003271 	.word	0x00003271
    20a0:	20000630 	.word	0x20000630
    20a4:	00004db1 	.word	0x00004db1
    20a8:	00001e2d 	.word	0x00001e2d
    20ac:	00001fc9 	.word	0x00001fc9
    20b0:	00003ce5 	.word	0x00003ce5
    20b4:	00001e31 	.word	0x00001e31
    20b8:	00001e69 	.word	0x00001e69

000020bc <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    20bc:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    20be:	4b01      	ldr	r3, [pc, #4]	; (20c4 <usb_d_register_callback+0x8>)
    20c0:	4798      	blx	r3
}
    20c2:	bd10      	pop	{r4, pc}
    20c4:	00003cc1 	.word	0x00003cc1

000020c8 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    20c8:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    20ca:	4b01      	ldr	r3, [pc, #4]	; (20d0 <usb_d_enable+0x8>)
    20cc:	4798      	blx	r3
}
    20ce:	bd10      	pop	{r4, pc}
    20d0:	00003351 	.word	0x00003351

000020d4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    20d4:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    20d6:	4b01      	ldr	r3, [pc, #4]	; (20dc <usb_d_attach+0x8>)
    20d8:	4798      	blx	r3
}
    20da:	bd10      	pop	{r4, pc}
    20dc:	000033a1 	.word	0x000033a1

000020e0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    20e0:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    20e2:	4b01      	ldr	r3, [pc, #4]	; (20e8 <usb_d_set_address+0x8>)
    20e4:	4798      	blx	r3
}
    20e6:	bd10      	pop	{r4, pc}
    20e8:	000033b1 	.word	0x000033b1

000020ec <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    20ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20ee:	0005      	movs	r5, r0
    20f0:	000e      	movs	r6, r1
    20f2:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    20f4:	4b0f      	ldr	r3, [pc, #60]	; (2134 <usb_d_ep_init+0x48>)
    20f6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    20f8:	2800      	cmp	r0, #0
    20fa:	da14      	bge.n	2126 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    20fc:	20ff      	movs	r0, #255	; 0xff
    20fe:	4b0d      	ldr	r3, [pc, #52]	; (2134 <usb_d_ep_init+0x48>)
    2100:	4798      	blx	r3
    2102:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    2104:	db12      	blt.n	212c <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2106:	003a      	movs	r2, r7
    2108:	0031      	movs	r1, r6
    210a:	0028      	movs	r0, r5
    210c:	4b0a      	ldr	r3, [pc, #40]	; (2138 <usb_d_ep_init+0x4c>)
    210e:	4798      	blx	r3
	if (rc < 0) {
    2110:	2800      	cmp	r0, #0
    2112:	db07      	blt.n	2124 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    2114:	4a09      	ldr	r2, [pc, #36]	; (213c <usb_d_ep_init+0x50>)
    2116:	0164      	lsls	r4, r4, #5
    2118:	1913      	adds	r3, r2, r4
    211a:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    211c:	2303      	movs	r3, #3
    211e:	401e      	ands	r6, r3
    2120:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    2122:	2000      	movs	r0, #0
}
    2124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    2126:	2014      	movs	r0, #20
    2128:	4240      	negs	r0, r0
    212a:	e7fb      	b.n	2124 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    212c:	2015      	movs	r0, #21
    212e:	4240      	negs	r0, r0
    2130:	e7f8      	b.n	2124 <usb_d_ep_init+0x38>
    2132:	46c0      	nop			; (mov r8, r8)
    2134:	00001de9 	.word	0x00001de9
    2138:	000033c1 	.word	0x000033c1
    213c:	20000630 	.word	0x20000630

00002140 <usb_d_ep0_init>:
{
    2140:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    2142:	b282      	uxth	r2, r0
    2144:	2100      	movs	r1, #0
    2146:	2000      	movs	r0, #0
    2148:	4b01      	ldr	r3, [pc, #4]	; (2150 <usb_d_ep0_init+0x10>)
    214a:	4798      	blx	r3
}
    214c:	bd10      	pop	{r4, pc}
    214e:	46c0      	nop			; (mov r8, r8)
    2150:	000020ed 	.word	0x000020ed

00002154 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2154:	b570      	push	{r4, r5, r6, lr}
    2156:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2158:	4b06      	ldr	r3, [pc, #24]	; (2174 <usb_d_ep_deinit+0x20>)
    215a:	4798      	blx	r3
    215c:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    215e:	db07      	blt.n	2170 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    2160:	0028      	movs	r0, r5
    2162:	4b05      	ldr	r3, [pc, #20]	; (2178 <usb_d_ep_deinit+0x24>)
    2164:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2166:	0164      	lsls	r4, r4, #5
    2168:	4b04      	ldr	r3, [pc, #16]	; (217c <usb_d_ep_deinit+0x28>)
    216a:	191c      	adds	r4, r3, r4
    216c:	23ff      	movs	r3, #255	; 0xff
    216e:	7063      	strb	r3, [r4, #1]
}
    2170:	bd70      	pop	{r4, r5, r6, pc}
    2172:	46c0      	nop			; (mov r8, r8)
    2174:	00001de9 	.word	0x00001de9
    2178:	000034ed 	.word	0x000034ed
    217c:	20000630 	.word	0x20000630

00002180 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    2180:	b570      	push	{r4, r5, r6, lr}
    2182:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2184:	4b0e      	ldr	r3, [pc, #56]	; (21c0 <usb_d_ep_enable+0x40>)
    2186:	4798      	blx	r3
    2188:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    218a:	db15      	blt.n	21b8 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    218c:	0143      	lsls	r3, r0, #5
    218e:	4a0d      	ldr	r2, [pc, #52]	; (21c4 <usb_d_ep_enable+0x44>)
    2190:	5c9b      	ldrb	r3, [r3, r2]
    2192:	425a      	negs	r2, r3
    2194:	4153      	adcs	r3, r2
    2196:	3301      	adds	r3, #1
    2198:	0141      	lsls	r1, r0, #5
    219a:	4a0a      	ldr	r2, [pc, #40]	; (21c4 <usb_d_ep_enable+0x44>)
    219c:	1852      	adds	r2, r2, r1
    219e:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    21a0:	0020      	movs	r0, r4
    21a2:	4b09      	ldr	r3, [pc, #36]	; (21c8 <usb_d_ep_enable+0x48>)
    21a4:	4798      	blx	r3
	if (rc < 0) {
    21a6:	2800      	cmp	r0, #0
    21a8:	db00      	blt.n	21ac <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    21aa:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    21ac:	016d      	lsls	r5, r5, #5
    21ae:	4b05      	ldr	r3, [pc, #20]	; (21c4 <usb_d_ep_enable+0x44>)
    21b0:	195d      	adds	r5, r3, r5
    21b2:	2300      	movs	r3, #0
    21b4:	70ab      	strb	r3, [r5, #2]
    21b6:	e7f8      	b.n	21aa <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    21b8:	2012      	movs	r0, #18
    21ba:	4240      	negs	r0, r0
    21bc:	e7f5      	b.n	21aa <usb_d_ep_enable+0x2a>
    21be:	46c0      	nop			; (mov r8, r8)
    21c0:	00001de9 	.word	0x00001de9
    21c4:	20000630 	.word	0x20000630
    21c8:	000035b9 	.word	0x000035b9

000021cc <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    21cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ce:	46d6      	mov	lr, sl
    21d0:	464f      	mov	r7, r9
    21d2:	4646      	mov	r6, r8
    21d4:	b5c0      	push	{r6, r7, lr}
    21d6:	b086      	sub	sp, #24
    21d8:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    21da:	7a07      	ldrb	r7, [r0, #8]
    21dc:	0038      	movs	r0, r7
    21de:	4b40      	ldr	r3, [pc, #256]	; (22e0 <usb_d_ep_transfer+0x114>)
    21e0:	4798      	blx	r3
    21e2:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    21e4:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
    21e6:	6863      	ldr	r3, [r4, #4]
    21e8:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    21ea:	2800      	cmp	r0, #0
    21ec:	da00      	bge.n	21f0 <usb_d_ep_transfer+0x24>
    21ee:	e071      	b.n	22d4 <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    21f0:	a804      	add	r0, sp, #16
    21f2:	4b3c      	ldr	r3, [pc, #240]	; (22e4 <usb_d_ep_transfer+0x118>)
    21f4:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    21f6:	016a      	lsls	r2, r5, #5
    21f8:	4b3b      	ldr	r3, [pc, #236]	; (22e8 <usb_d_ep_transfer+0x11c>)
    21fa:	189b      	adds	r3, r3, r2
    21fc:	789a      	ldrb	r2, [r3, #2]
    21fe:	2317      	movs	r3, #23
    2200:	446b      	add	r3, sp
    2202:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    2204:	781b      	ldrb	r3, [r3, #0]
    2206:	2b01      	cmp	r3, #1
    2208:	d010      	beq.n	222c <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    220a:	a804      	add	r0, sp, #16
    220c:	4b37      	ldr	r3, [pc, #220]	; (22ec <usb_d_ep_transfer+0x120>)
    220e:	4798      	blx	r3
		switch (state) {
    2210:	2317      	movs	r3, #23
    2212:	446b      	add	r3, sp
    2214:	781b      	ldrb	r3, [r3, #0]
    2216:	b2db      	uxtb	r3, r3
    2218:	2b05      	cmp	r3, #5
    221a:	d05e      	beq.n	22da <usb_d_ep_transfer+0x10e>
    221c:	2b06      	cmp	r3, #6
    221e:	d023      	beq.n	2268 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    2220:	2001      	movs	r0, #1
		switch (state) {
    2222:	2b00      	cmp	r3, #0
    2224:	d13c      	bne.n	22a0 <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
    2226:	2013      	movs	r0, #19
    2228:	4240      	negs	r0, r0
    222a:	e039      	b.n	22a0 <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    222c:	4b2e      	ldr	r3, [pc, #184]	; (22e8 <usb_d_ep_transfer+0x11c>)
    222e:	4699      	mov	r9, r3
    2230:	016b      	lsls	r3, r5, #5
    2232:	469a      	mov	sl, r3
    2234:	464b      	mov	r3, r9
    2236:	4453      	add	r3, sl
    2238:	2203      	movs	r2, #3
    223a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    223c:	a804      	add	r0, sp, #16
    223e:	4b2b      	ldr	r3, [pc, #172]	; (22ec <usb_d_ep_transfer+0x120>)
    2240:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2242:	464b      	mov	r3, r9
    2244:	4652      	mov	r2, sl
    2246:	5cd3      	ldrb	r3, [r2, r3]
    2248:	2b00      	cmp	r3, #0
    224a:	d010      	beq.n	226e <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    224c:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    224e:	1e72      	subs	r2, r6, #1
    2250:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2252:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
    2254:	6822      	ldr	r2, [r4, #0]
    2256:	9201      	str	r2, [sp, #4]
    2258:	4642      	mov	r2, r8
    225a:	9202      	str	r2, [sp, #8]
    225c:	b27f      	sxtb	r7, r7
    225e:	2f00      	cmp	r7, #0
    2260:	db17      	blt.n	2292 <usb_d_ep_transfer+0xc6>
    2262:	220f      	movs	r2, #15
    2264:	4013      	ands	r3, r2
    2266:	e016      	b.n	2296 <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
    2268:	2010      	movs	r0, #16
    226a:	4240      	negs	r0, r0
    226c:	e018      	b.n	22a0 <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    226e:	016b      	lsls	r3, r5, #5
    2270:	4a1d      	ldr	r2, [pc, #116]	; (22e8 <usb_d_ep_transfer+0x11c>)
    2272:	18d2      	adds	r2, r2, r3
    2274:	7cd1      	ldrb	r1, [r2, #19]
    2276:	0209      	lsls	r1, r1, #8
    2278:	7c93      	ldrb	r3, [r2, #18]
    227a:	185b      	adds	r3, r3, r1
    227c:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    227e:	2b00      	cmp	r3, #0
    2280:	d114      	bne.n	22ac <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2282:	2304      	movs	r3, #4
    2284:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    2286:	2200      	movs	r2, #0
			zlp                 = true;
    2288:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    228a:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    228c:	6821      	ldr	r1, [r4, #0]
    228e:	9101      	str	r1, [sp, #4]
    2290:	9202      	str	r2, [sp, #8]
    2292:	2280      	movs	r2, #128	; 0x80
    2294:	4313      	orrs	r3, r2
    2296:	a801      	add	r0, sp, #4
    2298:	7203      	strb	r3, [r0, #8]
    229a:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    229c:	4b14      	ldr	r3, [pc, #80]	; (22f0 <usb_d_ep_transfer+0x124>)
    229e:	4798      	blx	r3
	return rc;
}
    22a0:	b006      	add	sp, #24
    22a2:	bc1c      	pop	{r2, r3, r4}
    22a4:	4690      	mov	r8, r2
    22a6:	4699      	mov	r9, r3
    22a8:	46a2      	mov	sl, r4
    22aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22ac:	4642      	mov	r2, r8
    22ae:	429a      	cmp	r2, r3
    22b0:	d900      	bls.n	22b4 <usb_d_ep_transfer+0xe8>
    22b2:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    22b4:	016d      	lsls	r5, r5, #5
    22b6:	490c      	ldr	r1, [pc, #48]	; (22e8 <usb_d_ep_transfer+0x11c>)
    22b8:	194d      	adds	r5, r1, r5
			if (dir) {
    22ba:	7b29      	ldrb	r1, [r5, #12]
    22bc:	297f      	cmp	r1, #127	; 0x7f
    22be:	d805      	bhi.n	22cc <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    22c0:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    22c2:	6821      	ldr	r1, [r4, #0]
    22c4:	9101      	str	r1, [sp, #4]
    22c6:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    22c8:	2600      	movs	r6, #0
    22ca:	e7ca      	b.n	2262 <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
    22cc:	429a      	cmp	r2, r3
    22ce:	41b6      	sbcs	r6, r6
    22d0:	4276      	negs	r6, r6
    22d2:	e7da      	b.n	228a <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
    22d4:	2012      	movs	r0, #18
    22d6:	4240      	negs	r0, r0
    22d8:	e7e2      	b.n	22a0 <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
    22da:	2002      	movs	r0, #2
    22dc:	e7e0      	b.n	22a0 <usb_d_ep_transfer+0xd4>
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	00001de9 	.word	0x00001de9
    22e4:	00004b91 	.word	0x00004b91
    22e8:	20000630 	.word	0x20000630
    22ec:	00004b9f 	.word	0x00004b9f
    22f0:	00003a71 	.word	0x00003a71

000022f4 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    22f4:	b570      	push	{r4, r5, r6, lr}
    22f6:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    22f8:	4b07      	ldr	r3, [pc, #28]	; (2318 <usb_d_ep_abort+0x24>)
    22fa:	4798      	blx	r3
    22fc:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    22fe:	db09      	blt.n	2314 <usb_d_ep_abort+0x20>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    2300:	0028      	movs	r0, r5
    2302:	4b06      	ldr	r3, [pc, #24]	; (231c <usb_d_ep_abort+0x28>)
    2304:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2306:	0164      	lsls	r4, r4, #5
    2308:	4b05      	ldr	r3, [pc, #20]	; (2320 <usb_d_ep_abort+0x2c>)
    230a:	191c      	adds	r4, r3, r4
    230c:	2301      	movs	r3, #1
    230e:	70a3      	strb	r3, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    2310:	3303      	adds	r3, #3
    2312:	70e3      	strb	r3, [r4, #3]
}
    2314:	bd70      	pop	{r4, r5, r6, pc}
    2316:	46c0      	nop			; (mov r8, r8)
    2318:	00001de9 	.word	0x00001de9
    231c:	00003c81 	.word	0x00003c81
    2320:	20000630 	.word	0x20000630

00002324 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    2324:	b570      	push	{r4, r5, r6, lr}
    2326:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    2328:	2900      	cmp	r1, #0
    232a:	d005      	beq.n	2338 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    232c:	2901      	cmp	r1, #1
    232e:	d021      	beq.n	2374 <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2330:	2102      	movs	r1, #2
    2332:	4b13      	ldr	r3, [pc, #76]	; (2380 <usb_d_ep_halt+0x5c>)
    2334:	4798      	blx	r3
	}
}
    2336:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    2338:	4b12      	ldr	r3, [pc, #72]	; (2384 <usb_d_ep_halt+0x60>)
    233a:	4798      	blx	r3
    233c:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    233e:	db1c      	blt.n	237a <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2340:	2102      	movs	r1, #2
    2342:	0020      	movs	r0, r4
    2344:	4b0e      	ldr	r3, [pc, #56]	; (2380 <usb_d_ep_halt+0x5c>)
    2346:	4798      	blx	r3
    2348:	2800      	cmp	r0, #0
    234a:	d0f4      	beq.n	2336 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    234c:	2100      	movs	r1, #0
    234e:	0020      	movs	r0, r4
    2350:	4b0b      	ldr	r3, [pc, #44]	; (2380 <usb_d_ep_halt+0x5c>)
    2352:	4798      	blx	r3
		if (rc < 0) {
    2354:	2800      	cmp	r0, #0
    2356:	dbee      	blt.n	2336 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2358:	016d      	lsls	r5, r5, #5
    235a:	4b0b      	ldr	r3, [pc, #44]	; (2388 <usb_d_ep_halt+0x64>)
    235c:	195d      	adds	r5, r3, r5
    235e:	2301      	movs	r3, #1
    2360:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    2362:	3302      	adds	r3, #2
    2364:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2366:	69eb      	ldr	r3, [r5, #28]
    2368:	2200      	movs	r2, #0
    236a:	2103      	movs	r1, #3
    236c:	0020      	movs	r0, r4
    236e:	4798      	blx	r3
	return ERR_NONE;
    2370:	2000      	movs	r0, #0
    2372:	e7e0      	b.n	2336 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2374:	4b02      	ldr	r3, [pc, #8]	; (2380 <usb_d_ep_halt+0x5c>)
    2376:	4798      	blx	r3
    2378:	e7dd      	b.n	2336 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    237a:	2012      	movs	r0, #18
    237c:	4240      	negs	r0, r0
    237e:	e7da      	b.n	2336 <usb_d_ep_halt+0x12>
    2380:	0000389d 	.word	0x0000389d
    2384:	00001de9 	.word	0x00001de9
    2388:	20000630 	.word	0x20000630

0000238c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    238c:	b570      	push	{r4, r5, r6, lr}
    238e:	000d      	movs	r5, r1
    2390:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    2392:	4b0f      	ldr	r3, [pc, #60]	; (23d0 <usb_d_ep_register_callback+0x44>)
    2394:	4798      	blx	r3
    2396:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2398:	1e22      	subs	r2, r4, #0
    239a:	d008      	beq.n	23ae <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    239c:	2b00      	cmp	r3, #0
    239e:	db05      	blt.n	23ac <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    23a0:	2d01      	cmp	r5, #1
    23a2:	d00b      	beq.n	23bc <usb_d_ep_register_callback+0x30>
    23a4:	2d00      	cmp	r5, #0
    23a6:	d004      	beq.n	23b2 <usb_d_ep_register_callback+0x26>
    23a8:	2d02      	cmp	r5, #2
    23aa:	d00c      	beq.n	23c6 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    23ac:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    23ae:	4a09      	ldr	r2, [pc, #36]	; (23d4 <usb_d_ep_register_callback+0x48>)
    23b0:	e7f4      	b.n	239c <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    23b2:	0140      	lsls	r0, r0, #5
    23b4:	4b08      	ldr	r3, [pc, #32]	; (23d8 <usb_d_ep_register_callback+0x4c>)
    23b6:	1818      	adds	r0, r3, r0
    23b8:	6142      	str	r2, [r0, #20]
		break;
    23ba:	e7f7      	b.n	23ac <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    23bc:	0140      	lsls	r0, r0, #5
    23be:	4b06      	ldr	r3, [pc, #24]	; (23d8 <usb_d_ep_register_callback+0x4c>)
    23c0:	1818      	adds	r0, r3, r0
    23c2:	6182      	str	r2, [r0, #24]
		break;
    23c4:	e7f2      	b.n	23ac <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    23c6:	0140      	lsls	r0, r0, #5
    23c8:	4b03      	ldr	r3, [pc, #12]	; (23d8 <usb_d_ep_register_callback+0x4c>)
    23ca:	1818      	adds	r0, r3, r0
    23cc:	61c2      	str	r2, [r0, #28]
		break;
    23ce:	e7ed      	b.n	23ac <usb_d_ep_register_callback+0x20>
    23d0:	00001de9 	.word	0x00001de9
    23d4:	00001e2d 	.word	0x00001e2d
    23d8:	20000630 	.word	0x20000630

000023dc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    23dc:	2800      	cmp	r0, #0
    23de:	d100      	bne.n	23e2 <assert+0x6>
		__asm("BKPT #0");
    23e0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    23e2:	4770      	bx	lr

000023e4 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    23e4:	6803      	ldr	r3, [r0, #0]
    23e6:	2b00      	cmp	r3, #0
    23e8:	d00a      	beq.n	2400 <is_list_element+0x1c>
		if (it == element) {
    23ea:	428b      	cmp	r3, r1
    23ec:	d00a      	beq.n	2404 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    23ee:	681b      	ldr	r3, [r3, #0]
    23f0:	2b00      	cmp	r3, #0
    23f2:	d003      	beq.n	23fc <is_list_element+0x18>
		if (it == element) {
    23f4:	4299      	cmp	r1, r3
    23f6:	d1fa      	bne.n	23ee <is_list_element+0xa>
			return true;
    23f8:	2001      	movs	r0, #1
    23fa:	e000      	b.n	23fe <is_list_element+0x1a>
		}
	}

	return false;
    23fc:	2000      	movs	r0, #0
}
    23fe:	4770      	bx	lr
	return false;
    2400:	2000      	movs	r0, #0
    2402:	e7fc      	b.n	23fe <is_list_element+0x1a>
			return true;
    2404:	2001      	movs	r0, #1
    2406:	e7fa      	b.n	23fe <is_list_element+0x1a>

00002408 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2408:	b570      	push	{r4, r5, r6, lr}
    240a:	0004      	movs	r4, r0
    240c:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    240e:	4b06      	ldr	r3, [pc, #24]	; (2428 <list_insert_as_head+0x20>)
    2410:	4798      	blx	r3
    2412:	2301      	movs	r3, #1
    2414:	4058      	eors	r0, r3
    2416:	b2c0      	uxtb	r0, r0
    2418:	2239      	movs	r2, #57	; 0x39
    241a:	4904      	ldr	r1, [pc, #16]	; (242c <list_insert_as_head+0x24>)
    241c:	4b04      	ldr	r3, [pc, #16]	; (2430 <list_insert_as_head+0x28>)
    241e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2420:	6823      	ldr	r3, [r4, #0]
    2422:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    2424:	6025      	str	r5, [r4, #0]
}
    2426:	bd70      	pop	{r4, r5, r6, pc}
    2428:	000023e5 	.word	0x000023e5
    242c:	00005124 	.word	0x00005124
    2430:	000023dd 	.word	0x000023dd

00002434 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2434:	6803      	ldr	r3, [r0, #0]
    2436:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2438:	6001      	str	r1, [r0, #0]
}
    243a:	4770      	bx	lr

0000243c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    243c:	b570      	push	{r4, r5, r6, lr}
    243e:	0005      	movs	r5, r0
    2440:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    2442:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    2444:	4b0a      	ldr	r3, [pc, #40]	; (2470 <list_insert_at_end+0x34>)
    2446:	4798      	blx	r3
    2448:	2301      	movs	r3, #1
    244a:	4058      	eors	r0, r3
    244c:	b2c0      	uxtb	r0, r0
    244e:	224f      	movs	r2, #79	; 0x4f
    2450:	4908      	ldr	r1, [pc, #32]	; (2474 <list_insert_at_end+0x38>)
    2452:	4b09      	ldr	r3, [pc, #36]	; (2478 <list_insert_at_end+0x3c>)
    2454:	4798      	blx	r3

	if (!list->head) {
    2456:	682b      	ldr	r3, [r5, #0]
    2458:	2b00      	cmp	r3, #0
    245a:	d103      	bne.n	2464 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    245c:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    245e:	6033      	str	r3, [r6, #0]
		return;
    2460:	e005      	b.n	246e <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    2462:	001c      	movs	r4, r3
	while (it->next) {
    2464:	6823      	ldr	r3, [r4, #0]
    2466:	2b00      	cmp	r3, #0
    2468:	d1fb      	bne.n	2462 <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    246a:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    246c:	6033      	str	r3, [r6, #0]
}
    246e:	bd70      	pop	{r4, r5, r6, pc}
    2470:	000023e5 	.word	0x000023e5
    2474:	00005124 	.word	0x00005124
    2478:	000023dd 	.word	0x000023dd

0000247c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    247c:	6803      	ldr	r3, [r0, #0]
    247e:	2b00      	cmp	r3, #0
    2480:	d001      	beq.n	2486 <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    2482:	681a      	ldr	r2, [r3, #0]
    2484:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    2486:	0018      	movs	r0, r3
    2488:	4770      	bx	lr

0000248a <list_delete_element>:
/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
	if (!element) {
    248a:	2900      	cmp	r1, #0
    248c:	d019      	beq.n	24c2 <list_delete_element+0x38>
		return false;
	}

	if (list->head == element) {
    248e:	6802      	ldr	r2, [r0, #0]
    2490:	4291      	cmp	r1, r2
    2492:	d00b      	beq.n	24ac <list_delete_element+0x22>
		list->head = list->head->next;
		return true;
	} else {
		struct list_element *it = list->head;

		while (it && it->next != element) {
    2494:	2a00      	cmp	r2, #0
    2496:	d016      	beq.n	24c6 <list_delete_element+0x3c>
    2498:	6813      	ldr	r3, [r2, #0]
    249a:	4299      	cmp	r1, r3
    249c:	d00a      	beq.n	24b4 <list_delete_element+0x2a>
    249e:	2b00      	cmp	r3, #0
    24a0:	d00d      	beq.n	24be <list_delete_element+0x34>
    24a2:	681a      	ldr	r2, [r3, #0]
    24a4:	4291      	cmp	r1, r2
    24a6:	d006      	beq.n	24b6 <list_delete_element+0x2c>
    24a8:	0013      	movs	r3, r2
    24aa:	e7f8      	b.n	249e <list_delete_element+0x14>
		list->head = list->head->next;
    24ac:	6813      	ldr	r3, [r2, #0]
    24ae:	6003      	str	r3, [r0, #0]
		return true;
    24b0:	2001      	movs	r0, #1
    24b2:	e003      	b.n	24bc <list_delete_element+0x32>
		while (it && it->next != element) {
    24b4:	0013      	movs	r3, r2
			it = it->next;
		}
		if (it) {
			it->next = ((struct list_element *)element)->next;
    24b6:	680a      	ldr	r2, [r1, #0]
    24b8:	601a      	str	r2, [r3, #0]
			return true;
    24ba:	2001      	movs	r0, #1
		}
	}

	return false;
}
    24bc:	4770      	bx	lr
	return false;
    24be:	2000      	movs	r0, #0
    24c0:	e7fc      	b.n	24bc <list_delete_element+0x32>
		return false;
    24c2:	2000      	movs	r0, #0
    24c4:	e7fa      	b.n	24bc <list_delete_element+0x32>
	return false;
    24c6:	2000      	movs	r0, #0
    24c8:	e7f8      	b.n	24bc <list_delete_element+0x32>
	...

000024cc <_irq_set>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    24cc:	b243      	sxtb	r3, r0
    24ce:	2b00      	cmp	r3, #0
    24d0:	db07      	blt.n	24e2 <_irq_set+0x16>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    24d2:	231f      	movs	r3, #31
    24d4:	4018      	ands	r0, r3
    24d6:	3b1e      	subs	r3, #30
    24d8:	4083      	lsls	r3, r0
    24da:	2280      	movs	r2, #128	; 0x80
    24dc:	0052      	lsls	r2, r2, #1
    24de:	4901      	ldr	r1, [pc, #4]	; (24e4 <_irq_set+0x18>)
    24e0:	508b      	str	r3, [r1, r2]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
    24e2:	4770      	bx	lr
    24e4:	e000e100 	.word	0xe000e100

000024e8 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    24e8:	b510      	push	{r4, lr}
    24ea:	0003      	movs	r3, r0
		return (ms * (freq / 10000) + 2) / 3 * 10;
    24ec:	20c8      	movs	r0, #200	; 0xc8
    24ee:	0080      	lsls	r0, r0, #2
    24f0:	4358      	muls	r0, r3
    24f2:	3002      	adds	r0, #2
    24f4:	2103      	movs	r1, #3
    24f6:	4b03      	ldr	r3, [pc, #12]	; (2504 <_get_cycles_for_ms+0x1c>)
    24f8:	4798      	blx	r3
    24fa:	0003      	movs	r3, r0
    24fc:	0080      	lsls	r0, r0, #2
    24fe:	18c0      	adds	r0, r0, r3
    2500:	0040      	lsls	r0, r0, #1
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2502:	bd10      	pop	{r4, pc}
    2504:	00004bbd 	.word	0x00004bbd

00002508 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    2508:	3901      	subs	r1, #1
    250a:	d8fd      	bhi.n	2508 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    250c:	4770      	bx	lr
	...

00002510 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2510:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    2512:	4b06      	ldr	r3, [pc, #24]	; (252c <_init_chip+0x1c>)
    2514:	685a      	ldr	r2, [r3, #4]
    2516:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    2518:	4b05      	ldr	r3, [pc, #20]	; (2530 <_init_chip+0x20>)
    251a:	4798      	blx	r3
	_sysctrl_init_sources();
    251c:	4b05      	ldr	r3, [pc, #20]	; (2534 <_init_chip+0x24>)
    251e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    2520:	4b05      	ldr	r3, [pc, #20]	; (2538 <_init_chip+0x28>)
    2522:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2524:	20ff      	movs	r0, #255	; 0xff
    2526:	4b05      	ldr	r3, [pc, #20]	; (253c <_init_chip+0x2c>)
    2528:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    252a:	bd10      	pop	{r4, pc}
    252c:	41004000 	.word	0x41004000
    2530:	000025f1 	.word	0x000025f1
    2534:	00002965 	.word	0x00002965
    2538:	000029b9 	.word	0x000029b9
    253c:	00002541 	.word	0x00002541

00002540 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2540:	07c3      	lsls	r3, r0, #31
    2542:	d50a      	bpl.n	255a <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    2544:	4b22      	ldr	r3, [pc, #136]	; (25d0 <_gclk_init_generators_by_fref+0x90>)
    2546:	2280      	movs	r2, #128	; 0x80
    2548:	0052      	lsls	r2, r2, #1
    254a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    254c:	2283      	movs	r2, #131	; 0x83
    254e:	0252      	lsls	r2, r2, #9
    2550:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2552:	001a      	movs	r2, r3
    2554:	7853      	ldrb	r3, [r2, #1]
    2556:	09db      	lsrs	r3, r3, #7
    2558:	d1fc      	bne.n	2554 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    255a:	0783      	lsls	r3, r0, #30
    255c:	d509      	bpl.n	2572 <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
    255e:	4b1c      	ldr	r3, [pc, #112]	; (25d0 <_gclk_init_generators_by_fref+0x90>)
    2560:	2202      	movs	r2, #2
    2562:	32ff      	adds	r2, #255	; 0xff
    2564:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2566:	4a1b      	ldr	r2, [pc, #108]	; (25d4 <_gclk_init_generators_by_fref+0x94>)
    2568:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    256a:	001a      	movs	r2, r3
    256c:	7853      	ldrb	r3, [r2, #1]
    256e:	09db      	lsrs	r3, r3, #7
    2570:	d1fc      	bne.n	256c <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    2572:	0743      	lsls	r3, r0, #29
    2574:	d508      	bpl.n	2588 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
    2576:	4b16      	ldr	r3, [pc, #88]	; (25d0 <_gclk_init_generators_by_fref+0x90>)
    2578:	4a17      	ldr	r2, [pc, #92]	; (25d8 <_gclk_init_generators_by_fref+0x98>)
    257a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    257c:	4a17      	ldr	r2, [pc, #92]	; (25dc <_gclk_init_generators_by_fref+0x9c>)
    257e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2580:	001a      	movs	r2, r3
    2582:	7853      	ldrb	r3, [r2, #1]
    2584:	09db      	lsrs	r3, r3, #7
    2586:	d1fc      	bne.n	2582 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    2588:	0703      	lsls	r3, r0, #28
    258a:	d508      	bpl.n	259e <_gclk_init_generators_by_fref+0x5e>
	((Gclk *)hw)->GENDIV.reg = data;
    258c:	4b10      	ldr	r3, [pc, #64]	; (25d0 <_gclk_init_generators_by_fref+0x90>)
    258e:	4a14      	ldr	r2, [pc, #80]	; (25e0 <_gclk_init_generators_by_fref+0xa0>)
    2590:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2592:	4a14      	ldr	r2, [pc, #80]	; (25e4 <_gclk_init_generators_by_fref+0xa4>)
    2594:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2596:	001a      	movs	r2, r3
    2598:	7853      	ldrb	r3, [r2, #1]
    259a:	09db      	lsrs	r3, r3, #7
    259c:	d1fc      	bne.n	2598 <_gclk_init_generators_by_fref+0x58>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    259e:	0643      	lsls	r3, r0, #25
    25a0:	d509      	bpl.n	25b6 <_gclk_init_generators_by_fref+0x76>
	((Gclk *)hw)->GENDIV.reg = data;
    25a2:	4b0b      	ldr	r3, [pc, #44]	; (25d0 <_gclk_init_generators_by_fref+0x90>)
    25a4:	2283      	movs	r2, #131	; 0x83
    25a6:	0052      	lsls	r2, r2, #1
    25a8:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    25aa:	4a0f      	ldr	r2, [pc, #60]	; (25e8 <_gclk_init_generators_by_fref+0xa8>)
    25ac:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    25ae:	001a      	movs	r2, r3
    25b0:	7853      	ldrb	r3, [r2, #1]
    25b2:	09db      	lsrs	r3, r3, #7
    25b4:	d1fc      	bne.n	25b0 <_gclk_init_generators_by_fref+0x70>
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SRC | GCLK_GENCTRL_ID(6));
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    25b6:	0603      	lsls	r3, r0, #24
    25b8:	d509      	bpl.n	25ce <_gclk_init_generators_by_fref+0x8e>
	((Gclk *)hw)->GENDIV.reg = data;
    25ba:	4b05      	ldr	r3, [pc, #20]	; (25d0 <_gclk_init_generators_by_fref+0x90>)
    25bc:	2208      	movs	r2, #8
    25be:	32ff      	adds	r2, #255	; 0xff
    25c0:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    25c2:	4a0a      	ldr	r2, [pc, #40]	; (25ec <_gclk_init_generators_by_fref+0xac>)
    25c4:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    25c6:	001a      	movs	r2, r3
    25c8:	7853      	ldrb	r3, [r2, #1]
    25ca:	09db      	lsrs	r3, r3, #7
    25cc:	d1fc      	bne.n	25c8 <_gclk_init_generators_by_fref+0x88>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    25ce:	4770      	bx	lr
    25d0:	40000c00 	.word	0x40000c00
    25d4:	00090701 	.word	0x00090701
    25d8:	00000402 	.word	0x00000402
    25dc:	00010602 	.word	0x00010602
    25e0:	00000803 	.word	0x00000803
    25e4:	00010603 	.word	0x00010603
    25e8:	00010306 	.word	0x00010306
    25ec:	00010407 	.word	0x00010407

000025f0 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    25f0:	4b06      	ldr	r3, [pc, #24]	; (260c <_pm_init+0x1c>)
    25f2:	7a1a      	ldrb	r2, [r3, #8]
    25f4:	b2d2      	uxtb	r2, r2
    25f6:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    25f8:	7a5a      	ldrb	r2, [r3, #9]
    25fa:	b2d2      	uxtb	r2, r2
    25fc:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    25fe:	7a9a      	ldrb	r2, [r3, #10]
    2600:	b2d2      	uxtb	r2, r2
    2602:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    2604:	7ada      	ldrb	r2, [r3, #11]
    2606:	b2d2      	uxtb	r2, r2
    2608:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    260a:	4770      	bx	lr
    260c:	40000400 	.word	0x40000400

00002610 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    2610:	b510      	push	{r4, lr}
    2612:	1e04      	subs	r4, r0, #0
	uint16_t register_value;

	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2614:	d035      	beq.n	2682 <_calendar_init+0x72>
    2616:	6800      	ldr	r0, [r0, #0]
    2618:	1e43      	subs	r3, r0, #1
    261a:	4198      	sbcs	r0, r3
    261c:	b2c0      	uxtb	r0, r0
    261e:	2278      	movs	r2, #120	; 0x78
    2620:	4919      	ldr	r1, [pc, #100]	; (2688 <_calendar_init+0x78>)
    2622:	4b1a      	ldr	r3, [pc, #104]	; (268c <_calendar_init+0x7c>)
    2624:	4798      	blx	r3

	_rtc_dev = dev;
    2626:	4b1a      	ldr	r3, [pc, #104]	; (2690 <_calendar_init+0x80>)
    2628:	601c      	str	r4, [r3, #0]

	if (hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw)) {
    262a:	6822      	ldr	r2, [r4, #0]
typedef uint8_t  hri_rtcmode2_intflag_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtc_wait_for_sync(const void *const hw)
{
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    262c:	7a93      	ldrb	r3, [r2, #10]
    262e:	09db      	lsrs	r3, r3, #7
    2630:	d1fc      	bne.n	262c <_calendar_init+0x1c>

static inline bool hri_rtcmode0_get_CTRL_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
    2632:	8813      	ldrh	r3, [r2, #0]
    2634:	079b      	lsls	r3, r3, #30
    2636:	d50a      	bpl.n	264e <_calendar_init+0x3e>
}

static inline void hri_rtcmode0_clear_CTRL_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    2638:	8813      	ldrh	r3, [r2, #0]
    263a:	2102      	movs	r1, #2
    263c:	438b      	bics	r3, r1
    263e:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    2640:	7a93      	ldrb	r3, [r2, #10]
    2642:	09db      	lsrs	r3, r3, #7
    2644:	d1fc      	bne.n	2640 <_calendar_init+0x30>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw);
    2646:	6822      	ldr	r2, [r4, #0]
    2648:	7a93      	ldrb	r3, [r2, #10]
    264a:	09db      	lsrs	r3, r3, #7
    264c:	d1fc      	bne.n	2648 <_calendar_init+0x38>
#endif
	}
	hri_rtcmode0_set_CTRL_SWRST_bit(dev->hw);
    264e:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    2650:	8813      	ldrh	r3, [r2, #0]
    2652:	2101      	movs	r1, #1
    2654:	430b      	orrs	r3, r1
    2656:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    2658:	7a93      	ldrb	r3, [r2, #10]
    265a:	09db      	lsrs	r3, r3, #7
    265c:	d1fc      	bne.n	2658 <_calendar_init+0x48>
	hri_rtcmode0_wait_for_sync(dev->hw);
    265e:	6822      	ldr	r2, [r4, #0]
    2660:	7a93      	ldrb	r3, [r2, #10]
    2662:	09db      	lsrs	r3, r3, #7
    2664:	d1fc      	bne.n	2660 <_calendar_init+0x50>
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    2666:	23a0      	movs	r3, #160	; 0xa0
    2668:	011b      	lsls	r3, r3, #4
    266a:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    266c:	7a93      	ldrb	r3, [r2, #10]
    266e:	09db      	lsrs	r3, r3, #7
    2670:	d1fc      	bne.n	266c <_calendar_init+0x5c>
	register_value &= (~RTC_MODE0_CTRL_MATCHCLR);

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	/* set continuously clock read update mode */
	hri_rtcmode0_set_READREQ_RCONT_bit(dev->hw);
    2672:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_rtc_set_READREQ_RCONT_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    2674:	8853      	ldrh	r3, [r2, #2]
    2676:	2180      	movs	r1, #128	; 0x80
    2678:	01c9      	lsls	r1, r1, #7
    267a:	430b      	orrs	r3, r1
    267c:	8053      	strh	r3, [r2, #2]
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	return ERR_NONE;
}
    267e:	2000      	movs	r0, #0
    2680:	bd10      	pop	{r4, pc}
    2682:	2000      	movs	r0, #0
    2684:	e7cb      	b.n	261e <_calendar_init+0xe>
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	00005144 	.word	0x00005144
    268c:	000023dd 	.word	0x000023dd
    2690:	200006b0 	.word	0x200006b0

00002694 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    2694:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
    2696:	4b07      	ldr	r3, [pc, #28]	; (26b4 <RTC_Handler+0x20>)
    2698:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    269a:	6823      	ldr	r3, [r4, #0]
    269c:	7a1b      	ldrb	r3, [r3, #8]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
    269e:	07db      	lsls	r3, r3, #31
    26a0:	d400      	bmi.n	26a4 <RTC_Handler+0x10>
}
    26a2:	bd10      	pop	{r4, pc}
		dev->callback(dev);
    26a4:	0020      	movs	r0, r4
    26a6:	6863      	ldr	r3, [r4, #4]
    26a8:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    26aa:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    26ac:	2201      	movs	r2, #1
    26ae:	721a      	strb	r2, [r3, #8]
}
    26b0:	e7f7      	b.n	26a2 <RTC_Handler+0xe>
    26b2:	46c0      	nop			; (mov r8, r8)
    26b4:	200006b0 	.word	0x200006b0

000026b8 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    26b8:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    26ba:	07db      	lsls	r3, r3, #31
    26bc:	d409      	bmi.n	26d2 <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    26be:	6803      	ldr	r3, [r0, #0]
    26c0:	2202      	movs	r2, #2
    26c2:	4313      	orrs	r3, r2
    26c4:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    26c6:	3201      	adds	r2, #1
    26c8:	69c3      	ldr	r3, [r0, #28]
    26ca:	421a      	tst	r2, r3
    26cc:	d1fc      	bne.n	26c8 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    26ce:	2000      	movs	r0, #0
}
    26d0:	4770      	bx	lr
		return ERR_BUSY;
    26d2:	2004      	movs	r0, #4
    26d4:	4240      	negs	r0, r0
    26d6:	e7fb      	b.n	26d0 <_spi_sync_enable+0x18>

000026d8 <_spi_sync_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    26d8:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    26da:	07db      	lsls	r3, r3, #31
    26dc:	d409      	bmi.n	26f2 <_spi_sync_disable+0x1a>
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    26de:	6803      	ldr	r3, [r0, #0]
    26e0:	2202      	movs	r2, #2
    26e2:	4393      	bics	r3, r2
    26e4:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    26e6:	3201      	adds	r2, #1
    26e8:	69c3      	ldr	r3, [r0, #28]
    26ea:	421a      	tst	r2, r3
    26ec:	d1fc      	bne.n	26e8 <_spi_sync_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    26ee:	2000      	movs	r0, #0
}
    26f0:	4770      	bx	lr
		return ERR_BUSY;
    26f2:	2004      	movs	r0, #4
    26f4:	4240      	negs	r0, r0
    26f6:	e7fb      	b.n	26f0 <_spi_sync_disable+0x18>

000026f8 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    26f8:	b570      	push	{r4, r5, r6, lr}
    26fa:	0005      	movs	r5, r0
    26fc:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    26fe:	4b35      	ldr	r3, [pc, #212]	; (27d4 <_spi_m_sync_init+0xdc>)
    2700:	18cb      	adds	r3, r1, r3
    2702:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    2704:	b2db      	uxtb	r3, r3
    2706:	2b00      	cmp	r3, #0
    2708:	d00b      	beq.n	2722 <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    270a:	2800      	cmp	r0, #0
    270c:	d051      	beq.n	27b2 <_spi_m_sync_init+0xba>
    270e:	1e60      	subs	r0, r4, #1
    2710:	4184      	sbcs	r4, r0
    2712:	b2e0      	uxtb	r0, r4
    2714:	4a30      	ldr	r2, [pc, #192]	; (27d8 <_spi_m_sync_init+0xe0>)
    2716:	4931      	ldr	r1, [pc, #196]	; (27dc <_spi_m_sync_init+0xe4>)
    2718:	4b31      	ldr	r3, [pc, #196]	; (27e0 <_spi_m_sync_init+0xe8>)
    271a:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    271c:	200d      	movs	r0, #13
    271e:	4240      	negs	r0, r0
    2720:	e046      	b.n	27b0 <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    2722:	2800      	cmp	r0, #0
    2724:	d14d      	bne.n	27c2 <_spi_m_sync_init+0xca>
    2726:	4a2c      	ldr	r2, [pc, #176]	; (27d8 <_spi_m_sync_init+0xe0>)
    2728:	492c      	ldr	r1, [pc, #176]	; (27dc <_spi_m_sync_init+0xe4>)
    272a:	2000      	movs	r0, #0
    272c:	4b2c      	ldr	r3, [pc, #176]	; (27e0 <_spi_m_sync_init+0xe8>)
    272e:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2730:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2732:	07db      	lsls	r3, r3, #31
    2734:	d418      	bmi.n	2768 <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2736:	2203      	movs	r2, #3
    2738:	69e3      	ldr	r3, [r4, #28]
    273a:	421a      	tst	r2, r3
    273c:	d1fc      	bne.n	2738 <_spi_m_sync_init+0x40>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    273e:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    2740:	079b      	lsls	r3, r3, #30
    2742:	d50b      	bpl.n	275c <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2744:	6823      	ldr	r3, [r4, #0]
    2746:	2202      	movs	r2, #2
    2748:	4393      	bics	r3, r2
    274a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    274c:	3201      	adds	r2, #1
    274e:	69e3      	ldr	r3, [r4, #28]
    2750:	421a      	tst	r2, r3
    2752:	d1fc      	bne.n	274e <_spi_m_sync_init+0x56>
    2754:	2202      	movs	r2, #2
    2756:	69e3      	ldr	r3, [r4, #28]
    2758:	421a      	tst	r2, r3
    275a:	d1fc      	bne.n	2756 <_spi_m_sync_init+0x5e>
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    275c:	230d      	movs	r3, #13
    275e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2760:	2203      	movs	r2, #3
    2762:	69e3      	ldr	r3, [r4, #28]
    2764:	421a      	tst	r2, r3
    2766:	d1fc      	bne.n	2762 <_spi_m_sync_init+0x6a>
    2768:	2201      	movs	r2, #1
    276a:	69e3      	ldr	r3, [r4, #28]
    276c:	421a      	tst	r2, r3
    276e:	d1fc      	bne.n	276a <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    2770:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    2772:	0020      	movs	r0, r4
    2774:	1e43      	subs	r3, r0, #1
    2776:	4198      	sbcs	r0, r3
    2778:	b2c0      	uxtb	r0, r0
    277a:	4a1a      	ldr	r2, [pc, #104]	; (27e4 <_spi_m_sync_init+0xec>)
    277c:	4917      	ldr	r1, [pc, #92]	; (27dc <_spi_m_sync_init+0xe4>)
    277e:	4b18      	ldr	r3, [pc, #96]	; (27e0 <_spi_m_sync_init+0xe8>)
    2780:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2782:	4b19      	ldr	r3, [pc, #100]	; (27e8 <_spi_m_sync_init+0xf0>)
    2784:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2786:	2203      	movs	r2, #3
    2788:	69e3      	ldr	r3, [r4, #28]
    278a:	421a      	tst	r2, r3
    278c:	d1fc      	bne.n	2788 <_spi_m_sync_init+0x90>
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    278e:	2380      	movs	r3, #128	; 0x80
    2790:	029b      	lsls	r3, r3, #10
    2792:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2794:	2207      	movs	r2, #7
    2796:	69e3      	ldr	r3, [r4, #28]
    2798:	421a      	tst	r2, r3
    279a:	d1fc      	bne.n	2796 <_spi_m_sync_init+0x9e>
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    279c:	234f      	movs	r3, #79	; 0x4f
    279e:	7323      	strb	r3, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    27a0:	2200      	movs	r2, #0
    27a2:	3b1f      	subs	r3, #31
    27a4:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    27a6:	3b2f      	subs	r3, #47	; 0x2f
    27a8:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    27aa:	4b10      	ldr	r3, [pc, #64]	; (27ec <_spi_m_sync_init+0xf4>)
    27ac:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    27ae:	2000      	movs	r0, #0
}
    27b0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    27b2:	4a09      	ldr	r2, [pc, #36]	; (27d8 <_spi_m_sync_init+0xe0>)
    27b4:	4909      	ldr	r1, [pc, #36]	; (27dc <_spi_m_sync_init+0xe4>)
    27b6:	2000      	movs	r0, #0
    27b8:	4b09      	ldr	r3, [pc, #36]	; (27e0 <_spi_m_sync_init+0xe8>)
    27ba:	4798      	blx	r3
		return ERR_INVALID_ARG;
    27bc:	200d      	movs	r0, #13
    27be:	4240      	negs	r0, r0
    27c0:	e7f6      	b.n	27b0 <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    27c2:	0008      	movs	r0, r1
    27c4:	1e43      	subs	r3, r0, #1
    27c6:	4198      	sbcs	r0, r3
    27c8:	b2c0      	uxtb	r0, r0
    27ca:	4a03      	ldr	r2, [pc, #12]	; (27d8 <_spi_m_sync_init+0xe0>)
    27cc:	4903      	ldr	r1, [pc, #12]	; (27dc <_spi_m_sync_init+0xe4>)
    27ce:	4b04      	ldr	r3, [pc, #16]	; (27e0 <_spi_m_sync_init+0xe8>)
    27d0:	4798      	blx	r3
    27d2:	e7ad      	b.n	2730 <_spi_m_sync_init+0x38>
    27d4:	bdfff800 	.word	0xbdfff800
    27d8:	00000925 	.word	0x00000925
    27dc:	0000515c 	.word	0x0000515c
    27e0:	000023dd 	.word	0x000023dd
    27e4:	000008ef 	.word	0x000008ef
    27e8:	0011000c 	.word	0x0011000c
    27ec:	000001ff 	.word	0x000001ff

000027f0 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    27f0:	b510      	push	{r4, lr}
    27f2:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    27f4:	d00c      	beq.n	2810 <_spi_m_sync_enable+0x20>
    27f6:	6800      	ldr	r0, [r0, #0]
    27f8:	1e43      	subs	r3, r0, #1
    27fa:	4198      	sbcs	r0, r3
    27fc:	b2c0      	uxtb	r0, r0
    27fe:	2298      	movs	r2, #152	; 0x98
    2800:	0112      	lsls	r2, r2, #4
    2802:	4904      	ldr	r1, [pc, #16]	; (2814 <_spi_m_sync_enable+0x24>)
    2804:	4b04      	ldr	r3, [pc, #16]	; (2818 <_spi_m_sync_enable+0x28>)
    2806:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    2808:	6820      	ldr	r0, [r4, #0]
    280a:	4b04      	ldr	r3, [pc, #16]	; (281c <_spi_m_sync_enable+0x2c>)
    280c:	4798      	blx	r3
}
    280e:	bd10      	pop	{r4, pc}
    2810:	2000      	movs	r0, #0
    2812:	e7f4      	b.n	27fe <_spi_m_sync_enable+0xe>
    2814:	0000515c 	.word	0x0000515c
    2818:	000023dd 	.word	0x000023dd
    281c:	000026b9 	.word	0x000026b9

00002820 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    2820:	b510      	push	{r4, lr}
    2822:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    2824:	d00b      	beq.n	283e <_spi_m_sync_disable+0x1e>
    2826:	6800      	ldr	r0, [r0, #0]
    2828:	1e43      	subs	r3, r0, #1
    282a:	4198      	sbcs	r0, r3
    282c:	b2c0      	uxtb	r0, r0
    282e:	4a05      	ldr	r2, [pc, #20]	; (2844 <_spi_m_sync_disable+0x24>)
    2830:	4905      	ldr	r1, [pc, #20]	; (2848 <_spi_m_sync_disable+0x28>)
    2832:	4b06      	ldr	r3, [pc, #24]	; (284c <_spi_m_sync_disable+0x2c>)
    2834:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    2836:	6820      	ldr	r0, [r4, #0]
    2838:	4b05      	ldr	r3, [pc, #20]	; (2850 <_spi_m_sync_disable+0x30>)
    283a:	4798      	blx	r3
}
    283c:	bd10      	pop	{r4, pc}
    283e:	2000      	movs	r0, #0
    2840:	e7f5      	b.n	282e <_spi_m_sync_disable+0xe>
    2842:	46c0      	nop			; (mov r8, r8)
    2844:	0000099c 	.word	0x0000099c
    2848:	0000515c 	.word	0x0000515c
    284c:	000023dd 	.word	0x000023dd
    2850:	000026d9 	.word	0x000026d9

00002854 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    2854:	b5f0      	push	{r4, r5, r6, r7, lr}
    2856:	46de      	mov	lr, fp
    2858:	4657      	mov	r7, sl
    285a:	464e      	mov	r6, r9
    285c:	4645      	mov	r5, r8
    285e:	b5e0      	push	{r5, r6, r7, lr}
    2860:	b083      	sub	sp, #12
    2862:	4681      	mov	r9, r0
    2864:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    2866:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    2868:	680b      	ldr	r3, [r1, #0]
    286a:	4698      	mov	r8, r3
    286c:	684d      	ldr	r5, [r1, #4]
    286e:	7903      	ldrb	r3, [r0, #4]
    2870:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    2872:	2800      	cmp	r0, #0
    2874:	d015      	beq.n	28a2 <_spi_m_sync_trans+0x4e>
    2876:	0020      	movs	r0, r4
    2878:	1e43      	subs	r3, r0, #1
    287a:	4198      	sbcs	r0, r3
    287c:	b2c0      	uxtb	r0, r0
    287e:	4a36      	ldr	r2, [pc, #216]	; (2958 <_spi_m_sync_trans+0x104>)
    2880:	4936      	ldr	r1, [pc, #216]	; (295c <_spi_m_sync_trans+0x108>)
    2882:	4b37      	ldr	r3, [pc, #220]	; (2960 <_spi_m_sync_trans+0x10c>)
    2884:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2886:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    2888:	075b      	lsls	r3, r3, #29
    288a:	d13f      	bne.n	290c <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    288c:	2303      	movs	r3, #3
    288e:	69e0      	ldr	r0, [r4, #28]
    2890:	4018      	ands	r0, r3
    2892:	d1fc      	bne.n	288e <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2894:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    2896:	079b      	lsls	r3, r3, #30
    2898:	d53b      	bpl.n	2912 <_spi_m_sync_trans+0xbe>
    289a:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    289c:	2301      	movs	r3, #1
    289e:	469c      	mov	ip, r3
    28a0:	e009      	b.n	28b6 <_spi_m_sync_trans+0x62>
    28a2:	2000      	movs	r0, #0
    28a4:	e7eb      	b.n	287e <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    28a6:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    28a8:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    28aa:	b25b      	sxtb	r3, r3
    28ac:	2b00      	cmp	r3, #0
    28ae:	db16      	blt.n	28de <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    28b0:	68b3      	ldr	r3, [r6, #8]
    28b2:	4283      	cmp	r3, r0
    28b4:	d927      	bls.n	2906 <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    28b6:	7e23      	ldrb	r3, [r4, #24]
    28b8:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    28ba:	2104      	movs	r1, #4
    28bc:	4219      	tst	r1, r3
    28be:	d02b      	beq.n	2918 <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    28c0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    28c2:	2d00      	cmp	r5, #0
    28c4:	d0f0      	beq.n	28a8 <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    28c6:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    28c8:	9901      	ldr	r1, [sp, #4]
    28ca:	2901      	cmp	r1, #1
    28cc:	d9eb      	bls.n	28a6 <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    28ce:	0a3f      	lsrs	r7, r7, #8
    28d0:	706f      	strb	r7, [r5, #1]
    28d2:	3502      	adds	r5, #2
    28d4:	e7e8      	b.n	28a8 <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    28d6:	2101      	movs	r1, #1
    28d8:	468b      	mov	fp, r1
    28da:	44d8      	add	r8, fp
    28dc:	e037      	b.n	294e <_spi_m_sync_trans+0xfa>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    28de:	2301      	movs	r3, #1
    28e0:	425b      	negs	r3, r3
    28e2:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    28e4:	3381      	adds	r3, #129	; 0x81
    28e6:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    28e8:	2013      	movs	r0, #19
    28ea:	4240      	negs	r0, r0
	tmp &= mask;
    28ec:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    28ee:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    28f0:	4213      	tst	r3, r2
    28f2:	d0fc      	beq.n	28ee <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    28f4:	2303      	movs	r3, #3
    28f6:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    28f8:	b003      	add	sp, #12
    28fa:	bc3c      	pop	{r2, r3, r4, r5}
    28fc:	4690      	mov	r8, r2
    28fe:	4699      	mov	r9, r3
    2900:	46a2      	mov	sl, r4
    2902:	46ab      	mov	fp, r5
    2904:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    2906:	4293      	cmp	r3, r2
    2908:	d8d5      	bhi.n	28b6 <_spi_m_sync_trans+0x62>
    290a:	e7ef      	b.n	28ec <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    290c:	2004      	movs	r0, #4
    290e:	4240      	negs	r0, r0
    2910:	e7f2      	b.n	28f8 <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    2912:	2014      	movs	r0, #20
    2914:	4240      	negs	r0, r0
    2916:	e7ef      	b.n	28f8 <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    2918:	4290      	cmp	r0, r2
    291a:	d8c6      	bhi.n	28aa <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    291c:	4667      	mov	r7, ip
    291e:	421f      	tst	r7, r3
    2920:	d0c3      	beq.n	28aa <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    2922:	464f      	mov	r7, r9
    2924:	88ff      	ldrh	r7, [r7, #6]
    2926:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    2928:	4647      	mov	r7, r8
    292a:	2f00      	cmp	r7, #0
    292c:	d00f      	beq.n	294e <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    292e:	783f      	ldrb	r7, [r7, #0]
    2930:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    2932:	9901      	ldr	r1, [sp, #4]
    2934:	2901      	cmp	r1, #1
    2936:	d9ce      	bls.n	28d6 <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    2938:	4647      	mov	r7, r8
    293a:	787f      	ldrb	r7, [r7, #1]
    293c:	023f      	lsls	r7, r7, #8
    293e:	46bb      	mov	fp, r7
    2940:	4657      	mov	r7, sl
    2942:	4659      	mov	r1, fp
    2944:	430f      	orrs	r7, r1
    2946:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    2948:	2102      	movs	r1, #2
    294a:	468b      	mov	fp, r1
    294c:	44d8      	add	r8, fp
	ctrl->txcnt++;
    294e:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    2950:	4657      	mov	r7, sl
    2952:	62a7      	str	r7, [r4, #40]	; 0x28
    2954:	e7a9      	b.n	28aa <_spi_m_sync_trans+0x56>
    2956:	46c0      	nop			; (mov r8, r8)
    2958:	00000a85 	.word	0x00000a85
    295c:	0000515c 	.word	0x0000515c
    2960:	000023dd 	.word	0x000023dd

00002964 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    2964:	4b12      	ldr	r3, [pc, #72]	; (29b0 <_sysctrl_init_sources+0x4c>)
    2966:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    2968:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    296a:	4812      	ldr	r0, [pc, #72]	; (29b4 <_sysctrl_init_sources+0x50>)
    296c:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    296e:	0f92      	lsrs	r2, r2, #30
    2970:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    2972:	2002      	movs	r0, #2
    2974:	4302      	orrs	r2, r0
    2976:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    2978:	621a      	str	r2, [r3, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    297a:	699a      	ldr	r2, [r3, #24]
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    297c:	21fe      	movs	r1, #254	; 0xfe
    297e:	03c9      	lsls	r1, r1, #15
    2980:	400a      	ands	r2, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    2982:	214a      	movs	r1, #74	; 0x4a
    2984:	430a      	orrs	r2, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
    2986:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    2988:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    298a:	392b      	subs	r1, #43	; 0x2b
    298c:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    298e:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    2990:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    2992:	2204      	movs	r2, #4
    2994:	68cb      	ldr	r3, [r1, #12]
    2996:	421a      	tst	r2, r3
    2998:	d0fc      	beq.n	2994 <_sysctrl_init_sources+0x30>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    299a:	4905      	ldr	r1, [pc, #20]	; (29b0 <_sysctrl_init_sources+0x4c>)
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    299c:	2208      	movs	r2, #8
    299e:	68cb      	ldr	r3, [r1, #12]
    29a0:	421a      	tst	r2, r3
    29a2:	d0fc      	beq.n	299e <_sysctrl_init_sources+0x3a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    29a4:	4a02      	ldr	r2, [pc, #8]	; (29b0 <_sysctrl_init_sources+0x4c>)
    29a6:	6a13      	ldr	r3, [r2, #32]
    29a8:	2180      	movs	r1, #128	; 0x80
    29aa:	430b      	orrs	r3, r1
    29ac:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    29ae:	4770      	bx	lr
    29b0:	40000800 	.word	0x40000800
    29b4:	0fff0000 	.word	0x0fff0000

000029b8 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    29b8:	2202      	movs	r2, #2
    29ba:	4b17      	ldr	r3, [pc, #92]	; (2a18 <_sysctrl_init_referenced_generators+0x60>)
    29bc:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    29be:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    29c0:	320e      	adds	r2, #14
    29c2:	68cb      	ldr	r3, [r1, #12]
    29c4:	421a      	tst	r2, r3
    29c6:	d0fc      	beq.n	29c2 <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    29c8:	4a14      	ldr	r2, [pc, #80]	; (2a1c <_sysctrl_init_referenced_generators+0x64>)
    29ca:	4b13      	ldr	r3, [pc, #76]	; (2a18 <_sysctrl_init_referenced_generators+0x60>)
    29cc:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    29ce:	4b14      	ldr	r3, [pc, #80]	; (2a20 <_sysctrl_init_referenced_generators+0x68>)
    29d0:	681b      	ldr	r3, [r3, #0]
    29d2:	0e9b      	lsrs	r3, r3, #26
    29d4:	2b3f      	cmp	r3, #63	; 0x3f
    29d6:	d015      	beq.n	2a04 <_sysctrl_init_referenced_generators+0x4c>
    29d8:	029b      	lsls	r3, r3, #10
    29da:	2280      	movs	r2, #128	; 0x80
    29dc:	0092      	lsls	r2, r2, #2
    29de:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    29e0:	4a0d      	ldr	r2, [pc, #52]	; (2a18 <_sysctrl_init_referenced_generators+0x60>)
    29e2:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    29e4:	2393      	movs	r3, #147	; 0x93
    29e6:	005b      	lsls	r3, r3, #1
    29e8:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    29ea:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    29ec:	075b      	lsls	r3, r3, #29
    29ee:	d50c      	bpl.n	2a0a <_sysctrl_init_referenced_generators+0x52>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    29f0:	0011      	movs	r1, r2
	tmp &= mask;
    29f2:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    29f4:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    29f6:	421a      	tst	r2, r3
    29f8:	d0fc      	beq.n	29f4 <_sysctrl_init_referenced_generators+0x3c>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    29fa:	4a0a      	ldr	r2, [pc, #40]	; (2a24 <_sysctrl_init_referenced_generators+0x6c>)
    29fc:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    29fe:	09db      	lsrs	r3, r3, #7
    2a00:	d1fc      	bne.n	29fc <_sysctrl_init_referenced_generators+0x44>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    2a02:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    2a04:	23fc      	movs	r3, #252	; 0xfc
    2a06:	01db      	lsls	r3, r3, #7
    2a08:	e7ea      	b.n	29e0 <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    2a0a:	4903      	ldr	r1, [pc, #12]	; (2a18 <_sysctrl_init_referenced_generators+0x60>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    2a0c:	2210      	movs	r2, #16
    2a0e:	68cb      	ldr	r3, [r1, #12]
    2a10:	421a      	tst	r2, r3
    2a12:	d0fc      	beq.n	2a0e <_sysctrl_init_referenced_generators+0x56>
    2a14:	e7f1      	b.n	29fa <_sysctrl_init_referenced_generators+0x42>
    2a16:	46c0      	nop			; (mov r8, r8)
    2a18:	40000800 	.word	0x40000800
    2a1c:	0401bb80 	.word	0x0401bb80
    2a20:	00806024 	.word	0x00806024
    2a24:	40000c00 	.word	0x40000c00

00002a28 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2a28:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    2a2a:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2a2c:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2a2e:	07d2      	lsls	r2, r2, #31
    2a30:	d400      	bmi.n	2a34 <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    2a32:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2a34:	2201      	movs	r2, #1
    2a36:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    2a38:	6803      	ldr	r3, [r0, #0]
    2a3a:	4798      	blx	r3
}
    2a3c:	e7f9      	b.n	2a32 <tc_interrupt_handler+0xa>
	...

00002a40 <_timer_init>:
{
    2a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a42:	0007      	movs	r7, r0
    2a44:	000c      	movs	r4, r1
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    2a46:	4b45      	ldr	r3, [pc, #276]	; (2b5c <_timer_init+0x11c>)
    2a48:	18cd      	adds	r5, r1, r3
    2a4a:	0aad      	lsrs	r5, r5, #10
    2a4c:	b2ed      	uxtb	r5, r5
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    2a4e:	1ceb      	adds	r3, r5, #3
    2a50:	b2db      	uxtb	r3, r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
    2a52:	2b03      	cmp	r3, #3
    2a54:	d05b      	beq.n	2b0e <_timer_init+0xce>
    2a56:	2601      	movs	r6, #1
    2a58:	2b04      	cmp	r3, #4
    2a5a:	d059      	beq.n	2b10 <_timer_init+0xd0>
			return i;
		}
	}

	ASSERT(false);
    2a5c:	22a4      	movs	r2, #164	; 0xa4
    2a5e:	0052      	lsls	r2, r2, #1
    2a60:	493f      	ldr	r1, [pc, #252]	; (2b60 <_timer_init+0x120>)
    2a62:	2000      	movs	r0, #0
    2a64:	4b3f      	ldr	r3, [pc, #252]	; (2b64 <_timer_init+0x124>)
    2a66:	4798      	blx	r3
	return -1;
    2a68:	2601      	movs	r6, #1
    2a6a:	4276      	negs	r6, r6
	device->hw = hw;
    2a6c:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2a6e:	228d      	movs	r2, #141	; 0x8d
    2a70:	493b      	ldr	r1, [pc, #236]	; (2b60 <_timer_init+0x120>)
    2a72:	2001      	movs	r0, #1
    2a74:	4b3b      	ldr	r3, [pc, #236]	; (2b64 <_timer_init+0x124>)
    2a76:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2a78:	7be3      	ldrb	r3, [r4, #15]
    2a7a:	09db      	lsrs	r3, r3, #7
    2a7c:	d1fc      	bne.n	2a78 <_timer_init+0x38>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2a7e:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2a80:	079b      	lsls	r3, r3, #30
    2a82:	d504      	bpl.n	2a8e <_timer_init+0x4e>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2a84:	2300      	movs	r3, #0
    2a86:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2a88:	7be3      	ldrb	r3, [r4, #15]
    2a8a:	09db      	lsrs	r3, r3, #7
    2a8c:	d1fc      	bne.n	2a88 <_timer_init+0x48>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2a8e:	2301      	movs	r3, #1
    2a90:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2a92:	7be3      	ldrb	r3, [r4, #15]
    2a94:	09db      	lsrs	r3, r3, #7
    2a96:	d1fc      	bne.n	2a92 <_timer_init+0x52>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2a98:	0031      	movs	r1, r6
    2a9a:	00b3      	lsls	r3, r6, #2
    2a9c:	199b      	adds	r3, r3, r6
    2a9e:	009a      	lsls	r2, r3, #2
    2aa0:	4b31      	ldr	r3, [pc, #196]	; (2b68 <_timer_init+0x128>)
    2aa2:	189b      	adds	r3, r3, r2
    2aa4:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2aa6:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2aa8:	7918      	ldrb	r0, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2aaa:	7220      	strb	r0, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2aac:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2aae:	8163      	strh	r3, [r4, #10]
    2ab0:	230c      	movs	r3, #12
    2ab2:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2ab4:	2b08      	cmp	r3, #8
    2ab6:	d02d      	beq.n	2b14 <_timer_init+0xd4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2ab8:	2b00      	cmp	r3, #0
    2aba:	d138      	bne.n	2b2e <_timer_init+0xee>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    2abc:	482a      	ldr	r0, [pc, #168]	; (2b68 <_timer_init+0x128>)
    2abe:	00b3      	lsls	r3, r6, #2
    2ac0:	199a      	adds	r2, r3, r6
    2ac2:	0092      	lsls	r2, r2, #2
    2ac4:	1882      	adds	r2, r0, r2
    2ac6:	8992      	ldrh	r2, [r2, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2ac8:	8322      	strh	r2, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    2aca:	199b      	adds	r3, r3, r6
    2acc:	009b      	lsls	r3, r3, #2
    2ace:	18c3      	adds	r3, r0, r3
    2ad0:	8a1b      	ldrh	r3, [r3, #16]
    2ad2:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    2ad4:	2301      	movs	r3, #1
    2ad6:	7363      	strb	r3, [r4, #13]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    2ad8:	4b24      	ldr	r3, [pc, #144]	; (2b6c <_timer_init+0x12c>)
    2ada:	429c      	cmp	r4, r3
    2adc:	d038      	beq.n	2b50 <_timer_init+0x110>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    2ade:	4b24      	ldr	r3, [pc, #144]	; (2b70 <_timer_init+0x130>)
    2ae0:	429c      	cmp	r4, r3
    2ae2:	d038      	beq.n	2b56 <_timer_init+0x116>
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    2ae4:	3512      	adds	r5, #18
  if ((int32_t)(IRQn) >= 0)
    2ae6:	b2eb      	uxtb	r3, r5
    2ae8:	062a      	lsls	r2, r5, #24
    2aea:	d40e      	bmi.n	2b0a <_timer_init+0xca>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2aec:	221f      	movs	r2, #31
    2aee:	401a      	ands	r2, r3
    2af0:	2301      	movs	r3, #1
    2af2:	4093      	lsls	r3, r2
    2af4:	4a1f      	ldr	r2, [pc, #124]	; (2b74 <_timer_init+0x134>)
    2af6:	2180      	movs	r1, #128	; 0x80
    2af8:	5053      	str	r3, [r2, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2afa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2afe:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b02:	3101      	adds	r1, #1
    2b04:	31ff      	adds	r1, #255	; 0xff
    2b06:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b08:	6013      	str	r3, [r2, #0]
}
    2b0a:	2000      	movs	r0, #0
    2b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2b0e:	2600      	movs	r6, #0
			return i;
    2b10:	b276      	sxtb	r6, r6
    2b12:	e7ab      	b.n	2a6c <_timer_init+0x2c>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2b14:	4914      	ldr	r1, [pc, #80]	; (2b68 <_timer_init+0x128>)
    2b16:	00b3      	lsls	r3, r6, #2
    2b18:	199a      	adds	r2, r3, r6
    2b1a:	0092      	lsls	r2, r2, #2
    2b1c:	188a      	adds	r2, r1, r2
    2b1e:	68d2      	ldr	r2, [r2, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2b20:	61a2      	str	r2, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2b22:	199b      	adds	r3, r3, r6
    2b24:	009b      	lsls	r3, r3, #2
    2b26:	18cb      	adds	r3, r1, r3
    2b28:	691b      	ldr	r3, [r3, #16]
    2b2a:	61e3      	str	r3, [r4, #28]
    2b2c:	e7d2      	b.n	2ad4 <_timer_init+0x94>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2b2e:	2b04      	cmp	r3, #4
    2b30:	d1d0      	bne.n	2ad4 <_timer_init+0x94>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    2b32:	480d      	ldr	r0, [pc, #52]	; (2b68 <_timer_init+0x128>)
    2b34:	00b3      	lsls	r3, r6, #2
    2b36:	199a      	adds	r2, r3, r6
    2b38:	0092      	lsls	r2, r2, #2
    2b3a:	1882      	adds	r2, r0, r2
    2b3c:	7b16      	ldrb	r6, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2b3e:	7626      	strb	r6, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    2b40:	7c12      	ldrb	r2, [r2, #16]
    2b42:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2b44:	185b      	adds	r3, r3, r1
    2b46:	009b      	lsls	r3, r3, #2
    2b48:	18c3      	adds	r3, r0, r3
    2b4a:	7a1b      	ldrb	r3, [r3, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2b4c:	7523      	strb	r3, [r4, #20]
    2b4e:	e7c1      	b.n	2ad4 <_timer_init+0x94>
		_tc3_dev = (struct _timer_device *)dev;
    2b50:	4b09      	ldr	r3, [pc, #36]	; (2b78 <_timer_init+0x138>)
    2b52:	601f      	str	r7, [r3, #0]
    2b54:	e7c6      	b.n	2ae4 <_timer_init+0xa4>
		_tc4_dev = (struct _timer_device *)dev;
    2b56:	4b08      	ldr	r3, [pc, #32]	; (2b78 <_timer_init+0x138>)
    2b58:	605f      	str	r7, [r3, #4]
    2b5a:	e7c3      	b.n	2ae4 <_timer_init+0xa4>
    2b5c:	bdffd400 	.word	0xbdffd400
    2b60:	000051a0 	.word	0x000051a0
    2b64:	000023dd 	.word	0x000023dd
    2b68:	00005178 	.word	0x00005178
    2b6c:	42002c00 	.word	0x42002c00
    2b70:	42003000 	.word	0x42003000
    2b74:	e000e100 	.word	0xe000e100
    2b78:	200006b4 	.word	0x200006b4

00002b7c <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2b7c:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    2b7e:	8813      	ldrh	r3, [r2, #0]
    2b80:	2102      	movs	r1, #2
    2b82:	430b      	orrs	r3, r1
    2b84:	8013      	strh	r3, [r2, #0]
}
    2b86:	4770      	bx	lr

00002b88 <_timer_stop>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    2b88:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2b8a:	8813      	ldrh	r3, [r2, #0]
    2b8c:	2102      	movs	r1, #2
    2b8e:	438b      	bics	r3, r1
    2b90:	8013      	strh	r3, [r2, #0]
}
    2b92:	4770      	bx	lr

00002b94 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2b94:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2b96:	8818      	ldrh	r0, [r3, #0]
	return (bool)tmp;
    2b98:	0780      	lsls	r0, r0, #30
    2b9a:	0fc0      	lsrs	r0, r0, #31
}
    2b9c:	4770      	bx	lr

00002b9e <_tc_get_timer>:
}
    2b9e:	2000      	movs	r0, #0
    2ba0:	4770      	bx	lr
	...

00002ba4 <_timer_set_irq>:
{
    2ba4:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    2ba6:	68c0      	ldr	r0, [r0, #12]
    2ba8:	4b04      	ldr	r3, [pc, #16]	; (2bbc <_timer_set_irq+0x18>)
    2baa:	469c      	mov	ip, r3
    2bac:	4460      	add	r0, ip
    2bae:	0a80      	lsrs	r0, r0, #10
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    2bb0:	3012      	adds	r0, #18
    2bb2:	b2c0      	uxtb	r0, r0
    2bb4:	4b02      	ldr	r3, [pc, #8]	; (2bc0 <_timer_set_irq+0x1c>)
    2bb6:	4798      	blx	r3
}
    2bb8:	bd10      	pop	{r4, pc}
    2bba:	46c0      	nop			; (mov r8, r8)
    2bbc:	bdffd400 	.word	0xbdffd400
    2bc0:	000024cd 	.word	0x000024cd

00002bc4 <TC3_Handler>:
{
    2bc4:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
    2bc6:	4b02      	ldr	r3, [pc, #8]	; (2bd0 <TC3_Handler+0xc>)
    2bc8:	6818      	ldr	r0, [r3, #0]
    2bca:	4b02      	ldr	r3, [pc, #8]	; (2bd4 <TC3_Handler+0x10>)
    2bcc:	4798      	blx	r3
}
    2bce:	bd10      	pop	{r4, pc}
    2bd0:	200006b4 	.word	0x200006b4
    2bd4:	00002a29 	.word	0x00002a29

00002bd8 <TC4_Handler>:
{
    2bd8:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    2bda:	4b02      	ldr	r3, [pc, #8]	; (2be4 <TC4_Handler+0xc>)
    2bdc:	6858      	ldr	r0, [r3, #4]
    2bde:	4b02      	ldr	r3, [pc, #8]	; (2be8 <TC4_Handler+0x10>)
    2be0:	4798      	blx	r3
}
    2be2:	bd10      	pop	{r4, pc}
    2be4:	200006b4 	.word	0x200006b4
    2be8:	00002a29 	.word	0x00002a29

00002bec <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    2bec:	2000      	movs	r0, #0
    2bee:	4770      	bx	lr

00002bf0 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    2bf0:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    2bf2:	7c83      	ldrb	r3, [r0, #18]
    2bf4:	220f      	movs	r2, #15
    2bf6:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2bf8:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    2bfa:	3a08      	subs	r2, #8
    2bfc:	400a      	ands	r2, r1
    2bfe:	2a01      	cmp	r2, #1
    2c00:	d00b      	beq.n	2c1a <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2c02:	015a      	lsls	r2, r3, #5
    2c04:	491a      	ldr	r1, [pc, #104]	; (2c70 <_usb_d_dev_handle_setup+0x80>)
    2c06:	468c      	mov	ip, r1
    2c08:	4462      	add	r2, ip
    2c0a:	2110      	movs	r1, #16
    2c0c:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2c0e:	015b      	lsls	r3, r3, #5
    2c10:	4a18      	ldr	r2, [pc, #96]	; (2c74 <_usb_d_dev_handle_setup+0x84>)
    2c12:	4694      	mov	ip, r2
    2c14:	4463      	add	r3, ip
    2c16:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    2c18:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    2c1a:	064a      	lsls	r2, r1, #25
    2c1c:	d50e      	bpl.n	2c3c <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    2c1e:	7cc2      	ldrb	r2, [r0, #19]
    2c20:	2140      	movs	r1, #64	; 0x40
    2c22:	438a      	bics	r2, r1
    2c24:	74c2      	strb	r2, [r0, #19]
    2c26:	015a      	lsls	r2, r3, #5
    2c28:	4c13      	ldr	r4, [pc, #76]	; (2c78 <_usb_d_dev_handle_setup+0x88>)
    2c2a:	46a4      	mov	ip, r4
    2c2c:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2c2e:	2580      	movs	r5, #128	; 0x80
    2c30:	2482      	movs	r4, #130	; 0x82
    2c32:	0064      	lsls	r4, r4, #1
    2c34:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2c36:	2406      	movs	r4, #6
    2c38:	34ff      	adds	r4, #255	; 0xff
    2c3a:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    2c3c:	7cc2      	ldrb	r2, [r0, #19]
    2c3e:	2108      	movs	r1, #8
    2c40:	438a      	bics	r2, r1
    2c42:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    2c44:	015a      	lsls	r2, r3, #5
    2c46:	490d      	ldr	r1, [pc, #52]	; (2c7c <_usb_d_dev_handle_setup+0x8c>)
    2c48:	1889      	adds	r1, r1, r2
    2c4a:	2400      	movs	r4, #0
    2c4c:	728c      	strb	r4, [r1, #10]
    2c4e:	768c      	strb	r4, [r1, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2c50:	0013      	movs	r3, r2
    2c52:	4907      	ldr	r1, [pc, #28]	; (2c70 <_usb_d_dev_handle_setup+0x80>)
    2c54:	468c      	mov	ip, r1
    2c56:	4463      	add	r3, ip
    2c58:	216f      	movs	r1, #111	; 0x6f
    2c5a:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2c5c:	4b05      	ldr	r3, [pc, #20]	; (2c74 <_usb_d_dev_handle_setup+0x84>)
    2c5e:	469c      	mov	ip, r3
    2c60:	4462      	add	r2, ip
    2c62:	7011      	strb	r1, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    2c64:	7c80      	ldrb	r0, [r0, #18]
    2c66:	4b06      	ldr	r3, [pc, #24]	; (2c80 <_usb_d_dev_handle_setup+0x90>)
    2c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2c6a:	4798      	blx	r3
    2c6c:	e7d4      	b.n	2c18 <_usb_d_dev_handle_setup+0x28>
    2c6e:	46c0      	nop			; (mov r8, r8)
    2c70:	41005100 	.word	0x41005100
    2c74:	41005108 	.word	0x41005108
    2c78:	41005000 	.word	0x41005000
    2c7c:	200006bc 	.word	0x200006bc
    2c80:	2000073c 	.word	0x2000073c

00002c84 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    2c84:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    2c86:	2220      	movs	r2, #32
    2c88:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    2c8a:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2c8c:	7c81      	ldrb	r1, [r0, #18]
    2c8e:	230f      	movs	r3, #15
    2c90:	400b      	ands	r3, r1
    2c92:	015b      	lsls	r3, r3, #5
    2c94:	4905      	ldr	r1, [pc, #20]	; (2cac <_usb_d_dev_handle_stall+0x28>)
    2c96:	468c      	mov	ip, r1
    2c98:	4463      	add	r3, ip
    2c9a:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    2c9c:	6882      	ldr	r2, [r0, #8]
    2c9e:	7c80      	ldrb	r0, [r0, #18]
    2ca0:	4b03      	ldr	r3, [pc, #12]	; (2cb0 <_usb_d_dev_handle_stall+0x2c>)
    2ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2ca4:	2101      	movs	r1, #1
    2ca6:	4798      	blx	r3
}
    2ca8:	bd10      	pop	{r4, pc}
    2caa:	46c0      	nop			; (mov r8, r8)
    2cac:	41005108 	.word	0x41005108
    2cb0:	2000073c 	.word	0x2000073c

00002cb4 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    2cb4:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2cb6:	7c83      	ldrb	r3, [r0, #18]
    2cb8:	2bff      	cmp	r3, #255	; 0xff
    2cba:	d002      	beq.n	2cc2 <_usb_d_dev_trans_done+0xe>
    2cbc:	7cc2      	ldrb	r2, [r0, #19]
    2cbe:	0652      	lsls	r2, r2, #25
    2cc0:	d400      	bmi.n	2cc4 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    2cc2:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    2cc4:	7cc2      	ldrb	r2, [r0, #19]
    2cc6:	2440      	movs	r4, #64	; 0x40
    2cc8:	43a2      	bics	r2, r4
    2cca:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    2ccc:	6882      	ldr	r2, [r0, #8]
    2cce:	4802      	ldr	r0, [pc, #8]	; (2cd8 <_usb_d_dev_trans_done+0x24>)
    2cd0:	6b04      	ldr	r4, [r0, #48]	; 0x30
    2cd2:	0018      	movs	r0, r3
    2cd4:	47a0      	blx	r4
    2cd6:	e7f4      	b.n	2cc2 <_usb_d_dev_trans_done+0xe>
    2cd8:	2000073c 	.word	0x2000073c

00002cdc <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    2cdc:	b530      	push	{r4, r5, lr}
    2cde:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2ce0:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    2ce2:	ac01      	add	r4, sp, #4
    2ce4:	2525      	movs	r5, #37	; 0x25
    2ce6:	7025      	strb	r5, [r4, #0]
    2ce8:	3525      	adds	r5, #37	; 0x25
    2cea:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2cec:	2bff      	cmp	r3, #255	; 0xff
    2cee:	d01b      	beq.n	2d28 <_usb_d_dev_trans_stop+0x4c>
    2cf0:	7cc4      	ldrb	r4, [r0, #19]
    2cf2:	0664      	lsls	r4, r4, #25
    2cf4:	d518      	bpl.n	2d28 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2cf6:	240f      	movs	r4, #15
    2cf8:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    2cfa:	2900      	cmp	r1, #0
    2cfc:	d016      	beq.n	2d2c <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2cfe:	015c      	lsls	r4, r3, #5
    2d00:	4d0e      	ldr	r5, [pc, #56]	; (2d3c <_usb_d_dev_trans_stop+0x60>)
    2d02:	46ac      	mov	ip, r5
    2d04:	4464      	add	r4, ip
    2d06:	2580      	movs	r5, #128	; 0x80
    2d08:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    2d0a:	ac01      	add	r4, sp, #4
    2d0c:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2d0e:	0159      	lsls	r1, r3, #5
    2d10:	4d0a      	ldr	r5, [pc, #40]	; (2d3c <_usb_d_dev_trans_stop+0x60>)
    2d12:	46ac      	mov	ip, r5
    2d14:	4461      	add	r1, ip
    2d16:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2d18:	015b      	lsls	r3, r3, #5
    2d1a:	4909      	ldr	r1, [pc, #36]	; (2d40 <_usb_d_dev_trans_stop+0x64>)
    2d1c:	468c      	mov	ip, r1
    2d1e:	4463      	add	r3, ip
    2d20:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    2d22:	0011      	movs	r1, r2
    2d24:	4b07      	ldr	r3, [pc, #28]	; (2d44 <_usb_d_dev_trans_stop+0x68>)
    2d26:	4798      	blx	r3
}
    2d28:	b003      	add	sp, #12
    2d2a:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2d2c:	015c      	lsls	r4, r3, #5
    2d2e:	4d03      	ldr	r5, [pc, #12]	; (2d3c <_usb_d_dev_trans_stop+0x60>)
    2d30:	46ac      	mov	ip, r5
    2d32:	4464      	add	r4, ip
    2d34:	2540      	movs	r5, #64	; 0x40
    2d36:	7165      	strb	r5, [r4, #5]
    2d38:	e7e7      	b.n	2d0a <_usb_d_dev_trans_stop+0x2e>
    2d3a:	46c0      	nop			; (mov r8, r8)
    2d3c:	41005100 	.word	0x41005100
    2d40:	41005108 	.word	0x41005108
    2d44:	00002cb5 	.word	0x00002cb5

00002d48 <_usb_d_dev_handle_trfail>:
{
    2d48:	b570      	push	{r4, r5, r6, lr}
    2d4a:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    2d4c:	7c83      	ldrb	r3, [r0, #18]
    2d4e:	220f      	movs	r2, #15
    2d50:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    2d52:	aa01      	add	r2, sp, #4
    2d54:	2404      	movs	r4, #4
    2d56:	7014      	strb	r4, [r2, #0]
    2d58:	3404      	adds	r4, #4
    2d5a:	7054      	strb	r4, [r2, #1]
    2d5c:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    2d5e:	2900      	cmp	r1, #0
    2d60:	d031      	beq.n	2dc6 <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2d62:	001a      	movs	r2, r3
    2d64:	3208      	adds	r2, #8
    2d66:	0152      	lsls	r2, r2, #5
    2d68:	4c32      	ldr	r4, [pc, #200]	; (2e34 <_usb_d_dev_handle_trfail+0xec>)
    2d6a:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    2d6c:	0664      	lsls	r4, r4, #25
    2d6e:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    2d70:	010a      	lsls	r2, r1, #4
    2d72:	1952      	adds	r2, r2, r5
    2d74:	4d30      	ldr	r5, [pc, #192]	; (2e38 <_usb_d_dev_handle_trfail+0xf0>)
    2d76:	18aa      	adds	r2, r5, r2
    2d78:	7a95      	ldrb	r5, [r2, #10]
    2d7a:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2d7c:	2c02      	cmp	r4, #2
    2d7e:	d02a      	beq.n	2dd6 <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    2d80:	07ac      	lsls	r4, r5, #30
    2d82:	d541      	bpl.n	2e08 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2d84:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    2d86:	7a94      	ldrb	r4, [r2, #10]
    2d88:	2602      	movs	r6, #2
    2d8a:	43b4      	bics	r4, r6
    2d8c:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2d8e:	aa01      	add	r2, sp, #4
    2d90:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2d92:	015a      	lsls	r2, r3, #5
    2d94:	4e29      	ldr	r6, [pc, #164]	; (2e3c <_usb_d_dev_handle_trfail+0xf4>)
    2d96:	46b4      	mov	ip, r6
    2d98:	4462      	add	r2, ip
    2d9a:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2d9c:	015b      	lsls	r3, r3, #5
    2d9e:	4a28      	ldr	r2, [pc, #160]	; (2e40 <_usb_d_dev_handle_trfail+0xf8>)
    2da0:	4694      	mov	ip, r2
    2da2:	4463      	add	r3, ip
    2da4:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    2da6:	2307      	movs	r3, #7
    2da8:	402b      	ands	r3, r5
    2daa:	2b01      	cmp	r3, #1
    2dac:	d13f      	bne.n	2e2e <_usb_d_dev_handle_trfail+0xe6>
    2dae:	7cc3      	ldrb	r3, [r0, #19]
    2db0:	065b      	lsls	r3, r3, #25
    2db2:	d53c      	bpl.n	2e2e <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    2db4:	7cc3      	ldrb	r3, [r0, #19]
    2db6:	09db      	lsrs	r3, r3, #7
    2db8:	4299      	cmp	r1, r3
    2dba:	d038      	beq.n	2e2e <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    2dbc:	2200      	movs	r2, #0
    2dbe:	0019      	movs	r1, r3
    2dc0:	4b20      	ldr	r3, [pc, #128]	; (2e44 <_usb_d_dev_handle_trfail+0xfc>)
    2dc2:	4798      	blx	r3
    2dc4:	e033      	b.n	2e2e <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2dc6:	001a      	movs	r2, r3
    2dc8:	3208      	adds	r2, #8
    2dca:	0152      	lsls	r2, r2, #5
    2dcc:	4c19      	ldr	r4, [pc, #100]	; (2e34 <_usb_d_dev_handle_trfail+0xec>)
    2dce:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    2dd0:	2207      	movs	r2, #7
    2dd2:	4014      	ands	r4, r2
    2dd4:	e7cc      	b.n	2d70 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2dd6:	07ec      	lsls	r4, r5, #31
    2dd8:	d5d2      	bpl.n	2d80 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    2dda:	7a94      	ldrb	r4, [r2, #10]
    2ddc:	2501      	movs	r5, #1
    2dde:	43ac      	bics	r4, r5
    2de0:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2de2:	aa01      	add	r2, sp, #4
    2de4:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2de6:	015a      	lsls	r2, r3, #5
    2de8:	4d14      	ldr	r5, [pc, #80]	; (2e3c <_usb_d_dev_handle_trfail+0xf4>)
    2dea:	46ac      	mov	ip, r5
    2dec:	4462      	add	r2, ip
    2dee:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2df0:	015b      	lsls	r3, r3, #5
    2df2:	4a13      	ldr	r2, [pc, #76]	; (2e40 <_usb_d_dev_handle_trfail+0xf8>)
    2df4:	4694      	mov	ip, r2
    2df6:	4463      	add	r3, ip
    2df8:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    2dfa:	1e4b      	subs	r3, r1, #1
    2dfc:	4199      	sbcs	r1, r3
    2dfe:	b2c9      	uxtb	r1, r1
    2e00:	2204      	movs	r2, #4
    2e02:	4b10      	ldr	r3, [pc, #64]	; (2e44 <_usb_d_dev_handle_trfail+0xfc>)
    2e04:	4798      	blx	r3
    2e06:	e012      	b.n	2e2e <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    2e08:	005a      	lsls	r2, r3, #1
    2e0a:	1852      	adds	r2, r2, r1
    2e0c:	0112      	lsls	r2, r2, #4
    2e0e:	480a      	ldr	r0, [pc, #40]	; (2e38 <_usb_d_dev_handle_trfail+0xf0>)
    2e10:	1882      	adds	r2, r0, r2
    2e12:	2000      	movs	r0, #0
    2e14:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2e16:	aa01      	add	r2, sp, #4
    2e18:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2e1a:	015a      	lsls	r2, r3, #5
    2e1c:	4807      	ldr	r0, [pc, #28]	; (2e3c <_usb_d_dev_handle_trfail+0xf4>)
    2e1e:	4684      	mov	ip, r0
    2e20:	4462      	add	r2, ip
    2e22:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2e24:	015b      	lsls	r3, r3, #5
    2e26:	4a06      	ldr	r2, [pc, #24]	; (2e40 <_usb_d_dev_handle_trfail+0xf8>)
    2e28:	4694      	mov	ip, r2
    2e2a:	4463      	add	r3, ip
    2e2c:	7019      	strb	r1, [r3, #0]
}
    2e2e:	b002      	add	sp, #8
    2e30:	bd70      	pop	{r4, r5, r6, pc}
    2e32:	46c0      	nop			; (mov r8, r8)
    2e34:	41005000 	.word	0x41005000
    2e38:	200006bc 	.word	0x200006bc
    2e3c:	41005100 	.word	0x41005100
    2e40:	41005108 	.word	0x41005108
    2e44:	00002cdd 	.word	0x00002cdd

00002e48 <_usb_d_dev_reset_epts>:
{
    2e48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e4a:	46c6      	mov	lr, r8
    2e4c:	b500      	push	{lr}
    2e4e:	4d0c      	ldr	r5, [pc, #48]	; (2e80 <_usb_d_dev_reset_epts+0x38>)
    2e50:	002c      	movs	r4, r5
    2e52:	3434      	adds	r4, #52	; 0x34
    2e54:	35e8      	adds	r5, #232	; 0xe8
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2e56:	4b0b      	ldr	r3, [pc, #44]	; (2e84 <_usb_d_dev_reset_epts+0x3c>)
    2e58:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    2e5a:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    2e5c:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2e5e:	2103      	movs	r1, #3
    2e60:	0020      	movs	r0, r4
    2e62:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    2e64:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    2e66:	74e6      	strb	r6, [r4, #19]
    2e68:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2e6a:	42ac      	cmp	r4, r5
    2e6c:	d1f7      	bne.n	2e5e <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    2e6e:	22a0      	movs	r2, #160	; 0xa0
    2e70:	2100      	movs	r1, #0
    2e72:	4805      	ldr	r0, [pc, #20]	; (2e88 <_usb_d_dev_reset_epts+0x40>)
    2e74:	4b05      	ldr	r3, [pc, #20]	; (2e8c <_usb_d_dev_reset_epts+0x44>)
    2e76:	4798      	blx	r3
}
    2e78:	bc04      	pop	{r2}
    2e7a:	4690      	mov	r8, r2
    2e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e7e:	46c0      	nop			; (mov r8, r8)
    2e80:	2000073c 	.word	0x2000073c
    2e84:	00002cb5 	.word	0x00002cb5
    2e88:	200006bc 	.word	0x200006bc
    2e8c:	00004db1 	.word	0x00004db1

00002e90 <_usb_d_dev_in_next>:
{
    2e90:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e92:	46c6      	mov	lr, r8
    2e94:	b500      	push	{lr}
    2e96:	0004      	movs	r4, r0
    2e98:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    2e9a:	7c83      	ldrb	r3, [r0, #18]
    2e9c:	250f      	movs	r5, #15
    2e9e:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2ea0:	2900      	cmp	r1, #0
    2ea2:	d100      	bne.n	2ea6 <_usb_d_dev_in_next+0x16>
    2ea4:	e0aa      	b.n	2ffc <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    2ea6:	016a      	lsls	r2, r5, #5
    2ea8:	4b5a      	ldr	r3, [pc, #360]	; (3014 <_usb_d_dev_in_next+0x184>)
    2eaa:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2eac:	6958      	ldr	r0, [r3, #20]
    2eae:	0480      	lsls	r0, r0, #18
    2eb0:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2eb2:	8a23      	ldrh	r3, [r4, #16]
    2eb4:	4a58      	ldr	r2, [pc, #352]	; (3018 <_usb_d_dev_in_next+0x188>)
    2eb6:	4293      	cmp	r3, r2
    2eb8:	d100      	bne.n	2ebc <_usb_d_dev_in_next+0x2c>
    2eba:	e09a      	b.n	2ff2 <_usb_d_dev_in_next+0x162>
    2ebc:	3b01      	subs	r3, #1
    2ebe:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2ec0:	7ce3      	ldrb	r3, [r4, #19]
    2ec2:	2707      	movs	r7, #7
    2ec4:	401f      	ands	r7, r3
	if (isr) {
    2ec6:	2e00      	cmp	r6, #0
    2ec8:	d005      	beq.n	2ed6 <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2eca:	016b      	lsls	r3, r5, #5
    2ecc:	4953      	ldr	r1, [pc, #332]	; (301c <_usb_d_dev_in_next+0x18c>)
    2ece:	468c      	mov	ip, r1
    2ed0:	4463      	add	r3, ip
    2ed2:	2102      	movs	r1, #2
    2ed4:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    2ed6:	68a3      	ldr	r3, [r4, #8]
    2ed8:	18c1      	adds	r1, r0, r3
    2eda:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    2edc:	6863      	ldr	r3, [r4, #4]
    2ede:	4299      	cmp	r1, r3
    2ee0:	d24a      	bcs.n	2f78 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    2ee2:	1a5b      	subs	r3, r3, r1
    2ee4:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    2ee6:	7ce2      	ldrb	r2, [r4, #19]
    2ee8:	0692      	lsls	r2, r2, #26
    2eea:	d535      	bpl.n	2f58 <_usb_d_dev_in_next+0xc8>
    2eec:	8a22      	ldrh	r2, [r4, #16]
    2eee:	1c10      	adds	r0, r2, #0
    2ef0:	b292      	uxth	r2, r2
    2ef2:	429a      	cmp	r2, r3
    2ef4:	d900      	bls.n	2ef8 <_usb_d_dev_in_next+0x68>
    2ef6:	1c18      	adds	r0, r3, #0
    2ef8:	b283      	uxth	r3, r0
    2efa:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    2efc:	6823      	ldr	r3, [r4, #0]
    2efe:	469c      	mov	ip, r3
    2f00:	4461      	add	r1, ip
    2f02:	4642      	mov	r2, r8
    2f04:	68e0      	ldr	r0, [r4, #12]
    2f06:	4b46      	ldr	r3, [pc, #280]	; (3020 <_usb_d_dev_in_next+0x190>)
    2f08:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    2f0a:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    2f0c:	016a      	lsls	r2, r5, #5
    2f0e:	4b41      	ldr	r3, [pc, #260]	; (3014 <_usb_d_dev_in_next+0x184>)
    2f10:	189b      	adds	r3, r3, r2
    2f12:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2f14:	016a      	lsls	r2, r5, #5
    2f16:	4b3f      	ldr	r3, [pc, #252]	; (3014 <_usb_d_dev_in_next+0x184>)
    2f18:	189b      	adds	r3, r3, r2
    2f1a:	695a      	ldr	r2, [r3, #20]
    2f1c:	4641      	mov	r1, r8
    2f1e:	0489      	lsls	r1, r1, #18
    2f20:	0c89      	lsrs	r1, r1, #18
    2f22:	0b92      	lsrs	r2, r2, #14
    2f24:	0392      	lsls	r2, r2, #14
    2f26:	430a      	orrs	r2, r1
    2f28:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2f2a:	695a      	ldr	r2, [r3, #20]
    2f2c:	493d      	ldr	r1, [pc, #244]	; (3024 <_usb_d_dev_in_next+0x194>)
    2f2e:	400a      	ands	r2, r1
    2f30:	615a      	str	r2, [r3, #20]
	if (!isr) {
    2f32:	2e00      	cmp	r6, #0
    2f34:	d107      	bne.n	2f46 <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    2f36:	2f01      	cmp	r7, #1
    2f38:	d059      	beq.n	2fee <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    2f3a:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2f3c:	016b      	lsls	r3, r5, #5
    2f3e:	493a      	ldr	r1, [pc, #232]	; (3028 <_usb_d_dev_in_next+0x198>)
    2f40:	468c      	mov	ip, r1
    2f42:	4463      	add	r3, ip
    2f44:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2f46:	016d      	lsls	r5, r5, #5
    2f48:	4b34      	ldr	r3, [pc, #208]	; (301c <_usb_d_dev_in_next+0x18c>)
    2f4a:	469c      	mov	ip, r3
    2f4c:	4465      	add	r5, ip
    2f4e:	2380      	movs	r3, #128	; 0x80
    2f50:	716b      	strb	r3, [r5, #5]
}
    2f52:	bc04      	pop	{r2}
    2f54:	4690      	mov	r8, r2
    2f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f58:	1c1a      	adds	r2, r3, #0
    2f5a:	2080      	movs	r0, #128	; 0x80
    2f5c:	0180      	lsls	r0, r0, #6
    2f5e:	4283      	cmp	r3, r0
    2f60:	d901      	bls.n	2f66 <_usb_d_dev_in_next+0xd6>
    2f62:	4b32      	ldr	r3, [pc, #200]	; (302c <_usb_d_dev_in_next+0x19c>)
    2f64:	881a      	ldrh	r2, [r3, #0]
    2f66:	b293      	uxth	r3, r2
    2f68:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2f6a:	6823      	ldr	r3, [r4, #0]
    2f6c:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    2f6e:	016a      	lsls	r2, r5, #5
    2f70:	4b28      	ldr	r3, [pc, #160]	; (3014 <_usb_d_dev_in_next+0x184>)
    2f72:	189b      	adds	r3, r3, r2
    2f74:	6119      	str	r1, [r3, #16]
    2f76:	e7cd      	b.n	2f14 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    2f78:	7ce3      	ldrb	r3, [r4, #19]
    2f7a:	06db      	lsls	r3, r3, #27
    2f7c:	d50f      	bpl.n	2f9e <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    2f7e:	7ce3      	ldrb	r3, [r4, #19]
    2f80:	2210      	movs	r2, #16
    2f82:	4393      	bics	r3, r2
    2f84:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2f86:	016a      	lsls	r2, r5, #5
    2f88:	4b22      	ldr	r3, [pc, #136]	; (3014 <_usb_d_dev_in_next+0x184>)
    2f8a:	189b      	adds	r3, r3, r2
    2f8c:	695a      	ldr	r2, [r3, #20]
    2f8e:	0b92      	lsrs	r2, r2, #14
    2f90:	0392      	lsls	r2, r2, #14
    2f92:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2f94:	695a      	ldr	r2, [r3, #20]
    2f96:	4923      	ldr	r1, [pc, #140]	; (3024 <_usb_d_dev_in_next+0x194>)
    2f98:	400a      	ands	r2, r1
    2f9a:	615a      	str	r2, [r3, #20]
    2f9c:	e7c9      	b.n	2f32 <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    2f9e:	2f01      	cmp	r7, #1
    2fa0:	d00e      	beq.n	2fc0 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2fa2:	016d      	lsls	r5, r5, #5
    2fa4:	4b22      	ldr	r3, [pc, #136]	; (3030 <_usb_d_dev_in_next+0x1a0>)
    2fa6:	469c      	mov	ip, r3
    2fa8:	4465      	add	r5, ip
    2faa:	234a      	movs	r3, #74	; 0x4a
    2fac:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    2fae:	8a21      	ldrh	r1, [r4, #16]
    2fb0:	4002      	ands	r2, r0
    2fb2:	4291      	cmp	r1, r2
    2fb4:	d00b      	beq.n	2fce <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2fb6:	2100      	movs	r1, #0
    2fb8:	0020      	movs	r0, r4
    2fba:	4b1e      	ldr	r3, [pc, #120]	; (3034 <_usb_d_dev_in_next+0x1a4>)
    2fbc:	4798      	blx	r3
	return;
    2fbe:	e7c8      	b.n	2f52 <_usb_d_dev_in_next+0xc2>
    2fc0:	016d      	lsls	r5, r5, #5
    2fc2:	4b1b      	ldr	r3, [pc, #108]	; (3030 <_usb_d_dev_in_next+0x1a0>)
    2fc4:	469c      	mov	ip, r3
    2fc6:	4465      	add	r5, ip
    2fc8:	234b      	movs	r3, #75	; 0x4b
    2fca:	702b      	strb	r3, [r5, #0]
    2fcc:	e7ef      	b.n	2fae <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    2fce:	7ce3      	ldrb	r3, [r4, #19]
    2fd0:	2240      	movs	r2, #64	; 0x40
    2fd2:	4393      	bics	r3, r2
    2fd4:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    2fd6:	7ca0      	ldrb	r0, [r4, #18]
    2fd8:	4b17      	ldr	r3, [pc, #92]	; (3038 <_usb_d_dev_in_next+0x1a8>)
    2fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2fdc:	68a1      	ldr	r1, [r4, #8]
    2fde:	4798      	blx	r3
    2fe0:	2800      	cmp	r0, #0
    2fe2:	d1b6      	bne.n	2f52 <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    2fe4:	7ce3      	ldrb	r3, [r4, #19]
    2fe6:	2240      	movs	r2, #64	; 0x40
    2fe8:	4313      	orrs	r3, r2
    2fea:	74e3      	strb	r3, [r4, #19]
    2fec:	e7e3      	b.n	2fb6 <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    2fee:	224e      	movs	r2, #78	; 0x4e
    2ff0:	e7a4      	b.n	2f3c <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2ff2:	7ce7      	ldrb	r7, [r4, #19]
    2ff4:	2307      	movs	r3, #7
    2ff6:	401f      	ands	r7, r3
    2ff8:	4a07      	ldr	r2, [pc, #28]	; (3018 <_usb_d_dev_in_next+0x188>)
    2ffa:	e766      	b.n	2eca <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2ffc:	8a03      	ldrh	r3, [r0, #16]
    2ffe:	4a06      	ldr	r2, [pc, #24]	; (3018 <_usb_d_dev_in_next+0x188>)
    3000:	2000      	movs	r0, #0
    3002:	4293      	cmp	r3, r2
    3004:	d000      	beq.n	3008 <_usb_d_dev_in_next+0x178>
    3006:	e759      	b.n	2ebc <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    3008:	7ce3      	ldrb	r3, [r4, #19]
    300a:	2707      	movs	r7, #7
    300c:	401f      	ands	r7, r3
    300e:	2000      	movs	r0, #0
    3010:	4a01      	ldr	r2, [pc, #4]	; (3018 <_usb_d_dev_in_next+0x188>)
    3012:	e760      	b.n	2ed6 <_usb_d_dev_in_next+0x46>
    3014:	200006bc 	.word	0x200006bc
    3018:	000003ff 	.word	0x000003ff
    301c:	41005100 	.word	0x41005100
    3020:	00004d2d 	.word	0x00004d2d
    3024:	f0003fff 	.word	0xf0003fff
    3028:	41005109 	.word	0x41005109
    302c:	000051b4 	.word	0x000051b4
    3030:	41005108 	.word	0x41005108
    3034:	00002cb5 	.word	0x00002cb5
    3038:	2000073c 	.word	0x2000073c

0000303c <_usb_d_dev_out_next>:
{
    303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    303e:	46de      	mov	lr, fp
    3040:	4657      	mov	r7, sl
    3042:	464e      	mov	r6, r9
    3044:	4645      	mov	r5, r8
    3046:	b5e0      	push	{r5, r6, r7, lr}
    3048:	0004      	movs	r4, r0
    304a:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    304c:	7c83      	ldrb	r3, [r0, #18]
    304e:	250f      	movs	r5, #15
    3050:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    3052:	2900      	cmp	r1, #0
    3054:	d057      	beq.n	3106 <_usb_d_dev_out_next+0xca>
    3056:	016a      	lsls	r2, r5, #5
    3058:	4b7d      	ldr	r3, [pc, #500]	; (3250 <_usb_d_dev_out_next+0x214>)
    305a:	189b      	adds	r3, r3, r2
    305c:	685a      	ldr	r2, [r3, #4]
    305e:	0112      	lsls	r2, r2, #4
    3060:	0c92      	lsrs	r2, r2, #18
    3062:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    3064:	685f      	ldr	r7, [r3, #4]
    3066:	04bf      	lsls	r7, r7, #18
    3068:	0cbf      	lsrs	r7, r7, #18
    306a:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    306c:	8a06      	ldrh	r6, [r0, #16]
    306e:	4b79      	ldr	r3, [pc, #484]	; (3254 <_usb_d_dev_out_next+0x218>)
    3070:	429e      	cmp	r6, r3
    3072:	d100      	bne.n	3076 <_usb_d_dev_out_next+0x3a>
    3074:	e0cd      	b.n	3212 <_usb_d_dev_out_next+0x1d6>
    3076:	3e01      	subs	r6, #1
    3078:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    307a:	465f      	mov	r7, fp
    307c:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    307e:	7ce3      	ldrb	r3, [r4, #19]
    3080:	2207      	movs	r2, #7
    3082:	401a      	ands	r2, r3
    3084:	4691      	mov	r9, r2
	if (isr) {
    3086:	4643      	mov	r3, r8
    3088:	2b00      	cmp	r3, #0
    308a:	d005      	beq.n	3098 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    308c:	016b      	lsls	r3, r5, #5
    308e:	4a72      	ldr	r2, [pc, #456]	; (3258 <_usb_d_dev_out_next+0x21c>)
    3090:	4694      	mov	ip, r2
    3092:	4463      	add	r3, ip
    3094:	2201      	movs	r2, #1
    3096:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    3098:	7ce3      	ldrb	r3, [r4, #19]
    309a:	069b      	lsls	r3, r3, #26
    309c:	d50f      	bpl.n	30be <_usb_d_dev_out_next+0x82>
    309e:	6863      	ldr	r3, [r4, #4]
    30a0:	2b00      	cmp	r3, #0
    30a2:	d039      	beq.n	3118 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    30a4:	68a0      	ldr	r0, [r4, #8]
    30a6:	1a1b      	subs	r3, r3, r0
    30a8:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    30aa:	6822      	ldr	r2, [r4, #0]
    30ac:	4694      	mov	ip, r2
    30ae:	4460      	add	r0, ip
    30b0:	68e1      	ldr	r1, [r4, #12]
    30b2:	001a      	movs	r2, r3
    30b4:	42bb      	cmp	r3, r7
    30b6:	d900      	bls.n	30ba <_usb_d_dev_out_next+0x7e>
    30b8:	003a      	movs	r2, r7
    30ba:	4b68      	ldr	r3, [pc, #416]	; (325c <_usb_d_dev_out_next+0x220>)
    30bc:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    30be:	6863      	ldr	r3, [r4, #4]
    30c0:	2b00      	cmp	r3, #0
    30c2:	d029      	beq.n	3118 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    30c4:	4642      	mov	r2, r8
    30c6:	2a00      	cmp	r2, #0
    30c8:	d042      	beq.n	3150 <_usb_d_dev_out_next+0x114>
    30ca:	8a22      	ldrh	r2, [r4, #16]
    30cc:	42ba      	cmp	r2, r7
    30ce:	d93f      	bls.n	3150 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    30d0:	7ce3      	ldrb	r3, [r4, #19]
    30d2:	2210      	movs	r2, #16
    30d4:	4393      	bics	r3, r2
    30d6:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    30d8:	68a3      	ldr	r3, [r4, #8]
    30da:	445b      	add	r3, fp
    30dc:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    30de:	464b      	mov	r3, r9
    30e0:	2b01      	cmp	r3, #1
    30e2:	d100      	bne.n	30e6 <_usb_d_dev_out_next+0xaa>
    30e4:	e087      	b.n	31f6 <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    30e6:	016b      	lsls	r3, r5, #5
    30e8:	4a5d      	ldr	r2, [pc, #372]	; (3260 <_usb_d_dev_out_next+0x224>)
    30ea:	4694      	mov	ip, r2
    30ec:	4463      	add	r3, ip
    30ee:	2225      	movs	r2, #37	; 0x25
    30f0:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    30f2:	2d00      	cmp	r5, #0
    30f4:	d102      	bne.n	30fc <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    30f6:	4b56      	ldr	r3, [pc, #344]	; (3250 <_usb_d_dev_out_next+0x214>)
    30f8:	68e2      	ldr	r2, [r4, #12]
    30fa:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    30fc:	2100      	movs	r1, #0
    30fe:	0020      	movs	r0, r4
    3100:	4b58      	ldr	r3, [pc, #352]	; (3264 <_usb_d_dev_out_next+0x228>)
    3102:	4798      	blx	r3
	return;
    3104:	e059      	b.n	31ba <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3106:	8a06      	ldrh	r6, [r0, #16]
    3108:	4b52      	ldr	r3, [pc, #328]	; (3254 <_usb_d_dev_out_next+0x218>)
    310a:	429e      	cmp	r6, r3
    310c:	d100      	bne.n	3110 <_usb_d_dev_out_next+0xd4>
    310e:	e08e      	b.n	322e <_usb_d_dev_out_next+0x1f2>
    3110:	2300      	movs	r3, #0
    3112:	469b      	mov	fp, r3
    3114:	469a      	mov	sl, r3
    3116:	e7ae      	b.n	3076 <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    3118:	7ce3      	ldrb	r3, [r4, #19]
    311a:	06db      	lsls	r3, r3, #27
    311c:	d400      	bmi.n	3120 <_usb_d_dev_out_next+0xe4>
    311e:	e07f      	b.n	3220 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    3120:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    3122:	2210      	movs	r2, #16
    3124:	4393      	bics	r3, r2
    3126:	2220      	movs	r2, #32
    3128:	4313      	orrs	r3, r2
    312a:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    312c:	4a48      	ldr	r2, [pc, #288]	; (3250 <_usb_d_dev_out_next+0x214>)
    312e:	016b      	lsls	r3, r5, #5
    3130:	68e1      	ldr	r1, [r4, #12]
    3132:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3134:	8a21      	ldrh	r1, [r4, #16]
    3136:	18d3      	adds	r3, r2, r3
    3138:	685a      	ldr	r2, [r3, #4]
    313a:	0489      	lsls	r1, r1, #18
    313c:	0909      	lsrs	r1, r1, #4
    313e:	484a      	ldr	r0, [pc, #296]	; (3268 <_usb_d_dev_out_next+0x22c>)
    3140:	4002      	ands	r2, r0
    3142:	430a      	orrs	r2, r1
    3144:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3146:	685a      	ldr	r2, [r3, #4]
    3148:	0b92      	lsrs	r2, r2, #14
    314a:	0392      	lsls	r2, r2, #14
    314c:	605a      	str	r2, [r3, #4]
    314e:	e022      	b.n	3196 <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    3150:	68a2      	ldr	r2, [r4, #8]
    3152:	4452      	add	r2, sl
    3154:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    3156:	4293      	cmp	r3, r2
    3158:	d9c1      	bls.n	30de <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    315a:	1a9b      	subs	r3, r3, r2
    315c:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    315e:	7ce1      	ldrb	r1, [r4, #19]
    3160:	0689      	lsls	r1, r1, #26
    3162:	d530      	bpl.n	31c6 <_usb_d_dev_out_next+0x18a>
    3164:	8a22      	ldrh	r2, [r4, #16]
    3166:	1c11      	adds	r1, r2, #0
    3168:	b292      	uxth	r2, r2
    316a:	429a      	cmp	r2, r3
    316c:	d900      	bls.n	3170 <_usb_d_dev_out_next+0x134>
    316e:	1c19      	adds	r1, r3, #0
    3170:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3172:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    3174:	016a      	lsls	r2, r5, #5
    3176:	4936      	ldr	r1, [pc, #216]	; (3250 <_usb_d_dev_out_next+0x214>)
    3178:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    317a:	016a      	lsls	r2, r5, #5
    317c:	4934      	ldr	r1, [pc, #208]	; (3250 <_usb_d_dev_out_next+0x214>)
    317e:	1889      	adds	r1, r1, r2
    3180:	684a      	ldr	r2, [r1, #4]
    3182:	049b      	lsls	r3, r3, #18
    3184:	091b      	lsrs	r3, r3, #4
    3186:	4838      	ldr	r0, [pc, #224]	; (3268 <_usb_d_dev_out_next+0x22c>)
    3188:	4002      	ands	r2, r0
    318a:	4313      	orrs	r3, r2
    318c:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    318e:	684b      	ldr	r3, [r1, #4]
    3190:	0b9b      	lsrs	r3, r3, #14
    3192:	039b      	lsls	r3, r3, #14
    3194:	604b      	str	r3, [r1, #4]
	if (!isr) {
    3196:	4643      	mov	r3, r8
    3198:	2b00      	cmp	r3, #0
    319a:	d108      	bne.n	31ae <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    319c:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    319e:	464b      	mov	r3, r9
    31a0:	2b01      	cmp	r3, #1
    31a2:	d02f      	beq.n	3204 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    31a4:	016b      	lsls	r3, r5, #5
    31a6:	4931      	ldr	r1, [pc, #196]	; (326c <_usb_d_dev_out_next+0x230>)
    31a8:	468c      	mov	ip, r1
    31aa:	4463      	add	r3, ip
    31ac:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    31ae:	016d      	lsls	r5, r5, #5
    31b0:	4b29      	ldr	r3, [pc, #164]	; (3258 <_usb_d_dev_out_next+0x21c>)
    31b2:	469c      	mov	ip, r3
    31b4:	4465      	add	r5, ip
    31b6:	2340      	movs	r3, #64	; 0x40
    31b8:	712b      	strb	r3, [r5, #4]
}
    31ba:	bc3c      	pop	{r2, r3, r4, r5}
    31bc:	4690      	mov	r8, r2
    31be:	4699      	mov	r9, r3
    31c0:	46a2      	mov	sl, r4
    31c2:	46ab      	mov	fp, r5
    31c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    31c6:	8a21      	ldrh	r1, [r4, #16]
    31c8:	428b      	cmp	r3, r1
    31ca:	d90a      	bls.n	31e2 <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    31cc:	2180      	movs	r1, #128	; 0x80
    31ce:	0189      	lsls	r1, r1, #6
    31d0:	428b      	cmp	r3, r1
    31d2:	d80d      	bhi.n	31f0 <_usb_d_dev_out_next+0x1b4>
    31d4:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    31d6:	6821      	ldr	r1, [r4, #0]
    31d8:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    31da:	0169      	lsls	r1, r5, #5
    31dc:	481c      	ldr	r0, [pc, #112]	; (3250 <_usb_d_dev_out_next+0x214>)
    31de:	500a      	str	r2, [r1, r0]
    31e0:	e7cb      	b.n	317a <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    31e2:	428b      	cmp	r3, r1
    31e4:	d2f7      	bcs.n	31d6 <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    31e6:	7ce1      	ldrb	r1, [r4, #19]
    31e8:	2020      	movs	r0, #32
    31ea:	4301      	orrs	r1, r0
    31ec:	74e1      	strb	r1, [r4, #19]
    31ee:	e7f2      	b.n	31d6 <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    31f0:	2380      	movs	r3, #128	; 0x80
    31f2:	019b      	lsls	r3, r3, #6
    31f4:	e7ef      	b.n	31d6 <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    31f6:	016b      	lsls	r3, r5, #5
    31f8:	4a19      	ldr	r2, [pc, #100]	; (3260 <_usb_d_dev_out_next+0x224>)
    31fa:	4694      	mov	ip, r2
    31fc:	4463      	add	r3, ip
    31fe:	222d      	movs	r2, #45	; 0x2d
    3200:	701a      	strb	r2, [r3, #0]
    3202:	e776      	b.n	30f2 <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    3204:	016a      	lsls	r2, r5, #5
    3206:	4b12      	ldr	r3, [pc, #72]	; (3250 <_usb_d_dev_out_next+0x214>)
    3208:	189b      	adds	r3, r3, r2
    320a:	2200      	movs	r2, #0
    320c:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    320e:	322d      	adds	r2, #45	; 0x2d
    3210:	e7c8      	b.n	31a4 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    3212:	05bf      	lsls	r7, r7, #22
    3214:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3216:	7cc3      	ldrb	r3, [r0, #19]
    3218:	2207      	movs	r2, #7
    321a:	401a      	ands	r2, r3
    321c:	4691      	mov	r9, r2
    321e:	e735      	b.n	308c <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    3220:	4643      	mov	r3, r8
    3222:	2b00      	cmp	r3, #0
    3224:	d10c      	bne.n	3240 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    3226:	68a3      	ldr	r3, [r4, #8]
    3228:	4453      	add	r3, sl
    322a:	60a3      	str	r3, [r4, #8]
    322c:	e757      	b.n	30de <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    322e:	7cc3      	ldrb	r3, [r0, #19]
    3230:	2207      	movs	r2, #7
    3232:	401a      	ands	r2, r3
    3234:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    3236:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    3238:	2300      	movs	r3, #0
    323a:	469b      	mov	fp, r3
    323c:	469a      	mov	sl, r3
    323e:	e72b      	b.n	3098 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    3240:	8a23      	ldrh	r3, [r4, #16]
    3242:	42bb      	cmp	r3, r7
    3244:	d900      	bls.n	3248 <_usb_d_dev_out_next+0x20c>
    3246:	e743      	b.n	30d0 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    3248:	68a3      	ldr	r3, [r4, #8]
    324a:	4453      	add	r3, sl
    324c:	60a3      	str	r3, [r4, #8]
    324e:	e746      	b.n	30de <_usb_d_dev_out_next+0xa2>
    3250:	200006bc 	.word	0x200006bc
    3254:	000003ff 	.word	0x000003ff
    3258:	41005100 	.word	0x41005100
    325c:	00004d2d 	.word	0x00004d2d
    3260:	41005108 	.word	0x41005108
    3264:	00002cb5 	.word	0x00002cb5
    3268:	f0003fff 	.word	0xf0003fff
    326c:	41005109 	.word	0x41005109

00003270 <_usb_d_dev_init>:
{
    3270:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    3272:	4b31      	ldr	r3, [pc, #196]	; (3338 <_usb_d_dev_init+0xc8>)
    3274:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    3276:	07db      	lsls	r3, r3, #31
    3278:	d41f      	bmi.n	32ba <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    327a:	492f      	ldr	r1, [pc, #188]	; (3338 <_usb_d_dev_init+0xc8>)
    327c:	2203      	movs	r2, #3
    327e:	788b      	ldrb	r3, [r1, #2]
    3280:	4213      	tst	r3, r2
    3282:	d1fc      	bne.n	327e <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    3284:	4b2c      	ldr	r3, [pc, #176]	; (3338 <_usb_d_dev_init+0xc8>)
    3286:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    3288:	079b      	lsls	r3, r3, #30
    328a:	d50e      	bpl.n	32aa <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    328c:	4a2a      	ldr	r2, [pc, #168]	; (3338 <_usb_d_dev_init+0xc8>)
    328e:	7813      	ldrb	r3, [r2, #0]
    3290:	2102      	movs	r1, #2
    3292:	438b      	bics	r3, r1
    3294:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3296:	0011      	movs	r1, r2
    3298:	2203      	movs	r2, #3
    329a:	788b      	ldrb	r3, [r1, #2]
    329c:	4213      	tst	r3, r2
    329e:	d1fc      	bne.n	329a <_usb_d_dev_init+0x2a>
    32a0:	4925      	ldr	r1, [pc, #148]	; (3338 <_usb_d_dev_init+0xc8>)
    32a2:	2202      	movs	r2, #2
    32a4:	788b      	ldrb	r3, [r1, #2]
    32a6:	4213      	tst	r3, r2
    32a8:	d1fc      	bne.n	32a4 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    32aa:	2201      	movs	r2, #1
    32ac:	4b22      	ldr	r3, [pc, #136]	; (3338 <_usb_d_dev_init+0xc8>)
    32ae:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    32b0:	0019      	movs	r1, r3
    32b2:	3202      	adds	r2, #2
    32b4:	788b      	ldrb	r3, [r1, #2]
    32b6:	4213      	tst	r3, r2
    32b8:	d1fc      	bne.n	32b4 <_usb_d_dev_init+0x44>
    32ba:	491f      	ldr	r1, [pc, #124]	; (3338 <_usb_d_dev_init+0xc8>)
    32bc:	2201      	movs	r2, #1
    32be:	788b      	ldrb	r3, [r1, #2]
    32c0:	4213      	tst	r3, r2
    32c2:	d1fc      	bne.n	32be <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    32c4:	4b1d      	ldr	r3, [pc, #116]	; (333c <_usb_d_dev_init+0xcc>)
    32c6:	4a1e      	ldr	r2, [pc, #120]	; (3340 <_usb_d_dev_init+0xd0>)
    32c8:	621a      	str	r2, [r3, #32]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    32ca:	625a      	str	r2, [r3, #36]	; 0x24
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    32cc:	629a      	str	r2, [r3, #40]	; 0x28
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    32ce:	62da      	str	r2, [r3, #44]	; 0x2c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    32d0:	631a      	str	r2, [r3, #48]	; 0x30
	_usb_d_dev_reset_epts();
    32d2:	4b1c      	ldr	r3, [pc, #112]	; (3344 <_usb_d_dev_init+0xd4>)
    32d4:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    32d6:	4b1c      	ldr	r3, [pc, #112]	; (3348 <_usb_d_dev_init+0xd8>)
    32d8:	681b      	ldr	r3, [r3, #0]
    32da:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    32dc:	211f      	movs	r1, #31
    32de:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    32e0:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    32e2:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    32e4:	019b      	lsls	r3, r3, #6
    32e6:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    32e8:	2a1f      	cmp	r2, #31
    32ea:	d01f      	beq.n	332c <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    32ec:	291f      	cmp	r1, #31
    32ee:	d01f      	beq.n	3330 <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    32f0:	2b07      	cmp	r3, #7
    32f2:	d01f      	beq.n	3334 <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    32f4:	0192      	lsls	r2, r2, #6
    32f6:	430a      	orrs	r2, r1
    32f8:	031b      	lsls	r3, r3, #12
    32fa:	4313      	orrs	r3, r2
    32fc:	4a0e      	ldr	r2, [pc, #56]	; (3338 <_usb_d_dev_init+0xc8>)
    32fe:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    3300:	78d3      	ldrb	r3, [r2, #3]
    3302:	2103      	movs	r1, #3
    3304:	430b      	orrs	r3, r1
    3306:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    3308:	78d3      	ldrb	r3, [r2, #3]
    330a:	210c      	movs	r1, #12
    330c:	430b      	orrs	r3, r1
    330e:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3310:	2304      	movs	r3, #4
    3312:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3314:	0011      	movs	r1, r2
    3316:	2203      	movs	r2, #3
    3318:	788b      	ldrb	r3, [r1, #2]
    331a:	4213      	tst	r3, r2
    331c:	d1fc      	bne.n	3318 <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    331e:	4b06      	ldr	r3, [pc, #24]	; (3338 <_usb_d_dev_init+0xc8>)
    3320:	4a0a      	ldr	r2, [pc, #40]	; (334c <_usb_d_dev_init+0xdc>)
    3322:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    3324:	2201      	movs	r2, #1
    3326:	811a      	strh	r2, [r3, #8]
}
    3328:	2000      	movs	r0, #0
    332a:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    332c:	3a1a      	subs	r2, #26
    332e:	e7dd      	b.n	32ec <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    3330:	3902      	subs	r1, #2
    3332:	e7dd      	b.n	32f0 <_usb_d_dev_init+0x80>
		pad_trim = 5;
    3334:	3b02      	subs	r3, #2
    3336:	e7dd      	b.n	32f4 <_usb_d_dev_init+0x84>
    3338:	41005000 	.word	0x41005000
    333c:	2000073c 	.word	0x2000073c
    3340:	00002bed 	.word	0x00002bed
    3344:	00002e49 	.word	0x00002e49
    3348:	00806024 	.word	0x00806024
    334c:	200006bc 	.word	0x200006bc

00003350 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    3350:	4b10      	ldr	r3, [pc, #64]	; (3394 <_usb_d_dev_enable+0x44>)
    3352:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    3354:	079b      	lsls	r3, r3, #30
    3356:	d11a      	bne.n	338e <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3358:	490e      	ldr	r1, [pc, #56]	; (3394 <_usb_d_dev_enable+0x44>)
    335a:	2203      	movs	r2, #3
    335c:	788b      	ldrb	r3, [r1, #2]
    335e:	4213      	tst	r3, r2
    3360:	d1fc      	bne.n	335c <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    3362:	4b0c      	ldr	r3, [pc, #48]	; (3394 <_usb_d_dev_enable+0x44>)
    3364:	781b      	ldrb	r3, [r3, #0]
    3366:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    3368:	079a      	lsls	r2, r3, #30
    336a:	d408      	bmi.n	337e <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    336c:	2202      	movs	r2, #2
    336e:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3370:	4a08      	ldr	r2, [pc, #32]	; (3394 <_usb_d_dev_enable+0x44>)
    3372:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3374:	0011      	movs	r1, r2
    3376:	2203      	movs	r2, #3
    3378:	788b      	ldrb	r3, [r1, #2]
    337a:	4213      	tst	r3, r2
    337c:	d1fc      	bne.n	3378 <_usb_d_dev_enable+0x28>
    337e:	2280      	movs	r2, #128	; 0x80
    3380:	4b05      	ldr	r3, [pc, #20]	; (3398 <_usb_d_dev_enable+0x48>)
    3382:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3384:	4a05      	ldr	r2, [pc, #20]	; (339c <_usb_d_dev_enable+0x4c>)
    3386:	4b03      	ldr	r3, [pc, #12]	; (3394 <_usb_d_dev_enable+0x44>)
    3388:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    338a:	2000      	movs	r0, #0
}
    338c:	4770      	bx	lr
		return -USB_ERR_DENIED;
    338e:	2011      	movs	r0, #17
    3390:	4240      	negs	r0, r0
    3392:	e7fb      	b.n	338c <_usb_d_dev_enable+0x3c>
    3394:	41005000 	.word	0x41005000
    3398:	e000e100 	.word	0xe000e100
    339c:	0000028d 	.word	0x0000028d

000033a0 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    33a0:	4a02      	ldr	r2, [pc, #8]	; (33ac <_usb_d_dev_attach+0xc>)
    33a2:	8913      	ldrh	r3, [r2, #8]
    33a4:	2101      	movs	r1, #1
    33a6:	438b      	bics	r3, r1
    33a8:	8113      	strh	r3, [r2, #8]
}
    33aa:	4770      	bx	lr
    33ac:	41005000 	.word	0x41005000

000033b0 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    33b0:	2380      	movs	r3, #128	; 0x80
    33b2:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    33b4:	4b01      	ldr	r3, [pc, #4]	; (33bc <_usb_d_dev_set_address+0xc>)
    33b6:	7298      	strb	r0, [r3, #10]
}
    33b8:	4770      	bx	lr
    33ba:	46c0      	nop			; (mov r8, r8)
    33bc:	41005000 	.word	0x41005000

000033c0 <_usb_d_dev_ep_init>:
{
    33c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    33c2:	240f      	movs	r4, #15
    33c4:	4004      	ands	r4, r0
    33c6:	b243      	sxtb	r3, r0
    33c8:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    33ca:	2c00      	cmp	r4, #0
    33cc:	d054      	beq.n	3478 <_usb_d_dev_ep_init+0xb8>
    33ce:	0025      	movs	r5, r4
    33d0:	2b00      	cmp	r3, #0
    33d2:	db07      	blt.n	33e4 <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    33d4:	2303      	movs	r3, #3
    33d6:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    33d8:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    33da:	2c04      	cmp	r4, #4
    33dc:	d950      	bls.n	3480 <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    33de:	2012      	movs	r0, #18
    33e0:	4240      	negs	r0, r0
    33e2:	e025      	b.n	3430 <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    33e4:	1d25      	adds	r5, r4, #4
    33e6:	e7f5      	b.n	33d4 <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    33e8:	4663      	mov	r3, ip
    33ea:	2b00      	cmp	r3, #0
    33ec:	db21      	blt.n	3432 <_usb_d_dev_ep_init+0x72>
    33ee:	007b      	lsls	r3, r7, #1
    33f0:	19db      	adds	r3, r3, r7
    33f2:	009b      	lsls	r3, r3, #2
    33f4:	4c3b      	ldr	r4, [pc, #236]	; (34e4 <_usb_d_dev_ep_init+0x124>)
    33f6:	591b      	ldr	r3, [r3, r4]
    33f8:	2b00      	cmp	r3, #0
    33fa:	d166      	bne.n	34ca <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    33fc:	007b      	lsls	r3, r7, #1
    33fe:	19df      	adds	r7, r3, r7
    3400:	00bf      	lsls	r7, r7, #2
    3402:	4b38      	ldr	r3, [pc, #224]	; (34e4 <_usb_d_dev_ep_init+0x124>)
    3404:	58ff      	ldr	r7, [r7, r3]
    3406:	4b38      	ldr	r3, [pc, #224]	; (34e8 <_usb_d_dev_ep_init+0x128>)
    3408:	00ae      	lsls	r6, r5, #2
    340a:	1974      	adds	r4, r6, r5
    340c:	00a4      	lsls	r4, r4, #2
    340e:	191c      	adds	r4, r3, r4
    3410:	6427      	str	r7, [r4, #64]	; 0x40
	ept->size     = max_pkt_siz;
    3412:	3444      	adds	r4, #68	; 0x44
    3414:	8022      	strh	r2, [r4, #0]
	ept->flags.u8 = (ep_type + 1);
    3416:	3320      	adds	r3, #32
    3418:	1972      	adds	r2, r6, r5
    341a:	0092      	lsls	r2, r2, #2
    341c:	189a      	adds	r2, r3, r2
    341e:	3227      	adds	r2, #39	; 0x27
    3420:	3101      	adds	r1, #1
    3422:	7011      	strb	r1, [r2, #0]
	ept->ep       = ep;
    3424:	1975      	adds	r5, r6, r5
    3426:	00ad      	lsls	r5, r5, #2
    3428:	195b      	adds	r3, r3, r5
    342a:	3326      	adds	r3, #38	; 0x26
    342c:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    342e:	2000      	movs	r0, #0
}
    3430:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3432:	007b      	lsls	r3, r7, #1
    3434:	19db      	adds	r3, r3, r7
    3436:	009b      	lsls	r3, r3, #2
    3438:	4c2a      	ldr	r4, [pc, #168]	; (34e4 <_usb_d_dev_ep_init+0x124>)
    343a:	18e3      	adds	r3, r4, r3
    343c:	685b      	ldr	r3, [r3, #4]
    343e:	2b00      	cmp	r3, #0
    3440:	d106      	bne.n	3450 <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3442:	007b      	lsls	r3, r7, #1
    3444:	19df      	adds	r7, r3, r7
    3446:	00bf      	lsls	r7, r7, #2
    3448:	4b26      	ldr	r3, [pc, #152]	; (34e4 <_usb_d_dev_ep_init+0x124>)
    344a:	19df      	adds	r7, r3, r7
    344c:	687f      	ldr	r7, [r7, #4]
    344e:	e7da      	b.n	3406 <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3450:	007b      	lsls	r3, r7, #1
    3452:	19db      	adds	r3, r3, r7
    3454:	009b      	lsls	r3, r3, #2
    3456:	4c23      	ldr	r4, [pc, #140]	; (34e4 <_usb_d_dev_ep_init+0x124>)
    3458:	18e3      	adds	r3, r4, r3
    345a:	895b      	ldrh	r3, [r3, #10]
    345c:	4293      	cmp	r3, r2
    345e:	daf0      	bge.n	3442 <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    3460:	2013      	movs	r0, #19
    3462:	4240      	negs	r0, r0
    3464:	e7e4      	b.n	3430 <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    3466:	2014      	movs	r0, #20
    3468:	4240      	negs	r0, r0
    346a:	e7e1      	b.n	3430 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    346c:	2014      	movs	r0, #20
    346e:	4240      	negs	r0, r0
    3470:	e7de      	b.n	3430 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    3472:	2013      	movs	r0, #19
    3474:	4240      	negs	r0, r0
    3476:	e7db      	b.n	3430 <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3478:	2303      	movs	r3, #3
    347a:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    347c:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    347e:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    3480:	00ab      	lsls	r3, r5, #2
    3482:	195b      	adds	r3, r3, r5
    3484:	009e      	lsls	r6, r3, #2
    3486:	4b18      	ldr	r3, [pc, #96]	; (34e8 <_usb_d_dev_ep_init+0x128>)
    3488:	199b      	adds	r3, r3, r6
    348a:	3346      	adds	r3, #70	; 0x46
    348c:	781b      	ldrb	r3, [r3, #0]
    348e:	2bff      	cmp	r3, #255	; 0xff
    3490:	d1e9      	bne.n	3466 <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    3492:	2900      	cmp	r1, #0
    3494:	d1a8      	bne.n	33e8 <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3496:	2c00      	cmp	r4, #0
    3498:	d004      	beq.n	34a4 <_usb_d_dev_ep_init+0xe4>
    349a:	4663      	mov	r3, ip
    349c:	2b00      	cmp	r3, #0
    349e:	db01      	blt.n	34a4 <_usb_d_dev_ep_init+0xe4>
    34a0:	3404      	adds	r4, #4
    34a2:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    34a4:	00a3      	lsls	r3, r4, #2
    34a6:	191b      	adds	r3, r3, r4
    34a8:	009b      	lsls	r3, r3, #2
    34aa:	4c0f      	ldr	r4, [pc, #60]	; (34e8 <_usb_d_dev_ep_init+0x128>)
    34ac:	18e4      	adds	r4, r4, r3
    34ae:	3446      	adds	r4, #70	; 0x46
    34b0:	7823      	ldrb	r3, [r4, #0]
    34b2:	2bff      	cmp	r3, #255	; 0xff
    34b4:	d1da      	bne.n	346c <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    34b6:	007b      	lsls	r3, r7, #1
    34b8:	19db      	adds	r3, r3, r7
    34ba:	009b      	lsls	r3, r3, #2
    34bc:	4c09      	ldr	r4, [pc, #36]	; (34e4 <_usb_d_dev_ep_init+0x124>)
    34be:	591b      	ldr	r3, [r3, r4]
    34c0:	2b00      	cmp	r3, #0
    34c2:	d0d6      	beq.n	3472 <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    34c4:	4663      	mov	r3, ip
    34c6:	2b00      	cmp	r3, #0
    34c8:	dbb3      	blt.n	3432 <_usb_d_dev_ep_init+0x72>
    34ca:	007b      	lsls	r3, r7, #1
    34cc:	19db      	adds	r3, r3, r7
    34ce:	009b      	lsls	r3, r3, #2
    34d0:	4c04      	ldr	r4, [pc, #16]	; (34e4 <_usb_d_dev_ep_init+0x124>)
    34d2:	18e3      	adds	r3, r4, r3
    34d4:	891b      	ldrh	r3, [r3, #8]
    34d6:	4293      	cmp	r3, r2
    34d8:	db00      	blt.n	34dc <_usb_d_dev_ep_init+0x11c>
    34da:	e78f      	b.n	33fc <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    34dc:	2013      	movs	r0, #19
    34de:	4240      	negs	r0, r0
    34e0:	e7a6      	b.n	3430 <_usb_d_dev_ep_init+0x70>
    34e2:	46c0      	nop			; (mov r8, r8)
    34e4:	000051b8 	.word	0x000051b8
    34e8:	2000073c 	.word	0x2000073c

000034ec <_usb_d_dev_ep_deinit>:
{
    34ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34ee:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    34f0:	240f      	movs	r4, #15
    34f2:	4004      	ands	r4, r0
    34f4:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    34f6:	2c00      	cmp	r4, #0
    34f8:	d010      	beq.n	351c <_usb_d_dev_ep_deinit+0x30>
    34fa:	0020      	movs	r0, r4
    34fc:	2f00      	cmp	r7, #0
    34fe:	db02      	blt.n	3506 <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3500:	2c04      	cmp	r4, #4
    3502:	d902      	bls.n	350a <_usb_d_dev_ep_deinit+0x1e>
}
    3504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3506:	1d20      	adds	r0, r4, #4
    3508:	e7fa      	b.n	3500 <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    350a:	0006      	movs	r6, r0
    350c:	3001      	adds	r0, #1
    350e:	0083      	lsls	r3, r0, #2
    3510:	1818      	adds	r0, r3, r0
    3512:	0080      	lsls	r0, r0, #2
    3514:	4b25      	ldr	r3, [pc, #148]	; (35ac <_usb_d_dev_ep_deinit+0xc0>)
    3516:	3320      	adds	r3, #32
    3518:	1818      	adds	r0, r3, r0
    351a:	e002      	b.n	3522 <_usb_d_dev_ep_deinit+0x36>
    351c:	4823      	ldr	r0, [pc, #140]	; (35ac <_usb_d_dev_ep_deinit+0xc0>)
    351e:	3034      	adds	r0, #52	; 0x34
    3520:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3522:	00b3      	lsls	r3, r6, #2
    3524:	199b      	adds	r3, r3, r6
    3526:	009a      	lsls	r2, r3, #2
    3528:	4b20      	ldr	r3, [pc, #128]	; (35ac <_usb_d_dev_ep_deinit+0xc0>)
    352a:	189b      	adds	r3, r3, r2
    352c:	3346      	adds	r3, #70	; 0x46
    352e:	781b      	ldrb	r3, [r3, #0]
    3530:	2bff      	cmp	r3, #255	; 0xff
    3532:	d0e7      	beq.n	3504 <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    3534:	0ff9      	lsrs	r1, r7, #31
    3536:	2203      	movs	r2, #3
    3538:	4b1d      	ldr	r3, [pc, #116]	; (35b0 <_usb_d_dev_ep_deinit+0xc4>)
    353a:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    353c:	00b3      	lsls	r3, r6, #2
    353e:	199b      	adds	r3, r3, r6
    3540:	009a      	lsls	r2, r3, #2
    3542:	4b1a      	ldr	r3, [pc, #104]	; (35ac <_usb_d_dev_ep_deinit+0xc0>)
    3544:	189b      	adds	r3, r3, r2
    3546:	3340      	adds	r3, #64	; 0x40
    3548:	79da      	ldrb	r2, [r3, #7]
    354a:	2307      	movs	r3, #7
    354c:	4013      	ands	r3, r2
    354e:	2b01      	cmp	r3, #1
    3550:	d01b      	beq.n	358a <_usb_d_dev_ep_deinit+0x9e>
	} else if (USB_EP_GET_DIR(ep)) {
    3552:	2f00      	cmp	r7, #0
    3554:	db1f      	blt.n	3596 <_usb_d_dev_ep_deinit+0xaa>
    3556:	016d      	lsls	r5, r5, #5
    3558:	4b16      	ldr	r3, [pc, #88]	; (35b4 <_usb_d_dev_ep_deinit+0xc8>)
    355a:	469c      	mov	ip, r3
    355c:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    355e:	2280      	movs	r2, #128	; 0x80
    3560:	0052      	lsls	r2, r2, #1
    3562:	5cab      	ldrb	r3, [r5, r2]
    3564:	2107      	movs	r1, #7
    3566:	438b      	bics	r3, r1
    3568:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    356a:	4b10      	ldr	r3, [pc, #64]	; (35ac <_usb_d_dev_ep_deinit+0xc0>)
    356c:	3320      	adds	r3, #32
    356e:	00b1      	lsls	r1, r6, #2
    3570:	198a      	adds	r2, r1, r6
    3572:	0092      	lsls	r2, r2, #2
    3574:	189a      	adds	r2, r3, r2
    3576:	3227      	adds	r2, #39	; 0x27
    3578:	2000      	movs	r0, #0
    357a:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    357c:	198e      	adds	r6, r1, r6
    357e:	00b6      	lsls	r6, r6, #2
    3580:	199b      	adds	r3, r3, r6
    3582:	3326      	adds	r3, #38	; 0x26
    3584:	22ff      	movs	r2, #255	; 0xff
    3586:	701a      	strb	r2, [r3, #0]
    3588:	e7bc      	b.n	3504 <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    358a:	3508      	adds	r5, #8
    358c:	016d      	lsls	r5, r5, #5
    358e:	2200      	movs	r2, #0
    3590:	4b08      	ldr	r3, [pc, #32]	; (35b4 <_usb_d_dev_ep_deinit+0xc8>)
    3592:	54ea      	strb	r2, [r5, r3]
    3594:	e7e9      	b.n	356a <_usb_d_dev_ep_deinit+0x7e>
    3596:	0164      	lsls	r4, r4, #5
    3598:	4b06      	ldr	r3, [pc, #24]	; (35b4 <_usb_d_dev_ep_deinit+0xc8>)
    359a:	469c      	mov	ip, r3
    359c:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    359e:	2280      	movs	r2, #128	; 0x80
    35a0:	0052      	lsls	r2, r2, #1
    35a2:	5ca3      	ldrb	r3, [r4, r2]
    35a4:	2170      	movs	r1, #112	; 0x70
    35a6:	438b      	bics	r3, r1
    35a8:	54a3      	strb	r3, [r4, r2]
    35aa:	e7de      	b.n	356a <_usb_d_dev_ep_deinit+0x7e>
    35ac:	2000073c 	.word	0x2000073c
    35b0:	00002cdd 	.word	0x00002cdd
    35b4:	41005000 	.word	0x41005000

000035b8 <_usb_d_dev_ep_enable>:
{
    35b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ba:	46c6      	mov	lr, r8
    35bc:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    35be:	220f      	movs	r2, #15
    35c0:	4002      	ands	r2, r0
    35c2:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    35c4:	2a00      	cmp	r2, #0
    35c6:	d100      	bne.n	35ca <_usb_d_dev_ep_enable+0x12>
    35c8:	e092      	b.n	36f0 <_usb_d_dev_ep_enable+0x138>
    35ca:	0013      	movs	r3, r2
    35cc:	2800      	cmp	r0, #0
    35ce:	db0b      	blt.n	35e8 <_usb_d_dev_ep_enable+0x30>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    35d0:	0011      	movs	r1, r2
    35d2:	3208      	adds	r2, #8
    35d4:	0152      	lsls	r2, r2, #5
    35d6:	4cab      	ldr	r4, [pc, #684]	; (3884 <_usb_d_dev_ep_enable+0x2cc>)
    35d8:	5d15      	ldrb	r5, [r2, r4]
    35da:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    35dc:	2904      	cmp	r1, #4
    35de:	d800      	bhi.n	35e2 <_usb_d_dev_ep_enable+0x2a>
    35e0:	e08d      	b.n	36fe <_usb_d_dev_ep_enable+0x146>
		return -USB_ERR_PARAM;
    35e2:	2012      	movs	r0, #18
    35e4:	4240      	negs	r0, r0
    35e6:	e0e6      	b.n	37b6 <_usb_d_dev_ep_enable+0x1fe>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    35e8:	1d13      	adds	r3, r2, #4
    35ea:	e7f1      	b.n	35d0 <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    35ec:	2077      	movs	r0, #119	; 0x77
    35ee:	4228      	tst	r0, r5
    35f0:	d175      	bne.n	36de <_usb_d_dev_ep_enable+0x126>
    35f2:	48a4      	ldr	r0, [pc, #656]	; (3884 <_usb_d_dev_ep_enable+0x2cc>)
    35f4:	4680      	mov	r8, r0
    35f6:	4442      	add	r2, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    35f8:	3410      	adds	r4, #16
    35fa:	2080      	movs	r0, #128	; 0x80
    35fc:	0040      	lsls	r0, r0, #1
    35fe:	5414      	strb	r4, [r2, r0]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3600:	0098      	lsls	r0, r3, #2
    3602:	18c0      	adds	r0, r0, r3
    3604:	0084      	lsls	r4, r0, #2
    3606:	48a0      	ldr	r0, [pc, #640]	; (3888 <_usb_d_dev_ep_enable+0x2d0>)
    3608:	1900      	adds	r0, r0, r4
    360a:	3044      	adds	r0, #68	; 0x44
    360c:	8800      	ldrh	r0, [r0, #0]
    360e:	0385      	lsls	r5, r0, #14
    3610:	4c9e      	ldr	r4, [pc, #632]	; (388c <_usb_d_dev_ep_enable+0x2d4>)
    3612:	4025      	ands	r5, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3614:	2480      	movs	r4, #128	; 0x80
    3616:	00a4      	lsls	r4, r4, #2
    3618:	42a0      	cmp	r0, r4
    361a:	d900      	bls.n	361e <_usb_d_dev_ep_enable+0x66>
    361c:	e0ce      	b.n	37bc <_usb_d_dev_ep_enable+0x204>
    361e:	3c01      	subs	r4, #1
    3620:	3cff      	subs	r4, #255	; 0xff
    3622:	42a0      	cmp	r0, r4
    3624:	d900      	bls.n	3628 <_usb_d_dev_ep_enable+0x70>
    3626:	e114      	b.n	3852 <_usb_d_dev_ep_enable+0x29a>
    3628:	2880      	cmp	r0, #128	; 0x80
    362a:	d900      	bls.n	362e <_usb_d_dev_ep_enable+0x76>
    362c:	e101      	b.n	3832 <_usb_d_dev_ep_enable+0x27a>
    362e:	2840      	cmp	r0, #64	; 0x40
    3630:	d900      	bls.n	3634 <_usb_d_dev_ep_enable+0x7c>
    3632:	e116      	b.n	3862 <_usb_d_dev_ep_enable+0x2aa>
    3634:	2820      	cmp	r0, #32
    3636:	d900      	bls.n	363a <_usb_d_dev_ep_enable+0x82>
    3638:	e103      	b.n	3842 <_usb_d_dev_ep_enable+0x28a>
    363a:	2810      	cmp	r0, #16
    363c:	d900      	bls.n	3640 <_usb_d_dev_ep_enable+0x88>
    363e:	e118      	b.n	3872 <_usb_d_dev_ep_enable+0x2ba>
    3640:	3cf8      	subs	r4, #248	; 0xf8
    3642:	4284      	cmp	r4, r0
    3644:	41a4      	sbcs	r4, r4
    3646:	4264      	negs	r4, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3648:	0726      	lsls	r6, r4, #28
    364a:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    364c:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    364e:	0485      	lsls	r5, r0, #18
    3650:	0cad      	lsrs	r5, r5, #18
    3652:	e0ba      	b.n	37ca <_usb_d_dev_ep_enable+0x212>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    3654:	2070      	movs	r0, #112	; 0x70
    3656:	4228      	tst	r0, r5
    3658:	d144      	bne.n	36e4 <_usb_d_dev_ep_enable+0x12c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    365a:	4c8b      	ldr	r4, [pc, #556]	; (3888 <_usb_d_dev_ep_enable+0x2d0>)
    365c:	009e      	lsls	r6, r3, #2
    365e:	18f0      	adds	r0, r6, r3
    3660:	0080      	lsls	r0, r0, #2
    3662:	1820      	adds	r0, r4, r0
    3664:	3040      	adds	r0, #64	; 0x40
    3666:	79c0      	ldrb	r0, [r0, #7]
    3668:	0740      	lsls	r0, r0, #29
    366a:	0e40      	lsrs	r0, r0, #25
    366c:	4305      	orrs	r5, r0
    366e:	4885      	ldr	r0, [pc, #532]	; (3884 <_usb_d_dev_ep_enable+0x2cc>)
    3670:	4684      	mov	ip, r0
    3672:	4462      	add	r2, ip
    3674:	2080      	movs	r0, #128	; 0x80
    3676:	0040      	lsls	r0, r0, #1
    3678:	5415      	strb	r5, [r2, r0]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    367a:	18f6      	adds	r6, r6, r3
    367c:	00b6      	lsls	r6, r6, #2
    367e:	19a4      	adds	r4, r4, r6
    3680:	3444      	adds	r4, #68	; 0x44
    3682:	8824      	ldrh	r4, [r4, #0]
    3684:	04a5      	lsls	r5, r4, #18
    3686:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3688:	3001      	adds	r0, #1
    368a:	30ff      	adds	r0, #255	; 0xff
    368c:	2307      	movs	r3, #7
    368e:	4284      	cmp	r4, r0
    3690:	d814      	bhi.n	36bc <_usb_d_dev_ep_enable+0x104>
    3692:	3801      	subs	r0, #1
    3694:	38ff      	subs	r0, #255	; 0xff
    3696:	3b01      	subs	r3, #1
    3698:	4284      	cmp	r4, r0
    369a:	d80f      	bhi.n	36bc <_usb_d_dev_ep_enable+0x104>
    369c:	3b01      	subs	r3, #1
    369e:	2c80      	cmp	r4, #128	; 0x80
    36a0:	d80c      	bhi.n	36bc <_usb_d_dev_ep_enable+0x104>
    36a2:	3b01      	subs	r3, #1
    36a4:	2c40      	cmp	r4, #64	; 0x40
    36a6:	d809      	bhi.n	36bc <_usb_d_dev_ep_enable+0x104>
    36a8:	3b01      	subs	r3, #1
    36aa:	2c20      	cmp	r4, #32
    36ac:	d806      	bhi.n	36bc <_usb_d_dev_ep_enable+0x104>
    36ae:	3b01      	subs	r3, #1
    36b0:	2c10      	cmp	r4, #16
    36b2:	d803      	bhi.n	36bc <_usb_d_dev_ep_enable+0x104>
    36b4:	38f8      	subs	r0, #248	; 0xf8
    36b6:	42a0      	cmp	r0, r4
    36b8:	4180      	sbcs	r0, r0
    36ba:	4243      	negs	r3, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    36bc:	071b      	lsls	r3, r3, #28
    36be:	432b      	orrs	r3, r5
    36c0:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    36c2:	2080      	movs	r0, #128	; 0x80
    36c4:	2382      	movs	r3, #130	; 0x82
    36c6:	005b      	lsls	r3, r3, #1
    36c8:	54d0      	strb	r0, [r2, r3]
	bank->STATUS_BK.reg     = 0;
    36ca:	0149      	lsls	r1, r1, #5
    36cc:	4b70      	ldr	r3, [pc, #448]	; (3890 <_usb_d_dev_ep_enable+0x2d8>)
    36ce:	1859      	adds	r1, r3, r1
    36d0:	2300      	movs	r3, #0
    36d2:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    36d4:	2000      	movs	r0, #0
    36d6:	e06e      	b.n	37b6 <_usb_d_dev_ep_enable+0x1fe>
		return -USB_ERR_PARAM;
    36d8:	2012      	movs	r0, #18
    36da:	4240      	negs	r0, r0
    36dc:	e06b      	b.n	37b6 <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    36de:	2014      	movs	r0, #20
    36e0:	4240      	negs	r0, r0
    36e2:	e068      	b.n	37b6 <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    36e4:	2014      	movs	r0, #20
    36e6:	4240      	negs	r0, r0
    36e8:	e065      	b.n	37b6 <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    36ea:	2014      	movs	r0, #20
    36ec:	4240      	negs	r0, r0
    36ee:	e062      	b.n	37b6 <_usb_d_dev_ep_enable+0x1fe>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    36f0:	2380      	movs	r3, #128	; 0x80
    36f2:	005b      	lsls	r3, r3, #1
    36f4:	4a63      	ldr	r2, [pc, #396]	; (3884 <_usb_d_dev_ep_enable+0x2cc>)
    36f6:	5cd5      	ldrb	r5, [r2, r3]
    36f8:	b2ed      	uxtb	r5, r5
    36fa:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    36fc:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    36fe:	009a      	lsls	r2, r3, #2
    3700:	18d2      	adds	r2, r2, r3
    3702:	0094      	lsls	r4, r2, #2
    3704:	4a60      	ldr	r2, [pc, #384]	; (3888 <_usb_d_dev_ep_enable+0x2d0>)
    3706:	1912      	adds	r2, r2, r4
    3708:	3246      	adds	r2, #70	; 0x46
    370a:	7812      	ldrb	r2, [r2, #0]
    370c:	4694      	mov	ip, r2
    370e:	2aff      	cmp	r2, #255	; 0xff
    3710:	d0e2      	beq.n	36d8 <_usb_d_dev_ep_enable+0x120>
    3712:	014a      	lsls	r2, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    3714:	4f5e      	ldr	r7, [pc, #376]	; (3890 <_usb_d_dev_ep_enable+0x2d8>)
    3716:	18bf      	adds	r7, r7, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    3718:	009c      	lsls	r4, r3, #2
    371a:	18e4      	adds	r4, r4, r3
    371c:	00a6      	lsls	r6, r4, #2
    371e:	4c5a      	ldr	r4, [pc, #360]	; (3888 <_usb_d_dev_ep_enable+0x2d0>)
    3720:	19a4      	adds	r4, r4, r6
    3722:	3440      	adds	r4, #64	; 0x40
    3724:	79e6      	ldrb	r6, [r4, #7]
    3726:	2407      	movs	r4, #7
    3728:	4034      	ands	r4, r6
    372a:	2c01      	cmp	r4, #1
    372c:	d100      	bne.n	3730 <_usb_d_dev_ep_enable+0x178>
    372e:	e75d      	b.n	35ec <_usb_d_dev_ep_enable+0x34>
	} else if (dir) {
    3730:	2800      	cmp	r0, #0
    3732:	db8f      	blt.n	3654 <_usb_d_dev_ep_enable+0x9c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    3734:	0768      	lsls	r0, r5, #29
    3736:	d1d8      	bne.n	36ea <_usb_d_dev_ep_enable+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    3738:	4c53      	ldr	r4, [pc, #332]	; (3888 <_usb_d_dev_ep_enable+0x2d0>)
    373a:	009e      	lsls	r6, r3, #2
    373c:	18f0      	adds	r0, r6, r3
    373e:	0080      	lsls	r0, r0, #2
    3740:	1820      	adds	r0, r4, r0
    3742:	3040      	adds	r0, #64	; 0x40
    3744:	79c0      	ldrb	r0, [r0, #7]
    3746:	0740      	lsls	r0, r0, #29
    3748:	0f40      	lsrs	r0, r0, #29
    374a:	4305      	orrs	r5, r0
    374c:	484d      	ldr	r0, [pc, #308]	; (3884 <_usb_d_dev_ep_enable+0x2cc>)
    374e:	4684      	mov	ip, r0
    3750:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3752:	2080      	movs	r0, #128	; 0x80
    3754:	0040      	lsls	r0, r0, #1
    3756:	5415      	strb	r5, [r2, r0]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3758:	18f6      	adds	r6, r6, r3
    375a:	00b6      	lsls	r6, r6, #2
    375c:	19a4      	adds	r4, r4, r6
    375e:	3444      	adds	r4, #68	; 0x44
    3760:	8825      	ldrh	r5, [r4, #0]
    3762:	03ab      	lsls	r3, r5, #14
    3764:	4c49      	ldr	r4, [pc, #292]	; (388c <_usb_d_dev_ep_enable+0x2d4>)
    3766:	401c      	ands	r4, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3768:	3001      	adds	r0, #1
    376a:	30ff      	adds	r0, #255	; 0xff
    376c:	2307      	movs	r3, #7
    376e:	4285      	cmp	r5, r0
    3770:	d814      	bhi.n	379c <_usb_d_dev_ep_enable+0x1e4>
    3772:	3801      	subs	r0, #1
    3774:	38ff      	subs	r0, #255	; 0xff
    3776:	3b01      	subs	r3, #1
    3778:	4285      	cmp	r5, r0
    377a:	d80f      	bhi.n	379c <_usb_d_dev_ep_enable+0x1e4>
    377c:	3b01      	subs	r3, #1
    377e:	2d80      	cmp	r5, #128	; 0x80
    3780:	d80c      	bhi.n	379c <_usb_d_dev_ep_enable+0x1e4>
    3782:	3b01      	subs	r3, #1
    3784:	2d40      	cmp	r5, #64	; 0x40
    3786:	d809      	bhi.n	379c <_usb_d_dev_ep_enable+0x1e4>
    3788:	3b01      	subs	r3, #1
    378a:	2d20      	cmp	r5, #32
    378c:	d806      	bhi.n	379c <_usb_d_dev_ep_enable+0x1e4>
    378e:	3b01      	subs	r3, #1
    3790:	2d10      	cmp	r5, #16
    3792:	d803      	bhi.n	379c <_usb_d_dev_ep_enable+0x1e4>
    3794:	38f8      	subs	r0, #248	; 0xf8
    3796:	42a8      	cmp	r0, r5
    3798:	4180      	sbcs	r0, r0
    379a:	4243      	negs	r3, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    379c:	071b      	lsls	r3, r3, #28
    379e:	4323      	orrs	r3, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    37a0:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    37a2:	2040      	movs	r0, #64	; 0x40
    37a4:	2306      	movs	r3, #6
    37a6:	33ff      	adds	r3, #255	; 0xff
    37a8:	54d0      	strb	r0, [r2, r3]
	bank->STATUS_BK.reg     = 0;
    37aa:	0149      	lsls	r1, r1, #5
    37ac:	4b38      	ldr	r3, [pc, #224]	; (3890 <_usb_d_dev_ep_enable+0x2d8>)
    37ae:	1859      	adds	r1, r3, r1
    37b0:	2300      	movs	r3, #0
    37b2:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    37b4:	2000      	movs	r0, #0
}
    37b6:	bc04      	pop	{r2}
    37b8:	4690      	mov	r8, r2
    37ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    37bc:	24e0      	movs	r4, #224	; 0xe0
    37be:	05e4      	lsls	r4, r4, #23
    37c0:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    37c2:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    37c4:	0485      	lsls	r5, r0, #18
    37c6:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    37c8:	2407      	movs	r4, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    37ca:	0724      	lsls	r4, r4, #28
    37cc:	432c      	orrs	r4, r5
    37ce:	617c      	str	r4, [r7, #20]
    37d0:	2406      	movs	r4, #6
    37d2:	34ff      	adds	r4, #255	; 0xff
    37d4:	2540      	movs	r5, #64	; 0x40
    37d6:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    37d8:	2682      	movs	r6, #130	; 0x82
    37da:	0076      	lsls	r6, r6, #1
    37dc:	2780      	movs	r7, #128	; 0x80
    37de:	5597      	strb	r7, [r2, r6]
	bank->STATUS_BK.reg     = 0;
    37e0:	4f2b      	ldr	r7, [pc, #172]	; (3890 <_usb_d_dev_ep_enable+0x2d8>)
    37e2:	0149      	lsls	r1, r1, #5
    37e4:	1879      	adds	r1, r7, r1
    37e6:	2200      	movs	r2, #0
    37e8:	728a      	strb	r2, [r1, #10]
    37ea:	768a      	strb	r2, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    37ec:	210f      	movs	r1, #15
    37ee:	4662      	mov	r2, ip
    37f0:	4011      	ands	r1, r2
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    37f2:	009a      	lsls	r2, r3, #2
    37f4:	18d2      	adds	r2, r2, r3
    37f6:	0092      	lsls	r2, r2, #2
    37f8:	4b23      	ldr	r3, [pc, #140]	; (3888 <_usb_d_dev_ep_enable+0x2d0>)
    37fa:	189a      	adds	r2, r3, r2
    37fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
	bank->ADDR.reg          = addr;
    37fe:	014b      	lsls	r3, r1, #5
    3800:	51da      	str	r2, [r3, r7]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3802:	18f9      	adds	r1, r7, r3
    3804:	684a      	ldr	r2, [r1, #4]
    3806:	0480      	lsls	r0, r0, #18
    3808:	0907      	lsrs	r7, r0, #4
    380a:	4822      	ldr	r0, [pc, #136]	; (3894 <_usb_d_dev_ep_enable+0x2dc>)
    380c:	4010      	ands	r0, r2
    380e:	4338      	orrs	r0, r7
    3810:	6048      	str	r0, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3812:	684a      	ldr	r2, [r1, #4]
    3814:	0b92      	lsrs	r2, r2, #14
    3816:	0392      	lsls	r2, r2, #14
    3818:	604a      	str	r2, [r1, #4]
    381a:	4a1a      	ldr	r2, [pc, #104]	; (3884 <_usb_d_dev_ep_enable+0x2cc>)
    381c:	189a      	adds	r2, r3, r2
    381e:	21b0      	movs	r1, #176	; 0xb0
    3820:	5591      	strb	r1, [r2, r6]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3822:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3824:	4a1c      	ldr	r2, [pc, #112]	; (3898 <_usb_d_dev_ep_enable+0x2e0>)
    3826:	4694      	mov	ip, r2
    3828:	4463      	add	r3, ip
    382a:	2210      	movs	r2, #16
    382c:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    382e:	2000      	movs	r0, #0
    3830:	e7c1      	b.n	37b6 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3832:	24a0      	movs	r4, #160	; 0xa0
    3834:	05e4      	lsls	r4, r4, #23
    3836:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3838:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    383a:	0485      	lsls	r5, r0, #18
    383c:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    383e:	2405      	movs	r4, #5
    3840:	e7c3      	b.n	37ca <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3842:	24c0      	movs	r4, #192	; 0xc0
    3844:	05a4      	lsls	r4, r4, #22
    3846:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3848:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    384a:	0485      	lsls	r5, r0, #18
    384c:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    384e:	2403      	movs	r4, #3
    3850:	e7bb      	b.n	37ca <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3852:	24c0      	movs	r4, #192	; 0xc0
    3854:	05e4      	lsls	r4, r4, #23
    3856:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3858:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    385a:	0485      	lsls	r5, r0, #18
    385c:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    385e:	2406      	movs	r4, #6
    3860:	e7b3      	b.n	37ca <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3862:	2480      	movs	r4, #128	; 0x80
    3864:	05e4      	lsls	r4, r4, #23
    3866:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3868:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    386a:	0485      	lsls	r5, r0, #18
    386c:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    386e:	2404      	movs	r4, #4
    3870:	e7ab      	b.n	37ca <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3872:	2480      	movs	r4, #128	; 0x80
    3874:	05a4      	lsls	r4, r4, #22
    3876:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3878:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    387a:	0485      	lsls	r5, r0, #18
    387c:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    387e:	2402      	movs	r4, #2
    3880:	e7a3      	b.n	37ca <_usb_d_dev_ep_enable+0x212>
    3882:	46c0      	nop			; (mov r8, r8)
    3884:	41005000 	.word	0x41005000
    3888:	2000073c 	.word	0x2000073c
    388c:	0fffc000 	.word	0x0fffc000
    3890:	200006bc 	.word	0x200006bc
    3894:	f0003fff 	.word	0xf0003fff
    3898:	41005109 	.word	0x41005109

0000389c <_usb_d_dev_ep_stall>:
{
    389c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    389e:	230f      	movs	r3, #15
    38a0:	4003      	ands	r3, r0
    38a2:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    38a4:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    38a6:	2b00      	cmp	r3, #0
    38a8:	d009      	beq.n	38be <_usb_d_dev_ep_stall+0x22>
    38aa:	001a      	movs	r2, r3
    38ac:	2800      	cmp	r0, #0
    38ae:	db04      	blt.n	38ba <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    38b0:	2b04      	cmp	r3, #4
    38b2:	d905      	bls.n	38c0 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    38b4:	2012      	movs	r0, #18
    38b6:	4240      	negs	r0, r0
    38b8:	e019      	b.n	38ee <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    38ba:	1d1a      	adds	r2, r3, #4
    38bc:	e7f8      	b.n	38b0 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    38be:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    38c0:	2901      	cmp	r1, #1
    38c2:	d015      	beq.n	38f0 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    38c4:	2900      	cmp	r1, #0
    38c6:	d036      	beq.n	3936 <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    38c8:	0093      	lsls	r3, r2, #2
    38ca:	189b      	adds	r3, r3, r2
    38cc:	009b      	lsls	r3, r3, #2
    38ce:	4a47      	ldr	r2, [pc, #284]	; (39ec <_usb_d_dev_ep_stall+0x150>)
    38d0:	18d2      	adds	r2, r2, r3
    38d2:	3246      	adds	r2, #70	; 0x46
    38d4:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    38d6:	230f      	movs	r3, #15
    38d8:	4013      	ands	r3, r2
    38da:	015b      	lsls	r3, r3, #5
    38dc:	4a44      	ldr	r2, [pc, #272]	; (39f0 <_usb_d_dev_ep_stall+0x154>)
    38de:	4694      	mov	ip, r2
    38e0:	4463      	add	r3, ip
    38e2:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    38e4:	2310      	movs	r3, #16
    38e6:	40a3      	lsls	r3, r4
    38e8:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    38ea:	1e43      	subs	r3, r0, #1
    38ec:	4198      	sbcs	r0, r3
}
    38ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    38f0:	2510      	movs	r5, #16
    38f2:	40a5      	lsls	r5, r4
    38f4:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    38f6:	493d      	ldr	r1, [pc, #244]	; (39ec <_usb_d_dev_ep_stall+0x150>)
    38f8:	0090      	lsls	r0, r2, #2
    38fa:	1883      	adds	r3, r0, r2
    38fc:	009b      	lsls	r3, r3, #2
    38fe:	18cb      	adds	r3, r1, r3
    3900:	3346      	adds	r3, #70	; 0x46
    3902:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3904:	230f      	movs	r3, #15
    3906:	4033      	ands	r3, r6
    3908:	015e      	lsls	r6, r3, #5
    390a:	4f39      	ldr	r7, [pc, #228]	; (39f0 <_usb_d_dev_ep_stall+0x154>)
    390c:	46bc      	mov	ip, r7
    390e:	4466      	add	r6, ip
    3910:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3912:	2520      	movs	r5, #32
    3914:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    3916:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3918:	015b      	lsls	r3, r3, #5
    391a:	4d36      	ldr	r5, [pc, #216]	; (39f4 <_usb_d_dev_ep_stall+0x158>)
    391c:	46ac      	mov	ip, r5
    391e:	4463      	add	r3, ip
    3920:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    3922:	1882      	adds	r2, r0, r2
    3924:	0092      	lsls	r2, r2, #2
    3926:	188a      	adds	r2, r1, r2
    3928:	3240      	adds	r2, #64	; 0x40
    392a:	79d3      	ldrb	r3, [r2, #7]
    392c:	2108      	movs	r1, #8
    392e:	430b      	orrs	r3, r1
    3930:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    3932:	2000      	movs	r0, #0
    3934:	e7db      	b.n	38ee <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    3936:	0093      	lsls	r3, r2, #2
    3938:	189b      	adds	r3, r3, r2
    393a:	0099      	lsls	r1, r3, #2
    393c:	4b2b      	ldr	r3, [pc, #172]	; (39ec <_usb_d_dev_ep_stall+0x150>)
    393e:	185b      	adds	r3, r3, r1
    3940:	3346      	adds	r3, #70	; 0x46
    3942:	781b      	ldrb	r3, [r3, #0]
    3944:	210f      	movs	r1, #15
    3946:	400b      	ands	r3, r1
    3948:	015d      	lsls	r5, r3, #5
    394a:	492b      	ldr	r1, [pc, #172]	; (39f8 <_usb_d_dev_ep_stall+0x15c>)
    394c:	468c      	mov	ip, r1
    394e:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3950:	2183      	movs	r1, #131	; 0x83
    3952:	0049      	lsls	r1, r1, #1
    3954:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3956:	39f6      	subs	r1, #246	; 0xf6
    3958:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    395a:	2000      	movs	r0, #0
	if (!is_stalled) {
    395c:	420e      	tst	r6, r1
    395e:	d0c6      	beq.n	38ee <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3960:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3962:	3005      	adds	r0, #5
    3964:	30ff      	adds	r0, #255	; 0xff
    3966:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3968:	2120      	movs	r1, #32
    396a:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    396c:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    396e:	015b      	lsls	r3, r3, #5
    3970:	4e22      	ldr	r6, [pc, #136]	; (39fc <_usb_d_dev_ep_stall+0x160>)
    3972:	46b4      	mov	ip, r6
    3974:	4463      	add	r3, ip
    3976:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3978:	2308      	movs	r3, #8
    397a:	33ff      	adds	r3, #255	; 0xff
    397c:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    397e:	420b      	tst	r3, r1
    3980:	d009      	beq.n	3996 <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3982:	2308      	movs	r3, #8
    3984:	33ff      	adds	r3, #255	; 0xff
    3986:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    3988:	3b07      	subs	r3, #7
    398a:	3bff      	subs	r3, #255	; 0xff
    398c:	40a3      	lsls	r3, r4
    398e:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3990:	2182      	movs	r1, #130	; 0x82
    3992:	0049      	lsls	r1, r1, #1
    3994:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    3996:	0093      	lsls	r3, r2, #2
    3998:	189b      	adds	r3, r3, r2
    399a:	0099      	lsls	r1, r3, #2
    399c:	4b13      	ldr	r3, [pc, #76]	; (39ec <_usb_d_dev_ep_stall+0x150>)
    399e:	185b      	adds	r3, r3, r1
    39a0:	3340      	adds	r3, #64	; 0x40
    39a2:	79d9      	ldrb	r1, [r3, #7]
    39a4:	2307      	movs	r3, #7
    39a6:	400b      	ands	r3, r1
    39a8:	2b01      	cmp	r3, #1
    39aa:	d00b      	beq.n	39c4 <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    39ac:	0093      	lsls	r3, r2, #2
    39ae:	189a      	adds	r2, r3, r2
    39b0:	0092      	lsls	r2, r2, #2
    39b2:	4b0e      	ldr	r3, [pc, #56]	; (39ec <_usb_d_dev_ep_stall+0x150>)
    39b4:	189b      	adds	r3, r3, r2
    39b6:	3340      	adds	r3, #64	; 0x40
    39b8:	79da      	ldrb	r2, [r3, #7]
    39ba:	2108      	movs	r1, #8
    39bc:	438a      	bics	r2, r1
    39be:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    39c0:	2000      	movs	r0, #0
    39c2:	e794      	b.n	38ee <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    39c4:	3306      	adds	r3, #6
    39c6:	33ff      	adds	r3, #255	; 0xff
    39c8:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    39ca:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    39cc:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    39ce:	4219      	tst	r1, r3
    39d0:	d000      	beq.n	39d4 <_usb_d_dev_ep_stall+0x138>
    39d2:	e78c      	b.n	38ee <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    39d4:	0093      	lsls	r3, r2, #2
    39d6:	189a      	adds	r2, r3, r2
    39d8:	0092      	lsls	r2, r2, #2
    39da:	4b04      	ldr	r3, [pc, #16]	; (39ec <_usb_d_dev_ep_stall+0x150>)
    39dc:	189b      	adds	r3, r3, r2
    39de:	3340      	adds	r3, #64	; 0x40
    39e0:	79da      	ldrb	r2, [r3, #7]
    39e2:	2108      	movs	r1, #8
    39e4:	438a      	bics	r2, r1
    39e6:	71da      	strb	r2, [r3, #7]
    39e8:	e781      	b.n	38ee <_usb_d_dev_ep_stall+0x52>
    39ea:	46c0      	nop			; (mov r8, r8)
    39ec:	2000073c 	.word	0x2000073c
    39f0:	41005100 	.word	0x41005100
    39f4:	41005109 	.word	0x41005109
    39f8:	41005000 	.word	0x41005000
    39fc:	41005108 	.word	0x41005108

00003a00 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    3a00:	b570      	push	{r4, r5, r6, lr}
    3a02:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    3a04:	230f      	movs	r3, #15
    3a06:	4018      	ands	r0, r3
    3a08:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    3a0a:	4b16      	ldr	r3, [pc, #88]	; (3a64 <_usb_d_dev_ep_read_req+0x64>)
    3a0c:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    3a0e:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    3a10:	685b      	ldr	r3, [r3, #4]
    3a12:	049b      	lsls	r3, r3, #18
    3a14:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    3a16:	2804      	cmp	r0, #4
    3a18:	d81a      	bhi.n	3a50 <_usb_d_dev_ep_read_req+0x50>
    3a1a:	2d00      	cmp	r5, #0
    3a1c:	d01b      	beq.n	3a56 <_usb_d_dev_ep_read_req+0x56>
    3a1e:	4b12      	ldr	r3, [pc, #72]	; (3a68 <_usb_d_dev_ep_read_req+0x68>)
    3a20:	469c      	mov	ip, r3
    3a22:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3a24:	2380      	movs	r3, #128	; 0x80
    3a26:	005b      	lsls	r3, r3, #1
    3a28:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    3a2a:	2b11      	cmp	r3, #17
    3a2c:	d116      	bne.n	3a5c <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    3a2e:	2308      	movs	r3, #8
    3a30:	33ff      	adds	r3, #255	; 0xff
    3a32:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    3a34:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    3a36:	06db      	lsls	r3, r3, #27
    3a38:	d400      	bmi.n	3a3c <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    3a3a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    3a3c:	2208      	movs	r2, #8
    3a3e:	0028      	movs	r0, r5
    3a40:	4b0a      	ldr	r3, [pc, #40]	; (3a6c <_usb_d_dev_ep_read_req+0x6c>)
    3a42:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3a44:	2210      	movs	r2, #16
    3a46:	2308      	movs	r3, #8
    3a48:	33ff      	adds	r3, #255	; 0xff
    3a4a:	54e2      	strb	r2, [r4, r3]
	return bytes;
    3a4c:	0030      	movs	r0, r6
    3a4e:	e7f4      	b.n	3a3a <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    3a50:	2012      	movs	r0, #18
    3a52:	4240      	negs	r0, r0
    3a54:	e7f1      	b.n	3a3a <_usb_d_dev_ep_read_req+0x3a>
    3a56:	2012      	movs	r0, #18
    3a58:	4240      	negs	r0, r0
    3a5a:	e7ee      	b.n	3a3a <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    3a5c:	2013      	movs	r0, #19
    3a5e:	4240      	negs	r0, r0
    3a60:	e7eb      	b.n	3a3a <_usb_d_dev_ep_read_req+0x3a>
    3a62:	46c0      	nop			; (mov r8, r8)
    3a64:	200006bc 	.word	0x200006bc
    3a68:	41005000 	.word	0x41005000
    3a6c:	00004d2d 	.word	0x00004d2d

00003a70 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    3a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a72:	46de      	mov	lr, fp
    3a74:	4657      	mov	r7, sl
    3a76:	464e      	mov	r6, r9
    3a78:	4645      	mov	r5, r8
    3a7a:	b5e0      	push	{r5, r6, r7, lr}
    3a7c:	b085      	sub	sp, #20
    3a7e:	0007      	movs	r7, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    3a80:	7a05      	ldrb	r5, [r0, #8]
    3a82:	230f      	movs	r3, #15
    3a84:	402b      	ands	r3, r5
    3a86:	b26d      	sxtb	r5, r5
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3a88:	2b00      	cmp	r3, #0
    3a8a:	d100      	bne.n	3a8e <_usb_d_dev_ep_trans+0x1e>
    3a8c:	e0d0      	b.n	3c30 <_usb_d_dev_ep_trans+0x1c0>
    3a8e:	001e      	movs	r6, r3
    3a90:	2d00      	cmp	r5, #0
    3a92:	db39      	blt.n	3b08 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    3a94:	0034      	movs	r4, r6
    3a96:	4a72      	ldr	r2, [pc, #456]	; (3c60 <_usb_d_dev_ep_trans+0x1f0>)
    3a98:	2120      	movs	r1, #32
    3a9a:	4688      	mov	r8, r1
    3a9c:	4490      	add	r8, r2
    3a9e:	1c71      	adds	r1, r6, #1
    3aa0:	0088      	lsls	r0, r1, #2
    3aa2:	1840      	adds	r0, r0, r1
    3aa4:	0080      	lsls	r0, r0, #2
    3aa6:	4480      	add	r8, r0
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3aa8:	00b1      	lsls	r1, r6, #2
    3aaa:	1989      	adds	r1, r1, r6
    3aac:	0089      	lsls	r1, r1, #2
    3aae:	1852      	adds	r2, r2, r1
    3ab0:	3244      	adds	r2, #68	; 0x44
    3ab2:	8812      	ldrh	r2, [r2, #0]
    3ab4:	496b      	ldr	r1, [pc, #428]	; (3c64 <_usb_d_dev_ep_trans+0x1f4>)
    3ab6:	428a      	cmp	r2, r1
    3ab8:	d028      	beq.n	3b0c <_usb_d_dev_ep_trans+0x9c>
    3aba:	1e56      	subs	r6, r2, #1
    3abc:	b2b6      	uxth	r6, r6
	bool     size_n_aligned = (trans->size & size_mask);
    3abe:	6879      	ldr	r1, [r7, #4]
    3ac0:	400e      	ands	r6, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    3ac2:	2b04      	cmp	r3, #4
    3ac4:	d900      	bls.n	3ac8 <_usb_d_dev_ep_trans+0x58>
    3ac6:	e09e      	b.n	3c06 <_usb_d_dev_ep_trans+0x196>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    3ac8:	683b      	ldr	r3, [r7, #0]
    3aca:	4867      	ldr	r0, [pc, #412]	; (3c68 <_usb_d_dev_ep_trans+0x1f8>)
    3acc:	4283      	cmp	r3, r0
    3ace:	d91f      	bls.n	3b10 <_usb_d_dev_ep_trans+0xa0>
    3ad0:	1858      	adds	r0, r3, r1
    3ad2:	9001      	str	r0, [sp, #4]
    3ad4:	4865      	ldr	r0, [pc, #404]	; (3c6c <_usb_d_dev_ep_trans+0x1fc>)
    3ad6:	4684      	mov	ip, r0
    3ad8:	9801      	ldr	r0, [sp, #4]
    3ada:	4560      	cmp	r0, ip
    3adc:	d818      	bhi.n	3b10 <_usb_d_dev_ep_trans+0xa0>
    3ade:	079b      	lsls	r3, r3, #30
    3ae0:	d116      	bne.n	3b10 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    3ae2:	2d00      	cmp	r5, #0
    3ae4:	db30      	blt.n	3b48 <_usb_d_dev_ep_trans+0xd8>
    3ae6:	428a      	cmp	r2, r1
    3ae8:	d900      	bls.n	3aec <_usb_d_dev_ep_trans+0x7c>
    3aea:	e0ad      	b.n	3c48 <_usb_d_dev_ep_trans+0x1d8>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    3aec:	2e00      	cmp	r6, #0
    3aee:	d02e      	beq.n	3b4e <_usb_d_dev_ep_trans+0xde>
		if (!ept->cache) {
    3af0:	00a3      	lsls	r3, r4, #2
    3af2:	191b      	adds	r3, r3, r4
    3af4:	009b      	lsls	r3, r3, #2
    3af6:	4a5a      	ldr	r2, [pc, #360]	; (3c60 <_usb_d_dev_ep_trans+0x1f0>)
    3af8:	18d3      	adds	r3, r2, r3
    3afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3afc:	2b00      	cmp	r3, #0
    3afe:	d100      	bne.n	3b02 <_usb_d_dev_ep_trans+0x92>
    3b00:	e087      	b.n	3c12 <_usb_d_dev_ep_trans+0x1a2>
	bool use_cache = false;
    3b02:	2300      	movs	r3, #0
    3b04:	4699      	mov	r9, r3
    3b06:	e00e      	b.n	3b26 <_usb_d_dev_ep_trans+0xb6>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3b08:	1d1e      	adds	r6, r3, #4
    3b0a:	e7c3      	b.n	3a94 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3b0c:	0016      	movs	r6, r2
    3b0e:	e7d6      	b.n	3abe <_usb_d_dev_ep_trans+0x4e>
		if (!ept->cache) {
    3b10:	00a3      	lsls	r3, r4, #2
    3b12:	191b      	adds	r3, r3, r4
    3b14:	009b      	lsls	r3, r3, #2
    3b16:	4a52      	ldr	r2, [pc, #328]	; (3c60 <_usb_d_dev_ep_trans+0x1f0>)
    3b18:	18d3      	adds	r3, r2, r3
    3b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3b1c:	2b00      	cmp	r3, #0
    3b1e:	d100      	bne.n	3b22 <_usb_d_dev_ep_trans+0xb2>
    3b20:	e074      	b.n	3c0c <_usb_d_dev_ep_trans+0x19c>
		use_cache = true;
    3b22:	2301      	movs	r3, #1
    3b24:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    3b26:	00a3      	lsls	r3, r4, #2
    3b28:	191b      	adds	r3, r3, r4
    3b2a:	009a      	lsls	r2, r3, #2
    3b2c:	4b4c      	ldr	r3, [pc, #304]	; (3c60 <_usb_d_dev_ep_trans+0x1f0>)
    3b2e:	189b      	adds	r3, r3, r2
    3b30:	3340      	adds	r3, #64	; 0x40
    3b32:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    3b34:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    3b36:	071b      	lsls	r3, r3, #28
    3b38:	d50c      	bpl.n	3b54 <_usb_d_dev_ep_trans+0xe4>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    3b3a:	b005      	add	sp, #20
    3b3c:	bc3c      	pop	{r2, r3, r4, r5}
    3b3e:	4690      	mov	r8, r2
    3b40:	4699      	mov	r9, r3
    3b42:	46a2      	mov	sl, r4
    3b44:	46ab      	mov	fp, r5
    3b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    3b48:	2300      	movs	r3, #0
    3b4a:	4699      	mov	r9, r3
    3b4c:	e7eb      	b.n	3b26 <_usb_d_dev_ep_trans+0xb6>
    3b4e:	2300      	movs	r3, #0
    3b50:	4699      	mov	r9, r3
    3b52:	e7e8      	b.n	3b26 <_usb_d_dev_ep_trans+0xb6>
	atomic_enter_critical(&flags);
    3b54:	a803      	add	r0, sp, #12
    3b56:	4b46      	ldr	r3, [pc, #280]	; (3c70 <_usb_d_dev_ep_trans+0x200>)
    3b58:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    3b5a:	00a3      	lsls	r3, r4, #2
    3b5c:	191b      	adds	r3, r3, r4
    3b5e:	009a      	lsls	r2, r3, #2
    3b60:	4b3f      	ldr	r3, [pc, #252]	; (3c60 <_usb_d_dev_ep_trans+0x1f0>)
    3b62:	189b      	adds	r3, r3, r2
    3b64:	3340      	adds	r3, #64	; 0x40
    3b66:	79db      	ldrb	r3, [r3, #7]
    3b68:	065b      	lsls	r3, r3, #25
    3b6a:	d441      	bmi.n	3bf0 <_usb_d_dev_ep_trans+0x180>
	ept->flags.bits.is_busy = 1;
    3b6c:	00a3      	lsls	r3, r4, #2
    3b6e:	191b      	adds	r3, r3, r4
    3b70:	009b      	lsls	r3, r3, #2
    3b72:	4a3b      	ldr	r2, [pc, #236]	; (3c60 <_usb_d_dev_ep_trans+0x1f0>)
    3b74:	4693      	mov	fp, r2
    3b76:	449b      	add	fp, r3
    3b78:	2340      	movs	r3, #64	; 0x40
    3b7a:	445b      	add	r3, fp
    3b7c:	469a      	mov	sl, r3
    3b7e:	79db      	ldrb	r3, [r3, #7]
    3b80:	2240      	movs	r2, #64	; 0x40
    3b82:	4313      	orrs	r3, r2
    3b84:	4652      	mov	r2, sl
    3b86:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    3b88:	a803      	add	r0, sp, #12
    3b8a:	4b3a      	ldr	r3, [pc, #232]	; (3c74 <_usb_d_dev_ep_trans+0x204>)
    3b8c:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    3b8e:	465b      	mov	r3, fp
    3b90:	683a      	ldr	r2, [r7, #0]
    3b92:	635a      	str	r2, [r3, #52]	; 0x34
	ept->trans_size  = trans->size;
    3b94:	687a      	ldr	r2, [r7, #4]
    3b96:	639a      	str	r2, [r3, #56]	; 0x38
	ept->trans_count = 0;
    3b98:	2300      	movs	r3, #0
    3b9a:	465a      	mov	r2, fp
    3b9c:	63d3      	str	r3, [r2, #60]	; 0x3c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    3b9e:	0fea      	lsrs	r2, r5, #31
	ept->flags.bits.dir       = dir;
    3ba0:	01d2      	lsls	r2, r2, #7
    3ba2:	4653      	mov	r3, sl
    3ba4:	79d9      	ldrb	r1, [r3, #7]
    3ba6:	237f      	movs	r3, #127	; 0x7f
    3ba8:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    3baa:	4649      	mov	r1, r9
    3bac:	0149      	lsls	r1, r1, #5
    3bae:	4313      	orrs	r3, r2
    3bb0:	2220      	movs	r2, #32
    3bb2:	4393      	bics	r3, r2
    3bb4:	430b      	orrs	r3, r1
    3bb6:	4652      	mov	r2, sl
    3bb8:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    3bba:	7a7b      	ldrb	r3, [r7, #9]
    3bbc:	2200      	movs	r2, #0
    3bbe:	2b00      	cmp	r3, #0
    3bc0:	d002      	beq.n	3bc8 <_usb_d_dev_ep_trans+0x158>
    3bc2:	4272      	negs	r2, r6
    3bc4:	4172      	adcs	r2, r6
    3bc6:	b2d2      	uxtb	r2, r2
    3bc8:	00a3      	lsls	r3, r4, #2
    3bca:	191c      	adds	r4, r3, r4
    3bcc:	00a4      	lsls	r4, r4, #2
    3bce:	4b24      	ldr	r3, [pc, #144]	; (3c60 <_usb_d_dev_ep_trans+0x1f0>)
    3bd0:	191b      	adds	r3, r3, r4
    3bd2:	3340      	adds	r3, #64	; 0x40
    3bd4:	0112      	lsls	r2, r2, #4
    3bd6:	79de      	ldrb	r6, [r3, #7]
    3bd8:	2110      	movs	r1, #16
    3bda:	438e      	bics	r6, r1
    3bdc:	4316      	orrs	r6, r2
    3bde:	71de      	strb	r6, [r3, #7]
	if (dir) {
    3be0:	2d00      	cmp	r5, #0
    3be2:	db0a      	blt.n	3bfa <_usb_d_dev_ep_trans+0x18a>
		_usb_d_dev_out_next(ept, false);
    3be4:	2100      	movs	r1, #0
    3be6:	4640      	mov	r0, r8
    3be8:	4b23      	ldr	r3, [pc, #140]	; (3c78 <_usb_d_dev_ep_trans+0x208>)
    3bea:	4798      	blx	r3
	return ERR_NONE;
    3bec:	2000      	movs	r0, #0
    3bee:	e7a4      	b.n	3b3a <_usb_d_dev_ep_trans+0xca>
		atomic_leave_critical(&flags);
    3bf0:	a803      	add	r0, sp, #12
    3bf2:	4b20      	ldr	r3, [pc, #128]	; (3c74 <_usb_d_dev_ep_trans+0x204>)
    3bf4:	4798      	blx	r3
		return USB_BUSY;
    3bf6:	2001      	movs	r0, #1
    3bf8:	e79f      	b.n	3b3a <_usb_d_dev_ep_trans+0xca>
		_usb_d_dev_in_next(ept, false);
    3bfa:	2100      	movs	r1, #0
    3bfc:	4640      	mov	r0, r8
    3bfe:	4b1f      	ldr	r3, [pc, #124]	; (3c7c <_usb_d_dev_ep_trans+0x20c>)
    3c00:	4798      	blx	r3
	return ERR_NONE;
    3c02:	2000      	movs	r0, #0
    3c04:	e799      	b.n	3b3a <_usb_d_dev_ep_trans+0xca>
		return -USB_ERR_PARAM;
    3c06:	2012      	movs	r0, #18
    3c08:	4240      	negs	r0, r0
    3c0a:	e796      	b.n	3b3a <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_FUNC;
    3c0c:	2013      	movs	r0, #19
    3c0e:	4240      	negs	r0, r0
    3c10:	e793      	b.n	3b3a <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_PARAM;
    3c12:	2012      	movs	r0, #18
    3c14:	4240      	negs	r0, r0
    3c16:	e790      	b.n	3b3a <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_FUNC;
    3c18:	2013      	movs	r0, #19
    3c1a:	4240      	negs	r0, r0
    3c1c:	e78d      	b.n	3b3a <_usb_d_dev_ep_trans+0xca>
	bool     size_n_aligned = (trans->size & size_mask);
    3c1e:	6879      	ldr	r1, [r7, #4]
    3c20:	058e      	lsls	r6, r1, #22
    3c22:	0db6      	lsrs	r6, r6, #22
	return &dev_inst.ep[ep_index];
    3c24:	4b0e      	ldr	r3, [pc, #56]	; (3c60 <_usb_d_dev_ep_trans+0x1f0>)
    3c26:	2034      	movs	r0, #52	; 0x34
    3c28:	4680      	mov	r8, r0
    3c2a:	4498      	add	r8, r3
    3c2c:	2400      	movs	r4, #0
    3c2e:	e74b      	b.n	3ac8 <_usb_d_dev_ep_trans+0x58>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3c30:	2244      	movs	r2, #68	; 0x44
    3c32:	490b      	ldr	r1, [pc, #44]	; (3c60 <_usb_d_dev_ep_trans+0x1f0>)
    3c34:	5a8a      	ldrh	r2, [r1, r2]
    3c36:	490b      	ldr	r1, [pc, #44]	; (3c64 <_usb_d_dev_ep_trans+0x1f4>)
    3c38:	428a      	cmp	r2, r1
    3c3a:	d0f0      	beq.n	3c1e <_usb_d_dev_ep_trans+0x1ae>
	return &dev_inst.ep[ep_index];
    3c3c:	4908      	ldr	r1, [pc, #32]	; (3c60 <_usb_d_dev_ep_trans+0x1f0>)
    3c3e:	2034      	movs	r0, #52	; 0x34
    3c40:	4680      	mov	r8, r0
    3c42:	4488      	add	r8, r1
    3c44:	2400      	movs	r4, #0
    3c46:	e738      	b.n	3aba <_usb_d_dev_ep_trans+0x4a>
		if (!ept->cache) {
    3c48:	00a3      	lsls	r3, r4, #2
    3c4a:	191b      	adds	r3, r3, r4
    3c4c:	009b      	lsls	r3, r3, #2
    3c4e:	4a04      	ldr	r2, [pc, #16]	; (3c60 <_usb_d_dev_ep_trans+0x1f0>)
    3c50:	18d3      	adds	r3, r2, r3
    3c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3c54:	2b00      	cmp	r3, #0
    3c56:	d0df      	beq.n	3c18 <_usb_d_dev_ep_trans+0x1a8>
    3c58:	2301      	movs	r3, #1
    3c5a:	4699      	mov	r9, r3
    3c5c:	e763      	b.n	3b26 <_usb_d_dev_ep_trans+0xb6>
    3c5e:	46c0      	nop			; (mov r8, r8)
    3c60:	2000073c 	.word	0x2000073c
    3c64:	000003ff 	.word	0x000003ff
    3c68:	1fffffff 	.word	0x1fffffff
    3c6c:	20007fff 	.word	0x20007fff
    3c70:	00004b91 	.word	0x00004b91
    3c74:	00004b9f 	.word	0x00004b9f
    3c78:	0000303d 	.word	0x0000303d
    3c7c:	00002e91 	.word	0x00002e91

00003c80 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    3c80:	b510      	push	{r4, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    3c82:	230f      	movs	r3, #15
    3c84:	4003      	ands	r3, r0
    3c86:	b241      	sxtb	r1, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3c88:	2b00      	cmp	r3, #0
    3c8a:	d00e      	beq.n	3caa <_usb_d_dev_ep_abort+0x2a>
    3c8c:	001a      	movs	r2, r3
    3c8e:	2900      	cmp	r1, #0
    3c90:	db02      	blt.n	3c98 <_usb_d_dev_ep_abort+0x18>
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
    3c92:	2b04      	cmp	r3, #4
    3c94:	d902      	bls.n	3c9c <_usb_d_dev_ep_abort+0x1c>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
    3c96:	bd10      	pop	{r4, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3c98:	1d1a      	adds	r2, r3, #4
    3c9a:	e7fa      	b.n	3c92 <_usb_d_dev_ep_abort+0x12>
	return &dev_inst.ep[ep_index];
    3c9c:	3201      	adds	r2, #1
    3c9e:	2014      	movs	r0, #20
    3ca0:	4342      	muls	r2, r0
    3ca2:	4805      	ldr	r0, [pc, #20]	; (3cb8 <_usb_d_dev_ep_abort+0x38>)
    3ca4:	3020      	adds	r0, #32
    3ca6:	1880      	adds	r0, r0, r2
    3ca8:	e001      	b.n	3cae <_usb_d_dev_ep_abort+0x2e>
    3caa:	4803      	ldr	r0, [pc, #12]	; (3cb8 <_usb_d_dev_ep_abort+0x38>)
    3cac:	3034      	adds	r0, #52	; 0x34
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    3cae:	0fc9      	lsrs	r1, r1, #31
    3cb0:	2202      	movs	r2, #2
    3cb2:	4b02      	ldr	r3, [pc, #8]	; (3cbc <_usb_d_dev_ep_abort+0x3c>)
    3cb4:	4798      	blx	r3
    3cb6:	e7ee      	b.n	3c96 <_usb_d_dev_ep_abort+0x16>
    3cb8:	2000073c 	.word	0x2000073c
    3cbc:	00002cdd 	.word	0x00002cdd

00003cc0 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3cc0:	1e0b      	subs	r3, r1, #0
    3cc2:	d006      	beq.n	3cd2 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    3cc4:	2801      	cmp	r0, #1
    3cc6:	d006      	beq.n	3cd6 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    3cc8:	2800      	cmp	r0, #0
    3cca:	d101      	bne.n	3cd0 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    3ccc:	4a03      	ldr	r2, [pc, #12]	; (3cdc <_usb_d_dev_register_callback+0x1c>)
    3cce:	6213      	str	r3, [r2, #32]
	}
}
    3cd0:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3cd2:	4b03      	ldr	r3, [pc, #12]	; (3ce0 <_usb_d_dev_register_callback+0x20>)
    3cd4:	e7f6      	b.n	3cc4 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    3cd6:	4a01      	ldr	r2, [pc, #4]	; (3cdc <_usb_d_dev_register_callback+0x1c>)
    3cd8:	6253      	str	r3, [r2, #36]	; 0x24
    3cda:	e7f9      	b.n	3cd0 <_usb_d_dev_register_callback+0x10>
    3cdc:	2000073c 	.word	0x2000073c
    3ce0:	00002bed 	.word	0x00002bed

00003ce4 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3ce4:	1e0b      	subs	r3, r1, #0
    3ce6:	d008      	beq.n	3cfa <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    3ce8:	2800      	cmp	r0, #0
    3cea:	d008      	beq.n	3cfe <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    3cec:	2801      	cmp	r0, #1
    3cee:	d009      	beq.n	3d04 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    3cf0:	2802      	cmp	r0, #2
    3cf2:	d106      	bne.n	3d02 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    3cf4:	4a05      	ldr	r2, [pc, #20]	; (3d0c <_usb_d_dev_register_ep_callback+0x28>)
    3cf6:	6313      	str	r3, [r2, #48]	; 0x30
	}
}
    3cf8:	e003      	b.n	3d02 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3cfa:	4b05      	ldr	r3, [pc, #20]	; (3d10 <_usb_d_dev_register_ep_callback+0x2c>)
    3cfc:	e7f4      	b.n	3ce8 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    3cfe:	4a03      	ldr	r2, [pc, #12]	; (3d0c <_usb_d_dev_register_ep_callback+0x28>)
    3d00:	6293      	str	r3, [r2, #40]	; 0x28
}
    3d02:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    3d04:	4a01      	ldr	r2, [pc, #4]	; (3d0c <_usb_d_dev_register_ep_callback+0x28>)
    3d06:	62d3      	str	r3, [r2, #44]	; 0x2c
    3d08:	e7fb      	b.n	3d02 <_usb_d_dev_register_ep_callback+0x1e>
    3d0a:	46c0      	nop			; (mov r8, r8)
    3d0c:	2000073c 	.word	0x2000073c
    3d10:	00002bed 	.word	0x00002bed

00003d14 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    3d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    3d16:	4b8b      	ldr	r3, [pc, #556]	; (3f44 <USB_Handler+0x230>)
    3d18:	8c1e      	ldrh	r6, [r3, #32]
    3d1a:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    3d1c:	2e00      	cmp	r6, #0
    3d1e:	d003      	beq.n	3d28 <USB_Handler+0x14>
    3d20:	4c89      	ldr	r4, [pc, #548]	; (3f48 <USB_Handler+0x234>)
    3d22:	3434      	adds	r4, #52	; 0x34
	uint32_t lpm_variable = 0;
    3d24:	2500      	movs	r5, #0
    3d26:	e0ca      	b.n	3ebe <USB_Handler+0x1aa>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    3d28:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    3d2a:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    3d2c:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    3d2e:	075a      	lsls	r2, r3, #29
    3d30:	d418      	bmi.n	3d64 <USB_Handler+0x50>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    3d32:	059a      	lsls	r2, r3, #22
    3d34:	d41d      	bmi.n	3d72 <USB_Handler+0x5e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    3d36:	061a      	lsls	r2, r3, #24
    3d38:	d44f      	bmi.n	3dda <USB_Handler+0xc6>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    3d3a:	2270      	movs	r2, #112	; 0x70
    3d3c:	421a      	tst	r2, r3
    3d3e:	d155      	bne.n	3dec <USB_Handler+0xd8>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    3d40:	071a      	lsls	r2, r3, #28
    3d42:	d500      	bpl.n	3d46 <USB_Handler+0x32>
    3d44:	e06e      	b.n	3e24 <USB_Handler+0x110>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    3d46:	07db      	lsls	r3, r3, #31
    3d48:	d5ea      	bpl.n	3d20 <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3d4a:	4b7e      	ldr	r3, [pc, #504]	; (3f44 <USB_Handler+0x230>)
    3d4c:	4a7f      	ldr	r2, [pc, #508]	; (3f4c <USB_Handler+0x238>)
    3d4e:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3d50:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3d52:	3a92      	subs	r2, #146	; 0x92
    3d54:	3aff      	subs	r2, #255	; 0xff
    3d56:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    3d58:	4b7b      	ldr	r3, [pc, #492]	; (3f48 <USB_Handler+0x234>)
    3d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3d5c:	2100      	movs	r1, #0
    3d5e:	2004      	movs	r0, #4
    3d60:	4798      	blx	r3
    3d62:	e005      	b.n	3d70 <USB_Handler+0x5c>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3d64:	2204      	movs	r2, #4
    3d66:	4b77      	ldr	r3, [pc, #476]	; (3f44 <USB_Handler+0x230>)
    3d68:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    3d6a:	4b77      	ldr	r3, [pc, #476]	; (3f48 <USB_Handler+0x234>)
    3d6c:	6a1b      	ldr	r3, [r3, #32]
    3d6e:	4798      	blx	r3

	_usb_d_dev_handler();
}
    3d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d72:	4b74      	ldr	r3, [pc, #464]	; (3f44 <USB_Handler+0x230>)
    3d74:	4a75      	ldr	r2, [pc, #468]	; (3f4c <USB_Handler+0x238>)
    3d76:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3d78:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3d7a:	3a92      	subs	r2, #146	; 0x92
    3d7c:	3aff      	subs	r2, #255	; 0xff
    3d7e:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    3d80:	4b73      	ldr	r3, [pc, #460]	; (3f50 <USB_Handler+0x23c>)
    3d82:	891b      	ldrh	r3, [r3, #8]
    3d84:	071b      	lsls	r3, r3, #28
    3d86:	0f1b      	lsrs	r3, r3, #28
    3d88:	2b03      	cmp	r3, #3
    3d8a:	d024      	beq.n	3dd6 <USB_Handler+0xc2>
    3d8c:	4b70      	ldr	r3, [pc, #448]	; (3f50 <USB_Handler+0x23c>)
    3d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3d90:	071b      	lsls	r3, r3, #28
    3d92:	0f1b      	lsrs	r3, r3, #28
    3d94:	2b03      	cmp	r3, #3
    3d96:	d012      	beq.n	3dbe <USB_Handler+0xaa>
    3d98:	2348      	movs	r3, #72	; 0x48
    3d9a:	4a6d      	ldr	r2, [pc, #436]	; (3f50 <USB_Handler+0x23c>)
    3d9c:	5ad3      	ldrh	r3, [r2, r3]
    3d9e:	071b      	lsls	r3, r3, #28
    3da0:	0f1b      	lsrs	r3, r3, #28
    3da2:	2b03      	cmp	r3, #3
    3da4:	d015      	beq.n	3dd2 <USB_Handler+0xbe>
    3da6:	2368      	movs	r3, #104	; 0x68
    3da8:	5ad3      	ldrh	r3, [r2, r3]
    3daa:	071b      	lsls	r3, r3, #28
    3dac:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    3dae:	2100      	movs	r1, #0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    3db0:	2b03      	cmp	r3, #3
    3db2:	d005      	beq.n	3dc0 <USB_Handler+0xac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    3db4:	4b64      	ldr	r3, [pc, #400]	; (3f48 <USB_Handler+0x234>)
    3db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3db8:	2003      	movs	r0, #3
    3dba:	4798      	blx	r3
    3dbc:	e7d8      	b.n	3d70 <USB_Handler+0x5c>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    3dbe:	2301      	movs	r3, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    3dc0:	015b      	lsls	r3, r3, #5
    3dc2:	4a63      	ldr	r2, [pc, #396]	; (3f50 <USB_Handler+0x23c>)
    3dc4:	18d3      	adds	r3, r2, r3
    3dc6:	8919      	ldrh	r1, [r3, #8]
    3dc8:	0449      	lsls	r1, r1, #17
    3dca:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    3dcc:	2200      	movs	r2, #0
    3dce:	811a      	strh	r2, [r3, #8]
    3dd0:	e7f0      	b.n	3db4 <USB_Handler+0xa0>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    3dd2:	2302      	movs	r3, #2
    3dd4:	e7f4      	b.n	3dc0 <USB_Handler+0xac>
    3dd6:	2300      	movs	r3, #0
    3dd8:	e7f2      	b.n	3dc0 <USB_Handler+0xac>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3dda:	2280      	movs	r2, #128	; 0x80
    3ddc:	4b59      	ldr	r3, [pc, #356]	; (3f44 <USB_Handler+0x230>)
    3dde:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    3de0:	4b59      	ldr	r3, [pc, #356]	; (3f48 <USB_Handler+0x234>)
    3de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3de4:	2100      	movs	r1, #0
    3de6:	2005      	movs	r0, #5
    3de8:	4798      	blx	r3
    3dea:	e7c1      	b.n	3d70 <USB_Handler+0x5c>
    3dec:	4b55      	ldr	r3, [pc, #340]	; (3f44 <USB_Handler+0x230>)
    3dee:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3df0:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3df2:	4a56      	ldr	r2, [pc, #344]	; (3f4c <USB_Handler+0x238>)
    3df4:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3df6:	4b57      	ldr	r3, [pc, #348]	; (3f54 <USB_Handler+0x240>)
    3df8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3dfa:	069b      	lsls	r3, r3, #26
    3dfc:	d40c      	bmi.n	3e18 <USB_Handler+0x104>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3dfe:	4955      	ldr	r1, [pc, #340]	; (3f54 <USB_Handler+0x240>)
	tmp &= mask;
    3e00:	3a32      	subs	r2, #50	; 0x32
    3e02:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3e04:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    3e06:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    3e08:	2bd0      	cmp	r3, #208	; 0xd0
    3e0a:	d1fb      	bne.n	3e04 <USB_Handler+0xf0>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    3e0c:	4b4e      	ldr	r3, [pc, #312]	; (3f48 <USB_Handler+0x234>)
    3e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3e10:	2100      	movs	r1, #0
    3e12:	2002      	movs	r0, #2
    3e14:	4798      	blx	r3
    3e16:	e7ab      	b.n	3d70 <USB_Handler+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3e18:	494e      	ldr	r1, [pc, #312]	; (3f54 <USB_Handler+0x240>)
	tmp &= mask;
    3e1a:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3e1c:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    3e1e:	421a      	tst	r2, r3
    3e20:	d0fc      	beq.n	3e1c <USB_Handler+0x108>
    3e22:	e7f3      	b.n	3e0c <USB_Handler+0xf8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3e24:	4b47      	ldr	r3, [pc, #284]	; (3f44 <USB_Handler+0x230>)
    3e26:	2100      	movs	r1, #0
    3e28:	2280      	movs	r2, #128	; 0x80
    3e2a:	0052      	lsls	r2, r2, #1
    3e2c:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3e2e:	3af8      	subs	r2, #248	; 0xf8
    3e30:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3e32:	3268      	adds	r2, #104	; 0x68
    3e34:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3e36:	4a45      	ldr	r2, [pc, #276]	; (3f4c <USB_Handler+0x238>)
    3e38:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    3e3a:	4b47      	ldr	r3, [pc, #284]	; (3f58 <USB_Handler+0x244>)
    3e3c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    3e3e:	4b42      	ldr	r3, [pc, #264]	; (3f48 <USB_Handler+0x234>)
    3e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3e42:	2100      	movs	r1, #0
    3e44:	2001      	movs	r0, #1
    3e46:	4798      	blx	r3
    3e48:	e792      	b.n	3d70 <USB_Handler+0x5c>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3e4a:	06cb      	lsls	r3, r1, #27
    3e4c:	d407      	bmi.n	3e5e <USB_Handler+0x14a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3e4e:	064b      	lsls	r3, r1, #25
    3e50:	d408      	bmi.n	3e64 <USB_Handler+0x150>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3e52:	068b      	lsls	r3, r1, #26
    3e54:	d52e      	bpl.n	3eb4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 0);
    3e56:	2100      	movs	r1, #0
    3e58:	4b40      	ldr	r3, [pc, #256]	; (3f5c <USB_Handler+0x248>)
    3e5a:	4798      	blx	r3
    3e5c:	e02a      	b.n	3eb4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_setup(ept);
    3e5e:	4b40      	ldr	r3, [pc, #256]	; (3f60 <USB_Handler+0x24c>)
    3e60:	4798      	blx	r3
    3e62:	e027      	b.n	3eb4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 1);
    3e64:	2101      	movs	r1, #1
    3e66:	4b3d      	ldr	r3, [pc, #244]	; (3f5c <USB_Handler+0x248>)
    3e68:	4798      	blx	r3
    3e6a:	e023      	b.n	3eb4 <USB_Handler+0x1a0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3e6c:	064b      	lsls	r3, r1, #25
    3e6e:	d40e      	bmi.n	3e8e <USB_Handler+0x17a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3e70:	070b      	lsls	r3, r1, #28
    3e72:	d410      	bmi.n	3e96 <USB_Handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3e74:	078b      	lsls	r3, r1, #30
    3e76:	d412      	bmi.n	3e9e <USB_Handler+0x18a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3e78:	2307      	movs	r3, #7
    3e7a:	401a      	ands	r2, r3
    3e7c:	2a01      	cmp	r2, #1
    3e7e:	d119      	bne.n	3eb4 <USB_Handler+0x1a0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3e80:	074b      	lsls	r3, r1, #29
    3e82:	d410      	bmi.n	3ea6 <USB_Handler+0x192>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3e84:	06cb      	lsls	r3, r1, #27
    3e86:	d515      	bpl.n	3eb4 <USB_Handler+0x1a0>
			_usb_d_dev_handle_setup(ept);
    3e88:	4b35      	ldr	r3, [pc, #212]	; (3f60 <USB_Handler+0x24c>)
    3e8a:	4798      	blx	r3
    3e8c:	e012      	b.n	3eb4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 1);
    3e8e:	2101      	movs	r1, #1
    3e90:	4b32      	ldr	r3, [pc, #200]	; (3f5c <USB_Handler+0x248>)
    3e92:	4798      	blx	r3
    3e94:	e00e      	b.n	3eb4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_trfail(ept, 1);
    3e96:	2101      	movs	r1, #1
    3e98:	4b32      	ldr	r3, [pc, #200]	; (3f64 <USB_Handler+0x250>)
    3e9a:	4798      	blx	r3
    3e9c:	e00a      	b.n	3eb4 <USB_Handler+0x1a0>
		_usb_d_dev_in_next(ept, true);
    3e9e:	2101      	movs	r1, #1
    3ea0:	4b31      	ldr	r3, [pc, #196]	; (3f68 <USB_Handler+0x254>)
    3ea2:	4798      	blx	r3
    3ea4:	e006      	b.n	3eb4 <USB_Handler+0x1a0>
			_usb_d_dev_handle_trfail(ept, 0);
    3ea6:	2100      	movs	r1, #0
    3ea8:	4b2e      	ldr	r3, [pc, #184]	; (3f64 <USB_Handler+0x250>)
    3eaa:	4798      	blx	r3
    3eac:	e002      	b.n	3eb4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 0);
    3eae:	2100      	movs	r1, #0
    3eb0:	4b2a      	ldr	r3, [pc, #168]	; (3f5c <USB_Handler+0x248>)
    3eb2:	4798      	blx	r3
    3eb4:	3501      	adds	r5, #1
    3eb6:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    3eb8:	2d09      	cmp	r5, #9
    3eba:	d100      	bne.n	3ebe <USB_Handler+0x1aa>
    3ebc:	e758      	b.n	3d70 <USB_Handler+0x5c>
    3ebe:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    3ec0:	7ca1      	ldrb	r1, [r4, #18]
    3ec2:	29ff      	cmp	r1, #255	; 0xff
    3ec4:	d0f6      	beq.n	3eb4 <USB_Handler+0x1a0>
	if (!(epint & (1u << epn))) {
    3ec6:	230f      	movs	r3, #15
    3ec8:	400b      	ands	r3, r1
    3eca:	2101      	movs	r1, #1
    3ecc:	4099      	lsls	r1, r3
    3ece:	420e      	tst	r6, r1
    3ed0:	d0f0      	beq.n	3eb4 <USB_Handler+0x1a0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    3ed2:	0159      	lsls	r1, r3, #5
    3ed4:	4f25      	ldr	r7, [pc, #148]	; (3f6c <USB_Handler+0x258>)
    3ed6:	46bc      	mov	ip, r7
    3ed8:	4461      	add	r1, ip
    3eda:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    3edc:	015b      	lsls	r3, r3, #5
    3ede:	4f24      	ldr	r7, [pc, #144]	; (3f70 <USB_Handler+0x25c>)
    3ee0:	46bc      	mov	ip, r7
    3ee2:	4463      	add	r3, ip
    3ee4:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    3ee6:	4019      	ands	r1, r3
	if (flags) {
    3ee8:	d0e4      	beq.n	3eb4 <USB_Handler+0x1a0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3eea:	00ab      	lsls	r3, r5, #2
    3eec:	195a      	adds	r2, r3, r5
    3eee:	0092      	lsls	r2, r2, #2
    3ef0:	4b15      	ldr	r3, [pc, #84]	; (3f48 <USB_Handler+0x234>)
    3ef2:	469c      	mov	ip, r3
    3ef4:	4462      	add	r2, ip
    3ef6:	3230      	adds	r2, #48	; 0x30
    3ef8:	7dd2      	ldrb	r2, [r2, #23]
    3efa:	2347      	movs	r3, #71	; 0x47
    3efc:	4013      	ands	r3, r2
    3efe:	2b01      	cmp	r3, #1
    3f00:	d0a3      	beq.n	3e4a <USB_Handler+0x136>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    3f02:	b253      	sxtb	r3, r2
    3f04:	2b00      	cmp	r3, #0
    3f06:	dbb1      	blt.n	3e6c <USB_Handler+0x158>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3f08:	068b      	lsls	r3, r1, #26
    3f0a:	d4d0      	bmi.n	3eae <USB_Handler+0x19a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3f0c:	074b      	lsls	r3, r1, #29
    3f0e:	d40c      	bmi.n	3f2a <USB_Handler+0x216>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3f10:	07cb      	lsls	r3, r1, #31
    3f12:	d40e      	bmi.n	3f32 <USB_Handler+0x21e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3f14:	2307      	movs	r3, #7
    3f16:	401a      	ands	r2, r3
    3f18:	2a01      	cmp	r2, #1
    3f1a:	d1cb      	bne.n	3eb4 <USB_Handler+0x1a0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3f1c:	070b      	lsls	r3, r1, #28
    3f1e:	d40c      	bmi.n	3f3a <USB_Handler+0x226>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3f20:	06cb      	lsls	r3, r1, #27
    3f22:	d5c7      	bpl.n	3eb4 <USB_Handler+0x1a0>
			_usb_d_dev_handle_setup(ept);
    3f24:	4b0e      	ldr	r3, [pc, #56]	; (3f60 <USB_Handler+0x24c>)
    3f26:	4798      	blx	r3
    3f28:	e7c4      	b.n	3eb4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_trfail(ept, 0);
    3f2a:	2100      	movs	r1, #0
    3f2c:	4b0d      	ldr	r3, [pc, #52]	; (3f64 <USB_Handler+0x250>)
    3f2e:	4798      	blx	r3
    3f30:	e7c0      	b.n	3eb4 <USB_Handler+0x1a0>
		_usb_d_dev_out_next(ept, true);
    3f32:	2101      	movs	r1, #1
    3f34:	4b0f      	ldr	r3, [pc, #60]	; (3f74 <USB_Handler+0x260>)
    3f36:	4798      	blx	r3
    3f38:	e7bc      	b.n	3eb4 <USB_Handler+0x1a0>
			_usb_d_dev_handle_trfail(ept, 1);
    3f3a:	2101      	movs	r1, #1
    3f3c:	4b09      	ldr	r3, [pc, #36]	; (3f64 <USB_Handler+0x250>)
    3f3e:	4798      	blx	r3
    3f40:	e7b8      	b.n	3eb4 <USB_Handler+0x1a0>
    3f42:	46c0      	nop			; (mov r8, r8)
    3f44:	41005000 	.word	0x41005000
    3f48:	2000073c 	.word	0x2000073c
    3f4c:	00000201 	.word	0x00000201
    3f50:	200006bc 	.word	0x200006bc
    3f54:	40000800 	.word	0x40000800
    3f58:	00002e49 	.word	0x00002e49
    3f5c:	00002c85 	.word	0x00002c85
    3f60:	00002bf1 	.word	0x00002bf1
    3f64:	00002d49 	.word	0x00002d49
    3f68:	00002e91 	.word	0x00002e91
    3f6c:	41005100 	.word	0x41005100
    3f70:	41005109 	.word	0x41005109
    3f74:	0000303d 	.word	0x0000303d

00003f78 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3f78:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f7a:	b083      	sub	sp, #12
    3f7c:	0006      	movs	r6, r0
    3f7e:	000c      	movs	r4, r1
    3f80:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    3f82:	780a      	ldrb	r2, [r1, #0]
    3f84:	0653      	lsls	r3, r2, #25
    3f86:	0f9b      	lsrs	r3, r3, #30
    3f88:	2b01      	cmp	r3, #1
    3f8a:	d000      	beq.n	3f8e <cdcdf_acm_req+0x16>
    3f8c:	e06c      	b.n	4068 <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    3f8e:	7909      	ldrb	r1, [r1, #4]
    3f90:	7963      	ldrb	r3, [r4, #5]
    3f92:	021b      	lsls	r3, r3, #8
    3f94:	430b      	orrs	r3, r1
    3f96:	493b      	ldr	r1, [pc, #236]	; (4084 <cdcdf_acm_req+0x10c>)
    3f98:	7809      	ldrb	r1, [r1, #0]
    3f9a:	4299      	cmp	r1, r3
    3f9c:	d003      	beq.n	3fa6 <cdcdf_acm_req+0x2e>
    3f9e:	4939      	ldr	r1, [pc, #228]	; (4084 <cdcdf_acm_req+0x10c>)
    3fa0:	7849      	ldrb	r1, [r1, #1]
    3fa2:	4299      	cmp	r1, r3
    3fa4:	d163      	bne.n	406e <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    3fa6:	b252      	sxtb	r2, r2
    3fa8:	2a00      	cmp	r2, #0
    3faa:	db0e      	blt.n	3fca <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    3fac:	79a7      	ldrb	r7, [r4, #6]
    3fae:	79e3      	ldrb	r3, [r4, #7]
    3fb0:	021b      	lsls	r3, r3, #8
    3fb2:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    3fb4:	4b34      	ldr	r3, [pc, #208]	; (4088 <cdcdf_acm_req+0x110>)
    3fb6:	4798      	blx	r3
	switch (req->bRequest) {
    3fb8:	7863      	ldrb	r3, [r4, #1]
    3fba:	2b20      	cmp	r3, #32
    3fbc:	d018      	beq.n	3ff0 <cdcdf_acm_req+0x78>
    3fbe:	2b22      	cmp	r3, #34	; 0x22
    3fc0:	d03c      	beq.n	403c <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    3fc2:	200d      	movs	r0, #13
    3fc4:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    3fc6:	b003      	add	sp, #12
    3fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    3fca:	2d01      	cmp	r5, #1
    3fcc:	d052      	beq.n	4074 <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    3fce:	7863      	ldrb	r3, [r4, #1]
    3fd0:	2b21      	cmp	r3, #33	; 0x21
    3fd2:	d151      	bne.n	4078 <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    3fd4:	79a2      	ldrb	r2, [r4, #6]
    3fd6:	79e3      	ldrb	r3, [r4, #7]
    3fd8:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3fda:	4313      	orrs	r3, r2
    3fdc:	2b07      	cmp	r3, #7
    3fde:	d14e      	bne.n	407e <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    3fe0:	2300      	movs	r3, #0
    3fe2:	2207      	movs	r2, #7
    3fe4:	4927      	ldr	r1, [pc, #156]	; (4084 <cdcdf_acm_req+0x10c>)
    3fe6:	3108      	adds	r1, #8
    3fe8:	0030      	movs	r0, r6
    3fea:	4c28      	ldr	r4, [pc, #160]	; (408c <cdcdf_acm_req+0x114>)
    3fec:	47a0      	blx	r4
    3fee:	e7ea      	b.n	3fc6 <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3ff0:	2f07      	cmp	r7, #7
    3ff2:	d134      	bne.n	405e <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    3ff4:	2d00      	cmp	r5, #0
    3ff6:	d01a      	beq.n	402e <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    3ff8:	2207      	movs	r2, #7
    3ffa:	0001      	movs	r1, r0
    3ffc:	4668      	mov	r0, sp
    3ffe:	4b24      	ldr	r3, [pc, #144]	; (4090 <cdcdf_acm_req+0x118>)
    4000:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    4002:	4b20      	ldr	r3, [pc, #128]	; (4084 <cdcdf_acm_req+0x10c>)
    4004:	691b      	ldr	r3, [r3, #16]
    4006:	2b00      	cmp	r3, #0
    4008:	d005      	beq.n	4016 <cdcdf_acm_req+0x9e>
    400a:	4668      	mov	r0, sp
    400c:	4798      	blx	r3
    400e:	0003      	movs	r3, r0
			return ERR_NONE;
    4010:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    4012:	2b00      	cmp	r3, #0
    4014:	d0d7      	beq.n	3fc6 <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    4016:	4a1b      	ldr	r2, [pc, #108]	; (4084 <cdcdf_acm_req+0x10c>)
    4018:	0013      	movs	r3, r2
    401a:	9900      	ldr	r1, [sp, #0]
    401c:	6091      	str	r1, [r2, #8]
    401e:	466a      	mov	r2, sp
    4020:	8892      	ldrh	r2, [r2, #4]
    4022:	819a      	strh	r2, [r3, #12]
    4024:	466a      	mov	r2, sp
    4026:	7992      	ldrb	r2, [r2, #6]
    4028:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    402a:	2000      	movs	r0, #0
    402c:	e7cb      	b.n	3fc6 <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    402e:	2300      	movs	r3, #0
    4030:	2207      	movs	r2, #7
    4032:	0001      	movs	r1, r0
    4034:	0030      	movs	r0, r6
    4036:	4c15      	ldr	r4, [pc, #84]	; (408c <cdcdf_acm_req+0x114>)
    4038:	47a0      	blx	r4
    403a:	e7c4      	b.n	3fc6 <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    403c:	2300      	movs	r3, #0
    403e:	2200      	movs	r2, #0
    4040:	2100      	movs	r1, #0
    4042:	2000      	movs	r0, #0
    4044:	4d11      	ldr	r5, [pc, #68]	; (408c <cdcdf_acm_req+0x114>)
    4046:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    4048:	4b0e      	ldr	r3, [pc, #56]	; (4084 <cdcdf_acm_req+0x10c>)
    404a:	695b      	ldr	r3, [r3, #20]
    404c:	2b00      	cmp	r3, #0
    404e:	d009      	beq.n	4064 <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    4050:	78a2      	ldrb	r2, [r4, #2]
    4052:	78e0      	ldrb	r0, [r4, #3]
    4054:	0200      	lsls	r0, r0, #8
    4056:	4310      	orrs	r0, r2
    4058:	4798      	blx	r3
		return ERR_NONE;
    405a:	2000      	movs	r0, #0
    405c:	e7b3      	b.n	3fc6 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    405e:	2001      	movs	r0, #1
    4060:	4240      	negs	r0, r0
    4062:	e7b0      	b.n	3fc6 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    4064:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    4066:	e7ae      	b.n	3fc6 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    4068:	200a      	movs	r0, #10
    406a:	4240      	negs	r0, r0
    406c:	e7ab      	b.n	3fc6 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    406e:	200a      	movs	r0, #10
    4070:	4240      	negs	r0, r0
    4072:	e7a8      	b.n	3fc6 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    4074:	2000      	movs	r0, #0
    4076:	e7a6      	b.n	3fc6 <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    4078:	200d      	movs	r0, #13
    407a:	4240      	negs	r0, r0
    407c:	e7a3      	b.n	3fc6 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    407e:	2001      	movs	r0, #1
    4080:	4240      	negs	r0, r0
    4082:	e7a0      	b.n	3fc6 <cdcdf_acm_req+0x4e>
    4084:	20000a24 	.word	0x20000a24
    4088:	00004a15 	.word	0x00004a15
    408c:	000044c5 	.word	0x000044c5
    4090:	00004d2d 	.word	0x00004d2d

00004094 <cdcdf_acm_ctrl>:
{
    4094:	b5f0      	push	{r4, r5, r6, r7, lr}
    4096:	46de      	mov	lr, fp
    4098:	4657      	mov	r7, sl
    409a:	464e      	mov	r6, r9
    409c:	4645      	mov	r5, r8
    409e:	b5e0      	push	{r5, r6, r7, lr}
    40a0:	b083      	sub	sp, #12
    40a2:	0016      	movs	r6, r2
	switch (ctrl) {
    40a4:	2901      	cmp	r1, #1
    40a6:	d068      	beq.n	417a <cdcdf_acm_ctrl+0xe6>
    40a8:	2900      	cmp	r1, #0
    40aa:	d00b      	beq.n	40c4 <cdcdf_acm_ctrl+0x30>
    40ac:	2902      	cmp	r1, #2
    40ae:	d100      	bne.n	40b2 <cdcdf_acm_ctrl+0x1e>
    40b0:	e093      	b.n	41da <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    40b2:	200d      	movs	r0, #13
    40b4:	4240      	negs	r0, r0
}
    40b6:	b003      	add	sp, #12
    40b8:	bc3c      	pop	{r2, r3, r4, r5}
    40ba:	4690      	mov	r8, r2
    40bc:	4699      	mov	r9, r3
    40be:	46a2      	mov	sl, r4
    40c0:	46ab      	mov	fp, r5
    40c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    40c4:	6883      	ldr	r3, [r0, #8]
    40c6:	4698      	mov	r8, r3
	ifc = desc->sod;
    40c8:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    40ca:	2800      	cmp	r0, #0
    40cc:	d100      	bne.n	40d0 <cdcdf_acm_ctrl+0x3c>
    40ce:	e087      	b.n	41e0 <cdcdf_acm_ctrl+0x14c>
    40d0:	9301      	str	r3, [sp, #4]
    40d2:	2301      	movs	r3, #1
    40d4:	4443      	add	r3, r8
    40d6:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    40d8:	4f47      	ldr	r7, [pc, #284]	; (41f8 <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    40da:	4b48      	ldr	r3, [pc, #288]	; (41fc <cdcdf_acm_ctrl+0x168>)
    40dc:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    40de:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    40e0:	7943      	ldrb	r3, [r0, #5]
    40e2:	2108      	movs	r1, #8
    40e4:	438b      	bics	r3, r1
    40e6:	2b02      	cmp	r3, #2
    40e8:	d002      	beq.n	40f0 <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    40ea:	200a      	movs	r0, #10
    40ec:	4240      	negs	r0, r0
    40ee:	e7e2      	b.n	40b6 <cdcdf_acm_ctrl+0x22>
    40f0:	9901      	ldr	r1, [sp, #4]
    40f2:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    40f4:	780b      	ldrb	r3, [r1, #0]
    40f6:	429a      	cmp	r2, r3
    40f8:	d075      	beq.n	41e6 <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    40fa:	2bff      	cmp	r3, #255	; 0xff
    40fc:	d176      	bne.n	41ec <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    40fe:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    4100:	2205      	movs	r2, #5
    4102:	6871      	ldr	r1, [r6, #4]
    4104:	4b3e      	ldr	r3, [pc, #248]	; (4200 <cdcdf_acm_ctrl+0x16c>)
    4106:	4798      	blx	r3
    4108:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    410a:	d11e      	bne.n	414a <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    410c:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    410e:	7803      	ldrb	r3, [r0, #0]
    4110:	18c0      	adds	r0, r0, r3
    4112:	2204      	movs	r2, #4
    4114:	6871      	ldr	r1, [r6, #4]
    4116:	4b3a      	ldr	r3, [pc, #232]	; (4200 <cdcdf_acm_ctrl+0x16c>)
    4118:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    411a:	9b01      	ldr	r3, [sp, #4]
    411c:	455b      	cmp	r3, fp
    411e:	d027      	beq.n	4170 <cdcdf_acm_ctrl+0xdc>
    4120:	9b01      	ldr	r3, [sp, #4]
    4122:	3301      	adds	r3, #1
    4124:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    4126:	2800      	cmp	r0, #0
    4128:	d1d9      	bne.n	40de <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    412a:	200a      	movs	r0, #10
    412c:	4240      	negs	r0, r0
    412e:	e7c2      	b.n	40b6 <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    4130:	4653      	mov	r3, sl
    4132:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    4134:	0028      	movs	r0, r5
    4136:	4b31      	ldr	r3, [pc, #196]	; (41fc <cdcdf_acm_ctrl+0x168>)
    4138:	4798      	blx	r3
			desc->sod = ep;
    413a:	6034      	str	r4, [r6, #0]
    413c:	7820      	ldrb	r0, [r4, #0]
    413e:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    4140:	6871      	ldr	r1, [r6, #4]
    4142:	4b30      	ldr	r3, [pc, #192]	; (4204 <cdcdf_acm_ctrl+0x170>)
    4144:	4798      	blx	r3
    4146:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    4148:	d0e0      	beq.n	410c <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    414a:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    414c:	7963      	ldrb	r3, [r4, #5]
    414e:	021b      	lsls	r3, r3, #8
    4150:	7922      	ldrb	r2, [r4, #4]
    4152:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    4154:	b292      	uxth	r2, r2
    4156:	78e1      	ldrb	r1, [r4, #3]
    4158:	0028      	movs	r0, r5
    415a:	47b8      	blx	r7
    415c:	2800      	cmp	r0, #0
    415e:	d148      	bne.n	41f2 <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    4160:	b26b      	sxtb	r3, r5
    4162:	2b00      	cmp	r3, #0
    4164:	dbe4      	blt.n	4130 <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    4166:	4643      	mov	r3, r8
    4168:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    416a:	0028      	movs	r0, r5
    416c:	47c8      	blx	r9
    416e:	e7e4      	b.n	413a <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    4170:	2201      	movs	r2, #1
    4172:	4b25      	ldr	r3, [pc, #148]	; (4208 <cdcdf_acm_ctrl+0x174>)
    4174:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    4176:	2000      	movs	r0, #0
    4178:	e79d      	b.n	40b6 <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    417a:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    417c:	2a00      	cmp	r2, #0
    417e:	d008      	beq.n	4192 <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    4180:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    4182:	795b      	ldrb	r3, [r3, #5]
    4184:	2208      	movs	r2, #8
    4186:	4393      	bics	r3, r2
    4188:	2b02      	cmp	r3, #2
    418a:	d002      	beq.n	4192 <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    418c:	200a      	movs	r0, #10
    418e:	4240      	negs	r0, r0
    4190:	e791      	b.n	40b6 <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    4192:	7823      	ldrb	r3, [r4, #0]
    4194:	2bff      	cmp	r3, #255	; 0xff
    4196:	d008      	beq.n	41aa <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    4198:	23ff      	movs	r3, #255	; 0xff
    419a:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    419c:	78a0      	ldrb	r0, [r4, #2]
    419e:	28ff      	cmp	r0, #255	; 0xff
    41a0:	d003      	beq.n	41aa <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    41a2:	4b1a      	ldr	r3, [pc, #104]	; (420c <cdcdf_acm_ctrl+0x178>)
    41a4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    41a6:	23ff      	movs	r3, #255	; 0xff
    41a8:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    41aa:	7863      	ldrb	r3, [r4, #1]
    41ac:	2bff      	cmp	r3, #255	; 0xff
    41ae:	d008      	beq.n	41c2 <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    41b0:	23ff      	movs	r3, #255	; 0xff
    41b2:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    41b4:	78e0      	ldrb	r0, [r4, #3]
    41b6:	28ff      	cmp	r0, #255	; 0xff
    41b8:	d003      	beq.n	41c2 <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    41ba:	4b14      	ldr	r3, [pc, #80]	; (420c <cdcdf_acm_ctrl+0x178>)
    41bc:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    41be:	23ff      	movs	r3, #255	; 0xff
    41c0:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    41c2:	7920      	ldrb	r0, [r4, #4]
    41c4:	28ff      	cmp	r0, #255	; 0xff
    41c6:	d003      	beq.n	41d0 <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    41c8:	4b10      	ldr	r3, [pc, #64]	; (420c <cdcdf_acm_ctrl+0x178>)
    41ca:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    41cc:	23ff      	movs	r3, #255	; 0xff
    41ce:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    41d0:	2200      	movs	r2, #0
    41d2:	4b0d      	ldr	r3, [pc, #52]	; (4208 <cdcdf_acm_ctrl+0x174>)
    41d4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    41d6:	2000      	movs	r0, #0
    41d8:	e76d      	b.n	40b6 <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    41da:	201b      	movs	r0, #27
    41dc:	4240      	negs	r0, r0
    41de:	e76a      	b.n	40b6 <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    41e0:	200a      	movs	r0, #10
    41e2:	4240      	negs	r0, r0
    41e4:	e767      	b.n	40b6 <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    41e6:	2012      	movs	r0, #18
    41e8:	4240      	negs	r0, r0
    41ea:	e764      	b.n	40b6 <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    41ec:	201c      	movs	r0, #28
    41ee:	4240      	negs	r0, r0
    41f0:	e761      	b.n	40b6 <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    41f2:	2014      	movs	r0, #20
    41f4:	4240      	negs	r0, r0
    41f6:	e75e      	b.n	40b6 <cdcdf_acm_ctrl+0x22>
    41f8:	000020ed 	.word	0x000020ed
    41fc:	00002181 	.word	0x00002181
    4200:	00004a31 	.word	0x00004a31
    4204:	00004a67 	.word	0x00004a67
    4208:	20000a24 	.word	0x20000a24
    420c:	00002155 	.word	0x00002155

00004210 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    4210:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    4212:	4b0a      	ldr	r3, [pc, #40]	; (423c <cdcdf_acm_init+0x2c>)
    4214:	4798      	blx	r3
    4216:	2801      	cmp	r0, #1
    4218:	d80c      	bhi.n	4234 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    421a:	4809      	ldr	r0, [pc, #36]	; (4240 <cdcdf_acm_init+0x30>)
    421c:	4b09      	ldr	r3, [pc, #36]	; (4244 <cdcdf_acm_init+0x34>)
    421e:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    4220:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    4222:	3018      	adds	r0, #24
    4224:	4b08      	ldr	r3, [pc, #32]	; (4248 <cdcdf_acm_init+0x38>)
    4226:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    4228:	4908      	ldr	r1, [pc, #32]	; (424c <cdcdf_acm_init+0x3c>)
    422a:	2001      	movs	r0, #1
    422c:	4b08      	ldr	r3, [pc, #32]	; (4250 <cdcdf_acm_init+0x40>)
    422e:	4798      	blx	r3
	return ERR_NONE;
    4230:	2000      	movs	r0, #0
}
    4232:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    4234:	2011      	movs	r0, #17
    4236:	4240      	negs	r0, r0
    4238:	e7fb      	b.n	4232 <cdcdf_acm_init+0x22>
    423a:	46c0      	nop			; (mov r8, r8)
    423c:	00004a21 	.word	0x00004a21
    4240:	20000a24 	.word	0x20000a24
    4244:	00004095 	.word	0x00004095
    4248:	000049b9 	.word	0x000049b9
    424c:	20000004 	.word	0x20000004
    4250:	00004921 	.word	0x00004921

00004254 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    4254:	b510      	push	{r4, lr}
    4256:	0004      	movs	r4, r0
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    4258:	4b07      	ldr	r3, [pc, #28]	; (4278 <cdcdf_acm_read+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    425a:	795b      	ldrb	r3, [r3, #5]
    425c:	2b00      	cmp	r3, #0
    425e:	d007      	beq.n	4270 <cdcdf_acm_read+0x1c>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    4260:	4b05      	ldr	r3, [pc, #20]	; (4278 <cdcdf_acm_read+0x24>)
    4262:	7918      	ldrb	r0, [r3, #4]
    4264:	2300      	movs	r3, #0
    4266:	000a      	movs	r2, r1
    4268:	0021      	movs	r1, r4
    426a:	4c04      	ldr	r4, [pc, #16]	; (427c <cdcdf_acm_read+0x28>)
    426c:	47a0      	blx	r4
}
    426e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    4270:	2011      	movs	r0, #17
    4272:	4240      	negs	r0, r0
    4274:	e7fb      	b.n	426e <cdcdf_acm_read+0x1a>
    4276:	46c0      	nop			; (mov r8, r8)
    4278:	20000a24 	.word	0x20000a24
    427c:	000044c5 	.word	0x000044c5

00004280 <cdcdf_acm_write>:
{
    4280:	b510      	push	{r4, lr}
    4282:	0004      	movs	r4, r0
	return _cdcdf_acm_funcd.enabled;
    4284:	4b07      	ldr	r3, [pc, #28]	; (42a4 <cdcdf_acm_write+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    4286:	795b      	ldrb	r3, [r3, #5]
    4288:	2b00      	cmp	r3, #0
    428a:	d007      	beq.n	429c <cdcdf_acm_write+0x1c>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    428c:	4b05      	ldr	r3, [pc, #20]	; (42a4 <cdcdf_acm_write+0x24>)
    428e:	78d8      	ldrb	r0, [r3, #3]
    4290:	2301      	movs	r3, #1
    4292:	000a      	movs	r2, r1
    4294:	0021      	movs	r1, r4
    4296:	4c04      	ldr	r4, [pc, #16]	; (42a8 <cdcdf_acm_write+0x28>)
    4298:	47a0      	blx	r4
}
    429a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    429c:	2011      	movs	r0, #17
    429e:	4240      	negs	r0, r0
    42a0:	e7fb      	b.n	429a <cdcdf_acm_write+0x1a>
    42a2:	46c0      	nop			; (mov r8, r8)
    42a4:	20000a24 	.word	0x20000a24
    42a8:	000044c5 	.word	0x000044c5

000042ac <cdcdf_acm_stop_xfer>:
{
    42ac:	b570      	push	{r4, r5, r6, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    42ae:	4d03      	ldr	r5, [pc, #12]	; (42bc <cdcdf_acm_stop_xfer+0x10>)
    42b0:	78e8      	ldrb	r0, [r5, #3]
    42b2:	4c03      	ldr	r4, [pc, #12]	; (42c0 <cdcdf_acm_stop_xfer+0x14>)
    42b4:	47a0      	blx	r4
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    42b6:	7928      	ldrb	r0, [r5, #4]
    42b8:	47a0      	blx	r4
}
    42ba:	bd70      	pop	{r4, r5, r6, pc}
    42bc:	20000a24 	.word	0x20000a24
    42c0:	000022f5 	.word	0x000022f5

000042c4 <cdcdf_acm_register_callback>:
{
    42c4:	b510      	push	{r4, lr}
	switch (cb_type) {
    42c6:	2801      	cmp	r0, #1
    42c8:	d010      	beq.n	42ec <cdcdf_acm_register_callback+0x28>
    42ca:	2800      	cmp	r0, #0
    42cc:	d006      	beq.n	42dc <cdcdf_acm_register_callback+0x18>
    42ce:	2802      	cmp	r0, #2
    42d0:	d014      	beq.n	42fc <cdcdf_acm_register_callback+0x38>
    42d2:	2803      	cmp	r0, #3
    42d4:	d016      	beq.n	4304 <cdcdf_acm_register_callback+0x40>
		return ERR_INVALID_ARG;
    42d6:	200d      	movs	r0, #13
    42d8:	4240      	negs	r0, r0
    42da:	e006      	b.n	42ea <cdcdf_acm_register_callback+0x26>
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    42dc:	4b0b      	ldr	r3, [pc, #44]	; (430c <cdcdf_acm_register_callback+0x48>)
    42de:	7918      	ldrb	r0, [r3, #4]
    42e0:	000a      	movs	r2, r1
    42e2:	2102      	movs	r1, #2
    42e4:	4b0a      	ldr	r3, [pc, #40]	; (4310 <cdcdf_acm_register_callback+0x4c>)
    42e6:	4798      	blx	r3
	return ERR_NONE;
    42e8:	2000      	movs	r0, #0
}
    42ea:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    42ec:	4b07      	ldr	r3, [pc, #28]	; (430c <cdcdf_acm_register_callback+0x48>)
    42ee:	78d8      	ldrb	r0, [r3, #3]
    42f0:	000a      	movs	r2, r1
    42f2:	2102      	movs	r1, #2
    42f4:	4b06      	ldr	r3, [pc, #24]	; (4310 <cdcdf_acm_register_callback+0x4c>)
    42f6:	4798      	blx	r3
	return ERR_NONE;
    42f8:	2000      	movs	r0, #0
		break;
    42fa:	e7f6      	b.n	42ea <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    42fc:	4b03      	ldr	r3, [pc, #12]	; (430c <cdcdf_acm_register_callback+0x48>)
    42fe:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    4300:	2000      	movs	r0, #0
		break;
    4302:	e7f2      	b.n	42ea <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    4304:	4b01      	ldr	r3, [pc, #4]	; (430c <cdcdf_acm_register_callback+0x48>)
    4306:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    4308:	2000      	movs	r0, #0
		break;
    430a:	e7ee      	b.n	42ea <cdcdf_acm_register_callback+0x26>
    430c:	20000a24 	.word	0x20000a24
    4310:	0000238d 	.word	0x0000238d

00004314 <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    4314:	4b01      	ldr	r3, [pc, #4]	; (431c <cdcdf_acm_is_enabled+0x8>)
    4316:	7958      	ldrb	r0, [r3, #5]
}
    4318:	4770      	bx	lr
    431a:	46c0      	nop			; (mov r8, r8)
    431c:	20000a24 	.word	0x20000a24

00004320 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    4320:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    4322:	4b06      	ldr	r3, [pc, #24]	; (433c <usbdc_unconfig+0x1c>)
    4324:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    4326:	2c00      	cmp	r4, #0
    4328:	d007      	beq.n	433a <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    432a:	2200      	movs	r2, #0
    432c:	2101      	movs	r1, #1
    432e:	0020      	movs	r0, r4
    4330:	6863      	ldr	r3, [r4, #4]
    4332:	4798      	blx	r3
		func = func->next;
    4334:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    4336:	2c00      	cmp	r4, #0
    4338:	d1f7      	bne.n	432a <usbdc_unconfig+0xa>
	}
}
    433a:	bd10      	pop	{r4, pc}
    433c:	20000a48 	.word	0x20000a48

00004340 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    4340:	b570      	push	{r4, r5, r6, lr}
    4342:	0006      	movs	r6, r0
    4344:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    4346:	4b07      	ldr	r3, [pc, #28]	; (4364 <usbdc_change_notify+0x24>)
    4348:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    434a:	2c00      	cmp	r4, #0
    434c:	d103      	bne.n	4356 <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    434e:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    4350:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    4352:	2c00      	cmp	r4, #0
    4354:	d0fb      	beq.n	434e <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    4356:	6863      	ldr	r3, [r4, #4]
    4358:	2b00      	cmp	r3, #0
    435a:	d0f9      	beq.n	4350 <usbdc_change_notify+0x10>
			cg->cb(change, value);
    435c:	0029      	movs	r1, r5
    435e:	0030      	movs	r0, r6
    4360:	4798      	blx	r3
    4362:	e7f5      	b.n	4350 <usbdc_change_notify+0x10>
    4364:	20000a48 	.word	0x20000a48

00004368 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    4368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    436a:	0007      	movs	r7, r0
    436c:	000e      	movs	r6, r1
    436e:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    4370:	4b0d      	ldr	r3, [pc, #52]	; (43a8 <usbdc_request_handler+0x40>)
    4372:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    4374:	2c00      	cmp	r4, #0
    4376:	d104      	bne.n	4382 <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    4378:	2000      	movs	r0, #0
    437a:	e011      	b.n	43a0 <usbdc_request_handler+0x38>
		h = h->next;
    437c:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    437e:	2c00      	cmp	r4, #0
    4380:	d00d      	beq.n	439e <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    4382:	6863      	ldr	r3, [r4, #4]
    4384:	2b00      	cmp	r3, #0
    4386:	d0f9      	beq.n	437c <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    4388:	002a      	movs	r2, r5
    438a:	0031      	movs	r1, r6
    438c:	0038      	movs	r0, r7
    438e:	4798      	blx	r3
			if (0 == rc) {
    4390:	2800      	cmp	r0, #0
    4392:	d006      	beq.n	43a2 <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    4394:	300a      	adds	r0, #10
    4396:	d0f1      	beq.n	437c <usbdc_request_handler+0x14>
				return -1;
    4398:	2001      	movs	r0, #1
    439a:	4240      	negs	r0, r0
    439c:	e000      	b.n	43a0 <usbdc_request_handler+0x38>
	return false;
    439e:	2000      	movs	r0, #0
}
    43a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    43a2:	2001      	movs	r0, #1
    43a4:	e7fc      	b.n	43a0 <usbdc_request_handler+0x38>
    43a6:	46c0      	nop			; (mov r8, r8)
    43a8:	20000a48 	.word	0x20000a48

000043ac <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    43ac:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    43ae:	4b06      	ldr	r3, [pc, #24]	; (43c8 <usbd_sof_cb+0x1c>)
    43b0:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    43b2:	2c00      	cmp	r4, #0
    43b4:	d103      	bne.n	43be <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    43b6:	bd10      	pop	{r4, pc}
		sof = sof->next;
    43b8:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    43ba:	2c00      	cmp	r4, #0
    43bc:	d0fb      	beq.n	43b6 <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    43be:	6863      	ldr	r3, [r4, #4]
    43c0:	2b00      	cmp	r3, #0
    43c2:	d0f9      	beq.n	43b8 <usbd_sof_cb+0xc>
			sof->cb();
    43c4:	4798      	blx	r3
    43c6:	e7f7      	b.n	43b8 <usbd_sof_cb+0xc>
    43c8:	20000a48 	.word	0x20000a48

000043cc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    43cc:	b510      	push	{r4, lr}
    43ce:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    43d0:	2900      	cmp	r1, #0
    43d2:	d003      	beq.n	43dc <usbdc_cb_ctl_done+0x10>
    43d4:	2901      	cmp	r1, #1
    43d6:	d029      	beq.n	442c <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    43d8:	2000      	movs	r0, #0
    43da:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    43dc:	7813      	ldrb	r3, [r2, #0]
    43de:	2b00      	cmp	r3, #0
    43e0:	d1fa      	bne.n	43d8 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    43e2:	7853      	ldrb	r3, [r2, #1]
    43e4:	2b05      	cmp	r3, #5
    43e6:	d011      	beq.n	440c <usbdc_cb_ctl_done+0x40>
    43e8:	2b09      	cmp	r3, #9
    43ea:	d1f5      	bne.n	43d8 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    43ec:	7892      	ldrb	r2, [r2, #2]
    43ee:	4b12      	ldr	r3, [pc, #72]	; (4438 <usbdc_cb_ctl_done+0x6c>)
    43f0:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    43f2:	78a3      	ldrb	r3, [r4, #2]
    43f4:	78e1      	ldrb	r1, [r4, #3]
    43f6:	0209      	lsls	r1, r1, #8
    43f8:	4319      	orrs	r1, r3
    43fa:	1e4b      	subs	r3, r1, #1
    43fc:	4199      	sbcs	r1, r3
    43fe:	3103      	adds	r1, #3
    4400:	4b0d      	ldr	r3, [pc, #52]	; (4438 <usbdc_cb_ctl_done+0x6c>)
    4402:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    4404:	2001      	movs	r0, #1
    4406:	4b0d      	ldr	r3, [pc, #52]	; (443c <usbdc_cb_ctl_done+0x70>)
    4408:	4798      	blx	r3
    440a:	e7e5      	b.n	43d8 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    440c:	7890      	ldrb	r0, [r2, #2]
    440e:	4b0c      	ldr	r3, [pc, #48]	; (4440 <usbdc_cb_ctl_done+0x74>)
    4410:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    4412:	78a3      	ldrb	r3, [r4, #2]
    4414:	78e1      	ldrb	r1, [r4, #3]
    4416:	0209      	lsls	r1, r1, #8
    4418:	4319      	orrs	r1, r3
    441a:	1e4b      	subs	r3, r1, #1
    441c:	4199      	sbcs	r1, r3
    441e:	3102      	adds	r1, #2
    4420:	4b05      	ldr	r3, [pc, #20]	; (4438 <usbdc_cb_ctl_done+0x6c>)
    4422:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    4424:	2001      	movs	r0, #1
    4426:	4b05      	ldr	r3, [pc, #20]	; (443c <usbdc_cb_ctl_done+0x70>)
    4428:	4798      	blx	r3
    442a:	e7d5      	b.n	43d8 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    442c:	2201      	movs	r2, #1
    442e:	0021      	movs	r1, r4
    4430:	2000      	movs	r0, #0
    4432:	4b04      	ldr	r3, [pc, #16]	; (4444 <usbdc_cb_ctl_done+0x78>)
    4434:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    4436:	e7cf      	b.n	43d8 <usbdc_cb_ctl_done+0xc>
    4438:	20000a48 	.word	0x20000a48
    443c:	00004341 	.word	0x00004341
    4440:	000020e1 	.word	0x000020e1
    4444:	00004369 	.word	0x00004369

00004448 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    4448:	b510      	push	{r4, lr}
	usbdc_unconfig();
    444a:	4b0d      	ldr	r3, [pc, #52]	; (4480 <usbdc_reset+0x38>)
    444c:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    444e:	4c0d      	ldr	r4, [pc, #52]	; (4484 <usbdc_reset+0x3c>)
    4450:	2302      	movs	r3, #2
    4452:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    4454:	2300      	movs	r3, #0
    4456:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    4458:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    445a:	2000      	movs	r0, #0
    445c:	4b0a      	ldr	r3, [pc, #40]	; (4488 <usbdc_reset+0x40>)
    445e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    4460:	7f20      	ldrb	r0, [r4, #28]
    4462:	4b0a      	ldr	r3, [pc, #40]	; (448c <usbdc_reset+0x44>)
    4464:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    4466:	4a0a      	ldr	r2, [pc, #40]	; (4490 <usbdc_reset+0x48>)
    4468:	2100      	movs	r1, #0
    446a:	2000      	movs	r0, #0
    446c:	4c09      	ldr	r4, [pc, #36]	; (4494 <usbdc_reset+0x4c>)
    446e:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    4470:	4a09      	ldr	r2, [pc, #36]	; (4498 <usbdc_reset+0x50>)
    4472:	2102      	movs	r1, #2
    4474:	2000      	movs	r0, #0
    4476:	47a0      	blx	r4
	usb_d_ep_enable(0);
    4478:	2000      	movs	r0, #0
    447a:	4b08      	ldr	r3, [pc, #32]	; (449c <usbdc_reset+0x54>)
    447c:	4798      	blx	r3
}
    447e:	bd10      	pop	{r4, pc}
    4480:	00004321 	.word	0x00004321
    4484:	20000a48 	.word	0x20000a48
    4488:	00002155 	.word	0x00002155
    448c:	00002141 	.word	0x00002141
    4490:	000044e1 	.word	0x000044e1
    4494:	0000238d 	.word	0x0000238d
    4498:	000043cd 	.word	0x000043cd
    449c:	00002181 	.word	0x00002181

000044a0 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    44a0:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    44a2:	2800      	cmp	r0, #0
    44a4:	d002      	beq.n	44ac <usbd_event_cb+0xc>
    44a6:	2801      	cmp	r0, #1
    44a8:	d004      	beq.n	44b4 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    44aa:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    44ac:	2000      	movs	r0, #0
    44ae:	4b03      	ldr	r3, [pc, #12]	; (44bc <usbd_event_cb+0x1c>)
    44b0:	4798      	blx	r3
		break;
    44b2:	e7fa      	b.n	44aa <usbd_event_cb+0xa>
		usbdc_reset();
    44b4:	4b02      	ldr	r3, [pc, #8]	; (44c0 <usbd_event_cb+0x20>)
    44b6:	4798      	blx	r3
}
    44b8:	e7f7      	b.n	44aa <usbd_event_cb+0xa>
    44ba:	46c0      	nop			; (mov r8, r8)
    44bc:	00004341 	.word	0x00004341
    44c0:	00004449 	.word	0x00004449

000044c4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    44c4:	b510      	push	{r4, lr}
    44c6:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    44c8:	ac01      	add	r4, sp, #4
    44ca:	9101      	str	r1, [sp, #4]
    44cc:	9202      	str	r2, [sp, #8]
    44ce:	7220      	strb	r0, [r4, #8]
    44d0:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    44d2:	0020      	movs	r0, r4
    44d4:	4b01      	ldr	r3, [pc, #4]	; (44dc <usbdc_xfer+0x18>)
    44d6:	4798      	blx	r3
}
    44d8:	b004      	add	sp, #16
    44da:	bd10      	pop	{r4, pc}
    44dc:	000021cd 	.word	0x000021cd

000044e0 <usbdc_cb_ctl_req>:
{
    44e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    44e2:	46c6      	mov	lr, r8
    44e4:	b500      	push	{lr}
    44e6:	b084      	sub	sp, #16
    44e8:	0005      	movs	r5, r0
    44ea:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    44ec:	2200      	movs	r2, #0
    44ee:	4bb5      	ldr	r3, [pc, #724]	; (47c4 <usbdc_cb_ctl_req+0x2e4>)
    44f0:	4798      	blx	r3
    44f2:	1c43      	adds	r3, r0, #1
    44f4:	d00d      	beq.n	4512 <usbdc_cb_ctl_req+0x32>
		return true;
    44f6:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    44f8:	2801      	cmp	r0, #1
    44fa:	d00b      	beq.n	4514 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    44fc:	7822      	ldrb	r2, [r4, #0]
    44fe:	231f      	movs	r3, #31
    4500:	0011      	movs	r1, r2
    4502:	4399      	bics	r1, r3
    4504:	d00b      	beq.n	451e <usbdc_cb_ctl_req+0x3e>
    4506:	b2cb      	uxtb	r3, r1
    4508:	2b80      	cmp	r3, #128	; 0x80
    450a:	d100      	bne.n	450e <usbdc_cb_ctl_req+0x2e>
    450c:	e0f8      	b.n	4700 <usbdc_cb_ctl_req+0x220>
		return false;
    450e:	2300      	movs	r3, #0
    4510:	e000      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		return false;
    4512:	2300      	movs	r3, #0
}
    4514:	0018      	movs	r0, r3
    4516:	b004      	add	sp, #16
    4518:	bc04      	pop	{r2}
    451a:	4690      	mov	r8, r2
    451c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    451e:	7863      	ldrb	r3, [r4, #1]
    4520:	2b0b      	cmp	r3, #11
    4522:	d900      	bls.n	4526 <usbdc_cb_ctl_req+0x46>
    4524:	e1e4      	b.n	48f0 <usbdc_cb_ctl_req+0x410>
    4526:	009b      	lsls	r3, r3, #2
    4528:	49a7      	ldr	r1, [pc, #668]	; (47c8 <usbdc_cb_ctl_req+0x2e8>)
    452a:	58cb      	ldr	r3, [r1, r3]
    452c:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    452e:	2301      	movs	r3, #1
    4530:	2200      	movs	r2, #0
    4532:	2100      	movs	r1, #0
    4534:	0028      	movs	r0, r5
    4536:	4ca5      	ldr	r4, [pc, #660]	; (47cc <usbdc_cb_ctl_req+0x2ec>)
    4538:	47a0      	blx	r4
    453a:	4243      	negs	r3, r0
    453c:	4143      	adcs	r3, r0
    453e:	b2db      	uxtb	r3, r3
    4540:	e7e8      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    4542:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    4544:	2a00      	cmp	r2, #0
    4546:	d01a      	beq.n	457e <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    4548:	4ba1      	ldr	r3, [pc, #644]	; (47d0 <usbdc_cb_ctl_req+0x2f0>)
    454a:	681b      	ldr	r3, [r3, #0]
    454c:	6859      	ldr	r1, [r3, #4]
    454e:	6818      	ldr	r0, [r3, #0]
    4550:	4ba0      	ldr	r3, [pc, #640]	; (47d4 <usbdc_cb_ctl_req+0x2f4>)
    4552:	4798      	blx	r3
	if (NULL == cfg_desc) {
    4554:	2800      	cmp	r0, #0
    4556:	d100      	bne.n	455a <usbdc_cb_ctl_req+0x7a>
    4558:	e1d4      	b.n	4904 <usbdc_cb_ctl_req+0x424>
    455a:	78c3      	ldrb	r3, [r0, #3]
    455c:	021b      	lsls	r3, r3, #8
    455e:	7881      	ldrb	r1, [r0, #2]
    4560:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    4562:	b289      	uxth	r1, r1
    4564:	1841      	adds	r1, r0, r1
    4566:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    4568:	2204      	movs	r2, #4
    456a:	4b9b      	ldr	r3, [pc, #620]	; (47d8 <usbdc_cb_ctl_req+0x2f8>)
    456c:	4798      	blx	r3
    456e:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    4570:	2800      	cmp	r0, #0
    4572:	d006      	beq.n	4582 <usbdc_cb_ctl_req+0xa2>
    4574:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    4576:	4f96      	ldr	r7, [pc, #600]	; (47d0 <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4578:	4b97      	ldr	r3, [pc, #604]	; (47d8 <usbdc_cb_ctl_req+0x2f8>)
    457a:	4698      	mov	r8, r3
    457c:	e01a      	b.n	45b4 <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    457e:	4b97      	ldr	r3, [pc, #604]	; (47dc <usbdc_cb_ctl_req+0x2fc>)
    4580:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    4582:	2301      	movs	r3, #1
    4584:	2200      	movs	r2, #0
    4586:	2100      	movs	r1, #0
    4588:	0028      	movs	r0, r5
    458a:	4c90      	ldr	r4, [pc, #576]	; (47cc <usbdc_cb_ctl_req+0x2ec>)
    458c:	47a0      	blx	r4
    458e:	4243      	negs	r3, r0
    4590:	4143      	adcs	r3, r0
    4592:	b2db      	uxtb	r3, r3
    4594:	e7be      	b.n	4514 <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    4596:	0034      	movs	r4, r6
    4598:	e000      	b.n	459c <usbdc_cb_ctl_req+0xbc>
    459a:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    459c:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    459e:	7803      	ldrb	r3, [r0, #0]
    45a0:	18c0      	adds	r0, r0, r3
    45a2:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    45a4:	9b03      	ldr	r3, [sp, #12]
    45a6:	9301      	str	r3, [sp, #4]
    45a8:	2204      	movs	r2, #4
    45aa:	0019      	movs	r1, r3
    45ac:	47c0      	blx	r8
    45ae:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    45b0:	2800      	cmp	r0, #0
    45b2:	d0e6      	beq.n	4582 <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    45b4:	7886      	ldrb	r6, [r0, #2]
    45b6:	42a6      	cmp	r6, r4
    45b8:	d0f0      	beq.n	459c <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    45ba:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    45bc:	2c00      	cmp	r4, #0
    45be:	d0ea      	beq.n	4596 <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    45c0:	aa02      	add	r2, sp, #8
    45c2:	2100      	movs	r1, #0
    45c4:	0020      	movs	r0, r4
    45c6:	6863      	ldr	r3, [r4, #4]
    45c8:	4798      	blx	r3
    45ca:	2800      	cmp	r0, #0
    45cc:	d0e5      	beq.n	459a <usbdc_cb_ctl_req+0xba>
					func = func->next;
    45ce:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    45d0:	2c00      	cmp	r4, #0
    45d2:	d1f5      	bne.n	45c0 <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    45d4:	0034      	movs	r4, r6
    45d6:	e7e1      	b.n	459c <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    45d8:	231f      	movs	r3, #31
    45da:	401a      	ands	r2, r3
		return false;
    45dc:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    45de:	2a02      	cmp	r2, #2
    45e0:	d198      	bne.n	4514 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    45e2:	79a3      	ldrb	r3, [r4, #6]
    45e4:	79e2      	ldrb	r2, [r4, #7]
    45e6:	0212      	lsls	r2, r2, #8
    45e8:	431a      	orrs	r2, r3
			return false;
    45ea:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    45ec:	2a00      	cmp	r2, #0
    45ee:	d000      	beq.n	45f2 <usbdc_cb_ctl_req+0x112>
    45f0:	e790      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    45f2:	7920      	ldrb	r0, [r4, #4]
    45f4:	2100      	movs	r1, #0
    45f6:	4b7a      	ldr	r3, [pc, #488]	; (47e0 <usbdc_cb_ctl_req+0x300>)
    45f8:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    45fa:	2301      	movs	r3, #1
    45fc:	2200      	movs	r2, #0
    45fe:	2100      	movs	r1, #0
    4600:	0028      	movs	r0, r5
    4602:	4c72      	ldr	r4, [pc, #456]	; (47cc <usbdc_cb_ctl_req+0x2ec>)
    4604:	47a0      	blx	r4
		return true;
    4606:	2301      	movs	r3, #1
    4608:	e784      	b.n	4514 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    460a:	231f      	movs	r3, #31
    460c:	401a      	ands	r2, r3
		return false;
    460e:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4610:	2a02      	cmp	r2, #2
    4612:	d000      	beq.n	4616 <usbdc_cb_ctl_req+0x136>
    4614:	e77e      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    4616:	79a3      	ldrb	r3, [r4, #6]
    4618:	79e2      	ldrb	r2, [r4, #7]
    461a:	0212      	lsls	r2, r2, #8
    461c:	431a      	orrs	r2, r3
			return false;
    461e:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    4620:	2a00      	cmp	r2, #0
    4622:	d000      	beq.n	4626 <usbdc_cb_ctl_req+0x146>
    4624:	e776      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    4626:	7920      	ldrb	r0, [r4, #4]
    4628:	2101      	movs	r1, #1
    462a:	4b6d      	ldr	r3, [pc, #436]	; (47e0 <usbdc_cb_ctl_req+0x300>)
    462c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    462e:	2301      	movs	r3, #1
    4630:	2200      	movs	r2, #0
    4632:	2100      	movs	r1, #0
    4634:	0028      	movs	r0, r5
    4636:	4c65      	ldr	r4, [pc, #404]	; (47cc <usbdc_cb_ctl_req+0x2ec>)
    4638:	47a0      	blx	r4
		return true;
    463a:	2301      	movs	r3, #1
    463c:	e76a      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    463e:	78a3      	ldrb	r3, [r4, #2]
    4640:	78e5      	ldrb	r5, [r4, #3]
    4642:	022d      	lsls	r5, r5, #8
    4644:	431d      	orrs	r5, r3
    4646:	7923      	ldrb	r3, [r4, #4]
    4648:	7964      	ldrb	r4, [r4, #5]
    464a:	0224      	lsls	r4, r4, #8
    464c:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    464e:	4a60      	ldr	r2, [pc, #384]	; (47d0 <usbdc_cb_ctl_req+0x2f0>)
    4650:	6813      	ldr	r3, [r2, #0]
    4652:	7ed2      	ldrb	r2, [r2, #27]
    4654:	6859      	ldr	r1, [r3, #4]
    4656:	6818      	ldr	r0, [r3, #0]
    4658:	4b5e      	ldr	r3, [pc, #376]	; (47d4 <usbdc_cb_ctl_req+0x2f4>)
    465a:	4798      	blx	r3
	if (NULL == ifc) {
    465c:	2800      	cmp	r0, #0
    465e:	d047      	beq.n	46f0 <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    4660:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    4662:	78c3      	ldrb	r3, [r0, #3]
    4664:	021b      	lsls	r3, r3, #8
    4666:	7881      	ldrb	r1, [r0, #2]
    4668:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    466a:	b289      	uxth	r1, r1
    466c:	1841      	adds	r1, r0, r1
    466e:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    4670:	2204      	movs	r2, #4
    4672:	4b59      	ldr	r3, [pc, #356]	; (47d8 <usbdc_cb_ctl_req+0x2f8>)
    4674:	4798      	blx	r3
    4676:	2800      	cmp	r0, #0
    4678:	d03c      	beq.n	46f4 <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    467a:	4e57      	ldr	r6, [pc, #348]	; (47d8 <usbdc_cb_ctl_req+0x2f8>)
    467c:	e008      	b.n	4690 <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    467e:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    4680:	7803      	ldrb	r3, [r0, #0]
    4682:	18c0      	adds	r0, r0, r3
    4684:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    4686:	2204      	movs	r2, #4
    4688:	9903      	ldr	r1, [sp, #12]
    468a:	47b0      	blx	r6
		if (NULL == ifc) {
    468c:	2800      	cmp	r0, #0
    468e:	d033      	beq.n	46f8 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    4690:	7883      	ldrb	r3, [r0, #2]
    4692:	42a3      	cmp	r3, r4
    4694:	d1f3      	bne.n	467e <usbdc_cb_ctl_req+0x19e>
    4696:	78c3      	ldrb	r3, [r0, #3]
    4698:	42ab      	cmp	r3, r5
    469a:	d1f0      	bne.n	467e <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    469c:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    469e:	4b4c      	ldr	r3, [pc, #304]	; (47d0 <usbdc_cb_ctl_req+0x2f0>)
    46a0:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    46a2:	2e00      	cmp	r6, #0
    46a4:	d02a      	beq.n	46fc <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    46a6:	aa02      	add	r2, sp, #8
    46a8:	2101      	movs	r1, #1
    46aa:	0030      	movs	r0, r6
    46ac:	6873      	ldr	r3, [r6, #4]
    46ae:	4798      	blx	r3
    46b0:	2800      	cmp	r0, #0
    46b2:	d004      	beq.n	46be <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    46b4:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    46b6:	2e00      	cmp	r6, #0
    46b8:	d1f5      	bne.n	46a6 <usbdc_cb_ctl_req+0x1c6>
	return false;
    46ba:	2300      	movs	r3, #0
    46bc:	e72a      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    46be:	6873      	ldr	r3, [r6, #4]
    46c0:	aa02      	add	r2, sp, #8
    46c2:	2100      	movs	r1, #0
    46c4:	0030      	movs	r0, r6
    46c6:	4798      	blx	r3
			return false;
    46c8:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    46ca:	2800      	cmp	r0, #0
    46cc:	d000      	beq.n	46d0 <usbdc_cb_ctl_req+0x1f0>
    46ce:	e721      	b.n	4514 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    46d0:	2d00      	cmp	r5, #0
    46d2:	d005      	beq.n	46e0 <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    46d4:	493e      	ldr	r1, [pc, #248]	; (47d0 <usbdc_cb_ctl_req+0x2f0>)
    46d6:	2201      	movs	r2, #1
    46d8:	40a2      	lsls	r2, r4
    46da:	7f4b      	ldrb	r3, [r1, #29]
    46dc:	4313      	orrs	r3, r2
    46de:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    46e0:	2300      	movs	r3, #0
    46e2:	2200      	movs	r2, #0
    46e4:	2100      	movs	r1, #0
    46e6:	2000      	movs	r0, #0
    46e8:	4c38      	ldr	r4, [pc, #224]	; (47cc <usbdc_cb_ctl_req+0x2ec>)
    46ea:	47a0      	blx	r4
			return true;
    46ec:	2301      	movs	r3, #1
    46ee:	e711      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		return false;
    46f0:	2300      	movs	r3, #0
    46f2:	e70f      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		return false;
    46f4:	2300      	movs	r3, #0
    46f6:	e70d      	b.n	4514 <usbdc_cb_ctl_req+0x34>
			return false;
    46f8:	2300      	movs	r3, #0
    46fa:	e70b      	b.n	4514 <usbdc_cb_ctl_req+0x34>
	return false;
    46fc:	2300      	movs	r3, #0
    46fe:	e709      	b.n	4514 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    4700:	7863      	ldrb	r3, [r4, #1]
    4702:	2b06      	cmp	r3, #6
    4704:	d033      	beq.n	476e <usbdc_cb_ctl_req+0x28e>
    4706:	b2d9      	uxtb	r1, r3
    4708:	2906      	cmp	r1, #6
    470a:	d922      	bls.n	4752 <usbdc_cb_ctl_req+0x272>
    470c:	2b08      	cmp	r3, #8
    470e:	d100      	bne.n	4712 <usbdc_cb_ctl_req+0x232>
    4710:	e0af      	b.n	4872 <usbdc_cb_ctl_req+0x392>
    4712:	2b0a      	cmp	r3, #10
    4714:	d000      	beq.n	4718 <usbdc_cb_ctl_req+0x238>
    4716:	e0ed      	b.n	48f4 <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    4718:	4b2d      	ldr	r3, [pc, #180]	; (47d0 <usbdc_cb_ctl_req+0x2f0>)
    471a:	7f5a      	ldrb	r2, [r3, #29]
    471c:	7921      	ldrb	r1, [r4, #4]
    471e:	7963      	ldrb	r3, [r4, #5]
    4720:	021b      	lsls	r3, r3, #8
    4722:	430b      	orrs	r3, r1
    4724:	411a      	asrs	r2, r3
    4726:	07d3      	lsls	r3, r2, #31
    4728:	d400      	bmi.n	472c <usbdc_cb_ctl_req+0x24c>
    472a:	e0ca      	b.n	48c2 <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    472c:	4b28      	ldr	r3, [pc, #160]	; (47d0 <usbdc_cb_ctl_req+0x2f0>)
    472e:	691d      	ldr	r5, [r3, #16]
	return false;
    4730:	2300      	movs	r3, #0
	while (NULL != func) {
    4732:	2d00      	cmp	r5, #0
    4734:	d100      	bne.n	4738 <usbdc_cb_ctl_req+0x258>
    4736:	e6ed      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    4738:	0022      	movs	r2, r4
    473a:	2102      	movs	r1, #2
    473c:	0028      	movs	r0, r5
    473e:	686b      	ldr	r3, [r5, #4]
    4740:	4798      	blx	r3
    4742:	2800      	cmp	r0, #0
    4744:	db00      	blt.n	4748 <usbdc_cb_ctl_req+0x268>
    4746:	e0c8      	b.n	48da <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    4748:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    474a:	2d00      	cmp	r5, #0
    474c:	d1f4      	bne.n	4738 <usbdc_cb_ctl_req+0x258>
	return false;
    474e:	2300      	movs	r3, #0
    4750:	e6e0      	b.n	4514 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    4752:	2b00      	cmp	r3, #0
    4754:	d000      	beq.n	4758 <usbdc_cb_ctl_req+0x278>
    4756:	e0cd      	b.n	48f4 <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4758:	231f      	movs	r3, #31
    475a:	401a      	ands	r2, r3
    475c:	b2d3      	uxtb	r3, r2
    475e:	2b01      	cmp	r3, #1
    4760:	d800      	bhi.n	4764 <usbdc_cb_ctl_req+0x284>
    4762:	e092      	b.n	488a <usbdc_cb_ctl_req+0x3aa>
    4764:	2a02      	cmp	r2, #2
    4766:	d100      	bne.n	476a <usbdc_cb_ctl_req+0x28a>
    4768:	e09f      	b.n	48aa <usbdc_cb_ctl_req+0x3ca>
		return false;
    476a:	2300      	movs	r3, #0
    476c:	e6d2      	b.n	4514 <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    476e:	78a3      	ldrb	r3, [r4, #2]
    4770:	78e2      	ldrb	r2, [r4, #3]
    4772:	0212      	lsls	r2, r2, #8
    4774:	431a      	orrs	r2, r3
    4776:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    4778:	2b02      	cmp	r3, #2
    477a:	d033      	beq.n	47e4 <usbdc_cb_ctl_req+0x304>
    477c:	2b03      	cmp	r3, #3
    477e:	d056      	beq.n	482e <usbdc_cb_ctl_req+0x34e>
    4780:	2b01      	cmp	r3, #1
    4782:	d001      	beq.n	4788 <usbdc_cb_ctl_req+0x2a8>
	return false;
    4784:	2300      	movs	r3, #0
    4786:	e6c5      	b.n	4514 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    4788:	79a2      	ldrb	r2, [r4, #6]
    478a:	79e3      	ldrb	r3, [r4, #7]
    478c:	021b      	lsls	r3, r3, #8
    478e:	4313      	orrs	r3, r2
    4790:	1c1a      	adds	r2, r3, #0
    4792:	2b12      	cmp	r3, #18
    4794:	d900      	bls.n	4798 <usbdc_cb_ctl_req+0x2b8>
    4796:	2212      	movs	r2, #18
    4798:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    479a:	4b0d      	ldr	r3, [pc, #52]	; (47d0 <usbdc_cb_ctl_req+0x2f0>)
    479c:	681b      	ldr	r3, [r3, #0]
    479e:	6859      	ldr	r1, [r3, #4]
    47a0:	6818      	ldr	r0, [r3, #0]
    47a2:	2201      	movs	r2, #1
    47a4:	4b0c      	ldr	r3, [pc, #48]	; (47d8 <usbdc_cb_ctl_req+0x2f8>)
    47a6:	4798      	blx	r3
	if (!dev_desc) {
    47a8:	2800      	cmp	r0, #0
    47aa:	d100      	bne.n	47ae <usbdc_cb_ctl_req+0x2ce>
    47ac:	e0a4      	b.n	48f8 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    47ae:	2300      	movs	r3, #0
    47b0:	0022      	movs	r2, r4
    47b2:	0001      	movs	r1, r0
    47b4:	0028      	movs	r0, r5
    47b6:	4c05      	ldr	r4, [pc, #20]	; (47cc <usbdc_cb_ctl_req+0x2ec>)
    47b8:	47a0      	blx	r4
    47ba:	4243      	negs	r3, r0
    47bc:	4143      	adcs	r3, r0
    47be:	b2db      	uxtb	r3, r3
    47c0:	e6a8      	b.n	4514 <usbdc_cb_ctl_req+0x34>
    47c2:	46c0      	nop			; (mov r8, r8)
    47c4:	00004369 	.word	0x00004369
    47c8:	000051f4 	.word	0x000051f4
    47cc:	000044c5 	.word	0x000044c5
    47d0:	20000a48 	.word	0x20000a48
    47d4:	00004aad 	.word	0x00004aad
    47d8:	00004a31 	.word	0x00004a31
    47dc:	00004321 	.word	0x00004321
    47e0:	00002325 	.word	0x00002325
	uint16_t length   = req->wLength;
    47e4:	79a3      	ldrb	r3, [r4, #6]
    47e6:	79e6      	ldrb	r6, [r4, #7]
    47e8:	0236      	lsls	r6, r6, #8
    47ea:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    47ec:	4b46      	ldr	r3, [pc, #280]	; (4908 <usbdc_cb_ctl_req+0x428>)
    47ee:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    47f0:	681b      	ldr	r3, [r3, #0]
    47f2:	3201      	adds	r2, #1
    47f4:	b2d2      	uxtb	r2, r2
    47f6:	6859      	ldr	r1, [r3, #4]
    47f8:	6818      	ldr	r0, [r3, #0]
    47fa:	4b44      	ldr	r3, [pc, #272]	; (490c <usbdc_cb_ctl_req+0x42c>)
    47fc:	4798      	blx	r3
    47fe:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    4800:	d07c      	beq.n	48fc <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    4802:	78c3      	ldrb	r3, [r0, #3]
    4804:	021b      	lsls	r3, r3, #8
    4806:	7884      	ldrb	r4, [r0, #2]
    4808:	18e4      	adds	r4, r4, r3
    480a:	b2a4      	uxth	r4, r4
		need_zlp = false;
    480c:	2300      	movs	r3, #0
	if (length <= total_len) {
    480e:	42a6      	cmp	r6, r4
    4810:	d905      	bls.n	481e <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4812:	3f01      	subs	r7, #1
    4814:	403e      	ands	r6, r7
    4816:	4273      	negs	r3, r6
    4818:	4173      	adcs	r3, r6
    481a:	b2db      	uxtb	r3, r3
		length = total_len;
    481c:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    481e:	0032      	movs	r2, r6
    4820:	0028      	movs	r0, r5
    4822:	4c3b      	ldr	r4, [pc, #236]	; (4910 <usbdc_cb_ctl_req+0x430>)
    4824:	47a0      	blx	r4
    4826:	4243      	negs	r3, r0
    4828:	4143      	adcs	r3, r0
    482a:	b2db      	uxtb	r3, r3
    482c:	e672      	b.n	4514 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    482e:	79a3      	ldrb	r3, [r4, #6]
    4830:	79e1      	ldrb	r1, [r4, #7]
    4832:	0209      	lsls	r1, r1, #8
    4834:	4319      	orrs	r1, r3
    4836:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4838:	4b33      	ldr	r3, [pc, #204]	; (4908 <usbdc_cb_ctl_req+0x428>)
    483a:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    483c:	681b      	ldr	r3, [r3, #0]
    483e:	b2d2      	uxtb	r2, r2
    4840:	6859      	ldr	r1, [r3, #4]
    4842:	6818      	ldr	r0, [r3, #0]
    4844:	4b33      	ldr	r3, [pc, #204]	; (4914 <usbdc_cb_ctl_req+0x434>)
    4846:	4798      	blx	r3
    4848:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    484a:	d059      	beq.n	4900 <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    484c:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    484e:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    4850:	4294      	cmp	r4, r2
    4852:	d906      	bls.n	4862 <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4854:	1e73      	subs	r3, r6, #1
    4856:	4023      	ands	r3, r4
    4858:	0018      	movs	r0, r3
    485a:	4243      	negs	r3, r0
    485c:	4143      	adcs	r3, r0
    485e:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    4860:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    4862:	0022      	movs	r2, r4
    4864:	0028      	movs	r0, r5
    4866:	4c2a      	ldr	r4, [pc, #168]	; (4910 <usbdc_cb_ctl_req+0x430>)
    4868:	47a0      	blx	r4
    486a:	4243      	negs	r3, r0
    486c:	4143      	adcs	r3, r0
    486e:	b2db      	uxtb	r3, r3
    4870:	e650      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    4872:	4b25      	ldr	r3, [pc, #148]	; (4908 <usbdc_cb_ctl_req+0x428>)
    4874:	7eda      	ldrb	r2, [r3, #27]
    4876:	6959      	ldr	r1, [r3, #20]
    4878:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    487a:	6959      	ldr	r1, [r3, #20]
    487c:	2300      	movs	r3, #0
    487e:	2201      	movs	r2, #1
    4880:	0028      	movs	r0, r5
    4882:	4c23      	ldr	r4, [pc, #140]	; (4910 <usbdc_cb_ctl_req+0x430>)
    4884:	47a0      	blx	r4
		return true;
    4886:	2301      	movs	r3, #1
    4888:	e644      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		st = 0;
    488a:	2300      	movs	r3, #0
    488c:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    488e:	4c1e      	ldr	r4, [pc, #120]	; (4908 <usbdc_cb_ctl_req+0x428>)
    4890:	2202      	movs	r2, #2
    4892:	a902      	add	r1, sp, #8
    4894:	6960      	ldr	r0, [r4, #20]
    4896:	4b20      	ldr	r3, [pc, #128]	; (4918 <usbdc_cb_ctl_req+0x438>)
    4898:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    489a:	6961      	ldr	r1, [r4, #20]
    489c:	2300      	movs	r3, #0
    489e:	2202      	movs	r2, #2
    48a0:	0028      	movs	r0, r5
    48a2:	4c1b      	ldr	r4, [pc, #108]	; (4910 <usbdc_cb_ctl_req+0x430>)
    48a4:	47a0      	blx	r4
	return true;
    48a6:	2301      	movs	r3, #1
    48a8:	e634      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    48aa:	7920      	ldrb	r0, [r4, #4]
    48ac:	2102      	movs	r1, #2
    48ae:	4b1b      	ldr	r3, [pc, #108]	; (491c <usbdc_cb_ctl_req+0x43c>)
    48b0:	4798      	blx	r3
		if (st < 0) {
    48b2:	2800      	cmp	r0, #0
    48b4:	db03      	blt.n	48be <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    48b6:	2301      	movs	r3, #1
    48b8:	4018      	ands	r0, r3
    48ba:	9002      	str	r0, [sp, #8]
    48bc:	e7e7      	b.n	488e <usbdc_cb_ctl_req+0x3ae>
			return false;
    48be:	2300      	movs	r3, #0
    48c0:	e628      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    48c2:	4b11      	ldr	r3, [pc, #68]	; (4908 <usbdc_cb_ctl_req+0x428>)
    48c4:	2200      	movs	r2, #0
    48c6:	6959      	ldr	r1, [r3, #20]
    48c8:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    48ca:	6959      	ldr	r1, [r3, #20]
    48cc:	2300      	movs	r3, #0
    48ce:	3201      	adds	r2, #1
    48d0:	2000      	movs	r0, #0
    48d2:	4c0f      	ldr	r4, [pc, #60]	; (4910 <usbdc_cb_ctl_req+0x430>)
    48d4:	47a0      	blx	r4
		return true;
    48d6:	2301      	movs	r3, #1
    48d8:	e61c      	b.n	4514 <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    48da:	4b0b      	ldr	r3, [pc, #44]	; (4908 <usbdc_cb_ctl_req+0x428>)
    48dc:	695a      	ldr	r2, [r3, #20]
    48de:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    48e0:	6959      	ldr	r1, [r3, #20]
    48e2:	2300      	movs	r3, #0
    48e4:	2201      	movs	r2, #1
    48e6:	2000      	movs	r0, #0
    48e8:	4c09      	ldr	r4, [pc, #36]	; (4910 <usbdc_cb_ctl_req+0x430>)
    48ea:	47a0      	blx	r4
			return true;
    48ec:	2301      	movs	r3, #1
    48ee:	e611      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		return false;
    48f0:	2300      	movs	r3, #0
    48f2:	e60f      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		return false;
    48f4:	2300      	movs	r3, #0
    48f6:	e60d      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		return false;
    48f8:	2300      	movs	r3, #0
    48fa:	e60b      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		return false;
    48fc:	2300      	movs	r3, #0
    48fe:	e609      	b.n	4514 <usbdc_cb_ctl_req+0x34>
		return false;
    4900:	2300      	movs	r3, #0
    4902:	e607      	b.n	4514 <usbdc_cb_ctl_req+0x34>
			return false;
    4904:	2300      	movs	r3, #0
    4906:	e605      	b.n	4514 <usbdc_cb_ctl_req+0x34>
    4908:	20000a48 	.word	0x20000a48
    490c:	00004aad 	.word	0x00004aad
    4910:	000044c5 	.word	0x000044c5
    4914:	00004b15 	.word	0x00004b15
    4918:	00004d2d 	.word	0x00004d2d
    491c:	00002325 	.word	0x00002325

00004920 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    4920:	b510      	push	{r4, lr}
	switch (type) {
    4922:	2801      	cmp	r0, #1
    4924:	d009      	beq.n	493a <usbdc_register_handler+0x1a>
    4926:	2800      	cmp	r0, #0
    4928:	d002      	beq.n	4930 <usbdc_register_handler+0x10>
    492a:	2802      	cmp	r0, #2
    492c:	d00a      	beq.n	4944 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    492e:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    4930:	4807      	ldr	r0, [pc, #28]	; (4950 <usbdc_register_handler+0x30>)
    4932:	3004      	adds	r0, #4
    4934:	4b07      	ldr	r3, [pc, #28]	; (4954 <usbdc_register_handler+0x34>)
    4936:	4798      	blx	r3
		break;
    4938:	e7f9      	b.n	492e <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    493a:	4805      	ldr	r0, [pc, #20]	; (4950 <usbdc_register_handler+0x30>)
    493c:	3008      	adds	r0, #8
    493e:	4b05      	ldr	r3, [pc, #20]	; (4954 <usbdc_register_handler+0x34>)
    4940:	4798      	blx	r3
		break;
    4942:	e7f4      	b.n	492e <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    4944:	4802      	ldr	r0, [pc, #8]	; (4950 <usbdc_register_handler+0x30>)
    4946:	300c      	adds	r0, #12
    4948:	4b02      	ldr	r3, [pc, #8]	; (4954 <usbdc_register_handler+0x34>)
    494a:	4798      	blx	r3
}
    494c:	e7ef      	b.n	492e <usbdc_register_handler+0xe>
    494e:	46c0      	nop			; (mov r8, r8)
    4950:	20000a48 	.word	0x20000a48
    4954:	0000243d 	.word	0x0000243d

00004958 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    4958:	b570      	push	{r4, r5, r6, lr}
    495a:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    495c:	1e43      	subs	r3, r0, #1
    495e:	4198      	sbcs	r0, r3
    4960:	b2c0      	uxtb	r0, r0
    4962:	4a0c      	ldr	r2, [pc, #48]	; (4994 <usbdc_init+0x3c>)
    4964:	490c      	ldr	r1, [pc, #48]	; (4998 <usbdc_init+0x40>)
    4966:	4b0d      	ldr	r3, [pc, #52]	; (499c <usbdc_init+0x44>)
    4968:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    496a:	4b0d      	ldr	r3, [pc, #52]	; (49a0 <usbdc_init+0x48>)
    496c:	4798      	blx	r3
	if (rc < 0) {
    496e:	2800      	cmp	r0, #0
    4970:	db0e      	blt.n	4990 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    4972:	4d0c      	ldr	r5, [pc, #48]	; (49a4 <usbdc_init+0x4c>)
    4974:	2220      	movs	r2, #32
    4976:	2100      	movs	r1, #0
    4978:	0028      	movs	r0, r5
    497a:	4b0b      	ldr	r3, [pc, #44]	; (49a8 <usbdc_init+0x50>)
    497c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    497e:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    4980:	490a      	ldr	r1, [pc, #40]	; (49ac <usbdc_init+0x54>)
    4982:	2000      	movs	r0, #0
    4984:	4c0a      	ldr	r4, [pc, #40]	; (49b0 <usbdc_init+0x58>)
    4986:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    4988:	490a      	ldr	r1, [pc, #40]	; (49b4 <usbdc_init+0x5c>)
    498a:	2001      	movs	r0, #1
    498c:	47a0      	blx	r4

	return 0;
    498e:	2000      	movs	r0, #0
}
    4990:	bd70      	pop	{r4, r5, r6, pc}
    4992:	46c0      	nop			; (mov r8, r8)
    4994:	00000355 	.word	0x00000355
    4998:	00005224 	.word	0x00005224
    499c:	000023dd 	.word	0x000023dd
    49a0:	00002059 	.word	0x00002059
    49a4:	20000a48 	.word	0x20000a48
    49a8:	00004db1 	.word	0x00004db1
    49ac:	000043ad 	.word	0x000043ad
    49b0:	000020bd 	.word	0x000020bd
    49b4:	000044a1 	.word	0x000044a1

000049b8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    49b8:	b510      	push	{r4, lr}
    49ba:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    49bc:	4802      	ldr	r0, [pc, #8]	; (49c8 <usbdc_register_function+0x10>)
    49be:	3010      	adds	r0, #16
    49c0:	4b02      	ldr	r3, [pc, #8]	; (49cc <usbdc_register_function+0x14>)
    49c2:	4798      	blx	r3
}
    49c4:	bd10      	pop	{r4, pc}
    49c6:	46c0      	nop			; (mov r8, r8)
    49c8:	20000a48 	.word	0x20000a48
    49cc:	0000243d 	.word	0x0000243d

000049d0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    49d0:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    49d2:	4b0b      	ldr	r3, [pc, #44]	; (4a00 <usbdc_start+0x30>)
    49d4:	7e9b      	ldrb	r3, [r3, #26]
    49d6:	2b00      	cmp	r3, #0
    49d8:	d10c      	bne.n	49f4 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    49da:	2800      	cmp	r0, #0
    49dc:	d00d      	beq.n	49fa <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    49de:	4b08      	ldr	r3, [pc, #32]	; (4a00 <usbdc_start+0x30>)
    49e0:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    49e2:	6802      	ldr	r2, [r0, #0]
    49e4:	79d2      	ldrb	r2, [r2, #7]
    49e6:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    49e8:	2201      	movs	r2, #1
    49ea:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    49ec:	4b05      	ldr	r3, [pc, #20]	; (4a04 <usbdc_start+0x34>)
    49ee:	4798      	blx	r3
	return ERR_NONE;
    49f0:	2000      	movs	r0, #0
}
    49f2:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    49f4:	2004      	movs	r0, #4
    49f6:	4240      	negs	r0, r0
    49f8:	e7fb      	b.n	49f2 <usbdc_start+0x22>
		return ERR_BAD_DATA;
    49fa:	2009      	movs	r0, #9
    49fc:	4240      	negs	r0, r0
    49fe:	e7f8      	b.n	49f2 <usbdc_start+0x22>
    4a00:	20000a48 	.word	0x20000a48
    4a04:	000020c9 	.word	0x000020c9

00004a08 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    4a08:	b510      	push	{r4, lr}
	usb_d_attach();
    4a0a:	4b01      	ldr	r3, [pc, #4]	; (4a10 <usbdc_attach+0x8>)
    4a0c:	4798      	blx	r3
}
    4a0e:	bd10      	pop	{r4, pc}
    4a10:	000020d5 	.word	0x000020d5

00004a14 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    4a14:	4b01      	ldr	r3, [pc, #4]	; (4a1c <usbdc_get_ctrl_buffer+0x8>)
    4a16:	6958      	ldr	r0, [r3, #20]
}
    4a18:	4770      	bx	lr
    4a1a:	46c0      	nop			; (mov r8, r8)
    4a1c:	20000a48 	.word	0x20000a48

00004a20 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    4a20:	4b02      	ldr	r3, [pc, #8]	; (4a2c <usbdc_get_state+0xc>)
    4a22:	7e98      	ldrb	r0, [r3, #26]
    4a24:	06c3      	lsls	r3, r0, #27
    4a26:	d500      	bpl.n	4a2a <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    4a28:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    4a2a:	4770      	bx	lr
    4a2c:	20000a48 	.word	0x20000a48

00004a30 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    4a30:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4a32:	4288      	cmp	r0, r1
    4a34:	d211      	bcs.n	4a5a <usb_find_desc+0x2a>
	return desc[0];
    4a36:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4a38:	2b01      	cmp	r3, #1
    4a3a:	d910      	bls.n	4a5e <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    4a3c:	7844      	ldrb	r4, [r0, #1]
    4a3e:	4294      	cmp	r4, r2
    4a40:	d00a      	beq.n	4a58 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    4a42:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    4a44:	4281      	cmp	r1, r0
    4a46:	d906      	bls.n	4a56 <usb_find_desc+0x26>
	return desc[0];
    4a48:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4a4a:	2b01      	cmp	r3, #1
    4a4c:	d909      	bls.n	4a62 <usb_find_desc+0x32>
	return desc[1];
    4a4e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    4a50:	4294      	cmp	r4, r2
    4a52:	d1f6      	bne.n	4a42 <usb_find_desc+0x12>
    4a54:	e000      	b.n	4a58 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4a56:	2000      	movs	r0, #0
}
    4a58:	bd10      	pop	{r4, pc}
	return NULL;
    4a5a:	2000      	movs	r0, #0
    4a5c:	e7fc      	b.n	4a58 <usb_find_desc+0x28>
		_desc_len_check();
    4a5e:	2000      	movs	r0, #0
    4a60:	e7fa      	b.n	4a58 <usb_find_desc+0x28>
    4a62:	2000      	movs	r0, #0
    4a64:	e7f8      	b.n	4a58 <usb_find_desc+0x28>

00004a66 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4a66:	4288      	cmp	r0, r1
    4a68:	d215      	bcs.n	4a96 <usb_find_ep_desc+0x30>
	return desc[0];
    4a6a:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4a6c:	2b01      	cmp	r3, #1
    4a6e:	d914      	bls.n	4a9a <usb_find_ep_desc+0x34>
	return desc[1];
    4a70:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4a72:	2a04      	cmp	r2, #4
    4a74:	d013      	beq.n	4a9e <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4a76:	2a05      	cmp	r2, #5
    4a78:	d00c      	beq.n	4a94 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    4a7a:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    4a7c:	4281      	cmp	r1, r0
    4a7e:	d908      	bls.n	4a92 <usb_find_ep_desc+0x2c>
	return desc[0];
    4a80:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4a82:	2b01      	cmp	r3, #1
    4a84:	d90d      	bls.n	4aa2 <usb_find_ep_desc+0x3c>
	return desc[1];
    4a86:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    4a88:	2a04      	cmp	r2, #4
    4a8a:	d00c      	beq.n	4aa6 <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    4a8c:	2a05      	cmp	r2, #5
    4a8e:	d1f4      	bne.n	4a7a <usb_find_ep_desc+0x14>
    4a90:	e000      	b.n	4a94 <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4a92:	2000      	movs	r0, #0
}
    4a94:	4770      	bx	lr
	return NULL;
    4a96:	2000      	movs	r0, #0
    4a98:	e7fc      	b.n	4a94 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    4a9a:	2000      	movs	r0, #0
    4a9c:	e7fa      	b.n	4a94 <usb_find_ep_desc+0x2e>
	return NULL;
    4a9e:	2000      	movs	r0, #0
    4aa0:	e7f8      	b.n	4a94 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    4aa2:	2000      	movs	r0, #0
    4aa4:	e7f6      	b.n	4a94 <usb_find_ep_desc+0x2e>
	return NULL;
    4aa6:	2000      	movs	r0, #0
    4aa8:	e7f4      	b.n	4a94 <usb_find_ep_desc+0x2e>
	...

00004aac <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    4aac:	b570      	push	{r4, r5, r6, lr}
    4aae:	000c      	movs	r4, r1
    4ab0:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    4ab2:	2202      	movs	r2, #2
    4ab4:	4b16      	ldr	r3, [pc, #88]	; (4b10 <usb_find_cfg_desc+0x64>)
    4ab6:	4798      	blx	r3
	if (!desc) {
    4ab8:	2800      	cmp	r0, #0
    4aba:	d01d      	beq.n	4af8 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    4abc:	4284      	cmp	r4, r0
    4abe:	d91c      	bls.n	4afa <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    4ac0:	7803      	ldrb	r3, [r0, #0]
    4ac2:	2b01      	cmp	r3, #1
    4ac4:	d91b      	bls.n	4afe <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    4ac6:	7843      	ldrb	r3, [r0, #1]
    4ac8:	2b02      	cmp	r3, #2
    4aca:	d11a      	bne.n	4b02 <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    4acc:	7943      	ldrb	r3, [r0, #5]
    4ace:	42ab      	cmp	r3, r5
    4ad0:	d012      	beq.n	4af8 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    4ad2:	78c2      	ldrb	r2, [r0, #3]
    4ad4:	0212      	lsls	r2, r2, #8
    4ad6:	7883      	ldrb	r3, [r0, #2]
    4ad8:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    4ada:	b29b      	uxth	r3, r3
    4adc:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    4ade:	4284      	cmp	r4, r0
    4ae0:	d909      	bls.n	4af6 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    4ae2:	7803      	ldrb	r3, [r0, #0]
    4ae4:	2b01      	cmp	r3, #1
    4ae6:	d90e      	bls.n	4b06 <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    4ae8:	7843      	ldrb	r3, [r0, #1]
    4aea:	2b02      	cmp	r3, #2
    4aec:	d10d      	bne.n	4b0a <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    4aee:	7943      	ldrb	r3, [r0, #5]
    4af0:	42ab      	cmp	r3, r5
    4af2:	d1ee      	bne.n	4ad2 <usb_find_cfg_desc+0x26>
    4af4:	e000      	b.n	4af8 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    4af6:	2000      	movs	r0, #0
}
    4af8:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    4afa:	2000      	movs	r0, #0
    4afc:	e7fc      	b.n	4af8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    4afe:	2000      	movs	r0, #0
    4b00:	e7fa      	b.n	4af8 <usb_find_cfg_desc+0x4c>
	return NULL;
    4b02:	2000      	movs	r0, #0
    4b04:	e7f8      	b.n	4af8 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    4b06:	2000      	movs	r0, #0
    4b08:	e7f6      	b.n	4af8 <usb_find_cfg_desc+0x4c>
	return NULL;
    4b0a:	2000      	movs	r0, #0
    4b0c:	e7f4      	b.n	4af8 <usb_find_cfg_desc+0x4c>
    4b0e:	46c0      	nop			; (mov r8, r8)
    4b10:	00004a31 	.word	0x00004a31

00004b14 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    4b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b16:	000d      	movs	r5, r1
    4b18:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    4b1a:	4288      	cmp	r0, r1
    4b1c:	d212      	bcs.n	4b44 <usb_find_str_desc+0x30>
    4b1e:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    4b20:	4e0a      	ldr	r6, [pc, #40]	; (4b4c <usb_find_str_desc+0x38>)
    4b22:	2203      	movs	r2, #3
    4b24:	0029      	movs	r1, r5
    4b26:	47b0      	blx	r6
		if (desc) {
    4b28:	2800      	cmp	r0, #0
    4b2a:	d00e      	beq.n	4b4a <usb_find_str_desc+0x36>
	return desc[0];
    4b2c:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    4b2e:	2b01      	cmp	r3, #1
    4b30:	d90a      	bls.n	4b48 <usb_find_str_desc+0x34>
			if (i == str_index) {
    4b32:	42a7      	cmp	r7, r4
    4b34:	d009      	beq.n	4b4a <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    4b36:	3401      	adds	r4, #1
    4b38:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    4b3a:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    4b3c:	4285      	cmp	r5, r0
    4b3e:	d8f0      	bhi.n	4b22 <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    4b40:	2000      	movs	r0, #0
    4b42:	e002      	b.n	4b4a <usb_find_str_desc+0x36>
    4b44:	2000      	movs	r0, #0
    4b46:	e000      	b.n	4b4a <usb_find_str_desc+0x36>
			_desc_len_check();
    4b48:	2000      	movs	r0, #0
}
    4b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b4c:	00004a31 	.word	0x00004a31

00004b50 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    4b50:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    4b52:	4806      	ldr	r0, [pc, #24]	; (4b6c <cdc_device_acm_init+0x1c>)
    4b54:	3040      	adds	r0, #64	; 0x40
    4b56:	4b06      	ldr	r3, [pc, #24]	; (4b70 <cdc_device_acm_init+0x20>)
    4b58:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    4b5a:	4b06      	ldr	r3, [pc, #24]	; (4b74 <cdc_device_acm_init+0x24>)
    4b5c:	4798      	blx	r3

	usbdc_start(single_desc);
    4b5e:	4806      	ldr	r0, [pc, #24]	; (4b78 <cdc_device_acm_init+0x28>)
    4b60:	4b06      	ldr	r3, [pc, #24]	; (4b7c <cdc_device_acm_init+0x2c>)
    4b62:	4798      	blx	r3
	usbdc_attach();
    4b64:	4b06      	ldr	r3, [pc, #24]	; (4b80 <cdc_device_acm_init+0x30>)
    4b66:	4798      	blx	r3
}
    4b68:	bd10      	pop	{r4, pc}
    4b6a:	46c0      	nop			; (mov r8, r8)
    4b6c:	20000a68 	.word	0x20000a68
    4b70:	00004959 	.word	0x00004959
    4b74:	00004211 	.word	0x00004211
    4b78:	2000000c 	.word	0x2000000c
    4b7c:	000049d1 	.word	0x000049d1
    4b80:	00004a09 	.word	0x00004a09

00004b84 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    4b84:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    4b86:	4b01      	ldr	r3, [pc, #4]	; (4b8c <usb_init+0x8>)
    4b88:	4798      	blx	r3
}
    4b8a:	bd10      	pop	{r4, pc}
    4b8c:	00004b51 	.word	0x00004b51

00004b90 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4b90:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    4b94:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    4b96:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4b98:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    4b9c:	4770      	bx	lr

00004b9e <atomic_leave_critical>:
    4b9e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    4ba2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4ba4:	f383 8810 	msr	PRIMASK, r3
}
    4ba8:	4770      	bx	lr
	...

00004bac <__aeabi_atexit>:
    4bac:	000b      	movs	r3, r1
    4bae:	b510      	push	{r4, lr}
    4bb0:	0001      	movs	r1, r0
    4bb2:	0018      	movs	r0, r3
    4bb4:	f000 f88e 	bl	4cd4 <__cxa_atexit>
    4bb8:	bd10      	pop	{r4, pc}
    4bba:	46c0      	nop			; (mov r8, r8)

00004bbc <__udivsi3>:
    4bbc:	2200      	movs	r2, #0
    4bbe:	0843      	lsrs	r3, r0, #1
    4bc0:	428b      	cmp	r3, r1
    4bc2:	d374      	bcc.n	4cae <__udivsi3+0xf2>
    4bc4:	0903      	lsrs	r3, r0, #4
    4bc6:	428b      	cmp	r3, r1
    4bc8:	d35f      	bcc.n	4c8a <__udivsi3+0xce>
    4bca:	0a03      	lsrs	r3, r0, #8
    4bcc:	428b      	cmp	r3, r1
    4bce:	d344      	bcc.n	4c5a <__udivsi3+0x9e>
    4bd0:	0b03      	lsrs	r3, r0, #12
    4bd2:	428b      	cmp	r3, r1
    4bd4:	d328      	bcc.n	4c28 <__udivsi3+0x6c>
    4bd6:	0c03      	lsrs	r3, r0, #16
    4bd8:	428b      	cmp	r3, r1
    4bda:	d30d      	bcc.n	4bf8 <__udivsi3+0x3c>
    4bdc:	22ff      	movs	r2, #255	; 0xff
    4bde:	0209      	lsls	r1, r1, #8
    4be0:	ba12      	rev	r2, r2
    4be2:	0c03      	lsrs	r3, r0, #16
    4be4:	428b      	cmp	r3, r1
    4be6:	d302      	bcc.n	4bee <__udivsi3+0x32>
    4be8:	1212      	asrs	r2, r2, #8
    4bea:	0209      	lsls	r1, r1, #8
    4bec:	d065      	beq.n	4cba <__udivsi3+0xfe>
    4bee:	0b03      	lsrs	r3, r0, #12
    4bf0:	428b      	cmp	r3, r1
    4bf2:	d319      	bcc.n	4c28 <__udivsi3+0x6c>
    4bf4:	e000      	b.n	4bf8 <__udivsi3+0x3c>
    4bf6:	0a09      	lsrs	r1, r1, #8
    4bf8:	0bc3      	lsrs	r3, r0, #15
    4bfa:	428b      	cmp	r3, r1
    4bfc:	d301      	bcc.n	4c02 <__udivsi3+0x46>
    4bfe:	03cb      	lsls	r3, r1, #15
    4c00:	1ac0      	subs	r0, r0, r3
    4c02:	4152      	adcs	r2, r2
    4c04:	0b83      	lsrs	r3, r0, #14
    4c06:	428b      	cmp	r3, r1
    4c08:	d301      	bcc.n	4c0e <__udivsi3+0x52>
    4c0a:	038b      	lsls	r3, r1, #14
    4c0c:	1ac0      	subs	r0, r0, r3
    4c0e:	4152      	adcs	r2, r2
    4c10:	0b43      	lsrs	r3, r0, #13
    4c12:	428b      	cmp	r3, r1
    4c14:	d301      	bcc.n	4c1a <__udivsi3+0x5e>
    4c16:	034b      	lsls	r3, r1, #13
    4c18:	1ac0      	subs	r0, r0, r3
    4c1a:	4152      	adcs	r2, r2
    4c1c:	0b03      	lsrs	r3, r0, #12
    4c1e:	428b      	cmp	r3, r1
    4c20:	d301      	bcc.n	4c26 <__udivsi3+0x6a>
    4c22:	030b      	lsls	r3, r1, #12
    4c24:	1ac0      	subs	r0, r0, r3
    4c26:	4152      	adcs	r2, r2
    4c28:	0ac3      	lsrs	r3, r0, #11
    4c2a:	428b      	cmp	r3, r1
    4c2c:	d301      	bcc.n	4c32 <__udivsi3+0x76>
    4c2e:	02cb      	lsls	r3, r1, #11
    4c30:	1ac0      	subs	r0, r0, r3
    4c32:	4152      	adcs	r2, r2
    4c34:	0a83      	lsrs	r3, r0, #10
    4c36:	428b      	cmp	r3, r1
    4c38:	d301      	bcc.n	4c3e <__udivsi3+0x82>
    4c3a:	028b      	lsls	r3, r1, #10
    4c3c:	1ac0      	subs	r0, r0, r3
    4c3e:	4152      	adcs	r2, r2
    4c40:	0a43      	lsrs	r3, r0, #9
    4c42:	428b      	cmp	r3, r1
    4c44:	d301      	bcc.n	4c4a <__udivsi3+0x8e>
    4c46:	024b      	lsls	r3, r1, #9
    4c48:	1ac0      	subs	r0, r0, r3
    4c4a:	4152      	adcs	r2, r2
    4c4c:	0a03      	lsrs	r3, r0, #8
    4c4e:	428b      	cmp	r3, r1
    4c50:	d301      	bcc.n	4c56 <__udivsi3+0x9a>
    4c52:	020b      	lsls	r3, r1, #8
    4c54:	1ac0      	subs	r0, r0, r3
    4c56:	4152      	adcs	r2, r2
    4c58:	d2cd      	bcs.n	4bf6 <__udivsi3+0x3a>
    4c5a:	09c3      	lsrs	r3, r0, #7
    4c5c:	428b      	cmp	r3, r1
    4c5e:	d301      	bcc.n	4c64 <__udivsi3+0xa8>
    4c60:	01cb      	lsls	r3, r1, #7
    4c62:	1ac0      	subs	r0, r0, r3
    4c64:	4152      	adcs	r2, r2
    4c66:	0983      	lsrs	r3, r0, #6
    4c68:	428b      	cmp	r3, r1
    4c6a:	d301      	bcc.n	4c70 <__udivsi3+0xb4>
    4c6c:	018b      	lsls	r3, r1, #6
    4c6e:	1ac0      	subs	r0, r0, r3
    4c70:	4152      	adcs	r2, r2
    4c72:	0943      	lsrs	r3, r0, #5
    4c74:	428b      	cmp	r3, r1
    4c76:	d301      	bcc.n	4c7c <__udivsi3+0xc0>
    4c78:	014b      	lsls	r3, r1, #5
    4c7a:	1ac0      	subs	r0, r0, r3
    4c7c:	4152      	adcs	r2, r2
    4c7e:	0903      	lsrs	r3, r0, #4
    4c80:	428b      	cmp	r3, r1
    4c82:	d301      	bcc.n	4c88 <__udivsi3+0xcc>
    4c84:	010b      	lsls	r3, r1, #4
    4c86:	1ac0      	subs	r0, r0, r3
    4c88:	4152      	adcs	r2, r2
    4c8a:	08c3      	lsrs	r3, r0, #3
    4c8c:	428b      	cmp	r3, r1
    4c8e:	d301      	bcc.n	4c94 <__udivsi3+0xd8>
    4c90:	00cb      	lsls	r3, r1, #3
    4c92:	1ac0      	subs	r0, r0, r3
    4c94:	4152      	adcs	r2, r2
    4c96:	0883      	lsrs	r3, r0, #2
    4c98:	428b      	cmp	r3, r1
    4c9a:	d301      	bcc.n	4ca0 <__udivsi3+0xe4>
    4c9c:	008b      	lsls	r3, r1, #2
    4c9e:	1ac0      	subs	r0, r0, r3
    4ca0:	4152      	adcs	r2, r2
    4ca2:	0843      	lsrs	r3, r0, #1
    4ca4:	428b      	cmp	r3, r1
    4ca6:	d301      	bcc.n	4cac <__udivsi3+0xf0>
    4ca8:	004b      	lsls	r3, r1, #1
    4caa:	1ac0      	subs	r0, r0, r3
    4cac:	4152      	adcs	r2, r2
    4cae:	1a41      	subs	r1, r0, r1
    4cb0:	d200      	bcs.n	4cb4 <__udivsi3+0xf8>
    4cb2:	4601      	mov	r1, r0
    4cb4:	4152      	adcs	r2, r2
    4cb6:	4610      	mov	r0, r2
    4cb8:	4770      	bx	lr
    4cba:	e7ff      	b.n	4cbc <__udivsi3+0x100>
    4cbc:	b501      	push	{r0, lr}
    4cbe:	2000      	movs	r0, #0
    4cc0:	f000 f806 	bl	4cd0 <__aeabi_idiv0>
    4cc4:	bd02      	pop	{r1, pc}
    4cc6:	46c0      	nop			; (mov r8, r8)

00004cc8 <__aeabi_uidivmod>:
    4cc8:	2900      	cmp	r1, #0
    4cca:	d0f7      	beq.n	4cbc <__udivsi3+0x100>
    4ccc:	e776      	b.n	4bbc <__udivsi3>
    4cce:	4770      	bx	lr

00004cd0 <__aeabi_idiv0>:
    4cd0:	4770      	bx	lr
    4cd2:	46c0      	nop			; (mov r8, r8)

00004cd4 <__cxa_atexit>:
    4cd4:	b510      	push	{r4, lr}
    4cd6:	0013      	movs	r3, r2
    4cd8:	000a      	movs	r2, r1
    4cda:	0001      	movs	r1, r0
    4cdc:	2002      	movs	r0, #2
    4cde:	f000 f8e3 	bl	4ea8 <__register_exitproc>
    4ce2:	bd10      	pop	{r4, pc}

00004ce4 <__libc_init_array>:
    4ce4:	b570      	push	{r4, r5, r6, lr}
    4ce6:	4e0d      	ldr	r6, [pc, #52]	; (4d1c <__libc_init_array+0x38>)
    4ce8:	4d0d      	ldr	r5, [pc, #52]	; (4d20 <__libc_init_array+0x3c>)
    4cea:	2400      	movs	r4, #0
    4cec:	1bad      	subs	r5, r5, r6
    4cee:	10ad      	asrs	r5, r5, #2
    4cf0:	d005      	beq.n	4cfe <__libc_init_array+0x1a>
    4cf2:	00a3      	lsls	r3, r4, #2
    4cf4:	58f3      	ldr	r3, [r6, r3]
    4cf6:	3401      	adds	r4, #1
    4cf8:	4798      	blx	r3
    4cfa:	42a5      	cmp	r5, r4
    4cfc:	d1f9      	bne.n	4cf2 <__libc_init_array+0xe>
    4cfe:	f000 fa9f 	bl	5240 <_init>
    4d02:	4e08      	ldr	r6, [pc, #32]	; (4d24 <__libc_init_array+0x40>)
    4d04:	4d08      	ldr	r5, [pc, #32]	; (4d28 <__libc_init_array+0x44>)
    4d06:	2400      	movs	r4, #0
    4d08:	1bad      	subs	r5, r5, r6
    4d0a:	10ad      	asrs	r5, r5, #2
    4d0c:	d005      	beq.n	4d1a <__libc_init_array+0x36>
    4d0e:	00a3      	lsls	r3, r4, #2
    4d10:	58f3      	ldr	r3, [r6, r3]
    4d12:	3401      	adds	r4, #1
    4d14:	4798      	blx	r3
    4d16:	42a5      	cmp	r5, r4
    4d18:	d1f9      	bne.n	4d0e <__libc_init_array+0x2a>
    4d1a:	bd70      	pop	{r4, r5, r6, pc}
    4d1c:	0000524c 	.word	0x0000524c
    4d20:	0000524c 	.word	0x0000524c
    4d24:	0000524c 	.word	0x0000524c
    4d28:	00005260 	.word	0x00005260

00004d2c <memcpy>:
    4d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d2e:	0005      	movs	r5, r0
    4d30:	2a0f      	cmp	r2, #15
    4d32:	d92f      	bls.n	4d94 <memcpy+0x68>
    4d34:	000b      	movs	r3, r1
    4d36:	4303      	orrs	r3, r0
    4d38:	079b      	lsls	r3, r3, #30
    4d3a:	d134      	bne.n	4da6 <memcpy+0x7a>
    4d3c:	0016      	movs	r6, r2
    4d3e:	000c      	movs	r4, r1
    4d40:	0003      	movs	r3, r0
    4d42:	3e10      	subs	r6, #16
    4d44:	0935      	lsrs	r5, r6, #4
    4d46:	3501      	adds	r5, #1
    4d48:	012d      	lsls	r5, r5, #4
    4d4a:	1945      	adds	r5, r0, r5
    4d4c:	6827      	ldr	r7, [r4, #0]
    4d4e:	601f      	str	r7, [r3, #0]
    4d50:	6867      	ldr	r7, [r4, #4]
    4d52:	605f      	str	r7, [r3, #4]
    4d54:	68a7      	ldr	r7, [r4, #8]
    4d56:	609f      	str	r7, [r3, #8]
    4d58:	68e7      	ldr	r7, [r4, #12]
    4d5a:	3410      	adds	r4, #16
    4d5c:	60df      	str	r7, [r3, #12]
    4d5e:	3310      	adds	r3, #16
    4d60:	429d      	cmp	r5, r3
    4d62:	d1f3      	bne.n	4d4c <memcpy+0x20>
    4d64:	230f      	movs	r3, #15
    4d66:	439e      	bics	r6, r3
    4d68:	3610      	adds	r6, #16
    4d6a:	1985      	adds	r5, r0, r6
    4d6c:	1989      	adds	r1, r1, r6
    4d6e:	4013      	ands	r3, r2
    4d70:	2b03      	cmp	r3, #3
    4d72:	d91a      	bls.n	4daa <memcpy+0x7e>
    4d74:	1f1e      	subs	r6, r3, #4
    4d76:	2300      	movs	r3, #0
    4d78:	08b4      	lsrs	r4, r6, #2
    4d7a:	3401      	adds	r4, #1
    4d7c:	00a4      	lsls	r4, r4, #2
    4d7e:	58cf      	ldr	r7, [r1, r3]
    4d80:	50ef      	str	r7, [r5, r3]
    4d82:	3304      	adds	r3, #4
    4d84:	42a3      	cmp	r3, r4
    4d86:	d1fa      	bne.n	4d7e <memcpy+0x52>
    4d88:	2403      	movs	r4, #3
    4d8a:	43a6      	bics	r6, r4
    4d8c:	1d33      	adds	r3, r6, #4
    4d8e:	4022      	ands	r2, r4
    4d90:	18c9      	adds	r1, r1, r3
    4d92:	18ed      	adds	r5, r5, r3
    4d94:	2a00      	cmp	r2, #0
    4d96:	d005      	beq.n	4da4 <memcpy+0x78>
    4d98:	2300      	movs	r3, #0
    4d9a:	5ccc      	ldrb	r4, [r1, r3]
    4d9c:	54ec      	strb	r4, [r5, r3]
    4d9e:	3301      	adds	r3, #1
    4da0:	4293      	cmp	r3, r2
    4da2:	d1fa      	bne.n	4d9a <memcpy+0x6e>
    4da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4da6:	0005      	movs	r5, r0
    4da8:	e7f6      	b.n	4d98 <memcpy+0x6c>
    4daa:	001a      	movs	r2, r3
    4dac:	e7f2      	b.n	4d94 <memcpy+0x68>
    4dae:	46c0      	nop			; (mov r8, r8)

00004db0 <memset>:
    4db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4db2:	0783      	lsls	r3, r0, #30
    4db4:	d043      	beq.n	4e3e <memset+0x8e>
    4db6:	1e54      	subs	r4, r2, #1
    4db8:	2a00      	cmp	r2, #0
    4dba:	d03f      	beq.n	4e3c <memset+0x8c>
    4dbc:	b2ce      	uxtb	r6, r1
    4dbe:	0002      	movs	r2, r0
    4dc0:	2503      	movs	r5, #3
    4dc2:	e002      	b.n	4dca <memset+0x1a>
    4dc4:	001a      	movs	r2, r3
    4dc6:	3c01      	subs	r4, #1
    4dc8:	d338      	bcc.n	4e3c <memset+0x8c>
    4dca:	1c53      	adds	r3, r2, #1
    4dcc:	7016      	strb	r6, [r2, #0]
    4dce:	422b      	tst	r3, r5
    4dd0:	d1f8      	bne.n	4dc4 <memset+0x14>
    4dd2:	2c03      	cmp	r4, #3
    4dd4:	d92a      	bls.n	4e2c <memset+0x7c>
    4dd6:	22ff      	movs	r2, #255	; 0xff
    4dd8:	400a      	ands	r2, r1
    4dda:	0215      	lsls	r5, r2, #8
    4ddc:	4315      	orrs	r5, r2
    4dde:	042a      	lsls	r2, r5, #16
    4de0:	4315      	orrs	r5, r2
    4de2:	2c0f      	cmp	r4, #15
    4de4:	d914      	bls.n	4e10 <memset+0x60>
    4de6:	0027      	movs	r7, r4
    4de8:	001a      	movs	r2, r3
    4dea:	3f10      	subs	r7, #16
    4dec:	093e      	lsrs	r6, r7, #4
    4dee:	3601      	adds	r6, #1
    4df0:	0136      	lsls	r6, r6, #4
    4df2:	199e      	adds	r6, r3, r6
    4df4:	6015      	str	r5, [r2, #0]
    4df6:	6055      	str	r5, [r2, #4]
    4df8:	6095      	str	r5, [r2, #8]
    4dfa:	60d5      	str	r5, [r2, #12]
    4dfc:	3210      	adds	r2, #16
    4dfe:	4296      	cmp	r6, r2
    4e00:	d1f8      	bne.n	4df4 <memset+0x44>
    4e02:	220f      	movs	r2, #15
    4e04:	4397      	bics	r7, r2
    4e06:	3710      	adds	r7, #16
    4e08:	19db      	adds	r3, r3, r7
    4e0a:	4014      	ands	r4, r2
    4e0c:	2c03      	cmp	r4, #3
    4e0e:	d90d      	bls.n	4e2c <memset+0x7c>
    4e10:	001a      	movs	r2, r3
    4e12:	1f27      	subs	r7, r4, #4
    4e14:	08be      	lsrs	r6, r7, #2
    4e16:	3601      	adds	r6, #1
    4e18:	00b6      	lsls	r6, r6, #2
    4e1a:	199e      	adds	r6, r3, r6
    4e1c:	c220      	stmia	r2!, {r5}
    4e1e:	42b2      	cmp	r2, r6
    4e20:	d1fc      	bne.n	4e1c <memset+0x6c>
    4e22:	2203      	movs	r2, #3
    4e24:	4397      	bics	r7, r2
    4e26:	3704      	adds	r7, #4
    4e28:	19db      	adds	r3, r3, r7
    4e2a:	4014      	ands	r4, r2
    4e2c:	2c00      	cmp	r4, #0
    4e2e:	d005      	beq.n	4e3c <memset+0x8c>
    4e30:	b2c9      	uxtb	r1, r1
    4e32:	191c      	adds	r4, r3, r4
    4e34:	7019      	strb	r1, [r3, #0]
    4e36:	3301      	adds	r3, #1
    4e38:	429c      	cmp	r4, r3
    4e3a:	d1fb      	bne.n	4e34 <memset+0x84>
    4e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e3e:	0014      	movs	r4, r2
    4e40:	0003      	movs	r3, r0
    4e42:	e7c6      	b.n	4dd2 <memset+0x22>

00004e44 <strlen>:
    4e44:	b510      	push	{r4, lr}
    4e46:	0783      	lsls	r3, r0, #30
    4e48:	d025      	beq.n	4e96 <strlen+0x52>
    4e4a:	7803      	ldrb	r3, [r0, #0]
    4e4c:	2b00      	cmp	r3, #0
    4e4e:	d024      	beq.n	4e9a <strlen+0x56>
    4e50:	0003      	movs	r3, r0
    4e52:	2103      	movs	r1, #3
    4e54:	e002      	b.n	4e5c <strlen+0x18>
    4e56:	781a      	ldrb	r2, [r3, #0]
    4e58:	2a00      	cmp	r2, #0
    4e5a:	d01a      	beq.n	4e92 <strlen+0x4e>
    4e5c:	3301      	adds	r3, #1
    4e5e:	420b      	tst	r3, r1
    4e60:	d1f9      	bne.n	4e56 <strlen+0x12>
    4e62:	6819      	ldr	r1, [r3, #0]
    4e64:	4a0e      	ldr	r2, [pc, #56]	; (4ea0 <strlen+0x5c>)
    4e66:	4c0f      	ldr	r4, [pc, #60]	; (4ea4 <strlen+0x60>)
    4e68:	188a      	adds	r2, r1, r2
    4e6a:	438a      	bics	r2, r1
    4e6c:	4222      	tst	r2, r4
    4e6e:	d106      	bne.n	4e7e <strlen+0x3a>
    4e70:	3304      	adds	r3, #4
    4e72:	6819      	ldr	r1, [r3, #0]
    4e74:	4a0a      	ldr	r2, [pc, #40]	; (4ea0 <strlen+0x5c>)
    4e76:	188a      	adds	r2, r1, r2
    4e78:	438a      	bics	r2, r1
    4e7a:	4222      	tst	r2, r4
    4e7c:	d0f8      	beq.n	4e70 <strlen+0x2c>
    4e7e:	001a      	movs	r2, r3
    4e80:	781b      	ldrb	r3, [r3, #0]
    4e82:	2b00      	cmp	r3, #0
    4e84:	d003      	beq.n	4e8e <strlen+0x4a>
    4e86:	3201      	adds	r2, #1
    4e88:	7811      	ldrb	r1, [r2, #0]
    4e8a:	2900      	cmp	r1, #0
    4e8c:	d1fb      	bne.n	4e86 <strlen+0x42>
    4e8e:	1a10      	subs	r0, r2, r0
    4e90:	bd10      	pop	{r4, pc}
    4e92:	1a18      	subs	r0, r3, r0
    4e94:	e7fc      	b.n	4e90 <strlen+0x4c>
    4e96:	0003      	movs	r3, r0
    4e98:	e7e3      	b.n	4e62 <strlen+0x1e>
    4e9a:	2000      	movs	r0, #0
    4e9c:	e7f8      	b.n	4e90 <strlen+0x4c>
    4e9e:	46c0      	nop			; (mov r8, r8)
    4ea0:	fefefeff 	.word	0xfefefeff
    4ea4:	80808080 	.word	0x80808080

00004ea8 <__register_exitproc>:
    4ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4eaa:	464e      	mov	r6, r9
    4eac:	4645      	mov	r5, r8
    4eae:	46de      	mov	lr, fp
    4eb0:	4657      	mov	r7, sl
    4eb2:	b5e0      	push	{r5, r6, r7, lr}
    4eb4:	4d36      	ldr	r5, [pc, #216]	; (4f90 <__register_exitproc+0xe8>)
    4eb6:	b083      	sub	sp, #12
    4eb8:	0006      	movs	r6, r0
    4eba:	6828      	ldr	r0, [r5, #0]
    4ebc:	4698      	mov	r8, r3
    4ebe:	000f      	movs	r7, r1
    4ec0:	4691      	mov	r9, r2
    4ec2:	f000 f899 	bl	4ff8 <__retarget_lock_acquire_recursive>
    4ec6:	4b33      	ldr	r3, [pc, #204]	; (4f94 <__register_exitproc+0xec>)
    4ec8:	681c      	ldr	r4, [r3, #0]
    4eca:	23a4      	movs	r3, #164	; 0xa4
    4ecc:	005b      	lsls	r3, r3, #1
    4ece:	58e0      	ldr	r0, [r4, r3]
    4ed0:	2800      	cmp	r0, #0
    4ed2:	d052      	beq.n	4f7a <__register_exitproc+0xd2>
    4ed4:	6843      	ldr	r3, [r0, #4]
    4ed6:	2b1f      	cmp	r3, #31
    4ed8:	dc13      	bgt.n	4f02 <__register_exitproc+0x5a>
    4eda:	1c5a      	adds	r2, r3, #1
    4edc:	9201      	str	r2, [sp, #4]
    4ede:	2e00      	cmp	r6, #0
    4ee0:	d128      	bne.n	4f34 <__register_exitproc+0x8c>
    4ee2:	9a01      	ldr	r2, [sp, #4]
    4ee4:	3302      	adds	r3, #2
    4ee6:	009b      	lsls	r3, r3, #2
    4ee8:	6042      	str	r2, [r0, #4]
    4eea:	501f      	str	r7, [r3, r0]
    4eec:	6828      	ldr	r0, [r5, #0]
    4eee:	f000 f885 	bl	4ffc <__retarget_lock_release_recursive>
    4ef2:	2000      	movs	r0, #0
    4ef4:	b003      	add	sp, #12
    4ef6:	bc3c      	pop	{r2, r3, r4, r5}
    4ef8:	4690      	mov	r8, r2
    4efa:	4699      	mov	r9, r3
    4efc:	46a2      	mov	sl, r4
    4efe:	46ab      	mov	fp, r5
    4f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f02:	4b25      	ldr	r3, [pc, #148]	; (4f98 <__register_exitproc+0xf0>)
    4f04:	2b00      	cmp	r3, #0
    4f06:	d03d      	beq.n	4f84 <__register_exitproc+0xdc>
    4f08:	20c8      	movs	r0, #200	; 0xc8
    4f0a:	0040      	lsls	r0, r0, #1
    4f0c:	f7fb fab4 	bl	478 <malloc>
    4f10:	2800      	cmp	r0, #0
    4f12:	d037      	beq.n	4f84 <__register_exitproc+0xdc>
    4f14:	22a4      	movs	r2, #164	; 0xa4
    4f16:	2300      	movs	r3, #0
    4f18:	0052      	lsls	r2, r2, #1
    4f1a:	58a1      	ldr	r1, [r4, r2]
    4f1c:	6043      	str	r3, [r0, #4]
    4f1e:	6001      	str	r1, [r0, #0]
    4f20:	50a0      	str	r0, [r4, r2]
    4f22:	3240      	adds	r2, #64	; 0x40
    4f24:	5083      	str	r3, [r0, r2]
    4f26:	3204      	adds	r2, #4
    4f28:	5083      	str	r3, [r0, r2]
    4f2a:	3301      	adds	r3, #1
    4f2c:	9301      	str	r3, [sp, #4]
    4f2e:	2300      	movs	r3, #0
    4f30:	2e00      	cmp	r6, #0
    4f32:	d0d6      	beq.n	4ee2 <__register_exitproc+0x3a>
    4f34:	009a      	lsls	r2, r3, #2
    4f36:	4692      	mov	sl, r2
    4f38:	4482      	add	sl, r0
    4f3a:	464a      	mov	r2, r9
    4f3c:	2188      	movs	r1, #136	; 0x88
    4f3e:	4654      	mov	r4, sl
    4f40:	5062      	str	r2, [r4, r1]
    4f42:	22c4      	movs	r2, #196	; 0xc4
    4f44:	0052      	lsls	r2, r2, #1
    4f46:	4691      	mov	r9, r2
    4f48:	4481      	add	r9, r0
    4f4a:	464a      	mov	r2, r9
    4f4c:	3987      	subs	r1, #135	; 0x87
    4f4e:	4099      	lsls	r1, r3
    4f50:	6812      	ldr	r2, [r2, #0]
    4f52:	468b      	mov	fp, r1
    4f54:	430a      	orrs	r2, r1
    4f56:	4694      	mov	ip, r2
    4f58:	464a      	mov	r2, r9
    4f5a:	4661      	mov	r1, ip
    4f5c:	6011      	str	r1, [r2, #0]
    4f5e:	2284      	movs	r2, #132	; 0x84
    4f60:	4641      	mov	r1, r8
    4f62:	0052      	lsls	r2, r2, #1
    4f64:	50a1      	str	r1, [r4, r2]
    4f66:	2e02      	cmp	r6, #2
    4f68:	d1bb      	bne.n	4ee2 <__register_exitproc+0x3a>
    4f6a:	0002      	movs	r2, r0
    4f6c:	465c      	mov	r4, fp
    4f6e:	328d      	adds	r2, #141	; 0x8d
    4f70:	32ff      	adds	r2, #255	; 0xff
    4f72:	6811      	ldr	r1, [r2, #0]
    4f74:	430c      	orrs	r4, r1
    4f76:	6014      	str	r4, [r2, #0]
    4f78:	e7b3      	b.n	4ee2 <__register_exitproc+0x3a>
    4f7a:	0020      	movs	r0, r4
    4f7c:	304d      	adds	r0, #77	; 0x4d
    4f7e:	30ff      	adds	r0, #255	; 0xff
    4f80:	50e0      	str	r0, [r4, r3]
    4f82:	e7a7      	b.n	4ed4 <__register_exitproc+0x2c>
    4f84:	6828      	ldr	r0, [r5, #0]
    4f86:	f000 f839 	bl	4ffc <__retarget_lock_release_recursive>
    4f8a:	2001      	movs	r0, #1
    4f8c:	4240      	negs	r0, r0
    4f8e:	e7b1      	b.n	4ef4 <__register_exitproc+0x4c>
    4f90:	20000498 	.word	0x20000498
    4f94:	0000523c 	.word	0x0000523c
    4f98:	00000479 	.word	0x00000479

00004f9c <register_fini>:
    4f9c:	4b03      	ldr	r3, [pc, #12]	; (4fac <register_fini+0x10>)
    4f9e:	b510      	push	{r4, lr}
    4fa0:	2b00      	cmp	r3, #0
    4fa2:	d002      	beq.n	4faa <register_fini+0xe>
    4fa4:	4802      	ldr	r0, [pc, #8]	; (4fb0 <register_fini+0x14>)
    4fa6:	f000 f805 	bl	4fb4 <atexit>
    4faa:	bd10      	pop	{r4, pc}
    4fac:	00000000 	.word	0x00000000
    4fb0:	00004fc5 	.word	0x00004fc5

00004fb4 <atexit>:
    4fb4:	b510      	push	{r4, lr}
    4fb6:	0001      	movs	r1, r0
    4fb8:	2300      	movs	r3, #0
    4fba:	2200      	movs	r2, #0
    4fbc:	2000      	movs	r0, #0
    4fbe:	f7ff ff73 	bl	4ea8 <__register_exitproc>
    4fc2:	bd10      	pop	{r4, pc}

00004fc4 <__libc_fini_array>:
    4fc4:	b570      	push	{r4, r5, r6, lr}
    4fc6:	4b09      	ldr	r3, [pc, #36]	; (4fec <__libc_fini_array+0x28>)
    4fc8:	4c09      	ldr	r4, [pc, #36]	; (4ff0 <__libc_fini_array+0x2c>)
    4fca:	1ae4      	subs	r4, r4, r3
    4fcc:	10a4      	asrs	r4, r4, #2
    4fce:	d009      	beq.n	4fe4 <__libc_fini_array+0x20>
    4fd0:	4a08      	ldr	r2, [pc, #32]	; (4ff4 <__libc_fini_array+0x30>)
    4fd2:	18a5      	adds	r5, r4, r2
    4fd4:	00ad      	lsls	r5, r5, #2
    4fd6:	18ed      	adds	r5, r5, r3
    4fd8:	682b      	ldr	r3, [r5, #0]
    4fda:	3c01      	subs	r4, #1
    4fdc:	4798      	blx	r3
    4fde:	3d04      	subs	r5, #4
    4fe0:	2c00      	cmp	r4, #0
    4fe2:	d1f9      	bne.n	4fd8 <__libc_fini_array+0x14>
    4fe4:	f000 f93c 	bl	5260 <_fini>
    4fe8:	bd70      	pop	{r4, r5, r6, pc}
    4fea:	46c0      	nop			; (mov r8, r8)
    4fec:	0000526c 	.word	0x0000526c
    4ff0:	00005270 	.word	0x00005270
    4ff4:	3fffffff 	.word	0x3fffffff

00004ff8 <__retarget_lock_acquire_recursive>:
    4ff8:	4770      	bx	lr
    4ffa:	46c0      	nop			; (mov r8, r8)

00004ffc <__retarget_lock_release_recursive>:
    4ffc:	4770      	bx	lr
    4ffe:	46c0      	nop			; (mov r8, r8)

00005000 <_ZTV6Stream>:
	...
    5008:	047d 0000 0aad 0000 0115 0000 0119 0000     }...............
    5018:	047d 0000 047d 0000 047d 0000               }...}...}...

00005024 <_ZTV9CDC_Class>:
	...
    502c:	016f 0000 02a5 0000 0115 0000 0241 0000     o...........A...
    503c:	018d 0000 0219 0000 0145 0000 01f9 0000     ........E.......
    504c:	0251 0000 025d 0000 0948 0000 0958 0000     Q...]...H...X...
    505c:	0964 0000 0976 0000 0942 0000 0942 0000     d...v...B...B...
    506c:	099c 0000 09ac 0000 0942 0000 0942 0000     ........B...B...
    507c:	098a 0000 09bc 0000 09bc 0000 0942 0000     ............B...
    508c:	5043 2055 6553 6972 6c61 203a 0000 0000     CPU Serial: ....
    509c:	7830 2e25 5838 0000 0a0d 0000 616e 006e     0x%.8X......nan.
    50ac:	6e69 0066 766f 0066                         inf.ovf.

000050b4 <defaultPreferences>:
    50b4:	00fa 0000 0032 0000                         ....2...

000050bc <defaultParameters>:
    50bc:	00aa 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
    50cc:	6c61 635f 6c61 6e65 6164 2e72 0063 0000     al_calendar.c...
    50dc:	2e2e 682f 6c61 732f 6372 682f 6c61 695f     ../hal/src/hal_i
    50ec:	2e6f 0063 2e2e 682f 6c61 732f 6372 682f     o.c.../hal/src/h
    50fc:	6c61 735f 6970 6d5f 735f 6e79 2e63 0063     al_spi_m_sync.c.
    510c:	2e2e 682f 6c61 732f 6372 682f 6c61 745f     ../hal/src/hal_t
    511c:	6d69 7265 632e 0000 2e2e 682f 6c61 752f     imer.c..../hal/u
    512c:	6974 736c 732f 6372 752f 6974 736c 6c5f     tils/src/utils_l
    513c:	7369 2e74 0063 0000 2e2e 682f 6c70 722f     ist.c...../hpl/r
    514c:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
    515c:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
    516c:	5f6c 6573 6372 6d6f 632e 0000               l_sercom.c..

00005178 <_tcs>:
    5178:	0003 0368 0000 0000 0000 0000 007d 0000     ..h.........}...
    5188:	0000 0000 0004 0368 0000 0000 0000 0000     ......h.........
    5198:	007d 0000 0000 0000 2e2e 682f 6c70 742f     }........./hpl/t
    51a8:	2f63 7068 5f6c 6374 632e 0000 2000 0000     c/hpl_tc.c... ..

000051b8 <_usb_ep_cfgs>:
    51b8:	09e4 2000 0000 0000 0040 0000 09a4 2000     ... ....@...... 
    51c8:	0964 2000 0040 0040 0924 2000 08e4 2000     d.. @.@.$.. ... 
    51d8:	0040 0040 08a4 2000 0864 2000 0040 0040     @.@.... d.. @.@.
    51e8:	0824 2000 0000 0000 0040 0000 48f0 0000     $.. ....@....H..
    51f8:	45d8 0000 48f0 0000 460a 0000 48f0 0000     .E...H...F...H..
    5208:	452e 0000 48f0 0000 48f0 0000 48f0 0000     .E...H...H...H..
    5218:	4542 0000 48f0 0000 463e 0000 2e2e 752f     BE...H..>F..../u
    5228:	6273 642f 7665 6369 2f65 7375 6462 2e63     sb/device/usbdc.
    5238:	0063 0000                                   c...

0000523c <_global_impure_ptr>:
    523c:	0070 2000                                   p.. 

00005240 <_init>:
    5240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5242:	46c0      	nop			; (mov r8, r8)
    5244:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5246:	bc08      	pop	{r3}
    5248:	469e      	mov	lr, r3
    524a:	4770      	bx	lr

0000524c <__init_array_start>:
    524c:	00004f9d 	.word	0x00004f9d

00005250 <__frame_dummy_init_array_entry>:
    5250:	000000dd 00000365 00000e3d 00001475     ....e...=...u...

00005260 <_fini>:
    5260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5262:	46c0      	nop			; (mov r8, r8)
    5264:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5266:	bc08      	pop	{r3}
    5268:	469e      	mov	lr, r3
    526a:	4770      	bx	lr

0000526c <__fini_array_start>:
    526c:	000000b5 	.word	0x000000b5
