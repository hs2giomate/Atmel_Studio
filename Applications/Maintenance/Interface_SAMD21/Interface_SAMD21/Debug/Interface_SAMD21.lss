
Interface_SAMD21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004fc8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00004fc8  00004fc8  00014fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000049c  20000000  00004fd0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000007e0  2000049c  0000546c  0002049c  2**2
                  ALLOC
  4 .stack        00002004  20000c7c  00005c4c  0002049c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000204c4  2**0
                  CONTENTS, READONLY
  7 .debug_info   000519dc  00000000  00000000  0002051d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007557  00000000  00000000  00071ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001bfdc  00000000  00000000  00079450  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000015d8  00000000  00000000  0009542c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002020  00000000  00000000  00096a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00023385  00000000  00000000  00098a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001e473  00000000  00000000  000bbda9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009a91b  00000000  00000000  000da21c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003cd0  00000000  00000000  00174b38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 2c 00 20 95 03 00 00 91 03 00 00 91 03 00 00     .,. ............
	...
      2c:	91 03 00 00 00 00 00 00 00 00 00 00 91 03 00 00     ................
      3c:	91 03 00 00 91 03 00 00 91 03 00 00 91 03 00 00     ................
      4c:	a9 23 00 00 91 03 00 00 91 03 00 00 91 03 00 00     .#..............
      5c:	55 3a 00 00 91 03 00 00 91 03 00 00 91 03 00 00     U:..............
      6c:	91 03 00 00 91 03 00 00 91 03 00 00 91 03 00 00     ................
      7c:	91 03 00 00 91 03 00 00 91 03 00 00 f1 28 00 00     .............(..
      8c:	05 29 00 00 19 29 00 00 91 03 00 00 91 03 00 00     .)...)..........
      9c:	91 03 00 00 91 03 00 00 91 03 00 00 91 03 00 00     ................
      ac:	91 03 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000049c 	.word	0x2000049c
      d4:	00000000 	.word	0x00000000
      d8:	00004fd0 	.word	0x00004fd0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004a0 	.word	0x200004a0
     108:	00004fd0 	.word	0x00004fd0
     10c:	00004fd0 	.word	0x00004fd0
     110:	00000000 	.word	0x00000000

00000114 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     114:	2000      	movs	r0, #0
     116:	4770      	bx	lr

00000118 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     118:	4770      	bx	lr
	...

0000011c <_ZL12cb_bulk_readh13usb_xfer_codem>:
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	
	ptrCDCClass->rxReady=true;
     11c:	4b03      	ldr	r3, [pc, #12]	; (12c <_ZL12cb_bulk_readh13usb_xfer_codem+0x10>)
     11e:	681b      	ldr	r3, [r3, #0]
     120:	2201      	movs	r2, #1
     122:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->terminalStarted=true;
     124:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
     126:	741a      	strb	r2, [r3, #16]


	return false;
}
     128:	2000      	movs	r0, #0
     12a:	4770      	bx	lr
     12c:	200004b8 	.word	0x200004b8

00000130 <_ZL13cb_bulk_writeh13usb_xfer_codem>:
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
     130:	4b03      	ldr	r3, [pc, #12]	; (140 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x10>)
     132:	681b      	ldr	r3, [r3, #0]
     134:	2201      	movs	r2, #1
     136:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->terminalStarted=true;
     138:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->plugged=true;
     13a:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
}
     13c:	2000      	movs	r0, #0
     13e:	4770      	bx	lr
     140:	200004b8 	.word	0x200004b8

00000144 <_ZN9CDC_Class4peekEv>:
	return cdcdf_acm_is_enabled();
	
}

int CDC_Class::peek(void)
{
     144:	b530      	push	{r4, r5, lr}
     146:	b083      	sub	sp, #12
     148:	0004      	movs	r4, r0
	uint8_t	r;
	if (_serialPeek != -1)
     14a:	6983      	ldr	r3, [r0, #24]
     14c:	3301      	adds	r3, #1
     14e:	d002      	beq.n	156 <_ZN9CDC_Class4peekEv+0x12>
	return _serialPeek;
     150:	6980      	ldr	r0, [r0, #24]
	_serialPeek = readData(&r,1);
	_serialPeek=(int)r;
	return _serialPeek;
}
     152:	b003      	add	sp, #12
     154:	bd30      	pop	{r4, r5, pc}
	_serialPeek = readData(&r,1);
     156:	466b      	mov	r3, sp
     158:	1ddd      	adds	r5, r3, #7
     15a:	6803      	ldr	r3, [r0, #0]
     15c:	69db      	ldr	r3, [r3, #28]
     15e:	2201      	movs	r2, #1
     160:	0029      	movs	r1, r5
     162:	4798      	blx	r3
     164:	61a0      	str	r0, [r4, #24]
	_serialPeek=(int)r;
     166:	782b      	ldrb	r3, [r5, #0]
     168:	61a3      	str	r3, [r4, #24]
	return _serialPeek;
     16a:	69a0      	ldr	r0, [r4, #24]
     16c:	e7f1      	b.n	152 <_ZN9CDC_Class4peekEv+0xe>

0000016e <_ZN9CDC_Class5writeEh>:
}

void	CDC_Class::clear(void){
	cdcdf_acm_stop_xfer();
}
size_t CDC_Class::write(uint8_t c) {
     16e:	b500      	push	{lr}
     170:	b083      	sub	sp, #12
     172:	466b      	mov	r3, sp
     174:	71d9      	strb	r1, [r3, #7]
		while(!txReady);
     176:	7d03      	ldrb	r3, [r0, #20]
     178:	2b00      	cmp	r3, #0
     17a:	d0fc      	beq.n	176 <_ZN9CDC_Class5writeEh+0x8>
	
		return writeData(&c, 1);
     17c:	6803      	ldr	r3, [r0, #0]
     17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     180:	2201      	movs	r2, #1
     182:	4669      	mov	r1, sp
     184:	3107      	adds	r1, #7
     186:	4798      	blx	r3
}
     188:	b003      	add	sp, #12
     18a:	bd00      	pop	{pc}

0000018c <_ZN9CDC_Class9availableEv>:
	return r;		
}


bool	CDC_Class::available(void){
	if (rxReady && txReady)
     18c:	7d43      	ldrb	r3, [r0, #21]
     18e:	b2db      	uxtb	r3, r3
     190:	2b00      	cmp	r3, #0
     192:	d001      	beq.n	198 <_ZN9CDC_Class9availableEv+0xc>
     194:	7d03      	ldrb	r3, [r0, #20]
     196:	b2db      	uxtb	r3, r3
	{
		
	return false;
	}
	
}
     198:	0018      	movs	r0, r3
     19a:	4770      	bx	lr

0000019c <_ZN9CDC_ClassD1Ev>:
CDC_Class::~CDC_Class()
     19c:	b510      	push	{r4, lr}
     19e:	0004      	movs	r4, r0
     1a0:	4b03      	ldr	r3, [pc, #12]	; (1b0 <_ZN9CDC_ClassD1Ev+0x14>)
     1a2:	3308      	adds	r3, #8
     1a4:	6003      	str	r3, [r0, #0]
     1a6:	3010      	adds	r0, #16
     1a8:	4b02      	ldr	r3, [pc, #8]	; (1b4 <_ZN9CDC_ClassD1Ev+0x18>)
     1aa:	4798      	blx	r3
} //~CDC_Class
     1ac:	0020      	movs	r0, r4
     1ae:	bd10      	pop	{r4, pc}
     1b0:	00004d64 	.word	0x00004d64
     1b4:	00000b99 	.word	0x00000b99

000001b8 <_ZL10cb_state_c22usb_cdc_control_signal>:
{
     1b8:	b510      	push	{r4, lr}
     1ba:	b082      	sub	sp, #8
     1bc:	1c03      	adds	r3, r0, #0
     1be:	aa01      	add	r2, sp, #4
     1c0:	8010      	strh	r0, [r2, #0]
	if (state.rs232.DTR) {
     1c2:	07db      	lsls	r3, r3, #31
     1c4:	d402      	bmi.n	1cc <_ZL10cb_state_c22usb_cdc_control_signal+0x14>
}
     1c6:	2000      	movs	r0, #0
     1c8:	b002      	add	sp, #8
     1ca:	bd10      	pop	{r4, pc}
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
     1cc:	4906      	ldr	r1, [pc, #24]	; (1e8 <_ZL10cb_state_c22usb_cdc_control_signal+0x30>)
     1ce:	2000      	movs	r0, #0
     1d0:	4c06      	ldr	r4, [pc, #24]	; (1ec <_ZL10cb_state_c22usb_cdc_control_signal+0x34>)
     1d2:	47a0      	blx	r4
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
     1d4:	4906      	ldr	r1, [pc, #24]	; (1f0 <_ZL10cb_state_c22usb_cdc_control_signal+0x38>)
     1d6:	2001      	movs	r0, #1
     1d8:	47a0      	blx	r4
		ptrCDCClass->txReady=true;
     1da:	4b06      	ldr	r3, [pc, #24]	; (1f4 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>)
     1dc:	681b      	ldr	r3, [r3, #0]
     1de:	2201      	movs	r2, #1
     1e0:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
     1e2:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->plugged=true;
     1e4:	741a      	strb	r2, [r3, #16]
     1e6:	e7ee      	b.n	1c6 <_ZL10cb_state_c22usb_cdc_control_signal+0xe>
     1e8:	0000011d 	.word	0x0000011d
     1ec:	00004005 	.word	0x00004005
     1f0:	00000131 	.word	0x00000131
     1f4:	200004b8 	.word	0x200004b8

000001f8 <_ZN9CDC_Class8readDataEPvl>:
{
     1f8:	b510      	push	{r4, lr}
     1fa:	0004      	movs	r4, r0
     1fc:	0008      	movs	r0, r1
	rxReady=false;
     1fe:	2300      	movs	r3, #0
     200:	7563      	strb	r3, [r4, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
     202:	0011      	movs	r1, r2
     204:	4b03      	ldr	r3, [pc, #12]	; (214 <_ZN9CDC_Class8readDataEPvl+0x1c>)
     206:	4798      	blx	r3
	while(!rxReady);
     208:	7d63      	ldrb	r3, [r4, #21]
     20a:	2b00      	cmp	r3, #0
     20c:	d0fc      	beq.n	208 <_ZN9CDC_Class8readDataEPvl+0x10>
	return r;
     20e:	23ff      	movs	r3, #255	; 0xff
     210:	4018      	ands	r0, r3
}
     212:	bd10      	pop	{r4, pc}
     214:	00003f95 	.word	0x00003f95

00000218 <_ZN9CDC_Class4readEv>:
{
     218:	b510      	push	{r4, lr}
     21a:	b082      	sub	sp, #8
     21c:	0004      	movs	r4, r0
	rxReady=false;
     21e:	2300      	movs	r3, #0
     220:	7543      	strb	r3, [r0, #21]
	cdcdf_acm_read(&p, 1);
     222:	2101      	movs	r1, #1
     224:	466b      	mov	r3, sp
     226:	1dd8      	adds	r0, r3, #7
     228:	4b04      	ldr	r3, [pc, #16]	; (23c <_ZN9CDC_Class4readEv+0x24>)
     22a:	4798      	blx	r3
	while(!rxReady);
     22c:	7d63      	ldrb	r3, [r4, #21]
     22e:	2b00      	cmp	r3, #0
     230:	d0fc      	beq.n	22c <_ZN9CDC_Class4readEv+0x14>
	return (int)p;
     232:	466b      	mov	r3, sp
     234:	79d8      	ldrb	r0, [r3, #7]
}
     236:	b002      	add	sp, #8
     238:	bd10      	pop	{r4, pc}
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	00003f95 	.word	0x00003f95

00000240 <_ZN9CDC_Class5flushEv>:
void	CDC_Class::flush(void){
     240:	b510      	push	{r4, lr}
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
     242:	301c      	adds	r0, #28
     244:	2140      	movs	r1, #64	; 0x40
     246:	4b01      	ldr	r3, [pc, #4]	; (24c <_ZN9CDC_Class5flushEv+0xc>)
     248:	4798      	blx	r3
}
     24a:	bd10      	pop	{r4, pc}
     24c:	00003fc1 	.word	0x00003fc1

00000250 <_ZN9CDC_Class5clearEv>:
void	CDC_Class::clear(void){
     250:	b510      	push	{r4, lr}
	cdcdf_acm_stop_xfer();
     252:	4b01      	ldr	r3, [pc, #4]	; (258 <_ZN9CDC_Class5clearEv+0x8>)
     254:	4798      	blx	r3
}
     256:	bd10      	pop	{r4, pc}
     258:	00003fed 	.word	0x00003fed

0000025c <_ZN9CDC_Class9writeDataEPKvl>:
{
     25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     25e:	0004      	movs	r4, r0
     260:	000e      	movs	r6, r1
     262:	0017      	movs	r7, r2
	txReady=false;
     264:	2300      	movs	r3, #0
     266:	7503      	strb	r3, [r0, #20]
	if (CheckTerminal())
     268:	3010      	adds	r0, #16
     26a:	4b0a      	ldr	r3, [pc, #40]	; (294 <_ZN9CDC_Class9writeDataEPKvl+0x38>)
     26c:	4798      	blx	r3
		return 0;
     26e:	2500      	movs	r5, #0
	if (CheckTerminal())
     270:	2800      	cmp	r0, #0
     272:	d00d      	beq.n	290 <_ZN9CDC_Class9writeDataEPKvl+0x34>
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
     274:	0039      	movs	r1, r7
     276:	0030      	movs	r0, r6
     278:	4b07      	ldr	r3, [pc, #28]	; (298 <_ZN9CDC_Class9writeDataEPKvl+0x3c>)
     27a:	4798      	blx	r3
     27c:	0005      	movs	r5, r0
		while((!txReady)&&(terminalStarted)){
     27e:	7d23      	ldrb	r3, [r4, #20]
     280:	2b00      	cmp	r3, #0
     282:	d102      	bne.n	28a <_ZN9CDC_Class9writeDataEPKvl+0x2e>
     284:	7c63      	ldrb	r3, [r4, #17]
     286:	2b00      	cmp	r3, #0
     288:	d1f9      	bne.n	27e <_ZN9CDC_Class9writeDataEPKvl+0x22>
			usbTerminalTimer.Stop();
     28a:	4804      	ldr	r0, [pc, #16]	; (29c <_ZN9CDC_Class9writeDataEPKvl+0x40>)
     28c:	4b04      	ldr	r3, [pc, #16]	; (2a0 <_ZN9CDC_Class9writeDataEPKvl+0x44>)
     28e:	4798      	blx	r3
}
     290:	0028      	movs	r0, r5
     292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     294:	00000c09 	.word	0x00000c09
     298:	00003fc1 	.word	0x00003fc1
     29c:	2000060c 	.word	0x2000060c
     2a0:	00000ca1 	.word	0x00000ca1

000002a4 <_ZN9CDC_Class5writeEPKhj>:
{
     2a4:	b570      	push	{r4, r5, r6, lr}
     2a6:	0004      	movs	r4, r0
     2a8:	0008      	movs	r0, r1
	txReady=false;
     2aa:	2300      	movs	r3, #0
     2ac:	7523      	strb	r3, [r4, #20]
 	if (plugged){
     2ae:	7c23      	ldrb	r3, [r4, #16]
 		r=0;
     2b0:	2500      	movs	r5, #0
 	if (plugged){
     2b2:	2b00      	cmp	r3, #0
     2b4:	d00c      	beq.n	2d0 <_ZN9CDC_Class5writeEPKhj+0x2c>
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
     2b6:	0011      	movs	r1, r2
     2b8:	4b06      	ldr	r3, [pc, #24]	; (2d4 <_ZN9CDC_Class5writeEPKhj+0x30>)
     2ba:	4798      	blx	r3
     2bc:	0005      	movs	r5, r0
		while((!txReady)&&(terminalStarted));
     2be:	7d23      	ldrb	r3, [r4, #20]
     2c0:	2b00      	cmp	r3, #0
     2c2:	d102      	bne.n	2ca <_ZN9CDC_Class5writeEPKhj+0x26>
     2c4:	7c63      	ldrb	r3, [r4, #17]
     2c6:	2b00      	cmp	r3, #0
     2c8:	d1f9      	bne.n	2be <_ZN9CDC_Class5writeEPKhj+0x1a>
		usbTerminalTimer.Stop();
     2ca:	4803      	ldr	r0, [pc, #12]	; (2d8 <_ZN9CDC_Class5writeEPKhj+0x34>)
     2cc:	4b03      	ldr	r3, [pc, #12]	; (2dc <_ZN9CDC_Class5writeEPKhj+0x38>)
     2ce:	4798      	blx	r3
}
     2d0:	0028      	movs	r0, r5
     2d2:	bd70      	pop	{r4, r5, r6, pc}
     2d4:	00003fc1 	.word	0x00003fc1
     2d8:	2000060c 	.word	0x2000060c
     2dc:	00000ca1 	.word	0x00000ca1

000002e0 <_ZN9CDC_ClassC1Ev>:
CDC_Class::CDC_Class()
     2e0:	b510      	push	{r4, lr}
     2e2:	0004      	movs	r4, r0
    Print() : write_error(0) {}
     2e4:	2300      	movs	r3, #0
     2e6:	6043      	str	r3, [r0, #4]
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
     2e8:	4b08      	ldr	r3, [pc, #32]	; (30c <_ZN9CDC_ClassC1Ev+0x2c>)
     2ea:	6003      	str	r3, [r0, #0]
     2ec:	23fa      	movs	r3, #250	; 0xfa
     2ee:	009b      	lsls	r3, r3, #2
     2f0:	6083      	str	r3, [r0, #8]
     2f2:	3010      	adds	r0, #16
     2f4:	4b06      	ldr	r3, [pc, #24]	; (310 <_ZN9CDC_ClassC1Ev+0x30>)
     2f6:	4798      	blx	r3
     2f8:	4b06      	ldr	r3, [pc, #24]	; (314 <_ZN9CDC_ClassC1Ev+0x34>)
     2fa:	3308      	adds	r3, #8
     2fc:	6023      	str	r3, [r4, #0]
	_serialPeek=-1;
     2fe:	2301      	movs	r3, #1
     300:	425b      	negs	r3, r3
     302:	61a3      	str	r3, [r4, #24]
	ptrCDCClass=this;
     304:	4b04      	ldr	r3, [pc, #16]	; (318 <_ZN9CDC_ClassC1Ev+0x38>)
     306:	601c      	str	r4, [r3, #0]
} //CDC_Class
     308:	0020      	movs	r0, r4
     30a:	bd10      	pop	{r4, pc}
     30c:	00004d48 	.word	0x00004d48
     310:	00000b8d 	.word	0x00000b8d
     314:	00004d64 	.word	0x00004d64
     318:	200004b8 	.word	0x200004b8

0000031c <_ZN9CDC_Class4InitEv>:
void CDC_Class::Init(void){
     31c:	b510      	push	{r4, lr}
     31e:	0004      	movs	r4, r0
	OnInit();
     320:	3010      	adds	r0, #16
     322:	4b04      	ldr	r3, [pc, #16]	; (334 <_ZN9CDC_Class4InitEv+0x18>)
     324:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
     326:	4904      	ldr	r1, [pc, #16]	; (338 <_ZN9CDC_Class4InitEv+0x1c>)
     328:	2003      	movs	r0, #3
     32a:	4b04      	ldr	r3, [pc, #16]	; (33c <_ZN9CDC_Class4InitEv+0x20>)
     32c:	4798      	blx	r3
	if (plugged)
     32e:	7c23      	ldrb	r3, [r4, #16]
}
     330:	bd10      	pop	{r4, pc}
     332:	46c0      	nop			; (mov r8, r8)
     334:	00000b9d 	.word	0x00000b9d
     338:	000001b9 	.word	0x000001b9
     33c:	00004005 	.word	0x00004005

00000340 <_ZN9CDC_Class9IsEnabledEv>:
bool CDC_Class::IsEnabled(void){
     340:	b510      	push	{r4, lr}
	return cdcdf_acm_is_enabled();
     342:	4b01      	ldr	r3, [pc, #4]	; (348 <_ZN9CDC_Class9IsEnabledEv+0x8>)
     344:	4798      	blx	r3
}
     346:	bd10      	pop	{r4, pc}
     348:	00004055 	.word	0x00004055

0000034c <_ZN9CDC_Class12readDataAsynEPvl>:
{
     34c:	b510      	push	{r4, lr}
     34e:	000b      	movs	r3, r1
	rxReady=false;
     350:	2100      	movs	r1, #0
     352:	7541      	strb	r1, [r0, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
     354:	0011      	movs	r1, r2
     356:	0018      	movs	r0, r3
     358:	4b01      	ldr	r3, [pc, #4]	; (360 <_ZN9CDC_Class12readDataAsynEPvl+0x14>)
     35a:	4798      	blx	r3
}
     35c:	bd10      	pop	{r4, pc}
     35e:	46c0      	nop			; (mov r8, r8)
     360:	00003f95 	.word	0x00003f95

00000364 <_GLOBAL__sub_I_ptrCDCClass>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
     364:	b510      	push	{r4, lr}
     366:	4c05      	ldr	r4, [pc, #20]	; (37c <_GLOBAL__sub_I_ptrCDCClass+0x18>)
     368:	3404      	adds	r4, #4
     36a:	0020      	movs	r0, r4
     36c:	4b04      	ldr	r3, [pc, #16]	; (380 <_GLOBAL__sub_I_ptrCDCClass+0x1c>)
     36e:	4798      	blx	r3
     370:	4a04      	ldr	r2, [pc, #16]	; (384 <_GLOBAL__sub_I_ptrCDCClass+0x20>)
     372:	4905      	ldr	r1, [pc, #20]	; (388 <_GLOBAL__sub_I_ptrCDCClass+0x24>)
     374:	0020      	movs	r0, r4
     376:	4b05      	ldr	r3, [pc, #20]	; (38c <_GLOBAL__sub_I_ptrCDCClass+0x28>)
     378:	4798      	blx	r3
     37a:	bd10      	pop	{r4, pc}
     37c:	200004b8 	.word	0x200004b8
     380:	000002e1 	.word	0x000002e1
     384:	20000000 	.word	0x20000000
     388:	0000019d 	.word	0x0000019d
     38c:	000048ed 	.word	0x000048ed

00000390 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     390:	e7fe      	b.n	390 <Dummy_Handler>
	...

00000394 <Reset_Handler>:
{
     394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     396:	4a2a      	ldr	r2, [pc, #168]	; (440 <Reset_Handler+0xac>)
     398:	4b2a      	ldr	r3, [pc, #168]	; (444 <Reset_Handler+0xb0>)
     39a:	429a      	cmp	r2, r3
     39c:	d011      	beq.n	3c2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     39e:	001a      	movs	r2, r3
     3a0:	4b29      	ldr	r3, [pc, #164]	; (448 <Reset_Handler+0xb4>)
     3a2:	429a      	cmp	r2, r3
     3a4:	d20d      	bcs.n	3c2 <Reset_Handler+0x2e>
     3a6:	4a29      	ldr	r2, [pc, #164]	; (44c <Reset_Handler+0xb8>)
     3a8:	3303      	adds	r3, #3
     3aa:	1a9b      	subs	r3, r3, r2
     3ac:	089b      	lsrs	r3, r3, #2
     3ae:	3301      	adds	r3, #1
     3b0:	009b      	lsls	r3, r3, #2
     3b2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     3b4:	4823      	ldr	r0, [pc, #140]	; (444 <Reset_Handler+0xb0>)
     3b6:	4922      	ldr	r1, [pc, #136]	; (440 <Reset_Handler+0xac>)
     3b8:	588c      	ldr	r4, [r1, r2]
     3ba:	5084      	str	r4, [r0, r2]
     3bc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     3be:	429a      	cmp	r2, r3
     3c0:	d1fa      	bne.n	3b8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     3c2:	4a23      	ldr	r2, [pc, #140]	; (450 <Reset_Handler+0xbc>)
     3c4:	4b23      	ldr	r3, [pc, #140]	; (454 <Reset_Handler+0xc0>)
     3c6:	429a      	cmp	r2, r3
     3c8:	d20a      	bcs.n	3e0 <Reset_Handler+0x4c>
     3ca:	43d3      	mvns	r3, r2
     3cc:	4921      	ldr	r1, [pc, #132]	; (454 <Reset_Handler+0xc0>)
     3ce:	185b      	adds	r3, r3, r1
     3d0:	2103      	movs	r1, #3
     3d2:	438b      	bics	r3, r1
     3d4:	3304      	adds	r3, #4
     3d6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     3d8:	2100      	movs	r1, #0
     3da:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     3dc:	4293      	cmp	r3, r2
     3de:	d1fc      	bne.n	3da <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     3e0:	4a1d      	ldr	r2, [pc, #116]	; (458 <Reset_Handler+0xc4>)
     3e2:	21ff      	movs	r1, #255	; 0xff
     3e4:	4b1d      	ldr	r3, [pc, #116]	; (45c <Reset_Handler+0xc8>)
     3e6:	438b      	bics	r3, r1
     3e8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     3ea:	39fd      	subs	r1, #253	; 0xfd
     3ec:	2390      	movs	r3, #144	; 0x90
     3ee:	005b      	lsls	r3, r3, #1
     3f0:	4a1b      	ldr	r2, [pc, #108]	; (460 <Reset_Handler+0xcc>)
     3f2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     3f4:	4a1b      	ldr	r2, [pc, #108]	; (464 <Reset_Handler+0xd0>)
     3f6:	78d3      	ldrb	r3, [r2, #3]
     3f8:	2503      	movs	r5, #3
     3fa:	43ab      	bics	r3, r5
     3fc:	2402      	movs	r4, #2
     3fe:	4323      	orrs	r3, r4
     400:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     402:	78d3      	ldrb	r3, [r2, #3]
     404:	270c      	movs	r7, #12
     406:	43bb      	bics	r3, r7
     408:	2608      	movs	r6, #8
     40a:	4333      	orrs	r3, r6
     40c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     40e:	4b16      	ldr	r3, [pc, #88]	; (468 <Reset_Handler+0xd4>)
     410:	7b98      	ldrb	r0, [r3, #14]
     412:	2230      	movs	r2, #48	; 0x30
     414:	4390      	bics	r0, r2
     416:	2220      	movs	r2, #32
     418:	4310      	orrs	r0, r2
     41a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     41c:	7b99      	ldrb	r1, [r3, #14]
     41e:	43b9      	bics	r1, r7
     420:	4331      	orrs	r1, r6
     422:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     424:	7b9a      	ldrb	r2, [r3, #14]
     426:	43aa      	bics	r2, r5
     428:	4322      	orrs	r2, r4
     42a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     42c:	4a0f      	ldr	r2, [pc, #60]	; (46c <Reset_Handler+0xd8>)
     42e:	6853      	ldr	r3, [r2, #4]
     430:	2180      	movs	r1, #128	; 0x80
     432:	430b      	orrs	r3, r1
     434:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     436:	4b0e      	ldr	r3, [pc, #56]	; (470 <Reset_Handler+0xdc>)
     438:	4798      	blx	r3
        main();
     43a:	4b0e      	ldr	r3, [pc, #56]	; (474 <Reset_Handler+0xe0>)
     43c:	4798      	blx	r3
     43e:	e7fe      	b.n	43e <Reset_Handler+0xaa>
     440:	00004fd0 	.word	0x00004fd0
     444:	20000000 	.word	0x20000000
     448:	2000049c 	.word	0x2000049c
     44c:	20000004 	.word	0x20000004
     450:	2000049c 	.word	0x2000049c
     454:	20000c7c 	.word	0x20000c7c
     458:	e000ed00 	.word	0xe000ed00
     45c:	00000000 	.word	0x00000000
     460:	41007000 	.word	0x41007000
     464:	41005000 	.word	0x41005000
     468:	41004800 	.word	0x41004800
     46c:	41004000 	.word	0x41004000
     470:	00004a25 	.word	0x00004a25
     474:	00000481 	.word	0x00000481

00000478 <malloc>:

//............................................................................
extern "C" void *malloc(size_t)
	{
    return (void *)0;
	}
     478:	2000      	movs	r0, #0
     47a:	4770      	bx	lr

0000047c <__cxa_pure_virtual>:

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
		}
     47c:	4770      	bx	lr
	...

00000480 <main>:
	}
}


int main(void)
{
     480:	b530      	push	{r4, r5, lr}
     482:	b0c9      	sub	sp, #292	; 0x124
	atmel_start_init();
     484:	4b1c      	ldr	r3, [pc, #112]	; (4f8 <main+0x78>)
     486:	4798      	blx	r3
		usb.Init();
     488:	481c      	ldr	r0, [pc, #112]	; (4fc <main+0x7c>)
     48a:	4b1d      	ldr	r3, [pc, #116]	; (500 <main+0x80>)
     48c:	4798      	blx	r3
		delay_ms(500);
     48e:	20fa      	movs	r0, #250	; 0xfa
     490:	0040      	lsls	r0, r0, #1
     492:	4b1c      	ldr	r3, [pc, #112]	; (504 <main+0x84>)
     494:	4798      	blx	r3
		fram.Init();
     496:	481c      	ldr	r0, [pc, #112]	; (508 <main+0x88>)
     498:	4b1c      	ldr	r3, [pc, #112]	; (50c <main+0x8c>)
     49a:	4798      	blx	r3
		//WriteUserParametersFlash();
		Maintenance_Tool	toolApp;
     49c:	4668      	mov	r0, sp
     49e:	4b1c      	ldr	r3, [pc, #112]	; (510 <main+0x90>)
     4a0:	4798      	blx	r3
		toolApp.Init();
     4a2:	4668      	mov	r0, sp
     4a4:	4b1b      	ldr	r3, [pc, #108]	; (514 <main+0x94>)
     4a6:	4798      	blx	r3
		while (1)
		{
			if (toolApp.IsAppConnected())
     4a8:	4d1b      	ldr	r5, [pc, #108]	; (518 <main+0x98>)
				
				
			} 
			else
			{
				usb.writeData(localbuffer,4);
     4aa:	4b1c      	ldr	r3, [pc, #112]	; (51c <main+0x9c>)
     4ac:	1d1c      	adds	r4, r3, #4
     4ae:	e009      	b.n	4c4 <main+0x44>
						toolApp.NotifyConnectionAcknowledge();
     4b0:	4668      	mov	r0, sp
     4b2:	4b1b      	ldr	r3, [pc, #108]	; (520 <main+0xa0>)
     4b4:	4798      	blx	r3
						toolApp.ClearLocalBuffer();
     4b6:	4668      	mov	r0, sp
     4b8:	4b1a      	ldr	r3, [pc, #104]	; (524 <main+0xa4>)
     4ba:	4798      	blx	r3
						while (!usb.txReady);
     4bc:	4a0f      	ldr	r2, [pc, #60]	; (4fc <main+0x7c>)
     4be:	7d13      	ldrb	r3, [r2, #20]
     4c0:	2b00      	cmp	r3, #0
     4c2:	d0fc      	beq.n	4be <main+0x3e>
			if (toolApp.IsAppConnected())
     4c4:	4668      	mov	r0, sp
     4c6:	47a8      	blx	r5
     4c8:	2800      	cmp	r0, #0
     4ca:	d007      	beq.n	4dc <main+0x5c>
				if (toolApp.localBuffer[sizeof(GAINMessageHeader)]==(uint8_t)'f')
     4cc:	466b      	mov	r3, sp
     4ce:	7a5b      	ldrb	r3, [r3, #9]
     4d0:	2b66      	cmp	r3, #102	; 0x66
     4d2:	d0ed      	beq.n	4b0 <main+0x30>
					toolApp.handleCommunication();
     4d4:	4668      	mov	r0, sp
     4d6:	4b14      	ldr	r3, [pc, #80]	; (528 <main+0xa8>)
     4d8:	4798      	blx	r3
     4da:	e7f3      	b.n	4c4 <main+0x44>
				usb.writeData(localbuffer,4);
     4dc:	2204      	movs	r2, #4
     4de:	0021      	movs	r1, r4
     4e0:	4806      	ldr	r0, [pc, #24]	; (4fc <main+0x7c>)
     4e2:	4b12      	ldr	r3, [pc, #72]	; (52c <main+0xac>)
     4e4:	4798      	blx	r3
				toolApp.setConnected(false);
     4e6:	2100      	movs	r1, #0
     4e8:	4668      	mov	r0, sp
     4ea:	4b11      	ldr	r3, [pc, #68]	; (530 <main+0xb0>)
     4ec:	4798      	blx	r3
				delay_ms(100);
     4ee:	2064      	movs	r0, #100	; 0x64
     4f0:	4b04      	ldr	r3, [pc, #16]	; (504 <main+0x84>)
     4f2:	4798      	blx	r3
     4f4:	e7e6      	b.n	4c4 <main+0x44>
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	00001209 	.word	0x00001209
     4fc:	200004bc 	.word	0x200004bc
     500:	0000031d 	.word	0x0000031d
     504:	000015bd 	.word	0x000015bd
     508:	2000069c 	.word	0x2000069c
     50c:	00000fa1 	.word	0x00000fa1
     510:	00000555 	.word	0x00000555
     514:	000007a5 	.word	0x000007a5
     518:	000005a1 	.word	0x000005a1
     51c:	2000051c 	.word	0x2000051c
     520:	00000645 	.word	0x00000645
     524:	0000062d 	.word	0x0000062d
     528:	00000989 	.word	0x00000989
     52c:	0000025d 	.word	0x0000025d
     530:	0000056d 	.word	0x0000056d

00000534 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
     534:	4b02      	ldr	r3, [pc, #8]	; (540 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
     536:	681a      	ldr	r2, [r3, #0]
     538:	6813      	ldr	r3, [r2, #0]
     53a:	3301      	adds	r3, #1
     53c:	6013      	str	r3, [r2, #0]

}
     53e:	4770      	bx	lr
     540:	20000560 	.word	0x20000560

00000544 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
     544:	4b02      	ldr	r3, [pc, #8]	; (550 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
     546:	681b      	ldr	r3, [r3, #0]
     548:	2200      	movs	r2, #0
     54a:	711a      	strb	r2, [r3, #4]

}
     54c:	4770      	bx	lr
     54e:	46c0      	nop			; (mov r8, r8)
     550:	20000560 	.word	0x20000560

00000554 <_ZN16Maintenance_ToolC1Ev>:


// default constructor
Maintenance_Tool::Maintenance_Tool()
{
	ptrMaintenanceTool=this;
     554:	4b04      	ldr	r3, [pc, #16]	; (568 <_ZN16Maintenance_ToolC1Ev+0x14>)
     556:	6018      	str	r0, [r3, #0]
	maintenanceIsConnected = false;
     558:	2300      	movs	r3, #0
     55a:	2254      	movs	r2, #84	; 0x54
     55c:	5483      	strb	r3, [r0, r2]
	nextMaintenanceSyncTime = 0;
     55e:	6483      	str	r3, [r0, #72]	; 0x48
	nextMaintenanceUsageTimerSyncTime = 0;
     560:	64c3      	str	r3, [r0, #76]	; 0x4c
	ticks=0;
     562:	6003      	str	r3, [r0, #0]
	
} //Maintenance_Tool
     564:	4770      	bx	lr
     566:	46c0      	nop			; (mov r8, r8)
     568:	20000560 	.word	0x20000560

0000056c <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
     56c:	b510      	push	{r4, lr}
		maintenanceIsConnected = isConnected;
     56e:	2354      	movs	r3, #84	; 0x54
     570:	54c1      	strb	r1, [r0, r3]
		if (isConnected)
     572:	2900      	cmp	r1, #0
     574:	d103      	bne.n	57e <_ZN16Maintenance_Tool12setConnectedEb+0x12>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
     576:	4805      	ldr	r0, [pc, #20]	; (58c <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     578:	4b05      	ldr	r3, [pc, #20]	; (590 <_ZN16Maintenance_Tool12setConnectedEb+0x24>)
     57a:	4798      	blx	r3
				
		}

	//lastMaintenanceMessageReceivedTime = controller.ticks();
	}
     57c:	bd10      	pop	{r4, pc}
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
     57e:	4a05      	ldr	r2, [pc, #20]	; (594 <_ZN16Maintenance_Tool12setConnectedEb+0x28>)
     580:	4905      	ldr	r1, [pc, #20]	; (598 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
     582:	4802      	ldr	r0, [pc, #8]	; (58c <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     584:	4b05      	ldr	r3, [pc, #20]	; (59c <_ZN16Maintenance_Tool12setConnectedEb+0x30>)
     586:	4798      	blx	r3
     588:	e7f8      	b.n	57c <_ZN16Maintenance_Tool12setConnectedEb+0x10>
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	2000062c 	.word	0x2000062c
     590:	00000ca1 	.word	0x00000ca1
     594:	0000ea60 	.word	0x0000ea60
     598:	00000545 	.word	0x00000545
     59c:	00000d51 	.word	0x00000d51

000005a0 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
     5a0:	b570      	push	{r4, r5, r6, lr}
     5a2:	0004      	movs	r4, r0
	result=false;
     5a4:	2300      	movs	r3, #0
     5a6:	22f8      	movs	r2, #248	; 0xf8
     5a8:	5483      	strb	r3, [r0, r2]
	magic=0;
     5aa:	3220      	adds	r2, #32
     5ac:	5083      	str	r3, [r0, r2]
	if (gotAccess==true)
     5ae:	33f9      	adds	r3, #249	; 0xf9
     5b0:	5cc3      	ldrb	r3, [r0, r3]
     5b2:	2b00      	cmp	r3, #0
     5b4:	d006      	beq.n	5c4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x24>
		result=gotAccess;
     5b6:	3a18      	subs	r2, #24
     5b8:	3aff      	subs	r2, #255	; 0xff
     5ba:	23f8      	movs	r3, #248	; 0xf8
     5bc:	54c2      	strb	r2, [r0, r3]
	return	result;
     5be:	23f8      	movs	r3, #248	; 0xf8
     5c0:	5ce0      	ldrb	r0, [r4, r3]
}
     5c2:	bd70      	pop	{r4, r5, r6, pc}
		if (usb.rxReady)
     5c4:	4b15      	ldr	r3, [pc, #84]	; (61c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     5c6:	7d5b      	ldrb	r3, [r3, #21]
     5c8:	2b00      	cmp	r3, #0
     5ca:	d013      	beq.n	5f4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x54>
     5cc:	1d42      	adds	r2, r0, #5
     5ce:	3009      	adds	r0, #9
     5d0:	2300      	movs	r3, #0
				magic=magic<<8;
     5d2:	021b      	lsls	r3, r3, #8
				magic|= localBuffer[i];
     5d4:	7811      	ldrb	r1, [r2, #0]
     5d6:	430b      	orrs	r3, r1
     5d8:	3201      	adds	r2, #1
			for (int i = 0; i < 4; i++)
     5da:	4282      	cmp	r2, r0
     5dc:	d1f9      	bne.n	5d2 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x32>
     5de:	228c      	movs	r2, #140	; 0x8c
     5e0:	0052      	lsls	r2, r2, #1
     5e2:	50a3      	str	r3, [r4, r2]
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
     5e4:	4a0e      	ldr	r2, [pc, #56]	; (620 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
     5e6:	0010      	movs	r0, r2
     5e8:	4058      	eors	r0, r3
     5ea:	218a      	movs	r1, #138	; 0x8a
     5ec:	0049      	lsls	r1, r1, #1
     5ee:	5060      	str	r0, [r4, r1]
			if (xorResult==0)
     5f0:	4293      	cmp	r3, r2
     5f2:	d005      	beq.n	600 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x60>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     5f4:	1d61      	adds	r1, r4, #5
     5f6:	2240      	movs	r2, #64	; 0x40
     5f8:	4808      	ldr	r0, [pc, #32]	; (61c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     5fa:	4b0a      	ldr	r3, [pc, #40]	; (624 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
     5fc:	4798      	blx	r3
     5fe:	e7de      	b.n	5be <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1e>
				gotAccess=true;
     600:	2301      	movs	r3, #1
     602:	22f9      	movs	r2, #249	; 0xf9
     604:	54a3      	strb	r3, [r4, r2]
				result=true;
     606:	25f8      	movs	r5, #248	; 0xf8
     608:	5563      	strb	r3, [r4, r5]
				is_MTPC_Beaming=true;
     60a:	7123      	strb	r3, [r4, #4]
				setConnected(true);
     60c:	3914      	subs	r1, #20
     60e:	39ff      	subs	r1, #255	; 0xff
     610:	0020      	movs	r0, r4
     612:	4b05      	ldr	r3, [pc, #20]	; (628 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x88>)
     614:	4798      	blx	r3
				return	result;
     616:	5d60      	ldrb	r0, [r4, r5]
     618:	e7d3      	b.n	5c2 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x22>
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	200004bc 	.word	0x200004bc
     620:	61626364 	.word	0x61626364
     624:	0000034d 	.word	0x0000034d
     628:	0000056d 	.word	0x0000056d

0000062c <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
     62c:	2301      	movs	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
     62e:	2100      	movs	r1, #0
     630:	18c2      	adds	r2, r0, r3
     632:	7111      	strb	r1, [r2, #4]
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
     634:	b2da      	uxtb	r2, r3
     636:	3301      	adds	r3, #1
     638:	2b41      	cmp	r3, #65	; 0x41
     63a:	d1f9      	bne.n	630 <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x4>
     63c:	33db      	adds	r3, #219	; 0xdb
     63e:	54c2      	strb	r2, [r0, r3]
	}
	return	i;
}
     640:	0010      	movs	r0, r2
     642:	4770      	bx	lr

00000644 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv>:
// 	io.writeData(&checksum, sizeof(checksum));

	return result;
	}
	
bool	Maintenance_Tool::NotifyConnectionAcknowledge(void){
     644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     646:	0005      	movs	r5, r0
	memcpy(&deviceID.cpuSerialNumber,cpuSerial,sizeof(cpuSerial));
     648:	30b0      	adds	r0, #176	; 0xb0
     64a:	1ce9      	adds	r1, r5, #3
     64c:	31ff      	adds	r1, #255	; 0xff
     64e:	2210      	movs	r2, #16
     650:	4b14      	ldr	r3, [pc, #80]	; (6a4 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x60>)
     652:	4798      	blx	r3
	//deviceID.cpuSerialNumber=cpuSerial;
	delay_us(100);
     654:	2064      	movs	r0, #100	; 0x64
     656:	4b14      	ldr	r3, [pc, #80]	; (6a8 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x64>)
     658:	4798      	blx	r3
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
     65a:	4914      	ldr	r1, [pc, #80]	; (6ac <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x68>)
     65c:	4814      	ldr	r0, [pc, #80]	; (6b0 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x6c>)
     65e:	4b15      	ldr	r3, [pc, #84]	; (6b4 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x70>)
     660:	4798      	blx	r3
	usb<<"CPU Serial: ";
	for (i = 0; i < sizeof(cpuSerial); i++)
     662:	2200      	movs	r2, #0
     664:	238e      	movs	r3, #142	; 0x8e
     666:	005b      	lsls	r3, r3, #1
     668:	54ea      	strb	r2, [r5, r3]
     66a:	2300      	movs	r3, #0
	{
		usb.print(cpuSerial[i],HEX);
     66c:	4c10      	ldr	r4, [pc, #64]	; (6b0 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x6c>)
     66e:	4f12      	ldr	r7, [pc, #72]	; (6b8 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x74>)
	for (i = 0; i < sizeof(cpuSerial); i++)
     670:	268e      	movs	r6, #142	; 0x8e
     672:	0076      	lsls	r6, r6, #1
		usb.print(cpuSerial[i],HEX);
     674:	18eb      	adds	r3, r5, r3
     676:	3303      	adds	r3, #3
     678:	33ff      	adds	r3, #255	; 0xff
     67a:	7819      	ldrb	r1, [r3, #0]
     67c:	2210      	movs	r2, #16
     67e:	0020      	movs	r0, r4
     680:	47b8      	blx	r7
	for (i = 0; i < sizeof(cpuSerial); i++)
     682:	5dab      	ldrb	r3, [r5, r6]
     684:	3301      	adds	r3, #1
     686:	b2db      	uxtb	r3, r3
     688:	55ab      	strb	r3, [r5, r6]
     68a:	2b0f      	cmp	r3, #15
     68c:	d9f2      	bls.n	674 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x30>
	}

	usb.println();
     68e:	4808      	ldr	r0, [pc, #32]	; (6b0 <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x6c>)
     690:	4b0a      	ldr	r3, [pc, #40]	; (6bc <_ZN16Maintenance_Tool27NotifyConnectionAcknowledgeEv+0x78>)
     692:	4798      	blx	r3
	result=(bool)(i>0);
     694:	238e      	movs	r3, #142	; 0x8e
     696:	005b      	lsls	r3, r3, #1
     698:	5ce8      	ldrb	r0, [r5, r3]
     69a:	4240      	negs	r0, r0
     69c:	0fc0      	lsrs	r0, r0, #31
     69e:	3b24      	subs	r3, #36	; 0x24
     6a0:	54e8      	strb	r0, [r5, r3]
	return result;
}
     6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     6a4:	00004a6d 	.word	0x00004a6d
     6a8:	0000159d 	.word	0x0000159d
     6ac:	00004dcc 	.word	0x00004dcc
     6b0:	200004bc 	.word	0x200004bc
     6b4:	00000a7d 	.word	0x00000a7d
     6b8:	00000b6d 	.word	0x00000b6d
     6bc:	00000aa1 	.word	0x00000aa1

000006c0 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17GAINMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( GAINMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
     6c0:	2354      	movs	r3, #84	; 0x54
     6c2:	5cc3      	ldrb	r3, [r0, r3]
     6c4:	2b00      	cmp	r3, #0
     6c6:	d105      	bne.n	6d4 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17GAINMessageHeader+0x14>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
     6c8:	6483      	str	r3, [r0, #72]	; 0x48
		maintenanceIsConnected = true;
     6ca:	3301      	adds	r3, #1
     6cc:	2254      	movs	r2, #84	; 0x54
     6ce:	5483      	strb	r3, [r0, r2]
		bSendNotifications = true;
     6d0:	3201      	adds	r2, #1
     6d2:	5483      	strb	r3, [r0, r2]
// 	#ifdef E_DEVICE
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
     6d4:	23f8      	movs	r3, #248	; 0xf8
     6d6:	5cc0      	ldrb	r0, [r0, r3]
	}
     6d8:	4770      	bx	lr
	...

000006dc <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader>:
		 }
		
		 return result;
}

bool Maintenance_Tool::handleGAINCommandWriteParameters(GAINMessageHeader& header)	{
     6dc:	b510      	push	{r4, lr}
     6de:	0004      	movs	r4, r0

	uint32_t	w,r;
	
	bool	result(header.command == kGAINCommandWriteParameters);
	if (result){
     6e0:	780b      	ldrb	r3, [r1, #0]
	bool	result(header.command == kGAINCommandWriteParameters);
     6e2:	2000      	movs	r0, #0
	if (result){
     6e4:	2b47      	cmp	r3, #71	; 0x47
     6e6:	d000      	beq.n	6ea <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader+0xe>
		// 		 		for (i=0; i<header.dataSize; i++)
		// 		 			io >> ch;
	}
	
	return result;
}
     6e8:	bd10      	pop	{r4, pc}
		memcpy((uint8_t*)&parameters,&localBuffer[n+1],sizeof(userParameters));
     6ea:	7ae2      	ldrb	r2, [r4, #11]
     6ec:	33b9      	adds	r3, #185	; 0xb9
     6ee:	54e2      	strb	r2, [r4, r3]
		uint32_t add=(uint32_t)&framMemory->parameters;
     6f0:	4b08      	ldr	r3, [pc, #32]	; (714 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader+0x38>)
     6f2:	681a      	ldr	r2, [r3, #0]
     6f4:	2380      	movs	r3, #128	; 0x80
     6f6:	009b      	lsls	r3, r3, #2
     6f8:	469c      	mov	ip, r3
     6fa:	4462      	add	r2, ip
			r=fram.WriteAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(userParameters));
     6fc:	b292      	uxth	r2, r2
     6fe:	1c61      	adds	r1, r4, #1
     700:	31ff      	adds	r1, #255	; 0xff
     702:	2301      	movs	r3, #1
     704:	4804      	ldr	r0, [pc, #16]	; (718 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader+0x3c>)
     706:	4c05      	ldr	r4, [pc, #20]	; (71c <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader+0x40>)
     708:	47a0      	blx	r4
			result=(bool)(r==0);
     70a:	4243      	negs	r3, r0
     70c:	4158      	adcs	r0, r3
     70e:	b2c0      	uxtb	r0, r0
     710:	e7ea      	b.n	6e8 <_ZN16Maintenance_Tool32handleGAINCommandWriteParametersER17GAINMessageHeader+0xc>
     712:	46c0      	nop			; (mov r8, r8)
     714:	20000698 	.word	0x20000698
     718:	2000069c 	.word	0x2000069c
     71c:	00000fe5 	.word	0x00000fe5

00000720 <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
     720:	b530      	push	{r4, r5, lr}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
     722:	0855      	lsrs	r5, r2, #1
     724:	2d00      	cmp	r5, #0
     726:	dd07      	ble.n	738 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x18>
     728:	2000      	movs	r0, #0
		checksum ^= ((uint16*)data)[i];
     72a:	0044      	lsls	r4, r0, #1
     72c:	5ae4      	ldrh	r4, [r4, r3]
     72e:	4061      	eors	r1, r4
	for (i=0; i<(size/2); i++)
     730:	3001      	adds	r0, #1
     732:	b280      	uxth	r0, r0
     734:	42a8      	cmp	r0, r5
     736:	dbf8      	blt.n	72a <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0xa>
     738:	0008      	movs	r0, r1
	
	if (size & 0x01)
     73a:	07d4      	lsls	r4, r2, #31
     73c:	d503      	bpl.n	746 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x26>
		checksum ^= (uint16)((uint8*)data)[size - 1];
     73e:	189b      	adds	r3, r3, r2
     740:	3b01      	subs	r3, #1
     742:	7818      	ldrb	r0, [r3, #0]
     744:	4048      	eors	r0, r1

	return checksum;
	}
     746:	bd30      	pop	{r4, r5, pc}

00000748 <_ZN16Maintenance_Tool17calculateChecksumERK17GAINMessageHeader>:
	{
     748:	b570      	push	{r4, r5, r6, lr}
     74a:	0004      	movs	r4, r0
     74c:	000b      	movs	r3, r1
	checksum=0;
     74e:	25fc      	movs	r5, #252	; 0xfc
     750:	2200      	movs	r2, #0
     752:	5342      	strh	r2, [r0, r5]
	checksum = calculateChecksum(0, sizeof(header), &header);
     754:	3204      	adds	r2, #4
     756:	2100      	movs	r1, #0
     758:	4e01      	ldr	r6, [pc, #4]	; (760 <_ZN16Maintenance_Tool17calculateChecksumERK17GAINMessageHeader+0x18>)
     75a:	47b0      	blx	r6
     75c:	5360      	strh	r0, [r4, r5]
	}
     75e:	bd70      	pop	{r4, r5, r6, pc}
     760:	00000721 	.word	0x00000721

00000764 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
	}
	return	ticks;
}

void Maintenance_Tool::GetCPUSerialNumber(uint8_t* buffer)
{
     764:	b570      	push	{r4, r5, r6, lr}
     766:	000c      	movs	r4, r1
	memcpy(buffer, (uint8_t*)0x0080A00C, 4);
     768:	2204      	movs	r2, #4
     76a:	4909      	ldr	r1, [pc, #36]	; (790 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x2c>)
     76c:	0020      	movs	r0, r4
     76e:	4d09      	ldr	r5, [pc, #36]	; (794 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x30>)
     770:	47a8      	blx	r5
	memcpy(buffer + 4, (uint8_t*)0x0080A040, 4);
     772:	1d20      	adds	r0, r4, #4
     774:	2204      	movs	r2, #4
     776:	4908      	ldr	r1, [pc, #32]	; (798 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x34>)
     778:	47a8      	blx	r5
	memcpy(buffer + 8, (uint8_t*)0x0080A044, 4);
     77a:	0020      	movs	r0, r4
     77c:	3008      	adds	r0, #8
     77e:	2204      	movs	r2, #4
     780:	4906      	ldr	r1, [pc, #24]	; (79c <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x38>)
     782:	47a8      	blx	r5
	memcpy(buffer + 12, (uint8_t*)0x0080A048, 4);
     784:	0020      	movs	r0, r4
     786:	300c      	adds	r0, #12
     788:	2204      	movs	r2, #4
     78a:	4905      	ldr	r1, [pc, #20]	; (7a0 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x3c>)
     78c:	47a8      	blx	r5
     78e:	bd70      	pop	{r4, r5, r6, pc}
     790:	0080a00c 	.word	0x0080a00c
     794:	00004a6d 	.word	0x00004a6d
     798:	0080a040 	.word	0x0080a040
     79c:	0080a044 	.word	0x0080a044
     7a0:	0080a048 	.word	0x0080a048

000007a4 <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
     7a4:	b570      	push	{r4, r5, r6, lr}
     7a6:	0004      	movs	r4, r0
	ticks=0;
     7a8:	2500      	movs	r5, #0
     7aa:	6005      	str	r5, [r0, #0]
	interfaceTimer.Init();
     7ac:	4e0c      	ldr	r6, [pc, #48]	; (7e0 <_ZN16Maintenance_Tool4InitEv+0x3c>)
     7ae:	0030      	movs	r0, r6
     7b0:	4b0c      	ldr	r3, [pc, #48]	; (7e4 <_ZN16Maintenance_Tool4InitEv+0x40>)
     7b2:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
     7b4:	22fa      	movs	r2, #250	; 0xfa
     7b6:	0092      	lsls	r2, r2, #2
     7b8:	490b      	ldr	r1, [pc, #44]	; (7e8 <_ZN16Maintenance_Tool4InitEv+0x44>)
     7ba:	0030      	movs	r0, r6
     7bc:	4b0b      	ldr	r3, [pc, #44]	; (7ec <_ZN16Maintenance_Tool4InitEv+0x48>)
     7be:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
     7c0:	1ce1      	adds	r1, r4, #3
     7c2:	31ff      	adds	r1, #255	; 0xff
     7c4:	0020      	movs	r0, r4
     7c6:	4b0a      	ldr	r3, [pc, #40]	; (7f0 <_ZN16Maintenance_Tool4InitEv+0x4c>)
     7c8:	4798      	blx	r3
	memcpy(localBuffer,0,4);
     7ca:	1d60      	adds	r0, r4, #5
     7cc:	2204      	movs	r2, #4
     7ce:	2100      	movs	r1, #0
     7d0:	4b08      	ldr	r3, [pc, #32]	; (7f4 <_ZN16Maintenance_Tool4InitEv+0x50>)
     7d2:	4798      	blx	r3
	gotAccess=false;
     7d4:	23f9      	movs	r3, #249	; 0xf9
     7d6:	54e5      	strb	r5, [r4, r3]
	return result;
     7d8:	3b01      	subs	r3, #1
     7da:	5ce0      	ldrb	r0, [r4, r3]
}
     7dc:	bd70      	pop	{r4, r5, r6, pc}
     7de:	46c0      	nop			; (mov r8, r8)
     7e0:	2000062c 	.word	0x2000062c
     7e4:	00000c89 	.word	0x00000c89
     7e8:	00000535 	.word	0x00000535
     7ec:	00000d31 	.word	0x00000d31
     7f0:	00000765 	.word	0x00000765
     7f4:	00004a6d 	.word	0x00004a6d

000007f8 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb>:
	{
     7f8:	b570      	push	{r4, r5, r6, lr}
     7fa:	0005      	movs	r5, r0
     7fc:	000c      	movs	r4, r1
	header.selector = header.command;
     7fe:	780b      	ldrb	r3, [r1, #0]
     800:	704b      	strb	r3, [r1, #1]
	header.command = kGAINNotifyCommandReceived;
     802:	2165      	movs	r1, #101	; 0x65
     804:	7021      	strb	r1, [r4, #0]
	header.dataSize = 0;
     806:	2100      	movs	r1, #0
     808:	8061      	strh	r1, [r4, #2]
	if (!result)
     80a:	2a00      	cmp	r2, #0
     80c:	d102      	bne.n	814 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x1c>
		header.selector |= 0x80;
     80e:	3a80      	subs	r2, #128	; 0x80
     810:	4313      	orrs	r3, r2
     812:	7063      	strb	r3, [r4, #1]
	checksum = calculateChecksum(header);
     814:	0021      	movs	r1, r4
     816:	0028      	movs	r0, r5
     818:	4b04      	ldr	r3, [pc, #16]	; (82c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x34>)
     81a:	4798      	blx	r3
     81c:	23fc      	movs	r3, #252	; 0xfc
     81e:	52e8      	strh	r0, [r5, r3]
	usb.writeData(&header, sizeof(header));
     820:	2204      	movs	r2, #4
     822:	0021      	movs	r1, r4
     824:	4802      	ldr	r0, [pc, #8]	; (830 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x38>)
     826:	4b03      	ldr	r3, [pc, #12]	; (834 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17GAINMessageHeaderb+0x3c>)
     828:	4798      	blx	r3
	}
     82a:	bd70      	pop	{r4, r5, r6, pc}
     82c:	00000749 	.word	0x00000749
     830:	200004bc 	.word	0x200004bc
     834:	0000025d 	.word	0x0000025d

00000838 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader>:
bool Maintenance_Tool::handleGAINCommandReadParameters(GAINMessageHeader& header){
     838:	b570      	push	{r4, r5, r6, lr}
     83a:	0004      	movs	r4, r0
		if (result){
     83c:	780b      	ldrb	r3, [r1, #0]
	 	bool	result(header.command == kGAINCommandReadParameters);
     83e:	2000      	movs	r0, #0
		if (result){
     840:	2b48      	cmp	r3, #72	; 0x48
     842:	d000      	beq.n	846 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0xe>
}
     844:	bd70      	pop	{r4, r5, r6, pc}
			uint32_t add=(uint32_t)&framMemory->parameters;
     846:	4b0f      	ldr	r3, [pc, #60]	; (884 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0x4c>)
     848:	681a      	ldr	r2, [r3, #0]
     84a:	2380      	movs	r3, #128	; 0x80
     84c:	009b      	lsls	r3, r3, #2
     84e:	469c      	mov	ip, r3
     850:	4462      	add	r2, ip
			r=fram.ReadAddress((uint8_t*)&parameters,add,(uint32_t)sizeof(userParameters));
     852:	b292      	uxth	r2, r2
     854:	1c61      	adds	r1, r4, #1
     856:	31ff      	adds	r1, #255	; 0xff
     858:	2301      	movs	r3, #1
     85a:	480b      	ldr	r0, [pc, #44]	; (888 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0x50>)
     85c:	4d0b      	ldr	r5, [pc, #44]	; (88c <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0x54>)
     85e:	47a8      	blx	r5
     860:	0003      	movs	r3, r0
	 	bool	result(header.command == kGAINCommandReadParameters);
     862:	2001      	movs	r0, #1
			 if (r>0)
     864:	2b00      	cmp	r3, #0
     866:	d0ed      	beq.n	844 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0xc>
				 delay_us(100);
     868:	3063      	adds	r0, #99	; 0x63
     86a:	4b09      	ldr	r3, [pc, #36]	; (890 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0x58>)
     86c:	4798      	blx	r3
				memcpy(&localBuffer[n+1],(uint8_t*)&parameters,sizeof(userParameters));
     86e:	2380      	movs	r3, #128	; 0x80
     870:	005b      	lsls	r3, r3, #1
     872:	5ce3      	ldrb	r3, [r4, r3]
     874:	72e3      	strb	r3, [r4, #11]
				 usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     876:	1d61      	adds	r1, r4, #5
     878:	2240      	movs	r2, #64	; 0x40
     87a:	4806      	ldr	r0, [pc, #24]	; (894 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0x5c>)
     87c:	4b06      	ldr	r3, [pc, #24]	; (898 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0x60>)
     87e:	4798      	blx	r3
				 result=w>0;
     880:	2000      	movs	r0, #0
     882:	e7df      	b.n	844 <_ZN16Maintenance_Tool31handleGAINCommandReadParametersER17GAINMessageHeader+0xc>
     884:	20000698 	.word	0x20000698
     888:	2000069c 	.word	0x2000069c
     88c:	000010a5 	.word	0x000010a5
     890:	0000159d 	.word	0x0000159d
     894:	200004bc 	.word	0x200004bc
     898:	000002a5 	.word	0x000002a5

0000089c <_ZN16Maintenance_Tool17handleGAINCommandEv>:
bool Maintenance_Tool::handleGAINCommand(void){
     89c:	b570      	push	{r4, r5, r6, lr}
     89e:	0004      	movs	r4, r0
	if ((localBuffer[n]>=kGAINCommandConnect)
     8a0:	7a83      	ldrb	r3, [r0, #10]
     8a2:	001a      	movs	r2, r3
     8a4:	3a41      	subs	r2, #65	; 0x41
     8a6:	2a0d      	cmp	r2, #13
     8a8:	d810      	bhi.n	8cc <_ZN16Maintenance_Tool17handleGAINCommandEv+0x30>
		gotTask=true;
     8aa:	2201      	movs	r2, #1
     8ac:	21fb      	movs	r1, #251	; 0xfb
     8ae:	5442      	strb	r2, [r0, r1]
		result=gotTask;
     8b0:	3903      	subs	r1, #3
     8b2:	5442      	strb	r2, [r0, r1]
		header.command=localBuffer[n];
     8b4:	3297      	adds	r2, #151	; 0x97
     8b6:	5483      	strb	r3, [r0, r2]
		switch (header.command)
     8b8:	2398      	movs	r3, #152	; 0x98
     8ba:	5ce3      	ldrb	r3, [r4, r3]
     8bc:	3b41      	subs	r3, #65	; 0x41
     8be:	b2da      	uxtb	r2, r3
     8c0:	2a0d      	cmp	r2, #13
     8c2:	d84f      	bhi.n	964 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xc8>
     8c4:	0093      	lsls	r3, r2, #2
     8c6:	4a29      	ldr	r2, [pc, #164]	; (96c <_ZN16Maintenance_Tool17handleGAINCommandEv+0xd0>)
     8c8:	58d3      	ldr	r3, [r2, r3]
     8ca:	469f      	mov	pc, r3
		gotTask=false;
     8cc:	2200      	movs	r2, #0
     8ce:	23fb      	movs	r3, #251	; 0xfb
     8d0:	54c2      	strb	r2, [r0, r3]
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
     8d2:	1d41      	adds	r1, r0, #5
     8d4:	4d26      	ldr	r5, [pc, #152]	; (970 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xd4>)
     8d6:	3240      	adds	r2, #64	; 0x40
     8d8:	0028      	movs	r0, r5
     8da:	4b26      	ldr	r3, [pc, #152]	; (974 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xd8>)
     8dc:	4798      	blx	r3
		result=usb.rxReady;
     8de:	7d6b      	ldrb	r3, [r5, #21]
     8e0:	b2db      	uxtb	r3, r3
     8e2:	22f8      	movs	r2, #248	; 0xf8
     8e4:	54a3      	strb	r3, [r4, r2]
	if (result)
     8e6:	2b00      	cmp	r3, #0
     8e8:	d1e6      	bne.n	8b8 <_ZN16Maintenance_Tool17handleGAINCommandEv+0x1c>
	return result;
     8ea:	23f8      	movs	r3, #248	; 0xf8
     8ec:	5ce0      	ldrb	r0, [r4, r3]
	}
     8ee:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
     8f0:	0021      	movs	r1, r4
     8f2:	3198      	adds	r1, #152	; 0x98
     8f4:	0020      	movs	r0, r4
     8f6:	4b20      	ldr	r3, [pc, #128]	; (978 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xdc>)
     8f8:	4798      	blx	r3
     8fa:	23f8      	movs	r3, #248	; 0xf8
     8fc:	54e0      	strb	r0, [r4, r3]
				break;
     8fe:	e7f4      	b.n	8ea <_ZN16Maintenance_Tool17handleGAINCommandEv+0x4e>
	maintenanceIsConnected = false;
     900:	2300      	movs	r3, #0
     902:	2254      	movs	r2, #84	; 0x54
     904:	54a3      	strb	r3, [r4, r2]
	bSendNotifications = false;
     906:	3201      	adds	r2, #1
     908:	54a3      	strb	r3, [r4, r2]
				break;
     90a:	e7ee      	b.n	8ea <_ZN16Maintenance_Tool17handleGAINCommandEv+0x4e>
	bSendNotifications = (header.selector == 1);
     90c:	0023      	movs	r3, r4
     90e:	3398      	adds	r3, #152	; 0x98
     910:	785b      	ldrb	r3, [r3, #1]
     912:	3b01      	subs	r3, #1
     914:	425a      	negs	r2, r3
     916:	4153      	adcs	r3, r2
     918:	2255      	movs	r2, #85	; 0x55
     91a:	54a3      	strb	r3, [r4, r2]
				break;
     91c:	e7e5      	b.n	8ea <_ZN16Maintenance_Tool17handleGAINCommandEv+0x4e>
				notifyGAINCommandReceived( header, result);
     91e:	0021      	movs	r1, r4
     920:	3198      	adds	r1, #152	; 0x98
     922:	2201      	movs	r2, #1
     924:	0020      	movs	r0, r4
     926:	4b15      	ldr	r3, [pc, #84]	; (97c <_ZN16Maintenance_Tool17handleGAINCommandEv+0xe0>)
     928:	4798      	blx	r3
				result = handleGAINCommandReset(header);
     92a:	2201      	movs	r2, #1
     92c:	23f8      	movs	r3, #248	; 0xf8
     92e:	54e2      	strb	r2, [r4, r3]
				break;
     930:	e7db      	b.n	8ea <_ZN16Maintenance_Tool17handleGAINCommandEv+0x4e>
	bool	result(header.dataSize == sizeof(GAINControllerPortState));
     932:	0023      	movs	r3, r4
     934:	3398      	adds	r3, #152	; 0x98
     936:	885b      	ldrh	r3, [r3, #2]
     938:	3b1a      	subs	r3, #26
     93a:	425a      	negs	r2, r3
     93c:	4153      	adcs	r3, r2
				result = handleGAINCommandSetControllerState( header);
     93e:	22f8      	movs	r2, #248	; 0xf8
     940:	54a3      	strb	r3, [r4, r2]
				break;
     942:	e7d2      	b.n	8ea <_ZN16Maintenance_Tool17handleGAINCommandEv+0x4e>
				result = handleGAINCommandWriteParameters( header);
     944:	0021      	movs	r1, r4
     946:	3198      	adds	r1, #152	; 0x98
     948:	0020      	movs	r0, r4
     94a:	4b0d      	ldr	r3, [pc, #52]	; (980 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xe4>)
     94c:	4798      	blx	r3
     94e:	23f8      	movs	r3, #248	; 0xf8
     950:	54e0      	strb	r0, [r4, r3]
			break;
     952:	e7ca      	b.n	8ea <_ZN16Maintenance_Tool17handleGAINCommandEv+0x4e>
				result = handleGAINCommandReadParameters( header);
     954:	0021      	movs	r1, r4
     956:	3198      	adds	r1, #152	; 0x98
     958:	0020      	movs	r0, r4
     95a:	4b0a      	ldr	r3, [pc, #40]	; (984 <_ZN16Maintenance_Tool17handleGAINCommandEv+0xe8>)
     95c:	4798      	blx	r3
     95e:	23f8      	movs	r3, #248	; 0xf8
     960:	54e0      	strb	r0, [r4, r3]
			break;
     962:	e7c2      	b.n	8ea <_ZN16Maintenance_Tool17handleGAINCommandEv+0x4e>
				result = false;
     964:	2200      	movs	r2, #0
     966:	23f8      	movs	r3, #248	; 0xf8
     968:	54e2      	strb	r2, [r4, r3]
				break;
     96a:	e7be      	b.n	8ea <_ZN16Maintenance_Tool17handleGAINCommandEv+0x4e>
     96c:	00004d94 	.word	0x00004d94
     970:	200004bc 	.word	0x200004bc
     974:	0000034d 	.word	0x0000034d
     978:	000006c1 	.word	0x000006c1
     97c:	000007f9 	.word	0x000007f9
     980:	000006dd 	.word	0x000006dd
     984:	00000839 	.word	0x00000839

00000988 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
     988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     98a:	0004      	movs	r4, r0
	result=false;
     98c:	2200      	movs	r2, #0
     98e:	23f8      	movs	r3, #248	; 0xf8
     990:	54c2      	strb	r2, [r0, r3]
	if (gotAccess)
     992:	3301      	adds	r3, #1
     994:	5cc3      	ldrb	r3, [r0, r3]
     996:	2b00      	cmp	r3, #0
     998:	d043      	beq.n	a22 <_ZN16Maintenance_Tool19handleCommunicationEv+0x9a>
		if (usb.rxReady)
     99a:	4b24      	ldr	r3, [pc, #144]	; (a2c <_ZN16Maintenance_Tool19handleCommunicationEv+0xa4>)
     99c:	7d5b      	ldrb	r3, [r3, #21]
     99e:	2b00      	cmp	r3, #0
     9a0:	d03b      	beq.n	a1a <_ZN16Maintenance_Tool19handleCommunicationEv+0x92>
			switch (input){
     9a2:	7a43      	ldrb	r3, [r0, #9]
     9a4:	2b3d      	cmp	r3, #61	; 0x3d
     9a6:	d01e      	beq.n	9e6 <_ZN16Maintenance_Tool19handleCommunicationEv+0x5e>
     9a8:	2b3e      	cmp	r3, #62	; 0x3e
     9aa:	d017      	beq.n	9dc <_ZN16Maintenance_Tool19handleCommunicationEv+0x54>
     9ac:	2b3c      	cmp	r3, #60	; 0x3c
     9ae:	d003      	beq.n	9b8 <_ZN16Maintenance_Tool19handleCommunicationEv+0x30>
					gotCommand=false;
     9b0:	2200      	movs	r2, #0
     9b2:	23fa      	movs	r3, #250	; 0xfa
     9b4:	54c2      	strb	r2, [r0, r3]
				break;
     9b6:	e006      	b.n	9c6 <_ZN16Maintenance_Tool19handleCommunicationEv+0x3e>
					gotCommand=true;
     9b8:	3201      	adds	r2, #1
     9ba:	33be      	adds	r3, #190	; 0xbe
     9bc:	54c2      	strb	r2, [r0, r3]
					result = handleGAINCommand();
     9be:	4b1c      	ldr	r3, [pc, #112]	; (a30 <_ZN16Maintenance_Tool19handleCommunicationEv+0xa8>)
     9c0:	4798      	blx	r3
     9c2:	23f8      	movs	r3, #248	; 0xf8
     9c4:	54e0      	strb	r0, [r4, r3]
			ClearLocalBuffer();
     9c6:	0020      	movs	r0, r4
     9c8:	4b1a      	ldr	r3, [pc, #104]	; (a34 <_ZN16Maintenance_Tool19handleCommunicationEv+0xac>)
     9ca:	4798      	blx	r3
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     9cc:	1d61      	adds	r1, r4, #5
     9ce:	2240      	movs	r2, #64	; 0x40
     9d0:	4816      	ldr	r0, [pc, #88]	; (a2c <_ZN16Maintenance_Tool19handleCommunicationEv+0xa4>)
     9d2:	4b19      	ldr	r3, [pc, #100]	; (a38 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb0>)
     9d4:	4798      	blx	r3
	return result;
     9d6:	23f8      	movs	r3, #248	; 0xf8
     9d8:	5ce0      	ldrb	r0, [r4, r3]
	}
     9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					result = handleGAINCommand();
     9dc:	4b14      	ldr	r3, [pc, #80]	; (a30 <_ZN16Maintenance_Tool19handleCommunicationEv+0xa8>)
     9de:	4798      	blx	r3
     9e0:	23f8      	movs	r3, #248	; 0xf8
     9e2:	54e0      	strb	r0, [r4, r3]
				break;
     9e4:	e7ef      	b.n	9c6 <_ZN16Maintenance_Tool19handleCommunicationEv+0x3e>
					is_MTPC_Beaming=true;
     9e6:	2501      	movs	r5, #1
     9e8:	7105      	strb	r5, [r0, #4]
					interfaceTimer.Stop();
     9ea:	4e14      	ldr	r6, [pc, #80]	; (a3c <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     9ec:	0030      	movs	r0, r6
     9ee:	4b14      	ldr	r3, [pc, #80]	; (a40 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb8>)
     9f0:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
     9f2:	4f14      	ldr	r7, [pc, #80]	; (a44 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
     9f4:	0039      	movs	r1, r7
     9f6:	0030      	movs	r0, r6
     9f8:	4b13      	ldr	r3, [pc, #76]	; (a48 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
     9fa:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
     9fc:	4a13      	ldr	r2, [pc, #76]	; (a4c <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
     9fe:	0039      	movs	r1, r7
     a00:	0030      	movs	r0, r6
     a02:	4b13      	ldr	r3, [pc, #76]	; (a50 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
     a04:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
     a06:	2300      	movs	r3, #0
     a08:	64a3      	str	r3, [r4, #72]	; 0x48
					maintenanceIsConnected = true;
     a0a:	3354      	adds	r3, #84	; 0x54
     a0c:	54e5      	strb	r5, [r4, r3]
					bSendNotifications = true;
     a0e:	3301      	adds	r3, #1
     a10:	54e5      	strb	r5, [r4, r3]
					result=is_MTPC_Beaming;
     a12:	7922      	ldrb	r2, [r4, #4]
     a14:	33a3      	adds	r3, #163	; 0xa3
     a16:	54e2      	strb	r2, [r4, r3]
				break;
     a18:	e7d5      	b.n	9c6 <_ZN16Maintenance_Tool19handleCommunicationEv+0x3e>
			gotCommand=false;
     a1a:	2200      	movs	r2, #0
     a1c:	23fa      	movs	r3, #250	; 0xfa
     a1e:	54c2      	strb	r2, [r0, r3]
     a20:	e7d4      	b.n	9cc <_ZN16Maintenance_Tool19handleCommunicationEv+0x44>
		gotCommand=false;
     a22:	2200      	movs	r2, #0
     a24:	23fa      	movs	r3, #250	; 0xfa
     a26:	54c2      	strb	r2, [r0, r3]
     a28:	e7d5      	b.n	9d6 <_ZN16Maintenance_Tool19handleCommunicationEv+0x4e>
     a2a:	46c0      	nop			; (mov r8, r8)
     a2c:	200004bc 	.word	0x200004bc
     a30:	0000089d 	.word	0x0000089d
     a34:	0000062d 	.word	0x0000062d
     a38:	0000034d 	.word	0x0000034d
     a3c:	2000062c 	.word	0x2000062c
     a40:	00000ca1 	.word	0x00000ca1
     a44:	00000545 	.word	0x00000545
     a48:	00000db9 	.word	0x00000db9
     a4c:	00002710 	.word	0x00002710
     a50:	00000d51 	.word	0x00000d51

00000a54 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a56:	0005      	movs	r5, r0
     a58:	000f      	movs	r7, r1
     a5a:	1e16      	subs	r6, r2, #0
  size_t n = 0;
  while (size--) {
     a5c:	d00c      	beq.n	a78 <_ZN5Print5writeEPKhj+0x24>
     a5e:	2400      	movs	r4, #0
    if (write(*buffer++)) n++;
     a60:	5d39      	ldrb	r1, [r7, r4]
     a62:	682b      	ldr	r3, [r5, #0]
     a64:	681b      	ldr	r3, [r3, #0]
     a66:	0028      	movs	r0, r5
     a68:	4798      	blx	r3
     a6a:	2800      	cmp	r0, #0
     a6c:	d002      	beq.n	a74 <_ZN5Print5writeEPKhj+0x20>
     a6e:	3401      	adds	r4, #1
  while (size--) {
     a70:	42a6      	cmp	r6, r4
     a72:	d1f5      	bne.n	a60 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
     a74:	0020      	movs	r0, r4
     a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  size_t n = 0;
     a78:	0014      	movs	r4, r2
  return n;
     a7a:	e7fb      	b.n	a74 <_ZN5Print5writeEPKhj+0x20>

00000a7c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
     a7c:	b570      	push	{r4, r5, r6, lr}
     a7e:	0005      	movs	r5, r0
     a80:	1e0c      	subs	r4, r1, #0
      if (str == NULL) return 0;
     a82:	d009      	beq.n	a98 <_ZN5Print5printEPKc+0x1c>
      return write((const uint8_t *)str, strlen(str));
     a84:	0008      	movs	r0, r1
     a86:	4b05      	ldr	r3, [pc, #20]	; (a9c <_ZN5Print5printEPKc+0x20>)
     a88:	4798      	blx	r3
     a8a:	0002      	movs	r2, r0
     a8c:	682b      	ldr	r3, [r5, #0]
     a8e:	685b      	ldr	r3, [r3, #4]
     a90:	0021      	movs	r1, r4
     a92:	0028      	movs	r0, r5
     a94:	4798      	blx	r3
  return write(str);
}
     a96:	bd70      	pop	{r4, r5, r6, pc}
      if (str == NULL) return 0;
     a98:	2000      	movs	r0, #0
  return write(str);
     a9a:	e7fc      	b.n	a96 <_ZN5Print5printEPKc+0x1a>
     a9c:	00004b85 	.word	0x00004b85

00000aa0 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     aa0:	b510      	push	{r4, lr}
      return write((const uint8_t *)str, strlen(str));
     aa2:	6803      	ldr	r3, [r0, #0]
     aa4:	685b      	ldr	r3, [r3, #4]
     aa6:	2202      	movs	r2, #2
     aa8:	4901      	ldr	r1, [pc, #4]	; (ab0 <_ZN5Print7printlnEv+0x10>)
     aaa:	4798      	blx	r3
  return write("\r\n");
}
     aac:	bd10      	pop	{r4, pc}
     aae:	46c0      	nop			; (mov r8, r8)
     ab0:	00004de4 	.word	0x00004de4

00000ab4 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ab6:	46de      	mov	lr, fp
     ab8:	4657      	mov	r7, sl
     aba:	464e      	mov	r6, r9
     abc:	4645      	mov	r5, r8
     abe:	b5e0      	push	{r5, r6, r7, lr}
     ac0:	b08d      	sub	sp, #52	; 0x34
     ac2:	4683      	mov	fp, r0
     ac4:	000e      	movs	r6, r1
     ac6:	0010      	movs	r0, r2
     ac8:	9201      	str	r2, [sp, #4]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     aca:	2100      	movs	r1, #0
     acc:	2320      	movs	r3, #32
     ace:	aa03      	add	r2, sp, #12
     ad0:	54d1      	strb	r1, [r2, r3]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     ad2:	2801      	cmp	r0, #1
     ad4:	dd07      	ble.n	ae6 <_ZN5Print11printNumberEmh+0x32>
     ad6:	af0b      	add	r7, sp, #44	; 0x2c

  do {
    char c = n % base;
     ad8:	4b1a      	ldr	r3, [pc, #104]	; (b44 <_ZN5Print11printNumberEmh+0x90>)
     ada:	469a      	mov	sl, r3
    n /= base;
     adc:	4b1a      	ldr	r3, [pc, #104]	; (b48 <_ZN5Print11printNumberEmh+0x94>)
     ade:	4699      	mov	r9, r3

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     ae0:	23ff      	movs	r3, #255	; 0xff
     ae2:	4698      	mov	r8, r3
     ae4:	e007      	b.n	af6 <_ZN5Print11printNumberEmh+0x42>
  if (base < 2) base = 10;
     ae6:	230a      	movs	r3, #10
     ae8:	9301      	str	r3, [sp, #4]
     aea:	e7f4      	b.n	ad6 <_ZN5Print11printNumberEmh+0x22>
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     aec:	3437      	adds	r4, #55	; 0x37
     aee:	b2e4      	uxtb	r4, r4
     af0:	703c      	strb	r4, [r7, #0]
  } while(n);
     af2:	2e00      	cmp	r6, #0
     af4:	d010      	beq.n	b18 <_ZN5Print11printNumberEmh+0x64>
    char c = n % base;
     af6:	9901      	ldr	r1, [sp, #4]
     af8:	0030      	movs	r0, r6
     afa:	47d0      	blx	sl
     afc:	000d      	movs	r5, r1
     afe:	b2cc      	uxtb	r4, r1
    n /= base;
     b00:	9901      	ldr	r1, [sp, #4]
     b02:	0030      	movs	r0, r6
     b04:	47c8      	blx	r9
     b06:	0006      	movs	r6, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     b08:	3f01      	subs	r7, #1
     b0a:	4643      	mov	r3, r8
     b0c:	401d      	ands	r5, r3
     b0e:	2d09      	cmp	r5, #9
     b10:	dcec      	bgt.n	aec <_ZN5Print11printNumberEmh+0x38>
     b12:	3430      	adds	r4, #48	; 0x30
     b14:	b2e4      	uxtb	r4, r4
     b16:	e7eb      	b.n	af0 <_ZN5Print11printNumberEmh+0x3c>
      if (str == NULL) return 0;
     b18:	2f00      	cmp	r7, #0
     b1a:	d010      	beq.n	b3e <_ZN5Print11printNumberEmh+0x8a>
      return write((const uint8_t *)str, strlen(str));
     b1c:	0038      	movs	r0, r7
     b1e:	4b0b      	ldr	r3, [pc, #44]	; (b4c <_ZN5Print11printNumberEmh+0x98>)
     b20:	4798      	blx	r3
     b22:	0002      	movs	r2, r0
     b24:	465b      	mov	r3, fp
     b26:	681b      	ldr	r3, [r3, #0]
     b28:	685b      	ldr	r3, [r3, #4]
     b2a:	0039      	movs	r1, r7
     b2c:	4658      	mov	r0, fp
     b2e:	4798      	blx	r3

  return write(str);
}
     b30:	b00d      	add	sp, #52	; 0x34
     b32:	bc3c      	pop	{r2, r3, r4, r5}
     b34:	4690      	mov	r8, r2
     b36:	4699      	mov	r9, r3
     b38:	46a2      	mov	sl, r4
     b3a:	46ab      	mov	fp, r5
     b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (str == NULL) return 0;
     b3e:	2000      	movs	r0, #0
  return write(str);
     b40:	e7f6      	b.n	b30 <_ZN5Print11printNumberEmh+0x7c>
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	00004a09 	.word	0x00004a09
     b48:	000048fd 	.word	0x000048fd
     b4c:	00004b85 	.word	0x00004b85

00000b50 <_ZN5Print5printEmi>:
{
     b50:	b510      	push	{r4, lr}
  if (base == 0) return write(n);
     b52:	2a00      	cmp	r2, #0
     b54:	d003      	beq.n	b5e <_ZN5Print5printEmi+0xe>
  else return printNumber(n, base);
     b56:	b2d2      	uxtb	r2, r2
     b58:	4b03      	ldr	r3, [pc, #12]	; (b68 <_ZN5Print5printEmi+0x18>)
     b5a:	4798      	blx	r3
}
     b5c:	bd10      	pop	{r4, pc}
  if (base == 0) return write(n);
     b5e:	b2c9      	uxtb	r1, r1
     b60:	6803      	ldr	r3, [r0, #0]
     b62:	681b      	ldr	r3, [r3, #0]
     b64:	4798      	blx	r3
     b66:	e7f9      	b.n	b5c <_ZN5Print5printEmi+0xc>
     b68:	00000ab5 	.word	0x00000ab5

00000b6c <_ZN5Print5printEhi>:
{
     b6c:	b510      	push	{r4, lr}
  return print((unsigned long) b, base);
     b6e:	4b01      	ldr	r3, [pc, #4]	; (b74 <_ZN5Print5printEhi+0x8>)
     b70:	4798      	blx	r3
}
     b72:	bd10      	pop	{r4, pc}
     b74:	00000b51 	.word	0x00000b51

00000b78 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
	ptrSerialTerminalClass->timeout=true;
     b78:	4b03      	ldr	r3, [pc, #12]	; (b88 <_ZL14USBTimeoutTaskPK10timer_task+0x10>)
     b7a:	2201      	movs	r2, #1
     b7c:	6819      	ldr	r1, [r3, #0]
     b7e:	708a      	strb	r2, [r1, #2]
	ptrSerialTerminalClass->terminalStarted=false;
     b80:	681b      	ldr	r3, [r3, #0]
     b82:	2200      	movs	r2, #0
     b84:	705a      	strb	r2, [r3, #1]
}
     b86:	4770      	bx	lr
     b88:	20000564 	.word	0x20000564

00000b8c <_ZN20SerialTerminal_ClassC1Ev>:

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
{
	ptrSerialTerminalClass=this;
     b8c:	4b01      	ldr	r3, [pc, #4]	; (b94 <_ZN20SerialTerminal_ClassC1Ev+0x8>)
     b8e:	6018      	str	r0, [r3, #0]
} //SerialTerminal_Class
     b90:	4770      	bx	lr
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	20000564 	.word	0x20000564

00000b98 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
{
} //~SerialTerminal_Class
     b98:	4770      	bx	lr
	...

00000b9c <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
     b9c:	b570      	push	{r4, r5, r6, lr}
     b9e:	0004      	movs	r4, r0
		//vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
		if (vbusDetected)
     ba0:	78c3      	ldrb	r3, [r0, #3]
     ba2:	2b00      	cmp	r3, #0
     ba4:	d103      	bne.n	bae <_ZN20SerialTerminal_Class6OnInitEv+0x12>
			
			usbTerminalTimer.Stop();
		} 
		else
		{
			plugged=false;
     ba6:	2300      	movs	r3, #0
     ba8:	7003      	strb	r3, [r0, #0]
			terminalStarted=false;
     baa:	7043      	strb	r3, [r0, #1]
		}
		
}
     bac:	bd70      	pop	{r4, r5, r6, pc}
			timeout=false;
     bae:	2300      	movs	r3, #0
     bb0:	7083      	strb	r3, [r0, #2]
			terminalStarted=true;
     bb2:	3301      	adds	r3, #1
     bb4:	7043      	strb	r3, [r0, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
     bb6:	4d0d      	ldr	r5, [pc, #52]	; (bec <_ZN20SerialTerminal_Class6OnInitEv+0x50>)
     bb8:	2296      	movs	r2, #150	; 0x96
     bba:	0092      	lsls	r2, r2, #2
     bbc:	490c      	ldr	r1, [pc, #48]	; (bf0 <_ZN20SerialTerminal_Class6OnInitEv+0x54>)
     bbe:	0028      	movs	r0, r5
     bc0:	4b0c      	ldr	r3, [pc, #48]	; (bf4 <_ZN20SerialTerminal_Class6OnInitEv+0x58>)
     bc2:	4798      	blx	r3
			usbTerminalTimer.Start();
     bc4:	0028      	movs	r0, r5
     bc6:	4b0c      	ldr	r3, [pc, #48]	; (bf8 <_ZN20SerialTerminal_Class6OnInitEv+0x5c>)
     bc8:	4798      	blx	r3
			while (!usb.IsEnabled()){
     bca:	4d0c      	ldr	r5, [pc, #48]	; (bfc <_ZN20SerialTerminal_Class6OnInitEv+0x60>)
     bcc:	4e0c      	ldr	r6, [pc, #48]	; (c00 <_ZN20SerialTerminal_Class6OnInitEv+0x64>)
     bce:	0028      	movs	r0, r5
     bd0:	47b0      	blx	r6
     bd2:	2800      	cmp	r0, #0
     bd4:	d105      	bne.n	be2 <_ZN20SerialTerminal_Class6OnInitEv+0x46>
				if (timeout)
     bd6:	78a3      	ldrb	r3, [r4, #2]
     bd8:	2b00      	cmp	r3, #0
     bda:	d0f8      	beq.n	bce <_ZN20SerialTerminal_Class6OnInitEv+0x32>
					plugged=false;
     bdc:	2300      	movs	r3, #0
     bde:	7023      	strb	r3, [r4, #0]
					return;
     be0:	e7e4      	b.n	bac <_ZN20SerialTerminal_Class6OnInitEv+0x10>
			usbTerminalTimer.Stop();
     be2:	4802      	ldr	r0, [pc, #8]	; (bec <_ZN20SerialTerminal_Class6OnInitEv+0x50>)
     be4:	4b07      	ldr	r3, [pc, #28]	; (c04 <_ZN20SerialTerminal_Class6OnInitEv+0x68>)
     be6:	4798      	blx	r3
     be8:	e7e0      	b.n	bac <_ZN20SerialTerminal_Class6OnInitEv+0x10>
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	2000060c 	.word	0x2000060c
     bf0:	00000b79 	.word	0x00000b79
     bf4:	00000d41 	.word	0x00000d41
     bf8:	00000c91 	.word	0x00000c91
     bfc:	200004bc 	.word	0x200004bc
     c00:	00000341 	.word	0x00000341
     c04:	00000ca1 	.word	0x00000ca1

00000c08 <_ZN20SerialTerminal_Class13CheckTerminalEv>:
		}
	}
	usbTerminalTimer.Stop();
	
}
bool	SerialTerminal_Class::CheckTerminal(void){
     c08:	b510      	push	{r4, lr}
     c0a:	0004      	movs	r4, r0
	if (terminalStarted)
     c0c:	7843      	ldrb	r3, [r0, #1]
     c0e:	2b00      	cmp	r3, #0
     c10:	d014      	beq.n	c3c <_ZN20SerialTerminal_Class13CheckTerminalEv+0x34>
	{
		if (plugged||usb.IsEnabled())
     c12:	7803      	ldrb	r3, [r0, #0]
     c14:	2b00      	cmp	r3, #0
     c16:	d007      	beq.n	c28 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x20>
		{
			terminalStarted=usbTerminalTimer.Start()==0;
     c18:	480a      	ldr	r0, [pc, #40]	; (c44 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x3c>)
     c1a:	4b0b      	ldr	r3, [pc, #44]	; (c48 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x40>)
     c1c:	4798      	blx	r3
     c1e:	4243      	negs	r3, r0
     c20:	4158      	adcs	r0, r3
     c22:	b2c0      	uxtb	r0, r0
     c24:	7060      	strb	r0, [r4, #1]
     c26:	e006      	b.n	c36 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x2e>
		if (plugged||usb.IsEnabled())
     c28:	4808      	ldr	r0, [pc, #32]	; (c4c <_ZN20SerialTerminal_Class13CheckTerminalEv+0x44>)
     c2a:	4b09      	ldr	r3, [pc, #36]	; (c50 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x48>)
     c2c:	4798      	blx	r3
     c2e:	2800      	cmp	r0, #0
     c30:	d1f2      	bne.n	c18 <_ZN20SerialTerminal_Class13CheckTerminalEv+0x10>
		}
		else
		{
			terminalStarted=false;
     c32:	2300      	movs	r3, #0
     c34:	7063      	strb	r3, [r4, #1]
	else
	{
		return	terminalStarted;
	}
	
	return	terminalStarted;
     c36:	7860      	ldrb	r0, [r4, #1]
     c38:	b2c0      	uxtb	r0, r0
}
     c3a:	bd10      	pop	{r4, pc}
		return	terminalStarted;
     c3c:	7840      	ldrb	r0, [r0, #1]
     c3e:	b2c0      	uxtb	r0, r0
     c40:	e7fb      	b.n	c3a <_ZN20SerialTerminal_Class13CheckTerminalEv+0x32>
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	2000060c 	.word	0x2000060c
     c48:	00000c91 	.word	0x00000c91
     c4c:	200004bc 	.word	0x200004bc
     c50:	00000341 	.word	0x00000341

00000c54 <_ZN17TimerSerial_ClassD1Ev>:
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
{
	timeout=0;
     c54:	2300      	movs	r3, #0
     c56:	7043      	strb	r3, [r0, #1]
} //~Timer_Class
     c58:	4770      	bx	lr
	...

00000c5c <_ZL7task_cbPK10timer_task>:
	ptrTimerSerialClass->setTimeout();
     c5c:	4b02      	ldr	r3, [pc, #8]	; (c68 <_ZL7task_cbPK10timer_task+0xc>)
     c5e:	681b      	ldr	r3, [r3, #0]
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
	timeout=1;
     c60:	2201      	movs	r2, #1
     c62:	705a      	strb	r2, [r3, #1]
}
     c64:	4770      	bx	lr
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	20000568 	.word	0x20000568

00000c6c <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	timer_descr=descr;
     c6c:	60c1      	str	r1, [r0, #12]
	ptrTimerSerialClass=this;
     c6e:	4b04      	ldr	r3, [pc, #16]	; (c80 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x14>)
     c70:	6018      	str	r0, [r3, #0]
	clockCycles=1024;
     c72:	2380      	movs	r3, #128	; 0x80
     c74:	00db      	lsls	r3, r3, #3
     c76:	6143      	str	r3, [r0, #20]
	task->cb=task_cb;
     c78:	6883      	ldr	r3, [r0, #8]
     c7a:	4a02      	ldr	r2, [pc, #8]	; (c84 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x18>)
     c7c:	60da      	str	r2, [r3, #12]
} //Timer_Class
     c7e:	4770      	bx	lr
     c80:	20000568 	.word	0x20000568
     c84:	00000c5d 	.word	0x00000c5d

00000c88 <_ZN17TimerSerial_Class4InitEv>:
	ticks=0;
     c88:	2300      	movs	r3, #0
     c8a:	6183      	str	r3, [r0, #24]
}
     c8c:	4770      	bx	lr
	...

00000c90 <_ZN17TimerSerial_Class5StartEv>:
int32_t TimerSerial_Class::Start(void){
     c90:	b510      	push	{r4, lr}
	status=timer_start(timer_descr);
     c92:	68c0      	ldr	r0, [r0, #12]
     c94:	4b01      	ldr	r3, [pc, #4]	; (c9c <_ZN17TimerSerial_Class5StartEv+0xc>)
     c96:	4798      	blx	r3
}
     c98:	bd10      	pop	{r4, pc}
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	00001919 	.word	0x00001919

00000ca0 <_ZN17TimerSerial_Class4StopEv>:
int32_t TimerSerial_Class::Stop( void){
     ca0:	b510      	push	{r4, lr}
     ca2:	0004      	movs	r4, r0
	status=timer_stop(timer_descr);
     ca4:	68c0      	ldr	r0, [r0, #12]
     ca6:	4b02      	ldr	r3, [pc, #8]	; (cb0 <_ZN17TimerSerial_Class4StopEv+0x10>)
     ca8:	4798      	blx	r3
	timeout=0;
     caa:	2300      	movs	r3, #0
     cac:	7063      	strb	r3, [r4, #1]
}
     cae:	bd10      	pop	{r4, pc}
     cb0:	00001955 	.word	0x00001955

00000cb4 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
	
	timer_get_clock_cycles_in_tick(timer_descr,&ticks);
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
     cb4:	b510      	push	{r4, lr}
	for (i = 0; i < TASK_NUMBER; i++)
     cb6:	2300      	movs	r3, #0
     cb8:	7703      	strb	r3, [r0, #28]
	{
			if (taskArray[i].cb==NULL)
     cba:	4b11      	ldr	r3, [pc, #68]	; (d00 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4c>)
     cbc:	691b      	ldr	r3, [r3, #16]
     cbe:	2b00      	cmp	r3, #0
     cc0:	d015      	beq.n	cee <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3a>
	for (i = 0; i < TASK_NUMBER; i++)
     cc2:	2301      	movs	r3, #1
     cc4:	7703      	strb	r3, [r0, #28]
     cc6:	2202      	movs	r2, #2
     cc8:	2101      	movs	r1, #1
			if (taskArray[i].cb==NULL)
     cca:	4c0d      	ldr	r4, [pc, #52]	; (d00 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4c>)
     ccc:	008b      	lsls	r3, r1, #2
     cce:	185b      	adds	r3, r3, r1
     cd0:	009b      	lsls	r3, r3, #2
     cd2:	18e3      	adds	r3, r4, r3
     cd4:	691b      	ldr	r3, [r3, #16]
     cd6:	2b00      	cmp	r3, #0
     cd8:	d00a      	beq.n	cf0 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
	for (i = 0; i < TASK_NUMBER; i++)
     cda:	7702      	strb	r2, [r0, #28]
     cdc:	0011      	movs	r1, r2
     cde:	3201      	adds	r2, #1
     ce0:	b2d2      	uxtb	r2, r2
     ce2:	2907      	cmp	r1, #7
     ce4:	ddf2      	ble.n	ccc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x18>
				task=&taskArray[i];
			return;
				
			}
	}
	task=&taskArray[0];
     ce6:	4b06      	ldr	r3, [pc, #24]	; (d00 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4c>)
     ce8:	3304      	adds	r3, #4
     cea:	6083      	str	r3, [r0, #8]

}
     cec:	bd10      	pop	{r4, pc}
	for (i = 0; i < TASK_NUMBER; i++)
     cee:	2100      	movs	r1, #0
				task=&taskArray[i];
     cf0:	008a      	lsls	r2, r1, #2
     cf2:	1852      	adds	r2, r2, r1
     cf4:	0092      	lsls	r2, r2, #2
     cf6:	4902      	ldr	r1, [pc, #8]	; (d00 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4c>)
     cf8:	3104      	adds	r1, #4
     cfa:	1889      	adds	r1, r1, r2
     cfc:	6081      	str	r1, [r0, #8]
			return;
     cfe:	e7f5      	b.n	cec <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x38>
     d00:	20000568 	.word	0x20000568

00000d04 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
     d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d06:	0004      	movs	r4, r0
     d08:	000e      	movs	r6, r1
     d0a:	0017      	movs	r7, r2
     d0c:	001d      	movs	r5, r3
	ChooseAvailableTimerTask();
     d0e:	4b06      	ldr	r3, [pc, #24]	; (d28 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x24>)
     d10:	4798      	blx	r3
	task->interval = interval;
     d12:	68a3      	ldr	r3, [r4, #8]
     d14:	609f      	str	r7, [r3, #8]
	task->cb       = (timer_cb_t)func;
     d16:	68a3      	ldr	r3, [r4, #8]
     d18:	60de      	str	r6, [r3, #12]
	task->mode     = modeTask;
     d1a:	68a3      	ldr	r3, [r4, #8]
     d1c:	741d      	strb	r5, [r3, #16]
	status=timer_add_task(timer_descr, task);
     d1e:	68a1      	ldr	r1, [r4, #8]
     d20:	68e0      	ldr	r0, [r4, #12]
     d22:	4b02      	ldr	r3, [pc, #8]	; (d2c <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x28>)
     d24:	4798      	blx	r3
}
     d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d28:	00000cb5 	.word	0x00000cb5
     d2c:	00001991 	.word	0x00001991

00000d30 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
     d30:	b510      	push	{r4, lr}
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
     d32:	2301      	movs	r3, #1
     d34:	4c01      	ldr	r4, [pc, #4]	; (d3c <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0xc>)
     d36:	47a0      	blx	r4
}
     d38:	bd10      	pop	{r4, pc}
     d3a:	46c0      	nop			; (mov r8, r8)
     d3c:	00000d05 	.word	0x00000d05

00000d40 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
     d40:	b510      	push	{r4, lr}
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
     d42:	2300      	movs	r3, #0
     d44:	4c01      	ldr	r4, [pc, #4]	; (d4c <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0xc>)
     d46:	47a0      	blx	r4
}
     d48:	bd10      	pop	{r4, pc}
     d4a:	46c0      	nop			; (mov r8, r8)
     d4c:	00000d05 	.word	0x00000d05

00000d50 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
     d50:	b570      	push	{r4, r5, r6, lr}
     d52:	0004      	movs	r4, r0
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
     d54:	2300      	movs	r3, #0
     d56:	4d03      	ldr	r5, [pc, #12]	; (d64 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x14>)
     d58:	47a8      	blx	r5
	status=timer_start(timer_descr);
     d5a:	68e0      	ldr	r0, [r4, #12]
     d5c:	4b02      	ldr	r3, [pc, #8]	; (d68 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x18>)
     d5e:	4798      	blx	r3
}
     d60:	bd70      	pop	{r4, r5, r6, pc}
     d62:	46c0      	nop			; (mov r8, r8)
     d64:	00000d05 	.word	0x00000d05
     d68:	00001919 	.word	0x00001919

00000d6c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
     d6c:	b530      	push	{r4, r5, lr}
	for (i = 0; i < TASK_NUMBER; i++)
     d6e:	2300      	movs	r3, #0
     d70:	7703      	strb	r3, [r0, #28]
	{
		if (taskArray[i].cb==(timer_cb_t)func)
     d72:	4b10      	ldr	r3, [pc, #64]	; (db4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>)
     d74:	691b      	ldr	r3, [r3, #16]
     d76:	4299      	cmp	r1, r3
     d78:	d012      	beq.n	da0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x34>
	for (i = 0; i < TASK_NUMBER; i++)
     d7a:	2301      	movs	r3, #1
     d7c:	7703      	strb	r3, [r0, #28]
     d7e:	2202      	movs	r2, #2
     d80:	2401      	movs	r4, #1
		if (taskArray[i].cb==(timer_cb_t)func)
     d82:	4d0c      	ldr	r5, [pc, #48]	; (db4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>)
     d84:	00a3      	lsls	r3, r4, #2
     d86:	191b      	adds	r3, r3, r4
     d88:	009b      	lsls	r3, r3, #2
     d8a:	18eb      	adds	r3, r5, r3
     d8c:	691b      	ldr	r3, [r3, #16]
     d8e:	428b      	cmp	r3, r1
     d90:	d007      	beq.n	da2 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x36>
	for (i = 0; i < TASK_NUMBER; i++)
     d92:	7702      	strb	r2, [r0, #28]
     d94:	0014      	movs	r4, r2
     d96:	3201      	adds	r2, #1
     d98:	b2d2      	uxtb	r2, r2
     d9a:	2c07      	cmp	r4, #7
     d9c:	ddf2      	ble.n	d84 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x18>
     d9e:	e007      	b.n	db0 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x44>
     da0:	2400      	movs	r4, #0
		{
			
			task=&taskArray[i];
     da2:	00a2      	lsls	r2, r4, #2
     da4:	1912      	adds	r2, r2, r4
     da6:	0092      	lsls	r2, r2, #2
     da8:	4c02      	ldr	r4, [pc, #8]	; (db4 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>)
     daa:	3404      	adds	r4, #4
     dac:	18a4      	adds	r4, r4, r2
     dae:	6084      	str	r4, [r0, #8]
			
		}
	}


}
     db0:	bd30      	pop	{r4, r5, pc}
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	20000568 	.word	0x20000568

00000db8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:
void	TimerSerial_Class::Remove_task(FUNC_PTR func){
     db8:	b510      	push	{r4, lr}
     dba:	0004      	movs	r4, r0
	GetTaskFunction(func);
     dbc:	4b08      	ldr	r3, [pc, #32]	; (de0 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x28>)
     dbe:	4798      	blx	r3
	if (is_list_element(&timer_descr->tasks, task))
     dc0:	68e0      	ldr	r0, [r4, #12]
     dc2:	3014      	adds	r0, #20
     dc4:	68a1      	ldr	r1, [r4, #8]
     dc6:	4b07      	ldr	r3, [pc, #28]	; (de4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x2c>)
     dc8:	4798      	blx	r3
     dca:	2800      	cmp	r0, #0
     dcc:	d103      	bne.n	dd6 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x1e>
	task->cb=NULL;
     dce:	68a3      	ldr	r3, [r4, #8]
     dd0:	2200      	movs	r2, #0
     dd2:	60da      	str	r2, [r3, #12]
}
     dd4:	bd10      	pop	{r4, pc}
		timer_remove_task(timer_descr, task);
     dd6:	68a1      	ldr	r1, [r4, #8]
     dd8:	68e0      	ldr	r0, [r4, #12]
     dda:	4b03      	ldr	r3, [pc, #12]	; (de8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x30>)
     ddc:	4798      	blx	r3
     dde:	e7f6      	b.n	dce <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x16>
     de0:	00000d6d 	.word	0x00000d6d
     de4:	000020dd 	.word	0x000020dd
     de8:	00001a3d 	.word	0x00001a3d

00000dec <_GLOBAL__sub_I_ptrTimerSerialClass>:


TimerSerial_Class usbTerminalTimer(&TIMER_TERMINAL);
TimerSerial_Class interfaceTimer(&TIMER_INTERFACE);
     dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TimerSerial_Class usbTerminalTimer(&TIMER_TERMINAL);
     dee:	4c0b      	ldr	r4, [pc, #44]	; (e1c <_GLOBAL__sub_I_ptrTimerSerialClass+0x30>)
     df0:	0025      	movs	r5, r4
     df2:	3524      	adds	r5, #36	; 0x24
     df4:	490a      	ldr	r1, [pc, #40]	; (e20 <_GLOBAL__sub_I_ptrTimerSerialClass+0x34>)
     df6:	0028      	movs	r0, r5
     df8:	4e0a      	ldr	r6, [pc, #40]	; (e24 <_GLOBAL__sub_I_ptrTimerSerialClass+0x38>)
     dfa:	47b0      	blx	r6
     dfc:	4f0a      	ldr	r7, [pc, #40]	; (e28 <_GLOBAL__sub_I_ptrTimerSerialClass+0x3c>)
     dfe:	003a      	movs	r2, r7
     e00:	490a      	ldr	r1, [pc, #40]	; (e2c <_GLOBAL__sub_I_ptrTimerSerialClass+0x40>)
     e02:	0028      	movs	r0, r5
     e04:	4d0a      	ldr	r5, [pc, #40]	; (e30 <_GLOBAL__sub_I_ptrTimerSerialClass+0x44>)
     e06:	47a8      	blx	r5
TimerSerial_Class interfaceTimer(&TIMER_INTERFACE);
     e08:	3444      	adds	r4, #68	; 0x44
     e0a:	490a      	ldr	r1, [pc, #40]	; (e34 <_GLOBAL__sub_I_ptrTimerSerialClass+0x48>)
     e0c:	0020      	movs	r0, r4
     e0e:	47b0      	blx	r6
     e10:	003a      	movs	r2, r7
     e12:	4906      	ldr	r1, [pc, #24]	; (e2c <_GLOBAL__sub_I_ptrTimerSerialClass+0x40>)
     e14:	0020      	movs	r0, r4
     e16:	47a8      	blx	r5
     e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	200005e8 	.word	0x200005e8
     e20:	20000c20 	.word	0x20000c20
     e24:	00000c6d 	.word	0x00000c6d
     e28:	20000000 	.word	0x20000000
     e2c:	00000c55 	.word	0x00000c55
     e30:	000048ed 	.word	0x000048ed
     e34:	20000c04 	.word	0x20000c04

00000e38 <_ZN16FlashMemoryClassD1Ev>:
	spi_descriptor=spi_des;
	memoryMap=flashMap;
} //FlashMemoryClass

// default destructor
FlashMemoryClass::~FlashMemoryClass()
     e38:	b510      	push	{r4, lr}
     e3a:	0004      	movs	r4, r0
     e3c:	3018      	adds	r0, #24
     e3e:	4b02      	ldr	r3, [pc, #8]	; (e48 <_ZN16FlashMemoryClassD1Ev+0x10>)
     e40:	4798      	blx	r3
{
} //~FlashMemoryClass
     e42:	0020      	movs	r0, r4
     e44:	bd10      	pop	{r4, pc}
     e46:	46c0      	nop			; (mov r8, r8)
     e48:	00001161 	.word	0x00001161

00000e4c <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor>:
FlashMemoryClass::FlashMemoryClass(spi_m_sync_descriptor *spi_des)
     e4c:	b570      	push	{r4, r5, r6, lr}
     e4e:	0004      	movs	r4, r0
     e50:	000d      	movs	r5, r1
     e52:	3018      	adds	r0, #24
     e54:	4b05      	ldr	r3, [pc, #20]	; (e6c <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x20>)
     e56:	4798      	blx	r3
	appParameters=defaultParameters;
     e58:	4b05      	ldr	r3, [pc, #20]	; (e70 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x24>)
     e5a:	781b      	ldrb	r3, [r3, #0]
     e5c:	7123      	strb	r3, [r4, #4]
	spi_descriptor=spi_des;
     e5e:	6165      	str	r5, [r4, #20]
	memoryMap=flashMap;
     e60:	4b04      	ldr	r3, [pc, #16]	; (e74 <_ZN16FlashMemoryClassC1EP21spi_m_sync_descriptor+0x28>)
     e62:	681b      	ldr	r3, [r3, #0]
     e64:	6023      	str	r3, [r4, #0]
} //FlashMemoryClass
     e66:	0020      	movs	r0, r4
     e68:	bd70      	pop	{r4, r5, r6, pc}
     e6a:	46c0      	nop			; (mov r8, r8)
     e6c:	00001155 	.word	0x00001155
     e70:	00004dfc 	.word	0x00004dfc
     e74:	2000064c 	.word	0x2000064c

00000e78 <_GLOBAL__sub_I_flashMap>:
	flashClose();
	
	return	r;
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
     e78:	b510      	push	{r4, lr}
     e7a:	4c06      	ldr	r4, [pc, #24]	; (e94 <_GLOBAL__sub_I_flashMap+0x1c>)
     e7c:	3404      	adds	r4, #4
     e7e:	4906      	ldr	r1, [pc, #24]	; (e98 <_GLOBAL__sub_I_flashMap+0x20>)
     e80:	0020      	movs	r0, r4
     e82:	4b06      	ldr	r3, [pc, #24]	; (e9c <_GLOBAL__sub_I_flashMap+0x24>)
     e84:	4798      	blx	r3
     e86:	4a06      	ldr	r2, [pc, #24]	; (ea0 <_GLOBAL__sub_I_flashMap+0x28>)
     e88:	4906      	ldr	r1, [pc, #24]	; (ea4 <_GLOBAL__sub_I_flashMap+0x2c>)
     e8a:	0020      	movs	r0, r4
     e8c:	4b06      	ldr	r3, [pc, #24]	; (ea8 <_GLOBAL__sub_I_flashMap+0x30>)
     e8e:	4798      	blx	r3
     e90:	bd10      	pop	{r4, pc}
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	2000064c 	.word	0x2000064c
     e98:	20000bd0 	.word	0x20000bd0
     e9c:	00000e4d 	.word	0x00000e4d
     ea0:	20000000 	.word	0x20000000
     ea4:	00000e39 	.word	0x00000e39
     ea8:	000048ed 	.word	0x000048ed

00000eac <_ZN17FRAM_Memory_ClassD1Ev>:
		spiPort=0;
		memoryAddress=framMemory;
} //FRAM_Memory_Class

// default destructor
FRAM_Memory_Class::~FRAM_Memory_Class()
     eac:	b510      	push	{r4, lr}
     eae:	0004      	movs	r4, r0
     eb0:	3018      	adds	r0, #24
     eb2:	4b02      	ldr	r3, [pc, #8]	; (ebc <_ZN17FRAM_Memory_ClassD1Ev+0x10>)
     eb4:	4798      	blx	r3
{
} //~FRAM_Memory_Class
     eb6:	0020      	movs	r0, r4
     eb8:	bd10      	pop	{r4, pc}
     eba:	46c0      	nop			; (mov r8, r8)
     ebc:	00001161 	.word	0x00001161

00000ec0 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor>:
FRAM_Memory_Class::FRAM_Memory_Class(uint8_t sp){
	spiPort=sp;
	memoryAddress=framMemory;
	
}
FRAM_Memory_Class::FRAM_Memory_Class(spi_m_sync_descriptor *spi_des)
     ec0:	b570      	push	{r4, r5, r6, lr}
     ec2:	0004      	movs	r4, r0
     ec4:	000d      	movs	r5, r1
     ec6:	3018      	adds	r0, #24
     ec8:	4b05      	ldr	r3, [pc, #20]	; (ee0 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x20>)
     eca:	4798      	blx	r3
{
	appParameters=defaultParameters;
     ecc:	4b05      	ldr	r3, [pc, #20]	; (ee4 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x24>)
     ece:	781b      	ldrb	r3, [r3, #0]
     ed0:	7423      	strb	r3, [r4, #16]
	spi_descriptor=spi_des;
     ed2:	6165      	str	r5, [r4, #20]
	memoryAddress=framMemory;
     ed4:	4b04      	ldr	r3, [pc, #16]	; (ee8 <_ZN17FRAM_Memory_ClassC1EP21spi_m_sync_descriptor+0x28>)
     ed6:	681b      	ldr	r3, [r3, #0]
     ed8:	60e3      	str	r3, [r4, #12]
} //FlashMemoryClass
     eda:	0020      	movs	r0, r4
     edc:	bd70      	pop	{r4, r5, r6, pc}
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	00001155 	.word	0x00001155
     ee4:	00004dfc 	.word	0x00004dfc
     ee8:	20000698 	.word	0x20000698

00000eec <_ZN17FRAM_Memory_Class9Send_ByteEh>:
	// <true"> High
	true);
	gpio_set_pin_level(CS_FLASH,true);
}
uint8_t FRAM_Memory_Class::Send_Byte(uint8_t byte)
{
     eec:	b510      	push	{r4, lr}
     eee:	b082      	sub	sp, #8
     ef0:	466b      	mov	r3, sp
     ef2:	1ddc      	adds	r4, r3, #7
     ef4:	71d9      	strb	r1, [r3, #7]
	
	spi.write(&byte,1);
     ef6:	3018      	adds	r0, #24
     ef8:	2201      	movs	r2, #1
     efa:	0021      	movs	r1, r4
     efc:	4b02      	ldr	r3, [pc, #8]	; (f08 <_ZN17FRAM_Memory_Class9Send_ByteEh+0x1c>)
     efe:	4798      	blx	r3
	return byte;
     f00:	7820      	ldrb	r0, [r4, #0]
}
     f02:	b002      	add	sp, #8
     f04:	bd10      	pop	{r4, pc}
     f06:	46c0      	nop			; (mov r8, r8)
     f08:	000011b9 	.word	0x000011b9

00000f0c <_ZN17FRAM_Memory_Class8Get_ByteEv>:

uint8_t FRAM_Memory_Class::Get_Byte(void)
{
     f0c:	b510      	push	{r4, lr}
     f0e:	b082      	sub	sp, #8
	uint8_t byte;
	spi.read(&byte,1);
     f10:	466b      	mov	r3, sp
     f12:	1ddc      	adds	r4, r3, #7
     f14:	3018      	adds	r0, #24
     f16:	2201      	movs	r2, #1
     f18:	0021      	movs	r1, r4
     f1a:	4b02      	ldr	r3, [pc, #8]	; (f24 <_ZN17FRAM_Memory_Class8Get_ByteEv+0x18>)
     f1c:	4798      	blx	r3
	
	return byte;
     f1e:	7820      	ldrb	r0, [r4, #0]
}
     f20:	b002      	add	sp, #8
     f22:	bd10      	pop	{r4, pc}
     f24:	000011d9 	.word	0x000011d9

00000f28 <_ZN17FRAM_Memory_Class4WRENEv>:

void FRAM_Memory_Class::WREN(void)
{
     f28:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f2a:	24c0      	movs	r4, #192	; 0xc0
     f2c:	05e4      	lsls	r4, r4, #23
     f2e:	2680      	movs	r6, #128	; 0x80
     f30:	0576      	lsls	r6, r6, #21
     f32:	6166      	str	r6, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f34:	2580      	movs	r5, #128	; 0x80
     f36:	052d      	lsls	r5, r5, #20
     f38:	61a5      	str	r5, [r4, #24]
	CE_Low_FRAM();			// enable device
	Send_Byte(kFRAM_WREN);	// send WREN command
     f3a:	2106      	movs	r1, #6
     f3c:	4b02      	ldr	r3, [pc, #8]	; (f48 <_ZN17FRAM_Memory_Class4WRENEv+0x20>)
     f3e:	4798      	blx	r3
     f40:	61a6      	str	r6, [r4, #24]
     f42:	61a5      	str	r5, [r4, #24]
	CE_High_FRAM();			// disable device
}
     f44:	bd70      	pop	{r4, r5, r6, pc}
     f46:	46c0      	nop			; (mov r8, r8)
     f48:	00000eed 	.word	0x00000eed

00000f4c <_ZN17FRAM_Memory_Class4WRDIEv>:


void FRAM_Memory_Class::WRDI(void)
{
     f4c:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f4e:	24c0      	movs	r4, #192	; 0xc0
     f50:	05e4      	lsls	r4, r4, #23
     f52:	2680      	movs	r6, #128	; 0x80
     f54:	0576      	lsls	r6, r6, #21
     f56:	6166      	str	r6, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f58:	2580      	movs	r5, #128	; 0x80
     f5a:	052d      	lsls	r5, r5, #20
     f5c:	61a5      	str	r5, [r4, #24]
	CE_Low_FRAM();			// enable device
	Send_Byte(kFRAM_WRDI);	// send WRDI command
     f5e:	2104      	movs	r1, #4
     f60:	4b02      	ldr	r3, [pc, #8]	; (f6c <_ZN17FRAM_Memory_Class4WRDIEv+0x20>)
     f62:	4798      	blx	r3
     f64:	61a6      	str	r6, [r4, #24]
     f66:	61a5      	str	r5, [r4, #24]
	CE_High_FRAM();			// disable device
}
     f68:	bd70      	pop	{r4, r5, r6, pc}
     f6a:	46c0      	nop			; (mov r8, r8)
     f6c:	00000eed 	.word	0x00000eed

00000f70 <_ZN17FRAM_Memory_Class18ReadStatusRegisterEv>:
		uint8_t	status = ReadStatusRegister();
		
		while ((status & kFRAM_READ) == kFRAM_READ)	// waste time until not busy
		status = ReadStatusRegister();
	}
uint8_t  FRAM_Memory_Class::ReadStatusRegister(void){
     f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f72:	0007      	movs	r7, r0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f74:	24c0      	movs	r4, #192	; 0xc0
     f76:	05e4      	lsls	r4, r4, #23
     f78:	2680      	movs	r6, #128	; 0x80
     f7a:	0576      	lsls	r6, r6, #21
     f7c:	6166      	str	r6, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f7e:	2580      	movs	r5, #128	; 0x80
     f80:	052d      	lsls	r5, r5, #20
     f82:	61a5      	str	r5, [r4, #24]
		uint8_t byte = 0;
		CE_Low_FRAM();			// enable device
		Send_Byte(kFRAM_RDSR);	// send RDSR command
     f84:	2105      	movs	r1, #5
     f86:	4b04      	ldr	r3, [pc, #16]	; (f98 <_ZN17FRAM_Memory_Class18ReadStatusRegisterEv+0x28>)
     f88:	4798      	blx	r3
		byte = Get_Byte();		/* receive byte */
     f8a:	0038      	movs	r0, r7
     f8c:	4b03      	ldr	r3, [pc, #12]	; (f9c <_ZN17FRAM_Memory_Class18ReadStatusRegisterEv+0x2c>)
     f8e:	4798      	blx	r3
     f90:	61a6      	str	r6, [r4, #24]
     f92:	61a5      	str	r5, [r4, #24]
		CE_High_FRAM();			// disable device
		return byte;
	}
     f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	00000eed 	.word	0x00000eed
     f9c:	00000f0d 	.word	0x00000f0d

00000fa0 <_ZN17FRAM_Memory_Class4InitEv>:
void	FRAM_Memory_Class::Init(void){
     fa0:	b570      	push	{r4, r5, r6, lr}
     fa2:	0004      	movs	r4, r0
	spi.SetDescriptor(spi_descriptor);
     fa4:	0005      	movs	r5, r0
     fa6:	3518      	adds	r5, #24
     fa8:	6941      	ldr	r1, [r0, #20]
     faa:	0028      	movs	r0, r5
     fac:	4b08      	ldr	r3, [pc, #32]	; (fd0 <_ZN17FRAM_Memory_Class4InitEv+0x30>)
     fae:	4798      	blx	r3
	spi.init();
     fb0:	0028      	movs	r0, r5
     fb2:	4b08      	ldr	r3, [pc, #32]	; (fd4 <_ZN17FRAM_Memory_Class4InitEv+0x34>)
     fb4:	4798      	blx	r3
	memoryAddress=0x00;
     fb6:	2300      	movs	r3, #0
     fb8:	60e3      	str	r3, [r4, #12]
	spi.enable();
     fba:	0028      	movs	r0, r5
     fbc:	4b06      	ldr	r3, [pc, #24]	; (fd8 <_ZN17FRAM_Memory_Class4InitEv+0x38>)
     fbe:	4798      	blx	r3
	status=ReadStatusRegister();
     fc0:	0020      	movs	r0, r4
     fc2:	4b06      	ldr	r3, [pc, #24]	; (fdc <_ZN17FRAM_Memory_Class4InitEv+0x3c>)
     fc4:	4798      	blx	r3
     fc6:	7060      	strb	r0, [r4, #1]
		CE_High_FRAM();			// disable device
		return byte;
	}
void FRAM_Memory_Class::FramClose(void){
	
		spi.disable();
     fc8:	0028      	movs	r0, r5
     fca:	4b05      	ldr	r3, [pc, #20]	; (fe0 <_ZN17FRAM_Memory_Class4InitEv+0x40>)
     fcc:	4798      	blx	r3
}
     fce:	bd70      	pop	{r4, r5, r6, pc}
     fd0:	00001189 	.word	0x00001189
     fd4:	00001165 	.word	0x00001165
     fd8:	00001195 	.word	0x00001195
     fdc:	00000f71 	.word	0x00000f71
     fe0:	000011f9 	.word	0x000011f9

00000fe4 <_ZN17FRAM_Memory_Class12WriteAddressEPhtm>:
	}

uint32_t	FRAM_Memory_Class::WriteAddress(uint8_t *p,uint16_t addr, uint32_t size){
     fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
     fe6:	46ce      	mov	lr, r9
     fe8:	4647      	mov	r7, r8
     fea:	b580      	push	{r7, lr}
     fec:	b083      	sub	sp, #12
     fee:	0005      	movs	r5, r0
     ff0:	000c      	movs	r4, r1
     ff2:	4691      	mov	r9, r2
     ff4:	4698      	mov	r8, r3
	spi.enable();
     ff6:	2318      	movs	r3, #24
     ff8:	469c      	mov	ip, r3
     ffa:	4484      	add	ip, r0
     ffc:	4663      	mov	r3, ip
     ffe:	9301      	str	r3, [sp, #4]
    1000:	4660      	mov	r0, ip
    1002:	4b22      	ldr	r3, [pc, #136]	; (108c <_ZN17FRAM_Memory_Class12WriteAddressEPhtm+0xa8>)
    1004:	4798      	blx	r3
	uint32_t	w;
	//while(!IsReady());
	FramOpen();
	WREN();
    1006:	0028      	movs	r0, r5
    1008:	4b21      	ldr	r3, [pc, #132]	; (1090 <_ZN17FRAM_Memory_Class12WriteAddressEPhtm+0xac>)
    100a:	4798      	blx	r3
	while ((ReadStatusRegister()&0x02)==0);
    100c:	4f21      	ldr	r7, [pc, #132]	; (1094 <_ZN17FRAM_Memory_Class12WriteAddressEPhtm+0xb0>)
    100e:	2602      	movs	r6, #2
    1010:	0028      	movs	r0, r5
    1012:	47b8      	blx	r7
    1014:	4206      	tst	r6, r0
    1016:	d0fb      	beq.n	1010 <_ZN17FRAM_Memory_Class12WriteAddressEPhtm+0x2c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1018:	23c0      	movs	r3, #192	; 0xc0
    101a:	05db      	lsls	r3, r3, #23
    101c:	2280      	movs	r2, #128	; 0x80
    101e:	0552      	lsls	r2, r2, #21
    1020:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1022:	2280      	movs	r2, #128	; 0x80
    1024:	0512      	lsls	r2, r2, #20
    1026:	619a      	str	r2, [r3, #24]
	CE_Low_FRAM();
	localBuffer[0]=kFRAM_WRITE;
    1028:	2202      	movs	r2, #2
    102a:	232c      	movs	r3, #44	; 0x2c
    102c:	54ea      	strb	r2, [r5, r3]
	localBuffer[1]=(uint8_t)((addr & 0xFF00) >> 8);
    102e:	464b      	mov	r3, r9
    1030:	0a1a      	lsrs	r2, r3, #8
    1032:	232d      	movs	r3, #45	; 0x2d
    1034:	54ea      	strb	r2, [r5, r3]
	localBuffer[2]=(uint8_t)(addr&0xFF);
    1036:	3301      	adds	r3, #1
    1038:	464a      	mov	r2, r9
    103a:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i = FRAM_HEADER_SIZE; i <(size)+FRAM_HEADER_SIZE; i++)
    103c:	4643      	mov	r3, r8
    103e:	1cda      	adds	r2, r3, #3
    1040:	2a03      	cmp	r2, #3
    1042:	d908      	bls.n	1056 <_ZN17FRAM_Memory_Class12WriteAddressEPhtm+0x72>
    1044:	0029      	movs	r1, r5
    1046:	312f      	adds	r1, #47	; 0x2f
    1048:	18e7      	adds	r7, r4, r3
	{
		localBuffer[i]=*p;
    104a:	7820      	ldrb	r0, [r4, #0]
    104c:	7008      	strb	r0, [r1, #0]
		p++;
    104e:	3401      	adds	r4, #1
    1050:	3101      	adds	r1, #1
	for (uint32_t i = FRAM_HEADER_SIZE; i <(size)+FRAM_HEADER_SIZE; i++)
    1052:	42bc      	cmp	r4, r7
    1054:	d1f9      	bne.n	104a <_ZN17FRAM_Memory_Class12WriteAddressEPhtm+0x66>
	}


	w=spi.write(&localBuffer[0],size+FRAM_HEADER_SIZE);
    1056:	0029      	movs	r1, r5
    1058:	312c      	adds	r1, #44	; 0x2c
    105a:	9e01      	ldr	r6, [sp, #4]
    105c:	0030      	movs	r0, r6
    105e:	4b0e      	ldr	r3, [pc, #56]	; (1098 <_ZN17FRAM_Memory_Class12WriteAddressEPhtm+0xb4>)
    1060:	4798      	blx	r3
    1062:	0004      	movs	r4, r0
    1064:	23c0      	movs	r3, #192	; 0xc0
    1066:	05db      	lsls	r3, r3, #23
    1068:	2280      	movs	r2, #128	; 0x80
    106a:	0552      	lsls	r2, r2, #21
    106c:	619a      	str	r2, [r3, #24]
    106e:	2280      	movs	r2, #128	; 0x80
    1070:	0512      	lsls	r2, r2, #20
    1072:	619a      	str	r2, [r3, #24]

	CE_High_FRAM();
	WRDI();
    1074:	0028      	movs	r0, r5
    1076:	4b09      	ldr	r3, [pc, #36]	; (109c <_ZN17FRAM_Memory_Class12WriteAddressEPhtm+0xb8>)
    1078:	4798      	blx	r3
		spi.disable();
    107a:	0030      	movs	r0, r6
    107c:	4b08      	ldr	r3, [pc, #32]	; (10a0 <_ZN17FRAM_Memory_Class12WriteAddressEPhtm+0xbc>)
    107e:	4798      	blx	r3
	FramClose();
	return	w;
	/*return (uint32_t)writeFlash(addr,(void*)p,size);*/
}
    1080:	0020      	movs	r0, r4
    1082:	b003      	add	sp, #12
    1084:	bc0c      	pop	{r2, r3}
    1086:	4690      	mov	r8, r2
    1088:	4699      	mov	r9, r3
    108a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    108c:	00001195 	.word	0x00001195
    1090:	00000f29 	.word	0x00000f29
    1094:	00000f71 	.word	0x00000f71
    1098:	000011b9 	.word	0x000011b9
    109c:	00000f4d 	.word	0x00000f4d
    10a0:	000011f9 	.word	0x000011f9

000010a4 <_ZN17FRAM_Memory_Class11ReadAddressEPhtm>:
uint32_t	FRAM_Memory_Class::ReadAddress(uint8_t *p,uint16_t addr, uint32_t size){
    10a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    10a6:	46de      	mov	lr, fp
    10a8:	4657      	mov	r7, sl
    10aa:	b580      	push	{r7, lr}
    10ac:	b083      	sub	sp, #12
    10ae:	0004      	movs	r4, r0
    10b0:	9100      	str	r1, [sp, #0]
    10b2:	4693      	mov	fp, r2
    10b4:	9301      	str	r3, [sp, #4]
	spi.enable();
    10b6:	0005      	movs	r5, r0
    10b8:	3518      	adds	r5, #24
    10ba:	0028      	movs	r0, r5
    10bc:	4b14      	ldr	r3, [pc, #80]	; (1110 <_ZN17FRAM_Memory_Class11ReadAddressEPhtm+0x6c>)
    10be:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    10c0:	26c0      	movs	r6, #192	; 0xc0
    10c2:	05f6      	lsls	r6, r6, #23
    10c4:	2080      	movs	r0, #128	; 0x80
    10c6:	0540      	lsls	r0, r0, #21
    10c8:	4682      	mov	sl, r0
    10ca:	6170      	str	r0, [r6, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    10cc:	2780      	movs	r7, #128	; 0x80
    10ce:	053f      	lsls	r7, r7, #20
    10d0:	61b7      	str	r7, [r6, #24]
	//while(!IsReady());
	FramOpen();
	CE_Low_FRAM();
	instruction[0]=kFRAM_READ;
    10d2:	2303      	movs	r3, #3
    10d4:	7223      	strb	r3, [r4, #8]
	instruction[1]=(uint8_t)((addr & 0xFFFF) >> 8);
    10d6:	4658      	mov	r0, fp
    10d8:	1203      	asrs	r3, r0, #8
    10da:	7263      	strb	r3, [r4, #9]
	instruction[2]=(uint8_t)(addr&0xFF);
    10dc:	4658      	mov	r0, fp
    10de:	72a0      	strb	r0, [r4, #10]
	
	uint32_t	r=spi.write(instruction,FRAM_HEADER_SIZE);
    10e0:	3408      	adds	r4, #8
    10e2:	0021      	movs	r1, r4
    10e4:	2203      	movs	r2, #3
    10e6:	0028      	movs	r0, r5
    10e8:	4b0a      	ldr	r3, [pc, #40]	; (1114 <_ZN17FRAM_Memory_Class11ReadAddressEPhtm+0x70>)
    10ea:	4798      	blx	r3
	r=spi.read(p,size);
    10ec:	9a01      	ldr	r2, [sp, #4]
    10ee:	9900      	ldr	r1, [sp, #0]
    10f0:	0028      	movs	r0, r5
    10f2:	4b09      	ldr	r3, [pc, #36]	; (1118 <_ZN17FRAM_Memory_Class11ReadAddressEPhtm+0x74>)
    10f4:	4798      	blx	r3
    10f6:	0004      	movs	r4, r0
    10f8:	4653      	mov	r3, sl
    10fa:	61b3      	str	r3, [r6, #24]
    10fc:	61b7      	str	r7, [r6, #24]
		spi.disable();
    10fe:	0028      	movs	r0, r5
    1100:	4b06      	ldr	r3, [pc, #24]	; (111c <_ZN17FRAM_Memory_Class11ReadAddressEPhtm+0x78>)
    1102:	4798      	blx	r3
	CE_High_FRAM();
	FramClose();
	
	return	r;
	/*return	(uint32_t)readFlash((void*)p,addr,size);*/
}
    1104:	0020      	movs	r0, r4
    1106:	b003      	add	sp, #12
    1108:	bc0c      	pop	{r2, r3}
    110a:	4692      	mov	sl, r2
    110c:	469b      	mov	fp, r3
    110e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1110:	00001195 	.word	0x00001195
    1114:	000011b9 	.word	0x000011b9
    1118:	000011d9 	.word	0x000011d9
    111c:	000011f9 	.word	0x000011f9

00001120 <_GLOBAL__sub_I_framMemory>:

    1120:	b510      	push	{r4, lr}
    1122:	4c06      	ldr	r4, [pc, #24]	; (113c <_GLOBAL__sub_I_framMemory+0x1c>)
    1124:	3404      	adds	r4, #4
    1126:	4906      	ldr	r1, [pc, #24]	; (1140 <_GLOBAL__sub_I_framMemory+0x20>)
    1128:	0020      	movs	r0, r4
    112a:	4b06      	ldr	r3, [pc, #24]	; (1144 <_GLOBAL__sub_I_framMemory+0x24>)
    112c:	4798      	blx	r3
    112e:	4a06      	ldr	r2, [pc, #24]	; (1148 <_GLOBAL__sub_I_framMemory+0x28>)
    1130:	4906      	ldr	r1, [pc, #24]	; (114c <_GLOBAL__sub_I_framMemory+0x2c>)
    1132:	0020      	movs	r0, r4
    1134:	4b06      	ldr	r3, [pc, #24]	; (1150 <_GLOBAL__sub_I_framMemory+0x30>)
    1136:	4798      	blx	r3
    1138:	bd10      	pop	{r4, pc}
    113a:	46c0      	nop			; (mov r8, r8)
    113c:	20000698 	.word	0x20000698
    1140:	20000bd0 	.word	0x20000bd0
    1144:	00000ec1 	.word	0x00000ec1
    1148:	20000000 	.word	0x20000000
    114c:	00000ead 	.word	0x00000ead
    1150:	000048ed 	.word	0x000048ed

00001154 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
{
		ptrSPISync=this;
    1154:	4b01      	ldr	r3, [pc, #4]	; (115c <_ZN13SPI_Syn_ClassC1Ev+0x8>)
    1156:	6018      	str	r0, [r3, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
    1158:	4770      	bx	lr
    115a:	46c0      	nop			; (mov r8, r8)
    115c:	2000070c 	.word	0x2000070c

00001160 <_ZN13SPI_Syn_ClassD1Ev>:
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
{
} //~SPI_Syn_Class
    1160:	4770      	bx	lr
	...

00001164 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
    1164:	b510      	push	{r4, lr}
    1166:	0004      	movs	r4, r0
	spi_m_sync_get_io_descriptor(SPI, &spio);
    1168:	0001      	movs	r1, r0
    116a:	3108      	adds	r1, #8
    116c:	6840      	ldr	r0, [r0, #4]
    116e:	4b04      	ldr	r3, [pc, #16]	; (1180 <_ZN13SPI_Syn_Class4initEv+0x1c>)
    1170:	4798      	blx	r3

	spi_m_sync_enable(SPI);
    1172:	6860      	ldr	r0, [r4, #4]
    1174:	4b03      	ldr	r3, [pc, #12]	; (1184 <_ZN13SPI_Syn_Class4initEv+0x20>)
    1176:	4798      	blx	r3
	
	ready=true;
    1178:	2301      	movs	r3, #1
    117a:	7023      	strb	r3, [r4, #0]
	xferDone=true;
    117c:	7063      	strb	r3, [r4, #1]
	
}
    117e:	bd10      	pop	{r4, pc}
    1180:	000017a9 	.word	0x000017a9
    1184:	00001699 	.word	0x00001699

00001188 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
	ptrSPISync=this;
    1188:	4b01      	ldr	r3, [pc, #4]	; (1190 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x8>)
    118a:	6018      	str	r0, [r3, #0]
	SPI=spiDesc;
    118c:	6041      	str	r1, [r0, #4]
}
    118e:	4770      	bx	lr
    1190:	2000070c 	.word	0x2000070c

00001194 <_ZN13SPI_Syn_Class6enableEv>:


int32_t SPI_Syn_Class::enable(){
    1194:	b510      	push	{r4, lr}
    1196:	0004      	movs	r4, r0
	spi_m_sync_get_io_descriptor(SPI, &spio);
    1198:	0001      	movs	r1, r0
    119a:	3108      	adds	r1, #8
    119c:	6840      	ldr	r0, [r0, #4]
    119e:	4b04      	ldr	r3, [pc, #16]	; (11b0 <_ZN13SPI_Syn_Class6enableEv+0x1c>)
    11a0:	4798      	blx	r3
	spi_m_sync_enable(SPI);
    11a2:	6860      	ldr	r0, [r4, #4]
    11a4:	4b03      	ldr	r3, [pc, #12]	; (11b4 <_ZN13SPI_Syn_Class6enableEv+0x20>)
    11a6:	4798      	blx	r3
	ready=true;
    11a8:	2301      	movs	r3, #1
    11aa:	7023      	strb	r3, [r4, #0]
	return 0;
}
    11ac:	2000      	movs	r0, #0
    11ae:	bd10      	pop	{r4, pc}
    11b0:	000017a9 	.word	0x000017a9
    11b4:	00001699 	.word	0x00001699

000011b8 <_ZN13SPI_Syn_Class5writeEPKhl>:

int32_t  SPI_Syn_Class::write(const uint8_t * p, int32_t n){
    11b8:	b510      	push	{r4, lr}
    11ba:	0004      	movs	r4, r0
	int32_t w;
	wFlag=true;
    11bc:	2301      	movs	r3, #1
    11be:	7403      	strb	r3, [r0, #16]
	w= io_write(spio,p,(uint16_t)n);
    11c0:	b292      	uxth	r2, r2
    11c2:	6880      	ldr	r0, [r0, #8]
    11c4:	4b03      	ldr	r3, [pc, #12]	; (11d4 <_ZN13SPI_Syn_Class5writeEPKhl+0x1c>)
    11c6:	4798      	blx	r3
	wFlag=(bool)w;
    11c8:	0003      	movs	r3, r0
    11ca:	1e5a      	subs	r2, r3, #1
    11cc:	4193      	sbcs	r3, r2
    11ce:	b2db      	uxtb	r3, r3
    11d0:	7423      	strb	r3, [r4, #16]
	 return w;
	
}
    11d2:	bd10      	pop	{r4, pc}
    11d4:	000015dd 	.word	0x000015dd

000011d8 <_ZN13SPI_Syn_Class4readEPhl>:
int32_t  SPI_Syn_Class::read(uint8_t * p, int32_t n){
    11d8:	b510      	push	{r4, lr}
    11da:	0004      	movs	r4, r0
	int32_t r;
	rFlag=true;
    11dc:	2301      	movs	r3, #1
    11de:	7443      	strb	r3, [r0, #17]
	r=io_read(spio,p,(uint16_t)n);
    11e0:	b292      	uxth	r2, r2
    11e2:	6880      	ldr	r0, [r0, #8]
    11e4:	4b03      	ldr	r3, [pc, #12]	; (11f4 <_ZN13SPI_Syn_Class4readEPhl+0x1c>)
    11e6:	4798      	blx	r3
	rFlag=(bool)r;
    11e8:	0003      	movs	r3, r0
    11ea:	1e5a      	subs	r2, r3, #1
    11ec:	4193      	sbcs	r3, r2
    11ee:	b2db      	uxtb	r3, r3
    11f0:	7463      	strb	r3, [r4, #17]
	return  r;
}
    11f2:	bd10      	pop	{r4, pc}
    11f4:	00001611 	.word	0x00001611

000011f8 <_ZN13SPI_Syn_Class7disableEv>:
void SPI_Syn_Class::disable(void){
    11f8:	b510      	push	{r4, lr}
	spi_m_sync_disable(SPI);
    11fa:	6840      	ldr	r0, [r0, #4]
    11fc:	4b01      	ldr	r3, [pc, #4]	; (1204 <_ZN13SPI_Syn_Class7disableEv+0xc>)
    11fe:	4798      	blx	r3
	
}
    1200:	bd10      	pop	{r4, pc}
    1202:	46c0      	nop			; (mov r8, r8)
    1204:	000016c1 	.word	0x000016c1

00001208 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    1208:	b510      	push	{r4, lr}
	system_init();
    120a:	4b02      	ldr	r3, [pc, #8]	; (1214 <atmel_start_init+0xc>)
    120c:	4798      	blx	r3
	usb_init();
    120e:	4b02      	ldr	r3, [pc, #8]	; (1218 <atmel_start_init+0x10>)
    1210:	4798      	blx	r3
}
    1212:	bd10      	pop	{r4, pc}
    1214:	0000142d 	.word	0x0000142d
    1218:	000048c5 	.word	0x000048c5

0000121c <SPI_MEMORIES_PORT_init>:
struct timer_descriptor      TIMER_TERMINAL;

struct calendar_descriptor CALENDAR;

void SPI_MEMORIES_PORT_init(void)
{
    121c:	b5f0      	push	{r4, r5, r6, r7, lr}
    121e:	46ce      	mov	lr, r9
    1220:	4647      	mov	r7, r8
    1222:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1224:	21c0      	movs	r1, #192	; 0xc0
    1226:	05c9      	lsls	r1, r1, #23
    1228:	2380      	movs	r3, #128	; 0x80
    122a:	009b      	lsls	r3, r3, #2
    122c:	604b      	str	r3, [r1, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    122e:	4b25      	ldr	r3, [pc, #148]	; (12c4 <SPI_MEMORIES_PORT_init+0xa8>)
    1230:	4a25      	ldr	r2, [pc, #148]	; (12c8 <SPI_MEMORIES_PORT_init+0xac>)
    1232:	629a      	str	r2, [r3, #40]	; 0x28
    1234:	4a25      	ldr	r2, [pc, #148]	; (12cc <SPI_MEMORIES_PORT_init+0xb0>)
    1236:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1238:	2449      	movs	r4, #73	; 0x49
    123a:	5d1a      	ldrb	r2, [r3, r4]
    123c:	2004      	movs	r0, #4
    123e:	4382      	bics	r2, r0
    1240:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1242:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1244:	2601      	movs	r6, #1
    1246:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1248:	2201      	movs	r2, #1
    124a:	4310      	orrs	r0, r2
    124c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    124e:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1250:	2734      	movs	r7, #52	; 0x34
    1252:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1254:	250f      	movs	r5, #15
    1256:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
    1258:	2420      	movs	r4, #32
    125a:	46a1      	mov	r9, r4
    125c:	464c      	mov	r4, r9
    125e:	4320      	orrs	r0, r4
    1260:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1262:	55d8      	strb	r0, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1264:	2080      	movs	r0, #128	; 0x80
    1266:	00c0      	lsls	r0, r0, #3
    1268:	6148      	str	r0, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    126a:	6088      	str	r0, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    126c:	4818      	ldr	r0, [pc, #96]	; (12d0 <SPI_MEMORIES_PORT_init+0xb4>)
    126e:	6298      	str	r0, [r3, #40]	; 0x28
    1270:	20c0      	movs	r0, #192	; 0xc0
    1272:	0600      	lsls	r0, r0, #24
    1274:	4684      	mov	ip, r0
    1276:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1278:	3716      	adds	r7, #22
    127a:	5dd8      	ldrb	r0, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    127c:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    127e:	4310      	orrs	r0, r2
    1280:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1282:	55d8      	strb	r0, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1284:	2035      	movs	r0, #53	; 0x35
    1286:	5c1f      	ldrb	r7, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1288:	240f      	movs	r4, #15
    128a:	43a7      	bics	r7, r4
	tmp |= PORT_PMUX_PMUXE(data);
    128c:	3c0d      	subs	r4, #13
    128e:	4327      	orrs	r7, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1290:	541f      	strb	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1292:	2780      	movs	r7, #128	; 0x80
    1294:	013f      	lsls	r7, r7, #4
    1296:	614f      	str	r7, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1298:	608f      	str	r7, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    129a:	490e      	ldr	r1, [pc, #56]	; (12d4 <SPI_MEMORIES_PORT_init+0xb8>)
    129c:	6299      	str	r1, [r3, #40]	; 0x28
    129e:	4661      	mov	r1, ip
    12a0:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12a2:	274b      	movs	r7, #75	; 0x4b
    12a4:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    12a6:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    12a8:	4311      	orrs	r1, r2
    12aa:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12ac:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    12ae:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    12b0:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
    12b2:	4649      	mov	r1, r9
    12b4:	430a      	orrs	r2, r1
    12b6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    12b8:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA11, PINMUX_PA11C_SERCOM0_PAD3);
}
    12ba:	bc0c      	pop	{r2, r3}
    12bc:	4690      	mov	r8, r2
    12be:	4699      	mov	r9, r3
    12c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	41004400 	.word	0x41004400
    12c8:	40020200 	.word	0x40020200
    12cc:	c0020000 	.word	0xc0020000
    12d0:	40000400 	.word	0x40000400
    12d4:	40000800 	.word	0x40000800

000012d8 <SPI_MEMORIES_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    12d8:	4a04      	ldr	r2, [pc, #16]	; (12ec <SPI_MEMORIES_CLOCK_init+0x14>)
    12da:	6a13      	ldr	r3, [r2, #32]
    12dc:	2104      	movs	r1, #4
    12de:	430b      	orrs	r3, r1
    12e0:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
    12e2:	4a03      	ldr	r2, [pc, #12]	; (12f0 <SPI_MEMORIES_CLOCK_init+0x18>)
    12e4:	4b03      	ldr	r3, [pc, #12]	; (12f4 <SPI_MEMORIES_CLOCK_init+0x1c>)
    12e6:	805a      	strh	r2, [r3, #2]

void SPI_MEMORIES_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
    12e8:	4770      	bx	lr
    12ea:	46c0      	nop			; (mov r8, r8)
    12ec:	40000400 	.word	0x40000400
    12f0:	00004014 	.word	0x00004014
    12f4:	40000c00 	.word	0x40000c00

000012f8 <SPI_MEMORIES_init>:

void SPI_MEMORIES_init(void)
{
    12f8:	b510      	push	{r4, lr}
	SPI_MEMORIES_CLOCK_init();
    12fa:	4b04      	ldr	r3, [pc, #16]	; (130c <SPI_MEMORIES_init+0x14>)
    12fc:	4798      	blx	r3
	spi_m_sync_init(&SPI_MEMORIES, SERCOM0);
    12fe:	4904      	ldr	r1, [pc, #16]	; (1310 <SPI_MEMORIES_init+0x18>)
    1300:	4804      	ldr	r0, [pc, #16]	; (1314 <SPI_MEMORIES_init+0x1c>)
    1302:	4b05      	ldr	r3, [pc, #20]	; (1318 <SPI_MEMORIES_init+0x20>)
    1304:	4798      	blx	r3
	SPI_MEMORIES_PORT_init();
    1306:	4b05      	ldr	r3, [pc, #20]	; (131c <SPI_MEMORIES_init+0x24>)
    1308:	4798      	blx	r3
}
    130a:	bd10      	pop	{r4, pc}
    130c:	000012d9 	.word	0x000012d9
    1310:	42000800 	.word	0x42000800
    1314:	20000bd0 	.word	0x20000bd0
    1318:	00001645 	.word	0x00001645
    131c:	0000121d 	.word	0x0000121d

00001320 <CALENDAR_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
    1320:	4a04      	ldr	r2, [pc, #16]	; (1334 <CALENDAR_CLOCK_init+0x14>)
    1322:	6993      	ldr	r3, [r2, #24]
    1324:	2120      	movs	r1, #32
    1326:	430b      	orrs	r3, r1
    1328:	6193      	str	r3, [r2, #24]
    132a:	4a03      	ldr	r2, [pc, #12]	; (1338 <CALENDAR_CLOCK_init+0x18>)
    132c:	4b03      	ldr	r3, [pc, #12]	; (133c <CALENDAR_CLOCK_init+0x1c>)
    132e:	805a      	strh	r2, [r3, #2]

void CALENDAR_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
    1330:	4770      	bx	lr
    1332:	46c0      	nop			; (mov r8, r8)
    1334:	40000400 	.word	0x40000400
    1338:	00004304 	.word	0x00004304
    133c:	40000c00 	.word	0x40000c00

00001340 <CALENDAR_init>:

void CALENDAR_init(void)
{
    1340:	b510      	push	{r4, lr}
	CALENDAR_CLOCK_init();
    1342:	4b03      	ldr	r3, [pc, #12]	; (1350 <CALENDAR_init+0x10>)
    1344:	4798      	blx	r3
	calendar_init(&CALENDAR, RTC);
    1346:	4903      	ldr	r1, [pc, #12]	; (1354 <CALENDAR_init+0x14>)
    1348:	4803      	ldr	r0, [pc, #12]	; (1358 <CALENDAR_init+0x18>)
    134a:	4b04      	ldr	r3, [pc, #16]	; (135c <CALENDAR_init+0x1c>)
    134c:	4798      	blx	r3
}
    134e:	bd10      	pop	{r4, pc}
    1350:	00001321 	.word	0x00001321
    1354:	40001400 	.word	0x40001400
    1358:	20000be8 	.word	0x20000be8
    135c:	00001555 	.word	0x00001555

00001360 <USB_DEVICE_INSTANCE_PORT_init>:

	timer_init(&TIMER_TERMINAL, TC5, _tc_get_timer());
}

void USB_DEVICE_INSTANCE_PORT_init(void)
{
    1360:	b5f0      	push	{r4, r5, r6, r7, lr}
    1362:	46c6      	mov	lr, r8
    1364:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1366:	24c0      	movs	r4, #192	; 0xc0
    1368:	05e4      	lsls	r4, r4, #23
    136a:	2280      	movs	r2, #128	; 0x80
    136c:	0452      	lsls	r2, r2, #17
    136e:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1370:	4b1a      	ldr	r3, [pc, #104]	; (13dc <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
    1372:	2780      	movs	r7, #128	; 0x80
    1374:	05ff      	lsls	r7, r7, #23
    1376:	629f      	str	r7, [r3, #40]	; 0x28
    1378:	4919      	ldr	r1, [pc, #100]	; (13e0 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
    137a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    137c:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    137e:	2058      	movs	r0, #88	; 0x58
    1380:	5c19      	ldrb	r1, [r3, r0]
    1382:	2204      	movs	r2, #4
    1384:	4690      	mov	r8, r2
    1386:	4391      	bics	r1, r2
    1388:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    138a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    138c:	2601      	movs	r6, #1
    138e:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1390:	2501      	movs	r5, #1
    1392:	4329      	orrs	r1, r5
    1394:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1396:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1398:	381c      	subs	r0, #28
    139a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    139c:	320b      	adds	r2, #11
    139e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    13a0:	3a09      	subs	r2, #9
    13a2:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    13a4:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    13a6:	2180      	movs	r1, #128	; 0x80
    13a8:	0489      	lsls	r1, r1, #18
    13aa:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13ac:	629f      	str	r7, [r3, #40]	; 0x28
    13ae:	4f0d      	ldr	r7, [pc, #52]	; (13e4 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
    13b0:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    13b2:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    13b4:	2159      	movs	r1, #89	; 0x59
    13b6:	5c5c      	ldrb	r4, [r3, r1]
    13b8:	4642      	mov	r2, r8
    13ba:	4394      	bics	r4, r2
    13bc:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    13be:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    13c0:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    13c2:	432a      	orrs	r2, r5
    13c4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    13c6:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    13c8:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    13ca:	394a      	subs	r1, #74	; 0x4a
    13cc:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    13ce:	3151      	adds	r1, #81	; 0x51
    13d0:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    13d2:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
    13d4:	bc04      	pop	{r2}
    13d6:	4690      	mov	r8, r2
    13d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13da:	46c0      	nop			; (mov r8, r8)
    13dc:	41004400 	.word	0x41004400
    13e0:	c0000100 	.word	0xc0000100
    13e4:	c0000200 	.word	0xc0000200

000013e8 <USB_DEVICE_INSTANCE_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
    13e8:	4b06      	ldr	r3, [pc, #24]	; (1404 <USB_DEVICE_INSTANCE_CLOCK_init+0x1c>)
    13ea:	69da      	ldr	r2, [r3, #28]
    13ec:	2120      	movs	r1, #32
    13ee:	430a      	orrs	r2, r1
    13f0:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
    13f2:	695a      	ldr	r2, [r3, #20]
    13f4:	3120      	adds	r1, #32
    13f6:	430a      	orrs	r2, r1
    13f8:	615a      	str	r2, [r3, #20]
    13fa:	4a03      	ldr	r2, [pc, #12]	; (1408 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
    13fc:	4b03      	ldr	r3, [pc, #12]	; (140c <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
    13fe:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
    1400:	4770      	bx	lr
    1402:	46c0      	nop			; (mov r8, r8)
    1404:	40000400 	.word	0x40000400
    1408:	00004106 	.word	0x00004106
    140c:	40000c00 	.word	0x40000c00

00001410 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
    1410:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
    1412:	4b03      	ldr	r3, [pc, #12]	; (1420 <USB_DEVICE_INSTANCE_init+0x10>)
    1414:	4798      	blx	r3
	usb_d_init();
    1416:	4b03      	ldr	r3, [pc, #12]	; (1424 <USB_DEVICE_INSTANCE_init+0x14>)
    1418:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    141a:	4b03      	ldr	r3, [pc, #12]	; (1428 <USB_DEVICE_INSTANCE_init+0x18>)
    141c:	4798      	blx	r3
}
    141e:	bd10      	pop	{r4, pc}
    1420:	000013e9 	.word	0x000013e9
    1424:	00001d51 	.word	0x00001d51
    1428:	00001361 	.word	0x00001361

0000142c <system_init>:

void system_init(void)
{
    142c:	b5f0      	push	{r4, r5, r6, r7, lr}
    142e:	46c6      	mov	lr, r8
    1430:	b500      	push	{lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    1432:	4b33      	ldr	r3, [pc, #204]	; (1500 <system_init+0xd4>)
    1434:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1436:	22c0      	movs	r2, #192	; 0xc0
    1438:	05d2      	lsls	r2, r2, #23
    143a:	2380      	movs	r3, #128	; 0x80
    143c:	039b      	lsls	r3, r3, #14
    143e:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1440:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1442:	4b30      	ldr	r3, [pc, #192]	; (1504 <system_init+0xd8>)
    1444:	2080      	movs	r0, #128	; 0x80
    1446:	05c0      	lsls	r0, r0, #23
    1448:	6298      	str	r0, [r3, #40]	; 0x28
    144a:	492f      	ldr	r1, [pc, #188]	; (1508 <system_init+0xdc>)
    144c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    144e:	2555      	movs	r5, #85	; 0x55
    1450:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1452:	2101      	movs	r1, #1
    1454:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1456:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1458:	2480      	movs	r4, #128	; 0x80
    145a:	03e4      	lsls	r4, r4, #15
    145c:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    145e:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1460:	6298      	str	r0, [r3, #40]	; 0x28
    1462:	4c2a      	ldr	r4, [pc, #168]	; (150c <system_init+0xe0>)
    1464:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1466:	3501      	adds	r5, #1
    1468:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    146a:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    146c:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    146e:	2480      	movs	r4, #128	; 0x80
    1470:	0524      	lsls	r4, r4, #20
    1472:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1474:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1476:	6298      	str	r0, [r3, #40]	; 0x28
    1478:	4c25      	ldr	r4, [pc, #148]	; (1510 <system_init+0xe4>)
    147a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    147c:	3505      	adds	r5, #5
    147e:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1480:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1482:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1484:	2480      	movs	r4, #128	; 0x80
    1486:	0564      	lsls	r4, r4, #21
    1488:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    148a:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    148c:	6298      	str	r0, [r3, #40]	; 0x28
    148e:	4a21      	ldr	r2, [pc, #132]	; (1514 <system_init+0xe8>)
    1490:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1492:	205c      	movs	r0, #92	; 0x5c
    1494:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1496:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1498:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);

	SPI_MEMORIES_init();
    149a:	4b1f      	ldr	r3, [pc, #124]	; (1518 <system_init+0xec>)
    149c:	4798      	blx	r3

	CALENDAR_init();
    149e:	4b1f      	ldr	r3, [pc, #124]	; (151c <system_init+0xf0>)
    14a0:	4798      	blx	r3
		PM->APBCMASK.reg |= 1 << peripheral;
    14a2:	4c1f      	ldr	r4, [pc, #124]	; (1520 <system_init+0xf4>)
    14a4:	6a22      	ldr	r2, [r4, #32]
    14a6:	2380      	movs	r3, #128	; 0x80
    14a8:	011b      	lsls	r3, r3, #4
    14aa:	4313      	orrs	r3, r2
    14ac:	6223      	str	r3, [r4, #32]
    14ae:	4f1d      	ldr	r7, [pc, #116]	; (1524 <system_init+0xf8>)
    14b0:	4b1d      	ldr	r3, [pc, #116]	; (1528 <system_init+0xfc>)
    14b2:	807b      	strh	r3, [r7, #2]
	timer_init(&TIMER_INTERFACE, TC3, _tc_get_timer());
    14b4:	4e1d      	ldr	r6, [pc, #116]	; (152c <system_init+0x100>)
    14b6:	47b0      	blx	r6
    14b8:	0002      	movs	r2, r0
    14ba:	491d      	ldr	r1, [pc, #116]	; (1530 <system_init+0x104>)
    14bc:	481d      	ldr	r0, [pc, #116]	; (1534 <system_init+0x108>)
    14be:	4d1e      	ldr	r5, [pc, #120]	; (1538 <system_init+0x10c>)
    14c0:	47a8      	blx	r5
    14c2:	6a22      	ldr	r2, [r4, #32]
    14c4:	2380      	movs	r3, #128	; 0x80
    14c6:	015b      	lsls	r3, r3, #5
    14c8:	4313      	orrs	r3, r2
    14ca:	6223      	str	r3, [r4, #32]
    14cc:	4b1b      	ldr	r3, [pc, #108]	; (153c <system_init+0x110>)
    14ce:	4698      	mov	r8, r3
    14d0:	807b      	strh	r3, [r7, #2]
	timer_init(&TIMER_CALENDAR, TC4, _tc_get_timer());
    14d2:	47b0      	blx	r6
    14d4:	0002      	movs	r2, r0
    14d6:	491a      	ldr	r1, [pc, #104]	; (1540 <system_init+0x114>)
    14d8:	481a      	ldr	r0, [pc, #104]	; (1544 <system_init+0x118>)
    14da:	47a8      	blx	r5
    14dc:	6a22      	ldr	r2, [r4, #32]
    14de:	2380      	movs	r3, #128	; 0x80
    14e0:	019b      	lsls	r3, r3, #6
    14e2:	4313      	orrs	r3, r2
    14e4:	6223      	str	r3, [r4, #32]
    14e6:	4643      	mov	r3, r8
    14e8:	807b      	strh	r3, [r7, #2]
	timer_init(&TIMER_TERMINAL, TC5, _tc_get_timer());
    14ea:	47b0      	blx	r6
    14ec:	0002      	movs	r2, r0
    14ee:	4916      	ldr	r1, [pc, #88]	; (1548 <system_init+0x11c>)
    14f0:	4816      	ldr	r0, [pc, #88]	; (154c <system_init+0x120>)
    14f2:	47a8      	blx	r5

	TIMER_INTERFACE_init();
	TIMER_CALENDAR_init();
	TIMER_TERMINAL_init();

	USB_DEVICE_INSTANCE_init();
    14f4:	4b16      	ldr	r3, [pc, #88]	; (1550 <system_init+0x124>)
    14f6:	4798      	blx	r3
}
    14f8:	bc04      	pop	{r2}
    14fa:	4690      	mov	r8, r2
    14fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	00002225 	.word	0x00002225
    1504:	41004400 	.word	0x41004400
    1508:	c0000020 	.word	0xc0000020
    150c:	c0000040 	.word	0xc0000040
    1510:	c0000800 	.word	0xc0000800
    1514:	c0001000 	.word	0xc0001000
    1518:	000012f9 	.word	0x000012f9
    151c:	00001341 	.word	0x00001341
    1520:	40000400 	.word	0x40000400
    1524:	40000c00 	.word	0x40000c00
    1528:	0000431b 	.word	0x0000431b
    152c:	000028cb 	.word	0x000028cb
    1530:	42002c00 	.word	0x42002c00
    1534:	20000c04 	.word	0x20000c04
    1538:	000018d5 	.word	0x000018d5
    153c:	0000431c 	.word	0x0000431c
    1540:	42003000 	.word	0x42003000
    1544:	20000c3c 	.word	0x20000c3c
    1548:	42003400 	.word	0x42003400
    154c:	20000c20 	.word	0x20000c20
    1550:	00001411 	.word	0x00001411

00001554 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    1554:	b570      	push	{r4, r5, r6, lr}
    1556:	0004      	movs	r4, r0
    1558:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
    155a:	1e43      	subs	r3, r0, #1
    155c:	4198      	sbcs	r0, r3
    155e:	b2c0      	uxtb	r0, r0
    1560:	22e0      	movs	r2, #224	; 0xe0
    1562:	0052      	lsls	r2, r2, #1
    1564:	4909      	ldr	r1, [pc, #36]	; (158c <calendar_init+0x38>)
    1566:	4b0a      	ldr	r3, [pc, #40]	; (1590 <calendar_init+0x3c>)
    1568:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    156a:	6823      	ldr	r3, [r4, #0]
    156c:	42ab      	cmp	r3, r5
    156e:	d008      	beq.n	1582 <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
    1570:	2b00      	cmp	r3, #0
    1572:	d108      	bne.n	1586 <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
    1574:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
    1576:	0020      	movs	r0, r4
    1578:	4b06      	ldr	r3, [pc, #24]	; (1594 <calendar_init+0x40>)
    157a:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
    157c:	4b06      	ldr	r3, [pc, #24]	; (1598 <calendar_init+0x44>)
    157e:	6163      	str	r3, [r4, #20]

	return ret;
}
    1580:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NONE;
    1582:	2000      	movs	r0, #0
    1584:	e7fc      	b.n	1580 <calendar_init+0x2c>
		return ERR_ALREADY_INITIALIZED;
    1586:	2012      	movs	r0, #18
    1588:	4240      	negs	r0, r0
    158a:	e7f9      	b.n	1580 <calendar_init+0x2c>
    158c:	00004e00 	.word	0x00004e00
    1590:	000020d5 	.word	0x000020d5
    1594:	00002325 	.word	0x00002325
    1598:	000007b2 	.word	0x000007b2

0000159c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    159c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    159e:	4b04      	ldr	r3, [pc, #16]	; (15b0 <delay_us+0x14>)
    15a0:	681c      	ldr	r4, [r3, #0]
    15a2:	4b04      	ldr	r3, [pc, #16]	; (15b4 <delay_us+0x18>)
    15a4:	4798      	blx	r3
    15a6:	0001      	movs	r1, r0
    15a8:	0020      	movs	r0, r4
    15aa:	4b03      	ldr	r3, [pc, #12]	; (15b8 <delay_us+0x1c>)
    15ac:	4798      	blx	r3
}
    15ae:	bd10      	pop	{r4, pc}
    15b0:	20000710 	.word	0x20000710
    15b4:	000021e1 	.word	0x000021e1
    15b8:	0000221d 	.word	0x0000221d

000015bc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    15bc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    15be:	4b04      	ldr	r3, [pc, #16]	; (15d0 <delay_ms+0x14>)
    15c0:	681c      	ldr	r4, [r3, #0]
    15c2:	4b04      	ldr	r3, [pc, #16]	; (15d4 <delay_ms+0x18>)
    15c4:	4798      	blx	r3
    15c6:	0001      	movs	r1, r0
    15c8:	0020      	movs	r0, r4
    15ca:	4b03      	ldr	r3, [pc, #12]	; (15d8 <delay_ms+0x1c>)
    15cc:	4798      	blx	r3
}
    15ce:	bd10      	pop	{r4, pc}
    15d0:	20000710 	.word	0x20000710
    15d4:	000021fd 	.word	0x000021fd
    15d8:	0000221d 	.word	0x0000221d

000015dc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    15dc:	b570      	push	{r4, r5, r6, lr}
    15de:	0006      	movs	r6, r0
    15e0:	000c      	movs	r4, r1
    15e2:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    15e4:	2800      	cmp	r0, #0
    15e6:	d00d      	beq.n	1604 <io_write+0x28>
    15e8:	0008      	movs	r0, r1
    15ea:	1e43      	subs	r3, r0, #1
    15ec:	4198      	sbcs	r0, r3
    15ee:	b2c0      	uxtb	r0, r0
    15f0:	2234      	movs	r2, #52	; 0x34
    15f2:	4905      	ldr	r1, [pc, #20]	; (1608 <io_write+0x2c>)
    15f4:	4b05      	ldr	r3, [pc, #20]	; (160c <io_write+0x30>)
    15f6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    15f8:	6833      	ldr	r3, [r6, #0]
    15fa:	002a      	movs	r2, r5
    15fc:	0021      	movs	r1, r4
    15fe:	0030      	movs	r0, r6
    1600:	4798      	blx	r3
}
    1602:	bd70      	pop	{r4, r5, r6, pc}
    1604:	2000      	movs	r0, #0
    1606:	e7f3      	b.n	15f0 <io_write+0x14>
    1608:	00004e1c 	.word	0x00004e1c
    160c:	000020d5 	.word	0x000020d5

00001610 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1610:	b570      	push	{r4, r5, r6, lr}
    1612:	0006      	movs	r6, r0
    1614:	000c      	movs	r4, r1
    1616:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    1618:	2800      	cmp	r0, #0
    161a:	d00d      	beq.n	1638 <io_read+0x28>
    161c:	0008      	movs	r0, r1
    161e:	1e43      	subs	r3, r0, #1
    1620:	4198      	sbcs	r0, r3
    1622:	b2c0      	uxtb	r0, r0
    1624:	223d      	movs	r2, #61	; 0x3d
    1626:	4905      	ldr	r1, [pc, #20]	; (163c <io_read+0x2c>)
    1628:	4b05      	ldr	r3, [pc, #20]	; (1640 <io_read+0x30>)
    162a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    162c:	6873      	ldr	r3, [r6, #4]
    162e:	002a      	movs	r2, r5
    1630:	0021      	movs	r1, r4
    1632:	0030      	movs	r0, r6
    1634:	4798      	blx	r3
}
    1636:	bd70      	pop	{r4, r5, r6, pc}
    1638:	2000      	movs	r0, #0
    163a:	e7f3      	b.n	1624 <io_read+0x14>
    163c:	00004e1c 	.word	0x00004e1c
    1640:	000020d5 	.word	0x000020d5

00001644 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1644:	b570      	push	{r4, r5, r6, lr}
    1646:	0004      	movs	r4, r0
    1648:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    164a:	2800      	cmp	r0, #0
    164c:	d016      	beq.n	167c <spi_m_sync_init+0x38>
    164e:	0008      	movs	r0, r1
    1650:	1e43      	subs	r3, r0, #1
    1652:	4198      	sbcs	r0, r3
    1654:	b2c0      	uxtb	r0, r0
    1656:	2240      	movs	r2, #64	; 0x40
    1658:	4909      	ldr	r1, [pc, #36]	; (1680 <spi_m_sync_init+0x3c>)
    165a:	4b0a      	ldr	r3, [pc, #40]	; (1684 <spi_m_sync_init+0x40>)
    165c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    165e:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1660:	1d20      	adds	r0, r4, #4
    1662:	0029      	movs	r1, r5
    1664:	4b08      	ldr	r3, [pc, #32]	; (1688 <spi_m_sync_init+0x44>)
    1666:	4798      	blx	r3

	if (rc < 0) {
    1668:	2800      	cmp	r0, #0
    166a:	db06      	blt.n	167a <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    166c:	4b07      	ldr	r3, [pc, #28]	; (168c <spi_m_sync_init+0x48>)
    166e:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1670:	4b07      	ldr	r3, [pc, #28]	; (1690 <spi_m_sync_init+0x4c>)
    1672:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    1674:	4b07      	ldr	r3, [pc, #28]	; (1694 <spi_m_sync_init+0x50>)
    1676:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    1678:	2000      	movs	r0, #0
}
    167a:	bd70      	pop	{r4, r5, r6, pc}
    167c:	2000      	movs	r0, #0
    167e:	e7ea      	b.n	1656 <spi_m_sync_init+0x12>
    1680:	00004e30 	.word	0x00004e30
    1684:	000020d5 	.word	0x000020d5
    1688:	0000240d 	.word	0x0000240d
    168c:	ffff8000 	.word	0xffff8000
    1690:	0000176d 	.word	0x0000176d
    1694:	00001731 	.word	0x00001731

00001698 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    1698:	b510      	push	{r4, lr}
    169a:	0004      	movs	r4, r0
	ASSERT(spi);
    169c:	1e43      	subs	r3, r0, #1
    169e:	4198      	sbcs	r0, r3
    16a0:	b2c0      	uxtb	r0, r0
    16a2:	2257      	movs	r2, #87	; 0x57
    16a4:	4903      	ldr	r1, [pc, #12]	; (16b4 <spi_m_sync_enable+0x1c>)
    16a6:	4b04      	ldr	r3, [pc, #16]	; (16b8 <spi_m_sync_enable+0x20>)
    16a8:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    16aa:	1d20      	adds	r0, r4, #4
    16ac:	4b03      	ldr	r3, [pc, #12]	; (16bc <spi_m_sync_enable+0x24>)
    16ae:	4798      	blx	r3
}
    16b0:	bd10      	pop	{r4, pc}
    16b2:	46c0      	nop			; (mov r8, r8)
    16b4:	00004e30 	.word	0x00004e30
    16b8:	000020d5 	.word	0x000020d5
    16bc:	00002505 	.word	0x00002505

000016c0 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    16c0:	b510      	push	{r4, lr}
    16c2:	0004      	movs	r4, r0
	ASSERT(spi);
    16c4:	1e43      	subs	r3, r0, #1
    16c6:	4198      	sbcs	r0, r3
    16c8:	b2c0      	uxtb	r0, r0
    16ca:	225d      	movs	r2, #93	; 0x5d
    16cc:	4903      	ldr	r1, [pc, #12]	; (16dc <spi_m_sync_disable+0x1c>)
    16ce:	4b04      	ldr	r3, [pc, #16]	; (16e0 <spi_m_sync_disable+0x20>)
    16d0:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    16d2:	1d20      	adds	r0, r4, #4
    16d4:	4b03      	ldr	r3, [pc, #12]	; (16e4 <spi_m_sync_disable+0x24>)
    16d6:	4798      	blx	r3
}
    16d8:	bd10      	pop	{r4, pc}
    16da:	46c0      	nop			; (mov r8, r8)
    16dc:	00004e30 	.word	0x00004e30
    16e0:	000020d5 	.word	0x000020d5
    16e4:	00002535 	.word	0x00002535

000016e8 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    16e8:	b530      	push	{r4, r5, lr}
    16ea:	b087      	sub	sp, #28
    16ec:	0004      	movs	r4, r0
    16ee:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    16f0:	2800      	cmp	r0, #0
    16f2:	d014      	beq.n	171e <spi_m_sync_transfer+0x36>
    16f4:	0008      	movs	r0, r1
    16f6:	1e43      	subs	r3, r0, #1
    16f8:	4198      	sbcs	r0, r3
    16fa:	b2c0      	uxtb	r0, r0
    16fc:	22b3      	movs	r2, #179	; 0xb3
    16fe:	4909      	ldr	r1, [pc, #36]	; (1724 <spi_m_sync_transfer+0x3c>)
    1700:	4b09      	ldr	r3, [pc, #36]	; (1728 <spi_m_sync_transfer+0x40>)
    1702:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1704:	682b      	ldr	r3, [r5, #0]
    1706:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    1708:	686b      	ldr	r3, [r5, #4]
    170a:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    170c:	68ab      	ldr	r3, [r5, #8]
    170e:	9301      	str	r3, [sp, #4]
    1710:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1712:	1d20      	adds	r0, r4, #4
    1714:	a903      	add	r1, sp, #12
    1716:	4b05      	ldr	r3, [pc, #20]	; (172c <spi_m_sync_transfer+0x44>)
    1718:	4798      	blx	r3
}
    171a:	b007      	add	sp, #28
    171c:	bd30      	pop	{r4, r5, pc}
    171e:	2000      	movs	r0, #0
    1720:	e7ec      	b.n	16fc <spi_m_sync_transfer+0x14>
    1722:	46c0      	nop			; (mov r8, r8)
    1724:	00004e30 	.word	0x00004e30
    1728:	000020d5 	.word	0x000020d5
    172c:	00002569 	.word	0x00002569

00001730 <_spi_m_sync_io_write>:
{
    1730:	b570      	push	{r4, r5, r6, lr}
    1732:	b084      	sub	sp, #16
    1734:	0004      	movs	r4, r0
    1736:	000e      	movs	r6, r1
    1738:	0015      	movs	r5, r2
	ASSERT(io);
    173a:	1e43      	subs	r3, r0, #1
    173c:	4198      	sbcs	r0, r3
    173e:	b2c0      	uxtb	r0, r0
    1740:	22a3      	movs	r2, #163	; 0xa3
    1742:	4907      	ldr	r1, [pc, #28]	; (1760 <_spi_m_sync_io_write+0x30>)
    1744:	4b07      	ldr	r3, [pc, #28]	; (1764 <_spi_m_sync_io_write+0x34>)
    1746:	4798      	blx	r3
	xfer.rxbuf = 0;
    1748:	2300      	movs	r3, #0
    174a:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    174c:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    174e:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    1750:	0020      	movs	r0, r4
    1752:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    1754:	a901      	add	r1, sp, #4
    1756:	4b04      	ldr	r3, [pc, #16]	; (1768 <_spi_m_sync_io_write+0x38>)
    1758:	4798      	blx	r3
}
    175a:	b004      	add	sp, #16
    175c:	bd70      	pop	{r4, r5, r6, pc}
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	00004e30 	.word	0x00004e30
    1764:	000020d5 	.word	0x000020d5
    1768:	000016e9 	.word	0x000016e9

0000176c <_spi_m_sync_io_read>:
{
    176c:	b570      	push	{r4, r5, r6, lr}
    176e:	b084      	sub	sp, #16
    1770:	0004      	movs	r4, r0
    1772:	000e      	movs	r6, r1
    1774:	0015      	movs	r5, r2
	ASSERT(io);
    1776:	1e43      	subs	r3, r0, #1
    1778:	4198      	sbcs	r0, r3
    177a:	b2c0      	uxtb	r0, r0
    177c:	2287      	movs	r2, #135	; 0x87
    177e:	4907      	ldr	r1, [pc, #28]	; (179c <_spi_m_sync_io_read+0x30>)
    1780:	4b07      	ldr	r3, [pc, #28]	; (17a0 <_spi_m_sync_io_read+0x34>)
    1782:	4798      	blx	r3
	xfer.rxbuf = buf;
    1784:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    1786:	2300      	movs	r3, #0
    1788:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    178a:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    178c:	0020      	movs	r0, r4
    178e:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    1790:	a901      	add	r1, sp, #4
    1792:	4b04      	ldr	r3, [pc, #16]	; (17a4 <_spi_m_sync_io_read+0x38>)
    1794:	4798      	blx	r3
}
    1796:	b004      	add	sp, #16
    1798:	bd70      	pop	{r4, r5, r6, pc}
    179a:	46c0      	nop			; (mov r8, r8)
    179c:	00004e30 	.word	0x00004e30
    17a0:	000020d5 	.word	0x000020d5
    17a4:	000016e9 	.word	0x000016e9

000017a8 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    17a8:	b570      	push	{r4, r5, r6, lr}
    17aa:	0004      	movs	r4, r0
    17ac:	000d      	movs	r5, r1
	ASSERT(spi && io);
    17ae:	2800      	cmp	r0, #0
    17b0:	d00b      	beq.n	17ca <spi_m_sync_get_io_descriptor+0x22>
    17b2:	0008      	movs	r0, r1
    17b4:	1e43      	subs	r3, r0, #1
    17b6:	4198      	sbcs	r0, r3
    17b8:	b2c0      	uxtb	r0, r0
    17ba:	22bd      	movs	r2, #189	; 0xbd
    17bc:	4904      	ldr	r1, [pc, #16]	; (17d0 <spi_m_sync_get_io_descriptor+0x28>)
    17be:	4b05      	ldr	r3, [pc, #20]	; (17d4 <spi_m_sync_get_io_descriptor+0x2c>)
    17c0:	4798      	blx	r3
	*io = &spi->io;
    17c2:	340c      	adds	r4, #12
    17c4:	602c      	str	r4, [r5, #0]
	return 0;
}
    17c6:	2000      	movs	r0, #0
    17c8:	bd70      	pop	{r4, r5, r6, pc}
    17ca:	2000      	movs	r0, #0
    17cc:	e7f5      	b.n	17ba <spi_m_sync_get_io_descriptor+0x12>
    17ce:	46c0      	nop			; (mov r8, r8)
    17d0:	00004e30 	.word	0x00004e30
    17d4:	000020d5 	.word	0x000020d5

000017d8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    17d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17da:	46ce      	mov	lr, r9
    17dc:	4647      	mov	r7, r8
    17de:	b580      	push	{r7, lr}
    17e0:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    17e2:	6803      	ldr	r3, [r0, #0]
    17e4:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    17e6:	2b00      	cmp	r3, #0
    17e8:	d005      	beq.n	17f6 <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    17ea:	688e      	ldr	r6, [r1, #8]
    17ec:	001c      	movs	r4, r3
    17ee:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    17f0:	2701      	movs	r7, #1
    17f2:	1abf      	subs	r7, r7, r2
    17f4:	e00d      	b.n	1812 <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
    17f6:	4b12      	ldr	r3, [pc, #72]	; (1840 <timer_add_timer_task+0x68>)
    17f8:	4798      	blx	r3
		return;
    17fa:	e018      	b.n	182e <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    17fc:	18fb      	adds	r3, r7, r3
    17fe:	68a0      	ldr	r0, [r4, #8]
    1800:	4680      	mov	r8, r0
    1802:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
    1804:	42b3      	cmp	r3, r6
    1806:	d20c      	bcs.n	1822 <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1808:	6823      	ldr	r3, [r4, #0]
    180a:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    180c:	2b00      	cmp	r3, #0
    180e:	d00b      	beq.n	1828 <timer_add_timer_task+0x50>
    1810:	001c      	movs	r4, r3
		if (it->time_label <= time) {
    1812:	6863      	ldr	r3, [r4, #4]
    1814:	4293      	cmp	r3, r2
    1816:	d8f1      	bhi.n	17fc <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
    1818:	68a0      	ldr	r0, [r4, #8]
    181a:	4680      	mov	r8, r0
    181c:	4443      	add	r3, r8
    181e:	1a9b      	subs	r3, r3, r2
    1820:	e7f0      	b.n	1804 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
    1822:	45a4      	cmp	ip, r4
    1824:	d007      	beq.n	1836 <timer_add_timer_task+0x5e>
    1826:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1828:	0020      	movs	r0, r4
    182a:	4b06      	ldr	r3, [pc, #24]	; (1844 <timer_add_timer_task+0x6c>)
    182c:	4798      	blx	r3
	}
}
    182e:	bc0c      	pop	{r2, r3}
    1830:	4690      	mov	r8, r2
    1832:	4699      	mov	r9, r3
    1834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1836:	4648      	mov	r0, r9
    1838:	4b01      	ldr	r3, [pc, #4]	; (1840 <timer_add_timer_task+0x68>)
    183a:	4798      	blx	r3
    183c:	e7f7      	b.n	182e <timer_add_timer_task+0x56>
    183e:	46c0      	nop			; (mov r8, r8)
    1840:	00002101 	.word	0x00002101
    1844:	0000212d 	.word	0x0000212d

00001848 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1848:	b5f0      	push	{r4, r5, r6, r7, lr}
    184a:	46c6      	mov	lr, r8
    184c:	b500      	push	{lr}
    184e:	b082      	sub	sp, #8
    1850:	0007      	movs	r7, r0
	return (void *)list->head;
    1852:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1854:	6903      	ldr	r3, [r0, #16]
    1856:	3301      	adds	r3, #1
    1858:	4698      	mov	r8, r3
    185a:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    185c:	7e03      	ldrb	r3, [r0, #24]
    185e:	07db      	lsls	r3, r3, #31
    1860:	d411      	bmi.n	1886 <timer_process_counted+0x3e>
    1862:	7e03      	ldrb	r3, [r0, #24]
    1864:	079b      	lsls	r3, r3, #30
    1866:	d40e      	bmi.n	1886 <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1868:	2c00      	cmp	r4, #0
    186a:	d010      	beq.n	188e <timer_process_counted+0x46>
    186c:	4643      	mov	r3, r8
    186e:	6862      	ldr	r2, [r4, #4]
    1870:	1a9b      	subs	r3, r3, r2
    1872:	68a2      	ldr	r2, [r4, #8]
    1874:	4293      	cmp	r3, r2
    1876:	d30a      	bcc.n	188e <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1878:	2314      	movs	r3, #20
    187a:	469c      	mov	ip, r3
    187c:	4484      	add	ip, r0
    187e:	4663      	mov	r3, ip
    1880:	9301      	str	r3, [sp, #4]
    1882:	4e12      	ldr	r6, [pc, #72]	; (18cc <timer_process_counted+0x84>)
    1884:	e014      	b.n	18b0 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1886:	7e3b      	ldrb	r3, [r7, #24]
    1888:	2202      	movs	r2, #2
    188a:	4313      	orrs	r3, r2
    188c:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    188e:	b002      	add	sp, #8
    1890:	bc04      	pop	{r2}
    1892:	4690      	mov	r8, r2
    1894:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1896:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
    1898:	68e3      	ldr	r3, [r4, #12]
    189a:	0020      	movs	r0, r4
    189c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    189e:	2d00      	cmp	r5, #0
    18a0:	d0f5      	beq.n	188e <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    18a2:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    18a4:	4643      	mov	r3, r8
    18a6:	686a      	ldr	r2, [r5, #4]
    18a8:	1a9b      	subs	r3, r3, r2
    18aa:	68aa      	ldr	r2, [r5, #8]
    18ac:	4293      	cmp	r3, r2
    18ae:	d3ee      	bcc.n	188e <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
    18b0:	9801      	ldr	r0, [sp, #4]
    18b2:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
    18b4:	7c23      	ldrb	r3, [r4, #16]
    18b6:	2b01      	cmp	r3, #1
    18b8:	d1ed      	bne.n	1896 <timer_process_counted+0x4e>
			tmp->time_label = time;
    18ba:	4643      	mov	r3, r8
    18bc:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    18be:	4642      	mov	r2, r8
    18c0:	0021      	movs	r1, r4
    18c2:	9801      	ldr	r0, [sp, #4]
    18c4:	4b02      	ldr	r3, [pc, #8]	; (18d0 <timer_process_counted+0x88>)
    18c6:	4798      	blx	r3
    18c8:	e7e5      	b.n	1896 <timer_process_counted+0x4e>
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	00002175 	.word	0x00002175
    18d0:	000017d9 	.word	0x000017d9

000018d4 <timer_init>:
{
    18d4:	b570      	push	{r4, r5, r6, lr}
    18d6:	0005      	movs	r5, r0
    18d8:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    18da:	2800      	cmp	r0, #0
    18dc:	d011      	beq.n	1902 <timer_init+0x2e>
    18de:	0008      	movs	r0, r1
    18e0:	1e43      	subs	r3, r0, #1
    18e2:	4198      	sbcs	r0, r3
    18e4:	b2c0      	uxtb	r0, r0
    18e6:	223b      	movs	r2, #59	; 0x3b
    18e8:	4907      	ldr	r1, [pc, #28]	; (1908 <timer_init+0x34>)
    18ea:	4b08      	ldr	r3, [pc, #32]	; (190c <timer_init+0x38>)
    18ec:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    18ee:	0021      	movs	r1, r4
    18f0:	0028      	movs	r0, r5
    18f2:	4b07      	ldr	r3, [pc, #28]	; (1910 <timer_init+0x3c>)
    18f4:	4798      	blx	r3
	descr->time                           = 0;
    18f6:	2300      	movs	r3, #0
    18f8:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    18fa:	4b06      	ldr	r3, [pc, #24]	; (1914 <timer_init+0x40>)
    18fc:	602b      	str	r3, [r5, #0]
}
    18fe:	2000      	movs	r0, #0
    1900:	bd70      	pop	{r4, r5, r6, pc}
    1902:	2000      	movs	r0, #0
    1904:	e7ef      	b.n	18e6 <timer_init+0x12>
    1906:	46c0      	nop			; (mov r8, r8)
    1908:	00004e4c 	.word	0x00004e4c
    190c:	000020d5 	.word	0x000020d5
    1910:	00002755 	.word	0x00002755
    1914:	00001849 	.word	0x00001849

00001918 <timer_start>:
{
    1918:	b510      	push	{r4, lr}
    191a:	0004      	movs	r4, r0
	ASSERT(descr);
    191c:	1e43      	subs	r3, r0, #1
    191e:	4198      	sbcs	r0, r3
    1920:	b2c0      	uxtb	r0, r0
    1922:	2253      	movs	r2, #83	; 0x53
    1924:	4907      	ldr	r1, [pc, #28]	; (1944 <timer_start+0x2c>)
    1926:	4b08      	ldr	r3, [pc, #32]	; (1948 <timer_start+0x30>)
    1928:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    192a:	0020      	movs	r0, r4
    192c:	4b07      	ldr	r3, [pc, #28]	; (194c <timer_start+0x34>)
    192e:	4798      	blx	r3
    1930:	2800      	cmp	r0, #0
    1932:	d104      	bne.n	193e <timer_start+0x26>
	_timer_start(&descr->device);
    1934:	0020      	movs	r0, r4
    1936:	4b06      	ldr	r3, [pc, #24]	; (1950 <timer_start+0x38>)
    1938:	4798      	blx	r3
	return ERR_NONE;
    193a:	2000      	movs	r0, #0
}
    193c:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    193e:	2011      	movs	r0, #17
    1940:	4240      	negs	r0, r0
    1942:	e7fb      	b.n	193c <timer_start+0x24>
    1944:	00004e4c 	.word	0x00004e4c
    1948:	000020d5 	.word	0x000020d5
    194c:	000028c1 	.word	0x000028c1
    1950:	000028a9 	.word	0x000028a9

00001954 <timer_stop>:
{
    1954:	b510      	push	{r4, lr}
    1956:	0004      	movs	r4, r0
	ASSERT(descr);
    1958:	1e43      	subs	r3, r0, #1
    195a:	4198      	sbcs	r0, r3
    195c:	b2c0      	uxtb	r0, r0
    195e:	2261      	movs	r2, #97	; 0x61
    1960:	4907      	ldr	r1, [pc, #28]	; (1980 <timer_stop+0x2c>)
    1962:	4b08      	ldr	r3, [pc, #32]	; (1984 <timer_stop+0x30>)
    1964:	4798      	blx	r3
	if (!_timer_is_started(&descr->device)) {
    1966:	0020      	movs	r0, r4
    1968:	4b07      	ldr	r3, [pc, #28]	; (1988 <timer_stop+0x34>)
    196a:	4798      	blx	r3
    196c:	2800      	cmp	r0, #0
    196e:	d004      	beq.n	197a <timer_stop+0x26>
	_timer_stop(&descr->device);
    1970:	0020      	movs	r0, r4
    1972:	4b06      	ldr	r3, [pc, #24]	; (198c <timer_stop+0x38>)
    1974:	4798      	blx	r3
	return ERR_NONE;
    1976:	2000      	movs	r0, #0
}
    1978:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    197a:	2011      	movs	r0, #17
    197c:	4240      	negs	r0, r0
    197e:	e7fb      	b.n	1978 <timer_stop+0x24>
    1980:	00004e4c 	.word	0x00004e4c
    1984:	000020d5 	.word	0x000020d5
    1988:	000028c1 	.word	0x000028c1
    198c:	000028b5 	.word	0x000028b5

00001990 <timer_add_task>:
{
    1990:	b570      	push	{r4, r5, r6, lr}
    1992:	b082      	sub	sp, #8
    1994:	0004      	movs	r4, r0
    1996:	000d      	movs	r5, r1
	ASSERT(descr && task);
    1998:	2800      	cmp	r0, #0
    199a:	d024      	beq.n	19e6 <timer_add_task+0x56>
    199c:	0008      	movs	r0, r1
    199e:	1e43      	subs	r3, r0, #1
    19a0:	4198      	sbcs	r0, r3
    19a2:	b2c0      	uxtb	r0, r0
    19a4:	227a      	movs	r2, #122	; 0x7a
    19a6:	491e      	ldr	r1, [pc, #120]	; (1a20 <timer_add_task+0x90>)
    19a8:	4b1e      	ldr	r3, [pc, #120]	; (1a24 <timer_add_task+0x94>)
    19aa:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    19ac:	7e23      	ldrb	r3, [r4, #24]
    19ae:	2201      	movs	r2, #1
    19b0:	4313      	orrs	r3, r2
    19b2:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    19b4:	0026      	movs	r6, r4
    19b6:	3614      	adds	r6, #20
    19b8:	0029      	movs	r1, r5
    19ba:	0030      	movs	r0, r6
    19bc:	4b1a      	ldr	r3, [pc, #104]	; (1a28 <timer_add_task+0x98>)
    19be:	4798      	blx	r3
    19c0:	2800      	cmp	r0, #0
    19c2:	d112      	bne.n	19ea <timer_add_task+0x5a>
	task->time_label = descr->time;
    19c4:	6923      	ldr	r3, [r4, #16]
    19c6:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    19c8:	6922      	ldr	r2, [r4, #16]
    19ca:	0029      	movs	r1, r5
    19cc:	0030      	movs	r0, r6
    19ce:	4b17      	ldr	r3, [pc, #92]	; (1a2c <timer_add_task+0x9c>)
    19d0:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    19d2:	7e23      	ldrb	r3, [r4, #24]
    19d4:	2201      	movs	r2, #1
    19d6:	4393      	bics	r3, r2
    19d8:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    19da:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
    19dc:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    19de:	079b      	lsls	r3, r3, #30
    19e0:	d40f      	bmi.n	1a02 <timer_add_task+0x72>
}
    19e2:	b002      	add	sp, #8
    19e4:	bd70      	pop	{r4, r5, r6, pc}
    19e6:	2000      	movs	r0, #0
    19e8:	e7dc      	b.n	19a4 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    19ea:	7e23      	ldrb	r3, [r4, #24]
    19ec:	2201      	movs	r2, #1
    19ee:	4393      	bics	r3, r2
    19f0:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    19f2:	327e      	adds	r2, #126	; 0x7e
    19f4:	490a      	ldr	r1, [pc, #40]	; (1a20 <timer_add_task+0x90>)
    19f6:	2000      	movs	r0, #0
    19f8:	4b0a      	ldr	r3, [pc, #40]	; (1a24 <timer_add_task+0x94>)
    19fa:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    19fc:	2012      	movs	r0, #18
    19fe:	4240      	negs	r0, r0
    1a00:	e7ef      	b.n	19e2 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    1a02:	a801      	add	r0, sp, #4
    1a04:	4b0a      	ldr	r3, [pc, #40]	; (1a30 <timer_add_task+0xa0>)
    1a06:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1a08:	7e23      	ldrb	r3, [r4, #24]
    1a0a:	2202      	movs	r2, #2
    1a0c:	4393      	bics	r3, r2
    1a0e:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    1a10:	0020      	movs	r0, r4
    1a12:	4b08      	ldr	r3, [pc, #32]	; (1a34 <timer_add_task+0xa4>)
    1a14:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1a16:	a801      	add	r0, sp, #4
    1a18:	4b07      	ldr	r3, [pc, #28]	; (1a38 <timer_add_task+0xa8>)
    1a1a:	4798      	blx	r3
	return ERR_NONE;
    1a1c:	2000      	movs	r0, #0
    1a1e:	e7e0      	b.n	19e2 <timer_add_task+0x52>
    1a20:	00004e4c 	.word	0x00004e4c
    1a24:	000020d5 	.word	0x000020d5
    1a28:	000020dd 	.word	0x000020dd
    1a2c:	000017d9 	.word	0x000017d9
    1a30:	000048d1 	.word	0x000048d1
    1a34:	000028d1 	.word	0x000028d1
    1a38:	000048df 	.word	0x000048df

00001a3c <timer_remove_task>:
{
    1a3c:	b570      	push	{r4, r5, r6, lr}
    1a3e:	b082      	sub	sp, #8
    1a40:	0004      	movs	r4, r0
    1a42:	000d      	movs	r5, r1
	ASSERT(descr && task);
    1a44:	2800      	cmp	r0, #0
    1a46:	d021      	beq.n	1a8c <timer_remove_task+0x50>
    1a48:	0008      	movs	r0, r1
    1a4a:	1e43      	subs	r3, r0, #1
    1a4c:	4198      	sbcs	r0, r3
    1a4e:	b2c0      	uxtb	r0, r0
    1a50:	2295      	movs	r2, #149	; 0x95
    1a52:	491c      	ldr	r1, [pc, #112]	; (1ac4 <timer_remove_task+0x88>)
    1a54:	4b1c      	ldr	r3, [pc, #112]	; (1ac8 <timer_remove_task+0x8c>)
    1a56:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1a58:	7e23      	ldrb	r3, [r4, #24]
    1a5a:	2201      	movs	r2, #1
    1a5c:	4313      	orrs	r3, r2
    1a5e:	7623      	strb	r3, [r4, #24]
	if (!is_list_element(&descr->tasks, task)) {
    1a60:	0026      	movs	r6, r4
    1a62:	3614      	adds	r6, #20
    1a64:	0029      	movs	r1, r5
    1a66:	0030      	movs	r0, r6
    1a68:	4b18      	ldr	r3, [pc, #96]	; (1acc <timer_remove_task+0x90>)
    1a6a:	4798      	blx	r3
    1a6c:	2800      	cmp	r0, #0
    1a6e:	d00f      	beq.n	1a90 <timer_remove_task+0x54>
	list_delete_element(&descr->tasks, task);
    1a70:	0029      	movs	r1, r5
    1a72:	0030      	movs	r0, r6
    1a74:	4b16      	ldr	r3, [pc, #88]	; (1ad0 <timer_remove_task+0x94>)
    1a76:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1a78:	7e23      	ldrb	r3, [r4, #24]
    1a7a:	2201      	movs	r2, #1
    1a7c:	4393      	bics	r3, r2
    1a7e:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1a80:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
    1a82:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    1a84:	079b      	lsls	r3, r3, #30
    1a86:	d40e      	bmi.n	1aa6 <timer_remove_task+0x6a>
}
    1a88:	b002      	add	sp, #8
    1a8a:	bd70      	pop	{r4, r5, r6, pc}
    1a8c:	2000      	movs	r0, #0
    1a8e:	e7df      	b.n	1a50 <timer_remove_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1a90:	7e23      	ldrb	r3, [r4, #24]
    1a92:	2201      	movs	r2, #1
    1a94:	4393      	bics	r3, r2
    1a96:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    1a98:	3299      	adds	r2, #153	; 0x99
    1a9a:	490a      	ldr	r1, [pc, #40]	; (1ac4 <timer_remove_task+0x88>)
    1a9c:	4b0a      	ldr	r3, [pc, #40]	; (1ac8 <timer_remove_task+0x8c>)
    1a9e:	4798      	blx	r3
		return ERR_NOT_FOUND;
    1aa0:	200a      	movs	r0, #10
    1aa2:	4240      	negs	r0, r0
    1aa4:	e7f0      	b.n	1a88 <timer_remove_task+0x4c>
		CRITICAL_SECTION_ENTER()
    1aa6:	a801      	add	r0, sp, #4
    1aa8:	4b0a      	ldr	r3, [pc, #40]	; (1ad4 <timer_remove_task+0x98>)
    1aaa:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    1aac:	7e23      	ldrb	r3, [r4, #24]
    1aae:	2202      	movs	r2, #2
    1ab0:	4393      	bics	r3, r2
    1ab2:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    1ab4:	0020      	movs	r0, r4
    1ab6:	4b08      	ldr	r3, [pc, #32]	; (1ad8 <timer_remove_task+0x9c>)
    1ab8:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    1aba:	a801      	add	r0, sp, #4
    1abc:	4b07      	ldr	r3, [pc, #28]	; (1adc <timer_remove_task+0xa0>)
    1abe:	4798      	blx	r3
	return ERR_NONE;
    1ac0:	2000      	movs	r0, #0
    1ac2:	e7e1      	b.n	1a88 <timer_remove_task+0x4c>
    1ac4:	00004e4c 	.word	0x00004e4c
    1ac8:	000020d5 	.word	0x000020d5
    1acc:	000020dd 	.word	0x000020dd
    1ad0:	00002183 	.word	0x00002183
    1ad4:	000048d1 	.word	0x000048d1
    1ad8:	000028d1 	.word	0x000028d1
    1adc:	000048df 	.word	0x000048df

00001ae0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    1ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ae2:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1ae4:	4b0e      	ldr	r3, [pc, #56]	; (1b20 <_usb_d_find_ep+0x40>)
    1ae6:	785a      	ldrb	r2, [r3, #1]
    1ae8:	4290      	cmp	r0, r2
    1aea:	d017      	beq.n	1b1c <_usb_d_find_ep+0x3c>
    1aec:	2300      	movs	r3, #0
    1aee:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1af0:	4f0b      	ldr	r7, [pc, #44]	; (1b20 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1af2:	260f      	movs	r6, #15
    1af4:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1af6:	003d      	movs	r5, r7
    1af8:	e008      	b.n	1b0c <_usb_d_find_ep+0x2c>
    1afa:	3001      	adds	r0, #1
    1afc:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1afe:	2804      	cmp	r0, #4
    1b00:	d00a      	beq.n	1b18 <_usb_d_find_ep+0x38>
    1b02:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    1b04:	18ea      	adds	r2, r5, r3
    1b06:	7852      	ldrb	r2, [r2, #1]
    1b08:	42a2      	cmp	r2, r4
    1b0a:	d006      	beq.n	1b1a <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    1b0c:	5dd9      	ldrb	r1, [r3, r7]
    1b0e:	2900      	cmp	r1, #0
    1b10:	d1f3      	bne.n	1afa <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    1b12:	4296      	cmp	r6, r2
    1b14:	d1f1      	bne.n	1afa <_usb_d_find_ep+0x1a>
    1b16:	e000      	b.n	1b1a <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
    1b18:	3805      	subs	r0, #5
}
    1b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1b1c:	2000      	movs	r0, #0
    1b1e:	e7fc      	b.n	1b1a <_usb_d_find_ep+0x3a>
    1b20:	20000714 	.word	0x20000714

00001b24 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    1b24:	2000      	movs	r0, #0
    1b26:	4770      	bx	lr

00001b28 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    1b28:	b570      	push	{r4, r5, r6, lr}
    1b2a:	0004      	movs	r4, r0
    1b2c:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b2e:	4b0a      	ldr	r3, [pc, #40]	; (1b58 <usb_d_cb_trans_more+0x30>)
    1b30:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1b32:	0142      	lsls	r2, r0, #5
    1b34:	4b09      	ldr	r3, [pc, #36]	; (1b5c <usb_d_cb_trans_more+0x34>)
    1b36:	189b      	adds	r3, r3, r2
    1b38:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    1b3a:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    1b3c:	2a03      	cmp	r2, #3
    1b3e:	d001      	beq.n	1b44 <usb_d_cb_trans_more+0x1c>
}
    1b40:	0018      	movs	r0, r3
    1b42:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
    1b44:	0140      	lsls	r0, r0, #5
    1b46:	4b05      	ldr	r3, [pc, #20]	; (1b5c <usb_d_cb_trans_more+0x34>)
    1b48:	1818      	adds	r0, r3, r0
    1b4a:	6983      	ldr	r3, [r0, #24]
    1b4c:	0029      	movs	r1, r5
    1b4e:	0020      	movs	r0, r4
    1b50:	4798      	blx	r3
    1b52:	0003      	movs	r3, r0
    1b54:	e7f4      	b.n	1b40 <usb_d_cb_trans_more+0x18>
    1b56:	46c0      	nop			; (mov r8, r8)
    1b58:	00001ae1 	.word	0x00001ae1
    1b5c:	20000714 	.word	0x20000714

00001b60 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    1b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b62:	b085      	sub	sp, #20
    1b64:	0005      	movs	r5, r0
    1b66:	000f      	movs	r7, r1
    1b68:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    1b6a:	4b51      	ldr	r3, [pc, #324]	; (1cb0 <_usb_d_cb_trans_done+0x150>)
    1b6c:	4798      	blx	r3
    1b6e:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    1b70:	2f00      	cmp	r7, #0
    1b72:	d162      	bne.n	1c3a <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
    1b74:	4b4f      	ldr	r3, [pc, #316]	; (1cb4 <_usb_d_cb_trans_done+0x154>)
    1b76:	0142      	lsls	r2, r0, #5
    1b78:	1899      	adds	r1, r3, r2
    1b7a:	2000      	movs	r0, #0
    1b7c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1b7e:	5cd3      	ldrb	r3, [r2, r3]
    1b80:	2b00      	cmp	r3, #0
    1b82:	d00e      	beq.n	1ba2 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1b84:	0162      	lsls	r2, r4, #5
    1b86:	4b4b      	ldr	r3, [pc, #300]	; (1cb4 <_usb_d_cb_trans_done+0x154>)
    1b88:	189b      	adds	r3, r3, r2
    1b8a:	2201      	movs	r2, #1
    1b8c:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    1b8e:	0164      	lsls	r4, r4, #5
    1b90:	4b48      	ldr	r3, [pc, #288]	; (1cb4 <_usb_d_cb_trans_done+0x154>)
    1b92:	191c      	adds	r4, r3, r4
    1b94:	78e1      	ldrb	r1, [r4, #3]
    1b96:	69e3      	ldr	r3, [r4, #28]
    1b98:	0032      	movs	r2, r6
    1b9a:	0028      	movs	r0, r5
    1b9c:	4798      	blx	r3
}
    1b9e:	b005      	add	sp, #20
    1ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    1ba2:	788b      	ldrb	r3, [r1, #2]
    1ba4:	2b03      	cmp	r3, #3
    1ba6:	d00c      	beq.n	1bc2 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    1ba8:	4b42      	ldr	r3, [pc, #264]	; (1cb4 <_usb_d_cb_trans_done+0x154>)
    1baa:	0162      	lsls	r2, r4, #5
    1bac:	320c      	adds	r2, #12
    1bae:	189a      	adds	r2, r3, r2
    1bb0:	0164      	lsls	r4, r4, #5
    1bb2:	191c      	adds	r4, r3, r4
    1bb4:	7860      	ldrb	r0, [r4, #1]
    1bb6:	2100      	movs	r1, #0
    1bb8:	69e3      	ldr	r3, [r4, #28]
    1bba:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1bbc:	2302      	movs	r3, #2
    1bbe:	70a3      	strb	r3, [r4, #2]
    1bc0:	e7ed      	b.n	1b9e <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    1bc2:	4a3c      	ldr	r2, [pc, #240]	; (1cb4 <_usb_d_cb_trans_done+0x154>)
    1bc4:	000b      	movs	r3, r1
    1bc6:	250c      	movs	r5, #12
    1bc8:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    1bca:	0161      	lsls	r1, r4, #5
    1bcc:	310c      	adds	r1, #12
    1bce:	1852      	adds	r2, r2, r1
    1bd0:	7858      	ldrb	r0, [r3, #1]
    1bd2:	69db      	ldr	r3, [r3, #28]
    1bd4:	2101      	movs	r1, #1
    1bd6:	4798      	blx	r3
		if (err) {
    1bd8:	2800      	cmp	r0, #0
    1bda:	d017      	beq.n	1c0c <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    1bdc:	0162      	lsls	r2, r4, #5
    1bde:	4b35      	ldr	r3, [pc, #212]	; (1cb4 <_usb_d_cb_trans_done+0x154>)
    1be0:	189b      	adds	r3, r3, r2
    1be2:	2205      	movs	r2, #5
    1be4:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    1be6:	3a03      	subs	r2, #3
    1be8:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    1bea:	2d00      	cmp	r5, #0
    1bec:	db09      	blt.n	1c02 <_usb_d_cb_trans_done+0xa2>
    1bee:	0164      	lsls	r4, r4, #5
    1bf0:	4b30      	ldr	r3, [pc, #192]	; (1cb4 <_usb_d_cb_trans_done+0x154>)
    1bf2:	191c      	adds	r4, r3, r4
    1bf4:	7860      	ldrb	r0, [r4, #1]
    1bf6:	2380      	movs	r3, #128	; 0x80
    1bf8:	4318      	orrs	r0, r3
    1bfa:	2101      	movs	r1, #1
    1bfc:	4b2e      	ldr	r3, [pc, #184]	; (1cb8 <_usb_d_cb_trans_done+0x158>)
    1bfe:	4798      	blx	r3
    1c00:	e7cd      	b.n	1b9e <_usb_d_cb_trans_done+0x3e>
    1c02:	0164      	lsls	r4, r4, #5
    1c04:	4b2b      	ldr	r3, [pc, #172]	; (1cb4 <_usb_d_cb_trans_done+0x154>)
    1c06:	191c      	adds	r4, r3, r4
    1c08:	7860      	ldrb	r0, [r4, #1]
    1c0a:	e7f6      	b.n	1bfa <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1c0c:	0164      	lsls	r4, r4, #5
    1c0e:	4b29      	ldr	r3, [pc, #164]	; (1cb4 <_usb_d_cb_trans_done+0x154>)
    1c10:	191c      	adds	r4, r3, r4
    1c12:	2304      	movs	r3, #4
    1c14:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    1c16:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    1c18:	2200      	movs	r2, #0
    1c1a:	9201      	str	r2, [sp, #4]
    1c1c:	9202      	str	r2, [sp, #8]
    1c1e:	2d00      	cmp	r5, #0
    1c20:	db08      	blt.n	1c34 <_usb_d_cb_trans_done+0xd4>
    1c22:	3280      	adds	r2, #128	; 0x80
    1c24:	4313      	orrs	r3, r2
    1c26:	a801      	add	r0, sp, #4
    1c28:	7203      	strb	r3, [r0, #8]
    1c2a:	2301      	movs	r3, #1
    1c2c:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    1c2e:	4b23      	ldr	r3, [pc, #140]	; (1cbc <_usb_d_cb_trans_done+0x15c>)
    1c30:	4798      	blx	r3
    1c32:	e7b4      	b.n	1b9e <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
    1c34:	220f      	movs	r2, #15
    1c36:	4013      	ands	r3, r2
    1c38:	e7f5      	b.n	1c26 <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
    1c3a:	2f01      	cmp	r7, #1
    1c3c:	d00a      	beq.n	1c54 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
    1c3e:	2f02      	cmp	r7, #2
    1c40:	d01d      	beq.n	1c7e <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
    1c42:	2f03      	cmp	r7, #3
    1c44:	d02c      	beq.n	1ca0 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    1c46:	0142      	lsls	r2, r0, #5
    1c48:	4b1a      	ldr	r3, [pc, #104]	; (1cb4 <_usb_d_cb_trans_done+0x154>)
    1c4a:	189b      	adds	r3, r3, r2
    1c4c:	2206      	movs	r2, #6
    1c4e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    1c50:	70da      	strb	r2, [r3, #3]
    1c52:	e79c      	b.n	1b8e <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
    1c54:	4b17      	ldr	r3, [pc, #92]	; (1cb4 <_usb_d_cb_trans_done+0x154>)
    1c56:	0142      	lsls	r2, r0, #5
    1c58:	1899      	adds	r1, r3, r2
    1c5a:	2002      	movs	r0, #2
    1c5c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1c5e:	5cd3      	ldrb	r3, [r2, r3]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d005      	beq.n	1c70 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    1c64:	0162      	lsls	r2, r4, #5
    1c66:	4b13      	ldr	r3, [pc, #76]	; (1cb4 <_usb_d_cb_trans_done+0x154>)
    1c68:	189b      	adds	r3, r3, r2
    1c6a:	2205      	movs	r2, #5
    1c6c:	709a      	strb	r2, [r3, #2]
    1c6e:	e78e      	b.n	1b8e <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1c70:	2202      	movs	r2, #2
    1c72:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1c74:	2100      	movs	r1, #0
    1c76:	0028      	movs	r0, r5
    1c78:	4b0f      	ldr	r3, [pc, #60]	; (1cb8 <_usb_d_cb_trans_done+0x158>)
    1c7a:	4798      	blx	r3
    1c7c:	e787      	b.n	1b8e <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    1c7e:	4b0d      	ldr	r3, [pc, #52]	; (1cb4 <_usb_d_cb_trans_done+0x154>)
    1c80:	0142      	lsls	r2, r0, #5
    1c82:	1899      	adds	r1, r3, r2
    1c84:	2004      	movs	r0, #4
    1c86:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1c88:	5cd3      	ldrb	r3, [r2, r3]
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d005      	beq.n	1c9a <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    1c8e:	0162      	lsls	r2, r4, #5
    1c90:	4b08      	ldr	r3, [pc, #32]	; (1cb4 <_usb_d_cb_trans_done+0x154>)
    1c92:	189b      	adds	r3, r3, r2
    1c94:	2201      	movs	r2, #1
    1c96:	709a      	strb	r2, [r3, #2]
    1c98:	e779      	b.n	1b8e <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    1c9a:	2302      	movs	r3, #2
    1c9c:	708b      	strb	r3, [r1, #2]
			return;
    1c9e:	e77e      	b.n	1b9e <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    1ca0:	0142      	lsls	r2, r0, #5
    1ca2:	4b04      	ldr	r3, [pc, #16]	; (1cb4 <_usb_d_cb_trans_done+0x154>)
    1ca4:	189b      	adds	r3, r3, r2
    1ca6:	2200      	movs	r2, #0
    1ca8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    1caa:	3205      	adds	r2, #5
    1cac:	70da      	strb	r2, [r3, #3]
    1cae:	e76e      	b.n	1b8e <_usb_d_cb_trans_done+0x2e>
    1cb0:	00001ae1 	.word	0x00001ae1
    1cb4:	20000714 	.word	0x20000714
    1cb8:	000035dd 	.word	0x000035dd
    1cbc:	000037b1 	.word	0x000037b1

00001cc0 <usb_d_cb_trans_setup>:
{
    1cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cc2:	46c6      	mov	lr, r8
    1cc4:	b500      	push	{lr}
    1cc6:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1cc8:	4b1d      	ldr	r3, [pc, #116]	; (1d40 <usb_d_cb_trans_setup+0x80>)
    1cca:	4798      	blx	r3
    1ccc:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
    1cce:	0145      	lsls	r5, r0, #5
    1cd0:	350c      	adds	r5, #12
    1cd2:	4b1c      	ldr	r3, [pc, #112]	; (1d44 <usb_d_cb_trans_setup+0x84>)
    1cd4:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    1cd6:	0029      	movs	r1, r5
    1cd8:	0020      	movs	r0, r4
    1cda:	4b1b      	ldr	r3, [pc, #108]	; (1d48 <usb_d_cb_trans_setup+0x88>)
    1cdc:	4798      	blx	r3
	if (n != 8) {
    1cde:	b2c0      	uxtb	r0, r0
    1ce0:	2808      	cmp	r0, #8
    1ce2:	d00a      	beq.n	1cfa <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1ce4:	2101      	movs	r1, #1
    1ce6:	0020      	movs	r0, r4
    1ce8:	4d18      	ldr	r5, [pc, #96]	; (1d4c <usb_d_cb_trans_setup+0x8c>)
    1cea:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1cec:	2080      	movs	r0, #128	; 0x80
    1cee:	4320      	orrs	r0, r4
    1cf0:	2101      	movs	r1, #1
    1cf2:	47a8      	blx	r5
}
    1cf4:	bc04      	pop	{r2}
    1cf6:	4690      	mov	r8, r2
    1cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    1cfa:	2100      	movs	r1, #0
    1cfc:	0020      	movs	r0, r4
    1cfe:	4b13      	ldr	r3, [pc, #76]	; (1d4c <usb_d_cb_trans_setup+0x8c>)
    1d00:	4698      	mov	r8, r3
    1d02:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    1d04:	2780      	movs	r7, #128	; 0x80
    1d06:	4327      	orrs	r7, r4
    1d08:	2100      	movs	r1, #0
    1d0a:	0038      	movs	r0, r7
    1d0c:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    1d0e:	0172      	lsls	r2, r6, #5
    1d10:	4b0c      	ldr	r3, [pc, #48]	; (1d44 <usb_d_cb_trans_setup+0x84>)
    1d12:	189b      	adds	r3, r3, r2
    1d14:	2201      	movs	r2, #1
    1d16:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    1d18:	695b      	ldr	r3, [r3, #20]
    1d1a:	0029      	movs	r1, r5
    1d1c:	0020      	movs	r0, r4
    1d1e:	4798      	blx	r3
    1d20:	2800      	cmp	r0, #0
    1d22:	d1e7      	bne.n	1cf4 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    1d24:	0176      	lsls	r6, r6, #5
    1d26:	4b07      	ldr	r3, [pc, #28]	; (1d44 <usb_d_cb_trans_setup+0x84>)
    1d28:	199e      	adds	r6, r3, r6
    1d2a:	2305      	movs	r3, #5
    1d2c:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    1d2e:	2101      	movs	r1, #1
    1d30:	0020      	movs	r0, r4
    1d32:	4c06      	ldr	r4, [pc, #24]	; (1d4c <usb_d_cb_trans_setup+0x8c>)
    1d34:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    1d36:	2101      	movs	r1, #1
    1d38:	0038      	movs	r0, r7
    1d3a:	47a0      	blx	r4
    1d3c:	e7da      	b.n	1cf4 <usb_d_cb_trans_setup+0x34>
    1d3e:	46c0      	nop			; (mov r8, r8)
    1d40:	00001ae1 	.word	0x00001ae1
    1d44:	20000714 	.word	0x20000714
    1d48:	00003741 	.word	0x00003741
    1d4c:	000035dd 	.word	0x000035dd

00001d50 <usb_d_init>:

int32_t usb_d_init(void)
{
    1d50:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    1d52:	4b10      	ldr	r3, [pc, #64]	; (1d94 <usb_d_init+0x44>)
    1d54:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    1d56:	2800      	cmp	r0, #0
    1d58:	db1b      	blt.n	1d92 <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    1d5a:	4c0f      	ldr	r4, [pc, #60]	; (1d98 <usb_d_init+0x48>)
    1d5c:	2280      	movs	r2, #128	; 0x80
    1d5e:	2100      	movs	r1, #0
    1d60:	0020      	movs	r0, r4
    1d62:	4b0e      	ldr	r3, [pc, #56]	; (1d9c <usb_d_init+0x4c>)
    1d64:	4798      	blx	r3
    1d66:	0023      	movs	r3, r4
    1d68:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1d6a:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1d6c:	4a0c      	ldr	r2, [pc, #48]	; (1da0 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    1d6e:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    1d70:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    1d72:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    1d74:	61da      	str	r2, [r3, #28]
    1d76:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    1d78:	42a3      	cmp	r3, r4
    1d7a:	d1f8      	bne.n	1d6e <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    1d7c:	4909      	ldr	r1, [pc, #36]	; (1da4 <usb_d_init+0x54>)
    1d7e:	2000      	movs	r0, #0
    1d80:	4c09      	ldr	r4, [pc, #36]	; (1da8 <usb_d_init+0x58>)
    1d82:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    1d84:	4909      	ldr	r1, [pc, #36]	; (1dac <usb_d_init+0x5c>)
    1d86:	2001      	movs	r0, #1
    1d88:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    1d8a:	4909      	ldr	r1, [pc, #36]	; (1db0 <usb_d_init+0x60>)
    1d8c:	2002      	movs	r0, #2
    1d8e:	47a0      	blx	r4
	return ERR_NONE;
    1d90:	2000      	movs	r0, #0
}
    1d92:	bd10      	pop	{r4, pc}
    1d94:	00002fb1 	.word	0x00002fb1
    1d98:	20000714 	.word	0x20000714
    1d9c:	00004af1 	.word	0x00004af1
    1da0:	00001b25 	.word	0x00001b25
    1da4:	00001cc1 	.word	0x00001cc1
    1da8:	00003a25 	.word	0x00003a25
    1dac:	00001b29 	.word	0x00001b29
    1db0:	00001b61 	.word	0x00001b61

00001db4 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    1db4:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    1db6:	4b01      	ldr	r3, [pc, #4]	; (1dbc <usb_d_register_callback+0x8>)
    1db8:	4798      	blx	r3
}
    1dba:	bd10      	pop	{r4, pc}
    1dbc:	00003a01 	.word	0x00003a01

00001dc0 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    1dc0:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    1dc2:	4b01      	ldr	r3, [pc, #4]	; (1dc8 <usb_d_enable+0x8>)
    1dc4:	4798      	blx	r3
}
    1dc6:	bd10      	pop	{r4, pc}
    1dc8:	00003091 	.word	0x00003091

00001dcc <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    1dcc:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    1dce:	4b01      	ldr	r3, [pc, #4]	; (1dd4 <usb_d_attach+0x8>)
    1dd0:	4798      	blx	r3
}
    1dd2:	bd10      	pop	{r4, pc}
    1dd4:	000030e1 	.word	0x000030e1

00001dd8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    1dd8:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    1dda:	4b01      	ldr	r3, [pc, #4]	; (1de0 <usb_d_set_address+0x8>)
    1ddc:	4798      	blx	r3
}
    1dde:	bd10      	pop	{r4, pc}
    1de0:	000030f1 	.word	0x000030f1

00001de4 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    1de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1de6:	0005      	movs	r5, r0
    1de8:	000e      	movs	r6, r1
    1dea:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    1dec:	4b0f      	ldr	r3, [pc, #60]	; (1e2c <usb_d_ep_init+0x48>)
    1dee:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    1df0:	2800      	cmp	r0, #0
    1df2:	da14      	bge.n	1e1e <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    1df4:	20ff      	movs	r0, #255	; 0xff
    1df6:	4b0d      	ldr	r3, [pc, #52]	; (1e2c <usb_d_ep_init+0x48>)
    1df8:	4798      	blx	r3
    1dfa:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    1dfc:	db12      	blt.n	1e24 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    1dfe:	003a      	movs	r2, r7
    1e00:	0031      	movs	r1, r6
    1e02:	0028      	movs	r0, r5
    1e04:	4b0a      	ldr	r3, [pc, #40]	; (1e30 <usb_d_ep_init+0x4c>)
    1e06:	4798      	blx	r3
	if (rc < 0) {
    1e08:	2800      	cmp	r0, #0
    1e0a:	db07      	blt.n	1e1c <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    1e0c:	4a09      	ldr	r2, [pc, #36]	; (1e34 <usb_d_ep_init+0x50>)
    1e0e:	0164      	lsls	r4, r4, #5
    1e10:	1913      	adds	r3, r2, r4
    1e12:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    1e14:	2303      	movs	r3, #3
    1e16:	401e      	ands	r6, r3
    1e18:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    1e1a:	2000      	movs	r0, #0
}
    1e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    1e1e:	2014      	movs	r0, #20
    1e20:	4240      	negs	r0, r0
    1e22:	e7fb      	b.n	1e1c <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    1e24:	2015      	movs	r0, #21
    1e26:	4240      	negs	r0, r0
    1e28:	e7f8      	b.n	1e1c <usb_d_ep_init+0x38>
    1e2a:	46c0      	nop			; (mov r8, r8)
    1e2c:	00001ae1 	.word	0x00001ae1
    1e30:	00003101 	.word	0x00003101
    1e34:	20000714 	.word	0x20000714

00001e38 <usb_d_ep0_init>:
{
    1e38:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    1e3a:	b282      	uxth	r2, r0
    1e3c:	2100      	movs	r1, #0
    1e3e:	2000      	movs	r0, #0
    1e40:	4b01      	ldr	r3, [pc, #4]	; (1e48 <usb_d_ep0_init+0x10>)
    1e42:	4798      	blx	r3
}
    1e44:	bd10      	pop	{r4, pc}
    1e46:	46c0      	nop			; (mov r8, r8)
    1e48:	00001de5 	.word	0x00001de5

00001e4c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    1e4c:	b570      	push	{r4, r5, r6, lr}
    1e4e:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1e50:	4b06      	ldr	r3, [pc, #24]	; (1e6c <usb_d_ep_deinit+0x20>)
    1e52:	4798      	blx	r3
    1e54:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1e56:	db07      	blt.n	1e68 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    1e58:	0028      	movs	r0, r5
    1e5a:	4b05      	ldr	r3, [pc, #20]	; (1e70 <usb_d_ep_deinit+0x24>)
    1e5c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    1e5e:	0164      	lsls	r4, r4, #5
    1e60:	4b04      	ldr	r3, [pc, #16]	; (1e74 <usb_d_ep_deinit+0x28>)
    1e62:	191c      	adds	r4, r3, r4
    1e64:	23ff      	movs	r3, #255	; 0xff
    1e66:	7063      	strb	r3, [r4, #1]
}
    1e68:	bd70      	pop	{r4, r5, r6, pc}
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	00001ae1 	.word	0x00001ae1
    1e70:	0000322d 	.word	0x0000322d
    1e74:	20000714 	.word	0x20000714

00001e78 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    1e78:	b570      	push	{r4, r5, r6, lr}
    1e7a:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1e7c:	4b0e      	ldr	r3, [pc, #56]	; (1eb8 <usb_d_ep_enable+0x40>)
    1e7e:	4798      	blx	r3
    1e80:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    1e82:	db15      	blt.n	1eb0 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    1e84:	0143      	lsls	r3, r0, #5
    1e86:	4a0d      	ldr	r2, [pc, #52]	; (1ebc <usb_d_ep_enable+0x44>)
    1e88:	5c9b      	ldrb	r3, [r3, r2]
    1e8a:	425a      	negs	r2, r3
    1e8c:	4153      	adcs	r3, r2
    1e8e:	3301      	adds	r3, #1
    1e90:	0141      	lsls	r1, r0, #5
    1e92:	4a0a      	ldr	r2, [pc, #40]	; (1ebc <usb_d_ep_enable+0x44>)
    1e94:	1852      	adds	r2, r2, r1
    1e96:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    1e98:	0020      	movs	r0, r4
    1e9a:	4b09      	ldr	r3, [pc, #36]	; (1ec0 <usb_d_ep_enable+0x48>)
    1e9c:	4798      	blx	r3
	if (rc < 0) {
    1e9e:	2800      	cmp	r0, #0
    1ea0:	db00      	blt.n	1ea4 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    1ea2:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    1ea4:	016d      	lsls	r5, r5, #5
    1ea6:	4b05      	ldr	r3, [pc, #20]	; (1ebc <usb_d_ep_enable+0x44>)
    1ea8:	195d      	adds	r5, r3, r5
    1eaa:	2300      	movs	r3, #0
    1eac:	70ab      	strb	r3, [r5, #2]
    1eae:	e7f8      	b.n	1ea2 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    1eb0:	2012      	movs	r0, #18
    1eb2:	4240      	negs	r0, r0
    1eb4:	e7f5      	b.n	1ea2 <usb_d_ep_enable+0x2a>
    1eb6:	46c0      	nop			; (mov r8, r8)
    1eb8:	00001ae1 	.word	0x00001ae1
    1ebc:	20000714 	.word	0x20000714
    1ec0:	000032f9 	.word	0x000032f9

00001ec4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    1ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ec6:	46d6      	mov	lr, sl
    1ec8:	464f      	mov	r7, r9
    1eca:	4646      	mov	r6, r8
    1ecc:	b5c0      	push	{r6, r7, lr}
    1ece:	b086      	sub	sp, #24
    1ed0:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    1ed2:	7a07      	ldrb	r7, [r0, #8]
    1ed4:	0038      	movs	r0, r7
    1ed6:	4b40      	ldr	r3, [pc, #256]	; (1fd8 <usb_d_ep_transfer+0x114>)
    1ed8:	4798      	blx	r3
    1eda:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1edc:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
    1ede:	6863      	ldr	r3, [r4, #4]
    1ee0:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    1ee2:	2800      	cmp	r0, #0
    1ee4:	da00      	bge.n	1ee8 <usb_d_ep_transfer+0x24>
    1ee6:	e071      	b.n	1fcc <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    1ee8:	a804      	add	r0, sp, #16
    1eea:	4b3c      	ldr	r3, [pc, #240]	; (1fdc <usb_d_ep_transfer+0x118>)
    1eec:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    1eee:	016a      	lsls	r2, r5, #5
    1ef0:	4b3b      	ldr	r3, [pc, #236]	; (1fe0 <usb_d_ep_transfer+0x11c>)
    1ef2:	189b      	adds	r3, r3, r2
    1ef4:	789a      	ldrb	r2, [r3, #2]
    1ef6:	2317      	movs	r3, #23
    1ef8:	446b      	add	r3, sp
    1efa:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    1efc:	781b      	ldrb	r3, [r3, #0]
    1efe:	2b01      	cmp	r3, #1
    1f00:	d010      	beq.n	1f24 <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    1f02:	a804      	add	r0, sp, #16
    1f04:	4b37      	ldr	r3, [pc, #220]	; (1fe4 <usb_d_ep_transfer+0x120>)
    1f06:	4798      	blx	r3
		switch (state) {
    1f08:	2317      	movs	r3, #23
    1f0a:	446b      	add	r3, sp
    1f0c:	781b      	ldrb	r3, [r3, #0]
    1f0e:	b2db      	uxtb	r3, r3
    1f10:	2b05      	cmp	r3, #5
    1f12:	d05e      	beq.n	1fd2 <usb_d_ep_transfer+0x10e>
    1f14:	2b06      	cmp	r3, #6
    1f16:	d023      	beq.n	1f60 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    1f18:	2001      	movs	r0, #1
		switch (state) {
    1f1a:	2b00      	cmp	r3, #0
    1f1c:	d13c      	bne.n	1f98 <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
    1f1e:	2013      	movs	r0, #19
    1f20:	4240      	negs	r0, r0
    1f22:	e039      	b.n	1f98 <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    1f24:	4b2e      	ldr	r3, [pc, #184]	; (1fe0 <usb_d_ep_transfer+0x11c>)
    1f26:	4699      	mov	r9, r3
    1f28:	016b      	lsls	r3, r5, #5
    1f2a:	469a      	mov	sl, r3
    1f2c:	464b      	mov	r3, r9
    1f2e:	4453      	add	r3, sl
    1f30:	2203      	movs	r2, #3
    1f32:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    1f34:	a804      	add	r0, sp, #16
    1f36:	4b2b      	ldr	r3, [pc, #172]	; (1fe4 <usb_d_ep_transfer+0x120>)
    1f38:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    1f3a:	464b      	mov	r3, r9
    1f3c:	4652      	mov	r2, sl
    1f3e:	5cd3      	ldrb	r3, [r2, r3]
    1f40:	2b00      	cmp	r3, #0
    1f42:	d010      	beq.n	1f66 <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1f44:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    1f46:	1e72      	subs	r2, r6, #1
    1f48:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1f4a:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
    1f4c:	6822      	ldr	r2, [r4, #0]
    1f4e:	9201      	str	r2, [sp, #4]
    1f50:	4642      	mov	r2, r8
    1f52:	9202      	str	r2, [sp, #8]
    1f54:	b27f      	sxtb	r7, r7
    1f56:	2f00      	cmp	r7, #0
    1f58:	db17      	blt.n	1f8a <usb_d_ep_transfer+0xc6>
    1f5a:	220f      	movs	r2, #15
    1f5c:	4013      	ands	r3, r2
    1f5e:	e016      	b.n	1f8e <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
    1f60:	2010      	movs	r0, #16
    1f62:	4240      	negs	r0, r0
    1f64:	e018      	b.n	1f98 <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    1f66:	016b      	lsls	r3, r5, #5
    1f68:	4a1d      	ldr	r2, [pc, #116]	; (1fe0 <usb_d_ep_transfer+0x11c>)
    1f6a:	18d2      	adds	r2, r2, r3
    1f6c:	7cd1      	ldrb	r1, [r2, #19]
    1f6e:	0209      	lsls	r1, r1, #8
    1f70:	7c93      	ldrb	r3, [r2, #18]
    1f72:	185b      	adds	r3, r3, r1
    1f74:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    1f76:	2b00      	cmp	r3, #0
    1f78:	d114      	bne.n	1fa4 <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    1f7a:	2304      	movs	r3, #4
    1f7c:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    1f7e:	2200      	movs	r2, #0
			zlp                 = true;
    1f80:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1f82:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    1f84:	6821      	ldr	r1, [r4, #0]
    1f86:	9101      	str	r1, [sp, #4]
    1f88:	9202      	str	r2, [sp, #8]
    1f8a:	2280      	movs	r2, #128	; 0x80
    1f8c:	4313      	orrs	r3, r2
    1f8e:	a801      	add	r0, sp, #4
    1f90:	7203      	strb	r3, [r0, #8]
    1f92:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    1f94:	4b14      	ldr	r3, [pc, #80]	; (1fe8 <usb_d_ep_transfer+0x124>)
    1f96:	4798      	blx	r3
	return rc;
}
    1f98:	b006      	add	sp, #24
    1f9a:	bc1c      	pop	{r2, r3, r4}
    1f9c:	4690      	mov	r8, r2
    1f9e:	4699      	mov	r9, r3
    1fa0:	46a2      	mov	sl, r4
    1fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fa4:	4642      	mov	r2, r8
    1fa6:	429a      	cmp	r2, r3
    1fa8:	d900      	bls.n	1fac <usb_d_ep_transfer+0xe8>
    1faa:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    1fac:	016d      	lsls	r5, r5, #5
    1fae:	490c      	ldr	r1, [pc, #48]	; (1fe0 <usb_d_ep_transfer+0x11c>)
    1fb0:	194d      	adds	r5, r1, r5
			if (dir) {
    1fb2:	7b29      	ldrb	r1, [r5, #12]
    1fb4:	297f      	cmp	r1, #127	; 0x7f
    1fb6:	d805      	bhi.n	1fc4 <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1fb8:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    1fba:	6821      	ldr	r1, [r4, #0]
    1fbc:	9101      	str	r1, [sp, #4]
    1fbe:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    1fc0:	2600      	movs	r6, #0
    1fc2:	e7ca      	b.n	1f5a <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
    1fc4:	429a      	cmp	r2, r3
    1fc6:	41b6      	sbcs	r6, r6
    1fc8:	4276      	negs	r6, r6
    1fca:	e7da      	b.n	1f82 <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
    1fcc:	2012      	movs	r0, #18
    1fce:	4240      	negs	r0, r0
    1fd0:	e7e2      	b.n	1f98 <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
    1fd2:	2002      	movs	r0, #2
    1fd4:	e7e0      	b.n	1f98 <usb_d_ep_transfer+0xd4>
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	00001ae1 	.word	0x00001ae1
    1fdc:	000048d1 	.word	0x000048d1
    1fe0:	20000714 	.word	0x20000714
    1fe4:	000048df 	.word	0x000048df
    1fe8:	000037b1 	.word	0x000037b1

00001fec <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    1fec:	b570      	push	{r4, r5, r6, lr}
    1fee:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    1ff0:	4b07      	ldr	r3, [pc, #28]	; (2010 <STACK_SIZE+0x10>)
    1ff2:	4798      	blx	r3
    1ff4:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    1ff6:	db09      	blt.n	200c <STACK_SIZE+0xc>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    1ff8:	0028      	movs	r0, r5
    1ffa:	4b06      	ldr	r3, [pc, #24]	; (2014 <STACK_SIZE+0x14>)
    1ffc:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    1ffe:	0164      	lsls	r4, r4, #5
    2000:	4b05      	ldr	r3, [pc, #20]	; (2018 <STACK_SIZE+0x18>)
    2002:	191c      	adds	r4, r3, r4
    2004:	2301      	movs	r3, #1
    2006:	70a3      	strb	r3, [r4, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    2008:	3303      	adds	r3, #3
    200a:	70e3      	strb	r3, [r4, #3]
}
    200c:	bd70      	pop	{r4, r5, r6, pc}
    200e:	46c0      	nop			; (mov r8, r8)
    2010:	00001ae1 	.word	0x00001ae1
    2014:	000039c1 	.word	0x000039c1
    2018:	20000714 	.word	0x20000714

0000201c <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    201c:	b570      	push	{r4, r5, r6, lr}
    201e:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    2020:	2900      	cmp	r1, #0
    2022:	d005      	beq.n	2030 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    2024:	2901      	cmp	r1, #1
    2026:	d021      	beq.n	206c <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2028:	2102      	movs	r1, #2
    202a:	4b13      	ldr	r3, [pc, #76]	; (2078 <usb_d_ep_halt+0x5c>)
    202c:	4798      	blx	r3
	}
}
    202e:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    2030:	4b12      	ldr	r3, [pc, #72]	; (207c <usb_d_ep_halt+0x60>)
    2032:	4798      	blx	r3
    2034:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    2036:	db1c      	blt.n	2072 <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2038:	2102      	movs	r1, #2
    203a:	0020      	movs	r0, r4
    203c:	4b0e      	ldr	r3, [pc, #56]	; (2078 <usb_d_ep_halt+0x5c>)
    203e:	4798      	blx	r3
    2040:	2800      	cmp	r0, #0
    2042:	d0f4      	beq.n	202e <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2044:	2100      	movs	r1, #0
    2046:	0020      	movs	r0, r4
    2048:	4b0b      	ldr	r3, [pc, #44]	; (2078 <usb_d_ep_halt+0x5c>)
    204a:	4798      	blx	r3
		if (rc < 0) {
    204c:	2800      	cmp	r0, #0
    204e:	dbee      	blt.n	202e <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2050:	016d      	lsls	r5, r5, #5
    2052:	4b0b      	ldr	r3, [pc, #44]	; (2080 <usb_d_ep_halt+0x64>)
    2054:	195d      	adds	r5, r3, r5
    2056:	2301      	movs	r3, #1
    2058:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    205a:	3302      	adds	r3, #2
    205c:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    205e:	69eb      	ldr	r3, [r5, #28]
    2060:	2200      	movs	r2, #0
    2062:	2103      	movs	r1, #3
    2064:	0020      	movs	r0, r4
    2066:	4798      	blx	r3
	return ERR_NONE;
    2068:	2000      	movs	r0, #0
    206a:	e7e0      	b.n	202e <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    206c:	4b02      	ldr	r3, [pc, #8]	; (2078 <usb_d_ep_halt+0x5c>)
    206e:	4798      	blx	r3
    2070:	e7dd      	b.n	202e <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    2072:	2012      	movs	r0, #18
    2074:	4240      	negs	r0, r0
    2076:	e7da      	b.n	202e <usb_d_ep_halt+0x12>
    2078:	000035dd 	.word	0x000035dd
    207c:	00001ae1 	.word	0x00001ae1
    2080:	20000714 	.word	0x20000714

00002084 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2084:	b570      	push	{r4, r5, r6, lr}
    2086:	000d      	movs	r5, r1
    2088:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    208a:	4b0f      	ldr	r3, [pc, #60]	; (20c8 <usb_d_ep_register_callback+0x44>)
    208c:	4798      	blx	r3
    208e:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    2090:	1e22      	subs	r2, r4, #0
    2092:	d008      	beq.n	20a6 <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    2094:	2b00      	cmp	r3, #0
    2096:	db05      	blt.n	20a4 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    2098:	2d01      	cmp	r5, #1
    209a:	d00b      	beq.n	20b4 <usb_d_ep_register_callback+0x30>
    209c:	2d00      	cmp	r5, #0
    209e:	d004      	beq.n	20aa <usb_d_ep_register_callback+0x26>
    20a0:	2d02      	cmp	r5, #2
    20a2:	d00c      	beq.n	20be <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    20a4:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    20a6:	4a09      	ldr	r2, [pc, #36]	; (20cc <usb_d_ep_register_callback+0x48>)
    20a8:	e7f4      	b.n	2094 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    20aa:	0140      	lsls	r0, r0, #5
    20ac:	4b08      	ldr	r3, [pc, #32]	; (20d0 <usb_d_ep_register_callback+0x4c>)
    20ae:	1818      	adds	r0, r3, r0
    20b0:	6142      	str	r2, [r0, #20]
		break;
    20b2:	e7f7      	b.n	20a4 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    20b4:	0140      	lsls	r0, r0, #5
    20b6:	4b06      	ldr	r3, [pc, #24]	; (20d0 <usb_d_ep_register_callback+0x4c>)
    20b8:	1818      	adds	r0, r3, r0
    20ba:	6182      	str	r2, [r0, #24]
		break;
    20bc:	e7f2      	b.n	20a4 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    20be:	0140      	lsls	r0, r0, #5
    20c0:	4b03      	ldr	r3, [pc, #12]	; (20d0 <usb_d_ep_register_callback+0x4c>)
    20c2:	1818      	adds	r0, r3, r0
    20c4:	61c2      	str	r2, [r0, #28]
		break;
    20c6:	e7ed      	b.n	20a4 <usb_d_ep_register_callback+0x20>
    20c8:	00001ae1 	.word	0x00001ae1
    20cc:	00001b25 	.word	0x00001b25
    20d0:	20000714 	.word	0x20000714

000020d4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    20d4:	2800      	cmp	r0, #0
    20d6:	d100      	bne.n	20da <assert+0x6>
		__asm("BKPT #0");
    20d8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    20da:	4770      	bx	lr

000020dc <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    20dc:	6803      	ldr	r3, [r0, #0]
    20de:	2b00      	cmp	r3, #0
    20e0:	d00a      	beq.n	20f8 <is_list_element+0x1c>
		if (it == element) {
    20e2:	428b      	cmp	r3, r1
    20e4:	d00a      	beq.n	20fc <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    20e6:	681b      	ldr	r3, [r3, #0]
    20e8:	2b00      	cmp	r3, #0
    20ea:	d003      	beq.n	20f4 <is_list_element+0x18>
		if (it == element) {
    20ec:	4299      	cmp	r1, r3
    20ee:	d1fa      	bne.n	20e6 <is_list_element+0xa>
			return true;
    20f0:	2001      	movs	r0, #1
    20f2:	e000      	b.n	20f6 <is_list_element+0x1a>
		}
	}

	return false;
    20f4:	2000      	movs	r0, #0
}
    20f6:	4770      	bx	lr
	return false;
    20f8:	2000      	movs	r0, #0
    20fa:	e7fc      	b.n	20f6 <is_list_element+0x1a>
			return true;
    20fc:	2001      	movs	r0, #1
    20fe:	e7fa      	b.n	20f6 <is_list_element+0x1a>

00002100 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2100:	b570      	push	{r4, r5, r6, lr}
    2102:	0004      	movs	r4, r0
    2104:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    2106:	4b06      	ldr	r3, [pc, #24]	; (2120 <list_insert_as_head+0x20>)
    2108:	4798      	blx	r3
    210a:	2301      	movs	r3, #1
    210c:	4058      	eors	r0, r3
    210e:	b2c0      	uxtb	r0, r0
    2110:	2239      	movs	r2, #57	; 0x39
    2112:	4904      	ldr	r1, [pc, #16]	; (2124 <list_insert_as_head+0x24>)
    2114:	4b04      	ldr	r3, [pc, #16]	; (2128 <list_insert_as_head+0x28>)
    2116:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2118:	6823      	ldr	r3, [r4, #0]
    211a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    211c:	6025      	str	r5, [r4, #0]
}
    211e:	bd70      	pop	{r4, r5, r6, pc}
    2120:	000020dd 	.word	0x000020dd
    2124:	00004e64 	.word	0x00004e64
    2128:	000020d5 	.word	0x000020d5

0000212c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    212c:	6803      	ldr	r3, [r0, #0]
    212e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2130:	6001      	str	r1, [r0, #0]
}
    2132:	4770      	bx	lr

00002134 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2134:	b570      	push	{r4, r5, r6, lr}
    2136:	0005      	movs	r5, r0
    2138:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    213a:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    213c:	4b0a      	ldr	r3, [pc, #40]	; (2168 <list_insert_at_end+0x34>)
    213e:	4798      	blx	r3
    2140:	2301      	movs	r3, #1
    2142:	4058      	eors	r0, r3
    2144:	b2c0      	uxtb	r0, r0
    2146:	224f      	movs	r2, #79	; 0x4f
    2148:	4908      	ldr	r1, [pc, #32]	; (216c <list_insert_at_end+0x38>)
    214a:	4b09      	ldr	r3, [pc, #36]	; (2170 <list_insert_at_end+0x3c>)
    214c:	4798      	blx	r3

	if (!list->head) {
    214e:	682b      	ldr	r3, [r5, #0]
    2150:	2b00      	cmp	r3, #0
    2152:	d103      	bne.n	215c <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    2154:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    2156:	6033      	str	r3, [r6, #0]
		return;
    2158:	e005      	b.n	2166 <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    215a:	001c      	movs	r4, r3
	while (it->next) {
    215c:	6823      	ldr	r3, [r4, #0]
    215e:	2b00      	cmp	r3, #0
    2160:	d1fb      	bne.n	215a <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    2162:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    2164:	6033      	str	r3, [r6, #0]
}
    2166:	bd70      	pop	{r4, r5, r6, pc}
    2168:	000020dd 	.word	0x000020dd
    216c:	00004e64 	.word	0x00004e64
    2170:	000020d5 	.word	0x000020d5

00002174 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    2174:	6803      	ldr	r3, [r0, #0]
    2176:	2b00      	cmp	r3, #0
    2178:	d001      	beq.n	217e <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    217a:	681a      	ldr	r2, [r3, #0]
    217c:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    217e:	0018      	movs	r0, r3
    2180:	4770      	bx	lr

00002182 <list_delete_element>:
/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
	if (!element) {
    2182:	2900      	cmp	r1, #0
    2184:	d019      	beq.n	21ba <list_delete_element+0x38>
		return false;
	}

	if (list->head == element) {
    2186:	6802      	ldr	r2, [r0, #0]
    2188:	4291      	cmp	r1, r2
    218a:	d00b      	beq.n	21a4 <list_delete_element+0x22>
		list->head = list->head->next;
		return true;
	} else {
		struct list_element *it = list->head;

		while (it && it->next != element) {
    218c:	2a00      	cmp	r2, #0
    218e:	d016      	beq.n	21be <list_delete_element+0x3c>
    2190:	6813      	ldr	r3, [r2, #0]
    2192:	4299      	cmp	r1, r3
    2194:	d00a      	beq.n	21ac <list_delete_element+0x2a>
    2196:	2b00      	cmp	r3, #0
    2198:	d00d      	beq.n	21b6 <list_delete_element+0x34>
    219a:	681a      	ldr	r2, [r3, #0]
    219c:	4291      	cmp	r1, r2
    219e:	d006      	beq.n	21ae <list_delete_element+0x2c>
    21a0:	0013      	movs	r3, r2
    21a2:	e7f8      	b.n	2196 <list_delete_element+0x14>
		list->head = list->head->next;
    21a4:	6813      	ldr	r3, [r2, #0]
    21a6:	6003      	str	r3, [r0, #0]
		return true;
    21a8:	2001      	movs	r0, #1
    21aa:	e003      	b.n	21b4 <list_delete_element+0x32>
		while (it && it->next != element) {
    21ac:	0013      	movs	r3, r2
			it = it->next;
		}
		if (it) {
			it->next = ((struct list_element *)element)->next;
    21ae:	680a      	ldr	r2, [r1, #0]
    21b0:	601a      	str	r2, [r3, #0]
			return true;
    21b2:	2001      	movs	r0, #1
		}
	}

	return false;
}
    21b4:	4770      	bx	lr
	return false;
    21b6:	2000      	movs	r0, #0
    21b8:	e7fc      	b.n	21b4 <list_delete_element+0x32>
		return false;
    21ba:	2000      	movs	r0, #0
    21bc:	e7fa      	b.n	21b4 <list_delete_element+0x32>
	return false;
    21be:	2000      	movs	r0, #0
    21c0:	e7f8      	b.n	21b4 <list_delete_element+0x32>
	...

000021c4 <_irq_set>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    21c4:	b243      	sxtb	r3, r0
    21c6:	2b00      	cmp	r3, #0
    21c8:	db07      	blt.n	21da <_irq_set+0x16>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21ca:	231f      	movs	r3, #31
    21cc:	4018      	ands	r0, r3
    21ce:	3b1e      	subs	r3, #30
    21d0:	4083      	lsls	r3, r0
    21d2:	2280      	movs	r2, #128	; 0x80
    21d4:	0052      	lsls	r2, r2, #1
    21d6:	4901      	ldr	r1, [pc, #4]	; (21dc <_irq_set+0x18>)
    21d8:	508b      	str	r3, [r1, r2]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
    21da:	4770      	bx	lr
    21dc:	e000e100 	.word	0xe000e100

000021e0 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    21e0:	b510      	push	{r4, lr}
    21e2:	0003      	movs	r3, r0
		return (us * (freq / 10000) + 299) / 300;
    21e4:	20c8      	movs	r0, #200	; 0xc8
    21e6:	0080      	lsls	r0, r0, #2
    21e8:	4358      	muls	r0, r3
    21ea:	302c      	adds	r0, #44	; 0x2c
    21ec:	30ff      	adds	r0, #255	; 0xff
    21ee:	2196      	movs	r1, #150	; 0x96
    21f0:	0049      	lsls	r1, r1, #1
    21f2:	4b01      	ldr	r3, [pc, #4]	; (21f8 <_get_cycles_for_us+0x18>)
    21f4:	4798      	blx	r3
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    21f6:	bd10      	pop	{r4, pc}
    21f8:	000048fd 	.word	0x000048fd

000021fc <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    21fc:	b510      	push	{r4, lr}
    21fe:	0003      	movs	r3, r0
		return (ms * (freq / 10000) + 2) / 3 * 10;
    2200:	20c8      	movs	r0, #200	; 0xc8
    2202:	0080      	lsls	r0, r0, #2
    2204:	4358      	muls	r0, r3
    2206:	3002      	adds	r0, #2
    2208:	2103      	movs	r1, #3
    220a:	4b03      	ldr	r3, [pc, #12]	; (2218 <_get_cycles_for_ms+0x1c>)
    220c:	4798      	blx	r3
    220e:	0003      	movs	r3, r0
    2210:	0080      	lsls	r0, r0, #2
    2212:	18c0      	adds	r0, r0, r3
    2214:	0040      	lsls	r0, r0, #1
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2216:	bd10      	pop	{r4, pc}
    2218:	000048fd 	.word	0x000048fd

0000221c <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    221c:	3901      	subs	r1, #1
    221e:	d8fd      	bhi.n	221c <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    2220:	4770      	bx	lr
	...

00002224 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2224:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    2226:	4b06      	ldr	r3, [pc, #24]	; (2240 <_init_chip+0x1c>)
    2228:	685a      	ldr	r2, [r3, #4]
    222a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    222c:	4b05      	ldr	r3, [pc, #20]	; (2244 <_init_chip+0x20>)
    222e:	4798      	blx	r3
	_sysctrl_init_sources();
    2230:	4b05      	ldr	r3, [pc, #20]	; (2248 <_init_chip+0x24>)
    2232:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    2234:	4b05      	ldr	r3, [pc, #20]	; (224c <_init_chip+0x28>)
    2236:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2238:	20ff      	movs	r0, #255	; 0xff
    223a:	4b05      	ldr	r3, [pc, #20]	; (2250 <_init_chip+0x2c>)
    223c:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    223e:	bd10      	pop	{r4, pc}
    2240:	41004000 	.word	0x41004000
    2244:	00002305 	.word	0x00002305
    2248:	00002679 	.word	0x00002679
    224c:	000026cd 	.word	0x000026cd
    2250:	00002255 	.word	0x00002255

00002254 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2254:	07c3      	lsls	r3, r0, #31
    2256:	d50a      	bpl.n	226e <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    2258:	4b22      	ldr	r3, [pc, #136]	; (22e4 <_gclk_init_generators_by_fref+0x90>)
    225a:	2280      	movs	r2, #128	; 0x80
    225c:	0052      	lsls	r2, r2, #1
    225e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2260:	2283      	movs	r2, #131	; 0x83
    2262:	0252      	lsls	r2, r2, #9
    2264:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2266:	001a      	movs	r2, r3
    2268:	7853      	ldrb	r3, [r2, #1]
    226a:	09db      	lsrs	r3, r3, #7
    226c:	d1fc      	bne.n	2268 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    226e:	0783      	lsls	r3, r0, #30
    2270:	d509      	bpl.n	2286 <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
    2272:	4b1c      	ldr	r3, [pc, #112]	; (22e4 <_gclk_init_generators_by_fref+0x90>)
    2274:	2202      	movs	r2, #2
    2276:	32ff      	adds	r2, #255	; 0xff
    2278:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    227a:	4a1b      	ldr	r2, [pc, #108]	; (22e8 <_gclk_init_generators_by_fref+0x94>)
    227c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    227e:	001a      	movs	r2, r3
    2280:	7853      	ldrb	r3, [r2, #1]
    2282:	09db      	lsrs	r3, r3, #7
    2284:	d1fc      	bne.n	2280 <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    2286:	0743      	lsls	r3, r0, #29
    2288:	d508      	bpl.n	229c <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
    228a:	4b16      	ldr	r3, [pc, #88]	; (22e4 <_gclk_init_generators_by_fref+0x90>)
    228c:	4a17      	ldr	r2, [pc, #92]	; (22ec <_gclk_init_generators_by_fref+0x98>)
    228e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2290:	4a17      	ldr	r2, [pc, #92]	; (22f0 <_gclk_init_generators_by_fref+0x9c>)
    2292:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2294:	001a      	movs	r2, r3
    2296:	7853      	ldrb	r3, [r2, #1]
    2298:	09db      	lsrs	r3, r3, #7
    229a:	d1fc      	bne.n	2296 <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    229c:	0703      	lsls	r3, r0, #28
    229e:	d508      	bpl.n	22b2 <_gclk_init_generators_by_fref+0x5e>
	((Gclk *)hw)->GENDIV.reg = data;
    22a0:	4b10      	ldr	r3, [pc, #64]	; (22e4 <_gclk_init_generators_by_fref+0x90>)
    22a2:	4a14      	ldr	r2, [pc, #80]	; (22f4 <_gclk_init_generators_by_fref+0xa0>)
    22a4:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    22a6:	4a14      	ldr	r2, [pc, #80]	; (22f8 <_gclk_init_generators_by_fref+0xa4>)
    22a8:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    22aa:	001a      	movs	r2, r3
    22ac:	7853      	ldrb	r3, [r2, #1]
    22ae:	09db      	lsrs	r3, r3, #7
    22b0:	d1fc      	bne.n	22ac <_gclk_init_generators_by_fref+0x58>
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    22b2:	0643      	lsls	r3, r0, #25
    22b4:	d509      	bpl.n	22ca <_gclk_init_generators_by_fref+0x76>
	((Gclk *)hw)->GENDIV.reg = data;
    22b6:	4b0b      	ldr	r3, [pc, #44]	; (22e4 <_gclk_init_generators_by_fref+0x90>)
    22b8:	2283      	movs	r2, #131	; 0x83
    22ba:	0052      	lsls	r2, r2, #1
    22bc:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    22be:	4a0f      	ldr	r2, [pc, #60]	; (22fc <_gclk_init_generators_by_fref+0xa8>)
    22c0:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    22c2:	001a      	movs	r2, r3
    22c4:	7853      	ldrb	r3, [r2, #1]
    22c6:	09db      	lsrs	r3, r3, #7
    22c8:	d1fc      	bne.n	22c4 <_gclk_init_generators_by_fref+0x70>
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SRC | GCLK_GENCTRL_ID(6));
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    22ca:	0603      	lsls	r3, r0, #24
    22cc:	d509      	bpl.n	22e2 <_gclk_init_generators_by_fref+0x8e>
	((Gclk *)hw)->GENDIV.reg = data;
    22ce:	4b05      	ldr	r3, [pc, #20]	; (22e4 <_gclk_init_generators_by_fref+0x90>)
    22d0:	2208      	movs	r2, #8
    22d2:	32ff      	adds	r2, #255	; 0xff
    22d4:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    22d6:	4a0a      	ldr	r2, [pc, #40]	; (2300 <_gclk_init_generators_by_fref+0xac>)
    22d8:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    22da:	001a      	movs	r2, r3
    22dc:	7853      	ldrb	r3, [r2, #1]
    22de:	09db      	lsrs	r3, r3, #7
    22e0:	d1fc      	bne.n	22dc <_gclk_init_generators_by_fref+0x88>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    22e2:	4770      	bx	lr
    22e4:	40000c00 	.word	0x40000c00
    22e8:	00090701 	.word	0x00090701
    22ec:	00000402 	.word	0x00000402
    22f0:	00010602 	.word	0x00010602
    22f4:	00000803 	.word	0x00000803
    22f8:	00010603 	.word	0x00010603
    22fc:	00010306 	.word	0x00010306
    2300:	00010407 	.word	0x00010407

00002304 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    2304:	4b06      	ldr	r3, [pc, #24]	; (2320 <_pm_init+0x1c>)
    2306:	7a1a      	ldrb	r2, [r3, #8]
    2308:	b2d2      	uxtb	r2, r2
    230a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    230c:	7a5a      	ldrb	r2, [r3, #9]
    230e:	b2d2      	uxtb	r2, r2
    2310:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    2312:	7a9a      	ldrb	r2, [r3, #10]
    2314:	b2d2      	uxtb	r2, r2
    2316:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    2318:	7ada      	ldrb	r2, [r3, #11]
    231a:	b2d2      	uxtb	r2, r2
    231c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    231e:	4770      	bx	lr
    2320:	40000400 	.word	0x40000400

00002324 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    2324:	b510      	push	{r4, lr}
    2326:	1e04      	subs	r4, r0, #0
	uint16_t register_value;

	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2328:	d035      	beq.n	2396 <_calendar_init+0x72>
    232a:	6800      	ldr	r0, [r0, #0]
    232c:	1e43      	subs	r3, r0, #1
    232e:	4198      	sbcs	r0, r3
    2330:	b2c0      	uxtb	r0, r0
    2332:	2278      	movs	r2, #120	; 0x78
    2334:	4919      	ldr	r1, [pc, #100]	; (239c <_calendar_init+0x78>)
    2336:	4b1a      	ldr	r3, [pc, #104]	; (23a0 <_calendar_init+0x7c>)
    2338:	4798      	blx	r3

	_rtc_dev = dev;
    233a:	4b1a      	ldr	r3, [pc, #104]	; (23a4 <_calendar_init+0x80>)
    233c:	601c      	str	r4, [r3, #0]

	if (hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw)) {
    233e:	6822      	ldr	r2, [r4, #0]
typedef uint8_t  hri_rtcmode2_intflag_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtc_wait_for_sync(const void *const hw)
{
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    2340:	7a93      	ldrb	r3, [r2, #10]
    2342:	09db      	lsrs	r3, r3, #7
    2344:	d1fc      	bne.n	2340 <_calendar_init+0x1c>

static inline bool hri_rtcmode0_get_CTRL_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
    2346:	8813      	ldrh	r3, [r2, #0]
    2348:	079b      	lsls	r3, r3, #30
    234a:	d50a      	bpl.n	2362 <_calendar_init+0x3e>
}

static inline void hri_rtcmode0_clear_CTRL_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    234c:	8813      	ldrh	r3, [r2, #0]
    234e:	2102      	movs	r1, #2
    2350:	438b      	bics	r3, r1
    2352:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    2354:	7a93      	ldrb	r3, [r2, #10]
    2356:	09db      	lsrs	r3, r3, #7
    2358:	d1fc      	bne.n	2354 <_calendar_init+0x30>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw);
    235a:	6822      	ldr	r2, [r4, #0]
    235c:	7a93      	ldrb	r3, [r2, #10]
    235e:	09db      	lsrs	r3, r3, #7
    2360:	d1fc      	bne.n	235c <_calendar_init+0x38>
#endif
	}
	hri_rtcmode0_set_CTRL_SWRST_bit(dev->hw);
    2362:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    2364:	8813      	ldrh	r3, [r2, #0]
    2366:	2101      	movs	r1, #1
    2368:	430b      	orrs	r3, r1
    236a:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    236c:	7a93      	ldrb	r3, [r2, #10]
    236e:	09db      	lsrs	r3, r3, #7
    2370:	d1fc      	bne.n	236c <_calendar_init+0x48>
	hri_rtcmode0_wait_for_sync(dev->hw);
    2372:	6822      	ldr	r2, [r4, #0]
    2374:	7a93      	ldrb	r3, [r2, #10]
    2376:	09db      	lsrs	r3, r3, #7
    2378:	d1fc      	bne.n	2374 <_calendar_init+0x50>
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    237a:	23a0      	movs	r3, #160	; 0xa0
    237c:	011b      	lsls	r3, r3, #4
    237e:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    2380:	7a93      	ldrb	r3, [r2, #10]
    2382:	09db      	lsrs	r3, r3, #7
    2384:	d1fc      	bne.n	2380 <_calendar_init+0x5c>
	register_value &= (~RTC_MODE0_CTRL_MATCHCLR);

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	/* set continuously clock read update mode */
	hri_rtcmode0_set_READREQ_RCONT_bit(dev->hw);
    2386:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_rtc_set_READREQ_RCONT_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    2388:	8853      	ldrh	r3, [r2, #2]
    238a:	2180      	movs	r1, #128	; 0x80
    238c:	01c9      	lsls	r1, r1, #7
    238e:	430b      	orrs	r3, r1
    2390:	8053      	strh	r3, [r2, #2]
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	return ERR_NONE;
}
    2392:	2000      	movs	r0, #0
    2394:	bd10      	pop	{r4, pc}
    2396:	2000      	movs	r0, #0
    2398:	e7cb      	b.n	2332 <_calendar_init+0xe>
    239a:	46c0      	nop			; (mov r8, r8)
    239c:	00004e84 	.word	0x00004e84
    23a0:	000020d5 	.word	0x000020d5
    23a4:	20000794 	.word	0x20000794

000023a8 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    23a8:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
    23aa:	4b07      	ldr	r3, [pc, #28]	; (23c8 <RTC_Handler+0x20>)
    23ac:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    23ae:	6823      	ldr	r3, [r4, #0]
    23b0:	7a1b      	ldrb	r3, [r3, #8]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
    23b2:	07db      	lsls	r3, r3, #31
    23b4:	d400      	bmi.n	23b8 <RTC_Handler+0x10>
}
    23b6:	bd10      	pop	{r4, pc}
		dev->callback(dev);
    23b8:	0020      	movs	r0, r4
    23ba:	6863      	ldr	r3, [r4, #4]
    23bc:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    23be:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    23c0:	2201      	movs	r2, #1
    23c2:	721a      	strb	r2, [r3, #8]
}
    23c4:	e7f7      	b.n	23b6 <RTC_Handler+0xe>
    23c6:	46c0      	nop			; (mov r8, r8)
    23c8:	20000794 	.word	0x20000794

000023cc <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    23cc:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    23ce:	07db      	lsls	r3, r3, #31
    23d0:	d409      	bmi.n	23e6 <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    23d2:	6803      	ldr	r3, [r0, #0]
    23d4:	2202      	movs	r2, #2
    23d6:	4313      	orrs	r3, r2
    23d8:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    23da:	3201      	adds	r2, #1
    23dc:	69c3      	ldr	r3, [r0, #28]
    23de:	421a      	tst	r2, r3
    23e0:	d1fc      	bne.n	23dc <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    23e2:	2000      	movs	r0, #0
}
    23e4:	4770      	bx	lr
		return ERR_BUSY;
    23e6:	2004      	movs	r0, #4
    23e8:	4240      	negs	r0, r0
    23ea:	e7fb      	b.n	23e4 <_spi_sync_enable+0x18>

000023ec <_spi_sync_disable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    23ec:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    23ee:	07db      	lsls	r3, r3, #31
    23f0:	d409      	bmi.n	2406 <_spi_sync_disable+0x1a>
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    23f2:	6803      	ldr	r3, [r0, #0]
    23f4:	2202      	movs	r2, #2
    23f6:	4393      	bics	r3, r2
    23f8:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    23fa:	3201      	adds	r2, #1
    23fc:	69c3      	ldr	r3, [r0, #28]
    23fe:	421a      	tst	r2, r3
    2400:	d1fc      	bne.n	23fc <_spi_sync_disable+0x10>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    2402:	2000      	movs	r0, #0
}
    2404:	4770      	bx	lr
		return ERR_BUSY;
    2406:	2004      	movs	r0, #4
    2408:	4240      	negs	r0, r0
    240a:	e7fb      	b.n	2404 <_spi_sync_disable+0x18>

0000240c <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    240c:	b570      	push	{r4, r5, r6, lr}
    240e:	0005      	movs	r5, r0
    2410:	000c      	movs	r4, r1
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2412:	4b35      	ldr	r3, [pc, #212]	; (24e8 <_spi_m_sync_init+0xdc>)
    2414:	18cb      	adds	r3, r1, r3
    2416:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    2418:	b2db      	uxtb	r3, r3
    241a:	2b00      	cmp	r3, #0
    241c:	d00b      	beq.n	2436 <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    241e:	2800      	cmp	r0, #0
    2420:	d051      	beq.n	24c6 <_spi_m_sync_init+0xba>
    2422:	1e60      	subs	r0, r4, #1
    2424:	4184      	sbcs	r4, r0
    2426:	b2e0      	uxtb	r0, r4
    2428:	4a30      	ldr	r2, [pc, #192]	; (24ec <_spi_m_sync_init+0xe0>)
    242a:	4931      	ldr	r1, [pc, #196]	; (24f0 <_spi_m_sync_init+0xe4>)
    242c:	4b31      	ldr	r3, [pc, #196]	; (24f4 <_spi_m_sync_init+0xe8>)
    242e:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    2430:	200d      	movs	r0, #13
    2432:	4240      	negs	r0, r0
    2434:	e046      	b.n	24c4 <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    2436:	2800      	cmp	r0, #0
    2438:	d14d      	bne.n	24d6 <_spi_m_sync_init+0xca>
    243a:	4a2c      	ldr	r2, [pc, #176]	; (24ec <_spi_m_sync_init+0xe0>)
    243c:	492c      	ldr	r1, [pc, #176]	; (24f0 <_spi_m_sync_init+0xe4>)
    243e:	2000      	movs	r0, #0
    2440:	4b2c      	ldr	r3, [pc, #176]	; (24f4 <_spi_m_sync_init+0xe8>)
    2442:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    2444:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    2446:	07db      	lsls	r3, r3, #31
    2448:	d418      	bmi.n	247c <_spi_m_sync_init+0x70>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    244a:	2203      	movs	r2, #3
    244c:	69e3      	ldr	r3, [r4, #28]
    244e:	421a      	tst	r2, r3
    2450:	d1fc      	bne.n	244c <_spi_m_sync_init+0x40>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2452:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    2454:	079b      	lsls	r3, r3, #30
    2456:	d50b      	bpl.n	2470 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2458:	6823      	ldr	r3, [r4, #0]
    245a:	2202      	movs	r2, #2
    245c:	4393      	bics	r3, r2
    245e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2460:	3201      	adds	r2, #1
    2462:	69e3      	ldr	r3, [r4, #28]
    2464:	421a      	tst	r2, r3
    2466:	d1fc      	bne.n	2462 <_spi_m_sync_init+0x56>
    2468:	2202      	movs	r2, #2
    246a:	69e3      	ldr	r3, [r4, #28]
    246c:	421a      	tst	r2, r3
    246e:	d1fc      	bne.n	246a <_spi_m_sync_init+0x5e>
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2470:	230d      	movs	r3, #13
    2472:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    2474:	2203      	movs	r2, #3
    2476:	69e3      	ldr	r3, [r4, #28]
    2478:	421a      	tst	r2, r3
    247a:	d1fc      	bne.n	2476 <_spi_m_sync_init+0x6a>
    247c:	2201      	movs	r2, #1
    247e:	69e3      	ldr	r3, [r4, #28]
    2480:	421a      	tst	r2, r3
    2482:	d1fc      	bne.n	247e <_spi_m_sync_init+0x72>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    2484:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    2486:	0020      	movs	r0, r4
    2488:	1e43      	subs	r3, r0, #1
    248a:	4198      	sbcs	r0, r3
    248c:	b2c0      	uxtb	r0, r0
    248e:	4a1a      	ldr	r2, [pc, #104]	; (24f8 <_spi_m_sync_init+0xec>)
    2490:	4917      	ldr	r1, [pc, #92]	; (24f0 <_spi_m_sync_init+0xe4>)
    2492:	4b18      	ldr	r3, [pc, #96]	; (24f4 <_spi_m_sync_init+0xe8>)
    2494:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2496:	4b19      	ldr	r3, [pc, #100]	; (24fc <_spi_m_sync_init+0xf0>)
    2498:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    249a:	2203      	movs	r2, #3
    249c:	69e3      	ldr	r3, [r4, #28]
    249e:	421a      	tst	r2, r3
    24a0:	d1fc      	bne.n	249c <_spi_m_sync_init+0x90>
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    24a2:	2380      	movs	r3, #128	; 0x80
    24a4:	029b      	lsls	r3, r3, #10
    24a6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    24a8:	2207      	movs	r2, #7
    24aa:	69e3      	ldr	r3, [r4, #28]
    24ac:	421a      	tst	r2, r3
    24ae:	d1fc      	bne.n	24aa <_spi_m_sync_init+0x9e>
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    24b0:	234f      	movs	r3, #79	; 0x4f
    24b2:	7323      	strb	r3, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    24b4:	2200      	movs	r2, #0
    24b6:	3b1f      	subs	r3, #31
    24b8:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    24ba:	3b2f      	subs	r3, #47	; 0x2f
    24bc:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    24be:	4b10      	ldr	r3, [pc, #64]	; (2500 <_spi_m_sync_init+0xf4>)
    24c0:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    24c2:	2000      	movs	r0, #0
}
    24c4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    24c6:	4a09      	ldr	r2, [pc, #36]	; (24ec <_spi_m_sync_init+0xe0>)
    24c8:	4909      	ldr	r1, [pc, #36]	; (24f0 <_spi_m_sync_init+0xe4>)
    24ca:	2000      	movs	r0, #0
    24cc:	4b09      	ldr	r3, [pc, #36]	; (24f4 <_spi_m_sync_init+0xe8>)
    24ce:	4798      	blx	r3
		return ERR_INVALID_ARG;
    24d0:	200d      	movs	r0, #13
    24d2:	4240      	negs	r0, r0
    24d4:	e7f6      	b.n	24c4 <_spi_m_sync_init+0xb8>
	ASSERT(dev && hw);
    24d6:	0008      	movs	r0, r1
    24d8:	1e43      	subs	r3, r0, #1
    24da:	4198      	sbcs	r0, r3
    24dc:	b2c0      	uxtb	r0, r0
    24de:	4a03      	ldr	r2, [pc, #12]	; (24ec <_spi_m_sync_init+0xe0>)
    24e0:	4903      	ldr	r1, [pc, #12]	; (24f0 <_spi_m_sync_init+0xe4>)
    24e2:	4b04      	ldr	r3, [pc, #16]	; (24f4 <_spi_m_sync_init+0xe8>)
    24e4:	4798      	blx	r3
    24e6:	e7ad      	b.n	2444 <_spi_m_sync_init+0x38>
    24e8:	bdfff800 	.word	0xbdfff800
    24ec:	00000925 	.word	0x00000925
    24f0:	00004e9c 	.word	0x00004e9c
    24f4:	000020d5 	.word	0x000020d5
    24f8:	000008ef 	.word	0x000008ef
    24fc:	0011000c 	.word	0x0011000c
    2500:	000001ff 	.word	0x000001ff

00002504 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    2504:	b510      	push	{r4, lr}
    2506:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    2508:	d00c      	beq.n	2524 <_spi_m_sync_enable+0x20>
    250a:	6800      	ldr	r0, [r0, #0]
    250c:	1e43      	subs	r3, r0, #1
    250e:	4198      	sbcs	r0, r3
    2510:	b2c0      	uxtb	r0, r0
    2512:	2298      	movs	r2, #152	; 0x98
    2514:	0112      	lsls	r2, r2, #4
    2516:	4904      	ldr	r1, [pc, #16]	; (2528 <_spi_m_sync_enable+0x24>)
    2518:	4b04      	ldr	r3, [pc, #16]	; (252c <_spi_m_sync_enable+0x28>)
    251a:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    251c:	6820      	ldr	r0, [r4, #0]
    251e:	4b04      	ldr	r3, [pc, #16]	; (2530 <_spi_m_sync_enable+0x2c>)
    2520:	4798      	blx	r3
}
    2522:	bd10      	pop	{r4, pc}
    2524:	2000      	movs	r0, #0
    2526:	e7f4      	b.n	2512 <_spi_m_sync_enable+0xe>
    2528:	00004e9c 	.word	0x00004e9c
    252c:	000020d5 	.word	0x000020d5
    2530:	000023cd 	.word	0x000023cd

00002534 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    2534:	b510      	push	{r4, lr}
    2536:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    2538:	d00b      	beq.n	2552 <_spi_m_sync_disable+0x1e>
    253a:	6800      	ldr	r0, [r0, #0]
    253c:	1e43      	subs	r3, r0, #1
    253e:	4198      	sbcs	r0, r3
    2540:	b2c0      	uxtb	r0, r0
    2542:	4a05      	ldr	r2, [pc, #20]	; (2558 <_spi_m_sync_disable+0x24>)
    2544:	4905      	ldr	r1, [pc, #20]	; (255c <_spi_m_sync_disable+0x28>)
    2546:	4b06      	ldr	r3, [pc, #24]	; (2560 <_spi_m_sync_disable+0x2c>)
    2548:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    254a:	6820      	ldr	r0, [r4, #0]
    254c:	4b05      	ldr	r3, [pc, #20]	; (2564 <_spi_m_sync_disable+0x30>)
    254e:	4798      	blx	r3
}
    2550:	bd10      	pop	{r4, pc}
    2552:	2000      	movs	r0, #0
    2554:	e7f5      	b.n	2542 <_spi_m_sync_disable+0xe>
    2556:	46c0      	nop			; (mov r8, r8)
    2558:	0000099c 	.word	0x0000099c
    255c:	00004e9c 	.word	0x00004e9c
    2560:	000020d5 	.word	0x000020d5
    2564:	000023ed 	.word	0x000023ed

00002568 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    2568:	b5f0      	push	{r4, r5, r6, r7, lr}
    256a:	46de      	mov	lr, fp
    256c:	4657      	mov	r7, sl
    256e:	464e      	mov	r6, r9
    2570:	4645      	mov	r5, r8
    2572:	b5e0      	push	{r5, r6, r7, lr}
    2574:	b083      	sub	sp, #12
    2576:	4681      	mov	r9, r0
    2578:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    257a:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    257c:	680b      	ldr	r3, [r1, #0]
    257e:	4698      	mov	r8, r3
    2580:	684d      	ldr	r5, [r1, #4]
    2582:	7903      	ldrb	r3, [r0, #4]
    2584:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    2586:	2800      	cmp	r0, #0
    2588:	d015      	beq.n	25b6 <_spi_m_sync_trans+0x4e>
    258a:	0020      	movs	r0, r4
    258c:	1e43      	subs	r3, r0, #1
    258e:	4198      	sbcs	r0, r3
    2590:	b2c0      	uxtb	r0, r0
    2592:	4a36      	ldr	r2, [pc, #216]	; (266c <_spi_m_sync_trans+0x104>)
    2594:	4936      	ldr	r1, [pc, #216]	; (2670 <_spi_m_sync_trans+0x108>)
    2596:	4b37      	ldr	r3, [pc, #220]	; (2674 <_spi_m_sync_trans+0x10c>)
    2598:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    259a:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    259c:	075b      	lsls	r3, r3, #29
    259e:	d13f      	bne.n	2620 <_spi_m_sync_trans+0xb8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    25a0:	2303      	movs	r3, #3
    25a2:	69e0      	ldr	r0, [r4, #28]
    25a4:	4018      	ands	r0, r3
    25a6:	d1fc      	bne.n	25a2 <_spi_m_sync_trans+0x3a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    25a8:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    25aa:	079b      	lsls	r3, r3, #30
    25ac:	d53b      	bpl.n	2626 <_spi_m_sync_trans+0xbe>
    25ae:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    25b0:	2301      	movs	r3, #1
    25b2:	469c      	mov	ip, r3
    25b4:	e009      	b.n	25ca <_spi_m_sync_trans+0x62>
    25b6:	2000      	movs	r0, #0
    25b8:	e7eb      	b.n	2592 <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    25ba:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    25bc:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    25be:	b25b      	sxtb	r3, r3
    25c0:	2b00      	cmp	r3, #0
    25c2:	db16      	blt.n	25f2 <_spi_m_sync_trans+0x8a>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    25c4:	68b3      	ldr	r3, [r6, #8]
    25c6:	4283      	cmp	r3, r0
    25c8:	d927      	bls.n	261a <_spi_m_sync_trans+0xb2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    25ca:	7e23      	ldrb	r3, [r4, #24]
    25cc:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    25ce:	2104      	movs	r1, #4
    25d0:	4219      	tst	r1, r3
    25d2:	d02b      	beq.n	262c <_spi_m_sync_trans+0xc4>
	return ((Sercom *)hw)->SPI.DATA.reg;
    25d4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    25d6:	2d00      	cmp	r5, #0
    25d8:	d0f0      	beq.n	25bc <_spi_m_sync_trans+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    25da:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    25dc:	9901      	ldr	r1, [sp, #4]
    25de:	2901      	cmp	r1, #1
    25e0:	d9eb      	bls.n	25ba <_spi_m_sync_trans+0x52>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    25e2:	0a3f      	lsrs	r7, r7, #8
    25e4:	706f      	strb	r7, [r5, #1]
    25e6:	3502      	adds	r5, #2
    25e8:	e7e8      	b.n	25bc <_spi_m_sync_trans+0x54>
		data = *ctrl->txbuf++;
    25ea:	2101      	movs	r1, #1
    25ec:	468b      	mov	fp, r1
    25ee:	44d8      	add	r8, fp
    25f0:	e037      	b.n	2662 <_spi_m_sync_trans+0xfa>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    25f2:	2301      	movs	r3, #1
    25f4:	425b      	negs	r3, r3
    25f6:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    25f8:	3381      	adds	r3, #129	; 0x81
    25fa:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    25fc:	2013      	movs	r0, #19
    25fe:	4240      	negs	r0, r0
	tmp &= mask;
    2600:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    2602:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    2604:	4213      	tst	r3, r2
    2606:	d0fc      	beq.n	2602 <_spi_m_sync_trans+0x9a>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2608:	2303      	movs	r3, #3
    260a:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    260c:	b003      	add	sp, #12
    260e:	bc3c      	pop	{r2, r3, r4, r5}
    2610:	4690      	mov	r8, r2
    2612:	4699      	mov	r9, r3
    2614:	46a2      	mov	sl, r4
    2616:	46ab      	mov	fp, r5
    2618:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    261a:	4293      	cmp	r3, r2
    261c:	d8d5      	bhi.n	25ca <_spi_m_sync_trans+0x62>
    261e:	e7ef      	b.n	2600 <_spi_m_sync_trans+0x98>
		return ERR_BUSY;
    2620:	2004      	movs	r0, #4
    2622:	4240      	negs	r0, r0
    2624:	e7f2      	b.n	260c <_spi_m_sync_trans+0xa4>
		return ERR_NOT_INITIALIZED;
    2626:	2014      	movs	r0, #20
    2628:	4240      	negs	r0, r0
    262a:	e7ef      	b.n	260c <_spi_m_sync_trans+0xa4>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    262c:	4290      	cmp	r0, r2
    262e:	d8c6      	bhi.n	25be <_spi_m_sync_trans+0x56>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    2630:	4667      	mov	r7, ip
    2632:	421f      	tst	r7, r3
    2634:	d0c3      	beq.n	25be <_spi_m_sync_trans+0x56>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    2636:	464f      	mov	r7, r9
    2638:	88ff      	ldrh	r7, [r7, #6]
    263a:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    263c:	4647      	mov	r7, r8
    263e:	2f00      	cmp	r7, #0
    2640:	d00f      	beq.n	2662 <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    2642:	783f      	ldrb	r7, [r7, #0]
    2644:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    2646:	9901      	ldr	r1, [sp, #4]
    2648:	2901      	cmp	r1, #1
    264a:	d9ce      	bls.n	25ea <_spi_m_sync_trans+0x82>
			data |= (*ctrl->txbuf) << 8;
    264c:	4647      	mov	r7, r8
    264e:	787f      	ldrb	r7, [r7, #1]
    2650:	023f      	lsls	r7, r7, #8
    2652:	46bb      	mov	fp, r7
    2654:	4657      	mov	r7, sl
    2656:	4659      	mov	r1, fp
    2658:	430f      	orrs	r7, r1
    265a:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    265c:	2102      	movs	r1, #2
    265e:	468b      	mov	fp, r1
    2660:	44d8      	add	r8, fp
	ctrl->txcnt++;
    2662:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    2664:	4657      	mov	r7, sl
    2666:	62a7      	str	r7, [r4, #40]	; 0x28
    2668:	e7a9      	b.n	25be <_spi_m_sync_trans+0x56>
    266a:	46c0      	nop			; (mov r8, r8)
    266c:	00000a85 	.word	0x00000a85
    2670:	00004e9c 	.word	0x00004e9c
    2674:	000020d5 	.word	0x000020d5

00002678 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    2678:	4b12      	ldr	r3, [pc, #72]	; (26c4 <_sysctrl_init_sources+0x4c>)
    267a:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    267c:	6a1a      	ldr	r2, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    267e:	4812      	ldr	r0, [pc, #72]	; (26c8 <_sysctrl_init_sources+0x50>)
    2680:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    2682:	0f92      	lsrs	r2, r2, #30
    2684:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    2686:	2002      	movs	r0, #2
    2688:	4302      	orrs	r2, r0
    268a:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    268c:	621a      	str	r2, [r3, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    268e:	699a      	ldr	r2, [r3, #24]
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    2690:	21fe      	movs	r1, #254	; 0xfe
    2692:	03c9      	lsls	r1, r1, #15
    2694:	400a      	ands	r2, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    2696:	214a      	movs	r1, #74	; 0x4a
    2698:	430a      	orrs	r2, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
    269a:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    269c:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    269e:	392b      	subs	r1, #43	; 0x2b
    26a0:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    26a2:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    26a4:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    26a6:	2204      	movs	r2, #4
    26a8:	68cb      	ldr	r3, [r1, #12]
    26aa:	421a      	tst	r2, r3
    26ac:	d0fc      	beq.n	26a8 <_sysctrl_init_sources+0x30>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    26ae:	4905      	ldr	r1, [pc, #20]	; (26c4 <_sysctrl_init_sources+0x4c>)
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    26b0:	2208      	movs	r2, #8
    26b2:	68cb      	ldr	r3, [r1, #12]
    26b4:	421a      	tst	r2, r3
    26b6:	d0fc      	beq.n	26b2 <_sysctrl_init_sources+0x3a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    26b8:	4a02      	ldr	r2, [pc, #8]	; (26c4 <_sysctrl_init_sources+0x4c>)
    26ba:	6a13      	ldr	r3, [r2, #32]
    26bc:	2180      	movs	r1, #128	; 0x80
    26be:	430b      	orrs	r3, r1
    26c0:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    26c2:	4770      	bx	lr
    26c4:	40000800 	.word	0x40000800
    26c8:	0fff0000 	.word	0x0fff0000

000026cc <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    26cc:	2202      	movs	r2, #2
    26ce:	4b17      	ldr	r3, [pc, #92]	; (272c <_sysctrl_init_referenced_generators+0x60>)
    26d0:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    26d2:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    26d4:	320e      	adds	r2, #14
    26d6:	68cb      	ldr	r3, [r1, #12]
    26d8:	421a      	tst	r2, r3
    26da:	d0fc      	beq.n	26d6 <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    26dc:	4a14      	ldr	r2, [pc, #80]	; (2730 <_sysctrl_init_referenced_generators+0x64>)
    26de:	4b13      	ldr	r3, [pc, #76]	; (272c <_sysctrl_init_referenced_generators+0x60>)
    26e0:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    26e2:	4b14      	ldr	r3, [pc, #80]	; (2734 <_sysctrl_init_referenced_generators+0x68>)
    26e4:	681b      	ldr	r3, [r3, #0]
    26e6:	0e9b      	lsrs	r3, r3, #26
    26e8:	2b3f      	cmp	r3, #63	; 0x3f
    26ea:	d015      	beq.n	2718 <_sysctrl_init_referenced_generators+0x4c>
    26ec:	029b      	lsls	r3, r3, #10
    26ee:	2280      	movs	r2, #128	; 0x80
    26f0:	0092      	lsls	r2, r2, #2
    26f2:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    26f4:	4a0d      	ldr	r2, [pc, #52]	; (272c <_sysctrl_init_referenced_generators+0x60>)
    26f6:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    26f8:	2393      	movs	r3, #147	; 0x93
    26fa:	005b      	lsls	r3, r3, #1
    26fc:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    26fe:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    2700:	075b      	lsls	r3, r3, #29
    2702:	d50c      	bpl.n	271e <_sysctrl_init_referenced_generators+0x52>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2704:	0011      	movs	r1, r2
	tmp &= mask;
    2706:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    2708:	68cb      	ldr	r3, [r1, #12]
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    270a:	421a      	tst	r2, r3
    270c:	d0fc      	beq.n	2708 <_sysctrl_init_referenced_generators+0x3c>
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    270e:	4a0a      	ldr	r2, [pc, #40]	; (2738 <_sysctrl_init_referenced_generators+0x6c>)
    2710:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    2712:	09db      	lsrs	r3, r3, #7
    2714:	d1fc      	bne.n	2710 <_sysctrl_init_referenced_generators+0x44>
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    2716:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    2718:	23fc      	movs	r3, #252	; 0xfc
    271a:	01db      	lsls	r3, r3, #7
    271c:	e7ea      	b.n	26f4 <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    271e:	4903      	ldr	r1, [pc, #12]	; (272c <_sysctrl_init_referenced_generators+0x60>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    2720:	2210      	movs	r2, #16
    2722:	68cb      	ldr	r3, [r1, #12]
    2724:	421a      	tst	r2, r3
    2726:	d0fc      	beq.n	2722 <_sysctrl_init_referenced_generators+0x56>
    2728:	e7f1      	b.n	270e <_sysctrl_init_referenced_generators+0x42>
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	40000800 	.word	0x40000800
    2730:	0401bb80 	.word	0x0401bb80
    2734:	00806024 	.word	0x00806024
    2738:	40000c00 	.word	0x40000c00

0000273c <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    273c:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    273e:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2740:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2742:	07d2      	lsls	r2, r2, #31
    2744:	d400      	bmi.n	2748 <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    2746:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2748:	2201      	movs	r2, #1
    274a:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    274c:	6803      	ldr	r3, [r0, #0]
    274e:	4798      	blx	r3
}
    2750:	e7f9      	b.n	2746 <tc_interrupt_handler+0xa>
	...

00002754 <_timer_init>:
{
    2754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2756:	0007      	movs	r7, r0
    2758:	000c      	movs	r4, r1
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    275a:	4b4a      	ldr	r3, [pc, #296]	; (2884 <_timer_init+0x130>)
    275c:	18cd      	adds	r5, r1, r3
    275e:	0aad      	lsrs	r5, r5, #10
    2760:	b2ed      	uxtb	r5, r5
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    2762:	1ceb      	adds	r3, r5, #3
    2764:	b2db      	uxtb	r3, r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
		if (_tcs[i].number == tc_offset) {
    2766:	2b03      	cmp	r3, #3
    2768:	d062      	beq.n	2830 <_timer_init+0xdc>
    276a:	2b04      	cmp	r3, #4
    276c:	d05e      	beq.n	282c <_timer_init+0xd8>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    276e:	2602      	movs	r6, #2
		if (_tcs[i].number == tc_offset) {
    2770:	2b05      	cmp	r3, #5
    2772:	d05e      	beq.n	2832 <_timer_init+0xde>
			return i;
		}
	}

	ASSERT(false);
    2774:	22a9      	movs	r2, #169	; 0xa9
    2776:	0052      	lsls	r2, r2, #1
    2778:	4943      	ldr	r1, [pc, #268]	; (2888 <_timer_init+0x134>)
    277a:	2000      	movs	r0, #0
    277c:	4b43      	ldr	r3, [pc, #268]	; (288c <_timer_init+0x138>)
    277e:	4798      	blx	r3
	return -1;
    2780:	2601      	movs	r6, #1
    2782:	4276      	negs	r6, r6
	device->hw = hw;
    2784:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2786:	228f      	movs	r2, #143	; 0x8f
    2788:	493f      	ldr	r1, [pc, #252]	; (2888 <_timer_init+0x134>)
    278a:	2001      	movs	r0, #1
    278c:	4b3f      	ldr	r3, [pc, #252]	; (288c <_timer_init+0x138>)
    278e:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2790:	7be3      	ldrb	r3, [r4, #15]
    2792:	09db      	lsrs	r3, r3, #7
    2794:	d1fc      	bne.n	2790 <_timer_init+0x3c>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2796:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2798:	079b      	lsls	r3, r3, #30
    279a:	d504      	bpl.n	27a6 <_timer_init+0x52>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    279c:	2300      	movs	r3, #0
    279e:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    27a0:	7be3      	ldrb	r3, [r4, #15]
    27a2:	09db      	lsrs	r3, r3, #7
    27a4:	d1fc      	bne.n	27a0 <_timer_init+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    27a6:	2301      	movs	r3, #1
    27a8:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    27aa:	7be3      	ldrb	r3, [r4, #15]
    27ac:	09db      	lsrs	r3, r3, #7
    27ae:	d1fc      	bne.n	27aa <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    27b0:	0031      	movs	r1, r6
    27b2:	00b3      	lsls	r3, r6, #2
    27b4:	199b      	adds	r3, r3, r6
    27b6:	009a      	lsls	r2, r3, #2
    27b8:	4b35      	ldr	r3, [pc, #212]	; (2890 <_timer_init+0x13c>)
    27ba:	189b      	adds	r3, r3, r2
    27bc:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    27be:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    27c0:	7918      	ldrb	r0, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    27c2:	7220      	strb	r0, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    27c4:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    27c6:	8163      	strh	r3, [r4, #10]
    27c8:	230c      	movs	r3, #12
    27ca:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    27cc:	2b08      	cmp	r3, #8
    27ce:	d032      	beq.n	2836 <_timer_init+0xe2>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    27d0:	2b00      	cmp	r3, #0
    27d2:	d13d      	bne.n	2850 <_timer_init+0xfc>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    27d4:	482e      	ldr	r0, [pc, #184]	; (2890 <_timer_init+0x13c>)
    27d6:	00b3      	lsls	r3, r6, #2
    27d8:	199a      	adds	r2, r3, r6
    27da:	0092      	lsls	r2, r2, #2
    27dc:	1882      	adds	r2, r0, r2
    27de:	8992      	ldrh	r2, [r2, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    27e0:	8322      	strh	r2, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    27e2:	199b      	adds	r3, r3, r6
    27e4:	009b      	lsls	r3, r3, #2
    27e6:	18c3      	adds	r3, r0, r3
    27e8:	8a1b      	ldrh	r3, [r3, #16]
    27ea:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    27ec:	2301      	movs	r3, #1
    27ee:	7363      	strb	r3, [r4, #13]
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    27f0:	4b28      	ldr	r3, [pc, #160]	; (2894 <_timer_init+0x140>)
    27f2:	429c      	cmp	r4, r3
    27f4:	d03d      	beq.n	2872 <_timer_init+0x11e>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    27f6:	4b28      	ldr	r3, [pc, #160]	; (2898 <_timer_init+0x144>)
    27f8:	429c      	cmp	r4, r3
    27fa:	d03d      	beq.n	2878 <_timer_init+0x124>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    27fc:	4b27      	ldr	r3, [pc, #156]	; (289c <_timer_init+0x148>)
    27fe:	429c      	cmp	r4, r3
    2800:	d03d      	beq.n	287e <_timer_init+0x12a>
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    2802:	3512      	adds	r5, #18
  if ((int32_t)(IRQn) >= 0)
    2804:	b2eb      	uxtb	r3, r5
    2806:	062a      	lsls	r2, r5, #24
    2808:	d40e      	bmi.n	2828 <_timer_init+0xd4>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    280a:	221f      	movs	r2, #31
    280c:	401a      	ands	r2, r3
    280e:	2301      	movs	r3, #1
    2810:	4093      	lsls	r3, r2
    2812:	4a23      	ldr	r2, [pc, #140]	; (28a0 <_timer_init+0x14c>)
    2814:	2180      	movs	r1, #128	; 0x80
    2816:	5053      	str	r3, [r2, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2818:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    281c:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2820:	3101      	adds	r1, #1
    2822:	31ff      	adds	r1, #255	; 0xff
    2824:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2826:	6013      	str	r3, [r2, #0]
}
    2828:	2000      	movs	r0, #0
    282a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    282c:	2601      	movs	r6, #1
    282e:	e000      	b.n	2832 <_timer_init+0xde>
    2830:	2600      	movs	r6, #0
			return i;
    2832:	b276      	sxtb	r6, r6
    2834:	e7a6      	b.n	2784 <_timer_init+0x30>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2836:	4916      	ldr	r1, [pc, #88]	; (2890 <_timer_init+0x13c>)
    2838:	00b3      	lsls	r3, r6, #2
    283a:	199a      	adds	r2, r3, r6
    283c:	0092      	lsls	r2, r2, #2
    283e:	188a      	adds	r2, r1, r2
    2840:	68d2      	ldr	r2, [r2, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2842:	61a2      	str	r2, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2844:	199b      	adds	r3, r3, r6
    2846:	009b      	lsls	r3, r3, #2
    2848:	18cb      	adds	r3, r1, r3
    284a:	691b      	ldr	r3, [r3, #16]
    284c:	61e3      	str	r3, [r4, #28]
    284e:	e7cd      	b.n	27ec <_timer_init+0x98>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2850:	2b04      	cmp	r3, #4
    2852:	d1cb      	bne.n	27ec <_timer_init+0x98>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    2854:	480e      	ldr	r0, [pc, #56]	; (2890 <_timer_init+0x13c>)
    2856:	00b3      	lsls	r3, r6, #2
    2858:	199a      	adds	r2, r3, r6
    285a:	0092      	lsls	r2, r2, #2
    285c:	1882      	adds	r2, r0, r2
    285e:	7b16      	ldrb	r6, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2860:	7626      	strb	r6, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    2862:	7c12      	ldrb	r2, [r2, #16]
    2864:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2866:	185b      	adds	r3, r3, r1
    2868:	009b      	lsls	r3, r3, #2
    286a:	18c3      	adds	r3, r0, r3
    286c:	7a1b      	ldrb	r3, [r3, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    286e:	7523      	strb	r3, [r4, #20]
    2870:	e7bc      	b.n	27ec <_timer_init+0x98>
		_tc3_dev = (struct _timer_device *)dev;
    2872:	4b0c      	ldr	r3, [pc, #48]	; (28a4 <_timer_init+0x150>)
    2874:	601f      	str	r7, [r3, #0]
    2876:	e7c4      	b.n	2802 <_timer_init+0xae>
		_tc4_dev = (struct _timer_device *)dev;
    2878:	4b0a      	ldr	r3, [pc, #40]	; (28a4 <_timer_init+0x150>)
    287a:	605f      	str	r7, [r3, #4]
    287c:	e7c1      	b.n	2802 <_timer_init+0xae>
		_tc5_dev = (struct _timer_device *)dev;
    287e:	4b09      	ldr	r3, [pc, #36]	; (28a4 <_timer_init+0x150>)
    2880:	609f      	str	r7, [r3, #8]
    2882:	e7be      	b.n	2802 <_timer_init+0xae>
    2884:	bdffd400 	.word	0xbdffd400
    2888:	00004ef4 	.word	0x00004ef4
    288c:	000020d5 	.word	0x000020d5
    2890:	00004eb8 	.word	0x00004eb8
    2894:	42002c00 	.word	0x42002c00
    2898:	42003000 	.word	0x42003000
    289c:	42003400 	.word	0x42003400
    28a0:	e000e100 	.word	0xe000e100
    28a4:	20000798 	.word	0x20000798

000028a8 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    28a8:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    28aa:	8813      	ldrh	r3, [r2, #0]
    28ac:	2102      	movs	r1, #2
    28ae:	430b      	orrs	r3, r1
    28b0:	8013      	strh	r3, [r2, #0]
}
    28b2:	4770      	bx	lr

000028b4 <_timer_stop>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    28b4:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    28b6:	8813      	ldrh	r3, [r2, #0]
    28b8:	2102      	movs	r1, #2
    28ba:	438b      	bics	r3, r1
    28bc:	8013      	strh	r3, [r2, #0]
}
    28be:	4770      	bx	lr

000028c0 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    28c0:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    28c2:	8818      	ldrh	r0, [r3, #0]
	return (bool)tmp;
    28c4:	0780      	lsls	r0, r0, #30
    28c6:	0fc0      	lsrs	r0, r0, #31
}
    28c8:	4770      	bx	lr

000028ca <_tc_get_timer>:
}
    28ca:	2000      	movs	r0, #0
    28cc:	4770      	bx	lr
	...

000028d0 <_timer_set_irq>:
{
    28d0:	b510      	push	{r4, lr}
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    28d2:	68c0      	ldr	r0, [r0, #12]
    28d4:	4b04      	ldr	r3, [pc, #16]	; (28e8 <_timer_set_irq+0x18>)
    28d6:	469c      	mov	ip, r3
    28d8:	4460      	add	r0, ip
    28da:	0a80      	lsrs	r0, r0, #10
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    28dc:	3012      	adds	r0, #18
    28de:	b2c0      	uxtb	r0, r0
    28e0:	4b02      	ldr	r3, [pc, #8]	; (28ec <_timer_set_irq+0x1c>)
    28e2:	4798      	blx	r3
}
    28e4:	bd10      	pop	{r4, pc}
    28e6:	46c0      	nop			; (mov r8, r8)
    28e8:	bdffd400 	.word	0xbdffd400
    28ec:	000021c5 	.word	0x000021c5

000028f0 <TC3_Handler>:
{
    28f0:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
    28f2:	4b02      	ldr	r3, [pc, #8]	; (28fc <TC3_Handler+0xc>)
    28f4:	6818      	ldr	r0, [r3, #0]
    28f6:	4b02      	ldr	r3, [pc, #8]	; (2900 <TC3_Handler+0x10>)
    28f8:	4798      	blx	r3
}
    28fa:	bd10      	pop	{r4, pc}
    28fc:	20000798 	.word	0x20000798
    2900:	0000273d 	.word	0x0000273d

00002904 <TC4_Handler>:
{
    2904:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    2906:	4b02      	ldr	r3, [pc, #8]	; (2910 <TC4_Handler+0xc>)
    2908:	6858      	ldr	r0, [r3, #4]
    290a:	4b02      	ldr	r3, [pc, #8]	; (2914 <TC4_Handler+0x10>)
    290c:	4798      	blx	r3
}
    290e:	bd10      	pop	{r4, pc}
    2910:	20000798 	.word	0x20000798
    2914:	0000273d 	.word	0x0000273d

00002918 <TC5_Handler>:
{
    2918:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc5_dev);
    291a:	4b02      	ldr	r3, [pc, #8]	; (2924 <TC5_Handler+0xc>)
    291c:	6898      	ldr	r0, [r3, #8]
    291e:	4b02      	ldr	r3, [pc, #8]	; (2928 <TC5_Handler+0x10>)
    2920:	4798      	blx	r3
}
    2922:	bd10      	pop	{r4, pc}
    2924:	20000798 	.word	0x20000798
    2928:	0000273d 	.word	0x0000273d

0000292c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    292c:	2000      	movs	r0, #0
    292e:	4770      	bx	lr

00002930 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    2930:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    2932:	7c83      	ldrb	r3, [r0, #18]
    2934:	220f      	movs	r2, #15
    2936:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2938:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    293a:	3a08      	subs	r2, #8
    293c:	400a      	ands	r2, r1
    293e:	2a01      	cmp	r2, #1
    2940:	d00b      	beq.n	295a <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2942:	015a      	lsls	r2, r3, #5
    2944:	491a      	ldr	r1, [pc, #104]	; (29b0 <_usb_d_dev_handle_setup+0x80>)
    2946:	468c      	mov	ip, r1
    2948:	4462      	add	r2, ip
    294a:	2110      	movs	r1, #16
    294c:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    294e:	015b      	lsls	r3, r3, #5
    2950:	4a18      	ldr	r2, [pc, #96]	; (29b4 <_usb_d_dev_handle_setup+0x84>)
    2952:	4694      	mov	ip, r2
    2954:	4463      	add	r3, ip
    2956:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    2958:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    295a:	064a      	lsls	r2, r1, #25
    295c:	d50e      	bpl.n	297c <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    295e:	7cc2      	ldrb	r2, [r0, #19]
    2960:	2140      	movs	r1, #64	; 0x40
    2962:	438a      	bics	r2, r1
    2964:	74c2      	strb	r2, [r0, #19]
    2966:	015a      	lsls	r2, r3, #5
    2968:	4c13      	ldr	r4, [pc, #76]	; (29b8 <_usb_d_dev_handle_setup+0x88>)
    296a:	46a4      	mov	ip, r4
    296c:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    296e:	2580      	movs	r5, #128	; 0x80
    2970:	2482      	movs	r4, #130	; 0x82
    2972:	0064      	lsls	r4, r4, #1
    2974:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2976:	2406      	movs	r4, #6
    2978:	34ff      	adds	r4, #255	; 0xff
    297a:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    297c:	7cc2      	ldrb	r2, [r0, #19]
    297e:	2108      	movs	r1, #8
    2980:	438a      	bics	r2, r1
    2982:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    2984:	015a      	lsls	r2, r3, #5
    2986:	490d      	ldr	r1, [pc, #52]	; (29bc <_usb_d_dev_handle_setup+0x8c>)
    2988:	1889      	adds	r1, r1, r2
    298a:	2400      	movs	r4, #0
    298c:	728c      	strb	r4, [r1, #10]
    298e:	768c      	strb	r4, [r1, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2990:	0013      	movs	r3, r2
    2992:	4907      	ldr	r1, [pc, #28]	; (29b0 <_usb_d_dev_handle_setup+0x80>)
    2994:	468c      	mov	ip, r1
    2996:	4463      	add	r3, ip
    2998:	216f      	movs	r1, #111	; 0x6f
    299a:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    299c:	4b05      	ldr	r3, [pc, #20]	; (29b4 <_usb_d_dev_handle_setup+0x84>)
    299e:	469c      	mov	ip, r3
    29a0:	4462      	add	r2, ip
    29a2:	7011      	strb	r1, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    29a4:	7c80      	ldrb	r0, [r0, #18]
    29a6:	4b06      	ldr	r3, [pc, #24]	; (29c0 <_usb_d_dev_handle_setup+0x90>)
    29a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29aa:	4798      	blx	r3
    29ac:	e7d4      	b.n	2958 <_usb_d_dev_handle_setup+0x28>
    29ae:	46c0      	nop			; (mov r8, r8)
    29b0:	41005100 	.word	0x41005100
    29b4:	41005108 	.word	0x41005108
    29b8:	41005000 	.word	0x41005000
    29bc:	200007a4 	.word	0x200007a4
    29c0:	20000824 	.word	0x20000824

000029c4 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    29c4:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    29c6:	2220      	movs	r2, #32
    29c8:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    29ca:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    29cc:	7c81      	ldrb	r1, [r0, #18]
    29ce:	230f      	movs	r3, #15
    29d0:	400b      	ands	r3, r1
    29d2:	015b      	lsls	r3, r3, #5
    29d4:	4905      	ldr	r1, [pc, #20]	; (29ec <_usb_d_dev_handle_stall+0x28>)
    29d6:	468c      	mov	ip, r1
    29d8:	4463      	add	r3, ip
    29da:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    29dc:	6882      	ldr	r2, [r0, #8]
    29de:	7c80      	ldrb	r0, [r0, #18]
    29e0:	4b03      	ldr	r3, [pc, #12]	; (29f0 <_usb_d_dev_handle_stall+0x2c>)
    29e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    29e4:	2101      	movs	r1, #1
    29e6:	4798      	blx	r3
}
    29e8:	bd10      	pop	{r4, pc}
    29ea:	46c0      	nop			; (mov r8, r8)
    29ec:	41005108 	.word	0x41005108
    29f0:	20000824 	.word	0x20000824

000029f4 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    29f4:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    29f6:	7c83      	ldrb	r3, [r0, #18]
    29f8:	2bff      	cmp	r3, #255	; 0xff
    29fa:	d002      	beq.n	2a02 <_usb_d_dev_trans_done+0xe>
    29fc:	7cc2      	ldrb	r2, [r0, #19]
    29fe:	0652      	lsls	r2, r2, #25
    2a00:	d400      	bmi.n	2a04 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    2a02:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    2a04:	7cc2      	ldrb	r2, [r0, #19]
    2a06:	2440      	movs	r4, #64	; 0x40
    2a08:	43a2      	bics	r2, r4
    2a0a:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    2a0c:	6882      	ldr	r2, [r0, #8]
    2a0e:	4802      	ldr	r0, [pc, #8]	; (2a18 <_usb_d_dev_trans_done+0x24>)
    2a10:	6b04      	ldr	r4, [r0, #48]	; 0x30
    2a12:	0018      	movs	r0, r3
    2a14:	47a0      	blx	r4
    2a16:	e7f4      	b.n	2a02 <_usb_d_dev_trans_done+0xe>
    2a18:	20000824 	.word	0x20000824

00002a1c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    2a1c:	b530      	push	{r4, r5, lr}
    2a1e:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2a20:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    2a22:	ac01      	add	r4, sp, #4
    2a24:	2525      	movs	r5, #37	; 0x25
    2a26:	7025      	strb	r5, [r4, #0]
    2a28:	3525      	adds	r5, #37	; 0x25
    2a2a:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    2a2c:	2bff      	cmp	r3, #255	; 0xff
    2a2e:	d01b      	beq.n	2a68 <_usb_d_dev_trans_stop+0x4c>
    2a30:	7cc4      	ldrb	r4, [r0, #19]
    2a32:	0664      	lsls	r4, r4, #25
    2a34:	d518      	bpl.n	2a68 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    2a36:	240f      	movs	r4, #15
    2a38:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    2a3a:	2900      	cmp	r1, #0
    2a3c:	d016      	beq.n	2a6c <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2a3e:	015c      	lsls	r4, r3, #5
    2a40:	4d0e      	ldr	r5, [pc, #56]	; (2a7c <_usb_d_dev_trans_stop+0x60>)
    2a42:	46ac      	mov	ip, r5
    2a44:	4464      	add	r4, ip
    2a46:	2580      	movs	r5, #128	; 0x80
    2a48:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    2a4a:	ac01      	add	r4, sp, #4
    2a4c:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2a4e:	0159      	lsls	r1, r3, #5
    2a50:	4d0a      	ldr	r5, [pc, #40]	; (2a7c <_usb_d_dev_trans_stop+0x60>)
    2a52:	46ac      	mov	ip, r5
    2a54:	4461      	add	r1, ip
    2a56:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2a58:	015b      	lsls	r3, r3, #5
    2a5a:	4909      	ldr	r1, [pc, #36]	; (2a80 <_usb_d_dev_trans_stop+0x64>)
    2a5c:	468c      	mov	ip, r1
    2a5e:	4463      	add	r3, ip
    2a60:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    2a62:	0011      	movs	r1, r2
    2a64:	4b07      	ldr	r3, [pc, #28]	; (2a84 <_usb_d_dev_trans_stop+0x68>)
    2a66:	4798      	blx	r3
}
    2a68:	b003      	add	sp, #12
    2a6a:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2a6c:	015c      	lsls	r4, r3, #5
    2a6e:	4d03      	ldr	r5, [pc, #12]	; (2a7c <_usb_d_dev_trans_stop+0x60>)
    2a70:	46ac      	mov	ip, r5
    2a72:	4464      	add	r4, ip
    2a74:	2540      	movs	r5, #64	; 0x40
    2a76:	7165      	strb	r5, [r4, #5]
    2a78:	e7e7      	b.n	2a4a <_usb_d_dev_trans_stop+0x2e>
    2a7a:	46c0      	nop			; (mov r8, r8)
    2a7c:	41005100 	.word	0x41005100
    2a80:	41005108 	.word	0x41005108
    2a84:	000029f5 	.word	0x000029f5

00002a88 <_usb_d_dev_handle_trfail>:
{
    2a88:	b570      	push	{r4, r5, r6, lr}
    2a8a:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    2a8c:	7c83      	ldrb	r3, [r0, #18]
    2a8e:	220f      	movs	r2, #15
    2a90:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    2a92:	aa01      	add	r2, sp, #4
    2a94:	2404      	movs	r4, #4
    2a96:	7014      	strb	r4, [r2, #0]
    2a98:	3404      	adds	r4, #4
    2a9a:	7054      	strb	r4, [r2, #1]
    2a9c:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    2a9e:	2900      	cmp	r1, #0
    2aa0:	d031      	beq.n	2b06 <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2aa2:	001a      	movs	r2, r3
    2aa4:	3208      	adds	r2, #8
    2aa6:	0152      	lsls	r2, r2, #5
    2aa8:	4c32      	ldr	r4, [pc, #200]	; (2b74 <_usb_d_dev_handle_trfail+0xec>)
    2aaa:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    2aac:	0664      	lsls	r4, r4, #25
    2aae:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    2ab0:	010a      	lsls	r2, r1, #4
    2ab2:	1952      	adds	r2, r2, r5
    2ab4:	4d30      	ldr	r5, [pc, #192]	; (2b78 <_usb_d_dev_handle_trfail+0xf0>)
    2ab6:	18aa      	adds	r2, r5, r2
    2ab8:	7a95      	ldrb	r5, [r2, #10]
    2aba:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2abc:	2c02      	cmp	r4, #2
    2abe:	d02a      	beq.n	2b16 <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    2ac0:	07ac      	lsls	r4, r5, #30
    2ac2:	d541      	bpl.n	2b48 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2ac4:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    2ac6:	7a94      	ldrb	r4, [r2, #10]
    2ac8:	2602      	movs	r6, #2
    2aca:	43b4      	bics	r4, r6
    2acc:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2ace:	aa01      	add	r2, sp, #4
    2ad0:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2ad2:	015a      	lsls	r2, r3, #5
    2ad4:	4e29      	ldr	r6, [pc, #164]	; (2b7c <_usb_d_dev_handle_trfail+0xf4>)
    2ad6:	46b4      	mov	ip, r6
    2ad8:	4462      	add	r2, ip
    2ada:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2adc:	015b      	lsls	r3, r3, #5
    2ade:	4a28      	ldr	r2, [pc, #160]	; (2b80 <_usb_d_dev_handle_trfail+0xf8>)
    2ae0:	4694      	mov	ip, r2
    2ae2:	4463      	add	r3, ip
    2ae4:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    2ae6:	2307      	movs	r3, #7
    2ae8:	402b      	ands	r3, r5
    2aea:	2b01      	cmp	r3, #1
    2aec:	d13f      	bne.n	2b6e <_usb_d_dev_handle_trfail+0xe6>
    2aee:	7cc3      	ldrb	r3, [r0, #19]
    2af0:	065b      	lsls	r3, r3, #25
    2af2:	d53c      	bpl.n	2b6e <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    2af4:	7cc3      	ldrb	r3, [r0, #19]
    2af6:	09db      	lsrs	r3, r3, #7
    2af8:	4299      	cmp	r1, r3
    2afa:	d038      	beq.n	2b6e <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    2afc:	2200      	movs	r2, #0
    2afe:	0019      	movs	r1, r3
    2b00:	4b20      	ldr	r3, [pc, #128]	; (2b84 <_usb_d_dev_handle_trfail+0xfc>)
    2b02:	4798      	blx	r3
    2b04:	e033      	b.n	2b6e <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    2b06:	001a      	movs	r2, r3
    2b08:	3208      	adds	r2, #8
    2b0a:	0152      	lsls	r2, r2, #5
    2b0c:	4c19      	ldr	r4, [pc, #100]	; (2b74 <_usb_d_dev_handle_trfail+0xec>)
    2b0e:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    2b10:	2207      	movs	r2, #7
    2b12:	4014      	ands	r4, r2
    2b14:	e7cc      	b.n	2ab0 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    2b16:	07ec      	lsls	r4, r5, #31
    2b18:	d5d2      	bpl.n	2ac0 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    2b1a:	7a94      	ldrb	r4, [r2, #10]
    2b1c:	2501      	movs	r5, #1
    2b1e:	43ac      	bics	r4, r5
    2b20:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2b22:	aa01      	add	r2, sp, #4
    2b24:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2b26:	015a      	lsls	r2, r3, #5
    2b28:	4d14      	ldr	r5, [pc, #80]	; (2b7c <_usb_d_dev_handle_trfail+0xf4>)
    2b2a:	46ac      	mov	ip, r5
    2b2c:	4462      	add	r2, ip
    2b2e:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2b30:	015b      	lsls	r3, r3, #5
    2b32:	4a13      	ldr	r2, [pc, #76]	; (2b80 <_usb_d_dev_handle_trfail+0xf8>)
    2b34:	4694      	mov	ip, r2
    2b36:	4463      	add	r3, ip
    2b38:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    2b3a:	1e4b      	subs	r3, r1, #1
    2b3c:	4199      	sbcs	r1, r3
    2b3e:	b2c9      	uxtb	r1, r1
    2b40:	2204      	movs	r2, #4
    2b42:	4b10      	ldr	r3, [pc, #64]	; (2b84 <_usb_d_dev_handle_trfail+0xfc>)
    2b44:	4798      	blx	r3
    2b46:	e012      	b.n	2b6e <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    2b48:	005a      	lsls	r2, r3, #1
    2b4a:	1852      	adds	r2, r2, r1
    2b4c:	0112      	lsls	r2, r2, #4
    2b4e:	480a      	ldr	r0, [pc, #40]	; (2b78 <_usb_d_dev_handle_trfail+0xf0>)
    2b50:	1882      	adds	r2, r0, r2
    2b52:	2000      	movs	r0, #0
    2b54:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    2b56:	aa01      	add	r2, sp, #4
    2b58:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2b5a:	015a      	lsls	r2, r3, #5
    2b5c:	4807      	ldr	r0, [pc, #28]	; (2b7c <_usb_d_dev_handle_trfail+0xf4>)
    2b5e:	4684      	mov	ip, r0
    2b60:	4462      	add	r2, ip
    2b62:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2b64:	015b      	lsls	r3, r3, #5
    2b66:	4a06      	ldr	r2, [pc, #24]	; (2b80 <_usb_d_dev_handle_trfail+0xf8>)
    2b68:	4694      	mov	ip, r2
    2b6a:	4463      	add	r3, ip
    2b6c:	7019      	strb	r1, [r3, #0]
}
    2b6e:	b002      	add	sp, #8
    2b70:	bd70      	pop	{r4, r5, r6, pc}
    2b72:	46c0      	nop			; (mov r8, r8)
    2b74:	41005000 	.word	0x41005000
    2b78:	200007a4 	.word	0x200007a4
    2b7c:	41005100 	.word	0x41005100
    2b80:	41005108 	.word	0x41005108
    2b84:	00002a1d 	.word	0x00002a1d

00002b88 <_usb_d_dev_reset_epts>:
{
    2b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b8a:	46c6      	mov	lr, r8
    2b8c:	b500      	push	{lr}
    2b8e:	4d0c      	ldr	r5, [pc, #48]	; (2bc0 <_usb_d_dev_reset_epts+0x38>)
    2b90:	002c      	movs	r4, r5
    2b92:	3434      	adds	r4, #52	; 0x34
    2b94:	35e8      	adds	r5, #232	; 0xe8
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2b96:	4b0b      	ldr	r3, [pc, #44]	; (2bc4 <_usb_d_dev_reset_epts+0x3c>)
    2b98:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    2b9a:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    2b9c:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    2b9e:	2103      	movs	r1, #3
    2ba0:	0020      	movs	r0, r4
    2ba2:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    2ba4:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    2ba6:	74e6      	strb	r6, [r4, #19]
    2ba8:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    2baa:	42ac      	cmp	r4, r5
    2bac:	d1f7      	bne.n	2b9e <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    2bae:	22a0      	movs	r2, #160	; 0xa0
    2bb0:	2100      	movs	r1, #0
    2bb2:	4805      	ldr	r0, [pc, #20]	; (2bc8 <_usb_d_dev_reset_epts+0x40>)
    2bb4:	4b05      	ldr	r3, [pc, #20]	; (2bcc <_usb_d_dev_reset_epts+0x44>)
    2bb6:	4798      	blx	r3
}
    2bb8:	bc04      	pop	{r2}
    2bba:	4690      	mov	r8, r2
    2bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bbe:	46c0      	nop			; (mov r8, r8)
    2bc0:	20000824 	.word	0x20000824
    2bc4:	000029f5 	.word	0x000029f5
    2bc8:	200007a4 	.word	0x200007a4
    2bcc:	00004af1 	.word	0x00004af1

00002bd0 <_usb_d_dev_in_next>:
{
    2bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bd2:	46c6      	mov	lr, r8
    2bd4:	b500      	push	{lr}
    2bd6:	0004      	movs	r4, r0
    2bd8:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    2bda:	7c83      	ldrb	r3, [r0, #18]
    2bdc:	250f      	movs	r5, #15
    2bde:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2be0:	2900      	cmp	r1, #0
    2be2:	d100      	bne.n	2be6 <_usb_d_dev_in_next+0x16>
    2be4:	e0aa      	b.n	2d3c <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    2be6:	016a      	lsls	r2, r5, #5
    2be8:	4b5a      	ldr	r3, [pc, #360]	; (2d54 <_usb_d_dev_in_next+0x184>)
    2bea:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    2bec:	6958      	ldr	r0, [r3, #20]
    2bee:	0480      	lsls	r0, r0, #18
    2bf0:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2bf2:	8a23      	ldrh	r3, [r4, #16]
    2bf4:	4a58      	ldr	r2, [pc, #352]	; (2d58 <_usb_d_dev_in_next+0x188>)
    2bf6:	4293      	cmp	r3, r2
    2bf8:	d100      	bne.n	2bfc <_usb_d_dev_in_next+0x2c>
    2bfa:	e09a      	b.n	2d32 <_usb_d_dev_in_next+0x162>
    2bfc:	3b01      	subs	r3, #1
    2bfe:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2c00:	7ce3      	ldrb	r3, [r4, #19]
    2c02:	2707      	movs	r7, #7
    2c04:	401f      	ands	r7, r3
	if (isr) {
    2c06:	2e00      	cmp	r6, #0
    2c08:	d005      	beq.n	2c16 <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2c0a:	016b      	lsls	r3, r5, #5
    2c0c:	4953      	ldr	r1, [pc, #332]	; (2d5c <_usb_d_dev_in_next+0x18c>)
    2c0e:	468c      	mov	ip, r1
    2c10:	4463      	add	r3, ip
    2c12:	2102      	movs	r1, #2
    2c14:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    2c16:	68a3      	ldr	r3, [r4, #8]
    2c18:	18c1      	adds	r1, r0, r3
    2c1a:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    2c1c:	6863      	ldr	r3, [r4, #4]
    2c1e:	4299      	cmp	r1, r3
    2c20:	d24a      	bcs.n	2cb8 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    2c22:	1a5b      	subs	r3, r3, r1
    2c24:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    2c26:	7ce2      	ldrb	r2, [r4, #19]
    2c28:	0692      	lsls	r2, r2, #26
    2c2a:	d535      	bpl.n	2c98 <_usb_d_dev_in_next+0xc8>
    2c2c:	8a22      	ldrh	r2, [r4, #16]
    2c2e:	1c10      	adds	r0, r2, #0
    2c30:	b292      	uxth	r2, r2
    2c32:	429a      	cmp	r2, r3
    2c34:	d900      	bls.n	2c38 <_usb_d_dev_in_next+0x68>
    2c36:	1c18      	adds	r0, r3, #0
    2c38:	b283      	uxth	r3, r0
    2c3a:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    2c3c:	6823      	ldr	r3, [r4, #0]
    2c3e:	469c      	mov	ip, r3
    2c40:	4461      	add	r1, ip
    2c42:	4642      	mov	r2, r8
    2c44:	68e0      	ldr	r0, [r4, #12]
    2c46:	4b46      	ldr	r3, [pc, #280]	; (2d60 <_usb_d_dev_in_next+0x190>)
    2c48:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    2c4a:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    2c4c:	016a      	lsls	r2, r5, #5
    2c4e:	4b41      	ldr	r3, [pc, #260]	; (2d54 <_usb_d_dev_in_next+0x184>)
    2c50:	189b      	adds	r3, r3, r2
    2c52:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2c54:	016a      	lsls	r2, r5, #5
    2c56:	4b3f      	ldr	r3, [pc, #252]	; (2d54 <_usb_d_dev_in_next+0x184>)
    2c58:	189b      	adds	r3, r3, r2
    2c5a:	695a      	ldr	r2, [r3, #20]
    2c5c:	4641      	mov	r1, r8
    2c5e:	0489      	lsls	r1, r1, #18
    2c60:	0c89      	lsrs	r1, r1, #18
    2c62:	0b92      	lsrs	r2, r2, #14
    2c64:	0392      	lsls	r2, r2, #14
    2c66:	430a      	orrs	r2, r1
    2c68:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2c6a:	695a      	ldr	r2, [r3, #20]
    2c6c:	493d      	ldr	r1, [pc, #244]	; (2d64 <_usb_d_dev_in_next+0x194>)
    2c6e:	400a      	ands	r2, r1
    2c70:	615a      	str	r2, [r3, #20]
	if (!isr) {
    2c72:	2e00      	cmp	r6, #0
    2c74:	d107      	bne.n	2c86 <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    2c76:	2f01      	cmp	r7, #1
    2c78:	d059      	beq.n	2d2e <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    2c7a:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2c7c:	016b      	lsls	r3, r5, #5
    2c7e:	493a      	ldr	r1, [pc, #232]	; (2d68 <_usb_d_dev_in_next+0x198>)
    2c80:	468c      	mov	ip, r1
    2c82:	4463      	add	r3, ip
    2c84:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    2c86:	016d      	lsls	r5, r5, #5
    2c88:	4b34      	ldr	r3, [pc, #208]	; (2d5c <_usb_d_dev_in_next+0x18c>)
    2c8a:	469c      	mov	ip, r3
    2c8c:	4465      	add	r5, ip
    2c8e:	2380      	movs	r3, #128	; 0x80
    2c90:	716b      	strb	r3, [r5, #5]
}
    2c92:	bc04      	pop	{r2}
    2c94:	4690      	mov	r8, r2
    2c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c98:	1c1a      	adds	r2, r3, #0
    2c9a:	2080      	movs	r0, #128	; 0x80
    2c9c:	0180      	lsls	r0, r0, #6
    2c9e:	4283      	cmp	r3, r0
    2ca0:	d901      	bls.n	2ca6 <_usb_d_dev_in_next+0xd6>
    2ca2:	4b32      	ldr	r3, [pc, #200]	; (2d6c <_usb_d_dev_in_next+0x19c>)
    2ca4:	881a      	ldrh	r2, [r3, #0]
    2ca6:	b293      	uxth	r3, r2
    2ca8:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2caa:	6823      	ldr	r3, [r4, #0]
    2cac:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    2cae:	016a      	lsls	r2, r5, #5
    2cb0:	4b28      	ldr	r3, [pc, #160]	; (2d54 <_usb_d_dev_in_next+0x184>)
    2cb2:	189b      	adds	r3, r3, r2
    2cb4:	6119      	str	r1, [r3, #16]
    2cb6:	e7cd      	b.n	2c54 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    2cb8:	7ce3      	ldrb	r3, [r4, #19]
    2cba:	06db      	lsls	r3, r3, #27
    2cbc:	d50f      	bpl.n	2cde <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    2cbe:	7ce3      	ldrb	r3, [r4, #19]
    2cc0:	2210      	movs	r2, #16
    2cc2:	4393      	bics	r3, r2
    2cc4:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    2cc6:	016a      	lsls	r2, r5, #5
    2cc8:	4b22      	ldr	r3, [pc, #136]	; (2d54 <_usb_d_dev_in_next+0x184>)
    2cca:	189b      	adds	r3, r3, r2
    2ccc:	695a      	ldr	r2, [r3, #20]
    2cce:	0b92      	lsrs	r2, r2, #14
    2cd0:	0392      	lsls	r2, r2, #14
    2cd2:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    2cd4:	695a      	ldr	r2, [r3, #20]
    2cd6:	4923      	ldr	r1, [pc, #140]	; (2d64 <_usb_d_dev_in_next+0x194>)
    2cd8:	400a      	ands	r2, r1
    2cda:	615a      	str	r2, [r3, #20]
    2cdc:	e7c9      	b.n	2c72 <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    2cde:	2f01      	cmp	r7, #1
    2ce0:	d00e      	beq.n	2d00 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2ce2:	016d      	lsls	r5, r5, #5
    2ce4:	4b22      	ldr	r3, [pc, #136]	; (2d70 <_usb_d_dev_in_next+0x1a0>)
    2ce6:	469c      	mov	ip, r3
    2ce8:	4465      	add	r5, ip
    2cea:	234a      	movs	r3, #74	; 0x4a
    2cec:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    2cee:	8a21      	ldrh	r1, [r4, #16]
    2cf0:	4002      	ands	r2, r0
    2cf2:	4291      	cmp	r1, r2
    2cf4:	d00b      	beq.n	2d0e <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2cf6:	2100      	movs	r1, #0
    2cf8:	0020      	movs	r0, r4
    2cfa:	4b1e      	ldr	r3, [pc, #120]	; (2d74 <_usb_d_dev_in_next+0x1a4>)
    2cfc:	4798      	blx	r3
	return;
    2cfe:	e7c8      	b.n	2c92 <_usb_d_dev_in_next+0xc2>
    2d00:	016d      	lsls	r5, r5, #5
    2d02:	4b1b      	ldr	r3, [pc, #108]	; (2d70 <_usb_d_dev_in_next+0x1a0>)
    2d04:	469c      	mov	ip, r3
    2d06:	4465      	add	r5, ip
    2d08:	234b      	movs	r3, #75	; 0x4b
    2d0a:	702b      	strb	r3, [r5, #0]
    2d0c:	e7ef      	b.n	2cee <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    2d0e:	7ce3      	ldrb	r3, [r4, #19]
    2d10:	2240      	movs	r2, #64	; 0x40
    2d12:	4393      	bics	r3, r2
    2d14:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    2d16:	7ca0      	ldrb	r0, [r4, #18]
    2d18:	4b17      	ldr	r3, [pc, #92]	; (2d78 <_usb_d_dev_in_next+0x1a8>)
    2d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2d1c:	68a1      	ldr	r1, [r4, #8]
    2d1e:	4798      	blx	r3
    2d20:	2800      	cmp	r0, #0
    2d22:	d1b6      	bne.n	2c92 <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    2d24:	7ce3      	ldrb	r3, [r4, #19]
    2d26:	2240      	movs	r2, #64	; 0x40
    2d28:	4313      	orrs	r3, r2
    2d2a:	74e3      	strb	r3, [r4, #19]
    2d2c:	e7e3      	b.n	2cf6 <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    2d2e:	224e      	movs	r2, #78	; 0x4e
    2d30:	e7a4      	b.n	2c7c <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2d32:	7ce7      	ldrb	r7, [r4, #19]
    2d34:	2307      	movs	r3, #7
    2d36:	401f      	ands	r7, r3
    2d38:	4a07      	ldr	r2, [pc, #28]	; (2d58 <_usb_d_dev_in_next+0x188>)
    2d3a:	e766      	b.n	2c0a <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    2d3c:	8a03      	ldrh	r3, [r0, #16]
    2d3e:	4a06      	ldr	r2, [pc, #24]	; (2d58 <_usb_d_dev_in_next+0x188>)
    2d40:	2000      	movs	r0, #0
    2d42:	4293      	cmp	r3, r2
    2d44:	d000      	beq.n	2d48 <_usb_d_dev_in_next+0x178>
    2d46:	e759      	b.n	2bfc <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    2d48:	7ce3      	ldrb	r3, [r4, #19]
    2d4a:	2707      	movs	r7, #7
    2d4c:	401f      	ands	r7, r3
    2d4e:	2000      	movs	r0, #0
    2d50:	4a01      	ldr	r2, [pc, #4]	; (2d58 <_usb_d_dev_in_next+0x188>)
    2d52:	e760      	b.n	2c16 <_usb_d_dev_in_next+0x46>
    2d54:	200007a4 	.word	0x200007a4
    2d58:	000003ff 	.word	0x000003ff
    2d5c:	41005100 	.word	0x41005100
    2d60:	00004a6d 	.word	0x00004a6d
    2d64:	f0003fff 	.word	0xf0003fff
    2d68:	41005109 	.word	0x41005109
    2d6c:	00004f08 	.word	0x00004f08
    2d70:	41005108 	.word	0x41005108
    2d74:	000029f5 	.word	0x000029f5
    2d78:	20000824 	.word	0x20000824

00002d7c <_usb_d_dev_out_next>:
{
    2d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d7e:	46de      	mov	lr, fp
    2d80:	4657      	mov	r7, sl
    2d82:	464e      	mov	r6, r9
    2d84:	4645      	mov	r5, r8
    2d86:	b5e0      	push	{r5, r6, r7, lr}
    2d88:	0004      	movs	r4, r0
    2d8a:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    2d8c:	7c83      	ldrb	r3, [r0, #18]
    2d8e:	250f      	movs	r5, #15
    2d90:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    2d92:	2900      	cmp	r1, #0
    2d94:	d057      	beq.n	2e46 <_usb_d_dev_out_next+0xca>
    2d96:	016a      	lsls	r2, r5, #5
    2d98:	4b7d      	ldr	r3, [pc, #500]	; (2f90 <_usb_d_dev_out_next+0x214>)
    2d9a:	189b      	adds	r3, r3, r2
    2d9c:	685a      	ldr	r2, [r3, #4]
    2d9e:	0112      	lsls	r2, r2, #4
    2da0:	0c92      	lsrs	r2, r2, #18
    2da2:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    2da4:	685f      	ldr	r7, [r3, #4]
    2da6:	04bf      	lsls	r7, r7, #18
    2da8:	0cbf      	lsrs	r7, r7, #18
    2daa:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2dac:	8a06      	ldrh	r6, [r0, #16]
    2dae:	4b79      	ldr	r3, [pc, #484]	; (2f94 <_usb_d_dev_out_next+0x218>)
    2db0:	429e      	cmp	r6, r3
    2db2:	d100      	bne.n	2db6 <_usb_d_dev_out_next+0x3a>
    2db4:	e0cd      	b.n	2f52 <_usb_d_dev_out_next+0x1d6>
    2db6:	3e01      	subs	r6, #1
    2db8:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    2dba:	465f      	mov	r7, fp
    2dbc:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2dbe:	7ce3      	ldrb	r3, [r4, #19]
    2dc0:	2207      	movs	r2, #7
    2dc2:	401a      	ands	r2, r3
    2dc4:	4691      	mov	r9, r2
	if (isr) {
    2dc6:	4643      	mov	r3, r8
    2dc8:	2b00      	cmp	r3, #0
    2dca:	d005      	beq.n	2dd8 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    2dcc:	016b      	lsls	r3, r5, #5
    2dce:	4a72      	ldr	r2, [pc, #456]	; (2f98 <_usb_d_dev_out_next+0x21c>)
    2dd0:	4694      	mov	ip, r2
    2dd2:	4463      	add	r3, ip
    2dd4:	2201      	movs	r2, #1
    2dd6:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    2dd8:	7ce3      	ldrb	r3, [r4, #19]
    2dda:	069b      	lsls	r3, r3, #26
    2ddc:	d50f      	bpl.n	2dfe <_usb_d_dev_out_next+0x82>
    2dde:	6863      	ldr	r3, [r4, #4]
    2de0:	2b00      	cmp	r3, #0
    2de2:	d039      	beq.n	2e58 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    2de4:	68a0      	ldr	r0, [r4, #8]
    2de6:	1a1b      	subs	r3, r3, r0
    2de8:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    2dea:	6822      	ldr	r2, [r4, #0]
    2dec:	4694      	mov	ip, r2
    2dee:	4460      	add	r0, ip
    2df0:	68e1      	ldr	r1, [r4, #12]
    2df2:	001a      	movs	r2, r3
    2df4:	42bb      	cmp	r3, r7
    2df6:	d900      	bls.n	2dfa <_usb_d_dev_out_next+0x7e>
    2df8:	003a      	movs	r2, r7
    2dfa:	4b68      	ldr	r3, [pc, #416]	; (2f9c <_usb_d_dev_out_next+0x220>)
    2dfc:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2dfe:	6863      	ldr	r3, [r4, #4]
    2e00:	2b00      	cmp	r3, #0
    2e02:	d029      	beq.n	2e58 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    2e04:	4642      	mov	r2, r8
    2e06:	2a00      	cmp	r2, #0
    2e08:	d042      	beq.n	2e90 <_usb_d_dev_out_next+0x114>
    2e0a:	8a22      	ldrh	r2, [r4, #16]
    2e0c:	42ba      	cmp	r2, r7
    2e0e:	d93f      	bls.n	2e90 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    2e10:	7ce3      	ldrb	r3, [r4, #19]
    2e12:	2210      	movs	r2, #16
    2e14:	4393      	bics	r3, r2
    2e16:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    2e18:	68a3      	ldr	r3, [r4, #8]
    2e1a:	445b      	add	r3, fp
    2e1c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    2e1e:	464b      	mov	r3, r9
    2e20:	2b01      	cmp	r3, #1
    2e22:	d100      	bne.n	2e26 <_usb_d_dev_out_next+0xaa>
    2e24:	e087      	b.n	2f36 <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2e26:	016b      	lsls	r3, r5, #5
    2e28:	4a5d      	ldr	r2, [pc, #372]	; (2fa0 <_usb_d_dev_out_next+0x224>)
    2e2a:	4694      	mov	ip, r2
    2e2c:	4463      	add	r3, ip
    2e2e:	2225      	movs	r2, #37	; 0x25
    2e30:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    2e32:	2d00      	cmp	r5, #0
    2e34:	d102      	bne.n	2e3c <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    2e36:	4b56      	ldr	r3, [pc, #344]	; (2f90 <_usb_d_dev_out_next+0x214>)
    2e38:	68e2      	ldr	r2, [r4, #12]
    2e3a:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    2e3c:	2100      	movs	r1, #0
    2e3e:	0020      	movs	r0, r4
    2e40:	4b58      	ldr	r3, [pc, #352]	; (2fa4 <_usb_d_dev_out_next+0x228>)
    2e42:	4798      	blx	r3
	return;
    2e44:	e059      	b.n	2efa <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    2e46:	8a06      	ldrh	r6, [r0, #16]
    2e48:	4b52      	ldr	r3, [pc, #328]	; (2f94 <_usb_d_dev_out_next+0x218>)
    2e4a:	429e      	cmp	r6, r3
    2e4c:	d100      	bne.n	2e50 <_usb_d_dev_out_next+0xd4>
    2e4e:	e08e      	b.n	2f6e <_usb_d_dev_out_next+0x1f2>
    2e50:	2300      	movs	r3, #0
    2e52:	469b      	mov	fp, r3
    2e54:	469a      	mov	sl, r3
    2e56:	e7ae      	b.n	2db6 <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    2e58:	7ce3      	ldrb	r3, [r4, #19]
    2e5a:	06db      	lsls	r3, r3, #27
    2e5c:	d400      	bmi.n	2e60 <_usb_d_dev_out_next+0xe4>
    2e5e:	e07f      	b.n	2f60 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    2e60:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    2e62:	2210      	movs	r2, #16
    2e64:	4393      	bics	r3, r2
    2e66:	2220      	movs	r2, #32
    2e68:	4313      	orrs	r3, r2
    2e6a:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    2e6c:	4a48      	ldr	r2, [pc, #288]	; (2f90 <_usb_d_dev_out_next+0x214>)
    2e6e:	016b      	lsls	r3, r5, #5
    2e70:	68e1      	ldr	r1, [r4, #12]
    2e72:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2e74:	8a21      	ldrh	r1, [r4, #16]
    2e76:	18d3      	adds	r3, r2, r3
    2e78:	685a      	ldr	r2, [r3, #4]
    2e7a:	0489      	lsls	r1, r1, #18
    2e7c:	0909      	lsrs	r1, r1, #4
    2e7e:	484a      	ldr	r0, [pc, #296]	; (2fa8 <_usb_d_dev_out_next+0x22c>)
    2e80:	4002      	ands	r2, r0
    2e82:	430a      	orrs	r2, r1
    2e84:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2e86:	685a      	ldr	r2, [r3, #4]
    2e88:	0b92      	lsrs	r2, r2, #14
    2e8a:	0392      	lsls	r2, r2, #14
    2e8c:	605a      	str	r2, [r3, #4]
    2e8e:	e022      	b.n	2ed6 <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    2e90:	68a2      	ldr	r2, [r4, #8]
    2e92:	4452      	add	r2, sl
    2e94:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    2e96:	4293      	cmp	r3, r2
    2e98:	d9c1      	bls.n	2e1e <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    2e9a:	1a9b      	subs	r3, r3, r2
    2e9c:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    2e9e:	7ce1      	ldrb	r1, [r4, #19]
    2ea0:	0689      	lsls	r1, r1, #26
    2ea2:	d530      	bpl.n	2f06 <_usb_d_dev_out_next+0x18a>
    2ea4:	8a22      	ldrh	r2, [r4, #16]
    2ea6:	1c11      	adds	r1, r2, #0
    2ea8:	b292      	uxth	r2, r2
    2eaa:	429a      	cmp	r2, r3
    2eac:	d900      	bls.n	2eb0 <_usb_d_dev_out_next+0x134>
    2eae:	1c19      	adds	r1, r3, #0
    2eb0:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    2eb2:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    2eb4:	016a      	lsls	r2, r5, #5
    2eb6:	4936      	ldr	r1, [pc, #216]	; (2f90 <_usb_d_dev_out_next+0x214>)
    2eb8:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    2eba:	016a      	lsls	r2, r5, #5
    2ebc:	4934      	ldr	r1, [pc, #208]	; (2f90 <_usb_d_dev_out_next+0x214>)
    2ebe:	1889      	adds	r1, r1, r2
    2ec0:	684a      	ldr	r2, [r1, #4]
    2ec2:	049b      	lsls	r3, r3, #18
    2ec4:	091b      	lsrs	r3, r3, #4
    2ec6:	4838      	ldr	r0, [pc, #224]	; (2fa8 <_usb_d_dev_out_next+0x22c>)
    2ec8:	4002      	ands	r2, r0
    2eca:	4313      	orrs	r3, r2
    2ecc:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    2ece:	684b      	ldr	r3, [r1, #4]
    2ed0:	0b9b      	lsrs	r3, r3, #14
    2ed2:	039b      	lsls	r3, r3, #14
    2ed4:	604b      	str	r3, [r1, #4]
	if (!isr) {
    2ed6:	4643      	mov	r3, r8
    2ed8:	2b00      	cmp	r3, #0
    2eda:	d108      	bne.n	2eee <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    2edc:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    2ede:	464b      	mov	r3, r9
    2ee0:	2b01      	cmp	r3, #1
    2ee2:	d02f      	beq.n	2f44 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    2ee4:	016b      	lsls	r3, r5, #5
    2ee6:	4931      	ldr	r1, [pc, #196]	; (2fac <_usb_d_dev_out_next+0x230>)
    2ee8:	468c      	mov	ip, r1
    2eea:	4463      	add	r3, ip
    2eec:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    2eee:	016d      	lsls	r5, r5, #5
    2ef0:	4b29      	ldr	r3, [pc, #164]	; (2f98 <_usb_d_dev_out_next+0x21c>)
    2ef2:	469c      	mov	ip, r3
    2ef4:	4465      	add	r5, ip
    2ef6:	2340      	movs	r3, #64	; 0x40
    2ef8:	712b      	strb	r3, [r5, #4]
}
    2efa:	bc3c      	pop	{r2, r3, r4, r5}
    2efc:	4690      	mov	r8, r2
    2efe:	4699      	mov	r9, r3
    2f00:	46a2      	mov	sl, r4
    2f02:	46ab      	mov	fp, r5
    2f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    2f06:	8a21      	ldrh	r1, [r4, #16]
    2f08:	428b      	cmp	r3, r1
    2f0a:	d90a      	bls.n	2f22 <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    2f0c:	2180      	movs	r1, #128	; 0x80
    2f0e:	0189      	lsls	r1, r1, #6
    2f10:	428b      	cmp	r3, r1
    2f12:	d80d      	bhi.n	2f30 <_usb_d_dev_out_next+0x1b4>
    2f14:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    2f16:	6821      	ldr	r1, [r4, #0]
    2f18:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    2f1a:	0169      	lsls	r1, r5, #5
    2f1c:	481c      	ldr	r0, [pc, #112]	; (2f90 <_usb_d_dev_out_next+0x214>)
    2f1e:	500a      	str	r2, [r1, r0]
    2f20:	e7cb      	b.n	2eba <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    2f22:	428b      	cmp	r3, r1
    2f24:	d2f7      	bcs.n	2f16 <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    2f26:	7ce1      	ldrb	r1, [r4, #19]
    2f28:	2020      	movs	r0, #32
    2f2a:	4301      	orrs	r1, r0
    2f2c:	74e1      	strb	r1, [r4, #19]
    2f2e:	e7f2      	b.n	2f16 <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    2f30:	2380      	movs	r3, #128	; 0x80
    2f32:	019b      	lsls	r3, r3, #6
    2f34:	e7ef      	b.n	2f16 <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    2f36:	016b      	lsls	r3, r5, #5
    2f38:	4a19      	ldr	r2, [pc, #100]	; (2fa0 <_usb_d_dev_out_next+0x224>)
    2f3a:	4694      	mov	ip, r2
    2f3c:	4463      	add	r3, ip
    2f3e:	222d      	movs	r2, #45	; 0x2d
    2f40:	701a      	strb	r2, [r3, #0]
    2f42:	e776      	b.n	2e32 <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    2f44:	016a      	lsls	r2, r5, #5
    2f46:	4b12      	ldr	r3, [pc, #72]	; (2f90 <_usb_d_dev_out_next+0x214>)
    2f48:	189b      	adds	r3, r3, r2
    2f4a:	2200      	movs	r2, #0
    2f4c:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    2f4e:	322d      	adds	r2, #45	; 0x2d
    2f50:	e7c8      	b.n	2ee4 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    2f52:	05bf      	lsls	r7, r7, #22
    2f54:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2f56:	7cc3      	ldrb	r3, [r0, #19]
    2f58:	2207      	movs	r2, #7
    2f5a:	401a      	ands	r2, r3
    2f5c:	4691      	mov	r9, r2
    2f5e:	e735      	b.n	2dcc <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    2f60:	4643      	mov	r3, r8
    2f62:	2b00      	cmp	r3, #0
    2f64:	d10c      	bne.n	2f80 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    2f66:	68a3      	ldr	r3, [r4, #8]
    2f68:	4453      	add	r3, sl
    2f6a:	60a3      	str	r3, [r4, #8]
    2f6c:	e757      	b.n	2e1e <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2f6e:	7cc3      	ldrb	r3, [r0, #19]
    2f70:	2207      	movs	r2, #7
    2f72:	401a      	ands	r2, r3
    2f74:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    2f76:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    2f78:	2300      	movs	r3, #0
    2f7a:	469b      	mov	fp, r3
    2f7c:	469a      	mov	sl, r3
    2f7e:	e72b      	b.n	2dd8 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    2f80:	8a23      	ldrh	r3, [r4, #16]
    2f82:	42bb      	cmp	r3, r7
    2f84:	d900      	bls.n	2f88 <_usb_d_dev_out_next+0x20c>
    2f86:	e743      	b.n	2e10 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    2f88:	68a3      	ldr	r3, [r4, #8]
    2f8a:	4453      	add	r3, sl
    2f8c:	60a3      	str	r3, [r4, #8]
    2f8e:	e746      	b.n	2e1e <_usb_d_dev_out_next+0xa2>
    2f90:	200007a4 	.word	0x200007a4
    2f94:	000003ff 	.word	0x000003ff
    2f98:	41005100 	.word	0x41005100
    2f9c:	00004a6d 	.word	0x00004a6d
    2fa0:	41005108 	.word	0x41005108
    2fa4:	000029f5 	.word	0x000029f5
    2fa8:	f0003fff 	.word	0xf0003fff
    2fac:	41005109 	.word	0x41005109

00002fb0 <_usb_d_dev_init>:
{
    2fb0:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    2fb2:	4b31      	ldr	r3, [pc, #196]	; (3078 <_usb_d_dev_init+0xc8>)
    2fb4:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    2fb6:	07db      	lsls	r3, r3, #31
    2fb8:	d41f      	bmi.n	2ffa <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2fba:	492f      	ldr	r1, [pc, #188]	; (3078 <_usb_d_dev_init+0xc8>)
    2fbc:	2203      	movs	r2, #3
    2fbe:	788b      	ldrb	r3, [r1, #2]
    2fc0:	4213      	tst	r3, r2
    2fc2:	d1fc      	bne.n	2fbe <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    2fc4:	4b2c      	ldr	r3, [pc, #176]	; (3078 <_usb_d_dev_init+0xc8>)
    2fc6:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    2fc8:	079b      	lsls	r3, r3, #30
    2fca:	d50e      	bpl.n	2fea <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    2fcc:	4a2a      	ldr	r2, [pc, #168]	; (3078 <_usb_d_dev_init+0xc8>)
    2fce:	7813      	ldrb	r3, [r2, #0]
    2fd0:	2102      	movs	r1, #2
    2fd2:	438b      	bics	r3, r1
    2fd4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2fd6:	0011      	movs	r1, r2
    2fd8:	2203      	movs	r2, #3
    2fda:	788b      	ldrb	r3, [r1, #2]
    2fdc:	4213      	tst	r3, r2
    2fde:	d1fc      	bne.n	2fda <_usb_d_dev_init+0x2a>
    2fe0:	4925      	ldr	r1, [pc, #148]	; (3078 <_usb_d_dev_init+0xc8>)
    2fe2:	2202      	movs	r2, #2
    2fe4:	788b      	ldrb	r3, [r1, #2]
    2fe6:	4213      	tst	r3, r2
    2fe8:	d1fc      	bne.n	2fe4 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    2fea:	2201      	movs	r2, #1
    2fec:	4b22      	ldr	r3, [pc, #136]	; (3078 <_usb_d_dev_init+0xc8>)
    2fee:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    2ff0:	0019      	movs	r1, r3
    2ff2:	3202      	adds	r2, #2
    2ff4:	788b      	ldrb	r3, [r1, #2]
    2ff6:	4213      	tst	r3, r2
    2ff8:	d1fc      	bne.n	2ff4 <_usb_d_dev_init+0x44>
    2ffa:	491f      	ldr	r1, [pc, #124]	; (3078 <_usb_d_dev_init+0xc8>)
    2ffc:	2201      	movs	r2, #1
    2ffe:	788b      	ldrb	r3, [r1, #2]
    3000:	4213      	tst	r3, r2
    3002:	d1fc      	bne.n	2ffe <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    3004:	4b1d      	ldr	r3, [pc, #116]	; (307c <_usb_d_dev_init+0xcc>)
    3006:	4a1e      	ldr	r2, [pc, #120]	; (3080 <_usb_d_dev_init+0xd0>)
    3008:	621a      	str	r2, [r3, #32]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    300a:	625a      	str	r2, [r3, #36]	; 0x24
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    300c:	629a      	str	r2, [r3, #40]	; 0x28
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    300e:	62da      	str	r2, [r3, #44]	; 0x2c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    3010:	631a      	str	r2, [r3, #48]	; 0x30
	_usb_d_dev_reset_epts();
    3012:	4b1c      	ldr	r3, [pc, #112]	; (3084 <_usb_d_dev_init+0xd4>)
    3014:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    3016:	4b1c      	ldr	r3, [pc, #112]	; (3088 <_usb_d_dev_init+0xd8>)
    3018:	681b      	ldr	r3, [r3, #0]
    301a:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    301c:	211f      	movs	r1, #31
    301e:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    3020:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    3022:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    3024:	019b      	lsls	r3, r3, #6
    3026:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    3028:	2a1f      	cmp	r2, #31
    302a:	d01f      	beq.n	306c <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    302c:	291f      	cmp	r1, #31
    302e:	d01f      	beq.n	3070 <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    3030:	2b07      	cmp	r3, #7
    3032:	d01f      	beq.n	3074 <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    3034:	0192      	lsls	r2, r2, #6
    3036:	430a      	orrs	r2, r1
    3038:	031b      	lsls	r3, r3, #12
    303a:	4313      	orrs	r3, r2
    303c:	4a0e      	ldr	r2, [pc, #56]	; (3078 <_usb_d_dev_init+0xc8>)
    303e:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    3040:	78d3      	ldrb	r3, [r2, #3]
    3042:	2103      	movs	r1, #3
    3044:	430b      	orrs	r3, r1
    3046:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    3048:	78d3      	ldrb	r3, [r2, #3]
    304a:	210c      	movs	r1, #12
    304c:	430b      	orrs	r3, r1
    304e:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    3050:	2304      	movs	r3, #4
    3052:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3054:	0011      	movs	r1, r2
    3056:	2203      	movs	r2, #3
    3058:	788b      	ldrb	r3, [r1, #2]
    305a:	4213      	tst	r3, r2
    305c:	d1fc      	bne.n	3058 <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    305e:	4b06      	ldr	r3, [pc, #24]	; (3078 <_usb_d_dev_init+0xc8>)
    3060:	4a0a      	ldr	r2, [pc, #40]	; (308c <_usb_d_dev_init+0xdc>)
    3062:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    3064:	2201      	movs	r2, #1
    3066:	811a      	strh	r2, [r3, #8]
}
    3068:	2000      	movs	r0, #0
    306a:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    306c:	3a1a      	subs	r2, #26
    306e:	e7dd      	b.n	302c <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    3070:	3902      	subs	r1, #2
    3072:	e7dd      	b.n	3030 <_usb_d_dev_init+0x80>
		pad_trim = 5;
    3074:	3b02      	subs	r3, #2
    3076:	e7dd      	b.n	3034 <_usb_d_dev_init+0x84>
    3078:	41005000 	.word	0x41005000
    307c:	20000824 	.word	0x20000824
    3080:	0000292d 	.word	0x0000292d
    3084:	00002b89 	.word	0x00002b89
    3088:	00806024 	.word	0x00806024
    308c:	200007a4 	.word	0x200007a4

00003090 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    3090:	4b10      	ldr	r3, [pc, #64]	; (30d4 <_usb_d_dev_enable+0x44>)
    3092:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    3094:	079b      	lsls	r3, r3, #30
    3096:	d11a      	bne.n	30ce <_usb_d_dev_enable+0x3e>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    3098:	490e      	ldr	r1, [pc, #56]	; (30d4 <_usb_d_dev_enable+0x44>)
    309a:	2203      	movs	r2, #3
    309c:	788b      	ldrb	r3, [r1, #2]
    309e:	4213      	tst	r3, r2
    30a0:	d1fc      	bne.n	309c <_usb_d_dev_enable+0xc>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    30a2:	4b0c      	ldr	r3, [pc, #48]	; (30d4 <_usb_d_dev_enable+0x44>)
    30a4:	781b      	ldrb	r3, [r3, #0]
    30a6:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    30a8:	079a      	lsls	r2, r3, #30
    30aa:	d408      	bmi.n	30be <_usb_d_dev_enable+0x2e>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    30ac:	2202      	movs	r2, #2
    30ae:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    30b0:	4a08      	ldr	r2, [pc, #32]	; (30d4 <_usb_d_dev_enable+0x44>)
    30b2:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    30b4:	0011      	movs	r1, r2
    30b6:	2203      	movs	r2, #3
    30b8:	788b      	ldrb	r3, [r1, #2]
    30ba:	4213      	tst	r3, r2
    30bc:	d1fc      	bne.n	30b8 <_usb_d_dev_enable+0x28>
    30be:	2280      	movs	r2, #128	; 0x80
    30c0:	4b05      	ldr	r3, [pc, #20]	; (30d8 <_usb_d_dev_enable+0x48>)
    30c2:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    30c4:	4a05      	ldr	r2, [pc, #20]	; (30dc <_usb_d_dev_enable+0x4c>)
    30c6:	4b03      	ldr	r3, [pc, #12]	; (30d4 <_usb_d_dev_enable+0x44>)
    30c8:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    30ca:	2000      	movs	r0, #0
}
    30cc:	4770      	bx	lr
		return -USB_ERR_DENIED;
    30ce:	2011      	movs	r0, #17
    30d0:	4240      	negs	r0, r0
    30d2:	e7fb      	b.n	30cc <_usb_d_dev_enable+0x3c>
    30d4:	41005000 	.word	0x41005000
    30d8:	e000e100 	.word	0xe000e100
    30dc:	0000028d 	.word	0x0000028d

000030e0 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    30e0:	4a02      	ldr	r2, [pc, #8]	; (30ec <_usb_d_dev_attach+0xc>)
    30e2:	8913      	ldrh	r3, [r2, #8]
    30e4:	2101      	movs	r1, #1
    30e6:	438b      	bics	r3, r1
    30e8:	8113      	strh	r3, [r2, #8]
}
    30ea:	4770      	bx	lr
    30ec:	41005000 	.word	0x41005000

000030f0 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    30f0:	2380      	movs	r3, #128	; 0x80
    30f2:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    30f4:	4b01      	ldr	r3, [pc, #4]	; (30fc <_usb_d_dev_set_address+0xc>)
    30f6:	7298      	strb	r0, [r3, #10]
}
    30f8:	4770      	bx	lr
    30fa:	46c0      	nop			; (mov r8, r8)
    30fc:	41005000 	.word	0x41005000

00003100 <_usb_d_dev_ep_init>:
{
    3100:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    3102:	240f      	movs	r4, #15
    3104:	4004      	ands	r4, r0
    3106:	b243      	sxtb	r3, r0
    3108:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    310a:	2c00      	cmp	r4, #0
    310c:	d054      	beq.n	31b8 <_usb_d_dev_ep_init+0xb8>
    310e:	0025      	movs	r5, r4
    3110:	2b00      	cmp	r3, #0
    3112:	db07      	blt.n	3124 <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    3114:	2303      	movs	r3, #3
    3116:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    3118:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    311a:	2c04      	cmp	r4, #4
    311c:	d950      	bls.n	31c0 <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    311e:	2012      	movs	r0, #18
    3120:	4240      	negs	r0, r0
    3122:	e025      	b.n	3170 <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3124:	1d25      	adds	r5, r4, #4
    3126:	e7f5      	b.n	3114 <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3128:	4663      	mov	r3, ip
    312a:	2b00      	cmp	r3, #0
    312c:	db21      	blt.n	3172 <_usb_d_dev_ep_init+0x72>
    312e:	007b      	lsls	r3, r7, #1
    3130:	19db      	adds	r3, r3, r7
    3132:	009b      	lsls	r3, r3, #2
    3134:	4c3b      	ldr	r4, [pc, #236]	; (3224 <_usb_d_dev_ep_init+0x124>)
    3136:	591b      	ldr	r3, [r3, r4]
    3138:	2b00      	cmp	r3, #0
    313a:	d166      	bne.n	320a <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    313c:	007b      	lsls	r3, r7, #1
    313e:	19df      	adds	r7, r3, r7
    3140:	00bf      	lsls	r7, r7, #2
    3142:	4b38      	ldr	r3, [pc, #224]	; (3224 <_usb_d_dev_ep_init+0x124>)
    3144:	58ff      	ldr	r7, [r7, r3]
    3146:	4b38      	ldr	r3, [pc, #224]	; (3228 <_usb_d_dev_ep_init+0x128>)
    3148:	00ae      	lsls	r6, r5, #2
    314a:	1974      	adds	r4, r6, r5
    314c:	00a4      	lsls	r4, r4, #2
    314e:	191c      	adds	r4, r3, r4
    3150:	6427      	str	r7, [r4, #64]	; 0x40
	ept->size     = max_pkt_siz;
    3152:	3444      	adds	r4, #68	; 0x44
    3154:	8022      	strh	r2, [r4, #0]
	ept->flags.u8 = (ep_type + 1);
    3156:	3320      	adds	r3, #32
    3158:	1972      	adds	r2, r6, r5
    315a:	0092      	lsls	r2, r2, #2
    315c:	189a      	adds	r2, r3, r2
    315e:	3227      	adds	r2, #39	; 0x27
    3160:	3101      	adds	r1, #1
    3162:	7011      	strb	r1, [r2, #0]
	ept->ep       = ep;
    3164:	1975      	adds	r5, r6, r5
    3166:	00ad      	lsls	r5, r5, #2
    3168:	195b      	adds	r3, r3, r5
    316a:	3326      	adds	r3, #38	; 0x26
    316c:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    316e:	2000      	movs	r0, #0
}
    3170:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3172:	007b      	lsls	r3, r7, #1
    3174:	19db      	adds	r3, r3, r7
    3176:	009b      	lsls	r3, r3, #2
    3178:	4c2a      	ldr	r4, [pc, #168]	; (3224 <_usb_d_dev_ep_init+0x124>)
    317a:	18e3      	adds	r3, r4, r3
    317c:	685b      	ldr	r3, [r3, #4]
    317e:	2b00      	cmp	r3, #0
    3180:	d106      	bne.n	3190 <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    3182:	007b      	lsls	r3, r7, #1
    3184:	19df      	adds	r7, r3, r7
    3186:	00bf      	lsls	r7, r7, #2
    3188:	4b26      	ldr	r3, [pc, #152]	; (3224 <_usb_d_dev_ep_init+0x124>)
    318a:	19df      	adds	r7, r3, r7
    318c:	687f      	ldr	r7, [r7, #4]
    318e:	e7da      	b.n	3146 <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3190:	007b      	lsls	r3, r7, #1
    3192:	19db      	adds	r3, r3, r7
    3194:	009b      	lsls	r3, r3, #2
    3196:	4c23      	ldr	r4, [pc, #140]	; (3224 <_usb_d_dev_ep_init+0x124>)
    3198:	18e3      	adds	r3, r4, r3
    319a:	895b      	ldrh	r3, [r3, #10]
    319c:	4293      	cmp	r3, r2
    319e:	daf0      	bge.n	3182 <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    31a0:	2013      	movs	r0, #19
    31a2:	4240      	negs	r0, r0
    31a4:	e7e4      	b.n	3170 <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    31a6:	2014      	movs	r0, #20
    31a8:	4240      	negs	r0, r0
    31aa:	e7e1      	b.n	3170 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    31ac:	2014      	movs	r0, #20
    31ae:	4240      	negs	r0, r0
    31b0:	e7de      	b.n	3170 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    31b2:	2013      	movs	r0, #19
    31b4:	4240      	negs	r0, r0
    31b6:	e7db      	b.n	3170 <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    31b8:	2303      	movs	r3, #3
    31ba:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    31bc:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    31be:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    31c0:	00ab      	lsls	r3, r5, #2
    31c2:	195b      	adds	r3, r3, r5
    31c4:	009e      	lsls	r6, r3, #2
    31c6:	4b18      	ldr	r3, [pc, #96]	; (3228 <_usb_d_dev_ep_init+0x128>)
    31c8:	199b      	adds	r3, r3, r6
    31ca:	3346      	adds	r3, #70	; 0x46
    31cc:	781b      	ldrb	r3, [r3, #0]
    31ce:	2bff      	cmp	r3, #255	; 0xff
    31d0:	d1e9      	bne.n	31a6 <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    31d2:	2900      	cmp	r1, #0
    31d4:	d1a8      	bne.n	3128 <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    31d6:	2c00      	cmp	r4, #0
    31d8:	d004      	beq.n	31e4 <_usb_d_dev_ep_init+0xe4>
    31da:	4663      	mov	r3, ip
    31dc:	2b00      	cmp	r3, #0
    31de:	db01      	blt.n	31e4 <_usb_d_dev_ep_init+0xe4>
    31e0:	3404      	adds	r4, #4
    31e2:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    31e4:	00a3      	lsls	r3, r4, #2
    31e6:	191b      	adds	r3, r3, r4
    31e8:	009b      	lsls	r3, r3, #2
    31ea:	4c0f      	ldr	r4, [pc, #60]	; (3228 <_usb_d_dev_ep_init+0x128>)
    31ec:	18e4      	adds	r4, r4, r3
    31ee:	3446      	adds	r4, #70	; 0x46
    31f0:	7823      	ldrb	r3, [r4, #0]
    31f2:	2bff      	cmp	r3, #255	; 0xff
    31f4:	d1da      	bne.n	31ac <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    31f6:	007b      	lsls	r3, r7, #1
    31f8:	19db      	adds	r3, r3, r7
    31fa:	009b      	lsls	r3, r3, #2
    31fc:	4c09      	ldr	r4, [pc, #36]	; (3224 <_usb_d_dev_ep_init+0x124>)
    31fe:	591b      	ldr	r3, [r3, r4]
    3200:	2b00      	cmp	r3, #0
    3202:	d0d6      	beq.n	31b2 <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    3204:	4663      	mov	r3, ip
    3206:	2b00      	cmp	r3, #0
    3208:	dbb3      	blt.n	3172 <_usb_d_dev_ep_init+0x72>
    320a:	007b      	lsls	r3, r7, #1
    320c:	19db      	adds	r3, r3, r7
    320e:	009b      	lsls	r3, r3, #2
    3210:	4c04      	ldr	r4, [pc, #16]	; (3224 <_usb_d_dev_ep_init+0x124>)
    3212:	18e3      	adds	r3, r4, r3
    3214:	891b      	ldrh	r3, [r3, #8]
    3216:	4293      	cmp	r3, r2
    3218:	db00      	blt.n	321c <_usb_d_dev_ep_init+0x11c>
    321a:	e78f      	b.n	313c <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    321c:	2013      	movs	r0, #19
    321e:	4240      	negs	r0, r0
    3220:	e7a6      	b.n	3170 <_usb_d_dev_ep_init+0x70>
    3222:	46c0      	nop			; (mov r8, r8)
    3224:	00004f0c 	.word	0x00004f0c
    3228:	20000824 	.word	0x20000824

0000322c <_usb_d_dev_ep_deinit>:
{
    322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    322e:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    3230:	240f      	movs	r4, #15
    3232:	4004      	ands	r4, r0
    3234:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3236:	2c00      	cmp	r4, #0
    3238:	d010      	beq.n	325c <_usb_d_dev_ep_deinit+0x30>
    323a:	0020      	movs	r0, r4
    323c:	2f00      	cmp	r7, #0
    323e:	db02      	blt.n	3246 <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3240:	2c04      	cmp	r4, #4
    3242:	d902      	bls.n	324a <_usb_d_dev_ep_deinit+0x1e>
}
    3244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3246:	1d20      	adds	r0, r4, #4
    3248:	e7fa      	b.n	3240 <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    324a:	0006      	movs	r6, r0
    324c:	3001      	adds	r0, #1
    324e:	0083      	lsls	r3, r0, #2
    3250:	1818      	adds	r0, r3, r0
    3252:	0080      	lsls	r0, r0, #2
    3254:	4b25      	ldr	r3, [pc, #148]	; (32ec <_usb_d_dev_ep_deinit+0xc0>)
    3256:	3320      	adds	r3, #32
    3258:	1818      	adds	r0, r3, r0
    325a:	e002      	b.n	3262 <_usb_d_dev_ep_deinit+0x36>
    325c:	4823      	ldr	r0, [pc, #140]	; (32ec <_usb_d_dev_ep_deinit+0xc0>)
    325e:	3034      	adds	r0, #52	; 0x34
    3260:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    3262:	00b3      	lsls	r3, r6, #2
    3264:	199b      	adds	r3, r3, r6
    3266:	009a      	lsls	r2, r3, #2
    3268:	4b20      	ldr	r3, [pc, #128]	; (32ec <_usb_d_dev_ep_deinit+0xc0>)
    326a:	189b      	adds	r3, r3, r2
    326c:	3346      	adds	r3, #70	; 0x46
    326e:	781b      	ldrb	r3, [r3, #0]
    3270:	2bff      	cmp	r3, #255	; 0xff
    3272:	d0e7      	beq.n	3244 <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    3274:	0ff9      	lsrs	r1, r7, #31
    3276:	2203      	movs	r2, #3
    3278:	4b1d      	ldr	r3, [pc, #116]	; (32f0 <_usb_d_dev_ep_deinit+0xc4>)
    327a:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    327c:	00b3      	lsls	r3, r6, #2
    327e:	199b      	adds	r3, r3, r6
    3280:	009a      	lsls	r2, r3, #2
    3282:	4b1a      	ldr	r3, [pc, #104]	; (32ec <_usb_d_dev_ep_deinit+0xc0>)
    3284:	189b      	adds	r3, r3, r2
    3286:	3340      	adds	r3, #64	; 0x40
    3288:	79da      	ldrb	r2, [r3, #7]
    328a:	2307      	movs	r3, #7
    328c:	4013      	ands	r3, r2
    328e:	2b01      	cmp	r3, #1
    3290:	d01b      	beq.n	32ca <_usb_d_dev_ep_deinit+0x9e>
	} else if (USB_EP_GET_DIR(ep)) {
    3292:	2f00      	cmp	r7, #0
    3294:	db1f      	blt.n	32d6 <_usb_d_dev_ep_deinit+0xaa>
    3296:	016d      	lsls	r5, r5, #5
    3298:	4b16      	ldr	r3, [pc, #88]	; (32f4 <_usb_d_dev_ep_deinit+0xc8>)
    329a:	469c      	mov	ip, r3
    329c:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    329e:	2280      	movs	r2, #128	; 0x80
    32a0:	0052      	lsls	r2, r2, #1
    32a2:	5cab      	ldrb	r3, [r5, r2]
    32a4:	2107      	movs	r1, #7
    32a6:	438b      	bics	r3, r1
    32a8:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    32aa:	4b10      	ldr	r3, [pc, #64]	; (32ec <_usb_d_dev_ep_deinit+0xc0>)
    32ac:	3320      	adds	r3, #32
    32ae:	00b1      	lsls	r1, r6, #2
    32b0:	198a      	adds	r2, r1, r6
    32b2:	0092      	lsls	r2, r2, #2
    32b4:	189a      	adds	r2, r3, r2
    32b6:	3227      	adds	r2, #39	; 0x27
    32b8:	2000      	movs	r0, #0
    32ba:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    32bc:	198e      	adds	r6, r1, r6
    32be:	00b6      	lsls	r6, r6, #2
    32c0:	199b      	adds	r3, r3, r6
    32c2:	3326      	adds	r3, #38	; 0x26
    32c4:	22ff      	movs	r2, #255	; 0xff
    32c6:	701a      	strb	r2, [r3, #0]
    32c8:	e7bc      	b.n	3244 <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    32ca:	3508      	adds	r5, #8
    32cc:	016d      	lsls	r5, r5, #5
    32ce:	2200      	movs	r2, #0
    32d0:	4b08      	ldr	r3, [pc, #32]	; (32f4 <_usb_d_dev_ep_deinit+0xc8>)
    32d2:	54ea      	strb	r2, [r5, r3]
    32d4:	e7e9      	b.n	32aa <_usb_d_dev_ep_deinit+0x7e>
    32d6:	0164      	lsls	r4, r4, #5
    32d8:	4b06      	ldr	r3, [pc, #24]	; (32f4 <_usb_d_dev_ep_deinit+0xc8>)
    32da:	469c      	mov	ip, r3
    32dc:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    32de:	2280      	movs	r2, #128	; 0x80
    32e0:	0052      	lsls	r2, r2, #1
    32e2:	5ca3      	ldrb	r3, [r4, r2]
    32e4:	2170      	movs	r1, #112	; 0x70
    32e6:	438b      	bics	r3, r1
    32e8:	54a3      	strb	r3, [r4, r2]
    32ea:	e7de      	b.n	32aa <_usb_d_dev_ep_deinit+0x7e>
    32ec:	20000824 	.word	0x20000824
    32f0:	00002a1d 	.word	0x00002a1d
    32f4:	41005000 	.word	0x41005000

000032f8 <_usb_d_dev_ep_enable>:
{
    32f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    32fa:	46c6      	mov	lr, r8
    32fc:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    32fe:	220f      	movs	r2, #15
    3300:	4002      	ands	r2, r0
    3302:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3304:	2a00      	cmp	r2, #0
    3306:	d100      	bne.n	330a <_usb_d_dev_ep_enable+0x12>
    3308:	e092      	b.n	3430 <_usb_d_dev_ep_enable+0x138>
    330a:	0013      	movs	r3, r2
    330c:	2800      	cmp	r0, #0
    330e:	db0b      	blt.n	3328 <_usb_d_dev_ep_enable+0x30>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3310:	0011      	movs	r1, r2
    3312:	3208      	adds	r2, #8
    3314:	0152      	lsls	r2, r2, #5
    3316:	4cab      	ldr	r4, [pc, #684]	; (35c4 <_usb_d_dev_ep_enable+0x2cc>)
    3318:	5d15      	ldrb	r5, [r2, r4]
    331a:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    331c:	2904      	cmp	r1, #4
    331e:	d800      	bhi.n	3322 <_usb_d_dev_ep_enable+0x2a>
    3320:	e08d      	b.n	343e <_usb_d_dev_ep_enable+0x146>
		return -USB_ERR_PARAM;
    3322:	2012      	movs	r0, #18
    3324:	4240      	negs	r0, r0
    3326:	e0e6      	b.n	34f6 <_usb_d_dev_ep_enable+0x1fe>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3328:	1d13      	adds	r3, r2, #4
    332a:	e7f1      	b.n	3310 <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    332c:	2077      	movs	r0, #119	; 0x77
    332e:	4228      	tst	r0, r5
    3330:	d175      	bne.n	341e <_usb_d_dev_ep_enable+0x126>
    3332:	48a4      	ldr	r0, [pc, #656]	; (35c4 <_usb_d_dev_ep_enable+0x2cc>)
    3334:	4680      	mov	r8, r0
    3336:	4442      	add	r2, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3338:	3410      	adds	r4, #16
    333a:	2080      	movs	r0, #128	; 0x80
    333c:	0040      	lsls	r0, r0, #1
    333e:	5414      	strb	r4, [r2, r0]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3340:	0098      	lsls	r0, r3, #2
    3342:	18c0      	adds	r0, r0, r3
    3344:	0084      	lsls	r4, r0, #2
    3346:	48a0      	ldr	r0, [pc, #640]	; (35c8 <_usb_d_dev_ep_enable+0x2d0>)
    3348:	1900      	adds	r0, r0, r4
    334a:	3044      	adds	r0, #68	; 0x44
    334c:	8800      	ldrh	r0, [r0, #0]
    334e:	0385      	lsls	r5, r0, #14
    3350:	4c9e      	ldr	r4, [pc, #632]	; (35cc <_usb_d_dev_ep_enable+0x2d4>)
    3352:	4025      	ands	r5, r4
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3354:	2480      	movs	r4, #128	; 0x80
    3356:	00a4      	lsls	r4, r4, #2
    3358:	42a0      	cmp	r0, r4
    335a:	d900      	bls.n	335e <_usb_d_dev_ep_enable+0x66>
    335c:	e0ce      	b.n	34fc <_usb_d_dev_ep_enable+0x204>
    335e:	3c01      	subs	r4, #1
    3360:	3cff      	subs	r4, #255	; 0xff
    3362:	42a0      	cmp	r0, r4
    3364:	d900      	bls.n	3368 <_usb_d_dev_ep_enable+0x70>
    3366:	e114      	b.n	3592 <_usb_d_dev_ep_enable+0x29a>
    3368:	2880      	cmp	r0, #128	; 0x80
    336a:	d900      	bls.n	336e <_usb_d_dev_ep_enable+0x76>
    336c:	e101      	b.n	3572 <_usb_d_dev_ep_enable+0x27a>
    336e:	2840      	cmp	r0, #64	; 0x40
    3370:	d900      	bls.n	3374 <_usb_d_dev_ep_enable+0x7c>
    3372:	e116      	b.n	35a2 <_usb_d_dev_ep_enable+0x2aa>
    3374:	2820      	cmp	r0, #32
    3376:	d900      	bls.n	337a <_usb_d_dev_ep_enable+0x82>
    3378:	e103      	b.n	3582 <_usb_d_dev_ep_enable+0x28a>
    337a:	2810      	cmp	r0, #16
    337c:	d900      	bls.n	3380 <_usb_d_dev_ep_enable+0x88>
    337e:	e118      	b.n	35b2 <_usb_d_dev_ep_enable+0x2ba>
    3380:	3cf8      	subs	r4, #248	; 0xf8
    3382:	4284      	cmp	r4, r0
    3384:	41a4      	sbcs	r4, r4
    3386:	4264      	negs	r4, r4
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3388:	0726      	lsls	r6, r4, #28
    338a:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    338c:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    338e:	0485      	lsls	r5, r0, #18
    3390:	0cad      	lsrs	r5, r5, #18
    3392:	e0ba      	b.n	350a <_usb_d_dev_ep_enable+0x212>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    3394:	2070      	movs	r0, #112	; 0x70
    3396:	4228      	tst	r0, r5
    3398:	d144      	bne.n	3424 <_usb_d_dev_ep_enable+0x12c>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    339a:	4c8b      	ldr	r4, [pc, #556]	; (35c8 <_usb_d_dev_ep_enable+0x2d0>)
    339c:	009e      	lsls	r6, r3, #2
    339e:	18f0      	adds	r0, r6, r3
    33a0:	0080      	lsls	r0, r0, #2
    33a2:	1820      	adds	r0, r4, r0
    33a4:	3040      	adds	r0, #64	; 0x40
    33a6:	79c0      	ldrb	r0, [r0, #7]
    33a8:	0740      	lsls	r0, r0, #29
    33aa:	0e40      	lsrs	r0, r0, #25
    33ac:	4305      	orrs	r5, r0
    33ae:	4885      	ldr	r0, [pc, #532]	; (35c4 <_usb_d_dev_ep_enable+0x2cc>)
    33b0:	4684      	mov	ip, r0
    33b2:	4462      	add	r2, ip
    33b4:	2080      	movs	r0, #128	; 0x80
    33b6:	0040      	lsls	r0, r0, #1
    33b8:	5415      	strb	r5, [r2, r0]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33ba:	18f6      	adds	r6, r6, r3
    33bc:	00b6      	lsls	r6, r6, #2
    33be:	19a4      	adds	r4, r4, r6
    33c0:	3444      	adds	r4, #68	; 0x44
    33c2:	8824      	ldrh	r4, [r4, #0]
    33c4:	04a5      	lsls	r5, r4, #18
    33c6:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    33c8:	3001      	adds	r0, #1
    33ca:	30ff      	adds	r0, #255	; 0xff
    33cc:	2307      	movs	r3, #7
    33ce:	4284      	cmp	r4, r0
    33d0:	d814      	bhi.n	33fc <_usb_d_dev_ep_enable+0x104>
    33d2:	3801      	subs	r0, #1
    33d4:	38ff      	subs	r0, #255	; 0xff
    33d6:	3b01      	subs	r3, #1
    33d8:	4284      	cmp	r4, r0
    33da:	d80f      	bhi.n	33fc <_usb_d_dev_ep_enable+0x104>
    33dc:	3b01      	subs	r3, #1
    33de:	2c80      	cmp	r4, #128	; 0x80
    33e0:	d80c      	bhi.n	33fc <_usb_d_dev_ep_enable+0x104>
    33e2:	3b01      	subs	r3, #1
    33e4:	2c40      	cmp	r4, #64	; 0x40
    33e6:	d809      	bhi.n	33fc <_usb_d_dev_ep_enable+0x104>
    33e8:	3b01      	subs	r3, #1
    33ea:	2c20      	cmp	r4, #32
    33ec:	d806      	bhi.n	33fc <_usb_d_dev_ep_enable+0x104>
    33ee:	3b01      	subs	r3, #1
    33f0:	2c10      	cmp	r4, #16
    33f2:	d803      	bhi.n	33fc <_usb_d_dev_ep_enable+0x104>
    33f4:	38f8      	subs	r0, #248	; 0xf8
    33f6:	42a0      	cmp	r0, r4
    33f8:	4180      	sbcs	r0, r0
    33fa:	4243      	negs	r3, r0
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    33fc:	071b      	lsls	r3, r3, #28
    33fe:	432b      	orrs	r3, r5
    3400:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3402:	2080      	movs	r0, #128	; 0x80
    3404:	2382      	movs	r3, #130	; 0x82
    3406:	005b      	lsls	r3, r3, #1
    3408:	54d0      	strb	r0, [r2, r3]
	bank->STATUS_BK.reg     = 0;
    340a:	0149      	lsls	r1, r1, #5
    340c:	4b70      	ldr	r3, [pc, #448]	; (35d0 <_usb_d_dev_ep_enable+0x2d8>)
    340e:	1859      	adds	r1, r3, r1
    3410:	2300      	movs	r3, #0
    3412:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    3414:	2000      	movs	r0, #0
    3416:	e06e      	b.n	34f6 <_usb_d_dev_ep_enable+0x1fe>
		return -USB_ERR_PARAM;
    3418:	2012      	movs	r0, #18
    341a:	4240      	negs	r0, r0
    341c:	e06b      	b.n	34f6 <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    341e:	2014      	movs	r0, #20
    3420:	4240      	negs	r0, r0
    3422:	e068      	b.n	34f6 <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    3424:	2014      	movs	r0, #20
    3426:	4240      	negs	r0, r0
    3428:	e065      	b.n	34f6 <_usb_d_dev_ep_enable+0x1fe>
			return -USB_ERR_REDO;
    342a:	2014      	movs	r0, #20
    342c:	4240      	negs	r0, r0
    342e:	e062      	b.n	34f6 <_usb_d_dev_ep_enable+0x1fe>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3430:	2380      	movs	r3, #128	; 0x80
    3432:	005b      	lsls	r3, r3, #1
    3434:	4a63      	ldr	r2, [pc, #396]	; (35c4 <_usb_d_dev_ep_enable+0x2cc>)
    3436:	5cd5      	ldrb	r5, [r2, r3]
    3438:	b2ed      	uxtb	r5, r5
    343a:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    343c:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    343e:	009a      	lsls	r2, r3, #2
    3440:	18d2      	adds	r2, r2, r3
    3442:	0094      	lsls	r4, r2, #2
    3444:	4a60      	ldr	r2, [pc, #384]	; (35c8 <_usb_d_dev_ep_enable+0x2d0>)
    3446:	1912      	adds	r2, r2, r4
    3448:	3246      	adds	r2, #70	; 0x46
    344a:	7812      	ldrb	r2, [r2, #0]
    344c:	4694      	mov	ip, r2
    344e:	2aff      	cmp	r2, #255	; 0xff
    3450:	d0e2      	beq.n	3418 <_usb_d_dev_ep_enable+0x120>
    3452:	014a      	lsls	r2, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    3454:	4f5e      	ldr	r7, [pc, #376]	; (35d0 <_usb_d_dev_ep_enable+0x2d8>)
    3456:	18bf      	adds	r7, r7, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    3458:	009c      	lsls	r4, r3, #2
    345a:	18e4      	adds	r4, r4, r3
    345c:	00a6      	lsls	r6, r4, #2
    345e:	4c5a      	ldr	r4, [pc, #360]	; (35c8 <_usb_d_dev_ep_enable+0x2d0>)
    3460:	19a4      	adds	r4, r4, r6
    3462:	3440      	adds	r4, #64	; 0x40
    3464:	79e6      	ldrb	r6, [r4, #7]
    3466:	2407      	movs	r4, #7
    3468:	4034      	ands	r4, r6
    346a:	2c01      	cmp	r4, #1
    346c:	d100      	bne.n	3470 <_usb_d_dev_ep_enable+0x178>
    346e:	e75d      	b.n	332c <_usb_d_dev_ep_enable+0x34>
	} else if (dir) {
    3470:	2800      	cmp	r0, #0
    3472:	db8f      	blt.n	3394 <_usb_d_dev_ep_enable+0x9c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    3474:	0768      	lsls	r0, r5, #29
    3476:	d1d8      	bne.n	342a <_usb_d_dev_ep_enable+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    3478:	4c53      	ldr	r4, [pc, #332]	; (35c8 <_usb_d_dev_ep_enable+0x2d0>)
    347a:	009e      	lsls	r6, r3, #2
    347c:	18f0      	adds	r0, r6, r3
    347e:	0080      	lsls	r0, r0, #2
    3480:	1820      	adds	r0, r4, r0
    3482:	3040      	adds	r0, #64	; 0x40
    3484:	79c0      	ldrb	r0, [r0, #7]
    3486:	0740      	lsls	r0, r0, #29
    3488:	0f40      	lsrs	r0, r0, #29
    348a:	4305      	orrs	r5, r0
    348c:	484d      	ldr	r0, [pc, #308]	; (35c4 <_usb_d_dev_ep_enable+0x2cc>)
    348e:	4684      	mov	ip, r0
    3490:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3492:	2080      	movs	r0, #128	; 0x80
    3494:	0040      	lsls	r0, r0, #1
    3496:	5415      	strb	r5, [r2, r0]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3498:	18f6      	adds	r6, r6, r3
    349a:	00b6      	lsls	r6, r6, #2
    349c:	19a4      	adds	r4, r4, r6
    349e:	3444      	adds	r4, #68	; 0x44
    34a0:	8825      	ldrh	r5, [r4, #0]
    34a2:	03ab      	lsls	r3, r5, #14
    34a4:	4c49      	ldr	r4, [pc, #292]	; (35cc <_usb_d_dev_ep_enable+0x2d4>)
    34a6:	401c      	ands	r4, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    34a8:	3001      	adds	r0, #1
    34aa:	30ff      	adds	r0, #255	; 0xff
    34ac:	2307      	movs	r3, #7
    34ae:	4285      	cmp	r5, r0
    34b0:	d814      	bhi.n	34dc <_usb_d_dev_ep_enable+0x1e4>
    34b2:	3801      	subs	r0, #1
    34b4:	38ff      	subs	r0, #255	; 0xff
    34b6:	3b01      	subs	r3, #1
    34b8:	4285      	cmp	r5, r0
    34ba:	d80f      	bhi.n	34dc <_usb_d_dev_ep_enable+0x1e4>
    34bc:	3b01      	subs	r3, #1
    34be:	2d80      	cmp	r5, #128	; 0x80
    34c0:	d80c      	bhi.n	34dc <_usb_d_dev_ep_enable+0x1e4>
    34c2:	3b01      	subs	r3, #1
    34c4:	2d40      	cmp	r5, #64	; 0x40
    34c6:	d809      	bhi.n	34dc <_usb_d_dev_ep_enable+0x1e4>
    34c8:	3b01      	subs	r3, #1
    34ca:	2d20      	cmp	r5, #32
    34cc:	d806      	bhi.n	34dc <_usb_d_dev_ep_enable+0x1e4>
    34ce:	3b01      	subs	r3, #1
    34d0:	2d10      	cmp	r5, #16
    34d2:	d803      	bhi.n	34dc <_usb_d_dev_ep_enable+0x1e4>
    34d4:	38f8      	subs	r0, #248	; 0xf8
    34d6:	42a8      	cmp	r0, r5
    34d8:	4180      	sbcs	r0, r0
    34da:	4243      	negs	r3, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    34dc:	071b      	lsls	r3, r3, #28
    34de:	4323      	orrs	r3, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    34e0:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    34e2:	2040      	movs	r0, #64	; 0x40
    34e4:	2306      	movs	r3, #6
    34e6:	33ff      	adds	r3, #255	; 0xff
    34e8:	54d0      	strb	r0, [r2, r3]
	bank->STATUS_BK.reg     = 0;
    34ea:	0149      	lsls	r1, r1, #5
    34ec:	4b38      	ldr	r3, [pc, #224]	; (35d0 <_usb_d_dev_ep_enable+0x2d8>)
    34ee:	1859      	adds	r1, r3, r1
    34f0:	2300      	movs	r3, #0
    34f2:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    34f4:	2000      	movs	r0, #0
}
    34f6:	bc04      	pop	{r2}
    34f8:	4690      	mov	r8, r2
    34fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    34fc:	24e0      	movs	r4, #224	; 0xe0
    34fe:	05e4      	lsls	r4, r4, #23
    3500:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3502:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3504:	0485      	lsls	r5, r0, #18
    3506:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    3508:	2407      	movs	r4, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    350a:	0724      	lsls	r4, r4, #28
    350c:	432c      	orrs	r4, r5
    350e:	617c      	str	r4, [r7, #20]
    3510:	2406      	movs	r4, #6
    3512:	34ff      	adds	r4, #255	; 0xff
    3514:	2540      	movs	r5, #64	; 0x40
    3516:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    3518:	2682      	movs	r6, #130	; 0x82
    351a:	0076      	lsls	r6, r6, #1
    351c:	2780      	movs	r7, #128	; 0x80
    351e:	5597      	strb	r7, [r2, r6]
	bank->STATUS_BK.reg     = 0;
    3520:	4f2b      	ldr	r7, [pc, #172]	; (35d0 <_usb_d_dev_ep_enable+0x2d8>)
    3522:	0149      	lsls	r1, r1, #5
    3524:	1879      	adds	r1, r7, r1
    3526:	2200      	movs	r2, #0
    3528:	728a      	strb	r2, [r1, #10]
    352a:	768a      	strb	r2, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    352c:	210f      	movs	r1, #15
    352e:	4662      	mov	r2, ip
    3530:	4011      	ands	r1, r2
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    3532:	009a      	lsls	r2, r3, #2
    3534:	18d2      	adds	r2, r2, r3
    3536:	0092      	lsls	r2, r2, #2
    3538:	4b23      	ldr	r3, [pc, #140]	; (35c8 <_usb_d_dev_ep_enable+0x2d0>)
    353a:	189a      	adds	r2, r3, r2
    353c:	6c12      	ldr	r2, [r2, #64]	; 0x40
	bank->ADDR.reg          = addr;
    353e:	014b      	lsls	r3, r1, #5
    3540:	51da      	str	r2, [r3, r7]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    3542:	18f9      	adds	r1, r7, r3
    3544:	684a      	ldr	r2, [r1, #4]
    3546:	0480      	lsls	r0, r0, #18
    3548:	0907      	lsrs	r7, r0, #4
    354a:	4822      	ldr	r0, [pc, #136]	; (35d4 <_usb_d_dev_ep_enable+0x2dc>)
    354c:	4010      	ands	r0, r2
    354e:	4338      	orrs	r0, r7
    3550:	6048      	str	r0, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    3552:	684a      	ldr	r2, [r1, #4]
    3554:	0b92      	lsrs	r2, r2, #14
    3556:	0392      	lsls	r2, r2, #14
    3558:	604a      	str	r2, [r1, #4]
    355a:	4a1a      	ldr	r2, [pc, #104]	; (35c4 <_usb_d_dev_ep_enable+0x2cc>)
    355c:	189a      	adds	r2, r3, r2
    355e:	21b0      	movs	r1, #176	; 0xb0
    3560:	5591      	strb	r1, [r2, r6]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3562:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3564:	4a1c      	ldr	r2, [pc, #112]	; (35d8 <_usb_d_dev_ep_enable+0x2e0>)
    3566:	4694      	mov	ip, r2
    3568:	4463      	add	r3, ip
    356a:	2210      	movs	r2, #16
    356c:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    356e:	2000      	movs	r0, #0
    3570:	e7c1      	b.n	34f6 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3572:	24a0      	movs	r4, #160	; 0xa0
    3574:	05e4      	lsls	r4, r4, #23
    3576:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3578:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    357a:	0485      	lsls	r5, r0, #18
    357c:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    357e:	2405      	movs	r4, #5
    3580:	e7c3      	b.n	350a <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3582:	24c0      	movs	r4, #192	; 0xc0
    3584:	05a4      	lsls	r4, r4, #22
    3586:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3588:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    358a:	0485      	lsls	r5, r0, #18
    358c:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    358e:	2403      	movs	r4, #3
    3590:	e7bb      	b.n	350a <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    3592:	24c0      	movs	r4, #192	; 0xc0
    3594:	05e4      	lsls	r4, r4, #23
    3596:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    3598:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    359a:	0485      	lsls	r5, r0, #18
    359c:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    359e:	2406      	movs	r4, #6
    35a0:	e7b3      	b.n	350a <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    35a2:	2480      	movs	r4, #128	; 0x80
    35a4:	05e4      	lsls	r4, r4, #23
    35a6:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    35a8:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    35aa:	0485      	lsls	r5, r0, #18
    35ac:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    35ae:	2404      	movs	r4, #4
    35b0:	e7ab      	b.n	350a <_usb_d_dev_ep_enable+0x212>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    35b2:	2480      	movs	r4, #128	; 0x80
    35b4:	05a4      	lsls	r4, r4, #22
    35b6:	4325      	orrs	r5, r4
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    35b8:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    35ba:	0485      	lsls	r5, r0, #18
    35bc:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    35be:	2402      	movs	r4, #2
    35c0:	e7a3      	b.n	350a <_usb_d_dev_ep_enable+0x212>
    35c2:	46c0      	nop			; (mov r8, r8)
    35c4:	41005000 	.word	0x41005000
    35c8:	20000824 	.word	0x20000824
    35cc:	0fffc000 	.word	0x0fffc000
    35d0:	200007a4 	.word	0x200007a4
    35d4:	f0003fff 	.word	0xf0003fff
    35d8:	41005109 	.word	0x41005109

000035dc <_usb_d_dev_ep_stall>:
{
    35dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    35de:	230f      	movs	r3, #15
    35e0:	4003      	ands	r3, r0
    35e2:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    35e4:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    35e6:	2b00      	cmp	r3, #0
    35e8:	d009      	beq.n	35fe <_usb_d_dev_ep_stall+0x22>
    35ea:	001a      	movs	r2, r3
    35ec:	2800      	cmp	r0, #0
    35ee:	db04      	blt.n	35fa <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    35f0:	2b04      	cmp	r3, #4
    35f2:	d905      	bls.n	3600 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    35f4:	2012      	movs	r0, #18
    35f6:	4240      	negs	r0, r0
    35f8:	e019      	b.n	362e <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    35fa:	1d1a      	adds	r2, r3, #4
    35fc:	e7f8      	b.n	35f0 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    35fe:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    3600:	2901      	cmp	r1, #1
    3602:	d015      	beq.n	3630 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    3604:	2900      	cmp	r1, #0
    3606:	d036      	beq.n	3676 <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3608:	0093      	lsls	r3, r2, #2
    360a:	189b      	adds	r3, r3, r2
    360c:	009b      	lsls	r3, r3, #2
    360e:	4a47      	ldr	r2, [pc, #284]	; (372c <_usb_d_dev_ep_stall+0x150>)
    3610:	18d2      	adds	r2, r2, r3
    3612:	3246      	adds	r2, #70	; 0x46
    3614:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3616:	230f      	movs	r3, #15
    3618:	4013      	ands	r3, r2
    361a:	015b      	lsls	r3, r3, #5
    361c:	4a44      	ldr	r2, [pc, #272]	; (3730 <_usb_d_dev_ep_stall+0x154>)
    361e:	4694      	mov	ip, r2
    3620:	4463      	add	r3, ip
    3622:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3624:	2310      	movs	r3, #16
    3626:	40a3      	lsls	r3, r4
    3628:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    362a:	1e43      	subs	r3, r0, #1
    362c:	4198      	sbcs	r0, r3
}
    362e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3630:	2510      	movs	r5, #16
    3632:	40a5      	lsls	r5, r4
    3634:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    3636:	493d      	ldr	r1, [pc, #244]	; (372c <_usb_d_dev_ep_stall+0x150>)
    3638:	0090      	lsls	r0, r2, #2
    363a:	1883      	adds	r3, r0, r2
    363c:	009b      	lsls	r3, r3, #2
    363e:	18cb      	adds	r3, r1, r3
    3640:	3346      	adds	r3, #70	; 0x46
    3642:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    3644:	230f      	movs	r3, #15
    3646:	4033      	ands	r3, r6
    3648:	015e      	lsls	r6, r3, #5
    364a:	4f39      	ldr	r7, [pc, #228]	; (3730 <_usb_d_dev_ep_stall+0x154>)
    364c:	46bc      	mov	ip, r7
    364e:	4466      	add	r6, ip
    3650:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    3652:	2520      	movs	r5, #32
    3654:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    3656:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    3658:	015b      	lsls	r3, r3, #5
    365a:	4d36      	ldr	r5, [pc, #216]	; (3734 <_usb_d_dev_ep_stall+0x158>)
    365c:	46ac      	mov	ip, r5
    365e:	4463      	add	r3, ip
    3660:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    3662:	1882      	adds	r2, r0, r2
    3664:	0092      	lsls	r2, r2, #2
    3666:	188a      	adds	r2, r1, r2
    3668:	3240      	adds	r2, #64	; 0x40
    366a:	79d3      	ldrb	r3, [r2, #7]
    366c:	2108      	movs	r1, #8
    366e:	430b      	orrs	r3, r1
    3670:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    3672:	2000      	movs	r0, #0
    3674:	e7db      	b.n	362e <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    3676:	0093      	lsls	r3, r2, #2
    3678:	189b      	adds	r3, r3, r2
    367a:	0099      	lsls	r1, r3, #2
    367c:	4b2b      	ldr	r3, [pc, #172]	; (372c <_usb_d_dev_ep_stall+0x150>)
    367e:	185b      	adds	r3, r3, r1
    3680:	3346      	adds	r3, #70	; 0x46
    3682:	781b      	ldrb	r3, [r3, #0]
    3684:	210f      	movs	r1, #15
    3686:	400b      	ands	r3, r1
    3688:	015d      	lsls	r5, r3, #5
    368a:	492b      	ldr	r1, [pc, #172]	; (3738 <_usb_d_dev_ep_stall+0x15c>)
    368c:	468c      	mov	ip, r1
    368e:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3690:	2183      	movs	r1, #131	; 0x83
    3692:	0049      	lsls	r1, r1, #1
    3694:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    3696:	39f6      	subs	r1, #246	; 0xf6
    3698:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    369a:	2000      	movs	r0, #0
	if (!is_stalled) {
    369c:	420e      	tst	r6, r1
    369e:	d0c6      	beq.n	362e <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    36a0:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    36a2:	3005      	adds	r0, #5
    36a4:	30ff      	adds	r0, #255	; 0xff
    36a6:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    36a8:	2120      	movs	r1, #32
    36aa:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    36ac:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    36ae:	015b      	lsls	r3, r3, #5
    36b0:	4e22      	ldr	r6, [pc, #136]	; (373c <_usb_d_dev_ep_stall+0x160>)
    36b2:	46b4      	mov	ip, r6
    36b4:	4463      	add	r3, ip
    36b6:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    36b8:	2308      	movs	r3, #8
    36ba:	33ff      	adds	r3, #255	; 0xff
    36bc:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    36be:	420b      	tst	r3, r1
    36c0:	d009      	beq.n	36d6 <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    36c2:	2308      	movs	r3, #8
    36c4:	33ff      	adds	r3, #255	; 0xff
    36c6:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    36c8:	3b07      	subs	r3, #7
    36ca:	3bff      	subs	r3, #255	; 0xff
    36cc:	40a3      	lsls	r3, r4
    36ce:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    36d0:	2182      	movs	r1, #130	; 0x82
    36d2:	0049      	lsls	r1, r1, #1
    36d4:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    36d6:	0093      	lsls	r3, r2, #2
    36d8:	189b      	adds	r3, r3, r2
    36da:	0099      	lsls	r1, r3, #2
    36dc:	4b13      	ldr	r3, [pc, #76]	; (372c <_usb_d_dev_ep_stall+0x150>)
    36de:	185b      	adds	r3, r3, r1
    36e0:	3340      	adds	r3, #64	; 0x40
    36e2:	79d9      	ldrb	r1, [r3, #7]
    36e4:	2307      	movs	r3, #7
    36e6:	400b      	ands	r3, r1
    36e8:	2b01      	cmp	r3, #1
    36ea:	d00b      	beq.n	3704 <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    36ec:	0093      	lsls	r3, r2, #2
    36ee:	189a      	adds	r2, r3, r2
    36f0:	0092      	lsls	r2, r2, #2
    36f2:	4b0e      	ldr	r3, [pc, #56]	; (372c <_usb_d_dev_ep_stall+0x150>)
    36f4:	189b      	adds	r3, r3, r2
    36f6:	3340      	adds	r3, #64	; 0x40
    36f8:	79da      	ldrb	r2, [r3, #7]
    36fa:	2108      	movs	r1, #8
    36fc:	438a      	bics	r2, r1
    36fe:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    3700:	2000      	movs	r0, #0
    3702:	e794      	b.n	362e <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    3704:	3306      	adds	r3, #6
    3706:	33ff      	adds	r3, #255	; 0xff
    3708:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    370a:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    370c:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    370e:	4219      	tst	r1, r3
    3710:	d000      	beq.n	3714 <_usb_d_dev_ep_stall+0x138>
    3712:	e78c      	b.n	362e <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    3714:	0093      	lsls	r3, r2, #2
    3716:	189a      	adds	r2, r3, r2
    3718:	0092      	lsls	r2, r2, #2
    371a:	4b04      	ldr	r3, [pc, #16]	; (372c <_usb_d_dev_ep_stall+0x150>)
    371c:	189b      	adds	r3, r3, r2
    371e:	3340      	adds	r3, #64	; 0x40
    3720:	79da      	ldrb	r2, [r3, #7]
    3722:	2108      	movs	r1, #8
    3724:	438a      	bics	r2, r1
    3726:	71da      	strb	r2, [r3, #7]
    3728:	e781      	b.n	362e <_usb_d_dev_ep_stall+0x52>
    372a:	46c0      	nop			; (mov r8, r8)
    372c:	20000824 	.word	0x20000824
    3730:	41005100 	.word	0x41005100
    3734:	41005109 	.word	0x41005109
    3738:	41005000 	.word	0x41005000
    373c:	41005108 	.word	0x41005108

00003740 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    3740:	b570      	push	{r4, r5, r6, lr}
    3742:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    3744:	230f      	movs	r3, #15
    3746:	4018      	ands	r0, r3
    3748:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    374a:	4b16      	ldr	r3, [pc, #88]	; (37a4 <_usb_d_dev_ep_read_req+0x64>)
    374c:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    374e:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    3750:	685b      	ldr	r3, [r3, #4]
    3752:	049b      	lsls	r3, r3, #18
    3754:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    3756:	2804      	cmp	r0, #4
    3758:	d81a      	bhi.n	3790 <_usb_d_dev_ep_read_req+0x50>
    375a:	2d00      	cmp	r5, #0
    375c:	d01b      	beq.n	3796 <_usb_d_dev_ep_read_req+0x56>
    375e:	4b12      	ldr	r3, [pc, #72]	; (37a8 <_usb_d_dev_ep_read_req+0x68>)
    3760:	469c      	mov	ip, r3
    3762:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    3764:	2380      	movs	r3, #128	; 0x80
    3766:	005b      	lsls	r3, r3, #1
    3768:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    376a:	2b11      	cmp	r3, #17
    376c:	d116      	bne.n	379c <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    376e:	2308      	movs	r3, #8
    3770:	33ff      	adds	r3, #255	; 0xff
    3772:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    3774:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    3776:	06db      	lsls	r3, r3, #27
    3778:	d400      	bmi.n	377c <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    377a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    377c:	2208      	movs	r2, #8
    377e:	0028      	movs	r0, r5
    3780:	4b0a      	ldr	r3, [pc, #40]	; (37ac <_usb_d_dev_ep_read_req+0x6c>)
    3782:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    3784:	2210      	movs	r2, #16
    3786:	2308      	movs	r3, #8
    3788:	33ff      	adds	r3, #255	; 0xff
    378a:	54e2      	strb	r2, [r4, r3]
	return bytes;
    378c:	0030      	movs	r0, r6
    378e:	e7f4      	b.n	377a <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    3790:	2012      	movs	r0, #18
    3792:	4240      	negs	r0, r0
    3794:	e7f1      	b.n	377a <_usb_d_dev_ep_read_req+0x3a>
    3796:	2012      	movs	r0, #18
    3798:	4240      	negs	r0, r0
    379a:	e7ee      	b.n	377a <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    379c:	2013      	movs	r0, #19
    379e:	4240      	negs	r0, r0
    37a0:	e7eb      	b.n	377a <_usb_d_dev_ep_read_req+0x3a>
    37a2:	46c0      	nop			; (mov r8, r8)
    37a4:	200007a4 	.word	0x200007a4
    37a8:	41005000 	.word	0x41005000
    37ac:	00004a6d 	.word	0x00004a6d

000037b0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    37b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    37b2:	46de      	mov	lr, fp
    37b4:	4657      	mov	r7, sl
    37b6:	464e      	mov	r6, r9
    37b8:	4645      	mov	r5, r8
    37ba:	b5e0      	push	{r5, r6, r7, lr}
    37bc:	b085      	sub	sp, #20
    37be:	0007      	movs	r7, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    37c0:	7a05      	ldrb	r5, [r0, #8]
    37c2:	230f      	movs	r3, #15
    37c4:	402b      	ands	r3, r5
    37c6:	b26d      	sxtb	r5, r5
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    37c8:	2b00      	cmp	r3, #0
    37ca:	d100      	bne.n	37ce <_usb_d_dev_ep_trans+0x1e>
    37cc:	e0d0      	b.n	3970 <_usb_d_dev_ep_trans+0x1c0>
    37ce:	001e      	movs	r6, r3
    37d0:	2d00      	cmp	r5, #0
    37d2:	db39      	blt.n	3848 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    37d4:	0034      	movs	r4, r6
    37d6:	4a72      	ldr	r2, [pc, #456]	; (39a0 <_usb_d_dev_ep_trans+0x1f0>)
    37d8:	2120      	movs	r1, #32
    37da:	4688      	mov	r8, r1
    37dc:	4490      	add	r8, r2
    37de:	1c71      	adds	r1, r6, #1
    37e0:	0088      	lsls	r0, r1, #2
    37e2:	1840      	adds	r0, r0, r1
    37e4:	0080      	lsls	r0, r0, #2
    37e6:	4480      	add	r8, r0
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    37e8:	00b1      	lsls	r1, r6, #2
    37ea:	1989      	adds	r1, r1, r6
    37ec:	0089      	lsls	r1, r1, #2
    37ee:	1852      	adds	r2, r2, r1
    37f0:	3244      	adds	r2, #68	; 0x44
    37f2:	8812      	ldrh	r2, [r2, #0]
    37f4:	496b      	ldr	r1, [pc, #428]	; (39a4 <_usb_d_dev_ep_trans+0x1f4>)
    37f6:	428a      	cmp	r2, r1
    37f8:	d028      	beq.n	384c <_usb_d_dev_ep_trans+0x9c>
    37fa:	1e56      	subs	r6, r2, #1
    37fc:	b2b6      	uxth	r6, r6
	bool     size_n_aligned = (trans->size & size_mask);
    37fe:	6879      	ldr	r1, [r7, #4]
    3800:	400e      	ands	r6, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    3802:	2b04      	cmp	r3, #4
    3804:	d900      	bls.n	3808 <_usb_d_dev_ep_trans+0x58>
    3806:	e09e      	b.n	3946 <_usb_d_dev_ep_trans+0x196>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    3808:	683b      	ldr	r3, [r7, #0]
    380a:	4867      	ldr	r0, [pc, #412]	; (39a8 <_usb_d_dev_ep_trans+0x1f8>)
    380c:	4283      	cmp	r3, r0
    380e:	d91f      	bls.n	3850 <_usb_d_dev_ep_trans+0xa0>
    3810:	1858      	adds	r0, r3, r1
    3812:	9001      	str	r0, [sp, #4]
    3814:	4865      	ldr	r0, [pc, #404]	; (39ac <_usb_d_dev_ep_trans+0x1fc>)
    3816:	4684      	mov	ip, r0
    3818:	9801      	ldr	r0, [sp, #4]
    381a:	4560      	cmp	r0, ip
    381c:	d818      	bhi.n	3850 <_usb_d_dev_ep_trans+0xa0>
    381e:	079b      	lsls	r3, r3, #30
    3820:	d116      	bne.n	3850 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    3822:	2d00      	cmp	r5, #0
    3824:	db30      	blt.n	3888 <_usb_d_dev_ep_trans+0xd8>
    3826:	428a      	cmp	r2, r1
    3828:	d900      	bls.n	382c <_usb_d_dev_ep_trans+0x7c>
    382a:	e0ad      	b.n	3988 <_usb_d_dev_ep_trans+0x1d8>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    382c:	2e00      	cmp	r6, #0
    382e:	d02e      	beq.n	388e <_usb_d_dev_ep_trans+0xde>
		if (!ept->cache) {
    3830:	00a3      	lsls	r3, r4, #2
    3832:	191b      	adds	r3, r3, r4
    3834:	009b      	lsls	r3, r3, #2
    3836:	4a5a      	ldr	r2, [pc, #360]	; (39a0 <_usb_d_dev_ep_trans+0x1f0>)
    3838:	18d3      	adds	r3, r2, r3
    383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    383c:	2b00      	cmp	r3, #0
    383e:	d100      	bne.n	3842 <_usb_d_dev_ep_trans+0x92>
    3840:	e087      	b.n	3952 <_usb_d_dev_ep_trans+0x1a2>
	bool use_cache = false;
    3842:	2300      	movs	r3, #0
    3844:	4699      	mov	r9, r3
    3846:	e00e      	b.n	3866 <_usb_d_dev_ep_trans+0xb6>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    3848:	1d1e      	adds	r6, r3, #4
    384a:	e7c3      	b.n	37d4 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    384c:	0016      	movs	r6, r2
    384e:	e7d6      	b.n	37fe <_usb_d_dev_ep_trans+0x4e>
		if (!ept->cache) {
    3850:	00a3      	lsls	r3, r4, #2
    3852:	191b      	adds	r3, r3, r4
    3854:	009b      	lsls	r3, r3, #2
    3856:	4a52      	ldr	r2, [pc, #328]	; (39a0 <_usb_d_dev_ep_trans+0x1f0>)
    3858:	18d3      	adds	r3, r2, r3
    385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    385c:	2b00      	cmp	r3, #0
    385e:	d100      	bne.n	3862 <_usb_d_dev_ep_trans+0xb2>
    3860:	e074      	b.n	394c <_usb_d_dev_ep_trans+0x19c>
		use_cache = true;
    3862:	2301      	movs	r3, #1
    3864:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    3866:	00a3      	lsls	r3, r4, #2
    3868:	191b      	adds	r3, r3, r4
    386a:	009a      	lsls	r2, r3, #2
    386c:	4b4c      	ldr	r3, [pc, #304]	; (39a0 <_usb_d_dev_ep_trans+0x1f0>)
    386e:	189b      	adds	r3, r3, r2
    3870:	3340      	adds	r3, #64	; 0x40
    3872:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    3874:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    3876:	071b      	lsls	r3, r3, #28
    3878:	d50c      	bpl.n	3894 <_usb_d_dev_ep_trans+0xe4>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    387a:	b005      	add	sp, #20
    387c:	bc3c      	pop	{r2, r3, r4, r5}
    387e:	4690      	mov	r8, r2
    3880:	4699      	mov	r9, r3
    3882:	46a2      	mov	sl, r4
    3884:	46ab      	mov	fp, r5
    3886:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    3888:	2300      	movs	r3, #0
    388a:	4699      	mov	r9, r3
    388c:	e7eb      	b.n	3866 <_usb_d_dev_ep_trans+0xb6>
    388e:	2300      	movs	r3, #0
    3890:	4699      	mov	r9, r3
    3892:	e7e8      	b.n	3866 <_usb_d_dev_ep_trans+0xb6>
	atomic_enter_critical(&flags);
    3894:	a803      	add	r0, sp, #12
    3896:	4b46      	ldr	r3, [pc, #280]	; (39b0 <_usb_d_dev_ep_trans+0x200>)
    3898:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    389a:	00a3      	lsls	r3, r4, #2
    389c:	191b      	adds	r3, r3, r4
    389e:	009a      	lsls	r2, r3, #2
    38a0:	4b3f      	ldr	r3, [pc, #252]	; (39a0 <_usb_d_dev_ep_trans+0x1f0>)
    38a2:	189b      	adds	r3, r3, r2
    38a4:	3340      	adds	r3, #64	; 0x40
    38a6:	79db      	ldrb	r3, [r3, #7]
    38a8:	065b      	lsls	r3, r3, #25
    38aa:	d441      	bmi.n	3930 <_usb_d_dev_ep_trans+0x180>
	ept->flags.bits.is_busy = 1;
    38ac:	00a3      	lsls	r3, r4, #2
    38ae:	191b      	adds	r3, r3, r4
    38b0:	009b      	lsls	r3, r3, #2
    38b2:	4a3b      	ldr	r2, [pc, #236]	; (39a0 <_usb_d_dev_ep_trans+0x1f0>)
    38b4:	4693      	mov	fp, r2
    38b6:	449b      	add	fp, r3
    38b8:	2340      	movs	r3, #64	; 0x40
    38ba:	445b      	add	r3, fp
    38bc:	469a      	mov	sl, r3
    38be:	79db      	ldrb	r3, [r3, #7]
    38c0:	2240      	movs	r2, #64	; 0x40
    38c2:	4313      	orrs	r3, r2
    38c4:	4652      	mov	r2, sl
    38c6:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    38c8:	a803      	add	r0, sp, #12
    38ca:	4b3a      	ldr	r3, [pc, #232]	; (39b4 <_usb_d_dev_ep_trans+0x204>)
    38cc:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    38ce:	465b      	mov	r3, fp
    38d0:	683a      	ldr	r2, [r7, #0]
    38d2:	635a      	str	r2, [r3, #52]	; 0x34
	ept->trans_size  = trans->size;
    38d4:	687a      	ldr	r2, [r7, #4]
    38d6:	639a      	str	r2, [r3, #56]	; 0x38
	ept->trans_count = 0;
    38d8:	2300      	movs	r3, #0
    38da:	465a      	mov	r2, fp
    38dc:	63d3      	str	r3, [r2, #60]	; 0x3c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    38de:	0fea      	lsrs	r2, r5, #31
	ept->flags.bits.dir       = dir;
    38e0:	01d2      	lsls	r2, r2, #7
    38e2:	4653      	mov	r3, sl
    38e4:	79d9      	ldrb	r1, [r3, #7]
    38e6:	237f      	movs	r3, #127	; 0x7f
    38e8:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    38ea:	4649      	mov	r1, r9
    38ec:	0149      	lsls	r1, r1, #5
    38ee:	4313      	orrs	r3, r2
    38f0:	2220      	movs	r2, #32
    38f2:	4393      	bics	r3, r2
    38f4:	430b      	orrs	r3, r1
    38f6:	4652      	mov	r2, sl
    38f8:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    38fa:	7a7b      	ldrb	r3, [r7, #9]
    38fc:	2200      	movs	r2, #0
    38fe:	2b00      	cmp	r3, #0
    3900:	d002      	beq.n	3908 <_usb_d_dev_ep_trans+0x158>
    3902:	4272      	negs	r2, r6
    3904:	4172      	adcs	r2, r6
    3906:	b2d2      	uxtb	r2, r2
    3908:	00a3      	lsls	r3, r4, #2
    390a:	191c      	adds	r4, r3, r4
    390c:	00a4      	lsls	r4, r4, #2
    390e:	4b24      	ldr	r3, [pc, #144]	; (39a0 <_usb_d_dev_ep_trans+0x1f0>)
    3910:	191b      	adds	r3, r3, r4
    3912:	3340      	adds	r3, #64	; 0x40
    3914:	0112      	lsls	r2, r2, #4
    3916:	79de      	ldrb	r6, [r3, #7]
    3918:	2110      	movs	r1, #16
    391a:	438e      	bics	r6, r1
    391c:	4316      	orrs	r6, r2
    391e:	71de      	strb	r6, [r3, #7]
	if (dir) {
    3920:	2d00      	cmp	r5, #0
    3922:	db0a      	blt.n	393a <_usb_d_dev_ep_trans+0x18a>
		_usb_d_dev_out_next(ept, false);
    3924:	2100      	movs	r1, #0
    3926:	4640      	mov	r0, r8
    3928:	4b23      	ldr	r3, [pc, #140]	; (39b8 <_usb_d_dev_ep_trans+0x208>)
    392a:	4798      	blx	r3
	return ERR_NONE;
    392c:	2000      	movs	r0, #0
    392e:	e7a4      	b.n	387a <_usb_d_dev_ep_trans+0xca>
		atomic_leave_critical(&flags);
    3930:	a803      	add	r0, sp, #12
    3932:	4b20      	ldr	r3, [pc, #128]	; (39b4 <_usb_d_dev_ep_trans+0x204>)
    3934:	4798      	blx	r3
		return USB_BUSY;
    3936:	2001      	movs	r0, #1
    3938:	e79f      	b.n	387a <_usb_d_dev_ep_trans+0xca>
		_usb_d_dev_in_next(ept, false);
    393a:	2100      	movs	r1, #0
    393c:	4640      	mov	r0, r8
    393e:	4b1f      	ldr	r3, [pc, #124]	; (39bc <_usb_d_dev_ep_trans+0x20c>)
    3940:	4798      	blx	r3
	return ERR_NONE;
    3942:	2000      	movs	r0, #0
    3944:	e799      	b.n	387a <_usb_d_dev_ep_trans+0xca>
		return -USB_ERR_PARAM;
    3946:	2012      	movs	r0, #18
    3948:	4240      	negs	r0, r0
    394a:	e796      	b.n	387a <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_FUNC;
    394c:	2013      	movs	r0, #19
    394e:	4240      	negs	r0, r0
    3950:	e793      	b.n	387a <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_PARAM;
    3952:	2012      	movs	r0, #18
    3954:	4240      	negs	r0, r0
    3956:	e790      	b.n	387a <_usb_d_dev_ep_trans+0xca>
			return -USB_ERR_FUNC;
    3958:	2013      	movs	r0, #19
    395a:	4240      	negs	r0, r0
    395c:	e78d      	b.n	387a <_usb_d_dev_ep_trans+0xca>
	bool     size_n_aligned = (trans->size & size_mask);
    395e:	6879      	ldr	r1, [r7, #4]
    3960:	058e      	lsls	r6, r1, #22
    3962:	0db6      	lsrs	r6, r6, #22
	return &dev_inst.ep[ep_index];
    3964:	4b0e      	ldr	r3, [pc, #56]	; (39a0 <_usb_d_dev_ep_trans+0x1f0>)
    3966:	2034      	movs	r0, #52	; 0x34
    3968:	4680      	mov	r8, r0
    396a:	4498      	add	r8, r3
    396c:	2400      	movs	r4, #0
    396e:	e74b      	b.n	3808 <_usb_d_dev_ep_trans+0x58>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    3970:	2244      	movs	r2, #68	; 0x44
    3972:	490b      	ldr	r1, [pc, #44]	; (39a0 <_usb_d_dev_ep_trans+0x1f0>)
    3974:	5a8a      	ldrh	r2, [r1, r2]
    3976:	490b      	ldr	r1, [pc, #44]	; (39a4 <_usb_d_dev_ep_trans+0x1f4>)
    3978:	428a      	cmp	r2, r1
    397a:	d0f0      	beq.n	395e <_usb_d_dev_ep_trans+0x1ae>
	return &dev_inst.ep[ep_index];
    397c:	4908      	ldr	r1, [pc, #32]	; (39a0 <_usb_d_dev_ep_trans+0x1f0>)
    397e:	2034      	movs	r0, #52	; 0x34
    3980:	4680      	mov	r8, r0
    3982:	4488      	add	r8, r1
    3984:	2400      	movs	r4, #0
    3986:	e738      	b.n	37fa <_usb_d_dev_ep_trans+0x4a>
		if (!ept->cache) {
    3988:	00a3      	lsls	r3, r4, #2
    398a:	191b      	adds	r3, r3, r4
    398c:	009b      	lsls	r3, r3, #2
    398e:	4a04      	ldr	r2, [pc, #16]	; (39a0 <_usb_d_dev_ep_trans+0x1f0>)
    3990:	18d3      	adds	r3, r2, r3
    3992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3994:	2b00      	cmp	r3, #0
    3996:	d0df      	beq.n	3958 <_usb_d_dev_ep_trans+0x1a8>
    3998:	2301      	movs	r3, #1
    399a:	4699      	mov	r9, r3
    399c:	e763      	b.n	3866 <_usb_d_dev_ep_trans+0xb6>
    399e:	46c0      	nop			; (mov r8, r8)
    39a0:	20000824 	.word	0x20000824
    39a4:	000003ff 	.word	0x000003ff
    39a8:	1fffffff 	.word	0x1fffffff
    39ac:	20007fff 	.word	0x20007fff
    39b0:	000048d1 	.word	0x000048d1
    39b4:	000048df 	.word	0x000048df
    39b8:	00002d7d 	.word	0x00002d7d
    39bc:	00002bd1 	.word	0x00002bd1

000039c0 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    39c0:	b510      	push	{r4, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    39c2:	230f      	movs	r3, #15
    39c4:	4003      	ands	r3, r0
    39c6:	b241      	sxtb	r1, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    39c8:	2b00      	cmp	r3, #0
    39ca:	d00e      	beq.n	39ea <_usb_d_dev_ep_abort+0x2a>
    39cc:	001a      	movs	r2, r3
    39ce:	2900      	cmp	r1, #0
    39d0:	db02      	blt.n	39d8 <_usb_d_dev_ep_abort+0x18>
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
	if (epn > CONF_USB_D_MAX_EP_N) {
    39d2:	2b04      	cmp	r3, #4
    39d4:	d902      	bls.n	39dc <_usb_d_dev_ep_abort+0x1c>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}
    39d6:	bd10      	pop	{r4, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    39d8:	1d1a      	adds	r2, r3, #4
    39da:	e7fa      	b.n	39d2 <_usb_d_dev_ep_abort+0x12>
	return &dev_inst.ep[ep_index];
    39dc:	3201      	adds	r2, #1
    39de:	2014      	movs	r0, #20
    39e0:	4342      	muls	r2, r0
    39e2:	4805      	ldr	r0, [pc, #20]	; (39f8 <_usb_d_dev_ep_abort+0x38>)
    39e4:	3020      	adds	r0, #32
    39e6:	1880      	adds	r0, r0, r2
    39e8:	e001      	b.n	39ee <_usb_d_dev_ep_abort+0x2e>
    39ea:	4803      	ldr	r0, [pc, #12]	; (39f8 <_usb_d_dev_ep_abort+0x38>)
    39ec:	3034      	adds	r0, #52	; 0x34
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    39ee:	0fc9      	lsrs	r1, r1, #31
    39f0:	2202      	movs	r2, #2
    39f2:	4b02      	ldr	r3, [pc, #8]	; (39fc <_usb_d_dev_ep_abort+0x3c>)
    39f4:	4798      	blx	r3
    39f6:	e7ee      	b.n	39d6 <_usb_d_dev_ep_abort+0x16>
    39f8:	20000824 	.word	0x20000824
    39fc:	00002a1d 	.word	0x00002a1d

00003a00 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3a00:	1e0b      	subs	r3, r1, #0
    3a02:	d006      	beq.n	3a12 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    3a04:	2801      	cmp	r0, #1
    3a06:	d006      	beq.n	3a16 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    3a08:	2800      	cmp	r0, #0
    3a0a:	d101      	bne.n	3a10 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    3a0c:	4a03      	ldr	r2, [pc, #12]	; (3a1c <_usb_d_dev_register_callback+0x1c>)
    3a0e:	6213      	str	r3, [r2, #32]
	}
}
    3a10:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3a12:	4b03      	ldr	r3, [pc, #12]	; (3a20 <_usb_d_dev_register_callback+0x20>)
    3a14:	e7f6      	b.n	3a04 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    3a16:	4a01      	ldr	r2, [pc, #4]	; (3a1c <_usb_d_dev_register_callback+0x1c>)
    3a18:	6253      	str	r3, [r2, #36]	; 0x24
    3a1a:	e7f9      	b.n	3a10 <_usb_d_dev_register_callback+0x10>
    3a1c:	20000824 	.word	0x20000824
    3a20:	0000292d 	.word	0x0000292d

00003a24 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3a24:	1e0b      	subs	r3, r1, #0
    3a26:	d008      	beq.n	3a3a <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    3a28:	2800      	cmp	r0, #0
    3a2a:	d008      	beq.n	3a3e <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    3a2c:	2801      	cmp	r0, #1
    3a2e:	d009      	beq.n	3a44 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    3a30:	2802      	cmp	r0, #2
    3a32:	d106      	bne.n	3a42 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    3a34:	4a05      	ldr	r2, [pc, #20]	; (3a4c <_usb_d_dev_register_ep_callback+0x28>)
    3a36:	6313      	str	r3, [r2, #48]	; 0x30
	}
}
    3a38:	e003      	b.n	3a42 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    3a3a:	4b05      	ldr	r3, [pc, #20]	; (3a50 <_usb_d_dev_register_ep_callback+0x2c>)
    3a3c:	e7f4      	b.n	3a28 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    3a3e:	4a03      	ldr	r2, [pc, #12]	; (3a4c <_usb_d_dev_register_ep_callback+0x28>)
    3a40:	6293      	str	r3, [r2, #40]	; 0x28
}
    3a42:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    3a44:	4a01      	ldr	r2, [pc, #4]	; (3a4c <_usb_d_dev_register_ep_callback+0x28>)
    3a46:	62d3      	str	r3, [r2, #44]	; 0x2c
    3a48:	e7fb      	b.n	3a42 <_usb_d_dev_register_ep_callback+0x1e>
    3a4a:	46c0      	nop			; (mov r8, r8)
    3a4c:	20000824 	.word	0x20000824
    3a50:	0000292d 	.word	0x0000292d

00003a54 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    3a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    3a56:	4b8b      	ldr	r3, [pc, #556]	; (3c84 <USB_Handler+0x230>)
    3a58:	8c1e      	ldrh	r6, [r3, #32]
    3a5a:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    3a5c:	2e00      	cmp	r6, #0
    3a5e:	d003      	beq.n	3a68 <USB_Handler+0x14>
    3a60:	4c89      	ldr	r4, [pc, #548]	; (3c88 <USB_Handler+0x234>)
    3a62:	3434      	adds	r4, #52	; 0x34
	uint32_t lpm_variable = 0;
    3a64:	2500      	movs	r5, #0
    3a66:	e0ca      	b.n	3bfe <USB_Handler+0x1aa>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    3a68:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    3a6a:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    3a6c:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    3a6e:	075a      	lsls	r2, r3, #29
    3a70:	d418      	bmi.n	3aa4 <USB_Handler+0x50>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    3a72:	059a      	lsls	r2, r3, #22
    3a74:	d41d      	bmi.n	3ab2 <USB_Handler+0x5e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    3a76:	061a      	lsls	r2, r3, #24
    3a78:	d44f      	bmi.n	3b1a <USB_Handler+0xc6>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    3a7a:	2270      	movs	r2, #112	; 0x70
    3a7c:	421a      	tst	r2, r3
    3a7e:	d155      	bne.n	3b2c <USB_Handler+0xd8>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    3a80:	071a      	lsls	r2, r3, #28
    3a82:	d500      	bpl.n	3a86 <USB_Handler+0x32>
    3a84:	e06e      	b.n	3b64 <USB_Handler+0x110>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    3a86:	07db      	lsls	r3, r3, #31
    3a88:	d5ea      	bpl.n	3a60 <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3a8a:	4b7e      	ldr	r3, [pc, #504]	; (3c84 <USB_Handler+0x230>)
    3a8c:	4a7f      	ldr	r2, [pc, #508]	; (3c8c <USB_Handler+0x238>)
    3a8e:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3a90:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3a92:	3a92      	subs	r2, #146	; 0x92
    3a94:	3aff      	subs	r2, #255	; 0xff
    3a96:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    3a98:	4b7b      	ldr	r3, [pc, #492]	; (3c88 <USB_Handler+0x234>)
    3a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3a9c:	2100      	movs	r1, #0
    3a9e:	2004      	movs	r0, #4
    3aa0:	4798      	blx	r3
    3aa2:	e005      	b.n	3ab0 <USB_Handler+0x5c>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3aa4:	2204      	movs	r2, #4
    3aa6:	4b77      	ldr	r3, [pc, #476]	; (3c84 <USB_Handler+0x230>)
    3aa8:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    3aaa:	4b77      	ldr	r3, [pc, #476]	; (3c88 <USB_Handler+0x234>)
    3aac:	6a1b      	ldr	r3, [r3, #32]
    3aae:	4798      	blx	r3

	_usb_d_dev_handler();
}
    3ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ab2:	4b74      	ldr	r3, [pc, #464]	; (3c84 <USB_Handler+0x230>)
    3ab4:	4a75      	ldr	r2, [pc, #468]	; (3c8c <USB_Handler+0x238>)
    3ab6:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3ab8:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3aba:	3a92      	subs	r2, #146	; 0x92
    3abc:	3aff      	subs	r2, #255	; 0xff
    3abe:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    3ac0:	4b73      	ldr	r3, [pc, #460]	; (3c90 <USB_Handler+0x23c>)
    3ac2:	891b      	ldrh	r3, [r3, #8]
    3ac4:	071b      	lsls	r3, r3, #28
    3ac6:	0f1b      	lsrs	r3, r3, #28
    3ac8:	2b03      	cmp	r3, #3
    3aca:	d024      	beq.n	3b16 <USB_Handler+0xc2>
    3acc:	4b70      	ldr	r3, [pc, #448]	; (3c90 <USB_Handler+0x23c>)
    3ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    3ad0:	071b      	lsls	r3, r3, #28
    3ad2:	0f1b      	lsrs	r3, r3, #28
    3ad4:	2b03      	cmp	r3, #3
    3ad6:	d012      	beq.n	3afe <USB_Handler+0xaa>
    3ad8:	2348      	movs	r3, #72	; 0x48
    3ada:	4a6d      	ldr	r2, [pc, #436]	; (3c90 <USB_Handler+0x23c>)
    3adc:	5ad3      	ldrh	r3, [r2, r3]
    3ade:	071b      	lsls	r3, r3, #28
    3ae0:	0f1b      	lsrs	r3, r3, #28
    3ae2:	2b03      	cmp	r3, #3
    3ae4:	d015      	beq.n	3b12 <USB_Handler+0xbe>
    3ae6:	2368      	movs	r3, #104	; 0x68
    3ae8:	5ad3      	ldrh	r3, [r2, r3]
    3aea:	071b      	lsls	r3, r3, #28
    3aec:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    3aee:	2100      	movs	r1, #0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    3af0:	2b03      	cmp	r3, #3
    3af2:	d005      	beq.n	3b00 <USB_Handler+0xac>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    3af4:	4b64      	ldr	r3, [pc, #400]	; (3c88 <USB_Handler+0x234>)
    3af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3af8:	2003      	movs	r0, #3
    3afa:	4798      	blx	r3
    3afc:	e7d8      	b.n	3ab0 <USB_Handler+0x5c>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    3afe:	2301      	movs	r3, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    3b00:	015b      	lsls	r3, r3, #5
    3b02:	4a63      	ldr	r2, [pc, #396]	; (3c90 <USB_Handler+0x23c>)
    3b04:	18d3      	adds	r3, r2, r3
    3b06:	8919      	ldrh	r1, [r3, #8]
    3b08:	0449      	lsls	r1, r1, #17
    3b0a:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    3b0c:	2200      	movs	r2, #0
    3b0e:	811a      	strh	r2, [r3, #8]
    3b10:	e7f0      	b.n	3af4 <USB_Handler+0xa0>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    3b12:	2302      	movs	r3, #2
    3b14:	e7f4      	b.n	3b00 <USB_Handler+0xac>
    3b16:	2300      	movs	r3, #0
    3b18:	e7f2      	b.n	3b00 <USB_Handler+0xac>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3b1a:	2280      	movs	r2, #128	; 0x80
    3b1c:	4b59      	ldr	r3, [pc, #356]	; (3c84 <USB_Handler+0x230>)
    3b1e:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    3b20:	4b59      	ldr	r3, [pc, #356]	; (3c88 <USB_Handler+0x234>)
    3b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3b24:	2100      	movs	r1, #0
    3b26:	2005      	movs	r0, #5
    3b28:	4798      	blx	r3
    3b2a:	e7c1      	b.n	3ab0 <USB_Handler+0x5c>
    3b2c:	4b55      	ldr	r3, [pc, #340]	; (3c84 <USB_Handler+0x230>)
    3b2e:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3b30:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3b32:	4a56      	ldr	r2, [pc, #344]	; (3c8c <USB_Handler+0x238>)
    3b34:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3b36:	4b57      	ldr	r3, [pc, #348]	; (3c94 <USB_Handler+0x240>)
    3b38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3b3a:	069b      	lsls	r3, r3, #26
    3b3c:	d40c      	bmi.n	3b58 <USB_Handler+0x104>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3b3e:	4955      	ldr	r1, [pc, #340]	; (3c94 <USB_Handler+0x240>)
	tmp &= mask;
    3b40:	3a32      	subs	r2, #50	; 0x32
    3b42:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3b44:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    3b46:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    3b48:	2bd0      	cmp	r3, #208	; 0xd0
    3b4a:	d1fb      	bne.n	3b44 <USB_Handler+0xf0>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    3b4c:	4b4e      	ldr	r3, [pc, #312]	; (3c88 <USB_Handler+0x234>)
    3b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3b50:	2100      	movs	r1, #0
    3b52:	2002      	movs	r0, #2
    3b54:	4798      	blx	r3
    3b56:	e7ab      	b.n	3ab0 <USB_Handler+0x5c>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3b58:	494e      	ldr	r1, [pc, #312]	; (3c94 <USB_Handler+0x240>)
	tmp &= mask;
    3b5a:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    3b5c:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    3b5e:	421a      	tst	r2, r3
    3b60:	d0fc      	beq.n	3b5c <USB_Handler+0x108>
    3b62:	e7f3      	b.n	3b4c <USB_Handler+0xf8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    3b64:	4b47      	ldr	r3, [pc, #284]	; (3c84 <USB_Handler+0x230>)
    3b66:	2100      	movs	r1, #0
    3b68:	2280      	movs	r2, #128	; 0x80
    3b6a:	0052      	lsls	r2, r2, #1
    3b6c:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    3b6e:	3af8      	subs	r2, #248	; 0xf8
    3b70:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    3b72:	3268      	adds	r2, #104	; 0x68
    3b74:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    3b76:	4a45      	ldr	r2, [pc, #276]	; (3c8c <USB_Handler+0x238>)
    3b78:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    3b7a:	4b47      	ldr	r3, [pc, #284]	; (3c98 <USB_Handler+0x244>)
    3b7c:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    3b7e:	4b42      	ldr	r3, [pc, #264]	; (3c88 <USB_Handler+0x234>)
    3b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3b82:	2100      	movs	r1, #0
    3b84:	2001      	movs	r0, #1
    3b86:	4798      	blx	r3
    3b88:	e792      	b.n	3ab0 <USB_Handler+0x5c>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3b8a:	06cb      	lsls	r3, r1, #27
    3b8c:	d407      	bmi.n	3b9e <USB_Handler+0x14a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3b8e:	064b      	lsls	r3, r1, #25
    3b90:	d408      	bmi.n	3ba4 <USB_Handler+0x150>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3b92:	068b      	lsls	r3, r1, #26
    3b94:	d52e      	bpl.n	3bf4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 0);
    3b96:	2100      	movs	r1, #0
    3b98:	4b40      	ldr	r3, [pc, #256]	; (3c9c <USB_Handler+0x248>)
    3b9a:	4798      	blx	r3
    3b9c:	e02a      	b.n	3bf4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_setup(ept);
    3b9e:	4b40      	ldr	r3, [pc, #256]	; (3ca0 <USB_Handler+0x24c>)
    3ba0:	4798      	blx	r3
    3ba2:	e027      	b.n	3bf4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 1);
    3ba4:	2101      	movs	r1, #1
    3ba6:	4b3d      	ldr	r3, [pc, #244]	; (3c9c <USB_Handler+0x248>)
    3ba8:	4798      	blx	r3
    3baa:	e023      	b.n	3bf4 <USB_Handler+0x1a0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    3bac:	064b      	lsls	r3, r1, #25
    3bae:	d40e      	bmi.n	3bce <USB_Handler+0x17a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3bb0:	070b      	lsls	r3, r1, #28
    3bb2:	d410      	bmi.n	3bd6 <USB_Handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3bb4:	078b      	lsls	r3, r1, #30
    3bb6:	d412      	bmi.n	3bde <USB_Handler+0x18a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3bb8:	2307      	movs	r3, #7
    3bba:	401a      	ands	r2, r3
    3bbc:	2a01      	cmp	r2, #1
    3bbe:	d119      	bne.n	3bf4 <USB_Handler+0x1a0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3bc0:	074b      	lsls	r3, r1, #29
    3bc2:	d410      	bmi.n	3be6 <USB_Handler+0x192>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3bc4:	06cb      	lsls	r3, r1, #27
    3bc6:	d515      	bpl.n	3bf4 <USB_Handler+0x1a0>
			_usb_d_dev_handle_setup(ept);
    3bc8:	4b35      	ldr	r3, [pc, #212]	; (3ca0 <USB_Handler+0x24c>)
    3bca:	4798      	blx	r3
    3bcc:	e012      	b.n	3bf4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 1);
    3bce:	2101      	movs	r1, #1
    3bd0:	4b32      	ldr	r3, [pc, #200]	; (3c9c <USB_Handler+0x248>)
    3bd2:	4798      	blx	r3
    3bd4:	e00e      	b.n	3bf4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_trfail(ept, 1);
    3bd6:	2101      	movs	r1, #1
    3bd8:	4b32      	ldr	r3, [pc, #200]	; (3ca4 <USB_Handler+0x250>)
    3bda:	4798      	blx	r3
    3bdc:	e00a      	b.n	3bf4 <USB_Handler+0x1a0>
		_usb_d_dev_in_next(ept, true);
    3bde:	2101      	movs	r1, #1
    3be0:	4b31      	ldr	r3, [pc, #196]	; (3ca8 <USB_Handler+0x254>)
    3be2:	4798      	blx	r3
    3be4:	e006      	b.n	3bf4 <USB_Handler+0x1a0>
			_usb_d_dev_handle_trfail(ept, 0);
    3be6:	2100      	movs	r1, #0
    3be8:	4b2e      	ldr	r3, [pc, #184]	; (3ca4 <USB_Handler+0x250>)
    3bea:	4798      	blx	r3
    3bec:	e002      	b.n	3bf4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_stall(ept, 0);
    3bee:	2100      	movs	r1, #0
    3bf0:	4b2a      	ldr	r3, [pc, #168]	; (3c9c <USB_Handler+0x248>)
    3bf2:	4798      	blx	r3
    3bf4:	3501      	adds	r5, #1
    3bf6:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    3bf8:	2d09      	cmp	r5, #9
    3bfa:	d100      	bne.n	3bfe <USB_Handler+0x1aa>
    3bfc:	e758      	b.n	3ab0 <USB_Handler+0x5c>
    3bfe:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    3c00:	7ca1      	ldrb	r1, [r4, #18]
    3c02:	29ff      	cmp	r1, #255	; 0xff
    3c04:	d0f6      	beq.n	3bf4 <USB_Handler+0x1a0>
	if (!(epint & (1u << epn))) {
    3c06:	230f      	movs	r3, #15
    3c08:	400b      	ands	r3, r1
    3c0a:	2101      	movs	r1, #1
    3c0c:	4099      	lsls	r1, r3
    3c0e:	420e      	tst	r6, r1
    3c10:	d0f0      	beq.n	3bf4 <USB_Handler+0x1a0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    3c12:	0159      	lsls	r1, r3, #5
    3c14:	4f25      	ldr	r7, [pc, #148]	; (3cac <USB_Handler+0x258>)
    3c16:	46bc      	mov	ip, r7
    3c18:	4461      	add	r1, ip
    3c1a:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    3c1c:	015b      	lsls	r3, r3, #5
    3c1e:	4f24      	ldr	r7, [pc, #144]	; (3cb0 <USB_Handler+0x25c>)
    3c20:	46bc      	mov	ip, r7
    3c22:	4463      	add	r3, ip
    3c24:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    3c26:	4019      	ands	r1, r3
	if (flags) {
    3c28:	d0e4      	beq.n	3bf4 <USB_Handler+0x1a0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    3c2a:	00ab      	lsls	r3, r5, #2
    3c2c:	195a      	adds	r2, r3, r5
    3c2e:	0092      	lsls	r2, r2, #2
    3c30:	4b15      	ldr	r3, [pc, #84]	; (3c88 <USB_Handler+0x234>)
    3c32:	469c      	mov	ip, r3
    3c34:	4462      	add	r2, ip
    3c36:	3230      	adds	r2, #48	; 0x30
    3c38:	7dd2      	ldrb	r2, [r2, #23]
    3c3a:	2347      	movs	r3, #71	; 0x47
    3c3c:	4013      	ands	r3, r2
    3c3e:	2b01      	cmp	r3, #1
    3c40:	d0a3      	beq.n	3b8a <USB_Handler+0x136>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    3c42:	b253      	sxtb	r3, r2
    3c44:	2b00      	cmp	r3, #0
    3c46:	dbb1      	blt.n	3bac <USB_Handler+0x158>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    3c48:	068b      	lsls	r3, r1, #26
    3c4a:	d4d0      	bmi.n	3bee <USB_Handler+0x19a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3c4c:	074b      	lsls	r3, r1, #29
    3c4e:	d40c      	bmi.n	3c6a <USB_Handler+0x216>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3c50:	07cb      	lsls	r3, r1, #31
    3c52:	d40e      	bmi.n	3c72 <USB_Handler+0x21e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    3c54:	2307      	movs	r3, #7
    3c56:	401a      	ands	r2, r3
    3c58:	2a01      	cmp	r2, #1
    3c5a:	d1cb      	bne.n	3bf4 <USB_Handler+0x1a0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3c5c:	070b      	lsls	r3, r1, #28
    3c5e:	d40c      	bmi.n	3c7a <USB_Handler+0x226>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3c60:	06cb      	lsls	r3, r1, #27
    3c62:	d5c7      	bpl.n	3bf4 <USB_Handler+0x1a0>
			_usb_d_dev_handle_setup(ept);
    3c64:	4b0e      	ldr	r3, [pc, #56]	; (3ca0 <USB_Handler+0x24c>)
    3c66:	4798      	blx	r3
    3c68:	e7c4      	b.n	3bf4 <USB_Handler+0x1a0>
		_usb_d_dev_handle_trfail(ept, 0);
    3c6a:	2100      	movs	r1, #0
    3c6c:	4b0d      	ldr	r3, [pc, #52]	; (3ca4 <USB_Handler+0x250>)
    3c6e:	4798      	blx	r3
    3c70:	e7c0      	b.n	3bf4 <USB_Handler+0x1a0>
		_usb_d_dev_out_next(ept, true);
    3c72:	2101      	movs	r1, #1
    3c74:	4b0f      	ldr	r3, [pc, #60]	; (3cb4 <USB_Handler+0x260>)
    3c76:	4798      	blx	r3
    3c78:	e7bc      	b.n	3bf4 <USB_Handler+0x1a0>
			_usb_d_dev_handle_trfail(ept, 1);
    3c7a:	2101      	movs	r1, #1
    3c7c:	4b09      	ldr	r3, [pc, #36]	; (3ca4 <USB_Handler+0x250>)
    3c7e:	4798      	blx	r3
    3c80:	e7b8      	b.n	3bf4 <USB_Handler+0x1a0>
    3c82:	46c0      	nop			; (mov r8, r8)
    3c84:	41005000 	.word	0x41005000
    3c88:	20000824 	.word	0x20000824
    3c8c:	00000201 	.word	0x00000201
    3c90:	200007a4 	.word	0x200007a4
    3c94:	40000800 	.word	0x40000800
    3c98:	00002b89 	.word	0x00002b89
    3c9c:	000029c5 	.word	0x000029c5
    3ca0:	00002931 	.word	0x00002931
    3ca4:	00002a89 	.word	0x00002a89
    3ca8:	00002bd1 	.word	0x00002bd1
    3cac:	41005100 	.word	0x41005100
    3cb0:	41005109 	.word	0x41005109
    3cb4:	00002d7d 	.word	0x00002d7d

00003cb8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    3cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cba:	b083      	sub	sp, #12
    3cbc:	0006      	movs	r6, r0
    3cbe:	000c      	movs	r4, r1
    3cc0:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    3cc2:	780a      	ldrb	r2, [r1, #0]
    3cc4:	0653      	lsls	r3, r2, #25
    3cc6:	0f9b      	lsrs	r3, r3, #30
    3cc8:	2b01      	cmp	r3, #1
    3cca:	d000      	beq.n	3cce <cdcdf_acm_req+0x16>
    3ccc:	e06c      	b.n	3da8 <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    3cce:	7909      	ldrb	r1, [r1, #4]
    3cd0:	7963      	ldrb	r3, [r4, #5]
    3cd2:	021b      	lsls	r3, r3, #8
    3cd4:	430b      	orrs	r3, r1
    3cd6:	493b      	ldr	r1, [pc, #236]	; (3dc4 <cdcdf_acm_req+0x10c>)
    3cd8:	7809      	ldrb	r1, [r1, #0]
    3cda:	4299      	cmp	r1, r3
    3cdc:	d003      	beq.n	3ce6 <cdcdf_acm_req+0x2e>
    3cde:	4939      	ldr	r1, [pc, #228]	; (3dc4 <cdcdf_acm_req+0x10c>)
    3ce0:	7849      	ldrb	r1, [r1, #1]
    3ce2:	4299      	cmp	r1, r3
    3ce4:	d163      	bne.n	3dae <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    3ce6:	b252      	sxtb	r2, r2
    3ce8:	2a00      	cmp	r2, #0
    3cea:	db0e      	blt.n	3d0a <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    3cec:	79a7      	ldrb	r7, [r4, #6]
    3cee:	79e3      	ldrb	r3, [r4, #7]
    3cf0:	021b      	lsls	r3, r3, #8
    3cf2:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    3cf4:	4b34      	ldr	r3, [pc, #208]	; (3dc8 <cdcdf_acm_req+0x110>)
    3cf6:	4798      	blx	r3
	switch (req->bRequest) {
    3cf8:	7863      	ldrb	r3, [r4, #1]
    3cfa:	2b20      	cmp	r3, #32
    3cfc:	d018      	beq.n	3d30 <cdcdf_acm_req+0x78>
    3cfe:	2b22      	cmp	r3, #34	; 0x22
    3d00:	d03c      	beq.n	3d7c <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    3d02:	200d      	movs	r0, #13
    3d04:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    3d06:	b003      	add	sp, #12
    3d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    3d0a:	2d01      	cmp	r5, #1
    3d0c:	d052      	beq.n	3db4 <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    3d0e:	7863      	ldrb	r3, [r4, #1]
    3d10:	2b21      	cmp	r3, #33	; 0x21
    3d12:	d151      	bne.n	3db8 <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    3d14:	79a2      	ldrb	r2, [r4, #6]
    3d16:	79e3      	ldrb	r3, [r4, #7]
    3d18:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3d1a:	4313      	orrs	r3, r2
    3d1c:	2b07      	cmp	r3, #7
    3d1e:	d14e      	bne.n	3dbe <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    3d20:	2300      	movs	r3, #0
    3d22:	2207      	movs	r2, #7
    3d24:	4927      	ldr	r1, [pc, #156]	; (3dc4 <cdcdf_acm_req+0x10c>)
    3d26:	3108      	adds	r1, #8
    3d28:	0030      	movs	r0, r6
    3d2a:	4c28      	ldr	r4, [pc, #160]	; (3dcc <cdcdf_acm_req+0x114>)
    3d2c:	47a0      	blx	r4
    3d2e:	e7ea      	b.n	3d06 <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    3d30:	2f07      	cmp	r7, #7
    3d32:	d134      	bne.n	3d9e <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    3d34:	2d00      	cmp	r5, #0
    3d36:	d01a      	beq.n	3d6e <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    3d38:	2207      	movs	r2, #7
    3d3a:	0001      	movs	r1, r0
    3d3c:	4668      	mov	r0, sp
    3d3e:	4b24      	ldr	r3, [pc, #144]	; (3dd0 <cdcdf_acm_req+0x118>)
    3d40:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    3d42:	4b20      	ldr	r3, [pc, #128]	; (3dc4 <cdcdf_acm_req+0x10c>)
    3d44:	691b      	ldr	r3, [r3, #16]
    3d46:	2b00      	cmp	r3, #0
    3d48:	d005      	beq.n	3d56 <cdcdf_acm_req+0x9e>
    3d4a:	4668      	mov	r0, sp
    3d4c:	4798      	blx	r3
    3d4e:	0003      	movs	r3, r0
			return ERR_NONE;
    3d50:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    3d52:	2b00      	cmp	r3, #0
    3d54:	d0d7      	beq.n	3d06 <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    3d56:	4a1b      	ldr	r2, [pc, #108]	; (3dc4 <cdcdf_acm_req+0x10c>)
    3d58:	0013      	movs	r3, r2
    3d5a:	9900      	ldr	r1, [sp, #0]
    3d5c:	6091      	str	r1, [r2, #8]
    3d5e:	466a      	mov	r2, sp
    3d60:	8892      	ldrh	r2, [r2, #4]
    3d62:	819a      	strh	r2, [r3, #12]
    3d64:	466a      	mov	r2, sp
    3d66:	7992      	ldrb	r2, [r2, #6]
    3d68:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    3d6a:	2000      	movs	r0, #0
    3d6c:	e7cb      	b.n	3d06 <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    3d6e:	2300      	movs	r3, #0
    3d70:	2207      	movs	r2, #7
    3d72:	0001      	movs	r1, r0
    3d74:	0030      	movs	r0, r6
    3d76:	4c15      	ldr	r4, [pc, #84]	; (3dcc <cdcdf_acm_req+0x114>)
    3d78:	47a0      	blx	r4
    3d7a:	e7c4      	b.n	3d06 <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    3d7c:	2300      	movs	r3, #0
    3d7e:	2200      	movs	r2, #0
    3d80:	2100      	movs	r1, #0
    3d82:	2000      	movs	r0, #0
    3d84:	4d11      	ldr	r5, [pc, #68]	; (3dcc <cdcdf_acm_req+0x114>)
    3d86:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    3d88:	4b0e      	ldr	r3, [pc, #56]	; (3dc4 <cdcdf_acm_req+0x10c>)
    3d8a:	695b      	ldr	r3, [r3, #20]
    3d8c:	2b00      	cmp	r3, #0
    3d8e:	d009      	beq.n	3da4 <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    3d90:	78a2      	ldrb	r2, [r4, #2]
    3d92:	78e0      	ldrb	r0, [r4, #3]
    3d94:	0200      	lsls	r0, r0, #8
    3d96:	4310      	orrs	r0, r2
    3d98:	4798      	blx	r3
		return ERR_NONE;
    3d9a:	2000      	movs	r0, #0
    3d9c:	e7b3      	b.n	3d06 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    3d9e:	2001      	movs	r0, #1
    3da0:	4240      	negs	r0, r0
    3da2:	e7b0      	b.n	3d06 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    3da4:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    3da6:	e7ae      	b.n	3d06 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    3da8:	200a      	movs	r0, #10
    3daa:	4240      	negs	r0, r0
    3dac:	e7ab      	b.n	3d06 <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    3dae:	200a      	movs	r0, #10
    3db0:	4240      	negs	r0, r0
    3db2:	e7a8      	b.n	3d06 <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    3db4:	2000      	movs	r0, #0
    3db6:	e7a6      	b.n	3d06 <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    3db8:	200d      	movs	r0, #13
    3dba:	4240      	negs	r0, r0
    3dbc:	e7a3      	b.n	3d06 <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    3dbe:	2001      	movs	r0, #1
    3dc0:	4240      	negs	r0, r0
    3dc2:	e7a0      	b.n	3d06 <cdcdf_acm_req+0x4e>
    3dc4:	20000b0c 	.word	0x20000b0c
    3dc8:	00004755 	.word	0x00004755
    3dcc:	00004205 	.word	0x00004205
    3dd0:	00004a6d 	.word	0x00004a6d

00003dd4 <cdcdf_acm_ctrl>:
{
    3dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dd6:	46de      	mov	lr, fp
    3dd8:	4657      	mov	r7, sl
    3dda:	464e      	mov	r6, r9
    3ddc:	4645      	mov	r5, r8
    3dde:	b5e0      	push	{r5, r6, r7, lr}
    3de0:	b083      	sub	sp, #12
    3de2:	0016      	movs	r6, r2
	switch (ctrl) {
    3de4:	2901      	cmp	r1, #1
    3de6:	d068      	beq.n	3eba <cdcdf_acm_ctrl+0xe6>
    3de8:	2900      	cmp	r1, #0
    3dea:	d00b      	beq.n	3e04 <cdcdf_acm_ctrl+0x30>
    3dec:	2902      	cmp	r1, #2
    3dee:	d100      	bne.n	3df2 <cdcdf_acm_ctrl+0x1e>
    3df0:	e093      	b.n	3f1a <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    3df2:	200d      	movs	r0, #13
    3df4:	4240      	negs	r0, r0
}
    3df6:	b003      	add	sp, #12
    3df8:	bc3c      	pop	{r2, r3, r4, r5}
    3dfa:	4690      	mov	r8, r2
    3dfc:	4699      	mov	r9, r3
    3dfe:	46a2      	mov	sl, r4
    3e00:	46ab      	mov	fp, r5
    3e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3e04:	6883      	ldr	r3, [r0, #8]
    3e06:	4698      	mov	r8, r3
	ifc = desc->sod;
    3e08:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    3e0a:	2800      	cmp	r0, #0
    3e0c:	d100      	bne.n	3e10 <cdcdf_acm_ctrl+0x3c>
    3e0e:	e087      	b.n	3f20 <cdcdf_acm_ctrl+0x14c>
    3e10:	9301      	str	r3, [sp, #4]
    3e12:	2301      	movs	r3, #1
    3e14:	4443      	add	r3, r8
    3e16:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3e18:	4f47      	ldr	r7, [pc, #284]	; (3f38 <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    3e1a:	4b48      	ldr	r3, [pc, #288]	; (3f3c <cdcdf_acm_ctrl+0x168>)
    3e1c:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    3e1e:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    3e20:	7943      	ldrb	r3, [r0, #5]
    3e22:	2108      	movs	r1, #8
    3e24:	438b      	bics	r3, r1
    3e26:	2b02      	cmp	r3, #2
    3e28:	d002      	beq.n	3e30 <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    3e2a:	200a      	movs	r0, #10
    3e2c:	4240      	negs	r0, r0
    3e2e:	e7e2      	b.n	3df6 <cdcdf_acm_ctrl+0x22>
    3e30:	9901      	ldr	r1, [sp, #4]
    3e32:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    3e34:	780b      	ldrb	r3, [r1, #0]
    3e36:	429a      	cmp	r2, r3
    3e38:	d075      	beq.n	3f26 <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    3e3a:	2bff      	cmp	r3, #255	; 0xff
    3e3c:	d176      	bne.n	3f2c <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    3e3e:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    3e40:	2205      	movs	r2, #5
    3e42:	6871      	ldr	r1, [r6, #4]
    3e44:	4b3e      	ldr	r3, [pc, #248]	; (3f40 <cdcdf_acm_ctrl+0x16c>)
    3e46:	4798      	blx	r3
    3e48:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    3e4a:	d11e      	bne.n	3e8a <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    3e4c:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    3e4e:	7803      	ldrb	r3, [r0, #0]
    3e50:	18c0      	adds	r0, r0, r3
    3e52:	2204      	movs	r2, #4
    3e54:	6871      	ldr	r1, [r6, #4]
    3e56:	4b3a      	ldr	r3, [pc, #232]	; (3f40 <cdcdf_acm_ctrl+0x16c>)
    3e58:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    3e5a:	9b01      	ldr	r3, [sp, #4]
    3e5c:	455b      	cmp	r3, fp
    3e5e:	d027      	beq.n	3eb0 <cdcdf_acm_ctrl+0xdc>
    3e60:	9b01      	ldr	r3, [sp, #4]
    3e62:	3301      	adds	r3, #1
    3e64:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    3e66:	2800      	cmp	r0, #0
    3e68:	d1d9      	bne.n	3e1e <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    3e6a:	200a      	movs	r0, #10
    3e6c:	4240      	negs	r0, r0
    3e6e:	e7c2      	b.n	3df6 <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    3e70:	4653      	mov	r3, sl
    3e72:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    3e74:	0028      	movs	r0, r5
    3e76:	4b31      	ldr	r3, [pc, #196]	; (3f3c <cdcdf_acm_ctrl+0x168>)
    3e78:	4798      	blx	r3
			desc->sod = ep;
    3e7a:	6034      	str	r4, [r6, #0]
    3e7c:	7820      	ldrb	r0, [r4, #0]
    3e7e:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    3e80:	6871      	ldr	r1, [r6, #4]
    3e82:	4b30      	ldr	r3, [pc, #192]	; (3f44 <cdcdf_acm_ctrl+0x170>)
    3e84:	4798      	blx	r3
    3e86:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    3e88:	d0e0      	beq.n	3e4c <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    3e8a:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    3e8c:	7963      	ldrb	r3, [r4, #5]
    3e8e:	021b      	lsls	r3, r3, #8
    3e90:	7922      	ldrb	r2, [r4, #4]
    3e92:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    3e94:	b292      	uxth	r2, r2
    3e96:	78e1      	ldrb	r1, [r4, #3]
    3e98:	0028      	movs	r0, r5
    3e9a:	47b8      	blx	r7
    3e9c:	2800      	cmp	r0, #0
    3e9e:	d148      	bne.n	3f32 <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    3ea0:	b26b      	sxtb	r3, r5
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	dbe4      	blt.n	3e70 <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    3ea6:	4643      	mov	r3, r8
    3ea8:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    3eaa:	0028      	movs	r0, r5
    3eac:	47c8      	blx	r9
    3eae:	e7e4      	b.n	3e7a <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    3eb0:	2201      	movs	r2, #1
    3eb2:	4b25      	ldr	r3, [pc, #148]	; (3f48 <cdcdf_acm_ctrl+0x174>)
    3eb4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    3eb6:	2000      	movs	r0, #0
    3eb8:	e79d      	b.n	3df6 <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    3eba:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    3ebc:	2a00      	cmp	r2, #0
    3ebe:	d008      	beq.n	3ed2 <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    3ec0:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    3ec2:	795b      	ldrb	r3, [r3, #5]
    3ec4:	2208      	movs	r2, #8
    3ec6:	4393      	bics	r3, r2
    3ec8:	2b02      	cmp	r3, #2
    3eca:	d002      	beq.n	3ed2 <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    3ecc:	200a      	movs	r0, #10
    3ece:	4240      	negs	r0, r0
    3ed0:	e791      	b.n	3df6 <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    3ed2:	7823      	ldrb	r3, [r4, #0]
    3ed4:	2bff      	cmp	r3, #255	; 0xff
    3ed6:	d008      	beq.n	3eea <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    3ed8:	23ff      	movs	r3, #255	; 0xff
    3eda:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    3edc:	78a0      	ldrb	r0, [r4, #2]
    3ede:	28ff      	cmp	r0, #255	; 0xff
    3ee0:	d003      	beq.n	3eea <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3ee2:	4b1a      	ldr	r3, [pc, #104]	; (3f4c <cdcdf_acm_ctrl+0x178>)
    3ee4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3ee6:	23ff      	movs	r3, #255	; 0xff
    3ee8:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    3eea:	7863      	ldrb	r3, [r4, #1]
    3eec:	2bff      	cmp	r3, #255	; 0xff
    3eee:	d008      	beq.n	3f02 <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    3ef0:	23ff      	movs	r3, #255	; 0xff
    3ef2:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    3ef4:	78e0      	ldrb	r0, [r4, #3]
    3ef6:	28ff      	cmp	r0, #255	; 0xff
    3ef8:	d003      	beq.n	3f02 <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    3efa:	4b14      	ldr	r3, [pc, #80]	; (3f4c <cdcdf_acm_ctrl+0x178>)
    3efc:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    3efe:	23ff      	movs	r3, #255	; 0xff
    3f00:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    3f02:	7920      	ldrb	r0, [r4, #4]
    3f04:	28ff      	cmp	r0, #255	; 0xff
    3f06:	d003      	beq.n	3f10 <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    3f08:	4b10      	ldr	r3, [pc, #64]	; (3f4c <cdcdf_acm_ctrl+0x178>)
    3f0a:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    3f0c:	23ff      	movs	r3, #255	; 0xff
    3f0e:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    3f10:	2200      	movs	r2, #0
    3f12:	4b0d      	ldr	r3, [pc, #52]	; (3f48 <cdcdf_acm_ctrl+0x174>)
    3f14:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    3f16:	2000      	movs	r0, #0
    3f18:	e76d      	b.n	3df6 <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    3f1a:	201b      	movs	r0, #27
    3f1c:	4240      	negs	r0, r0
    3f1e:	e76a      	b.n	3df6 <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    3f20:	200a      	movs	r0, #10
    3f22:	4240      	negs	r0, r0
    3f24:	e767      	b.n	3df6 <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    3f26:	2012      	movs	r0, #18
    3f28:	4240      	negs	r0, r0
    3f2a:	e764      	b.n	3df6 <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    3f2c:	201c      	movs	r0, #28
    3f2e:	4240      	negs	r0, r0
    3f30:	e761      	b.n	3df6 <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    3f32:	2014      	movs	r0, #20
    3f34:	4240      	negs	r0, r0
    3f36:	e75e      	b.n	3df6 <cdcdf_acm_ctrl+0x22>
    3f38:	00001de5 	.word	0x00001de5
    3f3c:	00001e79 	.word	0x00001e79
    3f40:	00004771 	.word	0x00004771
    3f44:	000047a7 	.word	0x000047a7
    3f48:	20000b0c 	.word	0x20000b0c
    3f4c:	00001e4d 	.word	0x00001e4d

00003f50 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    3f50:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    3f52:	4b0a      	ldr	r3, [pc, #40]	; (3f7c <cdcdf_acm_init+0x2c>)
    3f54:	4798      	blx	r3
    3f56:	2801      	cmp	r0, #1
    3f58:	d80c      	bhi.n	3f74 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    3f5a:	4809      	ldr	r0, [pc, #36]	; (3f80 <cdcdf_acm_init+0x30>)
    3f5c:	4b09      	ldr	r3, [pc, #36]	; (3f84 <cdcdf_acm_init+0x34>)
    3f5e:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    3f60:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    3f62:	3018      	adds	r0, #24
    3f64:	4b08      	ldr	r3, [pc, #32]	; (3f88 <cdcdf_acm_init+0x38>)
    3f66:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    3f68:	4908      	ldr	r1, [pc, #32]	; (3f8c <cdcdf_acm_init+0x3c>)
    3f6a:	2001      	movs	r0, #1
    3f6c:	4b08      	ldr	r3, [pc, #32]	; (3f90 <cdcdf_acm_init+0x40>)
    3f6e:	4798      	blx	r3
	return ERR_NONE;
    3f70:	2000      	movs	r0, #0
}
    3f72:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    3f74:	2011      	movs	r0, #17
    3f76:	4240      	negs	r0, r0
    3f78:	e7fb      	b.n	3f72 <cdcdf_acm_init+0x22>
    3f7a:	46c0      	nop			; (mov r8, r8)
    3f7c:	00004761 	.word	0x00004761
    3f80:	20000b0c 	.word	0x20000b0c
    3f84:	00003dd5 	.word	0x00003dd5
    3f88:	000046f9 	.word	0x000046f9
    3f8c:	20000004 	.word	0x20000004
    3f90:	00004661 	.word	0x00004661

00003f94 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    3f94:	b510      	push	{r4, lr}
    3f96:	0004      	movs	r4, r0
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    3f98:	4b07      	ldr	r3, [pc, #28]	; (3fb8 <cdcdf_acm_read+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    3f9a:	795b      	ldrb	r3, [r3, #5]
    3f9c:	2b00      	cmp	r3, #0
    3f9e:	d007      	beq.n	3fb0 <cdcdf_acm_read+0x1c>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    3fa0:	4b05      	ldr	r3, [pc, #20]	; (3fb8 <cdcdf_acm_read+0x24>)
    3fa2:	7918      	ldrb	r0, [r3, #4]
    3fa4:	2300      	movs	r3, #0
    3fa6:	000a      	movs	r2, r1
    3fa8:	0021      	movs	r1, r4
    3faa:	4c04      	ldr	r4, [pc, #16]	; (3fbc <cdcdf_acm_read+0x28>)
    3fac:	47a0      	blx	r4
}
    3fae:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    3fb0:	2011      	movs	r0, #17
    3fb2:	4240      	negs	r0, r0
    3fb4:	e7fb      	b.n	3fae <cdcdf_acm_read+0x1a>
    3fb6:	46c0      	nop			; (mov r8, r8)
    3fb8:	20000b0c 	.word	0x20000b0c
    3fbc:	00004205 	.word	0x00004205

00003fc0 <cdcdf_acm_write>:
{
    3fc0:	b510      	push	{r4, lr}
    3fc2:	0004      	movs	r4, r0
	return _cdcdf_acm_funcd.enabled;
    3fc4:	4b07      	ldr	r3, [pc, #28]	; (3fe4 <cdcdf_acm_write+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    3fc6:	795b      	ldrb	r3, [r3, #5]
    3fc8:	2b00      	cmp	r3, #0
    3fca:	d007      	beq.n	3fdc <cdcdf_acm_write+0x1c>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    3fcc:	4b05      	ldr	r3, [pc, #20]	; (3fe4 <cdcdf_acm_write+0x24>)
    3fce:	78d8      	ldrb	r0, [r3, #3]
    3fd0:	2301      	movs	r3, #1
    3fd2:	000a      	movs	r2, r1
    3fd4:	0021      	movs	r1, r4
    3fd6:	4c04      	ldr	r4, [pc, #16]	; (3fe8 <cdcdf_acm_write+0x28>)
    3fd8:	47a0      	blx	r4
}
    3fda:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    3fdc:	2011      	movs	r0, #17
    3fde:	4240      	negs	r0, r0
    3fe0:	e7fb      	b.n	3fda <cdcdf_acm_write+0x1a>
    3fe2:	46c0      	nop			; (mov r8, r8)
    3fe4:	20000b0c 	.word	0x20000b0c
    3fe8:	00004205 	.word	0x00004205

00003fec <cdcdf_acm_stop_xfer>:
{
    3fec:	b570      	push	{r4, r5, r6, lr}
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    3fee:	4d03      	ldr	r5, [pc, #12]	; (3ffc <cdcdf_acm_stop_xfer+0x10>)
    3ff0:	78e8      	ldrb	r0, [r5, #3]
    3ff2:	4c03      	ldr	r4, [pc, #12]	; (4000 <cdcdf_acm_stop_xfer+0x14>)
    3ff4:	47a0      	blx	r4
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    3ff6:	7928      	ldrb	r0, [r5, #4]
    3ff8:	47a0      	blx	r4
}
    3ffa:	bd70      	pop	{r4, r5, r6, pc}
    3ffc:	20000b0c 	.word	0x20000b0c
    4000:	00001fed 	.word	0x00001fed

00004004 <cdcdf_acm_register_callback>:
{
    4004:	b510      	push	{r4, lr}
	switch (cb_type) {
    4006:	2801      	cmp	r0, #1
    4008:	d010      	beq.n	402c <cdcdf_acm_register_callback+0x28>
    400a:	2800      	cmp	r0, #0
    400c:	d006      	beq.n	401c <cdcdf_acm_register_callback+0x18>
    400e:	2802      	cmp	r0, #2
    4010:	d014      	beq.n	403c <cdcdf_acm_register_callback+0x38>
    4012:	2803      	cmp	r0, #3
    4014:	d016      	beq.n	4044 <cdcdf_acm_register_callback+0x40>
		return ERR_INVALID_ARG;
    4016:	200d      	movs	r0, #13
    4018:	4240      	negs	r0, r0
    401a:	e006      	b.n	402a <cdcdf_acm_register_callback+0x26>
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    401c:	4b0b      	ldr	r3, [pc, #44]	; (404c <cdcdf_acm_register_callback+0x48>)
    401e:	7918      	ldrb	r0, [r3, #4]
    4020:	000a      	movs	r2, r1
    4022:	2102      	movs	r1, #2
    4024:	4b0a      	ldr	r3, [pc, #40]	; (4050 <cdcdf_acm_register_callback+0x4c>)
    4026:	4798      	blx	r3
	return ERR_NONE;
    4028:	2000      	movs	r0, #0
}
    402a:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    402c:	4b07      	ldr	r3, [pc, #28]	; (404c <cdcdf_acm_register_callback+0x48>)
    402e:	78d8      	ldrb	r0, [r3, #3]
    4030:	000a      	movs	r2, r1
    4032:	2102      	movs	r1, #2
    4034:	4b06      	ldr	r3, [pc, #24]	; (4050 <cdcdf_acm_register_callback+0x4c>)
    4036:	4798      	blx	r3
	return ERR_NONE;
    4038:	2000      	movs	r0, #0
		break;
    403a:	e7f6      	b.n	402a <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    403c:	4b03      	ldr	r3, [pc, #12]	; (404c <cdcdf_acm_register_callback+0x48>)
    403e:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    4040:	2000      	movs	r0, #0
		break;
    4042:	e7f2      	b.n	402a <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    4044:	4b01      	ldr	r3, [pc, #4]	; (404c <cdcdf_acm_register_callback+0x48>)
    4046:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    4048:	2000      	movs	r0, #0
		break;
    404a:	e7ee      	b.n	402a <cdcdf_acm_register_callback+0x26>
    404c:	20000b0c 	.word	0x20000b0c
    4050:	00002085 	.word	0x00002085

00004054 <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    4054:	4b01      	ldr	r3, [pc, #4]	; (405c <cdcdf_acm_is_enabled+0x8>)
    4056:	7958      	ldrb	r0, [r3, #5]
}
    4058:	4770      	bx	lr
    405a:	46c0      	nop			; (mov r8, r8)
    405c:	20000b0c 	.word	0x20000b0c

00004060 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    4060:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    4062:	4b06      	ldr	r3, [pc, #24]	; (407c <usbdc_unconfig+0x1c>)
    4064:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    4066:	2c00      	cmp	r4, #0
    4068:	d007      	beq.n	407a <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    406a:	2200      	movs	r2, #0
    406c:	2101      	movs	r1, #1
    406e:	0020      	movs	r0, r4
    4070:	6863      	ldr	r3, [r4, #4]
    4072:	4798      	blx	r3
		func = func->next;
    4074:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    4076:	2c00      	cmp	r4, #0
    4078:	d1f7      	bne.n	406a <usbdc_unconfig+0xa>
	}
}
    407a:	bd10      	pop	{r4, pc}
    407c:	20000b30 	.word	0x20000b30

00004080 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    4080:	b570      	push	{r4, r5, r6, lr}
    4082:	0006      	movs	r6, r0
    4084:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    4086:	4b07      	ldr	r3, [pc, #28]	; (40a4 <usbdc_change_notify+0x24>)
    4088:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    408a:	2c00      	cmp	r4, #0
    408c:	d103      	bne.n	4096 <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    408e:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    4090:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    4092:	2c00      	cmp	r4, #0
    4094:	d0fb      	beq.n	408e <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    4096:	6863      	ldr	r3, [r4, #4]
    4098:	2b00      	cmp	r3, #0
    409a:	d0f9      	beq.n	4090 <usbdc_change_notify+0x10>
			cg->cb(change, value);
    409c:	0029      	movs	r1, r5
    409e:	0030      	movs	r0, r6
    40a0:	4798      	blx	r3
    40a2:	e7f5      	b.n	4090 <usbdc_change_notify+0x10>
    40a4:	20000b30 	.word	0x20000b30

000040a8 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    40a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40aa:	0007      	movs	r7, r0
    40ac:	000e      	movs	r6, r1
    40ae:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    40b0:	4b0d      	ldr	r3, [pc, #52]	; (40e8 <usbdc_request_handler+0x40>)
    40b2:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    40b4:	2c00      	cmp	r4, #0
    40b6:	d104      	bne.n	40c2 <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    40b8:	2000      	movs	r0, #0
    40ba:	e011      	b.n	40e0 <usbdc_request_handler+0x38>
		h = h->next;
    40bc:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    40be:	2c00      	cmp	r4, #0
    40c0:	d00d      	beq.n	40de <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    40c2:	6863      	ldr	r3, [r4, #4]
    40c4:	2b00      	cmp	r3, #0
    40c6:	d0f9      	beq.n	40bc <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    40c8:	002a      	movs	r2, r5
    40ca:	0031      	movs	r1, r6
    40cc:	0038      	movs	r0, r7
    40ce:	4798      	blx	r3
			if (0 == rc) {
    40d0:	2800      	cmp	r0, #0
    40d2:	d006      	beq.n	40e2 <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    40d4:	300a      	adds	r0, #10
    40d6:	d0f1      	beq.n	40bc <usbdc_request_handler+0x14>
				return -1;
    40d8:	2001      	movs	r0, #1
    40da:	4240      	negs	r0, r0
    40dc:	e000      	b.n	40e0 <usbdc_request_handler+0x38>
	return false;
    40de:	2000      	movs	r0, #0
}
    40e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    40e2:	2001      	movs	r0, #1
    40e4:	e7fc      	b.n	40e0 <usbdc_request_handler+0x38>
    40e6:	46c0      	nop			; (mov r8, r8)
    40e8:	20000b30 	.word	0x20000b30

000040ec <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    40ec:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    40ee:	4b06      	ldr	r3, [pc, #24]	; (4108 <usbd_sof_cb+0x1c>)
    40f0:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    40f2:	2c00      	cmp	r4, #0
    40f4:	d103      	bne.n	40fe <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    40f6:	bd10      	pop	{r4, pc}
		sof = sof->next;
    40f8:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    40fa:	2c00      	cmp	r4, #0
    40fc:	d0fb      	beq.n	40f6 <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    40fe:	6863      	ldr	r3, [r4, #4]
    4100:	2b00      	cmp	r3, #0
    4102:	d0f9      	beq.n	40f8 <usbd_sof_cb+0xc>
			sof->cb();
    4104:	4798      	blx	r3
    4106:	e7f7      	b.n	40f8 <usbd_sof_cb+0xc>
    4108:	20000b30 	.word	0x20000b30

0000410c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    410c:	b510      	push	{r4, lr}
    410e:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    4110:	2900      	cmp	r1, #0
    4112:	d003      	beq.n	411c <usbdc_cb_ctl_done+0x10>
    4114:	2901      	cmp	r1, #1
    4116:	d029      	beq.n	416c <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    4118:	2000      	movs	r0, #0
    411a:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    411c:	7813      	ldrb	r3, [r2, #0]
    411e:	2b00      	cmp	r3, #0
    4120:	d1fa      	bne.n	4118 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    4122:	7853      	ldrb	r3, [r2, #1]
    4124:	2b05      	cmp	r3, #5
    4126:	d011      	beq.n	414c <usbdc_cb_ctl_done+0x40>
    4128:	2b09      	cmp	r3, #9
    412a:	d1f5      	bne.n	4118 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    412c:	7892      	ldrb	r2, [r2, #2]
    412e:	4b12      	ldr	r3, [pc, #72]	; (4178 <usbdc_cb_ctl_done+0x6c>)
    4130:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    4132:	78a3      	ldrb	r3, [r4, #2]
    4134:	78e1      	ldrb	r1, [r4, #3]
    4136:	0209      	lsls	r1, r1, #8
    4138:	4319      	orrs	r1, r3
    413a:	1e4b      	subs	r3, r1, #1
    413c:	4199      	sbcs	r1, r3
    413e:	3103      	adds	r1, #3
    4140:	4b0d      	ldr	r3, [pc, #52]	; (4178 <usbdc_cb_ctl_done+0x6c>)
    4142:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    4144:	2001      	movs	r0, #1
    4146:	4b0d      	ldr	r3, [pc, #52]	; (417c <usbdc_cb_ctl_done+0x70>)
    4148:	4798      	blx	r3
    414a:	e7e5      	b.n	4118 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    414c:	7890      	ldrb	r0, [r2, #2]
    414e:	4b0c      	ldr	r3, [pc, #48]	; (4180 <usbdc_cb_ctl_done+0x74>)
    4150:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    4152:	78a3      	ldrb	r3, [r4, #2]
    4154:	78e1      	ldrb	r1, [r4, #3]
    4156:	0209      	lsls	r1, r1, #8
    4158:	4319      	orrs	r1, r3
    415a:	1e4b      	subs	r3, r1, #1
    415c:	4199      	sbcs	r1, r3
    415e:	3102      	adds	r1, #2
    4160:	4b05      	ldr	r3, [pc, #20]	; (4178 <usbdc_cb_ctl_done+0x6c>)
    4162:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    4164:	2001      	movs	r0, #1
    4166:	4b05      	ldr	r3, [pc, #20]	; (417c <usbdc_cb_ctl_done+0x70>)
    4168:	4798      	blx	r3
    416a:	e7d5      	b.n	4118 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    416c:	2201      	movs	r2, #1
    416e:	0021      	movs	r1, r4
    4170:	2000      	movs	r0, #0
    4172:	4b04      	ldr	r3, [pc, #16]	; (4184 <usbdc_cb_ctl_done+0x78>)
    4174:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    4176:	e7cf      	b.n	4118 <usbdc_cb_ctl_done+0xc>
    4178:	20000b30 	.word	0x20000b30
    417c:	00004081 	.word	0x00004081
    4180:	00001dd9 	.word	0x00001dd9
    4184:	000040a9 	.word	0x000040a9

00004188 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    4188:	b510      	push	{r4, lr}
	usbdc_unconfig();
    418a:	4b0d      	ldr	r3, [pc, #52]	; (41c0 <usbdc_reset+0x38>)
    418c:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    418e:	4c0d      	ldr	r4, [pc, #52]	; (41c4 <usbdc_reset+0x3c>)
    4190:	2302      	movs	r3, #2
    4192:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    4194:	2300      	movs	r3, #0
    4196:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    4198:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    419a:	2000      	movs	r0, #0
    419c:	4b0a      	ldr	r3, [pc, #40]	; (41c8 <usbdc_reset+0x40>)
    419e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    41a0:	7f20      	ldrb	r0, [r4, #28]
    41a2:	4b0a      	ldr	r3, [pc, #40]	; (41cc <usbdc_reset+0x44>)
    41a4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    41a6:	4a0a      	ldr	r2, [pc, #40]	; (41d0 <usbdc_reset+0x48>)
    41a8:	2100      	movs	r1, #0
    41aa:	2000      	movs	r0, #0
    41ac:	4c09      	ldr	r4, [pc, #36]	; (41d4 <usbdc_reset+0x4c>)
    41ae:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    41b0:	4a09      	ldr	r2, [pc, #36]	; (41d8 <usbdc_reset+0x50>)
    41b2:	2102      	movs	r1, #2
    41b4:	2000      	movs	r0, #0
    41b6:	47a0      	blx	r4
	usb_d_ep_enable(0);
    41b8:	2000      	movs	r0, #0
    41ba:	4b08      	ldr	r3, [pc, #32]	; (41dc <usbdc_reset+0x54>)
    41bc:	4798      	blx	r3
}
    41be:	bd10      	pop	{r4, pc}
    41c0:	00004061 	.word	0x00004061
    41c4:	20000b30 	.word	0x20000b30
    41c8:	00001e4d 	.word	0x00001e4d
    41cc:	00001e39 	.word	0x00001e39
    41d0:	00004221 	.word	0x00004221
    41d4:	00002085 	.word	0x00002085
    41d8:	0000410d 	.word	0x0000410d
    41dc:	00001e79 	.word	0x00001e79

000041e0 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    41e0:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    41e2:	2800      	cmp	r0, #0
    41e4:	d002      	beq.n	41ec <usbd_event_cb+0xc>
    41e6:	2801      	cmp	r0, #1
    41e8:	d004      	beq.n	41f4 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    41ea:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    41ec:	2000      	movs	r0, #0
    41ee:	4b03      	ldr	r3, [pc, #12]	; (41fc <usbd_event_cb+0x1c>)
    41f0:	4798      	blx	r3
		break;
    41f2:	e7fa      	b.n	41ea <usbd_event_cb+0xa>
		usbdc_reset();
    41f4:	4b02      	ldr	r3, [pc, #8]	; (4200 <usbd_event_cb+0x20>)
    41f6:	4798      	blx	r3
}
    41f8:	e7f7      	b.n	41ea <usbd_event_cb+0xa>
    41fa:	46c0      	nop			; (mov r8, r8)
    41fc:	00004081 	.word	0x00004081
    4200:	00004189 	.word	0x00004189

00004204 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    4204:	b510      	push	{r4, lr}
    4206:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    4208:	ac01      	add	r4, sp, #4
    420a:	9101      	str	r1, [sp, #4]
    420c:	9202      	str	r2, [sp, #8]
    420e:	7220      	strb	r0, [r4, #8]
    4210:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    4212:	0020      	movs	r0, r4
    4214:	4b01      	ldr	r3, [pc, #4]	; (421c <usbdc_xfer+0x18>)
    4216:	4798      	blx	r3
}
    4218:	b004      	add	sp, #16
    421a:	bd10      	pop	{r4, pc}
    421c:	00001ec5 	.word	0x00001ec5

00004220 <usbdc_cb_ctl_req>:
{
    4220:	b5f0      	push	{r4, r5, r6, r7, lr}
    4222:	46c6      	mov	lr, r8
    4224:	b500      	push	{lr}
    4226:	b084      	sub	sp, #16
    4228:	0005      	movs	r5, r0
    422a:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    422c:	2200      	movs	r2, #0
    422e:	4bb5      	ldr	r3, [pc, #724]	; (4504 <usbdc_cb_ctl_req+0x2e4>)
    4230:	4798      	blx	r3
    4232:	1c43      	adds	r3, r0, #1
    4234:	d00d      	beq.n	4252 <usbdc_cb_ctl_req+0x32>
		return true;
    4236:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    4238:	2801      	cmp	r0, #1
    423a:	d00b      	beq.n	4254 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    423c:	7822      	ldrb	r2, [r4, #0]
    423e:	231f      	movs	r3, #31
    4240:	0011      	movs	r1, r2
    4242:	4399      	bics	r1, r3
    4244:	d00b      	beq.n	425e <usbdc_cb_ctl_req+0x3e>
    4246:	b2cb      	uxtb	r3, r1
    4248:	2b80      	cmp	r3, #128	; 0x80
    424a:	d100      	bne.n	424e <usbdc_cb_ctl_req+0x2e>
    424c:	e0f8      	b.n	4440 <usbdc_cb_ctl_req+0x220>
		return false;
    424e:	2300      	movs	r3, #0
    4250:	e000      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		return false;
    4252:	2300      	movs	r3, #0
}
    4254:	0018      	movs	r0, r3
    4256:	b004      	add	sp, #16
    4258:	bc04      	pop	{r2}
    425a:	4690      	mov	r8, r2
    425c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    425e:	7863      	ldrb	r3, [r4, #1]
    4260:	2b0b      	cmp	r3, #11
    4262:	d900      	bls.n	4266 <usbdc_cb_ctl_req+0x46>
    4264:	e1e4      	b.n	4630 <usbdc_cb_ctl_req+0x410>
    4266:	009b      	lsls	r3, r3, #2
    4268:	49a7      	ldr	r1, [pc, #668]	; (4508 <usbdc_cb_ctl_req+0x2e8>)
    426a:	58cb      	ldr	r3, [r1, r3]
    426c:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    426e:	2301      	movs	r3, #1
    4270:	2200      	movs	r2, #0
    4272:	2100      	movs	r1, #0
    4274:	0028      	movs	r0, r5
    4276:	4ca5      	ldr	r4, [pc, #660]	; (450c <usbdc_cb_ctl_req+0x2ec>)
    4278:	47a0      	blx	r4
    427a:	4243      	negs	r3, r0
    427c:	4143      	adcs	r3, r0
    427e:	b2db      	uxtb	r3, r3
    4280:	e7e8      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    4282:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    4284:	2a00      	cmp	r2, #0
    4286:	d01a      	beq.n	42be <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    4288:	4ba1      	ldr	r3, [pc, #644]	; (4510 <usbdc_cb_ctl_req+0x2f0>)
    428a:	681b      	ldr	r3, [r3, #0]
    428c:	6859      	ldr	r1, [r3, #4]
    428e:	6818      	ldr	r0, [r3, #0]
    4290:	4ba0      	ldr	r3, [pc, #640]	; (4514 <usbdc_cb_ctl_req+0x2f4>)
    4292:	4798      	blx	r3
	if (NULL == cfg_desc) {
    4294:	2800      	cmp	r0, #0
    4296:	d100      	bne.n	429a <usbdc_cb_ctl_req+0x7a>
    4298:	e1d4      	b.n	4644 <usbdc_cb_ctl_req+0x424>
    429a:	78c3      	ldrb	r3, [r0, #3]
    429c:	021b      	lsls	r3, r3, #8
    429e:	7881      	ldrb	r1, [r0, #2]
    42a0:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    42a2:	b289      	uxth	r1, r1
    42a4:	1841      	adds	r1, r0, r1
    42a6:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    42a8:	2204      	movs	r2, #4
    42aa:	4b9b      	ldr	r3, [pc, #620]	; (4518 <usbdc_cb_ctl_req+0x2f8>)
    42ac:	4798      	blx	r3
    42ae:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    42b0:	2800      	cmp	r0, #0
    42b2:	d006      	beq.n	42c2 <usbdc_cb_ctl_req+0xa2>
    42b4:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    42b6:	4f96      	ldr	r7, [pc, #600]	; (4510 <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    42b8:	4b97      	ldr	r3, [pc, #604]	; (4518 <usbdc_cb_ctl_req+0x2f8>)
    42ba:	4698      	mov	r8, r3
    42bc:	e01a      	b.n	42f4 <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    42be:	4b97      	ldr	r3, [pc, #604]	; (451c <usbdc_cb_ctl_req+0x2fc>)
    42c0:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    42c2:	2301      	movs	r3, #1
    42c4:	2200      	movs	r2, #0
    42c6:	2100      	movs	r1, #0
    42c8:	0028      	movs	r0, r5
    42ca:	4c90      	ldr	r4, [pc, #576]	; (450c <usbdc_cb_ctl_req+0x2ec>)
    42cc:	47a0      	blx	r4
    42ce:	4243      	negs	r3, r0
    42d0:	4143      	adcs	r3, r0
    42d2:	b2db      	uxtb	r3, r3
    42d4:	e7be      	b.n	4254 <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    42d6:	0034      	movs	r4, r6
    42d8:	e000      	b.n	42dc <usbdc_cb_ctl_req+0xbc>
    42da:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    42dc:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    42de:	7803      	ldrb	r3, [r0, #0]
    42e0:	18c0      	adds	r0, r0, r3
    42e2:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    42e4:	9b03      	ldr	r3, [sp, #12]
    42e6:	9301      	str	r3, [sp, #4]
    42e8:	2204      	movs	r2, #4
    42ea:	0019      	movs	r1, r3
    42ec:	47c0      	blx	r8
    42ee:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    42f0:	2800      	cmp	r0, #0
    42f2:	d0e6      	beq.n	42c2 <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    42f4:	7886      	ldrb	r6, [r0, #2]
    42f6:	42a6      	cmp	r6, r4
    42f8:	d0f0      	beq.n	42dc <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    42fa:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    42fc:	2c00      	cmp	r4, #0
    42fe:	d0ea      	beq.n	42d6 <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    4300:	aa02      	add	r2, sp, #8
    4302:	2100      	movs	r1, #0
    4304:	0020      	movs	r0, r4
    4306:	6863      	ldr	r3, [r4, #4]
    4308:	4798      	blx	r3
    430a:	2800      	cmp	r0, #0
    430c:	d0e5      	beq.n	42da <usbdc_cb_ctl_req+0xba>
					func = func->next;
    430e:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    4310:	2c00      	cmp	r4, #0
    4312:	d1f5      	bne.n	4300 <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    4314:	0034      	movs	r4, r6
    4316:	e7e1      	b.n	42dc <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4318:	231f      	movs	r3, #31
    431a:	401a      	ands	r2, r3
		return false;
    431c:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    431e:	2a02      	cmp	r2, #2
    4320:	d198      	bne.n	4254 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    4322:	79a3      	ldrb	r3, [r4, #6]
    4324:	79e2      	ldrb	r2, [r4, #7]
    4326:	0212      	lsls	r2, r2, #8
    4328:	431a      	orrs	r2, r3
			return false;
    432a:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    432c:	2a00      	cmp	r2, #0
    432e:	d000      	beq.n	4332 <usbdc_cb_ctl_req+0x112>
    4330:	e790      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    4332:	7920      	ldrb	r0, [r4, #4]
    4334:	2100      	movs	r1, #0
    4336:	4b7a      	ldr	r3, [pc, #488]	; (4520 <usbdc_cb_ctl_req+0x300>)
    4338:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    433a:	2301      	movs	r3, #1
    433c:	2200      	movs	r2, #0
    433e:	2100      	movs	r1, #0
    4340:	0028      	movs	r0, r5
    4342:	4c72      	ldr	r4, [pc, #456]	; (450c <usbdc_cb_ctl_req+0x2ec>)
    4344:	47a0      	blx	r4
		return true;
    4346:	2301      	movs	r3, #1
    4348:	e784      	b.n	4254 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    434a:	231f      	movs	r3, #31
    434c:	401a      	ands	r2, r3
		return false;
    434e:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4350:	2a02      	cmp	r2, #2
    4352:	d000      	beq.n	4356 <usbdc_cb_ctl_req+0x136>
    4354:	e77e      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    4356:	79a3      	ldrb	r3, [r4, #6]
    4358:	79e2      	ldrb	r2, [r4, #7]
    435a:	0212      	lsls	r2, r2, #8
    435c:	431a      	orrs	r2, r3
			return false;
    435e:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    4360:	2a00      	cmp	r2, #0
    4362:	d000      	beq.n	4366 <usbdc_cb_ctl_req+0x146>
    4364:	e776      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    4366:	7920      	ldrb	r0, [r4, #4]
    4368:	2101      	movs	r1, #1
    436a:	4b6d      	ldr	r3, [pc, #436]	; (4520 <usbdc_cb_ctl_req+0x300>)
    436c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    436e:	2301      	movs	r3, #1
    4370:	2200      	movs	r2, #0
    4372:	2100      	movs	r1, #0
    4374:	0028      	movs	r0, r5
    4376:	4c65      	ldr	r4, [pc, #404]	; (450c <usbdc_cb_ctl_req+0x2ec>)
    4378:	47a0      	blx	r4
		return true;
    437a:	2301      	movs	r3, #1
    437c:	e76a      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    437e:	78a3      	ldrb	r3, [r4, #2]
    4380:	78e5      	ldrb	r5, [r4, #3]
    4382:	022d      	lsls	r5, r5, #8
    4384:	431d      	orrs	r5, r3
    4386:	7923      	ldrb	r3, [r4, #4]
    4388:	7964      	ldrb	r4, [r4, #5]
    438a:	0224      	lsls	r4, r4, #8
    438c:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    438e:	4a60      	ldr	r2, [pc, #384]	; (4510 <usbdc_cb_ctl_req+0x2f0>)
    4390:	6813      	ldr	r3, [r2, #0]
    4392:	7ed2      	ldrb	r2, [r2, #27]
    4394:	6859      	ldr	r1, [r3, #4]
    4396:	6818      	ldr	r0, [r3, #0]
    4398:	4b5e      	ldr	r3, [pc, #376]	; (4514 <usbdc_cb_ctl_req+0x2f4>)
    439a:	4798      	blx	r3
	if (NULL == ifc) {
    439c:	2800      	cmp	r0, #0
    439e:	d047      	beq.n	4430 <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    43a0:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    43a2:	78c3      	ldrb	r3, [r0, #3]
    43a4:	021b      	lsls	r3, r3, #8
    43a6:	7881      	ldrb	r1, [r0, #2]
    43a8:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    43aa:	b289      	uxth	r1, r1
    43ac:	1841      	adds	r1, r0, r1
    43ae:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    43b0:	2204      	movs	r2, #4
    43b2:	4b59      	ldr	r3, [pc, #356]	; (4518 <usbdc_cb_ctl_req+0x2f8>)
    43b4:	4798      	blx	r3
    43b6:	2800      	cmp	r0, #0
    43b8:	d03c      	beq.n	4434 <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    43ba:	4e57      	ldr	r6, [pc, #348]	; (4518 <usbdc_cb_ctl_req+0x2f8>)
    43bc:	e008      	b.n	43d0 <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    43be:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    43c0:	7803      	ldrb	r3, [r0, #0]
    43c2:	18c0      	adds	r0, r0, r3
    43c4:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    43c6:	2204      	movs	r2, #4
    43c8:	9903      	ldr	r1, [sp, #12]
    43ca:	47b0      	blx	r6
		if (NULL == ifc) {
    43cc:	2800      	cmp	r0, #0
    43ce:	d033      	beq.n	4438 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    43d0:	7883      	ldrb	r3, [r0, #2]
    43d2:	42a3      	cmp	r3, r4
    43d4:	d1f3      	bne.n	43be <usbdc_cb_ctl_req+0x19e>
    43d6:	78c3      	ldrb	r3, [r0, #3]
    43d8:	42ab      	cmp	r3, r5
    43da:	d1f0      	bne.n	43be <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    43dc:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    43de:	4b4c      	ldr	r3, [pc, #304]	; (4510 <usbdc_cb_ctl_req+0x2f0>)
    43e0:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    43e2:	2e00      	cmp	r6, #0
    43e4:	d02a      	beq.n	443c <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    43e6:	aa02      	add	r2, sp, #8
    43e8:	2101      	movs	r1, #1
    43ea:	0030      	movs	r0, r6
    43ec:	6873      	ldr	r3, [r6, #4]
    43ee:	4798      	blx	r3
    43f0:	2800      	cmp	r0, #0
    43f2:	d004      	beq.n	43fe <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    43f4:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    43f6:	2e00      	cmp	r6, #0
    43f8:	d1f5      	bne.n	43e6 <usbdc_cb_ctl_req+0x1c6>
	return false;
    43fa:	2300      	movs	r3, #0
    43fc:	e72a      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    43fe:	6873      	ldr	r3, [r6, #4]
    4400:	aa02      	add	r2, sp, #8
    4402:	2100      	movs	r1, #0
    4404:	0030      	movs	r0, r6
    4406:	4798      	blx	r3
			return false;
    4408:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    440a:	2800      	cmp	r0, #0
    440c:	d000      	beq.n	4410 <usbdc_cb_ctl_req+0x1f0>
    440e:	e721      	b.n	4254 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    4410:	2d00      	cmp	r5, #0
    4412:	d005      	beq.n	4420 <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    4414:	493e      	ldr	r1, [pc, #248]	; (4510 <usbdc_cb_ctl_req+0x2f0>)
    4416:	2201      	movs	r2, #1
    4418:	40a2      	lsls	r2, r4
    441a:	7f4b      	ldrb	r3, [r1, #29]
    441c:	4313      	orrs	r3, r2
    441e:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    4420:	2300      	movs	r3, #0
    4422:	2200      	movs	r2, #0
    4424:	2100      	movs	r1, #0
    4426:	2000      	movs	r0, #0
    4428:	4c38      	ldr	r4, [pc, #224]	; (450c <usbdc_cb_ctl_req+0x2ec>)
    442a:	47a0      	blx	r4
			return true;
    442c:	2301      	movs	r3, #1
    442e:	e711      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		return false;
    4430:	2300      	movs	r3, #0
    4432:	e70f      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		return false;
    4434:	2300      	movs	r3, #0
    4436:	e70d      	b.n	4254 <usbdc_cb_ctl_req+0x34>
			return false;
    4438:	2300      	movs	r3, #0
    443a:	e70b      	b.n	4254 <usbdc_cb_ctl_req+0x34>
	return false;
    443c:	2300      	movs	r3, #0
    443e:	e709      	b.n	4254 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    4440:	7863      	ldrb	r3, [r4, #1]
    4442:	2b06      	cmp	r3, #6
    4444:	d033      	beq.n	44ae <usbdc_cb_ctl_req+0x28e>
    4446:	b2d9      	uxtb	r1, r3
    4448:	2906      	cmp	r1, #6
    444a:	d922      	bls.n	4492 <usbdc_cb_ctl_req+0x272>
    444c:	2b08      	cmp	r3, #8
    444e:	d100      	bne.n	4452 <usbdc_cb_ctl_req+0x232>
    4450:	e0af      	b.n	45b2 <usbdc_cb_ctl_req+0x392>
    4452:	2b0a      	cmp	r3, #10
    4454:	d000      	beq.n	4458 <usbdc_cb_ctl_req+0x238>
    4456:	e0ed      	b.n	4634 <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    4458:	4b2d      	ldr	r3, [pc, #180]	; (4510 <usbdc_cb_ctl_req+0x2f0>)
    445a:	7f5a      	ldrb	r2, [r3, #29]
    445c:	7921      	ldrb	r1, [r4, #4]
    445e:	7963      	ldrb	r3, [r4, #5]
    4460:	021b      	lsls	r3, r3, #8
    4462:	430b      	orrs	r3, r1
    4464:	411a      	asrs	r2, r3
    4466:	07d3      	lsls	r3, r2, #31
    4468:	d400      	bmi.n	446c <usbdc_cb_ctl_req+0x24c>
    446a:	e0ca      	b.n	4602 <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    446c:	4b28      	ldr	r3, [pc, #160]	; (4510 <usbdc_cb_ctl_req+0x2f0>)
    446e:	691d      	ldr	r5, [r3, #16]
	return false;
    4470:	2300      	movs	r3, #0
	while (NULL != func) {
    4472:	2d00      	cmp	r5, #0
    4474:	d100      	bne.n	4478 <usbdc_cb_ctl_req+0x258>
    4476:	e6ed      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    4478:	0022      	movs	r2, r4
    447a:	2102      	movs	r1, #2
    447c:	0028      	movs	r0, r5
    447e:	686b      	ldr	r3, [r5, #4]
    4480:	4798      	blx	r3
    4482:	2800      	cmp	r0, #0
    4484:	db00      	blt.n	4488 <usbdc_cb_ctl_req+0x268>
    4486:	e0c8      	b.n	461a <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    4488:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    448a:	2d00      	cmp	r5, #0
    448c:	d1f4      	bne.n	4478 <usbdc_cb_ctl_req+0x258>
	return false;
    448e:	2300      	movs	r3, #0
    4490:	e6e0      	b.n	4254 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    4492:	2b00      	cmp	r3, #0
    4494:	d000      	beq.n	4498 <usbdc_cb_ctl_req+0x278>
    4496:	e0cd      	b.n	4634 <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    4498:	231f      	movs	r3, #31
    449a:	401a      	ands	r2, r3
    449c:	b2d3      	uxtb	r3, r2
    449e:	2b01      	cmp	r3, #1
    44a0:	d800      	bhi.n	44a4 <usbdc_cb_ctl_req+0x284>
    44a2:	e092      	b.n	45ca <usbdc_cb_ctl_req+0x3aa>
    44a4:	2a02      	cmp	r2, #2
    44a6:	d100      	bne.n	44aa <usbdc_cb_ctl_req+0x28a>
    44a8:	e09f      	b.n	45ea <usbdc_cb_ctl_req+0x3ca>
		return false;
    44aa:	2300      	movs	r3, #0
    44ac:	e6d2      	b.n	4254 <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    44ae:	78a3      	ldrb	r3, [r4, #2]
    44b0:	78e2      	ldrb	r2, [r4, #3]
    44b2:	0212      	lsls	r2, r2, #8
    44b4:	431a      	orrs	r2, r3
    44b6:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    44b8:	2b02      	cmp	r3, #2
    44ba:	d033      	beq.n	4524 <usbdc_cb_ctl_req+0x304>
    44bc:	2b03      	cmp	r3, #3
    44be:	d056      	beq.n	456e <usbdc_cb_ctl_req+0x34e>
    44c0:	2b01      	cmp	r3, #1
    44c2:	d001      	beq.n	44c8 <usbdc_cb_ctl_req+0x2a8>
	return false;
    44c4:	2300      	movs	r3, #0
    44c6:	e6c5      	b.n	4254 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    44c8:	79a2      	ldrb	r2, [r4, #6]
    44ca:	79e3      	ldrb	r3, [r4, #7]
    44cc:	021b      	lsls	r3, r3, #8
    44ce:	4313      	orrs	r3, r2
    44d0:	1c1a      	adds	r2, r3, #0
    44d2:	2b12      	cmp	r3, #18
    44d4:	d900      	bls.n	44d8 <usbdc_cb_ctl_req+0x2b8>
    44d6:	2212      	movs	r2, #18
    44d8:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    44da:	4b0d      	ldr	r3, [pc, #52]	; (4510 <usbdc_cb_ctl_req+0x2f0>)
    44dc:	681b      	ldr	r3, [r3, #0]
    44de:	6859      	ldr	r1, [r3, #4]
    44e0:	6818      	ldr	r0, [r3, #0]
    44e2:	2201      	movs	r2, #1
    44e4:	4b0c      	ldr	r3, [pc, #48]	; (4518 <usbdc_cb_ctl_req+0x2f8>)
    44e6:	4798      	blx	r3
	if (!dev_desc) {
    44e8:	2800      	cmp	r0, #0
    44ea:	d100      	bne.n	44ee <usbdc_cb_ctl_req+0x2ce>
    44ec:	e0a4      	b.n	4638 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    44ee:	2300      	movs	r3, #0
    44f0:	0022      	movs	r2, r4
    44f2:	0001      	movs	r1, r0
    44f4:	0028      	movs	r0, r5
    44f6:	4c05      	ldr	r4, [pc, #20]	; (450c <usbdc_cb_ctl_req+0x2ec>)
    44f8:	47a0      	blx	r4
    44fa:	4243      	negs	r3, r0
    44fc:	4143      	adcs	r3, r0
    44fe:	b2db      	uxtb	r3, r3
    4500:	e6a8      	b.n	4254 <usbdc_cb_ctl_req+0x34>
    4502:	46c0      	nop			; (mov r8, r8)
    4504:	000040a9 	.word	0x000040a9
    4508:	00004f48 	.word	0x00004f48
    450c:	00004205 	.word	0x00004205
    4510:	20000b30 	.word	0x20000b30
    4514:	000047ed 	.word	0x000047ed
    4518:	00004771 	.word	0x00004771
    451c:	00004061 	.word	0x00004061
    4520:	0000201d 	.word	0x0000201d
	uint16_t length   = req->wLength;
    4524:	79a3      	ldrb	r3, [r4, #6]
    4526:	79e6      	ldrb	r6, [r4, #7]
    4528:	0236      	lsls	r6, r6, #8
    452a:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    452c:	4b46      	ldr	r3, [pc, #280]	; (4648 <usbdc_cb_ctl_req+0x428>)
    452e:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    4530:	681b      	ldr	r3, [r3, #0]
    4532:	3201      	adds	r2, #1
    4534:	b2d2      	uxtb	r2, r2
    4536:	6859      	ldr	r1, [r3, #4]
    4538:	6818      	ldr	r0, [r3, #0]
    453a:	4b44      	ldr	r3, [pc, #272]	; (464c <usbdc_cb_ctl_req+0x42c>)
    453c:	4798      	blx	r3
    453e:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    4540:	d07c      	beq.n	463c <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    4542:	78c3      	ldrb	r3, [r0, #3]
    4544:	021b      	lsls	r3, r3, #8
    4546:	7884      	ldrb	r4, [r0, #2]
    4548:	18e4      	adds	r4, r4, r3
    454a:	b2a4      	uxth	r4, r4
		need_zlp = false;
    454c:	2300      	movs	r3, #0
	if (length <= total_len) {
    454e:	42a6      	cmp	r6, r4
    4550:	d905      	bls.n	455e <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4552:	3f01      	subs	r7, #1
    4554:	403e      	ands	r6, r7
    4556:	4273      	negs	r3, r6
    4558:	4173      	adcs	r3, r6
    455a:	b2db      	uxtb	r3, r3
		length = total_len;
    455c:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    455e:	0032      	movs	r2, r6
    4560:	0028      	movs	r0, r5
    4562:	4c3b      	ldr	r4, [pc, #236]	; (4650 <usbdc_cb_ctl_req+0x430>)
    4564:	47a0      	blx	r4
    4566:	4243      	negs	r3, r0
    4568:	4143      	adcs	r3, r0
    456a:	b2db      	uxtb	r3, r3
    456c:	e672      	b.n	4254 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    456e:	79a3      	ldrb	r3, [r4, #6]
    4570:	79e1      	ldrb	r1, [r4, #7]
    4572:	0209      	lsls	r1, r1, #8
    4574:	4319      	orrs	r1, r3
    4576:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4578:	4b33      	ldr	r3, [pc, #204]	; (4648 <usbdc_cb_ctl_req+0x428>)
    457a:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    457c:	681b      	ldr	r3, [r3, #0]
    457e:	b2d2      	uxtb	r2, r2
    4580:	6859      	ldr	r1, [r3, #4]
    4582:	6818      	ldr	r0, [r3, #0]
    4584:	4b33      	ldr	r3, [pc, #204]	; (4654 <usbdc_cb_ctl_req+0x434>)
    4586:	4798      	blx	r3
    4588:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    458a:	d059      	beq.n	4640 <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    458c:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    458e:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    4590:	4294      	cmp	r4, r2
    4592:	d906      	bls.n	45a2 <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    4594:	1e73      	subs	r3, r6, #1
    4596:	4023      	ands	r3, r4
    4598:	0018      	movs	r0, r3
    459a:	4243      	negs	r3, r0
    459c:	4143      	adcs	r3, r0
    459e:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    45a0:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    45a2:	0022      	movs	r2, r4
    45a4:	0028      	movs	r0, r5
    45a6:	4c2a      	ldr	r4, [pc, #168]	; (4650 <usbdc_cb_ctl_req+0x430>)
    45a8:	47a0      	blx	r4
    45aa:	4243      	negs	r3, r0
    45ac:	4143      	adcs	r3, r0
    45ae:	b2db      	uxtb	r3, r3
    45b0:	e650      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    45b2:	4b25      	ldr	r3, [pc, #148]	; (4648 <usbdc_cb_ctl_req+0x428>)
    45b4:	7eda      	ldrb	r2, [r3, #27]
    45b6:	6959      	ldr	r1, [r3, #20]
    45b8:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    45ba:	6959      	ldr	r1, [r3, #20]
    45bc:	2300      	movs	r3, #0
    45be:	2201      	movs	r2, #1
    45c0:	0028      	movs	r0, r5
    45c2:	4c23      	ldr	r4, [pc, #140]	; (4650 <usbdc_cb_ctl_req+0x430>)
    45c4:	47a0      	blx	r4
		return true;
    45c6:	2301      	movs	r3, #1
    45c8:	e644      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		st = 0;
    45ca:	2300      	movs	r3, #0
    45cc:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    45ce:	4c1e      	ldr	r4, [pc, #120]	; (4648 <usbdc_cb_ctl_req+0x428>)
    45d0:	2202      	movs	r2, #2
    45d2:	a902      	add	r1, sp, #8
    45d4:	6960      	ldr	r0, [r4, #20]
    45d6:	4b20      	ldr	r3, [pc, #128]	; (4658 <usbdc_cb_ctl_req+0x438>)
    45d8:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    45da:	6961      	ldr	r1, [r4, #20]
    45dc:	2300      	movs	r3, #0
    45de:	2202      	movs	r2, #2
    45e0:	0028      	movs	r0, r5
    45e2:	4c1b      	ldr	r4, [pc, #108]	; (4650 <usbdc_cb_ctl_req+0x430>)
    45e4:	47a0      	blx	r4
	return true;
    45e6:	2301      	movs	r3, #1
    45e8:	e634      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    45ea:	7920      	ldrb	r0, [r4, #4]
    45ec:	2102      	movs	r1, #2
    45ee:	4b1b      	ldr	r3, [pc, #108]	; (465c <usbdc_cb_ctl_req+0x43c>)
    45f0:	4798      	blx	r3
		if (st < 0) {
    45f2:	2800      	cmp	r0, #0
    45f4:	db03      	blt.n	45fe <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    45f6:	2301      	movs	r3, #1
    45f8:	4018      	ands	r0, r3
    45fa:	9002      	str	r0, [sp, #8]
    45fc:	e7e7      	b.n	45ce <usbdc_cb_ctl_req+0x3ae>
			return false;
    45fe:	2300      	movs	r3, #0
    4600:	e628      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    4602:	4b11      	ldr	r3, [pc, #68]	; (4648 <usbdc_cb_ctl_req+0x428>)
    4604:	2200      	movs	r2, #0
    4606:	6959      	ldr	r1, [r3, #20]
    4608:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    460a:	6959      	ldr	r1, [r3, #20]
    460c:	2300      	movs	r3, #0
    460e:	3201      	adds	r2, #1
    4610:	2000      	movs	r0, #0
    4612:	4c0f      	ldr	r4, [pc, #60]	; (4650 <usbdc_cb_ctl_req+0x430>)
    4614:	47a0      	blx	r4
		return true;
    4616:	2301      	movs	r3, #1
    4618:	e61c      	b.n	4254 <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    461a:	4b0b      	ldr	r3, [pc, #44]	; (4648 <usbdc_cb_ctl_req+0x428>)
    461c:	695a      	ldr	r2, [r3, #20]
    461e:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    4620:	6959      	ldr	r1, [r3, #20]
    4622:	2300      	movs	r3, #0
    4624:	2201      	movs	r2, #1
    4626:	2000      	movs	r0, #0
    4628:	4c09      	ldr	r4, [pc, #36]	; (4650 <usbdc_cb_ctl_req+0x430>)
    462a:	47a0      	blx	r4
			return true;
    462c:	2301      	movs	r3, #1
    462e:	e611      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		return false;
    4630:	2300      	movs	r3, #0
    4632:	e60f      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		return false;
    4634:	2300      	movs	r3, #0
    4636:	e60d      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		return false;
    4638:	2300      	movs	r3, #0
    463a:	e60b      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		return false;
    463c:	2300      	movs	r3, #0
    463e:	e609      	b.n	4254 <usbdc_cb_ctl_req+0x34>
		return false;
    4640:	2300      	movs	r3, #0
    4642:	e607      	b.n	4254 <usbdc_cb_ctl_req+0x34>
			return false;
    4644:	2300      	movs	r3, #0
    4646:	e605      	b.n	4254 <usbdc_cb_ctl_req+0x34>
    4648:	20000b30 	.word	0x20000b30
    464c:	000047ed 	.word	0x000047ed
    4650:	00004205 	.word	0x00004205
    4654:	00004855 	.word	0x00004855
    4658:	00004a6d 	.word	0x00004a6d
    465c:	0000201d 	.word	0x0000201d

00004660 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    4660:	b510      	push	{r4, lr}
	switch (type) {
    4662:	2801      	cmp	r0, #1
    4664:	d009      	beq.n	467a <usbdc_register_handler+0x1a>
    4666:	2800      	cmp	r0, #0
    4668:	d002      	beq.n	4670 <usbdc_register_handler+0x10>
    466a:	2802      	cmp	r0, #2
    466c:	d00a      	beq.n	4684 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    466e:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    4670:	4807      	ldr	r0, [pc, #28]	; (4690 <usbdc_register_handler+0x30>)
    4672:	3004      	adds	r0, #4
    4674:	4b07      	ldr	r3, [pc, #28]	; (4694 <usbdc_register_handler+0x34>)
    4676:	4798      	blx	r3
		break;
    4678:	e7f9      	b.n	466e <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    467a:	4805      	ldr	r0, [pc, #20]	; (4690 <usbdc_register_handler+0x30>)
    467c:	3008      	adds	r0, #8
    467e:	4b05      	ldr	r3, [pc, #20]	; (4694 <usbdc_register_handler+0x34>)
    4680:	4798      	blx	r3
		break;
    4682:	e7f4      	b.n	466e <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    4684:	4802      	ldr	r0, [pc, #8]	; (4690 <usbdc_register_handler+0x30>)
    4686:	300c      	adds	r0, #12
    4688:	4b02      	ldr	r3, [pc, #8]	; (4694 <usbdc_register_handler+0x34>)
    468a:	4798      	blx	r3
}
    468c:	e7ef      	b.n	466e <usbdc_register_handler+0xe>
    468e:	46c0      	nop			; (mov r8, r8)
    4690:	20000b30 	.word	0x20000b30
    4694:	00002135 	.word	0x00002135

00004698 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    4698:	b570      	push	{r4, r5, r6, lr}
    469a:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    469c:	1e43      	subs	r3, r0, #1
    469e:	4198      	sbcs	r0, r3
    46a0:	b2c0      	uxtb	r0, r0
    46a2:	4a0c      	ldr	r2, [pc, #48]	; (46d4 <usbdc_init+0x3c>)
    46a4:	490c      	ldr	r1, [pc, #48]	; (46d8 <usbdc_init+0x40>)
    46a6:	4b0d      	ldr	r3, [pc, #52]	; (46dc <usbdc_init+0x44>)
    46a8:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    46aa:	4b0d      	ldr	r3, [pc, #52]	; (46e0 <usbdc_init+0x48>)
    46ac:	4798      	blx	r3
	if (rc < 0) {
    46ae:	2800      	cmp	r0, #0
    46b0:	db0e      	blt.n	46d0 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    46b2:	4d0c      	ldr	r5, [pc, #48]	; (46e4 <usbdc_init+0x4c>)
    46b4:	2220      	movs	r2, #32
    46b6:	2100      	movs	r1, #0
    46b8:	0028      	movs	r0, r5
    46ba:	4b0b      	ldr	r3, [pc, #44]	; (46e8 <usbdc_init+0x50>)
    46bc:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    46be:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    46c0:	490a      	ldr	r1, [pc, #40]	; (46ec <usbdc_init+0x54>)
    46c2:	2000      	movs	r0, #0
    46c4:	4c0a      	ldr	r4, [pc, #40]	; (46f0 <usbdc_init+0x58>)
    46c6:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    46c8:	490a      	ldr	r1, [pc, #40]	; (46f4 <usbdc_init+0x5c>)
    46ca:	2001      	movs	r0, #1
    46cc:	47a0      	blx	r4

	return 0;
    46ce:	2000      	movs	r0, #0
}
    46d0:	bd70      	pop	{r4, r5, r6, pc}
    46d2:	46c0      	nop			; (mov r8, r8)
    46d4:	00000355 	.word	0x00000355
    46d8:	00004f78 	.word	0x00004f78
    46dc:	000020d5 	.word	0x000020d5
    46e0:	00001d51 	.word	0x00001d51
    46e4:	20000b30 	.word	0x20000b30
    46e8:	00004af1 	.word	0x00004af1
    46ec:	000040ed 	.word	0x000040ed
    46f0:	00001db5 	.word	0x00001db5
    46f4:	000041e1 	.word	0x000041e1

000046f8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    46f8:	b510      	push	{r4, lr}
    46fa:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    46fc:	4802      	ldr	r0, [pc, #8]	; (4708 <usbdc_register_function+0x10>)
    46fe:	3010      	adds	r0, #16
    4700:	4b02      	ldr	r3, [pc, #8]	; (470c <usbdc_register_function+0x14>)
    4702:	4798      	blx	r3
}
    4704:	bd10      	pop	{r4, pc}
    4706:	46c0      	nop			; (mov r8, r8)
    4708:	20000b30 	.word	0x20000b30
    470c:	00002135 	.word	0x00002135

00004710 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    4710:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    4712:	4b0b      	ldr	r3, [pc, #44]	; (4740 <usbdc_start+0x30>)
    4714:	7e9b      	ldrb	r3, [r3, #26]
    4716:	2b00      	cmp	r3, #0
    4718:	d10c      	bne.n	4734 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    471a:	2800      	cmp	r0, #0
    471c:	d00d      	beq.n	473a <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    471e:	4b08      	ldr	r3, [pc, #32]	; (4740 <usbdc_start+0x30>)
    4720:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    4722:	6802      	ldr	r2, [r0, #0]
    4724:	79d2      	ldrb	r2, [r2, #7]
    4726:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    4728:	2201      	movs	r2, #1
    472a:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    472c:	4b05      	ldr	r3, [pc, #20]	; (4744 <usbdc_start+0x34>)
    472e:	4798      	blx	r3
	return ERR_NONE;
    4730:	2000      	movs	r0, #0
}
    4732:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    4734:	2004      	movs	r0, #4
    4736:	4240      	negs	r0, r0
    4738:	e7fb      	b.n	4732 <usbdc_start+0x22>
		return ERR_BAD_DATA;
    473a:	2009      	movs	r0, #9
    473c:	4240      	negs	r0, r0
    473e:	e7f8      	b.n	4732 <usbdc_start+0x22>
    4740:	20000b30 	.word	0x20000b30
    4744:	00001dc1 	.word	0x00001dc1

00004748 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    4748:	b510      	push	{r4, lr}
	usb_d_attach();
    474a:	4b01      	ldr	r3, [pc, #4]	; (4750 <usbdc_attach+0x8>)
    474c:	4798      	blx	r3
}
    474e:	bd10      	pop	{r4, pc}
    4750:	00001dcd 	.word	0x00001dcd

00004754 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    4754:	4b01      	ldr	r3, [pc, #4]	; (475c <usbdc_get_ctrl_buffer+0x8>)
    4756:	6958      	ldr	r0, [r3, #20]
}
    4758:	4770      	bx	lr
    475a:	46c0      	nop			; (mov r8, r8)
    475c:	20000b30 	.word	0x20000b30

00004760 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    4760:	4b02      	ldr	r3, [pc, #8]	; (476c <usbdc_get_state+0xc>)
    4762:	7e98      	ldrb	r0, [r3, #26]
    4764:	06c3      	lsls	r3, r0, #27
    4766:	d500      	bpl.n	476a <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    4768:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    476a:	4770      	bx	lr
    476c:	20000b30 	.word	0x20000b30

00004770 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    4770:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    4772:	4288      	cmp	r0, r1
    4774:	d211      	bcs.n	479a <usb_find_desc+0x2a>
	return desc[0];
    4776:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    4778:	2b01      	cmp	r3, #1
    477a:	d910      	bls.n	479e <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    477c:	7844      	ldrb	r4, [r0, #1]
    477e:	4294      	cmp	r4, r2
    4780:	d00a      	beq.n	4798 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    4782:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    4784:	4281      	cmp	r1, r0
    4786:	d906      	bls.n	4796 <usb_find_desc+0x26>
	return desc[0];
    4788:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    478a:	2b01      	cmp	r3, #1
    478c:	d909      	bls.n	47a2 <usb_find_desc+0x32>
	return desc[1];
    478e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    4790:	4294      	cmp	r4, r2
    4792:	d1f6      	bne.n	4782 <usb_find_desc+0x12>
    4794:	e000      	b.n	4798 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    4796:	2000      	movs	r0, #0
}
    4798:	bd10      	pop	{r4, pc}
	return NULL;
    479a:	2000      	movs	r0, #0
    479c:	e7fc      	b.n	4798 <usb_find_desc+0x28>
		_desc_len_check();
    479e:	2000      	movs	r0, #0
    47a0:	e7fa      	b.n	4798 <usb_find_desc+0x28>
    47a2:	2000      	movs	r0, #0
    47a4:	e7f8      	b.n	4798 <usb_find_desc+0x28>

000047a6 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    47a6:	4288      	cmp	r0, r1
    47a8:	d215      	bcs.n	47d6 <usb_find_ep_desc+0x30>
	return desc[0];
    47aa:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    47ac:	2b01      	cmp	r3, #1
    47ae:	d914      	bls.n	47da <usb_find_ep_desc+0x34>
	return desc[1];
    47b0:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    47b2:	2a04      	cmp	r2, #4
    47b4:	d013      	beq.n	47de <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    47b6:	2a05      	cmp	r2, #5
    47b8:	d00c      	beq.n	47d4 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    47ba:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    47bc:	4281      	cmp	r1, r0
    47be:	d908      	bls.n	47d2 <usb_find_ep_desc+0x2c>
	return desc[0];
    47c0:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    47c2:	2b01      	cmp	r3, #1
    47c4:	d90d      	bls.n	47e2 <usb_find_ep_desc+0x3c>
	return desc[1];
    47c6:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    47c8:	2a04      	cmp	r2, #4
    47ca:	d00c      	beq.n	47e6 <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    47cc:	2a05      	cmp	r2, #5
    47ce:	d1f4      	bne.n	47ba <usb_find_ep_desc+0x14>
    47d0:	e000      	b.n	47d4 <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    47d2:	2000      	movs	r0, #0
}
    47d4:	4770      	bx	lr
	return NULL;
    47d6:	2000      	movs	r0, #0
    47d8:	e7fc      	b.n	47d4 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    47da:	2000      	movs	r0, #0
    47dc:	e7fa      	b.n	47d4 <usb_find_ep_desc+0x2e>
	return NULL;
    47de:	2000      	movs	r0, #0
    47e0:	e7f8      	b.n	47d4 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    47e2:	2000      	movs	r0, #0
    47e4:	e7f6      	b.n	47d4 <usb_find_ep_desc+0x2e>
	return NULL;
    47e6:	2000      	movs	r0, #0
    47e8:	e7f4      	b.n	47d4 <usb_find_ep_desc+0x2e>
	...

000047ec <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    47ec:	b570      	push	{r4, r5, r6, lr}
    47ee:	000c      	movs	r4, r1
    47f0:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    47f2:	2202      	movs	r2, #2
    47f4:	4b16      	ldr	r3, [pc, #88]	; (4850 <usb_find_cfg_desc+0x64>)
    47f6:	4798      	blx	r3
	if (!desc) {
    47f8:	2800      	cmp	r0, #0
    47fa:	d01d      	beq.n	4838 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    47fc:	4284      	cmp	r4, r0
    47fe:	d91c      	bls.n	483a <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    4800:	7803      	ldrb	r3, [r0, #0]
    4802:	2b01      	cmp	r3, #1
    4804:	d91b      	bls.n	483e <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    4806:	7843      	ldrb	r3, [r0, #1]
    4808:	2b02      	cmp	r3, #2
    480a:	d11a      	bne.n	4842 <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    480c:	7943      	ldrb	r3, [r0, #5]
    480e:	42ab      	cmp	r3, r5
    4810:	d012      	beq.n	4838 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    4812:	78c2      	ldrb	r2, [r0, #3]
    4814:	0212      	lsls	r2, r2, #8
    4816:	7883      	ldrb	r3, [r0, #2]
    4818:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    481a:	b29b      	uxth	r3, r3
    481c:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    481e:	4284      	cmp	r4, r0
    4820:	d909      	bls.n	4836 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    4822:	7803      	ldrb	r3, [r0, #0]
    4824:	2b01      	cmp	r3, #1
    4826:	d90e      	bls.n	4846 <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    4828:	7843      	ldrb	r3, [r0, #1]
    482a:	2b02      	cmp	r3, #2
    482c:	d10d      	bne.n	484a <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    482e:	7943      	ldrb	r3, [r0, #5]
    4830:	42ab      	cmp	r3, r5
    4832:	d1ee      	bne.n	4812 <usb_find_cfg_desc+0x26>
    4834:	e000      	b.n	4838 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    4836:	2000      	movs	r0, #0
}
    4838:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    483a:	2000      	movs	r0, #0
    483c:	e7fc      	b.n	4838 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    483e:	2000      	movs	r0, #0
    4840:	e7fa      	b.n	4838 <usb_find_cfg_desc+0x4c>
	return NULL;
    4842:	2000      	movs	r0, #0
    4844:	e7f8      	b.n	4838 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    4846:	2000      	movs	r0, #0
    4848:	e7f6      	b.n	4838 <usb_find_cfg_desc+0x4c>
	return NULL;
    484a:	2000      	movs	r0, #0
    484c:	e7f4      	b.n	4838 <usb_find_cfg_desc+0x4c>
    484e:	46c0      	nop			; (mov r8, r8)
    4850:	00004771 	.word	0x00004771

00004854 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    4854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4856:	000d      	movs	r5, r1
    4858:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    485a:	4288      	cmp	r0, r1
    485c:	d212      	bcs.n	4884 <usb_find_str_desc+0x30>
    485e:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    4860:	4e0a      	ldr	r6, [pc, #40]	; (488c <usb_find_str_desc+0x38>)
    4862:	2203      	movs	r2, #3
    4864:	0029      	movs	r1, r5
    4866:	47b0      	blx	r6
		if (desc) {
    4868:	2800      	cmp	r0, #0
    486a:	d00e      	beq.n	488a <usb_find_str_desc+0x36>
	return desc[0];
    486c:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    486e:	2b01      	cmp	r3, #1
    4870:	d90a      	bls.n	4888 <usb_find_str_desc+0x34>
			if (i == str_index) {
    4872:	42a7      	cmp	r7, r4
    4874:	d009      	beq.n	488a <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    4876:	3401      	adds	r4, #1
    4878:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    487a:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    487c:	4285      	cmp	r5, r0
    487e:	d8f0      	bhi.n	4862 <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    4880:	2000      	movs	r0, #0
    4882:	e002      	b.n	488a <usb_find_str_desc+0x36>
    4884:	2000      	movs	r0, #0
    4886:	e000      	b.n	488a <usb_find_str_desc+0x36>
			_desc_len_check();
    4888:	2000      	movs	r0, #0
}
    488a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    488c:	00004771 	.word	0x00004771

00004890 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    4890:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    4892:	4806      	ldr	r0, [pc, #24]	; (48ac <cdc_device_acm_init+0x1c>)
    4894:	3040      	adds	r0, #64	; 0x40
    4896:	4b06      	ldr	r3, [pc, #24]	; (48b0 <cdc_device_acm_init+0x20>)
    4898:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    489a:	4b06      	ldr	r3, [pc, #24]	; (48b4 <cdc_device_acm_init+0x24>)
    489c:	4798      	blx	r3

	usbdc_start(single_desc);
    489e:	4806      	ldr	r0, [pc, #24]	; (48b8 <cdc_device_acm_init+0x28>)
    48a0:	4b06      	ldr	r3, [pc, #24]	; (48bc <cdc_device_acm_init+0x2c>)
    48a2:	4798      	blx	r3
	usbdc_attach();
    48a4:	4b06      	ldr	r3, [pc, #24]	; (48c0 <cdc_device_acm_init+0x30>)
    48a6:	4798      	blx	r3
}
    48a8:	bd10      	pop	{r4, pc}
    48aa:	46c0      	nop			; (mov r8, r8)
    48ac:	20000b50 	.word	0x20000b50
    48b0:	00004699 	.word	0x00004699
    48b4:	00003f51 	.word	0x00003f51
    48b8:	2000000c 	.word	0x2000000c
    48bc:	00004711 	.word	0x00004711
    48c0:	00004749 	.word	0x00004749

000048c4 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    48c4:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    48c6:	4b01      	ldr	r3, [pc, #4]	; (48cc <usb_init+0x8>)
    48c8:	4798      	blx	r3
}
    48ca:	bd10      	pop	{r4, pc}
    48cc:	00004891 	.word	0x00004891

000048d0 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    48d0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    48d4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    48d6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    48d8:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    48dc:	4770      	bx	lr

000048de <atomic_leave_critical>:
    48de:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    48e2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    48e4:	f383 8810 	msr	PRIMASK, r3
}
    48e8:	4770      	bx	lr
	...

000048ec <__aeabi_atexit>:
    48ec:	000b      	movs	r3, r1
    48ee:	b510      	push	{r4, lr}
    48f0:	0001      	movs	r1, r0
    48f2:	0018      	movs	r0, r3
    48f4:	f000 f88e 	bl	4a14 <__cxa_atexit>
    48f8:	bd10      	pop	{r4, pc}
    48fa:	46c0      	nop			; (mov r8, r8)

000048fc <__udivsi3>:
    48fc:	2200      	movs	r2, #0
    48fe:	0843      	lsrs	r3, r0, #1
    4900:	428b      	cmp	r3, r1
    4902:	d374      	bcc.n	49ee <__udivsi3+0xf2>
    4904:	0903      	lsrs	r3, r0, #4
    4906:	428b      	cmp	r3, r1
    4908:	d35f      	bcc.n	49ca <__udivsi3+0xce>
    490a:	0a03      	lsrs	r3, r0, #8
    490c:	428b      	cmp	r3, r1
    490e:	d344      	bcc.n	499a <__udivsi3+0x9e>
    4910:	0b03      	lsrs	r3, r0, #12
    4912:	428b      	cmp	r3, r1
    4914:	d328      	bcc.n	4968 <__udivsi3+0x6c>
    4916:	0c03      	lsrs	r3, r0, #16
    4918:	428b      	cmp	r3, r1
    491a:	d30d      	bcc.n	4938 <__udivsi3+0x3c>
    491c:	22ff      	movs	r2, #255	; 0xff
    491e:	0209      	lsls	r1, r1, #8
    4920:	ba12      	rev	r2, r2
    4922:	0c03      	lsrs	r3, r0, #16
    4924:	428b      	cmp	r3, r1
    4926:	d302      	bcc.n	492e <__udivsi3+0x32>
    4928:	1212      	asrs	r2, r2, #8
    492a:	0209      	lsls	r1, r1, #8
    492c:	d065      	beq.n	49fa <__udivsi3+0xfe>
    492e:	0b03      	lsrs	r3, r0, #12
    4930:	428b      	cmp	r3, r1
    4932:	d319      	bcc.n	4968 <__udivsi3+0x6c>
    4934:	e000      	b.n	4938 <__udivsi3+0x3c>
    4936:	0a09      	lsrs	r1, r1, #8
    4938:	0bc3      	lsrs	r3, r0, #15
    493a:	428b      	cmp	r3, r1
    493c:	d301      	bcc.n	4942 <__udivsi3+0x46>
    493e:	03cb      	lsls	r3, r1, #15
    4940:	1ac0      	subs	r0, r0, r3
    4942:	4152      	adcs	r2, r2
    4944:	0b83      	lsrs	r3, r0, #14
    4946:	428b      	cmp	r3, r1
    4948:	d301      	bcc.n	494e <__udivsi3+0x52>
    494a:	038b      	lsls	r3, r1, #14
    494c:	1ac0      	subs	r0, r0, r3
    494e:	4152      	adcs	r2, r2
    4950:	0b43      	lsrs	r3, r0, #13
    4952:	428b      	cmp	r3, r1
    4954:	d301      	bcc.n	495a <__udivsi3+0x5e>
    4956:	034b      	lsls	r3, r1, #13
    4958:	1ac0      	subs	r0, r0, r3
    495a:	4152      	adcs	r2, r2
    495c:	0b03      	lsrs	r3, r0, #12
    495e:	428b      	cmp	r3, r1
    4960:	d301      	bcc.n	4966 <__udivsi3+0x6a>
    4962:	030b      	lsls	r3, r1, #12
    4964:	1ac0      	subs	r0, r0, r3
    4966:	4152      	adcs	r2, r2
    4968:	0ac3      	lsrs	r3, r0, #11
    496a:	428b      	cmp	r3, r1
    496c:	d301      	bcc.n	4972 <__udivsi3+0x76>
    496e:	02cb      	lsls	r3, r1, #11
    4970:	1ac0      	subs	r0, r0, r3
    4972:	4152      	adcs	r2, r2
    4974:	0a83      	lsrs	r3, r0, #10
    4976:	428b      	cmp	r3, r1
    4978:	d301      	bcc.n	497e <__udivsi3+0x82>
    497a:	028b      	lsls	r3, r1, #10
    497c:	1ac0      	subs	r0, r0, r3
    497e:	4152      	adcs	r2, r2
    4980:	0a43      	lsrs	r3, r0, #9
    4982:	428b      	cmp	r3, r1
    4984:	d301      	bcc.n	498a <__udivsi3+0x8e>
    4986:	024b      	lsls	r3, r1, #9
    4988:	1ac0      	subs	r0, r0, r3
    498a:	4152      	adcs	r2, r2
    498c:	0a03      	lsrs	r3, r0, #8
    498e:	428b      	cmp	r3, r1
    4990:	d301      	bcc.n	4996 <__udivsi3+0x9a>
    4992:	020b      	lsls	r3, r1, #8
    4994:	1ac0      	subs	r0, r0, r3
    4996:	4152      	adcs	r2, r2
    4998:	d2cd      	bcs.n	4936 <__udivsi3+0x3a>
    499a:	09c3      	lsrs	r3, r0, #7
    499c:	428b      	cmp	r3, r1
    499e:	d301      	bcc.n	49a4 <__udivsi3+0xa8>
    49a0:	01cb      	lsls	r3, r1, #7
    49a2:	1ac0      	subs	r0, r0, r3
    49a4:	4152      	adcs	r2, r2
    49a6:	0983      	lsrs	r3, r0, #6
    49a8:	428b      	cmp	r3, r1
    49aa:	d301      	bcc.n	49b0 <__udivsi3+0xb4>
    49ac:	018b      	lsls	r3, r1, #6
    49ae:	1ac0      	subs	r0, r0, r3
    49b0:	4152      	adcs	r2, r2
    49b2:	0943      	lsrs	r3, r0, #5
    49b4:	428b      	cmp	r3, r1
    49b6:	d301      	bcc.n	49bc <__udivsi3+0xc0>
    49b8:	014b      	lsls	r3, r1, #5
    49ba:	1ac0      	subs	r0, r0, r3
    49bc:	4152      	adcs	r2, r2
    49be:	0903      	lsrs	r3, r0, #4
    49c0:	428b      	cmp	r3, r1
    49c2:	d301      	bcc.n	49c8 <__udivsi3+0xcc>
    49c4:	010b      	lsls	r3, r1, #4
    49c6:	1ac0      	subs	r0, r0, r3
    49c8:	4152      	adcs	r2, r2
    49ca:	08c3      	lsrs	r3, r0, #3
    49cc:	428b      	cmp	r3, r1
    49ce:	d301      	bcc.n	49d4 <__udivsi3+0xd8>
    49d0:	00cb      	lsls	r3, r1, #3
    49d2:	1ac0      	subs	r0, r0, r3
    49d4:	4152      	adcs	r2, r2
    49d6:	0883      	lsrs	r3, r0, #2
    49d8:	428b      	cmp	r3, r1
    49da:	d301      	bcc.n	49e0 <__udivsi3+0xe4>
    49dc:	008b      	lsls	r3, r1, #2
    49de:	1ac0      	subs	r0, r0, r3
    49e0:	4152      	adcs	r2, r2
    49e2:	0843      	lsrs	r3, r0, #1
    49e4:	428b      	cmp	r3, r1
    49e6:	d301      	bcc.n	49ec <__udivsi3+0xf0>
    49e8:	004b      	lsls	r3, r1, #1
    49ea:	1ac0      	subs	r0, r0, r3
    49ec:	4152      	adcs	r2, r2
    49ee:	1a41      	subs	r1, r0, r1
    49f0:	d200      	bcs.n	49f4 <__udivsi3+0xf8>
    49f2:	4601      	mov	r1, r0
    49f4:	4152      	adcs	r2, r2
    49f6:	4610      	mov	r0, r2
    49f8:	4770      	bx	lr
    49fa:	e7ff      	b.n	49fc <__udivsi3+0x100>
    49fc:	b501      	push	{r0, lr}
    49fe:	2000      	movs	r0, #0
    4a00:	f000 f806 	bl	4a10 <__aeabi_idiv0>
    4a04:	bd02      	pop	{r1, pc}
    4a06:	46c0      	nop			; (mov r8, r8)

00004a08 <__aeabi_uidivmod>:
    4a08:	2900      	cmp	r1, #0
    4a0a:	d0f7      	beq.n	49fc <__udivsi3+0x100>
    4a0c:	e776      	b.n	48fc <__udivsi3>
    4a0e:	4770      	bx	lr

00004a10 <__aeabi_idiv0>:
    4a10:	4770      	bx	lr
    4a12:	46c0      	nop			; (mov r8, r8)

00004a14 <__cxa_atexit>:
    4a14:	b510      	push	{r4, lr}
    4a16:	0013      	movs	r3, r2
    4a18:	000a      	movs	r2, r1
    4a1a:	0001      	movs	r1, r0
    4a1c:	2002      	movs	r0, #2
    4a1e:	f000 f8e3 	bl	4be8 <__register_exitproc>
    4a22:	bd10      	pop	{r4, pc}

00004a24 <__libc_init_array>:
    4a24:	b570      	push	{r4, r5, r6, lr}
    4a26:	4e0d      	ldr	r6, [pc, #52]	; (4a5c <__libc_init_array+0x38>)
    4a28:	4d0d      	ldr	r5, [pc, #52]	; (4a60 <__libc_init_array+0x3c>)
    4a2a:	2400      	movs	r4, #0
    4a2c:	1bad      	subs	r5, r5, r6
    4a2e:	10ad      	asrs	r5, r5, #2
    4a30:	d005      	beq.n	4a3e <__libc_init_array+0x1a>
    4a32:	00a3      	lsls	r3, r4, #2
    4a34:	58f3      	ldr	r3, [r6, r3]
    4a36:	3401      	adds	r4, #1
    4a38:	4798      	blx	r3
    4a3a:	42a5      	cmp	r5, r4
    4a3c:	d1f9      	bne.n	4a32 <__libc_init_array+0xe>
    4a3e:	f000 faa9 	bl	4f94 <_init>
    4a42:	4e08      	ldr	r6, [pc, #32]	; (4a64 <__libc_init_array+0x40>)
    4a44:	4d08      	ldr	r5, [pc, #32]	; (4a68 <__libc_init_array+0x44>)
    4a46:	2400      	movs	r4, #0
    4a48:	1bad      	subs	r5, r5, r6
    4a4a:	10ad      	asrs	r5, r5, #2
    4a4c:	d005      	beq.n	4a5a <__libc_init_array+0x36>
    4a4e:	00a3      	lsls	r3, r4, #2
    4a50:	58f3      	ldr	r3, [r6, r3]
    4a52:	3401      	adds	r4, #1
    4a54:	4798      	blx	r3
    4a56:	42a5      	cmp	r5, r4
    4a58:	d1f9      	bne.n	4a4e <__libc_init_array+0x2a>
    4a5a:	bd70      	pop	{r4, r5, r6, pc}
    4a5c:	00004fa0 	.word	0x00004fa0
    4a60:	00004fa0 	.word	0x00004fa0
    4a64:	00004fa0 	.word	0x00004fa0
    4a68:	00004fb8 	.word	0x00004fb8

00004a6c <memcpy>:
    4a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a6e:	0005      	movs	r5, r0
    4a70:	2a0f      	cmp	r2, #15
    4a72:	d92f      	bls.n	4ad4 <memcpy+0x68>
    4a74:	000b      	movs	r3, r1
    4a76:	4303      	orrs	r3, r0
    4a78:	079b      	lsls	r3, r3, #30
    4a7a:	d134      	bne.n	4ae6 <memcpy+0x7a>
    4a7c:	0016      	movs	r6, r2
    4a7e:	000c      	movs	r4, r1
    4a80:	0003      	movs	r3, r0
    4a82:	3e10      	subs	r6, #16
    4a84:	0935      	lsrs	r5, r6, #4
    4a86:	3501      	adds	r5, #1
    4a88:	012d      	lsls	r5, r5, #4
    4a8a:	1945      	adds	r5, r0, r5
    4a8c:	6827      	ldr	r7, [r4, #0]
    4a8e:	601f      	str	r7, [r3, #0]
    4a90:	6867      	ldr	r7, [r4, #4]
    4a92:	605f      	str	r7, [r3, #4]
    4a94:	68a7      	ldr	r7, [r4, #8]
    4a96:	609f      	str	r7, [r3, #8]
    4a98:	68e7      	ldr	r7, [r4, #12]
    4a9a:	3410      	adds	r4, #16
    4a9c:	60df      	str	r7, [r3, #12]
    4a9e:	3310      	adds	r3, #16
    4aa0:	429d      	cmp	r5, r3
    4aa2:	d1f3      	bne.n	4a8c <memcpy+0x20>
    4aa4:	230f      	movs	r3, #15
    4aa6:	439e      	bics	r6, r3
    4aa8:	3610      	adds	r6, #16
    4aaa:	1985      	adds	r5, r0, r6
    4aac:	1989      	adds	r1, r1, r6
    4aae:	4013      	ands	r3, r2
    4ab0:	2b03      	cmp	r3, #3
    4ab2:	d91a      	bls.n	4aea <memcpy+0x7e>
    4ab4:	1f1e      	subs	r6, r3, #4
    4ab6:	2300      	movs	r3, #0
    4ab8:	08b4      	lsrs	r4, r6, #2
    4aba:	3401      	adds	r4, #1
    4abc:	00a4      	lsls	r4, r4, #2
    4abe:	58cf      	ldr	r7, [r1, r3]
    4ac0:	50ef      	str	r7, [r5, r3]
    4ac2:	3304      	adds	r3, #4
    4ac4:	42a3      	cmp	r3, r4
    4ac6:	d1fa      	bne.n	4abe <memcpy+0x52>
    4ac8:	2403      	movs	r4, #3
    4aca:	43a6      	bics	r6, r4
    4acc:	1d33      	adds	r3, r6, #4
    4ace:	4022      	ands	r2, r4
    4ad0:	18c9      	adds	r1, r1, r3
    4ad2:	18ed      	adds	r5, r5, r3
    4ad4:	2a00      	cmp	r2, #0
    4ad6:	d005      	beq.n	4ae4 <memcpy+0x78>
    4ad8:	2300      	movs	r3, #0
    4ada:	5ccc      	ldrb	r4, [r1, r3]
    4adc:	54ec      	strb	r4, [r5, r3]
    4ade:	3301      	adds	r3, #1
    4ae0:	4293      	cmp	r3, r2
    4ae2:	d1fa      	bne.n	4ada <memcpy+0x6e>
    4ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ae6:	0005      	movs	r5, r0
    4ae8:	e7f6      	b.n	4ad8 <memcpy+0x6c>
    4aea:	001a      	movs	r2, r3
    4aec:	e7f2      	b.n	4ad4 <memcpy+0x68>
    4aee:	46c0      	nop			; (mov r8, r8)

00004af0 <memset>:
    4af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4af2:	0783      	lsls	r3, r0, #30
    4af4:	d043      	beq.n	4b7e <memset+0x8e>
    4af6:	1e54      	subs	r4, r2, #1
    4af8:	2a00      	cmp	r2, #0
    4afa:	d03f      	beq.n	4b7c <memset+0x8c>
    4afc:	b2ce      	uxtb	r6, r1
    4afe:	0002      	movs	r2, r0
    4b00:	2503      	movs	r5, #3
    4b02:	e002      	b.n	4b0a <memset+0x1a>
    4b04:	001a      	movs	r2, r3
    4b06:	3c01      	subs	r4, #1
    4b08:	d338      	bcc.n	4b7c <memset+0x8c>
    4b0a:	1c53      	adds	r3, r2, #1
    4b0c:	7016      	strb	r6, [r2, #0]
    4b0e:	422b      	tst	r3, r5
    4b10:	d1f8      	bne.n	4b04 <memset+0x14>
    4b12:	2c03      	cmp	r4, #3
    4b14:	d92a      	bls.n	4b6c <memset+0x7c>
    4b16:	22ff      	movs	r2, #255	; 0xff
    4b18:	400a      	ands	r2, r1
    4b1a:	0215      	lsls	r5, r2, #8
    4b1c:	4315      	orrs	r5, r2
    4b1e:	042a      	lsls	r2, r5, #16
    4b20:	4315      	orrs	r5, r2
    4b22:	2c0f      	cmp	r4, #15
    4b24:	d914      	bls.n	4b50 <memset+0x60>
    4b26:	0027      	movs	r7, r4
    4b28:	001a      	movs	r2, r3
    4b2a:	3f10      	subs	r7, #16
    4b2c:	093e      	lsrs	r6, r7, #4
    4b2e:	3601      	adds	r6, #1
    4b30:	0136      	lsls	r6, r6, #4
    4b32:	199e      	adds	r6, r3, r6
    4b34:	6015      	str	r5, [r2, #0]
    4b36:	6055      	str	r5, [r2, #4]
    4b38:	6095      	str	r5, [r2, #8]
    4b3a:	60d5      	str	r5, [r2, #12]
    4b3c:	3210      	adds	r2, #16
    4b3e:	4296      	cmp	r6, r2
    4b40:	d1f8      	bne.n	4b34 <memset+0x44>
    4b42:	220f      	movs	r2, #15
    4b44:	4397      	bics	r7, r2
    4b46:	3710      	adds	r7, #16
    4b48:	19db      	adds	r3, r3, r7
    4b4a:	4014      	ands	r4, r2
    4b4c:	2c03      	cmp	r4, #3
    4b4e:	d90d      	bls.n	4b6c <memset+0x7c>
    4b50:	001a      	movs	r2, r3
    4b52:	1f27      	subs	r7, r4, #4
    4b54:	08be      	lsrs	r6, r7, #2
    4b56:	3601      	adds	r6, #1
    4b58:	00b6      	lsls	r6, r6, #2
    4b5a:	199e      	adds	r6, r3, r6
    4b5c:	c220      	stmia	r2!, {r5}
    4b5e:	42b2      	cmp	r2, r6
    4b60:	d1fc      	bne.n	4b5c <memset+0x6c>
    4b62:	2203      	movs	r2, #3
    4b64:	4397      	bics	r7, r2
    4b66:	3704      	adds	r7, #4
    4b68:	19db      	adds	r3, r3, r7
    4b6a:	4014      	ands	r4, r2
    4b6c:	2c00      	cmp	r4, #0
    4b6e:	d005      	beq.n	4b7c <memset+0x8c>
    4b70:	b2c9      	uxtb	r1, r1
    4b72:	191c      	adds	r4, r3, r4
    4b74:	7019      	strb	r1, [r3, #0]
    4b76:	3301      	adds	r3, #1
    4b78:	429c      	cmp	r4, r3
    4b7a:	d1fb      	bne.n	4b74 <memset+0x84>
    4b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b7e:	0014      	movs	r4, r2
    4b80:	0003      	movs	r3, r0
    4b82:	e7c6      	b.n	4b12 <memset+0x22>

00004b84 <strlen>:
    4b84:	b510      	push	{r4, lr}
    4b86:	0783      	lsls	r3, r0, #30
    4b88:	d025      	beq.n	4bd6 <strlen+0x52>
    4b8a:	7803      	ldrb	r3, [r0, #0]
    4b8c:	2b00      	cmp	r3, #0
    4b8e:	d024      	beq.n	4bda <strlen+0x56>
    4b90:	0003      	movs	r3, r0
    4b92:	2103      	movs	r1, #3
    4b94:	e002      	b.n	4b9c <strlen+0x18>
    4b96:	781a      	ldrb	r2, [r3, #0]
    4b98:	2a00      	cmp	r2, #0
    4b9a:	d01a      	beq.n	4bd2 <strlen+0x4e>
    4b9c:	3301      	adds	r3, #1
    4b9e:	420b      	tst	r3, r1
    4ba0:	d1f9      	bne.n	4b96 <strlen+0x12>
    4ba2:	6819      	ldr	r1, [r3, #0]
    4ba4:	4a0e      	ldr	r2, [pc, #56]	; (4be0 <strlen+0x5c>)
    4ba6:	4c0f      	ldr	r4, [pc, #60]	; (4be4 <strlen+0x60>)
    4ba8:	188a      	adds	r2, r1, r2
    4baa:	438a      	bics	r2, r1
    4bac:	4222      	tst	r2, r4
    4bae:	d106      	bne.n	4bbe <strlen+0x3a>
    4bb0:	3304      	adds	r3, #4
    4bb2:	6819      	ldr	r1, [r3, #0]
    4bb4:	4a0a      	ldr	r2, [pc, #40]	; (4be0 <strlen+0x5c>)
    4bb6:	188a      	adds	r2, r1, r2
    4bb8:	438a      	bics	r2, r1
    4bba:	4222      	tst	r2, r4
    4bbc:	d0f8      	beq.n	4bb0 <strlen+0x2c>
    4bbe:	001a      	movs	r2, r3
    4bc0:	781b      	ldrb	r3, [r3, #0]
    4bc2:	2b00      	cmp	r3, #0
    4bc4:	d003      	beq.n	4bce <strlen+0x4a>
    4bc6:	3201      	adds	r2, #1
    4bc8:	7811      	ldrb	r1, [r2, #0]
    4bca:	2900      	cmp	r1, #0
    4bcc:	d1fb      	bne.n	4bc6 <strlen+0x42>
    4bce:	1a10      	subs	r0, r2, r0
    4bd0:	bd10      	pop	{r4, pc}
    4bd2:	1a18      	subs	r0, r3, r0
    4bd4:	e7fc      	b.n	4bd0 <strlen+0x4c>
    4bd6:	0003      	movs	r3, r0
    4bd8:	e7e3      	b.n	4ba2 <strlen+0x1e>
    4bda:	2000      	movs	r0, #0
    4bdc:	e7f8      	b.n	4bd0 <strlen+0x4c>
    4bde:	46c0      	nop			; (mov r8, r8)
    4be0:	fefefeff 	.word	0xfefefeff
    4be4:	80808080 	.word	0x80808080

00004be8 <__register_exitproc>:
    4be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bea:	464e      	mov	r6, r9
    4bec:	4645      	mov	r5, r8
    4bee:	46de      	mov	lr, fp
    4bf0:	4657      	mov	r7, sl
    4bf2:	b5e0      	push	{r5, r6, r7, lr}
    4bf4:	4d36      	ldr	r5, [pc, #216]	; (4cd0 <__register_exitproc+0xe8>)
    4bf6:	b083      	sub	sp, #12
    4bf8:	0006      	movs	r6, r0
    4bfa:	6828      	ldr	r0, [r5, #0]
    4bfc:	4698      	mov	r8, r3
    4bfe:	000f      	movs	r7, r1
    4c00:	4691      	mov	r9, r2
    4c02:	f000 f899 	bl	4d38 <__retarget_lock_acquire_recursive>
    4c06:	4b33      	ldr	r3, [pc, #204]	; (4cd4 <__register_exitproc+0xec>)
    4c08:	681c      	ldr	r4, [r3, #0]
    4c0a:	23a4      	movs	r3, #164	; 0xa4
    4c0c:	005b      	lsls	r3, r3, #1
    4c0e:	58e0      	ldr	r0, [r4, r3]
    4c10:	2800      	cmp	r0, #0
    4c12:	d052      	beq.n	4cba <__register_exitproc+0xd2>
    4c14:	6843      	ldr	r3, [r0, #4]
    4c16:	2b1f      	cmp	r3, #31
    4c18:	dc13      	bgt.n	4c42 <__register_exitproc+0x5a>
    4c1a:	1c5a      	adds	r2, r3, #1
    4c1c:	9201      	str	r2, [sp, #4]
    4c1e:	2e00      	cmp	r6, #0
    4c20:	d128      	bne.n	4c74 <__register_exitproc+0x8c>
    4c22:	9a01      	ldr	r2, [sp, #4]
    4c24:	3302      	adds	r3, #2
    4c26:	009b      	lsls	r3, r3, #2
    4c28:	6042      	str	r2, [r0, #4]
    4c2a:	501f      	str	r7, [r3, r0]
    4c2c:	6828      	ldr	r0, [r5, #0]
    4c2e:	f000 f885 	bl	4d3c <__retarget_lock_release_recursive>
    4c32:	2000      	movs	r0, #0
    4c34:	b003      	add	sp, #12
    4c36:	bc3c      	pop	{r2, r3, r4, r5}
    4c38:	4690      	mov	r8, r2
    4c3a:	4699      	mov	r9, r3
    4c3c:	46a2      	mov	sl, r4
    4c3e:	46ab      	mov	fp, r5
    4c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c42:	4b25      	ldr	r3, [pc, #148]	; (4cd8 <__register_exitproc+0xf0>)
    4c44:	2b00      	cmp	r3, #0
    4c46:	d03d      	beq.n	4cc4 <__register_exitproc+0xdc>
    4c48:	20c8      	movs	r0, #200	; 0xc8
    4c4a:	0040      	lsls	r0, r0, #1
    4c4c:	f7fb fc14 	bl	478 <malloc>
    4c50:	2800      	cmp	r0, #0
    4c52:	d037      	beq.n	4cc4 <__register_exitproc+0xdc>
    4c54:	22a4      	movs	r2, #164	; 0xa4
    4c56:	2300      	movs	r3, #0
    4c58:	0052      	lsls	r2, r2, #1
    4c5a:	58a1      	ldr	r1, [r4, r2]
    4c5c:	6043      	str	r3, [r0, #4]
    4c5e:	6001      	str	r1, [r0, #0]
    4c60:	50a0      	str	r0, [r4, r2]
    4c62:	3240      	adds	r2, #64	; 0x40
    4c64:	5083      	str	r3, [r0, r2]
    4c66:	3204      	adds	r2, #4
    4c68:	5083      	str	r3, [r0, r2]
    4c6a:	3301      	adds	r3, #1
    4c6c:	9301      	str	r3, [sp, #4]
    4c6e:	2300      	movs	r3, #0
    4c70:	2e00      	cmp	r6, #0
    4c72:	d0d6      	beq.n	4c22 <__register_exitproc+0x3a>
    4c74:	009a      	lsls	r2, r3, #2
    4c76:	4692      	mov	sl, r2
    4c78:	4482      	add	sl, r0
    4c7a:	464a      	mov	r2, r9
    4c7c:	2188      	movs	r1, #136	; 0x88
    4c7e:	4654      	mov	r4, sl
    4c80:	5062      	str	r2, [r4, r1]
    4c82:	22c4      	movs	r2, #196	; 0xc4
    4c84:	0052      	lsls	r2, r2, #1
    4c86:	4691      	mov	r9, r2
    4c88:	4481      	add	r9, r0
    4c8a:	464a      	mov	r2, r9
    4c8c:	3987      	subs	r1, #135	; 0x87
    4c8e:	4099      	lsls	r1, r3
    4c90:	6812      	ldr	r2, [r2, #0]
    4c92:	468b      	mov	fp, r1
    4c94:	430a      	orrs	r2, r1
    4c96:	4694      	mov	ip, r2
    4c98:	464a      	mov	r2, r9
    4c9a:	4661      	mov	r1, ip
    4c9c:	6011      	str	r1, [r2, #0]
    4c9e:	2284      	movs	r2, #132	; 0x84
    4ca0:	4641      	mov	r1, r8
    4ca2:	0052      	lsls	r2, r2, #1
    4ca4:	50a1      	str	r1, [r4, r2]
    4ca6:	2e02      	cmp	r6, #2
    4ca8:	d1bb      	bne.n	4c22 <__register_exitproc+0x3a>
    4caa:	0002      	movs	r2, r0
    4cac:	465c      	mov	r4, fp
    4cae:	328d      	adds	r2, #141	; 0x8d
    4cb0:	32ff      	adds	r2, #255	; 0xff
    4cb2:	6811      	ldr	r1, [r2, #0]
    4cb4:	430c      	orrs	r4, r1
    4cb6:	6014      	str	r4, [r2, #0]
    4cb8:	e7b3      	b.n	4c22 <__register_exitproc+0x3a>
    4cba:	0020      	movs	r0, r4
    4cbc:	304d      	adds	r0, #77	; 0x4d
    4cbe:	30ff      	adds	r0, #255	; 0xff
    4cc0:	50e0      	str	r0, [r4, r3]
    4cc2:	e7a7      	b.n	4c14 <__register_exitproc+0x2c>
    4cc4:	6828      	ldr	r0, [r5, #0]
    4cc6:	f000 f839 	bl	4d3c <__retarget_lock_release_recursive>
    4cca:	2001      	movs	r0, #1
    4ccc:	4240      	negs	r0, r0
    4cce:	e7b1      	b.n	4c34 <__register_exitproc+0x4c>
    4cd0:	20000498 	.word	0x20000498
    4cd4:	00004f90 	.word	0x00004f90
    4cd8:	00000479 	.word	0x00000479

00004cdc <register_fini>:
    4cdc:	4b03      	ldr	r3, [pc, #12]	; (4cec <register_fini+0x10>)
    4cde:	b510      	push	{r4, lr}
    4ce0:	2b00      	cmp	r3, #0
    4ce2:	d002      	beq.n	4cea <register_fini+0xe>
    4ce4:	4802      	ldr	r0, [pc, #8]	; (4cf0 <register_fini+0x14>)
    4ce6:	f000 f805 	bl	4cf4 <atexit>
    4cea:	bd10      	pop	{r4, pc}
    4cec:	00000000 	.word	0x00000000
    4cf0:	00004d05 	.word	0x00004d05

00004cf4 <atexit>:
    4cf4:	b510      	push	{r4, lr}
    4cf6:	0001      	movs	r1, r0
    4cf8:	2300      	movs	r3, #0
    4cfa:	2200      	movs	r2, #0
    4cfc:	2000      	movs	r0, #0
    4cfe:	f7ff ff73 	bl	4be8 <__register_exitproc>
    4d02:	bd10      	pop	{r4, pc}

00004d04 <__libc_fini_array>:
    4d04:	b570      	push	{r4, r5, r6, lr}
    4d06:	4b09      	ldr	r3, [pc, #36]	; (4d2c <__libc_fini_array+0x28>)
    4d08:	4c09      	ldr	r4, [pc, #36]	; (4d30 <__libc_fini_array+0x2c>)
    4d0a:	1ae4      	subs	r4, r4, r3
    4d0c:	10a4      	asrs	r4, r4, #2
    4d0e:	d009      	beq.n	4d24 <__libc_fini_array+0x20>
    4d10:	4a08      	ldr	r2, [pc, #32]	; (4d34 <__libc_fini_array+0x30>)
    4d12:	18a5      	adds	r5, r4, r2
    4d14:	00ad      	lsls	r5, r5, #2
    4d16:	18ed      	adds	r5, r5, r3
    4d18:	682b      	ldr	r3, [r5, #0]
    4d1a:	3c01      	subs	r4, #1
    4d1c:	4798      	blx	r3
    4d1e:	3d04      	subs	r5, #4
    4d20:	2c00      	cmp	r4, #0
    4d22:	d1f9      	bne.n	4d18 <__libc_fini_array+0x14>
    4d24:	f000 f948 	bl	4fb8 <_fini>
    4d28:	bd70      	pop	{r4, r5, r6, pc}
    4d2a:	46c0      	nop			; (mov r8, r8)
    4d2c:	00004fc4 	.word	0x00004fc4
    4d30:	00004fc8 	.word	0x00004fc8
    4d34:	3fffffff 	.word	0x3fffffff

00004d38 <__retarget_lock_acquire_recursive>:
    4d38:	4770      	bx	lr
    4d3a:	46c0      	nop			; (mov r8, r8)

00004d3c <__retarget_lock_release_recursive>:
    4d3c:	4770      	bx	lr
    4d3e:	46c0      	nop			; (mov r8, r8)

00004d40 <_ZTV6Stream>:
	...
    4d48:	047d 0000 0a55 0000 0115 0000 0119 0000     }...U...........
    4d58:	047d 0000 047d 0000 047d 0000               }...}...}...

00004d64 <_ZTV9CDC_Class>:
	...
    4d6c:	016f 0000 02a5 0000 0115 0000 0241 0000     o...........A...
    4d7c:	018d 0000 0219 0000 0145 0000 01f9 0000     ........E.......
    4d8c:	0251 0000 025d 0000 08f0 0000 0900 0000     Q...]...........
    4d9c:	090c 0000 091e 0000 08ea 0000 08ea 0000     ................
    4dac:	0944 0000 0954 0000 08ea 0000 08ea 0000     D...T...........
    4dbc:	0932 0000 0964 0000 0964 0000 08ea 0000     2...d...d.......
    4dcc:	5043 2055 6553 6972 6c61 203a 0000 0000     CPU Serial: ....
    4ddc:	7830 2e25 5838 0000 0a0d 0000 616e 006e     0x%.8X......nan.
    4dec:	6e69 0066 766f 0066                         inf.ovf.

00004df4 <defaultPreferences>:
    4df4:	00fa 0000 0032 0000                         ....2...

00004dfc <defaultParameters>:
    4dfc:	005a 0000 2e2e 682f 6c61 732f 6372 682f     Z...../hal/src/h
    4e0c:	6c61 635f 6c61 6e65 6164 2e72 0063 0000     al_calendar.c...
    4e1c:	2e2e 682f 6c61 732f 6372 682f 6c61 695f     ../hal/src/hal_i
    4e2c:	2e6f 0063 2e2e 682f 6c61 732f 6372 682f     o.c.../hal/src/h
    4e3c:	6c61 735f 6970 6d5f 735f 6e79 2e63 0063     al_spi_m_sync.c.
    4e4c:	2e2e 682f 6c61 732f 6372 682f 6c61 745f     ../hal/src/hal_t
    4e5c:	6d69 7265 632e 0000 2e2e 682f 6c61 752f     imer.c..../hal/u
    4e6c:	6974 736c 732f 6372 752f 6974 736c 6c5f     tils/src/utils_l
    4e7c:	7369 2e74 0063 0000 2e2e 682f 6c70 722f     ist.c...../hpl/r
    4e8c:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
    4e9c:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
    4eac:	5f6c 6573 6372 6d6f 632e 0000               l_sercom.c..

00004eb8 <_tcs>:
    4eb8:	0003 0368 0000 0000 0000 0000 007d 0000     ..h.........}...
    4ec8:	0000 0000 0004 0368 0000 0000 0000 0000     ......h.........
    4ed8:	007d 0000 0000 0000 0005 0368 0000 0000     }.........h.....
    4ee8:	0000 0000 007d 0000 0000 0000 2e2e 682f     ....}........./h
    4ef8:	6c70 742f 2f63 7068 5f6c 6374 632e 0000     pl/tc/hpl_tc.c..
    4f08:	2000 0000                                   . ..

00004f0c <_usb_ep_cfgs>:
    4f0c:	0acc 2000 0000 0000 0040 0000 0a8c 2000     ... ....@...... 
    4f1c:	0a4c 2000 0040 0040 0a0c 2000 09cc 2000     L.. @.@.... ... 
    4f2c:	0040 0040 098c 2000 094c 2000 0040 0040     @.@.... L.. @.@.
    4f3c:	090c 2000 0000 0000 0040 0000 4630 0000     ... ....@...0F..
    4f4c:	4318 0000 4630 0000 434a 0000 4630 0000     .C..0F..JC..0F..
    4f5c:	426e 0000 4630 0000 4630 0000 4630 0000     nB..0F..0F..0F..
    4f6c:	4282 0000 4630 0000 437e 0000 2e2e 752f     .B..0F..~C..../u
    4f7c:	6273 642f 7665 6369 2f65 7375 6462 2e63     sb/device/usbdc.
    4f8c:	0063 0000                                   c...

00004f90 <_global_impure_ptr>:
    4f90:	0070 2000                                   p.. 

00004f94 <_init>:
    4f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f96:	46c0      	nop			; (mov r8, r8)
    4f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4f9a:	bc08      	pop	{r3}
    4f9c:	469e      	mov	lr, r3
    4f9e:	4770      	bx	lr

00004fa0 <__init_array_start>:
    4fa0:	00004cdd 	.word	0x00004cdd

00004fa4 <__frame_dummy_init_array_entry>:
    4fa4:	000000dd 00000365 00000ded 00000e79     ....e.......y...
    4fb4:	00001121                                !...

00004fb8 <_fini>:
    4fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fba:	46c0      	nop			; (mov r8, r8)
    4fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4fbe:	bc08      	pop	{r3}
    4fc0:	469e      	mov	lr, r3
    4fc2:	4770      	bx	lr

00004fc4 <__fini_array_start>:
    4fc4:	000000b5 	.word	0x000000b5
