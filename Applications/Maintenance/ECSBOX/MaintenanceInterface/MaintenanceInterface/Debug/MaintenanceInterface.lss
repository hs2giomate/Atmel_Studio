
MaintenanceInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001bc9c  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001bc9c  0001bc9c  0002bc9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a44  20000000  0001bca4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00030a44  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00030a44  2**0
                  CONTENTS
  5 .bss          0000d738  20000a48  0001c6f0  00030a48  2**3
                  ALLOC
  6 .stack        00010000  2000e180  00029e28  00030a48  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00030a44  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00030a72  2**0
                  CONTENTS, READONLY
  9 .debug_info   000f32b9  00000000  00000000  00030acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00014498  00000000  00000000  00123d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00027380  00000000  00000000  0013821c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00004578  00000000  00000000  0015f59c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000040a8  00000000  00000000  00163b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00069a2e  00000000  00000000  00167bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000692dd  00000000  00000000  001d15ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001507db  00000000  00000000  0023a8c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000116c4  00000000  00000000  0038b0a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 e1 01 20 6d 0c 00 00 69 0c 00 00 69 0c 00 00     ... m...i...i...
      10:	69 0c 00 00 69 0c 00 00 69 0c 00 00 00 00 00 00     i...i...i.......
	...
      2c:	69 0c 00 00 69 0c 00 00 00 00 00 00 69 0c 00 00     i...i.......i...
      3c:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
      4c:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
      5c:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
      6c:	29 79 00 00 d1 65 00 00 e1 65 00 00 69 0c 00 00     )y...e...e..i...
      7c:	f1 65 00 00 01 66 00 00 11 66 00 00 21 66 00 00     .e...f...f..!f..
      8c:	31 66 00 00 41 66 00 00 51 66 00 00 69 0c 00 00     1f..Af..Qf..i...
      9c:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
      ac:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
      bc:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
      cc:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
      dc:	69 0c 00 00 69 0c 00 00 69 0c 00 00 00 00 00 00     i...i...i.......
	...
      f4:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     104:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     114:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     124:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     134:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     144:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     154:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     164:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     174:	69 0c 00 00 69 0c 00 00 15 5a 00 00 95 c9 00 00     i...i....Z......
     184:	a5 c9 00 00 b5 c9 00 00 c5 c9 00 00 69 0c 00 00     ............i...
     194:	d5 93 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     ....i...i...i...
     1a4:	69 0c 00 00 69 0c 00 00 69 0c 00 00 f1 93 00 00     i...i...i.......
     1b4:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     1c4:	0d 94 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     ....i...i...i...
     1d4:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     1e4:	69 0c 00 00 69 0c 00 00 91 a0 00 00 69 0c 00 00     i...i.......i...
     1f4:	ad a0 00 00 69 0c 00 00 c9 a0 00 00 e5 a0 00 00     ....i...........
     204:	01 a1 00 00 1d a1 00 00 69 0c 00 00 69 0c 00 00     ........i...i...
     214:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     224:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     234:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     244:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     254:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000a48 	.word	0x20000a48
     280:	00000000 	.word	0x00000000
     284:	0001bca4 	.word	0x0001bca4

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001bca4 	.word	0x0001bca4
     2c4:	20000a4c 	.word	0x20000a4c
     2c8:	0001bca4 	.word	0x0001bca4
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN16Commands_HandlerC2Ev>:

static uint8_t  local_memory_block[QSPI_ERBLK];
static uint32_t local_last_read_stack;

// default constructor
Commands_Handler::Commands_Handler()
     2d0:	b470      	push	{r4, r5, r6}
     2d2:	680a      	ldr	r2, [r1, #0]
     2d4:	6002      	str	r2, [r0, #0]
    kGAINCommandSetNSDData,             //!< Editing NSD data
    kGAINCommandSetNSDDataBlock,        //!< Editing NSD data in data blocks (see NSD communication: Data blockes are tranmitted to GNC)
    kGAINCommandSetView,                 //!< Enables simplified view or standard view (only 932/933)
	kGAINNumberOfCommands
	};
 struct __attribute__((__packed__)) HVACMessageHeader
     2d6:	2200      	movs	r2, #0
     2d8:	2664      	movs	r6, #100	; 0x64
     2da:	7106      	strb	r6, [r0, #4]
     2dc:	2563      	movs	r5, #99	; 0x63
     2de:	7145      	strb	r5, [r0, #5]
     2e0:	2462      	movs	r4, #98	; 0x62
     2e2:	7184      	strb	r4, [r0, #6]
     2e4:	2161      	movs	r1, #97	; 0x61
     2e6:	71c1      	strb	r1, [r0, #7]
     2e8:	7242      	strb	r2, [r0, #9]
     2ea:	7406      	strb	r6, [r0, #16]
     2ec:	7445      	strb	r5, [r0, #17]
     2ee:	7484      	strb	r4, [r0, #18]
     2f0:	74c1      	strb	r1, [r0, #19]
     2f2:	7542      	strb	r2, [r0, #21]
     2f4:	f880 6084 	strb.w	r6, [r0, #132]	; 0x84
     2f8:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
     2fc:	f880 4086 	strb.w	r4, [r0, #134]	; 0x86
     300:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
     304:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
{
	last_logger_array_stack=&local_last_read_stack;
     308:	4a02      	ldr	r2, [pc, #8]	; (314 <_ZN16Commands_HandlerC2Ev+0x44>)
     30a:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
} //Commands_Handler
     30e:	bc70      	pop	{r4, r5, r6}
     310:	4770      	bx	lr
     312:	bf00      	nop
     314:	20000a64 	.word	0x20000a64

00000318 <_ZN16Commands_HandlerD2Ev>:

// default destructor
Commands_Handler::~Commands_Handler()
     318:	680b      	ldr	r3, [r1, #0]
     31a:	6003      	str	r3, [r0, #0]
{
} //~Commands_Handler
     31c:	4770      	bx	lr
	...

00000320 <_ZN16Commands_Handler18InitCommandHandlerEPh>:

void Commands_Handler::InitCommandHandler(uint8_t * buffer){
	usbMessageBuffer=buffer;
     320:	60c1      	str	r1, [r0, #12]
	memory_block=local_memory_block;
     322:	4b02      	ldr	r3, [pc, #8]	; (32c <_ZN16Commands_Handler18InitCommandHandlerEPh+0xc>)
     324:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
     328:	4770      	bx	lr
     32a:	bf00      	nop
     32c:	20000a68 	.word	0x20000a68

00000330 <_ZN16Commands_Handler13SetEnableFan1Eh>:
	}
	return SetEnableFan1(data);
	
}

uint8_t Commands_Handler::SetEnableFan1(uint8_t data){
     330:	b510      	push	{r4, lr}
     332:	460c      	mov	r4, r1
	if ((data&(0x01))>0)
     334:	f011 0f01 	tst.w	r1, #1
	{
		fans.evaporator[0]->SetEnable(true);
     338:	bf14      	ite	ne
     33a:	2101      	movne	r1, #1
	}
	else
	{
		fans.evaporator[0]->SetEnable(false);
     33c:	2100      	moveq	r1, #0
     33e:	4b03      	ldr	r3, [pc, #12]	; (34c <_ZN16Commands_Handler13SetEnableFan1Eh+0x1c>)
     340:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     342:	4b03      	ldr	r3, [pc, #12]	; (350 <_ZN16Commands_Handler13SetEnableFan1Eh+0x20>)
     344:	4798      	blx	r3
	}
	return data;
}
     346:	4620      	mov	r0, r4
     348:	bd10      	pop	{r4, pc}
     34a:	bf00      	nop
     34c:	20003758 	.word	0x20003758
     350:	000115d5 	.word	0x000115d5

00000354 <_ZN16Commands_Handler13SetEnableFan2Eh>:
uint8_t	Commands_Handler::SetEnableFan2(uint8_t data){
     354:	b538      	push	{r3, r4, r5, lr}
     356:	4605      	mov	r5, r0
     358:	460c      	mov	r4, r1
	if ((data&(0x02))>0){
     35a:	f011 0f02 	tst.w	r1, #2
		fans.evaporator[1]->SetEnable(true);
     35e:	bf14      	ite	ne
     360:	2101      	movne	r1, #1
		fans.evaporator[1]->SetEnable(false);
     362:	2100      	moveq	r1, #0
     364:	4b04      	ldr	r3, [pc, #16]	; (378 <_ZN16Commands_Handler13SetEnableFan2Eh+0x24>)
     366:	6e18      	ldr	r0, [r3, #96]	; 0x60
     368:	4b04      	ldr	r3, [pc, #16]	; (37c <_ZN16Commands_Handler13SetEnableFan2Eh+0x28>)
     36a:	4798      	blx	r3
	return SetEnableFan1(data);
     36c:	4621      	mov	r1, r4
     36e:	4628      	mov	r0, r5
     370:	4b03      	ldr	r3, [pc, #12]	; (380 <_ZN16Commands_Handler13SetEnableFan2Eh+0x2c>)
     372:	4798      	blx	r3
}
     374:	bd38      	pop	{r3, r4, r5, pc}
     376:	bf00      	nop
     378:	20003758 	.word	0x20003758
     37c:	000115d5 	.word	0x000115d5
     380:	00000331 	.word	0x00000331

00000384 <_ZN16Commands_Handler19SetEnableCondesatorEh>:
uint8_t Commands_Handler::SetEnableCondesator(uint8_t data){
     384:	b538      	push	{r3, r4, r5, lr}
     386:	4605      	mov	r5, r0
     388:	460c      	mov	r4, r1
	if ((data&(0x04))>0)
     38a:	f011 0f04 	tst.w	r1, #4
		fans.condesator->SetEnable(true);
     38e:	bf14      	ite	ne
     390:	2101      	movne	r1, #1
		fans.condesator->SetEnable(false);
     392:	2100      	moveq	r1, #0
     394:	4b04      	ldr	r3, [pc, #16]	; (3a8 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x24>)
     396:	6e58      	ldr	r0, [r3, #100]	; 0x64
     398:	4b04      	ldr	r3, [pc, #16]	; (3ac <_ZN16Commands_Handler19SetEnableCondesatorEh+0x28>)
     39a:	4798      	blx	r3
	return SetEnableFan2(data);
     39c:	4621      	mov	r1, r4
     39e:	4628      	mov	r0, r5
     3a0:	4b03      	ldr	r3, [pc, #12]	; (3b0 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x2c>)
     3a2:	4798      	blx	r3
}
     3a4:	bd38      	pop	{r3, r4, r5, pc}
     3a6:	bf00      	nop
     3a8:	20003758 	.word	0x20003758
     3ac:	00011219 	.word	0x00011219
     3b0:	00000355 	.word	0x00000355

000003b4 <_ZN16Commands_Handler20CommandSetEnableFansEv>:
bool Commands_Handler::CommandSetEnableFans(void){
     3b4:	b510      	push	{r4, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     3b6:	68c3      	ldr	r3, [r0, #12]
     3b8:	6819      	ldr	r1, [r3, #0]
     3ba:	6041      	str	r1, [r0, #4]
     3bc:	8899      	ldrh	r1, [r3, #4]
     3be:	799b      	ldrb	r3, [r3, #6]
     3c0:	8101      	strh	r1, [r0, #8]
     3c2:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandSetEnableFans);
     3c4:	7a43      	ldrb	r3, [r0, #9]
     3c6:	2b4b      	cmp	r3, #75	; 0x4b
     3c8:	bf0c      	ite	eq
     3ca:	2401      	moveq	r4, #1
     3cc:	2400      	movne	r4, #0
	if (result){
     3ce:	d001      	beq.n	3d4 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x20>
}
     3d0:	4620      	mov	r0, r4
     3d2:	bd10      	pop	{r4, pc}
		SetEnableCondesator(data);
     3d4:	7a81      	ldrb	r1, [r0, #10]
     3d6:	4b01      	ldr	r3, [pc, #4]	; (3dc <_ZN16Commands_Handler20CommandSetEnableFansEv+0x28>)
     3d8:	4798      	blx	r3
     3da:	e7f9      	b.n	3d0 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x1c>
     3dc:	00000385 	.word	0x00000385

000003e0 <_ZN16Commands_Handler17CommandSetPWMFansEv>:

bool Commands_Handler::CommandSetPWMFans(void){
     3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	uint8_t		*data=data_fans_array;
	
	
	//memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
	memcpy(&message64,usbMessageBuffer,64);
     3e2:	68c3      	ldr	r3, [r0, #12]
     3e4:	f100 0210 	add.w	r2, r0, #16
     3e8:	f103 0140 	add.w	r1, r3, #64	; 0x40
     3ec:	681f      	ldr	r7, [r3, #0]
     3ee:	685e      	ldr	r6, [r3, #4]
     3f0:	689d      	ldr	r5, [r3, #8]
     3f2:	68dc      	ldr	r4, [r3, #12]
     3f4:	6017      	str	r7, [r2, #0]
     3f6:	6056      	str	r6, [r2, #4]
     3f8:	6095      	str	r5, [r2, #8]
     3fa:	60d4      	str	r4, [r2, #12]
     3fc:	3310      	adds	r3, #16
     3fe:	3210      	adds	r2, #16
     400:	428b      	cmp	r3, r1
     402:	d1f3      	bne.n	3ec <_ZN16Commands_Handler17CommandSetPWMFansEv+0xc>
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task ==	kHVACCommandSetPWMFans);
     404:	7d43      	ldrb	r3, [r0, #21]
     406:	2b4c      	cmp	r3, #76	; 0x4c
     408:	bf0c      	ite	eq
     40a:	2501      	moveq	r5, #1
     40c:	2500      	movne	r5, #0
	if (result){
     40e:	d112      	bne.n	436 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x56>
     410:	4604      	mov	r4, r0
		data=message64.content;
		if (data[0]>0)
     412:	7d81      	ldrb	r1, [r0, #22]
     414:	b119      	cbz	r1, 41e <_ZN16Commands_Handler17CommandSetPWMFansEv+0x3e>
		{
			fans.evaporator[0]->SetPWM(data[0]);
     416:	4b09      	ldr	r3, [pc, #36]	; (43c <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     418:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     41a:	4b09      	ldr	r3, [pc, #36]	; (440 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x60>)
     41c:	4798      	blx	r3
			
		}

		if (data[1]>0){
     41e:	7de1      	ldrb	r1, [r4, #23]
     420:	b119      	cbz	r1, 42a <_ZN16Commands_Handler17CommandSetPWMFansEv+0x4a>
			fans.evaporator[1]->SetPWM(data[1]);
     422:	4b06      	ldr	r3, [pc, #24]	; (43c <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     424:	6e18      	ldr	r0, [r3, #96]	; 0x60
     426:	4b06      	ldr	r3, [pc, #24]	; (440 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x60>)
     428:	4798      	blx	r3
		}
		if (data[2]>0){
     42a:	7e21      	ldrb	r1, [r4, #24]
     42c:	b119      	cbz	r1, 436 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x56>
			fans.condesator->SetPWM(data[2]);
     42e:	4b03      	ldr	r3, [pc, #12]	; (43c <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     430:	6e58      	ldr	r0, [r3, #100]	; 0x64
     432:	4b04      	ldr	r3, [pc, #16]	; (444 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x64>)
     434:	4798      	blx	r3
		

	}
	
	return result;
}
     436:	4628      	mov	r0, r5
     438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     43a:	bf00      	nop
     43c:	20003758 	.word	0x20003758
     440:	000115f9 	.word	0x000115f9
     444:	00011231 	.word	0x00011231

00000448 <_ZN16Commands_Handler22CommandSetFlapperValveEv>:
	}
	
	return result;
}

bool  Commands_Handler::CommandSetFlapperValve(void){
     448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}


	uint8_t	data=0;
	
	memcpy(&message64,usbMessageBuffer,64);
     44c:	68c3      	ldr	r3, [r0, #12]
     44e:	f100 0210 	add.w	r2, r0, #16
     452:	f103 0140 	add.w	r1, r3, #64	; 0x40
     456:	681f      	ldr	r7, [r3, #0]
     458:	685e      	ldr	r6, [r3, #4]
     45a:	689d      	ldr	r5, [r3, #8]
     45c:	68dc      	ldr	r4, [r3, #12]
     45e:	6017      	str	r7, [r2, #0]
     460:	6056      	str	r6, [r2, #4]
     462:	6095      	str	r5, [r2, #8]
     464:	60d4      	str	r4, [r2, #12]
     466:	3310      	adds	r3, #16
     468:	3210      	adds	r2, #16
     46a:	428b      	cmp	r3, r1
     46c:	d1f3      	bne.n	456 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0xe>
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task == kHVACCommandFlapperValve);
     46e:	7d43      	ldrb	r3, [r0, #21]
     470:	2b4f      	cmp	r3, #79	; 0x4f
     472:	bf0c      	ite	eq
     474:	2701      	moveq	r7, #1
     476:	2700      	movne	r7, #0
	if (result){
     478:	d002      	beq.n	480 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x38>
	}else{

	}
	
	return result;
}
     47a:	4638      	mov	r0, r7
     47c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     480:	4e0c      	ldr	r6, [pc, #48]	; (4b4 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x6c>)
     482:	f100 0516 	add.w	r5, r0, #22
     486:	f100 0418 	add.w	r4, r0, #24
					flapper.valve[i]->StopControlling();
     48a:	f8df 902c 	ldr.w	r9, [pc, #44]	; 4b8 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x70>
					flapper.valve[i]->StartControlling() ;
     48e:	f8df 802c 	ldr.w	r8, [pc, #44]	; 4bc <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x74>
     492:	e003      	b.n	49c <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x54>
     494:	47c0      	blx	r8
     496:	3501      	adds	r5, #1
		for (int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     498:	42a5      	cmp	r5, r4
     49a:	d0ee      	beq.n	47a <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x32>
			if (flapper.valve[i]->isOK)
     49c:	f856 0b04 	ldr.w	r0, [r6], #4
     4a0:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
     4a4:	2b00      	cmp	r3, #0
     4a6:	d0f6      	beq.n	496 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x4e>
				if ((data&(0x01))>0)
     4a8:	782b      	ldrb	r3, [r5, #0]
     4aa:	f013 0f01 	tst.w	r3, #1
     4ae:	d1f1      	bne.n	494 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x4c>
					flapper.valve[i]->StopControlling();
     4b0:	47c8      	blx	r9
     4b2:	e7f0      	b.n	496 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x4e>
     4b4:	200053f0 	.word	0x200053f0
     4b8:	00012e55 	.word	0x00012e55
     4bc:	00013039 	.word	0x00013039

000004c0 <_ZN16Commands_Handler25CommandSetFlapperPositionEv>:

bool  Commands_Handler::CommandSetFlapperPosition(void){
     4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}


	uint8_t	data=0;
	
	memcpy(&message64,usbMessageBuffer,64);
     4c4:	68c3      	ldr	r3, [r0, #12]
     4c6:	f100 0210 	add.w	r2, r0, #16
     4ca:	f103 0140 	add.w	r1, r3, #64	; 0x40
     4ce:	681f      	ldr	r7, [r3, #0]
     4d0:	685e      	ldr	r6, [r3, #4]
     4d2:	689d      	ldr	r5, [r3, #8]
     4d4:	68dc      	ldr	r4, [r3, #12]
     4d6:	6017      	str	r7, [r2, #0]
     4d8:	6056      	str	r6, [r2, #4]
     4da:	6095      	str	r5, [r2, #8]
     4dc:	60d4      	str	r4, [r2, #12]
     4de:	3310      	adds	r3, #16
     4e0:	3210      	adds	r2, #16
     4e2:	428b      	cmp	r3, r1
     4e4:	d1f3      	bne.n	4ce <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0xe>
	

	bool	result(message64.header.task == kHVACWriteSetpointFlapperValve);
     4e6:	7d43      	ldrb	r3, [r0, #21]
     4e8:	2b50      	cmp	r3, #80	; 0x50
     4ea:	bf0c      	ite	eq
     4ec:	2701      	moveq	r7, #1
     4ee:	2700      	movne	r7, #0
	if (result){
     4f0:	d002      	beq.n	4f8 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x38>
	}else{

	}
	
	return result;
}
     4f2:	4638      	mov	r0, r7
     4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     4f8:	4d0f      	ldr	r5, [pc, #60]	; (538 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x78>)
     4fa:	f100 0616 	add.w	r6, r0, #22
     4fe:	f100 0418 	add.w	r4, r0, #24
				flapper.valve[i]->doPeriodicTask=false;
     502:	f04f 0900 	mov.w	r9, #0
					flapper.valve[i]->StartControlling(data);
     506:	f8df a034 	ldr.w	sl, [pc, #52]	; 53c <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x7c>
     50a:	e007      	b.n	51c <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x5c>
				flapper.valve[i]->doPeriodicTask=false;
     50c:	f8d8 3000 	ldr.w	r3, [r8]
     510:	f883 9079 	strb.w	r9, [r3, #121]	; 0x79
     514:	3504      	adds	r5, #4
     516:	3601      	adds	r6, #1
		for ( int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     518:	42a6      	cmp	r6, r4
     51a:	d0ea      	beq.n	4f2 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x32>
     51c:	46a8      	mov	r8, r5
			if (flapper.valve[i]->isOK)
     51e:	6828      	ldr	r0, [r5, #0]
     520:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
     524:	2b00      	cmp	r3, #0
     526:	d0f5      	beq.n	514 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x54>
				if (flapper.valve[i]->controllerEnabled)
     528:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
     52c:	2b00      	cmp	r3, #0
     52e:	d0ed      	beq.n	50c <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x4c>
					flapper.valve[i]->StartControlling(data);
     530:	7831      	ldrb	r1, [r6, #0]
     532:	47d0      	blx	sl
     534:	e7ea      	b.n	50c <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x4c>
     536:	bf00      	nop
     538:	200053f0 	.word	0x200053f0
     53c:	00012e99 	.word	0x00012e99

00000540 <_ZN16Commands_Handler22CommandWriteParametersEv>:


	
	return result;
}
bool Commands_Handler::CommandWriteParameters(void){
     540:	b510      	push	{r4, lr}

	uint32_t	w,r;
	int n=sizeof(HVACMessageHeader);
	HVACMessageHeader hm;
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     542:	68c3      	ldr	r3, [r0, #12]
     544:	6819      	ldr	r1, [r3, #0]
     546:	6041      	str	r1, [r0, #4]
     548:	889c      	ldrh	r4, [r3, #4]
     54a:	7999      	ldrb	r1, [r3, #6]
     54c:	8104      	strh	r4, [r0, #8]
     54e:	7281      	strb	r1, [r0, #10]
	
	bool	result(singleTaskMessage.header.task == kGAINCommandWriteParameters);
	if (result){
     550:	7a42      	ldrb	r2, [r0, #9]
     552:	2a47      	cmp	r2, #71	; 0x47
     554:	d001      	beq.n	55a <_ZN16Commands_Handler22CommandWriteParametersEv+0x1a>
	bool	result(singleTaskMessage.header.task == kGAINCommandWriteParameters);
     556:	2000      	movs	r0, #0
		}else{

	}
	
	return result;
}
     558:	bd10      	pop	{r4, pc}
		memcpy((uint8_t*)&parameters,&usbMessageBuffer[n],sizeof(UserParameters));
     55a:	88db      	ldrh	r3, [r3, #6]
     55c:	4601      	mov	r1, r0
     55e:	f821 3f63 	strh.w	r3, [r1, #99]!
		r=memory.SaveParameters(parameters);
     562:	4803      	ldr	r0, [pc, #12]	; (570 <_ZN16Commands_Handler22CommandWriteParametersEv+0x30>)
     564:	4b03      	ldr	r3, [pc, #12]	; (574 <_ZN16Commands_Handler22CommandWriteParametersEv+0x34>)
     566:	4798      	blx	r3
		result=(bool)(r==0);
     568:	fab0 f080 	clz	r0, r0
     56c:	0940      	lsrs	r0, r0, #5
     56e:	bd10      	pop	{r4, pc}
     570:	20006a98 	.word	0x20006a98
     574:	000141e5 	.word	0x000141e5

00000578 <_ZN16Commands_Handler17CommandSetHeatersEv>:
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
		
	}
	return result;
}
bool Commands_Handler::CommandSetHeaters(void){
     578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}


	
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     57c:	68c3      	ldr	r3, [r0, #12]
     57e:	6819      	ldr	r1, [r3, #0]
     580:	6041      	str	r1, [r0, #4]
     582:	8899      	ldrh	r1, [r3, #4]
     584:	799b      	ldrb	r3, [r3, #6]
     586:	8101      	strh	r1, [r0, #8]
     588:	7283      	strb	r3, [r0, #10]
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(singleTaskMessage.header.task == kHVACCommandSetHeaters);
     58a:	7a43      	ldrb	r3, [r0, #9]
     58c:	2b49      	cmp	r3, #73	; 0x49
     58e:	bf0c      	ite	eq
     590:	f04f 0a01 	moveq.w	sl, #1
     594:	f04f 0a00 	movne.w	sl, #0
	if (result){
     598:	d002      	beq.n	5a0 <_ZN16Commands_Handler17CommandSetHeatersEv+0x28>
			
		}
	}
	
	return result;
}
     59a:	4650      	mov	r0, sl
     59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		lastEnableHeaters=enableHeaters;
     5a0:	f890 2067 	ldrb.w	r2, [r0, #103]	; 0x67
     5a4:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
		enableHeaters=singleTaskMessage.description;
     5a8:	7a83      	ldrb	r3, [r0, #10]
     5aa:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
		if (enableHeaters!=lastEnableHeaters)
     5ae:	429a      	cmp	r2, r3
     5b0:	d0f3      	beq.n	59a <_ZN16Commands_Handler17CommandSetHeatersEv+0x22>
     5b2:	4605      	mov	r5, r0
     5b4:	2600      	movs	r6, #0
					heaters.module[j]->SetRelay(i,powerOn);
     5b6:	f8df 9030 	ldr.w	r9, [pc, #48]	; 5e8 <_ZN16Commands_Handler17CommandSetHeatersEv+0x70>
     5ba:	f8df 8030 	ldr.w	r8, [pc, #48]	; 5ec <_ZN16Commands_Handler17CommandSetHeatersEv+0x74>
     5be:	2400      	movs	r4, #0
     5c0:	eb06 0709 	add.w	r7, r6, r9
					powerOn=enableHeaters&(0x01<<(i+4*j));
     5c4:	f895 2067 	ldrb.w	r2, [r5, #103]	; 0x67
     5c8:	1933      	adds	r3, r6, r4
     5ca:	411a      	asrs	r2, r3
     5cc:	f002 0201 	and.w	r2, r2, #1
     5d0:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
					heaters.module[j]->SetRelay(i,powerOn);
     5d4:	b2e1      	uxtb	r1, r4
     5d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
     5d8:	47c0      	blx	r8
     5da:	3401      	adds	r4, #1
				for (uint8_t i = 0; i < 4; i++)
     5dc:	2c04      	cmp	r4, #4
     5de:	d1f1      	bne.n	5c4 <_ZN16Commands_Handler17CommandSetHeatersEv+0x4c>
     5e0:	3604      	adds	r6, #4
			for (uint8_t j = 0; j < 2; j++)
     5e2:	2e08      	cmp	r6, #8
     5e4:	d1eb      	bne.n	5be <_ZN16Commands_Handler17CommandSetHeatersEv+0x46>
     5e6:	e7d8      	b.n	59a <_ZN16Commands_Handler17CommandSetHeatersEv+0x22>
     5e8:	20002e6c 	.word	0x20002e6c
     5ec:	00013e9d 	.word	0x00013e9d

000005f0 <_ZN16Commands_Handler18CommandSetScavengeEv>:
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
		
	}
	return result;
}
bool Commands_Handler::CommandSetScavenge(void){
     5f0:	b510      	push	{r4, lr}


	
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     5f2:	68c3      	ldr	r3, [r0, #12]
     5f4:	6819      	ldr	r1, [r3, #0]
     5f6:	6041      	str	r1, [r0, #4]
     5f8:	8899      	ldrh	r1, [r3, #4]
     5fa:	799b      	ldrb	r3, [r3, #6]
     5fc:	8101      	strh	r1, [r0, #8]
     5fe:	7283      	strb	r3, [r0, #10]
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(singleTaskMessage.header.task == kHVACCommandSetScavenge);
     600:	7a43      	ldrb	r3, [r0, #9]
     602:	2b53      	cmp	r3, #83	; 0x53
     604:	bf0c      	ite	eq
     606:	2401      	moveq	r4, #1
     608:	2400      	movne	r4, #0
	if (result){
     60a:	d001      	beq.n	610 <_ZN16Commands_Handler18CommandSetScavengeEv+0x20>
		scavenge.SetEnable(powerOn);
	
	}
	
	return result;
}
     60c:	4620      	mov	r0, r4
     60e:	bd10      	pop	{r4, pc}
		data_byte=singleTaskMessage.description;
     610:	7a81      	ldrb	r1, [r0, #10]
     612:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
		powerOn=(data_byte&(0x02))>0;
     616:	f3c1 0140 	ubfx	r1, r1, #1, #1
     61a:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
		scavenge.SetEnable(powerOn);
     61e:	4802      	ldr	r0, [pc, #8]	; (628 <_ZN16Commands_Handler18CommandSetScavengeEv+0x38>)
     620:	4b02      	ldr	r3, [pc, #8]	; (62c <_ZN16Commands_Handler18CommandSetScavengeEv+0x3c>)
     622:	4798      	blx	r3
     624:	e7f2      	b.n	60c <_ZN16Commands_Handler18CommandSetScavengeEv+0x1c>
     626:	bf00      	nop
     628:	2000cde8 	.word	0x2000cde8
     62c:	000143dd 	.word	0x000143dd

00000630 <_ZN16Commands_Handler20CommandSetCompressorEv>:
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
		
	}
	return result;
}
bool Commands_Handler::CommandSetCompressor(void){
     630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	memcpy(&message64,usbMessageBuffer,64);
     632:	68c3      	ldr	r3, [r0, #12]
     634:	f100 0210 	add.w	r2, r0, #16
     638:	f103 0140 	add.w	r1, r3, #64	; 0x40
     63c:	681f      	ldr	r7, [r3, #0]
     63e:	685e      	ldr	r6, [r3, #4]
     640:	689d      	ldr	r5, [r3, #8]
     642:	68dc      	ldr	r4, [r3, #12]
     644:	6017      	str	r7, [r2, #0]
     646:	6056      	str	r6, [r2, #4]
     648:	6095      	str	r5, [r2, #8]
     64a:	60d4      	str	r4, [r2, #12]
     64c:	3310      	adds	r3, #16
     64e:	3210      	adds	r2, #16
     650:	428b      	cmp	r3, r1
     652:	d1f3      	bne.n	63c <_ZN16Commands_Handler20CommandSetCompressorEv+0xc>
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task == kHVACCommandSetCompressor);
     654:	7d43      	ldrb	r3, [r0, #21]
     656:	2b55      	cmp	r3, #85	; 0x55
     658:	bf0c      	ite	eq
     65a:	2501      	moveq	r5, #1
     65c:	2500      	movne	r5, #0
	if (result){
     65e:	d001      	beq.n	664 <_ZN16Commands_Handler20CommandSetCompressorEv+0x34>
	
		
	}
	
	return result;
     660:	4628      	mov	r0, r5
     662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     664:	4604      	mov	r4, r0
		data_byte=message64.content[0] ;
     666:	7d82      	ldrb	r2, [r0, #22]
     668:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
		compressor_speed=message64.content[1]*256+message64.content[2];
     66c:	7dc1      	ldrb	r1, [r0, #23]
     66e:	7e03      	ldrb	r3, [r0, #24]
     670:	eb03 2301 	add.w	r3, r3, r1, lsl #8
     674:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
		if ((data_byte&0x01)>0)
     678:	f012 0f01 	tst.w	r2, #1
     67c:	d014      	beq.n	6a8 <_ZN16Commands_Handler20CommandSetCompressorEv+0x78>
			if (ccu.IsEnabled())
     67e:	4813      	ldr	r0, [pc, #76]	; (6cc <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     680:	4b13      	ldr	r3, [pc, #76]	; (6d0 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa0>)
     682:	4798      	blx	r3
     684:	b158      	cbz	r0, 69e <_ZN16Commands_Handler20CommandSetCompressorEv+0x6e>
				if ( compressor_speed>0)
     686:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
     68a:	b119      	cbz	r1, 694 <_ZN16Commands_Handler20CommandSetCompressorEv+0x64>
					ccu.Set_Motor_Speed(compressor_speed);
     68c:	4811      	ldr	r0, [pc, #68]	; (6d4 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa4>)
     68e:	4b12      	ldr	r3, [pc, #72]	; (6d8 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa8>)
     690:	4798      	blx	r3
     692:	e7e5      	b.n	660 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
					ccu.SetEnable(false);
     694:	2100      	movs	r1, #0
     696:	480d      	ldr	r0, [pc, #52]	; (6cc <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     698:	4b10      	ldr	r3, [pc, #64]	; (6dc <_ZN16Commands_Handler20CommandSetCompressorEv+0xac>)
     69a:	4798      	blx	r3
     69c:	e7e0      	b.n	660 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
				ccu.SetEnable(true);
     69e:	2101      	movs	r1, #1
     6a0:	480a      	ldr	r0, [pc, #40]	; (6cc <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     6a2:	4b0e      	ldr	r3, [pc, #56]	; (6dc <_ZN16Commands_Handler20CommandSetCompressorEv+0xac>)
     6a4:	4798      	blx	r3
     6a6:	e7db      	b.n	660 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
			if (ccu.IsEnabled())
     6a8:	4808      	ldr	r0, [pc, #32]	; (6cc <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     6aa:	4b09      	ldr	r3, [pc, #36]	; (6d0 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa0>)
     6ac:	4798      	blx	r3
     6ae:	b938      	cbnz	r0, 6c0 <_ZN16Commands_Handler20CommandSetCompressorEv+0x90>
				if ( compressor_speed>0)
     6b0:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
     6b4:	2900      	cmp	r1, #0
     6b6:	d0d3      	beq.n	660 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
					ccu.Set_Motor_Speed(compressor_speed);
     6b8:	4806      	ldr	r0, [pc, #24]	; (6d4 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa4>)
     6ba:	4b07      	ldr	r3, [pc, #28]	; (6d8 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa8>)
     6bc:	4798      	blx	r3
     6be:	e7cf      	b.n	660 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
				ccu.SetEnable(false);
     6c0:	2100      	movs	r1, #0
     6c2:	4802      	ldr	r0, [pc, #8]	; (6cc <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     6c4:	4b05      	ldr	r3, [pc, #20]	; (6dc <_ZN16Commands_Handler20CommandSetCompressorEv+0xac>)
     6c6:	4798      	blx	r3
     6c8:	e7ca      	b.n	660 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
     6ca:	bf00      	nop
     6cc:	20002a90 	.word	0x20002a90
     6d0:	0000f3f1 	.word	0x0000f3f1
     6d4:	200028f4 	.word	0x200028f4
     6d8:	0000f809 	.word	0x0000f809
     6dc:	0000f3bd 	.word	0x0000f3bd

000006e0 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev>:
     6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     6e4:	4c2c      	ldr	r4, [pc, #176]	; (798 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xb8>)
     6e6:	f1a4 05f4 	sub.w	r5, r4, #244	; 0xf4
     6ea:	492c      	ldr	r1, [pc, #176]	; (79c <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xbc>)
     6ec:	4628      	mov	r0, r5
     6ee:	4b2c      	ldr	r3, [pc, #176]	; (7a0 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xc0>)
     6f0:	4798      	blx	r3
     6f2:	4e2c      	ldr	r6, [pc, #176]	; (7a4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xc4>)
     6f4:	4632      	mov	r2, r6
     6f6:	492c      	ldr	r1, [pc, #176]	; (7a8 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xc8>)
     6f8:	4628      	mov	r0, r5
     6fa:	4d2c      	ldr	r5, [pc, #176]	; (7ac <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xcc>)
     6fc:	47a8      	blx	r5
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     6fe:	f1a4 09dc 	sub.w	r9, r4, #220	; 0xdc
     702:	492b      	ldr	r1, [pc, #172]	; (7b0 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xd0>)
     704:	4648      	mov	r0, r9
     706:	4f2b      	ldr	r7, [pc, #172]	; (7b4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xd4>)
     708:	47b8      	blx	r7
     70a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 7d4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xf4>
     70e:	4632      	mov	r2, r6
     710:	4641      	mov	r1, r8
     712:	4648      	mov	r0, r9
     714:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     716:	f1a4 09bc 	sub.w	r9, r4, #188	; 0xbc
     71a:	4927      	ldr	r1, [pc, #156]	; (7b8 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xd8>)
     71c:	4648      	mov	r0, r9
     71e:	47b8      	blx	r7
     720:	4632      	mov	r2, r6
     722:	4641      	mov	r1, r8
     724:	4648      	mov	r0, r9
     726:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     728:	f1a4 099c 	sub.w	r9, r4, #156	; 0x9c
     72c:	4923      	ldr	r1, [pc, #140]	; (7bc <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xdc>)
     72e:	4648      	mov	r0, r9
     730:	47b8      	blx	r7
     732:	4632      	mov	r2, r6
     734:	4641      	mov	r1, r8
     736:	4648      	mov	r0, r9
     738:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     73a:	f1a4 097c 	sub.w	r9, r4, #124	; 0x7c
     73e:	4920      	ldr	r1, [pc, #128]	; (7c0 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xe0>)
     740:	4648      	mov	r0, r9
     742:	47b8      	blx	r7
     744:	4632      	mov	r2, r6
     746:	4641      	mov	r1, r8
     748:	4648      	mov	r0, r9
     74a:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     74c:	f1a4 095c 	sub.w	r9, r4, #92	; 0x5c
     750:	491c      	ldr	r1, [pc, #112]	; (7c4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xe4>)
     752:	4648      	mov	r0, r9
     754:	47b8      	blx	r7
     756:	4632      	mov	r2, r6
     758:	4641      	mov	r1, r8
     75a:	4648      	mov	r0, r9
     75c:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     75e:	f1a4 093c 	sub.w	r9, r4, #60	; 0x3c
     762:	4919      	ldr	r1, [pc, #100]	; (7c8 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xe8>)
     764:	4648      	mov	r0, r9
     766:	47b8      	blx	r7
     768:	4632      	mov	r2, r6
     76a:	4641      	mov	r1, r8
     76c:	4648      	mov	r0, r9
     76e:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     770:	f1a4 091c 	sub.w	r9, r4, #28
     774:	4915      	ldr	r1, [pc, #84]	; (7cc <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xec>)
     776:	4648      	mov	r0, r9
     778:	47b8      	blx	r7
     77a:	4632      	mov	r2, r6
     77c:	4641      	mov	r1, r8
     77e:	4648      	mov	r0, r9
     780:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     782:	3404      	adds	r4, #4
     784:	4912      	ldr	r1, [pc, #72]	; (7d0 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xf0>)
     786:	4620      	mov	r0, r4
     788:	47b8      	blx	r7
     78a:	4632      	mov	r2, r6
     78c:	4641      	mov	r1, r8
     78e:	4620      	mov	r0, r4
     790:	47a8      	blx	r5
     792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     796:	bf00      	nop
     798:	20001b5c 	.word	0x20001b5c
     79c:	2000dff8 	.word	0x2000dff8
     7a0:	0000faf1 	.word	0x0000faf1
     7a4:	20000000 	.word	0x20000000
     7a8:	0000fb0d 	.word	0x0000fb0d
     7ac:	0001a0b5 	.word	0x0001a0b5
     7b0:	2000dec8 	.word	0x2000dec8
     7b4:	000101a9 	.word	0x000101a9
     7b8:	2000df5c 	.word	0x2000df5c
     7bc:	2000e080 	.word	0x2000e080
     7c0:	2000df7c 	.word	0x2000df7c
     7c4:	2000e040 	.word	0x2000e040
     7c8:	2000e060 	.word	0x2000e060
     7cc:	2000df38 	.word	0x2000df38
     7d0:	2000dfd8 	.word	0x2000dfd8
     7d4:	000101e1 	.word	0x000101e1

000007d8 <_ZN16Commands_Handler17CommandFansStatusEv>:
bool Commands_Handler::CommandFansStatus(){
     7d8:	b530      	push	{r4, r5, lr}
     7da:	b083      	sub	sp, #12
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     7dc:	68c3      	ldr	r3, [r0, #12]
     7de:	6819      	ldr	r1, [r3, #0]
     7e0:	6041      	str	r1, [r0, #4]
     7e2:	8899      	ldrh	r1, [r3, #4]
     7e4:	799b      	ldrb	r3, [r3, #6]
     7e6:	8101      	strh	r1, [r0, #8]
     7e8:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandRedStatusFans);
     7ea:	7a43      	ldrb	r3, [r0, #9]
     7ec:	2b51      	cmp	r3, #81	; 0x51
     7ee:	bf0c      	ite	eq
     7f0:	2501      	moveq	r5, #1
     7f2:	2500      	movne	r5, #0
	if (result){
     7f4:	d002      	beq.n	7fc <_ZN16Commands_Handler17CommandFansStatusEv+0x24>
}
     7f6:	4628      	mov	r0, r5
     7f8:	b003      	add	sp, #12
     7fa:	bd30      	pop	{r4, r5, pc}
     7fc:	4604      	mov	r4, r0
		fans.GetGPIOSValues(gpios);
     7fe:	4669      	mov	r1, sp
     800:	4808      	ldr	r0, [pc, #32]	; (824 <_ZN16Commands_Handler17CommandFansStatusEv+0x4c>)
     802:	4b09      	ldr	r3, [pc, #36]	; (828 <_ZN16Commands_Handler17CommandFansStatusEv+0x50>)
     804:	4798      	blx	r3
		CreateFullBufferMessage(usbMessageBuffer,gpios);
     806:	6823      	ldr	r3, [r4, #0]
     808:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     80c:	466a      	mov	r2, sp
     80e:	68e1      	ldr	r1, [r4, #12]
     810:	4420      	add	r0, r4
     812:	4b06      	ldr	r3, [pc, #24]	; (82c <_ZN16Commands_Handler17CommandFansStatusEv+0x54>)
     814:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     816:	2240      	movs	r2, #64	; 0x40
     818:	68e1      	ldr	r1, [r4, #12]
     81a:	4805      	ldr	r0, [pc, #20]	; (830 <_ZN16Commands_Handler17CommandFansStatusEv+0x58>)
     81c:	4b05      	ldr	r3, [pc, #20]	; (834 <_ZN16Commands_Handler17CommandFansStatusEv+0x5c>)
     81e:	4798      	blx	r3
     820:	e7e9      	b.n	7f6 <_ZN16Commands_Handler17CommandFansStatusEv+0x1e>
     822:	bf00      	nop
     824:	20003758 	.word	0x20003758
     828:	00011455 	.word	0x00011455
     82c:	000010bd 	.word	0x000010bd
     830:	20003460 	.word	0x20003460
     834:	00010bd9 	.word	0x00010bd9

00000838 <_ZN16Commands_Handler22CommandReadFlapperDataEv>:
bool Commands_Handler::CommandReadFlapperData(void){
     838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     83c:	b08c      	sub	sp, #48	; 0x30
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     83e:	68c3      	ldr	r3, [r0, #12]
     840:	6819      	ldr	r1, [r3, #0]
     842:	6041      	str	r1, [r0, #4]
     844:	8899      	ldrh	r1, [r3, #4]
     846:	799b      	ldrb	r3, [r3, #6]
     848:	8101      	strh	r1, [r0, #8]
     84a:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACReadPositionFlapperValve);
     84c:	7a43      	ldrb	r3, [r0, #9]
     84e:	2b4e      	cmp	r3, #78	; 0x4e
     850:	bf0c      	ite	eq
     852:	f04f 0801 	moveq.w	r8, #1
     856:	f04f 0800 	movne.w	r8, #0
	if (result){
     85a:	d003      	beq.n	864 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x2c>
}
     85c:	4640      	mov	r0, r8
     85e:	b00c      	add	sp, #48	; 0x30
     860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     864:	4605      	mov	r5, r0
     866:	4f22      	ldr	r7, [pc, #136]	; (8f0 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xb8>)
	if (result){
     868:	2600      	movs	r6, #0
				fvds[i]= flapper.valve[i]->dataStruct;
     86a:	f10d 0904 	add.w	r9, sp, #4
				flapper.valve[i]->UpdateFlapperValveData();
     86e:	f8df a090 	ldr.w	sl, [pc, #144]	; 900 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xc8>
			if (flapper.valve[i]->isOK)
     872:	6838      	ldr	r0, [r7, #0]
     874:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
     878:	bb23      	cbnz	r3, 8c4 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x8c>
				fvds[i]= flapper.valve[i]->dataStruct;
     87a:	eb06 0e09 	add.w	lr, r6, r9
     87e:	f100 0484 	add.w	r4, r0, #132	; 0x84
     882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     884:	f846 0009 	str.w	r0, [r6, r9]
     888:	f8ce 1004 	str.w	r1, [lr, #4]
     88c:	f8ce 2008 	str.w	r2, [lr, #8]
     890:	f8ce 300c 	str.w	r3, [lr, #12]
     894:	6820      	ldr	r0, [r4, #0]
     896:	f8ce 0010 	str.w	r0, [lr, #16]
     89a:	7923      	ldrb	r3, [r4, #4]
     89c:	f88e 3014 	strb.w	r3, [lr, #20]
     8a0:	3704      	adds	r7, #4
     8a2:	3615      	adds	r6, #21
		for (int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     8a4:	2e2a      	cmp	r6, #42	; 0x2a
     8a6:	d1e4      	bne.n	872 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x3a>
		CreateFullBufferMessage(usbMessageBuffer,(uint8_t*)&fvds[0]);
     8a8:	682b      	ldr	r3, [r5, #0]
     8aa:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     8ae:	aa01      	add	r2, sp, #4
     8b0:	68e9      	ldr	r1, [r5, #12]
     8b2:	4428      	add	r0, r5
     8b4:	4b0f      	ldr	r3, [pc, #60]	; (8f4 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xbc>)
     8b6:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     8b8:	2240      	movs	r2, #64	; 0x40
     8ba:	68e9      	ldr	r1, [r5, #12]
     8bc:	480e      	ldr	r0, [pc, #56]	; (8f8 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xc0>)
     8be:	4b0f      	ldr	r3, [pc, #60]	; (8fc <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xc4>)
     8c0:	4798      	blx	r3
     8c2:	e7cb      	b.n	85c <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x24>
				flapper.valve[i]->UpdateFlapperValveData();
     8c4:	47d0      	blx	sl
				fvds[i]= flapper.valve[i]->dataStruct;
     8c6:	683c      	ldr	r4, [r7, #0]
     8c8:	eb06 0e09 	add.w	lr, r6, r9
     8cc:	3484      	adds	r4, #132	; 0x84
     8ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     8d0:	f846 0009 	str.w	r0, [r6, r9]
     8d4:	f8ce 1004 	str.w	r1, [lr, #4]
     8d8:	f8ce 2008 	str.w	r2, [lr, #8]
     8dc:	f8ce 300c 	str.w	r3, [lr, #12]
     8e0:	6820      	ldr	r0, [r4, #0]
     8e2:	f8ce 0010 	str.w	r0, [lr, #16]
     8e6:	7923      	ldrb	r3, [r4, #4]
     8e8:	f88e 3014 	strb.w	r3, [lr, #20]
     8ec:	e7d8      	b.n	8a0 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x68>
     8ee:	bf00      	nop
     8f0:	200053f0 	.word	0x200053f0
     8f4:	000010bd 	.word	0x000010bd
     8f8:	20003460 	.word	0x20003460
     8fc:	00010bd9 	.word	0x00010bd9
     900:	00013095 	.word	0x00013095

00000904 <_ZN16Commands_Handler21CommandReadParametersEv>:
bool Commands_Handler::CommandReadParameters(){
     904:	b538      	push	{r3, r4, r5, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     906:	68c3      	ldr	r3, [r0, #12]
     908:	6819      	ldr	r1, [r3, #0]
     90a:	6041      	str	r1, [r0, #4]
     90c:	8899      	ldrh	r1, [r3, #4]
     90e:	799b      	ldrb	r3, [r3, #6]
     910:	8101      	strh	r1, [r0, #8]
     912:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kGAINCommandReadParameters);
     914:	7a43      	ldrb	r3, [r0, #9]
     916:	2b48      	cmp	r3, #72	; 0x48
     918:	bf0c      	ite	eq
     91a:	2501      	moveq	r5, #1
     91c:	2500      	movne	r5, #0
	if (result){
     91e:	d001      	beq.n	924 <_ZN16Commands_Handler21CommandReadParametersEv+0x20>
}
     920:	4628      	mov	r0, r5
     922:	bd38      	pop	{r3, r4, r5, pc}
     924:	4604      	mov	r4, r0
		memory.ReadParameters(parameters);
     926:	f100 0163 	add.w	r1, r0, #99	; 0x63
     92a:	4811      	ldr	r0, [pc, #68]	; (970 <_ZN16Commands_Handler21CommandReadParametersEv+0x6c>)
     92c:	4b11      	ldr	r3, [pc, #68]	; (974 <_ZN16Commands_Handler21CommandReadParametersEv+0x70>)
     92e:	4798      	blx	r3
		memcpy(usbMessageBuffer,(void*)&hm,n);
     930:	68e3      	ldr	r3, [r4, #12]
     932:	4a11      	ldr	r2, [pc, #68]	; (978 <_ZN16Commands_Handler21CommandReadParametersEv+0x74>)
     934:	601a      	str	r2, [r3, #0]
     936:	2200      	movs	r2, #0
     938:	711a      	strb	r2, [r3, #4]
     93a:	715a      	strb	r2, [r3, #5]
		memcpy((uint8_t*)&usbMessageBuffer[n],(void*)&parameters,sizeof(UserParameters));
     93c:	68e3      	ldr	r3, [r4, #12]
     93e:	f8b4 2063 	ldrh.w	r2, [r4, #99]	; 0x63
     942:	80da      	strh	r2, [r3, #6]
		is_stand_alone=flapper.IsStandAlone();
     944:	480d      	ldr	r0, [pc, #52]	; (97c <_ZN16Commands_Handler21CommandReadParametersEv+0x78>)
     946:	4b0e      	ldr	r3, [pc, #56]	; (980 <_ZN16Commands_Handler21CommandReadParametersEv+0x7c>)
     948:	4798      	blx	r3
     94a:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
		if (is_stand_alone)
     94e:	b148      	cbz	r0, 964 <_ZN16Commands_Handler21CommandReadParametersEv+0x60>
			usbMessageBuffer[n+sizeof(UserParameters)]=parameters.flapperValveStandAloneMinimumPosition;
     950:	68e3      	ldr	r3, [r4, #12]
     952:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
     956:	721a      	strb	r2, [r3, #8]
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     958:	2240      	movs	r2, #64	; 0x40
     95a:	68e1      	ldr	r1, [r4, #12]
     95c:	4809      	ldr	r0, [pc, #36]	; (984 <_ZN16Commands_Handler21CommandReadParametersEv+0x80>)
     95e:	4b0a      	ldr	r3, [pc, #40]	; (988 <_ZN16Commands_Handler21CommandReadParametersEv+0x84>)
     960:	4798      	blx	r3
     962:	e7dd      	b.n	920 <_ZN16Commands_Handler21CommandReadParametersEv+0x1c>
			usbMessageBuffer[n+sizeof(UserParameters)]=parameters.flapperValveMinimumPosition;
     964:	68e3      	ldr	r3, [r4, #12]
     966:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
     96a:	721a      	strb	r2, [r3, #8]
     96c:	e7f4      	b.n	958 <_ZN16Commands_Handler21CommandReadParametersEv+0x54>
     96e:	bf00      	nop
     970:	20006a98 	.word	0x20006a98
     974:	000140b9 	.word	0x000140b9
     978:	61626364 	.word	0x61626364
     97c:	2000530c 	.word	0x2000530c
     980:	00011e31 	.word	0x00011e31
     984:	20003460 	.word	0x20003460
     988:	00010bd9 	.word	0x00010bd9

0000098c <_ZN16Commands_Handler21CommandReadDataLoggerEv>:
bool Commands_Handler::CommandReadDataLogger(){
     98c:	b5f0      	push	{r4, r5, r6, r7, lr}
     98e:	b083      	sub	sp, #12
	memcpy(&dataLogMessage,usbMessageBuffer,sizeof(DataLogMessage));
     990:	68c1      	ldr	r1, [r0, #12]
     992:	680c      	ldr	r4, [r1, #0]
     994:	684a      	ldr	r2, [r1, #4]
     996:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
     99a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
     99e:	890a      	ldrh	r2, [r1, #8]
     9a0:	f8a0 208c 	strh.w	r2, [r0, #140]	; 0x8c
	if (result){
     9a4:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
     9a8:	2b57      	cmp	r3, #87	; 0x57
     9aa:	d002      	beq.n	9b2 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x26>
	bool	result(dataLogMessage.header.task == kHVACCommandReadDataLog);
     9ac:	2000      	movs	r0, #0
}
     9ae:	b003      	add	sp, #12
     9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9b2:	4604      	mov	r4, r0
			uint32_t add=*logger.memory_event_stack;
     9b4:	4b57      	ldr	r3, [pc, #348]	; (b14 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x188>)
     9b6:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
     9ba:	681b      	ldr	r3, [r3, #0]
     9bc:	9301      	str	r3, [sp, #4]
			if (add>=dataLogMessage.address)
     9be:	f8d0 008a 	ldr.w	r0, [r0, #138]	; 0x8a
     9c2:	4283      	cmp	r3, r0
     9c4:	d241      	bcs.n	a4a <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xbe>
				current_logger_stack_value=*logger.event_buffer_arrray_stack;
     9c6:	4b53      	ldr	r3, [pc, #332]	; (b14 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x188>)
     9c8:	f8d3 35f4 	ldr.w	r3, [r3, #1524]	; 0x5f4
     9cc:	681b      	ldr	r3, [r3, #0]
     9ce:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
				if (current_logger_stack_value>local_last_read_stack)
     9d2:	4a51      	ldr	r2, [pc, #324]	; (b18 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x18c>)
     9d4:	6812      	ldr	r2, [r2, #0]
     9d6:	4293      	cmp	r3, r2
     9d8:	f240 808c 	bls.w	af4 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x168>
					logger_data_buffer_temp_size=current_logger_stack_value-local_last_read_stack;
     9dc:	1a9b      	subs	r3, r3, r2
     9de:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
					memory_flash_address=(logger_data_buffer_temp_size)&(0xffff);
     9e2:	b29b      	uxth	r3, r3
					memory_flash_address|=EVENT_LOGGER_MASK;
     9e4:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
     9e8:	f443 032a 	orr.w	r3, r3, #11141120	; 0xaa0000
     9ec:	6763      	str	r3, [r4, #116]	; 0x74
					memcpy(logger_buffer,(uint8_t*)&memory_flash_address,4);
     9ee:	67e3      	str	r3, [r4, #124]	; 0x7c
					ucontroller_timestamp=logger.GetCurrentTimeStamp();
     9f0:	4f48      	ldr	r7, [pc, #288]	; (b14 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x188>)
     9f2:	4638      	mov	r0, r7
     9f4:	4b49      	ldr	r3, [pc, #292]	; (b1c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x190>)
     9f6:	4798      	blx	r3
     9f8:	67a0      	str	r0, [r4, #120]	; 0x78
					memcpy((uint8_t*)&logger_buffer[4],(uint8_t*)&ucontroller_timestamp,4);
     9fa:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					CreateFullBufferMessage(usbMessageBuffer,logger_buffer);
     9fe:	6823      	ldr	r3, [r4, #0]
     a00:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     a04:	f104 027c 	add.w	r2, r4, #124	; 0x7c
     a08:	68e1      	ldr	r1, [r4, #12]
     a0a:	4420      	add	r0, r4
     a0c:	4b44      	ldr	r3, [pc, #272]	; (b20 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x194>)
     a0e:	4798      	blx	r3
					usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     a10:	4e44      	ldr	r6, [pc, #272]	; (b24 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x198>)
     a12:	2240      	movs	r2, #64	; 0x40
     a14:	68e1      	ldr	r1, [r4, #12]
     a16:	4630      	mov	r0, r6
     a18:	4d43      	ldr	r5, [pc, #268]	; (b28 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x19c>)
     a1a:	47a8      	blx	r5
					delay_ms(100);
     a1c:	2064      	movs	r0, #100	; 0x64
     a1e:	4b43      	ldr	r3, [pc, #268]	; (b2c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x1a0>)
     a20:	4798      	blx	r3
					write_result=usb.write(&logger.event_buffer_arrray[local_last_read_stack],logger_data_buffer_temp_size);
     a22:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
     a26:	4b3c      	ldr	r3, [pc, #240]	; (b18 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x18c>)
     a28:	681b      	ldr	r3, [r3, #0]
     a2a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
     a2e:	4419      	add	r1, r3
     a30:	4630      	mov	r0, r6
     a32:	47a8      	blx	r5
     a34:	6720      	str	r0, [r4, #112]	; 0x70
					if (write_result==0)
     a36:	2800      	cmp	r0, #0
     a38:	d04c      	beq.n	ad4 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x148>
						local_last_read_stack=*logger.event_buffer_arrray_stack;
     a3a:	4b36      	ldr	r3, [pc, #216]	; (b14 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x188>)
     a3c:	f8d3 35f4 	ldr.w	r3, [r3, #1524]	; 0x5f4
     a40:	681a      	ldr	r2, [r3, #0]
     a42:	4b35      	ldr	r3, [pc, #212]	; (b18 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x18c>)
     a44:	601a      	str	r2, [r3, #0]
						result=false;
     a46:	2000      	movs	r0, #0
     a48:	e7b1      	b.n	9ae <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x22>
				memory_flash_address= dataLogMessage.address;
     a4a:	6760      	str	r0, [r4, #116]	; 0x74
				read_result=memory.ReadEventLogSector(memory_flash_address,memory_block);
     a4c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
     a50:	4601      	mov	r1, r0
     a52:	4837      	ldr	r0, [pc, #220]	; (b30 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x1a4>)
     a54:	4b37      	ldr	r3, [pc, #220]	; (b34 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x1a8>)
     a56:	4798      	blx	r3
     a58:	66e0      	str	r0, [r4, #108]	; 0x6c
				if (read_result==0)
     a5a:	bb50      	cbnz	r0, ab2 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x126>
					memcpy(logger_buffer,(uint8_t*)&memory_flash_address,4);
     a5c:	6f63      	ldr	r3, [r4, #116]	; 0x74
     a5e:	67e3      	str	r3, [r4, #124]	; 0x7c
					ucontroller_timestamp=logger.GetCurrentTimeStamp();
     a60:	4d2c      	ldr	r5, [pc, #176]	; (b14 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x188>)
     a62:	4628      	mov	r0, r5
     a64:	4b2d      	ldr	r3, [pc, #180]	; (b1c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x190>)
     a66:	4798      	blx	r3
     a68:	67a0      	str	r0, [r4, #120]	; 0x78
					memcpy((uint8_t*)&logger_buffer[4],(uint8_t*)&ucontroller_timestamp,4);
     a6a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					CreateFullBufferMessage(usbMessageBuffer,logger_buffer);
     a6e:	6823      	ldr	r3, [r4, #0]
     a70:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     a74:	f104 027c 	add.w	r2, r4, #124	; 0x7c
     a78:	68e1      	ldr	r1, [r4, #12]
     a7a:	4420      	add	r0, r4
     a7c:	4b28      	ldr	r3, [pc, #160]	; (b20 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x194>)
     a7e:	4798      	blx	r3
					usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     a80:	4f28      	ldr	r7, [pc, #160]	; (b24 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x198>)
     a82:	2240      	movs	r2, #64	; 0x40
     a84:	68e1      	ldr	r1, [r4, #12]
     a86:	4638      	mov	r0, r7
     a88:	4e27      	ldr	r6, [pc, #156]	; (b28 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x19c>)
     a8a:	47b0      	blx	r6
					delay_ms(100);
     a8c:	2064      	movs	r0, #100	; 0x64
     a8e:	4b27      	ldr	r3, [pc, #156]	; (b2c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x1a0>)
     a90:	4798      	blx	r3
					write_result=usb.write(memory_block,QSPI_ERBLK);
     a92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     a96:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
     a9a:	4638      	mov	r0, r7
     a9c:	47b0      	blx	r6
     a9e:	6720      	str	r0, [r4, #112]	; 0x70
					local_last_read_stack=*logger.event_buffer_arrray_stack;
     aa0:	f8d5 35f4 	ldr.w	r3, [r5, #1524]	; 0x5f4
     aa4:	681a      	ldr	r2, [r3, #0]
     aa6:	4b1c      	ldr	r3, [pc, #112]	; (b18 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x18c>)
     aa8:	601a      	str	r2, [r3, #0]
					result=write_result==0;
     aaa:	fab0 f080 	clz	r0, r0
     aae:	0940      	lsrs	r0, r0, #5
     ab0:	e77d      	b.n	9ae <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x22>
					memory_flash_address=0;
     ab2:	2500      	movs	r5, #0
     ab4:	6765      	str	r5, [r4, #116]	; 0x74
					CreateFullBufferMessage(usbMessageBuffer,(uint8_t*)&add);
     ab6:	6823      	ldr	r3, [r4, #0]
     ab8:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     abc:	aa01      	add	r2, sp, #4
     abe:	68e1      	ldr	r1, [r4, #12]
     ac0:	4420      	add	r0, r4
     ac2:	4b17      	ldr	r3, [pc, #92]	; (b20 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x194>)
     ac4:	4798      	blx	r3
					usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     ac6:	2240      	movs	r2, #64	; 0x40
     ac8:	68e1      	ldr	r1, [r4, #12]
     aca:	4816      	ldr	r0, [pc, #88]	; (b24 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x198>)
     acc:	4b16      	ldr	r3, [pc, #88]	; (b28 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x19c>)
     ace:	4798      	blx	r3
					result=false;
     ad0:	4628      	mov	r0, r5
     ad2:	e76c      	b.n	9ae <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x22>
						memset(&logger.event_buffer_arrray[local_last_read_stack],0,logger_data_buffer_temp_size);
     ad4:	4d10      	ldr	r5, [pc, #64]	; (b18 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x18c>)
     ad6:	f8d7 05f0 	ldr.w	r0, [r7, #1520]	; 0x5f0
     ada:	682b      	ldr	r3, [r5, #0]
     adc:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
     ae0:	2100      	movs	r1, #0
     ae2:	4418      	add	r0, r3
     ae4:	4b14      	ldr	r3, [pc, #80]	; (b38 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x1ac>)
     ae6:	4798      	blx	r3
						*logger.event_buffer_arrray_stack=local_last_read_stack;
     ae8:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
     aec:	682a      	ldr	r2, [r5, #0]
     aee:	601a      	str	r2, [r3, #0]
						result=true;
     af0:	2001      	movs	r0, #1
     af2:	e75c      	b.n	9ae <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x22>
						memory_flash_address=0;
     af4:	2500      	movs	r5, #0
     af6:	6765      	str	r5, [r4, #116]	; 0x74
						CreateFullBufferMessage(usbMessageBuffer,(uint8_t*)&add);
     af8:	6823      	ldr	r3, [r4, #0]
     afa:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     afe:	aa01      	add	r2, sp, #4
     b00:	4420      	add	r0, r4
     b02:	4b07      	ldr	r3, [pc, #28]	; (b20 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x194>)
     b04:	4798      	blx	r3
						usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     b06:	2240      	movs	r2, #64	; 0x40
     b08:	68e1      	ldr	r1, [r4, #12]
     b0a:	4806      	ldr	r0, [pc, #24]	; (b24 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x198>)
     b0c:	4b06      	ldr	r3, [pc, #24]	; (b28 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x19c>)
     b0e:	4798      	blx	r3
						result=false;
     b10:	4628      	mov	r0, r5
     b12:	e74c      	b.n	9ae <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x22>
     b14:	20003a18 	.word	0x20003a18
     b18:	20000a64 	.word	0x20000a64
     b1c:	000119f1 	.word	0x000119f1
     b20:	000010bd 	.word	0x000010bd
     b24:	20003460 	.word	0x20003460
     b28:	00010bd9 	.word	0x00010bd9
     b2c:	00003625 	.word	0x00003625
     b30:	20006a98 	.word	0x20006a98
     b34:	00014059 	.word	0x00014059
     b38:	0001a769 	.word	0x0001a769

00000b3c <_ZN16Commands_Handler23CommandReadHeaterStatusEv>:
bool Commands_Handler::CommandReadHeaterStatus(){
     b3c:	b570      	push	{r4, r5, r6, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     b3e:	68c3      	ldr	r3, [r0, #12]
     b40:	6819      	ldr	r1, [r3, #0]
     b42:	6041      	str	r1, [r0, #4]
     b44:	8899      	ldrh	r1, [r3, #4]
     b46:	799b      	ldrb	r3, [r3, #6]
     b48:	8101      	strh	r1, [r0, #8]
     b4a:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandReadHeaterStatus);
     b4c:	7a43      	ldrb	r3, [r0, #9]
     b4e:	2b4a      	cmp	r3, #74	; 0x4a
     b50:	bf0c      	ite	eq
     b52:	2501      	moveq	r5, #1
     b54:	2500      	movne	r5, #0
	if (result){
     b56:	d001      	beq.n	b5c <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x20>
}
     b58:	4628      	mov	r0, r5
     b5a:	bd70      	pop	{r4, r5, r6, pc}
     b5c:	4604      	mov	r4, r0
		heaters.ReadAllGPIOs(heater_data_array);
     b5e:	f100 0653 	add.w	r6, r0, #83	; 0x53
     b62:	4631      	mov	r1, r6
     b64:	4808      	ldr	r0, [pc, #32]	; (b88 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x4c>)
     b66:	4b09      	ldr	r3, [pc, #36]	; (b8c <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x50>)
     b68:	4798      	blx	r3
		CreateFullBufferMessage(usbMessageBuffer,heater_data_array);
     b6a:	6823      	ldr	r3, [r4, #0]
     b6c:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     b70:	4632      	mov	r2, r6
     b72:	68e1      	ldr	r1, [r4, #12]
     b74:	4420      	add	r0, r4
     b76:	4b06      	ldr	r3, [pc, #24]	; (b90 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x54>)
     b78:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     b7a:	2240      	movs	r2, #64	; 0x40
     b7c:	68e1      	ldr	r1, [r4, #12]
     b7e:	4805      	ldr	r0, [pc, #20]	; (b94 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x58>)
     b80:	4b05      	ldr	r3, [pc, #20]	; (b98 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x5c>)
     b82:	4798      	blx	r3
     b84:	e7e8      	b.n	b58 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x1c>
     b86:	bf00      	nop
     b88:	20002e6c 	.word	0x20002e6c
     b8c:	0000fa45 	.word	0x0000fa45
     b90:	000010bd 	.word	0x000010bd
     b94:	20003460 	.word	0x20003460
     b98:	00010bd9 	.word	0x00010bd9

00000b9c <_ZN16Commands_Handler25CommandReadScavengeStatusEv>:
bool Commands_Handler::CommandReadScavengeStatus(void){
     b9c:	b538      	push	{r3, r4, r5, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     b9e:	68c3      	ldr	r3, [r0, #12]
     ba0:	6819      	ldr	r1, [r3, #0]
     ba2:	6041      	str	r1, [r0, #4]
     ba4:	8899      	ldrh	r1, [r3, #4]
     ba6:	799b      	ldrb	r3, [r3, #6]
     ba8:	8101      	strh	r1, [r0, #8]
     baa:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandReadScavengeStatus);
     bac:	7a43      	ldrb	r3, [r0, #9]
     bae:	2b52      	cmp	r3, #82	; 0x52
     bb0:	bf0c      	ite	eq
     bb2:	2501      	moveq	r5, #1
     bb4:	2500      	movne	r5, #0
	if (result){
     bb6:	d001      	beq.n	bbc <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x20>
}
     bb8:	4628      	mov	r0, r5
     bba:	bd38      	pop	{r3, r4, r5, pc}
     bbc:	4604      	mov	r4, r0
		data_byte=scavenge.ReadStatus();
     bbe:	4809      	ldr	r0, [pc, #36]	; (be4 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x48>)
     bc0:	4b09      	ldr	r3, [pc, #36]	; (be8 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x4c>)
     bc2:	4798      	blx	r3
     bc4:	4622      	mov	r2, r4
     bc6:	f802 0f69 	strb.w	r0, [r2, #105]!
		CreateFullBufferMessage(usbMessageBuffer,&data_byte);
     bca:	6823      	ldr	r3, [r4, #0]
     bcc:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     bd0:	68e1      	ldr	r1, [r4, #12]
     bd2:	4420      	add	r0, r4
     bd4:	4b05      	ldr	r3, [pc, #20]	; (bec <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x50>)
     bd6:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     bd8:	2240      	movs	r2, #64	; 0x40
     bda:	68e1      	ldr	r1, [r4, #12]
     bdc:	4804      	ldr	r0, [pc, #16]	; (bf0 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x54>)
     bde:	4b05      	ldr	r3, [pc, #20]	; (bf4 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x58>)
     be0:	4798      	blx	r3
     be2:	e7e9      	b.n	bb8 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x1c>
     be4:	2000cde8 	.word	0x2000cde8
     be8:	000143b9 	.word	0x000143b9
     bec:	000010bd 	.word	0x000010bd
     bf0:	20003460 	.word	0x20003460
     bf4:	00010bd9 	.word	0x00010bd9

00000bf8 <_ZN16Commands_Handler27CommandReadCompressorStatusEv>:
bool Commands_Handler::CommandReadCompressorStatus(void){
     bf8:	b570      	push	{r4, r5, r6, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     bfa:	68c3      	ldr	r3, [r0, #12]
     bfc:	6819      	ldr	r1, [r3, #0]
     bfe:	6041      	str	r1, [r0, #4]
     c00:	8899      	ldrh	r1, [r3, #4]
     c02:	799b      	ldrb	r3, [r3, #6]
     c04:	8101      	strh	r1, [r0, #8]
     c06:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandReadCompressorStatus);
     c08:	7a43      	ldrb	r3, [r0, #9]
     c0a:	2b54      	cmp	r3, #84	; 0x54
     c0c:	bf0c      	ite	eq
     c0e:	2501      	moveq	r5, #1
     c10:	2500      	movne	r5, #0
	if (result){
     c12:	d001      	beq.n	c18 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x20>
}
     c14:	4628      	mov	r0, r5
     c16:	bd70      	pop	{r4, r5, r6, pc}
     c18:	4604      	mov	r4, r0
		ccu.GetCompressorStatus(compressor_data_array);
     c1a:	f100 0657 	add.w	r6, r0, #87	; 0x57
     c1e:	4631      	mov	r1, r6
     c20:	480b      	ldr	r0, [pc, #44]	; (c50 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x58>)
     c22:	4b0c      	ldr	r3, [pc, #48]	; (c54 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x5c>)
     c24:	4798      	blx	r3
		memcpy(&compressor_data_array[4],(void*)&temperatures.values[0][0],4);
     c26:	4b0c      	ldr	r3, [pc, #48]	; (c58 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x60>)
     c28:	6eda      	ldr	r2, [r3, #108]	; 0x6c
     c2a:	f8c4 205b 	str.w	r2, [r4, #91]	; 0x5b
		memcpy(&compressor_data_array[8],(void*)&temperatures.values[0][1],4);
     c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     c30:	f8c4 305f 	str.w	r3, [r4, #95]	; 0x5f
		CreateFullBufferMessage(usbMessageBuffer,compressor_data_array);
     c34:	6823      	ldr	r3, [r4, #0]
     c36:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     c3a:	4632      	mov	r2, r6
     c3c:	68e1      	ldr	r1, [r4, #12]
     c3e:	4420      	add	r0, r4
     c40:	4b06      	ldr	r3, [pc, #24]	; (c5c <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x64>)
     c42:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     c44:	2240      	movs	r2, #64	; 0x40
     c46:	68e1      	ldr	r1, [r4, #12]
     c48:	4805      	ldr	r0, [pc, #20]	; (c60 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x68>)
     c4a:	4b06      	ldr	r3, [pc, #24]	; (c64 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x6c>)
     c4c:	4798      	blx	r3
     c4e:	e7e1      	b.n	c14 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x1c>
     c50:	200028f4 	.word	0x200028f4
     c54:	0000f0c1 	.word	0x0000f0c1
     c58:	2000cdfc 	.word	0x2000cdfc
     c5c:	000010bd 	.word	0x000010bd
     c60:	20003460 	.word	0x20003460
     c64:	00010bd9 	.word	0x00010bd9

00000c68 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
			asm("nop");
     c68:	bf00      	nop
     c6a:	e7fd      	b.n	c68 <Dummy_Handler>

00000c6c <Reset_Handler>:
{
     c6c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     c6e:	4b17      	ldr	r3, [pc, #92]	; (ccc <Reset_Handler+0x60>)
     c70:	4a17      	ldr	r2, [pc, #92]	; (cd0 <Reset_Handler+0x64>)
     c72:	429a      	cmp	r2, r3
     c74:	d010      	beq.n	c98 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     c76:	4b17      	ldr	r3, [pc, #92]	; (cd4 <Reset_Handler+0x68>)
     c78:	4a14      	ldr	r2, [pc, #80]	; (ccc <Reset_Handler+0x60>)
     c7a:	429a      	cmp	r2, r3
     c7c:	d20c      	bcs.n	c98 <Reset_Handler+0x2c>
     c7e:	3b01      	subs	r3, #1
     c80:	1a9b      	subs	r3, r3, r2
     c82:	f023 0303 	bic.w	r3, r3, #3
     c86:	3304      	adds	r3, #4
     c88:	4413      	add	r3, r2
     c8a:	4911      	ldr	r1, [pc, #68]	; (cd0 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     c8c:	f851 0b04 	ldr.w	r0, [r1], #4
     c90:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     c94:	429a      	cmp	r2, r3
     c96:	d1f9      	bne.n	c8c <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     c98:	4b0f      	ldr	r3, [pc, #60]	; (cd8 <Reset_Handler+0x6c>)
     c9a:	4a10      	ldr	r2, [pc, #64]	; (cdc <Reset_Handler+0x70>)
     c9c:	429a      	cmp	r2, r3
     c9e:	d20a      	bcs.n	cb6 <Reset_Handler+0x4a>
     ca0:	3b01      	subs	r3, #1
     ca2:	1a9b      	subs	r3, r3, r2
     ca4:	f023 0303 	bic.w	r3, r3, #3
     ca8:	3304      	adds	r3, #4
     caa:	4413      	add	r3, r2
                *pDest++ = 0;
     cac:	2100      	movs	r1, #0
     cae:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     cb2:	4293      	cmp	r3, r2
     cb4:	d1fb      	bne.n	cae <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     cb6:	4a0a      	ldr	r2, [pc, #40]	; (ce0 <Reset_Handler+0x74>)
     cb8:	4b0a      	ldr	r3, [pc, #40]	; (ce4 <Reset_Handler+0x78>)
     cba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     cbe:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     cc0:	4b09      	ldr	r3, [pc, #36]	; (ce8 <Reset_Handler+0x7c>)
     cc2:	4798      	blx	r3
        main();
     cc4:	4b09      	ldr	r3, [pc, #36]	; (cec <Reset_Handler+0x80>)
     cc6:	4798      	blx	r3
     cc8:	e7fe      	b.n	cc8 <Reset_Handler+0x5c>
     cca:	bf00      	nop
     ccc:	20000000 	.word	0x20000000
     cd0:	0001bca4 	.word	0x0001bca4
     cd4:	20000a44 	.word	0x20000a44
     cd8:	2000e180 	.word	0x2000e180
     cdc:	20000a48 	.word	0x20000a48
     ce0:	e000ed00 	.word	0xe000ed00
     ce4:	00000000 	.word	0x00000000
     ce8:	0001a5e5 	.word	0x0001a5e5
     cec:	00000d21 	.word	0x00000d21

00000cf0 <_ZL15FirmwareIsAlivePK10timer_task>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cf0:	2280      	movs	r2, #128	; 0x80
     cf2:	4b09      	ldr	r3, [pc, #36]	; (d18 <_ZL15FirmwareIsAlivePK10timer_task+0x28>)
     cf4:	619a      	str	r2, [r3, #24]

static void FirmwareIsAlive(const struct timer_task *const timer_task)
{
	gpio_set_pin_level(iAlcFwIsAlive,true);
	is_firmware_OK=true;
	if (counter_running==last_count)
     cf6:	4b09      	ldr	r3, [pc, #36]	; (d1c <_ZL15FirmwareIsAlivePK10timer_task+0x2c>)
     cf8:	681a      	ldr	r2, [r3, #0]
     cfa:	685b      	ldr	r3, [r3, #4]
     cfc:	429a      	cmp	r2, r3
     cfe:	d006      	beq.n	d0e <_ZL15FirmwareIsAlivePK10timer_task+0x1e>
		is_running=false;
	} 
	else
	{
		is_running=true;
		last_count=counter_running;
     d00:	4b06      	ldr	r3, [pc, #24]	; (d1c <_ZL15FirmwareIsAlivePK10timer_task+0x2c>)
     d02:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     d04:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d08:	4b03      	ldr	r3, [pc, #12]	; (d18 <_ZL15FirmwareIsAlivePK10timer_task+0x28>)
     d0a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
		gpio_toggle_pin_level(LED0);
		
	}
	
	localtimeout=true;
     d0e:	2201      	movs	r2, #1
     d10:	4b02      	ldr	r3, [pc, #8]	; (d1c <_ZL15FirmwareIsAlivePK10timer_task+0x2c>)
     d12:	721a      	strb	r2, [r3, #8]
     d14:	4770      	bx	lr
     d16:	bf00      	nop
     d18:	41008000 	.word	0x41008000
     d1c:	20001b80 	.word	0x20001b80

00000d20 <main>:




int main(void)		
{
     d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool gotNewTemperature=false;
	atmel_start_init();
     d24:	4b6e      	ldr	r3, [pc, #440]	; (ee0 <main+0x1c0>)
     d26:	4798      	blx	r3
	
	//StartLivePulse();
	delay_ms(200);
     d28:	20c8      	movs	r0, #200	; 0xc8
     d2a:	4b6e      	ldr	r3, [pc, #440]	; (ee4 <main+0x1c4>)
     d2c:	4798      	blx	r3
	logger.Init();
     d2e:	486e      	ldr	r0, [pc, #440]	; (ee8 <main+0x1c8>)
     d30:	4b6e      	ldr	r3, [pc, #440]	; (eec <main+0x1cc>)
     d32:	4798      	blx	r3
	while(!memory.Init()){
     d34:	4e6e      	ldr	r6, [pc, #440]	; (ef0 <main+0x1d0>)
     d36:	4d6f      	ldr	r5, [pc, #444]	; (ef4 <main+0x1d4>)
		delay_ms(DELAY_ERROR);
     d38:	4c6a      	ldr	r4, [pc, #424]	; (ee4 <main+0x1c4>)
	while(!memory.Init()){
     d3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     d3e:	4630      	mov	r0, r6
     d40:	47a8      	blx	r5
     d42:	b938      	cbnz	r0, d54 <main+0x34>
		delay_ms(DELAY_ERROR);
     d44:	2064      	movs	r0, #100	; 0x64
     d46:	47a0      	blx	r4
     d48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d4c:	4b6a      	ldr	r3, [pc, #424]	; (ef8 <main+0x1d8>)
     d4e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     d52:	e7f2      	b.n	d3a <main+0x1a>
		gpio_toggle_pin_level(LED0);
	}
	if (memory.initiated)
     d54:	4b66      	ldr	r3, [pc, #408]	; (ef0 <main+0x1d0>)
     d56:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
     d5a:	b133      	cbz	r3, d6a <main+0x4a>
	{
		memory.WriteDefaultParameters();
     d5c:	4864      	ldr	r0, [pc, #400]	; (ef0 <main+0x1d0>)
     d5e:	4b67      	ldr	r3, [pc, #412]	; (efc <main+0x1dc>)
     d60:	4798      	blx	r3
		logger.SaveEvent("Info:Memory Started");
     d62:	4967      	ldr	r1, [pc, #412]	; (f00 <main+0x1e0>)
     d64:	4860      	ldr	r0, [pc, #384]	; (ee8 <main+0x1c8>)
     d66:	4b67      	ldr	r3, [pc, #412]	; (f04 <main+0x1e4>)
     d68:	4798      	blx	r3
	}

	
	bool isOK=temperatures.Init();
     d6a:	4867      	ldr	r0, [pc, #412]	; (f08 <main+0x1e8>)
     d6c:	4b67      	ldr	r3, [pc, #412]	; (f0c <main+0x1ec>)
     d6e:	4798      	blx	r3
	if (isOK)
     d70:	b110      	cbz	r0, d78 <main+0x58>
	{
		temperatures.StartOneConversion();
     d72:	4865      	ldr	r0, [pc, #404]	; (f08 <main+0x1e8>)
     d74:	4b66      	ldr	r3, [pc, #408]	; (f10 <main+0x1f0>)
     d76:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d78:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d7c:	4b5e      	ldr	r3, [pc, #376]	; (ef8 <main+0x1d8>)
     d7e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
 	gpio_set_pin_level(LED0,true);
	while (!flapper.Init())
     d82:	4e64      	ldr	r6, [pc, #400]	; (f14 <main+0x1f4>)
     d84:	4d64      	ldr	r5, [pc, #400]	; (f18 <main+0x1f8>)
	{
		delay_ms(DELAY_ERROR);
     d86:	4c57      	ldr	r4, [pc, #348]	; (ee4 <main+0x1c4>)
	while (!flapper.Init())
     d88:	4630      	mov	r0, r6
     d8a:	47a8      	blx	r5
     d8c:	b938      	cbnz	r0, d9e <main+0x7e>
		delay_ms(DELAY_ERROR);
     d8e:	2064      	movs	r0, #100	; 0x64
     d90:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     d92:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d96:	4b58      	ldr	r3, [pc, #352]	; (ef8 <main+0x1d8>)
     d98:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     d9c:	e7f4      	b.n	d88 <main+0x68>
		gpio_toggle_pin_level(LED0);
	}
	while(!fans.Init()){
     d9e:	4e5f      	ldr	r6, [pc, #380]	; (f1c <main+0x1fc>)
     da0:	4d5f      	ldr	r5, [pc, #380]	; (f20 <main+0x200>)
		delay_ms(DELAY_ERROR);
     da2:	4c50      	ldr	r4, [pc, #320]	; (ee4 <main+0x1c4>)
	while(!fans.Init()){
     da4:	4630      	mov	r0, r6
     da6:	47a8      	blx	r5
     da8:	b938      	cbnz	r0, dba <main+0x9a>
		delay_ms(DELAY_ERROR);
     daa:	2064      	movs	r0, #100	; 0x64
     dac:	47a0      	blx	r4
     dae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     db2:	4b51      	ldr	r3, [pc, #324]	; (ef8 <main+0x1d8>)
     db4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     db8:	e7f4      	b.n	da4 <main+0x84>
		gpio_toggle_pin_level(LED0);
		
	}
	fans.condesator->SetEnable(false);
     dba:	4c58      	ldr	r4, [pc, #352]	; (f1c <main+0x1fc>)
     dbc:	2100      	movs	r1, #0
     dbe:	6e60      	ldr	r0, [r4, #100]	; 0x64
     dc0:	4b58      	ldr	r3, [pc, #352]	; (f24 <main+0x204>)
     dc2:	4798      	blx	r3
	fans.evaporator[0]->SetEnable(false);
     dc4:	2100      	movs	r1, #0
     dc6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
     dc8:	4d57      	ldr	r5, [pc, #348]	; (f28 <main+0x208>)
     dca:	47a8      	blx	r5
	fans.evaporator[1]->SetEnable(false);
     dcc:	2100      	movs	r1, #0
     dce:	6e20      	ldr	r0, [r4, #96]	; 0x60
     dd0:	47a8      	blx	r5
// 	
	while(!heaters.Init()){
     dd2:	4e56      	ldr	r6, [pc, #344]	; (f2c <main+0x20c>)
     dd4:	4d56      	ldr	r5, [pc, #344]	; (f30 <main+0x210>)
		delay_ms(DELAY_ERROR);
     dd6:	4c43      	ldr	r4, [pc, #268]	; (ee4 <main+0x1c4>)
	while(!heaters.Init()){
     dd8:	4630      	mov	r0, r6
     dda:	47a8      	blx	r5
     ddc:	b938      	cbnz	r0, dee <main+0xce>
		delay_ms(DELAY_ERROR);
     dde:	2064      	movs	r0, #100	; 0x64
     de0:	47a0      	blx	r4
     de2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     de6:	4b44      	ldr	r3, [pc, #272]	; (ef8 <main+0x1d8>)
     de8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     dec:	e7f4      	b.n	dd8 <main+0xb8>
		gpio_toggle_pin_level(LED0);

			}
	while(!scavenge.Init()){
     dee:	4e51      	ldr	r6, [pc, #324]	; (f34 <main+0x214>)
     df0:	4d51      	ldr	r5, [pc, #324]	; (f38 <main+0x218>)
		delay_ms(DELAY_ERROR);
     df2:	4c3c      	ldr	r4, [pc, #240]	; (ee4 <main+0x1c4>)
	while(!scavenge.Init()){
     df4:	4630      	mov	r0, r6
     df6:	47a8      	blx	r5
     df8:	b938      	cbnz	r0, e0a <main+0xea>
		delay_ms(DELAY_ERROR);
     dfa:	2064      	movs	r0, #100	; 0x64
     dfc:	47a0      	blx	r4
     dfe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     e02:	4b3d      	ldr	r3, [pc, #244]	; (ef8 <main+0x1d8>)
     e04:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     e08:	e7f4      	b.n	df4 <main+0xd4>

		gpio_toggle_pin_level(LED0);

	}
	scavenge.SetEnable(false);
     e0a:	2100      	movs	r1, #0
     e0c:	4849      	ldr	r0, [pc, #292]	; (f34 <main+0x214>)
     e0e:	4b4b      	ldr	r3, [pc, #300]	; (f3c <main+0x21c>)
     e10:	4798      	blx	r3
	while(!ccu.Init()){
     e12:	4e4b      	ldr	r6, [pc, #300]	; (f40 <main+0x220>)
     e14:	4d4b      	ldr	r5, [pc, #300]	; (f44 <main+0x224>)
		delay_ms(DELAY_ERROR);
     e16:	4c33      	ldr	r4, [pc, #204]	; (ee4 <main+0x1c4>)
	while(!ccu.Init()){
     e18:	4630      	mov	r0, r6
     e1a:	47a8      	blx	r5
     e1c:	b938      	cbnz	r0, e2e <main+0x10e>
		delay_ms(DELAY_ERROR);
     e1e:	2064      	movs	r0, #100	; 0x64
     e20:	47a0      	blx	r4
     e22:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     e26:	4b34      	ldr	r3, [pc, #208]	; (ef8 <main+0x1d8>)
     e28:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     e2c:	e7f4      	b.n	e18 <main+0xf8>
		gpio_toggle_pin_level(LED0);
	}
	ccu.SetEnable(false);
     e2e:	2100      	movs	r1, #0
     e30:	4845      	ldr	r0, [pc, #276]	; (f48 <main+0x228>)
     e32:	4b46      	ldr	r3, [pc, #280]	; (f4c <main+0x22c>)
     e34:	4798      	blx	r3
	
	
	
	usb.Init();
     e36:	4846      	ldr	r0, [pc, #280]	; (f50 <main+0x230>)
     e38:	4b46      	ldr	r3, [pc, #280]	; (f54 <main+0x234>)
     e3a:	4798      	blx	r3
	
	



	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareIsAlive),1000);
     e3c:	4c46      	ldr	r4, [pc, #280]	; (f58 <main+0x238>)
     e3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     e42:	4946      	ldr	r1, [pc, #280]	; (f5c <main+0x23c>)
     e44:	f104 000c 	add.w	r0, r4, #12
     e48:	4b45      	ldr	r3, [pc, #276]	; (f60 <main+0x240>)
     e4a:	4798      	blx	r3
	uint8_t localPosition;
 	//flapper.valve1->StartControlling(220);

 	//flapper.valve2->StartControlling(220);
	
	userApp.Init();
     e4c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
     e50:	4b44      	ldr	r3, [pc, #272]	; (f64 <main+0x244>)
     e52:	4798      	blx	r3

	
	


	logger.SaveInstationLog();
     e54:	4824      	ldr	r0, [pc, #144]	; (ee8 <main+0x1c8>)
     e56:	4b44      	ldr	r3, [pc, #272]	; (f68 <main+0x248>)
     e58:	4798      	blx	r3

	while (1)
	{
		
		if (userApp.IsAppConnected())
     e5a:	4625      	mov	r5, r4
     e5c:	f8df 8124 	ldr.w	r8, [pc, #292]	; f84 <main+0x264>
		{
			userApp.handleCommunication();			
     e60:	f8df 9124 	ldr.w	r9, [pc, #292]	; f88 <main+0x268>
		}
	//	delay_ms(10);
		
	//	while ((!flapper.valve1->gotSetpoint)|((!flapper.valve2->gotSetpoint)&false))
	//	{
			flapper.valve1->Control_NBC_StandAlone_Reset();
     e64:	4e2b      	ldr	r6, [pc, #172]	; (f14 <main+0x1f4>)
     e66:	e037      	b.n	ed8 <main+0x1b8>
			userApp.handleCommunication();			
     e68:	4638      	mov	r0, r7
     e6a:	47c8      	blx	r9
     e6c:	e010      	b.n	e90 <main+0x170>
						gotNewTemperature=true;
					
					}
				
				}
				temperatures.StartOneConversion();
     e6e:	4826      	ldr	r0, [pc, #152]	; (f08 <main+0x1e8>)
     e70:	4b27      	ldr	r3, [pc, #156]	; (f10 <main+0x1f0>)
     e72:	4798      	blx	r3
				asm("nop");
     e74:	bf00      	nop
			}
		}
		
		
		ccu.Periodic_Task();
     e76:	4832      	ldr	r0, [pc, #200]	; (f40 <main+0x220>)
     e78:	4b3c      	ldr	r3, [pc, #240]	; (f6c <main+0x24c>)
     e7a:	4798      	blx	r3
		counter_running++;
     e7c:	682a      	ldr	r2, [r5, #0]
     e7e:	3201      	adds	r2, #1
     e80:	602a      	str	r2, [r5, #0]
		if (counter_running%0x100==0)
     e82:	f012 0fff 	tst.w	r2, #255	; 0xff
     e86:	d021      	beq.n	ecc <main+0x1ac>
		if (userApp.IsAppConnected())
     e88:	4638      	mov	r0, r7
     e8a:	47c0      	blx	r8
     e8c:	2800      	cmp	r0, #0
     e8e:	d1eb      	bne.n	e68 <main+0x148>
			flapper.valve1->Control_NBC_StandAlone_Reset();
     e90:	f8d6 00dc 	ldr.w	r0, [r6, #220]	; 0xdc
     e94:	4c36      	ldr	r4, [pc, #216]	; (f70 <main+0x250>)
     e96:	47a0      	blx	r4
			flapper.valve2->Control_NBC_StandAlone_Reset();
     e98:	f8d6 00e0 	ldr.w	r0, [r6, #224]	; 0xe0
     e9c:	47a0      	blx	r4
		if (temperatures.isOK)
     e9e:	4b1a      	ldr	r3, [pc, #104]	; (f08 <main+0x1e8>)
     ea0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
     ea4:	2b00      	cmp	r3, #0
     ea6:	d0e6      	beq.n	e76 <main+0x156>
			if (temperatures.IsConversionFinished())
     ea8:	4817      	ldr	r0, [pc, #92]	; (f08 <main+0x1e8>)
     eaa:	4b32      	ldr	r3, [pc, #200]	; (f74 <main+0x254>)
     eac:	4798      	blx	r3
     eae:	2800      	cmp	r0, #0
     eb0:	d0e1      	beq.n	e76 <main+0x156>
				temperatures.GetConversionResult();
     eb2:	4c15      	ldr	r4, [pc, #84]	; (f08 <main+0x1e8>)
     eb4:	4620      	mov	r0, r4
     eb6:	4b30      	ldr	r3, [pc, #192]	; (f78 <main+0x258>)
     eb8:	4798      	blx	r3
				if (temperatures.faultData==VALID_TEMPERATURE)
     eba:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
     ebe:	2b01      	cmp	r3, #1
     ec0:	d1d5      	bne.n	e6e <main+0x14e>
					currentTemperature=temperatures.lastValue;
     ec2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
     ec6:	f8c5 3204 	str.w	r3, [r5, #516]	; 0x204
     eca:	e7d0      	b.n	e6e <main+0x14e>
		{
			logger.SaveEventIndexResult("Running  like crazy!!!: ",(uint8_t)counter_running,0);
     ecc:	2300      	movs	r3, #0
     ece:	b2d2      	uxtb	r2, r2
     ed0:	492a      	ldr	r1, [pc, #168]	; (f7c <main+0x25c>)
     ed2:	4805      	ldr	r0, [pc, #20]	; (ee8 <main+0x1c8>)
     ed4:	4c2a      	ldr	r4, [pc, #168]	; (f80 <main+0x260>)
     ed6:	47a0      	blx	r4
		if (userApp.IsAppConnected())
     ed8:	f105 072c 	add.w	r7, r5, #44	; 0x2c
     edc:	e7d4      	b.n	e88 <main+0x168>
     ede:	bf00      	nop
     ee0:	000017f5 	.word	0x000017f5
     ee4:	00003625 	.word	0x00003625
     ee8:	20003a18 	.word	0x20003a18
     eec:	000117b9 	.word	0x000117b9
     ef0:	20006a98 	.word	0x20006a98
     ef4:	0001419d 	.word	0x0001419d
     ef8:	41008000 	.word	0x41008000
     efc:	000140e5 	.word	0x000140e5
     f00:	0001ab3c 	.word	0x0001ab3c
     f04:	00011acd 	.word	0x00011acd
     f08:	2000cdfc 	.word	0x2000cdfc
     f0c:	00014601 	.word	0x00014601
     f10:	000146b5 	.word	0x000146b5
     f14:	2000530c 	.word	0x2000530c
     f18:	00011dc1 	.word	0x00011dc1
     f1c:	20003758 	.word	0x20003758
     f20:	000113dd 	.word	0x000113dd
     f24:	00011219 	.word	0x00011219
     f28:	000115d5 	.word	0x000115d5
     f2c:	20002e6c 	.word	0x20002e6c
     f30:	0000f9d1 	.word	0x0000f9d1
     f34:	2000cde8 	.word	0x2000cde8
     f38:	00014415 	.word	0x00014415
     f3c:	000143dd 	.word	0x000143dd
     f40:	200028f4 	.word	0x200028f4
     f44:	0000eff5 	.word	0x0000eff5
     f48:	20002a90 	.word	0x20002a90
     f4c:	0000f3bd 	.word	0x0000f3bd
     f50:	20003460 	.word	0x20003460
     f54:	00010909 	.word	0x00010909
     f58:	20001b80 	.word	0x20001b80
     f5c:	00000cf1 	.word	0x00000cf1
     f60:	00010385 	.word	0x00010385
     f64:	0000128d 	.word	0x0000128d
     f68:	00011911 	.word	0x00011911
     f6c:	0000f679 	.word	0x0000f679
     f70:	000124fd 	.word	0x000124fd
     f74:	00014791 	.word	0x00014791
     f78:	000146fd 	.word	0x000146fd
     f7c:	0001ab50 	.word	0x0001ab50
     f80:	00011a19 	.word	0x00011a19
     f84:	0000176d 	.word	0x0000176d
     f88:	0000168d 	.word	0x0000168d

00000f8c <_GLOBAL__sub_I_localtimeout>:
// 		delay_ms(500	
//		}
	}

	
}
     f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     f90:	4c30      	ldr	r4, [pc, #192]	; (1054 <_GLOBAL__sub_I_localtimeout+0xc8>)
     f92:	f504 7502 	add.w	r5, r4, #520	; 0x208
     f96:	4930      	ldr	r1, [pc, #192]	; (1058 <_GLOBAL__sub_I_localtimeout+0xcc>)
     f98:	4628      	mov	r0, r5
     f9a:	4f30      	ldr	r7, [pc, #192]	; (105c <_GLOBAL__sub_I_localtimeout+0xd0>)
     f9c:	47b8      	blx	r7
     f9e:	4e30      	ldr	r6, [pc, #192]	; (1060 <_GLOBAL__sub_I_localtimeout+0xd4>)
     fa0:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1098 <_GLOBAL__sub_I_localtimeout+0x10c>
     fa4:	4632      	mov	r2, r6
     fa6:	4641      	mov	r1, r8
     fa8:	4628      	mov	r0, r5
     faa:	4d2e      	ldr	r5, [pc, #184]	; (1064 <_GLOBAL__sub_I_localtimeout+0xd8>)
     fac:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     fae:	f504 790a 	add.w	r9, r4, #552	; 0x228
     fb2:	492d      	ldr	r1, [pc, #180]	; (1068 <_GLOBAL__sub_I_localtimeout+0xdc>)
     fb4:	4648      	mov	r0, r9
     fb6:	47b8      	blx	r7
     fb8:	4632      	mov	r2, r6
     fba:	4641      	mov	r1, r8
     fbc:	4648      	mov	r0, r9
     fbe:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     fc0:	f104 090c 	add.w	r9, r4, #12
     fc4:	4929      	ldr	r1, [pc, #164]	; (106c <_GLOBAL__sub_I_localtimeout+0xe0>)
     fc6:	4648      	mov	r0, r9
     fc8:	47b8      	blx	r7
     fca:	4632      	mov	r2, r6
     fcc:	4641      	mov	r1, r8
     fce:	4648      	mov	r0, r9
     fd0:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     fd2:	f504 7912 	add.w	r9, r4, #584	; 0x248
     fd6:	4926      	ldr	r1, [pc, #152]	; (1070 <_GLOBAL__sub_I_localtimeout+0xe4>)
     fd8:	4648      	mov	r0, r9
     fda:	47b8      	blx	r7
     fdc:	4632      	mov	r2, r6
     fde:	4641      	mov	r1, r8
     fe0:	4648      	mov	r0, r9
     fe2:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     fe4:	f504 791a 	add.w	r9, r4, #616	; 0x268
     fe8:	4922      	ldr	r1, [pc, #136]	; (1074 <_GLOBAL__sub_I_localtimeout+0xe8>)
     fea:	4648      	mov	r0, r9
     fec:	47b8      	blx	r7
     fee:	4632      	mov	r2, r6
     ff0:	4641      	mov	r1, r8
     ff2:	4648      	mov	r0, r9
     ff4:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     ff6:	f504 7922 	add.w	r9, r4, #648	; 0x288
     ffa:	491f      	ldr	r1, [pc, #124]	; (1078 <_GLOBAL__sub_I_localtimeout+0xec>)
     ffc:	4648      	mov	r0, r9
     ffe:	47b8      	blx	r7
    1000:	4632      	mov	r2, r6
    1002:	4641      	mov	r1, r8
    1004:	4648      	mov	r0, r9
    1006:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    1008:	f504 792a 	add.w	r9, r4, #680	; 0x2a8
    100c:	491b      	ldr	r1, [pc, #108]	; (107c <_GLOBAL__sub_I_localtimeout+0xf0>)
    100e:	4648      	mov	r0, r9
    1010:	47b8      	blx	r7
    1012:	4632      	mov	r2, r6
    1014:	4641      	mov	r1, r8
    1016:	4648      	mov	r0, r9
    1018:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
    101a:	f504 7932 	add.w	r9, r4, #712	; 0x2c8
    101e:	4918      	ldr	r1, [pc, #96]	; (1080 <_GLOBAL__sub_I_localtimeout+0xf4>)
    1020:	4648      	mov	r0, r9
    1022:	47b8      	blx	r7
    1024:	4632      	mov	r2, r6
    1026:	4641      	mov	r1, r8
    1028:	4648      	mov	r0, r9
    102a:	47a8      	blx	r5
    102c:	f504 773a 	add.w	r7, r4, #744	; 0x2e8
    1030:	4914      	ldr	r1, [pc, #80]	; (1084 <_GLOBAL__sub_I_localtimeout+0xf8>)
    1032:	4638      	mov	r0, r7
    1034:	4b14      	ldr	r3, [pc, #80]	; (1088 <_GLOBAL__sub_I_localtimeout+0xfc>)
    1036:	4798      	blx	r3
    1038:	4632      	mov	r2, r6
    103a:	4914      	ldr	r1, [pc, #80]	; (108c <_GLOBAL__sub_I_localtimeout+0x100>)
    103c:	4638      	mov	r0, r7
    103e:	47a8      	blx	r5
static Maintenance_Tool	userApp;
    1040:	342c      	adds	r4, #44	; 0x2c
    1042:	4620      	mov	r0, r4
    1044:	4b12      	ldr	r3, [pc, #72]	; (1090 <_GLOBAL__sub_I_localtimeout+0x104>)
    1046:	4798      	blx	r3
    1048:	4632      	mov	r2, r6
    104a:	4912      	ldr	r1, [pc, #72]	; (1094 <_GLOBAL__sub_I_localtimeout+0x108>)
    104c:	4620      	mov	r0, r4
    104e:	47a8      	blx	r5
    1050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1054:	20001b80 	.word	0x20001b80
    1058:	2000dec8 	.word	0x2000dec8
    105c:	000101a9 	.word	0x000101a9
    1060:	20000000 	.word	0x20000000
    1064:	0001a0b5 	.word	0x0001a0b5
    1068:	2000df5c 	.word	0x2000df5c
    106c:	2000e080 	.word	0x2000e080
    1070:	2000df7c 	.word	0x2000df7c
    1074:	2000e040 	.word	0x2000e040
    1078:	2000e060 	.word	0x2000e060
    107c:	2000df38 	.word	0x2000df38
    1080:	2000dfd8 	.word	0x2000dfd8
    1084:	2000dff8 	.word	0x2000dff8
    1088:	0000faf1 	.word	0x0000faf1
    108c:	0000fb0d 	.word	0x0000fb0d
    1090:	00001165 	.word	0x00001165
    1094:	00001119 	.word	0x00001119
    1098:	000101e1 	.word	0x000101e1

0000109c <_ZN22MaintenanceDataHandlerC1Ev>:
    109c:	2264      	movs	r2, #100	; 0x64
    109e:	7002      	strb	r2, [r0, #0]
    10a0:	2263      	movs	r2, #99	; 0x63
    10a2:	7042      	strb	r2, [r0, #1]
    10a4:	2262      	movs	r2, #98	; 0x62
    10a6:	7082      	strb	r2, [r0, #2]
    10a8:	2261      	movs	r2, #97	; 0x61
    10aa:	70c2      	strb	r2, [r0, #3]
    10ac:	2200      	movs	r2, #0
    10ae:	7142      	strb	r2, [r0, #5]
#include "string.h"

// default constructor
MaintenanceDataHandler::MaintenanceDataHandler()
{
	sizeFullBufferMessage=FULL_MESSAGE_SIZE;
    10b0:	223a      	movs	r2, #58	; 0x3a
    10b2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} //MaintenanceDataHandler
    10b6:	4770      	bx	lr

000010b8 <_ZN22MaintenanceDataHandlerD1Ev>:

// default destructor
MaintenanceDataHandler::~MaintenanceDataHandler()
{
} //~MaintenanceDataHandler
    10b8:	4770      	bx	lr
	...

000010bc <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_>:

uint8_t MaintenanceDataHandler::CreateFullBufferMessage(uint8_t *localBuff,  uint8_t *data){
    10bc:	b570      	push	{r4, r5, r6, lr}
    10be:	4605      	mov	r5, r0
    10c0:	460c      	mov	r4, r1
    10c2:	4611      	mov	r1, r2
	
	memcpy((void*)fullBufferMessage.content,(void*)data,sizeFullBufferMessage);
    10c4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    10c8:	3006      	adds	r0, #6
    10ca:	4b09      	ldr	r3, [pc, #36]	; (10f0 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x34>)
    10cc:	4798      	blx	r3
	memcpy((void*)localBuff,(void *)&fullBufferMessage,MAINTENANCE_TOOL_BUFFER_SIZE);
    10ce:	462b      	mov	r3, r5
    10d0:	4621      	mov	r1, r4
    10d2:	3540      	adds	r5, #64	; 0x40
    10d4:	681e      	ldr	r6, [r3, #0]
    10d6:	685c      	ldr	r4, [r3, #4]
    10d8:	6898      	ldr	r0, [r3, #8]
    10da:	68da      	ldr	r2, [r3, #12]
    10dc:	600e      	str	r6, [r1, #0]
    10de:	604c      	str	r4, [r1, #4]
    10e0:	6088      	str	r0, [r1, #8]
    10e2:	60ca      	str	r2, [r1, #12]
    10e4:	3310      	adds	r3, #16
    10e6:	3110      	adds	r1, #16
    10e8:	42ab      	cmp	r3, r5
    10ea:	d1f3      	bne.n	10d4 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x18>
	return 0;
}
    10ec:	2000      	movs	r0, #0
    10ee:	bd70      	pop	{r4, r5, r6, pc}
    10f0:	0001a635 	.word	0x0001a635

000010f4 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
    10f4:	4b03      	ldr	r3, [pc, #12]	; (1104 <_ZL21MaintenaceToolTimmingPK10timer_task+0x10>)
    10f6:	681a      	ldr	r2, [r3, #0]
    10f8:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
    10fc:	3301      	adds	r3, #1
    10fe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    1102:	4770      	bx	lr
    1104:	20001e84 	.word	0x20001e84

00001108 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
    1108:	4b02      	ldr	r3, [pc, #8]	; (1114 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
    110a:	681b      	ldr	r3, [r3, #0]
    110c:	2200      	movs	r2, #0
    110e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    1112:	4770      	bx	lr
    1114:	20001e84 	.word	0x20001e84

00001118 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	localBuffer=staticBuffer;
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
    1118:	b538      	push	{r3, r4, r5, lr}
    111a:	4604      	mov	r4, r0
    111c:	4b0a      	ldr	r3, [pc, #40]	; (1148 <_ZN16Maintenance_ToolD1Ev+0x30>)
    111e:	6003      	str	r3, [r0, #0]
{
	ticks=0;
    1120:	2300      	movs	r3, #0
    1122:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	interfaceTimer.Stop();
    1126:	4d09      	ldr	r5, [pc, #36]	; (114c <_ZN16Maintenance_ToolD1Ev+0x34>)
    1128:	4628      	mov	r0, r5
    112a:	4b09      	ldr	r3, [pc, #36]	; (1150 <_ZN16Maintenance_ToolD1Ev+0x38>)
    112c:	4798      	blx	r3
	interfaceTimer.Remove_task();
    112e:	4628      	mov	r0, r5
    1130:	4b08      	ldr	r3, [pc, #32]	; (1154 <_ZN16Maintenance_ToolD1Ev+0x3c>)
    1132:	4798      	blx	r3
Maintenance_Tool::~Maintenance_Tool()
    1134:	4908      	ldr	r1, [pc, #32]	; (1158 <_ZN16Maintenance_ToolD1Ev+0x40>)
    1136:	4620      	mov	r0, r4
    1138:	4b08      	ldr	r3, [pc, #32]	; (115c <_ZN16Maintenance_ToolD1Ev+0x44>)
    113a:	4798      	blx	r3
    113c:	f504 70ca 	add.w	r0, r4, #404	; 0x194
    1140:	4b07      	ldr	r3, [pc, #28]	; (1160 <_ZN16Maintenance_ToolD1Ev+0x48>)
    1142:	4798      	blx	r3
	
} //~Maintenance_Tool
    1144:	4620      	mov	r0, r4
    1146:	bd38      	pop	{r3, r4, r5, pc}
    1148:	0001ab8c 	.word	0x0001ab8c
    114c:	20001e88 	.word	0x20001e88
    1150:	00010309 	.word	0x00010309
    1154:	000103f9 	.word	0x000103f9
    1158:	0001ab7c 	.word	0x0001ab7c
    115c:	00000319 	.word	0x00000319
    1160:	000010b9 	.word	0x000010b9

00001164 <_ZN16Maintenance_ToolC1Ev>:
Maintenance_Tool::Maintenance_Tool()
    1164:	b538      	push	{r3, r4, r5, lr}
    1166:	4604      	mov	r4, r0
    1168:	f500 70ca 	add.w	r0, r0, #404	; 0x194
    116c:	4b17      	ldr	r3, [pc, #92]	; (11cc <_ZN16Maintenance_ToolC1Ev+0x68>)
    116e:	4798      	blx	r3
    1170:	4917      	ldr	r1, [pc, #92]	; (11d0 <_ZN16Maintenance_ToolC1Ev+0x6c>)
    1172:	4620      	mov	r0, r4
    1174:	4b17      	ldr	r3, [pc, #92]	; (11d4 <_ZN16Maintenance_ToolC1Ev+0x70>)
    1176:	4798      	blx	r3
    1178:	4b17      	ldr	r3, [pc, #92]	; (11d8 <_ZN16Maintenance_ToolC1Ev+0x74>)
    117a:	6023      	str	r3, [r4, #0]
    117c:	2300      	movs	r3, #0
    117e:	2564      	movs	r5, #100	; 0x64
    1180:	f884 50f8 	strb.w	r5, [r4, #248]	; 0xf8
    1184:	2063      	movs	r0, #99	; 0x63
    1186:	f884 00f9 	strb.w	r0, [r4, #249]	; 0xf9
    118a:	2162      	movs	r1, #98	; 0x62
    118c:	f884 10fa 	strb.w	r1, [r4, #250]	; 0xfa
    1190:	2261      	movs	r2, #97	; 0x61
    1192:	f884 20fb 	strb.w	r2, [r4, #251]	; 0xfb
    1196:	f884 30fd 	strb.w	r3, [r4, #253]	; 0xfd
    119a:	f884 5186 	strb.w	r5, [r4, #390]	; 0x186
    119e:	f884 0187 	strb.w	r0, [r4, #391]	; 0x187
    11a2:	f884 1188 	strb.w	r1, [r4, #392]	; 0x188
    11a6:	f884 2189 	strb.w	r2, [r4, #393]	; 0x189
    11aa:	f884 318b 	strb.w	r3, [r4, #395]	; 0x18b
	ptrMaintenanceTool=this;
    11ae:	4a0b      	ldr	r2, [pc, #44]	; (11dc <_ZN16Maintenance_ToolC1Ev+0x78>)
    11b0:	f842 4b24 	str.w	r4, [r2], #36
	maintenanceIsConnected = false;
    11b4:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	nextMaintenanceSyncTime = 0;
    11b8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	nextMaintenanceUsageTimerSyncTime = 0;
    11bc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	ticks=0;
    11c0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	localBuffer=staticBuffer;
    11c4:	f8c4 2190 	str.w	r2, [r4, #400]	; 0x190
} //Maintenance_Tool
    11c8:	4620      	mov	r0, r4
    11ca:	bd38      	pop	{r3, r4, r5, pc}
    11cc:	0000109d 	.word	0x0000109d
    11d0:	0001ab7c 	.word	0x0001ab7c
    11d4:	000002d1 	.word	0x000002d1
    11d8:	0001ab8c 	.word	0x0001ab8c
    11dc:	20001e84 	.word	0x20001e84

000011e0 <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
    11e0:	b410      	push	{r4}
    11e2:	4604      	mov	r4, r0
    11e4:	2300      	movs	r3, #0
	uint8_t i;
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
    11e6:	4619      	mov	r1, r3
    11e8:	f8d4 2190 	ldr.w	r2, [r4, #400]	; 0x190
    11ec:	54d1      	strb	r1, [r2, r3]
    11ee:	1c58      	adds	r0, r3, #1
    11f0:	b2c0      	uxtb	r0, r0
    11f2:	3301      	adds	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
    11f4:	2b40      	cmp	r3, #64	; 0x40
    11f6:	d1f7      	bne.n	11e8 <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
	}
	return	i;
}
    11f8:	bc10      	pop	{r4}
    11fa:	4770      	bx	lr

000011fc <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
    11fc:	f890 30b4 	ldrb.w	r3, [r0, #180]	; 0xb4
    1200:	b933      	cbnz	r3, 1210 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x14>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
    1202:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
		maintenanceIsConnected = true;
    1206:	2301      	movs	r3, #1
    1208:	f880 30b4 	strb.w	r3, [r0, #180]	; 0xb4
		bSendNotifications = true;
    120c:	f880 30b5 	strb.w	r3, [r0, #181]	; 0xb5
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
    1210:	f890 015c 	ldrb.w	r0, [r0, #348]	; 0x15c
    1214:	4770      	bx	lr

00001216 <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
    1216:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
    1218:	0855      	lsrs	r5, r2, #1
    121a:	d007      	beq.n	122c <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
    121c:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
    121e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
    1222:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
    1224:	3401      	adds	r4, #1
    1226:	b2a4      	uxth	r4, r4
    1228:	42ac      	cmp	r4, r5
    122a:	dbf8      	blt.n	121e <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
    122c:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
    1230:	bf1d      	ittte	ne
    1232:	189b      	addne	r3, r3, r2
    1234:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
    1238:	4048      	eorne	r0, r1
    123a:	4608      	moveq	r0, r1

	return checksum;
	}
    123c:	bc30      	pop	{r4, r5}
    123e:	4770      	bx	lr

00001240 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
    1240:	b538      	push	{r3, r4, r5, lr}
    1242:	4604      	mov	r4, r0
	checksum=0;
    1244:	2500      	movs	r5, #0
    1246:	f8a0 5162 	strh.w	r5, [r0, #354]	; 0x162
	checksum = calculateChecksum(0, sizeof(header), &header);
    124a:	460b      	mov	r3, r1
    124c:	2206      	movs	r2, #6
    124e:	4629      	mov	r1, r5
    1250:	4d02      	ldr	r5, [pc, #8]	; (125c <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
    1252:	47a8      	blx	r5
    1254:	f8a4 0162 	strh.w	r0, [r4, #354]	; 0x162
	}
    1258:	bd38      	pop	{r3, r4, r5, pc}
    125a:	bf00      	nop
    125c:	00001217 	.word	0x00001217

00001260 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
{
	uint8_t i;
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
    1260:	4b06      	ldr	r3, [pc, #24]	; (127c <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x1c>)
    1262:	681b      	ldr	r3, [r3, #0]
    1264:	600b      	str	r3, [r1, #0]
    1266:	4b06      	ldr	r3, [pc, #24]	; (1280 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x20>)
    1268:	681b      	ldr	r3, [r3, #0]
    126a:	604b      	str	r3, [r1, #4]
    126c:	4b05      	ldr	r3, [pc, #20]	; (1284 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x24>)
    126e:	681b      	ldr	r3, [r3, #0]
    1270:	608b      	str	r3, [r1, #8]
    1272:	4b05      	ldr	r3, [pc, #20]	; (1288 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
    1274:	681b      	ldr	r3, [r3, #0]
    1276:	60cb      	str	r3, [r1, #12]
    1278:	4770      	bx	lr
    127a:	bf00      	nop
    127c:	41002018 	.word	0x41002018
    1280:	4100201c 	.word	0x4100201c
    1284:	41002020 	.word	0x41002020
    1288:	41002024 	.word	0x41002024

0000128c <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
    128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    128e:	4604      	mov	r4, r0
	ticks=0;
    1290:	2600      	movs	r6, #0
    1292:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
	interfaceTimer.Init();
    1296:	4d14      	ldr	r5, [pc, #80]	; (12e8 <_ZN16Maintenance_Tool4InitEv+0x5c>)
    1298:	4628      	mov	r0, r5
    129a:	4b14      	ldr	r3, [pc, #80]	; (12ec <_ZN16Maintenance_Tool4InitEv+0x60>)
    129c:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
    129e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    12a2:	4913      	ldr	r1, [pc, #76]	; (12f0 <_ZN16Maintenance_Tool4InitEv+0x64>)
    12a4:	4628      	mov	r0, r5
    12a6:	4b13      	ldr	r3, [pc, #76]	; (12f4 <_ZN16Maintenance_Tool4InitEv+0x68>)
    12a8:	4798      	blx	r3
	InitCommandHandler(localBuffer);
    12aa:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    12ae:	4620      	mov	r0, r4
    12b0:	4b11      	ldr	r3, [pc, #68]	; (12f8 <_ZN16Maintenance_Tool4InitEv+0x6c>)
    12b2:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
    12b4:	f204 1569 	addw	r5, r4, #361	; 0x169
    12b8:	4629      	mov	r1, r5
    12ba:	4620      	mov	r0, r4
    12bc:	4b0f      	ldr	r3, [pc, #60]	; (12fc <_ZN16Maintenance_Tool4InitEv+0x70>)
    12be:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
    12c0:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    12c4:	f8d4 7169 	ldr.w	r7, [r4, #361]	; 0x169
    12c8:	f8d4 016d 	ldr.w	r0, [r4, #365]	; 0x16d
    12cc:	f8d4 1171 	ldr.w	r1, [r4, #369]	; 0x171
    12d0:	f8d4 2175 	ldr.w	r2, [r4, #373]	; 0x175
    12d4:	601f      	str	r7, [r3, #0]
    12d6:	6058      	str	r0, [r3, #4]
    12d8:	6099      	str	r1, [r3, #8]
    12da:	60da      	str	r2, [r3, #12]
	gotAccess=false;
    12dc:	f884 615d 	strb.w	r6, [r4, #349]	; 0x15d
}
    12e0:	f894 015c 	ldrb.w	r0, [r4, #348]	; 0x15c
    12e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12e6:	bf00      	nop
    12e8:	20001e88 	.word	0x20001e88
    12ec:	00010295 	.word	0x00010295
    12f0:	000010f5 	.word	0x000010f5
    12f4:	000103d1 	.word	0x000103d1
    12f8:	00000321 	.word	0x00000321
    12fc:	00001261 	.word	0x00001261

00001300 <_GLOBAL__sub_I_ptrMaintenanceTool>:
	}

}
    1300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    1304:	4c31      	ldr	r4, [pc, #196]	; (13cc <_GLOBAL__sub_I_ptrMaintenanceTool+0xcc>)
    1306:	f104 0564 	add.w	r5, r4, #100	; 0x64
    130a:	4931      	ldr	r1, [pc, #196]	; (13d0 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd0>)
    130c:	4628      	mov	r0, r5
    130e:	4f31      	ldr	r7, [pc, #196]	; (13d4 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd4>)
    1310:	47b8      	blx	r7
    1312:	4e31      	ldr	r6, [pc, #196]	; (13d8 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd8>)
    1314:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1410 <_GLOBAL__sub_I_ptrMaintenanceTool+0x110>
    1318:	4632      	mov	r2, r6
    131a:	4641      	mov	r1, r8
    131c:	4628      	mov	r0, r5
    131e:	4d2f      	ldr	r5, [pc, #188]	; (13dc <_GLOBAL__sub_I_ptrMaintenanceTool+0xdc>)
    1320:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
    1322:	f104 0984 	add.w	r9, r4, #132	; 0x84
    1326:	492e      	ldr	r1, [pc, #184]	; (13e0 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe0>)
    1328:	4648      	mov	r0, r9
    132a:	47b8      	blx	r7
    132c:	4632      	mov	r2, r6
    132e:	4641      	mov	r1, r8
    1330:	4648      	mov	r0, r9
    1332:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
    1334:	f104 09a4 	add.w	r9, r4, #164	; 0xa4
    1338:	492a      	ldr	r1, [pc, #168]	; (13e4 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe4>)
    133a:	4648      	mov	r0, r9
    133c:	47b8      	blx	r7
    133e:	4632      	mov	r2, r6
    1340:	4641      	mov	r1, r8
    1342:	4648      	mov	r0, r9
    1344:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    1346:	f104 09c4 	add.w	r9, r4, #196	; 0xc4
    134a:	4927      	ldr	r1, [pc, #156]	; (13e8 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe8>)
    134c:	4648      	mov	r0, r9
    134e:	47b8      	blx	r7
    1350:	4632      	mov	r2, r6
    1352:	4641      	mov	r1, r8
    1354:	4648      	mov	r0, r9
    1356:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
    1358:	f104 09e4 	add.w	r9, r4, #228	; 0xe4
    135c:	4923      	ldr	r1, [pc, #140]	; (13ec <_GLOBAL__sub_I_ptrMaintenanceTool+0xec>)
    135e:	4648      	mov	r0, r9
    1360:	47b8      	blx	r7
    1362:	4632      	mov	r2, r6
    1364:	4641      	mov	r1, r8
    1366:	4648      	mov	r0, r9
    1368:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
    136a:	f504 7982 	add.w	r9, r4, #260	; 0x104
    136e:	4920      	ldr	r1, [pc, #128]	; (13f0 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf0>)
    1370:	4648      	mov	r0, r9
    1372:	47b8      	blx	r7
    1374:	4632      	mov	r2, r6
    1376:	4641      	mov	r1, r8
    1378:	4648      	mov	r0, r9
    137a:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    137c:	f104 0904 	add.w	r9, r4, #4
    1380:	491c      	ldr	r1, [pc, #112]	; (13f4 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf4>)
    1382:	4648      	mov	r0, r9
    1384:	47b8      	blx	r7
    1386:	4632      	mov	r2, r6
    1388:	4641      	mov	r1, r8
    138a:	4648      	mov	r0, r9
    138c:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
    138e:	f504 7992 	add.w	r9, r4, #292	; 0x124
    1392:	4919      	ldr	r1, [pc, #100]	; (13f8 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf8>)
    1394:	4648      	mov	r0, r9
    1396:	47b8      	blx	r7
    1398:	4632      	mov	r2, r6
    139a:	4641      	mov	r1, r8
    139c:	4648      	mov	r0, r9
    139e:	47a8      	blx	r5
    13a0:	f504 77a2 	add.w	r7, r4, #324	; 0x144
    13a4:	4915      	ldr	r1, [pc, #84]	; (13fc <_GLOBAL__sub_I_ptrMaintenanceTool+0xfc>)
    13a6:	4638      	mov	r0, r7
    13a8:	4b15      	ldr	r3, [pc, #84]	; (1400 <_GLOBAL__sub_I_ptrMaintenanceTool+0x100>)
    13aa:	4798      	blx	r3
    13ac:	4632      	mov	r2, r6
    13ae:	4915      	ldr	r1, [pc, #84]	; (1404 <_GLOBAL__sub_I_ptrMaintenanceTool+0x104>)
    13b0:	4638      	mov	r0, r7
    13b2:	47a8      	blx	r5
    13b4:	f504 74ae 	add.w	r4, r4, #348	; 0x15c
    13b8:	4620      	mov	r0, r4
    13ba:	4b13      	ldr	r3, [pc, #76]	; (1408 <_GLOBAL__sub_I_ptrMaintenanceTool+0x108>)
    13bc:	4798      	blx	r3
    13be:	4632      	mov	r2, r6
    13c0:	4912      	ldr	r1, [pc, #72]	; (140c <_GLOBAL__sub_I_ptrMaintenanceTool+0x10c>)
    13c2:	4620      	mov	r0, r4
    13c4:	47a8      	blx	r5
    13c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    13ca:	bf00      	nop
    13cc:	20001e84 	.word	0x20001e84
    13d0:	2000dec8 	.word	0x2000dec8
    13d4:	000101a9 	.word	0x000101a9
    13d8:	20000000 	.word	0x20000000
    13dc:	0001a0b5 	.word	0x0001a0b5
    13e0:	2000df5c 	.word	0x2000df5c
    13e4:	2000e080 	.word	0x2000e080
    13e8:	2000df7c 	.word	0x2000df7c
    13ec:	2000e040 	.word	0x2000e040
    13f0:	2000e060 	.word	0x2000e060
    13f4:	2000df38 	.word	0x2000df38
    13f8:	2000dfd8 	.word	0x2000dfd8
    13fc:	2000dff8 	.word	0x2000dff8
    1400:	0000faf1 	.word	0x0000faf1
    1404:	0000fb0d 	.word	0x0000fb0d
    1408:	00001165 	.word	0x00001165
    140c:	00001119 	.word	0x00001119
    1410:	000101e1 	.word	0x000101e1

00001414 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
    1414:	b538      	push	{r3, r4, r5, lr}
    1416:	4605      	mov	r5, r0
    1418:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
    141a:	4b05      	ldr	r3, [pc, #20]	; (1430 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
    141c:	4798      	blx	r3
    141e:	f8a5 0162 	strh.w	r0, [r5, #354]	; 0x162
	usb.writeData(&header, sizeof(header));
    1422:	2206      	movs	r2, #6
    1424:	4621      	mov	r1, r4
    1426:	4803      	ldr	r0, [pc, #12]	; (1434 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
    1428:	4b03      	ldr	r3, [pc, #12]	; (1438 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
    142a:	4798      	blx	r3
    142c:	bd38      	pop	{r3, r4, r5, pc}
    142e:	bf00      	nop
    1430:	00001241 	.word	0x00001241
    1434:	20003460 	.word	0x20003460
    1438:	00010b41 	.word	0x00010b41

0000143c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv>:
bool Maintenance_Tool::CommandReadTemmperatures(){
    143c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool	result(header.task == kHVACCommandReadTemperatures);
    1440:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
    1444:	2b4d      	cmp	r3, #77	; 0x4d
    1446:	bf0c      	ite	eq
    1448:	2501      	moveq	r5, #1
    144a:	2500      	movne	r5, #0
	if (result){
    144c:	d002      	beq.n	1454 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x18>
}
    144e:	4628      	mov	r0, r5
    1450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		singleTask.description=temperatures.faultData;
    1454:	4b18      	ldr	r3, [pc, #96]	; (14b8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
    1456:	f893 809c 	ldrb.w	r8, [r3, #156]	; 0x9c
		memcpy(localBuffer,(void*)&singleTask,n);
    145a:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
    145e:	4a17      	ldr	r2, [pc, #92]	; (14bc <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
    1460:	601a      	str	r2, [r3, #0]
    1462:	2200      	movs	r2, #0
    1464:	711a      	strb	r2, [r3, #4]
    1466:	224d      	movs	r2, #77	; 0x4d
    1468:	715a      	strb	r2, [r3, #5]
    146a:	f883 8006 	strb.w	r8, [r3, #6]
    146e:	2307      	movs	r3, #7
    1470:	4911      	ldr	r1, [pc, #68]	; (14b8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
    1472:	f103 0261 	add.w	r2, r3, #97	; 0x61
    1476:	440a      	add	r2, r1
    1478:	f103 0710 	add.w	r7, r3, #16
				memcpy(&localBuffer[n+4*((4*i)+j)],(void*)&temperatures.values[i][j],4);
    147c:	f852 4f04 	ldr.w	r4, [r2, #4]!
    1480:	f8d0 6190 	ldr.w	r6, [r0, #400]	; 0x190
    1484:	50f4      	str	r4, [r6, r3]
    1486:	3304      	adds	r3, #4
			for (int j = 0; j < 4; j++)
    1488:	42bb      	cmp	r3, r7
    148a:	d1f7      	bne.n	147c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x40>
		for (int i = 0; i < 3; i++)
    148c:	2b37      	cmp	r3, #55	; 0x37
    148e:	d1f0      	bne.n	1472 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x36>
    1490:	4604      	mov	r4, r0
		usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    1492:	2240      	movs	r2, #64	; 0x40
    1494:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    1498:	4809      	ldr	r0, [pc, #36]	; (14c0 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x84>)
    149a:	4b0a      	ldr	r3, [pc, #40]	; (14c4 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x88>)
    149c:	4798      	blx	r3
		singleTaskMessage=singleTask;
    149e:	4b07      	ldr	r3, [pc, #28]	; (14bc <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
    14a0:	f8c4 3186 	str.w	r3, [r4, #390]	; 0x186
    14a4:	2200      	movs	r2, #0
    14a6:	f884 218a 	strb.w	r2, [r4, #394]	; 0x18a
    14aa:	234d      	movs	r3, #77	; 0x4d
    14ac:	f884 318b 	strb.w	r3, [r4, #395]	; 0x18b
    14b0:	f884 818c 	strb.w	r8, [r4, #396]	; 0x18c
    14b4:	e7cb      	b.n	144e <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x12>
    14b6:	bf00      	nop
    14b8:	2000cdfc 	.word	0x2000cdfc
    14bc:	61626364 	.word	0x61626364
    14c0:	20003460 	.word	0x20003460
    14c4:	00010bd9 	.word	0x00010bd9

000014c8 <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
    14c8:	b570      	push	{r4, r5, r6, lr}
    14ca:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
    14cc:	f100 05f8 	add.w	r5, r0, #248	; 0xf8
    14d0:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
    14d4:	681a      	ldr	r2, [r3, #0]
    14d6:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    14da:	889b      	ldrh	r3, [r3, #4]
    14dc:	80ab      	strh	r3, [r5, #4]
	&& (header.task<kGAINNumberOfCommands))
    14de:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
    14e2:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
    14e4:	b2db      	uxtb	r3, r3
    14e6:	2b1c      	cmp	r3, #28
    14e8:	d81b      	bhi.n	1522 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x5a>
		gotTask=true;
    14ea:	2301      	movs	r3, #1
    14ec:	f880 315f 	strb.w	r3, [r0, #351]	; 0x15f
		result=gotTask;
    14f0:	f880 315c 	strb.w	r3, [r0, #348]	; 0x15c
		switch (header.task)
    14f4:	f894 30fd 	ldrb.w	r3, [r4, #253]	; 0xfd
    14f8:	3b41      	subs	r3, #65	; 0x41
    14fa:	2b1c      	cmp	r3, #28
    14fc:	f200 809a 	bhi.w	1634 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x16c>
    1500:	e8df f003 	tbb	[pc, r3]
    1504:	2f1f2922 	.word	0x2f1f2922
    1508:	3e381f1f 	.word	0x3e381f1f
    150c:	746e504a 	.word	0x746e504a
    1510:	928c8680 	.word	0x928c8680
    1514:	68565c7a 	.word	0x68565c7a
    1518:	1f449862 	.word	0x1f449862
    151c:	98981f1f 	.word	0x98981f1f
    1520:	1f          	.byte	0x1f
    1521:	00          	.byte	0x00
		gotTask=false;
    1522:	2300      	movs	r3, #0
    1524:	f880 315f 	strb.w	r3, [r0, #351]	; 0x15f
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
    1528:	4e44      	ldr	r6, [pc, #272]	; (163c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x174>)
    152a:	2240      	movs	r2, #64	; 0x40
    152c:	f500 71c8 	add.w	r1, r0, #400	; 0x190
    1530:	4630      	mov	r0, r6
    1532:	4b43      	ldr	r3, [pc, #268]	; (1640 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x178>)
    1534:	4798      	blx	r3
		result=usb.rxReady;
    1536:	7d73      	ldrb	r3, [r6, #21]
    1538:	b2db      	uxtb	r3, r3
    153a:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
	if (result)
    153e:	2b00      	cmp	r3, #0
    1540:	d1d8      	bne.n	14f4 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2c>
	}
    1542:	f894 015c 	ldrb.w	r0, [r4, #348]	; 0x15c
    1546:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
    1548:	4629      	mov	r1, r5
    154a:	4620      	mov	r0, r4
    154c:	4b3d      	ldr	r3, [pc, #244]	; (1644 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x17c>)
    154e:	4798      	blx	r3
    1550:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    1554:	e7f5      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
	maintenanceIsConnected = false;
    1556:	2300      	movs	r3, #0
    1558:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	bSendNotifications = false;
    155c:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
				break;
    1560:	e7ef      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				notifyGAINCommandReceived( header, result);
    1562:	2201      	movs	r2, #1
    1564:	4629      	mov	r1, r5
    1566:	4620      	mov	r0, r4
    1568:	4b37      	ldr	r3, [pc, #220]	; (1648 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x180>)
    156a:	4798      	blx	r3
				result = handleGAINCommandReset(header);
    156c:	2301      	movs	r3, #1
    156e:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
				break;
    1572:	e7e6      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandWriteParameters();
    1574:	4620      	mov	r0, r4
    1576:	4b35      	ldr	r3, [pc, #212]	; (164c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x184>)
    1578:	4798      	blx	r3
    157a:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    157e:	e7e0      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadParameters();
    1580:	4620      	mov	r0, r4
    1582:	4b33      	ldr	r3, [pc, #204]	; (1650 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x188>)
    1584:	4798      	blx	r3
    1586:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    158a:	e7da      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadDataLogger();
    158c:	4620      	mov	r0, r4
    158e:	4b31      	ldr	r3, [pc, #196]	; (1654 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x18c>)
    1590:	4798      	blx	r3
    1592:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    1596:	e7d4      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetHeaters();
    1598:	4620      	mov	r0, r4
    159a:	4b2f      	ldr	r3, [pc, #188]	; (1658 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x190>)
    159c:	4798      	blx	r3
    159e:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    15a2:	e7ce      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadHeaterStatus();
    15a4:	4620      	mov	r0, r4
    15a6:	4b2d      	ldr	r3, [pc, #180]	; (165c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x194>)
    15a8:	4798      	blx	r3
    15aa:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    15ae:	e7c8      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetScavenge();
    15b0:	4620      	mov	r0, r4
    15b2:	4b2b      	ldr	r3, [pc, #172]	; (1660 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x198>)
    15b4:	4798      	blx	r3
    15b6:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    15ba:	e7c2      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadScavengeStatus();
    15bc:	4620      	mov	r0, r4
    15be:	4b29      	ldr	r3, [pc, #164]	; (1664 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x19c>)
    15c0:	4798      	blx	r3
    15c2:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    15c6:	e7bc      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetCompressor();
    15c8:	4620      	mov	r0, r4
    15ca:	4b27      	ldr	r3, [pc, #156]	; (1668 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1a0>)
    15cc:	4798      	blx	r3
    15ce:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    15d2:	e7b6      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadCompressorStatus();
    15d4:	4620      	mov	r0, r4
    15d6:	4b25      	ldr	r3, [pc, #148]	; (166c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1a4>)
    15d8:	4798      	blx	r3
    15da:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    15de:	e7b0      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetEnableFans();
    15e0:	4620      	mov	r0, r4
    15e2:	4b23      	ldr	r3, [pc, #140]	; (1670 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1a8>)
    15e4:	4798      	blx	r3
    15e6:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    15ea:	e7aa      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetPWMFans();
    15ec:	4620      	mov	r0, r4
    15ee:	4b21      	ldr	r3, [pc, #132]	; (1674 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1ac>)
    15f0:	4798      	blx	r3
    15f2:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    15f6:	e7a4      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandFansStatus();
    15f8:	4620      	mov	r0, r4
    15fa:	4b1f      	ldr	r3, [pc, #124]	; (1678 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1b0>)
    15fc:	4798      	blx	r3
    15fe:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    1602:	e79e      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadTemmperatures();
    1604:	4620      	mov	r0, r4
    1606:	4b1d      	ldr	r3, [pc, #116]	; (167c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1b4>)
    1608:	4798      	blx	r3
    160a:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    160e:	e798      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadFlapperData();
    1610:	4620      	mov	r0, r4
    1612:	4b1b      	ldr	r3, [pc, #108]	; (1680 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1b8>)
    1614:	4798      	blx	r3
    1616:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    161a:	e792      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetFlapperValve();
    161c:	4620      	mov	r0, r4
    161e:	4b19      	ldr	r3, [pc, #100]	; (1684 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1bc>)
    1620:	4798      	blx	r3
    1622:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    1626:	e78c      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetFlapperPosition();
    1628:	4620      	mov	r0, r4
    162a:	4b17      	ldr	r3, [pc, #92]	; (1688 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1c0>)
    162c:	4798      	blx	r3
    162e:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    1632:	e786      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = false;
    1634:	2300      	movs	r3, #0
    1636:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
				break;
    163a:	e782      	b.n	1542 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
    163c:	20003460 	.word	0x20003460
    1640:	00010a55 	.word	0x00010a55
    1644:	000011fd 	.word	0x000011fd
    1648:	00001415 	.word	0x00001415
    164c:	00000541 	.word	0x00000541
    1650:	00000905 	.word	0x00000905
    1654:	0000098d 	.word	0x0000098d
    1658:	00000579 	.word	0x00000579
    165c:	00000b3d 	.word	0x00000b3d
    1660:	000005f1 	.word	0x000005f1
    1664:	00000b9d 	.word	0x00000b9d
    1668:	00000631 	.word	0x00000631
    166c:	00000bf9 	.word	0x00000bf9
    1670:	000003b5 	.word	0x000003b5
    1674:	000003e1 	.word	0x000003e1
    1678:	000007d9 	.word	0x000007d9
    167c:	0000143d 	.word	0x0000143d
    1680:	00000839 	.word	0x00000839
    1684:	00000449 	.word	0x00000449
    1688:	000004c1 	.word	0x000004c1

0000168c <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
    168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    168e:	4604      	mov	r4, r0
	result=false;
    1690:	2300      	movs	r3, #0
    1692:	f880 315c 	strb.w	r3, [r0, #348]	; 0x15c
	if (gotAccess)
    1696:	f890 315d 	ldrb.w	r3, [r0, #349]	; 0x15d
    169a:	2b00      	cmp	r3, #0
    169c:	d050      	beq.n	1740 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>
		if (usb.rxReady)
    169e:	4b2a      	ldr	r3, [pc, #168]	; (1748 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    16a0:	7d5b      	ldrb	r3, [r3, #21]
    16a2:	b95b      	cbnz	r3, 16bc <_ZN16Maintenance_Tool19handleCommunicationEv+0x30>
			gotCommand=false;
    16a4:	2300      	movs	r3, #0
    16a6:	f880 315e 	strb.w	r3, [r0, #350]	; 0x15e
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    16aa:	2240      	movs	r2, #64	; 0x40
    16ac:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    16b0:	4825      	ldr	r0, [pc, #148]	; (1748 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    16b2:	4b26      	ldr	r3, [pc, #152]	; (174c <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
    16b4:	4798      	blx	r3
	}
    16b6:	f894 015c 	ldrb.w	r0, [r4, #348]	; 0x15c
    16ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeMessage);
    16bc:	f8d0 3190 	ldr.w	r3, [r0, #400]	; 0x190
    16c0:	681a      	ldr	r2, [r3, #0]
    16c2:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
    16c6:	889b      	ldrh	r3, [r3, #4]
    16c8:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
			switch (input){
    16cc:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
    16d0:	2b3d      	cmp	r3, #61	; 0x3d
    16d2:	d017      	beq.n	1704 <_ZN16Maintenance_Tool19handleCommunicationEv+0x78>
    16d4:	2b3e      	cmp	r3, #62	; 0x3e
    16d6:	d010      	beq.n	16fa <_ZN16Maintenance_Tool19handleCommunicationEv+0x6e>
    16d8:	2b3c      	cmp	r3, #60	; 0x3c
    16da:	d003      	beq.n	16e4 <_ZN16Maintenance_Tool19handleCommunicationEv+0x58>
					gotCommand=false;
    16dc:	2300      	movs	r3, #0
    16de:	f880 315e 	strb.w	r3, [r0, #350]	; 0x15e
				break;
    16e2:	e006      	b.n	16f2 <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
					gotCommand=true;
    16e4:	2301      	movs	r3, #1
    16e6:	f880 315e 	strb.w	r3, [r0, #350]	; 0x15e
					result = handleHVACTask();
    16ea:	4b19      	ldr	r3, [pc, #100]	; (1750 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
    16ec:	4798      	blx	r3
    16ee:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
			ClearLocalBuffer();
    16f2:	4620      	mov	r0, r4
    16f4:	4b17      	ldr	r3, [pc, #92]	; (1754 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
    16f6:	4798      	blx	r3
    16f8:	e7d7      	b.n	16aa <_ZN16Maintenance_Tool19handleCommunicationEv+0x1e>
					result = handleHVACTask();
    16fa:	4b15      	ldr	r3, [pc, #84]	; (1750 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
    16fc:	4798      	blx	r3
    16fe:	f884 015c 	strb.w	r0, [r4, #348]	; 0x15c
				break;
    1702:	e7f6      	b.n	16f2 <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
					is_MTPC_Beaming=true;
    1704:	2501      	movs	r5, #1
    1706:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
					interfaceTimer.Stop();
    170a:	4e13      	ldr	r6, [pc, #76]	; (1758 <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
    170c:	4630      	mov	r0, r6
    170e:	4b13      	ldr	r3, [pc, #76]	; (175c <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
    1710:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
    1712:	4f13      	ldr	r7, [pc, #76]	; (1760 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
    1714:	4639      	mov	r1, r7
    1716:	4630      	mov	r0, r6
    1718:	4b12      	ldr	r3, [pc, #72]	; (1764 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd8>)
    171a:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
    171c:	f242 7210 	movw	r2, #10000	; 0x2710
    1720:	4639      	mov	r1, r7
    1722:	4630      	mov	r0, r6
    1724:	4b10      	ldr	r3, [pc, #64]	; (1768 <_ZN16Maintenance_Tool19handleCommunicationEv+0xdc>)
    1726:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
    1728:	2300      	movs	r3, #0
    172a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
					maintenanceIsConnected = true;
    172e:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
					bSendNotifications = true;
    1732:	f884 50b5 	strb.w	r5, [r4, #181]	; 0xb5
					result=is_MTPC_Beaming;
    1736:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    173a:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
				break;
    173e:	e7d8      	b.n	16f2 <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
		gotCommand=false;
    1740:	2300      	movs	r3, #0
    1742:	f880 315e 	strb.w	r3, [r0, #350]	; 0x15e
    1746:	e7b6      	b.n	16b6 <_ZN16Maintenance_Tool19handleCommunicationEv+0x2a>
    1748:	20003460 	.word	0x20003460
    174c:	00010a55 	.word	0x00010a55
    1750:	000014c9 	.word	0x000014c9
    1754:	000011e1 	.word	0x000011e1
    1758:	20001e88 	.word	0x20001e88
    175c:	00010309 	.word	0x00010309
    1760:	00001109 	.word	0x00001109
    1764:	00010425 	.word	0x00010425
    1768:	0001047d 	.word	0x0001047d

0000176c <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
    176c:	b510      	push	{r4, lr}
    176e:	4604      	mov	r4, r0
	result=false;
    1770:	2300      	movs	r3, #0
    1772:	f880 315c 	strb.w	r3, [r0, #348]	; 0x15c
	magic=0;
    1776:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
	if (gotAccess==true)
    177a:	f890 315d 	ldrb.w	r3, [r0, #349]	; 0x15d
    177e:	b12b      	cbz	r3, 178c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
    1780:	2301      	movs	r3, #1
    1782:	f880 315c 	strb.w	r3, [r0, #348]	; 0x15c
	return	result;
    1786:	f894 015c 	ldrb.w	r0, [r4, #348]	; 0x15c
}
    178a:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
    178c:	4b15      	ldr	r3, [pc, #84]	; (17e4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
    178e:	7d5b      	ldrb	r3, [r3, #21]
    1790:	b1b3      	cbz	r3, 17c0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x54>
				magic|= localBuffer[i];
    1792:	f8d0 0190 	ldr.w	r0, [r0, #400]	; 0x190
    1796:	1e41      	subs	r1, r0, #1
    1798:	3003      	adds	r0, #3
				magic=magic<<8;
    179a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    179e:	021b      	lsls	r3, r3, #8
    17a0:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
				magic|= localBuffer[i];
    17a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    17a8:	4313      	orrs	r3, r2
    17aa:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
			for (int i = 0; i < 4; i++)
    17ae:	4281      	cmp	r1, r0
    17b0:	d1f3      	bne.n	179a <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2e>
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
    17b2:	4a0d      	ldr	r2, [pc, #52]	; (17e8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
    17b4:	ea83 0102 	eor.w	r1, r3, r2
    17b8:	f8c4 117c 	str.w	r1, [r4, #380]	; 0x17c
			if (xorResult==0)
    17bc:	4293      	cmp	r3, r2
    17be:	d006      	beq.n	17ce <_ZN16Maintenance_Tool14IsAppConnectedEv+0x62>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    17c0:	2240      	movs	r2, #64	; 0x40
    17c2:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    17c6:	4807      	ldr	r0, [pc, #28]	; (17e4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
    17c8:	4b08      	ldr	r3, [pc, #32]	; (17ec <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
    17ca:	4798      	blx	r3
    17cc:	e7db      	b.n	1786 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
    17ce:	2301      	movs	r3, #1
    17d0:	f884 315d 	strb.w	r3, [r4, #349]	; 0x15d
				result=true;
    17d4:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
				is_MTPC_Beaming=true;
    17d8:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
				return	handleCommunication();
    17dc:	4620      	mov	r0, r4
    17de:	4b04      	ldr	r3, [pc, #16]	; (17f0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
    17e0:	4798      	blx	r3
    17e2:	bd10      	pop	{r4, pc}
    17e4:	20003460 	.word	0x20003460
    17e8:	61626364 	.word	0x61626364
    17ec:	00010a55 	.word	0x00010a55
    17f0:	0000168d 	.word	0x0000168d

000017f4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    17f4:	b580      	push	{r7, lr}
    17f6:	af00      	add	r7, sp, #0
	system_init();
    17f8:	4b03      	ldr	r3, [pc, #12]	; (1808 <atmel_start_init+0x14>)
    17fa:	4798      	blx	r3
	usb_init();
    17fc:	4b03      	ldr	r3, [pc, #12]	; (180c <atmel_start_init+0x18>)
    17fe:	4798      	blx	r3
	spi_nor_flash_init();
    1800:	4b03      	ldr	r3, [pc, #12]	; (1810 <atmel_start_init+0x1c>)
    1802:	4798      	blx	r3
}
    1804:	bf00      	nop
    1806:	bd80      	pop	{r7, pc}
    1808:	00002bf5 	.word	0x00002bf5
    180c:	0000d099 	.word	0x0000d099
    1810:	0000d02d 	.word	0x0000d02d

00001814 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    1814:	b480      	push	{r7}
    1816:	b085      	sub	sp, #20
    1818:	af00      	add	r7, sp, #0
    181a:	60f8      	str	r0, [r7, #12]
    181c:	460b      	mov	r3, r1
    181e:	607a      	str	r2, [r7, #4]
    1820:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1822:	7afa      	ldrb	r2, [r7, #11]
    1824:	68fb      	ldr	r3, [r7, #12]
    1826:	3220      	adds	r2, #32
    1828:	6879      	ldr	r1, [r7, #4]
    182a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    182e:	bf00      	nop
    1830:	3714      	adds	r7, #20
    1832:	46bd      	mov	sp, r7
    1834:	f85d 7b04 	ldr.w	r7, [sp], #4
    1838:	4770      	bx	lr

0000183a <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    183a:	b480      	push	{r7}
    183c:	b083      	sub	sp, #12
    183e:	af00      	add	r7, sp, #0
    1840:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    1842:	687b      	ldr	r3, [r7, #4]
    1844:	691b      	ldr	r3, [r3, #16]
    1846:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    184a:	687b      	ldr	r3, [r7, #4]
    184c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    184e:	bf00      	nop
    1850:	370c      	adds	r7, #12
    1852:	46bd      	mov	sp, r7
    1854:	f85d 7b04 	ldr.w	r7, [sp], #4
    1858:	4770      	bx	lr

0000185a <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    185a:	b480      	push	{r7}
    185c:	b083      	sub	sp, #12
    185e:	af00      	add	r7, sp, #0
    1860:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    1862:	687b      	ldr	r3, [r7, #4]
    1864:	691b      	ldr	r3, [r3, #16]
    1866:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    186a:	687b      	ldr	r3, [r7, #4]
    186c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    186e:	bf00      	nop
    1870:	370c      	adds	r7, #12
    1872:	46bd      	mov	sp, r7
    1874:	f85d 7b04 	ldr.w	r7, [sp], #4
    1878:	4770      	bx	lr

0000187a <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    187a:	b480      	push	{r7}
    187c:	b083      	sub	sp, #12
    187e:	af00      	add	r7, sp, #0
    1880:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    1882:	687b      	ldr	r3, [r7, #4]
    1884:	691b      	ldr	r3, [r3, #16]
    1886:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    188a:	687b      	ldr	r3, [r7, #4]
    188c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    188e:	bf00      	nop
    1890:	370c      	adds	r7, #12
    1892:	46bd      	mov	sp, r7
    1894:	f85d 7b04 	ldr.w	r7, [sp], #4
    1898:	4770      	bx	lr

0000189a <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    189a:	b480      	push	{r7}
    189c:	b083      	sub	sp, #12
    189e:	af00      	add	r7, sp, #0
    18a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    18a2:	687b      	ldr	r3, [r7, #4]
    18a4:	691b      	ldr	r3, [r3, #16]
    18a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    18aa:	687b      	ldr	r3, [r7, #4]
    18ac:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    18ae:	bf00      	nop
    18b0:	370c      	adds	r7, #12
    18b2:	46bd      	mov	sp, r7
    18b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    18b8:	4770      	bx	lr

000018ba <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    18ba:	b480      	push	{r7}
    18bc:	b083      	sub	sp, #12
    18be:	af00      	add	r7, sp, #0
    18c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    18c2:	687b      	ldr	r3, [r7, #4]
    18c4:	695b      	ldr	r3, [r3, #20]
    18c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    18ca:	687b      	ldr	r3, [r7, #4]
    18cc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    18ce:	bf00      	nop
    18d0:	370c      	adds	r7, #12
    18d2:	46bd      	mov	sp, r7
    18d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    18d8:	4770      	bx	lr

000018da <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    18da:	b480      	push	{r7}
    18dc:	b083      	sub	sp, #12
    18de:	af00      	add	r7, sp, #0
    18e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    18e2:	687b      	ldr	r3, [r7, #4]
    18e4:	695b      	ldr	r3, [r3, #20]
    18e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    18ea:	687b      	ldr	r3, [r7, #4]
    18ec:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    18ee:	bf00      	nop
    18f0:	370c      	adds	r7, #12
    18f2:	46bd      	mov	sp, r7
    18f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f8:	4770      	bx	lr

000018fa <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    18fa:	b480      	push	{r7}
    18fc:	b083      	sub	sp, #12
    18fe:	af00      	add	r7, sp, #0
    1900:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	695b      	ldr	r3, [r3, #20]
    1906:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    190a:	687b      	ldr	r3, [r7, #4]
    190c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    190e:	bf00      	nop
    1910:	370c      	adds	r7, #12
    1912:	46bd      	mov	sp, r7
    1914:	f85d 7b04 	ldr.w	r7, [sp], #4
    1918:	4770      	bx	lr

0000191a <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    191a:	b480      	push	{r7}
    191c:	b083      	sub	sp, #12
    191e:	af00      	add	r7, sp, #0
    1920:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1922:	687b      	ldr	r3, [r7, #4]
    1924:	695b      	ldr	r3, [r3, #20]
    1926:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    192a:	687b      	ldr	r3, [r7, #4]
    192c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    192e:	bf00      	nop
    1930:	370c      	adds	r7, #12
    1932:	46bd      	mov	sp, r7
    1934:	f85d 7b04 	ldr.w	r7, [sp], #4
    1938:	4770      	bx	lr

0000193a <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    193a:	b480      	push	{r7}
    193c:	b083      	sub	sp, #12
    193e:	af00      	add	r7, sp, #0
    1940:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    1942:	687b      	ldr	r3, [r7, #4]
    1944:	699b      	ldr	r3, [r3, #24]
    1946:	f043 0201 	orr.w	r2, r3, #1
    194a:	687b      	ldr	r3, [r7, #4]
    194c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    194e:	bf00      	nop
    1950:	370c      	adds	r7, #12
    1952:	46bd      	mov	sp, r7
    1954:	f85d 7b04 	ldr.w	r7, [sp], #4
    1958:	4770      	bx	lr

0000195a <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    195a:	b480      	push	{r7}
    195c:	b083      	sub	sp, #12
    195e:	af00      	add	r7, sp, #0
    1960:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	699b      	ldr	r3, [r3, #24]
    1966:	f043 0202 	orr.w	r2, r3, #2
    196a:	687b      	ldr	r3, [r7, #4]
    196c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    196e:	bf00      	nop
    1970:	370c      	adds	r7, #12
    1972:	46bd      	mov	sp, r7
    1974:	f85d 7b04 	ldr.w	r7, [sp], #4
    1978:	4770      	bx	lr

0000197a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    197a:	b480      	push	{r7}
    197c:	b083      	sub	sp, #12
    197e:	af00      	add	r7, sp, #0
    1980:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    1982:	687b      	ldr	r3, [r7, #4]
    1984:	699b      	ldr	r3, [r3, #24]
    1986:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    198a:	687b      	ldr	r3, [r7, #4]
    198c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    198e:	bf00      	nop
    1990:	370c      	adds	r7, #12
    1992:	46bd      	mov	sp, r7
    1994:	f85d 7b04 	ldr.w	r7, [sp], #4
    1998:	4770      	bx	lr

0000199a <hri_mclk_set_APBBMASK_SERCOM3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
    199a:	b480      	push	{r7}
    199c:	b083      	sub	sp, #12
    199e:	af00      	add	r7, sp, #0
    19a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    19a2:	687b      	ldr	r3, [r7, #4]
    19a4:	699b      	ldr	r3, [r3, #24]
    19a6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    19aa:	687b      	ldr	r3, [r7, #4]
    19ac:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    19ae:	bf00      	nop
    19b0:	370c      	adds	r7, #12
    19b2:	46bd      	mov	sp, r7
    19b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b8:	4770      	bx	lr

000019ba <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    19ba:	b480      	push	{r7}
    19bc:	b083      	sub	sp, #12
    19be:	af00      	add	r7, sp, #0
    19c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    19c2:	687b      	ldr	r3, [r7, #4]
    19c4:	699b      	ldr	r3, [r3, #24]
    19c6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    19ca:	687b      	ldr	r3, [r7, #4]
    19cc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    19ce:	bf00      	nop
    19d0:	370c      	adds	r7, #12
    19d2:	46bd      	mov	sp, r7
    19d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    19d8:	4770      	bx	lr

000019da <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    19da:	b480      	push	{r7}
    19dc:	b083      	sub	sp, #12
    19de:	af00      	add	r7, sp, #0
    19e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    19e2:	687b      	ldr	r3, [r7, #4]
    19e4:	699b      	ldr	r3, [r3, #24]
    19e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    19ea:	687b      	ldr	r3, [r7, #4]
    19ec:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    19ee:	bf00      	nop
    19f0:	370c      	adds	r7, #12
    19f2:	46bd      	mov	sp, r7
    19f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    19f8:	4770      	bx	lr

000019fa <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    19fa:	b480      	push	{r7}
    19fc:	b083      	sub	sp, #12
    19fe:	af00      	add	r7, sp, #0
    1a00:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    1a02:	687b      	ldr	r3, [r7, #4]
    1a04:	699b      	ldr	r3, [r3, #24]
    1a06:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1a0a:	687b      	ldr	r3, [r7, #4]
    1a0c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a0e:	bf00      	nop
    1a10:	370c      	adds	r7, #12
    1a12:	46bd      	mov	sp, r7
    1a14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a18:	4770      	bx	lr

00001a1a <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
    1a1a:	b480      	push	{r7}
    1a1c:	b083      	sub	sp, #12
    1a1e:	af00      	add	r7, sp, #0
    1a20:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    1a22:	687b      	ldr	r3, [r7, #4]
    1a24:	69db      	ldr	r3, [r3, #28]
    1a26:	f043 0208 	orr.w	r2, r3, #8
    1a2a:	687b      	ldr	r3, [r7, #4]
    1a2c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a2e:	bf00      	nop
    1a30:	370c      	adds	r7, #12
    1a32:	46bd      	mov	sp, r7
    1a34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a38:	4770      	bx	lr

00001a3a <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    1a3a:	b480      	push	{r7}
    1a3c:	b083      	sub	sp, #12
    1a3e:	af00      	add	r7, sp, #0
    1a40:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    1a42:	687b      	ldr	r3, [r7, #4]
    1a44:	69db      	ldr	r3, [r3, #28]
    1a46:	f043 0220 	orr.w	r2, r3, #32
    1a4a:	687b      	ldr	r3, [r7, #4]
    1a4c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a4e:	bf00      	nop
    1a50:	370c      	adds	r7, #12
    1a52:	46bd      	mov	sp, r7
    1a54:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a58:	4770      	bx	lr

00001a5a <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    1a5a:	b480      	push	{r7}
    1a5c:	b083      	sub	sp, #12
    1a5e:	af00      	add	r7, sp, #0
    1a60:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    1a62:	687b      	ldr	r3, [r7, #4]
    1a64:	69db      	ldr	r3, [r3, #28]
    1a66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    1a6a:	687b      	ldr	r3, [r7, #4]
    1a6c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a6e:	bf00      	nop
    1a70:	370c      	adds	r7, #12
    1a72:	46bd      	mov	sp, r7
    1a74:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a78:	4770      	bx	lr

00001a7a <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    1a7a:	b480      	push	{r7}
    1a7c:	b083      	sub	sp, #12
    1a7e:	af00      	add	r7, sp, #0
    1a80:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    1a82:	687b      	ldr	r3, [r7, #4]
    1a84:	69db      	ldr	r3, [r3, #28]
    1a86:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1a8a:	687b      	ldr	r3, [r7, #4]
    1a8c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a8e:	bf00      	nop
    1a90:	370c      	adds	r7, #12
    1a92:	46bd      	mov	sp, r7
    1a94:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a98:	4770      	bx	lr

00001a9a <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    1a9a:	b480      	push	{r7}
    1a9c:	b083      	sub	sp, #12
    1a9e:	af00      	add	r7, sp, #0
    1aa0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    1aa2:	687b      	ldr	r3, [r7, #4]
    1aa4:	6a1b      	ldr	r3, [r3, #32]
    1aa6:	f043 0201 	orr.w	r2, r3, #1
    1aaa:	687b      	ldr	r3, [r7, #4]
    1aac:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1aae:	bf00      	nop
    1ab0:	370c      	adds	r7, #12
    1ab2:	46bd      	mov	sp, r7
    1ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ab8:	4770      	bx	lr

00001aba <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    1aba:	b480      	push	{r7}
    1abc:	b083      	sub	sp, #12
    1abe:	af00      	add	r7, sp, #0
    1ac0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    1ac2:	687b      	ldr	r3, [r7, #4]
    1ac4:	6a1b      	ldr	r3, [r3, #32]
    1ac6:	f043 0202 	orr.w	r2, r3, #2
    1aca:	687b      	ldr	r3, [r7, #4]
    1acc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1ace:	bf00      	nop
    1ad0:	370c      	adds	r7, #12
    1ad2:	46bd      	mov	sp, r7
    1ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ad8:	4770      	bx	lr

00001ada <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    1ada:	b480      	push	{r7}
    1adc:	b083      	sub	sp, #12
    1ade:	af00      	add	r7, sp, #0
    1ae0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    1ae2:	687b      	ldr	r3, [r7, #4]
    1ae4:	6a1b      	ldr	r3, [r3, #32]
    1ae6:	f043 0204 	orr.w	r2, r3, #4
    1aea:	687b      	ldr	r3, [r7, #4]
    1aec:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1aee:	bf00      	nop
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr

00001afa <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    1afa:	b480      	push	{r7}
    1afc:	b083      	sub	sp, #12
    1afe:	af00      	add	r7, sp, #0
    1b00:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    1b02:	687b      	ldr	r3, [r7, #4]
    1b04:	6a1b      	ldr	r3, [r3, #32]
    1b06:	f043 0208 	orr.w	r2, r3, #8
    1b0a:	687b      	ldr	r3, [r7, #4]
    1b0c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1b0e:	bf00      	nop
    1b10:	370c      	adds	r7, #12
    1b12:	46bd      	mov	sp, r7
    1b14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b18:	4770      	bx	lr

00001b1a <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    1b1a:	b480      	push	{r7}
    1b1c:	b083      	sub	sp, #12
    1b1e:	af00      	add	r7, sp, #0
    1b20:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    1b22:	687b      	ldr	r3, [r7, #4]
    1b24:	6a1b      	ldr	r3, [r3, #32]
    1b26:	f043 0220 	orr.w	r2, r3, #32
    1b2a:	687b      	ldr	r3, [r7, #4]
    1b2c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1b2e:	bf00      	nop
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr

00001b3a <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    1b3a:	b480      	push	{r7}
    1b3c:	b083      	sub	sp, #12
    1b3e:	af00      	add	r7, sp, #0
    1b40:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    1b42:	687b      	ldr	r3, [r7, #4]
    1b44:	6a1b      	ldr	r3, [r3, #32]
    1b46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    1b4a:	687b      	ldr	r3, [r7, #4]
    1b4c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1b4e:	bf00      	nop
    1b50:	370c      	adds	r7, #12
    1b52:	46bd      	mov	sp, r7
    1b54:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b58:	4770      	bx	lr

00001b5a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1b5a:	b480      	push	{r7}
    1b5c:	b085      	sub	sp, #20
    1b5e:	af00      	add	r7, sp, #0
    1b60:	60f8      	str	r0, [r7, #12]
    1b62:	460b      	mov	r3, r1
    1b64:	607a      	str	r2, [r7, #4]
    1b66:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1b68:	7afb      	ldrb	r3, [r7, #11]
    1b6a:	68fa      	ldr	r2, [r7, #12]
    1b6c:	01db      	lsls	r3, r3, #7
    1b6e:	4413      	add	r3, r2
    1b70:	3308      	adds	r3, #8
    1b72:	687a      	ldr	r2, [r7, #4]
    1b74:	601a      	str	r2, [r3, #0]
}
    1b76:	bf00      	nop
    1b78:	3714      	adds	r7, #20
    1b7a:	46bd      	mov	sp, r7
    1b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b80:	4770      	bx	lr

00001b82 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1b82:	b480      	push	{r7}
    1b84:	b085      	sub	sp, #20
    1b86:	af00      	add	r7, sp, #0
    1b88:	60f8      	str	r0, [r7, #12]
    1b8a:	460b      	mov	r3, r1
    1b8c:	607a      	str	r2, [r7, #4]
    1b8e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1b90:	7afb      	ldrb	r3, [r7, #11]
    1b92:	68fa      	ldr	r2, [r7, #12]
    1b94:	01db      	lsls	r3, r3, #7
    1b96:	4413      	add	r3, r2
    1b98:	3304      	adds	r3, #4
    1b9a:	687a      	ldr	r2, [r7, #4]
    1b9c:	601a      	str	r2, [r3, #0]
}
    1b9e:	bf00      	nop
    1ba0:	3714      	adds	r7, #20
    1ba2:	46bd      	mov	sp, r7
    1ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ba8:	4770      	bx	lr

00001baa <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1baa:	b480      	push	{r7}
    1bac:	b085      	sub	sp, #20
    1bae:	af00      	add	r7, sp, #0
    1bb0:	60f8      	str	r0, [r7, #12]
    1bb2:	460b      	mov	r3, r1
    1bb4:	607a      	str	r2, [r7, #4]
    1bb6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1bb8:	7afb      	ldrb	r3, [r7, #11]
    1bba:	68fa      	ldr	r2, [r7, #12]
    1bbc:	01db      	lsls	r3, r3, #7
    1bbe:	4413      	add	r3, r2
    1bc0:	3318      	adds	r3, #24
    1bc2:	687a      	ldr	r2, [r7, #4]
    1bc4:	601a      	str	r2, [r3, #0]
}
    1bc6:	bf00      	nop
    1bc8:	3714      	adds	r7, #20
    1bca:	46bd      	mov	sp, r7
    1bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd0:	4770      	bx	lr

00001bd2 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1bd2:	b480      	push	{r7}
    1bd4:	b085      	sub	sp, #20
    1bd6:	af00      	add	r7, sp, #0
    1bd8:	60f8      	str	r0, [r7, #12]
    1bda:	460b      	mov	r3, r1
    1bdc:	607a      	str	r2, [r7, #4]
    1bde:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1be0:	7afb      	ldrb	r3, [r7, #11]
    1be2:	68fa      	ldr	r2, [r7, #12]
    1be4:	01db      	lsls	r3, r3, #7
    1be6:	4413      	add	r3, r2
    1be8:	3314      	adds	r3, #20
    1bea:	687a      	ldr	r2, [r7, #4]
    1bec:	601a      	str	r2, [r3, #0]
}
    1bee:	bf00      	nop
    1bf0:	3714      	adds	r7, #20
    1bf2:	46bd      	mov	sp, r7
    1bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf8:	4770      	bx	lr

00001bfa <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    1bfa:	b480      	push	{r7}
    1bfc:	b085      	sub	sp, #20
    1bfe:	af00      	add	r7, sp, #0
    1c00:	6078      	str	r0, [r7, #4]
    1c02:	4608      	mov	r0, r1
    1c04:	4611      	mov	r1, r2
    1c06:	461a      	mov	r2, r3
    1c08:	4603      	mov	r3, r0
    1c0a:	70fb      	strb	r3, [r7, #3]
    1c0c:	460b      	mov	r3, r1
    1c0e:	70bb      	strb	r3, [r7, #2]
    1c10:	4613      	mov	r3, r2
    1c12:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1c14:	78fa      	ldrb	r2, [r7, #3]
    1c16:	78bb      	ldrb	r3, [r7, #2]
    1c18:	6879      	ldr	r1, [r7, #4]
    1c1a:	01d2      	lsls	r2, r2, #7
    1c1c:	440a      	add	r2, r1
    1c1e:	4413      	add	r3, r2
    1c20:	3330      	adds	r3, #48	; 0x30
    1c22:	781b      	ldrb	r3, [r3, #0]
    1c24:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1c26:	7bfb      	ldrb	r3, [r7, #15]
    1c28:	f023 030f 	bic.w	r3, r3, #15
    1c2c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    1c2e:	787b      	ldrb	r3, [r7, #1]
    1c30:	f003 030f 	and.w	r3, r3, #15
    1c34:	b2da      	uxtb	r2, r3
    1c36:	7bfb      	ldrb	r3, [r7, #15]
    1c38:	4313      	orrs	r3, r2
    1c3a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1c3c:	78fa      	ldrb	r2, [r7, #3]
    1c3e:	78bb      	ldrb	r3, [r7, #2]
    1c40:	6879      	ldr	r1, [r7, #4]
    1c42:	01d2      	lsls	r2, r2, #7
    1c44:	440a      	add	r2, r1
    1c46:	4413      	add	r3, r2
    1c48:	3330      	adds	r3, #48	; 0x30
    1c4a:	7bfa      	ldrb	r2, [r7, #15]
    1c4c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1c4e:	bf00      	nop
    1c50:	3714      	adds	r7, #20
    1c52:	46bd      	mov	sp, r7
    1c54:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c58:	4770      	bx	lr

00001c5a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    1c5a:	b480      	push	{r7}
    1c5c:	b085      	sub	sp, #20
    1c5e:	af00      	add	r7, sp, #0
    1c60:	6078      	str	r0, [r7, #4]
    1c62:	4608      	mov	r0, r1
    1c64:	4611      	mov	r1, r2
    1c66:	461a      	mov	r2, r3
    1c68:	4603      	mov	r3, r0
    1c6a:	70fb      	strb	r3, [r7, #3]
    1c6c:	460b      	mov	r3, r1
    1c6e:	70bb      	strb	r3, [r7, #2]
    1c70:	4613      	mov	r3, r2
    1c72:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1c74:	78fa      	ldrb	r2, [r7, #3]
    1c76:	78bb      	ldrb	r3, [r7, #2]
    1c78:	6879      	ldr	r1, [r7, #4]
    1c7a:	01d2      	lsls	r2, r2, #7
    1c7c:	440a      	add	r2, r1
    1c7e:	4413      	add	r3, r2
    1c80:	3330      	adds	r3, #48	; 0x30
    1c82:	781b      	ldrb	r3, [r3, #0]
    1c84:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1c86:	7bfb      	ldrb	r3, [r7, #15]
    1c88:	f003 030f 	and.w	r3, r3, #15
    1c8c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    1c8e:	787b      	ldrb	r3, [r7, #1]
    1c90:	011b      	lsls	r3, r3, #4
    1c92:	b2da      	uxtb	r2, r3
    1c94:	7bfb      	ldrb	r3, [r7, #15]
    1c96:	4313      	orrs	r3, r2
    1c98:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1c9a:	78fa      	ldrb	r2, [r7, #3]
    1c9c:	78bb      	ldrb	r3, [r7, #2]
    1c9e:	6879      	ldr	r1, [r7, #4]
    1ca0:	01d2      	lsls	r2, r2, #7
    1ca2:	440a      	add	r2, r1
    1ca4:	4413      	add	r3, r2
    1ca6:	3330      	adds	r3, #48	; 0x30
    1ca8:	7bfa      	ldrb	r2, [r7, #15]
    1caa:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1cac:	bf00      	nop
    1cae:	3714      	adds	r7, #20
    1cb0:	46bd      	mov	sp, r7
    1cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cb6:	4770      	bx	lr

00001cb8 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    1cb8:	b480      	push	{r7}
    1cba:	b085      	sub	sp, #20
    1cbc:	af00      	add	r7, sp, #0
    1cbe:	6078      	str	r0, [r7, #4]
    1cc0:	4608      	mov	r0, r1
    1cc2:	4611      	mov	r1, r2
    1cc4:	461a      	mov	r2, r3
    1cc6:	4603      	mov	r3, r0
    1cc8:	70fb      	strb	r3, [r7, #3]
    1cca:	460b      	mov	r3, r1
    1ccc:	70bb      	strb	r3, [r7, #2]
    1cce:	4613      	mov	r3, r2
    1cd0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1cd2:	78fa      	ldrb	r2, [r7, #3]
    1cd4:	78bb      	ldrb	r3, [r7, #2]
    1cd6:	6879      	ldr	r1, [r7, #4]
    1cd8:	01d2      	lsls	r2, r2, #7
    1cda:	440a      	add	r2, r1
    1cdc:	4413      	add	r3, r2
    1cde:	3340      	adds	r3, #64	; 0x40
    1ce0:	781b      	ldrb	r3, [r3, #0]
    1ce2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1ce4:	7bfb      	ldrb	r3, [r7, #15]
    1ce6:	f023 0301 	bic.w	r3, r3, #1
    1cea:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1cec:	787a      	ldrb	r2, [r7, #1]
    1cee:	7bfb      	ldrb	r3, [r7, #15]
    1cf0:	4313      	orrs	r3, r2
    1cf2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1cf4:	78fa      	ldrb	r2, [r7, #3]
    1cf6:	78bb      	ldrb	r3, [r7, #2]
    1cf8:	6879      	ldr	r1, [r7, #4]
    1cfa:	01d2      	lsls	r2, r2, #7
    1cfc:	440a      	add	r2, r1
    1cfe:	4413      	add	r3, r2
    1d00:	3340      	adds	r3, #64	; 0x40
    1d02:	7bfa      	ldrb	r2, [r7, #15]
    1d04:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1d06:	bf00      	nop
    1d08:	3714      	adds	r7, #20
    1d0a:	46bd      	mov	sp, r7
    1d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d10:	4770      	bx	lr

00001d12 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1d12:	b490      	push	{r4, r7}
    1d14:	b082      	sub	sp, #8
    1d16:	af00      	add	r7, sp, #0
    1d18:	6078      	str	r0, [r7, #4]
    1d1a:	460b      	mov	r3, r1
    1d1c:	70fb      	strb	r3, [r7, #3]
    1d1e:	4613      	mov	r3, r2
    1d20:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1d22:	78fa      	ldrb	r2, [r7, #3]
    1d24:	78bb      	ldrb	r3, [r7, #2]
    1d26:	78f8      	ldrb	r0, [r7, #3]
    1d28:	78b9      	ldrb	r1, [r7, #2]
    1d2a:	687c      	ldr	r4, [r7, #4]
    1d2c:	01c0      	lsls	r0, r0, #7
    1d2e:	4420      	add	r0, r4
    1d30:	4401      	add	r1, r0
    1d32:	3140      	adds	r1, #64	; 0x40
    1d34:	7809      	ldrb	r1, [r1, #0]
    1d36:	b2c9      	uxtb	r1, r1
    1d38:	f041 0104 	orr.w	r1, r1, #4
    1d3c:	b2c8      	uxtb	r0, r1
    1d3e:	6879      	ldr	r1, [r7, #4]
    1d40:	01d2      	lsls	r2, r2, #7
    1d42:	440a      	add	r2, r1
    1d44:	4413      	add	r3, r2
    1d46:	3340      	adds	r3, #64	; 0x40
    1d48:	4602      	mov	r2, r0
    1d4a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1d4c:	bf00      	nop
    1d4e:	3708      	adds	r7, #8
    1d50:	46bd      	mov	sp, r7
    1d52:	bc90      	pop	{r4, r7}
    1d54:	4770      	bx	lr

00001d56 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1d56:	b490      	push	{r4, r7}
    1d58:	b082      	sub	sp, #8
    1d5a:	af00      	add	r7, sp, #0
    1d5c:	6078      	str	r0, [r7, #4]
    1d5e:	460b      	mov	r3, r1
    1d60:	70fb      	strb	r3, [r7, #3]
    1d62:	4613      	mov	r3, r2
    1d64:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1d66:	78fa      	ldrb	r2, [r7, #3]
    1d68:	78bb      	ldrb	r3, [r7, #2]
    1d6a:	78f8      	ldrb	r0, [r7, #3]
    1d6c:	78b9      	ldrb	r1, [r7, #2]
    1d6e:	687c      	ldr	r4, [r7, #4]
    1d70:	01c0      	lsls	r0, r0, #7
    1d72:	4420      	add	r0, r4
    1d74:	4401      	add	r1, r0
    1d76:	3140      	adds	r1, #64	; 0x40
    1d78:	7809      	ldrb	r1, [r1, #0]
    1d7a:	b2c9      	uxtb	r1, r1
    1d7c:	f021 0104 	bic.w	r1, r1, #4
    1d80:	b2c8      	uxtb	r0, r1
    1d82:	6879      	ldr	r1, [r7, #4]
    1d84:	01d2      	lsls	r2, r2, #7
    1d86:	440a      	add	r2, r1
    1d88:	4413      	add	r3, r2
    1d8a:	3340      	adds	r3, #64	; 0x40
    1d8c:	4602      	mov	r2, r0
    1d8e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1d90:	bf00      	nop
    1d92:	3708      	adds	r7, #8
    1d94:	46bd      	mov	sp, r7
    1d96:	bc90      	pop	{r4, r7}
    1d98:	4770      	bx	lr

00001d9a <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    1d9a:	b480      	push	{r7}
    1d9c:	b085      	sub	sp, #20
    1d9e:	af00      	add	r7, sp, #0
    1da0:	60f8      	str	r0, [r7, #12]
    1da2:	460b      	mov	r3, r1
    1da4:	607a      	str	r2, [r7, #4]
    1da6:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1da8:	7afb      	ldrb	r3, [r7, #11]
    1daa:	68fa      	ldr	r2, [r7, #12]
    1dac:	01db      	lsls	r3, r3, #7
    1dae:	4413      	add	r3, r2
    1db0:	3328      	adds	r3, #40	; 0x28
    1db2:	687a      	ldr	r2, [r7, #4]
    1db4:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1db6:	bf00      	nop
    1db8:	3714      	adds	r7, #20
    1dba:	46bd      	mov	sp, r7
    1dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dc0:	4770      	bx	lr
	...

00001dc4 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    1dc4:	b580      	push	{r7, lr}
    1dc6:	b082      	sub	sp, #8
    1dc8:	af00      	add	r7, sp, #0
    1dca:	4603      	mov	r3, r0
    1dcc:	6039      	str	r1, [r7, #0]
    1dce:	71fb      	strb	r3, [r7, #7]
    1dd0:	4613      	mov	r3, r2
    1dd2:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    1dd4:	79bb      	ldrb	r3, [r7, #6]
    1dd6:	2b01      	cmp	r3, #1
    1dd8:	d01c      	beq.n	1e14 <_gpio_set_direction+0x50>
    1dda:	2b02      	cmp	r3, #2
    1ddc:	d037      	beq.n	1e4e <_gpio_set_direction+0x8a>
    1dde:	2b00      	cmp	r3, #0
    1de0:	d14e      	bne.n	1e80 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1de2:	79fb      	ldrb	r3, [r7, #7]
    1de4:	683a      	ldr	r2, [r7, #0]
    1de6:	4619      	mov	r1, r3
    1de8:	482a      	ldr	r0, [pc, #168]	; (1e94 <_gpio_set_direction+0xd0>)
    1dea:	4b2b      	ldr	r3, [pc, #172]	; (1e98 <_gpio_set_direction+0xd4>)
    1dec:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1dee:	683b      	ldr	r3, [r7, #0]
    1df0:	b29b      	uxth	r3, r3
    1df2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1df6:	79fb      	ldrb	r3, [r7, #7]
    1df8:	4619      	mov	r1, r3
    1dfa:	4826      	ldr	r0, [pc, #152]	; (1e94 <_gpio_set_direction+0xd0>)
    1dfc:	4b27      	ldr	r3, [pc, #156]	; (1e9c <_gpio_set_direction+0xd8>)
    1dfe:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1e00:	683b      	ldr	r3, [r7, #0]
    1e02:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1e04:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1e08:	79fb      	ldrb	r3, [r7, #7]
    1e0a:	4619      	mov	r1, r3
    1e0c:	4821      	ldr	r0, [pc, #132]	; (1e94 <_gpio_set_direction+0xd0>)
    1e0e:	4b23      	ldr	r3, [pc, #140]	; (1e9c <_gpio_set_direction+0xd8>)
    1e10:	4798      	blx	r3
		break;
    1e12:	e03a      	b.n	1e8a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1e14:	79fb      	ldrb	r3, [r7, #7]
    1e16:	683a      	ldr	r2, [r7, #0]
    1e18:	4619      	mov	r1, r3
    1e1a:	481e      	ldr	r0, [pc, #120]	; (1e94 <_gpio_set_direction+0xd0>)
    1e1c:	4b1e      	ldr	r3, [pc, #120]	; (1e98 <_gpio_set_direction+0xd4>)
    1e1e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1e20:	683b      	ldr	r3, [r7, #0]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    1e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1e2c:	79f9      	ldrb	r1, [r7, #7]
    1e2e:	461a      	mov	r2, r3
    1e30:	4818      	ldr	r0, [pc, #96]	; (1e94 <_gpio_set_direction+0xd0>)
    1e32:	4b1a      	ldr	r3, [pc, #104]	; (1e9c <_gpio_set_direction+0xd8>)
    1e34:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    1e36:	683b      	ldr	r3, [r7, #0]
    1e38:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    1e3a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    1e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1e42:	79f9      	ldrb	r1, [r7, #7]
    1e44:	461a      	mov	r2, r3
    1e46:	4813      	ldr	r0, [pc, #76]	; (1e94 <_gpio_set_direction+0xd0>)
    1e48:	4b14      	ldr	r3, [pc, #80]	; (1e9c <_gpio_set_direction+0xd8>)
    1e4a:	4798      	blx	r3
		break;
    1e4c:	e01d      	b.n	1e8a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    1e4e:	79fb      	ldrb	r3, [r7, #7]
    1e50:	683a      	ldr	r2, [r7, #0]
    1e52:	4619      	mov	r1, r3
    1e54:	480f      	ldr	r0, [pc, #60]	; (1e94 <_gpio_set_direction+0xd0>)
    1e56:	4b12      	ldr	r3, [pc, #72]	; (1ea0 <_gpio_set_direction+0xdc>)
    1e58:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1e5a:	683b      	ldr	r3, [r7, #0]
    1e5c:	b29b      	uxth	r3, r3
    1e5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1e62:	79fb      	ldrb	r3, [r7, #7]
    1e64:	4619      	mov	r1, r3
    1e66:	480b      	ldr	r0, [pc, #44]	; (1e94 <_gpio_set_direction+0xd0>)
    1e68:	4b0c      	ldr	r3, [pc, #48]	; (1e9c <_gpio_set_direction+0xd8>)
    1e6a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1e6c:	683b      	ldr	r3, [r7, #0]
    1e6e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1e70:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1e74:	79fb      	ldrb	r3, [r7, #7]
    1e76:	4619      	mov	r1, r3
    1e78:	4806      	ldr	r0, [pc, #24]	; (1e94 <_gpio_set_direction+0xd0>)
    1e7a:	4b08      	ldr	r3, [pc, #32]	; (1e9c <_gpio_set_direction+0xd8>)
    1e7c:	4798      	blx	r3
		break;
    1e7e:	e004      	b.n	1e8a <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1e80:	2246      	movs	r2, #70	; 0x46
    1e82:	4908      	ldr	r1, [pc, #32]	; (1ea4 <_gpio_set_direction+0xe0>)
    1e84:	2000      	movs	r0, #0
    1e86:	4b08      	ldr	r3, [pc, #32]	; (1ea8 <_gpio_set_direction+0xe4>)
    1e88:	4798      	blx	r3
	}
}
    1e8a:	bf00      	nop
    1e8c:	3708      	adds	r7, #8
    1e8e:	46bd      	mov	sp, r7
    1e90:	bd80      	pop	{r7, pc}
    1e92:	bf00      	nop
    1e94:	41008000 	.word	0x41008000
    1e98:	00001b83 	.word	0x00001b83
    1e9c:	00001d9b 	.word	0x00001d9b
    1ea0:	00001b5b 	.word	0x00001b5b
    1ea4:	0001ab8c 	.word	0x0001ab8c
    1ea8:	00004c81 	.word	0x00004c81

00001eac <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1eac:	b580      	push	{r7, lr}
    1eae:	b082      	sub	sp, #8
    1eb0:	af00      	add	r7, sp, #0
    1eb2:	4603      	mov	r3, r0
    1eb4:	6039      	str	r1, [r7, #0]
    1eb6:	71fb      	strb	r3, [r7, #7]
    1eb8:	4613      	mov	r3, r2
    1eba:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1ebc:	79bb      	ldrb	r3, [r7, #6]
    1ebe:	2b00      	cmp	r3, #0
    1ec0:	d006      	beq.n	1ed0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    1ec2:	79fb      	ldrb	r3, [r7, #7]
    1ec4:	683a      	ldr	r2, [r7, #0]
    1ec6:	4619      	mov	r1, r3
    1ec8:	4806      	ldr	r0, [pc, #24]	; (1ee4 <_gpio_set_level+0x38>)
    1eca:	4b07      	ldr	r3, [pc, #28]	; (1ee8 <_gpio_set_level+0x3c>)
    1ecc:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    1ece:	e005      	b.n	1edc <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1ed0:	79fb      	ldrb	r3, [r7, #7]
    1ed2:	683a      	ldr	r2, [r7, #0]
    1ed4:	4619      	mov	r1, r3
    1ed6:	4803      	ldr	r0, [pc, #12]	; (1ee4 <_gpio_set_level+0x38>)
    1ed8:	4b04      	ldr	r3, [pc, #16]	; (1eec <_gpio_set_level+0x40>)
    1eda:	4798      	blx	r3
}
    1edc:	bf00      	nop
    1ede:	3708      	adds	r7, #8
    1ee0:	46bd      	mov	sp, r7
    1ee2:	bd80      	pop	{r7, pc}
    1ee4:	41008000 	.word	0x41008000
    1ee8:	00001bab 	.word	0x00001bab
    1eec:	00001bd3 	.word	0x00001bd3

00001ef0 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    1ef0:	b580      	push	{r7, lr}
    1ef2:	b082      	sub	sp, #8
    1ef4:	af00      	add	r7, sp, #0
    1ef6:	4603      	mov	r3, r0
    1ef8:	71fb      	strb	r3, [r7, #7]
    1efa:	460b      	mov	r3, r1
    1efc:	71bb      	strb	r3, [r7, #6]
    1efe:	4613      	mov	r3, r2
    1f00:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    1f02:	797b      	ldrb	r3, [r7, #5]
    1f04:	2b01      	cmp	r3, #1
    1f06:	d00a      	beq.n	1f1e <_gpio_set_pin_pull_mode+0x2e>
    1f08:	2b02      	cmp	r3, #2
    1f0a:	d01f      	beq.n	1f4c <_gpio_set_pin_pull_mode+0x5c>
    1f0c:	2b00      	cmp	r3, #0
    1f0e:	d134      	bne.n	1f7a <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1f10:	79ba      	ldrb	r2, [r7, #6]
    1f12:	79fb      	ldrb	r3, [r7, #7]
    1f14:	4619      	mov	r1, r3
    1f16:	481e      	ldr	r0, [pc, #120]	; (1f90 <_gpio_set_pin_pull_mode+0xa0>)
    1f18:	4b1e      	ldr	r3, [pc, #120]	; (1f94 <_gpio_set_pin_pull_mode+0xa4>)
    1f1a:	4798      	blx	r3
		break;
    1f1c:	e033      	b.n	1f86 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1f1e:	79bb      	ldrb	r3, [r7, #6]
    1f20:	2201      	movs	r2, #1
    1f22:	409a      	lsls	r2, r3
    1f24:	79fb      	ldrb	r3, [r7, #7]
    1f26:	4619      	mov	r1, r3
    1f28:	4819      	ldr	r0, [pc, #100]	; (1f90 <_gpio_set_pin_pull_mode+0xa0>)
    1f2a:	4b1b      	ldr	r3, [pc, #108]	; (1f98 <_gpio_set_pin_pull_mode+0xa8>)
    1f2c:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1f2e:	79ba      	ldrb	r2, [r7, #6]
    1f30:	79fb      	ldrb	r3, [r7, #7]
    1f32:	4619      	mov	r1, r3
    1f34:	4816      	ldr	r0, [pc, #88]	; (1f90 <_gpio_set_pin_pull_mode+0xa0>)
    1f36:	4b19      	ldr	r3, [pc, #100]	; (1f9c <_gpio_set_pin_pull_mode+0xac>)
    1f38:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    1f3a:	79bb      	ldrb	r3, [r7, #6]
    1f3c:	2201      	movs	r2, #1
    1f3e:	409a      	lsls	r2, r3
    1f40:	79fb      	ldrb	r3, [r7, #7]
    1f42:	4619      	mov	r1, r3
    1f44:	4812      	ldr	r0, [pc, #72]	; (1f90 <_gpio_set_pin_pull_mode+0xa0>)
    1f46:	4b16      	ldr	r3, [pc, #88]	; (1fa0 <_gpio_set_pin_pull_mode+0xb0>)
    1f48:	4798      	blx	r3
		break;
    1f4a:	e01c      	b.n	1f86 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1f4c:	79bb      	ldrb	r3, [r7, #6]
    1f4e:	2201      	movs	r2, #1
    1f50:	409a      	lsls	r2, r3
    1f52:	79fb      	ldrb	r3, [r7, #7]
    1f54:	4619      	mov	r1, r3
    1f56:	480e      	ldr	r0, [pc, #56]	; (1f90 <_gpio_set_pin_pull_mode+0xa0>)
    1f58:	4b0f      	ldr	r3, [pc, #60]	; (1f98 <_gpio_set_pin_pull_mode+0xa8>)
    1f5a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1f5c:	79ba      	ldrb	r2, [r7, #6]
    1f5e:	79fb      	ldrb	r3, [r7, #7]
    1f60:	4619      	mov	r1, r3
    1f62:	480b      	ldr	r0, [pc, #44]	; (1f90 <_gpio_set_pin_pull_mode+0xa0>)
    1f64:	4b0d      	ldr	r3, [pc, #52]	; (1f9c <_gpio_set_pin_pull_mode+0xac>)
    1f66:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    1f68:	79bb      	ldrb	r3, [r7, #6]
    1f6a:	2201      	movs	r2, #1
    1f6c:	409a      	lsls	r2, r3
    1f6e:	79fb      	ldrb	r3, [r7, #7]
    1f70:	4619      	mov	r1, r3
    1f72:	4807      	ldr	r0, [pc, #28]	; (1f90 <_gpio_set_pin_pull_mode+0xa0>)
    1f74:	4b0b      	ldr	r3, [pc, #44]	; (1fa4 <_gpio_set_pin_pull_mode+0xb4>)
    1f76:	4798      	blx	r3
		break;
    1f78:	e005      	b.n	1f86 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    1f7a:	2289      	movs	r2, #137	; 0x89
    1f7c:	490a      	ldr	r1, [pc, #40]	; (1fa8 <_gpio_set_pin_pull_mode+0xb8>)
    1f7e:	2000      	movs	r0, #0
    1f80:	4b0a      	ldr	r3, [pc, #40]	; (1fac <_gpio_set_pin_pull_mode+0xbc>)
    1f82:	4798      	blx	r3
		break;
    1f84:	bf00      	nop
	}
}
    1f86:	bf00      	nop
    1f88:	3708      	adds	r7, #8
    1f8a:	46bd      	mov	sp, r7
    1f8c:	bd80      	pop	{r7, pc}
    1f8e:	bf00      	nop
    1f90:	41008000 	.word	0x41008000
    1f94:	00001d57 	.word	0x00001d57
    1f98:	00001b83 	.word	0x00001b83
    1f9c:	00001d13 	.word	0x00001d13
    1fa0:	00001bab 	.word	0x00001bab
    1fa4:	00001bd3 	.word	0x00001bd3
    1fa8:	0001ab8c 	.word	0x0001ab8c
    1fac:	00004c81 	.word	0x00004c81

00001fb0 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1fb0:	b590      	push	{r4, r7, lr}
    1fb2:	b085      	sub	sp, #20
    1fb4:	af00      	add	r7, sp, #0
    1fb6:	6078      	str	r0, [r7, #4]
    1fb8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1fba:	687b      	ldr	r3, [r7, #4]
    1fbc:	095b      	lsrs	r3, r3, #5
    1fbe:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    1fc0:	687b      	ldr	r3, [r7, #4]
    1fc2:	b2db      	uxtb	r3, r3
    1fc4:	f003 031f 	and.w	r3, r3, #31
    1fc8:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1fca:	683b      	ldr	r3, [r7, #0]
    1fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
    1fd0:	d106      	bne.n	1fe0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    1fd2:	7bba      	ldrb	r2, [r7, #14]
    1fd4:	7bf9      	ldrb	r1, [r7, #15]
    1fd6:	2300      	movs	r3, #0
    1fd8:	4812      	ldr	r0, [pc, #72]	; (2024 <_gpio_set_pin_function+0x74>)
    1fda:	4c13      	ldr	r4, [pc, #76]	; (2028 <_gpio_set_pin_function+0x78>)
    1fdc:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    1fde:	e01d      	b.n	201c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1fe0:	7bba      	ldrb	r2, [r7, #14]
    1fe2:	7bf9      	ldrb	r1, [r7, #15]
    1fe4:	2301      	movs	r3, #1
    1fe6:	480f      	ldr	r0, [pc, #60]	; (2024 <_gpio_set_pin_function+0x74>)
    1fe8:	4c0f      	ldr	r4, [pc, #60]	; (2028 <_gpio_set_pin_function+0x78>)
    1fea:	47a0      	blx	r4
		if (pin & 1) {
    1fec:	7bbb      	ldrb	r3, [r7, #14]
    1fee:	f003 0301 	and.w	r3, r3, #1
    1ff2:	2b00      	cmp	r3, #0
    1ff4:	d009      	beq.n	200a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    1ff6:	7bbb      	ldrb	r3, [r7, #14]
    1ff8:	085b      	lsrs	r3, r3, #1
    1ffa:	b2da      	uxtb	r2, r3
    1ffc:	683b      	ldr	r3, [r7, #0]
    1ffe:	b2db      	uxtb	r3, r3
    2000:	7bf9      	ldrb	r1, [r7, #15]
    2002:	4808      	ldr	r0, [pc, #32]	; (2024 <_gpio_set_pin_function+0x74>)
    2004:	4c09      	ldr	r4, [pc, #36]	; (202c <_gpio_set_pin_function+0x7c>)
    2006:	47a0      	blx	r4
}
    2008:	e008      	b.n	201c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    200a:	7bbb      	ldrb	r3, [r7, #14]
    200c:	085b      	lsrs	r3, r3, #1
    200e:	b2da      	uxtb	r2, r3
    2010:	683b      	ldr	r3, [r7, #0]
    2012:	b2db      	uxtb	r3, r3
    2014:	7bf9      	ldrb	r1, [r7, #15]
    2016:	4803      	ldr	r0, [pc, #12]	; (2024 <_gpio_set_pin_function+0x74>)
    2018:	4c05      	ldr	r4, [pc, #20]	; (2030 <_gpio_set_pin_function+0x80>)
    201a:	47a0      	blx	r4
}
    201c:	bf00      	nop
    201e:	3714      	adds	r7, #20
    2020:	46bd      	mov	sp, r7
    2022:	bd90      	pop	{r4, r7, pc}
    2024:	41008000 	.word	0x41008000
    2028:	00001cb9 	.word	0x00001cb9
    202c:	00001c5b 	.word	0x00001c5b
    2030:	00001bfb 	.word	0x00001bfb

00002034 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    2034:	b580      	push	{r7, lr}
    2036:	b082      	sub	sp, #8
    2038:	af00      	add	r7, sp, #0
    203a:	4603      	mov	r3, r0
    203c:	460a      	mov	r2, r1
    203e:	71fb      	strb	r3, [r7, #7]
    2040:	4613      	mov	r3, r2
    2042:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    2044:	79fb      	ldrb	r3, [r7, #7]
    2046:	095b      	lsrs	r3, r3, #5
    2048:	b2d8      	uxtb	r0, r3
    204a:	79fb      	ldrb	r3, [r7, #7]
    204c:	f003 031f 	and.w	r3, r3, #31
    2050:	b2db      	uxtb	r3, r3
    2052:	79ba      	ldrb	r2, [r7, #6]
    2054:	4619      	mov	r1, r3
    2056:	4b03      	ldr	r3, [pc, #12]	; (2064 <gpio_set_pin_pull_mode+0x30>)
    2058:	4798      	blx	r3
}
    205a:	bf00      	nop
    205c:	3708      	adds	r7, #8
    205e:	46bd      	mov	sp, r7
    2060:	bd80      	pop	{r7, pc}
    2062:	bf00      	nop
    2064:	00001ef1 	.word	0x00001ef1

00002068 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    2068:	b580      	push	{r7, lr}
    206a:	b082      	sub	sp, #8
    206c:	af00      	add	r7, sp, #0
    206e:	6078      	str	r0, [r7, #4]
    2070:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    2072:	6839      	ldr	r1, [r7, #0]
    2074:	6878      	ldr	r0, [r7, #4]
    2076:	4b03      	ldr	r3, [pc, #12]	; (2084 <gpio_set_pin_function+0x1c>)
    2078:	4798      	blx	r3
}
    207a:	bf00      	nop
    207c:	3708      	adds	r7, #8
    207e:	46bd      	mov	sp, r7
    2080:	bd80      	pop	{r7, pc}
    2082:	bf00      	nop
    2084:	00001fb1 	.word	0x00001fb1

00002088 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    2088:	b580      	push	{r7, lr}
    208a:	b082      	sub	sp, #8
    208c:	af00      	add	r7, sp, #0
    208e:	4603      	mov	r3, r0
    2090:	460a      	mov	r2, r1
    2092:	71fb      	strb	r3, [r7, #7]
    2094:	4613      	mov	r3, r2
    2096:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    2098:	79fb      	ldrb	r3, [r7, #7]
    209a:	095b      	lsrs	r3, r3, #5
    209c:	b2d8      	uxtb	r0, r3
    209e:	79fb      	ldrb	r3, [r7, #7]
    20a0:	f003 031f 	and.w	r3, r3, #31
    20a4:	2201      	movs	r2, #1
    20a6:	fa02 f303 	lsl.w	r3, r2, r3
    20aa:	79ba      	ldrb	r2, [r7, #6]
    20ac:	4619      	mov	r1, r3
    20ae:	4b03      	ldr	r3, [pc, #12]	; (20bc <gpio_set_pin_direction+0x34>)
    20b0:	4798      	blx	r3
}
    20b2:	bf00      	nop
    20b4:	3708      	adds	r7, #8
    20b6:	46bd      	mov	sp, r7
    20b8:	bd80      	pop	{r7, pc}
    20ba:	bf00      	nop
    20bc:	00001dc5 	.word	0x00001dc5

000020c0 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    20c0:	b580      	push	{r7, lr}
    20c2:	b082      	sub	sp, #8
    20c4:	af00      	add	r7, sp, #0
    20c6:	4603      	mov	r3, r0
    20c8:	460a      	mov	r2, r1
    20ca:	71fb      	strb	r3, [r7, #7]
    20cc:	4613      	mov	r3, r2
    20ce:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    20d0:	79fb      	ldrb	r3, [r7, #7]
    20d2:	095b      	lsrs	r3, r3, #5
    20d4:	b2d8      	uxtb	r0, r3
    20d6:	79fb      	ldrb	r3, [r7, #7]
    20d8:	f003 031f 	and.w	r3, r3, #31
    20dc:	2201      	movs	r2, #1
    20de:	fa02 f303 	lsl.w	r3, r2, r3
    20e2:	79ba      	ldrb	r2, [r7, #6]
    20e4:	4619      	mov	r1, r3
    20e6:	4b03      	ldr	r3, [pc, #12]	; (20f4 <gpio_set_pin_level+0x34>)
    20e8:	4798      	blx	r3
}
    20ea:	bf00      	nop
    20ec:	3708      	adds	r7, #8
    20ee:	46bd      	mov	sp, r7
    20f0:	bd80      	pop	{r7, pc}
    20f2:	bf00      	nop
    20f4:	00001ead 	.word	0x00001ead

000020f8 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    20f8:	b580      	push	{r7, lr}
    20fa:	af00      	add	r7, sp, #0
	_init_chip();
    20fc:	4b01      	ldr	r3, [pc, #4]	; (2104 <init_mcu+0xc>)
    20fe:	4798      	blx	r3
}
    2100:	bf00      	nop
    2102:	bd80      	pop	{r7, pc}
    2104:	00005edd 	.word	0x00005edd

00002108 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    2108:	b580      	push	{r7, lr}
    210a:	b082      	sub	sp, #8
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
    2110:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    2112:	687b      	ldr	r3, [r7, #4]
    2114:	2b00      	cmp	r3, #0
    2116:	d004      	beq.n	2122 <wdt_init+0x1a>
    2118:	683b      	ldr	r3, [r7, #0]
    211a:	2b00      	cmp	r3, #0
    211c:	d001      	beq.n	2122 <wdt_init+0x1a>
    211e:	2301      	movs	r3, #1
    2120:	e000      	b.n	2124 <wdt_init+0x1c>
    2122:	2300      	movs	r3, #0
    2124:	f003 0301 	and.w	r3, r3, #1
    2128:	b2db      	uxtb	r3, r3
    212a:	2248      	movs	r2, #72	; 0x48
    212c:	4907      	ldr	r1, [pc, #28]	; (214c <wdt_init+0x44>)
    212e:	4618      	mov	r0, r3
    2130:	4b07      	ldr	r3, [pc, #28]	; (2150 <wdt_init+0x48>)
    2132:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    2134:	687b      	ldr	r3, [r7, #4]
    2136:	683a      	ldr	r2, [r7, #0]
    2138:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    213a:	687b      	ldr	r3, [r7, #4]
    213c:	4618      	mov	r0, r3
    213e:	4b05      	ldr	r3, [pc, #20]	; (2154 <wdt_init+0x4c>)
    2140:	4798      	blx	r3
    2142:	4603      	mov	r3, r0
}
    2144:	4618      	mov	r0, r3
    2146:	3708      	adds	r7, #8
    2148:	46bd      	mov	sp, r7
    214a:	bd80      	pop	{r7, pc}
    214c:	0001aba8 	.word	0x0001aba8
    2150:	00004c81 	.word	0x00004c81
    2154:	0000cad1 	.word	0x0000cad1

00002158 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    2158:	b580      	push	{r7, lr}
    215a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    215c:	4804      	ldr	r0, [pc, #16]	; (2170 <CRC_CALC_init+0x18>)
    215e:	4b05      	ldr	r3, [pc, #20]	; (2174 <CRC_CALC_init+0x1c>)
    2160:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    2162:	4905      	ldr	r1, [pc, #20]	; (2178 <CRC_CALC_init+0x20>)
    2164:	4805      	ldr	r0, [pc, #20]	; (217c <CRC_CALC_init+0x24>)
    2166:	4b06      	ldr	r3, [pc, #24]	; (2180 <CRC_CALC_init+0x28>)
    2168:	4798      	blx	r3
}
    216a:	bf00      	nop
    216c:	bd80      	pop	{r7, pc}
    216e:	bf00      	nop
    2170:	40000800 	.word	0x40000800
    2174:	0000195b 	.word	0x0000195b
    2178:	41002000 	.word	0x41002000
    217c:	2000e0c4 	.word	0x2000e0c4
    2180:	000035a5 	.word	0x000035a5

00002184 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    2184:	b580      	push	{r7, lr}
    2186:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2188:	2244      	movs	r2, #68	; 0x44
    218a:	2104      	movs	r1, #4
    218c:	483f      	ldr	r0, [pc, #252]	; (228c <EXTERNAL_IRQ_0_init+0x108>)
    218e:	4b40      	ldr	r3, [pc, #256]	; (2290 <EXTERNAL_IRQ_0_init+0x10c>)
    2190:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    2192:	4840      	ldr	r0, [pc, #256]	; (2294 <EXTERNAL_IRQ_0_init+0x110>)
    2194:	4b40      	ldr	r3, [pc, #256]	; (2298 <EXTERNAL_IRQ_0_init+0x114>)
    2196:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    2198:	2101      	movs	r1, #1
    219a:	2040      	movs	r0, #64	; 0x40
    219c:	4b3f      	ldr	r3, [pc, #252]	; (229c <EXTERNAL_IRQ_0_init+0x118>)
    219e:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    21a0:	2100      	movs	r1, #0
    21a2:	2040      	movs	r0, #64	; 0x40
    21a4:	4b3e      	ldr	r3, [pc, #248]	; (22a0 <EXTERNAL_IRQ_0_init+0x11c>)
    21a6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    21a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    21ac:	2040      	movs	r0, #64	; 0x40
    21ae:	4b3d      	ldr	r3, [pc, #244]	; (22a4 <EXTERNAL_IRQ_0_init+0x120>)
    21b0:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    21b2:	2101      	movs	r1, #1
    21b4:	2021      	movs	r0, #33	; 0x21
    21b6:	4b39      	ldr	r3, [pc, #228]	; (229c <EXTERNAL_IRQ_0_init+0x118>)
    21b8:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    21ba:	2100      	movs	r1, #0
    21bc:	2021      	movs	r0, #33	; 0x21
    21be:	4b38      	ldr	r3, [pc, #224]	; (22a0 <EXTERNAL_IRQ_0_init+0x11c>)
    21c0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    21c2:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    21c6:	2021      	movs	r0, #33	; 0x21
    21c8:	4b36      	ldr	r3, [pc, #216]	; (22a4 <EXTERNAL_IRQ_0_init+0x120>)
    21ca:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    21cc:	2101      	movs	r1, #1
    21ce:	2003      	movs	r0, #3
    21d0:	4b32      	ldr	r3, [pc, #200]	; (229c <EXTERNAL_IRQ_0_init+0x118>)
    21d2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    21d4:	2102      	movs	r1, #2
    21d6:	2003      	movs	r0, #3
    21d8:	4b31      	ldr	r3, [pc, #196]	; (22a0 <EXTERNAL_IRQ_0_init+0x11c>)
    21da:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    21dc:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    21e0:	2003      	movs	r0, #3
    21e2:	4b30      	ldr	r3, [pc, #192]	; (22a4 <EXTERNAL_IRQ_0_init+0x120>)
    21e4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    21e6:	2101      	movs	r1, #1
    21e8:	2004      	movs	r0, #4
    21ea:	4b2c      	ldr	r3, [pc, #176]	; (229c <EXTERNAL_IRQ_0_init+0x118>)
    21ec:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    21ee:	2102      	movs	r1, #2
    21f0:	2004      	movs	r0, #4
    21f2:	4b2b      	ldr	r3, [pc, #172]	; (22a0 <EXTERNAL_IRQ_0_init+0x11c>)
    21f4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    21f6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    21fa:	2004      	movs	r0, #4
    21fc:	4b29      	ldr	r3, [pc, #164]	; (22a4 <EXTERNAL_IRQ_0_init+0x120>)
    21fe:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    2200:	2101      	movs	r1, #1
    2202:	2005      	movs	r0, #5
    2204:	4b25      	ldr	r3, [pc, #148]	; (229c <EXTERNAL_IRQ_0_init+0x118>)
    2206:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    2208:	2102      	movs	r1, #2
    220a:	2005      	movs	r0, #5
    220c:	4b24      	ldr	r3, [pc, #144]	; (22a0 <EXTERNAL_IRQ_0_init+0x11c>)
    220e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    2210:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    2214:	2005      	movs	r0, #5
    2216:	4b23      	ldr	r3, [pc, #140]	; (22a4 <EXTERNAL_IRQ_0_init+0x120>)
    2218:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    221a:	2101      	movs	r1, #1
    221c:	2056      	movs	r0, #86	; 0x56
    221e:	4b1f      	ldr	r3, [pc, #124]	; (229c <EXTERNAL_IRQ_0_init+0x118>)
    2220:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    2222:	2102      	movs	r1, #2
    2224:	2056      	movs	r0, #86	; 0x56
    2226:	4b1e      	ldr	r3, [pc, #120]	; (22a0 <EXTERNAL_IRQ_0_init+0x11c>)
    2228:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    222a:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    222e:	2056      	movs	r0, #86	; 0x56
    2230:	4b1c      	ldr	r3, [pc, #112]	; (22a4 <EXTERNAL_IRQ_0_init+0x120>)
    2232:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    2234:	2101      	movs	r1, #1
    2236:	2057      	movs	r0, #87	; 0x57
    2238:	4b18      	ldr	r3, [pc, #96]	; (229c <EXTERNAL_IRQ_0_init+0x118>)
    223a:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    223c:	2102      	movs	r1, #2
    223e:	2057      	movs	r0, #87	; 0x57
    2240:	4b17      	ldr	r3, [pc, #92]	; (22a0 <EXTERNAL_IRQ_0_init+0x11c>)
    2242:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    2244:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    2248:	2057      	movs	r0, #87	; 0x57
    224a:	4b16      	ldr	r3, [pc, #88]	; (22a4 <EXTERNAL_IRQ_0_init+0x120>)
    224c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    224e:	2101      	movs	r1, #1
    2250:	2028      	movs	r0, #40	; 0x28
    2252:	4b12      	ldr	r3, [pc, #72]	; (229c <EXTERNAL_IRQ_0_init+0x118>)
    2254:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    2256:	2100      	movs	r1, #0
    2258:	2028      	movs	r0, #40	; 0x28
    225a:	4b11      	ldr	r3, [pc, #68]	; (22a0 <EXTERNAL_IRQ_0_init+0x11c>)
    225c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    225e:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    2262:	2028      	movs	r0, #40	; 0x28
    2264:	4b0f      	ldr	r3, [pc, #60]	; (22a4 <EXTERNAL_IRQ_0_init+0x120>)
    2266:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    2268:	2101      	movs	r1, #1
    226a:	2029      	movs	r0, #41	; 0x29
    226c:	4b0b      	ldr	r3, [pc, #44]	; (229c <EXTERNAL_IRQ_0_init+0x118>)
    226e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    2270:	2100      	movs	r1, #0
    2272:	2029      	movs	r0, #41	; 0x29
    2274:	4b0a      	ldr	r3, [pc, #40]	; (22a0 <EXTERNAL_IRQ_0_init+0x11c>)
    2276:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    2278:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    227c:	2029      	movs	r0, #41	; 0x29
    227e:	4b09      	ldr	r3, [pc, #36]	; (22a4 <EXTERNAL_IRQ_0_init+0x120>)
    2280:	4798      	blx	r3

	ext_irq_init();
    2282:	4b09      	ldr	r3, [pc, #36]	; (22a8 <EXTERNAL_IRQ_0_init+0x124>)
    2284:	4798      	blx	r3
}
    2286:	bf00      	nop
    2288:	bd80      	pop	{r7, pc}
    228a:	bf00      	nop
    228c:	40001c00 	.word	0x40001c00
    2290:	00001815 	.word	0x00001815
    2294:	40000800 	.word	0x40000800
    2298:	000018fb 	.word	0x000018fb
    229c:	00002089 	.word	0x00002089
    22a0:	00002035 	.word	0x00002035
    22a4:	00002069 	.word	0x00002069
    22a8:	0000366d 	.word	0x0000366d

000022ac <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    22ac:	b580      	push	{r7, lr}
    22ae:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    22b0:	2244      	movs	r2, #68	; 0x44
    22b2:	210b      	movs	r1, #11
    22b4:	4807      	ldr	r0, [pc, #28]	; (22d4 <EVENT_SYSTEM_0_init+0x28>)
    22b6:	4b08      	ldr	r3, [pc, #32]	; (22d8 <EVENT_SYSTEM_0_init+0x2c>)
    22b8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    22ba:	2244      	movs	r2, #68	; 0x44
    22bc:	210c      	movs	r1, #12
    22be:	4805      	ldr	r0, [pc, #20]	; (22d4 <EVENT_SYSTEM_0_init+0x28>)
    22c0:	4b05      	ldr	r3, [pc, #20]	; (22d8 <EVENT_SYSTEM_0_init+0x2c>)
    22c2:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    22c4:	4805      	ldr	r0, [pc, #20]	; (22dc <EVENT_SYSTEM_0_init+0x30>)
    22c6:	4b06      	ldr	r3, [pc, #24]	; (22e0 <EVENT_SYSTEM_0_init+0x34>)
    22c8:	4798      	blx	r3

	event_system_init();
    22ca:	4b06      	ldr	r3, [pc, #24]	; (22e4 <EVENT_SYSTEM_0_init+0x38>)
    22cc:	4798      	blx	r3
}
    22ce:	bf00      	nop
    22d0:	bd80      	pop	{r7, pc}
    22d2:	bf00      	nop
    22d4:	40001c00 	.word	0x40001c00
    22d8:	00001815 	.word	0x00001815
    22dc:	40000800 	.word	0x40000800
    22e0:	0000197b 	.word	0x0000197b
    22e4:	00003659 	.word	0x00003659

000022e8 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    22e8:	b580      	push	{r7, lr}
    22ea:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    22ec:	2101      	movs	r1, #1
    22ee:	202b      	movs	r0, #43	; 0x2b
    22f0:	4b2b      	ldr	r3, [pc, #172]	; (23a0 <QSPI_N25Q256_PORT_init+0xb8>)
    22f2:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    22f4:	2100      	movs	r1, #0
    22f6:	202b      	movs	r0, #43	; 0x2b
    22f8:	4b2a      	ldr	r3, [pc, #168]	; (23a4 <QSPI_N25Q256_PORT_init+0xbc>)
    22fa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    22fc:	492a      	ldr	r1, [pc, #168]	; (23a8 <QSPI_N25Q256_PORT_init+0xc0>)
    22fe:	202b      	movs	r0, #43	; 0x2b
    2300:	4b2a      	ldr	r3, [pc, #168]	; (23ac <QSPI_N25Q256_PORT_init+0xc4>)
    2302:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    2304:	2102      	movs	r1, #2
    2306:	2008      	movs	r0, #8
    2308:	4b25      	ldr	r3, [pc, #148]	; (23a0 <QSPI_N25Q256_PORT_init+0xb8>)
    230a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    230c:	2100      	movs	r1, #0
    230e:	2008      	movs	r0, #8
    2310:	4b27      	ldr	r3, [pc, #156]	; (23b0 <QSPI_N25Q256_PORT_init+0xc8>)
    2312:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    2314:	2100      	movs	r1, #0
    2316:	2008      	movs	r0, #8
    2318:	4b22      	ldr	r3, [pc, #136]	; (23a4 <QSPI_N25Q256_PORT_init+0xbc>)
    231a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    231c:	4925      	ldr	r1, [pc, #148]	; (23b4 <QSPI_N25Q256_PORT_init+0xcc>)
    231e:	2008      	movs	r0, #8
    2320:	4b22      	ldr	r3, [pc, #136]	; (23ac <QSPI_N25Q256_PORT_init+0xc4>)
    2322:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    2324:	2102      	movs	r1, #2
    2326:	2009      	movs	r0, #9
    2328:	4b1d      	ldr	r3, [pc, #116]	; (23a0 <QSPI_N25Q256_PORT_init+0xb8>)
    232a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    232c:	2100      	movs	r1, #0
    232e:	2009      	movs	r0, #9
    2330:	4b1f      	ldr	r3, [pc, #124]	; (23b0 <QSPI_N25Q256_PORT_init+0xc8>)
    2332:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    2334:	2100      	movs	r1, #0
    2336:	2009      	movs	r0, #9
    2338:	4b1a      	ldr	r3, [pc, #104]	; (23a4 <QSPI_N25Q256_PORT_init+0xbc>)
    233a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    233c:	491e      	ldr	r1, [pc, #120]	; (23b8 <QSPI_N25Q256_PORT_init+0xd0>)
    233e:	2009      	movs	r0, #9
    2340:	4b1a      	ldr	r3, [pc, #104]	; (23ac <QSPI_N25Q256_PORT_init+0xc4>)
    2342:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    2344:	2102      	movs	r1, #2
    2346:	200a      	movs	r0, #10
    2348:	4b15      	ldr	r3, [pc, #84]	; (23a0 <QSPI_N25Q256_PORT_init+0xb8>)
    234a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    234c:	2100      	movs	r1, #0
    234e:	200a      	movs	r0, #10
    2350:	4b17      	ldr	r3, [pc, #92]	; (23b0 <QSPI_N25Q256_PORT_init+0xc8>)
    2352:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    2354:	2100      	movs	r1, #0
    2356:	200a      	movs	r0, #10
    2358:	4b12      	ldr	r3, [pc, #72]	; (23a4 <QSPI_N25Q256_PORT_init+0xbc>)
    235a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    235c:	4917      	ldr	r1, [pc, #92]	; (23bc <QSPI_N25Q256_PORT_init+0xd4>)
    235e:	200a      	movs	r0, #10
    2360:	4b12      	ldr	r3, [pc, #72]	; (23ac <QSPI_N25Q256_PORT_init+0xc4>)
    2362:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    2364:	2102      	movs	r1, #2
    2366:	200b      	movs	r0, #11
    2368:	4b0d      	ldr	r3, [pc, #52]	; (23a0 <QSPI_N25Q256_PORT_init+0xb8>)
    236a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    236c:	2100      	movs	r1, #0
    236e:	200b      	movs	r0, #11
    2370:	4b0f      	ldr	r3, [pc, #60]	; (23b0 <QSPI_N25Q256_PORT_init+0xc8>)
    2372:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    2374:	2100      	movs	r1, #0
    2376:	200b      	movs	r0, #11
    2378:	4b0a      	ldr	r3, [pc, #40]	; (23a4 <QSPI_N25Q256_PORT_init+0xbc>)
    237a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    237c:	4910      	ldr	r1, [pc, #64]	; (23c0 <QSPI_N25Q256_PORT_init+0xd8>)
    237e:	200b      	movs	r0, #11
    2380:	4b0a      	ldr	r3, [pc, #40]	; (23ac <QSPI_N25Q256_PORT_init+0xc4>)
    2382:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    2384:	2101      	movs	r1, #1
    2386:	202a      	movs	r0, #42	; 0x2a
    2388:	4b05      	ldr	r3, [pc, #20]	; (23a0 <QSPI_N25Q256_PORT_init+0xb8>)
    238a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    238c:	2100      	movs	r1, #0
    238e:	202a      	movs	r0, #42	; 0x2a
    2390:	4b04      	ldr	r3, [pc, #16]	; (23a4 <QSPI_N25Q256_PORT_init+0xbc>)
    2392:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    2394:	490b      	ldr	r1, [pc, #44]	; (23c4 <QSPI_N25Q256_PORT_init+0xdc>)
    2396:	202a      	movs	r0, #42	; 0x2a
    2398:	4b04      	ldr	r3, [pc, #16]	; (23ac <QSPI_N25Q256_PORT_init+0xc4>)
    239a:	4798      	blx	r3
}
    239c:	bf00      	nop
    239e:	bd80      	pop	{r7, pc}
    23a0:	00002089 	.word	0x00002089
    23a4:	00002035 	.word	0x00002035
    23a8:	002b0007 	.word	0x002b0007
    23ac:	00002069 	.word	0x00002069
    23b0:	000020c1 	.word	0x000020c1
    23b4:	00080007 	.word	0x00080007
    23b8:	00090007 	.word	0x00090007
    23bc:	000a0007 	.word	0x000a0007
    23c0:	000b0007 	.word	0x000b0007
    23c4:	002a0007 	.word	0x002a0007

000023c8 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    23c8:	b580      	push	{r7, lr}
    23ca:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    23cc:	4805      	ldr	r0, [pc, #20]	; (23e4 <QSPI_N25Q256_CLOCK_init+0x1c>)
    23ce:	4b06      	ldr	r3, [pc, #24]	; (23e8 <QSPI_N25Q256_CLOCK_init+0x20>)
    23d0:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    23d2:	4804      	ldr	r0, [pc, #16]	; (23e4 <QSPI_N25Q256_CLOCK_init+0x1c>)
    23d4:	4b05      	ldr	r3, [pc, #20]	; (23ec <QSPI_N25Q256_CLOCK_init+0x24>)
    23d6:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    23d8:	4802      	ldr	r0, [pc, #8]	; (23e4 <QSPI_N25Q256_CLOCK_init+0x1c>)
    23da:	4b05      	ldr	r3, [pc, #20]	; (23f0 <QSPI_N25Q256_CLOCK_init+0x28>)
    23dc:	4798      	blx	r3
}
    23de:	bf00      	nop
    23e0:	bd80      	pop	{r7, pc}
    23e2:	bf00      	nop
    23e4:	40000800 	.word	0x40000800
    23e8:	0000185b 	.word	0x0000185b
    23ec:	0000189b 	.word	0x0000189b
    23f0:	00001a7b 	.word	0x00001a7b

000023f4 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    23f4:	b580      	push	{r7, lr}
    23f6:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    23f8:	4b04      	ldr	r3, [pc, #16]	; (240c <QSPI_N25Q256_init+0x18>)
    23fa:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    23fc:	4904      	ldr	r1, [pc, #16]	; (2410 <QSPI_N25Q256_init+0x1c>)
    23fe:	4805      	ldr	r0, [pc, #20]	; (2414 <QSPI_N25Q256_init+0x20>)
    2400:	4b05      	ldr	r3, [pc, #20]	; (2418 <QSPI_N25Q256_init+0x24>)
    2402:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    2404:	4b05      	ldr	r3, [pc, #20]	; (241c <QSPI_N25Q256_init+0x28>)
    2406:	4798      	blx	r3
}
    2408:	bf00      	nop
    240a:	bd80      	pop	{r7, pc}
    240c:	000023c9 	.word	0x000023c9
    2410:	42003400 	.word	0x42003400
    2414:	2000df58 	.word	0x2000df58
    2418:	00003add 	.word	0x00003add
    241c:	000022e9 	.word	0x000022e9

00002420 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    2420:	b580      	push	{r7, lr}
    2422:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    2424:	4802      	ldr	r0, [pc, #8]	; (2430 <DATETIME_CLOCK_CLOCK_init+0x10>)
    2426:	4b03      	ldr	r3, [pc, #12]	; (2434 <DATETIME_CLOCK_CLOCK_init+0x14>)
    2428:	4798      	blx	r3
}
    242a:	bf00      	nop
    242c:	bd80      	pop	{r7, pc}
    242e:	bf00      	nop
    2430:	40000800 	.word	0x40000800
    2434:	000018db 	.word	0x000018db

00002438 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    2438:	b580      	push	{r7, lr}
    243a:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    243c:	4b03      	ldr	r3, [pc, #12]	; (244c <DATETIME_CLOCK_init+0x14>)
    243e:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    2440:	4903      	ldr	r1, [pc, #12]	; (2450 <DATETIME_CLOCK_init+0x18>)
    2442:	4804      	ldr	r0, [pc, #16]	; (2454 <DATETIME_CLOCK_init+0x1c>)
    2444:	4b04      	ldr	r3, [pc, #16]	; (2458 <DATETIME_CLOCK_init+0x20>)
    2446:	4798      	blx	r3
}
    2448:	bf00      	nop
    244a:	bd80      	pop	{r7, pc}
    244c:	00002421 	.word	0x00002421
    2450:	40002400 	.word	0x40002400
    2454:	2000e0a0 	.word	0x2000e0a0
    2458:	0000310d 	.word	0x0000310d

0000245c <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    245c:	b580      	push	{r7, lr}
    245e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA17,
    2460:	2100      	movs	r1, #0
    2462:	2011      	movs	r0, #17
    2464:	4b07      	ldr	r3, [pc, #28]	; (2484 <I2C_HEATERS_PORT_init+0x28>)
    2466:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17D_SERCOM3_PAD0);
    2468:	4907      	ldr	r1, [pc, #28]	; (2488 <I2C_HEATERS_PORT_init+0x2c>)
    246a:	2011      	movs	r0, #17
    246c:	4b07      	ldr	r3, [pc, #28]	; (248c <I2C_HEATERS_PORT_init+0x30>)
    246e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA16,
    2470:	2100      	movs	r1, #0
    2472:	2010      	movs	r0, #16
    2474:	4b03      	ldr	r3, [pc, #12]	; (2484 <I2C_HEATERS_PORT_init+0x28>)
    2476:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16D_SERCOM3_PAD1);
    2478:	4905      	ldr	r1, [pc, #20]	; (2490 <I2C_HEATERS_PORT_init+0x34>)
    247a:	2010      	movs	r0, #16
    247c:	4b03      	ldr	r3, [pc, #12]	; (248c <I2C_HEATERS_PORT_init+0x30>)
    247e:	4798      	blx	r3
}
    2480:	bf00      	nop
    2482:	bd80      	pop	{r7, pc}
    2484:	00002035 	.word	0x00002035
    2488:	00110003 	.word	0x00110003
    248c:	00002069 	.word	0x00002069
    2490:	00100003 	.word	0x00100003

00002494 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    2494:	b580      	push	{r7, lr}
    2496:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2498:	2240      	movs	r2, #64	; 0x40
    249a:	2118      	movs	r1, #24
    249c:	4806      	ldr	r0, [pc, #24]	; (24b8 <I2C_HEATERS_CLOCK_init+0x24>)
    249e:	4b07      	ldr	r3, [pc, #28]	; (24bc <I2C_HEATERS_CLOCK_init+0x28>)
    24a0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    24a2:	2243      	movs	r2, #67	; 0x43
    24a4:	2103      	movs	r1, #3
    24a6:	4804      	ldr	r0, [pc, #16]	; (24b8 <I2C_HEATERS_CLOCK_init+0x24>)
    24a8:	4b04      	ldr	r3, [pc, #16]	; (24bc <I2C_HEATERS_CLOCK_init+0x28>)
    24aa:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
    24ac:	4804      	ldr	r0, [pc, #16]	; (24c0 <I2C_HEATERS_CLOCK_init+0x2c>)
    24ae:	4b05      	ldr	r3, [pc, #20]	; (24c4 <I2C_HEATERS_CLOCK_init+0x30>)
    24b0:	4798      	blx	r3
}
    24b2:	bf00      	nop
    24b4:	bd80      	pop	{r7, pc}
    24b6:	bf00      	nop
    24b8:	40001c00 	.word	0x40001c00
    24bc:	00001815 	.word	0x00001815
    24c0:	40000800 	.word	0x40000800
    24c4:	0000199b 	.word	0x0000199b

000024c8 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    24c8:	b580      	push	{r7, lr}
    24ca:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    24cc:	4b04      	ldr	r3, [pc, #16]	; (24e0 <I2C_HEATERS_init+0x18>)
    24ce:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM3);
    24d0:	4904      	ldr	r1, [pc, #16]	; (24e4 <I2C_HEATERS_init+0x1c>)
    24d2:	4805      	ldr	r0, [pc, #20]	; (24e8 <I2C_HEATERS_init+0x20>)
    24d4:	4b05      	ldr	r3, [pc, #20]	; (24ec <I2C_HEATERS_init+0x24>)
    24d6:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    24d8:	4b05      	ldr	r3, [pc, #20]	; (24f0 <I2C_HEATERS_init+0x28>)
    24da:	4798      	blx	r3
}
    24dc:	bf00      	nop
    24de:	bd80      	pop	{r7, pc}
    24e0:	00002495 	.word	0x00002495
    24e4:	41014000 	.word	0x41014000
    24e8:	2000dff8 	.word	0x2000dff8
    24ec:	00003935 	.word	0x00003935
    24f0:	0000245d 	.word	0x0000245d

000024f4 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    24f4:	b580      	push	{r7, lr}
    24f6:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    24f8:	2100      	movs	r1, #0
    24fa:	203b      	movs	r0, #59	; 0x3b
    24fc:	4b11      	ldr	r3, [pc, #68]	; (2544 <SPI_TEMP_PORT_init+0x50>)
    24fe:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    2500:	2102      	movs	r1, #2
    2502:	203b      	movs	r0, #59	; 0x3b
    2504:	4b10      	ldr	r3, [pc, #64]	; (2548 <SPI_TEMP_PORT_init+0x54>)
    2506:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    2508:	4910      	ldr	r1, [pc, #64]	; (254c <SPI_TEMP_PORT_init+0x58>)
    250a:	203b      	movs	r0, #59	; 0x3b
    250c:	4b10      	ldr	r3, [pc, #64]	; (2550 <SPI_TEMP_PORT_init+0x5c>)
    250e:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    2510:	2100      	movs	r1, #0
    2512:	203a      	movs	r0, #58	; 0x3a
    2514:	4b0b      	ldr	r3, [pc, #44]	; (2544 <SPI_TEMP_PORT_init+0x50>)
    2516:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    2518:	2102      	movs	r1, #2
    251a:	203a      	movs	r0, #58	; 0x3a
    251c:	4b0a      	ldr	r3, [pc, #40]	; (2548 <SPI_TEMP_PORT_init+0x54>)
    251e:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    2520:	490c      	ldr	r1, [pc, #48]	; (2554 <SPI_TEMP_PORT_init+0x60>)
    2522:	203a      	movs	r0, #58	; 0x3a
    2524:	4b0a      	ldr	r3, [pc, #40]	; (2550 <SPI_TEMP_PORT_init+0x5c>)
    2526:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    2528:	2101      	movs	r1, #1
    252a:	203c      	movs	r0, #60	; 0x3c
    252c:	4b06      	ldr	r3, [pc, #24]	; (2548 <SPI_TEMP_PORT_init+0x54>)
    252e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    2530:	2100      	movs	r1, #0
    2532:	203c      	movs	r0, #60	; 0x3c
    2534:	4b08      	ldr	r3, [pc, #32]	; (2558 <SPI_TEMP_PORT_init+0x64>)
    2536:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    2538:	4908      	ldr	r1, [pc, #32]	; (255c <SPI_TEMP_PORT_init+0x68>)
    253a:	203c      	movs	r0, #60	; 0x3c
    253c:	4b04      	ldr	r3, [pc, #16]	; (2550 <SPI_TEMP_PORT_init+0x5c>)
    253e:	4798      	blx	r3
}
    2540:	bf00      	nop
    2542:	bd80      	pop	{r7, pc}
    2544:	000020c1 	.word	0x000020c1
    2548:	00002089 	.word	0x00002089
    254c:	003b0003 	.word	0x003b0003
    2550:	00002069 	.word	0x00002069
    2554:	003a0003 	.word	0x003a0003
    2558:	00002035 	.word	0x00002035
    255c:	003c0003 	.word	0x003c0003

00002560 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    2560:	b580      	push	{r7, lr}
    2562:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2564:	2245      	movs	r2, #69	; 0x45
    2566:	2122      	movs	r1, #34	; 0x22
    2568:	4806      	ldr	r0, [pc, #24]	; (2584 <SPI_TEMP_CLOCK_init+0x24>)
    256a:	4b07      	ldr	r3, [pc, #28]	; (2588 <SPI_TEMP_CLOCK_init+0x28>)
    256c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    256e:	224a      	movs	r2, #74	; 0x4a
    2570:	2103      	movs	r1, #3
    2572:	4804      	ldr	r0, [pc, #16]	; (2584 <SPI_TEMP_CLOCK_init+0x24>)
    2574:	4b04      	ldr	r3, [pc, #16]	; (2588 <SPI_TEMP_CLOCK_init+0x28>)
    2576:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    2578:	4804      	ldr	r0, [pc, #16]	; (258c <SPI_TEMP_CLOCK_init+0x2c>)
    257a:	4b05      	ldr	r3, [pc, #20]	; (2590 <SPI_TEMP_CLOCK_init+0x30>)
    257c:	4798      	blx	r3
}
    257e:	bf00      	nop
    2580:	bd80      	pop	{r7, pc}
    2582:	bf00      	nop
    2584:	40001c00 	.word	0x40001c00
    2588:	00001815 	.word	0x00001815
    258c:	40000800 	.word	0x40000800
    2590:	00001a9b 	.word	0x00001a9b

00002594 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    2594:	b580      	push	{r7, lr}
    2596:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    2598:	4b05      	ldr	r3, [pc, #20]	; (25b0 <SPI_TEMP_init+0x1c>)
    259a:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    259c:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    25a0:	4804      	ldr	r0, [pc, #16]	; (25b4 <SPI_TEMP_init+0x20>)
    25a2:	4b05      	ldr	r3, [pc, #20]	; (25b8 <SPI_TEMP_init+0x24>)
    25a4:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    25a6:	4b05      	ldr	r3, [pc, #20]	; (25bc <SPI_TEMP_init+0x28>)
    25a8:	4798      	blx	r3
}
    25aa:	bf00      	nop
    25ac:	bd80      	pop	{r7, pc}
    25ae:	bf00      	nop
    25b0:	00002561 	.word	0x00002561
    25b4:	2000df00 	.word	0x2000df00
    25b8:	00003bed 	.word	0x00003bed
    25bc:	000024f5 	.word	0x000024f5

000025c0 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    25c0:	b580      	push	{r7, lr}
    25c2:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    25c4:	2100      	movs	r1, #0
    25c6:	2017      	movs	r0, #23
    25c8:	4b07      	ldr	r3, [pc, #28]	; (25e8 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    25ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    25cc:	4907      	ldr	r1, [pc, #28]	; (25ec <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    25ce:	2017      	movs	r0, #23
    25d0:	4b07      	ldr	r3, [pc, #28]	; (25f0 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    25d2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    25d4:	2100      	movs	r1, #0
    25d6:	2016      	movs	r0, #22
    25d8:	4b03      	ldr	r3, [pc, #12]	; (25e8 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    25da:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    25dc:	4905      	ldr	r1, [pc, #20]	; (25f4 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    25de:	2016      	movs	r0, #22
    25e0:	4b03      	ldr	r3, [pc, #12]	; (25f0 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    25e2:	4798      	blx	r3
}
    25e4:	bf00      	nop
    25e6:	bd80      	pop	{r7, pc}
    25e8:	00002035 	.word	0x00002035
    25ec:	00170003 	.word	0x00170003
    25f0:	00002069 	.word	0x00002069
    25f4:	00160003 	.word	0x00160003

000025f8 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    25f8:	b580      	push	{r7, lr}
    25fa:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    25fc:	2244      	movs	r2, #68	; 0x44
    25fe:	2123      	movs	r1, #35	; 0x23
    2600:	4806      	ldr	r0, [pc, #24]	; (261c <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    2602:	4b07      	ldr	r3, [pc, #28]	; (2620 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    2604:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2606:	224a      	movs	r2, #74	; 0x4a
    2608:	2103      	movs	r1, #3
    260a:	4804      	ldr	r0, [pc, #16]	; (261c <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    260c:	4b04      	ldr	r3, [pc, #16]	; (2620 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    260e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    2610:	4804      	ldr	r0, [pc, #16]	; (2624 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    2612:	4b05      	ldr	r3, [pc, #20]	; (2628 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    2614:	4798      	blx	r3
}
    2616:	bf00      	nop
    2618:	bd80      	pop	{r7, pc}
    261a:	bf00      	nop
    261c:	40001c00 	.word	0x40001c00
    2620:	00001815 	.word	0x00001815
    2624:	40000800 	.word	0x40000800
    2628:	00001abb 	.word	0x00001abb

0000262c <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    262c:	b580      	push	{r7, lr}
    262e:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    2630:	4b04      	ldr	r3, [pc, #16]	; (2644 <I2C_FLAPPER_VALVE_init+0x18>)
    2632:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    2634:	4904      	ldr	r1, [pc, #16]	; (2648 <I2C_FLAPPER_VALVE_init+0x1c>)
    2636:	4805      	ldr	r0, [pc, #20]	; (264c <I2C_FLAPPER_VALVE_init+0x20>)
    2638:	4b05      	ldr	r3, [pc, #20]	; (2650 <I2C_FLAPPER_VALVE_init+0x24>)
    263a:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    263c:	4b05      	ldr	r3, [pc, #20]	; (2654 <I2C_FLAPPER_VALVE_init+0x28>)
    263e:	4798      	blx	r3
}
    2640:	bf00      	nop
    2642:	bd80      	pop	{r7, pc}
    2644:	000025f9 	.word	0x000025f9
    2648:	43000400 	.word	0x43000400
    264c:	2000df9c 	.word	0x2000df9c
    2650:	00003935 	.word	0x00003935
    2654:	000025c1 	.word	0x000025c1

00002658 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    2658:	b580      	push	{r7, lr}
    265a:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    265c:	2100      	movs	r1, #0
    265e:	2044      	movs	r0, #68	; 0x44
    2660:	4b11      	ldr	r3, [pc, #68]	; (26a8 <SPI_HI3593_PORT_init+0x50>)
    2662:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    2664:	2102      	movs	r1, #2
    2666:	2044      	movs	r0, #68	; 0x44
    2668:	4b10      	ldr	r3, [pc, #64]	; (26ac <SPI_HI3593_PORT_init+0x54>)
    266a:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    266c:	4910      	ldr	r1, [pc, #64]	; (26b0 <SPI_HI3593_PORT_init+0x58>)
    266e:	2044      	movs	r0, #68	; 0x44
    2670:	4b10      	ldr	r3, [pc, #64]	; (26b4 <SPI_HI3593_PORT_init+0x5c>)
    2672:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    2674:	2100      	movs	r1, #0
    2676:	2045      	movs	r0, #69	; 0x45
    2678:	4b0b      	ldr	r3, [pc, #44]	; (26a8 <SPI_HI3593_PORT_init+0x50>)
    267a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    267c:	2102      	movs	r1, #2
    267e:	2045      	movs	r0, #69	; 0x45
    2680:	4b0a      	ldr	r3, [pc, #40]	; (26ac <SPI_HI3593_PORT_init+0x54>)
    2682:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    2684:	490c      	ldr	r1, [pc, #48]	; (26b8 <SPI_HI3593_PORT_init+0x60>)
    2686:	2045      	movs	r0, #69	; 0x45
    2688:	4b0a      	ldr	r3, [pc, #40]	; (26b4 <SPI_HI3593_PORT_init+0x5c>)
    268a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    268c:	2101      	movs	r1, #1
    268e:	2047      	movs	r0, #71	; 0x47
    2690:	4b06      	ldr	r3, [pc, #24]	; (26ac <SPI_HI3593_PORT_init+0x54>)
    2692:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    2694:	2100      	movs	r1, #0
    2696:	2047      	movs	r0, #71	; 0x47
    2698:	4b08      	ldr	r3, [pc, #32]	; (26bc <SPI_HI3593_PORT_init+0x64>)
    269a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    269c:	4908      	ldr	r1, [pc, #32]	; (26c0 <SPI_HI3593_PORT_init+0x68>)
    269e:	2047      	movs	r0, #71	; 0x47
    26a0:	4b04      	ldr	r3, [pc, #16]	; (26b4 <SPI_HI3593_PORT_init+0x5c>)
    26a2:	4798      	blx	r3
}
    26a4:	bf00      	nop
    26a6:	bd80      	pop	{r7, pc}
    26a8:	000020c1 	.word	0x000020c1
    26ac:	00002089 	.word	0x00002089
    26b0:	00440002 	.word	0x00440002
    26b4:	00002069 	.word	0x00002069
    26b8:	00450002 	.word	0x00450002
    26bc:	00002035 	.word	0x00002035
    26c0:	00470002 	.word	0x00470002

000026c4 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    26c4:	b580      	push	{r7, lr}
    26c6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    26c8:	2242      	movs	r2, #66	; 0x42
    26ca:	2124      	movs	r1, #36	; 0x24
    26cc:	4806      	ldr	r0, [pc, #24]	; (26e8 <SPI_HI3593_CLOCK_init+0x24>)
    26ce:	4b07      	ldr	r3, [pc, #28]	; (26ec <SPI_HI3593_CLOCK_init+0x28>)
    26d0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    26d2:	224a      	movs	r2, #74	; 0x4a
    26d4:	2103      	movs	r1, #3
    26d6:	4804      	ldr	r0, [pc, #16]	; (26e8 <SPI_HI3593_CLOCK_init+0x24>)
    26d8:	4b04      	ldr	r3, [pc, #16]	; (26ec <SPI_HI3593_CLOCK_init+0x28>)
    26da:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    26dc:	4804      	ldr	r0, [pc, #16]	; (26f0 <SPI_HI3593_CLOCK_init+0x2c>)
    26de:	4b05      	ldr	r3, [pc, #20]	; (26f4 <SPI_HI3593_CLOCK_init+0x30>)
    26e0:	4798      	blx	r3
}
    26e2:	bf00      	nop
    26e4:	bd80      	pop	{r7, pc}
    26e6:	bf00      	nop
    26e8:	40001c00 	.word	0x40001c00
    26ec:	00001815 	.word	0x00001815
    26f0:	40000800 	.word	0x40000800
    26f4:	00001adb 	.word	0x00001adb

000026f8 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    26f8:	b580      	push	{r7, lr}
    26fa:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    26fc:	4b04      	ldr	r3, [pc, #16]	; (2710 <SPI_HI3593_init+0x18>)
    26fe:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    2700:	4904      	ldr	r1, [pc, #16]	; (2714 <SPI_HI3593_init+0x1c>)
    2702:	4805      	ldr	r0, [pc, #20]	; (2718 <SPI_HI3593_init+0x20>)
    2704:	4b05      	ldr	r3, [pc, #20]	; (271c <SPI_HI3593_init+0x24>)
    2706:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    2708:	4b05      	ldr	r3, [pc, #20]	; (2720 <SPI_HI3593_init+0x28>)
    270a:	4798      	blx	r3
}
    270c:	bf00      	nop
    270e:	bd80      	pop	{r7, pc}
    2710:	000026c5 	.word	0x000026c5
    2714:	43000800 	.word	0x43000800
    2718:	2000dee8 	.word	0x2000dee8
    271c:	00003bed 	.word	0x00003bed
    2720:	00002659 	.word	0x00002659

00002724 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    2724:	b580      	push	{r7, lr}
    2726:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    2728:	2100      	movs	r1, #0
    272a:	2068      	movs	r0, #104	; 0x68
    272c:	4b07      	ldr	r3, [pc, #28]	; (274c <I2C_FANS_PORT_init+0x28>)
    272e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    2730:	4907      	ldr	r1, [pc, #28]	; (2750 <I2C_FANS_PORT_init+0x2c>)
    2732:	2068      	movs	r0, #104	; 0x68
    2734:	4b07      	ldr	r3, [pc, #28]	; (2754 <I2C_FANS_PORT_init+0x30>)
    2736:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    2738:	2100      	movs	r1, #0
    273a:	2069      	movs	r0, #105	; 0x69
    273c:	4b03      	ldr	r3, [pc, #12]	; (274c <I2C_FANS_PORT_init+0x28>)
    273e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    2740:	4905      	ldr	r1, [pc, #20]	; (2758 <I2C_FANS_PORT_init+0x34>)
    2742:	2069      	movs	r0, #105	; 0x69
    2744:	4b03      	ldr	r3, [pc, #12]	; (2754 <I2C_FANS_PORT_init+0x30>)
    2746:	4798      	blx	r3
}
    2748:	bf00      	nop
    274a:	bd80      	pop	{r7, pc}
    274c:	00002035 	.word	0x00002035
    2750:	00680002 	.word	0x00680002
    2754:	00002069 	.word	0x00002069
    2758:	00690002 	.word	0x00690002

0000275c <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    275c:	b580      	push	{r7, lr}
    275e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2760:	2244      	movs	r2, #68	; 0x44
    2762:	2125      	movs	r1, #37	; 0x25
    2764:	4806      	ldr	r0, [pc, #24]	; (2780 <I2C_FANS_CLOCK_init+0x24>)
    2766:	4b07      	ldr	r3, [pc, #28]	; (2784 <I2C_FANS_CLOCK_init+0x28>)
    2768:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    276a:	224a      	movs	r2, #74	; 0x4a
    276c:	2103      	movs	r1, #3
    276e:	4804      	ldr	r0, [pc, #16]	; (2780 <I2C_FANS_CLOCK_init+0x24>)
    2770:	4b04      	ldr	r3, [pc, #16]	; (2784 <I2C_FANS_CLOCK_init+0x28>)
    2772:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    2774:	4804      	ldr	r0, [pc, #16]	; (2788 <I2C_FANS_CLOCK_init+0x2c>)
    2776:	4b05      	ldr	r3, [pc, #20]	; (278c <I2C_FANS_CLOCK_init+0x30>)
    2778:	4798      	blx	r3
}
    277a:	bf00      	nop
    277c:	bd80      	pop	{r7, pc}
    277e:	bf00      	nop
    2780:	40001c00 	.word	0x40001c00
    2784:	00001815 	.word	0x00001815
    2788:	40000800 	.word	0x40000800
    278c:	00001afb 	.word	0x00001afb

00002790 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    2790:	b580      	push	{r7, lr}
    2792:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    2794:	4b04      	ldr	r3, [pc, #16]	; (27a8 <I2C_FANS_init+0x18>)
    2796:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    2798:	4904      	ldr	r1, [pc, #16]	; (27ac <I2C_FANS_init+0x1c>)
    279a:	4805      	ldr	r0, [pc, #20]	; (27b0 <I2C_FANS_init+0x20>)
    279c:	4b05      	ldr	r3, [pc, #20]	; (27b4 <I2C_FANS_init+0x24>)
    279e:	4798      	blx	r3
	I2C_FANS_PORT_init();
    27a0:	4b05      	ldr	r3, [pc, #20]	; (27b8 <I2C_FANS_init+0x28>)
    27a2:	4798      	blx	r3
}
    27a4:	bf00      	nop
    27a6:	bd80      	pop	{r7, pc}
    27a8:	0000275d 	.word	0x0000275d
    27ac:	43000c00 	.word	0x43000c00
    27b0:	2000df18 	.word	0x2000df18
    27b4:	00003935 	.word	0x00003935
    27b8:	00002725 	.word	0x00002725

000027bc <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    27bc:	b580      	push	{r7, lr}
    27be:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    27c0:	4808      	ldr	r0, [pc, #32]	; (27e4 <TIMER_USB_init+0x28>)
    27c2:	4b09      	ldr	r3, [pc, #36]	; (27e8 <TIMER_USB_init+0x2c>)
    27c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    27c6:	2243      	movs	r2, #67	; 0x43
    27c8:	2109      	movs	r1, #9
    27ca:	4808      	ldr	r0, [pc, #32]	; (27ec <TIMER_USB_init+0x30>)
    27cc:	4b08      	ldr	r3, [pc, #32]	; (27f0 <TIMER_USB_init+0x34>)
    27ce:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    27d0:	4b08      	ldr	r3, [pc, #32]	; (27f4 <TIMER_USB_init+0x38>)
    27d2:	4798      	blx	r3
    27d4:	4603      	mov	r3, r0
    27d6:	461a      	mov	r2, r3
    27d8:	4907      	ldr	r1, [pc, #28]	; (27f8 <TIMER_USB_init+0x3c>)
    27da:	4808      	ldr	r0, [pc, #32]	; (27fc <TIMER_USB_init+0x40>)
    27dc:	4b08      	ldr	r3, [pc, #32]	; (2800 <TIMER_USB_init+0x44>)
    27de:	4798      	blx	r3
}
    27e0:	bf00      	nop
    27e2:	bd80      	pop	{r7, pc}
    27e4:	40000800 	.word	0x40000800
    27e8:	0000191b 	.word	0x0000191b
    27ec:	40001c00 	.word	0x40001c00
    27f0:	00001815 	.word	0x00001815
    27f4:	00009f69 	.word	0x00009f69
    27f8:	40003800 	.word	0x40003800
    27fc:	2000e060 	.word	0x2000e060
    2800:	00003e7d 	.word	0x00003e7d

00002804 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    2804:	b580      	push	{r7, lr}
    2806:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    2808:	4808      	ldr	r0, [pc, #32]	; (282c <TIMER_ARINC_init+0x28>)
    280a:	4b09      	ldr	r3, [pc, #36]	; (2830 <TIMER_ARINC_init+0x2c>)
    280c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    280e:	2244      	movs	r2, #68	; 0x44
    2810:	211a      	movs	r1, #26
    2812:	4808      	ldr	r0, [pc, #32]	; (2834 <TIMER_ARINC_init+0x30>)
    2814:	4b08      	ldr	r3, [pc, #32]	; (2838 <TIMER_ARINC_init+0x34>)
    2816:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    2818:	4b08      	ldr	r3, [pc, #32]	; (283c <TIMER_ARINC_init+0x38>)
    281a:	4798      	blx	r3
    281c:	4603      	mov	r3, r0
    281e:	461a      	mov	r2, r3
    2820:	4907      	ldr	r1, [pc, #28]	; (2840 <TIMER_ARINC_init+0x3c>)
    2822:	4808      	ldr	r0, [pc, #32]	; (2844 <TIMER_ARINC_init+0x40>)
    2824:	4b08      	ldr	r3, [pc, #32]	; (2848 <TIMER_ARINC_init+0x44>)
    2826:	4798      	blx	r3
}
    2828:	bf00      	nop
    282a:	bd80      	pop	{r7, pc}
    282c:	40000800 	.word	0x40000800
    2830:	000019fb 	.word	0x000019fb
    2834:	40001c00 	.word	0x40001c00
    2838:	00001815 	.word	0x00001815
    283c:	00009f69 	.word	0x00009f69
    2840:	4101a000 	.word	0x4101a000
    2844:	2000e040 	.word	0x2000e040
    2848:	00003e7d 	.word	0x00003e7d

0000284c <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    284c:	b580      	push	{r7, lr}
    284e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    2850:	4808      	ldr	r0, [pc, #32]	; (2874 <TIMER_MAINTENANCE_init+0x28>)
    2852:	4b09      	ldr	r3, [pc, #36]	; (2878 <TIMER_MAINTENANCE_init+0x2c>)
    2854:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2856:	2246      	movs	r2, #70	; 0x46
    2858:	211e      	movs	r1, #30
    285a:	4808      	ldr	r0, [pc, #32]	; (287c <TIMER_MAINTENANCE_init+0x30>)
    285c:	4b08      	ldr	r3, [pc, #32]	; (2880 <TIMER_MAINTENANCE_init+0x34>)
    285e:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    2860:	4b08      	ldr	r3, [pc, #32]	; (2884 <TIMER_MAINTENANCE_init+0x38>)
    2862:	4798      	blx	r3
    2864:	4603      	mov	r3, r0
    2866:	461a      	mov	r2, r3
    2868:	4907      	ldr	r1, [pc, #28]	; (2888 <TIMER_MAINTENANCE_init+0x3c>)
    286a:	4808      	ldr	r0, [pc, #32]	; (288c <TIMER_MAINTENANCE_init+0x40>)
    286c:	4b08      	ldr	r3, [pc, #32]	; (2890 <TIMER_MAINTENANCE_init+0x44>)
    286e:	4798      	blx	r3
}
    2870:	bf00      	nop
    2872:	bd80      	pop	{r7, pc}
    2874:	40000800 	.word	0x40000800
    2878:	00001a3b 	.word	0x00001a3b
    287c:	40001c00 	.word	0x40001c00
    2880:	00001815 	.word	0x00001815
    2884:	00009f69 	.word	0x00009f69
    2888:	42001400 	.word	0x42001400
    288c:	2000df38 	.word	0x2000df38
    2890:	00003e7d 	.word	0x00003e7d

00002894 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    2894:	b580      	push	{r7, lr}
    2896:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    2898:	4808      	ldr	r0, [pc, #32]	; (28bc <TIMER_INTERFACE_init+0x28>)
    289a:	4b09      	ldr	r3, [pc, #36]	; (28c0 <TIMER_INTERFACE_init+0x2c>)
    289c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    289e:	2246      	movs	r2, #70	; 0x46
    28a0:	211e      	movs	r1, #30
    28a2:	4808      	ldr	r0, [pc, #32]	; (28c4 <TIMER_INTERFACE_init+0x30>)
    28a4:	4b08      	ldr	r3, [pc, #32]	; (28c8 <TIMER_INTERFACE_init+0x34>)
    28a6:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    28a8:	4b08      	ldr	r3, [pc, #32]	; (28cc <TIMER_INTERFACE_init+0x38>)
    28aa:	4798      	blx	r3
    28ac:	4603      	mov	r3, r0
    28ae:	461a      	mov	r2, r3
    28b0:	4907      	ldr	r1, [pc, #28]	; (28d0 <TIMER_INTERFACE_init+0x3c>)
    28b2:	4808      	ldr	r0, [pc, #32]	; (28d4 <TIMER_INTERFACE_init+0x40>)
    28b4:	4b08      	ldr	r3, [pc, #32]	; (28d8 <TIMER_INTERFACE_init+0x44>)
    28b6:	4798      	blx	r3
}
    28b8:	bf00      	nop
    28ba:	bd80      	pop	{r7, pc}
    28bc:	40000800 	.word	0x40000800
    28c0:	00001a5b 	.word	0x00001a5b
    28c4:	40001c00 	.word	0x40001c00
    28c8:	00001815 	.word	0x00001815
    28cc:	00009f69 	.word	0x00009f69
    28d0:	42001800 	.word	0x42001800
    28d4:	2000df7c 	.word	0x2000df7c
    28d8:	00003e7d 	.word	0x00003e7d

000028dc <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    28dc:	b580      	push	{r7, lr}
    28de:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    28e0:	4808      	ldr	r0, [pc, #32]	; (2904 <TIMER_EVENT_init+0x28>)
    28e2:	4b09      	ldr	r3, [pc, #36]	; (2908 <TIMER_EVENT_init+0x2c>)
    28e4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    28e6:	2246      	movs	r2, #70	; 0x46
    28e8:	2127      	movs	r1, #39	; 0x27
    28ea:	4808      	ldr	r0, [pc, #32]	; (290c <TIMER_EVENT_init+0x30>)
    28ec:	4b08      	ldr	r3, [pc, #32]	; (2910 <TIMER_EVENT_init+0x34>)
    28ee:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    28f0:	4b08      	ldr	r3, [pc, #32]	; (2914 <TIMER_EVENT_init+0x38>)
    28f2:	4798      	blx	r3
    28f4:	4603      	mov	r3, r0
    28f6:	461a      	mov	r2, r3
    28f8:	4907      	ldr	r1, [pc, #28]	; (2918 <TIMER_EVENT_init+0x3c>)
    28fa:	4808      	ldr	r0, [pc, #32]	; (291c <TIMER_EVENT_init+0x40>)
    28fc:	4b08      	ldr	r3, [pc, #32]	; (2920 <TIMER_EVENT_init+0x44>)
    28fe:	4798      	blx	r3
}
    2900:	bf00      	nop
    2902:	bd80      	pop	{r7, pc}
    2904:	40000800 	.word	0x40000800
    2908:	00001b1b 	.word	0x00001b1b
    290c:	40001c00 	.word	0x40001c00
    2910:	00001815 	.word	0x00001815
    2914:	00009f69 	.word	0x00009f69
    2918:	43001400 	.word	0x43001400
    291c:	2000df5c 	.word	0x2000df5c
    2920:	00003e7d 	.word	0x00003e7d

00002924 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    2924:	b480      	push	{r7}
    2926:	af00      	add	r7, sp, #0
}
    2928:	bf00      	nop
    292a:	46bd      	mov	sp, r7
    292c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2930:	4770      	bx	lr
	...

00002934 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    2934:	b580      	push	{r7, lr}
    2936:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    2938:	4804      	ldr	r0, [pc, #16]	; (294c <LIVE_PULSE_CLOCK_init+0x18>)
    293a:	4b05      	ldr	r3, [pc, #20]	; (2950 <LIVE_PULSE_CLOCK_init+0x1c>)
    293c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    293e:	2240      	movs	r2, #64	; 0x40
    2940:	2127      	movs	r1, #39	; 0x27
    2942:	4804      	ldr	r0, [pc, #16]	; (2954 <LIVE_PULSE_CLOCK_init+0x20>)
    2944:	4b04      	ldr	r3, [pc, #16]	; (2958 <LIVE_PULSE_CLOCK_init+0x24>)
    2946:	4798      	blx	r3
}
    2948:	bf00      	nop
    294a:	bd80      	pop	{r7, pc}
    294c:	40000800 	.word	0x40000800
    2950:	00001b3b 	.word	0x00001b3b
    2954:	40001c00 	.word	0x40001c00
    2958:	00001815 	.word	0x00001815

0000295c <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    295c:	b580      	push	{r7, lr}
    295e:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    2960:	4b06      	ldr	r3, [pc, #24]	; (297c <LIVE_PULSE_init+0x20>)
    2962:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    2964:	4b06      	ldr	r3, [pc, #24]	; (2980 <LIVE_PULSE_init+0x24>)
    2966:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    2968:	4b06      	ldr	r3, [pc, #24]	; (2984 <LIVE_PULSE_init+0x28>)
    296a:	4798      	blx	r3
    296c:	4603      	mov	r3, r0
    296e:	461a      	mov	r2, r3
    2970:	4905      	ldr	r1, [pc, #20]	; (2988 <LIVE_PULSE_init+0x2c>)
    2972:	4806      	ldr	r0, [pc, #24]	; (298c <LIVE_PULSE_init+0x30>)
    2974:	4b06      	ldr	r3, [pc, #24]	; (2990 <LIVE_PULSE_init+0x34>)
    2976:	4798      	blx	r3
}
    2978:	bf00      	nop
    297a:	bd80      	pop	{r7, pc}
    297c:	00002935 	.word	0x00002935
    2980:	00002925 	.word	0x00002925
    2984:	00009f7d 	.word	0x00009f7d
    2988:	43001800 	.word	0x43001800
    298c:	2000dfbc 	.word	0x2000dfbc
    2990:	00003a31 	.word	0x00003a31

00002994 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    2994:	b580      	push	{r7, lr}
    2996:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    2998:	4804      	ldr	r0, [pc, #16]	; (29ac <TIMER_HVAC_CLOCK_init+0x18>)
    299a:	4b05      	ldr	r3, [pc, #20]	; (29b0 <TIMER_HVAC_CLOCK_init+0x1c>)
    299c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    299e:	2244      	movs	r2, #68	; 0x44
    29a0:	2119      	movs	r1, #25
    29a2:	4804      	ldr	r0, [pc, #16]	; (29b4 <TIMER_HVAC_CLOCK_init+0x20>)
    29a4:	4b04      	ldr	r3, [pc, #16]	; (29b8 <TIMER_HVAC_CLOCK_init+0x24>)
    29a6:	4798      	blx	r3
}
    29a8:	bf00      	nop
    29aa:	bd80      	pop	{r7, pc}
    29ac:	40000800 	.word	0x40000800
    29b0:	000019bb 	.word	0x000019bb
    29b4:	40001c00 	.word	0x40001c00
    29b8:	00001815 	.word	0x00001815

000029bc <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    29bc:	b580      	push	{r7, lr}
    29be:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    29c0:	4b05      	ldr	r3, [pc, #20]	; (29d8 <TIMER_HVAC_init+0x1c>)
    29c2:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    29c4:	4b05      	ldr	r3, [pc, #20]	; (29dc <TIMER_HVAC_init+0x20>)
    29c6:	4798      	blx	r3
    29c8:	4603      	mov	r3, r0
    29ca:	461a      	mov	r2, r3
    29cc:	4904      	ldr	r1, [pc, #16]	; (29e0 <TIMER_HVAC_init+0x24>)
    29ce:	4805      	ldr	r0, [pc, #20]	; (29e4 <TIMER_HVAC_init+0x28>)
    29d0:	4b05      	ldr	r3, [pc, #20]	; (29e8 <TIMER_HVAC_init+0x2c>)
    29d2:	4798      	blx	r3
}
    29d4:	bf00      	nop
    29d6:	bd80      	pop	{r7, pc}
    29d8:	00002995 	.word	0x00002995
    29dc:	0000934d 	.word	0x0000934d
    29e0:	41016000 	.word	0x41016000
    29e4:	2000e080 	.word	0x2000e080
    29e8:	00003e7d 	.word	0x00003e7d

000029ec <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    29ec:	b580      	push	{r7, lr}
    29ee:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    29f0:	4804      	ldr	r0, [pc, #16]	; (2a04 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    29f2:	4b05      	ldr	r3, [pc, #20]	; (2a08 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    29f4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    29f6:	2244      	movs	r2, #68	; 0x44
    29f8:	2119      	movs	r1, #25
    29fa:	4804      	ldr	r0, [pc, #16]	; (2a0c <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    29fc:	4b04      	ldr	r3, [pc, #16]	; (2a10 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    29fe:	4798      	blx	r3
}
    2a00:	bf00      	nop
    2a02:	bd80      	pop	{r7, pc}
    2a04:	40000800 	.word	0x40000800
    2a08:	000019db 	.word	0x000019db
    2a0c:	40001c00 	.word	0x40001c00
    2a10:	00001815 	.word	0x00001815

00002a14 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    2a14:	b580      	push	{r7, lr}
    2a16:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    2a18:	4b05      	ldr	r3, [pc, #20]	; (2a30 <TIMER_TEMPERATURES_init+0x1c>)
    2a1a:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    2a1c:	4b05      	ldr	r3, [pc, #20]	; (2a34 <TIMER_TEMPERATURES_init+0x20>)
    2a1e:	4798      	blx	r3
    2a20:	4603      	mov	r3, r0
    2a22:	461a      	mov	r2, r3
    2a24:	4904      	ldr	r1, [pc, #16]	; (2a38 <TIMER_TEMPERATURES_init+0x24>)
    2a26:	4805      	ldr	r0, [pc, #20]	; (2a3c <TIMER_TEMPERATURES_init+0x28>)
    2a28:	4b05      	ldr	r3, [pc, #20]	; (2a40 <TIMER_TEMPERATURES_init+0x2c>)
    2a2a:	4798      	blx	r3
}
    2a2c:	bf00      	nop
    2a2e:	bd80      	pop	{r7, pc}
    2a30:	000029ed 	.word	0x000029ed
    2a34:	0000934d 	.word	0x0000934d
    2a38:	41018000 	.word	0x41018000
    2a3c:	2000dec8 	.word	0x2000dec8
    2a40:	00003e7d 	.word	0x00003e7d

00002a44 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    2a44:	b580      	push	{r7, lr}
    2a46:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    2a48:	4804      	ldr	r0, [pc, #16]	; (2a5c <TIMER_CCU_CLOCK_init+0x18>)
    2a4a:	4b05      	ldr	r3, [pc, #20]	; (2a60 <TIMER_CCU_CLOCK_init+0x1c>)
    2a4c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2a4e:	2240      	movs	r2, #64	; 0x40
    2a50:	211d      	movs	r1, #29
    2a52:	4804      	ldr	r0, [pc, #16]	; (2a64 <TIMER_CCU_CLOCK_init+0x20>)
    2a54:	4b04      	ldr	r3, [pc, #16]	; (2a68 <TIMER_CCU_CLOCK_init+0x24>)
    2a56:	4798      	blx	r3
}
    2a58:	bf00      	nop
    2a5a:	bd80      	pop	{r7, pc}
    2a5c:	40000800 	.word	0x40000800
    2a60:	00001a1b 	.word	0x00001a1b
    2a64:	40001c00 	.word	0x40001c00
    2a68:	00001815 	.word	0x00001815

00002a6c <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    2a6c:	b580      	push	{r7, lr}
    2a6e:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    2a70:	4b05      	ldr	r3, [pc, #20]	; (2a88 <TIMER_CCU_init+0x1c>)
    2a72:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    2a74:	4b05      	ldr	r3, [pc, #20]	; (2a8c <TIMER_CCU_init+0x20>)
    2a76:	4798      	blx	r3
    2a78:	4603      	mov	r3, r0
    2a7a:	461a      	mov	r2, r3
    2a7c:	4904      	ldr	r1, [pc, #16]	; (2a90 <TIMER_CCU_init+0x24>)
    2a7e:	4805      	ldr	r0, [pc, #20]	; (2a94 <TIMER_CCU_init+0x28>)
    2a80:	4b05      	ldr	r3, [pc, #20]	; (2a98 <TIMER_CCU_init+0x2c>)
    2a82:	4798      	blx	r3
}
    2a84:	bf00      	nop
    2a86:	bd80      	pop	{r7, pc}
    2a88:	00002a45 	.word	0x00002a45
    2a8c:	0000934d 	.word	0x0000934d
    2a90:	42000c00 	.word	0x42000c00
    2a94:	2000dfd8 	.word	0x2000dfd8
    2a98:	00003e7d 	.word	0x00003e7d

00002a9c <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    2a9c:	b580      	push	{r7, lr}
    2a9e:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    2aa0:	2102      	movs	r1, #2
    2aa2:	2018      	movs	r0, #24
    2aa4:	4b0f      	ldr	r3, [pc, #60]	; (2ae4 <CDCUSB_PORT_init+0x48>)
    2aa6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    2aa8:	2100      	movs	r1, #0
    2aaa:	2018      	movs	r0, #24
    2aac:	4b0e      	ldr	r3, [pc, #56]	; (2ae8 <CDCUSB_PORT_init+0x4c>)
    2aae:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    2ab0:	2100      	movs	r1, #0
    2ab2:	2018      	movs	r0, #24
    2ab4:	4b0d      	ldr	r3, [pc, #52]	; (2aec <CDCUSB_PORT_init+0x50>)
    2ab6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    2ab8:	490d      	ldr	r1, [pc, #52]	; (2af0 <CDCUSB_PORT_init+0x54>)
    2aba:	2018      	movs	r0, #24
    2abc:	4b0d      	ldr	r3, [pc, #52]	; (2af4 <CDCUSB_PORT_init+0x58>)
    2abe:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    2ac0:	2102      	movs	r1, #2
    2ac2:	2019      	movs	r0, #25
    2ac4:	4b07      	ldr	r3, [pc, #28]	; (2ae4 <CDCUSB_PORT_init+0x48>)
    2ac6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    2ac8:	2100      	movs	r1, #0
    2aca:	2019      	movs	r0, #25
    2acc:	4b06      	ldr	r3, [pc, #24]	; (2ae8 <CDCUSB_PORT_init+0x4c>)
    2ace:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    2ad0:	2100      	movs	r1, #0
    2ad2:	2019      	movs	r0, #25
    2ad4:	4b05      	ldr	r3, [pc, #20]	; (2aec <CDCUSB_PORT_init+0x50>)
    2ad6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    2ad8:	4907      	ldr	r1, [pc, #28]	; (2af8 <CDCUSB_PORT_init+0x5c>)
    2ada:	2019      	movs	r0, #25
    2adc:	4b05      	ldr	r3, [pc, #20]	; (2af4 <CDCUSB_PORT_init+0x58>)
    2ade:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    2ae0:	bf00      	nop
    2ae2:	bd80      	pop	{r7, pc}
    2ae4:	00002089 	.word	0x00002089
    2ae8:	000020c1 	.word	0x000020c1
    2aec:	00002035 	.word	0x00002035
    2af0:	00180007 	.word	0x00180007
    2af4:	00002069 	.word	0x00002069
    2af8:	00190007 	.word	0x00190007

00002afc <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    2afc:	b580      	push	{r7, lr}
    2afe:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    2b00:	2242      	movs	r2, #66	; 0x42
    2b02:	210a      	movs	r1, #10
    2b04:	4805      	ldr	r0, [pc, #20]	; (2b1c <CDCUSB_CLOCK_init+0x20>)
    2b06:	4b06      	ldr	r3, [pc, #24]	; (2b20 <CDCUSB_CLOCK_init+0x24>)
    2b08:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    2b0a:	4806      	ldr	r0, [pc, #24]	; (2b24 <CDCUSB_CLOCK_init+0x28>)
    2b0c:	4b06      	ldr	r3, [pc, #24]	; (2b28 <CDCUSB_CLOCK_init+0x2c>)
    2b0e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    2b10:	4804      	ldr	r0, [pc, #16]	; (2b24 <CDCUSB_CLOCK_init+0x28>)
    2b12:	4b06      	ldr	r3, [pc, #24]	; (2b2c <CDCUSB_CLOCK_init+0x30>)
    2b14:	4798      	blx	r3
}
    2b16:	bf00      	nop
    2b18:	bd80      	pop	{r7, pc}
    2b1a:	bf00      	nop
    2b1c:	40001c00 	.word	0x40001c00
    2b20:	00001815 	.word	0x00001815
    2b24:	40000800 	.word	0x40000800
    2b28:	0000183b 	.word	0x0000183b
    2b2c:	0000193b 	.word	0x0000193b

00002b30 <CDCUSB_init>:

void CDCUSB_init(void)
{
    2b30:	b580      	push	{r7, lr}
    2b32:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    2b34:	4b03      	ldr	r3, [pc, #12]	; (2b44 <CDCUSB_init+0x14>)
    2b36:	4798      	blx	r3
	usb_d_init();
    2b38:	4b03      	ldr	r3, [pc, #12]	; (2b48 <CDCUSB_init+0x18>)
    2b3a:	4798      	blx	r3
	CDCUSB_PORT_init();
    2b3c:	4b03      	ldr	r3, [pc, #12]	; (2b4c <CDCUSB_init+0x1c>)
    2b3e:	4798      	blx	r3
}
    2b40:	bf00      	nop
    2b42:	bd80      	pop	{r7, pc}
    2b44:	00002afd 	.word	0x00002afd
    2b48:	000046d9 	.word	0x000046d9
    2b4c:	00002a9d 	.word	0x00002a9d

00002b50 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    2b50:	b580      	push	{r7, lr}
    2b52:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    2b54:	4802      	ldr	r0, [pc, #8]	; (2b60 <WATCHDOG_CLOCK_init+0x10>)
    2b56:	4b03      	ldr	r3, [pc, #12]	; (2b64 <WATCHDOG_CLOCK_init+0x14>)
    2b58:	4798      	blx	r3
}
    2b5a:	bf00      	nop
    2b5c:	bd80      	pop	{r7, pc}
    2b5e:	bf00      	nop
    2b60:	40000800 	.word	0x40000800
    2b64:	000018bb 	.word	0x000018bb

00002b68 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    2b68:	b580      	push	{r7, lr}
    2b6a:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    2b6c:	4b03      	ldr	r3, [pc, #12]	; (2b7c <WATCHDOG_init+0x14>)
    2b6e:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    2b70:	4903      	ldr	r1, [pc, #12]	; (2b80 <WATCHDOG_init+0x18>)
    2b72:	4804      	ldr	r0, [pc, #16]	; (2b84 <WATCHDOG_init+0x1c>)
    2b74:	4b04      	ldr	r3, [pc, #16]	; (2b88 <WATCHDOG_init+0x20>)
    2b76:	4798      	blx	r3
}
    2b78:	bf00      	nop
    2b7a:	bd80      	pop	{r7, pc}
    2b7c:	00002b51 	.word	0x00002b51
    2b80:	40002000 	.word	0x40002000
    2b84:	2000e0c0 	.word	0x2000e0c0
    2b88:	00002109 	.word	0x00002109

00002b8c <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    2b8c:	b580      	push	{r7, lr}
    2b8e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    2b90:	4904      	ldr	r1, [pc, #16]	; (2ba4 <CAN_CCU_PORT_init+0x18>)
    2b92:	202d      	movs	r0, #45	; 0x2d
    2b94:	4b04      	ldr	r3, [pc, #16]	; (2ba8 <CAN_CCU_PORT_init+0x1c>)
    2b96:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    2b98:	4904      	ldr	r1, [pc, #16]	; (2bac <CAN_CCU_PORT_init+0x20>)
    2b9a:	202c      	movs	r0, #44	; 0x2c
    2b9c:	4b02      	ldr	r3, [pc, #8]	; (2ba8 <CAN_CCU_PORT_init+0x1c>)
    2b9e:	4798      	blx	r3
}
    2ba0:	bf00      	nop
    2ba2:	bd80      	pop	{r7, pc}
    2ba4:	002d0007 	.word	0x002d0007
    2ba8:	00002069 	.word	0x00002069
    2bac:	002c0007 	.word	0x002c0007

00002bb0 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    2bb0:	b580      	push	{r7, lr}
    2bb2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    2bb4:	4807      	ldr	r0, [pc, #28]	; (2bd4 <CAN_CCU_init+0x24>)
    2bb6:	4b08      	ldr	r3, [pc, #32]	; (2bd8 <CAN_CCU_init+0x28>)
    2bb8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2bba:	2249      	movs	r2, #73	; 0x49
    2bbc:	211c      	movs	r1, #28
    2bbe:	4807      	ldr	r0, [pc, #28]	; (2bdc <CAN_CCU_init+0x2c>)
    2bc0:	4b07      	ldr	r3, [pc, #28]	; (2be0 <CAN_CCU_init+0x30>)
    2bc2:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    2bc4:	4907      	ldr	r1, [pc, #28]	; (2be4 <CAN_CCU_init+0x34>)
    2bc6:	4808      	ldr	r0, [pc, #32]	; (2be8 <CAN_CCU_init+0x38>)
    2bc8:	4b08      	ldr	r3, [pc, #32]	; (2bec <CAN_CCU_init+0x3c>)
    2bca:	4798      	blx	r3
	CAN_CCU_PORT_init();
    2bcc:	4b08      	ldr	r3, [pc, #32]	; (2bf0 <CAN_CCU_init+0x40>)
    2bce:	4798      	blx	r3
}
    2bd0:	bf00      	nop
    2bd2:	bd80      	pop	{r7, pc}
    2bd4:	40000800 	.word	0x40000800
    2bd8:	0000187b 	.word	0x0000187b
    2bdc:	40001c00 	.word	0x40001c00
    2be0:	00001815 	.word	0x00001815
    2be4:	42000400 	.word	0x42000400
    2be8:	2000e018 	.word	0x2000e018
    2bec:	0000331d 	.word	0x0000331d
    2bf0:	00002b8d 	.word	0x00002b8d

00002bf4 <system_init>:

void system_init(void)
{
    2bf4:	b580      	push	{r7, lr}
    2bf6:	af00      	add	r7, sp, #0
	init_mcu();
    2bf8:	4b5f      	ldr	r3, [pc, #380]	; (2d78 <system_init+0x184>)
    2bfa:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    2bfc:	2100      	movs	r1, #0
    2bfe:	2007      	movs	r0, #7
    2c00:	4b5e      	ldr	r3, [pc, #376]	; (2d7c <system_init+0x188>)
    2c02:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    2c04:	2102      	movs	r1, #2
    2c06:	2007      	movs	r0, #7
    2c08:	4b5d      	ldr	r3, [pc, #372]	; (2d80 <system_init+0x18c>)
    2c0a:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    2c0c:	f04f 31ff 	mov.w	r1, #4294967295
    2c10:	2007      	movs	r0, #7
    2c12:	4b5c      	ldr	r3, [pc, #368]	; (2d84 <system_init+0x190>)
    2c14:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    2c16:	2101      	movs	r1, #1
    2c18:	200f      	movs	r0, #15
    2c1a:	4b58      	ldr	r3, [pc, #352]	; (2d7c <system_init+0x188>)
    2c1c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    2c1e:	2102      	movs	r1, #2
    2c20:	200f      	movs	r0, #15
    2c22:	4b57      	ldr	r3, [pc, #348]	; (2d80 <system_init+0x18c>)
    2c24:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    2c26:	f04f 31ff 	mov.w	r1, #4294967295
    2c2a:	200f      	movs	r0, #15
    2c2c:	4b55      	ldr	r3, [pc, #340]	; (2d84 <system_init+0x190>)
    2c2e:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    2c30:	2101      	movs	r1, #1
    2c32:	2013      	movs	r0, #19
    2c34:	4b51      	ldr	r3, [pc, #324]	; (2d7c <system_init+0x188>)
    2c36:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    2c38:	2102      	movs	r1, #2
    2c3a:	2013      	movs	r0, #19
    2c3c:	4b50      	ldr	r3, [pc, #320]	; (2d80 <system_init+0x18c>)
    2c3e:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    2c40:	f04f 31ff 	mov.w	r1, #4294967295
    2c44:	2013      	movs	r0, #19
    2c46:	4b4f      	ldr	r3, [pc, #316]	; (2d84 <system_init+0x190>)
    2c48:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    2c4a:	2101      	movs	r1, #1
    2c4c:	201b      	movs	r0, #27
    2c4e:	4b4b      	ldr	r3, [pc, #300]	; (2d7c <system_init+0x188>)
    2c50:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    2c52:	2102      	movs	r1, #2
    2c54:	201b      	movs	r0, #27
    2c56:	4b4a      	ldr	r3, [pc, #296]	; (2d80 <system_init+0x18c>)
    2c58:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    2c5a:	f04f 31ff 	mov.w	r1, #4294967295
    2c5e:	201b      	movs	r0, #27
    2c60:	4b48      	ldr	r3, [pc, #288]	; (2d84 <system_init+0x190>)
    2c62:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    2c64:	2101      	movs	r1, #1
    2c66:	2027      	movs	r0, #39	; 0x27
    2c68:	4b44      	ldr	r3, [pc, #272]	; (2d7c <system_init+0x188>)
    2c6a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    2c6c:	2102      	movs	r1, #2
    2c6e:	2027      	movs	r0, #39	; 0x27
    2c70:	4b43      	ldr	r3, [pc, #268]	; (2d80 <system_init+0x18c>)
    2c72:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    2c74:	f04f 31ff 	mov.w	r1, #4294967295
    2c78:	2027      	movs	r0, #39	; 0x27
    2c7a:	4b42      	ldr	r3, [pc, #264]	; (2d84 <system_init+0x190>)
    2c7c:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    2c7e:	2101      	movs	r1, #1
    2c80:	203d      	movs	r0, #61	; 0x3d
    2c82:	4b3e      	ldr	r3, [pc, #248]	; (2d7c <system_init+0x188>)
    2c84:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    2c86:	2102      	movs	r1, #2
    2c88:	203d      	movs	r0, #61	; 0x3d
    2c8a:	4b3d      	ldr	r3, [pc, #244]	; (2d80 <system_init+0x18c>)
    2c8c:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    2c8e:	f04f 31ff 	mov.w	r1, #4294967295
    2c92:	203d      	movs	r0, #61	; 0x3d
    2c94:	4b3b      	ldr	r3, [pc, #236]	; (2d84 <system_init+0x190>)
    2c96:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    2c98:	2101      	movs	r1, #1
    2c9a:	203f      	movs	r0, #63	; 0x3f
    2c9c:	4b38      	ldr	r3, [pc, #224]	; (2d80 <system_init+0x18c>)
    2c9e:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    2ca0:	2101      	movs	r1, #1
    2ca2:	203f      	movs	r0, #63	; 0x3f
    2ca4:	4b38      	ldr	r3, [pc, #224]	; (2d88 <system_init+0x194>)
    2ca6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    2ca8:	f04f 31ff 	mov.w	r1, #4294967295
    2cac:	203f      	movs	r0, #63	; 0x3f
    2cae:	4b35      	ldr	r3, [pc, #212]	; (2d84 <system_init+0x190>)
    2cb0:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    2cb2:	2100      	movs	r1, #0
    2cb4:	204d      	movs	r0, #77	; 0x4d
    2cb6:	4b31      	ldr	r3, [pc, #196]	; (2d7c <system_init+0x188>)
    2cb8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    2cba:	2102      	movs	r1, #2
    2cbc:	204d      	movs	r0, #77	; 0x4d
    2cbe:	4b30      	ldr	r3, [pc, #192]	; (2d80 <system_init+0x18c>)
    2cc0:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    2cc2:	f04f 31ff 	mov.w	r1, #4294967295
    2cc6:	204d      	movs	r0, #77	; 0x4d
    2cc8:	4b2e      	ldr	r3, [pc, #184]	; (2d84 <system_init+0x190>)
    2cca:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    2ccc:	2101      	movs	r1, #1
    2cce:	204e      	movs	r0, #78	; 0x4e
    2cd0:	4b2a      	ldr	r3, [pc, #168]	; (2d7c <system_init+0x188>)
    2cd2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    2cd4:	2102      	movs	r1, #2
    2cd6:	204e      	movs	r0, #78	; 0x4e
    2cd8:	4b29      	ldr	r3, [pc, #164]	; (2d80 <system_init+0x18c>)
    2cda:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    2cdc:	f04f 31ff 	mov.w	r1, #4294967295
    2ce0:	204e      	movs	r0, #78	; 0x4e
    2ce2:	4b28      	ldr	r3, [pc, #160]	; (2d84 <system_init+0x190>)
    2ce4:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    2ce6:	2100      	movs	r1, #0
    2ce8:	204f      	movs	r0, #79	; 0x4f
    2cea:	4b24      	ldr	r3, [pc, #144]	; (2d7c <system_init+0x188>)
    2cec:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    2cee:	2102      	movs	r1, #2
    2cf0:	204f      	movs	r0, #79	; 0x4f
    2cf2:	4b23      	ldr	r3, [pc, #140]	; (2d80 <system_init+0x18c>)
    2cf4:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    2cf6:	f04f 31ff 	mov.w	r1, #4294967295
    2cfa:	204f      	movs	r0, #79	; 0x4f
    2cfc:	4b21      	ldr	r3, [pc, #132]	; (2d84 <system_init+0x190>)
    2cfe:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    2d00:	2100      	movs	r1, #0
    2d02:	2052      	movs	r0, #82	; 0x52
    2d04:	4b1d      	ldr	r3, [pc, #116]	; (2d7c <system_init+0x188>)
    2d06:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    2d08:	2102      	movs	r1, #2
    2d0a:	2052      	movs	r0, #82	; 0x52
    2d0c:	4b1c      	ldr	r3, [pc, #112]	; (2d80 <system_init+0x18c>)
    2d0e:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    2d10:	f04f 31ff 	mov.w	r1, #4294967295
    2d14:	2052      	movs	r0, #82	; 0x52
    2d16:	4b1b      	ldr	r3, [pc, #108]	; (2d84 <system_init+0x190>)
    2d18:	4798      	blx	r3

	CRC_CALC_init();
    2d1a:	4b1c      	ldr	r3, [pc, #112]	; (2d8c <system_init+0x198>)
    2d1c:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    2d1e:	4b1c      	ldr	r3, [pc, #112]	; (2d90 <system_init+0x19c>)
    2d20:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    2d22:	4b1c      	ldr	r3, [pc, #112]	; (2d94 <system_init+0x1a0>)
    2d24:	4798      	blx	r3

	QSPI_N25Q256_init();
    2d26:	4b1c      	ldr	r3, [pc, #112]	; (2d98 <system_init+0x1a4>)
    2d28:	4798      	blx	r3

	DATETIME_CLOCK_init();
    2d2a:	4b1c      	ldr	r3, [pc, #112]	; (2d9c <system_init+0x1a8>)
    2d2c:	4798      	blx	r3

	I2C_HEATERS_init();
    2d2e:	4b1c      	ldr	r3, [pc, #112]	; (2da0 <system_init+0x1ac>)
    2d30:	4798      	blx	r3

	SPI_TEMP_init();
    2d32:	4b1c      	ldr	r3, [pc, #112]	; (2da4 <system_init+0x1b0>)
    2d34:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    2d36:	4b1c      	ldr	r3, [pc, #112]	; (2da8 <system_init+0x1b4>)
    2d38:	4798      	blx	r3

	SPI_HI3593_init();
    2d3a:	4b1c      	ldr	r3, [pc, #112]	; (2dac <system_init+0x1b8>)
    2d3c:	4798      	blx	r3

	I2C_FANS_init();
    2d3e:	4b1c      	ldr	r3, [pc, #112]	; (2db0 <system_init+0x1bc>)
    2d40:	4798      	blx	r3

	TIMER_USB_init();
    2d42:	4b1c      	ldr	r3, [pc, #112]	; (2db4 <system_init+0x1c0>)
    2d44:	4798      	blx	r3
	TIMER_ARINC_init();
    2d46:	4b1c      	ldr	r3, [pc, #112]	; (2db8 <system_init+0x1c4>)
    2d48:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    2d4a:	4b1c      	ldr	r3, [pc, #112]	; (2dbc <system_init+0x1c8>)
    2d4c:	4798      	blx	r3
	TIMER_INTERFACE_init();
    2d4e:	4b1c      	ldr	r3, [pc, #112]	; (2dc0 <system_init+0x1cc>)
    2d50:	4798      	blx	r3
	TIMER_EVENT_init();
    2d52:	4b1c      	ldr	r3, [pc, #112]	; (2dc4 <system_init+0x1d0>)
    2d54:	4798      	blx	r3
	LIVE_PULSE_init();
    2d56:	4b1c      	ldr	r3, [pc, #112]	; (2dc8 <system_init+0x1d4>)
    2d58:	4798      	blx	r3

	TIMER_HVAC_init();
    2d5a:	4b1c      	ldr	r3, [pc, #112]	; (2dcc <system_init+0x1d8>)
    2d5c:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    2d5e:	4b1c      	ldr	r3, [pc, #112]	; (2dd0 <system_init+0x1dc>)
    2d60:	4798      	blx	r3

	TIMER_CCU_init();
    2d62:	4b1c      	ldr	r3, [pc, #112]	; (2dd4 <system_init+0x1e0>)
    2d64:	4798      	blx	r3

	CDCUSB_init();
    2d66:	4b1c      	ldr	r3, [pc, #112]	; (2dd8 <system_init+0x1e4>)
    2d68:	4798      	blx	r3

	WATCHDOG_init();
    2d6a:	4b1c      	ldr	r3, [pc, #112]	; (2ddc <system_init+0x1e8>)
    2d6c:	4798      	blx	r3
	CAN_CCU_init();
    2d6e:	4b1c      	ldr	r3, [pc, #112]	; (2de0 <system_init+0x1ec>)
    2d70:	4798      	blx	r3
}
    2d72:	bf00      	nop
    2d74:	bd80      	pop	{r7, pc}
    2d76:	bf00      	nop
    2d78:	000020f9 	.word	0x000020f9
    2d7c:	000020c1 	.word	0x000020c1
    2d80:	00002089 	.word	0x00002089
    2d84:	00002069 	.word	0x00002069
    2d88:	00002035 	.word	0x00002035
    2d8c:	00002159 	.word	0x00002159
    2d90:	00002185 	.word	0x00002185
    2d94:	000022ad 	.word	0x000022ad
    2d98:	000023f5 	.word	0x000023f5
    2d9c:	00002439 	.word	0x00002439
    2da0:	000024c9 	.word	0x000024c9
    2da4:	00002595 	.word	0x00002595
    2da8:	0000262d 	.word	0x0000262d
    2dac:	000026f9 	.word	0x000026f9
    2db0:	00002791 	.word	0x00002791
    2db4:	000027bd 	.word	0x000027bd
    2db8:	00002805 	.word	0x00002805
    2dbc:	0000284d 	.word	0x0000284d
    2dc0:	00002895 	.word	0x00002895
    2dc4:	000028dd 	.word	0x000028dd
    2dc8:	0000295d 	.word	0x0000295d
    2dcc:	000029bd 	.word	0x000029bd
    2dd0:	00002a15 	.word	0x00002a15
    2dd4:	00002a6d 	.word	0x00002a6d
    2dd8:	00002b31 	.word	0x00002b31
    2ddc:	00002b69 	.word	0x00002b69
    2de0:	00002bb1 	.word	0x00002bb1

00002de4 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    2de4:	b480      	push	{r7}
    2de6:	b083      	sub	sp, #12
    2de8:	af00      	add	r7, sp, #0
    2dea:	4603      	mov	r3, r0
    2dec:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    2dee:	88fb      	ldrh	r3, [r7, #6]
    2df0:	f003 0303 	and.w	r3, r3, #3
    2df4:	2b00      	cmp	r3, #0
    2df6:	d001      	beq.n	2dfc <leap_year+0x18>
		return false;
    2df8:	2300      	movs	r3, #0
    2dfa:	e000      	b.n	2dfe <leap_year+0x1a>
	} else {
		return true;
    2dfc:	2301      	movs	r3, #1
	}
}
    2dfe:	4618      	mov	r0, r3
    2e00:	370c      	adds	r7, #12
    2e02:	46bd      	mov	sp, r7
    2e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e08:	4770      	bx	lr
	...

00002e0c <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    2e0c:	b580      	push	{r7, lr}
    2e0e:	b084      	sub	sp, #16
    2e10:	af00      	add	r7, sp, #0
    2e12:	6078      	str	r0, [r7, #4]
    2e14:	460b      	mov	r3, r1
    2e16:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    2e18:	2300      	movs	r3, #0
    2e1a:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    2e1c:	687b      	ldr	r3, [r7, #4]
    2e1e:	b29b      	uxth	r3, r3
    2e20:	4618      	mov	r0, r3
    2e22:	4b2f      	ldr	r3, [pc, #188]	; (2ee0 <get_secs_in_month+0xd4>)
    2e24:	4798      	blx	r3
    2e26:	4603      	mov	r3, r0
    2e28:	2b00      	cmp	r3, #0
    2e2a:	d028      	beq.n	2e7e <get_secs_in_month+0x72>
		switch (month) {
    2e2c:	78fb      	ldrb	r3, [r7, #3]
    2e2e:	3b01      	subs	r3, #1
    2e30:	2b0b      	cmp	r3, #11
    2e32:	d84c      	bhi.n	2ece <get_secs_in_month+0xc2>
    2e34:	a201      	add	r2, pc, #4	; (adr r2, 2e3c <get_secs_in_month+0x30>)
    2e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2e3a:	bf00      	nop
    2e3c:	00002e6d 	.word	0x00002e6d
    2e40:	00002e73 	.word	0x00002e73
    2e44:	00002e6d 	.word	0x00002e6d
    2e48:	00002e79 	.word	0x00002e79
    2e4c:	00002e6d 	.word	0x00002e6d
    2e50:	00002e79 	.word	0x00002e79
    2e54:	00002e6d 	.word	0x00002e6d
    2e58:	00002e6d 	.word	0x00002e6d
    2e5c:	00002e79 	.word	0x00002e79
    2e60:	00002e6d 	.word	0x00002e6d
    2e64:	00002e79 	.word	0x00002e79
    2e68:	00002e6d 	.word	0x00002e6d
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2e6c:	4b1d      	ldr	r3, [pc, #116]	; (2ee4 <get_secs_in_month+0xd8>)
    2e6e:	60fb      	str	r3, [r7, #12]
			break;
    2e70:	e030      	b.n	2ed4 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    2e72:	4b1d      	ldr	r3, [pc, #116]	; (2ee8 <get_secs_in_month+0xdc>)
    2e74:	60fb      	str	r3, [r7, #12]
			break;
    2e76:	e02d      	b.n	2ed4 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    2e78:	4b1c      	ldr	r3, [pc, #112]	; (2eec <get_secs_in_month+0xe0>)
    2e7a:	60fb      	str	r3, [r7, #12]
			break;
    2e7c:	e02a      	b.n	2ed4 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    2e7e:	78fb      	ldrb	r3, [r7, #3]
    2e80:	3b01      	subs	r3, #1
    2e82:	2b0b      	cmp	r3, #11
    2e84:	d825      	bhi.n	2ed2 <get_secs_in_month+0xc6>
    2e86:	a201      	add	r2, pc, #4	; (adr r2, 2e8c <get_secs_in_month+0x80>)
    2e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2e8c:	00002ebd 	.word	0x00002ebd
    2e90:	00002ec3 	.word	0x00002ec3
    2e94:	00002ebd 	.word	0x00002ebd
    2e98:	00002ec9 	.word	0x00002ec9
    2e9c:	00002ebd 	.word	0x00002ebd
    2ea0:	00002ec9 	.word	0x00002ec9
    2ea4:	00002ebd 	.word	0x00002ebd
    2ea8:	00002ebd 	.word	0x00002ebd
    2eac:	00002ec9 	.word	0x00002ec9
    2eb0:	00002ebd 	.word	0x00002ebd
    2eb4:	00002ec9 	.word	0x00002ec9
    2eb8:	00002ebd 	.word	0x00002ebd
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2ebc:	4b09      	ldr	r3, [pc, #36]	; (2ee4 <get_secs_in_month+0xd8>)
    2ebe:	60fb      	str	r3, [r7, #12]
			break;
    2ec0:	e008      	b.n	2ed4 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    2ec2:	4b0b      	ldr	r3, [pc, #44]	; (2ef0 <get_secs_in_month+0xe4>)
    2ec4:	60fb      	str	r3, [r7, #12]
			break;
    2ec6:	e005      	b.n	2ed4 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    2ec8:	4b08      	ldr	r3, [pc, #32]	; (2eec <get_secs_in_month+0xe0>)
    2eca:	60fb      	str	r3, [r7, #12]
			break;
    2ecc:	e002      	b.n	2ed4 <get_secs_in_month+0xc8>
			break;
    2ece:	bf00      	nop
    2ed0:	e000      	b.n	2ed4 <get_secs_in_month+0xc8>
		default:
			break;
    2ed2:	bf00      	nop
		}
	}

	return sec_in_month;
    2ed4:	68fb      	ldr	r3, [r7, #12]
}
    2ed6:	4618      	mov	r0, r3
    2ed8:	3710      	adds	r7, #16
    2eda:	46bd      	mov	sp, r7
    2edc:	bd80      	pop	{r7, pc}
    2ede:	bf00      	nop
    2ee0:	00002de5 	.word	0x00002de5
    2ee4:	0028de80 	.word	0x0028de80
    2ee8:	00263b80 	.word	0x00263b80
    2eec:	00278d00 	.word	0x00278d00
    2ef0:	0024ea00 	.word	0x0024ea00

00002ef4 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    2ef4:	b580      	push	{r7, lr}
    2ef6:	b08a      	sub	sp, #40	; 0x28
    2ef8:	af00      	add	r7, sp, #0
    2efa:	60f8      	str	r0, [r7, #12]
    2efc:	60b9      	str	r1, [r7, #8]
    2efe:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    2f00:	68fb      	ldr	r3, [r7, #12]
    2f02:	699b      	ldr	r3, [r3, #24]
    2f04:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    2f06:	2301      	movs	r3, #1
    2f08:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    2f0a:	2301      	movs	r3, #1
    2f0c:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    2f0e:	2300      	movs	r3, #0
    2f10:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    2f12:	2300      	movs	r3, #0
    2f14:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    2f16:	68bb      	ldr	r3, [r7, #8]
    2f18:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    2f1a:	6a3b      	ldr	r3, [r7, #32]
    2f1c:	b29b      	uxth	r3, r3
    2f1e:	4618      	mov	r0, r3
    2f20:	4b32      	ldr	r3, [pc, #200]	; (2fec <convert_timestamp_to_datetime+0xf8>)
    2f22:	4798      	blx	r3
    2f24:	4603      	mov	r3, r0
    2f26:	2b00      	cmp	r3, #0
    2f28:	d001      	beq.n	2f2e <convert_timestamp_to_datetime+0x3a>
    2f2a:	4b31      	ldr	r3, [pc, #196]	; (2ff0 <convert_timestamp_to_datetime+0xfc>)
    2f2c:	e000      	b.n	2f30 <convert_timestamp_to_datetime+0x3c>
    2f2e:	4b31      	ldr	r3, [pc, #196]	; (2ff4 <convert_timestamp_to_datetime+0x100>)
    2f30:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    2f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2f34:	69bb      	ldr	r3, [r7, #24]
    2f36:	429a      	cmp	r2, r3
    2f38:	d307      	bcc.n	2f4a <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    2f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2f3c:	69bb      	ldr	r3, [r7, #24]
    2f3e:	1ad3      	subs	r3, r2, r3
    2f40:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    2f42:	6a3b      	ldr	r3, [r7, #32]
    2f44:	3301      	adds	r3, #1
    2f46:	623b      	str	r3, [r7, #32]
    2f48:	e7e7      	b.n	2f1a <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    2f4a:	7ffb      	ldrb	r3, [r7, #31]
    2f4c:	4619      	mov	r1, r3
    2f4e:	6a38      	ldr	r0, [r7, #32]
    2f50:	4b29      	ldr	r3, [pc, #164]	; (2ff8 <convert_timestamp_to_datetime+0x104>)
    2f52:	4798      	blx	r3
    2f54:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    2f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2f58:	697b      	ldr	r3, [r7, #20]
    2f5a:	429a      	cmp	r2, r3
    2f5c:	d307      	bcc.n	2f6e <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    2f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2f60:	697b      	ldr	r3, [r7, #20]
    2f62:	1ad3      	subs	r3, r2, r3
    2f64:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    2f66:	7ffb      	ldrb	r3, [r7, #31]
    2f68:	3301      	adds	r3, #1
    2f6a:	77fb      	strb	r3, [r7, #31]
    2f6c:	e7ed      	b.n	2f4a <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    2f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f70:	4a22      	ldr	r2, [pc, #136]	; (2ffc <convert_timestamp_to_datetime+0x108>)
    2f72:	4293      	cmp	r3, r2
    2f74:	d909      	bls.n	2f8a <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    2f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f78:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    2f7c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    2f80:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    2f82:	7fbb      	ldrb	r3, [r7, #30]
    2f84:	3301      	adds	r3, #1
    2f86:	77bb      	strb	r3, [r7, #30]
    2f88:	e7f1      	b.n	2f6e <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    2f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f8c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    2f90:	d307      	bcc.n	2fa2 <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    2f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f94:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    2f98:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    2f9a:	7f7b      	ldrb	r3, [r7, #29]
    2f9c:	3301      	adds	r3, #1
    2f9e:	777b      	strb	r3, [r7, #29]
    2fa0:	e7f3      	b.n	2f8a <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    2fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2fa4:	2b3b      	cmp	r3, #59	; 0x3b
    2fa6:	d906      	bls.n	2fb6 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    2fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2faa:	3b3c      	subs	r3, #60	; 0x3c
    2fac:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    2fae:	7f3b      	ldrb	r3, [r7, #28]
    2fb0:	3301      	adds	r3, #1
    2fb2:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    2fb4:	e7f5      	b.n	2fa2 <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    2fb6:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    2fb8:	6a3b      	ldr	r3, [r7, #32]
    2fba:	b29a      	uxth	r2, r3
    2fbc:	687b      	ldr	r3, [r7, #4]
    2fbe:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    2fc0:	687b      	ldr	r3, [r7, #4]
    2fc2:	7ffa      	ldrb	r2, [r7, #31]
    2fc4:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    2fc6:	687b      	ldr	r3, [r7, #4]
    2fc8:	7fba      	ldrb	r2, [r7, #30]
    2fca:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    2fcc:	687b      	ldr	r3, [r7, #4]
    2fce:	7f7a      	ldrb	r2, [r7, #29]
    2fd0:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    2fd2:	687b      	ldr	r3, [r7, #4]
    2fd4:	7f3a      	ldrb	r2, [r7, #28]
    2fd6:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    2fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2fda:	b2da      	uxtb	r2, r3
    2fdc:	687b      	ldr	r3, [r7, #4]
    2fde:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    2fe0:	2300      	movs	r3, #0
}
    2fe2:	4618      	mov	r0, r3
    2fe4:	3728      	adds	r7, #40	; 0x28
    2fe6:	46bd      	mov	sp, r7
    2fe8:	bd80      	pop	{r7, pc}
    2fea:	bf00      	nop
    2fec:	00002de5 	.word	0x00002de5
    2ff0:	01e28500 	.word	0x01e28500
    2ff4:	01e13380 	.word	0x01e13380
    2ff8:	00002e0d 	.word	0x00002e0d
    2ffc:	0001517f 	.word	0x0001517f

00003000 <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    3000:	b580      	push	{r7, lr}
    3002:	b086      	sub	sp, #24
    3004:	af00      	add	r7, sp, #0
    3006:	6078      	str	r0, [r7, #4]
    3008:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    300a:	2300      	movs	r3, #0
    300c:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    300e:	2300      	movs	r3, #0
    3010:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    3012:	683b      	ldr	r3, [r7, #0]
    3014:	88db      	ldrh	r3, [r3, #6]
    3016:	b2da      	uxtb	r2, r3
    3018:	687b      	ldr	r3, [r7, #4]
    301a:	699b      	ldr	r3, [r3, #24]
    301c:	b2db      	uxtb	r3, r3
    301e:	1ad3      	subs	r3, r2, r3
    3020:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    3022:	683b      	ldr	r3, [r7, #0]
    3024:	795b      	ldrb	r3, [r3, #5]
    3026:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    3028:	683b      	ldr	r3, [r7, #0]
    302a:	791b      	ldrb	r3, [r3, #4]
    302c:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    302e:	683b      	ldr	r3, [r7, #0]
    3030:	789b      	ldrb	r3, [r3, #2]
    3032:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    3034:	683b      	ldr	r3, [r7, #0]
    3036:	785b      	ldrb	r3, [r3, #1]
    3038:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    303a:	683b      	ldr	r3, [r7, #0]
    303c:	781b      	ldrb	r3, [r3, #0]
    303e:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    3040:	2300      	movs	r3, #0
    3042:	613b      	str	r3, [r7, #16]
    3044:	e01a      	b.n	307c <convert_datetime_to_timestamp+0x7c>
		if (leap_year(calendar->base_year + i)) {
    3046:	687b      	ldr	r3, [r7, #4]
    3048:	699b      	ldr	r3, [r3, #24]
    304a:	b29a      	uxth	r2, r3
    304c:	693b      	ldr	r3, [r7, #16]
    304e:	b29b      	uxth	r3, r3
    3050:	4413      	add	r3, r2
    3052:	b29b      	uxth	r3, r3
    3054:	4618      	mov	r0, r3
    3056:	4b29      	ldr	r3, [pc, #164]	; (30fc <convert_datetime_to_timestamp+0xfc>)
    3058:	4798      	blx	r3
    305a:	4603      	mov	r3, r0
    305c:	2b00      	cmp	r3, #0
    305e:	d006      	beq.n	306e <convert_datetime_to_timestamp+0x6e>
			tmp += SECS_IN_LEAP_YEAR;
    3060:	697b      	ldr	r3, [r7, #20]
    3062:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    3066:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    306a:	617b      	str	r3, [r7, #20]
    306c:	e003      	b.n	3076 <convert_datetime_to_timestamp+0x76>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    306e:	697a      	ldr	r2, [r7, #20]
    3070:	4b23      	ldr	r3, [pc, #140]	; (3100 <convert_datetime_to_timestamp+0x100>)
    3072:	4413      	add	r3, r2
    3074:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    3076:	693b      	ldr	r3, [r7, #16]
    3078:	3301      	adds	r3, #1
    307a:	613b      	str	r3, [r7, #16]
    307c:	7bfa      	ldrb	r2, [r7, #15]
    307e:	693b      	ldr	r3, [r7, #16]
    3080:	429a      	cmp	r2, r3
    3082:	d8e0      	bhi.n	3046 <convert_datetime_to_timestamp+0x46>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    3084:	2301      	movs	r3, #1
    3086:	613b      	str	r3, [r7, #16]
    3088:	e00f      	b.n	30aa <convert_datetime_to_timestamp+0xaa>
		tmp += get_secs_in_month(dt->date.year, i);
    308a:	683b      	ldr	r3, [r7, #0]
    308c:	88db      	ldrh	r3, [r3, #6]
    308e:	461a      	mov	r2, r3
    3090:	693b      	ldr	r3, [r7, #16]
    3092:	b2db      	uxtb	r3, r3
    3094:	4619      	mov	r1, r3
    3096:	4610      	mov	r0, r2
    3098:	4b1a      	ldr	r3, [pc, #104]	; (3104 <convert_datetime_to_timestamp+0x104>)
    309a:	4798      	blx	r3
    309c:	4602      	mov	r2, r0
    309e:	697b      	ldr	r3, [r7, #20]
    30a0:	4413      	add	r3, r2
    30a2:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    30a4:	693b      	ldr	r3, [r7, #16]
    30a6:	3301      	adds	r3, #1
    30a8:	613b      	str	r3, [r7, #16]
    30aa:	7bba      	ldrb	r2, [r7, #14]
    30ac:	693b      	ldr	r3, [r7, #16]
    30ae:	429a      	cmp	r2, r3
    30b0:	d8eb      	bhi.n	308a <convert_datetime_to_timestamp+0x8a>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    30b2:	7b7b      	ldrb	r3, [r7, #13]
    30b4:	3b01      	subs	r3, #1
    30b6:	4a14      	ldr	r2, [pc, #80]	; (3108 <convert_datetime_to_timestamp+0x108>)
    30b8:	fb02 f303 	mul.w	r3, r2, r3
    30bc:	461a      	mov	r2, r3
    30be:	697b      	ldr	r3, [r7, #20]
    30c0:	4413      	add	r3, r2
    30c2:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    30c4:	7b3b      	ldrb	r3, [r7, #12]
    30c6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    30ca:	fb02 f303 	mul.w	r3, r2, r3
    30ce:	461a      	mov	r2, r3
    30d0:	697b      	ldr	r3, [r7, #20]
    30d2:	4413      	add	r3, r2
    30d4:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    30d6:	7afa      	ldrb	r2, [r7, #11]
    30d8:	4613      	mov	r3, r2
    30da:	011b      	lsls	r3, r3, #4
    30dc:	1a9b      	subs	r3, r3, r2
    30de:	009b      	lsls	r3, r3, #2
    30e0:	461a      	mov	r2, r3
    30e2:	697b      	ldr	r3, [r7, #20]
    30e4:	4413      	add	r3, r2
    30e6:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    30e8:	7abb      	ldrb	r3, [r7, #10]
    30ea:	697a      	ldr	r2, [r7, #20]
    30ec:	4413      	add	r3, r2
    30ee:	617b      	str	r3, [r7, #20]

	return tmp;
    30f0:	697b      	ldr	r3, [r7, #20]
}
    30f2:	4618      	mov	r0, r3
    30f4:	3718      	adds	r7, #24
    30f6:	46bd      	mov	sp, r7
    30f8:	bd80      	pop	{r7, pc}
    30fa:	bf00      	nop
    30fc:	00002de5 	.word	0x00002de5
    3100:	01e13380 	.word	0x01e13380
    3104:	00002e0d 	.word	0x00002e0d
    3108:	00015180 	.word	0x00015180

0000310c <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    310c:	b580      	push	{r7, lr}
    310e:	b084      	sub	sp, #16
    3110:	af00      	add	r7, sp, #0
    3112:	6078      	str	r0, [r7, #4]
    3114:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    3116:	2300      	movs	r3, #0
    3118:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    311a:	687b      	ldr	r3, [r7, #4]
    311c:	2b00      	cmp	r3, #0
    311e:	bf14      	ite	ne
    3120:	2301      	movne	r3, #1
    3122:	2300      	moveq	r3, #0
    3124:	b2db      	uxtb	r3, r3
    3126:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    312a:	4911      	ldr	r1, [pc, #68]	; (3170 <calendar_init+0x64>)
    312c:	4618      	mov	r0, r3
    312e:	4b11      	ldr	r3, [pc, #68]	; (3174 <calendar_init+0x68>)
    3130:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    3132:	687b      	ldr	r3, [r7, #4]
    3134:	681a      	ldr	r2, [r3, #0]
    3136:	683b      	ldr	r3, [r7, #0]
    3138:	429a      	cmp	r2, r3
    313a:	d101      	bne.n	3140 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    313c:	2300      	movs	r3, #0
    313e:	e013      	b.n	3168 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    3140:	687b      	ldr	r3, [r7, #4]
    3142:	681b      	ldr	r3, [r3, #0]
    3144:	2b00      	cmp	r3, #0
    3146:	d002      	beq.n	314e <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    3148:	f06f 0311 	mvn.w	r3, #17
    314c:	e00c      	b.n	3168 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    314e:	687b      	ldr	r3, [r7, #4]
    3150:	683a      	ldr	r2, [r7, #0]
    3152:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    3154:	687b      	ldr	r3, [r7, #4]
    3156:	4618      	mov	r0, r3
    3158:	4b07      	ldr	r3, [pc, #28]	; (3178 <calendar_init+0x6c>)
    315a:	4798      	blx	r3
    315c:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    315e:	687b      	ldr	r3, [r7, #4]
    3160:	f240 72b2 	movw	r2, #1970	; 0x7b2
    3164:	619a      	str	r2, [r3, #24]

	return ret;
    3166:	68fb      	ldr	r3, [r7, #12]
}
    3168:	4618      	mov	r0, r3
    316a:	3710      	adds	r7, #16
    316c:	46bd      	mov	sp, r7
    316e:	bd80      	pop	{r7, pc}
    3170:	0001abc4 	.word	0x0001abc4
    3174:	00004c81 	.word	0x00004c81
    3178:	00007705 	.word	0x00007705

0000317c <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
    317c:	b580      	push	{r7, lr}
    317e:	b082      	sub	sp, #8
    3180:	af00      	add	r7, sp, #0
    3182:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(calendar);
    3184:	687b      	ldr	r3, [r7, #4]
    3186:	2b00      	cmp	r3, #0
    3188:	bf14      	ite	ne
    318a:	2301      	movne	r3, #1
    318c:	2300      	moveq	r3, #0
    318e:	b2db      	uxtb	r3, r3
    3190:	f240 12e5 	movw	r2, #485	; 0x1e5
    3194:	4906      	ldr	r1, [pc, #24]	; (31b0 <calendar_enable+0x34>)
    3196:	4618      	mov	r0, r3
    3198:	4b06      	ldr	r3, [pc, #24]	; (31b4 <calendar_enable+0x38>)
    319a:	4798      	blx	r3

	_calendar_enable(&calendar->device);
    319c:	687b      	ldr	r3, [r7, #4]
    319e:	4618      	mov	r0, r3
    31a0:	4b05      	ldr	r3, [pc, #20]	; (31b8 <calendar_enable+0x3c>)
    31a2:	4798      	blx	r3

	return ERR_NONE;
    31a4:	2300      	movs	r3, #0
}
    31a6:	4618      	mov	r0, r3
    31a8:	3708      	adds	r7, #8
    31aa:	46bd      	mov	sp, r7
    31ac:	bd80      	pop	{r7, pc}
    31ae:	bf00      	nop
    31b0:	0001abc4 	.word	0x0001abc4
    31b4:	00004c81 	.word	0x00004c81
    31b8:	000077bd 	.word	0x000077bd

000031bc <calendar_set_time>:
}

/** \brief Set time for calendar
 */
int32_t calendar_set_time(struct calendar_descriptor *const calendar, struct calendar_time *const p_calendar_time)
{
    31bc:	b580      	push	{r7, lr}
    31be:	b086      	sub	sp, #24
    31c0:	af00      	add	r7, sp, #0
    31c2:	6078      	str	r0, [r7, #4]
    31c4:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    31c6:	687b      	ldr	r3, [r7, #4]
    31c8:	2b00      	cmp	r3, #0
    31ca:	bf14      	ite	ne
    31cc:	2301      	movne	r3, #1
    31ce:	2300      	moveq	r3, #0
    31d0:	b2db      	uxtb	r3, r3
    31d2:	f44f 7203 	mov.w	r2, #524	; 0x20c
    31d6:	4915      	ldr	r1, [pc, #84]	; (322c <calendar_set_time+0x70>)
    31d8:	4618      	mov	r0, r3
    31da:	4b15      	ldr	r3, [pc, #84]	; (3230 <calendar_set_time+0x74>)
    31dc:	4798      	blx	r3

	/* convert time to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    31de:	687b      	ldr	r3, [r7, #4]
    31e0:	4618      	mov	r0, r3
    31e2:	4b14      	ldr	r3, [pc, #80]	; (3234 <calendar_set_time+0x78>)
    31e4:	4798      	blx	r3
    31e6:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    31e8:	f107 0308 	add.w	r3, r7, #8
    31ec:	461a      	mov	r2, r3
    31ee:	6979      	ldr	r1, [r7, #20]
    31f0:	6878      	ldr	r0, [r7, #4]
    31f2:	4b11      	ldr	r3, [pc, #68]	; (3238 <calendar_set_time+0x7c>)
    31f4:	4798      	blx	r3
	dt.time.sec  = p_calendar_time->sec;
    31f6:	683b      	ldr	r3, [r7, #0]
    31f8:	781b      	ldrb	r3, [r3, #0]
    31fa:	723b      	strb	r3, [r7, #8]
	dt.time.min  = p_calendar_time->min;
    31fc:	683b      	ldr	r3, [r7, #0]
    31fe:	785b      	ldrb	r3, [r3, #1]
    3200:	727b      	strb	r3, [r7, #9]
	dt.time.hour = p_calendar_time->hour;
    3202:	683b      	ldr	r3, [r7, #0]
    3204:	789b      	ldrb	r3, [r3, #2]
    3206:	72bb      	strb	r3, [r7, #10]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    3208:	f107 0308 	add.w	r3, r7, #8
    320c:	4619      	mov	r1, r3
    320e:	6878      	ldr	r0, [r7, #4]
    3210:	4b0a      	ldr	r3, [pc, #40]	; (323c <calendar_set_time+0x80>)
    3212:	4798      	blx	r3
    3214:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    3216:	687b      	ldr	r3, [r7, #4]
    3218:	6939      	ldr	r1, [r7, #16]
    321a:	4618      	mov	r0, r3
    321c:	4b08      	ldr	r3, [pc, #32]	; (3240 <calendar_set_time+0x84>)
    321e:	4798      	blx	r3

	return ERR_NONE;
    3220:	2300      	movs	r3, #0
}
    3222:	4618      	mov	r0, r3
    3224:	3718      	adds	r7, #24
    3226:	46bd      	mov	sp, r7
    3228:	bd80      	pop	{r7, pc}
    322a:	bf00      	nop
    322c:	0001abc4 	.word	0x0001abc4
    3230:	00004c81 	.word	0x00004c81
    3234:	00007859 	.word	0x00007859
    3238:	00002ef5 	.word	0x00002ef5
    323c:	00003001 	.word	0x00003001
    3240:	00007809 	.word	0x00007809

00003244 <calendar_set_date>:

/** \brief Set date for calendar
 */
int32_t calendar_set_date(struct calendar_descriptor *const calendar, struct calendar_date *const p_calendar_date)
{
    3244:	b580      	push	{r7, lr}
    3246:	b086      	sub	sp, #24
    3248:	af00      	add	r7, sp, #0
    324a:	6078      	str	r0, [r7, #4]
    324c:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    324e:	687b      	ldr	r3, [r7, #4]
    3250:	2b00      	cmp	r3, #0
    3252:	bf14      	ite	ne
    3254:	2301      	movne	r3, #1
    3256:	2300      	moveq	r3, #0
    3258:	b2db      	uxtb	r3, r3
    325a:	f44f 7209 	mov.w	r2, #548	; 0x224
    325e:	4915      	ldr	r1, [pc, #84]	; (32b4 <calendar_set_date+0x70>)
    3260:	4618      	mov	r0, r3
    3262:	4b15      	ldr	r3, [pc, #84]	; (32b8 <calendar_set_date+0x74>)
    3264:	4798      	blx	r3

	/* convert date to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    3266:	687b      	ldr	r3, [r7, #4]
    3268:	4618      	mov	r0, r3
    326a:	4b14      	ldr	r3, [pc, #80]	; (32bc <calendar_set_date+0x78>)
    326c:	4798      	blx	r3
    326e:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    3270:	f107 0308 	add.w	r3, r7, #8
    3274:	461a      	mov	r2, r3
    3276:	6979      	ldr	r1, [r7, #20]
    3278:	6878      	ldr	r0, [r7, #4]
    327a:	4b11      	ldr	r3, [pc, #68]	; (32c0 <calendar_set_date+0x7c>)
    327c:	4798      	blx	r3
	dt.date.day   = p_calendar_date->day;
    327e:	683b      	ldr	r3, [r7, #0]
    3280:	781b      	ldrb	r3, [r3, #0]
    3282:	733b      	strb	r3, [r7, #12]
	dt.date.month = p_calendar_date->month;
    3284:	683b      	ldr	r3, [r7, #0]
    3286:	785b      	ldrb	r3, [r3, #1]
    3288:	737b      	strb	r3, [r7, #13]
	dt.date.year  = p_calendar_date->year;
    328a:	683b      	ldr	r3, [r7, #0]
    328c:	885b      	ldrh	r3, [r3, #2]
    328e:	81fb      	strh	r3, [r7, #14]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    3290:	f107 0308 	add.w	r3, r7, #8
    3294:	4619      	mov	r1, r3
    3296:	6878      	ldr	r0, [r7, #4]
    3298:	4b0a      	ldr	r3, [pc, #40]	; (32c4 <calendar_set_date+0x80>)
    329a:	4798      	blx	r3
    329c:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    329e:	687b      	ldr	r3, [r7, #4]
    32a0:	6939      	ldr	r1, [r7, #16]
    32a2:	4618      	mov	r0, r3
    32a4:	4b08      	ldr	r3, [pc, #32]	; (32c8 <calendar_set_date+0x84>)
    32a6:	4798      	blx	r3

	return ERR_NONE;
    32a8:	2300      	movs	r3, #0
}
    32aa:	4618      	mov	r0, r3
    32ac:	3718      	adds	r7, #24
    32ae:	46bd      	mov	sp, r7
    32b0:	bd80      	pop	{r7, pc}
    32b2:	bf00      	nop
    32b4:	0001abc4 	.word	0x0001abc4
    32b8:	00004c81 	.word	0x00004c81
    32bc:	00007859 	.word	0x00007859
    32c0:	00002ef5 	.word	0x00002ef5
    32c4:	00003001 	.word	0x00003001
    32c8:	00007809 	.word	0x00007809

000032cc <calendar_get_date_time>:

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    32cc:	b580      	push	{r7, lr}
    32ce:	b084      	sub	sp, #16
    32d0:	af00      	add	r7, sp, #0
    32d2:	6078      	str	r0, [r7, #4]
    32d4:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    32d6:	687b      	ldr	r3, [r7, #4]
    32d8:	2b00      	cmp	r3, #0
    32da:	bf14      	ite	ne
    32dc:	2301      	movne	r3, #1
    32de:	2300      	moveq	r3, #0
    32e0:	b2db      	uxtb	r3, r3
    32e2:	f240 223b 	movw	r2, #571	; 0x23b
    32e6:	4909      	ldr	r1, [pc, #36]	; (330c <calendar_get_date_time+0x40>)
    32e8:	4618      	mov	r0, r3
    32ea:	4b09      	ldr	r3, [pc, #36]	; (3310 <calendar_get_date_time+0x44>)
    32ec:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    32ee:	687b      	ldr	r3, [r7, #4]
    32f0:	4618      	mov	r0, r3
    32f2:	4b08      	ldr	r3, [pc, #32]	; (3314 <calendar_get_date_time+0x48>)
    32f4:	4798      	blx	r3
    32f6:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    32f8:	683a      	ldr	r2, [r7, #0]
    32fa:	68f9      	ldr	r1, [r7, #12]
    32fc:	6878      	ldr	r0, [r7, #4]
    32fe:	4b06      	ldr	r3, [pc, #24]	; (3318 <calendar_get_date_time+0x4c>)
    3300:	4798      	blx	r3

	return ERR_NONE;
    3302:	2300      	movs	r3, #0
}
    3304:	4618      	mov	r0, r3
    3306:	3710      	adds	r7, #16
    3308:	46bd      	mov	sp, r7
    330a:	bd80      	pop	{r7, pc}
    330c:	0001abc4 	.word	0x0001abc4
    3310:	00004c81 	.word	0x00004c81
    3314:	00007859 	.word	0x00007859
    3318:	00002ef5 	.word	0x00002ef5

0000331c <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    331c:	b580      	push	{r7, lr}
    331e:	b084      	sub	sp, #16
    3320:	af00      	add	r7, sp, #0
    3322:	6078      	str	r0, [r7, #4]
    3324:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    3326:	687b      	ldr	r3, [r7, #4]
    3328:	2b00      	cmp	r3, #0
    332a:	d004      	beq.n	3336 <can_async_init+0x1a>
    332c:	683b      	ldr	r3, [r7, #0]
    332e:	2b00      	cmp	r3, #0
    3330:	d001      	beq.n	3336 <can_async_init+0x1a>
    3332:	2301      	movs	r3, #1
    3334:	e000      	b.n	3338 <can_async_init+0x1c>
    3336:	2300      	movs	r3, #0
    3338:	f003 0301 	and.w	r3, r3, #1
    333c:	b2db      	uxtb	r3, r3
    333e:	2241      	movs	r2, #65	; 0x41
    3340:	490e      	ldr	r1, [pc, #56]	; (337c <can_async_init+0x60>)
    3342:	4618      	mov	r0, r3
    3344:	4b0e      	ldr	r3, [pc, #56]	; (3380 <can_async_init+0x64>)
    3346:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    3348:	687b      	ldr	r3, [r7, #4]
    334a:	6839      	ldr	r1, [r7, #0]
    334c:	4618      	mov	r0, r3
    334e:	4b0d      	ldr	r3, [pc, #52]	; (3384 <can_async_init+0x68>)
    3350:	4798      	blx	r3
    3352:	60f8      	str	r0, [r7, #12]
	if (rc) {
    3354:	68fb      	ldr	r3, [r7, #12]
    3356:	2b00      	cmp	r3, #0
    3358:	d001      	beq.n	335e <can_async_init+0x42>
		return rc;
    335a:	68fb      	ldr	r3, [r7, #12]
    335c:	e009      	b.n	3372 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    335e:	687b      	ldr	r3, [r7, #4]
    3360:	4a09      	ldr	r2, [pc, #36]	; (3388 <can_async_init+0x6c>)
    3362:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    3364:	687b      	ldr	r3, [r7, #4]
    3366:	4a09      	ldr	r2, [pc, #36]	; (338c <can_async_init+0x70>)
    3368:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    336a:	687b      	ldr	r3, [r7, #4]
    336c:	4a08      	ldr	r2, [pc, #32]	; (3390 <can_async_init+0x74>)
    336e:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    3370:	2300      	movs	r3, #0
}
    3372:	4618      	mov	r0, r3
    3374:	3710      	adds	r7, #16
    3376:	46bd      	mov	sp, r7
    3378:	bd80      	pop	{r7, pc}
    337a:	bf00      	nop
    337c:	0001abe0 	.word	0x0001abe0
    3380:	00004c81 	.word	0x00004c81
    3384:	000053e9 	.word	0x000053e9
    3388:	00003531 	.word	0x00003531
    338c:	00003555 	.word	0x00003555
    3390:	00003579 	.word	0x00003579

00003394 <can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t can_async_enable(struct can_async_descriptor *const descr)
{
    3394:	b580      	push	{r7, lr}
    3396:	b082      	sub	sp, #8
    3398:	af00      	add	r7, sp, #0
    339a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    339c:	687b      	ldr	r3, [r7, #4]
    339e:	2b00      	cmp	r3, #0
    33a0:	bf14      	ite	ne
    33a2:	2301      	movne	r3, #1
    33a4:	2300      	moveq	r3, #0
    33a6:	b2db      	uxtb	r3, r3
    33a8:	225c      	movs	r2, #92	; 0x5c
    33aa:	4906      	ldr	r1, [pc, #24]	; (33c4 <can_async_enable+0x30>)
    33ac:	4618      	mov	r0, r3
    33ae:	4b06      	ldr	r3, [pc, #24]	; (33c8 <can_async_enable+0x34>)
    33b0:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
    33b2:	687b      	ldr	r3, [r7, #4]
    33b4:	4618      	mov	r0, r3
    33b6:	4b05      	ldr	r3, [pc, #20]	; (33cc <can_async_enable+0x38>)
    33b8:	4798      	blx	r3
    33ba:	4603      	mov	r3, r0
}
    33bc:	4618      	mov	r0, r3
    33be:	3708      	adds	r7, #8
    33c0:	46bd      	mov	sp, r7
    33c2:	bd80      	pop	{r7, pc}
    33c4:	0001abe0 	.word	0x0001abe0
    33c8:	00004c81 	.word	0x00004c81
    33cc:	000055d1 	.word	0x000055d1

000033d0 <can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t can_async_read(struct can_async_descriptor *const descr, struct can_message *msg)
{
    33d0:	b580      	push	{r7, lr}
    33d2:	b082      	sub	sp, #8
    33d4:	af00      	add	r7, sp, #0
    33d6:	6078      	str	r0, [r7, #4]
    33d8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    33da:	687b      	ldr	r3, [r7, #4]
    33dc:	2b00      	cmp	r3, #0
    33de:	d004      	beq.n	33ea <can_async_read+0x1a>
    33e0:	683b      	ldr	r3, [r7, #0]
    33e2:	2b00      	cmp	r3, #0
    33e4:	d001      	beq.n	33ea <can_async_read+0x1a>
    33e6:	2301      	movs	r3, #1
    33e8:	e000      	b.n	33ec <can_async_read+0x1c>
    33ea:	2300      	movs	r3, #0
    33ec:	f003 0301 	and.w	r3, r3, #1
    33f0:	b2db      	uxtb	r3, r3
    33f2:	226e      	movs	r2, #110	; 0x6e
    33f4:	4906      	ldr	r1, [pc, #24]	; (3410 <can_async_read+0x40>)
    33f6:	4618      	mov	r0, r3
    33f8:	4b06      	ldr	r3, [pc, #24]	; (3414 <can_async_read+0x44>)
    33fa:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
    33fc:	687b      	ldr	r3, [r7, #4]
    33fe:	6839      	ldr	r1, [r7, #0]
    3400:	4618      	mov	r0, r3
    3402:	4b05      	ldr	r3, [pc, #20]	; (3418 <can_async_read+0x48>)
    3404:	4798      	blx	r3
    3406:	4603      	mov	r3, r0
}
    3408:	4618      	mov	r0, r3
    340a:	3708      	adds	r7, #8
    340c:	46bd      	mov	sp, r7
    340e:	bd80      	pop	{r7, pc}
    3410:	0001abe0 	.word	0x0001abe0
    3414:	00004c81 	.word	0x00004c81
    3418:	000055f1 	.word	0x000055f1

0000341c <can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t can_async_write(struct can_async_descriptor *const descr, struct can_message *msg)
{
    341c:	b580      	push	{r7, lr}
    341e:	b082      	sub	sp, #8
    3420:	af00      	add	r7, sp, #0
    3422:	6078      	str	r0, [r7, #4]
    3424:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    3426:	687b      	ldr	r3, [r7, #4]
    3428:	2b00      	cmp	r3, #0
    342a:	d004      	beq.n	3436 <can_async_write+0x1a>
    342c:	683b      	ldr	r3, [r7, #0]
    342e:	2b00      	cmp	r3, #0
    3430:	d001      	beq.n	3436 <can_async_write+0x1a>
    3432:	2301      	movs	r3, #1
    3434:	e000      	b.n	3438 <can_async_write+0x1c>
    3436:	2300      	movs	r3, #0
    3438:	f003 0301 	and.w	r3, r3, #1
    343c:	b2db      	uxtb	r3, r3
    343e:	2277      	movs	r2, #119	; 0x77
    3440:	4906      	ldr	r1, [pc, #24]	; (345c <can_async_write+0x40>)
    3442:	4618      	mov	r0, r3
    3444:	4b06      	ldr	r3, [pc, #24]	; (3460 <can_async_write+0x44>)
    3446:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
    3448:	687b      	ldr	r3, [r7, #4]
    344a:	6839      	ldr	r1, [r7, #0]
    344c:	4618      	mov	r0, r3
    344e:	4b05      	ldr	r3, [pc, #20]	; (3464 <can_async_write+0x48>)
    3450:	4798      	blx	r3
    3452:	4603      	mov	r3, r0
}
    3454:	4618      	mov	r0, r3
    3456:	3708      	adds	r7, #8
    3458:	46bd      	mov	sp, r7
    345a:	bd80      	pop	{r7, pc}
    345c:	0001abe0 	.word	0x0001abe0
    3460:	00004c81 	.word	0x00004c81
    3464:	00005701 	.word	0x00005701

00003468 <can_async_register_callback>:
/**
 * \brief Register CAN callback function to interrupt
 */
int32_t can_async_register_callback(struct can_async_descriptor *const descr, enum can_async_callback_type type,
                                    FUNC_PTR cb)
{
    3468:	b580      	push	{r7, lr}
    346a:	b084      	sub	sp, #16
    346c:	af00      	add	r7, sp, #0
    346e:	60f8      	str	r0, [r7, #12]
    3470:	460b      	mov	r3, r1
    3472:	607a      	str	r2, [r7, #4]
    3474:	72fb      	strb	r3, [r7, #11]
	ASSERT(descr);
    3476:	68fb      	ldr	r3, [r7, #12]
    3478:	2b00      	cmp	r3, #0
    347a:	bf14      	ite	ne
    347c:	2301      	movne	r3, #1
    347e:	2300      	moveq	r3, #0
    3480:	b2db      	uxtb	r3, r3
    3482:	2281      	movs	r2, #129	; 0x81
    3484:	4914      	ldr	r1, [pc, #80]	; (34d8 <can_async_register_callback+0x70>)
    3486:	4618      	mov	r0, r3
    3488:	4b14      	ldr	r3, [pc, #80]	; (34dc <can_async_register_callback+0x74>)
    348a:	4798      	blx	r3

	switch (type) {
    348c:	7afb      	ldrb	r3, [r7, #11]
    348e:	2b01      	cmp	r3, #1
    3490:	d007      	beq.n	34a2 <can_async_register_callback+0x3a>
    3492:	2b02      	cmp	r3, #2
    3494:	d009      	beq.n	34aa <can_async_register_callback+0x42>
    3496:	2b00      	cmp	r3, #0
    3498:	d10b      	bne.n	34b2 <can_async_register_callback+0x4a>
	case CAN_ASYNC_RX_CB:
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    349a:	68fb      	ldr	r3, [r7, #12]
    349c:	687a      	ldr	r2, [r7, #4]
    349e:	621a      	str	r2, [r3, #32]
		break;
    34a0:	e00a      	b.n	34b8 <can_async_register_callback+0x50>
	case CAN_ASYNC_TX_CB:
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    34a2:	68fb      	ldr	r3, [r7, #12]
    34a4:	687a      	ldr	r2, [r7, #4]
    34a6:	61da      	str	r2, [r3, #28]
		break;
    34a8:	e006      	b.n	34b8 <can_async_register_callback+0x50>
	case CAN_ASYNC_IRQ_CB:
		descr->cb.irq_handler
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
    34aa:	68fb      	ldr	r3, [r7, #12]
    34ac:	687a      	ldr	r2, [r7, #4]
    34ae:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    34b0:	e002      	b.n	34b8 <can_async_register_callback+0x50>
	default:
		return ERR_INVALID_ARG;
    34b2:	f06f 030c 	mvn.w	r3, #12
    34b6:	e00b      	b.n	34d0 <can_async_register_callback+0x68>
	}

	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
    34b8:	68f8      	ldr	r0, [r7, #12]
    34ba:	687b      	ldr	r3, [r7, #4]
    34bc:	2b00      	cmp	r3, #0
    34be:	bf14      	ite	ne
    34c0:	2301      	movne	r3, #1
    34c2:	2300      	moveq	r3, #0
    34c4:	b2da      	uxtb	r2, r3
    34c6:	7afb      	ldrb	r3, [r7, #11]
    34c8:	4619      	mov	r1, r3
    34ca:	4b05      	ldr	r3, [pc, #20]	; (34e0 <can_async_register_callback+0x78>)
    34cc:	4798      	blx	r3

	return ERR_NONE;
    34ce:	2300      	movs	r3, #0
}
    34d0:	4618      	mov	r0, r3
    34d2:	3710      	adds	r7, #16
    34d4:	46bd      	mov	sp, r7
    34d6:	bd80      	pop	{r7, pc}
    34d8:	0001abe0 	.word	0x0001abe0
    34dc:	00004c81 	.word	0x00004c81
    34e0:	000058bd 	.word	0x000058bd

000034e4 <can_async_set_filter>:
/**
 * \brief Set CAN filter
 */
int32_t can_async_set_filter(struct can_async_descriptor *const descr, uint8_t index, enum can_format fmt,
                             struct can_filter *filter)
{
    34e4:	b590      	push	{r4, r7, lr}
    34e6:	b085      	sub	sp, #20
    34e8:	af00      	add	r7, sp, #0
    34ea:	60f8      	str	r0, [r7, #12]
    34ec:	607b      	str	r3, [r7, #4]
    34ee:	460b      	mov	r3, r1
    34f0:	72fb      	strb	r3, [r7, #11]
    34f2:	4613      	mov	r3, r2
    34f4:	72bb      	strb	r3, [r7, #10]
	ASSERT(descr);
    34f6:	68fb      	ldr	r3, [r7, #12]
    34f8:	2b00      	cmp	r3, #0
    34fa:	bf14      	ite	ne
    34fc:	2301      	movne	r3, #1
    34fe:	2300      	moveq	r3, #0
    3500:	b2db      	uxtb	r3, r3
    3502:	22b8      	movs	r2, #184	; 0xb8
    3504:	4907      	ldr	r1, [pc, #28]	; (3524 <can_async_set_filter+0x40>)
    3506:	4618      	mov	r0, r3
    3508:	4b07      	ldr	r3, [pc, #28]	; (3528 <can_async_set_filter+0x44>)
    350a:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
    350c:	68f8      	ldr	r0, [r7, #12]
    350e:	7aba      	ldrb	r2, [r7, #10]
    3510:	7af9      	ldrb	r1, [r7, #11]
    3512:	687b      	ldr	r3, [r7, #4]
    3514:	4c05      	ldr	r4, [pc, #20]	; (352c <can_async_set_filter+0x48>)
    3516:	47a0      	blx	r4
    3518:	4603      	mov	r3, r0
}
    351a:	4618      	mov	r0, r3
    351c:	3714      	adds	r7, #20
    351e:	46bd      	mov	sp, r7
    3520:	bd90      	pop	{r4, r7, pc}
    3522:	bf00      	nop
    3524:	0001abe0 	.word	0x0001abe0
    3528:	00004c81 	.word	0x00004c81
    352c:	0000594d 	.word	0x0000594d

00003530 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    3530:	b580      	push	{r7, lr}
    3532:	b084      	sub	sp, #16
    3534:	af00      	add	r7, sp, #0
    3536:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3538:	687b      	ldr	r3, [r7, #4]
    353a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    353c:	68fb      	ldr	r3, [r7, #12]
    353e:	69db      	ldr	r3, [r3, #28]
    3540:	2b00      	cmp	r3, #0
    3542:	d003      	beq.n	354c <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    3544:	68fb      	ldr	r3, [r7, #12]
    3546:	69db      	ldr	r3, [r3, #28]
    3548:	68f8      	ldr	r0, [r7, #12]
    354a:	4798      	blx	r3
	}
}
    354c:	bf00      	nop
    354e:	3710      	adds	r7, #16
    3550:	46bd      	mov	sp, r7
    3552:	bd80      	pop	{r7, pc}

00003554 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    3554:	b580      	push	{r7, lr}
    3556:	b084      	sub	sp, #16
    3558:	af00      	add	r7, sp, #0
    355a:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    355c:	687b      	ldr	r3, [r7, #4]
    355e:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    3560:	68fb      	ldr	r3, [r7, #12]
    3562:	6a1b      	ldr	r3, [r3, #32]
    3564:	2b00      	cmp	r3, #0
    3566:	d003      	beq.n	3570 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    3568:	68fb      	ldr	r3, [r7, #12]
    356a:	6a1b      	ldr	r3, [r3, #32]
    356c:	68f8      	ldr	r0, [r7, #12]
    356e:	4798      	blx	r3
	}
}
    3570:	bf00      	nop
    3572:	3710      	adds	r7, #16
    3574:	46bd      	mov	sp, r7
    3576:	bd80      	pop	{r7, pc}

00003578 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    3578:	b580      	push	{r7, lr}
    357a:	b084      	sub	sp, #16
    357c:	af00      	add	r7, sp, #0
    357e:	6078      	str	r0, [r7, #4]
    3580:	460b      	mov	r3, r1
    3582:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3584:	687b      	ldr	r3, [r7, #4]
    3586:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    3588:	68fb      	ldr	r3, [r7, #12]
    358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    358c:	2b00      	cmp	r3, #0
    358e:	d005      	beq.n	359c <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    3590:	68fb      	ldr	r3, [r7, #12]
    3592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3594:	78fa      	ldrb	r2, [r7, #3]
    3596:	4611      	mov	r1, r2
    3598:	68f8      	ldr	r0, [r7, #12]
    359a:	4798      	blx	r3
	}
}
    359c:	bf00      	nop
    359e:	3710      	adds	r7, #16
    35a0:	46bd      	mov	sp, r7
    35a2:	bd80      	pop	{r7, pc}

000035a4 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    35a4:	b580      	push	{r7, lr}
    35a6:	b082      	sub	sp, #8
    35a8:	af00      	add	r7, sp, #0
    35aa:	6078      	str	r0, [r7, #4]
    35ac:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    35ae:	687b      	ldr	r3, [r7, #4]
    35b0:	2b00      	cmp	r3, #0
    35b2:	d004      	beq.n	35be <crc_sync_init+0x1a>
    35b4:	683b      	ldr	r3, [r7, #0]
    35b6:	2b00      	cmp	r3, #0
    35b8:	d001      	beq.n	35be <crc_sync_init+0x1a>
    35ba:	2301      	movs	r3, #1
    35bc:	e000      	b.n	35c0 <crc_sync_init+0x1c>
    35be:	2300      	movs	r3, #0
    35c0:	f003 0301 	and.w	r3, r3, #1
    35c4:	b2db      	uxtb	r3, r3
    35c6:	222b      	movs	r2, #43	; 0x2b
    35c8:	4906      	ldr	r1, [pc, #24]	; (35e4 <crc_sync_init+0x40>)
    35ca:	4618      	mov	r0, r3
    35cc:	4b06      	ldr	r3, [pc, #24]	; (35e8 <crc_sync_init+0x44>)
    35ce:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    35d0:	687b      	ldr	r3, [r7, #4]
    35d2:	6839      	ldr	r1, [r7, #0]
    35d4:	4618      	mov	r0, r3
    35d6:	4b05      	ldr	r3, [pc, #20]	; (35ec <crc_sync_init+0x48>)
    35d8:	4798      	blx	r3
    35da:	4603      	mov	r3, r0
}
    35dc:	4618      	mov	r0, r3
    35de:	3708      	adds	r7, #8
    35e0:	46bd      	mov	sp, r7
    35e2:	bd80      	pop	{r7, pc}
    35e4:	0001abfc 	.word	0x0001abfc
    35e8:	00004c81 	.word	0x00004c81
    35ec:	00005f31 	.word	0x00005f31

000035f0 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    35f0:	b590      	push	{r4, r7, lr}
    35f2:	b083      	sub	sp, #12
    35f4:	af00      	add	r7, sp, #0
    35f6:	4603      	mov	r3, r0
    35f8:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    35fa:	4b07      	ldr	r3, [pc, #28]	; (3618 <delay_us+0x28>)
    35fc:	681c      	ldr	r4, [r3, #0]
    35fe:	88fb      	ldrh	r3, [r7, #6]
    3600:	4618      	mov	r0, r3
    3602:	4b06      	ldr	r3, [pc, #24]	; (361c <delay_us+0x2c>)
    3604:	4798      	blx	r3
    3606:	4603      	mov	r3, r0
    3608:	4619      	mov	r1, r3
    360a:	4620      	mov	r0, r4
    360c:	4b04      	ldr	r3, [pc, #16]	; (3620 <delay_us+0x30>)
    360e:	4798      	blx	r3
}
    3610:	bf00      	nop
    3612:	370c      	adds	r7, #12
    3614:	46bd      	mov	sp, r7
    3616:	bd90      	pop	{r4, r7, pc}
    3618:	200021b8 	.word	0x200021b8
    361c:	00005c81 	.word	0x00005c81
    3620:	00005e19 	.word	0x00005e19

00003624 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    3624:	b590      	push	{r4, r7, lr}
    3626:	b083      	sub	sp, #12
    3628:	af00      	add	r7, sp, #0
    362a:	4603      	mov	r3, r0
    362c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    362e:	4b07      	ldr	r3, [pc, #28]	; (364c <delay_ms+0x28>)
    3630:	681c      	ldr	r4, [r3, #0]
    3632:	88fb      	ldrh	r3, [r7, #6]
    3634:	4618      	mov	r0, r3
    3636:	4b06      	ldr	r3, [pc, #24]	; (3650 <delay_ms+0x2c>)
    3638:	4798      	blx	r3
    363a:	4603      	mov	r3, r0
    363c:	4619      	mov	r1, r3
    363e:	4620      	mov	r0, r4
    3640:	4b04      	ldr	r3, [pc, #16]	; (3654 <delay_ms+0x30>)
    3642:	4798      	blx	r3
}
    3644:	bf00      	nop
    3646:	370c      	adds	r7, #12
    3648:	46bd      	mov	sp, r7
    364a:	bd90      	pop	{r4, r7, pc}
    364c:	200021b8 	.word	0x200021b8
    3650:	00005ded 	.word	0x00005ded
    3654:	00005e19 	.word	0x00005e19

00003658 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    3658:	b580      	push	{r7, lr}
    365a:	af00      	add	r7, sp, #0
	return _event_system_init();
    365c:	4b02      	ldr	r3, [pc, #8]	; (3668 <event_system_init+0x10>)
    365e:	4798      	blx	r3
    3660:	4603      	mov	r3, r0
}
    3662:	4618      	mov	r0, r3
    3664:	bd80      	pop	{r7, pc}
    3666:	bf00      	nop
    3668:	000066ed 	.word	0x000066ed

0000366c <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    366c:	b580      	push	{r7, lr}
    366e:	b082      	sub	sp, #8
    3670:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3672:	2300      	movs	r3, #0
    3674:	80fb      	strh	r3, [r7, #6]
    3676:	e00e      	b.n	3696 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    3678:	88fb      	ldrh	r3, [r7, #6]
    367a:	4a0c      	ldr	r2, [pc, #48]	; (36ac <ext_irq_init+0x40>)
    367c:	00db      	lsls	r3, r3, #3
    367e:	4413      	add	r3, r2
    3680:	f04f 32ff 	mov.w	r2, #4294967295
    3684:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    3686:	88fb      	ldrh	r3, [r7, #6]
    3688:	4a08      	ldr	r2, [pc, #32]	; (36ac <ext_irq_init+0x40>)
    368a:	2100      	movs	r1, #0
    368c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3690:	88fb      	ldrh	r3, [r7, #6]
    3692:	3301      	adds	r3, #1
    3694:	80fb      	strh	r3, [r7, #6]
    3696:	88fb      	ldrh	r3, [r7, #6]
    3698:	2b08      	cmp	r3, #8
    369a:	d9ed      	bls.n	3678 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    369c:	4804      	ldr	r0, [pc, #16]	; (36b0 <ext_irq_init+0x44>)
    369e:	4b05      	ldr	r3, [pc, #20]	; (36b4 <ext_irq_init+0x48>)
    36a0:	4798      	blx	r3
    36a2:	4603      	mov	r3, r0
}
    36a4:	4618      	mov	r0, r3
    36a6:	3708      	adds	r7, #8
    36a8:	46bd      	mov	sp, r7
    36aa:	bd80      	pop	{r7, pc}
    36ac:	200021bc 	.word	0x200021bc
    36b0:	00003811 	.word	0x00003811
    36b4:	00006271 	.word	0x00006271

000036b8 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    36b8:	b580      	push	{r7, lr}
    36ba:	b086      	sub	sp, #24
    36bc:	af00      	add	r7, sp, #0
    36be:	6078      	str	r0, [r7, #4]
    36c0:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    36c2:	2300      	movs	r3, #0
    36c4:	75fb      	strb	r3, [r7, #23]
    36c6:	2300      	movs	r3, #0
    36c8:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    36ca:	2300      	movs	r3, #0
    36cc:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    36ce:	e012      	b.n	36f6 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    36d0:	7dfb      	ldrb	r3, [r7, #23]
    36d2:	4a4d      	ldr	r2, [pc, #308]	; (3808 <ext_irq_register+0x150>)
    36d4:	00db      	lsls	r3, r3, #3
    36d6:	4413      	add	r3, r2
    36d8:	685a      	ldr	r2, [r3, #4]
    36da:	687b      	ldr	r3, [r7, #4]
    36dc:	429a      	cmp	r2, r3
    36de:	d107      	bne.n	36f0 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    36e0:	7dfb      	ldrb	r3, [r7, #23]
    36e2:	4949      	ldr	r1, [pc, #292]	; (3808 <ext_irq_register+0x150>)
    36e4:	683a      	ldr	r2, [r7, #0]
    36e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    36ea:	2301      	movs	r3, #1
    36ec:	757b      	strb	r3, [r7, #21]
			break;
    36ee:	e005      	b.n	36fc <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    36f0:	7dfb      	ldrb	r3, [r7, #23]
    36f2:	3301      	adds	r3, #1
    36f4:	75fb      	strb	r3, [r7, #23]
    36f6:	7dfb      	ldrb	r3, [r7, #23]
    36f8:	2b08      	cmp	r3, #8
    36fa:	d9e9      	bls.n	36d0 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    36fc:	683b      	ldr	r3, [r7, #0]
    36fe:	2b00      	cmp	r3, #0
    3700:	d10e      	bne.n	3720 <ext_irq_register+0x68>
		if (!found) {
    3702:	7d7b      	ldrb	r3, [r7, #21]
    3704:	f083 0301 	eor.w	r3, r3, #1
    3708:	b2db      	uxtb	r3, r3
    370a:	2b00      	cmp	r3, #0
    370c:	d002      	beq.n	3714 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    370e:	f06f 030c 	mvn.w	r3, #12
    3712:	e074      	b.n	37fe <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    3714:	2100      	movs	r1, #0
    3716:	6878      	ldr	r0, [r7, #4]
    3718:	4b3c      	ldr	r3, [pc, #240]	; (380c <ext_irq_register+0x154>)
    371a:	4798      	blx	r3
    371c:	4603      	mov	r3, r0
    371e:	e06e      	b.n	37fe <ext_irq_register+0x146>
	}

	if (!found) {
    3720:	7d7b      	ldrb	r3, [r7, #21]
    3722:	f083 0301 	eor.w	r3, r3, #1
    3726:	b2db      	uxtb	r3, r3
    3728:	2b00      	cmp	r3, #0
    372a:	d05a      	beq.n	37e2 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    372c:	2300      	movs	r3, #0
    372e:	75fb      	strb	r3, [r7, #23]
    3730:	e016      	b.n	3760 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    3732:	7dfb      	ldrb	r3, [r7, #23]
    3734:	4a34      	ldr	r2, [pc, #208]	; (3808 <ext_irq_register+0x150>)
    3736:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    373a:	2b00      	cmp	r3, #0
    373c:	d10d      	bne.n	375a <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    373e:	7dfb      	ldrb	r3, [r7, #23]
    3740:	4931      	ldr	r1, [pc, #196]	; (3808 <ext_irq_register+0x150>)
    3742:	683a      	ldr	r2, [r7, #0]
    3744:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    3748:	7dfb      	ldrb	r3, [r7, #23]
    374a:	4a2f      	ldr	r2, [pc, #188]	; (3808 <ext_irq_register+0x150>)
    374c:	00db      	lsls	r3, r3, #3
    374e:	4413      	add	r3, r2
    3750:	687a      	ldr	r2, [r7, #4]
    3752:	605a      	str	r2, [r3, #4]
				found           = true;
    3754:	2301      	movs	r3, #1
    3756:	757b      	strb	r3, [r7, #21]
				break;
    3758:	e005      	b.n	3766 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    375a:	7dfb      	ldrb	r3, [r7, #23]
    375c:	3301      	adds	r3, #1
    375e:	75fb      	strb	r3, [r7, #23]
    3760:	7dfb      	ldrb	r3, [r7, #23]
    3762:	2b08      	cmp	r3, #8
    3764:	d9e5      	bls.n	3732 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    3766:	e036      	b.n	37d6 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    3768:	7dfb      	ldrb	r3, [r7, #23]
    376a:	4a27      	ldr	r2, [pc, #156]	; (3808 <ext_irq_register+0x150>)
    376c:	00db      	lsls	r3, r3, #3
    376e:	4413      	add	r3, r2
    3770:	685a      	ldr	r2, [r3, #4]
    3772:	7dbb      	ldrb	r3, [r7, #22]
    3774:	4924      	ldr	r1, [pc, #144]	; (3808 <ext_irq_register+0x150>)
    3776:	00db      	lsls	r3, r3, #3
    3778:	440b      	add	r3, r1
    377a:	685b      	ldr	r3, [r3, #4]
    377c:	429a      	cmp	r2, r3
    377e:	d227      	bcs.n	37d0 <ext_irq_register+0x118>
    3780:	7dbb      	ldrb	r3, [r7, #22]
    3782:	4a21      	ldr	r2, [pc, #132]	; (3808 <ext_irq_register+0x150>)
    3784:	00db      	lsls	r3, r3, #3
    3786:	4413      	add	r3, r2
    3788:	685b      	ldr	r3, [r3, #4]
    378a:	f1b3 3fff 	cmp.w	r3, #4294967295
    378e:	d01f      	beq.n	37d0 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    3790:	7dbb      	ldrb	r3, [r7, #22]
    3792:	491d      	ldr	r1, [pc, #116]	; (3808 <ext_irq_register+0x150>)
    3794:	f107 020c 	add.w	r2, r7, #12
    3798:	00db      	lsls	r3, r3, #3
    379a:	440b      	add	r3, r1
    379c:	e893 0003 	ldmia.w	r3, {r0, r1}
    37a0:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    37a4:	7dbb      	ldrb	r3, [r7, #22]
    37a6:	7dfa      	ldrb	r2, [r7, #23]
    37a8:	4817      	ldr	r0, [pc, #92]	; (3808 <ext_irq_register+0x150>)
    37aa:	4917      	ldr	r1, [pc, #92]	; (3808 <ext_irq_register+0x150>)
    37ac:	00db      	lsls	r3, r3, #3
    37ae:	4403      	add	r3, r0
    37b0:	00d2      	lsls	r2, r2, #3
    37b2:	440a      	add	r2, r1
    37b4:	e892 0003 	ldmia.w	r2, {r0, r1}
    37b8:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    37bc:	7dfb      	ldrb	r3, [r7, #23]
    37be:	4a12      	ldr	r2, [pc, #72]	; (3808 <ext_irq_register+0x150>)
    37c0:	00db      	lsls	r3, r3, #3
    37c2:	4413      	add	r3, r2
    37c4:	f107 020c 	add.w	r2, r7, #12
    37c8:	e892 0003 	ldmia.w	r2, {r0, r1}
    37cc:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    37d0:	7dbb      	ldrb	r3, [r7, #22]
    37d2:	3301      	adds	r3, #1
    37d4:	75bb      	strb	r3, [r7, #22]
    37d6:	7dbb      	ldrb	r3, [r7, #22]
    37d8:	2b08      	cmp	r3, #8
    37da:	d802      	bhi.n	37e2 <ext_irq_register+0x12a>
    37dc:	7dfb      	ldrb	r3, [r7, #23]
    37de:	2b08      	cmp	r3, #8
    37e0:	d9c2      	bls.n	3768 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    37e2:	7d7b      	ldrb	r3, [r7, #21]
    37e4:	f083 0301 	eor.w	r3, r3, #1
    37e8:	b2db      	uxtb	r3, r3
    37ea:	2b00      	cmp	r3, #0
    37ec:	d002      	beq.n	37f4 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    37ee:	f06f 030c 	mvn.w	r3, #12
    37f2:	e004      	b.n	37fe <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    37f4:	2101      	movs	r1, #1
    37f6:	6878      	ldr	r0, [r7, #4]
    37f8:	4b04      	ldr	r3, [pc, #16]	; (380c <ext_irq_register+0x154>)
    37fa:	4798      	blx	r3
    37fc:	4603      	mov	r3, r0
}
    37fe:	4618      	mov	r0, r3
    3800:	3718      	adds	r7, #24
    3802:	46bd      	mov	sp, r7
    3804:	bd80      	pop	{r7, pc}
    3806:	bf00      	nop
    3808:	200021bc 	.word	0x200021bc
    380c:	00006405 	.word	0x00006405

00003810 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    3810:	b580      	push	{r7, lr}
    3812:	b084      	sub	sp, #16
    3814:	af00      	add	r7, sp, #0
    3816:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    3818:	2300      	movs	r3, #0
    381a:	73fb      	strb	r3, [r7, #15]
    381c:	2309      	movs	r3, #9
    381e:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    3820:	e02a      	b.n	3878 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    3822:	7bba      	ldrb	r2, [r7, #14]
    3824:	7bfb      	ldrb	r3, [r7, #15]
    3826:	4413      	add	r3, r2
    3828:	105b      	asrs	r3, r3, #1
    382a:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    382c:	7b7b      	ldrb	r3, [r7, #13]
    382e:	2b08      	cmp	r3, #8
    3830:	d827      	bhi.n	3882 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    3832:	7b7b      	ldrb	r3, [r7, #13]
    3834:	4a16      	ldr	r2, [pc, #88]	; (3890 <process_ext_irq+0x80>)
    3836:	00db      	lsls	r3, r3, #3
    3838:	4413      	add	r3, r2
    383a:	685a      	ldr	r2, [r3, #4]
    383c:	687b      	ldr	r3, [r7, #4]
    383e:	429a      	cmp	r2, r3
    3840:	d10b      	bne.n	385a <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    3842:	7b7b      	ldrb	r3, [r7, #13]
    3844:	4a12      	ldr	r2, [pc, #72]	; (3890 <process_ext_irq+0x80>)
    3846:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    384a:	2b00      	cmp	r3, #0
    384c:	d01b      	beq.n	3886 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    384e:	7b7b      	ldrb	r3, [r7, #13]
    3850:	4a0f      	ldr	r2, [pc, #60]	; (3890 <process_ext_irq+0x80>)
    3852:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3856:	4798      	blx	r3
			}
			return;
    3858:	e015      	b.n	3886 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    385a:	7b7b      	ldrb	r3, [r7, #13]
    385c:	4a0c      	ldr	r2, [pc, #48]	; (3890 <process_ext_irq+0x80>)
    385e:	00db      	lsls	r3, r3, #3
    3860:	4413      	add	r3, r2
    3862:	685a      	ldr	r2, [r3, #4]
    3864:	687b      	ldr	r3, [r7, #4]
    3866:	429a      	cmp	r2, r3
    3868:	d203      	bcs.n	3872 <process_ext_irq+0x62>
			lower = middle + 1;
    386a:	7b7b      	ldrb	r3, [r7, #13]
    386c:	3301      	adds	r3, #1
    386e:	73fb      	strb	r3, [r7, #15]
    3870:	e002      	b.n	3878 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    3872:	7b7b      	ldrb	r3, [r7, #13]
    3874:	3b01      	subs	r3, #1
    3876:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    3878:	7bba      	ldrb	r2, [r7, #14]
    387a:	7bfb      	ldrb	r3, [r7, #15]
    387c:	429a      	cmp	r2, r3
    387e:	d2d0      	bcs.n	3822 <process_ext_irq+0x12>
    3880:	e002      	b.n	3888 <process_ext_irq+0x78>
			return;
    3882:	bf00      	nop
    3884:	e000      	b.n	3888 <process_ext_irq+0x78>
			return;
    3886:	bf00      	nop
		}
	}
}
    3888:	3710      	adds	r7, #16
    388a:	46bd      	mov	sp, r7
    388c:	bd80      	pop	{r7, pc}
    388e:	bf00      	nop
    3890:	200021bc 	.word	0x200021bc

00003894 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    3894:	b580      	push	{r7, lr}
    3896:	b08a      	sub	sp, #40	; 0x28
    3898:	af00      	add	r7, sp, #0
    389a:	60f8      	str	r0, [r7, #12]
    389c:	60b9      	str	r1, [r7, #8]
    389e:	4613      	mov	r3, r2
    38a0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    38a2:	68fb      	ldr	r3, [r7, #12]
    38a4:	3b14      	subs	r3, #20
    38a6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    38a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38aa:	8b9b      	ldrh	r3, [r3, #28]
    38ac:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    38ae:	88fb      	ldrh	r3, [r7, #6]
    38b0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    38b2:	f248 0301 	movw	r3, #32769	; 0x8001
    38b6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    38b8:	68bb      	ldr	r3, [r7, #8]
    38ba:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    38bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38be:	f107 0214 	add.w	r2, r7, #20
    38c2:	4611      	mov	r1, r2
    38c4:	4618      	mov	r0, r3
    38c6:	4b06      	ldr	r3, [pc, #24]	; (38e0 <i2c_m_sync_read+0x4c>)
    38c8:	4798      	blx	r3
    38ca:	6238      	str	r0, [r7, #32]

	if (ret) {
    38cc:	6a3b      	ldr	r3, [r7, #32]
    38ce:	2b00      	cmp	r3, #0
    38d0:	d001      	beq.n	38d6 <i2c_m_sync_read+0x42>
		return ret;
    38d2:	6a3b      	ldr	r3, [r7, #32]
    38d4:	e000      	b.n	38d8 <i2c_m_sync_read+0x44>
	}

	return n;
    38d6:	88fb      	ldrh	r3, [r7, #6]
}
    38d8:	4618      	mov	r0, r3
    38da:	3728      	adds	r7, #40	; 0x28
    38dc:	46bd      	mov	sp, r7
    38de:	bd80      	pop	{r7, pc}
    38e0:	000084d1 	.word	0x000084d1

000038e4 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    38e4:	b580      	push	{r7, lr}
    38e6:	b08a      	sub	sp, #40	; 0x28
    38e8:	af00      	add	r7, sp, #0
    38ea:	60f8      	str	r0, [r7, #12]
    38ec:	60b9      	str	r1, [r7, #8]
    38ee:	4613      	mov	r3, r2
    38f0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    38f2:	68fb      	ldr	r3, [r7, #12]
    38f4:	3b14      	subs	r3, #20
    38f6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    38f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38fa:	8b9b      	ldrh	r3, [r3, #28]
    38fc:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    38fe:	88fb      	ldrh	r3, [r7, #6]
    3900:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    3902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3906:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    3908:	68bb      	ldr	r3, [r7, #8]
    390a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    390e:	f107 0214 	add.w	r2, r7, #20
    3912:	4611      	mov	r1, r2
    3914:	4618      	mov	r0, r3
    3916:	4b06      	ldr	r3, [pc, #24]	; (3930 <i2c_m_sync_write+0x4c>)
    3918:	4798      	blx	r3
    391a:	6238      	str	r0, [r7, #32]

	if (ret) {
    391c:	6a3b      	ldr	r3, [r7, #32]
    391e:	2b00      	cmp	r3, #0
    3920:	d001      	beq.n	3926 <i2c_m_sync_write+0x42>
		return ret;
    3922:	6a3b      	ldr	r3, [r7, #32]
    3924:	e000      	b.n	3928 <i2c_m_sync_write+0x44>
	}

	return n;
    3926:	88fb      	ldrh	r3, [r7, #6]
}
    3928:	4618      	mov	r0, r3
    392a:	3728      	adds	r7, #40	; 0x28
    392c:	46bd      	mov	sp, r7
    392e:	bd80      	pop	{r7, pc}
    3930:	000084d1 	.word	0x000084d1

00003934 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    3934:	b580      	push	{r7, lr}
    3936:	b084      	sub	sp, #16
    3938:	af00      	add	r7, sp, #0
    393a:	6078      	str	r0, [r7, #4]
    393c:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    393e:	687b      	ldr	r3, [r7, #4]
    3940:	2b00      	cmp	r3, #0
    3942:	bf14      	ite	ne
    3944:	2301      	movne	r3, #1
    3946:	2300      	moveq	r3, #0
    3948:	b2db      	uxtb	r3, r3
    394a:	225e      	movs	r2, #94	; 0x5e
    394c:	490c      	ldr	r1, [pc, #48]	; (3980 <i2c_m_sync_init+0x4c>)
    394e:	4618      	mov	r0, r3
    3950:	4b0c      	ldr	r3, [pc, #48]	; (3984 <i2c_m_sync_init+0x50>)
    3952:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    3954:	687b      	ldr	r3, [r7, #4]
    3956:	6839      	ldr	r1, [r7, #0]
    3958:	4618      	mov	r0, r3
    395a:	4b0b      	ldr	r3, [pc, #44]	; (3988 <i2c_m_sync_init+0x54>)
    395c:	4798      	blx	r3
    395e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    3960:	68fb      	ldr	r3, [r7, #12]
    3962:	2b00      	cmp	r3, #0
    3964:	d001      	beq.n	396a <i2c_m_sync_init+0x36>
		return init_status;
    3966:	68fb      	ldr	r3, [r7, #12]
    3968:	e006      	b.n	3978 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    396a:	687b      	ldr	r3, [r7, #4]
    396c:	4a07      	ldr	r2, [pc, #28]	; (398c <i2c_m_sync_init+0x58>)
    396e:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    3970:	687b      	ldr	r3, [r7, #4]
    3972:	4a07      	ldr	r2, [pc, #28]	; (3990 <i2c_m_sync_init+0x5c>)
    3974:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    3976:	2300      	movs	r3, #0
}
    3978:	4618      	mov	r0, r3
    397a:	3710      	adds	r7, #16
    397c:	46bd      	mov	sp, r7
    397e:	bd80      	pop	{r7, pc}
    3980:	0001ac18 	.word	0x0001ac18
    3984:	00004c81 	.word	0x00004c81
    3988:	00008271 	.word	0x00008271
    398c:	00003895 	.word	0x00003895
    3990:	000038e5 	.word	0x000038e5

00003994 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    3994:	b580      	push	{r7, lr}
    3996:	b082      	sub	sp, #8
    3998:	af00      	add	r7, sp, #0
    399a:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    399c:	687b      	ldr	r3, [r7, #4]
    399e:	4618      	mov	r0, r3
    39a0:	4b03      	ldr	r3, [pc, #12]	; (39b0 <i2c_m_sync_enable+0x1c>)
    39a2:	4798      	blx	r3
    39a4:	4603      	mov	r3, r0
}
    39a6:	4618      	mov	r0, r3
    39a8:	3708      	adds	r7, #8
    39aa:	46bd      	mov	sp, r7
    39ac:	bd80      	pop	{r7, pc}
    39ae:	bf00      	nop
    39b0:	000082b9 	.word	0x000082b9

000039b4 <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    39b4:	b580      	push	{r7, lr}
    39b6:	b082      	sub	sp, #8
    39b8:	af00      	add	r7, sp, #0
    39ba:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    39bc:	687b      	ldr	r3, [r7, #4]
    39be:	4618      	mov	r0, r3
    39c0:	4b03      	ldr	r3, [pc, #12]	; (39d0 <i2c_m_sync_disable+0x1c>)
    39c2:	4798      	blx	r3
    39c4:	4603      	mov	r3, r0
}
    39c6:	4618      	mov	r0, r3
    39c8:	3708      	adds	r7, #8
    39ca:	46bd      	mov	sp, r7
    39cc:	bd80      	pop	{r7, pc}
    39ce:	bf00      	nop
    39d0:	000082f9 	.word	0x000082f9

000039d4 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    39d4:	b480      	push	{r7}
    39d6:	b085      	sub	sp, #20
    39d8:	af00      	add	r7, sp, #0
    39da:	60f8      	str	r0, [r7, #12]
    39dc:	460b      	mov	r3, r1
    39de:	607a      	str	r2, [r7, #4]
    39e0:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    39e2:	897b      	ldrh	r3, [r7, #10]
    39e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    39e8:	b21a      	sxth	r2, r3
    39ea:	687b      	ldr	r3, [r7, #4]
    39ec:	b21b      	sxth	r3, r3
    39ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    39f2:	b21b      	sxth	r3, r3
    39f4:	4313      	orrs	r3, r2
    39f6:	b21b      	sxth	r3, r3
    39f8:	b29a      	uxth	r2, r3
    39fa:	68fb      	ldr	r3, [r7, #12]
    39fc:	839a      	strh	r2, [r3, #28]
    39fe:	68fb      	ldr	r3, [r7, #12]
    3a00:	8b9b      	ldrh	r3, [r3, #28]
}
    3a02:	4618      	mov	r0, r3
    3a04:	3714      	adds	r7, #20
    3a06:	46bd      	mov	sp, r7
    3a08:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a0c:	4770      	bx	lr

00003a0e <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    3a0e:	b480      	push	{r7}
    3a10:	b083      	sub	sp, #12
    3a12:	af00      	add	r7, sp, #0
    3a14:	6078      	str	r0, [r7, #4]
    3a16:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    3a18:	687b      	ldr	r3, [r7, #4]
    3a1a:	f103 0214 	add.w	r2, r3, #20
    3a1e:	683b      	ldr	r3, [r7, #0]
    3a20:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    3a22:	2300      	movs	r3, #0
}
    3a24:	4618      	mov	r0, r3
    3a26:	370c      	adds	r7, #12
    3a28:	46bd      	mov	sp, r7
    3a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a2e:	4770      	bx	lr

00003a30 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    3a30:	b580      	push	{r7, lr}
    3a32:	b084      	sub	sp, #16
    3a34:	af00      	add	r7, sp, #0
    3a36:	60f8      	str	r0, [r7, #12]
    3a38:	60b9      	str	r1, [r7, #8]
    3a3a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    3a3c:	68fb      	ldr	r3, [r7, #12]
    3a3e:	2b00      	cmp	r3, #0
    3a40:	d004      	beq.n	3a4c <pwm_init+0x1c>
    3a42:	68bb      	ldr	r3, [r7, #8]
    3a44:	2b00      	cmp	r3, #0
    3a46:	d001      	beq.n	3a4c <pwm_init+0x1c>
    3a48:	2301      	movs	r3, #1
    3a4a:	e000      	b.n	3a4e <pwm_init+0x1e>
    3a4c:	2300      	movs	r3, #0
    3a4e:	f003 0301 	and.w	r3, r3, #1
    3a52:	b2db      	uxtb	r3, r3
    3a54:	2233      	movs	r2, #51	; 0x33
    3a56:	490a      	ldr	r1, [pc, #40]	; (3a80 <pwm_init+0x50>)
    3a58:	4618      	mov	r0, r3
    3a5a:	4b0a      	ldr	r3, [pc, #40]	; (3a84 <pwm_init+0x54>)
    3a5c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    3a5e:	68fb      	ldr	r3, [r7, #12]
    3a60:	68b9      	ldr	r1, [r7, #8]
    3a62:	4618      	mov	r0, r3
    3a64:	4b08      	ldr	r3, [pc, #32]	; (3a88 <pwm_init+0x58>)
    3a66:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    3a68:	68fb      	ldr	r3, [r7, #12]
    3a6a:	4a08      	ldr	r2, [pc, #32]	; (3a8c <pwm_init+0x5c>)
    3a6c:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    3a6e:	68fb      	ldr	r3, [r7, #12]
    3a70:	4a07      	ldr	r2, [pc, #28]	; (3a90 <pwm_init+0x60>)
    3a72:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    3a74:	2300      	movs	r3, #0
}
    3a76:	4618      	mov	r0, r3
    3a78:	3710      	adds	r7, #16
    3a7a:	46bd      	mov	sp, r7
    3a7c:	bd80      	pop	{r7, pc}
    3a7e:	bf00      	nop
    3a80:	0001ac34 	.word	0x0001ac34
    3a84:	00004c81 	.word	0x00004c81
    3a88:	00009b99 	.word	0x00009b99
    3a8c:	00003a95 	.word	0x00003a95
    3a90:	00003ab9 	.word	0x00003ab9

00003a94 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    3a94:	b580      	push	{r7, lr}
    3a96:	b084      	sub	sp, #16
    3a98:	af00      	add	r7, sp, #0
    3a9a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    3a9c:	687b      	ldr	r3, [r7, #4]
    3a9e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    3aa0:	68fb      	ldr	r3, [r7, #12]
    3aa2:	695b      	ldr	r3, [r3, #20]
    3aa4:	2b00      	cmp	r3, #0
    3aa6:	d003      	beq.n	3ab0 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    3aa8:	68fb      	ldr	r3, [r7, #12]
    3aaa:	695b      	ldr	r3, [r3, #20]
    3aac:	68f8      	ldr	r0, [r7, #12]
    3aae:	4798      	blx	r3
	}
}
    3ab0:	bf00      	nop
    3ab2:	3710      	adds	r7, #16
    3ab4:	46bd      	mov	sp, r7
    3ab6:	bd80      	pop	{r7, pc}

00003ab8 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    3ab8:	b580      	push	{r7, lr}
    3aba:	b084      	sub	sp, #16
    3abc:	af00      	add	r7, sp, #0
    3abe:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    3ac0:	687b      	ldr	r3, [r7, #4]
    3ac2:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    3ac4:	68fb      	ldr	r3, [r7, #12]
    3ac6:	699b      	ldr	r3, [r3, #24]
    3ac8:	2b00      	cmp	r3, #0
    3aca:	d003      	beq.n	3ad4 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    3acc:	68fb      	ldr	r3, [r7, #12]
    3ace:	699b      	ldr	r3, [r3, #24]
    3ad0:	68f8      	ldr	r0, [r7, #12]
    3ad2:	4798      	blx	r3
	}
}
    3ad4:	bf00      	nop
    3ad6:	3710      	adds	r7, #16
    3ad8:	46bd      	mov	sp, r7
    3ada:	bd80      	pop	{r7, pc}

00003adc <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    3adc:	b580      	push	{r7, lr}
    3ade:	b082      	sub	sp, #8
    3ae0:	af00      	add	r7, sp, #0
    3ae2:	6078      	str	r0, [r7, #4]
    3ae4:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    3ae6:	687b      	ldr	r3, [r7, #4]
    3ae8:	2b00      	cmp	r3, #0
    3aea:	d004      	beq.n	3af6 <qspi_sync_init+0x1a>
    3aec:	683b      	ldr	r3, [r7, #0]
    3aee:	2b00      	cmp	r3, #0
    3af0:	d001      	beq.n	3af6 <qspi_sync_init+0x1a>
    3af2:	2301      	movs	r3, #1
    3af4:	e000      	b.n	3af8 <qspi_sync_init+0x1c>
    3af6:	2300      	movs	r3, #0
    3af8:	f003 0301 	and.w	r3, r3, #1
    3afc:	b2db      	uxtb	r3, r3
    3afe:	2231      	movs	r2, #49	; 0x31
    3b00:	4906      	ldr	r1, [pc, #24]	; (3b1c <qspi_sync_init+0x40>)
    3b02:	4618      	mov	r0, r3
    3b04:	4b06      	ldr	r3, [pc, #24]	; (3b20 <qspi_sync_init+0x44>)
    3b06:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    3b08:	687b      	ldr	r3, [r7, #4]
    3b0a:	6839      	ldr	r1, [r7, #0]
    3b0c:	4618      	mov	r0, r3
    3b0e:	4b05      	ldr	r3, [pc, #20]	; (3b24 <qspi_sync_init+0x48>)
    3b10:	4798      	blx	r3
    3b12:	4603      	mov	r3, r0
}
    3b14:	4618      	mov	r0, r3
    3b16:	3708      	adds	r7, #8
    3b18:	46bd      	mov	sp, r7
    3b1a:	bd80      	pop	{r7, pc}
    3b1c:	0001ac4c 	.word	0x0001ac4c
    3b20:	00004c81 	.word	0x00004c81
    3b24:	000072cd 	.word	0x000072cd

00003b28 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    3b28:	b580      	push	{r7, lr}
    3b2a:	b082      	sub	sp, #8
    3b2c:	af00      	add	r7, sp, #0
    3b2e:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    3b30:	687b      	ldr	r3, [r7, #4]
    3b32:	2b00      	cmp	r3, #0
    3b34:	bf14      	ite	ne
    3b36:	2301      	movne	r3, #1
    3b38:	2300      	moveq	r3, #0
    3b3a:	b2db      	uxtb	r3, r3
    3b3c:	223f      	movs	r2, #63	; 0x3f
    3b3e:	4906      	ldr	r1, [pc, #24]	; (3b58 <qspi_sync_enable+0x30>)
    3b40:	4618      	mov	r0, r3
    3b42:	4b06      	ldr	r3, [pc, #24]	; (3b5c <qspi_sync_enable+0x34>)
    3b44:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    3b46:	687b      	ldr	r3, [r7, #4]
    3b48:	4618      	mov	r0, r3
    3b4a:	4b05      	ldr	r3, [pc, #20]	; (3b60 <qspi_sync_enable+0x38>)
    3b4c:	4798      	blx	r3
    3b4e:	4603      	mov	r3, r0
}
    3b50:	4618      	mov	r0, r3
    3b52:	3708      	adds	r7, #8
    3b54:	46bd      	mov	sp, r7
    3b56:	bd80      	pop	{r7, pc}
    3b58:	0001ac4c 	.word	0x0001ac4c
    3b5c:	00004c81 	.word	0x00004c81
    3b60:	00007341 	.word	0x00007341

00003b64 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    3b64:	b580      	push	{r7, lr}
    3b66:	b082      	sub	sp, #8
    3b68:	af00      	add	r7, sp, #0
    3b6a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    3b6c:	687b      	ldr	r3, [r7, #4]
    3b6e:	2b00      	cmp	r3, #0
    3b70:	bf14      	ite	ne
    3b72:	2301      	movne	r3, #1
    3b74:	2300      	moveq	r3, #0
    3b76:	b2db      	uxtb	r3, r3
    3b78:	2246      	movs	r2, #70	; 0x46
    3b7a:	4906      	ldr	r1, [pc, #24]	; (3b94 <qspi_sync_disable+0x30>)
    3b7c:	4618      	mov	r0, r3
    3b7e:	4b06      	ldr	r3, [pc, #24]	; (3b98 <qspi_sync_disable+0x34>)
    3b80:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    3b82:	687b      	ldr	r3, [r7, #4]
    3b84:	4618      	mov	r0, r3
    3b86:	4b05      	ldr	r3, [pc, #20]	; (3b9c <qspi_sync_disable+0x38>)
    3b88:	4798      	blx	r3
    3b8a:	4603      	mov	r3, r0
}
    3b8c:	4618      	mov	r0, r3
    3b8e:	3708      	adds	r7, #8
    3b90:	46bd      	mov	sp, r7
    3b92:	bd80      	pop	{r7, pc}
    3b94:	0001ac4c 	.word	0x0001ac4c
    3b98:	00004c81 	.word	0x00004c81
    3b9c:	00007365 	.word	0x00007365

00003ba0 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    3ba0:	b580      	push	{r7, lr}
    3ba2:	b082      	sub	sp, #8
    3ba4:	af00      	add	r7, sp, #0
    3ba6:	6078      	str	r0, [r7, #4]
    3ba8:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    3baa:	687b      	ldr	r3, [r7, #4]
    3bac:	2b00      	cmp	r3, #0
    3bae:	d004      	beq.n	3bba <qspi_sync_serial_run_command+0x1a>
    3bb0:	683b      	ldr	r3, [r7, #0]
    3bb2:	2b00      	cmp	r3, #0
    3bb4:	d001      	beq.n	3bba <qspi_sync_serial_run_command+0x1a>
    3bb6:	2301      	movs	r3, #1
    3bb8:	e000      	b.n	3bbc <qspi_sync_serial_run_command+0x1c>
    3bba:	2300      	movs	r3, #0
    3bbc:	f003 0301 	and.w	r3, r3, #1
    3bc0:	b2db      	uxtb	r3, r3
    3bc2:	224d      	movs	r2, #77	; 0x4d
    3bc4:	4906      	ldr	r1, [pc, #24]	; (3be0 <qspi_sync_serial_run_command+0x40>)
    3bc6:	4618      	mov	r0, r3
    3bc8:	4b06      	ldr	r3, [pc, #24]	; (3be4 <qspi_sync_serial_run_command+0x44>)
    3bca:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    3bcc:	687b      	ldr	r3, [r7, #4]
    3bce:	6839      	ldr	r1, [r7, #0]
    3bd0:	4618      	mov	r0, r3
    3bd2:	4b05      	ldr	r3, [pc, #20]	; (3be8 <qspi_sync_serial_run_command+0x48>)
    3bd4:	4798      	blx	r3
    3bd6:	4603      	mov	r3, r0
}
    3bd8:	4618      	mov	r0, r3
    3bda:	3708      	adds	r7, #8
    3bdc:	46bd      	mov	sp, r7
    3bde:	bd80      	pop	{r7, pc}
    3be0:	0001ac4c 	.word	0x0001ac4c
    3be4:	00004c81 	.word	0x00004c81
    3be8:	000074b1 	.word	0x000074b1

00003bec <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    3bec:	b580      	push	{r7, lr}
    3bee:	b084      	sub	sp, #16
    3bf0:	af00      	add	r7, sp, #0
    3bf2:	6078      	str	r0, [r7, #4]
    3bf4:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    3bf6:	2300      	movs	r3, #0
    3bf8:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    3bfa:	687b      	ldr	r3, [r7, #4]
    3bfc:	2b00      	cmp	r3, #0
    3bfe:	d004      	beq.n	3c0a <spi_m_sync_init+0x1e>
    3c00:	683b      	ldr	r3, [r7, #0]
    3c02:	2b00      	cmp	r3, #0
    3c04:	d001      	beq.n	3c0a <spi_m_sync_init+0x1e>
    3c06:	2301      	movs	r3, #1
    3c08:	e000      	b.n	3c0c <spi_m_sync_init+0x20>
    3c0a:	2300      	movs	r3, #0
    3c0c:	f003 0301 	and.w	r3, r3, #1
    3c10:	b2db      	uxtb	r3, r3
    3c12:	2240      	movs	r2, #64	; 0x40
    3c14:	4910      	ldr	r1, [pc, #64]	; (3c58 <spi_m_sync_init+0x6c>)
    3c16:	4618      	mov	r0, r3
    3c18:	4b10      	ldr	r3, [pc, #64]	; (3c5c <spi_m_sync_init+0x70>)
    3c1a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    3c1c:	687b      	ldr	r3, [r7, #4]
    3c1e:	683a      	ldr	r2, [r7, #0]
    3c20:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    3c22:	687b      	ldr	r3, [r7, #4]
    3c24:	3304      	adds	r3, #4
    3c26:	6839      	ldr	r1, [r7, #0]
    3c28:	4618      	mov	r0, r3
    3c2a:	4b0d      	ldr	r3, [pc, #52]	; (3c60 <spi_m_sync_init+0x74>)
    3c2c:	4798      	blx	r3
    3c2e:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    3c30:	68fb      	ldr	r3, [r7, #12]
    3c32:	2b00      	cmp	r3, #0
    3c34:	da01      	bge.n	3c3a <spi_m_sync_init+0x4e>
		return rc;
    3c36:	68fb      	ldr	r3, [r7, #12]
    3c38:	e00a      	b.n	3c50 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    3c3a:	687b      	ldr	r3, [r7, #4]
    3c3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3c40:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    3c42:	687b      	ldr	r3, [r7, #4]
    3c44:	4a07      	ldr	r2, [pc, #28]	; (3c64 <spi_m_sync_init+0x78>)
    3c46:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    3c48:	687b      	ldr	r3, [r7, #4]
    3c4a:	4a07      	ldr	r2, [pc, #28]	; (3c68 <spi_m_sync_init+0x7c>)
    3c4c:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    3c4e:	2300      	movs	r3, #0
}
    3c50:	4618      	mov	r0, r3
    3c52:	3710      	adds	r7, #16
    3c54:	46bd      	mov	sp, r7
    3c56:	bd80      	pop	{r7, pc}
    3c58:	0001ac68 	.word	0x0001ac68
    3c5c:	00004c81 	.word	0x00004c81
    3c60:	000089cd 	.word	0x000089cd
    3c64:	00003ce5 	.word	0x00003ce5
    3c68:	00003d3d 	.word	0x00003d3d

00003c6c <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    3c6c:	b580      	push	{r7, lr}
    3c6e:	b082      	sub	sp, #8
    3c70:	af00      	add	r7, sp, #0
    3c72:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    3c74:	687b      	ldr	r3, [r7, #4]
    3c76:	2b00      	cmp	r3, #0
    3c78:	bf14      	ite	ne
    3c7a:	2301      	movne	r3, #1
    3c7c:	2300      	moveq	r3, #0
    3c7e:	b2db      	uxtb	r3, r3
    3c80:	2257      	movs	r2, #87	; 0x57
    3c82:	4906      	ldr	r1, [pc, #24]	; (3c9c <spi_m_sync_enable+0x30>)
    3c84:	4618      	mov	r0, r3
    3c86:	4b06      	ldr	r3, [pc, #24]	; (3ca0 <spi_m_sync_enable+0x34>)
    3c88:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    3c8a:	687b      	ldr	r3, [r7, #4]
    3c8c:	3304      	adds	r3, #4
    3c8e:	4618      	mov	r0, r3
    3c90:	4b04      	ldr	r3, [pc, #16]	; (3ca4 <spi_m_sync_enable+0x38>)
    3c92:	4798      	blx	r3
}
    3c94:	bf00      	nop
    3c96:	3708      	adds	r7, #8
    3c98:	46bd      	mov	sp, r7
    3c9a:	bd80      	pop	{r7, pc}
    3c9c:	0001ac68 	.word	0x0001ac68
    3ca0:	00004c81 	.word	0x00004c81
    3ca4:	00008ad9 	.word	0x00008ad9

00003ca8 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    3ca8:	b580      	push	{r7, lr}
    3caa:	b082      	sub	sp, #8
    3cac:	af00      	add	r7, sp, #0
    3cae:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    3cb0:	687b      	ldr	r3, [r7, #4]
    3cb2:	2b00      	cmp	r3, #0
    3cb4:	bf14      	ite	ne
    3cb6:	2301      	movne	r3, #1
    3cb8:	2300      	moveq	r3, #0
    3cba:	b2db      	uxtb	r3, r3
    3cbc:	225d      	movs	r2, #93	; 0x5d
    3cbe:	4906      	ldr	r1, [pc, #24]	; (3cd8 <spi_m_sync_disable+0x30>)
    3cc0:	4618      	mov	r0, r3
    3cc2:	4b06      	ldr	r3, [pc, #24]	; (3cdc <spi_m_sync_disable+0x34>)
    3cc4:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    3cc6:	687b      	ldr	r3, [r7, #4]
    3cc8:	3304      	adds	r3, #4
    3cca:	4618      	mov	r0, r3
    3ccc:	4b04      	ldr	r3, [pc, #16]	; (3ce0 <spi_m_sync_disable+0x38>)
    3cce:	4798      	blx	r3
}
    3cd0:	bf00      	nop
    3cd2:	3708      	adds	r7, #8
    3cd4:	46bd      	mov	sp, r7
    3cd6:	bd80      	pop	{r7, pc}
    3cd8:	0001ac68 	.word	0x0001ac68
    3cdc:	00004c81 	.word	0x00004c81
    3ce0:	00008b29 	.word	0x00008b29

00003ce4 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    3ce4:	b580      	push	{r7, lr}
    3ce6:	b088      	sub	sp, #32
    3ce8:	af00      	add	r7, sp, #0
    3cea:	60f8      	str	r0, [r7, #12]
    3cec:	60b9      	str	r1, [r7, #8]
    3cee:	4613      	mov	r3, r2
    3cf0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    3cf2:	68fb      	ldr	r3, [r7, #12]
    3cf4:	2b00      	cmp	r3, #0
    3cf6:	bf14      	ite	ne
    3cf8:	2301      	movne	r3, #1
    3cfa:	2300      	moveq	r3, #0
    3cfc:	b2db      	uxtb	r3, r3
    3cfe:	2287      	movs	r2, #135	; 0x87
    3d00:	490b      	ldr	r1, [pc, #44]	; (3d30 <_spi_m_sync_io_read+0x4c>)
    3d02:	4618      	mov	r0, r3
    3d04:	4b0b      	ldr	r3, [pc, #44]	; (3d34 <_spi_m_sync_io_read+0x50>)
    3d06:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    3d08:	68fb      	ldr	r3, [r7, #12]
    3d0a:	3b0c      	subs	r3, #12
    3d0c:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    3d0e:	68bb      	ldr	r3, [r7, #8]
    3d10:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    3d12:	2300      	movs	r3, #0
    3d14:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    3d16:	88fb      	ldrh	r3, [r7, #6]
    3d18:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    3d1a:	f107 0310 	add.w	r3, r7, #16
    3d1e:	4619      	mov	r1, r3
    3d20:	69f8      	ldr	r0, [r7, #28]
    3d22:	4b05      	ldr	r3, [pc, #20]	; (3d38 <_spi_m_sync_io_read+0x54>)
    3d24:	4798      	blx	r3
    3d26:	4603      	mov	r3, r0
}
    3d28:	4618      	mov	r0, r3
    3d2a:	3720      	adds	r7, #32
    3d2c:	46bd      	mov	sp, r7
    3d2e:	bd80      	pop	{r7, pc}
    3d30:	0001ac68 	.word	0x0001ac68
    3d34:	00004c81 	.word	0x00004c81
    3d38:	00003d95 	.word	0x00003d95

00003d3c <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    3d3c:	b580      	push	{r7, lr}
    3d3e:	b088      	sub	sp, #32
    3d40:	af00      	add	r7, sp, #0
    3d42:	60f8      	str	r0, [r7, #12]
    3d44:	60b9      	str	r1, [r7, #8]
    3d46:	4613      	mov	r3, r2
    3d48:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    3d4a:	68fb      	ldr	r3, [r7, #12]
    3d4c:	2b00      	cmp	r3, #0
    3d4e:	bf14      	ite	ne
    3d50:	2301      	movne	r3, #1
    3d52:	2300      	moveq	r3, #0
    3d54:	b2db      	uxtb	r3, r3
    3d56:	22a3      	movs	r2, #163	; 0xa3
    3d58:	490b      	ldr	r1, [pc, #44]	; (3d88 <_spi_m_sync_io_write+0x4c>)
    3d5a:	4618      	mov	r0, r3
    3d5c:	4b0b      	ldr	r3, [pc, #44]	; (3d8c <_spi_m_sync_io_write+0x50>)
    3d5e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    3d60:	68fb      	ldr	r3, [r7, #12]
    3d62:	3b0c      	subs	r3, #12
    3d64:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    3d66:	2300      	movs	r3, #0
    3d68:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    3d6a:	68bb      	ldr	r3, [r7, #8]
    3d6c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    3d6e:	88fb      	ldrh	r3, [r7, #6]
    3d70:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    3d72:	f107 0310 	add.w	r3, r7, #16
    3d76:	4619      	mov	r1, r3
    3d78:	69f8      	ldr	r0, [r7, #28]
    3d7a:	4b05      	ldr	r3, [pc, #20]	; (3d90 <_spi_m_sync_io_write+0x54>)
    3d7c:	4798      	blx	r3
    3d7e:	4603      	mov	r3, r0
}
    3d80:	4618      	mov	r0, r3
    3d82:	3720      	adds	r7, #32
    3d84:	46bd      	mov	sp, r7
    3d86:	bd80      	pop	{r7, pc}
    3d88:	0001ac68 	.word	0x0001ac68
    3d8c:	00004c81 	.word	0x00004c81
    3d90:	00003d95 	.word	0x00003d95

00003d94 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    3d94:	b580      	push	{r7, lr}
    3d96:	b086      	sub	sp, #24
    3d98:	af00      	add	r7, sp, #0
    3d9a:	6078      	str	r0, [r7, #4]
    3d9c:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    3d9e:	687b      	ldr	r3, [r7, #4]
    3da0:	2b00      	cmp	r3, #0
    3da2:	d004      	beq.n	3dae <spi_m_sync_transfer+0x1a>
    3da4:	683b      	ldr	r3, [r7, #0]
    3da6:	2b00      	cmp	r3, #0
    3da8:	d001      	beq.n	3dae <spi_m_sync_transfer+0x1a>
    3daa:	2301      	movs	r3, #1
    3dac:	e000      	b.n	3db0 <spi_m_sync_transfer+0x1c>
    3dae:	2300      	movs	r3, #0
    3db0:	f003 0301 	and.w	r3, r3, #1
    3db4:	b2db      	uxtb	r3, r3
    3db6:	22b3      	movs	r2, #179	; 0xb3
    3db8:	490c      	ldr	r1, [pc, #48]	; (3dec <spi_m_sync_transfer+0x58>)
    3dba:	4618      	mov	r0, r3
    3dbc:	4b0c      	ldr	r3, [pc, #48]	; (3df0 <spi_m_sync_transfer+0x5c>)
    3dbe:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    3dc0:	683b      	ldr	r3, [r7, #0]
    3dc2:	681b      	ldr	r3, [r3, #0]
    3dc4:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    3dc6:	683b      	ldr	r3, [r7, #0]
    3dc8:	685b      	ldr	r3, [r3, #4]
    3dca:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    3dcc:	683b      	ldr	r3, [r7, #0]
    3dce:	689b      	ldr	r3, [r3, #8]
    3dd0:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    3dd2:	687b      	ldr	r3, [r7, #4]
    3dd4:	3304      	adds	r3, #4
    3dd6:	f107 020c 	add.w	r2, r7, #12
    3dda:	4611      	mov	r1, r2
    3ddc:	4618      	mov	r0, r3
    3dde:	4b05      	ldr	r3, [pc, #20]	; (3df4 <spi_m_sync_transfer+0x60>)
    3de0:	4798      	blx	r3
    3de2:	4603      	mov	r3, r0
}
    3de4:	4618      	mov	r0, r3
    3de6:	3718      	adds	r7, #24
    3de8:	46bd      	mov	sp, r7
    3dea:	bd80      	pop	{r7, pc}
    3dec:	0001ac68 	.word	0x0001ac68
    3df0:	00004c81 	.word	0x00004c81
    3df4:	00008ccd 	.word	0x00008ccd

00003df8 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    3df8:	b580      	push	{r7, lr}
    3dfa:	b082      	sub	sp, #8
    3dfc:	af00      	add	r7, sp, #0
    3dfe:	6078      	str	r0, [r7, #4]
    3e00:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    3e02:	687b      	ldr	r3, [r7, #4]
    3e04:	2b00      	cmp	r3, #0
    3e06:	d004      	beq.n	3e12 <spi_m_sync_get_io_descriptor+0x1a>
    3e08:	683b      	ldr	r3, [r7, #0]
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d001      	beq.n	3e12 <spi_m_sync_get_io_descriptor+0x1a>
    3e0e:	2301      	movs	r3, #1
    3e10:	e000      	b.n	3e14 <spi_m_sync_get_io_descriptor+0x1c>
    3e12:	2300      	movs	r3, #0
    3e14:	f003 0301 	and.w	r3, r3, #1
    3e18:	b2db      	uxtb	r3, r3
    3e1a:	22bd      	movs	r2, #189	; 0xbd
    3e1c:	4906      	ldr	r1, [pc, #24]	; (3e38 <spi_m_sync_get_io_descriptor+0x40>)
    3e1e:	4618      	mov	r0, r3
    3e20:	4b06      	ldr	r3, [pc, #24]	; (3e3c <spi_m_sync_get_io_descriptor+0x44>)
    3e22:	4798      	blx	r3
	*io = &spi->io;
    3e24:	687b      	ldr	r3, [r7, #4]
    3e26:	f103 020c 	add.w	r2, r3, #12
    3e2a:	683b      	ldr	r3, [r7, #0]
    3e2c:	601a      	str	r2, [r3, #0]
	return 0;
    3e2e:	2300      	movs	r3, #0
}
    3e30:	4618      	mov	r0, r3
    3e32:	3708      	adds	r7, #8
    3e34:	46bd      	mov	sp, r7
    3e36:	bd80      	pop	{r7, pc}
    3e38:	0001ac68 	.word	0x0001ac68
    3e3c:	00004c81 	.word	0x00004c81

00003e40 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    3e40:	b480      	push	{r7}
    3e42:	b083      	sub	sp, #12
    3e44:	af00      	add	r7, sp, #0
    3e46:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    3e48:	687b      	ldr	r3, [r7, #4]
    3e4a:	681b      	ldr	r3, [r3, #0]
}
    3e4c:	4618      	mov	r0, r3
    3e4e:	370c      	adds	r7, #12
    3e50:	46bd      	mov	sp, r7
    3e52:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e56:	4770      	bx	lr

00003e58 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    3e58:	b480      	push	{r7}
    3e5a:	b083      	sub	sp, #12
    3e5c:	af00      	add	r7, sp, #0
    3e5e:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    3e60:	687b      	ldr	r3, [r7, #4]
    3e62:	2b00      	cmp	r3, #0
    3e64:	d002      	beq.n	3e6c <list_get_next_element+0x14>
    3e66:	687b      	ldr	r3, [r7, #4]
    3e68:	681b      	ldr	r3, [r3, #0]
    3e6a:	e000      	b.n	3e6e <list_get_next_element+0x16>
    3e6c:	2300      	movs	r3, #0
}
    3e6e:	4618      	mov	r0, r3
    3e70:	370c      	adds	r7, #12
    3e72:	46bd      	mov	sp, r7
    3e74:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e78:	4770      	bx	lr
	...

00003e7c <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    3e7c:	b580      	push	{r7, lr}
    3e7e:	b084      	sub	sp, #16
    3e80:	af00      	add	r7, sp, #0
    3e82:	60f8      	str	r0, [r7, #12]
    3e84:	60b9      	str	r1, [r7, #8]
    3e86:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    3e88:	68fb      	ldr	r3, [r7, #12]
    3e8a:	2b00      	cmp	r3, #0
    3e8c:	d007      	beq.n	3e9e <timer_init+0x22>
    3e8e:	68bb      	ldr	r3, [r7, #8]
    3e90:	2b00      	cmp	r3, #0
    3e92:	d004      	beq.n	3e9e <timer_init+0x22>
    3e94:	687b      	ldr	r3, [r7, #4]
    3e96:	2b00      	cmp	r3, #0
    3e98:	d001      	beq.n	3e9e <timer_init+0x22>
    3e9a:	2301      	movs	r3, #1
    3e9c:	e000      	b.n	3ea0 <timer_init+0x24>
    3e9e:	2300      	movs	r3, #0
    3ea0:	f003 0301 	and.w	r3, r3, #1
    3ea4:	b2db      	uxtb	r3, r3
    3ea6:	223b      	movs	r2, #59	; 0x3b
    3ea8:	490c      	ldr	r1, [pc, #48]	; (3edc <timer_init+0x60>)
    3eaa:	4618      	mov	r0, r3
    3eac:	4b0c      	ldr	r3, [pc, #48]	; (3ee0 <timer_init+0x64>)
    3eae:	4798      	blx	r3
	descr->func = func;
    3eb0:	68fb      	ldr	r3, [r7, #12]
    3eb2:	687a      	ldr	r2, [r7, #4]
    3eb4:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    3eb6:	68fb      	ldr	r3, [r7, #12]
    3eb8:	681b      	ldr	r3, [r3, #0]
    3eba:	681b      	ldr	r3, [r3, #0]
    3ebc:	68fa      	ldr	r2, [r7, #12]
    3ebe:	3204      	adds	r2, #4
    3ec0:	68b9      	ldr	r1, [r7, #8]
    3ec2:	4610      	mov	r0, r2
    3ec4:	4798      	blx	r3
	descr->time                           = 0;
    3ec6:	68fb      	ldr	r3, [r7, #12]
    3ec8:	2200      	movs	r2, #0
    3eca:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    3ecc:	68fb      	ldr	r3, [r7, #12]
    3ece:	4a05      	ldr	r2, [pc, #20]	; (3ee4 <timer_init+0x68>)
    3ed0:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    3ed2:	2300      	movs	r3, #0
}
    3ed4:	4618      	mov	r0, r3
    3ed6:	3710      	adds	r7, #16
    3ed8:	46bd      	mov	sp, r7
    3eda:	bd80      	pop	{r7, pc}
    3edc:	0001ac84 	.word	0x0001ac84
    3ee0:	00004c81 	.word	0x00004c81
    3ee4:	0000426d 	.word	0x0000426d

00003ee8 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    3ee8:	b580      	push	{r7, lr}
    3eea:	b082      	sub	sp, #8
    3eec:	af00      	add	r7, sp, #0
    3eee:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3ef0:	687b      	ldr	r3, [r7, #4]
    3ef2:	2b00      	cmp	r3, #0
    3ef4:	d005      	beq.n	3f02 <timer_start+0x1a>
    3ef6:	687b      	ldr	r3, [r7, #4]
    3ef8:	681b      	ldr	r3, [r3, #0]
    3efa:	2b00      	cmp	r3, #0
    3efc:	d001      	beq.n	3f02 <timer_start+0x1a>
    3efe:	2301      	movs	r3, #1
    3f00:	e000      	b.n	3f04 <timer_start+0x1c>
    3f02:	2300      	movs	r3, #0
    3f04:	f003 0301 	and.w	r3, r3, #1
    3f08:	b2db      	uxtb	r3, r3
    3f0a:	2254      	movs	r2, #84	; 0x54
    3f0c:	490e      	ldr	r1, [pc, #56]	; (3f48 <timer_start+0x60>)
    3f0e:	4618      	mov	r0, r3
    3f10:	4b0e      	ldr	r3, [pc, #56]	; (3f4c <timer_start+0x64>)
    3f12:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    3f14:	687b      	ldr	r3, [r7, #4]
    3f16:	681b      	ldr	r3, [r3, #0]
    3f18:	699b      	ldr	r3, [r3, #24]
    3f1a:	687a      	ldr	r2, [r7, #4]
    3f1c:	3204      	adds	r2, #4
    3f1e:	4610      	mov	r0, r2
    3f20:	4798      	blx	r3
    3f22:	4603      	mov	r3, r0
    3f24:	2b00      	cmp	r3, #0
    3f26:	d002      	beq.n	3f2e <timer_start+0x46>
		return ERR_DENIED;
    3f28:	f06f 0310 	mvn.w	r3, #16
    3f2c:	e007      	b.n	3f3e <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    3f2e:	687b      	ldr	r3, [r7, #4]
    3f30:	681b      	ldr	r3, [r3, #0]
    3f32:	689b      	ldr	r3, [r3, #8]
    3f34:	687a      	ldr	r2, [r7, #4]
    3f36:	3204      	adds	r2, #4
    3f38:	4610      	mov	r0, r2
    3f3a:	4798      	blx	r3

	return ERR_NONE;
    3f3c:	2300      	movs	r3, #0
}
    3f3e:	4618      	mov	r0, r3
    3f40:	3708      	adds	r7, #8
    3f42:	46bd      	mov	sp, r7
    3f44:	bd80      	pop	{r7, pc}
    3f46:	bf00      	nop
    3f48:	0001ac84 	.word	0x0001ac84
    3f4c:	00004c81 	.word	0x00004c81

00003f50 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    3f50:	b580      	push	{r7, lr}
    3f52:	b082      	sub	sp, #8
    3f54:	af00      	add	r7, sp, #0
    3f56:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3f58:	687b      	ldr	r3, [r7, #4]
    3f5a:	2b00      	cmp	r3, #0
    3f5c:	d005      	beq.n	3f6a <timer_stop+0x1a>
    3f5e:	687b      	ldr	r3, [r7, #4]
    3f60:	681b      	ldr	r3, [r3, #0]
    3f62:	2b00      	cmp	r3, #0
    3f64:	d001      	beq.n	3f6a <timer_stop+0x1a>
    3f66:	2301      	movs	r3, #1
    3f68:	e000      	b.n	3f6c <timer_stop+0x1c>
    3f6a:	2300      	movs	r3, #0
    3f6c:	f003 0301 	and.w	r3, r3, #1
    3f70:	b2db      	uxtb	r3, r3
    3f72:	2262      	movs	r2, #98	; 0x62
    3f74:	490f      	ldr	r1, [pc, #60]	; (3fb4 <timer_stop+0x64>)
    3f76:	4618      	mov	r0, r3
    3f78:	4b0f      	ldr	r3, [pc, #60]	; (3fb8 <timer_stop+0x68>)
    3f7a:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    3f7c:	687b      	ldr	r3, [r7, #4]
    3f7e:	681b      	ldr	r3, [r3, #0]
    3f80:	699b      	ldr	r3, [r3, #24]
    3f82:	687a      	ldr	r2, [r7, #4]
    3f84:	3204      	adds	r2, #4
    3f86:	4610      	mov	r0, r2
    3f88:	4798      	blx	r3
    3f8a:	4603      	mov	r3, r0
    3f8c:	f083 0301 	eor.w	r3, r3, #1
    3f90:	b2db      	uxtb	r3, r3
    3f92:	2b00      	cmp	r3, #0
    3f94:	d002      	beq.n	3f9c <timer_stop+0x4c>
		return ERR_DENIED;
    3f96:	f06f 0310 	mvn.w	r3, #16
    3f9a:	e007      	b.n	3fac <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    3f9c:	687b      	ldr	r3, [r7, #4]
    3f9e:	681b      	ldr	r3, [r3, #0]
    3fa0:	68db      	ldr	r3, [r3, #12]
    3fa2:	687a      	ldr	r2, [r7, #4]
    3fa4:	3204      	adds	r2, #4
    3fa6:	4610      	mov	r0, r2
    3fa8:	4798      	blx	r3

	return ERR_NONE;
    3faa:	2300      	movs	r3, #0
}
    3fac:	4618      	mov	r0, r3
    3fae:	3708      	adds	r7, #8
    3fb0:	46bd      	mov	sp, r7
    3fb2:	bd80      	pop	{r7, pc}
    3fb4:	0001ac84 	.word	0x0001ac84
    3fb8:	00004c81 	.word	0x00004c81

00003fbc <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    3fbc:	b580      	push	{r7, lr}
    3fbe:	b084      	sub	sp, #16
    3fc0:	af00      	add	r7, sp, #0
    3fc2:	6078      	str	r0, [r7, #4]
    3fc4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    3fc6:	687b      	ldr	r3, [r7, #4]
    3fc8:	2b00      	cmp	r3, #0
    3fca:	d008      	beq.n	3fde <timer_add_task+0x22>
    3fcc:	683b      	ldr	r3, [r7, #0]
    3fce:	2b00      	cmp	r3, #0
    3fd0:	d005      	beq.n	3fde <timer_add_task+0x22>
    3fd2:	687b      	ldr	r3, [r7, #4]
    3fd4:	681b      	ldr	r3, [r3, #0]
    3fd6:	2b00      	cmp	r3, #0
    3fd8:	d001      	beq.n	3fde <timer_add_task+0x22>
    3fda:	2301      	movs	r3, #1
    3fdc:	e000      	b.n	3fe0 <timer_add_task+0x24>
    3fde:	2300      	movs	r3, #0
    3fe0:	f003 0301 	and.w	r3, r3, #1
    3fe4:	b2db      	uxtb	r3, r3
    3fe6:	227b      	movs	r2, #123	; 0x7b
    3fe8:	492f      	ldr	r1, [pc, #188]	; (40a8 <timer_add_task+0xec>)
    3fea:	4618      	mov	r0, r3
    3fec:	4b2f      	ldr	r3, [pc, #188]	; (40ac <timer_add_task+0xf0>)
    3fee:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3ff0:	687b      	ldr	r3, [r7, #4]
    3ff2:	7f1b      	ldrb	r3, [r3, #28]
    3ff4:	b2db      	uxtb	r3, r3
    3ff6:	f043 0301 	orr.w	r3, r3, #1
    3ffa:	b2da      	uxtb	r2, r3
    3ffc:	687b      	ldr	r3, [r7, #4]
    3ffe:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    4000:	687b      	ldr	r3, [r7, #4]
    4002:	3318      	adds	r3, #24
    4004:	6839      	ldr	r1, [r7, #0]
    4006:	4618      	mov	r0, r3
    4008:	4b29      	ldr	r3, [pc, #164]	; (40b0 <timer_add_task+0xf4>)
    400a:	4798      	blx	r3
    400c:	4603      	mov	r3, r0
    400e:	2b00      	cmp	r3, #0
    4010:	d00f      	beq.n	4032 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4012:	687b      	ldr	r3, [r7, #4]
    4014:	7f1b      	ldrb	r3, [r3, #28]
    4016:	b2db      	uxtb	r3, r3
    4018:	f023 0301 	bic.w	r3, r3, #1
    401c:	b2da      	uxtb	r2, r3
    401e:	687b      	ldr	r3, [r7, #4]
    4020:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    4022:	2280      	movs	r2, #128	; 0x80
    4024:	4920      	ldr	r1, [pc, #128]	; (40a8 <timer_add_task+0xec>)
    4026:	2000      	movs	r0, #0
    4028:	4b20      	ldr	r3, [pc, #128]	; (40ac <timer_add_task+0xf0>)
    402a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    402c:	f06f 0311 	mvn.w	r3, #17
    4030:	e035      	b.n	409e <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    4032:	687b      	ldr	r3, [r7, #4]
    4034:	695a      	ldr	r2, [r3, #20]
    4036:	683b      	ldr	r3, [r7, #0]
    4038:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    403a:	687b      	ldr	r3, [r7, #4]
    403c:	f103 0018 	add.w	r0, r3, #24
    4040:	687b      	ldr	r3, [r7, #4]
    4042:	695b      	ldr	r3, [r3, #20]
    4044:	461a      	mov	r2, r3
    4046:	6839      	ldr	r1, [r7, #0]
    4048:	4b1a      	ldr	r3, [pc, #104]	; (40b4 <timer_add_task+0xf8>)
    404a:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    404c:	687b      	ldr	r3, [r7, #4]
    404e:	7f1b      	ldrb	r3, [r3, #28]
    4050:	b2db      	uxtb	r3, r3
    4052:	f023 0301 	bic.w	r3, r3, #1
    4056:	b2da      	uxtb	r2, r3
    4058:	687b      	ldr	r3, [r7, #4]
    405a:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    405c:	687b      	ldr	r3, [r7, #4]
    405e:	7f1b      	ldrb	r3, [r3, #28]
    4060:	b2db      	uxtb	r3, r3
    4062:	f003 0302 	and.w	r3, r3, #2
    4066:	2b00      	cmp	r3, #0
    4068:	d018      	beq.n	409c <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    406a:	f107 030c 	add.w	r3, r7, #12
    406e:	4618      	mov	r0, r3
    4070:	4b11      	ldr	r3, [pc, #68]	; (40b8 <timer_add_task+0xfc>)
    4072:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4074:	687b      	ldr	r3, [r7, #4]
    4076:	7f1b      	ldrb	r3, [r3, #28]
    4078:	b2db      	uxtb	r3, r3
    407a:	f023 0302 	bic.w	r3, r3, #2
    407e:	b2da      	uxtb	r2, r3
    4080:	687b      	ldr	r3, [r7, #4]
    4082:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    4084:	687b      	ldr	r3, [r7, #4]
    4086:	681b      	ldr	r3, [r3, #0]
    4088:	69db      	ldr	r3, [r3, #28]
    408a:	687a      	ldr	r2, [r7, #4]
    408c:	3204      	adds	r2, #4
    408e:	4610      	mov	r0, r2
    4090:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    4092:	f107 030c 	add.w	r3, r7, #12
    4096:	4618      	mov	r0, r3
    4098:	4b08      	ldr	r3, [pc, #32]	; (40bc <timer_add_task+0x100>)
    409a:	4798      	blx	r3
	}

	return ERR_NONE;
    409c:	2300      	movs	r3, #0
}
    409e:	4618      	mov	r0, r3
    40a0:	3710      	adds	r7, #16
    40a2:	46bd      	mov	sp, r7
    40a4:	bd80      	pop	{r7, pc}
    40a6:	bf00      	nop
    40a8:	0001ac84 	.word	0x0001ac84
    40ac:	00004c81 	.word	0x00004c81
    40b0:	00004ca9 	.word	0x00004ca9
    40b4:	000041bd 	.word	0x000041bd
    40b8:	0000d0a9 	.word	0x0000d0a9
    40bc:	0000d0cf 	.word	0x0000d0cf

000040c0 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    40c0:	b580      	push	{r7, lr}
    40c2:	b084      	sub	sp, #16
    40c4:	af00      	add	r7, sp, #0
    40c6:	6078      	str	r0, [r7, #4]
    40c8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    40ca:	687b      	ldr	r3, [r7, #4]
    40cc:	2b00      	cmp	r3, #0
    40ce:	d008      	beq.n	40e2 <timer_remove_task+0x22>
    40d0:	683b      	ldr	r3, [r7, #0]
    40d2:	2b00      	cmp	r3, #0
    40d4:	d005      	beq.n	40e2 <timer_remove_task+0x22>
    40d6:	687b      	ldr	r3, [r7, #4]
    40d8:	681b      	ldr	r3, [r3, #0]
    40da:	2b00      	cmp	r3, #0
    40dc:	d001      	beq.n	40e2 <timer_remove_task+0x22>
    40de:	2301      	movs	r3, #1
    40e0:	e000      	b.n	40e4 <timer_remove_task+0x24>
    40e2:	2300      	movs	r3, #0
    40e4:	f003 0301 	and.w	r3, r3, #1
    40e8:	b2db      	uxtb	r3, r3
    40ea:	2296      	movs	r2, #150	; 0x96
    40ec:	492d      	ldr	r1, [pc, #180]	; (41a4 <timer_remove_task+0xe4>)
    40ee:	4618      	mov	r0, r3
    40f0:	4b2d      	ldr	r3, [pc, #180]	; (41a8 <timer_remove_task+0xe8>)
    40f2:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	7f1b      	ldrb	r3, [r3, #28]
    40f8:	b2db      	uxtb	r3, r3
    40fa:	f043 0301 	orr.w	r3, r3, #1
    40fe:	b2da      	uxtb	r2, r3
    4100:	687b      	ldr	r3, [r7, #4]
    4102:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    4104:	687b      	ldr	r3, [r7, #4]
    4106:	3318      	adds	r3, #24
    4108:	6839      	ldr	r1, [r7, #0]
    410a:	4618      	mov	r0, r3
    410c:	4b27      	ldr	r3, [pc, #156]	; (41ac <timer_remove_task+0xec>)
    410e:	4798      	blx	r3
    4110:	4603      	mov	r3, r0
    4112:	f083 0301 	eor.w	r3, r3, #1
    4116:	b2db      	uxtb	r3, r3
    4118:	2b00      	cmp	r3, #0
    411a:	d00f      	beq.n	413c <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    411c:	687b      	ldr	r3, [r7, #4]
    411e:	7f1b      	ldrb	r3, [r3, #28]
    4120:	b2db      	uxtb	r3, r3
    4122:	f023 0301 	bic.w	r3, r3, #1
    4126:	b2da      	uxtb	r2, r3
    4128:	687b      	ldr	r3, [r7, #4]
    412a:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    412c:	229b      	movs	r2, #155	; 0x9b
    412e:	491d      	ldr	r1, [pc, #116]	; (41a4 <timer_remove_task+0xe4>)
    4130:	2000      	movs	r0, #0
    4132:	4b1d      	ldr	r3, [pc, #116]	; (41a8 <timer_remove_task+0xe8>)
    4134:	4798      	blx	r3
		return ERR_NOT_FOUND;
    4136:	f06f 0309 	mvn.w	r3, #9
    413a:	e02e      	b.n	419a <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    413c:	687b      	ldr	r3, [r7, #4]
    413e:	3318      	adds	r3, #24
    4140:	6839      	ldr	r1, [r7, #0]
    4142:	4618      	mov	r0, r3
    4144:	4b1a      	ldr	r3, [pc, #104]	; (41b0 <timer_remove_task+0xf0>)
    4146:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4148:	687b      	ldr	r3, [r7, #4]
    414a:	7f1b      	ldrb	r3, [r3, #28]
    414c:	b2db      	uxtb	r3, r3
    414e:	f023 0301 	bic.w	r3, r3, #1
    4152:	b2da      	uxtb	r2, r3
    4154:	687b      	ldr	r3, [r7, #4]
    4156:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    4158:	687b      	ldr	r3, [r7, #4]
    415a:	7f1b      	ldrb	r3, [r3, #28]
    415c:	b2db      	uxtb	r3, r3
    415e:	f003 0302 	and.w	r3, r3, #2
    4162:	2b00      	cmp	r3, #0
    4164:	d018      	beq.n	4198 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    4166:	f107 030c 	add.w	r3, r7, #12
    416a:	4618      	mov	r0, r3
    416c:	4b11      	ldr	r3, [pc, #68]	; (41b4 <timer_remove_task+0xf4>)
    416e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    4170:	687b      	ldr	r3, [r7, #4]
    4172:	7f1b      	ldrb	r3, [r3, #28]
    4174:	b2db      	uxtb	r3, r3
    4176:	f023 0302 	bic.w	r3, r3, #2
    417a:	b2da      	uxtb	r2, r3
    417c:	687b      	ldr	r3, [r7, #4]
    417e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	681b      	ldr	r3, [r3, #0]
    4184:	69db      	ldr	r3, [r3, #28]
    4186:	687a      	ldr	r2, [r7, #4]
    4188:	3204      	adds	r2, #4
    418a:	4610      	mov	r0, r2
    418c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    418e:	f107 030c 	add.w	r3, r7, #12
    4192:	4618      	mov	r0, r3
    4194:	4b08      	ldr	r3, [pc, #32]	; (41b8 <timer_remove_task+0xf8>)
    4196:	4798      	blx	r3
	}

	return ERR_NONE;
    4198:	2300      	movs	r3, #0
}
    419a:	4618      	mov	r0, r3
    419c:	3710      	adds	r7, #16
    419e:	46bd      	mov	sp, r7
    41a0:	bd80      	pop	{r7, pc}
    41a2:	bf00      	nop
    41a4:	0001ac84 	.word	0x0001ac84
    41a8:	00004c81 	.word	0x00004c81
    41ac:	00004ca9 	.word	0x00004ca9
    41b0:	00004e0b 	.word	0x00004e0b
    41b4:	0000d0a9 	.word	0x0000d0a9
    41b8:	0000d0cf 	.word	0x0000d0cf

000041bc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    41bc:	b580      	push	{r7, lr}
    41be:	b088      	sub	sp, #32
    41c0:	af00      	add	r7, sp, #0
    41c2:	60f8      	str	r0, [r7, #12]
    41c4:	60b9      	str	r1, [r7, #8]
    41c6:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    41c8:	2300      	movs	r3, #0
    41ca:	61bb      	str	r3, [r7, #24]
    41cc:	68f8      	ldr	r0, [r7, #12]
    41ce:	4b23      	ldr	r3, [pc, #140]	; (425c <timer_add_timer_task+0xa0>)
    41d0:	4798      	blx	r3
    41d2:	6138      	str	r0, [r7, #16]

	if (!head) {
    41d4:	693b      	ldr	r3, [r7, #16]
    41d6:	2b00      	cmp	r3, #0
    41d8:	d104      	bne.n	41e4 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    41da:	68b9      	ldr	r1, [r7, #8]
    41dc:	68f8      	ldr	r0, [r7, #12]
    41de:	4b20      	ldr	r3, [pc, #128]	; (4260 <timer_add_timer_task+0xa4>)
    41e0:	4798      	blx	r3
		return;
    41e2:	e037      	b.n	4254 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    41e4:	693b      	ldr	r3, [r7, #16]
    41e6:	61fb      	str	r3, [r7, #28]
    41e8:	e022      	b.n	4230 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    41ea:	69fb      	ldr	r3, [r7, #28]
    41ec:	685a      	ldr	r2, [r3, #4]
    41ee:	687b      	ldr	r3, [r7, #4]
    41f0:	429a      	cmp	r2, r3
    41f2:	d808      	bhi.n	4206 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    41f4:	69fb      	ldr	r3, [r7, #28]
    41f6:	689a      	ldr	r2, [r3, #8]
    41f8:	69fb      	ldr	r3, [r7, #28]
    41fa:	6859      	ldr	r1, [r3, #4]
    41fc:	687b      	ldr	r3, [r7, #4]
    41fe:	1acb      	subs	r3, r1, r3
    4200:	4413      	add	r3, r2
    4202:	617b      	str	r3, [r7, #20]
    4204:	e009      	b.n	421a <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4206:	69fb      	ldr	r3, [r7, #28]
    4208:	689a      	ldr	r2, [r3, #8]
    420a:	69fb      	ldr	r3, [r7, #28]
    420c:	685b      	ldr	r3, [r3, #4]
    420e:	441a      	add	r2, r3
    4210:	687b      	ldr	r3, [r7, #4]
    4212:	425b      	negs	r3, r3
    4214:	4413      	add	r3, r2
    4216:	3301      	adds	r3, #1
    4218:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    421a:	68bb      	ldr	r3, [r7, #8]
    421c:	689a      	ldr	r2, [r3, #8]
    421e:	697b      	ldr	r3, [r7, #20]
    4220:	429a      	cmp	r2, r3
    4222:	d909      	bls.n	4238 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    4224:	69fb      	ldr	r3, [r7, #28]
    4226:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4228:	69f8      	ldr	r0, [r7, #28]
    422a:	4b0e      	ldr	r3, [pc, #56]	; (4264 <timer_add_timer_task+0xa8>)
    422c:	4798      	blx	r3
    422e:	61f8      	str	r0, [r7, #28]
    4230:	69fb      	ldr	r3, [r7, #28]
    4232:	2b00      	cmp	r3, #0
    4234:	d1d9      	bne.n	41ea <timer_add_timer_task+0x2e>
    4236:	e000      	b.n	423a <timer_add_timer_task+0x7e>
			break;
    4238:	bf00      	nop
	}

	if (it == head) {
    423a:	69fa      	ldr	r2, [r7, #28]
    423c:	693b      	ldr	r3, [r7, #16]
    423e:	429a      	cmp	r2, r3
    4240:	d104      	bne.n	424c <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    4242:	68b9      	ldr	r1, [r7, #8]
    4244:	68f8      	ldr	r0, [r7, #12]
    4246:	4b06      	ldr	r3, [pc, #24]	; (4260 <timer_add_timer_task+0xa4>)
    4248:	4798      	blx	r3
    424a:	e003      	b.n	4254 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    424c:	68b9      	ldr	r1, [r7, #8]
    424e:	69b8      	ldr	r0, [r7, #24]
    4250:	4b05      	ldr	r3, [pc, #20]	; (4268 <timer_add_timer_task+0xac>)
    4252:	4798      	blx	r3
	}
}
    4254:	3720      	adds	r7, #32
    4256:	46bd      	mov	sp, r7
    4258:	bd80      	pop	{r7, pc}
    425a:	bf00      	nop
    425c:	00003e41 	.word	0x00003e41
    4260:	00004ce1 	.word	0x00004ce1
    4264:	00003e59 	.word	0x00003e59
    4268:	00004d39 	.word	0x00004d39

0000426c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    426c:	b580      	push	{r7, lr}
    426e:	b086      	sub	sp, #24
    4270:	af00      	add	r7, sp, #0
    4272:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    4274:	687b      	ldr	r3, [r7, #4]
    4276:	3b04      	subs	r3, #4
    4278:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    427a:	693b      	ldr	r3, [r7, #16]
    427c:	3318      	adds	r3, #24
    427e:	4618      	mov	r0, r3
    4280:	4b27      	ldr	r3, [pc, #156]	; (4320 <timer_process_counted+0xb4>)
    4282:	4798      	blx	r3
    4284:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    4286:	693b      	ldr	r3, [r7, #16]
    4288:	695b      	ldr	r3, [r3, #20]
    428a:	1c5a      	adds	r2, r3, #1
    428c:	693b      	ldr	r3, [r7, #16]
    428e:	615a      	str	r2, [r3, #20]
    4290:	693b      	ldr	r3, [r7, #16]
    4292:	695b      	ldr	r3, [r3, #20]
    4294:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    4296:	693b      	ldr	r3, [r7, #16]
    4298:	7f1b      	ldrb	r3, [r3, #28]
    429a:	b2db      	uxtb	r3, r3
    429c:	f003 0301 	and.w	r3, r3, #1
    42a0:	2b00      	cmp	r3, #0
    42a2:	d106      	bne.n	42b2 <timer_process_counted+0x46>
    42a4:	693b      	ldr	r3, [r7, #16]
    42a6:	7f1b      	ldrb	r3, [r3, #28]
    42a8:	b2db      	uxtb	r3, r3
    42aa:	f003 0302 	and.w	r3, r3, #2
    42ae:	2b00      	cmp	r3, #0
    42b0:	d027      	beq.n	4302 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    42b2:	693b      	ldr	r3, [r7, #16]
    42b4:	7f1b      	ldrb	r3, [r3, #28]
    42b6:	b2db      	uxtb	r3, r3
    42b8:	f043 0302 	orr.w	r3, r3, #2
    42bc:	b2da      	uxtb	r2, r3
    42be:	693b      	ldr	r3, [r7, #16]
    42c0:	771a      	strb	r2, [r3, #28]
		return;
    42c2:	e029      	b.n	4318 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    42c4:	697b      	ldr	r3, [r7, #20]
    42c6:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    42c8:	693b      	ldr	r3, [r7, #16]
    42ca:	3318      	adds	r3, #24
    42cc:	4618      	mov	r0, r3
    42ce:	4b15      	ldr	r3, [pc, #84]	; (4324 <timer_process_counted+0xb8>)
    42d0:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    42d2:	68bb      	ldr	r3, [r7, #8]
    42d4:	7c1b      	ldrb	r3, [r3, #16]
    42d6:	2b01      	cmp	r3, #1
    42d8:	d109      	bne.n	42ee <timer_process_counted+0x82>
			tmp->time_label = time;
    42da:	68bb      	ldr	r3, [r7, #8]
    42dc:	68fa      	ldr	r2, [r7, #12]
    42de:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    42e0:	693b      	ldr	r3, [r7, #16]
    42e2:	3318      	adds	r3, #24
    42e4:	68fa      	ldr	r2, [r7, #12]
    42e6:	68b9      	ldr	r1, [r7, #8]
    42e8:	4618      	mov	r0, r3
    42ea:	4b0f      	ldr	r3, [pc, #60]	; (4328 <timer_process_counted+0xbc>)
    42ec:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    42ee:	693b      	ldr	r3, [r7, #16]
    42f0:	3318      	adds	r3, #24
    42f2:	4618      	mov	r0, r3
    42f4:	4b0a      	ldr	r3, [pc, #40]	; (4320 <timer_process_counted+0xb4>)
    42f6:	4798      	blx	r3
    42f8:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    42fa:	68bb      	ldr	r3, [r7, #8]
    42fc:	68db      	ldr	r3, [r3, #12]
    42fe:	68b8      	ldr	r0, [r7, #8]
    4300:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    4302:	697b      	ldr	r3, [r7, #20]
    4304:	2b00      	cmp	r3, #0
    4306:	d007      	beq.n	4318 <timer_process_counted+0xac>
    4308:	697b      	ldr	r3, [r7, #20]
    430a:	685b      	ldr	r3, [r3, #4]
    430c:	68fa      	ldr	r2, [r7, #12]
    430e:	1ad2      	subs	r2, r2, r3
    4310:	697b      	ldr	r3, [r7, #20]
    4312:	689b      	ldr	r3, [r3, #8]
    4314:	429a      	cmp	r2, r3
    4316:	d2d5      	bcs.n	42c4 <timer_process_counted+0x58>
	}
}
    4318:	3718      	adds	r7, #24
    431a:	46bd      	mov	sp, r7
    431c:	bd80      	pop	{r7, pc}
    431e:	bf00      	nop
    4320:	00003e41 	.word	0x00003e41
    4324:	00004dd9 	.word	0x00004dd9
    4328:	000041bd 	.word	0x000041bd

0000432c <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    432c:	b480      	push	{r7}
    432e:	b085      	sub	sp, #20
    4330:	af00      	add	r7, sp, #0
    4332:	4603      	mov	r3, r0
    4334:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4336:	2300      	movs	r3, #0
    4338:	73fb      	strb	r3, [r7, #15]
    433a:	e029      	b.n	4390 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    433c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4340:	4a19      	ldr	r2, [pc, #100]	; (43a8 <_usb_d_find_ep+0x7c>)
    4342:	015b      	lsls	r3, r3, #5
    4344:	4413      	add	r3, r2
    4346:	3301      	adds	r3, #1
    4348:	781b      	ldrb	r3, [r3, #0]
    434a:	79fa      	ldrb	r2, [r7, #7]
    434c:	429a      	cmp	r2, r3
    434e:	d102      	bne.n	4356 <_usb_d_find_ep+0x2a>
			return i;
    4350:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4354:	e022      	b.n	439c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    4356:	f997 300f 	ldrsb.w	r3, [r7, #15]
    435a:	4a13      	ldr	r2, [pc, #76]	; (43a8 <_usb_d_find_ep+0x7c>)
    435c:	015b      	lsls	r3, r3, #5
    435e:	4413      	add	r3, r2
    4360:	781b      	ldrb	r3, [r3, #0]
    4362:	2b00      	cmp	r3, #0
    4364:	d10e      	bne.n	4384 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    4366:	79fb      	ldrb	r3, [r7, #7]
    4368:	f003 030f 	and.w	r3, r3, #15
    436c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    4370:	490d      	ldr	r1, [pc, #52]	; (43a8 <_usb_d_find_ep+0x7c>)
    4372:	0152      	lsls	r2, r2, #5
    4374:	440a      	add	r2, r1
    4376:	3201      	adds	r2, #1
    4378:	7812      	ldrb	r2, [r2, #0]
    437a:	4293      	cmp	r3, r2
    437c:	d102      	bne.n	4384 <_usb_d_find_ep+0x58>
			return i;
    437e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4382:	e00b      	b.n	439c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4384:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4388:	b2db      	uxtb	r3, r3
    438a:	3301      	adds	r3, #1
    438c:	b2db      	uxtb	r3, r3
    438e:	73fb      	strb	r3, [r7, #15]
    4390:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4394:	2b03      	cmp	r3, #3
    4396:	ddd1      	ble.n	433c <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    4398:	f04f 33ff 	mov.w	r3, #4294967295
}
    439c:	4618      	mov	r0, r3
    439e:	3714      	adds	r7, #20
    43a0:	46bd      	mov	sp, r7
    43a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    43a6:	4770      	bx	lr
    43a8:	20002204 	.word	0x20002204

000043ac <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    43ac:	b580      	push	{r7, lr}
    43ae:	b088      	sub	sp, #32
    43b0:	af00      	add	r7, sp, #0
    43b2:	60ba      	str	r2, [r7, #8]
    43b4:	607b      	str	r3, [r7, #4]
    43b6:	4603      	mov	r3, r0
    43b8:	73fb      	strb	r3, [r7, #15]
    43ba:	460b      	mov	r3, r1
    43bc:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    43be:	68bb      	ldr	r3, [r7, #8]
    43c0:	617b      	str	r3, [r7, #20]
    43c2:	687b      	ldr	r3, [r7, #4]
    43c4:	61bb      	str	r3, [r7, #24]
    43c6:	7bbb      	ldrb	r3, [r7, #14]
    43c8:	2b00      	cmp	r3, #0
    43ca:	d004      	beq.n	43d6 <_usb_d_trans+0x2a>
    43cc:	7bfb      	ldrb	r3, [r7, #15]
    43ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
    43d2:	b2db      	uxtb	r3, r3
    43d4:	e003      	b.n	43de <_usb_d_trans+0x32>
    43d6:	7bfb      	ldrb	r3, [r7, #15]
    43d8:	f003 030f 	and.w	r3, r3, #15
    43dc:	b2db      	uxtb	r3, r3
    43de:	773b      	strb	r3, [r7, #28]
    43e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    43e4:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    43e6:	f107 0314 	add.w	r3, r7, #20
    43ea:	4618      	mov	r0, r3
    43ec:	4b03      	ldr	r3, [pc, #12]	; (43fc <_usb_d_trans+0x50>)
    43ee:	4798      	blx	r3
    43f0:	4603      	mov	r3, r0
}
    43f2:	4618      	mov	r0, r3
    43f4:	3720      	adds	r7, #32
    43f6:	46bd      	mov	sp, r7
    43f8:	bd80      	pop	{r7, pc}
    43fa:	bf00      	nop
    43fc:	0000c6dd 	.word	0x0000c6dd

00004400 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    4400:	b480      	push	{r7}
    4402:	b085      	sub	sp, #20
    4404:	af00      	add	r7, sp, #0
    4406:	60f8      	str	r0, [r7, #12]
    4408:	60b9      	str	r1, [r7, #8]
    440a:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    440c:	2300      	movs	r3, #0
}
    440e:	4618      	mov	r0, r3
    4410:	3714      	adds	r7, #20
    4412:	46bd      	mov	sp, r7
    4414:	f85d 7b04 	ldr.w	r7, [sp], #4
    4418:	4770      	bx	lr
	...

0000441c <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    441c:	b580      	push	{r7, lr}
    441e:	b086      	sub	sp, #24
    4420:	af00      	add	r7, sp, #0
    4422:	4603      	mov	r3, r0
    4424:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4426:	79fb      	ldrb	r3, [r7, #7]
    4428:	4618      	mov	r0, r3
    442a:	4b2a      	ldr	r3, [pc, #168]	; (44d4 <usb_d_cb_trans_setup+0xb8>)
    442c:	4798      	blx	r3
    442e:	4603      	mov	r3, r0
    4430:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4432:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4436:	015b      	lsls	r3, r3, #5
    4438:	4a27      	ldr	r2, [pc, #156]	; (44d8 <usb_d_cb_trans_setup+0xbc>)
    443a:	4413      	add	r3, r2
    443c:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    443e:	693b      	ldr	r3, [r7, #16]
    4440:	330c      	adds	r3, #12
    4442:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    4444:	79fb      	ldrb	r3, [r7, #7]
    4446:	68f9      	ldr	r1, [r7, #12]
    4448:	4618      	mov	r0, r3
    444a:	4b24      	ldr	r3, [pc, #144]	; (44dc <usb_d_cb_trans_setup+0xc0>)
    444c:	4798      	blx	r3
    444e:	4603      	mov	r3, r0
    4450:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    4452:	7afb      	ldrb	r3, [r7, #11]
    4454:	2b08      	cmp	r3, #8
    4456:	d00d      	beq.n	4474 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4458:	79fb      	ldrb	r3, [r7, #7]
    445a:	2101      	movs	r1, #1
    445c:	4618      	mov	r0, r3
    445e:	4b20      	ldr	r3, [pc, #128]	; (44e0 <usb_d_cb_trans_setup+0xc4>)
    4460:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4462:	79fb      	ldrb	r3, [r7, #7]
    4464:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4468:	b2db      	uxtb	r3, r3
    446a:	2101      	movs	r1, #1
    446c:	4618      	mov	r0, r3
    446e:	4b1c      	ldr	r3, [pc, #112]	; (44e0 <usb_d_cb_trans_setup+0xc4>)
    4470:	4798      	blx	r3
		return;
    4472:	e02b      	b.n	44cc <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4474:	79fb      	ldrb	r3, [r7, #7]
    4476:	2100      	movs	r1, #0
    4478:	4618      	mov	r0, r3
    447a:	4b19      	ldr	r3, [pc, #100]	; (44e0 <usb_d_cb_trans_setup+0xc4>)
    447c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    447e:	79fb      	ldrb	r3, [r7, #7]
    4480:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4484:	b2db      	uxtb	r3, r3
    4486:	2100      	movs	r1, #0
    4488:	4618      	mov	r0, r3
    448a:	4b15      	ldr	r3, [pc, #84]	; (44e0 <usb_d_cb_trans_setup+0xc4>)
    448c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    448e:	693b      	ldr	r3, [r7, #16]
    4490:	2201      	movs	r2, #1
    4492:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    4494:	693b      	ldr	r3, [r7, #16]
    4496:	695b      	ldr	r3, [r3, #20]
    4498:	79fa      	ldrb	r2, [r7, #7]
    449a:	68f9      	ldr	r1, [r7, #12]
    449c:	4610      	mov	r0, r2
    449e:	4798      	blx	r3
    44a0:	4603      	mov	r3, r0
    44a2:	f083 0301 	eor.w	r3, r3, #1
    44a6:	b2db      	uxtb	r3, r3
    44a8:	2b00      	cmp	r3, #0
    44aa:	d00f      	beq.n	44cc <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    44ac:	693b      	ldr	r3, [r7, #16]
    44ae:	2205      	movs	r2, #5
    44b0:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    44b2:	79fb      	ldrb	r3, [r7, #7]
    44b4:	2101      	movs	r1, #1
    44b6:	4618      	mov	r0, r3
    44b8:	4b09      	ldr	r3, [pc, #36]	; (44e0 <usb_d_cb_trans_setup+0xc4>)
    44ba:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    44bc:	79fb      	ldrb	r3, [r7, #7]
    44be:	f063 037f 	orn	r3, r3, #127	; 0x7f
    44c2:	b2db      	uxtb	r3, r3
    44c4:	2101      	movs	r1, #1
    44c6:	4618      	mov	r0, r3
    44c8:	4b05      	ldr	r3, [pc, #20]	; (44e0 <usb_d_cb_trans_setup+0xc4>)
    44ca:	4798      	blx	r3
	}
}
    44cc:	3718      	adds	r7, #24
    44ce:	46bd      	mov	sp, r7
    44d0:	bd80      	pop	{r7, pc}
    44d2:	bf00      	nop
    44d4:	0000432d 	.word	0x0000432d
    44d8:	20002204 	.word	0x20002204
    44dc:	0000c635 	.word	0x0000c635
    44e0:	0000c4ad 	.word	0x0000c4ad

000044e4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    44e4:	b580      	push	{r7, lr}
    44e6:	b084      	sub	sp, #16
    44e8:	af00      	add	r7, sp, #0
    44ea:	4603      	mov	r3, r0
    44ec:	6039      	str	r1, [r7, #0]
    44ee:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    44f0:	79fb      	ldrb	r3, [r7, #7]
    44f2:	4618      	mov	r0, r3
    44f4:	4b0d      	ldr	r3, [pc, #52]	; (452c <usb_d_cb_trans_more+0x48>)
    44f6:	4798      	blx	r3
    44f8:	4603      	mov	r3, r0
    44fa:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    44fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4500:	015b      	lsls	r3, r3, #5
    4502:	4a0b      	ldr	r2, [pc, #44]	; (4530 <usb_d_cb_trans_more+0x4c>)
    4504:	4413      	add	r3, r2
    4506:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    4508:	68bb      	ldr	r3, [r7, #8]
    450a:	789b      	ldrb	r3, [r3, #2]
    450c:	2b03      	cmp	r3, #3
    450e:	d107      	bne.n	4520 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    4510:	68bb      	ldr	r3, [r7, #8]
    4512:	699b      	ldr	r3, [r3, #24]
    4514:	79fa      	ldrb	r2, [r7, #7]
    4516:	6839      	ldr	r1, [r7, #0]
    4518:	4610      	mov	r0, r2
    451a:	4798      	blx	r3
    451c:	4603      	mov	r3, r0
    451e:	e000      	b.n	4522 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    4520:	2300      	movs	r3, #0
}
    4522:	4618      	mov	r0, r3
    4524:	3710      	adds	r7, #16
    4526:	46bd      	mov	sp, r7
    4528:	bd80      	pop	{r7, pc}
    452a:	bf00      	nop
    452c:	0000432d 	.word	0x0000432d
    4530:	20002204 	.word	0x20002204

00004534 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    4534:	b590      	push	{r4, r7, lr}
    4536:	b087      	sub	sp, #28
    4538:	af02      	add	r7, sp, #8
    453a:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    453c:	687b      	ldr	r3, [r7, #4]
    453e:	789b      	ldrb	r3, [r3, #2]
    4540:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    4542:	687b      	ldr	r3, [r7, #4]
    4544:	7b1b      	ldrb	r3, [r3, #12]
    4546:	f003 0380 	and.w	r3, r3, #128	; 0x80
    454a:	2b00      	cmp	r3, #0
    454c:	bf14      	ite	ne
    454e:	2301      	movne	r3, #1
    4550:	2300      	moveq	r3, #0
    4552:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    4554:	7bfb      	ldrb	r3, [r7, #15]
    4556:	2b03      	cmp	r3, #3
    4558:	d13a      	bne.n	45d0 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    455a:	687b      	ldr	r3, [r7, #4]
    455c:	69db      	ldr	r3, [r3, #28]
    455e:	687a      	ldr	r2, [r7, #4]
    4560:	7850      	ldrb	r0, [r2, #1]
    4562:	687a      	ldr	r2, [r7, #4]
    4564:	320c      	adds	r2, #12
    4566:	2101      	movs	r1, #1
    4568:	4798      	blx	r3
    456a:	4603      	mov	r3, r0
    456c:	737b      	strb	r3, [r7, #13]
		if (err) {
    456e:	7b7b      	ldrb	r3, [r7, #13]
    4570:	2b00      	cmp	r3, #0
    4572:	d015      	beq.n	45a0 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    4574:	687b      	ldr	r3, [r7, #4]
    4576:	2205      	movs	r2, #5
    4578:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    457a:	687b      	ldr	r3, [r7, #4]
    457c:	2202      	movs	r2, #2
    457e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    4580:	7bbb      	ldrb	r3, [r7, #14]
    4582:	2b00      	cmp	r3, #0
    4584:	d002      	beq.n	458c <usb_d_ctrl_trans_done+0x58>
    4586:	687b      	ldr	r3, [r7, #4]
    4588:	785b      	ldrb	r3, [r3, #1]
    458a:	e004      	b.n	4596 <usb_d_ctrl_trans_done+0x62>
    458c:	687b      	ldr	r3, [r7, #4]
    458e:	785b      	ldrb	r3, [r3, #1]
    4590:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4594:	b2db      	uxtb	r3, r3
    4596:	2101      	movs	r1, #1
    4598:	4618      	mov	r0, r3
    459a:	4b15      	ldr	r3, [pc, #84]	; (45f0 <usb_d_ctrl_trans_done+0xbc>)
    459c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    459e:	e022      	b.n	45e6 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    45a0:	687b      	ldr	r3, [r7, #4]
    45a2:	2204      	movs	r2, #4
    45a4:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    45a6:	687b      	ldr	r3, [r7, #4]
    45a8:	7858      	ldrb	r0, [r3, #1]
    45aa:	7bbb      	ldrb	r3, [r7, #14]
    45ac:	2b00      	cmp	r3, #0
    45ae:	bf14      	ite	ne
    45b0:	2301      	movne	r3, #1
    45b2:	2300      	moveq	r3, #0
    45b4:	b2db      	uxtb	r3, r3
    45b6:	f083 0301 	eor.w	r3, r3, #1
    45ba:	b2db      	uxtb	r3, r3
    45bc:	f003 0301 	and.w	r3, r3, #1
    45c0:	b2d9      	uxtb	r1, r3
    45c2:	2301      	movs	r3, #1
    45c4:	9300      	str	r3, [sp, #0]
    45c6:	2300      	movs	r3, #0
    45c8:	2200      	movs	r2, #0
    45ca:	4c0a      	ldr	r4, [pc, #40]	; (45f4 <usb_d_ctrl_trans_done+0xc0>)
    45cc:	47a0      	blx	r4
}
    45ce:	e00a      	b.n	45e6 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    45d0:	687b      	ldr	r3, [r7, #4]
    45d2:	69db      	ldr	r3, [r3, #28]
    45d4:	687a      	ldr	r2, [r7, #4]
    45d6:	7850      	ldrb	r0, [r2, #1]
    45d8:	687a      	ldr	r2, [r7, #4]
    45da:	320c      	adds	r2, #12
    45dc:	2100      	movs	r1, #0
    45de:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    45e0:	687b      	ldr	r3, [r7, #4]
    45e2:	2202      	movs	r2, #2
    45e4:	709a      	strb	r2, [r3, #2]
}
    45e6:	bf00      	nop
    45e8:	3714      	adds	r7, #20
    45ea:	46bd      	mov	sp, r7
    45ec:	bd90      	pop	{r4, r7, pc}
    45ee:	bf00      	nop
    45f0:	0000c4ad 	.word	0x0000c4ad
    45f4:	000043ad 	.word	0x000043ad

000045f8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    45f8:	b580      	push	{r7, lr}
    45fa:	b086      	sub	sp, #24
    45fc:	af00      	add	r7, sp, #0
    45fe:	4603      	mov	r3, r0
    4600:	60b9      	str	r1, [r7, #8]
    4602:	607a      	str	r2, [r7, #4]
    4604:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4606:	7bfb      	ldrb	r3, [r7, #15]
    4608:	4618      	mov	r0, r3
    460a:	4b2f      	ldr	r3, [pc, #188]	; (46c8 <_usb_d_cb_trans_done+0xd0>)
    460c:	4798      	blx	r3
    460e:	4603      	mov	r3, r0
    4610:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4612:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4616:	015b      	lsls	r3, r3, #5
    4618:	4a2c      	ldr	r2, [pc, #176]	; (46cc <_usb_d_cb_trans_done+0xd4>)
    461a:	4413      	add	r3, r2
    461c:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    461e:	68bb      	ldr	r3, [r7, #8]
    4620:	2b00      	cmp	r3, #0
    4622:	d10e      	bne.n	4642 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    4624:	693b      	ldr	r3, [r7, #16]
    4626:	2200      	movs	r2, #0
    4628:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    462a:	693b      	ldr	r3, [r7, #16]
    462c:	781b      	ldrb	r3, [r3, #0]
    462e:	2b00      	cmp	r3, #0
    4630:	d103      	bne.n	463a <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    4632:	6938      	ldr	r0, [r7, #16]
    4634:	4b26      	ldr	r3, [pc, #152]	; (46d0 <_usb_d_cb_trans_done+0xd8>)
    4636:	4798      	blx	r3
			return;
    4638:	e043      	b.n	46c2 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    463a:	693b      	ldr	r3, [r7, #16]
    463c:	2201      	movs	r2, #1
    463e:	709a      	strb	r2, [r3, #2]
    4640:	e038      	b.n	46b4 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    4642:	68bb      	ldr	r3, [r7, #8]
    4644:	2b01      	cmp	r3, #1
    4646:	d113      	bne.n	4670 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    4648:	693b      	ldr	r3, [r7, #16]
    464a:	2202      	movs	r2, #2
    464c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    464e:	693b      	ldr	r3, [r7, #16]
    4650:	781b      	ldrb	r3, [r3, #0]
    4652:	2b00      	cmp	r3, #0
    4654:	d108      	bne.n	4668 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4656:	693b      	ldr	r3, [r7, #16]
    4658:	2202      	movs	r2, #2
    465a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    465c:	7bfb      	ldrb	r3, [r7, #15]
    465e:	2100      	movs	r1, #0
    4660:	4618      	mov	r0, r3
    4662:	4b1c      	ldr	r3, [pc, #112]	; (46d4 <_usb_d_cb_trans_done+0xdc>)
    4664:	4798      	blx	r3
    4666:	e025      	b.n	46b4 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    4668:	693b      	ldr	r3, [r7, #16]
    466a:	2205      	movs	r2, #5
    466c:	709a      	strb	r2, [r3, #2]
    466e:	e021      	b.n	46b4 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    4670:	68bb      	ldr	r3, [r7, #8]
    4672:	2b02      	cmp	r3, #2
    4674:	d10e      	bne.n	4694 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    4676:	693b      	ldr	r3, [r7, #16]
    4678:	2204      	movs	r2, #4
    467a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    467c:	693b      	ldr	r3, [r7, #16]
    467e:	781b      	ldrb	r3, [r3, #0]
    4680:	2b00      	cmp	r3, #0
    4682:	d103      	bne.n	468c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    4684:	693b      	ldr	r3, [r7, #16]
    4686:	2202      	movs	r2, #2
    4688:	709a      	strb	r2, [r3, #2]
			return;
    468a:	e01a      	b.n	46c2 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    468c:	693b      	ldr	r3, [r7, #16]
    468e:	2201      	movs	r2, #1
    4690:	709a      	strb	r2, [r3, #2]
    4692:	e00f      	b.n	46b4 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    4694:	68bb      	ldr	r3, [r7, #8]
    4696:	2b03      	cmp	r3, #3
    4698:	d106      	bne.n	46a8 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    469a:	693b      	ldr	r3, [r7, #16]
    469c:	2200      	movs	r2, #0
    469e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    46a0:	693b      	ldr	r3, [r7, #16]
    46a2:	2205      	movs	r2, #5
    46a4:	70da      	strb	r2, [r3, #3]
    46a6:	e005      	b.n	46b4 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    46a8:	693b      	ldr	r3, [r7, #16]
    46aa:	2206      	movs	r2, #6
    46ac:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    46ae:	693b      	ldr	r3, [r7, #16]
    46b0:	2206      	movs	r2, #6
    46b2:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    46b4:	693b      	ldr	r3, [r7, #16]
    46b6:	69db      	ldr	r3, [r3, #28]
    46b8:	693a      	ldr	r2, [r7, #16]
    46ba:	78d1      	ldrb	r1, [r2, #3]
    46bc:	687a      	ldr	r2, [r7, #4]
    46be:	7bf8      	ldrb	r0, [r7, #15]
    46c0:	4798      	blx	r3
}
    46c2:	3718      	adds	r7, #24
    46c4:	46bd      	mov	sp, r7
    46c6:	bd80      	pop	{r7, pc}
    46c8:	0000432d 	.word	0x0000432d
    46cc:	20002204 	.word	0x20002204
    46d0:	00004535 	.word	0x00004535
    46d4:	0000c4ad 	.word	0x0000c4ad

000046d8 <usb_d_init>:

int32_t usb_d_init(void)
{
    46d8:	b580      	push	{r7, lr}
    46da:	b082      	sub	sp, #8
    46dc:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    46de:	4b21      	ldr	r3, [pc, #132]	; (4764 <usb_d_init+0x8c>)
    46e0:	4798      	blx	r3
    46e2:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    46e4:	683b      	ldr	r3, [r7, #0]
    46e6:	2b00      	cmp	r3, #0
    46e8:	da01      	bge.n	46ee <usb_d_init+0x16>
		return rc;
    46ea:	683b      	ldr	r3, [r7, #0]
    46ec:	e036      	b.n	475c <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    46ee:	2280      	movs	r2, #128	; 0x80
    46f0:	2100      	movs	r1, #0
    46f2:	481d      	ldr	r0, [pc, #116]	; (4768 <usb_d_init+0x90>)
    46f4:	4b1d      	ldr	r3, [pc, #116]	; (476c <usb_d_init+0x94>)
    46f6:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    46f8:	2300      	movs	r3, #0
    46fa:	71fb      	strb	r3, [r7, #7]
    46fc:	e01e      	b.n	473c <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    46fe:	79fb      	ldrb	r3, [r7, #7]
    4700:	4a19      	ldr	r2, [pc, #100]	; (4768 <usb_d_init+0x90>)
    4702:	015b      	lsls	r3, r3, #5
    4704:	4413      	add	r3, r2
    4706:	3301      	adds	r3, #1
    4708:	22ff      	movs	r2, #255	; 0xff
    470a:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    470c:	79fb      	ldrb	r3, [r7, #7]
    470e:	4a16      	ldr	r2, [pc, #88]	; (4768 <usb_d_init+0x90>)
    4710:	015b      	lsls	r3, r3, #5
    4712:	4413      	add	r3, r2
    4714:	3314      	adds	r3, #20
    4716:	4a16      	ldr	r2, [pc, #88]	; (4770 <usb_d_init+0x98>)
    4718:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    471a:	79fb      	ldrb	r3, [r7, #7]
    471c:	4a12      	ldr	r2, [pc, #72]	; (4768 <usb_d_init+0x90>)
    471e:	015b      	lsls	r3, r3, #5
    4720:	4413      	add	r3, r2
    4722:	3318      	adds	r3, #24
    4724:	4a12      	ldr	r2, [pc, #72]	; (4770 <usb_d_init+0x98>)
    4726:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    4728:	79fb      	ldrb	r3, [r7, #7]
    472a:	4a0f      	ldr	r2, [pc, #60]	; (4768 <usb_d_init+0x90>)
    472c:	015b      	lsls	r3, r3, #5
    472e:	4413      	add	r3, r2
    4730:	331c      	adds	r3, #28
    4732:	4a0f      	ldr	r2, [pc, #60]	; (4770 <usb_d_init+0x98>)
    4734:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4736:	79fb      	ldrb	r3, [r7, #7]
    4738:	3301      	adds	r3, #1
    473a:	71fb      	strb	r3, [r7, #7]
    473c:	79fb      	ldrb	r3, [r7, #7]
    473e:	2b03      	cmp	r3, #3
    4740:	d9dd      	bls.n	46fe <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    4742:	490c      	ldr	r1, [pc, #48]	; (4774 <usb_d_init+0x9c>)
    4744:	2000      	movs	r0, #0
    4746:	4b0c      	ldr	r3, [pc, #48]	; (4778 <usb_d_init+0xa0>)
    4748:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    474a:	490c      	ldr	r1, [pc, #48]	; (477c <usb_d_init+0xa4>)
    474c:	2001      	movs	r0, #1
    474e:	4b0a      	ldr	r3, [pc, #40]	; (4778 <usb_d_init+0xa0>)
    4750:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    4752:	490b      	ldr	r1, [pc, #44]	; (4780 <usb_d_init+0xa8>)
    4754:	2002      	movs	r0, #2
    4756:	4b08      	ldr	r3, [pc, #32]	; (4778 <usb_d_init+0xa0>)
    4758:	4798      	blx	r3
	return ERR_NONE;
    475a:	2300      	movs	r3, #0
}
    475c:	4618      	mov	r0, r3
    475e:	3708      	adds	r7, #8
    4760:	46bd      	mov	sp, r7
    4762:	bd80      	pop	{r7, pc}
    4764:	0000bcf5 	.word	0x0000bcf5
    4768:	20002204 	.word	0x20002204
    476c:	0001a769 	.word	0x0001a769
    4770:	00004401 	.word	0x00004401
    4774:	0000441d 	.word	0x0000441d
    4778:	0000c93d 	.word	0x0000c93d
    477c:	000044e5 	.word	0x000044e5
    4780:	000045f9 	.word	0x000045f9

00004784 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    4784:	b580      	push	{r7, lr}
    4786:	b082      	sub	sp, #8
    4788:	af00      	add	r7, sp, #0
    478a:	4603      	mov	r3, r0
    478c:	6039      	str	r1, [r7, #0]
    478e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    4790:	79fb      	ldrb	r3, [r7, #7]
    4792:	6839      	ldr	r1, [r7, #0]
    4794:	4618      	mov	r0, r3
    4796:	4b03      	ldr	r3, [pc, #12]	; (47a4 <usb_d_register_callback+0x20>)
    4798:	4798      	blx	r3
}
    479a:	bf00      	nop
    479c:	3708      	adds	r7, #8
    479e:	46bd      	mov	sp, r7
    47a0:	bd80      	pop	{r7, pc}
    47a2:	bf00      	nop
    47a4:	0000c8f5 	.word	0x0000c8f5

000047a8 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    47a8:	b580      	push	{r7, lr}
    47aa:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    47ac:	4b02      	ldr	r3, [pc, #8]	; (47b8 <usb_d_enable+0x10>)
    47ae:	4798      	blx	r3
    47b0:	4603      	mov	r3, r0
}
    47b2:	4618      	mov	r0, r3
    47b4:	bd80      	pop	{r7, pc}
    47b6:	bf00      	nop
    47b8:	0000bde5 	.word	0x0000bde5

000047bc <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    47bc:	b580      	push	{r7, lr}
    47be:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    47c0:	4b01      	ldr	r3, [pc, #4]	; (47c8 <usb_d_attach+0xc>)
    47c2:	4798      	blx	r3
}
    47c4:	bf00      	nop
    47c6:	bd80      	pop	{r7, pc}
    47c8:	0000be69 	.word	0x0000be69

000047cc <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    47cc:	b580      	push	{r7, lr}
    47ce:	b082      	sub	sp, #8
    47d0:	af00      	add	r7, sp, #0
    47d2:	4603      	mov	r3, r0
    47d4:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    47d6:	79fb      	ldrb	r3, [r7, #7]
    47d8:	4618      	mov	r0, r3
    47da:	4b03      	ldr	r3, [pc, #12]	; (47e8 <usb_d_set_address+0x1c>)
    47dc:	4798      	blx	r3
}
    47de:	bf00      	nop
    47e0:	3708      	adds	r7, #8
    47e2:	46bd      	mov	sp, r7
    47e4:	bd80      	pop	{r7, pc}
    47e6:	bf00      	nop
    47e8:	0000be7d 	.word	0x0000be7d

000047ec <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    47ec:	b580      	push	{r7, lr}
    47ee:	b082      	sub	sp, #8
    47f0:	af00      	add	r7, sp, #0
    47f2:	4603      	mov	r3, r0
    47f4:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    47f6:	79fb      	ldrb	r3, [r7, #7]
    47f8:	b29b      	uxth	r3, r3
    47fa:	461a      	mov	r2, r3
    47fc:	2100      	movs	r1, #0
    47fe:	2000      	movs	r0, #0
    4800:	4b03      	ldr	r3, [pc, #12]	; (4810 <usb_d_ep0_init+0x24>)
    4802:	4798      	blx	r3
    4804:	4603      	mov	r3, r0
}
    4806:	4618      	mov	r0, r3
    4808:	3708      	adds	r7, #8
    480a:	46bd      	mov	sp, r7
    480c:	bd80      	pop	{r7, pc}
    480e:	bf00      	nop
    4810:	00004815 	.word	0x00004815

00004814 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    4814:	b580      	push	{r7, lr}
    4816:	b086      	sub	sp, #24
    4818:	af00      	add	r7, sp, #0
    481a:	4603      	mov	r3, r0
    481c:	71fb      	strb	r3, [r7, #7]
    481e:	460b      	mov	r3, r1
    4820:	71bb      	strb	r3, [r7, #6]
    4822:	4613      	mov	r3, r2
    4824:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    4826:	79fb      	ldrb	r3, [r7, #7]
    4828:	4618      	mov	r0, r3
    482a:	4b1e      	ldr	r3, [pc, #120]	; (48a4 <usb_d_ep_init+0x90>)
    482c:	4798      	blx	r3
    482e:	4603      	mov	r3, r0
    4830:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4832:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4836:	015b      	lsls	r3, r3, #5
    4838:	4a1b      	ldr	r2, [pc, #108]	; (48a8 <usb_d_ep_init+0x94>)
    483a:	4413      	add	r3, r2
    483c:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    483e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4842:	2b00      	cmp	r3, #0
    4844:	db02      	blt.n	484c <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    4846:	f06f 0313 	mvn.w	r3, #19
    484a:	e027      	b.n	489c <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    484c:	20ff      	movs	r0, #255	; 0xff
    484e:	4b15      	ldr	r3, [pc, #84]	; (48a4 <usb_d_ep_init+0x90>)
    4850:	4798      	blx	r3
    4852:	4603      	mov	r3, r0
    4854:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    4856:	f997 3017 	ldrsb.w	r3, [r7, #23]
    485a:	2b00      	cmp	r3, #0
    485c:	da02      	bge.n	4864 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    485e:	f06f 0314 	mvn.w	r3, #20
    4862:	e01b      	b.n	489c <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    4864:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4868:	015b      	lsls	r3, r3, #5
    486a:	4a0f      	ldr	r2, [pc, #60]	; (48a8 <usb_d_ep_init+0x94>)
    486c:	4413      	add	r3, r2
    486e:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    4870:	88ba      	ldrh	r2, [r7, #4]
    4872:	79b9      	ldrb	r1, [r7, #6]
    4874:	79fb      	ldrb	r3, [r7, #7]
    4876:	4618      	mov	r0, r3
    4878:	4b0c      	ldr	r3, [pc, #48]	; (48ac <usb_d_ep_init+0x98>)
    487a:	4798      	blx	r3
    487c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    487e:	68fb      	ldr	r3, [r7, #12]
    4880:	2b00      	cmp	r3, #0
    4882:	da01      	bge.n	4888 <usb_d_ep_init+0x74>
		return rc;
    4884:	68fb      	ldr	r3, [r7, #12]
    4886:	e009      	b.n	489c <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    4888:	693b      	ldr	r3, [r7, #16]
    488a:	79fa      	ldrb	r2, [r7, #7]
    488c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    488e:	79bb      	ldrb	r3, [r7, #6]
    4890:	f003 0303 	and.w	r3, r3, #3
    4894:	b2da      	uxtb	r2, r3
    4896:	693b      	ldr	r3, [r7, #16]
    4898:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    489a:	2300      	movs	r3, #0
}
    489c:	4618      	mov	r0, r3
    489e:	3718      	adds	r7, #24
    48a0:	46bd      	mov	sp, r7
    48a2:	bd80      	pop	{r7, pc}
    48a4:	0000432d 	.word	0x0000432d
    48a8:	20002204 	.word	0x20002204
    48ac:	0000bf1d 	.word	0x0000bf1d

000048b0 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    48b0:	b580      	push	{r7, lr}
    48b2:	b084      	sub	sp, #16
    48b4:	af00      	add	r7, sp, #0
    48b6:	4603      	mov	r3, r0
    48b8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    48ba:	79fb      	ldrb	r3, [r7, #7]
    48bc:	4618      	mov	r0, r3
    48be:	4b0d      	ldr	r3, [pc, #52]	; (48f4 <usb_d_ep_deinit+0x44>)
    48c0:	4798      	blx	r3
    48c2:	4603      	mov	r3, r0
    48c4:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    48c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    48ca:	015b      	lsls	r3, r3, #5
    48cc:	4a0a      	ldr	r2, [pc, #40]	; (48f8 <usb_d_ep_deinit+0x48>)
    48ce:	4413      	add	r3, r2
    48d0:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    48d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    48d6:	2b00      	cmp	r3, #0
    48d8:	db07      	blt.n	48ea <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    48da:	79fb      	ldrb	r3, [r7, #7]
    48dc:	4618      	mov	r0, r3
    48de:	4b07      	ldr	r3, [pc, #28]	; (48fc <usb_d_ep_deinit+0x4c>)
    48e0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    48e2:	68bb      	ldr	r3, [r7, #8]
    48e4:	22ff      	movs	r2, #255	; 0xff
    48e6:	705a      	strb	r2, [r3, #1]
    48e8:	e000      	b.n	48ec <usb_d_ep_deinit+0x3c>
		return;
    48ea:	bf00      	nop
}
    48ec:	3710      	adds	r7, #16
    48ee:	46bd      	mov	sp, r7
    48f0:	bd80      	pop	{r7, pc}
    48f2:	bf00      	nop
    48f4:	0000432d 	.word	0x0000432d
    48f8:	20002204 	.word	0x20002204
    48fc:	0000c051 	.word	0x0000c051

00004900 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    4900:	b580      	push	{r7, lr}
    4902:	b086      	sub	sp, #24
    4904:	af00      	add	r7, sp, #0
    4906:	4603      	mov	r3, r0
    4908:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    490a:	79fb      	ldrb	r3, [r7, #7]
    490c:	4618      	mov	r0, r3
    490e:	4b15      	ldr	r3, [pc, #84]	; (4964 <usb_d_ep_enable+0x64>)
    4910:	4798      	blx	r3
    4912:	4603      	mov	r3, r0
    4914:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4916:	f997 3017 	ldrsb.w	r3, [r7, #23]
    491a:	015b      	lsls	r3, r3, #5
    491c:	4a12      	ldr	r2, [pc, #72]	; (4968 <usb_d_ep_enable+0x68>)
    491e:	4413      	add	r3, r2
    4920:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    4922:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4926:	2b00      	cmp	r3, #0
    4928:	da02      	bge.n	4930 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    492a:	f06f 0311 	mvn.w	r3, #17
    492e:	e014      	b.n	495a <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    4930:	693b      	ldr	r3, [r7, #16]
    4932:	781b      	ldrb	r3, [r3, #0]
    4934:	2b00      	cmp	r3, #0
    4936:	d101      	bne.n	493c <usb_d_ep_enable+0x3c>
    4938:	2202      	movs	r2, #2
    493a:	e000      	b.n	493e <usb_d_ep_enable+0x3e>
    493c:	2201      	movs	r2, #1
    493e:	693b      	ldr	r3, [r7, #16]
    4940:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    4942:	79fb      	ldrb	r3, [r7, #7]
    4944:	4618      	mov	r0, r3
    4946:	4b09      	ldr	r3, [pc, #36]	; (496c <usb_d_ep_enable+0x6c>)
    4948:	4798      	blx	r3
    494a:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    494c:	68fb      	ldr	r3, [r7, #12]
    494e:	2b00      	cmp	r3, #0
    4950:	da02      	bge.n	4958 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    4952:	693b      	ldr	r3, [r7, #16]
    4954:	2200      	movs	r2, #0
    4956:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    4958:	68fb      	ldr	r3, [r7, #12]
}
    495a:	4618      	mov	r0, r3
    495c:	3718      	adds	r7, #24
    495e:	46bd      	mov	sp, r7
    4960:	bd80      	pop	{r7, pc}
    4962:	bf00      	nop
    4964:	0000432d 	.word	0x0000432d
    4968:	20002204 	.word	0x20002204
    496c:	0000c135 	.word	0x0000c135

00004970 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    4970:	b590      	push	{r4, r7, lr}
    4972:	b08d      	sub	sp, #52	; 0x34
    4974:	af02      	add	r7, sp, #8
    4976:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    4978:	687b      	ldr	r3, [r7, #4]
    497a:	7a1b      	ldrb	r3, [r3, #8]
    497c:	4618      	mov	r0, r3
    497e:	4b51      	ldr	r3, [pc, #324]	; (4ac4 <usb_d_ep_transfer+0x154>)
    4980:	4798      	blx	r3
    4982:	4603      	mov	r3, r0
    4984:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    4986:	f997 301f 	ldrsb.w	r3, [r7, #31]
    498a:	015b      	lsls	r3, r3, #5
    498c:	4a4e      	ldr	r2, [pc, #312]	; (4ac8 <usb_d_ep_transfer+0x158>)
    498e:	4413      	add	r3, r2
    4990:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    4992:	687b      	ldr	r3, [r7, #4]
    4994:	7a1b      	ldrb	r3, [r3, #8]
    4996:	f003 0380 	and.w	r3, r3, #128	; 0x80
    499a:	2b00      	cmp	r3, #0
    499c:	bf14      	ite	ne
    499e:	2301      	movne	r3, #1
    49a0:	2300      	moveq	r3, #0
    49a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    49a6:	687b      	ldr	r3, [r7, #4]
    49a8:	7a5b      	ldrb	r3, [r3, #9]
    49aa:	2b00      	cmp	r3, #0
    49ac:	bf14      	ite	ne
    49ae:	2301      	movne	r3, #1
    49b0:	2300      	moveq	r3, #0
    49b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    49b6:	687b      	ldr	r3, [r7, #4]
    49b8:	685b      	ldr	r3, [r3, #4]
    49ba:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    49bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
    49c0:	2b00      	cmp	r3, #0
    49c2:	da02      	bge.n	49ca <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    49c4:	f06f 0311 	mvn.w	r3, #17
    49c8:	e077      	b.n	4aba <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    49ca:	f107 0308 	add.w	r3, r7, #8
    49ce:	4618      	mov	r0, r3
    49d0:	4b3e      	ldr	r3, [pc, #248]	; (4acc <usb_d_ep_transfer+0x15c>)
    49d2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    49d4:	69bb      	ldr	r3, [r7, #24]
    49d6:	789b      	ldrb	r3, [r3, #2]
    49d8:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    49da:	7bfb      	ldrb	r3, [r7, #15]
    49dc:	b2db      	uxtb	r3, r3
    49de:	2b01      	cmp	r3, #1
    49e0:	d10c      	bne.n	49fc <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    49e2:	69bb      	ldr	r3, [r7, #24]
    49e4:	2203      	movs	r2, #3
    49e6:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    49e8:	f107 0308 	add.w	r3, r7, #8
    49ec:	4618      	mov	r0, r3
    49ee:	4b38      	ldr	r3, [pc, #224]	; (4ad0 <usb_d_ep_transfer+0x160>)
    49f0:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    49f2:	69bb      	ldr	r3, [r7, #24]
    49f4:	781b      	ldrb	r3, [r3, #0]
    49f6:	2b00      	cmp	r3, #0
    49f8:	d151      	bne.n	4a9e <usb_d_ep_transfer+0x12e>
    49fa:	e017      	b.n	4a2c <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    49fc:	f107 0308 	add.w	r3, r7, #8
    4a00:	4618      	mov	r0, r3
    4a02:	4b33      	ldr	r3, [pc, #204]	; (4ad0 <usb_d_ep_transfer+0x160>)
    4a04:	4798      	blx	r3
		switch (state) {
    4a06:	7bfb      	ldrb	r3, [r7, #15]
    4a08:	b2db      	uxtb	r3, r3
    4a0a:	2b05      	cmp	r3, #5
    4a0c:	d004      	beq.n	4a18 <usb_d_ep_transfer+0xa8>
    4a0e:	2b06      	cmp	r3, #6
    4a10:	d004      	beq.n	4a1c <usb_d_ep_transfer+0xac>
    4a12:	2b00      	cmp	r3, #0
    4a14:	d005      	beq.n	4a22 <usb_d_ep_transfer+0xb2>
    4a16:	e007      	b.n	4a28 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    4a18:	2302      	movs	r3, #2
    4a1a:	e04e      	b.n	4aba <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    4a1c:	f06f 030f 	mvn.w	r3, #15
    4a20:	e04b      	b.n	4aba <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    4a22:	f06f 0312 	mvn.w	r3, #18
    4a26:	e048      	b.n	4aba <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    4a28:	2301      	movs	r3, #1
    4a2a:	e046      	b.n	4aba <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    4a2c:	69bb      	ldr	r3, [r7, #24]
    4a2e:	7c9b      	ldrb	r3, [r3, #18]
    4a30:	b29a      	uxth	r2, r3
    4a32:	69bb      	ldr	r3, [r7, #24]
    4a34:	7cdb      	ldrb	r3, [r3, #19]
    4a36:	b29b      	uxth	r3, r3
    4a38:	021b      	lsls	r3, r3, #8
    4a3a:	b29b      	uxth	r3, r3
    4a3c:	4413      	add	r3, r2
    4a3e:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    4a40:	8afb      	ldrh	r3, [r7, #22]
    4a42:	2b00      	cmp	r3, #0
    4a44:	d10b      	bne.n	4a5e <usb_d_ep_transfer+0xee>
			dir                 = true;
    4a46:	2301      	movs	r3, #1
    4a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    4a4c:	2300      	movs	r3, #0
    4a4e:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    4a50:	2301      	movs	r3, #1
    4a52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    4a56:	69bb      	ldr	r3, [r7, #24]
    4a58:	2204      	movs	r2, #4
    4a5a:	709a      	strb	r2, [r3, #2]
    4a5c:	e01f      	b.n	4a9e <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    4a5e:	69bb      	ldr	r3, [r7, #24]
    4a60:	7b1b      	ldrb	r3, [r3, #12]
    4a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4a66:	2b00      	cmp	r3, #0
    4a68:	bf14      	ite	ne
    4a6a:	2301      	movne	r3, #1
    4a6c:	2300      	moveq	r3, #0
    4a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    4a72:	8afa      	ldrh	r2, [r7, #22]
    4a74:	6a3b      	ldr	r3, [r7, #32]
    4a76:	429a      	cmp	r2, r3
    4a78:	d201      	bcs.n	4a7e <usb_d_ep_transfer+0x10e>
				len = req_len;
    4a7a:	8afb      	ldrh	r3, [r7, #22]
    4a7c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    4a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    4a82:	2b00      	cmp	r3, #0
    4a84:	d008      	beq.n	4a98 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    4a86:	8afa      	ldrh	r2, [r7, #22]
    4a88:	6a3b      	ldr	r3, [r7, #32]
    4a8a:	429a      	cmp	r2, r3
    4a8c:	bf8c      	ite	hi
    4a8e:	2301      	movhi	r3, #1
    4a90:	2300      	movls	r3, #0
    4a92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    4a96:	e002      	b.n	4a9e <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    4a98:	2300      	movs	r3, #0
    4a9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    4a9e:	687b      	ldr	r3, [r7, #4]
    4aa0:	7a18      	ldrb	r0, [r3, #8]
    4aa2:	687b      	ldr	r3, [r7, #4]
    4aa4:	681a      	ldr	r2, [r3, #0]
    4aa6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    4aaa:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    4aae:	9300      	str	r3, [sp, #0]
    4ab0:	6a3b      	ldr	r3, [r7, #32]
    4ab2:	4c08      	ldr	r4, [pc, #32]	; (4ad4 <usb_d_ep_transfer+0x164>)
    4ab4:	47a0      	blx	r4
    4ab6:	6138      	str	r0, [r7, #16]
	return rc;
    4ab8:	693b      	ldr	r3, [r7, #16]
}
    4aba:	4618      	mov	r0, r3
    4abc:	372c      	adds	r7, #44	; 0x2c
    4abe:	46bd      	mov	sp, r7
    4ac0:	bd90      	pop	{r4, r7, pc}
    4ac2:	bf00      	nop
    4ac4:	0000432d 	.word	0x0000432d
    4ac8:	20002204 	.word	0x20002204
    4acc:	0000d0a9 	.word	0x0000d0a9
    4ad0:	0000d0cf 	.word	0x0000d0cf
    4ad4:	000043ad 	.word	0x000043ad

00004ad8 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    4ad8:	b580      	push	{r7, lr}
    4ada:	b084      	sub	sp, #16
    4adc:	af00      	add	r7, sp, #0
    4ade:	4603      	mov	r3, r0
    4ae0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4ae2:	79fb      	ldrb	r3, [r7, #7]
    4ae4:	4618      	mov	r0, r3
    4ae6:	4b0e      	ldr	r3, [pc, #56]	; (4b20 <usb_d_ep_abort+0x48>)
    4ae8:	4798      	blx	r3
    4aea:	4603      	mov	r3, r0
    4aec:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4af2:	015b      	lsls	r3, r3, #5
    4af4:	4a0b      	ldr	r2, [pc, #44]	; (4b24 <usb_d_ep_abort+0x4c>)
    4af6:	4413      	add	r3, r2
    4af8:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    4afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4afe:	2b00      	cmp	r3, #0
    4b00:	db0a      	blt.n	4b18 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    4b02:	79fb      	ldrb	r3, [r7, #7]
    4b04:	4618      	mov	r0, r3
    4b06:	4b08      	ldr	r3, [pc, #32]	; (4b28 <usb_d_ep_abort+0x50>)
    4b08:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    4b0a:	68bb      	ldr	r3, [r7, #8]
    4b0c:	2201      	movs	r2, #1
    4b0e:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    4b10:	68bb      	ldr	r3, [r7, #8]
    4b12:	2204      	movs	r2, #4
    4b14:	70da      	strb	r2, [r3, #3]
    4b16:	e000      	b.n	4b1a <usb_d_ep_abort+0x42>
		return;
    4b18:	bf00      	nop
}
    4b1a:	3710      	adds	r7, #16
    4b1c:	46bd      	mov	sp, r7
    4b1e:	bd80      	pop	{r7, pc}
    4b20:	0000432d 	.word	0x0000432d
    4b24:	20002204 	.word	0x20002204
    4b28:	0000c8a1 	.word	0x0000c8a1

00004b2c <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    4b2c:	b580      	push	{r7, lr}
    4b2e:	b086      	sub	sp, #24
    4b30:	af00      	add	r7, sp, #0
    4b32:	4603      	mov	r3, r0
    4b34:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4b36:	79fb      	ldrb	r3, [r7, #7]
    4b38:	4618      	mov	r0, r3
    4b3a:	4b1a      	ldr	r3, [pc, #104]	; (4ba4 <_usb_d_ep_halt_clr+0x78>)
    4b3c:	4798      	blx	r3
    4b3e:	4603      	mov	r3, r0
    4b40:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4b42:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4b46:	015b      	lsls	r3, r3, #5
    4b48:	4a17      	ldr	r2, [pc, #92]	; (4ba8 <_usb_d_ep_halt_clr+0x7c>)
    4b4a:	4413      	add	r3, r2
    4b4c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    4b4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4b52:	2b00      	cmp	r3, #0
    4b54:	da02      	bge.n	4b5c <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    4b56:	f06f 0311 	mvn.w	r3, #17
    4b5a:	e01f      	b.n	4b9c <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    4b5c:	79fb      	ldrb	r3, [r7, #7]
    4b5e:	2102      	movs	r1, #2
    4b60:	4618      	mov	r0, r3
    4b62:	4b12      	ldr	r3, [pc, #72]	; (4bac <_usb_d_ep_halt_clr+0x80>)
    4b64:	4798      	blx	r3
    4b66:	4603      	mov	r3, r0
    4b68:	2b00      	cmp	r3, #0
    4b6a:	d016      	beq.n	4b9a <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4b6c:	79fb      	ldrb	r3, [r7, #7]
    4b6e:	2100      	movs	r1, #0
    4b70:	4618      	mov	r0, r3
    4b72:	4b0e      	ldr	r3, [pc, #56]	; (4bac <_usb_d_ep_halt_clr+0x80>)
    4b74:	4798      	blx	r3
    4b76:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    4b78:	68fb      	ldr	r3, [r7, #12]
    4b7a:	2b00      	cmp	r3, #0
    4b7c:	da01      	bge.n	4b82 <_usb_d_ep_halt_clr+0x56>
			return rc;
    4b7e:	68fb      	ldr	r3, [r7, #12]
    4b80:	e00c      	b.n	4b9c <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    4b82:	693b      	ldr	r3, [r7, #16]
    4b84:	2201      	movs	r2, #1
    4b86:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    4b88:	693b      	ldr	r3, [r7, #16]
    4b8a:	2203      	movs	r2, #3
    4b8c:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    4b8e:	693b      	ldr	r3, [r7, #16]
    4b90:	69db      	ldr	r3, [r3, #28]
    4b92:	79f8      	ldrb	r0, [r7, #7]
    4b94:	2200      	movs	r2, #0
    4b96:	2103      	movs	r1, #3
    4b98:	4798      	blx	r3
	}
	return ERR_NONE;
    4b9a:	2300      	movs	r3, #0
}
    4b9c:	4618      	mov	r0, r3
    4b9e:	3718      	adds	r7, #24
    4ba0:	46bd      	mov	sp, r7
    4ba2:	bd80      	pop	{r7, pc}
    4ba4:	0000432d 	.word	0x0000432d
    4ba8:	20002204 	.word	0x20002204
    4bac:	0000c4ad 	.word	0x0000c4ad

00004bb0 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    4bb0:	b580      	push	{r7, lr}
    4bb2:	b082      	sub	sp, #8
    4bb4:	af00      	add	r7, sp, #0
    4bb6:	4603      	mov	r3, r0
    4bb8:	460a      	mov	r2, r1
    4bba:	71fb      	strb	r3, [r7, #7]
    4bbc:	4613      	mov	r3, r2
    4bbe:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    4bc0:	79bb      	ldrb	r3, [r7, #6]
    4bc2:	2b00      	cmp	r3, #0
    4bc4:	d105      	bne.n	4bd2 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    4bc6:	79fb      	ldrb	r3, [r7, #7]
    4bc8:	4618      	mov	r0, r3
    4bca:	4b0c      	ldr	r3, [pc, #48]	; (4bfc <usb_d_ep_halt+0x4c>)
    4bcc:	4798      	blx	r3
    4bce:	4603      	mov	r3, r0
    4bd0:	e00f      	b.n	4bf2 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    4bd2:	79bb      	ldrb	r3, [r7, #6]
    4bd4:	2b01      	cmp	r3, #1
    4bd6:	d106      	bne.n	4be6 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4bd8:	79fb      	ldrb	r3, [r7, #7]
    4bda:	2101      	movs	r1, #1
    4bdc:	4618      	mov	r0, r3
    4bde:	4b08      	ldr	r3, [pc, #32]	; (4c00 <usb_d_ep_halt+0x50>)
    4be0:	4798      	blx	r3
    4be2:	4603      	mov	r3, r0
    4be4:	e005      	b.n	4bf2 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    4be6:	79fb      	ldrb	r3, [r7, #7]
    4be8:	2102      	movs	r1, #2
    4bea:	4618      	mov	r0, r3
    4bec:	4b04      	ldr	r3, [pc, #16]	; (4c00 <usb_d_ep_halt+0x50>)
    4bee:	4798      	blx	r3
    4bf0:	4603      	mov	r3, r0
	}
}
    4bf2:	4618      	mov	r0, r3
    4bf4:	3708      	adds	r7, #8
    4bf6:	46bd      	mov	sp, r7
    4bf8:	bd80      	pop	{r7, pc}
    4bfa:	bf00      	nop
    4bfc:	00004b2d 	.word	0x00004b2d
    4c00:	0000c4ad 	.word	0x0000c4ad

00004c04 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    4c04:	b580      	push	{r7, lr}
    4c06:	b086      	sub	sp, #24
    4c08:	af00      	add	r7, sp, #0
    4c0a:	4603      	mov	r3, r0
    4c0c:	603a      	str	r2, [r7, #0]
    4c0e:	71fb      	strb	r3, [r7, #7]
    4c10:	460b      	mov	r3, r1
    4c12:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4c14:	79fb      	ldrb	r3, [r7, #7]
    4c16:	4618      	mov	r0, r3
    4c18:	4b16      	ldr	r3, [pc, #88]	; (4c74 <usb_d_ep_register_callback+0x70>)
    4c1a:	4798      	blx	r3
    4c1c:	4603      	mov	r3, r0
    4c1e:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4c24:	015b      	lsls	r3, r3, #5
    4c26:	4a14      	ldr	r2, [pc, #80]	; (4c78 <usb_d_ep_register_callback+0x74>)
    4c28:	4413      	add	r3, r2
    4c2a:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    4c2c:	683b      	ldr	r3, [r7, #0]
    4c2e:	2b00      	cmp	r3, #0
    4c30:	d001      	beq.n	4c36 <usb_d_ep_register_callback+0x32>
    4c32:	683b      	ldr	r3, [r7, #0]
    4c34:	e000      	b.n	4c38 <usb_d_ep_register_callback+0x34>
    4c36:	4b11      	ldr	r3, [pc, #68]	; (4c7c <usb_d_ep_register_callback+0x78>)
    4c38:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    4c3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4c3e:	2b00      	cmp	r3, #0
    4c40:	db13      	blt.n	4c6a <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    4c42:	79bb      	ldrb	r3, [r7, #6]
    4c44:	2b01      	cmp	r3, #1
    4c46:	d008      	beq.n	4c5a <usb_d_ep_register_callback+0x56>
    4c48:	2b02      	cmp	r3, #2
    4c4a:	d00a      	beq.n	4c62 <usb_d_ep_register_callback+0x5e>
    4c4c:	2b00      	cmp	r3, #0
    4c4e:	d000      	beq.n	4c52 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    4c50:	e00c      	b.n	4c6c <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    4c52:	693b      	ldr	r3, [r7, #16]
    4c54:	68fa      	ldr	r2, [r7, #12]
    4c56:	615a      	str	r2, [r3, #20]
		break;
    4c58:	e008      	b.n	4c6c <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    4c5a:	693b      	ldr	r3, [r7, #16]
    4c5c:	68fa      	ldr	r2, [r7, #12]
    4c5e:	619a      	str	r2, [r3, #24]
		break;
    4c60:	e004      	b.n	4c6c <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    4c62:	693b      	ldr	r3, [r7, #16]
    4c64:	68fa      	ldr	r2, [r7, #12]
    4c66:	61da      	str	r2, [r3, #28]
		break;
    4c68:	e000      	b.n	4c6c <usb_d_ep_register_callback+0x68>
		return;
    4c6a:	bf00      	nop
	}
}
    4c6c:	3718      	adds	r7, #24
    4c6e:	46bd      	mov	sp, r7
    4c70:	bd80      	pop	{r7, pc}
    4c72:	bf00      	nop
    4c74:	0000432d 	.word	0x0000432d
    4c78:	20002204 	.word	0x20002204
    4c7c:	00004401 	.word	0x00004401

00004c80 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    4c80:	b480      	push	{r7}
    4c82:	b085      	sub	sp, #20
    4c84:	af00      	add	r7, sp, #0
    4c86:	4603      	mov	r3, r0
    4c88:	60b9      	str	r1, [r7, #8]
    4c8a:	607a      	str	r2, [r7, #4]
    4c8c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    4c8e:	7bfb      	ldrb	r3, [r7, #15]
    4c90:	f083 0301 	eor.w	r3, r3, #1
    4c94:	b2db      	uxtb	r3, r3
    4c96:	2b00      	cmp	r3, #0
    4c98:	d000      	beq.n	4c9c <assert+0x1c>
		__asm("BKPT #0");
    4c9a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    4c9c:	bf00      	nop
    4c9e:	3714      	adds	r7, #20
    4ca0:	46bd      	mov	sp, r7
    4ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ca6:	4770      	bx	lr

00004ca8 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    4ca8:	b480      	push	{r7}
    4caa:	b085      	sub	sp, #20
    4cac:	af00      	add	r7, sp, #0
    4cae:	6078      	str	r0, [r7, #4]
    4cb0:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    4cb2:	687b      	ldr	r3, [r7, #4]
    4cb4:	681b      	ldr	r3, [r3, #0]
    4cb6:	60fb      	str	r3, [r7, #12]
    4cb8:	e008      	b.n	4ccc <is_list_element+0x24>
		if (it == element) {
    4cba:	68fa      	ldr	r2, [r7, #12]
    4cbc:	683b      	ldr	r3, [r7, #0]
    4cbe:	429a      	cmp	r2, r3
    4cc0:	d101      	bne.n	4cc6 <is_list_element+0x1e>
			return true;
    4cc2:	2301      	movs	r3, #1
    4cc4:	e006      	b.n	4cd4 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    4cc6:	68fb      	ldr	r3, [r7, #12]
    4cc8:	681b      	ldr	r3, [r3, #0]
    4cca:	60fb      	str	r3, [r7, #12]
    4ccc:	68fb      	ldr	r3, [r7, #12]
    4cce:	2b00      	cmp	r3, #0
    4cd0:	d1f3      	bne.n	4cba <is_list_element+0x12>
		}
	}

	return false;
    4cd2:	2300      	movs	r3, #0
}
    4cd4:	4618      	mov	r0, r3
    4cd6:	3714      	adds	r7, #20
    4cd8:	46bd      	mov	sp, r7
    4cda:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cde:	4770      	bx	lr

00004ce0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    4ce0:	b580      	push	{r7, lr}
    4ce2:	b082      	sub	sp, #8
    4ce4:	af00      	add	r7, sp, #0
    4ce6:	6078      	str	r0, [r7, #4]
    4ce8:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    4cea:	6839      	ldr	r1, [r7, #0]
    4cec:	6878      	ldr	r0, [r7, #4]
    4cee:	4b0f      	ldr	r3, [pc, #60]	; (4d2c <list_insert_as_head+0x4c>)
    4cf0:	4798      	blx	r3
    4cf2:	4603      	mov	r3, r0
    4cf4:	2b00      	cmp	r3, #0
    4cf6:	bf14      	ite	ne
    4cf8:	2301      	movne	r3, #1
    4cfa:	2300      	moveq	r3, #0
    4cfc:	b2db      	uxtb	r3, r3
    4cfe:	f083 0301 	eor.w	r3, r3, #1
    4d02:	b2db      	uxtb	r3, r3
    4d04:	f003 0301 	and.w	r3, r3, #1
    4d08:	b2db      	uxtb	r3, r3
    4d0a:	2239      	movs	r2, #57	; 0x39
    4d0c:	4908      	ldr	r1, [pc, #32]	; (4d30 <list_insert_as_head+0x50>)
    4d0e:	4618      	mov	r0, r3
    4d10:	4b08      	ldr	r3, [pc, #32]	; (4d34 <list_insert_as_head+0x54>)
    4d12:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    4d14:	687b      	ldr	r3, [r7, #4]
    4d16:	681a      	ldr	r2, [r3, #0]
    4d18:	683b      	ldr	r3, [r7, #0]
    4d1a:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    4d1c:	687b      	ldr	r3, [r7, #4]
    4d1e:	683a      	ldr	r2, [r7, #0]
    4d20:	601a      	str	r2, [r3, #0]
}
    4d22:	bf00      	nop
    4d24:	3708      	adds	r7, #8
    4d26:	46bd      	mov	sp, r7
    4d28:	bd80      	pop	{r7, pc}
    4d2a:	bf00      	nop
    4d2c:	00004ca9 	.word	0x00004ca9
    4d30:	0001ac9c 	.word	0x0001ac9c
    4d34:	00004c81 	.word	0x00004c81

00004d38 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    4d38:	b480      	push	{r7}
    4d3a:	b083      	sub	sp, #12
    4d3c:	af00      	add	r7, sp, #0
    4d3e:	6078      	str	r0, [r7, #4]
    4d40:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	681a      	ldr	r2, [r3, #0]
    4d46:	683b      	ldr	r3, [r7, #0]
    4d48:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    4d4a:	687b      	ldr	r3, [r7, #4]
    4d4c:	683a      	ldr	r2, [r7, #0]
    4d4e:	601a      	str	r2, [r3, #0]
}
    4d50:	bf00      	nop
    4d52:	370c      	adds	r7, #12
    4d54:	46bd      	mov	sp, r7
    4d56:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d5a:	4770      	bx	lr

00004d5c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    4d5c:	b580      	push	{r7, lr}
    4d5e:	b084      	sub	sp, #16
    4d60:	af00      	add	r7, sp, #0
    4d62:	6078      	str	r0, [r7, #4]
    4d64:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    4d66:	687b      	ldr	r3, [r7, #4]
    4d68:	681b      	ldr	r3, [r3, #0]
    4d6a:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    4d6c:	6839      	ldr	r1, [r7, #0]
    4d6e:	6878      	ldr	r0, [r7, #4]
    4d70:	4b16      	ldr	r3, [pc, #88]	; (4dcc <list_insert_at_end+0x70>)
    4d72:	4798      	blx	r3
    4d74:	4603      	mov	r3, r0
    4d76:	2b00      	cmp	r3, #0
    4d78:	bf14      	ite	ne
    4d7a:	2301      	movne	r3, #1
    4d7c:	2300      	moveq	r3, #0
    4d7e:	b2db      	uxtb	r3, r3
    4d80:	f083 0301 	eor.w	r3, r3, #1
    4d84:	b2db      	uxtb	r3, r3
    4d86:	f003 0301 	and.w	r3, r3, #1
    4d8a:	b2db      	uxtb	r3, r3
    4d8c:	224f      	movs	r2, #79	; 0x4f
    4d8e:	4910      	ldr	r1, [pc, #64]	; (4dd0 <list_insert_at_end+0x74>)
    4d90:	4618      	mov	r0, r3
    4d92:	4b10      	ldr	r3, [pc, #64]	; (4dd4 <list_insert_at_end+0x78>)
    4d94:	4798      	blx	r3

	if (!list->head) {
    4d96:	687b      	ldr	r3, [r7, #4]
    4d98:	681b      	ldr	r3, [r3, #0]
    4d9a:	2b00      	cmp	r3, #0
    4d9c:	d109      	bne.n	4db2 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    4d9e:	687b      	ldr	r3, [r7, #4]
    4da0:	683a      	ldr	r2, [r7, #0]
    4da2:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    4da4:	683b      	ldr	r3, [r7, #0]
    4da6:	2200      	movs	r2, #0
    4da8:	601a      	str	r2, [r3, #0]
		return;
    4daa:	e00c      	b.n	4dc6 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    4dac:	68fb      	ldr	r3, [r7, #12]
    4dae:	681b      	ldr	r3, [r3, #0]
    4db0:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    4db2:	68fb      	ldr	r3, [r7, #12]
    4db4:	681b      	ldr	r3, [r3, #0]
    4db6:	2b00      	cmp	r3, #0
    4db8:	d1f8      	bne.n	4dac <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    4dba:	68fb      	ldr	r3, [r7, #12]
    4dbc:	683a      	ldr	r2, [r7, #0]
    4dbe:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    4dc0:	683b      	ldr	r3, [r7, #0]
    4dc2:	2200      	movs	r2, #0
    4dc4:	601a      	str	r2, [r3, #0]
}
    4dc6:	3710      	adds	r7, #16
    4dc8:	46bd      	mov	sp, r7
    4dca:	bd80      	pop	{r7, pc}
    4dcc:	00004ca9 	.word	0x00004ca9
    4dd0:	0001ac9c 	.word	0x0001ac9c
    4dd4:	00004c81 	.word	0x00004c81

00004dd8 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    4dd8:	b480      	push	{r7}
    4dda:	b085      	sub	sp, #20
    4ddc:	af00      	add	r7, sp, #0
    4dde:	6078      	str	r0, [r7, #4]
	if (list->head) {
    4de0:	687b      	ldr	r3, [r7, #4]
    4de2:	681b      	ldr	r3, [r3, #0]
    4de4:	2b00      	cmp	r3, #0
    4de6:	d009      	beq.n	4dfc <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    4de8:	687b      	ldr	r3, [r7, #4]
    4dea:	681b      	ldr	r3, [r3, #0]
    4dec:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    4dee:	687b      	ldr	r3, [r7, #4]
    4df0:	681b      	ldr	r3, [r3, #0]
    4df2:	681a      	ldr	r2, [r3, #0]
    4df4:	687b      	ldr	r3, [r7, #4]
    4df6:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    4df8:	68fb      	ldr	r3, [r7, #12]
    4dfa:	e000      	b.n	4dfe <list_remove_head+0x26>
	}

	return NULL;
    4dfc:	2300      	movs	r3, #0
}
    4dfe:	4618      	mov	r0, r3
    4e00:	3714      	adds	r7, #20
    4e02:	46bd      	mov	sp, r7
    4e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e08:	4770      	bx	lr

00004e0a <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    4e0a:	b480      	push	{r7}
    4e0c:	b085      	sub	sp, #20
    4e0e:	af00      	add	r7, sp, #0
    4e10:	6078      	str	r0, [r7, #4]
    4e12:	6039      	str	r1, [r7, #0]
	if (!element) {
    4e14:	683b      	ldr	r3, [r7, #0]
    4e16:	2b00      	cmp	r3, #0
    4e18:	d101      	bne.n	4e1e <list_delete_element+0x14>
		return false;
    4e1a:	2300      	movs	r3, #0
    4e1c:	e024      	b.n	4e68 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    4e1e:	687b      	ldr	r3, [r7, #4]
    4e20:	681a      	ldr	r2, [r3, #0]
    4e22:	683b      	ldr	r3, [r7, #0]
    4e24:	429a      	cmp	r2, r3
    4e26:	d106      	bne.n	4e36 <list_delete_element+0x2c>
		list->head = list->head->next;
    4e28:	687b      	ldr	r3, [r7, #4]
    4e2a:	681b      	ldr	r3, [r3, #0]
    4e2c:	681a      	ldr	r2, [r3, #0]
    4e2e:	687b      	ldr	r3, [r7, #4]
    4e30:	601a      	str	r2, [r3, #0]
		return true;
    4e32:	2301      	movs	r3, #1
    4e34:	e018      	b.n	4e68 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    4e36:	687b      	ldr	r3, [r7, #4]
    4e38:	681b      	ldr	r3, [r3, #0]
    4e3a:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    4e3c:	e002      	b.n	4e44 <list_delete_element+0x3a>
			it = it->next;
    4e3e:	68fb      	ldr	r3, [r7, #12]
    4e40:	681b      	ldr	r3, [r3, #0]
    4e42:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    4e44:	68fb      	ldr	r3, [r7, #12]
    4e46:	2b00      	cmp	r3, #0
    4e48:	d004      	beq.n	4e54 <list_delete_element+0x4a>
    4e4a:	68fb      	ldr	r3, [r7, #12]
    4e4c:	681a      	ldr	r2, [r3, #0]
    4e4e:	683b      	ldr	r3, [r7, #0]
    4e50:	429a      	cmp	r2, r3
    4e52:	d1f4      	bne.n	4e3e <list_delete_element+0x34>
		}
		if (it) {
    4e54:	68fb      	ldr	r3, [r7, #12]
    4e56:	2b00      	cmp	r3, #0
    4e58:	d005      	beq.n	4e66 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    4e5a:	683b      	ldr	r3, [r7, #0]
    4e5c:	681a      	ldr	r2, [r3, #0]
    4e5e:	68fb      	ldr	r3, [r7, #12]
    4e60:	601a      	str	r2, [r3, #0]
			return true;
    4e62:	2301      	movs	r3, #1
    4e64:	e000      	b.n	4e68 <list_delete_element+0x5e>
		}
	}

	return false;
    4e66:	2300      	movs	r3, #0
}
    4e68:	4618      	mov	r0, r3
    4e6a:	3714      	adds	r7, #20
    4e6c:	46bd      	mov	sp, r7
    4e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e72:	4770      	bx	lr

00004e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    4e74:	b480      	push	{r7}
    4e76:	b083      	sub	sp, #12
    4e78:	af00      	add	r7, sp, #0
    4e7a:	4603      	mov	r3, r0
    4e7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4e82:	2b00      	cmp	r3, #0
    4e84:	db0b      	blt.n	4e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4e86:	4909      	ldr	r1, [pc, #36]	; (4eac <__NVIC_EnableIRQ+0x38>)
    4e88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4e8c:	095b      	lsrs	r3, r3, #5
    4e8e:	88fa      	ldrh	r2, [r7, #6]
    4e90:	f002 021f 	and.w	r2, r2, #31
    4e94:	2001      	movs	r0, #1
    4e96:	fa00 f202 	lsl.w	r2, r0, r2
    4e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4e9e:	bf00      	nop
    4ea0:	370c      	adds	r7, #12
    4ea2:	46bd      	mov	sp, r7
    4ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ea8:	4770      	bx	lr
    4eaa:	bf00      	nop
    4eac:	e000e100 	.word	0xe000e100

00004eb0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    4eb0:	b480      	push	{r7}
    4eb2:	b083      	sub	sp, #12
    4eb4:	af00      	add	r7, sp, #0
    4eb6:	4603      	mov	r3, r0
    4eb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4ebe:	2b00      	cmp	r3, #0
    4ec0:	db10      	blt.n	4ee4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4ec2:	490b      	ldr	r1, [pc, #44]	; (4ef0 <__NVIC_DisableIRQ+0x40>)
    4ec4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4ec8:	095b      	lsrs	r3, r3, #5
    4eca:	88fa      	ldrh	r2, [r7, #6]
    4ecc:	f002 021f 	and.w	r2, r2, #31
    4ed0:	2001      	movs	r0, #1
    4ed2:	fa00 f202 	lsl.w	r2, r0, r2
    4ed6:	3320      	adds	r3, #32
    4ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4edc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4ee0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    4ee4:	bf00      	nop
    4ee6:	370c      	adds	r7, #12
    4ee8:	46bd      	mov	sp, r7
    4eea:	f85d 7b04 	ldr.w	r7, [sp], #4
    4eee:	4770      	bx	lr
    4ef0:	e000e100 	.word	0xe000e100

00004ef4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    4ef4:	b480      	push	{r7}
    4ef6:	b083      	sub	sp, #12
    4ef8:	af00      	add	r7, sp, #0
    4efa:	4603      	mov	r3, r0
    4efc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4f02:	2b00      	cmp	r3, #0
    4f04:	db0c      	blt.n	4f20 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4f06:	4909      	ldr	r1, [pc, #36]	; (4f2c <__NVIC_ClearPendingIRQ+0x38>)
    4f08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4f0c:	095b      	lsrs	r3, r3, #5
    4f0e:	88fa      	ldrh	r2, [r7, #6]
    4f10:	f002 021f 	and.w	r2, r2, #31
    4f14:	2001      	movs	r0, #1
    4f16:	fa00 f202 	lsl.w	r2, r0, r2
    4f1a:	3360      	adds	r3, #96	; 0x60
    4f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4f20:	bf00      	nop
    4f22:	370c      	adds	r7, #12
    4f24:	46bd      	mov	sp, r7
    4f26:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f2a:	4770      	bx	lr
    4f2c:	e000e100 	.word	0xe000e100

00004f30 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    4f30:	b480      	push	{r7}
    4f32:	b083      	sub	sp, #12
    4f34:	af00      	add	r7, sp, #0
    4f36:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    4f38:	687b      	ldr	r3, [r7, #4]
    4f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4f3c:	095b      	lsrs	r3, r3, #5
    4f3e:	f003 0301 	and.w	r3, r3, #1
    4f42:	2b00      	cmp	r3, #0
    4f44:	bf14      	ite	ne
    4f46:	2301      	movne	r3, #1
    4f48:	2300      	moveq	r3, #0
    4f4a:	b2db      	uxtb	r3, r3
}
    4f4c:	4618      	mov	r0, r3
    4f4e:	370c      	adds	r7, #12
    4f50:	46bd      	mov	sp, r7
    4f52:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f56:	4770      	bx	lr

00004f58 <hri_can_read_RXF0S_F0FL_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL(mask)) >> CAN_RXF0S_F0FL_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0FL_bf(const void *const hw)
{
    4f58:	b480      	push	{r7}
    4f5a:	b083      	sub	sp, #12
    4f5c:	af00      	add	r7, sp, #0
    4f5e:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
    4f60:	687b      	ldr	r3, [r7, #4]
    4f62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    4f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
    4f6a:	4618      	mov	r0, r3
    4f6c:	370c      	adds	r7, #12
    4f6e:	46bd      	mov	sp, r7
    4f70:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f74:	4770      	bx	lr

00004f76 <hri_can_read_RXF0S_F0GI_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI(mask)) >> CAN_RXF0S_F0GI_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0GI_bf(const void *const hw)
{
    4f76:	b480      	push	{r7}
    4f78:	b083      	sub	sp, #12
    4f7a:	af00      	add	r7, sp, #0
    4f7c:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
    4f7e:	687b      	ldr	r3, [r7, #4]
    4f80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    4f84:	0a1b      	lsrs	r3, r3, #8
    4f86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    4f8a:	4618      	mov	r0, r3
    4f8c:	370c      	adds	r7, #12
    4f8e:	46bd      	mov	sp, r7
    4f90:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f94:	4770      	bx	lr

00004f96 <hri_can_get_TXFQS_TFQF_bit>:
{
	return ((Can *)hw)->RXF1S.reg;
}

static inline bool hri_can_get_TXFQS_TFQF_bit(const void *const hw)
{
    4f96:	b480      	push	{r7}
    4f98:	b083      	sub	sp, #12
    4f9a:	af00      	add	r7, sp, #0
    4f9c:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
    4f9e:	687b      	ldr	r3, [r7, #4]
    4fa0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4fa4:	0d5b      	lsrs	r3, r3, #21
    4fa6:	f003 0301 	and.w	r3, r3, #1
    4faa:	2b00      	cmp	r3, #0
    4fac:	bf14      	ite	ne
    4fae:	2301      	movne	r3, #1
    4fb0:	2300      	moveq	r3, #0
    4fb2:	b2db      	uxtb	r3, r3
}
    4fb4:	4618      	mov	r0, r3
    4fb6:	370c      	adds	r7, #12
    4fb8:	46bd      	mov	sp, r7
    4fba:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fbe:	4770      	bx	lr

00004fc0 <hri_can_read_TXFQS_TFQPI_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI(mask)) >> CAN_TXFQS_TFQPI_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFQPI_bf(const void *const hw)
{
    4fc0:	b480      	push	{r7}
    4fc2:	b083      	sub	sp, #12
    4fc4:	af00      	add	r7, sp, #0
    4fc6:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
    4fc8:	687b      	ldr	r3, [r7, #4]
    4fca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    4fce:	0c1b      	lsrs	r3, r3, #16
    4fd0:	f003 031f 	and.w	r3, r3, #31
}
    4fd4:	4618      	mov	r0, r3
    4fd6:	370c      	adds	r7, #12
    4fd8:	46bd      	mov	sp, r7
    4fda:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fde:	4770      	bx	lr

00004fe0 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    4fe0:	b480      	push	{r7}
    4fe2:	b083      	sub	sp, #12
    4fe4:	af00      	add	r7, sp, #0
    4fe6:	6078      	str	r0, [r7, #4]
    4fe8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    4fea:	687b      	ldr	r3, [r7, #4]
    4fec:	683a      	ldr	r2, [r7, #0]
    4fee:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4ff0:	bf00      	nop
    4ff2:	370c      	adds	r7, #12
    4ff4:	46bd      	mov	sp, r7
    4ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ffa:	4770      	bx	lr

00004ffc <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    4ffc:	b480      	push	{r7}
    4ffe:	b083      	sub	sp, #12
    5000:	af00      	add	r7, sp, #0
    5002:	6078      	str	r0, [r7, #4]
    5004:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    5006:	687b      	ldr	r3, [r7, #4]
    5008:	683a      	ldr	r2, [r7, #0]
    500a:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    500c:	bf00      	nop
    500e:	370c      	adds	r7, #12
    5010:	46bd      	mov	sp, r7
    5012:	f85d 7b04 	ldr.w	r7, [sp], #4
    5016:	4770      	bx	lr

00005018 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    5018:	b480      	push	{r7}
    501a:	b083      	sub	sp, #12
    501c:	af00      	add	r7, sp, #0
    501e:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    5020:	687b      	ldr	r3, [r7, #4]
    5022:	699b      	ldr	r3, [r3, #24]
    5024:	f043 0201 	orr.w	r2, r3, #1
    5028:	687b      	ldr	r3, [r7, #4]
    502a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    502c:	bf00      	nop
    502e:	370c      	adds	r7, #12
    5030:	46bd      	mov	sp, r7
    5032:	f85d 7b04 	ldr.w	r7, [sp], #4
    5036:	4770      	bx	lr

00005038 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    5038:	b480      	push	{r7}
    503a:	b085      	sub	sp, #20
    503c:	af00      	add	r7, sp, #0
    503e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    5040:	687b      	ldr	r3, [r7, #4]
    5042:	699b      	ldr	r3, [r3, #24]
    5044:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    5046:	68fb      	ldr	r3, [r7, #12]
    5048:	f003 0301 	and.w	r3, r3, #1
    504c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    504e:	68fb      	ldr	r3, [r7, #12]
    5050:	2b00      	cmp	r3, #0
    5052:	bf14      	ite	ne
    5054:	2301      	movne	r3, #1
    5056:	2300      	moveq	r3, #0
    5058:	b2db      	uxtb	r3, r3
}
    505a:	4618      	mov	r0, r3
    505c:	3714      	adds	r7, #20
    505e:	46bd      	mov	sp, r7
    5060:	f85d 7b04 	ldr.w	r7, [sp], #4
    5064:	4770      	bx	lr

00005066 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    5066:	b480      	push	{r7}
    5068:	b083      	sub	sp, #12
    506a:	af00      	add	r7, sp, #0
    506c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    506e:	687b      	ldr	r3, [r7, #4]
    5070:	699b      	ldr	r3, [r3, #24]
    5072:	f023 0201 	bic.w	r2, r3, #1
    5076:	687b      	ldr	r3, [r7, #4]
    5078:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    507a:	bf00      	nop
    507c:	370c      	adds	r7, #12
    507e:	46bd      	mov	sp, r7
    5080:	f85d 7b04 	ldr.w	r7, [sp], #4
    5084:	4770      	bx	lr

00005086 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    5086:	b480      	push	{r7}
    5088:	b083      	sub	sp, #12
    508a:	af00      	add	r7, sp, #0
    508c:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    508e:	687b      	ldr	r3, [r7, #4]
    5090:	699b      	ldr	r3, [r3, #24]
    5092:	f043 0202 	orr.w	r2, r3, #2
    5096:	687b      	ldr	r3, [r7, #4]
    5098:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    509a:	bf00      	nop
    509c:	370c      	adds	r7, #12
    509e:	46bd      	mov	sp, r7
    50a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    50a4:	4770      	bx	lr

000050a6 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    50a6:	b480      	push	{r7}
    50a8:	b083      	sub	sp, #12
    50aa:	af00      	add	r7, sp, #0
    50ac:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    50ae:	687b      	ldr	r3, [r7, #4]
    50b0:	699b      	ldr	r3, [r3, #24]
    50b2:	f023 0202 	bic.w	r2, r3, #2
    50b6:	687b      	ldr	r3, [r7, #4]
    50b8:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    50ba:	bf00      	nop
    50bc:	370c      	adds	r7, #12
    50be:	46bd      	mov	sp, r7
    50c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    50c4:	4770      	bx	lr

000050c6 <hri_can_get_CCCR_FDOE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_FDOE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_FDOE_bit(const void *const hw)
{
    50c6:	b480      	push	{r7}
    50c8:	b085      	sub	sp, #20
    50ca:	af00      	add	r7, sp, #0
    50cc:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    50ce:	687b      	ldr	r3, [r7, #4]
    50d0:	699b      	ldr	r3, [r3, #24]
    50d2:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_FDOE) >> CAN_CCCR_FDOE_Pos;
    50d4:	68fb      	ldr	r3, [r7, #12]
    50d6:	0a1b      	lsrs	r3, r3, #8
    50d8:	f003 0301 	and.w	r3, r3, #1
    50dc:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    50de:	68fb      	ldr	r3, [r7, #12]
    50e0:	2b00      	cmp	r3, #0
    50e2:	bf14      	ite	ne
    50e4:	2301      	movne	r3, #1
    50e6:	2300      	moveq	r3, #0
    50e8:	b2db      	uxtb	r3, r3
}
    50ea:	4618      	mov	r0, r3
    50ec:	3714      	adds	r7, #20
    50ee:	46bd      	mov	sp, r7
    50f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    50f4:	4770      	bx	lr

000050f6 <hri_can_get_CCCR_BRSE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_BRSE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_BRSE_bit(const void *const hw)
{
    50f6:	b480      	push	{r7}
    50f8:	b085      	sub	sp, #20
    50fa:	af00      	add	r7, sp, #0
    50fc:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    50fe:	687b      	ldr	r3, [r7, #4]
    5100:	699b      	ldr	r3, [r3, #24]
    5102:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_BRSE) >> CAN_CCCR_BRSE_Pos;
    5104:	68fb      	ldr	r3, [r7, #12]
    5106:	0a5b      	lsrs	r3, r3, #9
    5108:	f003 0301 	and.w	r3, r3, #1
    510c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    510e:	68fb      	ldr	r3, [r7, #12]
    5110:	2b00      	cmp	r3, #0
    5112:	bf14      	ite	ne
    5114:	2301      	movne	r3, #1
    5116:	2300      	moveq	r3, #0
    5118:	b2db      	uxtb	r3, r3
}
    511a:	4618      	mov	r0, r3
    511c:	3714      	adds	r7, #20
    511e:	46bd      	mov	sp, r7
    5120:	f85d 7b04 	ldr.w	r7, [sp], #4
    5124:	4770      	bx	lr

00005126 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    5126:	b480      	push	{r7}
    5128:	b083      	sub	sp, #12
    512a:	af00      	add	r7, sp, #0
    512c:	6078      	str	r0, [r7, #4]
    512e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    5130:	687b      	ldr	r3, [r7, #4]
    5132:	699a      	ldr	r2, [r3, #24]
    5134:	683b      	ldr	r3, [r7, #0]
    5136:	431a      	orrs	r2, r3
    5138:	687b      	ldr	r3, [r7, #4]
    513a:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    513c:	bf00      	nop
    513e:	370c      	adds	r7, #12
    5140:	46bd      	mov	sp, r7
    5142:	f85d 7b04 	ldr.w	r7, [sp], #4
    5146:	4770      	bx	lr

00005148 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    5148:	b480      	push	{r7}
    514a:	b083      	sub	sp, #12
    514c:	af00      	add	r7, sp, #0
    514e:	6078      	str	r0, [r7, #4]
    5150:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    5152:	687b      	ldr	r3, [r7, #4]
    5154:	683a      	ldr	r2, [r7, #0]
    5156:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5158:	bf00      	nop
    515a:	370c      	adds	r7, #12
    515c:	46bd      	mov	sp, r7
    515e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5162:	4770      	bx	lr

00005164 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    5164:	b480      	push	{r7}
    5166:	b083      	sub	sp, #12
    5168:	af00      	add	r7, sp, #0
    516a:	6078      	str	r0, [r7, #4]
    516c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    516e:	687b      	ldr	r3, [r7, #4]
    5170:	683a      	ldr	r2, [r7, #0]
    5172:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    5174:	bf00      	nop
    5176:	370c      	adds	r7, #12
    5178:	46bd      	mov	sp, r7
    517a:	f85d 7b04 	ldr.w	r7, [sp], #4
    517e:	4770      	bx	lr

00005180 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    5180:	b480      	push	{r7}
    5182:	b083      	sub	sp, #12
    5184:	af00      	add	r7, sp, #0
    5186:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    5188:	687b      	ldr	r3, [r7, #4]
    518a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    518c:	4618      	mov	r0, r3
    518e:	370c      	adds	r7, #12
    5190:	46bd      	mov	sp, r7
    5192:	f85d 7b04 	ldr.w	r7, [sp], #4
    5196:	4770      	bx	lr

00005198 <hri_can_write_IE_RF0NE_bit>:
	tmp = (tmp & CAN_IE_RF0NE) >> CAN_IE_RF0NE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_RF0NE_bit(const void *const hw, bool value)
{
    5198:	b480      	push	{r7}
    519a:	b085      	sub	sp, #20
    519c:	af00      	add	r7, sp, #0
    519e:	6078      	str	r0, [r7, #4]
    51a0:	460b      	mov	r3, r1
    51a2:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    51a4:	687b      	ldr	r3, [r7, #4]
    51a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    51a8:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_RF0NE;
    51aa:	68fb      	ldr	r3, [r7, #12]
    51ac:	f023 0301 	bic.w	r3, r3, #1
    51b0:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_RF0NE_Pos;
    51b2:	78fb      	ldrb	r3, [r7, #3]
    51b4:	68fa      	ldr	r2, [r7, #12]
    51b6:	4313      	orrs	r3, r2
    51b8:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    51ba:	687b      	ldr	r3, [r7, #4]
    51bc:	68fa      	ldr	r2, [r7, #12]
    51be:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    51c0:	bf00      	nop
    51c2:	3714      	adds	r7, #20
    51c4:	46bd      	mov	sp, r7
    51c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    51ca:	4770      	bx	lr

000051cc <hri_can_write_IE_TCE_bit>:
	tmp = (tmp & CAN_IE_TCE) >> CAN_IE_TCE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_TCE_bit(const void *const hw, bool value)
{
    51cc:	b480      	push	{r7}
    51ce:	b085      	sub	sp, #20
    51d0:	af00      	add	r7, sp, #0
    51d2:	6078      	str	r0, [r7, #4]
    51d4:	460b      	mov	r3, r1
    51d6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    51d8:	687b      	ldr	r3, [r7, #4]
    51da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    51dc:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_TCE;
    51de:	68fb      	ldr	r3, [r7, #12]
    51e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    51e4:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_TCE_Pos;
    51e6:	78fb      	ldrb	r3, [r7, #3]
    51e8:	025b      	lsls	r3, r3, #9
    51ea:	461a      	mov	r2, r3
    51ec:	68fb      	ldr	r3, [r7, #12]
    51ee:	4313      	orrs	r3, r2
    51f0:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    51f2:	687b      	ldr	r3, [r7, #4]
    51f4:	68fa      	ldr	r2, [r7, #12]
    51f6:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    51f8:	bf00      	nop
    51fa:	3714      	adds	r7, #20
    51fc:	46bd      	mov	sp, r7
    51fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5202:	4770      	bx	lr

00005204 <hri_can_get_IE_reg>:
	((Can *)hw)->IE.reg |= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ie_reg_t hri_can_get_IE_reg(const void *const hw, hri_can_ie_reg_t mask)
{
    5204:	b480      	push	{r7}
    5206:	b085      	sub	sp, #20
    5208:	af00      	add	r7, sp, #0
    520a:	6078      	str	r0, [r7, #4]
    520c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Can *)hw)->IE.reg;
    520e:	687b      	ldr	r3, [r7, #4]
    5210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5212:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5214:	68fa      	ldr	r2, [r7, #12]
    5216:	683b      	ldr	r3, [r7, #0]
    5218:	4013      	ands	r3, r2
    521a:	60fb      	str	r3, [r7, #12]
	return tmp;
    521c:	68fb      	ldr	r3, [r7, #12]
}
    521e:	4618      	mov	r0, r3
    5220:	3714      	adds	r7, #20
    5222:	46bd      	mov	sp, r7
    5224:	f85d 7b04 	ldr.w	r7, [sp], #4
    5228:	4770      	bx	lr

0000522a <hri_can_write_IE_reg>:

static inline void hri_can_write_IE_reg(const void *const hw, hri_can_ie_reg_t data)
{
    522a:	b480      	push	{r7}
    522c:	b083      	sub	sp, #12
    522e:	af00      	add	r7, sp, #0
    5230:	6078      	str	r0, [r7, #4]
    5232:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IE.reg = data;
    5234:	687b      	ldr	r3, [r7, #4]
    5236:	683a      	ldr	r2, [r7, #0]
    5238:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    523a:	bf00      	nop
    523c:	370c      	adds	r7, #12
    523e:	46bd      	mov	sp, r7
    5240:	f85d 7b04 	ldr.w	r7, [sp], #4
    5244:	4770      	bx	lr

00005246 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    5246:	b480      	push	{r7}
    5248:	b083      	sub	sp, #12
    524a:	af00      	add	r7, sp, #0
    524c:	6078      	str	r0, [r7, #4]
    524e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    5250:	687b      	ldr	r3, [r7, #4]
    5252:	683a      	ldr	r2, [r7, #0]
    5254:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    5256:	bf00      	nop
    5258:	370c      	adds	r7, #12
    525a:	46bd      	mov	sp, r7
    525c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5260:	4770      	bx	lr

00005262 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    5262:	b480      	push	{r7}
    5264:	b083      	sub	sp, #12
    5266:	af00      	add	r7, sp, #0
    5268:	6078      	str	r0, [r7, #4]
    526a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    526c:	687b      	ldr	r3, [r7, #4]
    526e:	683a      	ldr	r2, [r7, #0]
    5270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    5274:	bf00      	nop
    5276:	370c      	adds	r7, #12
    5278:	46bd      	mov	sp, r7
    527a:	f85d 7b04 	ldr.w	r7, [sp], #4
    527e:	4770      	bx	lr

00005280 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    5280:	b480      	push	{r7}
    5282:	b083      	sub	sp, #12
    5284:	af00      	add	r7, sp, #0
    5286:	6078      	str	r0, [r7, #4]
    5288:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    528a:	687b      	ldr	r3, [r7, #4]
    528c:	683a      	ldr	r2, [r7, #0]
    528e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    5292:	bf00      	nop
    5294:	370c      	adds	r7, #12
    5296:	46bd      	mov	sp, r7
    5298:	f85d 7b04 	ldr.w	r7, [sp], #4
    529c:	4770      	bx	lr

0000529e <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    529e:	b480      	push	{r7}
    52a0:	b083      	sub	sp, #12
    52a2:	af00      	add	r7, sp, #0
    52a4:	6078      	str	r0, [r7, #4]
    52a6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    52a8:	687b      	ldr	r3, [r7, #4]
    52aa:	683a      	ldr	r2, [r7, #0]
    52ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    52b0:	bf00      	nop
    52b2:	370c      	adds	r7, #12
    52b4:	46bd      	mov	sp, r7
    52b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    52ba:	4770      	bx	lr

000052bc <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    52bc:	b480      	push	{r7}
    52be:	b083      	sub	sp, #12
    52c0:	af00      	add	r7, sp, #0
    52c2:	6078      	str	r0, [r7, #4]
    52c4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    52c6:	687b      	ldr	r3, [r7, #4]
    52c8:	683a      	ldr	r2, [r7, #0]
    52ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    52ce:	bf00      	nop
    52d0:	370c      	adds	r7, #12
    52d2:	46bd      	mov	sp, r7
    52d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    52d8:	4770      	bx	lr

000052da <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    52da:	b480      	push	{r7}
    52dc:	b083      	sub	sp, #12
    52de:	af00      	add	r7, sp, #0
    52e0:	6078      	str	r0, [r7, #4]
    52e2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    52e4:	687b      	ldr	r3, [r7, #4]
    52e6:	683a      	ldr	r2, [r7, #0]
    52e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    52ec:	bf00      	nop
    52ee:	370c      	adds	r7, #12
    52f0:	46bd      	mov	sp, r7
    52f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    52f6:	4770      	bx	lr

000052f8 <hri_can_write_RXF0A_F0AI_bf>:
	tmp = (tmp & CAN_RXF0A_F0AI(mask)) >> CAN_RXF0A_F0AI_Pos;
	return tmp;
}

static inline void hri_can_write_RXF0A_F0AI_bf(const void *const hw, hri_can_rxf0a_reg_t data)
{
    52f8:	b480      	push	{r7}
    52fa:	b085      	sub	sp, #20
    52fc:	af00      	add	r7, sp, #0
    52fe:	6078      	str	r0, [r7, #4]
    5300:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->RXF0A.reg;
    5302:	687b      	ldr	r3, [r7, #4]
    5304:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    5308:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_RXF0A_F0AI_Msk;
    530a:	68fb      	ldr	r3, [r7, #12]
    530c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    5310:	60fb      	str	r3, [r7, #12]
	tmp |= CAN_RXF0A_F0AI(data);
    5312:	683b      	ldr	r3, [r7, #0]
    5314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5318:	68fa      	ldr	r2, [r7, #12]
    531a:	4313      	orrs	r3, r2
    531c:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->RXF0A.reg = tmp;
    531e:	687b      	ldr	r3, [r7, #4]
    5320:	68fa      	ldr	r2, [r7, #12]
    5322:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	CAN_CRITICAL_SECTION_LEAVE();
}
    5326:	bf00      	nop
    5328:	3714      	adds	r7, #20
    532a:	46bd      	mov	sp, r7
    532c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5330:	4770      	bx	lr

00005332 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    5332:	b480      	push	{r7}
    5334:	b083      	sub	sp, #12
    5336:	af00      	add	r7, sp, #0
    5338:	6078      	str	r0, [r7, #4]
    533a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    533c:	687b      	ldr	r3, [r7, #4]
    533e:	683a      	ldr	r2, [r7, #0]
    5340:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    5344:	bf00      	nop
    5346:	370c      	adds	r7, #12
    5348:	46bd      	mov	sp, r7
    534a:	f85d 7b04 	ldr.w	r7, [sp], #4
    534e:	4770      	bx	lr

00005350 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    5350:	b480      	push	{r7}
    5352:	b083      	sub	sp, #12
    5354:	af00      	add	r7, sp, #0
    5356:	6078      	str	r0, [r7, #4]
    5358:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    535a:	687b      	ldr	r3, [r7, #4]
    535c:	683a      	ldr	r2, [r7, #0]
    535e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5362:	bf00      	nop
    5364:	370c      	adds	r7, #12
    5366:	46bd      	mov	sp, r7
    5368:	f85d 7b04 	ldr.w	r7, [sp], #4
    536c:	4770      	bx	lr

0000536e <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    536e:	b480      	push	{r7}
    5370:	b083      	sub	sp, #12
    5372:	af00      	add	r7, sp, #0
    5374:	6078      	str	r0, [r7, #4]
    5376:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    5378:	687b      	ldr	r3, [r7, #4]
    537a:	683a      	ldr	r2, [r7, #0]
    537c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    5380:	bf00      	nop
    5382:	370c      	adds	r7, #12
    5384:	46bd      	mov	sp, r7
    5386:	f85d 7b04 	ldr.w	r7, [sp], #4
    538a:	4770      	bx	lr

0000538c <hri_can_write_TXBAR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBAR_reg(const void *const hw, hri_can_txbar_reg_t data)
{
    538c:	b480      	push	{r7}
    538e:	b083      	sub	sp, #12
    5390:	af00      	add	r7, sp, #0
    5392:	6078      	str	r0, [r7, #4]
    5394:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBAR.reg = data;
    5396:	687b      	ldr	r3, [r7, #4]
    5398:	683a      	ldr	r2, [r7, #0]
    539a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	CAN_CRITICAL_SECTION_LEAVE();
}
    539e:	bf00      	nop
    53a0:	370c      	adds	r7, #12
    53a2:	46bd      	mov	sp, r7
    53a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    53a8:	4770      	bx	lr

000053aa <hri_can_write_TXBTIE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBTIE_reg(const void *const hw, hri_can_txbtie_reg_t data)
{
    53aa:	b480      	push	{r7}
    53ac:	b083      	sub	sp, #12
    53ae:	af00      	add	r7, sp, #0
    53b0:	6078      	str	r0, [r7, #4]
    53b2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBTIE.reg = data;
    53b4:	687b      	ldr	r3, [r7, #4]
    53b6:	683a      	ldr	r2, [r7, #0]
    53b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	CAN_CRITICAL_SECTION_LEAVE();
}
    53bc:	bf00      	nop
    53be:	370c      	adds	r7, #12
    53c0:	46bd      	mov	sp, r7
    53c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    53c6:	4770      	bx	lr

000053c8 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    53c8:	b480      	push	{r7}
    53ca:	b083      	sub	sp, #12
    53cc:	af00      	add	r7, sp, #0
    53ce:	6078      	str	r0, [r7, #4]
    53d0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    53d2:	687b      	ldr	r3, [r7, #4]
    53d4:	683a      	ldr	r2, [r7, #0]
    53d6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    53da:	bf00      	nop
    53dc:	370c      	adds	r7, #12
    53de:	46bd      	mov	sp, r7
    53e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    53e4:	4770      	bx	lr
	...

000053e8 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    53e8:	b580      	push	{r7, lr}
    53ea:	b082      	sub	sp, #8
    53ec:	af00      	add	r7, sp, #0
    53ee:	6078      	str	r0, [r7, #4]
    53f0:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    53f2:	687b      	ldr	r3, [r7, #4]
    53f4:	683a      	ldr	r2, [r7, #0]
    53f6:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    53f8:	687b      	ldr	r3, [r7, #4]
    53fa:	681b      	ldr	r3, [r3, #0]
    53fc:	4618      	mov	r0, r3
    53fe:	4b56      	ldr	r3, [pc, #344]	; (5558 <_can_async_init+0x170>)
    5400:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    5402:	bf00      	nop
    5404:	687b      	ldr	r3, [r7, #4]
    5406:	681b      	ldr	r3, [r3, #0]
    5408:	4618      	mov	r0, r3
    540a:	4b54      	ldr	r3, [pc, #336]	; (555c <_can_async_init+0x174>)
    540c:	4798      	blx	r3
    540e:	4603      	mov	r3, r0
    5410:	f083 0301 	eor.w	r3, r3, #1
    5414:	b2db      	uxtb	r3, r3
    5416:	2b00      	cmp	r3, #0
    5418:	d1f4      	bne.n	5404 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    541a:	687b      	ldr	r3, [r7, #4]
    541c:	681b      	ldr	r3, [r3, #0]
    541e:	4618      	mov	r0, r3
    5420:	4b4f      	ldr	r3, [pc, #316]	; (5560 <_can_async_init+0x178>)
    5422:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    5424:	683b      	ldr	r3, [r7, #0]
    5426:	4a4f      	ldr	r2, [pc, #316]	; (5564 <_can_async_init+0x17c>)
    5428:	4293      	cmp	r3, r2
    542a:	d17c      	bne.n	5526 <_can_async_init+0x13e>
		_can1_dev    = dev;
    542c:	4a4e      	ldr	r2, [pc, #312]	; (5568 <_can_async_init+0x180>)
    542e:	687b      	ldr	r3, [r7, #4]
    5430:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    5432:	687b      	ldr	r3, [r7, #4]
    5434:	4a4d      	ldr	r2, [pc, #308]	; (556c <_can_async_init+0x184>)
    5436:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    5438:	687b      	ldr	r3, [r7, #4]
    543a:	681b      	ldr	r3, [r3, #0]
    543c:	f44f 7100 	mov.w	r1, #512	; 0x200
    5440:	4618      	mov	r0, r3
    5442:	4b4b      	ldr	r3, [pc, #300]	; (5570 <_can_async_init+0x188>)
    5444:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    5446:	687b      	ldr	r3, [r7, #4]
    5448:	681b      	ldr	r3, [r3, #0]
    544a:	2102      	movs	r1, #2
    544c:	4618      	mov	r0, r3
    544e:	4b49      	ldr	r3, [pc, #292]	; (5574 <_can_async_init+0x18c>)
    5450:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    5452:	687b      	ldr	r3, [r7, #4]
    5454:	681b      	ldr	r3, [r3, #0]
    5456:	f640 2103 	movw	r1, #2563	; 0xa03
    545a:	4618      	mov	r0, r3
    545c:	4b46      	ldr	r3, [pc, #280]	; (5578 <_can_async_init+0x190>)
    545e:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    5460:	687b      	ldr	r3, [r7, #4]
    5462:	681b      	ldr	r3, [r3, #0]
    5464:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    5468:	4618      	mov	r0, r3
    546a:	4b44      	ldr	r3, [pc, #272]	; (557c <_can_async_init+0x194>)
    546c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    546e:	687b      	ldr	r3, [r7, #4]
    5470:	681a      	ldr	r2, [r3, #0]
    5472:	4b43      	ldr	r3, [pc, #268]	; (5580 <_can_async_init+0x198>)
    5474:	b29b      	uxth	r3, r3
    5476:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    547a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    547e:	4619      	mov	r1, r3
    5480:	4610      	mov	r0, r2
    5482:	4b40      	ldr	r3, [pc, #256]	; (5584 <_can_async_init+0x19c>)
    5484:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    5486:	687b      	ldr	r3, [r7, #4]
    5488:	681b      	ldr	r3, [r3, #0]
    548a:	2107      	movs	r1, #7
    548c:	4618      	mov	r0, r3
    548e:	4b3e      	ldr	r3, [pc, #248]	; (5588 <_can_async_init+0x1a0>)
    5490:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    5492:	687b      	ldr	r3, [r7, #4]
    5494:	681b      	ldr	r3, [r3, #0]
    5496:	2107      	movs	r1, #7
    5498:	4618      	mov	r0, r3
    549a:	4b3c      	ldr	r3, [pc, #240]	; (558c <_can_async_init+0x1a4>)
    549c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    549e:	687b      	ldr	r3, [r7, #4]
    54a0:	681a      	ldr	r2, [r3, #0]
    54a2:	4b3b      	ldr	r3, [pc, #236]	; (5590 <_can_async_init+0x1a8>)
    54a4:	b29b      	uxth	r3, r3
    54a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    54aa:	4619      	mov	r1, r3
    54ac:	4610      	mov	r0, r2
    54ae:	4b39      	ldr	r3, [pc, #228]	; (5594 <_can_async_init+0x1ac>)
    54b0:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    54b2:	687b      	ldr	r3, [r7, #4]
    54b4:	681a      	ldr	r2, [r3, #0]
    54b6:	4b38      	ldr	r3, [pc, #224]	; (5598 <_can_async_init+0x1b0>)
    54b8:	b29b      	uxth	r3, r3
    54ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    54be:	4619      	mov	r1, r3
    54c0:	4610      	mov	r0, r2
    54c2:	4b36      	ldr	r3, [pc, #216]	; (559c <_can_async_init+0x1b4>)
    54c4:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    54c6:	687b      	ldr	r3, [r7, #4]
    54c8:	681b      	ldr	r3, [r3, #0]
    54ca:	2108      	movs	r1, #8
    54cc:	4618      	mov	r0, r3
    54ce:	4b34      	ldr	r3, [pc, #208]	; (55a0 <_can_async_init+0x1b8>)
    54d0:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    54d2:	687b      	ldr	r3, [r7, #4]
    54d4:	681a      	ldr	r2, [r3, #0]
    54d6:	4b33      	ldr	r3, [pc, #204]	; (55a4 <_can_async_init+0x1bc>)
    54d8:	b29b      	uxth	r3, r3
    54da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    54de:	4619      	mov	r1, r3
    54e0:	4610      	mov	r0, r2
    54e2:	4b31      	ldr	r3, [pc, #196]	; (55a8 <_can_async_init+0x1c0>)
    54e4:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    54e6:	687b      	ldr	r3, [r7, #4]
    54e8:	681a      	ldr	r2, [r3, #0]
    54ea:	4b30      	ldr	r3, [pc, #192]	; (55ac <_can_async_init+0x1c4>)
    54ec:	b29b      	uxth	r3, r3
    54ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    54f2:	4619      	mov	r1, r3
    54f4:	4610      	mov	r0, r2
    54f6:	4b2e      	ldr	r3, [pc, #184]	; (55b0 <_can_async_init+0x1c8>)
    54f8:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    54fa:	687b      	ldr	r3, [r7, #4]
    54fc:	681b      	ldr	r3, [r3, #0]
    54fe:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    5502:	4618      	mov	r0, r3
    5504:	4b2b      	ldr	r3, [pc, #172]	; (55b4 <_can_async_init+0x1cc>)
    5506:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    5508:	204f      	movs	r0, #79	; 0x4f
    550a:	4b2b      	ldr	r3, [pc, #172]	; (55b8 <_can_async_init+0x1d0>)
    550c:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    550e:	204f      	movs	r0, #79	; 0x4f
    5510:	4b2a      	ldr	r3, [pc, #168]	; (55bc <_can_async_init+0x1d4>)
    5512:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    5514:	204f      	movs	r0, #79	; 0x4f
    5516:	4b2a      	ldr	r3, [pc, #168]	; (55c0 <_can_async_init+0x1d8>)
    5518:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    551a:	687b      	ldr	r3, [r7, #4]
    551c:	681b      	ldr	r3, [r3, #0]
    551e:	2101      	movs	r1, #1
    5520:	4618      	mov	r0, r3
    5522:	4b28      	ldr	r3, [pc, #160]	; (55c4 <_can_async_init+0x1dc>)
    5524:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    5526:	687b      	ldr	r3, [r7, #4]
    5528:	681b      	ldr	r3, [r3, #0]
    552a:	4618      	mov	r0, r3
    552c:	4b26      	ldr	r3, [pc, #152]	; (55c8 <_can_async_init+0x1e0>)
    552e:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    5530:	687b      	ldr	r3, [r7, #4]
    5532:	681b      	ldr	r3, [r3, #0]
    5534:	4618      	mov	r0, r3
    5536:	4b25      	ldr	r3, [pc, #148]	; (55cc <_can_async_init+0x1e4>)
    5538:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    553a:	bf00      	nop
    553c:	687b      	ldr	r3, [r7, #4]
    553e:	681b      	ldr	r3, [r3, #0]
    5540:	4618      	mov	r0, r3
    5542:	4b06      	ldr	r3, [pc, #24]	; (555c <_can_async_init+0x174>)
    5544:	4798      	blx	r3
    5546:	4603      	mov	r3, r0
    5548:	2b00      	cmp	r3, #0
    554a:	d1f7      	bne.n	553c <_can_async_init+0x154>
	};

	return ERR_NONE;
    554c:	2300      	movs	r3, #0
}
    554e:	4618      	mov	r0, r3
    5550:	3708      	adds	r7, #8
    5552:	46bd      	mov	sp, r7
    5554:	bd80      	pop	{r7, pc}
    5556:	bf00      	nop
    5558:	00005019 	.word	0x00005019
    555c:	00005039 	.word	0x00005039
    5560:	00005087 	.word	0x00005087
    5564:	42000400 	.word	0x42000400
    5568:	20002324 	.word	0x20002324
    556c:	20000004 	.word	0x20000004
    5570:	00005127 	.word	0x00005127
    5574:	00004fe1 	.word	0x00004fe1
    5578:	00005149 	.word	0x00005149
    557c:	00004ffd 	.word	0x00004ffd
    5580:	2000e110 	.word	0x2000e110
    5584:	000052db 	.word	0x000052db
    5588:	00005333 	.word	0x00005333
    558c:	0000536f 	.word	0x0000536f
    5590:	2000e0c8 	.word	0x2000e0c8
    5594:	00005351 	.word	0x00005351
    5598:	20002284 	.word	0x20002284
    559c:	000053c9 	.word	0x000053c9
    55a0:	00005263 	.word	0x00005263
    55a4:	20002294 	.word	0x20002294
    55a8:	00005281 	.word	0x00005281
    55ac:	20002314 	.word	0x20002314
    55b0:	0000529f 	.word	0x0000529f
    55b4:	000052bd 	.word	0x000052bd
    55b8:	00004eb1 	.word	0x00004eb1
    55bc:	00004ef5 	.word	0x00004ef5
    55c0:	00004e75 	.word	0x00004e75
    55c4:	00005247 	.word	0x00005247
    55c8:	000050a7 	.word	0x000050a7
    55cc:	00005067 	.word	0x00005067

000055d0 <_can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
    55d0:	b580      	push	{r7, lr}
    55d2:	b082      	sub	sp, #8
    55d4:	af00      	add	r7, sp, #0
    55d6:	6078      	str	r0, [r7, #4]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    55d8:	687b      	ldr	r3, [r7, #4]
    55da:	681b      	ldr	r3, [r3, #0]
    55dc:	4618      	mov	r0, r3
    55de:	4b03      	ldr	r3, [pc, #12]	; (55ec <_can_async_enable+0x1c>)
    55e0:	4798      	blx	r3
	return ERR_NONE;
    55e2:	2300      	movs	r3, #0
}
    55e4:	4618      	mov	r0, r3
    55e6:	3708      	adds	r7, #8
    55e8:	46bd      	mov	sp, r7
    55ea:	bd80      	pop	{r7, pc}
    55ec:	00005067 	.word	0x00005067

000055f0 <_can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
    55f0:	b590      	push	{r4, r7, lr}
    55f2:	b089      	sub	sp, #36	; 0x24
    55f4:	af00      	add	r7, sp, #0
    55f6:	6078      	str	r0, [r7, #4]
    55f8:	6039      	str	r1, [r7, #0]
	struct _can_rx_fifo_entry *f = NULL;
    55fa:	2300      	movs	r3, #0
    55fc:	61fb      	str	r3, [r7, #28]
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
    55fe:	687b      	ldr	r3, [r7, #4]
    5600:	681b      	ldr	r3, [r3, #0]
    5602:	4618      	mov	r0, r3
    5604:	4b37      	ldr	r3, [pc, #220]	; (56e4 <_can_async_read+0xf4>)
    5606:	4798      	blx	r3
    5608:	4603      	mov	r3, r0
    560a:	2b00      	cmp	r3, #0
    560c:	d102      	bne.n	5614 <_can_async_read+0x24>
		return ERR_NOT_FOUND;
    560e:	f06f 0309 	mvn.w	r3, #9
    5612:	e063      	b.n	56dc <_can_async_read+0xec>
	}

	get_index = hri_can_read_RXF0S_F0GI_bf(dev->hw);
    5614:	687b      	ldr	r3, [r7, #4]
    5616:	681b      	ldr	r3, [r3, #0]
    5618:	4618      	mov	r0, r3
    561a:	4b33      	ldr	r3, [pc, #204]	; (56e8 <_can_async_read+0xf8>)
    561c:	4798      	blx	r3
    561e:	61b8      	str	r0, [r7, #24]
	if (dev->hw == CAN0) {
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    5620:	687b      	ldr	r3, [r7, #4]
    5622:	681b      	ldr	r3, [r3, #0]
    5624:	4a31      	ldr	r2, [pc, #196]	; (56ec <_can_async_read+0xfc>)
    5626:	4293      	cmp	r3, r2
    5628:	d108      	bne.n	563c <_can_async_read+0x4c>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
    562a:	69ba      	ldr	r2, [r7, #24]
    562c:	4613      	mov	r3, r2
    562e:	00db      	lsls	r3, r3, #3
    5630:	4413      	add	r3, r2
    5632:	00db      	lsls	r3, r3, #3
    5634:	461a      	mov	r2, r3
    5636:	4b2e      	ldr	r3, [pc, #184]	; (56f0 <_can_async_read+0x100>)
    5638:	4413      	add	r3, r2
    563a:	61fb      	str	r3, [r7, #28]
	}
#endif

	if (f == NULL) {
    563c:	69fb      	ldr	r3, [r7, #28]
    563e:	2b00      	cmp	r3, #0
    5640:	d102      	bne.n	5648 <_can_async_read+0x58>
		return ERR_NO_RESOURCE;
    5642:	f06f 031b 	mvn.w	r3, #27
    5646:	e049      	b.n	56dc <_can_async_read+0xec>
	}

	if (f->R0.bit.XTD == 1) {
    5648:	69fb      	ldr	r3, [r7, #28]
    564a:	681b      	ldr	r3, [r3, #0]
    564c:	f3c3 7380 	ubfx	r3, r3, #30, #1
    5650:	b2db      	uxtb	r3, r3
    5652:	2b01      	cmp	r3, #1
    5654:	d10a      	bne.n	566c <_can_async_read+0x7c>
		msg->fmt = CAN_FMT_EXTID;
    5656:	683b      	ldr	r3, [r7, #0]
    5658:	2201      	movs	r2, #1
    565a:	735a      	strb	r2, [r3, #13]
		msg->id  = f->R0.bit.ID;
    565c:	69fb      	ldr	r3, [r7, #28]
    565e:	681b      	ldr	r3, [r3, #0]
    5660:	f3c3 031c 	ubfx	r3, r3, #0, #29
    5664:	461a      	mov	r2, r3
    5666:	683b      	ldr	r3, [r7, #0]
    5668:	601a      	str	r2, [r3, #0]
    566a:	e00a      	b.n	5682 <_can_async_read+0x92>
	} else {
		msg->fmt = CAN_FMT_STDID;
    566c:	683b      	ldr	r3, [r7, #0]
    566e:	2200      	movs	r2, #0
    5670:	735a      	strb	r2, [r3, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
    5672:	69fb      	ldr	r3, [r7, #28]
    5674:	681b      	ldr	r3, [r3, #0]
    5676:	f3c3 031c 	ubfx	r3, r3, #0, #29
    567a:	149b      	asrs	r3, r3, #18
    567c:	461a      	mov	r2, r3
    567e:	683b      	ldr	r3, [r7, #0]
    5680:	601a      	str	r2, [r3, #0]
	}

	if (f->R0.bit.RTR == 1) {
    5682:	69fb      	ldr	r3, [r7, #28]
    5684:	681b      	ldr	r3, [r3, #0]
    5686:	f3c3 7340 	ubfx	r3, r3, #29, #1
    568a:	b2db      	uxtb	r3, r3
    568c:	2b01      	cmp	r3, #1
    568e:	d102      	bne.n	5696 <_can_async_read+0xa6>
		msg->type = CAN_TYPE_REMOTE;
    5690:	683b      	ldr	r3, [r7, #0]
    5692:	2201      	movs	r2, #1
    5694:	711a      	strb	r2, [r3, #4]
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
    5696:	4b17      	ldr	r3, [pc, #92]	; (56f4 <_can_async_read+0x104>)
    5698:	f107 0408 	add.w	r4, r7, #8
    569c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    569e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
    56a2:	69fb      	ldr	r3, [r7, #28]
    56a4:	685b      	ldr	r3, [r3, #4]
    56a6:	f3c3 4303 	ubfx	r3, r3, #16, #4
    56aa:	b2db      	uxtb	r3, r3
    56ac:	f107 0220 	add.w	r2, r7, #32
    56b0:	4413      	add	r3, r2
    56b2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
    56b6:	683b      	ldr	r3, [r7, #0]
    56b8:	731a      	strb	r2, [r3, #12]

	memcpy(msg->data, f->data, msg->len);
    56ba:	683b      	ldr	r3, [r7, #0]
    56bc:	6898      	ldr	r0, [r3, #8]
    56be:	69fb      	ldr	r3, [r7, #28]
    56c0:	f103 0108 	add.w	r1, r3, #8
    56c4:	683b      	ldr	r3, [r7, #0]
    56c6:	7b1b      	ldrb	r3, [r3, #12]
    56c8:	461a      	mov	r2, r3
    56ca:	4b0b      	ldr	r3, [pc, #44]	; (56f8 <_can_async_read+0x108>)
    56cc:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
    56ce:	687b      	ldr	r3, [r7, #4]
    56d0:	681b      	ldr	r3, [r3, #0]
    56d2:	69b9      	ldr	r1, [r7, #24]
    56d4:	4618      	mov	r0, r3
    56d6:	4b09      	ldr	r3, [pc, #36]	; (56fc <_can_async_read+0x10c>)
    56d8:	4798      	blx	r3

	return ERR_NONE;
    56da:	2300      	movs	r3, #0
}
    56dc:	4618      	mov	r0, r3
    56de:	3724      	adds	r7, #36	; 0x24
    56e0:	46bd      	mov	sp, r7
    56e2:	bd90      	pop	{r4, r7, pc}
    56e4:	00004f59 	.word	0x00004f59
    56e8:	00004f77 	.word	0x00004f77
    56ec:	42000400 	.word	0x42000400
    56f0:	2000e110 	.word	0x2000e110
    56f4:	0001acbc 	.word	0x0001acbc
    56f8:	0001a635 	.word	0x0001a635
    56fc:	000052f9 	.word	0x000052f9

00005700 <_can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
    5700:	b590      	push	{r4, r7, lr}
    5702:	b085      	sub	sp, #20
    5704:	af00      	add	r7, sp, #0
    5706:	6078      	str	r0, [r7, #4]
    5708:	6039      	str	r1, [r7, #0]
	struct _can_tx_fifo_entry *f = NULL;
    570a:	2300      	movs	r3, #0
    570c:	60fb      	str	r3, [r7, #12]
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
    570e:	687b      	ldr	r3, [r7, #4]
    5710:	681b      	ldr	r3, [r3, #0]
    5712:	4618      	mov	r0, r3
    5714:	4b61      	ldr	r3, [pc, #388]	; (589c <_can_async_write+0x19c>)
    5716:	4798      	blx	r3
    5718:	4603      	mov	r3, r0
    571a:	2b00      	cmp	r3, #0
    571c:	d002      	beq.n	5724 <_can_async_write+0x24>
		return ERR_NO_RESOURCE;
    571e:	f06f 031b 	mvn.w	r3, #27
    5722:	e0b7      	b.n	5894 <_can_async_write+0x194>
	}

	put_index = hri_can_read_TXFQS_TFQPI_bf(dev->hw);
    5724:	687b      	ldr	r3, [r7, #4]
    5726:	681b      	ldr	r3, [r3, #0]
    5728:	4618      	mov	r0, r3
    572a:	4b5d      	ldr	r3, [pc, #372]	; (58a0 <_can_async_write+0x1a0>)
    572c:	4798      	blx	r3
    572e:	60b8      	str	r0, [r7, #8]
	if (dev->hw == CAN0) {
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    5730:	687b      	ldr	r3, [r7, #4]
    5732:	681b      	ldr	r3, [r3, #0]
    5734:	4a5b      	ldr	r2, [pc, #364]	; (58a4 <_can_async_write+0x1a4>)
    5736:	4293      	cmp	r3, r2
    5738:	d108      	bne.n	574c <_can_async_write+0x4c>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
    573a:	68ba      	ldr	r2, [r7, #8]
    573c:	4613      	mov	r3, r2
    573e:	00db      	lsls	r3, r3, #3
    5740:	4413      	add	r3, r2
    5742:	00db      	lsls	r3, r3, #3
    5744:	461a      	mov	r2, r3
    5746:	4b58      	ldr	r3, [pc, #352]	; (58a8 <_can_async_write+0x1a8>)
    5748:	4413      	add	r3, r2
    574a:	60fb      	str	r3, [r7, #12]
	}
#endif
	if (f == NULL) {
    574c:	68fb      	ldr	r3, [r7, #12]
    574e:	2b00      	cmp	r3, #0
    5750:	d102      	bne.n	5758 <_can_async_write+0x58>
		return ERR_NO_RESOURCE;
    5752:	f06f 031b 	mvn.w	r3, #27
    5756:	e09d      	b.n	5894 <_can_async_write+0x194>
	}

	if (msg->fmt == CAN_FMT_EXTID) {
    5758:	683b      	ldr	r3, [r7, #0]
    575a:	7b5b      	ldrb	r3, [r3, #13]
    575c:	2b01      	cmp	r3, #1
    575e:	d109      	bne.n	5774 <_can_async_write+0x74>
		f->T0.val     = msg->id;
    5760:	683b      	ldr	r3, [r7, #0]
    5762:	681a      	ldr	r2, [r3, #0]
    5764:	68fb      	ldr	r3, [r7, #12]
    5766:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
    5768:	68fa      	ldr	r2, [r7, #12]
    576a:	6813      	ldr	r3, [r2, #0]
    576c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    5770:	6013      	str	r3, [r2, #0]
    5772:	e004      	b.n	577e <_can_async_write+0x7e>
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
    5774:	683b      	ldr	r3, [r7, #0]
    5776:	681b      	ldr	r3, [r3, #0]
    5778:	049a      	lsls	r2, r3, #18
    577a:	68fb      	ldr	r3, [r7, #12]
    577c:	601a      	str	r2, [r3, #0]
	}

	if (msg->len <= 8) {
    577e:	683b      	ldr	r3, [r7, #0]
    5780:	7b1b      	ldrb	r3, [r3, #12]
    5782:	2b08      	cmp	r3, #8
    5784:	d80a      	bhi.n	579c <_can_async_write+0x9c>
		f->T1.bit.DLC = msg->len;
    5786:	683b      	ldr	r3, [r7, #0]
    5788:	7b1b      	ldrb	r3, [r3, #12]
    578a:	f003 030f 	and.w	r3, r3, #15
    578e:	b2d9      	uxtb	r1, r3
    5790:	68fa      	ldr	r2, [r7, #12]
    5792:	6853      	ldr	r3, [r2, #4]
    5794:	f361 4313 	bfi	r3, r1, #16, #4
    5798:	6053      	str	r3, [r2, #4]
    579a:	e04a      	b.n	5832 <_can_async_write+0x132>
	} else if (msg->len <= 12) {
    579c:	683b      	ldr	r3, [r7, #0]
    579e:	7b1b      	ldrb	r3, [r3, #12]
    57a0:	2b0c      	cmp	r3, #12
    57a2:	d806      	bhi.n	57b2 <_can_async_write+0xb2>
		f->T1.bit.DLC = 0x9;
    57a4:	68fa      	ldr	r2, [r7, #12]
    57a6:	6853      	ldr	r3, [r2, #4]
    57a8:	2109      	movs	r1, #9
    57aa:	f361 4313 	bfi	r3, r1, #16, #4
    57ae:	6053      	str	r3, [r2, #4]
    57b0:	e03f      	b.n	5832 <_can_async_write+0x132>
	} else if (msg->len <= 16) {
    57b2:	683b      	ldr	r3, [r7, #0]
    57b4:	7b1b      	ldrb	r3, [r3, #12]
    57b6:	2b10      	cmp	r3, #16
    57b8:	d806      	bhi.n	57c8 <_can_async_write+0xc8>
		f->T1.bit.DLC = 0xA;
    57ba:	68fa      	ldr	r2, [r7, #12]
    57bc:	6853      	ldr	r3, [r2, #4]
    57be:	210a      	movs	r1, #10
    57c0:	f361 4313 	bfi	r3, r1, #16, #4
    57c4:	6053      	str	r3, [r2, #4]
    57c6:	e034      	b.n	5832 <_can_async_write+0x132>
	} else if (msg->len <= 20) {
    57c8:	683b      	ldr	r3, [r7, #0]
    57ca:	7b1b      	ldrb	r3, [r3, #12]
    57cc:	2b14      	cmp	r3, #20
    57ce:	d806      	bhi.n	57de <_can_async_write+0xde>
		f->T1.bit.DLC = 0xB;
    57d0:	68fa      	ldr	r2, [r7, #12]
    57d2:	6853      	ldr	r3, [r2, #4]
    57d4:	210b      	movs	r1, #11
    57d6:	f361 4313 	bfi	r3, r1, #16, #4
    57da:	6053      	str	r3, [r2, #4]
    57dc:	e029      	b.n	5832 <_can_async_write+0x132>
	} else if (msg->len <= 24) {
    57de:	683b      	ldr	r3, [r7, #0]
    57e0:	7b1b      	ldrb	r3, [r3, #12]
    57e2:	2b18      	cmp	r3, #24
    57e4:	d806      	bhi.n	57f4 <_can_async_write+0xf4>
		f->T1.bit.DLC = 0xC;
    57e6:	68fa      	ldr	r2, [r7, #12]
    57e8:	6853      	ldr	r3, [r2, #4]
    57ea:	210c      	movs	r1, #12
    57ec:	f361 4313 	bfi	r3, r1, #16, #4
    57f0:	6053      	str	r3, [r2, #4]
    57f2:	e01e      	b.n	5832 <_can_async_write+0x132>
	} else if (msg->len <= 32) {
    57f4:	683b      	ldr	r3, [r7, #0]
    57f6:	7b1b      	ldrb	r3, [r3, #12]
    57f8:	2b20      	cmp	r3, #32
    57fa:	d806      	bhi.n	580a <_can_async_write+0x10a>
		f->T1.bit.DLC = 0xD;
    57fc:	68fa      	ldr	r2, [r7, #12]
    57fe:	6853      	ldr	r3, [r2, #4]
    5800:	210d      	movs	r1, #13
    5802:	f361 4313 	bfi	r3, r1, #16, #4
    5806:	6053      	str	r3, [r2, #4]
    5808:	e013      	b.n	5832 <_can_async_write+0x132>
	} else if (msg->len <= 48) {
    580a:	683b      	ldr	r3, [r7, #0]
    580c:	7b1b      	ldrb	r3, [r3, #12]
    580e:	2b30      	cmp	r3, #48	; 0x30
    5810:	d806      	bhi.n	5820 <_can_async_write+0x120>
		f->T1.bit.DLC = 0xE;
    5812:	68fa      	ldr	r2, [r7, #12]
    5814:	6853      	ldr	r3, [r2, #4]
    5816:	210e      	movs	r1, #14
    5818:	f361 4313 	bfi	r3, r1, #16, #4
    581c:	6053      	str	r3, [r2, #4]
    581e:	e008      	b.n	5832 <_can_async_write+0x132>
	} else if (msg->len <= 64) {
    5820:	683b      	ldr	r3, [r7, #0]
    5822:	7b1b      	ldrb	r3, [r3, #12]
    5824:	2b40      	cmp	r3, #64	; 0x40
    5826:	d804      	bhi.n	5832 <_can_async_write+0x132>
		f->T1.bit.DLC = 0xF;
    5828:	68fa      	ldr	r2, [r7, #12]
    582a:	6853      	ldr	r3, [r2, #4]
    582c:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    5830:	6053      	str	r3, [r2, #4]
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
    5832:	687b      	ldr	r3, [r7, #4]
    5834:	681b      	ldr	r3, [r3, #0]
    5836:	4618      	mov	r0, r3
    5838:	4b1c      	ldr	r3, [pc, #112]	; (58ac <_can_async_write+0x1ac>)
    583a:	4798      	blx	r3
    583c:	4603      	mov	r3, r0
    583e:	4619      	mov	r1, r3
    5840:	68fa      	ldr	r2, [r7, #12]
    5842:	6853      	ldr	r3, [r2, #4]
    5844:	f361 5355 	bfi	r3, r1, #21, #1
    5848:	6053      	str	r3, [r2, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
    584a:	687b      	ldr	r3, [r7, #4]
    584c:	681b      	ldr	r3, [r3, #0]
    584e:	4618      	mov	r0, r3
    5850:	4b17      	ldr	r3, [pc, #92]	; (58b0 <_can_async_write+0x1b0>)
    5852:	4798      	blx	r3
    5854:	4603      	mov	r3, r0
    5856:	4619      	mov	r1, r3
    5858:	68fa      	ldr	r2, [r7, #12]
    585a:	6853      	ldr	r3, [r2, #4]
    585c:	f361 5314 	bfi	r3, r1, #20, #1
    5860:	6053      	str	r3, [r2, #4]

	memcpy(f->data, msg->data, msg->len);
    5862:	68fb      	ldr	r3, [r7, #12]
    5864:	f103 0008 	add.w	r0, r3, #8
    5868:	683b      	ldr	r3, [r7, #0]
    586a:	6899      	ldr	r1, [r3, #8]
    586c:	683b      	ldr	r3, [r7, #0]
    586e:	7b1b      	ldrb	r3, [r3, #12]
    5870:	461a      	mov	r2, r3
    5872:	4b10      	ldr	r3, [pc, #64]	; (58b4 <_can_async_write+0x1b4>)
    5874:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
    5876:	687b      	ldr	r3, [r7, #4]
    5878:	681c      	ldr	r4, [r3, #0]
    587a:	687b      	ldr	r3, [r7, #4]
    587c:	681b      	ldr	r3, [r3, #0]
    587e:	4618      	mov	r0, r3
    5880:	4b07      	ldr	r3, [pc, #28]	; (58a0 <_can_async_write+0x1a0>)
    5882:	4798      	blx	r3
    5884:	4602      	mov	r2, r0
    5886:	2301      	movs	r3, #1
    5888:	4093      	lsls	r3, r2
    588a:	4619      	mov	r1, r3
    588c:	4620      	mov	r0, r4
    588e:	4b0a      	ldr	r3, [pc, #40]	; (58b8 <_can_async_write+0x1b8>)
    5890:	4798      	blx	r3
	return ERR_NONE;
    5892:	2300      	movs	r3, #0
}
    5894:	4618      	mov	r0, r3
    5896:	3714      	adds	r7, #20
    5898:	46bd      	mov	sp, r7
    589a:	bd90      	pop	{r4, r7, pc}
    589c:	00004f97 	.word	0x00004f97
    58a0:	00004fc1 	.word	0x00004fc1
    58a4:	42000400 	.word	0x42000400
    58a8:	2000e0c8 	.word	0x2000e0c8
    58ac:	000050c7 	.word	0x000050c7
    58b0:	000050f7 	.word	0x000050f7
    58b4:	0001a635 	.word	0x0001a635
    58b8:	0000538d 	.word	0x0000538d

000058bc <_can_async_set_irq_state>:

/**
 * \brief Set CAN Interrupt State
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
    58bc:	b580      	push	{r7, lr}
    58be:	b084      	sub	sp, #16
    58c0:	af00      	add	r7, sp, #0
    58c2:	6078      	str	r0, [r7, #4]
    58c4:	460b      	mov	r3, r1
    58c6:	70fb      	strb	r3, [r7, #3]
    58c8:	4613      	mov	r3, r2
    58ca:	70bb      	strb	r3, [r7, #2]
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
    58cc:	78fb      	ldrb	r3, [r7, #3]
    58ce:	2b00      	cmp	r3, #0
    58d0:	d107      	bne.n	58e2 <_can_async_set_irq_state+0x26>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
    58d2:	687b      	ldr	r3, [r7, #4]
    58d4:	681b      	ldr	r3, [r3, #0]
    58d6:	78ba      	ldrb	r2, [r7, #2]
    58d8:	4611      	mov	r1, r2
    58da:	4618      	mov	r0, r3
    58dc:	4b16      	ldr	r3, [pc, #88]	; (5938 <_can_async_set_irq_state+0x7c>)
    58de:	4798      	blx	r3
	} else if (type == CAN_ASYNC_IRQ_CB) {
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
    58e0:	e026      	b.n	5930 <_can_async_set_irq_state+0x74>
	} else if (type == CAN_ASYNC_TX_CB) {
    58e2:	78fb      	ldrb	r3, [r7, #3]
    58e4:	2b01      	cmp	r3, #1
    58e6:	d10e      	bne.n	5906 <_can_async_set_irq_state+0x4a>
		hri_can_write_IE_TCE_bit(dev->hw, state);
    58e8:	687b      	ldr	r3, [r7, #4]
    58ea:	681b      	ldr	r3, [r3, #0]
    58ec:	78ba      	ldrb	r2, [r7, #2]
    58ee:	4611      	mov	r1, r2
    58f0:	4618      	mov	r0, r3
    58f2:	4b12      	ldr	r3, [pc, #72]	; (593c <_can_async_set_irq_state+0x80>)
    58f4:	4798      	blx	r3
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
    58f6:	687b      	ldr	r3, [r7, #4]
    58f8:	681b      	ldr	r3, [r3, #0]
    58fa:	f04f 31ff 	mov.w	r1, #4294967295
    58fe:	4618      	mov	r0, r3
    5900:	4b0f      	ldr	r3, [pc, #60]	; (5940 <_can_async_set_irq_state+0x84>)
    5902:	4798      	blx	r3
	return;
    5904:	e014      	b.n	5930 <_can_async_set_irq_state+0x74>
	} else if (type == CAN_ASYNC_IRQ_CB) {
    5906:	78fb      	ldrb	r3, [r7, #3]
    5908:	2b02      	cmp	r3, #2
    590a:	d111      	bne.n	5930 <_can_async_set_irq_state+0x74>
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
    590c:	687b      	ldr	r3, [r7, #4]
    590e:	681b      	ldr	r3, [r3, #0]
    5910:	f240 2101 	movw	r1, #513	; 0x201
    5914:	4618      	mov	r0, r3
    5916:	4b0b      	ldr	r3, [pc, #44]	; (5944 <_can_async_set_irq_state+0x88>)
    5918:	4798      	blx	r3
    591a:	60f8      	str	r0, [r7, #12]
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
    591c:	687b      	ldr	r3, [r7, #4]
    591e:	681a      	ldr	r2, [r3, #0]
    5920:	68fb      	ldr	r3, [r7, #12]
    5922:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    5926:	4619      	mov	r1, r3
    5928:	4610      	mov	r0, r2
    592a:	4b07      	ldr	r3, [pc, #28]	; (5948 <_can_async_set_irq_state+0x8c>)
    592c:	4798      	blx	r3
	return;
    592e:	bf00      	nop
    5930:	bf00      	nop
}
    5932:	3710      	adds	r7, #16
    5934:	46bd      	mov	sp, r7
    5936:	bd80      	pop	{r7, pc}
    5938:	00005199 	.word	0x00005199
    593c:	000051cd 	.word	0x000051cd
    5940:	000053ab 	.word	0x000053ab
    5944:	00005205 	.word	0x00005205
    5948:	0000522b 	.word	0x0000522b

0000594c <_can_async_set_filter>:
/**
 * \brief Set CAN to the specified mode
 */
int32_t _can_async_set_filter(struct _can_async_device *const dev, uint8_t index, enum can_format fmt,
                              struct can_filter *filter)
{
    594c:	b480      	push	{r7}
    594e:	b087      	sub	sp, #28
    5950:	af00      	add	r7, sp, #0
    5952:	60f8      	str	r0, [r7, #12]
    5954:	607b      	str	r3, [r7, #4]
    5956:	460b      	mov	r3, r1
    5958:	72fb      	strb	r3, [r7, #11]
    595a:	4613      	mov	r3, r2
    595c:	72bb      	strb	r3, [r7, #10]
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
    595e:	68fb      	ldr	r3, [r7, #12]
    5960:	699b      	ldr	r3, [r3, #24]
    5962:	68da      	ldr	r2, [r3, #12]
    5964:	7afb      	ldrb	r3, [r7, #11]
    5966:	009b      	lsls	r3, r3, #2
    5968:	4413      	add	r3, r2
    596a:	617b      	str	r3, [r7, #20]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
    596c:	68fb      	ldr	r3, [r7, #12]
    596e:	699b      	ldr	r3, [r3, #24]
    5970:	691a      	ldr	r2, [r3, #16]
    5972:	7afb      	ldrb	r3, [r7, #11]
    5974:	00db      	lsls	r3, r3, #3
    5976:	4413      	add	r3, r2
    5978:	613b      	str	r3, [r7, #16]

	if (fmt == CAN_FMT_STDID) {
    597a:	7abb      	ldrb	r3, [r7, #10]
    597c:	2b00      	cmp	r3, #0
    597e:	d123      	bne.n	59c8 <_can_async_set_filter+0x7c>
		if (filter == NULL) {
    5980:	687b      	ldr	r3, [r7, #4]
    5982:	2b00      	cmp	r3, #0
    5984:	d104      	bne.n	5990 <_can_async_set_filter+0x44>
			sf->S0.val = 0;
    5986:	697b      	ldr	r3, [r7, #20]
    5988:	2200      	movs	r2, #0
    598a:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    598c:	2300      	movs	r3, #0
    598e:	e03b      	b.n	5a08 <_can_async_set_filter+0xbc>
		}
		sf->S0.val       = filter->mask;
    5990:	687b      	ldr	r3, [r7, #4]
    5992:	685a      	ldr	r2, [r3, #4]
    5994:	697b      	ldr	r3, [r7, #20]
    5996:	601a      	str	r2, [r3, #0]
		sf->S0.bit.SFID1 = filter->id;
    5998:	687b      	ldr	r3, [r7, #4]
    599a:	681b      	ldr	r3, [r3, #0]
    599c:	b29b      	uxth	r3, r3
    599e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    59a2:	b299      	uxth	r1, r3
    59a4:	697a      	ldr	r2, [r7, #20]
    59a6:	6813      	ldr	r3, [r2, #0]
    59a8:	f361 431a 	bfi	r3, r1, #16, #11
    59ac:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
    59ae:	697a      	ldr	r2, [r7, #20]
    59b0:	6813      	ldr	r3, [r2, #0]
    59b2:	2102      	movs	r1, #2
    59b4:	f361 739f 	bfi	r3, r1, #30, #2
    59b8:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
    59ba:	697a      	ldr	r2, [r7, #20]
    59bc:	6813      	ldr	r3, [r2, #0]
    59be:	2101      	movs	r1, #1
    59c0:	f361 63dd 	bfi	r3, r1, #27, #3
    59c4:	6013      	str	r3, [r2, #0]
    59c6:	e01e      	b.n	5a06 <_can_async_set_filter+0xba>
	} else if (fmt == CAN_FMT_EXTID) {
    59c8:	7abb      	ldrb	r3, [r7, #10]
    59ca:	2b01      	cmp	r3, #1
    59cc:	d11b      	bne.n	5a06 <_can_async_set_filter+0xba>
		if (filter == NULL) {
    59ce:	687b      	ldr	r3, [r7, #4]
    59d0:	2b00      	cmp	r3, #0
    59d2:	d104      	bne.n	59de <_can_async_set_filter+0x92>
			ef->F0.val = 0;
    59d4:	693b      	ldr	r3, [r7, #16]
    59d6:	2200      	movs	r2, #0
    59d8:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    59da:	2300      	movs	r3, #0
    59dc:	e014      	b.n	5a08 <_can_async_set_filter+0xbc>
		}
		ef->F0.val      = filter->id;
    59de:	687b      	ldr	r3, [r7, #4]
    59e0:	681a      	ldr	r2, [r3, #0]
    59e2:	693b      	ldr	r3, [r7, #16]
    59e4:	601a      	str	r2, [r3, #0]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
    59e6:	693a      	ldr	r2, [r7, #16]
    59e8:	6813      	ldr	r3, [r2, #0]
    59ea:	2101      	movs	r1, #1
    59ec:	f361 735f 	bfi	r3, r1, #29, #3
    59f0:	6013      	str	r3, [r2, #0]
		ef->F1.val      = filter->mask;
    59f2:	687b      	ldr	r3, [r7, #4]
    59f4:	685a      	ldr	r2, [r3, #4]
    59f6:	693b      	ldr	r3, [r7, #16]
    59f8:	605a      	str	r2, [r3, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
    59fa:	693a      	ldr	r2, [r7, #16]
    59fc:	6853      	ldr	r3, [r2, #4]
    59fe:	2102      	movs	r1, #2
    5a00:	f361 739f 	bfi	r3, r1, #30, #2
    5a04:	6053      	str	r3, [r2, #4]
	}

	return ERR_NONE;
    5a06:	2300      	movs	r3, #0
}
    5a08:	4618      	mov	r0, r3
    5a0a:	371c      	adds	r7, #28
    5a0c:	46bd      	mov	sp, r7
    5a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a12:	4770      	bx	lr

00005a14 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    5a14:	b590      	push	{r4, r7, lr}
    5a16:	b083      	sub	sp, #12
    5a18:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    5a1a:	4b2c      	ldr	r3, [pc, #176]	; (5acc <CAN1_Handler+0xb8>)
    5a1c:	681b      	ldr	r3, [r3, #0]
    5a1e:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    5a20:	687b      	ldr	r3, [r7, #4]
    5a22:	681b      	ldr	r3, [r3, #0]
    5a24:	4618      	mov	r0, r3
    5a26:	4b2a      	ldr	r3, [pc, #168]	; (5ad0 <CAN1_Handler+0xbc>)
    5a28:	4798      	blx	r3
    5a2a:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    5a2c:	683b      	ldr	r3, [r7, #0]
    5a2e:	f003 0301 	and.w	r3, r3, #1
    5a32:	2b00      	cmp	r3, #0
    5a34:	d003      	beq.n	5a3e <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    5a36:	687b      	ldr	r3, [r7, #4]
    5a38:	689b      	ldr	r3, [r3, #8]
    5a3a:	6878      	ldr	r0, [r7, #4]
    5a3c:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    5a3e:	683b      	ldr	r3, [r7, #0]
    5a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
    5a44:	2b00      	cmp	r3, #0
    5a46:	d003      	beq.n	5a50 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    5a48:	687b      	ldr	r3, [r7, #4]
    5a4a:	685b      	ldr	r3, [r3, #4]
    5a4c:	6878      	ldr	r0, [r7, #4]
    5a4e:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    5a50:	683b      	ldr	r3, [r7, #0]
    5a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    5a56:	2b00      	cmp	r3, #0
    5a58:	d004      	beq.n	5a64 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    5a5a:	687b      	ldr	r3, [r7, #4]
    5a5c:	68db      	ldr	r3, [r3, #12]
    5a5e:	2103      	movs	r1, #3
    5a60:	6878      	ldr	r0, [r7, #4]
    5a62:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    5a64:	683b      	ldr	r3, [r7, #0]
    5a66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    5a6a:	2b00      	cmp	r3, #0
    5a6c:	d004      	beq.n	5a78 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    5a6e:	687b      	ldr	r3, [r7, #4]
    5a70:	68db      	ldr	r3, [r3, #12]
    5a72:	2100      	movs	r1, #0
    5a74:	6878      	ldr	r0, [r7, #4]
    5a76:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    5a78:	683b      	ldr	r3, [r7, #0]
    5a7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    5a7e:	2b00      	cmp	r3, #0
    5a80:	d00f      	beq.n	5aa2 <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    5a82:	687b      	ldr	r3, [r7, #4]
    5a84:	68dc      	ldr	r4, [r3, #12]
    5a86:	687b      	ldr	r3, [r7, #4]
    5a88:	681b      	ldr	r3, [r3, #0]
    5a8a:	4618      	mov	r0, r3
    5a8c:	4b11      	ldr	r3, [pc, #68]	; (5ad4 <CAN1_Handler+0xc0>)
    5a8e:	4798      	blx	r3
    5a90:	4603      	mov	r3, r0
    5a92:	2b00      	cmp	r3, #0
    5a94:	d001      	beq.n	5a9a <CAN1_Handler+0x86>
    5a96:	2302      	movs	r3, #2
    5a98:	e000      	b.n	5a9c <CAN1_Handler+0x88>
    5a9a:	2301      	movs	r3, #1
    5a9c:	4619      	mov	r1, r3
    5a9e:	6878      	ldr	r0, [r7, #4]
    5aa0:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    5aa2:	683b      	ldr	r3, [r7, #0]
    5aa4:	f003 0308 	and.w	r3, r3, #8
    5aa8:	2b00      	cmp	r3, #0
    5aaa:	d004      	beq.n	5ab6 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    5aac:	687b      	ldr	r3, [r7, #4]
    5aae:	68db      	ldr	r3, [r3, #12]
    5ab0:	2104      	movs	r1, #4
    5ab2:	6878      	ldr	r0, [r7, #4]
    5ab4:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    5ab6:	687b      	ldr	r3, [r7, #4]
    5ab8:	681b      	ldr	r3, [r3, #0]
    5aba:	6839      	ldr	r1, [r7, #0]
    5abc:	4618      	mov	r0, r3
    5abe:	4b06      	ldr	r3, [pc, #24]	; (5ad8 <CAN1_Handler+0xc4>)
    5ac0:	4798      	blx	r3
}
    5ac2:	bf00      	nop
    5ac4:	370c      	adds	r7, #12
    5ac6:	46bd      	mov	sp, r7
    5ac8:	bd90      	pop	{r4, r7, pc}
    5aca:	bf00      	nop
    5acc:	20002324 	.word	0x20002324
    5ad0:	00005181 	.word	0x00005181
    5ad4:	00004f31 	.word	0x00004f31
    5ad8:	00005165 	.word	0x00005165

00005adc <__NVIC_SetPendingIRQ>:
{
    5adc:	b480      	push	{r7}
    5ade:	b083      	sub	sp, #12
    5ae0:	af00      	add	r7, sp, #0
    5ae2:	4603      	mov	r3, r0
    5ae4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5aea:	2b00      	cmp	r3, #0
    5aec:	db0c      	blt.n	5b08 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5aee:	4909      	ldr	r1, [pc, #36]	; (5b14 <__NVIC_SetPendingIRQ+0x38>)
    5af0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5af4:	095b      	lsrs	r3, r3, #5
    5af6:	88fa      	ldrh	r2, [r7, #6]
    5af8:	f002 021f 	and.w	r2, r2, #31
    5afc:	2001      	movs	r0, #1
    5afe:	fa00 f202 	lsl.w	r2, r0, r2
    5b02:	3340      	adds	r3, #64	; 0x40
    5b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5b08:	bf00      	nop
    5b0a:	370c      	adds	r7, #12
    5b0c:	46bd      	mov	sp, r7
    5b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b12:	4770      	bx	lr
    5b14:	e000e100 	.word	0xe000e100

00005b18 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    5b18:	b580      	push	{r7, lr}
    5b1a:	b082      	sub	sp, #8
    5b1c:	af00      	add	r7, sp, #0
    5b1e:	4603      	mov	r3, r0
    5b20:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    5b22:	79fb      	ldrb	r3, [r7, #7]
    5b24:	b21b      	sxth	r3, r3
    5b26:	4618      	mov	r0, r3
    5b28:	4b02      	ldr	r3, [pc, #8]	; (5b34 <_irq_set+0x1c>)
    5b2a:	4798      	blx	r3
}
    5b2c:	bf00      	nop
    5b2e:	3708      	adds	r7, #8
    5b30:	46bd      	mov	sp, r7
    5b32:	bd80      	pop	{r7, pc}
    5b34:	00005add 	.word	0x00005add

00005b38 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    5b38:	b480      	push	{r7}
    5b3a:	b083      	sub	sp, #12
    5b3c:	af00      	add	r7, sp, #0
    5b3e:	4603      	mov	r3, r0
    5b40:	6039      	str	r1, [r7, #0]
    5b42:	80fb      	strh	r3, [r7, #6]
    5b44:	4613      	mov	r3, r2
    5b46:	717b      	strb	r3, [r7, #5]
	switch (power) {
    5b48:	797b      	ldrb	r3, [r7, #5]
    5b4a:	3b04      	subs	r3, #4
    5b4c:	2b05      	cmp	r3, #5
    5b4e:	d86b      	bhi.n	5c28 <_get_cycles_for_us_internal+0xf0>
    5b50:	a201      	add	r2, pc, #4	; (adr r2, 5b58 <_get_cycles_for_us_internal+0x20>)
    5b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5b56:	bf00      	nop
    5b58:	00005c07 	.word	0x00005c07
    5b5c:	00005be7 	.word	0x00005be7
    5b60:	00005bc9 	.word	0x00005bc9
    5b64:	00005bab 	.word	0x00005bab
    5b68:	00005b8d 	.word	0x00005b8d
    5b6c:	00005b71 	.word	0x00005b71
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    5b70:	88fb      	ldrh	r3, [r7, #6]
    5b72:	683a      	ldr	r2, [r7, #0]
    5b74:	4935      	ldr	r1, [pc, #212]	; (5c4c <_get_cycles_for_us_internal+0x114>)
    5b76:	fba1 1202 	umull	r1, r2, r1, r2
    5b7a:	0c92      	lsrs	r2, r2, #18
    5b7c:	fb02 f303 	mul.w	r3, r2, r3
    5b80:	3302      	adds	r3, #2
    5b82:	4a33      	ldr	r2, [pc, #204]	; (5c50 <_get_cycles_for_us_internal+0x118>)
    5b84:	fba2 2303 	umull	r2, r3, r2, r3
    5b88:	085b      	lsrs	r3, r3, #1
    5b8a:	e059      	b.n	5c40 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    5b8c:	88fb      	ldrh	r3, [r7, #6]
    5b8e:	683a      	ldr	r2, [r7, #0]
    5b90:	0952      	lsrs	r2, r2, #5
    5b92:	4930      	ldr	r1, [pc, #192]	; (5c54 <_get_cycles_for_us_internal+0x11c>)
    5b94:	fba1 1202 	umull	r1, r2, r1, r2
    5b98:	09d2      	lsrs	r2, r2, #7
    5b9a:	fb02 f303 	mul.w	r3, r2, r3
    5b9e:	331d      	adds	r3, #29
    5ba0:	4a2d      	ldr	r2, [pc, #180]	; (5c58 <_get_cycles_for_us_internal+0x120>)
    5ba2:	fba2 2303 	umull	r2, r3, r2, r3
    5ba6:	091b      	lsrs	r3, r3, #4
    5ba8:	e04a      	b.n	5c40 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    5baa:	88fb      	ldrh	r3, [r7, #6]
    5bac:	683a      	ldr	r2, [r7, #0]
    5bae:	492b      	ldr	r1, [pc, #172]	; (5c5c <_get_cycles_for_us_internal+0x124>)
    5bb0:	fba1 1202 	umull	r1, r2, r1, r2
    5bb4:	0b52      	lsrs	r2, r2, #13
    5bb6:	fb02 f303 	mul.w	r3, r2, r3
    5bba:	f203 132b 	addw	r3, r3, #299	; 0x12b
    5bbe:	4a28      	ldr	r2, [pc, #160]	; (5c60 <_get_cycles_for_us_internal+0x128>)
    5bc0:	fba2 2303 	umull	r2, r3, r2, r3
    5bc4:	095b      	lsrs	r3, r3, #5
    5bc6:	e03b      	b.n	5c40 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    5bc8:	88fb      	ldrh	r3, [r7, #6]
    5bca:	683a      	ldr	r2, [r7, #0]
    5bcc:	4925      	ldr	r1, [pc, #148]	; (5c64 <_get_cycles_for_us_internal+0x12c>)
    5bce:	fba1 1202 	umull	r1, r2, r1, r2
    5bd2:	0992      	lsrs	r2, r2, #6
    5bd4:	fb02 f303 	mul.w	r3, r2, r3
    5bd8:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    5bdc:	4a22      	ldr	r2, [pc, #136]	; (5c68 <_get_cycles_for_us_internal+0x130>)
    5bde:	fba2 2303 	umull	r2, r3, r2, r3
    5be2:	099b      	lsrs	r3, r3, #6
    5be4:	e02c      	b.n	5c40 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    5be6:	88fb      	ldrh	r3, [r7, #6]
    5be8:	683a      	ldr	r2, [r7, #0]
    5bea:	4920      	ldr	r1, [pc, #128]	; (5c6c <_get_cycles_for_us_internal+0x134>)
    5bec:	fba1 1202 	umull	r1, r2, r1, r2
    5bf0:	0952      	lsrs	r2, r2, #5
    5bf2:	fb02 f303 	mul.w	r3, r2, r3
    5bf6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    5bfa:	332f      	adds	r3, #47	; 0x2f
    5bfc:	4a1c      	ldr	r2, [pc, #112]	; (5c70 <_get_cycles_for_us_internal+0x138>)
    5bfe:	fba2 2303 	umull	r2, r3, r2, r3
    5c02:	0b5b      	lsrs	r3, r3, #13
    5c04:	e01c      	b.n	5c40 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    5c06:	88fb      	ldrh	r3, [r7, #6]
    5c08:	683a      	ldr	r2, [r7, #0]
    5c0a:	491a      	ldr	r1, [pc, #104]	; (5c74 <_get_cycles_for_us_internal+0x13c>)
    5c0c:	fba1 1202 	umull	r1, r2, r1, r2
    5c10:	08d2      	lsrs	r2, r2, #3
    5c12:	fb02 f303 	mul.w	r3, r2, r3
    5c16:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    5c1a:	f203 33df 	addw	r3, r3, #991	; 0x3df
    5c1e:	4a16      	ldr	r2, [pc, #88]	; (5c78 <_get_cycles_for_us_internal+0x140>)
    5c20:	fba2 2303 	umull	r2, r3, r2, r3
    5c24:	0c5b      	lsrs	r3, r3, #17
    5c26:	e00b      	b.n	5c40 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    5c28:	88fb      	ldrh	r3, [r7, #6]
    5c2a:	683a      	ldr	r2, [r7, #0]
    5c2c:	fb02 f303 	mul.w	r3, r2, r3
    5c30:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    5c34:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    5c38:	4a10      	ldr	r2, [pc, #64]	; (5c7c <_get_cycles_for_us_internal+0x144>)
    5c3a:	fba2 2303 	umull	r2, r3, r2, r3
    5c3e:	0c9b      	lsrs	r3, r3, #18
	}
}
    5c40:	4618      	mov	r0, r3
    5c42:	370c      	adds	r7, #12
    5c44:	46bd      	mov	sp, r7
    5c46:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c4a:	4770      	bx	lr
    5c4c:	431bde83 	.word	0x431bde83
    5c50:	aaaaaaab 	.word	0xaaaaaaab
    5c54:	0a7c5ac5 	.word	0x0a7c5ac5
    5c58:	88888889 	.word	0x88888889
    5c5c:	d1b71759 	.word	0xd1b71759
    5c60:	1b4e81b5 	.word	0x1b4e81b5
    5c64:	10624dd3 	.word	0x10624dd3
    5c68:	057619f1 	.word	0x057619f1
    5c6c:	51eb851f 	.word	0x51eb851f
    5c70:	45e7b273 	.word	0x45e7b273
    5c74:	cccccccd 	.word	0xcccccccd
    5c78:	6fd91d85 	.word	0x6fd91d85
    5c7c:	165e9f81 	.word	0x165e9f81

00005c80 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    5c80:	b580      	push	{r7, lr}
    5c82:	b082      	sub	sp, #8
    5c84:	af00      	add	r7, sp, #0
    5c86:	4603      	mov	r3, r0
    5c88:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    5c8a:	88fb      	ldrh	r3, [r7, #6]
    5c8c:	2209      	movs	r2, #9
    5c8e:	4904      	ldr	r1, [pc, #16]	; (5ca0 <_get_cycles_for_us+0x20>)
    5c90:	4618      	mov	r0, r3
    5c92:	4b04      	ldr	r3, [pc, #16]	; (5ca4 <_get_cycles_for_us+0x24>)
    5c94:	4798      	blx	r3
    5c96:	4603      	mov	r3, r0
}
    5c98:	4618      	mov	r0, r3
    5c9a:	3708      	adds	r7, #8
    5c9c:	46bd      	mov	sp, r7
    5c9e:	bd80      	pop	{r7, pc}
    5ca0:	07270e00 	.word	0x07270e00
    5ca4:	00005b39 	.word	0x00005b39

00005ca8 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    5ca8:	b480      	push	{r7}
    5caa:	b083      	sub	sp, #12
    5cac:	af00      	add	r7, sp, #0
    5cae:	4603      	mov	r3, r0
    5cb0:	6039      	str	r1, [r7, #0]
    5cb2:	80fb      	strh	r3, [r7, #6]
    5cb4:	4613      	mov	r3, r2
    5cb6:	717b      	strb	r3, [r7, #5]
	switch (power) {
    5cb8:	797b      	ldrb	r3, [r7, #5]
    5cba:	3b04      	subs	r3, #4
    5cbc:	2b05      	cmp	r3, #5
    5cbe:	d870      	bhi.n	5da2 <_get_cycles_for_ms_internal+0xfa>
    5cc0:	a201      	add	r2, pc, #4	; (adr r2, 5cc8 <_get_cycles_for_ms_internal+0x20>)
    5cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5cc6:	bf00      	nop
    5cc8:	00005d85 	.word	0x00005d85
    5ccc:	00005d69 	.word	0x00005d69
    5cd0:	00005d4d 	.word	0x00005d4d
    5cd4:	00005d29 	.word	0x00005d29
    5cd8:	00005d05 	.word	0x00005d05
    5cdc:	00005ce1 	.word	0x00005ce1
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    5ce0:	88fb      	ldrh	r3, [r7, #6]
    5ce2:	683a      	ldr	r2, [r7, #0]
    5ce4:	4937      	ldr	r1, [pc, #220]	; (5dc4 <_get_cycles_for_ms_internal+0x11c>)
    5ce6:	fba1 1202 	umull	r1, r2, r1, r2
    5cea:	0c92      	lsrs	r2, r2, #18
    5cec:	fb02 f303 	mul.w	r3, r2, r3
    5cf0:	3302      	adds	r3, #2
    5cf2:	4a35      	ldr	r2, [pc, #212]	; (5dc8 <_get_cycles_for_ms_internal+0x120>)
    5cf4:	fba2 2303 	umull	r2, r3, r2, r3
    5cf8:	085b      	lsrs	r3, r3, #1
    5cfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5cfe:	fb02 f303 	mul.w	r3, r2, r3
    5d02:	e058      	b.n	5db6 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    5d04:	88fb      	ldrh	r3, [r7, #6]
    5d06:	683a      	ldr	r2, [r7, #0]
    5d08:	0952      	lsrs	r2, r2, #5
    5d0a:	4930      	ldr	r1, [pc, #192]	; (5dcc <_get_cycles_for_ms_internal+0x124>)
    5d0c:	fba1 1202 	umull	r1, r2, r1, r2
    5d10:	09d2      	lsrs	r2, r2, #7
    5d12:	fb02 f303 	mul.w	r3, r2, r3
    5d16:	3302      	adds	r3, #2
    5d18:	4a2b      	ldr	r2, [pc, #172]	; (5dc8 <_get_cycles_for_ms_internal+0x120>)
    5d1a:	fba2 2303 	umull	r2, r3, r2, r3
    5d1e:	085b      	lsrs	r3, r3, #1
    5d20:	2264      	movs	r2, #100	; 0x64
    5d22:	fb02 f303 	mul.w	r3, r2, r3
    5d26:	e046      	b.n	5db6 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    5d28:	88fb      	ldrh	r3, [r7, #6]
    5d2a:	683a      	ldr	r2, [r7, #0]
    5d2c:	4928      	ldr	r1, [pc, #160]	; (5dd0 <_get_cycles_for_ms_internal+0x128>)
    5d2e:	fba1 1202 	umull	r1, r2, r1, r2
    5d32:	0b52      	lsrs	r2, r2, #13
    5d34:	fb02 f303 	mul.w	r3, r2, r3
    5d38:	3302      	adds	r3, #2
    5d3a:	4a23      	ldr	r2, [pc, #140]	; (5dc8 <_get_cycles_for_ms_internal+0x120>)
    5d3c:	fba2 2303 	umull	r2, r3, r2, r3
    5d40:	085a      	lsrs	r2, r3, #1
    5d42:	4613      	mov	r3, r2
    5d44:	009b      	lsls	r3, r3, #2
    5d46:	4413      	add	r3, r2
    5d48:	005b      	lsls	r3, r3, #1
    5d4a:	e034      	b.n	5db6 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    5d4c:	88fb      	ldrh	r3, [r7, #6]
    5d4e:	683a      	ldr	r2, [r7, #0]
    5d50:	4920      	ldr	r1, [pc, #128]	; (5dd4 <_get_cycles_for_ms_internal+0x12c>)
    5d52:	fba1 1202 	umull	r1, r2, r1, r2
    5d56:	0992      	lsrs	r2, r2, #6
    5d58:	fb02 f303 	mul.w	r3, r2, r3
    5d5c:	3302      	adds	r3, #2
    5d5e:	4a1a      	ldr	r2, [pc, #104]	; (5dc8 <_get_cycles_for_ms_internal+0x120>)
    5d60:	fba2 2303 	umull	r2, r3, r2, r3
    5d64:	085b      	lsrs	r3, r3, #1
    5d66:	e026      	b.n	5db6 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    5d68:	88fb      	ldrh	r3, [r7, #6]
    5d6a:	683a      	ldr	r2, [r7, #0]
    5d6c:	491a      	ldr	r1, [pc, #104]	; (5dd8 <_get_cycles_for_ms_internal+0x130>)
    5d6e:	fba1 1202 	umull	r1, r2, r1, r2
    5d72:	0952      	lsrs	r2, r2, #5
    5d74:	fb02 f303 	mul.w	r3, r2, r3
    5d78:	331d      	adds	r3, #29
    5d7a:	4a18      	ldr	r2, [pc, #96]	; (5ddc <_get_cycles_for_ms_internal+0x134>)
    5d7c:	fba2 2303 	umull	r2, r3, r2, r3
    5d80:	091b      	lsrs	r3, r3, #4
    5d82:	e018      	b.n	5db6 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    5d84:	88fb      	ldrh	r3, [r7, #6]
    5d86:	683a      	ldr	r2, [r7, #0]
    5d88:	4915      	ldr	r1, [pc, #84]	; (5de0 <_get_cycles_for_ms_internal+0x138>)
    5d8a:	fba1 1202 	umull	r1, r2, r1, r2
    5d8e:	08d2      	lsrs	r2, r2, #3
    5d90:	fb02 f303 	mul.w	r3, r2, r3
    5d94:	f203 132b 	addw	r3, r3, #299	; 0x12b
    5d98:	4a12      	ldr	r2, [pc, #72]	; (5de4 <_get_cycles_for_ms_internal+0x13c>)
    5d9a:	fba2 2303 	umull	r2, r3, r2, r3
    5d9e:	095b      	lsrs	r3, r3, #5
    5da0:	e009      	b.n	5db6 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    5da2:	88fb      	ldrh	r3, [r7, #6]
    5da4:	683a      	ldr	r2, [r7, #0]
    5da6:	fb02 f303 	mul.w	r3, r2, r3
    5daa:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    5dae:	4a0e      	ldr	r2, [pc, #56]	; (5de8 <_get_cycles_for_ms_internal+0x140>)
    5db0:	fba2 2303 	umull	r2, r3, r2, r3
    5db4:	099b      	lsrs	r3, r3, #6
	}
}
    5db6:	4618      	mov	r0, r3
    5db8:	370c      	adds	r7, #12
    5dba:	46bd      	mov	sp, r7
    5dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dc0:	4770      	bx	lr
    5dc2:	bf00      	nop
    5dc4:	431bde83 	.word	0x431bde83
    5dc8:	aaaaaaab 	.word	0xaaaaaaab
    5dcc:	0a7c5ac5 	.word	0x0a7c5ac5
    5dd0:	d1b71759 	.word	0xd1b71759
    5dd4:	10624dd3 	.word	0x10624dd3
    5dd8:	51eb851f 	.word	0x51eb851f
    5ddc:	88888889 	.word	0x88888889
    5de0:	cccccccd 	.word	0xcccccccd
    5de4:	1b4e81b5 	.word	0x1b4e81b5
    5de8:	057619f1 	.word	0x057619f1

00005dec <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    5dec:	b580      	push	{r7, lr}
    5dee:	b082      	sub	sp, #8
    5df0:	af00      	add	r7, sp, #0
    5df2:	4603      	mov	r3, r0
    5df4:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    5df6:	88fb      	ldrh	r3, [r7, #6]
    5df8:	2209      	movs	r2, #9
    5dfa:	4904      	ldr	r1, [pc, #16]	; (5e0c <_get_cycles_for_ms+0x20>)
    5dfc:	4618      	mov	r0, r3
    5dfe:	4b04      	ldr	r3, [pc, #16]	; (5e10 <_get_cycles_for_ms+0x24>)
    5e00:	4798      	blx	r3
    5e02:	4603      	mov	r3, r0
}
    5e04:	4618      	mov	r0, r3
    5e06:	3708      	adds	r7, #8
    5e08:	46bd      	mov	sp, r7
    5e0a:	bd80      	pop	{r7, pc}
    5e0c:	07270e00 	.word	0x07270e00
    5e10:	00005ca9 	.word	0x00005ca9
    5e14:	00000000 	.word	0x00000000

00005e18 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    5e18:	b480      	push	{r7}
    5e1a:	b083      	sub	sp, #12
    5e1c:	af00      	add	r7, sp, #0
    5e1e:	6078      	str	r0, [r7, #4]
    5e20:	6039      	str	r1, [r7, #0]
    5e22:	bf00      	nop
    5e24:	f3af 8000 	nop.w

00005e28 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    5e28:	3901      	subs	r1, #1
    5e2a:	d8fd      	bhi.n	5e28 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    5e2c:	bf00      	nop
    5e2e:	370c      	adds	r7, #12
    5e30:	46bd      	mov	sp, r7
    5e32:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e36:	4770      	bx	lr

00005e38 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    5e38:	b480      	push	{r7}
    5e3a:	b083      	sub	sp, #12
    5e3c:	af00      	add	r7, sp, #0
    5e3e:	6078      	str	r0, [r7, #4]
    5e40:	460b      	mov	r3, r1
    5e42:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    5e44:	687b      	ldr	r3, [r7, #4]
    5e46:	881b      	ldrh	r3, [r3, #0]
    5e48:	b29a      	uxth	r2, r3
    5e4a:	887b      	ldrh	r3, [r7, #2]
    5e4c:	021b      	lsls	r3, r3, #8
    5e4e:	b29b      	uxth	r3, r3
    5e50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    5e54:	b29b      	uxth	r3, r3
    5e56:	4313      	orrs	r3, r2
    5e58:	b29a      	uxth	r2, r3
    5e5a:	687b      	ldr	r3, [r7, #4]
    5e5c:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    5e5e:	bf00      	nop
    5e60:	370c      	adds	r7, #12
    5e62:	46bd      	mov	sp, r7
    5e64:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e68:	4770      	bx	lr

00005e6a <hri_port_set_EVCTRL_reg>:
{
    5e6a:	b480      	push	{r7}
    5e6c:	b085      	sub	sp, #20
    5e6e:	af00      	add	r7, sp, #0
    5e70:	60f8      	str	r0, [r7, #12]
    5e72:	460b      	mov	r3, r1
    5e74:	607a      	str	r2, [r7, #4]
    5e76:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    5e78:	7afb      	ldrb	r3, [r7, #11]
    5e7a:	7afa      	ldrb	r2, [r7, #11]
    5e7c:	68f9      	ldr	r1, [r7, #12]
    5e7e:	01d2      	lsls	r2, r2, #7
    5e80:	440a      	add	r2, r1
    5e82:	322c      	adds	r2, #44	; 0x2c
    5e84:	6811      	ldr	r1, [r2, #0]
    5e86:	687a      	ldr	r2, [r7, #4]
    5e88:	430a      	orrs	r2, r1
    5e8a:	68f9      	ldr	r1, [r7, #12]
    5e8c:	01db      	lsls	r3, r3, #7
    5e8e:	440b      	add	r3, r1
    5e90:	332c      	adds	r3, #44	; 0x2c
    5e92:	601a      	str	r2, [r3, #0]
}
    5e94:	bf00      	nop
    5e96:	3714      	adds	r7, #20
    5e98:	46bd      	mov	sp, r7
    5e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e9e:	4770      	bx	lr

00005ea0 <_port_event_init>:

static inline void _port_event_init()
{
    5ea0:	b580      	push	{r7, lr}
    5ea2:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    5ea4:	2200      	movs	r2, #0
    5ea6:	2100      	movs	r1, #0
    5ea8:	480a      	ldr	r0, [pc, #40]	; (5ed4 <_port_event_init+0x34>)
    5eaa:	4b0b      	ldr	r3, [pc, #44]	; (5ed8 <_port_event_init+0x38>)
    5eac:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    5eae:	2200      	movs	r2, #0
    5eb0:	2101      	movs	r1, #1
    5eb2:	4808      	ldr	r0, [pc, #32]	; (5ed4 <_port_event_init+0x34>)
    5eb4:	4b08      	ldr	r3, [pc, #32]	; (5ed8 <_port_event_init+0x38>)
    5eb6:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    5eb8:	f64e 72ef 	movw	r2, #61423	; 0xefef
    5ebc:	2102      	movs	r1, #2
    5ebe:	4805      	ldr	r0, [pc, #20]	; (5ed4 <_port_event_init+0x34>)
    5ec0:	4b05      	ldr	r3, [pc, #20]	; (5ed8 <_port_event_init+0x38>)
    5ec2:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    5ec4:	2200      	movs	r2, #0
    5ec6:	2103      	movs	r1, #3
    5ec8:	4802      	ldr	r0, [pc, #8]	; (5ed4 <_port_event_init+0x34>)
    5eca:	4b03      	ldr	r3, [pc, #12]	; (5ed8 <_port_event_init+0x38>)
    5ecc:	4798      	blx	r3
}
    5ece:	bf00      	nop
    5ed0:	bd80      	pop	{r7, pc}
    5ed2:	bf00      	nop
    5ed4:	41008000 	.word	0x41008000
    5ed8:	00005e6b 	.word	0x00005e6b

00005edc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    5edc:	b580      	push	{r7, lr}
    5ede:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    5ee0:	2104      	movs	r1, #4
    5ee2:	480b      	ldr	r0, [pc, #44]	; (5f10 <_init_chip+0x34>)
    5ee4:	4b0b      	ldr	r3, [pc, #44]	; (5f14 <_init_chip+0x38>)
    5ee6:	4798      	blx	r3

	_osc32kctrl_init_sources();
    5ee8:	4b0b      	ldr	r3, [pc, #44]	; (5f18 <_init_chip+0x3c>)
    5eea:	4798      	blx	r3
	_oscctrl_init_sources();
    5eec:	4b0b      	ldr	r3, [pc, #44]	; (5f1c <_init_chip+0x40>)
    5eee:	4798      	blx	r3
	_mclk_init();
    5ef0:	4b0b      	ldr	r3, [pc, #44]	; (5f20 <_init_chip+0x44>)
    5ef2:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    5ef4:	f44f 6084 	mov.w	r0, #1056	; 0x420
    5ef8:	4b0a      	ldr	r3, [pc, #40]	; (5f24 <_init_chip+0x48>)
    5efa:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    5efc:	4b0a      	ldr	r3, [pc, #40]	; (5f28 <_init_chip+0x4c>)
    5efe:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    5f00:	f640 30df 	movw	r0, #3039	; 0xbdf
    5f04:	4b07      	ldr	r3, [pc, #28]	; (5f24 <_init_chip+0x48>)
    5f06:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    5f08:	4b08      	ldr	r3, [pc, #32]	; (5f2c <_init_chip+0x50>)
    5f0a:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    5f0c:	bf00      	nop
    5f0e:	bd80      	pop	{r7, pc}
    5f10:	41004000 	.word	0x41004000
    5f14:	00005e39 	.word	0x00005e39
    5f18:	00006a05 	.word	0x00006a05
    5f1c:	00006ecd 	.word	0x00006ecd
    5f20:	00006925 	.word	0x00006925
    5f24:	000067cd 	.word	0x000067cd
    5f28:	00006f0d 	.word	0x00006f0d
    5f2c:	00005ea1 	.word	0x00005ea1

00005f30 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    5f30:	b480      	push	{r7}
    5f32:	b083      	sub	sp, #12
    5f34:	af00      	add	r7, sp, #0
    5f36:	6078      	str	r0, [r7, #4]
    5f38:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    5f3a:	687b      	ldr	r3, [r7, #4]
    5f3c:	683a      	ldr	r2, [r7, #0]
    5f3e:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    5f40:	2300      	movs	r3, #0
}
    5f42:	4618      	mov	r0, r3
    5f44:	370c      	adds	r7, #12
    5f46:	46bd      	mov	sp, r7
    5f48:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f4c:	4770      	bx	lr
	...

00005f50 <__NVIC_EnableIRQ>:
{
    5f50:	b480      	push	{r7}
    5f52:	b083      	sub	sp, #12
    5f54:	af00      	add	r7, sp, #0
    5f56:	4603      	mov	r3, r0
    5f58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5f5e:	2b00      	cmp	r3, #0
    5f60:	db0b      	blt.n	5f7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f62:	4909      	ldr	r1, [pc, #36]	; (5f88 <__NVIC_EnableIRQ+0x38>)
    5f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5f68:	095b      	lsrs	r3, r3, #5
    5f6a:	88fa      	ldrh	r2, [r7, #6]
    5f6c:	f002 021f 	and.w	r2, r2, #31
    5f70:	2001      	movs	r0, #1
    5f72:	fa00 f202 	lsl.w	r2, r0, r2
    5f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5f7a:	bf00      	nop
    5f7c:	370c      	adds	r7, #12
    5f7e:	46bd      	mov	sp, r7
    5f80:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f84:	4770      	bx	lr
    5f86:	bf00      	nop
    5f88:	e000e100 	.word	0xe000e100

00005f8c <__NVIC_DisableIRQ>:
{
    5f8c:	b480      	push	{r7}
    5f8e:	b083      	sub	sp, #12
    5f90:	af00      	add	r7, sp, #0
    5f92:	4603      	mov	r3, r0
    5f94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5f9a:	2b00      	cmp	r3, #0
    5f9c:	db10      	blt.n	5fc0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5f9e:	490b      	ldr	r1, [pc, #44]	; (5fcc <__NVIC_DisableIRQ+0x40>)
    5fa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5fa4:	095b      	lsrs	r3, r3, #5
    5fa6:	88fa      	ldrh	r2, [r7, #6]
    5fa8:	f002 021f 	and.w	r2, r2, #31
    5fac:	2001      	movs	r0, #1
    5fae:	fa00 f202 	lsl.w	r2, r0, r2
    5fb2:	3320      	adds	r3, #32
    5fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    5fb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5fbc:	f3bf 8f6f 	isb	sy
}
    5fc0:	bf00      	nop
    5fc2:	370c      	adds	r7, #12
    5fc4:	46bd      	mov	sp, r7
    5fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fca:	4770      	bx	lr
    5fcc:	e000e100 	.word	0xe000e100

00005fd0 <__NVIC_ClearPendingIRQ>:
{
    5fd0:	b480      	push	{r7}
    5fd2:	b083      	sub	sp, #12
    5fd4:	af00      	add	r7, sp, #0
    5fd6:	4603      	mov	r3, r0
    5fd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5fde:	2b00      	cmp	r3, #0
    5fe0:	db0c      	blt.n	5ffc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5fe2:	4909      	ldr	r1, [pc, #36]	; (6008 <__NVIC_ClearPendingIRQ+0x38>)
    5fe4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5fe8:	095b      	lsrs	r3, r3, #5
    5fea:	88fa      	ldrh	r2, [r7, #6]
    5fec:	f002 021f 	and.w	r2, r2, #31
    5ff0:	2001      	movs	r0, #1
    5ff2:	fa00 f202 	lsl.w	r2, r0, r2
    5ff6:	3360      	adds	r3, #96	; 0x60
    5ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5ffc:	bf00      	nop
    5ffe:	370c      	adds	r7, #12
    6000:	46bd      	mov	sp, r7
    6002:	f85d 7b04 	ldr.w	r7, [sp], #4
    6006:	4770      	bx	lr
    6008:	e000e100 	.word	0xe000e100

0000600c <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    600c:	b480      	push	{r7}
    600e:	b083      	sub	sp, #12
    6010:	af00      	add	r7, sp, #0
    6012:	6078      	str	r0, [r7, #4]
    6014:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    6016:	bf00      	nop
    6018:	687b      	ldr	r3, [r7, #4]
    601a:	685a      	ldr	r2, [r3, #4]
    601c:	683b      	ldr	r3, [r7, #0]
    601e:	4013      	ands	r3, r2
    6020:	2b00      	cmp	r3, #0
    6022:	d1f9      	bne.n	6018 <hri_eic_wait_for_sync+0xc>
	};
}
    6024:	bf00      	nop
    6026:	370c      	adds	r7, #12
    6028:	46bd      	mov	sp, r7
    602a:	f85d 7b04 	ldr.w	r7, [sp], #4
    602e:	4770      	bx	lr

00006030 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    6030:	b480      	push	{r7}
    6032:	b083      	sub	sp, #12
    6034:	af00      	add	r7, sp, #0
    6036:	6078      	str	r0, [r7, #4]
    6038:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    603a:	687b      	ldr	r3, [r7, #4]
    603c:	685a      	ldr	r2, [r3, #4]
    603e:	683b      	ldr	r3, [r7, #0]
    6040:	4013      	ands	r3, r2
    6042:	2b00      	cmp	r3, #0
    6044:	bf14      	ite	ne
    6046:	2301      	movne	r3, #1
    6048:	2300      	moveq	r3, #0
    604a:	b2db      	uxtb	r3, r3
}
    604c:	4618      	mov	r0, r3
    604e:	370c      	adds	r7, #12
    6050:	46bd      	mov	sp, r7
    6052:	f85d 7b04 	ldr.w	r7, [sp], #4
    6056:	4770      	bx	lr

00006058 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    6058:	b480      	push	{r7}
    605a:	b083      	sub	sp, #12
    605c:	af00      	add	r7, sp, #0
    605e:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    6060:	687b      	ldr	r3, [r7, #4]
    6062:	695b      	ldr	r3, [r3, #20]
}
    6064:	4618      	mov	r0, r3
    6066:	370c      	adds	r7, #12
    6068:	46bd      	mov	sp, r7
    606a:	f85d 7b04 	ldr.w	r7, [sp], #4
    606e:	4770      	bx	lr

00006070 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    6070:	b480      	push	{r7}
    6072:	b083      	sub	sp, #12
    6074:	af00      	add	r7, sp, #0
    6076:	6078      	str	r0, [r7, #4]
    6078:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    607a:	687b      	ldr	r3, [r7, #4]
    607c:	683a      	ldr	r2, [r7, #0]
    607e:	615a      	str	r2, [r3, #20]
}
    6080:	bf00      	nop
    6082:	370c      	adds	r7, #12
    6084:	46bd      	mov	sp, r7
    6086:	f85d 7b04 	ldr.w	r7, [sp], #4
    608a:	4770      	bx	lr

0000608c <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    608c:	b480      	push	{r7}
    608e:	b083      	sub	sp, #12
    6090:	af00      	add	r7, sp, #0
    6092:	6078      	str	r0, [r7, #4]
    6094:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    6096:	687b      	ldr	r3, [r7, #4]
    6098:	683a      	ldr	r2, [r7, #0]
    609a:	611a      	str	r2, [r3, #16]
}
    609c:	bf00      	nop
    609e:	370c      	adds	r7, #12
    60a0:	46bd      	mov	sp, r7
    60a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    60a6:	4770      	bx	lr

000060a8 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    60a8:	b480      	push	{r7}
    60aa:	b083      	sub	sp, #12
    60ac:	af00      	add	r7, sp, #0
    60ae:	6078      	str	r0, [r7, #4]
    60b0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	683a      	ldr	r2, [r7, #0]
    60b6:	60da      	str	r2, [r3, #12]
}
    60b8:	bf00      	nop
    60ba:	370c      	adds	r7, #12
    60bc:	46bd      	mov	sp, r7
    60be:	f85d 7b04 	ldr.w	r7, [sp], #4
    60c2:	4770      	bx	lr

000060c4 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    60c4:	b580      	push	{r7, lr}
    60c6:	b082      	sub	sp, #8
    60c8:	af00      	add	r7, sp, #0
    60ca:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    60cc:	687b      	ldr	r3, [r7, #4]
    60ce:	781b      	ldrb	r3, [r3, #0]
    60d0:	b2db      	uxtb	r3, r3
    60d2:	f043 0302 	orr.w	r3, r3, #2
    60d6:	b2da      	uxtb	r2, r3
    60d8:	687b      	ldr	r3, [r7, #4]
    60da:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    60dc:	2103      	movs	r1, #3
    60de:	6878      	ldr	r0, [r7, #4]
    60e0:	4b02      	ldr	r3, [pc, #8]	; (60ec <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    60e2:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    60e4:	bf00      	nop
    60e6:	3708      	adds	r7, #8
    60e8:	46bd      	mov	sp, r7
    60ea:	bd80      	pop	{r7, pc}
    60ec:	0000600d 	.word	0x0000600d

000060f0 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    60f0:	b580      	push	{r7, lr}
    60f2:	b082      	sub	sp, #8
    60f4:	af00      	add	r7, sp, #0
    60f6:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    60f8:	687b      	ldr	r3, [r7, #4]
    60fa:	781b      	ldrb	r3, [r3, #0]
    60fc:	b2db      	uxtb	r3, r3
    60fe:	f023 0302 	bic.w	r3, r3, #2
    6102:	b2da      	uxtb	r2, r3
    6104:	687b      	ldr	r3, [r7, #4]
    6106:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    6108:	2103      	movs	r1, #3
    610a:	6878      	ldr	r0, [r7, #4]
    610c:	4b02      	ldr	r3, [pc, #8]	; (6118 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    610e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6110:	bf00      	nop
    6112:	3708      	adds	r7, #8
    6114:	46bd      	mov	sp, r7
    6116:	bd80      	pop	{r7, pc}
    6118:	0000600d 	.word	0x0000600d

0000611c <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    611c:	b580      	push	{r7, lr}
    611e:	b084      	sub	sp, #16
    6120:	af00      	add	r7, sp, #0
    6122:	6078      	str	r0, [r7, #4]
    6124:	460b      	mov	r3, r1
    6126:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    6128:	687b      	ldr	r3, [r7, #4]
    612a:	781b      	ldrb	r3, [r3, #0]
    612c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    612e:	7bfb      	ldrb	r3, [r7, #15]
    6130:	f023 0310 	bic.w	r3, r3, #16
    6134:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    6136:	78fb      	ldrb	r3, [r7, #3]
    6138:	011b      	lsls	r3, r3, #4
    613a:	b25a      	sxtb	r2, r3
    613c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6140:	4313      	orrs	r3, r2
    6142:	b25b      	sxtb	r3, r3
    6144:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    6146:	687b      	ldr	r3, [r7, #4]
    6148:	7bfa      	ldrb	r2, [r7, #15]
    614a:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    614c:	2103      	movs	r1, #3
    614e:	6878      	ldr	r0, [r7, #4]
    6150:	4b02      	ldr	r3, [pc, #8]	; (615c <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    6152:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6154:	bf00      	nop
    6156:	3710      	adds	r7, #16
    6158:	46bd      	mov	sp, r7
    615a:	bd80      	pop	{r7, pc}
    615c:	0000600d 	.word	0x0000600d

00006160 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    6160:	b580      	push	{r7, lr}
    6162:	b084      	sub	sp, #16
    6164:	af00      	add	r7, sp, #0
    6166:	6078      	str	r0, [r7, #4]
    6168:	460b      	mov	r3, r1
    616a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    616c:	2103      	movs	r1, #3
    616e:	6878      	ldr	r0, [r7, #4]
    6170:	4b06      	ldr	r3, [pc, #24]	; (618c <hri_eic_get_CTRLA_reg+0x2c>)
    6172:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    6174:	687b      	ldr	r3, [r7, #4]
    6176:	781b      	ldrb	r3, [r3, #0]
    6178:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    617a:	7bfa      	ldrb	r2, [r7, #15]
    617c:	78fb      	ldrb	r3, [r7, #3]
    617e:	4013      	ands	r3, r2
    6180:	73fb      	strb	r3, [r7, #15]
	return tmp;
    6182:	7bfb      	ldrb	r3, [r7, #15]
}
    6184:	4618      	mov	r0, r3
    6186:	3710      	adds	r7, #16
    6188:	46bd      	mov	sp, r7
    618a:	bd80      	pop	{r7, pc}
    618c:	0000600d 	.word	0x0000600d

00006190 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    6190:	b580      	push	{r7, lr}
    6192:	b082      	sub	sp, #8
    6194:	af00      	add	r7, sp, #0
    6196:	6078      	str	r0, [r7, #4]
    6198:	460b      	mov	r3, r1
    619a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    619c:	687b      	ldr	r3, [r7, #4]
    619e:	78fa      	ldrb	r2, [r7, #3]
    61a0:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    61a2:	2103      	movs	r1, #3
    61a4:	6878      	ldr	r0, [r7, #4]
    61a6:	4b03      	ldr	r3, [pc, #12]	; (61b4 <hri_eic_write_CTRLA_reg+0x24>)
    61a8:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    61aa:	bf00      	nop
    61ac:	3708      	adds	r7, #8
    61ae:	46bd      	mov	sp, r7
    61b0:	bd80      	pop	{r7, pc}
    61b2:	bf00      	nop
    61b4:	0000600d 	.word	0x0000600d

000061b8 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    61b8:	b480      	push	{r7}
    61ba:	b083      	sub	sp, #12
    61bc:	af00      	add	r7, sp, #0
    61be:	6078      	str	r0, [r7, #4]
    61c0:	460b      	mov	r3, r1
    61c2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    61c4:	687b      	ldr	r3, [r7, #4]
    61c6:	78fa      	ldrb	r2, [r7, #3]
    61c8:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    61ca:	bf00      	nop
    61cc:	370c      	adds	r7, #12
    61ce:	46bd      	mov	sp, r7
    61d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    61d4:	4770      	bx	lr

000061d6 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    61d6:	b480      	push	{r7}
    61d8:	b083      	sub	sp, #12
    61da:	af00      	add	r7, sp, #0
    61dc:	6078      	str	r0, [r7, #4]
    61de:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    61e0:	687b      	ldr	r3, [r7, #4]
    61e2:	683a      	ldr	r2, [r7, #0]
    61e4:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    61e6:	bf00      	nop
    61e8:	370c      	adds	r7, #12
    61ea:	46bd      	mov	sp, r7
    61ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    61f0:	4770      	bx	lr

000061f2 <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    61f2:	b480      	push	{r7}
    61f4:	b083      	sub	sp, #12
    61f6:	af00      	add	r7, sp, #0
    61f8:	6078      	str	r0, [r7, #4]
    61fa:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    61fc:	687b      	ldr	r3, [r7, #4]
    61fe:	683a      	ldr	r2, [r7, #0]
    6200:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6202:	bf00      	nop
    6204:	370c      	adds	r7, #12
    6206:	46bd      	mov	sp, r7
    6208:	f85d 7b04 	ldr.w	r7, [sp], #4
    620c:	4770      	bx	lr

0000620e <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    620e:	b480      	push	{r7}
    6210:	b085      	sub	sp, #20
    6212:	af00      	add	r7, sp, #0
    6214:	60f8      	str	r0, [r7, #12]
    6216:	460b      	mov	r3, r1
    6218:	607a      	str	r2, [r7, #4]
    621a:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    621c:	7afb      	ldrb	r3, [r7, #11]
    621e:	68fa      	ldr	r2, [r7, #12]
    6220:	3306      	adds	r3, #6
    6222:	009b      	lsls	r3, r3, #2
    6224:	4413      	add	r3, r2
    6226:	687a      	ldr	r2, [r7, #4]
    6228:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    622a:	bf00      	nop
    622c:	3714      	adds	r7, #20
    622e:	46bd      	mov	sp, r7
    6230:	f85d 7b04 	ldr.w	r7, [sp], #4
    6234:	4770      	bx	lr

00006236 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    6236:	b480      	push	{r7}
    6238:	b083      	sub	sp, #12
    623a:	af00      	add	r7, sp, #0
    623c:	6078      	str	r0, [r7, #4]
    623e:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    6240:	687b      	ldr	r3, [r7, #4]
    6242:	683a      	ldr	r2, [r7, #0]
    6244:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    6246:	bf00      	nop
    6248:	370c      	adds	r7, #12
    624a:	46bd      	mov	sp, r7
    624c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6250:	4770      	bx	lr

00006252 <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    6252:	b480      	push	{r7}
    6254:	b083      	sub	sp, #12
    6256:	af00      	add	r7, sp, #0
    6258:	6078      	str	r0, [r7, #4]
    625a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    625c:	687b      	ldr	r3, [r7, #4]
    625e:	683a      	ldr	r2, [r7, #0]
    6260:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    6262:	bf00      	nop
    6264:	370c      	adds	r7, #12
    6266:	46bd      	mov	sp, r7
    6268:	f85d 7b04 	ldr.w	r7, [sp], #4
    626c:	4770      	bx	lr
	...

00006270 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    6270:	b580      	push	{r7, lr}
    6272:	b082      	sub	sp, #8
    6274:	af00      	add	r7, sp, #0
    6276:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    6278:	2101      	movs	r1, #1
    627a:	484f      	ldr	r0, [pc, #316]	; (63b8 <_ext_irq_init+0x148>)
    627c:	4b4f      	ldr	r3, [pc, #316]	; (63bc <_ext_irq_init+0x14c>)
    627e:	4798      	blx	r3
    6280:	4603      	mov	r3, r0
    6282:	f083 0301 	eor.w	r3, r3, #1
    6286:	b2db      	uxtb	r3, r3
    6288:	2b00      	cmp	r3, #0
    628a:	d011      	beq.n	62b0 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    628c:	2102      	movs	r1, #2
    628e:	484a      	ldr	r0, [pc, #296]	; (63b8 <_ext_irq_init+0x148>)
    6290:	4b4b      	ldr	r3, [pc, #300]	; (63c0 <_ext_irq_init+0x150>)
    6292:	4798      	blx	r3
    6294:	4603      	mov	r3, r0
    6296:	2b00      	cmp	r3, #0
    6298:	d006      	beq.n	62a8 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    629a:	4847      	ldr	r0, [pc, #284]	; (63b8 <_ext_irq_init+0x148>)
    629c:	4b49      	ldr	r3, [pc, #292]	; (63c4 <_ext_irq_init+0x154>)
    629e:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    62a0:	2102      	movs	r1, #2
    62a2:	4845      	ldr	r0, [pc, #276]	; (63b8 <_ext_irq_init+0x148>)
    62a4:	4b48      	ldr	r3, [pc, #288]	; (63c8 <_ext_irq_init+0x158>)
    62a6:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    62a8:	2101      	movs	r1, #1
    62aa:	4843      	ldr	r0, [pc, #268]	; (63b8 <_ext_irq_init+0x148>)
    62ac:	4b47      	ldr	r3, [pc, #284]	; (63cc <_ext_irq_init+0x15c>)
    62ae:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    62b0:	2101      	movs	r1, #1
    62b2:	4841      	ldr	r0, [pc, #260]	; (63b8 <_ext_irq_init+0x148>)
    62b4:	4b44      	ldr	r3, [pc, #272]	; (63c8 <_ext_irq_init+0x158>)
    62b6:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    62b8:	2100      	movs	r1, #0
    62ba:	483f      	ldr	r0, [pc, #252]	; (63b8 <_ext_irq_init+0x148>)
    62bc:	4b44      	ldr	r3, [pc, #272]	; (63d0 <_ext_irq_init+0x160>)
    62be:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    62c0:	2100      	movs	r1, #0
    62c2:	483d      	ldr	r0, [pc, #244]	; (63b8 <_ext_irq_init+0x148>)
    62c4:	4b43      	ldr	r3, [pc, #268]	; (63d4 <_ext_irq_init+0x164>)
    62c6:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    62c8:	2100      	movs	r1, #0
    62ca:	483b      	ldr	r0, [pc, #236]	; (63b8 <_ext_irq_init+0x148>)
    62cc:	4b42      	ldr	r3, [pc, #264]	; (63d8 <_ext_irq_init+0x168>)
    62ce:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    62d0:	f240 31bb 	movw	r1, #955	; 0x3bb
    62d4:	4838      	ldr	r0, [pc, #224]	; (63b8 <_ext_irq_init+0x148>)
    62d6:	4b41      	ldr	r3, [pc, #260]	; (63dc <_ext_irq_init+0x16c>)
    62d8:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    62da:	f240 313b 	movw	r1, #827	; 0x33b
    62de:	4836      	ldr	r0, [pc, #216]	; (63b8 <_ext_irq_init+0x148>)
    62e0:	4b3f      	ldr	r3, [pc, #252]	; (63e0 <_ext_irq_init+0x170>)
    62e2:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    62e4:	2100      	movs	r1, #0
    62e6:	4834      	ldr	r0, [pc, #208]	; (63b8 <_ext_irq_init+0x148>)
    62e8:	4b3e      	ldr	r3, [pc, #248]	; (63e4 <_ext_irq_init+0x174>)
    62ea:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    62ec:	4a3e      	ldr	r2, [pc, #248]	; (63e8 <_ext_irq_init+0x178>)
    62ee:	2100      	movs	r1, #0
    62f0:	4831      	ldr	r0, [pc, #196]	; (63b8 <_ext_irq_init+0x148>)
    62f2:	4b3e      	ldr	r3, [pc, #248]	; (63ec <_ext_irq_init+0x17c>)
    62f4:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    62f6:	2211      	movs	r2, #17
    62f8:	2101      	movs	r1, #1
    62fa:	482f      	ldr	r0, [pc, #188]	; (63b8 <_ext_irq_init+0x148>)
    62fc:	4b3b      	ldr	r3, [pc, #236]	; (63ec <_ext_irq_init+0x17c>)
    62fe:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    6300:	482d      	ldr	r0, [pc, #180]	; (63b8 <_ext_irq_init+0x148>)
    6302:	4b3b      	ldr	r3, [pc, #236]	; (63f0 <_ext_irq_init+0x180>)
    6304:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    6306:	200c      	movs	r0, #12
    6308:	4b3a      	ldr	r3, [pc, #232]	; (63f4 <_ext_irq_init+0x184>)
    630a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    630c:	200c      	movs	r0, #12
    630e:	4b3a      	ldr	r3, [pc, #232]	; (63f8 <_ext_irq_init+0x188>)
    6310:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    6312:	200c      	movs	r0, #12
    6314:	4b39      	ldr	r3, [pc, #228]	; (63fc <_ext_irq_init+0x18c>)
    6316:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    6318:	200d      	movs	r0, #13
    631a:	4b36      	ldr	r3, [pc, #216]	; (63f4 <_ext_irq_init+0x184>)
    631c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    631e:	200d      	movs	r0, #13
    6320:	4b35      	ldr	r3, [pc, #212]	; (63f8 <_ext_irq_init+0x188>)
    6322:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    6324:	200d      	movs	r0, #13
    6326:	4b35      	ldr	r3, [pc, #212]	; (63fc <_ext_irq_init+0x18c>)
    6328:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    632a:	200f      	movs	r0, #15
    632c:	4b31      	ldr	r3, [pc, #196]	; (63f4 <_ext_irq_init+0x184>)
    632e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    6330:	200f      	movs	r0, #15
    6332:	4b31      	ldr	r3, [pc, #196]	; (63f8 <_ext_irq_init+0x188>)
    6334:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    6336:	200f      	movs	r0, #15
    6338:	4b30      	ldr	r3, [pc, #192]	; (63fc <_ext_irq_init+0x18c>)
    633a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    633c:	2010      	movs	r0, #16
    633e:	4b2d      	ldr	r3, [pc, #180]	; (63f4 <_ext_irq_init+0x184>)
    6340:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    6342:	2010      	movs	r0, #16
    6344:	4b2c      	ldr	r3, [pc, #176]	; (63f8 <_ext_irq_init+0x188>)
    6346:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    6348:	2010      	movs	r0, #16
    634a:	4b2c      	ldr	r3, [pc, #176]	; (63fc <_ext_irq_init+0x18c>)
    634c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    634e:	2011      	movs	r0, #17
    6350:	4b28      	ldr	r3, [pc, #160]	; (63f4 <_ext_irq_init+0x184>)
    6352:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    6354:	2011      	movs	r0, #17
    6356:	4b28      	ldr	r3, [pc, #160]	; (63f8 <_ext_irq_init+0x188>)
    6358:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    635a:	2011      	movs	r0, #17
    635c:	4b27      	ldr	r3, [pc, #156]	; (63fc <_ext_irq_init+0x18c>)
    635e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    6360:	2012      	movs	r0, #18
    6362:	4b24      	ldr	r3, [pc, #144]	; (63f4 <_ext_irq_init+0x184>)
    6364:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    6366:	2012      	movs	r0, #18
    6368:	4b23      	ldr	r3, [pc, #140]	; (63f8 <_ext_irq_init+0x188>)
    636a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    636c:	2012      	movs	r0, #18
    636e:	4b23      	ldr	r3, [pc, #140]	; (63fc <_ext_irq_init+0x18c>)
    6370:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    6372:	2013      	movs	r0, #19
    6374:	4b1f      	ldr	r3, [pc, #124]	; (63f4 <_ext_irq_init+0x184>)
    6376:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    6378:	2013      	movs	r0, #19
    637a:	4b1f      	ldr	r3, [pc, #124]	; (63f8 <_ext_irq_init+0x188>)
    637c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    637e:	2013      	movs	r0, #19
    6380:	4b1e      	ldr	r3, [pc, #120]	; (63fc <_ext_irq_init+0x18c>)
    6382:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    6384:	2014      	movs	r0, #20
    6386:	4b1b      	ldr	r3, [pc, #108]	; (63f4 <_ext_irq_init+0x184>)
    6388:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    638a:	2014      	movs	r0, #20
    638c:	4b1a      	ldr	r3, [pc, #104]	; (63f8 <_ext_irq_init+0x188>)
    638e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    6390:	2014      	movs	r0, #20
    6392:	4b1a      	ldr	r3, [pc, #104]	; (63fc <_ext_irq_init+0x18c>)
    6394:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    6396:	2015      	movs	r0, #21
    6398:	4b16      	ldr	r3, [pc, #88]	; (63f4 <_ext_irq_init+0x184>)
    639a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    639c:	2015      	movs	r0, #21
    639e:	4b16      	ldr	r3, [pc, #88]	; (63f8 <_ext_irq_init+0x188>)
    63a0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    63a2:	2015      	movs	r0, #21
    63a4:	4b15      	ldr	r3, [pc, #84]	; (63fc <_ext_irq_init+0x18c>)
    63a6:	4798      	blx	r3

	callback = cb;
    63a8:	4a15      	ldr	r2, [pc, #84]	; (6400 <_ext_irq_init+0x190>)
    63aa:	687b      	ldr	r3, [r7, #4]
    63ac:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    63ae:	2300      	movs	r3, #0
}
    63b0:	4618      	mov	r0, r3
    63b2:	3708      	adds	r7, #8
    63b4:	46bd      	mov	sp, r7
    63b6:	bd80      	pop	{r7, pc}
    63b8:	40002800 	.word	0x40002800
    63bc:	00006031 	.word	0x00006031
    63c0:	00006161 	.word	0x00006161
    63c4:	000060f1 	.word	0x000060f1
    63c8:	0000600d 	.word	0x0000600d
    63cc:	00006191 	.word	0x00006191
    63d0:	0000611d 	.word	0x0000611d
    63d4:	000061b9 	.word	0x000061b9
    63d8:	000061d7 	.word	0x000061d7
    63dc:	000061f3 	.word	0x000061f3
    63e0:	00006237 	.word	0x00006237
    63e4:	00006253 	.word	0x00006253
    63e8:	90999013 	.word	0x90999013
    63ec:	0000620f 	.word	0x0000620f
    63f0:	000060c5 	.word	0x000060c5
    63f4:	00005f8d 	.word	0x00005f8d
    63f8:	00005fd1 	.word	0x00005fd1
    63fc:	00005f51 	.word	0x00005f51
    6400:	20002328 	.word	0x20002328

00006404 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    6404:	b580      	push	{r7, lr}
    6406:	b084      	sub	sp, #16
    6408:	af00      	add	r7, sp, #0
    640a:	6078      	str	r0, [r7, #4]
    640c:	460b      	mov	r3, r1
    640e:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    6410:	23ff      	movs	r3, #255	; 0xff
    6412:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    6414:	2300      	movs	r3, #0
    6416:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    6418:	e010      	b.n	643c <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    641a:	7bbb      	ldrb	r3, [r7, #14]
    641c:	4a1c      	ldr	r2, [pc, #112]	; (6490 <_ext_irq_enable+0x8c>)
    641e:	00db      	lsls	r3, r3, #3
    6420:	4413      	add	r3, r2
    6422:	685a      	ldr	r2, [r3, #4]
    6424:	687b      	ldr	r3, [r7, #4]
    6426:	429a      	cmp	r2, r3
    6428:	d105      	bne.n	6436 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    642a:	7bbb      	ldrb	r3, [r7, #14]
    642c:	4a18      	ldr	r2, [pc, #96]	; (6490 <_ext_irq_enable+0x8c>)
    642e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    6432:	73fb      	strb	r3, [r7, #15]
			break;
    6434:	e005      	b.n	6442 <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    6436:	7bbb      	ldrb	r3, [r7, #14]
    6438:	3301      	adds	r3, #1
    643a:	73bb      	strb	r3, [r7, #14]
    643c:	7bbb      	ldrb	r3, [r7, #14]
    643e:	2b08      	cmp	r3, #8
    6440:	d9eb      	bls.n	641a <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    6442:	7bfb      	ldrb	r3, [r7, #15]
    6444:	2bff      	cmp	r3, #255	; 0xff
    6446:	d102      	bne.n	644e <_ext_irq_enable+0x4a>
		return -1;
    6448:	f04f 33ff 	mov.w	r3, #4294967295
    644c:	e01c      	b.n	6488 <_ext_irq_enable+0x84>
	}

	if (enable) {
    644e:	78fb      	ldrb	r3, [r7, #3]
    6450:	2b00      	cmp	r3, #0
    6452:	d008      	beq.n	6466 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    6454:	7bfb      	ldrb	r3, [r7, #15]
    6456:	2201      	movs	r2, #1
    6458:	fa02 f303 	lsl.w	r3, r2, r3
    645c:	4619      	mov	r1, r3
    645e:	480d      	ldr	r0, [pc, #52]	; (6494 <_ext_irq_enable+0x90>)
    6460:	4b0d      	ldr	r3, [pc, #52]	; (6498 <_ext_irq_enable+0x94>)
    6462:	4798      	blx	r3
    6464:	e00f      	b.n	6486 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    6466:	7bfb      	ldrb	r3, [r7, #15]
    6468:	2201      	movs	r2, #1
    646a:	fa02 f303 	lsl.w	r3, r2, r3
    646e:	4619      	mov	r1, r3
    6470:	4808      	ldr	r0, [pc, #32]	; (6494 <_ext_irq_enable+0x90>)
    6472:	4b0a      	ldr	r3, [pc, #40]	; (649c <_ext_irq_enable+0x98>)
    6474:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    6476:	7bfb      	ldrb	r3, [r7, #15]
    6478:	2201      	movs	r2, #1
    647a:	fa02 f303 	lsl.w	r3, r2, r3
    647e:	4619      	mov	r1, r3
    6480:	4804      	ldr	r0, [pc, #16]	; (6494 <_ext_irq_enable+0x90>)
    6482:	4b07      	ldr	r3, [pc, #28]	; (64a0 <_ext_irq_enable+0x9c>)
    6484:	4798      	blx	r3
	}

	return ERR_NONE;
    6486:	2300      	movs	r3, #0
}
    6488:	4618      	mov	r0, r3
    648a:	3710      	adds	r7, #16
    648c:	46bd      	mov	sp, r7
    648e:	bd80      	pop	{r7, pc}
    6490:	0001accc 	.word	0x0001accc
    6494:	40002800 	.word	0x40002800
    6498:	0000608d 	.word	0x0000608d
    649c:	000060a9 	.word	0x000060a9
    64a0:	00006071 	.word	0x00006071

000064a4 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    64a4:	b580      	push	{r7, lr}
    64a6:	b084      	sub	sp, #16
    64a8:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    64aa:	4841      	ldr	r0, [pc, #260]	; (65b0 <_ext_irq_handler+0x10c>)
    64ac:	4b41      	ldr	r3, [pc, #260]	; (65b4 <_ext_irq_handler+0x110>)
    64ae:	4798      	blx	r3
    64b0:	4603      	mov	r3, r0
    64b2:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    64b4:	f04f 33ff 	mov.w	r3, #4294967295
    64b8:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    64ba:	683b      	ldr	r3, [r7, #0]
    64bc:	4619      	mov	r1, r3
    64be:	483c      	ldr	r0, [pc, #240]	; (65b0 <_ext_irq_handler+0x10c>)
    64c0:	4b3d      	ldr	r3, [pc, #244]	; (65b8 <_ext_irq_handler+0x114>)
    64c2:	4798      	blx	r3

	ASSERT(callback);
    64c4:	4b3d      	ldr	r3, [pc, #244]	; (65bc <_ext_irq_handler+0x118>)
    64c6:	681b      	ldr	r3, [r3, #0]
    64c8:	2b00      	cmp	r3, #0
    64ca:	bf14      	ite	ne
    64cc:	2301      	movne	r3, #1
    64ce:	2300      	moveq	r3, #0
    64d0:	b2db      	uxtb	r3, r3
    64d2:	f44f 7284 	mov.w	r2, #264	; 0x108
    64d6:	493a      	ldr	r1, [pc, #232]	; (65c0 <_ext_irq_handler+0x11c>)
    64d8:	4618      	mov	r0, r3
    64da:	4b3a      	ldr	r3, [pc, #232]	; (65c4 <_ext_irq_handler+0x120>)
    64dc:	4798      	blx	r3

	while (flags) {
    64de:	e060      	b.n	65a2 <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    64e0:	683b      	ldr	r3, [r7, #0]
    64e2:	4618      	mov	r0, r3
    64e4:	4b38      	ldr	r3, [pc, #224]	; (65c8 <_ext_irq_handler+0x124>)
    64e6:	4798      	blx	r3
    64e8:	4603      	mov	r3, r0
    64ea:	b2db      	uxtb	r3, r3
    64ec:	3b01      	subs	r3, #1
    64ee:	b2db      	uxtb	r3, r3
    64f0:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    64f2:	e047      	b.n	6584 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    64f4:	2300      	movs	r3, #0
    64f6:	71fb      	strb	r3, [r7, #7]
    64f8:	2309      	movs	r3, #9
    64fa:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    64fc:	e024      	b.n	6548 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    64fe:	79ba      	ldrb	r2, [r7, #6]
    6500:	79fb      	ldrb	r3, [r7, #7]
    6502:	4413      	add	r3, r2
    6504:	105b      	asrs	r3, r3, #1
    6506:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    6508:	797b      	ldrb	r3, [r7, #5]
    650a:	4a30      	ldr	r2, [pc, #192]	; (65cc <_ext_irq_handler+0x128>)
    650c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    6510:	461a      	mov	r2, r3
    6512:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6516:	429a      	cmp	r2, r3
    6518:	d106      	bne.n	6528 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    651a:	797b      	ldrb	r3, [r7, #5]
    651c:	4a2b      	ldr	r2, [pc, #172]	; (65cc <_ext_irq_handler+0x128>)
    651e:	00db      	lsls	r3, r3, #3
    6520:	4413      	add	r3, r2
    6522:	685b      	ldr	r3, [r3, #4]
    6524:	60bb      	str	r3, [r7, #8]
					break;
    6526:	e013      	b.n	6550 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    6528:	797b      	ldrb	r3, [r7, #5]
    652a:	4a28      	ldr	r2, [pc, #160]	; (65cc <_ext_irq_handler+0x128>)
    652c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    6530:	461a      	mov	r2, r3
    6532:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6536:	429a      	cmp	r2, r3
    6538:	da03      	bge.n	6542 <_ext_irq_handler+0x9e>
					lower = middle + 1;
    653a:	797b      	ldrb	r3, [r7, #5]
    653c:	3301      	adds	r3, #1
    653e:	71fb      	strb	r3, [r7, #7]
    6540:	e002      	b.n	6548 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    6542:	797b      	ldrb	r3, [r7, #5]
    6544:	3b01      	subs	r3, #1
    6546:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    6548:	79ba      	ldrb	r2, [r7, #6]
    654a:	79fb      	ldrb	r3, [r7, #7]
    654c:	429a      	cmp	r2, r3
    654e:	d2d6      	bcs.n	64fe <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    6550:	68bb      	ldr	r3, [r7, #8]
    6552:	f1b3 3fff 	cmp.w	r3, #4294967295
    6556:	d003      	beq.n	6560 <_ext_irq_handler+0xbc>
				callback(pin);
    6558:	4b18      	ldr	r3, [pc, #96]	; (65bc <_ext_irq_handler+0x118>)
    655a:	681b      	ldr	r3, [r3, #0]
    655c:	68b8      	ldr	r0, [r7, #8]
    655e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    6560:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6564:	2201      	movs	r2, #1
    6566:	fa02 f303 	lsl.w	r3, r2, r3
    656a:	43da      	mvns	r2, r3
    656c:	683b      	ldr	r3, [r7, #0]
    656e:	4013      	ands	r3, r2
    6570:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    6572:	683b      	ldr	r3, [r7, #0]
    6574:	4618      	mov	r0, r3
    6576:	4b14      	ldr	r3, [pc, #80]	; (65c8 <_ext_irq_handler+0x124>)
    6578:	4798      	blx	r3
    657a:	4603      	mov	r3, r0
    657c:	b2db      	uxtb	r3, r3
    657e:	3b01      	subs	r3, #1
    6580:	b2db      	uxtb	r3, r3
    6582:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    6584:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6588:	f1b3 3fff 	cmp.w	r3, #4294967295
    658c:	d1b2      	bne.n	64f4 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    658e:	4808      	ldr	r0, [pc, #32]	; (65b0 <_ext_irq_handler+0x10c>)
    6590:	4b08      	ldr	r3, [pc, #32]	; (65b4 <_ext_irq_handler+0x110>)
    6592:	4798      	blx	r3
    6594:	4603      	mov	r3, r0
    6596:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    6598:	683b      	ldr	r3, [r7, #0]
    659a:	4619      	mov	r1, r3
    659c:	4804      	ldr	r0, [pc, #16]	; (65b0 <_ext_irq_handler+0x10c>)
    659e:	4b06      	ldr	r3, [pc, #24]	; (65b8 <_ext_irq_handler+0x114>)
    65a0:	4798      	blx	r3
	while (flags) {
    65a2:	683b      	ldr	r3, [r7, #0]
    65a4:	2b00      	cmp	r3, #0
    65a6:	d19b      	bne.n	64e0 <_ext_irq_handler+0x3c>
	}
}
    65a8:	bf00      	nop
    65aa:	3710      	adds	r7, #16
    65ac:	46bd      	mov	sp, r7
    65ae:	bd80      	pop	{r7, pc}
    65b0:	40002800 	.word	0x40002800
    65b4:	00006059 	.word	0x00006059
    65b8:	00006071 	.word	0x00006071
    65bc:	20002328 	.word	0x20002328
    65c0:	0001ad14 	.word	0x0001ad14
    65c4:	00004c81 	.word	0x00004c81
    65c8:	0001a5c9 	.word	0x0001a5c9
    65cc:	0001accc 	.word	0x0001accc

000065d0 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    65d0:	b580      	push	{r7, lr}
    65d2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    65d4:	4b01      	ldr	r3, [pc, #4]	; (65dc <EIC_0_Handler+0xc>)
    65d6:	4798      	blx	r3
} /**
    65d8:	bf00      	nop
    65da:	bd80      	pop	{r7, pc}
    65dc:	000064a5 	.word	0x000064a5

000065e0 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    65e0:	b580      	push	{r7, lr}
    65e2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    65e4:	4b01      	ldr	r3, [pc, #4]	; (65ec <EIC_1_Handler+0xc>)
    65e6:	4798      	blx	r3
} /**
    65e8:	bf00      	nop
    65ea:	bd80      	pop	{r7, pc}
    65ec:	000064a5 	.word	0x000064a5

000065f0 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    65f0:	b580      	push	{r7, lr}
    65f2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    65f4:	4b01      	ldr	r3, [pc, #4]	; (65fc <EIC_3_Handler+0xc>)
    65f6:	4798      	blx	r3
} /**
    65f8:	bf00      	nop
    65fa:	bd80      	pop	{r7, pc}
    65fc:	000064a5 	.word	0x000064a5

00006600 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    6600:	b580      	push	{r7, lr}
    6602:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6604:	4b01      	ldr	r3, [pc, #4]	; (660c <EIC_4_Handler+0xc>)
    6606:	4798      	blx	r3
} /**
    6608:	bf00      	nop
    660a:	bd80      	pop	{r7, pc}
    660c:	000064a5 	.word	0x000064a5

00006610 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    6610:	b580      	push	{r7, lr}
    6612:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6614:	4b01      	ldr	r3, [pc, #4]	; (661c <EIC_5_Handler+0xc>)
    6616:	4798      	blx	r3
} /**
    6618:	bf00      	nop
    661a:	bd80      	pop	{r7, pc}
    661c:	000064a5 	.word	0x000064a5

00006620 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    6620:	b580      	push	{r7, lr}
    6622:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6624:	4b01      	ldr	r3, [pc, #4]	; (662c <EIC_6_Handler+0xc>)
    6626:	4798      	blx	r3
} /**
    6628:	bf00      	nop
    662a:	bd80      	pop	{r7, pc}
    662c:	000064a5 	.word	0x000064a5

00006630 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    6630:	b580      	push	{r7, lr}
    6632:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6634:	4b01      	ldr	r3, [pc, #4]	; (663c <EIC_7_Handler+0xc>)
    6636:	4798      	blx	r3
} /**
    6638:	bf00      	nop
    663a:	bd80      	pop	{r7, pc}
    663c:	000064a5 	.word	0x000064a5

00006640 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    6640:	b580      	push	{r7, lr}
    6642:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6644:	4b01      	ldr	r3, [pc, #4]	; (664c <EIC_8_Handler+0xc>)
    6646:	4798      	blx	r3
} /**
    6648:	bf00      	nop
    664a:	bd80      	pop	{r7, pc}
    664c:	000064a5 	.word	0x000064a5

00006650 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    6650:	b580      	push	{r7, lr}
    6652:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6654:	4b01      	ldr	r3, [pc, #4]	; (665c <EIC_9_Handler+0xc>)
    6656:	4798      	blx	r3
}
    6658:	bf00      	nop
    665a:	bd80      	pop	{r7, pc}
    665c:	000064a5 	.word	0x000064a5

00006660 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    6660:	b480      	push	{r7}
    6662:	b085      	sub	sp, #20
    6664:	af00      	add	r7, sp, #0
    6666:	60f8      	str	r0, [r7, #12]
    6668:	460b      	mov	r3, r1
    666a:	607a      	str	r2, [r7, #4]
    666c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    666e:	7afa      	ldrb	r2, [r7, #11]
    6670:	68fb      	ldr	r3, [r7, #12]
    6672:	3248      	adds	r2, #72	; 0x48
    6674:	6879      	ldr	r1, [r7, #4]
    6676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    667a:	bf00      	nop
    667c:	3714      	adds	r7, #20
    667e:	46bd      	mov	sp, r7
    6680:	f85d 7b04 	ldr.w	r7, [sp], #4
    6684:	4770      	bx	lr

00006686 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    6686:	b480      	push	{r7}
    6688:	b083      	sub	sp, #12
    668a:	af00      	add	r7, sp, #0
    668c:	6078      	str	r0, [r7, #4]
    668e:	460b      	mov	r3, r1
    6690:	70fb      	strb	r3, [r7, #3]
    6692:	4613      	mov	r3, r2
    6694:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    6696:	78fb      	ldrb	r3, [r7, #3]
    6698:	687a      	ldr	r2, [r7, #4]
    669a:	3304      	adds	r3, #4
    669c:	00db      	lsls	r3, r3, #3
    669e:	4413      	add	r3, r2
    66a0:	78ba      	ldrb	r2, [r7, #2]
    66a2:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    66a4:	78fb      	ldrb	r3, [r7, #3]
    66a6:	78ba      	ldrb	r2, [r7, #2]
    66a8:	43d2      	mvns	r2, r2
    66aa:	b2d1      	uxtb	r1, r2
    66ac:	687a      	ldr	r2, [r7, #4]
    66ae:	3304      	adds	r3, #4
    66b0:	00db      	lsls	r3, r3, #3
    66b2:	4413      	add	r3, r2
    66b4:	460a      	mov	r2, r1
    66b6:	711a      	strb	r2, [r3, #4]
}
    66b8:	bf00      	nop
    66ba:	370c      	adds	r7, #12
    66bc:	46bd      	mov	sp, r7
    66be:	f85d 7b04 	ldr.w	r7, [sp], #4
    66c2:	4770      	bx	lr

000066c4 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    66c4:	b480      	push	{r7}
    66c6:	b085      	sub	sp, #20
    66c8:	af00      	add	r7, sp, #0
    66ca:	60f8      	str	r0, [r7, #12]
    66cc:	460b      	mov	r3, r1
    66ce:	607a      	str	r2, [r7, #4]
    66d0:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    66d2:	7afa      	ldrb	r2, [r7, #11]
    66d4:	68fb      	ldr	r3, [r7, #12]
    66d6:	3204      	adds	r2, #4
    66d8:	6879      	ldr	r1, [r7, #4]
    66da:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    66de:	bf00      	nop
    66e0:	3714      	adds	r7, #20
    66e2:	46bd      	mov	sp, r7
    66e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    66e8:	4770      	bx	lr
	...

000066ec <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    66ec:	b580      	push	{r7, lr}
    66ee:	b082      	sub	sp, #8
    66f0:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    66f2:	2300      	movs	r3, #0
    66f4:	71fb      	strb	r3, [r7, #7]
    66f6:	e00b      	b.n	6710 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    66f8:	79fb      	ldrb	r3, [r7, #7]
    66fa:	4a18      	ldr	r2, [pc, #96]	; (675c <_event_system_init+0x70>)
    66fc:	5cd3      	ldrb	r3, [r2, r3]
    66fe:	461a      	mov	r2, r3
    6700:	79fb      	ldrb	r3, [r7, #7]
    6702:	4619      	mov	r1, r3
    6704:	4816      	ldr	r0, [pc, #88]	; (6760 <_event_system_init+0x74>)
    6706:	4b17      	ldr	r3, [pc, #92]	; (6764 <_event_system_init+0x78>)
    6708:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    670a:	79fb      	ldrb	r3, [r7, #7]
    670c:	3301      	adds	r3, #1
    670e:	71fb      	strb	r3, [r7, #7]
    6710:	79fb      	ldrb	r3, [r7, #7]
    6712:	2b42      	cmp	r3, #66	; 0x42
    6714:	d9f0      	bls.n	66f8 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    6716:	2300      	movs	r3, #0
    6718:	71fb      	strb	r3, [r7, #7]
    671a:	e016      	b.n	674a <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    671c:	79fb      	ldrb	r3, [r7, #7]
    671e:	4a12      	ldr	r2, [pc, #72]	; (6768 <_event_system_init+0x7c>)
    6720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    6724:	461a      	mov	r2, r3
    6726:	79fb      	ldrb	r3, [r7, #7]
    6728:	4619      	mov	r1, r3
    672a:	480d      	ldr	r0, [pc, #52]	; (6760 <_event_system_init+0x74>)
    672c:	4b0f      	ldr	r3, [pc, #60]	; (676c <_event_system_init+0x80>)
    672e:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    6730:	79fb      	ldrb	r3, [r7, #7]
    6732:	4a0f      	ldr	r2, [pc, #60]	; (6770 <_event_system_init+0x84>)
    6734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6738:	b2da      	uxtb	r2, r3
    673a:	79fb      	ldrb	r3, [r7, #7]
    673c:	4619      	mov	r1, r3
    673e:	4808      	ldr	r0, [pc, #32]	; (6760 <_event_system_init+0x74>)
    6740:	4b0c      	ldr	r3, [pc, #48]	; (6774 <_event_system_init+0x88>)
    6742:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    6744:	79fb      	ldrb	r3, [r7, #7]
    6746:	3301      	adds	r3, #1
    6748:	71fb      	strb	r3, [r7, #7]
    674a:	79fb      	ldrb	r3, [r7, #7]
    674c:	2b1f      	cmp	r3, #31
    674e:	d9e5      	bls.n	671c <_event_system_init+0x30>
	}

	return ERR_NONE;
    6750:	2300      	movs	r3, #0
}
    6752:	4618      	mov	r0, r3
    6754:	3708      	adds	r7, #8
    6756:	46bd      	mov	sp, r7
    6758:	bd80      	pop	{r7, pc}
    675a:	bf00      	nop
    675c:	0001ad2c 	.word	0x0001ad2c
    6760:	4100e000 	.word	0x4100e000
    6764:	00006661 	.word	0x00006661
    6768:	0001ad70 	.word	0x0001ad70
    676c:	000066c5 	.word	0x000066c5
    6770:	0001adb0 	.word	0x0001adb0
    6774:	00006687 	.word	0x00006687

00006778 <hri_gclk_wait_for_sync>:
{
    6778:	b480      	push	{r7}
    677a:	b083      	sub	sp, #12
    677c:	af00      	add	r7, sp, #0
    677e:	6078      	str	r0, [r7, #4]
    6780:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6782:	bf00      	nop
    6784:	687b      	ldr	r3, [r7, #4]
    6786:	685a      	ldr	r2, [r3, #4]
    6788:	683b      	ldr	r3, [r7, #0]
    678a:	4013      	ands	r3, r2
    678c:	2b00      	cmp	r3, #0
    678e:	d1f9      	bne.n	6784 <hri_gclk_wait_for_sync+0xc>
}
    6790:	bf00      	nop
    6792:	370c      	adds	r7, #12
    6794:	46bd      	mov	sp, r7
    6796:	f85d 7b04 	ldr.w	r7, [sp], #4
    679a:	4770      	bx	lr

0000679c <hri_gclk_write_GENCTRL_reg>:
{
    679c:	b580      	push	{r7, lr}
    679e:	b084      	sub	sp, #16
    67a0:	af00      	add	r7, sp, #0
    67a2:	60f8      	str	r0, [r7, #12]
    67a4:	460b      	mov	r3, r1
    67a6:	607a      	str	r2, [r7, #4]
    67a8:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    67aa:	7afa      	ldrb	r2, [r7, #11]
    67ac:	68fb      	ldr	r3, [r7, #12]
    67ae:	3208      	adds	r2, #8
    67b0:	6879      	ldr	r1, [r7, #4]
    67b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    67b6:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    67ba:	68f8      	ldr	r0, [r7, #12]
    67bc:	4b02      	ldr	r3, [pc, #8]	; (67c8 <hri_gclk_write_GENCTRL_reg+0x2c>)
    67be:	4798      	blx	r3
}
    67c0:	bf00      	nop
    67c2:	3710      	adds	r7, #16
    67c4:	46bd      	mov	sp, r7
    67c6:	bd80      	pop	{r7, pc}
    67c8:	00006779 	.word	0x00006779

000067cc <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    67cc:	b580      	push	{r7, lr}
    67ce:	b082      	sub	sp, #8
    67d0:	af00      	add	r7, sp, #0
    67d2:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    67d4:	687b      	ldr	r3, [r7, #4]
    67d6:	f003 0301 	and.w	r3, r3, #1
    67da:	2b00      	cmp	r3, #0
    67dc:	d004      	beq.n	67e8 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    67de:	4a3b      	ldr	r2, [pc, #236]	; (68cc <_gclk_init_generators_by_fref+0x100>)
    67e0:	2100      	movs	r1, #0
    67e2:	483b      	ldr	r0, [pc, #236]	; (68d0 <_gclk_init_generators_by_fref+0x104>)
    67e4:	4b3b      	ldr	r3, [pc, #236]	; (68d4 <_gclk_init_generators_by_fref+0x108>)
    67e6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    67e8:	687b      	ldr	r3, [r7, #4]
    67ea:	f003 0302 	and.w	r3, r3, #2
    67ee:	2b00      	cmp	r3, #0
    67f0:	d004      	beq.n	67fc <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    67f2:	4a39      	ldr	r2, [pc, #228]	; (68d8 <_gclk_init_generators_by_fref+0x10c>)
    67f4:	2101      	movs	r1, #1
    67f6:	4836      	ldr	r0, [pc, #216]	; (68d0 <_gclk_init_generators_by_fref+0x104>)
    67f8:	4b36      	ldr	r3, [pc, #216]	; (68d4 <_gclk_init_generators_by_fref+0x108>)
    67fa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    67fc:	687b      	ldr	r3, [r7, #4]
    67fe:	f003 0304 	and.w	r3, r3, #4
    6802:	2b00      	cmp	r3, #0
    6804:	d004      	beq.n	6810 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    6806:	4a35      	ldr	r2, [pc, #212]	; (68dc <_gclk_init_generators_by_fref+0x110>)
    6808:	2102      	movs	r1, #2
    680a:	4831      	ldr	r0, [pc, #196]	; (68d0 <_gclk_init_generators_by_fref+0x104>)
    680c:	4b31      	ldr	r3, [pc, #196]	; (68d4 <_gclk_init_generators_by_fref+0x108>)
    680e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    6810:	687b      	ldr	r3, [r7, #4]
    6812:	f003 0308 	and.w	r3, r3, #8
    6816:	2b00      	cmp	r3, #0
    6818:	d004      	beq.n	6824 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    681a:	4a31      	ldr	r2, [pc, #196]	; (68e0 <_gclk_init_generators_by_fref+0x114>)
    681c:	2103      	movs	r1, #3
    681e:	482c      	ldr	r0, [pc, #176]	; (68d0 <_gclk_init_generators_by_fref+0x104>)
    6820:	4b2c      	ldr	r3, [pc, #176]	; (68d4 <_gclk_init_generators_by_fref+0x108>)
    6822:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    6824:	687b      	ldr	r3, [r7, #4]
    6826:	f003 0310 	and.w	r3, r3, #16
    682a:	2b00      	cmp	r3, #0
    682c:	d004      	beq.n	6838 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    682e:	4a2d      	ldr	r2, [pc, #180]	; (68e4 <_gclk_init_generators_by_fref+0x118>)
    6830:	2104      	movs	r1, #4
    6832:	4827      	ldr	r0, [pc, #156]	; (68d0 <_gclk_init_generators_by_fref+0x104>)
    6834:	4b27      	ldr	r3, [pc, #156]	; (68d4 <_gclk_init_generators_by_fref+0x108>)
    6836:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    6838:	687b      	ldr	r3, [r7, #4]
    683a:	f003 0320 	and.w	r3, r3, #32
    683e:	2b00      	cmp	r3, #0
    6840:	d004      	beq.n	684c <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    6842:	4a29      	ldr	r2, [pc, #164]	; (68e8 <_gclk_init_generators_by_fref+0x11c>)
    6844:	2105      	movs	r1, #5
    6846:	4822      	ldr	r0, [pc, #136]	; (68d0 <_gclk_init_generators_by_fref+0x104>)
    6848:	4b22      	ldr	r3, [pc, #136]	; (68d4 <_gclk_init_generators_by_fref+0x108>)
    684a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    684c:	687b      	ldr	r3, [r7, #4]
    684e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6852:	2b00      	cmp	r3, #0
    6854:	d004      	beq.n	6860 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    6856:	4a25      	ldr	r2, [pc, #148]	; (68ec <_gclk_init_generators_by_fref+0x120>)
    6858:	2106      	movs	r1, #6
    685a:	481d      	ldr	r0, [pc, #116]	; (68d0 <_gclk_init_generators_by_fref+0x104>)
    685c:	4b1d      	ldr	r3, [pc, #116]	; (68d4 <_gclk_init_generators_by_fref+0x108>)
    685e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    6860:	687b      	ldr	r3, [r7, #4]
    6862:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6866:	2b00      	cmp	r3, #0
    6868:	d004      	beq.n	6874 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    686a:	4a21      	ldr	r2, [pc, #132]	; (68f0 <_gclk_init_generators_by_fref+0x124>)
    686c:	2107      	movs	r1, #7
    686e:	4818      	ldr	r0, [pc, #96]	; (68d0 <_gclk_init_generators_by_fref+0x104>)
    6870:	4b18      	ldr	r3, [pc, #96]	; (68d4 <_gclk_init_generators_by_fref+0x108>)
    6872:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    6874:	687b      	ldr	r3, [r7, #4]
    6876:	f403 7380 	and.w	r3, r3, #256	; 0x100
    687a:	2b00      	cmp	r3, #0
    687c:	d004      	beq.n	6888 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    687e:	4a1d      	ldr	r2, [pc, #116]	; (68f4 <_gclk_init_generators_by_fref+0x128>)
    6880:	2108      	movs	r1, #8
    6882:	4813      	ldr	r0, [pc, #76]	; (68d0 <_gclk_init_generators_by_fref+0x104>)
    6884:	4b13      	ldr	r3, [pc, #76]	; (68d4 <_gclk_init_generators_by_fref+0x108>)
    6886:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    6888:	687b      	ldr	r3, [r7, #4]
    688a:	f403 7300 	and.w	r3, r3, #512	; 0x200
    688e:	2b00      	cmp	r3, #0
    6890:	d004      	beq.n	689c <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    6892:	4a19      	ldr	r2, [pc, #100]	; (68f8 <_gclk_init_generators_by_fref+0x12c>)
    6894:	2109      	movs	r1, #9
    6896:	480e      	ldr	r0, [pc, #56]	; (68d0 <_gclk_init_generators_by_fref+0x104>)
    6898:	4b0e      	ldr	r3, [pc, #56]	; (68d4 <_gclk_init_generators_by_fref+0x108>)
    689a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    689c:	687b      	ldr	r3, [r7, #4]
    689e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    68a2:	2b00      	cmp	r3, #0
    68a4:	d004      	beq.n	68b0 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    68a6:	4a15      	ldr	r2, [pc, #84]	; (68fc <_gclk_init_generators_by_fref+0x130>)
    68a8:	210a      	movs	r1, #10
    68aa:	4809      	ldr	r0, [pc, #36]	; (68d0 <_gclk_init_generators_by_fref+0x104>)
    68ac:	4b09      	ldr	r3, [pc, #36]	; (68d4 <_gclk_init_generators_by_fref+0x108>)
    68ae:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    68b0:	687b      	ldr	r3, [r7, #4]
    68b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    68b6:	2b00      	cmp	r3, #0
    68b8:	d004      	beq.n	68c4 <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    68ba:	4a11      	ldr	r2, [pc, #68]	; (6900 <_gclk_init_generators_by_fref+0x134>)
    68bc:	210b      	movs	r1, #11
    68be:	4804      	ldr	r0, [pc, #16]	; (68d0 <_gclk_init_generators_by_fref+0x104>)
    68c0:	4b04      	ldr	r3, [pc, #16]	; (68d4 <_gclk_init_generators_by_fref+0x108>)
    68c2:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    68c4:	bf00      	nop
    68c6:	3708      	adds	r7, #8
    68c8:	46bd      	mov	sp, r7
    68ca:	bd80      	pop	{r7, pc}
    68cc:	00010107 	.word	0x00010107
    68d0:	40001c00 	.word	0x40001c00
    68d4:	0000679d 	.word	0x0000679d
    68d8:	00010907 	.word	0x00010907
    68dc:	00010906 	.word	0x00010906
    68e0:	00020908 	.word	0x00020908
    68e4:	00010901 	.word	0x00010901
    68e8:	00062901 	.word	0x00062901
    68ec:	000c2901 	.word	0x000c2901
    68f0:	00082908 	.word	0x00082908
    68f4:	00032901 	.word	0x00032901
    68f8:	00011908 	.word	0x00011908
    68fc:	00010905 	.word	0x00010905
    6900:	00041905 	.word	0x00041905

00006904 <hri_mclk_write_CPUDIV_reg>:
{
    6904:	b480      	push	{r7}
    6906:	b083      	sub	sp, #12
    6908:	af00      	add	r7, sp, #0
    690a:	6078      	str	r0, [r7, #4]
    690c:	460b      	mov	r3, r1
    690e:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    6910:	687b      	ldr	r3, [r7, #4]
    6912:	78fa      	ldrb	r2, [r7, #3]
    6914:	715a      	strb	r2, [r3, #5]
}
    6916:	bf00      	nop
    6918:	370c      	adds	r7, #12
    691a:	46bd      	mov	sp, r7
    691c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6920:	4770      	bx	lr
	...

00006924 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    6924:	b580      	push	{r7, lr}
    6926:	b082      	sub	sp, #8
    6928:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    692a:	4b05      	ldr	r3, [pc, #20]	; (6940 <_mclk_init+0x1c>)
    692c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    692e:	2101      	movs	r1, #1
    6930:	6878      	ldr	r0, [r7, #4]
    6932:	4b04      	ldr	r3, [pc, #16]	; (6944 <_mclk_init+0x20>)
    6934:	4798      	blx	r3
}
    6936:	bf00      	nop
    6938:	3708      	adds	r7, #8
    693a:	46bd      	mov	sp, r7
    693c:	bd80      	pop	{r7, pc}
    693e:	bf00      	nop
    6940:	40000800 	.word	0x40000800
    6944:	00006905 	.word	0x00006905

00006948 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    6948:	b480      	push	{r7}
    694a:	b083      	sub	sp, #12
    694c:	af00      	add	r7, sp, #0
    694e:	6078      	str	r0, [r7, #4]
    6950:	460b      	mov	r3, r1
    6952:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    6954:	687b      	ldr	r3, [r7, #4]
    6956:	78fa      	ldrb	r2, [r7, #3]
    6958:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    695a:	bf00      	nop
    695c:	370c      	adds	r7, #12
    695e:	46bd      	mov	sp, r7
    6960:	f85d 7b04 	ldr.w	r7, [sp], #4
    6964:	4770      	bx	lr

00006966 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    6966:	b480      	push	{r7}
    6968:	b083      	sub	sp, #12
    696a:	af00      	add	r7, sp, #0
    696c:	6078      	str	r0, [r7, #4]
    696e:	460b      	mov	r3, r1
    6970:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    6972:	687b      	ldr	r3, [r7, #4]
    6974:	887a      	ldrh	r2, [r7, #2]
    6976:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6978:	bf00      	nop
    697a:	370c      	adds	r7, #12
    697c:	46bd      	mov	sp, r7
    697e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6982:	4770      	bx	lr

00006984 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    6984:	b480      	push	{r7}
    6986:	b083      	sub	sp, #12
    6988:	af00      	add	r7, sp, #0
    698a:	6078      	str	r0, [r7, #4]
    698c:	460b      	mov	r3, r1
    698e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    6990:	687b      	ldr	r3, [r7, #4]
    6992:	78fa      	ldrb	r2, [r7, #3]
    6994:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6996:	bf00      	nop
    6998:	370c      	adds	r7, #12
    699a:	46bd      	mov	sp, r7
    699c:	f85d 7b04 	ldr.w	r7, [sp], #4
    69a0:	4770      	bx	lr

000069a2 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    69a2:	b480      	push	{r7}
    69a4:	b083      	sub	sp, #12
    69a6:	af00      	add	r7, sp, #0
    69a8:	6078      	str	r0, [r7, #4]
    69aa:	460b      	mov	r3, r1
    69ac:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    69ae:	687b      	ldr	r3, [r7, #4]
    69b0:	78fa      	ldrb	r2, [r7, #3]
    69b2:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    69b4:	bf00      	nop
    69b6:	370c      	adds	r7, #12
    69b8:	46bd      	mov	sp, r7
    69ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    69be:	4770      	bx	lr

000069c0 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    69c0:	b480      	push	{r7}
    69c2:	b085      	sub	sp, #20
    69c4:	af00      	add	r7, sp, #0
    69c6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    69c8:	687b      	ldr	r3, [r7, #4]
    69ca:	69db      	ldr	r3, [r3, #28]
    69cc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    69ce:	68fb      	ldr	r3, [r7, #12]
    69d0:	0a1b      	lsrs	r3, r3, #8
    69d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    69d6:	60fb      	str	r3, [r7, #12]
	return tmp;
    69d8:	68fb      	ldr	r3, [r7, #12]
}
    69da:	4618      	mov	r0, r3
    69dc:	3714      	adds	r7, #20
    69de:	46bd      	mov	sp, r7
    69e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    69e4:	4770      	bx	lr

000069e6 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    69e6:	b480      	push	{r7}
    69e8:	b083      	sub	sp, #12
    69ea:	af00      	add	r7, sp, #0
    69ec:	6078      	str	r0, [r7, #4]
    69ee:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    69f0:	687b      	ldr	r3, [r7, #4]
    69f2:	683a      	ldr	r2, [r7, #0]
    69f4:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    69f6:	bf00      	nop
    69f8:	370c      	adds	r7, #12
    69fa:	46bd      	mov	sp, r7
    69fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a00:	4770      	bx	lr
	...

00006a04 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    6a04:	b580      	push	{r7, lr}
    6a06:	b082      	sub	sp, #8
    6a08:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    6a0a:	4b13      	ldr	r3, [pc, #76]	; (6a58 <_osc32kctrl_init_sources+0x54>)
    6a0c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    6a0e:	2300      	movs	r3, #0
    6a10:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    6a12:	f242 018e 	movw	r1, #8334	; 0x208e
    6a16:	6878      	ldr	r0, [r7, #4]
    6a18:	4b10      	ldr	r3, [pc, #64]	; (6a5c <_osc32kctrl_init_sources+0x58>)
    6a1a:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    6a1c:	2100      	movs	r1, #0
    6a1e:	6878      	ldr	r0, [r7, #4]
    6a20:	4b0f      	ldr	r3, [pc, #60]	; (6a60 <_osc32kctrl_init_sources+0x5c>)
    6a22:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    6a24:	2100      	movs	r1, #0
    6a26:	6878      	ldr	r0, [r7, #4]
    6a28:	4b0e      	ldr	r3, [pc, #56]	; (6a64 <_osc32kctrl_init_sources+0x60>)
    6a2a:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    6a2c:	6878      	ldr	r0, [r7, #4]
    6a2e:	4b0e      	ldr	r3, [pc, #56]	; (6a68 <_osc32kctrl_init_sources+0x64>)
    6a30:	4798      	blx	r3
    6a32:	4603      	mov	r3, r0
    6a34:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    6a36:	887b      	ldrh	r3, [r7, #2]
    6a38:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    6a3a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    6a3e:	4619      	mov	r1, r3
    6a40:	6878      	ldr	r0, [r7, #4]
    6a42:	4b0a      	ldr	r3, [pc, #40]	; (6a6c <_osc32kctrl_init_sources+0x68>)
    6a44:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    6a46:	2100      	movs	r1, #0
    6a48:	6878      	ldr	r0, [r7, #4]
    6a4a:	4b09      	ldr	r3, [pc, #36]	; (6a70 <_osc32kctrl_init_sources+0x6c>)
    6a4c:	4798      	blx	r3
	(void)calib;
}
    6a4e:	bf00      	nop
    6a50:	3708      	adds	r7, #8
    6a52:	46bd      	mov	sp, r7
    6a54:	bd80      	pop	{r7, pc}
    6a56:	bf00      	nop
    6a58:	40001400 	.word	0x40001400
    6a5c:	00006967 	.word	0x00006967
    6a60:	00006985 	.word	0x00006985
    6a64:	000069a3 	.word	0x000069a3
    6a68:	000069c1 	.word	0x000069c1
    6a6c:	000069e7 	.word	0x000069e7
    6a70:	00006949 	.word	0x00006949

00006a74 <hri_gclk_wait_for_sync>:
{
    6a74:	b480      	push	{r7}
    6a76:	b083      	sub	sp, #12
    6a78:	af00      	add	r7, sp, #0
    6a7a:	6078      	str	r0, [r7, #4]
    6a7c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6a7e:	bf00      	nop
    6a80:	687b      	ldr	r3, [r7, #4]
    6a82:	685a      	ldr	r2, [r3, #4]
    6a84:	683b      	ldr	r3, [r7, #0]
    6a86:	4013      	ands	r3, r2
    6a88:	2b00      	cmp	r3, #0
    6a8a:	d1f9      	bne.n	6a80 <hri_gclk_wait_for_sync+0xc>
}
    6a8c:	bf00      	nop
    6a8e:	370c      	adds	r7, #12
    6a90:	46bd      	mov	sp, r7
    6a92:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a96:	4770      	bx	lr

00006a98 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    6a98:	b480      	push	{r7}
    6a9a:	b083      	sub	sp, #12
    6a9c:	af00      	add	r7, sp, #0
    6a9e:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    6aa0:	687b      	ldr	r3, [r7, #4]
    6aa2:	685b      	ldr	r3, [r3, #4]
    6aa4:	089b      	lsrs	r3, r3, #2
    6aa6:	f003 0301 	and.w	r3, r3, #1
    6aaa:	2b00      	cmp	r3, #0
    6aac:	bf14      	ite	ne
    6aae:	2301      	movne	r3, #1
    6ab0:	2300      	moveq	r3, #0
    6ab2:	b2db      	uxtb	r3, r3
}
    6ab4:	4618      	mov	r0, r3
    6ab6:	370c      	adds	r7, #12
    6ab8:	46bd      	mov	sp, r7
    6aba:	f85d 7b04 	ldr.w	r7, [sp], #4
    6abe:	4770      	bx	lr

00006ac0 <hri_gclk_read_SYNCBUSY_reg>:
{
    6ac0:	b480      	push	{r7}
    6ac2:	b083      	sub	sp, #12
    6ac4:	af00      	add	r7, sp, #0
    6ac6:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    6ac8:	687b      	ldr	r3, [r7, #4]
    6aca:	685b      	ldr	r3, [r3, #4]
}
    6acc:	4618      	mov	r0, r3
    6ace:	370c      	adds	r7, #12
    6ad0:	46bd      	mov	sp, r7
    6ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ad6:	4770      	bx	lr

00006ad8 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    6ad8:	b580      	push	{r7, lr}
    6ada:	b086      	sub	sp, #24
    6adc:	af00      	add	r7, sp, #0
    6ade:	60f8      	str	r0, [r7, #12]
    6ae0:	460b      	mov	r3, r1
    6ae2:	607a      	str	r2, [r7, #4]
    6ae4:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6ae6:	7afa      	ldrb	r2, [r7, #11]
    6ae8:	68fb      	ldr	r3, [r7, #12]
    6aea:	3208      	adds	r2, #8
    6aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6af0:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6af2:	697b      	ldr	r3, [r7, #20]
    6af4:	f023 030f 	bic.w	r3, r3, #15
    6af8:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    6afa:	687b      	ldr	r3, [r7, #4]
    6afc:	f003 030f 	and.w	r3, r3, #15
    6b00:	697a      	ldr	r2, [r7, #20]
    6b02:	4313      	orrs	r3, r2
    6b04:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6b06:	7afa      	ldrb	r2, [r7, #11]
    6b08:	68fb      	ldr	r3, [r7, #12]
    6b0a:	3208      	adds	r2, #8
    6b0c:	6979      	ldr	r1, [r7, #20]
    6b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    6b12:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    6b16:	68f8      	ldr	r0, [r7, #12]
    6b18:	4b02      	ldr	r3, [pc, #8]	; (6b24 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    6b1a:	4798      	blx	r3
}
    6b1c:	bf00      	nop
    6b1e:	3718      	adds	r7, #24
    6b20:	46bd      	mov	sp, r7
    6b22:	bd80      	pop	{r7, pc}
    6b24:	00006a75 	.word	0x00006a75

00006b28 <hri_gclk_write_PCHCTRL_reg>:
{
    6b28:	b480      	push	{r7}
    6b2a:	b085      	sub	sp, #20
    6b2c:	af00      	add	r7, sp, #0
    6b2e:	60f8      	str	r0, [r7, #12]
    6b30:	460b      	mov	r3, r1
    6b32:	607a      	str	r2, [r7, #4]
    6b34:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    6b36:	7afa      	ldrb	r2, [r7, #11]
    6b38:	68fb      	ldr	r3, [r7, #12]
    6b3a:	3220      	adds	r2, #32
    6b3c:	6879      	ldr	r1, [r7, #4]
    6b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6b42:	bf00      	nop
    6b44:	3714      	adds	r7, #20
    6b46:	46bd      	mov	sp, r7
    6b48:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b4c:	4770      	bx	lr

00006b4e <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    6b4e:	b480      	push	{r7}
    6b50:	b085      	sub	sp, #20
    6b52:	af00      	add	r7, sp, #0
    6b54:	60f8      	str	r0, [r7, #12]
    6b56:	460b      	mov	r3, r1
    6b58:	607a      	str	r2, [r7, #4]
    6b5a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    6b5c:	bf00      	nop
    6b5e:	7afa      	ldrb	r2, [r7, #11]
    6b60:	68f9      	ldr	r1, [r7, #12]
    6b62:	4613      	mov	r3, r2
    6b64:	009b      	lsls	r3, r3, #2
    6b66:	4413      	add	r3, r2
    6b68:	009b      	lsls	r3, r3, #2
    6b6a:	440b      	add	r3, r1
    6b6c:	333c      	adds	r3, #60	; 0x3c
    6b6e:	681a      	ldr	r2, [r3, #0]
    6b70:	687b      	ldr	r3, [r7, #4]
    6b72:	4013      	ands	r3, r2
    6b74:	2b00      	cmp	r3, #0
    6b76:	d1f2      	bne.n	6b5e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    6b78:	bf00      	nop
    6b7a:	3714      	adds	r7, #20
    6b7c:	46bd      	mov	sp, r7
    6b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b82:	4770      	bx	lr

00006b84 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    6b84:	b480      	push	{r7}
    6b86:	b083      	sub	sp, #12
    6b88:	af00      	add	r7, sp, #0
    6b8a:	6078      	str	r0, [r7, #4]
    6b8c:	460b      	mov	r3, r1
    6b8e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    6b90:	78fa      	ldrb	r2, [r7, #3]
    6b92:	6879      	ldr	r1, [r7, #4]
    6b94:	4613      	mov	r3, r2
    6b96:	009b      	lsls	r3, r3, #2
    6b98:	4413      	add	r3, r2
    6b9a:	009b      	lsls	r3, r3, #2
    6b9c:	440b      	add	r3, r1
    6b9e:	3340      	adds	r3, #64	; 0x40
    6ba0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    6ba2:	f003 0301 	and.w	r3, r3, #1
    6ba6:	2b00      	cmp	r3, #0
    6ba8:	bf14      	ite	ne
    6baa:	2301      	movne	r3, #1
    6bac:	2300      	moveq	r3, #0
    6bae:	b2db      	uxtb	r3, r3
}
    6bb0:	4618      	mov	r0, r3
    6bb2:	370c      	adds	r7, #12
    6bb4:	46bd      	mov	sp, r7
    6bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bba:	4770      	bx	lr

00006bbc <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    6bbc:	b480      	push	{r7}
    6bbe:	b083      	sub	sp, #12
    6bc0:	af00      	add	r7, sp, #0
    6bc2:	6078      	str	r0, [r7, #4]
    6bc4:	460b      	mov	r3, r1
    6bc6:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    6bc8:	78fa      	ldrb	r2, [r7, #3]
    6bca:	6879      	ldr	r1, [r7, #4]
    6bcc:	4613      	mov	r3, r2
    6bce:	009b      	lsls	r3, r3, #2
    6bd0:	4413      	add	r3, r2
    6bd2:	009b      	lsls	r3, r3, #2
    6bd4:	440b      	add	r3, r1
    6bd6:	3340      	adds	r3, #64	; 0x40
    6bd8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    6bda:	085b      	lsrs	r3, r3, #1
    6bdc:	f003 0301 	and.w	r3, r3, #1
    6be0:	2b00      	cmp	r3, #0
    6be2:	bf14      	ite	ne
    6be4:	2301      	movne	r3, #1
    6be6:	2300      	moveq	r3, #0
    6be8:	b2db      	uxtb	r3, r3
}
    6bea:	4618      	mov	r0, r3
    6bec:	370c      	adds	r7, #12
    6bee:	46bd      	mov	sp, r7
    6bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bf4:	4770      	bx	lr
	...

00006bf8 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    6bf8:	b580      	push	{r7, lr}
    6bfa:	b082      	sub	sp, #8
    6bfc:	af00      	add	r7, sp, #0
    6bfe:	6078      	str	r0, [r7, #4]
    6c00:	460b      	mov	r3, r1
    6c02:	70fb      	strb	r3, [r7, #3]
    6c04:	4613      	mov	r3, r2
    6c06:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    6c08:	78fa      	ldrb	r2, [r7, #3]
    6c0a:	6879      	ldr	r1, [r7, #4]
    6c0c:	4613      	mov	r3, r2
    6c0e:	009b      	lsls	r3, r3, #2
    6c10:	4413      	add	r3, r2
    6c12:	009b      	lsls	r3, r3, #2
    6c14:	440b      	add	r3, r1
    6c16:	3330      	adds	r3, #48	; 0x30
    6c18:	78ba      	ldrb	r2, [r7, #2]
    6c1a:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    6c1c:	78fb      	ldrb	r3, [r7, #3]
    6c1e:	2202      	movs	r2, #2
    6c20:	4619      	mov	r1, r3
    6c22:	6878      	ldr	r0, [r7, #4]
    6c24:	4b02      	ldr	r3, [pc, #8]	; (6c30 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    6c26:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6c28:	bf00      	nop
    6c2a:	3708      	adds	r7, #8
    6c2c:	46bd      	mov	sp, r7
    6c2e:	bd80      	pop	{r7, pc}
    6c30:	00006b4f 	.word	0x00006b4f

00006c34 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    6c34:	b580      	push	{r7, lr}
    6c36:	b084      	sub	sp, #16
    6c38:	af00      	add	r7, sp, #0
    6c3a:	60f8      	str	r0, [r7, #12]
    6c3c:	460b      	mov	r3, r1
    6c3e:	607a      	str	r2, [r7, #4]
    6c40:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    6c42:	7afa      	ldrb	r2, [r7, #11]
    6c44:	68f9      	ldr	r1, [r7, #12]
    6c46:	4613      	mov	r3, r2
    6c48:	009b      	lsls	r3, r3, #2
    6c4a:	4413      	add	r3, r2
    6c4c:	009b      	lsls	r3, r3, #2
    6c4e:	440b      	add	r3, r1
    6c50:	3334      	adds	r3, #52	; 0x34
    6c52:	687a      	ldr	r2, [r7, #4]
    6c54:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    6c56:	7afb      	ldrb	r3, [r7, #11]
    6c58:	2206      	movs	r2, #6
    6c5a:	4619      	mov	r1, r3
    6c5c:	68f8      	ldr	r0, [r7, #12]
    6c5e:	4b03      	ldr	r3, [pc, #12]	; (6c6c <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    6c60:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6c62:	bf00      	nop
    6c64:	3710      	adds	r7, #16
    6c66:	46bd      	mov	sp, r7
    6c68:	bd80      	pop	{r7, pc}
    6c6a:	bf00      	nop
    6c6c:	00006b4f 	.word	0x00006b4f

00006c70 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    6c70:	b480      	push	{r7}
    6c72:	b085      	sub	sp, #20
    6c74:	af00      	add	r7, sp, #0
    6c76:	60f8      	str	r0, [r7, #12]
    6c78:	460b      	mov	r3, r1
    6c7a:	607a      	str	r2, [r7, #4]
    6c7c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    6c7e:	7afa      	ldrb	r2, [r7, #11]
    6c80:	68f9      	ldr	r1, [r7, #12]
    6c82:	4613      	mov	r3, r2
    6c84:	009b      	lsls	r3, r3, #2
    6c86:	4413      	add	r3, r2
    6c88:	009b      	lsls	r3, r3, #2
    6c8a:	440b      	add	r3, r1
    6c8c:	3338      	adds	r3, #56	; 0x38
    6c8e:	687a      	ldr	r2, [r7, #4]
    6c90:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6c92:	bf00      	nop
    6c94:	3714      	adds	r7, #20
    6c96:	46bd      	mov	sp, r7
    6c98:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c9c:	4770      	bx	lr

00006c9e <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    6c9e:	b480      	push	{r7}
    6ca0:	b083      	sub	sp, #12
    6ca2:	af00      	add	r7, sp, #0
    6ca4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    6ca6:	687b      	ldr	r3, [r7, #4]
    6ca8:	691b      	ldr	r3, [r3, #16]
    6caa:	085b      	lsrs	r3, r3, #1
    6cac:	f003 0301 	and.w	r3, r3, #1
    6cb0:	2b00      	cmp	r3, #0
    6cb2:	bf14      	ite	ne
    6cb4:	2301      	movne	r3, #1
    6cb6:	2300      	moveq	r3, #0
    6cb8:	b2db      	uxtb	r3, r3
}
    6cba:	4618      	mov	r0, r3
    6cbc:	370c      	adds	r7, #12
    6cbe:	46bd      	mov	sp, r7
    6cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cc4:	4770      	bx	lr

00006cc6 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    6cc6:	b480      	push	{r7}
    6cc8:	b083      	sub	sp, #12
    6cca:	af00      	add	r7, sp, #0
    6ccc:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    6cce:	687b      	ldr	r3, [r7, #4]
    6cd0:	691b      	ldr	r3, [r3, #16]
    6cd2:	0a1b      	lsrs	r3, r3, #8
    6cd4:	f003 0301 	and.w	r3, r3, #1
    6cd8:	2b00      	cmp	r3, #0
    6cda:	bf14      	ite	ne
    6cdc:	2301      	movne	r3, #1
    6cde:	2300      	moveq	r3, #0
    6ce0:	b2db      	uxtb	r3, r3
}
    6ce2:	4618      	mov	r0, r3
    6ce4:	370c      	adds	r7, #12
    6ce6:	46bd      	mov	sp, r7
    6ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6cec:	4770      	bx	lr

00006cee <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    6cee:	b480      	push	{r7}
    6cf0:	b085      	sub	sp, #20
    6cf2:	af00      	add	r7, sp, #0
    6cf4:	6078      	str	r0, [r7, #4]
    6cf6:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    6cf8:	687b      	ldr	r3, [r7, #4]
    6cfa:	691b      	ldr	r3, [r3, #16]
    6cfc:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6cfe:	68fa      	ldr	r2, [r7, #12]
    6d00:	683b      	ldr	r3, [r7, #0]
    6d02:	4013      	ands	r3, r2
    6d04:	60fb      	str	r3, [r7, #12]
	return tmp;
    6d06:	68fb      	ldr	r3, [r7, #12]
}
    6d08:	4618      	mov	r0, r3
    6d0a:	3714      	adds	r7, #20
    6d0c:	46bd      	mov	sp, r7
    6d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d12:	4770      	bx	lr

00006d14 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    6d14:	b480      	push	{r7}
    6d16:	b085      	sub	sp, #20
    6d18:	af00      	add	r7, sp, #0
    6d1a:	60f8      	str	r0, [r7, #12]
    6d1c:	460b      	mov	r3, r1
    6d1e:	607a      	str	r2, [r7, #4]
    6d20:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    6d22:	7afb      	ldrb	r3, [r7, #11]
    6d24:	68fa      	ldr	r2, [r7, #12]
    6d26:	3304      	adds	r3, #4
    6d28:	009b      	lsls	r3, r3, #2
    6d2a:	4413      	add	r3, r2
    6d2c:	687a      	ldr	r2, [r7, #4]
    6d2e:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6d30:	bf00      	nop
    6d32:	3714      	adds	r7, #20
    6d34:	46bd      	mov	sp, r7
    6d36:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d3a:	4770      	bx	lr

00006d3c <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    6d3c:	b480      	push	{r7}
    6d3e:	b083      	sub	sp, #12
    6d40:	af00      	add	r7, sp, #0
    6d42:	6078      	str	r0, [r7, #4]
    6d44:	460b      	mov	r3, r1
    6d46:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6d48:	687b      	ldr	r3, [r7, #4]
    6d4a:	78fa      	ldrb	r2, [r7, #3]
    6d4c:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6d4e:	bf00      	nop
    6d50:	370c      	adds	r7, #12
    6d52:	46bd      	mov	sp, r7
    6d54:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d58:	4770      	bx	lr

00006d5a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    6d5a:	b480      	push	{r7}
    6d5c:	b085      	sub	sp, #20
    6d5e:	af00      	add	r7, sp, #0
    6d60:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    6d62:	687b      	ldr	r3, [r7, #4]
    6d64:	f893 3020 	ldrb.w	r3, [r3, #32]
    6d68:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    6d6a:	7bfb      	ldrb	r3, [r7, #15]
    6d6c:	f003 0301 	and.w	r3, r3, #1
    6d70:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6d72:	7bfb      	ldrb	r3, [r7, #15]
    6d74:	2b00      	cmp	r3, #0
    6d76:	bf14      	ite	ne
    6d78:	2301      	movne	r3, #1
    6d7a:	2300      	moveq	r3, #0
    6d7c:	b2db      	uxtb	r3, r3
}
    6d7e:	4618      	mov	r0, r3
    6d80:	3714      	adds	r7, #20
    6d82:	46bd      	mov	sp, r7
    6d84:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d88:	4770      	bx	lr

00006d8a <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    6d8a:	b480      	push	{r7}
    6d8c:	b083      	sub	sp, #12
    6d8e:	af00      	add	r7, sp, #0
    6d90:	6078      	str	r0, [r7, #4]
    6d92:	460b      	mov	r3, r1
    6d94:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6d96:	687b      	ldr	r3, [r7, #4]
    6d98:	78fa      	ldrb	r2, [r7, #3]
    6d9a:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6d9e:	bf00      	nop
    6da0:	370c      	adds	r7, #12
    6da2:	46bd      	mov	sp, r7
    6da4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6da8:	4770      	bx	lr

00006daa <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    6daa:	b480      	push	{r7}
    6dac:	b083      	sub	sp, #12
    6dae:	af00      	add	r7, sp, #0
    6db0:	6078      	str	r0, [r7, #4]
    6db2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    6db4:	687b      	ldr	r3, [r7, #4]
    6db6:	683a      	ldr	r2, [r7, #0]
    6db8:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6dba:	bf00      	nop
    6dbc:	370c      	adds	r7, #12
    6dbe:	46bd      	mov	sp, r7
    6dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dc4:	4770      	bx	lr

00006dc6 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    6dc6:	b480      	push	{r7}
    6dc8:	b083      	sub	sp, #12
    6dca:	af00      	add	r7, sp, #0
    6dcc:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    6dce:	687b      	ldr	r3, [r7, #4]
    6dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6dd2:	4618      	mov	r0, r3
    6dd4:	370c      	adds	r7, #12
    6dd6:	46bd      	mov	sp, r7
    6dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ddc:	4770      	bx	lr

00006dde <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    6dde:	b480      	push	{r7}
    6de0:	b083      	sub	sp, #12
    6de2:	af00      	add	r7, sp, #0
    6de4:	6078      	str	r0, [r7, #4]
    6de6:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    6de8:	687b      	ldr	r3, [r7, #4]
    6dea:	683a      	ldr	r2, [r7, #0]
    6dec:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6dee:	bf00      	nop
    6df0:	370c      	adds	r7, #12
    6df2:	46bd      	mov	sp, r7
    6df4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6df8:	4770      	bx	lr

00006dfa <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    6dfa:	b480      	push	{r7}
    6dfc:	b085      	sub	sp, #20
    6dfe:	af00      	add	r7, sp, #0
    6e00:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6e02:	687b      	ldr	r3, [r7, #4]
    6e04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6e08:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    6e0a:	7bfb      	ldrb	r3, [r7, #15]
    6e0c:	085b      	lsrs	r3, r3, #1
    6e0e:	b2db      	uxtb	r3, r3
    6e10:	f003 0301 	and.w	r3, r3, #1
    6e14:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6e16:	7bfb      	ldrb	r3, [r7, #15]
    6e18:	2b00      	cmp	r3, #0
    6e1a:	bf14      	ite	ne
    6e1c:	2301      	movne	r3, #1
    6e1e:	2300      	moveq	r3, #0
    6e20:	b2db      	uxtb	r3, r3
}
    6e22:	4618      	mov	r0, r3
    6e24:	3714      	adds	r7, #20
    6e26:	46bd      	mov	sp, r7
    6e28:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e2c:	4770      	bx	lr

00006e2e <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    6e2e:	b480      	push	{r7}
    6e30:	b085      	sub	sp, #20
    6e32:	af00      	add	r7, sp, #0
    6e34:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6e36:	687b      	ldr	r3, [r7, #4]
    6e38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6e3c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    6e3e:	7bfb      	ldrb	r3, [r7, #15]
    6e40:	089b      	lsrs	r3, r3, #2
    6e42:	b2db      	uxtb	r3, r3
    6e44:	f003 0301 	and.w	r3, r3, #1
    6e48:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6e4a:	7bfb      	ldrb	r3, [r7, #15]
    6e4c:	2b00      	cmp	r3, #0
    6e4e:	bf14      	ite	ne
    6e50:	2301      	movne	r3, #1
    6e52:	2300      	moveq	r3, #0
    6e54:	b2db      	uxtb	r3, r3
}
    6e56:	4618      	mov	r0, r3
    6e58:	3714      	adds	r7, #20
    6e5a:	46bd      	mov	sp, r7
    6e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e60:	4770      	bx	lr

00006e62 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    6e62:	b480      	push	{r7}
    6e64:	b085      	sub	sp, #20
    6e66:	af00      	add	r7, sp, #0
    6e68:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6e6a:	687b      	ldr	r3, [r7, #4]
    6e6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6e70:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    6e72:	7bfb      	ldrb	r3, [r7, #15]
    6e74:	08db      	lsrs	r3, r3, #3
    6e76:	b2db      	uxtb	r3, r3
    6e78:	f003 0301 	and.w	r3, r3, #1
    6e7c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6e7e:	7bfb      	ldrb	r3, [r7, #15]
    6e80:	2b00      	cmp	r3, #0
    6e82:	bf14      	ite	ne
    6e84:	2301      	movne	r3, #1
    6e86:	2300      	moveq	r3, #0
    6e88:	b2db      	uxtb	r3, r3
}
    6e8a:	4618      	mov	r0, r3
    6e8c:	3714      	adds	r7, #20
    6e8e:	46bd      	mov	sp, r7
    6e90:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e94:	4770      	bx	lr

00006e96 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    6e96:	b480      	push	{r7}
    6e98:	b085      	sub	sp, #20
    6e9a:	af00      	add	r7, sp, #0
    6e9c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6e9e:	687b      	ldr	r3, [r7, #4]
    6ea0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6ea4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    6ea6:	7bfb      	ldrb	r3, [r7, #15]
    6ea8:	091b      	lsrs	r3, r3, #4
    6eaa:	b2db      	uxtb	r3, r3
    6eac:	f003 0301 	and.w	r3, r3, #1
    6eb0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6eb2:	7bfb      	ldrb	r3, [r7, #15]
    6eb4:	2b00      	cmp	r3, #0
    6eb6:	bf14      	ite	ne
    6eb8:	2301      	movne	r3, #1
    6eba:	2300      	moveq	r3, #0
    6ebc:	b2db      	uxtb	r3, r3
}
    6ebe:	4618      	mov	r0, r3
    6ec0:	3714      	adds	r7, #20
    6ec2:	46bd      	mov	sp, r7
    6ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ec8:	4770      	bx	lr
	...

00006ecc <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    6ecc:	b580      	push	{r7, lr}
    6ece:	b082      	sub	sp, #8
    6ed0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    6ed2:	4b0a      	ldr	r3, [pc, #40]	; (6efc <_oscctrl_init_sources+0x30>)
    6ed4:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    6ed6:	4a0a      	ldr	r2, [pc, #40]	; (6f00 <_oscctrl_init_sources+0x34>)
    6ed8:	2101      	movs	r1, #1
    6eda:	6878      	ldr	r0, [r7, #4]
    6edc:	4b09      	ldr	r3, [pc, #36]	; (6f04 <_oscctrl_init_sources+0x38>)
    6ede:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    6ee0:	bf00      	nop
    6ee2:	6878      	ldr	r0, [r7, #4]
    6ee4:	4b08      	ldr	r3, [pc, #32]	; (6f08 <_oscctrl_init_sources+0x3c>)
    6ee6:	4798      	blx	r3
    6ee8:	4603      	mov	r3, r0
    6eea:	f083 0301 	eor.w	r3, r3, #1
    6eee:	b2db      	uxtb	r3, r3
    6ef0:	2b00      	cmp	r3, #0
    6ef2:	d1f6      	bne.n	6ee2 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    6ef4:	bf00      	nop
    6ef6:	3708      	adds	r7, #8
    6ef8:	46bd      	mov	sp, r7
    6efa:	bd80      	pop	{r7, pc}
    6efc:	40001000 	.word	0x40001000
    6f00:	03002646 	.word	0x03002646
    6f04:	00006d15 	.word	0x00006d15
    6f08:	00006c9f 	.word	0x00006c9f

00006f0c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    6f0c:	b580      	push	{r7, lr}
    6f0e:	b084      	sub	sp, #16
    6f10:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    6f12:	4b6b      	ldr	r3, [pc, #428]	; (70c0 <_oscctrl_init_referenced_generators+0x1b4>)
    6f14:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    6f16:	2204      	movs	r2, #4
    6f18:	2100      	movs	r1, #0
    6f1a:	486a      	ldr	r0, [pc, #424]	; (70c4 <_oscctrl_init_referenced_generators+0x1b8>)
    6f1c:	4b6a      	ldr	r3, [pc, #424]	; (70c8 <_oscctrl_init_referenced_generators+0x1bc>)
    6f1e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6f20:	bf00      	nop
    6f22:	4868      	ldr	r0, [pc, #416]	; (70c4 <_oscctrl_init_referenced_generators+0x1b8>)
    6f24:	4b69      	ldr	r3, [pc, #420]	; (70cc <_oscctrl_init_referenced_generators+0x1c0>)
    6f26:	4798      	blx	r3
    6f28:	4603      	mov	r3, r0
    6f2a:	2b00      	cmp	r3, #0
    6f2c:	d1f9      	bne.n	6f22 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    6f2e:	2100      	movs	r1, #0
    6f30:	68f8      	ldr	r0, [r7, #12]
    6f32:	4b67      	ldr	r3, [pc, #412]	; (70d0 <_oscctrl_init_referenced_generators+0x1c4>)
    6f34:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    6f36:	4967      	ldr	r1, [pc, #412]	; (70d4 <_oscctrl_init_referenced_generators+0x1c8>)
    6f38:	68f8      	ldr	r0, [r7, #12]
    6f3a:	4b67      	ldr	r3, [pc, #412]	; (70d8 <_oscctrl_init_referenced_generators+0x1cc>)
    6f3c:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    6f3e:	bf00      	nop
    6f40:	68f8      	ldr	r0, [r7, #12]
    6f42:	4b66      	ldr	r3, [pc, #408]	; (70dc <_oscctrl_init_referenced_generators+0x1d0>)
    6f44:	4798      	blx	r3
    6f46:	4603      	mov	r3, r0
    6f48:	2b00      	cmp	r3, #0
    6f4a:	d1f9      	bne.n	6f40 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    6f4c:	2100      	movs	r1, #0
    6f4e:	68f8      	ldr	r0, [r7, #12]
    6f50:	4b63      	ldr	r3, [pc, #396]	; (70e0 <_oscctrl_init_referenced_generators+0x1d4>)
    6f52:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6f54:	bf00      	nop
    6f56:	68f8      	ldr	r0, [r7, #12]
    6f58:	4b62      	ldr	r3, [pc, #392]	; (70e4 <_oscctrl_init_referenced_generators+0x1d8>)
    6f5a:	4798      	blx	r3
    6f5c:	4603      	mov	r3, r0
    6f5e:	2b00      	cmp	r3, #0
    6f60:	d1f9      	bne.n	6f56 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    6f62:	2302      	movs	r3, #2
    6f64:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    6f66:	7afb      	ldrb	r3, [r7, #11]
    6f68:	4619      	mov	r1, r3
    6f6a:	68f8      	ldr	r0, [r7, #12]
    6f6c:	4b58      	ldr	r3, [pc, #352]	; (70d0 <_oscctrl_init_referenced_generators+0x1c4>)
    6f6e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    6f70:	bf00      	nop
    6f72:	68f8      	ldr	r0, [r7, #12]
    6f74:	4b5c      	ldr	r3, [pc, #368]	; (70e8 <_oscctrl_init_referenced_generators+0x1dc>)
    6f76:	4798      	blx	r3
    6f78:	4603      	mov	r3, r0
    6f7a:	2b00      	cmp	r3, #0
    6f7c:	d1f9      	bne.n	6f72 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    6f7e:	68f8      	ldr	r0, [r7, #12]
    6f80:	4b5a      	ldr	r3, [pc, #360]	; (70ec <_oscctrl_init_referenced_generators+0x1e0>)
    6f82:	4798      	blx	r3
    6f84:	4603      	mov	r3, r0
    6f86:	4619      	mov	r1, r3
    6f88:	68f8      	ldr	r0, [r7, #12]
    6f8a:	4b59      	ldr	r3, [pc, #356]	; (70f0 <_oscctrl_init_referenced_generators+0x1e4>)
    6f8c:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    6f8e:	bf00      	nop
    6f90:	68f8      	ldr	r0, [r7, #12]
    6f92:	4b58      	ldr	r3, [pc, #352]	; (70f4 <_oscctrl_init_referenced_generators+0x1e8>)
    6f94:	4798      	blx	r3
    6f96:	4603      	mov	r3, r0
    6f98:	2b00      	cmp	r3, #0
    6f9a:	d1f9      	bne.n	6f90 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    6f9c:	2319      	movs	r3, #25
    6f9e:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    6fa0:	7afb      	ldrb	r3, [r7, #11]
    6fa2:	4619      	mov	r1, r3
    6fa4:	68f8      	ldr	r0, [r7, #12]
    6fa6:	4b4e      	ldr	r3, [pc, #312]	; (70e0 <_oscctrl_init_referenced_generators+0x1d4>)
    6fa8:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6faa:	bf00      	nop
    6fac:	68f8      	ldr	r0, [r7, #12]
    6fae:	4b4d      	ldr	r3, [pc, #308]	; (70e4 <_oscctrl_init_referenced_generators+0x1d8>)
    6fb0:	4798      	blx	r3
    6fb2:	4603      	mov	r3, r0
    6fb4:	2b00      	cmp	r3, #0
    6fb6:	d1f9      	bne.n	6fac <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    6fb8:	2245      	movs	r2, #69	; 0x45
    6fba:	2101      	movs	r1, #1
    6fbc:	4841      	ldr	r0, [pc, #260]	; (70c4 <_oscctrl_init_referenced_generators+0x1b8>)
    6fbe:	4b4e      	ldr	r3, [pc, #312]	; (70f8 <_oscctrl_init_referenced_generators+0x1ec>)
    6fc0:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    6fc2:	223b      	movs	r2, #59	; 0x3b
    6fc4:	2100      	movs	r1, #0
    6fc6:	68f8      	ldr	r0, [r7, #12]
    6fc8:	4b4c      	ldr	r3, [pc, #304]	; (70fc <_oscctrl_init_referenced_generators+0x1f0>)
    6fca:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    6fcc:	f44f 6201 	mov.w	r2, #2064	; 0x810
    6fd0:	2100      	movs	r1, #0
    6fd2:	68f8      	ldr	r0, [r7, #12]
    6fd4:	4b4a      	ldr	r3, [pc, #296]	; (7100 <_oscctrl_init_referenced_generators+0x1f4>)
    6fd6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    6fd8:	2242      	movs	r2, #66	; 0x42
    6fda:	2100      	movs	r1, #0
    6fdc:	68f8      	ldr	r0, [r7, #12]
    6fde:	4b49      	ldr	r3, [pc, #292]	; (7104 <_oscctrl_init_referenced_generators+0x1f8>)
    6fe0:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    6fe2:	4a49      	ldr	r2, [pc, #292]	; (7108 <_oscctrl_init_referenced_generators+0x1fc>)
    6fe4:	2101      	movs	r1, #1
    6fe6:	68f8      	ldr	r0, [r7, #12]
    6fe8:	4b44      	ldr	r3, [pc, #272]	; (70fc <_oscctrl_init_referenced_generators+0x1f0>)
    6fea:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    6fec:	f44f 6203 	mov.w	r2, #2096	; 0x830
    6ff0:	2101      	movs	r1, #1
    6ff2:	68f8      	ldr	r0, [r7, #12]
    6ff4:	4b42      	ldr	r3, [pc, #264]	; (7100 <_oscctrl_init_referenced_generators+0x1f4>)
    6ff6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    6ff8:	2202      	movs	r2, #2
    6ffa:	2101      	movs	r1, #1
    6ffc:	68f8      	ldr	r0, [r7, #12]
    6ffe:	4b41      	ldr	r3, [pc, #260]	; (7104 <_oscctrl_init_referenced_generators+0x1f8>)
    7000:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    7002:	68f8      	ldr	r0, [r7, #12]
    7004:	4b41      	ldr	r3, [pc, #260]	; (710c <_oscctrl_init_referenced_generators+0x200>)
    7006:	4798      	blx	r3
    7008:	4603      	mov	r3, r0
    700a:	2b00      	cmp	r3, #0
    700c:	d00c      	beq.n	7028 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    700e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    7012:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    7014:	bf00      	nop
    7016:	6879      	ldr	r1, [r7, #4]
    7018:	68f8      	ldr	r0, [r7, #12]
    701a:	4b3d      	ldr	r3, [pc, #244]	; (7110 <_oscctrl_init_referenced_generators+0x204>)
    701c:	4798      	blx	r3
    701e:	4602      	mov	r2, r0
    7020:	687b      	ldr	r3, [r7, #4]
    7022:	429a      	cmp	r2, r3
    7024:	d1f7      	bne.n	7016 <_oscctrl_init_referenced_generators+0x10a>
    7026:	e009      	b.n	703c <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    7028:	bf00      	nop
    702a:	68f8      	ldr	r0, [r7, #12]
    702c:	4b39      	ldr	r3, [pc, #228]	; (7114 <_oscctrl_init_referenced_generators+0x208>)
    702e:	4798      	blx	r3
    7030:	4603      	mov	r3, r0
    7032:	f083 0301 	eor.w	r3, r3, #1
    7036:	b2db      	uxtb	r3, r3
    7038:	2b00      	cmp	r3, #0
    703a:	d1f6      	bne.n	702a <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    703c:	bf00      	nop
    703e:	2100      	movs	r1, #0
    7040:	68f8      	ldr	r0, [r7, #12]
    7042:	4b35      	ldr	r3, [pc, #212]	; (7118 <_oscctrl_init_referenced_generators+0x20c>)
    7044:	4798      	blx	r3
    7046:	4603      	mov	r3, r0
    7048:	f083 0301 	eor.w	r3, r3, #1
    704c:	b2db      	uxtb	r3, r3
    704e:	2b00      	cmp	r3, #0
    7050:	d009      	beq.n	7066 <_oscctrl_init_referenced_generators+0x15a>
    7052:	2100      	movs	r1, #0
    7054:	68f8      	ldr	r0, [r7, #12]
    7056:	4b31      	ldr	r3, [pc, #196]	; (711c <_oscctrl_init_referenced_generators+0x210>)
    7058:	4798      	blx	r3
    705a:	4603      	mov	r3, r0
    705c:	f083 0301 	eor.w	r3, r3, #1
    7060:	b2db      	uxtb	r3, r3
    7062:	2b00      	cmp	r3, #0
    7064:	d1eb      	bne.n	703e <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    7066:	bf00      	nop
    7068:	2101      	movs	r1, #1
    706a:	68f8      	ldr	r0, [r7, #12]
    706c:	4b2a      	ldr	r3, [pc, #168]	; (7118 <_oscctrl_init_referenced_generators+0x20c>)
    706e:	4798      	blx	r3
    7070:	4603      	mov	r3, r0
    7072:	f083 0301 	eor.w	r3, r3, #1
    7076:	b2db      	uxtb	r3, r3
    7078:	2b00      	cmp	r3, #0
    707a:	d009      	beq.n	7090 <_oscctrl_init_referenced_generators+0x184>
    707c:	2101      	movs	r1, #1
    707e:	68f8      	ldr	r0, [r7, #12]
    7080:	4b26      	ldr	r3, [pc, #152]	; (711c <_oscctrl_init_referenced_generators+0x210>)
    7082:	4798      	blx	r3
    7084:	4603      	mov	r3, r0
    7086:	f083 0301 	eor.w	r3, r3, #1
    708a:	b2db      	uxtb	r3, r3
    708c:	2b00      	cmp	r3, #0
    708e:	d1eb      	bne.n	7068 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    7090:	bf00      	nop
    7092:	480c      	ldr	r0, [pc, #48]	; (70c4 <_oscctrl_init_referenced_generators+0x1b8>)
    7094:	4b22      	ldr	r3, [pc, #136]	; (7120 <_oscctrl_init_referenced_generators+0x214>)
    7096:	4798      	blx	r3
    7098:	4603      	mov	r3, r0
    709a:	2b00      	cmp	r3, #0
    709c:	d1f9      	bne.n	7092 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    709e:	2207      	movs	r2, #7
    70a0:	2100      	movs	r1, #0
    70a2:	4808      	ldr	r0, [pc, #32]	; (70c4 <_oscctrl_init_referenced_generators+0x1b8>)
    70a4:	4b08      	ldr	r3, [pc, #32]	; (70c8 <_oscctrl_init_referenced_generators+0x1bc>)
    70a6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    70a8:	bf00      	nop
    70aa:	4806      	ldr	r0, [pc, #24]	; (70c4 <_oscctrl_init_referenced_generators+0x1b8>)
    70ac:	4b07      	ldr	r3, [pc, #28]	; (70cc <_oscctrl_init_referenced_generators+0x1c0>)
    70ae:	4798      	blx	r3
    70b0:	4603      	mov	r3, r0
    70b2:	2b00      	cmp	r3, #0
    70b4:	d1f9      	bne.n	70aa <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    70b6:	bf00      	nop
    70b8:	3710      	adds	r7, #16
    70ba:	46bd      	mov	sp, r7
    70bc:	bd80      	pop	{r7, pc}
    70be:	bf00      	nop
    70c0:	40001000 	.word	0x40001000
    70c4:	40001c00 	.word	0x40001c00
    70c8:	00006ad9 	.word	0x00006ad9
    70cc:	00006a99 	.word	0x00006a99
    70d0:	00006d3d 	.word	0x00006d3d
    70d4:	0401bb80 	.word	0x0401bb80
    70d8:	00006ddf 	.word	0x00006ddf
    70dc:	00006e97 	.word	0x00006e97
    70e0:	00006d8b 	.word	0x00006d8b
    70e4:	00006e2f 	.word	0x00006e2f
    70e8:	00006dfb 	.word	0x00006dfb
    70ec:	00006dc7 	.word	0x00006dc7
    70f0:	00006dab 	.word	0x00006dab
    70f4:	00006e63 	.word	0x00006e63
    70f8:	00006b29 	.word	0x00006b29
    70fc:	00006c35 	.word	0x00006c35
    7100:	00006c71 	.word	0x00006c71
    7104:	00006bf9 	.word	0x00006bf9
    7108:	000407a0 	.word	0x000407a0
    710c:	00006d5b 	.word	0x00006d5b
    7110:	00006cef 	.word	0x00006cef
    7114:	00006cc7 	.word	0x00006cc7
    7118:	00006b85 	.word	0x00006b85
    711c:	00006bbd 	.word	0x00006bbd
    7120:	00006ac1 	.word	0x00006ac1

00007124 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    7124:	b480      	push	{r7}
    7126:	b083      	sub	sp, #12
    7128:	af00      	add	r7, sp, #0
    712a:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    712c:	687b      	ldr	r3, [r7, #4]
    712e:	69db      	ldr	r3, [r3, #28]
    7130:	0a9b      	lsrs	r3, r3, #10
    7132:	f003 0301 	and.w	r3, r3, #1
    7136:	2b00      	cmp	r3, #0
    7138:	bf14      	ite	ne
    713a:	2301      	movne	r3, #1
    713c:	2300      	moveq	r3, #0
    713e:	b2db      	uxtb	r3, r3
}
    7140:	4618      	mov	r0, r3
    7142:	370c      	adds	r7, #12
    7144:	46bd      	mov	sp, r7
    7146:	f85d 7b04 	ldr.w	r7, [sp], #4
    714a:	4770      	bx	lr

0000714c <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    714c:	b480      	push	{r7}
    714e:	b083      	sub	sp, #12
    7150:	af00      	add	r7, sp, #0
    7152:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    7154:	687b      	ldr	r3, [r7, #4]
    7156:	f44f 6280 	mov.w	r2, #1024	; 0x400
    715a:	61da      	str	r2, [r3, #28]
}
    715c:	bf00      	nop
    715e:	370c      	adds	r7, #12
    7160:	46bd      	mov	sp, r7
    7162:	f85d 7b04 	ldr.w	r7, [sp], #4
    7166:	4770      	bx	lr

00007168 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    7168:	b480      	push	{r7}
    716a:	b083      	sub	sp, #12
    716c:	af00      	add	r7, sp, #0
    716e:	6078      	str	r0, [r7, #4]
    7170:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    7172:	687b      	ldr	r3, [r7, #4]
    7174:	683a      	ldr	r2, [r7, #0]
    7176:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7178:	bf00      	nop
    717a:	370c      	adds	r7, #12
    717c:	46bd      	mov	sp, r7
    717e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7182:	4770      	bx	lr

00007184 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    7184:	b480      	push	{r7}
    7186:	b083      	sub	sp, #12
    7188:	af00      	add	r7, sp, #0
    718a:	6078      	str	r0, [r7, #4]
    718c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    718e:	687b      	ldr	r3, [r7, #4]
    7190:	683a      	ldr	r2, [r7, #0]
    7192:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7194:	bf00      	nop
    7196:	370c      	adds	r7, #12
    7198:	46bd      	mov	sp, r7
    719a:	f85d 7b04 	ldr.w	r7, [sp], #4
    719e:	4770      	bx	lr

000071a0 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    71a0:	b480      	push	{r7}
    71a2:	b083      	sub	sp, #12
    71a4:	af00      	add	r7, sp, #0
    71a6:	6078      	str	r0, [r7, #4]
    71a8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    71aa:	687b      	ldr	r3, [r7, #4]
    71ac:	683a      	ldr	r2, [r7, #0]
    71ae:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    71b0:	bf00      	nop
    71b2:	370c      	adds	r7, #12
    71b4:	46bd      	mov	sp, r7
    71b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    71ba:	4770      	bx	lr

000071bc <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    71bc:	b480      	push	{r7}
    71be:	b083      	sub	sp, #12
    71c0:	af00      	add	r7, sp, #0
    71c2:	6078      	str	r0, [r7, #4]
    71c4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    71c6:	687b      	ldr	r3, [r7, #4]
    71c8:	683a      	ldr	r2, [r7, #0]
    71ca:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    71cc:	bf00      	nop
    71ce:	370c      	adds	r7, #12
    71d0:	46bd      	mov	sp, r7
    71d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    71d6:	4770      	bx	lr

000071d8 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    71d8:	b480      	push	{r7}
    71da:	b085      	sub	sp, #20
    71dc:	af00      	add	r7, sp, #0
    71de:	6078      	str	r0, [r7, #4]
    71e0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    71e2:	687b      	ldr	r3, [r7, #4]
    71e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    71e6:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    71e8:	68fb      	ldr	r3, [r7, #12]
    71ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    71ee:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    71f0:	683b      	ldr	r3, [r7, #0]
    71f2:	b2db      	uxtb	r3, r3
    71f4:	68fa      	ldr	r2, [r7, #12]
    71f6:	4313      	orrs	r3, r2
    71f8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    71fa:	687b      	ldr	r3, [r7, #4]
    71fc:	68fa      	ldr	r2, [r7, #12]
    71fe:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7200:	bf00      	nop
    7202:	3714      	adds	r7, #20
    7204:	46bd      	mov	sp, r7
    7206:	f85d 7b04 	ldr.w	r7, [sp], #4
    720a:	4770      	bx	lr

0000720c <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    720c:	b480      	push	{r7}
    720e:	b085      	sub	sp, #20
    7210:	af00      	add	r7, sp, #0
    7212:	6078      	str	r0, [r7, #4]
    7214:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    7216:	687b      	ldr	r3, [r7, #4]
    7218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    721a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    721c:	68fb      	ldr	r3, [r7, #12]
    721e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    7222:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    7224:	683b      	ldr	r3, [r7, #0]
    7226:	041b      	lsls	r3, r3, #16
    7228:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    722c:	68fa      	ldr	r2, [r7, #12]
    722e:	4313      	orrs	r3, r2
    7230:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    7232:	687b      	ldr	r3, [r7, #4]
    7234:	68fa      	ldr	r2, [r7, #12]
    7236:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7238:	bf00      	nop
    723a:	3714      	adds	r7, #20
    723c:	46bd      	mov	sp, r7
    723e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7242:	4770      	bx	lr

00007244 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    7244:	b480      	push	{r7}
    7246:	b083      	sub	sp, #12
    7248:	af00      	add	r7, sp, #0
    724a:	6078      	str	r0, [r7, #4]
    724c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    724e:	687b      	ldr	r3, [r7, #4]
    7250:	683a      	ldr	r2, [r7, #0]
    7252:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7254:	bf00      	nop
    7256:	370c      	adds	r7, #12
    7258:	46bd      	mov	sp, r7
    725a:	f85d 7b04 	ldr.w	r7, [sp], #4
    725e:	4770      	bx	lr

00007260 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    7260:	b480      	push	{r7}
    7262:	b083      	sub	sp, #12
    7264:	af00      	add	r7, sp, #0
    7266:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    7268:	687b      	ldr	r3, [r7, #4]
    726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    726c:	4618      	mov	r0, r3
    726e:	370c      	adds	r7, #12
    7270:	46bd      	mov	sp, r7
    7272:	f85d 7b04 	ldr.w	r7, [sp], #4
    7276:	4770      	bx	lr

00007278 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    7278:	b480      	push	{r7}
    727a:	b085      	sub	sp, #20
    727c:	af00      	add	r7, sp, #0
    727e:	60f8      	str	r0, [r7, #12]
    7280:	60b9      	str	r1, [r7, #8]
    7282:	607a      	str	r2, [r7, #4]
	while (count--) {
    7284:	e007      	b.n	7296 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    7286:	68fb      	ldr	r3, [r7, #12]
    7288:	1c5a      	adds	r2, r3, #1
    728a:	60fa      	str	r2, [r7, #12]
    728c:	68ba      	ldr	r2, [r7, #8]
    728e:	1c51      	adds	r1, r2, #1
    7290:	60b9      	str	r1, [r7, #8]
    7292:	7812      	ldrb	r2, [r2, #0]
    7294:	701a      	strb	r2, [r3, #0]
	while (count--) {
    7296:	687b      	ldr	r3, [r7, #4]
    7298:	1e5a      	subs	r2, r3, #1
    729a:	607a      	str	r2, [r7, #4]
    729c:	2b00      	cmp	r3, #0
    729e:	d1f2      	bne.n	7286 <_qspi_memcpy+0xe>
	}
}
    72a0:	bf00      	nop
    72a2:	3714      	adds	r7, #20
    72a4:	46bd      	mov	sp, r7
    72a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    72aa:	4770      	bx	lr

000072ac <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    72ac:	b580      	push	{r7, lr}
    72ae:	b082      	sub	sp, #8
    72b0:	af00      	add	r7, sp, #0
    72b2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    72b4:	4903      	ldr	r1, [pc, #12]	; (72c4 <_qspi_end_transfer+0x18>)
    72b6:	6878      	ldr	r0, [r7, #4]
    72b8:	4b03      	ldr	r3, [pc, #12]	; (72c8 <_qspi_end_transfer+0x1c>)
    72ba:	4798      	blx	r3
}
    72bc:	bf00      	nop
    72be:	3708      	adds	r7, #8
    72c0:	46bd      	mov	sp, r7
    72c2:	bd80      	pop	{r7, pc}
    72c4:	01000002 	.word	0x01000002
    72c8:	00007169 	.word	0x00007169

000072cc <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    72cc:	b580      	push	{r7, lr}
    72ce:	b082      	sub	sp, #8
    72d0:	af00      	add	r7, sp, #0
    72d2:	6078      	str	r0, [r7, #4]
    72d4:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    72d6:	687b      	ldr	r3, [r7, #4]
    72d8:	2b00      	cmp	r3, #0
    72da:	d004      	beq.n	72e6 <_qspi_sync_init+0x1a>
    72dc:	683b      	ldr	r3, [r7, #0]
    72de:	2b00      	cmp	r3, #0
    72e0:	d001      	beq.n	72e6 <_qspi_sync_init+0x1a>
    72e2:	2301      	movs	r3, #1
    72e4:	e000      	b.n	72e8 <_qspi_sync_init+0x1c>
    72e6:	2300      	movs	r3, #0
    72e8:	f003 0301 	and.w	r3, r3, #1
    72ec:	b2db      	uxtb	r3, r3
    72ee:	2240      	movs	r2, #64	; 0x40
    72f0:	490c      	ldr	r1, [pc, #48]	; (7324 <_qspi_sync_init+0x58>)
    72f2:	4618      	mov	r0, r3
    72f4:	4b0c      	ldr	r3, [pc, #48]	; (7328 <_qspi_sync_init+0x5c>)
    72f6:	4798      	blx	r3
	dev->prvt = hw;
    72f8:	687b      	ldr	r3, [r7, #4]
    72fa:	683a      	ldr	r2, [r7, #0]
    72fc:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    72fe:	687b      	ldr	r3, [r7, #4]
    7300:	681b      	ldr	r3, [r3, #0]
    7302:	2101      	movs	r1, #1
    7304:	4618      	mov	r0, r3
    7306:	4b09      	ldr	r3, [pc, #36]	; (732c <_qspi_sync_init+0x60>)
    7308:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    730a:	4909      	ldr	r1, [pc, #36]	; (7330 <_qspi_sync_init+0x64>)
    730c:	6838      	ldr	r0, [r7, #0]
    730e:	4b09      	ldr	r3, [pc, #36]	; (7334 <_qspi_sync_init+0x68>)
    7310:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    7312:	4909      	ldr	r1, [pc, #36]	; (7338 <_qspi_sync_init+0x6c>)
    7314:	6838      	ldr	r0, [r7, #0]
    7316:	4b09      	ldr	r3, [pc, #36]	; (733c <_qspi_sync_init+0x70>)
    7318:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    731a:	2300      	movs	r3, #0
}
    731c:	4618      	mov	r0, r3
    731e:	3708      	adds	r7, #8
    7320:	46bd      	mov	sp, r7
    7322:	bd80      	pop	{r7, pc}
    7324:	0001ae30 	.word	0x0001ae30
    7328:	00004c81 	.word	0x00004c81
    732c:	00007169 	.word	0x00007169
    7330:	06000011 	.word	0x06000011
    7334:	00007185 	.word	0x00007185
    7338:	00241300 	.word	0x00241300
    733c:	000071a1 	.word	0x000071a1

00007340 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    7340:	b580      	push	{r7, lr}
    7342:	b082      	sub	sp, #8
    7344:	af00      	add	r7, sp, #0
    7346:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    7348:	687b      	ldr	r3, [r7, #4]
    734a:	681b      	ldr	r3, [r3, #0]
    734c:	2102      	movs	r1, #2
    734e:	4618      	mov	r0, r3
    7350:	4b03      	ldr	r3, [pc, #12]	; (7360 <_qspi_sync_enable+0x20>)
    7352:	4798      	blx	r3
	return ERR_NONE;
    7354:	2300      	movs	r3, #0
}
    7356:	4618      	mov	r0, r3
    7358:	3708      	adds	r7, #8
    735a:	46bd      	mov	sp, r7
    735c:	bd80      	pop	{r7, pc}
    735e:	bf00      	nop
    7360:	00007169 	.word	0x00007169

00007364 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    7364:	b580      	push	{r7, lr}
    7366:	b082      	sub	sp, #8
    7368:	af00      	add	r7, sp, #0
    736a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    736c:	687b      	ldr	r3, [r7, #4]
    736e:	681b      	ldr	r3, [r3, #0]
    7370:	2100      	movs	r1, #0
    7372:	4618      	mov	r0, r3
    7374:	4b03      	ldr	r3, [pc, #12]	; (7384 <_qspi_sync_disable+0x20>)
    7376:	4798      	blx	r3
	return ERR_NONE;
    7378:	2300      	movs	r3, #0
}
    737a:	4618      	mov	r0, r3
    737c:	3708      	adds	r7, #8
    737e:	46bd      	mov	sp, r7
    7380:	bd80      	pop	{r7, pc}
    7382:	bf00      	nop
    7384:	00007169 	.word	0x00007169

00007388 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7388:	b580      	push	{r7, lr}
    738a:	b084      	sub	sp, #16
    738c:	af00      	add	r7, sp, #0
    738e:	6078      	str	r0, [r7, #4]
    7390:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    7392:	687b      	ldr	r3, [r7, #4]
    7394:	681b      	ldr	r3, [r3, #0]
    7396:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    7398:	683b      	ldr	r3, [r7, #0]
    739a:	781b      	ldrb	r3, [r3, #0]
    739c:	f003 0320 	and.w	r3, r3, #32
    73a0:	b2db      	uxtb	r3, r3
    73a2:	2b00      	cmp	r3, #0
    73a4:	d005      	beq.n	73b2 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    73a6:	683b      	ldr	r3, [r7, #0]
    73a8:	689b      	ldr	r3, [r3, #8]
    73aa:	4619      	mov	r1, r3
    73ac:	68f8      	ldr	r0, [r7, #12]
    73ae:	4b13      	ldr	r3, [pc, #76]	; (73fc <_qspi_sync_command_set_ifr+0x74>)
    73b0:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    73b2:	683b      	ldr	r3, [r7, #0]
    73b4:	781b      	ldrb	r3, [r3, #0]
    73b6:	f003 0310 	and.w	r3, r3, #16
    73ba:	b2db      	uxtb	r3, r3
    73bc:	2b00      	cmp	r3, #0
    73be:	d005      	beq.n	73cc <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    73c0:	683b      	ldr	r3, [r7, #0]
    73c2:	791b      	ldrb	r3, [r3, #4]
    73c4:	4619      	mov	r1, r3
    73c6:	68f8      	ldr	r0, [r7, #12]
    73c8:	4b0d      	ldr	r3, [pc, #52]	; (7400 <_qspi_sync_command_set_ifr+0x78>)
    73ca:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    73cc:	683b      	ldr	r3, [r7, #0]
    73ce:	781b      	ldrb	r3, [r3, #0]
    73d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    73d4:	b2db      	uxtb	r3, r3
    73d6:	2b00      	cmp	r3, #0
    73d8:	d005      	beq.n	73e6 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    73da:	683b      	ldr	r3, [r7, #0]
    73dc:	795b      	ldrb	r3, [r3, #5]
    73de:	4619      	mov	r1, r3
    73e0:	68f8      	ldr	r0, [r7, #12]
    73e2:	4b08      	ldr	r3, [pc, #32]	; (7404 <_qspi_sync_command_set_ifr+0x7c>)
    73e4:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    73e6:	683b      	ldr	r3, [r7, #0]
    73e8:	681b      	ldr	r3, [r3, #0]
    73ea:	4619      	mov	r1, r3
    73ec:	68f8      	ldr	r0, [r7, #12]
    73ee:	4b06      	ldr	r3, [pc, #24]	; (7408 <_qspi_sync_command_set_ifr+0x80>)
    73f0:	4798      	blx	r3
}
    73f2:	bf00      	nop
    73f4:	3710      	adds	r7, #16
    73f6:	46bd      	mov	sp, r7
    73f8:	bd80      	pop	{r7, pc}
    73fa:	bf00      	nop
    73fc:	000071bd 	.word	0x000071bd
    7400:	000071d9 	.word	0x000071d9
    7404:	0000720d 	.word	0x0000720d
    7408:	00007245 	.word	0x00007245

0000740c <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    740c:	b580      	push	{r7, lr}
    740e:	b084      	sub	sp, #16
    7410:	af00      	add	r7, sp, #0
    7412:	6078      	str	r0, [r7, #4]
    7414:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    7416:	687b      	ldr	r3, [r7, #4]
    7418:	681b      	ldr	r3, [r3, #0]
    741a:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    741c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    7420:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    7422:	683b      	ldr	r3, [r7, #0]
    7424:	781b      	ldrb	r3, [r3, #0]
    7426:	f003 0320 	and.w	r3, r3, #32
    742a:	b2db      	uxtb	r3, r3
    742c:	2b00      	cmp	r3, #0
    742e:	d004      	beq.n	743a <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    7430:	683b      	ldr	r3, [r7, #0]
    7432:	689b      	ldr	r3, [r3, #8]
    7434:	68fa      	ldr	r2, [r7, #12]
    7436:	4413      	add	r3, r2
    7438:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    743a:	68b8      	ldr	r0, [r7, #8]
    743c:	4b18      	ldr	r3, [pc, #96]	; (74a0 <_qspi_sync_run_transfer+0x94>)
    743e:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    7440:	683b      	ldr	r3, [r7, #0]
    7442:	691b      	ldr	r3, [r3, #16]
    7444:	2b00      	cmp	r3, #0
    7446:	d103      	bne.n	7450 <_qspi_sync_run_transfer+0x44>
    7448:	683b      	ldr	r3, [r7, #0]
    744a:	695b      	ldr	r3, [r3, #20]
    744c:	2b00      	cmp	r3, #0
    744e:	d001      	beq.n	7454 <_qspi_sync_run_transfer+0x48>
    7450:	2301      	movs	r3, #1
    7452:	e000      	b.n	7456 <_qspi_sync_run_transfer+0x4a>
    7454:	2300      	movs	r3, #0
    7456:	f003 0301 	and.w	r3, r3, #1
    745a:	b2db      	uxtb	r3, r3
    745c:	2282      	movs	r2, #130	; 0x82
    745e:	4911      	ldr	r1, [pc, #68]	; (74a4 <_qspi_sync_run_transfer+0x98>)
    7460:	4618      	mov	r0, r3
    7462:	4b11      	ldr	r3, [pc, #68]	; (74a8 <_qspi_sync_run_transfer+0x9c>)
    7464:	4798      	blx	r3

	if (cmd->tx_buf) {
    7466:	683b      	ldr	r3, [r7, #0]
    7468:	691b      	ldr	r3, [r3, #16]
    746a:	2b00      	cmp	r3, #0
    746c:	d008      	beq.n	7480 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    746e:	683b      	ldr	r3, [r7, #0]
    7470:	6919      	ldr	r1, [r3, #16]
    7472:	683b      	ldr	r3, [r7, #0]
    7474:	68db      	ldr	r3, [r3, #12]
    7476:	461a      	mov	r2, r3
    7478:	68f8      	ldr	r0, [r7, #12]
    747a:	4b0c      	ldr	r3, [pc, #48]	; (74ac <_qspi_sync_run_transfer+0xa0>)
    747c:	4798      	blx	r3
    747e:	e007      	b.n	7490 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    7480:	683b      	ldr	r3, [r7, #0]
    7482:	6958      	ldr	r0, [r3, #20]
    7484:	683b      	ldr	r3, [r7, #0]
    7486:	68db      	ldr	r3, [r3, #12]
    7488:	461a      	mov	r2, r3
    748a:	68f9      	ldr	r1, [r7, #12]
    748c:	4b07      	ldr	r3, [pc, #28]	; (74ac <_qspi_sync_run_transfer+0xa0>)
    748e:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    7490:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7494:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    7498:	bf00      	nop
    749a:	3710      	adds	r7, #16
    749c:	46bd      	mov	sp, r7
    749e:	bd80      	pop	{r7, pc}
    74a0:	00007261 	.word	0x00007261
    74a4:	0001ae30 	.word	0x0001ae30
    74a8:	00004c81 	.word	0x00004c81
    74ac:	00007279 	.word	0x00007279

000074b0 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    74b0:	b580      	push	{r7, lr}
    74b2:	b082      	sub	sp, #8
    74b4:	af00      	add	r7, sp, #0
    74b6:	6078      	str	r0, [r7, #4]
    74b8:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    74ba:	6839      	ldr	r1, [r7, #0]
    74bc:	6878      	ldr	r0, [r7, #4]
    74be:	4b14      	ldr	r3, [pc, #80]	; (7510 <_qspi_sync_serial_run_command+0x60>)
    74c0:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    74c2:	683b      	ldr	r3, [r7, #0]
    74c4:	781b      	ldrb	r3, [r3, #0]
    74c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    74ca:	b2db      	uxtb	r3, r3
    74cc:	2b00      	cmp	r3, #0
    74ce:	d003      	beq.n	74d8 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    74d0:	6839      	ldr	r1, [r7, #0]
    74d2:	6878      	ldr	r0, [r7, #4]
    74d4:	4b0f      	ldr	r3, [pc, #60]	; (7514 <_qspi_sync_serial_run_command+0x64>)
    74d6:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    74d8:	687b      	ldr	r3, [r7, #4]
    74da:	681b      	ldr	r3, [r3, #0]
    74dc:	4618      	mov	r0, r3
    74de:	4b0e      	ldr	r3, [pc, #56]	; (7518 <_qspi_sync_serial_run_command+0x68>)
    74e0:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    74e2:	bf00      	nop
    74e4:	687b      	ldr	r3, [r7, #4]
    74e6:	681b      	ldr	r3, [r3, #0]
    74e8:	4618      	mov	r0, r3
    74ea:	4b0c      	ldr	r3, [pc, #48]	; (751c <_qspi_sync_serial_run_command+0x6c>)
    74ec:	4798      	blx	r3
    74ee:	4603      	mov	r3, r0
    74f0:	f083 0301 	eor.w	r3, r3, #1
    74f4:	b2db      	uxtb	r3, r3
    74f6:	2b00      	cmp	r3, #0
    74f8:	d1f4      	bne.n	74e4 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    74fa:	687b      	ldr	r3, [r7, #4]
    74fc:	681b      	ldr	r3, [r3, #0]
    74fe:	4618      	mov	r0, r3
    7500:	4b07      	ldr	r3, [pc, #28]	; (7520 <_qspi_sync_serial_run_command+0x70>)
    7502:	4798      	blx	r3
	return ERR_NONE;
    7504:	2300      	movs	r3, #0
}
    7506:	4618      	mov	r0, r3
    7508:	3708      	adds	r7, #8
    750a:	46bd      	mov	sp, r7
    750c:	bd80      	pop	{r7, pc}
    750e:	bf00      	nop
    7510:	00007389 	.word	0x00007389
    7514:	0000740d 	.word	0x0000740d
    7518:	000072ad 	.word	0x000072ad
    751c:	00007125 	.word	0x00007125
    7520:	0000714d 	.word	0x0000714d

00007524 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    7524:	b480      	push	{r7}
    7526:	b083      	sub	sp, #12
    7528:	af00      	add	r7, sp, #0
    752a:	6078      	str	r0, [r7, #4]
    752c:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    752e:	bf00      	nop
    7530:	687b      	ldr	r3, [r7, #4]
    7532:	691a      	ldr	r2, [r3, #16]
    7534:	683b      	ldr	r3, [r7, #0]
    7536:	4013      	ands	r3, r2
    7538:	2b00      	cmp	r3, #0
    753a:	d1f9      	bne.n	7530 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    753c:	bf00      	nop
    753e:	370c      	adds	r7, #12
    7540:	46bd      	mov	sp, r7
    7542:	f85d 7b04 	ldr.w	r7, [sp], #4
    7546:	4770      	bx	lr

00007548 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    7548:	b480      	push	{r7}
    754a:	b083      	sub	sp, #12
    754c:	af00      	add	r7, sp, #0
    754e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    7550:	687b      	ldr	r3, [r7, #4]
    7552:	f44f 7280 	mov.w	r2, #256	; 0x100
    7556:	819a      	strh	r2, [r3, #12]
}
    7558:	bf00      	nop
    755a:	370c      	adds	r7, #12
    755c:	46bd      	mov	sp, r7
    755e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7562:	4770      	bx	lr

00007564 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    7564:	b480      	push	{r7}
    7566:	b083      	sub	sp, #12
    7568:	af00      	add	r7, sp, #0
    756a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    756c:	687b      	ldr	r3, [r7, #4]
    756e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7572:	819a      	strh	r2, [r3, #12]
}
    7574:	bf00      	nop
    7576:	370c      	adds	r7, #12
    7578:	46bd      	mov	sp, r7
    757a:	f85d 7b04 	ldr.w	r7, [sp], #4
    757e:	4770      	bx	lr

00007580 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    7580:	b480      	push	{r7}
    7582:	b083      	sub	sp, #12
    7584:	af00      	add	r7, sp, #0
    7586:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    7588:	687b      	ldr	r3, [r7, #4]
    758a:	899b      	ldrh	r3, [r3, #12]
    758c:	b29b      	uxth	r3, r3
}
    758e:	4618      	mov	r0, r3
    7590:	370c      	adds	r7, #12
    7592:	46bd      	mov	sp, r7
    7594:	f85d 7b04 	ldr.w	r7, [sp], #4
    7598:	4770      	bx	lr

0000759a <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    759a:	b480      	push	{r7}
    759c:	b083      	sub	sp, #12
    759e:	af00      	add	r7, sp, #0
    75a0:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    75a2:	687b      	ldr	r3, [r7, #4]
    75a4:	895b      	ldrh	r3, [r3, #10]
    75a6:	b29b      	uxth	r3, r3
}
    75a8:	4618      	mov	r0, r3
    75aa:	370c      	adds	r7, #12
    75ac:	46bd      	mov	sp, r7
    75ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    75b2:	4770      	bx	lr

000075b4 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    75b4:	b580      	push	{r7, lr}
    75b6:	b082      	sub	sp, #8
    75b8:	af00      	add	r7, sp, #0
    75ba:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    75bc:	687b      	ldr	r3, [r7, #4]
    75be:	881b      	ldrh	r3, [r3, #0]
    75c0:	b29b      	uxth	r3, r3
    75c2:	f043 0301 	orr.w	r3, r3, #1
    75c6:	b29a      	uxth	r2, r3
    75c8:	687b      	ldr	r3, [r7, #4]
    75ca:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    75cc:	2101      	movs	r1, #1
    75ce:	6878      	ldr	r0, [r7, #4]
    75d0:	4b02      	ldr	r3, [pc, #8]	; (75dc <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    75d2:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    75d4:	bf00      	nop
    75d6:	3708      	adds	r7, #8
    75d8:	46bd      	mov	sp, r7
    75da:	bd80      	pop	{r7, pc}
    75dc:	00007525 	.word	0x00007525

000075e0 <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    75e0:	b580      	push	{r7, lr}
    75e2:	b082      	sub	sp, #8
    75e4:	af00      	add	r7, sp, #0
    75e6:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    75e8:	687b      	ldr	r3, [r7, #4]
    75ea:	881b      	ldrh	r3, [r3, #0]
    75ec:	b29b      	uxth	r3, r3
    75ee:	f043 0302 	orr.w	r3, r3, #2
    75f2:	b29a      	uxth	r2, r3
    75f4:	687b      	ldr	r3, [r7, #4]
    75f6:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    75f8:	f248 0103 	movw	r1, #32771	; 0x8003
    75fc:	6878      	ldr	r0, [r7, #4]
    75fe:	4b03      	ldr	r3, [pc, #12]	; (760c <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    7600:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    7602:	bf00      	nop
    7604:	3708      	adds	r7, #8
    7606:	46bd      	mov	sp, r7
    7608:	bd80      	pop	{r7, pc}
    760a:	bf00      	nop
    760c:	00007525 	.word	0x00007525

00007610 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7610:	b580      	push	{r7, lr}
    7612:	b084      	sub	sp, #16
    7614:	af00      	add	r7, sp, #0
    7616:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7618:	f248 0103 	movw	r1, #32771	; 0x8003
    761c:	6878      	ldr	r0, [r7, #4]
    761e:	4b0a      	ldr	r3, [pc, #40]	; (7648 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    7620:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    7622:	687b      	ldr	r3, [r7, #4]
    7624:	881b      	ldrh	r3, [r3, #0]
    7626:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    7628:	89fb      	ldrh	r3, [r7, #14]
    762a:	085b      	lsrs	r3, r3, #1
    762c:	b29b      	uxth	r3, r3
    762e:	f003 0301 	and.w	r3, r3, #1
    7632:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    7634:	89fb      	ldrh	r3, [r7, #14]
    7636:	2b00      	cmp	r3, #0
    7638:	bf14      	ite	ne
    763a:	2301      	movne	r3, #1
    763c:	2300      	moveq	r3, #0
    763e:	b2db      	uxtb	r3, r3
}
    7640:	4618      	mov	r0, r3
    7642:	3710      	adds	r7, #16
    7644:	46bd      	mov	sp, r7
    7646:	bd80      	pop	{r7, pc}
    7648:	00007525 	.word	0x00007525

0000764c <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    764c:	b580      	push	{r7, lr}
    764e:	b082      	sub	sp, #8
    7650:	af00      	add	r7, sp, #0
    7652:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    7654:	687b      	ldr	r3, [r7, #4]
    7656:	881b      	ldrh	r3, [r3, #0]
    7658:	b29b      	uxth	r3, r3
    765a:	f023 0302 	bic.w	r3, r3, #2
    765e:	b29a      	uxth	r2, r3
    7660:	687b      	ldr	r3, [r7, #4]
    7662:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7664:	f248 0103 	movw	r1, #32771	; 0x8003
    7668:	6878      	ldr	r0, [r7, #4]
    766a:	4b03      	ldr	r3, [pc, #12]	; (7678 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    766c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    766e:	bf00      	nop
    7670:	3708      	adds	r7, #8
    7672:	46bd      	mov	sp, r7
    7674:	bd80      	pop	{r7, pc}
    7676:	bf00      	nop
    7678:	00007525 	.word	0x00007525

0000767c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    767c:	b580      	push	{r7, lr}
    767e:	b082      	sub	sp, #8
    7680:	af00      	add	r7, sp, #0
    7682:	6078      	str	r0, [r7, #4]
    7684:	460b      	mov	r3, r1
    7686:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    7688:	687b      	ldr	r3, [r7, #4]
    768a:	887a      	ldrh	r2, [r7, #2]
    768c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    768e:	f248 0103 	movw	r1, #32771	; 0x8003
    7692:	6878      	ldr	r0, [r7, #4]
    7694:	4b02      	ldr	r3, [pc, #8]	; (76a0 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    7696:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    7698:	bf00      	nop
    769a:	3708      	adds	r7, #8
    769c:	46bd      	mov	sp, r7
    769e:	bd80      	pop	{r7, pc}
    76a0:	00007525 	.word	0x00007525

000076a4 <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    76a4:	b580      	push	{r7, lr}
    76a6:	b082      	sub	sp, #8
    76a8:	af00      	add	r7, sp, #0
    76aa:	6078      	str	r0, [r7, #4]
    76ac:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    76ae:	687b      	ldr	r3, [r7, #4]
    76b0:	683a      	ldr	r2, [r7, #0]
    76b2:	619a      	str	r2, [r3, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    76b4:	2108      	movs	r1, #8
    76b6:	6878      	ldr	r0, [r7, #4]
    76b8:	4b02      	ldr	r3, [pc, #8]	; (76c4 <hri_rtcmode0_write_COUNT_reg+0x20>)
    76ba:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    76bc:	bf00      	nop
    76be:	3708      	adds	r7, #8
    76c0:	46bd      	mov	sp, r7
    76c2:	bd80      	pop	{r7, pc}
    76c4:	00007525 	.word	0x00007525

000076c8 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    76c8:	b580      	push	{r7, lr}
    76ca:	b082      	sub	sp, #8
    76cc:	af00      	add	r7, sp, #0
    76ce:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    76d0:	2108      	movs	r1, #8
    76d2:	6878      	ldr	r0, [r7, #4]
    76d4:	4b03      	ldr	r3, [pc, #12]	; (76e4 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    76d6:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    76d8:	687b      	ldr	r3, [r7, #4]
    76da:	699b      	ldr	r3, [r3, #24]
}
    76dc:	4618      	mov	r0, r3
    76de:	3708      	adds	r7, #8
    76e0:	46bd      	mov	sp, r7
    76e2:	bd80      	pop	{r7, pc}
    76e4:	00007525 	.word	0x00007525

000076e8 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    76e8:	b480      	push	{r7}
    76ea:	b083      	sub	sp, #12
    76ec:	af00      	add	r7, sp, #0
    76ee:	6078      	str	r0, [r7, #4]
    76f0:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    76f2:	687b      	ldr	r3, [r7, #4]
    76f4:	683a      	ldr	r2, [r7, #0]
    76f6:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    76f8:	bf00      	nop
    76fa:	370c      	adds	r7, #12
    76fc:	46bd      	mov	sp, r7
    76fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    7702:	4770      	bx	lr

00007704 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    7704:	b580      	push	{r7, lr}
    7706:	b082      	sub	sp, #8
    7708:	af00      	add	r7, sp, #0
    770a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    770c:	687b      	ldr	r3, [r7, #4]
    770e:	2b00      	cmp	r3, #0
    7710:	d005      	beq.n	771e <_calendar_init+0x1a>
    7712:	687b      	ldr	r3, [r7, #4]
    7714:	681b      	ldr	r3, [r3, #0]
    7716:	2b00      	cmp	r3, #0
    7718:	d001      	beq.n	771e <_calendar_init+0x1a>
    771a:	2301      	movs	r3, #1
    771c:	e000      	b.n	7720 <_calendar_init+0x1c>
    771e:	2300      	movs	r3, #0
    7720:	f003 0301 	and.w	r3, r3, #1
    7724:	b2db      	uxtb	r3, r3
    7726:	222f      	movs	r2, #47	; 0x2f
    7728:	491b      	ldr	r1, [pc, #108]	; (7798 <_calendar_init+0x94>)
    772a:	4618      	mov	r0, r3
    772c:	4b1b      	ldr	r3, [pc, #108]	; (779c <_calendar_init+0x98>)
    772e:	4798      	blx	r3

	_rtc_dev = dev;
    7730:	4a1b      	ldr	r2, [pc, #108]	; (77a0 <_calendar_init+0x9c>)
    7732:	687b      	ldr	r3, [r7, #4]
    7734:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    7736:	687b      	ldr	r3, [r7, #4]
    7738:	681b      	ldr	r3, [r3, #0]
    773a:	4618      	mov	r0, r3
    773c:	4b19      	ldr	r3, [pc, #100]	; (77a4 <_calendar_init+0xa0>)
    773e:	4798      	blx	r3
    7740:	4603      	mov	r3, r0
    7742:	2b00      	cmp	r3, #0
    7744:	d00a      	beq.n	775c <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    7746:	687b      	ldr	r3, [r7, #4]
    7748:	681b      	ldr	r3, [r3, #0]
    774a:	4618      	mov	r0, r3
    774c:	4b16      	ldr	r3, [pc, #88]	; (77a8 <_calendar_init+0xa4>)
    774e:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    7750:	687b      	ldr	r3, [r7, #4]
    7752:	681b      	ldr	r3, [r3, #0]
    7754:	2102      	movs	r1, #2
    7756:	4618      	mov	r0, r3
    7758:	4b14      	ldr	r3, [pc, #80]	; (77ac <_calendar_init+0xa8>)
    775a:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    775c:	687b      	ldr	r3, [r7, #4]
    775e:	681b      	ldr	r3, [r3, #0]
    7760:	4618      	mov	r0, r3
    7762:	4b13      	ldr	r3, [pc, #76]	; (77b0 <_calendar_init+0xac>)
    7764:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    7766:	687b      	ldr	r3, [r7, #4]
    7768:	681b      	ldr	r3, [r3, #0]
    776a:	2101      	movs	r1, #1
    776c:	4618      	mov	r0, r3
    776e:	4b0f      	ldr	r3, [pc, #60]	; (77ac <_calendar_init+0xa8>)
    7770:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    7772:	687b      	ldr	r3, [r7, #4]
    7774:	681b      	ldr	r3, [r3, #0]
    7776:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    777a:	4618      	mov	r0, r3
    777c:	4b0d      	ldr	r3, [pc, #52]	; (77b4 <_calendar_init+0xb0>)
    777e:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    7780:	687b      	ldr	r3, [r7, #4]
    7782:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    7784:	2100      	movs	r1, #0
    7786:	4618      	mov	r0, r3
    7788:	4b0b      	ldr	r3, [pc, #44]	; (77b8 <_calendar_init+0xb4>)
    778a:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    778c:	2300      	movs	r3, #0
}
    778e:	4618      	mov	r0, r3
    7790:	3708      	adds	r7, #8
    7792:	46bd      	mov	sp, r7
    7794:	bd80      	pop	{r7, pc}
    7796:	bf00      	nop
    7798:	0001ae48 	.word	0x0001ae48
    779c:	00004c81 	.word	0x00004c81
    77a0:	2000232c 	.word	0x2000232c
    77a4:	00007611 	.word	0x00007611
    77a8:	0000764d 	.word	0x0000764d
    77ac:	00007525 	.word	0x00007525
    77b0:	000075b5 	.word	0x000075b5
    77b4:	0000767d 	.word	0x0000767d
    77b8:	000076e9 	.word	0x000076e9

000077bc <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    77bc:	b580      	push	{r7, lr}
    77be:	b082      	sub	sp, #8
    77c0:	af00      	add	r7, sp, #0
    77c2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    77c4:	687b      	ldr	r3, [r7, #4]
    77c6:	2b00      	cmp	r3, #0
    77c8:	d005      	beq.n	77d6 <_calendar_enable+0x1a>
    77ca:	687b      	ldr	r3, [r7, #4]
    77cc:	681b      	ldr	r3, [r3, #0]
    77ce:	2b00      	cmp	r3, #0
    77d0:	d001      	beq.n	77d6 <_calendar_enable+0x1a>
    77d2:	2301      	movs	r3, #1
    77d4:	e000      	b.n	77d8 <_calendar_enable+0x1c>
    77d6:	2300      	movs	r3, #0
    77d8:	f003 0301 	and.w	r3, r3, #1
    77dc:	b2db      	uxtb	r3, r3
    77de:	2275      	movs	r2, #117	; 0x75
    77e0:	4906      	ldr	r1, [pc, #24]	; (77fc <_calendar_enable+0x40>)
    77e2:	4618      	mov	r0, r3
    77e4:	4b06      	ldr	r3, [pc, #24]	; (7800 <_calendar_enable+0x44>)
    77e6:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    77e8:	687b      	ldr	r3, [r7, #4]
    77ea:	681b      	ldr	r3, [r3, #0]
    77ec:	4618      	mov	r0, r3
    77ee:	4b05      	ldr	r3, [pc, #20]	; (7804 <_calendar_enable+0x48>)
    77f0:	4798      	blx	r3

	return ERR_NONE;
    77f2:	2300      	movs	r3, #0
}
    77f4:	4618      	mov	r0, r3
    77f6:	3708      	adds	r7, #8
    77f8:	46bd      	mov	sp, r7
    77fa:	bd80      	pop	{r7, pc}
    77fc:	0001ae48 	.word	0x0001ae48
    7800:	00004c81 	.word	0x00004c81
    7804:	000075e1 	.word	0x000075e1

00007808 <_calendar_set_counter>:

/**
 * \brief Set the current calendar time to desired time.
 */
int32_t _calendar_set_counter(struct calendar_dev *const dev, const uint32_t counter)
{
    7808:	b580      	push	{r7, lr}
    780a:	b082      	sub	sp, #8
    780c:	af00      	add	r7, sp, #0
    780e:	6078      	str	r0, [r7, #4]
    7810:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->hw);
    7812:	687b      	ldr	r3, [r7, #4]
    7814:	2b00      	cmp	r3, #0
    7816:	d005      	beq.n	7824 <_calendar_set_counter+0x1c>
    7818:	687b      	ldr	r3, [r7, #4]
    781a:	681b      	ldr	r3, [r3, #0]
    781c:	2b00      	cmp	r3, #0
    781e:	d001      	beq.n	7824 <_calendar_set_counter+0x1c>
    7820:	2301      	movs	r3, #1
    7822:	e000      	b.n	7826 <_calendar_set_counter+0x1e>
    7824:	2300      	movs	r3, #0
    7826:	f003 0301 	and.w	r3, r3, #1
    782a:	b2db      	uxtb	r3, r3
    782c:	228d      	movs	r2, #141	; 0x8d
    782e:	4907      	ldr	r1, [pc, #28]	; (784c <_calendar_set_counter+0x44>)
    7830:	4618      	mov	r0, r3
    7832:	4b07      	ldr	r3, [pc, #28]	; (7850 <_calendar_set_counter+0x48>)
    7834:	4798      	blx	r3

	hri_rtcmode0_write_COUNT_reg(dev->hw, counter);
    7836:	687b      	ldr	r3, [r7, #4]
    7838:	681b      	ldr	r3, [r3, #0]
    783a:	6839      	ldr	r1, [r7, #0]
    783c:	4618      	mov	r0, r3
    783e:	4b05      	ldr	r3, [pc, #20]	; (7854 <_calendar_set_counter+0x4c>)
    7840:	4798      	blx	r3

	return ERR_NONE;
    7842:	2300      	movs	r3, #0
}
    7844:	4618      	mov	r0, r3
    7846:	3708      	adds	r7, #8
    7848:	46bd      	mov	sp, r7
    784a:	bd80      	pop	{r7, pc}
    784c:	0001ae48 	.word	0x0001ae48
    7850:	00004c81 	.word	0x00004c81
    7854:	000076a5 	.word	0x000076a5

00007858 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    7858:	b580      	push	{r7, lr}
    785a:	b082      	sub	sp, #8
    785c:	af00      	add	r7, sp, #0
    785e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    7860:	687b      	ldr	r3, [r7, #4]
    7862:	2b00      	cmp	r3, #0
    7864:	d005      	beq.n	7872 <_calendar_get_counter+0x1a>
    7866:	687b      	ldr	r3, [r7, #4]
    7868:	681b      	ldr	r3, [r3, #0]
    786a:	2b00      	cmp	r3, #0
    786c:	d001      	beq.n	7872 <_calendar_get_counter+0x1a>
    786e:	2301      	movs	r3, #1
    7870:	e000      	b.n	7874 <_calendar_get_counter+0x1c>
    7872:	2300      	movs	r3, #0
    7874:	f003 0301 	and.w	r3, r3, #1
    7878:	b2db      	uxtb	r3, r3
    787a:	2299      	movs	r2, #153	; 0x99
    787c:	4906      	ldr	r1, [pc, #24]	; (7898 <_calendar_get_counter+0x40>)
    787e:	4618      	mov	r0, r3
    7880:	4b06      	ldr	r3, [pc, #24]	; (789c <_calendar_get_counter+0x44>)
    7882:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    7884:	687b      	ldr	r3, [r7, #4]
    7886:	681b      	ldr	r3, [r3, #0]
    7888:	4618      	mov	r0, r3
    788a:	4b05      	ldr	r3, [pc, #20]	; (78a0 <_calendar_get_counter+0x48>)
    788c:	4798      	blx	r3
    788e:	4603      	mov	r3, r0
}
    7890:	4618      	mov	r0, r3
    7892:	3708      	adds	r7, #8
    7894:	46bd      	mov	sp, r7
    7896:	bd80      	pop	{r7, pc}
    7898:	0001ae48 	.word	0x0001ae48
    789c:	00004c81 	.word	0x00004c81
    78a0:	000076c9 	.word	0x000076c9

000078a4 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    78a4:	b580      	push	{r7, lr}
    78a6:	b084      	sub	sp, #16
    78a8:	af00      	add	r7, sp, #0
    78aa:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    78ac:	687b      	ldr	r3, [r7, #4]
    78ae:	681b      	ldr	r3, [r3, #0]
    78b0:	4618      	mov	r0, r3
    78b2:	4b19      	ldr	r3, [pc, #100]	; (7918 <_rtc_interrupt_handler+0x74>)
    78b4:	4798      	blx	r3
    78b6:	4603      	mov	r3, r0
    78b8:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    78ba:	687b      	ldr	r3, [r7, #4]
    78bc:	681b      	ldr	r3, [r3, #0]
    78be:	4618      	mov	r0, r3
    78c0:	4b16      	ldr	r3, [pc, #88]	; (791c <_rtc_interrupt_handler+0x78>)
    78c2:	4798      	blx	r3
    78c4:	4603      	mov	r3, r0
    78c6:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    78c8:	89fa      	ldrh	r2, [r7, #14]
    78ca:	89bb      	ldrh	r3, [r7, #12]
    78cc:	4013      	ands	r3, r2
    78ce:	b29b      	uxth	r3, r3
    78d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    78d4:	2b00      	cmp	r3, #0
    78d6:	d009      	beq.n	78ec <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    78d8:	687b      	ldr	r3, [r7, #4]
    78da:	685b      	ldr	r3, [r3, #4]
    78dc:	6878      	ldr	r0, [r7, #4]
    78de:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    78e0:	687b      	ldr	r3, [r7, #4]
    78e2:	681b      	ldr	r3, [r3, #0]
    78e4:	4618      	mov	r0, r3
    78e6:	4b0e      	ldr	r3, [pc, #56]	; (7920 <_rtc_interrupt_handler+0x7c>)
    78e8:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    78ea:	e010      	b.n	790e <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    78ec:	89fa      	ldrh	r2, [r7, #14]
    78ee:	89bb      	ldrh	r3, [r7, #12]
    78f0:	4013      	ands	r3, r2
    78f2:	b29b      	uxth	r3, r3
    78f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    78f8:	2b00      	cmp	r3, #0
    78fa:	d008      	beq.n	790e <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    78fc:	687b      	ldr	r3, [r7, #4]
    78fe:	689b      	ldr	r3, [r3, #8]
    7900:	6878      	ldr	r0, [r7, #4]
    7902:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    7904:	687b      	ldr	r3, [r7, #4]
    7906:	681b      	ldr	r3, [r3, #0]
    7908:	4618      	mov	r0, r3
    790a:	4b06      	ldr	r3, [pc, #24]	; (7924 <_rtc_interrupt_handler+0x80>)
    790c:	4798      	blx	r3
}
    790e:	bf00      	nop
    7910:	3710      	adds	r7, #16
    7912:	46bd      	mov	sp, r7
    7914:	bd80      	pop	{r7, pc}
    7916:	bf00      	nop
    7918:	00007581 	.word	0x00007581
    791c:	0000759b 	.word	0x0000759b
    7920:	00007549 	.word	0x00007549
    7924:	00007565 	.word	0x00007565

00007928 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    7928:	b580      	push	{r7, lr}
    792a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    792c:	4b03      	ldr	r3, [pc, #12]	; (793c <RTC_Handler+0x14>)
    792e:	681b      	ldr	r3, [r3, #0]
    7930:	4618      	mov	r0, r3
    7932:	4b03      	ldr	r3, [pc, #12]	; (7940 <RTC_Handler+0x18>)
    7934:	4798      	blx	r3
}
    7936:	bf00      	nop
    7938:	bd80      	pop	{r7, pc}
    793a:	bf00      	nop
    793c:	2000232c 	.word	0x2000232c
    7940:	000078a5 	.word	0x000078a5

00007944 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    7944:	b480      	push	{r7}
    7946:	b083      	sub	sp, #12
    7948:	af00      	add	r7, sp, #0
    794a:	6078      	str	r0, [r7, #4]
    794c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    794e:	bf00      	nop
    7950:	687b      	ldr	r3, [r7, #4]
    7952:	69da      	ldr	r2, [r3, #28]
    7954:	683b      	ldr	r3, [r7, #0]
    7956:	4013      	ands	r3, r2
    7958:	2b00      	cmp	r3, #0
    795a:	d1f9      	bne.n	7950 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    795c:	bf00      	nop
    795e:	370c      	adds	r7, #12
    7960:	46bd      	mov	sp, r7
    7962:	f85d 7b04 	ldr.w	r7, [sp], #4
    7966:	4770      	bx	lr

00007968 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    7968:	b480      	push	{r7}
    796a:	b083      	sub	sp, #12
    796c:	af00      	add	r7, sp, #0
    796e:	6078      	str	r0, [r7, #4]
    7970:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    7972:	687b      	ldr	r3, [r7, #4]
    7974:	69da      	ldr	r2, [r3, #28]
    7976:	683b      	ldr	r3, [r7, #0]
    7978:	4013      	ands	r3, r2
    797a:	2b00      	cmp	r3, #0
    797c:	bf14      	ite	ne
    797e:	2301      	movne	r3, #1
    7980:	2300      	moveq	r3, #0
    7982:	b2db      	uxtb	r3, r3
}
    7984:	4618      	mov	r0, r3
    7986:	370c      	adds	r7, #12
    7988:	46bd      	mov	sp, r7
    798a:	f85d 7b04 	ldr.w	r7, [sp], #4
    798e:	4770      	bx	lr

00007990 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    7990:	b480      	push	{r7}
    7992:	b083      	sub	sp, #12
    7994:	af00      	add	r7, sp, #0
    7996:	6078      	str	r0, [r7, #4]
    7998:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    799a:	bf00      	nop
    799c:	687b      	ldr	r3, [r7, #4]
    799e:	69da      	ldr	r2, [r3, #28]
    79a0:	683b      	ldr	r3, [r7, #0]
    79a2:	4013      	ands	r3, r2
    79a4:	2b00      	cmp	r3, #0
    79a6:	d1f9      	bne.n	799c <hri_sercomspi_wait_for_sync+0xc>
	};
}
    79a8:	bf00      	nop
    79aa:	370c      	adds	r7, #12
    79ac:	46bd      	mov	sp, r7
    79ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    79b2:	4770      	bx	lr

000079b4 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    79b4:	b480      	push	{r7}
    79b6:	b083      	sub	sp, #12
    79b8:	af00      	add	r7, sp, #0
    79ba:	6078      	str	r0, [r7, #4]
    79bc:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    79be:	687b      	ldr	r3, [r7, #4]
    79c0:	69da      	ldr	r2, [r3, #28]
    79c2:	683b      	ldr	r3, [r7, #0]
    79c4:	4013      	ands	r3, r2
    79c6:	2b00      	cmp	r3, #0
    79c8:	bf14      	ite	ne
    79ca:	2301      	movne	r3, #1
    79cc:	2300      	moveq	r3, #0
    79ce:	b2db      	uxtb	r3, r3
}
    79d0:	4618      	mov	r0, r3
    79d2:	370c      	adds	r7, #12
    79d4:	46bd      	mov	sp, r7
    79d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    79da:	4770      	bx	lr

000079dc <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    79dc:	b480      	push	{r7}
    79de:	b083      	sub	sp, #12
    79e0:	af00      	add	r7, sp, #0
    79e2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    79e4:	687b      	ldr	r3, [r7, #4]
    79e6:	2201      	movs	r2, #1
    79e8:	761a      	strb	r2, [r3, #24]
}
    79ea:	bf00      	nop
    79ec:	370c      	adds	r7, #12
    79ee:	46bd      	mov	sp, r7
    79f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    79f4:	4770      	bx	lr

000079f6 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    79f6:	b480      	push	{r7}
    79f8:	b083      	sub	sp, #12
    79fa:	af00      	add	r7, sp, #0
    79fc:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    79fe:	687b      	ldr	r3, [r7, #4]
    7a00:	2202      	movs	r2, #2
    7a02:	761a      	strb	r2, [r3, #24]
}
    7a04:	bf00      	nop
    7a06:	370c      	adds	r7, #12
    7a08:	46bd      	mov	sp, r7
    7a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a0e:	4770      	bx	lr

00007a10 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    7a10:	b480      	push	{r7}
    7a12:	b083      	sub	sp, #12
    7a14:	af00      	add	r7, sp, #0
    7a16:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    7a18:	687b      	ldr	r3, [r7, #4]
    7a1a:	7e1b      	ldrb	r3, [r3, #24]
    7a1c:	b2db      	uxtb	r3, r3
}
    7a1e:	4618      	mov	r0, r3
    7a20:	370c      	adds	r7, #12
    7a22:	46bd      	mov	sp, r7
    7a24:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a28:	4770      	bx	lr

00007a2a <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    7a2a:	b480      	push	{r7}
    7a2c:	b085      	sub	sp, #20
    7a2e:	af00      	add	r7, sp, #0
    7a30:	6078      	str	r0, [r7, #4]
    7a32:	460b      	mov	r3, r1
    7a34:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    7a36:	687b      	ldr	r3, [r7, #4]
    7a38:	7e1b      	ldrb	r3, [r3, #24]
    7a3a:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7a3c:	7bfa      	ldrb	r2, [r7, #15]
    7a3e:	78fb      	ldrb	r3, [r7, #3]
    7a40:	4013      	ands	r3, r2
    7a42:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7a44:	7bfb      	ldrb	r3, [r7, #15]
}
    7a46:	4618      	mov	r0, r3
    7a48:	3714      	adds	r7, #20
    7a4a:	46bd      	mov	sp, r7
    7a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a50:	4770      	bx	lr

00007a52 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    7a52:	b480      	push	{r7}
    7a54:	b083      	sub	sp, #12
    7a56:	af00      	add	r7, sp, #0
    7a58:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    7a5a:	687b      	ldr	r3, [r7, #4]
    7a5c:	7e1b      	ldrb	r3, [r3, #24]
    7a5e:	b2db      	uxtb	r3, r3
}
    7a60:	4618      	mov	r0, r3
    7a62:	370c      	adds	r7, #12
    7a64:	46bd      	mov	sp, r7
    7a66:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a6a:	4770      	bx	lr

00007a6c <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    7a6c:	b480      	push	{r7}
    7a6e:	b083      	sub	sp, #12
    7a70:	af00      	add	r7, sp, #0
    7a72:	6078      	str	r0, [r7, #4]
    7a74:	460b      	mov	r3, r1
    7a76:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    7a78:	687b      	ldr	r3, [r7, #4]
    7a7a:	78fa      	ldrb	r2, [r7, #3]
    7a7c:	761a      	strb	r2, [r3, #24]
}
    7a7e:	bf00      	nop
    7a80:	370c      	adds	r7, #12
    7a82:	46bd      	mov	sp, r7
    7a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a88:	4770      	bx	lr
	...

00007a8c <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7a8c:	b580      	push	{r7, lr}
    7a8e:	b082      	sub	sp, #8
    7a90:	af00      	add	r7, sp, #0
    7a92:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    7a94:	687b      	ldr	r3, [r7, #4]
    7a96:	681b      	ldr	r3, [r3, #0]
    7a98:	f043 0202 	orr.w	r2, r3, #2
    7a9c:	687b      	ldr	r3, [r7, #4]
    7a9e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7aa0:	2103      	movs	r1, #3
    7aa2:	6878      	ldr	r0, [r7, #4]
    7aa4:	4b02      	ldr	r3, [pc, #8]	; (7ab0 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    7aa6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7aa8:	bf00      	nop
    7aaa:	3708      	adds	r7, #8
    7aac:	46bd      	mov	sp, r7
    7aae:	bd80      	pop	{r7, pc}
    7ab0:	00007945 	.word	0x00007945

00007ab4 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7ab4:	b580      	push	{r7, lr}
    7ab6:	b082      	sub	sp, #8
    7ab8:	af00      	add	r7, sp, #0
    7aba:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    7abc:	687b      	ldr	r3, [r7, #4]
    7abe:	681b      	ldr	r3, [r3, #0]
    7ac0:	f023 0202 	bic.w	r2, r3, #2
    7ac4:	687b      	ldr	r3, [r7, #4]
    7ac6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7ac8:	2103      	movs	r1, #3
    7aca:	6878      	ldr	r0, [r7, #4]
    7acc:	4b02      	ldr	r3, [pc, #8]	; (7ad8 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    7ace:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7ad0:	bf00      	nop
    7ad2:	3708      	adds	r7, #8
    7ad4:	46bd      	mov	sp, r7
    7ad6:	bd80      	pop	{r7, pc}
    7ad8:	00007945 	.word	0x00007945

00007adc <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    7adc:	b480      	push	{r7}
    7ade:	b085      	sub	sp, #20
    7ae0:	af00      	add	r7, sp, #0
    7ae2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7ae4:	687b      	ldr	r3, [r7, #4]
    7ae6:	681b      	ldr	r3, [r3, #0]
    7ae8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    7aea:	68fb      	ldr	r3, [r7, #12]
    7aec:	0edb      	lsrs	r3, r3, #27
    7aee:	f003 0301 	and.w	r3, r3, #1
    7af2:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7af4:	68fb      	ldr	r3, [r7, #12]
    7af6:	2b00      	cmp	r3, #0
    7af8:	bf14      	ite	ne
    7afa:	2301      	movne	r3, #1
    7afc:	2300      	moveq	r3, #0
    7afe:	b2db      	uxtb	r3, r3
}
    7b00:	4618      	mov	r0, r3
    7b02:	3714      	adds	r7, #20
    7b04:	46bd      	mov	sp, r7
    7b06:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b0a:	4770      	bx	lr

00007b0c <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    7b0c:	b580      	push	{r7, lr}
    7b0e:	b084      	sub	sp, #16
    7b10:	af00      	add	r7, sp, #0
    7b12:	6078      	str	r0, [r7, #4]
    7b14:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7b16:	2103      	movs	r1, #3
    7b18:	6878      	ldr	r0, [r7, #4]
    7b1a:	4b07      	ldr	r3, [pc, #28]	; (7b38 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    7b1c:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7b1e:	687b      	ldr	r3, [r7, #4]
    7b20:	681b      	ldr	r3, [r3, #0]
    7b22:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7b24:	68fa      	ldr	r2, [r7, #12]
    7b26:	683b      	ldr	r3, [r7, #0]
    7b28:	4013      	ands	r3, r2
    7b2a:	60fb      	str	r3, [r7, #12]
	return tmp;
    7b2c:	68fb      	ldr	r3, [r7, #12]
}
    7b2e:	4618      	mov	r0, r3
    7b30:	3710      	adds	r7, #16
    7b32:	46bd      	mov	sp, r7
    7b34:	bd80      	pop	{r7, pc}
    7b36:	bf00      	nop
    7b38:	00007945 	.word	0x00007945

00007b3c <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    7b3c:	b580      	push	{r7, lr}
    7b3e:	b082      	sub	sp, #8
    7b40:	af00      	add	r7, sp, #0
    7b42:	6078      	str	r0, [r7, #4]
    7b44:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    7b46:	687b      	ldr	r3, [r7, #4]
    7b48:	683a      	ldr	r2, [r7, #0]
    7b4a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7b4c:	2103      	movs	r1, #3
    7b4e:	6878      	ldr	r0, [r7, #4]
    7b50:	4b02      	ldr	r3, [pc, #8]	; (7b5c <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    7b52:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7b54:	bf00      	nop
    7b56:	3708      	adds	r7, #8
    7b58:	46bd      	mov	sp, r7
    7b5a:	bd80      	pop	{r7, pc}
    7b5c:	00007945 	.word	0x00007945

00007b60 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7b60:	b580      	push	{r7, lr}
    7b62:	b082      	sub	sp, #8
    7b64:	af00      	add	r7, sp, #0
    7b66:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    7b68:	687b      	ldr	r3, [r7, #4]
    7b6a:	681b      	ldr	r3, [r3, #0]
    7b6c:	f043 0202 	orr.w	r2, r3, #2
    7b70:	687b      	ldr	r3, [r7, #4]
    7b72:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7b74:	2103      	movs	r1, #3
    7b76:	6878      	ldr	r0, [r7, #4]
    7b78:	4b02      	ldr	r3, [pc, #8]	; (7b84 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    7b7a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7b7c:	bf00      	nop
    7b7e:	3708      	adds	r7, #8
    7b80:	46bd      	mov	sp, r7
    7b82:	bd80      	pop	{r7, pc}
    7b84:	00007991 	.word	0x00007991

00007b88 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7b88:	b580      	push	{r7, lr}
    7b8a:	b084      	sub	sp, #16
    7b8c:	af00      	add	r7, sp, #0
    7b8e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7b90:	2103      	movs	r1, #3
    7b92:	6878      	ldr	r0, [r7, #4]
    7b94:	4b09      	ldr	r3, [pc, #36]	; (7bbc <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    7b96:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7b98:	687b      	ldr	r3, [r7, #4]
    7b9a:	681b      	ldr	r3, [r3, #0]
    7b9c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    7b9e:	68fb      	ldr	r3, [r7, #12]
    7ba0:	085b      	lsrs	r3, r3, #1
    7ba2:	f003 0301 	and.w	r3, r3, #1
    7ba6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7ba8:	68fb      	ldr	r3, [r7, #12]
    7baa:	2b00      	cmp	r3, #0
    7bac:	bf14      	ite	ne
    7bae:	2301      	movne	r3, #1
    7bb0:	2300      	moveq	r3, #0
    7bb2:	b2db      	uxtb	r3, r3
}
    7bb4:	4618      	mov	r0, r3
    7bb6:	3710      	adds	r7, #16
    7bb8:	46bd      	mov	sp, r7
    7bba:	bd80      	pop	{r7, pc}
    7bbc:	00007991 	.word	0x00007991

00007bc0 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7bc0:	b580      	push	{r7, lr}
    7bc2:	b082      	sub	sp, #8
    7bc4:	af00      	add	r7, sp, #0
    7bc6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7bc8:	687b      	ldr	r3, [r7, #4]
    7bca:	681b      	ldr	r3, [r3, #0]
    7bcc:	f023 0202 	bic.w	r2, r3, #2
    7bd0:	687b      	ldr	r3, [r7, #4]
    7bd2:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7bd4:	2103      	movs	r1, #3
    7bd6:	6878      	ldr	r0, [r7, #4]
    7bd8:	4b02      	ldr	r3, [pc, #8]	; (7be4 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    7bda:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7bdc:	bf00      	nop
    7bde:	3708      	adds	r7, #8
    7be0:	46bd      	mov	sp, r7
    7be2:	bd80      	pop	{r7, pc}
    7be4:	00007991 	.word	0x00007991

00007be8 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    7be8:	b580      	push	{r7, lr}
    7bea:	b084      	sub	sp, #16
    7bec:	af00      	add	r7, sp, #0
    7bee:	6078      	str	r0, [r7, #4]
    7bf0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7bf2:	2103      	movs	r1, #3
    7bf4:	6878      	ldr	r0, [r7, #4]
    7bf6:	4b07      	ldr	r3, [pc, #28]	; (7c14 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    7bf8:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7bfa:	687b      	ldr	r3, [r7, #4]
    7bfc:	681b      	ldr	r3, [r3, #0]
    7bfe:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7c00:	68fa      	ldr	r2, [r7, #12]
    7c02:	683b      	ldr	r3, [r7, #0]
    7c04:	4013      	ands	r3, r2
    7c06:	60fb      	str	r3, [r7, #12]
	return tmp;
    7c08:	68fb      	ldr	r3, [r7, #12]
}
    7c0a:	4618      	mov	r0, r3
    7c0c:	3710      	adds	r7, #16
    7c0e:	46bd      	mov	sp, r7
    7c10:	bd80      	pop	{r7, pc}
    7c12:	bf00      	nop
    7c14:	00007991 	.word	0x00007991

00007c18 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    7c18:	b580      	push	{r7, lr}
    7c1a:	b082      	sub	sp, #8
    7c1c:	af00      	add	r7, sp, #0
    7c1e:	6078      	str	r0, [r7, #4]
    7c20:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7c22:	687b      	ldr	r3, [r7, #4]
    7c24:	683a      	ldr	r2, [r7, #0]
    7c26:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7c28:	2103      	movs	r1, #3
    7c2a:	6878      	ldr	r0, [r7, #4]
    7c2c:	4b02      	ldr	r3, [pc, #8]	; (7c38 <hri_sercomspi_write_CTRLA_reg+0x20>)
    7c2e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7c30:	bf00      	nop
    7c32:	3708      	adds	r7, #8
    7c34:	46bd      	mov	sp, r7
    7c36:	bd80      	pop	{r7, pc}
    7c38:	00007991 	.word	0x00007991

00007c3c <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    7c3c:	b580      	push	{r7, lr}
    7c3e:	b082      	sub	sp, #8
    7c40:	af00      	add	r7, sp, #0
    7c42:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    7c44:	687b      	ldr	r3, [r7, #4]
    7c46:	685b      	ldr	r3, [r3, #4]
    7c48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    7c4c:	687b      	ldr	r3, [r7, #4]
    7c4e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7c50:	2104      	movs	r1, #4
    7c52:	6878      	ldr	r0, [r7, #4]
    7c54:	4b02      	ldr	r3, [pc, #8]	; (7c60 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    7c56:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7c58:	bf00      	nop
    7c5a:	3708      	adds	r7, #8
    7c5c:	46bd      	mov	sp, r7
    7c5e:	bd80      	pop	{r7, pc}
    7c60:	00007945 	.word	0x00007945

00007c64 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    7c64:	b580      	push	{r7, lr}
    7c66:	b082      	sub	sp, #8
    7c68:	af00      	add	r7, sp, #0
    7c6a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    7c6c:	687b      	ldr	r3, [r7, #4]
    7c6e:	685b      	ldr	r3, [r3, #4]
    7c70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    7c74:	687b      	ldr	r3, [r7, #4]
    7c76:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7c78:	2104      	movs	r1, #4
    7c7a:	6878      	ldr	r0, [r7, #4]
    7c7c:	4b02      	ldr	r3, [pc, #8]	; (7c88 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    7c7e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7c80:	bf00      	nop
    7c82:	3708      	adds	r7, #8
    7c84:	46bd      	mov	sp, r7
    7c86:	bd80      	pop	{r7, pc}
    7c88:	00007945 	.word	0x00007945

00007c8c <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    7c8c:	b580      	push	{r7, lr}
    7c8e:	b082      	sub	sp, #8
    7c90:	af00      	add	r7, sp, #0
    7c92:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7c94:	687b      	ldr	r3, [r7, #4]
    7c96:	685b      	ldr	r3, [r3, #4]
    7c98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    7c9c:	687b      	ldr	r3, [r7, #4]
    7c9e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7ca0:	2104      	movs	r1, #4
    7ca2:	6878      	ldr	r0, [r7, #4]
    7ca4:	4b02      	ldr	r3, [pc, #8]	; (7cb0 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    7ca6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7ca8:	bf00      	nop
    7caa:	3708      	adds	r7, #8
    7cac:	46bd      	mov	sp, r7
    7cae:	bd80      	pop	{r7, pc}
    7cb0:	00007945 	.word	0x00007945

00007cb4 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    7cb4:	b580      	push	{r7, lr}
    7cb6:	b082      	sub	sp, #8
    7cb8:	af00      	add	r7, sp, #0
    7cba:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    7cbc:	687b      	ldr	r3, [r7, #4]
    7cbe:	685b      	ldr	r3, [r3, #4]
    7cc0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    7cc4:	687b      	ldr	r3, [r7, #4]
    7cc6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7cc8:	2104      	movs	r1, #4
    7cca:	6878      	ldr	r0, [r7, #4]
    7ccc:	4b02      	ldr	r3, [pc, #8]	; (7cd8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    7cce:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7cd0:	bf00      	nop
    7cd2:	3708      	adds	r7, #8
    7cd4:	46bd      	mov	sp, r7
    7cd6:	bd80      	pop	{r7, pc}
    7cd8:	00007945 	.word	0x00007945

00007cdc <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    7cdc:	b580      	push	{r7, lr}
    7cde:	b082      	sub	sp, #8
    7ce0:	af00      	add	r7, sp, #0
    7ce2:	6078      	str	r0, [r7, #4]
    7ce4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7ce6:	687b      	ldr	r3, [r7, #4]
    7ce8:	685a      	ldr	r2, [r3, #4]
    7cea:	683b      	ldr	r3, [r7, #0]
    7cec:	041b      	lsls	r3, r3, #16
    7cee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    7cf2:	431a      	orrs	r2, r3
    7cf4:	687b      	ldr	r3, [r7, #4]
    7cf6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7cf8:	2104      	movs	r1, #4
    7cfa:	6878      	ldr	r0, [r7, #4]
    7cfc:	4b02      	ldr	r3, [pc, #8]	; (7d08 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    7cfe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7d00:	bf00      	nop
    7d02:	3708      	adds	r7, #8
    7d04:	46bd      	mov	sp, r7
    7d06:	bd80      	pop	{r7, pc}
    7d08:	00007945 	.word	0x00007945

00007d0c <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    7d0c:	b580      	push	{r7, lr}
    7d0e:	b082      	sub	sp, #8
    7d10:	af00      	add	r7, sp, #0
    7d12:	6078      	str	r0, [r7, #4]
    7d14:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    7d16:	687b      	ldr	r3, [r7, #4]
    7d18:	683a      	ldr	r2, [r7, #0]
    7d1a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7d1c:	2104      	movs	r1, #4
    7d1e:	6878      	ldr	r0, [r7, #4]
    7d20:	4b02      	ldr	r3, [pc, #8]	; (7d2c <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    7d22:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7d24:	bf00      	nop
    7d26:	3708      	adds	r7, #8
    7d28:	46bd      	mov	sp, r7
    7d2a:	bd80      	pop	{r7, pc}
    7d2c:	00007945 	.word	0x00007945

00007d30 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    7d30:	b580      	push	{r7, lr}
    7d32:	b082      	sub	sp, #8
    7d34:	af00      	add	r7, sp, #0
    7d36:	6078      	str	r0, [r7, #4]
    7d38:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7d3a:	687b      	ldr	r3, [r7, #4]
    7d3c:	683a      	ldr	r2, [r7, #0]
    7d3e:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    7d40:	2117      	movs	r1, #23
    7d42:	6878      	ldr	r0, [r7, #4]
    7d44:	4b02      	ldr	r3, [pc, #8]	; (7d50 <hri_sercomspi_write_CTRLB_reg+0x20>)
    7d46:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7d48:	bf00      	nop
    7d4a:	3708      	adds	r7, #8
    7d4c:	46bd      	mov	sp, r7
    7d4e:	bd80      	pop	{r7, pc}
    7d50:	00007991 	.word	0x00007991

00007d54 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    7d54:	b480      	push	{r7}
    7d56:	b083      	sub	sp, #12
    7d58:	af00      	add	r7, sp, #0
    7d5a:	6078      	str	r0, [r7, #4]
    7d5c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    7d5e:	687b      	ldr	r3, [r7, #4]
    7d60:	683a      	ldr	r2, [r7, #0]
    7d62:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7d64:	bf00      	nop
    7d66:	370c      	adds	r7, #12
    7d68:	46bd      	mov	sp, r7
    7d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d6e:	4770      	bx	lr

00007d70 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    7d70:	b480      	push	{r7}
    7d72:	b083      	sub	sp, #12
    7d74:	af00      	add	r7, sp, #0
    7d76:	6078      	str	r0, [r7, #4]
    7d78:	460b      	mov	r3, r1
    7d7a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7d7c:	687b      	ldr	r3, [r7, #4]
    7d7e:	78fa      	ldrb	r2, [r7, #3]
    7d80:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7d82:	bf00      	nop
    7d84:	370c      	adds	r7, #12
    7d86:	46bd      	mov	sp, r7
    7d88:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d8c:	4770      	bx	lr
	...

00007d90 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    7d90:	b580      	push	{r7, lr}
    7d92:	b084      	sub	sp, #16
    7d94:	af00      	add	r7, sp, #0
    7d96:	6078      	str	r0, [r7, #4]
    7d98:	460b      	mov	r3, r1
    7d9a:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    7d9c:	687b      	ldr	r3, [r7, #4]
    7d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7da0:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    7da2:	68fb      	ldr	r3, [r7, #12]
    7da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    7da8:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    7daa:	78fb      	ldrb	r3, [r7, #3]
    7dac:	039b      	lsls	r3, r3, #14
    7dae:	461a      	mov	r2, r3
    7db0:	68fb      	ldr	r3, [r7, #12]
    7db2:	4313      	orrs	r3, r2
    7db4:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    7db6:	687b      	ldr	r3, [r7, #4]
    7db8:	68fa      	ldr	r2, [r7, #12]
    7dba:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7dbc:	2104      	movs	r1, #4
    7dbe:	6878      	ldr	r0, [r7, #4]
    7dc0:	4b02      	ldr	r3, [pc, #8]	; (7dcc <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    7dc2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7dc4:	bf00      	nop
    7dc6:	3710      	adds	r7, #16
    7dc8:	46bd      	mov	sp, r7
    7dca:	bd80      	pop	{r7, pc}
    7dcc:	00007945 	.word	0x00007945

00007dd0 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    7dd0:	b580      	push	{r7, lr}
    7dd2:	b082      	sub	sp, #8
    7dd4:	af00      	add	r7, sp, #0
    7dd6:	6078      	str	r0, [r7, #4]
    7dd8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7dda:	687b      	ldr	r3, [r7, #4]
    7ddc:	683a      	ldr	r2, [r7, #0]
    7dde:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7de0:	2104      	movs	r1, #4
    7de2:	6878      	ldr	r0, [r7, #4]
    7de4:	4b02      	ldr	r3, [pc, #8]	; (7df0 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    7de6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7de8:	bf00      	nop
    7dea:	3708      	adds	r7, #8
    7dec:	46bd      	mov	sp, r7
    7dee:	bd80      	pop	{r7, pc}
    7df0:	00007945 	.word	0x00007945

00007df4 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    7df4:	b580      	push	{r7, lr}
    7df6:	b082      	sub	sp, #8
    7df8:	af00      	add	r7, sp, #0
    7dfa:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7dfc:	2104      	movs	r1, #4
    7dfe:	6878      	ldr	r0, [r7, #4]
    7e00:	4b03      	ldr	r3, [pc, #12]	; (7e10 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    7e02:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7e04:	687b      	ldr	r3, [r7, #4]
    7e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    7e08:	4618      	mov	r0, r3
    7e0a:	3708      	adds	r7, #8
    7e0c:	46bd      	mov	sp, r7
    7e0e:	bd80      	pop	{r7, pc}
    7e10:	00007945 	.word	0x00007945

00007e14 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    7e14:	b480      	push	{r7}
    7e16:	b083      	sub	sp, #12
    7e18:	af00      	add	r7, sp, #0
    7e1a:	6078      	str	r0, [r7, #4]
    7e1c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    7e1e:	687b      	ldr	r3, [r7, #4]
    7e20:	683a      	ldr	r2, [r7, #0]
    7e22:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7e24:	bf00      	nop
    7e26:	370c      	adds	r7, #12
    7e28:	46bd      	mov	sp, r7
    7e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e2e:	4770      	bx	lr

00007e30 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    7e30:	b580      	push	{r7, lr}
    7e32:	b082      	sub	sp, #8
    7e34:	af00      	add	r7, sp, #0
    7e36:	6078      	str	r0, [r7, #4]
    7e38:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    7e3a:	687b      	ldr	r3, [r7, #4]
    7e3c:	683a      	ldr	r2, [r7, #0]
    7e3e:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7e40:	2104      	movs	r1, #4
    7e42:	6878      	ldr	r0, [r7, #4]
    7e44:	4b02      	ldr	r3, [pc, #8]	; (7e50 <hri_sercomi2cm_write_DATA_reg+0x20>)
    7e46:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7e48:	bf00      	nop
    7e4a:	3708      	adds	r7, #8
    7e4c:	46bd      	mov	sp, r7
    7e4e:	bd80      	pop	{r7, pc}
    7e50:	00007945 	.word	0x00007945

00007e54 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    7e54:	b580      	push	{r7, lr}
    7e56:	b082      	sub	sp, #8
    7e58:	af00      	add	r7, sp, #0
    7e5a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7e5c:	2104      	movs	r1, #4
    7e5e:	6878      	ldr	r0, [r7, #4]
    7e60:	4b03      	ldr	r3, [pc, #12]	; (7e70 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    7e62:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    7e64:	687b      	ldr	r3, [r7, #4]
    7e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    7e68:	4618      	mov	r0, r3
    7e6a:	3708      	adds	r7, #8
    7e6c:	46bd      	mov	sp, r7
    7e6e:	bd80      	pop	{r7, pc}
    7e70:	00007945 	.word	0x00007945

00007e74 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    7e74:	b480      	push	{r7}
    7e76:	b083      	sub	sp, #12
    7e78:	af00      	add	r7, sp, #0
    7e7a:	6078      	str	r0, [r7, #4]
    7e7c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    7e7e:	687b      	ldr	r3, [r7, #4]
    7e80:	683a      	ldr	r2, [r7, #0]
    7e82:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7e84:	bf00      	nop
    7e86:	370c      	adds	r7, #12
    7e88:	46bd      	mov	sp, r7
    7e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e8e:	4770      	bx	lr

00007e90 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    7e90:	b480      	push	{r7}
    7e92:	b083      	sub	sp, #12
    7e94:	af00      	add	r7, sp, #0
    7e96:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    7e98:	687b      	ldr	r3, [r7, #4]
    7e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    7e9c:	4618      	mov	r0, r3
    7e9e:	370c      	adds	r7, #12
    7ea0:	46bd      	mov	sp, r7
    7ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ea6:	4770      	bx	lr

00007ea8 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    7ea8:	b480      	push	{r7}
    7eaa:	b083      	sub	sp, #12
    7eac:	af00      	add	r7, sp, #0
    7eae:	6078      	str	r0, [r7, #4]
    7eb0:	460b      	mov	r3, r1
    7eb2:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7eb4:	687b      	ldr	r3, [r7, #4]
    7eb6:	78fa      	ldrb	r2, [r7, #3]
    7eb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7ebc:	bf00      	nop
    7ebe:	370c      	adds	r7, #12
    7ec0:	46bd      	mov	sp, r7
    7ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ec6:	4770      	bx	lr

00007ec8 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    7ec8:	b480      	push	{r7}
    7eca:	b083      	sub	sp, #12
    7ecc:	af00      	add	r7, sp, #0
    7ece:	6078      	str	r0, [r7, #4]
    7ed0:	460b      	mov	r3, r1
    7ed2:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    7ed4:	687b      	ldr	r3, [r7, #4]
    7ed6:	887a      	ldrh	r2, [r7, #2]
    7ed8:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7eda:	bf00      	nop
    7edc:	370c      	adds	r7, #12
    7ede:	46bd      	mov	sp, r7
    7ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ee4:	4770      	bx	lr
	...

00007ee8 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    7ee8:	b580      	push	{r7, lr}
    7eea:	b082      	sub	sp, #8
    7eec:	af00      	add	r7, sp, #0
    7eee:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7ef0:	2104      	movs	r1, #4
    7ef2:	6878      	ldr	r0, [r7, #4]
    7ef4:	4b06      	ldr	r3, [pc, #24]	; (7f10 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    7ef6:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    7ef8:	687b      	ldr	r3, [r7, #4]
    7efa:	8b5b      	ldrh	r3, [r3, #26]
    7efc:	b29b      	uxth	r3, r3
    7efe:	091b      	lsrs	r3, r3, #4
    7f00:	b29b      	uxth	r3, r3
    7f02:	f003 0303 	and.w	r3, r3, #3
    7f06:	b29b      	uxth	r3, r3
}
    7f08:	4618      	mov	r0, r3
    7f0a:	3708      	adds	r7, #8
    7f0c:	46bd      	mov	sp, r7
    7f0e:	bd80      	pop	{r7, pc}
    7f10:	00007945 	.word	0x00007945

00007f14 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    7f14:	b580      	push	{r7, lr}
    7f16:	b082      	sub	sp, #8
    7f18:	af00      	add	r7, sp, #0
    7f1a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7f1c:	2104      	movs	r1, #4
    7f1e:	6878      	ldr	r0, [r7, #4]
    7f20:	4b04      	ldr	r3, [pc, #16]	; (7f34 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    7f22:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    7f24:	687b      	ldr	r3, [r7, #4]
    7f26:	8b5b      	ldrh	r3, [r3, #26]
    7f28:	b29b      	uxth	r3, r3
}
    7f2a:	4618      	mov	r0, r3
    7f2c:	3708      	adds	r7, #8
    7f2e:	46bd      	mov	sp, r7
    7f30:	bd80      	pop	{r7, pc}
    7f32:	bf00      	nop
    7f34:	00007945 	.word	0x00007945

00007f38 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    7f38:	b580      	push	{r7, lr}
    7f3a:	b082      	sub	sp, #8
    7f3c:	af00      	add	r7, sp, #0
    7f3e:	6078      	str	r0, [r7, #4]
    7f40:	460b      	mov	r3, r1
    7f42:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    7f44:	687b      	ldr	r3, [r7, #4]
    7f46:	887a      	ldrh	r2, [r7, #2]
    7f48:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7f4a:	2104      	movs	r1, #4
    7f4c:	6878      	ldr	r0, [r7, #4]
    7f4e:	4b03      	ldr	r3, [pc, #12]	; (7f5c <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    7f50:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7f52:	bf00      	nop
    7f54:	3708      	adds	r7, #8
    7f56:	46bd      	mov	sp, r7
    7f58:	bd80      	pop	{r7, pc}
    7f5a:	bf00      	nop
    7f5c:	00007945 	.word	0x00007945

00007f60 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    7f60:	b4b0      	push	{r4, r5, r7}
    7f62:	b08d      	sub	sp, #52	; 0x34
    7f64:	af00      	add	r7, sp, #0
    7f66:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    7f68:	4b13      	ldr	r3, [pc, #76]	; (7fb8 <_sercom_get_hardware_index+0x58>)
    7f6a:	f107 040c 	add.w	r4, r7, #12
    7f6e:	461d      	mov	r5, r3
    7f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7f74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7f7c:	2300      	movs	r3, #0
    7f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    7f80:	e010      	b.n	7fa4 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    7f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7f84:	009b      	lsls	r3, r3, #2
    7f86:	f107 0230 	add.w	r2, r7, #48	; 0x30
    7f8a:	4413      	add	r3, r2
    7f8c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    7f90:	461a      	mov	r2, r3
    7f92:	687b      	ldr	r3, [r7, #4]
    7f94:	429a      	cmp	r2, r3
    7f96:	d102      	bne.n	7f9e <_sercom_get_hardware_index+0x3e>
			return i;
    7f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7f9a:	b2db      	uxtb	r3, r3
    7f9c:	e006      	b.n	7fac <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7fa0:	3301      	adds	r3, #1
    7fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    7fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7fa6:	2b07      	cmp	r3, #7
    7fa8:	d9eb      	bls.n	7f82 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    7faa:	2300      	movs	r3, #0
}
    7fac:	4618      	mov	r0, r3
    7fae:	3734      	adds	r7, #52	; 0x34
    7fb0:	46bd      	mov	sp, r7
    7fb2:	bcb0      	pop	{r4, r5, r7}
    7fb4:	4770      	bx	lr
    7fb6:	bf00      	nop
    7fb8:	0001ae7c 	.word	0x0001ae7c

00007fbc <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    7fbc:	b580      	push	{r7, lr}
    7fbe:	b084      	sub	sp, #16
    7fc0:	af00      	add	r7, sp, #0
    7fc2:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    7fc4:	6878      	ldr	r0, [r7, #4]
    7fc6:	4b13      	ldr	r3, [pc, #76]	; (8014 <_get_i2cm_index+0x58>)
    7fc8:	4798      	blx	r3
    7fca:	4603      	mov	r3, r0
    7fcc:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    7fce:	2300      	movs	r3, #0
    7fd0:	73fb      	strb	r3, [r7, #15]
    7fd2:	e010      	b.n	7ff6 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    7fd4:	7bfa      	ldrb	r2, [r7, #15]
    7fd6:	4910      	ldr	r1, [pc, #64]	; (8018 <_get_i2cm_index+0x5c>)
    7fd8:	4613      	mov	r3, r2
    7fda:	005b      	lsls	r3, r3, #1
    7fdc:	4413      	add	r3, r2
    7fde:	00db      	lsls	r3, r3, #3
    7fe0:	440b      	add	r3, r1
    7fe2:	781b      	ldrb	r3, [r3, #0]
    7fe4:	7bba      	ldrb	r2, [r7, #14]
    7fe6:	429a      	cmp	r2, r3
    7fe8:	d102      	bne.n	7ff0 <_get_i2cm_index+0x34>
			return i;
    7fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
    7fee:	e00d      	b.n	800c <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    7ff0:	7bfb      	ldrb	r3, [r7, #15]
    7ff2:	3301      	adds	r3, #1
    7ff4:	73fb      	strb	r3, [r7, #15]
    7ff6:	7bfb      	ldrb	r3, [r7, #15]
    7ff8:	2b02      	cmp	r3, #2
    7ffa:	d9eb      	bls.n	7fd4 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    7ffc:	f240 32a6 	movw	r2, #934	; 0x3a6
    8000:	4906      	ldr	r1, [pc, #24]	; (801c <_get_i2cm_index+0x60>)
    8002:	2000      	movs	r0, #0
    8004:	4b06      	ldr	r3, [pc, #24]	; (8020 <_get_i2cm_index+0x64>)
    8006:	4798      	blx	r3
	return -1;
    8008:	f04f 33ff 	mov.w	r3, #4294967295
}
    800c:	4618      	mov	r0, r3
    800e:	3710      	adds	r7, #16
    8010:	46bd      	mov	sp, r7
    8012:	bd80      	pop	{r7, pc}
    8014:	00007f61 	.word	0x00007f61
    8018:	20000018 	.word	0x20000018
    801c:	0001ae60 	.word	0x0001ae60
    8020:	00004c81 	.word	0x00004c81

00008024 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    8024:	b580      	push	{r7, lr}
    8026:	b082      	sub	sp, #8
    8028:	af00      	add	r7, sp, #0
    802a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    802c:	2103      	movs	r1, #3
    802e:	6878      	ldr	r0, [r7, #4]
    8030:	4b02      	ldr	r3, [pc, #8]	; (803c <_sercom_i2c_send_stop+0x18>)
    8032:	4798      	blx	r3
}
    8034:	bf00      	nop
    8036:	3708      	adds	r7, #8
    8038:	46bd      	mov	sp, r7
    803a:	bd80      	pop	{r7, pc}
    803c:	00007cdd 	.word	0x00007cdd

00008040 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    8040:	b590      	push	{r4, r7, lr}
    8042:	b087      	sub	sp, #28
    8044:	af00      	add	r7, sp, #0
    8046:	60f8      	str	r0, [r7, #12]
    8048:	60b9      	str	r1, [r7, #8]
    804a:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    804c:	68f8      	ldr	r0, [r7, #12]
    804e:	4b7d      	ldr	r3, [pc, #500]	; (8244 <_sercom_i2c_sync_analyse_flags+0x204>)
    8050:	4798      	blx	r3
    8052:	4603      	mov	r3, r0
    8054:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    8056:	68f8      	ldr	r0, [r7, #12]
    8058:	4b7b      	ldr	r3, [pc, #492]	; (8248 <_sercom_i2c_sync_analyse_flags+0x208>)
    805a:	4798      	blx	r3
    805c:	4603      	mov	r3, r0
    805e:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    8060:	68bb      	ldr	r3, [r7, #8]
    8062:	f003 0301 	and.w	r3, r3, #1
    8066:	2b00      	cmp	r3, #0
    8068:	f000 8095 	beq.w	8196 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    806c:	8a7b      	ldrh	r3, [r7, #18]
    806e:	f003 0302 	and.w	r3, r3, #2
    8072:	2b00      	cmp	r3, #0
    8074:	d01d      	beq.n	80b2 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    8076:	68f8      	ldr	r0, [r7, #12]
    8078:	4b74      	ldr	r3, [pc, #464]	; (824c <_sercom_i2c_sync_analyse_flags+0x20c>)
    807a:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    807c:	687b      	ldr	r3, [r7, #4]
    807e:	885b      	ldrh	r3, [r3, #2]
    8080:	b29b      	uxth	r3, r3
    8082:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    8086:	b29a      	uxth	r2, r3
    8088:	687b      	ldr	r3, [r7, #4]
    808a:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    808c:	687b      	ldr	r3, [r7, #4]
    808e:	885b      	ldrh	r3, [r3, #2]
    8090:	b29b      	uxth	r3, r3
    8092:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8096:	b29a      	uxth	r2, r3
    8098:	687b      	ldr	r3, [r7, #4]
    809a:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    809c:	8a7b      	ldrh	r3, [r7, #18]
    809e:	f003 0301 	and.w	r3, r3, #1
    80a2:	2b00      	cmp	r3, #0
    80a4:	d002      	beq.n	80ac <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    80a6:	f06f 0304 	mvn.w	r3, #4
    80aa:	e0c6      	b.n	823a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    80ac:	f06f 0303 	mvn.w	r3, #3
    80b0:	e0c3      	b.n	823a <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    80b2:	8a7b      	ldrh	r3, [r7, #18]
    80b4:	f003 0304 	and.w	r3, r3, #4
    80b8:	2b00      	cmp	r3, #0
    80ba:	d01f      	beq.n	80fc <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    80bc:	687b      	ldr	r3, [r7, #4]
    80be:	685b      	ldr	r3, [r3, #4]
    80c0:	2b00      	cmp	r3, #0
    80c2:	dd07      	ble.n	80d4 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    80c4:	687b      	ldr	r3, [r7, #4]
    80c6:	885b      	ldrh	r3, [r3, #2]
    80c8:	b29b      	uxth	r3, r3
    80ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    80ce:	b29a      	uxth	r2, r3
    80d0:	687b      	ldr	r3, [r7, #4]
    80d2:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    80d4:	687b      	ldr	r3, [r7, #4]
    80d6:	885b      	ldrh	r3, [r3, #2]
    80d8:	b29b      	uxth	r3, r3
    80da:	b21b      	sxth	r3, r3
    80dc:	2b00      	cmp	r3, #0
    80de:	da02      	bge.n	80e6 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    80e0:	68f8      	ldr	r0, [r7, #12]
    80e2:	4b5b      	ldr	r3, [pc, #364]	; (8250 <_sercom_i2c_sync_analyse_flags+0x210>)
    80e4:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    80e6:	687b      	ldr	r3, [r7, #4]
    80e8:	885b      	ldrh	r3, [r3, #2]
    80ea:	b29b      	uxth	r3, r3
    80ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    80f0:	b29a      	uxth	r2, r3
    80f2:	687b      	ldr	r3, [r7, #4]
    80f4:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    80f6:	f06f 0301 	mvn.w	r3, #1
    80fa:	e09e      	b.n	823a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    80fc:	687b      	ldr	r3, [r7, #4]
    80fe:	885b      	ldrh	r3, [r3, #2]
    8100:	b29b      	uxth	r3, r3
    8102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    8106:	2b00      	cmp	r3, #0
    8108:	d01c      	beq.n	8144 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    810a:	687b      	ldr	r3, [r7, #4]
    810c:	881b      	ldrh	r3, [r3, #0]
    810e:	121b      	asrs	r3, r3, #8
    8110:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    8112:	f003 0406 	and.w	r4, r3, #6
    8116:	68f8      	ldr	r0, [r7, #12]
    8118:	4b4e      	ldr	r3, [pc, #312]	; (8254 <_sercom_i2c_sync_analyse_flags+0x214>)
    811a:	4798      	blx	r3
    811c:	4603      	mov	r3, r0
    811e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    8122:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    8124:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    8128:	4619      	mov	r1, r3
    812a:	68f8      	ldr	r0, [r7, #12]
    812c:	4b4a      	ldr	r3, [pc, #296]	; (8258 <_sercom_i2c_sync_analyse_flags+0x218>)
    812e:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    8130:	687b      	ldr	r3, [r7, #4]
    8132:	885b      	ldrh	r3, [r3, #2]
    8134:	b29b      	uxth	r3, r3
    8136:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    813a:	b29a      	uxth	r2, r3
    813c:	687b      	ldr	r3, [r7, #4]
    813e:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    8140:	2300      	movs	r3, #0
    8142:	e07a      	b.n	823a <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    8144:	687b      	ldr	r3, [r7, #4]
    8146:	685b      	ldr	r3, [r3, #4]
    8148:	2b00      	cmp	r3, #0
    814a:	d111      	bne.n	8170 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    814c:	687b      	ldr	r3, [r7, #4]
    814e:	885b      	ldrh	r3, [r3, #2]
    8150:	b29b      	uxth	r3, r3
    8152:	b21b      	sxth	r3, r3
    8154:	2b00      	cmp	r3, #0
    8156:	da02      	bge.n	815e <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    8158:	68f8      	ldr	r0, [r7, #12]
    815a:	4b3d      	ldr	r3, [pc, #244]	; (8250 <_sercom_i2c_sync_analyse_flags+0x210>)
    815c:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    815e:	687b      	ldr	r3, [r7, #4]
    8160:	885b      	ldrh	r3, [r3, #2]
    8162:	b29b      	uxth	r3, r3
    8164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8168:	b29a      	uxth	r2, r3
    816a:	687b      	ldr	r3, [r7, #4]
    816c:	805a      	strh	r2, [r3, #2]
    816e:	e010      	b.n	8192 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    8170:	687b      	ldr	r3, [r7, #4]
    8172:	689b      	ldr	r3, [r3, #8]
    8174:	781b      	ldrb	r3, [r3, #0]
    8176:	4619      	mov	r1, r3
    8178:	68f8      	ldr	r0, [r7, #12]
    817a:	4b38      	ldr	r3, [pc, #224]	; (825c <_sercom_i2c_sync_analyse_flags+0x21c>)
    817c:	4798      	blx	r3
				msg->buffer++;
    817e:	687b      	ldr	r3, [r7, #4]
    8180:	689b      	ldr	r3, [r3, #8]
    8182:	1c5a      	adds	r2, r3, #1
    8184:	687b      	ldr	r3, [r7, #4]
    8186:	609a      	str	r2, [r3, #8]
				msg->len--;
    8188:	687b      	ldr	r3, [r7, #4]
    818a:	685b      	ldr	r3, [r3, #4]
    818c:	1e5a      	subs	r2, r3, #1
    818e:	687b      	ldr	r3, [r7, #4]
    8190:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    8192:	2300      	movs	r3, #0
    8194:	e051      	b.n	823a <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    8196:	68bb      	ldr	r3, [r7, #8]
    8198:	f003 0302 	and.w	r3, r3, #2
    819c:	2b00      	cmp	r3, #0
    819e:	d04b      	beq.n	8238 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    81a0:	687b      	ldr	r3, [r7, #4]
    81a2:	685b      	ldr	r3, [r3, #4]
    81a4:	2b00      	cmp	r3, #0
    81a6:	d041      	beq.n	822c <_sercom_i2c_sync_analyse_flags+0x1ec>
    81a8:	8a7b      	ldrh	r3, [r7, #18]
    81aa:	f003 0304 	and.w	r3, r3, #4
    81ae:	2b00      	cmp	r3, #0
    81b0:	d13c      	bne.n	822c <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    81b2:	687b      	ldr	r3, [r7, #4]
    81b4:	685b      	ldr	r3, [r3, #4]
    81b6:	1e5a      	subs	r2, r3, #1
    81b8:	687b      	ldr	r3, [r7, #4]
    81ba:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    81bc:	687b      	ldr	r3, [r7, #4]
    81be:	685b      	ldr	r3, [r3, #4]
    81c0:	2b00      	cmp	r3, #0
    81c2:	d102      	bne.n	81ca <_sercom_i2c_sync_analyse_flags+0x18a>
    81c4:	697b      	ldr	r3, [r7, #20]
    81c6:	2b00      	cmp	r3, #0
    81c8:	d006      	beq.n	81d8 <_sercom_i2c_sync_analyse_flags+0x198>
    81ca:	687b      	ldr	r3, [r7, #4]
    81cc:	685b      	ldr	r3, [r3, #4]
    81ce:	2b01      	cmp	r3, #1
    81d0:	d105      	bne.n	81de <_sercom_i2c_sync_analyse_flags+0x19e>
    81d2:	697b      	ldr	r3, [r7, #20]
    81d4:	2b00      	cmp	r3, #0
    81d6:	d002      	beq.n	81de <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    81d8:	68f8      	ldr	r0, [r7, #12]
    81da:	4b21      	ldr	r3, [pc, #132]	; (8260 <_sercom_i2c_sync_analyse_flags+0x220>)
    81dc:	4798      	blx	r3
			}

			if (msg->len == 0) {
    81de:	687b      	ldr	r3, [r7, #4]
    81e0:	685b      	ldr	r3, [r3, #4]
    81e2:	2b00      	cmp	r3, #0
    81e4:	d113      	bne.n	820e <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    81e6:	687b      	ldr	r3, [r7, #4]
    81e8:	885b      	ldrh	r3, [r3, #2]
    81ea:	b29b      	uxth	r3, r3
    81ec:	b21b      	sxth	r3, r3
    81ee:	2b00      	cmp	r3, #0
    81f0:	da05      	bge.n	81fe <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    81f2:	68f8      	ldr	r0, [r7, #12]
    81f4:	4b1b      	ldr	r3, [pc, #108]	; (8264 <_sercom_i2c_sync_analyse_flags+0x224>)
    81f6:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    81f8:	68f8      	ldr	r0, [r7, #12]
    81fa:	4b15      	ldr	r3, [pc, #84]	; (8250 <_sercom_i2c_sync_analyse_flags+0x210>)
    81fc:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    81fe:	687b      	ldr	r3, [r7, #4]
    8200:	885b      	ldrh	r3, [r3, #2]
    8202:	b29b      	uxth	r3, r3
    8204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8208:	b29a      	uxth	r2, r3
    820a:	687b      	ldr	r3, [r7, #4]
    820c:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    820e:	687b      	ldr	r3, [r7, #4]
    8210:	689c      	ldr	r4, [r3, #8]
    8212:	1c62      	adds	r2, r4, #1
    8214:	687b      	ldr	r3, [r7, #4]
    8216:	609a      	str	r2, [r3, #8]
    8218:	68f8      	ldr	r0, [r7, #12]
    821a:	4b13      	ldr	r3, [pc, #76]	; (8268 <_sercom_i2c_sync_analyse_flags+0x228>)
    821c:	4798      	blx	r3
    821e:	4603      	mov	r3, r0
    8220:	b2db      	uxtb	r3, r3
    8222:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    8224:	68f8      	ldr	r0, [r7, #12]
    8226:	4b11      	ldr	r3, [pc, #68]	; (826c <_sercom_i2c_sync_analyse_flags+0x22c>)
    8228:	4798      	blx	r3
    822a:	e005      	b.n	8238 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    822c:	68f8      	ldr	r0, [r7, #12]
    822e:	4b0f      	ldr	r3, [pc, #60]	; (826c <_sercom_i2c_sync_analyse_flags+0x22c>)
    8230:	4798      	blx	r3
			return I2C_NACK;
    8232:	f06f 0301 	mvn.w	r3, #1
    8236:	e000      	b.n	823a <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    8238:	2300      	movs	r3, #0
}
    823a:	4618      	mov	r0, r3
    823c:	371c      	adds	r7, #28
    823e:	46bd      	mov	sp, r7
    8240:	bd90      	pop	{r4, r7, pc}
    8242:	bf00      	nop
    8244:	00007add 	.word	0x00007add
    8248:	00007f15 	.word	0x00007f15
    824c:	000079dd 	.word	0x000079dd
    8250:	00008025 	.word	0x00008025
    8254:	00007df5 	.word	0x00007df5
    8258:	00007dd1 	.word	0x00007dd1
    825c:	00007e31 	.word	0x00007e31
    8260:	00007c8d 	.word	0x00007c8d
    8264:	00007c65 	.word	0x00007c65
    8268:	00007e55 	.word	0x00007e55
    826c:	000079f7 	.word	0x000079f7

00008270 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    8270:	b580      	push	{r7, lr}
    8272:	b082      	sub	sp, #8
    8274:	af00      	add	r7, sp, #0
    8276:	6078      	str	r0, [r7, #4]
    8278:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    827a:	687b      	ldr	r3, [r7, #4]
    827c:	2b00      	cmp	r3, #0
    827e:	bf14      	ite	ne
    8280:	2301      	movne	r3, #1
    8282:	2300      	moveq	r3, #0
    8284:	b2db      	uxtb	r3, r3
    8286:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    828a:	4908      	ldr	r1, [pc, #32]	; (82ac <_i2c_m_sync_init+0x3c>)
    828c:	4618      	mov	r0, r3
    828e:	4b08      	ldr	r3, [pc, #32]	; (82b0 <_i2c_m_sync_init+0x40>)
    8290:	4798      	blx	r3

	i2c_dev->hw = hw;
    8292:	687b      	ldr	r3, [r7, #4]
    8294:	683a      	ldr	r2, [r7, #0]
    8296:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    8298:	687b      	ldr	r3, [r7, #4]
    829a:	6839      	ldr	r1, [r7, #0]
    829c:	4618      	mov	r0, r3
    829e:	4b05      	ldr	r3, [pc, #20]	; (82b4 <_i2c_m_sync_init+0x44>)
    82a0:	4798      	blx	r3
    82a2:	4603      	mov	r3, r0
}
    82a4:	4618      	mov	r0, r3
    82a6:	3708      	adds	r7, #8
    82a8:	46bd      	mov	sp, r7
    82aa:	bd80      	pop	{r7, pc}
    82ac:	0001ae60 	.word	0x0001ae60
    82b0:	00004c81 	.word	0x00004c81
    82b4:	00008689 	.word	0x00008689

000082b8 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    82b8:	b580      	push	{r7, lr}
    82ba:	b082      	sub	sp, #8
    82bc:	af00      	add	r7, sp, #0
    82be:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    82c0:	687b      	ldr	r3, [r7, #4]
    82c2:	2b00      	cmp	r3, #0
    82c4:	bf14      	ite	ne
    82c6:	2301      	movne	r3, #1
    82c8:	2300      	moveq	r3, #0
    82ca:	b2db      	uxtb	r3, r3
    82cc:	f240 5235 	movw	r2, #1333	; 0x535
    82d0:	4906      	ldr	r1, [pc, #24]	; (82ec <_i2c_m_sync_enable+0x34>)
    82d2:	4618      	mov	r0, r3
    82d4:	4b06      	ldr	r3, [pc, #24]	; (82f0 <_i2c_m_sync_enable+0x38>)
    82d6:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    82d8:	687b      	ldr	r3, [r7, #4]
    82da:	691b      	ldr	r3, [r3, #16]
    82dc:	4618      	mov	r0, r3
    82de:	4b05      	ldr	r3, [pc, #20]	; (82f4 <_i2c_m_sync_enable+0x3c>)
    82e0:	4798      	blx	r3
    82e2:	4603      	mov	r3, r0
}
    82e4:	4618      	mov	r0, r3
    82e6:	3708      	adds	r7, #8
    82e8:	46bd      	mov	sp, r7
    82ea:	bd80      	pop	{r7, pc}
    82ec:	0001ae60 	.word	0x0001ae60
    82f0:	00004c81 	.word	0x00004c81
    82f4:	000085fd 	.word	0x000085fd

000082f8 <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    82f8:	b580      	push	{r7, lr}
    82fa:	b084      	sub	sp, #16
    82fc:	af00      	add	r7, sp, #0
    82fe:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    8300:	687b      	ldr	r3, [r7, #4]
    8302:	691b      	ldr	r3, [r3, #16]
    8304:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    8306:	687b      	ldr	r3, [r7, #4]
    8308:	2b00      	cmp	r3, #0
    830a:	bf14      	ite	ne
    830c:	2301      	movne	r3, #1
    830e:	2300      	moveq	r3, #0
    8310:	b2db      	uxtb	r3, r3
    8312:	f240 5243 	movw	r2, #1347	; 0x543
    8316:	490c      	ldr	r1, [pc, #48]	; (8348 <_i2c_m_sync_disable+0x50>)
    8318:	4618      	mov	r0, r3
    831a:	4b0c      	ldr	r3, [pc, #48]	; (834c <_i2c_m_sync_disable+0x54>)
    831c:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    831e:	687b      	ldr	r3, [r7, #4]
    8320:	691b      	ldr	r3, [r3, #16]
    8322:	2b00      	cmp	r3, #0
    8324:	bf14      	ite	ne
    8326:	2301      	movne	r3, #1
    8328:	2300      	moveq	r3, #0
    832a:	b2db      	uxtb	r3, r3
    832c:	f240 5244 	movw	r2, #1348	; 0x544
    8330:	4905      	ldr	r1, [pc, #20]	; (8348 <_i2c_m_sync_disable+0x50>)
    8332:	4618      	mov	r0, r3
    8334:	4b05      	ldr	r3, [pc, #20]	; (834c <_i2c_m_sync_disable+0x54>)
    8336:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    8338:	68f8      	ldr	r0, [r7, #12]
    833a:	4b05      	ldr	r3, [pc, #20]	; (8350 <_i2c_m_sync_disable+0x58>)
    833c:	4798      	blx	r3

	return ERR_NONE;
    833e:	2300      	movs	r3, #0
}
    8340:	4618      	mov	r0, r3
    8342:	3710      	adds	r7, #16
    8344:	46bd      	mov	sp, r7
    8346:	bd80      	pop	{r7, pc}
    8348:	0001ae60 	.word	0x0001ae60
    834c:	00004c81 	.word	0x00004c81
    8350:	00007ab5 	.word	0x00007ab5

00008354 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    8354:	b580      	push	{r7, lr}
    8356:	b084      	sub	sp, #16
    8358:	af00      	add	r7, sp, #0
    835a:	6078      	str	r0, [r7, #4]
    835c:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    835e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8362:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    8364:	687b      	ldr	r3, [r7, #4]
    8366:	691b      	ldr	r3, [r3, #16]
    8368:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    836a:	68b8      	ldr	r0, [r7, #8]
    836c:	4b0f      	ldr	r3, [pc, #60]	; (83ac <_sercom_i2c_sync_wait_bus+0x58>)
    836e:	4798      	blx	r3
    8370:	4603      	mov	r3, r0
    8372:	461a      	mov	r2, r3
    8374:	683b      	ldr	r3, [r7, #0]
    8376:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    8378:	68fb      	ldr	r3, [r7, #12]
    837a:	1e5a      	subs	r2, r3, #1
    837c:	60fa      	str	r2, [r7, #12]
    837e:	2b00      	cmp	r3, #0
    8380:	d102      	bne.n	8388 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    8382:	f06f 0304 	mvn.w	r3, #4
    8386:	e00c      	b.n	83a2 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    8388:	683b      	ldr	r3, [r7, #0]
    838a:	681b      	ldr	r3, [r3, #0]
    838c:	f003 0301 	and.w	r3, r3, #1
    8390:	2b00      	cmp	r3, #0
    8392:	d105      	bne.n	83a0 <_sercom_i2c_sync_wait_bus+0x4c>
    8394:	683b      	ldr	r3, [r7, #0]
    8396:	681b      	ldr	r3, [r3, #0]
    8398:	f003 0302 	and.w	r3, r3, #2
    839c:	2b00      	cmp	r3, #0
    839e:	d0e4      	beq.n	836a <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    83a0:	2300      	movs	r3, #0
}
    83a2:	4618      	mov	r0, r3
    83a4:	3710      	adds	r7, #16
    83a6:	46bd      	mov	sp, r7
    83a8:	bd80      	pop	{r7, pc}
    83aa:	bf00      	nop
    83ac:	00007a11 	.word	0x00007a11

000083b0 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    83b0:	b590      	push	{r4, r7, lr}
    83b2:	b087      	sub	sp, #28
    83b4:	af00      	add	r7, sp, #0
    83b6:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    83b8:	687b      	ldr	r3, [r7, #4]
    83ba:	691b      	ldr	r3, [r3, #16]
    83bc:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    83be:	687b      	ldr	r3, [r7, #4]
    83c0:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    83c2:	6978      	ldr	r0, [r7, #20]
    83c4:	4b39      	ldr	r3, [pc, #228]	; (84ac <_sercom_i2c_sync_send_address+0xfc>)
    83c6:	4798      	blx	r3
    83c8:	4603      	mov	r3, r0
    83ca:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    83cc:	687b      	ldr	r3, [r7, #4]
    83ce:	2b00      	cmp	r3, #0
    83d0:	bf14      	ite	ne
    83d2:	2301      	movne	r3, #1
    83d4:	2300      	moveq	r3, #0
    83d6:	b2db      	uxtb	r3, r3
    83d8:	f240 52a5 	movw	r2, #1445	; 0x5a5
    83dc:	4934      	ldr	r1, [pc, #208]	; (84b0 <_sercom_i2c_sync_send_address+0x100>)
    83de:	4618      	mov	r0, r3
    83e0:	4b34      	ldr	r3, [pc, #208]	; (84b4 <_sercom_i2c_sync_send_address+0x104>)
    83e2:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    83e4:	693b      	ldr	r3, [r7, #16]
    83e6:	685b      	ldr	r3, [r3, #4]
    83e8:	2b01      	cmp	r3, #1
    83ea:	d106      	bne.n	83fa <_sercom_i2c_sync_send_address+0x4a>
    83ec:	68fb      	ldr	r3, [r7, #12]
    83ee:	2b00      	cmp	r3, #0
    83f0:	d003      	beq.n	83fa <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    83f2:	6978      	ldr	r0, [r7, #20]
    83f4:	4b30      	ldr	r3, [pc, #192]	; (84b8 <_sercom_i2c_sync_send_address+0x108>)
    83f6:	4798      	blx	r3
    83f8:	e002      	b.n	8400 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    83fa:	6978      	ldr	r0, [r7, #20]
    83fc:	4b2f      	ldr	r3, [pc, #188]	; (84bc <_sercom_i2c_sync_send_address+0x10c>)
    83fe:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    8400:	693b      	ldr	r3, [r7, #16]
    8402:	881b      	ldrh	r3, [r3, #0]
    8404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    8408:	2b00      	cmp	r3, #0
    840a:	d022      	beq.n	8452 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    840c:	693b      	ldr	r3, [r7, #16]
    840e:	885b      	ldrh	r3, [r3, #2]
    8410:	b29b      	uxth	r3, r3
    8412:	f003 0301 	and.w	r3, r3, #1
    8416:	2b00      	cmp	r3, #0
    8418:	d007      	beq.n	842a <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    841a:	693b      	ldr	r3, [r7, #16]
    841c:	885b      	ldrh	r3, [r3, #2]
    841e:	b29b      	uxth	r3, r3
    8420:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    8424:	b29a      	uxth	r2, r3
    8426:	693b      	ldr	r3, [r7, #16]
    8428:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    842a:	693b      	ldr	r3, [r7, #16]
    842c:	881b      	ldrh	r3, [r3, #0]
    842e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    8430:	f240 74fe 	movw	r4, #2046	; 0x7fe
    8434:	401c      	ands	r4, r3
    8436:	6978      	ldr	r0, [r7, #20]
    8438:	4b21      	ldr	r3, [pc, #132]	; (84c0 <_sercom_i2c_sync_send_address+0x110>)
    843a:	4798      	blx	r3
    843c:	4603      	mov	r3, r0
    843e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    8442:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    8444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8448:	4619      	mov	r1, r3
    844a:	6978      	ldr	r0, [r7, #20]
    844c:	4b1d      	ldr	r3, [pc, #116]	; (84c4 <_sercom_i2c_sync_send_address+0x114>)
    844e:	4798      	blx	r3
    8450:	e01a      	b.n	8488 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    8452:	693b      	ldr	r3, [r7, #16]
    8454:	881b      	ldrh	r3, [r3, #0]
    8456:	005b      	lsls	r3, r3, #1
    8458:	b2db      	uxtb	r3, r3
    845a:	693a      	ldr	r2, [r7, #16]
    845c:	8852      	ldrh	r2, [r2, #2]
    845e:	b292      	uxth	r2, r2
    8460:	f002 0201 	and.w	r2, r2, #1
    8464:	2a00      	cmp	r2, #0
    8466:	bf14      	ite	ne
    8468:	2201      	movne	r2, #1
    846a:	2200      	moveq	r2, #0
    846c:	b2d2      	uxtb	r2, r2
    846e:	4313      	orrs	r3, r2
    8470:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    8472:	6978      	ldr	r0, [r7, #20]
    8474:	4b12      	ldr	r3, [pc, #72]	; (84c0 <_sercom_i2c_sync_send_address+0x110>)
    8476:	4798      	blx	r3
    8478:	4603      	mov	r3, r0
    847a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    847e:	4323      	orrs	r3, r4
    8480:	4619      	mov	r1, r3
    8482:	6978      	ldr	r0, [r7, #20]
    8484:	4b0f      	ldr	r3, [pc, #60]	; (84c4 <_sercom_i2c_sync_send_address+0x114>)
    8486:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    8488:	f107 0308 	add.w	r3, r7, #8
    848c:	4619      	mov	r1, r3
    848e:	6878      	ldr	r0, [r7, #4]
    8490:	4b0d      	ldr	r3, [pc, #52]	; (84c8 <_sercom_i2c_sync_send_address+0x118>)
    8492:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    8494:	68bb      	ldr	r3, [r7, #8]
    8496:	693a      	ldr	r2, [r7, #16]
    8498:	4619      	mov	r1, r3
    849a:	6978      	ldr	r0, [r7, #20]
    849c:	4b0b      	ldr	r3, [pc, #44]	; (84cc <_sercom_i2c_sync_send_address+0x11c>)
    849e:	4798      	blx	r3
    84a0:	4603      	mov	r3, r0
}
    84a2:	4618      	mov	r0, r3
    84a4:	371c      	adds	r7, #28
    84a6:	46bd      	mov	sp, r7
    84a8:	bd90      	pop	{r4, r7, pc}
    84aa:	bf00      	nop
    84ac:	00007add 	.word	0x00007add
    84b0:	0001ae60 	.word	0x0001ae60
    84b4:	00004c81 	.word	0x00004c81
    84b8:	00007c8d 	.word	0x00007c8d
    84bc:	00007cb5 	.word	0x00007cb5
    84c0:	00007df5 	.word	0x00007df5
    84c4:	00007dd1 	.word	0x00007dd1
    84c8:	00008355 	.word	0x00008355
    84cc:	00008041 	.word	0x00008041

000084d0 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    84d0:	b580      	push	{r7, lr}
    84d2:	b086      	sub	sp, #24
    84d4:	af00      	add	r7, sp, #0
    84d6:	6078      	str	r0, [r7, #4]
    84d8:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    84da:	687b      	ldr	r3, [r7, #4]
    84dc:	691b      	ldr	r3, [r3, #16]
    84de:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    84e0:	687b      	ldr	r3, [r7, #4]
    84e2:	2b00      	cmp	r3, #0
    84e4:	bf14      	ite	ne
    84e6:	2301      	movne	r3, #1
    84e8:	2300      	moveq	r3, #0
    84ea:	b2db      	uxtb	r3, r3
    84ec:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    84f0:	493b      	ldr	r1, [pc, #236]	; (85e0 <_i2c_m_sync_transfer+0x110>)
    84f2:	4618      	mov	r0, r3
    84f4:	4b3b      	ldr	r3, [pc, #236]	; (85e4 <_i2c_m_sync_transfer+0x114>)
    84f6:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    84f8:	687b      	ldr	r3, [r7, #4]
    84fa:	691b      	ldr	r3, [r3, #16]
    84fc:	2b00      	cmp	r3, #0
    84fe:	bf14      	ite	ne
    8500:	2301      	movne	r3, #1
    8502:	2300      	moveq	r3, #0
    8504:	b2db      	uxtb	r3, r3
    8506:	f240 52d1 	movw	r2, #1489	; 0x5d1
    850a:	4935      	ldr	r1, [pc, #212]	; (85e0 <_i2c_m_sync_transfer+0x110>)
    850c:	4618      	mov	r0, r3
    850e:	4b35      	ldr	r3, [pc, #212]	; (85e4 <_i2c_m_sync_transfer+0x114>)
    8510:	4798      	blx	r3
	ASSERT(msg);
    8512:	683b      	ldr	r3, [r7, #0]
    8514:	2b00      	cmp	r3, #0
    8516:	bf14      	ite	ne
    8518:	2301      	movne	r3, #1
    851a:	2300      	moveq	r3, #0
    851c:	b2db      	uxtb	r3, r3
    851e:	f240 52d2 	movw	r2, #1490	; 0x5d2
    8522:	492f      	ldr	r1, [pc, #188]	; (85e0 <_i2c_m_sync_transfer+0x110>)
    8524:	4618      	mov	r0, r3
    8526:	4b2f      	ldr	r3, [pc, #188]	; (85e4 <_i2c_m_sync_transfer+0x114>)
    8528:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    852a:	687b      	ldr	r3, [r7, #4]
    852c:	885b      	ldrh	r3, [r3, #2]
    852e:	b29b      	uxth	r3, r3
    8530:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8534:	2b00      	cmp	r3, #0
    8536:	d002      	beq.n	853e <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    8538:	f06f 0305 	mvn.w	r3, #5
    853c:	e04c      	b.n	85d8 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    853e:	683b      	ldr	r3, [r7, #0]
    8540:	885b      	ldrh	r3, [r3, #2]
    8542:	b29b      	uxth	r3, r3
    8544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8548:	b29a      	uxth	r2, r3
    854a:	683b      	ldr	r3, [r7, #0]
    854c:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    854e:	687b      	ldr	r3, [r7, #4]
    8550:	683a      	ldr	r2, [r7, #0]
    8552:	ca07      	ldmia	r2, {r0, r1, r2}
    8554:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    8558:	6938      	ldr	r0, [r7, #16]
    855a:	4b23      	ldr	r3, [pc, #140]	; (85e8 <_i2c_m_sync_transfer+0x118>)
    855c:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    855e:	6878      	ldr	r0, [r7, #4]
    8560:	4b22      	ldr	r3, [pc, #136]	; (85ec <_i2c_m_sync_transfer+0x11c>)
    8562:	4798      	blx	r3
    8564:	6178      	str	r0, [r7, #20]

	if (ret) {
    8566:	697b      	ldr	r3, [r7, #20]
    8568:	2b00      	cmp	r3, #0
    856a:	d02d      	beq.n	85c8 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    856c:	687b      	ldr	r3, [r7, #4]
    856e:	885b      	ldrh	r3, [r3, #2]
    8570:	b29b      	uxth	r3, r3
    8572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8576:	b29a      	uxth	r2, r3
    8578:	687b      	ldr	r3, [r7, #4]
    857a:	805a      	strh	r2, [r3, #2]

		return ret;
    857c:	697b      	ldr	r3, [r7, #20]
    857e:	e02b      	b.n	85d8 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    8580:	f107 030c 	add.w	r3, r7, #12
    8584:	4619      	mov	r1, r3
    8586:	6878      	ldr	r0, [r7, #4]
    8588:	4b19      	ldr	r3, [pc, #100]	; (85f0 <_i2c_m_sync_transfer+0x120>)
    858a:	4798      	blx	r3
    858c:	6178      	str	r0, [r7, #20]

		if (ret) {
    858e:	697b      	ldr	r3, [r7, #20]
    8590:	2b00      	cmp	r3, #0
    8592:	d012      	beq.n	85ba <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    8594:	683b      	ldr	r3, [r7, #0]
    8596:	885b      	ldrh	r3, [r3, #2]
    8598:	b29b      	uxth	r3, r3
    859a:	b21b      	sxth	r3, r3
    859c:	2b00      	cmp	r3, #0
    859e:	da02      	bge.n	85a6 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    85a0:	6938      	ldr	r0, [r7, #16]
    85a2:	4b14      	ldr	r3, [pc, #80]	; (85f4 <_i2c_m_sync_transfer+0x124>)
    85a4:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    85a6:	687b      	ldr	r3, [r7, #4]
    85a8:	885b      	ldrh	r3, [r3, #2]
    85aa:	b29b      	uxth	r3, r3
    85ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    85b0:	b29a      	uxth	r2, r3
    85b2:	687b      	ldr	r3, [r7, #4]
    85b4:	805a      	strh	r2, [r3, #2]

			return ret;
    85b6:	697b      	ldr	r3, [r7, #20]
    85b8:	e00e      	b.n	85d8 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    85ba:	68fb      	ldr	r3, [r7, #12]
    85bc:	687a      	ldr	r2, [r7, #4]
    85be:	4619      	mov	r1, r3
    85c0:	6938      	ldr	r0, [r7, #16]
    85c2:	4b0d      	ldr	r3, [pc, #52]	; (85f8 <_i2c_m_sync_transfer+0x128>)
    85c4:	4798      	blx	r3
    85c6:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    85c8:	687b      	ldr	r3, [r7, #4]
    85ca:	885b      	ldrh	r3, [r3, #2]
    85cc:	b29b      	uxth	r3, r3
    85ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
    85d2:	2b00      	cmp	r3, #0
    85d4:	d1d4      	bne.n	8580 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    85d6:	697b      	ldr	r3, [r7, #20]
}
    85d8:	4618      	mov	r0, r3
    85da:	3718      	adds	r7, #24
    85dc:	46bd      	mov	sp, r7
    85de:	bd80      	pop	{r7, pc}
    85e0:	0001ae60 	.word	0x0001ae60
    85e4:	00004c81 	.word	0x00004c81
    85e8:	00007c3d 	.word	0x00007c3d
    85ec:	000083b1 	.word	0x000083b1
    85f0:	00008355 	.word	0x00008355
    85f4:	00008025 	.word	0x00008025
    85f8:	00008041 	.word	0x00008041

000085fc <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    85fc:	b580      	push	{r7, lr}
    85fe:	b084      	sub	sp, #16
    8600:	af00      	add	r7, sp, #0
    8602:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    8604:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8608:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    860a:	2304      	movs	r3, #4
    860c:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    860e:	687b      	ldr	r3, [r7, #4]
    8610:	2b00      	cmp	r3, #0
    8612:	bf14      	ite	ne
    8614:	2301      	movne	r3, #1
    8616:	2300      	moveq	r3, #0
    8618:	b2db      	uxtb	r3, r3
    861a:	f240 6205 	movw	r2, #1541	; 0x605
    861e:	4915      	ldr	r1, [pc, #84]	; (8674 <_i2c_m_enable_implementation+0x78>)
    8620:	4618      	mov	r0, r3
    8622:	4b15      	ldr	r3, [pc, #84]	; (8678 <_i2c_m_enable_implementation+0x7c>)
    8624:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    8626:	6878      	ldr	r0, [r7, #4]
    8628:	4b14      	ldr	r3, [pc, #80]	; (867c <_i2c_m_enable_implementation+0x80>)
    862a:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    862c:	e016      	b.n	865c <_i2c_m_enable_implementation+0x60>
		timeout--;
    862e:	68fb      	ldr	r3, [r7, #12]
    8630:	3b01      	subs	r3, #1
    8632:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    8634:	68fb      	ldr	r3, [r7, #12]
    8636:	2b00      	cmp	r3, #0
    8638:	dc10      	bgt.n	865c <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    863a:	68bb      	ldr	r3, [r7, #8]
    863c:	3b01      	subs	r3, #1
    863e:	60bb      	str	r3, [r7, #8]
    8640:	68bb      	ldr	r3, [r7, #8]
    8642:	2b00      	cmp	r3, #0
    8644:	d007      	beq.n	8656 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    8646:	f64f 73ff 	movw	r3, #65535	; 0xffff
    864a:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    864c:	2110      	movs	r1, #16
    864e:	6878      	ldr	r0, [r7, #4]
    8650:	4b0b      	ldr	r3, [pc, #44]	; (8680 <_i2c_m_enable_implementation+0x84>)
    8652:	4798      	blx	r3
    8654:	e002      	b.n	865c <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    8656:	f06f 0305 	mvn.w	r3, #5
    865a:	e006      	b.n	866a <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    865c:	6878      	ldr	r0, [r7, #4]
    865e:	4b09      	ldr	r3, [pc, #36]	; (8684 <_i2c_m_enable_implementation+0x88>)
    8660:	4798      	blx	r3
    8662:	4603      	mov	r3, r0
    8664:	2b01      	cmp	r3, #1
    8666:	d1e2      	bne.n	862e <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    8668:	2300      	movs	r3, #0
}
    866a:	4618      	mov	r0, r3
    866c:	3710      	adds	r7, #16
    866e:	46bd      	mov	sp, r7
    8670:	bd80      	pop	{r7, pc}
    8672:	bf00      	nop
    8674:	0001ae60 	.word	0x0001ae60
    8678:	00004c81 	.word	0x00004c81
    867c:	00007a8d 	.word	0x00007a8d
    8680:	00007f39 	.word	0x00007f39
    8684:	00007ee9 	.word	0x00007ee9

00008688 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    8688:	b580      	push	{r7, lr}
    868a:	b084      	sub	sp, #16
    868c:	af00      	add	r7, sp, #0
    868e:	6078      	str	r0, [r7, #4]
    8690:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    8692:	6838      	ldr	r0, [r7, #0]
    8694:	4b42      	ldr	r3, [pc, #264]	; (87a0 <_i2c_m_sync_init_impl+0x118>)
    8696:	4798      	blx	r3
    8698:	4603      	mov	r3, r0
    869a:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    869c:	2101      	movs	r1, #1
    869e:	6838      	ldr	r0, [r7, #0]
    86a0:	4b40      	ldr	r3, [pc, #256]	; (87a4 <_i2c_m_sync_init_impl+0x11c>)
    86a2:	4798      	blx	r3
    86a4:	4603      	mov	r3, r0
    86a6:	f083 0301 	eor.w	r3, r3, #1
    86aa:	b2db      	uxtb	r3, r3
    86ac:	2b00      	cmp	r3, #0
    86ae:	d020      	beq.n	86f2 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    86b0:	7bfa      	ldrb	r2, [r7, #15]
    86b2:	493d      	ldr	r1, [pc, #244]	; (87a8 <_i2c_m_sync_init_impl+0x120>)
    86b4:	4613      	mov	r3, r2
    86b6:	005b      	lsls	r3, r3, #1
    86b8:	4413      	add	r3, r2
    86ba:	00db      	lsls	r3, r3, #3
    86bc:	440b      	add	r3, r1
    86be:	3304      	adds	r3, #4
    86c0:	681b      	ldr	r3, [r3, #0]
    86c2:	f003 031c 	and.w	r3, r3, #28
    86c6:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    86c8:	2102      	movs	r1, #2
    86ca:	6838      	ldr	r0, [r7, #0]
    86cc:	4b37      	ldr	r3, [pc, #220]	; (87ac <_i2c_m_sync_init_impl+0x124>)
    86ce:	4798      	blx	r3
    86d0:	4603      	mov	r3, r0
    86d2:	2b00      	cmp	r3, #0
    86d4:	d006      	beq.n	86e4 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    86d6:	6838      	ldr	r0, [r7, #0]
    86d8:	4b35      	ldr	r3, [pc, #212]	; (87b0 <_i2c_m_sync_init_impl+0x128>)
    86da:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    86dc:	2102      	movs	r1, #2
    86de:	6838      	ldr	r0, [r7, #0]
    86e0:	4b34      	ldr	r3, [pc, #208]	; (87b4 <_i2c_m_sync_init_impl+0x12c>)
    86e2:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    86e4:	68bb      	ldr	r3, [r7, #8]
    86e6:	f043 0301 	orr.w	r3, r3, #1
    86ea:	4619      	mov	r1, r3
    86ec:	6838      	ldr	r0, [r7, #0]
    86ee:	4b32      	ldr	r3, [pc, #200]	; (87b8 <_i2c_m_sync_init_impl+0x130>)
    86f0:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    86f2:	2101      	movs	r1, #1
    86f4:	6838      	ldr	r0, [r7, #0]
    86f6:	4b2f      	ldr	r3, [pc, #188]	; (87b4 <_i2c_m_sync_init_impl+0x12c>)
    86f8:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    86fa:	7bfa      	ldrb	r2, [r7, #15]
    86fc:	492a      	ldr	r1, [pc, #168]	; (87a8 <_i2c_m_sync_init_impl+0x120>)
    86fe:	4613      	mov	r3, r2
    8700:	005b      	lsls	r3, r3, #1
    8702:	4413      	add	r3, r2
    8704:	00db      	lsls	r3, r3, #3
    8706:	440b      	add	r3, r1
    8708:	3304      	adds	r3, #4
    870a:	681b      	ldr	r3, [r3, #0]
    870c:	4619      	mov	r1, r3
    870e:	6838      	ldr	r0, [r7, #0]
    8710:	4b29      	ldr	r3, [pc, #164]	; (87b8 <_i2c_m_sync_init_impl+0x130>)
    8712:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    8714:	7bfa      	ldrb	r2, [r7, #15]
    8716:	4924      	ldr	r1, [pc, #144]	; (87a8 <_i2c_m_sync_init_impl+0x120>)
    8718:	4613      	mov	r3, r2
    871a:	005b      	lsls	r3, r3, #1
    871c:	4413      	add	r3, r2
    871e:	00db      	lsls	r3, r3, #3
    8720:	440b      	add	r3, r1
    8722:	3308      	adds	r3, #8
    8724:	681b      	ldr	r3, [r3, #0]
    8726:	4619      	mov	r1, r3
    8728:	6838      	ldr	r0, [r7, #0]
    872a:	4b24      	ldr	r3, [pc, #144]	; (87bc <_i2c_m_sync_init_impl+0x134>)
    872c:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    872e:	7bfa      	ldrb	r2, [r7, #15]
    8730:	491d      	ldr	r1, [pc, #116]	; (87a8 <_i2c_m_sync_init_impl+0x120>)
    8732:	4613      	mov	r3, r2
    8734:	005b      	lsls	r3, r3, #1
    8736:	4413      	add	r3, r2
    8738:	00db      	lsls	r3, r3, #3
    873a:	440b      	add	r3, r1
    873c:	330c      	adds	r3, #12
    873e:	681b      	ldr	r3, [r3, #0]
    8740:	4619      	mov	r1, r3
    8742:	6838      	ldr	r0, [r7, #0]
    8744:	4b1e      	ldr	r3, [pc, #120]	; (87c0 <_i2c_m_sync_init_impl+0x138>)
    8746:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    8748:	7bfa      	ldrb	r2, [r7, #15]
    874a:	4917      	ldr	r1, [pc, #92]	; (87a8 <_i2c_m_sync_init_impl+0x120>)
    874c:	4613      	mov	r3, r2
    874e:	005b      	lsls	r3, r3, #1
    8750:	4413      	add	r3, r2
    8752:	00db      	lsls	r3, r3, #3
    8754:	440b      	add	r3, r1
    8756:	3304      	adds	r3, #4
    8758:	681b      	ldr	r3, [r3, #0]
    875a:	0e1b      	lsrs	r3, r3, #24
    875c:	b29b      	uxth	r3, r3
    875e:	f003 0303 	and.w	r3, r3, #3
    8762:	b29a      	uxth	r2, r3
    8764:	687b      	ldr	r3, [r7, #4]
    8766:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    8768:	687b      	ldr	r3, [r7, #4]
    876a:	899b      	ldrh	r3, [r3, #12]
    876c:	2b01      	cmp	r3, #1
    876e:	bf8c      	ite	hi
    8770:	2301      	movhi	r3, #1
    8772:	2300      	movls	r3, #0
    8774:	b2db      	uxtb	r3, r3
    8776:	4619      	mov	r1, r3
    8778:	6838      	ldr	r0, [r7, #0]
    877a:	4b12      	ldr	r3, [pc, #72]	; (87c4 <_i2c_m_sync_init_impl+0x13c>)
    877c:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    877e:	7bfa      	ldrb	r2, [r7, #15]
    8780:	4909      	ldr	r1, [pc, #36]	; (87a8 <_i2c_m_sync_init_impl+0x120>)
    8782:	4613      	mov	r3, r2
    8784:	005b      	lsls	r3, r3, #1
    8786:	4413      	add	r3, r2
    8788:	00db      	lsls	r3, r3, #3
    878a:	440b      	add	r3, r1
    878c:	3312      	adds	r3, #18
    878e:	881a      	ldrh	r2, [r3, #0]
    8790:	687b      	ldr	r3, [r7, #4]
    8792:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    8794:	2300      	movs	r3, #0
}
    8796:	4618      	mov	r0, r3
    8798:	3710      	adds	r7, #16
    879a:	46bd      	mov	sp, r7
    879c:	bd80      	pop	{r7, pc}
    879e:	bf00      	nop
    87a0:	00007fbd 	.word	0x00007fbd
    87a4:	00007969 	.word	0x00007969
    87a8:	20000018 	.word	0x20000018
    87ac:	00007b0d 	.word	0x00007b0d
    87b0:	00007ab5 	.word	0x00007ab5
    87b4:	00007945 	.word	0x00007945
    87b8:	00007b3d 	.word	0x00007b3d
    87bc:	00007d0d 	.word	0x00007d0d
    87c0:	00007d55 	.word	0x00007d55
    87c4:	00007d91 	.word	0x00007d91

000087c8 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    87c8:	b580      	push	{r7, lr}
    87ca:	b082      	sub	sp, #8
    87cc:	af00      	add	r7, sp, #0
    87ce:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    87d0:	2101      	movs	r1, #1
    87d2:	6878      	ldr	r0, [r7, #4]
    87d4:	4b07      	ldr	r3, [pc, #28]	; (87f4 <_spi_sync_enable+0x2c>)
    87d6:	4798      	blx	r3
    87d8:	4603      	mov	r3, r0
    87da:	2b00      	cmp	r3, #0
    87dc:	d002      	beq.n	87e4 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    87de:	f06f 0303 	mvn.w	r3, #3
    87e2:	e003      	b.n	87ec <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    87e4:	6878      	ldr	r0, [r7, #4]
    87e6:	4b04      	ldr	r3, [pc, #16]	; (87f8 <_spi_sync_enable+0x30>)
    87e8:	4798      	blx	r3

	return ERR_NONE;
    87ea:	2300      	movs	r3, #0
}
    87ec:	4618      	mov	r0, r3
    87ee:	3708      	adds	r7, #8
    87f0:	46bd      	mov	sp, r7
    87f2:	bd80      	pop	{r7, pc}
    87f4:	000079b5 	.word	0x000079b5
    87f8:	00007b61 	.word	0x00007b61

000087fc <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    87fc:	b580      	push	{r7, lr}
    87fe:	b082      	sub	sp, #8
    8800:	af00      	add	r7, sp, #0
    8802:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8804:	2101      	movs	r1, #1
    8806:	6878      	ldr	r0, [r7, #4]
    8808:	4b07      	ldr	r3, [pc, #28]	; (8828 <_spi_sync_disable+0x2c>)
    880a:	4798      	blx	r3
    880c:	4603      	mov	r3, r0
    880e:	2b00      	cmp	r3, #0
    8810:	d002      	beq.n	8818 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    8812:	f06f 0303 	mvn.w	r3, #3
    8816:	e003      	b.n	8820 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    8818:	6878      	ldr	r0, [r7, #4]
    881a:	4b04      	ldr	r3, [pc, #16]	; (882c <_spi_sync_disable+0x30>)
    881c:	4798      	blx	r3

	return ERR_NONE;
    881e:	2300      	movs	r3, #0
}
    8820:	4618      	mov	r0, r3
    8822:	3708      	adds	r7, #8
    8824:	46bd      	mov	sp, r7
    8826:	bd80      	pop	{r7, pc}
    8828:	000079b5 	.word	0x000079b5
    882c:	00007bc1 	.word	0x00007bc1

00008830 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    8830:	b580      	push	{r7, lr}
    8832:	b082      	sub	sp, #8
    8834:	af00      	add	r7, sp, #0
    8836:	6078      	str	r0, [r7, #4]
    8838:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    883a:	687b      	ldr	r3, [r7, #4]
    883c:	2b00      	cmp	r3, #0
    883e:	d004      	beq.n	884a <_spi_load_regs_master+0x1a>
    8840:	683b      	ldr	r3, [r7, #0]
    8842:	2b00      	cmp	r3, #0
    8844:	d001      	beq.n	884a <_spi_load_regs_master+0x1a>
    8846:	2301      	movs	r3, #1
    8848:	e000      	b.n	884c <_spi_load_regs_master+0x1c>
    884a:	2300      	movs	r3, #0
    884c:	f003 0301 	and.w	r3, r3, #1
    8850:	b2db      	uxtb	r3, r3
    8852:	f640 1209 	movw	r2, #2313	; 0x909
    8856:	4915      	ldr	r1, [pc, #84]	; (88ac <_spi_load_regs_master+0x7c>)
    8858:	4618      	mov	r0, r3
    885a:	4b15      	ldr	r3, [pc, #84]	; (88b0 <_spi_load_regs_master+0x80>)
    885c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    885e:	683b      	ldr	r3, [r7, #0]
    8860:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    8862:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    8866:	f023 0301 	bic.w	r3, r3, #1
    886a:	4619      	mov	r1, r3
    886c:	6878      	ldr	r0, [r7, #4]
    886e:	4b11      	ldr	r3, [pc, #68]	; (88b4 <_spi_load_regs_master+0x84>)
    8870:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    8872:	683b      	ldr	r3, [r7, #0]
    8874:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    8876:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    887a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    887e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8882:	4619      	mov	r1, r3
    8884:	6878      	ldr	r0, [r7, #4]
    8886:	4b0c      	ldr	r3, [pc, #48]	; (88b8 <_spi_load_regs_master+0x88>)
    8888:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    888a:	683b      	ldr	r3, [r7, #0]
    888c:	7b1b      	ldrb	r3, [r3, #12]
    888e:	4619      	mov	r1, r3
    8890:	6878      	ldr	r0, [r7, #4]
    8892:	4b0a      	ldr	r3, [pc, #40]	; (88bc <_spi_load_regs_master+0x8c>)
    8894:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    8896:	683b      	ldr	r3, [r7, #0]
    8898:	7b5b      	ldrb	r3, [r3, #13]
    889a:	4619      	mov	r1, r3
    889c:	6878      	ldr	r0, [r7, #4]
    889e:	4b08      	ldr	r3, [pc, #32]	; (88c0 <_spi_load_regs_master+0x90>)
    88a0:	4798      	blx	r3
}
    88a2:	bf00      	nop
    88a4:	3708      	adds	r7, #8
    88a6:	46bd      	mov	sp, r7
    88a8:	bd80      	pop	{r7, pc}
    88aa:	bf00      	nop
    88ac:	0001ae60 	.word	0x0001ae60
    88b0:	00004c81 	.word	0x00004c81
    88b4:	00007c19 	.word	0x00007c19
    88b8:	00007d31 	.word	0x00007d31
    88bc:	00007d71 	.word	0x00007d71
    88c0:	00007ea9 	.word	0x00007ea9

000088c4 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    88c4:	b580      	push	{r7, lr}
    88c6:	b082      	sub	sp, #8
    88c8:	af00      	add	r7, sp, #0
    88ca:	6078      	str	r0, [r7, #4]
    88cc:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    88ce:	687b      	ldr	r3, [r7, #4]
    88d0:	2b00      	cmp	r3, #0
    88d2:	d004      	beq.n	88de <_spi_load_regs_slave+0x1a>
    88d4:	683b      	ldr	r3, [r7, #0]
    88d6:	2b00      	cmp	r3, #0
    88d8:	d001      	beq.n	88de <_spi_load_regs_slave+0x1a>
    88da:	2301      	movs	r3, #1
    88dc:	e000      	b.n	88e0 <_spi_load_regs_slave+0x1c>
    88de:	2300      	movs	r3, #0
    88e0:	f003 0301 	and.w	r3, r3, #1
    88e4:	b2db      	uxtb	r3, r3
    88e6:	f640 121d 	movw	r2, #2333	; 0x91d
    88ea:	491a      	ldr	r1, [pc, #104]	; (8954 <_spi_load_regs_slave+0x90>)
    88ec:	4618      	mov	r0, r3
    88ee:	4b1a      	ldr	r3, [pc, #104]	; (8958 <_spi_load_regs_slave+0x94>)
    88f0:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    88f2:	683b      	ldr	r3, [r7, #0]
    88f4:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    88f6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    88fa:	f023 0301 	bic.w	r3, r3, #1
    88fe:	4619      	mov	r1, r3
    8900:	6878      	ldr	r0, [r7, #4]
    8902:	4b16      	ldr	r3, [pc, #88]	; (895c <_spi_load_regs_slave+0x98>)
    8904:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    8906:	683b      	ldr	r3, [r7, #0]
    8908:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    890a:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    890e:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    8912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8916:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    891a:	4619      	mov	r1, r3
    891c:	6878      	ldr	r0, [r7, #4]
    891e:	4b10      	ldr	r3, [pc, #64]	; (8960 <_spi_load_regs_slave+0x9c>)
    8920:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    8922:	683b      	ldr	r3, [r7, #0]
    8924:	689b      	ldr	r3, [r3, #8]
    8926:	4619      	mov	r1, r3
    8928:	6878      	ldr	r0, [r7, #4]
    892a:	4b0e      	ldr	r3, [pc, #56]	; (8964 <_spi_load_regs_slave+0xa0>)
    892c:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    892e:	683b      	ldr	r3, [r7, #0]
    8930:	7b5b      	ldrb	r3, [r3, #13]
    8932:	4619      	mov	r1, r3
    8934:	6878      	ldr	r0, [r7, #4]
    8936:	4b0c      	ldr	r3, [pc, #48]	; (8968 <_spi_load_regs_slave+0xa4>)
    8938:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    893a:	bf00      	nop
    893c:	f04f 31ff 	mov.w	r1, #4294967295
    8940:	6878      	ldr	r0, [r7, #4]
    8942:	4b0a      	ldr	r3, [pc, #40]	; (896c <_spi_load_regs_slave+0xa8>)
    8944:	4798      	blx	r3
    8946:	4603      	mov	r3, r0
    8948:	2b00      	cmp	r3, #0
    894a:	d1f7      	bne.n	893c <_spi_load_regs_slave+0x78>
		;
}
    894c:	bf00      	nop
    894e:	3708      	adds	r7, #8
    8950:	46bd      	mov	sp, r7
    8952:	bd80      	pop	{r7, pc}
    8954:	0001ae60 	.word	0x0001ae60
    8958:	00004c81 	.word	0x00004c81
    895c:	00007c19 	.word	0x00007c19
    8960:	00007d31 	.word	0x00007d31
    8964:	00007e15 	.word	0x00007e15
    8968:	00007ea9 	.word	0x00007ea9
    896c:	000079b5 	.word	0x000079b5

00008970 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    8970:	b580      	push	{r7, lr}
    8972:	b084      	sub	sp, #16
    8974:	af00      	add	r7, sp, #0
    8976:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    8978:	687b      	ldr	r3, [r7, #4]
    897a:	4618      	mov	r0, r3
    897c:	4b11      	ldr	r3, [pc, #68]	; (89c4 <_spi_get_regs+0x54>)
    897e:	4798      	blx	r3
    8980:	4603      	mov	r3, r0
    8982:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    8984:	2300      	movs	r3, #0
    8986:	73fb      	strb	r3, [r7, #15]
    8988:	e014      	b.n	89b4 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    898a:	7bfa      	ldrb	r2, [r7, #15]
    898c:	490e      	ldr	r1, [pc, #56]	; (89c8 <_spi_get_regs+0x58>)
    898e:	4613      	mov	r3, r2
    8990:	011b      	lsls	r3, r3, #4
    8992:	4413      	add	r3, r2
    8994:	440b      	add	r3, r1
    8996:	3310      	adds	r3, #16
    8998:	781b      	ldrb	r3, [r3, #0]
    899a:	7bba      	ldrb	r2, [r7, #14]
    899c:	429a      	cmp	r2, r3
    899e:	d106      	bne.n	89ae <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    89a0:	7bfa      	ldrb	r2, [r7, #15]
    89a2:	4613      	mov	r3, r2
    89a4:	011b      	lsls	r3, r3, #4
    89a6:	4413      	add	r3, r2
    89a8:	4a07      	ldr	r2, [pc, #28]	; (89c8 <_spi_get_regs+0x58>)
    89aa:	4413      	add	r3, r2
    89ac:	e006      	b.n	89bc <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    89ae:	7bfb      	ldrb	r3, [r7, #15]
    89b0:	3301      	adds	r3, #1
    89b2:	73fb      	strb	r3, [r7, #15]
    89b4:	7bfb      	ldrb	r3, [r7, #15]
    89b6:	2b01      	cmp	r3, #1
    89b8:	d9e7      	bls.n	898a <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    89ba:	2300      	movs	r3, #0
}
    89bc:	4618      	mov	r0, r3
    89be:	3710      	adds	r7, #16
    89c0:	46bd      	mov	sp, r7
    89c2:	bd80      	pop	{r7, pc}
    89c4:	00007f61 	.word	0x00007f61
    89c8:	0001ae9c 	.word	0x0001ae9c

000089cc <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    89cc:	b580      	push	{r7, lr}
    89ce:	b084      	sub	sp, #16
    89d0:	af00      	add	r7, sp, #0
    89d2:	6078      	str	r0, [r7, #4]
    89d4:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    89d6:	683b      	ldr	r3, [r7, #0]
    89d8:	4618      	mov	r0, r3
    89da:	4b35      	ldr	r3, [pc, #212]	; (8ab0 <_spi_m_sync_init+0xe4>)
    89dc:	4798      	blx	r3
    89de:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    89e0:	687b      	ldr	r3, [r7, #4]
    89e2:	2b00      	cmp	r3, #0
    89e4:	d004      	beq.n	89f0 <_spi_m_sync_init+0x24>
    89e6:	683b      	ldr	r3, [r7, #0]
    89e8:	2b00      	cmp	r3, #0
    89ea:	d001      	beq.n	89f0 <_spi_m_sync_init+0x24>
    89ec:	2301      	movs	r3, #1
    89ee:	e000      	b.n	89f2 <_spi_m_sync_init+0x26>
    89f0:	2300      	movs	r3, #0
    89f2:	f003 0301 	and.w	r3, r3, #1
    89f6:	b2db      	uxtb	r3, r3
    89f8:	f640 123f 	movw	r2, #2367	; 0x93f
    89fc:	492d      	ldr	r1, [pc, #180]	; (8ab4 <_spi_m_sync_init+0xe8>)
    89fe:	4618      	mov	r0, r3
    8a00:	4b2d      	ldr	r3, [pc, #180]	; (8ab8 <_spi_m_sync_init+0xec>)
    8a02:	4798      	blx	r3

	if (regs == NULL) {
    8a04:	68fb      	ldr	r3, [r7, #12]
    8a06:	2b00      	cmp	r3, #0
    8a08:	d102      	bne.n	8a10 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    8a0a:	f06f 030c 	mvn.w	r3, #12
    8a0e:	e04a      	b.n	8aa6 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8a10:	2101      	movs	r1, #1
    8a12:	6838      	ldr	r0, [r7, #0]
    8a14:	4b29      	ldr	r3, [pc, #164]	; (8abc <_spi_m_sync_init+0xf0>)
    8a16:	4798      	blx	r3
    8a18:	4603      	mov	r3, r0
    8a1a:	f083 0301 	eor.w	r3, r3, #1
    8a1e:	b2db      	uxtb	r3, r3
    8a20:	2b00      	cmp	r3, #0
    8a22:	d019      	beq.n	8a58 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    8a24:	68fb      	ldr	r3, [r7, #12]
    8a26:	681b      	ldr	r3, [r3, #0]
    8a28:	f003 031c 	and.w	r3, r3, #28
    8a2c:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    8a2e:	2102      	movs	r1, #2
    8a30:	6838      	ldr	r0, [r7, #0]
    8a32:	4b23      	ldr	r3, [pc, #140]	; (8ac0 <_spi_m_sync_init+0xf4>)
    8a34:	4798      	blx	r3
    8a36:	4603      	mov	r3, r0
    8a38:	2b00      	cmp	r3, #0
    8a3a:	d006      	beq.n	8a4a <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    8a3c:	6838      	ldr	r0, [r7, #0]
    8a3e:	4b21      	ldr	r3, [pc, #132]	; (8ac4 <_spi_m_sync_init+0xf8>)
    8a40:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    8a42:	2102      	movs	r1, #2
    8a44:	6838      	ldr	r0, [r7, #0]
    8a46:	4b20      	ldr	r3, [pc, #128]	; (8ac8 <_spi_m_sync_init+0xfc>)
    8a48:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    8a4a:	68bb      	ldr	r3, [r7, #8]
    8a4c:	f043 0301 	orr.w	r3, r3, #1
    8a50:	4619      	mov	r1, r3
    8a52:	6838      	ldr	r0, [r7, #0]
    8a54:	4b1d      	ldr	r3, [pc, #116]	; (8acc <_spi_m_sync_init+0x100>)
    8a56:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    8a58:	2101      	movs	r1, #1
    8a5a:	6838      	ldr	r0, [r7, #0]
    8a5c:	4b1a      	ldr	r3, [pc, #104]	; (8ac8 <_spi_m_sync_init+0xfc>)
    8a5e:	4798      	blx	r3

	dev->prvt = hw;
    8a60:	687b      	ldr	r3, [r7, #4]
    8a62:	683a      	ldr	r2, [r7, #0]
    8a64:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    8a66:	68fb      	ldr	r3, [r7, #12]
    8a68:	681b      	ldr	r3, [r3, #0]
    8a6a:	f003 031c 	and.w	r3, r3, #28
    8a6e:	2b08      	cmp	r3, #8
    8a70:	d104      	bne.n	8a7c <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    8a72:	68f9      	ldr	r1, [r7, #12]
    8a74:	6838      	ldr	r0, [r7, #0]
    8a76:	4b16      	ldr	r3, [pc, #88]	; (8ad0 <_spi_m_sync_init+0x104>)
    8a78:	4798      	blx	r3
    8a7a:	e003      	b.n	8a84 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    8a7c:	68f9      	ldr	r1, [r7, #12]
    8a7e:	6838      	ldr	r0, [r7, #0]
    8a80:	4b14      	ldr	r3, [pc, #80]	; (8ad4 <_spi_m_sync_init+0x108>)
    8a82:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    8a84:	68fb      	ldr	r3, [r7, #12]
    8a86:	685b      	ldr	r3, [r3, #4]
    8a88:	f003 0307 	and.w	r3, r3, #7
    8a8c:	2b00      	cmp	r3, #0
    8a8e:	d101      	bne.n	8a94 <_spi_m_sync_init+0xc8>
    8a90:	2201      	movs	r2, #1
    8a92:	e000      	b.n	8a96 <_spi_m_sync_init+0xca>
    8a94:	2202      	movs	r2, #2
    8a96:	687b      	ldr	r3, [r7, #4]
    8a98:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    8a9a:	68fb      	ldr	r3, [r7, #12]
    8a9c:	89db      	ldrh	r3, [r3, #14]
    8a9e:	b29a      	uxth	r2, r3
    8aa0:	687b      	ldr	r3, [r7, #4]
    8aa2:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    8aa4:	2300      	movs	r3, #0
}
    8aa6:	4618      	mov	r0, r3
    8aa8:	3710      	adds	r7, #16
    8aaa:	46bd      	mov	sp, r7
    8aac:	bd80      	pop	{r7, pc}
    8aae:	bf00      	nop
    8ab0:	00008971 	.word	0x00008971
    8ab4:	0001ae60 	.word	0x0001ae60
    8ab8:	00004c81 	.word	0x00004c81
    8abc:	000079b5 	.word	0x000079b5
    8ac0:	00007be9 	.word	0x00007be9
    8ac4:	00007bc1 	.word	0x00007bc1
    8ac8:	00007991 	.word	0x00007991
    8acc:	00007c19 	.word	0x00007c19
    8ad0:	000088c5 	.word	0x000088c5
    8ad4:	00008831 	.word	0x00008831

00008ad8 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    8ad8:	b580      	push	{r7, lr}
    8ada:	b082      	sub	sp, #8
    8adc:	af00      	add	r7, sp, #0
    8ade:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    8ae0:	687b      	ldr	r3, [r7, #4]
    8ae2:	2b00      	cmp	r3, #0
    8ae4:	d005      	beq.n	8af2 <_spi_m_sync_enable+0x1a>
    8ae6:	687b      	ldr	r3, [r7, #4]
    8ae8:	681b      	ldr	r3, [r3, #0]
    8aea:	2b00      	cmp	r3, #0
    8aec:	d001      	beq.n	8af2 <_spi_m_sync_enable+0x1a>
    8aee:	2301      	movs	r3, #1
    8af0:	e000      	b.n	8af4 <_spi_m_sync_enable+0x1c>
    8af2:	2300      	movs	r3, #0
    8af4:	f003 0301 	and.w	r3, r3, #1
    8af8:	b2db      	uxtb	r3, r3
    8afa:	f640 129e 	movw	r2, #2462	; 0x99e
    8afe:	4907      	ldr	r1, [pc, #28]	; (8b1c <_spi_m_sync_enable+0x44>)
    8b00:	4618      	mov	r0, r3
    8b02:	4b07      	ldr	r3, [pc, #28]	; (8b20 <_spi_m_sync_enable+0x48>)
    8b04:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    8b06:	687b      	ldr	r3, [r7, #4]
    8b08:	681b      	ldr	r3, [r3, #0]
    8b0a:	4618      	mov	r0, r3
    8b0c:	4b05      	ldr	r3, [pc, #20]	; (8b24 <_spi_m_sync_enable+0x4c>)
    8b0e:	4798      	blx	r3
    8b10:	4603      	mov	r3, r0
}
    8b12:	4618      	mov	r0, r3
    8b14:	3708      	adds	r7, #8
    8b16:	46bd      	mov	sp, r7
    8b18:	bd80      	pop	{r7, pc}
    8b1a:	bf00      	nop
    8b1c:	0001ae60 	.word	0x0001ae60
    8b20:	00004c81 	.word	0x00004c81
    8b24:	000087c9 	.word	0x000087c9

00008b28 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    8b28:	b580      	push	{r7, lr}
    8b2a:	b082      	sub	sp, #8
    8b2c:	af00      	add	r7, sp, #0
    8b2e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    8b30:	687b      	ldr	r3, [r7, #4]
    8b32:	2b00      	cmp	r3, #0
    8b34:	d005      	beq.n	8b42 <_spi_m_sync_disable+0x1a>
    8b36:	687b      	ldr	r3, [r7, #4]
    8b38:	681b      	ldr	r3, [r3, #0]
    8b3a:	2b00      	cmp	r3, #0
    8b3c:	d001      	beq.n	8b42 <_spi_m_sync_disable+0x1a>
    8b3e:	2301      	movs	r3, #1
    8b40:	e000      	b.n	8b44 <_spi_m_sync_disable+0x1c>
    8b42:	2300      	movs	r3, #0
    8b44:	f003 0301 	and.w	r3, r3, #1
    8b48:	b2db      	uxtb	r3, r3
    8b4a:	f640 12ba 	movw	r2, #2490	; 0x9ba
    8b4e:	4907      	ldr	r1, [pc, #28]	; (8b6c <_spi_m_sync_disable+0x44>)
    8b50:	4618      	mov	r0, r3
    8b52:	4b07      	ldr	r3, [pc, #28]	; (8b70 <_spi_m_sync_disable+0x48>)
    8b54:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    8b56:	687b      	ldr	r3, [r7, #4]
    8b58:	681b      	ldr	r3, [r3, #0]
    8b5a:	4618      	mov	r0, r3
    8b5c:	4b05      	ldr	r3, [pc, #20]	; (8b74 <_spi_m_sync_disable+0x4c>)
    8b5e:	4798      	blx	r3
    8b60:	4603      	mov	r3, r0
}
    8b62:	4618      	mov	r0, r3
    8b64:	3708      	adds	r7, #8
    8b66:	46bd      	mov	sp, r7
    8b68:	bd80      	pop	{r7, pc}
    8b6a:	bf00      	nop
    8b6c:	0001ae60 	.word	0x0001ae60
    8b70:	00004c81 	.word	0x00004c81
    8b74:	000087fd 	.word	0x000087fd

00008b78 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    8b78:	b580      	push	{r7, lr}
    8b7a:	b082      	sub	sp, #8
    8b7c:	af00      	add	r7, sp, #0
    8b7e:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    8b80:	bf00      	nop
    8b82:	2103      	movs	r1, #3
    8b84:	6878      	ldr	r0, [r7, #4]
    8b86:	4b06      	ldr	r3, [pc, #24]	; (8ba0 <_spi_wait_bus_idle+0x28>)
    8b88:	4798      	blx	r3
    8b8a:	4603      	mov	r3, r0
    8b8c:	2b00      	cmp	r3, #0
    8b8e:	d0f8      	beq.n	8b82 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    8b90:	2103      	movs	r1, #3
    8b92:	6878      	ldr	r0, [r7, #4]
    8b94:	4b03      	ldr	r3, [pc, #12]	; (8ba4 <_spi_wait_bus_idle+0x2c>)
    8b96:	4798      	blx	r3
}
    8b98:	bf00      	nop
    8b9a:	3708      	adds	r7, #8
    8b9c:	46bd      	mov	sp, r7
    8b9e:	bd80      	pop	{r7, pc}
    8ba0:	00007a2b 	.word	0x00007a2b
    8ba4:	00007a6d 	.word	0x00007a6d

00008ba8 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    8ba8:	b580      	push	{r7, lr}
    8baa:	b086      	sub	sp, #24
    8bac:	af00      	add	r7, sp, #0
    8bae:	60f8      	str	r0, [r7, #12]
    8bb0:	60b9      	str	r1, [r7, #8]
    8bb2:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    8bb4:	68bb      	ldr	r3, [r7, #8]
    8bb6:	f003 0304 	and.w	r3, r3, #4
    8bba:	2b00      	cmp	r3, #0
    8bbc:	d101      	bne.n	8bc2 <_spi_rx_check_and_receive+0x1a>
		return false;
    8bbe:	2300      	movs	r3, #0
    8bc0:	e022      	b.n	8c08 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    8bc2:	68f8      	ldr	r0, [r7, #12]
    8bc4:	4b12      	ldr	r3, [pc, #72]	; (8c10 <_spi_rx_check_and_receive+0x68>)
    8bc6:	4798      	blx	r3
    8bc8:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    8bca:	687b      	ldr	r3, [r7, #4]
    8bcc:	685b      	ldr	r3, [r3, #4]
    8bce:	2b00      	cmp	r3, #0
    8bd0:	d014      	beq.n	8bfc <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    8bd2:	687b      	ldr	r3, [r7, #4]
    8bd4:	685b      	ldr	r3, [r3, #4]
    8bd6:	1c59      	adds	r1, r3, #1
    8bd8:	687a      	ldr	r2, [r7, #4]
    8bda:	6051      	str	r1, [r2, #4]
    8bdc:	697a      	ldr	r2, [r7, #20]
    8bde:	b2d2      	uxtb	r2, r2
    8be0:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    8be2:	687b      	ldr	r3, [r7, #4]
    8be4:	7c1b      	ldrb	r3, [r3, #16]
    8be6:	2b01      	cmp	r3, #1
    8be8:	d908      	bls.n	8bfc <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    8bea:	687b      	ldr	r3, [r7, #4]
    8bec:	685b      	ldr	r3, [r3, #4]
    8bee:	1c59      	adds	r1, r3, #1
    8bf0:	687a      	ldr	r2, [r7, #4]
    8bf2:	6051      	str	r1, [r2, #4]
    8bf4:	697a      	ldr	r2, [r7, #20]
    8bf6:	0a12      	lsrs	r2, r2, #8
    8bf8:	b2d2      	uxtb	r2, r2
    8bfa:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    8bfc:	687b      	ldr	r3, [r7, #4]
    8bfe:	68db      	ldr	r3, [r3, #12]
    8c00:	1c5a      	adds	r2, r3, #1
    8c02:	687b      	ldr	r3, [r7, #4]
    8c04:	60da      	str	r2, [r3, #12]

	return true;
    8c06:	2301      	movs	r3, #1
}
    8c08:	4618      	mov	r0, r3
    8c0a:	3718      	adds	r7, #24
    8c0c:	46bd      	mov	sp, r7
    8c0e:	bd80      	pop	{r7, pc}
    8c10:	00007e91 	.word	0x00007e91

00008c14 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    8c14:	b580      	push	{r7, lr}
    8c16:	b086      	sub	sp, #24
    8c18:	af00      	add	r7, sp, #0
    8c1a:	60f8      	str	r0, [r7, #12]
    8c1c:	60b9      	str	r1, [r7, #8]
    8c1e:	607a      	str	r2, [r7, #4]
    8c20:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    8c22:	68bb      	ldr	r3, [r7, #8]
    8c24:	f003 0301 	and.w	r3, r3, #1
    8c28:	2b00      	cmp	r3, #0
    8c2a:	d028      	beq.n	8c7e <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    8c2c:	687b      	ldr	r3, [r7, #4]
    8c2e:	681b      	ldr	r3, [r3, #0]
    8c30:	2b00      	cmp	r3, #0
    8c32:	d018      	beq.n	8c66 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    8c34:	687b      	ldr	r3, [r7, #4]
    8c36:	681b      	ldr	r3, [r3, #0]
    8c38:	1c59      	adds	r1, r3, #1
    8c3a:	687a      	ldr	r2, [r7, #4]
    8c3c:	6011      	str	r1, [r2, #0]
    8c3e:	781b      	ldrb	r3, [r3, #0]
    8c40:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    8c42:	687b      	ldr	r3, [r7, #4]
    8c44:	7c1b      	ldrb	r3, [r3, #16]
    8c46:	2b01      	cmp	r3, #1
    8c48:	d90f      	bls.n	8c6a <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    8c4a:	687b      	ldr	r3, [r7, #4]
    8c4c:	681b      	ldr	r3, [r3, #0]
    8c4e:	781b      	ldrb	r3, [r3, #0]
    8c50:	021b      	lsls	r3, r3, #8
    8c52:	461a      	mov	r2, r3
    8c54:	697b      	ldr	r3, [r7, #20]
    8c56:	4313      	orrs	r3, r2
    8c58:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    8c5a:	687b      	ldr	r3, [r7, #4]
    8c5c:	681b      	ldr	r3, [r3, #0]
    8c5e:	1c5a      	adds	r2, r3, #1
    8c60:	687b      	ldr	r3, [r7, #4]
    8c62:	601a      	str	r2, [r3, #0]
    8c64:	e001      	b.n	8c6a <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    8c66:	887b      	ldrh	r3, [r7, #2]
    8c68:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    8c6a:	687b      	ldr	r3, [r7, #4]
    8c6c:	689b      	ldr	r3, [r3, #8]
    8c6e:	1c5a      	adds	r2, r3, #1
    8c70:	687b      	ldr	r3, [r7, #4]
    8c72:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    8c74:	6979      	ldr	r1, [r7, #20]
    8c76:	68f8      	ldr	r0, [r7, #12]
    8c78:	4b03      	ldr	r3, [pc, #12]	; (8c88 <_spi_tx_check_and_send+0x74>)
    8c7a:	4798      	blx	r3
    8c7c:	e000      	b.n	8c80 <_spi_tx_check_and_send+0x6c>
		return;
    8c7e:	bf00      	nop
}
    8c80:	3718      	adds	r7, #24
    8c82:	46bd      	mov	sp, r7
    8c84:	bd80      	pop	{r7, pc}
    8c86:	bf00      	nop
    8c88:	00007e75 	.word	0x00007e75

00008c8c <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    8c8c:	b580      	push	{r7, lr}
    8c8e:	b082      	sub	sp, #8
    8c90:	af00      	add	r7, sp, #0
    8c92:	6078      	str	r0, [r7, #4]
    8c94:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    8c96:	687b      	ldr	r3, [r7, #4]
    8c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8c9c:	2b00      	cmp	r3, #0
    8c9e:	d00b      	beq.n	8cb8 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    8ca0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8ca4:	6838      	ldr	r0, [r7, #0]
    8ca6:	4b07      	ldr	r3, [pc, #28]	; (8cc4 <_spi_err_check+0x38>)
    8ca8:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    8caa:	2180      	movs	r1, #128	; 0x80
    8cac:	6838      	ldr	r0, [r7, #0]
    8cae:	4b06      	ldr	r3, [pc, #24]	; (8cc8 <_spi_err_check+0x3c>)
    8cb0:	4798      	blx	r3
		return ERR_OVERFLOW;
    8cb2:	f06f 0312 	mvn.w	r3, #18
    8cb6:	e000      	b.n	8cba <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    8cb8:	2300      	movs	r3, #0
}
    8cba:	4618      	mov	r0, r3
    8cbc:	3708      	adds	r7, #8
    8cbe:	46bd      	mov	sp, r7
    8cc0:	bd80      	pop	{r7, pc}
    8cc2:	bf00      	nop
    8cc4:	00007ec9 	.word	0x00007ec9
    8cc8:	00007a6d 	.word	0x00007a6d

00008ccc <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    8ccc:	b590      	push	{r4, r7, lr}
    8cce:	b08b      	sub	sp, #44	; 0x2c
    8cd0:	af00      	add	r7, sp, #0
    8cd2:	6078      	str	r0, [r7, #4]
    8cd4:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    8cd6:	687b      	ldr	r3, [r7, #4]
    8cd8:	681b      	ldr	r3, [r3, #0]
    8cda:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    8cdc:	2300      	movs	r3, #0
    8cde:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    8ce0:	683b      	ldr	r3, [r7, #0]
    8ce2:	681b      	ldr	r3, [r3, #0]
    8ce4:	60bb      	str	r3, [r7, #8]
    8ce6:	683b      	ldr	r3, [r7, #0]
    8ce8:	685b      	ldr	r3, [r3, #4]
    8cea:	60fb      	str	r3, [r7, #12]
    8cec:	2300      	movs	r3, #0
    8cee:	613b      	str	r3, [r7, #16]
    8cf0:	2300      	movs	r3, #0
    8cf2:	617b      	str	r3, [r7, #20]
    8cf4:	687b      	ldr	r3, [r7, #4]
    8cf6:	791b      	ldrb	r3, [r3, #4]
    8cf8:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    8cfa:	687b      	ldr	r3, [r7, #4]
    8cfc:	2b00      	cmp	r3, #0
    8cfe:	d004      	beq.n	8d0a <_spi_m_sync_trans+0x3e>
    8d00:	6a3b      	ldr	r3, [r7, #32]
    8d02:	2b00      	cmp	r3, #0
    8d04:	d001      	beq.n	8d0a <_spi_m_sync_trans+0x3e>
    8d06:	2301      	movs	r3, #1
    8d08:	e000      	b.n	8d0c <_spi_m_sync_trans+0x40>
    8d0a:	2300      	movs	r3, #0
    8d0c:	f003 0301 	and.w	r3, r3, #1
    8d10:	b2db      	uxtb	r3, r3
    8d12:	f640 22a3 	movw	r2, #2723	; 0xaa3
    8d16:	492b      	ldr	r1, [pc, #172]	; (8dc4 <_spi_m_sync_trans+0xf8>)
    8d18:	4618      	mov	r0, r3
    8d1a:	4b2b      	ldr	r3, [pc, #172]	; (8dc8 <_spi_m_sync_trans+0xfc>)
    8d1c:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    8d1e:	2107      	movs	r1, #7
    8d20:	6a38      	ldr	r0, [r7, #32]
    8d22:	4b2a      	ldr	r3, [pc, #168]	; (8dcc <_spi_m_sync_trans+0x100>)
    8d24:	4798      	blx	r3
    8d26:	4603      	mov	r3, r0
    8d28:	2b00      	cmp	r3, #0
    8d2a:	d002      	beq.n	8d32 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    8d2c:	f06f 0303 	mvn.w	r3, #3
    8d30:	e043      	b.n	8dba <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    8d32:	6a38      	ldr	r0, [r7, #32]
    8d34:	4b26      	ldr	r3, [pc, #152]	; (8dd0 <_spi_m_sync_trans+0x104>)
    8d36:	4798      	blx	r3
    8d38:	4603      	mov	r3, r0
    8d3a:	f083 0301 	eor.w	r3, r3, #1
    8d3e:	b2db      	uxtb	r3, r3
    8d40:	2b00      	cmp	r3, #0
    8d42:	d002      	beq.n	8d4a <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    8d44:	f06f 0313 	mvn.w	r3, #19
    8d48:	e037      	b.n	8dba <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    8d4a:	6a38      	ldr	r0, [r7, #32]
    8d4c:	4b21      	ldr	r3, [pc, #132]	; (8dd4 <_spi_m_sync_trans+0x108>)
    8d4e:	4798      	blx	r3
    8d50:	4603      	mov	r3, r0
    8d52:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    8d54:	f107 0308 	add.w	r3, r7, #8
    8d58:	461a      	mov	r2, r3
    8d5a:	69f9      	ldr	r1, [r7, #28]
    8d5c:	6a38      	ldr	r0, [r7, #32]
    8d5e:	4b1e      	ldr	r3, [pc, #120]	; (8dd8 <_spi_m_sync_trans+0x10c>)
    8d60:	4798      	blx	r3
    8d62:	4603      	mov	r3, r0
    8d64:	f083 0301 	eor.w	r3, r3, #1
    8d68:	b2db      	uxtb	r3, r3
    8d6a:	2b00      	cmp	r3, #0
    8d6c:	d00b      	beq.n	8d86 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    8d6e:	697a      	ldr	r2, [r7, #20]
    8d70:	693b      	ldr	r3, [r7, #16]
    8d72:	429a      	cmp	r2, r3
    8d74:	d307      	bcc.n	8d86 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    8d76:	687b      	ldr	r3, [r7, #4]
    8d78:	88db      	ldrh	r3, [r3, #6]
    8d7a:	f107 0208 	add.w	r2, r7, #8
    8d7e:	69f9      	ldr	r1, [r7, #28]
    8d80:	6a38      	ldr	r0, [r7, #32]
    8d82:	4c16      	ldr	r4, [pc, #88]	; (8ddc <_spi_m_sync_trans+0x110>)
    8d84:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    8d86:	6a39      	ldr	r1, [r7, #32]
    8d88:	69f8      	ldr	r0, [r7, #28]
    8d8a:	4b15      	ldr	r3, [pc, #84]	; (8de0 <_spi_m_sync_trans+0x114>)
    8d8c:	4798      	blx	r3
    8d8e:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    8d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d92:	2b00      	cmp	r3, #0
    8d94:	db0c      	blt.n	8db0 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    8d96:	693a      	ldr	r2, [r7, #16]
    8d98:	683b      	ldr	r3, [r7, #0]
    8d9a:	689b      	ldr	r3, [r3, #8]
    8d9c:	429a      	cmp	r2, r3
    8d9e:	d3d4      	bcc.n	8d4a <_spi_m_sync_trans+0x7e>
    8da0:	697a      	ldr	r2, [r7, #20]
    8da2:	683b      	ldr	r3, [r7, #0]
    8da4:	689b      	ldr	r3, [r3, #8]
    8da6:	429a      	cmp	r2, r3
    8da8:	d3cf      	bcc.n	8d4a <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    8daa:	693b      	ldr	r3, [r7, #16]
    8dac:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    8dae:	e000      	b.n	8db2 <_spi_m_sync_trans+0xe6>
			break;
    8db0:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    8db2:	6a38      	ldr	r0, [r7, #32]
    8db4:	4b0b      	ldr	r3, [pc, #44]	; (8de4 <_spi_m_sync_trans+0x118>)
    8db6:	4798      	blx	r3

	return rc;
    8db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    8dba:	4618      	mov	r0, r3
    8dbc:	372c      	adds	r7, #44	; 0x2c
    8dbe:	46bd      	mov	sp, r7
    8dc0:	bd90      	pop	{r4, r7, pc}
    8dc2:	bf00      	nop
    8dc4:	0001ae60 	.word	0x0001ae60
    8dc8:	00004c81 	.word	0x00004c81
    8dcc:	000079b5 	.word	0x000079b5
    8dd0:	00007b89 	.word	0x00007b89
    8dd4:	00007a53 	.word	0x00007a53
    8dd8:	00008ba9 	.word	0x00008ba9
    8ddc:	00008c15 	.word	0x00008c15
    8de0:	00008c8d 	.word	0x00008c8d
    8de4:	00008b79 	.word	0x00008b79

00008de8 <__NVIC_EnableIRQ>:
{
    8de8:	b480      	push	{r7}
    8dea:	b083      	sub	sp, #12
    8dec:	af00      	add	r7, sp, #0
    8dee:	4603      	mov	r3, r0
    8df0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8df6:	2b00      	cmp	r3, #0
    8df8:	db0b      	blt.n	8e12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8dfa:	4909      	ldr	r1, [pc, #36]	; (8e20 <__NVIC_EnableIRQ+0x38>)
    8dfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8e00:	095b      	lsrs	r3, r3, #5
    8e02:	88fa      	ldrh	r2, [r7, #6]
    8e04:	f002 021f 	and.w	r2, r2, #31
    8e08:	2001      	movs	r0, #1
    8e0a:	fa00 f202 	lsl.w	r2, r0, r2
    8e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8e12:	bf00      	nop
    8e14:	370c      	adds	r7, #12
    8e16:	46bd      	mov	sp, r7
    8e18:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e1c:	4770      	bx	lr
    8e1e:	bf00      	nop
    8e20:	e000e100 	.word	0xe000e100

00008e24 <__NVIC_DisableIRQ>:
{
    8e24:	b480      	push	{r7}
    8e26:	b083      	sub	sp, #12
    8e28:	af00      	add	r7, sp, #0
    8e2a:	4603      	mov	r3, r0
    8e2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8e32:	2b00      	cmp	r3, #0
    8e34:	db10      	blt.n	8e58 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8e36:	490b      	ldr	r1, [pc, #44]	; (8e64 <__NVIC_DisableIRQ+0x40>)
    8e38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8e3c:	095b      	lsrs	r3, r3, #5
    8e3e:	88fa      	ldrh	r2, [r7, #6]
    8e40:	f002 021f 	and.w	r2, r2, #31
    8e44:	2001      	movs	r0, #1
    8e46:	fa00 f202 	lsl.w	r2, r0, r2
    8e4a:	3320      	adds	r3, #32
    8e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8e50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8e54:	f3bf 8f6f 	isb	sy
}
    8e58:	bf00      	nop
    8e5a:	370c      	adds	r7, #12
    8e5c:	46bd      	mov	sp, r7
    8e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e62:	4770      	bx	lr
    8e64:	e000e100 	.word	0xe000e100

00008e68 <__NVIC_ClearPendingIRQ>:
{
    8e68:	b480      	push	{r7}
    8e6a:	b083      	sub	sp, #12
    8e6c:	af00      	add	r7, sp, #0
    8e6e:	4603      	mov	r3, r0
    8e70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8e76:	2b00      	cmp	r3, #0
    8e78:	db0c      	blt.n	8e94 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8e7a:	4909      	ldr	r1, [pc, #36]	; (8ea0 <__NVIC_ClearPendingIRQ+0x38>)
    8e7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8e80:	095b      	lsrs	r3, r3, #5
    8e82:	88fa      	ldrh	r2, [r7, #6]
    8e84:	f002 021f 	and.w	r2, r2, #31
    8e88:	2001      	movs	r0, #1
    8e8a:	fa00 f202 	lsl.w	r2, r0, r2
    8e8e:	3360      	adds	r3, #96	; 0x60
    8e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8e94:	bf00      	nop
    8e96:	370c      	adds	r7, #12
    8e98:	46bd      	mov	sp, r7
    8e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e9e:	4770      	bx	lr
    8ea0:	e000e100 	.word	0xe000e100

00008ea4 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    8ea4:	b480      	push	{r7}
    8ea6:	b083      	sub	sp, #12
    8ea8:	af00      	add	r7, sp, #0
    8eaa:	6078      	str	r0, [r7, #4]
    8eac:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    8eae:	bf00      	nop
    8eb0:	687b      	ldr	r3, [r7, #4]
    8eb2:	689a      	ldr	r2, [r3, #8]
    8eb4:	683b      	ldr	r3, [r7, #0]
    8eb6:	4013      	ands	r3, r2
    8eb8:	2b00      	cmp	r3, #0
    8eba:	d1f9      	bne.n	8eb0 <hri_tcc_wait_for_sync+0xc>
	};
}
    8ebc:	bf00      	nop
    8ebe:	370c      	adds	r7, #12
    8ec0:	46bd      	mov	sp, r7
    8ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ec6:	4770      	bx	lr

00008ec8 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    8ec8:	b480      	push	{r7}
    8eca:	b083      	sub	sp, #12
    8ecc:	af00      	add	r7, sp, #0
    8ece:	6078      	str	r0, [r7, #4]
    8ed0:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    8ed2:	687b      	ldr	r3, [r7, #4]
    8ed4:	689a      	ldr	r2, [r3, #8]
    8ed6:	683b      	ldr	r3, [r7, #0]
    8ed8:	4013      	ands	r3, r2
    8eda:	2b00      	cmp	r3, #0
    8edc:	bf14      	ite	ne
    8ede:	2301      	movne	r3, #1
    8ee0:	2300      	moveq	r3, #0
    8ee2:	b2db      	uxtb	r3, r3
}
    8ee4:	4618      	mov	r0, r3
    8ee6:	370c      	adds	r7, #12
    8ee8:	46bd      	mov	sp, r7
    8eea:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eee:	4770      	bx	lr

00008ef0 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    8ef0:	b480      	push	{r7}
    8ef2:	b083      	sub	sp, #12
    8ef4:	af00      	add	r7, sp, #0
    8ef6:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    8ef8:	687b      	ldr	r3, [r7, #4]
    8efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8efc:	f003 0301 	and.w	r3, r3, #1
    8f00:	2b00      	cmp	r3, #0
    8f02:	bf14      	ite	ne
    8f04:	2301      	movne	r3, #1
    8f06:	2300      	moveq	r3, #0
    8f08:	b2db      	uxtb	r3, r3
}
    8f0a:	4618      	mov	r0, r3
    8f0c:	370c      	adds	r7, #12
    8f0e:	46bd      	mov	sp, r7
    8f10:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f14:	4770      	bx	lr

00008f16 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    8f16:	b480      	push	{r7}
    8f18:	b083      	sub	sp, #12
    8f1a:	af00      	add	r7, sp, #0
    8f1c:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    8f1e:	687b      	ldr	r3, [r7, #4]
    8f20:	2201      	movs	r2, #1
    8f22:	62da      	str	r2, [r3, #44]	; 0x2c
}
    8f24:	bf00      	nop
    8f26:	370c      	adds	r7, #12
    8f28:	46bd      	mov	sp, r7
    8f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f2e:	4770      	bx	lr

00008f30 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    8f30:	b480      	push	{r7}
    8f32:	b083      	sub	sp, #12
    8f34:	af00      	add	r7, sp, #0
    8f36:	6078      	str	r0, [r7, #4]
    8f38:	460b      	mov	r3, r1
    8f3a:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    8f3c:	687b      	ldr	r3, [r7, #4]
    8f3e:	78fa      	ldrb	r2, [r7, #3]
    8f40:	715a      	strb	r2, [r3, #5]
}
    8f42:	bf00      	nop
    8f44:	370c      	adds	r7, #12
    8f46:	46bd      	mov	sp, r7
    8f48:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f4c:	4770      	bx	lr

00008f4e <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    8f4e:	b480      	push	{r7}
    8f50:	b083      	sub	sp, #12
    8f52:	af00      	add	r7, sp, #0
    8f54:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    8f56:	687b      	ldr	r3, [r7, #4]
    8f58:	2201      	movs	r2, #1
    8f5a:	629a      	str	r2, [r3, #40]	; 0x28
}
    8f5c:	bf00      	nop
    8f5e:	370c      	adds	r7, #12
    8f60:	46bd      	mov	sp, r7
    8f62:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f66:	4770      	bx	lr

00008f68 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    8f68:	b580      	push	{r7, lr}
    8f6a:	b082      	sub	sp, #8
    8f6c:	af00      	add	r7, sp, #0
    8f6e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    8f70:	687b      	ldr	r3, [r7, #4]
    8f72:	681b      	ldr	r3, [r3, #0]
    8f74:	f043 0201 	orr.w	r2, r3, #1
    8f78:	687b      	ldr	r3, [r7, #4]
    8f7a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    8f7c:	2101      	movs	r1, #1
    8f7e:	6878      	ldr	r0, [r7, #4]
    8f80:	4b02      	ldr	r3, [pc, #8]	; (8f8c <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    8f82:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    8f84:	bf00      	nop
    8f86:	3708      	adds	r7, #8
    8f88:	46bd      	mov	sp, r7
    8f8a:	bd80      	pop	{r7, pc}
    8f8c:	00008ea5 	.word	0x00008ea5

00008f90 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    8f90:	b580      	push	{r7, lr}
    8f92:	b082      	sub	sp, #8
    8f94:	af00      	add	r7, sp, #0
    8f96:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    8f98:	687b      	ldr	r3, [r7, #4]
    8f9a:	681b      	ldr	r3, [r3, #0]
    8f9c:	f043 0202 	orr.w	r2, r3, #2
    8fa0:	687b      	ldr	r3, [r7, #4]
    8fa2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    8fa4:	2103      	movs	r1, #3
    8fa6:	6878      	ldr	r0, [r7, #4]
    8fa8:	4b02      	ldr	r3, [pc, #8]	; (8fb4 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    8faa:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    8fac:	bf00      	nop
    8fae:	3708      	adds	r7, #8
    8fb0:	46bd      	mov	sp, r7
    8fb2:	bd80      	pop	{r7, pc}
    8fb4:	00008ea5 	.word	0x00008ea5

00008fb8 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8fb8:	b580      	push	{r7, lr}
    8fba:	b084      	sub	sp, #16
    8fbc:	af00      	add	r7, sp, #0
    8fbe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    8fc0:	2103      	movs	r1, #3
    8fc2:	6878      	ldr	r0, [r7, #4]
    8fc4:	4b09      	ldr	r3, [pc, #36]	; (8fec <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    8fc6:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    8fc8:	687b      	ldr	r3, [r7, #4]
    8fca:	681b      	ldr	r3, [r3, #0]
    8fcc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    8fce:	68fb      	ldr	r3, [r7, #12]
    8fd0:	085b      	lsrs	r3, r3, #1
    8fd2:	f003 0301 	and.w	r3, r3, #1
    8fd6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    8fd8:	68fb      	ldr	r3, [r7, #12]
    8fda:	2b00      	cmp	r3, #0
    8fdc:	bf14      	ite	ne
    8fde:	2301      	movne	r3, #1
    8fe0:	2300      	moveq	r3, #0
    8fe2:	b2db      	uxtb	r3, r3
}
    8fe4:	4618      	mov	r0, r3
    8fe6:	3710      	adds	r7, #16
    8fe8:	46bd      	mov	sp, r7
    8fea:	bd80      	pop	{r7, pc}
    8fec:	00008ea5 	.word	0x00008ea5

00008ff0 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8ff0:	b580      	push	{r7, lr}
    8ff2:	b082      	sub	sp, #8
    8ff4:	af00      	add	r7, sp, #0
    8ff6:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    8ff8:	687b      	ldr	r3, [r7, #4]
    8ffa:	681b      	ldr	r3, [r3, #0]
    8ffc:	f023 0202 	bic.w	r2, r3, #2
    9000:	687b      	ldr	r3, [r7, #4]
    9002:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    9004:	2103      	movs	r1, #3
    9006:	6878      	ldr	r0, [r7, #4]
    9008:	4b02      	ldr	r3, [pc, #8]	; (9014 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    900a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    900c:	bf00      	nop
    900e:	3708      	adds	r7, #8
    9010:	46bd      	mov	sp, r7
    9012:	bd80      	pop	{r7, pc}
    9014:	00008ea5 	.word	0x00008ea5

00009018 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    9018:	b580      	push	{r7, lr}
    901a:	b084      	sub	sp, #16
    901c:	af00      	add	r7, sp, #0
    901e:	6078      	str	r0, [r7, #4]
    9020:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    9022:	2103      	movs	r1, #3
    9024:	6878      	ldr	r0, [r7, #4]
    9026:	4b07      	ldr	r3, [pc, #28]	; (9044 <hri_tcc_get_CTRLA_reg+0x2c>)
    9028:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    902a:	687b      	ldr	r3, [r7, #4]
    902c:	681b      	ldr	r3, [r3, #0]
    902e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9030:	68fa      	ldr	r2, [r7, #12]
    9032:	683b      	ldr	r3, [r7, #0]
    9034:	4013      	ands	r3, r2
    9036:	60fb      	str	r3, [r7, #12]
	return tmp;
    9038:	68fb      	ldr	r3, [r7, #12]
}
    903a:	4618      	mov	r0, r3
    903c:	3710      	adds	r7, #16
    903e:	46bd      	mov	sp, r7
    9040:	bd80      	pop	{r7, pc}
    9042:	bf00      	nop
    9044:	00008ea5 	.word	0x00008ea5

00009048 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    9048:	b580      	push	{r7, lr}
    904a:	b082      	sub	sp, #8
    904c:	af00      	add	r7, sp, #0
    904e:	6078      	str	r0, [r7, #4]
    9050:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    9052:	687b      	ldr	r3, [r7, #4]
    9054:	683a      	ldr	r2, [r7, #0]
    9056:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    9058:	2103      	movs	r1, #3
    905a:	6878      	ldr	r0, [r7, #4]
    905c:	4b02      	ldr	r3, [pc, #8]	; (9068 <hri_tcc_write_CTRLA_reg+0x20>)
    905e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    9060:	bf00      	nop
    9062:	3708      	adds	r7, #8
    9064:	46bd      	mov	sp, r7
    9066:	bd80      	pop	{r7, pc}
    9068:	00008ea5 	.word	0x00008ea5

0000906c <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    906c:	b480      	push	{r7}
    906e:	b083      	sub	sp, #12
    9070:	af00      	add	r7, sp, #0
    9072:	6078      	str	r0, [r7, #4]
    9074:	460b      	mov	r3, r1
    9076:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    9078:	687b      	ldr	r3, [r7, #4]
    907a:	78fa      	ldrb	r2, [r7, #3]
    907c:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    907e:	bf00      	nop
    9080:	370c      	adds	r7, #12
    9082:	46bd      	mov	sp, r7
    9084:	f85d 7b04 	ldr.w	r7, [sp], #4
    9088:	4770      	bx	lr

0000908a <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    908a:	b480      	push	{r7}
    908c:	b083      	sub	sp, #12
    908e:	af00      	add	r7, sp, #0
    9090:	6078      	str	r0, [r7, #4]
    9092:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    9094:	687b      	ldr	r3, [r7, #4]
    9096:	683a      	ldr	r2, [r7, #0]
    9098:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    909a:	bf00      	nop
    909c:	370c      	adds	r7, #12
    909e:	46bd      	mov	sp, r7
    90a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    90a4:	4770      	bx	lr
	...

000090a8 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    90a8:	b580      	push	{r7, lr}
    90aa:	b082      	sub	sp, #8
    90ac:	af00      	add	r7, sp, #0
    90ae:	6078      	str	r0, [r7, #4]
    90b0:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    90b2:	687b      	ldr	r3, [r7, #4]
    90b4:	683a      	ldr	r2, [r7, #0]
    90b6:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    90b8:	2180      	movs	r1, #128	; 0x80
    90ba:	6878      	ldr	r0, [r7, #4]
    90bc:	4b02      	ldr	r3, [pc, #8]	; (90c8 <hri_tcc_write_PER_reg+0x20>)
    90be:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    90c0:	bf00      	nop
    90c2:	3708      	adds	r7, #8
    90c4:	46bd      	mov	sp, r7
    90c6:	bd80      	pop	{r7, pc}
    90c8:	00008ea5 	.word	0x00008ea5

000090cc <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    90cc:	b580      	push	{r7, lr}
    90ce:	b082      	sub	sp, #8
    90d0:	af00      	add	r7, sp, #0
    90d2:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    90d4:	2180      	movs	r1, #128	; 0x80
    90d6:	6878      	ldr	r0, [r7, #4]
    90d8:	4b03      	ldr	r3, [pc, #12]	; (90e8 <hri_tcc_read_PER_reg+0x1c>)
    90da:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    90dc:	687b      	ldr	r3, [r7, #4]
    90de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    90e0:	4618      	mov	r0, r3
    90e2:	3708      	adds	r7, #8
    90e4:	46bd      	mov	sp, r7
    90e6:	bd80      	pop	{r7, pc}
    90e8:	00008ea5 	.word	0x00008ea5

000090ec <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    90ec:	b480      	push	{r7}
    90ee:	b083      	sub	sp, #12
    90f0:	af00      	add	r7, sp, #0
    90f2:	6078      	str	r0, [r7, #4]
    90f4:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    90f6:	687b      	ldr	r3, [r7, #4]
    90f8:	4a0c      	ldr	r2, [pc, #48]	; (912c <_tcc_init_irq_param+0x40>)
    90fa:	4293      	cmp	r3, r2
    90fc:	d102      	bne.n	9104 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    90fe:	4a0c      	ldr	r2, [pc, #48]	; (9130 <_tcc_init_irq_param+0x44>)
    9100:	683b      	ldr	r3, [r7, #0]
    9102:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    9104:	687b      	ldr	r3, [r7, #4]
    9106:	4a0b      	ldr	r2, [pc, #44]	; (9134 <_tcc_init_irq_param+0x48>)
    9108:	4293      	cmp	r3, r2
    910a:	d102      	bne.n	9112 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    910c:	4a0a      	ldr	r2, [pc, #40]	; (9138 <_tcc_init_irq_param+0x4c>)
    910e:	683b      	ldr	r3, [r7, #0]
    9110:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    9112:	687b      	ldr	r3, [r7, #4]
    9114:	4a09      	ldr	r2, [pc, #36]	; (913c <_tcc_init_irq_param+0x50>)
    9116:	4293      	cmp	r3, r2
    9118:	d102      	bne.n	9120 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    911a:	4a09      	ldr	r2, [pc, #36]	; (9140 <_tcc_init_irq_param+0x54>)
    911c:	683b      	ldr	r3, [r7, #0]
    911e:	6013      	str	r3, [r2, #0]
	}
}
    9120:	bf00      	nop
    9122:	370c      	adds	r7, #12
    9124:	46bd      	mov	sp, r7
    9126:	f85d 7b04 	ldr.w	r7, [sp], #4
    912a:	4770      	bx	lr
    912c:	41016000 	.word	0x41016000
    9130:	20002330 	.word	0x20002330
    9134:	41018000 	.word	0x41018000
    9138:	20002334 	.word	0x20002334
    913c:	42000c00 	.word	0x42000c00
    9140:	20002338 	.word	0x20002338

00009144 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    9144:	b580      	push	{r7, lr}
    9146:	b084      	sub	sp, #16
    9148:	af00      	add	r7, sp, #0
    914a:	6078      	str	r0, [r7, #4]
    914c:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    914e:	6838      	ldr	r0, [r7, #0]
    9150:	4b33      	ldr	r3, [pc, #204]	; (9220 <_tcc_timer_init+0xdc>)
    9152:	4798      	blx	r3
    9154:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    9156:	68fb      	ldr	r3, [r7, #12]
    9158:	2b00      	cmp	r3, #0
    915a:	d102      	bne.n	9162 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    915c:	f06f 0309 	mvn.w	r3, #9
    9160:	e05a      	b.n	9218 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    9162:	687b      	ldr	r3, [r7, #4]
    9164:	683a      	ldr	r2, [r7, #0]
    9166:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    9168:	2101      	movs	r1, #1
    916a:	6838      	ldr	r0, [r7, #0]
    916c:	4b2d      	ldr	r3, [pc, #180]	; (9224 <_tcc_timer_init+0xe0>)
    916e:	4798      	blx	r3
    9170:	4603      	mov	r3, r0
    9172:	f083 0301 	eor.w	r3, r3, #1
    9176:	b2db      	uxtb	r3, r3
    9178:	2b00      	cmp	r3, #0
    917a:	d011      	beq.n	91a0 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    917c:	2102      	movs	r1, #2
    917e:	6838      	ldr	r0, [r7, #0]
    9180:	4b29      	ldr	r3, [pc, #164]	; (9228 <_tcc_timer_init+0xe4>)
    9182:	4798      	blx	r3
    9184:	4603      	mov	r3, r0
    9186:	2b00      	cmp	r3, #0
    9188:	d006      	beq.n	9198 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    918a:	6838      	ldr	r0, [r7, #0]
    918c:	4b27      	ldr	r3, [pc, #156]	; (922c <_tcc_timer_init+0xe8>)
    918e:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    9190:	2102      	movs	r1, #2
    9192:	6838      	ldr	r0, [r7, #0]
    9194:	4b26      	ldr	r3, [pc, #152]	; (9230 <_tcc_timer_init+0xec>)
    9196:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    9198:	2101      	movs	r1, #1
    919a:	6838      	ldr	r0, [r7, #0]
    919c:	4b25      	ldr	r3, [pc, #148]	; (9234 <_tcc_timer_init+0xf0>)
    919e:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    91a0:	2101      	movs	r1, #1
    91a2:	6838      	ldr	r0, [r7, #0]
    91a4:	4b22      	ldr	r3, [pc, #136]	; (9230 <_tcc_timer_init+0xec>)
    91a6:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    91a8:	68fb      	ldr	r3, [r7, #12]
    91aa:	689b      	ldr	r3, [r3, #8]
    91ac:	4619      	mov	r1, r3
    91ae:	6838      	ldr	r0, [r7, #0]
    91b0:	4b20      	ldr	r3, [pc, #128]	; (9234 <_tcc_timer_init+0xf0>)
    91b2:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    91b4:	68fb      	ldr	r3, [r7, #12]
    91b6:	7b1b      	ldrb	r3, [r3, #12]
    91b8:	4619      	mov	r1, r3
    91ba:	6838      	ldr	r0, [r7, #0]
    91bc:	4b1e      	ldr	r3, [pc, #120]	; (9238 <_tcc_timer_init+0xf4>)
    91be:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    91c0:	68fb      	ldr	r3, [r7, #12]
    91c2:	7b5b      	ldrb	r3, [r3, #13]
    91c4:	4619      	mov	r1, r3
    91c6:	6838      	ldr	r0, [r7, #0]
    91c8:	4b1c      	ldr	r3, [pc, #112]	; (923c <_tcc_timer_init+0xf8>)
    91ca:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    91cc:	68fb      	ldr	r3, [r7, #12]
    91ce:	691b      	ldr	r3, [r3, #16]
    91d0:	4619      	mov	r1, r3
    91d2:	6838      	ldr	r0, [r7, #0]
    91d4:	4b1a      	ldr	r3, [pc, #104]	; (9240 <_tcc_timer_init+0xfc>)
    91d6:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    91d8:	68fb      	ldr	r3, [r7, #12]
    91da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    91dc:	4619      	mov	r1, r3
    91de:	6838      	ldr	r0, [r7, #0]
    91e0:	4b18      	ldr	r3, [pc, #96]	; (9244 <_tcc_timer_init+0x100>)
    91e2:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    91e4:	6838      	ldr	r0, [r7, #0]
    91e6:	4b18      	ldr	r3, [pc, #96]	; (9248 <_tcc_timer_init+0x104>)
    91e8:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    91ea:	6879      	ldr	r1, [r7, #4]
    91ec:	6838      	ldr	r0, [r7, #0]
    91ee:	4b17      	ldr	r3, [pc, #92]	; (924c <_tcc_timer_init+0x108>)
    91f0:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    91f2:	68fb      	ldr	r3, [r7, #12]
    91f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    91f8:	4618      	mov	r0, r3
    91fa:	4b15      	ldr	r3, [pc, #84]	; (9250 <_tcc_timer_init+0x10c>)
    91fc:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    91fe:	68fb      	ldr	r3, [r7, #12]
    9200:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    9204:	4618      	mov	r0, r3
    9206:	4b13      	ldr	r3, [pc, #76]	; (9254 <_tcc_timer_init+0x110>)
    9208:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    920a:	68fb      	ldr	r3, [r7, #12]
    920c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    9210:	4618      	mov	r0, r3
    9212:	4b11      	ldr	r3, [pc, #68]	; (9258 <_tcc_timer_init+0x114>)
    9214:	4798      	blx	r3

	return ERR_NONE;
    9216:	2300      	movs	r3, #0
}
    9218:	4618      	mov	r0, r3
    921a:	3710      	adds	r7, #16
    921c:	46bd      	mov	sp, r7
    921e:	bd80      	pop	{r7, pc}
    9220:	00009429 	.word	0x00009429
    9224:	00008ec9 	.word	0x00008ec9
    9228:	00009019 	.word	0x00009019
    922c:	00008ff1 	.word	0x00008ff1
    9230:	00008ea5 	.word	0x00008ea5
    9234:	00009049 	.word	0x00009049
    9238:	00008f31 	.word	0x00008f31
    923c:	0000906d 	.word	0x0000906d
    9240:	0000908b 	.word	0x0000908b
    9244:	000090a9 	.word	0x000090a9
    9248:	00008f4f 	.word	0x00008f4f
    924c:	000090ed 	.word	0x000090ed
    9250:	00008e25 	.word	0x00008e25
    9254:	00008e69 	.word	0x00008e69
    9258:	00008de9 	.word	0x00008de9

0000925c <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    925c:	b580      	push	{r7, lr}
    925e:	b084      	sub	sp, #16
    9260:	af00      	add	r7, sp, #0
    9262:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    9264:	687b      	ldr	r3, [r7, #4]
    9266:	68db      	ldr	r3, [r3, #12]
    9268:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    926a:	68f8      	ldr	r0, [r7, #12]
    926c:	4b0a      	ldr	r3, [pc, #40]	; (9298 <_tcc_timer_deinit+0x3c>)
    926e:	4798      	blx	r3
    9270:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    9272:	68bb      	ldr	r3, [r7, #8]
    9274:	2b00      	cmp	r3, #0
    9276:	d00b      	beq.n	9290 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    9278:	68bb      	ldr	r3, [r7, #8]
    927a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    927e:	4618      	mov	r0, r3
    9280:	4b06      	ldr	r3, [pc, #24]	; (929c <_tcc_timer_deinit+0x40>)
    9282:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    9284:	68f8      	ldr	r0, [r7, #12]
    9286:	4b06      	ldr	r3, [pc, #24]	; (92a0 <_tcc_timer_deinit+0x44>)
    9288:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    928a:	68f8      	ldr	r0, [r7, #12]
    928c:	4b05      	ldr	r3, [pc, #20]	; (92a4 <_tcc_timer_deinit+0x48>)
    928e:	4798      	blx	r3
	}
}
    9290:	bf00      	nop
    9292:	3710      	adds	r7, #16
    9294:	46bd      	mov	sp, r7
    9296:	bd80      	pop	{r7, pc}
    9298:	00009429 	.word	0x00009429
    929c:	00008e25 	.word	0x00008e25
    92a0:	00008ff1 	.word	0x00008ff1
    92a4:	00008f69 	.word	0x00008f69

000092a8 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    92a8:	b580      	push	{r7, lr}
    92aa:	b082      	sub	sp, #8
    92ac:	af00      	add	r7, sp, #0
    92ae:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    92b0:	687b      	ldr	r3, [r7, #4]
    92b2:	68db      	ldr	r3, [r3, #12]
    92b4:	4618      	mov	r0, r3
    92b6:	4b03      	ldr	r3, [pc, #12]	; (92c4 <_tcc_timer_start+0x1c>)
    92b8:	4798      	blx	r3
}
    92ba:	bf00      	nop
    92bc:	3708      	adds	r7, #8
    92be:	46bd      	mov	sp, r7
    92c0:	bd80      	pop	{r7, pc}
    92c2:	bf00      	nop
    92c4:	00008f91 	.word	0x00008f91

000092c8 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    92c8:	b580      	push	{r7, lr}
    92ca:	b082      	sub	sp, #8
    92cc:	af00      	add	r7, sp, #0
    92ce:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    92d0:	687b      	ldr	r3, [r7, #4]
    92d2:	68db      	ldr	r3, [r3, #12]
    92d4:	4618      	mov	r0, r3
    92d6:	4b03      	ldr	r3, [pc, #12]	; (92e4 <_tcc_timer_stop+0x1c>)
    92d8:	4798      	blx	r3
}
    92da:	bf00      	nop
    92dc:	3708      	adds	r7, #8
    92de:	46bd      	mov	sp, r7
    92e0:	bd80      	pop	{r7, pc}
    92e2:	bf00      	nop
    92e4:	00008ff1 	.word	0x00008ff1

000092e8 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    92e8:	b580      	push	{r7, lr}
    92ea:	b082      	sub	sp, #8
    92ec:	af00      	add	r7, sp, #0
    92ee:	6078      	str	r0, [r7, #4]
    92f0:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    92f2:	687b      	ldr	r3, [r7, #4]
    92f4:	68db      	ldr	r3, [r3, #12]
    92f6:	6839      	ldr	r1, [r7, #0]
    92f8:	4618      	mov	r0, r3
    92fa:	4b03      	ldr	r3, [pc, #12]	; (9308 <_tcc_timer_set_period+0x20>)
    92fc:	4798      	blx	r3
}
    92fe:	bf00      	nop
    9300:	3708      	adds	r7, #8
    9302:	46bd      	mov	sp, r7
    9304:	bd80      	pop	{r7, pc}
    9306:	bf00      	nop
    9308:	000090a9 	.word	0x000090a9

0000930c <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    930c:	b580      	push	{r7, lr}
    930e:	b082      	sub	sp, #8
    9310:	af00      	add	r7, sp, #0
    9312:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    9314:	687b      	ldr	r3, [r7, #4]
    9316:	68db      	ldr	r3, [r3, #12]
    9318:	4618      	mov	r0, r3
    931a:	4b03      	ldr	r3, [pc, #12]	; (9328 <_tcc_timer_get_period+0x1c>)
    931c:	4798      	blx	r3
    931e:	4603      	mov	r3, r0
}
    9320:	4618      	mov	r0, r3
    9322:	3708      	adds	r7, #8
    9324:	46bd      	mov	sp, r7
    9326:	bd80      	pop	{r7, pc}
    9328:	000090cd 	.word	0x000090cd

0000932c <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    932c:	b580      	push	{r7, lr}
    932e:	b082      	sub	sp, #8
    9330:	af00      	add	r7, sp, #0
    9332:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    9334:	687b      	ldr	r3, [r7, #4]
    9336:	68db      	ldr	r3, [r3, #12]
    9338:	4618      	mov	r0, r3
    933a:	4b03      	ldr	r3, [pc, #12]	; (9348 <_tcc_timer_is_started+0x1c>)
    933c:	4798      	blx	r3
    933e:	4603      	mov	r3, r0
}
    9340:	4618      	mov	r0, r3
    9342:	3708      	adds	r7, #8
    9344:	46bd      	mov	sp, r7
    9346:	bd80      	pop	{r7, pc}
    9348:	00008fb9 	.word	0x00008fb9

0000934c <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    934c:	b480      	push	{r7}
    934e:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    9350:	4b02      	ldr	r3, [pc, #8]	; (935c <_tcc_get_timer+0x10>)
}
    9352:	4618      	mov	r0, r3
    9354:	46bd      	mov	sp, r7
    9356:	f85d 7b04 	ldr.w	r7, [sp], #4
    935a:	4770      	bx	lr
    935c:	200000f0 	.word	0x200000f0

00009360 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    9360:	b580      	push	{r7, lr}
    9362:	b084      	sub	sp, #16
    9364:	af00      	add	r7, sp, #0
    9366:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    9368:	687b      	ldr	r3, [r7, #4]
    936a:	68db      	ldr	r3, [r3, #12]
    936c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    936e:	68f8      	ldr	r0, [r7, #12]
    9370:	4b08      	ldr	r3, [pc, #32]	; (9394 <_tcc_timer_set_irq+0x34>)
    9372:	4798      	blx	r3
    9374:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    9376:	68bb      	ldr	r3, [r7, #8]
    9378:	2b00      	cmp	r3, #0
    937a:	d006      	beq.n	938a <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    937c:	68bb      	ldr	r3, [r7, #8]
    937e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    9382:	b2db      	uxtb	r3, r3
    9384:	4618      	mov	r0, r3
    9386:	4b04      	ldr	r3, [pc, #16]	; (9398 <_tcc_timer_set_irq+0x38>)
    9388:	4798      	blx	r3
	}
}
    938a:	bf00      	nop
    938c:	3710      	adds	r7, #16
    938e:	46bd      	mov	sp, r7
    9390:	bd80      	pop	{r7, pc}
    9392:	bf00      	nop
    9394:	00009429 	.word	0x00009429
    9398:	00005b19 	.word	0x00005b19

0000939c <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    939c:	b580      	push	{r7, lr}
    939e:	b084      	sub	sp, #16
    93a0:	af00      	add	r7, sp, #0
    93a2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    93a4:	687b      	ldr	r3, [r7, #4]
    93a6:	68db      	ldr	r3, [r3, #12]
    93a8:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    93aa:	68f8      	ldr	r0, [r7, #12]
    93ac:	4b07      	ldr	r3, [pc, #28]	; (93cc <tcc_interrupt_handler+0x30>)
    93ae:	4798      	blx	r3
    93b0:	4603      	mov	r3, r0
    93b2:	2b00      	cmp	r3, #0
    93b4:	d006      	beq.n	93c4 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    93b6:	68f8      	ldr	r0, [r7, #12]
    93b8:	4b05      	ldr	r3, [pc, #20]	; (93d0 <tcc_interrupt_handler+0x34>)
    93ba:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    93bc:	687b      	ldr	r3, [r7, #4]
    93be:	681b      	ldr	r3, [r3, #0]
    93c0:	6878      	ldr	r0, [r7, #4]
    93c2:	4798      	blx	r3
	}
}
    93c4:	bf00      	nop
    93c6:	3710      	adds	r7, #16
    93c8:	46bd      	mov	sp, r7
    93ca:	bd80      	pop	{r7, pc}
    93cc:	00008ef1 	.word	0x00008ef1
    93d0:	00008f17 	.word	0x00008f17

000093d4 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    93d4:	b580      	push	{r7, lr}
    93d6:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    93d8:	4b03      	ldr	r3, [pc, #12]	; (93e8 <TCC0_0_Handler+0x14>)
    93da:	681b      	ldr	r3, [r3, #0]
    93dc:	4618      	mov	r0, r3
    93de:	4b03      	ldr	r3, [pc, #12]	; (93ec <TCC0_0_Handler+0x18>)
    93e0:	4798      	blx	r3
}
    93e2:	bf00      	nop
    93e4:	bd80      	pop	{r7, pc}
    93e6:	bf00      	nop
    93e8:	20002330 	.word	0x20002330
    93ec:	0000939d 	.word	0x0000939d

000093f0 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    93f0:	b580      	push	{r7, lr}
    93f2:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    93f4:	4b03      	ldr	r3, [pc, #12]	; (9404 <TCC1_0_Handler+0x14>)
    93f6:	681b      	ldr	r3, [r3, #0]
    93f8:	4618      	mov	r0, r3
    93fa:	4b03      	ldr	r3, [pc, #12]	; (9408 <TCC1_0_Handler+0x18>)
    93fc:	4798      	blx	r3
}
    93fe:	bf00      	nop
    9400:	bd80      	pop	{r7, pc}
    9402:	bf00      	nop
    9404:	20002334 	.word	0x20002334
    9408:	0000939d 	.word	0x0000939d

0000940c <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    940c:	b580      	push	{r7, lr}
    940e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    9410:	4b03      	ldr	r3, [pc, #12]	; (9420 <TCC2_0_Handler+0x14>)
    9412:	681b      	ldr	r3, [r3, #0]
    9414:	4618      	mov	r0, r3
    9416:	4b03      	ldr	r3, [pc, #12]	; (9424 <TCC2_0_Handler+0x18>)
    9418:	4798      	blx	r3
}
    941a:	bf00      	nop
    941c:	bd80      	pop	{r7, pc}
    941e:	bf00      	nop
    9420:	20002338 	.word	0x20002338
    9424:	0000939d 	.word	0x0000939d

00009428 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    9428:	b480      	push	{r7}
    942a:	b085      	sub	sp, #20
    942c:	af00      	add	r7, sp, #0
    942e:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    9430:	2300      	movs	r3, #0
    9432:	73fb      	strb	r3, [r7, #15]
    9434:	e015      	b.n	9462 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    9436:	7bfa      	ldrb	r2, [r7, #15]
    9438:	490f      	ldr	r1, [pc, #60]	; (9478 <_get_tcc_cfg+0x50>)
    943a:	4613      	mov	r3, r2
    943c:	005b      	lsls	r3, r3, #1
    943e:	4413      	add	r3, r2
    9440:	011b      	lsls	r3, r3, #4
    9442:	440b      	add	r3, r1
    9444:	681a      	ldr	r2, [r3, #0]
    9446:	687b      	ldr	r3, [r7, #4]
    9448:	429a      	cmp	r2, r3
    944a:	d107      	bne.n	945c <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    944c:	7bfa      	ldrb	r2, [r7, #15]
    944e:	4613      	mov	r3, r2
    9450:	005b      	lsls	r3, r3, #1
    9452:	4413      	add	r3, r2
    9454:	011b      	lsls	r3, r3, #4
    9456:	4a08      	ldr	r2, [pc, #32]	; (9478 <_get_tcc_cfg+0x50>)
    9458:	4413      	add	r3, r2
    945a:	e006      	b.n	946a <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    945c:	7bfb      	ldrb	r3, [r7, #15]
    945e:	3301      	adds	r3, #1
    9460:	73fb      	strb	r3, [r7, #15]
    9462:	7bfb      	ldrb	r3, [r7, #15]
    9464:	2b02      	cmp	r3, #2
    9466:	d9e6      	bls.n	9436 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    9468:	2300      	movs	r3, #0
}
    946a:	4618      	mov	r0, r3
    946c:	3714      	adds	r7, #20
    946e:	46bd      	mov	sp, r7
    9470:	f85d 7b04 	ldr.w	r7, [sp], #4
    9474:	4770      	bx	lr
    9476:	bf00      	nop
    9478:	20000060 	.word	0x20000060

0000947c <__NVIC_EnableIRQ>:
{
    947c:	b480      	push	{r7}
    947e:	b083      	sub	sp, #12
    9480:	af00      	add	r7, sp, #0
    9482:	4603      	mov	r3, r0
    9484:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    948a:	2b00      	cmp	r3, #0
    948c:	db0b      	blt.n	94a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    948e:	4909      	ldr	r1, [pc, #36]	; (94b4 <__NVIC_EnableIRQ+0x38>)
    9490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9494:	095b      	lsrs	r3, r3, #5
    9496:	88fa      	ldrh	r2, [r7, #6]
    9498:	f002 021f 	and.w	r2, r2, #31
    949c:	2001      	movs	r0, #1
    949e:	fa00 f202 	lsl.w	r2, r0, r2
    94a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    94a6:	bf00      	nop
    94a8:	370c      	adds	r7, #12
    94aa:	46bd      	mov	sp, r7
    94ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    94b0:	4770      	bx	lr
    94b2:	bf00      	nop
    94b4:	e000e100 	.word	0xe000e100

000094b8 <__NVIC_DisableIRQ>:
{
    94b8:	b480      	push	{r7}
    94ba:	b083      	sub	sp, #12
    94bc:	af00      	add	r7, sp, #0
    94be:	4603      	mov	r3, r0
    94c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    94c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    94c6:	2b00      	cmp	r3, #0
    94c8:	db10      	blt.n	94ec <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    94ca:	490b      	ldr	r1, [pc, #44]	; (94f8 <__NVIC_DisableIRQ+0x40>)
    94cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    94d0:	095b      	lsrs	r3, r3, #5
    94d2:	88fa      	ldrh	r2, [r7, #6]
    94d4:	f002 021f 	and.w	r2, r2, #31
    94d8:	2001      	movs	r0, #1
    94da:	fa00 f202 	lsl.w	r2, r0, r2
    94de:	3320      	adds	r3, #32
    94e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    94e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    94e8:	f3bf 8f6f 	isb	sy
}
    94ec:	bf00      	nop
    94ee:	370c      	adds	r7, #12
    94f0:	46bd      	mov	sp, r7
    94f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    94f6:	4770      	bx	lr
    94f8:	e000e100 	.word	0xe000e100

000094fc <__NVIC_ClearPendingIRQ>:
{
    94fc:	b480      	push	{r7}
    94fe:	b083      	sub	sp, #12
    9500:	af00      	add	r7, sp, #0
    9502:	4603      	mov	r3, r0
    9504:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    950a:	2b00      	cmp	r3, #0
    950c:	db0c      	blt.n	9528 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    950e:	4909      	ldr	r1, [pc, #36]	; (9534 <__NVIC_ClearPendingIRQ+0x38>)
    9510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9514:	095b      	lsrs	r3, r3, #5
    9516:	88fa      	ldrh	r2, [r7, #6]
    9518:	f002 021f 	and.w	r2, r2, #31
    951c:	2001      	movs	r0, #1
    951e:	fa00 f202 	lsl.w	r2, r0, r2
    9522:	3360      	adds	r3, #96	; 0x60
    9524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9528:	bf00      	nop
    952a:	370c      	adds	r7, #12
    952c:	46bd      	mov	sp, r7
    952e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9532:	4770      	bx	lr
    9534:	e000e100 	.word	0xe000e100

00009538 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    9538:	b480      	push	{r7}
    953a:	b083      	sub	sp, #12
    953c:	af00      	add	r7, sp, #0
    953e:	6078      	str	r0, [r7, #4]
    9540:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    9542:	bf00      	nop
    9544:	687b      	ldr	r3, [r7, #4]
    9546:	691a      	ldr	r2, [r3, #16]
    9548:	683b      	ldr	r3, [r7, #0]
    954a:	4013      	ands	r3, r2
    954c:	2b00      	cmp	r3, #0
    954e:	d1f9      	bne.n	9544 <hri_tc_wait_for_sync+0xc>
	};
}
    9550:	bf00      	nop
    9552:	370c      	adds	r7, #12
    9554:	46bd      	mov	sp, r7
    9556:	f85d 7b04 	ldr.w	r7, [sp], #4
    955a:	4770      	bx	lr

0000955c <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    955c:	b480      	push	{r7}
    955e:	b083      	sub	sp, #12
    9560:	af00      	add	r7, sp, #0
    9562:	6078      	str	r0, [r7, #4]
    9564:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    9566:	687b      	ldr	r3, [r7, #4]
    9568:	691a      	ldr	r2, [r3, #16]
    956a:	683b      	ldr	r3, [r7, #0]
    956c:	4013      	ands	r3, r2
    956e:	2b00      	cmp	r3, #0
    9570:	bf14      	ite	ne
    9572:	2301      	movne	r3, #1
    9574:	2300      	moveq	r3, #0
    9576:	b2db      	uxtb	r3, r3
}
    9578:	4618      	mov	r0, r3
    957a:	370c      	adds	r7, #12
    957c:	46bd      	mov	sp, r7
    957e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9582:	4770      	bx	lr

00009584 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    9584:	b480      	push	{r7}
    9586:	b083      	sub	sp, #12
    9588:	af00      	add	r7, sp, #0
    958a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    958c:	687b      	ldr	r3, [r7, #4]
    958e:	7a9b      	ldrb	r3, [r3, #10]
    9590:	b2db      	uxtb	r3, r3
    9592:	f003 0301 	and.w	r3, r3, #1
    9596:	2b00      	cmp	r3, #0
    9598:	bf14      	ite	ne
    959a:	2301      	movne	r3, #1
    959c:	2300      	moveq	r3, #0
    959e:	b2db      	uxtb	r3, r3
}
    95a0:	4618      	mov	r0, r3
    95a2:	370c      	adds	r7, #12
    95a4:	46bd      	mov	sp, r7
    95a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    95aa:	4770      	bx	lr

000095ac <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    95ac:	b480      	push	{r7}
    95ae:	b083      	sub	sp, #12
    95b0:	af00      	add	r7, sp, #0
    95b2:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    95b4:	687b      	ldr	r3, [r7, #4]
    95b6:	2201      	movs	r2, #1
    95b8:	729a      	strb	r2, [r3, #10]
}
    95ba:	bf00      	nop
    95bc:	370c      	adds	r7, #12
    95be:	46bd      	mov	sp, r7
    95c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    95c4:	4770      	bx	lr

000095c6 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    95c6:	b480      	push	{r7}
    95c8:	b083      	sub	sp, #12
    95ca:	af00      	add	r7, sp, #0
    95cc:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    95ce:	687b      	ldr	r3, [r7, #4]
    95d0:	2202      	movs	r2, #2
    95d2:	729a      	strb	r2, [r3, #10]
}
    95d4:	bf00      	nop
    95d6:	370c      	adds	r7, #12
    95d8:	46bd      	mov	sp, r7
    95da:	f85d 7b04 	ldr.w	r7, [sp], #4
    95de:	4770      	bx	lr

000095e0 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    95e0:	b480      	push	{r7}
    95e2:	b083      	sub	sp, #12
    95e4:	af00      	add	r7, sp, #0
    95e6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    95e8:	687b      	ldr	r3, [r7, #4]
    95ea:	2201      	movs	r2, #1
    95ec:	725a      	strb	r2, [r3, #9]
}
    95ee:	bf00      	nop
    95f0:	370c      	adds	r7, #12
    95f2:	46bd      	mov	sp, r7
    95f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    95f8:	4770      	bx	lr

000095fa <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    95fa:	b480      	push	{r7}
    95fc:	b083      	sub	sp, #12
    95fe:	af00      	add	r7, sp, #0
    9600:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    9602:	687b      	ldr	r3, [r7, #4]
    9604:	7a5b      	ldrb	r3, [r3, #9]
    9606:	b2db      	uxtb	r3, r3
    9608:	085b      	lsrs	r3, r3, #1
    960a:	f003 0301 	and.w	r3, r3, #1
    960e:	2b00      	cmp	r3, #0
    9610:	bf14      	ite	ne
    9612:	2301      	movne	r3, #1
    9614:	2300      	moveq	r3, #0
    9616:	b2db      	uxtb	r3, r3
}
    9618:	4618      	mov	r0, r3
    961a:	370c      	adds	r7, #12
    961c:	46bd      	mov	sp, r7
    961e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9622:	4770      	bx	lr

00009624 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    9624:	b580      	push	{r7, lr}
    9626:	b082      	sub	sp, #8
    9628:	af00      	add	r7, sp, #0
    962a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    962c:	687b      	ldr	r3, [r7, #4]
    962e:	681b      	ldr	r3, [r3, #0]
    9630:	f043 0201 	orr.w	r2, r3, #1
    9634:	687b      	ldr	r3, [r7, #4]
    9636:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    9638:	2101      	movs	r1, #1
    963a:	6878      	ldr	r0, [r7, #4]
    963c:	4b02      	ldr	r3, [pc, #8]	; (9648 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    963e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9640:	bf00      	nop
    9642:	3708      	adds	r7, #8
    9644:	46bd      	mov	sp, r7
    9646:	bd80      	pop	{r7, pc}
    9648:	00009539 	.word	0x00009539

0000964c <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    964c:	b580      	push	{r7, lr}
    964e:	b082      	sub	sp, #8
    9650:	af00      	add	r7, sp, #0
    9652:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    9654:	687b      	ldr	r3, [r7, #4]
    9656:	681b      	ldr	r3, [r3, #0]
    9658:	f043 0202 	orr.w	r2, r3, #2
    965c:	687b      	ldr	r3, [r7, #4]
    965e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9660:	2103      	movs	r1, #3
    9662:	6878      	ldr	r0, [r7, #4]
    9664:	4b02      	ldr	r3, [pc, #8]	; (9670 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    9666:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9668:	bf00      	nop
    966a:	3708      	adds	r7, #8
    966c:	46bd      	mov	sp, r7
    966e:	bd80      	pop	{r7, pc}
    9670:	00009539 	.word	0x00009539

00009674 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    9674:	b580      	push	{r7, lr}
    9676:	b084      	sub	sp, #16
    9678:	af00      	add	r7, sp, #0
    967a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    967c:	2103      	movs	r1, #3
    967e:	6878      	ldr	r0, [r7, #4]
    9680:	4b09      	ldr	r3, [pc, #36]	; (96a8 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    9682:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9684:	687b      	ldr	r3, [r7, #4]
    9686:	681b      	ldr	r3, [r3, #0]
    9688:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    968a:	68fb      	ldr	r3, [r7, #12]
    968c:	085b      	lsrs	r3, r3, #1
    968e:	f003 0301 	and.w	r3, r3, #1
    9692:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9694:	68fb      	ldr	r3, [r7, #12]
    9696:	2b00      	cmp	r3, #0
    9698:	bf14      	ite	ne
    969a:	2301      	movne	r3, #1
    969c:	2300      	moveq	r3, #0
    969e:	b2db      	uxtb	r3, r3
}
    96a0:	4618      	mov	r0, r3
    96a2:	3710      	adds	r7, #16
    96a4:	46bd      	mov	sp, r7
    96a6:	bd80      	pop	{r7, pc}
    96a8:	00009539 	.word	0x00009539

000096ac <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    96ac:	b580      	push	{r7, lr}
    96ae:	b082      	sub	sp, #8
    96b0:	af00      	add	r7, sp, #0
    96b2:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    96b4:	687b      	ldr	r3, [r7, #4]
    96b6:	681b      	ldr	r3, [r3, #0]
    96b8:	f023 0202 	bic.w	r2, r3, #2
    96bc:	687b      	ldr	r3, [r7, #4]
    96be:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    96c0:	2103      	movs	r1, #3
    96c2:	6878      	ldr	r0, [r7, #4]
    96c4:	4b02      	ldr	r3, [pc, #8]	; (96d0 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    96c6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    96c8:	bf00      	nop
    96ca:	3708      	adds	r7, #8
    96cc:	46bd      	mov	sp, r7
    96ce:	bd80      	pop	{r7, pc}
    96d0:	00009539 	.word	0x00009539

000096d4 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    96d4:	b480      	push	{r7}
    96d6:	b085      	sub	sp, #20
    96d8:	af00      	add	r7, sp, #0
    96da:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    96dc:	687b      	ldr	r3, [r7, #4]
    96de:	681b      	ldr	r3, [r3, #0]
    96e0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    96e2:	68fb      	ldr	r3, [r7, #12]
    96e4:	089b      	lsrs	r3, r3, #2
    96e6:	f003 0303 	and.w	r3, r3, #3
    96ea:	60fb      	str	r3, [r7, #12]
	return tmp;
    96ec:	68fb      	ldr	r3, [r7, #12]
}
    96ee:	4618      	mov	r0, r3
    96f0:	3714      	adds	r7, #20
    96f2:	46bd      	mov	sp, r7
    96f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    96f8:	4770      	bx	lr
	...

000096fc <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    96fc:	b580      	push	{r7, lr}
    96fe:	b084      	sub	sp, #16
    9700:	af00      	add	r7, sp, #0
    9702:	6078      	str	r0, [r7, #4]
    9704:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9706:	2103      	movs	r1, #3
    9708:	6878      	ldr	r0, [r7, #4]
    970a:	4b07      	ldr	r3, [pc, #28]	; (9728 <hri_tc_get_CTRLA_reg+0x2c>)
    970c:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    970e:	687b      	ldr	r3, [r7, #4]
    9710:	681b      	ldr	r3, [r3, #0]
    9712:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9714:	68fa      	ldr	r2, [r7, #12]
    9716:	683b      	ldr	r3, [r7, #0]
    9718:	4013      	ands	r3, r2
    971a:	60fb      	str	r3, [r7, #12]
	return tmp;
    971c:	68fb      	ldr	r3, [r7, #12]
}
    971e:	4618      	mov	r0, r3
    9720:	3710      	adds	r7, #16
    9722:	46bd      	mov	sp, r7
    9724:	bd80      	pop	{r7, pc}
    9726:	bf00      	nop
    9728:	00009539 	.word	0x00009539

0000972c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    972c:	b580      	push	{r7, lr}
    972e:	b082      	sub	sp, #8
    9730:	af00      	add	r7, sp, #0
    9732:	6078      	str	r0, [r7, #4]
    9734:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    9736:	687b      	ldr	r3, [r7, #4]
    9738:	683a      	ldr	r2, [r7, #0]
    973a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    973c:	2103      	movs	r1, #3
    973e:	6878      	ldr	r0, [r7, #4]
    9740:	4b02      	ldr	r3, [pc, #8]	; (974c <hri_tc_write_CTRLA_reg+0x20>)
    9742:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9744:	bf00      	nop
    9746:	3708      	adds	r7, #8
    9748:	46bd      	mov	sp, r7
    974a:	bd80      	pop	{r7, pc}
    974c:	00009539 	.word	0x00009539

00009750 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    9750:	b480      	push	{r7}
    9752:	b083      	sub	sp, #12
    9754:	af00      	add	r7, sp, #0
    9756:	6078      	str	r0, [r7, #4]
    9758:	460b      	mov	r3, r1
    975a:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    975c:	687b      	ldr	r3, [r7, #4]
    975e:	887a      	ldrh	r2, [r7, #2]
    9760:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    9762:	bf00      	nop
    9764:	370c      	adds	r7, #12
    9766:	46bd      	mov	sp, r7
    9768:	f85d 7b04 	ldr.w	r7, [sp], #4
    976c:	4770      	bx	lr

0000976e <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    976e:	b480      	push	{r7}
    9770:	b083      	sub	sp, #12
    9772:	af00      	add	r7, sp, #0
    9774:	6078      	str	r0, [r7, #4]
    9776:	460b      	mov	r3, r1
    9778:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    977a:	687b      	ldr	r3, [r7, #4]
    977c:	78fa      	ldrb	r2, [r7, #3]
    977e:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    9780:	bf00      	nop
    9782:	370c      	adds	r7, #12
    9784:	46bd      	mov	sp, r7
    9786:	f85d 7b04 	ldr.w	r7, [sp], #4
    978a:	4770      	bx	lr

0000978c <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    978c:	b480      	push	{r7}
    978e:	b083      	sub	sp, #12
    9790:	af00      	add	r7, sp, #0
    9792:	6078      	str	r0, [r7, #4]
    9794:	460b      	mov	r3, r1
    9796:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    9798:	687b      	ldr	r3, [r7, #4]
    979a:	78fa      	ldrb	r2, [r7, #3]
    979c:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    979e:	bf00      	nop
    97a0:	370c      	adds	r7, #12
    97a2:	46bd      	mov	sp, r7
    97a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    97a8:	4770      	bx	lr
	...

000097ac <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    97ac:	b580      	push	{r7, lr}
    97ae:	b082      	sub	sp, #8
    97b0:	af00      	add	r7, sp, #0
    97b2:	6078      	str	r0, [r7, #4]
    97b4:	460b      	mov	r3, r1
    97b6:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    97b8:	687b      	ldr	r3, [r7, #4]
    97ba:	78fa      	ldrb	r2, [r7, #3]
    97bc:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    97be:	2120      	movs	r1, #32
    97c0:	6878      	ldr	r0, [r7, #4]
    97c2:	4b03      	ldr	r3, [pc, #12]	; (97d0 <hri_tccount8_write_PER_reg+0x24>)
    97c4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    97c6:	bf00      	nop
    97c8:	3708      	adds	r7, #8
    97ca:	46bd      	mov	sp, r7
    97cc:	bd80      	pop	{r7, pc}
    97ce:	bf00      	nop
    97d0:	00009539 	.word	0x00009539

000097d4 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    97d4:	b580      	push	{r7, lr}
    97d6:	b082      	sub	sp, #8
    97d8:	af00      	add	r7, sp, #0
    97da:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    97dc:	2120      	movs	r1, #32
    97de:	6878      	ldr	r0, [r7, #4]
    97e0:	4b04      	ldr	r3, [pc, #16]	; (97f4 <hri_tccount8_read_PER_reg+0x20>)
    97e2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    97e4:	687b      	ldr	r3, [r7, #4]
    97e6:	7edb      	ldrb	r3, [r3, #27]
    97e8:	b2db      	uxtb	r3, r3
}
    97ea:	4618      	mov	r0, r3
    97ec:	3708      	adds	r7, #8
    97ee:	46bd      	mov	sp, r7
    97f0:	bd80      	pop	{r7, pc}
    97f2:	bf00      	nop
    97f4:	00009539 	.word	0x00009539

000097f8 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    97f8:	b580      	push	{r7, lr}
    97fa:	b082      	sub	sp, #8
    97fc:	af00      	add	r7, sp, #0
    97fe:	6078      	str	r0, [r7, #4]
    9800:	460b      	mov	r3, r1
    9802:	70fb      	strb	r3, [r7, #3]
    9804:	4613      	mov	r3, r2
    9806:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    9808:	78fb      	ldrb	r3, [r7, #3]
    980a:	687a      	ldr	r2, [r7, #4]
    980c:	4413      	add	r3, r2
    980e:	78ba      	ldrb	r2, [r7, #2]
    9810:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9812:	21c0      	movs	r1, #192	; 0xc0
    9814:	6878      	ldr	r0, [r7, #4]
    9816:	4b03      	ldr	r3, [pc, #12]	; (9824 <hri_tccount8_write_CC_reg+0x2c>)
    9818:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    981a:	bf00      	nop
    981c:	3708      	adds	r7, #8
    981e:	46bd      	mov	sp, r7
    9820:	bd80      	pop	{r7, pc}
    9822:	bf00      	nop
    9824:	00009539 	.word	0x00009539

00009828 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    9828:	b580      	push	{r7, lr}
    982a:	b082      	sub	sp, #8
    982c:	af00      	add	r7, sp, #0
    982e:	6078      	str	r0, [r7, #4]
    9830:	460b      	mov	r3, r1
    9832:	70fb      	strb	r3, [r7, #3]
    9834:	4613      	mov	r3, r2
    9836:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    9838:	78fb      	ldrb	r3, [r7, #3]
    983a:	687a      	ldr	r2, [r7, #4]
    983c:	330c      	adds	r3, #12
    983e:	005b      	lsls	r3, r3, #1
    9840:	4413      	add	r3, r2
    9842:	883a      	ldrh	r2, [r7, #0]
    9844:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9846:	21c0      	movs	r1, #192	; 0xc0
    9848:	6878      	ldr	r0, [r7, #4]
    984a:	4b03      	ldr	r3, [pc, #12]	; (9858 <hri_tccount16_write_CC_reg+0x30>)
    984c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    984e:	bf00      	nop
    9850:	3708      	adds	r7, #8
    9852:	46bd      	mov	sp, r7
    9854:	bd80      	pop	{r7, pc}
    9856:	bf00      	nop
    9858:	00009539 	.word	0x00009539

0000985c <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    985c:	b580      	push	{r7, lr}
    985e:	b082      	sub	sp, #8
    9860:	af00      	add	r7, sp, #0
    9862:	6078      	str	r0, [r7, #4]
    9864:	460b      	mov	r3, r1
    9866:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9868:	21c0      	movs	r1, #192	; 0xc0
    986a:	6878      	ldr	r0, [r7, #4]
    986c:	4b06      	ldr	r3, [pc, #24]	; (9888 <hri_tccount16_read_CC_reg+0x2c>)
    986e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    9870:	78fb      	ldrb	r3, [r7, #3]
    9872:	687a      	ldr	r2, [r7, #4]
    9874:	330c      	adds	r3, #12
    9876:	005b      	lsls	r3, r3, #1
    9878:	4413      	add	r3, r2
    987a:	889b      	ldrh	r3, [r3, #4]
    987c:	b29b      	uxth	r3, r3
}
    987e:	4618      	mov	r0, r3
    9880:	3708      	adds	r7, #8
    9882:	46bd      	mov	sp, r7
    9884:	bd80      	pop	{r7, pc}
    9886:	bf00      	nop
    9888:	00009539 	.word	0x00009539

0000988c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    988c:	b580      	push	{r7, lr}
    988e:	b084      	sub	sp, #16
    9890:	af00      	add	r7, sp, #0
    9892:	60f8      	str	r0, [r7, #12]
    9894:	460b      	mov	r3, r1
    9896:	607a      	str	r2, [r7, #4]
    9898:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    989a:	7afb      	ldrb	r3, [r7, #11]
    989c:	68fa      	ldr	r2, [r7, #12]
    989e:	3306      	adds	r3, #6
    98a0:	009b      	lsls	r3, r3, #2
    98a2:	4413      	add	r3, r2
    98a4:	687a      	ldr	r2, [r7, #4]
    98a6:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    98a8:	21c0      	movs	r1, #192	; 0xc0
    98aa:	68f8      	ldr	r0, [r7, #12]
    98ac:	4b02      	ldr	r3, [pc, #8]	; (98b8 <hri_tccount32_write_CC_reg+0x2c>)
    98ae:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    98b0:	bf00      	nop
    98b2:	3710      	adds	r7, #16
    98b4:	46bd      	mov	sp, r7
    98b6:	bd80      	pop	{r7, pc}
    98b8:	00009539 	.word	0x00009539

000098bc <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    98bc:	b580      	push	{r7, lr}
    98be:	b082      	sub	sp, #8
    98c0:	af00      	add	r7, sp, #0
    98c2:	6078      	str	r0, [r7, #4]
    98c4:	460b      	mov	r3, r1
    98c6:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    98c8:	21c0      	movs	r1, #192	; 0xc0
    98ca:	6878      	ldr	r0, [r7, #4]
    98cc:	4b05      	ldr	r3, [pc, #20]	; (98e4 <hri_tccount32_read_CC_reg+0x28>)
    98ce:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    98d0:	78fb      	ldrb	r3, [r7, #3]
    98d2:	687a      	ldr	r2, [r7, #4]
    98d4:	3306      	adds	r3, #6
    98d6:	009b      	lsls	r3, r3, #2
    98d8:	4413      	add	r3, r2
    98da:	685b      	ldr	r3, [r3, #4]
}
    98dc:	4618      	mov	r0, r3
    98de:	3708      	adds	r7, #8
    98e0:	46bd      	mov	sp, r7
    98e2:	bd80      	pop	{r7, pc}
    98e4:	00009539 	.word	0x00009539

000098e8 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    98e8:	b580      	push	{r7, lr}
    98ea:	b084      	sub	sp, #16
    98ec:	af00      	add	r7, sp, #0
    98ee:	6078      	str	r0, [r7, #4]
    98f0:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    98f2:	6838      	ldr	r0, [r7, #0]
    98f4:	4b93      	ldr	r3, [pc, #588]	; (9b44 <_tc_timer_init+0x25c>)
    98f6:	4798      	blx	r3
    98f8:	4603      	mov	r3, r0
    98fa:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    98fc:	687b      	ldr	r3, [r7, #4]
    98fe:	683a      	ldr	r2, [r7, #0]
    9900:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    9902:	22a4      	movs	r2, #164	; 0xa4
    9904:	4990      	ldr	r1, [pc, #576]	; (9b48 <_tc_timer_init+0x260>)
    9906:	2001      	movs	r0, #1
    9908:	4b90      	ldr	r3, [pc, #576]	; (9b4c <_tc_timer_init+0x264>)
    990a:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    990c:	2101      	movs	r1, #1
    990e:	6838      	ldr	r0, [r7, #0]
    9910:	4b8f      	ldr	r3, [pc, #572]	; (9b50 <_tc_timer_init+0x268>)
    9912:	4798      	blx	r3
    9914:	4603      	mov	r3, r0
    9916:	f083 0301 	eor.w	r3, r3, #1
    991a:	b2db      	uxtb	r3, r3
    991c:	2b00      	cmp	r3, #0
    991e:	d011      	beq.n	9944 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    9920:	2102      	movs	r1, #2
    9922:	6838      	ldr	r0, [r7, #0]
    9924:	4b8b      	ldr	r3, [pc, #556]	; (9b54 <_tc_timer_init+0x26c>)
    9926:	4798      	blx	r3
    9928:	4603      	mov	r3, r0
    992a:	2b00      	cmp	r3, #0
    992c:	d006      	beq.n	993c <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    992e:	6838      	ldr	r0, [r7, #0]
    9930:	4b89      	ldr	r3, [pc, #548]	; (9b58 <_tc_timer_init+0x270>)
    9932:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    9934:	2102      	movs	r1, #2
    9936:	6838      	ldr	r0, [r7, #0]
    9938:	4b88      	ldr	r3, [pc, #544]	; (9b5c <_tc_timer_init+0x274>)
    993a:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    993c:	2101      	movs	r1, #1
    993e:	6838      	ldr	r0, [r7, #0]
    9940:	4b87      	ldr	r3, [pc, #540]	; (9b60 <_tc_timer_init+0x278>)
    9942:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    9944:	2101      	movs	r1, #1
    9946:	6838      	ldr	r0, [r7, #0]
    9948:	4b84      	ldr	r3, [pc, #528]	; (9b5c <_tc_timer_init+0x274>)
    994a:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    994c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9950:	4984      	ldr	r1, [pc, #528]	; (9b64 <_tc_timer_init+0x27c>)
    9952:	4613      	mov	r3, r2
    9954:	009b      	lsls	r3, r3, #2
    9956:	4413      	add	r3, r2
    9958:	009b      	lsls	r3, r3, #2
    995a:	440b      	add	r3, r1
    995c:	3304      	adds	r3, #4
    995e:	681b      	ldr	r3, [r3, #0]
    9960:	4619      	mov	r1, r3
    9962:	6838      	ldr	r0, [r7, #0]
    9964:	4b7e      	ldr	r3, [pc, #504]	; (9b60 <_tc_timer_init+0x278>)
    9966:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    9968:	f997 200f 	ldrsb.w	r2, [r7, #15]
    996c:	497d      	ldr	r1, [pc, #500]	; (9b64 <_tc_timer_init+0x27c>)
    996e:	4613      	mov	r3, r2
    9970:	009b      	lsls	r3, r3, #2
    9972:	4413      	add	r3, r2
    9974:	009b      	lsls	r3, r3, #2
    9976:	440b      	add	r3, r1
    9978:	330a      	adds	r3, #10
    997a:	781b      	ldrb	r3, [r3, #0]
    997c:	4619      	mov	r1, r3
    997e:	6838      	ldr	r0, [r7, #0]
    9980:	4b79      	ldr	r3, [pc, #484]	; (9b68 <_tc_timer_init+0x280>)
    9982:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    9984:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9988:	4976      	ldr	r1, [pc, #472]	; (9b64 <_tc_timer_init+0x27c>)
    998a:	4613      	mov	r3, r2
    998c:	009b      	lsls	r3, r3, #2
    998e:	4413      	add	r3, r2
    9990:	009b      	lsls	r3, r3, #2
    9992:	440b      	add	r3, r1
    9994:	3308      	adds	r3, #8
    9996:	881b      	ldrh	r3, [r3, #0]
    9998:	4619      	mov	r1, r3
    999a:	6838      	ldr	r0, [r7, #0]
    999c:	4b73      	ldr	r3, [pc, #460]	; (9b6c <_tc_timer_init+0x284>)
    999e:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    99a0:	2101      	movs	r1, #1
    99a2:	6838      	ldr	r0, [r7, #0]
    99a4:	4b72      	ldr	r3, [pc, #456]	; (9b70 <_tc_timer_init+0x288>)
    99a6:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    99a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    99ac:	496d      	ldr	r1, [pc, #436]	; (9b64 <_tc_timer_init+0x27c>)
    99ae:	4613      	mov	r3, r2
    99b0:	009b      	lsls	r3, r3, #2
    99b2:	4413      	add	r3, r2
    99b4:	009b      	lsls	r3, r3, #2
    99b6:	440b      	add	r3, r1
    99b8:	3304      	adds	r3, #4
    99ba:	681b      	ldr	r3, [r3, #0]
    99bc:	f003 030c 	and.w	r3, r3, #12
    99c0:	2b08      	cmp	r3, #8
    99c2:	d11e      	bne.n	9a02 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    99c4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    99c8:	4966      	ldr	r1, [pc, #408]	; (9b64 <_tc_timer_init+0x27c>)
    99ca:	4613      	mov	r3, r2
    99cc:	009b      	lsls	r3, r3, #2
    99ce:	4413      	add	r3, r2
    99d0:	009b      	lsls	r3, r3, #2
    99d2:	440b      	add	r3, r1
    99d4:	330c      	adds	r3, #12
    99d6:	681b      	ldr	r3, [r3, #0]
    99d8:	461a      	mov	r2, r3
    99da:	2100      	movs	r1, #0
    99dc:	6838      	ldr	r0, [r7, #0]
    99de:	4b65      	ldr	r3, [pc, #404]	; (9b74 <_tc_timer_init+0x28c>)
    99e0:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    99e2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    99e6:	495f      	ldr	r1, [pc, #380]	; (9b64 <_tc_timer_init+0x27c>)
    99e8:	4613      	mov	r3, r2
    99ea:	009b      	lsls	r3, r3, #2
    99ec:	4413      	add	r3, r2
    99ee:	009b      	lsls	r3, r3, #2
    99f0:	440b      	add	r3, r1
    99f2:	3310      	adds	r3, #16
    99f4:	681b      	ldr	r3, [r3, #0]
    99f6:	461a      	mov	r2, r3
    99f8:	2101      	movs	r1, #1
    99fa:	6838      	ldr	r0, [r7, #0]
    99fc:	4b5d      	ldr	r3, [pc, #372]	; (9b74 <_tc_timer_init+0x28c>)
    99fe:	4798      	blx	r3
    9a00:	e06a      	b.n	9ad8 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    9a02:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a06:	4957      	ldr	r1, [pc, #348]	; (9b64 <_tc_timer_init+0x27c>)
    9a08:	4613      	mov	r3, r2
    9a0a:	009b      	lsls	r3, r3, #2
    9a0c:	4413      	add	r3, r2
    9a0e:	009b      	lsls	r3, r3, #2
    9a10:	440b      	add	r3, r1
    9a12:	3304      	adds	r3, #4
    9a14:	681b      	ldr	r3, [r3, #0]
    9a16:	f003 030c 	and.w	r3, r3, #12
    9a1a:	2b00      	cmp	r3, #0
    9a1c:	d120      	bne.n	9a60 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    9a1e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a22:	4950      	ldr	r1, [pc, #320]	; (9b64 <_tc_timer_init+0x27c>)
    9a24:	4613      	mov	r3, r2
    9a26:	009b      	lsls	r3, r3, #2
    9a28:	4413      	add	r3, r2
    9a2a:	009b      	lsls	r3, r3, #2
    9a2c:	440b      	add	r3, r1
    9a2e:	330c      	adds	r3, #12
    9a30:	681b      	ldr	r3, [r3, #0]
    9a32:	b29b      	uxth	r3, r3
    9a34:	461a      	mov	r2, r3
    9a36:	2100      	movs	r1, #0
    9a38:	6838      	ldr	r0, [r7, #0]
    9a3a:	4b4f      	ldr	r3, [pc, #316]	; (9b78 <_tc_timer_init+0x290>)
    9a3c:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    9a3e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a42:	4948      	ldr	r1, [pc, #288]	; (9b64 <_tc_timer_init+0x27c>)
    9a44:	4613      	mov	r3, r2
    9a46:	009b      	lsls	r3, r3, #2
    9a48:	4413      	add	r3, r2
    9a4a:	009b      	lsls	r3, r3, #2
    9a4c:	440b      	add	r3, r1
    9a4e:	3310      	adds	r3, #16
    9a50:	681b      	ldr	r3, [r3, #0]
    9a52:	b29b      	uxth	r3, r3
    9a54:	461a      	mov	r2, r3
    9a56:	2101      	movs	r1, #1
    9a58:	6838      	ldr	r0, [r7, #0]
    9a5a:	4b47      	ldr	r3, [pc, #284]	; (9b78 <_tc_timer_init+0x290>)
    9a5c:	4798      	blx	r3
    9a5e:	e03b      	b.n	9ad8 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    9a60:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a64:	493f      	ldr	r1, [pc, #252]	; (9b64 <_tc_timer_init+0x27c>)
    9a66:	4613      	mov	r3, r2
    9a68:	009b      	lsls	r3, r3, #2
    9a6a:	4413      	add	r3, r2
    9a6c:	009b      	lsls	r3, r3, #2
    9a6e:	440b      	add	r3, r1
    9a70:	3304      	adds	r3, #4
    9a72:	681b      	ldr	r3, [r3, #0]
    9a74:	f003 030c 	and.w	r3, r3, #12
    9a78:	2b04      	cmp	r3, #4
    9a7a:	d12d      	bne.n	9ad8 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    9a7c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a80:	4938      	ldr	r1, [pc, #224]	; (9b64 <_tc_timer_init+0x27c>)
    9a82:	4613      	mov	r3, r2
    9a84:	009b      	lsls	r3, r3, #2
    9a86:	4413      	add	r3, r2
    9a88:	009b      	lsls	r3, r3, #2
    9a8a:	440b      	add	r3, r1
    9a8c:	330c      	adds	r3, #12
    9a8e:	681b      	ldr	r3, [r3, #0]
    9a90:	b2db      	uxtb	r3, r3
    9a92:	461a      	mov	r2, r3
    9a94:	2100      	movs	r1, #0
    9a96:	6838      	ldr	r0, [r7, #0]
    9a98:	4b38      	ldr	r3, [pc, #224]	; (9b7c <_tc_timer_init+0x294>)
    9a9a:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    9a9c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9aa0:	4930      	ldr	r1, [pc, #192]	; (9b64 <_tc_timer_init+0x27c>)
    9aa2:	4613      	mov	r3, r2
    9aa4:	009b      	lsls	r3, r3, #2
    9aa6:	4413      	add	r3, r2
    9aa8:	009b      	lsls	r3, r3, #2
    9aaa:	440b      	add	r3, r1
    9aac:	3310      	adds	r3, #16
    9aae:	681b      	ldr	r3, [r3, #0]
    9ab0:	b2db      	uxtb	r3, r3
    9ab2:	461a      	mov	r2, r3
    9ab4:	2101      	movs	r1, #1
    9ab6:	6838      	ldr	r0, [r7, #0]
    9ab8:	4b30      	ldr	r3, [pc, #192]	; (9b7c <_tc_timer_init+0x294>)
    9aba:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    9abc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9ac0:	4928      	ldr	r1, [pc, #160]	; (9b64 <_tc_timer_init+0x27c>)
    9ac2:	4613      	mov	r3, r2
    9ac4:	009b      	lsls	r3, r3, #2
    9ac6:	4413      	add	r3, r2
    9ac8:	009b      	lsls	r3, r3, #2
    9aca:	440b      	add	r3, r1
    9acc:	330b      	adds	r3, #11
    9ace:	781b      	ldrb	r3, [r3, #0]
    9ad0:	4619      	mov	r1, r3
    9ad2:	6838      	ldr	r0, [r7, #0]
    9ad4:	4b2a      	ldr	r3, [pc, #168]	; (9b80 <_tc_timer_init+0x298>)
    9ad6:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    9ad8:	6838      	ldr	r0, [r7, #0]
    9ada:	4b2a      	ldr	r3, [pc, #168]	; (9b84 <_tc_timer_init+0x29c>)
    9adc:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    9ade:	6879      	ldr	r1, [r7, #4]
    9ae0:	6838      	ldr	r0, [r7, #0]
    9ae2:	4b29      	ldr	r3, [pc, #164]	; (9b88 <_tc_timer_init+0x2a0>)
    9ae4:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    9ae6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9aea:	491e      	ldr	r1, [pc, #120]	; (9b64 <_tc_timer_init+0x27c>)
    9aec:	4613      	mov	r3, r2
    9aee:	009b      	lsls	r3, r3, #2
    9af0:	4413      	add	r3, r2
    9af2:	009b      	lsls	r3, r3, #2
    9af4:	440b      	add	r3, r1
    9af6:	3302      	adds	r3, #2
    9af8:	f9b3 3000 	ldrsh.w	r3, [r3]
    9afc:	4618      	mov	r0, r3
    9afe:	4b23      	ldr	r3, [pc, #140]	; (9b8c <_tc_timer_init+0x2a4>)
    9b00:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    9b02:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b06:	4917      	ldr	r1, [pc, #92]	; (9b64 <_tc_timer_init+0x27c>)
    9b08:	4613      	mov	r3, r2
    9b0a:	009b      	lsls	r3, r3, #2
    9b0c:	4413      	add	r3, r2
    9b0e:	009b      	lsls	r3, r3, #2
    9b10:	440b      	add	r3, r1
    9b12:	3302      	adds	r3, #2
    9b14:	f9b3 3000 	ldrsh.w	r3, [r3]
    9b18:	4618      	mov	r0, r3
    9b1a:	4b1d      	ldr	r3, [pc, #116]	; (9b90 <_tc_timer_init+0x2a8>)
    9b1c:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    9b1e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b22:	4910      	ldr	r1, [pc, #64]	; (9b64 <_tc_timer_init+0x27c>)
    9b24:	4613      	mov	r3, r2
    9b26:	009b      	lsls	r3, r3, #2
    9b28:	4413      	add	r3, r2
    9b2a:	009b      	lsls	r3, r3, #2
    9b2c:	440b      	add	r3, r1
    9b2e:	3302      	adds	r3, #2
    9b30:	f9b3 3000 	ldrsh.w	r3, [r3]
    9b34:	4618      	mov	r0, r3
    9b36:	4b17      	ldr	r3, [pc, #92]	; (9b94 <_tc_timer_init+0x2ac>)
    9b38:	4798      	blx	r3

	return ERR_NONE;
    9b3a:	2300      	movs	r3, #0
}
    9b3c:	4618      	mov	r0, r3
    9b3e:	3710      	adds	r7, #16
    9b40:	46bd      	mov	sp, r7
    9b42:	bd80      	pop	{r7, pc}
    9b44:	0000a139 	.word	0x0000a139
    9b48:	0001aec0 	.word	0x0001aec0
    9b4c:	00004c81 	.word	0x00004c81
    9b50:	0000955d 	.word	0x0000955d
    9b54:	000096fd 	.word	0x000096fd
    9b58:	000096ad 	.word	0x000096ad
    9b5c:	00009539 	.word	0x00009539
    9b60:	0000972d 	.word	0x0000972d
    9b64:	20000110 	.word	0x20000110
    9b68:	0000978d 	.word	0x0000978d
    9b6c:	00009751 	.word	0x00009751
    9b70:	0000976f 	.word	0x0000976f
    9b74:	0000988d 	.word	0x0000988d
    9b78:	00009829 	.word	0x00009829
    9b7c:	000097f9 	.word	0x000097f9
    9b80:	000097ad 	.word	0x000097ad
    9b84:	000095e1 	.word	0x000095e1
    9b88:	0000a1a1 	.word	0x0000a1a1
    9b8c:	000094b9 	.word	0x000094b9
    9b90:	000094fd 	.word	0x000094fd
    9b94:	0000947d 	.word	0x0000947d

00009b98 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    9b98:	b580      	push	{r7, lr}
    9b9a:	b084      	sub	sp, #16
    9b9c:	af00      	add	r7, sp, #0
    9b9e:	6078      	str	r0, [r7, #4]
    9ba0:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    9ba2:	6838      	ldr	r0, [r7, #0]
    9ba4:	4b73      	ldr	r3, [pc, #460]	; (9d74 <_pwm_init+0x1dc>)
    9ba6:	4798      	blx	r3
    9ba8:	4603      	mov	r3, r0
    9baa:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    9bac:	687b      	ldr	r3, [r7, #4]
    9bae:	683a      	ldr	r2, [r7, #0]
    9bb0:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    9bb2:	2101      	movs	r1, #1
    9bb4:	6838      	ldr	r0, [r7, #0]
    9bb6:	4b70      	ldr	r3, [pc, #448]	; (9d78 <_pwm_init+0x1e0>)
    9bb8:	4798      	blx	r3
    9bba:	4603      	mov	r3, r0
    9bbc:	f083 0301 	eor.w	r3, r3, #1
    9bc0:	b2db      	uxtb	r3, r3
    9bc2:	2b00      	cmp	r3, #0
    9bc4:	d011      	beq.n	9bea <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    9bc6:	2102      	movs	r1, #2
    9bc8:	6838      	ldr	r0, [r7, #0]
    9bca:	4b6c      	ldr	r3, [pc, #432]	; (9d7c <_pwm_init+0x1e4>)
    9bcc:	4798      	blx	r3
    9bce:	4603      	mov	r3, r0
    9bd0:	2b00      	cmp	r3, #0
    9bd2:	d006      	beq.n	9be2 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    9bd4:	6838      	ldr	r0, [r7, #0]
    9bd6:	4b6a      	ldr	r3, [pc, #424]	; (9d80 <_pwm_init+0x1e8>)
    9bd8:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    9bda:	2102      	movs	r1, #2
    9bdc:	6838      	ldr	r0, [r7, #0]
    9bde:	4b69      	ldr	r3, [pc, #420]	; (9d84 <_pwm_init+0x1ec>)
    9be0:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    9be2:	2101      	movs	r1, #1
    9be4:	6838      	ldr	r0, [r7, #0]
    9be6:	4b68      	ldr	r3, [pc, #416]	; (9d88 <_pwm_init+0x1f0>)
    9be8:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    9bea:	2101      	movs	r1, #1
    9bec:	6838      	ldr	r0, [r7, #0]
    9bee:	4b65      	ldr	r3, [pc, #404]	; (9d84 <_pwm_init+0x1ec>)
    9bf0:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    9bf2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9bf6:	4965      	ldr	r1, [pc, #404]	; (9d8c <_pwm_init+0x1f4>)
    9bf8:	4613      	mov	r3, r2
    9bfa:	009b      	lsls	r3, r3, #2
    9bfc:	4413      	add	r3, r2
    9bfe:	009b      	lsls	r3, r3, #2
    9c00:	440b      	add	r3, r1
    9c02:	3304      	adds	r3, #4
    9c04:	681b      	ldr	r3, [r3, #0]
    9c06:	4619      	mov	r1, r3
    9c08:	6838      	ldr	r0, [r7, #0]
    9c0a:	4b5f      	ldr	r3, [pc, #380]	; (9d88 <_pwm_init+0x1f0>)
    9c0c:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    9c0e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c12:	495e      	ldr	r1, [pc, #376]	; (9d8c <_pwm_init+0x1f4>)
    9c14:	4613      	mov	r3, r2
    9c16:	009b      	lsls	r3, r3, #2
    9c18:	4413      	add	r3, r2
    9c1a:	009b      	lsls	r3, r3, #2
    9c1c:	440b      	add	r3, r1
    9c1e:	330a      	adds	r3, #10
    9c20:	781b      	ldrb	r3, [r3, #0]
    9c22:	4619      	mov	r1, r3
    9c24:	6838      	ldr	r0, [r7, #0]
    9c26:	4b5a      	ldr	r3, [pc, #360]	; (9d90 <_pwm_init+0x1f8>)
    9c28:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    9c2a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c2e:	4957      	ldr	r1, [pc, #348]	; (9d8c <_pwm_init+0x1f4>)
    9c30:	4613      	mov	r3, r2
    9c32:	009b      	lsls	r3, r3, #2
    9c34:	4413      	add	r3, r2
    9c36:	009b      	lsls	r3, r3, #2
    9c38:	440b      	add	r3, r1
    9c3a:	3308      	adds	r3, #8
    9c3c:	881b      	ldrh	r3, [r3, #0]
    9c3e:	4619      	mov	r1, r3
    9c40:	6838      	ldr	r0, [r7, #0]
    9c42:	4b54      	ldr	r3, [pc, #336]	; (9d94 <_pwm_init+0x1fc>)
    9c44:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    9c46:	2103      	movs	r1, #3
    9c48:	6838      	ldr	r0, [r7, #0]
    9c4a:	4b53      	ldr	r3, [pc, #332]	; (9d98 <_pwm_init+0x200>)
    9c4c:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    9c4e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c52:	494e      	ldr	r1, [pc, #312]	; (9d8c <_pwm_init+0x1f4>)
    9c54:	4613      	mov	r3, r2
    9c56:	009b      	lsls	r3, r3, #2
    9c58:	4413      	add	r3, r2
    9c5a:	009b      	lsls	r3, r3, #2
    9c5c:	440b      	add	r3, r1
    9c5e:	3304      	adds	r3, #4
    9c60:	681b      	ldr	r3, [r3, #0]
    9c62:	f003 030c 	and.w	r3, r3, #12
    9c66:	2b08      	cmp	r3, #8
    9c68:	d11e      	bne.n	9ca8 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    9c6a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c6e:	4947      	ldr	r1, [pc, #284]	; (9d8c <_pwm_init+0x1f4>)
    9c70:	4613      	mov	r3, r2
    9c72:	009b      	lsls	r3, r3, #2
    9c74:	4413      	add	r3, r2
    9c76:	009b      	lsls	r3, r3, #2
    9c78:	440b      	add	r3, r1
    9c7a:	330c      	adds	r3, #12
    9c7c:	681b      	ldr	r3, [r3, #0]
    9c7e:	461a      	mov	r2, r3
    9c80:	2100      	movs	r1, #0
    9c82:	6838      	ldr	r0, [r7, #0]
    9c84:	4b45      	ldr	r3, [pc, #276]	; (9d9c <_pwm_init+0x204>)
    9c86:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    9c88:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c8c:	493f      	ldr	r1, [pc, #252]	; (9d8c <_pwm_init+0x1f4>)
    9c8e:	4613      	mov	r3, r2
    9c90:	009b      	lsls	r3, r3, #2
    9c92:	4413      	add	r3, r2
    9c94:	009b      	lsls	r3, r3, #2
    9c96:	440b      	add	r3, r1
    9c98:	3310      	adds	r3, #16
    9c9a:	681b      	ldr	r3, [r3, #0]
    9c9c:	461a      	mov	r2, r3
    9c9e:	2101      	movs	r1, #1
    9ca0:	6838      	ldr	r0, [r7, #0]
    9ca2:	4b3e      	ldr	r3, [pc, #248]	; (9d9c <_pwm_init+0x204>)
    9ca4:	4798      	blx	r3
    9ca6:	e031      	b.n	9d0c <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    9ca8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9cac:	4937      	ldr	r1, [pc, #220]	; (9d8c <_pwm_init+0x1f4>)
    9cae:	4613      	mov	r3, r2
    9cb0:	009b      	lsls	r3, r3, #2
    9cb2:	4413      	add	r3, r2
    9cb4:	009b      	lsls	r3, r3, #2
    9cb6:	440b      	add	r3, r1
    9cb8:	3304      	adds	r3, #4
    9cba:	681b      	ldr	r3, [r3, #0]
    9cbc:	f003 030c 	and.w	r3, r3, #12
    9cc0:	2b00      	cmp	r3, #0
    9cc2:	d120      	bne.n	9d06 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    9cc4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9cc8:	4930      	ldr	r1, [pc, #192]	; (9d8c <_pwm_init+0x1f4>)
    9cca:	4613      	mov	r3, r2
    9ccc:	009b      	lsls	r3, r3, #2
    9cce:	4413      	add	r3, r2
    9cd0:	009b      	lsls	r3, r3, #2
    9cd2:	440b      	add	r3, r1
    9cd4:	330c      	adds	r3, #12
    9cd6:	681b      	ldr	r3, [r3, #0]
    9cd8:	b29b      	uxth	r3, r3
    9cda:	461a      	mov	r2, r3
    9cdc:	2100      	movs	r1, #0
    9cde:	6838      	ldr	r0, [r7, #0]
    9ce0:	4b2f      	ldr	r3, [pc, #188]	; (9da0 <_pwm_init+0x208>)
    9ce2:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    9ce4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9ce8:	4928      	ldr	r1, [pc, #160]	; (9d8c <_pwm_init+0x1f4>)
    9cea:	4613      	mov	r3, r2
    9cec:	009b      	lsls	r3, r3, #2
    9cee:	4413      	add	r3, r2
    9cf0:	009b      	lsls	r3, r3, #2
    9cf2:	440b      	add	r3, r1
    9cf4:	3310      	adds	r3, #16
    9cf6:	681b      	ldr	r3, [r3, #0]
    9cf8:	b29b      	uxth	r3, r3
    9cfa:	461a      	mov	r2, r3
    9cfc:	2101      	movs	r1, #1
    9cfe:	6838      	ldr	r0, [r7, #0]
    9d00:	4b27      	ldr	r3, [pc, #156]	; (9da0 <_pwm_init+0x208>)
    9d02:	4798      	blx	r3
    9d04:	e002      	b.n	9d0c <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    9d06:	f04f 33ff 	mov.w	r3, #4294967295
    9d0a:	e02e      	b.n	9d6a <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    9d0c:	6879      	ldr	r1, [r7, #4]
    9d0e:	6838      	ldr	r0, [r7, #0]
    9d10:	4b24      	ldr	r3, [pc, #144]	; (9da4 <_pwm_init+0x20c>)
    9d12:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    9d14:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9d18:	491c      	ldr	r1, [pc, #112]	; (9d8c <_pwm_init+0x1f4>)
    9d1a:	4613      	mov	r3, r2
    9d1c:	009b      	lsls	r3, r3, #2
    9d1e:	4413      	add	r3, r2
    9d20:	009b      	lsls	r3, r3, #2
    9d22:	440b      	add	r3, r1
    9d24:	3302      	adds	r3, #2
    9d26:	f9b3 3000 	ldrsh.w	r3, [r3]
    9d2a:	4618      	mov	r0, r3
    9d2c:	4b1e      	ldr	r3, [pc, #120]	; (9da8 <_pwm_init+0x210>)
    9d2e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    9d30:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9d34:	4915      	ldr	r1, [pc, #84]	; (9d8c <_pwm_init+0x1f4>)
    9d36:	4613      	mov	r3, r2
    9d38:	009b      	lsls	r3, r3, #2
    9d3a:	4413      	add	r3, r2
    9d3c:	009b      	lsls	r3, r3, #2
    9d3e:	440b      	add	r3, r1
    9d40:	3302      	adds	r3, #2
    9d42:	f9b3 3000 	ldrsh.w	r3, [r3]
    9d46:	4618      	mov	r0, r3
    9d48:	4b18      	ldr	r3, [pc, #96]	; (9dac <_pwm_init+0x214>)
    9d4a:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    9d4c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9d50:	490e      	ldr	r1, [pc, #56]	; (9d8c <_pwm_init+0x1f4>)
    9d52:	4613      	mov	r3, r2
    9d54:	009b      	lsls	r3, r3, #2
    9d56:	4413      	add	r3, r2
    9d58:	009b      	lsls	r3, r3, #2
    9d5a:	440b      	add	r3, r1
    9d5c:	3302      	adds	r3, #2
    9d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
    9d62:	4618      	mov	r0, r3
    9d64:	4b12      	ldr	r3, [pc, #72]	; (9db0 <_pwm_init+0x218>)
    9d66:	4798      	blx	r3

	return 0;
    9d68:	2300      	movs	r3, #0
}
    9d6a:	4618      	mov	r0, r3
    9d6c:	3710      	adds	r7, #16
    9d6e:	46bd      	mov	sp, r7
    9d70:	bd80      	pop	{r7, pc}
    9d72:	bf00      	nop
    9d74:	0000a139 	.word	0x0000a139
    9d78:	0000955d 	.word	0x0000955d
    9d7c:	000096fd 	.word	0x000096fd
    9d80:	000096ad 	.word	0x000096ad
    9d84:	00009539 	.word	0x00009539
    9d88:	0000972d 	.word	0x0000972d
    9d8c:	20000110 	.word	0x20000110
    9d90:	0000978d 	.word	0x0000978d
    9d94:	00009751 	.word	0x00009751
    9d98:	0000976f 	.word	0x0000976f
    9d9c:	0000988d 	.word	0x0000988d
    9da0:	00009829 	.word	0x00009829
    9da4:	0000a1a1 	.word	0x0000a1a1
    9da8:	000094b9 	.word	0x000094b9
    9dac:	000094fd 	.word	0x000094fd
    9db0:	0000947d 	.word	0x0000947d

00009db4 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    9db4:	b580      	push	{r7, lr}
    9db6:	b084      	sub	sp, #16
    9db8:	af00      	add	r7, sp, #0
    9dba:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9dbc:	687b      	ldr	r3, [r7, #4]
    9dbe:	68db      	ldr	r3, [r3, #12]
    9dc0:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    9dc2:	68f8      	ldr	r0, [r7, #12]
    9dc4:	4b10      	ldr	r3, [pc, #64]	; (9e08 <_tc_timer_deinit+0x54>)
    9dc6:	4798      	blx	r3
    9dc8:	4603      	mov	r3, r0
    9dca:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    9dcc:	22f9      	movs	r2, #249	; 0xf9
    9dce:	490f      	ldr	r1, [pc, #60]	; (9e0c <_tc_timer_deinit+0x58>)
    9dd0:	2001      	movs	r0, #1
    9dd2:	4b0f      	ldr	r3, [pc, #60]	; (9e10 <_tc_timer_deinit+0x5c>)
    9dd4:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    9dd6:	f997 200b 	ldrsb.w	r2, [r7, #11]
    9dda:	490e      	ldr	r1, [pc, #56]	; (9e14 <_tc_timer_deinit+0x60>)
    9ddc:	4613      	mov	r3, r2
    9dde:	009b      	lsls	r3, r3, #2
    9de0:	4413      	add	r3, r2
    9de2:	009b      	lsls	r3, r3, #2
    9de4:	440b      	add	r3, r1
    9de6:	3302      	adds	r3, #2
    9de8:	f9b3 3000 	ldrsh.w	r3, [r3]
    9dec:	4618      	mov	r0, r3
    9dee:	4b0a      	ldr	r3, [pc, #40]	; (9e18 <_tc_timer_deinit+0x64>)
    9df0:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    9df2:	68f8      	ldr	r0, [r7, #12]
    9df4:	4b09      	ldr	r3, [pc, #36]	; (9e1c <_tc_timer_deinit+0x68>)
    9df6:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    9df8:	68f8      	ldr	r0, [r7, #12]
    9dfa:	4b09      	ldr	r3, [pc, #36]	; (9e20 <_tc_timer_deinit+0x6c>)
    9dfc:	4798      	blx	r3
}
    9dfe:	bf00      	nop
    9e00:	3710      	adds	r7, #16
    9e02:	46bd      	mov	sp, r7
    9e04:	bd80      	pop	{r7, pc}
    9e06:	bf00      	nop
    9e08:	0000a139 	.word	0x0000a139
    9e0c:	0001aec0 	.word	0x0001aec0
    9e10:	00004c81 	.word	0x00004c81
    9e14:	20000110 	.word	0x20000110
    9e18:	000094b9 	.word	0x000094b9
    9e1c:	000096ad 	.word	0x000096ad
    9e20:	00009625 	.word	0x00009625

00009e24 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    9e24:	b580      	push	{r7, lr}
    9e26:	b082      	sub	sp, #8
    9e28:	af00      	add	r7, sp, #0
    9e2a:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    9e2c:	687b      	ldr	r3, [r7, #4]
    9e2e:	68db      	ldr	r3, [r3, #12]
    9e30:	4618      	mov	r0, r3
    9e32:	4b03      	ldr	r3, [pc, #12]	; (9e40 <_tc_timer_start+0x1c>)
    9e34:	4798      	blx	r3
}
    9e36:	bf00      	nop
    9e38:	3708      	adds	r7, #8
    9e3a:	46bd      	mov	sp, r7
    9e3c:	bd80      	pop	{r7, pc}
    9e3e:	bf00      	nop
    9e40:	0000964d 	.word	0x0000964d

00009e44 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    9e44:	b580      	push	{r7, lr}
    9e46:	b082      	sub	sp, #8
    9e48:	af00      	add	r7, sp, #0
    9e4a:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    9e4c:	687b      	ldr	r3, [r7, #4]
    9e4e:	68db      	ldr	r3, [r3, #12]
    9e50:	4618      	mov	r0, r3
    9e52:	4b03      	ldr	r3, [pc, #12]	; (9e60 <_tc_timer_stop+0x1c>)
    9e54:	4798      	blx	r3
}
    9e56:	bf00      	nop
    9e58:	3708      	adds	r7, #8
    9e5a:	46bd      	mov	sp, r7
    9e5c:	bd80      	pop	{r7, pc}
    9e5e:	bf00      	nop
    9e60:	000096ad 	.word	0x000096ad

00009e64 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    9e64:	b580      	push	{r7, lr}
    9e66:	b084      	sub	sp, #16
    9e68:	af00      	add	r7, sp, #0
    9e6a:	6078      	str	r0, [r7, #4]
    9e6c:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    9e6e:	687b      	ldr	r3, [r7, #4]
    9e70:	68db      	ldr	r3, [r3, #12]
    9e72:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9e74:	68f8      	ldr	r0, [r7, #12]
    9e76:	4b14      	ldr	r3, [pc, #80]	; (9ec8 <_tc_timer_set_period+0x64>)
    9e78:	4798      	blx	r3
    9e7a:	4603      	mov	r3, r0
    9e7c:	2b02      	cmp	r3, #2
    9e7e:	d105      	bne.n	9e8c <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    9e80:	683a      	ldr	r2, [r7, #0]
    9e82:	2100      	movs	r1, #0
    9e84:	68f8      	ldr	r0, [r7, #12]
    9e86:	4b11      	ldr	r3, [pc, #68]	; (9ecc <_tc_timer_set_period+0x68>)
    9e88:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    9e8a:	e019      	b.n	9ec0 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9e8c:	68f8      	ldr	r0, [r7, #12]
    9e8e:	4b0e      	ldr	r3, [pc, #56]	; (9ec8 <_tc_timer_set_period+0x64>)
    9e90:	4798      	blx	r3
    9e92:	4603      	mov	r3, r0
    9e94:	2b00      	cmp	r3, #0
    9e96:	d107      	bne.n	9ea8 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    9e98:	683b      	ldr	r3, [r7, #0]
    9e9a:	b29b      	uxth	r3, r3
    9e9c:	461a      	mov	r2, r3
    9e9e:	2100      	movs	r1, #0
    9ea0:	68f8      	ldr	r0, [r7, #12]
    9ea2:	4b0b      	ldr	r3, [pc, #44]	; (9ed0 <_tc_timer_set_period+0x6c>)
    9ea4:	4798      	blx	r3
}
    9ea6:	e00b      	b.n	9ec0 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9ea8:	68f8      	ldr	r0, [r7, #12]
    9eaa:	4b07      	ldr	r3, [pc, #28]	; (9ec8 <_tc_timer_set_period+0x64>)
    9eac:	4798      	blx	r3
    9eae:	4603      	mov	r3, r0
    9eb0:	2b01      	cmp	r3, #1
    9eb2:	d105      	bne.n	9ec0 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    9eb4:	683b      	ldr	r3, [r7, #0]
    9eb6:	b2db      	uxtb	r3, r3
    9eb8:	4619      	mov	r1, r3
    9eba:	68f8      	ldr	r0, [r7, #12]
    9ebc:	4b05      	ldr	r3, [pc, #20]	; (9ed4 <_tc_timer_set_period+0x70>)
    9ebe:	4798      	blx	r3
}
    9ec0:	bf00      	nop
    9ec2:	3710      	adds	r7, #16
    9ec4:	46bd      	mov	sp, r7
    9ec6:	bd80      	pop	{r7, pc}
    9ec8:	000096d5 	.word	0x000096d5
    9ecc:	0000988d 	.word	0x0000988d
    9ed0:	00009829 	.word	0x00009829
    9ed4:	000097ad 	.word	0x000097ad

00009ed8 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    9ed8:	b580      	push	{r7, lr}
    9eda:	b084      	sub	sp, #16
    9edc:	af00      	add	r7, sp, #0
    9ede:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9ee0:	687b      	ldr	r3, [r7, #4]
    9ee2:	68db      	ldr	r3, [r3, #12]
    9ee4:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9ee6:	68f8      	ldr	r0, [r7, #12]
    9ee8:	4b13      	ldr	r3, [pc, #76]	; (9f38 <_tc_timer_get_period+0x60>)
    9eea:	4798      	blx	r3
    9eec:	4603      	mov	r3, r0
    9eee:	2b02      	cmp	r3, #2
    9ef0:	d105      	bne.n	9efe <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    9ef2:	2100      	movs	r1, #0
    9ef4:	68f8      	ldr	r0, [r7, #12]
    9ef6:	4b11      	ldr	r3, [pc, #68]	; (9f3c <_tc_timer_get_period+0x64>)
    9ef8:	4798      	blx	r3
    9efa:	4603      	mov	r3, r0
    9efc:	e017      	b.n	9f2e <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9efe:	68f8      	ldr	r0, [r7, #12]
    9f00:	4b0d      	ldr	r3, [pc, #52]	; (9f38 <_tc_timer_get_period+0x60>)
    9f02:	4798      	blx	r3
    9f04:	4603      	mov	r3, r0
    9f06:	2b00      	cmp	r3, #0
    9f08:	d105      	bne.n	9f16 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    9f0a:	2100      	movs	r1, #0
    9f0c:	68f8      	ldr	r0, [r7, #12]
    9f0e:	4b0c      	ldr	r3, [pc, #48]	; (9f40 <_tc_timer_get_period+0x68>)
    9f10:	4798      	blx	r3
    9f12:	4603      	mov	r3, r0
    9f14:	e00b      	b.n	9f2e <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9f16:	68f8      	ldr	r0, [r7, #12]
    9f18:	4b07      	ldr	r3, [pc, #28]	; (9f38 <_tc_timer_get_period+0x60>)
    9f1a:	4798      	blx	r3
    9f1c:	4603      	mov	r3, r0
    9f1e:	2b01      	cmp	r3, #1
    9f20:	d104      	bne.n	9f2c <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    9f22:	68f8      	ldr	r0, [r7, #12]
    9f24:	4b07      	ldr	r3, [pc, #28]	; (9f44 <_tc_timer_get_period+0x6c>)
    9f26:	4798      	blx	r3
    9f28:	4603      	mov	r3, r0
    9f2a:	e000      	b.n	9f2e <_tc_timer_get_period+0x56>
	}

	return 0;
    9f2c:	2300      	movs	r3, #0
}
    9f2e:	4618      	mov	r0, r3
    9f30:	3710      	adds	r7, #16
    9f32:	46bd      	mov	sp, r7
    9f34:	bd80      	pop	{r7, pc}
    9f36:	bf00      	nop
    9f38:	000096d5 	.word	0x000096d5
    9f3c:	000098bd 	.word	0x000098bd
    9f40:	0000985d 	.word	0x0000985d
    9f44:	000097d5 	.word	0x000097d5

00009f48 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    9f48:	b580      	push	{r7, lr}
    9f4a:	b082      	sub	sp, #8
    9f4c:	af00      	add	r7, sp, #0
    9f4e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    9f50:	687b      	ldr	r3, [r7, #4]
    9f52:	68db      	ldr	r3, [r3, #12]
    9f54:	4618      	mov	r0, r3
    9f56:	4b03      	ldr	r3, [pc, #12]	; (9f64 <_tc_timer_is_started+0x1c>)
    9f58:	4798      	blx	r3
    9f5a:	4603      	mov	r3, r0
}
    9f5c:	4618      	mov	r0, r3
    9f5e:	3708      	adds	r7, #8
    9f60:	46bd      	mov	sp, r7
    9f62:	bd80      	pop	{r7, pc}
    9f64:	00009675 	.word	0x00009675

00009f68 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    9f68:	b480      	push	{r7}
    9f6a:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    9f6c:	4b02      	ldr	r3, [pc, #8]	; (9f78 <_tc_get_timer+0x10>)
}
    9f6e:	4618      	mov	r0, r3
    9f70:	46bd      	mov	sp, r7
    9f72:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f76:	4770      	bx	lr
    9f78:	20000188 	.word	0x20000188

00009f7c <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    9f7c:	b480      	push	{r7}
    9f7e:	af00      	add	r7, sp, #0
	return NULL;
    9f80:	2300      	movs	r3, #0
}
    9f82:	4618      	mov	r0, r3
    9f84:	46bd      	mov	sp, r7
    9f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f8a:	4770      	bx	lr

00009f8c <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    9f8c:	b580      	push	{r7, lr}
    9f8e:	b084      	sub	sp, #16
    9f90:	af00      	add	r7, sp, #0
    9f92:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9f94:	687b      	ldr	r3, [r7, #4]
    9f96:	68db      	ldr	r3, [r3, #12]
    9f98:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    9f9a:	68f8      	ldr	r0, [r7, #12]
    9f9c:	4b0e      	ldr	r3, [pc, #56]	; (9fd8 <_tc_timer_set_irq+0x4c>)
    9f9e:	4798      	blx	r3
    9fa0:	4603      	mov	r3, r0
    9fa2:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    9fa4:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    9fa8:	490c      	ldr	r1, [pc, #48]	; (9fdc <_tc_timer_set_irq+0x50>)
    9faa:	2001      	movs	r0, #1
    9fac:	4b0c      	ldr	r3, [pc, #48]	; (9fe0 <_tc_timer_set_irq+0x54>)
    9fae:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    9fb0:	f997 200b 	ldrsb.w	r2, [r7, #11]
    9fb4:	490b      	ldr	r1, [pc, #44]	; (9fe4 <_tc_timer_set_irq+0x58>)
    9fb6:	4613      	mov	r3, r2
    9fb8:	009b      	lsls	r3, r3, #2
    9fba:	4413      	add	r3, r2
    9fbc:	009b      	lsls	r3, r3, #2
    9fbe:	440b      	add	r3, r1
    9fc0:	3302      	adds	r3, #2
    9fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
    9fc6:	b2db      	uxtb	r3, r3
    9fc8:	4618      	mov	r0, r3
    9fca:	4b07      	ldr	r3, [pc, #28]	; (9fe8 <_tc_timer_set_irq+0x5c>)
    9fcc:	4798      	blx	r3
}
    9fce:	bf00      	nop
    9fd0:	3710      	adds	r7, #16
    9fd2:	46bd      	mov	sp, r7
    9fd4:	bd80      	pop	{r7, pc}
    9fd6:	bf00      	nop
    9fd8:	0000a139 	.word	0x0000a139
    9fdc:	0001aec0 	.word	0x0001aec0
    9fe0:	00004c81 	.word	0x00004c81
    9fe4:	20000110 	.word	0x20000110
    9fe8:	00005b19 	.word	0x00005b19

00009fec <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    9fec:	b580      	push	{r7, lr}
    9fee:	b084      	sub	sp, #16
    9ff0:	af00      	add	r7, sp, #0
    9ff2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9ff4:	687b      	ldr	r3, [r7, #4]
    9ff6:	68db      	ldr	r3, [r3, #12]
    9ff8:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    9ffa:	68f8      	ldr	r0, [r7, #12]
    9ffc:	4b07      	ldr	r3, [pc, #28]	; (a01c <tc_interrupt_handler+0x30>)
    9ffe:	4798      	blx	r3
    a000:	4603      	mov	r3, r0
    a002:	2b00      	cmp	r3, #0
    a004:	d006      	beq.n	a014 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    a006:	68f8      	ldr	r0, [r7, #12]
    a008:	4b05      	ldr	r3, [pc, #20]	; (a020 <tc_interrupt_handler+0x34>)
    a00a:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    a00c:	687b      	ldr	r3, [r7, #4]
    a00e:	681b      	ldr	r3, [r3, #0]
    a010:	6878      	ldr	r0, [r7, #4]
    a012:	4798      	blx	r3
	}
}
    a014:	bf00      	nop
    a016:	3710      	adds	r7, #16
    a018:	46bd      	mov	sp, r7
    a01a:	bd80      	pop	{r7, pc}
    a01c:	00009585 	.word	0x00009585
    a020:	000095ad 	.word	0x000095ad

0000a024 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    a024:	b580      	push	{r7, lr}
    a026:	b084      	sub	sp, #16
    a028:	af00      	add	r7, sp, #0
    a02a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a02c:	687b      	ldr	r3, [r7, #4]
    a02e:	691b      	ldr	r3, [r3, #16]
    a030:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    a032:	68f8      	ldr	r0, [r7, #12]
    a034:	4b12      	ldr	r3, [pc, #72]	; (a080 <tc_pwm_interrupt_handler+0x5c>)
    a036:	4798      	blx	r3
    a038:	4603      	mov	r3, r0
    a03a:	2b00      	cmp	r3, #0
    a03c:	d00a      	beq.n	a054 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    a03e:	68f8      	ldr	r0, [r7, #12]
    a040:	4b10      	ldr	r3, [pc, #64]	; (a084 <tc_pwm_interrupt_handler+0x60>)
    a042:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    a044:	687b      	ldr	r3, [r7, #4]
    a046:	681b      	ldr	r3, [r3, #0]
    a048:	2b00      	cmp	r3, #0
    a04a:	d003      	beq.n	a054 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    a04c:	687b      	ldr	r3, [r7, #4]
    a04e:	681b      	ldr	r3, [r3, #0]
    a050:	6878      	ldr	r0, [r7, #4]
    a052:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    a054:	68f8      	ldr	r0, [r7, #12]
    a056:	4b0c      	ldr	r3, [pc, #48]	; (a088 <tc_pwm_interrupt_handler+0x64>)
    a058:	4798      	blx	r3
    a05a:	4603      	mov	r3, r0
    a05c:	2b00      	cmp	r3, #0
    a05e:	d00a      	beq.n	a076 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    a060:	68f8      	ldr	r0, [r7, #12]
    a062:	4b0a      	ldr	r3, [pc, #40]	; (a08c <tc_pwm_interrupt_handler+0x68>)
    a064:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    a066:	687b      	ldr	r3, [r7, #4]
    a068:	685b      	ldr	r3, [r3, #4]
    a06a:	2b00      	cmp	r3, #0
    a06c:	d003      	beq.n	a076 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    a06e:	687b      	ldr	r3, [r7, #4]
    a070:	685b      	ldr	r3, [r3, #4]
    a072:	6878      	ldr	r0, [r7, #4]
    a074:	4798      	blx	r3
		}
	}
}
    a076:	bf00      	nop
    a078:	3710      	adds	r7, #16
    a07a:	46bd      	mov	sp, r7
    a07c:	bd80      	pop	{r7, pc}
    a07e:	bf00      	nop
    a080:	00009585 	.word	0x00009585
    a084:	000095ad 	.word	0x000095ad
    a088:	000095fb 	.word	0x000095fb
    a08c:	000095c7 	.word	0x000095c7

0000a090 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    a090:	b580      	push	{r7, lr}
    a092:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    a094:	4b03      	ldr	r3, [pc, #12]	; (a0a4 <TC0_Handler+0x14>)
    a096:	681b      	ldr	r3, [r3, #0]
    a098:	4618      	mov	r0, r3
    a09a:	4b03      	ldr	r3, [pc, #12]	; (a0a8 <TC0_Handler+0x18>)
    a09c:	4798      	blx	r3
}
    a09e:	bf00      	nop
    a0a0:	bd80      	pop	{r7, pc}
    a0a2:	bf00      	nop
    a0a4:	2000233c 	.word	0x2000233c
    a0a8:	00009fed 	.word	0x00009fed

0000a0ac <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    a0ac:	b580      	push	{r7, lr}
    a0ae:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    a0b0:	4b03      	ldr	r3, [pc, #12]	; (a0c0 <TC2_Handler+0x14>)
    a0b2:	681b      	ldr	r3, [r3, #0]
    a0b4:	4618      	mov	r0, r3
    a0b6:	4b03      	ldr	r3, [pc, #12]	; (a0c4 <TC2_Handler+0x18>)
    a0b8:	4798      	blx	r3
}
    a0ba:	bf00      	nop
    a0bc:	bd80      	pop	{r7, pc}
    a0be:	bf00      	nop
    a0c0:	20002340 	.word	0x20002340
    a0c4:	00009fed 	.word	0x00009fed

0000a0c8 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    a0c8:	b580      	push	{r7, lr}
    a0ca:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    a0cc:	4b03      	ldr	r3, [pc, #12]	; (a0dc <TC4_Handler+0x14>)
    a0ce:	681b      	ldr	r3, [r3, #0]
    a0d0:	4618      	mov	r0, r3
    a0d2:	4b03      	ldr	r3, [pc, #12]	; (a0e0 <TC4_Handler+0x18>)
    a0d4:	4798      	blx	r3
}
    a0d6:	bf00      	nop
    a0d8:	bd80      	pop	{r7, pc}
    a0da:	bf00      	nop
    a0dc:	20002344 	.word	0x20002344
    a0e0:	00009fed 	.word	0x00009fed

0000a0e4 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    a0e4:	b580      	push	{r7, lr}
    a0e6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    a0e8:	4b03      	ldr	r3, [pc, #12]	; (a0f8 <TC5_Handler+0x14>)
    a0ea:	681b      	ldr	r3, [r3, #0]
    a0ec:	4618      	mov	r0, r3
    a0ee:	4b03      	ldr	r3, [pc, #12]	; (a0fc <TC5_Handler+0x18>)
    a0f0:	4798      	blx	r3
}
    a0f2:	bf00      	nop
    a0f4:	bd80      	pop	{r7, pc}
    a0f6:	bf00      	nop
    a0f8:	20002348 	.word	0x20002348
    a0fc:	00009fed 	.word	0x00009fed

0000a100 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    a100:	b580      	push	{r7, lr}
    a102:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    a104:	4b03      	ldr	r3, [pc, #12]	; (a114 <TC6_Handler+0x14>)
    a106:	681b      	ldr	r3, [r3, #0]
    a108:	4618      	mov	r0, r3
    a10a:	4b03      	ldr	r3, [pc, #12]	; (a118 <TC6_Handler+0x18>)
    a10c:	4798      	blx	r3
}
    a10e:	bf00      	nop
    a110:	bd80      	pop	{r7, pc}
    a112:	bf00      	nop
    a114:	2000234c 	.word	0x2000234c
    a118:	00009fed 	.word	0x00009fed

0000a11c <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    a11c:	b580      	push	{r7, lr}
    a11e:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    a120:	4b03      	ldr	r3, [pc, #12]	; (a130 <TC7_Handler+0x14>)
    a122:	681b      	ldr	r3, [r3, #0]
    a124:	4618      	mov	r0, r3
    a126:	4b03      	ldr	r3, [pc, #12]	; (a134 <TC7_Handler+0x18>)
    a128:	4798      	blx	r3
}
    a12a:	bf00      	nop
    a12c:	bd80      	pop	{r7, pc}
    a12e:	bf00      	nop
    a130:	20002350 	.word	0x20002350
    a134:	0000a025 	.word	0x0000a025

0000a138 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    a138:	b580      	push	{r7, lr}
    a13a:	b084      	sub	sp, #16
    a13c:	af00      	add	r7, sp, #0
    a13e:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    a140:	6878      	ldr	r0, [r7, #4]
    a142:	4b13      	ldr	r3, [pc, #76]	; (a190 <get_tc_index+0x58>)
    a144:	4798      	blx	r3
    a146:	4603      	mov	r3, r0
    a148:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    a14a:	2300      	movs	r3, #0
    a14c:	73fb      	strb	r3, [r7, #15]
    a14e:	e010      	b.n	a172 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    a150:	7bfa      	ldrb	r2, [r7, #15]
    a152:	4910      	ldr	r1, [pc, #64]	; (a194 <get_tc_index+0x5c>)
    a154:	4613      	mov	r3, r2
    a156:	009b      	lsls	r3, r3, #2
    a158:	4413      	add	r3, r2
    a15a:	009b      	lsls	r3, r3, #2
    a15c:	440b      	add	r3, r1
    a15e:	781b      	ldrb	r3, [r3, #0]
    a160:	7bba      	ldrb	r2, [r7, #14]
    a162:	429a      	cmp	r2, r3
    a164:	d102      	bne.n	a16c <get_tc_index+0x34>
			return i;
    a166:	f997 300f 	ldrsb.w	r3, [r7, #15]
    a16a:	e00d      	b.n	a188 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    a16c:	7bfb      	ldrb	r3, [r7, #15]
    a16e:	3301      	adds	r3, #1
    a170:	73fb      	strb	r3, [r7, #15]
    a172:	7bfb      	ldrb	r3, [r7, #15]
    a174:	2b05      	cmp	r3, #5
    a176:	d9eb      	bls.n	a150 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    a178:	f240 221d 	movw	r2, #541	; 0x21d
    a17c:	4906      	ldr	r1, [pc, #24]	; (a198 <get_tc_index+0x60>)
    a17e:	2000      	movs	r0, #0
    a180:	4b06      	ldr	r3, [pc, #24]	; (a19c <get_tc_index+0x64>)
    a182:	4798      	blx	r3
	return -1;
    a184:	f04f 33ff 	mov.w	r3, #4294967295
}
    a188:	4618      	mov	r0, r3
    a18a:	3710      	adds	r7, #16
    a18c:	46bd      	mov	sp, r7
    a18e:	bd80      	pop	{r7, pc}
    a190:	0000a23d 	.word	0x0000a23d
    a194:	20000110 	.word	0x20000110
    a198:	0001aec0 	.word	0x0001aec0
    a19c:	00004c81 	.word	0x00004c81

0000a1a0 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    a1a0:	b480      	push	{r7}
    a1a2:	b083      	sub	sp, #12
    a1a4:	af00      	add	r7, sp, #0
    a1a6:	6078      	str	r0, [r7, #4]
    a1a8:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    a1aa:	687b      	ldr	r3, [r7, #4]
    a1ac:	4a17      	ldr	r2, [pc, #92]	; (a20c <_tc_init_irq_param+0x6c>)
    a1ae:	4293      	cmp	r3, r2
    a1b0:	d102      	bne.n	a1b8 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    a1b2:	4a17      	ldr	r2, [pc, #92]	; (a210 <_tc_init_irq_param+0x70>)
    a1b4:	683b      	ldr	r3, [r7, #0]
    a1b6:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    a1b8:	687b      	ldr	r3, [r7, #4]
    a1ba:	4a16      	ldr	r2, [pc, #88]	; (a214 <_tc_init_irq_param+0x74>)
    a1bc:	4293      	cmp	r3, r2
    a1be:	d102      	bne.n	a1c6 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    a1c0:	4a15      	ldr	r2, [pc, #84]	; (a218 <_tc_init_irq_param+0x78>)
    a1c2:	683b      	ldr	r3, [r7, #0]
    a1c4:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    a1c6:	687b      	ldr	r3, [r7, #4]
    a1c8:	4a14      	ldr	r2, [pc, #80]	; (a21c <_tc_init_irq_param+0x7c>)
    a1ca:	4293      	cmp	r3, r2
    a1cc:	d102      	bne.n	a1d4 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    a1ce:	4a14      	ldr	r2, [pc, #80]	; (a220 <_tc_init_irq_param+0x80>)
    a1d0:	683b      	ldr	r3, [r7, #0]
    a1d2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    a1d4:	687b      	ldr	r3, [r7, #4]
    a1d6:	4a13      	ldr	r2, [pc, #76]	; (a224 <_tc_init_irq_param+0x84>)
    a1d8:	4293      	cmp	r3, r2
    a1da:	d102      	bne.n	a1e2 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    a1dc:	4a12      	ldr	r2, [pc, #72]	; (a228 <_tc_init_irq_param+0x88>)
    a1de:	683b      	ldr	r3, [r7, #0]
    a1e0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    a1e2:	687b      	ldr	r3, [r7, #4]
    a1e4:	4a11      	ldr	r2, [pc, #68]	; (a22c <_tc_init_irq_param+0x8c>)
    a1e6:	4293      	cmp	r3, r2
    a1e8:	d102      	bne.n	a1f0 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    a1ea:	4a11      	ldr	r2, [pc, #68]	; (a230 <_tc_init_irq_param+0x90>)
    a1ec:	683b      	ldr	r3, [r7, #0]
    a1ee:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    a1f0:	687b      	ldr	r3, [r7, #4]
    a1f2:	4a10      	ldr	r2, [pc, #64]	; (a234 <_tc_init_irq_param+0x94>)
    a1f4:	4293      	cmp	r3, r2
    a1f6:	d102      	bne.n	a1fe <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    a1f8:	4a0f      	ldr	r2, [pc, #60]	; (a238 <_tc_init_irq_param+0x98>)
    a1fa:	683b      	ldr	r3, [r7, #0]
    a1fc:	6013      	str	r3, [r2, #0]
	}
}
    a1fe:	bf00      	nop
    a200:	370c      	adds	r7, #12
    a202:	46bd      	mov	sp, r7
    a204:	f85d 7b04 	ldr.w	r7, [sp], #4
    a208:	4770      	bx	lr
    a20a:	bf00      	nop
    a20c:	40003800 	.word	0x40003800
    a210:	2000233c 	.word	0x2000233c
    a214:	4101a000 	.word	0x4101a000
    a218:	20002340 	.word	0x20002340
    a21c:	42001400 	.word	0x42001400
    a220:	20002344 	.word	0x20002344
    a224:	42001800 	.word	0x42001800
    a228:	20002348 	.word	0x20002348
    a22c:	43001400 	.word	0x43001400
    a230:	2000234c 	.word	0x2000234c
    a234:	43001800 	.word	0x43001800
    a238:	20002350 	.word	0x20002350

0000a23c <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    a23c:	b4b0      	push	{r4, r5, r7}
    a23e:	b08d      	sub	sp, #52	; 0x34
    a240:	af00      	add	r7, sp, #0
    a242:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    a244:	4b13      	ldr	r3, [pc, #76]	; (a294 <_get_hardware_offset+0x58>)
    a246:	f107 040c 	add.w	r4, r7, #12
    a24a:	461d      	mov	r5, r3
    a24c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a24e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a250:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    a258:	2300      	movs	r3, #0
    a25a:	62fb      	str	r3, [r7, #44]	; 0x2c
    a25c:	e010      	b.n	a280 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    a25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a260:	009b      	lsls	r3, r3, #2
    a262:	f107 0230 	add.w	r2, r7, #48	; 0x30
    a266:	4413      	add	r3, r2
    a268:	f853 3c24 	ldr.w	r3, [r3, #-36]
    a26c:	461a      	mov	r2, r3
    a26e:	687b      	ldr	r3, [r7, #4]
    a270:	429a      	cmp	r2, r3
    a272:	d102      	bne.n	a27a <_get_hardware_offset+0x3e>
			return i;
    a274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a276:	b2db      	uxtb	r3, r3
    a278:	e006      	b.n	a288 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    a27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a27c:	3301      	adds	r3, #1
    a27e:	62fb      	str	r3, [r7, #44]	; 0x2c
    a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a282:	2b07      	cmp	r3, #7
    a284:	d9eb      	bls.n	a25e <_get_hardware_offset+0x22>
		}
	}
	return 0;
    a286:	2300      	movs	r3, #0
}
    a288:	4618      	mov	r0, r3
    a28a:	3734      	adds	r7, #52	; 0x34
    a28c:	46bd      	mov	sp, r7
    a28e:	bcb0      	pop	{r4, r5, r7}
    a290:	4770      	bx	lr
    a292:	bf00      	nop
    a294:	0001aed4 	.word	0x0001aed4

0000a298 <__NVIC_EnableIRQ>:
{
    a298:	b480      	push	{r7}
    a29a:	b083      	sub	sp, #12
    a29c:	af00      	add	r7, sp, #0
    a29e:	4603      	mov	r3, r0
    a2a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a2a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a2a6:	2b00      	cmp	r3, #0
    a2a8:	db0b      	blt.n	a2c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a2aa:	4909      	ldr	r1, [pc, #36]	; (a2d0 <__NVIC_EnableIRQ+0x38>)
    a2ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a2b0:	095b      	lsrs	r3, r3, #5
    a2b2:	88fa      	ldrh	r2, [r7, #6]
    a2b4:	f002 021f 	and.w	r2, r2, #31
    a2b8:	2001      	movs	r0, #1
    a2ba:	fa00 f202 	lsl.w	r2, r0, r2
    a2be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a2c2:	bf00      	nop
    a2c4:	370c      	adds	r7, #12
    a2c6:	46bd      	mov	sp, r7
    a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2cc:	4770      	bx	lr
    a2ce:	bf00      	nop
    a2d0:	e000e100 	.word	0xe000e100

0000a2d4 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    a2d4:	b480      	push	{r7}
    a2d6:	b087      	sub	sp, #28
    a2d8:	af00      	add	r7, sp, #0
    a2da:	60f8      	str	r0, [r7, #12]
    a2dc:	460b      	mov	r3, r1
    a2de:	607a      	str	r2, [r7, #4]
    a2e0:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    a2e2:	7afa      	ldrb	r2, [r7, #11]
    a2e4:	68f9      	ldr	r1, [r7, #12]
    a2e6:	4613      	mov	r3, r2
    a2e8:	009b      	lsls	r3, r3, #2
    a2ea:	4413      	add	r3, r2
    a2ec:	009b      	lsls	r3, r3, #2
    a2ee:	440b      	add	r3, r1
    a2f0:	3340      	adds	r3, #64	; 0x40
    a2f2:	681b      	ldr	r3, [r3, #0]
    a2f4:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    a2f6:	697a      	ldr	r2, [r7, #20]
    a2f8:	687b      	ldr	r3, [r7, #4]
    a2fa:	4013      	ands	r3, r2
    a2fc:	617b      	str	r3, [r7, #20]
	return tmp;
    a2fe:	697b      	ldr	r3, [r7, #20]
}
    a300:	4618      	mov	r0, r3
    a302:	371c      	adds	r7, #28
    a304:	46bd      	mov	sp, r7
    a306:	f85d 7b04 	ldr.w	r7, [sp], #4
    a30a:	4770      	bx	lr

0000a30c <hri_oscctrl_get_STATUS_reg>:
{
    a30c:	b480      	push	{r7}
    a30e:	b085      	sub	sp, #20
    a310:	af00      	add	r7, sp, #0
    a312:	6078      	str	r0, [r7, #4]
    a314:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    a316:	687b      	ldr	r3, [r7, #4]
    a318:	691b      	ldr	r3, [r3, #16]
    a31a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a31c:	68fa      	ldr	r2, [r7, #12]
    a31e:	683b      	ldr	r3, [r7, #0]
    a320:	4013      	ands	r3, r2
    a322:	60fb      	str	r3, [r7, #12]
	return tmp;
    a324:	68fb      	ldr	r3, [r7, #12]
}
    a326:	4618      	mov	r0, r3
    a328:	3714      	adds	r7, #20
    a32a:	46bd      	mov	sp, r7
    a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a330:	4770      	bx	lr

0000a332 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    a332:	b480      	push	{r7}
    a334:	b085      	sub	sp, #20
    a336:	af00      	add	r7, sp, #0
    a338:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    a33a:	687b      	ldr	r3, [r7, #4]
    a33c:	f893 3020 	ldrb.w	r3, [r3, #32]
    a340:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    a342:	7bfb      	ldrb	r3, [r7, #15]
    a344:	f003 0301 	and.w	r3, r3, #1
    a348:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a34a:	7bfb      	ldrb	r3, [r7, #15]
    a34c:	2b00      	cmp	r3, #0
    a34e:	bf14      	ite	ne
    a350:	2301      	movne	r3, #1
    a352:	2300      	moveq	r3, #0
    a354:	b2db      	uxtb	r3, r3
}
    a356:	4618      	mov	r0, r3
    a358:	3714      	adds	r7, #20
    a35a:	46bd      	mov	sp, r7
    a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a360:	4770      	bx	lr

0000a362 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    a362:	b480      	push	{r7}
    a364:	b083      	sub	sp, #12
    a366:	af00      	add	r7, sp, #0
    a368:	6078      	str	r0, [r7, #4]
    a36a:	460b      	mov	r3, r1
    a36c:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a36e:	bf00      	nop
    a370:	687b      	ldr	r3, [r7, #4]
    a372:	789b      	ldrb	r3, [r3, #2]
    a374:	b2da      	uxtb	r2, r3
    a376:	78fb      	ldrb	r3, [r7, #3]
    a378:	4013      	ands	r3, r2
    a37a:	b2db      	uxtb	r3, r3
    a37c:	2b00      	cmp	r3, #0
    a37e:	d1f7      	bne.n	a370 <hri_usb_wait_for_sync+0xe>
	};
}
    a380:	bf00      	nop
    a382:	370c      	adds	r7, #12
    a384:	46bd      	mov	sp, r7
    a386:	f85d 7b04 	ldr.w	r7, [sp], #4
    a38a:	4770      	bx	lr

0000a38c <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    a38c:	b480      	push	{r7}
    a38e:	b083      	sub	sp, #12
    a390:	af00      	add	r7, sp, #0
    a392:	6078      	str	r0, [r7, #4]
    a394:	460b      	mov	r3, r1
    a396:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    a398:	687b      	ldr	r3, [r7, #4]
    a39a:	789b      	ldrb	r3, [r3, #2]
    a39c:	b2da      	uxtb	r2, r3
    a39e:	78fb      	ldrb	r3, [r7, #3]
    a3a0:	4013      	ands	r3, r2
    a3a2:	b2db      	uxtb	r3, r3
    a3a4:	2b00      	cmp	r3, #0
    a3a6:	bf14      	ite	ne
    a3a8:	2301      	movne	r3, #1
    a3aa:	2300      	moveq	r3, #0
    a3ac:	b2db      	uxtb	r3, r3
}
    a3ae:	4618      	mov	r0, r3
    a3b0:	370c      	adds	r7, #12
    a3b2:	46bd      	mov	sp, r7
    a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3b8:	4770      	bx	lr

0000a3ba <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    a3ba:	b480      	push	{r7}
    a3bc:	b085      	sub	sp, #20
    a3be:	af00      	add	r7, sp, #0
    a3c0:	6078      	str	r0, [r7, #4]
    a3c2:	460b      	mov	r3, r1
    a3c4:	70fb      	strb	r3, [r7, #3]
    a3c6:	4613      	mov	r3, r2
    a3c8:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    a3ca:	78fb      	ldrb	r3, [r7, #3]
    a3cc:	687a      	ldr	r2, [r7, #4]
    a3ce:	3308      	adds	r3, #8
    a3d0:	015b      	lsls	r3, r3, #5
    a3d2:	4413      	add	r3, r2
    a3d4:	3307      	adds	r3, #7
    a3d6:	781b      	ldrb	r3, [r3, #0]
    a3d8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a3da:	7bfa      	ldrb	r2, [r7, #15]
    a3dc:	78bb      	ldrb	r3, [r7, #2]
    a3de:	4013      	ands	r3, r2
    a3e0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a3e2:	7bfb      	ldrb	r3, [r7, #15]
}
    a3e4:	4618      	mov	r0, r3
    a3e6:	3714      	adds	r7, #20
    a3e8:	46bd      	mov	sp, r7
    a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3ee:	4770      	bx	lr

0000a3f0 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    a3f0:	b480      	push	{r7}
    a3f2:	b083      	sub	sp, #12
    a3f4:	af00      	add	r7, sp, #0
    a3f6:	6078      	str	r0, [r7, #4]
    a3f8:	460b      	mov	r3, r1
    a3fa:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    a3fc:	78fb      	ldrb	r3, [r7, #3]
    a3fe:	687a      	ldr	r2, [r7, #4]
    a400:	3308      	adds	r3, #8
    a402:	015b      	lsls	r3, r3, #5
    a404:	4413      	add	r3, r2
    a406:	3307      	adds	r3, #7
    a408:	781b      	ldrb	r3, [r3, #0]
    a40a:	b2db      	uxtb	r3, r3
}
    a40c:	4618      	mov	r0, r3
    a40e:	370c      	adds	r7, #12
    a410:	46bd      	mov	sp, r7
    a412:	f85d 7b04 	ldr.w	r7, [sp], #4
    a416:	4770      	bx	lr

0000a418 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    a418:	b480      	push	{r7}
    a41a:	b083      	sub	sp, #12
    a41c:	af00      	add	r7, sp, #0
    a41e:	6078      	str	r0, [r7, #4]
    a420:	460b      	mov	r3, r1
    a422:	70fb      	strb	r3, [r7, #3]
    a424:	4613      	mov	r3, r2
    a426:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    a428:	78fb      	ldrb	r3, [r7, #3]
    a42a:	687a      	ldr	r2, [r7, #4]
    a42c:	3308      	adds	r3, #8
    a42e:	015b      	lsls	r3, r3, #5
    a430:	4413      	add	r3, r2
    a432:	3307      	adds	r3, #7
    a434:	78ba      	ldrb	r2, [r7, #2]
    a436:	701a      	strb	r2, [r3, #0]
}
    a438:	bf00      	nop
    a43a:	370c      	adds	r7, #12
    a43c:	46bd      	mov	sp, r7
    a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a442:	4770      	bx	lr

0000a444 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    a444:	b480      	push	{r7}
    a446:	b083      	sub	sp, #12
    a448:	af00      	add	r7, sp, #0
    a44a:	6078      	str	r0, [r7, #4]
    a44c:	460b      	mov	r3, r1
    a44e:	70fb      	strb	r3, [r7, #3]
    a450:	4613      	mov	r3, r2
    a452:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    a454:	78fb      	ldrb	r3, [r7, #3]
    a456:	687a      	ldr	r2, [r7, #4]
    a458:	3308      	adds	r3, #8
    a45a:	015b      	lsls	r3, r3, #5
    a45c:	4413      	add	r3, r2
    a45e:	3305      	adds	r3, #5
    a460:	78ba      	ldrb	r2, [r7, #2]
    a462:	701a      	strb	r2, [r3, #0]
}
    a464:	bf00      	nop
    a466:	370c      	adds	r7, #12
    a468:	46bd      	mov	sp, r7
    a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a46e:	4770      	bx	lr

0000a470 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    a470:	b480      	push	{r7}
    a472:	b083      	sub	sp, #12
    a474:	af00      	add	r7, sp, #0
    a476:	6078      	str	r0, [r7, #4]
    a478:	460b      	mov	r3, r1
    a47a:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    a47c:	78fb      	ldrb	r3, [r7, #3]
    a47e:	687a      	ldr	r2, [r7, #4]
    a480:	3308      	adds	r3, #8
    a482:	015b      	lsls	r3, r3, #5
    a484:	4413      	add	r3, r2
    a486:	3306      	adds	r3, #6
    a488:	781b      	ldrb	r3, [r3, #0]
    a48a:	b2db      	uxtb	r3, r3
}
    a48c:	4618      	mov	r0, r3
    a48e:	370c      	adds	r7, #12
    a490:	46bd      	mov	sp, r7
    a492:	f85d 7b04 	ldr.w	r7, [sp], #4
    a496:	4770      	bx	lr

0000a498 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    a498:	b480      	push	{r7}
    a49a:	b083      	sub	sp, #12
    a49c:	af00      	add	r7, sp, #0
    a49e:	6078      	str	r0, [r7, #4]
    a4a0:	460b      	mov	r3, r1
    a4a2:	70fb      	strb	r3, [r7, #3]
    a4a4:	4613      	mov	r3, r2
    a4a6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    a4a8:	78fb      	ldrb	r3, [r7, #3]
    a4aa:	687a      	ldr	r2, [r7, #4]
    a4ac:	3308      	adds	r3, #8
    a4ae:	015b      	lsls	r3, r3, #5
    a4b0:	4413      	add	r3, r2
    a4b2:	3304      	adds	r3, #4
    a4b4:	78ba      	ldrb	r2, [r7, #2]
    a4b6:	701a      	strb	r2, [r3, #0]
}
    a4b8:	bf00      	nop
    a4ba:	370c      	adds	r7, #12
    a4bc:	46bd      	mov	sp, r7
    a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4c2:	4770      	bx	lr

0000a4c4 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    a4c4:	b480      	push	{r7}
    a4c6:	b083      	sub	sp, #12
    a4c8:	af00      	add	r7, sp, #0
    a4ca:	6078      	str	r0, [r7, #4]
    a4cc:	460b      	mov	r3, r1
    a4ce:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    a4d0:	78fb      	ldrb	r3, [r7, #3]
    a4d2:	687a      	ldr	r2, [r7, #4]
    a4d4:	015b      	lsls	r3, r3, #5
    a4d6:	4413      	add	r3, r2
    a4d8:	f503 7384 	add.w	r3, r3, #264	; 0x108
    a4dc:	2210      	movs	r2, #16
    a4de:	701a      	strb	r2, [r3, #0]
}
    a4e0:	bf00      	nop
    a4e2:	370c      	adds	r7, #12
    a4e4:	46bd      	mov	sp, r7
    a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4ea:	4770      	bx	lr

0000a4ec <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    a4ec:	b480      	push	{r7}
    a4ee:	b083      	sub	sp, #12
    a4f0:	af00      	add	r7, sp, #0
    a4f2:	6078      	str	r0, [r7, #4]
    a4f4:	460b      	mov	r3, r1
    a4f6:	70fb      	strb	r3, [r7, #3]
    a4f8:	4613      	mov	r3, r2
    a4fa:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    a4fc:	78fb      	ldrb	r3, [r7, #3]
    a4fe:	687a      	ldr	r2, [r7, #4]
    a500:	015b      	lsls	r3, r3, #5
    a502:	4413      	add	r3, r2
    a504:	f203 1309 	addw	r3, r3, #265	; 0x109
    a508:	78ba      	ldrb	r2, [r7, #2]
    a50a:	701a      	strb	r2, [r3, #0]
}
    a50c:	bf00      	nop
    a50e:	370c      	adds	r7, #12
    a510:	46bd      	mov	sp, r7
    a512:	f85d 7b04 	ldr.w	r7, [sp], #4
    a516:	4770      	bx	lr

0000a518 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    a518:	b480      	push	{r7}
    a51a:	b083      	sub	sp, #12
    a51c:	af00      	add	r7, sp, #0
    a51e:	6078      	str	r0, [r7, #4]
    a520:	460b      	mov	r3, r1
    a522:	70fb      	strb	r3, [r7, #3]
    a524:	4613      	mov	r3, r2
    a526:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    a528:	78fb      	ldrb	r3, [r7, #3]
    a52a:	687a      	ldr	r2, [r7, #4]
    a52c:	015b      	lsls	r3, r3, #5
    a52e:	4413      	add	r3, r2
    a530:	f503 7384 	add.w	r3, r3, #264	; 0x108
    a534:	78ba      	ldrb	r2, [r7, #2]
    a536:	701a      	strb	r2, [r3, #0]
}
    a538:	bf00      	nop
    a53a:	370c      	adds	r7, #12
    a53c:	46bd      	mov	sp, r7
    a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a542:	4770      	bx	lr

0000a544 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    a544:	b480      	push	{r7}
    a546:	b085      	sub	sp, #20
    a548:	af00      	add	r7, sp, #0
    a54a:	6078      	str	r0, [r7, #4]
    a54c:	460b      	mov	r3, r1
    a54e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a550:	78fb      	ldrb	r3, [r7, #3]
    a552:	687a      	ldr	r2, [r7, #4]
    a554:	3308      	adds	r3, #8
    a556:	015b      	lsls	r3, r3, #5
    a558:	4413      	add	r3, r2
    a55a:	781b      	ldrb	r3, [r3, #0]
    a55c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    a55e:	7bfb      	ldrb	r3, [r7, #15]
    a560:	f003 0307 	and.w	r3, r3, #7
    a564:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a566:	7bfb      	ldrb	r3, [r7, #15]
}
    a568:	4618      	mov	r0, r3
    a56a:	3714      	adds	r7, #20
    a56c:	46bd      	mov	sp, r7
    a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a572:	4770      	bx	lr

0000a574 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    a574:	b480      	push	{r7}
    a576:	b085      	sub	sp, #20
    a578:	af00      	add	r7, sp, #0
    a57a:	6078      	str	r0, [r7, #4]
    a57c:	460b      	mov	r3, r1
    a57e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a580:	78fb      	ldrb	r3, [r7, #3]
    a582:	687a      	ldr	r2, [r7, #4]
    a584:	3308      	adds	r3, #8
    a586:	015b      	lsls	r3, r3, #5
    a588:	4413      	add	r3, r2
    a58a:	781b      	ldrb	r3, [r3, #0]
    a58c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    a58e:	7bfb      	ldrb	r3, [r7, #15]
    a590:	091b      	lsrs	r3, r3, #4
    a592:	b2db      	uxtb	r3, r3
    a594:	f003 0307 	and.w	r3, r3, #7
    a598:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a59a:	7bfb      	ldrb	r3, [r7, #15]
}
    a59c:	4618      	mov	r0, r3
    a59e:	3714      	adds	r7, #20
    a5a0:	46bd      	mov	sp, r7
    a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5a6:	4770      	bx	lr

0000a5a8 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    a5a8:	b480      	push	{r7}
    a5aa:	b083      	sub	sp, #12
    a5ac:	af00      	add	r7, sp, #0
    a5ae:	6078      	str	r0, [r7, #4]
    a5b0:	460b      	mov	r3, r1
    a5b2:	70fb      	strb	r3, [r7, #3]
    a5b4:	4613      	mov	r3, r2
    a5b6:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    a5b8:	78fb      	ldrb	r3, [r7, #3]
    a5ba:	687a      	ldr	r2, [r7, #4]
    a5bc:	3308      	adds	r3, #8
    a5be:	015b      	lsls	r3, r3, #5
    a5c0:	4413      	add	r3, r2
    a5c2:	78ba      	ldrb	r2, [r7, #2]
    a5c4:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    a5c6:	bf00      	nop
    a5c8:	370c      	adds	r7, #12
    a5ca:	46bd      	mov	sp, r7
    a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5d0:	4770      	bx	lr

0000a5d2 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    a5d2:	b480      	push	{r7}
    a5d4:	b083      	sub	sp, #12
    a5d6:	af00      	add	r7, sp, #0
    a5d8:	6078      	str	r0, [r7, #4]
    a5da:	460b      	mov	r3, r1
    a5dc:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a5de:	78fb      	ldrb	r3, [r7, #3]
    a5e0:	687a      	ldr	r2, [r7, #4]
    a5e2:	3308      	adds	r3, #8
    a5e4:	015b      	lsls	r3, r3, #5
    a5e6:	4413      	add	r3, r2
    a5e8:	781b      	ldrb	r3, [r3, #0]
    a5ea:	b2db      	uxtb	r3, r3
}
    a5ec:	4618      	mov	r0, r3
    a5ee:	370c      	adds	r7, #12
    a5f0:	46bd      	mov	sp, r7
    a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5f6:	4770      	bx	lr

0000a5f8 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    a5f8:	b480      	push	{r7}
    a5fa:	b083      	sub	sp, #12
    a5fc:	af00      	add	r7, sp, #0
    a5fe:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    a600:	687b      	ldr	r3, [r7, #4]
    a602:	8b9b      	ldrh	r3, [r3, #28]
    a604:	b29b      	uxth	r3, r3
}
    a606:	4618      	mov	r0, r3
    a608:	370c      	adds	r7, #12
    a60a:	46bd      	mov	sp, r7
    a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a610:	4770      	bx	lr

0000a612 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    a612:	b480      	push	{r7}
    a614:	b083      	sub	sp, #12
    a616:	af00      	add	r7, sp, #0
    a618:	6078      	str	r0, [r7, #4]
    a61a:	460b      	mov	r3, r1
    a61c:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    a61e:	687b      	ldr	r3, [r7, #4]
    a620:	887a      	ldrh	r2, [r7, #2]
    a622:	839a      	strh	r2, [r3, #28]
}
    a624:	bf00      	nop
    a626:	370c      	adds	r7, #12
    a628:	46bd      	mov	sp, r7
    a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a62e:	4770      	bx	lr

0000a630 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    a630:	b480      	push	{r7}
    a632:	b083      	sub	sp, #12
    a634:	af00      	add	r7, sp, #0
    a636:	6078      	str	r0, [r7, #4]
    a638:	460b      	mov	r3, r1
    a63a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    a63c:	687b      	ldr	r3, [r7, #4]
    a63e:	887a      	ldrh	r2, [r7, #2]
    a640:	831a      	strh	r2, [r3, #24]
}
    a642:	bf00      	nop
    a644:	370c      	adds	r7, #12
    a646:	46bd      	mov	sp, r7
    a648:	f85d 7b04 	ldr.w	r7, [sp], #4
    a64c:	4770      	bx	lr

0000a64e <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    a64e:	b480      	push	{r7}
    a650:	b083      	sub	sp, #12
    a652:	af00      	add	r7, sp, #0
    a654:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    a656:	687b      	ldr	r3, [r7, #4]
    a658:	8b1b      	ldrh	r3, [r3, #24]
    a65a:	b29b      	uxth	r3, r3
}
    a65c:	4618      	mov	r0, r3
    a65e:	370c      	adds	r7, #12
    a660:	46bd      	mov	sp, r7
    a662:	f85d 7b04 	ldr.w	r7, [sp], #4
    a666:	4770      	bx	lr

0000a668 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    a668:	b480      	push	{r7}
    a66a:	b083      	sub	sp, #12
    a66c:	af00      	add	r7, sp, #0
    a66e:	6078      	str	r0, [r7, #4]
    a670:	460b      	mov	r3, r1
    a672:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    a674:	687b      	ldr	r3, [r7, #4]
    a676:	887a      	ldrh	r2, [r7, #2]
    a678:	829a      	strh	r2, [r3, #20]
}
    a67a:	bf00      	nop
    a67c:	370c      	adds	r7, #12
    a67e:	46bd      	mov	sp, r7
    a680:	f85d 7b04 	ldr.w	r7, [sp], #4
    a684:	4770      	bx	lr

0000a686 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    a686:	b480      	push	{r7}
    a688:	b085      	sub	sp, #20
    a68a:	af00      	add	r7, sp, #0
    a68c:	6078      	str	r0, [r7, #4]
    a68e:	460b      	mov	r3, r1
    a690:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    a692:	687b      	ldr	r3, [r7, #4]
    a694:	789b      	ldrb	r3, [r3, #2]
    a696:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a698:	7bfa      	ldrb	r2, [r7, #15]
    a69a:	78fb      	ldrb	r3, [r7, #3]
    a69c:	4013      	ands	r3, r2
    a69e:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a6a0:	7bfb      	ldrb	r3, [r7, #15]
}
    a6a2:	4618      	mov	r0, r3
    a6a4:	3714      	adds	r7, #20
    a6a6:	46bd      	mov	sp, r7
    a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6ac:	4770      	bx	lr
	...

0000a6b0 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a6b0:	b580      	push	{r7, lr}
    a6b2:	b082      	sub	sp, #8
    a6b4:	af00      	add	r7, sp, #0
    a6b6:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    a6b8:	687b      	ldr	r3, [r7, #4]
    a6ba:	781b      	ldrb	r3, [r3, #0]
    a6bc:	b2db      	uxtb	r3, r3
    a6be:	f023 0302 	bic.w	r3, r3, #2
    a6c2:	b2da      	uxtb	r2, r3
    a6c4:	687b      	ldr	r3, [r7, #4]
    a6c6:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    a6c8:	2103      	movs	r1, #3
    a6ca:	6878      	ldr	r0, [r7, #4]
    a6cc:	4b02      	ldr	r3, [pc, #8]	; (a6d8 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    a6ce:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    a6d0:	bf00      	nop
    a6d2:	3708      	adds	r7, #8
    a6d4:	46bd      	mov	sp, r7
    a6d6:	bd80      	pop	{r7, pc}
    a6d8:	0000a363 	.word	0x0000a363

0000a6dc <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    a6dc:	b580      	push	{r7, lr}
    a6de:	b084      	sub	sp, #16
    a6e0:	af00      	add	r7, sp, #0
    a6e2:	6078      	str	r0, [r7, #4]
    a6e4:	460b      	mov	r3, r1
    a6e6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a6e8:	2103      	movs	r1, #3
    a6ea:	6878      	ldr	r0, [r7, #4]
    a6ec:	4b06      	ldr	r3, [pc, #24]	; (a708 <hri_usb_get_CTRLA_reg+0x2c>)
    a6ee:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    a6f0:	687b      	ldr	r3, [r7, #4]
    a6f2:	781b      	ldrb	r3, [r3, #0]
    a6f4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a6f6:	7bfa      	ldrb	r2, [r7, #15]
    a6f8:	78fb      	ldrb	r3, [r7, #3]
    a6fa:	4013      	ands	r3, r2
    a6fc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a6fe:	7bfb      	ldrb	r3, [r7, #15]
}
    a700:	4618      	mov	r0, r3
    a702:	3710      	adds	r7, #16
    a704:	46bd      	mov	sp, r7
    a706:	bd80      	pop	{r7, pc}
    a708:	0000a363 	.word	0x0000a363

0000a70c <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    a70c:	b580      	push	{r7, lr}
    a70e:	b082      	sub	sp, #8
    a710:	af00      	add	r7, sp, #0
    a712:	6078      	str	r0, [r7, #4]
    a714:	460b      	mov	r3, r1
    a716:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    a718:	687b      	ldr	r3, [r7, #4]
    a71a:	78fa      	ldrb	r2, [r7, #3]
    a71c:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a71e:	2103      	movs	r1, #3
    a720:	6878      	ldr	r0, [r7, #4]
    a722:	4b03      	ldr	r3, [pc, #12]	; (a730 <hri_usb_write_CTRLA_reg+0x24>)
    a724:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    a726:	bf00      	nop
    a728:	3708      	adds	r7, #8
    a72a:	46bd      	mov	sp, r7
    a72c:	bd80      	pop	{r7, pc}
    a72e:	bf00      	nop
    a730:	0000a363 	.word	0x0000a363

0000a734 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    a734:	b580      	push	{r7, lr}
    a736:	b082      	sub	sp, #8
    a738:	af00      	add	r7, sp, #0
    a73a:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a73c:	2103      	movs	r1, #3
    a73e:	6878      	ldr	r0, [r7, #4]
    a740:	4b04      	ldr	r3, [pc, #16]	; (a754 <hri_usb_read_CTRLA_reg+0x20>)
    a742:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    a744:	687b      	ldr	r3, [r7, #4]
    a746:	781b      	ldrb	r3, [r3, #0]
    a748:	b2db      	uxtb	r3, r3
}
    a74a:	4618      	mov	r0, r3
    a74c:	3708      	adds	r7, #8
    a74e:	46bd      	mov	sp, r7
    a750:	bd80      	pop	{r7, pc}
    a752:	bf00      	nop
    a754:	0000a363 	.word	0x0000a363

0000a758 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    a758:	b480      	push	{r7}
    a75a:	b083      	sub	sp, #12
    a75c:	af00      	add	r7, sp, #0
    a75e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    a760:	687b      	ldr	r3, [r7, #4]
    a762:	891b      	ldrh	r3, [r3, #8]
    a764:	b29b      	uxth	r3, r3
    a766:	f023 0301 	bic.w	r3, r3, #1
    a76a:	b29a      	uxth	r2, r3
    a76c:	687b      	ldr	r3, [r7, #4]
    a76e:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    a770:	bf00      	nop
    a772:	370c      	adds	r7, #12
    a774:	46bd      	mov	sp, r7
    a776:	f85d 7b04 	ldr.w	r7, [sp], #4
    a77a:	4770      	bx	lr

0000a77c <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    a77c:	b480      	push	{r7}
    a77e:	b083      	sub	sp, #12
    a780:	af00      	add	r7, sp, #0
    a782:	6078      	str	r0, [r7, #4]
    a784:	460b      	mov	r3, r1
    a786:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    a788:	687b      	ldr	r3, [r7, #4]
    a78a:	887a      	ldrh	r2, [r7, #2]
    a78c:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    a78e:	bf00      	nop
    a790:	370c      	adds	r7, #12
    a792:	46bd      	mov	sp, r7
    a794:	f85d 7b04 	ldr.w	r7, [sp], #4
    a798:	4770      	bx	lr

0000a79a <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    a79a:	b480      	push	{r7}
    a79c:	b083      	sub	sp, #12
    a79e:	af00      	add	r7, sp, #0
    a7a0:	6078      	str	r0, [r7, #4]
    a7a2:	460b      	mov	r3, r1
    a7a4:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    a7a6:	687b      	ldr	r3, [r7, #4]
    a7a8:	78fa      	ldrb	r2, [r7, #3]
    a7aa:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    a7ac:	bf00      	nop
    a7ae:	370c      	adds	r7, #12
    a7b0:	46bd      	mov	sp, r7
    a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7b6:	4770      	bx	lr

0000a7b8 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    a7b8:	b480      	push	{r7}
    a7ba:	b083      	sub	sp, #12
    a7bc:	af00      	add	r7, sp, #0
    a7be:	6078      	str	r0, [r7, #4]
    a7c0:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    a7c2:	687b      	ldr	r3, [r7, #4]
    a7c4:	683a      	ldr	r2, [r7, #0]
    a7c6:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    a7c8:	bf00      	nop
    a7ca:	370c      	adds	r7, #12
    a7cc:	46bd      	mov	sp, r7
    a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7d2:	4770      	bx	lr

0000a7d4 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    a7d4:	b480      	push	{r7}
    a7d6:	b083      	sub	sp, #12
    a7d8:	af00      	add	r7, sp, #0
    a7da:	6078      	str	r0, [r7, #4]
    a7dc:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    a7de:	2300      	movs	r3, #0
}
    a7e0:	4618      	mov	r0, r3
    a7e2:	370c      	adds	r7, #12
    a7e4:	46bd      	mov	sp, r7
    a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7ea:	4770      	bx	lr

0000a7ec <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    a7ec:	b480      	push	{r7}
    a7ee:	b085      	sub	sp, #20
    a7f0:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    a7f2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a7f6:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    a7f8:	4b28      	ldr	r3, [pc, #160]	; (a89c <_usb_load_calib+0xb0>)
    a7fa:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    a7fc:	f003 031f 	and.w	r3, r3, #31
    a800:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    a802:	4b26      	ldr	r3, [pc, #152]	; (a89c <_usb_load_calib+0xb0>)
    a804:	681b      	ldr	r3, [r3, #0]
    a806:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    a808:	f003 031f 	and.w	r3, r3, #31
    a80c:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    a80e:	4b23      	ldr	r3, [pc, #140]	; (a89c <_usb_load_calib+0xb0>)
    a810:	681b      	ldr	r3, [r3, #0]
    a812:	0a9b      	lsrs	r3, r3, #10
    a814:	f003 0307 	and.w	r3, r3, #7
    a818:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    a81a:	68fb      	ldr	r3, [r7, #12]
    a81c:	2b00      	cmp	r3, #0
    a81e:	d002      	beq.n	a826 <_usb_load_calib+0x3a>
    a820:	68fb      	ldr	r3, [r7, #12]
    a822:	2b1f      	cmp	r3, #31
    a824:	d101      	bne.n	a82a <_usb_load_calib+0x3e>
		pad_transn = 9;
    a826:	2309      	movs	r3, #9
    a828:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    a82a:	68bb      	ldr	r3, [r7, #8]
    a82c:	2b00      	cmp	r3, #0
    a82e:	d002      	beq.n	a836 <_usb_load_calib+0x4a>
    a830:	68bb      	ldr	r3, [r7, #8]
    a832:	2b1f      	cmp	r3, #31
    a834:	d101      	bne.n	a83a <_usb_load_calib+0x4e>
		pad_transp = 25;
    a836:	2319      	movs	r3, #25
    a838:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    a83a:	687b      	ldr	r3, [r7, #4]
    a83c:	2b00      	cmp	r3, #0
    a83e:	d002      	beq.n	a846 <_usb_load_calib+0x5a>
    a840:	687b      	ldr	r3, [r7, #4]
    a842:	2b07      	cmp	r3, #7
    a844:	d101      	bne.n	a84a <_usb_load_calib+0x5e>
		pad_trim = 6;
    a846:	2306      	movs	r3, #6
    a848:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    a84a:	68fb      	ldr	r3, [r7, #12]
    a84c:	b29b      	uxth	r3, r3
    a84e:	019b      	lsls	r3, r3, #6
    a850:	b29b      	uxth	r3, r3
    a852:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    a856:	b29a      	uxth	r2, r3
    a858:	68bb      	ldr	r3, [r7, #8]
    a85a:	b29b      	uxth	r3, r3
    a85c:	f003 031f 	and.w	r3, r3, #31
    a860:	b29b      	uxth	r3, r3
    a862:	4313      	orrs	r3, r2
    a864:	b29a      	uxth	r2, r3
    a866:	687b      	ldr	r3, [r7, #4]
    a868:	b29b      	uxth	r3, r3
    a86a:	031b      	lsls	r3, r3, #12
    a86c:	b29b      	uxth	r3, r3
    a86e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    a872:	b29b      	uxth	r3, r3
    a874:	4313      	orrs	r3, r2
    a876:	b29a      	uxth	r2, r3
    a878:	683b      	ldr	r3, [r7, #0]
    a87a:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    a87c:	683a      	ldr	r2, [r7, #0]
    a87e:	78d3      	ldrb	r3, [r2, #3]
    a880:	f043 0303 	orr.w	r3, r3, #3
    a884:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    a886:	683a      	ldr	r2, [r7, #0]
    a888:	78d3      	ldrb	r3, [r2, #3]
    a88a:	f043 030c 	orr.w	r3, r3, #12
    a88e:	70d3      	strb	r3, [r2, #3]
}
    a890:	bf00      	nop
    a892:	3714      	adds	r7, #20
    a894:	46bd      	mov	sp, r7
    a896:	f85d 7b04 	ldr.w	r7, [sp], #4
    a89a:	4770      	bx	lr
    a89c:	00800084 	.word	0x00800084

0000a8a0 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    a8a0:	b580      	push	{r7, lr}
    a8a2:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    a8a4:	bf00      	nop
    a8a6:	2203      	movs	r2, #3
    a8a8:	2100      	movs	r1, #0
    a8aa:	4804      	ldr	r0, [pc, #16]	; (a8bc <_usb_d_dev_wait_dpll_rdy+0x1c>)
    a8ac:	4b04      	ldr	r3, [pc, #16]	; (a8c0 <_usb_d_dev_wait_dpll_rdy+0x20>)
    a8ae:	4798      	blx	r3
    a8b0:	4603      	mov	r3, r0
    a8b2:	2b03      	cmp	r3, #3
    a8b4:	d1f7      	bne.n	a8a6 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    a8b6:	bf00      	nop
    a8b8:	bd80      	pop	{r7, pc}
    a8ba:	bf00      	nop
    a8bc:	40001000 	.word	0x40001000
    a8c0:	0000a2d5 	.word	0x0000a2d5

0000a8c4 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    a8c4:	b580      	push	{r7, lr}
    a8c6:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    a8c8:	480e      	ldr	r0, [pc, #56]	; (a904 <_usb_d_dev_wait_dfll_rdy+0x40>)
    a8ca:	4b0f      	ldr	r3, [pc, #60]	; (a908 <_usb_d_dev_wait_dfll_rdy+0x44>)
    a8cc:	4798      	blx	r3
    a8ce:	4603      	mov	r3, r0
    a8d0:	2b00      	cmp	r3, #0
    a8d2:	d00a      	beq.n	a8ea <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    a8d4:	bf00      	nop
    a8d6:	f44f 6110 	mov.w	r1, #2304	; 0x900
    a8da:	480a      	ldr	r0, [pc, #40]	; (a904 <_usb_d_dev_wait_dfll_rdy+0x40>)
    a8dc:	4b0b      	ldr	r3, [pc, #44]	; (a90c <_usb_d_dev_wait_dfll_rdy+0x48>)
    a8de:	4798      	blx	r3
    a8e0:	4603      	mov	r3, r0
    a8e2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    a8e6:	d1f6      	bne.n	a8d6 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    a8e8:	e009      	b.n	a8fe <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    a8ea:	bf00      	nop
    a8ec:	f44f 7180 	mov.w	r1, #256	; 0x100
    a8f0:	4804      	ldr	r0, [pc, #16]	; (a904 <_usb_d_dev_wait_dfll_rdy+0x40>)
    a8f2:	4b06      	ldr	r3, [pc, #24]	; (a90c <_usb_d_dev_wait_dfll_rdy+0x48>)
    a8f4:	4798      	blx	r3
    a8f6:	4603      	mov	r3, r0
    a8f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a8fc:	d1f6      	bne.n	a8ec <_usb_d_dev_wait_dfll_rdy+0x28>
}
    a8fe:	bf00      	nop
    a900:	bd80      	pop	{r7, pc}
    a902:	bf00      	nop
    a904:	40001000 	.word	0x40001000
    a908:	0000a333 	.word	0x0000a333
    a90c:	0000a30d 	.word	0x0000a30d

0000a910 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    a910:	b580      	push	{r7, lr}
    a912:	b082      	sub	sp, #8
    a914:	af00      	add	r7, sp, #0
    a916:	4603      	mov	r3, r0
    a918:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    a91a:	79fb      	ldrb	r3, [r7, #7]
    a91c:	2b00      	cmp	r3, #0
    a91e:	d102      	bne.n	a926 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    a920:	4b05      	ldr	r3, [pc, #20]	; (a938 <_usb_d_dev_wait_clk_rdy+0x28>)
    a922:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    a924:	e004      	b.n	a930 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    a926:	79fb      	ldrb	r3, [r7, #7]
    a928:	2b01      	cmp	r3, #1
    a92a:	d101      	bne.n	a930 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    a92c:	4b03      	ldr	r3, [pc, #12]	; (a93c <_usb_d_dev_wait_clk_rdy+0x2c>)
    a92e:	4798      	blx	r3
}
    a930:	bf00      	nop
    a932:	3708      	adds	r7, #8
    a934:	46bd      	mov	sp, r7
    a936:	bd80      	pop	{r7, pc}
    a938:	0000a8c5 	.word	0x0000a8c5
    a93c:	0000a8a1 	.word	0x0000a8a1

0000a940 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    a940:	b580      	push	{r7, lr}
    a942:	b082      	sub	sp, #8
    a944:	af00      	add	r7, sp, #0
    a946:	4603      	mov	r3, r0
    a948:	6039      	str	r1, [r7, #0]
    a94a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    a94c:	683b      	ldr	r3, [r7, #0]
    a94e:	b2da      	uxtb	r2, r3
    a950:	79fb      	ldrb	r3, [r7, #7]
    a952:	4619      	mov	r1, r3
    a954:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a958:	4b02      	ldr	r3, [pc, #8]	; (a964 <_usbd_ep_int_ack+0x24>)
    a95a:	4798      	blx	r3
}
    a95c:	bf00      	nop
    a95e:	3708      	adds	r7, #8
    a960:	46bd      	mov	sp, r7
    a962:	bd80      	pop	{r7, pc}
    a964:	0000a419 	.word	0x0000a419

0000a968 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    a968:	b580      	push	{r7, lr}
    a96a:	b082      	sub	sp, #8
    a96c:	af00      	add	r7, sp, #0
    a96e:	4603      	mov	r3, r0
    a970:	6039      	str	r1, [r7, #0]
    a972:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    a974:	683b      	ldr	r3, [r7, #0]
    a976:	b2da      	uxtb	r2, r3
    a978:	79fb      	ldrb	r3, [r7, #7]
    a97a:	4619      	mov	r1, r3
    a97c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a980:	4b02      	ldr	r3, [pc, #8]	; (a98c <_usbd_ep_int_en+0x24>)
    a982:	4798      	blx	r3
}
    a984:	bf00      	nop
    a986:	3708      	adds	r7, #8
    a988:	46bd      	mov	sp, r7
    a98a:	bd80      	pop	{r7, pc}
    a98c:	0000a4ed 	.word	0x0000a4ed

0000a990 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    a990:	b580      	push	{r7, lr}
    a992:	b082      	sub	sp, #8
    a994:	af00      	add	r7, sp, #0
    a996:	4603      	mov	r3, r0
    a998:	6039      	str	r1, [r7, #0]
    a99a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    a99c:	683b      	ldr	r3, [r7, #0]
    a99e:	b2da      	uxtb	r2, r3
    a9a0:	79fb      	ldrb	r3, [r7, #7]
    a9a2:	4619      	mov	r1, r3
    a9a4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a9a8:	4b02      	ldr	r3, [pc, #8]	; (a9b4 <_usbd_ep_int_dis+0x24>)
    a9aa:	4798      	blx	r3
}
    a9ac:	bf00      	nop
    a9ae:	3708      	adds	r7, #8
    a9b0:	46bd      	mov	sp, r7
    a9b2:	bd80      	pop	{r7, pc}
    a9b4:	0000a519 	.word	0x0000a519

0000a9b8 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    a9b8:	b580      	push	{r7, lr}
    a9ba:	b082      	sub	sp, #8
    a9bc:	af00      	add	r7, sp, #0
    a9be:	4603      	mov	r3, r0
    a9c0:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    a9c2:	79fb      	ldrb	r3, [r7, #7]
    a9c4:	4619      	mov	r1, r3
    a9c6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a9ca:	4b06      	ldr	r3, [pc, #24]	; (a9e4 <_usbd_ep_is_ctrl+0x2c>)
    a9cc:	4798      	blx	r3
    a9ce:	4603      	mov	r3, r0
    a9d0:	2b11      	cmp	r3, #17
    a9d2:	bf0c      	ite	eq
    a9d4:	2301      	moveq	r3, #1
    a9d6:	2300      	movne	r3, #0
    a9d8:	b2db      	uxtb	r3, r3
}
    a9da:	4618      	mov	r0, r3
    a9dc:	3708      	adds	r7, #8
    a9de:	46bd      	mov	sp, r7
    a9e0:	bd80      	pop	{r7, pc}
    a9e2:	bf00      	nop
    a9e4:	0000a5d3 	.word	0x0000a5d3

0000a9e8 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    a9e8:	b580      	push	{r7, lr}
    a9ea:	b082      	sub	sp, #8
    a9ec:	af00      	add	r7, sp, #0
    a9ee:	4603      	mov	r3, r0
    a9f0:	71fb      	strb	r3, [r7, #7]
    a9f2:	460b      	mov	r3, r1
    a9f4:	71bb      	strb	r3, [r7, #6]
    a9f6:	4613      	mov	r3, r2
    a9f8:	717b      	strb	r3, [r7, #5]
	if (st) {
    a9fa:	797b      	ldrb	r3, [r7, #5]
    a9fc:	2b00      	cmp	r3, #0
    a9fe:	d00b      	beq.n	aa18 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    aa00:	79bb      	ldrb	r3, [r7, #6]
    aa02:	2210      	movs	r2, #16
    aa04:	fa02 f303 	lsl.w	r3, r2, r3
    aa08:	b2da      	uxtb	r2, r3
    aa0a:	79fb      	ldrb	r3, [r7, #7]
    aa0c:	4619      	mov	r1, r3
    aa0e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aa12:	4b09      	ldr	r3, [pc, #36]	; (aa38 <_usbd_ep_set_stall+0x50>)
    aa14:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    aa16:	e00a      	b.n	aa2e <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    aa18:	79bb      	ldrb	r3, [r7, #6]
    aa1a:	2210      	movs	r2, #16
    aa1c:	fa02 f303 	lsl.w	r3, r2, r3
    aa20:	b2da      	uxtb	r2, r3
    aa22:	79fb      	ldrb	r3, [r7, #7]
    aa24:	4619      	mov	r1, r3
    aa26:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aa2a:	4b04      	ldr	r3, [pc, #16]	; (aa3c <_usbd_ep_set_stall+0x54>)
    aa2c:	4798      	blx	r3
}
    aa2e:	bf00      	nop
    aa30:	3708      	adds	r7, #8
    aa32:	46bd      	mov	sp, r7
    aa34:	bd80      	pop	{r7, pc}
    aa36:	bf00      	nop
    aa38:	0000a445 	.word	0x0000a445
    aa3c:	0000a499 	.word	0x0000a499

0000aa40 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    aa40:	b580      	push	{r7, lr}
    aa42:	b084      	sub	sp, #16
    aa44:	af00      	add	r7, sp, #0
    aa46:	4603      	mov	r3, r0
    aa48:	460a      	mov	r2, r1
    aa4a:	71fb      	strb	r3, [r7, #7]
    aa4c:	4613      	mov	r3, r2
    aa4e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    aa50:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aa54:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    aa56:	79fb      	ldrb	r3, [r7, #7]
    aa58:	4619      	mov	r1, r3
    aa5a:	68f8      	ldr	r0, [r7, #12]
    aa5c:	4b08      	ldr	r3, [pc, #32]	; (aa80 <_usbd_ep_is_stalled+0x40>)
    aa5e:	4798      	blx	r3
    aa60:	4603      	mov	r3, r0
    aa62:	4619      	mov	r1, r3
    aa64:	79bb      	ldrb	r3, [r7, #6]
    aa66:	2210      	movs	r2, #16
    aa68:	fa02 f303 	lsl.w	r3, r2, r3
    aa6c:	400b      	ands	r3, r1
    aa6e:	2b00      	cmp	r3, #0
    aa70:	bf14      	ite	ne
    aa72:	2301      	movne	r3, #1
    aa74:	2300      	moveq	r3, #0
    aa76:	b2db      	uxtb	r3, r3
}
    aa78:	4618      	mov	r0, r3
    aa7a:	3710      	adds	r7, #16
    aa7c:	46bd      	mov	sp, r7
    aa7e:	bd80      	pop	{r7, pc}
    aa80:	0000a471 	.word	0x0000a471

0000aa84 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    aa84:	b580      	push	{r7, lr}
    aa86:	b084      	sub	sp, #16
    aa88:	af00      	add	r7, sp, #0
    aa8a:	4603      	mov	r3, r0
    aa8c:	460a      	mov	r2, r1
    aa8e:	71fb      	strb	r3, [r7, #7]
    aa90:	4613      	mov	r3, r2
    aa92:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    aa94:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aa98:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    aa9a:	79fb      	ldrb	r3, [r7, #7]
    aa9c:	4619      	mov	r1, r3
    aa9e:	68f8      	ldr	r0, [r7, #12]
    aaa0:	4b08      	ldr	r3, [pc, #32]	; (aac4 <_usbd_ep_is_stall_sent+0x40>)
    aaa2:	4798      	blx	r3
    aaa4:	4603      	mov	r3, r0
    aaa6:	4619      	mov	r1, r3
    aaa8:	79bb      	ldrb	r3, [r7, #6]
    aaaa:	2220      	movs	r2, #32
    aaac:	fa02 f303 	lsl.w	r3, r2, r3
    aab0:	400b      	ands	r3, r1
    aab2:	2b00      	cmp	r3, #0
    aab4:	bf14      	ite	ne
    aab6:	2301      	movne	r3, #1
    aab8:	2300      	moveq	r3, #0
    aaba:	b2db      	uxtb	r3, r3
}
    aabc:	4618      	mov	r0, r3
    aabe:	3710      	adds	r7, #16
    aac0:	46bd      	mov	sp, r7
    aac2:	bd80      	pop	{r7, pc}
    aac4:	0000a3f1 	.word	0x0000a3f1

0000aac8 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    aac8:	b580      	push	{r7, lr}
    aaca:	b082      	sub	sp, #8
    aacc:	af00      	add	r7, sp, #0
    aace:	4603      	mov	r3, r0
    aad0:	460a      	mov	r2, r1
    aad2:	71fb      	strb	r3, [r7, #7]
    aad4:	4613      	mov	r3, r2
    aad6:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    aad8:	79bb      	ldrb	r3, [r7, #6]
    aada:	2220      	movs	r2, #32
    aadc:	409a      	lsls	r2, r3
    aade:	79fb      	ldrb	r3, [r7, #7]
    aae0:	4611      	mov	r1, r2
    aae2:	4618      	mov	r0, r3
    aae4:	4b02      	ldr	r3, [pc, #8]	; (aaf0 <_usbd_ep_ack_stall+0x28>)
    aae6:	4798      	blx	r3
}
    aae8:	bf00      	nop
    aaea:	3708      	adds	r7, #8
    aaec:	46bd      	mov	sp, r7
    aaee:	bd80      	pop	{r7, pc}
    aaf0:	0000a941 	.word	0x0000a941

0000aaf4 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    aaf4:	b580      	push	{r7, lr}
    aaf6:	b082      	sub	sp, #8
    aaf8:	af00      	add	r7, sp, #0
    aafa:	4603      	mov	r3, r0
    aafc:	71fb      	strb	r3, [r7, #7]
    aafe:	460b      	mov	r3, r1
    ab00:	71bb      	strb	r3, [r7, #6]
    ab02:	4613      	mov	r3, r2
    ab04:	717b      	strb	r3, [r7, #5]
	if (en) {
    ab06:	797b      	ldrb	r3, [r7, #5]
    ab08:	2b00      	cmp	r3, #0
    ab0a:	d008      	beq.n	ab1e <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    ab0c:	79bb      	ldrb	r3, [r7, #6]
    ab0e:	2220      	movs	r2, #32
    ab10:	409a      	lsls	r2, r3
    ab12:	79fb      	ldrb	r3, [r7, #7]
    ab14:	4611      	mov	r1, r2
    ab16:	4618      	mov	r0, r3
    ab18:	4b07      	ldr	r3, [pc, #28]	; (ab38 <_usbd_ep_int_stall_en+0x44>)
    ab1a:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    ab1c:	e007      	b.n	ab2e <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    ab1e:	79bb      	ldrb	r3, [r7, #6]
    ab20:	2220      	movs	r2, #32
    ab22:	409a      	lsls	r2, r3
    ab24:	79fb      	ldrb	r3, [r7, #7]
    ab26:	4611      	mov	r1, r2
    ab28:	4618      	mov	r0, r3
    ab2a:	4b04      	ldr	r3, [pc, #16]	; (ab3c <_usbd_ep_int_stall_en+0x48>)
    ab2c:	4798      	blx	r3
}
    ab2e:	bf00      	nop
    ab30:	3708      	adds	r7, #8
    ab32:	46bd      	mov	sp, r7
    ab34:	bd80      	pop	{r7, pc}
    ab36:	bf00      	nop
    ab38:	0000a969 	.word	0x0000a969
    ab3c:	0000a991 	.word	0x0000a991

0000ab40 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    ab40:	b580      	push	{r7, lr}
    ab42:	b082      	sub	sp, #8
    ab44:	af00      	add	r7, sp, #0
    ab46:	4603      	mov	r3, r0
    ab48:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    ab4a:	79fb      	ldrb	r3, [r7, #7]
    ab4c:	4619      	mov	r1, r3
    ab4e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ab52:	4b03      	ldr	r3, [pc, #12]	; (ab60 <_usbd_ep_stop_setup+0x20>)
    ab54:	4798      	blx	r3
}
    ab56:	bf00      	nop
    ab58:	3708      	adds	r7, #8
    ab5a:	46bd      	mov	sp, r7
    ab5c:	bd80      	pop	{r7, pc}
    ab5e:	bf00      	nop
    ab60:	0000a4c5 	.word	0x0000a4c5

0000ab64 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    ab64:	b580      	push	{r7, lr}
    ab66:	b082      	sub	sp, #8
    ab68:	af00      	add	r7, sp, #0
    ab6a:	4603      	mov	r3, r0
    ab6c:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    ab6e:	79fb      	ldrb	r3, [r7, #7]
    ab70:	2210      	movs	r2, #16
    ab72:	4619      	mov	r1, r3
    ab74:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ab78:	4b05      	ldr	r3, [pc, #20]	; (ab90 <_usbd_ep_is_setup+0x2c>)
    ab7a:	4798      	blx	r3
    ab7c:	4603      	mov	r3, r0
    ab7e:	2b00      	cmp	r3, #0
    ab80:	bf14      	ite	ne
    ab82:	2301      	movne	r3, #1
    ab84:	2300      	moveq	r3, #0
    ab86:	b2db      	uxtb	r3, r3
}
    ab88:	4618      	mov	r0, r3
    ab8a:	3708      	adds	r7, #8
    ab8c:	46bd      	mov	sp, r7
    ab8e:	bd80      	pop	{r7, pc}
    ab90:	0000a3bb 	.word	0x0000a3bb

0000ab94 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    ab94:	b580      	push	{r7, lr}
    ab96:	b082      	sub	sp, #8
    ab98:	af00      	add	r7, sp, #0
    ab9a:	4603      	mov	r3, r0
    ab9c:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    ab9e:	79fb      	ldrb	r3, [r7, #7]
    aba0:	2110      	movs	r1, #16
    aba2:	4618      	mov	r0, r3
    aba4:	4b02      	ldr	r3, [pc, #8]	; (abb0 <_usbd_ep_ack_setup+0x1c>)
    aba6:	4798      	blx	r3
}
    aba8:	bf00      	nop
    abaa:	3708      	adds	r7, #8
    abac:	46bd      	mov	sp, r7
    abae:	bd80      	pop	{r7, pc}
    abb0:	0000a941 	.word	0x0000a941

0000abb4 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    abb4:	b580      	push	{r7, lr}
    abb6:	b082      	sub	sp, #8
    abb8:	af00      	add	r7, sp, #0
    abba:	4603      	mov	r3, r0
    abbc:	71fb      	strb	r3, [r7, #7]
    abbe:	460b      	mov	r3, r1
    abc0:	71bb      	strb	r3, [r7, #6]
    abc2:	4613      	mov	r3, r2
    abc4:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    abc6:	797b      	ldrb	r3, [r7, #5]
    abc8:	2b00      	cmp	r3, #0
    abca:	d00b      	beq.n	abe4 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    abcc:	79bb      	ldrb	r3, [r7, #6]
    abce:	2201      	movs	r2, #1
    abd0:	fa02 f303 	lsl.w	r3, r2, r3
    abd4:	b2da      	uxtb	r2, r3
    abd6:	79fb      	ldrb	r3, [r7, #7]
    abd8:	4619      	mov	r1, r3
    abda:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    abde:	4b09      	ldr	r3, [pc, #36]	; (ac04 <_usbd_ep_set_toggle+0x50>)
    abe0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    abe2:	e00a      	b.n	abfa <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    abe4:	79bb      	ldrb	r3, [r7, #6]
    abe6:	2201      	movs	r2, #1
    abe8:	fa02 f303 	lsl.w	r3, r2, r3
    abec:	b2da      	uxtb	r2, r3
    abee:	79fb      	ldrb	r3, [r7, #7]
    abf0:	4619      	mov	r1, r3
    abf2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    abf6:	4b04      	ldr	r3, [pc, #16]	; (ac08 <_usbd_ep_set_toggle+0x54>)
    abf8:	4798      	blx	r3
}
    abfa:	bf00      	nop
    abfc:	3708      	adds	r7, #8
    abfe:	46bd      	mov	sp, r7
    ac00:	bd80      	pop	{r7, pc}
    ac02:	bf00      	nop
    ac04:	0000a445 	.word	0x0000a445
    ac08:	0000a499 	.word	0x0000a499

0000ac0c <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    ac0c:	b580      	push	{r7, lr}
    ac0e:	b082      	sub	sp, #8
    ac10:	af00      	add	r7, sp, #0
    ac12:	4603      	mov	r3, r0
    ac14:	460a      	mov	r2, r1
    ac16:	71fb      	strb	r3, [r7, #7]
    ac18:	4613      	mov	r3, r2
    ac1a:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    ac1c:	79bb      	ldrb	r3, [r7, #6]
    ac1e:	2201      	movs	r2, #1
    ac20:	409a      	lsls	r2, r3
    ac22:	79fb      	ldrb	r3, [r7, #7]
    ac24:	4611      	mov	r1, r2
    ac26:	4618      	mov	r0, r3
    ac28:	4b02      	ldr	r3, [pc, #8]	; (ac34 <_usbd_ep_ack_io_cpt+0x28>)
    ac2a:	4798      	blx	r3
}
    ac2c:	bf00      	nop
    ac2e:	3708      	adds	r7, #8
    ac30:	46bd      	mov	sp, r7
    ac32:	bd80      	pop	{r7, pc}
    ac34:	0000a941 	.word	0x0000a941

0000ac38 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    ac38:	b480      	push	{r7}
    ac3a:	b085      	sub	sp, #20
    ac3c:	af00      	add	r7, sp, #0
    ac3e:	4603      	mov	r3, r0
    ac40:	603a      	str	r2, [r7, #0]
    ac42:	71fb      	strb	r3, [r7, #7]
    ac44:	460b      	mov	r3, r1
    ac46:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ac48:	79fa      	ldrb	r2, [r7, #7]
    ac4a:	79bb      	ldrb	r3, [r7, #6]
    ac4c:	0052      	lsls	r2, r2, #1
    ac4e:	4413      	add	r3, r2
    ac50:	011b      	lsls	r3, r3, #4
    ac52:	4a06      	ldr	r2, [pc, #24]	; (ac6c <_usbd_ep_set_buf+0x34>)
    ac54:	4413      	add	r3, r2
    ac56:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    ac58:	68fb      	ldr	r3, [r7, #12]
    ac5a:	683a      	ldr	r2, [r7, #0]
    ac5c:	601a      	str	r2, [r3, #0]
}
    ac5e:	bf00      	nop
    ac60:	3714      	adds	r7, #20
    ac62:	46bd      	mov	sp, r7
    ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
    ac68:	4770      	bx	lr
    ac6a:	bf00      	nop
    ac6c:	2000265c 	.word	0x2000265c

0000ac70 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    ac70:	b480      	push	{r7}
    ac72:	b085      	sub	sp, #20
    ac74:	af00      	add	r7, sp, #0
    ac76:	4603      	mov	r3, r0
    ac78:	71fb      	strb	r3, [r7, #7]
    ac7a:	460b      	mov	r3, r1
    ac7c:	71bb      	strb	r3, [r7, #6]
    ac7e:	4613      	mov	r3, r2
    ac80:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ac82:	79fa      	ldrb	r2, [r7, #7]
    ac84:	79bb      	ldrb	r3, [r7, #6]
    ac86:	0052      	lsls	r2, r2, #1
    ac88:	4413      	add	r3, r2
    ac8a:	011b      	lsls	r3, r3, #4
    ac8c:	4a08      	ldr	r2, [pc, #32]	; (acb0 <_usbd_ep_set_in_count+0x40>)
    ac8e:	4413      	add	r3, r2
    ac90:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    ac92:	88bb      	ldrh	r3, [r7, #4]
    ac94:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ac98:	b299      	uxth	r1, r3
    ac9a:	68fa      	ldr	r2, [r7, #12]
    ac9c:	6853      	ldr	r3, [r2, #4]
    ac9e:	f361 339b 	bfi	r3, r1, #14, #14
    aca2:	6053      	str	r3, [r2, #4]
}
    aca4:	bf00      	nop
    aca6:	3714      	adds	r7, #20
    aca8:	46bd      	mov	sp, r7
    acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    acae:	4770      	bx	lr
    acb0:	2000265c 	.word	0x2000265c

0000acb4 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    acb4:	b480      	push	{r7}
    acb6:	b085      	sub	sp, #20
    acb8:	af00      	add	r7, sp, #0
    acba:	4603      	mov	r3, r0
    acbc:	71fb      	strb	r3, [r7, #7]
    acbe:	460b      	mov	r3, r1
    acc0:	71bb      	strb	r3, [r7, #6]
    acc2:	4613      	mov	r3, r2
    acc4:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    acc6:	79fa      	ldrb	r2, [r7, #7]
    acc8:	79bb      	ldrb	r3, [r7, #6]
    acca:	0052      	lsls	r2, r2, #1
    accc:	4413      	add	r3, r2
    acce:	011b      	lsls	r3, r3, #4
    acd0:	4a08      	ldr	r2, [pc, #32]	; (acf4 <_usbd_ep_set_in_size+0x40>)
    acd2:	4413      	add	r3, r2
    acd4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    acd6:	88bb      	ldrh	r3, [r7, #4]
    acd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    acdc:	b299      	uxth	r1, r3
    acde:	68fa      	ldr	r2, [r7, #12]
    ace0:	6853      	ldr	r3, [r2, #4]
    ace2:	f361 030d 	bfi	r3, r1, #0, #14
    ace6:	6053      	str	r3, [r2, #4]
}
    ace8:	bf00      	nop
    acea:	3714      	adds	r7, #20
    acec:	46bd      	mov	sp, r7
    acee:	f85d 7b04 	ldr.w	r7, [sp], #4
    acf2:	4770      	bx	lr
    acf4:	2000265c 	.word	0x2000265c

0000acf8 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    acf8:	b480      	push	{r7}
    acfa:	b085      	sub	sp, #20
    acfc:	af00      	add	r7, sp, #0
    acfe:	4603      	mov	r3, r0
    ad00:	71fb      	strb	r3, [r7, #7]
    ad02:	460b      	mov	r3, r1
    ad04:	71bb      	strb	r3, [r7, #6]
    ad06:	4613      	mov	r3, r2
    ad08:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ad0a:	79fa      	ldrb	r2, [r7, #7]
    ad0c:	79bb      	ldrb	r3, [r7, #6]
    ad0e:	0052      	lsls	r2, r2, #1
    ad10:	4413      	add	r3, r2
    ad12:	011b      	lsls	r3, r3, #4
    ad14:	4a08      	ldr	r2, [pc, #32]	; (ad38 <_usbd_ep_set_out_count+0x40>)
    ad16:	4413      	add	r3, r2
    ad18:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    ad1a:	88bb      	ldrh	r3, [r7, #4]
    ad1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ad20:	b299      	uxth	r1, r3
    ad22:	68fa      	ldr	r2, [r7, #12]
    ad24:	6853      	ldr	r3, [r2, #4]
    ad26:	f361 030d 	bfi	r3, r1, #0, #14
    ad2a:	6053      	str	r3, [r2, #4]
}
    ad2c:	bf00      	nop
    ad2e:	3714      	adds	r7, #20
    ad30:	46bd      	mov	sp, r7
    ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad36:	4770      	bx	lr
    ad38:	2000265c 	.word	0x2000265c

0000ad3c <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    ad3c:	b480      	push	{r7}
    ad3e:	b085      	sub	sp, #20
    ad40:	af00      	add	r7, sp, #0
    ad42:	4603      	mov	r3, r0
    ad44:	71fb      	strb	r3, [r7, #7]
    ad46:	460b      	mov	r3, r1
    ad48:	71bb      	strb	r3, [r7, #6]
    ad4a:	4613      	mov	r3, r2
    ad4c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ad4e:	79fa      	ldrb	r2, [r7, #7]
    ad50:	79bb      	ldrb	r3, [r7, #6]
    ad52:	0052      	lsls	r2, r2, #1
    ad54:	4413      	add	r3, r2
    ad56:	011b      	lsls	r3, r3, #4
    ad58:	4a08      	ldr	r2, [pc, #32]	; (ad7c <_usbd_ep_set_out_size+0x40>)
    ad5a:	4413      	add	r3, r2
    ad5c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    ad5e:	88bb      	ldrh	r3, [r7, #4]
    ad60:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ad64:	b299      	uxth	r1, r3
    ad66:	68fa      	ldr	r2, [r7, #12]
    ad68:	6853      	ldr	r3, [r2, #4]
    ad6a:	f361 339b 	bfi	r3, r1, #14, #14
    ad6e:	6053      	str	r3, [r2, #4]
}
    ad70:	bf00      	nop
    ad72:	3714      	adds	r7, #20
    ad74:	46bd      	mov	sp, r7
    ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad7a:	4770      	bx	lr
    ad7c:	2000265c 	.word	0x2000265c

0000ad80 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    ad80:	b580      	push	{r7, lr}
    ad82:	b084      	sub	sp, #16
    ad84:	af00      	add	r7, sp, #0
    ad86:	60ba      	str	r2, [r7, #8]
    ad88:	607b      	str	r3, [r7, #4]
    ad8a:	4603      	mov	r3, r0
    ad8c:	73fb      	strb	r3, [r7, #15]
    ad8e:	460b      	mov	r3, r1
    ad90:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    ad92:	68bb      	ldr	r3, [r7, #8]
    ad94:	b29a      	uxth	r2, r3
    ad96:	7bb9      	ldrb	r1, [r7, #14]
    ad98:	7bfb      	ldrb	r3, [r7, #15]
    ad9a:	4618      	mov	r0, r3
    ad9c:	4b06      	ldr	r3, [pc, #24]	; (adb8 <_usbd_ep_set_in_trans+0x38>)
    ad9e:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    ada0:	687b      	ldr	r3, [r7, #4]
    ada2:	b29a      	uxth	r2, r3
    ada4:	7bb9      	ldrb	r1, [r7, #14]
    ada6:	7bfb      	ldrb	r3, [r7, #15]
    ada8:	4618      	mov	r0, r3
    adaa:	4b04      	ldr	r3, [pc, #16]	; (adbc <_usbd_ep_set_in_trans+0x3c>)
    adac:	4798      	blx	r3
}
    adae:	bf00      	nop
    adb0:	3710      	adds	r7, #16
    adb2:	46bd      	mov	sp, r7
    adb4:	bd80      	pop	{r7, pc}
    adb6:	bf00      	nop
    adb8:	0000acb5 	.word	0x0000acb5
    adbc:	0000ac71 	.word	0x0000ac71

0000adc0 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    adc0:	b580      	push	{r7, lr}
    adc2:	b084      	sub	sp, #16
    adc4:	af00      	add	r7, sp, #0
    adc6:	60ba      	str	r2, [r7, #8]
    adc8:	607b      	str	r3, [r7, #4]
    adca:	4603      	mov	r3, r0
    adcc:	73fb      	strb	r3, [r7, #15]
    adce:	460b      	mov	r3, r1
    add0:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    add2:	68bb      	ldr	r3, [r7, #8]
    add4:	b29a      	uxth	r2, r3
    add6:	7bb9      	ldrb	r1, [r7, #14]
    add8:	7bfb      	ldrb	r3, [r7, #15]
    adda:	4618      	mov	r0, r3
    addc:	4b06      	ldr	r3, [pc, #24]	; (adf8 <_usbd_ep_set_out_trans+0x38>)
    adde:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    ade0:	687b      	ldr	r3, [r7, #4]
    ade2:	b29a      	uxth	r2, r3
    ade4:	7bb9      	ldrb	r1, [r7, #14]
    ade6:	7bfb      	ldrb	r3, [r7, #15]
    ade8:	4618      	mov	r0, r3
    adea:	4b04      	ldr	r3, [pc, #16]	; (adfc <_usbd_ep_set_out_trans+0x3c>)
    adec:	4798      	blx	r3
}
    adee:	bf00      	nop
    adf0:	3710      	adds	r7, #16
    adf2:	46bd      	mov	sp, r7
    adf4:	bd80      	pop	{r7, pc}
    adf6:	bf00      	nop
    adf8:	0000ad3d 	.word	0x0000ad3d
    adfc:	0000acf9 	.word	0x0000acf9

0000ae00 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    ae00:	b480      	push	{r7}
    ae02:	b085      	sub	sp, #20
    ae04:	af00      	add	r7, sp, #0
    ae06:	4603      	mov	r3, r0
    ae08:	460a      	mov	r2, r1
    ae0a:	71fb      	strb	r3, [r7, #7]
    ae0c:	4613      	mov	r3, r2
    ae0e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ae10:	79fa      	ldrb	r2, [r7, #7]
    ae12:	79bb      	ldrb	r3, [r7, #6]
    ae14:	0052      	lsls	r2, r2, #1
    ae16:	4413      	add	r3, r2
    ae18:	011b      	lsls	r3, r3, #4
    ae1a:	4a06      	ldr	r2, [pc, #24]	; (ae34 <_usbd_ep_clear_bank_status+0x34>)
    ae1c:	4413      	add	r3, r2
    ae1e:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    ae20:	68fb      	ldr	r3, [r7, #12]
    ae22:	2200      	movs	r2, #0
    ae24:	729a      	strb	r2, [r3, #10]
}
    ae26:	bf00      	nop
    ae28:	3714      	adds	r7, #20
    ae2a:	46bd      	mov	sp, r7
    ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae30:	4770      	bx	lr
    ae32:	bf00      	nop
    ae34:	2000265c 	.word	0x2000265c

0000ae38 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    ae38:	b580      	push	{r7, lr}
    ae3a:	b082      	sub	sp, #8
    ae3c:	af00      	add	r7, sp, #0
    ae3e:	4603      	mov	r3, r0
    ae40:	71fb      	strb	r3, [r7, #7]
    ae42:	460b      	mov	r3, r1
    ae44:	71bb      	strb	r3, [r7, #6]
    ae46:	4613      	mov	r3, r2
    ae48:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    ae4a:	797b      	ldrb	r3, [r7, #5]
    ae4c:	2b00      	cmp	r3, #0
    ae4e:	d00b      	beq.n	ae68 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    ae50:	79bb      	ldrb	r3, [r7, #6]
    ae52:	2240      	movs	r2, #64	; 0x40
    ae54:	fa02 f303 	lsl.w	r3, r2, r3
    ae58:	b2da      	uxtb	r2, r3
    ae5a:	79fb      	ldrb	r3, [r7, #7]
    ae5c:	4619      	mov	r1, r3
    ae5e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ae62:	4b09      	ldr	r3, [pc, #36]	; (ae88 <_usbd_ep_set_in_rdy+0x50>)
    ae64:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    ae66:	e00a      	b.n	ae7e <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    ae68:	79bb      	ldrb	r3, [r7, #6]
    ae6a:	2240      	movs	r2, #64	; 0x40
    ae6c:	fa02 f303 	lsl.w	r3, r2, r3
    ae70:	b2da      	uxtb	r2, r3
    ae72:	79fb      	ldrb	r3, [r7, #7]
    ae74:	4619      	mov	r1, r3
    ae76:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ae7a:	4b04      	ldr	r3, [pc, #16]	; (ae8c <_usbd_ep_set_in_rdy+0x54>)
    ae7c:	4798      	blx	r3
}
    ae7e:	bf00      	nop
    ae80:	3708      	adds	r7, #8
    ae82:	46bd      	mov	sp, r7
    ae84:	bd80      	pop	{r7, pc}
    ae86:	bf00      	nop
    ae88:	0000a445 	.word	0x0000a445
    ae8c:	0000a499 	.word	0x0000a499

0000ae90 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    ae90:	b580      	push	{r7, lr}
    ae92:	b082      	sub	sp, #8
    ae94:	af00      	add	r7, sp, #0
    ae96:	4603      	mov	r3, r0
    ae98:	71fb      	strb	r3, [r7, #7]
    ae9a:	460b      	mov	r3, r1
    ae9c:	71bb      	strb	r3, [r7, #6]
    ae9e:	4613      	mov	r3, r2
    aea0:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    aea2:	797b      	ldrb	r3, [r7, #5]
    aea4:	2b00      	cmp	r3, #0
    aea6:	d00b      	beq.n	aec0 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    aea8:	79bb      	ldrb	r3, [r7, #6]
    aeaa:	2240      	movs	r2, #64	; 0x40
    aeac:	fa02 f303 	lsl.w	r3, r2, r3
    aeb0:	b2da      	uxtb	r2, r3
    aeb2:	79fb      	ldrb	r3, [r7, #7]
    aeb4:	4619      	mov	r1, r3
    aeb6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aeba:	4b09      	ldr	r3, [pc, #36]	; (aee0 <_usbd_ep_set_out_rdy+0x50>)
    aebc:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    aebe:	e00a      	b.n	aed6 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    aec0:	79bb      	ldrb	r3, [r7, #6]
    aec2:	2240      	movs	r2, #64	; 0x40
    aec4:	fa02 f303 	lsl.w	r3, r2, r3
    aec8:	b2da      	uxtb	r2, r3
    aeca:	79fb      	ldrb	r3, [r7, #7]
    aecc:	4619      	mov	r1, r3
    aece:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aed2:	4b04      	ldr	r3, [pc, #16]	; (aee4 <_usbd_ep_set_out_rdy+0x54>)
    aed4:	4798      	blx	r3
}
    aed6:	bf00      	nop
    aed8:	3708      	adds	r7, #8
    aeda:	46bd      	mov	sp, r7
    aedc:	bd80      	pop	{r7, pc}
    aede:	bf00      	nop
    aee0:	0000a499 	.word	0x0000a499
    aee4:	0000a445 	.word	0x0000a445

0000aee8 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    aee8:	b480      	push	{r7}
    aeea:	b083      	sub	sp, #12
    aeec:	af00      	add	r7, sp, #0
    aeee:	4603      	mov	r3, r0
    aef0:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    aef2:	88fb      	ldrh	r3, [r7, #6]
    aef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    aef8:	d820      	bhi.n	af3c <_usbd_ep_pcksize_size+0x54>
    aefa:	88fb      	ldrh	r3, [r7, #6]
    aefc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    af00:	d81a      	bhi.n	af38 <_usbd_ep_pcksize_size+0x50>
    af02:	88fb      	ldrh	r3, [r7, #6]
    af04:	2b80      	cmp	r3, #128	; 0x80
    af06:	d815      	bhi.n	af34 <_usbd_ep_pcksize_size+0x4c>
    af08:	88fb      	ldrh	r3, [r7, #6]
    af0a:	2b40      	cmp	r3, #64	; 0x40
    af0c:	d810      	bhi.n	af30 <_usbd_ep_pcksize_size+0x48>
    af0e:	88fb      	ldrh	r3, [r7, #6]
    af10:	2b20      	cmp	r3, #32
    af12:	d80b      	bhi.n	af2c <_usbd_ep_pcksize_size+0x44>
    af14:	88fb      	ldrh	r3, [r7, #6]
    af16:	2b10      	cmp	r3, #16
    af18:	d806      	bhi.n	af28 <_usbd_ep_pcksize_size+0x40>
    af1a:	88fb      	ldrh	r3, [r7, #6]
    af1c:	2b08      	cmp	r3, #8
    af1e:	bf8c      	ite	hi
    af20:	2301      	movhi	r3, #1
    af22:	2300      	movls	r3, #0
    af24:	b2db      	uxtb	r3, r3
    af26:	e00a      	b.n	af3e <_usbd_ep_pcksize_size+0x56>
    af28:	2302      	movs	r3, #2
    af2a:	e008      	b.n	af3e <_usbd_ep_pcksize_size+0x56>
    af2c:	2303      	movs	r3, #3
    af2e:	e006      	b.n	af3e <_usbd_ep_pcksize_size+0x56>
    af30:	2304      	movs	r3, #4
    af32:	e004      	b.n	af3e <_usbd_ep_pcksize_size+0x56>
    af34:	2305      	movs	r3, #5
    af36:	e002      	b.n	af3e <_usbd_ep_pcksize_size+0x56>
    af38:	2306      	movs	r3, #6
    af3a:	e000      	b.n	af3e <_usbd_ep_pcksize_size+0x56>
    af3c:	2307      	movs	r3, #7
}
    af3e:	4618      	mov	r0, r3
    af40:	370c      	adds	r7, #12
    af42:	46bd      	mov	sp, r7
    af44:	f85d 7b04 	ldr.w	r7, [sp], #4
    af48:	4770      	bx	lr
	...

0000af4c <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    af4c:	b480      	push	{r7}
    af4e:	b085      	sub	sp, #20
    af50:	af00      	add	r7, sp, #0
    af52:	4603      	mov	r3, r0
    af54:	460a      	mov	r2, r1
    af56:	71fb      	strb	r3, [r7, #7]
    af58:	4613      	mov	r3, r2
    af5a:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    af5c:	79fb      	ldrb	r3, [r7, #7]
    af5e:	2b00      	cmp	r3, #0
    af60:	d008      	beq.n	af74 <_usb_d_dev_ept+0x28>
    af62:	79bb      	ldrb	r3, [r7, #6]
    af64:	2b00      	cmp	r3, #0
    af66:	d003      	beq.n	af70 <_usb_d_dev_ept+0x24>
    af68:	79fb      	ldrb	r3, [r7, #7]
    af6a:	3304      	adds	r3, #4
    af6c:	b2db      	uxtb	r3, r3
    af6e:	e002      	b.n	af76 <_usb_d_dev_ept+0x2a>
    af70:	79fb      	ldrb	r3, [r7, #7]
    af72:	e000      	b.n	af76 <_usb_d_dev_ept+0x2a>
    af74:	2300      	movs	r3, #0
    af76:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    af78:	7bfa      	ldrb	r2, [r7, #15]
    af7a:	4613      	mov	r3, r2
    af7c:	009b      	lsls	r3, r3, #2
    af7e:	4413      	add	r3, r2
    af80:	009b      	lsls	r3, r3, #2
    af82:	3310      	adds	r3, #16
    af84:	4a04      	ldr	r2, [pc, #16]	; (af98 <_usb_d_dev_ept+0x4c>)
    af86:	4413      	add	r3, r2
    af88:	3304      	adds	r3, #4
}
    af8a:	4618      	mov	r0, r3
    af8c:	3714      	adds	r7, #20
    af8e:	46bd      	mov	sp, r7
    af90:	f85d 7b04 	ldr.w	r7, [sp], #4
    af94:	4770      	bx	lr
    af96:	bf00      	nop
    af98:	20002594 	.word	0x20002594

0000af9c <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    af9c:	b580      	push	{r7, lr}
    af9e:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    afa0:	2104      	movs	r1, #4
    afa2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    afa6:	4b03      	ldr	r3, [pc, #12]	; (afb4 <_usb_d_dev_sof+0x18>)
    afa8:	4798      	blx	r3
	dev_inst.callbacks.sof();
    afaa:	4b03      	ldr	r3, [pc, #12]	; (afb8 <_usb_d_dev_sof+0x1c>)
    afac:	681b      	ldr	r3, [r3, #0]
    afae:	4798      	blx	r3
}
    afb0:	bf00      	nop
    afb2:	bd80      	pop	{r7, pc}
    afb4:	0000a613 	.word	0x0000a613
    afb8:	20002594 	.word	0x20002594

0000afbc <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    afbc:	b580      	push	{r7, lr}
    afbe:	b084      	sub	sp, #16
    afc0:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    afc2:	2300      	movs	r3, #0
    afc4:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    afc6:	f240 2101 	movw	r1, #513	; 0x201
    afca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    afce:	4b1a      	ldr	r3, [pc, #104]	; (b038 <_usb_d_dev_lpmsusp+0x7c>)
    afd0:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    afd2:	f240 2101 	movw	r1, #513	; 0x201
    afd6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    afda:	4b18      	ldr	r3, [pc, #96]	; (b03c <_usb_d_dev_lpmsusp+0x80>)
    afdc:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    afde:	2170      	movs	r1, #112	; 0x70
    afe0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    afe4:	4b16      	ldr	r3, [pc, #88]	; (b040 <_usb_d_dev_lpmsusp+0x84>)
    afe6:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    afe8:	2300      	movs	r3, #0
    afea:	73fb      	strb	r3, [r7, #15]
    afec:	e018      	b.n	b020 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    afee:	7bfb      	ldrb	r3, [r7, #15]
    aff0:	015b      	lsls	r3, r3, #5
    aff2:	4a14      	ldr	r2, [pc, #80]	; (b044 <_usb_d_dev_lpmsusp+0x88>)
    aff4:	4413      	add	r3, r2
    aff6:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    aff8:	687b      	ldr	r3, [r7, #4]
    affa:	891b      	ldrh	r3, [r3, #8]
    affc:	f3c3 0303 	ubfx	r3, r3, #0, #4
    b000:	b2db      	uxtb	r3, r3
    b002:	2b03      	cmp	r3, #3
    b004:	d109      	bne.n	b01a <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    b006:	687b      	ldr	r3, [r7, #4]
    b008:	891b      	ldrh	r3, [r3, #8]
    b00a:	f3c3 130a 	ubfx	r3, r3, #4, #11
    b00e:	b29b      	uxth	r3, r3
    b010:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    b012:	687b      	ldr	r3, [r7, #4]
    b014:	2200      	movs	r2, #0
    b016:	811a      	strh	r2, [r3, #8]
			break;
    b018:	e005      	b.n	b026 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    b01a:	7bfb      	ldrb	r3, [r7, #15]
    b01c:	3301      	adds	r3, #1
    b01e:	73fb      	strb	r3, [r7, #15]
    b020:	7bfb      	ldrb	r3, [r7, #15]
    b022:	2b03      	cmp	r3, #3
    b024:	d9e3      	bls.n	afee <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    b026:	4b08      	ldr	r3, [pc, #32]	; (b048 <_usb_d_dev_lpmsusp+0x8c>)
    b028:	685b      	ldr	r3, [r3, #4]
    b02a:	68b9      	ldr	r1, [r7, #8]
    b02c:	2003      	movs	r0, #3
    b02e:	4798      	blx	r3
}
    b030:	bf00      	nop
    b032:	3710      	adds	r7, #16
    b034:	46bd      	mov	sp, r7
    b036:	bd80      	pop	{r7, pc}
    b038:	0000a613 	.word	0x0000a613
    b03c:	0000a669 	.word	0x0000a669
    b040:	0000a631 	.word	0x0000a631
    b044:	2000265c 	.word	0x2000265c
    b048:	20002594 	.word	0x20002594

0000b04c <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    b04c:	b580      	push	{r7, lr}
    b04e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    b050:	2180      	movs	r1, #128	; 0x80
    b052:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b056:	4b04      	ldr	r3, [pc, #16]	; (b068 <_usb_d_dev_ramerr+0x1c>)
    b058:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    b05a:	4b04      	ldr	r3, [pc, #16]	; (b06c <_usb_d_dev_ramerr+0x20>)
    b05c:	685b      	ldr	r3, [r3, #4]
    b05e:	2100      	movs	r1, #0
    b060:	2005      	movs	r0, #5
    b062:	4798      	blx	r3
}
    b064:	bf00      	nop
    b066:	bd80      	pop	{r7, pc}
    b068:	0000a613 	.word	0x0000a613
    b06c:	20002594 	.word	0x20002594

0000b070 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    b070:	b580      	push	{r7, lr}
    b072:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b074:	2170      	movs	r1, #112	; 0x70
    b076:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b07a:	4b0b      	ldr	r3, [pc, #44]	; (b0a8 <_usb_d_dev_wakeup+0x38>)
    b07c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b07e:	2170      	movs	r1, #112	; 0x70
    b080:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b084:	4b09      	ldr	r3, [pc, #36]	; (b0ac <_usb_d_dev_wakeup+0x3c>)
    b086:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b088:	f240 2101 	movw	r1, #513	; 0x201
    b08c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b090:	4b07      	ldr	r3, [pc, #28]	; (b0b0 <_usb_d_dev_wakeup+0x40>)
    b092:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    b094:	2000      	movs	r0, #0
    b096:	4b07      	ldr	r3, [pc, #28]	; (b0b4 <_usb_d_dev_wakeup+0x44>)
    b098:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    b09a:	4b07      	ldr	r3, [pc, #28]	; (b0b8 <_usb_d_dev_wakeup+0x48>)
    b09c:	685b      	ldr	r3, [r3, #4]
    b09e:	2100      	movs	r1, #0
    b0a0:	2002      	movs	r0, #2
    b0a2:	4798      	blx	r3
}
    b0a4:	bf00      	nop
    b0a6:	bd80      	pop	{r7, pc}
    b0a8:	0000a613 	.word	0x0000a613
    b0ac:	0000a669 	.word	0x0000a669
    b0b0:	0000a631 	.word	0x0000a631
    b0b4:	0000a911 	.word	0x0000a911
    b0b8:	20002594 	.word	0x20002594

0000b0bc <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    b0bc:	b580      	push	{r7, lr}
    b0be:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    b0c0:	2200      	movs	r2, #0
    b0c2:	2100      	movs	r1, #0
    b0c4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b0c8:	4b0d      	ldr	r3, [pc, #52]	; (b100 <_usb_d_dev_reset+0x44>)
    b0ca:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    b0cc:	2108      	movs	r1, #8
    b0ce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b0d2:	4b0c      	ldr	r3, [pc, #48]	; (b104 <_usb_d_dev_reset+0x48>)
    b0d4:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b0d6:	2170      	movs	r1, #112	; 0x70
    b0d8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b0dc:	4b0a      	ldr	r3, [pc, #40]	; (b108 <_usb_d_dev_reset+0x4c>)
    b0de:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b0e0:	f240 2101 	movw	r1, #513	; 0x201
    b0e4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b0e8:	4b08      	ldr	r3, [pc, #32]	; (b10c <_usb_d_dev_reset+0x50>)
    b0ea:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    b0ec:	4b08      	ldr	r3, [pc, #32]	; (b110 <_usb_d_dev_reset+0x54>)
    b0ee:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    b0f0:	4b08      	ldr	r3, [pc, #32]	; (b114 <_usb_d_dev_reset+0x58>)
    b0f2:	685b      	ldr	r3, [r3, #4]
    b0f4:	2100      	movs	r1, #0
    b0f6:	2001      	movs	r0, #1
    b0f8:	4798      	blx	r3
}
    b0fa:	bf00      	nop
    b0fc:	bd80      	pop	{r7, pc}
    b0fe:	bf00      	nop
    b100:	0000a5a9 	.word	0x0000a5a9
    b104:	0000a613 	.word	0x0000a613
    b108:	0000a669 	.word	0x0000a669
    b10c:	0000a631 	.word	0x0000a631
    b110:	0000bc79 	.word	0x0000bc79
    b114:	20002594 	.word	0x20002594

0000b118 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    b118:	b580      	push	{r7, lr}
    b11a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b11c:	f240 2101 	movw	r1, #513	; 0x201
    b120:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b124:	4b09      	ldr	r3, [pc, #36]	; (b14c <_usb_d_dev_suspend+0x34>)
    b126:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b128:	f240 2101 	movw	r1, #513	; 0x201
    b12c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b130:	4b07      	ldr	r3, [pc, #28]	; (b150 <_usb_d_dev_suspend+0x38>)
    b132:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b134:	2170      	movs	r1, #112	; 0x70
    b136:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b13a:	4b06      	ldr	r3, [pc, #24]	; (b154 <_usb_d_dev_suspend+0x3c>)
    b13c:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    b13e:	4b06      	ldr	r3, [pc, #24]	; (b158 <_usb_d_dev_suspend+0x40>)
    b140:	685b      	ldr	r3, [r3, #4]
    b142:	2100      	movs	r1, #0
    b144:	2004      	movs	r0, #4
    b146:	4798      	blx	r3
}
    b148:	bf00      	nop
    b14a:	bd80      	pop	{r7, pc}
    b14c:	0000a613 	.word	0x0000a613
    b150:	0000a669 	.word	0x0000a669
    b154:	0000a631 	.word	0x0000a631
    b158:	20002594 	.word	0x20002594

0000b15c <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    b15c:	b580      	push	{r7, lr}
    b15e:	b082      	sub	sp, #8
    b160:	af00      	add	r7, sp, #0
	bool     rc    = true;
    b162:	2301      	movs	r3, #1
    b164:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    b166:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b16a:	4b22      	ldr	r3, [pc, #136]	; (b1f4 <_usb_d_dev_handle_nep+0x98>)
    b16c:	4798      	blx	r3
    b16e:	4603      	mov	r3, r0
    b170:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    b172:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b176:	4b20      	ldr	r3, [pc, #128]	; (b1f8 <_usb_d_dev_handle_nep+0x9c>)
    b178:	4798      	blx	r3
    b17a:	4603      	mov	r3, r0
    b17c:	461a      	mov	r2, r3
    b17e:	88bb      	ldrh	r3, [r7, #4]
    b180:	4013      	ands	r3, r2
    b182:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    b184:	88bb      	ldrh	r3, [r7, #4]
    b186:	f003 0304 	and.w	r3, r3, #4
    b18a:	2b00      	cmp	r3, #0
    b18c:	d003      	beq.n	b196 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    b18e:	4b1b      	ldr	r3, [pc, #108]	; (b1fc <_usb_d_dev_handle_nep+0xa0>)
    b190:	4798      	blx	r3
		return true;
    b192:	2301      	movs	r3, #1
    b194:	e02a      	b.n	b1ec <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    b196:	88bb      	ldrh	r3, [r7, #4]
    b198:	f403 7300 	and.w	r3, r3, #512	; 0x200
    b19c:	2b00      	cmp	r3, #0
    b19e:	d002      	beq.n	b1a6 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    b1a0:	4b17      	ldr	r3, [pc, #92]	; (b200 <_usb_d_dev_handle_nep+0xa4>)
    b1a2:	4798      	blx	r3
    b1a4:	e021      	b.n	b1ea <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    b1a6:	88bb      	ldrh	r3, [r7, #4]
    b1a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b1ac:	2b00      	cmp	r3, #0
    b1ae:	d002      	beq.n	b1b6 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    b1b0:	4b14      	ldr	r3, [pc, #80]	; (b204 <_usb_d_dev_handle_nep+0xa8>)
    b1b2:	4798      	blx	r3
    b1b4:	e019      	b.n	b1ea <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    b1b6:	88bb      	ldrh	r3, [r7, #4]
    b1b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b1bc:	2b00      	cmp	r3, #0
    b1be:	d002      	beq.n	b1c6 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    b1c0:	4b11      	ldr	r3, [pc, #68]	; (b208 <_usb_d_dev_handle_nep+0xac>)
    b1c2:	4798      	blx	r3
    b1c4:	e011      	b.n	b1ea <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    b1c6:	88bb      	ldrh	r3, [r7, #4]
    b1c8:	f003 0308 	and.w	r3, r3, #8
    b1cc:	2b00      	cmp	r3, #0
    b1ce:	d002      	beq.n	b1d6 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    b1d0:	4b0e      	ldr	r3, [pc, #56]	; (b20c <_usb_d_dev_handle_nep+0xb0>)
    b1d2:	4798      	blx	r3
    b1d4:	e009      	b.n	b1ea <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    b1d6:	88bb      	ldrh	r3, [r7, #4]
    b1d8:	f003 0301 	and.w	r3, r3, #1
    b1dc:	2b00      	cmp	r3, #0
    b1de:	d002      	beq.n	b1e6 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    b1e0:	4b0b      	ldr	r3, [pc, #44]	; (b210 <_usb_d_dev_handle_nep+0xb4>)
    b1e2:	4798      	blx	r3
    b1e4:	e001      	b.n	b1ea <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    b1e6:	2300      	movs	r3, #0
    b1e8:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    b1ea:	79fb      	ldrb	r3, [r7, #7]
}
    b1ec:	4618      	mov	r0, r3
    b1ee:	3708      	adds	r7, #8
    b1f0:	46bd      	mov	sp, r7
    b1f2:	bd80      	pop	{r7, pc}
    b1f4:	0000a5f9 	.word	0x0000a5f9
    b1f8:	0000a64f 	.word	0x0000a64f
    b1fc:	0000af9d 	.word	0x0000af9d
    b200:	0000afbd 	.word	0x0000afbd
    b204:	0000b04d 	.word	0x0000b04d
    b208:	0000b071 	.word	0x0000b071
    b20c:	0000b0bd 	.word	0x0000b0bd
    b210:	0000b119 	.word	0x0000b119

0000b214 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    b214:	b590      	push	{r4, r7, lr}
    b216:	b089      	sub	sp, #36	; 0x24
    b218:	af00      	add	r7, sp, #0
    b21a:	6078      	str	r0, [r7, #4]
    b21c:	460b      	mov	r3, r1
    b21e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    b220:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b224:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    b226:	687b      	ldr	r3, [r7, #4]
    b228:	7c9b      	ldrb	r3, [r3, #18]
    b22a:	f003 030f 	and.w	r3, r3, #15
    b22e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    b230:	7dfb      	ldrb	r3, [r7, #23]
    b232:	015b      	lsls	r3, r3, #5
    b234:	4a73      	ldr	r2, [pc, #460]	; (b404 <_usb_d_dev_in_next+0x1f0>)
    b236:	4413      	add	r3, r2
    b238:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    b23a:	78fb      	ldrb	r3, [r7, #3]
    b23c:	2b00      	cmp	r3, #0
    b23e:	d006      	beq.n	b24e <_usb_d_dev_in_next+0x3a>
    b240:	693b      	ldr	r3, [r7, #16]
    b242:	3310      	adds	r3, #16
    b244:	685b      	ldr	r3, [r3, #4]
    b246:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b24a:	b29b      	uxth	r3, r3
    b24c:	e000      	b.n	b250 <_usb_d_dev_in_next+0x3c>
    b24e:	2300      	movs	r3, #0
    b250:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    b252:	687b      	ldr	r3, [r7, #4]
    b254:	8a1b      	ldrh	r3, [r3, #16]
    b256:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b25a:	4293      	cmp	r3, r2
    b25c:	d103      	bne.n	b266 <_usb_d_dev_in_next+0x52>
    b25e:	687b      	ldr	r3, [r7, #4]
    b260:	8a1b      	ldrh	r3, [r3, #16]
    b262:	b21b      	sxth	r3, r3
    b264:	e004      	b.n	b270 <_usb_d_dev_in_next+0x5c>
    b266:	687b      	ldr	r3, [r7, #4]
    b268:	8a1b      	ldrh	r3, [r3, #16]
    b26a:	3b01      	subs	r3, #1
    b26c:	b29b      	uxth	r3, r3
    b26e:	b21b      	sxth	r3, r3
    b270:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    b274:	4013      	ands	r3, r2
    b276:	b21b      	sxth	r3, r3
    b278:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    b27a:	2300      	movs	r3, #0
    b27c:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    b27e:	687b      	ldr	r3, [r7, #4]
    b280:	7cdb      	ldrb	r3, [r3, #19]
    b282:	f003 0307 	and.w	r3, r3, #7
    b286:	b2db      	uxtb	r3, r3
    b288:	2b01      	cmp	r3, #1
    b28a:	bf0c      	ite	eq
    b28c:	2301      	moveq	r3, #1
    b28e:	2300      	movne	r3, #0
    b290:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    b292:	78fb      	ldrb	r3, [r7, #3]
    b294:	2b00      	cmp	r3, #0
    b296:	d004      	beq.n	b2a2 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    b298:	7dfb      	ldrb	r3, [r7, #23]
    b29a:	2101      	movs	r1, #1
    b29c:	4618      	mov	r0, r3
    b29e:	4b5a      	ldr	r3, [pc, #360]	; (b408 <_usb_d_dev_in_next+0x1f4>)
    b2a0:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    b2a2:	687b      	ldr	r3, [r7, #4]
    b2a4:	689a      	ldr	r2, [r3, #8]
    b2a6:	89fb      	ldrh	r3, [r7, #14]
    b2a8:	441a      	add	r2, r3
    b2aa:	687b      	ldr	r3, [r7, #4]
    b2ac:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    b2ae:	687b      	ldr	r3, [r7, #4]
    b2b0:	689a      	ldr	r2, [r3, #8]
    b2b2:	687b      	ldr	r3, [r7, #4]
    b2b4:	685b      	ldr	r3, [r3, #4]
    b2b6:	429a      	cmp	r2, r3
    b2b8:	d243      	bcs.n	b342 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    b2ba:	687b      	ldr	r3, [r7, #4]
    b2bc:	685b      	ldr	r3, [r3, #4]
    b2be:	b29a      	uxth	r2, r3
    b2c0:	687b      	ldr	r3, [r7, #4]
    b2c2:	689b      	ldr	r3, [r3, #8]
    b2c4:	b29b      	uxth	r3, r3
    b2c6:	1ad3      	subs	r3, r2, r3
    b2c8:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    b2ca:	687b      	ldr	r3, [r7, #4]
    b2cc:	7cdb      	ldrb	r3, [r3, #19]
    b2ce:	f003 0320 	and.w	r3, r3, #32
    b2d2:	b2db      	uxtb	r3, r3
    b2d4:	2b00      	cmp	r3, #0
    b2d6:	d01b      	beq.n	b310 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    b2d8:	687b      	ldr	r3, [r7, #4]
    b2da:	8a1b      	ldrh	r3, [r3, #16]
    b2dc:	8bfa      	ldrh	r2, [r7, #30]
    b2de:	429a      	cmp	r2, r3
    b2e0:	d902      	bls.n	b2e8 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    b2e2:	687b      	ldr	r3, [r7, #4]
    b2e4:	8a1b      	ldrh	r3, [r3, #16]
    b2e6:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    b2e8:	687b      	ldr	r3, [r7, #4]
    b2ea:	68d8      	ldr	r0, [r3, #12]
    b2ec:	687b      	ldr	r3, [r7, #4]
    b2ee:	681a      	ldr	r2, [r3, #0]
    b2f0:	687b      	ldr	r3, [r7, #4]
    b2f2:	689b      	ldr	r3, [r3, #8]
    b2f4:	4413      	add	r3, r2
    b2f6:	8bfa      	ldrh	r2, [r7, #30]
    b2f8:	4619      	mov	r1, r3
    b2fa:	4b44      	ldr	r3, [pc, #272]	; (b40c <_usb_d_dev_in_next+0x1f8>)
    b2fc:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    b2fe:	687b      	ldr	r3, [r7, #4]
    b300:	68db      	ldr	r3, [r3, #12]
    b302:	461a      	mov	r2, r3
    b304:	7dfb      	ldrb	r3, [r7, #23]
    b306:	2101      	movs	r1, #1
    b308:	4618      	mov	r0, r3
    b30a:	4b41      	ldr	r3, [pc, #260]	; (b410 <_usb_d_dev_in_next+0x1fc>)
    b30c:	4798      	blx	r3
    b30e:	e011      	b.n	b334 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    b310:	8bfb      	ldrh	r3, [r7, #30]
    b312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    b316:	d902      	bls.n	b31e <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    b318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    b31c:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    b31e:	687b      	ldr	r3, [r7, #4]
    b320:	681a      	ldr	r2, [r3, #0]
    b322:	687b      	ldr	r3, [r7, #4]
    b324:	689b      	ldr	r3, [r3, #8]
    b326:	4413      	add	r3, r2
    b328:	461a      	mov	r2, r3
    b32a:	7dfb      	ldrb	r3, [r7, #23]
    b32c:	2101      	movs	r1, #1
    b32e:	4618      	mov	r0, r3
    b330:	4b37      	ldr	r3, [pc, #220]	; (b410 <_usb_d_dev_in_next+0x1fc>)
    b332:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    b334:	8bfa      	ldrh	r2, [r7, #30]
    b336:	7df8      	ldrb	r0, [r7, #23]
    b338:	2300      	movs	r3, #0
    b33a:	2101      	movs	r1, #1
    b33c:	4c35      	ldr	r4, [pc, #212]	; (b414 <_usb_d_dev_in_next+0x200>)
    b33e:	47a0      	blx	r4
		goto _in_tx_exec;
    b340:	e041      	b.n	b3c6 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    b342:	687b      	ldr	r3, [r7, #4]
    b344:	7cdb      	ldrb	r3, [r3, #19]
    b346:	f003 0310 	and.w	r3, r3, #16
    b34a:	b2db      	uxtb	r3, r3
    b34c:	2b00      	cmp	r3, #0
    b34e:	d00b      	beq.n	b368 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    b350:	687a      	ldr	r2, [r7, #4]
    b352:	7cd3      	ldrb	r3, [r2, #19]
    b354:	f36f 1304 	bfc	r3, #4, #1
    b358:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    b35a:	7df8      	ldrb	r0, [r7, #23]
    b35c:	2300      	movs	r3, #0
    b35e:	2200      	movs	r2, #0
    b360:	2101      	movs	r1, #1
    b362:	4c2c      	ldr	r4, [pc, #176]	; (b414 <_usb_d_dev_in_next+0x200>)
    b364:	47a0      	blx	r4
		goto _in_tx_exec;
    b366:	e02e      	b.n	b3c6 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    b368:	7afb      	ldrb	r3, [r7, #11]
    b36a:	2b00      	cmp	r3, #0
    b36c:	d006      	beq.n	b37c <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    b36e:	7dfb      	ldrb	r3, [r7, #23]
    b370:	224b      	movs	r2, #75	; 0x4b
    b372:	4619      	mov	r1, r3
    b374:	69b8      	ldr	r0, [r7, #24]
    b376:	4b28      	ldr	r3, [pc, #160]	; (b418 <_usb_d_dev_in_next+0x204>)
    b378:	4798      	blx	r3
    b37a:	e005      	b.n	b388 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    b37c:	7dfb      	ldrb	r3, [r7, #23]
    b37e:	224a      	movs	r2, #74	; 0x4a
    b380:	4619      	mov	r1, r3
    b382:	69b8      	ldr	r0, [r7, #24]
    b384:	4b24      	ldr	r3, [pc, #144]	; (b418 <_usb_d_dev_in_next+0x204>)
    b386:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    b388:	687b      	ldr	r3, [r7, #4]
    b38a:	8a1b      	ldrh	r3, [r3, #16]
    b38c:	89ba      	ldrh	r2, [r7, #12]
    b38e:	429a      	cmp	r2, r3
    b390:	d114      	bne.n	b3bc <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    b392:	687a      	ldr	r2, [r7, #4]
    b394:	7cd3      	ldrb	r3, [r2, #19]
    b396:	f36f 1386 	bfc	r3, #6, #1
    b39a:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    b39c:	4b1f      	ldr	r3, [pc, #124]	; (b41c <_usb_d_dev_in_next+0x208>)
    b39e:	68db      	ldr	r3, [r3, #12]
    b3a0:	687a      	ldr	r2, [r7, #4]
    b3a2:	7c90      	ldrb	r0, [r2, #18]
    b3a4:	687a      	ldr	r2, [r7, #4]
    b3a6:	6892      	ldr	r2, [r2, #8]
    b3a8:	4611      	mov	r1, r2
    b3aa:	4798      	blx	r3
    b3ac:	4603      	mov	r3, r0
    b3ae:	2b00      	cmp	r3, #0
    b3b0:	d124      	bne.n	b3fc <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    b3b2:	687a      	ldr	r2, [r7, #4]
    b3b4:	7cd3      	ldrb	r3, [r2, #19]
    b3b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b3ba:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    b3bc:	2100      	movs	r1, #0
    b3be:	6878      	ldr	r0, [r7, #4]
    b3c0:	4b17      	ldr	r3, [pc, #92]	; (b420 <_usb_d_dev_in_next+0x20c>)
    b3c2:	4798      	blx	r3
	return;
    b3c4:	e01b      	b.n	b3fe <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    b3c6:	78fb      	ldrb	r3, [r7, #3]
    b3c8:	f083 0301 	eor.w	r3, r3, #1
    b3cc:	b2db      	uxtb	r3, r3
    b3ce:	2b00      	cmp	r3, #0
    b3d0:	d00d      	beq.n	b3ee <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    b3d2:	7afb      	ldrb	r3, [r7, #11]
    b3d4:	2b00      	cmp	r3, #0
    b3d6:	d002      	beq.n	b3de <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    b3d8:	234e      	movs	r3, #78	; 0x4e
    b3da:	777b      	strb	r3, [r7, #29]
    b3dc:	e001      	b.n	b3e2 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    b3de:	234a      	movs	r3, #74	; 0x4a
    b3e0:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    b3e2:	7f7a      	ldrb	r2, [r7, #29]
    b3e4:	7dfb      	ldrb	r3, [r7, #23]
    b3e6:	4619      	mov	r1, r3
    b3e8:	69b8      	ldr	r0, [r7, #24]
    b3ea:	4b0e      	ldr	r3, [pc, #56]	; (b424 <_usb_d_dev_in_next+0x210>)
    b3ec:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    b3ee:	7dfb      	ldrb	r3, [r7, #23]
    b3f0:	2201      	movs	r2, #1
    b3f2:	2101      	movs	r1, #1
    b3f4:	4618      	mov	r0, r3
    b3f6:	4b0c      	ldr	r3, [pc, #48]	; (b428 <_usb_d_dev_in_next+0x214>)
    b3f8:	4798      	blx	r3
    b3fa:	e000      	b.n	b3fe <_usb_d_dev_in_next+0x1ea>
			return;
    b3fc:	bf00      	nop
}
    b3fe:	3724      	adds	r7, #36	; 0x24
    b400:	46bd      	mov	sp, r7
    b402:	bd90      	pop	{r4, r7, pc}
    b404:	2000265c 	.word	0x2000265c
    b408:	0000ac0d 	.word	0x0000ac0d
    b40c:	0001a635 	.word	0x0001a635
    b410:	0000ac39 	.word	0x0000ac39
    b414:	0000ad81 	.word	0x0000ad81
    b418:	0000a519 	.word	0x0000a519
    b41c:	20002594 	.word	0x20002594
    b420:	0000c53d 	.word	0x0000c53d
    b424:	0000a4ed 	.word	0x0000a4ed
    b428:	0000ae39 	.word	0x0000ae39

0000b42c <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    b42c:	b590      	push	{r4, r7, lr}
    b42e:	b08b      	sub	sp, #44	; 0x2c
    b430:	af00      	add	r7, sp, #0
    b432:	6078      	str	r0, [r7, #4]
    b434:	460b      	mov	r3, r1
    b436:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    b438:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b43c:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    b43e:	687b      	ldr	r3, [r7, #4]
    b440:	7c9b      	ldrb	r3, [r3, #18]
    b442:	f003 030f 	and.w	r3, r3, #15
    b446:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    b448:	7ffb      	ldrb	r3, [r7, #31]
    b44a:	015b      	lsls	r3, r3, #5
    b44c:	4a94      	ldr	r2, [pc, #592]	; (b6a0 <_usb_d_dev_out_next+0x274>)
    b44e:	4413      	add	r3, r2
    b450:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    b452:	78fb      	ldrb	r3, [r7, #3]
    b454:	2b00      	cmp	r3, #0
    b456:	d005      	beq.n	b464 <_usb_d_dev_out_next+0x38>
    b458:	69bb      	ldr	r3, [r7, #24]
    b45a:	685b      	ldr	r3, [r3, #4]
    b45c:	f3c3 338d 	ubfx	r3, r3, #14, #14
    b460:	b29b      	uxth	r3, r3
    b462:	e000      	b.n	b466 <_usb_d_dev_out_next+0x3a>
    b464:	2300      	movs	r3, #0
    b466:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    b468:	78fb      	ldrb	r3, [r7, #3]
    b46a:	2b00      	cmp	r3, #0
    b46c:	d005      	beq.n	b47a <_usb_d_dev_out_next+0x4e>
    b46e:	69bb      	ldr	r3, [r7, #24]
    b470:	685b      	ldr	r3, [r3, #4]
    b472:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b476:	b29b      	uxth	r3, r3
    b478:	e000      	b.n	b47c <_usb_d_dev_out_next+0x50>
    b47a:	2300      	movs	r3, #0
    b47c:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b47e:	687b      	ldr	r3, [r7, #4]
    b480:	8a1b      	ldrh	r3, [r3, #16]
    b482:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b486:	4293      	cmp	r3, r2
    b488:	d004      	beq.n	b494 <_usb_d_dev_out_next+0x68>
    b48a:	687b      	ldr	r3, [r7, #4]
    b48c:	8a1b      	ldrh	r3, [r3, #16]
    b48e:	3b01      	subs	r3, #1
    b490:	b29b      	uxth	r3, r3
    b492:	e001      	b.n	b498 <_usb_d_dev_out_next+0x6c>
    b494:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b498:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    b49a:	8aba      	ldrh	r2, [r7, #20]
    b49c:	8a7b      	ldrh	r3, [r7, #18]
    b49e:	4013      	ands	r3, r2
    b4a0:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b4a2:	687b      	ldr	r3, [r7, #4]
    b4a4:	7cdb      	ldrb	r3, [r3, #19]
    b4a6:	f003 0307 	and.w	r3, r3, #7
    b4aa:	b2db      	uxtb	r3, r3
    b4ac:	2b01      	cmp	r3, #1
    b4ae:	bf0c      	ite	eq
    b4b0:	2301      	moveq	r3, #1
    b4b2:	2300      	movne	r3, #0
    b4b4:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    b4b6:	78fb      	ldrb	r3, [r7, #3]
    b4b8:	2b00      	cmp	r3, #0
    b4ba:	d004      	beq.n	b4c6 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    b4bc:	7ffb      	ldrb	r3, [r7, #31]
    b4be:	2100      	movs	r1, #0
    b4c0:	4618      	mov	r0, r3
    b4c2:	4b78      	ldr	r3, [pc, #480]	; (b6a4 <_usb_d_dev_out_next+0x278>)
    b4c4:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    b4c6:	687b      	ldr	r3, [r7, #4]
    b4c8:	7cdb      	ldrb	r3, [r3, #19]
    b4ca:	f003 0320 	and.w	r3, r3, #32
    b4ce:	b2db      	uxtb	r3, r3
    b4d0:	2b00      	cmp	r3, #0
    b4d2:	d01c      	beq.n	b50e <_usb_d_dev_out_next+0xe2>
    b4d4:	687b      	ldr	r3, [r7, #4]
    b4d6:	685b      	ldr	r3, [r3, #4]
    b4d8:	2b00      	cmp	r3, #0
    b4da:	d018      	beq.n	b50e <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    b4dc:	687b      	ldr	r3, [r7, #4]
    b4de:	685b      	ldr	r3, [r3, #4]
    b4e0:	b29a      	uxth	r2, r3
    b4e2:	687b      	ldr	r3, [r7, #4]
    b4e4:	689b      	ldr	r3, [r3, #8]
    b4e6:	b29b      	uxth	r3, r3
    b4e8:	1ad3      	subs	r3, r2, r3
    b4ea:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    b4ec:	687b      	ldr	r3, [r7, #4]
    b4ee:	681a      	ldr	r2, [r3, #0]
    b4f0:	687b      	ldr	r3, [r7, #4]
    b4f2:	689b      	ldr	r3, [r3, #8]
    b4f4:	18d0      	adds	r0, r2, r3
    b4f6:	687b      	ldr	r3, [r7, #4]
    b4f8:	68d9      	ldr	r1, [r3, #12]
    b4fa:	89ba      	ldrh	r2, [r7, #12]
    b4fc:	8a3b      	ldrh	r3, [r7, #16]
    b4fe:	429a      	cmp	r2, r3
    b500:	d901      	bls.n	b506 <_usb_d_dev_out_next+0xda>
    b502:	8a3b      	ldrh	r3, [r7, #16]
    b504:	e000      	b.n	b508 <_usb_d_dev_out_next+0xdc>
    b506:	89bb      	ldrh	r3, [r7, #12]
    b508:	461a      	mov	r2, r3
    b50a:	4b67      	ldr	r3, [pc, #412]	; (b6a8 <_usb_d_dev_out_next+0x27c>)
    b50c:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    b50e:	687b      	ldr	r3, [r7, #4]
    b510:	685b      	ldr	r3, [r3, #4]
    b512:	2b00      	cmp	r3, #0
    b514:	d121      	bne.n	b55a <_usb_d_dev_out_next+0x12e>
    b516:	687b      	ldr	r3, [r7, #4]
    b518:	7cdb      	ldrb	r3, [r3, #19]
    b51a:	f003 0310 	and.w	r3, r3, #16
    b51e:	b2db      	uxtb	r3, r3
    b520:	2b00      	cmp	r3, #0
    b522:	d01a      	beq.n	b55a <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    b524:	687a      	ldr	r2, [r7, #4]
    b526:	7cd3      	ldrb	r3, [r2, #19]
    b528:	f36f 1304 	bfc	r3, #4, #1
    b52c:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    b52e:	687a      	ldr	r2, [r7, #4]
    b530:	7cd3      	ldrb	r3, [r2, #19]
    b532:	f043 0320 	orr.w	r3, r3, #32
    b536:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b538:	687b      	ldr	r3, [r7, #4]
    b53a:	68db      	ldr	r3, [r3, #12]
    b53c:	461a      	mov	r2, r3
    b53e:	7ffb      	ldrb	r3, [r7, #31]
    b540:	2100      	movs	r1, #0
    b542:	4618      	mov	r0, r3
    b544:	4b59      	ldr	r3, [pc, #356]	; (b6ac <_usb_d_dev_out_next+0x280>)
    b546:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    b548:	687b      	ldr	r3, [r7, #4]
    b54a:	8a1b      	ldrh	r3, [r3, #16]
    b54c:	461a      	mov	r2, r3
    b54e:	7ff8      	ldrb	r0, [r7, #31]
    b550:	2300      	movs	r3, #0
    b552:	2100      	movs	r1, #0
    b554:	4c56      	ldr	r4, [pc, #344]	; (b6b0 <_usb_d_dev_out_next+0x284>)
    b556:	47a0      	blx	r4
		goto _out_rx_exec;
    b558:	e090      	b.n	b67c <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    b55a:	78fb      	ldrb	r3, [r7, #3]
    b55c:	2b00      	cmp	r3, #0
    b55e:	d010      	beq.n	b582 <_usb_d_dev_out_next+0x156>
    b560:	687b      	ldr	r3, [r7, #4]
    b562:	8a1b      	ldrh	r3, [r3, #16]
    b564:	8a3a      	ldrh	r2, [r7, #16]
    b566:	429a      	cmp	r2, r3
    b568:	d20b      	bcs.n	b582 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    b56a:	687a      	ldr	r2, [r7, #4]
    b56c:	7cd3      	ldrb	r3, [r2, #19]
    b56e:	f36f 1304 	bfc	r3, #4, #1
    b572:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    b574:	687b      	ldr	r3, [r7, #4]
    b576:	689a      	ldr	r2, [r3, #8]
    b578:	8abb      	ldrh	r3, [r7, #20]
    b57a:	441a      	add	r2, r3
    b57c:	687b      	ldr	r3, [r7, #4]
    b57e:	609a      	str	r2, [r3, #8]
    b580:	e05c      	b.n	b63c <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    b582:	687b      	ldr	r3, [r7, #4]
    b584:	689a      	ldr	r2, [r3, #8]
    b586:	8afb      	ldrh	r3, [r7, #22]
    b588:	441a      	add	r2, r3
    b58a:	687b      	ldr	r3, [r7, #4]
    b58c:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    b58e:	687b      	ldr	r3, [r7, #4]
    b590:	689a      	ldr	r2, [r3, #8]
    b592:	687b      	ldr	r3, [r7, #4]
    b594:	685b      	ldr	r3, [r3, #4]
    b596:	429a      	cmp	r2, r3
    b598:	d250      	bcs.n	b63c <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    b59a:	687b      	ldr	r3, [r7, #4]
    b59c:	685b      	ldr	r3, [r3, #4]
    b59e:	b29a      	uxth	r2, r3
    b5a0:	687b      	ldr	r3, [r7, #4]
    b5a2:	689b      	ldr	r3, [r3, #8]
    b5a4:	b29b      	uxth	r3, r3
    b5a6:	1ad3      	subs	r3, r2, r3
    b5a8:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    b5aa:	687b      	ldr	r3, [r7, #4]
    b5ac:	7cdb      	ldrb	r3, [r3, #19]
    b5ae:	f003 0320 	and.w	r3, r3, #32
    b5b2:	b2db      	uxtb	r3, r3
    b5b4:	2b00      	cmp	r3, #0
    b5b6:	d010      	beq.n	b5da <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    b5b8:	687b      	ldr	r3, [r7, #4]
    b5ba:	8a1b      	ldrh	r3, [r3, #16]
    b5bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b5be:	429a      	cmp	r2, r3
    b5c0:	d902      	bls.n	b5c8 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    b5c2:	687b      	ldr	r3, [r7, #4]
    b5c4:	8a1b      	ldrh	r3, [r3, #16]
    b5c6:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b5c8:	687b      	ldr	r3, [r7, #4]
    b5ca:	68db      	ldr	r3, [r3, #12]
    b5cc:	461a      	mov	r2, r3
    b5ce:	7ffb      	ldrb	r3, [r7, #31]
    b5d0:	2100      	movs	r1, #0
    b5d2:	4618      	mov	r0, r3
    b5d4:	4b35      	ldr	r3, [pc, #212]	; (b6ac <_usb_d_dev_out_next+0x280>)
    b5d6:	4798      	blx	r3
    b5d8:	e029      	b.n	b62e <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    b5da:	687b      	ldr	r3, [r7, #4]
    b5dc:	8a1b      	ldrh	r3, [r3, #16]
    b5de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b5e0:	429a      	cmp	r2, r3
    b5e2:	d90f      	bls.n	b604 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    b5e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    b5e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    b5ea:	d903      	bls.n	b5f4 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    b5ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    b5f0:	84fb      	strh	r3, [r7, #38]	; 0x26
    b5f2:	e011      	b.n	b618 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    b5f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b5f6:	8a7b      	ldrh	r3, [r7, #18]
    b5f8:	4013      	ands	r3, r2
    b5fa:	b29b      	uxth	r3, r3
    b5fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b5fe:	1ad3      	subs	r3, r2, r3
    b600:	84fb      	strh	r3, [r7, #38]	; 0x26
    b602:	e009      	b.n	b618 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    b604:	687b      	ldr	r3, [r7, #4]
    b606:	8a1b      	ldrh	r3, [r3, #16]
    b608:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b60a:	429a      	cmp	r2, r3
    b60c:	d204      	bcs.n	b618 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    b60e:	687a      	ldr	r2, [r7, #4]
    b610:	7cd3      	ldrb	r3, [r2, #19]
    b612:	f043 0320 	orr.w	r3, r3, #32
    b616:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    b618:	687b      	ldr	r3, [r7, #4]
    b61a:	681a      	ldr	r2, [r3, #0]
    b61c:	687b      	ldr	r3, [r7, #4]
    b61e:	689b      	ldr	r3, [r3, #8]
    b620:	4413      	add	r3, r2
    b622:	461a      	mov	r2, r3
    b624:	7ffb      	ldrb	r3, [r7, #31]
    b626:	2100      	movs	r1, #0
    b628:	4618      	mov	r0, r3
    b62a:	4b20      	ldr	r3, [pc, #128]	; (b6ac <_usb_d_dev_out_next+0x280>)
    b62c:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    b62e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b630:	7ff8      	ldrb	r0, [r7, #31]
    b632:	2300      	movs	r3, #0
    b634:	2100      	movs	r1, #0
    b636:	4c1e      	ldr	r4, [pc, #120]	; (b6b0 <_usb_d_dev_out_next+0x284>)
    b638:	47a0      	blx	r4
			goto _out_rx_exec;
    b63a:	e01f      	b.n	b67c <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    b63c:	7bfb      	ldrb	r3, [r7, #15]
    b63e:	2b00      	cmp	r3, #0
    b640:	d006      	beq.n	b650 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    b642:	7ffb      	ldrb	r3, [r7, #31]
    b644:	222d      	movs	r2, #45	; 0x2d
    b646:	4619      	mov	r1, r3
    b648:	6a38      	ldr	r0, [r7, #32]
    b64a:	4b1a      	ldr	r3, [pc, #104]	; (b6b4 <_usb_d_dev_out_next+0x288>)
    b64c:	4798      	blx	r3
    b64e:	e005      	b.n	b65c <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    b650:	7ffb      	ldrb	r3, [r7, #31]
    b652:	2225      	movs	r2, #37	; 0x25
    b654:	4619      	mov	r1, r3
    b656:	6a38      	ldr	r0, [r7, #32]
    b658:	4b16      	ldr	r3, [pc, #88]	; (b6b4 <_usb_d_dev_out_next+0x288>)
    b65a:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    b65c:	7ffb      	ldrb	r3, [r7, #31]
    b65e:	2b00      	cmp	r3, #0
    b660:	d107      	bne.n	b672 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b662:	687b      	ldr	r3, [r7, #4]
    b664:	68db      	ldr	r3, [r3, #12]
    b666:	461a      	mov	r2, r3
    b668:	7ffb      	ldrb	r3, [r7, #31]
    b66a:	2100      	movs	r1, #0
    b66c:	4618      	mov	r0, r3
    b66e:	4b0f      	ldr	r3, [pc, #60]	; (b6ac <_usb_d_dev_out_next+0x280>)
    b670:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    b672:	2100      	movs	r1, #0
    b674:	6878      	ldr	r0, [r7, #4]
    b676:	4b10      	ldr	r3, [pc, #64]	; (b6b8 <_usb_d_dev_out_next+0x28c>)
    b678:	4798      	blx	r3
	return;
    b67a:	e031      	b.n	b6e0 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    b67c:	78fb      	ldrb	r3, [r7, #3]
    b67e:	f083 0301 	eor.w	r3, r3, #1
    b682:	b2db      	uxtb	r3, r3
    b684:	2b00      	cmp	r3, #0
    b686:	d025      	beq.n	b6d4 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    b688:	7bfb      	ldrb	r3, [r7, #15]
    b68a:	2b00      	cmp	r3, #0
    b68c:	d018      	beq.n	b6c0 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    b68e:	7ffb      	ldrb	r3, [r7, #31]
    b690:	2101      	movs	r1, #1
    b692:	4618      	mov	r0, r3
    b694:	4b09      	ldr	r3, [pc, #36]	; (b6bc <_usb_d_dev_out_next+0x290>)
    b696:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    b698:	232d      	movs	r3, #45	; 0x2d
    b69a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    b69e:	e012      	b.n	b6c6 <_usb_d_dev_out_next+0x29a>
    b6a0:	2000265c 	.word	0x2000265c
    b6a4:	0000ac0d 	.word	0x0000ac0d
    b6a8:	0001a635 	.word	0x0001a635
    b6ac:	0000ac39 	.word	0x0000ac39
    b6b0:	0000adc1 	.word	0x0000adc1
    b6b4:	0000a519 	.word	0x0000a519
    b6b8:	0000c53d 	.word	0x0000c53d
    b6bc:	0000ae01 	.word	0x0000ae01
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    b6c0:	2325      	movs	r3, #37	; 0x25
    b6c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    b6c6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    b6ca:	7ffb      	ldrb	r3, [r7, #31]
    b6cc:	4619      	mov	r1, r3
    b6ce:	6a38      	ldr	r0, [r7, #32]
    b6d0:	4b05      	ldr	r3, [pc, #20]	; (b6e8 <_usb_d_dev_out_next+0x2bc>)
    b6d2:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    b6d4:	7ffb      	ldrb	r3, [r7, #31]
    b6d6:	2201      	movs	r2, #1
    b6d8:	2100      	movs	r1, #0
    b6da:	4618      	mov	r0, r3
    b6dc:	4b03      	ldr	r3, [pc, #12]	; (b6ec <_usb_d_dev_out_next+0x2c0>)
    b6de:	4798      	blx	r3
}
    b6e0:	372c      	adds	r7, #44	; 0x2c
    b6e2:	46bd      	mov	sp, r7
    b6e4:	bd90      	pop	{r4, r7, pc}
    b6e6:	bf00      	nop
    b6e8:	0000a4ed 	.word	0x0000a4ed
    b6ec:	0000ae91 	.word	0x0000ae91

0000b6f0 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    b6f0:	b580      	push	{r7, lr}
    b6f2:	b084      	sub	sp, #16
    b6f4:	af00      	add	r7, sp, #0
    b6f6:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    b6f8:	687b      	ldr	r3, [r7, #4]
    b6fa:	7c9b      	ldrb	r3, [r3, #18]
    b6fc:	f003 030f 	and.w	r3, r3, #15
    b700:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b702:	687b      	ldr	r3, [r7, #4]
    b704:	7cdb      	ldrb	r3, [r3, #19]
    b706:	f003 0307 	and.w	r3, r3, #7
    b70a:	b2db      	uxtb	r3, r3
    b70c:	2b01      	cmp	r3, #1
    b70e:	bf0c      	ite	eq
    b710:	2301      	moveq	r3, #1
    b712:	2300      	movne	r3, #0
    b714:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    b716:	7bbb      	ldrb	r3, [r7, #14]
    b718:	f083 0301 	eor.w	r3, r3, #1
    b71c:	b2db      	uxtb	r3, r3
    b71e:	2b00      	cmp	r3, #0
    b720:	d008      	beq.n	b734 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    b722:	7bfb      	ldrb	r3, [r7, #15]
    b724:	4618      	mov	r0, r3
    b726:	4b20      	ldr	r3, [pc, #128]	; (b7a8 <_usb_d_dev_handle_setup+0xb8>)
    b728:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    b72a:	7bfb      	ldrb	r3, [r7, #15]
    b72c:	4618      	mov	r0, r3
    b72e:	4b1f      	ldr	r3, [pc, #124]	; (b7ac <_usb_d_dev_handle_setup+0xbc>)
    b730:	4798      	blx	r3
		return;
    b732:	e036      	b.n	b7a2 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    b734:	687b      	ldr	r3, [r7, #4]
    b736:	7cdb      	ldrb	r3, [r3, #19]
    b738:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b73c:	b2db      	uxtb	r3, r3
    b73e:	2b00      	cmp	r3, #0
    b740:	d010      	beq.n	b764 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    b742:	687a      	ldr	r2, [r7, #4]
    b744:	7cd3      	ldrb	r3, [r2, #19]
    b746:	f36f 1386 	bfc	r3, #6, #1
    b74a:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b74c:	7bfb      	ldrb	r3, [r7, #15]
    b74e:	2200      	movs	r2, #0
    b750:	2101      	movs	r1, #1
    b752:	4618      	mov	r0, r3
    b754:	4b16      	ldr	r3, [pc, #88]	; (b7b0 <_usb_d_dev_handle_setup+0xc0>)
    b756:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    b758:	7bfb      	ldrb	r3, [r7, #15]
    b75a:	2200      	movs	r2, #0
    b75c:	2100      	movs	r1, #0
    b75e:	4618      	mov	r0, r3
    b760:	4b14      	ldr	r3, [pc, #80]	; (b7b4 <_usb_d_dev_handle_setup+0xc4>)
    b762:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    b764:	687a      	ldr	r2, [r7, #4]
    b766:	7cd3      	ldrb	r3, [r2, #19]
    b768:	f36f 03c3 	bfc	r3, #3, #1
    b76c:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    b76e:	7bfb      	ldrb	r3, [r7, #15]
    b770:	2100      	movs	r1, #0
    b772:	4618      	mov	r0, r3
    b774:	4b10      	ldr	r3, [pc, #64]	; (b7b8 <_usb_d_dev_handle_setup+0xc8>)
    b776:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    b778:	7bfb      	ldrb	r3, [r7, #15]
    b77a:	2101      	movs	r1, #1
    b77c:	4618      	mov	r0, r3
    b77e:	4b0e      	ldr	r3, [pc, #56]	; (b7b8 <_usb_d_dev_handle_setup+0xc8>)
    b780:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    b782:	7bfb      	ldrb	r3, [r7, #15]
    b784:	216f      	movs	r1, #111	; 0x6f
    b786:	4618      	mov	r0, r3
    b788:	4b0c      	ldr	r3, [pc, #48]	; (b7bc <_usb_d_dev_handle_setup+0xcc>)
    b78a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    b78c:	7bfb      	ldrb	r3, [r7, #15]
    b78e:	216f      	movs	r1, #111	; 0x6f
    b790:	4618      	mov	r0, r3
    b792:	4b0b      	ldr	r3, [pc, #44]	; (b7c0 <_usb_d_dev_handle_setup+0xd0>)
    b794:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    b796:	4b0b      	ldr	r3, [pc, #44]	; (b7c4 <_usb_d_dev_handle_setup+0xd4>)
    b798:	689b      	ldr	r3, [r3, #8]
    b79a:	687a      	ldr	r2, [r7, #4]
    b79c:	7c92      	ldrb	r2, [r2, #18]
    b79e:	4610      	mov	r0, r2
    b7a0:	4798      	blx	r3
}
    b7a2:	3710      	adds	r7, #16
    b7a4:	46bd      	mov	sp, r7
    b7a6:	bd80      	pop	{r7, pc}
    b7a8:	0000ab95 	.word	0x0000ab95
    b7ac:	0000ab41 	.word	0x0000ab41
    b7b0:	0000ae39 	.word	0x0000ae39
    b7b4:	0000ae91 	.word	0x0000ae91
    b7b8:	0000ae01 	.word	0x0000ae01
    b7bc:	0000a941 	.word	0x0000a941
    b7c0:	0000a991 	.word	0x0000a991
    b7c4:	20002594 	.word	0x20002594

0000b7c8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    b7c8:	b580      	push	{r7, lr}
    b7ca:	b084      	sub	sp, #16
    b7cc:	af00      	add	r7, sp, #0
    b7ce:	6078      	str	r0, [r7, #4]
    b7d0:	460b      	mov	r3, r1
    b7d2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b7d4:	687b      	ldr	r3, [r7, #4]
    b7d6:	7c9b      	ldrb	r3, [r3, #18]
    b7d8:	f003 030f 	and.w	r3, r3, #15
    b7dc:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    b7de:	78f9      	ldrb	r1, [r7, #3]
    b7e0:	7bfb      	ldrb	r3, [r7, #15]
    b7e2:	2200      	movs	r2, #0
    b7e4:	4618      	mov	r0, r3
    b7e6:	4b07      	ldr	r3, [pc, #28]	; (b804 <_usb_d_dev_handle_stall+0x3c>)
    b7e8:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    b7ea:	4b07      	ldr	r3, [pc, #28]	; (b808 <_usb_d_dev_handle_stall+0x40>)
    b7ec:	691b      	ldr	r3, [r3, #16]
    b7ee:	687a      	ldr	r2, [r7, #4]
    b7f0:	7c90      	ldrb	r0, [r2, #18]
    b7f2:	687a      	ldr	r2, [r7, #4]
    b7f4:	6892      	ldr	r2, [r2, #8]
    b7f6:	2101      	movs	r1, #1
    b7f8:	4798      	blx	r3
}
    b7fa:	bf00      	nop
    b7fc:	3710      	adds	r7, #16
    b7fe:	46bd      	mov	sp, r7
    b800:	bd80      	pop	{r7, pc}
    b802:	bf00      	nop
    b804:	0000aaf5 	.word	0x0000aaf5
    b808:	20002594 	.word	0x20002594

0000b80c <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    b80c:	b580      	push	{r7, lr}
    b80e:	b088      	sub	sp, #32
    b810:	af00      	add	r7, sp, #0
    b812:	6078      	str	r0, [r7, #4]
    b814:	460b      	mov	r3, r1
    b816:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    b818:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b81c:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    b81e:	687b      	ldr	r3, [r7, #4]
    b820:	7c9b      	ldrb	r3, [r3, #18]
    b822:	f003 030f 	and.w	r3, r3, #15
    b826:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    b828:	4b61      	ldr	r3, [pc, #388]	; (b9b0 <_usb_d_dev_handle_trfail+0x1a4>)
    b82a:	881b      	ldrh	r3, [r3, #0]
    b82c:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    b82e:	7efb      	ldrb	r3, [r7, #27]
    b830:	015b      	lsls	r3, r3, #5
    b832:	4a60      	ldr	r2, [pc, #384]	; (b9b4 <_usb_d_dev_handle_trfail+0x1a8>)
    b834:	4413      	add	r3, r2
    b836:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    b838:	78fb      	ldrb	r3, [r7, #3]
    b83a:	2b00      	cmp	r3, #0
    b83c:	d006      	beq.n	b84c <_usb_d_dev_handle_trfail+0x40>
    b83e:	7efb      	ldrb	r3, [r7, #27]
    b840:	4619      	mov	r1, r3
    b842:	69f8      	ldr	r0, [r7, #28]
    b844:	4b5c      	ldr	r3, [pc, #368]	; (b9b8 <_usb_d_dev_handle_trfail+0x1ac>)
    b846:	4798      	blx	r3
    b848:	4603      	mov	r3, r0
    b84a:	e005      	b.n	b858 <_usb_d_dev_handle_trfail+0x4c>
    b84c:	7efb      	ldrb	r3, [r7, #27]
    b84e:	4619      	mov	r1, r3
    b850:	69f8      	ldr	r0, [r7, #28]
    b852:	4b5a      	ldr	r3, [pc, #360]	; (b9bc <_usb_d_dev_handle_trfail+0x1b0>)
    b854:	4798      	blx	r3
    b856:	4603      	mov	r3, r0
    b858:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b85a:	687b      	ldr	r3, [r7, #4]
    b85c:	7cdb      	ldrb	r3, [r3, #19]
    b85e:	f003 0307 	and.w	r3, r3, #7
    b862:	b2db      	uxtb	r3, r3
    b864:	2b01      	cmp	r3, #1
    b866:	bf0c      	ite	eq
    b868:	2301      	moveq	r3, #1
    b86a:	2300      	movne	r3, #0
    b86c:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    b86e:	78fb      	ldrb	r3, [r7, #3]
    b870:	011b      	lsls	r3, r3, #4
    b872:	697a      	ldr	r2, [r7, #20]
    b874:	4413      	add	r3, r2
    b876:	7a9b      	ldrb	r3, [r3, #10]
    b878:	b2db      	uxtb	r3, r3
    b87a:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    b87c:	7cfb      	ldrb	r3, [r7, #19]
    b87e:	2b02      	cmp	r3, #2
    b880:	d12f      	bne.n	b8e2 <_usb_d_dev_handle_trfail+0xd6>
    b882:	7b3b      	ldrb	r3, [r7, #12]
    b884:	f003 0301 	and.w	r3, r3, #1
    b888:	b2db      	uxtb	r3, r3
    b88a:	2b00      	cmp	r3, #0
    b88c:	d029      	beq.n	b8e2 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    b88e:	78fb      	ldrb	r3, [r7, #3]
    b890:	011b      	lsls	r3, r3, #4
    b892:	697a      	ldr	r2, [r7, #20]
    b894:	441a      	add	r2, r3
    b896:	7a93      	ldrb	r3, [r2, #10]
    b898:	f36f 0300 	bfc	r3, #0, #1
    b89c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b89e:	78fb      	ldrb	r3, [r7, #3]
    b8a0:	f107 0220 	add.w	r2, r7, #32
    b8a4:	4413      	add	r3, r2
    b8a6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b8aa:	7efb      	ldrb	r3, [r7, #27]
    b8ac:	4619      	mov	r1, r3
    b8ae:	69f8      	ldr	r0, [r7, #28]
    b8b0:	4b43      	ldr	r3, [pc, #268]	; (b9c0 <_usb_d_dev_handle_trfail+0x1b4>)
    b8b2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b8b4:	78fb      	ldrb	r3, [r7, #3]
    b8b6:	f107 0220 	add.w	r2, r7, #32
    b8ba:	4413      	add	r3, r2
    b8bc:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b8c0:	7efb      	ldrb	r3, [r7, #27]
    b8c2:	4619      	mov	r1, r3
    b8c4:	69f8      	ldr	r0, [r7, #28]
    b8c6:	4b3f      	ldr	r3, [pc, #252]	; (b9c4 <_usb_d_dev_handle_trfail+0x1b8>)
    b8c8:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    b8ca:	78fb      	ldrb	r3, [r7, #3]
    b8cc:	2b00      	cmp	r3, #0
    b8ce:	bf14      	ite	ne
    b8d0:	2301      	movne	r3, #1
    b8d2:	2300      	moveq	r3, #0
    b8d4:	b2db      	uxtb	r3, r3
    b8d6:	2204      	movs	r2, #4
    b8d8:	4619      	mov	r1, r3
    b8da:	6878      	ldr	r0, [r7, #4]
    b8dc:	4b3a      	ldr	r3, [pc, #232]	; (b9c8 <_usb_d_dev_handle_trfail+0x1bc>)
    b8de:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    b8e0:	e062      	b.n	b9a8 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    b8e2:	7b3b      	ldrb	r3, [r7, #12]
    b8e4:	f003 0302 	and.w	r3, r3, #2
    b8e8:	b2db      	uxtb	r3, r3
    b8ea:	2b00      	cmp	r3, #0
    b8ec:	d040      	beq.n	b970 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    b8ee:	78fb      	ldrb	r3, [r7, #3]
    b8f0:	011b      	lsls	r3, r3, #4
    b8f2:	697a      	ldr	r2, [r7, #20]
    b8f4:	441a      	add	r2, r3
    b8f6:	7a93      	ldrb	r3, [r2, #10]
    b8f8:	f36f 0341 	bfc	r3, #1, #1
    b8fc:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b8fe:	78fb      	ldrb	r3, [r7, #3]
    b900:	f107 0220 	add.w	r2, r7, #32
    b904:	4413      	add	r3, r2
    b906:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b90a:	7efb      	ldrb	r3, [r7, #27]
    b90c:	4619      	mov	r1, r3
    b90e:	69f8      	ldr	r0, [r7, #28]
    b910:	4b2b      	ldr	r3, [pc, #172]	; (b9c0 <_usb_d_dev_handle_trfail+0x1b4>)
    b912:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b914:	78fb      	ldrb	r3, [r7, #3]
    b916:	f107 0220 	add.w	r2, r7, #32
    b91a:	4413      	add	r3, r2
    b91c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b920:	7efb      	ldrb	r3, [r7, #27]
    b922:	4619      	mov	r1, r3
    b924:	69f8      	ldr	r0, [r7, #28]
    b926:	4b27      	ldr	r3, [pc, #156]	; (b9c4 <_usb_d_dev_handle_trfail+0x1b8>)
    b928:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    b92a:	7cbb      	ldrb	r3, [r7, #18]
    b92c:	2b00      	cmp	r3, #0
    b92e:	d03b      	beq.n	b9a8 <_usb_d_dev_handle_trfail+0x19c>
    b930:	687b      	ldr	r3, [r7, #4]
    b932:	7cdb      	ldrb	r3, [r3, #19]
    b934:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b938:	b2db      	uxtb	r3, r3
    b93a:	2b00      	cmp	r3, #0
    b93c:	d034      	beq.n	b9a8 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    b93e:	687b      	ldr	r3, [r7, #4]
    b940:	7cdb      	ldrb	r3, [r3, #19]
    b942:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    b946:	b2db      	uxtb	r3, r3
    b948:	461a      	mov	r2, r3
    b94a:	78fb      	ldrb	r3, [r7, #3]
    b94c:	4293      	cmp	r3, r2
    b94e:	d02b      	beq.n	b9a8 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    b950:	687b      	ldr	r3, [r7, #4]
    b952:	7cdb      	ldrb	r3, [r3, #19]
    b954:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    b958:	b2db      	uxtb	r3, r3
    b95a:	2b00      	cmp	r3, #0
    b95c:	bf14      	ite	ne
    b95e:	2301      	movne	r3, #1
    b960:	2300      	moveq	r3, #0
    b962:	b2db      	uxtb	r3, r3
    b964:	2200      	movs	r2, #0
    b966:	4619      	mov	r1, r3
    b968:	6878      	ldr	r0, [r7, #4]
    b96a:	4b17      	ldr	r3, [pc, #92]	; (b9c8 <_usb_d_dev_handle_trfail+0x1bc>)
    b96c:	4798      	blx	r3
}
    b96e:	e01b      	b.n	b9a8 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    b970:	78fa      	ldrb	r2, [r7, #3]
    b972:	7efb      	ldrb	r3, [r7, #27]
    b974:	4611      	mov	r1, r2
    b976:	4618      	mov	r0, r3
    b978:	4b14      	ldr	r3, [pc, #80]	; (b9cc <_usb_d_dev_handle_trfail+0x1c0>)
    b97a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b97c:	78fb      	ldrb	r3, [r7, #3]
    b97e:	f107 0220 	add.w	r2, r7, #32
    b982:	4413      	add	r3, r2
    b984:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b988:	7efb      	ldrb	r3, [r7, #27]
    b98a:	4619      	mov	r1, r3
    b98c:	69f8      	ldr	r0, [r7, #28]
    b98e:	4b0c      	ldr	r3, [pc, #48]	; (b9c0 <_usb_d_dev_handle_trfail+0x1b4>)
    b990:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b992:	78fb      	ldrb	r3, [r7, #3]
    b994:	f107 0220 	add.w	r2, r7, #32
    b998:	4413      	add	r3, r2
    b99a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b99e:	7efb      	ldrb	r3, [r7, #27]
    b9a0:	4619      	mov	r1, r3
    b9a2:	69f8      	ldr	r0, [r7, #28]
    b9a4:	4b07      	ldr	r3, [pc, #28]	; (b9c4 <_usb_d_dev_handle_trfail+0x1b8>)
    b9a6:	4798      	blx	r3
}
    b9a8:	bf00      	nop
    b9aa:	3720      	adds	r7, #32
    b9ac:	46bd      	mov	sp, r7
    b9ae:	bd80      	pop	{r7, pc}
    b9b0:	0001af30 	.word	0x0001af30
    b9b4:	2000265c 	.word	0x2000265c
    b9b8:	0000a575 	.word	0x0000a575
    b9bc:	0000a545 	.word	0x0000a545
    b9c0:	0000a419 	.word	0x0000a419
    b9c4:	0000a519 	.word	0x0000a519
    b9c8:	0000c585 	.word	0x0000c585
    b9cc:	0000ae01 	.word	0x0000ae01

0000b9d0 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    b9d0:	b580      	push	{r7, lr}
    b9d2:	b082      	sub	sp, #8
    b9d4:	af00      	add	r7, sp, #0
    b9d6:	6078      	str	r0, [r7, #4]
    b9d8:	460b      	mov	r3, r1
    b9da:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    b9dc:	78fb      	ldrb	r3, [r7, #3]
    b9de:	f003 0310 	and.w	r3, r3, #16
    b9e2:	2b00      	cmp	r3, #0
    b9e4:	d003      	beq.n	b9ee <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    b9e6:	6878      	ldr	r0, [r7, #4]
    b9e8:	4b0c      	ldr	r3, [pc, #48]	; (ba1c <_usb_d_dev_trans_setup_isr+0x4c>)
    b9ea:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    b9ec:	e012      	b.n	ba14 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    b9ee:	78fb      	ldrb	r3, [r7, #3]
    b9f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b9f4:	2b00      	cmp	r3, #0
    b9f6:	d004      	beq.n	ba02 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    b9f8:	2101      	movs	r1, #1
    b9fa:	6878      	ldr	r0, [r7, #4]
    b9fc:	4b08      	ldr	r3, [pc, #32]	; (ba20 <_usb_d_dev_trans_setup_isr+0x50>)
    b9fe:	4798      	blx	r3
}
    ba00:	e008      	b.n	ba14 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    ba02:	78fb      	ldrb	r3, [r7, #3]
    ba04:	f003 0320 	and.w	r3, r3, #32
    ba08:	2b00      	cmp	r3, #0
    ba0a:	d003      	beq.n	ba14 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    ba0c:	2100      	movs	r1, #0
    ba0e:	6878      	ldr	r0, [r7, #4]
    ba10:	4b03      	ldr	r3, [pc, #12]	; (ba20 <_usb_d_dev_trans_setup_isr+0x50>)
    ba12:	4798      	blx	r3
}
    ba14:	bf00      	nop
    ba16:	3708      	adds	r7, #8
    ba18:	46bd      	mov	sp, r7
    ba1a:	bd80      	pop	{r7, pc}
    ba1c:	0000b6f1 	.word	0x0000b6f1
    ba20:	0000b7c9 	.word	0x0000b7c9

0000ba24 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    ba24:	b580      	push	{r7, lr}
    ba26:	b082      	sub	sp, #8
    ba28:	af00      	add	r7, sp, #0
    ba2a:	6078      	str	r0, [r7, #4]
    ba2c:	460b      	mov	r3, r1
    ba2e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    ba30:	78fb      	ldrb	r3, [r7, #3]
    ba32:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ba36:	2b00      	cmp	r3, #0
    ba38:	d004      	beq.n	ba44 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    ba3a:	2101      	movs	r1, #1
    ba3c:	6878      	ldr	r0, [r7, #4]
    ba3e:	4b1a      	ldr	r3, [pc, #104]	; (baa8 <_usb_d_dev_trans_in_isr+0x84>)
    ba40:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    ba42:	e02c      	b.n	ba9e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    ba44:	78fb      	ldrb	r3, [r7, #3]
    ba46:	f003 0308 	and.w	r3, r3, #8
    ba4a:	2b00      	cmp	r3, #0
    ba4c:	d004      	beq.n	ba58 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    ba4e:	2101      	movs	r1, #1
    ba50:	6878      	ldr	r0, [r7, #4]
    ba52:	4b16      	ldr	r3, [pc, #88]	; (baac <_usb_d_dev_trans_in_isr+0x88>)
    ba54:	4798      	blx	r3
}
    ba56:	e022      	b.n	ba9e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    ba58:	78fb      	ldrb	r3, [r7, #3]
    ba5a:	f003 0302 	and.w	r3, r3, #2
    ba5e:	2b00      	cmp	r3, #0
    ba60:	d004      	beq.n	ba6c <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    ba62:	2101      	movs	r1, #1
    ba64:	6878      	ldr	r0, [r7, #4]
    ba66:	4b12      	ldr	r3, [pc, #72]	; (bab0 <_usb_d_dev_trans_in_isr+0x8c>)
    ba68:	4798      	blx	r3
}
    ba6a:	e018      	b.n	ba9e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    ba6c:	687b      	ldr	r3, [r7, #4]
    ba6e:	7cdb      	ldrb	r3, [r3, #19]
    ba70:	f003 0307 	and.w	r3, r3, #7
    ba74:	b2db      	uxtb	r3, r3
    ba76:	2b01      	cmp	r3, #1
    ba78:	d111      	bne.n	ba9e <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    ba7a:	78fb      	ldrb	r3, [r7, #3]
    ba7c:	f003 0304 	and.w	r3, r3, #4
    ba80:	2b00      	cmp	r3, #0
    ba82:	d004      	beq.n	ba8e <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    ba84:	2100      	movs	r1, #0
    ba86:	6878      	ldr	r0, [r7, #4]
    ba88:	4b08      	ldr	r3, [pc, #32]	; (baac <_usb_d_dev_trans_in_isr+0x88>)
    ba8a:	4798      	blx	r3
}
    ba8c:	e007      	b.n	ba9e <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    ba8e:	78fb      	ldrb	r3, [r7, #3]
    ba90:	f003 0310 	and.w	r3, r3, #16
    ba94:	2b00      	cmp	r3, #0
    ba96:	d002      	beq.n	ba9e <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    ba98:	6878      	ldr	r0, [r7, #4]
    ba9a:	4b06      	ldr	r3, [pc, #24]	; (bab4 <_usb_d_dev_trans_in_isr+0x90>)
    ba9c:	4798      	blx	r3
}
    ba9e:	bf00      	nop
    baa0:	3708      	adds	r7, #8
    baa2:	46bd      	mov	sp, r7
    baa4:	bd80      	pop	{r7, pc}
    baa6:	bf00      	nop
    baa8:	0000b7c9 	.word	0x0000b7c9
    baac:	0000b80d 	.word	0x0000b80d
    bab0:	0000b215 	.word	0x0000b215
    bab4:	0000b6f1 	.word	0x0000b6f1

0000bab8 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    bab8:	b580      	push	{r7, lr}
    baba:	b082      	sub	sp, #8
    babc:	af00      	add	r7, sp, #0
    babe:	6078      	str	r0, [r7, #4]
    bac0:	460b      	mov	r3, r1
    bac2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    bac4:	78fb      	ldrb	r3, [r7, #3]
    bac6:	f003 0320 	and.w	r3, r3, #32
    baca:	2b00      	cmp	r3, #0
    bacc:	d004      	beq.n	bad8 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    bace:	2100      	movs	r1, #0
    bad0:	6878      	ldr	r0, [r7, #4]
    bad2:	4b1a      	ldr	r3, [pc, #104]	; (bb3c <_usb_d_dev_trans_out_isr+0x84>)
    bad4:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    bad6:	e02c      	b.n	bb32 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    bad8:	78fb      	ldrb	r3, [r7, #3]
    bada:	f003 0304 	and.w	r3, r3, #4
    bade:	2b00      	cmp	r3, #0
    bae0:	d004      	beq.n	baec <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    bae2:	2100      	movs	r1, #0
    bae4:	6878      	ldr	r0, [r7, #4]
    bae6:	4b16      	ldr	r3, [pc, #88]	; (bb40 <_usb_d_dev_trans_out_isr+0x88>)
    bae8:	4798      	blx	r3
}
    baea:	e022      	b.n	bb32 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    baec:	78fb      	ldrb	r3, [r7, #3]
    baee:	f003 0301 	and.w	r3, r3, #1
    baf2:	2b00      	cmp	r3, #0
    baf4:	d004      	beq.n	bb00 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    baf6:	2101      	movs	r1, #1
    baf8:	6878      	ldr	r0, [r7, #4]
    bafa:	4b12      	ldr	r3, [pc, #72]	; (bb44 <_usb_d_dev_trans_out_isr+0x8c>)
    bafc:	4798      	blx	r3
}
    bafe:	e018      	b.n	bb32 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    bb00:	687b      	ldr	r3, [r7, #4]
    bb02:	7cdb      	ldrb	r3, [r3, #19]
    bb04:	f003 0307 	and.w	r3, r3, #7
    bb08:	b2db      	uxtb	r3, r3
    bb0a:	2b01      	cmp	r3, #1
    bb0c:	d111      	bne.n	bb32 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    bb0e:	78fb      	ldrb	r3, [r7, #3]
    bb10:	f003 0308 	and.w	r3, r3, #8
    bb14:	2b00      	cmp	r3, #0
    bb16:	d004      	beq.n	bb22 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    bb18:	2101      	movs	r1, #1
    bb1a:	6878      	ldr	r0, [r7, #4]
    bb1c:	4b08      	ldr	r3, [pc, #32]	; (bb40 <_usb_d_dev_trans_out_isr+0x88>)
    bb1e:	4798      	blx	r3
}
    bb20:	e007      	b.n	bb32 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    bb22:	78fb      	ldrb	r3, [r7, #3]
    bb24:	f003 0310 	and.w	r3, r3, #16
    bb28:	2b00      	cmp	r3, #0
    bb2a:	d002      	beq.n	bb32 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    bb2c:	6878      	ldr	r0, [r7, #4]
    bb2e:	4b06      	ldr	r3, [pc, #24]	; (bb48 <_usb_d_dev_trans_out_isr+0x90>)
    bb30:	4798      	blx	r3
}
    bb32:	bf00      	nop
    bb34:	3708      	adds	r7, #8
    bb36:	46bd      	mov	sp, r7
    bb38:	bd80      	pop	{r7, pc}
    bb3a:	bf00      	nop
    bb3c:	0000b7c9 	.word	0x0000b7c9
    bb40:	0000b80d 	.word	0x0000b80d
    bb44:	0000b42d 	.word	0x0000b42d
    bb48:	0000b6f1 	.word	0x0000b6f1

0000bb4c <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    bb4c:	b580      	push	{r7, lr}
    bb4e:	b084      	sub	sp, #16
    bb50:	af00      	add	r7, sp, #0
    bb52:	6078      	str	r0, [r7, #4]
    bb54:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    bb56:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bb5a:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    bb5c:	683b      	ldr	r3, [r7, #0]
    bb5e:	7c9b      	ldrb	r3, [r3, #18]
    bb60:	f003 030f 	and.w	r3, r3, #15
    bb64:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    bb66:	7afb      	ldrb	r3, [r7, #11]
    bb68:	2201      	movs	r2, #1
    bb6a:	409a      	lsls	r2, r3
    bb6c:	687b      	ldr	r3, [r7, #4]
    bb6e:	4013      	ands	r3, r2
    bb70:	2b00      	cmp	r3, #0
    bb72:	d03d      	beq.n	bbf0 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    bb74:	7afb      	ldrb	r3, [r7, #11]
    bb76:	68fa      	ldr	r2, [r7, #12]
    bb78:	3308      	adds	r3, #8
    bb7a:	015b      	lsls	r3, r3, #5
    bb7c:	4413      	add	r3, r2
    bb7e:	3307      	adds	r3, #7
    bb80:	781b      	ldrb	r3, [r3, #0]
    bb82:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    bb84:	7afb      	ldrb	r3, [r7, #11]
    bb86:	68fa      	ldr	r2, [r7, #12]
    bb88:	015b      	lsls	r3, r3, #5
    bb8a:	4413      	add	r3, r2
    bb8c:	f203 1309 	addw	r3, r3, #265	; 0x109
    bb90:	781b      	ldrb	r3, [r3, #0]
    bb92:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    bb94:	7aba      	ldrb	r2, [r7, #10]
    bb96:	7a7b      	ldrb	r3, [r7, #9]
    bb98:	4013      	ands	r3, r2
    bb9a:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    bb9c:	7abb      	ldrb	r3, [r7, #10]
    bb9e:	2b00      	cmp	r3, #0
    bba0:	d027      	beq.n	bbf2 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    bba2:	683b      	ldr	r3, [r7, #0]
    bba4:	7cdb      	ldrb	r3, [r3, #19]
    bba6:	f003 0307 	and.w	r3, r3, #7
    bbaa:	b2db      	uxtb	r3, r3
    bbac:	2b01      	cmp	r3, #1
    bbae:	d10c      	bne.n	bbca <_usb_d_dev_handle_eps+0x7e>
    bbb0:	683b      	ldr	r3, [r7, #0]
    bbb2:	7cdb      	ldrb	r3, [r3, #19]
    bbb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bbb8:	b2db      	uxtb	r3, r3
    bbba:	2b00      	cmp	r3, #0
    bbbc:	d105      	bne.n	bbca <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    bbbe:	7abb      	ldrb	r3, [r7, #10]
    bbc0:	4619      	mov	r1, r3
    bbc2:	6838      	ldr	r0, [r7, #0]
    bbc4:	4b0c      	ldr	r3, [pc, #48]	; (bbf8 <_usb_d_dev_handle_eps+0xac>)
    bbc6:	4798      	blx	r3
    bbc8:	e013      	b.n	bbf2 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    bbca:	683b      	ldr	r3, [r7, #0]
    bbcc:	7cdb      	ldrb	r3, [r3, #19]
    bbce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    bbd2:	b2db      	uxtb	r3, r3
    bbd4:	2b00      	cmp	r3, #0
    bbd6:	d005      	beq.n	bbe4 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    bbd8:	7abb      	ldrb	r3, [r7, #10]
    bbda:	4619      	mov	r1, r3
    bbdc:	6838      	ldr	r0, [r7, #0]
    bbde:	4b07      	ldr	r3, [pc, #28]	; (bbfc <_usb_d_dev_handle_eps+0xb0>)
    bbe0:	4798      	blx	r3
    bbe2:	e006      	b.n	bbf2 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    bbe4:	7abb      	ldrb	r3, [r7, #10]
    bbe6:	4619      	mov	r1, r3
    bbe8:	6838      	ldr	r0, [r7, #0]
    bbea:	4b05      	ldr	r3, [pc, #20]	; (bc00 <_usb_d_dev_handle_eps+0xb4>)
    bbec:	4798      	blx	r3
    bbee:	e000      	b.n	bbf2 <_usb_d_dev_handle_eps+0xa6>
		return;
    bbf0:	bf00      	nop
		}
	}
}
    bbf2:	3710      	adds	r7, #16
    bbf4:	46bd      	mov	sp, r7
    bbf6:	bd80      	pop	{r7, pc}
    bbf8:	0000b9d1 	.word	0x0000b9d1
    bbfc:	0000ba25 	.word	0x0000ba25
    bc00:	0000bab9 	.word	0x0000bab9

0000bc04 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    bc04:	b580      	push	{r7, lr}
    bc06:	b084      	sub	sp, #16
    bc08:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    bc0a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bc0e:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    bc10:	68bb      	ldr	r3, [r7, #8]
    bc12:	8c1b      	ldrh	r3, [r3, #32]
    bc14:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    bc16:	88fb      	ldrh	r3, [r7, #6]
    bc18:	2b00      	cmp	r3, #0
    bc1a:	d104      	bne.n	bc26 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    bc1c:	4b13      	ldr	r3, [pc, #76]	; (bc6c <_usb_d_dev_handler+0x68>)
    bc1e:	4798      	blx	r3
    bc20:	4603      	mov	r3, r0
    bc22:	2b00      	cmp	r3, #0
    bc24:	d11e      	bne.n	bc64 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    bc26:	2300      	movs	r3, #0
    bc28:	73fb      	strb	r3, [r7, #15]
    bc2a:	e017      	b.n	bc5c <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    bc2c:	7bfa      	ldrb	r2, [r7, #15]
    bc2e:	4613      	mov	r3, r2
    bc30:	009b      	lsls	r3, r3, #2
    bc32:	4413      	add	r3, r2
    bc34:	009b      	lsls	r3, r3, #2
    bc36:	3310      	adds	r3, #16
    bc38:	4a0d      	ldr	r2, [pc, #52]	; (bc70 <_usb_d_dev_handler+0x6c>)
    bc3a:	4413      	add	r3, r2
    bc3c:	3304      	adds	r3, #4
    bc3e:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    bc40:	683b      	ldr	r3, [r7, #0]
    bc42:	7c9b      	ldrb	r3, [r3, #18]
    bc44:	2bff      	cmp	r3, #255	; 0xff
    bc46:	d005      	beq.n	bc54 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    bc48:	88fb      	ldrh	r3, [r7, #6]
    bc4a:	6839      	ldr	r1, [r7, #0]
    bc4c:	4618      	mov	r0, r3
    bc4e:	4b09      	ldr	r3, [pc, #36]	; (bc74 <_usb_d_dev_handler+0x70>)
    bc50:	4798      	blx	r3
    bc52:	e000      	b.n	bc56 <_usb_d_dev_handler+0x52>
			continue;
    bc54:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    bc56:	7bfb      	ldrb	r3, [r7, #15]
    bc58:	3301      	adds	r3, #1
    bc5a:	73fb      	strb	r3, [r7, #15]
    bc5c:	7bfb      	ldrb	r3, [r7, #15]
    bc5e:	2b08      	cmp	r3, #8
    bc60:	d9e4      	bls.n	bc2c <_usb_d_dev_handler+0x28>
    bc62:	e000      	b.n	bc66 <_usb_d_dev_handler+0x62>
			return;
    bc64:	bf00      	nop
	}
}
    bc66:	3710      	adds	r7, #16
    bc68:	46bd      	mov	sp, r7
    bc6a:	bd80      	pop	{r7, pc}
    bc6c:	0000b15d 	.word	0x0000b15d
    bc70:	20002594 	.word	0x20002594
    bc74:	0000bb4d 	.word	0x0000bb4d

0000bc78 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    bc78:	b580      	push	{r7, lr}
    bc7a:	b082      	sub	sp, #8
    bc7c:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    bc7e:	2300      	movs	r3, #0
    bc80:	71fb      	strb	r3, [r7, #7]
    bc82:	e023      	b.n	bccc <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    bc84:	79fa      	ldrb	r2, [r7, #7]
    bc86:	4613      	mov	r3, r2
    bc88:	009b      	lsls	r3, r3, #2
    bc8a:	4413      	add	r3, r2
    bc8c:	009b      	lsls	r3, r3, #2
    bc8e:	3310      	adds	r3, #16
    bc90:	4a14      	ldr	r2, [pc, #80]	; (bce4 <_usb_d_dev_reset_epts+0x6c>)
    bc92:	4413      	add	r3, r2
    bc94:	3304      	adds	r3, #4
    bc96:	2103      	movs	r1, #3
    bc98:	4618      	mov	r0, r3
    bc9a:	4b13      	ldr	r3, [pc, #76]	; (bce8 <_usb_d_dev_reset_epts+0x70>)
    bc9c:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    bc9e:	79fa      	ldrb	r2, [r7, #7]
    bca0:	4910      	ldr	r1, [pc, #64]	; (bce4 <_usb_d_dev_reset_epts+0x6c>)
    bca2:	4613      	mov	r3, r2
    bca4:	009b      	lsls	r3, r3, #2
    bca6:	4413      	add	r3, r2
    bca8:	009b      	lsls	r3, r3, #2
    bcaa:	440b      	add	r3, r1
    bcac:	3326      	adds	r3, #38	; 0x26
    bcae:	22ff      	movs	r2, #255	; 0xff
    bcb0:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    bcb2:	79fa      	ldrb	r2, [r7, #7]
    bcb4:	490b      	ldr	r1, [pc, #44]	; (bce4 <_usb_d_dev_reset_epts+0x6c>)
    bcb6:	4613      	mov	r3, r2
    bcb8:	009b      	lsls	r3, r3, #2
    bcba:	4413      	add	r3, r2
    bcbc:	009b      	lsls	r3, r3, #2
    bcbe:	440b      	add	r3, r1
    bcc0:	3327      	adds	r3, #39	; 0x27
    bcc2:	2200      	movs	r2, #0
    bcc4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    bcc6:	79fb      	ldrb	r3, [r7, #7]
    bcc8:	3301      	adds	r3, #1
    bcca:	71fb      	strb	r3, [r7, #7]
    bccc:	79fb      	ldrb	r3, [r7, #7]
    bcce:	2b08      	cmp	r3, #8
    bcd0:	d9d8      	bls.n	bc84 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    bcd2:	22a0      	movs	r2, #160	; 0xa0
    bcd4:	2100      	movs	r1, #0
    bcd6:	4805      	ldr	r0, [pc, #20]	; (bcec <_usb_d_dev_reset_epts+0x74>)
    bcd8:	4b05      	ldr	r3, [pc, #20]	; (bcf0 <_usb_d_dev_reset_epts+0x78>)
    bcda:	4798      	blx	r3
}
    bcdc:	bf00      	nop
    bcde:	3708      	adds	r7, #8
    bce0:	46bd      	mov	sp, r7
    bce2:	bd80      	pop	{r7, pc}
    bce4:	20002594 	.word	0x20002594
    bce8:	0000c53d 	.word	0x0000c53d
    bcec:	2000265c 	.word	0x2000265c
    bcf0:	0001a769 	.word	0x0001a769

0000bcf4 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    bcf4:	b580      	push	{r7, lr}
    bcf6:	b084      	sub	sp, #16
    bcf8:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    bcfa:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bcfe:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    bd00:	2301      	movs	r3, #1
    bd02:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    bd04:	2304      	movs	r3, #4
    bd06:	713b      	strb	r3, [r7, #4]
    bd08:	2300      	movs	r3, #0
    bd0a:	717b      	strb	r3, [r7, #5]
    bd0c:	2300      	movs	r3, #0
    bd0e:	71bb      	strb	r3, [r7, #6]
    bd10:	2300      	movs	r3, #0
    bd12:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    bd14:	2101      	movs	r1, #1
    bd16:	68f8      	ldr	r0, [r7, #12]
    bd18:	4b26      	ldr	r3, [pc, #152]	; (bdb4 <_usb_d_dev_init+0xc0>)
    bd1a:	4798      	blx	r3
    bd1c:	4603      	mov	r3, r0
    bd1e:	f083 0301 	eor.w	r3, r3, #1
    bd22:	b2db      	uxtb	r3, r3
    bd24:	2b00      	cmp	r3, #0
    bd26:	d011      	beq.n	bd4c <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    bd28:	2102      	movs	r1, #2
    bd2a:	68f8      	ldr	r0, [r7, #12]
    bd2c:	4b22      	ldr	r3, [pc, #136]	; (bdb8 <_usb_d_dev_init+0xc4>)
    bd2e:	4798      	blx	r3
    bd30:	4603      	mov	r3, r0
    bd32:	2b00      	cmp	r3, #0
    bd34:	d006      	beq.n	bd44 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    bd36:	68f8      	ldr	r0, [r7, #12]
    bd38:	4b20      	ldr	r3, [pc, #128]	; (bdbc <_usb_d_dev_init+0xc8>)
    bd3a:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    bd3c:	2102      	movs	r1, #2
    bd3e:	68f8      	ldr	r0, [r7, #12]
    bd40:	4b1f      	ldr	r3, [pc, #124]	; (bdc0 <_usb_d_dev_init+0xcc>)
    bd42:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    bd44:	2101      	movs	r1, #1
    bd46:	68f8      	ldr	r0, [r7, #12]
    bd48:	4b1e      	ldr	r3, [pc, #120]	; (bdc4 <_usb_d_dev_init+0xd0>)
    bd4a:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    bd4c:	2101      	movs	r1, #1
    bd4e:	68f8      	ldr	r0, [r7, #12]
    bd50:	4b1b      	ldr	r3, [pc, #108]	; (bdc0 <_usb_d_dev_init+0xcc>)
    bd52:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    bd54:	4b1c      	ldr	r3, [pc, #112]	; (bdc8 <_usb_d_dev_init+0xd4>)
    bd56:	4a1d      	ldr	r2, [pc, #116]	; (bdcc <_usb_d_dev_init+0xd8>)
    bd58:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    bd5a:	4b1b      	ldr	r3, [pc, #108]	; (bdc8 <_usb_d_dev_init+0xd4>)
    bd5c:	4a1b      	ldr	r2, [pc, #108]	; (bdcc <_usb_d_dev_init+0xd8>)
    bd5e:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    bd60:	4b19      	ldr	r3, [pc, #100]	; (bdc8 <_usb_d_dev_init+0xd4>)
    bd62:	4a1a      	ldr	r2, [pc, #104]	; (bdcc <_usb_d_dev_init+0xd8>)
    bd64:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    bd66:	4b18      	ldr	r3, [pc, #96]	; (bdc8 <_usb_d_dev_init+0xd4>)
    bd68:	4a18      	ldr	r2, [pc, #96]	; (bdcc <_usb_d_dev_init+0xd8>)
    bd6a:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    bd6c:	4b16      	ldr	r3, [pc, #88]	; (bdc8 <_usb_d_dev_init+0xd4>)
    bd6e:	4a17      	ldr	r2, [pc, #92]	; (bdcc <_usb_d_dev_init+0xd8>)
    bd70:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    bd72:	4b17      	ldr	r3, [pc, #92]	; (bdd0 <_usb_d_dev_init+0xdc>)
    bd74:	4798      	blx	r3

	_usb_load_calib();
    bd76:	4b17      	ldr	r3, [pc, #92]	; (bdd4 <_usb_d_dev_init+0xe0>)
    bd78:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    bd7a:	2104      	movs	r1, #4
    bd7c:	68f8      	ldr	r0, [r7, #12]
    bd7e:	4b11      	ldr	r3, [pc, #68]	; (bdc4 <_usb_d_dev_init+0xd0>)
    bd80:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    bd82:	4b15      	ldr	r3, [pc, #84]	; (bdd8 <_usb_d_dev_init+0xe4>)
    bd84:	4619      	mov	r1, r3
    bd86:	68f8      	ldr	r0, [r7, #12]
    bd88:	4b14      	ldr	r3, [pc, #80]	; (bddc <_usb_d_dev_init+0xe8>)
    bd8a:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    bd8c:	7afb      	ldrb	r3, [r7, #11]
    bd8e:	f107 0210 	add.w	r2, r7, #16
    bd92:	4413      	add	r3, r2
    bd94:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    bd98:	f043 0301 	orr.w	r3, r3, #1
    bd9c:	b2db      	uxtb	r3, r3
    bd9e:	b29b      	uxth	r3, r3
    bda0:	4619      	mov	r1, r3
    bda2:	68f8      	ldr	r0, [r7, #12]
    bda4:	4b0e      	ldr	r3, [pc, #56]	; (bde0 <_usb_d_dev_init+0xec>)
    bda6:	4798      	blx	r3

	return ERR_NONE;
    bda8:	2300      	movs	r3, #0
}
    bdaa:	4618      	mov	r0, r3
    bdac:	3710      	adds	r7, #16
    bdae:	46bd      	mov	sp, r7
    bdb0:	bd80      	pop	{r7, pc}
    bdb2:	bf00      	nop
    bdb4:	0000a38d 	.word	0x0000a38d
    bdb8:	0000a6dd 	.word	0x0000a6dd
    bdbc:	0000a6b1 	.word	0x0000a6b1
    bdc0:	0000a363 	.word	0x0000a363
    bdc4:	0000a70d 	.word	0x0000a70d
    bdc8:	20002594 	.word	0x20002594
    bdcc:	0000a7d5 	.word	0x0000a7d5
    bdd0:	0000bc79 	.word	0x0000bc79
    bdd4:	0000a7ed 	.word	0x0000a7ed
    bdd8:	2000265c 	.word	0x2000265c
    bddc:	0000a7b9 	.word	0x0000a7b9
    bde0:	0000a77d 	.word	0x0000a77d

0000bde4 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    bde4:	b580      	push	{r7, lr}
    bde6:	b082      	sub	sp, #8
    bde8:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    bdea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bdee:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    bdf0:	2103      	movs	r1, #3
    bdf2:	6878      	ldr	r0, [r7, #4]
    bdf4:	4b17      	ldr	r3, [pc, #92]	; (be54 <_usb_d_dev_enable+0x70>)
    bdf6:	4798      	blx	r3
    bdf8:	4603      	mov	r3, r0
    bdfa:	2b00      	cmp	r3, #0
    bdfc:	d002      	beq.n	be04 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    bdfe:	f06f 0310 	mvn.w	r3, #16
    be02:	e023      	b.n	be4c <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    be04:	6878      	ldr	r0, [r7, #4]
    be06:	4b14      	ldr	r3, [pc, #80]	; (be58 <_usb_d_dev_enable+0x74>)
    be08:	4798      	blx	r3
    be0a:	4603      	mov	r3, r0
    be0c:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    be0e:	78fb      	ldrb	r3, [r7, #3]
    be10:	f003 0302 	and.w	r3, r3, #2
    be14:	2b00      	cmp	r3, #0
    be16:	d107      	bne.n	be28 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    be18:	78fb      	ldrb	r3, [r7, #3]
    be1a:	f043 0302 	orr.w	r3, r3, #2
    be1e:	b2db      	uxtb	r3, r3
    be20:	4619      	mov	r1, r3
    be22:	6878      	ldr	r0, [r7, #4]
    be24:	4b0d      	ldr	r3, [pc, #52]	; (be5c <_usb_d_dev_enable+0x78>)
    be26:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    be28:	2050      	movs	r0, #80	; 0x50
    be2a:	4b0d      	ldr	r3, [pc, #52]	; (be60 <_usb_d_dev_enable+0x7c>)
    be2c:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    be2e:	2051      	movs	r0, #81	; 0x51
    be30:	4b0b      	ldr	r3, [pc, #44]	; (be60 <_usb_d_dev_enable+0x7c>)
    be32:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    be34:	2052      	movs	r0, #82	; 0x52
    be36:	4b0a      	ldr	r3, [pc, #40]	; (be60 <_usb_d_dev_enable+0x7c>)
    be38:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    be3a:	2053      	movs	r0, #83	; 0x53
    be3c:	4b08      	ldr	r3, [pc, #32]	; (be60 <_usb_d_dev_enable+0x7c>)
    be3e:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    be40:	f240 218d 	movw	r1, #653	; 0x28d
    be44:	6878      	ldr	r0, [r7, #4]
    be46:	4b07      	ldr	r3, [pc, #28]	; (be64 <_usb_d_dev_enable+0x80>)
    be48:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    be4a:	2300      	movs	r3, #0
}
    be4c:	4618      	mov	r0, r3
    be4e:	3708      	adds	r7, #8
    be50:	46bd      	mov	sp, r7
    be52:	bd80      	pop	{r7, pc}
    be54:	0000a687 	.word	0x0000a687
    be58:	0000a735 	.word	0x0000a735
    be5c:	0000a70d 	.word	0x0000a70d
    be60:	0000a299 	.word	0x0000a299
    be64:	0000a631 	.word	0x0000a631

0000be68 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    be68:	b580      	push	{r7, lr}
    be6a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    be6c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    be70:	4b01      	ldr	r3, [pc, #4]	; (be78 <_usb_d_dev_attach+0x10>)
    be72:	4798      	blx	r3
}
    be74:	bf00      	nop
    be76:	bd80      	pop	{r7, pc}
    be78:	0000a759 	.word	0x0000a759

0000be7c <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    be7c:	b580      	push	{r7, lr}
    be7e:	b082      	sub	sp, #8
    be80:	af00      	add	r7, sp, #0
    be82:	4603      	mov	r3, r0
    be84:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    be86:	79fb      	ldrb	r3, [r7, #7]
    be88:	f063 037f 	orn	r3, r3, #127	; 0x7f
    be8c:	b2db      	uxtb	r3, r3
    be8e:	4619      	mov	r1, r3
    be90:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    be94:	4b02      	ldr	r3, [pc, #8]	; (bea0 <_usb_d_dev_set_address+0x24>)
    be96:	4798      	blx	r3
}
    be98:	bf00      	nop
    be9a:	3708      	adds	r7, #8
    be9c:	46bd      	mov	sp, r7
    be9e:	bd80      	pop	{r7, pc}
    bea0:	0000a79b 	.word	0x0000a79b

0000bea4 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    bea4:	b590      	push	{r4, r7, lr}
    bea6:	b085      	sub	sp, #20
    bea8:	af00      	add	r7, sp, #0
    beaa:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    beac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    beb0:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    beb2:	687b      	ldr	r3, [r7, #4]
    beb4:	7c9b      	ldrb	r3, [r3, #18]
    beb6:	f003 030f 	and.w	r3, r3, #15
    beba:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    bebc:	687b      	ldr	r3, [r7, #4]
    bebe:	68db      	ldr	r3, [r3, #12]
    bec0:	461a      	mov	r2, r3
    bec2:	7afb      	ldrb	r3, [r7, #11]
    bec4:	2100      	movs	r1, #0
    bec6:	4618      	mov	r0, r3
    bec8:	4b0f      	ldr	r3, [pc, #60]	; (bf08 <_usb_d_dev_trans_setup+0x64>)
    beca:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    becc:	687b      	ldr	r3, [r7, #4]
    bece:	8a1b      	ldrh	r3, [r3, #16]
    bed0:	461a      	mov	r2, r3
    bed2:	7af8      	ldrb	r0, [r7, #11]
    bed4:	2300      	movs	r3, #0
    bed6:	2100      	movs	r1, #0
    bed8:	4c0c      	ldr	r4, [pc, #48]	; (bf0c <_usb_d_dev_trans_setup+0x68>)
    beda:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    bedc:	7afb      	ldrb	r3, [r7, #11]
    bede:	22b0      	movs	r2, #176	; 0xb0
    bee0:	4619      	mov	r1, r3
    bee2:	68f8      	ldr	r0, [r7, #12]
    bee4:	4b0a      	ldr	r3, [pc, #40]	; (bf10 <_usb_d_dev_trans_setup+0x6c>)
    bee6:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    bee8:	7afb      	ldrb	r3, [r7, #11]
    beea:	2200      	movs	r2, #0
    beec:	2100      	movs	r1, #0
    beee:	4618      	mov	r0, r3
    bef0:	4b08      	ldr	r3, [pc, #32]	; (bf14 <_usb_d_dev_trans_setup+0x70>)
    bef2:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    bef4:	7afb      	ldrb	r3, [r7, #11]
    bef6:	2210      	movs	r2, #16
    bef8:	4619      	mov	r1, r3
    befa:	68f8      	ldr	r0, [r7, #12]
    befc:	4b06      	ldr	r3, [pc, #24]	; (bf18 <_usb_d_dev_trans_setup+0x74>)
    befe:	4798      	blx	r3
}
    bf00:	bf00      	nop
    bf02:	3714      	adds	r7, #20
    bf04:	46bd      	mov	sp, r7
    bf06:	bd90      	pop	{r4, r7, pc}
    bf08:	0000ac39 	.word	0x0000ac39
    bf0c:	0000adc1 	.word	0x0000adc1
    bf10:	0000a499 	.word	0x0000a499
    bf14:	0000ae91 	.word	0x0000ae91
    bf18:	0000a4ed 	.word	0x0000a4ed

0000bf1c <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    bf1c:	b580      	push	{r7, lr}
    bf1e:	b088      	sub	sp, #32
    bf20:	af00      	add	r7, sp, #0
    bf22:	4603      	mov	r3, r0
    bf24:	71fb      	strb	r3, [r7, #7]
    bf26:	460b      	mov	r3, r1
    bf28:	71bb      	strb	r3, [r7, #6]
    bf2a:	4613      	mov	r3, r2
    bf2c:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    bf2e:	79fb      	ldrb	r3, [r7, #7]
    bf30:	f003 030f 	and.w	r3, r3, #15
    bf34:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    bf36:	79fb      	ldrb	r3, [r7, #7]
    bf38:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bf3c:	2b00      	cmp	r3, #0
    bf3e:	bf14      	ite	ne
    bf40:	2301      	movne	r3, #1
    bf42:	2300      	moveq	r3, #0
    bf44:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    bf46:	7fba      	ldrb	r2, [r7, #30]
    bf48:	7ffb      	ldrb	r3, [r7, #31]
    bf4a:	4611      	mov	r1, r2
    bf4c:	4618      	mov	r0, r3
    bf4e:	4b3e      	ldr	r3, [pc, #248]	; (c048 <_usb_d_dev_ep_init+0x12c>)
    bf50:	4798      	blx	r3
    bf52:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    bf54:	79bb      	ldrb	r3, [r7, #6]
    bf56:	f003 0303 	and.w	r3, r3, #3
    bf5a:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    bf5c:	7ffa      	ldrb	r2, [r7, #31]
    bf5e:	4613      	mov	r3, r2
    bf60:	005b      	lsls	r3, r3, #1
    bf62:	4413      	add	r3, r2
    bf64:	009b      	lsls	r3, r3, #2
    bf66:	4a39      	ldr	r2, [pc, #228]	; (c04c <_usb_d_dev_ep_init+0x130>)
    bf68:	4413      	add	r3, r2
    bf6a:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    bf6c:	7ffb      	ldrb	r3, [r7, #31]
    bf6e:	2b04      	cmp	r3, #4
    bf70:	d902      	bls.n	bf78 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    bf72:	f06f 0311 	mvn.w	r3, #17
    bf76:	e063      	b.n	c040 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    bf78:	69bb      	ldr	r3, [r7, #24]
    bf7a:	7c9b      	ldrb	r3, [r3, #18]
    bf7c:	2bff      	cmp	r3, #255	; 0xff
    bf7e:	d002      	beq.n	bf86 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    bf80:	f06f 0313 	mvn.w	r3, #19
    bf84:	e05c      	b.n	c040 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    bf86:	7dfb      	ldrb	r3, [r7, #23]
    bf88:	2b00      	cmp	r3, #0
    bf8a:	d11f      	bne.n	bfcc <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    bf8c:	7fbb      	ldrb	r3, [r7, #30]
    bf8e:	2b00      	cmp	r3, #0
    bf90:	bf14      	ite	ne
    bf92:	2301      	movne	r3, #1
    bf94:	2300      	moveq	r3, #0
    bf96:	b2db      	uxtb	r3, r3
    bf98:	f083 0301 	eor.w	r3, r3, #1
    bf9c:	b2db      	uxtb	r3, r3
    bf9e:	f003 0301 	and.w	r3, r3, #1
    bfa2:	b2da      	uxtb	r2, r3
    bfa4:	7ffb      	ldrb	r3, [r7, #31]
    bfa6:	4611      	mov	r1, r2
    bfa8:	4618      	mov	r0, r3
    bfaa:	4b27      	ldr	r3, [pc, #156]	; (c048 <_usb_d_dev_ep_init+0x12c>)
    bfac:	4798      	blx	r3
    bfae:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    bfb0:	68fb      	ldr	r3, [r7, #12]
    bfb2:	7c9b      	ldrb	r3, [r3, #18]
    bfb4:	2bff      	cmp	r3, #255	; 0xff
    bfb6:	d002      	beq.n	bfbe <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    bfb8:	f06f 0313 	mvn.w	r3, #19
    bfbc:	e040      	b.n	c040 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    bfbe:	693b      	ldr	r3, [r7, #16]
    bfc0:	681b      	ldr	r3, [r3, #0]
    bfc2:	2b00      	cmp	r3, #0
    bfc4:	d102      	bne.n	bfcc <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    bfc6:	f06f 0312 	mvn.w	r3, #18
    bfca:	e039      	b.n	c040 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    bfcc:	7fbb      	ldrb	r3, [r7, #30]
    bfce:	2b00      	cmp	r3, #0
    bfd0:	d007      	beq.n	bfe2 <_usb_d_dev_ep_init+0xc6>
    bfd2:	693b      	ldr	r3, [r7, #16]
    bfd4:	685b      	ldr	r3, [r3, #4]
    bfd6:	2b00      	cmp	r3, #0
    bfd8:	bf14      	ite	ne
    bfda:	2301      	movne	r3, #1
    bfdc:	2300      	moveq	r3, #0
    bfde:	b2db      	uxtb	r3, r3
    bfe0:	e006      	b.n	bff0 <_usb_d_dev_ep_init+0xd4>
    bfe2:	693b      	ldr	r3, [r7, #16]
    bfe4:	681b      	ldr	r3, [r3, #0]
    bfe6:	2b00      	cmp	r3, #0
    bfe8:	bf14      	ite	ne
    bfea:	2301      	movne	r3, #1
    bfec:	2300      	moveq	r3, #0
    bfee:	b2db      	uxtb	r3, r3
    bff0:	2b00      	cmp	r3, #0
    bff2:	d00f      	beq.n	c014 <_usb_d_dev_ep_init+0xf8>
    bff4:	7fbb      	ldrb	r3, [r7, #30]
    bff6:	2b00      	cmp	r3, #0
    bff8:	d003      	beq.n	c002 <_usb_d_dev_ep_init+0xe6>
    bffa:	693b      	ldr	r3, [r7, #16]
    bffc:	895b      	ldrh	r3, [r3, #10]
    bffe:	461a      	mov	r2, r3
    c000:	e002      	b.n	c008 <_usb_d_dev_ep_init+0xec>
    c002:	693b      	ldr	r3, [r7, #16]
    c004:	891b      	ldrh	r3, [r3, #8]
    c006:	461a      	mov	r2, r3
    c008:	88bb      	ldrh	r3, [r7, #4]
    c00a:	429a      	cmp	r2, r3
    c00c:	da02      	bge.n	c014 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    c00e:	f06f 0312 	mvn.w	r3, #18
    c012:	e015      	b.n	c040 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    c014:	7fbb      	ldrb	r3, [r7, #30]
    c016:	2b00      	cmp	r3, #0
    c018:	d002      	beq.n	c020 <_usb_d_dev_ep_init+0x104>
    c01a:	693b      	ldr	r3, [r7, #16]
    c01c:	685b      	ldr	r3, [r3, #4]
    c01e:	e001      	b.n	c024 <_usb_d_dev_ep_init+0x108>
    c020:	693b      	ldr	r3, [r7, #16]
    c022:	681b      	ldr	r3, [r3, #0]
    c024:	69ba      	ldr	r2, [r7, #24]
    c026:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    c028:	69bb      	ldr	r3, [r7, #24]
    c02a:	88ba      	ldrh	r2, [r7, #4]
    c02c:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    c02e:	7dfb      	ldrb	r3, [r7, #23]
    c030:	3301      	adds	r3, #1
    c032:	b2da      	uxtb	r2, r3
    c034:	69bb      	ldr	r3, [r7, #24]
    c036:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    c038:	69bb      	ldr	r3, [r7, #24]
    c03a:	79fa      	ldrb	r2, [r7, #7]
    c03c:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    c03e:	2300      	movs	r3, #0
}
    c040:	4618      	mov	r0, r3
    c042:	3720      	adds	r7, #32
    c044:	46bd      	mov	sp, r7
    c046:	bd80      	pop	{r7, pc}
    c048:	0000af4d 	.word	0x0000af4d
    c04c:	0001aef4 	.word	0x0001aef4

0000c050 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    c050:	b580      	push	{r7, lr}
    c052:	b086      	sub	sp, #24
    c054:	af00      	add	r7, sp, #0
    c056:	4603      	mov	r3, r0
    c058:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    c05a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c05e:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    c060:	79fb      	ldrb	r3, [r7, #7]
    c062:	f003 030f 	and.w	r3, r3, #15
    c066:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    c068:	79fb      	ldrb	r3, [r7, #7]
    c06a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c06e:	2b00      	cmp	r3, #0
    c070:	bf14      	ite	ne
    c072:	2301      	movne	r3, #1
    c074:	2300      	moveq	r3, #0
    c076:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c078:	7cba      	ldrb	r2, [r7, #18]
    c07a:	7cfb      	ldrb	r3, [r7, #19]
    c07c:	4611      	mov	r1, r2
    c07e:	4618      	mov	r0, r3
    c080:	4b2a      	ldr	r3, [pc, #168]	; (c12c <_usb_d_dev_ep_deinit+0xdc>)
    c082:	4798      	blx	r3
    c084:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    c086:	7cfb      	ldrb	r3, [r7, #19]
    c088:	2b04      	cmp	r3, #4
    c08a:	d84a      	bhi.n	c122 <_usb_d_dev_ep_deinit+0xd2>
    c08c:	68fb      	ldr	r3, [r7, #12]
    c08e:	7c9b      	ldrb	r3, [r3, #18]
    c090:	2bff      	cmp	r3, #255	; 0xff
    c092:	d046      	beq.n	c122 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    c094:	7cbb      	ldrb	r3, [r7, #18]
    c096:	2203      	movs	r2, #3
    c098:	4619      	mov	r1, r3
    c09a:	68f8      	ldr	r0, [r7, #12]
    c09c:	4b24      	ldr	r3, [pc, #144]	; (c130 <_usb_d_dev_ep_deinit+0xe0>)
    c09e:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    c0a0:	68fb      	ldr	r3, [r7, #12]
    c0a2:	7cdb      	ldrb	r3, [r3, #19]
    c0a4:	f003 0307 	and.w	r3, r3, #7
    c0a8:	b2db      	uxtb	r3, r3
    c0aa:	2b01      	cmp	r3, #1
    c0ac:	d107      	bne.n	c0be <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    c0ae:	79fb      	ldrb	r3, [r7, #7]
    c0b0:	697a      	ldr	r2, [r7, #20]
    c0b2:	3308      	adds	r3, #8
    c0b4:	015b      	lsls	r3, r3, #5
    c0b6:	4413      	add	r3, r2
    c0b8:	2200      	movs	r2, #0
    c0ba:	701a      	strb	r2, [r3, #0]
    c0bc:	e02a      	b.n	c114 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    c0be:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c0c2:	2b00      	cmp	r3, #0
    c0c4:	da15      	bge.n	c0f2 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    c0c6:	79fb      	ldrb	r3, [r7, #7]
    c0c8:	f003 030f 	and.w	r3, r3, #15
    c0cc:	79fa      	ldrb	r2, [r7, #7]
    c0ce:	f002 020f 	and.w	r2, r2, #15
    c0d2:	6979      	ldr	r1, [r7, #20]
    c0d4:	3208      	adds	r2, #8
    c0d6:	0152      	lsls	r2, r2, #5
    c0d8:	440a      	add	r2, r1
    c0da:	7812      	ldrb	r2, [r2, #0]
    c0dc:	b2d2      	uxtb	r2, r2
    c0de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    c0e2:	b2d1      	uxtb	r1, r2
    c0e4:	697a      	ldr	r2, [r7, #20]
    c0e6:	3308      	adds	r3, #8
    c0e8:	015b      	lsls	r3, r3, #5
    c0ea:	4413      	add	r3, r2
    c0ec:	460a      	mov	r2, r1
    c0ee:	701a      	strb	r2, [r3, #0]
    c0f0:	e010      	b.n	c114 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    c0f2:	79fb      	ldrb	r3, [r7, #7]
    c0f4:	79fa      	ldrb	r2, [r7, #7]
    c0f6:	6979      	ldr	r1, [r7, #20]
    c0f8:	3208      	adds	r2, #8
    c0fa:	0152      	lsls	r2, r2, #5
    c0fc:	440a      	add	r2, r1
    c0fe:	7812      	ldrb	r2, [r2, #0]
    c100:	b2d2      	uxtb	r2, r2
    c102:	f022 0207 	bic.w	r2, r2, #7
    c106:	b2d1      	uxtb	r1, r2
    c108:	697a      	ldr	r2, [r7, #20]
    c10a:	3308      	adds	r3, #8
    c10c:	015b      	lsls	r3, r3, #5
    c10e:	4413      	add	r3, r2
    c110:	460a      	mov	r2, r1
    c112:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    c114:	68fb      	ldr	r3, [r7, #12]
    c116:	2200      	movs	r2, #0
    c118:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    c11a:	68fb      	ldr	r3, [r7, #12]
    c11c:	22ff      	movs	r2, #255	; 0xff
    c11e:	749a      	strb	r2, [r3, #18]
    c120:	e000      	b.n	c124 <_usb_d_dev_ep_deinit+0xd4>
		return;
    c122:	bf00      	nop
}
    c124:	3718      	adds	r7, #24
    c126:	46bd      	mov	sp, r7
    c128:	bd80      	pop	{r7, pc}
    c12a:	bf00      	nop
    c12c:	0000af4d 	.word	0x0000af4d
    c130:	0000c585 	.word	0x0000c585

0000c134 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    c134:	b5b0      	push	{r4, r5, r7, lr}
    c136:	b088      	sub	sp, #32
    c138:	af00      	add	r7, sp, #0
    c13a:	4603      	mov	r3, r0
    c13c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    c13e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c142:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    c144:	79fb      	ldrb	r3, [r7, #7]
    c146:	f003 030f 	and.w	r3, r3, #15
    c14a:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    c14c:	79fb      	ldrb	r3, [r7, #7]
    c14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c152:	2b00      	cmp	r3, #0
    c154:	bf14      	ite	ne
    c156:	2301      	movne	r3, #1
    c158:	2300      	moveq	r3, #0
    c15a:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    c15c:	7eba      	ldrb	r2, [r7, #26]
    c15e:	7efb      	ldrb	r3, [r7, #27]
    c160:	4611      	mov	r1, r2
    c162:	4618      	mov	r0, r3
    c164:	4b70      	ldr	r3, [pc, #448]	; (c328 <_usb_d_dev_ep_enable+0x1f4>)
    c166:	4798      	blx	r3
    c168:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    c16a:	7efb      	ldrb	r3, [r7, #27]
    c16c:	4619      	mov	r1, r3
    c16e:	69f8      	ldr	r0, [r7, #28]
    c170:	4b6e      	ldr	r3, [pc, #440]	; (c32c <_usb_d_dev_ep_enable+0x1f8>)
    c172:	4798      	blx	r3
    c174:	4603      	mov	r3, r0
    c176:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    c178:	7efb      	ldrb	r3, [r7, #27]
    c17a:	2b04      	cmp	r3, #4
    c17c:	d803      	bhi.n	c186 <_usb_d_dev_ep_enable+0x52>
    c17e:	697b      	ldr	r3, [r7, #20]
    c180:	7c9b      	ldrb	r3, [r3, #18]
    c182:	2bff      	cmp	r3, #255	; 0xff
    c184:	d102      	bne.n	c18c <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    c186:	f06f 0311 	mvn.w	r3, #17
    c18a:	e0c8      	b.n	c31e <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    c18c:	7efb      	ldrb	r3, [r7, #27]
    c18e:	015b      	lsls	r3, r3, #5
    c190:	4a67      	ldr	r2, [pc, #412]	; (c330 <_usb_d_dev_ep_enable+0x1fc>)
    c192:	4413      	add	r3, r2
    c194:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    c196:	697b      	ldr	r3, [r7, #20]
    c198:	7cdb      	ldrb	r3, [r3, #19]
    c19a:	f003 0307 	and.w	r3, r3, #7
    c19e:	b2db      	uxtb	r3, r3
    c1a0:	2b01      	cmp	r3, #1
    c1a2:	d14b      	bne.n	c23c <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    c1a4:	7cfb      	ldrb	r3, [r7, #19]
    c1a6:	f003 0377 	and.w	r3, r3, #119	; 0x77
    c1aa:	2b00      	cmp	r3, #0
    c1ac:	d002      	beq.n	c1b4 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    c1ae:	f06f 0313 	mvn.w	r3, #19
    c1b2:	e0b4      	b.n	c31e <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    c1b4:	7efb      	ldrb	r3, [r7, #27]
    c1b6:	2211      	movs	r2, #17
    c1b8:	4619      	mov	r1, r3
    c1ba:	69f8      	ldr	r0, [r7, #28]
    c1bc:	4b5d      	ldr	r3, [pc, #372]	; (c334 <_usb_d_dev_ep_enable+0x200>)
    c1be:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c1c0:	697b      	ldr	r3, [r7, #20]
    c1c2:	8a1b      	ldrh	r3, [r3, #16]
    c1c4:	039b      	lsls	r3, r3, #14
    c1c6:	4c5c      	ldr	r4, [pc, #368]	; (c338 <_usb_d_dev_ep_enable+0x204>)
    c1c8:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c1ca:	697b      	ldr	r3, [r7, #20]
    c1cc:	8a1b      	ldrh	r3, [r3, #16]
    c1ce:	4618      	mov	r0, r3
    c1d0:	4b5a      	ldr	r3, [pc, #360]	; (c33c <_usb_d_dev_ep_enable+0x208>)
    c1d2:	4798      	blx	r3
    c1d4:	4603      	mov	r3, r0
    c1d6:	071b      	lsls	r3, r3, #28
    c1d8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c1dc:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c1e0:	68fb      	ldr	r3, [r7, #12]
    c1e2:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    c1e4:	68fb      	ldr	r3, [r7, #12]
    c1e6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c1ea:	697b      	ldr	r3, [r7, #20]
    c1ec:	8a1b      	ldrh	r3, [r3, #16]
    c1ee:	f3c3 050d 	ubfx	r5, r3, #0, #14
    c1f2:	697b      	ldr	r3, [r7, #20]
    c1f4:	8a1b      	ldrh	r3, [r3, #16]
    c1f6:	4618      	mov	r0, r3
    c1f8:	4b50      	ldr	r3, [pc, #320]	; (c33c <_usb_d_dev_ep_enable+0x208>)
    c1fa:	4798      	blx	r3
    c1fc:	4603      	mov	r3, r0
    c1fe:	071b      	lsls	r3, r3, #28
    c200:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c204:	432b      	orrs	r3, r5
    c206:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c208:	7efb      	ldrb	r3, [r7, #27]
    c20a:	2200      	movs	r2, #0
    c20c:	2100      	movs	r1, #0
    c20e:	4618      	mov	r0, r3
    c210:	4b4b      	ldr	r3, [pc, #300]	; (c340 <_usb_d_dev_ep_enable+0x20c>)
    c212:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    c214:	7efb      	ldrb	r3, [r7, #27]
    c216:	2200      	movs	r2, #0
    c218:	2101      	movs	r1, #1
    c21a:	4618      	mov	r0, r3
    c21c:	4b49      	ldr	r3, [pc, #292]	; (c344 <_usb_d_dev_ep_enable+0x210>)
    c21e:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    c220:	7efb      	ldrb	r3, [r7, #27]
    c222:	2100      	movs	r1, #0
    c224:	4618      	mov	r0, r3
    c226:	4b48      	ldr	r3, [pc, #288]	; (c348 <_usb_d_dev_ep_enable+0x214>)
    c228:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    c22a:	7efb      	ldrb	r3, [r7, #27]
    c22c:	2101      	movs	r1, #1
    c22e:	4618      	mov	r0, r3
    c230:	4b45      	ldr	r3, [pc, #276]	; (c348 <_usb_d_dev_ep_enable+0x214>)
    c232:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    c234:	6978      	ldr	r0, [r7, #20]
    c236:	4b45      	ldr	r3, [pc, #276]	; (c34c <_usb_d_dev_ep_enable+0x218>)
    c238:	4798      	blx	r3
    c23a:	e06f      	b.n	c31c <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    c23c:	7ebb      	ldrb	r3, [r7, #26]
    c23e:	2b00      	cmp	r3, #0
    c240:	d038      	beq.n	c2b4 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    c242:	7cfb      	ldrb	r3, [r7, #19]
    c244:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c248:	2b00      	cmp	r3, #0
    c24a:	d002      	beq.n	c252 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    c24c:	f06f 0313 	mvn.w	r3, #19
    c250:	e065      	b.n	c31e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    c252:	697b      	ldr	r3, [r7, #20]
    c254:	7cdb      	ldrb	r3, [r3, #19]
    c256:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c25a:	b2db      	uxtb	r3, r3
    c25c:	011b      	lsls	r3, r3, #4
    c25e:	b2db      	uxtb	r3, r3
    c260:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c264:	b2da      	uxtb	r2, r3
    c266:	7cfb      	ldrb	r3, [r7, #19]
    c268:	4313      	orrs	r3, r2
    c26a:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    c26c:	7cfa      	ldrb	r2, [r7, #19]
    c26e:	7efb      	ldrb	r3, [r7, #27]
    c270:	4619      	mov	r1, r3
    c272:	69f8      	ldr	r0, [r7, #28]
    c274:	4b2f      	ldr	r3, [pc, #188]	; (c334 <_usb_d_dev_ep_enable+0x200>)
    c276:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    c278:	68fb      	ldr	r3, [r7, #12]
    c27a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c27e:	697b      	ldr	r3, [r7, #20]
    c280:	8a1b      	ldrh	r3, [r3, #16]
    c282:	f3c3 050d 	ubfx	r5, r3, #0, #14
    c286:	697b      	ldr	r3, [r7, #20]
    c288:	8a1b      	ldrh	r3, [r3, #16]
    c28a:	4618      	mov	r0, r3
    c28c:	4b2b      	ldr	r3, [pc, #172]	; (c33c <_usb_d_dev_ep_enable+0x208>)
    c28e:	4798      	blx	r3
    c290:	4603      	mov	r3, r0
    c292:	071b      	lsls	r3, r3, #28
    c294:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c298:	432b      	orrs	r3, r5
    c29a:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    c29c:	7efb      	ldrb	r3, [r7, #27]
    c29e:	2200      	movs	r2, #0
    c2a0:	2101      	movs	r1, #1
    c2a2:	4618      	mov	r0, r3
    c2a4:	4b27      	ldr	r3, [pc, #156]	; (c344 <_usb_d_dev_ep_enable+0x210>)
    c2a6:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    c2a8:	7efb      	ldrb	r3, [r7, #27]
    c2aa:	2101      	movs	r1, #1
    c2ac:	4618      	mov	r0, r3
    c2ae:	4b26      	ldr	r3, [pc, #152]	; (c348 <_usb_d_dev_ep_enable+0x214>)
    c2b0:	4798      	blx	r3
    c2b2:	e033      	b.n	c31c <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    c2b4:	7cfb      	ldrb	r3, [r7, #19]
    c2b6:	f003 0307 	and.w	r3, r3, #7
    c2ba:	2b00      	cmp	r3, #0
    c2bc:	d002      	beq.n	c2c4 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    c2be:	f06f 0313 	mvn.w	r3, #19
    c2c2:	e02c      	b.n	c31e <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    c2c4:	697b      	ldr	r3, [r7, #20]
    c2c6:	7cdb      	ldrb	r3, [r3, #19]
    c2c8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c2cc:	b2db      	uxtb	r3, r3
    c2ce:	461a      	mov	r2, r3
    c2d0:	7cfb      	ldrb	r3, [r7, #19]
    c2d2:	4313      	orrs	r3, r2
    c2d4:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    c2d6:	7cfa      	ldrb	r2, [r7, #19]
    c2d8:	7efb      	ldrb	r3, [r7, #27]
    c2da:	4619      	mov	r1, r3
    c2dc:	69f8      	ldr	r0, [r7, #28]
    c2de:	4b15      	ldr	r3, [pc, #84]	; (c334 <_usb_d_dev_ep_enable+0x200>)
    c2e0:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c2e2:	697b      	ldr	r3, [r7, #20]
    c2e4:	8a1b      	ldrh	r3, [r3, #16]
    c2e6:	039b      	lsls	r3, r3, #14
    c2e8:	4c13      	ldr	r4, [pc, #76]	; (c338 <_usb_d_dev_ep_enable+0x204>)
    c2ea:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c2ec:	697b      	ldr	r3, [r7, #20]
    c2ee:	8a1b      	ldrh	r3, [r3, #16]
    c2f0:	4618      	mov	r0, r3
    c2f2:	4b12      	ldr	r3, [pc, #72]	; (c33c <_usb_d_dev_ep_enable+0x208>)
    c2f4:	4798      	blx	r3
    c2f6:	4603      	mov	r3, r0
    c2f8:	071b      	lsls	r3, r3, #28
    c2fa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c2fe:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c302:	68fb      	ldr	r3, [r7, #12]
    c304:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c306:	7efb      	ldrb	r3, [r7, #27]
    c308:	2200      	movs	r2, #0
    c30a:	2100      	movs	r1, #0
    c30c:	4618      	mov	r0, r3
    c30e:	4b0c      	ldr	r3, [pc, #48]	; (c340 <_usb_d_dev_ep_enable+0x20c>)
    c310:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    c312:	7efb      	ldrb	r3, [r7, #27]
    c314:	2100      	movs	r1, #0
    c316:	4618      	mov	r0, r3
    c318:	4b0b      	ldr	r3, [pc, #44]	; (c348 <_usb_d_dev_ep_enable+0x214>)
    c31a:	4798      	blx	r3
	}

	return USB_OK;
    c31c:	2300      	movs	r3, #0
}
    c31e:	4618      	mov	r0, r3
    c320:	3720      	adds	r7, #32
    c322:	46bd      	mov	sp, r7
    c324:	bdb0      	pop	{r4, r5, r7, pc}
    c326:	bf00      	nop
    c328:	0000af4d 	.word	0x0000af4d
    c32c:	0000a5d3 	.word	0x0000a5d3
    c330:	2000265c 	.word	0x2000265c
    c334:	0000a5a9 	.word	0x0000a5a9
    c338:	0fffc000 	.word	0x0fffc000
    c33c:	0000aee9 	.word	0x0000aee9
    c340:	0000ae91 	.word	0x0000ae91
    c344:	0000ae39 	.word	0x0000ae39
    c348:	0000ae01 	.word	0x0000ae01
    c34c:	0000bea5 	.word	0x0000bea5

0000c350 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    c350:	b580      	push	{r7, lr}
    c352:	b084      	sub	sp, #16
    c354:	af00      	add	r7, sp, #0
    c356:	6078      	str	r0, [r7, #4]
    c358:	460b      	mov	r3, r1
    c35a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c35c:	687b      	ldr	r3, [r7, #4]
    c35e:	7c9b      	ldrb	r3, [r3, #18]
    c360:	f003 030f 	and.w	r3, r3, #15
    c364:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    c366:	78fa      	ldrb	r2, [r7, #3]
    c368:	7bfb      	ldrb	r3, [r7, #15]
    c36a:	4611      	mov	r1, r2
    c36c:	4618      	mov	r0, r3
    c36e:	4b03      	ldr	r3, [pc, #12]	; (c37c <_usb_d_dev_ep_stall_get+0x2c>)
    c370:	4798      	blx	r3
    c372:	4603      	mov	r3, r0
}
    c374:	4618      	mov	r0, r3
    c376:	3710      	adds	r7, #16
    c378:	46bd      	mov	sp, r7
    c37a:	bd80      	pop	{r7, pc}
    c37c:	0000aa41 	.word	0x0000aa41

0000c380 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    c380:	b580      	push	{r7, lr}
    c382:	b084      	sub	sp, #16
    c384:	af00      	add	r7, sp, #0
    c386:	6078      	str	r0, [r7, #4]
    c388:	460b      	mov	r3, r1
    c38a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c38c:	687b      	ldr	r3, [r7, #4]
    c38e:	7c9b      	ldrb	r3, [r3, #18]
    c390:	f003 030f 	and.w	r3, r3, #15
    c394:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    c396:	78f9      	ldrb	r1, [r7, #3]
    c398:	7bfb      	ldrb	r3, [r7, #15]
    c39a:	2201      	movs	r2, #1
    c39c:	4618      	mov	r0, r3
    c39e:	4b0a      	ldr	r3, [pc, #40]	; (c3c8 <_usb_d_dev_ep_stall_set+0x48>)
    c3a0:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    c3a2:	78fb      	ldrb	r3, [r7, #3]
    c3a4:	2220      	movs	r2, #32
    c3a6:	409a      	lsls	r2, r3
    c3a8:	7bfb      	ldrb	r3, [r7, #15]
    c3aa:	4611      	mov	r1, r2
    c3ac:	4618      	mov	r0, r3
    c3ae:	4b07      	ldr	r3, [pc, #28]	; (c3cc <_usb_d_dev_ep_stall_set+0x4c>)
    c3b0:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    c3b2:	687a      	ldr	r2, [r7, #4]
    c3b4:	7cd3      	ldrb	r3, [r2, #19]
    c3b6:	f043 0308 	orr.w	r3, r3, #8
    c3ba:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    c3bc:	2300      	movs	r3, #0
}
    c3be:	4618      	mov	r0, r3
    c3c0:	3710      	adds	r7, #16
    c3c2:	46bd      	mov	sp, r7
    c3c4:	bd80      	pop	{r7, pc}
    c3c6:	bf00      	nop
    c3c8:	0000a9e9 	.word	0x0000a9e9
    c3cc:	0000a969 	.word	0x0000a969

0000c3d0 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    c3d0:	b580      	push	{r7, lr}
    c3d2:	b084      	sub	sp, #16
    c3d4:	af00      	add	r7, sp, #0
    c3d6:	6078      	str	r0, [r7, #4]
    c3d8:	460b      	mov	r3, r1
    c3da:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    c3dc:	687b      	ldr	r3, [r7, #4]
    c3de:	7c9b      	ldrb	r3, [r3, #18]
    c3e0:	f003 030f 	and.w	r3, r3, #15
    c3e4:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    c3e6:	78fa      	ldrb	r2, [r7, #3]
    c3e8:	7bfb      	ldrb	r3, [r7, #15]
    c3ea:	4611      	mov	r1, r2
    c3ec:	4618      	mov	r0, r3
    c3ee:	4b28      	ldr	r3, [pc, #160]	; (c490 <_usb_d_dev_ep_stall_clr+0xc0>)
    c3f0:	4798      	blx	r3
    c3f2:	4603      	mov	r3, r0
    c3f4:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    c3f6:	7bbb      	ldrb	r3, [r7, #14]
    c3f8:	f083 0301 	eor.w	r3, r3, #1
    c3fc:	b2db      	uxtb	r3, r3
    c3fe:	2b00      	cmp	r3, #0
    c400:	d001      	beq.n	c406 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    c402:	2300      	movs	r3, #0
    c404:	e040      	b.n	c488 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    c406:	78f9      	ldrb	r1, [r7, #3]
    c408:	7bfb      	ldrb	r3, [r7, #15]
    c40a:	2200      	movs	r2, #0
    c40c:	4618      	mov	r0, r3
    c40e:	4b21      	ldr	r3, [pc, #132]	; (c494 <_usb_d_dev_ep_stall_clr+0xc4>)
    c410:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    c412:	78fb      	ldrb	r3, [r7, #3]
    c414:	2220      	movs	r2, #32
    c416:	409a      	lsls	r2, r3
    c418:	7bfb      	ldrb	r3, [r7, #15]
    c41a:	4611      	mov	r1, r2
    c41c:	4618      	mov	r0, r3
    c41e:	4b1e      	ldr	r3, [pc, #120]	; (c498 <_usb_d_dev_ep_stall_clr+0xc8>)
    c420:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    c422:	78fa      	ldrb	r2, [r7, #3]
    c424:	7bfb      	ldrb	r3, [r7, #15]
    c426:	4611      	mov	r1, r2
    c428:	4618      	mov	r0, r3
    c42a:	4b1c      	ldr	r3, [pc, #112]	; (c49c <_usb_d_dev_ep_stall_clr+0xcc>)
    c42c:	4798      	blx	r3
    c42e:	4603      	mov	r3, r0
    c430:	2b00      	cmp	r3, #0
    c432:	d00b      	beq.n	c44c <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    c434:	78fa      	ldrb	r2, [r7, #3]
    c436:	7bfb      	ldrb	r3, [r7, #15]
    c438:	4611      	mov	r1, r2
    c43a:	4618      	mov	r0, r3
    c43c:	4b18      	ldr	r3, [pc, #96]	; (c4a0 <_usb_d_dev_ep_stall_clr+0xd0>)
    c43e:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    c440:	78f9      	ldrb	r1, [r7, #3]
    c442:	7bfb      	ldrb	r3, [r7, #15]
    c444:	2200      	movs	r2, #0
    c446:	4618      	mov	r0, r3
    c448:	4b16      	ldr	r3, [pc, #88]	; (c4a4 <_usb_d_dev_ep_stall_clr+0xd4>)
    c44a:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    c44c:	687b      	ldr	r3, [r7, #4]
    c44e:	7cdb      	ldrb	r3, [r3, #19]
    c450:	f003 0307 	and.w	r3, r3, #7
    c454:	b2db      	uxtb	r3, r3
    c456:	2b01      	cmp	r3, #1
    c458:	d110      	bne.n	c47c <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    c45a:	7bfb      	ldrb	r3, [r7, #15]
    c45c:	4619      	mov	r1, r3
    c45e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c462:	4b11      	ldr	r3, [pc, #68]	; (c4a8 <_usb_d_dev_ep_stall_clr+0xd8>)
    c464:	4798      	blx	r3
    c466:	4603      	mov	r3, r0
    c468:	f003 0330 	and.w	r3, r3, #48	; 0x30
    c46c:	2b00      	cmp	r3, #0
    c46e:	d10a      	bne.n	c486 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    c470:	687a      	ldr	r2, [r7, #4]
    c472:	7cd3      	ldrb	r3, [r2, #19]
    c474:	f36f 03c3 	bfc	r3, #3, #1
    c478:	74d3      	strb	r3, [r2, #19]
    c47a:	e004      	b.n	c486 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    c47c:	687a      	ldr	r2, [r7, #4]
    c47e:	7cd3      	ldrb	r3, [r2, #19]
    c480:	f36f 03c3 	bfc	r3, #3, #1
    c484:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    c486:	2300      	movs	r3, #0
}
    c488:	4618      	mov	r0, r3
    c48a:	3710      	adds	r7, #16
    c48c:	46bd      	mov	sp, r7
    c48e:	bd80      	pop	{r7, pc}
    c490:	0000aa41 	.word	0x0000aa41
    c494:	0000a9e9 	.word	0x0000a9e9
    c498:	0000a991 	.word	0x0000a991
    c49c:	0000aa85 	.word	0x0000aa85
    c4a0:	0000aac9 	.word	0x0000aac9
    c4a4:	0000abb5 	.word	0x0000abb5
    c4a8:	0000a471 	.word	0x0000a471

0000c4ac <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    c4ac:	b580      	push	{r7, lr}
    c4ae:	b086      	sub	sp, #24
    c4b0:	af00      	add	r7, sp, #0
    c4b2:	4603      	mov	r3, r0
    c4b4:	460a      	mov	r2, r1
    c4b6:	71fb      	strb	r3, [r7, #7]
    c4b8:	4613      	mov	r3, r2
    c4ba:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    c4bc:	79fb      	ldrb	r3, [r7, #7]
    c4be:	f003 030f 	and.w	r3, r3, #15
    c4c2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    c4c4:	79fb      	ldrb	r3, [r7, #7]
    c4c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c4ca:	2b00      	cmp	r3, #0
    c4cc:	bf14      	ite	ne
    c4ce:	2301      	movne	r3, #1
    c4d0:	2300      	moveq	r3, #0
    c4d2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c4d4:	7cba      	ldrb	r2, [r7, #18]
    c4d6:	7cfb      	ldrb	r3, [r7, #19]
    c4d8:	4611      	mov	r1, r2
    c4da:	4618      	mov	r0, r3
    c4dc:	4b13      	ldr	r3, [pc, #76]	; (c52c <_usb_d_dev_ep_stall+0x80>)
    c4de:	4798      	blx	r3
    c4e0:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    c4e2:	7cfb      	ldrb	r3, [r7, #19]
    c4e4:	2b04      	cmp	r3, #4
    c4e6:	d902      	bls.n	c4ee <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    c4e8:	f06f 0311 	mvn.w	r3, #17
    c4ec:	e01a      	b.n	c524 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    c4ee:	79bb      	ldrb	r3, [r7, #6]
    c4f0:	2b01      	cmp	r3, #1
    c4f2:	d106      	bne.n	c502 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    c4f4:	7cbb      	ldrb	r3, [r7, #18]
    c4f6:	4619      	mov	r1, r3
    c4f8:	68f8      	ldr	r0, [r7, #12]
    c4fa:	4b0d      	ldr	r3, [pc, #52]	; (c530 <_usb_d_dev_ep_stall+0x84>)
    c4fc:	4798      	blx	r3
    c4fe:	6178      	str	r0, [r7, #20]
    c500:	e00f      	b.n	c522 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    c502:	79bb      	ldrb	r3, [r7, #6]
    c504:	2b00      	cmp	r3, #0
    c506:	d106      	bne.n	c516 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    c508:	7cbb      	ldrb	r3, [r7, #18]
    c50a:	4619      	mov	r1, r3
    c50c:	68f8      	ldr	r0, [r7, #12]
    c50e:	4b09      	ldr	r3, [pc, #36]	; (c534 <_usb_d_dev_ep_stall+0x88>)
    c510:	4798      	blx	r3
    c512:	6178      	str	r0, [r7, #20]
    c514:	e005      	b.n	c522 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    c516:	7cbb      	ldrb	r3, [r7, #18]
    c518:	4619      	mov	r1, r3
    c51a:	68f8      	ldr	r0, [r7, #12]
    c51c:	4b06      	ldr	r3, [pc, #24]	; (c538 <_usb_d_dev_ep_stall+0x8c>)
    c51e:	4798      	blx	r3
    c520:	6178      	str	r0, [r7, #20]
	}
	return rc;
    c522:	697b      	ldr	r3, [r7, #20]
}
    c524:	4618      	mov	r0, r3
    c526:	3718      	adds	r7, #24
    c528:	46bd      	mov	sp, r7
    c52a:	bd80      	pop	{r7, pc}
    c52c:	0000af4d 	.word	0x0000af4d
    c530:	0000c381 	.word	0x0000c381
    c534:	0000c3d1 	.word	0x0000c3d1
    c538:	0000c351 	.word	0x0000c351

0000c53c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    c53c:	b580      	push	{r7, lr}
    c53e:	b082      	sub	sp, #8
    c540:	af00      	add	r7, sp, #0
    c542:	6078      	str	r0, [r7, #4]
    c544:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c546:	687b      	ldr	r3, [r7, #4]
    c548:	7c9b      	ldrb	r3, [r3, #18]
    c54a:	2bff      	cmp	r3, #255	; 0xff
    c54c:	d014      	beq.n	c578 <_usb_d_dev_trans_done+0x3c>
    c54e:	687b      	ldr	r3, [r7, #4]
    c550:	7cdb      	ldrb	r3, [r3, #19]
    c552:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c556:	b2db      	uxtb	r3, r3
    c558:	2b00      	cmp	r3, #0
    c55a:	d00d      	beq.n	c578 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    c55c:	687a      	ldr	r2, [r7, #4]
    c55e:	7cd3      	ldrb	r3, [r2, #19]
    c560:	f36f 1386 	bfc	r3, #6, #1
    c564:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    c566:	4b06      	ldr	r3, [pc, #24]	; (c580 <_usb_d_dev_trans_done+0x44>)
    c568:	691b      	ldr	r3, [r3, #16]
    c56a:	687a      	ldr	r2, [r7, #4]
    c56c:	7c90      	ldrb	r0, [r2, #18]
    c56e:	687a      	ldr	r2, [r7, #4]
    c570:	6892      	ldr	r2, [r2, #8]
    c572:	6839      	ldr	r1, [r7, #0]
    c574:	4798      	blx	r3
    c576:	e000      	b.n	c57a <_usb_d_dev_trans_done+0x3e>
		return;
    c578:	bf00      	nop
}
    c57a:	3708      	adds	r7, #8
    c57c:	46bd      	mov	sp, r7
    c57e:	bd80      	pop	{r7, pc}
    c580:	20002594 	.word	0x20002594

0000c584 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    c584:	b580      	push	{r7, lr}
    c586:	b086      	sub	sp, #24
    c588:	af00      	add	r7, sp, #0
    c58a:	60f8      	str	r0, [r7, #12]
    c58c:	460b      	mov	r3, r1
    c58e:	607a      	str	r2, [r7, #4]
    c590:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c592:	68fb      	ldr	r3, [r7, #12]
    c594:	7c9b      	ldrb	r3, [r3, #18]
    c596:	f003 030f 	and.w	r3, r3, #15
    c59a:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    c59c:	4b1f      	ldr	r3, [pc, #124]	; (c61c <_usb_d_dev_trans_stop+0x98>)
    c59e:	881b      	ldrh	r3, [r3, #0]
    c5a0:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c5a2:	68fb      	ldr	r3, [r7, #12]
    c5a4:	7c9b      	ldrb	r3, [r3, #18]
    c5a6:	2bff      	cmp	r3, #255	; 0xff
    c5a8:	d033      	beq.n	c612 <_usb_d_dev_trans_stop+0x8e>
    c5aa:	68fb      	ldr	r3, [r7, #12]
    c5ac:	7cdb      	ldrb	r3, [r3, #19]
    c5ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c5b2:	b2db      	uxtb	r3, r3
    c5b4:	2b00      	cmp	r3, #0
    c5b6:	d02c      	beq.n	c612 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    c5b8:	7afb      	ldrb	r3, [r7, #11]
    c5ba:	2b00      	cmp	r3, #0
    c5bc:	d006      	beq.n	c5cc <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    c5be:	7dfb      	ldrb	r3, [r7, #23]
    c5c0:	2200      	movs	r2, #0
    c5c2:	2101      	movs	r1, #1
    c5c4:	4618      	mov	r0, r3
    c5c6:	4b16      	ldr	r3, [pc, #88]	; (c620 <_usb_d_dev_trans_stop+0x9c>)
    c5c8:	4798      	blx	r3
    c5ca:	e005      	b.n	c5d8 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c5cc:	7dfb      	ldrb	r3, [r7, #23]
    c5ce:	2200      	movs	r2, #0
    c5d0:	2100      	movs	r1, #0
    c5d2:	4618      	mov	r0, r3
    c5d4:	4b13      	ldr	r3, [pc, #76]	; (c624 <_usb_d_dev_trans_stop+0xa0>)
    c5d6:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    c5d8:	7afb      	ldrb	r3, [r7, #11]
    c5da:	f107 0218 	add.w	r2, r7, #24
    c5de:	4413      	add	r3, r2
    c5e0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    c5e4:	461a      	mov	r2, r3
    c5e6:	7dfb      	ldrb	r3, [r7, #23]
    c5e8:	4611      	mov	r1, r2
    c5ea:	4618      	mov	r0, r3
    c5ec:	4b0e      	ldr	r3, [pc, #56]	; (c628 <_usb_d_dev_trans_stop+0xa4>)
    c5ee:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    c5f0:	7afb      	ldrb	r3, [r7, #11]
    c5f2:	f107 0218 	add.w	r2, r7, #24
    c5f6:	4413      	add	r3, r2
    c5f8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    c5fc:	461a      	mov	r2, r3
    c5fe:	7dfb      	ldrb	r3, [r7, #23]
    c600:	4611      	mov	r1, r2
    c602:	4618      	mov	r0, r3
    c604:	4b09      	ldr	r3, [pc, #36]	; (c62c <_usb_d_dev_trans_stop+0xa8>)
    c606:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    c608:	6879      	ldr	r1, [r7, #4]
    c60a:	68f8      	ldr	r0, [r7, #12]
    c60c:	4b08      	ldr	r3, [pc, #32]	; (c630 <_usb_d_dev_trans_stop+0xac>)
    c60e:	4798      	blx	r3
    c610:	e000      	b.n	c614 <_usb_d_dev_trans_stop+0x90>
		return;
    c612:	bf00      	nop
}
    c614:	3718      	adds	r7, #24
    c616:	46bd      	mov	sp, r7
    c618:	bd80      	pop	{r7, pc}
    c61a:	bf00      	nop
    c61c:	0001af34 	.word	0x0001af34
    c620:	0000ae39 	.word	0x0000ae39
    c624:	0000ae91 	.word	0x0000ae91
    c628:	0000a941 	.word	0x0000a941
    c62c:	0000a991 	.word	0x0000a991
    c630:	0000c53d 	.word	0x0000c53d

0000c634 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    c634:	b580      	push	{r7, lr}
    c636:	b086      	sub	sp, #24
    c638:	af00      	add	r7, sp, #0
    c63a:	4603      	mov	r3, r0
    c63c:	6039      	str	r1, [r7, #0]
    c63e:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    c640:	79fb      	ldrb	r3, [r7, #7]
    c642:	f003 030f 	and.w	r3, r3, #15
    c646:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    c648:	7dfb      	ldrb	r3, [r7, #23]
    c64a:	015b      	lsls	r3, r3, #5
    c64c:	4a1e      	ldr	r2, [pc, #120]	; (c6c8 <_usb_d_dev_ep_read_req+0x94>)
    c64e:	4413      	add	r3, r2
    c650:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    c652:	693b      	ldr	r3, [r7, #16]
    c654:	681b      	ldr	r3, [r3, #0]
    c656:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    c658:	693b      	ldr	r3, [r7, #16]
    c65a:	685b      	ldr	r3, [r3, #4]
    c65c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c660:	b29b      	uxth	r3, r3
    c662:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    c664:	7dfb      	ldrb	r3, [r7, #23]
    c666:	2b04      	cmp	r3, #4
    c668:	d802      	bhi.n	c670 <_usb_d_dev_ep_read_req+0x3c>
    c66a:	683b      	ldr	r3, [r7, #0]
    c66c:	2b00      	cmp	r3, #0
    c66e:	d102      	bne.n	c676 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    c670:	f06f 0311 	mvn.w	r3, #17
    c674:	e023      	b.n	c6be <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    c676:	7dfb      	ldrb	r3, [r7, #23]
    c678:	4618      	mov	r0, r3
    c67a:	4b14      	ldr	r3, [pc, #80]	; (c6cc <_usb_d_dev_ep_read_req+0x98>)
    c67c:	4798      	blx	r3
    c67e:	4603      	mov	r3, r0
    c680:	f083 0301 	eor.w	r3, r3, #1
    c684:	b2db      	uxtb	r3, r3
    c686:	2b00      	cmp	r3, #0
    c688:	d002      	beq.n	c690 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    c68a:	f06f 0312 	mvn.w	r3, #18
    c68e:	e016      	b.n	c6be <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    c690:	7dfb      	ldrb	r3, [r7, #23]
    c692:	4618      	mov	r0, r3
    c694:	4b0e      	ldr	r3, [pc, #56]	; (c6d0 <_usb_d_dev_ep_read_req+0x9c>)
    c696:	4798      	blx	r3
    c698:	4603      	mov	r3, r0
    c69a:	f083 0301 	eor.w	r3, r3, #1
    c69e:	b2db      	uxtb	r3, r3
    c6a0:	2b00      	cmp	r3, #0
    c6a2:	d001      	beq.n	c6a8 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    c6a4:	2300      	movs	r3, #0
    c6a6:	e00a      	b.n	c6be <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    c6a8:	68fb      	ldr	r3, [r7, #12]
    c6aa:	2208      	movs	r2, #8
    c6ac:	4619      	mov	r1, r3
    c6ae:	6838      	ldr	r0, [r7, #0]
    c6b0:	4b08      	ldr	r3, [pc, #32]	; (c6d4 <_usb_d_dev_ep_read_req+0xa0>)
    c6b2:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    c6b4:	7dfb      	ldrb	r3, [r7, #23]
    c6b6:	4618      	mov	r0, r3
    c6b8:	4b07      	ldr	r3, [pc, #28]	; (c6d8 <_usb_d_dev_ep_read_req+0xa4>)
    c6ba:	4798      	blx	r3

	return bytes;
    c6bc:	897b      	ldrh	r3, [r7, #10]
}
    c6be:	4618      	mov	r0, r3
    c6c0:	3718      	adds	r7, #24
    c6c2:	46bd      	mov	sp, r7
    c6c4:	bd80      	pop	{r7, pc}
    c6c6:	bf00      	nop
    c6c8:	2000265c 	.word	0x2000265c
    c6cc:	0000a9b9 	.word	0x0000a9b9
    c6d0:	0000ab65 	.word	0x0000ab65
    c6d4:	0001a635 	.word	0x0001a635
    c6d8:	0000ab95 	.word	0x0000ab95

0000c6dc <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    c6dc:	b580      	push	{r7, lr}
    c6de:	b086      	sub	sp, #24
    c6e0:	af00      	add	r7, sp, #0
    c6e2:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    c6e4:	687b      	ldr	r3, [r7, #4]
    c6e6:	7a1b      	ldrb	r3, [r3, #8]
    c6e8:	f003 030f 	and.w	r3, r3, #15
    c6ec:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    c6ee:	687b      	ldr	r3, [r7, #4]
    c6f0:	7a1b      	ldrb	r3, [r3, #8]
    c6f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c6f6:	2b00      	cmp	r3, #0
    c6f8:	bf14      	ite	ne
    c6fa:	2301      	movne	r3, #1
    c6fc:	2300      	moveq	r3, #0
    c6fe:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c700:	7d7a      	ldrb	r2, [r7, #21]
    c702:	7dbb      	ldrb	r3, [r7, #22]
    c704:	4611      	mov	r1, r2
    c706:	4618      	mov	r0, r3
    c708:	4b5f      	ldr	r3, [pc, #380]	; (c888 <_usb_d_dev_ep_trans+0x1ac>)
    c70a:	4798      	blx	r3
    c70c:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c70e:	693b      	ldr	r3, [r7, #16]
    c710:	8a1b      	ldrh	r3, [r3, #16]
    c712:	f240 32ff 	movw	r2, #1023	; 0x3ff
    c716:	4293      	cmp	r3, r2
    c718:	d004      	beq.n	c724 <_usb_d_dev_ep_trans+0x48>
    c71a:	693b      	ldr	r3, [r7, #16]
    c71c:	8a1b      	ldrh	r3, [r3, #16]
    c71e:	3b01      	subs	r3, #1
    c720:	b29b      	uxth	r3, r3
    c722:	e001      	b.n	c728 <_usb_d_dev_ep_trans+0x4c>
    c724:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c728:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    c72a:	687b      	ldr	r3, [r7, #4]
    c72c:	685a      	ldr	r2, [r3, #4]
    c72e:	89fb      	ldrh	r3, [r7, #14]
    c730:	4013      	ands	r3, r2
    c732:	2b00      	cmp	r3, #0
    c734:	bf14      	ite	ne
    c736:	2301      	movne	r3, #1
    c738:	2300      	moveq	r3, #0
    c73a:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    c73c:	2300      	movs	r3, #0
    c73e:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    c740:	7dbb      	ldrb	r3, [r7, #22]
    c742:	2b04      	cmp	r3, #4
    c744:	d902      	bls.n	c74c <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    c746:	f06f 0311 	mvn.w	r3, #17
    c74a:	e098      	b.n	c87e <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    c74c:	687b      	ldr	r3, [r7, #4]
    c74e:	681b      	ldr	r3, [r3, #0]
    c750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    c754:	d31a      	bcc.n	c78c <_usb_d_dev_ep_trans+0xb0>
    c756:	687b      	ldr	r3, [r7, #4]
    c758:	681b      	ldr	r3, [r3, #0]
    c75a:	461a      	mov	r2, r3
    c75c:	687b      	ldr	r3, [r7, #4]
    c75e:	685b      	ldr	r3, [r3, #4]
    c760:	4413      	add	r3, r2
    c762:	4a4a      	ldr	r2, [pc, #296]	; (c88c <_usb_d_dev_ep_trans+0x1b0>)
    c764:	4293      	cmp	r3, r2
    c766:	d811      	bhi.n	c78c <_usb_d_dev_ep_trans+0xb0>
    c768:	687b      	ldr	r3, [r7, #4]
    c76a:	681b      	ldr	r3, [r3, #0]
    c76c:	f003 0303 	and.w	r3, r3, #3
    c770:	2b00      	cmp	r3, #0
    c772:	d10b      	bne.n	c78c <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    c774:	7d7b      	ldrb	r3, [r7, #21]
    c776:	f083 0301 	eor.w	r3, r3, #1
    c77a:	b2db      	uxtb	r3, r3
    c77c:	2b00      	cmp	r3, #0
    c77e:	d00e      	beq.n	c79e <_usb_d_dev_ep_trans+0xc2>
    c780:	687b      	ldr	r3, [r7, #4]
    c782:	685b      	ldr	r3, [r3, #4]
    c784:	693a      	ldr	r2, [r7, #16]
    c786:	8a12      	ldrh	r2, [r2, #16]
    c788:	4293      	cmp	r3, r2
    c78a:	d208      	bcs.n	c79e <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    c78c:	693b      	ldr	r3, [r7, #16]
    c78e:	68db      	ldr	r3, [r3, #12]
    c790:	2b00      	cmp	r3, #0
    c792:	d102      	bne.n	c79a <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    c794:	f06f 0312 	mvn.w	r3, #18
    c798:	e071      	b.n	c87e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    c79a:	2301      	movs	r3, #1
    c79c:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    c79e:	7d7b      	ldrb	r3, [r7, #21]
    c7a0:	f083 0301 	eor.w	r3, r3, #1
    c7a4:	b2db      	uxtb	r3, r3
    c7a6:	2b00      	cmp	r3, #0
    c7a8:	d009      	beq.n	c7be <_usb_d_dev_ep_trans+0xe2>
    c7aa:	7b7b      	ldrb	r3, [r7, #13]
    c7ac:	2b00      	cmp	r3, #0
    c7ae:	d006      	beq.n	c7be <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    c7b0:	693b      	ldr	r3, [r7, #16]
    c7b2:	68db      	ldr	r3, [r3, #12]
    c7b4:	2b00      	cmp	r3, #0
    c7b6:	d102      	bne.n	c7be <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    c7b8:	f06f 0311 	mvn.w	r3, #17
    c7bc:	e05f      	b.n	c87e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    c7be:	693b      	ldr	r3, [r7, #16]
    c7c0:	7cdb      	ldrb	r3, [r3, #19]
    c7c2:	f003 0308 	and.w	r3, r3, #8
    c7c6:	b2db      	uxtb	r3, r3
    c7c8:	2b00      	cmp	r3, #0
    c7ca:	d001      	beq.n	c7d0 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    c7cc:	2302      	movs	r3, #2
    c7ce:	e056      	b.n	c87e <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    c7d0:	f107 0308 	add.w	r3, r7, #8
    c7d4:	4618      	mov	r0, r3
    c7d6:	4b2e      	ldr	r3, [pc, #184]	; (c890 <_usb_d_dev_ep_trans+0x1b4>)
    c7d8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    c7da:	693b      	ldr	r3, [r7, #16]
    c7dc:	7cdb      	ldrb	r3, [r3, #19]
    c7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c7e2:	b2db      	uxtb	r3, r3
    c7e4:	2b00      	cmp	r3, #0
    c7e6:	d006      	beq.n	c7f6 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    c7e8:	f107 0308 	add.w	r3, r7, #8
    c7ec:	4618      	mov	r0, r3
    c7ee:	4b29      	ldr	r3, [pc, #164]	; (c894 <_usb_d_dev_ep_trans+0x1b8>)
    c7f0:	4798      	blx	r3
		return USB_BUSY;
    c7f2:	2301      	movs	r3, #1
    c7f4:	e043      	b.n	c87e <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    c7f6:	693a      	ldr	r2, [r7, #16]
    c7f8:	7cd3      	ldrb	r3, [r2, #19]
    c7fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c7fe:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    c800:	f107 0308 	add.w	r3, r7, #8
    c804:	4618      	mov	r0, r3
    c806:	4b23      	ldr	r3, [pc, #140]	; (c894 <_usb_d_dev_ep_trans+0x1b8>)
    c808:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    c80a:	687b      	ldr	r3, [r7, #4]
    c80c:	681a      	ldr	r2, [r3, #0]
    c80e:	693b      	ldr	r3, [r7, #16]
    c810:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    c812:	687b      	ldr	r3, [r7, #4]
    c814:	685a      	ldr	r2, [r3, #4]
    c816:	693b      	ldr	r3, [r7, #16]
    c818:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    c81a:	693b      	ldr	r3, [r7, #16]
    c81c:	2200      	movs	r2, #0
    c81e:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    c820:	693a      	ldr	r2, [r7, #16]
    c822:	7cd3      	ldrb	r3, [r2, #19]
    c824:	7d79      	ldrb	r1, [r7, #21]
    c826:	f361 13c7 	bfi	r3, r1, #7, #1
    c82a:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    c82c:	693a      	ldr	r2, [r7, #16]
    c82e:	7cd3      	ldrb	r3, [r2, #19]
    c830:	7df9      	ldrb	r1, [r7, #23]
    c832:	f361 1345 	bfi	r3, r1, #5, #1
    c836:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    c838:	687b      	ldr	r3, [r7, #4]
    c83a:	7a5b      	ldrb	r3, [r3, #9]
    c83c:	2b00      	cmp	r3, #0
    c83e:	d007      	beq.n	c850 <_usb_d_dev_ep_trans+0x174>
    c840:	7b7b      	ldrb	r3, [r7, #13]
    c842:	f083 0301 	eor.w	r3, r3, #1
    c846:	b2db      	uxtb	r3, r3
    c848:	2b00      	cmp	r3, #0
    c84a:	d001      	beq.n	c850 <_usb_d_dev_ep_trans+0x174>
    c84c:	2301      	movs	r3, #1
    c84e:	e000      	b.n	c852 <_usb_d_dev_ep_trans+0x176>
    c850:	2300      	movs	r3, #0
    c852:	b2db      	uxtb	r3, r3
    c854:	f003 0301 	and.w	r3, r3, #1
    c858:	b2d9      	uxtb	r1, r3
    c85a:	693a      	ldr	r2, [r7, #16]
    c85c:	7cd3      	ldrb	r3, [r2, #19]
    c85e:	f361 1304 	bfi	r3, r1, #4, #1
    c862:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    c864:	7d7b      	ldrb	r3, [r7, #21]
    c866:	2b00      	cmp	r3, #0
    c868:	d004      	beq.n	c874 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    c86a:	2100      	movs	r1, #0
    c86c:	6938      	ldr	r0, [r7, #16]
    c86e:	4b0a      	ldr	r3, [pc, #40]	; (c898 <_usb_d_dev_ep_trans+0x1bc>)
    c870:	4798      	blx	r3
    c872:	e003      	b.n	c87c <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    c874:	2100      	movs	r1, #0
    c876:	6938      	ldr	r0, [r7, #16]
    c878:	4b08      	ldr	r3, [pc, #32]	; (c89c <_usb_d_dev_ep_trans+0x1c0>)
    c87a:	4798      	blx	r3
	}

	return ERR_NONE;
    c87c:	2300      	movs	r3, #0
}
    c87e:	4618      	mov	r0, r3
    c880:	3718      	adds	r7, #24
    c882:	46bd      	mov	sp, r7
    c884:	bd80      	pop	{r7, pc}
    c886:	bf00      	nop
    c888:	0000af4d 	.word	0x0000af4d
    c88c:	20041fff 	.word	0x20041fff
    c890:	0000d0a9 	.word	0x0000d0a9
    c894:	0000d0cf 	.word	0x0000d0cf
    c898:	0000b215 	.word	0x0000b215
    c89c:	0000b42d 	.word	0x0000b42d

0000c8a0 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    c8a0:	b580      	push	{r7, lr}
    c8a2:	b084      	sub	sp, #16
    c8a4:	af00      	add	r7, sp, #0
    c8a6:	4603      	mov	r3, r0
    c8a8:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    c8aa:	79fb      	ldrb	r3, [r7, #7]
    c8ac:	f003 030f 	and.w	r3, r3, #15
    c8b0:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    c8b2:	79fb      	ldrb	r3, [r7, #7]
    c8b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c8b8:	2b00      	cmp	r3, #0
    c8ba:	bf14      	ite	ne
    c8bc:	2301      	movne	r3, #1
    c8be:	2300      	moveq	r3, #0
    c8c0:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c8c2:	7bba      	ldrb	r2, [r7, #14]
    c8c4:	7bfb      	ldrb	r3, [r7, #15]
    c8c6:	4611      	mov	r1, r2
    c8c8:	4618      	mov	r0, r3
    c8ca:	4b08      	ldr	r3, [pc, #32]	; (c8ec <_usb_d_dev_ep_abort+0x4c>)
    c8cc:	4798      	blx	r3
    c8ce:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    c8d0:	7bfb      	ldrb	r3, [r7, #15]
    c8d2:	2b04      	cmp	r3, #4
    c8d4:	d806      	bhi.n	c8e4 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    c8d6:	7bbb      	ldrb	r3, [r7, #14]
    c8d8:	2202      	movs	r2, #2
    c8da:	4619      	mov	r1, r3
    c8dc:	68b8      	ldr	r0, [r7, #8]
    c8de:	4b04      	ldr	r3, [pc, #16]	; (c8f0 <_usb_d_dev_ep_abort+0x50>)
    c8e0:	4798      	blx	r3
    c8e2:	e000      	b.n	c8e6 <_usb_d_dev_ep_abort+0x46>
		return;
    c8e4:	bf00      	nop
}
    c8e6:	3710      	adds	r7, #16
    c8e8:	46bd      	mov	sp, r7
    c8ea:	bd80      	pop	{r7, pc}
    c8ec:	0000af4d 	.word	0x0000af4d
    c8f0:	0000c585 	.word	0x0000c585

0000c8f4 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    c8f4:	b480      	push	{r7}
    c8f6:	b085      	sub	sp, #20
    c8f8:	af00      	add	r7, sp, #0
    c8fa:	4603      	mov	r3, r0
    c8fc:	6039      	str	r1, [r7, #0]
    c8fe:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    c900:	683b      	ldr	r3, [r7, #0]
    c902:	2b00      	cmp	r3, #0
    c904:	d001      	beq.n	c90a <_usb_d_dev_register_callback+0x16>
    c906:	683b      	ldr	r3, [r7, #0]
    c908:	e000      	b.n	c90c <_usb_d_dev_register_callback+0x18>
    c90a:	4b0a      	ldr	r3, [pc, #40]	; (c934 <_usb_d_dev_register_callback+0x40>)
    c90c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    c90e:	79fb      	ldrb	r3, [r7, #7]
    c910:	2b01      	cmp	r3, #1
    c912:	d103      	bne.n	c91c <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    c914:	4a08      	ldr	r2, [pc, #32]	; (c938 <_usb_d_dev_register_callback+0x44>)
    c916:	68fb      	ldr	r3, [r7, #12]
    c918:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    c91a:	e005      	b.n	c928 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    c91c:	79fb      	ldrb	r3, [r7, #7]
    c91e:	2b00      	cmp	r3, #0
    c920:	d102      	bne.n	c928 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    c922:	4a05      	ldr	r2, [pc, #20]	; (c938 <_usb_d_dev_register_callback+0x44>)
    c924:	68fb      	ldr	r3, [r7, #12]
    c926:	6013      	str	r3, [r2, #0]
}
    c928:	bf00      	nop
    c92a:	3714      	adds	r7, #20
    c92c:	46bd      	mov	sp, r7
    c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c932:	4770      	bx	lr
    c934:	0000a7d5 	.word	0x0000a7d5
    c938:	20002594 	.word	0x20002594

0000c93c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    c93c:	b480      	push	{r7}
    c93e:	b085      	sub	sp, #20
    c940:	af00      	add	r7, sp, #0
    c942:	4603      	mov	r3, r0
    c944:	6039      	str	r1, [r7, #0]
    c946:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    c948:	683b      	ldr	r3, [r7, #0]
    c94a:	2b00      	cmp	r3, #0
    c94c:	d001      	beq.n	c952 <_usb_d_dev_register_ep_callback+0x16>
    c94e:	683b      	ldr	r3, [r7, #0]
    c950:	e000      	b.n	c954 <_usb_d_dev_register_ep_callback+0x18>
    c952:	4b0e      	ldr	r3, [pc, #56]	; (c98c <_usb_d_dev_register_ep_callback+0x50>)
    c954:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    c956:	79fb      	ldrb	r3, [r7, #7]
    c958:	2b00      	cmp	r3, #0
    c95a:	d103      	bne.n	c964 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    c95c:	4a0c      	ldr	r2, [pc, #48]	; (c990 <_usb_d_dev_register_ep_callback+0x54>)
    c95e:	68fb      	ldr	r3, [r7, #12]
    c960:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    c962:	e00c      	b.n	c97e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    c964:	79fb      	ldrb	r3, [r7, #7]
    c966:	2b01      	cmp	r3, #1
    c968:	d103      	bne.n	c972 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    c96a:	4a09      	ldr	r2, [pc, #36]	; (c990 <_usb_d_dev_register_ep_callback+0x54>)
    c96c:	68fb      	ldr	r3, [r7, #12]
    c96e:	60d3      	str	r3, [r2, #12]
}
    c970:	e005      	b.n	c97e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    c972:	79fb      	ldrb	r3, [r7, #7]
    c974:	2b02      	cmp	r3, #2
    c976:	d102      	bne.n	c97e <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    c978:	4a05      	ldr	r2, [pc, #20]	; (c990 <_usb_d_dev_register_ep_callback+0x54>)
    c97a:	68fb      	ldr	r3, [r7, #12]
    c97c:	6113      	str	r3, [r2, #16]
}
    c97e:	bf00      	nop
    c980:	3714      	adds	r7, #20
    c982:	46bd      	mov	sp, r7
    c984:	f85d 7b04 	ldr.w	r7, [sp], #4
    c988:	4770      	bx	lr
    c98a:	bf00      	nop
    c98c:	0000a7d5 	.word	0x0000a7d5
    c990:	20002594 	.word	0x20002594

0000c994 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    c994:	b580      	push	{r7, lr}
    c996:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c998:	4b01      	ldr	r3, [pc, #4]	; (c9a0 <USB_0_Handler+0xc>)
    c99a:	4798      	blx	r3
}
    c99c:	bf00      	nop
    c99e:	bd80      	pop	{r7, pc}
    c9a0:	0000bc05 	.word	0x0000bc05

0000c9a4 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    c9a4:	b580      	push	{r7, lr}
    c9a6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c9a8:	4b01      	ldr	r3, [pc, #4]	; (c9b0 <USB_1_Handler+0xc>)
    c9aa:	4798      	blx	r3
}
    c9ac:	bf00      	nop
    c9ae:	bd80      	pop	{r7, pc}
    c9b0:	0000bc05 	.word	0x0000bc05

0000c9b4 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    c9b4:	b580      	push	{r7, lr}
    c9b6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c9b8:	4b01      	ldr	r3, [pc, #4]	; (c9c0 <USB_2_Handler+0xc>)
    c9ba:	4798      	blx	r3
}
    c9bc:	bf00      	nop
    c9be:	bd80      	pop	{r7, pc}
    c9c0:	0000bc05 	.word	0x0000bc05

0000c9c4 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    c9c4:	b580      	push	{r7, lr}
    c9c6:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    c9c8:	4b01      	ldr	r3, [pc, #4]	; (c9d0 <USB_3_Handler+0xc>)
    c9ca:	4798      	blx	r3
}
    c9cc:	bf00      	nop
    c9ce:	bd80      	pop	{r7, pc}
    c9d0:	0000bc05 	.word	0x0000bc05

0000c9d4 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    c9d4:	b480      	push	{r7}
    c9d6:	b083      	sub	sp, #12
    c9d8:	af00      	add	r7, sp, #0
    c9da:	6078      	str	r0, [r7, #4]
    c9dc:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    c9de:	bf00      	nop
    c9e0:	687b      	ldr	r3, [r7, #4]
    c9e2:	689a      	ldr	r2, [r3, #8]
    c9e4:	683b      	ldr	r3, [r7, #0]
    c9e6:	4013      	ands	r3, r2
    c9e8:	2b00      	cmp	r3, #0
    c9ea:	d1f9      	bne.n	c9e0 <hri_wdt_wait_for_sync+0xc>
	};
}
    c9ec:	bf00      	nop
    c9ee:	370c      	adds	r7, #12
    c9f0:	46bd      	mov	sp, r7
    c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9f6:	4770      	bx	lr

0000c9f8 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    c9f8:	b580      	push	{r7, lr}
    c9fa:	b084      	sub	sp, #16
    c9fc:	af00      	add	r7, sp, #0
    c9fe:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ca00:	210e      	movs	r1, #14
    ca02:	6878      	ldr	r0, [r7, #4]
    ca04:	4b0a      	ldr	r3, [pc, #40]	; (ca30 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    ca06:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ca08:	687b      	ldr	r3, [r7, #4]
    ca0a:	781b      	ldrb	r3, [r3, #0]
    ca0c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    ca0e:	7bfb      	ldrb	r3, [r7, #15]
    ca10:	085b      	lsrs	r3, r3, #1
    ca12:	b2db      	uxtb	r3, r3
    ca14:	f003 0301 	and.w	r3, r3, #1
    ca18:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ca1a:	7bfb      	ldrb	r3, [r7, #15]
    ca1c:	2b00      	cmp	r3, #0
    ca1e:	bf14      	ite	ne
    ca20:	2301      	movne	r3, #1
    ca22:	2300      	moveq	r3, #0
    ca24:	b2db      	uxtb	r3, r3
}
    ca26:	4618      	mov	r0, r3
    ca28:	3710      	adds	r7, #16
    ca2a:	46bd      	mov	sp, r7
    ca2c:	bd80      	pop	{r7, pc}
    ca2e:	bf00      	nop
    ca30:	0000c9d5 	.word	0x0000c9d5

0000ca34 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    ca34:	b580      	push	{r7, lr}
    ca36:	b082      	sub	sp, #8
    ca38:	af00      	add	r7, sp, #0
    ca3a:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    ca3c:	687b      	ldr	r3, [r7, #4]
    ca3e:	781b      	ldrb	r3, [r3, #0]
    ca40:	b2db      	uxtb	r3, r3
    ca42:	f023 0304 	bic.w	r3, r3, #4
    ca46:	b2da      	uxtb	r2, r3
    ca48:	687b      	ldr	r3, [r7, #4]
    ca4a:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ca4c:	210e      	movs	r1, #14
    ca4e:	6878      	ldr	r0, [r7, #4]
    ca50:	4b02      	ldr	r3, [pc, #8]	; (ca5c <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    ca52:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    ca54:	bf00      	nop
    ca56:	3708      	adds	r7, #8
    ca58:	46bd      	mov	sp, r7
    ca5a:	bd80      	pop	{r7, pc}
    ca5c:	0000c9d5 	.word	0x0000c9d5

0000ca60 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    ca60:	b580      	push	{r7, lr}
    ca62:	b084      	sub	sp, #16
    ca64:	af00      	add	r7, sp, #0
    ca66:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ca68:	210e      	movs	r1, #14
    ca6a:	6878      	ldr	r0, [r7, #4]
    ca6c:	4b08      	ldr	r3, [pc, #32]	; (ca90 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    ca6e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ca70:	687b      	ldr	r3, [r7, #4]
    ca72:	781b      	ldrb	r3, [r3, #0]
    ca74:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    ca76:	7bfb      	ldrb	r3, [r7, #15]
    ca78:	09db      	lsrs	r3, r3, #7
    ca7a:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ca7c:	7bfb      	ldrb	r3, [r7, #15]
    ca7e:	2b00      	cmp	r3, #0
    ca80:	bf14      	ite	ne
    ca82:	2301      	movne	r3, #1
    ca84:	2300      	moveq	r3, #0
    ca86:	b2db      	uxtb	r3, r3
}
    ca88:	4618      	mov	r0, r3
    ca8a:	3710      	adds	r7, #16
    ca8c:	46bd      	mov	sp, r7
    ca8e:	bd80      	pop	{r7, pc}
    ca90:	0000c9d5 	.word	0x0000c9d5

0000ca94 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    ca94:	b480      	push	{r7}
    ca96:	b085      	sub	sp, #20
    ca98:	af00      	add	r7, sp, #0
    ca9a:	6078      	str	r0, [r7, #4]
    ca9c:	460b      	mov	r3, r1
    ca9e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    caa0:	687b      	ldr	r3, [r7, #4]
    caa2:	785b      	ldrb	r3, [r3, #1]
    caa4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    caa6:	7bfb      	ldrb	r3, [r7, #15]
    caa8:	f023 030f 	bic.w	r3, r3, #15
    caac:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    caae:	78fb      	ldrb	r3, [r7, #3]
    cab0:	f003 030f 	and.w	r3, r3, #15
    cab4:	b2da      	uxtb	r2, r3
    cab6:	7bfb      	ldrb	r3, [r7, #15]
    cab8:	4313      	orrs	r3, r2
    caba:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    cabc:	687b      	ldr	r3, [r7, #4]
    cabe:	7bfa      	ldrb	r2, [r7, #15]
    cac0:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    cac2:	bf00      	nop
    cac4:	3714      	adds	r7, #20
    cac6:	46bd      	mov	sp, r7
    cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
    cacc:	4770      	bx	lr
	...

0000cad0 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    cad0:	b580      	push	{r7, lr}
    cad2:	b082      	sub	sp, #8
    cad4:	af00      	add	r7, sp, #0
    cad6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    cad8:	687b      	ldr	r3, [r7, #4]
    cada:	2b00      	cmp	r3, #0
    cadc:	d005      	beq.n	caea <_wdt_init+0x1a>
    cade:	687b      	ldr	r3, [r7, #4]
    cae0:	681b      	ldr	r3, [r3, #0]
    cae2:	2b00      	cmp	r3, #0
    cae4:	d001      	beq.n	caea <_wdt_init+0x1a>
    cae6:	2301      	movs	r3, #1
    cae8:	e000      	b.n	caec <_wdt_init+0x1c>
    caea:	2300      	movs	r3, #0
    caec:	f003 0301 	and.w	r3, r3, #1
    caf0:	b2db      	uxtb	r3, r3
    caf2:	2250      	movs	r2, #80	; 0x50
    caf4:	4913      	ldr	r1, [pc, #76]	; (cb44 <_wdt_init+0x74>)
    caf6:	4618      	mov	r0, r3
    caf8:	4b13      	ldr	r3, [pc, #76]	; (cb48 <_wdt_init+0x78>)
    cafa:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    cafc:	687b      	ldr	r3, [r7, #4]
    cafe:	681b      	ldr	r3, [r3, #0]
    cb00:	4618      	mov	r0, r3
    cb02:	4b12      	ldr	r3, [pc, #72]	; (cb4c <_wdt_init+0x7c>)
    cb04:	4798      	blx	r3
    cb06:	4603      	mov	r3, r0
    cb08:	2b00      	cmp	r3, #0
    cb0a:	d107      	bne.n	cb1c <_wdt_init+0x4c>
    cb0c:	687b      	ldr	r3, [r7, #4]
    cb0e:	681b      	ldr	r3, [r3, #0]
    cb10:	4618      	mov	r0, r3
    cb12:	4b0f      	ldr	r3, [pc, #60]	; (cb50 <_wdt_init+0x80>)
    cb14:	4798      	blx	r3
    cb16:	4603      	mov	r3, r0
    cb18:	2b00      	cmp	r3, #0
    cb1a:	d002      	beq.n	cb22 <_wdt_init+0x52>
		return ERR_DENIED;
    cb1c:	f06f 0310 	mvn.w	r3, #16
    cb20:	e00b      	b.n	cb3a <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    cb22:	687b      	ldr	r3, [r7, #4]
    cb24:	681b      	ldr	r3, [r3, #0]
    cb26:	4618      	mov	r0, r3
    cb28:	4b0a      	ldr	r3, [pc, #40]	; (cb54 <_wdt_init+0x84>)
    cb2a:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    cb2c:	687b      	ldr	r3, [r7, #4]
    cb2e:	681b      	ldr	r3, [r3, #0]
    cb30:	210b      	movs	r1, #11
    cb32:	4618      	mov	r0, r3
    cb34:	4b08      	ldr	r3, [pc, #32]	; (cb58 <_wdt_init+0x88>)
    cb36:	4798      	blx	r3
	}

	return ERR_NONE;
    cb38:	2300      	movs	r3, #0
}
    cb3a:	4618      	mov	r0, r3
    cb3c:	3708      	adds	r7, #8
    cb3e:	46bd      	mov	sp, r7
    cb40:	bd80      	pop	{r7, pc}
    cb42:	bf00      	nop
    cb44:	0001af38 	.word	0x0001af38
    cb48:	00004c81 	.word	0x00004c81
    cb4c:	0000ca61 	.word	0x0000ca61
    cb50:	0000c9f9 	.word	0x0000c9f9
    cb54:	0000ca35 	.word	0x0000ca35
    cb58:	0000ca95 	.word	0x0000ca95

0000cb5c <hri_port_set_DIR_reg>:
{
    cb5c:	b480      	push	{r7}
    cb5e:	b085      	sub	sp, #20
    cb60:	af00      	add	r7, sp, #0
    cb62:	60f8      	str	r0, [r7, #12]
    cb64:	460b      	mov	r3, r1
    cb66:	607a      	str	r2, [r7, #4]
    cb68:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    cb6a:	7afb      	ldrb	r3, [r7, #11]
    cb6c:	68fa      	ldr	r2, [r7, #12]
    cb6e:	01db      	lsls	r3, r3, #7
    cb70:	4413      	add	r3, r2
    cb72:	3308      	adds	r3, #8
    cb74:	687a      	ldr	r2, [r7, #4]
    cb76:	601a      	str	r2, [r3, #0]
}
    cb78:	bf00      	nop
    cb7a:	3714      	adds	r7, #20
    cb7c:	46bd      	mov	sp, r7
    cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb82:	4770      	bx	lr

0000cb84 <hri_port_clear_DIR_reg>:
{
    cb84:	b480      	push	{r7}
    cb86:	b085      	sub	sp, #20
    cb88:	af00      	add	r7, sp, #0
    cb8a:	60f8      	str	r0, [r7, #12]
    cb8c:	460b      	mov	r3, r1
    cb8e:	607a      	str	r2, [r7, #4]
    cb90:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    cb92:	7afb      	ldrb	r3, [r7, #11]
    cb94:	68fa      	ldr	r2, [r7, #12]
    cb96:	01db      	lsls	r3, r3, #7
    cb98:	4413      	add	r3, r2
    cb9a:	3304      	adds	r3, #4
    cb9c:	687a      	ldr	r2, [r7, #4]
    cb9e:	601a      	str	r2, [r3, #0]
}
    cba0:	bf00      	nop
    cba2:	3714      	adds	r7, #20
    cba4:	46bd      	mov	sp, r7
    cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbaa:	4770      	bx	lr

0000cbac <hri_port_set_OUT_reg>:
{
    cbac:	b480      	push	{r7}
    cbae:	b085      	sub	sp, #20
    cbb0:	af00      	add	r7, sp, #0
    cbb2:	60f8      	str	r0, [r7, #12]
    cbb4:	460b      	mov	r3, r1
    cbb6:	607a      	str	r2, [r7, #4]
    cbb8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    cbba:	7afb      	ldrb	r3, [r7, #11]
    cbbc:	68fa      	ldr	r2, [r7, #12]
    cbbe:	01db      	lsls	r3, r3, #7
    cbc0:	4413      	add	r3, r2
    cbc2:	3318      	adds	r3, #24
    cbc4:	687a      	ldr	r2, [r7, #4]
    cbc6:	601a      	str	r2, [r3, #0]
}
    cbc8:	bf00      	nop
    cbca:	3714      	adds	r7, #20
    cbcc:	46bd      	mov	sp, r7
    cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbd2:	4770      	bx	lr

0000cbd4 <hri_port_clear_OUT_reg>:
{
    cbd4:	b480      	push	{r7}
    cbd6:	b085      	sub	sp, #20
    cbd8:	af00      	add	r7, sp, #0
    cbda:	60f8      	str	r0, [r7, #12]
    cbdc:	460b      	mov	r3, r1
    cbde:	607a      	str	r2, [r7, #4]
    cbe0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    cbe2:	7afb      	ldrb	r3, [r7, #11]
    cbe4:	68fa      	ldr	r2, [r7, #12]
    cbe6:	01db      	lsls	r3, r3, #7
    cbe8:	4413      	add	r3, r2
    cbea:	3314      	adds	r3, #20
    cbec:	687a      	ldr	r2, [r7, #4]
    cbee:	601a      	str	r2, [r3, #0]
}
    cbf0:	bf00      	nop
    cbf2:	3714      	adds	r7, #20
    cbf4:	46bd      	mov	sp, r7
    cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbfa:	4770      	bx	lr

0000cbfc <hri_port_write_PMUX_PMUXE_bf>:
{
    cbfc:	b480      	push	{r7}
    cbfe:	b085      	sub	sp, #20
    cc00:	af00      	add	r7, sp, #0
    cc02:	6078      	str	r0, [r7, #4]
    cc04:	4608      	mov	r0, r1
    cc06:	4611      	mov	r1, r2
    cc08:	461a      	mov	r2, r3
    cc0a:	4603      	mov	r3, r0
    cc0c:	70fb      	strb	r3, [r7, #3]
    cc0e:	460b      	mov	r3, r1
    cc10:	70bb      	strb	r3, [r7, #2]
    cc12:	4613      	mov	r3, r2
    cc14:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    cc16:	78fa      	ldrb	r2, [r7, #3]
    cc18:	78bb      	ldrb	r3, [r7, #2]
    cc1a:	6879      	ldr	r1, [r7, #4]
    cc1c:	01d2      	lsls	r2, r2, #7
    cc1e:	440a      	add	r2, r1
    cc20:	4413      	add	r3, r2
    cc22:	3330      	adds	r3, #48	; 0x30
    cc24:	781b      	ldrb	r3, [r3, #0]
    cc26:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    cc28:	7bfb      	ldrb	r3, [r7, #15]
    cc2a:	f023 030f 	bic.w	r3, r3, #15
    cc2e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    cc30:	787b      	ldrb	r3, [r7, #1]
    cc32:	f003 030f 	and.w	r3, r3, #15
    cc36:	b2da      	uxtb	r2, r3
    cc38:	7bfb      	ldrb	r3, [r7, #15]
    cc3a:	4313      	orrs	r3, r2
    cc3c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    cc3e:	78fa      	ldrb	r2, [r7, #3]
    cc40:	78bb      	ldrb	r3, [r7, #2]
    cc42:	6879      	ldr	r1, [r7, #4]
    cc44:	01d2      	lsls	r2, r2, #7
    cc46:	440a      	add	r2, r1
    cc48:	4413      	add	r3, r2
    cc4a:	3330      	adds	r3, #48	; 0x30
    cc4c:	7bfa      	ldrb	r2, [r7, #15]
    cc4e:	701a      	strb	r2, [r3, #0]
}
    cc50:	bf00      	nop
    cc52:	3714      	adds	r7, #20
    cc54:	46bd      	mov	sp, r7
    cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc5a:	4770      	bx	lr

0000cc5c <hri_port_write_PMUX_PMUXO_bf>:
{
    cc5c:	b480      	push	{r7}
    cc5e:	b085      	sub	sp, #20
    cc60:	af00      	add	r7, sp, #0
    cc62:	6078      	str	r0, [r7, #4]
    cc64:	4608      	mov	r0, r1
    cc66:	4611      	mov	r1, r2
    cc68:	461a      	mov	r2, r3
    cc6a:	4603      	mov	r3, r0
    cc6c:	70fb      	strb	r3, [r7, #3]
    cc6e:	460b      	mov	r3, r1
    cc70:	70bb      	strb	r3, [r7, #2]
    cc72:	4613      	mov	r3, r2
    cc74:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    cc76:	78fa      	ldrb	r2, [r7, #3]
    cc78:	78bb      	ldrb	r3, [r7, #2]
    cc7a:	6879      	ldr	r1, [r7, #4]
    cc7c:	01d2      	lsls	r2, r2, #7
    cc7e:	440a      	add	r2, r1
    cc80:	4413      	add	r3, r2
    cc82:	3330      	adds	r3, #48	; 0x30
    cc84:	781b      	ldrb	r3, [r3, #0]
    cc86:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    cc88:	7bfb      	ldrb	r3, [r7, #15]
    cc8a:	f003 030f 	and.w	r3, r3, #15
    cc8e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    cc90:	787b      	ldrb	r3, [r7, #1]
    cc92:	011b      	lsls	r3, r3, #4
    cc94:	b2da      	uxtb	r2, r3
    cc96:	7bfb      	ldrb	r3, [r7, #15]
    cc98:	4313      	orrs	r3, r2
    cc9a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    cc9c:	78fa      	ldrb	r2, [r7, #3]
    cc9e:	78bb      	ldrb	r3, [r7, #2]
    cca0:	6879      	ldr	r1, [r7, #4]
    cca2:	01d2      	lsls	r2, r2, #7
    cca4:	440a      	add	r2, r1
    cca6:	4413      	add	r3, r2
    cca8:	3330      	adds	r3, #48	; 0x30
    ccaa:	7bfa      	ldrb	r2, [r7, #15]
    ccac:	701a      	strb	r2, [r3, #0]
}
    ccae:	bf00      	nop
    ccb0:	3714      	adds	r7, #20
    ccb2:	46bd      	mov	sp, r7
    ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    ccb8:	4770      	bx	lr

0000ccba <hri_port_write_PINCFG_PMUXEN_bit>:
{
    ccba:	b480      	push	{r7}
    ccbc:	b085      	sub	sp, #20
    ccbe:	af00      	add	r7, sp, #0
    ccc0:	6078      	str	r0, [r7, #4]
    ccc2:	4608      	mov	r0, r1
    ccc4:	4611      	mov	r1, r2
    ccc6:	461a      	mov	r2, r3
    ccc8:	4603      	mov	r3, r0
    ccca:	70fb      	strb	r3, [r7, #3]
    cccc:	460b      	mov	r3, r1
    ccce:	70bb      	strb	r3, [r7, #2]
    ccd0:	4613      	mov	r3, r2
    ccd2:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ccd4:	78fa      	ldrb	r2, [r7, #3]
    ccd6:	78bb      	ldrb	r3, [r7, #2]
    ccd8:	6879      	ldr	r1, [r7, #4]
    ccda:	01d2      	lsls	r2, r2, #7
    ccdc:	440a      	add	r2, r1
    ccde:	4413      	add	r3, r2
    cce0:	3340      	adds	r3, #64	; 0x40
    cce2:	781b      	ldrb	r3, [r3, #0]
    cce4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    cce6:	7bfb      	ldrb	r3, [r7, #15]
    cce8:	f023 0301 	bic.w	r3, r3, #1
    ccec:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    ccee:	787a      	ldrb	r2, [r7, #1]
    ccf0:	7bfb      	ldrb	r3, [r7, #15]
    ccf2:	4313      	orrs	r3, r2
    ccf4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ccf6:	78fa      	ldrb	r2, [r7, #3]
    ccf8:	78bb      	ldrb	r3, [r7, #2]
    ccfa:	6879      	ldr	r1, [r7, #4]
    ccfc:	01d2      	lsls	r2, r2, #7
    ccfe:	440a      	add	r2, r1
    cd00:	4413      	add	r3, r2
    cd02:	3340      	adds	r3, #64	; 0x40
    cd04:	7bfa      	ldrb	r2, [r7, #15]
    cd06:	701a      	strb	r2, [r3, #0]
}
    cd08:	bf00      	nop
    cd0a:	3714      	adds	r7, #20
    cd0c:	46bd      	mov	sp, r7
    cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd12:	4770      	bx	lr

0000cd14 <hri_port_write_WRCONFIG_reg>:
{
    cd14:	b480      	push	{r7}
    cd16:	b085      	sub	sp, #20
    cd18:	af00      	add	r7, sp, #0
    cd1a:	60f8      	str	r0, [r7, #12]
    cd1c:	460b      	mov	r3, r1
    cd1e:	607a      	str	r2, [r7, #4]
    cd20:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    cd22:	7afb      	ldrb	r3, [r7, #11]
    cd24:	68fa      	ldr	r2, [r7, #12]
    cd26:	01db      	lsls	r3, r3, #7
    cd28:	4413      	add	r3, r2
    cd2a:	3328      	adds	r3, #40	; 0x28
    cd2c:	687a      	ldr	r2, [r7, #4]
    cd2e:	601a      	str	r2, [r3, #0]
}
    cd30:	bf00      	nop
    cd32:	3714      	adds	r7, #20
    cd34:	46bd      	mov	sp, r7
    cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd3a:	4770      	bx	lr

0000cd3c <_gpio_set_direction>:
{
    cd3c:	b580      	push	{r7, lr}
    cd3e:	b082      	sub	sp, #8
    cd40:	af00      	add	r7, sp, #0
    cd42:	4603      	mov	r3, r0
    cd44:	6039      	str	r1, [r7, #0]
    cd46:	71fb      	strb	r3, [r7, #7]
    cd48:	4613      	mov	r3, r2
    cd4a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    cd4c:	79bb      	ldrb	r3, [r7, #6]
    cd4e:	2b01      	cmp	r3, #1
    cd50:	d01c      	beq.n	cd8c <_gpio_set_direction+0x50>
    cd52:	2b02      	cmp	r3, #2
    cd54:	d037      	beq.n	cdc6 <_gpio_set_direction+0x8a>
    cd56:	2b00      	cmp	r3, #0
    cd58:	d14e      	bne.n	cdf8 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    cd5a:	79fb      	ldrb	r3, [r7, #7]
    cd5c:	683a      	ldr	r2, [r7, #0]
    cd5e:	4619      	mov	r1, r3
    cd60:	482a      	ldr	r0, [pc, #168]	; (ce0c <_gpio_set_direction+0xd0>)
    cd62:	4b2b      	ldr	r3, [pc, #172]	; (ce10 <_gpio_set_direction+0xd4>)
    cd64:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    cd66:	683b      	ldr	r3, [r7, #0]
    cd68:	b29b      	uxth	r3, r3
    cd6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    cd6e:	79fb      	ldrb	r3, [r7, #7]
    cd70:	4619      	mov	r1, r3
    cd72:	4826      	ldr	r0, [pc, #152]	; (ce0c <_gpio_set_direction+0xd0>)
    cd74:	4b27      	ldr	r3, [pc, #156]	; (ce14 <_gpio_set_direction+0xd8>)
    cd76:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    cd78:	683b      	ldr	r3, [r7, #0]
    cd7a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    cd7c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    cd80:	79fb      	ldrb	r3, [r7, #7]
    cd82:	4619      	mov	r1, r3
    cd84:	4821      	ldr	r0, [pc, #132]	; (ce0c <_gpio_set_direction+0xd0>)
    cd86:	4b23      	ldr	r3, [pc, #140]	; (ce14 <_gpio_set_direction+0xd8>)
    cd88:	4798      	blx	r3
		break;
    cd8a:	e03a      	b.n	ce02 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    cd8c:	79fb      	ldrb	r3, [r7, #7]
    cd8e:	683a      	ldr	r2, [r7, #0]
    cd90:	4619      	mov	r1, r3
    cd92:	481e      	ldr	r0, [pc, #120]	; (ce0c <_gpio_set_direction+0xd0>)
    cd94:	4b1e      	ldr	r3, [pc, #120]	; (ce10 <_gpio_set_direction+0xd4>)
    cd96:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    cd98:	683b      	ldr	r3, [r7, #0]
    cd9a:	b29b      	uxth	r3, r3
    cd9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    cda0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    cda4:	79f9      	ldrb	r1, [r7, #7]
    cda6:	461a      	mov	r2, r3
    cda8:	4818      	ldr	r0, [pc, #96]	; (ce0c <_gpio_set_direction+0xd0>)
    cdaa:	4b1a      	ldr	r3, [pc, #104]	; (ce14 <_gpio_set_direction+0xd8>)
    cdac:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    cdae:	683b      	ldr	r3, [r7, #0]
    cdb0:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    cdb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    cdb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    cdba:	79f9      	ldrb	r1, [r7, #7]
    cdbc:	461a      	mov	r2, r3
    cdbe:	4813      	ldr	r0, [pc, #76]	; (ce0c <_gpio_set_direction+0xd0>)
    cdc0:	4b14      	ldr	r3, [pc, #80]	; (ce14 <_gpio_set_direction+0xd8>)
    cdc2:	4798      	blx	r3
		break;
    cdc4:	e01d      	b.n	ce02 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    cdc6:	79fb      	ldrb	r3, [r7, #7]
    cdc8:	683a      	ldr	r2, [r7, #0]
    cdca:	4619      	mov	r1, r3
    cdcc:	480f      	ldr	r0, [pc, #60]	; (ce0c <_gpio_set_direction+0xd0>)
    cdce:	4b12      	ldr	r3, [pc, #72]	; (ce18 <_gpio_set_direction+0xdc>)
    cdd0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    cdd2:	683b      	ldr	r3, [r7, #0]
    cdd4:	b29b      	uxth	r3, r3
    cdd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    cdda:	79fb      	ldrb	r3, [r7, #7]
    cddc:	4619      	mov	r1, r3
    cdde:	480b      	ldr	r0, [pc, #44]	; (ce0c <_gpio_set_direction+0xd0>)
    cde0:	4b0c      	ldr	r3, [pc, #48]	; (ce14 <_gpio_set_direction+0xd8>)
    cde2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    cde4:	683b      	ldr	r3, [r7, #0]
    cde6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    cde8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    cdec:	79fb      	ldrb	r3, [r7, #7]
    cdee:	4619      	mov	r1, r3
    cdf0:	4806      	ldr	r0, [pc, #24]	; (ce0c <_gpio_set_direction+0xd0>)
    cdf2:	4b08      	ldr	r3, [pc, #32]	; (ce14 <_gpio_set_direction+0xd8>)
    cdf4:	4798      	blx	r3
		break;
    cdf6:	e004      	b.n	ce02 <_gpio_set_direction+0xc6>
		ASSERT(false);
    cdf8:	2246      	movs	r2, #70	; 0x46
    cdfa:	4908      	ldr	r1, [pc, #32]	; (ce1c <_gpio_set_direction+0xe0>)
    cdfc:	2000      	movs	r0, #0
    cdfe:	4b08      	ldr	r3, [pc, #32]	; (ce20 <_gpio_set_direction+0xe4>)
    ce00:	4798      	blx	r3
}
    ce02:	bf00      	nop
    ce04:	3708      	adds	r7, #8
    ce06:	46bd      	mov	sp, r7
    ce08:	bd80      	pop	{r7, pc}
    ce0a:	bf00      	nop
    ce0c:	41008000 	.word	0x41008000
    ce10:	0000cb85 	.word	0x0000cb85
    ce14:	0000cd15 	.word	0x0000cd15
    ce18:	0000cb5d 	.word	0x0000cb5d
    ce1c:	0001af50 	.word	0x0001af50
    ce20:	00004c81 	.word	0x00004c81

0000ce24 <_gpio_set_level>:
{
    ce24:	b580      	push	{r7, lr}
    ce26:	b082      	sub	sp, #8
    ce28:	af00      	add	r7, sp, #0
    ce2a:	4603      	mov	r3, r0
    ce2c:	6039      	str	r1, [r7, #0]
    ce2e:	71fb      	strb	r3, [r7, #7]
    ce30:	4613      	mov	r3, r2
    ce32:	71bb      	strb	r3, [r7, #6]
	if (level) {
    ce34:	79bb      	ldrb	r3, [r7, #6]
    ce36:	2b00      	cmp	r3, #0
    ce38:	d006      	beq.n	ce48 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    ce3a:	79fb      	ldrb	r3, [r7, #7]
    ce3c:	683a      	ldr	r2, [r7, #0]
    ce3e:	4619      	mov	r1, r3
    ce40:	4806      	ldr	r0, [pc, #24]	; (ce5c <_gpio_set_level+0x38>)
    ce42:	4b07      	ldr	r3, [pc, #28]	; (ce60 <_gpio_set_level+0x3c>)
    ce44:	4798      	blx	r3
}
    ce46:	e005      	b.n	ce54 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    ce48:	79fb      	ldrb	r3, [r7, #7]
    ce4a:	683a      	ldr	r2, [r7, #0]
    ce4c:	4619      	mov	r1, r3
    ce4e:	4803      	ldr	r0, [pc, #12]	; (ce5c <_gpio_set_level+0x38>)
    ce50:	4b04      	ldr	r3, [pc, #16]	; (ce64 <_gpio_set_level+0x40>)
    ce52:	4798      	blx	r3
}
    ce54:	bf00      	nop
    ce56:	3708      	adds	r7, #8
    ce58:	46bd      	mov	sp, r7
    ce5a:	bd80      	pop	{r7, pc}
    ce5c:	41008000 	.word	0x41008000
    ce60:	0000cbad 	.word	0x0000cbad
    ce64:	0000cbd5 	.word	0x0000cbd5

0000ce68 <_gpio_set_pin_function>:
{
    ce68:	b590      	push	{r4, r7, lr}
    ce6a:	b085      	sub	sp, #20
    ce6c:	af00      	add	r7, sp, #0
    ce6e:	6078      	str	r0, [r7, #4]
    ce70:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    ce72:	687b      	ldr	r3, [r7, #4]
    ce74:	095b      	lsrs	r3, r3, #5
    ce76:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    ce78:	687b      	ldr	r3, [r7, #4]
    ce7a:	b2db      	uxtb	r3, r3
    ce7c:	f003 031f 	and.w	r3, r3, #31
    ce80:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    ce82:	683b      	ldr	r3, [r7, #0]
    ce84:	f1b3 3fff 	cmp.w	r3, #4294967295
    ce88:	d106      	bne.n	ce98 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    ce8a:	7bba      	ldrb	r2, [r7, #14]
    ce8c:	7bf9      	ldrb	r1, [r7, #15]
    ce8e:	2300      	movs	r3, #0
    ce90:	4812      	ldr	r0, [pc, #72]	; (cedc <_gpio_set_pin_function+0x74>)
    ce92:	4c13      	ldr	r4, [pc, #76]	; (cee0 <_gpio_set_pin_function+0x78>)
    ce94:	47a0      	blx	r4
}
    ce96:	e01d      	b.n	ced4 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    ce98:	7bba      	ldrb	r2, [r7, #14]
    ce9a:	7bf9      	ldrb	r1, [r7, #15]
    ce9c:	2301      	movs	r3, #1
    ce9e:	480f      	ldr	r0, [pc, #60]	; (cedc <_gpio_set_pin_function+0x74>)
    cea0:	4c0f      	ldr	r4, [pc, #60]	; (cee0 <_gpio_set_pin_function+0x78>)
    cea2:	47a0      	blx	r4
		if (pin & 1) {
    cea4:	7bbb      	ldrb	r3, [r7, #14]
    cea6:	f003 0301 	and.w	r3, r3, #1
    ceaa:	2b00      	cmp	r3, #0
    ceac:	d009      	beq.n	cec2 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    ceae:	7bbb      	ldrb	r3, [r7, #14]
    ceb0:	085b      	lsrs	r3, r3, #1
    ceb2:	b2da      	uxtb	r2, r3
    ceb4:	683b      	ldr	r3, [r7, #0]
    ceb6:	b2db      	uxtb	r3, r3
    ceb8:	7bf9      	ldrb	r1, [r7, #15]
    ceba:	4808      	ldr	r0, [pc, #32]	; (cedc <_gpio_set_pin_function+0x74>)
    cebc:	4c09      	ldr	r4, [pc, #36]	; (cee4 <_gpio_set_pin_function+0x7c>)
    cebe:	47a0      	blx	r4
}
    cec0:	e008      	b.n	ced4 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    cec2:	7bbb      	ldrb	r3, [r7, #14]
    cec4:	085b      	lsrs	r3, r3, #1
    cec6:	b2da      	uxtb	r2, r3
    cec8:	683b      	ldr	r3, [r7, #0]
    ceca:	b2db      	uxtb	r3, r3
    cecc:	7bf9      	ldrb	r1, [r7, #15]
    cece:	4803      	ldr	r0, [pc, #12]	; (cedc <_gpio_set_pin_function+0x74>)
    ced0:	4c05      	ldr	r4, [pc, #20]	; (cee8 <_gpio_set_pin_function+0x80>)
    ced2:	47a0      	blx	r4
}
    ced4:	bf00      	nop
    ced6:	3714      	adds	r7, #20
    ced8:	46bd      	mov	sp, r7
    ceda:	bd90      	pop	{r4, r7, pc}
    cedc:	41008000 	.word	0x41008000
    cee0:	0000ccbb 	.word	0x0000ccbb
    cee4:	0000cc5d 	.word	0x0000cc5d
    cee8:	0000cbfd 	.word	0x0000cbfd

0000ceec <gpio_set_pin_function>:
{
    ceec:	b580      	push	{r7, lr}
    ceee:	b082      	sub	sp, #8
    cef0:	af00      	add	r7, sp, #0
    cef2:	6078      	str	r0, [r7, #4]
    cef4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    cef6:	6839      	ldr	r1, [r7, #0]
    cef8:	6878      	ldr	r0, [r7, #4]
    cefa:	4b03      	ldr	r3, [pc, #12]	; (cf08 <gpio_set_pin_function+0x1c>)
    cefc:	4798      	blx	r3
}
    cefe:	bf00      	nop
    cf00:	3708      	adds	r7, #8
    cf02:	46bd      	mov	sp, r7
    cf04:	bd80      	pop	{r7, pc}
    cf06:	bf00      	nop
    cf08:	0000ce69 	.word	0x0000ce69

0000cf0c <gpio_set_pin_direction>:
{
    cf0c:	b580      	push	{r7, lr}
    cf0e:	b082      	sub	sp, #8
    cf10:	af00      	add	r7, sp, #0
    cf12:	4603      	mov	r3, r0
    cf14:	460a      	mov	r2, r1
    cf16:	71fb      	strb	r3, [r7, #7]
    cf18:	4613      	mov	r3, r2
    cf1a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    cf1c:	79fb      	ldrb	r3, [r7, #7]
    cf1e:	095b      	lsrs	r3, r3, #5
    cf20:	b2d8      	uxtb	r0, r3
    cf22:	79fb      	ldrb	r3, [r7, #7]
    cf24:	f003 031f 	and.w	r3, r3, #31
    cf28:	2201      	movs	r2, #1
    cf2a:	fa02 f303 	lsl.w	r3, r2, r3
    cf2e:	79ba      	ldrb	r2, [r7, #6]
    cf30:	4619      	mov	r1, r3
    cf32:	4b03      	ldr	r3, [pc, #12]	; (cf40 <gpio_set_pin_direction+0x34>)
    cf34:	4798      	blx	r3
}
    cf36:	bf00      	nop
    cf38:	3708      	adds	r7, #8
    cf3a:	46bd      	mov	sp, r7
    cf3c:	bd80      	pop	{r7, pc}
    cf3e:	bf00      	nop
    cf40:	0000cd3d 	.word	0x0000cd3d

0000cf44 <gpio_set_pin_level>:
{
    cf44:	b580      	push	{r7, lr}
    cf46:	b082      	sub	sp, #8
    cf48:	af00      	add	r7, sp, #0
    cf4a:	4603      	mov	r3, r0
    cf4c:	460a      	mov	r2, r1
    cf4e:	71fb      	strb	r3, [r7, #7]
    cf50:	4613      	mov	r3, r2
    cf52:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    cf54:	79fb      	ldrb	r3, [r7, #7]
    cf56:	095b      	lsrs	r3, r3, #5
    cf58:	b2d8      	uxtb	r0, r3
    cf5a:	79fb      	ldrb	r3, [r7, #7]
    cf5c:	f003 031f 	and.w	r3, r3, #31
    cf60:	2201      	movs	r2, #1
    cf62:	fa02 f303 	lsl.w	r3, r2, r3
    cf66:	79ba      	ldrb	r2, [r7, #6]
    cf68:	4619      	mov	r1, r3
    cf6a:	4b03      	ldr	r3, [pc, #12]	; (cf78 <gpio_set_pin_level+0x34>)
    cf6c:	4798      	blx	r3
}
    cf6e:	bf00      	nop
    cf70:	3708      	adds	r7, #8
    cf72:	46bd      	mov	sp, r7
    cf74:	bd80      	pop	{r7, pc}
    cf76:	bf00      	nop
    cf78:	0000ce25 	.word	0x0000ce25

0000cf7c <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    cf7c:	b580      	push	{r7, lr}
    cf7e:	b082      	sub	sp, #8
    cf80:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    cf82:	2100      	movs	r1, #0
    cf84:	2008      	movs	r0, #8
    cf86:	4b24      	ldr	r3, [pc, #144]	; (d018 <QSPI_N25Q256_exit_xip+0x9c>)
    cf88:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    cf8a:	2100      	movs	r1, #0
    cf8c:	202b      	movs	r0, #43	; 0x2b
    cf8e:	4b22      	ldr	r3, [pc, #136]	; (d018 <QSPI_N25Q256_exit_xip+0x9c>)
    cf90:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    cf92:	2100      	movs	r1, #0
    cf94:	202a      	movs	r0, #42	; 0x2a
    cf96:	4b20      	ldr	r3, [pc, #128]	; (d018 <QSPI_N25Q256_exit_xip+0x9c>)
    cf98:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    cf9a:	2102      	movs	r1, #2
    cf9c:	2008      	movs	r0, #8
    cf9e:	4b1f      	ldr	r3, [pc, #124]	; (d01c <QSPI_N25Q256_exit_xip+0xa0>)
    cfa0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    cfa2:	2102      	movs	r1, #2
    cfa4:	202b      	movs	r0, #43	; 0x2b
    cfa6:	4b1d      	ldr	r3, [pc, #116]	; (d01c <QSPI_N25Q256_exit_xip+0xa0>)
    cfa8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    cfaa:	2102      	movs	r1, #2
    cfac:	202a      	movs	r0, #42	; 0x2a
    cfae:	4b1b      	ldr	r3, [pc, #108]	; (d01c <QSPI_N25Q256_exit_xip+0xa0>)
    cfb0:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    cfb2:	2101      	movs	r1, #1
    cfb4:	2008      	movs	r0, #8
    cfb6:	4b1a      	ldr	r3, [pc, #104]	; (d020 <QSPI_N25Q256_exit_xip+0xa4>)
    cfb8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    cfba:	2100      	movs	r1, #0
    cfbc:	202b      	movs	r0, #43	; 0x2b
    cfbe:	4b18      	ldr	r3, [pc, #96]	; (d020 <QSPI_N25Q256_exit_xip+0xa4>)
    cfc0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    cfc2:	2100      	movs	r1, #0
    cfc4:	202a      	movs	r0, #42	; 0x2a
    cfc6:	4b16      	ldr	r3, [pc, #88]	; (d020 <QSPI_N25Q256_exit_xip+0xa4>)
    cfc8:	4798      	blx	r3

	delay_us(1);
    cfca:	2001      	movs	r0, #1
    cfcc:	4b15      	ldr	r3, [pc, #84]	; (d024 <QSPI_N25Q256_exit_xip+0xa8>)
    cfce:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    cfd0:	2300      	movs	r3, #0
    cfd2:	607b      	str	r3, [r7, #4]
    cfd4:	e010      	b.n	cff8 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    cfd6:	2101      	movs	r1, #1
    cfd8:	202a      	movs	r0, #42	; 0x2a
    cfda:	4b11      	ldr	r3, [pc, #68]	; (d020 <QSPI_N25Q256_exit_xip+0xa4>)
    cfdc:	4798      	blx	r3
		delay_us(1);
    cfde:	2001      	movs	r0, #1
    cfe0:	4b10      	ldr	r3, [pc, #64]	; (d024 <QSPI_N25Q256_exit_xip+0xa8>)
    cfe2:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    cfe4:	2100      	movs	r1, #0
    cfe6:	202a      	movs	r0, #42	; 0x2a
    cfe8:	4b0d      	ldr	r3, [pc, #52]	; (d020 <QSPI_N25Q256_exit_xip+0xa4>)
    cfea:	4798      	blx	r3
		delay_us(1);
    cfec:	2001      	movs	r0, #1
    cfee:	4b0d      	ldr	r3, [pc, #52]	; (d024 <QSPI_N25Q256_exit_xip+0xa8>)
    cff0:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    cff2:	687b      	ldr	r3, [r7, #4]
    cff4:	3301      	adds	r3, #1
    cff6:	607b      	str	r3, [r7, #4]
    cff8:	687b      	ldr	r3, [r7, #4]
    cffa:	2b06      	cmp	r3, #6
    cffc:	ddeb      	ble.n	cfd6 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    cffe:	2101      	movs	r1, #1
    d000:	202b      	movs	r0, #43	; 0x2b
    d002:	4b07      	ldr	r3, [pc, #28]	; (d020 <QSPI_N25Q256_exit_xip+0xa4>)
    d004:	4798      	blx	r3
	delay_us(1);
    d006:	2001      	movs	r0, #1
    d008:	4b06      	ldr	r3, [pc, #24]	; (d024 <QSPI_N25Q256_exit_xip+0xa8>)
    d00a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    d00c:	4b06      	ldr	r3, [pc, #24]	; (d028 <QSPI_N25Q256_exit_xip+0xac>)
    d00e:	4798      	blx	r3
}
    d010:	bf00      	nop
    d012:	3708      	adds	r7, #8
    d014:	46bd      	mov	sp, r7
    d016:	bd80      	pop	{r7, pc}
    d018:	0000ceed 	.word	0x0000ceed
    d01c:	0000cf0d 	.word	0x0000cf0d
    d020:	0000cf45 	.word	0x0000cf45
    d024:	000035f1 	.word	0x000035f1
    d028:	000022e9 	.word	0x000022e9

0000d02c <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    d02c:	b598      	push	{r3, r4, r7, lr}
    d02e:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    d030:	4806      	ldr	r0, [pc, #24]	; (d04c <spi_nor_flash_init+0x20>)
    d032:	4b07      	ldr	r3, [pc, #28]	; (d050 <spi_nor_flash_init+0x24>)
    d034:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    d036:	2300      	movs	r3, #0
    d038:	4a06      	ldr	r2, [pc, #24]	; (d054 <spi_nor_flash_init+0x28>)
    d03a:	4904      	ldr	r1, [pc, #16]	; (d04c <spi_nor_flash_init+0x20>)
    d03c:	4806      	ldr	r0, [pc, #24]	; (d058 <spi_nor_flash_init+0x2c>)
    d03e:	4c07      	ldr	r4, [pc, #28]	; (d05c <spi_nor_flash_init+0x30>)
    d040:	47a0      	blx	r4
    d042:	4602      	mov	r2, r0
    d044:	4b06      	ldr	r3, [pc, #24]	; (d060 <spi_nor_flash_init+0x34>)
    d046:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    d048:	bf00      	nop
    d04a:	bd98      	pop	{r3, r4, r7, pc}
    d04c:	2000df58 	.word	0x2000df58
    d050:	00003b29 	.word	0x00003b29
    d054:	0000cf7d 	.word	0x0000cf7d
    d058:	200026fc 	.word	0x200026fc
    d05c:	0000d499 	.word	0x0000d499
    d060:	2000e158 	.word	0x2000e158

0000d064 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    d064:	b580      	push	{r7, lr}
    d066:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    d068:	4805      	ldr	r0, [pc, #20]	; (d080 <cdc_device_acm_init+0x1c>)
    d06a:	4b06      	ldr	r3, [pc, #24]	; (d084 <cdc_device_acm_init+0x20>)
    d06c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    d06e:	4b06      	ldr	r3, [pc, #24]	; (d088 <cdc_device_acm_init+0x24>)
    d070:	4798      	blx	r3

	usbdc_start(single_desc);
    d072:	4806      	ldr	r0, [pc, #24]	; (d08c <cdc_device_acm_init+0x28>)
    d074:	4b06      	ldr	r3, [pc, #24]	; (d090 <cdc_device_acm_init+0x2c>)
    d076:	4798      	blx	r3
	usbdc_attach();
    d078:	4b06      	ldr	r3, [pc, #24]	; (d094 <cdc_device_acm_init+0x30>)
    d07a:	4798      	blx	r3
}
    d07c:	bf00      	nop
    d07e:	bd80      	pop	{r7, pc}
    d080:	2000274c 	.word	0x2000274c
    d084:	0000ebc1 	.word	0x0000ebc1
    d088:	0000de39 	.word	0x0000de39
    d08c:	20000200 	.word	0x20000200
    d090:	0000ec5d 	.word	0x0000ec5d
    d094:	0000ecad 	.word	0x0000ecad

0000d098 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    d098:	b580      	push	{r7, lr}
    d09a:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    d09c:	4b01      	ldr	r3, [pc, #4]	; (d0a4 <usb_init+0xc>)
    d09e:	4798      	blx	r3
}
    d0a0:	bf00      	nop
    d0a2:	bd80      	pop	{r7, pc}
    d0a4:	0000d065 	.word	0x0000d065

0000d0a8 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    d0a8:	b480      	push	{r7}
    d0aa:	b085      	sub	sp, #20
    d0ac:	af00      	add	r7, sp, #0
    d0ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d0b0:	f3ef 8310 	mrs	r3, PRIMASK
    d0b4:	60fb      	str	r3, [r7, #12]
  return(result);
    d0b6:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    d0b8:	687b      	ldr	r3, [r7, #4]
    d0ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    d0bc:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    d0be:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    d0c2:	bf00      	nop
    d0c4:	3714      	adds	r7, #20
    d0c6:	46bd      	mov	sp, r7
    d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0cc:	4770      	bx	lr

0000d0ce <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    d0ce:	b480      	push	{r7}
    d0d0:	b085      	sub	sp, #20
    d0d2:	af00      	add	r7, sp, #0
    d0d4:	6078      	str	r0, [r7, #4]
    d0d6:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    d0da:	687b      	ldr	r3, [r7, #4]
    d0dc:	681b      	ldr	r3, [r3, #0]
    d0de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    d0e0:	68fb      	ldr	r3, [r7, #12]
    d0e2:	f383 8810 	msr	PRIMASK, r3
}
    d0e6:	bf00      	nop
    d0e8:	3714      	adds	r7, #20
    d0ea:	46bd      	mov	sp, r7
    d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0f0:	4770      	bx	lr
	...

0000d0f4 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    d0f4:	b580      	push	{r7, lr}
    d0f6:	b08c      	sub	sp, #48	; 0x30
    d0f8:	af00      	add	r7, sp, #0
    d0fa:	6078      	str	r0, [r7, #4]
    d0fc:	460b      	mov	r3, r1
    d0fe:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d100:	687b      	ldr	r3, [r7, #4]
    d102:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d104:	687b      	ldr	r3, [r7, #4]
    d106:	681b      	ldr	r3, [r3, #0]
    d108:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    d10a:	f107 030c 	add.w	r3, r7, #12
    d10e:	2200      	movs	r2, #0
    d110:	601a      	str	r2, [r3, #0]
    d112:	605a      	str	r2, [r3, #4]
    d114:	609a      	str	r2, [r3, #8]
    d116:	60da      	str	r2, [r3, #12]
    d118:	611a      	str	r2, [r3, #16]
    d11a:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d11e:	7b1b      	ldrb	r3, [r3, #12]
    d120:	2b00      	cmp	r3, #0
    d122:	d001      	beq.n	d128 <n25q256a_xip_confirm+0x34>
    d124:	2206      	movs	r2, #6
    d126:	e000      	b.n	d12a <n25q256a_xip_confirm+0x36>
    d128:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    d12a:	7b3b      	ldrb	r3, [r7, #12]
    d12c:	f362 0302 	bfi	r3, r2, #0, #3
    d130:	733b      	strb	r3, [r7, #12]
    d132:	7b3b      	ldrb	r3, [r7, #12]
    d134:	f043 0310 	orr.w	r3, r3, #16
    d138:	733b      	strb	r3, [r7, #12]
    d13a:	7b3b      	ldrb	r3, [r7, #12]
    d13c:	f043 0320 	orr.w	r3, r3, #32
    d140:	733b      	strb	r3, [r7, #12]
    d142:	7b3b      	ldrb	r3, [r7, #12]
    d144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d148:	733b      	strb	r3, [r7, #12]
    d14a:	7b3b      	ldrb	r3, [r7, #12]
    d14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d150:	733b      	strb	r3, [r7, #12]
    d152:	7b7b      	ldrb	r3, [r7, #13]
    d154:	f043 0303 	orr.w	r3, r3, #3
    d158:	737b      	strb	r3, [r7, #13]
    d15a:	7b7b      	ldrb	r3, [r7, #13]
    d15c:	2201      	movs	r2, #1
    d15e:	f362 1305 	bfi	r3, r2, #4, #2
    d162:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    d164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d166:	7b1b      	ldrb	r3, [r3, #12]
    d168:	2b00      	cmp	r3, #0
    d16a:	d001      	beq.n	d170 <n25q256a_xip_confirm+0x7c>
    d16c:	2208      	movs	r2, #8
    d16e:	e000      	b.n	d172 <n25q256a_xip_confirm+0x7e>
    d170:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    d172:	7bbb      	ldrb	r3, [r7, #14]
    d174:	f362 0304 	bfi	r3, r2, #0, #5
    d178:	73bb      	strb	r3, [r7, #14]
    d17a:	230b      	movs	r3, #11
    d17c:	743b      	strb	r3, [r7, #16]
    d17e:	78fb      	ldrb	r3, [r7, #3]
    d180:	2b00      	cmp	r3, #0
    d182:	d001      	beq.n	d188 <n25q256a_xip_confirm+0x94>
    d184:	2300      	movs	r3, #0
    d186:	e000      	b.n	d18a <n25q256a_xip_confirm+0x96>
    d188:	23ff      	movs	r3, #255	; 0xff
    d18a:	747b      	strb	r3, [r7, #17]
    d18c:	2301      	movs	r3, #1
    d18e:	61bb      	str	r3, [r7, #24]
    d190:	f107 0327 	add.w	r3, r7, #39	; 0x27
    d194:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    d196:	f107 030c 	add.w	r3, r7, #12
    d19a:	4619      	mov	r1, r3
    d19c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d19e:	4b07      	ldr	r3, [pc, #28]	; (d1bc <n25q256a_xip_confirm+0xc8>)
    d1a0:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    d1a2:	78fb      	ldrb	r3, [r7, #3]
    d1a4:	2b00      	cmp	r3, #0
    d1a6:	d001      	beq.n	d1ac <n25q256a_xip_confirm+0xb8>
    d1a8:	2202      	movs	r2, #2
    d1aa:	e000      	b.n	d1ae <n25q256a_xip_confirm+0xba>
    d1ac:	2201      	movs	r2, #1
    d1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d1b0:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    d1b2:	2300      	movs	r3, #0
}
    d1b4:	4618      	mov	r0, r3
    d1b6:	3730      	adds	r7, #48	; 0x30
    d1b8:	46bd      	mov	sp, r7
    d1ba:	bd80      	pop	{r7, pc}
    d1bc:	00003ba1 	.word	0x00003ba1

0000d1c0 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    d1c0:	b580      	push	{r7, lr}
    d1c2:	b08c      	sub	sp, #48	; 0x30
    d1c4:	af00      	add	r7, sp, #0
    d1c6:	6078      	str	r0, [r7, #4]
    d1c8:	460b      	mov	r3, r1
    d1ca:	70fb      	strb	r3, [r7, #3]
    d1cc:	4613      	mov	r3, r2
    d1ce:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    d1d0:	2300      	movs	r3, #0
    d1d2:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    d1d4:	687b      	ldr	r3, [r7, #4]
    d1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    d1d8:	687b      	ldr	r3, [r7, #4]
    d1da:	681b      	ldr	r3, [r3, #0]
    d1dc:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    d1de:	f107 030c 	add.w	r3, r7, #12
    d1e2:	2200      	movs	r2, #0
    d1e4:	601a      	str	r2, [r3, #0]
    d1e6:	605a      	str	r2, [r3, #4]
    d1e8:	609a      	str	r2, [r3, #8]
    d1ea:	60da      	str	r2, [r3, #12]
    d1ec:	611a      	str	r2, [r3, #16]
    d1ee:	615a      	str	r2, [r3, #20]
    d1f0:	78fb      	ldrb	r3, [r7, #3]
    d1f2:	f003 0307 	and.w	r3, r3, #7
    d1f6:	b2da      	uxtb	r2, r3
    d1f8:	7b3b      	ldrb	r3, [r7, #12]
    d1fa:	f362 0302 	bfi	r3, r2, #0, #3
    d1fe:	733b      	strb	r3, [r7, #12]
    d200:	7b3b      	ldrb	r3, [r7, #12]
    d202:	f043 0310 	orr.w	r3, r3, #16
    d206:	733b      	strb	r3, [r7, #12]
    d208:	7b3b      	ldrb	r3, [r7, #12]
    d20a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d20e:	733b      	strb	r3, [r7, #12]
    d210:	78bb      	ldrb	r3, [r7, #2]
    d212:	743b      	strb	r3, [r7, #16]
    d214:	2301      	movs	r3, #1
    d216:	61bb      	str	r3, [r7, #24]
    d218:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d21c:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    d21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d220:	7b5b      	ldrb	r3, [r3, #13]
    d222:	2b00      	cmp	r3, #0
    d224:	d003      	beq.n	d22e <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    d226:	2100      	movs	r1, #0
    d228:	6878      	ldr	r0, [r7, #4]
    d22a:	4b0a      	ldr	r3, [pc, #40]	; (d254 <n25q256a_read_reg+0x94>)
    d22c:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    d22e:	f107 030c 	add.w	r3, r7, #12
    d232:	4619      	mov	r1, r3
    d234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d236:	4b08      	ldr	r3, [pc, #32]	; (d258 <n25q256a_read_reg+0x98>)
    d238:	4798      	blx	r3
	if (n25q->xip_mode) {
    d23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d23c:	7b5b      	ldrb	r3, [r3, #13]
    d23e:	2b00      	cmp	r3, #0
    d240:	d003      	beq.n	d24a <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    d242:	2101      	movs	r1, #1
    d244:	6878      	ldr	r0, [r7, #4]
    d246:	4b03      	ldr	r3, [pc, #12]	; (d254 <n25q256a_read_reg+0x94>)
    d248:	4798      	blx	r3
	}
	return status;
    d24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d24c:	4618      	mov	r0, r3
    d24e:	3730      	adds	r7, #48	; 0x30
    d250:	46bd      	mov	sp, r7
    d252:	bd80      	pop	{r7, pc}
    d254:	0000d0f5 	.word	0x0000d0f5
    d258:	00003ba1 	.word	0x00003ba1

0000d25c <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    d25c:	b580      	push	{r7, lr}
    d25e:	b08c      	sub	sp, #48	; 0x30
    d260:	af00      	add	r7, sp, #0
    d262:	60f8      	str	r0, [r7, #12]
    d264:	607b      	str	r3, [r7, #4]
    d266:	460b      	mov	r3, r1
    d268:	72fb      	strb	r3, [r7, #11]
    d26a:	4613      	mov	r3, r2
    d26c:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d26e:	68fb      	ldr	r3, [r7, #12]
    d270:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d272:	68fb      	ldr	r3, [r7, #12]
    d274:	681b      	ldr	r3, [r3, #0]
    d276:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    d278:	f107 0310 	add.w	r3, r7, #16
    d27c:	2200      	movs	r2, #0
    d27e:	601a      	str	r2, [r3, #0]
    d280:	605a      	str	r2, [r3, #4]
    d282:	609a      	str	r2, [r3, #8]
    d284:	60da      	str	r2, [r3, #12]
    d286:	611a      	str	r2, [r3, #16]
    d288:	615a      	str	r2, [r3, #20]
    d28a:	7afb      	ldrb	r3, [r7, #11]
    d28c:	f003 0307 	and.w	r3, r3, #7
    d290:	b2da      	uxtb	r2, r3
    d292:	7c3b      	ldrb	r3, [r7, #16]
    d294:	f362 0302 	bfi	r3, r2, #0, #3
    d298:	743b      	strb	r3, [r7, #16]
    d29a:	7c3b      	ldrb	r3, [r7, #16]
    d29c:	f043 0310 	orr.w	r3, r3, #16
    d2a0:	743b      	strb	r3, [r7, #16]
    d2a2:	7c3b      	ldrb	r3, [r7, #16]
    d2a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d2a8:	743b      	strb	r3, [r7, #16]
    d2aa:	7c7b      	ldrb	r3, [r7, #17]
    d2ac:	2202      	movs	r2, #2
    d2ae:	f362 1305 	bfi	r3, r2, #4, #2
    d2b2:	747b      	strb	r3, [r7, #17]
    d2b4:	7abb      	ldrb	r3, [r7, #10]
    d2b6:	753b      	strb	r3, [r7, #20]
    d2b8:	2301      	movs	r3, #1
    d2ba:	61fb      	str	r3, [r7, #28]
    d2bc:	1d3b      	adds	r3, r7, #4
    d2be:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    d2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2c2:	7b5b      	ldrb	r3, [r3, #13]
    d2c4:	2b00      	cmp	r3, #0
    d2c6:	d003      	beq.n	d2d0 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    d2c8:	2100      	movs	r1, #0
    d2ca:	68f8      	ldr	r0, [r7, #12]
    d2cc:	4b09      	ldr	r3, [pc, #36]	; (d2f4 <n25q256a_write_reg+0x98>)
    d2ce:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    d2d0:	f107 0310 	add.w	r3, r7, #16
    d2d4:	4619      	mov	r1, r3
    d2d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d2d8:	4b07      	ldr	r3, [pc, #28]	; (d2f8 <n25q256a_write_reg+0x9c>)
    d2da:	4798      	blx	r3
	if (n25q->xip_mode) {
    d2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2de:	7b5b      	ldrb	r3, [r3, #13]
    d2e0:	2b00      	cmp	r3, #0
    d2e2:	d003      	beq.n	d2ec <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    d2e4:	2101      	movs	r1, #1
    d2e6:	68f8      	ldr	r0, [r7, #12]
    d2e8:	4b02      	ldr	r3, [pc, #8]	; (d2f4 <n25q256a_write_reg+0x98>)
    d2ea:	4798      	blx	r3
	}
}
    d2ec:	bf00      	nop
    d2ee:	3730      	adds	r7, #48	; 0x30
    d2f0:	46bd      	mov	sp, r7
    d2f2:	bd80      	pop	{r7, pc}
    d2f4:	0000d0f5 	.word	0x0000d0f5
    d2f8:	00003ba1 	.word	0x00003ba1

0000d2fc <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    d2fc:	b580      	push	{r7, lr}
    d2fe:	b090      	sub	sp, #64	; 0x40
    d300:	af00      	add	r7, sp, #0
    d302:	6078      	str	r0, [r7, #4]
    d304:	460b      	mov	r3, r1
    d306:	70fb      	strb	r3, [r7, #3]
    d308:	4613      	mov	r3, r2
    d30a:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d30c:	687b      	ldr	r3, [r7, #4]
    d30e:	681b      	ldr	r3, [r3, #0]
    d310:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    d312:	78bb      	ldrb	r3, [r7, #2]
    d314:	2b00      	cmp	r3, #0
    d316:	d001      	beq.n	d31c <n25q256a_write_enable+0x20>
    d318:	2306      	movs	r3, #6
    d31a:	e000      	b.n	d31e <n25q256a_write_enable+0x22>
    d31c:	2304      	movs	r3, #4
    d31e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    d322:	f107 0320 	add.w	r3, r7, #32
    d326:	2200      	movs	r2, #0
    d328:	601a      	str	r2, [r3, #0]
    d32a:	605a      	str	r2, [r3, #4]
    d32c:	609a      	str	r2, [r3, #8]
    d32e:	60da      	str	r2, [r3, #12]
    d330:	611a      	str	r2, [r3, #16]
    d332:	615a      	str	r2, [r3, #20]
    d334:	78fb      	ldrb	r3, [r7, #3]
    d336:	f003 0307 	and.w	r3, r3, #7
    d33a:	b2da      	uxtb	r2, r3
    d33c:	f897 3020 	ldrb.w	r3, [r7, #32]
    d340:	f362 0302 	bfi	r3, r2, #0, #3
    d344:	f887 3020 	strb.w	r3, [r7, #32]
    d348:	f897 3020 	ldrb.w	r3, [r7, #32]
    d34c:	f043 0310 	orr.w	r3, r3, #16
    d350:	f887 3020 	strb.w	r3, [r7, #32]
    d354:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    d358:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    d35c:	f107 0308 	add.w	r3, r7, #8
    d360:	2200      	movs	r2, #0
    d362:	601a      	str	r2, [r3, #0]
    d364:	605a      	str	r2, [r3, #4]
    d366:	609a      	str	r2, [r3, #8]
    d368:	60da      	str	r2, [r3, #12]
    d36a:	611a      	str	r2, [r3, #16]
    d36c:	615a      	str	r2, [r3, #20]
    d36e:	78fb      	ldrb	r3, [r7, #3]
    d370:	f003 0307 	and.w	r3, r3, #7
    d374:	b2da      	uxtb	r2, r3
    d376:	7a3b      	ldrb	r3, [r7, #8]
    d378:	f362 0302 	bfi	r3, r2, #0, #3
    d37c:	723b      	strb	r3, [r7, #8]
    d37e:	7a3b      	ldrb	r3, [r7, #8]
    d380:	f043 0310 	orr.w	r3, r3, #16
    d384:	723b      	strb	r3, [r7, #8]
    d386:	7a3b      	ldrb	r3, [r7, #8]
    d388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d38c:	723b      	strb	r3, [r7, #8]
    d38e:	2305      	movs	r3, #5
    d390:	733b      	strb	r3, [r7, #12]
    d392:	2301      	movs	r3, #1
    d394:	617b      	str	r3, [r7, #20]
    d396:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    d39a:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    d39c:	f107 0320 	add.w	r3, r7, #32
    d3a0:	4619      	mov	r1, r3
    d3a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    d3a4:	4b08      	ldr	r3, [pc, #32]	; (d3c8 <n25q256a_write_enable+0xcc>)
    d3a6:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    d3a8:	f107 0308 	add.w	r3, r7, #8
    d3ac:	4619      	mov	r1, r3
    d3ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    d3b0:	4b05      	ldr	r3, [pc, #20]	; (d3c8 <n25q256a_write_enable+0xcc>)
    d3b2:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    d3b4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    d3b8:	f003 0302 	and.w	r3, r3, #2
    d3bc:	2b00      	cmp	r3, #0
    d3be:	d0ed      	beq.n	d39c <n25q256a_write_enable+0xa0>
}
    d3c0:	bf00      	nop
    d3c2:	3740      	adds	r7, #64	; 0x40
    d3c4:	46bd      	mov	sp, r7
    d3c6:	bd80      	pop	{r7, pc}
    d3c8:	00003ba1 	.word	0x00003ba1

0000d3cc <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    d3cc:	b590      	push	{r4, r7, lr}
    d3ce:	b087      	sub	sp, #28
    d3d0:	af00      	add	r7, sp, #0
    d3d2:	6078      	str	r0, [r7, #4]
    d3d4:	460b      	mov	r3, r1
    d3d6:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    d3d8:	687b      	ldr	r3, [r7, #4]
    d3da:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d3dc:	68fb      	ldr	r3, [r7, #12]
    d3de:	7b1b      	ldrb	r3, [r3, #12]
    d3e0:	2b00      	cmp	r3, #0
    d3e2:	d001      	beq.n	d3e8 <n25q256a_switch_mode+0x1c>
    d3e4:	2306      	movs	r3, #6
    d3e6:	e000      	b.n	d3ea <n25q256a_switch_mode+0x1e>
    d3e8:	2300      	movs	r3, #0
    d3ea:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    d3ec:	7afb      	ldrb	r3, [r7, #11]
    d3ee:	2265      	movs	r2, #101	; 0x65
    d3f0:	4619      	mov	r1, r3
    d3f2:	6878      	ldr	r0, [r7, #4]
    d3f4:	4b25      	ldr	r3, [pc, #148]	; (d48c <n25q256a_switch_mode+0xc0>)
    d3f6:	4798      	blx	r3
    d3f8:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    d3fa:	2300      	movs	r3, #0
    d3fc:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    d3fe:	68fb      	ldr	r3, [r7, #12]
    d400:	7b1b      	ldrb	r3, [r3, #12]
    d402:	78fa      	ldrb	r2, [r7, #3]
    d404:	429a      	cmp	r2, r3
    d406:	d03d      	beq.n	d484 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    d408:	78fb      	ldrb	r3, [r7, #3]
    d40a:	2b00      	cmp	r3, #0
    d40c:	d00b      	beq.n	d426 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    d40e:	697b      	ldr	r3, [r7, #20]
    d410:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d414:	2b00      	cmp	r3, #0
    d416:	d011      	beq.n	d43c <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    d418:	697b      	ldr	r3, [r7, #20]
    d41a:	f003 031f 	and.w	r3, r3, #31
    d41e:	617b      	str	r3, [r7, #20]
			modify = 1;
    d420:	2301      	movs	r3, #1
    d422:	74fb      	strb	r3, [r7, #19]
    d424:	e00a      	b.n	d43c <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    d426:	697b      	ldr	r3, [r7, #20]
    d428:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d42c:	2b00      	cmp	r3, #0
    d42e:	d105      	bne.n	d43c <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    d430:	697b      	ldr	r3, [r7, #20]
    d432:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    d436:	617b      	str	r3, [r7, #20]
			modify = 1;
    d438:	2301      	movs	r3, #1
    d43a:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    d43c:	7cfb      	ldrb	r3, [r7, #19]
    d43e:	2b00      	cmp	r3, #0
    d440:	d021      	beq.n	d486 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    d442:	68fb      	ldr	r3, [r7, #12]
    d444:	78fa      	ldrb	r2, [r7, #3]
    d446:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    d448:	7afb      	ldrb	r3, [r7, #11]
    d44a:	2201      	movs	r2, #1
    d44c:	4619      	mov	r1, r3
    d44e:	6878      	ldr	r0, [r7, #4]
    d450:	4b0f      	ldr	r3, [pc, #60]	; (d490 <n25q256a_switch_mode+0xc4>)
    d452:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    d454:	7af9      	ldrb	r1, [r7, #11]
    d456:	697b      	ldr	r3, [r7, #20]
    d458:	2261      	movs	r2, #97	; 0x61
    d45a:	6878      	ldr	r0, [r7, #4]
    d45c:	4c0d      	ldr	r4, [pc, #52]	; (d494 <n25q256a_switch_mode+0xc8>)
    d45e:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d460:	78fb      	ldrb	r3, [r7, #3]
    d462:	2b00      	cmp	r3, #0
    d464:	d001      	beq.n	d46a <n25q256a_switch_mode+0x9e>
    d466:	2306      	movs	r3, #6
    d468:	e000      	b.n	d46c <n25q256a_switch_mode+0xa0>
    d46a:	2300      	movs	r3, #0
    d46c:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    d46e:	7afb      	ldrb	r3, [r7, #11]
    d470:	2265      	movs	r2, #101	; 0x65
    d472:	4619      	mov	r1, r3
    d474:	6878      	ldr	r0, [r7, #4]
    d476:	4b05      	ldr	r3, [pc, #20]	; (d48c <n25q256a_switch_mode+0xc0>)
    d478:	4798      	blx	r3
    d47a:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    d47c:	68fb      	ldr	r3, [r7, #12]
    d47e:	78fa      	ldrb	r2, [r7, #3]
    d480:	731a      	strb	r2, [r3, #12]
    d482:	e000      	b.n	d486 <n25q256a_switch_mode+0xba>
		return;
    d484:	bf00      	nop
	}
}
    d486:	371c      	adds	r7, #28
    d488:	46bd      	mov	sp, r7
    d48a:	bd90      	pop	{r4, r7, pc}
    d48c:	0000d1c1 	.word	0x0000d1c1
    d490:	0000d2fd 	.word	0x0000d2fd
    d494:	0000d25d 	.word	0x0000d25d

0000d498 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    d498:	b580      	push	{r7, lr}
    d49a:	b086      	sub	sp, #24
    d49c:	af00      	add	r7, sp, #0
    d49e:	60f8      	str	r0, [r7, #12]
    d4a0:	60b9      	str	r1, [r7, #8]
    d4a2:	607a      	str	r2, [r7, #4]
    d4a4:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    d4a6:	68fb      	ldr	r3, [r7, #12]
    d4a8:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    d4aa:	4a0c      	ldr	r2, [pc, #48]	; (d4dc <n25q256a_construct+0x44>)
    d4ac:	68b9      	ldr	r1, [r7, #8]
    d4ae:	68f8      	ldr	r0, [r7, #12]
    d4b0:	4b0b      	ldr	r3, [pc, #44]	; (d4e0 <n25q256a_construct+0x48>)
    d4b2:	4798      	blx	r3
	n25q->quad_mode    = 0;
    d4b4:	697b      	ldr	r3, [r7, #20]
    d4b6:	2200      	movs	r2, #0
    d4b8:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    d4ba:	697b      	ldr	r3, [r7, #20]
    d4bc:	2200      	movs	r2, #0
    d4be:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    d4c0:	697b      	ldr	r3, [r7, #20]
    d4c2:	687a      	ldr	r2, [r7, #4]
    d4c4:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    d4c6:	78fb      	ldrb	r3, [r7, #3]
    d4c8:	4619      	mov	r1, r3
    d4ca:	68f8      	ldr	r0, [r7, #12]
    d4cc:	4b05      	ldr	r3, [pc, #20]	; (d4e4 <n25q256a_construct+0x4c>)
    d4ce:	4798      	blx	r3
	return me;
    d4d0:	68fb      	ldr	r3, [r7, #12]
}
    d4d2:	4618      	mov	r0, r3
    d4d4:	3718      	adds	r7, #24
    d4d6:	46bd      	mov	sp, r7
    d4d8:	bd80      	pop	{r7, pc}
    d4da:	bf00      	nop
    d4dc:	0001af6c 	.word	0x0001af6c
    d4e0:	0000d975 	.word	0x0000d975
    d4e4:	0000d3cd 	.word	0x0000d3cd

0000d4e8 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    d4e8:	b580      	push	{r7, lr}
    d4ea:	b08c      	sub	sp, #48	; 0x30
    d4ec:	af00      	add	r7, sp, #0
    d4ee:	60f8      	str	r0, [r7, #12]
    d4f0:	60b9      	str	r1, [r7, #8]
    d4f2:	607a      	str	r2, [r7, #4]
    d4f4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d4f6:	68fb      	ldr	r3, [r7, #12]
    d4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d4fa:	68fb      	ldr	r3, [r7, #12]
    d4fc:	681b      	ldr	r3, [r3, #0]
    d4fe:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    d500:	f107 0310 	add.w	r3, r7, #16
    d504:	2200      	movs	r2, #0
    d506:	601a      	str	r2, [r3, #0]
    d508:	605a      	str	r2, [r3, #4]
    d50a:	609a      	str	r2, [r3, #8]
    d50c:	60da      	str	r2, [r3, #12]
    d50e:	611a      	str	r2, [r3, #16]
    d510:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d514:	7b1b      	ldrb	r3, [r3, #12]
    d516:	2b00      	cmp	r3, #0
    d518:	d001      	beq.n	d51e <n25q256a_read+0x36>
    d51a:	2206      	movs	r2, #6
    d51c:	e000      	b.n	d520 <n25q256a_read+0x38>
    d51e:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    d520:	7c3b      	ldrb	r3, [r7, #16]
    d522:	f362 0302 	bfi	r3, r2, #0, #3
    d526:	743b      	strb	r3, [r7, #16]
    d528:	7c3b      	ldrb	r3, [r7, #16]
    d52a:	f043 0310 	orr.w	r3, r3, #16
    d52e:	743b      	strb	r3, [r7, #16]
    d530:	7c3b      	ldrb	r3, [r7, #16]
    d532:	f043 0320 	orr.w	r3, r3, #32
    d536:	743b      	strb	r3, [r7, #16]
    d538:	7c3b      	ldrb	r3, [r7, #16]
    d53a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d53e:	743b      	strb	r3, [r7, #16]
    d540:	7c7b      	ldrb	r3, [r7, #17]
    d542:	2201      	movs	r2, #1
    d544:	f362 1305 	bfi	r3, r2, #4, #2
    d548:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    d54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d54c:	7b1b      	ldrb	r3, [r3, #12]
    d54e:	2b00      	cmp	r3, #0
    d550:	d001      	beq.n	d556 <n25q256a_read+0x6e>
    d552:	220a      	movs	r2, #10
    d554:	e000      	b.n	d558 <n25q256a_read+0x70>
    d556:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    d558:	7cbb      	ldrb	r3, [r7, #18]
    d55a:	f362 0304 	bfi	r3, r2, #0, #5
    d55e:	74bb      	strb	r3, [r7, #18]
    d560:	230b      	movs	r3, #11
    d562:	753b      	strb	r3, [r7, #20]
    d564:	687b      	ldr	r3, [r7, #4]
    d566:	61bb      	str	r3, [r7, #24]
    d568:	683b      	ldr	r3, [r7, #0]
    d56a:	61fb      	str	r3, [r7, #28]
    d56c:	68bb      	ldr	r3, [r7, #8]
    d56e:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    d570:	f107 0310 	add.w	r3, r7, #16
    d574:	4619      	mov	r1, r3
    d576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d578:	4b03      	ldr	r3, [pc, #12]	; (d588 <n25q256a_read+0xa0>)
    d57a:	4798      	blx	r3
	return ERR_NONE;
    d57c:	2300      	movs	r3, #0
}
    d57e:	4618      	mov	r0, r3
    d580:	3730      	adds	r7, #48	; 0x30
    d582:	46bd      	mov	sp, r7
    d584:	bd80      	pop	{r7, pc}
    d586:	bf00      	nop
    d588:	00003ba1 	.word	0x00003ba1

0000d58c <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    d58c:	b580      	push	{r7, lr}
    d58e:	b08c      	sub	sp, #48	; 0x30
    d590:	af00      	add	r7, sp, #0
    d592:	60f8      	str	r0, [r7, #12]
    d594:	60b9      	str	r1, [r7, #8]
    d596:	607a      	str	r2, [r7, #4]
    d598:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d59a:	68fb      	ldr	r3, [r7, #12]
    d59c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d59e:	68fb      	ldr	r3, [r7, #12]
    d5a0:	681b      	ldr	r3, [r3, #0]
    d5a2:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    d5a4:	f107 0310 	add.w	r3, r7, #16
    d5a8:	2200      	movs	r2, #0
    d5aa:	601a      	str	r2, [r3, #0]
    d5ac:	605a      	str	r2, [r3, #4]
    d5ae:	609a      	str	r2, [r3, #8]
    d5b0:	60da      	str	r2, [r3, #12]
    d5b2:	611a      	str	r2, [r3, #16]
    d5b4:	615a      	str	r2, [r3, #20]
    d5b6:	7c3b      	ldrb	r3, [r7, #16]
    d5b8:	f043 0310 	orr.w	r3, r3, #16
    d5bc:	743b      	strb	r3, [r7, #16]
    d5be:	7c3b      	ldrb	r3, [r7, #16]
    d5c0:	f043 0320 	orr.w	r3, r3, #32
    d5c4:	743b      	strb	r3, [r7, #16]
    d5c6:	7c3b      	ldrb	r3, [r7, #16]
    d5c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d5cc:	743b      	strb	r3, [r7, #16]
    d5ce:	7c7b      	ldrb	r3, [r7, #17]
    d5d0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    d5d4:	747b      	strb	r3, [r7, #17]
    d5d6:	2302      	movs	r3, #2
    d5d8:	753b      	strb	r3, [r7, #20]
    d5da:	687b      	ldr	r3, [r7, #4]
    d5dc:	61bb      	str	r3, [r7, #24]
    d5de:	683b      	ldr	r3, [r7, #0]
    d5e0:	61fb      	str	r3, [r7, #28]
    d5e2:	68bb      	ldr	r3, [r7, #8]
    d5e4:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d5e8:	7b1b      	ldrb	r3, [r3, #12]
    d5ea:	2b00      	cmp	r3, #0
    d5ec:	d001      	beq.n	d5f2 <n25q256a_write+0x66>
    d5ee:	2206      	movs	r2, #6
    d5f0:	e000      	b.n	d5f4 <n25q256a_write+0x68>
    d5f2:	2200      	movs	r2, #0
    d5f4:	7c3b      	ldrb	r3, [r7, #16]
    d5f6:	f362 0302 	bfi	r3, r2, #0, #3
    d5fa:	743b      	strb	r3, [r7, #16]
	while (length) {
    d5fc:	e035      	b.n	d66a <n25q256a_write+0xde>
		cmd.address = address;
    d5fe:	687b      	ldr	r3, [r7, #4]
    d600:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    d602:	683b      	ldr	r3, [r7, #0]
    d604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    d608:	d802      	bhi.n	d610 <n25q256a_write+0x84>
			cmd.buf_len = length;
    d60a:	683b      	ldr	r3, [r7, #0]
    d60c:	61fb      	str	r3, [r7, #28]
    d60e:	e002      	b.n	d616 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    d610:	f44f 7380 	mov.w	r3, #256	; 0x100
    d614:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d616:	7c3b      	ldrb	r3, [r7, #16]
    d618:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d61c:	b2db      	uxtb	r3, r3
    d61e:	2201      	movs	r2, #1
    d620:	4619      	mov	r1, r3
    d622:	68f8      	ldr	r0, [r7, #12]
    d624:	4b19      	ldr	r3, [pc, #100]	; (d68c <n25q256a_write+0x100>)
    d626:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    d628:	f107 0310 	add.w	r3, r7, #16
    d62c:	4619      	mov	r1, r3
    d62e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d630:	4b17      	ldr	r3, [pc, #92]	; (d690 <n25q256a_write+0x104>)
    d632:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d634:	bf00      	nop
    d636:	7c3b      	ldrb	r3, [r7, #16]
    d638:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d63c:	b2db      	uxtb	r3, r3
    d63e:	2270      	movs	r2, #112	; 0x70
    d640:	4619      	mov	r1, r3
    d642:	68f8      	ldr	r0, [r7, #12]
    d644:	4b13      	ldr	r3, [pc, #76]	; (d694 <n25q256a_write+0x108>)
    d646:	4798      	blx	r3
    d648:	4603      	mov	r3, r0
    d64a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d64e:	2b00      	cmp	r3, #0
    d650:	d0f1      	beq.n	d636 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    d652:	6a3a      	ldr	r2, [r7, #32]
    d654:	69fb      	ldr	r3, [r7, #28]
    d656:	4413      	add	r3, r2
    d658:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    d65a:	69fb      	ldr	r3, [r7, #28]
    d65c:	683a      	ldr	r2, [r7, #0]
    d65e:	1ad3      	subs	r3, r2, r3
    d660:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    d662:	69fb      	ldr	r3, [r7, #28]
    d664:	687a      	ldr	r2, [r7, #4]
    d666:	4413      	add	r3, r2
    d668:	607b      	str	r3, [r7, #4]
	while (length) {
    d66a:	683b      	ldr	r3, [r7, #0]
    d66c:	2b00      	cmp	r3, #0
    d66e:	d1c6      	bne.n	d5fe <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    d670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d672:	7b5b      	ldrb	r3, [r3, #13]
    d674:	2b00      	cmp	r3, #0
    d676:	d003      	beq.n	d680 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    d678:	2101      	movs	r1, #1
    d67a:	68f8      	ldr	r0, [r7, #12]
    d67c:	4b06      	ldr	r3, [pc, #24]	; (d698 <n25q256a_write+0x10c>)
    d67e:	4798      	blx	r3
	}
	return ERR_NONE;
    d680:	2300      	movs	r3, #0
}
    d682:	4618      	mov	r0, r3
    d684:	3730      	adds	r7, #48	; 0x30
    d686:	46bd      	mov	sp, r7
    d688:	bd80      	pop	{r7, pc}
    d68a:	bf00      	nop
    d68c:	0000d2fd 	.word	0x0000d2fd
    d690:	00003ba1 	.word	0x00003ba1
    d694:	0000d1c1 	.word	0x0000d1c1
    d698:	0000d0f5 	.word	0x0000d0f5

0000d69c <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    d69c:	b580      	push	{r7, lr}
    d69e:	b090      	sub	sp, #64	; 0x40
    d6a0:	af00      	add	r7, sp, #0
    d6a2:	60f8      	str	r0, [r7, #12]
    d6a4:	60b9      	str	r1, [r7, #8]
    d6a6:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d6a8:	68fb      	ldr	r3, [r7, #12]
    d6aa:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d6ac:	68fb      	ldr	r3, [r7, #12]
    d6ae:	681b      	ldr	r3, [r3, #0]
    d6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    d6b2:	f107 0314 	add.w	r3, r7, #20
    d6b6:	2200      	movs	r2, #0
    d6b8:	601a      	str	r2, [r3, #0]
    d6ba:	605a      	str	r2, [r3, #4]
    d6bc:	609a      	str	r2, [r3, #8]
    d6be:	60da      	str	r2, [r3, #12]
    d6c0:	611a      	str	r2, [r3, #16]
    d6c2:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d6c6:	7b1b      	ldrb	r3, [r3, #12]
    d6c8:	2b00      	cmp	r3, #0
    d6ca:	d001      	beq.n	d6d0 <n25q256a_erase+0x34>
    d6cc:	2206      	movs	r2, #6
    d6ce:	e000      	b.n	d6d2 <n25q256a_erase+0x36>
    d6d0:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    d6d2:	7d3b      	ldrb	r3, [r7, #20]
    d6d4:	f362 0302 	bfi	r3, r2, #0, #3
    d6d8:	753b      	strb	r3, [r7, #20]
    d6da:	7d3b      	ldrb	r3, [r7, #20]
    d6dc:	f043 0310 	orr.w	r3, r3, #16
    d6e0:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    d6e2:	687b      	ldr	r3, [r7, #4]
    d6e4:	4a56      	ldr	r2, [pc, #344]	; (d840 <n25q256a_erase+0x1a4>)
    d6e6:	4293      	cmp	r3, r2
    d6e8:	bf94      	ite	ls
    d6ea:	2301      	movls	r3, #1
    d6ec:	2300      	movhi	r3, #0
    d6ee:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    d6f0:	7d3b      	ldrb	r3, [r7, #20]
    d6f2:	f362 1345 	bfi	r3, r2, #5, #1
    d6f6:	753b      	strb	r3, [r7, #20]
    d6f8:	7d7b      	ldrb	r3, [r7, #21]
    d6fa:	2202      	movs	r2, #2
    d6fc:	f362 1305 	bfi	r3, r2, #4, #2
    d700:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    d702:	68bb      	ldr	r3, [r7, #8]
    d704:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    d706:	687b      	ldr	r3, [r7, #4]
    d708:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    d70a:	2300      	movs	r3, #0
    d70c:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    d70e:	687b      	ldr	r3, [r7, #4]
    d710:	f3c3 030b 	ubfx	r3, r3, #0, #12
    d714:	2b00      	cmp	r3, #0
    d716:	d104      	bne.n	d722 <n25q256a_erase+0x86>
    d718:	68bb      	ldr	r3, [r7, #8]
    d71a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    d71e:	2b00      	cmp	r3, #0
    d720:	d002      	beq.n	d728 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    d722:	f06f 030c 	mvn.w	r3, #12
    d726:	e087      	b.n	d838 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    d728:	687b      	ldr	r3, [r7, #4]
    d72a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    d72e:	d368      	bcc.n	d802 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    d730:	23c7      	movs	r3, #199	; 0xc7
    d732:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d734:	7d3b      	ldrb	r3, [r7, #20]
    d736:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d73a:	b2db      	uxtb	r3, r3
    d73c:	2201      	movs	r2, #1
    d73e:	4619      	mov	r1, r3
    d740:	68f8      	ldr	r0, [r7, #12]
    d742:	4b40      	ldr	r3, [pc, #256]	; (d844 <n25q256a_erase+0x1a8>)
    d744:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    d746:	f107 0314 	add.w	r3, r7, #20
    d74a:	4619      	mov	r1, r3
    d74c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d74e:	4b3e      	ldr	r3, [pc, #248]	; (d848 <n25q256a_erase+0x1ac>)
    d750:	4798      	blx	r3
    d752:	e059      	b.n	d808 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    d754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d756:	b29b      	uxth	r3, r3
    d758:	2b00      	cmp	r3, #0
    d75a:	d11f      	bne.n	d79c <n25q256a_erase+0x100>
    d75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d75e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    d762:	d31b      	bcc.n	d79c <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    d764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d766:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    d768:	23d8      	movs	r3, #216	; 0xd8
    d76a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d76c:	7d3b      	ldrb	r3, [r7, #20]
    d76e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d772:	b2db      	uxtb	r3, r3
    d774:	2201      	movs	r2, #1
    d776:	4619      	mov	r1, r3
    d778:	68f8      	ldr	r0, [r7, #12]
    d77a:	4b32      	ldr	r3, [pc, #200]	; (d844 <n25q256a_erase+0x1a8>)
    d77c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    d77e:	f107 0314 	add.w	r3, r7, #20
    d782:	4619      	mov	r1, r3
    d784:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d786:	4b30      	ldr	r3, [pc, #192]	; (d848 <n25q256a_erase+0x1ac>)
    d788:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    d78a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d78c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d790:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    d792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d794:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    d798:	63bb      	str	r3, [r7, #56]	; 0x38
    d79a:	e023      	b.n	d7e4 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    d79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d79e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d7a2:	d31b      	bcc.n	d7dc <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    d7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d7a6:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    d7a8:	2320      	movs	r3, #32
    d7aa:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d7ac:	7d3b      	ldrb	r3, [r7, #20]
    d7ae:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d7b2:	b2db      	uxtb	r3, r3
    d7b4:	2201      	movs	r2, #1
    d7b6:	4619      	mov	r1, r3
    d7b8:	68f8      	ldr	r0, [r7, #12]
    d7ba:	4b22      	ldr	r3, [pc, #136]	; (d844 <n25q256a_erase+0x1a8>)
    d7bc:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    d7be:	f107 0314 	add.w	r3, r7, #20
    d7c2:	4619      	mov	r1, r3
    d7c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d7c6:	4b20      	ldr	r3, [pc, #128]	; (d848 <n25q256a_erase+0x1ac>)
    d7c8:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    d7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d7cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    d7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    d7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d7d4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    d7d8:	63bb      	str	r3, [r7, #56]	; 0x38
    d7da:	e003      	b.n	d7e4 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    d7dc:	f06f 030c 	mvn.w	r3, #12
    d7e0:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    d7e2:	e011      	b.n	d808 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d7e4:	bf00      	nop
    d7e6:	7d3b      	ldrb	r3, [r7, #20]
    d7e8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d7ec:	b2db      	uxtb	r3, r3
    d7ee:	2270      	movs	r2, #112	; 0x70
    d7f0:	4619      	mov	r1, r3
    d7f2:	68f8      	ldr	r0, [r7, #12]
    d7f4:	4b15      	ldr	r3, [pc, #84]	; (d84c <n25q256a_erase+0x1b0>)
    d7f6:	4798      	blx	r3
    d7f8:	4603      	mov	r3, r0
    d7fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d7fe:	2b00      	cmp	r3, #0
    d800:	d0f1      	beq.n	d7e6 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    d802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d804:	2b00      	cmp	r3, #0
    d806:	d1a5      	bne.n	d754 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d808:	bf00      	nop
    d80a:	7d3b      	ldrb	r3, [r7, #20]
    d80c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d810:	b2db      	uxtb	r3, r3
    d812:	2270      	movs	r2, #112	; 0x70
    d814:	4619      	mov	r1, r3
    d816:	68f8      	ldr	r0, [r7, #12]
    d818:	4b0c      	ldr	r3, [pc, #48]	; (d84c <n25q256a_erase+0x1b0>)
    d81a:	4798      	blx	r3
    d81c:	4603      	mov	r3, r0
    d81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d822:	2b00      	cmp	r3, #0
    d824:	d0f1      	beq.n	d80a <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    d826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d828:	7b5b      	ldrb	r3, [r3, #13]
    d82a:	2b00      	cmp	r3, #0
    d82c:	d003      	beq.n	d836 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    d82e:	2101      	movs	r1, #1
    d830:	68f8      	ldr	r0, [r7, #12]
    d832:	4b07      	ldr	r3, [pc, #28]	; (d850 <n25q256a_erase+0x1b4>)
    d834:	4798      	blx	r3
	}
	return rc;
    d836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    d838:	4618      	mov	r0, r3
    d83a:	3740      	adds	r7, #64	; 0x40
    d83c:	46bd      	mov	sp, r7
    d83e:	bd80      	pop	{r7, pc}
    d840:	001fffff 	.word	0x001fffff
    d844:	0000d2fd 	.word	0x0000d2fd
    d848:	00003ba1 	.word	0x00003ba1
    d84c:	0000d1c1 	.word	0x0000d1c1
    d850:	0000d0f5 	.word	0x0000d0f5

0000d854 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    d854:	b590      	push	{r4, r7, lr}
    d856:	b085      	sub	sp, #20
    d858:	af00      	add	r7, sp, #0
    d85a:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    d85c:	687b      	ldr	r3, [r7, #4]
    d85e:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d860:	68fb      	ldr	r3, [r7, #12]
    d862:	7b1b      	ldrb	r3, [r3, #12]
    d864:	2b00      	cmp	r3, #0
    d866:	d001      	beq.n	d86c <n25q256a_enable_xip+0x18>
    d868:	2306      	movs	r3, #6
    d86a:	e000      	b.n	d86e <n25q256a_enable_xip+0x1a>
    d86c:	2300      	movs	r3, #0
    d86e:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    d870:	68fb      	ldr	r3, [r7, #12]
    d872:	7b5b      	ldrb	r3, [r3, #13]
    d874:	2b00      	cmp	r3, #0
    d876:	d129      	bne.n	d8cc <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    d878:	7afb      	ldrb	r3, [r7, #11]
    d87a:	2285      	movs	r2, #133	; 0x85
    d87c:	4619      	mov	r1, r3
    d87e:	6878      	ldr	r0, [r7, #4]
    d880:	4b15      	ldr	r3, [pc, #84]	; (d8d8 <n25q256a_enable_xip+0x84>)
    d882:	4798      	blx	r3
    d884:	4603      	mov	r3, r0
    d886:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    d888:	7abb      	ldrb	r3, [r7, #10]
    d88a:	f003 0308 	and.w	r3, r3, #8
    d88e:	2b00      	cmp	r3, #0
    d890:	d015      	beq.n	d8be <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    d892:	7abb      	ldrb	r3, [r7, #10]
    d894:	f023 0308 	bic.w	r3, r3, #8
    d898:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    d89a:	7abb      	ldrb	r3, [r7, #10]
    d89c:	7af9      	ldrb	r1, [r7, #11]
    d89e:	2281      	movs	r2, #129	; 0x81
    d8a0:	6878      	ldr	r0, [r7, #4]
    d8a2:	4c0e      	ldr	r4, [pc, #56]	; (d8dc <n25q256a_enable_xip+0x88>)
    d8a4:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d8a6:	bf00      	nop
    d8a8:	7afb      	ldrb	r3, [r7, #11]
    d8aa:	2270      	movs	r2, #112	; 0x70
    d8ac:	4619      	mov	r1, r3
    d8ae:	6878      	ldr	r0, [r7, #4]
    d8b0:	4b09      	ldr	r3, [pc, #36]	; (d8d8 <n25q256a_enable_xip+0x84>)
    d8b2:	4798      	blx	r3
    d8b4:	4603      	mov	r3, r0
    d8b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d8ba:	2b00      	cmp	r3, #0
    d8bc:	d0f4      	beq.n	d8a8 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    d8be:	68fb      	ldr	r3, [r7, #12]
    d8c0:	2201      	movs	r2, #1
    d8c2:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    d8c4:	2101      	movs	r1, #1
    d8c6:	6878      	ldr	r0, [r7, #4]
    d8c8:	4b05      	ldr	r3, [pc, #20]	; (d8e0 <n25q256a_enable_xip+0x8c>)
    d8ca:	4798      	blx	r3
	}
	return ERR_NONE;
    d8cc:	2300      	movs	r3, #0
}
    d8ce:	4618      	mov	r0, r3
    d8d0:	3714      	adds	r7, #20
    d8d2:	46bd      	mov	sp, r7
    d8d4:	bd90      	pop	{r4, r7, pc}
    d8d6:	bf00      	nop
    d8d8:	0000d1c1 	.word	0x0000d1c1
    d8dc:	0000d25d 	.word	0x0000d25d
    d8e0:	0000d0f5 	.word	0x0000d0f5

0000d8e4 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    d8e4:	b580      	push	{r7, lr}
    d8e6:	b086      	sub	sp, #24
    d8e8:	af00      	add	r7, sp, #0
    d8ea:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d8ec:	687b      	ldr	r3, [r7, #4]
    d8ee:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d8f0:	687b      	ldr	r3, [r7, #4]
    d8f2:	681b      	ldr	r3, [r3, #0]
    d8f4:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d8f6:	697b      	ldr	r3, [r7, #20]
    d8f8:	7b1b      	ldrb	r3, [r3, #12]
    d8fa:	2b00      	cmp	r3, #0
    d8fc:	d001      	beq.n	d902 <n25q256a_disable_xip+0x1e>
    d8fe:	2306      	movs	r3, #6
    d900:	e000      	b.n	d904 <n25q256a_disable_xip+0x20>
    d902:	2300      	movs	r3, #0
    d904:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    d906:	2100      	movs	r1, #0
    d908:	6878      	ldr	r0, [r7, #4]
    d90a:	4b15      	ldr	r3, [pc, #84]	; (d960 <n25q256a_disable_xip+0x7c>)
    d90c:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    d90e:	7bfb      	ldrb	r3, [r7, #15]
    d910:	2285      	movs	r2, #133	; 0x85
    d912:	4619      	mov	r1, r3
    d914:	6878      	ldr	r0, [r7, #4]
    d916:	4b13      	ldr	r3, [pc, #76]	; (d964 <n25q256a_disable_xip+0x80>)
    d918:	4798      	blx	r3
    d91a:	4603      	mov	r3, r0
    d91c:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    d91e:	7bbb      	ldrb	r3, [r7, #14]
    d920:	f003 0308 	and.w	r3, r3, #8
    d924:	2b00      	cmp	r3, #0
    d926:	d113      	bne.n	d950 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    d928:	697b      	ldr	r3, [r7, #20]
    d92a:	689b      	ldr	r3, [r3, #8]
    d92c:	2b00      	cmp	r3, #0
    d92e:	d00f      	beq.n	d950 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    d930:	693b      	ldr	r3, [r7, #16]
    d932:	681b      	ldr	r3, [r3, #0]
    d934:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    d936:	6938      	ldr	r0, [r7, #16]
    d938:	4b0b      	ldr	r3, [pc, #44]	; (d968 <n25q256a_disable_xip+0x84>)
    d93a:	4798      	blx	r3
			n25q->pin_exit_xip();
    d93c:	697b      	ldr	r3, [r7, #20]
    d93e:	689b      	ldr	r3, [r3, #8]
    d940:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    d942:	68b9      	ldr	r1, [r7, #8]
    d944:	6938      	ldr	r0, [r7, #16]
    d946:	4b09      	ldr	r3, [pc, #36]	; (d96c <n25q256a_disable_xip+0x88>)
    d948:	4798      	blx	r3
			qspi_sync_enable(descr);
    d94a:	6938      	ldr	r0, [r7, #16]
    d94c:	4b08      	ldr	r3, [pc, #32]	; (d970 <n25q256a_disable_xip+0x8c>)
    d94e:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    d950:	697b      	ldr	r3, [r7, #20]
    d952:	2200      	movs	r2, #0
    d954:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    d956:	2300      	movs	r3, #0
}
    d958:	4618      	mov	r0, r3
    d95a:	3718      	adds	r7, #24
    d95c:	46bd      	mov	sp, r7
    d95e:	bd80      	pop	{r7, pc}
    d960:	0000d0f5 	.word	0x0000d0f5
    d964:	0000d1c1 	.word	0x0000d1c1
    d968:	00003b65 	.word	0x00003b65
    d96c:	00003add 	.word	0x00003add
    d970:	00003b29 	.word	0x00003b29

0000d974 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    d974:	b480      	push	{r7}
    d976:	b085      	sub	sp, #20
    d978:	af00      	add	r7, sp, #0
    d97a:	60f8      	str	r0, [r7, #12]
    d97c:	60b9      	str	r1, [r7, #8]
    d97e:	607a      	str	r2, [r7, #4]
	me->io        = io;
    d980:	68fb      	ldr	r3, [r7, #12]
    d982:	68ba      	ldr	r2, [r7, #8]
    d984:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    d986:	68fb      	ldr	r3, [r7, #12]
    d988:	687a      	ldr	r2, [r7, #4]
    d98a:	605a      	str	r2, [r3, #4]

	return me;
    d98c:	68fb      	ldr	r3, [r7, #12]
}
    d98e:	4618      	mov	r0, r3
    d990:	3714      	adds	r7, #20
    d992:	46bd      	mov	sp, r7
    d994:	f85d 7b04 	ldr.w	r7, [sp], #4
    d998:	4770      	bx	lr

0000d99a <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    d99a:	b480      	push	{r7}
    d99c:	b083      	sub	sp, #12
    d99e:	af00      	add	r7, sp, #0
    d9a0:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d9a2:	687b      	ldr	r3, [r7, #4]
    d9a4:	781b      	ldrb	r3, [r3, #0]
    d9a6:	b29a      	uxth	r2, r3
    d9a8:	687b      	ldr	r3, [r7, #4]
    d9aa:	3301      	adds	r3, #1
    d9ac:	781b      	ldrb	r3, [r3, #0]
    d9ae:	b29b      	uxth	r3, r3
    d9b0:	021b      	lsls	r3, r3, #8
    d9b2:	b29b      	uxth	r3, r3
    d9b4:	4413      	add	r3, r2
    d9b6:	b29b      	uxth	r3, r3
}
    d9b8:	4618      	mov	r0, r3
    d9ba:	370c      	adds	r7, #12
    d9bc:	46bd      	mov	sp, r7
    d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9c2:	4770      	bx	lr

0000d9c4 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    d9c4:	b480      	push	{r7}
    d9c6:	b083      	sub	sp, #12
    d9c8:	af00      	add	r7, sp, #0
    d9ca:	6078      	str	r0, [r7, #4]
	return desc[0];
    d9cc:	687b      	ldr	r3, [r7, #4]
    d9ce:	781b      	ldrb	r3, [r3, #0]
}
    d9d0:	4618      	mov	r0, r3
    d9d2:	370c      	adds	r7, #12
    d9d4:	46bd      	mov	sp, r7
    d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d9da:	4770      	bx	lr

0000d9dc <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    d9dc:	b580      	push	{r7, lr}
    d9de:	b082      	sub	sp, #8
    d9e0:	af00      	add	r7, sp, #0
    d9e2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d9e4:	6878      	ldr	r0, [r7, #4]
    d9e6:	4b05      	ldr	r3, [pc, #20]	; (d9fc <usb_desc_next+0x20>)
    d9e8:	4798      	blx	r3
    d9ea:	4603      	mov	r3, r0
    d9ec:	461a      	mov	r2, r3
    d9ee:	687b      	ldr	r3, [r7, #4]
    d9f0:	4413      	add	r3, r2
}
    d9f2:	4618      	mov	r0, r3
    d9f4:	3708      	adds	r7, #8
    d9f6:	46bd      	mov	sp, r7
    d9f8:	bd80      	pop	{r7, pc}
    d9fa:	bf00      	nop
    d9fc:	0000d9c5 	.word	0x0000d9c5

0000da00 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    da00:	b580      	push	{r7, lr}
    da02:	b08c      	sub	sp, #48	; 0x30
    da04:	af00      	add	r7, sp, #0
    da06:	6078      	str	r0, [r7, #4]
    da08:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    da0a:	687b      	ldr	r3, [r7, #4]
    da0c:	689b      	ldr	r3, [r3, #8]
    da0e:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    da10:	683b      	ldr	r3, [r7, #0]
    da12:	681b      	ldr	r3, [r3, #0]
    da14:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    da16:	2300      	movs	r3, #0
    da18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    da1c:	e08f      	b.n	db3e <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    da1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    da20:	2b00      	cmp	r3, #0
    da22:	d102      	bne.n	da2a <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    da24:	f06f 0309 	mvn.w	r3, #9
    da28:	e092      	b.n	db50 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    da2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    da2c:	789b      	ldrb	r3, [r3, #2]
    da2e:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    da30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    da32:	795b      	ldrb	r3, [r3, #5]
    da34:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    da36:	7c7b      	ldrb	r3, [r7, #17]
    da38:	2b02      	cmp	r3, #2
    da3a:	d002      	beq.n	da42 <cdcdf_acm_enable+0x42>
    da3c:	7c7b      	ldrb	r3, [r7, #17]
    da3e:	2b0a      	cmp	r3, #10
    da40:	d121      	bne.n	da86 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    da42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    da46:	6a3a      	ldr	r2, [r7, #32]
    da48:	5cd2      	ldrb	r2, [r2, r3]
    da4a:	7bbb      	ldrb	r3, [r7, #14]
    da4c:	429a      	cmp	r2, r3
    da4e:	d102      	bne.n	da56 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    da50:	f06f 0311 	mvn.w	r3, #17
    da54:	e07c      	b.n	db50 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    da56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    da5a:	6a3a      	ldr	r2, [r7, #32]
    da5c:	5cd3      	ldrb	r3, [r2, r3]
    da5e:	2bff      	cmp	r3, #255	; 0xff
    da60:	d002      	beq.n	da68 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    da62:	f06f 031b 	mvn.w	r3, #27
    da66:	e073      	b.n	db50 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    da68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    da6c:	7bb9      	ldrb	r1, [r7, #14]
    da6e:	6a3a      	ldr	r2, [r7, #32]
    da70:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    da72:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    da74:	683b      	ldr	r3, [r7, #0]
    da76:	685b      	ldr	r3, [r3, #4]
    da78:	2205      	movs	r2, #5
    da7a:	4619      	mov	r1, r3
    da7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    da7e:	4b36      	ldr	r3, [pc, #216]	; (db58 <cdcdf_acm_enable+0x158>)
    da80:	4798      	blx	r3
    da82:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    da84:	e047      	b.n	db16 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    da86:	f06f 0309 	mvn.w	r3, #9
    da8a:	e061      	b.n	db50 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    da8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    da8e:	789b      	ldrb	r3, [r3, #2]
    da90:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    da92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    da94:	78db      	ldrb	r3, [r3, #3]
    da96:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    da98:	6abb      	ldr	r3, [r7, #40]	; 0x28
    da9a:	3304      	adds	r3, #4
    da9c:	4618      	mov	r0, r3
    da9e:	4b2f      	ldr	r3, [pc, #188]	; (db5c <cdcdf_acm_enable+0x15c>)
    daa0:	4798      	blx	r3
    daa2:	4603      	mov	r3, r0
    daa4:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    daa6:	7ebb      	ldrb	r3, [r7, #26]
    daa8:	7ef9      	ldrb	r1, [r7, #27]
    daaa:	8bba      	ldrh	r2, [r7, #28]
    daac:	4618      	mov	r0, r3
    daae:	4b2c      	ldr	r3, [pc, #176]	; (db60 <cdcdf_acm_enable+0x160>)
    dab0:	4798      	blx	r3
    dab2:	4603      	mov	r3, r0
    dab4:	2b00      	cmp	r3, #0
    dab6:	d002      	beq.n	dabe <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    dab8:	f06f 0313 	mvn.w	r3, #19
    dabc:	e048      	b.n	db50 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    dabe:	7ebb      	ldrb	r3, [r7, #26]
    dac0:	b25b      	sxtb	r3, r3
    dac2:	2b00      	cmp	r3, #0
    dac4:	da0f      	bge.n	dae6 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    dac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    daca:	7eb9      	ldrb	r1, [r7, #26]
    dacc:	6a3a      	ldr	r2, [r7, #32]
    dace:	4413      	add	r3, r2
    dad0:	460a      	mov	r2, r1
    dad2:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    dad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    dad8:	6a3a      	ldr	r2, [r7, #32]
    dada:	4413      	add	r3, r2
    dadc:	789b      	ldrb	r3, [r3, #2]
    dade:	4618      	mov	r0, r3
    dae0:	4b20      	ldr	r3, [pc, #128]	; (db64 <cdcdf_acm_enable+0x164>)
    dae2:	4798      	blx	r3
    dae4:	e007      	b.n	daf6 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    dae6:	7eba      	ldrb	r2, [r7, #26]
    dae8:	6a3b      	ldr	r3, [r7, #32]
    daea:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    daec:	6a3b      	ldr	r3, [r7, #32]
    daee:	791b      	ldrb	r3, [r3, #4]
    daf0:	4618      	mov	r0, r3
    daf2:	4b1c      	ldr	r3, [pc, #112]	; (db64 <cdcdf_acm_enable+0x164>)
    daf4:	4798      	blx	r3
			}
			desc->sod = ep;
    daf6:	683b      	ldr	r3, [r7, #0]
    daf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    dafa:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    dafc:	683b      	ldr	r3, [r7, #0]
    dafe:	681b      	ldr	r3, [r3, #0]
    db00:	4618      	mov	r0, r3
    db02:	4b19      	ldr	r3, [pc, #100]	; (db68 <cdcdf_acm_enable+0x168>)
    db04:	4798      	blx	r3
    db06:	4602      	mov	r2, r0
    db08:	683b      	ldr	r3, [r7, #0]
    db0a:	685b      	ldr	r3, [r3, #4]
    db0c:	4619      	mov	r1, r3
    db0e:	4610      	mov	r0, r2
    db10:	4b16      	ldr	r3, [pc, #88]	; (db6c <cdcdf_acm_enable+0x16c>)
    db12:	4798      	blx	r3
    db14:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    db16:	6abb      	ldr	r3, [r7, #40]	; 0x28
    db18:	2b00      	cmp	r3, #0
    db1a:	d1b7      	bne.n	da8c <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    db1c:	683b      	ldr	r3, [r7, #0]
    db1e:	681b      	ldr	r3, [r3, #0]
    db20:	4618      	mov	r0, r3
    db22:	4b11      	ldr	r3, [pc, #68]	; (db68 <cdcdf_acm_enable+0x168>)
    db24:	4798      	blx	r3
    db26:	683b      	ldr	r3, [r7, #0]
    db28:	685b      	ldr	r3, [r3, #4]
    db2a:	2204      	movs	r2, #4
    db2c:	4619      	mov	r1, r3
    db2e:	4b0a      	ldr	r3, [pc, #40]	; (db58 <cdcdf_acm_enable+0x158>)
    db30:	4798      	blx	r3
    db32:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    db34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    db38:	3301      	adds	r3, #1
    db3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    db3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    db42:	2b01      	cmp	r3, #1
    db44:	f67f af6b 	bls.w	da1e <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    db48:	4b09      	ldr	r3, [pc, #36]	; (db70 <cdcdf_acm_enable+0x170>)
    db4a:	2201      	movs	r2, #1
    db4c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    db4e:	2300      	movs	r3, #0
}
    db50:	4618      	mov	r0, r3
    db52:	3730      	adds	r7, #48	; 0x30
    db54:	46bd      	mov	sp, r7
    db56:	bd80      	pop	{r7, pc}
    db58:	0000edc1 	.word	0x0000edc1
    db5c:	0000d99b 	.word	0x0000d99b
    db60:	00004815 	.word	0x00004815
    db64:	00004901 	.word	0x00004901
    db68:	0000d9dd 	.word	0x0000d9dd
    db6c:	0000ee1d 	.word	0x0000ee1d
    db70:	20002798 	.word	0x20002798

0000db74 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    db74:	b580      	push	{r7, lr}
    db76:	b088      	sub	sp, #32
    db78:	af00      	add	r7, sp, #0
    db7a:	6078      	str	r0, [r7, #4]
    db7c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    db7e:	687b      	ldr	r3, [r7, #4]
    db80:	689b      	ldr	r3, [r3, #8]
    db82:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    db84:	683b      	ldr	r3, [r7, #0]
    db86:	2b00      	cmp	r3, #0
    db88:	d00c      	beq.n	dba4 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    db8a:	683b      	ldr	r3, [r7, #0]
    db8c:	681b      	ldr	r3, [r3, #0]
    db8e:	795b      	ldrb	r3, [r3, #5]
    db90:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    db92:	7c7b      	ldrb	r3, [r7, #17]
    db94:	2b02      	cmp	r3, #2
    db96:	d005      	beq.n	dba4 <cdcdf_acm_disable+0x30>
    db98:	7c7b      	ldrb	r3, [r7, #17]
    db9a:	2b0a      	cmp	r3, #10
    db9c:	d002      	beq.n	dba4 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    db9e:	f06f 0309 	mvn.w	r3, #9
    dba2:	e035      	b.n	dc10 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    dba4:	2300      	movs	r3, #0
    dba6:	77fb      	strb	r3, [r7, #31]
    dba8:	e01f      	b.n	dbea <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    dbaa:	7ffb      	ldrb	r3, [r7, #31]
    dbac:	69ba      	ldr	r2, [r7, #24]
    dbae:	5cd3      	ldrb	r3, [r2, r3]
    dbb0:	2bff      	cmp	r3, #255	; 0xff
    dbb2:	d016      	beq.n	dbe2 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    dbb4:	7ffb      	ldrb	r3, [r7, #31]
    dbb6:	69ba      	ldr	r2, [r7, #24]
    dbb8:	21ff      	movs	r1, #255	; 0xff
    dbba:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    dbbc:	7ffb      	ldrb	r3, [r7, #31]
    dbbe:	69ba      	ldr	r2, [r7, #24]
    dbc0:	4413      	add	r3, r2
    dbc2:	789b      	ldrb	r3, [r3, #2]
    dbc4:	2bff      	cmp	r3, #255	; 0xff
    dbc6:	d00d      	beq.n	dbe4 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    dbc8:	7ffb      	ldrb	r3, [r7, #31]
    dbca:	69ba      	ldr	r2, [r7, #24]
    dbcc:	4413      	add	r3, r2
    dbce:	789b      	ldrb	r3, [r3, #2]
    dbd0:	4618      	mov	r0, r3
    dbd2:	4b11      	ldr	r3, [pc, #68]	; (dc18 <cdcdf_acm_disable+0xa4>)
    dbd4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    dbd6:	7ffb      	ldrb	r3, [r7, #31]
    dbd8:	69ba      	ldr	r2, [r7, #24]
    dbda:	4413      	add	r3, r2
    dbdc:	22ff      	movs	r2, #255	; 0xff
    dbde:	709a      	strb	r2, [r3, #2]
    dbe0:	e000      	b.n	dbe4 <cdcdf_acm_disable+0x70>
			continue;
    dbe2:	bf00      	nop
	for (i = 0; i < 2; i++) {
    dbe4:	7ffb      	ldrb	r3, [r7, #31]
    dbe6:	3301      	adds	r3, #1
    dbe8:	77fb      	strb	r3, [r7, #31]
    dbea:	7ffb      	ldrb	r3, [r7, #31]
    dbec:	2b01      	cmp	r3, #1
    dbee:	d9dc      	bls.n	dbaa <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    dbf0:	69bb      	ldr	r3, [r7, #24]
    dbf2:	791b      	ldrb	r3, [r3, #4]
    dbf4:	2bff      	cmp	r3, #255	; 0xff
    dbf6:	d007      	beq.n	dc08 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    dbf8:	69bb      	ldr	r3, [r7, #24]
    dbfa:	791b      	ldrb	r3, [r3, #4]
    dbfc:	4618      	mov	r0, r3
    dbfe:	4b06      	ldr	r3, [pc, #24]	; (dc18 <cdcdf_acm_disable+0xa4>)
    dc00:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    dc02:	69bb      	ldr	r3, [r7, #24]
    dc04:	22ff      	movs	r2, #255	; 0xff
    dc06:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    dc08:	4b04      	ldr	r3, [pc, #16]	; (dc1c <cdcdf_acm_disable+0xa8>)
    dc0a:	2200      	movs	r2, #0
    dc0c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    dc0e:	2300      	movs	r3, #0
}
    dc10:	4618      	mov	r0, r3
    dc12:	3720      	adds	r7, #32
    dc14:	46bd      	mov	sp, r7
    dc16:	bd80      	pop	{r7, pc}
    dc18:	000048b1 	.word	0x000048b1
    dc1c:	20002798 	.word	0x20002798

0000dc20 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    dc20:	b580      	push	{r7, lr}
    dc22:	b084      	sub	sp, #16
    dc24:	af00      	add	r7, sp, #0
    dc26:	60f8      	str	r0, [r7, #12]
    dc28:	460b      	mov	r3, r1
    dc2a:	607a      	str	r2, [r7, #4]
    dc2c:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    dc2e:	7afb      	ldrb	r3, [r7, #11]
    dc30:	2b01      	cmp	r3, #1
    dc32:	d009      	beq.n	dc48 <cdcdf_acm_ctrl+0x28>
    dc34:	2b02      	cmp	r3, #2
    dc36:	d00d      	beq.n	dc54 <cdcdf_acm_ctrl+0x34>
    dc38:	2b00      	cmp	r3, #0
    dc3a:	d10e      	bne.n	dc5a <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    dc3c:	6879      	ldr	r1, [r7, #4]
    dc3e:	68f8      	ldr	r0, [r7, #12]
    dc40:	4b09      	ldr	r3, [pc, #36]	; (dc68 <cdcdf_acm_ctrl+0x48>)
    dc42:	4798      	blx	r3
    dc44:	4603      	mov	r3, r0
    dc46:	e00a      	b.n	dc5e <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    dc48:	6879      	ldr	r1, [r7, #4]
    dc4a:	68f8      	ldr	r0, [r7, #12]
    dc4c:	4b07      	ldr	r3, [pc, #28]	; (dc6c <cdcdf_acm_ctrl+0x4c>)
    dc4e:	4798      	blx	r3
    dc50:	4603      	mov	r3, r0
    dc52:	e004      	b.n	dc5e <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    dc54:	f06f 031a 	mvn.w	r3, #26
    dc58:	e001      	b.n	dc5e <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    dc5a:	f06f 030c 	mvn.w	r3, #12
	}
}
    dc5e:	4618      	mov	r0, r3
    dc60:	3710      	adds	r7, #16
    dc62:	46bd      	mov	sp, r7
    dc64:	bd80      	pop	{r7, pc}
    dc66:	bf00      	nop
    dc68:	0000da01 	.word	0x0000da01
    dc6c:	0000db75 	.word	0x0000db75

0000dc70 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    dc70:	b590      	push	{r4, r7, lr}
    dc72:	b087      	sub	sp, #28
    dc74:	af00      	add	r7, sp, #0
    dc76:	4603      	mov	r3, r0
    dc78:	6039      	str	r1, [r7, #0]
    dc7a:	71fb      	strb	r3, [r7, #7]
    dc7c:	4613      	mov	r3, r2
    dc7e:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    dc80:	683b      	ldr	r3, [r7, #0]
    dc82:	799a      	ldrb	r2, [r3, #6]
    dc84:	79db      	ldrb	r3, [r3, #7]
    dc86:	021b      	lsls	r3, r3, #8
    dc88:	4313      	orrs	r3, r2
    dc8a:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    dc8c:	4b2b      	ldr	r3, [pc, #172]	; (dd3c <cdcdf_acm_set_req+0xcc>)
    dc8e:	4798      	blx	r3
    dc90:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    dc92:	683b      	ldr	r3, [r7, #0]
    dc94:	785b      	ldrb	r3, [r3, #1]
    dc96:	2b20      	cmp	r3, #32
    dc98:	d002      	beq.n	dca0 <cdcdf_acm_set_req+0x30>
    dc9a:	2b22      	cmp	r3, #34	; 0x22
    dc9c:	d034      	beq.n	dd08 <cdcdf_acm_set_req+0x98>
    dc9e:	e046      	b.n	dd2e <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    dca0:	8afb      	ldrh	r3, [r7, #22]
    dca2:	2b07      	cmp	r3, #7
    dca4:	d002      	beq.n	dcac <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    dca6:	f04f 33ff 	mov.w	r3, #4294967295
    dcaa:	e042      	b.n	dd32 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    dcac:	79bb      	ldrb	r3, [r7, #6]
    dcae:	2b00      	cmp	r3, #0
    dcb0:	d107      	bne.n	dcc2 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    dcb2:	8afa      	ldrh	r2, [r7, #22]
    dcb4:	79f8      	ldrb	r0, [r7, #7]
    dcb6:	2300      	movs	r3, #0
    dcb8:	6939      	ldr	r1, [r7, #16]
    dcba:	4c21      	ldr	r4, [pc, #132]	; (dd40 <cdcdf_acm_set_req+0xd0>)
    dcbc:	47a0      	blx	r4
    dcbe:	4603      	mov	r3, r0
    dcc0:	e037      	b.n	dd32 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    dcc2:	693a      	ldr	r2, [r7, #16]
    dcc4:	f107 0308 	add.w	r3, r7, #8
    dcc8:	6810      	ldr	r0, [r2, #0]
    dcca:	6018      	str	r0, [r3, #0]
    dccc:	8891      	ldrh	r1, [r2, #4]
    dcce:	7992      	ldrb	r2, [r2, #6]
    dcd0:	8099      	strh	r1, [r3, #4]
    dcd2:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    dcd4:	4b1b      	ldr	r3, [pc, #108]	; (dd44 <cdcdf_acm_set_req+0xd4>)
    dcd6:	681b      	ldr	r3, [r3, #0]
    dcd8:	2b00      	cmp	r3, #0
    dcda:	d008      	beq.n	dcee <cdcdf_acm_set_req+0x7e>
    dcdc:	4b19      	ldr	r3, [pc, #100]	; (dd44 <cdcdf_acm_set_req+0xd4>)
    dcde:	681b      	ldr	r3, [r3, #0]
    dce0:	f107 0208 	add.w	r2, r7, #8
    dce4:	4610      	mov	r0, r2
    dce6:	4798      	blx	r3
    dce8:	4603      	mov	r3, r0
    dcea:	2b00      	cmp	r3, #0
    dcec:	d00a      	beq.n	dd04 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    dcee:	4b16      	ldr	r3, [pc, #88]	; (dd48 <cdcdf_acm_set_req+0xd8>)
    dcf0:	f107 0208 	add.w	r2, r7, #8
    dcf4:	e892 0003 	ldmia.w	r2, {r0, r1}
    dcf8:	6018      	str	r0, [r3, #0]
    dcfa:	3304      	adds	r3, #4
    dcfc:	8019      	strh	r1, [r3, #0]
    dcfe:	3302      	adds	r3, #2
    dd00:	0c0a      	lsrs	r2, r1, #16
    dd02:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    dd04:	2300      	movs	r3, #0
    dd06:	e014      	b.n	dd32 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    dd08:	2300      	movs	r3, #0
    dd0a:	2200      	movs	r2, #0
    dd0c:	2100      	movs	r1, #0
    dd0e:	2000      	movs	r0, #0
    dd10:	4c0b      	ldr	r4, [pc, #44]	; (dd40 <cdcdf_acm_set_req+0xd0>)
    dd12:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    dd14:	4b0d      	ldr	r3, [pc, #52]	; (dd4c <cdcdf_acm_set_req+0xdc>)
    dd16:	681b      	ldr	r3, [r3, #0]
    dd18:	2b00      	cmp	r3, #0
    dd1a:	d006      	beq.n	dd2a <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    dd1c:	4b0b      	ldr	r3, [pc, #44]	; (dd4c <cdcdf_acm_set_req+0xdc>)
    dd1e:	681b      	ldr	r3, [r3, #0]
    dd20:	683a      	ldr	r2, [r7, #0]
    dd22:	8852      	ldrh	r2, [r2, #2]
    dd24:	b292      	uxth	r2, r2
    dd26:	4610      	mov	r0, r2
    dd28:	4798      	blx	r3
		}
		return ERR_NONE;
    dd2a:	2300      	movs	r3, #0
    dd2c:	e001      	b.n	dd32 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    dd2e:	f06f 030c 	mvn.w	r3, #12
	}
}
    dd32:	4618      	mov	r0, r3
    dd34:	371c      	adds	r7, #28
    dd36:	46bd      	mov	sp, r7
    dd38:	bd90      	pop	{r4, r7, pc}
    dd3a:	bf00      	nop
    dd3c:	0000ecbd 	.word	0x0000ecbd
    dd40:	0000eb31 	.word	0x0000eb31
    dd44:	200027ac 	.word	0x200027ac
    dd48:	200027a0 	.word	0x200027a0
    dd4c:	200027a8 	.word	0x200027a8

0000dd50 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    dd50:	b590      	push	{r4, r7, lr}
    dd52:	b085      	sub	sp, #20
    dd54:	af00      	add	r7, sp, #0
    dd56:	4603      	mov	r3, r0
    dd58:	6039      	str	r1, [r7, #0]
    dd5a:	71fb      	strb	r3, [r7, #7]
    dd5c:	4613      	mov	r3, r2
    dd5e:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    dd60:	683b      	ldr	r3, [r7, #0]
    dd62:	799a      	ldrb	r2, [r3, #6]
    dd64:	79db      	ldrb	r3, [r3, #7]
    dd66:	021b      	lsls	r3, r3, #8
    dd68:	4313      	orrs	r3, r2
    dd6a:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    dd6c:	79bb      	ldrb	r3, [r7, #6]
    dd6e:	2b01      	cmp	r3, #1
    dd70:	d101      	bne.n	dd76 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    dd72:	2300      	movs	r3, #0
    dd74:	e013      	b.n	dd9e <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    dd76:	683b      	ldr	r3, [r7, #0]
    dd78:	785b      	ldrb	r3, [r3, #1]
    dd7a:	2b21      	cmp	r3, #33	; 0x21
    dd7c:	d10d      	bne.n	dd9a <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    dd7e:	89fb      	ldrh	r3, [r7, #14]
    dd80:	2b07      	cmp	r3, #7
    dd82:	d002      	beq.n	dd8a <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    dd84:	f04f 33ff 	mov.w	r3, #4294967295
    dd88:	e009      	b.n	dd9e <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    dd8a:	89fa      	ldrh	r2, [r7, #14]
    dd8c:	79f8      	ldrb	r0, [r7, #7]
    dd8e:	2300      	movs	r3, #0
    dd90:	4905      	ldr	r1, [pc, #20]	; (dda8 <cdcdf_acm_get_req+0x58>)
    dd92:	4c06      	ldr	r4, [pc, #24]	; (ddac <cdcdf_acm_get_req+0x5c>)
    dd94:	47a0      	blx	r4
    dd96:	4603      	mov	r3, r0
    dd98:	e001      	b.n	dd9e <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    dd9a:	f06f 030c 	mvn.w	r3, #12
	}
}
    dd9e:	4618      	mov	r0, r3
    dda0:	3714      	adds	r7, #20
    dda2:	46bd      	mov	sp, r7
    dda4:	bd90      	pop	{r4, r7, pc}
    dda6:	bf00      	nop
    dda8:	200027a0 	.word	0x200027a0
    ddac:	0000eb31 	.word	0x0000eb31

0000ddb0 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ddb0:	b580      	push	{r7, lr}
    ddb2:	b082      	sub	sp, #8
    ddb4:	af00      	add	r7, sp, #0
    ddb6:	4603      	mov	r3, r0
    ddb8:	6039      	str	r1, [r7, #0]
    ddba:	71fb      	strb	r3, [r7, #7]
    ddbc:	4613      	mov	r3, r2
    ddbe:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    ddc0:	683b      	ldr	r3, [r7, #0]
    ddc2:	781b      	ldrb	r3, [r3, #0]
    ddc4:	095b      	lsrs	r3, r3, #5
    ddc6:	b2db      	uxtb	r3, r3
    ddc8:	f003 0303 	and.w	r3, r3, #3
    ddcc:	2b01      	cmp	r3, #1
    ddce:	d002      	beq.n	ddd6 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    ddd0:	f06f 0309 	mvn.w	r3, #9
    ddd4:	e026      	b.n	de24 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    ddd6:	683b      	ldr	r3, [r7, #0]
    ddd8:	889b      	ldrh	r3, [r3, #4]
    ddda:	b29a      	uxth	r2, r3
    dddc:	4b13      	ldr	r3, [pc, #76]	; (de2c <cdcdf_acm_req+0x7c>)
    ddde:	781b      	ldrb	r3, [r3, #0]
    dde0:	b29b      	uxth	r3, r3
    dde2:	429a      	cmp	r2, r3
    dde4:	d007      	beq.n	ddf6 <cdcdf_acm_req+0x46>
    dde6:	683b      	ldr	r3, [r7, #0]
    dde8:	889b      	ldrh	r3, [r3, #4]
    ddea:	b29a      	uxth	r2, r3
    ddec:	4b0f      	ldr	r3, [pc, #60]	; (de2c <cdcdf_acm_req+0x7c>)
    ddee:	785b      	ldrb	r3, [r3, #1]
    ddf0:	b29b      	uxth	r3, r3
    ddf2:	429a      	cmp	r2, r3
    ddf4:	d114      	bne.n	de20 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    ddf6:	683b      	ldr	r3, [r7, #0]
    ddf8:	781b      	ldrb	r3, [r3, #0]
    ddfa:	b25b      	sxtb	r3, r3
    ddfc:	2b00      	cmp	r3, #0
    ddfe:	da07      	bge.n	de10 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    de00:	79ba      	ldrb	r2, [r7, #6]
    de02:	79fb      	ldrb	r3, [r7, #7]
    de04:	6839      	ldr	r1, [r7, #0]
    de06:	4618      	mov	r0, r3
    de08:	4b09      	ldr	r3, [pc, #36]	; (de30 <cdcdf_acm_req+0x80>)
    de0a:	4798      	blx	r3
    de0c:	4603      	mov	r3, r0
    de0e:	e009      	b.n	de24 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    de10:	79ba      	ldrb	r2, [r7, #6]
    de12:	79fb      	ldrb	r3, [r7, #7]
    de14:	6839      	ldr	r1, [r7, #0]
    de16:	4618      	mov	r0, r3
    de18:	4b06      	ldr	r3, [pc, #24]	; (de34 <cdcdf_acm_req+0x84>)
    de1a:	4798      	blx	r3
    de1c:	4603      	mov	r3, r0
    de1e:	e001      	b.n	de24 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    de20:	f06f 0309 	mvn.w	r3, #9
	}
}
    de24:	4618      	mov	r0, r3
    de26:	3708      	adds	r7, #8
    de28:	46bd      	mov	sp, r7
    de2a:	bd80      	pop	{r7, pc}
    de2c:	20002798 	.word	0x20002798
    de30:	0000dd51 	.word	0x0000dd51
    de34:	0000dc71 	.word	0x0000dc71

0000de38 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    de38:	b580      	push	{r7, lr}
    de3a:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    de3c:	4b0b      	ldr	r3, [pc, #44]	; (de6c <cdcdf_acm_init+0x34>)
    de3e:	4798      	blx	r3
    de40:	4603      	mov	r3, r0
    de42:	2b01      	cmp	r3, #1
    de44:	d902      	bls.n	de4c <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    de46:	f06f 0310 	mvn.w	r3, #16
    de4a:	e00d      	b.n	de68 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    de4c:	4b08      	ldr	r3, [pc, #32]	; (de70 <cdcdf_acm_init+0x38>)
    de4e:	4a09      	ldr	r2, [pc, #36]	; (de74 <cdcdf_acm_init+0x3c>)
    de50:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    de52:	4b07      	ldr	r3, [pc, #28]	; (de70 <cdcdf_acm_init+0x38>)
    de54:	4a08      	ldr	r2, [pc, #32]	; (de78 <cdcdf_acm_init+0x40>)
    de56:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    de58:	4805      	ldr	r0, [pc, #20]	; (de70 <cdcdf_acm_init+0x38>)
    de5a:	4b08      	ldr	r3, [pc, #32]	; (de7c <cdcdf_acm_init+0x44>)
    de5c:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    de5e:	4908      	ldr	r1, [pc, #32]	; (de80 <cdcdf_acm_init+0x48>)
    de60:	2001      	movs	r0, #1
    de62:	4b08      	ldr	r3, [pc, #32]	; (de84 <cdcdf_acm_init+0x4c>)
    de64:	4798      	blx	r3
	return ERR_NONE;
    de66:	2300      	movs	r3, #0
}
    de68:	4618      	mov	r0, r3
    de6a:	bd80      	pop	{r7, pc}
    de6c:	0000ecd5 	.word	0x0000ecd5
    de70:	2000278c 	.word	0x2000278c
    de74:	0000dc21 	.word	0x0000dc21
    de78:	20002798 	.word	0x20002798
    de7c:	0000ec3d 	.word	0x0000ec3d
    de80:	20000208 	.word	0x20000208
    de84:	0000eb6d 	.word	0x0000eb6d

0000de88 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    de88:	b590      	push	{r4, r7, lr}
    de8a:	b083      	sub	sp, #12
    de8c:	af00      	add	r7, sp, #0
    de8e:	6078      	str	r0, [r7, #4]
    de90:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    de92:	4b0b      	ldr	r3, [pc, #44]	; (dec0 <cdcdf_acm_read+0x38>)
    de94:	4798      	blx	r3
    de96:	4603      	mov	r3, r0
    de98:	f083 0301 	eor.w	r3, r3, #1
    de9c:	b2db      	uxtb	r3, r3
    de9e:	2b00      	cmp	r3, #0
    dea0:	d002      	beq.n	dea8 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    dea2:	f06f 0310 	mvn.w	r3, #16
    dea6:	e007      	b.n	deb8 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    dea8:	4b06      	ldr	r3, [pc, #24]	; (dec4 <cdcdf_acm_read+0x3c>)
    deaa:	7918      	ldrb	r0, [r3, #4]
    deac:	2300      	movs	r3, #0
    deae:	683a      	ldr	r2, [r7, #0]
    deb0:	6879      	ldr	r1, [r7, #4]
    deb2:	4c05      	ldr	r4, [pc, #20]	; (dec8 <cdcdf_acm_read+0x40>)
    deb4:	47a0      	blx	r4
    deb6:	4603      	mov	r3, r0
}
    deb8:	4618      	mov	r0, r3
    deba:	370c      	adds	r7, #12
    debc:	46bd      	mov	sp, r7
    debe:	bd90      	pop	{r4, r7, pc}
    dec0:	0000dfad 	.word	0x0000dfad
    dec4:	20002798 	.word	0x20002798
    dec8:	0000eb31 	.word	0x0000eb31

0000decc <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    decc:	b590      	push	{r4, r7, lr}
    dece:	b083      	sub	sp, #12
    ded0:	af00      	add	r7, sp, #0
    ded2:	6078      	str	r0, [r7, #4]
    ded4:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    ded6:	4b0b      	ldr	r3, [pc, #44]	; (df04 <cdcdf_acm_write+0x38>)
    ded8:	4798      	blx	r3
    deda:	4603      	mov	r3, r0
    dedc:	f083 0301 	eor.w	r3, r3, #1
    dee0:	b2db      	uxtb	r3, r3
    dee2:	2b00      	cmp	r3, #0
    dee4:	d002      	beq.n	deec <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    dee6:	f06f 0310 	mvn.w	r3, #16
    deea:	e007      	b.n	defc <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    deec:	4b06      	ldr	r3, [pc, #24]	; (df08 <cdcdf_acm_write+0x3c>)
    deee:	78d8      	ldrb	r0, [r3, #3]
    def0:	2301      	movs	r3, #1
    def2:	683a      	ldr	r2, [r7, #0]
    def4:	6879      	ldr	r1, [r7, #4]
    def6:	4c05      	ldr	r4, [pc, #20]	; (df0c <cdcdf_acm_write+0x40>)
    def8:	47a0      	blx	r4
    defa:	4603      	mov	r3, r0
}
    defc:	4618      	mov	r0, r3
    defe:	370c      	adds	r7, #12
    df00:	46bd      	mov	sp, r7
    df02:	bd90      	pop	{r4, r7, pc}
    df04:	0000dfad 	.word	0x0000dfad
    df08:	20002798 	.word	0x20002798
    df0c:	0000eb31 	.word	0x0000eb31

0000df10 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    df10:	b580      	push	{r7, lr}
    df12:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    df14:	4b05      	ldr	r3, [pc, #20]	; (df2c <cdcdf_acm_stop_xfer+0x1c>)
    df16:	78db      	ldrb	r3, [r3, #3]
    df18:	4618      	mov	r0, r3
    df1a:	4b05      	ldr	r3, [pc, #20]	; (df30 <cdcdf_acm_stop_xfer+0x20>)
    df1c:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    df1e:	4b03      	ldr	r3, [pc, #12]	; (df2c <cdcdf_acm_stop_xfer+0x1c>)
    df20:	791b      	ldrb	r3, [r3, #4]
    df22:	4618      	mov	r0, r3
    df24:	4b02      	ldr	r3, [pc, #8]	; (df30 <cdcdf_acm_stop_xfer+0x20>)
    df26:	4798      	blx	r3
}
    df28:	bf00      	nop
    df2a:	bd80      	pop	{r7, pc}
    df2c:	20002798 	.word	0x20002798
    df30:	00004ad9 	.word	0x00004ad9

0000df34 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    df34:	b580      	push	{r7, lr}
    df36:	b082      	sub	sp, #8
    df38:	af00      	add	r7, sp, #0
    df3a:	4603      	mov	r3, r0
    df3c:	6039      	str	r1, [r7, #0]
    df3e:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    df40:	79fb      	ldrb	r3, [r7, #7]
    df42:	2b03      	cmp	r3, #3
    df44:	d822      	bhi.n	df8c <cdcdf_acm_register_callback+0x58>
    df46:	a201      	add	r2, pc, #4	; (adr r2, df4c <cdcdf_acm_register_callback+0x18>)
    df48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    df4c:	0000df5d 	.word	0x0000df5d
    df50:	0000df6d 	.word	0x0000df6d
    df54:	0000df7d 	.word	0x0000df7d
    df58:	0000df85 	.word	0x0000df85
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    df5c:	4b0f      	ldr	r3, [pc, #60]	; (df9c <cdcdf_acm_register_callback+0x68>)
    df5e:	791b      	ldrb	r3, [r3, #4]
    df60:	683a      	ldr	r2, [r7, #0]
    df62:	2102      	movs	r1, #2
    df64:	4618      	mov	r0, r3
    df66:	4b0e      	ldr	r3, [pc, #56]	; (dfa0 <cdcdf_acm_register_callback+0x6c>)
    df68:	4798      	blx	r3
		break;
    df6a:	e012      	b.n	df92 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    df6c:	4b0b      	ldr	r3, [pc, #44]	; (df9c <cdcdf_acm_register_callback+0x68>)
    df6e:	78db      	ldrb	r3, [r3, #3]
    df70:	683a      	ldr	r2, [r7, #0]
    df72:	2102      	movs	r1, #2
    df74:	4618      	mov	r0, r3
    df76:	4b0a      	ldr	r3, [pc, #40]	; (dfa0 <cdcdf_acm_register_callback+0x6c>)
    df78:	4798      	blx	r3
		break;
    df7a:	e00a      	b.n	df92 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    df7c:	4a09      	ldr	r2, [pc, #36]	; (dfa4 <cdcdf_acm_register_callback+0x70>)
    df7e:	683b      	ldr	r3, [r7, #0]
    df80:	6013      	str	r3, [r2, #0]
		break;
    df82:	e006      	b.n	df92 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    df84:	4a08      	ldr	r2, [pc, #32]	; (dfa8 <cdcdf_acm_register_callback+0x74>)
    df86:	683b      	ldr	r3, [r7, #0]
    df88:	6013      	str	r3, [r2, #0]
		break;
    df8a:	e002      	b.n	df92 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    df8c:	f06f 030c 	mvn.w	r3, #12
    df90:	e000      	b.n	df94 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    df92:	2300      	movs	r3, #0
}
    df94:	4618      	mov	r0, r3
    df96:	3708      	adds	r7, #8
    df98:	46bd      	mov	sp, r7
    df9a:	bd80      	pop	{r7, pc}
    df9c:	20002798 	.word	0x20002798
    dfa0:	00004c05 	.word	0x00004c05
    dfa4:	200027ac 	.word	0x200027ac
    dfa8:	200027a8 	.word	0x200027a8

0000dfac <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    dfac:	b480      	push	{r7}
    dfae:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    dfb0:	4b03      	ldr	r3, [pc, #12]	; (dfc0 <cdcdf_acm_is_enabled+0x14>)
    dfb2:	795b      	ldrb	r3, [r3, #5]
}
    dfb4:	4618      	mov	r0, r3
    dfb6:	46bd      	mov	sp, r7
    dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfbc:	4770      	bx	lr
    dfbe:	bf00      	nop
    dfc0:	20002798 	.word	0x20002798

0000dfc4 <usb_get_u16>:
{
    dfc4:	b480      	push	{r7}
    dfc6:	b083      	sub	sp, #12
    dfc8:	af00      	add	r7, sp, #0
    dfca:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    dfcc:	687b      	ldr	r3, [r7, #4]
    dfce:	781b      	ldrb	r3, [r3, #0]
    dfd0:	b29a      	uxth	r2, r3
    dfd2:	687b      	ldr	r3, [r7, #4]
    dfd4:	3301      	adds	r3, #1
    dfd6:	781b      	ldrb	r3, [r3, #0]
    dfd8:	b29b      	uxth	r3, r3
    dfda:	021b      	lsls	r3, r3, #8
    dfdc:	b29b      	uxth	r3, r3
    dfde:	4413      	add	r3, r2
    dfe0:	b29b      	uxth	r3, r3
}
    dfe2:	4618      	mov	r0, r3
    dfe4:	370c      	adds	r7, #12
    dfe6:	46bd      	mov	sp, r7
    dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfec:	4770      	bx	lr

0000dfee <usb_desc_len>:
{
    dfee:	b480      	push	{r7}
    dff0:	b083      	sub	sp, #12
    dff2:	af00      	add	r7, sp, #0
    dff4:	6078      	str	r0, [r7, #4]
	return desc[0];
    dff6:	687b      	ldr	r3, [r7, #4]
    dff8:	781b      	ldrb	r3, [r3, #0]
}
    dffa:	4618      	mov	r0, r3
    dffc:	370c      	adds	r7, #12
    dffe:	46bd      	mov	sp, r7
    e000:	f85d 7b04 	ldr.w	r7, [sp], #4
    e004:	4770      	bx	lr
	...

0000e008 <usb_desc_next>:
{
    e008:	b580      	push	{r7, lr}
    e00a:	b082      	sub	sp, #8
    e00c:	af00      	add	r7, sp, #0
    e00e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    e010:	6878      	ldr	r0, [r7, #4]
    e012:	4b05      	ldr	r3, [pc, #20]	; (e028 <usb_desc_next+0x20>)
    e014:	4798      	blx	r3
    e016:	4603      	mov	r3, r0
    e018:	461a      	mov	r2, r3
    e01a:	687b      	ldr	r3, [r7, #4]
    e01c:	4413      	add	r3, r2
}
    e01e:	4618      	mov	r0, r3
    e020:	3708      	adds	r7, #8
    e022:	46bd      	mov	sp, r7
    e024:	bd80      	pop	{r7, pc}
    e026:	bf00      	nop
    e028:	0000dfef 	.word	0x0000dfef

0000e02c <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    e02c:	b580      	push	{r7, lr}
    e02e:	b082      	sub	sp, #8
    e030:	af00      	add	r7, sp, #0
    e032:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    e034:	687b      	ldr	r3, [r7, #4]
    e036:	3302      	adds	r3, #2
    e038:	4618      	mov	r0, r3
    e03a:	4b03      	ldr	r3, [pc, #12]	; (e048 <usb_cfg_desc_total_len+0x1c>)
    e03c:	4798      	blx	r3
    e03e:	4603      	mov	r3, r0
}
    e040:	4618      	mov	r0, r3
    e042:	3708      	adds	r7, #8
    e044:	46bd      	mov	sp, r7
    e046:	bd80      	pop	{r7, pc}
    e048:	0000dfc5 	.word	0x0000dfc5

0000e04c <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    e04c:	b590      	push	{r4, r7, lr}
    e04e:	b085      	sub	sp, #20
    e050:	af00      	add	r7, sp, #0
    e052:	4603      	mov	r3, r0
    e054:	6039      	str	r1, [r7, #0]
    e056:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    e058:	2300      	movs	r3, #0
    e05a:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    e05c:	683b      	ldr	r3, [r7, #0]
    e05e:	799a      	ldrb	r2, [r3, #6]
    e060:	79db      	ldrb	r3, [r3, #7]
    e062:	021b      	lsls	r3, r3, #8
    e064:	4313      	orrs	r3, r2
    e066:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    e068:	897b      	ldrh	r3, [r7, #10]
    e06a:	2b12      	cmp	r3, #18
    e06c:	d901      	bls.n	e072 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    e06e:	2312      	movs	r3, #18
    e070:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    e072:	68fb      	ldr	r3, [r7, #12]
    e074:	2b00      	cmp	r3, #0
    e076:	d10a      	bne.n	e08e <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    e078:	4b0f      	ldr	r3, [pc, #60]	; (e0b8 <usbdc_get_dev_desc+0x6c>)
    e07a:	681b      	ldr	r3, [r3, #0]
    e07c:	6818      	ldr	r0, [r3, #0]
    e07e:	4b0e      	ldr	r3, [pc, #56]	; (e0b8 <usbdc_get_dev_desc+0x6c>)
    e080:	681b      	ldr	r3, [r3, #0]
    e082:	685b      	ldr	r3, [r3, #4]
    e084:	2201      	movs	r2, #1
    e086:	4619      	mov	r1, r3
    e088:	4b0c      	ldr	r3, [pc, #48]	; (e0bc <usbdc_get_dev_desc+0x70>)
    e08a:	4798      	blx	r3
    e08c:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    e08e:	68fb      	ldr	r3, [r7, #12]
    e090:	2b00      	cmp	r3, #0
    e092:	d101      	bne.n	e098 <usbdc_get_dev_desc+0x4c>
		return false;
    e094:	2300      	movs	r3, #0
    e096:	e00b      	b.n	e0b0 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    e098:	897a      	ldrh	r2, [r7, #10]
    e09a:	79f8      	ldrb	r0, [r7, #7]
    e09c:	2300      	movs	r3, #0
    e09e:	68f9      	ldr	r1, [r7, #12]
    e0a0:	4c07      	ldr	r4, [pc, #28]	; (e0c0 <usbdc_get_dev_desc+0x74>)
    e0a2:	47a0      	blx	r4
    e0a4:	4603      	mov	r3, r0
    e0a6:	2b00      	cmp	r3, #0
    e0a8:	d001      	beq.n	e0ae <usbdc_get_dev_desc+0x62>
		return false;
    e0aa:	2300      	movs	r3, #0
    e0ac:	e000      	b.n	e0b0 <usbdc_get_dev_desc+0x64>
	}
	return true;
    e0ae:	2301      	movs	r3, #1
}
    e0b0:	4618      	mov	r0, r3
    e0b2:	3714      	adds	r7, #20
    e0b4:	46bd      	mov	sp, r7
    e0b6:	bd90      	pop	{r4, r7, pc}
    e0b8:	200027b0 	.word	0x200027b0
    e0bc:	0000edc1 	.word	0x0000edc1
    e0c0:	0000eb31 	.word	0x0000eb31

0000e0c4 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    e0c4:	b590      	push	{r4, r7, lr}
    e0c6:	b087      	sub	sp, #28
    e0c8:	af00      	add	r7, sp, #0
    e0ca:	4603      	mov	r3, r0
    e0cc:	6039      	str	r1, [r7, #0]
    e0ce:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    e0d0:	2300      	movs	r3, #0
    e0d2:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    e0d4:	683b      	ldr	r3, [r7, #0]
    e0d6:	799a      	ldrb	r2, [r3, #6]
    e0d8:	79db      	ldrb	r3, [r3, #7]
    e0da:	021b      	lsls	r3, r3, #8
    e0dc:	4313      	orrs	r3, r2
    e0de:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    e0e0:	683b      	ldr	r3, [r7, #0]
    e0e2:	885b      	ldrh	r3, [r3, #2]
    e0e4:	b29b      	uxth	r3, r3
    e0e6:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    e0e8:	8a7a      	ldrh	r2, [r7, #18]
    e0ea:	4b1e      	ldr	r3, [pc, #120]	; (e164 <usbdc_get_cfg_desc+0xa0>)
    e0ec:	7f1b      	ldrb	r3, [r3, #28]
    e0ee:	3b01      	subs	r3, #1
    e0f0:	4013      	ands	r3, r2
    e0f2:	2b00      	cmp	r3, #0
    e0f4:	bf0c      	ite	eq
    e0f6:	2301      	moveq	r3, #1
    e0f8:	2300      	movne	r3, #0
    e0fa:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    e0fc:	697b      	ldr	r3, [r7, #20]
    e0fe:	2b00      	cmp	r3, #0
    e100:	d10c      	bne.n	e11c <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    e102:	4b18      	ldr	r3, [pc, #96]	; (e164 <usbdc_get_cfg_desc+0xa0>)
    e104:	681b      	ldr	r3, [r3, #0]
    e106:	6818      	ldr	r0, [r3, #0]
    e108:	4b16      	ldr	r3, [pc, #88]	; (e164 <usbdc_get_cfg_desc+0xa0>)
    e10a:	681b      	ldr	r3, [r3, #0]
    e10c:	6859      	ldr	r1, [r3, #4]
    e10e:	7c3b      	ldrb	r3, [r7, #16]
    e110:	3301      	adds	r3, #1
    e112:	b2db      	uxtb	r3, r3
    e114:	461a      	mov	r2, r3
    e116:	4b14      	ldr	r3, [pc, #80]	; (e168 <usbdc_get_cfg_desc+0xa4>)
    e118:	4798      	blx	r3
    e11a:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    e11c:	697b      	ldr	r3, [r7, #20]
    e11e:	2b00      	cmp	r3, #0
    e120:	d101      	bne.n	e126 <usbdc_get_cfg_desc+0x62>
		return false;
    e122:	2300      	movs	r3, #0
    e124:	e019      	b.n	e15a <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    e126:	6978      	ldr	r0, [r7, #20]
    e128:	4b10      	ldr	r3, [pc, #64]	; (e16c <usbdc_get_cfg_desc+0xa8>)
    e12a:	4798      	blx	r3
    e12c:	4603      	mov	r3, r0
    e12e:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    e130:	8a7a      	ldrh	r2, [r7, #18]
    e132:	89fb      	ldrh	r3, [r7, #14]
    e134:	429a      	cmp	r2, r3
    e136:	d802      	bhi.n	e13e <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    e138:	2300      	movs	r3, #0
    e13a:	747b      	strb	r3, [r7, #17]
    e13c:	e001      	b.n	e142 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    e13e:	89fb      	ldrh	r3, [r7, #14]
    e140:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    e142:	8a7a      	ldrh	r2, [r7, #18]
    e144:	7c7b      	ldrb	r3, [r7, #17]
    e146:	79f8      	ldrb	r0, [r7, #7]
    e148:	6979      	ldr	r1, [r7, #20]
    e14a:	4c09      	ldr	r4, [pc, #36]	; (e170 <usbdc_get_cfg_desc+0xac>)
    e14c:	47a0      	blx	r4
    e14e:	4603      	mov	r3, r0
    e150:	2b00      	cmp	r3, #0
    e152:	d001      	beq.n	e158 <usbdc_get_cfg_desc+0x94>
		return false;
    e154:	2300      	movs	r3, #0
    e156:	e000      	b.n	e15a <usbdc_get_cfg_desc+0x96>
	}
	return true;
    e158:	2301      	movs	r3, #1
}
    e15a:	4618      	mov	r0, r3
    e15c:	371c      	adds	r7, #28
    e15e:	46bd      	mov	sp, r7
    e160:	bd90      	pop	{r4, r7, pc}
    e162:	bf00      	nop
    e164:	200027b0 	.word	0x200027b0
    e168:	0000ee81 	.word	0x0000ee81
    e16c:	0000e02d 	.word	0x0000e02d
    e170:	0000eb31 	.word	0x0000eb31

0000e174 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    e174:	b590      	push	{r4, r7, lr}
    e176:	b085      	sub	sp, #20
    e178:	af00      	add	r7, sp, #0
    e17a:	4603      	mov	r3, r0
    e17c:	6039      	str	r1, [r7, #0]
    e17e:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    e180:	683b      	ldr	r3, [r7, #0]
    e182:	799a      	ldrb	r2, [r3, #6]
    e184:	79db      	ldrb	r3, [r3, #7]
    e186:	021b      	lsls	r3, r3, #8
    e188:	4313      	orrs	r3, r2
    e18a:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    e18c:	683b      	ldr	r3, [r7, #0]
    e18e:	885b      	ldrh	r3, [r3, #2]
    e190:	b29b      	uxth	r3, r3
    e192:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    e194:	89fa      	ldrh	r2, [r7, #14]
    e196:	4b1a      	ldr	r3, [pc, #104]	; (e200 <usbdc_get_str_desc+0x8c>)
    e198:	7f1b      	ldrb	r3, [r3, #28]
    e19a:	3b01      	subs	r3, #1
    e19c:	4013      	ands	r3, r2
    e19e:	2b00      	cmp	r3, #0
    e1a0:	bf0c      	ite	eq
    e1a2:	2301      	moveq	r3, #1
    e1a4:	2300      	movne	r3, #0
    e1a6:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    e1a8:	4b15      	ldr	r3, [pc, #84]	; (e200 <usbdc_get_str_desc+0x8c>)
    e1aa:	681b      	ldr	r3, [r3, #0]
    e1ac:	6818      	ldr	r0, [r3, #0]
    e1ae:	4b14      	ldr	r3, [pc, #80]	; (e200 <usbdc_get_str_desc+0x8c>)
    e1b0:	681b      	ldr	r3, [r3, #0]
    e1b2:	685b      	ldr	r3, [r3, #4]
    e1b4:	7b3a      	ldrb	r2, [r7, #12]
    e1b6:	4619      	mov	r1, r3
    e1b8:	4b12      	ldr	r3, [pc, #72]	; (e204 <usbdc_get_str_desc+0x90>)
    e1ba:	4798      	blx	r3
    e1bc:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    e1be:	68bb      	ldr	r3, [r7, #8]
    e1c0:	2b00      	cmp	r3, #0
    e1c2:	d101      	bne.n	e1c8 <usbdc_get_str_desc+0x54>
		return false;
    e1c4:	2300      	movs	r3, #0
    e1c6:	e017      	b.n	e1f8 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    e1c8:	68bb      	ldr	r3, [r7, #8]
    e1ca:	781b      	ldrb	r3, [r3, #0]
    e1cc:	b29b      	uxth	r3, r3
    e1ce:	89fa      	ldrh	r2, [r7, #14]
    e1d0:	429a      	cmp	r2, r3
    e1d2:	d802      	bhi.n	e1da <usbdc_get_str_desc+0x66>
		need_zlp = false;
    e1d4:	2300      	movs	r3, #0
    e1d6:	737b      	strb	r3, [r7, #13]
    e1d8:	e002      	b.n	e1e0 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    e1da:	68bb      	ldr	r3, [r7, #8]
    e1dc:	781b      	ldrb	r3, [r3, #0]
    e1de:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    e1e0:	89fa      	ldrh	r2, [r7, #14]
    e1e2:	7b7b      	ldrb	r3, [r7, #13]
    e1e4:	79f8      	ldrb	r0, [r7, #7]
    e1e6:	68b9      	ldr	r1, [r7, #8]
    e1e8:	4c07      	ldr	r4, [pc, #28]	; (e208 <usbdc_get_str_desc+0x94>)
    e1ea:	47a0      	blx	r4
    e1ec:	4603      	mov	r3, r0
    e1ee:	2b00      	cmp	r3, #0
    e1f0:	d001      	beq.n	e1f6 <usbdc_get_str_desc+0x82>
		return false;
    e1f2:	2300      	movs	r3, #0
    e1f4:	e000      	b.n	e1f8 <usbdc_get_str_desc+0x84>
	}
	return true;
    e1f6:	2301      	movs	r3, #1
}
    e1f8:	4618      	mov	r0, r3
    e1fa:	3714      	adds	r7, #20
    e1fc:	46bd      	mov	sp, r7
    e1fe:	bd90      	pop	{r4, r7, pc}
    e200:	200027b0 	.word	0x200027b0
    e204:	0000eef9 	.word	0x0000eef9
    e208:	0000eb31 	.word	0x0000eb31

0000e20c <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    e20c:	b580      	push	{r7, lr}
    e20e:	b084      	sub	sp, #16
    e210:	af00      	add	r7, sp, #0
    e212:	4603      	mov	r3, r0
    e214:	6039      	str	r1, [r7, #0]
    e216:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    e218:	683b      	ldr	r3, [r7, #0]
    e21a:	885b      	ldrh	r3, [r3, #2]
    e21c:	b29b      	uxth	r3, r3
    e21e:	0a1b      	lsrs	r3, r3, #8
    e220:	b29b      	uxth	r3, r3
    e222:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    e224:	7bfb      	ldrb	r3, [r7, #15]
    e226:	2b02      	cmp	r3, #2
    e228:	d00d      	beq.n	e246 <usbdc_get_desc_req+0x3a>
    e22a:	2b03      	cmp	r3, #3
    e22c:	d012      	beq.n	e254 <usbdc_get_desc_req+0x48>
    e22e:	2b01      	cmp	r3, #1
    e230:	d002      	beq.n	e238 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    e232:	bf00      	nop
	}
	return false;
    e234:	2300      	movs	r3, #0
    e236:	e013      	b.n	e260 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    e238:	79fb      	ldrb	r3, [r7, #7]
    e23a:	6839      	ldr	r1, [r7, #0]
    e23c:	4618      	mov	r0, r3
    e23e:	4b0a      	ldr	r3, [pc, #40]	; (e268 <usbdc_get_desc_req+0x5c>)
    e240:	4798      	blx	r3
    e242:	4603      	mov	r3, r0
    e244:	e00c      	b.n	e260 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    e246:	79fb      	ldrb	r3, [r7, #7]
    e248:	6839      	ldr	r1, [r7, #0]
    e24a:	4618      	mov	r0, r3
    e24c:	4b07      	ldr	r3, [pc, #28]	; (e26c <usbdc_get_desc_req+0x60>)
    e24e:	4798      	blx	r3
    e250:	4603      	mov	r3, r0
    e252:	e005      	b.n	e260 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    e254:	79fb      	ldrb	r3, [r7, #7]
    e256:	6839      	ldr	r1, [r7, #0]
    e258:	4618      	mov	r0, r3
    e25a:	4b05      	ldr	r3, [pc, #20]	; (e270 <usbdc_get_desc_req+0x64>)
    e25c:	4798      	blx	r3
    e25e:	4603      	mov	r3, r0
}
    e260:	4618      	mov	r0, r3
    e262:	3710      	adds	r7, #16
    e264:	46bd      	mov	sp, r7
    e266:	bd80      	pop	{r7, pc}
    e268:	0000e04d 	.word	0x0000e04d
    e26c:	0000e0c5 	.word	0x0000e0c5
    e270:	0000e175 	.word	0x0000e175

0000e274 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    e274:	b590      	push	{r4, r7, lr}
    e276:	b085      	sub	sp, #20
    e278:	af00      	add	r7, sp, #0
    e27a:	4603      	mov	r3, r0
    e27c:	6039      	str	r1, [r7, #0]
    e27e:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e280:	683b      	ldr	r3, [r7, #0]
    e282:	781b      	ldrb	r3, [r3, #0]
    e284:	f003 031f 	and.w	r3, r3, #31
    e288:	2b00      	cmp	r3, #0
    e28a:	db1b      	blt.n	e2c4 <usbdc_get_status_req+0x50>
    e28c:	2b01      	cmp	r3, #1
    e28e:	dd02      	ble.n	e296 <usbdc_get_status_req+0x22>
    e290:	2b02      	cmp	r3, #2
    e292:	d003      	beq.n	e29c <usbdc_get_status_req+0x28>
    e294:	e016      	b.n	e2c4 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    e296:	2300      	movs	r3, #0
    e298:	60fb      	str	r3, [r7, #12]
		break;
    e29a:	e015      	b.n	e2c8 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    e29c:	683b      	ldr	r3, [r7, #0]
    e29e:	889b      	ldrh	r3, [r3, #4]
    e2a0:	b29b      	uxth	r3, r3
    e2a2:	b2db      	uxtb	r3, r3
    e2a4:	2102      	movs	r1, #2
    e2a6:	4618      	mov	r0, r3
    e2a8:	4b0f      	ldr	r3, [pc, #60]	; (e2e8 <usbdc_get_status_req+0x74>)
    e2aa:	4798      	blx	r3
    e2ac:	4603      	mov	r3, r0
    e2ae:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    e2b0:	68fb      	ldr	r3, [r7, #12]
    e2b2:	2b00      	cmp	r3, #0
    e2b4:	da01      	bge.n	e2ba <usbdc_get_status_req+0x46>
			return false;
    e2b6:	2300      	movs	r3, #0
    e2b8:	e012      	b.n	e2e0 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    e2ba:	68fb      	ldr	r3, [r7, #12]
    e2bc:	f003 0301 	and.w	r3, r3, #1
    e2c0:	60fb      	str	r3, [r7, #12]
		break;
    e2c2:	e001      	b.n	e2c8 <usbdc_get_status_req+0x54>
	default:
		return false;
    e2c4:	2300      	movs	r3, #0
    e2c6:	e00b      	b.n	e2e0 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    e2c8:	4b08      	ldr	r3, [pc, #32]	; (e2ec <usbdc_get_status_req+0x78>)
    e2ca:	695b      	ldr	r3, [r3, #20]
    e2cc:	89ba      	ldrh	r2, [r7, #12]
    e2ce:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    e2d0:	4b06      	ldr	r3, [pc, #24]	; (e2ec <usbdc_get_status_req+0x78>)
    e2d2:	6959      	ldr	r1, [r3, #20]
    e2d4:	79f8      	ldrb	r0, [r7, #7]
    e2d6:	2300      	movs	r3, #0
    e2d8:	2202      	movs	r2, #2
    e2da:	4c05      	ldr	r4, [pc, #20]	; (e2f0 <usbdc_get_status_req+0x7c>)
    e2dc:	47a0      	blx	r4
	return true;
    e2de:	2301      	movs	r3, #1
}
    e2e0:	4618      	mov	r0, r3
    e2e2:	3714      	adds	r7, #20
    e2e4:	46bd      	mov	sp, r7
    e2e6:	bd90      	pop	{r4, r7, pc}
    e2e8:	00004bb1 	.word	0x00004bb1
    e2ec:	200027b0 	.word	0x200027b0
    e2f0:	0000eb31 	.word	0x0000eb31

0000e2f4 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    e2f4:	b590      	push	{r4, r7, lr}
    e2f6:	b085      	sub	sp, #20
    e2f8:	af00      	add	r7, sp, #0
    e2fa:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    e2fc:	4b1f      	ldr	r3, [pc, #124]	; (e37c <usbdc_get_interface+0x88>)
    e2fe:	691b      	ldr	r3, [r3, #16]
    e300:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    e302:	4b1e      	ldr	r3, [pc, #120]	; (e37c <usbdc_get_interface+0x88>)
    e304:	7f5b      	ldrb	r3, [r3, #29]
    e306:	461a      	mov	r2, r3
    e308:	687b      	ldr	r3, [r7, #4]
    e30a:	889b      	ldrh	r3, [r3, #4]
    e30c:	b29b      	uxth	r3, r3
    e30e:	fa42 f303 	asr.w	r3, r2, r3
    e312:	f003 0301 	and.w	r3, r3, #1
    e316:	2b00      	cmp	r3, #0
    e318:	d128      	bne.n	e36c <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    e31a:	4b18      	ldr	r3, [pc, #96]	; (e37c <usbdc_get_interface+0x88>)
    e31c:	695b      	ldr	r3, [r3, #20]
    e31e:	2200      	movs	r2, #0
    e320:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    e322:	4b16      	ldr	r3, [pc, #88]	; (e37c <usbdc_get_interface+0x88>)
    e324:	6959      	ldr	r1, [r3, #20]
    e326:	2300      	movs	r3, #0
    e328:	2201      	movs	r2, #1
    e32a:	2000      	movs	r0, #0
    e32c:	4c14      	ldr	r4, [pc, #80]	; (e380 <usbdc_get_interface+0x8c>)
    e32e:	47a0      	blx	r4
		return true;
    e330:	2301      	movs	r3, #1
    e332:	e01f      	b.n	e374 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    e334:	68fb      	ldr	r3, [r7, #12]
    e336:	685b      	ldr	r3, [r3, #4]
    e338:	687a      	ldr	r2, [r7, #4]
    e33a:	2102      	movs	r1, #2
    e33c:	68f8      	ldr	r0, [r7, #12]
    e33e:	4798      	blx	r3
    e340:	60b8      	str	r0, [r7, #8]
    e342:	68bb      	ldr	r3, [r7, #8]
    e344:	2b00      	cmp	r3, #0
    e346:	da03      	bge.n	e350 <usbdc_get_interface+0x5c>
			func = func->next;
    e348:	68fb      	ldr	r3, [r7, #12]
    e34a:	681b      	ldr	r3, [r3, #0]
    e34c:	60fb      	str	r3, [r7, #12]
    e34e:	e00d      	b.n	e36c <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    e350:	4b0a      	ldr	r3, [pc, #40]	; (e37c <usbdc_get_interface+0x88>)
    e352:	695b      	ldr	r3, [r3, #20]
    e354:	68ba      	ldr	r2, [r7, #8]
    e356:	b2d2      	uxtb	r2, r2
    e358:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    e35a:	4b08      	ldr	r3, [pc, #32]	; (e37c <usbdc_get_interface+0x88>)
    e35c:	6959      	ldr	r1, [r3, #20]
    e35e:	2300      	movs	r3, #0
    e360:	2201      	movs	r2, #1
    e362:	2000      	movs	r0, #0
    e364:	4c06      	ldr	r4, [pc, #24]	; (e380 <usbdc_get_interface+0x8c>)
    e366:	47a0      	blx	r4
			return true;
    e368:	2301      	movs	r3, #1
    e36a:	e003      	b.n	e374 <usbdc_get_interface+0x80>
	while (NULL != func) {
    e36c:	68fb      	ldr	r3, [r7, #12]
    e36e:	2b00      	cmp	r3, #0
    e370:	d1e0      	bne.n	e334 <usbdc_get_interface+0x40>
		}
	}
	return false;
    e372:	2300      	movs	r3, #0
}
    e374:	4618      	mov	r0, r3
    e376:	3714      	adds	r7, #20
    e378:	46bd      	mov	sp, r7
    e37a:	bd90      	pop	{r4, r7, pc}
    e37c:	200027b0 	.word	0x200027b0
    e380:	0000eb31 	.word	0x0000eb31

0000e384 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    e384:	b590      	push	{r4, r7, lr}
    e386:	b083      	sub	sp, #12
    e388:	af00      	add	r7, sp, #0
    e38a:	4603      	mov	r3, r0
    e38c:	6039      	str	r1, [r7, #0]
    e38e:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    e390:	683b      	ldr	r3, [r7, #0]
    e392:	785b      	ldrb	r3, [r3, #1]
    e394:	2b0a      	cmp	r3, #10
    e396:	d83a      	bhi.n	e40e <usbdc_get_req+0x8a>
    e398:	a201      	add	r2, pc, #4	; (adr r2, e3a0 <usbdc_get_req+0x1c>)
    e39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e39e:	bf00      	nop
    e3a0:	0000e3f7 	.word	0x0000e3f7
    e3a4:	0000e40f 	.word	0x0000e40f
    e3a8:	0000e40f 	.word	0x0000e40f
    e3ac:	0000e40f 	.word	0x0000e40f
    e3b0:	0000e40f 	.word	0x0000e40f
    e3b4:	0000e40f 	.word	0x0000e40f
    e3b8:	0000e3cd 	.word	0x0000e3cd
    e3bc:	0000e40f 	.word	0x0000e40f
    e3c0:	0000e3db 	.word	0x0000e3db
    e3c4:	0000e40f 	.word	0x0000e40f
    e3c8:	0000e405 	.word	0x0000e405
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    e3cc:	79fb      	ldrb	r3, [r7, #7]
    e3ce:	6839      	ldr	r1, [r7, #0]
    e3d0:	4618      	mov	r0, r3
    e3d2:	4b11      	ldr	r3, [pc, #68]	; (e418 <usbdc_get_req+0x94>)
    e3d4:	4798      	blx	r3
    e3d6:	4603      	mov	r3, r0
    e3d8:	e01a      	b.n	e410 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    e3da:	4b10      	ldr	r3, [pc, #64]	; (e41c <usbdc_get_req+0x98>)
    e3dc:	695b      	ldr	r3, [r3, #20]
    e3de:	4a0f      	ldr	r2, [pc, #60]	; (e41c <usbdc_get_req+0x98>)
    e3e0:	7ed2      	ldrb	r2, [r2, #27]
    e3e2:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    e3e4:	4b0d      	ldr	r3, [pc, #52]	; (e41c <usbdc_get_req+0x98>)
    e3e6:	6959      	ldr	r1, [r3, #20]
    e3e8:	79f8      	ldrb	r0, [r7, #7]
    e3ea:	2300      	movs	r3, #0
    e3ec:	2201      	movs	r2, #1
    e3ee:	4c0c      	ldr	r4, [pc, #48]	; (e420 <usbdc_get_req+0x9c>)
    e3f0:	47a0      	blx	r4
		return true;
    e3f2:	2301      	movs	r3, #1
    e3f4:	e00c      	b.n	e410 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    e3f6:	79fb      	ldrb	r3, [r7, #7]
    e3f8:	6839      	ldr	r1, [r7, #0]
    e3fa:	4618      	mov	r0, r3
    e3fc:	4b09      	ldr	r3, [pc, #36]	; (e424 <usbdc_get_req+0xa0>)
    e3fe:	4798      	blx	r3
    e400:	4603      	mov	r3, r0
    e402:	e005      	b.n	e410 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    e404:	6838      	ldr	r0, [r7, #0]
    e406:	4b08      	ldr	r3, [pc, #32]	; (e428 <usbdc_get_req+0xa4>)
    e408:	4798      	blx	r3
    e40a:	4603      	mov	r3, r0
    e40c:	e000      	b.n	e410 <usbdc_get_req+0x8c>
	default:
		return false;
    e40e:	2300      	movs	r3, #0
	}
}
    e410:	4618      	mov	r0, r3
    e412:	370c      	adds	r7, #12
    e414:	46bd      	mov	sp, r7
    e416:	bd90      	pop	{r4, r7, pc}
    e418:	0000e20d 	.word	0x0000e20d
    e41c:	200027b0 	.word	0x200027b0
    e420:	0000eb31 	.word	0x0000eb31
    e424:	0000e275 	.word	0x0000e275
    e428:	0000e2f5 	.word	0x0000e2f5

0000e42c <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    e42c:	b590      	push	{r4, r7, lr}
    e42e:	b083      	sub	sp, #12
    e430:	af00      	add	r7, sp, #0
    e432:	4603      	mov	r3, r0
    e434:	6039      	str	r1, [r7, #0]
    e436:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e438:	683b      	ldr	r3, [r7, #0]
    e43a:	781b      	ldrb	r3, [r3, #0]
    e43c:	f003 031f 	and.w	r3, r3, #31
    e440:	2b02      	cmp	r3, #2
    e442:	d116      	bne.n	e472 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    e444:	683b      	ldr	r3, [r7, #0]
    e446:	88db      	ldrh	r3, [r3, #6]
    e448:	b29b      	uxth	r3, r3
    e44a:	2b00      	cmp	r3, #0
    e44c:	d001      	beq.n	e452 <usbdc_clear_ftr_req+0x26>
			return false;
    e44e:	2300      	movs	r3, #0
    e450:	e010      	b.n	e474 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    e452:	683b      	ldr	r3, [r7, #0]
    e454:	889b      	ldrh	r3, [r3, #4]
    e456:	b29b      	uxth	r3, r3
    e458:	b2db      	uxtb	r3, r3
    e45a:	2100      	movs	r1, #0
    e45c:	4618      	mov	r0, r3
    e45e:	4b07      	ldr	r3, [pc, #28]	; (e47c <usbdc_clear_ftr_req+0x50>)
    e460:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    e462:	79f8      	ldrb	r0, [r7, #7]
    e464:	2301      	movs	r3, #1
    e466:	2200      	movs	r2, #0
    e468:	2100      	movs	r1, #0
    e46a:	4c05      	ldr	r4, [pc, #20]	; (e480 <usbdc_clear_ftr_req+0x54>)
    e46c:	47a0      	blx	r4
		return true;
    e46e:	2301      	movs	r3, #1
    e470:	e000      	b.n	e474 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    e472:	2300      	movs	r3, #0
	}
}
    e474:	4618      	mov	r0, r3
    e476:	370c      	adds	r7, #12
    e478:	46bd      	mov	sp, r7
    e47a:	bd90      	pop	{r4, r7, pc}
    e47c:	00004bb1 	.word	0x00004bb1
    e480:	0000eb31 	.word	0x0000eb31

0000e484 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    e484:	b590      	push	{r4, r7, lr}
    e486:	b083      	sub	sp, #12
    e488:	af00      	add	r7, sp, #0
    e48a:	4603      	mov	r3, r0
    e48c:	6039      	str	r1, [r7, #0]
    e48e:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e490:	683b      	ldr	r3, [r7, #0]
    e492:	781b      	ldrb	r3, [r3, #0]
    e494:	f003 031f 	and.w	r3, r3, #31
    e498:	2b02      	cmp	r3, #2
    e49a:	d116      	bne.n	e4ca <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    e49c:	683b      	ldr	r3, [r7, #0]
    e49e:	88db      	ldrh	r3, [r3, #6]
    e4a0:	b29b      	uxth	r3, r3
    e4a2:	2b00      	cmp	r3, #0
    e4a4:	d001      	beq.n	e4aa <usbdc_set_ftr_req+0x26>
			return false;
    e4a6:	2300      	movs	r3, #0
    e4a8:	e010      	b.n	e4cc <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    e4aa:	683b      	ldr	r3, [r7, #0]
    e4ac:	889b      	ldrh	r3, [r3, #4]
    e4ae:	b29b      	uxth	r3, r3
    e4b0:	b2db      	uxtb	r3, r3
    e4b2:	2101      	movs	r1, #1
    e4b4:	4618      	mov	r0, r3
    e4b6:	4b07      	ldr	r3, [pc, #28]	; (e4d4 <usbdc_set_ftr_req+0x50>)
    e4b8:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    e4ba:	79f8      	ldrb	r0, [r7, #7]
    e4bc:	2301      	movs	r3, #1
    e4be:	2200      	movs	r2, #0
    e4c0:	2100      	movs	r1, #0
    e4c2:	4c05      	ldr	r4, [pc, #20]	; (e4d8 <usbdc_set_ftr_req+0x54>)
    e4c4:	47a0      	blx	r4
		return true;
    e4c6:	2301      	movs	r3, #1
    e4c8:	e000      	b.n	e4cc <usbdc_set_ftr_req+0x48>
	default:
		return false;
    e4ca:	2300      	movs	r3, #0
	}
}
    e4cc:	4618      	mov	r0, r3
    e4ce:	370c      	adds	r7, #12
    e4d0:	46bd      	mov	sp, r7
    e4d2:	bd90      	pop	{r4, r7, pc}
    e4d4:	00004bb1 	.word	0x00004bb1
    e4d8:	0000eb31 	.word	0x0000eb31

0000e4dc <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    e4dc:	b580      	push	{r7, lr}
    e4de:	b082      	sub	sp, #8
    e4e0:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    e4e2:	4b0a      	ldr	r3, [pc, #40]	; (e50c <usbdc_unconfig+0x30>)
    e4e4:	691b      	ldr	r3, [r3, #16]
    e4e6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    e4e8:	e008      	b.n	e4fc <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    e4ea:	687b      	ldr	r3, [r7, #4]
    e4ec:	685b      	ldr	r3, [r3, #4]
    e4ee:	2200      	movs	r2, #0
    e4f0:	2101      	movs	r1, #1
    e4f2:	6878      	ldr	r0, [r7, #4]
    e4f4:	4798      	blx	r3
		func = func->next;
    e4f6:	687b      	ldr	r3, [r7, #4]
    e4f8:	681b      	ldr	r3, [r3, #0]
    e4fa:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    e4fc:	687b      	ldr	r3, [r7, #4]
    e4fe:	2b00      	cmp	r3, #0
    e500:	d1f3      	bne.n	e4ea <usbdc_unconfig+0xe>
	}
}
    e502:	bf00      	nop
    e504:	3708      	adds	r7, #8
    e506:	46bd      	mov	sp, r7
    e508:	bd80      	pop	{r7, pc}
    e50a:	bf00      	nop
    e50c:	200027b0 	.word	0x200027b0

0000e510 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    e510:	b580      	push	{r7, lr}
    e512:	b088      	sub	sp, #32
    e514:	af00      	add	r7, sp, #0
    e516:	4603      	mov	r3, r0
    e518:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    e51a:	2300      	movs	r3, #0
    e51c:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    e51e:	23ff      	movs	r3, #255	; 0xff
    e520:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    e522:	79fb      	ldrb	r3, [r7, #7]
    e524:	2b00      	cmp	r3, #0
    e526:	d103      	bne.n	e530 <usbdc_set_config+0x20>
		usbdc_unconfig();
    e528:	4b2e      	ldr	r3, [pc, #184]	; (e5e4 <usbdc_set_config+0xd4>)
    e52a:	4798      	blx	r3
		return true;
    e52c:	2301      	movs	r3, #1
    e52e:	e055      	b.n	e5dc <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    e530:	69bb      	ldr	r3, [r7, #24]
    e532:	2b00      	cmp	r3, #0
    e534:	d10a      	bne.n	e54c <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    e536:	4b2c      	ldr	r3, [pc, #176]	; (e5e8 <usbdc_set_config+0xd8>)
    e538:	681b      	ldr	r3, [r3, #0]
    e53a:	6818      	ldr	r0, [r3, #0]
    e53c:	4b2a      	ldr	r3, [pc, #168]	; (e5e8 <usbdc_set_config+0xd8>)
    e53e:	681b      	ldr	r3, [r3, #0]
    e540:	685b      	ldr	r3, [r3, #4]
    e542:	79fa      	ldrb	r2, [r7, #7]
    e544:	4619      	mov	r1, r3
    e546:	4b29      	ldr	r3, [pc, #164]	; (e5ec <usbdc_set_config+0xdc>)
    e548:	4798      	blx	r3
    e54a:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    e54c:	69bb      	ldr	r3, [r7, #24]
    e54e:	2b00      	cmp	r3, #0
    e550:	d101      	bne.n	e556 <usbdc_set_config+0x46>
		return false;
    e552:	2300      	movs	r3, #0
    e554:	e042      	b.n	e5dc <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    e556:	69b8      	ldr	r0, [r7, #24]
    e558:	4b25      	ldr	r3, [pc, #148]	; (e5f0 <usbdc_set_config+0xe0>)
    e55a:	4798      	blx	r3
    e55c:	4603      	mov	r3, r0
    e55e:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    e560:	8abb      	ldrh	r3, [r7, #20]
    e562:	69ba      	ldr	r2, [r7, #24]
    e564:	4413      	add	r3, r2
    e566:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    e568:	693b      	ldr	r3, [r7, #16]
    e56a:	2204      	movs	r2, #4
    e56c:	4619      	mov	r1, r3
    e56e:	69b8      	ldr	r0, [r7, #24]
    e570:	4b20      	ldr	r3, [pc, #128]	; (e5f4 <usbdc_set_config+0xe4>)
    e572:	4798      	blx	r3
    e574:	4603      	mov	r3, r0
    e576:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    e578:	e02c      	b.n	e5d4 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    e57a:	68fb      	ldr	r3, [r7, #12]
    e57c:	3302      	adds	r3, #2
    e57e:	781b      	ldrb	r3, [r3, #0]
    e580:	7dfa      	ldrb	r2, [r7, #23]
    e582:	429a      	cmp	r2, r3
    e584:	d018      	beq.n	e5b8 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    e586:	68fb      	ldr	r3, [r7, #12]
    e588:	789b      	ldrb	r3, [r3, #2]
    e58a:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    e58c:	4b16      	ldr	r3, [pc, #88]	; (e5e8 <usbdc_set_config+0xd8>)
    e58e:	691b      	ldr	r3, [r3, #16]
    e590:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    e592:	e00c      	b.n	e5ae <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    e594:	69fb      	ldr	r3, [r7, #28]
    e596:	685b      	ldr	r3, [r3, #4]
    e598:	f107 020c 	add.w	r2, r7, #12
    e59c:	2100      	movs	r1, #0
    e59e:	69f8      	ldr	r0, [r7, #28]
    e5a0:	4798      	blx	r3
    e5a2:	4603      	mov	r3, r0
    e5a4:	2b00      	cmp	r3, #0
    e5a6:	d006      	beq.n	e5b6 <usbdc_set_config+0xa6>
					func = func->next;
    e5a8:	69fb      	ldr	r3, [r7, #28]
    e5aa:	681b      	ldr	r3, [r3, #0]
    e5ac:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    e5ae:	69fb      	ldr	r3, [r7, #28]
    e5b0:	2b00      	cmp	r3, #0
    e5b2:	d1ef      	bne.n	e594 <usbdc_set_config+0x84>
    e5b4:	e000      	b.n	e5b8 <usbdc_set_config+0xa8>
				} else {
					break;
    e5b6:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    e5b8:	68fb      	ldr	r3, [r7, #12]
    e5ba:	4618      	mov	r0, r3
    e5bc:	4b0e      	ldr	r3, [pc, #56]	; (e5f8 <usbdc_set_config+0xe8>)
    e5be:	4798      	blx	r3
    e5c0:	4603      	mov	r3, r0
    e5c2:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    e5c4:	68fb      	ldr	r3, [r7, #12]
    e5c6:	6939      	ldr	r1, [r7, #16]
    e5c8:	2204      	movs	r2, #4
    e5ca:	4618      	mov	r0, r3
    e5cc:	4b09      	ldr	r3, [pc, #36]	; (e5f4 <usbdc_set_config+0xe4>)
    e5ce:	4798      	blx	r3
    e5d0:	4603      	mov	r3, r0
    e5d2:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    e5d4:	68fb      	ldr	r3, [r7, #12]
    e5d6:	2b00      	cmp	r3, #0
    e5d8:	d1cf      	bne.n	e57a <usbdc_set_config+0x6a>
	}
	return true;
    e5da:	2301      	movs	r3, #1
}
    e5dc:	4618      	mov	r0, r3
    e5de:	3720      	adds	r7, #32
    e5e0:	46bd      	mov	sp, r7
    e5e2:	bd80      	pop	{r7, pc}
    e5e4:	0000e4dd 	.word	0x0000e4dd
    e5e8:	200027b0 	.word	0x200027b0
    e5ec:	0000ee81 	.word	0x0000ee81
    e5f0:	0000e02d 	.word	0x0000e02d
    e5f4:	0000edc1 	.word	0x0000edc1
    e5f8:	0000e009 	.word	0x0000e009

0000e5fc <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    e5fc:	b580      	push	{r7, lr}
    e5fe:	b082      	sub	sp, #8
    e600:	af00      	add	r7, sp, #0
    e602:	4603      	mov	r3, r0
    e604:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    e606:	79fb      	ldrb	r3, [r7, #7]
    e608:	4618      	mov	r0, r3
    e60a:	4b03      	ldr	r3, [pc, #12]	; (e618 <usbdc_set_address+0x1c>)
    e60c:	4798      	blx	r3
}
    e60e:	bf00      	nop
    e610:	3708      	adds	r7, #8
    e612:	46bd      	mov	sp, r7
    e614:	bd80      	pop	{r7, pc}
    e616:	bf00      	nop
    e618:	000047cd 	.word	0x000047cd

0000e61c <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    e61c:	b590      	push	{r4, r7, lr}
    e61e:	b087      	sub	sp, #28
    e620:	af00      	add	r7, sp, #0
    e622:	4603      	mov	r3, r0
    e624:	460a      	mov	r2, r1
    e626:	80fb      	strh	r3, [r7, #6]
    e628:	4613      	mov	r3, r2
    e62a:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    e62c:	2300      	movs	r3, #0
    e62e:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    e630:	693b      	ldr	r3, [r7, #16]
    e632:	2b00      	cmp	r3, #0
    e634:	d10b      	bne.n	e64e <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    e636:	4b43      	ldr	r3, [pc, #268]	; (e744 <usbdc_set_interface+0x128>)
    e638:	681b      	ldr	r3, [r3, #0]
    e63a:	6818      	ldr	r0, [r3, #0]
    e63c:	4b41      	ldr	r3, [pc, #260]	; (e744 <usbdc_set_interface+0x128>)
    e63e:	681b      	ldr	r3, [r3, #0]
    e640:	6859      	ldr	r1, [r3, #4]
    e642:	4b40      	ldr	r3, [pc, #256]	; (e744 <usbdc_set_interface+0x128>)
    e644:	7edb      	ldrb	r3, [r3, #27]
    e646:	461a      	mov	r2, r3
    e648:	4b3f      	ldr	r3, [pc, #252]	; (e748 <usbdc_set_interface+0x12c>)
    e64a:	4798      	blx	r3
    e64c:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    e64e:	693b      	ldr	r3, [r7, #16]
    e650:	2b00      	cmp	r3, #0
    e652:	d101      	bne.n	e658 <usbdc_set_interface+0x3c>
		return false;
    e654:	2300      	movs	r3, #0
    e656:	e071      	b.n	e73c <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    e658:	693b      	ldr	r3, [r7, #16]
    e65a:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    e65c:	6938      	ldr	r0, [r7, #16]
    e65e:	4b3b      	ldr	r3, [pc, #236]	; (e74c <usbdc_set_interface+0x130>)
    e660:	4798      	blx	r3
    e662:	4603      	mov	r3, r0
    e664:	461a      	mov	r2, r3
    e666:	693b      	ldr	r3, [r7, #16]
    e668:	4413      	add	r3, r2
    e66a:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    e66c:	68bb      	ldr	r3, [r7, #8]
    e66e:	68f9      	ldr	r1, [r7, #12]
    e670:	2204      	movs	r2, #4
    e672:	4618      	mov	r0, r3
    e674:	4b36      	ldr	r3, [pc, #216]	; (e750 <usbdc_set_interface+0x134>)
    e676:	4798      	blx	r3
    e678:	6138      	str	r0, [r7, #16]
    e67a:	693b      	ldr	r3, [r7, #16]
    e67c:	2b00      	cmp	r3, #0
    e67e:	d113      	bne.n	e6a8 <usbdc_set_interface+0x8c>
		return false;
    e680:	2300      	movs	r3, #0
    e682:	e05b      	b.n	e73c <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    e684:	68bb      	ldr	r3, [r7, #8]
    e686:	4618      	mov	r0, r3
    e688:	4b32      	ldr	r3, [pc, #200]	; (e754 <usbdc_set_interface+0x138>)
    e68a:	4798      	blx	r3
    e68c:	4603      	mov	r3, r0
    e68e:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    e690:	68bb      	ldr	r3, [r7, #8]
    e692:	68f9      	ldr	r1, [r7, #12]
    e694:	2204      	movs	r2, #4
    e696:	4618      	mov	r0, r3
    e698:	4b2d      	ldr	r3, [pc, #180]	; (e750 <usbdc_set_interface+0x134>)
    e69a:	4798      	blx	r3
    e69c:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    e69e:	693b      	ldr	r3, [r7, #16]
    e6a0:	2b00      	cmp	r3, #0
    e6a2:	d101      	bne.n	e6a8 <usbdc_set_interface+0x8c>
			return false;
    e6a4:	2300      	movs	r3, #0
    e6a6:	e049      	b.n	e73c <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    e6a8:	693b      	ldr	r3, [r7, #16]
    e6aa:	3302      	adds	r3, #2
    e6ac:	781b      	ldrb	r3, [r3, #0]
    e6ae:	b29b      	uxth	r3, r3
    e6b0:	88ba      	ldrh	r2, [r7, #4]
    e6b2:	429a      	cmp	r2, r3
    e6b4:	d1e6      	bne.n	e684 <usbdc_set_interface+0x68>
    e6b6:	693b      	ldr	r3, [r7, #16]
    e6b8:	3303      	adds	r3, #3
    e6ba:	781b      	ldrb	r3, [r3, #0]
    e6bc:	b29b      	uxth	r3, r3
    e6be:	88fa      	ldrh	r2, [r7, #6]
    e6c0:	429a      	cmp	r2, r3
    e6c2:	d1df      	bne.n	e684 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    e6c4:	693b      	ldr	r3, [r7, #16]
    e6c6:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    e6c8:	4b1e      	ldr	r3, [pc, #120]	; (e744 <usbdc_set_interface+0x128>)
    e6ca:	691b      	ldr	r3, [r3, #16]
    e6cc:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    e6ce:	e031      	b.n	e734 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    e6d0:	697b      	ldr	r3, [r7, #20]
    e6d2:	685b      	ldr	r3, [r3, #4]
    e6d4:	f107 0208 	add.w	r2, r7, #8
    e6d8:	2101      	movs	r1, #1
    e6da:	6978      	ldr	r0, [r7, #20]
    e6dc:	4798      	blx	r3
    e6de:	4603      	mov	r3, r0
    e6e0:	2b00      	cmp	r3, #0
    e6e2:	d003      	beq.n	e6ec <usbdc_set_interface+0xd0>
			func = func->next;
    e6e4:	697b      	ldr	r3, [r7, #20]
    e6e6:	681b      	ldr	r3, [r3, #0]
    e6e8:	617b      	str	r3, [r7, #20]
    e6ea:	e023      	b.n	e734 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    e6ec:	697b      	ldr	r3, [r7, #20]
    e6ee:	685b      	ldr	r3, [r3, #4]
    e6f0:	f107 0208 	add.w	r2, r7, #8
    e6f4:	2100      	movs	r1, #0
    e6f6:	6978      	ldr	r0, [r7, #20]
    e6f8:	4798      	blx	r3
    e6fa:	4603      	mov	r3, r0
    e6fc:	2b00      	cmp	r3, #0
    e6fe:	d117      	bne.n	e730 <usbdc_set_interface+0x114>
			if (alt_set) {
    e700:	88fb      	ldrh	r3, [r7, #6]
    e702:	2b00      	cmp	r3, #0
    e704:	d00c      	beq.n	e720 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    e706:	4b0f      	ldr	r3, [pc, #60]	; (e744 <usbdc_set_interface+0x128>)
    e708:	7f5b      	ldrb	r3, [r3, #29]
    e70a:	b25a      	sxtb	r2, r3
    e70c:	88bb      	ldrh	r3, [r7, #4]
    e70e:	2101      	movs	r1, #1
    e710:	fa01 f303 	lsl.w	r3, r1, r3
    e714:	b25b      	sxtb	r3, r3
    e716:	4313      	orrs	r3, r2
    e718:	b25b      	sxtb	r3, r3
    e71a:	b2da      	uxtb	r2, r3
    e71c:	4b09      	ldr	r3, [pc, #36]	; (e744 <usbdc_set_interface+0x128>)
    e71e:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    e720:	2300      	movs	r3, #0
    e722:	2200      	movs	r2, #0
    e724:	2100      	movs	r1, #0
    e726:	2000      	movs	r0, #0
    e728:	4c0b      	ldr	r4, [pc, #44]	; (e758 <usbdc_set_interface+0x13c>)
    e72a:	47a0      	blx	r4
			return true;
    e72c:	2301      	movs	r3, #1
    e72e:	e005      	b.n	e73c <usbdc_set_interface+0x120>
		} else {
			return false;
    e730:	2300      	movs	r3, #0
    e732:	e003      	b.n	e73c <usbdc_set_interface+0x120>
	while (NULL != func) {
    e734:	697b      	ldr	r3, [r7, #20]
    e736:	2b00      	cmp	r3, #0
    e738:	d1ca      	bne.n	e6d0 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    e73a:	2300      	movs	r3, #0
}
    e73c:	4618      	mov	r0, r3
    e73e:	371c      	adds	r7, #28
    e740:	46bd      	mov	sp, r7
    e742:	bd90      	pop	{r4, r7, pc}
    e744:	200027b0 	.word	0x200027b0
    e748:	0000ee81 	.word	0x0000ee81
    e74c:	0000e02d 	.word	0x0000e02d
    e750:	0000edc1 	.word	0x0000edc1
    e754:	0000e009 	.word	0x0000e009
    e758:	0000eb31 	.word	0x0000eb31

0000e75c <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    e75c:	b590      	push	{r4, r7, lr}
    e75e:	b083      	sub	sp, #12
    e760:	af00      	add	r7, sp, #0
    e762:	4603      	mov	r3, r0
    e764:	6039      	str	r1, [r7, #0]
    e766:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    e768:	683b      	ldr	r3, [r7, #0]
    e76a:	785b      	ldrb	r3, [r3, #1]
    e76c:	3b01      	subs	r3, #1
    e76e:	2b0a      	cmp	r3, #10
    e770:	d85b      	bhi.n	e82a <usbdc_set_req+0xce>
    e772:	a201      	add	r2, pc, #4	; (adr r2, e778 <usbdc_set_req+0x1c>)
    e774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e778:	0000e7f7 	.word	0x0000e7f7
    e77c:	0000e82b 	.word	0x0000e82b
    e780:	0000e805 	.word	0x0000e805
    e784:	0000e82b 	.word	0x0000e82b
    e788:	0000e7a5 	.word	0x0000e7a5
    e78c:	0000e82b 	.word	0x0000e82b
    e790:	0000e82b 	.word	0x0000e82b
    e794:	0000e82b 	.word	0x0000e82b
    e798:	0000e7bf 	.word	0x0000e7bf
    e79c:	0000e82b 	.word	0x0000e82b
    e7a0:	0000e813 	.word	0x0000e813
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    e7a4:	79f8      	ldrb	r0, [r7, #7]
    e7a6:	2301      	movs	r3, #1
    e7a8:	2200      	movs	r2, #0
    e7aa:	2100      	movs	r1, #0
    e7ac:	4c21      	ldr	r4, [pc, #132]	; (e834 <usbdc_set_req+0xd8>)
    e7ae:	47a0      	blx	r4
    e7b0:	4603      	mov	r3, r0
    e7b2:	2b00      	cmp	r3, #0
    e7b4:	bf0c      	ite	eq
    e7b6:	2301      	moveq	r3, #1
    e7b8:	2300      	movne	r3, #0
    e7ba:	b2db      	uxtb	r3, r3
    e7bc:	e036      	b.n	e82c <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    e7be:	683b      	ldr	r3, [r7, #0]
    e7c0:	885b      	ldrh	r3, [r3, #2]
    e7c2:	b29b      	uxth	r3, r3
    e7c4:	b2db      	uxtb	r3, r3
    e7c6:	4618      	mov	r0, r3
    e7c8:	4b1b      	ldr	r3, [pc, #108]	; (e838 <usbdc_set_req+0xdc>)
    e7ca:	4798      	blx	r3
    e7cc:	4603      	mov	r3, r0
    e7ce:	f083 0301 	eor.w	r3, r3, #1
    e7d2:	b2db      	uxtb	r3, r3
    e7d4:	2b00      	cmp	r3, #0
    e7d6:	d001      	beq.n	e7dc <usbdc_set_req+0x80>
			return false;
    e7d8:	2300      	movs	r3, #0
    e7da:	e027      	b.n	e82c <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    e7dc:	79f8      	ldrb	r0, [r7, #7]
    e7de:	2301      	movs	r3, #1
    e7e0:	2200      	movs	r2, #0
    e7e2:	2100      	movs	r1, #0
    e7e4:	4c13      	ldr	r4, [pc, #76]	; (e834 <usbdc_set_req+0xd8>)
    e7e6:	47a0      	blx	r4
    e7e8:	4603      	mov	r3, r0
    e7ea:	2b00      	cmp	r3, #0
    e7ec:	bf0c      	ite	eq
    e7ee:	2301      	moveq	r3, #1
    e7f0:	2300      	movne	r3, #0
    e7f2:	b2db      	uxtb	r3, r3
    e7f4:	e01a      	b.n	e82c <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    e7f6:	79fb      	ldrb	r3, [r7, #7]
    e7f8:	6839      	ldr	r1, [r7, #0]
    e7fa:	4618      	mov	r0, r3
    e7fc:	4b0f      	ldr	r3, [pc, #60]	; (e83c <usbdc_set_req+0xe0>)
    e7fe:	4798      	blx	r3
    e800:	4603      	mov	r3, r0
    e802:	e013      	b.n	e82c <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    e804:	79fb      	ldrb	r3, [r7, #7]
    e806:	6839      	ldr	r1, [r7, #0]
    e808:	4618      	mov	r0, r3
    e80a:	4b0d      	ldr	r3, [pc, #52]	; (e840 <usbdc_set_req+0xe4>)
    e80c:	4798      	blx	r3
    e80e:	4603      	mov	r3, r0
    e810:	e00c      	b.n	e82c <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    e812:	683b      	ldr	r3, [r7, #0]
    e814:	885b      	ldrh	r3, [r3, #2]
    e816:	b29a      	uxth	r2, r3
    e818:	683b      	ldr	r3, [r7, #0]
    e81a:	889b      	ldrh	r3, [r3, #4]
    e81c:	b29b      	uxth	r3, r3
    e81e:	4619      	mov	r1, r3
    e820:	4610      	mov	r0, r2
    e822:	4b08      	ldr	r3, [pc, #32]	; (e844 <usbdc_set_req+0xe8>)
    e824:	4798      	blx	r3
    e826:	4603      	mov	r3, r0
    e828:	e000      	b.n	e82c <usbdc_set_req+0xd0>
	default:
		return false;
    e82a:	2300      	movs	r3, #0
	}
}
    e82c:	4618      	mov	r0, r3
    e82e:	370c      	adds	r7, #12
    e830:	46bd      	mov	sp, r7
    e832:	bd90      	pop	{r4, r7, pc}
    e834:	0000eb31 	.word	0x0000eb31
    e838:	0000e511 	.word	0x0000e511
    e83c:	0000e42d 	.word	0x0000e42d
    e840:	0000e485 	.word	0x0000e485
    e844:	0000e61d 	.word	0x0000e61d

0000e848 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    e848:	b580      	push	{r7, lr}
    e84a:	b082      	sub	sp, #8
    e84c:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    e84e:	4b0a      	ldr	r3, [pc, #40]	; (e878 <usbdc_sof_notify+0x30>)
    e850:	685b      	ldr	r3, [r3, #4]
    e852:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    e854:	e009      	b.n	e86a <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    e856:	687b      	ldr	r3, [r7, #4]
    e858:	685b      	ldr	r3, [r3, #4]
    e85a:	2b00      	cmp	r3, #0
    e85c:	d002      	beq.n	e864 <usbdc_sof_notify+0x1c>
			sof->cb();
    e85e:	687b      	ldr	r3, [r7, #4]
    e860:	685b      	ldr	r3, [r3, #4]
    e862:	4798      	blx	r3
		}
		sof = sof->next;
    e864:	687b      	ldr	r3, [r7, #4]
    e866:	681b      	ldr	r3, [r3, #0]
    e868:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    e86a:	687b      	ldr	r3, [r7, #4]
    e86c:	2b00      	cmp	r3, #0
    e86e:	d1f2      	bne.n	e856 <usbdc_sof_notify+0xe>
	}
}
    e870:	bf00      	nop
    e872:	3708      	adds	r7, #8
    e874:	46bd      	mov	sp, r7
    e876:	bd80      	pop	{r7, pc}
    e878:	200027b0 	.word	0x200027b0

0000e87c <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    e87c:	b580      	push	{r7, lr}
    e87e:	b084      	sub	sp, #16
    e880:	af00      	add	r7, sp, #0
    e882:	4603      	mov	r3, r0
    e884:	6039      	str	r1, [r7, #0]
    e886:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    e888:	4b0b      	ldr	r3, [pc, #44]	; (e8b8 <usbdc_change_notify+0x3c>)
    e88a:	68db      	ldr	r3, [r3, #12]
    e88c:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    e88e:	e00c      	b.n	e8aa <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    e890:	68fb      	ldr	r3, [r7, #12]
    e892:	685b      	ldr	r3, [r3, #4]
    e894:	2b00      	cmp	r3, #0
    e896:	d005      	beq.n	e8a4 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    e898:	68fb      	ldr	r3, [r7, #12]
    e89a:	685b      	ldr	r3, [r3, #4]
    e89c:	79fa      	ldrb	r2, [r7, #7]
    e89e:	6839      	ldr	r1, [r7, #0]
    e8a0:	4610      	mov	r0, r2
    e8a2:	4798      	blx	r3
		}
		cg = cg->next;
    e8a4:	68fb      	ldr	r3, [r7, #12]
    e8a6:	681b      	ldr	r3, [r3, #0]
    e8a8:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    e8aa:	68fb      	ldr	r3, [r7, #12]
    e8ac:	2b00      	cmp	r3, #0
    e8ae:	d1ef      	bne.n	e890 <usbdc_change_notify+0x14>
	}
}
    e8b0:	bf00      	nop
    e8b2:	3710      	adds	r7, #16
    e8b4:	46bd      	mov	sp, r7
    e8b6:	bd80      	pop	{r7, pc}
    e8b8:	200027b0 	.word	0x200027b0

0000e8bc <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e8bc:	b580      	push	{r7, lr}
    e8be:	b084      	sub	sp, #16
    e8c0:	af00      	add	r7, sp, #0
    e8c2:	4603      	mov	r3, r0
    e8c4:	6039      	str	r1, [r7, #0]
    e8c6:	71fb      	strb	r3, [r7, #7]
    e8c8:	4613      	mov	r3, r2
    e8ca:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    e8cc:	4b12      	ldr	r3, [pc, #72]	; (e918 <usbdc_request_handler+0x5c>)
    e8ce:	689b      	ldr	r3, [r3, #8]
    e8d0:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    e8d2:	e019      	b.n	e908 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    e8d4:	68fb      	ldr	r3, [r7, #12]
    e8d6:	685b      	ldr	r3, [r3, #4]
    e8d8:	2b00      	cmp	r3, #0
    e8da:	d012      	beq.n	e902 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    e8dc:	68fb      	ldr	r3, [r7, #12]
    e8de:	685b      	ldr	r3, [r3, #4]
    e8e0:	79ba      	ldrb	r2, [r7, #6]
    e8e2:	79f8      	ldrb	r0, [r7, #7]
    e8e4:	6839      	ldr	r1, [r7, #0]
    e8e6:	4798      	blx	r3
    e8e8:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    e8ea:	68bb      	ldr	r3, [r7, #8]
    e8ec:	2b00      	cmp	r3, #0
    e8ee:	d101      	bne.n	e8f4 <usbdc_request_handler+0x38>
				return true;
    e8f0:	2301      	movs	r3, #1
    e8f2:	e00d      	b.n	e910 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    e8f4:	68bb      	ldr	r3, [r7, #8]
    e8f6:	f113 0f0a 	cmn.w	r3, #10
    e8fa:	d002      	beq.n	e902 <usbdc_request_handler+0x46>
				return -1;
    e8fc:	f04f 33ff 	mov.w	r3, #4294967295
    e900:	e006      	b.n	e910 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    e902:	68fb      	ldr	r3, [r7, #12]
    e904:	681b      	ldr	r3, [r3, #0]
    e906:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    e908:	68fb      	ldr	r3, [r7, #12]
    e90a:	2b00      	cmp	r3, #0
    e90c:	d1e2      	bne.n	e8d4 <usbdc_request_handler+0x18>
	}
	return false;
    e90e:	2300      	movs	r3, #0
}
    e910:	4618      	mov	r0, r3
    e912:	3710      	adds	r7, #16
    e914:	46bd      	mov	sp, r7
    e916:	bd80      	pop	{r7, pc}
    e918:	200027b0 	.word	0x200027b0

0000e91c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    e91c:	b580      	push	{r7, lr}
    e91e:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    e920:	4b01      	ldr	r3, [pc, #4]	; (e928 <usbd_sof_cb+0xc>)
    e922:	4798      	blx	r3
}
    e924:	bf00      	nop
    e926:	bd80      	pop	{r7, pc}
    e928:	0000e849 	.word	0x0000e849

0000e92c <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    e92c:	b580      	push	{r7, lr}
    e92e:	b082      	sub	sp, #8
    e930:	af00      	add	r7, sp, #0
    e932:	4603      	mov	r3, r0
    e934:	6039      	str	r1, [r7, #0]
    e936:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    e938:	79fb      	ldrb	r3, [r7, #7]
    e93a:	2200      	movs	r2, #0
    e93c:	6839      	ldr	r1, [r7, #0]
    e93e:	4618      	mov	r0, r3
    e940:	4b14      	ldr	r3, [pc, #80]	; (e994 <usbdc_cb_ctl_req+0x68>)
    e942:	4798      	blx	r3
    e944:	4603      	mov	r3, r0
    e946:	f1b3 3fff 	cmp.w	r3, #4294967295
    e94a:	d00b      	beq.n	e964 <usbdc_cb_ctl_req+0x38>
    e94c:	2b01      	cmp	r3, #1
    e94e:	d007      	beq.n	e960 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    e950:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    e952:	683b      	ldr	r3, [r7, #0]
    e954:	781b      	ldrb	r3, [r3, #0]
    e956:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e95a:	2b00      	cmp	r3, #0
    e95c:	d007      	beq.n	e96e <usbdc_cb_ctl_req+0x42>
    e95e:	e003      	b.n	e968 <usbdc_cb_ctl_req+0x3c>
		return true;
    e960:	2301      	movs	r3, #1
    e962:	e013      	b.n	e98c <usbdc_cb_ctl_req+0x60>
		return false;
    e964:	2300      	movs	r3, #0
    e966:	e011      	b.n	e98c <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    e968:	2b80      	cmp	r3, #128	; 0x80
    e96a:	d007      	beq.n	e97c <usbdc_cb_ctl_req+0x50>
    e96c:	e00d      	b.n	e98a <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    e96e:	79fb      	ldrb	r3, [r7, #7]
    e970:	6839      	ldr	r1, [r7, #0]
    e972:	4618      	mov	r0, r3
    e974:	4b08      	ldr	r3, [pc, #32]	; (e998 <usbdc_cb_ctl_req+0x6c>)
    e976:	4798      	blx	r3
    e978:	4603      	mov	r3, r0
    e97a:	e007      	b.n	e98c <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    e97c:	79fb      	ldrb	r3, [r7, #7]
    e97e:	6839      	ldr	r1, [r7, #0]
    e980:	4618      	mov	r0, r3
    e982:	4b06      	ldr	r3, [pc, #24]	; (e99c <usbdc_cb_ctl_req+0x70>)
    e984:	4798      	blx	r3
    e986:	4603      	mov	r3, r0
    e988:	e000      	b.n	e98c <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    e98a:	2300      	movs	r3, #0
	}
}
    e98c:	4618      	mov	r0, r3
    e98e:	3708      	adds	r7, #8
    e990:	46bd      	mov	sp, r7
    e992:	bd80      	pop	{r7, pc}
    e994:	0000e8bd 	.word	0x0000e8bd
    e998:	0000e75d 	.word	0x0000e75d
    e99c:	0000e385 	.word	0x0000e385

0000e9a0 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    e9a0:	b580      	push	{r7, lr}
    e9a2:	b082      	sub	sp, #8
    e9a4:	af00      	add	r7, sp, #0
    e9a6:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    e9a8:	687b      	ldr	r3, [r7, #4]
    e9aa:	781b      	ldrb	r3, [r3, #0]
    e9ac:	2b00      	cmp	r3, #0
    e9ae:	d135      	bne.n	ea1c <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    e9b0:	687b      	ldr	r3, [r7, #4]
    e9b2:	785b      	ldrb	r3, [r3, #1]
    e9b4:	2b05      	cmp	r3, #5
    e9b6:	d019      	beq.n	e9ec <usbdc_ctrl_status_end+0x4c>
    e9b8:	2b09      	cmp	r3, #9
    e9ba:	d000      	beq.n	e9be <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    e9bc:	e02f      	b.n	ea1e <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    e9be:	687b      	ldr	r3, [r7, #4]
    e9c0:	885b      	ldrh	r3, [r3, #2]
    e9c2:	b29b      	uxth	r3, r3
    e9c4:	b2da      	uxtb	r2, r3
    e9c6:	4b17      	ldr	r3, [pc, #92]	; (ea24 <usbdc_ctrl_status_end+0x84>)
    e9c8:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    e9ca:	687b      	ldr	r3, [r7, #4]
    e9cc:	885b      	ldrh	r3, [r3, #2]
    e9ce:	b29b      	uxth	r3, r3
    e9d0:	2b00      	cmp	r3, #0
    e9d2:	d001      	beq.n	e9d8 <usbdc_ctrl_status_end+0x38>
    e9d4:	2204      	movs	r2, #4
    e9d6:	e000      	b.n	e9da <usbdc_ctrl_status_end+0x3a>
    e9d8:	2203      	movs	r2, #3
    e9da:	4b12      	ldr	r3, [pc, #72]	; (ea24 <usbdc_ctrl_status_end+0x84>)
    e9dc:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    e9de:	4b11      	ldr	r3, [pc, #68]	; (ea24 <usbdc_ctrl_status_end+0x84>)
    e9e0:	7e9b      	ldrb	r3, [r3, #26]
    e9e2:	4619      	mov	r1, r3
    e9e4:	2001      	movs	r0, #1
    e9e6:	4b10      	ldr	r3, [pc, #64]	; (ea28 <usbdc_ctrl_status_end+0x88>)
    e9e8:	4798      	blx	r3
		break;
    e9ea:	e018      	b.n	ea1e <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    e9ec:	687b      	ldr	r3, [r7, #4]
    e9ee:	885b      	ldrh	r3, [r3, #2]
    e9f0:	b29b      	uxth	r3, r3
    e9f2:	b2db      	uxtb	r3, r3
    e9f4:	4618      	mov	r0, r3
    e9f6:	4b0d      	ldr	r3, [pc, #52]	; (ea2c <usbdc_ctrl_status_end+0x8c>)
    e9f8:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    e9fa:	687b      	ldr	r3, [r7, #4]
    e9fc:	885b      	ldrh	r3, [r3, #2]
    e9fe:	b29b      	uxth	r3, r3
    ea00:	2b00      	cmp	r3, #0
    ea02:	d001      	beq.n	ea08 <usbdc_ctrl_status_end+0x68>
    ea04:	2203      	movs	r2, #3
    ea06:	e000      	b.n	ea0a <usbdc_ctrl_status_end+0x6a>
    ea08:	2202      	movs	r2, #2
    ea0a:	4b06      	ldr	r3, [pc, #24]	; (ea24 <usbdc_ctrl_status_end+0x84>)
    ea0c:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ea0e:	4b05      	ldr	r3, [pc, #20]	; (ea24 <usbdc_ctrl_status_end+0x84>)
    ea10:	7e9b      	ldrb	r3, [r3, #26]
    ea12:	4619      	mov	r1, r3
    ea14:	2001      	movs	r0, #1
    ea16:	4b04      	ldr	r3, [pc, #16]	; (ea28 <usbdc_ctrl_status_end+0x88>)
    ea18:	4798      	blx	r3
		break;
    ea1a:	e000      	b.n	ea1e <usbdc_ctrl_status_end+0x7e>
		return;
    ea1c:	bf00      	nop
	}
}
    ea1e:	3708      	adds	r7, #8
    ea20:	46bd      	mov	sp, r7
    ea22:	bd80      	pop	{r7, pc}
    ea24:	200027b0 	.word	0x200027b0
    ea28:	0000e87d 	.word	0x0000e87d
    ea2c:	0000e5fd 	.word	0x0000e5fd

0000ea30 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    ea30:	b580      	push	{r7, lr}
    ea32:	b082      	sub	sp, #8
    ea34:	af00      	add	r7, sp, #0
    ea36:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    ea38:	2201      	movs	r2, #1
    ea3a:	6879      	ldr	r1, [r7, #4]
    ea3c:	2000      	movs	r0, #0
    ea3e:	4b03      	ldr	r3, [pc, #12]	; (ea4c <usbdc_ctrl_data_end+0x1c>)
    ea40:	4798      	blx	r3
	return false;
    ea42:	2300      	movs	r3, #0
}
    ea44:	4618      	mov	r0, r3
    ea46:	3708      	adds	r7, #8
    ea48:	46bd      	mov	sp, r7
    ea4a:	bd80      	pop	{r7, pc}
    ea4c:	0000e8bd 	.word	0x0000e8bd

0000ea50 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    ea50:	b580      	push	{r7, lr}
    ea52:	b082      	sub	sp, #8
    ea54:	af00      	add	r7, sp, #0
    ea56:	4603      	mov	r3, r0
    ea58:	603a      	str	r2, [r7, #0]
    ea5a:	71fb      	strb	r3, [r7, #7]
    ea5c:	460b      	mov	r3, r1
    ea5e:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    ea60:	79bb      	ldrb	r3, [r7, #6]
    ea62:	2b00      	cmp	r3, #0
    ea64:	d002      	beq.n	ea6c <usbdc_cb_ctl_done+0x1c>
    ea66:	2b01      	cmp	r3, #1
    ea68:	d004      	beq.n	ea74 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    ea6a:	e008      	b.n	ea7e <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    ea6c:	6838      	ldr	r0, [r7, #0]
    ea6e:	4b06      	ldr	r3, [pc, #24]	; (ea88 <usbdc_cb_ctl_done+0x38>)
    ea70:	4798      	blx	r3
		break;
    ea72:	e004      	b.n	ea7e <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    ea74:	6838      	ldr	r0, [r7, #0]
    ea76:	4b05      	ldr	r3, [pc, #20]	; (ea8c <usbdc_cb_ctl_done+0x3c>)
    ea78:	4798      	blx	r3
    ea7a:	4603      	mov	r3, r0
    ea7c:	e000      	b.n	ea80 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    ea7e:	2300      	movs	r3, #0
}
    ea80:	4618      	mov	r0, r3
    ea82:	3708      	adds	r7, #8
    ea84:	46bd      	mov	sp, r7
    ea86:	bd80      	pop	{r7, pc}
    ea88:	0000e9a1 	.word	0x0000e9a1
    ea8c:	0000ea31 	.word	0x0000ea31

0000ea90 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    ea90:	b580      	push	{r7, lr}
    ea92:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    ea94:	4b10      	ldr	r3, [pc, #64]	; (ead8 <usbdc_reset+0x48>)
    ea96:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    ea98:	4b10      	ldr	r3, [pc, #64]	; (eadc <usbdc_reset+0x4c>)
    ea9a:	2202      	movs	r2, #2
    ea9c:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    ea9e:	4b0f      	ldr	r3, [pc, #60]	; (eadc <usbdc_reset+0x4c>)
    eaa0:	2200      	movs	r2, #0
    eaa2:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    eaa4:	4b0d      	ldr	r3, [pc, #52]	; (eadc <usbdc_reset+0x4c>)
    eaa6:	2200      	movs	r2, #0
    eaa8:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    eaaa:	2000      	movs	r0, #0
    eaac:	4b0c      	ldr	r3, [pc, #48]	; (eae0 <usbdc_reset+0x50>)
    eaae:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    eab0:	4b0a      	ldr	r3, [pc, #40]	; (eadc <usbdc_reset+0x4c>)
    eab2:	7f1b      	ldrb	r3, [r3, #28]
    eab4:	4618      	mov	r0, r3
    eab6:	4b0b      	ldr	r3, [pc, #44]	; (eae4 <usbdc_reset+0x54>)
    eab8:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    eaba:	4a0b      	ldr	r2, [pc, #44]	; (eae8 <usbdc_reset+0x58>)
    eabc:	2100      	movs	r1, #0
    eabe:	2000      	movs	r0, #0
    eac0:	4b0a      	ldr	r3, [pc, #40]	; (eaec <usbdc_reset+0x5c>)
    eac2:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    eac4:	4a0a      	ldr	r2, [pc, #40]	; (eaf0 <usbdc_reset+0x60>)
    eac6:	2102      	movs	r1, #2
    eac8:	2000      	movs	r0, #0
    eaca:	4b08      	ldr	r3, [pc, #32]	; (eaec <usbdc_reset+0x5c>)
    eacc:	4798      	blx	r3
	usb_d_ep_enable(0);
    eace:	2000      	movs	r0, #0
    ead0:	4b08      	ldr	r3, [pc, #32]	; (eaf4 <usbdc_reset+0x64>)
    ead2:	4798      	blx	r3
}
    ead4:	bf00      	nop
    ead6:	bd80      	pop	{r7, pc}
    ead8:	0000e4dd 	.word	0x0000e4dd
    eadc:	200027b0 	.word	0x200027b0
    eae0:	000048b1 	.word	0x000048b1
    eae4:	000047ed 	.word	0x000047ed
    eae8:	0000e92d 	.word	0x0000e92d
    eaec:	00004c05 	.word	0x00004c05
    eaf0:	0000ea51 	.word	0x0000ea51
    eaf4:	00004901 	.word	0x00004901

0000eaf8 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    eaf8:	b580      	push	{r7, lr}
    eafa:	b082      	sub	sp, #8
    eafc:	af00      	add	r7, sp, #0
    eafe:	4603      	mov	r3, r0
    eb00:	6039      	str	r1, [r7, #0]
    eb02:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    eb04:	79fb      	ldrb	r3, [r7, #7]
    eb06:	2b00      	cmp	r3, #0
    eb08:	d002      	beq.n	eb10 <usbd_event_cb+0x18>
    eb0a:	2b01      	cmp	r3, #1
    eb0c:	d005      	beq.n	eb1a <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    eb0e:	e007      	b.n	eb20 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    eb10:	6839      	ldr	r1, [r7, #0]
    eb12:	2000      	movs	r0, #0
    eb14:	4b04      	ldr	r3, [pc, #16]	; (eb28 <usbd_event_cb+0x30>)
    eb16:	4798      	blx	r3
		break;
    eb18:	e002      	b.n	eb20 <usbd_event_cb+0x28>
		usbdc_reset();
    eb1a:	4b04      	ldr	r3, [pc, #16]	; (eb2c <usbd_event_cb+0x34>)
    eb1c:	4798      	blx	r3
		break;
    eb1e:	bf00      	nop
	}
}
    eb20:	bf00      	nop
    eb22:	3708      	adds	r7, #8
    eb24:	46bd      	mov	sp, r7
    eb26:	bd80      	pop	{r7, pc}
    eb28:	0000e87d 	.word	0x0000e87d
    eb2c:	0000ea91 	.word	0x0000ea91

0000eb30 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    eb30:	b580      	push	{r7, lr}
    eb32:	b088      	sub	sp, #32
    eb34:	af00      	add	r7, sp, #0
    eb36:	60b9      	str	r1, [r7, #8]
    eb38:	607a      	str	r2, [r7, #4]
    eb3a:	461a      	mov	r2, r3
    eb3c:	4603      	mov	r3, r0
    eb3e:	73fb      	strb	r3, [r7, #15]
    eb40:	4613      	mov	r3, r2
    eb42:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    eb44:	68bb      	ldr	r3, [r7, #8]
    eb46:	617b      	str	r3, [r7, #20]
    eb48:	687b      	ldr	r3, [r7, #4]
    eb4a:	61bb      	str	r3, [r7, #24]
    eb4c:	7bfb      	ldrb	r3, [r7, #15]
    eb4e:	773b      	strb	r3, [r7, #28]
    eb50:	7bbb      	ldrb	r3, [r7, #14]
    eb52:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    eb54:	f107 0314 	add.w	r3, r7, #20
    eb58:	4618      	mov	r0, r3
    eb5a:	4b03      	ldr	r3, [pc, #12]	; (eb68 <usbdc_xfer+0x38>)
    eb5c:	4798      	blx	r3
    eb5e:	4603      	mov	r3, r0
}
    eb60:	4618      	mov	r0, r3
    eb62:	3720      	adds	r7, #32
    eb64:	46bd      	mov	sp, r7
    eb66:	bd80      	pop	{r7, pc}
    eb68:	00004971 	.word	0x00004971

0000eb6c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    eb6c:	b580      	push	{r7, lr}
    eb6e:	b082      	sub	sp, #8
    eb70:	af00      	add	r7, sp, #0
    eb72:	4603      	mov	r3, r0
    eb74:	6039      	str	r1, [r7, #0]
    eb76:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    eb78:	79fb      	ldrb	r3, [r7, #7]
    eb7a:	2b01      	cmp	r3, #1
    eb7c:	d009      	beq.n	eb92 <usbdc_register_handler+0x26>
    eb7e:	2b02      	cmp	r3, #2
    eb80:	d00c      	beq.n	eb9c <usbdc_register_handler+0x30>
    eb82:	2b00      	cmp	r3, #0
    eb84:	d000      	beq.n	eb88 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    eb86:	e00e      	b.n	eba6 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    eb88:	6839      	ldr	r1, [r7, #0]
    eb8a:	4809      	ldr	r0, [pc, #36]	; (ebb0 <usbdc_register_handler+0x44>)
    eb8c:	4b09      	ldr	r3, [pc, #36]	; (ebb4 <usbdc_register_handler+0x48>)
    eb8e:	4798      	blx	r3
		break;
    eb90:	e009      	b.n	eba6 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    eb92:	6839      	ldr	r1, [r7, #0]
    eb94:	4808      	ldr	r0, [pc, #32]	; (ebb8 <usbdc_register_handler+0x4c>)
    eb96:	4b07      	ldr	r3, [pc, #28]	; (ebb4 <usbdc_register_handler+0x48>)
    eb98:	4798      	blx	r3
		break;
    eb9a:	e004      	b.n	eba6 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    eb9c:	6839      	ldr	r1, [r7, #0]
    eb9e:	4807      	ldr	r0, [pc, #28]	; (ebbc <usbdc_register_handler+0x50>)
    eba0:	4b04      	ldr	r3, [pc, #16]	; (ebb4 <usbdc_register_handler+0x48>)
    eba2:	4798      	blx	r3
		break;
    eba4:	bf00      	nop
	}
}
    eba6:	bf00      	nop
    eba8:	3708      	adds	r7, #8
    ebaa:	46bd      	mov	sp, r7
    ebac:	bd80      	pop	{r7, pc}
    ebae:	bf00      	nop
    ebb0:	200027b4 	.word	0x200027b4
    ebb4:	00004d5d 	.word	0x00004d5d
    ebb8:	200027b8 	.word	0x200027b8
    ebbc:	200027bc 	.word	0x200027bc

0000ebc0 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    ebc0:	b580      	push	{r7, lr}
    ebc2:	b084      	sub	sp, #16
    ebc4:	af00      	add	r7, sp, #0
    ebc6:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    ebc8:	687b      	ldr	r3, [r7, #4]
    ebca:	2b00      	cmp	r3, #0
    ebcc:	bf14      	ite	ne
    ebce:	2301      	movne	r3, #1
    ebd0:	2300      	moveq	r3, #0
    ebd2:	b2db      	uxtb	r3, r3
    ebd4:	f240 3255 	movw	r2, #853	; 0x355
    ebd8:	4910      	ldr	r1, [pc, #64]	; (ec1c <usbdc_init+0x5c>)
    ebda:	4618      	mov	r0, r3
    ebdc:	4b10      	ldr	r3, [pc, #64]	; (ec20 <usbdc_init+0x60>)
    ebde:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    ebe0:	4b10      	ldr	r3, [pc, #64]	; (ec24 <usbdc_init+0x64>)
    ebe2:	4798      	blx	r3
    ebe4:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    ebe6:	68fb      	ldr	r3, [r7, #12]
    ebe8:	2b00      	cmp	r3, #0
    ebea:	da01      	bge.n	ebf0 <usbdc_init+0x30>
		return rc;
    ebec:	68fb      	ldr	r3, [r7, #12]
    ebee:	e010      	b.n	ec12 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    ebf0:	2220      	movs	r2, #32
    ebf2:	2100      	movs	r1, #0
    ebf4:	480c      	ldr	r0, [pc, #48]	; (ec28 <usbdc_init+0x68>)
    ebf6:	4b0d      	ldr	r3, [pc, #52]	; (ec2c <usbdc_init+0x6c>)
    ebf8:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    ebfa:	4a0b      	ldr	r2, [pc, #44]	; (ec28 <usbdc_init+0x68>)
    ebfc:	687b      	ldr	r3, [r7, #4]
    ebfe:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    ec00:	490b      	ldr	r1, [pc, #44]	; (ec30 <usbdc_init+0x70>)
    ec02:	2000      	movs	r0, #0
    ec04:	4b0b      	ldr	r3, [pc, #44]	; (ec34 <usbdc_init+0x74>)
    ec06:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    ec08:	490b      	ldr	r1, [pc, #44]	; (ec38 <usbdc_init+0x78>)
    ec0a:	2001      	movs	r0, #1
    ec0c:	4b09      	ldr	r3, [pc, #36]	; (ec34 <usbdc_init+0x74>)
    ec0e:	4798      	blx	r3

	return 0;
    ec10:	2300      	movs	r3, #0
}
    ec12:	4618      	mov	r0, r3
    ec14:	3710      	adds	r7, #16
    ec16:	46bd      	mov	sp, r7
    ec18:	bd80      	pop	{r7, pc}
    ec1a:	bf00      	nop
    ec1c:	0001af80 	.word	0x0001af80
    ec20:	00004c81 	.word	0x00004c81
    ec24:	000046d9 	.word	0x000046d9
    ec28:	200027b0 	.word	0x200027b0
    ec2c:	0001a769 	.word	0x0001a769
    ec30:	0000e91d 	.word	0x0000e91d
    ec34:	00004785 	.word	0x00004785
    ec38:	0000eaf9 	.word	0x0000eaf9

0000ec3c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    ec3c:	b580      	push	{r7, lr}
    ec3e:	b082      	sub	sp, #8
    ec40:	af00      	add	r7, sp, #0
    ec42:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    ec44:	6879      	ldr	r1, [r7, #4]
    ec46:	4803      	ldr	r0, [pc, #12]	; (ec54 <usbdc_register_function+0x18>)
    ec48:	4b03      	ldr	r3, [pc, #12]	; (ec58 <usbdc_register_function+0x1c>)
    ec4a:	4798      	blx	r3
}
    ec4c:	bf00      	nop
    ec4e:	3708      	adds	r7, #8
    ec50:	46bd      	mov	sp, r7
    ec52:	bd80      	pop	{r7, pc}
    ec54:	200027c0 	.word	0x200027c0
    ec58:	00004d5d 	.word	0x00004d5d

0000ec5c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    ec5c:	b580      	push	{r7, lr}
    ec5e:	b082      	sub	sp, #8
    ec60:	af00      	add	r7, sp, #0
    ec62:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    ec64:	4b0f      	ldr	r3, [pc, #60]	; (eca4 <usbdc_start+0x48>)
    ec66:	7e9b      	ldrb	r3, [r3, #26]
    ec68:	2b00      	cmp	r3, #0
    ec6a:	d002      	beq.n	ec72 <usbdc_start+0x16>
		return ERR_BUSY;
    ec6c:	f06f 0303 	mvn.w	r3, #3
    ec70:	e013      	b.n	ec9a <usbdc_start+0x3e>
	}

	if (desces) {
    ec72:	687b      	ldr	r3, [r7, #4]
    ec74:	2b00      	cmp	r3, #0
    ec76:	d00e      	beq.n	ec96 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    ec78:	4a0a      	ldr	r2, [pc, #40]	; (eca4 <usbdc_start+0x48>)
    ec7a:	687b      	ldr	r3, [r7, #4]
    ec7c:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    ec7e:	687b      	ldr	r3, [r7, #4]
    ec80:	681b      	ldr	r3, [r3, #0]
    ec82:	79da      	ldrb	r2, [r3, #7]
    ec84:	4b07      	ldr	r3, [pc, #28]	; (eca4 <usbdc_start+0x48>)
    ec86:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    ec88:	4b06      	ldr	r3, [pc, #24]	; (eca4 <usbdc_start+0x48>)
    ec8a:	2201      	movs	r2, #1
    ec8c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    ec8e:	4b06      	ldr	r3, [pc, #24]	; (eca8 <usbdc_start+0x4c>)
    ec90:	4798      	blx	r3
	return ERR_NONE;
    ec92:	2300      	movs	r3, #0
    ec94:	e001      	b.n	ec9a <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    ec96:	f06f 0308 	mvn.w	r3, #8
}
    ec9a:	4618      	mov	r0, r3
    ec9c:	3708      	adds	r7, #8
    ec9e:	46bd      	mov	sp, r7
    eca0:	bd80      	pop	{r7, pc}
    eca2:	bf00      	nop
    eca4:	200027b0 	.word	0x200027b0
    eca8:	000047a9 	.word	0x000047a9

0000ecac <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    ecac:	b580      	push	{r7, lr}
    ecae:	af00      	add	r7, sp, #0
	usb_d_attach();
    ecb0:	4b01      	ldr	r3, [pc, #4]	; (ecb8 <usbdc_attach+0xc>)
    ecb2:	4798      	blx	r3
}
    ecb4:	bf00      	nop
    ecb6:	bd80      	pop	{r7, pc}
    ecb8:	000047bd 	.word	0x000047bd

0000ecbc <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    ecbc:	b480      	push	{r7}
    ecbe:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    ecc0:	4b03      	ldr	r3, [pc, #12]	; (ecd0 <usbdc_get_ctrl_buffer+0x14>)
    ecc2:	695b      	ldr	r3, [r3, #20]
}
    ecc4:	4618      	mov	r0, r3
    ecc6:	46bd      	mov	sp, r7
    ecc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    eccc:	4770      	bx	lr
    ecce:	bf00      	nop
    ecd0:	200027b0 	.word	0x200027b0

0000ecd4 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    ecd4:	b480      	push	{r7}
    ecd6:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    ecd8:	4b07      	ldr	r3, [pc, #28]	; (ecf8 <usbdc_get_state+0x24>)
    ecda:	7e9b      	ldrb	r3, [r3, #26]
    ecdc:	f003 0310 	and.w	r3, r3, #16
    ece0:	2b00      	cmp	r3, #0
    ece2:	d001      	beq.n	ece8 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    ece4:	2310      	movs	r3, #16
    ece6:	e001      	b.n	ecec <usbdc_get_state+0x18>
	}
	return usbdc.state;
    ece8:	4b03      	ldr	r3, [pc, #12]	; (ecf8 <usbdc_get_state+0x24>)
    ecea:	7e9b      	ldrb	r3, [r3, #26]
}
    ecec:	4618      	mov	r0, r3
    ecee:	46bd      	mov	sp, r7
    ecf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    ecf4:	4770      	bx	lr
    ecf6:	bf00      	nop
    ecf8:	200027b0 	.word	0x200027b0

0000ecfc <usb_get_u16>:
{
    ecfc:	b480      	push	{r7}
    ecfe:	b083      	sub	sp, #12
    ed00:	af00      	add	r7, sp, #0
    ed02:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ed04:	687b      	ldr	r3, [r7, #4]
    ed06:	781b      	ldrb	r3, [r3, #0]
    ed08:	b29a      	uxth	r2, r3
    ed0a:	687b      	ldr	r3, [r7, #4]
    ed0c:	3301      	adds	r3, #1
    ed0e:	781b      	ldrb	r3, [r3, #0]
    ed10:	b29b      	uxth	r3, r3
    ed12:	021b      	lsls	r3, r3, #8
    ed14:	b29b      	uxth	r3, r3
    ed16:	4413      	add	r3, r2
    ed18:	b29b      	uxth	r3, r3
}
    ed1a:	4618      	mov	r0, r3
    ed1c:	370c      	adds	r7, #12
    ed1e:	46bd      	mov	sp, r7
    ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
    ed24:	4770      	bx	lr

0000ed26 <usb_desc_len>:
{
    ed26:	b480      	push	{r7}
    ed28:	b083      	sub	sp, #12
    ed2a:	af00      	add	r7, sp, #0
    ed2c:	6078      	str	r0, [r7, #4]
	return desc[0];
    ed2e:	687b      	ldr	r3, [r7, #4]
    ed30:	781b      	ldrb	r3, [r3, #0]
}
    ed32:	4618      	mov	r0, r3
    ed34:	370c      	adds	r7, #12
    ed36:	46bd      	mov	sp, r7
    ed38:	f85d 7b04 	ldr.w	r7, [sp], #4
    ed3c:	4770      	bx	lr

0000ed3e <usb_desc_type>:
{
    ed3e:	b480      	push	{r7}
    ed40:	b083      	sub	sp, #12
    ed42:	af00      	add	r7, sp, #0
    ed44:	6078      	str	r0, [r7, #4]
	return desc[1];
    ed46:	687b      	ldr	r3, [r7, #4]
    ed48:	3301      	adds	r3, #1
    ed4a:	781b      	ldrb	r3, [r3, #0]
}
    ed4c:	4618      	mov	r0, r3
    ed4e:	370c      	adds	r7, #12
    ed50:	46bd      	mov	sp, r7
    ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
    ed56:	4770      	bx	lr

0000ed58 <usb_desc_next>:
{
    ed58:	b580      	push	{r7, lr}
    ed5a:	b082      	sub	sp, #8
    ed5c:	af00      	add	r7, sp, #0
    ed5e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    ed60:	6878      	ldr	r0, [r7, #4]
    ed62:	4b05      	ldr	r3, [pc, #20]	; (ed78 <usb_desc_next+0x20>)
    ed64:	4798      	blx	r3
    ed66:	4603      	mov	r3, r0
    ed68:	461a      	mov	r2, r3
    ed6a:	687b      	ldr	r3, [r7, #4]
    ed6c:	4413      	add	r3, r2
}
    ed6e:	4618      	mov	r0, r3
    ed70:	3708      	adds	r7, #8
    ed72:	46bd      	mov	sp, r7
    ed74:	bd80      	pop	{r7, pc}
    ed76:	bf00      	nop
    ed78:	0000ed27 	.word	0x0000ed27

0000ed7c <usb_cfg_desc_total_len>:
{
    ed7c:	b580      	push	{r7, lr}
    ed7e:	b082      	sub	sp, #8
    ed80:	af00      	add	r7, sp, #0
    ed82:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    ed84:	687b      	ldr	r3, [r7, #4]
    ed86:	3302      	adds	r3, #2
    ed88:	4618      	mov	r0, r3
    ed8a:	4b03      	ldr	r3, [pc, #12]	; (ed98 <usb_cfg_desc_total_len+0x1c>)
    ed8c:	4798      	blx	r3
    ed8e:	4603      	mov	r3, r0
}
    ed90:	4618      	mov	r0, r3
    ed92:	3708      	adds	r7, #8
    ed94:	46bd      	mov	sp, r7
    ed96:	bd80      	pop	{r7, pc}
    ed98:	0000ecfd 	.word	0x0000ecfd

0000ed9c <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    ed9c:	b580      	push	{r7, lr}
    ed9e:	b082      	sub	sp, #8
    eda0:	af00      	add	r7, sp, #0
    eda2:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    eda4:	6878      	ldr	r0, [r7, #4]
    eda6:	4b05      	ldr	r3, [pc, #20]	; (edbc <usb_cfg_desc_next+0x20>)
    eda8:	4798      	blx	r3
    edaa:	4603      	mov	r3, r0
    edac:	461a      	mov	r2, r3
    edae:	687b      	ldr	r3, [r7, #4]
    edb0:	4413      	add	r3, r2
}
    edb2:	4618      	mov	r0, r3
    edb4:	3708      	adds	r7, #8
    edb6:	46bd      	mov	sp, r7
    edb8:	bd80      	pop	{r7, pc}
    edba:	bf00      	nop
    edbc:	0000ed7d 	.word	0x0000ed7d

0000edc0 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    edc0:	b580      	push	{r7, lr}
    edc2:	b084      	sub	sp, #16
    edc4:	af00      	add	r7, sp, #0
    edc6:	60f8      	str	r0, [r7, #12]
    edc8:	60b9      	str	r1, [r7, #8]
    edca:	4613      	mov	r3, r2
    edcc:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    edce:	e015      	b.n	edfc <usb_find_desc+0x3c>
		_desc_len_check();
    edd0:	68f8      	ldr	r0, [r7, #12]
    edd2:	4b0f      	ldr	r3, [pc, #60]	; (ee10 <usb_find_desc+0x50>)
    edd4:	4798      	blx	r3
    edd6:	4603      	mov	r3, r0
    edd8:	2b01      	cmp	r3, #1
    edda:	d801      	bhi.n	ede0 <usb_find_desc+0x20>
    eddc:	2300      	movs	r3, #0
    edde:	e012      	b.n	ee06 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    ede0:	68f8      	ldr	r0, [r7, #12]
    ede2:	4b0c      	ldr	r3, [pc, #48]	; (ee14 <usb_find_desc+0x54>)
    ede4:	4798      	blx	r3
    ede6:	4603      	mov	r3, r0
    ede8:	461a      	mov	r2, r3
    edea:	79fb      	ldrb	r3, [r7, #7]
    edec:	4293      	cmp	r3, r2
    edee:	d101      	bne.n	edf4 <usb_find_desc+0x34>
			return desc;
    edf0:	68fb      	ldr	r3, [r7, #12]
    edf2:	e008      	b.n	ee06 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    edf4:	68f8      	ldr	r0, [r7, #12]
    edf6:	4b08      	ldr	r3, [pc, #32]	; (ee18 <usb_find_desc+0x58>)
    edf8:	4798      	blx	r3
    edfa:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    edfc:	68fa      	ldr	r2, [r7, #12]
    edfe:	68bb      	ldr	r3, [r7, #8]
    ee00:	429a      	cmp	r2, r3
    ee02:	d3e5      	bcc.n	edd0 <usb_find_desc+0x10>
	}
	return NULL;
    ee04:	2300      	movs	r3, #0
}
    ee06:	4618      	mov	r0, r3
    ee08:	3710      	adds	r7, #16
    ee0a:	46bd      	mov	sp, r7
    ee0c:	bd80      	pop	{r7, pc}
    ee0e:	bf00      	nop
    ee10:	0000ed27 	.word	0x0000ed27
    ee14:	0000ed3f 	.word	0x0000ed3f
    ee18:	0000ed59 	.word	0x0000ed59

0000ee1c <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    ee1c:	b580      	push	{r7, lr}
    ee1e:	b082      	sub	sp, #8
    ee20:	af00      	add	r7, sp, #0
    ee22:	6078      	str	r0, [r7, #4]
    ee24:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    ee26:	e019      	b.n	ee5c <usb_find_ep_desc+0x40>
		_desc_len_check();
    ee28:	6878      	ldr	r0, [r7, #4]
    ee2a:	4b12      	ldr	r3, [pc, #72]	; (ee74 <usb_find_ep_desc+0x58>)
    ee2c:	4798      	blx	r3
    ee2e:	4603      	mov	r3, r0
    ee30:	2b01      	cmp	r3, #1
    ee32:	d801      	bhi.n	ee38 <usb_find_ep_desc+0x1c>
    ee34:	2300      	movs	r3, #0
    ee36:	e018      	b.n	ee6a <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    ee38:	6878      	ldr	r0, [r7, #4]
    ee3a:	4b0f      	ldr	r3, [pc, #60]	; (ee78 <usb_find_ep_desc+0x5c>)
    ee3c:	4798      	blx	r3
    ee3e:	4603      	mov	r3, r0
    ee40:	2b04      	cmp	r3, #4
    ee42:	d010      	beq.n	ee66 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    ee44:	6878      	ldr	r0, [r7, #4]
    ee46:	4b0c      	ldr	r3, [pc, #48]	; (ee78 <usb_find_ep_desc+0x5c>)
    ee48:	4798      	blx	r3
    ee4a:	4603      	mov	r3, r0
    ee4c:	2b05      	cmp	r3, #5
    ee4e:	d101      	bne.n	ee54 <usb_find_ep_desc+0x38>
			return desc;
    ee50:	687b      	ldr	r3, [r7, #4]
    ee52:	e00a      	b.n	ee6a <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    ee54:	6878      	ldr	r0, [r7, #4]
    ee56:	4b09      	ldr	r3, [pc, #36]	; (ee7c <usb_find_ep_desc+0x60>)
    ee58:	4798      	blx	r3
    ee5a:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    ee5c:	687a      	ldr	r2, [r7, #4]
    ee5e:	683b      	ldr	r3, [r7, #0]
    ee60:	429a      	cmp	r2, r3
    ee62:	d3e1      	bcc.n	ee28 <usb_find_ep_desc+0xc>
    ee64:	e000      	b.n	ee68 <usb_find_ep_desc+0x4c>
			break;
    ee66:	bf00      	nop
	}
	return NULL;
    ee68:	2300      	movs	r3, #0
}
    ee6a:	4618      	mov	r0, r3
    ee6c:	3708      	adds	r7, #8
    ee6e:	46bd      	mov	sp, r7
    ee70:	bd80      	pop	{r7, pc}
    ee72:	bf00      	nop
    ee74:	0000ed27 	.word	0x0000ed27
    ee78:	0000ed3f 	.word	0x0000ed3f
    ee7c:	0000ed59 	.word	0x0000ed59

0000ee80 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    ee80:	b580      	push	{r7, lr}
    ee82:	b084      	sub	sp, #16
    ee84:	af00      	add	r7, sp, #0
    ee86:	60f8      	str	r0, [r7, #12]
    ee88:	60b9      	str	r1, [r7, #8]
    ee8a:	4613      	mov	r3, r2
    ee8c:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    ee8e:	2202      	movs	r2, #2
    ee90:	68b9      	ldr	r1, [r7, #8]
    ee92:	68f8      	ldr	r0, [r7, #12]
    ee94:	4b15      	ldr	r3, [pc, #84]	; (eeec <usb_find_cfg_desc+0x6c>)
    ee96:	4798      	blx	r3
    ee98:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    ee9a:	68fb      	ldr	r3, [r7, #12]
    ee9c:	2b00      	cmp	r3, #0
    ee9e:	d11a      	bne.n	eed6 <usb_find_cfg_desc+0x56>
		return NULL;
    eea0:	2300      	movs	r3, #0
    eea2:	e01f      	b.n	eee4 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    eea4:	68f8      	ldr	r0, [r7, #12]
    eea6:	4b12      	ldr	r3, [pc, #72]	; (eef0 <usb_find_cfg_desc+0x70>)
    eea8:	4798      	blx	r3
    eeaa:	4603      	mov	r3, r0
    eeac:	2b01      	cmp	r3, #1
    eeae:	d801      	bhi.n	eeb4 <usb_find_cfg_desc+0x34>
    eeb0:	2300      	movs	r3, #0
    eeb2:	e017      	b.n	eee4 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    eeb4:	68fb      	ldr	r3, [r7, #12]
    eeb6:	3301      	adds	r3, #1
    eeb8:	781b      	ldrb	r3, [r3, #0]
    eeba:	2b02      	cmp	r3, #2
    eebc:	d110      	bne.n	eee0 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    eebe:	68fb      	ldr	r3, [r7, #12]
    eec0:	3305      	adds	r3, #5
    eec2:	781b      	ldrb	r3, [r3, #0]
    eec4:	79fa      	ldrb	r2, [r7, #7]
    eec6:	429a      	cmp	r2, r3
    eec8:	d101      	bne.n	eece <usb_find_cfg_desc+0x4e>
			return desc;
    eeca:	68fb      	ldr	r3, [r7, #12]
    eecc:	e00a      	b.n	eee4 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    eece:	68f8      	ldr	r0, [r7, #12]
    eed0:	4b08      	ldr	r3, [pc, #32]	; (eef4 <usb_find_cfg_desc+0x74>)
    eed2:	4798      	blx	r3
    eed4:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    eed6:	68fa      	ldr	r2, [r7, #12]
    eed8:	68bb      	ldr	r3, [r7, #8]
    eeda:	429a      	cmp	r2, r3
    eedc:	d3e2      	bcc.n	eea4 <usb_find_cfg_desc+0x24>
    eede:	e000      	b.n	eee2 <usb_find_cfg_desc+0x62>
			break;
    eee0:	bf00      	nop
	}
	return NULL;
    eee2:	2300      	movs	r3, #0
}
    eee4:	4618      	mov	r0, r3
    eee6:	3710      	adds	r7, #16
    eee8:	46bd      	mov	sp, r7
    eeea:	bd80      	pop	{r7, pc}
    eeec:	0000edc1 	.word	0x0000edc1
    eef0:	0000ed27 	.word	0x0000ed27
    eef4:	0000ed9d 	.word	0x0000ed9d

0000eef8 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    eef8:	b580      	push	{r7, lr}
    eefa:	b086      	sub	sp, #24
    eefc:	af00      	add	r7, sp, #0
    eefe:	60f8      	str	r0, [r7, #12]
    ef00:	60b9      	str	r1, [r7, #8]
    ef02:	4613      	mov	r3, r2
    ef04:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    ef06:	2300      	movs	r3, #0
    ef08:	75fb      	strb	r3, [r7, #23]
    ef0a:	e020      	b.n	ef4e <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    ef0c:	2203      	movs	r2, #3
    ef0e:	68b9      	ldr	r1, [r7, #8]
    ef10:	68f8      	ldr	r0, [r7, #12]
    ef12:	4b13      	ldr	r3, [pc, #76]	; (ef60 <usb_find_str_desc+0x68>)
    ef14:	4798      	blx	r3
    ef16:	60f8      	str	r0, [r7, #12]
		if (desc) {
    ef18:	68fb      	ldr	r3, [r7, #12]
    ef1a:	2b00      	cmp	r3, #0
    ef1c:	d015      	beq.n	ef4a <usb_find_str_desc+0x52>
			_desc_len_check();
    ef1e:	68f8      	ldr	r0, [r7, #12]
    ef20:	4b10      	ldr	r3, [pc, #64]	; (ef64 <usb_find_str_desc+0x6c>)
    ef22:	4798      	blx	r3
    ef24:	4603      	mov	r3, r0
    ef26:	2b01      	cmp	r3, #1
    ef28:	d801      	bhi.n	ef2e <usb_find_str_desc+0x36>
    ef2a:	2300      	movs	r3, #0
    ef2c:	e014      	b.n	ef58 <usb_find_str_desc+0x60>
			if (i == str_index) {
    ef2e:	7dfa      	ldrb	r2, [r7, #23]
    ef30:	79fb      	ldrb	r3, [r7, #7]
    ef32:	429a      	cmp	r2, r3
    ef34:	d101      	bne.n	ef3a <usb_find_str_desc+0x42>
				return desc;
    ef36:	68fb      	ldr	r3, [r7, #12]
    ef38:	e00e      	b.n	ef58 <usb_find_str_desc+0x60>
			}
			i++;
    ef3a:	7dfb      	ldrb	r3, [r7, #23]
    ef3c:	3301      	adds	r3, #1
    ef3e:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    ef40:	68f8      	ldr	r0, [r7, #12]
    ef42:	4b09      	ldr	r3, [pc, #36]	; (ef68 <usb_find_str_desc+0x70>)
    ef44:	4798      	blx	r3
    ef46:	60f8      	str	r0, [r7, #12]
    ef48:	e001      	b.n	ef4e <usb_find_str_desc+0x56>
		} else {
			return NULL;
    ef4a:	2300      	movs	r3, #0
    ef4c:	e004      	b.n	ef58 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    ef4e:	68fa      	ldr	r2, [r7, #12]
    ef50:	68bb      	ldr	r3, [r7, #8]
    ef52:	429a      	cmp	r2, r3
    ef54:	d3da      	bcc.n	ef0c <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    ef56:	2300      	movs	r3, #0
}
    ef58:	4618      	mov	r0, r3
    ef5a:	3718      	adds	r7, #24
    ef5c:	46bd      	mov	sp, r7
    ef5e:	bd80      	pop	{r7, pc}
    ef60:	0000edc1 	.word	0x0000edc1
    ef64:	0000ed27 	.word	0x0000ed27
    ef68:	0000ed59 	.word	0x0000ed59

0000ef6c <_ZN28Compressor_CANOpen_Interface15GetCurrentSpeedEv>:
	bool	InitCANOpen(void);
	int	Comporesor_Process(void);
	void	Periodic_Task(void);
	bool	Set_CAN_Enable(bool *st);
	void	Set_Motor_Speed(uint16_t sp);
	uint16_t GetCurrentSpeed(void){return current_speed;};
    ef6c:	b480      	push	{r7}
    ef6e:	b083      	sub	sp, #12
    ef70:	af00      	add	r7, sp, #0
    ef72:	6078      	str	r0, [r7, #4]
    ef74:	687b      	ldr	r3, [r7, #4]
    ef76:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
    ef7a:	4618      	mov	r0, r3
    ef7c:	370c      	adds	r7, #12
    ef7e:	46bd      	mov	sp, r7
    ef80:	bc80      	pop	{r7}
    ef82:	4770      	bx	lr

0000ef84 <_ZN20Compresor_ControllerC1Ev>:
#include "Compresor_Controller.h"
#include "CO_Driver_Class.h"
static uint8_t local_data_array[COMPRESSOR_CONTROLLER_DATA_SIZE];

// default constructor
Compresor_Controller::Compresor_Controller()
    ef84:	b580      	push	{r7, lr}
    ef86:	b082      	sub	sp, #8
    ef88:	af00      	add	r7, sp, #0
    ef8a:	6078      	str	r0, [r7, #4]
    ef8c:	687b      	ldr	r3, [r7, #4]
    ef8e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
    ef92:	4618      	mov	r0, r3
    ef94:	4b06      	ldr	r3, [pc, #24]	; (efb0 <_ZN20Compresor_ControllerC1Ev+0x2c>)
    ef96:	4798      	blx	r3
    ef98:	687b      	ldr	r3, [r7, #4]
    ef9a:	4618      	mov	r0, r3
    ef9c:	4b05      	ldr	r3, [pc, #20]	; (efb4 <_ZN20Compresor_ControllerC1Ev+0x30>)
    ef9e:	4798      	blx	r3
    efa0:	4a05      	ldr	r2, [pc, #20]	; (efb8 <_ZN20Compresor_ControllerC1Ev+0x34>)
    efa2:	687b      	ldr	r3, [r7, #4]
    efa4:	601a      	str	r2, [r3, #0]
{
} //Compresor_Controller
    efa6:	687b      	ldr	r3, [r7, #4]
    efa8:	4618      	mov	r0, r3
    efaa:	3708      	adds	r7, #8
    efac:	46bd      	mov	sp, r7
    efae:	bd80      	pop	{r7, pc}
    efb0:	0000f295 	.word	0x0000f295
    efb4:	0000f56d 	.word	0x0000f56d
    efb8:	0001afa0 	.word	0x0001afa0

0000efbc <_ZN20Compresor_ControllerD1Ev>:

// default destructor
Compresor_Controller::~Compresor_Controller()
    efbc:	b580      	push	{r7, lr}
    efbe:	b082      	sub	sp, #8
    efc0:	af00      	add	r7, sp, #0
    efc2:	6078      	str	r0, [r7, #4]
    efc4:	4a08      	ldr	r2, [pc, #32]	; (efe8 <_ZN20Compresor_ControllerD1Ev+0x2c>)
    efc6:	687b      	ldr	r3, [r7, #4]
    efc8:	601a      	str	r2, [r3, #0]
    efca:	687b      	ldr	r3, [r7, #4]
    efcc:	4618      	mov	r0, r3
    efce:	4b07      	ldr	r3, [pc, #28]	; (efec <_ZN20Compresor_ControllerD1Ev+0x30>)
    efd0:	4798      	blx	r3
    efd2:	687b      	ldr	r3, [r7, #4]
    efd4:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
    efd8:	4618      	mov	r0, r3
    efda:	4b05      	ldr	r3, [pc, #20]	; (eff0 <_ZN20Compresor_ControllerD1Ev+0x34>)
    efdc:	4798      	blx	r3
{
} //~Compresor_Controller
    efde:	687b      	ldr	r3, [r7, #4]
    efe0:	4618      	mov	r0, r3
    efe2:	3708      	adds	r7, #8
    efe4:	46bd      	mov	sp, r7
    efe6:	bd80      	pop	{r7, pc}
    efe8:	0001afa0 	.word	0x0001afa0
    efec:	0000f5a9 	.word	0x0000f5a9
    eff0:	0000f2b9 	.word	0x0000f2b9

0000eff4 <_ZN20Compresor_Controller4InitEv>:

bool Compresor_Controller::Init(void){
    eff4:	b590      	push	{r4, r7, lr}
    eff6:	b083      	sub	sp, #12
    eff8:	af00      	add	r7, sp, #0
    effa:	6078      	str	r0, [r7, #4]
	data_array=local_data_array;
    effc:	687b      	ldr	r3, [r7, #4]
    effe:	4a1e      	ldr	r2, [pc, #120]	; (f078 <_ZN20Compresor_Controller4InitEv+0x84>)
    f000:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	isOK=InitExpander();
    f004:	687b      	ldr	r3, [r7, #4]
    f006:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
    f00a:	4618      	mov	r0, r3
    f00c:	4b1b      	ldr	r3, [pc, #108]	; (f07c <_ZN20Compresor_Controller4InitEv+0x88>)
    f00e:	4798      	blx	r3
    f010:	4603      	mov	r3, r0
    f012:	461a      	mov	r2, r3
    f014:	687b      	ldr	r3, [r7, #4]
    f016:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	if (isOK)
    f01a:	687b      	ldr	r3, [r7, #4]
    f01c:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
    f020:	b2db      	uxtb	r3, r3
    f022:	2b00      	cmp	r3, #0
    f024:	d01f      	beq.n	f066 <_ZN20Compresor_Controller4InitEv+0x72>
	{
		if (InitCANOpen())
    f026:	687b      	ldr	r3, [r7, #4]
    f028:	4618      	mov	r0, r3
    f02a:	4b15      	ldr	r3, [pc, #84]	; (f080 <_ZN20Compresor_Controller4InitEv+0x8c>)
    f02c:	4798      	blx	r3
    f02e:	4603      	mov	r3, r0
    f030:	2b00      	cmp	r3, #0
    f032:	d018      	beq.n	f066 <_ZN20Compresor_Controller4InitEv+0x72>
		{
			canopen_driver->canopen_ready=true;
    f034:	4b13      	ldr	r3, [pc, #76]	; (f084 <_ZN20Compresor_Controller4InitEv+0x90>)
    f036:	681b      	ldr	r3, [r3, #0]
    f038:	2201      	movs	r2, #1
    f03a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			Set_CAN_Enable(IsEnabledPointer());
    f03e:	687c      	ldr	r4, [r7, #4]
    f040:	687b      	ldr	r3, [r7, #4]
    f042:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
    f046:	4618      	mov	r0, r3
    f048:	4b0f      	ldr	r3, [pc, #60]	; (f088 <_ZN20Compresor_Controller4InitEv+0x94>)
    f04a:	4798      	blx	r3
    f04c:	4603      	mov	r3, r0
    f04e:	4619      	mov	r1, r3
    f050:	4620      	mov	r0, r4
    f052:	4b0e      	ldr	r3, [pc, #56]	; (f08c <_ZN20Compresor_Controller4InitEv+0x98>)
    f054:	4798      	blx	r3
			Set_Slave_ID(CCU_CANOPEN_NODE);
    f056:	2102      	movs	r1, #2
    f058:	6878      	ldr	r0, [r7, #4]
    f05a:	4b0d      	ldr	r3, [pc, #52]	; (f090 <_ZN20Compresor_Controller4InitEv+0x9c>)
    f05c:	4798      	blx	r3
			isOK=true;
    f05e:	687b      	ldr	r3, [r7, #4]
    f060:	2201      	movs	r2, #1
    f062:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
		}
	} 
	else
	{
	}
	return isOK;
    f066:	687b      	ldr	r3, [r7, #4]
    f068:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
    f06c:	b2db      	uxtb	r3, r3
}
    f06e:	4618      	mov	r0, r3
    f070:	370c      	adds	r7, #12
    f072:	46bd      	mov	sp, r7
    f074:	bd90      	pop	{r4, r7, pc}
    f076:	bf00      	nop
    f078:	200028e8 	.word	0x200028e8
    f07c:	0000f2cd 	.word	0x0000f2cd
    f080:	0000f5d1 	.word	0x0000f5d1
    f084:	2000da0c 	.word	0x2000da0c
    f088:	0000f42d 	.word	0x0000f42d
    f08c:	0000f7e5 	.word	0x0000f7e5
    f090:	0000f095 	.word	0x0000f095

0000f094 <_ZN20Compresor_Controller12Set_Slave_IDEh>:
uint8_t Compresor_Controller::Set_Slave_ID (uint8_t sn){
    f094:	b580      	push	{r7, lr}
    f096:	b082      	sub	sp, #8
    f098:	af00      	add	r7, sp, #0
    f09a:	6078      	str	r0, [r7, #4]
    f09c:	460b      	mov	r3, r1
    f09e:	70fb      	strb	r3, [r7, #3]
	return	canopen_driver->Set_Slave_Node(sn);
    f0a0:	4b05      	ldr	r3, [pc, #20]	; (f0b8 <_ZN20Compresor_Controller12Set_Slave_IDEh+0x24>)
    f0a2:	681b      	ldr	r3, [r3, #0]
    f0a4:	78fa      	ldrb	r2, [r7, #3]
    f0a6:	4611      	mov	r1, r2
    f0a8:	4618      	mov	r0, r3
    f0aa:	4b04      	ldr	r3, [pc, #16]	; (f0bc <_ZN20Compresor_Controller12Set_Slave_IDEh+0x28>)
    f0ac:	4798      	blx	r3
    f0ae:	4603      	mov	r3, r0
}
    f0b0:	4618      	mov	r0, r3
    f0b2:	3708      	adds	r7, #8
    f0b4:	46bd      	mov	sp, r7
    f0b6:	bd80      	pop	{r7, pc}
    f0b8:	2000da0c 	.word	0x2000da0c
    f0bc:	0001579b 	.word	0x0001579b

0000f0c0 <_ZN20Compresor_Controller19GetCompressorStatusEPh>:
void Compresor_Controller::GetCompressorStatus(uint8_t *arr){
    f0c0:	b590      	push	{r4, r7, lr}
    f0c2:	b083      	sub	sp, #12
    f0c4:	af00      	add	r7, sp, #0
    f0c6:	6078      	str	r0, [r7, #4]
    f0c8:	6039      	str	r1, [r7, #0]
	data_array[0]=ReadStatus();
    f0ca:	687b      	ldr	r3, [r7, #4]
    f0cc:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
    f0d0:	687b      	ldr	r3, [r7, #4]
    f0d2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
    f0d6:	4618      	mov	r0, r3
    f0d8:	4b16      	ldr	r3, [pc, #88]	; (f134 <_ZN20Compresor_Controller19GetCompressorStatusEPh+0x74>)
    f0da:	4798      	blx	r3
    f0dc:	4603      	mov	r3, r0
    f0de:	7023      	strb	r3, [r4, #0]
	current_speed=GetCurrentSpeed();
    f0e0:	687b      	ldr	r3, [r7, #4]
    f0e2:	4618      	mov	r0, r3
    f0e4:	4b14      	ldr	r3, [pc, #80]	; (f138 <_ZN20Compresor_Controller19GetCompressorStatusEPh+0x78>)
    f0e6:	4798      	blx	r3
    f0e8:	4603      	mov	r3, r0
    f0ea:	461a      	mov	r2, r3
    f0ec:	687b      	ldr	r3, [r7, #4]
    f0ee:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
	memcpy(&data_array[1],&current_speed,2);
    f0f2:	687b      	ldr	r3, [r7, #4]
    f0f4:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
    f0f8:	3301      	adds	r3, #1
    f0fa:	687a      	ldr	r2, [r7, #4]
    f0fc:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
    f100:	8812      	ldrh	r2, [r2, #0]
    f102:	b292      	uxth	r2, r2
    f104:	801a      	strh	r2, [r3, #0]
	data_array[3]=ReadPressureLimits();
    f106:	687b      	ldr	r3, [r7, #4]
    f108:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
    f10c:	1cdc      	adds	r4, r3, #3
    f10e:	687b      	ldr	r3, [r7, #4]
    f110:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
    f114:	4618      	mov	r0, r3
    f116:	4b09      	ldr	r3, [pc, #36]	; (f13c <_ZN20Compresor_Controller19GetCompressorStatusEPh+0x7c>)
    f118:	4798      	blx	r3
    f11a:	4603      	mov	r3, r0
    f11c:	7023      	strb	r3, [r4, #0]
	memcpy(arr,data_array,4);
    f11e:	687b      	ldr	r3, [r7, #4]
    f120:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
    f124:	681b      	ldr	r3, [r3, #0]
    f126:	461a      	mov	r2, r3
    f128:	683b      	ldr	r3, [r7, #0]
    f12a:	601a      	str	r2, [r3, #0]
}
    f12c:	bf00      	nop
    f12e:	370c      	adds	r7, #12
    f130:	46bd      	mov	sp, r7
    f132:	bd90      	pop	{r4, r7, pc}
    f134:	0000f375 	.word	0x0000f375
    f138:	0000ef6d 	.word	0x0000ef6d
    f13c:	0000f399 	.word	0x0000f399

0000f140 <_Z41__static_initialization_and_destruction_0ii>:
    f140:	b580      	push	{r7, lr}
    f142:	b082      	sub	sp, #8
    f144:	af00      	add	r7, sp, #0
    f146:	6078      	str	r0, [r7, #4]
    f148:	6039      	str	r1, [r7, #0]
    f14a:	687b      	ldr	r3, [r7, #4]
    f14c:	2b01      	cmp	r3, #1
    f14e:	d15d      	bne.n	f20c <_Z41__static_initialization_and_destruction_0ii+0xcc>
    f150:	683b      	ldr	r3, [r7, #0]
    f152:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f156:	4293      	cmp	r3, r2
    f158:	d158      	bne.n	f20c <_Z41__static_initialization_and_destruction_0ii+0xcc>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    f15a:	492e      	ldr	r1, [pc, #184]	; (f214 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f15c:	482e      	ldr	r0, [pc, #184]	; (f218 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f15e:	4b2f      	ldr	r3, [pc, #188]	; (f21c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f160:	4798      	blx	r3
    f162:	4a2f      	ldr	r2, [pc, #188]	; (f220 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f164:	492f      	ldr	r1, [pc, #188]	; (f224 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f166:	482c      	ldr	r0, [pc, #176]	; (f218 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f168:	4b2f      	ldr	r3, [pc, #188]	; (f228 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f16a:	4798      	blx	r3
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f16c:	492f      	ldr	r1, [pc, #188]	; (f22c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f16e:	4830      	ldr	r0, [pc, #192]	; (f230 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f170:	4b30      	ldr	r3, [pc, #192]	; (f234 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f172:	4798      	blx	r3
    f174:	4a2a      	ldr	r2, [pc, #168]	; (f220 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f176:	4930      	ldr	r1, [pc, #192]	; (f238 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f178:	482d      	ldr	r0, [pc, #180]	; (f230 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f17a:	4b2b      	ldr	r3, [pc, #172]	; (f228 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f17c:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f17e:	492f      	ldr	r1, [pc, #188]	; (f23c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f180:	482f      	ldr	r0, [pc, #188]	; (f240 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f182:	4b2c      	ldr	r3, [pc, #176]	; (f234 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f184:	4798      	blx	r3
    f186:	4a26      	ldr	r2, [pc, #152]	; (f220 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f188:	492b      	ldr	r1, [pc, #172]	; (f238 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f18a:	482d      	ldr	r0, [pc, #180]	; (f240 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f18c:	4b26      	ldr	r3, [pc, #152]	; (f228 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f18e:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f190:	492c      	ldr	r1, [pc, #176]	; (f244 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f192:	482d      	ldr	r0, [pc, #180]	; (f248 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f194:	4b27      	ldr	r3, [pc, #156]	; (f234 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f196:	4798      	blx	r3
    f198:	4a21      	ldr	r2, [pc, #132]	; (f220 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f19a:	4927      	ldr	r1, [pc, #156]	; (f238 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f19c:	482a      	ldr	r0, [pc, #168]	; (f248 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f19e:	4b22      	ldr	r3, [pc, #136]	; (f228 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f1a0:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f1a2:	492a      	ldr	r1, [pc, #168]	; (f24c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f1a4:	482a      	ldr	r0, [pc, #168]	; (f250 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f1a6:	4b23      	ldr	r3, [pc, #140]	; (f234 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f1a8:	4798      	blx	r3
    f1aa:	4a1d      	ldr	r2, [pc, #116]	; (f220 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f1ac:	4922      	ldr	r1, [pc, #136]	; (f238 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f1ae:	4828      	ldr	r0, [pc, #160]	; (f250 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f1b0:	4b1d      	ldr	r3, [pc, #116]	; (f228 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f1b2:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f1b4:	4927      	ldr	r1, [pc, #156]	; (f254 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f1b6:	4828      	ldr	r0, [pc, #160]	; (f258 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f1b8:	4b1e      	ldr	r3, [pc, #120]	; (f234 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f1ba:	4798      	blx	r3
    f1bc:	4a18      	ldr	r2, [pc, #96]	; (f220 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f1be:	491e      	ldr	r1, [pc, #120]	; (f238 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f1c0:	4825      	ldr	r0, [pc, #148]	; (f258 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f1c2:	4b19      	ldr	r3, [pc, #100]	; (f228 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f1c4:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f1c6:	4925      	ldr	r1, [pc, #148]	; (f25c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    f1c8:	4825      	ldr	r0, [pc, #148]	; (f260 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    f1ca:	4b1a      	ldr	r3, [pc, #104]	; (f234 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f1cc:	4798      	blx	r3
    f1ce:	4a14      	ldr	r2, [pc, #80]	; (f220 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f1d0:	4919      	ldr	r1, [pc, #100]	; (f238 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f1d2:	4823      	ldr	r0, [pc, #140]	; (f260 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    f1d4:	4b14      	ldr	r3, [pc, #80]	; (f228 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f1d6:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f1d8:	4922      	ldr	r1, [pc, #136]	; (f264 <_Z41__static_initialization_and_destruction_0ii+0x124>)
    f1da:	4823      	ldr	r0, [pc, #140]	; (f268 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    f1dc:	4b15      	ldr	r3, [pc, #84]	; (f234 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f1de:	4798      	blx	r3
    f1e0:	4a0f      	ldr	r2, [pc, #60]	; (f220 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f1e2:	4915      	ldr	r1, [pc, #84]	; (f238 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f1e4:	4820      	ldr	r0, [pc, #128]	; (f268 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    f1e6:	4b10      	ldr	r3, [pc, #64]	; (f228 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f1e8:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    f1ea:	4920      	ldr	r1, [pc, #128]	; (f26c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    f1ec:	4820      	ldr	r0, [pc, #128]	; (f270 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    f1ee:	4b11      	ldr	r3, [pc, #68]	; (f234 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f1f0:	4798      	blx	r3
    f1f2:	4a0b      	ldr	r2, [pc, #44]	; (f220 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f1f4:	4910      	ldr	r1, [pc, #64]	; (f238 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f1f6:	481e      	ldr	r0, [pc, #120]	; (f270 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    f1f8:	4b0b      	ldr	r3, [pc, #44]	; (f228 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f1fa:	4798      	blx	r3
    f1fc:	481d      	ldr	r0, [pc, #116]	; (f274 <_Z41__static_initialization_and_destruction_0ii+0x134>)
    f1fe:	4b1e      	ldr	r3, [pc, #120]	; (f278 <_Z41__static_initialization_and_destruction_0ii+0x138>)
    f200:	4798      	blx	r3
    f202:	4a07      	ldr	r2, [pc, #28]	; (f220 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f204:	491d      	ldr	r1, [pc, #116]	; (f27c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
    f206:	481b      	ldr	r0, [pc, #108]	; (f274 <_Z41__static_initialization_and_destruction_0ii+0x134>)
    f208:	4b07      	ldr	r3, [pc, #28]	; (f228 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f20a:	4798      	blx	r3
    f20c:	bf00      	nop
    f20e:	3708      	adds	r7, #8
    f210:	46bd      	mov	sp, r7
    f212:	bd80      	pop	{r7, pc}
    f214:	2000dff8 	.word	0x2000dff8
    f218:	200027d0 	.word	0x200027d0
    f21c:	0000faf1 	.word	0x0000faf1
    f220:	20000000 	.word	0x20000000
    f224:	0000fb0d 	.word	0x0000fb0d
    f228:	0001a0b5 	.word	0x0001a0b5
    f22c:	2000dec8 	.word	0x2000dec8
    f230:	200027e8 	.word	0x200027e8
    f234:	000101a9 	.word	0x000101a9
    f238:	000101e1 	.word	0x000101e1
    f23c:	2000df5c 	.word	0x2000df5c
    f240:	20002808 	.word	0x20002808
    f244:	2000e080 	.word	0x2000e080
    f248:	20002828 	.word	0x20002828
    f24c:	2000df7c 	.word	0x2000df7c
    f250:	20002848 	.word	0x20002848
    f254:	2000e040 	.word	0x2000e040
    f258:	20002868 	.word	0x20002868
    f25c:	2000e060 	.word	0x2000e060
    f260:	20002888 	.word	0x20002888
    f264:	2000df38 	.word	0x2000df38
    f268:	200028a8 	.word	0x200028a8
    f26c:	2000dfd8 	.word	0x2000dfd8
    f270:	200028c8 	.word	0x200028c8
    f274:	200028f4 	.word	0x200028f4
    f278:	0000ef85 	.word	0x0000ef85
    f27c:	0000efbd 	.word	0x0000efbd

0000f280 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev>:
    f280:	b580      	push	{r7, lr}
    f282:	af00      	add	r7, sp, #0
    f284:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f288:	2001      	movs	r0, #1
    f28a:	4b01      	ldr	r3, [pc, #4]	; (f290 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0x10>)
    f28c:	4798      	blx	r3
    f28e:	bd80      	pop	{r7, pc}
    f290:	0000f141 	.word	0x0000f141

0000f294 <_ZN23Compresor_I2C_InterfaceC1Ev>:
#include "Compresor_I2C_Interface.h"

//static	MCP23008_Class expandersCompresorStatic;
static	MCP23008_Class local_expanders_compressor[2];
// default constructor
Compresor_I2C_Interface::Compresor_I2C_Interface()
    f294:	b480      	push	{r7}
    f296:	b083      	sub	sp, #12
    f298:	af00      	add	r7, sp, #0
    f29a:	6078      	str	r0, [r7, #4]
{
	i2c=&i2cSharedStatic;
    f29c:	687b      	ldr	r3, [r7, #4]
    f29e:	4a05      	ldr	r2, [pc, #20]	; (f2b4 <_ZN23Compresor_I2C_InterfaceC1Ev+0x20>)
    f2a0:	609a      	str	r2, [r3, #8]
	isOK=false;
    f2a2:	687b      	ldr	r3, [r7, #4]
    f2a4:	2200      	movs	r2, #0
    f2a6:	731a      	strb	r2, [r3, #12]
} //Compresor_I2C_Interface
    f2a8:	687b      	ldr	r3, [r7, #4]
    f2aa:	4618      	mov	r0, r3
    f2ac:	370c      	adds	r7, #12
    f2ae:	46bd      	mov	sp, r7
    f2b0:	bc80      	pop	{r7}
    f2b2:	4770      	bx	lr
    f2b4:	20002ab4 	.word	0x20002ab4

0000f2b8 <_ZN23Compresor_I2C_InterfaceD1Ev>:

// default destructor
Compresor_I2C_Interface::~Compresor_I2C_Interface()
    f2b8:	b480      	push	{r7}
    f2ba:	b083      	sub	sp, #12
    f2bc:	af00      	add	r7, sp, #0
    f2be:	6078      	str	r0, [r7, #4]
{
} //~Compresor_I2C_Interface
    f2c0:	687b      	ldr	r3, [r7, #4]
    f2c2:	4618      	mov	r0, r3
    f2c4:	370c      	adds	r7, #12
    f2c6:	46bd      	mov	sp, r7
    f2c8:	bc80      	pop	{r7}
    f2ca:	4770      	bx	lr

0000f2cc <_ZN23Compresor_I2C_Interface12InitExpanderEv>:

bool Compresor_I2C_Interface::InitExpander(void){
    f2cc:	b580      	push	{r7, lr}
    f2ce:	b082      	sub	sp, #8
    f2d0:	af00      	add	r7, sp, #0
    f2d2:	6078      	str	r0, [r7, #4]
	if (i2c->initiated)
    f2d4:	687b      	ldr	r3, [r7, #4]
    f2d6:	689b      	ldr	r3, [r3, #8]
    f2d8:	7a1b      	ldrb	r3, [r3, #8]
    f2da:	b2db      	uxtb	r3, r3
    f2dc:	2b00      	cmp	r3, #0
    f2de:	d104      	bne.n	f2ea <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x1e>
	{
	} 
	else
	{
		
		i2c->Init();
    f2e0:	687b      	ldr	r3, [r7, #4]
    f2e2:	689b      	ldr	r3, [r3, #8]
    f2e4:	4618      	mov	r0, r3
    f2e6:	4b1c      	ldr	r3, [pc, #112]	; (f358 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x8c>)
    f2e8:	4798      	blx	r3
	}
	if (i2c->isOK)
    f2ea:	687b      	ldr	r3, [r7, #4]
    f2ec:	689b      	ldr	r3, [r3, #8]
    f2ee:	7a5b      	ldrb	r3, [r3, #9]
    f2f0:	b2db      	uxtb	r3, r3
    f2f2:	2b00      	cmp	r3, #0
    f2f4:	d028      	beq.n	f348 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x7c>
	{
		expander[0]=&local_expanders_compressor[0];
    f2f6:	687b      	ldr	r3, [r7, #4]
    f2f8:	4a18      	ldr	r2, [pc, #96]	; (f35c <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x90>)
    f2fa:	611a      	str	r2, [r3, #16]
		expander[0]->Init(COMPRESOR_MCP23008_ADDRESS,i2c);
    f2fc:	687b      	ldr	r3, [r7, #4]
    f2fe:	6918      	ldr	r0, [r3, #16]
    f300:	687b      	ldr	r3, [r7, #4]
    f302:	689b      	ldr	r3, [r3, #8]
    f304:	461a      	mov	r2, r3
    f306:	2125      	movs	r1, #37	; 0x25
    f308:	4b15      	ldr	r3, [pc, #84]	; (f360 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x94>)
    f30a:	4798      	blx	r3
		expander[0]->SetPortInput(0xf0);
    f30c:	687b      	ldr	r3, [r7, #4]
    f30e:	691b      	ldr	r3, [r3, #16]
    f310:	21f0      	movs	r1, #240	; 0xf0
    f312:	4618      	mov	r0, r3
    f314:	4b13      	ldr	r3, [pc, #76]	; (f364 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x98>)
    f316:	4798      	blx	r3
				expander[1]=&local_expanders_compressor[1];
    f318:	687b      	ldr	r3, [r7, #4]
    f31a:	4a13      	ldr	r2, [pc, #76]	; (f368 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x9c>)
    f31c:	615a      	str	r2, [r3, #20]
				expander[1]->Init(COMPRESOR_MCP23008_ADDRESS+1,i2c);
    f31e:	687b      	ldr	r3, [r7, #4]
    f320:	6958      	ldr	r0, [r3, #20]
    f322:	687b      	ldr	r3, [r7, #4]
    f324:	689b      	ldr	r3, [r3, #8]
    f326:	461a      	mov	r2, r3
    f328:	2126      	movs	r1, #38	; 0x26
    f32a:	4b0d      	ldr	r3, [pc, #52]	; (f360 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x94>)
    f32c:	4798      	blx	r3
				expander[1]->SetPortInput();
    f32e:	687b      	ldr	r3, [r7, #4]
    f330:	695b      	ldr	r3, [r3, #20]
    f332:	4618      	mov	r0, r3
    f334:	4b0d      	ldr	r3, [pc, #52]	; (f36c <_ZN23Compresor_I2C_Interface12InitExpanderEv+0xa0>)
    f336:	4798      	blx	r3
	//	expander->SetPortOutput();
		isOK=SelfTest();
    f338:	6878      	ldr	r0, [r7, #4]
    f33a:	4b0d      	ldr	r3, [pc, #52]	; (f370 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0xa4>)
    f33c:	4798      	blx	r3
    f33e:	4603      	mov	r3, r0
    f340:	461a      	mov	r2, r3
    f342:	687b      	ldr	r3, [r7, #4]
    f344:	731a      	strb	r2, [r3, #12]
    f346:	e000      	b.n	f34a <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x7e>
	}
	else
	{
		asm("nop");
    f348:	bf00      	nop
	}
	//isOK=i2c->isOK;
		return isOK;
    f34a:	687b      	ldr	r3, [r7, #4]
    f34c:	7b1b      	ldrb	r3, [r3, #12]
}
    f34e:	4618      	mov	r0, r3
    f350:	3708      	adds	r7, #8
    f352:	46bd      	mov	sp, r7
    f354:	bd80      	pop	{r7, pc}
    f356:	bf00      	nop
    f358:	0000fb21 	.word	0x0000fb21
    f35c:	20002acc 	.word	0x20002acc
    f360:	0000fcd5 	.word	0x0000fcd5
    f364:	0000febd 	.word	0x0000febd
    f368:	20002ae8 	.word	0x20002ae8
    f36c:	0000fe79 	.word	0x0000fe79
    f370:	0000f469 	.word	0x0000f469

0000f374 <_ZN23Compresor_I2C_Interface10ReadStatusEv>:

uint8_t	Compresor_I2C_Interface::ReadStatus(void){
    f374:	b580      	push	{r7, lr}
    f376:	b084      	sub	sp, #16
    f378:	af00      	add	r7, sp, #0
    f37a:	6078      	str	r0, [r7, #4]
	uint8_t r=expander[0]->ReadGPIORegister();
    f37c:	687b      	ldr	r3, [r7, #4]
    f37e:	691b      	ldr	r3, [r3, #16]
    f380:	4618      	mov	r0, r3
    f382:	4b04      	ldr	r3, [pc, #16]	; (f394 <_ZN23Compresor_I2C_Interface10ReadStatusEv+0x20>)
    f384:	4798      	blx	r3
    f386:	4603      	mov	r3, r0
    f388:	73fb      	strb	r3, [r7, #15]
	
	return r;
    f38a:	7bfb      	ldrb	r3, [r7, #15]
	
}
    f38c:	4618      	mov	r0, r3
    f38e:	3710      	adds	r7, #16
    f390:	46bd      	mov	sp, r7
    f392:	bd80      	pop	{r7, pc}
    f394:	0000fdb9 	.word	0x0000fdb9

0000f398 <_ZN23Compresor_I2C_Interface18ReadPressureLimitsEv>:
uint8_t	Compresor_I2C_Interface::ReadPressureLimits(void){
    f398:	b580      	push	{r7, lr}
    f39a:	b084      	sub	sp, #16
    f39c:	af00      	add	r7, sp, #0
    f39e:	6078      	str	r0, [r7, #4]
	uint8_t r=expander[1]->ReadGPIORegister();
    f3a0:	687b      	ldr	r3, [r7, #4]
    f3a2:	695b      	ldr	r3, [r3, #20]
    f3a4:	4618      	mov	r0, r3
    f3a6:	4b04      	ldr	r3, [pc, #16]	; (f3b8 <_ZN23Compresor_I2C_Interface18ReadPressureLimitsEv+0x20>)
    f3a8:	4798      	blx	r3
    f3aa:	4603      	mov	r3, r0
    f3ac:	73fb      	strb	r3, [r7, #15]
	
	return r;
    f3ae:	7bfb      	ldrb	r3, [r7, #15]
	
}
    f3b0:	4618      	mov	r0, r3
    f3b2:	3710      	adds	r7, #16
    f3b4:	46bd      	mov	sp, r7
    f3b6:	bd80      	pop	{r7, pc}
    f3b8:	0000fdb9 	.word	0x0000fdb9

0000f3bc <_ZN23Compresor_I2C_Interface9SetEnableEb>:
uint8_t	Compresor_I2C_Interface::SetEnable(bool state){
    f3bc:	b580      	push	{r7, lr}
    f3be:	b082      	sub	sp, #8
    f3c0:	af00      	add	r7, sp, #0
    f3c2:	6078      	str	r0, [r7, #4]
    f3c4:	460b      	mov	r3, r1
    f3c6:	70fb      	strb	r3, [r7, #3]

	enabled=expander[0]->WriteDigit(0,state);
    f3c8:	687b      	ldr	r3, [r7, #4]
    f3ca:	691b      	ldr	r3, [r3, #16]
    f3cc:	78fa      	ldrb	r2, [r7, #3]
    f3ce:	2100      	movs	r1, #0
    f3d0:	4618      	mov	r0, r3
    f3d2:	4b06      	ldr	r3, [pc, #24]	; (f3ec <_ZN23Compresor_I2C_Interface9SetEnableEb+0x30>)
    f3d4:	4798      	blx	r3
    f3d6:	4603      	mov	r3, r0
    f3d8:	461a      	mov	r2, r3
    f3da:	687b      	ldr	r3, [r7, #4]
    f3dc:	735a      	strb	r2, [r3, #13]
	return uint8_t(enabled);
    f3de:	687b      	ldr	r3, [r7, #4]
    f3e0:	7b5b      	ldrb	r3, [r3, #13]
}
    f3e2:	4618      	mov	r0, r3
    f3e4:	3708      	adds	r7, #8
    f3e6:	46bd      	mov	sp, r7
    f3e8:	bd80      	pop	{r7, pc}
    f3ea:	bf00      	nop
    f3ec:	00010071 	.word	0x00010071

0000f3f0 <_ZN23Compresor_I2C_Interface9IsEnabledEv>:

	enabled=expander[0]->WriteDigit(2,!state);
	return uint8_t(enabled);
}

bool Compresor_I2C_Interface::IsEnabled(void){
    f3f0:	b580      	push	{r7, lr}
    f3f2:	b084      	sub	sp, #16
    f3f4:	af00      	add	r7, sp, #0
    f3f6:	6078      	str	r0, [r7, #4]

	uint8_t value=expander[0]->ReadGPIORegister();
    f3f8:	687b      	ldr	r3, [r7, #4]
    f3fa:	691b      	ldr	r3, [r3, #16]
    f3fc:	4618      	mov	r0, r3
    f3fe:	4b0a      	ldr	r3, [pc, #40]	; (f428 <_ZN23Compresor_I2C_Interface9IsEnabledEv+0x38>)
    f400:	4798      	blx	r3
    f402:	4603      	mov	r3, r0
    f404:	73fb      	strb	r3, [r7, #15]
	enabled=(value&0x01);
    f406:	7bfb      	ldrb	r3, [r7, #15]
    f408:	f003 0301 	and.w	r3, r3, #1
    f40c:	2b00      	cmp	r3, #0
    f40e:	bf14      	ite	ne
    f410:	2301      	movne	r3, #1
    f412:	2300      	moveq	r3, #0
    f414:	b2da      	uxtb	r2, r3
    f416:	687b      	ldr	r3, [r7, #4]
    f418:	735a      	strb	r2, [r3, #13]
	return enabled;
    f41a:	687b      	ldr	r3, [r7, #4]
    f41c:	7b5b      	ldrb	r3, [r3, #13]
}
    f41e:	4618      	mov	r0, r3
    f420:	3710      	adds	r7, #16
    f422:	46bd      	mov	sp, r7
    f424:	bd80      	pop	{r7, pc}
    f426:	bf00      	nop
    f428:	0000fdb9 	.word	0x0000fdb9

0000f42c <_ZN23Compresor_I2C_Interface16IsEnabledPointerEv>:
bool* Compresor_I2C_Interface::IsEnabledPointer(void){
    f42c:	b580      	push	{r7, lr}
    f42e:	b084      	sub	sp, #16
    f430:	af00      	add	r7, sp, #0
    f432:	6078      	str	r0, [r7, #4]

	uint8_t value=expander[0]->ReadGPIORegister();
    f434:	687b      	ldr	r3, [r7, #4]
    f436:	691b      	ldr	r3, [r3, #16]
    f438:	4618      	mov	r0, r3
    f43a:	4b0a      	ldr	r3, [pc, #40]	; (f464 <_ZN23Compresor_I2C_Interface16IsEnabledPointerEv+0x38>)
    f43c:	4798      	blx	r3
    f43e:	4603      	mov	r3, r0
    f440:	73fb      	strb	r3, [r7, #15]
	enabled=(value&0x01);
    f442:	7bfb      	ldrb	r3, [r7, #15]
    f444:	f003 0301 	and.w	r3, r3, #1
    f448:	2b00      	cmp	r3, #0
    f44a:	bf14      	ite	ne
    f44c:	2301      	movne	r3, #1
    f44e:	2300      	moveq	r3, #0
    f450:	b2da      	uxtb	r2, r3
    f452:	687b      	ldr	r3, [r7, #4]
    f454:	735a      	strb	r2, [r3, #13]
	return &enabled;
    f456:	687b      	ldr	r3, [r7, #4]
    f458:	330d      	adds	r3, #13
}
    f45a:	4618      	mov	r0, r3
    f45c:	3710      	adds	r7, #16
    f45e:	46bd      	mov	sp, r7
    f460:	bd80      	pop	{r7, pc}
    f462:	bf00      	nop
    f464:	0000fdb9 	.word	0x0000fdb9

0000f468 <_ZN23Compresor_I2C_Interface8SelfTestEv>:

bool Compresor_I2C_Interface::SelfTest(void){
    f468:	b480      	push	{r7}
    f46a:	b085      	sub	sp, #20
    f46c:	af00      	add	r7, sp, #0
    f46e:	6078      	str	r0, [r7, #4]
	bool result=true;
    f470:	2301      	movs	r3, #1
    f472:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 4; i++)
    f474:	2300      	movs	r3, #0
    f476:	73fb      	strb	r3, [r7, #15]
    f478:	7bfb      	ldrb	r3, [r7, #15]
    f47a:	2b03      	cmp	r3, #3
    f47c:	dc03      	bgt.n	f486 <_ZN23Compresor_I2C_Interface8SelfTestEv+0x1e>
    f47e:	7bfb      	ldrb	r3, [r7, #15]
    f480:	3301      	adds	r3, #1
    f482:	73fb      	strb	r3, [r7, #15]
    f484:	e7f8      	b.n	f478 <_ZN23Compresor_I2C_Interface8SelfTestEv+0x10>
		
		
	}
	

	return result;
    f486:	7bbb      	ldrb	r3, [r7, #14]
    f488:	4618      	mov	r0, r3
    f48a:	3714      	adds	r7, #20
    f48c:	46bd      	mov	sp, r7
    f48e:	bc80      	pop	{r7}
    f490:	4770      	bx	lr
	...

0000f494 <__tcf_0>:
static	MCP23008_Class local_expanders_compressor[2];
    f494:	b590      	push	{r4, r7, lr}
    f496:	b083      	sub	sp, #12
    f498:	af00      	add	r7, sp, #0
    f49a:	6078      	str	r0, [r7, #4]
    f49c:	4c05      	ldr	r4, [pc, #20]	; (f4b4 <__tcf_0+0x20>)
    f49e:	4b06      	ldr	r3, [pc, #24]	; (f4b8 <__tcf_0+0x24>)
    f4a0:	429c      	cmp	r4, r3
    f4a2:	d004      	beq.n	f4ae <__tcf_0+0x1a>
    f4a4:	3c1c      	subs	r4, #28
    f4a6:	4620      	mov	r0, r4
    f4a8:	4b04      	ldr	r3, [pc, #16]	; (f4bc <__tcf_0+0x28>)
    f4aa:	4798      	blx	r3
    f4ac:	e7f7      	b.n	f49e <__tcf_0+0xa>
    f4ae:	370c      	adds	r7, #12
    f4b0:	46bd      	mov	sp, r7
    f4b2:	bd90      	pop	{r4, r7, pc}
    f4b4:	20002b04 	.word	0x20002b04
    f4b8:	20002acc 	.word	0x20002acc
    f4bc:	0000fcc1 	.word	0x0000fcc1

0000f4c0 <_Z41__static_initialization_and_destruction_0ii>:
    f4c0:	b5b0      	push	{r4, r5, r7, lr}
    f4c2:	b082      	sub	sp, #8
    f4c4:	af00      	add	r7, sp, #0
    f4c6:	6078      	str	r0, [r7, #4]
    f4c8:	6039      	str	r1, [r7, #0]
    f4ca:	687b      	ldr	r3, [r7, #4]
    f4cc:	2b01      	cmp	r3, #1
    f4ce:	d11d      	bne.n	f50c <_Z41__static_initialization_and_destruction_0ii+0x4c>
    f4d0:	683b      	ldr	r3, [r7, #0]
    f4d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f4d6:	4293      	cmp	r3, r2
    f4d8:	d118      	bne.n	f50c <_Z41__static_initialization_and_destruction_0ii+0x4c>
    f4da:	490e      	ldr	r1, [pc, #56]	; (f514 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    f4dc:	480e      	ldr	r0, [pc, #56]	; (f518 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f4de:	4b0f      	ldr	r3, [pc, #60]	; (f51c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    f4e0:	4798      	blx	r3
    f4e2:	4a0f      	ldr	r2, [pc, #60]	; (f520 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    f4e4:	490f      	ldr	r1, [pc, #60]	; (f524 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    f4e6:	480c      	ldr	r0, [pc, #48]	; (f518 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f4e8:	4b0f      	ldr	r3, [pc, #60]	; (f528 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    f4ea:	4798      	blx	r3
static	MCP23008_Class local_expanders_compressor[2];
    f4ec:	4b0f      	ldr	r3, [pc, #60]	; (f52c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    f4ee:	2401      	movs	r4, #1
    f4f0:	461d      	mov	r5, r3
    f4f2:	2c00      	cmp	r4, #0
    f4f4:	db05      	blt.n	f502 <_Z41__static_initialization_and_destruction_0ii+0x42>
    f4f6:	4628      	mov	r0, r5
    f4f8:	4b0d      	ldr	r3, [pc, #52]	; (f530 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    f4fa:	4798      	blx	r3
    f4fc:	351c      	adds	r5, #28
    f4fe:	3c01      	subs	r4, #1
    f500:	e7f7      	b.n	f4f2 <_Z41__static_initialization_and_destruction_0ii+0x32>
    f502:	4a07      	ldr	r2, [pc, #28]	; (f520 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    f504:	490b      	ldr	r1, [pc, #44]	; (f534 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    f506:	2000      	movs	r0, #0
    f508:	4b07      	ldr	r3, [pc, #28]	; (f528 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    f50a:	4798      	blx	r3
    f50c:	bf00      	nop
    f50e:	3708      	adds	r7, #8
    f510:	46bd      	mov	sp, r7
    f512:	bdb0      	pop	{r4, r5, r7, pc}
    f514:	2000dff8 	.word	0x2000dff8
    f518:	20002ab4 	.word	0x20002ab4
    f51c:	0000faf1 	.word	0x0000faf1
    f520:	20000000 	.word	0x20000000
    f524:	0000fb0d 	.word	0x0000fb0d
    f528:	0001a0b5 	.word	0x0001a0b5
    f52c:	20002acc 	.word	0x20002acc
    f530:	0000fcad 	.word	0x0000fcad
    f534:	0000f495 	.word	0x0000f495

0000f538 <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev>:
    f538:	b580      	push	{r7, lr}
    f53a:	af00      	add	r7, sp, #0
    f53c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f540:	2001      	movs	r0, #1
    f542:	4b01      	ldr	r3, [pc, #4]	; (f548 <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev+0x10>)
    f544:	4798      	blx	r3
    f546:	bd80      	pop	{r7, pc}
    f548:	0000f4c1 	.word	0x0000f4c1

0000f54c <_ZL20CANOpen_Sync_TimeoutPK10timer_task>:
static	uint8_t local_tx_data[8];
static bool syncCANOpenTimeoutStatic=false;
static uint16_t local_speed;

static void CANOpen_Sync_Timeout(const struct timer_task *const timer_task)
{
    f54c:	b480      	push	{r7}
    f54e:	b083      	sub	sp, #12
    f550:	af00      	add	r7, sp, #0
    f552:	6078      	str	r0, [r7, #4]
	syncCANOpenTimeoutStatic=true;
    f554:	4b04      	ldr	r3, [pc, #16]	; (f568 <_ZL20CANOpen_Sync_TimeoutPK10timer_task+0x1c>)
    f556:	2201      	movs	r2, #1
    f558:	701a      	strb	r2, [r3, #0]
	asm("nop" );
    f55a:	bf00      	nop
}
    f55c:	bf00      	nop
    f55e:	370c      	adds	r7, #12
    f560:	46bd      	mov	sp, r7
    f562:	bc80      	pop	{r7}
    f564:	4770      	bx	lr
    f566:	bf00      	nop
    f568:	20002d98 	.word	0x20002d98

0000f56c <_ZN28Compressor_CANOpen_InterfaceC1Ev>:

// default constructor
Compressor_CANOpen_Interface::Compressor_CANOpen_Interface()
    f56c:	b580      	push	{r7, lr}
    f56e:	b082      	sub	sp, #8
    f570:	af00      	add	r7, sp, #0
    f572:	6078      	str	r0, [r7, #4]
    f574:	687b      	ldr	r3, [r7, #4]
    f576:	4618      	mov	r0, r3
    f578:	4b08      	ldr	r3, [pc, #32]	; (f59c <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x30>)
    f57a:	4798      	blx	r3
    f57c:	4a08      	ldr	r2, [pc, #32]	; (f5a0 <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x34>)
    f57e:	687b      	ldr	r3, [r7, #4]
    f580:	601a      	str	r2, [r3, #0]
{
	syncCANOpenTimeout=&syncCANOpenTimeoutStatic;
    f582:	687b      	ldr	r3, [r7, #4]
    f584:	4a07      	ldr	r2, [pc, #28]	; (f5a4 <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x38>)
    f586:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	timeDifference_ms=CCU_PROCESS_TIME_DIFFERENCE;
    f58a:	687b      	ldr	r3, [r7, #4]
    f58c:	2201      	movs	r2, #1
    f58e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
} //Compressor_Can_Interface
    f592:	687b      	ldr	r3, [r7, #4]
    f594:	4618      	mov	r0, r3
    f596:	3708      	adds	r7, #8
    f598:	46bd      	mov	sp, r7
    f59a:	bd80      	pop	{r7, pc}
    f59c:	000148b5 	.word	0x000148b5
    f5a0:	0001afac 	.word	0x0001afac
    f5a4:	20002d98 	.word	0x20002d98

0000f5a8 <_ZN28Compressor_CANOpen_InterfaceD1Ev>:

// default destructor
Compressor_CANOpen_Interface::~Compressor_CANOpen_Interface()
    f5a8:	b580      	push	{r7, lr}
    f5aa:	b082      	sub	sp, #8
    f5ac:	af00      	add	r7, sp, #0
    f5ae:	6078      	str	r0, [r7, #4]
    f5b0:	4a05      	ldr	r2, [pc, #20]	; (f5c8 <_ZN28Compressor_CANOpen_InterfaceD1Ev+0x20>)
    f5b2:	687b      	ldr	r3, [r7, #4]
    f5b4:	601a      	str	r2, [r3, #0]
    f5b6:	687b      	ldr	r3, [r7, #4]
    f5b8:	4618      	mov	r0, r3
    f5ba:	4b04      	ldr	r3, [pc, #16]	; (f5cc <_ZN28Compressor_CANOpen_InterfaceD1Ev+0x24>)
    f5bc:	4798      	blx	r3
{
} //~Compressor_Can_Interface
    f5be:	687b      	ldr	r3, [r7, #4]
    f5c0:	4618      	mov	r0, r3
    f5c2:	3708      	adds	r7, #8
    f5c4:	46bd      	mov	sp, r7
    f5c6:	bd80      	pop	{r7, pc}
    f5c8:	0001afac 	.word	0x0001afac
    f5cc:	00014925 	.word	0x00014925

0000f5d0 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv>:

bool	Compressor_CANOpen_Interface::InitCANOpen(void){
    f5d0:	b580      	push	{r7, lr}
    f5d2:	b082      	sub	sp, #8
    f5d4:	af00      	add	r7, sp, #0
    f5d6:	6078      	str	r0, [r7, #4]
	tx_can_buffer=local_tx_data;
    f5d8:	687b      	ldr	r3, [r7, #4]
    f5da:	4a1e      	ldr	r2, [pc, #120]	; (f654 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x84>)
    f5dc:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	speed=&local_speed;
    f5e0:	687b      	ldr	r3, [r7, #4]
    f5e2:	4a1d      	ldr	r2, [pc, #116]	; (f658 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x88>)
    f5e4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	syncCANOpenTimeout=&syncCANOpenTimeoutStatic;
    f5e8:	687b      	ldr	r3, [r7, #4]
    f5ea:	4a1c      	ldr	r2, [pc, #112]	; (f65c <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x8c>)
    f5ec:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
	timeDifference_ms=CCU_PROCESS_TIME_DIFFERENCE;
    f5f0:	687b      	ldr	r3, [r7, #4]
    f5f2:	2201      	movs	r2, #1
    f5f4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	cano=&canoStatic;
    f5f8:	687b      	ldr	r3, [r7, #4]
    f5fa:	4a19      	ldr	r2, [pc, #100]	; (f660 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x90>)
    f5fc:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	int_result=cano->Init_CO_CLASS(NMT_MASTER_NODE);
    f600:	687b      	ldr	r3, [r7, #4]
    f602:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
    f606:	2101      	movs	r1, #1
    f608:	4618      	mov	r0, r3
    f60a:	4b16      	ldr	r3, [pc, #88]	; (f664 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x94>)
    f60c:	4798      	blx	r3
    f60e:	4602      	mov	r2, r0
    f610:	687b      	ldr	r3, [r7, #4]
    f612:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	if (int_result==0)
    f616:	687b      	ldr	r3, [r7, #4]
    f618:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    f61c:	2b00      	cmp	r3, #0
    f61e:	d10b      	bne.n	f638 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x68>
	{
	//	cano->SetInitialMode();
		boolResult=	cano->StartNMTService(CCU_CANOPEN_NODE);
    f620:	687b      	ldr	r3, [r7, #4]
    f622:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
    f626:	2102      	movs	r1, #2
    f628:	4618      	mov	r0, r3
    f62a:	4b0f      	ldr	r3, [pc, #60]	; (f668 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x98>)
    f62c:	4798      	blx	r3
    f62e:	4603      	mov	r3, r0
    f630:	461a      	mov	r2, r3
    f632:	687b      	ldr	r3, [r7, #4]
    f634:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
	else
	{
		
	}
	
	canoTimer.Start_oneShot_task(FUNC_PTR(CANOpen_Sync_Timeout),1000);
    f638:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f63c:	490b      	ldr	r1, [pc, #44]	; (f66c <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x9c>)
    f63e:	480c      	ldr	r0, [pc, #48]	; (f670 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0xa0>)
    f640:	4b0c      	ldr	r3, [pc, #48]	; (f674 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0xa4>)
    f642:	4798      	blx	r3
	
	return boolResult;
    f644:	687b      	ldr	r3, [r7, #4]
    f646:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
	
}
    f64a:	4618      	mov	r0, r3
    f64c:	3708      	adds	r7, #8
    f64e:	46bd      	mov	sp, r7
    f650:	bd80      	pop	{r7, pc}
    f652:	bf00      	nop
    f654:	20002d90 	.word	0x20002d90
    f658:	20002d9a 	.word	0x20002d9a
    f65c:	20002d98 	.word	0x20002d98
    f660:	20002c1c 	.word	0x20002c1c
    f664:	0001494d 	.word	0x0001494d
    f668:	00014a11 	.word	0x00014a11
    f66c:	0000f54d 	.word	0x0000f54d
    f670:	20002bfc 	.word	0x20002bfc
    f674:	0001047d 	.word	0x0001047d

0000f678 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv>:
	

		return (int)reset;
}

void Compressor_CANOpen_Interface::Periodic_Task(void){
    f678:	b580      	push	{r7, lr}
    f67a:	b082      	sub	sp, #8
    f67c:	af00      	add	r7, sp, #0
    f67e:	6078      	str	r0, [r7, #4]
	
	if (syncCANOpenTimeoutStatic)
    f680:	4b37      	ldr	r3, [pc, #220]	; (f760 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xe8>)
    f682:	781b      	ldrb	r3, [r3, #0]
    f684:	2b00      	cmp	r3, #0
    f686:	d066      	beq.n	f756 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xde>
	{
		//Comporesor_Process();
		if ( cano->ptrCO->CANmodule[0]->CANnormal)
    f688:	687b      	ldr	r3, [r7, #4]
    f68a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
    f68e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    f692:	681b      	ldr	r3, [r3, #0]
    f694:	7d1b      	ldrb	r3, [r3, #20]
    f696:	b2db      	uxtb	r3, r3
    f698:	2b00      	cmp	r3, #0
    f69a:	bf14      	ite	ne
    f69c:	2301      	movne	r3, #1
    f69e:	2300      	moveq	r3, #0
    f6a0:	b2db      	uxtb	r3, r3
    f6a2:	2b00      	cmp	r3, #0
    f6a4:	d04f      	beq.n	f746 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xce>
		{
				syncWas=cano->Send_SYNC_Signal();
    f6a6:	687b      	ldr	r3, [r7, #4]
    f6a8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
    f6ac:	330c      	adds	r3, #12
    f6ae:	4618      	mov	r0, r3
    f6b0:	4b2c      	ldr	r3, [pc, #176]	; (f764 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xec>)
    f6b2:	4798      	blx	r3
    f6b4:	4603      	mov	r3, r0
    f6b6:	461a      	mov	r2, r3
    f6b8:	687b      	ldr	r3, [r7, #4]
    f6ba:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
				if (syncWas==0)
    f6be:	687b      	ldr	r3, [r7, #4]
    f6c0:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
    f6c4:	2b00      	cmp	r3, #0
    f6c6:	d107      	bne.n	f6d8 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x60>
				{
					//cano->Pass_Temperature_To_voltage();
					memcpy((void*)&current_speed,(void*)CO_OD_RAM.voltage,2);
    f6c8:	687b      	ldr	r3, [r7, #4]
    f6ca:	f503 73cc 	add.w	r3, r3, #408	; 0x198
    f6ce:	4a26      	ldr	r2, [pc, #152]	; (f768 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf0>)
    f6d0:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
    f6d4:	801a      	strh	r2, [r3, #0]
    f6d6:	e006      	b.n	f6e6 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x6e>
				//	current_speed=(uint16_t)(CO_OD_RAM.voltage)
				} 
				else
				{
					memcpy((void*)&current_speed,(void*)CO_OD_RAM.voltage,2);
    f6d8:	687b      	ldr	r3, [r7, #4]
    f6da:	f503 73cc 	add.w	r3, r3, #408	; 0x198
    f6de:	4a22      	ldr	r2, [pc, #136]	; (f768 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf0>)
    f6e0:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
    f6e4:	801a      	strh	r2, [r3, #0]
				}
				is_enabled=ccu.IsEnabled();
    f6e6:	4821      	ldr	r0, [pc, #132]	; (f76c <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf4>)
    f6e8:	4b21      	ldr	r3, [pc, #132]	; (f770 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf8>)
    f6ea:	4798      	blx	r3
    f6ec:	4603      	mov	r3, r0
    f6ee:	461a      	mov	r2, r3
    f6f0:	687b      	ldr	r3, [r7, #4]
    f6f2:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
				if ((is_enabled))
    f6f6:	687b      	ldr	r3, [r7, #4]
    f6f8:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
    f6fc:	2b00      	cmp	r3, #0
    f6fe:	d00b      	beq.n	f718 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xa0>
				{
					Convert_Uint16_Array(*speed,tx_can_buffer);
    f700:	687b      	ldr	r3, [r7, #4]
    f702:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
    f706:	8819      	ldrh	r1, [r3, #0]
    f708:	687b      	ldr	r3, [r7, #4]
    f70a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
    f70e:	461a      	mov	r2, r3
    f710:	6878      	ldr	r0, [r7, #4]
    f712:	4b18      	ldr	r3, [pc, #96]	; (f774 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xfc>)
    f714:	4798      	blx	r3
    f716:	e00a      	b.n	f72e <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xb6>
					
				}else{
					
					Convert_Uint16_Array(*speed,tx_can_buffer);
    f718:	687b      	ldr	r3, [r7, #4]
    f71a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
    f71e:	8819      	ldrh	r1, [r3, #0]
    f720:	687b      	ldr	r3, [r7, #4]
    f722:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
    f726:	461a      	mov	r2, r3
    f728:	6878      	ldr	r0, [r7, #4]
    f72a:	4b12      	ldr	r3, [pc, #72]	; (f774 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xfc>)
    f72c:	4798      	blx	r3
				}
				cano->Send_Simple_Run_Command(tx_can_buffer,CCU_CANOPEN_NODE);
    f72e:	687b      	ldr	r3, [r7, #4]
    f730:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
    f734:	f103 0014 	add.w	r0, r3, #20
    f738:	687b      	ldr	r3, [r7, #4]
    f73a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
    f73e:	2202      	movs	r2, #2
    f740:	4619      	mov	r1, r3
    f742:	4b0d      	ldr	r3, [pc, #52]	; (f778 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x100>)
    f744:	4798      	blx	r3
			//	cano->CAN_Polling_Tx();
		} 
		else
		{
		}
			syncCANOpenTimeoutStatic=false;
    f746:	4b06      	ldr	r3, [pc, #24]	; (f760 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xe8>)
    f748:	2200      	movs	r2, #0
    f74a:	701a      	strb	r2, [r3, #0]
			canoTimer.Start_oneShot_task(FUNC_PTR(CANOpen_Sync_Timeout),100);
    f74c:	2264      	movs	r2, #100	; 0x64
    f74e:	490b      	ldr	r1, [pc, #44]	; (f77c <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x104>)
    f750:	480b      	ldr	r0, [pc, #44]	; (f780 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x108>)
    f752:	4b0c      	ldr	r3, [pc, #48]	; (f784 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x10c>)
    f754:	4798      	blx	r3
	} 
	else
	{
	}

}
    f756:	bf00      	nop
    f758:	3708      	adds	r7, #8
    f75a:	46bd      	mov	sp, r7
    f75c:	bd80      	pop	{r7, pc}
    f75e:	bf00      	nop
    f760:	20002d98 	.word	0x20002d98
    f764:	00017f95 	.word	0x00017f95
    f768:	20000220 	.word	0x20000220
    f76c:	20002a90 	.word	0x20002a90
    f770:	0000f3f1 	.word	0x0000f3f1
    f774:	0000f789 	.word	0x0000f789
    f778:	0001728d 	.word	0x0001728d
    f77c:	0000f54d 	.word	0x0000f54d
    f780:	20002bfc 	.word	0x20002bfc
    f784:	0001047d 	.word	0x0001047d

0000f788 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh>:

void	Compressor_CANOpen_Interface::Convert_Uint16_Array(uint16_t sp, uint8_t * arr){
    f788:	b480      	push	{r7}
    f78a:	b087      	sub	sp, #28
    f78c:	af00      	add	r7, sp, #0
    f78e:	60f8      	str	r0, [r7, #12]
    f790:	460b      	mov	r3, r1
    f792:	607a      	str	r2, [r7, #4]
    f794:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < 8; i++)
    f796:	2300      	movs	r3, #0
    f798:	75fb      	strb	r3, [r7, #23]
    f79a:	7dfb      	ldrb	r3, [r7, #23]
    f79c:	2b07      	cmp	r3, #7
    f79e:	dc18      	bgt.n	f7d2 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x4a>
	{
		if (i<2)
    f7a0:	7dfb      	ldrb	r3, [r7, #23]
    f7a2:	2b01      	cmp	r3, #1
    f7a4:	dc0d      	bgt.n	f7c2 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x3a>
		{
			local_tx_data[i]=(uint8_t)(((*speed)>>8*i)&0x00ff);
    f7a6:	7dfb      	ldrb	r3, [r7, #23]
    f7a8:	68fa      	ldr	r2, [r7, #12]
    f7aa:	f8d2 2190 	ldr.w	r2, [r2, #400]	; 0x190
    f7ae:	8812      	ldrh	r2, [r2, #0]
    f7b0:	4611      	mov	r1, r2
    f7b2:	7dfa      	ldrb	r2, [r7, #23]
    f7b4:	00d2      	lsls	r2, r2, #3
    f7b6:	fa41 f202 	asr.w	r2, r1, r2
    f7ba:	b2d1      	uxtb	r1, r2
    f7bc:	4a08      	ldr	r2, [pc, #32]	; (f7e0 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x58>)
    f7be:	54d1      	strb	r1, [r2, r3]
    f7c0:	e003      	b.n	f7ca <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x42>
		}else{
			local_tx_data[i]=0;
    f7c2:	7dfb      	ldrb	r3, [r7, #23]
    f7c4:	4a06      	ldr	r2, [pc, #24]	; (f7e0 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x58>)
    f7c6:	2100      	movs	r1, #0
    f7c8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8; i++)
    f7ca:	7dfb      	ldrb	r3, [r7, #23]
    f7cc:	3301      	adds	r3, #1
    f7ce:	75fb      	strb	r3, [r7, #23]
    f7d0:	e7e3      	b.n	f79a <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x12>
		}
		
	}
	arr=local_tx_data;
    f7d2:	4b03      	ldr	r3, [pc, #12]	; (f7e0 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x58>)
    f7d4:	607b      	str	r3, [r7, #4]
}
    f7d6:	bf00      	nop
    f7d8:	371c      	adds	r7, #28
    f7da:	46bd      	mov	sp, r7
    f7dc:	bc80      	pop	{r7}
    f7de:	4770      	bx	lr
    f7e0:	20002d90 	.word	0x20002d90

0000f7e4 <_ZN28Compressor_CANOpen_Interface14Set_CAN_EnableEPb>:

bool Compressor_CANOpen_Interface::Set_CAN_Enable(bool *st){
    f7e4:	b480      	push	{r7}
    f7e6:	b083      	sub	sp, #12
    f7e8:	af00      	add	r7, sp, #0
    f7ea:	6078      	str	r0, [r7, #4]
    f7ec:	6039      	str	r1, [r7, #0]
	enable=st;
    f7ee:	687b      	ldr	r3, [r7, #4]
    f7f0:	683a      	ldr	r2, [r7, #0]
    f7f2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	return  *enable;
    f7f6:	687b      	ldr	r3, [r7, #4]
    f7f8:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    f7fc:	781b      	ldrb	r3, [r3, #0]
}
    f7fe:	4618      	mov	r0, r3
    f800:	370c      	adds	r7, #12
    f802:	46bd      	mov	sp, r7
    f804:	bc80      	pop	{r7}
    f806:	4770      	bx	lr

0000f808 <_ZN28Compressor_CANOpen_Interface15Set_Motor_SpeedEt>:

void	Compressor_CANOpen_Interface::Set_Motor_Speed(uint16_t sp){
    f808:	b480      	push	{r7}
    f80a:	b083      	sub	sp, #12
    f80c:	af00      	add	r7, sp, #0
    f80e:	6078      	str	r0, [r7, #4]
    f810:	460b      	mov	r3, r1
    f812:	807b      	strh	r3, [r7, #2]
	*speed=sp;
    f814:	687b      	ldr	r3, [r7, #4]
    f816:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
    f81a:	887a      	ldrh	r2, [r7, #2]
    f81c:	801a      	strh	r2, [r3, #0]
}
    f81e:	bf00      	nop
    f820:	370c      	adds	r7, #12
    f822:	46bd      	mov	sp, r7
    f824:	bc80      	pop	{r7}
    f826:	4770      	bx	lr

0000f828 <_Z41__static_initialization_and_destruction_0ii>:
    f828:	b580      	push	{r7, lr}
    f82a:	b082      	sub	sp, #8
    f82c:	af00      	add	r7, sp, #0
    f82e:	6078      	str	r0, [r7, #4]
    f830:	6039      	str	r1, [r7, #0]
    f832:	687b      	ldr	r3, [r7, #4]
    f834:	2b01      	cmp	r3, #1
    f836:	d15e      	bne.n	f8f6 <_Z41__static_initialization_and_destruction_0ii+0xce>
    f838:	683b      	ldr	r3, [r7, #0]
    f83a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f83e:	4293      	cmp	r3, r2
    f840:	d159      	bne.n	f8f6 <_Z41__static_initialization_and_destruction_0ii+0xce>
    f842:	492f      	ldr	r1, [pc, #188]	; (f900 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f844:	482f      	ldr	r0, [pc, #188]	; (f904 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f846:	4b30      	ldr	r3, [pc, #192]	; (f908 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f848:	4798      	blx	r3
    f84a:	4a30      	ldr	r2, [pc, #192]	; (f90c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f84c:	4930      	ldr	r1, [pc, #192]	; (f910 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f84e:	482d      	ldr	r0, [pc, #180]	; (f904 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f850:	4b30      	ldr	r3, [pc, #192]	; (f914 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f852:	4798      	blx	r3
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f854:	4930      	ldr	r1, [pc, #192]	; (f918 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f856:	4831      	ldr	r0, [pc, #196]	; (f91c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f858:	4b31      	ldr	r3, [pc, #196]	; (f920 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f85a:	4798      	blx	r3
    f85c:	4a2b      	ldr	r2, [pc, #172]	; (f90c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f85e:	4931      	ldr	r1, [pc, #196]	; (f924 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f860:	482e      	ldr	r0, [pc, #184]	; (f91c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f862:	4b2c      	ldr	r3, [pc, #176]	; (f914 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f864:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f866:	4930      	ldr	r1, [pc, #192]	; (f928 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f868:	4830      	ldr	r0, [pc, #192]	; (f92c <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f86a:	4b2d      	ldr	r3, [pc, #180]	; (f920 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f86c:	4798      	blx	r3
    f86e:	4a27      	ldr	r2, [pc, #156]	; (f90c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f870:	492c      	ldr	r1, [pc, #176]	; (f924 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f872:	482e      	ldr	r0, [pc, #184]	; (f92c <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f874:	4b27      	ldr	r3, [pc, #156]	; (f914 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f876:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f878:	492d      	ldr	r1, [pc, #180]	; (f930 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f87a:	482e      	ldr	r0, [pc, #184]	; (f934 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f87c:	4b28      	ldr	r3, [pc, #160]	; (f920 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f87e:	4798      	blx	r3
    f880:	4a22      	ldr	r2, [pc, #136]	; (f90c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f882:	4928      	ldr	r1, [pc, #160]	; (f924 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f884:	482b      	ldr	r0, [pc, #172]	; (f934 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f886:	4b23      	ldr	r3, [pc, #140]	; (f914 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f888:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f88a:	492b      	ldr	r1, [pc, #172]	; (f938 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f88c:	482b      	ldr	r0, [pc, #172]	; (f93c <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f88e:	4b24      	ldr	r3, [pc, #144]	; (f920 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f890:	4798      	blx	r3
    f892:	4a1e      	ldr	r2, [pc, #120]	; (f90c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f894:	4923      	ldr	r1, [pc, #140]	; (f924 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f896:	4829      	ldr	r0, [pc, #164]	; (f93c <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f898:	4b1e      	ldr	r3, [pc, #120]	; (f914 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f89a:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f89c:	4928      	ldr	r1, [pc, #160]	; (f940 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f89e:	4829      	ldr	r0, [pc, #164]	; (f944 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    f8a0:	4b1f      	ldr	r3, [pc, #124]	; (f920 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f8a2:	4798      	blx	r3
    f8a4:	4a19      	ldr	r2, [pc, #100]	; (f90c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f8a6:	491f      	ldr	r1, [pc, #124]	; (f924 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f8a8:	4826      	ldr	r0, [pc, #152]	; (f944 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    f8aa:	4b1a      	ldr	r3, [pc, #104]	; (f914 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f8ac:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f8ae:	4926      	ldr	r1, [pc, #152]	; (f948 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    f8b0:	4826      	ldr	r0, [pc, #152]	; (f94c <_Z41__static_initialization_and_destruction_0ii+0x124>)
    f8b2:	4b1b      	ldr	r3, [pc, #108]	; (f920 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f8b4:	4798      	blx	r3
    f8b6:	4a15      	ldr	r2, [pc, #84]	; (f90c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f8b8:	491a      	ldr	r1, [pc, #104]	; (f924 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f8ba:	4824      	ldr	r0, [pc, #144]	; (f94c <_Z41__static_initialization_and_destruction_0ii+0x124>)
    f8bc:	4b15      	ldr	r3, [pc, #84]	; (f914 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f8be:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f8c0:	4923      	ldr	r1, [pc, #140]	; (f950 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    f8c2:	4824      	ldr	r0, [pc, #144]	; (f954 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    f8c4:	4b16      	ldr	r3, [pc, #88]	; (f920 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f8c6:	4798      	blx	r3
    f8c8:	4a10      	ldr	r2, [pc, #64]	; (f90c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f8ca:	4916      	ldr	r1, [pc, #88]	; (f924 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f8cc:	4821      	ldr	r0, [pc, #132]	; (f954 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    f8ce:	4b11      	ldr	r3, [pc, #68]	; (f914 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f8d0:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    f8d2:	4921      	ldr	r1, [pc, #132]	; (f958 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    f8d4:	4821      	ldr	r0, [pc, #132]	; (f95c <_Z41__static_initialization_and_destruction_0ii+0x134>)
    f8d6:	4b12      	ldr	r3, [pc, #72]	; (f920 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f8d8:	4798      	blx	r3
    f8da:	4a0c      	ldr	r2, [pc, #48]	; (f90c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f8dc:	4911      	ldr	r1, [pc, #68]	; (f924 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f8de:	481f      	ldr	r0, [pc, #124]	; (f95c <_Z41__static_initialization_and_destruction_0ii+0x134>)
    f8e0:	4b0c      	ldr	r3, [pc, #48]	; (f914 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f8e2:	4798      	blx	r3
static	CANOpen_Class canoStatic(&CAN_CCU);
    f8e4:	491e      	ldr	r1, [pc, #120]	; (f960 <_Z41__static_initialization_and_destruction_0ii+0x138>)
    f8e6:	481f      	ldr	r0, [pc, #124]	; (f964 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
    f8e8:	4b1f      	ldr	r3, [pc, #124]	; (f968 <_Z41__static_initialization_and_destruction_0ii+0x140>)
    f8ea:	4798      	blx	r3
    f8ec:	4a07      	ldr	r2, [pc, #28]	; (f90c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f8ee:	491f      	ldr	r1, [pc, #124]	; (f96c <_Z41__static_initialization_and_destruction_0ii+0x144>)
    f8f0:	481c      	ldr	r0, [pc, #112]	; (f964 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
    f8f2:	4b08      	ldr	r3, [pc, #32]	; (f914 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f8f4:	4798      	blx	r3
}
    f8f6:	bf00      	nop
    f8f8:	3708      	adds	r7, #8
    f8fa:	46bd      	mov	sp, r7
    f8fc:	bd80      	pop	{r7, pc}
    f8fe:	bf00      	nop
    f900:	2000dff8 	.word	0x2000dff8
    f904:	20002b04 	.word	0x20002b04
    f908:	0000faf1 	.word	0x0000faf1
    f90c:	20000000 	.word	0x20000000
    f910:	0000fb0d 	.word	0x0000fb0d
    f914:	0001a0b5 	.word	0x0001a0b5
    f918:	2000dec8 	.word	0x2000dec8
    f91c:	20002b1c 	.word	0x20002b1c
    f920:	000101a9 	.word	0x000101a9
    f924:	000101e1 	.word	0x000101e1
    f928:	2000df5c 	.word	0x2000df5c
    f92c:	20002b3c 	.word	0x20002b3c
    f930:	2000e080 	.word	0x2000e080
    f934:	20002b5c 	.word	0x20002b5c
    f938:	2000df7c 	.word	0x2000df7c
    f93c:	20002b7c 	.word	0x20002b7c
    f940:	2000e040 	.word	0x2000e040
    f944:	20002b9c 	.word	0x20002b9c
    f948:	2000e060 	.word	0x2000e060
    f94c:	20002bbc 	.word	0x20002bbc
    f950:	2000df38 	.word	0x2000df38
    f954:	20002bdc 	.word	0x20002bdc
    f958:	2000dfd8 	.word	0x2000dfd8
    f95c:	20002bfc 	.word	0x20002bfc
    f960:	2000e018 	.word	0x2000e018
    f964:	20002c1c 	.word	0x20002c1c
    f968:	000148e9 	.word	0x000148e9
    f96c:	00014925 	.word	0x00014925

0000f970 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev>:
    f970:	b580      	push	{r7, lr}
    f972:	af00      	add	r7, sp, #0
    f974:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f978:	2001      	movs	r0, #1
    f97a:	4b01      	ldr	r3, [pc, #4]	; (f980 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0x10>)
    f97c:	4798      	blx	r3
    f97e:	bd80      	pop	{r7, pc}
    f980:	0000f829 	.word	0x0000f829

0000f984 <_ZN15HEATERS_HANDLERD1Ev>:
HEATERS_HANDLER::HEATERS_HANDLER()
{
} //HEATERS_HANDLER

// default destructor
HEATERS_HANDLER::~HEATERS_HANDLER()
    f984:	b510      	push	{r4, lr}
    f986:	4604      	mov	r4, r0
    f988:	4b01      	ldr	r3, [pc, #4]	; (f990 <_ZN15HEATERS_HANDLERD1Ev+0xc>)
    f98a:	4798      	blx	r3
{
} //~HEATERS_HANDLER
    f98c:	4620      	mov	r0, r4
    f98e:	bd10      	pop	{r4, pc}
    f990:	00013c85 	.word	0x00013c85

0000f994 <__tcf_1>:
static	MCP23008_Class local_heater_expanders[NUMBER_OF_HEATERS*SINGLE_HEATER_EXPANDERS];
    f994:	b570      	push	{r4, r5, r6, lr}
    f996:	4c05      	ldr	r4, [pc, #20]	; (f9ac <__tcf_1+0x18>)
    f998:	4e05      	ldr	r6, [pc, #20]	; (f9b0 <__tcf_1+0x1c>)
    f99a:	f1a4 0570 	sub.w	r5, r4, #112	; 0x70
    f99e:	3c1c      	subs	r4, #28
    f9a0:	4620      	mov	r0, r4
    f9a2:	47b0      	blx	r6
    f9a4:	42ac      	cmp	r4, r5
    f9a6:	d1fa      	bne.n	f99e <__tcf_1+0xa>
    f9a8:	bd70      	pop	{r4, r5, r6, pc}
    f9aa:	bf00      	nop
    f9ac:	20002e0c 	.word	0x20002e0c
    f9b0:	0000fcc1 	.word	0x0000fcc1

0000f9b4 <__tcf_0>:
static SingleHeater_Class	local_heaters[NUMBER_OF_HEATERS];
    f9b4:	b510      	push	{r4, lr}
    f9b6:	4803      	ldr	r0, [pc, #12]	; (f9c4 <__tcf_0+0x10>)
    f9b8:	4c03      	ldr	r4, [pc, #12]	; (f9c8 <__tcf_0+0x14>)
    f9ba:	47a0      	blx	r4
    f9bc:	4803      	ldr	r0, [pc, #12]	; (f9cc <__tcf_0+0x18>)
    f9be:	47a0      	blx	r4
    f9c0:	bd10      	pop	{r4, pc}
    f9c2:	bf00      	nop
    f9c4:	20002e30 	.word	0x20002e30
    f9c8:	00013c85 	.word	0x00013c85
    f9cc:	20002e0c 	.word	0x20002e0c

0000f9d0 <_ZN15HEATERS_HANDLER4InitEv>:

bool HEATERS_HANDLER::Init(void){
    f9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f9d2:	4604      	mov	r4, r0

	//InitHeaterExpanders();

	heater_expanders=local_heater_expanders;
    f9d4:	4b16      	ldr	r3, [pc, #88]	; (fa30 <_ZN15HEATERS_HANDLER4InitEv+0x60>)
    f9d6:	6303      	str	r3, [r0, #48]	; 0x30
	for (uint8_t i = 0; i < NUMBER_OF_HEATERS; i++)
	{
		module[i]=&local_heaters[i];
    f9d8:	3370      	adds	r3, #112	; 0x70
    f9da:	6243      	str	r3, [r0, #36]	; 0x24
		while (!module[i]->Init(i,heater_expanders))
    f9dc:	4d15      	ldr	r5, [pc, #84]	; (fa34 <_ZN15HEATERS_HANDLER4InitEv+0x64>)
		{
			delay_ms(200);
    f9de:	4f16      	ldr	r7, [pc, #88]	; (fa38 <_ZN15HEATERS_HANDLER4InitEv+0x68>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    f9e0:	4e16      	ldr	r6, [pc, #88]	; (fa3c <_ZN15HEATERS_HANDLER4InitEv+0x6c>)
		while (!module[i]->Init(i,heater_expanders))
    f9e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    f9e4:	2100      	movs	r1, #0
    f9e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    f9e8:	47a8      	blx	r5
    f9ea:	b930      	cbnz	r0, f9fa <_ZN15HEATERS_HANDLER4InitEv+0x2a>
			delay_ms(200);
    f9ec:	20c8      	movs	r0, #200	; 0xc8
    f9ee:	47b8      	blx	r7
    f9f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    f9f4:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
    f9f8:	e7f3      	b.n	f9e2 <_ZN15HEATERS_HANDLER4InitEv+0x12>
		module[i]=&local_heaters[i];
    f9fa:	4b11      	ldr	r3, [pc, #68]	; (fa40 <_ZN15HEATERS_HANDLER4InitEv+0x70>)
    f9fc:	62a3      	str	r3, [r4, #40]	; 0x28
		while (!module[i]->Init(i,heater_expanders))
    f9fe:	4d0d      	ldr	r5, [pc, #52]	; (fa34 <_ZN15HEATERS_HANDLER4InitEv+0x64>)
			delay_ms(200);
    fa00:	4f0d      	ldr	r7, [pc, #52]	; (fa38 <_ZN15HEATERS_HANDLER4InitEv+0x68>)
    fa02:	4e0e      	ldr	r6, [pc, #56]	; (fa3c <_ZN15HEATERS_HANDLER4InitEv+0x6c>)
		while (!module[i]->Init(i,heater_expanders))
    fa04:	6b22      	ldr	r2, [r4, #48]	; 0x30
    fa06:	2101      	movs	r1, #1
    fa08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fa0a:	47a8      	blx	r5
    fa0c:	b930      	cbnz	r0, fa1c <_ZN15HEATERS_HANDLER4InitEv+0x4c>
			delay_ms(200);
    fa0e:	20c8      	movs	r0, #200	; 0xc8
    fa10:	47b8      	blx	r7
    fa12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    fa16:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
    fa1a:	e7f3      	b.n	fa04 <_ZN15HEATERS_HANDLER4InitEv+0x34>
			
		}
	}

	
	isOK=(module[0]->isOK)&(module[1]->isOK);
    fa1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa1e:	781a      	ldrb	r2, [r3, #0]
    fa20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fa22:	781b      	ldrb	r3, [r3, #0]
    fa24:	4013      	ands	r3, r2
    fa26:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	return	isOK;
    fa2a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
	
}
    fa2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa30:	20002d9c 	.word	0x20002d9c
    fa34:	00013c99 	.word	0x00013c99
    fa38:	00003625 	.word	0x00003625
    fa3c:	41008000 	.word	0x41008000
    fa40:	20002e30 	.word	0x20002e30

0000fa44 <_ZN15HEATERS_HANDLER12ReadAllGPIOsEPh>:
			heater_expanders=&local_heater_expanders[2*i+j];
		}
	}
}

void	HEATERS_HANDLER::ReadAllGPIOs(uint8_t *buffer){
    fa44:	b570      	push	{r4, r5, r6, lr}
    fa46:	4605      	mov	r5, r0
    fa48:	460e      	mov	r6, r1
	for (uint8_t i = 0; i < 2; i++)
	{
	//	heater_data_array[i]=local_heater_expanders[i].ReadGPIORegister();
		module[i]->ReadGPIOs(&buffer[i*2]);
    fa4a:	6a40      	ldr	r0, [r0, #36]	; 0x24
    fa4c:	4c02      	ldr	r4, [pc, #8]	; (fa58 <_ZN15HEATERS_HANDLER12ReadAllGPIOsEPh+0x14>)
    fa4e:	47a0      	blx	r4
    fa50:	1cb1      	adds	r1, r6, #2
    fa52:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    fa54:	47a0      	blx	r4
    fa56:	bd70      	pop	{r4, r5, r6, pc}
    fa58:	00013e25 	.word	0x00013e25

0000fa5c <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev>:
		//heater_data_array=buffer;
	}
	
}
    fa5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    fa5e:	4c18      	ldr	r4, [pc, #96]	; (fac0 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x64>)
    fa60:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
    fa64:	4917      	ldr	r1, [pc, #92]	; (fac4 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x68>)
    fa66:	4628      	mov	r0, r5
    fa68:	4b17      	ldr	r3, [pc, #92]	; (fac8 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x6c>)
    fa6a:	4798      	blx	r3
    fa6c:	4e17      	ldr	r6, [pc, #92]	; (facc <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x70>)
    fa6e:	4632      	mov	r2, r6
    fa70:	4917      	ldr	r1, [pc, #92]	; (fad0 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x74>)
    fa72:	4628      	mov	r0, r5
    fa74:	4d17      	ldr	r5, [pc, #92]	; (fad4 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x78>)
    fa76:	47a8      	blx	r5
static SingleHeater_Class	local_heaters[NUMBER_OF_HEATERS];
    fa78:	f104 0070 	add.w	r0, r4, #112	; 0x70
    fa7c:	4f16      	ldr	r7, [pc, #88]	; (fad8 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x7c>)
    fa7e:	47b8      	blx	r7
    fa80:	f104 0094 	add.w	r0, r4, #148	; 0x94
    fa84:	47b8      	blx	r7
    fa86:	4632      	mov	r2, r6
    fa88:	4914      	ldr	r1, [pc, #80]	; (fadc <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x80>)
    fa8a:	2000      	movs	r0, #0
    fa8c:	47a8      	blx	r5
static	MCP23008_Class local_heater_expanders[NUMBER_OF_HEATERS*SINGLE_HEATER_EXPANDERS];
    fa8e:	4620      	mov	r0, r4
    fa90:	4f13      	ldr	r7, [pc, #76]	; (fae0 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x84>)
    fa92:	47b8      	blx	r7
    fa94:	f104 001c 	add.w	r0, r4, #28
    fa98:	47b8      	blx	r7
    fa9a:	f104 0038 	add.w	r0, r4, #56	; 0x38
    fa9e:	47b8      	blx	r7
    faa0:	f104 0054 	add.w	r0, r4, #84	; 0x54
    faa4:	47b8      	blx	r7
    faa6:	4632      	mov	r2, r6
    faa8:	490e      	ldr	r1, [pc, #56]	; (fae4 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x88>)
    faaa:	2000      	movs	r0, #0
    faac:	47a8      	blx	r5
HEATERS_HANDLER::HEATERS_HANDLER()
    faae:	34d0      	adds	r4, #208	; 0xd0
    fab0:	4620      	mov	r0, r4
    fab2:	4b0d      	ldr	r3, [pc, #52]	; (fae8 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x8c>)
    fab4:	4798      	blx	r3
    fab6:	4632      	mov	r2, r6
    fab8:	490c      	ldr	r1, [pc, #48]	; (faec <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x90>)
    faba:	4620      	mov	r0, r4
    fabc:	47a8      	blx	r5
    fabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fac0:	20002d9c 	.word	0x20002d9c
    fac4:	2000dff8 	.word	0x2000dff8
    fac8:	0000faf1 	.word	0x0000faf1
    facc:	20000000 	.word	0x20000000
    fad0:	0000fb0d 	.word	0x0000fb0d
    fad4:	0001a0b5 	.word	0x0001a0b5
    fad8:	00013c55 	.word	0x00013c55
    fadc:	0000f9b5 	.word	0x0000f9b5
    fae0:	0000fcad 	.word	0x0000fcad
    fae4:	0000f995 	.word	0x0000f995
    fae8:	00013c55 	.word	0x00013c55
    faec:	0000f985 	.word	0x0000f985

0000faf0 <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    faf0:	b480      	push	{r7}
    faf2:	b083      	sub	sp, #12
    faf4:	af00      	add	r7, sp, #0
    faf6:	6078      	str	r0, [r7, #4]
    faf8:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    fafa:	687b      	ldr	r3, [r7, #4]
    fafc:	683a      	ldr	r2, [r7, #0]
    fafe:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    fb00:	687b      	ldr	r3, [r7, #4]
    fb02:	4618      	mov	r0, r3
    fb04:	370c      	adds	r7, #12
    fb06:	46bd      	mov	sp, r7
    fb08:	bc80      	pop	{r7}
    fb0a:	4770      	bx	lr

0000fb0c <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    fb0c:	b480      	push	{r7}
    fb0e:	b083      	sub	sp, #12
    fb10:	af00      	add	r7, sp, #0
    fb12:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    fb14:	687b      	ldr	r3, [r7, #4]
    fb16:	4618      	mov	r0, r3
    fb18:	370c      	adds	r7, #12
    fb1a:	46bd      	mov	sp, r7
    fb1c:	bc80      	pop	{r7}
    fb1e:	4770      	bx	lr

0000fb20 <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    fb20:	b580      	push	{r7, lr}
    fb22:	b082      	sub	sp, #8
    fb24:	af00      	add	r7, sp, #0
    fb26:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    fb28:	687b      	ldr	r3, [r7, #4]
    fb2a:	4a23      	ldr	r2, [pc, #140]	; (fbb8 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    fb2c:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    fb2e:	687b      	ldr	r3, [r7, #4]
    fb30:	4a21      	ldr	r2, [pc, #132]	; (fbb8 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    fb32:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    fb34:	687b      	ldr	r3, [r7, #4]
    fb36:	691a      	ldr	r2, [r3, #16]
    fb38:	687b      	ldr	r3, [r7, #4]
    fb3a:	330c      	adds	r3, #12
    fb3c:	4619      	mov	r1, r3
    fb3e:	4610      	mov	r0, r2
    fb40:	4b1e      	ldr	r3, [pc, #120]	; (fbbc <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    fb42:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    fb44:	687b      	ldr	r3, [r7, #4]
    fb46:	691b      	ldr	r3, [r3, #16]
    fb48:	4618      	mov	r0, r3
    fb4a:	4b1d      	ldr	r3, [pc, #116]	; (fbc0 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    fb4c:	4798      	blx	r3
    fb4e:	4603      	mov	r3, r0
    fb50:	b2da      	uxtb	r2, r3
    fb52:	687b      	ldr	r3, [r7, #4]
    fb54:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    fb56:	687b      	ldr	r3, [r7, #4]
    fb58:	7d1b      	ldrb	r3, [r3, #20]
    fb5a:	2b00      	cmp	r3, #0
    fb5c:	bf0c      	ite	eq
    fb5e:	2301      	moveq	r3, #1
    fb60:	2300      	movne	r3, #0
    fb62:	b2da      	uxtb	r2, r3
    fb64:	687b      	ldr	r3, [r7, #4]
    fb66:	725a      	strb	r2, [r3, #9]
	if (isOK)
    fb68:	687b      	ldr	r3, [r7, #4]
    fb6a:	7a5b      	ldrb	r3, [r3, #9]
    fb6c:	b2db      	uxtb	r3, r3
    fb6e:	2b00      	cmp	r3, #0
    fb70:	d116      	bne.n	fba0 <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    fb72:	687b      	ldr	r3, [r7, #4]
    fb74:	691b      	ldr	r3, [r3, #16]
    fb76:	4618      	mov	r0, r3
    fb78:	4b12      	ldr	r3, [pc, #72]	; (fbc4 <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    fb7a:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    fb7c:	687b      	ldr	r3, [r7, #4]
    fb7e:	691b      	ldr	r3, [r3, #16]
    fb80:	4618      	mov	r0, r3
    fb82:	4b0f      	ldr	r3, [pc, #60]	; (fbc0 <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    fb84:	4798      	blx	r3
    fb86:	4603      	mov	r3, r0
    fb88:	b2da      	uxtb	r2, r3
    fb8a:	687b      	ldr	r3, [r7, #4]
    fb8c:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    fb8e:	687b      	ldr	r3, [r7, #4]
    fb90:	7d1b      	ldrb	r3, [r3, #20]
    fb92:	2b00      	cmp	r3, #0
    fb94:	bf0c      	ite	eq
    fb96:	2301      	moveq	r3, #1
    fb98:	2300      	movne	r3, #0
    fb9a:	b2da      	uxtb	r2, r3
    fb9c:	687b      	ldr	r3, [r7, #4]
    fb9e:	725a      	strb	r2, [r3, #9]
	}
	
	initiated=isOK;
    fba0:	687b      	ldr	r3, [r7, #4]
    fba2:	7a5b      	ldrb	r3, [r3, #9]
    fba4:	b2da      	uxtb	r2, r3
    fba6:	687b      	ldr	r3, [r7, #4]
    fba8:	721a      	strb	r2, [r3, #8]
	return isOK;
    fbaa:	687b      	ldr	r3, [r7, #4]
    fbac:	7a5b      	ldrb	r3, [r3, #9]
    fbae:	b2db      	uxtb	r3, r3
	
}
    fbb0:	4618      	mov	r0, r3
    fbb2:	3708      	adds	r7, #8
    fbb4:	46bd      	mov	sp, r7
    fbb6:	bd80      	pop	{r7, pc}
    fbb8:	20002ebc 	.word	0x20002ebc
    fbbc:	00003a0f 	.word	0x00003a0f
    fbc0:	00003995 	.word	0x00003995
    fbc4:	000039b5 	.word	0x000039b5

0000fbc8 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    fbc8:	b580      	push	{r7, lr}
    fbca:	b082      	sub	sp, #8
    fbcc:	af00      	add	r7, sp, #0
    fbce:	6078      	str	r0, [r7, #4]
    fbd0:	460b      	mov	r3, r1
    fbd2:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    fbd4:	687b      	ldr	r3, [r7, #4]
    fbd6:	691b      	ldr	r3, [r3, #16]
    fbd8:	78fa      	ldrb	r2, [r7, #3]
    fbda:	b211      	sxth	r1, r2
    fbdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    fbe0:	4618      	mov	r0, r3
    fbe2:	4b03      	ldr	r3, [pc, #12]	; (fbf0 <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    fbe4:	4798      	blx	r3
    fbe6:	4603      	mov	r3, r0
}
    fbe8:	4618      	mov	r0, r3
    fbea:	3708      	adds	r7, #8
    fbec:	46bd      	mov	sp, r7
    fbee:	bd80      	pop	{r7, pc}
    fbf0:	000039d5 	.word	0x000039d5

0000fbf4 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    fbf4:	b580      	push	{r7, lr}
    fbf6:	b086      	sub	sp, #24
    fbf8:	af00      	add	r7, sp, #0
    fbfa:	60f8      	str	r0, [r7, #12]
    fbfc:	60b9      	str	r1, [r7, #8]
    fbfe:	4613      	mov	r3, r2
    fc00:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    fc02:	68fb      	ldr	r3, [r7, #12]
    fc04:	68db      	ldr	r3, [r3, #12]
    fc06:	88fa      	ldrh	r2, [r7, #6]
    fc08:	68b9      	ldr	r1, [r7, #8]
    fc0a:	4618      	mov	r0, r3
    fc0c:	4b03      	ldr	r3, [pc, #12]	; (fc1c <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    fc0e:	4798      	blx	r3
    fc10:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    fc12:	697b      	ldr	r3, [r7, #20]
}
    fc14:	4618      	mov	r0, r3
    fc16:	3718      	adds	r7, #24
    fc18:	46bd      	mov	sp, r7
    fc1a:	bd80      	pop	{r7, pc}
    fc1c:	00017fe9 	.word	0x00017fe9

0000fc20 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    fc20:	b580      	push	{r7, lr}
    fc22:	b086      	sub	sp, #24
    fc24:	af00      	add	r7, sp, #0
    fc26:	60f8      	str	r0, [r7, #12]
    fc28:	60b9      	str	r1, [r7, #8]
    fc2a:	4613      	mov	r3, r2
    fc2c:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    fc2e:	68fb      	ldr	r3, [r7, #12]
    fc30:	68db      	ldr	r3, [r3, #12]
    fc32:	88fa      	ldrh	r2, [r7, #6]
    fc34:	68b9      	ldr	r1, [r7, #8]
    fc36:	4618      	mov	r0, r3
    fc38:	4b03      	ldr	r3, [pc, #12]	; (fc48 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    fc3a:	4798      	blx	r3
    fc3c:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    fc3e:	697b      	ldr	r3, [r7, #20]
}
    fc40:	4618      	mov	r0, r3
    fc42:	3718      	adds	r7, #24
    fc44:	46bd      	mov	sp, r7
    fc46:	bd80      	pop	{r7, pc}
    fc48:	00018039 	.word	0x00018039

0000fc4c <_Z41__static_initialization_and_destruction_0ii>:
	__enable_irq();
}
void	I2C_Sync_Class::Irq_Disable(void){
	__DMB();
	__disable_irq();
}
    fc4c:	b580      	push	{r7, lr}
    fc4e:	b082      	sub	sp, #8
    fc50:	af00      	add	r7, sp, #0
    fc52:	6078      	str	r0, [r7, #4]
    fc54:	6039      	str	r1, [r7, #0]
    fc56:	687b      	ldr	r3, [r7, #4]
    fc58:	2b01      	cmp	r3, #1
    fc5a:	d10d      	bne.n	fc78 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    fc5c:	683b      	ldr	r3, [r7, #0]
    fc5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fc62:	4293      	cmp	r3, r2
    fc64:	d108      	bne.n	fc78 <_Z41__static_initialization_and_destruction_0ii+0x2c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    fc66:	4906      	ldr	r1, [pc, #24]	; (fc80 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    fc68:	4806      	ldr	r0, [pc, #24]	; (fc84 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    fc6a:	4b07      	ldr	r3, [pc, #28]	; (fc88 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    fc6c:	4798      	blx	r3
    fc6e:	4a07      	ldr	r2, [pc, #28]	; (fc8c <_Z41__static_initialization_and_destruction_0ii+0x40>)
    fc70:	4907      	ldr	r1, [pc, #28]	; (fc90 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    fc72:	4804      	ldr	r0, [pc, #16]	; (fc84 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    fc74:	4b07      	ldr	r3, [pc, #28]	; (fc94 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    fc76:	4798      	blx	r3
    fc78:	bf00      	nop
    fc7a:	3708      	adds	r7, #8
    fc7c:	46bd      	mov	sp, r7
    fc7e:	bd80      	pop	{r7, pc}
    fc80:	2000dff8 	.word	0x2000dff8
    fc84:	20002ea4 	.word	0x20002ea4
    fc88:	0000faf1 	.word	0x0000faf1
    fc8c:	20000000 	.word	0x20000000
    fc90:	0000fb0d 	.word	0x0000fb0d
    fc94:	0001a0b5 	.word	0x0001a0b5

0000fc98 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev>:
    fc98:	b580      	push	{r7, lr}
    fc9a:	af00      	add	r7, sp, #0
    fc9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fca0:	2001      	movs	r0, #1
    fca2:	4b01      	ldr	r3, [pc, #4]	; (fca8 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev+0x10>)
    fca4:	4798      	blx	r3
    fca6:	bd80      	pop	{r7, pc}
    fca8:	0000fc4d 	.word	0x0000fc4d

0000fcac <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    fcac:	b480      	push	{r7}
    fcae:	b083      	sub	sp, #12
    fcb0:	af00      	add	r7, sp, #0
    fcb2:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    fcb4:	687b      	ldr	r3, [r7, #4]
    fcb6:	4618      	mov	r0, r3
    fcb8:	370c      	adds	r7, #12
    fcba:	46bd      	mov	sp, r7
    fcbc:	bc80      	pop	{r7}
    fcbe:	4770      	bx	lr

0000fcc0 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    fcc0:	b480      	push	{r7}
    fcc2:	b083      	sub	sp, #12
    fcc4:	af00      	add	r7, sp, #0
    fcc6:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    fcc8:	687b      	ldr	r3, [r7, #4]
    fcca:	4618      	mov	r0, r3
    fccc:	370c      	adds	r7, #12
    fcce:	46bd      	mov	sp, r7
    fcd0:	bc80      	pop	{r7}
    fcd2:	4770      	bx	lr

0000fcd4 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    fcd4:	b480      	push	{r7}
    fcd6:	b085      	sub	sp, #20
    fcd8:	af00      	add	r7, sp, #0
    fcda:	60f8      	str	r0, [r7, #12]
    fcdc:	460b      	mov	r3, r1
    fcde:	607a      	str	r2, [r7, #4]
    fce0:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    fce2:	687b      	ldr	r3, [r7, #4]
    fce4:	681a      	ldr	r2, [r3, #0]
    fce6:	68fb      	ldr	r3, [r7, #12]
    fce8:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    fcea:	687b      	ldr	r3, [r7, #4]
    fcec:	685a      	ldr	r2, [r3, #4]
    fcee:	68fb      	ldr	r3, [r7, #12]
    fcf0:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    fcf2:	68fb      	ldr	r3, [r7, #12]
    fcf4:	7afa      	ldrb	r2, [r7, #11]
    fcf6:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    fcf8:	68fb      	ldr	r3, [r7, #12]
    fcfa:	687a      	ldr	r2, [r7, #4]
    fcfc:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    fcfe:	68fb      	ldr	r3, [r7, #12]
    fd00:	68db      	ldr	r3, [r3, #12]
    fd02:	7a5b      	ldrb	r3, [r3, #9]
    fd04:	b2da      	uxtb	r2, r3
    fd06:	68fb      	ldr	r3, [r7, #12]
    fd08:	719a      	strb	r2, [r3, #6]
	return isOK;
    fd0a:	68fb      	ldr	r3, [r7, #12]
    fd0c:	799b      	ldrb	r3, [r3, #6]
    fd0e:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    fd10:	4618      	mov	r0, r3
    fd12:	3714      	adds	r7, #20
    fd14:	46bd      	mov	sp, r7
    fd16:	bc80      	pop	{r7}
    fd18:	4770      	bx	lr

0000fd1a <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    fd1a:	b480      	push	{r7}
    fd1c:	b083      	sub	sp, #12
    fd1e:	af00      	add	r7, sp, #0
    fd20:	6078      	str	r0, [r7, #4]
    fd22:	460b      	mov	r3, r1
    fd24:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    fd26:	78fb      	ldrb	r3, [r7, #3]
    fd28:	f003 0307 	and.w	r3, r3, #7
    fd2c:	b2db      	uxtb	r3, r3
}
    fd2e:	4618      	mov	r0, r3
    fd30:	370c      	adds	r7, #12
    fd32:	46bd      	mov	sp, r7
    fd34:	bc80      	pop	{r7}
    fd36:	4770      	bx	lr

0000fd38 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    fd38:	b480      	push	{r7}
    fd3a:	b083      	sub	sp, #12
    fd3c:	af00      	add	r7, sp, #0
    fd3e:	6078      	str	r0, [r7, #4]
    fd40:	4608      	mov	r0, r1
    fd42:	4611      	mov	r1, r2
    fd44:	461a      	mov	r2, r3
    fd46:	4603      	mov	r3, r0
    fd48:	70fb      	strb	r3, [r7, #3]
    fd4a:	460b      	mov	r3, r1
    fd4c:	70bb      	strb	r3, [r7, #2]
    fd4e:	4613      	mov	r3, r2
    fd50:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    fd52:	78fb      	ldrb	r3, [r7, #3]
    fd54:	2b07      	cmp	r3, #7
    fd56:	dc01      	bgt.n	fd5c <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    fd58:	78bb      	ldrb	r3, [r7, #2]
    fd5a:	e000      	b.n	fd5e <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    fd5c:	787b      	ldrb	r3, [r7, #1]
}
    fd5e:	4618      	mov	r0, r3
    fd60:	370c      	adds	r7, #12
    fd62:	46bd      	mov	sp, r7
    fd64:	bc80      	pop	{r7}
    fd66:	4770      	bx	lr

0000fd68 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    fd68:	b580      	push	{r7, lr}
    fd6a:	b082      	sub	sp, #8
    fd6c:	af00      	add	r7, sp, #0
    fd6e:	6078      	str	r0, [r7, #4]
    fd70:	460b      	mov	r3, r1
    fd72:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    fd74:	687b      	ldr	r3, [r7, #4]
    fd76:	68da      	ldr	r2, [r3, #12]
    fd78:	687b      	ldr	r3, [r7, #4]
    fd7a:	7a1b      	ldrb	r3, [r3, #8]
    fd7c:	4619      	mov	r1, r3
    fd7e:	4610      	mov	r0, r2
    fd80:	4b0a      	ldr	r3, [pc, #40]	; (fdac <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    fd82:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    fd84:	687b      	ldr	r3, [r7, #4]
    fd86:	68db      	ldr	r3, [r3, #12]
    fd88:	1cf9      	adds	r1, r7, #3
    fd8a:	2201      	movs	r2, #1
    fd8c:	4618      	mov	r0, r3
    fd8e:	4b08      	ldr	r3, [pc, #32]	; (fdb0 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    fd90:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    fd92:	687b      	ldr	r3, [r7, #4]
    fd94:	68db      	ldr	r3, [r3, #12]
    fd96:	6879      	ldr	r1, [r7, #4]
    fd98:	2201      	movs	r2, #1
    fd9a:	4618      	mov	r0, r3
    fd9c:	4b05      	ldr	r3, [pc, #20]	; (fdb4 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    fd9e:	4798      	blx	r3

	return registerValue;
    fda0:	687b      	ldr	r3, [r7, #4]
    fda2:	781b      	ldrb	r3, [r3, #0]
}
    fda4:	4618      	mov	r0, r3
    fda6:	3708      	adds	r7, #8
    fda8:	46bd      	mov	sp, r7
    fdaa:	bd80      	pop	{r7, pc}
    fdac:	0000fbc9 	.word	0x0000fbc9
    fdb0:	0000fbf5 	.word	0x0000fbf5
    fdb4:	0000fc21 	.word	0x0000fc21

0000fdb8 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    fdb8:	b580      	push	{r7, lr}
    fdba:	b084      	sub	sp, #16
    fdbc:	af00      	add	r7, sp, #0
    fdbe:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    fdc0:	687b      	ldr	r3, [r7, #4]
    fdc2:	68da      	ldr	r2, [r3, #12]
    fdc4:	687b      	ldr	r3, [r7, #4]
    fdc6:	7a1b      	ldrb	r3, [r3, #8]
    fdc8:	4619      	mov	r1, r3
    fdca:	4610      	mov	r0, r2
    fdcc:	4b06      	ldr	r3, [pc, #24]	; (fde8 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    fdce:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    fdd0:	2109      	movs	r1, #9
    fdd2:	6878      	ldr	r0, [r7, #4]
    fdd4:	4b05      	ldr	r3, [pc, #20]	; (fdec <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    fdd6:	4798      	blx	r3
    fdd8:	4603      	mov	r3, r0
    fdda:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    fddc:	7bfb      	ldrb	r3, [r7, #15]
}
    fdde:	4618      	mov	r0, r3
    fde0:	3710      	adds	r7, #16
    fde2:	46bd      	mov	sp, r7
    fde4:	bd80      	pop	{r7, pc}
    fde6:	bf00      	nop
    fde8:	0000fbc9 	.word	0x0000fbc9
    fdec:	0000fd69 	.word	0x0000fd69

0000fdf0 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    fdf0:	b580      	push	{r7, lr}
    fdf2:	b084      	sub	sp, #16
    fdf4:	af00      	add	r7, sp, #0
    fdf6:	6078      	str	r0, [r7, #4]
    fdf8:	460b      	mov	r3, r1
    fdfa:	70fb      	strb	r3, [r7, #3]
    fdfc:	4613      	mov	r3, r2
    fdfe:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    fe00:	687b      	ldr	r3, [r7, #4]
    fe02:	68da      	ldr	r2, [r3, #12]
    fe04:	687b      	ldr	r3, [r7, #4]
    fe06:	7a1b      	ldrb	r3, [r3, #8]
    fe08:	4619      	mov	r1, r3
    fe0a:	4610      	mov	r0, r2
    fe0c:	4b09      	ldr	r3, [pc, #36]	; (fe34 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    fe0e:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    fe10:	78fb      	ldrb	r3, [r7, #3]
    fe12:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    fe14:	78bb      	ldrb	r3, [r7, #2]
    fe16:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    fe18:	687b      	ldr	r3, [r7, #4]
    fe1a:	68db      	ldr	r3, [r3, #12]
    fe1c:	f107 010c 	add.w	r1, r7, #12
    fe20:	2202      	movs	r2, #2
    fe22:	4618      	mov	r0, r3
    fe24:	4b04      	ldr	r3, [pc, #16]	; (fe38 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    fe26:	4798      	blx	r3
    fe28:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    fe2a:	4618      	mov	r0, r3
    fe2c:	3710      	adds	r7, #16
    fe2e:	46bd      	mov	sp, r7
    fe30:	bd80      	pop	{r7, pc}
    fe32:	bf00      	nop
    fe34:	0000fbc9 	.word	0x0000fbc9
    fe38:	0000fbf5 	.word	0x0000fbf5

0000fe3c <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
    fe3c:	b580      	push	{r7, lr}
    fe3e:	b082      	sub	sp, #8
    fe40:	af00      	add	r7, sp, #0
    fe42:	6078      	str	r0, [r7, #4]
    fe44:	460b      	mov	r3, r1
    fe46:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    fe48:	687b      	ldr	r3, [r7, #4]
    fe4a:	68da      	ldr	r2, [r3, #12]
    fe4c:	687b      	ldr	r3, [r7, #4]
    fe4e:	7a1b      	ldrb	r3, [r3, #8]
    fe50:	4619      	mov	r1, r3
    fe52:	4610      	mov	r0, r2
    fe54:	4b06      	ldr	r3, [pc, #24]	; (fe70 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
    fe56:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
    fe58:	78fb      	ldrb	r3, [r7, #3]
    fe5a:	461a      	mov	r2, r3
    fe5c:	2109      	movs	r1, #9
    fe5e:	6878      	ldr	r0, [r7, #4]
    fe60:	4b04      	ldr	r3, [pc, #16]	; (fe74 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
    fe62:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
    fe64:	78fb      	ldrb	r3, [r7, #3]
}
    fe66:	4618      	mov	r0, r3
    fe68:	3708      	adds	r7, #8
    fe6a:	46bd      	mov	sp, r7
    fe6c:	bd80      	pop	{r7, pc}
    fe6e:	bf00      	nop
    fe70:	0000fbc9 	.word	0x0000fbc9
    fe74:	0000fdf1 	.word	0x0000fdf1

0000fe78 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
    fe78:	b580      	push	{r7, lr}
    fe7a:	b084      	sub	sp, #16
    fe7c:	af00      	add	r7, sp, #0
    fe7e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    fe80:	2300      	movs	r3, #0
    fe82:	73fb      	strb	r3, [r7, #15]
    fe84:	7bfb      	ldrb	r3, [r7, #15]
    fe86:	2b07      	cmp	r3, #7
    fe88:	dc0f      	bgt.n	feaa <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
    fe8a:	7bfb      	ldrb	r3, [r7, #15]
    fe8c:	2201      	movs	r2, #1
    fe8e:	4619      	mov	r1, r3
    fe90:	6878      	ldr	r0, [r7, #4]
    fe92:	4b08      	ldr	r3, [pc, #32]	; (feb4 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
    fe94:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
    fe96:	7bfb      	ldrb	r3, [r7, #15]
    fe98:	2201      	movs	r2, #1
    fe9a:	4619      	mov	r1, r3
    fe9c:	6878      	ldr	r0, [r7, #4]
    fe9e:	4b06      	ldr	r3, [pc, #24]	; (feb8 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
    fea0:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    fea2:	7bfb      	ldrb	r3, [r7, #15]
    fea4:	3301      	adds	r3, #1
    fea6:	73fb      	strb	r3, [r7, #15]
    fea8:	e7ec      	b.n	fe84 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
    feaa:	bf00      	nop
    feac:	3710      	adds	r7, #16
    feae:	46bd      	mov	sp, r7
    feb0:	bd80      	pop	{r7, pc}
    feb2:	bf00      	nop
    feb4:	00010039 	.word	0x00010039
    feb8:	0001011d 	.word	0x0001011d

0000febc <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
    febc:	b580      	push	{r7, lr}
    febe:	b084      	sub	sp, #16
    fec0:	af00      	add	r7, sp, #0
    fec2:	6078      	str	r0, [r7, #4]
    fec4:	460b      	mov	r3, r1
    fec6:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
    fec8:	78fb      	ldrb	r3, [r7, #3]
    feca:	2b00      	cmp	r3, #0
    fecc:	dd23      	ble.n	ff16 <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
    fece:	2300      	movs	r3, #0
    fed0:	73fb      	strb	r3, [r7, #15]
    fed2:	7bfb      	ldrb	r3, [r7, #15]
    fed4:	2b07      	cmp	r3, #7
    fed6:	dc21      	bgt.n	ff1c <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
    fed8:	78fa      	ldrb	r2, [r7, #3]
    feda:	7bfb      	ldrb	r3, [r7, #15]
    fedc:	fa42 f303 	asr.w	r3, r2, r3
    fee0:	f003 0301 	and.w	r3, r3, #1
    fee4:	2b00      	cmp	r3, #0
    fee6:	d00c      	beq.n	ff02 <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
    fee8:	7bfb      	ldrb	r3, [r7, #15]
    feea:	2201      	movs	r2, #1
    feec:	4619      	mov	r1, r3
    feee:	6878      	ldr	r0, [r7, #4]
    fef0:	4b0c      	ldr	r3, [pc, #48]	; (ff24 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    fef2:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
    fef4:	7bfb      	ldrb	r3, [r7, #15]
    fef6:	2201      	movs	r2, #1
    fef8:	4619      	mov	r1, r3
    fefa:	6878      	ldr	r0, [r7, #4]
    fefc:	4b0a      	ldr	r3, [pc, #40]	; (ff28 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
    fefe:	4798      	blx	r3
    ff00:	e005      	b.n	ff0e <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
    ff02:	7bfb      	ldrb	r3, [r7, #15]
    ff04:	2200      	movs	r2, #0
    ff06:	4619      	mov	r1, r3
    ff08:	6878      	ldr	r0, [r7, #4]
    ff0a:	4b06      	ldr	r3, [pc, #24]	; (ff24 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
    ff0c:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
    ff0e:	7bfb      	ldrb	r3, [r7, #15]
    ff10:	3301      	adds	r3, #1
    ff12:	73fb      	strb	r3, [r7, #15]
    ff14:	e7dd      	b.n	fed2 <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
    ff16:	6878      	ldr	r0, [r7, #4]
    ff18:	4b04      	ldr	r3, [pc, #16]	; (ff2c <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
    ff1a:	4798      	blx	r3
	}
	
}
    ff1c:	bf00      	nop
    ff1e:	3710      	adds	r7, #16
    ff20:	46bd      	mov	sp, r7
    ff22:	bd80      	pop	{r7, pc}
    ff24:	00010039 	.word	0x00010039
    ff28:	0001011d 	.word	0x0001011d
    ff2c:	0000ff31 	.word	0x0000ff31

0000ff30 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
    ff30:	b580      	push	{r7, lr}
    ff32:	b084      	sub	sp, #16
    ff34:	af00      	add	r7, sp, #0
    ff36:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    ff38:	2300      	movs	r3, #0
    ff3a:	73fb      	strb	r3, [r7, #15]
    ff3c:	7bfb      	ldrb	r3, [r7, #15]
    ff3e:	2b07      	cmp	r3, #7
    ff40:	dc09      	bgt.n	ff56 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
    ff42:	7bfb      	ldrb	r3, [r7, #15]
    ff44:	2200      	movs	r2, #0
    ff46:	4619      	mov	r1, r3
    ff48:	6878      	ldr	r0, [r7, #4]
    ff4a:	4b05      	ldr	r3, [pc, #20]	; (ff60 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
    ff4c:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    ff4e:	7bfb      	ldrb	r3, [r7, #15]
    ff50:	3301      	adds	r3, #1
    ff52:	73fb      	strb	r3, [r7, #15]
    ff54:	e7f2      	b.n	ff3c <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
    ff56:	bf00      	nop
    ff58:	3710      	adds	r7, #16
    ff5a:	46bd      	mov	sp, r7
    ff5c:	bd80      	pop	{r7, pc}
    ff5e:	bf00      	nop
    ff60:	00010039 	.word	0x00010039

0000ff64 <_ZN14MCP23008_Class13SetPortOutputEh>:
void	MCP23008_Class::SetPortOutput(uint8_t out){
    ff64:	b580      	push	{r7, lr}
    ff66:	b084      	sub	sp, #16
    ff68:	af00      	add	r7, sp, #0
    ff6a:	6078      	str	r0, [r7, #4]
    ff6c:	460b      	mov	r3, r1
    ff6e:	70fb      	strb	r3, [r7, #3]
	
	for (uint8_t i=0;i<8;i++)
    ff70:	2300      	movs	r3, #0
    ff72:	73fb      	strb	r3, [r7, #15]
    ff74:	7bfb      	ldrb	r3, [r7, #15]
    ff76:	2b07      	cmp	r3, #7
    ff78:	dc11      	bgt.n	ff9e <_ZN14MCP23008_Class13SetPortOutputEh+0x3a>
	{
		if (out&(0x01<<i))
    ff7a:	78fa      	ldrb	r2, [r7, #3]
    ff7c:	7bfb      	ldrb	r3, [r7, #15]
    ff7e:	fa42 f303 	asr.w	r3, r2, r3
    ff82:	f003 0301 	and.w	r3, r3, #1
    ff86:	2b00      	cmp	r3, #0
    ff88:	d005      	beq.n	ff96 <_ZN14MCP23008_Class13SetPortOutputEh+0x32>
		{
			pinMode(i,MCP23008_OUTPUT);
    ff8a:	7bfb      	ldrb	r3, [r7, #15]
    ff8c:	2200      	movs	r2, #0
    ff8e:	4619      	mov	r1, r3
    ff90:	6878      	ldr	r0, [r7, #4]
    ff92:	4b05      	ldr	r3, [pc, #20]	; (ffa8 <_ZN14MCP23008_Class13SetPortOutputEh+0x44>)
    ff94:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
    ff96:	7bfb      	ldrb	r3, [r7, #15]
    ff98:	3301      	adds	r3, #1
    ff9a:	73fb      	strb	r3, [r7, #15]
    ff9c:	e7ea      	b.n	ff74 <_ZN14MCP23008_Class13SetPortOutputEh+0x10>
		}
		
	}
}
    ff9e:	bf00      	nop
    ffa0:	3710      	adds	r7, #16
    ffa2:	46bd      	mov	sp, r7
    ffa4:	bd80      	pop	{r7, pc}
    ffa6:	bf00      	nop
    ffa8:	00010039 	.word	0x00010039

0000ffac <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
    ffac:	b580      	push	{r7, lr}
    ffae:	b084      	sub	sp, #16
    ffb0:	af00      	add	r7, sp, #0
    ffb2:	6078      	str	r0, [r7, #4]
    ffb4:	4608      	mov	r0, r1
    ffb6:	4611      	mov	r1, r2
    ffb8:	461a      	mov	r2, r3
    ffba:	4603      	mov	r3, r0
    ffbc:	70fb      	strb	r3, [r7, #3]
    ffbe:	460b      	mov	r3, r1
    ffc0:	70bb      	strb	r3, [r7, #2]
    ffc2:	4613      	mov	r3, r2
    ffc4:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
    ffc6:	787b      	ldrb	r3, [r7, #1]
    ffc8:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
    ffca:	78fb      	ldrb	r3, [r7, #3]
    ffcc:	4619      	mov	r1, r3
    ffce:	6878      	ldr	r0, [r7, #4]
    ffd0:	4b16      	ldr	r3, [pc, #88]	; (1002c <STACK_SIZE+0x2c>)
    ffd2:	4798      	blx	r3
    ffd4:	4603      	mov	r3, r0
    ffd6:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
    ffd8:	7bfb      	ldrb	r3, [r7, #15]
    ffda:	4619      	mov	r1, r3
    ffdc:	6878      	ldr	r0, [r7, #4]
    ffde:	4b14      	ldr	r3, [pc, #80]	; (10030 <STACK_SIZE+0x30>)
    ffe0:	4798      	blx	r3
    ffe2:	4603      	mov	r3, r0
    ffe4:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
    ffe6:	78bb      	ldrb	r3, [r7, #2]
    ffe8:	2b00      	cmp	r3, #0
    ffea:	d009      	beq.n	10000 <STACK_SIZE>
    ffec:	7bba      	ldrb	r2, [r7, #14]
    ffee:	7b7b      	ldrb	r3, [r7, #13]
    fff0:	4619      	mov	r1, r3
    fff2:	2301      	movs	r3, #1
    fff4:	408b      	lsls	r3, r1
    fff6:	b2db      	uxtb	r3, r3
    fff8:	4313      	orrs	r3, r2
    fffa:	b2db      	uxtb	r3, r3
    fffc:	73bb      	strb	r3, [r7, #14]
    fffe:	e00a      	b.n	10016 <STACK_SIZE+0x16>
   10000:	7bba      	ldrb	r2, [r7, #14]
   10002:	7b7b      	ldrb	r3, [r7, #13]
   10004:	4619      	mov	r1, r3
   10006:	2301      	movs	r3, #1
   10008:	408b      	lsls	r3, r1
   1000a:	b2db      	uxtb	r3, r3
   1000c:	43db      	mvns	r3, r3
   1000e:	b2db      	uxtb	r3, r3
   10010:	4013      	ands	r3, r2
   10012:	b2db      	uxtb	r3, r3
   10014:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
   10016:	7bba      	ldrb	r2, [r7, #14]
   10018:	7bfb      	ldrb	r3, [r7, #15]
   1001a:	4619      	mov	r1, r3
   1001c:	6878      	ldr	r0, [r7, #4]
   1001e:	4b05      	ldr	r3, [pc, #20]	; (10034 <STACK_SIZE+0x34>)
   10020:	4798      	blx	r3
}
   10022:	bf00      	nop
   10024:	3710      	adds	r7, #16
   10026:	46bd      	mov	sp, r7
   10028:	bd80      	pop	{r7, pc}
   1002a:	bf00      	nop
   1002c:	0000fd1b 	.word	0x0000fd1b
   10030:	0000fd69 	.word	0x0000fd69
   10034:	0000fdf1 	.word	0x0000fdf1

00010038 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
   10038:	b590      	push	{r4, r7, lr}
   1003a:	b085      	sub	sp, #20
   1003c:	af02      	add	r7, sp, #8
   1003e:	6078      	str	r0, [r7, #4]
   10040:	460b      	mov	r3, r1
   10042:	70fb      	strb	r3, [r7, #3]
   10044:	4613      	mov	r3, r2
   10046:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
   10048:	78bb      	ldrb	r3, [r7, #2]
   1004a:	2b01      	cmp	r3, #1
   1004c:	bf0c      	ite	eq
   1004e:	2301      	moveq	r3, #1
   10050:	2300      	movne	r3, #0
   10052:	b2db      	uxtb	r3, r3
   10054:	461a      	mov	r2, r3
   10056:	78f9      	ldrb	r1, [r7, #3]
   10058:	2300      	movs	r3, #0
   1005a:	9300      	str	r3, [sp, #0]
   1005c:	2300      	movs	r3, #0
   1005e:	6878      	ldr	r0, [r7, #4]
   10060:	4c02      	ldr	r4, [pc, #8]	; (1006c <_ZN14MCP23008_Class7pinModeEhh+0x34>)
   10062:	47a0      	blx	r4
}
   10064:	bf00      	nop
   10066:	370c      	adds	r7, #12
   10068:	46bd      	mov	sp, r7
   1006a:	bd90      	pop	{r4, r7, pc}
   1006c:	0000ffad 	.word	0x0000ffad

00010070 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
   10070:	b590      	push	{r4, r7, lr}
   10072:	b085      	sub	sp, #20
   10074:	af00      	add	r7, sp, #0
   10076:	6078      	str	r0, [r7, #4]
   10078:	460b      	mov	r3, r1
   1007a:	70fb      	strb	r3, [r7, #3]
   1007c:	4613      	mov	r3, r2
   1007e:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
   10080:	78fb      	ldrb	r3, [r7, #3]
   10082:	4619      	mov	r1, r3
   10084:	6878      	ldr	r0, [r7, #4]
   10086:	4b21      	ldr	r3, [pc, #132]	; (1010c <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
   10088:	4798      	blx	r3
   1008a:	4603      	mov	r3, r0
   1008c:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
   1008e:	78f9      	ldrb	r1, [r7, #3]
   10090:	230a      	movs	r3, #10
   10092:	220a      	movs	r2, #10
   10094:	6878      	ldr	r0, [r7, #4]
   10096:	4c1e      	ldr	r4, [pc, #120]	; (10110 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   10098:	47a0      	blx	r4
   1009a:	4603      	mov	r3, r0
   1009c:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
   1009e:	7bfb      	ldrb	r3, [r7, #15]
   100a0:	4619      	mov	r1, r3
   100a2:	6878      	ldr	r0, [r7, #4]
   100a4:	4b1b      	ldr	r3, [pc, #108]	; (10114 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
   100a6:	4798      	blx	r3
   100a8:	4603      	mov	r3, r0
   100aa:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
   100ac:	78bb      	ldrb	r3, [r7, #2]
   100ae:	2b00      	cmp	r3, #0
   100b0:	d009      	beq.n	100c6 <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
   100b2:	7bba      	ldrb	r2, [r7, #14]
   100b4:	7b7b      	ldrb	r3, [r7, #13]
   100b6:	4619      	mov	r1, r3
   100b8:	2301      	movs	r3, #1
   100ba:	408b      	lsls	r3, r1
   100bc:	b2db      	uxtb	r3, r3
   100be:	4313      	orrs	r3, r2
   100c0:	b2db      	uxtb	r3, r3
   100c2:	73bb      	strb	r3, [r7, #14]
   100c4:	e00a      	b.n	100dc <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
   100c6:	7bba      	ldrb	r2, [r7, #14]
   100c8:	7b7b      	ldrb	r3, [r7, #13]
   100ca:	4619      	mov	r1, r3
   100cc:	2301      	movs	r3, #1
   100ce:	408b      	lsls	r3, r1
   100d0:	b2db      	uxtb	r3, r3
   100d2:	43db      	mvns	r3, r3
   100d4:	b2db      	uxtb	r3, r3
   100d6:	4013      	ands	r3, r2
   100d8:	b2db      	uxtb	r3, r3
   100da:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
   100dc:	78f9      	ldrb	r1, [r7, #3]
   100de:	2309      	movs	r3, #9
   100e0:	2209      	movs	r2, #9
   100e2:	6878      	ldr	r0, [r7, #4]
   100e4:	4c0a      	ldr	r4, [pc, #40]	; (10110 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   100e6:	47a0      	blx	r4
   100e8:	4603      	mov	r3, r0
   100ea:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
   100ec:	7bba      	ldrb	r2, [r7, #14]
   100ee:	7bfb      	ldrb	r3, [r7, #15]
   100f0:	4619      	mov	r1, r3
   100f2:	6878      	ldr	r0, [r7, #4]
   100f4:	4b08      	ldr	r3, [pc, #32]	; (10118 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
   100f6:	4798      	blx	r3
   100f8:	4603      	mov	r3, r0
   100fa:	2b00      	cmp	r3, #0
   100fc:	bf0c      	ite	eq
   100fe:	2301      	moveq	r3, #1
   10100:	2300      	movne	r3, #0
   10102:	b2db      	uxtb	r3, r3
}
   10104:	4618      	mov	r0, r3
   10106:	3714      	adds	r7, #20
   10108:	46bd      	mov	sp, r7
   1010a:	bd90      	pop	{r4, r7, pc}
   1010c:	0000fd1b 	.word	0x0000fd1b
   10110:	0000fd39 	.word	0x0000fd39
   10114:	0000fd69 	.word	0x0000fd69
   10118:	0000fdf1 	.word	0x0000fdf1

0001011c <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
   1011c:	b590      	push	{r4, r7, lr}
   1011e:	b085      	sub	sp, #20
   10120:	af02      	add	r7, sp, #8
   10122:	6078      	str	r0, [r7, #4]
   10124:	460b      	mov	r3, r1
   10126:	70fb      	strb	r3, [r7, #3]
   10128:	4613      	mov	r3, r2
   1012a:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
   1012c:	78ba      	ldrb	r2, [r7, #2]
   1012e:	78f9      	ldrb	r1, [r7, #3]
   10130:	2306      	movs	r3, #6
   10132:	9300      	str	r3, [sp, #0]
   10134:	2306      	movs	r3, #6
   10136:	6878      	ldr	r0, [r7, #4]
   10138:	4c02      	ldr	r4, [pc, #8]	; (10144 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
   1013a:	47a0      	blx	r4
}
   1013c:	bf00      	nop
   1013e:	370c      	adds	r7, #12
   10140:	46bd      	mov	sp, r7
   10142:	bd90      	pop	{r4, r7, pc}
   10144:	0000ffad 	.word	0x0000ffad

00010148 <_Z41__static_initialization_and_destruction_0ii>:
	return MCP23008_INT_ERR;
}
bool	MCP23008_Class::SelfTest(void){

	return isOK;
   10148:	b580      	push	{r7, lr}
   1014a:	b082      	sub	sp, #8
   1014c:	af00      	add	r7, sp, #0
   1014e:	6078      	str	r0, [r7, #4]
   10150:	6039      	str	r1, [r7, #0]
   10152:	687b      	ldr	r3, [r7, #4]
   10154:	2b01      	cmp	r3, #1
   10156:	d10d      	bne.n	10174 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   10158:	683b      	ldr	r3, [r7, #0]
   1015a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1015e:	4293      	cmp	r3, r2
   10160:	d108      	bne.n	10174 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   10162:	4906      	ldr	r1, [pc, #24]	; (1017c <_Z41__static_initialization_and_destruction_0ii+0x34>)
   10164:	4806      	ldr	r0, [pc, #24]	; (10180 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   10166:	4b07      	ldr	r3, [pc, #28]	; (10184 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   10168:	4798      	blx	r3
   1016a:	4a07      	ldr	r2, [pc, #28]	; (10188 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   1016c:	4907      	ldr	r1, [pc, #28]	; (1018c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1016e:	4804      	ldr	r0, [pc, #16]	; (10180 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   10170:	4b07      	ldr	r3, [pc, #28]	; (10190 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   10172:	4798      	blx	r3
   10174:	bf00      	nop
   10176:	3708      	adds	r7, #8
   10178:	46bd      	mov	sp, r7
   1017a:	bd80      	pop	{r7, pc}
   1017c:	2000dff8 	.word	0x2000dff8
   10180:	20002f3c 	.word	0x20002f3c
   10184:	0000faf1 	.word	0x0000faf1
   10188:	20000000 	.word	0x20000000
   1018c:	0000fb0d 	.word	0x0000fb0d
   10190:	0001a0b5 	.word	0x0001a0b5

00010194 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev>:
   10194:	b580      	push	{r7, lr}
   10196:	af00      	add	r7, sp, #0
   10198:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1019c:	2001      	movs	r0, #1
   1019e:	4b01      	ldr	r3, [pc, #4]	; (101a4 <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev+0x10>)
   101a0:	4798      	blx	r3
   101a2:	bd80      	pop	{r7, pc}
   101a4:	00010149 	.word	0x00010149

000101a8 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   101a8:	b480      	push	{r7}
   101aa:	b083      	sub	sp, #12
   101ac:	af00      	add	r7, sp, #0
   101ae:	6078      	str	r0, [r7, #4]
   101b0:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   101b2:	687b      	ldr	r3, [r7, #4]
   101b4:	683a      	ldr	r2, [r7, #0]
   101b6:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
   101b8:	687b      	ldr	r3, [r7, #4]
   101ba:	68db      	ldr	r3, [r3, #12]
   101bc:	2200      	movs	r2, #0
   101be:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
   101c0:	4a06      	ldr	r2, [pc, #24]	; (101dc <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
   101c2:	687b      	ldr	r3, [r7, #4]
   101c4:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   101c6:	687b      	ldr	r3, [r7, #4]
   101c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   101cc:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
   101ce:	687b      	ldr	r3, [r7, #4]
   101d0:	4618      	mov	r0, r3
   101d2:	370c      	adds	r7, #12
   101d4:	46bd      	mov	sp, r7
   101d6:	bc80      	pop	{r7}
   101d8:	4770      	bx	lr
   101da:	bf00      	nop
   101dc:	20003054 	.word	0x20003054

000101e0 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
   101e0:	b480      	push	{r7}
   101e2:	b083      	sub	sp, #12
   101e4:	af00      	add	r7, sp, #0
   101e6:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   101e8:	687b      	ldr	r3, [r7, #4]
   101ea:	2200      	movs	r2, #0
   101ec:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   101ee:	687b      	ldr	r3, [r7, #4]
   101f0:	4618      	mov	r0, r3
   101f2:	370c      	adds	r7, #12
   101f4:	46bd      	mov	sp, r7
   101f6:	bc80      	pop	{r7}
   101f8:	4770      	bx	lr
	...

000101fc <_ZL9InitArrayv>:


static void InitArray(){
   101fc:	b480      	push	{r7}
   101fe:	b083      	sub	sp, #12
   10200:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
   10202:	2301      	movs	r3, #1
   10204:	607b      	str	r3, [r7, #4]
   10206:	687b      	ldr	r3, [r7, #4]
   10208:	2b1f      	cmp	r3, #31
   1020a:	dc34      	bgt.n	10276 <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
   1020c:	491e      	ldr	r1, [pc, #120]	; (10288 <_ZL9InitArrayv+0x8c>)
   1020e:	687a      	ldr	r2, [r7, #4]
   10210:	4613      	mov	r3, r2
   10212:	009b      	lsls	r3, r3, #2
   10214:	4413      	add	r3, r2
   10216:	009b      	lsls	r3, r3, #2
   10218:	440b      	add	r3, r1
   1021a:	2200      	movs	r2, #0
   1021c:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
   1021e:	491a      	ldr	r1, [pc, #104]	; (10288 <_ZL9InitArrayv+0x8c>)
   10220:	687a      	ldr	r2, [r7, #4]
   10222:	4613      	mov	r3, r2
   10224:	009b      	lsls	r3, r3, #2
   10226:	4413      	add	r3, r2
   10228:	009b      	lsls	r3, r3, #2
   1022a:	440b      	add	r3, r1
   1022c:	330c      	adds	r3, #12
   1022e:	2200      	movs	r2, #0
   10230:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
   10232:	687b      	ldr	r3, [r7, #4]
   10234:	1e5a      	subs	r2, r3, #1
   10236:	6879      	ldr	r1, [r7, #4]
   10238:	460b      	mov	r3, r1
   1023a:	009b      	lsls	r3, r3, #2
   1023c:	440b      	add	r3, r1
   1023e:	009b      	lsls	r3, r3, #2
   10240:	4911      	ldr	r1, [pc, #68]	; (10288 <_ZL9InitArrayv+0x8c>)
   10242:	4419      	add	r1, r3
   10244:	4810      	ldr	r0, [pc, #64]	; (10288 <_ZL9InitArrayv+0x8c>)
   10246:	4613      	mov	r3, r2
   10248:	009b      	lsls	r3, r3, #2
   1024a:	4413      	add	r3, r2
   1024c:	009b      	lsls	r3, r3, #2
   1024e:	4403      	add	r3, r0
   10250:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
   10252:	4a0e      	ldr	r2, [pc, #56]	; (1028c <_ZL9InitArrayv+0x90>)
   10254:	687b      	ldr	r3, [r7, #4]
   10256:	2100      	movs	r1, #0
   10258:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
   1025c:	687b      	ldr	r3, [r7, #4]
   1025e:	3b01      	subs	r3, #1
   10260:	687a      	ldr	r2, [r7, #4]
   10262:	0092      	lsls	r2, r2, #2
   10264:	4909      	ldr	r1, [pc, #36]	; (1028c <_ZL9InitArrayv+0x90>)
   10266:	440a      	add	r2, r1
   10268:	4908      	ldr	r1, [pc, #32]	; (1028c <_ZL9InitArrayv+0x90>)
   1026a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
   1026e:	687b      	ldr	r3, [r7, #4]
   10270:	3301      	adds	r3, #1
   10272:	607b      	str	r3, [r7, #4]
   10274:	e7c7      	b.n	10206 <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
   10276:	4b06      	ldr	r3, [pc, #24]	; (10290 <_ZL9InitArrayv+0x94>)
   10278:	2201      	movs	r2, #1
   1027a:	701a      	strb	r2, [r3, #0]
		
}
   1027c:	bf00      	nop
   1027e:	370c      	adds	r7, #12
   10280:	46bd      	mov	sp, r7
   10282:	bc80      	pop	{r7}
   10284:	4770      	bx	lr
   10286:	bf00      	nop
   10288:	20003058 	.word	0x20003058
   1028c:	200032d8 	.word	0x200032d8
   10290:	20003358 	.word	0x20003358

00010294 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
   10294:	b580      	push	{r7, lr}
   10296:	b082      	sub	sp, #8
   10298:	af00      	add	r7, sp, #0
   1029a:	6078      	str	r0, [r7, #4]
	ticks=0;
   1029c:	687b      	ldr	r3, [r7, #4]
   1029e:	2200      	movs	r2, #0
   102a0:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
   102a2:	4b0d      	ldr	r3, [pc, #52]	; (102d8 <_ZN11Timer_Class4InitEv+0x44>)
   102a4:	781b      	ldrb	r3, [r3, #0]
   102a6:	f083 0301 	eor.w	r3, r3, #1
   102aa:	b2db      	uxtb	r3, r3
   102ac:	2b00      	cmp	r3, #0
   102ae:	d001      	beq.n	102b4 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
   102b0:	4b0a      	ldr	r3, [pc, #40]	; (102dc <_ZN11Timer_Class4InitEv+0x48>)
   102b2:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
   102b4:	6878      	ldr	r0, [r7, #4]
   102b6:	4b0a      	ldr	r3, [pc, #40]	; (102e0 <_ZN11Timer_Class4InitEv+0x4c>)
   102b8:	4798      	blx	r3
   102ba:	4603      	mov	r3, r0
   102bc:	2b00      	cmp	r3, #0
   102be:	bf0c      	ite	eq
   102c0:	2301      	moveq	r3, #1
   102c2:	2300      	movne	r3, #0
   102c4:	b2da      	uxtb	r2, r3
   102c6:	687b      	ldr	r3, [r7, #4]
   102c8:	709a      	strb	r2, [r3, #2]
	return isOK;
   102ca:	687b      	ldr	r3, [r7, #4]
   102cc:	789b      	ldrb	r3, [r3, #2]
   102ce:	b2db      	uxtb	r3, r3
}
   102d0:	4618      	mov	r0, r3
   102d2:	3708      	adds	r7, #8
   102d4:	46bd      	mov	sp, r7
   102d6:	bd80      	pop	{r7, pc}
   102d8:	20003358 	.word	0x20003358
   102dc:	000101fd 	.word	0x000101fd
   102e0:	000102e5 	.word	0x000102e5

000102e4 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
   102e4:	b580      	push	{r7, lr}
   102e6:	b084      	sub	sp, #16
   102e8:	af00      	add	r7, sp, #0
   102ea:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   102ec:	687b      	ldr	r3, [r7, #4]
   102ee:	68db      	ldr	r3, [r3, #12]
   102f0:	4618      	mov	r0, r3
   102f2:	4b04      	ldr	r3, [pc, #16]	; (10304 <_ZN11Timer_Class5StartEv+0x20>)
   102f4:	4798      	blx	r3
   102f6:	60f8      	str	r0, [r7, #12]
	return status;
   102f8:	68fb      	ldr	r3, [r7, #12]
	
}
   102fa:	4618      	mov	r0, r3
   102fc:	3710      	adds	r7, #16
   102fe:	46bd      	mov	sp, r7
   10300:	bd80      	pop	{r7, pc}
   10302:	bf00      	nop
   10304:	00003ee9 	.word	0x00003ee9

00010308 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
   10308:	b580      	push	{r7, lr}
   1030a:	b084      	sub	sp, #16
   1030c:	af00      	add	r7, sp, #0
   1030e:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
   10310:	687b      	ldr	r3, [r7, #4]
   10312:	68db      	ldr	r3, [r3, #12]
   10314:	4618      	mov	r0, r3
   10316:	4b05      	ldr	r3, [pc, #20]	; (1032c <_ZN11Timer_Class4StopEv+0x24>)
   10318:	4798      	blx	r3
   1031a:	60f8      	str	r0, [r7, #12]
	timeout=0;
   1031c:	687b      	ldr	r3, [r7, #4]
   1031e:	2200      	movs	r2, #0
   10320:	705a      	strb	r2, [r3, #1]
	return status;
   10322:	68fb      	ldr	r3, [r7, #12]
}
   10324:	4618      	mov	r0, r3
   10326:	3710      	adds	r7, #16
   10328:	46bd      	mov	sp, r7
   1032a:	bd80      	pop	{r7, pc}
   1032c:	00003f51 	.word	0x00003f51

00010330 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   10330:	b580      	push	{r7, lr}
   10332:	b086      	sub	sp, #24
   10334:	af00      	add	r7, sp, #0
   10336:	60f8      	str	r0, [r7, #12]
   10338:	60b9      	str	r1, [r7, #8]
   1033a:	607a      	str	r2, [r7, #4]
   1033c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
   1033e:	68b9      	ldr	r1, [r7, #8]
   10340:	68f8      	ldr	r0, [r7, #12]
   10342:	4b0e      	ldr	r3, [pc, #56]	; (1037c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   10344:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
   10346:	68fb      	ldr	r3, [r7, #12]
   10348:	699b      	ldr	r3, [r3, #24]
   1034a:	687a      	ldr	r2, [r7, #4]
   1034c:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   1034e:	68fb      	ldr	r3, [r7, #12]
   10350:	699b      	ldr	r3, [r3, #24]
   10352:	68ba      	ldr	r2, [r7, #8]
   10354:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   10356:	68fb      	ldr	r3, [r7, #12]
   10358:	699b      	ldr	r3, [r3, #24]
   1035a:	78fa      	ldrb	r2, [r7, #3]
   1035c:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   1035e:	68fb      	ldr	r3, [r7, #12]
   10360:	68da      	ldr	r2, [r3, #12]
   10362:	68fb      	ldr	r3, [r7, #12]
   10364:	699b      	ldr	r3, [r3, #24]
   10366:	4619      	mov	r1, r3
   10368:	4610      	mov	r0, r2
   1036a:	4b05      	ldr	r3, [pc, #20]	; (10380 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
   1036c:	4798      	blx	r3
   1036e:	6178      	str	r0, [r7, #20]
	
	return status;
   10370:	697b      	ldr	r3, [r7, #20]
}
   10372:	4618      	mov	r0, r3
   10374:	3718      	adds	r7, #24
   10376:	46bd      	mov	sp, r7
   10378:	bd80      	pop	{r7, pc}
   1037a:	bf00      	nop
   1037c:	00010539 	.word	0x00010539
   10380:	00003fbd 	.word	0x00003fbd

00010384 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
   10384:	b580      	push	{r7, lr}
   10386:	b086      	sub	sp, #24
   10388:	af00      	add	r7, sp, #0
   1038a:	60f8      	str	r0, [r7, #12]
   1038c:	60b9      	str	r1, [r7, #8]
   1038e:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
   10390:	687a      	ldr	r2, [r7, #4]
   10392:	68b9      	ldr	r1, [r7, #8]
   10394:	68f8      	ldr	r0, [r7, #12]
   10396:	4b0c      	ldr	r3, [pc, #48]	; (103c8 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
   10398:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
   1039a:	68fb      	ldr	r3, [r7, #12]
   1039c:	68db      	ldr	r3, [r3, #12]
   1039e:	681b      	ldr	r3, [r3, #0]
   103a0:	699b      	ldr	r3, [r3, #24]
   103a2:	68fa      	ldr	r2, [r7, #12]
   103a4:	68d2      	ldr	r2, [r2, #12]
   103a6:	3204      	adds	r2, #4
   103a8:	4610      	mov	r0, r2
   103aa:	4798      	blx	r3
   103ac:	4603      	mov	r3, r0
   103ae:	2b00      	cmp	r3, #0
   103b0:	d105      	bne.n	103be <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
   103b2:	68fb      	ldr	r3, [r7, #12]
   103b4:	68db      	ldr	r3, [r3, #12]
   103b6:	4618      	mov	r0, r3
   103b8:	4b04      	ldr	r3, [pc, #16]	; (103cc <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
   103ba:	4798      	blx	r3
   103bc:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
   103be:	697b      	ldr	r3, [r7, #20]
}
   103c0:	4618      	mov	r0, r3
   103c2:	3718      	adds	r7, #24
   103c4:	46bd      	mov	sp, r7
   103c6:	bd80      	pop	{r7, pc}
   103c8:	000103d1 	.word	0x000103d1
   103cc:	00003ee9 	.word	0x00003ee9

000103d0 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		status=timer_start(timer_descr);
	}
	return status;
}

int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   103d0:	b590      	push	{r4, r7, lr}
   103d2:	b087      	sub	sp, #28
   103d4:	af00      	add	r7, sp, #0
   103d6:	60f8      	str	r0, [r7, #12]
   103d8:	60b9      	str	r1, [r7, #8]
   103da:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   103dc:	2301      	movs	r3, #1
   103de:	687a      	ldr	r2, [r7, #4]
   103e0:	68b9      	ldr	r1, [r7, #8]
   103e2:	68f8      	ldr	r0, [r7, #12]
   103e4:	4c03      	ldr	r4, [pc, #12]	; (103f4 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
   103e6:	47a0      	blx	r4
   103e8:	6178      	str	r0, [r7, #20]
		return status;
   103ea:	697b      	ldr	r3, [r7, #20]
}
   103ec:	4618      	mov	r0, r3
   103ee:	371c      	adds	r7, #28
   103f0:	46bd      	mov	sp, r7
   103f2:	bd90      	pop	{r4, r7, pc}
   103f4:	00010331 	.word	0x00010331

000103f8 <_ZN11Timer_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	Timer_Class::Remove_task(void){
   103f8:	b580      	push	{r7, lr}
   103fa:	b082      	sub	sp, #8
   103fc:	af00      	add	r7, sp, #0
   103fe:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
   10400:	687b      	ldr	r3, [r7, #4]
   10402:	68da      	ldr	r2, [r3, #12]
   10404:	687b      	ldr	r3, [r7, #4]
   10406:	699b      	ldr	r3, [r3, #24]
   10408:	4619      	mov	r1, r3
   1040a:	4610      	mov	r0, r2
   1040c:	4b04      	ldr	r3, [pc, #16]	; (10420 <_ZN11Timer_Class11Remove_taskEv+0x28>)
   1040e:	4798      	blx	r3
	task->cb=NULL;
   10410:	687b      	ldr	r3, [r7, #4]
   10412:	699b      	ldr	r3, [r3, #24]
   10414:	2200      	movs	r2, #0
   10416:	60da      	str	r2, [r3, #12]
}
   10418:	bf00      	nop
   1041a:	3708      	adds	r7, #8
   1041c:	46bd      	mov	sp, r7
   1041e:	bd80      	pop	{r7, pc}
   10420:	000040c1 	.word	0x000040c1

00010424 <_ZN11Timer_Class11Remove_taskEPFvvE>:

void	Timer_Class::Remove_task(FUNC_PTR func){
   10424:	b580      	push	{r7, lr}
   10426:	b082      	sub	sp, #8
   10428:	af00      	add	r7, sp, #0
   1042a:	6078      	str	r0, [r7, #4]
   1042c:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   1042e:	6839      	ldr	r1, [r7, #0]
   10430:	6878      	ldr	r0, [r7, #4]
   10432:	4b0f      	ldr	r3, [pc, #60]	; (10470 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
   10434:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   10436:	687b      	ldr	r3, [r7, #4]
   10438:	68db      	ldr	r3, [r3, #12]
   1043a:	f103 0218 	add.w	r2, r3, #24
   1043e:	687b      	ldr	r3, [r7, #4]
   10440:	699b      	ldr	r3, [r3, #24]
   10442:	4619      	mov	r1, r3
   10444:	4610      	mov	r0, r2
   10446:	4b0b      	ldr	r3, [pc, #44]	; (10474 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
   10448:	4798      	blx	r3
   1044a:	4603      	mov	r3, r0
   1044c:	2b00      	cmp	r3, #0
   1044e:	d007      	beq.n	10460 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   10450:	687b      	ldr	r3, [r7, #4]
   10452:	68da      	ldr	r2, [r3, #12]
   10454:	687b      	ldr	r3, [r7, #4]
   10456:	699b      	ldr	r3, [r3, #24]
   10458:	4619      	mov	r1, r3
   1045a:	4610      	mov	r0, r2
   1045c:	4b06      	ldr	r3, [pc, #24]	; (10478 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
   1045e:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   10460:	687b      	ldr	r3, [r7, #4]
   10462:	699b      	ldr	r3, [r3, #24]
   10464:	2200      	movs	r2, #0
   10466:	60da      	str	r2, [r3, #12]
}
   10468:	bf00      	nop
   1046a:	3708      	adds	r7, #8
   1046c:	46bd      	mov	sp, r7
   1046e:	bd80      	pop	{r7, pc}
   10470:	000105b9 	.word	0x000105b9
   10474:	00004ca9 	.word	0x00004ca9
   10478:	000040c1 	.word	0x000040c1

0001047c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   1047c:	b590      	push	{r4, r7, lr}
   1047e:	b087      	sub	sp, #28
   10480:	af00      	add	r7, sp, #0
   10482:	60f8      	str	r0, [r7, #12]
   10484:	60b9      	str	r1, [r7, #8]
   10486:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   10488:	2300      	movs	r3, #0
   1048a:	687a      	ldr	r2, [r7, #4]
   1048c:	68b9      	ldr	r1, [r7, #8]
   1048e:	68f8      	ldr	r0, [r7, #12]
   10490:	4c0c      	ldr	r4, [pc, #48]	; (104c4 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
   10492:	47a0      	blx	r4
   10494:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
   10496:	68fb      	ldr	r3, [r7, #12]
   10498:	68db      	ldr	r3, [r3, #12]
   1049a:	681b      	ldr	r3, [r3, #0]
   1049c:	699b      	ldr	r3, [r3, #24]
   1049e:	68fa      	ldr	r2, [r7, #12]
   104a0:	68d2      	ldr	r2, [r2, #12]
   104a2:	3204      	adds	r2, #4
   104a4:	4610      	mov	r0, r2
   104a6:	4798      	blx	r3
   104a8:	4603      	mov	r3, r0
   104aa:	2b00      	cmp	r3, #0
   104ac:	d105      	bne.n	104ba <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
   104ae:	68fb      	ldr	r3, [r7, #12]
   104b0:	68db      	ldr	r3, [r3, #12]
   104b2:	4618      	mov	r0, r3
   104b4:	4b04      	ldr	r3, [pc, #16]	; (104c8 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
   104b6:	4798      	blx	r3
   104b8:	6178      	str	r0, [r7, #20]
	}
	
	return status;
   104ba:	697b      	ldr	r3, [r7, #20]
}
   104bc:	4618      	mov	r0, r3
   104be:	371c      	adds	r7, #28
   104c0:	46bd      	mov	sp, r7
   104c2:	bd90      	pop	{r4, r7, pc}
   104c4:	00010331 	.word	0x00010331
   104c8:	00003ee9 	.word	0x00003ee9

000104cc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
   104cc:	b480      	push	{r7}
   104ce:	b085      	sub	sp, #20
   104d0:	af00      	add	r7, sp, #0
   104d2:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   104d4:	2300      	movs	r3, #0
   104d6:	73fb      	strb	r3, [r7, #15]
   104d8:	7bfb      	ldrb	r3, [r7, #15]
   104da:	2b1f      	cmp	r3, #31
   104dc:	dc23      	bgt.n	10526 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
   104de:	687b      	ldr	r3, [r7, #4]
   104e0:	7f1a      	ldrb	r2, [r3, #28]
   104e2:	7bfb      	ldrb	r3, [r7, #15]
   104e4:	4413      	add	r3, r2
   104e6:	b2db      	uxtb	r3, r3
   104e8:	f003 031f 	and.w	r3, r3, #31
   104ec:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
   104ee:	7bba      	ldrb	r2, [r7, #14]
   104f0:	4910      	ldr	r1, [pc, #64]	; (10534 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   104f2:	4613      	mov	r3, r2
   104f4:	009b      	lsls	r3, r3, #2
   104f6:	4413      	add	r3, r2
   104f8:	009b      	lsls	r3, r3, #2
   104fa:	440b      	add	r3, r1
   104fc:	330c      	adds	r3, #12
   104fe:	681b      	ldr	r3, [r3, #0]
   10500:	2b00      	cmp	r3, #0
   10502:	d10c      	bne.n	1051e <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
   10504:	7bba      	ldrb	r2, [r7, #14]
   10506:	4613      	mov	r3, r2
   10508:	009b      	lsls	r3, r3, #2
   1050a:	4413      	add	r3, r2
   1050c:	009b      	lsls	r3, r3, #2
   1050e:	4a09      	ldr	r2, [pc, #36]	; (10534 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   10510:	441a      	add	r2, r3
   10512:	687b      	ldr	r3, [r7, #4]
   10514:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
   10516:	687b      	ldr	r3, [r7, #4]
   10518:	7bba      	ldrb	r2, [r7, #14]
   1051a:	771a      	strb	r2, [r3, #28]
			return;
   1051c:	e006      	b.n	1052c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   1051e:	7bfb      	ldrb	r3, [r7, #15]
   10520:	3301      	adds	r3, #1
   10522:	73fb      	strb	r3, [r7, #15]
   10524:	e7d8      	b.n	104d8 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
   10526:	687b      	ldr	r3, [r7, #4]
   10528:	4a02      	ldr	r2, [pc, #8]	; (10534 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   1052a:	619a      	str	r2, [r3, #24]

}
   1052c:	3714      	adds	r7, #20
   1052e:	46bd      	mov	sp, r7
   10530:	bc80      	pop	{r7}
   10532:	4770      	bx	lr
   10534:	20003058 	.word	0x20003058

00010538 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
   10538:	b580      	push	{r7, lr}
   1053a:	b084      	sub	sp, #16
   1053c:	af00      	add	r7, sp, #0
   1053e:	6078      	str	r0, [r7, #4]
   10540:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   10542:	2300      	movs	r3, #0
   10544:	73fb      	strb	r3, [r7, #15]
   10546:	7bfb      	ldrb	r3, [r7, #15]
   10548:	2b1f      	cmp	r3, #31
   1054a:	dc28      	bgt.n	1059e <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
   1054c:	687b      	ldr	r3, [r7, #4]
   1054e:	7f1a      	ldrb	r2, [r3, #28]
   10550:	7bfb      	ldrb	r3, [r7, #15]
   10552:	4413      	add	r3, r2
   10554:	b2db      	uxtb	r3, r3
   10556:	f003 031f 	and.w	r3, r3, #31
   1055a:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
   1055c:	7bba      	ldrb	r2, [r7, #14]
   1055e:	4913      	ldr	r1, [pc, #76]	; (105ac <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
   10560:	4613      	mov	r3, r2
   10562:	009b      	lsls	r3, r3, #2
   10564:	4413      	add	r3, r2
   10566:	009b      	lsls	r3, r3, #2
   10568:	440b      	add	r3, r1
   1056a:	330c      	adds	r3, #12
   1056c:	681a      	ldr	r2, [r3, #0]
   1056e:	683b      	ldr	r3, [r7, #0]
   10570:	429a      	cmp	r2, r3
   10572:	d110      	bne.n	10596 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
   10574:	6839      	ldr	r1, [r7, #0]
   10576:	6878      	ldr	r0, [r7, #4]
   10578:	4b0d      	ldr	r3, [pc, #52]	; (105b0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
   1057a:	4798      	blx	r3
			task=&taskArray[j];
   1057c:	7bba      	ldrb	r2, [r7, #14]
   1057e:	4613      	mov	r3, r2
   10580:	009b      	lsls	r3, r3, #2
   10582:	4413      	add	r3, r2
   10584:	009b      	lsls	r3, r3, #2
   10586:	4a09      	ldr	r2, [pc, #36]	; (105ac <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
   10588:	441a      	add	r2, r3
   1058a:	687b      	ldr	r3, [r7, #4]
   1058c:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
   1058e:	687b      	ldr	r3, [r7, #4]
   10590:	7bba      	ldrb	r2, [r7, #14]
   10592:	771a      	strb	r2, [r3, #28]
			return;
   10594:	e006      	b.n	105a4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   10596:	7bfb      	ldrb	r3, [r7, #15]
   10598:	3301      	adds	r3, #1
   1059a:	73fb      	strb	r3, [r7, #15]
   1059c:	e7d3      	b.n	10546 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
   1059e:	6878      	ldr	r0, [r7, #4]
   105a0:	4b04      	ldr	r3, [pc, #16]	; (105b4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
   105a2:	4798      	blx	r3
	//task=&taskArray[0];

}
   105a4:	3710      	adds	r7, #16
   105a6:	46bd      	mov	sp, r7
   105a8:	bd80      	pop	{r7, pc}
   105aa:	bf00      	nop
   105ac:	20003058 	.word	0x20003058
   105b0:	00010425 	.word	0x00010425
   105b4:	000104cd 	.word	0x000104cd

000105b8 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
   105b8:	b480      	push	{r7}
   105ba:	b085      	sub	sp, #20
   105bc:	af00      	add	r7, sp, #0
   105be:	6078      	str	r0, [r7, #4]
   105c0:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   105c2:	2300      	movs	r3, #0
   105c4:	73fb      	strb	r3, [r7, #15]
   105c6:	7bfb      	ldrb	r3, [r7, #15]
   105c8:	2b1f      	cmp	r3, #31
   105ca:	dc19      	bgt.n	10600 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   105cc:	7bfa      	ldrb	r2, [r7, #15]
   105ce:	490f      	ldr	r1, [pc, #60]	; (1060c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   105d0:	4613      	mov	r3, r2
   105d2:	009b      	lsls	r3, r3, #2
   105d4:	4413      	add	r3, r2
   105d6:	009b      	lsls	r3, r3, #2
   105d8:	440b      	add	r3, r1
   105da:	330c      	adds	r3, #12
   105dc:	681a      	ldr	r2, [r3, #0]
   105de:	683b      	ldr	r3, [r7, #0]
   105e0:	429a      	cmp	r2, r3
   105e2:	d109      	bne.n	105f8 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   105e4:	7bfa      	ldrb	r2, [r7, #15]
   105e6:	4613      	mov	r3, r2
   105e8:	009b      	lsls	r3, r3, #2
   105ea:	4413      	add	r3, r2
   105ec:	009b      	lsls	r3, r3, #2
   105ee:	4a07      	ldr	r2, [pc, #28]	; (1060c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   105f0:	441a      	add	r2, r3
   105f2:	687b      	ldr	r3, [r7, #4]
   105f4:	619a      	str	r2, [r3, #24]
			return;
   105f6:	e004      	b.n	10602 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   105f8:	7bfb      	ldrb	r3, [r7, #15]
   105fa:	3301      	adds	r3, #1
   105fc:	73fb      	strb	r3, [r7, #15]
   105fe:	e7e2      	b.n	105c6 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
   10600:	bf00      	nop
}
   10602:	3714      	adds	r7, #20
   10604:	46bd      	mov	sp, r7
   10606:	bc80      	pop	{r7}
   10608:	4770      	bx	lr
   1060a:	bf00      	nop
   1060c:	20003058 	.word	0x20003058

00010610 <_Z41__static_initialization_and_destruction_0ii>:
   10610:	b580      	push	{r7, lr}
   10612:	b082      	sub	sp, #8
   10614:	af00      	add	r7, sp, #0
   10616:	6078      	str	r0, [r7, #4]
   10618:	6039      	str	r1, [r7, #0]
   1061a:	687b      	ldr	r3, [r7, #4]
   1061c:	2b01      	cmp	r3, #1
   1061e:	d14c      	bne.n	106ba <_Z41__static_initialization_and_destruction_0ii+0xaa>
   10620:	683b      	ldr	r3, [r7, #0]
   10622:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10626:	4293      	cmp	r3, r2
   10628:	d147      	bne.n	106ba <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   1062a:	4926      	ldr	r1, [pc, #152]	; (106c4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   1062c:	4826      	ldr	r0, [pc, #152]	; (106c8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   1062e:	4b27      	ldr	r3, [pc, #156]	; (106cc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   10630:	4798      	blx	r3
   10632:	4a27      	ldr	r2, [pc, #156]	; (106d0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   10634:	4927      	ldr	r1, [pc, #156]	; (106d4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   10636:	4824      	ldr	r0, [pc, #144]	; (106c8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   10638:	4b27      	ldr	r3, [pc, #156]	; (106d8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1063a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   1063c:	4927      	ldr	r1, [pc, #156]	; (106dc <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   1063e:	4828      	ldr	r0, [pc, #160]	; (106e0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10640:	4b22      	ldr	r3, [pc, #136]	; (106cc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   10642:	4798      	blx	r3
   10644:	4a22      	ldr	r2, [pc, #136]	; (106d0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   10646:	4923      	ldr	r1, [pc, #140]	; (106d4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   10648:	4825      	ldr	r0, [pc, #148]	; (106e0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   1064a:	4b23      	ldr	r3, [pc, #140]	; (106d8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1064c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   1064e:	4925      	ldr	r1, [pc, #148]	; (106e4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10650:	4825      	ldr	r0, [pc, #148]	; (106e8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10652:	4b1e      	ldr	r3, [pc, #120]	; (106cc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   10654:	4798      	blx	r3
   10656:	4a1e      	ldr	r2, [pc, #120]	; (106d0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   10658:	491e      	ldr	r1, [pc, #120]	; (106d4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1065a:	4823      	ldr	r0, [pc, #140]	; (106e8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   1065c:	4b1e      	ldr	r3, [pc, #120]	; (106d8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1065e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   10660:	4922      	ldr	r1, [pc, #136]	; (106ec <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   10662:	4823      	ldr	r0, [pc, #140]	; (106f0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   10664:	4b19      	ldr	r3, [pc, #100]	; (106cc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   10666:	4798      	blx	r3
   10668:	4a19      	ldr	r2, [pc, #100]	; (106d0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1066a:	491a      	ldr	r1, [pc, #104]	; (106d4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1066c:	4820      	ldr	r0, [pc, #128]	; (106f0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   1066e:	4b1a      	ldr	r3, [pc, #104]	; (106d8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   10670:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   10672:	4920      	ldr	r1, [pc, #128]	; (106f4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   10674:	4820      	ldr	r0, [pc, #128]	; (106f8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   10676:	4b15      	ldr	r3, [pc, #84]	; (106cc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   10678:	4798      	blx	r3
   1067a:	4a15      	ldr	r2, [pc, #84]	; (106d0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1067c:	4915      	ldr	r1, [pc, #84]	; (106d4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1067e:	481e      	ldr	r0, [pc, #120]	; (106f8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   10680:	4b15      	ldr	r3, [pc, #84]	; (106d8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   10682:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   10684:	491d      	ldr	r1, [pc, #116]	; (106fc <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10686:	481e      	ldr	r0, [pc, #120]	; (10700 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10688:	4b10      	ldr	r3, [pc, #64]	; (106cc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1068a:	4798      	blx	r3
   1068c:	4a10      	ldr	r2, [pc, #64]	; (106d0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1068e:	4911      	ldr	r1, [pc, #68]	; (106d4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   10690:	481b      	ldr	r0, [pc, #108]	; (10700 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10692:	4b11      	ldr	r3, [pc, #68]	; (106d8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   10694:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   10696:	491b      	ldr	r1, [pc, #108]	; (10704 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   10698:	481b      	ldr	r0, [pc, #108]	; (10708 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   1069a:	4b0c      	ldr	r3, [pc, #48]	; (106cc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1069c:	4798      	blx	r3
   1069e:	4a0c      	ldr	r2, [pc, #48]	; (106d0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   106a0:	490c      	ldr	r1, [pc, #48]	; (106d4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   106a2:	4819      	ldr	r0, [pc, #100]	; (10708 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   106a4:	4b0c      	ldr	r3, [pc, #48]	; (106d8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   106a6:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   106a8:	4918      	ldr	r1, [pc, #96]	; (1070c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   106aa:	4819      	ldr	r0, [pc, #100]	; (10710 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   106ac:	4b07      	ldr	r3, [pc, #28]	; (106cc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   106ae:	4798      	blx	r3
   106b0:	4a07      	ldr	r2, [pc, #28]	; (106d0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   106b2:	4908      	ldr	r1, [pc, #32]	; (106d4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   106b4:	4816      	ldr	r0, [pc, #88]	; (10710 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   106b6:	4b08      	ldr	r3, [pc, #32]	; (106d8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   106b8:	4798      	blx	r3
   106ba:	bf00      	nop
   106bc:	3708      	adds	r7, #8
   106be:	46bd      	mov	sp, r7
   106c0:	bd80      	pop	{r7, pc}
   106c2:	bf00      	nop
   106c4:	2000dec8 	.word	0x2000dec8
   106c8:	20002f54 	.word	0x20002f54
   106cc:	000101a9 	.word	0x000101a9
   106d0:	20000000 	.word	0x20000000
   106d4:	000101e1 	.word	0x000101e1
   106d8:	0001a0b5 	.word	0x0001a0b5
   106dc:	2000df5c 	.word	0x2000df5c
   106e0:	20002f74 	.word	0x20002f74
   106e4:	2000e080 	.word	0x2000e080
   106e8:	20002f94 	.word	0x20002f94
   106ec:	2000df7c 	.word	0x2000df7c
   106f0:	20002fb4 	.word	0x20002fb4
   106f4:	2000e040 	.word	0x2000e040
   106f8:	20002fd4 	.word	0x20002fd4
   106fc:	2000e060 	.word	0x2000e060
   10700:	20002ff4 	.word	0x20002ff4
   10704:	2000df38 	.word	0x2000df38
   10708:	20003014 	.word	0x20003014
   1070c:	2000dfd8 	.word	0x2000dfd8
   10710:	20003034 	.word	0x20003034

00010714 <_GLOBAL__sub_I_ptrTimerClass>:
   10714:	b580      	push	{r7, lr}
   10716:	af00      	add	r7, sp, #0
   10718:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1071c:	2001      	movs	r0, #1
   1071e:	4b01      	ldr	r3, [pc, #4]	; (10724 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   10720:	4798      	blx	r3
   10722:	bd80      	pop	{r7, pc}
   10724:	00010611 	.word	0x00010611

00010728 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   10728:	b480      	push	{r7}
   1072a:	b083      	sub	sp, #12
   1072c:	af00      	add	r7, sp, #0
   1072e:	6078      	str	r0, [r7, #4]
   10730:	4a05      	ldr	r2, [pc, #20]	; (10748 <_ZN5PrintC1Ev+0x20>)
   10732:	687b      	ldr	r3, [r7, #4]
   10734:	601a      	str	r2, [r3, #0]
   10736:	687b      	ldr	r3, [r7, #4]
   10738:	2200      	movs	r2, #0
   1073a:	605a      	str	r2, [r3, #4]
   1073c:	687b      	ldr	r3, [r7, #4]
   1073e:	4618      	mov	r0, r3
   10740:	370c      	adds	r7, #12
   10742:	46bd      	mov	sp, r7
   10744:	bc80      	pop	{r7}
   10746:	4770      	bx	lr
   10748:	0001b024 	.word	0x0001b024

0001074c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   1074c:	b480      	push	{r7}
   1074e:	b083      	sub	sp, #12
   10750:	af00      	add	r7, sp, #0
   10752:	6078      	str	r0, [r7, #4]
   10754:	2300      	movs	r3, #0
   10756:	4618      	mov	r0, r3
   10758:	370c      	adds	r7, #12
   1075a:	46bd      	mov	sp, r7
   1075c:	bc80      	pop	{r7}
   1075e:	4770      	bx	lr

00010760 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   10760:	b480      	push	{r7}
   10762:	b083      	sub	sp, #12
   10764:	af00      	add	r7, sp, #0
   10766:	6078      	str	r0, [r7, #4]
   10768:	bf00      	nop
   1076a:	370c      	adds	r7, #12
   1076c:	46bd      	mov	sp, r7
   1076e:	bc80      	pop	{r7}
   10770:	4770      	bx	lr
	...

00010774 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
   10774:	b580      	push	{r7, lr}
   10776:	b082      	sub	sp, #8
   10778:	af00      	add	r7, sp, #0
   1077a:	6078      	str	r0, [r7, #4]
   1077c:	687b      	ldr	r3, [r7, #4]
   1077e:	4618      	mov	r0, r3
   10780:	4b06      	ldr	r3, [pc, #24]	; (1079c <_ZN6StreamC1Ev+0x28>)
   10782:	4798      	blx	r3
   10784:	4a06      	ldr	r2, [pc, #24]	; (107a0 <_ZN6StreamC1Ev+0x2c>)
   10786:	687b      	ldr	r3, [r7, #4]
   10788:	601a      	str	r2, [r3, #0]
   1078a:	687b      	ldr	r3, [r7, #4]
   1078c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10790:	609a      	str	r2, [r3, #8]
   10792:	687b      	ldr	r3, [r7, #4]
   10794:	4618      	mov	r0, r3
   10796:	3708      	adds	r7, #8
   10798:	46bd      	mov	sp, r7
   1079a:	bd80      	pop	{r7, pc}
   1079c:	00010729 	.word	0x00010729
   107a0:	0001afe8 	.word	0x0001afe8

000107a4 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
   107a4:	b480      	push	{r7}
   107a6:	b083      	sub	sp, #12
   107a8:	af00      	add	r7, sp, #0
   107aa:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
   107ac:	4b06      	ldr	r3, [pc, #24]	; (107c8 <_ZL10USBTimeoutPK10timer_task+0x24>)
   107ae:	681b      	ldr	r3, [r3, #0]
   107b0:	2201      	movs	r2, #1
   107b2:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
   107b4:	4b04      	ldr	r3, [pc, #16]	; (107c8 <_ZL10USBTimeoutPK10timer_task+0x24>)
   107b6:	681b      	ldr	r3, [r3, #0]
   107b8:	2200      	movs	r2, #0
   107ba:	741a      	strb	r2, [r3, #16]
	
}
   107bc:	bf00      	nop
   107be:	370c      	adds	r7, #12
   107c0:	46bd      	mov	sp, r7
   107c2:	bc80      	pop	{r7}
   107c4:	4770      	bx	lr
   107c6:	bf00      	nop
   107c8:	2000345c 	.word	0x2000345c

000107cc <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   107cc:	b480      	push	{r7}
   107ce:	b083      	sub	sp, #12
   107d0:	af00      	add	r7, sp, #0
   107d2:	4603      	mov	r3, r0
   107d4:	603a      	str	r2, [r7, #0]
   107d6:	71fb      	strb	r3, [r7, #7]
   107d8:	460b      	mov	r3, r1
   107da:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
   107dc:	4b08      	ldr	r3, [pc, #32]	; (10800 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   107de:	681b      	ldr	r3, [r3, #0]
   107e0:	2201      	movs	r2, #1
   107e2:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
   107e4:	4b06      	ldr	r3, [pc, #24]	; (10800 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   107e6:	681b      	ldr	r3, [r3, #0]
   107e8:	2201      	movs	r2, #1
   107ea:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   107ec:	4b04      	ldr	r3, [pc, #16]	; (10800 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   107ee:	681b      	ldr	r3, [r3, #0]
   107f0:	2201      	movs	r2, #1
   107f2:	741a      	strb	r2, [r3, #16]


	return false;
   107f4:	2300      	movs	r3, #0
}
   107f6:	4618      	mov	r0, r3
   107f8:	370c      	adds	r7, #12
   107fa:	46bd      	mov	sp, r7
   107fc:	bc80      	pop	{r7}
   107fe:	4770      	bx	lr
   10800:	2000345c 	.word	0x2000345c

00010804 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   10804:	b480      	push	{r7}
   10806:	b083      	sub	sp, #12
   10808:	af00      	add	r7, sp, #0
   1080a:	4603      	mov	r3, r0
   1080c:	603a      	str	r2, [r7, #0]
   1080e:	71fb      	strb	r3, [r7, #7]
   10810:	460b      	mov	r3, r1
   10812:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
   10814:	4b08      	ldr	r3, [pc, #32]	; (10838 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   10816:	681b      	ldr	r3, [r3, #0]
   10818:	2201      	movs	r2, #1
   1081a:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
   1081c:	4b06      	ldr	r3, [pc, #24]	; (10838 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   1081e:	681b      	ldr	r3, [r3, #0]
   10820:	2201      	movs	r2, #1
   10822:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   10824:	4b04      	ldr	r3, [pc, #16]	; (10838 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   10826:	681b      	ldr	r3, [r3, #0]
   10828:	2201      	movs	r2, #1
   1082a:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
   1082c:	2300      	movs	r3, #0
}
   1082e:	4618      	mov	r0, r3
   10830:	370c      	adds	r7, #12
   10832:	46bd      	mov	sp, r7
   10834:	bc80      	pop	{r7}
   10836:	4770      	bx	lr
   10838:	2000345c 	.word	0x2000345c

0001083c <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
   1083c:	b580      	push	{r7, lr}
   1083e:	b082      	sub	sp, #8
   10840:	af00      	add	r7, sp, #0
   10842:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
   10844:	793b      	ldrb	r3, [r7, #4]
   10846:	f003 0301 	and.w	r3, r3, #1
   1084a:	b2db      	uxtb	r3, r3
   1084c:	2b00      	cmp	r3, #0
   1084e:	d013      	beq.n	10878 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
   10850:	490c      	ldr	r1, [pc, #48]	; (10884 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
   10852:	2000      	movs	r0, #0
   10854:	4b0c      	ldr	r3, [pc, #48]	; (10888 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   10856:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
   10858:	490c      	ldr	r1, [pc, #48]	; (1088c <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
   1085a:	2001      	movs	r0, #1
   1085c:	4b0a      	ldr	r3, [pc, #40]	; (10888 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   1085e:	4798      	blx	r3
		ptrCDCClass->txReady=true;
   10860:	4b0b      	ldr	r3, [pc, #44]	; (10890 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   10862:	681b      	ldr	r3, [r3, #0]
   10864:	2201      	movs	r2, #1
   10866:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
   10868:	4b09      	ldr	r3, [pc, #36]	; (10890 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   1086a:	681b      	ldr	r3, [r3, #0]
   1086c:	2201      	movs	r2, #1
   1086e:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
   10870:	4b07      	ldr	r3, [pc, #28]	; (10890 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   10872:	681b      	ldr	r3, [r3, #0]
   10874:	2201      	movs	r2, #1
   10876:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
   10878:	2300      	movs	r3, #0
}
   1087a:	4618      	mov	r0, r3
   1087c:	3708      	adds	r7, #8
   1087e:	46bd      	mov	sp, r7
   10880:	bd80      	pop	{r7, pc}
   10882:	bf00      	nop
   10884:	000107cd 	.word	0x000107cd
   10888:	0000df35 	.word	0x0000df35
   1088c:	00010805 	.word	0x00010805
   10890:	2000345c 	.word	0x2000345c

00010894 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
   10894:	b580      	push	{r7, lr}
   10896:	b082      	sub	sp, #8
   10898:	af00      	add	r7, sp, #0
   1089a:	6078      	str	r0, [r7, #4]
   1089c:	687b      	ldr	r3, [r7, #4]
   1089e:	4618      	mov	r0, r3
   108a0:	4b0a      	ldr	r3, [pc, #40]	; (108cc <_ZN9CDC_ClassC1Ev+0x38>)
   108a2:	4798      	blx	r3
   108a4:	687b      	ldr	r3, [r7, #4]
   108a6:	3310      	adds	r3, #16
   108a8:	4618      	mov	r0, r3
   108aa:	4b09      	ldr	r3, [pc, #36]	; (108d0 <_ZN9CDC_ClassC1Ev+0x3c>)
   108ac:	4798      	blx	r3
   108ae:	4a09      	ldr	r2, [pc, #36]	; (108d4 <_ZN9CDC_ClassC1Ev+0x40>)
   108b0:	687b      	ldr	r3, [r7, #4]
   108b2:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
   108b4:	687b      	ldr	r3, [r7, #4]
   108b6:	f04f 32ff 	mov.w	r2, #4294967295
   108ba:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
   108bc:	4a06      	ldr	r2, [pc, #24]	; (108d8 <_ZN9CDC_ClassC1Ev+0x44>)
   108be:	687b      	ldr	r3, [r7, #4]
   108c0:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
   108c2:	687b      	ldr	r3, [r7, #4]
   108c4:	4618      	mov	r0, r3
   108c6:	3708      	adds	r7, #8
   108c8:	46bd      	mov	sp, r7
   108ca:	bd80      	pop	{r7, pc}
   108cc:	00010775 	.word	0x00010775
   108d0:	00010fb1 	.word	0x00010fb1
   108d4:	0001afb8 	.word	0x0001afb8
   108d8:	2000345c 	.word	0x2000345c

000108dc <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
   108dc:	b580      	push	{r7, lr}
   108de:	b082      	sub	sp, #8
   108e0:	af00      	add	r7, sp, #0
   108e2:	6078      	str	r0, [r7, #4]
   108e4:	4a06      	ldr	r2, [pc, #24]	; (10900 <_ZN9CDC_ClassD1Ev+0x24>)
   108e6:	687b      	ldr	r3, [r7, #4]
   108e8:	601a      	str	r2, [r3, #0]
   108ea:	687b      	ldr	r3, [r7, #4]
   108ec:	3310      	adds	r3, #16
   108ee:	4618      	mov	r0, r3
   108f0:	4b04      	ldr	r3, [pc, #16]	; (10904 <_ZN9CDC_ClassD1Ev+0x28>)
   108f2:	4798      	blx	r3
{
} //~CDC_Class
   108f4:	687b      	ldr	r3, [r7, #4]
   108f6:	4618      	mov	r0, r3
   108f8:	3708      	adds	r7, #8
   108fa:	46bd      	mov	sp, r7
   108fc:	bd80      	pop	{r7, pc}
   108fe:	bf00      	nop
   10900:	0001afb8 	.word	0x0001afb8
   10904:	00010fd1 	.word	0x00010fd1

00010908 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
   10908:	b580      	push	{r7, lr}
   1090a:	b082      	sub	sp, #8
   1090c:	af00      	add	r7, sp, #0
   1090e:	6078      	str	r0, [r7, #4]
	
	OnInit();
   10910:	687b      	ldr	r3, [r7, #4]
   10912:	3310      	adds	r3, #16
   10914:	4618      	mov	r0, r3
   10916:	4b09      	ldr	r3, [pc, #36]	; (1093c <_ZN9CDC_Class4InitEv+0x34>)
   10918:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
   1091a:	4909      	ldr	r1, [pc, #36]	; (10940 <_ZN9CDC_Class4InitEv+0x38>)
   1091c:	2003      	movs	r0, #3
   1091e:	4b09      	ldr	r3, [pc, #36]	; (10944 <_ZN9CDC_Class4InitEv+0x3c>)
   10920:	4798      	blx	r3
	delay_ms(100);
   10922:	2064      	movs	r0, #100	; 0x64
   10924:	4b08      	ldr	r3, [pc, #32]	; (10948 <_ZN9CDC_Class4InitEv+0x40>)
   10926:	4798      	blx	r3
		
	if (connected)
   10928:	687b      	ldr	r3, [r7, #4]
   1092a:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
   1092c:	2064      	movs	r0, #100	; 0x64
   1092e:	4b06      	ldr	r3, [pc, #24]	; (10948 <_ZN9CDC_Class4InitEv+0x40>)
   10930:	4798      	blx	r3

	

}
   10932:	bf00      	nop
   10934:	3708      	adds	r7, #8
   10936:	46bd      	mov	sp, r7
   10938:	bd80      	pop	{r7, pc}
   1093a:	bf00      	nop
   1093c:	00010fe5 	.word	0x00010fe5
   10940:	0001083d 	.word	0x0001083d
   10944:	0000df35 	.word	0x0000df35
   10948:	00003625 	.word	0x00003625

0001094c <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
   1094c:	b580      	push	{r7, lr}
   1094e:	b082      	sub	sp, #8
   10950:	af00      	add	r7, sp, #0
   10952:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
   10954:	4b03      	ldr	r3, [pc, #12]	; (10964 <_ZN9CDC_Class9IsEnabledEv+0x18>)
   10956:	4798      	blx	r3
   10958:	4603      	mov	r3, r0
	
}
   1095a:	4618      	mov	r0, r3
   1095c:	3708      	adds	r7, #8
   1095e:	46bd      	mov	sp, r7
   10960:	bd80      	pop	{r7, pc}
   10962:	bf00      	nop
   10964:	0000dfad 	.word	0x0000dfad

00010968 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
   10968:	b580      	push	{r7, lr}
   1096a:	b084      	sub	sp, #16
   1096c:	af00      	add	r7, sp, #0
   1096e:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
   10970:	687b      	ldr	r3, [r7, #4]
   10972:	699b      	ldr	r3, [r3, #24]
   10974:	f1b3 3fff 	cmp.w	r3, #4294967295
   10978:	bf14      	ite	ne
   1097a:	2301      	movne	r3, #1
   1097c:	2300      	moveq	r3, #0
   1097e:	b2db      	uxtb	r3, r3
   10980:	2b00      	cmp	r3, #0
   10982:	d002      	beq.n	1098a <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
   10984:	687b      	ldr	r3, [r7, #4]
   10986:	699b      	ldr	r3, [r3, #24]
   10988:	e011      	b.n	109ae <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
   1098a:	687b      	ldr	r3, [r7, #4]
   1098c:	681b      	ldr	r3, [r3, #0]
   1098e:	331c      	adds	r3, #28
   10990:	681b      	ldr	r3, [r3, #0]
   10992:	f107 010f 	add.w	r1, r7, #15
   10996:	2201      	movs	r2, #1
   10998:	6878      	ldr	r0, [r7, #4]
   1099a:	4798      	blx	r3
   1099c:	4602      	mov	r2, r0
   1099e:	687b      	ldr	r3, [r7, #4]
   109a0:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
   109a2:	7bfb      	ldrb	r3, [r7, #15]
   109a4:	461a      	mov	r2, r3
   109a6:	687b      	ldr	r3, [r7, #4]
   109a8:	619a      	str	r2, [r3, #24]
	return _serialPeek;
   109aa:	687b      	ldr	r3, [r7, #4]
   109ac:	699b      	ldr	r3, [r3, #24]
}
   109ae:	4618      	mov	r0, r3
   109b0:	3710      	adds	r7, #16
   109b2:	46bd      	mov	sp, r7
   109b4:	bd80      	pop	{r7, pc}
	...

000109b8 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
   109b8:	b580      	push	{r7, lr}
   109ba:	b086      	sub	sp, #24
   109bc:	af00      	add	r7, sp, #0
   109be:	60f8      	str	r0, [r7, #12]
   109c0:	60b9      	str	r1, [r7, #8]
   109c2:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
   109c4:	68fb      	ldr	r3, [r7, #12]
   109c6:	7c1b      	ldrb	r3, [r3, #16]
   109c8:	b2db      	uxtb	r3, r3
   109ca:	2b00      	cmp	r3, #0
   109cc:	d02e      	beq.n	10a2c <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   109ce:	687a      	ldr	r2, [r7, #4]
   109d0:	4613      	mov	r3, r2
   109d2:	009b      	lsls	r3, r3, #2
   109d4:	4413      	add	r3, r2
   109d6:	005b      	lsls	r3, r3, #1
   109d8:	461a      	mov	r2, r3
   109da:	4918      	ldr	r1, [pc, #96]	; (10a3c <_ZN9CDC_Class8readDataEPvl+0x84>)
   109dc:	4818      	ldr	r0, [pc, #96]	; (10a40 <_ZN9CDC_Class8readDataEPvl+0x88>)
   109de:	4b19      	ldr	r3, [pc, #100]	; (10a44 <_ZN9CDC_Class8readDataEPvl+0x8c>)
   109e0:	4798      	blx	r3
		rxReady=false;
   109e2:	68fb      	ldr	r3, [r7, #12]
   109e4:	2200      	movs	r2, #0
   109e6:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
   109e8:	687b      	ldr	r3, [r7, #4]
   109ea:	4619      	mov	r1, r3
   109ec:	68b8      	ldr	r0, [r7, #8]
   109ee:	4b16      	ldr	r3, [pc, #88]	; (10a48 <_ZN9CDC_Class8readDataEPvl+0x90>)
   109f0:	4798      	blx	r3
   109f2:	4603      	mov	r3, r0
   109f4:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
   109f6:	68fb      	ldr	r3, [r7, #12]
   109f8:	7d5b      	ldrb	r3, [r3, #21]
   109fa:	b2db      	uxtb	r3, r3
   109fc:	f083 0301 	eor.w	r3, r3, #1
   10a00:	b2db      	uxtb	r3, r3
   10a02:	2b00      	cmp	r3, #0
   10a04:	d006      	beq.n	10a14 <_ZN9CDC_Class8readDataEPvl+0x5c>
   10a06:	68fb      	ldr	r3, [r7, #12]
   10a08:	7c1b      	ldrb	r3, [r3, #16]
   10a0a:	b2db      	uxtb	r3, r3
   10a0c:	2b00      	cmp	r3, #0
   10a0e:	d001      	beq.n	10a14 <_ZN9CDC_Class8readDataEPvl+0x5c>
   10a10:	2301      	movs	r3, #1
   10a12:	e000      	b.n	10a16 <_ZN9CDC_Class8readDataEPvl+0x5e>
   10a14:	2300      	movs	r3, #0
   10a16:	2b00      	cmp	r3, #0
   10a18:	d000      	beq.n	10a1c <_ZN9CDC_Class8readDataEPvl+0x64>
   10a1a:	e7ec      	b.n	109f6 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
   10a1c:	4808      	ldr	r0, [pc, #32]	; (10a40 <_ZN9CDC_Class8readDataEPvl+0x88>)
   10a1e:	4b0b      	ldr	r3, [pc, #44]	; (10a4c <_ZN9CDC_Class8readDataEPvl+0x94>)
   10a20:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   10a22:	4906      	ldr	r1, [pc, #24]	; (10a3c <_ZN9CDC_Class8readDataEPvl+0x84>)
   10a24:	4806      	ldr	r0, [pc, #24]	; (10a40 <_ZN9CDC_Class8readDataEPvl+0x88>)
   10a26:	4b0a      	ldr	r3, [pc, #40]	; (10a50 <_ZN9CDC_Class8readDataEPvl+0x98>)
   10a28:	4798      	blx	r3
   10a2a:	e001      	b.n	10a30 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
   10a2c:	2300      	movs	r3, #0
   10a2e:	75fb      	strb	r3, [r7, #23]
	}

	return r;
   10a30:	7dfb      	ldrb	r3, [r7, #23]
}
   10a32:	4618      	mov	r0, r3
   10a34:	3718      	adds	r7, #24
   10a36:	46bd      	mov	sp, r7
   10a38:	bd80      	pop	{r7, pc}
   10a3a:	bf00      	nop
   10a3c:	000107a5 	.word	0x000107a5
   10a40:	200033fc 	.word	0x200033fc
   10a44:	0001047d 	.word	0x0001047d
   10a48:	0000de89 	.word	0x0000de89
   10a4c:	00010309 	.word	0x00010309
   10a50:	00010425 	.word	0x00010425

00010a54 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
   10a54:	b580      	push	{r7, lr}
   10a56:	b086      	sub	sp, #24
   10a58:	af00      	add	r7, sp, #0
   10a5a:	60f8      	str	r0, [r7, #12]
   10a5c:	60b9      	str	r1, [r7, #8]
   10a5e:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
   10a60:	68fb      	ldr	r3, [r7, #12]
   10a62:	2200      	movs	r2, #0
   10a64:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
   10a66:	687b      	ldr	r3, [r7, #4]
   10a68:	4619      	mov	r1, r3
   10a6a:	68b8      	ldr	r0, [r7, #8]
   10a6c:	4b04      	ldr	r3, [pc, #16]	; (10a80 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
   10a6e:	4798      	blx	r3
   10a70:	4603      	mov	r3, r0
   10a72:	617b      	str	r3, [r7, #20]
	return r;
   10a74:	697b      	ldr	r3, [r7, #20]
}
   10a76:	4618      	mov	r0, r3
   10a78:	3718      	adds	r7, #24
   10a7a:	46bd      	mov	sp, r7
   10a7c:	bd80      	pop	{r7, pc}
   10a7e:	bf00      	nop
   10a80:	0000de89 	.word	0x0000de89

00010a84 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
   10a84:	b580      	push	{r7, lr}
   10a86:	b084      	sub	sp, #16
   10a88:	af00      	add	r7, sp, #0
   10a8a:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
   10a8c:	687b      	ldr	r3, [r7, #4]
   10a8e:	2200      	movs	r2, #0
   10a90:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
   10a92:	f107 030f 	add.w	r3, r7, #15
   10a96:	2101      	movs	r1, #1
   10a98:	4618      	mov	r0, r3
   10a9a:	4b08      	ldr	r3, [pc, #32]	; (10abc <_ZN9CDC_Class4readEv+0x38>)
   10a9c:	4798      	blx	r3
	while(!rxReady);
   10a9e:	687b      	ldr	r3, [r7, #4]
   10aa0:	7d5b      	ldrb	r3, [r3, #21]
   10aa2:	b2db      	uxtb	r3, r3
   10aa4:	f083 0301 	eor.w	r3, r3, #1
   10aa8:	b2db      	uxtb	r3, r3
   10aaa:	2b00      	cmp	r3, #0
   10aac:	d000      	beq.n	10ab0 <_ZN9CDC_Class4readEv+0x2c>
   10aae:	e7f6      	b.n	10a9e <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
   10ab0:	7bfb      	ldrb	r3, [r7, #15]
}
   10ab2:	4618      	mov	r0, r3
   10ab4:	3710      	adds	r7, #16
   10ab6:	46bd      	mov	sp, r7
   10ab8:	bd80      	pop	{r7, pc}
   10aba:	bf00      	nop
   10abc:	0000de89 	.word	0x0000de89

00010ac0 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
   10ac0:	b580      	push	{r7, lr}
   10ac2:	b082      	sub	sp, #8
   10ac4:	af00      	add	r7, sp, #0
   10ac6:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
   10ac8:	687b      	ldr	r3, [r7, #4]
   10aca:	331c      	adds	r3, #28
   10acc:	2140      	movs	r1, #64	; 0x40
   10ace:	4618      	mov	r0, r3
   10ad0:	4b02      	ldr	r3, [pc, #8]	; (10adc <_ZN9CDC_Class5flushEv+0x1c>)
   10ad2:	4798      	blx	r3
}
   10ad4:	bf00      	nop
   10ad6:	3708      	adds	r7, #8
   10ad8:	46bd      	mov	sp, r7
   10ada:	bd80      	pop	{r7, pc}
   10adc:	0000decd 	.word	0x0000decd

00010ae0 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
   10ae0:	b580      	push	{r7, lr}
   10ae2:	b082      	sub	sp, #8
   10ae4:	af00      	add	r7, sp, #0
   10ae6:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
   10ae8:	4b02      	ldr	r3, [pc, #8]	; (10af4 <_ZN9CDC_Class5clearEv+0x14>)
   10aea:	4798      	blx	r3
}
   10aec:	bf00      	nop
   10aee:	3708      	adds	r7, #8
   10af0:	46bd      	mov	sp, r7
   10af2:	bd80      	pop	{r7, pc}
   10af4:	0000df11 	.word	0x0000df11

00010af8 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
   10af8:	b580      	push	{r7, lr}
   10afa:	b082      	sub	sp, #8
   10afc:	af00      	add	r7, sp, #0
   10afe:	6078      	str	r0, [r7, #4]
   10b00:	460b      	mov	r3, r1
   10b02:	70fb      	strb	r3, [r7, #3]
	if (connected){
   10b04:	687b      	ldr	r3, [r7, #4]
   10b06:	7c1b      	ldrb	r3, [r3, #16]
   10b08:	b2db      	uxtb	r3, r3
   10b0a:	2b00      	cmp	r3, #0
   10b0c:	d012      	beq.n	10b34 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
   10b0e:	687b      	ldr	r3, [r7, #4]
   10b10:	7d1b      	ldrb	r3, [r3, #20]
   10b12:	b2db      	uxtb	r3, r3
   10b14:	f083 0301 	eor.w	r3, r3, #1
   10b18:	b2db      	uxtb	r3, r3
   10b1a:	2b00      	cmp	r3, #0
   10b1c:	d000      	beq.n	10b20 <_ZN9CDC_Class5writeEh+0x28>
   10b1e:	e7f6      	b.n	10b0e <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
   10b20:	687b      	ldr	r3, [r7, #4]
   10b22:	681b      	ldr	r3, [r3, #0]
   10b24:	3324      	adds	r3, #36	; 0x24
   10b26:	681b      	ldr	r3, [r3, #0]
   10b28:	1cf9      	adds	r1, r7, #3
   10b2a:	2201      	movs	r2, #1
   10b2c:	6878      	ldr	r0, [r7, #4]
   10b2e:	4798      	blx	r3
   10b30:	4603      	mov	r3, r0
   10b32:	e000      	b.n	10b36 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
   10b34:	2300      	movs	r3, #0
	}
		
}
   10b36:	4618      	mov	r0, r3
   10b38:	3708      	adds	r7, #8
   10b3a:	46bd      	mov	sp, r7
   10b3c:	bd80      	pop	{r7, pc}
	...

00010b40 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
   10b40:	b580      	push	{r7, lr}
   10b42:	b086      	sub	sp, #24
   10b44:	af00      	add	r7, sp, #0
   10b46:	60f8      	str	r0, [r7, #12]
   10b48:	60b9      	str	r1, [r7, #8]
   10b4a:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
   10b4c:	68fb      	ldr	r3, [r7, #12]
   10b4e:	7c1b      	ldrb	r3, [r3, #16]
   10b50:	b2db      	uxtb	r3, r3
   10b52:	2b00      	cmp	r3, #0
   10b54:	d02f      	beq.n	10bb6 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   10b56:	687a      	ldr	r2, [r7, #4]
   10b58:	4613      	mov	r3, r2
   10b5a:	009b      	lsls	r3, r3, #2
   10b5c:	4413      	add	r3, r2
   10b5e:	005b      	lsls	r3, r3, #1
   10b60:	461a      	mov	r2, r3
   10b62:	4917      	ldr	r1, [pc, #92]	; (10bc0 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   10b64:	4817      	ldr	r0, [pc, #92]	; (10bc4 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   10b66:	4b18      	ldr	r3, [pc, #96]	; (10bc8 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
   10b68:	4798      	blx	r3
		txReady=false;
   10b6a:	68fb      	ldr	r3, [r7, #12]
   10b6c:	2200      	movs	r2, #0
   10b6e:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   10b70:	687b      	ldr	r3, [r7, #4]
   10b72:	4619      	mov	r1, r3
   10b74:	68b8      	ldr	r0, [r7, #8]
   10b76:	4b15      	ldr	r3, [pc, #84]	; (10bcc <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
   10b78:	4798      	blx	r3
   10b7a:	4603      	mov	r3, r0
   10b7c:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
   10b7e:	68fb      	ldr	r3, [r7, #12]
   10b80:	7d1b      	ldrb	r3, [r3, #20]
   10b82:	b2db      	uxtb	r3, r3
   10b84:	f083 0301 	eor.w	r3, r3, #1
   10b88:	b2db      	uxtb	r3, r3
   10b8a:	2b00      	cmp	r3, #0
   10b8c:	d006      	beq.n	10b9c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   10b8e:	68fb      	ldr	r3, [r7, #12]
   10b90:	7c1b      	ldrb	r3, [r3, #16]
   10b92:	b2db      	uxtb	r3, r3
   10b94:	2b00      	cmp	r3, #0
   10b96:	d001      	beq.n	10b9c <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   10b98:	2301      	movs	r3, #1
   10b9a:	e000      	b.n	10b9e <_ZN9CDC_Class9writeDataEPKvl+0x5e>
   10b9c:	2300      	movs	r3, #0
   10b9e:	2b00      	cmp	r3, #0
   10ba0:	d000      	beq.n	10ba4 <_ZN9CDC_Class9writeDataEPKvl+0x64>
   10ba2:	e7ec      	b.n	10b7e <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
   10ba4:	4807      	ldr	r0, [pc, #28]	; (10bc4 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   10ba6:	4b0a      	ldr	r3, [pc, #40]	; (10bd0 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
   10ba8:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   10baa:	4905      	ldr	r1, [pc, #20]	; (10bc0 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   10bac:	4805      	ldr	r0, [pc, #20]	; (10bc4 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   10bae:	4b09      	ldr	r3, [pc, #36]	; (10bd4 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
   10bb0:	4798      	blx	r3
		return r;
   10bb2:	697b      	ldr	r3, [r7, #20]
   10bb4:	e000      	b.n	10bb8 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
   10bb6:	2300      	movs	r3, #0
	}
	

}
   10bb8:	4618      	mov	r0, r3
   10bba:	3718      	adds	r7, #24
   10bbc:	46bd      	mov	sp, r7
   10bbe:	bd80      	pop	{r7, pc}
   10bc0:	000107a5 	.word	0x000107a5
   10bc4:	200033fc 	.word	0x200033fc
   10bc8:	0001047d 	.word	0x0001047d
   10bcc:	0000decd 	.word	0x0000decd
   10bd0:	00010309 	.word	0x00010309
   10bd4:	00010425 	.word	0x00010425

00010bd8 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
   10bd8:	b580      	push	{r7, lr}
   10bda:	b086      	sub	sp, #24
   10bdc:	af00      	add	r7, sp, #0
   10bde:	60f8      	str	r0, [r7, #12]
   10be0:	60b9      	str	r1, [r7, #8]
   10be2:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
   10be4:	68fb      	ldr	r3, [r7, #12]
   10be6:	2200      	movs	r2, #0
   10be8:	751a      	strb	r2, [r3, #20]

 	if (connected){
   10bea:	68fb      	ldr	r3, [r7, #12]
   10bec:	7c1b      	ldrb	r3, [r3, #16]
   10bee:	b2db      	uxtb	r3, r3
   10bf0:	2b00      	cmp	r3, #0
   10bf2:	d02a      	beq.n	10c4a <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   10bf4:	687a      	ldr	r2, [r7, #4]
   10bf6:	4613      	mov	r3, r2
   10bf8:	009b      	lsls	r3, r3, #2
   10bfa:	4413      	add	r3, r2
   10bfc:	005b      	lsls	r3, r3, #1
   10bfe:	461a      	mov	r2, r3
   10c00:	4915      	ldr	r1, [pc, #84]	; (10c58 <_ZN9CDC_Class5writeEPKhj+0x80>)
   10c02:	4816      	ldr	r0, [pc, #88]	; (10c5c <_ZN9CDC_Class5writeEPKhj+0x84>)
   10c04:	4b16      	ldr	r3, [pc, #88]	; (10c60 <_ZN9CDC_Class5writeEPKhj+0x88>)
   10c06:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   10c08:	6879      	ldr	r1, [r7, #4]
   10c0a:	68b8      	ldr	r0, [r7, #8]
   10c0c:	4b15      	ldr	r3, [pc, #84]	; (10c64 <_ZN9CDC_Class5writeEPKhj+0x8c>)
   10c0e:	4798      	blx	r3
   10c10:	4603      	mov	r3, r0
   10c12:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
   10c14:	68fb      	ldr	r3, [r7, #12]
   10c16:	7d1b      	ldrb	r3, [r3, #20]
   10c18:	b2db      	uxtb	r3, r3
   10c1a:	f083 0301 	eor.w	r3, r3, #1
   10c1e:	b2db      	uxtb	r3, r3
   10c20:	2b00      	cmp	r3, #0
   10c22:	d006      	beq.n	10c32 <_ZN9CDC_Class5writeEPKhj+0x5a>
   10c24:	68fb      	ldr	r3, [r7, #12]
   10c26:	7c1b      	ldrb	r3, [r3, #16]
   10c28:	b2db      	uxtb	r3, r3
   10c2a:	2b00      	cmp	r3, #0
   10c2c:	d001      	beq.n	10c32 <_ZN9CDC_Class5writeEPKhj+0x5a>
   10c2e:	2301      	movs	r3, #1
   10c30:	e000      	b.n	10c34 <_ZN9CDC_Class5writeEPKhj+0x5c>
   10c32:	2300      	movs	r3, #0
   10c34:	2b00      	cmp	r3, #0
   10c36:	d000      	beq.n	10c3a <_ZN9CDC_Class5writeEPKhj+0x62>
   10c38:	e7ec      	b.n	10c14 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
   10c3a:	4808      	ldr	r0, [pc, #32]	; (10c5c <_ZN9CDC_Class5writeEPKhj+0x84>)
   10c3c:	4b0a      	ldr	r3, [pc, #40]	; (10c68 <_ZN9CDC_Class5writeEPKhj+0x90>)
   10c3e:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   10c40:	4905      	ldr	r1, [pc, #20]	; (10c58 <_ZN9CDC_Class5writeEPKhj+0x80>)
   10c42:	4806      	ldr	r0, [pc, #24]	; (10c5c <_ZN9CDC_Class5writeEPKhj+0x84>)
   10c44:	4b09      	ldr	r3, [pc, #36]	; (10c6c <_ZN9CDC_Class5writeEPKhj+0x94>)
   10c46:	4798      	blx	r3
   10c48:	e001      	b.n	10c4e <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
   10c4a:	2300      	movs	r3, #0
   10c4c:	617b      	str	r3, [r7, #20]
	 }
	return r;		
   10c4e:	697b      	ldr	r3, [r7, #20]
}
   10c50:	4618      	mov	r0, r3
   10c52:	3718      	adds	r7, #24
   10c54:	46bd      	mov	sp, r7
   10c56:	bd80      	pop	{r7, pc}
   10c58:	000107a5 	.word	0x000107a5
   10c5c:	200033fc 	.word	0x200033fc
   10c60:	0001047d 	.word	0x0001047d
   10c64:	0000decd 	.word	0x0000decd
   10c68:	00010309 	.word	0x00010309
   10c6c:	00010425 	.word	0x00010425

00010c70 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
   10c70:	b480      	push	{r7}
   10c72:	b083      	sub	sp, #12
   10c74:	af00      	add	r7, sp, #0
   10c76:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
   10c78:	687b      	ldr	r3, [r7, #4]
   10c7a:	7d5b      	ldrb	r3, [r3, #21]
   10c7c:	b2db      	uxtb	r3, r3
   10c7e:	2b00      	cmp	r3, #0
   10c80:	d006      	beq.n	10c90 <_ZN9CDC_Class9availableEv+0x20>
   10c82:	687b      	ldr	r3, [r7, #4]
   10c84:	7d1b      	ldrb	r3, [r3, #20]
   10c86:	b2db      	uxtb	r3, r3
   10c88:	2b00      	cmp	r3, #0
   10c8a:	d001      	beq.n	10c90 <_ZN9CDC_Class9availableEv+0x20>
   10c8c:	2301      	movs	r3, #1
   10c8e:	e000      	b.n	10c92 <_ZN9CDC_Class9availableEv+0x22>
   10c90:	2300      	movs	r3, #0
   10c92:	2b00      	cmp	r3, #0
   10c94:	d001      	beq.n	10c9a <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
   10c96:	2301      	movs	r3, #1
   10c98:	e000      	b.n	10c9c <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
   10c9a:	2300      	movs	r3, #0
	}
	
}
   10c9c:	4618      	mov	r0, r3
   10c9e:	370c      	adds	r7, #12
   10ca0:	46bd      	mov	sp, r7
   10ca2:	bc80      	pop	{r7}
   10ca4:	4770      	bx	lr
	...

00010ca8 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
   10ca8:	b580      	push	{r7, lr}
   10caa:	b082      	sub	sp, #8
   10cac:	af00      	add	r7, sp, #0
   10cae:	6078      	str	r0, [r7, #4]
   10cb0:	6039      	str	r1, [r7, #0]
   10cb2:	687b      	ldr	r3, [r7, #4]
   10cb4:	2b01      	cmp	r3, #1
   10cb6:	d154      	bne.n	10d62 <_Z41__static_initialization_and_destruction_0ii+0xba>
   10cb8:	683b      	ldr	r3, [r7, #0]
   10cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10cbe:	4293      	cmp	r3, r2
   10cc0:	d14f      	bne.n	10d62 <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   10cc2:	492a      	ldr	r1, [pc, #168]	; (10d6c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   10cc4:	482a      	ldr	r0, [pc, #168]	; (10d70 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   10cc6:	4b2b      	ldr	r3, [pc, #172]	; (10d74 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10cc8:	4798      	blx	r3
   10cca:	4a2b      	ldr	r2, [pc, #172]	; (10d78 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10ccc:	492b      	ldr	r1, [pc, #172]	; (10d7c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10cce:	4828      	ldr	r0, [pc, #160]	; (10d70 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   10cd0:	4b2b      	ldr	r3, [pc, #172]	; (10d80 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10cd2:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   10cd4:	492b      	ldr	r1, [pc, #172]	; (10d84 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   10cd6:	482c      	ldr	r0, [pc, #176]	; (10d88 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   10cd8:	4b26      	ldr	r3, [pc, #152]	; (10d74 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10cda:	4798      	blx	r3
   10cdc:	4a26      	ldr	r2, [pc, #152]	; (10d78 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10cde:	4927      	ldr	r1, [pc, #156]	; (10d7c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10ce0:	4829      	ldr	r0, [pc, #164]	; (10d88 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   10ce2:	4b27      	ldr	r3, [pc, #156]	; (10d80 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10ce4:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   10ce6:	4929      	ldr	r1, [pc, #164]	; (10d8c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   10ce8:	4829      	ldr	r0, [pc, #164]	; (10d90 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   10cea:	4b22      	ldr	r3, [pc, #136]	; (10d74 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10cec:	4798      	blx	r3
   10cee:	4a22      	ldr	r2, [pc, #136]	; (10d78 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10cf0:	4922      	ldr	r1, [pc, #136]	; (10d7c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10cf2:	4827      	ldr	r0, [pc, #156]	; (10d90 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   10cf4:	4b22      	ldr	r3, [pc, #136]	; (10d80 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10cf6:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   10cf8:	4926      	ldr	r1, [pc, #152]	; (10d94 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10cfa:	4827      	ldr	r0, [pc, #156]	; (10d98 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10cfc:	4b1d      	ldr	r3, [pc, #116]	; (10d74 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10cfe:	4798      	blx	r3
   10d00:	4a1d      	ldr	r2, [pc, #116]	; (10d78 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10d02:	491e      	ldr	r1, [pc, #120]	; (10d7c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10d04:	4824      	ldr	r0, [pc, #144]	; (10d98 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10d06:	4b1e      	ldr	r3, [pc, #120]	; (10d80 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10d08:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   10d0a:	4924      	ldr	r1, [pc, #144]	; (10d9c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   10d0c:	4824      	ldr	r0, [pc, #144]	; (10da0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10d0e:	4b19      	ldr	r3, [pc, #100]	; (10d74 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10d10:	4798      	blx	r3
   10d12:	4a19      	ldr	r2, [pc, #100]	; (10d78 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10d14:	4919      	ldr	r1, [pc, #100]	; (10d7c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10d16:	4822      	ldr	r0, [pc, #136]	; (10da0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10d18:	4b19      	ldr	r3, [pc, #100]	; (10d80 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10d1a:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   10d1c:	4921      	ldr	r1, [pc, #132]	; (10da4 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   10d1e:	4822      	ldr	r0, [pc, #136]	; (10da8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   10d20:	4b14      	ldr	r3, [pc, #80]	; (10d74 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10d22:	4798      	blx	r3
   10d24:	4a14      	ldr	r2, [pc, #80]	; (10d78 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10d26:	4915      	ldr	r1, [pc, #84]	; (10d7c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10d28:	481f      	ldr	r0, [pc, #124]	; (10da8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   10d2a:	4b15      	ldr	r3, [pc, #84]	; (10d80 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10d2c:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   10d2e:	491f      	ldr	r1, [pc, #124]	; (10dac <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10d30:	481f      	ldr	r0, [pc, #124]	; (10db0 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10d32:	4b10      	ldr	r3, [pc, #64]	; (10d74 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10d34:	4798      	blx	r3
   10d36:	4a10      	ldr	r2, [pc, #64]	; (10d78 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10d38:	4910      	ldr	r1, [pc, #64]	; (10d7c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10d3a:	481d      	ldr	r0, [pc, #116]	; (10db0 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10d3c:	4b10      	ldr	r3, [pc, #64]	; (10d80 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10d3e:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   10d40:	491c      	ldr	r1, [pc, #112]	; (10db4 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10d42:	481d      	ldr	r0, [pc, #116]	; (10db8 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10d44:	4b0b      	ldr	r3, [pc, #44]	; (10d74 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10d46:	4798      	blx	r3
   10d48:	4a0b      	ldr	r2, [pc, #44]	; (10d78 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10d4a:	490c      	ldr	r1, [pc, #48]	; (10d7c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10d4c:	481a      	ldr	r0, [pc, #104]	; (10db8 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10d4e:	4b0c      	ldr	r3, [pc, #48]	; (10d80 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10d50:	4798      	blx	r3
   10d52:	481a      	ldr	r0, [pc, #104]	; (10dbc <_Z41__static_initialization_and_destruction_0ii+0x114>)
   10d54:	4b1a      	ldr	r3, [pc, #104]	; (10dc0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10d56:	4798      	blx	r3
   10d58:	4a07      	ldr	r2, [pc, #28]	; (10d78 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10d5a:	491a      	ldr	r1, [pc, #104]	; (10dc4 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   10d5c:	4817      	ldr	r0, [pc, #92]	; (10dbc <_Z41__static_initialization_and_destruction_0ii+0x114>)
   10d5e:	4b08      	ldr	r3, [pc, #32]	; (10d80 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10d60:	4798      	blx	r3
   10d62:	bf00      	nop
   10d64:	3708      	adds	r7, #8
   10d66:	46bd      	mov	sp, r7
   10d68:	bd80      	pop	{r7, pc}
   10d6a:	bf00      	nop
   10d6c:	2000dec8 	.word	0x2000dec8
   10d70:	2000335c 	.word	0x2000335c
   10d74:	000101a9 	.word	0x000101a9
   10d78:	20000000 	.word	0x20000000
   10d7c:	000101e1 	.word	0x000101e1
   10d80:	0001a0b5 	.word	0x0001a0b5
   10d84:	2000df5c 	.word	0x2000df5c
   10d88:	2000337c 	.word	0x2000337c
   10d8c:	2000e080 	.word	0x2000e080
   10d90:	2000339c 	.word	0x2000339c
   10d94:	2000df7c 	.word	0x2000df7c
   10d98:	200033bc 	.word	0x200033bc
   10d9c:	2000e040 	.word	0x2000e040
   10da0:	200033dc 	.word	0x200033dc
   10da4:	2000e060 	.word	0x2000e060
   10da8:	200033fc 	.word	0x200033fc
   10dac:	2000df38 	.word	0x2000df38
   10db0:	2000341c 	.word	0x2000341c
   10db4:	2000dfd8 	.word	0x2000dfd8
   10db8:	2000343c 	.word	0x2000343c
   10dbc:	20003460 	.word	0x20003460
   10dc0:	00010895 	.word	0x00010895
   10dc4:	000108dd 	.word	0x000108dd

00010dc8 <_GLOBAL__sub_I_ptrCDCClass>:
   10dc8:	b580      	push	{r7, lr}
   10dca:	af00      	add	r7, sp, #0
   10dcc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10dd0:	2001      	movs	r0, #1
   10dd2:	4b01      	ldr	r3, [pc, #4]	; (10dd8 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
   10dd4:	4798      	blx	r3
   10dd6:	bd80      	pop	{r7, pc}
   10dd8:	00010ca9 	.word	0x00010ca9

00010ddc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   10ddc:	b580      	push	{r7, lr}
   10dde:	b086      	sub	sp, #24
   10de0:	af00      	add	r7, sp, #0
   10de2:	60f8      	str	r0, [r7, #12]
   10de4:	60b9      	str	r1, [r7, #8]
   10de6:	607a      	str	r2, [r7, #4]
  size_t n = 0;
   10de8:	2300      	movs	r3, #0
   10dea:	617b      	str	r3, [r7, #20]
  while (size--) {
   10dec:	687b      	ldr	r3, [r7, #4]
   10dee:	1e5a      	subs	r2, r3, #1
   10df0:	607a      	str	r2, [r7, #4]
   10df2:	2b00      	cmp	r3, #0
   10df4:	bf14      	ite	ne
   10df6:	2301      	movne	r3, #1
   10df8:	2300      	moveq	r3, #0
   10dfa:	b2db      	uxtb	r3, r3
   10dfc:	2b00      	cmp	r3, #0
   10dfe:	d016      	beq.n	10e2e <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
   10e00:	68fb      	ldr	r3, [r7, #12]
   10e02:	681b      	ldr	r3, [r3, #0]
   10e04:	681a      	ldr	r2, [r3, #0]
   10e06:	68bb      	ldr	r3, [r7, #8]
   10e08:	1c59      	adds	r1, r3, #1
   10e0a:	60b9      	str	r1, [r7, #8]
   10e0c:	781b      	ldrb	r3, [r3, #0]
   10e0e:	4619      	mov	r1, r3
   10e10:	68f8      	ldr	r0, [r7, #12]
   10e12:	4790      	blx	r2
   10e14:	4603      	mov	r3, r0
   10e16:	2b00      	cmp	r3, #0
   10e18:	bf14      	ite	ne
   10e1a:	2301      	movne	r3, #1
   10e1c:	2300      	moveq	r3, #0
   10e1e:	b2db      	uxtb	r3, r3
   10e20:	2b00      	cmp	r3, #0
   10e22:	d003      	beq.n	10e2c <_ZN5Print5writeEPKhj+0x50>
   10e24:	697b      	ldr	r3, [r7, #20]
   10e26:	3301      	adds	r3, #1
   10e28:	617b      	str	r3, [r7, #20]
  while (size--) {
   10e2a:	e7df      	b.n	10dec <_ZN5Print5writeEPKhj+0x10>
    else break;
   10e2c:	bf00      	nop
  }
  return n;
   10e2e:	697b      	ldr	r3, [r7, #20]
}
   10e30:	4618      	mov	r0, r3
   10e32:	3718      	adds	r7, #24
   10e34:	46bd      	mov	sp, r7
   10e36:	bd80      	pop	{r7, pc}

00010e38 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
   10e38:	b480      	push	{r7}
   10e3a:	b083      	sub	sp, #12
   10e3c:	af00      	add	r7, sp, #0
   10e3e:	6078      	str	r0, [r7, #4]
   10e40:	460b      	mov	r3, r1
   10e42:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   10e44:	78fb      	ldrb	r3, [r7, #3]
   10e46:	687a      	ldr	r2, [r7, #4]
   10e48:	01db      	lsls	r3, r3, #7
   10e4a:	4413      	add	r3, r2
   10e4c:	681b      	ldr	r3, [r3, #0]
}
   10e4e:	4618      	mov	r0, r3
   10e50:	370c      	adds	r7, #12
   10e52:	46bd      	mov	sp, r7
   10e54:	bc80      	pop	{r7}
   10e56:	4770      	bx	lr

00010e58 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
   10e58:	b480      	push	{r7}
   10e5a:	b083      	sub	sp, #12
   10e5c:	af00      	add	r7, sp, #0
   10e5e:	6078      	str	r0, [r7, #4]
   10e60:	460b      	mov	r3, r1
   10e62:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   10e64:	78fb      	ldrb	r3, [r7, #3]
   10e66:	687a      	ldr	r2, [r7, #4]
   10e68:	01db      	lsls	r3, r3, #7
   10e6a:	4413      	add	r3, r2
   10e6c:	3310      	adds	r3, #16
   10e6e:	681b      	ldr	r3, [r3, #0]
}
   10e70:	4618      	mov	r0, r3
   10e72:	370c      	adds	r7, #12
   10e74:	46bd      	mov	sp, r7
   10e76:	bc80      	pop	{r7}
   10e78:	4770      	bx	lr

00010e7a <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
   10e7a:	b480      	push	{r7}
   10e7c:	b083      	sub	sp, #12
   10e7e:	af00      	add	r7, sp, #0
   10e80:	6078      	str	r0, [r7, #4]
   10e82:	460b      	mov	r3, r1
   10e84:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   10e86:	78fb      	ldrb	r3, [r7, #3]
   10e88:	687a      	ldr	r2, [r7, #4]
   10e8a:	01db      	lsls	r3, r3, #7
   10e8c:	4413      	add	r3, r2
   10e8e:	3320      	adds	r3, #32
   10e90:	681b      	ldr	r3, [r3, #0]
}
   10e92:	4618      	mov	r0, r3
   10e94:	370c      	adds	r7, #12
   10e96:	46bd      	mov	sp, r7
   10e98:	bc80      	pop	{r7}
   10e9a:	4770      	bx	lr

00010e9c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
   10e9c:	b580      	push	{r7, lr}
   10e9e:	b086      	sub	sp, #24
   10ea0:	af00      	add	r7, sp, #0
   10ea2:	4603      	mov	r3, r0
   10ea4:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
   10ea6:	f107 030c 	add.w	r3, r7, #12
   10eaa:	4618      	mov	r0, r3
   10eac:	4b13      	ldr	r3, [pc, #76]	; (10efc <_gpio_get_level+0x60>)
   10eae:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   10eb0:	79fb      	ldrb	r3, [r7, #7]
   10eb2:	4619      	mov	r1, r3
   10eb4:	4812      	ldr	r0, [pc, #72]	; (10f00 <_gpio_get_level+0x64>)
   10eb6:	4b13      	ldr	r3, [pc, #76]	; (10f04 <_gpio_get_level+0x68>)
   10eb8:	4798      	blx	r3
   10eba:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   10ebc:	79fb      	ldrb	r3, [r7, #7]
   10ebe:	4619      	mov	r1, r3
   10ec0:	480f      	ldr	r0, [pc, #60]	; (10f00 <_gpio_get_level+0x64>)
   10ec2:	4b11      	ldr	r3, [pc, #68]	; (10f08 <_gpio_get_level+0x6c>)
   10ec4:	4798      	blx	r3
   10ec6:	4602      	mov	r2, r0
   10ec8:	697b      	ldr	r3, [r7, #20]
   10eca:	43db      	mvns	r3, r3
   10ecc:	4013      	ands	r3, r2
   10ece:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   10ed0:	79fb      	ldrb	r3, [r7, #7]
   10ed2:	4619      	mov	r1, r3
   10ed4:	480a      	ldr	r0, [pc, #40]	; (10f00 <_gpio_get_level+0x64>)
   10ed6:	4b0d      	ldr	r3, [pc, #52]	; (10f0c <_gpio_get_level+0x70>)
   10ed8:	4798      	blx	r3
   10eda:	4602      	mov	r2, r0
   10edc:	697b      	ldr	r3, [r7, #20]
   10ede:	4013      	ands	r3, r2
   10ee0:	693a      	ldr	r2, [r7, #16]
   10ee2:	4313      	orrs	r3, r2
   10ee4:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
   10ee6:	f107 030c 	add.w	r3, r7, #12
   10eea:	4618      	mov	r0, r3
   10eec:	4b08      	ldr	r3, [pc, #32]	; (10f10 <_gpio_get_level+0x74>)
   10eee:	4798      	blx	r3

	return tmp;
   10ef0:	693b      	ldr	r3, [r7, #16]
}
   10ef2:	4618      	mov	r0, r3
   10ef4:	3718      	adds	r7, #24
   10ef6:	46bd      	mov	sp, r7
   10ef8:	bd80      	pop	{r7, pc}
   10efa:	bf00      	nop
   10efc:	0000d0a9 	.word	0x0000d0a9
   10f00:	41008000 	.word	0x41008000
   10f04:	00010e39 	.word	0x00010e39
   10f08:	00010e7b 	.word	0x00010e7b
   10f0c:	00010e59 	.word	0x00010e59
   10f10:	0000d0cf 	.word	0x0000d0cf

00010f14 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   10f14:	b580      	push	{r7, lr}
   10f16:	b082      	sub	sp, #8
   10f18:	af00      	add	r7, sp, #0
   10f1a:	4603      	mov	r3, r0
   10f1c:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   10f1e:	79fb      	ldrb	r3, [r7, #7]
   10f20:	115b      	asrs	r3, r3, #5
   10f22:	b2db      	uxtb	r3, r3
   10f24:	4618      	mov	r0, r3
   10f26:	4b09      	ldr	r3, [pc, #36]	; (10f4c <gpio_get_pin_level+0x38>)
   10f28:	4798      	blx	r3
   10f2a:	4601      	mov	r1, r0
   10f2c:	79fb      	ldrb	r3, [r7, #7]
   10f2e:	f003 031f 	and.w	r3, r3, #31
   10f32:	2201      	movs	r2, #1
   10f34:	fa02 f303 	lsl.w	r3, r2, r3
   10f38:	400b      	ands	r3, r1
   10f3a:	2b00      	cmp	r3, #0
   10f3c:	bf14      	ite	ne
   10f3e:	2301      	movne	r3, #1
   10f40:	2300      	moveq	r3, #0
   10f42:	b2db      	uxtb	r3, r3
}
   10f44:	4618      	mov	r0, r3
   10f46:	3708      	adds	r7, #8
   10f48:	46bd      	mov	sp, r7
   10f4a:	bd80      	pop	{r7, pc}
   10f4c:	00010e9d 	.word	0x00010e9d

00010f50 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
   10f50:	b480      	push	{r7}
   10f52:	b083      	sub	sp, #12
   10f54:	af00      	add	r7, sp, #0
   10f56:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
   10f58:	4b06      	ldr	r3, [pc, #24]	; (10f74 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   10f5a:	681b      	ldr	r3, [r3, #0]
   10f5c:	2201      	movs	r2, #1
   10f5e:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
   10f60:	4b04      	ldr	r3, [pc, #16]	; (10f74 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   10f62:	681b      	ldr	r3, [r3, #0]
   10f64:	2200      	movs	r2, #0
   10f66:	705a      	strb	r2, [r3, #1]
}
   10f68:	bf00      	nop
   10f6a:	370c      	adds	r7, #12
   10f6c:	46bd      	mov	sp, r7
   10f6e:	bc80      	pop	{r7}
   10f70:	4770      	bx	lr
   10f72:	bf00      	nop
   10f74:	200035c0 	.word	0x200035c0

00010f78 <_ZL10USBPluggedv>:

static void USBPlugged(void){
   10f78:	b580      	push	{r7, lr}
   10f7a:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
   10f7c:	2040      	movs	r0, #64	; 0x40
   10f7e:	4b0a      	ldr	r3, [pc, #40]	; (10fa8 <_ZL10USBPluggedv+0x30>)
   10f80:	4798      	blx	r3
   10f82:	4603      	mov	r3, r0
   10f84:	2b00      	cmp	r3, #0
   10f86:	d004      	beq.n	10f92 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
   10f88:	4b08      	ldr	r3, [pc, #32]	; (10fac <_ZL10USBPluggedv+0x34>)
   10f8a:	681b      	ldr	r3, [r3, #0]
   10f8c:	2201      	movs	r2, #1
   10f8e:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
   10f90:	e007      	b.n	10fa2 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
   10f92:	4b06      	ldr	r3, [pc, #24]	; (10fac <_ZL10USBPluggedv+0x34>)
   10f94:	681b      	ldr	r3, [r3, #0]
   10f96:	2200      	movs	r2, #0
   10f98:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
   10f9a:	4b04      	ldr	r3, [pc, #16]	; (10fac <_ZL10USBPluggedv+0x34>)
   10f9c:	681b      	ldr	r3, [r3, #0]
   10f9e:	2200      	movs	r2, #0
   10fa0:	701a      	strb	r2, [r3, #0]
}
   10fa2:	bf00      	nop
   10fa4:	bd80      	pop	{r7, pc}
   10fa6:	bf00      	nop
   10fa8:	00010f15 	.word	0x00010f15
   10fac:	200035c0 	.word	0x200035c0

00010fb0 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
   10fb0:	b480      	push	{r7}
   10fb2:	b083      	sub	sp, #12
   10fb4:	af00      	add	r7, sp, #0
   10fb6:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
   10fb8:	4a04      	ldr	r2, [pc, #16]	; (10fcc <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
   10fba:	687b      	ldr	r3, [r7, #4]
   10fbc:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
   10fbe:	687b      	ldr	r3, [r7, #4]
   10fc0:	4618      	mov	r0, r3
   10fc2:	370c      	adds	r7, #12
   10fc4:	46bd      	mov	sp, r7
   10fc6:	bc80      	pop	{r7}
   10fc8:	4770      	bx	lr
   10fca:	bf00      	nop
   10fcc:	200035c0 	.word	0x200035c0

00010fd0 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
   10fd0:	b480      	push	{r7}
   10fd2:	b083      	sub	sp, #12
   10fd4:	af00      	add	r7, sp, #0
   10fd6:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
   10fd8:	687b      	ldr	r3, [r7, #4]
   10fda:	4618      	mov	r0, r3
   10fdc:	370c      	adds	r7, #12
   10fde:	46bd      	mov	sp, r7
   10fe0:	bc80      	pop	{r7}
   10fe2:	4770      	bx	lr

00010fe4 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
   10fe4:	b580      	push	{r7, lr}
   10fe6:	b082      	sub	sp, #8
   10fe8:	af00      	add	r7, sp, #0
   10fea:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
   10fec:	491e      	ldr	r1, [pc, #120]	; (11068 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
   10fee:	2040      	movs	r0, #64	; 0x40
   10ff0:	4b1e      	ldr	r3, [pc, #120]	; (1106c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
   10ff2:	4798      	blx	r3
		if (usbTerminalTimer.Init())
   10ff4:	481e      	ldr	r0, [pc, #120]	; (11070 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   10ff6:	4b1f      	ldr	r3, [pc, #124]	; (11074 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   10ff8:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
   10ffa:	2040      	movs	r0, #64	; 0x40
   10ffc:	4b1e      	ldr	r3, [pc, #120]	; (11078 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   10ffe:	4798      	blx	r3
   11000:	4603      	mov	r3, r0
   11002:	461a      	mov	r2, r3
   11004:	687b      	ldr	r3, [r7, #4]
   11006:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
   11008:	687b      	ldr	r3, [r7, #4]
   1100a:	78db      	ldrb	r3, [r3, #3]
   1100c:	2b00      	cmp	r3, #0
   1100e:	d021      	beq.n	11054 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
   11010:	687b      	ldr	r3, [r7, #4]
   11012:	2200      	movs	r2, #0
   11014:	709a      	strb	r2, [r3, #2]
			plugged=true;
   11016:	687b      	ldr	r3, [r7, #4]
   11018:	2201      	movs	r2, #1
   1101a:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
   1101c:	f44f 7216 	mov.w	r2, #600	; 0x258
   11020:	4916      	ldr	r1, [pc, #88]	; (1107c <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
   11022:	4813      	ldr	r0, [pc, #76]	; (11070 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   11024:	4b16      	ldr	r3, [pc, #88]	; (11080 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
   11026:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
   11028:	4816      	ldr	r0, [pc, #88]	; (11084 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
   1102a:	4b17      	ldr	r3, [pc, #92]	; (11088 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
   1102c:	4798      	blx	r3
   1102e:	4603      	mov	r3, r0
   11030:	f083 0301 	eor.w	r3, r3, #1
   11034:	b2db      	uxtb	r3, r3
   11036:	2b00      	cmp	r3, #0
   11038:	d008      	beq.n	1104c <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
   1103a:	687b      	ldr	r3, [r7, #4]
   1103c:	789b      	ldrb	r3, [r3, #2]
   1103e:	b2db      	uxtb	r3, r3
   11040:	2b00      	cmp	r3, #0
   11042:	d0f1      	beq.n	11028 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
   11044:	687b      	ldr	r3, [r7, #4]
   11046:	2200      	movs	r2, #0
   11048:	701a      	strb	r2, [r3, #0]
					return;
   1104a:	e009      	b.n	11060 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
   1104c:	4808      	ldr	r0, [pc, #32]	; (11070 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   1104e:	4b0f      	ldr	r3, [pc, #60]	; (1108c <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
   11050:	4798      	blx	r3
   11052:	e005      	b.n	11060 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
   11054:	687b      	ldr	r3, [r7, #4]
   11056:	2200      	movs	r2, #0
   11058:	701a      	strb	r2, [r3, #0]
			plugged=false;
   1105a:	687b      	ldr	r3, [r7, #4]
   1105c:	2200      	movs	r2, #0
   1105e:	705a      	strb	r2, [r3, #1]
		}
		
}
   11060:	3708      	adds	r7, #8
   11062:	46bd      	mov	sp, r7
   11064:	bd80      	pop	{r7, pc}
   11066:	bf00      	nop
   11068:	00010f79 	.word	0x00010f79
   1106c:	000036b9 	.word	0x000036b9
   11070:	20003560 	.word	0x20003560
   11074:	00010295 	.word	0x00010295
   11078:	00010f15 	.word	0x00010f15
   1107c:	00010f51 	.word	0x00010f51
   11080:	0001047d 	.word	0x0001047d
   11084:	20003460 	.word	0x20003460
   11088:	0001094d 	.word	0x0001094d
   1108c:	00010309 	.word	0x00010309

00011090 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
   11090:	b580      	push	{r7, lr}
   11092:	b082      	sub	sp, #8
   11094:	af00      	add	r7, sp, #0
   11096:	6078      	str	r0, [r7, #4]
   11098:	6039      	str	r1, [r7, #0]
   1109a:	687b      	ldr	r3, [r7, #4]
   1109c:	2b01      	cmp	r3, #1
   1109e:	d14c      	bne.n	1113a <_Z41__static_initialization_and_destruction_0ii+0xaa>
   110a0:	683b      	ldr	r3, [r7, #0]
   110a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   110a6:	4293      	cmp	r3, r2
   110a8:	d147      	bne.n	1113a <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   110aa:	4926      	ldr	r1, [pc, #152]	; (11144 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   110ac:	4826      	ldr	r0, [pc, #152]	; (11148 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   110ae:	4b27      	ldr	r3, [pc, #156]	; (1114c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   110b0:	4798      	blx	r3
   110b2:	4a27      	ldr	r2, [pc, #156]	; (11150 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   110b4:	4927      	ldr	r1, [pc, #156]	; (11154 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   110b6:	4824      	ldr	r0, [pc, #144]	; (11148 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   110b8:	4b27      	ldr	r3, [pc, #156]	; (11158 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   110ba:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   110bc:	4927      	ldr	r1, [pc, #156]	; (1115c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   110be:	4828      	ldr	r0, [pc, #160]	; (11160 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   110c0:	4b22      	ldr	r3, [pc, #136]	; (1114c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   110c2:	4798      	blx	r3
   110c4:	4a22      	ldr	r2, [pc, #136]	; (11150 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   110c6:	4923      	ldr	r1, [pc, #140]	; (11154 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   110c8:	4825      	ldr	r0, [pc, #148]	; (11160 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   110ca:	4b23      	ldr	r3, [pc, #140]	; (11158 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   110cc:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   110ce:	4925      	ldr	r1, [pc, #148]	; (11164 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   110d0:	4825      	ldr	r0, [pc, #148]	; (11168 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   110d2:	4b1e      	ldr	r3, [pc, #120]	; (1114c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   110d4:	4798      	blx	r3
   110d6:	4a1e      	ldr	r2, [pc, #120]	; (11150 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   110d8:	491e      	ldr	r1, [pc, #120]	; (11154 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   110da:	4823      	ldr	r0, [pc, #140]	; (11168 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   110dc:	4b1e      	ldr	r3, [pc, #120]	; (11158 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   110de:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   110e0:	4922      	ldr	r1, [pc, #136]	; (1116c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   110e2:	4823      	ldr	r0, [pc, #140]	; (11170 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   110e4:	4b19      	ldr	r3, [pc, #100]	; (1114c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   110e6:	4798      	blx	r3
   110e8:	4a19      	ldr	r2, [pc, #100]	; (11150 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   110ea:	491a      	ldr	r1, [pc, #104]	; (11154 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   110ec:	4820      	ldr	r0, [pc, #128]	; (11170 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   110ee:	4b1a      	ldr	r3, [pc, #104]	; (11158 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   110f0:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   110f2:	4920      	ldr	r1, [pc, #128]	; (11174 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   110f4:	4820      	ldr	r0, [pc, #128]	; (11178 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   110f6:	4b15      	ldr	r3, [pc, #84]	; (1114c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   110f8:	4798      	blx	r3
   110fa:	4a15      	ldr	r2, [pc, #84]	; (11150 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   110fc:	4915      	ldr	r1, [pc, #84]	; (11154 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   110fe:	481e      	ldr	r0, [pc, #120]	; (11178 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   11100:	4b15      	ldr	r3, [pc, #84]	; (11158 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11102:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   11104:	491d      	ldr	r1, [pc, #116]	; (1117c <_Z41__static_initialization_and_destruction_0ii+0xec>)
   11106:	481e      	ldr	r0, [pc, #120]	; (11180 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   11108:	4b10      	ldr	r3, [pc, #64]	; (1114c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1110a:	4798      	blx	r3
   1110c:	4a10      	ldr	r2, [pc, #64]	; (11150 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1110e:	4911      	ldr	r1, [pc, #68]	; (11154 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11110:	481b      	ldr	r0, [pc, #108]	; (11180 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   11112:	4b11      	ldr	r3, [pc, #68]	; (11158 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11114:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   11116:	491b      	ldr	r1, [pc, #108]	; (11184 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   11118:	481b      	ldr	r0, [pc, #108]	; (11188 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   1111a:	4b0c      	ldr	r3, [pc, #48]	; (1114c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1111c:	4798      	blx	r3
   1111e:	4a0c      	ldr	r2, [pc, #48]	; (11150 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11120:	490c      	ldr	r1, [pc, #48]	; (11154 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11122:	4819      	ldr	r0, [pc, #100]	; (11188 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   11124:	4b0c      	ldr	r3, [pc, #48]	; (11158 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11126:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   11128:	4918      	ldr	r1, [pc, #96]	; (1118c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   1112a:	4819      	ldr	r0, [pc, #100]	; (11190 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   1112c:	4b07      	ldr	r3, [pc, #28]	; (1114c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1112e:	4798      	blx	r3
   11130:	4a07      	ldr	r2, [pc, #28]	; (11150 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11132:	4908      	ldr	r1, [pc, #32]	; (11154 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11134:	4816      	ldr	r0, [pc, #88]	; (11190 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   11136:	4b08      	ldr	r3, [pc, #32]	; (11158 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11138:	4798      	blx	r3
   1113a:	bf00      	nop
   1113c:	3708      	adds	r7, #8
   1113e:	46bd      	mov	sp, r7
   11140:	bd80      	pop	{r7, pc}
   11142:	bf00      	nop
   11144:	2000dec8 	.word	0x2000dec8
   11148:	200034c0 	.word	0x200034c0
   1114c:	000101a9 	.word	0x000101a9
   11150:	20000000 	.word	0x20000000
   11154:	000101e1 	.word	0x000101e1
   11158:	0001a0b5 	.word	0x0001a0b5
   1115c:	2000df5c 	.word	0x2000df5c
   11160:	200034e0 	.word	0x200034e0
   11164:	2000e080 	.word	0x2000e080
   11168:	20003500 	.word	0x20003500
   1116c:	2000df7c 	.word	0x2000df7c
   11170:	20003520 	.word	0x20003520
   11174:	2000e040 	.word	0x2000e040
   11178:	20003540 	.word	0x20003540
   1117c:	2000e060 	.word	0x2000e060
   11180:	20003560 	.word	0x20003560
   11184:	2000df38 	.word	0x2000df38
   11188:	20003580 	.word	0x20003580
   1118c:	2000dfd8 	.word	0x2000dfd8
   11190:	200035a0 	.word	0x200035a0

00011194 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
   11194:	b580      	push	{r7, lr}
   11196:	af00      	add	r7, sp, #0
   11198:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1119c:	2001      	movs	r0, #1
   1119e:	4b01      	ldr	r3, [pc, #4]	; (111a4 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
   111a0:	4798      	blx	r3
   111a2:	bd80      	pop	{r7, pc}
   111a4:	00011091 	.word	0x00011091

000111a8 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
   111a8:	b480      	push	{r7}
   111aa:	b083      	sub	sp, #12
   111ac:	af00      	add	r7, sp, #0
   111ae:	6078      	str	r0, [r7, #4]
    return (void *)0;
   111b0:	2300      	movs	r3, #0
	}
   111b2:	4618      	mov	r0, r3
   111b4:	370c      	adds	r7, #12
   111b6:	46bd      	mov	sp, r7
   111b8:	bc80      	pop	{r7}
   111ba:	4770      	bx	lr

000111bc <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
   111bc:	b480      	push	{r7}
   111be:	af00      	add	r7, sp, #0
		}
   111c0:	bf00      	nop
   111c2:	46bd      	mov	sp, r7
   111c4:	bc80      	pop	{r7}
   111c6:	4770      	bx	lr

000111c8 <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
   111c8:	4770      	bx	lr

000111ca <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
   111ca:	4770      	bx	lr

000111cc <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
	return isOK;
	
	
}

uint8_t CondesatorFan_Class::InitExpanderArray(MCP23008_Class** expandersArray){
   111cc:	1f0b      	subs	r3, r1, #4
   111ce:	300c      	adds	r0, #12
   111d0:	3118      	adds	r1, #24
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
		{
			expanders[i]=expandersArray[i];
   111d2:	f853 2f04 	ldr.w	r2, [r3, #4]!
   111d6:	f840 2b04 	str.w	r2, [r0], #4
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   111da:	428b      	cmp	r3, r1
   111dc:	d1f9      	bne.n	111d2 <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
		}
		return 0;
}
   111de:	2000      	movs	r0, #0
   111e0:	4770      	bx	lr
	...

000111e4 <_ZN19CondesatorFan_Class10ReadStatusEv>:
	


uint8_t	CondesatorFan_Class::ReadStatus(void){
   111e4:	b510      	push	{r4, lr}
   111e6:	4604      	mov	r4, r0
	uint8_t r=expanders[0]->ReadGPIORegister();
   111e8:	68c0      	ldr	r0, [r0, #12]
   111ea:	4b0a      	ldr	r3, [pc, #40]	; (11214 <_ZN19CondesatorFan_Class10ReadStatusEv+0x30>)
   111ec:	4798      	blx	r3
	
	
	condesatorStatus.niAlcCdsFanExtFault=r&(0x01<<(4));
   111ee:	f3c0 1200 	ubfx	r2, r0, #4, #1
   111f2:	78e3      	ldrb	r3, [r4, #3]
   111f4:	f362 0382 	bfi	r3, r2, #2, #1
	condesatorStatus.niAlcCdsFanEnableFault=r&(0x02<<(4));
   111f8:	f3c0 1240 	ubfx	r2, r0, #5, #1
   111fc:	f362 0341 	bfi	r3, r2, #1, #1
	condesatorStatus.niAlcCdsFanPwmFault=r&(0x04<<(4));
   11200:	f3c0 1280 	ubfx	r2, r0, #6, #1
   11204:	f362 0300 	bfi	r3, r2, #0, #1
   11208:	70e3      	strb	r3, [r4, #3]
	faults=r&(0x07<<(4));
   1120a:	f000 0070 	and.w	r0, r0, #112	; 0x70
   1120e:	7120      	strb	r0, [r4, #4]
	return faults;
}
   11210:	bd10      	pop	{r4, pc}
   11212:	bf00      	nop
   11214:	0000fdb9 	.word	0x0000fdb9

00011218 <_ZN19CondesatorFan_Class9SetEnableEb>:
uint8_t	CondesatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(2,true);
	return uint8_t(enabled);
}
uint8_t	CondesatorFan_Class::SetEnable(bool state){
   11218:	b510      	push	{r4, lr}
   1121a:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(0,!state);
   1121c:	f081 0201 	eor.w	r2, r1, #1
   11220:	2100      	movs	r1, #0
   11222:	68c0      	ldr	r0, [r0, #12]
   11224:	4b01      	ldr	r3, [pc, #4]	; (1122c <_ZN19CondesatorFan_Class9SetEnableEb+0x14>)
   11226:	4798      	blx	r3
   11228:	7060      	strb	r0, [r4, #1]
	
	return uint8_t(enabled);
}
   1122a:	bd10      	pop	{r4, pc}
   1122c:	00010071 	.word	0x00010071

00011230 <_ZN19CondesatorFan_Class6SetPWMEh>:
	enabled=(value&0x01);
	return enabled;
}


uint8_t	CondesatorFan_Class::SetPWM(uint8_t pwm){
   11230:	b510      	push	{r4, lr}
   11232:	4604      	mov	r4, r0
	pwmValue= expanders[6]->WriteGPIORegister(pwm);
   11234:	6a40      	ldr	r0, [r0, #36]	; 0x24
   11236:	4b02      	ldr	r3, [pc, #8]	; (11240 <_ZN19CondesatorFan_Class6SetPWMEh+0x10>)
   11238:	4798      	blx	r3
   1123a:	7160      	strb	r0, [r4, #5]
	return pwmValue;
}
   1123c:	bd10      	pop	{r4, pc}
   1123e:	bf00      	nop
   11240:	0000fe3d 	.word	0x0000fe3d

00011244 <_ZN19CondesatorFan_Class8SelfTestEv>:

bool CondesatorFan_Class::SelfTest(void){
   11244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11248:	4605      	mov	r5, r0
		bool result;
		SetEnable(false);
   1124a:	2100      	movs	r1, #0
   1124c:	4c0f      	ldr	r4, [pc, #60]	; (1128c <_ZN19CondesatorFan_Class8SelfTestEv+0x48>)
   1124e:	47a0      	blx	r4
		SetPWM(0xff);
   11250:	21ff      	movs	r1, #255	; 0xff
   11252:	4628      	mov	r0, r5
   11254:	4b0e      	ldr	r3, [pc, #56]	; (11290 <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
   11256:	4798      	blx	r3
		SetEnable(true);
   11258:	2101      	movs	r1, #1
   1125a:	4628      	mov	r0, r5
   1125c:	47a0      	blx	r4
   1125e:	24ff      	movs	r4, #255	; 0xff
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
		{
			SetPWM(i);
   11260:	4f0b      	ldr	r7, [pc, #44]	; (11290 <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
			delay_us(10);
   11262:	f04f 080a 	mov.w	r8, #10
   11266:	4e0b      	ldr	r6, [pc, #44]	; (11294 <_ZN19CondesatorFan_Class8SelfTestEv+0x50>)
			SetPWM(i);
   11268:	4621      	mov	r1, r4
   1126a:	4628      	mov	r0, r5
   1126c:	47b8      	blx	r7
			delay_us(10);
   1126e:	4640      	mov	r0, r8
   11270:	47b0      	blx	r6
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
   11272:	3c01      	subs	r4, #1
   11274:	b2e4      	uxtb	r4, r4
   11276:	2c10      	cmp	r4, #16
   11278:	d1f6      	bne.n	11268 <_ZN19CondesatorFan_Class8SelfTestEv+0x24>
		}

		ReadStatus();
   1127a:	4628      	mov	r0, r5
   1127c:	4b06      	ldr	r3, [pc, #24]	; (11298 <_ZN19CondesatorFan_Class8SelfTestEv+0x54>)
   1127e:	4798      	blx	r3
// 		delay_ms(6*1000);
// 		SetEnable(false);
		result=condesatorStatus.niAlcCdsFanExtFault;
   11280:	78e8      	ldrb	r0, [r5, #3]
		return result;
   11282:	f3c0 0080 	ubfx	r0, r0, #2, #1
   11286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1128a:	bf00      	nop
   1128c:	00011219 	.word	0x00011219
   11290:	00011231 	.word	0x00011231
   11294:	000035f1 	.word	0x000035f1
   11298:	000111e5 	.word	0x000111e5

0001129c <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class>:
bool CondesatorFan_Class::InitCondesator(I2C_Sync_Class* i2cClass,MCP23008_Class** expanderArray){
   1129c:	b510      	push	{r4, lr}
   1129e:	4604      	mov	r4, r0
	i2c=i2cClass;
   112a0:	6081      	str	r1, [r0, #8]
	if (i2c->isOK)
   112a2:	7a4b      	ldrb	r3, [r1, #9]
   112a4:	b90b      	cbnz	r3, 112aa <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
}
   112a6:	78a0      	ldrb	r0, [r4, #2]
   112a8:	bd10      	pop	{r4, pc}
		InitExpanderArray(expanderArray);
   112aa:	4611      	mov	r1, r2
   112ac:	4b04      	ldr	r3, [pc, #16]	; (112c0 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x24>)
   112ae:	4798      	blx	r3
		expanders[EVAPORATOR_AND_CONDESATOR_EXPANDERS-1]->SetPortOutput();
   112b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   112b2:	4b04      	ldr	r3, [pc, #16]	; (112c4 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x28>)
   112b4:	4798      	blx	r3
		isOK=SelfTest();
   112b6:	4620      	mov	r0, r4
   112b8:	4b03      	ldr	r3, [pc, #12]	; (112c8 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x2c>)
   112ba:	4798      	blx	r3
   112bc:	70a0      	strb	r0, [r4, #2]
   112be:	e7f2      	b.n	112a6 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xa>
   112c0:	000111cd 	.word	0x000111cd
   112c4:	0000ff31 	.word	0x0000ff31
   112c8:	00011245 	.word	0x00011245

000112cc <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev>:
   112cc:	b510      	push	{r4, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   112ce:	4c05      	ldr	r4, [pc, #20]	; (112e4 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x18>)
   112d0:	4905      	ldr	r1, [pc, #20]	; (112e8 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x1c>)
   112d2:	4620      	mov	r0, r4
   112d4:	4b05      	ldr	r3, [pc, #20]	; (112ec <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x20>)
   112d6:	4798      	blx	r3
   112d8:	4a05      	ldr	r2, [pc, #20]	; (112f0 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x24>)
   112da:	4906      	ldr	r1, [pc, #24]	; (112f4 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x28>)
   112dc:	4620      	mov	r0, r4
   112de:	4b06      	ldr	r3, [pc, #24]	; (112f8 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x2c>)
   112e0:	4798      	blx	r3
   112e2:	bd10      	pop	{r4, pc}
   112e4:	200035c4 	.word	0x200035c4
   112e8:	2000dff8 	.word	0x2000dff8
   112ec:	0000faf1 	.word	0x0000faf1
   112f0:	20000000 	.word	0x20000000
   112f4:	0000fb0d 	.word	0x0000fb0d
   112f8:	0001a0b5 	.word	0x0001a0b5

000112fc <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:
	somethingChanged=false;
	
} //EvaporatorAndCondesatorFans_Class

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
   112fc:	b510      	push	{r4, lr}
   112fe:	4604      	mov	r4, r0
   11300:	302c      	adds	r0, #44	; 0x2c
   11302:	4b03      	ldr	r3, [pc, #12]	; (11310 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
   11304:	4798      	blx	r3
   11306:	4620      	mov	r0, r4
   11308:	4b02      	ldr	r3, [pc, #8]	; (11314 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
   1130a:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
   1130c:	4620      	mov	r0, r4
   1130e:	bd10      	pop	{r4, pc}
   11310:	000111cb 	.word	0x000111cb
   11314:	00011561 	.word	0x00011561

00011318 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
   11318:	b570      	push	{r4, r5, r6, lr}
   1131a:	4c05      	ldr	r4, [pc, #20]	; (11330 <__tcf_1+0x18>)
   1131c:	4e05      	ldr	r6, [pc, #20]	; (11334 <__tcf_1+0x1c>)
   1131e:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
   11322:	3c1c      	subs	r4, #28
   11324:	4620      	mov	r0, r4
   11326:	47b0      	blx	r6
   11328:	42ac      	cmp	r4, r5
   1132a:	d1fa      	bne.n	11322 <__tcf_1+0xa>
   1132c:	bd70      	pop	{r4, r5, r6, pc}
   1132e:	bf00      	nop
   11330:	200036a0 	.word	0x200036a0
   11334:	0000fcc1 	.word	0x0000fcc1

00011338 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
   11338:	b510      	push	{r4, lr}
   1133a:	4803      	ldr	r0, [pc, #12]	; (11348 <__tcf_0+0x10>)
   1133c:	4c03      	ldr	r4, [pc, #12]	; (1134c <__tcf_0+0x14>)
   1133e:	47a0      	blx	r4
   11340:	4803      	ldr	r0, [pc, #12]	; (11350 <__tcf_0+0x18>)
   11342:	47a0      	blx	r4
   11344:	bd10      	pop	{r4, pc}
   11346:	bf00      	nop
   11348:	200036cc 	.word	0x200036cc
   1134c:	00011561 	.word	0x00011561
   11350:	200036a0 	.word	0x200036a0

00011354 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
   11354:	b510      	push	{r4, lr}
   11356:	4604      	mov	r4, r0
   11358:	4b0d      	ldr	r3, [pc, #52]	; (11390 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
   1135a:	4798      	blx	r3
   1135c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   11360:	4b0c      	ldr	r3, [pc, #48]	; (11394 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
   11362:	4798      	blx	r3
	i2c=&i2cFansStatic;
   11364:	4b0c      	ldr	r3, [pc, #48]	; (11398 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
   11366:	f503 728e 	add.w	r2, r3, #284	; 0x11c
   1136a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
   1136e:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
   11372:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
   11374:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
   11378:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
   1137a:	f503 729a 	add.w	r2, r3, #308	; 0x134
   1137e:	6662      	str	r2, [r4, #100]	; 0x64
	ptrFansClass=this;
   11380:	f8c3 4160 	str.w	r4, [r3, #352]	; 0x160
	somethingChanged=false;
   11384:	2300      	movs	r3, #0
   11386:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
} //EvaporatorAndCondesatorFans_Class
   1138a:	4620      	mov	r0, r4
   1138c:	bd10      	pop	{r4, pc}
   1138e:	bf00      	nop
   11390:	00011549 	.word	0x00011549
   11394:	000111c9 	.word	0x000111c9
   11398:	200035dc 	.word	0x200035dc

0001139c <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv>:
	}
	isOK=i2c->isOK;
	return isOK;
	
}
uint8_t EvaporatorAndCondesatorFans_Class::InitExpanderArray(void){
   1139c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   113a0:	4606      	mov	r6, r0
   113a2:	4c0c      	ldr	r4, [pc, #48]	; (113d4 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x38>)
   113a4:	f100 0768 	add.w	r7, r0, #104	; 0x68
	
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   113a8:	2500      	movs	r5, #0
	{
		expanders[i]=&expandersStatic[i];
		currentExpander=expanders[i];
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
   113aa:	f8df 802c 	ldr.w	r8, [pc, #44]	; 113d8 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x3c>
		expanders[i]=&expandersStatic[i];
   113ae:	f847 4b04 	str.w	r4, [r7], #4
		currentExpander=expanders[i];
   113b2:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
   113b6:	f045 0120 	orr.w	r1, r5, #32
   113ba:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   113be:	b2c9      	uxtb	r1, r1
   113c0:	4620      	mov	r0, r4
   113c2:	47c0      	blx	r8
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   113c4:	3501      	adds	r5, #1
   113c6:	341c      	adds	r4, #28
   113c8:	2d07      	cmp	r5, #7
   113ca:	d1f0      	bne.n	113ae <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x12>
	}
	return 0;
}
   113cc:	2000      	movs	r0, #0
   113ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   113d2:	bf00      	nop
   113d4:	200035dc 	.word	0x200035dc
   113d8:	0000fcd5 	.word	0x0000fcd5

000113dc <_ZN33EvaporatorAndCondesatorFans_Class4InitEv>:
bool	EvaporatorAndCondesatorFans_Class::Init(void){
   113dc:	b570      	push	{r4, r5, r6, lr}
   113de:	4604      	mov	r4, r0
	i2c->Init();
   113e0:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   113e4:	4b17      	ldr	r3, [pc, #92]	; (11444 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x68>)
   113e6:	4798      	blx	r3
	if (i2c->isOK)
   113e8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   113ec:	7a5b      	ldrb	r3, [r3, #9]
   113ee:	b943      	cbnz	r3, 11402 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x26>
	isOK=i2c->isOK;
   113f0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   113f4:	7a5b      	ldrb	r3, [r3, #9]
   113f6:	b2db      	uxtb	r3, r3
   113f8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	return isOK;
   113fc:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
}
   11400:	bd70      	pop	{r4, r5, r6, pc}
		InitExpanderArray();
   11402:	4620      	mov	r0, r4
   11404:	4b10      	ldr	r3, [pc, #64]	; (11448 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x6c>)
   11406:	4798      	blx	r3
		evaporator[0]->InitEvaporator(0,i2c,expanders);
   11408:	f104 0568 	add.w	r5, r4, #104	; 0x68
   1140c:	462b      	mov	r3, r5
   1140e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   11412:	2100      	movs	r1, #0
   11414:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   11416:	4e0d      	ldr	r6, [pc, #52]	; (1144c <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x70>)
   11418:	47b0      	blx	r6
		evaporator[1]->InitEvaporator(1,i2c,expanders);
   1141a:	462b      	mov	r3, r5
   1141c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   11420:	2101      	movs	r1, #1
   11422:	6e20      	ldr	r0, [r4, #96]	; 0x60
   11424:	47b0      	blx	r6
		condesator->InitCondesator(i2c,expanders);
   11426:	462a      	mov	r2, r5
   11428:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   1142c:	6e60      	ldr	r0, [r4, #100]	; 0x64
   1142e:	4b08      	ldr	r3, [pc, #32]	; (11450 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x74>)
   11430:	4798      	blx	r3
		isOK=(evaporator[0]->isOK)&(evaporator[1]->isOK);
   11432:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   11434:	6e22      	ldr	r2, [r4, #96]	; 0x60
   11436:	791b      	ldrb	r3, [r3, #4]
   11438:	7912      	ldrb	r2, [r2, #4]
   1143a:	4013      	ands	r3, r2
   1143c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   11440:	e7d6      	b.n	113f0 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x14>
   11442:	bf00      	nop
   11444:	0000fb21 	.word	0x0000fb21
   11448:	0001139d 	.word	0x0001139d
   1144c:	0001166d 	.word	0x0001166d
   11450:	0001129d 	.word	0x0001129d

00011454 <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh>:
void EvaporatorAndCondesatorFans_Class::GetGPIOSValues(uint8_t * gpios){
   11454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11456:	f100 0468 	add.w	r4, r0, #104	; 0x68
   1145a:	1e4d      	subs	r5, r1, #1
   1145c:	f100 0684 	add.w	r6, r0, #132	; 0x84
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
	{
		gpios[i]=expanders[i]->ReadGPIORegister();
   11460:	4f04      	ldr	r7, [pc, #16]	; (11474 <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0x20>)
   11462:	f854 0b04 	ldr.w	r0, [r4], #4
   11466:	47b8      	blx	r7
   11468:	f805 0f01 	strb.w	r0, [r5, #1]!
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   1146c:	42b4      	cmp	r4, r6
   1146e:	d1f8      	bne.n	11462 <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0xe>
	}
	

}
   11470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11472:	bf00      	nop
   11474:	0000fdb9 	.word	0x0000fdb9

00011478 <_GLOBAL__sub_I_ptrFansClass>:

EvaporatorAndCondesatorFans_Class  fans;
   11478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1147c:	4c22      	ldr	r4, [pc, #136]	; (11508 <_GLOBAL__sub_I_ptrFansClass+0x90>)
   1147e:	f504 75b2 	add.w	r5, r4, #356	; 0x164
   11482:	4922      	ldr	r1, [pc, #136]	; (1150c <_GLOBAL__sub_I_ptrFansClass+0x94>)
   11484:	4628      	mov	r0, r5
   11486:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1153c <_GLOBAL__sub_I_ptrFansClass+0xc4>
   1148a:	47c8      	blx	r9
   1148c:	4f20      	ldr	r7, [pc, #128]	; (11510 <_GLOBAL__sub_I_ptrFansClass+0x98>)
   1148e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 11540 <_GLOBAL__sub_I_ptrFansClass+0xc8>
   11492:	463a      	mov	r2, r7
   11494:	4641      	mov	r1, r8
   11496:	4628      	mov	r0, r5
   11498:	4e1e      	ldr	r6, [pc, #120]	; (11514 <_GLOBAL__sub_I_ptrFansClass+0x9c>)
   1149a:	47b0      	blx	r6
static I2C_Sync_Class	i2cFansStatic(&I2C_FANS);
   1149c:	f504 758e 	add.w	r5, r4, #284	; 0x11c
   114a0:	491d      	ldr	r1, [pc, #116]	; (11518 <_GLOBAL__sub_I_ptrFansClass+0xa0>)
   114a2:	4628      	mov	r0, r5
   114a4:	47c8      	blx	r9
   114a6:	463a      	mov	r2, r7
   114a8:	4641      	mov	r1, r8
   114aa:	4628      	mov	r0, r5
   114ac:	47b0      	blx	r6
static EvaporatorFan_Class	evaporatorFan[2];
   114ae:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
   114b2:	4628      	mov	r0, r5
   114b4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 11544 <_GLOBAL__sub_I_ptrFansClass+0xcc>
   114b8:	47c0      	blx	r8
   114ba:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   114be:	47c0      	blx	r8
   114c0:	463a      	mov	r2, r7
   114c2:	4916      	ldr	r1, [pc, #88]	; (1151c <_GLOBAL__sub_I_ptrFansClass+0xa4>)
   114c4:	2000      	movs	r0, #0
   114c6:	47b0      	blx	r6
static CondesatorFan_Class	condesatorFan;
   114c8:	f504 789a 	add.w	r8, r4, #308	; 0x134
   114cc:	4640      	mov	r0, r8
   114ce:	4b14      	ldr	r3, [pc, #80]	; (11520 <_GLOBAL__sub_I_ptrFansClass+0xa8>)
   114d0:	4798      	blx	r3
   114d2:	463a      	mov	r2, r7
   114d4:	4913      	ldr	r1, [pc, #76]	; (11524 <_GLOBAL__sub_I_ptrFansClass+0xac>)
   114d6:	4640      	mov	r0, r8
   114d8:	47b0      	blx	r6
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
   114da:	4e13      	ldr	r6, [pc, #76]	; (11528 <_GLOBAL__sub_I_ptrFansClass+0xb0>)
   114dc:	4620      	mov	r0, r4
   114de:	47b0      	blx	r6
   114e0:	341c      	adds	r4, #28
   114e2:	42a5      	cmp	r5, r4
   114e4:	d1fa      	bne.n	114dc <_GLOBAL__sub_I_ptrFansClass+0x64>
   114e6:	4e0a      	ldr	r6, [pc, #40]	; (11510 <_GLOBAL__sub_I_ptrFansClass+0x98>)
   114e8:	4632      	mov	r2, r6
   114ea:	4910      	ldr	r1, [pc, #64]	; (1152c <_GLOBAL__sub_I_ptrFansClass+0xb4>)
   114ec:	2000      	movs	r0, #0
   114ee:	4c09      	ldr	r4, [pc, #36]	; (11514 <_GLOBAL__sub_I_ptrFansClass+0x9c>)
   114f0:	47a0      	blx	r4
EvaporatorAndCondesatorFans_Class  fans;
   114f2:	4d0f      	ldr	r5, [pc, #60]	; (11530 <_GLOBAL__sub_I_ptrFansClass+0xb8>)
   114f4:	4628      	mov	r0, r5
   114f6:	4b0f      	ldr	r3, [pc, #60]	; (11534 <_GLOBAL__sub_I_ptrFansClass+0xbc>)
   114f8:	4798      	blx	r3
   114fa:	4632      	mov	r2, r6
   114fc:	490e      	ldr	r1, [pc, #56]	; (11538 <_GLOBAL__sub_I_ptrFansClass+0xc0>)
   114fe:	4628      	mov	r0, r5
   11500:	47a0      	blx	r4
   11502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11506:	bf00      	nop
   11508:	200035dc 	.word	0x200035dc
   1150c:	2000dff8 	.word	0x2000dff8
   11510:	20000000 	.word	0x20000000
   11514:	0001a0b5 	.word	0x0001a0b5
   11518:	2000df18 	.word	0x2000df18
   1151c:	00011339 	.word	0x00011339
   11520:	000111c9 	.word	0x000111c9
   11524:	000111cb 	.word	0x000111cb
   11528:	0000fcad 	.word	0x0000fcad
   1152c:	00011319 	.word	0x00011319
   11530:	20003758 	.word	0x20003758
   11534:	00011355 	.word	0x00011355
   11538:	000112fd 	.word	0x000112fd
   1153c:	0000faf1 	.word	0x0000faf1
   11540:	0000fb0d 	.word	0x0000fb0d
   11544:	00011549 	.word	0x00011549

00011548 <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
   11548:	b510      	push	{r4, lr}
   1154a:	4604      	mov	r4, r0
   1154c:	4b02      	ldr	r3, [pc, #8]	; (11558 <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
   1154e:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
   11550:	4b02      	ldr	r3, [pc, #8]	; (1155c <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
   11552:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
   11554:	4620      	mov	r0, r4
   11556:	bd10      	pop	{r4, pc}
   11558:	00011705 	.word	0x00011705
   1155c:	200037e4 	.word	0x200037e4

00011560 <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
   11560:	b510      	push	{r4, lr}
   11562:	4604      	mov	r4, r0
   11564:	4b01      	ldr	r3, [pc, #4]	; (1156c <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
   11566:	4798      	blx	r3
{
} //~EvaporatorFan_Class
   11568:	4620      	mov	r0, r4
   1156a:	bd10      	pop	{r4, pc}
   1156c:	00011707 	.word	0x00011707

00011570 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
		}
		return isOK;
	
	
}
uint8_t EvaporatorFan_Class::InitExpanderArray(MCP23008_Class** expanArray){
   11570:	1f0b      	subs	r3, r1, #4
   11572:	300c      	adds	r0, #12
   11574:	3114      	adds	r1, #20
	
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
			{
				expanders[i]=expanArray[i];
   11576:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1157a:	f840 2b04 	str.w	r2, [r0], #4
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
   1157e:	428b      	cmp	r3, r1
   11580:	d1f9      	bne.n	11576 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
			}
			return 0;
}
   11582:	2000      	movs	r0, #0
   11584:	4770      	bx	lr
	...

00011588 <_ZN19EvaporatorFan_Class10ReadStatusEv>:

uint8_t	EvaporatorFan_Class::ReadStatus(void){
   11588:	b538      	push	{r3, r4, r5, lr}
   1158a:	4604      	mov	r4, r0
	uint8_t r=expanders[1]->ReadGPIORegister();
   1158c:	6900      	ldr	r0, [r0, #16]
   1158e:	4b10      	ldr	r3, [pc, #64]	; (115d0 <_ZN19EvaporatorFan_Class10ReadStatusEv+0x48>)
   11590:	4798      	blx	r3
	
	
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanExtFault=r&(0x01<<(4*fanNumber));
   11592:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   11596:	0099      	lsls	r1, r3, #2
   11598:	fa40 f501 	asr.w	r5, r0, r1
   1159c:	5ce2      	ldrb	r2, [r4, r3]
   1159e:	f365 0282 	bfi	r2, r5, #2, #1
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanEnableFault=r&(0x02<<(4*fanNumber));
   115a2:	2502      	movs	r5, #2
   115a4:	408d      	lsls	r5, r1
   115a6:	4205      	tst	r5, r0
   115a8:	bf14      	ite	ne
   115aa:	2501      	movne	r5, #1
   115ac:	2500      	moveq	r5, #0
   115ae:	f365 0241 	bfi	r2, r5, #1, #1
	evaporatorFansStatus.inputs[fanNumber].iAlcEvaFanPwmFault=r&(0x04<<(4*fanNumber));
   115b2:	2504      	movs	r5, #4
   115b4:	408d      	lsls	r5, r1
   115b6:	4205      	tst	r5, r0
   115b8:	bf14      	ite	ne
   115ba:	2501      	movne	r5, #1
   115bc:	2500      	moveq	r5, #0
   115be:	f365 0200 	bfi	r2, r5, #0, #1
   115c2:	54e2      	strb	r2, [r4, r3]
	faults=r&(0x07<<(4*fanNumber));
   115c4:	2307      	movs	r3, #7
   115c6:	408b      	lsls	r3, r1
   115c8:	4018      	ands	r0, r3
   115ca:	b2c0      	uxtb	r0, r0
   115cc:	7160      	strb	r0, [r4, #5]
	return faults;
		
}
   115ce:	bd38      	pop	{r3, r4, r5, pc}
   115d0:	0000fdb9 	.word	0x0000fdb9

000115d4 <_ZN19EvaporatorFan_Class9SetEnableEb>:
uint8_t	EvaporatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,true);
	return uint8_t(enabled);
}
uint8_t	EvaporatorFan_Class::SetEnable(bool state){
   115d4:	b510      	push	{r4, lr}
   115d6:	4604      	mov	r4, r0
	uint8_t fanCorrrection=fanNumber==1?2:1;
   115d8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   115dc:	2b01      	cmp	r3, #1
	enabled=expanders[0]->WriteDigit(fanCorrrection,!state);
   115de:	f081 0201 	eor.w	r2, r1, #1
   115e2:	bf0c      	ite	eq
   115e4:	2102      	moveq	r1, #2
   115e6:	2101      	movne	r1, #1
   115e8:	68c0      	ldr	r0, [r0, #12]
   115ea:	4b02      	ldr	r3, [pc, #8]	; (115f4 <_ZN19EvaporatorFan_Class9SetEnableEb+0x20>)
   115ec:	4798      	blx	r3
   115ee:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
   115f0:	bd10      	pop	{r4, pc}
   115f2:	bf00      	nop
   115f4:	00010071 	.word	0x00010071

000115f8 <_ZN19EvaporatorFan_Class6SetPWMEh>:
uint8_t	EvaporatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,false)?false:true;
	return uint8_t(enabled);
}

uint8_t	EvaporatorFan_Class::SetPWM(uint8_t pwm){
   115f8:	b510      	push	{r4, lr}
   115fa:	4604      	mov	r4, r0
	pwmValue= expanders[4+fanNumber]->WriteGPIORegister(pwm);
   115fc:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   11600:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   11604:	69d8      	ldr	r0, [r3, #28]
   11606:	4b02      	ldr	r3, [pc, #8]	; (11610 <_ZN19EvaporatorFan_Class6SetPWMEh+0x18>)
   11608:	4798      	blx	r3
   1160a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	
	return pwmValue;
}
   1160e:	bd10      	pop	{r4, pc}
   11610:	0000fe3d 	.word	0x0000fe3d

00011614 <_ZN19EvaporatorFan_Class8SelfTestEv>:
	uint8_t value=expanders[0]->ReadGPIORegister();
	enabled=!(value&fanCorrrection);
	return enabled;
}

bool EvaporatorFan_Class::SelfTest(void){
   11614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11618:	4605      	mov	r5, r0
	bool result;
	SetEnable(false);
   1161a:	2100      	movs	r1, #0
   1161c:	4c0f      	ldr	r4, [pc, #60]	; (1165c <_ZN19EvaporatorFan_Class8SelfTestEv+0x48>)
   1161e:	47a0      	blx	r4
	SetPWM(0xff);
   11620:	21ff      	movs	r1, #255	; 0xff
   11622:	4628      	mov	r0, r5
   11624:	4b0e      	ldr	r3, [pc, #56]	; (11660 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
   11626:	4798      	blx	r3
	SetEnable(true);
   11628:	2101      	movs	r1, #1
   1162a:	4628      	mov	r0, r5
   1162c:	47a0      	blx	r4
   1162e:	24ff      	movs	r4, #255	; 0xff
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
	{
		SetPWM(i);
   11630:	4f0b      	ldr	r7, [pc, #44]	; (11660 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
		delay_us(10);
   11632:	f04f 080a 	mov.w	r8, #10
   11636:	4e0b      	ldr	r6, [pc, #44]	; (11664 <_ZN19EvaporatorFan_Class8SelfTestEv+0x50>)
		SetPWM(i);
   11638:	4621      	mov	r1, r4
   1163a:	4628      	mov	r0, r5
   1163c:	47b8      	blx	r7
		delay_us(10);
   1163e:	4640      	mov	r0, r8
   11640:	47b0      	blx	r6
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
   11642:	3c01      	subs	r4, #1
   11644:	b2e4      	uxtb	r4, r4
   11646:	2c0c      	cmp	r4, #12
   11648:	d1f6      	bne.n	11638 <_ZN19EvaporatorFan_Class8SelfTestEv+0x24>
	}

	ReadStatus();
   1164a:	4628      	mov	r0, r5
   1164c:	4b06      	ldr	r3, [pc, #24]	; (11668 <_ZN19EvaporatorFan_Class8SelfTestEv+0x54>)
   1164e:	4798      	blx	r3
	result=evaporatorFansStatus.inputs->niAlcEvaFanExtFault;
   11650:	7828      	ldrb	r0, [r5, #0]
	return result;
}
   11652:	f3c0 0080 	ubfx	r0, r0, #2, #1
   11656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1165a:	bf00      	nop
   1165c:	000115d5 	.word	0x000115d5
   11660:	000115f9 	.word	0x000115f9
   11664:	000035f1 	.word	0x000035f1
   11668:	00011589 	.word	0x00011589

0001166c <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class>:
bool EvaporatorFan_Class::InitEvaporator(uint8_t number, I2C_Sync_Class* i2cClass,MCP23008_Class** expandersArray){
   1166c:	b510      	push	{r4, lr}
   1166e:	4604      	mov	r4, r0
	i2c=i2cClass;
   11670:	6082      	str	r2, [r0, #8]
	fanNumber=number;
   11672:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
		if (i2c->isOK)
   11676:	7a52      	ldrb	r2, [r2, #9]
   11678:	b90a      	cbnz	r2, 1167e <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x12>
}
   1167a:	7920      	ldrb	r0, [r4, #4]
   1167c:	bd10      	pop	{r4, pc}
			InitExpanderArray(expandersArray);
   1167e:	4619      	mov	r1, r3
   11680:	4b0e      	ldr	r3, [pc, #56]	; (116bc <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x50>)
   11682:	4798      	blx	r3
			if (fanNumber==0)
   11684:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   11688:	b15b      	cbz	r3, 116a2 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x36>
			expanders[4+fanNumber]->SetPortOutput();
   1168a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1168e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   11692:	69d8      	ldr	r0, [r3, #28]
   11694:	4b0a      	ldr	r3, [pc, #40]	; (116c0 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x54>)
   11696:	4798      	blx	r3
			isOK=SelfTest();
   11698:	4620      	mov	r0, r4
   1169a:	4b0a      	ldr	r3, [pc, #40]	; (116c4 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x58>)
   1169c:	4798      	blx	r3
   1169e:	7120      	strb	r0, [r4, #4]
   116a0:	e7eb      	b.n	1167a <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
				expanders[0]->SetPortInput(0x70);
   116a2:	2170      	movs	r1, #112	; 0x70
   116a4:	68e0      	ldr	r0, [r4, #12]
   116a6:	4b08      	ldr	r3, [pc, #32]	; (116c8 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x5c>)
   116a8:	4798      	blx	r3
				expanders[0]->SetPortOutput(0x07);
   116aa:	2107      	movs	r1, #7
   116ac:	68e0      	ldr	r0, [r4, #12]
   116ae:	4b07      	ldr	r3, [pc, #28]	; (116cc <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x60>)
   116b0:	4798      	blx	r3
				expanders[1]->SetPortInput();
   116b2:	6920      	ldr	r0, [r4, #16]
   116b4:	4b06      	ldr	r3, [pc, #24]	; (116d0 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x64>)
   116b6:	4798      	blx	r3
   116b8:	e7e7      	b.n	1168a <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x1e>
   116ba:	bf00      	nop
   116bc:	00011571 	.word	0x00011571
   116c0:	0000ff31 	.word	0x0000ff31
   116c4:	00011615 	.word	0x00011615
   116c8:	0000febd 	.word	0x0000febd
   116cc:	0000ff65 	.word	0x0000ff65
   116d0:	0000fe79 	.word	0x0000fe79

000116d4 <_GLOBAL__sub_I_ptrEvaFanClass>:
}
   116d4:	b510      	push	{r4, lr}
   116d6:	4c05      	ldr	r4, [pc, #20]	; (116ec <_GLOBAL__sub_I_ptrEvaFanClass+0x18>)
   116d8:	4905      	ldr	r1, [pc, #20]	; (116f0 <_GLOBAL__sub_I_ptrEvaFanClass+0x1c>)
   116da:	4620      	mov	r0, r4
   116dc:	4b05      	ldr	r3, [pc, #20]	; (116f4 <_GLOBAL__sub_I_ptrEvaFanClass+0x20>)
   116de:	4798      	blx	r3
   116e0:	4a05      	ldr	r2, [pc, #20]	; (116f8 <_GLOBAL__sub_I_ptrEvaFanClass+0x24>)
   116e2:	4906      	ldr	r1, [pc, #24]	; (116fc <_GLOBAL__sub_I_ptrEvaFanClass+0x28>)
   116e4:	4620      	mov	r0, r4
   116e6:	4b06      	ldr	r3, [pc, #24]	; (11700 <_GLOBAL__sub_I_ptrEvaFanClass+0x2c>)
   116e8:	4798      	blx	r3
   116ea:	bd10      	pop	{r4, pc}
   116ec:	200037e8 	.word	0x200037e8
   116f0:	2000dff8 	.word	0x2000dff8
   116f4:	0000faf1 	.word	0x0000faf1
   116f8:	20000000 	.word	0x20000000
   116fc:	0000fb0d 	.word	0x0000fb0d
   11700:	0001a0b5 	.word	0x0001a0b5

00011704 <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
   11704:	4770      	bx	lr

00011706 <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
   11706:	4770      	bx	lr

00011708 <_ZN18Event_Logger_ClassD1Ev>:
	info_text=local_info_text;
	
} //Event_Logger_Class

// default destructor
Event_Logger_Class::~Event_Logger_Class()
   11708:	b510      	push	{r4, lr}
   1170a:	4604      	mov	r4, r0
   1170c:	4b06      	ldr	r3, [pc, #24]	; (11728 <_ZN18Event_Logger_ClassD1Ev+0x20>)
   1170e:	f840 3bb4 	str.w	r3, [r0], #180
   11712:	4b06      	ldr	r3, [pc, #24]	; (1172c <_ZN18Event_Logger_ClassD1Ev+0x24>)
   11714:	4798      	blx	r3
   11716:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   1171a:	4b05      	ldr	r3, [pc, #20]	; (11730 <_ZN18Event_Logger_ClassD1Ev+0x28>)
   1171c:	4798      	blx	r3
   1171e:	4620      	mov	r0, r4
   11720:	4b04      	ldr	r3, [pc, #16]	; (11734 <_ZN18Event_Logger_ClassD1Ev+0x2c>)
   11722:	4798      	blx	r3
{
} //~Event_Logger_Class
   11724:	4620      	mov	r0, r4
   11726:	bd10      	pop	{r4, pc}
   11728:	0001b03c 	.word	0x0001b03c
   1172c:	00011c85 	.word	0x00011c85
   11730:	00011beb 	.word	0x00011beb
   11734:	00019999 	.word	0x00019999

00011738 <_ZN18Event_Logger_ClassC1Ev>:
Event_Logger_Class::Event_Logger_Class()
   11738:	b510      	push	{r4, lr}
   1173a:	4604      	mov	r4, r0
   1173c:	4b11      	ldr	r3, [pc, #68]	; (11784 <_ZN18Event_Logger_ClassC1Ev+0x4c>)
   1173e:	4798      	blx	r3
   11740:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   11744:	4b10      	ldr	r3, [pc, #64]	; (11788 <_ZN18Event_Logger_ClassC1Ev+0x50>)
   11746:	4798      	blx	r3
   11748:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   1174c:	4b0f      	ldr	r3, [pc, #60]	; (1178c <_ZN18Event_Logger_ClassC1Ev+0x54>)
   1174e:	4798      	blx	r3
   11750:	4b0f      	ldr	r3, [pc, #60]	; (11790 <_ZN18Event_Logger_ClassC1Ev+0x58>)
   11752:	6023      	str	r3, [r4, #0]
#ifndef __EVENT_LOGGER_STRUCT_H__
#define __EVENT_LOGGER_STRUCT_H__
#include "compiler.h"
#define  DESCRIPTION_LENGHT_TEXT	64-12-1
#define END__OF_ENTRY			0x0a
struct __attribute__((__packed__))  Event_Log_Entry
   11754:	230a      	movs	r3, #10
   11756:	f884 36fb 	strb.w	r3, [r4, #1787]	; 0x6fb
	cal=&staticClock;
   1175a:	4b0e      	ldr	r3, [pc, #56]	; (11794 <_ZN18Event_Logger_ClassC1Ev+0x5c>)
   1175c:	f8c4 35f8 	str.w	r3, [r4, #1528]	; 0x5f8
	logger_text=(char*)text_buffer_local;
   11760:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
   11764:	f8c4 270c 	str.w	r2, [r4, #1804]	; 0x70c
	logger_module=(char*)module_buffer_local;
   11768:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
   1176c:	f8c4 2710 	str.w	r2, [r4, #1808]	; 0x710
	logger_number=(char*)number_buffer_local;
   11770:	f503 7388 	add.w	r3, r3, #272	; 0x110
   11774:	f8c4 3714 	str.w	r3, [r4, #1812]	; 0x714
	info_text=local_info_text;
   11778:	4b07      	ldr	r3, [pc, #28]	; (11798 <_ZN18Event_Logger_ClassC1Ev+0x60>)
   1177a:	f8c4 3718 	str.w	r3, [r4, #1816]	; 0x718
} //Event_Logger_Class
   1177e:	4620      	mov	r0, r4
   11780:	bd10      	pop	{r4, pc}
   11782:	bf00      	nop
   11784:	00019929 	.word	0x00019929
   11788:	00011be9 	.word	0x00011be9
   1178c:	00011c2d 	.word	0x00011c2d
   11790:	0001b03c 	.word	0x0001b03c
   11794:	20003800 	.word	0x20003800
   11798:	20000210 	.word	0x20000210

0001179c <_ZN18Event_Logger_Class16MakeNullDateTimeEv>:
	SetStackValue(stackLocalArray);
	memset(event_buffer_arrray,0,QSPI_ERBLK);
}

void Event_Logger_Class::MakeNullDateTime(void){
	nullDateTime.date.year  = 0x0;
   1179c:	2300      	movs	r3, #0
   1179e:	f8a0 3612 	strh.w	r3, [r0, #1554]	; 0x612
	nullDateTime.date.month = 0x0;
   117a2:	f880 3611 	strb.w	r3, [r0, #1553]	; 0x611
	nullDateTime.date.day   = 0x0;
   117a6:	f880 3610 	strb.w	r3, [r0, #1552]	; 0x610

	nullDateTime.time.hour = 0x0;
   117aa:	f880 360e 	strb.w	r3, [r0, #1550]	; 0x60e
	nullDateTime.time.min  = 0x0;
   117ae:	f880 360d 	strb.w	r3, [r0, #1549]	; 0x60d
	nullDateTime.time.sec  = 0x0;
   117b2:	f880 360c 	strb.w	r3, [r0, #1548]	; 0x60c
   117b6:	4770      	bx	lr

000117b8 <_ZN18Event_Logger_Class4InitEv>:
bool Event_Logger_Class::Init(void){
   117b8:	b538      	push	{r3, r4, r5, lr}
   117ba:	4604      	mov	r4, r0
	MakeNullDateTime();
   117bc:	4b0c      	ldr	r3, [pc, #48]	; (117f0 <_ZN18Event_Logger_Class4InitEv+0x38>)
   117be:	4798      	blx	r3
	cal->Init(nullDateTime);
   117c0:	f204 630c 	addw	r3, r4, #1548	; 0x60c
   117c4:	e893 0006 	ldmia.w	r3, {r1, r2}
   117c8:	f8d4 05f8 	ldr.w	r0, [r4, #1528]	; 0x5f8
   117cc:	4b09      	ldr	r3, [pc, #36]	; (117f4 <_ZN18Event_Logger_Class4InitEv+0x3c>)
   117ce:	4798      	blx	r3
	stackLocalArray=0;
   117d0:	2500      	movs	r5, #0
   117d2:	f8c4 5700 	str.w	r5, [r4, #1792]	; 0x700
	SetStackValue(stackLocalArray);
   117d6:	4629      	mov	r1, r5
   117d8:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   117dc:	4b06      	ldr	r3, [pc, #24]	; (117f8 <_ZN18Event_Logger_Class4InitEv+0x40>)
   117de:	4798      	blx	r3
	memset(event_buffer_arrray,0,QSPI_ERBLK);
   117e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   117e4:	4629      	mov	r1, r5
   117e6:	f8d4 05f0 	ldr.w	r0, [r4, #1520]	; 0x5f0
   117ea:	4b04      	ldr	r3, [pc, #16]	; (117fc <_ZN18Event_Logger_Class4InitEv+0x44>)
   117ec:	4798      	blx	r3
}
   117ee:	bd38      	pop	{r3, r4, r5, pc}
   117f0:	0001179d 	.word	0x0001179d
   117f4:	000199c1 	.word	0x000199c1
   117f8:	00011c95 	.word	0x00011c95
   117fc:	0001a769 	.word	0x0001a769

00011800 <_ZN18Event_Logger_Class9SaveEventEPh>:
}

void Event_Logger_Class::SaveEvent(uint8_t* text){
   11800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11804:	4604      	mov	r4, r0
   11806:	460d      	mov	r5, r1
	
	cal->GetDateTime(&currentDateTime);
   11808:	f8d0 05f8 	ldr.w	r0, [r0, #1528]	; 0x5f8
   1180c:	f204 6604 	addw	r6, r4, #1540	; 0x604
   11810:	6803      	ldr	r3, [r0, #0]
   11812:	681b      	ldr	r3, [r3, #0]
   11814:	4631      	mov	r1, r6
   11816:	4798      	blx	r3
	
	memcpy(&entry.code,info_text,8);
   11818:	f504 67d8 	add.w	r7, r4, #1728	; 0x6c0
   1181c:	f8d4 3718 	ldr.w	r3, [r4, #1816]	; 0x718
   11820:	681a      	ldr	r2, [r3, #0]
   11822:	685b      	ldr	r3, [r3, #4]
   11824:	f8c4 26c0 	str.w	r2, [r4, #1728]	; 0x6c0
   11828:	607b      	str	r3, [r7, #4]
	semiColonPosition=FindSemiColon(text);
   1182a:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
   1182e:	4629      	mov	r1, r5
   11830:	4640      	mov	r0, r8
   11832:	4b32      	ldr	r3, [pc, #200]	; (118fc <_ZN18Event_Logger_Class9SaveEventEPh+0xfc>)
   11834:	4798      	blx	r3
   11836:	f884 06fc 	strb.w	r0, [r4, #1788]	; 0x6fc
	if (semiColonPosition>0)
   1183a:	b130      	cbz	r0, 1184a <_ZN18Event_Logger_Class9SaveEventEPh+0x4a>
	{
		if (semiColonPosition<8)
   1183c:	2807      	cmp	r0, #7
   1183e:	dc2d      	bgt.n	1189c <_ZN18Event_Logger_Class9SaveEventEPh+0x9c>
		{
				memcpy(&entry.code,text,(uint32_t)semiColonPosition);
   11840:	4602      	mov	r2, r0
   11842:	4629      	mov	r1, r5
   11844:	4638      	mov	r0, r7
   11846:	4b2e      	ldr	r3, [pc, #184]	; (11900 <_ZN18Event_Logger_Class9SaveEventEPh+0x100>)
   11848:	4798      	blx	r3
		

	

	
	text_length=(uint8_t)strlen((char*)text);
   1184a:	4628      	mov	r0, r5
   1184c:	4b2d      	ldr	r3, [pc, #180]	; (11904 <_ZN18Event_Logger_Class9SaveEventEPh+0x104>)
   1184e:	4798      	blx	r3
   11850:	f884 071c 	strb.w	r0, [r4, #1820]	; 0x71c
   11854:	b2c2      	uxtb	r2, r0
	if (text_length>DESCRIPTION_LENGHT_TEXT)
   11856:	2a33      	cmp	r2, #51	; 0x33
   11858:	dd26      	ble.n	118a8 <_ZN18Event_Logger_Class9SaveEventEPh+0xa8>
	{
		ChopStringDescription(text);
   1185a:	4629      	mov	r1, r5
   1185c:	4640      	mov	r0, r8
   1185e:	4b2a      	ldr	r3, [pc, #168]	; (11908 <_ZN18Event_Logger_Class9SaveEventEPh+0x108>)
   11860:	4798      	blx	r3
		memcpy(&entry.description,&text[semiColonPosition],DESCRIPTION_LENGHT_TEXT);
   11862:	f894 16fc 	ldrb.w	r1, [r4, #1788]	; 0x6fc
   11866:	4429      	add	r1, r5
   11868:	f504 63d9 	add.w	r3, r4, #1736	; 0x6c8
   1186c:	f101 0230 	add.w	r2, r1, #48	; 0x30
   11870:	f8d1 e000 	ldr.w	lr, [r1]
   11874:	684f      	ldr	r7, [r1, #4]
   11876:	688d      	ldr	r5, [r1, #8]
   11878:	68c8      	ldr	r0, [r1, #12]
   1187a:	f8c3 e000 	str.w	lr, [r3]
   1187e:	605f      	str	r7, [r3, #4]
   11880:	609d      	str	r5, [r3, #8]
   11882:	60d8      	str	r0, [r3, #12]
   11884:	3110      	adds	r1, #16
   11886:	3310      	adds	r3, #16
   11888:	4291      	cmp	r1, r2
   1188a:	d1f1      	bne.n	11870 <_ZN18Event_Logger_Class9SaveEventEPh+0x70>
   1188c:	8808      	ldrh	r0, [r1, #0]
   1188e:	788a      	ldrb	r2, [r1, #2]
   11890:	8018      	strh	r0, [r3, #0]
   11892:	709a      	strb	r2, [r3, #2]
		text_length=DESCRIPTION_LENGHT_TEXT;
   11894:	2333      	movs	r3, #51	; 0x33
   11896:	f884 371c 	strb.w	r3, [r4, #1820]	; 0x71c
   1189a:	e012      	b.n	118c2 <_ZN18Event_Logger_Class9SaveEventEPh+0xc2>
				memcpy(&entry.code,text,8);
   1189c:	682a      	ldr	r2, [r5, #0]
   1189e:	686b      	ldr	r3, [r5, #4]
   118a0:	f8c4 26c0 	str.w	r2, [r4, #1728]	; 0x6c0
   118a4:	607b      	str	r3, [r7, #4]
   118a6:	e7d0      	b.n	1184a <_ZN18Event_Logger_Class9SaveEventEPh+0x4a>
	} 
	else
	{
		memcpy(&entry.description,&text[semiColonPosition],(uint32_t)text_length);
   118a8:	f894 16fc 	ldrb.w	r1, [r4, #1788]	; 0x6fc
   118ac:	4429      	add	r1, r5
   118ae:	f504 60d9 	add.w	r0, r4, #1736	; 0x6c8
   118b2:	4b13      	ldr	r3, [pc, #76]	; (11900 <_ZN18Event_Logger_Class9SaveEventEPh+0x100>)
   118b4:	4798      	blx	r3
		entry.description[text_length]=END__OF_ENTRY;
   118b6:	f894 371c 	ldrb.w	r3, [r4, #1820]	; 0x71c
   118ba:	4423      	add	r3, r4
   118bc:	220a      	movs	r2, #10
   118be:	f883 26c8 	strb.w	r2, [r3, #1736]	; 0x6c8
	}
	
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
   118c2:	f8d4 05f8 	ldr.w	r0, [r4, #1528]	; 0x5f8
   118c6:	6803      	ldr	r3, [r0, #0]
   118c8:	685b      	ldr	r3, [r3, #4]
   118ca:	4631      	mov	r1, r6
   118cc:	4798      	blx	r3
   118ce:	f8c4 0704 	str.w	r0, [r4, #1796]	; 0x704
	if (currentTimestamp>0)
   118d2:	b978      	cbnz	r0, 118f4 <_ZN18Event_Logger_Class9SaveEventEPh+0xf4>
	{
		entry.timestamp=currentTimestamp;
	} 
	else
	{
		entry.timestamp=0xffffffff;
   118d4:	f04f 33ff 	mov.w	r3, #4294967295
   118d8:	f8c4 36bc 	str.w	r3, [r4, #1724]	; 0x6bc
	}
	
	StackEventEntry(&entry,text_length+1);
   118dc:	f894 271c 	ldrb.w	r2, [r4, #1820]	; 0x71c
   118e0:	3201      	adds	r2, #1
   118e2:	b2d2      	uxtb	r2, r2
   118e4:	f204 61bc 	addw	r1, r4, #1724	; 0x6bc
   118e8:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   118ec:	4b07      	ldr	r3, [pc, #28]	; (1190c <_ZN18Event_Logger_Class9SaveEventEPh+0x10c>)
   118ee:	4798      	blx	r3
   118f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		entry.timestamp=currentTimestamp;
   118f4:	f8c4 06bc 	str.w	r0, [r4, #1724]	; 0x6bc
   118f8:	e7f0      	b.n	118dc <_ZN18Event_Logger_Class9SaveEventEPh+0xdc>
   118fa:	bf00      	nop
   118fc:	00011c0d 	.word	0x00011c0d
   11900:	0001a635 	.word	0x0001a635
   11904:	0001a941 	.word	0x0001a941
   11908:	00011bed 	.word	0x00011bed
   1190c:	00011cbd 	.word	0x00011cbd

00011910 <_ZN18Event_Logger_Class16SaveInstationLogEv>:
	

}

void Event_Logger_Class::SaveInstationLog(void){
   11910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11914:	b086      	sub	sp, #24
   11916:	4604      	mov	r4, r0
	
	uint8_t text[]="Initialization Finished";
   11918:	466d      	mov	r5, sp
   1191a:	4e30      	ldr	r6, [pc, #192]	; (119dc <_ZN18Event_Logger_Class16SaveInstationLogEv+0xcc>)
   1191c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1191e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11920:	e896 0003 	ldmia.w	r6, {r0, r1}
   11924:	e885 0003 	stmia.w	r5, {r0, r1}
	
	cal->GetDateTime(&currentDateTime);
   11928:	f8d4 05f8 	ldr.w	r0, [r4, #1528]	; 0x5f8
   1192c:	f204 6804 	addw	r8, r4, #1540	; 0x604
   11930:	6803      	ldr	r3, [r0, #0]
   11932:	681b      	ldr	r3, [r3, #0]
   11934:	4641      	mov	r1, r8
   11936:	4798      	blx	r3
	
	memcpy(&entry.code,info_text,8);
   11938:	f8d4 3718 	ldr.w	r3, [r4, #1816]	; 0x718
   1193c:	681a      	ldr	r2, [r3, #0]
   1193e:	685b      	ldr	r3, [r3, #4]
   11940:	f8c4 26c0 	str.w	r2, [r4, #1728]	; 0x6c0
   11944:	f8c4 36c4 	str.w	r3, [r4, #1732]	; 0x6c4

	text_length=(uint8_t)strlen((char*)text);
   11948:	4668      	mov	r0, sp
   1194a:	4b25      	ldr	r3, [pc, #148]	; (119e0 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xd0>)
   1194c:	4798      	blx	r3
   1194e:	f884 071c 	strb.w	r0, [r4, #1820]	; 0x71c
   11952:	b2c2      	uxtb	r2, r0
	if (text_length>DESCRIPTION_LENGHT_TEXT)
   11954:	2a33      	cmp	r2, #51	; 0x33
   11956:	dd1b      	ble.n	11990 <_ZN18Event_Logger_Class16SaveInstationLogEv+0x80>
	{
		ChopStringDescription(text);
   11958:	4669      	mov	r1, sp
   1195a:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   1195e:	4b21      	ldr	r3, [pc, #132]	; (119e4 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xd4>)
   11960:	4798      	blx	r3
		memcpy(&entry.description,text,DESCRIPTION_LENGHT_TEXT);
   11962:	466d      	mov	r5, sp
   11964:	f504 66d9 	add.w	r6, r4, #1736	; 0x6c8
   11968:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
   1196c:	462f      	mov	r7, r5
   1196e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   11970:	6030      	str	r0, [r6, #0]
   11972:	6071      	str	r1, [r6, #4]
   11974:	60b2      	str	r2, [r6, #8]
   11976:	60f3      	str	r3, [r6, #12]
   11978:	463d      	mov	r5, r7
   1197a:	3610      	adds	r6, #16
   1197c:	4577      	cmp	r7, lr
   1197e:	d1f5      	bne.n	1196c <_ZN18Event_Logger_Class16SaveInstationLogEv+0x5c>
   11980:	883a      	ldrh	r2, [r7, #0]
   11982:	78bb      	ldrb	r3, [r7, #2]
   11984:	8032      	strh	r2, [r6, #0]
   11986:	70b3      	strb	r3, [r6, #2]
		text_length=DESCRIPTION_LENGHT_TEXT;
   11988:	2333      	movs	r3, #51	; 0x33
   1198a:	f884 371c 	strb.w	r3, [r4, #1820]	; 0x71c
   1198e:	e00a      	b.n	119a6 <_ZN18Event_Logger_Class16SaveInstationLogEv+0x96>
	}
	else
	{
		memcpy(&entry.description,text,(uint32_t)text_length);
   11990:	4669      	mov	r1, sp
   11992:	f504 60d9 	add.w	r0, r4, #1736	; 0x6c8
   11996:	4b14      	ldr	r3, [pc, #80]	; (119e8 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xd8>)
   11998:	4798      	blx	r3
		entry.description[text_length]=END__OF_ENTRY;
   1199a:	f894 371c 	ldrb.w	r3, [r4, #1820]	; 0x71c
   1199e:	4423      	add	r3, r4
   119a0:	220a      	movs	r2, #10
   119a2:	f883 26c8 	strb.w	r2, [r3, #1736]	; 0x6c8
	}
	
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
   119a6:	f8d4 05f8 	ldr.w	r0, [r4, #1528]	; 0x5f8
   119aa:	6803      	ldr	r3, [r0, #0]
   119ac:	685b      	ldr	r3, [r3, #4]
   119ae:	4641      	mov	r1, r8
   119b0:	4798      	blx	r3
   119b2:	f8c4 0704 	str.w	r0, [r4, #1796]	; 0x704
	if (currentTimestamp>0)
   119b6:	b968      	cbnz	r0, 119d4 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xc4>
	{
		entry.timestamp=currentTimestamp;
	}
	else
	{
		entry.timestamp=0xffffffff;
   119b8:	f04f 33ff 	mov.w	r3, #4294967295
   119bc:	f8c4 36bc 	str.w	r3, [r4, #1724]	; 0x6bc
	}
	
	StackEventEntry(&entry,0xff);
   119c0:	22ff      	movs	r2, #255	; 0xff
   119c2:	f204 61bc 	addw	r1, r4, #1724	; 0x6bc
   119c6:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   119ca:	4b08      	ldr	r3, [pc, #32]	; (119ec <_ZN18Event_Logger_Class16SaveInstationLogEv+0xdc>)
   119cc:	4798      	blx	r3
	

}
   119ce:	b006      	add	sp, #24
   119d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		entry.timestamp=currentTimestamp;
   119d4:	f8c4 06bc 	str.w	r0, [r4, #1724]	; 0x6bc
   119d8:	e7f2      	b.n	119c0 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xb0>
   119da:	bf00      	nop
   119dc:	0001b044 	.word	0x0001b044
   119e0:	0001a941 	.word	0x0001a941
   119e4:	00011bed 	.word	0x00011bed
   119e8:	0001a635 	.word	0x0001a635
   119ec:	00011cbd 	.word	0x00011cbd

000119f0 <_ZN18Event_Logger_Class19GetCurrentTimeStampEv>:

uint32_t Event_Logger_Class::GetCurrentTimeStamp(void){
   119f0:	b538      	push	{r3, r4, r5, lr}
   119f2:	4604      	mov	r4, r0
	cal->GetDateTime(&currentDateTime);
   119f4:	f8d0 05f8 	ldr.w	r0, [r0, #1528]	; 0x5f8
   119f8:	f204 6504 	addw	r5, r4, #1540	; 0x604
   119fc:	6803      	ldr	r3, [r0, #0]
   119fe:	681b      	ldr	r3, [r3, #0]
   11a00:	4629      	mov	r1, r5
   11a02:	4798      	blx	r3
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
   11a04:	f8d4 05f8 	ldr.w	r0, [r4, #1528]	; 0x5f8
   11a08:	6803      	ldr	r3, [r0, #0]
   11a0a:	685b      	ldr	r3, [r3, #4]
   11a0c:	4629      	mov	r1, r5
   11a0e:	4798      	blx	r3
   11a10:	f8c4 0704 	str.w	r0, [r4, #1796]	; 0x704
	return currentTimestamp;
}
   11a14:	bd38      	pop	{r3, r4, r5, pc}
	...

00011a18 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh>:

void Event_Logger_Class::SaveEventIndexResult(char *text,uint8_t index, uint8_t result){
   11a18:	b570      	push	{r4, r5, r6, lr}
   11a1a:	4604      	mov	r4, r0
   11a1c:	460d      	mov	r5, r1
   11a1e:	4610      	mov	r0, r2
	task_result	=(TaskResult)result;
   11a20:	f884 3708 	strb.w	r3, [r4, #1800]	; 0x708

	itoa(index,logger_number,10);
   11a24:	220a      	movs	r2, #10
   11a26:	f8d4 1714 	ldr.w	r1, [r4, #1812]	; 0x714
   11a2a:	4b20      	ldr	r3, [pc, #128]	; (11aac <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x94>)
   11a2c:	4798      	blx	r3
	strcpy(logger_text,text);
   11a2e:	4629      	mov	r1, r5
   11a30:	f8d4 070c 	ldr.w	r0, [r4, #1804]	; 0x70c
   11a34:	4b1e      	ldr	r3, [pc, #120]	; (11ab0 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x98>)
   11a36:	4798      	blx	r3
	logger_module=strcat(logger_text,logger_number);
   11a38:	f8d4 1714 	ldr.w	r1, [r4, #1812]	; 0x714
   11a3c:	f8d4 070c 	ldr.w	r0, [r4, #1804]	; 0x70c
   11a40:	4b1c      	ldr	r3, [pc, #112]	; (11ab4 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x9c>)
   11a42:	4798      	blx	r3
   11a44:	4605      	mov	r5, r0
   11a46:	f8c4 0710 	str.w	r0, [r4, #1808]	; 0x710
	switch (task_result)
   11a4a:	f894 3708 	ldrb.w	r3, [r4, #1800]	; 0x708
   11a4e:	b173      	cbz	r3, 11a6e <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x56>
   11a50:	2b01      	cmp	r3, #1
   11a52:	d01e      	beq.n	11a92 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x7a>
		case FAILLED :
			logger_module=strcat(logger_module," FAILLED");
		
		break;
		default:
			logger_module=strcat(logger_module," UNKNOWN");
   11a54:	4b18      	ldr	r3, [pc, #96]	; (11ab8 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa0>)
   11a56:	4798      	blx	r3
   11a58:	4606      	mov	r6, r0
   11a5a:	182a      	adds	r2, r5, r0
   11a5c:	4b17      	ldr	r3, [pc, #92]	; (11abc <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa4>)
   11a5e:	cb03      	ldmia	r3!, {r0, r1}
   11a60:	51a8      	str	r0, [r5, r6]
   11a62:	6051      	str	r1, [r2, #4]
   11a64:	781b      	ldrb	r3, [r3, #0]
   11a66:	7213      	strb	r3, [r2, #8]
   11a68:	f8c4 5710 	str.w	r5, [r4, #1808]	; 0x710
		/* Your code here */
		break;
   11a6c:	e00b      	b.n	11a86 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x6e>
			logger_module=strcat(logger_module," SUCCESS");
   11a6e:	4b12      	ldr	r3, [pc, #72]	; (11ab8 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa0>)
   11a70:	4798      	blx	r3
   11a72:	4606      	mov	r6, r0
   11a74:	182a      	adds	r2, r5, r0
   11a76:	4b12      	ldr	r3, [pc, #72]	; (11ac0 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa8>)
   11a78:	cb03      	ldmia	r3!, {r0, r1}
   11a7a:	51a8      	str	r0, [r5, r6]
   11a7c:	6051      	str	r1, [r2, #4]
   11a7e:	781b      	ldrb	r3, [r3, #0]
   11a80:	7213      	strb	r3, [r2, #8]
   11a82:	f8c4 5710 	str.w	r5, [r4, #1808]	; 0x710
	
}

void Event_Logger_Class::SaveEvent(char const * text){
	
	SaveEvent((uint8_t*)text);
   11a86:	f8d4 1710 	ldr.w	r1, [r4, #1808]	; 0x710
   11a8a:	4620      	mov	r0, r4
   11a8c:	4b0d      	ldr	r3, [pc, #52]	; (11ac4 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xac>)
   11a8e:	4798      	blx	r3
   11a90:	bd70      	pop	{r4, r5, r6, pc}
			logger_module=strcat(logger_module," FAILLED");
   11a92:	4b09      	ldr	r3, [pc, #36]	; (11ab8 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa0>)
   11a94:	4798      	blx	r3
   11a96:	4606      	mov	r6, r0
   11a98:	182a      	adds	r2, r5, r0
   11a9a:	4b0b      	ldr	r3, [pc, #44]	; (11ac8 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xb0>)
   11a9c:	cb03      	ldmia	r3!, {r0, r1}
   11a9e:	51a8      	str	r0, [r5, r6]
   11aa0:	6051      	str	r1, [r2, #4]
   11aa2:	781b      	ldrb	r3, [r3, #0]
   11aa4:	7213      	strb	r3, [r2, #8]
   11aa6:	f8c4 5710 	str.w	r5, [r4, #1808]	; 0x710
		break;
   11aaa:	e7ec      	b.n	11a86 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x6e>
   11aac:	00018089 	.word	0x00018089
   11ab0:	0001a885 	.word	0x0001a885
   11ab4:	0001a845 	.word	0x0001a845
   11ab8:	0001a941 	.word	0x0001a941
   11abc:	0001b074 	.word	0x0001b074
   11ac0:	0001b05c 	.word	0x0001b05c
   11ac4:	00011801 	.word	0x00011801
   11ac8:	0001b068 	.word	0x0001b068

00011acc <_ZN18Event_Logger_Class9SaveEventEPKc>:
void Event_Logger_Class::SaveEvent(char const * text){
   11acc:	b508      	push	{r3, lr}
	SaveEvent((uint8_t*)text);
   11ace:	4b01      	ldr	r3, [pc, #4]	; (11ad4 <_ZN18Event_Logger_Class9SaveEventEPKc+0x8>)
   11ad0:	4798      	blx	r3
   11ad2:	bd08      	pop	{r3, pc}
   11ad4:	00011801 	.word	0x00011801

00011ad8 <_GLOBAL__sub_I_local_info_text>:
}

 Event_Logger_Class	logger;
   11ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   11adc:	4c30      	ldr	r4, [pc, #192]	; (11ba0 <_GLOBAL__sub_I_local_info_text+0xc8>)
   11ade:	f504 758c 	add.w	r5, r4, #280	; 0x118
   11ae2:	4930      	ldr	r1, [pc, #192]	; (11ba4 <_GLOBAL__sub_I_local_info_text+0xcc>)
   11ae4:	4628      	mov	r0, r5
   11ae6:	4f30      	ldr	r7, [pc, #192]	; (11ba8 <_GLOBAL__sub_I_local_info_text+0xd0>)
   11ae8:	47b8      	blx	r7
   11aea:	4e30      	ldr	r6, [pc, #192]	; (11bac <_GLOBAL__sub_I_local_info_text+0xd4>)
   11aec:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 11be4 <_GLOBAL__sub_I_local_info_text+0x10c>
   11af0:	4632      	mov	r2, r6
   11af2:	4641      	mov	r1, r8
   11af4:	4628      	mov	r0, r5
   11af6:	4d2e      	ldr	r5, [pc, #184]	; (11bb0 <_GLOBAL__sub_I_local_info_text+0xd8>)
   11af8:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   11afa:	f504 799c 	add.w	r9, r4, #312	; 0x138
   11afe:	492d      	ldr	r1, [pc, #180]	; (11bb4 <_GLOBAL__sub_I_local_info_text+0xdc>)
   11b00:	4648      	mov	r0, r9
   11b02:	47b8      	blx	r7
   11b04:	4632      	mov	r2, r6
   11b06:	4641      	mov	r1, r8
   11b08:	4648      	mov	r0, r9
   11b0a:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   11b0c:	f504 79ac 	add.w	r9, r4, #344	; 0x158
   11b10:	4929      	ldr	r1, [pc, #164]	; (11bb8 <_GLOBAL__sub_I_local_info_text+0xe0>)
   11b12:	4648      	mov	r0, r9
   11b14:	47b8      	blx	r7
   11b16:	4632      	mov	r2, r6
   11b18:	4641      	mov	r1, r8
   11b1a:	4648      	mov	r0, r9
   11b1c:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   11b1e:	f504 79bc 	add.w	r9, r4, #376	; 0x178
   11b22:	4926      	ldr	r1, [pc, #152]	; (11bbc <_GLOBAL__sub_I_local_info_text+0xe4>)
   11b24:	4648      	mov	r0, r9
   11b26:	47b8      	blx	r7
   11b28:	4632      	mov	r2, r6
   11b2a:	4641      	mov	r1, r8
   11b2c:	4648      	mov	r0, r9
   11b2e:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   11b30:	f504 79cc 	add.w	r9, r4, #408	; 0x198
   11b34:	4922      	ldr	r1, [pc, #136]	; (11bc0 <_GLOBAL__sub_I_local_info_text+0xe8>)
   11b36:	4648      	mov	r0, r9
   11b38:	47b8      	blx	r7
   11b3a:	4632      	mov	r2, r6
   11b3c:	4641      	mov	r1, r8
   11b3e:	4648      	mov	r0, r9
   11b40:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   11b42:	f504 79dc 	add.w	r9, r4, #440	; 0x1b8
   11b46:	491f      	ldr	r1, [pc, #124]	; (11bc4 <_GLOBAL__sub_I_local_info_text+0xec>)
   11b48:	4648      	mov	r0, r9
   11b4a:	47b8      	blx	r7
   11b4c:	4632      	mov	r2, r6
   11b4e:	4641      	mov	r1, r8
   11b50:	4648      	mov	r0, r9
   11b52:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   11b54:	f504 79ec 	add.w	r9, r4, #472	; 0x1d8
   11b58:	491b      	ldr	r1, [pc, #108]	; (11bc8 <_GLOBAL__sub_I_local_info_text+0xf0>)
   11b5a:	4648      	mov	r0, r9
   11b5c:	47b8      	blx	r7
   11b5e:	4632      	mov	r2, r6
   11b60:	4641      	mov	r1, r8
   11b62:	4648      	mov	r0, r9
   11b64:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   11b66:	f504 79fc 	add.w	r9, r4, #504	; 0x1f8
   11b6a:	4918      	ldr	r1, [pc, #96]	; (11bcc <_GLOBAL__sub_I_local_info_text+0xf4>)
   11b6c:	4648      	mov	r0, r9
   11b6e:	47b8      	blx	r7
   11b70:	4632      	mov	r2, r6
   11b72:	4641      	mov	r1, r8
   11b74:	4648      	mov	r0, r9
   11b76:	47a8      	blx	r5
static Calendar_Class	staticClock(&DATETIME_CLOCK);
   11b78:	4915      	ldr	r1, [pc, #84]	; (11bd0 <_GLOBAL__sub_I_local_info_text+0xf8>)
   11b7a:	4620      	mov	r0, r4
   11b7c:	4b15      	ldr	r3, [pc, #84]	; (11bd4 <_GLOBAL__sub_I_local_info_text+0xfc>)
   11b7e:	4798      	blx	r3
   11b80:	4632      	mov	r2, r6
   11b82:	4915      	ldr	r1, [pc, #84]	; (11bd8 <_GLOBAL__sub_I_local_info_text+0x100>)
   11b84:	4620      	mov	r0, r4
   11b86:	47a8      	blx	r5
 Event_Logger_Class	logger;
   11b88:	f504 7406 	add.w	r4, r4, #536	; 0x218
   11b8c:	4620      	mov	r0, r4
   11b8e:	4b13      	ldr	r3, [pc, #76]	; (11bdc <_GLOBAL__sub_I_local_info_text+0x104>)
   11b90:	4798      	blx	r3
   11b92:	4632      	mov	r2, r6
   11b94:	4912      	ldr	r1, [pc, #72]	; (11be0 <_GLOBAL__sub_I_local_info_text+0x108>)
   11b96:	4620      	mov	r0, r4
   11b98:	47a8      	blx	r5
   11b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11b9e:	bf00      	nop
   11ba0:	20003800 	.word	0x20003800
   11ba4:	2000dec8 	.word	0x2000dec8
   11ba8:	000101a9 	.word	0x000101a9
   11bac:	20000000 	.word	0x20000000
   11bb0:	0001a0b5 	.word	0x0001a0b5
   11bb4:	2000df5c 	.word	0x2000df5c
   11bb8:	2000e080 	.word	0x2000e080
   11bbc:	2000df7c 	.word	0x2000df7c
   11bc0:	2000e040 	.word	0x2000e040
   11bc4:	2000e060 	.word	0x2000e060
   11bc8:	2000df38 	.word	0x2000df38
   11bcc:	2000dfd8 	.word	0x2000dfd8
   11bd0:	2000e0a0 	.word	0x2000e0a0
   11bd4:	0001995d 	.word	0x0001995d
   11bd8:	00019999 	.word	0x00019999
   11bdc:	00011739 	.word	0x00011739
   11be0:	00011709 	.word	0x00011709
   11be4:	000101e1 	.word	0x000101e1

00011be8 <_ZN19Event_Logger_StructC1Ev>:
#include "string.h"

// default constructor
Event_Logger_Struct::Event_Logger_Struct()
{
} //Event_Logger_Struct
   11be8:	4770      	bx	lr

00011bea <_ZN19Event_Logger_StructD1Ev>:

// default destructor
Event_Logger_Struct::~Event_Logger_Struct()
{
} //~Event_Logger_Struct
   11bea:	4770      	bx	lr

00011bec <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh>:

void	Event_Logger_Struct::ChopStringDescription(uint8_t* str){
   11bec:	b538      	push	{r3, r4, r5, lr}
   11bee:	4605      	mov	r5, r0
   11bf0:	460c      	mov	r4, r1
	//RemoveSpaces((char *)str);
	sizeText=strlen((char *)str);
   11bf2:	4608      	mov	r0, r1
   11bf4:	4b04      	ldr	r3, [pc, #16]	; (11c08 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh+0x1c>)
   11bf6:	4798      	blx	r3
   11bf8:	7028      	strb	r0, [r5, #0]
	if (sizeText>44)
   11bfa:	b2c0      	uxtb	r0, r0
   11bfc:	282c      	cmp	r0, #44	; 0x2c
	{
		str[44]=END__OF_ENTRY;
   11bfe:	bfc4      	itt	gt
   11c00:	230a      	movgt	r3, #10
   11c02:	f884 302c 	strbgt.w	r3, [r4, #44]	; 0x2c
   11c06:	bd38      	pop	{r3, r4, r5, pc}
   11c08:	0001a941 	.word	0x0001a941

00011c0c <_ZN19Event_Logger_Struct13FindSemiColonEPh>:
uint8_t Event_Logger_Struct::FindSemiColon(uint8_t *str)
{
	
	// Traverse the given string. If current character
	// is not space, then place it at index 'count++'
	for (uint8_t i = 0; str[i]; i++){
   11c0c:	7808      	ldrb	r0, [r1, #0]
   11c0e:	b148      	cbz	r0, 11c24 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x18>
		if (str[i] == ':'){
   11c10:	283a      	cmp	r0, #58	; 0x3a
   11c12:	d009      	beq.n	11c28 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1c>
   11c14:	2300      	movs	r3, #0
	for (uint8_t i = 0; str[i]; i++){
   11c16:	3301      	adds	r3, #1
   11c18:	b2db      	uxtb	r3, r3
   11c1a:	5cc8      	ldrb	r0, [r1, r3]
   11c1c:	b118      	cbz	r0, 11c26 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1a>
		if (str[i] == ':'){
   11c1e:	283a      	cmp	r0, #58	; 0x3a
   11c20:	d1f9      	bne.n	11c16 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0xa>
	for (uint8_t i = 0; str[i]; i++){
   11c22:	4618      	mov	r0, r3
			return i;
		}
	}
	
	return 0;
}
   11c24:	4770      	bx	lr
   11c26:	4770      	bx	lr
	for (uint8_t i = 0; str[i]; i++){
   11c28:	2000      	movs	r0, #0
   11c2a:	4770      	bx	lr

00011c2c <_ZN15DataLoger_ClassC1Ev>:

static uint8_t staticEventLogs[QSPI_ERBLK];
static uint32_t local_memory_event_stack;

// default constructor
DataLoger_Class::DataLoger_Class()
   11c2c:	b510      	push	{r4, lr}
   11c2e:	4604      	mov	r4, r0
   11c30:	4b0f      	ldr	r3, [pc, #60]	; (11c70 <_ZN15DataLoger_ClassC1Ev+0x44>)
   11c32:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   11c34:	f44f 7200 	mov.w	r2, #512	; 0x200
   11c38:	2100      	movs	r1, #0
   11c3a:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
   11c3e:	4b0d      	ldr	r3, [pc, #52]	; (11c74 <_ZN15DataLoger_ClassC1Ev+0x48>)
   11c40:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   11c42:	2300      	movs	r3, #0
   11c44:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
  _iTail = 0;
   11c48:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
   11c4c:	230a      	movs	r3, #10
   11c4e:	f884 3533 	strb.w	r3, [r4, #1331]	; 0x533
{
	stackPointer=&staticEventLogs[0];
   11c52:	4a09      	ldr	r2, [pc, #36]	; (11c78 <_ZN15DataLoger_ClassC1Ev+0x4c>)
   11c54:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
	logger.memory_event_stack=&local_memory_event_stack;
   11c58:	4b08      	ldr	r3, [pc, #32]	; (11c7c <_ZN15DataLoger_ClassC1Ev+0x50>)
   11c5a:	4909      	ldr	r1, [pc, #36]	; (11c80 <_ZN15DataLoger_ClassC1Ev+0x54>)
   11c5c:	f8c3 15ec 	str.w	r1, [r3, #1516]	; 0x5ec
	logger.event_buffer_arrray=staticEventLogs;
   11c60:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	logger.event_buffer_arrray_stack=&stackValue;
   11c64:	f504 629e 	add.w	r2, r4, #1264	; 0x4f0
   11c68:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	
} //DataLoger_Class
   11c6c:	4620      	mov	r0, r4
   11c6e:	bd10      	pop	{r4, pc}
   11c70:	000194dd 	.word	0x000194dd
   11c74:	0001a769 	.word	0x0001a769
   11c78:	20004138 	.word	0x20004138
   11c7c:	20003a18 	.word	0x20003a18
   11c80:	20005138 	.word	0x20005138

00011c84 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
   11c84:	b510      	push	{r4, lr}
   11c86:	4604      	mov	r4, r0
   11c88:	4b01      	ldr	r3, [pc, #4]	; (11c90 <_ZN15DataLoger_ClassD1Ev+0xc>)
   11c8a:	4798      	blx	r3
{
} //~DataLoger_Class
   11c8c:	4620      	mov	r0, r4
   11c8e:	bd10      	pop	{r4, pc}
   11c90:	00019519 	.word	0x00019519

00011c94 <_ZN15DataLoger_Class13SetStackValueEm>:
	return 0;
}

void	DataLoger_Class::SetStackValue(uint32_t stk){
	
	if (stk==0)
   11c94:	460b      	mov	r3, r1
   11c96:	b911      	cbnz	r1, 11c9e <_ZN15DataLoger_Class13SetStackValueEm+0xa>
	{
		stackPointer=&staticEventLogs[stk];
   11c98:	4a02      	ldr	r2, [pc, #8]	; (11ca4 <_ZN15DataLoger_Class13SetStackValueEm+0x10>)
   11c9a:	f8c0 2534 	str.w	r2, [r0, #1332]	; 0x534
	} 
	else
	{
	}
	stackValue=stk;
   11c9e:	f8c0 34f0 	str.w	r3, [r0, #1264]	; 0x4f0
   11ca2:	4770      	bx	lr
   11ca4:	20004138 	.word	0x20004138

00011ca8 <_ZN15DataLoger_Class11IsStackFullEv>:
	
	return stackValue;
}

bool	DataLoger_Class::IsStackFull(void){
	if (stackValue+(sizeof(Event_Log_Entry))>QSPI_ERBLK)
   11ca8:	f8d0 04f0 	ldr.w	r0, [r0, #1264]	; 0x4f0
   11cac:	3040      	adds	r0, #64	; 0x40
	} 
	else
	{
		return false;
	}
   11cae:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   11cb2:	bf94      	ite	ls
   11cb4:	2000      	movls	r0, #0
   11cb6:	2001      	movhi	r0, #1
   11cb8:	4770      	bx	lr
	...

00011cbc <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh>:
uint32_t DataLoger_Class::StackEventEntry(Event_Log_Entry *ent, uint8_t len){
   11cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11cbe:	b087      	sub	sp, #28
   11cc0:	4604      	mov	r4, r0
   11cc2:	460e      	mov	r6, r1
	if (len==0xff)
   11cc4:	2aff      	cmp	r2, #255	; 0xff
   11cc6:	d018      	beq.n	11cfa <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x3e>
   11cc8:	4615      	mov	r5, r2
		if (IsStackFull())
   11cca:	4b29      	ldr	r3, [pc, #164]	; (11d70 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb4>)
   11ccc:	4798      	blx	r3
   11cce:	2800      	cmp	r0, #0
   11cd0:	d13b      	bne.n	11d4a <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x8e>
		memcpy(&stackPointer[stackValue],ent,12+len);
   11cd2:	f8d4 0534 	ldr.w	r0, [r4, #1332]	; 0x534
   11cd6:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   11cda:	f105 020c 	add.w	r2, r5, #12
   11cde:	4631      	mov	r1, r6
   11ce0:	4418      	add	r0, r3
   11ce2:	4b24      	ldr	r3, [pc, #144]	; (11d74 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb8>)
   11ce4:	4798      	blx	r3
		stackValue+=12+len;
   11ce6:	f8d4 24f0 	ldr.w	r2, [r4, #1264]	; 0x4f0
   11cea:	320c      	adds	r2, #12
   11cec:	442a      	add	r2, r5
   11cee:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
}
   11cf2:	f8d4 04f0 	ldr.w	r0, [r4, #1264]	; 0x4f0
   11cf6:	b007      	add	sp, #28
   11cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint8_t text[]="Initialization Finished";
   11cfa:	466d      	mov	r5, sp
   11cfc:	4f1e      	ldr	r7, [pc, #120]	; (11d78 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xbc>)
   11cfe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   11d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11d02:	e897 0003 	ldmia.w	r7, {r0, r1}
   11d06:	e885 0003 	stmia.w	r5, {r0, r1}
		length=(uint8_t)strlen((char*)text);
   11d0a:	4668      	mov	r0, sp
   11d0c:	4b1b      	ldr	r3, [pc, #108]	; (11d7c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc0>)
   11d0e:	4798      	blx	r3
			memcpy(&stackPointer[stackValue],ent,12+length+1);
   11d10:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
   11d14:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   11d18:	b2c2      	uxtb	r2, r0
   11d1a:	320d      	adds	r2, #13
   11d1c:	4631      	mov	r1, r6
   11d1e:	18e8      	adds	r0, r5, r3
   11d20:	4b14      	ldr	r3, [pc, #80]	; (11d74 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb8>)
   11d22:	4798      	blx	r3
			local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
   11d24:	4d16      	ldr	r5, [pc, #88]	; (11d80 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc4>)
   11d26:	4629      	mov	r1, r5
   11d28:	4816      	ldr	r0, [pc, #88]	; (11d84 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc8>)
   11d2a:	4b17      	ldr	r3, [pc, #92]	; (11d88 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xcc>)
   11d2c:	4798      	blx	r3
   11d2e:	4b17      	ldr	r3, [pc, #92]	; (11d8c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd0>)
   11d30:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
   11d34:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
	stackValue=stk;
   11d38:	2100      	movs	r1, #0
   11d3a:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
			memset(staticEventLogs,0,QSPI_ERBLK);
   11d3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   11d42:	4628      	mov	r0, r5
   11d44:	4b12      	ldr	r3, [pc, #72]	; (11d90 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd4>)
   11d46:	4798      	blx	r3
   11d48:	e7d3      	b.n	11cf2 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x36>
			local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
   11d4a:	4f0d      	ldr	r7, [pc, #52]	; (11d80 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc4>)
   11d4c:	4639      	mov	r1, r7
   11d4e:	480d      	ldr	r0, [pc, #52]	; (11d84 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc8>)
   11d50:	4b0d      	ldr	r3, [pc, #52]	; (11d88 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xcc>)
   11d52:	4798      	blx	r3
   11d54:	4b0d      	ldr	r3, [pc, #52]	; (11d8c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd0>)
   11d56:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
   11d5a:	f8c4 7534 	str.w	r7, [r4, #1332]	; 0x534
	stackValue=stk;
   11d5e:	2100      	movs	r1, #0
   11d60:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
			memset(staticEventLogs,0,QSPI_ERBLK);
   11d64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   11d68:	4638      	mov	r0, r7
   11d6a:	4b09      	ldr	r3, [pc, #36]	; (11d90 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd4>)
   11d6c:	4798      	blx	r3
   11d6e:	e7b0      	b.n	11cd2 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x16>
   11d70:	00011ca9 	.word	0x00011ca9
   11d74:	0001a635 	.word	0x0001a635
   11d78:	0001b044 	.word	0x0001b044
   11d7c:	0001a941 	.word	0x0001a941
   11d80:	20004138 	.word	0x20004138
   11d84:	20006a98 	.word	0x20006a98
   11d88:	00014241 	.word	0x00014241
   11d8c:	20005230 	.word	0x20005230
   11d90:	0001a769 	.word	0x0001a769

00011d94 <_ZN29Dual_Flapper_Valve_ControllerD1Ev>:
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
{
} //Dual_Flapper_Valve_Controller

// default destructor
Dual_Flapper_Valve_Controller::~Dual_Flapper_Valve_Controller()
   11d94:	b510      	push	{r4, lr}
   11d96:	4604      	mov	r4, r0
   11d98:	4b01      	ldr	r3, [pc, #4]	; (11da0 <_ZN29Dual_Flapper_Valve_ControllerD1Ev+0xc>)
   11d9a:	4798      	blx	r3
{
} //~Dual_Flapper_Valve_Controller
   11d9c:	4620      	mov	r0, r4
   11d9e:	bd10      	pop	{r4, pc}
   11da0:	0001228d 	.word	0x0001228d

00011da4 <__tcf_0>:
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
   11da4:	b538      	push	{r3, r4, r5, lr}
   11da6:	4d04      	ldr	r5, [pc, #16]	; (11db8 <__tcf_0+0x14>)
   11da8:	f105 00dc 	add.w	r0, r5, #220	; 0xdc
   11dac:	4c03      	ldr	r4, [pc, #12]	; (11dbc <__tcf_0+0x18>)
   11dae:	47a0      	blx	r4
   11db0:	4628      	mov	r0, r5
   11db2:	47a0      	blx	r4
   11db4:	bd38      	pop	{r3, r4, r5, pc}
   11db6:	bf00      	nop
   11db8:	2000513c 	.word	0x2000513c
   11dbc:	0001228d 	.word	0x0001228d

00011dc0 <_ZN29Dual_Flapper_Valve_Controller4InitEv>:

bool Dual_Flapper_Valve_Controller::Init(){
   11dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11dc2:	4604      	mov	r4, r0
	for (uint8_t i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
	{
		valve[i]=&staticFVController[i];
   11dc4:	4d17      	ldr	r5, [pc, #92]	; (11e24 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x64>)
   11dc6:	f8c0 50e4 	str.w	r5, [r0, #228]	; 0xe4
		valve[i]->InitController(i);
   11dca:	2100      	movs	r1, #0
   11dcc:	4628      	mov	r0, r5
   11dce:	4f16      	ldr	r7, [pc, #88]	; (11e28 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x68>)
   11dd0:	47b8      	blx	r7
		valve[i]->SetPartner(valve[1-i]);
   11dd2:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
   11dd6:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   11dda:	4e14      	ldr	r6, [pc, #80]	; (11e2c <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x6c>)
   11ddc:	47b0      	blx	r6
		valve[i]=&staticFVController[i];
   11dde:	f105 00dc 	add.w	r0, r5, #220	; 0xdc
   11de2:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
		valve[i]->InitController(i);
   11de6:	2101      	movs	r1, #1
   11de8:	47b8      	blx	r7
		valve[i]->SetPartner(valve[1-i]);
   11dea:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   11dee:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
   11df2:	47b0      	blx	r6
	
	}
	for (uint8_t i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
	{
		
		valve[i]->SetPartner(valve[1-i]);
   11df4:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
   11df8:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   11dfc:	47b0      	blx	r6
   11dfe:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   11e02:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
   11e06:	47b0      	blx	r6
		
	}
	valve1=valve[0]; 
   11e08:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
   11e0c:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
	valve2=valve[1]; 
   11e10:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   11e14:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	return (valve1->isOK)|(valve2->isOK);
   11e18:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
   11e1c:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
   11e20:	4310      	orrs	r0, r2
   11e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e24:	2000513c 	.word	0x2000513c
   11e28:	000122ad 	.word	0x000122ad
   11e2c:	00012693 	.word	0x00012693

00011e30 <_ZN29Dual_Flapper_Valve_Controller12IsStandAloneEv>:
		boolResult=	!valve1->dataStruct.controlOutputs.iAlcFvStandAloneOut;
	}
	return boolResult;
}

bool Dual_Flapper_Valve_Controller::IsStandAlone(void){
   11e30:	b570      	push	{r4, r5, r6, lr}
   11e32:	4605      	mov	r5, r0
	is_stand_alone=valve1->IsStandAloneMode()|valve2->IsStandAloneMode();
   11e34:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   11e38:	4e05      	ldr	r6, [pc, #20]	; (11e50 <_ZN29Dual_Flapper_Valve_Controller12IsStandAloneEv+0x20>)
   11e3a:	47b0      	blx	r6
   11e3c:	4604      	mov	r4, r0
   11e3e:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
   11e42:	47b0      	blx	r6
   11e44:	4320      	orrs	r0, r4
   11e46:	b2c0      	uxtb	r0, r0
   11e48:	f885 00ec 	strb.w	r0, [r5, #236]	; 0xec
	return is_stand_alone;
}
   11e4c:	bd70      	pop	{r4, r5, r6, pc}
   11e4e:	bf00      	nop
   11e50:	00012649 	.word	0x00012649

00011e54 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev>:

Dual_Flapper_Valve_Controller flapper;
   11e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   11e56:	4c10      	ldr	r4, [pc, #64]	; (11e98 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x44>)
   11e58:	f504 75dc 	add.w	r5, r4, #440	; 0x1b8
   11e5c:	490f      	ldr	r1, [pc, #60]	; (11e9c <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x48>)
   11e5e:	4628      	mov	r0, r5
   11e60:	4b0f      	ldr	r3, [pc, #60]	; (11ea0 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x4c>)
   11e62:	4798      	blx	r3
   11e64:	4e0f      	ldr	r6, [pc, #60]	; (11ea4 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x50>)
   11e66:	4632      	mov	r2, r6
   11e68:	490f      	ldr	r1, [pc, #60]	; (11ea8 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x54>)
   11e6a:	4628      	mov	r0, r5
   11e6c:	4d0f      	ldr	r5, [pc, #60]	; (11eac <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x58>)
   11e6e:	47a8      	blx	r5
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
   11e70:	4620      	mov	r0, r4
   11e72:	4f0f      	ldr	r7, [pc, #60]	; (11eb0 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x5c>)
   11e74:	47b8      	blx	r7
   11e76:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
   11e7a:	47b8      	blx	r7
   11e7c:	4632      	mov	r2, r6
   11e7e:	490d      	ldr	r1, [pc, #52]	; (11eb4 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x60>)
   11e80:	2000      	movs	r0, #0
   11e82:	47a8      	blx	r5
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
   11e84:	f504 74e8 	add.w	r4, r4, #464	; 0x1d0
   11e88:	4620      	mov	r0, r4
   11e8a:	4b0b      	ldr	r3, [pc, #44]	; (11eb8 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x64>)
   11e8c:	4798      	blx	r3
Dual_Flapper_Valve_Controller flapper;
   11e8e:	4632      	mov	r2, r6
   11e90:	490a      	ldr	r1, [pc, #40]	; (11ebc <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x68>)
   11e92:	4620      	mov	r0, r4
   11e94:	47a8      	blx	r5
   11e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e98:	2000513c 	.word	0x2000513c
   11e9c:	2000dff8 	.word	0x2000dff8
   11ea0:	0000faf1 	.word	0x0000faf1
   11ea4:	20000000 	.word	0x20000000
   11ea8:	0000fb0d 	.word	0x0000fb0d
   11eac:	0001a0b5 	.word	0x0001a0b5
   11eb0:	000121f9 	.word	0x000121f9
   11eb4:	00011da5 	.word	0x00011da5
   11eb8:	000121f9 	.word	0x000121f9
   11ebc:	00011d95 	.word	0x00011d95

00011ec0 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
   11ec0:	b480      	push	{r7}
   11ec2:	b083      	sub	sp, #12
   11ec4:	af00      	add	r7, sp, #0
   11ec6:	6078      	str	r0, [r7, #4]
   11ec8:	460b      	mov	r3, r1
   11eca:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   11ecc:	78fb      	ldrb	r3, [r7, #3]
   11ece:	687a      	ldr	r2, [r7, #4]
   11ed0:	01db      	lsls	r3, r3, #7
   11ed2:	4413      	add	r3, r2
   11ed4:	681b      	ldr	r3, [r3, #0]
}
   11ed6:	4618      	mov	r0, r3
   11ed8:	370c      	adds	r7, #12
   11eda:	46bd      	mov	sp, r7
   11edc:	bc80      	pop	{r7}
   11ede:	4770      	bx	lr

00011ee0 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   11ee0:	b480      	push	{r7}
   11ee2:	b085      	sub	sp, #20
   11ee4:	af00      	add	r7, sp, #0
   11ee6:	60f8      	str	r0, [r7, #12]
   11ee8:	460b      	mov	r3, r1
   11eea:	607a      	str	r2, [r7, #4]
   11eec:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   11eee:	7afb      	ldrb	r3, [r7, #11]
   11ef0:	68fa      	ldr	r2, [r7, #12]
   11ef2:	01db      	lsls	r3, r3, #7
   11ef4:	4413      	add	r3, r2
   11ef6:	3318      	adds	r3, #24
   11ef8:	687a      	ldr	r2, [r7, #4]
   11efa:	601a      	str	r2, [r3, #0]
}
   11efc:	bf00      	nop
   11efe:	3714      	adds	r7, #20
   11f00:	46bd      	mov	sp, r7
   11f02:	bc80      	pop	{r7}
   11f04:	4770      	bx	lr

00011f06 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
   11f06:	b480      	push	{r7}
   11f08:	b083      	sub	sp, #12
   11f0a:	af00      	add	r7, sp, #0
   11f0c:	6078      	str	r0, [r7, #4]
   11f0e:	460b      	mov	r3, r1
   11f10:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   11f12:	78fb      	ldrb	r3, [r7, #3]
   11f14:	687a      	ldr	r2, [r7, #4]
   11f16:	01db      	lsls	r3, r3, #7
   11f18:	4413      	add	r3, r2
   11f1a:	3310      	adds	r3, #16
   11f1c:	681b      	ldr	r3, [r3, #0]
}
   11f1e:	4618      	mov	r0, r3
   11f20:	370c      	adds	r7, #12
   11f22:	46bd      	mov	sp, r7
   11f24:	bc80      	pop	{r7}
   11f26:	4770      	bx	lr

00011f28 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   11f28:	b480      	push	{r7}
   11f2a:	b085      	sub	sp, #20
   11f2c:	af00      	add	r7, sp, #0
   11f2e:	60f8      	str	r0, [r7, #12]
   11f30:	460b      	mov	r3, r1
   11f32:	607a      	str	r2, [r7, #4]
   11f34:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   11f36:	7afb      	ldrb	r3, [r7, #11]
   11f38:	68fa      	ldr	r2, [r7, #12]
   11f3a:	01db      	lsls	r3, r3, #7
   11f3c:	4413      	add	r3, r2
   11f3e:	3314      	adds	r3, #20
   11f40:	687a      	ldr	r2, [r7, #4]
   11f42:	601a      	str	r2, [r3, #0]
}
   11f44:	bf00      	nop
   11f46:	3714      	adds	r7, #20
   11f48:	46bd      	mov	sp, r7
   11f4a:	bc80      	pop	{r7}
   11f4c:	4770      	bx	lr

00011f4e <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   11f4e:	b480      	push	{r7}
   11f50:	b085      	sub	sp, #20
   11f52:	af00      	add	r7, sp, #0
   11f54:	60f8      	str	r0, [r7, #12]
   11f56:	460b      	mov	r3, r1
   11f58:	607a      	str	r2, [r7, #4]
   11f5a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
   11f5c:	7afb      	ldrb	r3, [r7, #11]
   11f5e:	68fa      	ldr	r2, [r7, #12]
   11f60:	01db      	lsls	r3, r3, #7
   11f62:	4413      	add	r3, r2
   11f64:	331c      	adds	r3, #28
   11f66:	687a      	ldr	r2, [r7, #4]
   11f68:	601a      	str	r2, [r3, #0]
}
   11f6a:	bf00      	nop
   11f6c:	3714      	adds	r7, #20
   11f6e:	46bd      	mov	sp, r7
   11f70:	bc80      	pop	{r7}
   11f72:	4770      	bx	lr

00011f74 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
   11f74:	b480      	push	{r7}
   11f76:	b083      	sub	sp, #12
   11f78:	af00      	add	r7, sp, #0
   11f7a:	6078      	str	r0, [r7, #4]
   11f7c:	460b      	mov	r3, r1
   11f7e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   11f80:	78fb      	ldrb	r3, [r7, #3]
   11f82:	687a      	ldr	r2, [r7, #4]
   11f84:	01db      	lsls	r3, r3, #7
   11f86:	4413      	add	r3, r2
   11f88:	3320      	adds	r3, #32
   11f8a:	681b      	ldr	r3, [r3, #0]
}
   11f8c:	4618      	mov	r0, r3
   11f8e:	370c      	adds	r7, #12
   11f90:	46bd      	mov	sp, r7
   11f92:	bc80      	pop	{r7}
   11f94:	4770      	bx	lr
	...

00011f98 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
   11f98:	b580      	push	{r7, lr}
   11f9a:	b082      	sub	sp, #8
   11f9c:	af00      	add	r7, sp, #0
   11f9e:	4603      	mov	r3, r0
   11fa0:	6039      	str	r1, [r7, #0]
   11fa2:	71fb      	strb	r3, [r7, #7]
   11fa4:	4613      	mov	r3, r2
   11fa6:	71bb      	strb	r3, [r7, #6]
	if (level) {
   11fa8:	79bb      	ldrb	r3, [r7, #6]
   11faa:	2b00      	cmp	r3, #0
   11fac:	d006      	beq.n	11fbc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   11fae:	79fb      	ldrb	r3, [r7, #7]
   11fb0:	683a      	ldr	r2, [r7, #0]
   11fb2:	4619      	mov	r1, r3
   11fb4:	4806      	ldr	r0, [pc, #24]	; (11fd0 <_gpio_set_level+0x38>)
   11fb6:	4b07      	ldr	r3, [pc, #28]	; (11fd4 <_gpio_set_level+0x3c>)
   11fb8:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
   11fba:	e005      	b.n	11fc8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   11fbc:	79fb      	ldrb	r3, [r7, #7]
   11fbe:	683a      	ldr	r2, [r7, #0]
   11fc0:	4619      	mov	r1, r3
   11fc2:	4803      	ldr	r0, [pc, #12]	; (11fd0 <_gpio_set_level+0x38>)
   11fc4:	4b04      	ldr	r3, [pc, #16]	; (11fd8 <_gpio_set_level+0x40>)
   11fc6:	4798      	blx	r3
}
   11fc8:	bf00      	nop
   11fca:	3708      	adds	r7, #8
   11fcc:	46bd      	mov	sp, r7
   11fce:	bd80      	pop	{r7, pc}
   11fd0:	41008000 	.word	0x41008000
   11fd4:	00011ee1 	.word	0x00011ee1
   11fd8:	00011f29 	.word	0x00011f29

00011fdc <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
   11fdc:	b580      	push	{r7, lr}
   11fde:	b082      	sub	sp, #8
   11fe0:	af00      	add	r7, sp, #0
   11fe2:	4603      	mov	r3, r0
   11fe4:	6039      	str	r1, [r7, #0]
   11fe6:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
   11fe8:	79fb      	ldrb	r3, [r7, #7]
   11fea:	683a      	ldr	r2, [r7, #0]
   11fec:	4619      	mov	r1, r3
   11fee:	4803      	ldr	r0, [pc, #12]	; (11ffc <_gpio_toggle_level+0x20>)
   11ff0:	4b03      	ldr	r3, [pc, #12]	; (12000 <_gpio_toggle_level+0x24>)
   11ff2:	4798      	blx	r3
}
   11ff4:	bf00      	nop
   11ff6:	3708      	adds	r7, #8
   11ff8:	46bd      	mov	sp, r7
   11ffa:	bd80      	pop	{r7, pc}
   11ffc:	41008000 	.word	0x41008000
   12000:	00011f4f 	.word	0x00011f4f

00012004 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
   12004:	b580      	push	{r7, lr}
   12006:	b086      	sub	sp, #24
   12008:	af00      	add	r7, sp, #0
   1200a:	4603      	mov	r3, r0
   1200c:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
   1200e:	f107 030c 	add.w	r3, r7, #12
   12012:	4618      	mov	r0, r3
   12014:	4b13      	ldr	r3, [pc, #76]	; (12064 <_gpio_get_level+0x60>)
   12016:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   12018:	79fb      	ldrb	r3, [r7, #7]
   1201a:	4619      	mov	r1, r3
   1201c:	4812      	ldr	r0, [pc, #72]	; (12068 <_gpio_get_level+0x64>)
   1201e:	4b13      	ldr	r3, [pc, #76]	; (1206c <_gpio_get_level+0x68>)
   12020:	4798      	blx	r3
   12022:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   12024:	79fb      	ldrb	r3, [r7, #7]
   12026:	4619      	mov	r1, r3
   12028:	480f      	ldr	r0, [pc, #60]	; (12068 <_gpio_get_level+0x64>)
   1202a:	4b11      	ldr	r3, [pc, #68]	; (12070 <_gpio_get_level+0x6c>)
   1202c:	4798      	blx	r3
   1202e:	4602      	mov	r2, r0
   12030:	697b      	ldr	r3, [r7, #20]
   12032:	43db      	mvns	r3, r3
   12034:	4013      	ands	r3, r2
   12036:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   12038:	79fb      	ldrb	r3, [r7, #7]
   1203a:	4619      	mov	r1, r3
   1203c:	480a      	ldr	r0, [pc, #40]	; (12068 <_gpio_get_level+0x64>)
   1203e:	4b0d      	ldr	r3, [pc, #52]	; (12074 <_gpio_get_level+0x70>)
   12040:	4798      	blx	r3
   12042:	4602      	mov	r2, r0
   12044:	697b      	ldr	r3, [r7, #20]
   12046:	4013      	ands	r3, r2
   12048:	693a      	ldr	r2, [r7, #16]
   1204a:	4313      	orrs	r3, r2
   1204c:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
   1204e:	f107 030c 	add.w	r3, r7, #12
   12052:	4618      	mov	r0, r3
   12054:	4b08      	ldr	r3, [pc, #32]	; (12078 <_gpio_get_level+0x74>)
   12056:	4798      	blx	r3

	return tmp;
   12058:	693b      	ldr	r3, [r7, #16]
}
   1205a:	4618      	mov	r0, r3
   1205c:	3718      	adds	r7, #24
   1205e:	46bd      	mov	sp, r7
   12060:	bd80      	pop	{r7, pc}
   12062:	bf00      	nop
   12064:	0000d0a9 	.word	0x0000d0a9
   12068:	41008000 	.word	0x41008000
   1206c:	00011ec1 	.word	0x00011ec1
   12070:	00011f75 	.word	0x00011f75
   12074:	00011f07 	.word	0x00011f07
   12078:	0000d0cf 	.word	0x0000d0cf

0001207c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
   1207c:	b580      	push	{r7, lr}
   1207e:	b082      	sub	sp, #8
   12080:	af00      	add	r7, sp, #0
   12082:	4603      	mov	r3, r0
   12084:	460a      	mov	r2, r1
   12086:	71fb      	strb	r3, [r7, #7]
   12088:	4613      	mov	r3, r2
   1208a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   1208c:	79fb      	ldrb	r3, [r7, #7]
   1208e:	115b      	asrs	r3, r3, #5
   12090:	b2d8      	uxtb	r0, r3
   12092:	79fb      	ldrb	r3, [r7, #7]
   12094:	f003 031f 	and.w	r3, r3, #31
   12098:	2201      	movs	r2, #1
   1209a:	fa02 f303 	lsl.w	r3, r2, r3
   1209e:	79ba      	ldrb	r2, [r7, #6]
   120a0:	4619      	mov	r1, r3
   120a2:	4b03      	ldr	r3, [pc, #12]	; (120b0 <gpio_set_pin_level+0x34>)
   120a4:	4798      	blx	r3
}
   120a6:	bf00      	nop
   120a8:	3708      	adds	r7, #8
   120aa:	46bd      	mov	sp, r7
   120ac:	bd80      	pop	{r7, pc}
   120ae:	bf00      	nop
   120b0:	00011f99 	.word	0x00011f99

000120b4 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
   120b4:	b580      	push	{r7, lr}
   120b6:	b082      	sub	sp, #8
   120b8:	af00      	add	r7, sp, #0
   120ba:	4603      	mov	r3, r0
   120bc:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
   120be:	79fb      	ldrb	r3, [r7, #7]
   120c0:	115b      	asrs	r3, r3, #5
   120c2:	b2d8      	uxtb	r0, r3
   120c4:	79fb      	ldrb	r3, [r7, #7]
   120c6:	f003 031f 	and.w	r3, r3, #31
   120ca:	2201      	movs	r2, #1
   120cc:	fa02 f303 	lsl.w	r3, r2, r3
   120d0:	4619      	mov	r1, r3
   120d2:	4b03      	ldr	r3, [pc, #12]	; (120e0 <gpio_toggle_pin_level+0x2c>)
   120d4:	4798      	blx	r3
}
   120d6:	bf00      	nop
   120d8:	3708      	adds	r7, #8
   120da:	46bd      	mov	sp, r7
   120dc:	bd80      	pop	{r7, pc}
   120de:	bf00      	nop
   120e0:	00011fdd 	.word	0x00011fdd

000120e4 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   120e4:	b580      	push	{r7, lr}
   120e6:	b082      	sub	sp, #8
   120e8:	af00      	add	r7, sp, #0
   120ea:	4603      	mov	r3, r0
   120ec:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   120ee:	79fb      	ldrb	r3, [r7, #7]
   120f0:	115b      	asrs	r3, r3, #5
   120f2:	b2db      	uxtb	r3, r3
   120f4:	4618      	mov	r0, r3
   120f6:	4b09      	ldr	r3, [pc, #36]	; (1211c <gpio_get_pin_level+0x38>)
   120f8:	4798      	blx	r3
   120fa:	4601      	mov	r1, r0
   120fc:	79fb      	ldrb	r3, [r7, #7]
   120fe:	f003 031f 	and.w	r3, r3, #31
   12102:	2201      	movs	r2, #1
   12104:	fa02 f303 	lsl.w	r3, r2, r3
   12108:	400b      	ands	r3, r1
   1210a:	2b00      	cmp	r3, #0
   1210c:	bf14      	ite	ne
   1210e:	2301      	movne	r3, #1
   12110:	2300      	moveq	r3, #0
   12112:	b2db      	uxtb	r3, r3
}
   12114:	4618      	mov	r0, r3
   12116:	3708      	adds	r7, #8
   12118:	46bd      	mov	sp, r7
   1211a:	bd80      	pop	{r7, pc}
   1211c:	00012005 	.word	0x00012005

00012120 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController[FLAPPER_VALVE_QUANTITY];

static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];

static void TimeoutFlapperValve1Controller(const struct timer_task *const timer_task)
{
   12120:	b480      	push	{r7}
   12122:	b083      	sub	sp, #12
   12124:	af00      	add	r7, sp, #0
   12126:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[0]->timeoutFlapperValveController=true;
   12128:	4b07      	ldr	r3, [pc, #28]	; (12148 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
   1212a:	681b      	ldr	r3, [r3, #0]
   1212c:	2201      	movs	r2, #1
   1212e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController[0]->unLockTimeout=true;
   12132:	4b05      	ldr	r3, [pc, #20]	; (12148 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
   12134:	681b      	ldr	r3, [r3, #0]
   12136:	2201      	movs	r2, #1
   12138:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	
}
   1213c:	bf00      	nop
   1213e:	370c      	adds	r7, #12
   12140:	46bd      	mov	sp, r7
   12142:	bc80      	pop	{r7}
   12144:	4770      	bx	lr
   12146:	bf00      	nop
   12148:	20005534 	.word	0x20005534

0001214c <_ZL30TimeoutFlapperValve2ControllerPK10timer_task>:
static void TimeoutFlapperValve2Controller(const struct timer_task *const timer_task)
{
   1214c:	b480      	push	{r7}
   1214e:	b083      	sub	sp, #12
   12150:	af00      	add	r7, sp, #0
   12152:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[1]->timeoutFlapperValveController=true;
   12154:	4b07      	ldr	r3, [pc, #28]	; (12174 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
   12156:	685b      	ldr	r3, [r3, #4]
   12158:	2201      	movs	r2, #1
   1215a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->unLockTimeout=true;
   1215e:	4b05      	ldr	r3, [pc, #20]	; (12174 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
   12160:	685b      	ldr	r3, [r3, #4]
   12162:	2201      	movs	r2, #1
   12164:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	
}
   12168:	bf00      	nop
   1216a:	370c      	adds	r7, #12
   1216c:	46bd      	mov	sp, r7
   1216e:	bc80      	pop	{r7}
   12170:	4770      	bx	lr
   12172:	bf00      	nop
   12174:	20005534 	.word	0x20005534

00012178 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task>:
static void TimeoutFlapperValve1FullyClossed(const struct timer_task *const timer_task)
{
   12178:	b480      	push	{r7}
   1217a:	b083      	sub	sp, #12
   1217c:	af00      	add	r7, sp, #0
   1217e:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[0]->fullClosedTimeout=true;
   12180:	4b04      	ldr	r3, [pc, #16]	; (12194 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task+0x1c>)
   12182:	681b      	ldr	r3, [r3, #0]
   12184:	2201      	movs	r2, #1
   12186:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	
}
   1218a:	bf00      	nop
   1218c:	370c      	adds	r7, #12
   1218e:	46bd      	mov	sp, r7
   12190:	bc80      	pop	{r7}
   12192:	4770      	bx	lr
   12194:	20005534 	.word	0x20005534

00012198 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task>:
static void TimeoutFlapperValve2FullyClossed(const struct timer_task *const timer_task)
{
   12198:	b480      	push	{r7}
   1219a:	b083      	sub	sp, #12
   1219c:	af00      	add	r7, sp, #0
   1219e:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->fullClosedTimeout=true;
   121a0:	4b04      	ldr	r3, [pc, #16]	; (121b4 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task+0x1c>)
   121a2:	685b      	ldr	r3, [r3, #4]
   121a4:	2201      	movs	r2, #1
   121a6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	
}
   121aa:	bf00      	nop
   121ac:	370c      	adds	r7, #12
   121ae:	46bd      	mov	sp, r7
   121b0:	bc80      	pop	{r7}
   121b2:	4770      	bx	lr
   121b4:	20005534 	.word	0x20005534

000121b8 <_ZL18ResetValve1TimeoutPK10timer_task>:

static void ResetValve1Timeout(const struct timer_task *const timer_task)
{
   121b8:	b480      	push	{r7}
   121ba:	b083      	sub	sp, #12
   121bc:	af00      	add	r7, sp, #0
   121be:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[0]->resetTimeout=true;
   121c0:	4b04      	ldr	r3, [pc, #16]	; (121d4 <_ZL18ResetValve1TimeoutPK10timer_task+0x1c>)
   121c2:	681b      	ldr	r3, [r3, #0]
   121c4:	2201      	movs	r2, #1
   121c6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
   121ca:	bf00      	nop
   121cc:	370c      	adds	r7, #12
   121ce:	46bd      	mov	sp, r7
   121d0:	bc80      	pop	{r7}
   121d2:	4770      	bx	lr
   121d4:	20005534 	.word	0x20005534

000121d8 <_ZL18ResetValve2TimeoutPK10timer_task>:
static void ResetValve2Timeout(const struct timer_task *const timer_task)
{
   121d8:	b480      	push	{r7}
   121da:	b083      	sub	sp, #12
   121dc:	af00      	add	r7, sp, #0
   121de:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[1]->resetTimeout=true;
   121e0:	4b04      	ldr	r3, [pc, #16]	; (121f4 <_ZL18ResetValve2TimeoutPK10timer_task+0x1c>)
   121e2:	685b      	ldr	r3, [r3, #4]
   121e4:	2201      	movs	r2, #1
   121e6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
   121ea:	bf00      	nop
   121ec:	370c      	adds	r7, #12
   121ee:	46bd      	mov	sp, r7
   121f0:	bc80      	pop	{r7}
   121f2:	4770      	bx	lr
   121f4:	20005534 	.word	0x20005534

000121f8 <_ZN22FlapperValveControllerC1Ev>:


// default constructor
FlapperValveController::FlapperValveController()
   121f8:	b580      	push	{r7, lr}
   121fa:	b082      	sub	sp, #8
   121fc:	af00      	add	r7, sp, #0
   121fe:	6078      	str	r0, [r7, #4]
   12200:	687b      	ldr	r3, [r7, #4]
   12202:	4618      	mov	r0, r3
   12204:	4b1f      	ldr	r3, [pc, #124]	; (12284 <_ZN22FlapperValveControllerC1Ev+0x8c>)
   12206:	4798      	blx	r3
{
	singlefv=&fvStatic[0];
   12208:	687b      	ldr	r3, [r7, #4]
   1220a:	4a1f      	ldr	r2, [pc, #124]	; (12288 <_ZN22FlapperValveControllerC1Ev+0x90>)
   1220c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
//	ptrFlapperValveController=this;
	doPeriodicTask=false;
   12210:	687b      	ldr	r3, [r7, #4]
   12212:	2200      	movs	r2, #0
   12214:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	isControlling=false;
   12218:	687b      	ldr	r3, [r7, #4]
   1221a:	2200      	movs	r2, #0
   1221c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	gotSetpoint=false;
   12220:	687b      	ldr	r3, [r7, #4]
   12222:	2200      	movs	r2, #0
   12224:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	controllerEnabled=false;
   12228:	687b      	ldr	r3, [r7, #4]
   1222a:	2200      	movs	r2, #0
   1222c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	closing=false;
   12230:	687b      	ldr	r3, [r7, #4]
   12232:	2200      	movs	r2, #0
   12234:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUM_AIR;
   12238:	687b      	ldr	r3, [r7, #4]
   1223a:	22da      	movs	r2, #218	; 0xda
   1223c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	NBC_Mode=false;
   12240:	687b      	ldr	r3, [r7, #4]
   12242:	2200      	movs	r2, #0
   12244:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	NBC_Activated=false;
   12248:	687b      	ldr	r3, [r7, #4]
   1224a:	2200      	movs	r2, #0
   1224c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	standAloneActivated=false;
   12250:	687b      	ldr	r3, [r7, #4]
   12252:	2200      	movs	r2, #0
   12254:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	standAloneMode=false;
   12258:	687b      	ldr	r3, [r7, #4]
   1225a:	2200      	movs	r2, #0
   1225c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	resetTimeout=false;
   12260:	687b      	ldr	r3, [r7, #4]
   12262:	2200      	movs	r2, #0
   12264:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	standAloneReturning=false;
   12268:	687b      	ldr	r3, [r7, #4]
   1226a:	2200      	movs	r2, #0
   1226c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	partner=NULL;
   12270:	687b      	ldr	r3, [r7, #4]
   12272:	2200      	movs	r2, #0
   12274:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	
	
} //FlapperValveController
   12278:	687b      	ldr	r3, [r7, #4]
   1227a:	4618      	mov	r0, r3
   1227c:	3708      	adds	r7, #8
   1227e:	46bd      	mov	sp, r7
   12280:	bd80      	pop	{r7, pc}
   12282:	bf00      	nop
   12284:	00013595 	.word	0x00013595
   12288:	2000553c 	.word	0x2000553c

0001228c <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
   1228c:	b580      	push	{r7, lr}
   1228e:	b082      	sub	sp, #8
   12290:	af00      	add	r7, sp, #0
   12292:	6078      	str	r0, [r7, #4]
   12294:	687b      	ldr	r3, [r7, #4]
   12296:	4618      	mov	r0, r3
   12298:	4b03      	ldr	r3, [pc, #12]	; (122a8 <_ZN22FlapperValveControllerD1Ev+0x1c>)
   1229a:	4798      	blx	r3
{
} //~FlapperValveController
   1229c:	687b      	ldr	r3, [r7, #4]
   1229e:	4618      	mov	r0, r3
   122a0:	3708      	adds	r7, #8
   122a2:	46bd      	mov	sp, r7
   122a4:	bd80      	pop	{r7, pc}
   122a6:	bf00      	nop
   122a8:	000135e1 	.word	0x000135e1

000122ac <_ZN22FlapperValveController14InitControllerEh>:
	{
		isOK=Selftest();
	}
	return	isOK;	
}
bool FlapperValveController::InitController(uint8_t valve_id){
   122ac:	b580      	push	{r7, lr}
   122ae:	b082      	sub	sp, #8
   122b0:	af00      	add	r7, sp, #0
   122b2:	6078      	str	r0, [r7, #4]
   122b4:	460b      	mov	r3, r1
   122b6:	70fb      	strb	r3, [r7, #3]
	ptrFlapperValveController[valve_id]=this;
   122b8:	78fb      	ldrb	r3, [r7, #3]
   122ba:	491b      	ldr	r1, [pc, #108]	; (12328 <_ZN22FlapperValveController14InitControllerEh+0x7c>)
   122bc:	687a      	ldr	r2, [r7, #4]
   122be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		valve_ID=valve_id;
   122c2:	687b      	ldr	r3, [r7, #4]
   122c4:	78fa      	ldrb	r2, [r7, #3]
   122c6:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
		singlefv=&fvStatic[valve_id];
   122ca:	78fa      	ldrb	r2, [r7, #3]
   122cc:	4613      	mov	r3, r2
   122ce:	011b      	lsls	r3, r3, #4
   122d0:	1a9b      	subs	r3, r3, r2
   122d2:	00db      	lsls	r3, r3, #3
   122d4:	4a15      	ldr	r2, [pc, #84]	; (1232c <_ZN22FlapperValveController14InitControllerEh+0x80>)
   122d6:	441a      	add	r2, r3
   122d8:	687b      	ldr	r3, [r7, #4]
   122da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		positions[valve_id]=position_array_static[valve_id];
   122de:	78fb      	ldrb	r3, [r7, #3]
   122e0:	78fa      	ldrb	r2, [r7, #3]
   122e2:	0112      	lsls	r2, r2, #4
   122e4:	4912      	ldr	r1, [pc, #72]	; (12330 <_ZN22FlapperValveController14InitControllerEh+0x84>)
   122e6:	440a      	add	r2, r1
   122e8:	6879      	ldr	r1, [r7, #4]
   122ea:	3332      	adds	r3, #50	; 0x32
   122ec:	009b      	lsls	r3, r3, #2
   122ee:	440b      	add	r3, r1
   122f0:	605a      	str	r2, [r3, #4]
		if (singlefv->Init(valve_id))
   122f2:	687b      	ldr	r3, [r7, #4]
   122f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   122f8:	78fa      	ldrb	r2, [r7, #3]
   122fa:	4611      	mov	r1, r2
   122fc:	4618      	mov	r0, r3
   122fe:	4b0d      	ldr	r3, [pc, #52]	; (12334 <_ZN22FlapperValveController14InitControllerEh+0x88>)
   12300:	4798      	blx	r3
   12302:	4603      	mov	r3, r0
   12304:	2b00      	cmp	r3, #0
   12306:	d007      	beq.n	12318 <_ZN22FlapperValveController14InitControllerEh+0x6c>
		{
			isOK=Selftest();
   12308:	6878      	ldr	r0, [r7, #4]
   1230a:	4b0b      	ldr	r3, [pc, #44]	; (12338 <_ZN22FlapperValveController14InitControllerEh+0x8c>)
   1230c:	4798      	blx	r3
   1230e:	4603      	mov	r3, r0
   12310:	461a      	mov	r2, r3
   12312:	687b      	ldr	r3, [r7, #4]
   12314:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		}
		return	isOK;
   12318:	687b      	ldr	r3, [r7, #4]
   1231a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   1231e:	b2db      	uxtb	r3, r3
}
   12320:	4618      	mov	r0, r3
   12322:	3708      	adds	r7, #8
   12324:	46bd      	mov	sp, r7
   12326:	bd80      	pop	{r7, pc}
   12328:	20005534 	.word	0x20005534
   1232c:	2000553c 	.word	0x2000553c
   12330:	20005514 	.word	0x20005514
   12334:	00013695 	.word	0x00013695
   12338:	00013201 	.word	0x00013201

0001233c <_ZN22FlapperValveController18CalculateDirectionEh>:
bool FlapperValveController::IsEnabled(){
	return	singlefv->controlOutputs.niAlcFvMotorEnable==true;
}


bool	FlapperValveController::CalculateDirection(uint8_t sp){
   1233c:	b480      	push	{r7}
   1233e:	b083      	sub	sp, #12
   12340:	af00      	add	r7, sp, #0
   12342:	6078      	str	r0, [r7, #4]
   12344:	460b      	mov	r3, r1
   12346:	70fb      	strb	r3, [r7, #3]
	lastDirection=direction;
   12348:	687b      	ldr	r3, [r7, #4]
   1234a:	f893 20b3 	ldrb.w	r2, [r3, #179]	; 0xb3
   1234e:	687b      	ldr	r3, [r7, #4]
   12350:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	direction=currentPosition>sp;
   12354:	687b      	ldr	r3, [r7, #4]
   12356:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   1235a:	461a      	mov	r2, r3
   1235c:	78fb      	ldrb	r3, [r7, #3]
   1235e:	429a      	cmp	r2, r3
   12360:	bfcc      	ite	gt
   12362:	2301      	movgt	r3, #1
   12364:	2300      	movle	r3, #0
   12366:	b2da      	uxtb	r2, r3
   12368:	687b      	ldr	r3, [r7, #4]
   1236a:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	return direction;
   1236e:	687b      	ldr	r3, [r7, #4]
   12370:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	
}
   12374:	4618      	mov	r0, r3
   12376:	370c      	adds	r7, #12
   12378:	46bd      	mov	sp, r7
   1237a:	bc80      	pop	{r7}
   1237c:	4770      	bx	lr
	...

00012380 <_ZN22FlapperValveController18CalculateDirectionEv>:

bool	FlapperValveController::CalculateDirection(){
   12380:	b580      	push	{r7, lr}
   12382:	b082      	sub	sp, #8
   12384:	af00      	add	r7, sp, #0
   12386:	6078      	str	r0, [r7, #4]

	//floatSetpoint=(float)setpoint;
	return CalculateDirection(setpoint);
   12388:	687b      	ldr	r3, [r7, #4]
   1238a:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   1238e:	4619      	mov	r1, r3
   12390:	6878      	ldr	r0, [r7, #4]
   12392:	4b03      	ldr	r3, [pc, #12]	; (123a0 <_ZN22FlapperValveController18CalculateDirectionEv+0x20>)
   12394:	4798      	blx	r3
   12396:	4603      	mov	r3, r0
	
}
   12398:	4618      	mov	r0, r3
   1239a:	3708      	adds	r7, #8
   1239c:	46bd      	mov	sp, r7
   1239e:	bd80      	pop	{r7, pc}
   123a0:	0001233d 	.word	0x0001233d

000123a4 <_ZN22FlapperValveController22StartMovingOnDirectionEv>:
bool	FlapperValveController::StatusHadChanged(){
	return	singlefv->fv1StatusChanged;
}

uint8_t FlapperValveController::StartMovingOnDirection(){
   123a4:	b590      	push	{r4, r7, lr}
   123a6:	b083      	sub	sp, #12
   123a8:	af00      	add	r7, sp, #0
   123aa:	6078      	str	r0, [r7, #4]

	lastPosition=currentPosition;
   123ac:	687b      	ldr	r3, [r7, #4]
   123ae:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
   123b2:	687b      	ldr	r3, [r7, #4]
   123b4:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
//	floatLastPosition=(float)lastPosition;
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
   123b8:	687b      	ldr	r3, [r7, #4]
   123ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   123be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   123c2:	2b00      	cmp	r3, #0
   123c4:	d009      	beq.n	123da <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x36>
	{
		singlefv->SetEnable(false);
   123c6:	687b      	ldr	r3, [r7, #4]
   123c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   123cc:	2100      	movs	r1, #0
   123ce:	4618      	mov	r0, r3
   123d0:	4b0b      	ldr	r3, [pc, #44]	; (12400 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x5c>)
   123d2:	4798      	blx	r3
		delay_ms(10);
   123d4:	200a      	movs	r0, #10
   123d6:	4b0b      	ldr	r3, [pc, #44]	; (12404 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x60>)
   123d8:	4798      	blx	r3
	} 
	else
	{
	}
	singlefv->SetDirection(CalculateDirection());
   123da:	687b      	ldr	r3, [r7, #4]
   123dc:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
   123e0:	6878      	ldr	r0, [r7, #4]
   123e2:	4b09      	ldr	r3, [pc, #36]	; (12408 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x64>)
   123e4:	4798      	blx	r3
   123e6:	4603      	mov	r3, r0
   123e8:	4619      	mov	r1, r3
   123ea:	4620      	mov	r0, r4
   123ec:	4b07      	ldr	r3, [pc, #28]	; (1240c <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x68>)
   123ee:	4798      	blx	r3
	StartMotor();
   123f0:	6878      	ldr	r0, [r7, #4]
   123f2:	4b07      	ldr	r3, [pc, #28]	; (12410 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x6c>)
   123f4:	4798      	blx	r3
	return 0;
   123f6:	2300      	movs	r3, #0
}
   123f8:	4618      	mov	r0, r3
   123fa:	370c      	adds	r7, #12
   123fc:	46bd      	mov	sp, r7
   123fe:	bd90      	pop	{r4, r7, pc}
   12400:	000137f5 	.word	0x000137f5
   12404:	00003625 	.word	0x00003625
   12408:	00012381 	.word	0x00012381
   1240c:	00013875 	.word	0x00013875
   12410:	00012e01 	.word	0x00012e01

00012414 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv>:

bool FlapperValveController::ControlMovement_AND_NBC(void){
   12414:	b580      	push	{r7, lr}
   12416:	b082      	sub	sp, #8
   12418:	af00      	add	r7, sp, #0
   1241a:	6078      	str	r0, [r7, #4]

	if (IsNBCMode())
   1241c:	6878      	ldr	r0, [r7, #4]
   1241e:	4b13      	ldr	r3, [pc, #76]	; (1246c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x58>)
   12420:	4798      	blx	r3
   12422:	4603      	mov	r3, r0
   12424:	2b00      	cmp	r3, #0
   12426:	d003      	beq.n	12430 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x1c>
	{
		CommandNBC_Mode();
   12428:	6878      	ldr	r0, [r7, #4]
   1242a:	4b11      	ldr	r3, [pc, #68]	; (12470 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x5c>)
   1242c:	4798      	blx	r3
   1242e:	e013      	b.n	12458 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
	} 
	else
	{
		if (NBC_Activated)
   12430:	687b      	ldr	r3, [r7, #4]
   12432:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   12436:	2b00      	cmp	r3, #0
   12438:	d00b      	beq.n	12452 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x3e>
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
   1243a:	687b      	ldr	r3, [r7, #4]
   1243c:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
   12440:	4619      	mov	r1, r3
   12442:	6878      	ldr	r0, [r7, #4]
   12444:	4b0b      	ldr	r3, [pc, #44]	; (12474 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x60>)
   12446:	4798      	blx	r3
			NBC_Activated=false;
   12448:	687b      	ldr	r3, [r7, #4]
   1244a:	2200      	movs	r2, #0
   1244c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   12450:	e002      	b.n	12458 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
		} 
		else
		{
			ControlMovement();
   12452:	6878      	ldr	r0, [r7, #4]
   12454:	4b08      	ldr	r3, [pc, #32]	; (12478 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x64>)
   12456:	4798      	blx	r3
		}
		
	}
	return !NBC_Mode;
   12458:	687b      	ldr	r3, [r7, #4]
   1245a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   1245e:	f083 0301 	eor.w	r3, r3, #1
   12462:	b2db      	uxtb	r3, r3
}
   12464:	4618      	mov	r0, r3
   12466:	3708      	adds	r7, #8
   12468:	46bd      	mov	sp, r7
   1246a:	bd80      	pop	{r7, pc}
   1246c:	00012b85 	.word	0x00012b85
   12470:	00012b25 	.word	0x00012b25
   12474:	00012e99 	.word	0x00012e99
   12478:	0001278d 	.word	0x0001278d

0001247c <_ZN22FlapperValveController17IsInvalidPositionEv>:

bool FlapperValveController::IsInvalidPosition(){
   1247c:	b590      	push	{r4, r7, lr}
   1247e:	b085      	sub	sp, #20
   12480:	af00      	add	r7, sp, #0
   12482:	6078      	str	r0, [r7, #4]
	bool result=false;
   12484:	2300      	movs	r3, #0
   12486:	73fb      	strb	r3, [r7, #15]
	memory.ReadParameters(parameters);
   12488:	687b      	ldr	r3, [r7, #4]
   1248a:	33c7      	adds	r3, #199	; 0xc7
   1248c:	4619      	mov	r1, r3
   1248e:	4817      	ldr	r0, [pc, #92]	; (124ec <_ZN22FlapperValveController17IsInvalidPositionEv+0x70>)
   12490:	4b17      	ldr	r3, [pc, #92]	; (124f0 <_ZN22FlapperValveController17IsInvalidPositionEv+0x74>)
   12492:	4798      	blx	r3
	UpdateFlapperValveData();
   12494:	6878      	ldr	r0, [r7, #4]
   12496:	4b17      	ldr	r3, [pc, #92]	; (124f4 <_ZN22FlapperValveController17IsInvalidPositionEv+0x78>)
   12498:	4798      	blx	r3
	if ((!standAloneReturning)&(!IsNBCMode()))
   1249a:	687b      	ldr	r3, [r7, #4]
   1249c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
   124a0:	f083 0301 	eor.w	r3, r3, #1
   124a4:	b2db      	uxtb	r3, r3
   124a6:	461c      	mov	r4, r3
   124a8:	6878      	ldr	r0, [r7, #4]
   124aa:	4b13      	ldr	r3, [pc, #76]	; (124f8 <_ZN22FlapperValveController17IsInvalidPositionEv+0x7c>)
   124ac:	4798      	blx	r3
   124ae:	4603      	mov	r3, r0
   124b0:	f083 0301 	eor.w	r3, r3, #1
   124b4:	b2db      	uxtb	r3, r3
   124b6:	4023      	ands	r3, r4
   124b8:	2b00      	cmp	r3, #0
   124ba:	bf14      	ite	ne
   124bc:	2301      	movne	r3, #1
   124be:	2300      	moveq	r3, #0
   124c0:	b2db      	uxtb	r3, r3
   124c2:	2b00      	cmp	r3, #0
   124c4:	d00d      	beq.n	124e2 <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
	{
		if (currentPosition>currentMaximum)
   124c6:	687b      	ldr	r3, [r7, #4]
   124c8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   124cc:	461a      	mov	r2, r3
   124ce:	687b      	ldr	r3, [r7, #4]
   124d0:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
   124d4:	429a      	cmp	r2, r3
   124d6:	dd02      	ble.n	124de <_ZN22FlapperValveController17IsInvalidPositionEv+0x62>
		{
			result=true;
   124d8:	2301      	movs	r3, #1
   124da:	73fb      	strb	r3, [r7, #15]
   124dc:	e001      	b.n	124e2 <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
		}
		else
		{
			result=false;
   124de:	2300      	movs	r3, #0
   124e0:	73fb      	strb	r3, [r7, #15]
		}
	}

	return result;
   124e2:	7bfb      	ldrb	r3, [r7, #15]
}
   124e4:	4618      	mov	r0, r3
   124e6:	3714      	adds	r7, #20
   124e8:	46bd      	mov	sp, r7
   124ea:	bd90      	pop	{r4, r7, pc}
   124ec:	20006a98 	.word	0x20006a98
   124f0:	000140b9 	.word	0x000140b9
   124f4:	00013095 	.word	0x00013095
   124f8:	00012b85 	.word	0x00012b85

000124fc <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv>:

bool FlapperValveController::Control_NBC_StandAlone_Reset(void){
   124fc:	b580      	push	{r7, lr}
   124fe:	b082      	sub	sp, #8
   12500:	af00      	add	r7, sp, #0
   12502:	6078      	str	r0, [r7, #4]
	
	if ((IsInvalidPosition()&(!flapperValveIsMoving)))
   12504:	6878      	ldr	r0, [r7, #4]
   12506:	4b1c      	ldr	r3, [pc, #112]	; (12578 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x7c>)
   12508:	4798      	blx	r3
   1250a:	4603      	mov	r3, r0
   1250c:	461a      	mov	r2, r3
   1250e:	687b      	ldr	r3, [r7, #4]
   12510:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   12514:	b2db      	uxtb	r3, r3
   12516:	f083 0301 	eor.w	r3, r3, #1
   1251a:	b2db      	uxtb	r3, r3
   1251c:	4013      	ands	r3, r2
   1251e:	2b00      	cmp	r3, #0
   12520:	bf14      	ite	ne
   12522:	2301      	movne	r3, #1
   12524:	2300      	moveq	r3, #0
   12526:	b2db      	uxtb	r3, r3
   12528:	2b00      	cmp	r3, #0
   1252a:	d003      	beq.n	12534 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x38>
	{
		ResetValvePosition();
   1252c:	6878      	ldr	r0, [r7, #4]
   1252e:	4b13      	ldr	r3, [pc, #76]	; (1257c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x80>)
   12530:	4798      	blx	r3
   12532:	e019      	b.n	12568 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x6c>
	} 
	else
	{
		if (dataStruct.controlOutputs.iAlcFvFailsToMove)
   12534:	687b      	ldr	r3, [r7, #4]
   12536:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   1253a:	2b00      	cmp	r3, #0
   1253c:	d011      	beq.n	12562 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x66>
		{
			singlefv->ClearMoveFault(false);
   1253e:	687b      	ldr	r3, [r7, #4]
   12540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12544:	2100      	movs	r1, #0
   12546:	4618      	mov	r0, r3
   12548:	4b0d      	ldr	r3, [pc, #52]	; (12580 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x84>)
   1254a:	4798      	blx	r3
			delay_us(10);
   1254c:	200a      	movs	r0, #10
   1254e:	4b0d      	ldr	r3, [pc, #52]	; (12584 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x88>)
   12550:	4798      	blx	r3
			singlefv->ClearMoveFault(true);
   12552:	687b      	ldr	r3, [r7, #4]
   12554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12558:	2101      	movs	r1, #1
   1255a:	4618      	mov	r0, r3
   1255c:	4b08      	ldr	r3, [pc, #32]	; (12580 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x84>)
   1255e:	4798      	blx	r3
   12560:	e002      	b.n	12568 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x6c>
		} 
		else
		{
			Control_NBC_StandAlone();
   12562:	6878      	ldr	r0, [r7, #4]
   12564:	4b08      	ldr	r3, [pc, #32]	; (12588 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x8c>)
   12566:	4798      	blx	r3
		}

		
	}
	return resetTimeout;
   12568:	687b      	ldr	r3, [r7, #4]
   1256a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
   1256e:	b2db      	uxtb	r3, r3
}
   12570:	4618      	mov	r0, r3
   12572:	3708      	adds	r7, #8
   12574:	46bd      	mov	sp, r7
   12576:	bd80      	pop	{r7, pc}
   12578:	0001247d 	.word	0x0001247d
   1257c:	0001295d 	.word	0x0001295d
   12580:	000138ed 	.word	0x000138ed
   12584:	000035f1 	.word	0x000035f1
   12588:	0001258d 	.word	0x0001258d

0001258c <_ZN22FlapperValveController22Control_NBC_StandAloneEv>:

bool FlapperValveController::Control_NBC_StandAlone(void){
   1258c:	b580      	push	{r7, lr}
   1258e:	b082      	sub	sp, #8
   12590:	af00      	add	r7, sp, #0
   12592:	6078      	str	r0, [r7, #4]

	if (IsStandAloneMode())
   12594:	6878      	ldr	r0, [r7, #4]
   12596:	4b29      	ldr	r3, [pc, #164]	; (1263c <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb0>)
   12598:	4798      	blx	r3
   1259a:	4603      	mov	r3, r0
   1259c:	2b00      	cmp	r3, #0
   1259e:	d031      	beq.n	12604 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x78>
	{	

			standAloneMode=true;
   125a0:	687b      	ldr	r3, [r7, #4]
   125a2:	2201      	movs	r2, #1
   125a4:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
			if (standAloneActivated)
   125a8:	687b      	ldr	r3, [r7, #4]
   125aa:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   125ae:	2b00      	cmp	r3, #0
   125b0:	d003      	beq.n	125ba <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x2e>
			{
				ControlMovement_AND_NBC();
   125b2:	6878      	ldr	r0, [r7, #4]
   125b4:	4b22      	ldr	r3, [pc, #136]	; (12640 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
   125b6:	4798      	blx	r3
   125b8:	e038      	b.n	1262c <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
			}
			else
			{
				
				if ((currentPosition>0xff-parameters.flapperValveStandAloneMinimumPosition))
   125ba:	687b      	ldr	r3, [r7, #4]
   125bc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   125c0:	461a      	mov	r2, r3
   125c2:	687b      	ldr	r3, [r7, #4]
   125c4:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   125c8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
   125cc:	429a      	cmp	r2, r3
   125ce:	dd0c      	ble.n	125ea <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x5e>
				{
					StartControlling(0xff-parameters.flapperValveStandAloneMinimumPosition);
   125d0:	687b      	ldr	r3, [r7, #4]
   125d2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   125d6:	43db      	mvns	r3, r3
   125d8:	b2db      	uxtb	r3, r3
   125da:	4619      	mov	r1, r3
   125dc:	6878      	ldr	r0, [r7, #4]
   125de:	4b19      	ldr	r3, [pc, #100]	; (12644 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb8>)
   125e0:	4798      	blx	r3
					standAloneReturning=true;
   125e2:	687b      	ldr	r3, [r7, #4]
   125e4:	2201      	movs	r2, #1
   125e6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				}
				else
				{
					
				}
				currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
   125ea:	687b      	ldr	r3, [r7, #4]
   125ec:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   125f0:	43db      	mvns	r3, r3
   125f2:	b2da      	uxtb	r2, r3
   125f4:	687b      	ldr	r3, [r7, #4]
   125f6:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				standAloneActivated=true;
   125fa:	687b      	ldr	r3, [r7, #4]
   125fc:	2201      	movs	r2, #1
   125fe:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
   12602:	e013      	b.n	1262c <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
		
		
	} 
	else
	{
		standAloneMode=false;
   12604:	687b      	ldr	r3, [r7, #4]
   12606:	2200      	movs	r2, #0
   12608:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (standAloneActivated)
   1260c:	687b      	ldr	r3, [r7, #4]
   1260e:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   12612:	2b00      	cmp	r3, #0
   12614:	d007      	beq.n	12626 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x9a>
		{
		//	StartControlling(parameters.flapperValveMinimumPosition);
			standAloneActivated=false;
   12616:	687b      	ldr	r3, [r7, #4]
   12618:	2200      	movs	r2, #0
   1261a:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			standAloneReturning=false;
   1261e:	687b      	ldr	r3, [r7, #4]
   12620:	2200      	movs	r2, #0
   12622:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		} 
		else
		{
		
		}
			ControlMovement_AND_NBC();
   12626:	6878      	ldr	r0, [r7, #4]
   12628:	4b05      	ldr	r3, [pc, #20]	; (12640 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
   1262a:	4798      	blx	r3
		
	}
	return standAloneMode;
   1262c:	687b      	ldr	r3, [r7, #4]
   1262e:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
}
   12632:	4618      	mov	r0, r3
   12634:	3708      	adds	r7, #8
   12636:	46bd      	mov	sp, r7
   12638:	bd80      	pop	{r7, pc}
   1263a:	bf00      	nop
   1263c:	00012649 	.word	0x00012649
   12640:	00012415 	.word	0x00012415
   12644:	00012e99 	.word	0x00012e99

00012648 <_ZN22FlapperValveController16IsStandAloneModeEv>:

bool	FlapperValveController::IsStandAloneMode(){
   12648:	b480      	push	{r7}
   1264a:	b085      	sub	sp, #20
   1264c:	af00      	add	r7, sp, #0
   1264e:	6078      	str	r0, [r7, #4]
	
	bool result=false;
   12650:	2300      	movs	r3, #0
   12652:	73fb      	strb	r3, [r7, #15]
	if (partner!=NULL)
   12654:	687b      	ldr	r3, [r7, #4]
   12656:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   1265a:	2b00      	cmp	r3, #0
   1265c:	d011      	beq.n	12682 <_ZN22FlapperValveController16IsStandAloneModeEv+0x3a>
	{
		if (partner->isOK)
   1265e:	687b      	ldr	r3, [r7, #4]
   12660:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   12664:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   12668:	b2db      	uxtb	r3, r3
   1266a:	2b00      	cmp	r3, #0
   1266c:	d006      	beq.n	1267c <_ZN22FlapperValveController16IsStandAloneModeEv+0x34>
		{
			result=partner->dataStruct.controlOutputs.iAlcFvStandAloneOut;
   1266e:	687b      	ldr	r3, [r7, #4]
   12670:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   12674:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
   12678:	73fb      	strb	r3, [r7, #15]
   1267a:	e004      	b.n	12686 <_ZN22FlapperValveController16IsStandAloneModeEv+0x3e>
		}
		else
		{
			result=true;
   1267c:	2301      	movs	r3, #1
   1267e:	73fb      	strb	r3, [r7, #15]
   12680:	e001      	b.n	12686 <_ZN22FlapperValveController16IsStandAloneModeEv+0x3e>
		}
	} 
	else
	{
		result=true;
   12682:	2301      	movs	r3, #1
   12684:	73fb      	strb	r3, [r7, #15]
	}
	


	return result;
   12686:	7bfb      	ldrb	r3, [r7, #15]
}
   12688:	4618      	mov	r0, r3
   1268a:	3714      	adds	r7, #20
   1268c:	46bd      	mov	sp, r7
   1268e:	bc80      	pop	{r7}
   12690:	4770      	bx	lr

00012692 <_ZN22FlapperValveController10SetPartnerEPS_>:



void FlapperValveController::SetPartner(FlapperValveController *part){
   12692:	b480      	push	{r7}
   12694:	b083      	sub	sp, #12
   12696:	af00      	add	r7, sp, #0
   12698:	6078      	str	r0, [r7, #4]
   1269a:	6039      	str	r1, [r7, #0]
	partner=part;
   1269c:	687b      	ldr	r3, [r7, #4]
   1269e:	683a      	ldr	r2, [r7, #0]
   126a0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
   126a4:	bf00      	nop
   126a6:	370c      	adds	r7, #12
   126a8:	46bd      	mov	sp, r7
   126aa:	bc80      	pop	{r7}
   126ac:	4770      	bx	lr
	...

000126b0 <_ZN22FlapperValveController14CheckIsClosingEv>:
bool FlapperValveController::CheckIsClosing(void){
   126b0:	b580      	push	{r7, lr}
   126b2:	b082      	sub	sp, #8
   126b4:	af00      	add	r7, sp, #0
   126b6:	6078      	str	r0, [r7, #4]
		if ((((setpoint<6)&(currentPosition<6))|((setpoint>250)&(currentPosition>245)))&((!closing)&(flapperValveIsMoving)))
   126b8:	687b      	ldr	r3, [r7, #4]
   126ba:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   126be:	2b05      	cmp	r3, #5
   126c0:	bfd4      	ite	le
   126c2:	2301      	movle	r3, #1
   126c4:	2300      	movgt	r3, #0
   126c6:	b2da      	uxtb	r2, r3
   126c8:	687b      	ldr	r3, [r7, #4]
   126ca:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   126ce:	2b05      	cmp	r3, #5
   126d0:	bfd4      	ite	le
   126d2:	2301      	movle	r3, #1
   126d4:	2300      	movgt	r3, #0
   126d6:	b2db      	uxtb	r3, r3
   126d8:	4013      	ands	r3, r2
   126da:	b2da      	uxtb	r2, r3
   126dc:	687b      	ldr	r3, [r7, #4]
   126de:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   126e2:	2bfa      	cmp	r3, #250	; 0xfa
   126e4:	bfcc      	ite	gt
   126e6:	2301      	movgt	r3, #1
   126e8:	2300      	movle	r3, #0
   126ea:	b2d9      	uxtb	r1, r3
   126ec:	687b      	ldr	r3, [r7, #4]
   126ee:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   126f2:	2bf5      	cmp	r3, #245	; 0xf5
   126f4:	bfcc      	ite	gt
   126f6:	2301      	movgt	r3, #1
   126f8:	2300      	movle	r3, #0
   126fa:	b2db      	uxtb	r3, r3
   126fc:	400b      	ands	r3, r1
   126fe:	b2db      	uxtb	r3, r3
   12700:	4313      	orrs	r3, r2
   12702:	b2db      	uxtb	r3, r3
   12704:	461a      	mov	r2, r3
   12706:	687b      	ldr	r3, [r7, #4]
   12708:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   1270c:	f083 0301 	eor.w	r3, r3, #1
   12710:	b2db      	uxtb	r3, r3
   12712:	4619      	mov	r1, r3
   12714:	687b      	ldr	r3, [r7, #4]
   12716:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1271a:	b2db      	uxtb	r3, r3
   1271c:	400b      	ands	r3, r1
   1271e:	4013      	ands	r3, r2
   12720:	2b00      	cmp	r3, #0
   12722:	bf14      	ite	ne
   12724:	2301      	movne	r3, #1
   12726:	2300      	moveq	r3, #0
   12728:	b2db      	uxtb	r3, r3
   1272a:	2b00      	cmp	r3, #0
   1272c:	d01f      	beq.n	1276e <_ZN22FlapperValveController14CheckIsClosingEv+0xbe>
		{
			if (valve_ID==0)
   1272e:	687b      	ldr	r3, [r7, #4]
   12730:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   12734:	2b00      	cmp	r3, #0
   12736:	d105      	bne.n	12744 <_ZN22FlapperValveController14CheckIsClosingEv+0x94>
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
   12738:	22c8      	movs	r2, #200	; 0xc8
   1273a:	4910      	ldr	r1, [pc, #64]	; (1277c <_ZN22FlapperValveController14CheckIsClosingEv+0xcc>)
   1273c:	4810      	ldr	r0, [pc, #64]	; (12780 <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
   1273e:	4b11      	ldr	r3, [pc, #68]	; (12784 <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
   12740:	4798      	blx	r3
   12742:	e004      	b.n	1274e <_ZN22FlapperValveController14CheckIsClosingEv+0x9e>
			} 
			else
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
   12744:	22c8      	movs	r2, #200	; 0xc8
   12746:	4910      	ldr	r1, [pc, #64]	; (12788 <_ZN22FlapperValveController14CheckIsClosingEv+0xd8>)
   12748:	480d      	ldr	r0, [pc, #52]	; (12780 <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
   1274a:	4b0e      	ldr	r3, [pc, #56]	; (12784 <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
   1274c:	4798      	blx	r3
			}
		
			fullClosedTimeout=false;
   1274e:	687b      	ldr	r3, [r7, #4]
   12750:	2200      	movs	r2, #0
   12752:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			gotSetpoint=false;
   12756:	687b      	ldr	r3, [r7, #4]
   12758:	2200      	movs	r2, #0
   1275a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
			closing=true;
   1275e:	687b      	ldr	r3, [r7, #4]
   12760:	2201      	movs	r2, #1
   12762:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
			unLockTimeout=true;
   12766:	687b      	ldr	r3, [r7, #4]
   12768:	2201      	movs	r2, #1
   1276a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		}
		return closing;
   1276e:	687b      	ldr	r3, [r7, #4]
   12770:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
	
}
   12774:	4618      	mov	r0, r3
   12776:	3708      	adds	r7, #8
   12778:	46bd      	mov	sp, r7
   1277a:	bd80      	pop	{r7, pc}
   1277c:	00012179 	.word	0x00012179
   12780:	20005454 	.word	0x20005454
   12784:	0001047d 	.word	0x0001047d
   12788:	00012199 	.word	0x00012199

0001278c <_ZN22FlapperValveController15ControlMovementEv>:

uint8_t FlapperValveController::ControlMovement(){
   1278c:	b590      	push	{r4, r7, lr}
   1278e:	b083      	sub	sp, #12
   12790:	af00      	add	r7, sp, #0
   12792:	6078      	str	r0, [r7, #4]
	if (isControlling)
   12794:	687b      	ldr	r3, [r7, #4]
   12796:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   1279a:	2b00      	cmp	r3, #0
   1279c:	f000 80c9 	beq.w	12932 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
	{	
		if (((dataStruct.inputStatus.limit[0]|dataStruct.inputStatus.limit[1])&(closing))&(unLockTimeout))
   127a0:	687b      	ldr	r3, [r7, #4]
   127a2:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
   127a6:	687b      	ldr	r3, [r7, #4]
   127a8:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
   127ac:	4313      	orrs	r3, r2
   127ae:	b2db      	uxtb	r3, r3
   127b0:	461a      	mov	r2, r3
   127b2:	687b      	ldr	r3, [r7, #4]
   127b4:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   127b8:	4013      	ands	r3, r2
   127ba:	687a      	ldr	r2, [r7, #4]
   127bc:	f892 2099 	ldrb.w	r2, [r2, #153]	; 0x99
   127c0:	b2d2      	uxtb	r2, r2
   127c2:	4013      	ands	r3, r2
   127c4:	2b00      	cmp	r3, #0
   127c6:	bf14      	ite	ne
   127c8:	2301      	movne	r3, #1
   127ca:	2300      	moveq	r3, #0
   127cc:	b2db      	uxtb	r3, r3
   127ce:	2b00      	cmp	r3, #0
   127d0:	d003      	beq.n	127da <_ZN22FlapperValveController15ControlMovementEv+0x4e>
		{
				StopValveAtLimit();
   127d2:	6878      	ldr	r0, [r7, #4]
   127d4:	4b59      	ldr	r3, [pc, #356]	; (1293c <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
   127d6:	4798      	blx	r3
   127d8:	e0ab      	b.n	12932 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>

		} 
		else
		{
			
			CheckIsClosing();
   127da:	6878      	ldr	r0, [r7, #4]
   127dc:	4b58      	ldr	r3, [pc, #352]	; (12940 <_ZN22FlapperValveController15ControlMovementEv+0x1b4>)
   127de:	4798      	blx	r3
			if ((abs(currentPosition-setpoint)>tolerance)|(closing))
   127e0:	687b      	ldr	r3, [r7, #4]
   127e2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   127e6:	461a      	mov	r2, r3
   127e8:	687b      	ldr	r3, [r7, #4]
   127ea:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   127ee:	1ad3      	subs	r3, r2, r3
   127f0:	2b00      	cmp	r3, #0
   127f2:	bfb8      	it	lt
   127f4:	425b      	neglt	r3, r3
   127f6:	687a      	ldr	r2, [r7, #4]
   127f8:	f892 20a0 	ldrb.w	r2, [r2, #160]	; 0xa0
   127fc:	4293      	cmp	r3, r2
   127fe:	bfcc      	ite	gt
   12800:	2301      	movgt	r3, #1
   12802:	2300      	movle	r3, #0
   12804:	b2db      	uxtb	r3, r3
   12806:	461a      	mov	r2, r3
   12808:	687b      	ldr	r3, [r7, #4]
   1280a:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   1280e:	4313      	orrs	r3, r2
   12810:	2b00      	cmp	r3, #0
   12812:	d078      	beq.n	12906 <_ZN22FlapperValveController15ControlMovementEv+0x17a>
			{
				if (IsFlapperMoving())
   12814:	6878      	ldr	r0, [r7, #4]
   12816:	4b4b      	ldr	r3, [pc, #300]	; (12944 <_ZN22FlapperValveController15ControlMovementEv+0x1b8>)
   12818:	4798      	blx	r3
   1281a:	4603      	mov	r3, r0
   1281c:	2b00      	cmp	r3, #0
   1281e:	d04a      	beq.n	128b6 <_ZN22FlapperValveController15ControlMovementEv+0x12a>
				{
					if (closing)
   12820:	687b      	ldr	r3, [r7, #4]
   12822:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   12826:	2b00      	cmp	r3, #0
   12828:	d00e      	beq.n	12848 <_ZN22FlapperValveController15ControlMovementEv+0xbc>
					{
						if (keepControlling)
   1282a:	687b      	ldr	r3, [r7, #4]
   1282c:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
   12830:	2b00      	cmp	r3, #0
   12832:	d053      	beq.n	128dc <_ZN22FlapperValveController15ControlMovementEv+0x150>
						{
							if (fullClosedTimeout)
   12834:	687b      	ldr	r3, [r7, #4]
   12836:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1283a:	b2db      	uxtb	r3, r3
   1283c:	2b00      	cmp	r3, #0
   1283e:	d04d      	beq.n	128dc <_ZN22FlapperValveController15ControlMovementEv+0x150>
							{
								StopValveAtLimit();
   12840:	6878      	ldr	r0, [r7, #4]
   12842:	4b3e      	ldr	r3, [pc, #248]	; (1293c <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
   12844:	4798      	blx	r3
   12846:	e049      	b.n	128dc <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
					} 
					else
					{
						
						if (lastDirection!=CalculateDirection())
   12848:	687b      	ldr	r3, [r7, #4]
   1284a:	f893 40b4 	ldrb.w	r4, [r3, #180]	; 0xb4
   1284e:	6878      	ldr	r0, [r7, #4]
   12850:	4b3d      	ldr	r3, [pc, #244]	; (12948 <_ZN22FlapperValveController15ControlMovementEv+0x1bc>)
   12852:	4798      	blx	r3
   12854:	4603      	mov	r3, r0
   12856:	429c      	cmp	r4, r3
   12858:	bf14      	ite	ne
   1285a:	2301      	movne	r3, #1
   1285c:	2300      	moveq	r3, #0
   1285e:	b2db      	uxtb	r3, r3
   12860:	2b00      	cmp	r3, #0
   12862:	d00a      	beq.n	1287a <_ZN22FlapperValveController15ControlMovementEv+0xee>
						{
							StopMotor();
   12864:	6878      	ldr	r0, [r7, #4]
   12866:	4b39      	ldr	r3, [pc, #228]	; (1294c <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
   12868:	4798      	blx	r3
							RemoveTimeoutTask();
   1286a:	6878      	ldr	r0, [r7, #4]
   1286c:	4b38      	ldr	r3, [pc, #224]	; (12950 <_ZN22FlapperValveController15ControlMovementEv+0x1c4>)
   1286e:	4798      	blx	r3
							keepControlling=true;
   12870:	687b      	ldr	r3, [r7, #4]
   12872:	2201      	movs	r2, #1
   12874:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
   12878:	e030      	b.n	128dc <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							if (timeoutFlapperValveController)
   1287a:	687b      	ldr	r3, [r7, #4]
   1287c:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   12880:	b2db      	uxtb	r3, r3
   12882:	2b00      	cmp	r3, #0
   12884:	d003      	beq.n	1288e <_ZN22FlapperValveController15ControlMovementEv+0x102>
							{
								StopMotor();
   12886:	6878      	ldr	r0, [r7, #4]
   12888:	4b30      	ldr	r3, [pc, #192]	; (1294c <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
   1288a:	4798      	blx	r3
   1288c:	e026      	b.n	128dc <_ZN22FlapperValveController15ControlMovementEv+0x150>
								
							}
							else
							{
								if (keepControlling)
   1288e:	687b      	ldr	r3, [r7, #4]
   12890:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
   12894:	2b00      	cmp	r3, #0
   12896:	d021      	beq.n	128dc <_ZN22FlapperValveController15ControlMovementEv+0x150>
								{
									if (timeoutKeepControlling)
   12898:	687b      	ldr	r3, [r7, #4]
   1289a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   1289e:	b2db      	uxtb	r3, r3
   128a0:	2b00      	cmp	r3, #0
   128a2:	d003      	beq.n	128ac <_ZN22FlapperValveController15ControlMovementEv+0x120>
									{
										StopMotor();
   128a4:	6878      	ldr	r0, [r7, #4]
   128a6:	4b29      	ldr	r3, [pc, #164]	; (1294c <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
   128a8:	4798      	blx	r3
   128aa:	e017      	b.n	128dc <_ZN22FlapperValveController15ControlMovementEv+0x150>
									}
									else
									{
										KeepControlling();
   128ac:	2100      	movs	r1, #0
   128ae:	6878      	ldr	r0, [r7, #4]
   128b0:	4b28      	ldr	r3, [pc, #160]	; (12954 <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
   128b2:	4798      	blx	r3
   128b4:	e012      	b.n	128dc <_ZN22FlapperValveController15ControlMovementEv+0x150>
					}
					
				}
				else
				{
					if (keepControlling)
   128b6:	687b      	ldr	r3, [r7, #4]
   128b8:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
   128bc:	2b00      	cmp	r3, #0
   128be:	d00d      	beq.n	128dc <_ZN22FlapperValveController15ControlMovementEv+0x150>
					{
						if (timeoutKeepControlling)
   128c0:	687b      	ldr	r3, [r7, #4]
   128c2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   128c6:	b2db      	uxtb	r3, r3
   128c8:	2b00      	cmp	r3, #0
   128ca:	d003      	beq.n	128d4 <_ZN22FlapperValveController15ControlMovementEv+0x148>
						{
							StopValveinBetween();
   128cc:	6878      	ldr	r0, [r7, #4]
   128ce:	4b22      	ldr	r3, [pc, #136]	; (12958 <_ZN22FlapperValveController15ControlMovementEv+0x1cc>)
   128d0:	4798      	blx	r3
   128d2:	e003      	b.n	128dc <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							KeepControlling();
   128d4:	2100      	movs	r1, #0
   128d6:	6878      	ldr	r0, [r7, #4]
   128d8:	4b1e      	ldr	r3, [pc, #120]	; (12954 <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
   128da:	4798      	blx	r3
						
					}
					
				}
				
				if ((abs(currentPosition-setpoint)>tolerance))
   128dc:	687b      	ldr	r3, [r7, #4]
   128de:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   128e2:	461a      	mov	r2, r3
   128e4:	687b      	ldr	r3, [r7, #4]
   128e6:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   128ea:	1ad3      	subs	r3, r2, r3
   128ec:	2b00      	cmp	r3, #0
   128ee:	bfb8      	it	lt
   128f0:	425b      	neglt	r3, r3
   128f2:	687a      	ldr	r2, [r7, #4]
   128f4:	f892 20a0 	ldrb.w	r2, [r2, #160]	; 0xa0
   128f8:	4293      	cmp	r3, r2
   128fa:	dd1a      	ble.n	12932 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				{
					gotSetpoint=false;
   128fc:	687b      	ldr	r3, [r7, #4]
   128fe:	2200      	movs	r2, #0
   12900:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
   12904:	e015      	b.n	12932 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				
				
			}
			else
			{
				if (closing)
   12906:	687b      	ldr	r3, [r7, #4]
   12908:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   1290c:	2b00      	cmp	r3, #0
   1290e:	d009      	beq.n	12924 <_ZN22FlapperValveController15ControlMovementEv+0x198>
				{
					if (fullClosedTimeout)
   12910:	687b      	ldr	r3, [r7, #4]
   12912:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   12916:	b2db      	uxtb	r3, r3
   12918:	2b00      	cmp	r3, #0
   1291a:	d00a      	beq.n	12932 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
						StopValveAtLimit();
   1291c:	6878      	ldr	r0, [r7, #4]
   1291e:	4b07      	ldr	r3, [pc, #28]	; (1293c <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
   12920:	4798      	blx	r3
   12922:	e006      	b.n	12932 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
					}
				} 
				else
				{
					StopValveinBetween();
   12924:	6878      	ldr	r0, [r7, #4]
   12926:	4b0c      	ldr	r3, [pc, #48]	; (12958 <_ZN22FlapperValveController15ControlMovementEv+0x1cc>)
   12928:	4798      	blx	r3
					gotSetpoint=true;
   1292a:	687b      	ldr	r3, [r7, #4]
   1292c:	2201      	movs	r2, #1
   1292e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
		
	} 
	else
	{
	}
	return 0;
   12932:	2300      	movs	r3, #0
	
}
   12934:	4618      	mov	r0, r3
   12936:	370c      	adds	r7, #12
   12938:	46bd      	mov	sp, r7
   1293a:	bd90      	pop	{r4, r7, pc}
   1293c:	00012ca1 	.word	0x00012ca1
   12940:	000126b1 	.word	0x000126b1
   12944:	00012bf9 	.word	0x00012bf9
   12948:	00012381 	.word	0x00012381
   1294c:	00012bcd 	.word	0x00012bcd
   12950:	000133ad 	.word	0x000133ad
   12954:	0001305d 	.word	0x0001305d
   12958:	00012d39 	.word	0x00012d39

0001295c <_ZN22FlapperValveController18ResetValvePositionEv>:
void FlapperValveController::ResetValvePosition(void){
   1295c:	b580      	push	{r7, lr}
   1295e:	b084      	sub	sp, #16
   12960:	af00      	add	r7, sp, #0
   12962:	6078      	str	r0, [r7, #4]
	uint8_t localSetpoint,localPosition;
	bool pinLevel=gpio_get_pin_level(LED0);
   12964:	2052      	movs	r0, #82	; 0x52
   12966:	4b60      	ldr	r3, [pc, #384]	; (12ae8 <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
   12968:	4798      	blx	r3
   1296a:	4603      	mov	r3, r0
   1296c:	73fb      	strb	r3, [r7, #15]
	if (IsInvalidPosition())
   1296e:	6878      	ldr	r0, [r7, #4]
   12970:	4b5e      	ldr	r3, [pc, #376]	; (12aec <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
   12972:	4798      	blx	r3
   12974:	4603      	mov	r3, r0
   12976:	2b00      	cmp	r3, #0
   12978:	f000 80b2 	beq.w	12ae0 <_ZN22FlapperValveController18ResetValvePositionEv+0x184>
	{
		
		localSetpoint=currentMaximum;
   1297c:	687b      	ldr	r3, [r7, #4]
   1297e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
   12982:	73bb      	strb	r3, [r7, #14]
		
		singlefv->SetEnable(false);
   12984:	687b      	ldr	r3, [r7, #4]
   12986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1298a:	2100      	movs	r1, #0
   1298c:	4618      	mov	r0, r3
   1298e:	4b58      	ldr	r3, [pc, #352]	; (12af0 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
   12990:	4798      	blx	r3
		singlefv->SetInvalidPosition(false);
   12992:	687b      	ldr	r3, [r7, #4]
   12994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12998:	2100      	movs	r1, #0
   1299a:	4618      	mov	r0, r3
   1299c:	4b55      	ldr	r3, [pc, #340]	; (12af4 <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
   1299e:	4798      	blx	r3
		singlefv->ClearMoveFault(false);
   129a0:	687b      	ldr	r3, [r7, #4]
   129a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   129a6:	2100      	movs	r1, #0
   129a8:	4618      	mov	r0, r3
   129aa:	4b53      	ldr	r3, [pc, #332]	; (12af8 <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
   129ac:	4798      	blx	r3
		delay_ms(100);
   129ae:	2064      	movs	r0, #100	; 0x64
   129b0:	4b52      	ldr	r3, [pc, #328]	; (12afc <_ZN22FlapperValveController18ResetValvePositionEv+0x1a0>)
   129b2:	4798      	blx	r3
		if (singlefv->ReadActualPosition()>localSetpoint)
   129b4:	687b      	ldr	r3, [r7, #4]
   129b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   129ba:	4618      	mov	r0, r3
   129bc:	4b50      	ldr	r3, [pc, #320]	; (12b00 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
   129be:	4798      	blx	r3
   129c0:	4603      	mov	r3, r0
   129c2:	461a      	mov	r2, r3
   129c4:	7bbb      	ldrb	r3, [r7, #14]
   129c6:	429a      	cmp	r2, r3
   129c8:	bfcc      	ite	gt
   129ca:	2301      	movgt	r3, #1
   129cc:	2300      	movle	r3, #0
   129ce:	b2db      	uxtb	r3, r3
   129d0:	2b00      	cmp	r3, #0
   129d2:	d007      	beq.n	129e4 <_ZN22FlapperValveController18ResetValvePositionEv+0x88>
		{
			singlefv->SetDirection(true);
   129d4:	687b      	ldr	r3, [r7, #4]
   129d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   129da:	2101      	movs	r1, #1
   129dc:	4618      	mov	r0, r3
   129de:	4b49      	ldr	r3, [pc, #292]	; (12b04 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a8>)
   129e0:	4798      	blx	r3
   129e2:	e006      	b.n	129f2 <_ZN22FlapperValveController18ResetValvePositionEv+0x96>
		}
		else
		{
			singlefv->SetDirection(false);
   129e4:	687b      	ldr	r3, [r7, #4]
   129e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   129ea:	2100      	movs	r1, #0
   129ec:	4618      	mov	r0, r3
   129ee:	4b45      	ldr	r3, [pc, #276]	; (12b04 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a8>)
   129f0:	4798      	blx	r3
		}
		singlefv->SetInvalidPosition(true);
   129f2:	687b      	ldr	r3, [r7, #4]
   129f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   129f8:	2101      	movs	r1, #1
   129fa:	4618      	mov	r0, r3
   129fc:	4b3d      	ldr	r3, [pc, #244]	; (12af4 <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
   129fe:	4798      	blx	r3
		singlefv->ClearMoveFault(true);
   12a00:	687b      	ldr	r3, [r7, #4]
   12a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12a06:	2101      	movs	r1, #1
   12a08:	4618      	mov	r0, r3
   12a0a:	4b3b      	ldr	r3, [pc, #236]	; (12af8 <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
   12a0c:	4798      	blx	r3
		singlefv->WriteSetpoint(localSetpoint);
   12a0e:	687b      	ldr	r3, [r7, #4]
   12a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12a14:	7bba      	ldrb	r2, [r7, #14]
   12a16:	4611      	mov	r1, r2
   12a18:	4618      	mov	r0, r3
   12a1a:	4b3b      	ldr	r3, [pc, #236]	; (12b08 <_ZN22FlapperValveController18ResetValvePositionEv+0x1ac>)
   12a1c:	4798      	blx	r3
		

		currentPosition=singlefv->ReadActualPosition();
   12a1e:	687b      	ldr	r3, [r7, #4]
   12a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12a24:	4618      	mov	r0, r3
   12a26:	4b36      	ldr	r3, [pc, #216]	; (12b00 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
   12a28:	4798      	blx	r3
   12a2a:	4603      	mov	r3, r0
   12a2c:	461a      	mov	r2, r3
   12a2e:	687b      	ldr	r3, [r7, #4]
   12a30:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		
		resetTimeout=false;
   12a34:	687b      	ldr	r3, [r7, #4]
   12a36:	2200      	movs	r2, #0
   12a38:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		if (valve_ID==0)
   12a3c:	687b      	ldr	r3, [r7, #4]
   12a3e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   12a42:	2b00      	cmp	r3, #0
   12a44:	d106      	bne.n	12a54 <_ZN22FlapperValveController18ResetValvePositionEv+0xf8>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve1Timeout),1000);
   12a46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12a4a:	4930      	ldr	r1, [pc, #192]	; (12b0c <_ZN22FlapperValveController18ResetValvePositionEv+0x1b0>)
   12a4c:	4830      	ldr	r0, [pc, #192]	; (12b10 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b4>)
   12a4e:	4b31      	ldr	r3, [pc, #196]	; (12b14 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b8>)
   12a50:	4798      	blx	r3
   12a52:	e005      	b.n	12a60 <_ZN22FlapperValveController18ResetValvePositionEv+0x104>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve2Timeout),1000);
   12a54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12a58:	492f      	ldr	r1, [pc, #188]	; (12b18 <_ZN22FlapperValveController18ResetValvePositionEv+0x1bc>)
   12a5a:	482d      	ldr	r0, [pc, #180]	; (12b10 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b4>)
   12a5c:	4b2d      	ldr	r3, [pc, #180]	; (12b14 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b8>)
   12a5e:	4798      	blx	r3
		}
	
		
		singlefv->SetEnable(true);
   12a60:	687b      	ldr	r3, [r7, #4]
   12a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12a66:	2101      	movs	r1, #1
   12a68:	4618      	mov	r0, r3
   12a6a:	4b21      	ldr	r3, [pc, #132]	; (12af0 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
   12a6c:	4798      	blx	r3
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
   12a6e:	687b      	ldr	r3, [r7, #4]
   12a70:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   12a74:	461a      	mov	r2, r3
   12a76:	7bbb      	ldrb	r3, [r7, #14]
   12a78:	1ad3      	subs	r3, r2, r3
   12a7a:	2b00      	cmp	r3, #0
   12a7c:	bfb8      	it	lt
   12a7e:	425b      	neglt	r3, r3
   12a80:	2b06      	cmp	r3, #6
   12a82:	bfcc      	ite	gt
   12a84:	2301      	movgt	r3, #1
   12a86:	2300      	movle	r3, #0
   12a88:	b2db      	uxtb	r3, r3
   12a8a:	461a      	mov	r2, r3
   12a8c:	687b      	ldr	r3, [r7, #4]
   12a8e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
   12a92:	b2db      	uxtb	r3, r3
   12a94:	f083 0301 	eor.w	r3, r3, #1
   12a98:	b2db      	uxtb	r3, r3
   12a9a:	4013      	ands	r3, r2
   12a9c:	2b00      	cmp	r3, #0
   12a9e:	bf14      	ite	ne
   12aa0:	2301      	movne	r3, #1
   12aa2:	2300      	moveq	r3, #0
   12aa4:	b2db      	uxtb	r3, r3
   12aa6:	2b00      	cmp	r3, #0
   12aa8:	d00e      	beq.n	12ac8 <_ZN22FlapperValveController18ResetValvePositionEv+0x16c>

		{
			gpio_toggle_pin_level(LED0);
   12aaa:	2052      	movs	r0, #82	; 0x52
   12aac:	4b1b      	ldr	r3, [pc, #108]	; (12b1c <_ZN22FlapperValveController18ResetValvePositionEv+0x1c0>)
   12aae:	4798      	blx	r3
			currentPosition=singlefv->ReadActualPosition();
   12ab0:	687b      	ldr	r3, [r7, #4]
   12ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12ab6:	4618      	mov	r0, r3
   12ab8:	4b11      	ldr	r3, [pc, #68]	; (12b00 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
   12aba:	4798      	blx	r3
   12abc:	4603      	mov	r3, r0
   12abe:	461a      	mov	r2, r3
   12ac0:	687b      	ldr	r3, [r7, #4]
   12ac2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
   12ac6:	e7d2      	b.n	12a6e <_ZN22FlapperValveController18ResetValvePositionEv+0x112>

		}
		singlefv->SetEnable(false);
   12ac8:	687b      	ldr	r3, [r7, #4]
   12aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12ace:	2100      	movs	r1, #0
   12ad0:	4618      	mov	r0, r3
   12ad2:	4b07      	ldr	r3, [pc, #28]	; (12af0 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
   12ad4:	4798      	blx	r3
		gpio_set_pin_level(LED0,pinLevel);
   12ad6:	7bfb      	ldrb	r3, [r7, #15]
   12ad8:	4619      	mov	r1, r3
   12ada:	2052      	movs	r0, #82	; 0x52
   12adc:	4b10      	ldr	r3, [pc, #64]	; (12b20 <_ZN22FlapperValveController18ResetValvePositionEv+0x1c4>)
   12ade:	4798      	blx	r3
	} 
	else
	{
	}
}
   12ae0:	bf00      	nop
   12ae2:	3710      	adds	r7, #16
   12ae4:	46bd      	mov	sp, r7
   12ae6:	bd80      	pop	{r7, pc}
   12ae8:	000120e5 	.word	0x000120e5
   12aec:	0001247d 	.word	0x0001247d
   12af0:	000137f5 	.word	0x000137f5
   12af4:	00013965 	.word	0x00013965
   12af8:	000138ed 	.word	0x000138ed
   12afc:	00003625 	.word	0x00003625
   12b00:	00013a15 	.word	0x00013a15
   12b04:	00013875 	.word	0x00013875
   12b08:	000139dd 	.word	0x000139dd
   12b0c:	000121b9 	.word	0x000121b9
   12b10:	20005454 	.word	0x20005454
   12b14:	0001047d 	.word	0x0001047d
   12b18:	000121d9 	.word	0x000121d9
   12b1c:	000120b5 	.word	0x000120b5
   12b20:	0001207d 	.word	0x0001207d

00012b24 <_ZN22FlapperValveController15CommandNBC_ModeEv>:

uint8_t FlapperValveController::CommandNBC_Mode(void){
   12b24:	b580      	push	{r7, lr}
   12b26:	b082      	sub	sp, #8
   12b28:	af00      	add	r7, sp, #0
   12b2a:	6078      	str	r0, [r7, #4]
	if (NBC_Activated)
   12b2c:	687b      	ldr	r3, [r7, #4]
   12b2e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   12b32:	2b00      	cmp	r3, #0
   12b34:	d014      	beq.n	12b60 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x3c>
	{
		if (NBC_Mode)
   12b36:	687b      	ldr	r3, [r7, #4]
   12b38:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   12b3c:	2b00      	cmp	r3, #0
   12b3e:	d003      	beq.n	12b48 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x24>
		{
			ControlMovement();
   12b40:	6878      	ldr	r0, [r7, #4]
   12b42:	4b0e      	ldr	r3, [pc, #56]	; (12b7c <_ZN22FlapperValveController15CommandNBC_ModeEv+0x58>)
   12b44:	4798      	blx	r3
   12b46:	e013      	b.n	12b70 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
		else
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
   12b48:	687b      	ldr	r3, [r7, #4]
   12b4a:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
   12b4e:	4619      	mov	r1, r3
   12b50:	6878      	ldr	r0, [r7, #4]
   12b52:	4b0b      	ldr	r3, [pc, #44]	; (12b80 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
   12b54:	4798      	blx	r3
			NBC_Activated=false;
   12b56:	687b      	ldr	r3, [r7, #4]
   12b58:	2200      	movs	r2, #0
   12b5a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   12b5e:	e007      	b.n	12b70 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
	} 
	else
	{
			StartControlling(255);
   12b60:	21ff      	movs	r1, #255	; 0xff
   12b62:	6878      	ldr	r0, [r7, #4]
   12b64:	4b06      	ldr	r3, [pc, #24]	; (12b80 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
   12b66:	4798      	blx	r3
			NBC_Activated=true;
   12b68:	687b      	ldr	r3, [r7, #4]
   12b6a:	2201      	movs	r2, #1
   12b6c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	}

	return 0;
   12b70:	2300      	movs	r3, #0
	
}
   12b72:	4618      	mov	r0, r3
   12b74:	3708      	adds	r7, #8
   12b76:	46bd      	mov	sp, r7
   12b78:	bd80      	pop	{r7, pc}
   12b7a:	bf00      	nop
   12b7c:	0001278d 	.word	0x0001278d
   12b80:	00012e99 	.word	0x00012e99

00012b84 <_ZN22FlapperValveController9IsNBCModeEv>:

bool FlapperValveController::IsNBCMode(){
   12b84:	b480      	push	{r7}
   12b86:	b083      	sub	sp, #12
   12b88:	af00      	add	r7, sp, #0
   12b8a:	6078      	str	r0, [r7, #4]
	NBC_Mode=((dataStruct.inputStatus.cabin[0]&dataStruct.inputStatus.cabin[1])|NBC_Remote);
   12b8c:	687b      	ldr	r3, [r7, #4]
   12b8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   12b92:	461a      	mov	r2, r3
   12b94:	687b      	ldr	r3, [r7, #4]
   12b96:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
   12b9a:	4013      	ands	r3, r2
   12b9c:	687a      	ldr	r2, [r7, #4]
   12b9e:	f892 20bd 	ldrb.w	r2, [r2, #189]	; 0xbd
   12ba2:	4313      	orrs	r3, r2
   12ba4:	2b00      	cmp	r3, #0
   12ba6:	bf14      	ite	ne
   12ba8:	2301      	movne	r3, #1
   12baa:	2300      	moveq	r3, #0
   12bac:	b2da      	uxtb	r2, r3
   12bae:	687b      	ldr	r3, [r7, #4]
   12bb0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	currentMaximum=255;
   12bb4:	687b      	ldr	r3, [r7, #4]
   12bb6:	22ff      	movs	r2, #255	; 0xff
   12bb8:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	return NBC_Mode;
   12bbc:	687b      	ldr	r3, [r7, #4]
   12bbe:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
}
   12bc2:	4618      	mov	r0, r3
   12bc4:	370c      	adds	r7, #12
   12bc6:	46bd      	mov	sp, r7
   12bc8:	bc80      	pop	{r7}
   12bca:	4770      	bx	lr

00012bcc <_ZN22FlapperValveController9StopMotorEv>:
	}
	return NBC_Remote;
}


uint8_t	FlapperValveController::StopMotor(){
   12bcc:	b580      	push	{r7, lr}
   12bce:	b082      	sub	sp, #8
   12bd0:	af00      	add	r7, sp, #0
   12bd2:	6078      	str	r0, [r7, #4]
	singlefv->SetEnable(false);
   12bd4:	687b      	ldr	r3, [r7, #4]
   12bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12bda:	2100      	movs	r1, #0
   12bdc:	4618      	mov	r0, r3
   12bde:	4b05      	ldr	r3, [pc, #20]	; (12bf4 <_ZN22FlapperValveController9StopMotorEv+0x28>)
   12be0:	4798      	blx	r3
	flapperValveIsMoving=false;
   12be2:	687b      	ldr	r3, [r7, #4]
   12be4:	2200      	movs	r2, #0
   12be6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	
	return 0;
   12bea:	2300      	movs	r3, #0
}
   12bec:	4618      	mov	r0, r3
   12bee:	3708      	adds	r7, #8
   12bf0:	46bd      	mov	sp, r7
   12bf2:	bd80      	pop	{r7, pc}
   12bf4:	000137f5 	.word	0x000137f5

00012bf8 <_ZN22FlapperValveController15IsFlapperMovingEv>:

bool FlapperValveController::IsFlapperMoving(void){
   12bf8:	b480      	push	{r7}
   12bfa:	b085      	sub	sp, #20
   12bfc:	af00      	add	r7, sp, #0
   12bfe:	6078      	str	r0, [r7, #4]
	bool_result=true;
   12c00:	687b      	ldr	r3, [r7, #4]
   12c02:	2201      	movs	r2, #1
   12c04:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	if (flapperValveIsMoving)
   12c08:	687b      	ldr	r3, [r7, #4]
   12c0a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   12c0e:	b2db      	uxtb	r3, r3
   12c10:	2b00      	cmp	r3, #0
   12c12:	d03c      	beq.n	12c8e <_ZN22FlapperValveController15IsFlapperMovingEv+0x96>
	{
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   12c14:	2300      	movs	r3, #0
   12c16:	73fb      	strb	r3, [r7, #15]
   12c18:	7bfb      	ldrb	r3, [r7, #15]
   12c1a:	2b0e      	cmp	r3, #14
   12c1c:	dc26      	bgt.n	12c6c <_ZN22FlapperValveController15IsFlapperMovingEv+0x74>
		{
			if (positions[valve_ID][i]==positions[valve_ID][i+1])
   12c1e:	687b      	ldr	r3, [r7, #4]
   12c20:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   12c24:	687a      	ldr	r2, [r7, #4]
   12c26:	3332      	adds	r3, #50	; 0x32
   12c28:	009b      	lsls	r3, r3, #2
   12c2a:	4413      	add	r3, r2
   12c2c:	685a      	ldr	r2, [r3, #4]
   12c2e:	7bfb      	ldrb	r3, [r7, #15]
   12c30:	4413      	add	r3, r2
   12c32:	781a      	ldrb	r2, [r3, #0]
   12c34:	687b      	ldr	r3, [r7, #4]
   12c36:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   12c3a:	6879      	ldr	r1, [r7, #4]
   12c3c:	3332      	adds	r3, #50	; 0x32
   12c3e:	009b      	lsls	r3, r3, #2
   12c40:	440b      	add	r3, r1
   12c42:	6859      	ldr	r1, [r3, #4]
   12c44:	7bfb      	ldrb	r3, [r7, #15]
   12c46:	3301      	adds	r3, #1
   12c48:	440b      	add	r3, r1
   12c4a:	781b      	ldrb	r3, [r3, #0]
   12c4c:	429a      	cmp	r2, r3
   12c4e:	d104      	bne.n	12c5a <_ZN22FlapperValveController15IsFlapperMovingEv+0x62>
			{
				bool_result=false;
   12c50:	687b      	ldr	r3, [r7, #4]
   12c52:	2200      	movs	r2, #0
   12c54:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
   12c58:	e004      	b.n	12c64 <_ZN22FlapperValveController15IsFlapperMovingEv+0x6c>
			}
			else
			{
				bool_result=true;
   12c5a:	687b      	ldr	r3, [r7, #4]
   12c5c:	2201      	movs	r2, #1
   12c5e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
				break;
   12c62:	e003      	b.n	12c6c <_ZN22FlapperValveController15IsFlapperMovingEv+0x74>
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   12c64:	7bfb      	ldrb	r3, [r7, #15]
   12c66:	3301      	adds	r3, #1
   12c68:	73fb      	strb	r3, [r7, #15]
   12c6a:	e7d5      	b.n	12c18 <_ZN22FlapperValveController15IsFlapperMovingEv+0x20>
			}
			
		}
		flapperValveIsMoving&=bool_result;
   12c6c:	687b      	ldr	r3, [r7, #4]
   12c6e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   12c72:	b2db      	uxtb	r3, r3
   12c74:	461a      	mov	r2, r3
   12c76:	687b      	ldr	r3, [r7, #4]
   12c78:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   12c7c:	4013      	ands	r3, r2
   12c7e:	2b00      	cmp	r3, #0
   12c80:	bf14      	ite	ne
   12c82:	2301      	movne	r3, #1
   12c84:	2300      	moveq	r3, #0
   12c86:	b2da      	uxtb	r2, r3
   12c88:	687b      	ldr	r3, [r7, #4]
   12c8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	} 
	else
	{
	}
	return flapperValveIsMoving;
   12c8e:	687b      	ldr	r3, [r7, #4]
   12c90:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   12c94:	b2db      	uxtb	r3, r3
	
}
   12c96:	4618      	mov	r0, r3
   12c98:	3714      	adds	r7, #20
   12c9a:	46bd      	mov	sp, r7
   12c9c:	bc80      	pop	{r7}
   12c9e:	4770      	bx	lr

00012ca0 <_ZN22FlapperValveController16StopValveAtLimitEv>:

void	FlapperValveController::StopValveAtLimit(void){
   12ca0:	b580      	push	{r7, lr}
   12ca2:	b082      	sub	sp, #8
   12ca4:	af00      	add	r7, sp, #0
   12ca6:	6078      	str	r0, [r7, #4]
		if (closing)
   12ca8:	687b      	ldr	r3, [r7, #4]
   12caa:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   12cae:	2b00      	cmp	r3, #0
   12cb0:	d003      	beq.n	12cba <_ZN22FlapperValveController16StopValveAtLimitEv+0x1a>
		{
			closing=false;
   12cb2:	687b      	ldr	r3, [r7, #4]
   12cb4:	2200      	movs	r2, #0
   12cb6:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
		}
	
		StopMotor();
   12cba:	6878      	ldr	r0, [r7, #4]
   12cbc:	4b17      	ldr	r3, [pc, #92]	; (12d1c <_ZN22FlapperValveController16StopValveAtLimitEv+0x7c>)
   12cbe:	4798      	blx	r3
		if (valve_ID==0)
   12cc0:	687b      	ldr	r3, [r7, #4]
   12cc2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   12cc6:	2b00      	cmp	r3, #0
   12cc8:	d108      	bne.n	12cdc <_ZN22FlapperValveController16StopValveAtLimitEv+0x3c>
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
   12cca:	4915      	ldr	r1, [pc, #84]	; (12d20 <_ZN22FlapperValveController16StopValveAtLimitEv+0x80>)
   12ccc:	4815      	ldr	r0, [pc, #84]	; (12d24 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   12cce:	4b16      	ldr	r3, [pc, #88]	; (12d28 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   12cd0:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed));
   12cd2:	4916      	ldr	r1, [pc, #88]	; (12d2c <_ZN22FlapperValveController16StopValveAtLimitEv+0x8c>)
   12cd4:	4813      	ldr	r0, [pc, #76]	; (12d24 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   12cd6:	4b14      	ldr	r3, [pc, #80]	; (12d28 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   12cd8:	4798      	blx	r3
   12cda:	e007      	b.n	12cec <_ZN22FlapperValveController16StopValveAtLimitEv+0x4c>
		} 
		else
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
   12cdc:	4914      	ldr	r1, [pc, #80]	; (12d30 <_ZN22FlapperValveController16StopValveAtLimitEv+0x90>)
   12cde:	4811      	ldr	r0, [pc, #68]	; (12d24 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   12ce0:	4b11      	ldr	r3, [pc, #68]	; (12d28 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   12ce2:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed));
   12ce4:	4913      	ldr	r1, [pc, #76]	; (12d34 <_ZN22FlapperValveController16StopValveAtLimitEv+0x94>)
   12ce6:	480f      	ldr	r0, [pc, #60]	; (12d24 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   12ce8:	4b0f      	ldr	r3, [pc, #60]	; (12d28 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   12cea:	4798      	blx	r3
		}
	
		timeoutFlapperValveController=false;
   12cec:	687b      	ldr	r3, [r7, #4]
   12cee:	2200      	movs	r2, #0
   12cf0:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		timeoutKeepControlling=false;
   12cf4:	687b      	ldr	r3, [r7, #4]
   12cf6:	2200      	movs	r2, #0
   12cf8:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		unLockTimeout=false;
   12cfc:	687b      	ldr	r3, [r7, #4]
   12cfe:	2200      	movs	r2, #0
   12d00:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		paused=false;
   12d04:	687b      	ldr	r3, [r7, #4]
   12d06:	2200      	movs	r2, #0
   12d08:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		keepControlling=false;
   12d0c:	687b      	ldr	r3, [r7, #4]
   12d0e:	2200      	movs	r2, #0
   12d10:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
}
   12d14:	bf00      	nop
   12d16:	3708      	adds	r7, #8
   12d18:	46bd      	mov	sp, r7
   12d1a:	bd80      	pop	{r7, pc}
   12d1c:	00012bcd 	.word	0x00012bcd
   12d20:	00012121 	.word	0x00012121
   12d24:	20005454 	.word	0x20005454
   12d28:	00010425 	.word	0x00010425
   12d2c:	00012179 	.word	0x00012179
   12d30:	0001214d 	.word	0x0001214d
   12d34:	00012199 	.word	0x00012199

00012d38 <_ZN22FlapperValveController18StopValveinBetweenEv>:

void FlapperValveController::StopValveinBetween(void){
   12d38:	b580      	push	{r7, lr}
   12d3a:	b082      	sub	sp, #8
   12d3c:	af00      	add	r7, sp, #0
   12d3e:	6078      	str	r0, [r7, #4]
		StopMotor();
   12d40:	6878      	ldr	r0, [r7, #4]
   12d42:	4b0c      	ldr	r3, [pc, #48]	; (12d74 <_ZN22FlapperValveController18StopValveinBetweenEv+0x3c>)
   12d44:	4798      	blx	r3
		RemoveTimeoutTask();
   12d46:	6878      	ldr	r0, [r7, #4]
   12d48:	4b0b      	ldr	r3, [pc, #44]	; (12d78 <_ZN22FlapperValveController18StopValveinBetweenEv+0x40>)
   12d4a:	4798      	blx	r3
		timeoutFlapperValveController=false;
   12d4c:	687b      	ldr	r3, [r7, #4]
   12d4e:	2200      	movs	r2, #0
   12d50:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		paused=false;
   12d54:	687b      	ldr	r3, [r7, #4]
   12d56:	2200      	movs	r2, #0
   12d58:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		timeoutKeepControlling=false;
   12d5c:	687b      	ldr	r3, [r7, #4]
   12d5e:	2200      	movs	r2, #0
   12d60:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		keepControlling=true;
   12d64:	687b      	ldr	r3, [r7, #4]
   12d66:	2201      	movs	r2, #1
   12d68:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
}
   12d6c:	bf00      	nop
   12d6e:	3708      	adds	r7, #8
   12d70:	46bd      	mov	sp, r7
   12d72:	bd80      	pop	{r7, pc}
   12d74:	00012bcd 	.word	0x00012bcd
   12d78:	000133ad 	.word	0x000133ad

00012d7c <_ZN22FlapperValveController16CorrectToleranceEh>:



uint8_t	FlapperValveController::CorrectTolerance(uint8_t sp){
   12d7c:	b580      	push	{r7, lr}
   12d7e:	b084      	sub	sp, #16
   12d80:	af00      	add	r7, sp, #0
   12d82:	6078      	str	r0, [r7, #4]
   12d84:	460b      	mov	r3, r1
   12d86:	70fb      	strb	r3, [r7, #3]
	float floatTolerance=FLAPPER_VALVE_CONTROL_LIMIT*((abs(127-sp)-128))/256;
   12d88:	78fb      	ldrb	r3, [r7, #3]
   12d8a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
   12d8e:	2b00      	cmp	r3, #0
   12d90:	dd0c      	ble.n	12dac <_ZN22FlapperValveController16CorrectToleranceEh+0x30>
   12d92:	78fb      	ldrb	r3, [r7, #3]
   12d94:	43db      	mvns	r3, r3
   12d96:	009b      	lsls	r3, r3, #2
   12d98:	2b00      	cmp	r3, #0
   12d9a:	da00      	bge.n	12d9e <_ZN22FlapperValveController16CorrectToleranceEh+0x22>
   12d9c:	33ff      	adds	r3, #255	; 0xff
   12d9e:	121b      	asrs	r3, r3, #8
   12da0:	461a      	mov	r2, r3
   12da2:	4b15      	ldr	r3, [pc, #84]	; (12df8 <_ZN22FlapperValveController16CorrectToleranceEh+0x7c>)
   12da4:	4610      	mov	r0, r2
   12da6:	4798      	blx	r3
   12da8:	4603      	mov	r3, r0
   12daa:	e00b      	b.n	12dc4 <_ZN22FlapperValveController16CorrectToleranceEh+0x48>
   12dac:	78fb      	ldrb	r3, [r7, #3]
   12dae:	3bff      	subs	r3, #255	; 0xff
   12db0:	009b      	lsls	r3, r3, #2
   12db2:	2b00      	cmp	r3, #0
   12db4:	da00      	bge.n	12db8 <_ZN22FlapperValveController16CorrectToleranceEh+0x3c>
   12db6:	33ff      	adds	r3, #255	; 0xff
   12db8:	121b      	asrs	r3, r3, #8
   12dba:	461a      	mov	r2, r3
   12dbc:	4b0e      	ldr	r3, [pc, #56]	; (12df8 <_ZN22FlapperValveController16CorrectToleranceEh+0x7c>)
   12dbe:	4610      	mov	r0, r2
   12dc0:	4798      	blx	r3
   12dc2:	4603      	mov	r3, r0
   12dc4:	60fb      	str	r3, [r7, #12]
	tolerance=(uint8_t)floatTolerance;
   12dc6:	4b0d      	ldr	r3, [pc, #52]	; (12dfc <_ZN22FlapperValveController16CorrectToleranceEh+0x80>)
   12dc8:	68f8      	ldr	r0, [r7, #12]
   12dca:	4798      	blx	r3
   12dcc:	4603      	mov	r3, r0
   12dce:	b2da      	uxtb	r2, r3
   12dd0:	687b      	ldr	r3, [r7, #4]
   12dd2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	if (tolerance<1)
   12dd6:	687b      	ldr	r3, [r7, #4]
   12dd8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   12ddc:	2b00      	cmp	r3, #0
   12dde:	dc03      	bgt.n	12de8 <_ZN22FlapperValveController16CorrectToleranceEh+0x6c>
	{
		tolerance=0x01;
   12de0:	687b      	ldr	r3, [r7, #4]
   12de2:	2201      	movs	r2, #1
   12de4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	}
	return tolerance;
   12de8:	687b      	ldr	r3, [r7, #4]
   12dea:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
}
   12dee:	4618      	mov	r0, r3
   12df0:	3710      	adds	r7, #16
   12df2:	46bd      	mov	sp, r7
   12df4:	bd80      	pop	{r7, pc}
   12df6:	bf00      	nop
   12df8:	0001a235 	.word	0x0001a235
   12dfc:	0001a57d 	.word	0x0001a57d

00012e00 <_ZN22FlapperValveController10StartMotorEv>:
uint8_t	FlapperValveController::StartMotor(){
   12e00:	b580      	push	{r7, lr}
   12e02:	b082      	sub	sp, #8
   12e04:	af00      	add	r7, sp, #0
   12e06:	6078      	str	r0, [r7, #4]
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
   12e08:	687b      	ldr	r3, [r7, #4]
   12e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12e0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   12e12:	2b00      	cmp	r3, #0
   12e14:	d009      	beq.n	12e2a <_ZN22FlapperValveController10StartMotorEv+0x2a>
	{
		singlefv->SetEnable(false);
   12e16:	687b      	ldr	r3, [r7, #4]
   12e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12e1c:	2100      	movs	r1, #0
   12e1e:	4618      	mov	r0, r3
   12e20:	4b0a      	ldr	r3, [pc, #40]	; (12e4c <_ZN22FlapperValveController10StartMotorEv+0x4c>)
   12e22:	4798      	blx	r3
		delay_ms(10);
   12e24:	200a      	movs	r0, #10
   12e26:	4b0a      	ldr	r3, [pc, #40]	; (12e50 <_ZN22FlapperValveController10StartMotorEv+0x50>)
   12e28:	4798      	blx	r3
	}
	
		
	singlefv->SetEnable(true);
   12e2a:	687b      	ldr	r3, [r7, #4]
   12e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12e30:	2101      	movs	r1, #1
   12e32:	4618      	mov	r0, r3
   12e34:	4b05      	ldr	r3, [pc, #20]	; (12e4c <_ZN22FlapperValveController10StartMotorEv+0x4c>)
   12e36:	4798      	blx	r3
	flapperValveIsMoving=true;
   12e38:	687b      	ldr	r3, [r7, #4]
   12e3a:	2201      	movs	r2, #1
   12e3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	return 0;
   12e40:	2300      	movs	r3, #0
}
   12e42:	4618      	mov	r0, r3
   12e44:	3708      	adds	r7, #8
   12e46:	46bd      	mov	sp, r7
   12e48:	bd80      	pop	{r7, pc}
   12e4a:	bf00      	nop
   12e4c:	000137f5 	.word	0x000137f5
   12e50:	00003625 	.word	0x00003625

00012e54 <_ZN22FlapperValveController15StopControllingEv>:
uint8_t FlapperValveController::StopControlling(void){
   12e54:	b580      	push	{r7, lr}
   12e56:	b082      	sub	sp, #8
   12e58:	af00      	add	r7, sp, #0
   12e5a:	6078      	str	r0, [r7, #4]
	StopMotor();
   12e5c:	6878      	ldr	r0, [r7, #4]
   12e5e:	4b0d      	ldr	r3, [pc, #52]	; (12e94 <_ZN22FlapperValveController15StopControllingEv+0x40>)
   12e60:	4798      	blx	r3
	timeoutKeepControlling=false;
   12e62:	687b      	ldr	r3, [r7, #4]
   12e64:	2200      	movs	r2, #0
   12e66:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	timeoutFlapperValveController=false;
   12e6a:	687b      	ldr	r3, [r7, #4]
   12e6c:	2200      	movs	r2, #0
   12e6e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	isControlling=false;
   12e72:	687b      	ldr	r3, [r7, #4]
   12e74:	2200      	movs	r2, #0
   12e76:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	keepControlling=false;
   12e7a:	687b      	ldr	r3, [r7, #4]
   12e7c:	2200      	movs	r2, #0
   12e7e:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	controllerEnabled=false;
   12e82:	687b      	ldr	r3, [r7, #4]
   12e84:	2200      	movs	r2, #0
   12e86:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	return 0;
   12e8a:	2300      	movs	r3, #0
}
   12e8c:	4618      	mov	r0, r3
   12e8e:	3708      	adds	r7, #8
   12e90:	46bd      	mov	sp, r7
   12e92:	bd80      	pop	{r7, pc}
   12e94:	00012bcd 	.word	0x00012bcd

00012e98 <_ZN22FlapperValveController16StartControllingEh>:

uint8_t	FlapperValveController::StartControlling(uint8_t sp){
   12e98:	b580      	push	{r7, lr}
   12e9a:	b082      	sub	sp, #8
   12e9c:	af00      	add	r7, sp, #0
   12e9e:	6078      	str	r0, [r7, #4]
   12ea0:	460b      	mov	r3, r1
   12ea2:	70fb      	strb	r3, [r7, #3]
		setpoint=VerifySetpoint(sp);
   12ea4:	78fb      	ldrb	r3, [r7, #3]
   12ea6:	4619      	mov	r1, r3
   12ea8:	6878      	ldr	r0, [r7, #4]
   12eaa:	4b2b      	ldr	r3, [pc, #172]	; (12f58 <_ZN22FlapperValveController16StartControllingEh+0xc0>)
   12eac:	4798      	blx	r3
   12eae:	4603      	mov	r3, r0
   12eb0:	461a      	mov	r2, r3
   12eb2:	687b      	ldr	r3, [r7, #4]
   12eb4:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		CorrectTolerance(setpoint);
   12eb8:	687b      	ldr	r3, [r7, #4]
   12eba:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   12ebe:	4619      	mov	r1, r3
   12ec0:	6878      	ldr	r0, [r7, #4]
   12ec2:	4b26      	ldr	r3, [pc, #152]	; (12f5c <_ZN22FlapperValveController16StartControllingEh+0xc4>)
   12ec4:	4798      	blx	r3
		floatSetpoint=(float)setpoint;
   12ec6:	687b      	ldr	r3, [r7, #4]
   12ec8:	f893 209f 	ldrb.w	r2, [r3, #159]	; 0x9f
   12ecc:	4b24      	ldr	r3, [pc, #144]	; (12f60 <_ZN22FlapperValveController16StartControllingEh+0xc8>)
   12ece:	4610      	mov	r0, r2
   12ed0:	4798      	blx	r3
   12ed2:	4602      	mov	r2, r0
   12ed4:	687b      	ldr	r3, [r7, #4]
   12ed6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		timeoutFlapperValveController=false;
   12eda:	687b      	ldr	r3, [r7, #4]
   12edc:	2200      	movs	r2, #0
   12ede:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		timeoutKeepControlling=false;
   12ee2:	687b      	ldr	r3, [r7, #4]
   12ee4:	2200      	movs	r2, #0
   12ee6:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		keepControlling=false;
   12eea:	687b      	ldr	r3, [r7, #4]
   12eec:	2200      	movs	r2, #0
   12eee:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
		controllerEnabled=true;
   12ef2:	687b      	ldr	r3, [r7, #4]
   12ef4:	2201      	movs	r2, #1
   12ef6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		unLockTimeout=false;
   12efa:	687b      	ldr	r3, [r7, #4]
   12efc:	2200      	movs	r2, #0
   12efe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		if (valve_ID==0)
   12f02:	687b      	ldr	r3, [r7, #4]
   12f04:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   12f08:	2b00      	cmp	r3, #0
   12f0a:	d106      	bne.n	12f1a <_ZN22FlapperValveController16StartControllingEh+0x82>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
   12f0c:	f242 7210 	movw	r2, #10000	; 0x2710
   12f10:	4914      	ldr	r1, [pc, #80]	; (12f64 <_ZN22FlapperValveController16StartControllingEh+0xcc>)
   12f12:	4815      	ldr	r0, [pc, #84]	; (12f68 <_ZN22FlapperValveController16StartControllingEh+0xd0>)
   12f14:	4b15      	ldr	r3, [pc, #84]	; (12f6c <_ZN22FlapperValveController16StartControllingEh+0xd4>)
   12f16:	4798      	blx	r3
   12f18:	e005      	b.n	12f26 <_ZN22FlapperValveController16StartControllingEh+0x8e>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
   12f1a:	f242 7210 	movw	r2, #10000	; 0x2710
   12f1e:	4914      	ldr	r1, [pc, #80]	; (12f70 <_ZN22FlapperValveController16StartControllingEh+0xd8>)
   12f20:	4811      	ldr	r0, [pc, #68]	; (12f68 <_ZN22FlapperValveController16StartControllingEh+0xd0>)
   12f22:	4b12      	ldr	r3, [pc, #72]	; (12f6c <_ZN22FlapperValveController16StartControllingEh+0xd4>)
   12f24:	4798      	blx	r3
		}
		
		isControlling=true;
   12f26:	687b      	ldr	r3, [r7, #4]
   12f28:	2201      	movs	r2, #1
   12f2a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
		StartMovingOnDirection();
   12f2e:	6878      	ldr	r0, [r7, #4]
   12f30:	4b10      	ldr	r3, [pc, #64]	; (12f74 <_ZN22FlapperValveController16StartControllingEh+0xdc>)
   12f32:	4798      	blx	r3
	//	while(!gotSetpoint&(!doPeriodicTask)){
			ControlMovement();
   12f34:	6878      	ldr	r0, [r7, #4]
   12f36:	4b10      	ldr	r3, [pc, #64]	; (12f78 <_ZN22FlapperValveController16StartControllingEh+0xe0>)
   12f38:	4798      	blx	r3
	//	}	
		if (doPeriodicTask)
   12f3a:	687b      	ldr	r3, [r7, #4]
   12f3c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   12f40:	b2db      	uxtb	r3, r3
   12f42:	2b00      	cmp	r3, #0
   12f44:	d003      	beq.n	12f4e <_ZN22FlapperValveController16StartControllingEh+0xb6>
		{
			paused=true;
   12f46:	687b      	ldr	r3, [r7, #4]
   12f48:	2201      	movs	r2, #1
   12f4a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		return 0;
   12f4e:	2300      	movs	r3, #0
	
}
   12f50:	4618      	mov	r0, r3
   12f52:	3708      	adds	r7, #8
   12f54:	46bd      	mov	sp, r7
   12f56:	bd80      	pop	{r7, pc}
   12f58:	00012f7d 	.word	0x00012f7d
   12f5c:	00012d7d 	.word	0x00012d7d
   12f60:	0001a22d 	.word	0x0001a22d
   12f64:	00012121 	.word	0x00012121
   12f68:	20005454 	.word	0x20005454
   12f6c:	0001047d 	.word	0x0001047d
   12f70:	0001214d 	.word	0x0001214d
   12f74:	000123a5 	.word	0x000123a5
   12f78:	0001278d 	.word	0x0001278d

00012f7c <_ZN22FlapperValveController14VerifySetpointEh>:
uint8_t FlapperValveController::VerifySetpoint(uint8_t sp){
   12f7c:	b580      	push	{r7, lr}
   12f7e:	b082      	sub	sp, #8
   12f80:	af00      	add	r7, sp, #0
   12f82:	6078      	str	r0, [r7, #4]
   12f84:	460b      	mov	r3, r1
   12f86:	70fb      	strb	r3, [r7, #3]
	
	if (IsNBCMode())
   12f88:	6878      	ldr	r0, [r7, #4]
   12f8a:	4b2a      	ldr	r3, [pc, #168]	; (13034 <_ZN22FlapperValveController14VerifySetpointEh+0xb8>)
   12f8c:	4798      	blx	r3
   12f8e:	4603      	mov	r3, r0
   12f90:	2b00      	cmp	r3, #0
   12f92:	d004      	beq.n	12f9e <_ZN22FlapperValveController14VerifySetpointEh+0x22>
	{
		setpoint=sp;
   12f94:	687b      	ldr	r3, [r7, #4]
   12f96:	78fa      	ldrb	r2, [r7, #3]
   12f98:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
   12f9c:	e043      	b.n	13026 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
	} 
	else
	{
		if (standAloneActivated)
   12f9e:	687b      	ldr	r3, [r7, #4]
   12fa0:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   12fa4:	2b00      	cmp	r3, #0
   12fa6:	d01f      	beq.n	12fe8 <_ZN22FlapperValveController14VerifySetpointEh+0x6c>
		{
			standAlonePosition=0xff-parameters.flapperValveStandAloneMinimumPosition;
   12fa8:	687b      	ldr	r3, [r7, #4]
   12faa:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   12fae:	43db      	mvns	r3, r3
   12fb0:	b2da      	uxtb	r2, r3
   12fb2:	687b      	ldr	r3, [r7, #4]
   12fb4:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
			if (sp>(standAlonePosition))
   12fb8:	78fb      	ldrb	r3, [r7, #3]
   12fba:	687a      	ldr	r2, [r7, #4]
   12fbc:	f892 20c5 	ldrb.w	r2, [r2, #197]	; 0xc5
   12fc0:	4293      	cmp	r3, r2
   12fc2:	dd0c      	ble.n	12fde <_ZN22FlapperValveController14VerifySetpointEh+0x62>
			{
				setpoint=standAlonePosition;
   12fc4:	687b      	ldr	r3, [r7, #4]
   12fc6:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
   12fca:	687b      	ldr	r3, [r7, #4]
   12fcc:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
				currentMaximum=standAlonePosition;
   12fd0:	687b      	ldr	r3, [r7, #4]
   12fd2:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
   12fd6:	687b      	ldr	r3, [r7, #4]
   12fd8:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
   12fdc:	e023      	b.n	13026 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
   12fde:	687b      	ldr	r3, [r7, #4]
   12fe0:	78fa      	ldrb	r2, [r7, #3]
   12fe2:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
   12fe6:	e01e      	b.n	13026 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
		}
		else
		{
			maximumPosition=0xff-parameters.flapperValveMinimumPosition;
   12fe8:	687b      	ldr	r3, [r7, #4]
   12fea:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
   12fee:	43db      	mvns	r3, r3
   12ff0:	b2da      	uxtb	r2, r3
   12ff2:	687b      	ldr	r3, [r7, #4]
   12ff4:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			if (sp>maximumPosition)
   12ff8:	78fb      	ldrb	r3, [r7, #3]
   12ffa:	687a      	ldr	r2, [r7, #4]
   12ffc:	f892 20c4 	ldrb.w	r2, [r2, #196]	; 0xc4
   13000:	4293      	cmp	r3, r2
   13002:	dd0c      	ble.n	1301e <_ZN22FlapperValveController14VerifySetpointEh+0xa2>
			{
				setpoint=maximumPosition;
   13004:	687b      	ldr	r3, [r7, #4]
   13006:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
   1300a:	687b      	ldr	r3, [r7, #4]
   1300c:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
				currentMaximum=maximumPosition;
   13010:	687b      	ldr	r3, [r7, #4]
   13012:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
   13016:	687b      	ldr	r3, [r7, #4]
   13018:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
   1301c:	e003      	b.n	13026 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
   1301e:	687b      	ldr	r3, [r7, #4]
   13020:	78fa      	ldrb	r2, [r7, #3]
   13022:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
			}
		}
	}
	
	return setpoint;
   13026:	687b      	ldr	r3, [r7, #4]
   13028:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
	
}
   1302c:	4618      	mov	r0, r3
   1302e:	3708      	adds	r7, #8
   13030:	46bd      	mov	sp, r7
   13032:	bd80      	pop	{r7, pc}
   13034:	00012b85 	.word	0x00012b85

00013038 <_ZN22FlapperValveController16StartControllingEv>:
	currentPosition=singlefv->ReadActualPosition();
	//floatCurrentPosition=(float)currentPosition;
	return currentPosition;
}
	
uint8_t	FlapperValveController::StartControlling(void){
   13038:	b580      	push	{r7, lr}
   1303a:	b082      	sub	sp, #8
   1303c:	af00      	add	r7, sp, #0
   1303e:	6078      	str	r0, [r7, #4]
	return	StartControlling(currentPosition);
   13040:	687b      	ldr	r3, [r7, #4]
   13042:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   13046:	4619      	mov	r1, r3
   13048:	6878      	ldr	r0, [r7, #4]
   1304a:	4b03      	ldr	r3, [pc, #12]	; (13058 <_ZN22FlapperValveController16StartControllingEv+0x20>)
   1304c:	4798      	blx	r3
   1304e:	4603      	mov	r3, r0
	
}
   13050:	4618      	mov	r0, r3
   13052:	3708      	adds	r7, #8
   13054:	46bd      	mov	sp, r7
   13056:	bd80      	pop	{r7, pc}
   13058:	00012e99 	.word	0x00012e99

0001305c <_ZN22FlapperValveController15KeepControllingEh>:
uint8_t	FlapperValveController::KeepControlling(uint8_t restart){
   1305c:	b580      	push	{r7, lr}
   1305e:	b082      	sub	sp, #8
   13060:	af00      	add	r7, sp, #0
   13062:	6078      	str	r0, [r7, #4]
   13064:	460b      	mov	r3, r1
   13066:	70fb      	strb	r3, [r7, #3]

	//setpoint=lastPosition;

		timeoutKeepControlling=false;
   13068:	687b      	ldr	r3, [r7, #4]
   1306a:	2200      	movs	r2, #0
   1306c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	//	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT/2);
		isControlling=true;
   13070:	687b      	ldr	r3, [r7, #4]
   13072:	2201      	movs	r2, #1
   13074:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
		StartMovingOnDirection();
   13078:	6878      	ldr	r0, [r7, #4]
   1307a:	4b05      	ldr	r3, [pc, #20]	; (13090 <_ZN22FlapperValveController15KeepControllingEh+0x34>)
   1307c:	4798      	blx	r3
		keepControlling=false;
   1307e:	687b      	ldr	r3, [r7, #4]
   13080:	2200      	movs	r2, #0
   13082:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2

	return 0;
   13086:	2300      	movs	r3, #0
	
}
   13088:	4618      	mov	r0, r3
   1308a:	3708      	adds	r7, #8
   1308c:	46bd      	mov	sp, r7
   1308e:	bd80      	pop	{r7, pc}
   13090:	000123a5 	.word	0x000123a5

00013094 <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

void	FlapperValveController::UpdateFlapperValveData(void){
   13094:	b590      	push	{r4, r7, lr}
   13096:	b085      	sub	sp, #20
   13098:	af00      	add	r7, sp, #0
   1309a:	60f8      	str	r0, [r7, #12]
	currentPosition=singlefv->ReadActualPosition();
   1309c:	68fb      	ldr	r3, [r7, #12]
   1309e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   130a2:	4618      	mov	r0, r3
   130a4:	4b36      	ldr	r3, [pc, #216]	; (13180 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xec>)
   130a6:	4798      	blx	r3
   130a8:	4603      	mov	r3, r0
   130aa:	461a      	mov	r2, r3
   130ac:	68fb      	ldr	r3, [r7, #12]
   130ae:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	//dataStruct.controllerStatus.position=currentPosition;
	dataStruct.actualPosition=currentPosition;
   130b2:	68fb      	ldr	r3, [r7, #12]
   130b4:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
   130b8:	68fb      	ldr	r3, [r7, #12]
   130ba:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	dataStruct.setPointPosition=setpoint;
   130be:	68fb      	ldr	r3, [r7, #12]
   130c0:	f893 209f 	ldrb.w	r2, [r3, #159]	; 0x9f
   130c4:	68fb      	ldr	r3, [r7, #12]
   130c6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	dataStruct.inputStatus=singlefv->ReadStatusInputs();
   130ca:	68fb      	ldr	r3, [r7, #12]
   130cc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   130d0:	68fc      	ldr	r4, [r7, #12]
   130d2:	463b      	mov	r3, r7
   130d4:	4611      	mov	r1, r2
   130d6:	4618      	mov	r0, r3
   130d8:	4b2a      	ldr	r3, [pc, #168]	; (13184 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf0>)
   130da:	4798      	blx	r3
   130dc:	f104 0384 	add.w	r3, r4, #132	; 0x84
   130e0:	463a      	mov	r2, r7
   130e2:	6810      	ldr	r0, [r2, #0]
   130e4:	6018      	str	r0, [r3, #0]
   130e6:	8892      	ldrh	r2, [r2, #4]
   130e8:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=singlefv->ReadControlStatus();
   130ea:	68fb      	ldr	r3, [r7, #12]
   130ec:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   130f0:	68fc      	ldr	r4, [r7, #12]
   130f2:	463b      	mov	r3, r7
   130f4:	4611      	mov	r1, r2
   130f6:	4618      	mov	r0, r3
   130f8:	4b23      	ldr	r3, [pc, #140]	; (13188 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf4>)
   130fa:	4798      	blx	r3
   130fc:	f104 038a 	add.w	r3, r4, #138	; 0x8a
   13100:	463a      	mov	r2, r7
   13102:	6811      	ldr	r1, [r2, #0]
   13104:	6852      	ldr	r2, [r2, #4]
   13106:	6019      	str	r1, [r3, #0]
   13108:	605a      	str	r2, [r3, #4]
	
	dataStruct.controllerStatus.isMoving=flapperValveIsMoving;
   1310a:	68fb      	ldr	r3, [r7, #12]
   1310c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   13110:	b2da      	uxtb	r2, r3
   13112:	68fb      	ldr	r3, [r7, #12]
   13114:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	dataStruct.controllerStatus.isControlling=isControlling;
   13118:	68fb      	ldr	r3, [r7, #12]
   1311a:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
   1311e:	68fb      	ldr	r3, [r7, #12]
   13120:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
   13124:	68fb      	ldr	r3, [r7, #12]
   13126:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
   1312a:	68fb      	ldr	r3, [r7, #12]
   1312c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	dataStruct.controllerStatus.is_flapper_OK=isOK;
   13130:	68fb      	ldr	r3, [r7, #12]
   13132:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   13136:	b2da      	uxtb	r2, r3
   13138:	68fb      	ldr	r3, [r7, #12]
   1313a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	
	if (standAloneActivated)
   1313e:	68fb      	ldr	r3, [r7, #12]
   13140:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   13144:	2b00      	cmp	r3, #0
   13146:	d008      	beq.n	1315a <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xc6>
	{
		currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
   13148:	68fb      	ldr	r3, [r7, #12]
   1314a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   1314e:	43db      	mvns	r3, r3
   13150:	b2da      	uxtb	r2, r3
   13152:	68fb      	ldr	r3, [r7, #12]
   13154:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
   13158:	e007      	b.n	1316a <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd6>
	} 
	else
	{
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
   1315a:	68fb      	ldr	r3, [r7, #12]
   1315c:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
   13160:	43db      	mvns	r3, r3
   13162:	b2da      	uxtb	r2, r3
   13164:	68fb      	ldr	r3, [r7, #12]
   13166:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	}
	FillPositionsFIFO(currentPosition);
   1316a:	68fb      	ldr	r3, [r7, #12]
   1316c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   13170:	4619      	mov	r1, r3
   13172:	68f8      	ldr	r0, [r7, #12]
   13174:	4b05      	ldr	r3, [pc, #20]	; (1318c <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf8>)
   13176:	4798      	blx	r3
}
   13178:	bf00      	nop
   1317a:	3714      	adds	r7, #20
   1317c:	46bd      	mov	sp, r7
   1317e:	bd90      	pop	{r4, r7, pc}
   13180:	00013a15 	.word	0x00013a15
   13184:	00013799 	.word	0x00013799
   13188:	00013741 	.word	0x00013741
   1318c:	00013191 	.word	0x00013191

00013190 <_ZN22FlapperValveController17FillPositionsFIFOEh>:
void FlapperValveController::FillPositionsFIFO(uint8_t cp){
   13190:	b480      	push	{r7}
   13192:	b085      	sub	sp, #20
   13194:	af00      	add	r7, sp, #0
   13196:	6078      	str	r0, [r7, #4]
   13198:	460b      	mov	r3, r1
   1319a:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   1319c:	2300      	movs	r3, #0
   1319e:	73fb      	strb	r3, [r7, #15]
   131a0:	7bfb      	ldrb	r3, [r7, #15]
   131a2:	2b0e      	cmp	r3, #14
   131a4:	dc1d      	bgt.n	131e2 <_ZN22FlapperValveController17FillPositionsFIFOEh+0x52>
	{
		positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-1-i]=positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-2-i];
   131a6:	687b      	ldr	r3, [r7, #4]
   131a8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   131ac:	687a      	ldr	r2, [r7, #4]
   131ae:	3332      	adds	r3, #50	; 0x32
   131b0:	009b      	lsls	r3, r3, #2
   131b2:	4413      	add	r3, r2
   131b4:	685b      	ldr	r3, [r3, #4]
   131b6:	7bfa      	ldrb	r2, [r7, #15]
   131b8:	f1c2 020f 	rsb	r2, r2, #15
   131bc:	441a      	add	r2, r3
   131be:	687b      	ldr	r3, [r7, #4]
   131c0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   131c4:	6879      	ldr	r1, [r7, #4]
   131c6:	3332      	adds	r3, #50	; 0x32
   131c8:	009b      	lsls	r3, r3, #2
   131ca:	440b      	add	r3, r1
   131cc:	685b      	ldr	r3, [r3, #4]
   131ce:	7bf9      	ldrb	r1, [r7, #15]
   131d0:	f1c1 010e 	rsb	r1, r1, #14
   131d4:	440b      	add	r3, r1
   131d6:	781b      	ldrb	r3, [r3, #0]
   131d8:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   131da:	7bfb      	ldrb	r3, [r7, #15]
   131dc:	3301      	adds	r3, #1
   131de:	73fb      	strb	r3, [r7, #15]
   131e0:	e7de      	b.n	131a0 <_ZN22FlapperValveController17FillPositionsFIFOEh+0x10>
	}
	positions[valve_ID][0]=cp;
   131e2:	687b      	ldr	r3, [r7, #4]
   131e4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   131e8:	687a      	ldr	r2, [r7, #4]
   131ea:	3332      	adds	r3, #50	; 0x32
   131ec:	009b      	lsls	r3, r3, #2
   131ee:	4413      	add	r3, r2
   131f0:	685b      	ldr	r3, [r3, #4]
   131f2:	78fa      	ldrb	r2, [r7, #3]
   131f4:	701a      	strb	r2, [r3, #0]
}
   131f6:	bf00      	nop
   131f8:	3714      	adds	r7, #20
   131fa:	46bd      	mov	sp, r7
   131fc:	bc80      	pop	{r7}
   131fe:	4770      	bx	lr

00013200 <_ZN22FlapperValveController8SelftestEv>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
	return singlefv->ReadActualPosition();
}

bool	FlapperValveController::Selftest(void){
   13200:	b580      	push	{r7, lr}
   13202:	b084      	sub	sp, #16
   13204:	af00      	add	r7, sp, #0
   13206:	6078      	str	r0, [r7, #4]
		uint8_t localSetpoint=180;
   13208:	23b4      	movs	r3, #180	; 0xb4
   1320a:	73bb      	strb	r3, [r7, #14]
		parameters=defaultParameters;
   1320c:	687b      	ldr	r3, [r7, #4]
   1320e:	4a59      	ldr	r2, [pc, #356]	; (13374 <_ZN22FlapperValveController8SelftestEv+0x174>)
   13210:	33c7      	adds	r3, #199	; 0xc7
   13212:	8812      	ldrh	r2, [r2, #0]
   13214:	801a      	strh	r2, [r3, #0]
		uint8_t localPosition;
	UpdateFlapperValveData();
   13216:	6878      	ldr	r0, [r7, #4]
   13218:	4b57      	ldr	r3, [pc, #348]	; (13378 <_ZN22FlapperValveController8SelftestEv+0x178>)
   1321a:	4798      	blx	r3
	singlefv->SetEnable(false);
   1321c:	687b      	ldr	r3, [r7, #4]
   1321e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13222:	2100      	movs	r1, #0
   13224:	4618      	mov	r0, r3
   13226:	4b55      	ldr	r3, [pc, #340]	; (1337c <_ZN22FlapperValveController8SelftestEv+0x17c>)
   13228:	4798      	blx	r3
	singlefv->SetInvalidPosition(false);
   1322a:	687b      	ldr	r3, [r7, #4]
   1322c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13230:	2100      	movs	r1, #0
   13232:	4618      	mov	r0, r3
   13234:	4b52      	ldr	r3, [pc, #328]	; (13380 <_ZN22FlapperValveController8SelftestEv+0x180>)
   13236:	4798      	blx	r3
	singlefv->ClearMoveFault(false);
   13238:	687b      	ldr	r3, [r7, #4]
   1323a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1323e:	2100      	movs	r1, #0
   13240:	4618      	mov	r0, r3
   13242:	4b50      	ldr	r3, [pc, #320]	; (13384 <_ZN22FlapperValveController8SelftestEv+0x184>)
   13244:	4798      	blx	r3
	delay_ms(10);
   13246:	200a      	movs	r0, #10
   13248:	4b4f      	ldr	r3, [pc, #316]	; (13388 <_ZN22FlapperValveController8SelftestEv+0x188>)
   1324a:	4798      	blx	r3
	singlefv->ClearMoveFault(true);
   1324c:	687b      	ldr	r3, [r7, #4]
   1324e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13252:	2101      	movs	r1, #1
   13254:	4618      	mov	r0, r3
   13256:	4b4b      	ldr	r3, [pc, #300]	; (13384 <_ZN22FlapperValveController8SelftestEv+0x184>)
   13258:	4798      	blx	r3
	singlefv->WriteSetpoint(localSetpoint);
   1325a:	687b      	ldr	r3, [r7, #4]
   1325c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13260:	7bba      	ldrb	r2, [r7, #14]
   13262:	4611      	mov	r1, r2
   13264:	4618      	mov	r0, r3
   13266:	4b49      	ldr	r3, [pc, #292]	; (1338c <_ZN22FlapperValveController8SelftestEv+0x18c>)
   13268:	4798      	blx	r3
	singlefv->SetDirection(false);
   1326a:	687b      	ldr	r3, [r7, #4]
   1326c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13270:	2100      	movs	r1, #0
   13272:	4618      	mov	r0, r3
   13274:	4b46      	ldr	r3, [pc, #280]	; (13390 <_ZN22FlapperValveController8SelftestEv+0x190>)
   13276:	4798      	blx	r3
	if (singlefv->ReadActualPosition()>localSetpoint)
   13278:	687b      	ldr	r3, [r7, #4]
   1327a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1327e:	4618      	mov	r0, r3
   13280:	4b44      	ldr	r3, [pc, #272]	; (13394 <_ZN22FlapperValveController8SelftestEv+0x194>)
   13282:	4798      	blx	r3
   13284:	4603      	mov	r3, r0
   13286:	461a      	mov	r2, r3
   13288:	7bbb      	ldrb	r3, [r7, #14]
   1328a:	429a      	cmp	r2, r3
   1328c:	bfcc      	ite	gt
   1328e:	2301      	movgt	r3, #1
   13290:	2300      	movle	r3, #0
   13292:	b2db      	uxtb	r3, r3
   13294:	2b00      	cmp	r3, #0
   13296:	d007      	beq.n	132a8 <_ZN22FlapperValveController8SelftestEv+0xa8>
	{
		singlefv->SetDirection(true);
   13298:	687b      	ldr	r3, [r7, #4]
   1329a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1329e:	2101      	movs	r1, #1
   132a0:	4618      	mov	r0, r3
   132a2:	4b3b      	ldr	r3, [pc, #236]	; (13390 <_ZN22FlapperValveController8SelftestEv+0x190>)
   132a4:	4798      	blx	r3
   132a6:	e006      	b.n	132b6 <_ZN22FlapperValveController8SelftestEv+0xb6>
	}
	else
	{
		singlefv->SetDirection(false);
   132a8:	687b      	ldr	r3, [r7, #4]
   132aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   132ae:	2100      	movs	r1, #0
   132b0:	4618      	mov	r0, r3
   132b2:	4b37      	ldr	r3, [pc, #220]	; (13390 <_ZN22FlapperValveController8SelftestEv+0x190>)
   132b4:	4798      	blx	r3
	}
	
		if (valve_ID==0)
   132b6:	687b      	ldr	r3, [r7, #4]
   132b8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   132bc:	2b00      	cmp	r3, #0
   132be:	d106      	bne.n	132ce <_ZN22FlapperValveController8SelftestEv+0xce>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
   132c0:	f242 7210 	movw	r2, #10000	; 0x2710
   132c4:	4934      	ldr	r1, [pc, #208]	; (13398 <_ZN22FlapperValveController8SelftestEv+0x198>)
   132c6:	4835      	ldr	r0, [pc, #212]	; (1339c <_ZN22FlapperValveController8SelftestEv+0x19c>)
   132c8:	4b35      	ldr	r3, [pc, #212]	; (133a0 <_ZN22FlapperValveController8SelftestEv+0x1a0>)
   132ca:	4798      	blx	r3
   132cc:	e005      	b.n	132da <_ZN22FlapperValveController8SelftestEv+0xda>
		}
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
   132ce:	f242 7210 	movw	r2, #10000	; 0x2710
   132d2:	4934      	ldr	r1, [pc, #208]	; (133a4 <_ZN22FlapperValveController8SelftestEv+0x1a4>)
   132d4:	4831      	ldr	r0, [pc, #196]	; (1339c <_ZN22FlapperValveController8SelftestEv+0x19c>)
   132d6:	4b32      	ldr	r3, [pc, #200]	; (133a0 <_ZN22FlapperValveController8SelftestEv+0x1a0>)
   132d8:	4798      	blx	r3
		}
	singlefv->SetEnable(true);
   132da:	687b      	ldr	r3, [r7, #4]
   132dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   132e0:	2101      	movs	r1, #1
   132e2:	4618      	mov	r0, r3
   132e4:	4b25      	ldr	r3, [pc, #148]	; (1337c <_ZN22FlapperValveController8SelftestEv+0x17c>)
   132e6:	4798      	blx	r3

	localPosition=singlefv->ReadActualPosition();
   132e8:	687b      	ldr	r3, [r7, #4]
   132ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   132ee:	4618      	mov	r0, r3
   132f0:	4b28      	ldr	r3, [pc, #160]	; (13394 <_ZN22FlapperValveController8SelftestEv+0x194>)
   132f2:	4798      	blx	r3
   132f4:	4603      	mov	r3, r0
   132f6:	73fb      	strb	r3, [r7, #15]
	timeoutFlapperValveController=false;
   132f8:	687b      	ldr	r3, [r7, #4]
   132fa:	2200      	movs	r2, #0
   132fc:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
   13300:	7bfa      	ldrb	r2, [r7, #15]
   13302:	7bbb      	ldrb	r3, [r7, #14]
   13304:	1ad3      	subs	r3, r2, r3
   13306:	2b00      	cmp	r3, #0
   13308:	bfb8      	it	lt
   1330a:	425b      	neglt	r3, r3
   1330c:	2b0c      	cmp	r3, #12
   1330e:	bfcc      	ite	gt
   13310:	2301      	movgt	r3, #1
   13312:	2300      	movle	r3, #0
   13314:	b2db      	uxtb	r3, r3
   13316:	461a      	mov	r2, r3
   13318:	687b      	ldr	r3, [r7, #4]
   1331a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   1331e:	b2db      	uxtb	r3, r3
   13320:	f083 0301 	eor.w	r3, r3, #1
   13324:	b2db      	uxtb	r3, r3
   13326:	4013      	ands	r3, r2
   13328:	2b00      	cmp	r3, #0
   1332a:	bf14      	ite	ne
   1332c:	2301      	movne	r3, #1
   1332e:	2300      	moveq	r3, #0
   13330:	b2db      	uxtb	r3, r3
   13332:	2b00      	cmp	r3, #0
   13334:	d008      	beq.n	13348 <_ZN22FlapperValveController8SelftestEv+0x148>

	{

		localPosition=singlefv->ReadActualPosition();
   13336:	687b      	ldr	r3, [r7, #4]
   13338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1333c:	4618      	mov	r0, r3
   1333e:	4b15      	ldr	r3, [pc, #84]	; (13394 <_ZN22FlapperValveController8SelftestEv+0x194>)
   13340:	4798      	blx	r3
   13342:	4603      	mov	r3, r0
   13344:	73fb      	strb	r3, [r7, #15]
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
   13346:	e7db      	b.n	13300 <_ZN22FlapperValveController8SelftestEv+0x100>

	}
	RemoveTimeoutTask();
   13348:	6878      	ldr	r0, [r7, #4]
   1334a:	4b17      	ldr	r3, [pc, #92]	; (133a8 <_ZN22FlapperValveController8SelftestEv+0x1a8>)
   1334c:	4798      	blx	r3

	singlefv->SetEnable(false);
   1334e:	687b      	ldr	r3, [r7, #4]
   13350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13354:	2100      	movs	r1, #0
   13356:	4618      	mov	r0, r3
   13358:	4b08      	ldr	r3, [pc, #32]	; (1337c <_ZN22FlapperValveController8SelftestEv+0x17c>)
   1335a:	4798      	blx	r3
	return !timeoutFlapperValveController;
   1335c:	687b      	ldr	r3, [r7, #4]
   1335e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   13362:	b2db      	uxtb	r3, r3
   13364:	f083 0301 	eor.w	r3, r3, #1
   13368:	b2db      	uxtb	r3, r3
}
   1336a:	4618      	mov	r0, r3
   1336c:	3710      	adds	r7, #16
   1336e:	46bd      	mov	sp, r7
   13370:	bd80      	pop	{r7, pc}
   13372:	bf00      	nop
   13374:	0001bbd0 	.word	0x0001bbd0
   13378:	00013095 	.word	0x00013095
   1337c:	000137f5 	.word	0x000137f5
   13380:	00013965 	.word	0x00013965
   13384:	000138ed 	.word	0x000138ed
   13388:	00003625 	.word	0x00003625
   1338c:	000139dd 	.word	0x000139dd
   13390:	00013875 	.word	0x00013875
   13394:	00013a15 	.word	0x00013a15
   13398:	00012121 	.word	0x00012121
   1339c:	20005454 	.word	0x20005454
   133a0:	0001047d 	.word	0x0001047d
   133a4:	0001214d 	.word	0x0001214d
   133a8:	000133ad 	.word	0x000133ad

000133ac <_ZN22FlapperValveController17RemoveTimeoutTaskEv>:

void	FlapperValveController::RemoveTimeoutTask(void){
   133ac:	b580      	push	{r7, lr}
   133ae:	b082      	sub	sp, #8
   133b0:	af00      	add	r7, sp, #0
   133b2:	6078      	str	r0, [r7, #4]
	if (valve_ID==0)
   133b4:	687b      	ldr	r3, [r7, #4]
   133b6:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   133ba:	2b00      	cmp	r3, #0
   133bc:	d104      	bne.n	133c8 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x1c>
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
   133be:	4906      	ldr	r1, [pc, #24]	; (133d8 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x2c>)
   133c0:	4806      	ldr	r0, [pc, #24]	; (133dc <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
   133c2:	4b07      	ldr	r3, [pc, #28]	; (133e0 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
   133c4:	4798      	blx	r3
	}
	else
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
	}
}
   133c6:	e003      	b.n	133d0 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x24>
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
   133c8:	4906      	ldr	r1, [pc, #24]	; (133e4 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x38>)
   133ca:	4804      	ldr	r0, [pc, #16]	; (133dc <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
   133cc:	4b04      	ldr	r3, [pc, #16]	; (133e0 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
   133ce:	4798      	blx	r3
}
   133d0:	bf00      	nop
   133d2:	3708      	adds	r7, #8
   133d4:	46bd      	mov	sp, r7
   133d6:	bd80      	pop	{r7, pc}
   133d8:	00012121 	.word	0x00012121
   133dc:	20005454 	.word	0x20005454
   133e0:	00010425 	.word	0x00010425
   133e4:	0001214d 	.word	0x0001214d

000133e8 <__tcf_0>:
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
   133e8:	b590      	push	{r4, r7, lr}
   133ea:	b083      	sub	sp, #12
   133ec:	af00      	add	r7, sp, #0
   133ee:	6078      	str	r0, [r7, #4]
   133f0:	4c05      	ldr	r4, [pc, #20]	; (13408 <__tcf_0+0x20>)
   133f2:	4b06      	ldr	r3, [pc, #24]	; (1340c <__tcf_0+0x24>)
   133f4:	429c      	cmp	r4, r3
   133f6:	d004      	beq.n	13402 <__tcf_0+0x1a>
   133f8:	3c78      	subs	r4, #120	; 0x78
   133fa:	4620      	mov	r0, r4
   133fc:	4b04      	ldr	r3, [pc, #16]	; (13410 <__tcf_0+0x28>)
   133fe:	4798      	blx	r3
   13400:	e7f7      	b.n	133f2 <__tcf_0+0xa>
   13402:	370c      	adds	r7, #12
   13404:	46bd      	mov	sp, r7
   13406:	bd90      	pop	{r4, r7, pc}
   13408:	2000562c 	.word	0x2000562c
   1340c:	2000553c 	.word	0x2000553c
   13410:	000135e1 	.word	0x000135e1

00013414 <_Z41__static_initialization_and_destruction_0ii>:

   13414:	b5b0      	push	{r4, r5, r7, lr}
   13416:	b082      	sub	sp, #8
   13418:	af00      	add	r7, sp, #0
   1341a:	6078      	str	r0, [r7, #4]
   1341c:	6039      	str	r1, [r7, #0]
   1341e:	687b      	ldr	r3, [r7, #4]
   13420:	2b01      	cmp	r3, #1
   13422:	d16d      	bne.n	13500 <_Z41__static_initialization_and_destruction_0ii+0xec>
   13424:	683b      	ldr	r3, [r7, #0]
   13426:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1342a:	4293      	cmp	r3, r2
   1342c:	d168      	bne.n	13500 <_Z41__static_initialization_and_destruction_0ii+0xec>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   1342e:	4936      	ldr	r1, [pc, #216]	; (13508 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   13430:	4836      	ldr	r0, [pc, #216]	; (1350c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   13432:	4b37      	ldr	r3, [pc, #220]	; (13510 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   13434:	4798      	blx	r3
   13436:	4a37      	ldr	r2, [pc, #220]	; (13514 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13438:	4937      	ldr	r1, [pc, #220]	; (13518 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   1343a:	4834      	ldr	r0, [pc, #208]	; (1350c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   1343c:	4b37      	ldr	r3, [pc, #220]	; (1351c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   1343e:	4798      	blx	r3
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   13440:	4937      	ldr	r1, [pc, #220]	; (13520 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   13442:	4838      	ldr	r0, [pc, #224]	; (13524 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   13444:	4b38      	ldr	r3, [pc, #224]	; (13528 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13446:	4798      	blx	r3
   13448:	4a32      	ldr	r2, [pc, #200]	; (13514 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   1344a:	4938      	ldr	r1, [pc, #224]	; (1352c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   1344c:	4835      	ldr	r0, [pc, #212]	; (13524 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   1344e:	4b33      	ldr	r3, [pc, #204]	; (1351c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13450:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   13452:	4937      	ldr	r1, [pc, #220]	; (13530 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   13454:	4837      	ldr	r0, [pc, #220]	; (13534 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13456:	4b34      	ldr	r3, [pc, #208]	; (13528 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13458:	4798      	blx	r3
   1345a:	4a2e      	ldr	r2, [pc, #184]	; (13514 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   1345c:	4933      	ldr	r1, [pc, #204]	; (1352c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   1345e:	4835      	ldr	r0, [pc, #212]	; (13534 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13460:	4b2e      	ldr	r3, [pc, #184]	; (1351c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13462:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   13464:	4934      	ldr	r1, [pc, #208]	; (13538 <_Z41__static_initialization_and_destruction_0ii+0x124>)
   13466:	4835      	ldr	r0, [pc, #212]	; (1353c <_Z41__static_initialization_and_destruction_0ii+0x128>)
   13468:	4b2f      	ldr	r3, [pc, #188]	; (13528 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   1346a:	4798      	blx	r3
   1346c:	4a29      	ldr	r2, [pc, #164]	; (13514 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   1346e:	492f      	ldr	r1, [pc, #188]	; (1352c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13470:	4832      	ldr	r0, [pc, #200]	; (1353c <_Z41__static_initialization_and_destruction_0ii+0x128>)
   13472:	4b2a      	ldr	r3, [pc, #168]	; (1351c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13474:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   13476:	4932      	ldr	r1, [pc, #200]	; (13540 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13478:	4832      	ldr	r0, [pc, #200]	; (13544 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   1347a:	4b2b      	ldr	r3, [pc, #172]	; (13528 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   1347c:	4798      	blx	r3
   1347e:	4a25      	ldr	r2, [pc, #148]	; (13514 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13480:	492a      	ldr	r1, [pc, #168]	; (1352c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13482:	4830      	ldr	r0, [pc, #192]	; (13544 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13484:	4b25      	ldr	r3, [pc, #148]	; (1351c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13486:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   13488:	492f      	ldr	r1, [pc, #188]	; (13548 <_Z41__static_initialization_and_destruction_0ii+0x134>)
   1348a:	4830      	ldr	r0, [pc, #192]	; (1354c <_Z41__static_initialization_and_destruction_0ii+0x138>)
   1348c:	4b26      	ldr	r3, [pc, #152]	; (13528 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   1348e:	4798      	blx	r3
   13490:	4a20      	ldr	r2, [pc, #128]	; (13514 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13492:	4926      	ldr	r1, [pc, #152]	; (1352c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13494:	482d      	ldr	r0, [pc, #180]	; (1354c <_Z41__static_initialization_and_destruction_0ii+0x138>)
   13496:	4b21      	ldr	r3, [pc, #132]	; (1351c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13498:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1349a:	492d      	ldr	r1, [pc, #180]	; (13550 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
   1349c:	482d      	ldr	r0, [pc, #180]	; (13554 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   1349e:	4b22      	ldr	r3, [pc, #136]	; (13528 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   134a0:	4798      	blx	r3
   134a2:	4a1c      	ldr	r2, [pc, #112]	; (13514 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   134a4:	4921      	ldr	r1, [pc, #132]	; (1352c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   134a6:	482b      	ldr	r0, [pc, #172]	; (13554 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   134a8:	4b1c      	ldr	r3, [pc, #112]	; (1351c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   134aa:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   134ac:	492a      	ldr	r1, [pc, #168]	; (13558 <_Z41__static_initialization_and_destruction_0ii+0x144>)
   134ae:	482b      	ldr	r0, [pc, #172]	; (1355c <_Z41__static_initialization_and_destruction_0ii+0x148>)
   134b0:	4b1d      	ldr	r3, [pc, #116]	; (13528 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   134b2:	4798      	blx	r3
   134b4:	4a17      	ldr	r2, [pc, #92]	; (13514 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   134b6:	491d      	ldr	r1, [pc, #116]	; (1352c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   134b8:	4828      	ldr	r0, [pc, #160]	; (1355c <_Z41__static_initialization_and_destruction_0ii+0x148>)
   134ba:	4b18      	ldr	r3, [pc, #96]	; (1351c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   134bc:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   134be:	4928      	ldr	r1, [pc, #160]	; (13560 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
   134c0:	4828      	ldr	r0, [pc, #160]	; (13564 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   134c2:	4b19      	ldr	r3, [pc, #100]	; (13528 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   134c4:	4798      	blx	r3
   134c6:	4a13      	ldr	r2, [pc, #76]	; (13514 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   134c8:	4918      	ldr	r1, [pc, #96]	; (1352c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   134ca:	4826      	ldr	r0, [pc, #152]	; (13564 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   134cc:	4b13      	ldr	r3, [pc, #76]	; (1351c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   134ce:	4798      	blx	r3
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
   134d0:	4b25      	ldr	r3, [pc, #148]	; (13568 <_Z41__static_initialization_and_destruction_0ii+0x154>)
   134d2:	2401      	movs	r4, #1
   134d4:	461d      	mov	r5, r3
   134d6:	2c00      	cmp	r4, #0
   134d8:	db05      	blt.n	134e6 <_Z41__static_initialization_and_destruction_0ii+0xd2>
   134da:	4628      	mov	r0, r5
   134dc:	4b23      	ldr	r3, [pc, #140]	; (1356c <_Z41__static_initialization_and_destruction_0ii+0x158>)
   134de:	4798      	blx	r3
   134e0:	3578      	adds	r5, #120	; 0x78
   134e2:	3c01      	subs	r4, #1
   134e4:	e7f7      	b.n	134d6 <_Z41__static_initialization_and_destruction_0ii+0xc2>
   134e6:	4a0b      	ldr	r2, [pc, #44]	; (13514 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   134e8:	4921      	ldr	r1, [pc, #132]	; (13570 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
   134ea:	2000      	movs	r0, #0
   134ec:	4b0b      	ldr	r3, [pc, #44]	; (1351c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   134ee:	4798      	blx	r3
   134f0:	4820      	ldr	r0, [pc, #128]	; (13574 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   134f2:	4b21      	ldr	r3, [pc, #132]	; (13578 <_Z41__static_initialization_and_destruction_0ii+0x164>)
   134f4:	4798      	blx	r3
   134f6:	4a07      	ldr	r2, [pc, #28]	; (13514 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   134f8:	4920      	ldr	r1, [pc, #128]	; (1357c <_Z41__static_initialization_and_destruction_0ii+0x168>)
   134fa:	481e      	ldr	r0, [pc, #120]	; (13574 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   134fc:	4b07      	ldr	r3, [pc, #28]	; (1351c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   134fe:	4798      	blx	r3
   13500:	bf00      	nop
   13502:	3708      	adds	r7, #8
   13504:	46bd      	mov	sp, r7
   13506:	bdb0      	pop	{r4, r5, r7, pc}
   13508:	2000dff8 	.word	0x2000dff8
   1350c:	200053fc 	.word	0x200053fc
   13510:	0000faf1 	.word	0x0000faf1
   13514:	20000000 	.word	0x20000000
   13518:	0000fb0d 	.word	0x0000fb0d
   1351c:	0001a0b5 	.word	0x0001a0b5
   13520:	2000dec8 	.word	0x2000dec8
   13524:	20005414 	.word	0x20005414
   13528:	000101a9 	.word	0x000101a9
   1352c:	000101e1 	.word	0x000101e1
   13530:	2000df5c 	.word	0x2000df5c
   13534:	20005434 	.word	0x20005434
   13538:	2000e080 	.word	0x2000e080
   1353c:	20005454 	.word	0x20005454
   13540:	2000df7c 	.word	0x2000df7c
   13544:	20005474 	.word	0x20005474
   13548:	2000e040 	.word	0x2000e040
   1354c:	20005494 	.word	0x20005494
   13550:	2000e060 	.word	0x2000e060
   13554:	200054b4 	.word	0x200054b4
   13558:	2000df38 	.word	0x2000df38
   1355c:	200054d4 	.word	0x200054d4
   13560:	2000dfd8 	.word	0x2000dfd8
   13564:	200054f4 	.word	0x200054f4
   13568:	2000553c 	.word	0x2000553c
   1356c:	00013595 	.word	0x00013595
   13570:	000133e9 	.word	0x000133e9
   13574:	2000562c 	.word	0x2000562c
   13578:	000121f9 	.word	0x000121f9
   1357c:	0001228d 	.word	0x0001228d

00013580 <_GLOBAL__sub_I_ptrFlapperValveController>:
   13580:	b580      	push	{r7, lr}
   13582:	af00      	add	r7, sp, #0
   13584:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13588:	2001      	movs	r0, #1
   1358a:	4b01      	ldr	r3, [pc, #4]	; (13590 <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
   1358c:	4798      	blx	r3
   1358e:	bd80      	pop	{r7, pc}
   13590:	00013415 	.word	0x00013415

00013594 <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
   13594:	b580      	push	{r7, lr}
   13596:	b082      	sub	sp, #8
   13598:	af00      	add	r7, sp, #0
   1359a:	6078      	str	r0, [r7, #4]
   1359c:	687b      	ldr	r3, [r7, #4]
   1359e:	4618      	mov	r0, r3
   135a0:	4b0c      	ldr	r3, [pc, #48]	; (135d4 <_ZN24SingleFlapperValve_ClassC1Ev+0x40>)
   135a2:	4798      	blx	r3
{
	valveID=0;
   135a4:	687b      	ldr	r3, [r7, #4]
   135a6:	2200      	movs	r2, #0
   135a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	i2c=&i2cStatic;
   135ac:	687b      	ldr	r3, [r7, #4]
   135ae:	4a0a      	ldr	r2, [pc, #40]	; (135d8 <_ZN24SingleFlapperValve_ClassC1Ev+0x44>)
   135b0:	64da      	str	r2, [r3, #76]	; 0x4c
	fv1StatusChanged=false;
   135b2:	687b      	ldr	r3, [r7, #4]
   135b4:	2200      	movs	r2, #0
   135b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ptrSingleFlapperValveClass=this;
   135ba:	4a08      	ldr	r2, [pc, #32]	; (135dc <_ZN24SingleFlapperValve_ClassC1Ev+0x48>)
   135bc:	687b      	ldr	r3, [r7, #4]
   135be:	6013      	str	r3, [r2, #0]
	isOK=false;
   135c0:	687b      	ldr	r3, [r7, #4]
   135c2:	2200      	movs	r2, #0
   135c4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
} //FlapperValve_Class
   135c8:	687b      	ldr	r3, [r7, #4]
   135ca:	4618      	mov	r0, r3
   135cc:	3708      	adds	r7, #8
   135ce:	46bd      	mov	sp, r7
   135d0:	bd80      	pop	{r7, pc}
   135d2:	bf00      	nop
   135d4:	00018197 	.word	0x00018197
   135d8:	20005824 	.word	0x20005824
   135dc:	20005820 	.word	0x20005820

000135e0 <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
   135e0:	b580      	push	{r7, lr}
   135e2:	b082      	sub	sp, #8
   135e4:	af00      	add	r7, sp, #0
   135e6:	6078      	str	r0, [r7, #4]
   135e8:	687b      	ldr	r3, [r7, #4]
   135ea:	4618      	mov	r0, r3
   135ec:	4b03      	ldr	r3, [pc, #12]	; (135fc <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
   135ee:	4798      	blx	r3
{
} //~FlapperValve_Class
   135f0:	687b      	ldr	r3, [r7, #4]
   135f2:	4618      	mov	r0, r3
   135f4:	3708      	adds	r7, #8
   135f6:	46bd      	mov	sp, r7
   135f8:	bd80      	pop	{r7, pc}
   135fa:	bf00      	nop
   135fc:	000181ab 	.word	0x000181ab

00013600 <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
   13600:	b580      	push	{r7, lr}
   13602:	b082      	sub	sp, #8
   13604:	af00      	add	r7, sp, #0
   13606:	6078      	str	r0, [r7, #4]
	if (i2c->initiated)
   13608:	687b      	ldr	r3, [r7, #4]
   1360a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1360c:	7a1b      	ldrb	r3, [r3, #8]
   1360e:	b2db      	uxtb	r3, r3
   13610:	2b00      	cmp	r3, #0
   13612:	d104      	bne.n	1361e <_ZN24SingleFlapperValve_Class4InitEv+0x1e>
	{
	} 
	else
	{
		i2c->Init();
   13614:	687b      	ldr	r3, [r7, #4]
   13616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   13618:	4618      	mov	r0, r3
   1361a:	4b19      	ldr	r3, [pc, #100]	; (13680 <_ZN24SingleFlapperValve_Class4InitEv+0x80>)
   1361c:	4798      	blx	r3
	}
		

		if (i2c->isOK)
   1361e:	687b      	ldr	r3, [r7, #4]
   13620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   13622:	7a5b      	ldrb	r3, [r3, #9]
   13624:	b2db      	uxtb	r3, r3
   13626:	2b00      	cmp	r3, #0
   13628:	d01b      	beq.n	13662 <_ZN24SingleFlapperValve_Class4InitEv+0x62>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
   1362a:	687b      	ldr	r3, [r7, #4]
   1362c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
   13630:	4619      	mov	r1, r3
   13632:	6878      	ldr	r0, [r7, #4]
   13634:	4b13      	ldr	r3, [pc, #76]	; (13684 <_ZN24SingleFlapperValve_Class4InitEv+0x84>)
   13636:	4798      	blx	r3
			expanders[0]->SetPortInput();
   13638:	687b      	ldr	r3, [r7, #4]
   1363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1363c:	4618      	mov	r0, r3
   1363e:	4b12      	ldr	r3, [pc, #72]	; (13688 <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
   13640:	4798      	blx	r3
			expanders[1]->SetPortInput(0x82);
   13642:	687b      	ldr	r3, [r7, #4]
   13644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13646:	2182      	movs	r1, #130	; 0x82
   13648:	4618      	mov	r0, r3
   1364a:	4b10      	ldr	r3, [pc, #64]	; (1368c <_ZN24SingleFlapperValve_Class4InitEv+0x8c>)
   1364c:	4798      	blx	r3
			expanders[2]->SetPortOutput();
   1364e:	687b      	ldr	r3, [r7, #4]
   13650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   13652:	4618      	mov	r0, r3
   13654:	4b0e      	ldr	r3, [pc, #56]	; (13690 <_ZN24SingleFlapperValve_Class4InitEv+0x90>)
   13656:	4798      	blx	r3
			expanders[3]->SetPortInput();
   13658:	687b      	ldr	r3, [r7, #4]
   1365a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1365c:	4618      	mov	r0, r3
   1365e:	4b0a      	ldr	r3, [pc, #40]	; (13688 <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
   13660:	4798      	blx	r3
							
		}
		isOK=i2c->isOK;
   13662:	687b      	ldr	r3, [r7, #4]
   13664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   13666:	7a5b      	ldrb	r3, [r3, #9]
   13668:	b2da      	uxtb	r2, r3
   1366a:	687b      	ldr	r3, [r7, #4]
   1366c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		
		return isOK;
   13670:	687b      	ldr	r3, [r7, #4]
   13672:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   13676:	b2db      	uxtb	r3, r3


}
   13678:	4618      	mov	r0, r3
   1367a:	3708      	adds	r7, #8
   1367c:	46bd      	mov	sp, r7
   1367e:	bd80      	pop	{r7, pc}
   13680:	0000fb21 	.word	0x0000fb21
   13684:	000136bd 	.word	0x000136bd
   13688:	0000fe79 	.word	0x0000fe79
   1368c:	0000febd 	.word	0x0000febd
   13690:	0000ff31 	.word	0x0000ff31

00013694 <_ZN24SingleFlapperValve_Class4InitEh>:

bool	SingleFlapperValve_Class::Init(uint8_t valve_id){
   13694:	b580      	push	{r7, lr}
   13696:	b082      	sub	sp, #8
   13698:	af00      	add	r7, sp, #0
   1369a:	6078      	str	r0, [r7, #4]
   1369c:	460b      	mov	r3, r1
   1369e:	70fb      	strb	r3, [r7, #3]
	valveID=valve_id;
   136a0:	687b      	ldr	r3, [r7, #4]
   136a2:	78fa      	ldrb	r2, [r7, #3]
   136a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	return Init();
   136a8:	6878      	ldr	r0, [r7, #4]
   136aa:	4b03      	ldr	r3, [pc, #12]	; (136b8 <_ZN24SingleFlapperValve_Class4InitEh+0x24>)
   136ac:	4798      	blx	r3
   136ae:	4603      	mov	r3, r0
}
   136b0:	4618      	mov	r0, r3
   136b2:	3708      	adds	r7, #8
   136b4:	46bd      	mov	sp, r7
   136b6:	bd80      	pop	{r7, pc}
   136b8:	00013601 	.word	0x00013601

000136bc <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
   136bc:	b580      	push	{r7, lr}
   136be:	b084      	sub	sp, #16
   136c0:	af00      	add	r7, sp, #0
   136c2:	6078      	str	r0, [r7, #4]
   136c4:	460b      	mov	r3, r1
   136c6:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   136c8:	2300      	movs	r3, #0
   136ca:	60fb      	str	r3, [r7, #12]
   136cc:	68fb      	ldr	r3, [r7, #12]
   136ce:	2b03      	cmp	r3, #3
   136d0:	dc2d      	bgt.n	1372e <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x72>
	{
		currentExpander=&(expandersStatic[valveID][i]);
   136d2:	687b      	ldr	r3, [r7, #4]
   136d4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
   136d8:	4619      	mov	r1, r3
   136da:	68fb      	ldr	r3, [r7, #12]
   136dc:	461a      	mov	r2, r3
   136de:	00d2      	lsls	r2, r2, #3
   136e0:	1ad2      	subs	r2, r2, r3
   136e2:	0093      	lsls	r3, r2, #2
   136e4:	461a      	mov	r2, r3
   136e6:	460b      	mov	r3, r1
   136e8:	00db      	lsls	r3, r3, #3
   136ea:	1a5b      	subs	r3, r3, r1
   136ec:	011b      	lsls	r3, r3, #4
   136ee:	4413      	add	r3, r2
   136f0:	4a11      	ldr	r2, [pc, #68]	; (13738 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x7c>)
   136f2:	441a      	add	r2, r3
   136f4:	687b      	ldr	r3, [r7, #4]
   136f6:	669a      	str	r2, [r3, #104]	; 0x68
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
   136f8:	687b      	ldr	r3, [r7, #4]
   136fa:	6e98      	ldr	r0, [r3, #104]	; 0x68
   136fc:	68fb      	ldr	r3, [r7, #12]
   136fe:	b2da      	uxtb	r2, r3
   13700:	78fb      	ldrb	r3, [r7, #3]
   13702:	009b      	lsls	r3, r3, #2
   13704:	b2db      	uxtb	r3, r3
   13706:	4413      	add	r3, r2
   13708:	b2db      	uxtb	r3, r3
   1370a:	3320      	adds	r3, #32
   1370c:	b2d9      	uxtb	r1, r3
   1370e:	687b      	ldr	r3, [r7, #4]
   13710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   13712:	461a      	mov	r2, r3
   13714:	4b09      	ldr	r3, [pc, #36]	; (1373c <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x80>)
   13716:	4798      	blx	r3
		expanders[i]=currentExpander;
   13718:	687b      	ldr	r3, [r7, #4]
   1371a:	6e99      	ldr	r1, [r3, #104]	; 0x68
   1371c:	687b      	ldr	r3, [r7, #4]
   1371e:	68fa      	ldr	r2, [r7, #12]
   13720:	3216      	adds	r2, #22
   13722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   13726:	68fb      	ldr	r3, [r7, #12]
   13728:	3301      	adds	r3, #1
   1372a:	60fb      	str	r3, [r7, #12]
   1372c:	e7ce      	b.n	136cc <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
   1372e:	2300      	movs	r3, #0
}
   13730:	4618      	mov	r0, r3
   13732:	3710      	adds	r7, #16
   13734:	46bd      	mov	sp, r7
   13736:	bd80      	pop	{r7, pc}
   13738:	2000583c 	.word	0x2000583c
   1373c:	0000fcd5 	.word	0x0000fcd5

00013740 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
   13740:	b590      	push	{r4, r7, lr}
   13742:	b085      	sub	sp, #20
   13744:	af00      	add	r7, sp, #0
   13746:	60f8      	str	r0, [r7, #12]
   13748:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
   1374a:	68bb      	ldr	r3, [r7, #8]
   1374c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1374e:	4618      	mov	r0, r3
   13750:	4b0f      	ldr	r3, [pc, #60]	; (13790 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x50>)
   13752:	4798      	blx	r3
   13754:	4603      	mov	r3, r0
   13756:	461a      	mov	r2, r3
   13758:	68bb      	ldr	r3, [r7, #8]
   1375a:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	controlOutputs=FillControlOutputs(value);
   1375e:	68b9      	ldr	r1, [r7, #8]
   13760:	68bb      	ldr	r3, [r7, #8]
   13762:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
   13766:	68bc      	ldr	r4, [r7, #8]
   13768:	463b      	mov	r3, r7
   1376a:	4618      	mov	r0, r3
   1376c:	4b09      	ldr	r3, [pc, #36]	; (13794 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
   1376e:	4798      	blx	r3
   13770:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   13774:	463a      	mov	r2, r7
   13776:	6810      	ldr	r0, [r2, #0]
   13778:	6851      	ldr	r1, [r2, #4]
   1377a:	c303      	stmia	r3!, {r0, r1}
	return controlOutputs;
   1377c:	68fa      	ldr	r2, [r7, #12]
   1377e:	68bb      	ldr	r3, [r7, #8]
   13780:	333c      	adds	r3, #60	; 0x3c
   13782:	cb03      	ldmia	r3!, {r0, r1}
   13784:	6010      	str	r0, [r2, #0]
   13786:	6051      	str	r1, [r2, #4]
}
   13788:	68f8      	ldr	r0, [r7, #12]
   1378a:	3714      	adds	r7, #20
   1378c:	46bd      	mov	sp, r7
   1378e:	bd90      	pop	{r4, r7, pc}
   13790:	0000fdb9 	.word	0x0000fdb9
   13794:	000182a9 	.word	0x000182a9

00013798 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
   13798:	b590      	push	{r4, r7, lr}
   1379a:	b085      	sub	sp, #20
   1379c:	af00      	add	r7, sp, #0
   1379e:	60f8      	str	r0, [r7, #12]
   137a0:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
   137a2:	68bb      	ldr	r3, [r7, #8]
   137a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   137a6:	4618      	mov	r0, r3
   137a8:	4b10      	ldr	r3, [pc, #64]	; (137ec <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
   137aa:	4798      	blx	r3
   137ac:	4603      	mov	r3, r0
   137ae:	461a      	mov	r2, r3
   137b0:	68bb      	ldr	r3, [r7, #8]
   137b2:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	statusInputs=FillInputStatus(value);
   137b6:	68b9      	ldr	r1, [r7, #8]
   137b8:	68bb      	ldr	r3, [r7, #8]
   137ba:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
   137be:	68bc      	ldr	r4, [r7, #8]
   137c0:	463b      	mov	r3, r7
   137c2:	4618      	mov	r0, r3
   137c4:	4b0a      	ldr	r3, [pc, #40]	; (137f0 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
   137c6:	4798      	blx	r3
   137c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   137cc:	463a      	mov	r2, r7
   137ce:	6810      	ldr	r0, [r2, #0]
   137d0:	6018      	str	r0, [r3, #0]
   137d2:	8892      	ldrh	r2, [r2, #4]
   137d4:	809a      	strh	r2, [r3, #4]
	return statusInputs;
   137d6:	68fa      	ldr	r2, [r7, #12]
   137d8:	68bb      	ldr	r3, [r7, #8]
   137da:	3344      	adds	r3, #68	; 0x44
   137dc:	6818      	ldr	r0, [r3, #0]
   137de:	6010      	str	r0, [r2, #0]
   137e0:	889b      	ldrh	r3, [r3, #4]
   137e2:	8093      	strh	r3, [r2, #4]
}
   137e4:	68f8      	ldr	r0, [r7, #12]
   137e6:	3714      	adds	r7, #20
   137e8:	46bd      	mov	sp, r7
   137ea:	bd90      	pop	{r4, r7, pc}
   137ec:	0000fdb9 	.word	0x0000fdb9
   137f0:	00018255 	.word	0x00018255

000137f4 <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
   137f4:	b580      	push	{r7, lr}
   137f6:	b082      	sub	sp, #8
   137f8:	af00      	add	r7, sp, #0
   137fa:	6078      	str	r0, [r7, #4]
   137fc:	460b      	mov	r3, r1
   137fe:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   13800:	687b      	ldr	r3, [r7, #4]
   13802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13804:	4618      	mov	r0, r3
   13806:	4b19      	ldr	r3, [pc, #100]	; (1386c <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
   13808:	4798      	blx	r3
   1380a:	4603      	mov	r3, r0
   1380c:	461a      	mov	r2, r3
   1380e:	687b      	ldr	r3, [r7, #4]
   13810:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x01:value&0xfe;
   13814:	78fb      	ldrb	r3, [r7, #3]
   13816:	2b00      	cmp	r3, #0
   13818:	d006      	beq.n	13828 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
   1381a:	687b      	ldr	r3, [r7, #4]
   1381c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13820:	f043 0301 	orr.w	r3, r3, #1
   13824:	b2db      	uxtb	r3, r3
   13826:	e005      	b.n	13834 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
   13828:	687b      	ldr	r3, [r7, #4]
   1382a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   1382e:	f023 0301 	bic.w	r3, r3, #1
   13832:	b2db      	uxtb	r3, r3
   13834:	687a      	ldr	r2, [r7, #4]
   13836:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	controlOutputs.niAlcFvMotorEnable=b;
   1383a:	687b      	ldr	r3, [r7, #4]
   1383c:	78fa      	ldrb	r2, [r7, #3]
   1383e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	value=expanders[1]->WriteGPIORegister(value);
   13842:	687b      	ldr	r3, [r7, #4]
   13844:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   13846:	687b      	ldr	r3, [r7, #4]
   13848:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   1384c:	4619      	mov	r1, r3
   1384e:	4610      	mov	r0, r2
   13850:	4b07      	ldr	r3, [pc, #28]	; (13870 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
   13852:	4798      	blx	r3
   13854:	4603      	mov	r3, r0
   13856:	461a      	mov	r2, r3
   13858:	687b      	ldr	r3, [r7, #4]
   1385a:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   1385e:	687b      	ldr	r3, [r7, #4]
   13860:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   13864:	4618      	mov	r0, r3
   13866:	3708      	adds	r7, #8
   13868:	46bd      	mov	sp, r7
   1386a:	bd80      	pop	{r7, pc}
   1386c:	0000fdb9 	.word	0x0000fdb9
   13870:	0000fe3d 	.word	0x0000fe3d

00013874 <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
   13874:	b580      	push	{r7, lr}
   13876:	b082      	sub	sp, #8
   13878:	af00      	add	r7, sp, #0
   1387a:	6078      	str	r0, [r7, #4]
   1387c:	460b      	mov	r3, r1
   1387e:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   13880:	687b      	ldr	r3, [r7, #4]
   13882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13884:	4618      	mov	r0, r3
   13886:	4b17      	ldr	r3, [pc, #92]	; (138e4 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x70>)
   13888:	4798      	blx	r3
   1388a:	4603      	mov	r3, r0
   1388c:	461a      	mov	r2, r3
   1388e:	687b      	ldr	r3, [r7, #4]
   13890:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x20:value&0xdf;
   13894:	78fb      	ldrb	r3, [r7, #3]
   13896:	2b00      	cmp	r3, #0
   13898:	d006      	beq.n	138a8 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
   1389a:	687b      	ldr	r3, [r7, #4]
   1389c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   138a0:	f043 0320 	orr.w	r3, r3, #32
   138a4:	b2db      	uxtb	r3, r3
   138a6:	e005      	b.n	138b4 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x40>
   138a8:	687b      	ldr	r3, [r7, #4]
   138aa:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   138ae:	f023 0320 	bic.w	r3, r3, #32
   138b2:	b2db      	uxtb	r3, r3
   138b4:	687a      	ldr	r2, [r7, #4]
   138b6:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
   138ba:	687b      	ldr	r3, [r7, #4]
   138bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   138be:	687b      	ldr	r3, [r7, #4]
   138c0:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   138c4:	4619      	mov	r1, r3
   138c6:	4610      	mov	r0, r2
   138c8:	4b07      	ldr	r3, [pc, #28]	; (138e8 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x74>)
   138ca:	4798      	blx	r3
   138cc:	4603      	mov	r3, r0
   138ce:	461a      	mov	r2, r3
   138d0:	687b      	ldr	r3, [r7, #4]
   138d2:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   138d6:	687b      	ldr	r3, [r7, #4]
   138d8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   138dc:	4618      	mov	r0, r3
   138de:	3708      	adds	r7, #8
   138e0:	46bd      	mov	sp, r7
   138e2:	bd80      	pop	{r7, pc}
   138e4:	0000fdb9 	.word	0x0000fdb9
   138e8:	0000fe3d 	.word	0x0000fe3d

000138ec <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
   138ec:	b580      	push	{r7, lr}
   138ee:	b082      	sub	sp, #8
   138f0:	af00      	add	r7, sp, #0
   138f2:	6078      	str	r0, [r7, #4]
   138f4:	460b      	mov	r3, r1
   138f6:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   138f8:	687b      	ldr	r3, [r7, #4]
   138fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   138fc:	4618      	mov	r0, r3
   138fe:	4b17      	ldr	r3, [pc, #92]	; (1395c <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
   13900:	4798      	blx	r3
   13902:	4603      	mov	r3, r0
   13904:	461a      	mov	r2, r3
   13906:	687b      	ldr	r3, [r7, #4]
   13908:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x40:value&0xbf;
   1390c:	78fb      	ldrb	r3, [r7, #3]
   1390e:	2b00      	cmp	r3, #0
   13910:	d006      	beq.n	13920 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
   13912:	687b      	ldr	r3, [r7, #4]
   13914:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1391c:	b2db      	uxtb	r3, r3
   1391e:	e005      	b.n	1392c <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
   13920:	687b      	ldr	r3, [r7, #4]
   13922:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1392a:	b2db      	uxtb	r3, r3
   1392c:	687a      	ldr	r2, [r7, #4]
   1392e:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
   13932:	687b      	ldr	r3, [r7, #4]
   13934:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   13936:	687b      	ldr	r3, [r7, #4]
   13938:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   1393c:	4619      	mov	r1, r3
   1393e:	4610      	mov	r0, r2
   13940:	4b07      	ldr	r3, [pc, #28]	; (13960 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
   13942:	4798      	blx	r3
   13944:	4603      	mov	r3, r0
   13946:	461a      	mov	r2, r3
   13948:	687b      	ldr	r3, [r7, #4]
   1394a:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   1394e:	687b      	ldr	r3, [r7, #4]
   13950:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   13954:	4618      	mov	r0, r3
   13956:	3708      	adds	r7, #8
   13958:	46bd      	mov	sp, r7
   1395a:	bd80      	pop	{r7, pc}
   1395c:	0000fdb9 	.word	0x0000fdb9
   13960:	0000fe3d 	.word	0x0000fe3d

00013964 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb>:

uint8_t SingleFlapperValve_Class::SetInvalidPosition(bool b){
   13964:	b580      	push	{r7, lr}
   13966:	b082      	sub	sp, #8
   13968:	af00      	add	r7, sp, #0
   1396a:	6078      	str	r0, [r7, #4]
   1396c:	460b      	mov	r3, r1
   1396e:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   13970:	687b      	ldr	r3, [r7, #4]
   13972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13974:	4618      	mov	r0, r3
   13976:	4b17      	ldr	r3, [pc, #92]	; (139d4 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x70>)
   13978:	4798      	blx	r3
   1397a:	4603      	mov	r3, r0
   1397c:	461a      	mov	r2, r3
   1397e:	687b      	ldr	r3, [r7, #4]
   13980:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x04:value&0xfb;
   13984:	78fb      	ldrb	r3, [r7, #3]
   13986:	2b00      	cmp	r3, #0
   13988:	d006      	beq.n	13998 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x34>
   1398a:	687b      	ldr	r3, [r7, #4]
   1398c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13990:	f043 0304 	orr.w	r3, r3, #4
   13994:	b2db      	uxtb	r3, r3
   13996:	e005      	b.n	139a4 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x40>
   13998:	687b      	ldr	r3, [r7, #4]
   1399a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   1399e:	f023 0304 	bic.w	r3, r3, #4
   139a2:	b2db      	uxtb	r3, r3
   139a4:	687a      	ldr	r2, [r7, #4]
   139a6:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
   139aa:	687b      	ldr	r3, [r7, #4]
   139ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   139ae:	687b      	ldr	r3, [r7, #4]
   139b0:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   139b4:	4619      	mov	r1, r3
   139b6:	4610      	mov	r0, r2
   139b8:	4b07      	ldr	r3, [pc, #28]	; (139d8 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x74>)
   139ba:	4798      	blx	r3
   139bc:	4603      	mov	r3, r0
   139be:	461a      	mov	r2, r3
   139c0:	687b      	ldr	r3, [r7, #4]
   139c2:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   139c6:	687b      	ldr	r3, [r7, #4]
   139c8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   139cc:	4618      	mov	r0, r3
   139ce:	3708      	adds	r7, #8
   139d0:	46bd      	mov	sp, r7
   139d2:	bd80      	pop	{r7, pc}
   139d4:	0000fdb9 	.word	0x0000fdb9
   139d8:	0000fe3d 	.word	0x0000fe3d

000139dc <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
   139dc:	b580      	push	{r7, lr}
   139de:	b082      	sub	sp, #8
   139e0:	af00      	add	r7, sp, #0
   139e2:	6078      	str	r0, [r7, #4]
   139e4:	460b      	mov	r3, r1
   139e6:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
   139e8:	687b      	ldr	r3, [r7, #4]
   139ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   139ec:	78fa      	ldrb	r2, [r7, #3]
   139ee:	4611      	mov	r1, r2
   139f0:	4618      	mov	r0, r3
   139f2:	4b07      	ldr	r3, [pc, #28]	; (13a10 <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
   139f4:	4798      	blx	r3
   139f6:	4603      	mov	r3, r0
   139f8:	461a      	mov	r2, r3
   139fa:	687b      	ldr	r3, [r7, #4]
   139fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
   13a00:	687b      	ldr	r3, [r7, #4]
   13a02:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
}
   13a06:	4618      	mov	r0, r3
   13a08:	3708      	adds	r7, #8
   13a0a:	46bd      	mov	sp, r7
   13a0c:	bd80      	pop	{r7, pc}
   13a0e:	bf00      	nop
   13a10:	0000fe3d 	.word	0x0000fe3d

00013a14 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
	return setpointPosition;
}
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
   13a14:	b580      	push	{r7, lr}
   13a16:	b082      	sub	sp, #8
   13a18:	af00      	add	r7, sp, #0
   13a1a:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
   13a1c:	687b      	ldr	r3, [r7, #4]
   13a1e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
   13a22:	687b      	ldr	r3, [r7, #4]
   13a24:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
   13a28:	687b      	ldr	r3, [r7, #4]
   13a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   13a2c:	4618      	mov	r0, r3
   13a2e:	4b18      	ldr	r3, [pc, #96]	; (13a90 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x7c>)
   13a30:	4798      	blx	r3
   13a32:	4603      	mov	r3, r0
   13a34:	461a      	mov	r2, r3
   13a36:	687b      	ldr	r3, [r7, #4]
   13a38:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR)
   13a3c:	687b      	ldr	r3, [r7, #4]
   13a3e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   13a42:	2bda      	cmp	r3, #218	; 0xda
   13a44:	dd04      	ble.n	13a50 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x3c>
	{
		statusFlapperValve=NBC_MODE;
   13a46:	687b      	ldr	r3, [r7, #4]
   13a48:	2203      	movs	r2, #3
   13a4a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   13a4e:	e017      	b.n	13a80 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/2)
   13a50:	687b      	ldr	r3, [r7, #4]
   13a52:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   13a56:	2b6d      	cmp	r3, #109	; 0x6d
   13a58:	dd04      	ble.n	13a64 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x50>
	{
		statusFlapperValve=RECYCLE_MODE;
   13a5a:	687b      	ldr	r3, [r7, #4]
   13a5c:	2202      	movs	r2, #2
   13a5e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   13a62:	e00d      	b.n	13a80 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/4)
   13a64:	687b      	ldr	r3, [r7, #4]
   13a66:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   13a6a:	2b36      	cmp	r3, #54	; 0x36
   13a6c:	dd04      	ble.n	13a78 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x64>
	{
		statusFlapperValve=INTERM_MODE;
   13a6e:	687b      	ldr	r3, [r7, #4]
   13a70:	2201      	movs	r2, #1
   13a72:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   13a76:	e003      	b.n	13a80 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	} 
	else
	{
		statusFlapperValve=FRESHAIR_MODE;
   13a78:	687b      	ldr	r3, [r7, #4]
   13a7a:	2200      	movs	r2, #0
   13a7c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	}
	return actualPosition;
   13a80:	687b      	ldr	r3, [r7, #4]
   13a82:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
}
   13a86:	4618      	mov	r0, r3
   13a88:	3708      	adds	r7, #8
   13a8a:	46bd      	mov	sp, r7
   13a8c:	bd80      	pop	{r7, pc}
   13a8e:	bf00      	nop
   13a90:	0000fdb9 	.word	0x0000fdb9

00013a94 <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
   13a94:	b590      	push	{r4, r7, lr}
   13a96:	b083      	sub	sp, #12
   13a98:	af00      	add	r7, sp, #0
   13a9a:	6078      	str	r0, [r7, #4]
   13a9c:	4c05      	ldr	r4, [pc, #20]	; (13ab4 <__tcf_0+0x20>)
   13a9e:	4b06      	ldr	r3, [pc, #24]	; (13ab8 <__tcf_0+0x24>)
   13aa0:	429c      	cmp	r4, r3
   13aa2:	d004      	beq.n	13aae <__tcf_0+0x1a>
   13aa4:	3c1c      	subs	r4, #28
   13aa6:	4620      	mov	r0, r4
   13aa8:	4b04      	ldr	r3, [pc, #16]	; (13abc <__tcf_0+0x28>)
   13aaa:	4798      	blx	r3
   13aac:	e7f7      	b.n	13a9e <__tcf_0+0xa>
   13aae:	370c      	adds	r7, #12
   13ab0:	46bd      	mov	sp, r7
   13ab2:	bd90      	pop	{r4, r7, pc}
   13ab4:	2000591c 	.word	0x2000591c
   13ab8:	2000583c 	.word	0x2000583c
   13abc:	0000fcc1 	.word	0x0000fcc1

00013ac0 <_Z41__static_initialization_and_destruction_0ii>:
	return true;
}

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}
   13ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ac4:	b082      	sub	sp, #8
   13ac6:	af00      	add	r7, sp, #0
   13ac8:	6078      	str	r0, [r7, #4]
   13aca:	6039      	str	r1, [r7, #0]
   13acc:	687b      	ldr	r3, [r7, #4]
   13ace:	2b01      	cmp	r3, #1
   13ad0:	d177      	bne.n	13bc2 <_Z41__static_initialization_and_destruction_0ii+0x102>
   13ad2:	683b      	ldr	r3, [r7, #0]
   13ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13ad8:	4293      	cmp	r3, r2
   13ada:	d172      	bne.n	13bc2 <_Z41__static_initialization_and_destruction_0ii+0x102>
   13adc:	493b      	ldr	r1, [pc, #236]	; (13bcc <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   13ade:	483c      	ldr	r0, [pc, #240]	; (13bd0 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   13ae0:	4b3c      	ldr	r3, [pc, #240]	; (13bd4 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13ae2:	4798      	blx	r3
   13ae4:	4a3c      	ldr	r2, [pc, #240]	; (13bd8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13ae6:	493d      	ldr	r1, [pc, #244]	; (13bdc <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   13ae8:	4839      	ldr	r0, [pc, #228]	; (13bd0 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   13aea:	4b3d      	ldr	r3, [pc, #244]	; (13be0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13aec:	4798      	blx	r3
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   13aee:	493d      	ldr	r1, [pc, #244]	; (13be4 <_Z41__static_initialization_and_destruction_0ii+0x124>)
   13af0:	483d      	ldr	r0, [pc, #244]	; (13be8 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   13af2:	4b3e      	ldr	r3, [pc, #248]	; (13bec <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13af4:	4798      	blx	r3
   13af6:	4a38      	ldr	r2, [pc, #224]	; (13bd8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13af8:	493d      	ldr	r1, [pc, #244]	; (13bf0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13afa:	483b      	ldr	r0, [pc, #236]	; (13be8 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   13afc:	4b38      	ldr	r3, [pc, #224]	; (13be0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13afe:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   13b00:	493c      	ldr	r1, [pc, #240]	; (13bf4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
   13b02:	483d      	ldr	r0, [pc, #244]	; (13bf8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   13b04:	4b39      	ldr	r3, [pc, #228]	; (13bec <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13b06:	4798      	blx	r3
   13b08:	4a33      	ldr	r2, [pc, #204]	; (13bd8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13b0a:	4939      	ldr	r1, [pc, #228]	; (13bf0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13b0c:	483a      	ldr	r0, [pc, #232]	; (13bf8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   13b0e:	4b34      	ldr	r3, [pc, #208]	; (13be0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13b10:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   13b12:	493a      	ldr	r1, [pc, #232]	; (13bfc <_Z41__static_initialization_and_destruction_0ii+0x13c>)
   13b14:	483a      	ldr	r0, [pc, #232]	; (13c00 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   13b16:	4b35      	ldr	r3, [pc, #212]	; (13bec <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13b18:	4798      	blx	r3
   13b1a:	4a2f      	ldr	r2, [pc, #188]	; (13bd8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13b1c:	4934      	ldr	r1, [pc, #208]	; (13bf0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13b1e:	4838      	ldr	r0, [pc, #224]	; (13c00 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   13b20:	4b2f      	ldr	r3, [pc, #188]	; (13be0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13b22:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   13b24:	4937      	ldr	r1, [pc, #220]	; (13c04 <_Z41__static_initialization_and_destruction_0ii+0x144>)
   13b26:	4838      	ldr	r0, [pc, #224]	; (13c08 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   13b28:	4b30      	ldr	r3, [pc, #192]	; (13bec <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13b2a:	4798      	blx	r3
   13b2c:	4a2a      	ldr	r2, [pc, #168]	; (13bd8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13b2e:	4930      	ldr	r1, [pc, #192]	; (13bf0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13b30:	4835      	ldr	r0, [pc, #212]	; (13c08 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   13b32:	4b2b      	ldr	r3, [pc, #172]	; (13be0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13b34:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   13b36:	4935      	ldr	r1, [pc, #212]	; (13c0c <_Z41__static_initialization_and_destruction_0ii+0x14c>)
   13b38:	4835      	ldr	r0, [pc, #212]	; (13c10 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   13b3a:	4b2c      	ldr	r3, [pc, #176]	; (13bec <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13b3c:	4798      	blx	r3
   13b3e:	4a26      	ldr	r2, [pc, #152]	; (13bd8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13b40:	492b      	ldr	r1, [pc, #172]	; (13bf0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13b42:	4833      	ldr	r0, [pc, #204]	; (13c10 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   13b44:	4b26      	ldr	r3, [pc, #152]	; (13be0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13b46:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   13b48:	4932      	ldr	r1, [pc, #200]	; (13c14 <_Z41__static_initialization_and_destruction_0ii+0x154>)
   13b4a:	4833      	ldr	r0, [pc, #204]	; (13c18 <_Z41__static_initialization_and_destruction_0ii+0x158>)
   13b4c:	4b27      	ldr	r3, [pc, #156]	; (13bec <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13b4e:	4798      	blx	r3
   13b50:	4a21      	ldr	r2, [pc, #132]	; (13bd8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13b52:	4927      	ldr	r1, [pc, #156]	; (13bf0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13b54:	4830      	ldr	r0, [pc, #192]	; (13c18 <_Z41__static_initialization_and_destruction_0ii+0x158>)
   13b56:	4b22      	ldr	r3, [pc, #136]	; (13be0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13b58:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   13b5a:	4930      	ldr	r1, [pc, #192]	; (13c1c <_Z41__static_initialization_and_destruction_0ii+0x15c>)
   13b5c:	4830      	ldr	r0, [pc, #192]	; (13c20 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   13b5e:	4b23      	ldr	r3, [pc, #140]	; (13bec <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13b60:	4798      	blx	r3
   13b62:	4a1d      	ldr	r2, [pc, #116]	; (13bd8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13b64:	4922      	ldr	r1, [pc, #136]	; (13bf0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13b66:	482e      	ldr	r0, [pc, #184]	; (13c20 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   13b68:	4b1d      	ldr	r3, [pc, #116]	; (13be0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13b6a:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   13b6c:	492d      	ldr	r1, [pc, #180]	; (13c24 <_Z41__static_initialization_and_destruction_0ii+0x164>)
   13b6e:	482e      	ldr	r0, [pc, #184]	; (13c28 <_Z41__static_initialization_and_destruction_0ii+0x168>)
   13b70:	4b1e      	ldr	r3, [pc, #120]	; (13bec <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13b72:	4798      	blx	r3
   13b74:	4a18      	ldr	r2, [pc, #96]	; (13bd8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13b76:	491e      	ldr	r1, [pc, #120]	; (13bf0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13b78:	482b      	ldr	r0, [pc, #172]	; (13c28 <_Z41__static_initialization_and_destruction_0ii+0x168>)
   13b7a:	4b19      	ldr	r3, [pc, #100]	; (13be0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13b7c:	4798      	blx	r3
static I2C_Sync_Class		i2cStatic(&I2C_FLAPPER_VALVE);
   13b7e:	492b      	ldr	r1, [pc, #172]	; (13c2c <_Z41__static_initialization_and_destruction_0ii+0x16c>)
   13b80:	482b      	ldr	r0, [pc, #172]	; (13c30 <_Z41__static_initialization_and_destruction_0ii+0x170>)
   13b82:	4b14      	ldr	r3, [pc, #80]	; (13bd4 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13b84:	4798      	blx	r3
   13b86:	4a14      	ldr	r2, [pc, #80]	; (13bd8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13b88:	4914      	ldr	r1, [pc, #80]	; (13bdc <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   13b8a:	4829      	ldr	r0, [pc, #164]	; (13c30 <_Z41__static_initialization_and_destruction_0ii+0x170>)
   13b8c:	4b14      	ldr	r3, [pc, #80]	; (13be0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13b8e:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
   13b90:	4b28      	ldr	r3, [pc, #160]	; (13c34 <_Z41__static_initialization_and_destruction_0ii+0x174>)
   13b92:	2401      	movs	r4, #1
   13b94:	461e      	mov	r6, r3
   13b96:	2c00      	cmp	r4, #0
   13b98:	db0e      	blt.n	13bb8 <_Z41__static_initialization_and_destruction_0ii+0xf8>
   13b9a:	4633      	mov	r3, r6
   13b9c:	2503      	movs	r5, #3
   13b9e:	4698      	mov	r8, r3
   13ba0:	2d00      	cmp	r5, #0
   13ba2:	db06      	blt.n	13bb2 <_Z41__static_initialization_and_destruction_0ii+0xf2>
   13ba4:	4640      	mov	r0, r8
   13ba6:	4b24      	ldr	r3, [pc, #144]	; (13c38 <_Z41__static_initialization_and_destruction_0ii+0x178>)
   13ba8:	4798      	blx	r3
   13baa:	f108 081c 	add.w	r8, r8, #28
   13bae:	3d01      	subs	r5, #1
   13bb0:	e7f6      	b.n	13ba0 <_Z41__static_initialization_and_destruction_0ii+0xe0>
   13bb2:	3670      	adds	r6, #112	; 0x70
   13bb4:	3c01      	subs	r4, #1
   13bb6:	e7ee      	b.n	13b96 <_Z41__static_initialization_and_destruction_0ii+0xd6>
   13bb8:	4a07      	ldr	r2, [pc, #28]	; (13bd8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13bba:	4920      	ldr	r1, [pc, #128]	; (13c3c <_Z41__static_initialization_and_destruction_0ii+0x17c>)
   13bbc:	2000      	movs	r0, #0
   13bbe:	4b08      	ldr	r3, [pc, #32]	; (13be0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13bc0:	4798      	blx	r3
}
   13bc2:	bf00      	nop
   13bc4:	3708      	adds	r7, #8
   13bc6:	46bd      	mov	sp, r7
   13bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13bcc:	2000dff8 	.word	0x2000dff8
   13bd0:	20005708 	.word	0x20005708
   13bd4:	0000faf1 	.word	0x0000faf1
   13bd8:	20000000 	.word	0x20000000
   13bdc:	0000fb0d 	.word	0x0000fb0d
   13be0:	0001a0b5 	.word	0x0001a0b5
   13be4:	2000dec8 	.word	0x2000dec8
   13be8:	20005720 	.word	0x20005720
   13bec:	000101a9 	.word	0x000101a9
   13bf0:	000101e1 	.word	0x000101e1
   13bf4:	2000df5c 	.word	0x2000df5c
   13bf8:	20005740 	.word	0x20005740
   13bfc:	2000e080 	.word	0x2000e080
   13c00:	20005760 	.word	0x20005760
   13c04:	2000df7c 	.word	0x2000df7c
   13c08:	20005780 	.word	0x20005780
   13c0c:	2000e040 	.word	0x2000e040
   13c10:	200057a0 	.word	0x200057a0
   13c14:	2000e060 	.word	0x2000e060
   13c18:	200057c0 	.word	0x200057c0
   13c1c:	2000df38 	.word	0x2000df38
   13c20:	200057e0 	.word	0x200057e0
   13c24:	2000dfd8 	.word	0x2000dfd8
   13c28:	20005800 	.word	0x20005800
   13c2c:	2000df9c 	.word	0x2000df9c
   13c30:	20005824 	.word	0x20005824
   13c34:	2000583c 	.word	0x2000583c
   13c38:	0000fcad 	.word	0x0000fcad
   13c3c:	00013a95 	.word	0x00013a95

00013c40 <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
   13c40:	b580      	push	{r7, lr}
   13c42:	af00      	add	r7, sp, #0
   13c44:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13c48:	2001      	movs	r0, #1
   13c4a:	4b01      	ldr	r3, [pc, #4]	; (13c50 <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
   13c4c:	4798      	blx	r3
   13c4e:	bd80      	pop	{r7, pc}
   13c50:	00013ac1 	.word	0x00013ac1

00013c54 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
   13c54:	b480      	push	{r7}
   13c56:	b083      	sub	sp, #12
   13c58:	af00      	add	r7, sp, #0
   13c5a:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
   13c5c:	4a07      	ldr	r2, [pc, #28]	; (13c7c <_ZN18SingleHeater_ClassC1Ev+0x28>)
   13c5e:	687b      	ldr	r3, [r7, #4]
   13c60:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
   13c62:	687b      	ldr	r3, [r7, #4]
   13c64:	4a06      	ldr	r2, [pc, #24]	; (13c80 <_ZN18SingleHeater_ClassC1Ev+0x2c>)
   13c66:	619a      	str	r2, [r3, #24]
	heaterStatusChanged=false;
   13c68:	687b      	ldr	r3, [r7, #4]
   13c6a:	2200      	movs	r2, #0
   13c6c:	705a      	strb	r2, [r3, #1]
} //SingleHeater_Class
   13c6e:	687b      	ldr	r3, [r7, #4]
   13c70:	4618      	mov	r0, r3
   13c72:	370c      	adds	r7, #12
   13c74:	46bd      	mov	sp, r7
   13c76:	bc80      	pop	{r7}
   13c78:	4770      	bx	lr
   13c7a:	bf00      	nop
   13c7c:	20005934 	.word	0x20005934
   13c80:	2000591c 	.word	0x2000591c

00013c84 <_ZN18SingleHeater_ClassD1Ev>:
	heaterStatusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
   13c84:	b480      	push	{r7}
   13c86:	b083      	sub	sp, #12
   13c88:	af00      	add	r7, sp, #0
   13c8a:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
   13c8c:	687b      	ldr	r3, [r7, #4]
   13c8e:	4618      	mov	r0, r3
   13c90:	370c      	adds	r7, #12
   13c92:	46bd      	mov	sp, r7
   13c94:	bc80      	pop	{r7}
   13c96:	4770      	bx	lr

00013c98 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class>:
			asm("nop");
		}
		isOK=i2c->isOK;
		return isOK;
}
bool SingleHeater_Class::Init(uint8_t id,MCP23008_Class *heater_expanders){
   13c98:	b580      	push	{r7, lr}
   13c9a:	b084      	sub	sp, #16
   13c9c:	af00      	add	r7, sp, #0
   13c9e:	60f8      	str	r0, [r7, #12]
   13ca0:	460b      	mov	r3, r1
   13ca2:	607a      	str	r2, [r7, #4]
   13ca4:	72fb      	strb	r3, [r7, #11]
	heater_id=id;
   13ca6:	68fb      	ldr	r3, [r7, #12]
   13ca8:	7afa      	ldrb	r2, [r7, #11]
   13caa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	if (i2c->initiated)
   13cae:	68fb      	ldr	r3, [r7, #12]
   13cb0:	699b      	ldr	r3, [r3, #24]
   13cb2:	7a1b      	ldrb	r3, [r3, #8]
   13cb4:	b2db      	uxtb	r3, r3
   13cb6:	2b00      	cmp	r3, #0
   13cb8:	d104      	bne.n	13cc4 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x2c>
	{
		
	} 
	else{
		i2c->Init();
   13cba:	68fb      	ldr	r3, [r7, #12]
   13cbc:	699b      	ldr	r3, [r3, #24]
   13cbe:	4618      	mov	r0, r3
   13cc0:	4b15      	ldr	r3, [pc, #84]	; (13d18 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x80>)
   13cc2:	4798      	blx	r3
	}
	
	if (i2c->isOK)
   13cc4:	68fb      	ldr	r3, [r7, #12]
   13cc6:	699b      	ldr	r3, [r3, #24]
   13cc8:	7a5b      	ldrb	r3, [r3, #9]
   13cca:	b2db      	uxtb	r3, r3
   13ccc:	2b00      	cmp	r3, #0
   13cce:	d015      	beq.n	13cfc <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x64>
	{
		
		//ext_irq_register(PIN_PA03,FUNC_PTR(HeaterStatusChanged));
		InitExpanderArray(heater_expanders);
   13cd0:	6879      	ldr	r1, [r7, #4]
   13cd2:	68f8      	ldr	r0, [r7, #12]
   13cd4:	4b11      	ldr	r3, [pc, #68]	; (13d1c <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x84>)
   13cd6:	4798      	blx	r3
		expanders[0]->SetPortInput();
   13cd8:	68fb      	ldr	r3, [r7, #12]
   13cda:	68db      	ldr	r3, [r3, #12]
   13cdc:	4618      	mov	r0, r3
   13cde:	4b10      	ldr	r3, [pc, #64]	; (13d20 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x88>)
   13ce0:	4798      	blx	r3
		expanders[1]->SetPortOutput();
   13ce2:	68fb      	ldr	r3, [r7, #12]
   13ce4:	691b      	ldr	r3, [r3, #16]
   13ce6:	4618      	mov	r0, r3
   13ce8:	4b0e      	ldr	r3, [pc, #56]	; (13d24 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x8c>)
   13cea:	4798      	blx	r3
		isOK=SelfTest();
   13cec:	68f8      	ldr	r0, [r7, #12]
   13cee:	4b0e      	ldr	r3, [pc, #56]	; (13d28 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x90>)
   13cf0:	4798      	blx	r3
   13cf2:	4603      	mov	r3, r0
   13cf4:	461a      	mov	r2, r3
   13cf6:	68fb      	ldr	r3, [r7, #12]
   13cf8:	701a      	strb	r2, [r3, #0]
   13cfa:	e000      	b.n	13cfe <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x66>
	}
	else
	{
		asm("nop");
   13cfc:	bf00      	nop
	}
	isOK=i2c->isOK;
   13cfe:	68fb      	ldr	r3, [r7, #12]
   13d00:	699b      	ldr	r3, [r3, #24]
   13d02:	7a5b      	ldrb	r3, [r3, #9]
   13d04:	b2da      	uxtb	r2, r3
   13d06:	68fb      	ldr	r3, [r7, #12]
   13d08:	701a      	strb	r2, [r3, #0]
	return isOK;
   13d0a:	68fb      	ldr	r3, [r7, #12]
   13d0c:	781b      	ldrb	r3, [r3, #0]
   13d0e:	b2db      	uxtb	r3, r3
}
   13d10:	4618      	mov	r0, r3
   13d12:	3710      	adds	r7, #16
   13d14:	46bd      	mov	sp, r7
   13d16:	bd80      	pop	{r7, pc}
   13d18:	0000fb21 	.word	0x0000fb21
   13d1c:	00013d2d 	.word	0x00013d2d
   13d20:	0000fe79 	.word	0x0000fe79
   13d24:	0000ff31 	.word	0x0000ff31
   13d28:	00013f15 	.word	0x00013f15

00013d2c <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class>:
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
	}
	
}

uint8_t SingleHeater_Class::InitExpanderArray(MCP23008_Class *heater_expanders){
   13d2c:	b580      	push	{r7, lr}
   13d2e:	b084      	sub	sp, #16
   13d30:	af00      	add	r7, sp, #0
   13d32:	6078      	str	r0, [r7, #4]
   13d34:	6039      	str	r1, [r7, #0]
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
   13d36:	2300      	movs	r3, #0
   13d38:	60fb      	str	r3, [r7, #12]
   13d3a:	68fb      	ldr	r3, [r7, #12]
   13d3c:	2b01      	cmp	r3, #1
   13d3e:	dc34      	bgt.n	13daa <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class+0x7e>
	{
		expanders[i]=&heater_expanders[2*heater_id+i];
   13d40:	687b      	ldr	r3, [r7, #4]
   13d42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   13d46:	005a      	lsls	r2, r3, #1
   13d48:	68fb      	ldr	r3, [r7, #12]
   13d4a:	4413      	add	r3, r2
   13d4c:	461a      	mov	r2, r3
   13d4e:	4613      	mov	r3, r2
   13d50:	00db      	lsls	r3, r3, #3
   13d52:	1a9b      	subs	r3, r3, r2
   13d54:	009b      	lsls	r3, r3, #2
   13d56:	461a      	mov	r2, r3
   13d58:	683b      	ldr	r3, [r7, #0]
   13d5a:	441a      	add	r2, r3
   13d5c:	6879      	ldr	r1, [r7, #4]
   13d5e:	68fb      	ldr	r3, [r7, #12]
   13d60:	3302      	adds	r3, #2
   13d62:	009b      	lsls	r3, r3, #2
   13d64:	440b      	add	r3, r1
   13d66:	605a      	str	r2, [r3, #4]
		currentExpander=(expanders[i]);
   13d68:	687a      	ldr	r2, [r7, #4]
   13d6a:	68fb      	ldr	r3, [r7, #12]
   13d6c:	3302      	adds	r3, #2
   13d6e:	009b      	lsls	r3, r3, #2
   13d70:	4413      	add	r3, r2
   13d72:	685a      	ldr	r2, [r3, #4]
   13d74:	687b      	ldr	r3, [r7, #4]
   13d76:	615a      	str	r2, [r3, #20]
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
   13d78:	687b      	ldr	r3, [r7, #4]
   13d7a:	6958      	ldr	r0, [r3, #20]
   13d7c:	68fb      	ldr	r3, [r7, #12]
   13d7e:	b2da      	uxtb	r2, r3
   13d80:	687b      	ldr	r3, [r7, #4]
   13d82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   13d86:	005b      	lsls	r3, r3, #1
   13d88:	b2db      	uxtb	r3, r3
   13d8a:	4313      	orrs	r3, r2
   13d8c:	b2db      	uxtb	r3, r3
   13d8e:	f043 0320 	orr.w	r3, r3, #32
   13d92:	b2db      	uxtb	r3, r3
   13d94:	b25b      	sxtb	r3, r3
   13d96:	b2d9      	uxtb	r1, r3
   13d98:	687b      	ldr	r3, [r7, #4]
   13d9a:	699b      	ldr	r3, [r3, #24]
   13d9c:	461a      	mov	r2, r3
   13d9e:	4b05      	ldr	r3, [pc, #20]	; (13db4 <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class+0x88>)
   13da0:	4798      	blx	r3
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
   13da2:	68fb      	ldr	r3, [r7, #12]
   13da4:	3301      	adds	r3, #1
   13da6:	60fb      	str	r3, [r7, #12]
   13da8:	e7c7      	b.n	13d3a <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class+0xe>
	}
	
}
   13daa:	bf00      	nop
   13dac:	4618      	mov	r0, r3
   13dae:	3710      	adds	r7, #16
   13db0:	46bd      	mov	sp, r7
   13db2:	bd80      	pop	{r7, pc}
   13db4:	0000fcd5 	.word	0x0000fcd5

00013db8 <_ZN18SingleHeater_Class10ReadStatusEv>:

uint8_t	SingleHeater_Class::ReadStatus(void){
   13db8:	b580      	push	{r7, lr}
   13dba:	b084      	sub	sp, #16
   13dbc:	af00      	add	r7, sp, #0
   13dbe:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
   13dc0:	687b      	ldr	r3, [r7, #4]
   13dc2:	68db      	ldr	r3, [r3, #12]
   13dc4:	4618      	mov	r0, r3
   13dc6:	4b16      	ldr	r3, [pc, #88]	; (13e20 <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
   13dc8:	4798      	blx	r3
   13dca:	4603      	mov	r3, r0
   13dcc:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
   13dce:	7bbb      	ldrb	r3, [r7, #14]
   13dd0:	f003 0301 	and.w	r3, r3, #1
   13dd4:	2b00      	cmp	r3, #0
   13dd6:	bf14      	ite	ne
   13dd8:	2301      	movne	r3, #1
   13dda:	2300      	moveq	r3, #0
   13ddc:	b2da      	uxtb	r2, r3
   13dde:	687b      	ldr	r3, [r7, #4]
   13de0:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
   13de2:	2300      	movs	r3, #0
   13de4:	73fb      	strb	r3, [r7, #15]
   13de6:	7bfb      	ldrb	r3, [r7, #15]
   13de8:	2b03      	cmp	r3, #3
   13dea:	dc14      	bgt.n	13e16 <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
   13dec:	7bfb      	ldrb	r3, [r7, #15]
   13dee:	7bb9      	ldrb	r1, [r7, #14]
   13df0:	7bfa      	ldrb	r2, [r7, #15]
   13df2:	3201      	adds	r2, #1
   13df4:	fa41 f202 	asr.w	r2, r1, r2
   13df8:	f002 0201 	and.w	r2, r2, #1
   13dfc:	2a00      	cmp	r2, #0
   13dfe:	bf14      	ite	ne
   13e00:	2201      	movne	r2, #1
   13e02:	2200      	moveq	r2, #0
   13e04:	b2d1      	uxtb	r1, r2
   13e06:	687a      	ldr	r2, [r7, #4]
   13e08:	4413      	add	r3, r2
   13e0a:	460a      	mov	r2, r1
   13e0c:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
   13e0e:	7bfb      	ldrb	r3, [r7, #15]
   13e10:	3301      	adds	r3, #1
   13e12:	73fb      	strb	r3, [r7, #15]
   13e14:	e7e7      	b.n	13de6 <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
   13e16:	7bbb      	ldrb	r3, [r7, #14]
}
   13e18:	4618      	mov	r0, r3
   13e1a:	3710      	adds	r7, #16
   13e1c:	46bd      	mov	sp, r7
   13e1e:	bd80      	pop	{r7, pc}
   13e20:	0000fdb9 	.word	0x0000fdb9

00013e24 <_ZN18SingleHeater_Class9ReadGPIOsEPh>:
void	SingleHeater_Class::ReadGPIOs(uint8_t *buffer){
   13e24:	b590      	push	{r4, r7, lr}
   13e26:	b085      	sub	sp, #20
   13e28:	af00      	add	r7, sp, #0
   13e2a:	6078      	str	r0, [r7, #4]
   13e2c:	6039      	str	r1, [r7, #0]

	for (uint8_t i = 0; i < 2; i++)
   13e2e:	2300      	movs	r3, #0
   13e30:	73fb      	strb	r3, [r7, #15]
   13e32:	7bfb      	ldrb	r3, [r7, #15]
   13e34:	2b01      	cmp	r3, #1
   13e36:	dc11      	bgt.n	13e5c <_ZN18SingleHeater_Class9ReadGPIOsEPh+0x38>
	{
		buffer[i]=expanders[i]->ReadGPIORegister();
   13e38:	7bfb      	ldrb	r3, [r7, #15]
   13e3a:	683a      	ldr	r2, [r7, #0]
   13e3c:	18d4      	adds	r4, r2, r3
   13e3e:	7bfb      	ldrb	r3, [r7, #15]
   13e40:	687a      	ldr	r2, [r7, #4]
   13e42:	3302      	adds	r3, #2
   13e44:	009b      	lsls	r3, r3, #2
   13e46:	4413      	add	r3, r2
   13e48:	685b      	ldr	r3, [r3, #4]
   13e4a:	4618      	mov	r0, r3
   13e4c:	4b05      	ldr	r3, [pc, #20]	; (13e64 <_ZN18SingleHeater_Class9ReadGPIOsEPh+0x40>)
   13e4e:	4798      	blx	r3
   13e50:	4603      	mov	r3, r0
   13e52:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < 2; i++)
   13e54:	7bfb      	ldrb	r3, [r7, #15]
   13e56:	3301      	adds	r3, #1
   13e58:	73fb      	strb	r3, [r7, #15]
   13e5a:	e7ea      	b.n	13e32 <_ZN18SingleHeater_Class9ReadGPIOsEPh+0xe>
		
	}
	
}
   13e5c:	bf00      	nop
   13e5e:	3714      	adds	r7, #20
   13e60:	46bd      	mov	sp, r7
   13e62:	bd90      	pop	{r4, r7, pc}
   13e64:	0000fdb9 	.word	0x0000fdb9

00013e68 <_ZN18SingleHeater_Class11EnableIndexEh>:
	{
		enables[i]=!(r&(0x01<<i));
	}
	return r;
}
uint8_t	SingleHeater_Class::EnableIndex(uint8_t indexHeater){
   13e68:	b580      	push	{r7, lr}
   13e6a:	b082      	sub	sp, #8
   13e6c:	af00      	add	r7, sp, #0
   13e6e:	6078      	str	r0, [r7, #4]
   13e70:	460b      	mov	r3, r1
   13e72:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,false);
   13e74:	687b      	ldr	r3, [r7, #4]
   13e76:	691b      	ldr	r3, [r3, #16]
   13e78:	78f9      	ldrb	r1, [r7, #3]
   13e7a:	2200      	movs	r2, #0
   13e7c:	4618      	mov	r0, r3
   13e7e:	4b06      	ldr	r3, [pc, #24]	; (13e98 <_ZN18SingleHeater_Class11EnableIndexEh+0x30>)
   13e80:	4798      	blx	r3
   13e82:	4603      	mov	r3, r0
   13e84:	461a      	mov	r2, r3
   13e86:	687b      	ldr	r3, [r7, #4]
   13e88:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   13e8a:	687b      	ldr	r3, [r7, #4]
   13e8c:	7adb      	ldrb	r3, [r3, #11]
}
   13e8e:	4618      	mov	r0, r3
   13e90:	3708      	adds	r7, #8
   13e92:	46bd      	mov	sp, r7
   13e94:	bd80      	pop	{r7, pc}
   13e96:	bf00      	nop
   13e98:	00010071 	.word	0x00010071

00013e9c <_ZN18SingleHeater_Class8SetRelayEhb>:
uint8_t	SingleHeater_Class::SetRelay(uint8_t indexHeater, bool state){
   13e9c:	b580      	push	{r7, lr}
   13e9e:	b082      	sub	sp, #8
   13ea0:	af00      	add	r7, sp, #0
   13ea2:	6078      	str	r0, [r7, #4]
   13ea4:	460b      	mov	r3, r1
   13ea6:	70fb      	strb	r3, [r7, #3]
   13ea8:	4613      	mov	r3, r2
   13eaa:	70bb      	strb	r3, [r7, #2]
	enabled=expanders[1]->WriteDigit(indexHeater,!state);
   13eac:	687b      	ldr	r3, [r7, #4]
   13eae:	6918      	ldr	r0, [r3, #16]
   13eb0:	78bb      	ldrb	r3, [r7, #2]
   13eb2:	f083 0301 	eor.w	r3, r3, #1
   13eb6:	b2da      	uxtb	r2, r3
   13eb8:	78fb      	ldrb	r3, [r7, #3]
   13eba:	4619      	mov	r1, r3
   13ebc:	4b05      	ldr	r3, [pc, #20]	; (13ed4 <_ZN18SingleHeater_Class8SetRelayEhb+0x38>)
   13ebe:	4798      	blx	r3
   13ec0:	4603      	mov	r3, r0
   13ec2:	461a      	mov	r2, r3
   13ec4:	687b      	ldr	r3, [r7, #4]
   13ec6:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   13ec8:	687b      	ldr	r3, [r7, #4]
   13eca:	7adb      	ldrb	r3, [r3, #11]
}
   13ecc:	4618      	mov	r0, r3
   13ece:	3708      	adds	r7, #8
   13ed0:	46bd      	mov	sp, r7
   13ed2:	bd80      	pop	{r7, pc}
   13ed4:	00010071 	.word	0x00010071

00013ed8 <_ZN18SingleHeater_Class12DisableIndexEh>:
	{
		DisableIndex(i);
	}
}

uint8_t	SingleHeater_Class::DisableIndex(uint8_t indexHeater){
   13ed8:	b580      	push	{r7, lr}
   13eda:	b082      	sub	sp, #8
   13edc:	af00      	add	r7, sp, #0
   13ede:	6078      	str	r0, [r7, #4]
   13ee0:	460b      	mov	r3, r1
   13ee2:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,true)?false:true;
   13ee4:	687b      	ldr	r3, [r7, #4]
   13ee6:	691b      	ldr	r3, [r3, #16]
   13ee8:	78f9      	ldrb	r1, [r7, #3]
   13eea:	2201      	movs	r2, #1
   13eec:	4618      	mov	r0, r3
   13eee:	4b08      	ldr	r3, [pc, #32]	; (13f10 <_ZN18SingleHeater_Class12DisableIndexEh+0x38>)
   13ef0:	4798      	blx	r3
   13ef2:	4603      	mov	r3, r0
   13ef4:	2b00      	cmp	r3, #0
   13ef6:	d001      	beq.n	13efc <_ZN18SingleHeater_Class12DisableIndexEh+0x24>
   13ef8:	2200      	movs	r2, #0
   13efa:	e000      	b.n	13efe <_ZN18SingleHeater_Class12DisableIndexEh+0x26>
   13efc:	2201      	movs	r2, #1
   13efe:	687b      	ldr	r3, [r7, #4]
   13f00:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   13f02:	687b      	ldr	r3, [r7, #4]
   13f04:	7adb      	ldrb	r3, [r3, #11]
}
   13f06:	4618      	mov	r0, r3
   13f08:	3708      	adds	r7, #8
   13f0a:	46bd      	mov	sp, r7
   13f0c:	bd80      	pop	{r7, pc}
   13f0e:	bf00      	nop
   13f10:	00010071 	.word	0x00010071

00013f14 <_ZN18SingleHeater_Class8SelfTestEv>:
	}
	return powerLevel;
}


bool SingleHeater_Class::SelfTest(void){
   13f14:	b580      	push	{r7, lr}
   13f16:	b084      	sub	sp, #16
   13f18:	af00      	add	r7, sp, #0
   13f1a:	6078      	str	r0, [r7, #4]
	bool result;
	for (uint8_t i = 0; i < 4; i++)
   13f1c:	2300      	movs	r3, #0
   13f1e:	73bb      	strb	r3, [r7, #14]
   13f20:	7bbb      	ldrb	r3, [r7, #14]
   13f22:	2b03      	cmp	r3, #3
   13f24:	dc1f      	bgt.n	13f66 <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	{
		EnableIndex(i);
   13f26:	7bbb      	ldrb	r3, [r7, #14]
   13f28:	4619      	mov	r1, r3
   13f2a:	6878      	ldr	r0, [r7, #4]
   13f2c:	4b10      	ldr	r3, [pc, #64]	; (13f70 <_ZN18SingleHeater_Class8SelfTestEv+0x5c>)
   13f2e:	4798      	blx	r3
		delay_ms(100);
   13f30:	2064      	movs	r0, #100	; 0x64
   13f32:	4b10      	ldr	r3, [pc, #64]	; (13f74 <_ZN18SingleHeater_Class8SelfTestEv+0x60>)
   13f34:	4798      	blx	r3
		DisableIndex(i);
   13f36:	7bbb      	ldrb	r3, [r7, #14]
   13f38:	4619      	mov	r1, r3
   13f3a:	6878      	ldr	r0, [r7, #4]
   13f3c:	4b0e      	ldr	r3, [pc, #56]	; (13f78 <_ZN18SingleHeater_Class8SelfTestEv+0x64>)
   13f3e:	4798      	blx	r3
		ReadStatus();
   13f40:	6878      	ldr	r0, [r7, #4]
   13f42:	4b0e      	ldr	r3, [pc, #56]	; (13f7c <_ZN18SingleHeater_Class8SelfTestEv+0x68>)
   13f44:	4798      	blx	r3
		if (heaterGPIO.inputs.niAlcHeaterRelayFault[i])
   13f46:	7bbb      	ldrb	r3, [r7, #14]
   13f48:	687a      	ldr	r2, [r7, #4]
   13f4a:	4413      	add	r3, r2
   13f4c:	78db      	ldrb	r3, [r3, #3]
   13f4e:	2b00      	cmp	r3, #0
   13f50:	d002      	beq.n	13f58 <_ZN18SingleHeater_Class8SelfTestEv+0x44>
		{
			result=true;
   13f52:	2301      	movs	r3, #1
   13f54:	73fb      	strb	r3, [r7, #15]
   13f56:	e002      	b.n	13f5e <_ZN18SingleHeater_Class8SelfTestEv+0x4a>
		} 
		else
		{
			result=false;
   13f58:	2300      	movs	r3, #0
   13f5a:	73fb      	strb	r3, [r7, #15]
			break;
   13f5c:	e003      	b.n	13f66 <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	for (uint8_t i = 0; i < 4; i++)
   13f5e:	7bbb      	ldrb	r3, [r7, #14]
   13f60:	3301      	adds	r3, #1
   13f62:	73bb      	strb	r3, [r7, #14]
   13f64:	e7dc      	b.n	13f20 <_ZN18SingleHeater_Class8SelfTestEv+0xc>
		}
			
			
	}
	
	return result;
   13f66:	7bfb      	ldrb	r3, [r7, #15]
}
   13f68:	4618      	mov	r0, r3
   13f6a:	3710      	adds	r7, #16
   13f6c:	46bd      	mov	sp, r7
   13f6e:	bd80      	pop	{r7, pc}
   13f70:	00013e69 	.word	0x00013e69
   13f74:	00003625 	.word	0x00003625
   13f78:	00013ed9 	.word	0x00013ed9
   13f7c:	00013db9 	.word	0x00013db9

00013f80 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   13f80:	b590      	push	{r4, r7, lr}
   13f82:	b083      	sub	sp, #12
   13f84:	af00      	add	r7, sp, #0
   13f86:	6078      	str	r0, [r7, #4]
   13f88:	4c05      	ldr	r4, [pc, #20]	; (13fa0 <__tcf_0+0x20>)
   13f8a:	4b06      	ldr	r3, [pc, #24]	; (13fa4 <__tcf_0+0x24>)
   13f8c:	429c      	cmp	r4, r3
   13f8e:	d004      	beq.n	13f9a <__tcf_0+0x1a>
   13f90:	3c1c      	subs	r4, #28
   13f92:	4620      	mov	r0, r4
   13f94:	4b04      	ldr	r3, [pc, #16]	; (13fa8 <__tcf_0+0x28>)
   13f96:	4798      	blx	r3
   13f98:	e7f7      	b.n	13f8a <__tcf_0+0xa>
   13f9a:	370c      	adds	r7, #12
   13f9c:	46bd      	mov	sp, r7
   13f9e:	bd90      	pop	{r4, r7, pc}
   13fa0:	20005970 	.word	0x20005970
   13fa4:	20005938 	.word	0x20005938
   13fa8:	0000fcc1 	.word	0x0000fcc1

00013fac <_Z41__static_initialization_and_destruction_0ii>:

   13fac:	b5b0      	push	{r4, r5, r7, lr}
   13fae:	b082      	sub	sp, #8
   13fb0:	af00      	add	r7, sp, #0
   13fb2:	6078      	str	r0, [r7, #4]
   13fb4:	6039      	str	r1, [r7, #0]
   13fb6:	687b      	ldr	r3, [r7, #4]
   13fb8:	2b01      	cmp	r3, #1
   13fba:	d125      	bne.n	14008 <_Z41__static_initialization_and_destruction_0ii+0x5c>
   13fbc:	683b      	ldr	r3, [r7, #0]
   13fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13fc2:	4293      	cmp	r3, r2
   13fc4:	d120      	bne.n	14008 <_Z41__static_initialization_and_destruction_0ii+0x5c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   13fc6:	4912      	ldr	r1, [pc, #72]	; (14010 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   13fc8:	4812      	ldr	r0, [pc, #72]	; (14014 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   13fca:	4b13      	ldr	r3, [pc, #76]	; (14018 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   13fcc:	4798      	blx	r3
   13fce:	4a13      	ldr	r2, [pc, #76]	; (1401c <_Z41__static_initialization_and_destruction_0ii+0x70>)
   13fd0:	4913      	ldr	r1, [pc, #76]	; (14020 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   13fd2:	4810      	ldr	r0, [pc, #64]	; (14014 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   13fd4:	4b13      	ldr	r3, [pc, #76]	; (14024 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   13fd6:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   13fd8:	4b13      	ldr	r3, [pc, #76]	; (14028 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   13fda:	2401      	movs	r4, #1
   13fdc:	461d      	mov	r5, r3
   13fde:	2c00      	cmp	r4, #0
   13fe0:	db05      	blt.n	13fee <_Z41__static_initialization_and_destruction_0ii+0x42>
   13fe2:	4628      	mov	r0, r5
   13fe4:	4b11      	ldr	r3, [pc, #68]	; (1402c <_Z41__static_initialization_and_destruction_0ii+0x80>)
   13fe6:	4798      	blx	r3
   13fe8:	351c      	adds	r5, #28
   13fea:	3c01      	subs	r4, #1
   13fec:	e7f7      	b.n	13fde <_Z41__static_initialization_and_destruction_0ii+0x32>
   13fee:	4a0b      	ldr	r2, [pc, #44]	; (1401c <_Z41__static_initialization_and_destruction_0ii+0x70>)
   13ff0:	490f      	ldr	r1, [pc, #60]	; (14030 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   13ff2:	2000      	movs	r0, #0
   13ff4:	4b0b      	ldr	r3, [pc, #44]	; (14024 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   13ff6:	4798      	blx	r3
   13ff8:	480e      	ldr	r0, [pc, #56]	; (14034 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   13ffa:	4b0f      	ldr	r3, [pc, #60]	; (14038 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   13ffc:	4798      	blx	r3
   13ffe:	4a07      	ldr	r2, [pc, #28]	; (1401c <_Z41__static_initialization_and_destruction_0ii+0x70>)
   14000:	490e      	ldr	r1, [pc, #56]	; (1403c <_Z41__static_initialization_and_destruction_0ii+0x90>)
   14002:	480c      	ldr	r0, [pc, #48]	; (14034 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   14004:	4b07      	ldr	r3, [pc, #28]	; (14024 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   14006:	4798      	blx	r3
   14008:	bf00      	nop
   1400a:	3708      	adds	r7, #8
   1400c:	46bd      	mov	sp, r7
   1400e:	bdb0      	pop	{r4, r5, r7, pc}
   14010:	2000dff8 	.word	0x2000dff8
   14014:	2000591c 	.word	0x2000591c
   14018:	0000faf1 	.word	0x0000faf1
   1401c:	20000000 	.word	0x20000000
   14020:	0000fb0d 	.word	0x0000fb0d
   14024:	0001a0b5 	.word	0x0001a0b5
   14028:	20005938 	.word	0x20005938
   1402c:	0000fcad 	.word	0x0000fcad
   14030:	00013f81 	.word	0x00013f81
   14034:	20005970 	.word	0x20005970
   14038:	00013c55 	.word	0x00013c55
   1403c:	00013c85 	.word	0x00013c85

00014040 <_GLOBAL__sub_I_ptrSingleHeaterClass>:
   14040:	b580      	push	{r7, lr}
   14042:	af00      	add	r7, sp, #0
   14044:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14048:	2001      	movs	r0, #1
   1404a:	4b01      	ldr	r3, [pc, #4]	; (14050 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
   1404c:	4798      	blx	r3
   1404e:	bd80      	pop	{r7, pc}
   14050:	00013fad 	.word	0x00013fad

00014054 <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
   14054:	4770      	bx	lr

00014056 <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
   14056:	4770      	bx	lr

00014058 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
	uint32_t	r=ReadParameters(up,add);
	return	r;
}
uint32_t	FlashHandler_Class::ReadEventLogSector(uint32_t add, uint8_t *buffer){
   14058:	b570      	push	{r4, r5, r6, lr}
   1405a:	4604      	mov	r4, r0
	if (add>(uint32_t)&flashMap->EventsLogStateSector)
   1405c:	4b0d      	ldr	r3, [pc, #52]	; (14094 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x3c>)
   1405e:	681b      	ldr	r3, [r3, #0]
   14060:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   14064:	428b      	cmp	r3, r1
   14066:	d305      	bcc.n	14074 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x1c>
		qspiFlash.WaitOnBusy();
		
	} 
	else
	{
		read_result=1;
   14068:	2301      	movs	r3, #1
   1406a:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	}

	return	read_result;
}
   1406e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   14072:	bd70      	pop	{r4, r5, r6, pc}
   14074:	4610      	mov	r0, r2
		read_result=qspiFlash.ReadAddress(buffer,add,QSPI_ERBLK);
   14076:	4d08      	ldr	r5, [pc, #32]	; (14098 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x40>)
   14078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1407c:	460a      	mov	r2, r1
   1407e:	4601      	mov	r1, r0
   14080:	4628      	mov	r0, r5
   14082:	4e06      	ldr	r6, [pc, #24]	; (1409c <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x44>)
   14084:	47b0      	blx	r6
   14086:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		qspiFlash.WaitOnBusy();
   1408a:	4628      	mov	r0, r5
   1408c:	4b04      	ldr	r3, [pc, #16]	; (140a0 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x48>)
   1408e:	4798      	blx	r3
   14090:	e7ed      	b.n	1406e <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x16>
   14092:	bf00      	nop
   14094:	20005994 	.word	0x20005994
   14098:	2000dbdc 	.word	0x2000dbdc
   1409c:	000195fd 	.word	0x000195fd
   140a0:	000196ad 	.word	0x000196ad

000140a4 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm>:
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	r;
}

uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){
   140a4:	b510      	push	{r4, lr}

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
   140a6:	2302      	movs	r3, #2
   140a8:	4801      	ldr	r0, [pc, #4]	; (140b0 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0xc>)
   140aa:	4c02      	ldr	r4, [pc, #8]	; (140b4 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0x10>)
   140ac:	47a0      	blx	r4
	return	r;
}
   140ae:	bd10      	pop	{r4, pc}
   140b0:	2000dbdc 	.word	0x2000dbdc
   140b4:	000195fd 	.word	0x000195fd

000140b8 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
   140b8:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
   140ba:	4b03      	ldr	r3, [pc, #12]	; (140c8 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x10>)
   140bc:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadParameters(up,add);
   140be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   140c2:	4b02      	ldr	r3, [pc, #8]	; (140cc <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x14>)
   140c4:	4798      	blx	r3
}
   140c6:	bd08      	pop	{r3, pc}
   140c8:	20005994 	.word	0x20005994
   140cc:	000140a5 	.word	0x000140a5

000140d0 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
   140d0:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
   140d2:	2302      	movs	r3, #2
   140d4:	4801      	ldr	r0, [pc, #4]	; (140dc <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
   140d6:	4c02      	ldr	r4, [pc, #8]	; (140e0 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
   140d8:	47a0      	blx	r4
	return	w;
}
   140da:	bd10      	pop	{r4, pc}
   140dc:	2000dbdc 	.word	0x2000dbdc
   140e0:	000195c9 	.word	0x000195c9

000140e4 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
   140e4:	b500      	push	{lr}
   140e6:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
   140e8:	4b07      	ldr	r3, [pc, #28]	; (14108 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
   140ea:	881b      	ldrh	r3, [r3, #0]
   140ec:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
   140f0:	4b06      	ldr	r3, [pc, #24]	; (1410c <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
   140f2:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
   140f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   140f8:	3202      	adds	r2, #2
   140fa:	a901      	add	r1, sp, #4
   140fc:	4b04      	ldr	r3, [pc, #16]	; (14110 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
   140fe:	4798      	blx	r3
	return	w;
}
   14100:	b003      	add	sp, #12
   14102:	f85d fb04 	ldr.w	pc, [sp], #4
   14106:	bf00      	nop
   14108:	0001bbd0 	.word	0x0001bbd0
   1410c:	20005994 	.word	0x20005994
   14110:	000140d1 	.word	0x000140d1

00014114 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
   14114:	b510      	push	{r4, lr}
   14116:	4604      	mov	r4, r0
   14118:	30c0      	adds	r0, #192	; 0xc0
   1411a:	4b03      	ldr	r3, [pc, #12]	; (14128 <_ZN17MemoryFlash_ClassD1Ev+0x14>)
   1411c:	4798      	blx	r3
   1411e:	4620      	mov	r0, r4
   14120:	4b02      	ldr	r3, [pc, #8]	; (1412c <_ZN17MemoryFlash_ClassD1Ev+0x18>)
   14122:	4798      	blx	r3
{
} //~MemoryManagment_Class
   14124:	4620      	mov	r0, r4
   14126:	bd10      	pop	{r4, pc}
   14128:	000143b3 	.word	0x000143b3
   1412c:	00014057 	.word	0x00014057

00014130 <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
   14130:	b538      	push	{r3, r4, r5, lr}
   14132:	4604      	mov	r4, r0
   14134:	4b14      	ldr	r3, [pc, #80]	; (14188 <_ZN17MemoryFlash_ClassC1Ev+0x58>)
   14136:	4798      	blx	r3
   14138:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1413c:	4b13      	ldr	r3, [pc, #76]	; (1418c <_ZN17MemoryFlash_ClassC1Ev+0x5c>)
   1413e:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   14140:	f44f 7500 	mov.w	r5, #512	; 0x200
   14144:	462a      	mov	r2, r5
   14146:	2100      	movs	r1, #0
   14148:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   1414c:	4b10      	ldr	r3, [pc, #64]	; (14190 <_ZN17MemoryFlash_ClassC1Ev+0x60>)
   1414e:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   14150:	2300      	movs	r3, #0
   14152:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
  _iTail = 0;
   14156:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
   1415a:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
	_currentAddress=0;
   1415e:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
	head=512;
   14162:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
	tail=0;
   14166:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
	flashBuffer=&flashBufferStatic[0];
   1416a:	490a      	ldr	r1, [pc, #40]	; (14194 <_ZN17MemoryFlash_ClassC1Ev+0x64>)
   1416c:	f246 3214 	movw	r2, #25364	; 0x6314
   14170:	50a1      	str	r1, [r4, r2]
	stackpointerEventloger=(uint32_t)&flashMap->EventsLogStateSector;
   14172:	4a09      	ldr	r2, [pc, #36]	; (14198 <_ZN17MemoryFlash_ClassC1Ev+0x68>)
   14174:	6812      	ldr	r2, [r2, #0]
   14176:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
   1417a:	f246 3118 	movw	r1, #25368	; 0x6318
   1417e:	5062      	str	r2, [r4, r1]
	initiated=false;
   14180:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
} //MemoryManagment_Class
   14184:	4620      	mov	r0, r4
   14186:	bd38      	pop	{r3, r4, r5, pc}
   14188:	00014055 	.word	0x00014055
   1418c:	000143b1 	.word	0x000143b1
   14190:	0001a769 	.word	0x0001a769
   14194:	20005998 	.word	0x20005998
   14198:	20005994 	.word	0x20005994

0001419c <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
   1419c:	b510      	push	{r4, lr}
   1419e:	4604      	mov	r4, r0
		if (qspiFlash.Init())
   141a0:	480a      	ldr	r0, [pc, #40]	; (141cc <_ZN17MemoryFlash_Class4InitEm+0x30>)
   141a2:	4b0b      	ldr	r3, [pc, #44]	; (141d0 <_ZN17MemoryFlash_Class4InitEm+0x34>)
   141a4:	4798      	blx	r3
   141a6:	b948      	cbnz	r0, 141bc <_ZN17MemoryFlash_Class4InitEm+0x20>
			initiated=true;
			//usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
		} 
		else
		{
			logger.SaveEvent("Flash Memory SelfTest FAILED");
   141a8:	490a      	ldr	r1, [pc, #40]	; (141d4 <_ZN17MemoryFlash_Class4InitEm+0x38>)
   141aa:	480b      	ldr	r0, [pc, #44]	; (141d8 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
   141ac:	4b0b      	ldr	r3, [pc, #44]	; (141dc <_ZN17MemoryFlash_Class4InitEm+0x40>)
   141ae:	4798      	blx	r3
			initiated=false;
   141b0:	2300      	movs	r3, #0
   141b2:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
			//usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return initiated;
}
   141b6:	f894 02e0 	ldrb.w	r0, [r4, #736]	; 0x2e0
   141ba:	bd10      	pop	{r4, pc}
			logger.SaveEvent("Flash Memory SelfTest PASSED");
   141bc:	4908      	ldr	r1, [pc, #32]	; (141e0 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   141be:	4806      	ldr	r0, [pc, #24]	; (141d8 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
   141c0:	4b06      	ldr	r3, [pc, #24]	; (141dc <_ZN17MemoryFlash_Class4InitEm+0x40>)
   141c2:	4798      	blx	r3
			initiated=true;
   141c4:	2301      	movs	r3, #1
   141c6:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
   141ca:	e7f4      	b.n	141b6 <_ZN17MemoryFlash_Class4InitEm+0x1a>
   141cc:	2000dbdc 	.word	0x2000dbdc
   141d0:	0001952d 	.word	0x0001952d
   141d4:	0001b0a0 	.word	0x0001b0a0
   141d8:	20003a18 	.word	0x20003a18
   141dc:	00011acd 	.word	0x00011acd
   141e0:	0001b080 	.word	0x0001b080

000141e4 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters>:
		  return	w;
	 }

	 return	r;
 }
 uint32_t	MemoryFlash_Class::SaveParameters(UserParameters& up){
   141e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   141e6:	460f      	mov	r7, r1
	  uint32_t	add=(uint32_t)&flashMap->parametersSector;
   141e8:	4b10      	ldr	r3, [pc, #64]	; (1422c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x48>)
   141ea:	681c      	ldr	r4, [r3, #0]
   141ec:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	  ParametersSector	*pss=(ParametersSector*)&flashBuffer[0];
   141f0:	f246 3314 	movw	r3, #25364	; 0x6314
   141f4:	58c5      	ldr	r5, [r0, r3]
	  uint32_t r=qspiFlash.ReadAddress((uint8_t*)pss,add,QSPI_ERBLK);
   141f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   141fa:	4622      	mov	r2, r4
   141fc:	4629      	mov	r1, r5
   141fe:	480c      	ldr	r0, [pc, #48]	; (14230 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   14200:	4e0c      	ldr	r6, [pc, #48]	; (14234 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x50>)
   14202:	47b0      	blx	r6
	  if (r==0)
   14204:	4603      	mov	r3, r0
   14206:	b108      	cbz	r0, 1420c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x28>
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
		  return	w;
	  }

	  return	r;
  }
   14208:	4618      	mov	r0, r3
   1420a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  memcpy((void*)&(pss->parameters),(void*)&up,sizeof(UserParameters));
   1420c:	883b      	ldrh	r3, [r7, #0]
   1420e:	802b      	strh	r3, [r5, #0]
		  qspiFlash.Erase(add);
   14210:	4e07      	ldr	r6, [pc, #28]	; (14230 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   14212:	4621      	mov	r1, r4
   14214:	4630      	mov	r0, r6
   14216:	4b08      	ldr	r3, [pc, #32]	; (14238 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x54>)
   14218:	4798      	blx	r3
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
   1421a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1421e:	4622      	mov	r2, r4
   14220:	4629      	mov	r1, r5
   14222:	4630      	mov	r0, r6
   14224:	4c05      	ldr	r4, [pc, #20]	; (1423c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x58>)
   14226:	47a0      	blx	r4
   14228:	4603      	mov	r3, r0
		  return	w;
   1422a:	e7ed      	b.n	14208 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x24>
   1422c:	20005994 	.word	0x20005994
   14230:	2000dbdc 	.word	0x2000dbdc
   14234:	000195fd 	.word	0x000195fd
   14238:	00019599 	.word	0x00019599
   1423c:	000195c9 	.word	0x000195c9

00014240 <_ZN17MemoryFlash_Class12SaveEventLogEPh>:
 uint32_t	MemoryFlash_Class::SaveEventLog(uint8_t *evl){
   14240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14244:	4604      	mov	r4, r0
   14246:	4688      	mov	r8, r1
	  
	
		   if ((stackpointerEventloger+QSPI_ERBLK)>N25Q_FLASH_SIZE)
   14248:	f246 3318 	movw	r3, #25368	; 0x6318
   1424c:	58c3      	ldr	r3, [r0, r3]
   1424e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   14252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
   14256:	d906      	bls.n	14266 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x26>
		   {
			   uint32_t	addRef=(uint32_t)&flashMap->EventsLogStateSector;
   14258:	4b14      	ldr	r3, [pc, #80]	; (142ac <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
   1425a:	681b      	ldr	r3, [r3, #0]
   1425c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
			   stackpointerEventloger=addRef;
   14260:	f246 3218 	movw	r2, #25368	; 0x6318
   14264:	5083      	str	r3, [r0, r2]
		   else
		   {
			   
		   }
	
		  stackpointerEventloger+=QSPI_ERBLK;
   14266:	f246 3618 	movw	r6, #25368	; 0x6318
   1426a:	59a1      	ldr	r1, [r4, r6]
   1426c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
   14270:	51a1      	str	r1, [r4, r6]
		  qspiFlash.Erase(stackpointerEventloger);
   14272:	4d0f      	ldr	r5, [pc, #60]	; (142b0 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x70>)
   14274:	4628      	mov	r0, r5
   14276:	4b0f      	ldr	r3, [pc, #60]	; (142b4 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x74>)
   14278:	4798      	blx	r3
		  qspiFlash.WaitOnBusy();
   1427a:	4628      	mov	r0, r5
   1427c:	4f0e      	ldr	r7, [pc, #56]	; (142b8 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x78>)
   1427e:	47b8      	blx	r7
		   uint32_t w=qspiFlash.WriteAddress(evl, stackpointerEventloger,QSPI_ERBLK);
   14280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   14284:	59a2      	ldr	r2, [r4, r6]
   14286:	4641      	mov	r1, r8
   14288:	4628      	mov	r0, r5
   1428a:	4e0c      	ldr	r6, [pc, #48]	; (142bc <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x7c>)
   1428c:	47b0      	blx	r6
   1428e:	4606      	mov	r6, r0
		    qspiFlash.WaitOnBusy();
   14290:	4628      	mov	r0, r5
   14292:	47b8      	blx	r7
		   if (w==0)
   14294:	b12e      	cbz	r6, 142a2 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x62>
		   {
			   return stackpointerEventloger;
		   } 
		   else
		   {
			   return (uint32_t)&flashMap->EventsLogStateSector+QSPI_ERBLK;
   14296:	4b05      	ldr	r3, [pc, #20]	; (142ac <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
   14298:	6818      	ldr	r0, [r3, #0]
   1429a:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
		   }
		   return	w;

	 
   }
   1429e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			   return stackpointerEventloger;
   142a2:	f246 3318 	movw	r3, #25368	; 0x6318
   142a6:	58e0      	ldr	r0, [r4, r3]
   142a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   142ac:	20005994 	.word	0x20005994
   142b0:	2000dbdc 	.word	0x2000dbdc
   142b4:	00019599 	.word	0x00019599
   142b8:	000196ad 	.word	0x000196ad
   142bc:	000195c9 	.word	0x000195c9

000142c0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
   142c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   142c4:	4c2b      	ldr	r4, [pc, #172]	; (14374 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb4>)
   142c6:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
   142ca:	492b      	ldr	r1, [pc, #172]	; (14378 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb8>)
   142cc:	4628      	mov	r0, r5
   142ce:	4f2b      	ldr	r7, [pc, #172]	; (1437c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xbc>)
   142d0:	47b8      	blx	r7
   142d2:	4e2b      	ldr	r6, [pc, #172]	; (14380 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc0>)
   142d4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 143ac <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xec>
   142d8:	4632      	mov	r2, r6
   142da:	4641      	mov	r1, r8
   142dc:	4628      	mov	r0, r5
   142de:	4d29      	ldr	r5, [pc, #164]	; (14384 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc4>)
   142e0:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   142e2:	f1a4 09d8 	sub.w	r9, r4, #216	; 0xd8
   142e6:	4928      	ldr	r1, [pc, #160]	; (14388 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc8>)
   142e8:	4648      	mov	r0, r9
   142ea:	47b8      	blx	r7
   142ec:	4632      	mov	r2, r6
   142ee:	4641      	mov	r1, r8
   142f0:	4648      	mov	r0, r9
   142f2:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   142f4:	f1a4 09b8 	sub.w	r9, r4, #184	; 0xb8
   142f8:	4924      	ldr	r1, [pc, #144]	; (1438c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xcc>)
   142fa:	4648      	mov	r0, r9
   142fc:	47b8      	blx	r7
   142fe:	4632      	mov	r2, r6
   14300:	4641      	mov	r1, r8
   14302:	4648      	mov	r0, r9
   14304:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   14306:	f1a4 0998 	sub.w	r9, r4, #152	; 0x98
   1430a:	4921      	ldr	r1, [pc, #132]	; (14390 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd0>)
   1430c:	4648      	mov	r0, r9
   1430e:	47b8      	blx	r7
   14310:	4632      	mov	r2, r6
   14312:	4641      	mov	r1, r8
   14314:	4648      	mov	r0, r9
   14316:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   14318:	f1a4 0978 	sub.w	r9, r4, #120	; 0x78
   1431c:	491d      	ldr	r1, [pc, #116]	; (14394 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd4>)
   1431e:	4648      	mov	r0, r9
   14320:	47b8      	blx	r7
   14322:	4632      	mov	r2, r6
   14324:	4641      	mov	r1, r8
   14326:	4648      	mov	r0, r9
   14328:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1432a:	f1a4 0958 	sub.w	r9, r4, #88	; 0x58
   1432e:	491a      	ldr	r1, [pc, #104]	; (14398 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd8>)
   14330:	4648      	mov	r0, r9
   14332:	47b8      	blx	r7
   14334:	4632      	mov	r2, r6
   14336:	4641      	mov	r1, r8
   14338:	4648      	mov	r0, r9
   1433a:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   1433c:	f1a4 0938 	sub.w	r9, r4, #56	; 0x38
   14340:	4916      	ldr	r1, [pc, #88]	; (1439c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xdc>)
   14342:	4648      	mov	r0, r9
   14344:	47b8      	blx	r7
   14346:	4632      	mov	r2, r6
   14348:	4641      	mov	r1, r8
   1434a:	4648      	mov	r0, r9
   1434c:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   1434e:	f1a4 0918 	sub.w	r9, r4, #24
   14352:	4913      	ldr	r1, [pc, #76]	; (143a0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe0>)
   14354:	4648      	mov	r0, r9
   14356:	47b8      	blx	r7
   14358:	4632      	mov	r2, r6
   1435a:	4641      	mov	r1, r8
   1435c:	4648      	mov	r0, r9
   1435e:	47a8      	blx	r5
   14360:	3408      	adds	r4, #8
   14362:	4620      	mov	r0, r4
   14364:	4b0f      	ldr	r3, [pc, #60]	; (143a4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe4>)
   14366:	4798      	blx	r3
   14368:	4632      	mov	r2, r6
   1436a:	490f      	ldr	r1, [pc, #60]	; (143a8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe8>)
   1436c:	4620      	mov	r0, r4
   1436e:	47a8      	blx	r5
   14370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14374:	20006a90 	.word	0x20006a90
   14378:	2000dec8 	.word	0x2000dec8
   1437c:	000101a9 	.word	0x000101a9
   14380:	20000000 	.word	0x20000000
   14384:	0001a0b5 	.word	0x0001a0b5
   14388:	2000df5c 	.word	0x2000df5c
   1438c:	2000e080 	.word	0x2000e080
   14390:	2000df7c 	.word	0x2000df7c
   14394:	2000e040 	.word	0x2000e040
   14398:	2000e060 	.word	0x2000e060
   1439c:	2000df38 	.word	0x2000df38
   143a0:	2000dfd8 	.word	0x2000dfd8
   143a4:	00014131 	.word	0x00014131
   143a8:	00014115 	.word	0x00014115
   143ac:	000101e1 	.word	0x000101e1

000143b0 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
   143b0:	4770      	bx	lr

000143b2 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
   143b2:	4770      	bx	lr

000143b4 <_ZN12Scavenge_FanD1Ev>:
} //Scavenge_Fan

// default destructor
Scavenge_Fan::~Scavenge_Fan()
{
} //~Scavenge_Fan
   143b4:	4770      	bx	lr
	...

000143b8 <_ZN12Scavenge_Fan10ReadStatusEv>:
	{
	}
	return isOK;
}

uint8_t	Scavenge_Fan::ReadStatus(void){
   143b8:	b510      	push	{r4, lr}
   143ba:	4604      	mov	r4, r0
	uint8_t r=expander->ReadGPIORegister();
   143bc:	6880      	ldr	r0, [r0, #8]
   143be:	4b06      	ldr	r3, [pc, #24]	; (143d8 <_ZN12Scavenge_Fan10ReadStatusEv+0x20>)
   143c0:	4798      	blx	r3
	
	
	scavengeData.tempFault=r&(0x01<<(7));
   143c2:	f3c0 12c0 	ubfx	r2, r0, #7, #1
   143c6:	70e2      	strb	r2, [r4, #3]
	scavengeData.SPDFault=r&(0x01<<(6));
   143c8:	f3c0 1280 	ubfx	r2, r0, #6, #1
   143cc:	7122      	strb	r2, [r4, #4]
	scavengeData.relayFault=r&(0x01<<(4));
   143ce:	f3c0 1300 	ubfx	r3, r0, #4, #1
   143d2:	7163      	strb	r3, [r4, #5]
	return r;
	
}
   143d4:	bd10      	pop	{r4, pc}
   143d6:	bf00      	nop
   143d8:	0000fdb9 	.word	0x0000fdb9

000143dc <_ZN12Scavenge_Fan9SetEnableEb>:
uint8_t	Scavenge_Fan::SetEnable(bool state){
   143dc:	b510      	push	{r4, lr}
   143de:	4604      	mov	r4, r0

	enabled=expander->WriteDigit(1,!state);
   143e0:	f081 0201 	eor.w	r2, r1, #1
   143e4:	2101      	movs	r1, #1
   143e6:	6880      	ldr	r0, [r0, #8]
   143e8:	4b01      	ldr	r3, [pc, #4]	; (143f0 <_ZN12Scavenge_Fan9SetEnableEb+0x14>)
   143ea:	4798      	blx	r3
   143ec:	7060      	strb	r0, [r4, #1]
	return uint8_t(enabled);
}
   143ee:	bd10      	pop	{r4, pc}
   143f0:	00010071 	.word	0x00010071

000143f4 <_ZN12Scavenge_Fan8SelfTestEv>:

	uint8_t value=expander->ReadGPIORegister();
	enabled=!(value&0x02);
	return enabled;
}
bool Scavenge_Fan::SelfTest(){
   143f4:	b510      	push	{r4, lr}
   143f6:	4604      	mov	r4, r0
	if ((ReadStatus()&0xd0)<0xd)
   143f8:	4b05      	ldr	r3, [pc, #20]	; (14410 <_ZN12Scavenge_Fan8SelfTestEv+0x1c>)
   143fa:	4798      	blx	r3
   143fc:	f000 00d0 	and.w	r0, r0, #208	; 0xd0
   14400:	280c      	cmp	r0, #12
	{
		bool_result=false;
   14402:	bfd4      	ite	le
   14404:	2300      	movle	r3, #0
	} 
	else
	{
		bool_result=true;
   14406:	2301      	movgt	r3, #1
   14408:	7423      	strb	r3, [r4, #16]
	}
	return bool_result;
}
   1440a:	7c20      	ldrb	r0, [r4, #16]
   1440c:	bd10      	pop	{r4, pc}
   1440e:	bf00      	nop
   14410:	000143b9 	.word	0x000143b9

00014414 <_ZN12Scavenge_Fan4InitEv>:
bool Scavenge_Fan::Init(void){
   14414:	b510      	push	{r4, lr}
   14416:	4604      	mov	r4, r0
	i2c=&i2cSharedStatic;
   14418:	4a0d      	ldr	r2, [pc, #52]	; (14450 <_ZN12Scavenge_Fan4InitEv+0x3c>)
   1441a:	60c2      	str	r2, [r0, #12]
	expander=&local_expander;
   1441c:	f102 0018 	add.w	r0, r2, #24
   14420:	60a0      	str	r0, [r4, #8]
	expander->Init(MCP23008_SCAVENGE_ADDRESS,i2c);
   14422:	2124      	movs	r1, #36	; 0x24
   14424:	4b0b      	ldr	r3, [pc, #44]	; (14454 <_ZN12Scavenge_Fan4InitEv+0x40>)
   14426:	4798      	blx	r3
	if (i2c->initiated)
   14428:	68e0      	ldr	r0, [r4, #12]
   1442a:	7a03      	ldrb	r3, [r0, #8]
   1442c:	b123      	cbz	r3, 14438 <_ZN12Scavenge_Fan4InitEv+0x24>
	if (i2c->isOK)
   1442e:	68e3      	ldr	r3, [r4, #12]
   14430:	7a5b      	ldrb	r3, [r3, #9]
   14432:	b923      	cbnz	r3, 1443e <_ZN12Scavenge_Fan4InitEv+0x2a>
}
   14434:	78a0      	ldrb	r0, [r4, #2]
   14436:	bd10      	pop	{r4, pc}
		i2c->Init();
   14438:	4b07      	ldr	r3, [pc, #28]	; (14458 <_ZN12Scavenge_Fan4InitEv+0x44>)
   1443a:	4798      	blx	r3
   1443c:	e7f7      	b.n	1442e <_ZN12Scavenge_Fan4InitEv+0x1a>
		expander->SetPortInput(0xf0);
   1443e:	21f0      	movs	r1, #240	; 0xf0
   14440:	68a0      	ldr	r0, [r4, #8]
   14442:	4b06      	ldr	r3, [pc, #24]	; (1445c <_ZN12Scavenge_Fan4InitEv+0x48>)
   14444:	4798      	blx	r3
		isOK=SelfTest();
   14446:	4620      	mov	r0, r4
   14448:	4b05      	ldr	r3, [pc, #20]	; (14460 <_ZN12Scavenge_Fan4InitEv+0x4c>)
   1444a:	4798      	blx	r3
   1444c:	70a0      	strb	r0, [r4, #2]
   1444e:	e7f1      	b.n	14434 <_ZN12Scavenge_Fan4InitEv+0x20>
   14450:	2000cdb4 	.word	0x2000cdb4
   14454:	0000fcd5 	.word	0x0000fcd5
   14458:	0000fb21 	.word	0x0000fb21
   1445c:	0000febd 	.word	0x0000febd
   14460:	000143f5 	.word	0x000143f5

00014464 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev>:
   14464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   14466:	4c0e      	ldr	r4, [pc, #56]	; (144a0 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x3c>)
   14468:	490e      	ldr	r1, [pc, #56]	; (144a4 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x40>)
   1446a:	4620      	mov	r0, r4
   1446c:	4b0e      	ldr	r3, [pc, #56]	; (144a8 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x44>)
   1446e:	4798      	blx	r3
   14470:	4e0e      	ldr	r6, [pc, #56]	; (144ac <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x48>)
   14472:	4632      	mov	r2, r6
   14474:	490e      	ldr	r1, [pc, #56]	; (144b0 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x4c>)
   14476:	4620      	mov	r0, r4
   14478:	4d0e      	ldr	r5, [pc, #56]	; (144b4 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x50>)
   1447a:	47a8      	blx	r5
static MCP23008_Class local_expander;
   1447c:	f104 0718 	add.w	r7, r4, #24
   14480:	4638      	mov	r0, r7
   14482:	4b0d      	ldr	r3, [pc, #52]	; (144b8 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x54>)
   14484:	4798      	blx	r3
   14486:	4632      	mov	r2, r6
   14488:	490c      	ldr	r1, [pc, #48]	; (144bc <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x58>)
   1448a:	4638      	mov	r0, r7
   1448c:	47a8      	blx	r5
	isOK=false;
   1448e:	2300      	movs	r3, #0
   14490:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   14494:	4632      	mov	r2, r6
   14496:	490a      	ldr	r1, [pc, #40]	; (144c0 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x5c>)
   14498:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1449c:	47a8      	blx	r5
   1449e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   144a0:	2000cdb4 	.word	0x2000cdb4
   144a4:	2000dff8 	.word	0x2000dff8
   144a8:	0000faf1 	.word	0x0000faf1
   144ac:	20000000 	.word	0x20000000
   144b0:	0000fb0d 	.word	0x0000fb0d
   144b4:	0001a0b5 	.word	0x0001a0b5
   144b8:	0000fcad 	.word	0x0000fcad
   144bc:	0000fcc1 	.word	0x0000fcc1
   144c0:	000143b5 	.word	0x000143b5

000144c4 <_ZL17ConversionTimeoutPK10timer_task>:
	temperatures.converterReady[2]=true;
	temperatures.SetModuleReady(2);
	temperatures.converterTimeout=false;
}
static void	ConversionTimeout(const struct timer_task *const timer_task){
	temperatures.converterTimeout=true;
   144c4:	2201      	movs	r2, #1
   144c6:	4b02      	ldr	r3, [pc, #8]	; (144d0 <_ZL17ConversionTimeoutPK10timer_task+0xc>)
   144c8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	asm("nop");
   144cc:	bf00      	nop
   144ce:	4770      	bx	lr
   144d0:	2000cdfc 	.word	0x2000cdfc

000144d4 <_ZN24TemperatureSensors_ClassD1Ev>:
		SPIA=SPI_LTC;
		
} //TemperatureSensors_Class

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   144d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   144d6:	4607      	mov	r7, r0
   144d8:	f110 05a8 	adds.w	r5, r0, #168	; 0xa8
   144dc:	d007      	beq.n	144ee <_ZN24TemperatureSensors_ClassD1Ev+0x1a>
   144de:	f500 74f0 	add.w	r4, r0, #480	; 0x1e0
   144e2:	4e05      	ldr	r6, [pc, #20]	; (144f8 <_ZN24TemperatureSensors_ClassD1Ev+0x24>)
   144e4:	3c68      	subs	r4, #104	; 0x68
   144e6:	4620      	mov	r0, r4
   144e8:	47b0      	blx	r6
   144ea:	42a5      	cmp	r5, r4
   144ec:	d1fa      	bne.n	144e4 <_ZN24TemperatureSensors_ClassD1Ev+0x10>
   144ee:	4638      	mov	r0, r7
   144f0:	4b02      	ldr	r3, [pc, #8]	; (144fc <_ZN24TemperatureSensors_ClassD1Ev+0x28>)
   144f2:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   144f4:	4638      	mov	r0, r7
   144f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   144f8:	000183a9 	.word	0x000183a9
   144fc:	000183a9 	.word	0x000183a9

00014500 <_ZL15Converter1Readyv>:
	temperatures.converterReady[0]=true;
   14500:	4b05      	ldr	r3, [pc, #20]	; (14518 <_ZL15Converter1Readyv+0x18>)
   14502:	2201      	movs	r2, #1
   14504:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
bool	TemperatureSensors_Class::IsOneConversionFinished(){
	return converterReady[0]|converterReady[1]|converterReady[2];
}
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
	module[m].ready=true;
   14508:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return module[m].ready;
   1450c:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	temperatures.converterTimeout=false;
   14510:	2200      	movs	r2, #0
   14512:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   14516:	4770      	bx	lr
   14518:	2000cdfc 	.word	0x2000cdfc

0001451c <_ZL15Converter2Readyv>:
	temperatures.converterReady[1]=true;
   1451c:	4b05      	ldr	r3, [pc, #20]	; (14534 <_ZL15Converter2Readyv+0x18>)
   1451e:	2201      	movs	r2, #1
   14520:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	module[m].ready=true;
   14524:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	return module[m].ready;
   14528:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
	temperatures.converterTimeout=false;
   1452c:	2200      	movs	r2, #0
   1452e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   14532:	4770      	bx	lr
   14534:	2000cdfc 	.word	0x2000cdfc

00014538 <_ZL15Converter3Readyv>:
	temperatures.converterReady[2]=true;
   14538:	4b05      	ldr	r3, [pc, #20]	; (14550 <_ZL15Converter3Readyv+0x18>)
   1453a:	2201      	movs	r2, #1
   1453c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	module[m].ready=true;
   14540:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	return module[m].ready;
   14544:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
	temperatures.converterTimeout=false;
   14548:	2200      	movs	r2, #0
   1454a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   1454e:	4770      	bx	lr
   14550:	2000cdfc 	.word	0x2000cdfc

00014554 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
   14554:	b570      	push	{r4, r5, r6, lr}
   14556:	4604      	mov	r4, r0
   14558:	460e      	mov	r6, r1
   1455a:	4b0b      	ldr	r3, [pc, #44]	; (14588 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x34>)
   1455c:	4798      	blx	r3
   1455e:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   14562:	4d0a      	ldr	r5, [pc, #40]	; (1458c <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x38>)
   14564:	47a8      	blx	r5
   14566:	f504 7088 	add.w	r0, r4, #272	; 0x110
   1456a:	47a8      	blx	r5
   1456c:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   14570:	47a8      	blx	r5
		spiLite=&ltSPI;
   14572:	4b07      	ldr	r3, [pc, #28]	; (14590 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x3c>)
   14574:	f503 7201 	add.w	r2, r3, #516	; 0x204
   14578:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
		ptrTemperaturesClass=this;
   1457c:	f8c3 4218 	str.w	r4, [r3, #536]	; 0x218
		SPIA=SPI_LTC;
   14580:	f8c4 61ec 	str.w	r6, [r4, #492]	; 0x1ec
} //TemperatureSensors_Class
   14584:	4620      	mov	r0, r4
   14586:	bd70      	pop	{r4, r5, r6, pc}
   14588:	00018395 	.word	0x00018395
   1458c:	00018395 	.word	0x00018395
   14590:	2000cdfc 	.word	0x2000cdfc

00014594 <_ZN24TemperatureSensors_Class11InitModulesEv>:
bool TemperatureSensors_Class::InitModules(void){
   14594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14598:	4605      	mov	r5, r0
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2; csPins[2]=CS_TEMP3;
   1459a:	233d      	movs	r3, #61	; 0x3d
   1459c:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
   145a0:	231b      	movs	r3, #27
   145a2:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
   145a6:	2327      	movs	r3, #39	; 0x27
   145a8:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
   145ac:	f500 77f0 	add.w	r7, r0, #480	; 0x1e0
   145b0:	f100 06a8 	add.w	r6, r0, #168	; 0xa8
   145b4:	2400      	movs	r4, #0
		module[ii].Init(csPins[ii],spiLite);
   145b6:	f8df b038 	ldr.w	fp, [pc, #56]	; 145f0 <_ZN24TemperatureSensors_Class11InitModulesEv+0x5c>
		logger.SaveEventIndexResult("Module ",ii,(uint8_t)(!isOK));
   145ba:	f8df a038 	ldr.w	sl, [pc, #56]	; 145f4 <_ZN24TemperatureSensors_Class11InitModulesEv+0x60>
   145be:	f8df 9038 	ldr.w	r9, [pc, #56]	; 145f8 <_ZN24TemperatureSensors_Class11InitModulesEv+0x64>
		module[ii].Init(csPins[ii],spiLite);
   145c2:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   145c6:	f857 1b04 	ldr.w	r1, [r7], #4
   145ca:	4630      	mov	r0, r6
   145cc:	47d8      	blx	fp
		logger.SaveEventIndexResult("Module ",ii,(uint8_t)(!isOK));
   145ce:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
   145d2:	f083 0301 	eor.w	r3, r3, #1
   145d6:	b2e2      	uxtb	r2, r4
   145d8:	4651      	mov	r1, sl
   145da:	4648      	mov	r0, r9
   145dc:	f8df 801c 	ldr.w	r8, [pc, #28]	; 145fc <_ZN24TemperatureSensors_Class11InitModulesEv+0x68>
   145e0:	47c0      	blx	r8
   145e2:	3401      	adds	r4, #1
   145e4:	3668      	adds	r6, #104	; 0x68
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   145e6:	2c03      	cmp	r4, #3
   145e8:	d1eb      	bne.n	145c2 <_ZN24TemperatureSensors_Class11InitModulesEv+0x2e>
}
   145ea:	2001      	movs	r0, #1
   145ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145f0:	000183bd 	.word	0x000183bd
   145f4:	0001b0c0 	.word	0x0001b0c0
   145f8:	20003a18 	.word	0x20003a18
   145fc:	00011a19 	.word	0x00011a19

00014600 <_ZN24TemperatureSensors_Class4InitEv>:
bool	TemperatureSensors_Class::Init(void){
   14600:	b538      	push	{r3, r4, r5, lr}
   14602:	4604      	mov	r4, r0
	spiLite->set_descriptor(SPIA);
   14604:	f8d0 11ec 	ldr.w	r1, [r0, #492]	; 0x1ec
   14608:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   1460c:	4b1d      	ldr	r3, [pc, #116]	; (14684 <_ZN24TemperatureSensors_Class4InitEv+0x84>)
   1460e:	4798      	blx	r3
	spiLite->init();
   14610:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   14614:	4b1c      	ldr	r3, [pc, #112]	; (14688 <_ZN24TemperatureSensors_Class4InitEv+0x88>)
   14616:	4798      	blx	r3
	if (spiLite->ready)
   14618:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   1461c:	781b      	ldrb	r3, [r3, #0]
   1461e:	bb63      	cbnz	r3, 1467a <_ZN24TemperatureSensors_Class4InitEv+0x7a>
		logger.SaveEvent("SPI Temperatures Failed");
   14620:	491a      	ldr	r1, [pc, #104]	; (1468c <_ZN24TemperatureSensors_Class4InitEv+0x8c>)
   14622:	481b      	ldr	r0, [pc, #108]	; (14690 <_ZN24TemperatureSensors_Class4InitEv+0x90>)
   14624:	4b1b      	ldr	r3, [pc, #108]	; (14694 <_ZN24TemperatureSensors_Class4InitEv+0x94>)
   14626:	4798      	blx	r3
	ptrTemperaturesClass=this;
   14628:	4b1b      	ldr	r3, [pc, #108]	; (14698 <_ZN24TemperatureSensors_Class4InitEv+0x98>)
   1462a:	f8c3 4218 	str.w	r4, [r3, #536]	; 0x218
	ext_irq_register(PIN_PB08, Converter1Ready);
   1462e:	491b      	ldr	r1, [pc, #108]	; (1469c <_ZN24TemperatureSensors_Class4InitEv+0x9c>)
   14630:	2028      	movs	r0, #40	; 0x28
   14632:	4d1b      	ldr	r5, [pc, #108]	; (146a0 <_ZN24TemperatureSensors_Class4InitEv+0xa0>)
   14634:	47a8      	blx	r5
	ext_irq_register(PIN_PB09, Converter2Ready);
   14636:	491b      	ldr	r1, [pc, #108]	; (146a4 <_ZN24TemperatureSensors_Class4InitEv+0xa4>)
   14638:	2029      	movs	r0, #41	; 0x29
   1463a:	47a8      	blx	r5
	ext_irq_register(PIN_PB01, Converter3Ready);
   1463c:	491a      	ldr	r1, [pc, #104]	; (146a8 <_ZN24TemperatureSensors_Class4InitEv+0xa8>)
   1463e:	2021      	movs	r0, #33	; 0x21
   14640:	47a8      	blx	r5
	InitModules();
   14642:	4620      	mov	r0, r4
   14644:	4b19      	ldr	r3, [pc, #100]	; (146ac <_ZN24TemperatureSensors_Class4InitEv+0xac>)
   14646:	4798      	blx	r3
	converterReady[0]=true;converterReady[1]=true;converterReady[3]=true;
   14648:	2301      	movs	r3, #1
   1464a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
   1464e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   14652:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	currentModule=0; currentChannelIndex=0;
   14656:	2300      	movs	r3, #0
   14658:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
   1465c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
   14660:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   14664:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
   14668:	4013      	ands	r3, r2
   1466a:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   1466e:	4013      	ands	r3, r2
	isOK=(module[0].isOK)&(module[1].isOK)&(module[2].isOK);
   14670:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	return isOK;
   14674:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
}
   14678:	bd38      	pop	{r3, r4, r5, pc}
		logger.SaveEvent("SPI Temperatures Started");
   1467a:	490d      	ldr	r1, [pc, #52]	; (146b0 <_ZN24TemperatureSensors_Class4InitEv+0xb0>)
   1467c:	4804      	ldr	r0, [pc, #16]	; (14690 <_ZN24TemperatureSensors_Class4InitEv+0x90>)
   1467e:	4b05      	ldr	r3, [pc, #20]	; (14694 <_ZN24TemperatureSensors_Class4InitEv+0x94>)
   14680:	4798      	blx	r3
   14682:	e7d1      	b.n	14628 <_ZN24TemperatureSensors_Class4InitEv+0x28>
   14684:	00018cc9 	.word	0x00018cc9
   14688:	00018c6d 	.word	0x00018c6d
   1468c:	0001b0e4 	.word	0x0001b0e4
   14690:	20003a18 	.word	0x20003a18
   14694:	00011acd 	.word	0x00011acd
   14698:	2000cdfc 	.word	0x2000cdfc
   1469c:	00014501 	.word	0x00014501
   146a0:	000036b9 	.word	0x000036b9
   146a4:	0001451d 	.word	0x0001451d
   146a8:	00014539 	.word	0x00014539
   146ac:	00014595 	.word	0x00014595
   146b0:	0001b0c8 	.word	0x0001b0c8

000146b4 <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
   146b4:	b510      	push	{r4, lr}
   146b6:	4604      	mov	r4, r0
	converterTimeout=false;
   146b8:	2200      	movs	r2, #0
   146ba:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	converterReady[currentModule]=false;
   146be:	f890 31ff 	ldrb.w	r3, [r0, #511]	; 0x1ff
   146c2:	4403      	add	r3, r0
   146c4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   146c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   146cc:	4907      	ldr	r1, [pc, #28]	; (146ec <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x38>)
   146ce:	4808      	ldr	r0, [pc, #32]	; (146f0 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x3c>)
   146d0:	4b08      	ldr	r3, [pc, #32]	; (146f4 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x40>)
   146d2:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
   146d4:	f894 01ff 	ldrb.w	r0, [r4, #511]	; 0x1ff
   146d8:	2368      	movs	r3, #104	; 0x68
   146da:	fb03 4000 	mla	r0, r3, r0, r4
   146de:	f894 1200 	ldrb.w	r1, [r4, #512]	; 0x200
   146e2:	30a8      	adds	r0, #168	; 0xa8
   146e4:	4b04      	ldr	r3, [pc, #16]	; (146f8 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x44>)
   146e6:	4798      	blx	r3
   146e8:	bd10      	pop	{r4, pc}
   146ea:	bf00      	nop
   146ec:	000144c5 	.word	0x000144c5
   146f0:	2000d018 	.word	0x2000d018
   146f4:	0001047d 	.word	0x0001047d
   146f8:	000184b1 	.word	0x000184b1

000146fc <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
   146fc:	b538      	push	{r3, r4, r5, lr}
   146fe:	4604      	mov	r4, r0
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
   14700:	491e      	ldr	r1, [pc, #120]	; (1477c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x80>)
   14702:	481f      	ldr	r0, [pc, #124]	; (14780 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x84>)
   14704:	4b1f      	ldr	r3, [pc, #124]	; (14784 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x88>)
   14706:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
   14708:	f894 01ff 	ldrb.w	r0, [r4, #511]	; 0x1ff
   1470c:	2568      	movs	r5, #104	; 0x68
   1470e:	fb05 4000 	mla	r0, r5, r0, r4
   14712:	f894 1200 	ldrb.w	r1, [r4, #512]	; 0x200
   14716:	30a8      	adds	r0, #168	; 0xa8
   14718:	4b1b      	ldr	r3, [pc, #108]	; (14788 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>)
   1471a:	4798      	blx	r3
   1471c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	faultData=module[currentModule].fault_data;
   14720:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
   14724:	fb05 4502 	mla	r5, r5, r2, r4
   14728:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
   1472c:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (faultData==VALID_TEMPERATURE)
   14730:	2b01      	cmp	r3, #1
   14732:	d00d      	beq.n	14750 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x54>
			lastValue=-999;
   14734:	4b15      	ldr	r3, [pc, #84]	; (1478c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x90>)
   14736:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	currentChannelIndex++;
   1473a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
   1473e:	3301      	adds	r3, #1
   14740:	b2db      	uxtb	r3, r3
	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
   14742:	2b04      	cmp	r3, #4
   14744:	d00c      	beq.n	14760 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x64>
	currentChannelIndex++;
   14746:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
   1474a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   1474e:	bd38      	pop	{r3, r4, r5, pc}
			values[currentModule][currentChannelIndex]=lastValue;
   14750:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
   14754:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   14758:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1475c:	66d8      	str	r0, [r3, #108]	; 0x6c
   1475e:	e7ec      	b.n	1473a <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x3e>
		currentChannelIndex=0;
   14760:	2300      	movs	r3, #0
   14762:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
		currentModule++;
   14766:	3201      	adds	r2, #1
   14768:	b2d2      	uxtb	r2, r2
		if (currentModule==NUMBER_LTC2983_MODULES)
   1476a:	2a03      	cmp	r2, #3
		currentModule++;
   1476c:	bf12      	itee	ne
   1476e:	f884 21ff 	strbne.w	r2, [r4, #511]	; 0x1ff
			currentModule=0;
   14772:	2300      	moveq	r3, #0
   14774:	f884 31ff 	strbeq.w	r3, [r4, #511]	; 0x1ff
   14778:	e7e7      	b.n	1474a <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x4e>
   1477a:	bf00      	nop
   1477c:	000144c5 	.word	0x000144c5
   14780:	2000d018 	.word	0x2000d018
   14784:	00010425 	.word	0x00010425
   14788:	000185b9 	.word	0x000185b9
   1478c:	c479c000 	.word	0xc479c000

00014790 <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
	return converterReady[0]&converterReady[1]&converterReady[2];
   14790:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
   14794:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   14798:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   1479c:	4013      	ands	r3, r2
}
   1479e:	4018      	ands	r0, r3
   147a0:	4770      	bx	lr
	...

000147a4 <_GLOBAL__sub_I_ptrTemperaturesClass>:
}

TemperatureSensors_Class temperatures(&SPI_TEMP);
   147a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   147a8:	4c30      	ldr	r4, [pc, #192]	; (1486c <_GLOBAL__sub_I_ptrTemperaturesClass+0xc8>)
   147aa:	f504 7507 	add.w	r5, r4, #540	; 0x21c
   147ae:	4930      	ldr	r1, [pc, #192]	; (14870 <_GLOBAL__sub_I_ptrTemperaturesClass+0xcc>)
   147b0:	4628      	mov	r0, r5
   147b2:	4f30      	ldr	r7, [pc, #192]	; (14874 <_GLOBAL__sub_I_ptrTemperaturesClass+0xd0>)
   147b4:	47b8      	blx	r7
   147b6:	4e30      	ldr	r6, [pc, #192]	; (14878 <_GLOBAL__sub_I_ptrTemperaturesClass+0xd4>)
   147b8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 148b0 <_GLOBAL__sub_I_ptrTemperaturesClass+0x10c>
   147bc:	4632      	mov	r2, r6
   147be:	4641      	mov	r1, r8
   147c0:	4628      	mov	r0, r5
   147c2:	4d2e      	ldr	r5, [pc, #184]	; (1487c <_GLOBAL__sub_I_ptrTemperaturesClass+0xd8>)
   147c4:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   147c6:	f504 790f 	add.w	r9, r4, #572	; 0x23c
   147ca:	492d      	ldr	r1, [pc, #180]	; (14880 <_GLOBAL__sub_I_ptrTemperaturesClass+0xdc>)
   147cc:	4648      	mov	r0, r9
   147ce:	47b8      	blx	r7
   147d0:	4632      	mov	r2, r6
   147d2:	4641      	mov	r1, r8
   147d4:	4648      	mov	r0, r9
   147d6:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   147d8:	f504 7917 	add.w	r9, r4, #604	; 0x25c
   147dc:	4929      	ldr	r1, [pc, #164]	; (14884 <_GLOBAL__sub_I_ptrTemperaturesClass+0xe0>)
   147de:	4648      	mov	r0, r9
   147e0:	47b8      	blx	r7
   147e2:	4632      	mov	r2, r6
   147e4:	4641      	mov	r1, r8
   147e6:	4648      	mov	r0, r9
   147e8:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   147ea:	f504 791f 	add.w	r9, r4, #636	; 0x27c
   147ee:	4926      	ldr	r1, [pc, #152]	; (14888 <_GLOBAL__sub_I_ptrTemperaturesClass+0xe4>)
   147f0:	4648      	mov	r0, r9
   147f2:	47b8      	blx	r7
   147f4:	4632      	mov	r2, r6
   147f6:	4641      	mov	r1, r8
   147f8:	4648      	mov	r0, r9
   147fa:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   147fc:	f504 7927 	add.w	r9, r4, #668	; 0x29c
   14800:	4922      	ldr	r1, [pc, #136]	; (1488c <_GLOBAL__sub_I_ptrTemperaturesClass+0xe8>)
   14802:	4648      	mov	r0, r9
   14804:	47b8      	blx	r7
   14806:	4632      	mov	r2, r6
   14808:	4641      	mov	r1, r8
   1480a:	4648      	mov	r0, r9
   1480c:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1480e:	f504 792f 	add.w	r9, r4, #700	; 0x2bc
   14812:	491f      	ldr	r1, [pc, #124]	; (14890 <_GLOBAL__sub_I_ptrTemperaturesClass+0xec>)
   14814:	4648      	mov	r0, r9
   14816:	47b8      	blx	r7
   14818:	4632      	mov	r2, r6
   1481a:	4641      	mov	r1, r8
   1481c:	4648      	mov	r0, r9
   1481e:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   14820:	f504 7937 	add.w	r9, r4, #732	; 0x2dc
   14824:	491b      	ldr	r1, [pc, #108]	; (14894 <_GLOBAL__sub_I_ptrTemperaturesClass+0xf0>)
   14826:	4648      	mov	r0, r9
   14828:	47b8      	blx	r7
   1482a:	4632      	mov	r2, r6
   1482c:	4641      	mov	r1, r8
   1482e:	4648      	mov	r0, r9
   14830:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   14832:	f504 793f 	add.w	r9, r4, #764	; 0x2fc
   14836:	4918      	ldr	r1, [pc, #96]	; (14898 <_GLOBAL__sub_I_ptrTemperaturesClass+0xf4>)
   14838:	4648      	mov	r0, r9
   1483a:	47b8      	blx	r7
   1483c:	4632      	mov	r2, r6
   1483e:	4641      	mov	r1, r8
   14840:	4648      	mov	r0, r9
   14842:	47a8      	blx	r5
static LT_SPI	ltSPI;
   14844:	f504 7701 	add.w	r7, r4, #516	; 0x204
   14848:	4638      	mov	r0, r7
   1484a:	4b14      	ldr	r3, [pc, #80]	; (1489c <_GLOBAL__sub_I_ptrTemperaturesClass+0xf8>)
   1484c:	4798      	blx	r3
   1484e:	4632      	mov	r2, r6
   14850:	4913      	ldr	r1, [pc, #76]	; (148a0 <_GLOBAL__sub_I_ptrTemperaturesClass+0xfc>)
   14852:	4638      	mov	r0, r7
   14854:	47a8      	blx	r5
TemperatureSensors_Class temperatures(&SPI_TEMP);
   14856:	4913      	ldr	r1, [pc, #76]	; (148a4 <_GLOBAL__sub_I_ptrTemperaturesClass+0x100>)
   14858:	4620      	mov	r0, r4
   1485a:	4b13      	ldr	r3, [pc, #76]	; (148a8 <_GLOBAL__sub_I_ptrTemperaturesClass+0x104>)
   1485c:	4798      	blx	r3
   1485e:	4632      	mov	r2, r6
   14860:	4912      	ldr	r1, [pc, #72]	; (148ac <_GLOBAL__sub_I_ptrTemperaturesClass+0x108>)
   14862:	4620      	mov	r0, r4
   14864:	47a8      	blx	r5
   14866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1486a:	bf00      	nop
   1486c:	2000cdfc 	.word	0x2000cdfc
   14870:	2000dec8 	.word	0x2000dec8
   14874:	000101a9 	.word	0x000101a9
   14878:	20000000 	.word	0x20000000
   1487c:	0001a0b5 	.word	0x0001a0b5
   14880:	2000df5c 	.word	0x2000df5c
   14884:	2000e080 	.word	0x2000e080
   14888:	2000df7c 	.word	0x2000df7c
   1488c:	2000e040 	.word	0x2000e040
   14890:	2000e060 	.word	0x2000e060
   14894:	2000df38 	.word	0x2000df38
   14898:	2000dfd8 	.word	0x2000dfd8
   1489c:	00018c31 	.word	0x00018c31
   148a0:	00018c59 	.word	0x00018c59
   148a4:	2000df00 	.word	0x2000df00
   148a8:	00014555 	.word	0x00014555
   148ac:	000144d5 	.word	0x000144d5
   148b0:	000101e1 	.word	0x000101e1

000148b4 <_ZN13CANOpen_ClassC1Ev>:
#include "CO_Class.h"

CANOpen_Class	*ptrCANOpenClass;

// default constructor
CANOpen_Class::CANOpen_Class()
   148b4:	b580      	push	{r7, lr}
   148b6:	b082      	sub	sp, #8
   148b8:	af00      	add	r7, sp, #0
   148ba:	6078      	str	r0, [r7, #4]
   148bc:	687b      	ldr	r3, [r7, #4]
   148be:	4618      	mov	r0, r3
   148c0:	4b06      	ldr	r3, [pc, #24]	; (148dc <_ZN13CANOpen_ClassC1Ev+0x28>)
   148c2:	4798      	blx	r3
   148c4:	4a06      	ldr	r2, [pc, #24]	; (148e0 <_ZN13CANOpen_ClassC1Ev+0x2c>)
   148c6:	687b      	ldr	r3, [r7, #4]
   148c8:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
   148ca:	4a06      	ldr	r2, [pc, #24]	; (148e4 <_ZN13CANOpen_ClassC1Ev+0x30>)
   148cc:	687b      	ldr	r3, [r7, #4]
   148ce:	6013      	str	r3, [r2, #0]
} //CANOpen_Class
   148d0:	687b      	ldr	r3, [r7, #4]
   148d2:	4618      	mov	r0, r3
   148d4:	3708      	adds	r7, #8
   148d6:	46bd      	mov	sp, r7
   148d8:	bd80      	pop	{r7, pc}
   148da:	bf00      	nop
   148dc:	00014a69 	.word	0x00014a69
   148e0:	0001b104 	.word	0x0001b104
   148e4:	2000d118 	.word	0x2000d118

000148e8 <_ZN13CANOpen_ClassC1EP20can_async_descriptor>:

CANOpen_Class::CANOpen_Class(can_async_descriptor  *descr)
   148e8:	b580      	push	{r7, lr}
   148ea:	b082      	sub	sp, #8
   148ec:	af00      	add	r7, sp, #0
   148ee:	6078      	str	r0, [r7, #4]
   148f0:	6039      	str	r1, [r7, #0]
   148f2:	687b      	ldr	r3, [r7, #4]
   148f4:	4618      	mov	r0, r3
   148f6:	4b08      	ldr	r3, [pc, #32]	; (14918 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x30>)
   148f8:	4798      	blx	r3
   148fa:	4a08      	ldr	r2, [pc, #32]	; (1491c <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x34>)
   148fc:	687b      	ldr	r3, [r7, #4]
   148fe:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
   14900:	4a07      	ldr	r2, [pc, #28]	; (14920 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x38>)
   14902:	687b      	ldr	r3, [r7, #4]
   14904:	6013      	str	r3, [r2, #0]
	canDescr=descr;
   14906:	687b      	ldr	r3, [r7, #4]
   14908:	683a      	ldr	r2, [r7, #0]
   1490a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
} //CANOpen_Class
   1490e:	687b      	ldr	r3, [r7, #4]
   14910:	4618      	mov	r0, r3
   14912:	3708      	adds	r7, #8
   14914:	46bd      	mov	sp, r7
   14916:	bd80      	pop	{r7, pc}
   14918:	00014a69 	.word	0x00014a69
   1491c:	0001b104 	.word	0x0001b104
   14920:	2000d118 	.word	0x2000d118

00014924 <_ZN13CANOpen_ClassD1Ev>:

// default destructor
CANOpen_Class::~CANOpen_Class()
   14924:	b580      	push	{r7, lr}
   14926:	b082      	sub	sp, #8
   14928:	af00      	add	r7, sp, #0
   1492a:	6078      	str	r0, [r7, #4]
   1492c:	4a05      	ldr	r2, [pc, #20]	; (14944 <_ZN13CANOpen_ClassD1Ev+0x20>)
   1492e:	687b      	ldr	r3, [r7, #4]
   14930:	601a      	str	r2, [r3, #0]
   14932:	687b      	ldr	r3, [r7, #4]
   14934:	4618      	mov	r0, r3
   14936:	4b04      	ldr	r3, [pc, #16]	; (14948 <_ZN13CANOpen_ClassD1Ev+0x24>)
   14938:	4798      	blx	r3
{
} //~CANOpen_Class
   1493a:	687b      	ldr	r3, [r7, #4]
   1493c:	4618      	mov	r0, r3
   1493e:	3708      	adds	r7, #8
   14940:	46bd      	mov	sp, r7
   14942:	bd80      	pop	{r7, pc}
   14944:	0001b104 	.word	0x0001b104
   14948:	00014ac9 	.word	0x00014ac9

0001494c <_ZN13CANOpen_Class13Init_CO_CLASSEh>:

int	CANOpen_Class::Init_CO_CLASS(uint8_t node){
   1494c:	b590      	push	{r4, r7, lr}
   1494e:	b083      	sub	sp, #12
   14950:	af00      	add	r7, sp, #0
   14952:	6078      	str	r0, [r7, #4]
   14954:	460b      	mov	r3, r1
   14956:	70fb      	strb	r3, [r7, #3]
	coNode=node;
   14958:	687b      	ldr	r3, [r7, #4]
   1495a:	78fa      	ldrb	r2, [r7, #3]
   1495c:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
	if (node==1)
	{
			//RedefineMacros();
	}
	//can.SetDescriptor(canDescr);
	err=CO_init(canDescr,node,1000);
   14960:	6878      	ldr	r0, [r7, #4]
   14962:	687b      	ldr	r3, [r7, #4]
   14964:	f8d3 116c 	ldr.w	r1, [r3, #364]	; 0x16c
   14968:	78fa      	ldrb	r2, [r7, #3]
   1496a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1496e:	4c17      	ldr	r4, [pc, #92]	; (149cc <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x80>)
   14970:	47a0      	blx	r4
   14972:	4603      	mov	r3, r0
   14974:	461a      	mov	r2, r3
   14976:	687b      	ldr	r3, [r7, #4]
   14978:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
	
	if (err==0)
   1497c:	687b      	ldr	r3, [r7, #4]
   1497e:	f993 3171 	ldrsb.w	r3, [r3, #369]	; 0x171
   14982:	2b00      	cmp	r3, #0
   14984:	d116      	bne.n	149b4 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x68>
	{
		canopen_driver->canopen_ready=true;
   14986:	4b12      	ldr	r3, [pc, #72]	; (149d0 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x84>)
   14988:	681b      	ldr	r3, [r3, #0]
   1498a:	2201      	movs	r2, #1
   1498c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		err=(CO_ReturnError_t)SetInitialMode();
   14990:	6878      	ldr	r0, [r7, #4]
   14992:	4b10      	ldr	r3, [pc, #64]	; (149d4 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x88>)
   14994:	4798      	blx	r3
   14996:	4603      	mov	r3, r0
   14998:	b25a      	sxtb	r2, r3
   1499a:	687b      	ldr	r3, [r7, #4]
   1499c:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
		if (node==1)
   149a0:	78fb      	ldrb	r3, [r7, #3]
   149a2:	2b01      	cmp	r3, #1
   149a4:	d10a      	bne.n	149bc <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x70>
		{
			CO_sendNMTcommand(1,0);
   149a6:	687b      	ldr	r3, [r7, #4]
   149a8:	2200      	movs	r2, #0
   149aa:	2101      	movs	r1, #1
   149ac:	4618      	mov	r0, r3
   149ae:	4b0a      	ldr	r3, [pc, #40]	; (149d8 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x8c>)
   149b0:	4798      	blx	r3
   149b2:	e003      	b.n	149bc <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x70>
		}
			

		
	}else{
		return	(int)err;
   149b4:	687b      	ldr	r3, [r7, #4]
   149b6:	f993 3171 	ldrsb.w	r3, [r3, #369]	; 0x171
   149ba:	e002      	b.n	149c2 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x76>
	}
	return	(int)err;
   149bc:	687b      	ldr	r3, [r7, #4]
   149be:	f993 3171 	ldrsb.w	r3, [r3, #369]	; 0x171
}
   149c2:	4618      	mov	r0, r3
   149c4:	370c      	adds	r7, #12
   149c6:	46bd      	mov	sp, r7
   149c8:	bd90      	pop	{r4, r7, pc}
   149ca:	bf00      	nop
   149cc:	00014bd9 	.word	0x00014bd9
   149d0:	2000da0c 	.word	0x2000da0c
   149d4:	000149dd 	.word	0x000149dd
   149d8:	00014b01 	.word	0x00014b01

000149dc <_ZN13CANOpen_Class14SetInitialModeEv>:

int	CANOpen_Class::SetInitialMode(void){
   149dc:	b580      	push	{r7, lr}
   149de:	b082      	sub	sp, #8
   149e0:	af00      	add	r7, sp, #0
   149e2:	6078      	str	r0, [r7, #4]
	/* CAN module address, NodeID, Bitrate */
	/* We do not use CAN registers directly, so address here is a pointer to the CAN_HandleTypeDef object. */
	
	
	/* start CAN */
	err=CO_CANsetNormalMode();
   149e4:	687b      	ldr	r3, [r7, #4]
   149e6:	4618      	mov	r0, r3
   149e8:	4b08      	ldr	r3, [pc, #32]	; (14a0c <_ZN13CANOpen_Class14SetInitialModeEv+0x30>)
   149ea:	4798      	blx	r3
   149ec:	4603      	mov	r3, r0
   149ee:	461a      	mov	r2, r3
   149f0:	687b      	ldr	r3, [r7, #4]
   149f2:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
	//err=CO_CANsetNormalMode(CO->CANmodule[0]);

	reset = CO_RESET_NOT;
   149f6:	687b      	ldr	r3, [r7, #4]
   149f8:	2200      	movs	r2, #0
   149fa:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
	return	(int)err;
   149fe:	687b      	ldr	r3, [r7, #4]
   14a00:	f993 3171 	ldrsb.w	r3, [r3, #369]	; 0x171
}
   14a04:	4618      	mov	r0, r3
   14a06:	3708      	adds	r7, #8
   14a08:	46bd      	mov	sp, r7
   14a0a:	bd80      	pop	{r7, pc}
   14a0c:	000155e9 	.word	0x000155e9

00014a10 <_ZN13CANOpen_Class15StartNMTServiceEh>:
		operational=(ptrCO->HBcons->monitoredNodes[2].NMTstate==5);
//0	}
	return	operational;
}

bool	CANOpen_Class::StartNMTService(uint8_t nodeId){
   14a10:	b580      	push	{r7, lr}
   14a12:	b084      	sub	sp, #16
   14a14:	af00      	add	r7, sp, #0
   14a16:	6078      	str	r0, [r7, #4]
   14a18:	460b      	mov	r3, r1
   14a1a:	70fb      	strb	r3, [r7, #3]
	bool localOperational=false;
   14a1c:	2300      	movs	r3, #0
   14a1e:	73fb      	strb	r3, [r7, #15]
// 	while ((!localOperational))
// 	{
		CO_sendNMTcommand(1,nodeId);
   14a20:	687b      	ldr	r3, [r7, #4]
   14a22:	78fa      	ldrb	r2, [r7, #3]
   14a24:	2101      	movs	r1, #1
   14a26:	4618      	mov	r0, r3
   14a28:	4b0d      	ldr	r3, [pc, #52]	; (14a60 <_ZN13CANOpen_Class15StartNMTServiceEh+0x50>)
   14a2a:	4798      	blx	r3
		delay_ms(100);
   14a2c:	2064      	movs	r0, #100	; 0x64
   14a2e:	4b0d      	ldr	r3, [pc, #52]	; (14a64 <_ZN13CANOpen_Class15StartNMTServiceEh+0x54>)
   14a30:	4798      	blx	r3
		localOperational=(ptrCO->HBcons->monitoredNodes[nodeId].NMTstate==5);
   14a32:	687b      	ldr	r3, [r7, #4]
   14a34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
   14a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   14a3a:	689a      	ldr	r2, [r3, #8]
   14a3c:	78fb      	ldrb	r3, [r7, #3]
   14a3e:	011b      	lsls	r3, r3, #4
   14a40:	4413      	add	r3, r2
   14a42:	781b      	ldrb	r3, [r3, #0]
   14a44:	2b05      	cmp	r3, #5
   14a46:	bf0c      	ite	eq
   14a48:	2301      	moveq	r3, #1
   14a4a:	2300      	movne	r3, #0
   14a4c:	73fb      	strb	r3, [r7, #15]
		slaveIsOperational=localOperational;
   14a4e:	687b      	ldr	r3, [r7, #4]
   14a50:	7bfa      	ldrb	r2, [r7, #15]
   14a52:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
//	}
	return	localOperational;
   14a56:	7bfb      	ldrb	r3, [r7, #15]
}
   14a58:	4618      	mov	r0, r3
   14a5a:	3710      	adds	r7, #16
   14a5c:	46bd      	mov	sp, r7
   14a5e:	bd80      	pop	{r7, pc}
   14a60:	00014b01 	.word	0x00014b01
   14a64:	00003625 	.word	0x00003625

00014a68 <_ZN8CO_ClassC1Ev>:
		static	int32_t             *CO_traceValueBuffers[CO_NO_TRACE];
	#endif
#endif

// default constructor
CO_Class::CO_Class()
   14a68:	b580      	push	{r7, lr}
   14a6a:	b082      	sub	sp, #8
   14a6c:	af00      	add	r7, sp, #0
   14a6e:	6078      	str	r0, [r7, #4]
   14a70:	687b      	ldr	r3, [r7, #4]
   14a72:	4618      	mov	r0, r3
   14a74:	4b10      	ldr	r3, [pc, #64]	; (14ab8 <_ZN8CO_ClassC1Ev+0x50>)
   14a76:	4798      	blx	r3
   14a78:	687b      	ldr	r3, [r7, #4]
   14a7a:	f503 739c 	add.w	r3, r3, #312	; 0x138
   14a7e:	4618      	mov	r0, r3
   14a80:	4b0e      	ldr	r3, [pc, #56]	; (14abc <_ZN8CO_ClassC1Ev+0x54>)
   14a82:	4798      	blx	r3
   14a84:	4a0e      	ldr	r2, [pc, #56]	; (14ac0 <_ZN8CO_ClassC1Ev+0x58>)
   14a86:	687b      	ldr	r3, [r7, #4]
   14a88:	601a      	str	r2, [r3, #0]
{
	ptrCO = CO;
   14a8a:	4b0e      	ldr	r3, [pc, #56]	; (14ac4 <_ZN8CO_ClassC1Ev+0x5c>)
   14a8c:	681a      	ldr	r2, [r3, #0]
   14a8e:	687b      	ldr	r3, [r7, #4]
   14a90:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	coCanDescr=NULL;
   14a94:	687b      	ldr	r3, [r7, #4]
   14a96:	2200      	movs	r2, #0
   14a98:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	CO_memoryUsed=sizeof(COO);
   14a9c:	687b      	ldr	r3, [r7, #4]
   14a9e:	223c      	movs	r2, #60	; 0x3c
   14aa0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	timer_next=NULL;
   14aa4:	687b      	ldr	r3, [r7, #4]
   14aa6:	2200      	movs	r2, #0
   14aa8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
} //CO_Class
   14aac:	687b      	ldr	r3, [r7, #4]
   14aae:	4618      	mov	r0, r3
   14ab0:	3708      	adds	r7, #8
   14ab2:	46bd      	mov	sp, r7
   14ab4:	bd80      	pop	{r7, pc}
   14ab6:	bf00      	nop
   14ab8:	00015461 	.word	0x00015461
   14abc:	0001644d 	.word	0x0001644d
   14ac0:	0001b110 	.word	0x0001b110
   14ac4:	2000d158 	.word	0x2000d158

00014ac8 <_ZN8CO_ClassD1Ev>:

// default destructor
CO_Class::~CO_Class()
   14ac8:	b580      	push	{r7, lr}
   14aca:	b082      	sub	sp, #8
   14acc:	af00      	add	r7, sp, #0
   14ace:	6078      	str	r0, [r7, #4]
   14ad0:	4a08      	ldr	r2, [pc, #32]	; (14af4 <_ZN8CO_ClassD1Ev+0x2c>)
   14ad2:	687b      	ldr	r3, [r7, #4]
   14ad4:	601a      	str	r2, [r3, #0]
   14ad6:	687b      	ldr	r3, [r7, #4]
   14ad8:	f503 739c 	add.w	r3, r3, #312	; 0x138
   14adc:	4618      	mov	r0, r3
   14ade:	4b06      	ldr	r3, [pc, #24]	; (14af8 <_ZN8CO_ClassD1Ev+0x30>)
   14ae0:	4798      	blx	r3
   14ae2:	687b      	ldr	r3, [r7, #4]
   14ae4:	4618      	mov	r0, r3
   14ae6:	4b05      	ldr	r3, [pc, #20]	; (14afc <_ZN8CO_ClassD1Ev+0x34>)
   14ae8:	4798      	blx	r3
{
} //~CO_Class
   14aea:	687b      	ldr	r3, [r7, #4]
   14aec:	4618      	mov	r0, r3
   14aee:	3708      	adds	r7, #8
   14af0:	46bd      	mov	sp, r7
   14af2:	bd80      	pop	{r7, pc}
   14af4:	0001b110 	.word	0x0001b110
   14af8:	00016461 	.word	0x00016461
   14afc:	000154d9 	.word	0x000154d9

00014b00 <_ZN8CO_Class17CO_sendNMTcommandEhh>:



uint8_t CO_Class::CO_sendNMTcommand( uint8_t command, uint8_t nodeID){
   14b00:	b580      	push	{r7, lr}
   14b02:	b082      	sub	sp, #8
   14b04:	af00      	add	r7, sp, #0
   14b06:	6078      	str	r0, [r7, #4]
   14b08:	460b      	mov	r3, r1
   14b0a:	70fb      	strb	r3, [r7, #3]
   14b0c:	4613      	mov	r3, r2
   14b0e:	70bb      	strb	r3, [r7, #2]
	if(NMTM_txBuff == 0){
   14b10:	687b      	ldr	r3, [r7, #4]
   14b12:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   14b16:	2b00      	cmp	r3, #0
   14b18:	d101      	bne.n	14b1e <_ZN8CO_Class17CO_sendNMTcommandEhh+0x1e>
		/* error, CO_CANtxBufferInit() was not called for this buffer. */
		return CO_ERROR_TX_UNCONFIGURED; /* -11 */
   14b1a:	23f5      	movs	r3, #245	; 0xf5
   14b1c:	e053      	b.n	14bc6 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xc6>
	}
	NMTM_txBuff->data[0] = command;
   14b1e:	687b      	ldr	r3, [r7, #4]
   14b20:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   14b24:	78fa      	ldrb	r2, [r7, #3]
   14b26:	715a      	strb	r2, [r3, #5]
	NMTM_txBuff->data[1] = nodeID;
   14b28:	687b      	ldr	r3, [r7, #4]
   14b2a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   14b2e:	78ba      	ldrb	r2, [r7, #2]
   14b30:	719a      	strb	r2, [r3, #6]

	/* Apply NMT command also to this node, if set so. */
	if(nodeID == 0 || nodeID == CO->NMT->nodeId){
   14b32:	78bb      	ldrb	r3, [r7, #2]
   14b34:	2b00      	cmp	r3, #0
   14b36:	d006      	beq.n	14b46 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x46>
   14b38:	4b25      	ldr	r3, [pc, #148]	; (14bd0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14b3a:	681b      	ldr	r3, [r3, #0]
   14b3c:	691b      	ldr	r3, [r3, #16]
   14b3e:	7a9b      	ldrb	r3, [r3, #10]
   14b40:	78ba      	ldrb	r2, [r7, #2]
   14b42:	429a      	cmp	r2, r3
   14b44:	d135      	bne.n	14bb2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
		switch(command){
   14b46:	78fb      	ldrb	r3, [r7, #3]
   14b48:	2b80      	cmp	r3, #128	; 0x80
   14b4a:	d01f      	beq.n	14b8c <_ZN8CO_Class17CO_sendNMTcommandEhh+0x8c>
   14b4c:	2b80      	cmp	r3, #128	; 0x80
   14b4e:	dc04      	bgt.n	14b5a <_ZN8CO_Class17CO_sendNMTcommandEhh+0x5a>
   14b50:	2b01      	cmp	r3, #1
   14b52:	d007      	beq.n	14b64 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x64>
   14b54:	2b02      	cmp	r3, #2
   14b56:	d013      	beq.n	14b80 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x80>
   14b58:	e02b      	b.n	14bb2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
   14b5a:	2b81      	cmp	r3, #129	; 0x81
   14b5c:	d01c      	beq.n	14b98 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x98>
   14b5e:	2b82      	cmp	r3, #130	; 0x82
   14b60:	d020      	beq.n	14ba4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xa4>
   14b62:	e026      	b.n	14bb2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_OPERATIONAL:
			if((*CO->NMT->emPr->errorRegister) == 0) {
   14b64:	4b1a      	ldr	r3, [pc, #104]	; (14bd0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14b66:	681b      	ldr	r3, [r3, #0]
   14b68:	691b      	ldr	r3, [r3, #16]
   14b6a:	695b      	ldr	r3, [r3, #20]
   14b6c:	681b      	ldr	r3, [r3, #0]
   14b6e:	781b      	ldrb	r3, [r3, #0]
   14b70:	2b00      	cmp	r3, #0
   14b72:	d11d      	bne.n	14bb0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
				CO->NMT->operatingState = CO_NMT_OPERATIONAL;
   14b74:	4b16      	ldr	r3, [pc, #88]	; (14bd0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14b76:	681b      	ldr	r3, [r3, #0]
   14b78:	691b      	ldr	r3, [r3, #16]
   14b7a:	2205      	movs	r2, #5
   14b7c:	701a      	strb	r2, [r3, #0]
			}
			break;
   14b7e:	e017      	b.n	14bb0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
			case CO_NMT_ENTER_STOPPED:
			CO->NMT->operatingState = CO_NMT_STOPPED;
   14b80:	4b13      	ldr	r3, [pc, #76]	; (14bd0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14b82:	681b      	ldr	r3, [r3, #0]
   14b84:	691b      	ldr	r3, [r3, #16]
   14b86:	2204      	movs	r2, #4
   14b88:	701a      	strb	r2, [r3, #0]
			break;
   14b8a:	e012      	b.n	14bb2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_PRE_OPERATIONAL:
			CO->NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
   14b8c:	4b10      	ldr	r3, [pc, #64]	; (14bd0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14b8e:	681b      	ldr	r3, [r3, #0]
   14b90:	691b      	ldr	r3, [r3, #16]
   14b92:	227f      	movs	r2, #127	; 0x7f
   14b94:	701a      	strb	r2, [r3, #0]
			break;
   14b96:	e00c      	b.n	14bb2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_NODE:
			CO->NMT->resetCommand = CO_RESET_APP;
   14b98:	4b0d      	ldr	r3, [pc, #52]	; (14bd0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14b9a:	681b      	ldr	r3, [r3, #0]
   14b9c:	691b      	ldr	r3, [r3, #16]
   14b9e:	2202      	movs	r2, #2
   14ba0:	725a      	strb	r2, [r3, #9]
			break;
   14ba2:	e006      	b.n	14bb2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_COMMUNICATION:
			CO->NMT->resetCommand = CO_RESET_COMM;
   14ba4:	4b0a      	ldr	r3, [pc, #40]	; (14bd0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14ba6:	681b      	ldr	r3, [r3, #0]
   14ba8:	691b      	ldr	r3, [r3, #16]
   14baa:	2201      	movs	r2, #1
   14bac:	725a      	strb	r2, [r3, #9]
			break;
   14bae:	e000      	b.n	14bb2 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			break;
   14bb0:	bf00      	nop
		}
	}

	return CAN_Send( NMTM_txBuff); /* 0 = success */
   14bb2:	687a      	ldr	r2, [r7, #4]
   14bb4:	687b      	ldr	r3, [r7, #4]
   14bb6:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   14bba:	4619      	mov	r1, r3
   14bbc:	4610      	mov	r0, r2
   14bbe:	4b05      	ldr	r3, [pc, #20]	; (14bd4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd4>)
   14bc0:	4798      	blx	r3
   14bc2:	4603      	mov	r3, r0
   14bc4:	b2db      	uxtb	r3, r3
}
   14bc6:	4618      	mov	r0, r3
   14bc8:	3708      	adds	r7, #8
   14bca:	46bd      	mov	sp, r7
   14bcc:	bd80      	pop	{r7, pc}
   14bce:	bf00      	nop
   14bd0:	2000d158 	.word	0x2000d158
   14bd4:	0001596d 	.word	0x0001596d

00014bd8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm>:
/******************************************************************************/
CO_ReturnError_t CO_Class::CO_init(
can_async_descriptor   *CANbaseAddress,
uint8_t                 nodeId,
uint32_t                bitRate)
{
   14bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14bda:	b099      	sub	sp, #100	; 0x64
   14bdc:	af0c      	add	r7, sp, #48	; 0x30
   14bde:	61f8      	str	r0, [r7, #28]
   14be0:	61b9      	str	r1, [r7, #24]
   14be2:	613b      	str	r3, [r7, #16]
   14be4:	4613      	mov	r3, r2
   14be6:	75fb      	strb	r3, [r7, #23]
	coCanDescr=CANbaseAddress;
   14be8:	69fb      	ldr	r3, [r7, #28]
   14bea:	69ba      	ldr	r2, [r7, #24]
   14bec:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	coNode=nodeId;
   14bf0:	69fb      	ldr	r3, [r7, #28]
   14bf2:	7dfa      	ldrb	r2, [r7, #23]
   14bf4:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	#endif


	/* Initialize CANopen object */
	#ifdef CO_USE_GLOBALS
		CO = &COO;
   14bf8:	4ba3      	ldr	r3, [pc, #652]	; (14e88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14bfa:	4aa4      	ldr	r2, [pc, #656]	; (14e8c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b4>)
   14bfc:	601a      	str	r2, [r3, #0]

		CO->CANmodule[0]                    = &COO_CANmodule;
   14bfe:	4ba2      	ldr	r3, [pc, #648]	; (14e88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14c00:	681b      	ldr	r3, [r3, #0]
   14c02:	4aa3      	ldr	r2, [pc, #652]	; (14e90 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b8>)
   14c04:	601a      	str	r2, [r3, #0]
		CO_CANmodule_rxArray0               = &COO_CANmodule_rxArray0[0];
   14c06:	4ba3      	ldr	r3, [pc, #652]	; (14e94 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
   14c08:	4aa3      	ldr	r2, [pc, #652]	; (14e98 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c0>)
   14c0a:	601a      	str	r2, [r3, #0]
		CO_CANmodule_txArray0               = &COO_CANmodule_txArray0[0];
   14c0c:	4ba3      	ldr	r3, [pc, #652]	; (14e9c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
   14c0e:	4aa4      	ldr	r2, [pc, #656]	; (14ea0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c8>)
   14c10:	601a      	str	r2, [r3, #0]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
   14c12:	69fb      	ldr	r3, [r7, #28]
   14c14:	2200      	movs	r2, #0
   14c16:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   14c1a:	69fb      	ldr	r3, [r7, #28]
   14c1c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14c20:	2b00      	cmp	r3, #0
   14c22:	d118      	bne.n	14c56 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7e>
			CO->SDO[i]                      = &COO_SDO[i];
   14c24:	4b98      	ldr	r3, [pc, #608]	; (14e88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14c26:	6819      	ldr	r1, [r3, #0]
   14c28:	69fb      	ldr	r3, [r7, #28]
   14c2a:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
   14c2e:	69fb      	ldr	r3, [r7, #28]
   14c30:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   14c34:	4613      	mov	r3, r2
   14c36:	011b      	lsls	r3, r3, #4
   14c38:	4413      	add	r3, r2
   14c3a:	00db      	lsls	r3, r3, #3
   14c3c:	4a99      	ldr	r2, [pc, #612]	; (14ea4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2cc>)
   14c3e:	441a      	add	r2, r3
   14c40:	0083      	lsls	r3, r0, #2
   14c42:	440b      	add	r3, r1
   14c44:	605a      	str	r2, [r3, #4]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
   14c46:	69fb      	ldr	r3, [r7, #28]
   14c48:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14c4c:	1c5a      	adds	r2, r3, #1
   14c4e:	69fb      	ldr	r3, [r7, #28]
   14c50:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   14c54:	e7e1      	b.n	14c1a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x42>
		}

		CO_SDO_ODExtensions                 = &COO_SDO_ODExtensions[0];
   14c56:	4b94      	ldr	r3, [pc, #592]	; (14ea8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
   14c58:	4a94      	ldr	r2, [pc, #592]	; (14eac <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d4>)
   14c5a:	601a      	str	r2, [r3, #0]
		CO->em                              = &COO_EM;
   14c5c:	4b8a      	ldr	r3, [pc, #552]	; (14e88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14c5e:	681b      	ldr	r3, [r3, #0]
   14c60:	4a93      	ldr	r2, [pc, #588]	; (14eb0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d8>)
   14c62:	609a      	str	r2, [r3, #8]
		CO->emPr                            = &COO_EMpr;
   14c64:	4b88      	ldr	r3, [pc, #544]	; (14e88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14c66:	681b      	ldr	r3, [r3, #0]
   14c68:	4a92      	ldr	r2, [pc, #584]	; (14eb4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2dc>)
   14c6a:	60da      	str	r2, [r3, #12]
		CO->NMT                             = &COO_NMT;
   14c6c:	4b86      	ldr	r3, [pc, #536]	; (14e88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14c6e:	681b      	ldr	r3, [r3, #0]
   14c70:	4a91      	ldr	r2, [pc, #580]	; (14eb8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e0>)
   14c72:	611a      	str	r2, [r3, #16]
		CO->SYNC                            = &COO_SYNC;
   14c74:	4b84      	ldr	r3, [pc, #528]	; (14e88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14c76:	681b      	ldr	r3, [r3, #0]
   14c78:	4a90      	ldr	r2, [pc, #576]	; (14ebc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e4>)
   14c7a:	615a      	str	r2, [r3, #20]
		for(i=0; i<CO_NO_RPDO; i++){
   14c7c:	69fb      	ldr	r3, [r7, #28]
   14c7e:	2200      	movs	r2, #0
   14c80:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   14c84:	69fb      	ldr	r3, [r7, #28]
   14c86:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14c8a:	2b03      	cmp	r3, #3
   14c8c:	d818      	bhi.n	14cc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xe8>
			CO->RPDO[i]                     = &COO_RPDO[i];
   14c8e:	4b7e      	ldr	r3, [pc, #504]	; (14e88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14c90:	6819      	ldr	r1, [r3, #0]
   14c92:	69fb      	ldr	r3, [r7, #28]
   14c94:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
   14c98:	69fb      	ldr	r3, [r7, #28]
   14c9a:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   14c9e:	4613      	mov	r3, r2
   14ca0:	005b      	lsls	r3, r3, #1
   14ca2:	4413      	add	r3, r2
   14ca4:	015b      	lsls	r3, r3, #5
   14ca6:	4a86      	ldr	r2, [pc, #536]	; (14ec0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e8>)
   14ca8:	441a      	add	r2, r3
   14caa:	1d83      	adds	r3, r0, #6
   14cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i=0; i<CO_NO_RPDO; i++){
   14cb0:	69fb      	ldr	r3, [r7, #28]
   14cb2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14cb6:	1c5a      	adds	r2, r3, #1
   14cb8:	69fb      	ldr	r3, [r7, #28]
   14cba:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   14cbe:	e7e1      	b.n	14c84 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xac>
		}
		for(i=0; i<CO_NO_TPDO; i++){
   14cc0:	69fb      	ldr	r3, [r7, #28]
   14cc2:	2200      	movs	r2, #0
   14cc4:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   14cc8:	69fb      	ldr	r3, [r7, #28]
   14cca:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14cce:	2b03      	cmp	r3, #3
   14cd0:	d817      	bhi.n	14d02 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x12a>
			CO->TPDO[i]                     = &COO_TPDO[i];
   14cd2:	4b6d      	ldr	r3, [pc, #436]	; (14e88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14cd4:	681b      	ldr	r3, [r3, #0]
   14cd6:	69fa      	ldr	r2, [r7, #28]
   14cd8:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
   14cdc:	69f9      	ldr	r1, [r7, #28]
   14cde:	f8d1 1154 	ldr.w	r1, [r1, #340]	; 0x154
   14ce2:	2058      	movs	r0, #88	; 0x58
   14ce4:	fb00 f101 	mul.w	r1, r0, r1
   14ce8:	4876      	ldr	r0, [pc, #472]	; (14ec4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2ec>)
   14cea:	4401      	add	r1, r0
   14cec:	320a      	adds	r2, #10
   14cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(i=0; i<CO_NO_TPDO; i++){
   14cf2:	69fb      	ldr	r3, [r7, #28]
   14cf4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14cf8:	1c5a      	adds	r2, r3, #1
   14cfa:	69fb      	ldr	r3, [r7, #28]
   14cfc:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   14d00:	e7e2      	b.n	14cc8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xf0>
		}
		
		CO->HBcons                          = &COO_HBcons;
   14d02:	4b61      	ldr	r3, [pc, #388]	; (14e88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14d04:	681b      	ldr	r3, [r3, #0]
   14d06:	4a70      	ldr	r2, [pc, #448]	; (14ec8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f0>)
   14d08:	639a      	str	r2, [r3, #56]	; 0x38
		CO_HBcons_monitoredNodes            = &COO_HBcons_monitoredNodes[0];
   14d0a:	4b70      	ldr	r3, [pc, #448]	; (14ecc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f4>)
   14d0c:	4a70      	ldr	r2, [pc, #448]	; (14ed0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f8>)
   14d0e:	601a      	str	r2, [r3, #0]

	if(errCnt != 0) return CO_ERROR_OUT_OF_MEMORY;
	#endif


	CO->CANmodule[0]->CANnormal = false;
   14d10:	4b5d      	ldr	r3, [pc, #372]	; (14e88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14d12:	681b      	ldr	r3, [r3, #0]
   14d14:	681b      	ldr	r3, [r3, #0]
   14d16:	2200      	movs	r2, #0
   14d18:	751a      	strb	r2, [r3, #20]
	CO_CANsetConfigurationMode(coCanDescr);
   14d1a:	69fa      	ldr	r2, [r7, #28]
   14d1c:	69fb      	ldr	r3, [r7, #28]
   14d1e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
   14d22:	4619      	mov	r1, r3
   14d24:	4610      	mov	r0, r2
   14d26:	4b6b      	ldr	r3, [pc, #428]	; (14ed4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2fc>)
   14d28:	4798      	blx	r3

	/* Verify CANopen Node-ID */
	if(nodeId<1 || nodeId>127)
   14d2a:	7dfb      	ldrb	r3, [r7, #23]
   14d2c:	2b00      	cmp	r3, #0
   14d2e:	dd02      	ble.n	14d36 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x15e>
   14d30:	7dfb      	ldrb	r3, [r7, #23]
   14d32:	2b7f      	cmp	r3, #127	; 0x7f
   14d34:	dd05      	ble.n	14d42 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x16a>
	{
		CO_delete();
   14d36:	69f8      	ldr	r0, [r7, #28]
   14d38:	4b67      	ldr	r3, [pc, #412]	; (14ed8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
   14d3a:	4798      	blx	r3
		return CO_ERROR_PARAMETERS;
   14d3c:	f06f 030b 	mvn.w	r3, #11
   14d40:	e2fc      	b.n	1533c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	}


	err = CANmodule_init(
   14d42:	69f8      	ldr	r0, [r7, #28]
   14d44:	4b50      	ldr	r3, [pc, #320]	; (14e88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14d46:	681b      	ldr	r3, [r3, #0]
   14d48:	6819      	ldr	r1, [r3, #0]
   14d4a:	69fb      	ldr	r3, [r7, #28]
   14d4c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   14d50:	4b50      	ldr	r3, [pc, #320]	; (14e94 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
   14d52:	681d      	ldr	r5, [r3, #0]
   14d54:	4b51      	ldr	r3, [pc, #324]	; (14e9c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
   14d56:	681b      	ldr	r3, [r3, #0]
   14d58:	693a      	ldr	r2, [r7, #16]
   14d5a:	9203      	str	r2, [sp, #12]
   14d5c:	2209      	movs	r2, #9
   14d5e:	9202      	str	r2, [sp, #8]
   14d60:	9301      	str	r3, [sp, #4]
   14d62:	230b      	movs	r3, #11
   14d64:	9300      	str	r3, [sp, #0]
   14d66:	462b      	mov	r3, r5
   14d68:	4622      	mov	r2, r4
   14d6a:	4c5c      	ldr	r4, [pc, #368]	; (14edc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x304>)
   14d6c:	47a0      	blx	r4
   14d6e:	4603      	mov	r3, r0
   14d70:	461a      	mov	r2, r3
   14d72:	69fb      	ldr	r3, [r7, #28]
   14d74:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	CO_RXCAN_NO_MSGS,
	CO_CANmodule_txArray0,
	CO_TXCAN_NO_MSGS,
	bitRate);

	if(err){CO_delete(); return err;}
   14d78:	69fb      	ldr	r3, [r7, #28]
   14d7a:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   14d7e:	2b00      	cmp	r3, #0
   14d80:	d006      	beq.n	14d90 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1b8>
   14d82:	69f8      	ldr	r0, [r7, #28]
   14d84:	4b54      	ldr	r3, [pc, #336]	; (14ed8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
   14d86:	4798      	blx	r3
   14d88:	69fb      	ldr	r3, [r7, #28]
   14d8a:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   14d8e:	e2d5      	b.n	1533c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>

	for (i=0; i<CO_NO_SDO_SERVER; i++)
   14d90:	69fb      	ldr	r3, [r7, #28]
   14d92:	2200      	movs	r2, #0
   14d94:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   14d98:	69fb      	ldr	r3, [r7, #28]
   14d9a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14d9e:	2b00      	cmp	r3, #0
   14da0:	f040 80a4 	bne.w	14eec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x314>
	{
		uint32_t COB_IDClientToServer;
		uint32_t COB_IDServerToClient;
		if(i==0){
   14da4:	69fb      	ldr	r3, [r7, #28]
   14da6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14daa:	2b00      	cmp	r3, #0
   14dac:	d108      	bne.n	14dc0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1e8>
			/*Default SDO server must be located at first index*/
			COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
   14dae:	7dfb      	ldrb	r3, [r7, #23]
   14db0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
   14db4:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = CO_CAN_ID_TSDO + nodeId;
   14db6:	7dfb      	ldrb	r3, [r7, #23]
   14db8:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
   14dbc:	62bb      	str	r3, [r7, #40]	; 0x28
   14dbe:	e017      	b.n	14df0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x218>
			}else{
			COB_IDClientToServer = OD_SDOServerParameter[i].COB_IDClientToServer;
   14dc0:	69fb      	ldr	r3, [r7, #28]
   14dc2:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   14dc6:	4946      	ldr	r1, [pc, #280]	; (14ee0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
   14dc8:	4613      	mov	r3, r2
   14dca:	005b      	lsls	r3, r3, #1
   14dcc:	4413      	add	r3, r2
   14dce:	009b      	lsls	r3, r3, #2
   14dd0:	440b      	add	r3, r1
   14dd2:	3364      	adds	r3, #100	; 0x64
   14dd4:	681b      	ldr	r3, [r3, #0]
   14dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = OD_SDOServerParameter[i].COB_IDServerToClient;
   14dd8:	69fb      	ldr	r3, [r7, #28]
   14dda:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   14dde:	4940      	ldr	r1, [pc, #256]	; (14ee0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
   14de0:	4613      	mov	r3, r2
   14de2:	005b      	lsls	r3, r3, #1
   14de4:	4413      	add	r3, r2
   14de6:	009b      	lsls	r3, r3, #2
   14de8:	440b      	add	r3, r1
   14dea:	3368      	adds	r3, #104	; 0x68
   14dec:	681b      	ldr	r3, [r3, #0]
   14dee:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		err = CO_SDO_init(
   14df0:	69fb      	ldr	r3, [r7, #28]
   14df2:	f103 0e04 	add.w	lr, r3, #4
   14df6:	4b24      	ldr	r3, [pc, #144]	; (14e88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14df8:	681a      	ldr	r2, [r3, #0]
			CO->SDO[i],
   14dfa:	69fb      	ldr	r3, [r7, #28]
   14dfc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
		err = CO_SDO_init(
   14e00:	009b      	lsls	r3, r3, #2
   14e02:	4413      	add	r3, r2
   14e04:	685b      	ldr	r3, [r3, #4]
   14e06:	60fb      	str	r3, [r7, #12]
			COB_IDClientToServer,
			COB_IDServerToClient,
			OD_H1200_SDO_SERVER_PARAM+i,
   14e08:	69fb      	ldr	r3, [r7, #28]
   14e0a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
		err = CO_SDO_init(
   14e0e:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
			i==0 ? 0 : CO->SDO[0],
   14e12:	69fb      	ldr	r3, [r7, #28]
   14e14:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
		err = CO_SDO_init(
   14e18:	2b00      	cmp	r3, #0
   14e1a:	d003      	beq.n	14e24 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24c>
			i==0 ? 0 : CO->SDO[0],
   14e1c:	4b1a      	ldr	r3, [pc, #104]	; (14e88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14e1e:	681b      	ldr	r3, [r3, #0]
		err = CO_SDO_init(
   14e20:	685b      	ldr	r3, [r3, #4]
   14e22:	e000      	b.n	14e26 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24e>
   14e24:	2300      	movs	r3, #0
   14e26:	4920      	ldr	r1, [pc, #128]	; (14ea8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
   14e28:	6809      	ldr	r1, [r1, #0]
   14e2a:	4817      	ldr	r0, [pc, #92]	; (14e88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14e2c:	6800      	ldr	r0, [r0, #0]
   14e2e:	6800      	ldr	r0, [r0, #0]
			&CO_ObjDict[0],
			CO_OD_NoOfElements,
			CO_SDO_ODExtensions,
			nodeId,
			CO->CANmodule[0],
			CO_RXCAN_SDO_SRV+i,
   14e30:	69fc      	ldr	r4, [r7, #28]
   14e32:	f8d4 4154 	ldr.w	r4, [r4, #340]	; 0x154
		err = CO_SDO_init(
   14e36:	3406      	adds	r4, #6
   14e38:	4d13      	ldr	r5, [pc, #76]	; (14e88 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14e3a:	682d      	ldr	r5, [r5, #0]
   14e3c:	682d      	ldr	r5, [r5, #0]
			CO->CANmodule[0],
			CO_TXCAN_SDO_SRV+i);
   14e3e:	69fe      	ldr	r6, [r7, #28]
   14e40:	f8d6 6154 	ldr.w	r6, [r6, #340]	; 0x154
		err = CO_SDO_init(
   14e44:	3607      	adds	r6, #7
   14e46:	9609      	str	r6, [sp, #36]	; 0x24
   14e48:	9508      	str	r5, [sp, #32]
   14e4a:	9407      	str	r4, [sp, #28]
   14e4c:	9006      	str	r0, [sp, #24]
   14e4e:	7df8      	ldrb	r0, [r7, #23]
   14e50:	9005      	str	r0, [sp, #20]
   14e52:	9104      	str	r1, [sp, #16]
   14e54:	2137      	movs	r1, #55	; 0x37
   14e56:	9103      	str	r1, [sp, #12]
   14e58:	4922      	ldr	r1, [pc, #136]	; (14ee4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x30c>)
   14e5a:	9102      	str	r1, [sp, #8]
   14e5c:	9301      	str	r3, [sp, #4]
   14e5e:	9200      	str	r2, [sp, #0]
   14e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   14e64:	68f9      	ldr	r1, [r7, #12]
   14e66:	4670      	mov	r0, lr
   14e68:	4c1f      	ldr	r4, [pc, #124]	; (14ee8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x310>)
   14e6a:	47a0      	blx	r4
   14e6c:	4603      	mov	r3, r0
   14e6e:	461a      	mov	r2, r3
   14e70:	69fb      	ldr	r3, [r7, #28]
   14e72:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	for (i=0; i<CO_NO_SDO_SERVER; i++)
   14e76:	69fb      	ldr	r3, [r7, #28]
   14e78:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14e7c:	1c5a      	adds	r2, r3, #1
   14e7e:	69fb      	ldr	r3, [r7, #28]
   14e80:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   14e84:	e788      	b.n	14d98 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1c0>
   14e86:	bf00      	nop
   14e88:	2000d158 	.word	0x2000d158
   14e8c:	2000d11c 	.word	0x2000d11c
   14e90:	2000d16c 	.word	0x2000d16c
   14e94:	2000d15c 	.word	0x2000d15c
   14e98:	2000d190 	.word	0x2000d190
   14e9c:	2000d160 	.word	0x2000d160
   14ea0:	2000d240 	.word	0x2000d240
   14ea4:	2000d2d0 	.word	0x2000d2d0
   14ea8:	2000d164 	.word	0x2000d164
   14eac:	2000d358 	.word	0x2000d358
   14eb0:	2000d5ec 	.word	0x2000d5ec
   14eb4:	2000d658 	.word	0x2000d658
   14eb8:	2000d674 	.word	0x2000d674
   14ebc:	2000d698 	.word	0x2000d698
   14ec0:	2000d6d4 	.word	0x2000d6d4
   14ec4:	2000d854 	.word	0x2000d854
   14ec8:	2000d9b4 	.word	0x2000d9b4
   14ecc:	2000d168 	.word	0x2000d168
   14ed0:	2000d9cc 	.word	0x2000d9cc
   14ed4:	000155cd 	.word	0x000155cd
   14ed8:	00015369 	.word	0x00015369
   14edc:	00015631 	.word	0x00015631
   14ee0:	2000039c 	.word	0x2000039c
   14ee4:	0001b738 	.word	0x0001b738
   14ee8:	00017629 	.word	0x00017629
	}

	if(err){CO_delete(); return err;}
   14eec:	69fb      	ldr	r3, [r7, #28]
   14eee:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   14ef2:	2b00      	cmp	r3, #0
   14ef4:	d006      	beq.n	14f04 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x32c>
   14ef6:	69f8      	ldr	r0, [r7, #28]
   14ef8:	4b7c      	ldr	r3, [pc, #496]	; (150ec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
   14efa:	4798      	blx	r3
   14efc:	69fb      	ldr	r3, [r7, #28]
   14efe:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   14f02:	e21b      	b.n	1533c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	err = EM_Init(
   14f04:	69fb      	ldr	r3, [r7, #28]
   14f06:	1d18      	adds	r0, r3, #4
   14f08:	4b79      	ldr	r3, [pc, #484]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14f0a:	681b      	ldr	r3, [r3, #0]
   14f0c:	6899      	ldr	r1, [r3, #8]
   14f0e:	4b78      	ldr	r3, [pc, #480]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14f10:	681b      	ldr	r3, [r3, #0]
   14f12:	68dc      	ldr	r4, [r3, #12]
   14f14:	4b76      	ldr	r3, [pc, #472]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14f16:	681b      	ldr	r3, [r3, #0]
   14f18:	685d      	ldr	r5, [r3, #4]
   14f1a:	4b75      	ldr	r3, [pc, #468]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14f1c:	681b      	ldr	r3, [r3, #0]
   14f1e:	681b      	ldr	r3, [r3, #0]
			&OD_errorRegister,
			&OD_preDefinedErrorField[0],
			ODL_preDefinedErrorField_arrayLength,
			CO->CANmodule[0],
			CO_TXCAN_EMERG,
			CO_CAN_ID_EMERGENCY + (uint32_t)nodeId);
   14f20:	7dfa      	ldrb	r2, [r7, #23]
	err = EM_Init(
   14f22:	3280      	adds	r2, #128	; 0x80
   14f24:	9207      	str	r2, [sp, #28]
   14f26:	2202      	movs	r2, #2
   14f28:	9206      	str	r2, [sp, #24]
   14f2a:	9305      	str	r3, [sp, #20]
   14f2c:	2308      	movs	r3, #8
   14f2e:	9304      	str	r3, [sp, #16]
   14f30:	4b70      	ldr	r3, [pc, #448]	; (150f4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
   14f32:	9303      	str	r3, [sp, #12]
   14f34:	4b70      	ldr	r3, [pc, #448]	; (150f8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x520>)
   14f36:	9302      	str	r3, [sp, #8]
   14f38:	230a      	movs	r3, #10
   14f3a:	9301      	str	r3, [sp, #4]
   14f3c:	4b6f      	ldr	r3, [pc, #444]	; (150fc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x524>)
   14f3e:	9300      	str	r3, [sp, #0]
   14f40:	462b      	mov	r3, r5
   14f42:	4622      	mov	r2, r4
   14f44:	4c6e      	ldr	r4, [pc, #440]	; (15100 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x528>)
   14f46:	47a0      	blx	r4
   14f48:	4603      	mov	r3, r0
   14f4a:	461a      	mov	r2, r3
   14f4c:	69fb      	ldr	r3, [r7, #28]
   14f4e:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158

	if(err){CO_delete(); return err;}
   14f52:	69fb      	ldr	r3, [r7, #28]
   14f54:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   14f58:	2b00      	cmp	r3, #0
   14f5a:	d006      	beq.n	14f6a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x392>
   14f5c:	69f8      	ldr	r0, [r7, #28]
   14f5e:	4b63      	ldr	r3, [pc, #396]	; (150ec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
   14f60:	4798      	blx	r3
   14f62:	69fb      	ldr	r3, [r7, #28]
   14f64:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   14f68:	e1e8      	b.n	1533c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	err = NMT_Init(
   14f6a:	4b61      	ldr	r3, [pc, #388]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14f6c:	681b      	ldr	r3, [r3, #0]
   14f6e:	6918      	ldr	r0, [r3, #16]
   14f70:	4b5f      	ldr	r3, [pc, #380]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14f72:	681b      	ldr	r3, [r3, #0]
   14f74:	68dc      	ldr	r4, [r3, #12]
   14f76:	4b5e      	ldr	r3, [pc, #376]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14f78:	681b      	ldr	r3, [r3, #0]
   14f7a:	681b      	ldr	r3, [r3, #0]
   14f7c:	4a5c      	ldr	r2, [pc, #368]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14f7e:	6812      	ldr	r2, [r2, #0]
   14f80:	6812      	ldr	r2, [r2, #0]
	CO->CANmodule[0],
	CO_RXCAN_NMT,
	CO_CAN_ID_NMT_SERVICE,
	CO->CANmodule[0],
	CO_TXCAN_HB,
	CO_CAN_ID_HEARTBEAT + nodeId);
   14f82:	7df9      	ldrb	r1, [r7, #23]
   14f84:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
	err = NMT_Init(
   14f88:	7dfd      	ldrb	r5, [r7, #23]
   14f8a:	9106      	str	r1, [sp, #24]
   14f8c:	2108      	movs	r1, #8
   14f8e:	9105      	str	r1, [sp, #20]
   14f90:	9204      	str	r2, [sp, #16]
   14f92:	2200      	movs	r2, #0
   14f94:	9203      	str	r2, [sp, #12]
   14f96:	2200      	movs	r2, #0
   14f98:	9202      	str	r2, [sp, #8]
   14f9a:	9301      	str	r3, [sp, #4]
   14f9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   14fa0:	9300      	str	r3, [sp, #0]
   14fa2:	462b      	mov	r3, r5
   14fa4:	4622      	mov	r2, r4
   14fa6:	4601      	mov	r1, r0
   14fa8:	69f8      	ldr	r0, [r7, #28]
   14faa:	4c56      	ldr	r4, [pc, #344]	; (15104 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x52c>)
   14fac:	47a0      	blx	r4
   14fae:	4603      	mov	r3, r0
   14fb0:	461a      	mov	r2, r3
   14fb2:	69fb      	ldr	r3, [r7, #28]
   14fb4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158

	if(err){CO_delete(); return err;}
   14fb8:	69fb      	ldr	r3, [r7, #28]
   14fba:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   14fbe:	2b00      	cmp	r3, #0
   14fc0:	d006      	beq.n	14fd0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x3f8>
   14fc2:	69f8      	ldr	r0, [r7, #28]
   14fc4:	4b49      	ldr	r3, [pc, #292]	; (150ec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
   14fc6:	4798      	blx	r3
   14fc8:	69fb      	ldr	r3, [r7, #28]
   14fca:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   14fce:	e1b5      	b.n	1533c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	if (nodeId==1)
   14fd0:	7dfb      	ldrb	r3, [r7, #23]
   14fd2:	2b01      	cmp	r3, #1
   14fd4:	d10d      	bne.n	14ff2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x41a>
	{
			NMTM_txBuff = CAN_Tx_BufferInit(/* return pointer to 8-byte CAN data buffer, which should be populated */
   14fd6:	69f8      	ldr	r0, [r7, #28]
   14fd8:	2300      	movs	r3, #0
   14fda:	9301      	str	r3, [sp, #4]
   14fdc:	2302      	movs	r3, #2
   14fde:	9300      	str	r3, [sp, #0]
   14fe0:	2300      	movs	r3, #0
   14fe2:	2200      	movs	r2, #0
   14fe4:	2100      	movs	r1, #0
   14fe6:	4c48      	ldr	r4, [pc, #288]	; (15108 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x530>)
   14fe8:	47a0      	blx	r4
   14fea:	4602      	mov	r2, r0
   14fec:	69fb      	ldr	r3, [r7, #28]
   14fee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

	}else{

	}
       
	err = SYNC_Init(
   14ff2:	69fb      	ldr	r3, [r7, #28]
   14ff4:	f103 060c 	add.w	r6, r3, #12
   14ff8:	4b3d      	ldr	r3, [pc, #244]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   14ffa:	681b      	ldr	r3, [r3, #0]
   14ffc:	695b      	ldr	r3, [r3, #20]
   14ffe:	60fb      	str	r3, [r7, #12]
   15000:	4b3b      	ldr	r3, [pc, #236]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   15002:	681b      	ldr	r3, [r3, #0]
   15004:	689a      	ldr	r2, [r3, #8]
   15006:	60ba      	str	r2, [r7, #8]
   15008:	4b39      	ldr	r3, [pc, #228]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   1500a:	681b      	ldr	r3, [r3, #0]
   1500c:	6858      	ldr	r0, [r3, #4]
   1500e:	6078      	str	r0, [r7, #4]
	CO->SYNC,
	CO->em,
	CO->SDO[0],
	&CO->NMT->operatingState,
   15010:	4b37      	ldr	r3, [pc, #220]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   15012:	681b      	ldr	r3, [r3, #0]
   15014:	691b      	ldr	r3, [r3, #16]
	err = SYNC_Init(
   15016:	603b      	str	r3, [r7, #0]
   15018:	4b3c      	ldr	r3, [pc, #240]	; (1510c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
   1501a:	689b      	ldr	r3, [r3, #8]
   1501c:	4a3b      	ldr	r2, [pc, #236]	; (1510c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
   1501e:	68d2      	ldr	r2, [r2, #12]
   15020:	493a      	ldr	r1, [pc, #232]	; (1510c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
   15022:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
   15026:	4832      	ldr	r0, [pc, #200]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   15028:	6800      	ldr	r0, [r0, #0]
   1502a:	6800      	ldr	r0, [r0, #0]
   1502c:	4c30      	ldr	r4, [pc, #192]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   1502e:	6824      	ldr	r4, [r4, #0]
   15030:	6824      	ldr	r4, [r4, #0]
   15032:	2501      	movs	r5, #1
   15034:	9507      	str	r5, [sp, #28]
   15036:	9406      	str	r4, [sp, #24]
   15038:	2401      	movs	r4, #1
   1503a:	9405      	str	r4, [sp, #20]
   1503c:	9004      	str	r0, [sp, #16]
   1503e:	9103      	str	r1, [sp, #12]
   15040:	9202      	str	r2, [sp, #8]
   15042:	9301      	str	r3, [sp, #4]
   15044:	683c      	ldr	r4, [r7, #0]
   15046:	9400      	str	r4, [sp, #0]
   15048:	687b      	ldr	r3, [r7, #4]
   1504a:	68ba      	ldr	r2, [r7, #8]
   1504c:	68f9      	ldr	r1, [r7, #12]
   1504e:	4630      	mov	r0, r6
   15050:	4c2f      	ldr	r4, [pc, #188]	; (15110 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x538>)
   15052:	47a0      	blx	r4
   15054:	4603      	mov	r3, r0
   15056:	461a      	mov	r2, r3
   15058:	69fb      	ldr	r3, [r7, #28]
   1505a:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	CO->CANmodule[0],
	CO_RXCAN_SYNC,
	CO->CANmodule[0],
	CO_TXCAN_SYNC);

	if(err){CO_delete(); return err;}
   1505e:	69fb      	ldr	r3, [r7, #28]
   15060:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   15064:	2b00      	cmp	r3, #0
   15066:	d006      	beq.n	15076 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x49e>
   15068:	69f8      	ldr	r0, [r7, #28]
   1506a:	4b20      	ldr	r3, [pc, #128]	; (150ec <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
   1506c:	4798      	blx	r3
   1506e:	69fb      	ldr	r3, [r7, #28]
   15070:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   15074:	e162      	b.n	1533c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>





	for(i=0; i<CO_NO_RPDO; i++){
   15076:	69fb      	ldr	r3, [r7, #28]
   15078:	2200      	movs	r2, #0
   1507a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   1507e:	69fb      	ldr	r3, [r7, #28]
   15080:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   15084:	2b03      	cmp	r3, #3
   15086:	f200 8097 	bhi.w	151b8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5e0>
		CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
   1508a:	4b19      	ldr	r3, [pc, #100]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   1508c:	681b      	ldr	r3, [r3, #0]
   1508e:	681b      	ldr	r3, [r3, #0]
   15090:	627b      	str	r3, [r7, #36]	; 0x24
		CANdevRxIdx = CO_RXCAN_RPDO + i;
   15092:	69fb      	ldr	r3, [r7, #28]
   15094:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   15098:	1c9a      	adds	r2, r3, #2
   1509a:	69fb      	ldr	r3, [r7, #28]
   1509c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

		err = CO_RPDO_init(
   150a0:	69fb      	ldr	r3, [r7, #28]
   150a2:	f103 0e14 	add.w	lr, r3, #20
   150a6:	4b12      	ldr	r3, [pc, #72]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   150a8:	681b      	ldr	r3, [r3, #0]
		CO->RPDO[i],
   150aa:	69fa      	ldr	r2, [r7, #28]
   150ac:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
		err = CO_RPDO_init(
   150b0:	3206      	adds	r2, #6
   150b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   150b6:	60fb      	str	r3, [r7, #12]
   150b8:	4b0d      	ldr	r3, [pc, #52]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   150ba:	681b      	ldr	r3, [r3, #0]
   150bc:	689b      	ldr	r3, [r3, #8]
   150be:	60bb      	str	r3, [r7, #8]
   150c0:	4b0b      	ldr	r3, [pc, #44]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   150c2:	681b      	ldr	r3, [r3, #0]
   150c4:	685b      	ldr	r3, [r3, #4]
   150c6:	607b      	str	r3, [r7, #4]
   150c8:	4b09      	ldr	r3, [pc, #36]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   150ca:	681b      	ldr	r3, [r3, #0]
   150cc:	6958      	ldr	r0, [r3, #20]
		CO->em,
		CO->SDO[0],
		CO->SYNC,
		&CO->NMT->operatingState,
   150ce:	4b08      	ldr	r3, [pc, #32]	; (150f0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   150d0:	681b      	ldr	r3, [r3, #0]
   150d2:	691b      	ldr	r3, [r3, #16]
		err = CO_RPDO_init(
   150d4:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
   150d6:	69fb      	ldr	r3, [r7, #28]
   150d8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
		err = CO_RPDO_init(
   150dc:	2b03      	cmp	r3, #3
   150de:	d819      	bhi.n	15114 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x53c>
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
   150e0:	69fb      	ldr	r3, [r7, #28]
   150e2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
		err = CO_RPDO_init(
   150e6:	3302      	adds	r3, #2
   150e8:	021a      	lsls	r2, r3, #8
   150ea:	e014      	b.n	15116 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x53e>
   150ec:	00015369 	.word	0x00015369
   150f0:	2000d158 	.word	0x2000d158
   150f4:	2000022c 	.word	0x2000022c
   150f8:	20000224 	.word	0x20000224
   150fc:	20000254 	.word	0x20000254
   15100:	00015ce9 	.word	0x00015ce9
   15104:	0001633d 	.word	0x0001633d
   15108:	000158c1 	.word	0x000158c1
   1510c:	2000039c 	.word	0x2000039c
   15110:	00017df9 	.word	0x00017df9
   15114:	2200      	movs	r2, #0
		0,
		(CO_RPDOCommPar_t*) &OD_RPDOCommunicationParameter[i],
   15116:	69fb      	ldr	r3, [r7, #28]
   15118:	f8d3 1154 	ldr.w	r1, [r3, #340]	; 0x154
   1511c:	460b      	mov	r3, r1
   1511e:	005b      	lsls	r3, r3, #1
   15120:	440b      	add	r3, r1
   15122:	009b      	lsls	r3, r3, #2
   15124:	3368      	adds	r3, #104	; 0x68
   15126:	4987      	ldr	r1, [pc, #540]	; (15344 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
   15128:	440b      	add	r3, r1
   1512a:	1d1c      	adds	r4, r3, #4
		(CO_RPDOMapPar_t*) &OD_RPDOMappingParameter[i],
   1512c:	69fb      	ldr	r3, [r7, #28]
   1512e:	f8d3 1154 	ldr.w	r1, [r3, #340]	; 0x154
   15132:	460b      	mov	r3, r1
   15134:	00db      	lsls	r3, r3, #3
   15136:	440b      	add	r3, r1
   15138:	009b      	lsls	r3, r3, #2
   1513a:	3398      	adds	r3, #152	; 0x98
   1513c:	4981      	ldr	r1, [pc, #516]	; (15344 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
   1513e:	440b      	add	r3, r1
   15140:	3304      	adds	r3, #4
		OD_H1400_RXPDO_1_PARAM+i,
   15142:	69f9      	ldr	r1, [r7, #28]
   15144:	f8d1 1154 	ldr.w	r1, [r1, #340]	; 0x154
		err = CO_RPDO_init(
   15148:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
		OD_H1600_RXPDO_1_MAPPING+i,
   1514c:	69fd      	ldr	r5, [r7, #28]
   1514e:	f8d5 5154 	ldr.w	r5, [r5, #340]	; 0x154
		err = CO_RPDO_init(
   15152:	f505 55b0 	add.w	r5, r5, #5632	; 0x1600
   15156:	69fe      	ldr	r6, [r7, #28]
   15158:	f8d6 614c 	ldr.w	r6, [r6, #332]	; 0x14c
   1515c:	960a      	str	r6, [sp, #40]	; 0x28
   1515e:	6a7e      	ldr	r6, [r7, #36]	; 0x24
   15160:	9609      	str	r6, [sp, #36]	; 0x24
   15162:	9508      	str	r5, [sp, #32]
   15164:	9107      	str	r1, [sp, #28]
   15166:	9306      	str	r3, [sp, #24]
   15168:	9405      	str	r4, [sp, #20]
   1516a:	2300      	movs	r3, #0
   1516c:	9304      	str	r3, [sp, #16]
   1516e:	9203      	str	r2, [sp, #12]
   15170:	7dfb      	ldrb	r3, [r7, #23]
   15172:	9302      	str	r3, [sp, #8]
   15174:	683b      	ldr	r3, [r7, #0]
   15176:	9301      	str	r3, [sp, #4]
   15178:	9000      	str	r0, [sp, #0]
   1517a:	687b      	ldr	r3, [r7, #4]
   1517c:	68ba      	ldr	r2, [r7, #8]
   1517e:	68f9      	ldr	r1, [r7, #12]
   15180:	4670      	mov	r0, lr
   15182:	4c71      	ldr	r4, [pc, #452]	; (15348 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x770>)
   15184:	47a0      	blx	r4
   15186:	4603      	mov	r3, r0
   15188:	461a      	mov	r2, r3
   1518a:	69fb      	ldr	r3, [r7, #28]
   1518c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
		CANdevRx,
		CANdevRxIdx);

		if(err){CO_delete(); return err;}
   15190:	69fb      	ldr	r3, [r7, #28]
   15192:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   15196:	2b00      	cmp	r3, #0
   15198:	d006      	beq.n	151a8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5d0>
   1519a:	69f8      	ldr	r0, [r7, #28]
   1519c:	4b6b      	ldr	r3, [pc, #428]	; (1534c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
   1519e:	4798      	blx	r3
   151a0:	69fb      	ldr	r3, [r7, #28]
   151a2:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   151a6:	e0c9      	b.n	1533c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	for(i=0; i<CO_NO_RPDO; i++){
   151a8:	69fb      	ldr	r3, [r7, #28]
   151aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   151ae:	1c5a      	adds	r2, r3, #1
   151b0:	69fb      	ldr	r3, [r7, #28]
   151b2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   151b6:	e762      	b.n	1507e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x4a6>
	}


	for(i=0; i<CO_NO_TPDO; i++){
   151b8:	69fb      	ldr	r3, [r7, #28]
   151ba:	2200      	movs	r2, #0
   151bc:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   151c0:	69fb      	ldr	r3, [r7, #28]
   151c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   151c6:	2b03      	cmp	r3, #3
   151c8:	d879      	bhi.n	152be <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6e6>
		err = CO_TPDO_init(
   151ca:	69fb      	ldr	r3, [r7, #28]
   151cc:	f103 0e14 	add.w	lr, r3, #20
   151d0:	4b5f      	ldr	r3, [pc, #380]	; (15350 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   151d2:	681b      	ldr	r3, [r3, #0]
		CO->TPDO[i],
   151d4:	69fa      	ldr	r2, [r7, #28]
   151d6:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
		err = CO_TPDO_init(
   151da:	320a      	adds	r2, #10
   151dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   151e0:	60fb      	str	r3, [r7, #12]
   151e2:	4b5b      	ldr	r3, [pc, #364]	; (15350 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   151e4:	681b      	ldr	r3, [r3, #0]
   151e6:	689b      	ldr	r3, [r3, #8]
   151e8:	60bb      	str	r3, [r7, #8]
   151ea:	4b59      	ldr	r3, [pc, #356]	; (15350 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   151ec:	681b      	ldr	r3, [r3, #0]
   151ee:	685b      	ldr	r3, [r3, #4]
   151f0:	607b      	str	r3, [r7, #4]
		CO->em,
		CO->SDO[0],
		&CO->NMT->operatingState,
   151f2:	4b57      	ldr	r3, [pc, #348]	; (15350 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   151f4:	681b      	ldr	r3, [r3, #0]
   151f6:	691b      	ldr	r3, [r3, #16]
		err = CO_TPDO_init(
   151f8:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
   151fa:	69fb      	ldr	r3, [r7, #28]
   151fc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
		err = CO_TPDO_init(
   15200:	2b03      	cmp	r3, #3
   15202:	d806      	bhi.n	15212 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x63a>
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
   15204:	69fb      	ldr	r3, [r7, #28]
   15206:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   1520a:	021b      	lsls	r3, r3, #8
		err = CO_TPDO_init(
   1520c:	f503 72c0 	add.w	r2, r3, #384	; 0x180
   15210:	e000      	b.n	15214 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x63c>
   15212:	2200      	movs	r2, #0
		0,
		(CO_TPDOCommPar_t*) &OD_TPDOCommunicationParameter[i],
   15214:	69fb      	ldr	r3, [r7, #28]
   15216:	f8d3 1154 	ldr.w	r1, [r3, #340]	; 0x154
   1521a:	460b      	mov	r3, r1
   1521c:	00db      	lsls	r3, r3, #3
   1521e:	1a5b      	subs	r3, r3, r1
   15220:	009b      	lsls	r3, r3, #2
   15222:	f503 7394 	add.w	r3, r3, #296	; 0x128
   15226:	4947      	ldr	r1, [pc, #284]	; (15344 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
   15228:	440b      	add	r3, r1
   1522a:	1d18      	adds	r0, r3, #4
		(CO_TPDOMapPar_t*) &OD_TPDOMappingParameter[i],
   1522c:	69fb      	ldr	r3, [r7, #28]
   1522e:	f8d3 1154 	ldr.w	r1, [r3, #340]	; 0x154
   15232:	460b      	mov	r3, r1
   15234:	00db      	lsls	r3, r3, #3
   15236:	440b      	add	r3, r1
   15238:	009b      	lsls	r3, r3, #2
   1523a:	f503 73cc 	add.w	r3, r3, #408	; 0x198
   1523e:	4941      	ldr	r1, [pc, #260]	; (15344 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
   15240:	440b      	add	r3, r1
   15242:	3304      	adds	r3, #4
		OD_H1800_TXPDO_1_PARAM+i,
   15244:	69f9      	ldr	r1, [r7, #28]
   15246:	f8d1 1154 	ldr.w	r1, [r1, #340]	; 0x154
		err = CO_TPDO_init(
   1524a:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
		OD_H1A00_TXPDO_1_MAPPING+i,
   1524e:	69fc      	ldr	r4, [r7, #28]
   15250:	f8d4 4154 	ldr.w	r4, [r4, #340]	; 0x154
		err = CO_TPDO_init(
   15254:	f504 54d0 	add.w	r4, r4, #6656	; 0x1a00
   15258:	4d3d      	ldr	r5, [pc, #244]	; (15350 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   1525a:	682d      	ldr	r5, [r5, #0]
   1525c:	682d      	ldr	r5, [r5, #0]
		CO->CANmodule[0],
		CO_TXCAN_TPDO+i);
   1525e:	69fe      	ldr	r6, [r7, #28]
   15260:	f8d6 6154 	ldr.w	r6, [r6, #340]	; 0x154
		err = CO_TPDO_init(
   15264:	3603      	adds	r6, #3
   15266:	9609      	str	r6, [sp, #36]	; 0x24
   15268:	9508      	str	r5, [sp, #32]
   1526a:	9407      	str	r4, [sp, #28]
   1526c:	9106      	str	r1, [sp, #24]
   1526e:	9305      	str	r3, [sp, #20]
   15270:	9004      	str	r0, [sp, #16]
   15272:	2300      	movs	r3, #0
   15274:	9303      	str	r3, [sp, #12]
   15276:	9202      	str	r2, [sp, #8]
   15278:	7dfb      	ldrb	r3, [r7, #23]
   1527a:	9301      	str	r3, [sp, #4]
   1527c:	683b      	ldr	r3, [r7, #0]
   1527e:	9300      	str	r3, [sp, #0]
   15280:	687b      	ldr	r3, [r7, #4]
   15282:	68ba      	ldr	r2, [r7, #8]
   15284:	68f9      	ldr	r1, [r7, #12]
   15286:	4670      	mov	r0, lr
   15288:	4c32      	ldr	r4, [pc, #200]	; (15354 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x77c>)
   1528a:	47a0      	blx	r4
   1528c:	4603      	mov	r3, r0
   1528e:	461a      	mov	r2, r3
   15290:	69fb      	ldr	r3, [r7, #28]
   15292:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
		if(err){CO_delete(); return err;}
   15296:	69fb      	ldr	r3, [r7, #28]
   15298:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   1529c:	2b00      	cmp	r3, #0
   1529e:	d006      	beq.n	152ae <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6d6>
   152a0:	69f8      	ldr	r0, [r7, #28]
   152a2:	4b2a      	ldr	r3, [pc, #168]	; (1534c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
   152a4:	4798      	blx	r3
   152a6:	69fb      	ldr	r3, [r7, #28]
   152a8:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   152ac:	e046      	b.n	1533c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	for(i=0; i<CO_NO_TPDO; i++){
   152ae:	69fb      	ldr	r3, [r7, #28]
   152b0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   152b4:	1c5a      	adds	r2, r3, #1
   152b6:	69fb      	ldr	r3, [r7, #28]
   152b8:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
   152bc:	e780      	b.n	151c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5e8>
	}

	HB_SetNode(coNode);
   152be:	69fb      	ldr	r3, [r7, #28]
   152c0:	f103 0220 	add.w	r2, r3, #32
   152c4:	69fb      	ldr	r3, [r7, #28]
   152c6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
   152ca:	4619      	mov	r1, r3
   152cc:	4610      	mov	r0, r2
   152ce:	4b22      	ldr	r3, [pc, #136]	; (15358 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x780>)
   152d0:	4798      	blx	r3
	err = CO_HBconsumer_init(
   152d2:	69fb      	ldr	r3, [r7, #28]
   152d4:	f103 0020 	add.w	r0, r3, #32
   152d8:	4b1d      	ldr	r3, [pc, #116]	; (15350 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   152da:	681b      	ldr	r3, [r3, #0]
   152dc:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   152de:	4b1c      	ldr	r3, [pc, #112]	; (15350 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   152e0:	681b      	ldr	r3, [r3, #0]
   152e2:	689d      	ldr	r5, [r3, #8]
   152e4:	4b1a      	ldr	r3, [pc, #104]	; (15350 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   152e6:	681b      	ldr	r3, [r3, #0]
   152e8:	685e      	ldr	r6, [r3, #4]
   152ea:	4b1c      	ldr	r3, [pc, #112]	; (1535c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x784>)
   152ec:	681b      	ldr	r3, [r3, #0]
   152ee:	4a18      	ldr	r2, [pc, #96]	; (15350 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   152f0:	6812      	ldr	r2, [r2, #0]
   152f2:	6812      	ldr	r2, [r2, #0]
   152f4:	2107      	movs	r1, #7
   152f6:	9104      	str	r1, [sp, #16]
   152f8:	9203      	str	r2, [sp, #12]
   152fa:	2204      	movs	r2, #4
   152fc:	9202      	str	r2, [sp, #8]
   152fe:	9301      	str	r3, [sp, #4]
   15300:	4b17      	ldr	r3, [pc, #92]	; (15360 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x788>)
   15302:	9300      	str	r3, [sp, #0]
   15304:	4633      	mov	r3, r6
   15306:	462a      	mov	r2, r5
   15308:	4621      	mov	r1, r4
   1530a:	4c16      	ldr	r4, [pc, #88]	; (15364 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x78c>)
   1530c:	47a0      	blx	r4
   1530e:	4603      	mov	r3, r0
   15310:	461a      	mov	r2, r3
   15312:	69fb      	ldr	r3, [r7, #28]
   15314:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	CO_HBcons_monitoredNodes,
	CO_NO_HB_CONS,
	CO->CANmodule[0],
	CO_RXCAN_CONS_HB);

	if(err){CO_delete(); return err;}
   15318:	69fb      	ldr	r3, [r7, #28]
   1531a:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   1531e:	2b00      	cmp	r3, #0
   15320:	d006      	beq.n	15330 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x758>
   15322:	69f8      	ldr	r0, [r7, #28]
   15324:	4b09      	ldr	r3, [pc, #36]	; (1534c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
   15326:	4798      	blx	r3
   15328:	69fb      	ldr	r3, [r7, #28]
   1532a:	f993 3158 	ldrsb.w	r3, [r3, #344]	; 0x158
   1532e:	e005      	b.n	1533c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
		OD_INDEX_TRACE_CONFIG + i,
		OD_INDEX_TRACE + i);
	}
	#endif

	ptrCO=CO;
   15330:	4b07      	ldr	r3, [pc, #28]	; (15350 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   15332:	681a      	ldr	r2, [r3, #0]
   15334:	69fb      	ldr	r3, [r7, #28]
   15336:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	return CO_ERROR_NO;
   1533a:	2300      	movs	r3, #0
}
   1533c:	4618      	mov	r0, r3
   1533e:	3734      	adds	r7, #52	; 0x34
   15340:	46bd      	mov	sp, r7
   15342:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15344:	2000039c 	.word	0x2000039c
   15348:	00017021 	.word	0x00017021
   1534c:	00015369 	.word	0x00015369
   15350:	2000d158 	.word	0x2000d158
   15354:	00017129 	.word	0x00017129
   15358:	00016245 	.word	0x00016245
   1535c:	2000d168 	.word	0x2000d168
   15360:	200003cc 	.word	0x200003cc
   15364:	00016175 	.word	0x00016175

00015368 <_ZN8CO_Class9CO_deleteEv>:


/******************************************************************************/
void CO_Class::CO_delete(void){
   15368:	b580      	push	{r7, lr}
   1536a:	b082      	sub	sp, #8
   1536c:	af00      	add	r7, sp, #0
   1536e:	6078      	str	r0, [r7, #4]
	#ifndef CO_USE_GLOBALS
	uint32_t i;
	#endif

	CO_CANsetConfigurationMode(coCanDescr);
   15370:	687a      	ldr	r2, [r7, #4]
   15372:	687b      	ldr	r3, [r7, #4]
   15374:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
   15378:	4619      	mov	r1, r3
   1537a:	4610      	mov	r0, r2
   1537c:	4b04      	ldr	r3, [pc, #16]	; (15390 <_ZN8CO_Class9CO_deleteEv+0x28>)
   1537e:	4798      	blx	r3
	CANmodule_Disable();
   15380:	687b      	ldr	r3, [r7, #4]
   15382:	4618      	mov	r0, r3
   15384:	4b03      	ldr	r3, [pc, #12]	; (15394 <_ZN8CO_Class9CO_deleteEv+0x2c>)
   15386:	4798      	blx	r3
		free(CO_CANmodule_txArray0);
		free(CO_CANmodule_rxArray0);
		free(CO->CANmodule[0]);
		CO = NULL;
	#endif
}
   15388:	bf00      	nop
   1538a:	3708      	adds	r7, #8
   1538c:	46bd      	mov	sp, r7
   1538e:	bd80      	pop	{r7, pc}
   15390:	000155cd 	.word	0x000155cd
   15394:	00015789 	.word	0x00015789

00015398 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
   15398:	b480      	push	{r7}
   1539a:	b083      	sub	sp, #12
   1539c:	af00      	add	r7, sp, #0
   1539e:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
   153a0:	687b      	ldr	r3, [r7, #4]
   153a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
   153a4:	4618      	mov	r0, r3
   153a6:	370c      	adds	r7, #12
   153a8:	46bd      	mov	sp, r7
   153aa:	bc80      	pop	{r7}
   153ac:	4770      	bx	lr
	...

000153b0 <_ZL14CO_rx_callbackP20can_async_descriptor>:

CO_Driver_Class		*canopen_driver;


static void CO_rx_callback(struct can_async_descriptor *const descr)
{
   153b0:	b580      	push	{r7, lr}
   153b2:	b082      	sub	sp, #8
   153b4:	af00      	add	r7, sp, #0
   153b6:	6078      	str	r0, [r7, #4]
	canopen_driver->receivedCOMsg.data=canopen_driver->co_rx_buffer_64;
   153b8:	4b12      	ldr	r3, [pc, #72]	; (15404 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   153ba:	681b      	ldr	r3, [r3, #0]
   153bc:	4a11      	ldr	r2, [pc, #68]	; (15404 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   153be:	6812      	ldr	r2, [r2, #0]
   153c0:	3230      	adds	r2, #48	; 0x30
   153c2:	679a      	str	r2, [r3, #120]	; 0x78
	can_async_read(descr, &(canopen_driver->receivedCOMsg));
   153c4:	4b0f      	ldr	r3, [pc, #60]	; (15404 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   153c6:	681b      	ldr	r3, [r3, #0]
   153c8:	3370      	adds	r3, #112	; 0x70
   153ca:	4619      	mov	r1, r3
   153cc:	6878      	ldr	r0, [r7, #4]
   153ce:	4b0e      	ldr	r3, [pc, #56]	; (15408 <_ZL14CO_rx_callbackP20can_async_descriptor+0x58>)
   153d0:	4798      	blx	r3
	if (canopen_driver->canopen_ready)
   153d2:	4b0c      	ldr	r3, [pc, #48]	; (15404 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   153d4:	681b      	ldr	r3, [r3, #0]
   153d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   153da:	b2db      	uxtb	r3, r3
   153dc:	2b00      	cmp	r3, #0
   153de:	d007      	beq.n	153f0 <_ZL14CO_rx_callbackP20can_async_descriptor+0x40>
	{
		canopen_driver->ProcessInterrupt_Rx();
   153e0:	4b08      	ldr	r3, [pc, #32]	; (15404 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   153e2:	681b      	ldr	r3, [r3, #0]
   153e4:	681b      	ldr	r3, [r3, #0]
   153e6:	681b      	ldr	r3, [r3, #0]
   153e8:	4a06      	ldr	r2, [pc, #24]	; (15404 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   153ea:	6812      	ldr	r2, [r2, #0]
   153ec:	4610      	mov	r0, r2
   153ee:	4798      	blx	r3
	}
	
	canopen_driver->receivedRxCOCallback=true;
   153f0:	4b04      	ldr	r3, [pc, #16]	; (15404 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   153f2:	681b      	ldr	r3, [r3, #0]
   153f4:	2201      	movs	r2, #1
   153f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
// 	if(ptrCODriver->RxFifo_Callback_CanModule_p != NULL)
// 	{
// 		ProcessInterrupt_Rx();
// 	
}
   153fa:	bf00      	nop
   153fc:	3708      	adds	r7, #8
   153fe:	46bd      	mov	sp, r7
   15400:	bd80      	pop	{r7, pc}
   15402:	bf00      	nop
   15404:	2000da0c 	.word	0x2000da0c
   15408:	000033d1 	.word	0x000033d1

0001540c <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor>:

static void CO_IRQ_Error_Callback(struct can_async_descriptor *const descr)
{
   1540c:	b590      	push	{r4, r7, lr}
   1540e:	b083      	sub	sp, #12
   15410:	af00      	add	r7, sp, #0
   15412:	6078      	str	r0, [r7, #4]

	canopen_driver->HalCanErrorCode= hri_can_read_IR_reg(descr->dev.hw);
   15414:	4b08      	ldr	r3, [pc, #32]	; (15438 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
   15416:	681c      	ldr	r4, [r3, #0]
   15418:	687b      	ldr	r3, [r7, #4]
   1541a:	681b      	ldr	r3, [r3, #0]
   1541c:	4618      	mov	r0, r3
   1541e:	4b07      	ldr	r3, [pc, #28]	; (1543c <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x30>)
   15420:	4798      	blx	r3
   15422:	4603      	mov	r3, r0
   15424:	62a3      	str	r3, [r4, #40]	; 0x28
	canopen_driver->receivedIntCOCallback=true;
   15426:	4b04      	ldr	r3, [pc, #16]	; (15438 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
   15428:	681b      	ldr	r3, [r3, #0]
   1542a:	2201      	movs	r2, #1
   1542c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   15430:	bf00      	nop
   15432:	370c      	adds	r7, #12
   15434:	46bd      	mov	sp, r7
   15436:	bd90      	pop	{r4, r7, pc}
   15438:	2000da0c 	.word	0x2000da0c
   1543c:	00015399 	.word	0x00015399

00015440 <_ZL14CO_tx_callbackP20can_async_descriptor>:


static void CO_tx_callback(struct can_async_descriptor *const descr)
{
   15440:	b480      	push	{r7}
   15442:	b083      	sub	sp, #12
   15444:	af00      	add	r7, sp, #0
   15446:	6078      	str	r0, [r7, #4]
	(void)descr;
	canopen_driver->receivedtxCOCallback=true;
   15448:	4b04      	ldr	r3, [pc, #16]	; (1545c <_ZL14CO_tx_callbackP20can_async_descriptor+0x1c>)
   1544a:	681b      	ldr	r3, [r3, #0]
   1544c:	2201      	movs	r2, #1
   1544e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	
}
   15452:	bf00      	nop
   15454:	370c      	adds	r7, #12
   15456:	46bd      	mov	sp, r7
   15458:	bc80      	pop	{r7}
   1545a:	4770      	bx	lr
   1545c:	2000da0c 	.word	0x2000da0c

00015460 <_ZN15CO_Driver_ClassC1Ev>:

// default constructor
CO_Driver_Class::CO_Driver_Class()
   15460:	b580      	push	{r7, lr}
   15462:	b082      	sub	sp, #8
   15464:	af00      	add	r7, sp, #0
   15466:	6078      	str	r0, [r7, #4]
   15468:	687b      	ldr	r3, [r7, #4]
   1546a:	3304      	adds	r3, #4
   1546c:	4618      	mov	r0, r3
   1546e:	4b13      	ldr	r3, [pc, #76]	; (154bc <_ZN15CO_Driver_ClassC1Ev+0x5c>)
   15470:	4798      	blx	r3
   15472:	6878      	ldr	r0, [r7, #4]
   15474:	4b12      	ldr	r3, [pc, #72]	; (154c0 <_ZN15CO_Driver_ClassC1Ev+0x60>)
   15476:	4798      	blx	r3
   15478:	687b      	ldr	r3, [r7, #4]
   1547a:	330c      	adds	r3, #12
   1547c:	4618      	mov	r0, r3
   1547e:	4b11      	ldr	r3, [pc, #68]	; (154c4 <_ZN15CO_Driver_ClassC1Ev+0x64>)
   15480:	4798      	blx	r3
   15482:	687b      	ldr	r3, [r7, #4]
   15484:	3314      	adds	r3, #20
   15486:	4618      	mov	r0, r3
   15488:	4b0f      	ldr	r3, [pc, #60]	; (154c8 <_ZN15CO_Driver_ClassC1Ev+0x68>)
   1548a:	4798      	blx	r3
   1548c:	687b      	ldr	r3, [r7, #4]
   1548e:	3320      	adds	r3, #32
   15490:	4618      	mov	r0, r3
   15492:	4b0e      	ldr	r3, [pc, #56]	; (154cc <_ZN15CO_Driver_ClassC1Ev+0x6c>)
   15494:	4798      	blx	r3
   15496:	4a0e      	ldr	r2, [pc, #56]	; (154d0 <_ZN15CO_Driver_ClassC1Ev+0x70>)
   15498:	687b      	ldr	r3, [r7, #4]
   1549a:	601a      	str	r2, [r3, #0]
{
	RxFifo_Callback_CanModule_p = NULL;
   1549c:	687b      	ldr	r3, [r7, #4]
   1549e:	2200      	movs	r2, #0
   154a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	canopen_driver=this;
   154a4:	4a0b      	ldr	r2, [pc, #44]	; (154d4 <_ZN15CO_Driver_ClassC1Ev+0x74>)
   154a6:	687b      	ldr	r3, [r7, #4]
   154a8:	6013      	str	r3, [r2, #0]
	canopen_ready=false;
   154aa:	687b      	ldr	r3, [r7, #4]
   154ac:	2200      	movs	r2, #0
   154ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
} //CO_Driver_Class
   154b2:	687b      	ldr	r3, [r7, #4]
   154b4:	4618      	mov	r0, r3
   154b6:	3708      	adds	r7, #8
   154b8:	46bd      	mov	sp, r7
   154ba:	bd80      	pop	{r7, pc}
   154bc:	00015bbd 	.word	0x00015bbd
   154c0:	00016313 	.word	0x00016313
   154c4:	00017b21 	.word	0x00017b21
   154c8:	00016475 	.word	0x00016475
   154cc:	00016141 	.word	0x00016141
   154d0:	0001b11c 	.word	0x0001b11c
   154d4:	2000da0c 	.word	0x2000da0c

000154d8 <_ZN15CO_Driver_ClassD1Ev>:

CO_Driver_Class::~CO_Driver_Class()
   154d8:	b580      	push	{r7, lr}
   154da:	b082      	sub	sp, #8
   154dc:	af00      	add	r7, sp, #0
   154de:	6078      	str	r0, [r7, #4]
   154e0:	4a0f      	ldr	r2, [pc, #60]	; (15520 <_ZN15CO_Driver_ClassD1Ev+0x48>)
   154e2:	687b      	ldr	r3, [r7, #4]
   154e4:	601a      	str	r2, [r3, #0]
   154e6:	687b      	ldr	r3, [r7, #4]
   154e8:	3320      	adds	r3, #32
   154ea:	4618      	mov	r0, r3
   154ec:	4b0d      	ldr	r3, [pc, #52]	; (15524 <_ZN15CO_Driver_ClassD1Ev+0x4c>)
   154ee:	4798      	blx	r3
   154f0:	687b      	ldr	r3, [r7, #4]
   154f2:	3314      	adds	r3, #20
   154f4:	4618      	mov	r0, r3
   154f6:	4b0c      	ldr	r3, [pc, #48]	; (15528 <_ZN15CO_Driver_ClassD1Ev+0x50>)
   154f8:	4798      	blx	r3
   154fa:	687b      	ldr	r3, [r7, #4]
   154fc:	330c      	adds	r3, #12
   154fe:	4618      	mov	r0, r3
   15500:	4b0a      	ldr	r3, [pc, #40]	; (1552c <_ZN15CO_Driver_ClassD1Ev+0x54>)
   15502:	4798      	blx	r3
   15504:	6878      	ldr	r0, [r7, #4]
   15506:	4b0a      	ldr	r3, [pc, #40]	; (15530 <_ZN15CO_Driver_ClassD1Ev+0x58>)
   15508:	4798      	blx	r3
   1550a:	687b      	ldr	r3, [r7, #4]
   1550c:	3304      	adds	r3, #4
   1550e:	4618      	mov	r0, r3
   15510:	4b08      	ldr	r3, [pc, #32]	; (15534 <_ZN15CO_Driver_ClassD1Ev+0x5c>)
   15512:	4798      	blx	r3
{
// default destructor
} //~CO_Driver_Class
   15514:	687b      	ldr	r3, [r7, #4]
   15516:	4618      	mov	r0, r3
   15518:	3708      	adds	r7, #8
   1551a:	46bd      	mov	sp, r7
   1551c:	bd80      	pop	{r7, pc}
   1551e:	bf00      	nop
   15520:	0001b11c 	.word	0x0001b11c
   15524:	00016161 	.word	0x00016161
   15528:	00016489 	.word	0x00016489
   1552c:	00017b35 	.word	0x00017b35
   15530:	00016327 	.word	0x00016327
   15534:	00015be5 	.word	0x00015be5

00015538 <_ZN15CO_Driver_Class16PrepareTxMessageEP11can_messageP10CO_CANtx_t>:
 * \param [in]	buffer ponyer to CO_CANtx_t with CANopen configuration data
 *
 * \ingroup CO_driver
 ******************************************************************************/
void CO_Driver_Class::PrepareTxMessage(struct can_message *msgHeader, CO_CANtx_t *buffer)
{
   15538:	b480      	push	{r7}
   1553a:	b085      	sub	sp, #20
   1553c:	af00      	add	r7, sp, #0
   1553e:	60f8      	str	r0, [r7, #12]
   15540:	60b9      	str	r1, [r7, #8]
   15542:	607a      	str	r2, [r7, #4]
	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;
	msgHeader->id=0;
   15544:	68bb      	ldr	r3, [r7, #8]
   15546:	2200      	movs	r2, #0
   15548:	601a      	str	r2, [r3, #0]
	//TxHeader->IDE = 0;
	msgHeader->fmt=CAN_FMT_STDID;
   1554a:	68bb      	ldr	r3, [r7, #8]
   1554c:	2200      	movs	r2, #0
   1554e:	735a      	strb	r2, [r3, #13]
	
	//TxHeader->DLC = buffer->DLC;
	msgHeader->len=buffer->DLC;
   15550:	687b      	ldr	r3, [r7, #4]
   15552:	791a      	ldrb	r2, [r3, #4]
   15554:	68bb      	ldr	r3, [r7, #8]
   15556:	731a      	strb	r2, [r3, #12]
	
	//TxHeader->StdId = ( buffer->ident >> 2 );
	msgHeader->id=( buffer->ident >> 2 );
   15558:	687b      	ldr	r3, [r7, #4]
   1555a:	681b      	ldr	r3, [r3, #0]
   1555c:	089a      	lsrs	r2, r3, #2
   1555e:	68bb      	ldr	r3, [r7, #8]
   15560:	601a      	str	r2, [r3, #0]
	
	//TxHeader->RTR = ( buffer->ident & 0x2 );
	msgHeader->type=(can_type)( buffer->ident & 0x2 );
   15562:	687b      	ldr	r3, [r7, #4]
   15564:	681b      	ldr	r3, [r3, #0]
   15566:	b2db      	uxtb	r3, r3
   15568:	f003 0302 	and.w	r3, r3, #2
   1556c:	b2da      	uxtb	r2, r3
   1556e:	68bb      	ldr	r3, [r7, #8]
   15570:	711a      	strb	r2, [r3, #4]
	msgHeader->data=buffer->data;
   15572:	687b      	ldr	r3, [r7, #4]
   15574:	1d5a      	adds	r2, r3, #5
   15576:	68bb      	ldr	r3, [r7, #8]
   15578:	609a      	str	r2, [r3, #8]
}
   1557a:	bf00      	nop
   1557c:	3714      	adds	r7, #20
   1557e:	46bd      	mov	sp, r7
   15580:	bc80      	pop	{r7}
   15582:	4770      	bx	lr

00015584 <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t>:

void CO_Driver_Class::ConvertCANMsg2CORxMsg(can_message& msgHeader, CO_CANrxMsg_t *rxMsg)
{
   15584:	b590      	push	{r4, r7, lr}
   15586:	b085      	sub	sp, #20
   15588:	af00      	add	r7, sp, #0
   1558a:	60f8      	str	r0, [r7, #12]
   1558c:	60b9      	str	r1, [r7, #8]
   1558e:	607a      	str	r2, [r7, #4]
	rxMsg->RxHeader=msgHeader;
   15590:	687a      	ldr	r2, [r7, #4]
   15592:	68bb      	ldr	r3, [r7, #8]
   15594:	4614      	mov	r4, r2
   15596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   15598:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	rxMsg->DLC=msgHeader.len;
   1559c:	68bb      	ldr	r3, [r7, #8]
   1559e:	7b1a      	ldrb	r2, [r3, #12]
   155a0:	687b      	ldr	r3, [r7, #4]
   155a2:	751a      	strb	r2, [r3, #20]
	rxMsg->ident=msgHeader.id;
   155a4:	68bb      	ldr	r3, [r7, #8]
   155a6:	681a      	ldr	r2, [r3, #0]
   155a8:	687b      	ldr	r3, [r7, #4]
   155aa:	611a      	str	r2, [r3, #16]
	memcpy(&rxMsg->data[0],msgHeader.data,msgHeader.len);
   155ac:	687b      	ldr	r3, [r7, #4]
   155ae:	f103 0015 	add.w	r0, r3, #21
   155b2:	68bb      	ldr	r3, [r7, #8]
   155b4:	6899      	ldr	r1, [r3, #8]
   155b6:	68bb      	ldr	r3, [r7, #8]
   155b8:	7b1b      	ldrb	r3, [r3, #12]
   155ba:	461a      	mov	r2, r3
   155bc:	4b02      	ldr	r3, [pc, #8]	; (155c8 <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t+0x44>)
   155be:	4798      	blx	r3

	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;

}
   155c0:	bf00      	nop
   155c2:	3714      	adds	r7, #20
   155c4:	46bd      	mov	sp, r7
   155c6:	bd90      	pop	{r4, r7, pc}
   155c8:	0001a635 	.word	0x0001a635

000155cc <_ZN15CO_Driver_Class26CO_CANsetConfigurationModeEP20can_async_descriptor>:
	{
		;//TODO add assert here
	}
}

void CO_Driver_Class::CO_CANsetConfigurationMode(can_async_descriptor *descr){
   155cc:	b480      	push	{r7}
   155ce:	b083      	sub	sp, #12
   155d0:	af00      	add	r7, sp, #0
   155d2:	6078      	str	r0, [r7, #4]
   155d4:	6039      	str	r1, [r7, #0]
	
	canDescr=descr;
   155d6:	687b      	ldr	r3, [r7, #4]
   155d8:	683a      	ldr	r2, [r7, #0]
   155da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	/* Put CAN module in configuration mode */
	/* HAL is responsible for that */
}
   155de:	bf00      	nop
   155e0:	370c      	adds	r7, #12
   155e2:	46bd      	mov	sp, r7
   155e4:	bc80      	pop	{r7}
   155e6:	4770      	bx	lr

000155e8 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CO_CANsetNormalMode(void){
   155e8:	b580      	push	{r7, lr}
   155ea:	b084      	sub	sp, #16
   155ec:	af00      	add	r7, sp, #0
   155ee:	6078      	str	r0, [r7, #4]
	/* Put CAN module in normal mode */
	int32_t		error_CAN_hal;
	Error = CO_ERROR_NO;
   155f0:	687b      	ldr	r3, [r7, #4]
   155f2:	2200      	movs	r2, #0
   155f4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	error_CAN_hal=can_async_enable(CAN_Module->CANBaseDescriptor);
   155f8:	687b      	ldr	r3, [r7, #4]
   155fa:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   155fe:	681b      	ldr	r3, [r3, #0]
   15600:	4618      	mov	r0, r3
   15602:	4b0a      	ldr	r3, [pc, #40]	; (1562c <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x44>)
   15604:	4798      	blx	r3
   15606:	60f8      	str	r0, [r7, #12]
	//    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
	//    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);

	if (error_CAN_hal != CO_ERROR_NO)
   15608:	68fb      	ldr	r3, [r7, #12]
   1560a:	2b00      	cmp	r3, #0
   1560c:	d002      	beq.n	15614 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x2c>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
   1560e:	f06f 030e 	mvn.w	r3, #14
   15612:	e007      	b.n	15624 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x3c>
	}
	CAN_Module->CANnormal = true;
   15614:	687b      	ldr	r3, [r7, #4]
   15616:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   1561a:	2201      	movs	r2, #1
   1561c:	751a      	strb	r2, [r3, #20]
	return Error;
   1561e:	687b      	ldr	r3, [r7, #4]
   15620:	f993 30a8 	ldrsb.w	r3, [r3, #168]	; 0xa8
}
   15624:	4618      	mov	r0, r3
   15626:	3710      	adds	r7, #16
   15628:	46bd      	mov	sp, r7
   1562a:	bd80      	pop	{r7, pc}
   1562c:	00003395 	.word	0x00003395

00015630 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm>:
		CO_CANrx_t              rxArray[],
		uint32_t                rxSize,
		CO_CANtx_t              txArray[],
		uint32_t                txSize,
		uint32_t                CANbitRate)
{
   15630:	b580      	push	{r7, lr}
   15632:	b086      	sub	sp, #24
   15634:	af00      	add	r7, sp, #0
   15636:	60f8      	str	r0, [r7, #12]
   15638:	60b9      	str	r1, [r7, #8]
   1563a:	607a      	str	r2, [r7, #4]
   1563c:	603b      	str	r3, [r7, #0]
	canDescr=HALCanObject;
   1563e:	68fb      	ldr	r3, [r7, #12]
   15640:	687a      	ldr	r2, [r7, #4]
   15642:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	
	int32_t		error_CAN_hal;

	/* verify arguments */
	if(CANmodule==NULL || rxArray==NULL || txArray==NULL)
   15646:	68bb      	ldr	r3, [r7, #8]
   15648:	2b00      	cmp	r3, #0
   1564a:	d005      	beq.n	15658 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
   1564c:	683b      	ldr	r3, [r7, #0]
   1564e:	2b00      	cmp	r3, #0
   15650:	d002      	beq.n	15658 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
   15652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15654:	2b00      	cmp	r3, #0
   15656:	d102      	bne.n	1565e <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x2e>
	{
		return CO_ERROR_ILLEGAL_ARGUMENT;
   15658:	f04f 33ff 	mov.w	r3, #4294967295
   1565c:	e085      	b.n	1576a <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x13a>
	else
	{
		;//do nothing
	}

	RxFifo_Callback_CanModule_p = CANmodule;
   1565e:	68fb      	ldr	r3, [r7, #12]
   15660:	68ba      	ldr	r2, [r7, #8]
   15662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Configure object variables */
	CANmodule->CANBaseDescriptor = (can_async_descriptor*)HALCanObject;
   15666:	68bb      	ldr	r3, [r7, #8]
   15668:	687a      	ldr	r2, [r7, #4]
   1566a:	601a      	str	r2, [r3, #0]
	CANmodule->rxArray = rxArray;
   1566c:	68bb      	ldr	r3, [r7, #8]
   1566e:	683a      	ldr	r2, [r7, #0]
   15670:	605a      	str	r2, [r3, #4]
	CANmodule->rxSize = rxSize;
   15672:	68bb      	ldr	r3, [r7, #8]
   15674:	6a3a      	ldr	r2, [r7, #32]
   15676:	609a      	str	r2, [r3, #8]
	CANmodule->txArray = txArray;
   15678:	68bb      	ldr	r3, [r7, #8]
   1567a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1567c:	60da      	str	r2, [r3, #12]
	CANmodule->txSize = txSize;
   1567e:	68bb      	ldr	r3, [r7, #8]
   15680:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15682:	611a      	str	r2, [r3, #16]
	CANmodule->CANnormal = false;
   15684:	68bb      	ldr	r3, [r7, #8]
   15686:	2200      	movs	r2, #0
   15688:	751a      	strb	r2, [r3, #20]
	CANmodule->useCANrxFilters = false;
   1568a:	68bb      	ldr	r3, [r7, #8]
   1568c:	2200      	movs	r2, #0
   1568e:	755a      	strb	r2, [r3, #21]
	CANmodule->bufferInhibitFlag = false;
   15690:	68bb      	ldr	r3, [r7, #8]
   15692:	2200      	movs	r2, #0
   15694:	759a      	strb	r2, [r3, #22]
	CANmodule->firstCANtxMessage = true;
   15696:	68bb      	ldr	r3, [r7, #8]
   15698:	2201      	movs	r2, #1
   1569a:	75da      	strb	r2, [r3, #23]
	CANmodule->CANtxCount = 0U;
   1569c:	68bb      	ldr	r3, [r7, #8]
   1569e:	2200      	movs	r2, #0
   156a0:	619a      	str	r2, [r3, #24]
	CANmodule->errOld = 0U;
   156a2:	68bb      	ldr	r3, [r7, #8]
   156a4:	2200      	movs	r2, #0
   156a6:	61da      	str	r2, [r3, #28]
	CANmodule->em = NULL;
   156a8:	68bb      	ldr	r3, [r7, #8]
   156aa:	2200      	movs	r2, #0
   156ac:	621a      	str	r2, [r3, #32]

	for(i=0U; i<rxSize; i++)
   156ae:	68fb      	ldr	r3, [r7, #12]
   156b0:	2200      	movs	r2, #0
   156b2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   156b6:	68fb      	ldr	r3, [r7, #12]
   156b8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   156bc:	6a3b      	ldr	r3, [r7, #32]
   156be:	429a      	cmp	r2, r3
   156c0:	d217      	bcs.n	156f2 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc2>
	{
		rxArray[i].ident = 0U;
   156c2:	68fb      	ldr	r3, [r7, #12]
   156c4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
   156c8:	011b      	lsls	r3, r3, #4
   156ca:	683a      	ldr	r2, [r7, #0]
   156cc:	4413      	add	r3, r2
   156ce:	2200      	movs	r2, #0
   156d0:	601a      	str	r2, [r3, #0]
		rxArray[i].pFunct = NULL;
   156d2:	68fb      	ldr	r3, [r7, #12]
   156d4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
   156d8:	011b      	lsls	r3, r3, #4
   156da:	683a      	ldr	r2, [r7, #0]
   156dc:	4413      	add	r3, r2
   156de:	2200      	movs	r2, #0
   156e0:	60da      	str	r2, [r3, #12]
	for(i=0U; i<rxSize; i++)
   156e2:	68fb      	ldr	r3, [r7, #12]
   156e4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
   156e8:	1c5a      	adds	r2, r3, #1
   156ea:	68fb      	ldr	r3, [r7, #12]
   156ec:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   156f0:	e7e1      	b.n	156b6 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x86>
	}

	for(i=0U; i<txSize; i++)
   156f2:	68fb      	ldr	r3, [r7, #12]
   156f4:	2200      	movs	r2, #0
   156f6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   156fa:	68fb      	ldr	r3, [r7, #12]
   156fc:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   15700:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15702:	429a      	cmp	r2, r3
   15704:	d20f      	bcs.n	15726 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xf6>
	{
		txArray[i].bufferFull = false;
   15706:	68fb      	ldr	r3, [r7, #12]
   15708:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
   1570c:	011b      	lsls	r3, r3, #4
   1570e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15710:	4413      	add	r3, r2
   15712:	2200      	movs	r2, #0
   15714:	735a      	strb	r2, [r3, #13]
	for(i=0U; i<txSize; i++)
   15716:	68fb      	ldr	r3, [r7, #12]
   15718:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
   1571c:	1c5a      	adds	r2, r3, #1
   1571e:	68fb      	ldr	r3, [r7, #12]
   15720:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15724:	e7e9      	b.n	156fa <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xca>
	}


	CANmodule_Disable();
   15726:	68f8      	ldr	r0, [r7, #12]
   15728:	4b12      	ldr	r3, [pc, #72]	; (15774 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x144>)
   1572a:	4798      	blx	r3
	
	can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
   1572c:	68fb      	ldr	r3, [r7, #12]
   1572e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   15732:	4a11      	ldr	r2, [pc, #68]	; (15778 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x148>)
   15734:	2100      	movs	r1, #0
   15736:	4618      	mov	r0, r3
   15738:	4b10      	ldr	r3, [pc, #64]	; (1577c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
   1573a:	4798      	blx	r3
	can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
   1573c:	68fb      	ldr	r3, [r7, #12]
   1573e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   15742:	4a0f      	ldr	r2, [pc, #60]	; (15780 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x150>)
   15744:	2102      	movs	r1, #2
   15746:	4618      	mov	r0, r3
   15748:	4b0c      	ldr	r3, [pc, #48]	; (1577c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
   1574a:	4798      	blx	r3
	error_CAN_hal=can_async_enable(HALCanObject);
   1574c:	6878      	ldr	r0, [r7, #4]
   1574e:	4b0d      	ldr	r3, [pc, #52]	; (15784 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x154>)
   15750:	4798      	blx	r3
   15752:	6178      	str	r0, [r7, #20]
	if (error_CAN_hal != CO_ERROR_NO)
   15754:	697b      	ldr	r3, [r7, #20]
   15756:	2b00      	cmp	r3, #0
   15758:	d002      	beq.n	15760 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x130>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
   1575a:	f06f 030e 	mvn.w	r3, #14
   1575e:	e004      	b.n	1576a <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x13a>
	}
	CAN_Module=CANmodule;
   15760:	68fb      	ldr	r3, [r7, #12]
   15762:	68ba      	ldr	r2, [r7, #8]
   15764:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	return CO_ERROR_NO;
   15768:	2300      	movs	r3, #0
}
   1576a:	4618      	mov	r0, r3
   1576c:	3718      	adds	r7, #24
   1576e:	46bd      	mov	sp, r7
   15770:	bd80      	pop	{r7, pc}
   15772:	bf00      	nop
   15774:	00015789 	.word	0x00015789
   15778:	000153b1 	.word	0x000153b1
   1577c:	00003469 	.word	0x00003469
   15780:	0001540d 	.word	0x0001540d
   15784:	00003395 	.word	0x00003395

00015788 <_ZN15CO_Driver_Class17CANmodule_DisableEv>:


/******************************************************************************/
void CO_Driver_Class::CANmodule_Disable(void){
   15788:	b480      	push	{r7}
   1578a:	b083      	sub	sp, #12
   1578c:	af00      	add	r7, sp, #0
   1578e:	6078      	str	r0, [r7, #4]
	HAL_CAN_Stop(CANmodule->CANbaseAddress);
	*/
	//can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
	//can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
	//can_async_disable(CAN_Module->CANBaseDescriptor);
}
   15790:	bf00      	nop
   15792:	370c      	adds	r7, #12
   15794:	46bd      	mov	sp, r7
   15796:	bc80      	pop	{r7}
   15798:	4770      	bx	lr

0001579a <_ZN15CO_Driver_Class14Set_Slave_NodeEh>:
uint8_t CO_Driver_Class::Set_Slave_Node(uint8_t sn){
   1579a:	b480      	push	{r7}
   1579c:	b083      	sub	sp, #12
   1579e:	af00      	add	r7, sp, #0
   157a0:	6078      	str	r0, [r7, #4]
   157a2:	460b      	mov	r3, r1
   157a4:	70fb      	strb	r3, [r7, #3]
	slave_node=sn;
   157a6:	687b      	ldr	r3, [r7, #4]
   157a8:	78fa      	ldrb	r2, [r7, #3]
   157aa:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	return slave_node;
   157ae:	687b      	ldr	r3, [r7, #4]
   157b0:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
}
   157b4:	4618      	mov	r0, r3
   157b6:	370c      	adds	r7, #12
   157b8:	46bd      	mov	sp, r7
   157ba:	bc80      	pop	{r7}
   157bc:	4770      	bx	lr
	...

000157c0 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE>:
		uint32_t                ident,
		uint32_t                mask,
		bool_t                  rtr,
		void                   *object,
		void                  (*pFunct)(void *object, const CO_CANrxMsg_t *message))
{
   157c0:	b590      	push	{r4, r7, lr}
   157c2:	b087      	sub	sp, #28
   157c4:	af00      	add	r7, sp, #0
   157c6:	60f8      	str	r0, [r7, #12]
   157c8:	60b9      	str	r1, [r7, #8]
   157ca:	607a      	str	r2, [r7, #4]
   157cc:	603b      	str	r3, [r7, #0]
	ret = CO_ERROR_NO;
   157ce:	68fb      	ldr	r3, [r7, #12]
   157d0:	2200      	movs	r2, #0
   157d2:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

	if((CAN_Module!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CAN_Module->rxSize)){
   157d6:	68fb      	ldr	r3, [r7, #12]
   157d8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   157dc:	2b00      	cmp	r3, #0
   157de:	d060      	beq.n	158a2 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
   157e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   157e2:	2b00      	cmp	r3, #0
   157e4:	d05d      	beq.n	158a2 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
   157e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   157e8:	2b00      	cmp	r3, #0
   157ea:	d05a      	beq.n	158a2 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
   157ec:	68fb      	ldr	r3, [r7, #12]
   157ee:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   157f2:	689a      	ldr	r2, [r3, #8]
   157f4:	68bb      	ldr	r3, [r7, #8]
   157f6:	429a      	cmp	r2, r3
   157f8:	d953      	bls.n	158a2 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
		/* buffer, which will be configured */
		CO_CANrx_t *buffer = &CAN_Module->rxArray[index];
   157fa:	68fb      	ldr	r3, [r7, #12]
   157fc:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   15800:	685a      	ldr	r2, [r3, #4]
   15802:	68bb      	ldr	r3, [r7, #8]
   15804:	011b      	lsls	r3, r3, #4
   15806:	4413      	add	r3, r2
   15808:	617b      	str	r3, [r7, #20]

		/* Configure object variables */
		buffer->object = object;
   1580a:	697b      	ldr	r3, [r7, #20]
   1580c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1580e:	609a      	str	r2, [r3, #8]
		buffer->pFunct = pFunct;
   15810:	697b      	ldr	r3, [r7, #20]
   15812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   15814:	60da      	str	r2, [r3, #12]

		/* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
		buffer->ident = (ident & 0x07FF) << 2;
   15816:	687b      	ldr	r3, [r7, #4]
   15818:	009a      	lsls	r2, r3, #2
   1581a:	f641 73fc 	movw	r3, #8188	; 0x1ffc
   1581e:	4013      	ands	r3, r2
   15820:	697a      	ldr	r2, [r7, #20]
   15822:	6013      	str	r3, [r2, #0]
		if (rtr)
   15824:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   15828:	2b00      	cmp	r3, #0
   1582a:	d005      	beq.n	15838 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0x78>
		{
			buffer->ident |= 0x02;
   1582c:	697b      	ldr	r3, [r7, #20]
   1582e:	681b      	ldr	r3, [r3, #0]
   15830:	f043 0202 	orr.w	r2, r3, #2
   15834:	697b      	ldr	r3, [r7, #20]
   15836:	601a      	str	r2, [r3, #0]
		}
		buffer->mask = (mask & 0x07FF) << 2;
   15838:	683b      	ldr	r3, [r7, #0]
   1583a:	009a      	lsls	r2, r3, #2
   1583c:	f641 73fc 	movw	r3, #8188	; 0x1ffc
   15840:	4013      	ands	r3, r2
   15842:	697a      	ldr	r2, [r7, #20]
   15844:	6053      	str	r3, [r2, #4]
		buffer->mask |= 0x02;
   15846:	697b      	ldr	r3, [r7, #20]
   15848:	685b      	ldr	r3, [r3, #4]
   1584a:	f043 0202 	orr.w	r2, r3, #2
   1584e:	697b      	ldr	r3, [r7, #20]
   15850:	605a      	str	r2, [r3, #4]

		/* Set CAN hardware module filter and mask. */
		if(CAN_Module->useCANrxFilters)
   15852:	68fb      	ldr	r3, [r7, #12]
   15854:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   15858:	7d5b      	ldrb	r3, [r3, #21]
   1585a:	b2db      	uxtb	r3, r3
   1585c:	2b00      	cmp	r3, #0
   1585e:	bf14      	ite	ne
   15860:	2301      	movne	r3, #1
   15862:	2300      	moveq	r3, #0
   15864:	b2db      	uxtb	r3, r3
   15866:	2b00      	cmp	r3, #0
   15868:	d120      	bne.n	158ac <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
		else
		{
			/*no hardware filters*/
			//CAN_FilterTypeDef FilterConfig;
		
			CO_Filter.id   = buffer->ident;
   1586a:	697b      	ldr	r3, [r7, #20]
   1586c:	681a      	ldr	r2, [r3, #0]
   1586e:	68fb      	ldr	r3, [r7, #12]
   15870:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			CO_Filter.mask = buffer->mask;
   15874:	697b      	ldr	r3, [r7, #20]
   15876:	685a      	ldr	r2, [r3, #4]
   15878:	68fb      	ldr	r3, [r7, #12]
   1587a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
			ret= (CO_ReturnError_t)can_async_set_filter(CAN_Module->CANBaseDescriptor,(uint8_t)index, CAN_FMT_STDID, &CO_Filter);
   1587e:	68fb      	ldr	r3, [r7, #12]
   15880:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   15884:	6818      	ldr	r0, [r3, #0]
   15886:	68bb      	ldr	r3, [r7, #8]
   15888:	b2d9      	uxtb	r1, r3
   1588a:	68fb      	ldr	r3, [r7, #12]
   1588c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
   15890:	2200      	movs	r2, #0
   15892:	4c0a      	ldr	r4, [pc, #40]	; (158bc <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xfc>)
   15894:	47a0      	blx	r4
   15896:	4603      	mov	r3, r0
   15898:	b25a      	sxtb	r2, r3
   1589a:	68fb      	ldr	r3, [r7, #12]
   1589c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		}
   158a0:	e004      	b.n	158ac <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
	}
	else
	{
		ret = CO_ERROR_ILLEGAL_ARGUMENT;
   158a2:	68fb      	ldr	r3, [r7, #12]
   158a4:	22ff      	movs	r2, #255	; 0xff
   158a6:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
   158aa:	e000      	b.n	158ae <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xee>
		}
   158ac:	bf00      	nop
	}
	return ret;
   158ae:	68fb      	ldr	r3, [r7, #12]
   158b0:	f993 30a9 	ldrsb.w	r3, [r3, #169]	; 0xa9
}
   158b4:	4618      	mov	r0, r3
   158b6:	371c      	adds	r7, #28
   158b8:	46bd      	mov	sp, r7
   158ba:	bd90      	pop	{r4, r7, pc}
   158bc:	000034e5 	.word	0x000034e5

000158c0 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh>:
		uint32_t                index,
		uint32_t                ident,
		bool_t                  rtr,
		uint8_t                 noOfBytes,
		bool_t                  syncFlag)
{
   158c0:	b480      	push	{r7}
   158c2:	b085      	sub	sp, #20
   158c4:	af00      	add	r7, sp, #0
   158c6:	60f8      	str	r0, [r7, #12]
   158c8:	60b9      	str	r1, [r7, #8]
   158ca:	607a      	str	r2, [r7, #4]
   158cc:	70fb      	strb	r3, [r7, #3]
	buffer = NULL;
   158ce:	68fb      	ldr	r3, [r7, #12]
   158d0:	2200      	movs	r2, #0
   158d2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	if((CAN_Module != NULL) && (index < CAN_Module->txSize)){
   158d6:	68fb      	ldr	r3, [r7, #12]
   158d8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   158dc:	2b00      	cmp	r3, #0
   158de:	d03c      	beq.n	1595a <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
   158e0:	68fb      	ldr	r3, [r7, #12]
   158e2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   158e6:	691a      	ldr	r2, [r3, #16]
   158e8:	68bb      	ldr	r3, [r7, #8]
   158ea:	429a      	cmp	r2, r3
   158ec:	d935      	bls.n	1595a <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
		/* get specific buffer */
		buffer = &CAN_Module->txArray[index];
   158ee:	68fb      	ldr	r3, [r7, #12]
   158f0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   158f4:	68da      	ldr	r2, [r3, #12]
   158f6:	68bb      	ldr	r3, [r7, #8]
   158f8:	011b      	lsls	r3, r3, #4
   158fa:	441a      	add	r2, r3
   158fc:	68fb      	ldr	r3, [r7, #12]
   158fe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

		/* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.*/

		buffer->ident &= 0x7FF;
   15902:	68fb      	ldr	r3, [r7, #12]
   15904:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   15908:	68fa      	ldr	r2, [r7, #12]
   1590a:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
   1590e:	6812      	ldr	r2, [r2, #0]
   15910:	f3c2 020a 	ubfx	r2, r2, #0, #11
   15914:	601a      	str	r2, [r3, #0]
		buffer->ident = ident << 2;
   15916:	68fb      	ldr	r3, [r7, #12]
   15918:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   1591c:	687a      	ldr	r2, [r7, #4]
   1591e:	0092      	lsls	r2, r2, #2
   15920:	601a      	str	r2, [r3, #0]
		if (rtr) buffer->ident |= 0x02;
   15922:	78fb      	ldrb	r3, [r7, #3]
   15924:	2b00      	cmp	r3, #0
   15926:	d009      	beq.n	1593c <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x7c>
   15928:	68fb      	ldr	r3, [r7, #12]
   1592a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   1592e:	68fa      	ldr	r2, [r7, #12]
   15930:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
   15934:	6812      	ldr	r2, [r2, #0]
   15936:	f042 0202 	orr.w	r2, r2, #2
   1593a:	601a      	str	r2, [r3, #0]

		buffer->DLC = noOfBytes;
   1593c:	68fb      	ldr	r3, [r7, #12]
   1593e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   15942:	7e3a      	ldrb	r2, [r7, #24]
   15944:	711a      	strb	r2, [r3, #4]
		buffer->bufferFull = false;
   15946:	68fb      	ldr	r3, [r7, #12]
   15948:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   1594c:	2200      	movs	r2, #0
   1594e:	735a      	strb	r2, [r3, #13]
		buffer->syncFlag = syncFlag;
   15950:	68fb      	ldr	r3, [r7, #12]
   15952:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   15956:	7f3a      	ldrb	r2, [r7, #28]
   15958:	739a      	strb	r2, [r3, #14]
	}

	return buffer;
   1595a:	68fb      	ldr	r3, [r7, #12]
   1595c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
}
   15960:	4618      	mov	r0, r3
   15962:	3714      	adds	r7, #20
   15964:	46bd      	mov	sp, r7
   15966:	bc80      	pop	{r7}
   15968:	4770      	bx	lr
	...

0001596c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CAN_Send(CO_CANtx_t *buffer)
{
   1596c:	b590      	push	{r4, r7, lr}
   1596e:	b089      	sub	sp, #36	; 0x24
   15970:	af02      	add	r7, sp, #8
   15972:	6078      	str	r0, [r7, #4]
   15974:	6039      	str	r1, [r7, #0]
	err = CO_ERROR_NO;
   15976:	687b      	ldr	r3, [r7, #4]
   15978:	2200      	movs	r2, #0
   1597a:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

	if(buffer->bufferFull){
   1597e:	683b      	ldr	r3, [r7, #0]
   15980:	7b5b      	ldrb	r3, [r3, #13]
   15982:	b2db      	uxtb	r3, r3
   15984:	2b00      	cmp	r3, #0
   15986:	bf14      	ite	ne
   15988:	2301      	movne	r3, #1
   1598a:	2300      	moveq	r3, #0
   1598c:	b2db      	uxtb	r3, r3
   1598e:	2b00      	cmp	r3, #0
   15990:	d01d      	beq.n	159ce <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x62>
		if(!CAN_Module->firstCANtxMessage){
   15992:	687b      	ldr	r3, [r7, #4]
   15994:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   15998:	7ddb      	ldrb	r3, [r3, #23]
   1599a:	b2db      	uxtb	r3, r3
   1599c:	2b00      	cmp	r3, #0
   1599e:	bf0c      	ite	eq
   159a0:	2301      	moveq	r3, #1
   159a2:	2300      	movne	r3, #0
   159a4:	b2db      	uxtb	r3, r3
   159a6:	2b00      	cmp	r3, #0
   159a8:	d00d      	beq.n	159c6 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x5a>
			/* don't set error, if bootup message is still on buffers */
			EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, buffer->ident);
   159aa:	687b      	ldr	r3, [r7, #4]
   159ac:	1d18      	adds	r0, r3, #4
   159ae:	687b      	ldr	r3, [r7, #4]
   159b0:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   159b4:	6a19      	ldr	r1, [r3, #32]
   159b6:	683b      	ldr	r3, [r7, #0]
   159b8:	681b      	ldr	r3, [r3, #0]
   159ba:	9300      	str	r3, [sp, #0]
   159bc:	f248 1310 	movw	r3, #33040	; 0x8110
   159c0:	2214      	movs	r2, #20
   159c2:	4c35      	ldr	r4, [pc, #212]	; (15a98 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x12c>)
   159c4:	47a0      	blx	r4
		}
		err = CO_ERROR_TX_OVERFLOW;
   159c6:	687b      	ldr	r3, [r7, #4]
   159c8:	22f7      	movs	r2, #247	; 0xf7
   159ca:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	}

	

	PrepareTxMessage(&msgHeader, buffer);
   159ce:	687b      	ldr	r3, [r7, #4]
   159d0:	3384      	adds	r3, #132	; 0x84
   159d2:	683a      	ldr	r2, [r7, #0]
   159d4:	4619      	mov	r1, r3
   159d6:	6878      	ldr	r0, [r7, #4]
   159d8:	4b30      	ldr	r3, [pc, #192]	; (15a9c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x130>)
   159da:	4798      	blx	r3

	if ((CAN_Module->CANtxCount == 0) ) {
   159dc:	687b      	ldr	r3, [r7, #4]
   159de:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   159e2:	699b      	ldr	r3, [r3, #24]
   159e4:	2b00      	cmp	r3, #0
   159e6:	bf0c      	ite	eq
   159e8:	2301      	moveq	r3, #1
   159ea:	2300      	movne	r3, #0
   159ec:	b2db      	uxtb	r3, r3
   159ee:	2b00      	cmp	r3, #0
   159f0:	d041      	beq.n	15a76 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x10a>
	//	((uint32_t)hri_can_read_TXFQS_TFFL_bf(canHandler->dev.hw) > 0 )) {
		CAN_Module->bufferInhibitFlag = buffer->syncFlag;
   159f2:	687b      	ldr	r3, [r7, #4]
   159f4:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   159f8:	683a      	ldr	r2, [r7, #0]
   159fa:	7b92      	ldrb	r2, [r2, #14]
   159fc:	b2d2      	uxtb	r2, r2
   159fe:	759a      	strb	r2, [r3, #22]
		
		can_async_register_callback(CAN_Module->CANBaseDescriptor, CAN_ASYNC_TX_CB, (FUNC_PTR)CO_tx_callback);
   15a00:	687b      	ldr	r3, [r7, #4]
   15a02:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   15a06:	681b      	ldr	r3, [r3, #0]
   15a08:	4a25      	ldr	r2, [pc, #148]	; (15aa0 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x134>)
   15a0a:	2101      	movs	r1, #1
   15a0c:	4618      	mov	r0, r3
   15a0e:	4b25      	ldr	r3, [pc, #148]	; (15aa4 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x138>)
   15a10:	4798      	blx	r3
		can_async_enable(CAN_Module->CANBaseDescriptor);
   15a12:	687b      	ldr	r3, [r7, #4]
   15a14:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   15a18:	681b      	ldr	r3, [r3, #0]
   15a1a:	4618      	mov	r0, r3
   15a1c:	4b22      	ldr	r3, [pc, #136]	; (15aa8 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x13c>)
   15a1e:	4798      	blx	r3
		receivedtxCOCallback=false;
   15a20:	687b      	ldr	r3, [r7, #4]
   15a22:	2200      	movs	r2, #0
   15a24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   15a28:	f3ef 8310 	mrs	r3, PRIMASK
   15a2c:	60fb      	str	r3, [r7, #12]
  return(result);
   15a2e:	68fb      	ldr	r3, [r7, #12]
		CO_LOCK_CAN_SEND();
   15a30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
   15a32:	b672      	cpsid	i
		HalCanErrorCode=can_async_write(CAN_Module->CANBaseDescriptor, &msgHeader);
   15a34:	687b      	ldr	r3, [r7, #4]
   15a36:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   15a3a:	681a      	ldr	r2, [r3, #0]
   15a3c:	687b      	ldr	r3, [r7, #4]
   15a3e:	3384      	adds	r3, #132	; 0x84
   15a40:	4619      	mov	r1, r3
   15a42:	4610      	mov	r0, r2
   15a44:	4b19      	ldr	r3, [pc, #100]	; (15aac <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x140>)
   15a46:	4798      	blx	r3
   15a48:	4603      	mov	r3, r0
   15a4a:	461a      	mov	r2, r3
   15a4c:	687b      	ldr	r3, [r7, #4]
   15a4e:	629a      	str	r2, [r3, #40]	; 0x28
   15a50:	697b      	ldr	r3, [r7, #20]
   15a52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   15a54:	693b      	ldr	r3, [r7, #16]
   15a56:	f383 8810 	msr	PRIMASK, r3
		CO_UNLOCK_CAN_SEND();
		if(HalCanErrorCode != CO_ERROR_NO)
   15a5a:	687b      	ldr	r3, [r7, #4]
   15a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15a5e:	2b00      	cmp	r3, #0
   15a60:	bf14      	ite	ne
   15a62:	2301      	movne	r3, #1
   15a64:	2300      	moveq	r3, #0
   15a66:	b2db      	uxtb	r3, r3
   15a68:	2b00      	cmp	r3, #0
   15a6a:	d00d      	beq.n	15a88 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
		{
			err = CO_ERROR_HAL;
   15a6c:	687b      	ldr	r3, [r7, #4]
   15a6e:	22f1      	movs	r2, #241	; 0xf1
   15a70:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
   15a74:	e008      	b.n	15a88 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
			//CANmodule->CANtxCount++;
		}
	}	/* if no buffer is free, message will be sent in the task */
	else
	{
		buffer->bufferFull = true;
   15a76:	683b      	ldr	r3, [r7, #0]
   15a78:	2201      	movs	r2, #1
   15a7a:	735a      	strb	r2, [r3, #13]
		CAN_Module->CANtxCount++;
   15a7c:	687b      	ldr	r3, [r7, #4]
   15a7e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   15a82:	699a      	ldr	r2, [r3, #24]
   15a84:	3201      	adds	r2, #1
   15a86:	619a      	str	r2, [r3, #24]
	}
	

	return err;
   15a88:	687b      	ldr	r3, [r7, #4]
   15a8a:	f993 30aa 	ldrsb.w	r3, [r3, #170]	; 0xaa
}
   15a8e:	4618      	mov	r0, r3
   15a90:	371c      	adds	r7, #28
   15a92:	46bd      	mov	sp, r7
   15a94:	bd90      	pop	{r4, r7, pc}
   15a96:	bf00      	nop
   15a98:	00015e31 	.word	0x00015e31
   15a9c:	00015539 	.word	0x00015539
   15aa0:	00015441 	.word	0x00015441
   15aa4:	00003469 	.word	0x00003469
   15aa8:	00003395 	.word	0x00003395
   15aac:	0000341d 	.word	0x0000341d

00015ab0 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv>:
}

/*Interrupt handlers*/
/******************************************************************************/
void CO_Driver_Class::ProcessInterrupt_Rx(void)
{
   15ab0:	b580      	push	{r7, lr}
   15ab2:	b084      	sub	sp, #16
   15ab4:	af00      	add	r7, sp, #0
   15ab6:	6078      	str	r0, [r7, #4]

	msgMatched = false;
   15ab8:	687b      	ldr	r3, [r7, #4]
   15aba:	2200      	movs	r2, #0
   15abc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

	ConvertCANMsg2CORxMsg(receivedCOMsg,&CANmessage);
   15ac0:	687b      	ldr	r3, [r7, #4]
   15ac2:	f103 0170 	add.w	r1, r3, #112	; 0x70
   15ac6:	687b      	ldr	r3, [r7, #4]
   15ac8:	f503 7380 	add.w	r3, r3, #256	; 0x100
   15acc:	461a      	mov	r2, r3
   15ace:	6878      	ldr	r0, [r7, #4]
   15ad0:	4b38      	ldr	r3, [pc, #224]	; (15bb4 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x104>)
   15ad2:	4798      	blx	r3
	MsgBuff=CAN_Module->rxArray;
   15ad4:	687b      	ldr	r3, [r7, #4]
   15ad6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   15ada:	685a      	ldr	r2, [r3, #4]
   15adc:	687b      	ldr	r3, [r7, #4]
   15ade:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	/* Search rxArray form CANmodule for the same CAN-ID. */
	uint32_t msgCO = (((uint32_t)(CANmessage.ident << 2)) | (uint32_t)(msg.type));
   15ae2:	687b      	ldr	r3, [r7, #4]
   15ae4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15ae8:	009b      	lsls	r3, r3, #2
   15aea:	687a      	ldr	r2, [r7, #4]
   15aec:	f892 209c 	ldrb.w	r2, [r2, #156]	; 0x9c
   15af0:	4313      	orrs	r3, r2
   15af2:	60fb      	str	r3, [r7, #12]
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
   15af4:	687b      	ldr	r3, [r7, #4]
   15af6:	2200      	movs	r2, #0
   15af8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15afc:	687b      	ldr	r3, [r7, #4]
   15afe:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   15b02:	687b      	ldr	r3, [r7, #4]
   15b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   15b08:	689b      	ldr	r3, [r3, #8]
   15b0a:	429a      	cmp	r2, r3
   15b0c:	d221      	bcs.n	15b52 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xa2>
	{
		
		if (((msgCO ^ MsgBuff->ident) & MsgBuff->mask) == 0)
   15b0e:	687b      	ldr	r3, [r7, #4]
   15b10:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   15b14:	681a      	ldr	r2, [r3, #0]
   15b16:	68fb      	ldr	r3, [r7, #12]
   15b18:	405a      	eors	r2, r3
   15b1a:	687b      	ldr	r3, [r7, #4]
   15b1c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   15b20:	685b      	ldr	r3, [r3, #4]
   15b22:	4013      	ands	r3, r2
   15b24:	2b00      	cmp	r3, #0
   15b26:	d104      	bne.n	15b32 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x82>
		{
			msgMatched = true;
   15b28:	687b      	ldr	r3, [r7, #4]
   15b2a:	2201      	movs	r2, #1
   15b2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
			break;
   15b30:	e00f      	b.n	15b52 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xa2>
		}
		MsgBuff++;
   15b32:	687b      	ldr	r3, [r7, #4]
   15b34:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   15b38:	f103 0210 	add.w	r2, r3, #16
   15b3c:	687b      	ldr	r3, [r7, #4]
   15b3e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
   15b42:	687b      	ldr	r3, [r7, #4]
   15b44:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
   15b48:	1c5a      	adds	r2, r3, #1
   15b4a:	687b      	ldr	r3, [r7, #4]
   15b4c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15b50:	e7d4      	b.n	15afc <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x4c>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
   15b52:	687b      	ldr	r3, [r7, #4]
   15b54:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   15b58:	2b00      	cmp	r3, #0
   15b5a:	d018      	beq.n	15b8e <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xde>
   15b5c:	687b      	ldr	r3, [r7, #4]
   15b5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   15b62:	2b00      	cmp	r3, #0
   15b64:	d013      	beq.n	15b8e <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xde>
   15b66:	687b      	ldr	r3, [r7, #4]
   15b68:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   15b6c:	68db      	ldr	r3, [r3, #12]
   15b6e:	2b00      	cmp	r3, #0
   15b70:	d00d      	beq.n	15b8e <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xde>
	{
			//printf("  %X", CANmessage.ident);
			MsgBuff->pFunct(MsgBuff->object, &CANmessage);
   15b72:	687b      	ldr	r3, [r7, #4]
   15b74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   15b78:	68db      	ldr	r3, [r3, #12]
   15b7a:	687a      	ldr	r2, [r7, #4]
   15b7c:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
   15b80:	6890      	ldr	r0, [r2, #8]
   15b82:	687a      	ldr	r2, [r7, #4]
   15b84:	f502 7280 	add.w	r2, r2, #256	; 0x100
   15b88:	4611      	mov	r1, r2
   15b8a:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
   15b8c:	e00d      	b.n	15baa <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xfa>
		if (CANmessage.ident==(CO_CAN_ID_TPDO_1+CCU_CANOPEN_NODE))
   15b8e:	687b      	ldr	r3, [r7, #4]
   15b90:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   15b94:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
   15b98:	d107      	bne.n	15baa <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xfa>
			memcpy((void*)CO_OD_RAM.voltage,(void*)CANmessage.data,2);
   15b9a:	687b      	ldr	r3, [r7, #4]
   15b9c:	f203 1315 	addw	r3, r3, #277	; 0x115
   15ba0:	881b      	ldrh	r3, [r3, #0]
   15ba2:	b29a      	uxth	r2, r3
   15ba4:	4b04      	ldr	r3, [pc, #16]	; (15bb8 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x108>)
   15ba6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
   15baa:	bf00      	nop
   15bac:	3710      	adds	r7, #16
   15bae:	46bd      	mov	sp, r7
   15bb0:	bd80      	pop	{r7, pc}
   15bb2:	bf00      	nop
   15bb4:	00015585 	.word	0x00015585
   15bb8:	20000220 	.word	0x20000220

00015bbc <_ZN18CO_Emergency_ClassC1Ev>:
#include "CO_Driver_Class.h"

CO_Emergency_Class	*ptrCOEMClass;

// default constructor
CO_Emergency_Class::CO_Emergency_Class()
   15bbc:	b580      	push	{r7, lr}
   15bbe:	b082      	sub	sp, #8
   15bc0:	af00      	add	r7, sp, #0
   15bc2:	6078      	str	r0, [r7, #4]
   15bc4:	6878      	ldr	r0, [r7, #4]
   15bc6:	4b05      	ldr	r3, [pc, #20]	; (15bdc <_ZN18CO_Emergency_ClassC1Ev+0x20>)
   15bc8:	4798      	blx	r3
{
	ptrCOEMClass=this;
   15bca:	4a05      	ldr	r2, [pc, #20]	; (15be0 <_ZN18CO_Emergency_ClassC1Ev+0x24>)
   15bcc:	687b      	ldr	r3, [r7, #4]
   15bce:	6013      	str	r3, [r2, #0]
} //CO_Emergency_Class
   15bd0:	687b      	ldr	r3, [r7, #4]
   15bd2:	4618      	mov	r0, r3
   15bd4:	3708      	adds	r7, #8
   15bd6:	46bd      	mov	sp, r7
   15bd8:	bd80      	pop	{r7, pc}
   15bda:	bf00      	nop
   15bdc:	000172f9 	.word	0x000172f9
   15be0:	2000da10 	.word	0x2000da10

00015be4 <_ZN18CO_Emergency_ClassD1Ev>:

// default destructor
CO_Emergency_Class::~CO_Emergency_Class()
   15be4:	b580      	push	{r7, lr}
   15be6:	b082      	sub	sp, #8
   15be8:	af00      	add	r7, sp, #0
   15bea:	6078      	str	r0, [r7, #4]
   15bec:	6878      	ldr	r0, [r7, #4]
   15bee:	4b03      	ldr	r3, [pc, #12]	; (15bfc <_ZN18CO_Emergency_ClassD1Ev+0x18>)
   15bf0:	4798      	blx	r3
{
} //~CO_Emergency_Class
   15bf2:	687b      	ldr	r3, [r7, #4]
   15bf4:	4618      	mov	r0, r3
   15bf6:	3708      	adds	r7, #8
   15bf8:	46bd      	mov	sp, r7
   15bfa:	bd80      	pop	{r7, pc}
   15bfc:	00017321 	.word	0x00017321

00015c00 <_ZL11CO_ODF_1003P12CO_ODF_arg_t>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static   CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
   15c00:	b480      	push	{r7}
   15c02:	b087      	sub	sp, #28
   15c04:	af00      	add	r7, sp, #0
   15c06:	6078      	str	r0, [r7, #4]
    
    uint8_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   15c08:	2300      	movs	r3, #0
   15c0a:	617b      	str	r3, [r7, #20]

    CO_EMpr_t *emPr = (CO_EMpr_t*) ODF_arg->object;
   15c0c:	687b      	ldr	r3, [r7, #4]
   15c0e:	681b      	ldr	r3, [r3, #0]
   15c10:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
   15c12:	687b      	ldr	r3, [r7, #4]
   15c14:	685b      	ldr	r3, [r3, #4]
   15c16:	781b      	ldrb	r3, [r3, #0]
   15c18:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
   15c1a:	687b      	ldr	r3, [r7, #4]
   15c1c:	7f5b      	ldrb	r3, [r3, #29]
   15c1e:	2b00      	cmp	r3, #0
   15c20:	d017      	beq.n	15c52 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x52>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
   15c22:	693b      	ldr	r3, [r7, #16]
   15c24:	7a5b      	ldrb	r3, [r3, #9]
   15c26:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
   15c28:	687b      	ldr	r3, [r7, #4]
   15c2a:	7f1b      	ldrb	r3, [r3, #28]
   15c2c:	2b00      	cmp	r3, #0
   15c2e:	d104      	bne.n	15c3a <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x3a>
            ODF_arg->data[0] = noOfErrors;
   15c30:	687b      	ldr	r3, [r7, #4]
   15c32:	685b      	ldr	r3, [r3, #4]
   15c34:	7bba      	ldrb	r2, [r7, #14]
   15c36:	701a      	strb	r2, [r3, #0]
   15c38:	e01b      	b.n	15c72 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else if(ODF_arg->subIndex > noOfErrors){
   15c3a:	687b      	ldr	r3, [r7, #4]
   15c3c:	7f1b      	ldrb	r3, [r3, #28]
   15c3e:	461a      	mov	r2, r3
   15c40:	7bbb      	ldrb	r3, [r7, #14]
   15c42:	429a      	cmp	r2, r3
   15c44:	dd02      	ble.n	15c4c <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_NO_DATA;
   15c46:	4b0e      	ldr	r3, [pc, #56]	; (15c80 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x80>)
   15c48:	617b      	str	r3, [r7, #20]
   15c4a:	e012      	b.n	15c72 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else{
            ret = CO_SDO_AB_NONE;
   15c4c:	2300      	movs	r3, #0
   15c4e:	617b      	str	r3, [r7, #20]
   15c50:	e00f      	b.n	15c72 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
   15c52:	687b      	ldr	r3, [r7, #4]
   15c54:	7f1b      	ldrb	r3, [r3, #28]
   15c56:	2b00      	cmp	r3, #0
   15c58:	d109      	bne.n	15c6e <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x6e>
            if(value == 0U){
   15c5a:	7bfb      	ldrb	r3, [r7, #15]
   15c5c:	2b00      	cmp	r3, #0
   15c5e:	d103      	bne.n	15c68 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x68>
                emPr->preDefErrNoOfErrors = 0U;
   15c60:	693b      	ldr	r3, [r7, #16]
   15c62:	2200      	movs	r2, #0
   15c64:	725a      	strb	r2, [r3, #9]
   15c66:	e004      	b.n	15c72 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
   15c68:	4b06      	ldr	r3, [pc, #24]	; (15c84 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x84>)
   15c6a:	617b      	str	r3, [r7, #20]
   15c6c:	e001      	b.n	15c72 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
   15c6e:	4b06      	ldr	r3, [pc, #24]	; (15c88 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x88>)
   15c70:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
   15c72:	697b      	ldr	r3, [r7, #20]
}
   15c74:	4618      	mov	r0, r3
   15c76:	371c      	adds	r7, #28
   15c78:	46bd      	mov	sp, r7
   15c7a:	bc80      	pop	{r7}
   15c7c:	4770      	bx	lr
   15c7e:	bf00      	nop
   15c80:	08000024 	.word	0x08000024
   15c84:	06090030 	.word	0x06090030
   15c88:	06010002 	.word	0x06010002

00015c8c <_ZL11CO_ODF_1014P12CO_ODF_arg_t>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static  CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
   15c8c:	b580      	push	{r7, lr}
   15c8e:	b086      	sub	sp, #24
   15c90:	af00      	add	r7, sp, #0
   15c92:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   15c94:	2300      	movs	r3, #0
   15c96:	617b      	str	r3, [r7, #20]
    nodeId = (uint8_t*) ODF_arg->object;
   15c98:	687b      	ldr	r3, [r7, #4]
   15c9a:	681b      	ldr	r3, [r3, #0]
   15c9c:	613b      	str	r3, [r7, #16]
    value =ptrCOEMClass->CO_getUint32(ODF_arg->data);
   15c9e:	4b0f      	ldr	r3, [pc, #60]	; (15cdc <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x50>)
   15ca0:	681a      	ldr	r2, [r3, #0]
   15ca2:	687b      	ldr	r3, [r7, #4]
   15ca4:	685b      	ldr	r3, [r3, #4]
   15ca6:	4619      	mov	r1, r3
   15ca8:	4610      	mov	r0, r2
   15caa:	4b0d      	ldr	r3, [pc, #52]	; (15ce0 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x54>)
   15cac:	4798      	blx	r3
   15cae:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
   15cb0:	687b      	ldr	r3, [r7, #4]
   15cb2:	7f5b      	ldrb	r3, [r3, #29]
   15cb4:	2b00      	cmp	r3, #0
   15cb6:	d00b      	beq.n	15cd0 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x44>
        ptrCOEMClass->CO_setUint32(ODF_arg->data, value + *nodeId);
   15cb8:	4b08      	ldr	r3, [pc, #32]	; (15cdc <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x50>)
   15cba:	6818      	ldr	r0, [r3, #0]
   15cbc:	687b      	ldr	r3, [r7, #4]
   15cbe:	6859      	ldr	r1, [r3, #4]
   15cc0:	693b      	ldr	r3, [r7, #16]
   15cc2:	781b      	ldrb	r3, [r3, #0]
   15cc4:	461a      	mov	r2, r3
   15cc6:	68fb      	ldr	r3, [r7, #12]
   15cc8:	4413      	add	r3, r2
   15cca:	461a      	mov	r2, r3
   15ccc:	4b05      	ldr	r3, [pc, #20]	; (15ce4 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x58>)
   15cce:	4798      	blx	r3
    }

    return ret;
   15cd0:	697b      	ldr	r3, [r7, #20]
}
   15cd2:	4618      	mov	r0, r3
   15cd4:	3718      	adds	r7, #24
   15cd6:	46bd      	mov	sp, r7
   15cd8:	bd80      	pop	{r7, pc}
   15cda:	bf00      	nop
   15cdc:	2000da10 	.word	0x2000da10
   15ce0:	00017379 	.word	0x00017379
   15ce4:	000173ad 	.word	0x000173ad

00015ce8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm>:
        uint32_t               *preDefErr,
        uint8_t                 preDefErrSize,
        CO_CANmodule_t         *CANdev,
        uint32_t                CANdevTxIdx,
        uint32_t                CANidTxEM)
{
   15ce8:	b590      	push	{r4, r7, lr}
   15cea:	b089      	sub	sp, #36	; 0x24
   15cec:	af02      	add	r7, sp, #8
   15cee:	60f8      	str	r0, [r7, #12]
   15cf0:	60b9      	str	r1, [r7, #8]
   15cf2:	607a      	str	r2, [r7, #4]
   15cf4:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL ||
   15cf6:	68bb      	ldr	r3, [r7, #8]
   15cf8:	2b00      	cmp	r3, #0
   15cfa:	d015      	beq.n	15d28 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   15cfc:	687b      	ldr	r3, [r7, #4]
   15cfe:	2b00      	cmp	r3, #0
   15d00:	d012      	beq.n	15d28 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   15d02:	683b      	ldr	r3, [r7, #0]
   15d04:	2b00      	cmp	r3, #0
   15d06:	d00f      	beq.n	15d28 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   15d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15d0a:	2b00      	cmp	r3, #0
   15d0c:	d00c      	beq.n	15d28 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   15d0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   15d12:	2b05      	cmp	r3, #5
   15d14:	d908      	bls.n	15d28 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
        errorStatusBitsSize<6U || errorRegister==NULL || preDefErr==NULL || CANdev==NULL){
   15d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15d18:	2b00      	cmp	r3, #0
   15d1a:	d005      	beq.n	15d28 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   15d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15d1e:	2b00      	cmp	r3, #0
   15d20:	d002      	beq.n	15d28 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   15d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15d24:	2b00      	cmp	r3, #0
   15d26:	d102      	bne.n	15d2e <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x46>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   15d28:	f04f 33ff 	mov.w	r3, #4294967295
   15d2c:	e072      	b.n	15e14 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x12c>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
   15d2e:	68bb      	ldr	r3, [r7, #8]
   15d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15d32:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
   15d34:	68bb      	ldr	r3, [r7, #8]
   15d36:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   15d3a:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
   15d3c:	68bb      	ldr	r3, [r7, #8]
   15d3e:	3305      	adds	r3, #5
   15d40:	f103 0250 	add.w	r2, r3, #80	; 0x50
   15d44:	68bb      	ldr	r3, [r7, #8]
   15d46:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
   15d48:	68bb      	ldr	r3, [r7, #8]
   15d4a:	1d5a      	adds	r2, r3, #5
   15d4c:	68bb      	ldr	r3, [r7, #8]
   15d4e:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
   15d50:	68bb      	ldr	r3, [r7, #8]
   15d52:	1d5a      	adds	r2, r3, #5
   15d54:	68bb      	ldr	r3, [r7, #8]
   15d56:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
   15d58:	68bb      	ldr	r3, [r7, #8]
   15d5a:	2200      	movs	r2, #0
   15d5c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
   15d60:	68bb      	ldr	r3, [r7, #8]
   15d62:	2200      	movs	r2, #0
   15d64:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    em->handler            = NULL;
   15d68:	68bb      	ldr	r3, [r7, #8]
   15d6a:	2200      	movs	r2, #0
   15d6c:	669a      	str	r2, [r3, #104]	; 0x68
    emPr->em                    = em;
   15d6e:	687b      	ldr	r3, [r7, #4]
   15d70:	68ba      	ldr	r2, [r7, #8]
   15d72:	611a      	str	r2, [r3, #16]
    emPr->errorRegister         = errorRegister;
   15d74:	687b      	ldr	r3, [r7, #4]
   15d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   15d78:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
   15d7a:	687b      	ldr	r3, [r7, #4]
   15d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   15d7e:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
   15d80:	687b      	ldr	r3, [r7, #4]
   15d82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
   15d86:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
   15d88:	687b      	ldr	r3, [r7, #4]
   15d8a:	2200      	movs	r2, #0
   15d8c:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
   15d8e:	687b      	ldr	r3, [r7, #4]
   15d90:	2200      	movs	r2, #0
   15d92:	60da      	str	r2, [r3, #12]
 
    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
   15d94:	2300      	movs	r3, #0
   15d96:	75fb      	strb	r3, [r7, #23]
   15d98:	7dfa      	ldrb	r2, [r7, #23]
   15d9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   15d9e:	429a      	cmp	r2, r3
   15da0:	da09      	bge.n	15db6 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xce>
        em->errorStatusBits[i] = 0U;
   15da2:	68bb      	ldr	r3, [r7, #8]
   15da4:	681a      	ldr	r2, [r3, #0]
   15da6:	7dfb      	ldrb	r3, [r7, #23]
   15da8:	4413      	add	r3, r2
   15daa:	2200      	movs	r2, #0
   15dac:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
   15dae:	7dfb      	ldrb	r3, [r7, #23]
   15db0:	3301      	adds	r3, #1
   15db2:	75fb      	strb	r3, [r7, #23]
   15db4:	e7f0      	b.n	15d98 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xb0>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure( OD_H1003_PREDEF_ERR_FIELD,CO_ODF_1003, (void*)emPr, 0, 0U);
   15db6:	2300      	movs	r3, #0
   15db8:	9301      	str	r3, [sp, #4]
   15dba:	2300      	movs	r3, #0
   15dbc:	9300      	str	r3, [sp, #0]
   15dbe:	687b      	ldr	r3, [r7, #4]
   15dc0:	4a16      	ldr	r2, [pc, #88]	; (15e1c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x134>)
   15dc2:	f241 0103 	movw	r1, #4099	; 0x1003
   15dc6:	68f8      	ldr	r0, [r7, #12]
   15dc8:	4c15      	ldr	r4, [pc, #84]	; (15e20 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
   15dca:	47a0      	blx	r4
    CO_OD_configure( OD_H1014_COBID_EMERGENCY,CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
   15dcc:	683b      	ldr	r3, [r7, #0]
   15dce:	f103 0268 	add.w	r2, r3, #104	; 0x68
   15dd2:	2300      	movs	r3, #0
   15dd4:	9301      	str	r3, [sp, #4]
   15dd6:	2300      	movs	r3, #0
   15dd8:	9300      	str	r3, [sp, #0]
   15dda:	4613      	mov	r3, r2
   15ddc:	4a11      	ldr	r2, [pc, #68]	; (15e24 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x13c>)
   15dde:	f241 0114 	movw	r1, #4116	; 0x1014
   15de2:	68f8      	ldr	r0, [r7, #12]
   15de4:	4c0e      	ldr	r4, [pc, #56]	; (15e20 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
   15de6:	47a0      	blx	r4

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdev;
   15de8:	687b      	ldr	r3, [r7, #4]
   15dea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   15dec:	615a      	str	r2, [r3, #20]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
   15dee:	687b      	ldr	r3, [r7, #4]
   15df0:	695b      	ldr	r3, [r3, #20]
   15df2:	68ba      	ldr	r2, [r7, #8]
   15df4:	621a      	str	r2, [r3, #32]
    emPr->CANtxBuff =canopen_driver->CAN_Tx_BufferInit(
   15df6:	4b0c      	ldr	r3, [pc, #48]	; (15e28 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x140>)
   15df8:	6818      	ldr	r0, [r3, #0]
   15dfa:	2300      	movs	r3, #0
   15dfc:	9301      	str	r3, [sp, #4]
   15dfe:	2308      	movs	r3, #8
   15e00:	9300      	str	r3, [sp, #0]
   15e02:	2300      	movs	r3, #0
   15e04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   15e06:	6c39      	ldr	r1, [r7, #64]	; 0x40
   15e08:	4c08      	ldr	r4, [pc, #32]	; (15e2c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x144>)
   15e0a:	47a0      	blx	r4
   15e0c:	4602      	mov	r2, r0
   15e0e:	687b      	ldr	r3, [r7, #4]
   15e10:	619a      	str	r2, [r3, #24]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
   15e12:	2300      	movs	r3, #0
}
   15e14:	4618      	mov	r0, r3
   15e16:	371c      	adds	r7, #28
   15e18:	46bd      	mov	sp, r7
   15e1a:	bd90      	pop	{r4, r7, pc}
   15e1c:	00015c01 	.word	0x00015c01
   15e20:	000177cd 	.word	0x000177cd
   15e24:	00015c8d 	.word	0x00015c8d
   15e28:	2000da0c 	.word	0x2000da0c
   15e2c:	000158c1 	.word	0x000158c1

00015e30 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm>:
    return;
}


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReport(CO_EM_t *em, const uint8_t errorBit, const uint32_t errorCode, const uint32_t infoCode){
   15e30:	b590      	push	{r4, r7, lr}
   15e32:	b08d      	sub	sp, #52	; 0x34
   15e34:	af00      	add	r7, sp, #0
   15e36:	60f8      	str	r0, [r7, #12]
   15e38:	60b9      	str	r1, [r7, #8]
   15e3a:	603b      	str	r3, [r7, #0]
   15e3c:	4613      	mov	r3, r2
   15e3e:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
   15e40:	79fb      	ldrb	r3, [r7, #7]
   15e42:	10db      	asrs	r3, r3, #3
   15e44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
   15e48:	79fb      	ldrb	r3, [r7, #7]
   15e4a:	f003 0307 	and.w	r3, r3, #7
   15e4e:	2201      	movs	r2, #1
   15e50:	fa02 f303 	lsl.w	r3, r2, r3
   15e54:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
   15e58:	2300      	movs	r3, #0
   15e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
   15e5c:	2301      	movs	r3, #1
   15e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
   15e62:	68bb      	ldr	r3, [r7, #8]
   15e64:	2b00      	cmp	r3, #0
   15e66:	d103      	bne.n	15e70 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x40>
        sendEmergency = false;
   15e68:	2300      	movs	r3, #0
   15e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   15e6e:	e01e      	b.n	15eae <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
   15e70:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   15e74:	68ba      	ldr	r2, [r7, #8]
   15e76:	7912      	ldrb	r2, [r2, #4]
   15e78:	4293      	cmp	r3, r2
   15e7a:	db07      	blt.n	15e8c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
   15e7c:	68bb      	ldr	r3, [r7, #8]
   15e7e:	79fa      	ldrb	r2, [r7, #7]
   15e80:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
   15e84:	2300      	movs	r3, #0
   15e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   15e8a:	e010      	b.n	15eae <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
   15e8c:	68bb      	ldr	r3, [r7, #8]
   15e8e:	681a      	ldr	r2, [r3, #0]
   15e90:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   15e94:	4413      	add	r3, r2
   15e96:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
   15e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15e9a:	781a      	ldrb	r2, [r3, #0]
   15e9c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   15ea0:	4013      	ands	r3, r2
   15ea2:	b2db      	uxtb	r3, r3
   15ea4:	2b00      	cmp	r3, #0
   15ea6:	d002      	beq.n	15eae <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
            sendEmergency = false;
   15ea8:	2300      	movs	r3, #0
   15eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
   15eae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   15eb2:	2b00      	cmp	r3, #0
   15eb4:	d05c      	beq.n	15f70 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
        /* set error bit */
        if(errorBit){
   15eb6:	79fb      	ldrb	r3, [r7, #7]
   15eb8:	2b00      	cmp	r3, #0
   15eba:	d007      	beq.n	15ecc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x9c>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
   15ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15ebe:	781a      	ldrb	r2, [r3, #0]
   15ec0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   15ec4:	4313      	orrs	r3, r2
   15ec6:	b2da      	uxtb	r2, r3
   15ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15eca:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
   15ecc:	68bb      	ldr	r3, [r7, #8]
   15ece:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   15ed2:	2b00      	cmp	r3, #0
   15ed4:	d004      	beq.n	15ee0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0xb0>
            em->bufFull = 2;
   15ed6:	68bb      	ldr	r3, [r7, #8]
   15ed8:	2202      	movs	r2, #2
   15eda:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
   15ede:	e047      	b.n	15f70 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
            CO_memcpySwap2(&bufCopy[0], &errorCode);
   15ee0:	463a      	mov	r2, r7
   15ee2:	f107 0318 	add.w	r3, r7, #24
   15ee6:	4619      	mov	r1, r3
   15ee8:	68f8      	ldr	r0, [r7, #12]
   15eea:	4b23      	ldr	r3, [pc, #140]	; (15f78 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x148>)
   15eec:	4798      	blx	r3
            bufCopy[2] = 0; /* error register will be set later */
   15eee:	2300      	movs	r3, #0
   15ef0:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
   15ef2:	79fb      	ldrb	r3, [r7, #7]
   15ef4:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
   15ef6:	f107 0318 	add.w	r3, r7, #24
   15efa:	3304      	adds	r3, #4
   15efc:	f107 0240 	add.w	r2, r7, #64	; 0x40
   15f00:	4619      	mov	r1, r3
   15f02:	68f8      	ldr	r0, [r7, #12]
   15f04:	4b1d      	ldr	r3, [pc, #116]	; (15f7c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x14c>)
   15f06:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   15f08:	f3ef 8310 	mrs	r3, PRIMASK
   15f0c:	617b      	str	r3, [r7, #20]
  return(result);
   15f0e:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
   15f10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
   15f12:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
   15f14:	68bb      	ldr	r3, [r7, #8]
   15f16:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
   15f18:	f107 0218 	add.w	r2, r7, #24
   15f1c:	2308      	movs	r3, #8
   15f1e:	68f8      	ldr	r0, [r7, #12]
   15f20:	4c17      	ldr	r4, [pc, #92]	; (15f80 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x150>)
   15f22:	47a0      	blx	r4
            em->bufWritePtr += 8;
   15f24:	68bb      	ldr	r3, [r7, #8]
   15f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   15f28:	f103 0208 	add.w	r2, r3, #8
   15f2c:	68bb      	ldr	r3, [r7, #8]
   15f2e:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
   15f30:	68bb      	ldr	r3, [r7, #8]
   15f32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   15f34:	68bb      	ldr	r3, [r7, #8]
   15f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   15f38:	429a      	cmp	r2, r3
   15f3a:	d103      	bne.n	15f44 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x114>
   15f3c:	68bb      	ldr	r3, [r7, #8]
   15f3e:	1d5a      	adds	r2, r3, #5
   15f40:	68bb      	ldr	r3, [r7, #8]
   15f42:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
   15f44:	68bb      	ldr	r3, [r7, #8]
   15f46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   15f48:	68bb      	ldr	r3, [r7, #8]
   15f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   15f4c:	429a      	cmp	r2, r3
   15f4e:	d103      	bne.n	15f58 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x128>
   15f50:	68bb      	ldr	r3, [r7, #8]
   15f52:	2201      	movs	r2, #1
   15f54:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
   15f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15f5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   15f5c:	6a3b      	ldr	r3, [r7, #32]
   15f5e:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
   15f62:	68bb      	ldr	r3, [r7, #8]
   15f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   15f66:	2b00      	cmp	r3, #0
   15f68:	d002      	beq.n	15f70 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
                em->handler();
   15f6a:	68bb      	ldr	r3, [r7, #8]
   15f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   15f6e:	4798      	blx	r3
}
   15f70:	bf00      	nop
   15f72:	3734      	adds	r7, #52	; 0x34
   15f74:	46bd      	mov	sp, r7
   15f76:	bd90      	pop	{r4, r7, pc}
   15f78:	000173e5 	.word	0x000173e5
   15f7c:	00017415 	.word	0x00017415
   15f80:	0001733d 	.word	0x0001733d

00015f84 <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t>:
#include "string.h"

CO_HB_Consumer_Class	*ptrHBConsumerClass;
CO_HBconsNode_t         *ptrMonitoredNodes;

static void CO_HBcons_receive(void *object,const CO_CANrxMsg_t *msg){
   15f84:	b480      	push	{r7}
   15f86:	b085      	sub	sp, #20
   15f88:	af00      	add	r7, sp, #0
   15f8a:	6078      	str	r0, [r7, #4]
   15f8c:	6039      	str	r1, [r7, #0]
	CO_HBconsNode_t *HBconsNode;

	HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
   15f8e:	687b      	ldr	r3, [r7, #4]
   15f90:	60fb      	str	r3, [r7, #12]

	/* verify message length */
	if(msg->DLC == 1){
   15f92:	683b      	ldr	r3, [r7, #0]
   15f94:	7d1b      	ldrb	r3, [r3, #20]
   15f96:	2b01      	cmp	r3, #1
   15f98:	d106      	bne.n	15fa8 <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t+0x24>
		/* copy data and set 'new message' flag. */
		HBconsNode->NMTstate = msg->data[0];
   15f9a:	683b      	ldr	r3, [r7, #0]
   15f9c:	7d5a      	ldrb	r2, [r3, #21]
   15f9e:	68fb      	ldr	r3, [r7, #12]
   15fa0:	701a      	strb	r2, [r3, #0]
		HBconsNode->CANrxNew = true;
   15fa2:	68fb      	ldr	r3, [r7, #12]
   15fa4:	2201      	movs	r2, #1
   15fa6:	731a      	strb	r2, [r3, #12]
	}
	
	
	
}
   15fa8:	bf00      	nop
   15faa:	3714      	adds	r7, #20
   15fac:	46bd      	mov	sp, r7
   15fae:	bc80      	pop	{r7}
   15fb0:	4770      	bx	lr
	...

00015fb4 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm>:
static void CO_HBcons_monitoredNodeConfig(
CO_HBconsumer_t        *HBcons,
uint8_t                 idx,
uint32_t                HBconsTime)
{
   15fb4:	b590      	push	{r4, r7, lr}
   15fb6:	b08d      	sub	sp, #52	; 0x34
   15fb8:	af04      	add	r7, sp, #16
   15fba:	60f8      	str	r0, [r7, #12]
   15fbc:	460b      	mov	r3, r1
   15fbe:	607a      	str	r2, [r7, #4]
   15fc0:	72fb      	strb	r3, [r7, #11]
	uint32_t COB_ID;
	uint32_t NodeID;
	CO_HBconsNode_t *monitoredNode;

	if(idx >= HBcons->numberOfMonitoredNodes) return;
   15fc2:	7afb      	ldrb	r3, [r7, #11]
   15fc4:	461a      	mov	r2, r3
   15fc6:	68fb      	ldr	r3, [r7, #12]
   15fc8:	7b1b      	ldrb	r3, [r3, #12]
   15fca:	429a      	cmp	r2, r3
   15fcc:	da37      	bge.n	1603e <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8a>

//	NodeID = (uint32_t)((HBconsTime>>16)&0xFF);
	NodeID = (uint32_t)(idx);
   15fce:	7afb      	ldrb	r3, [r7, #11]
   15fd0:	61bb      	str	r3, [r7, #24]
	monitoredNode = &HBcons->monitoredNodes[idx];
   15fd2:	68fb      	ldr	r3, [r7, #12]
   15fd4:	689a      	ldr	r2, [r3, #8]
   15fd6:	7afb      	ldrb	r3, [r7, #11]
   15fd8:	011b      	lsls	r3, r3, #4
   15fda:	4413      	add	r3, r2
   15fdc:	617b      	str	r3, [r7, #20]
	monitoredNode->time = (uint32_t)HBconsTime;
   15fde:	697b      	ldr	r3, [r7, #20]
   15fe0:	687a      	ldr	r2, [r7, #4]
   15fe2:	609a      	str	r2, [r3, #8]
	monitoredNode->NMTstate = 0;
   15fe4:	697b      	ldr	r3, [r7, #20]
   15fe6:	2200      	movs	r2, #0
   15fe8:	701a      	strb	r2, [r3, #0]
	monitoredNode->monStarted = false;
   15fea:	697b      	ldr	r3, [r7, #20]
   15fec:	2200      	movs	r2, #0
   15fee:	705a      	strb	r2, [r3, #1]
//	COB_ID = (uint32_t)idx + 0x700;
	// 	/* is channel used */
	if(NodeID && monitoredNode->time){
   15ff0:	69bb      	ldr	r3, [r7, #24]
   15ff2:	2b00      	cmp	r3, #0
   15ff4:	d008      	beq.n	16008 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x54>
   15ff6:	697b      	ldr	r3, [r7, #20]
   15ff8:	689b      	ldr	r3, [r3, #8]
   15ffa:	2b00      	cmp	r3, #0
   15ffc:	d004      	beq.n	16008 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x54>
		COB_ID = NodeID + 0x700;
   15ffe:	69bb      	ldr	r3, [r7, #24]
   16000:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
   16004:	61fb      	str	r3, [r7, #28]
   16006:	e004      	b.n	16012 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x5e>
	}
	else{
		COB_ID = 0;
   16008:	2300      	movs	r3, #0
   1600a:	61fb      	str	r3, [r7, #28]
		monitoredNode->time = 0;
   1600c:	697b      	ldr	r3, [r7, #20]
   1600e:	2200      	movs	r2, #0
   16010:	609a      	str	r2, [r3, #8]
	}

	/* configure Heartbeat consumer CAN reception */
	canopen_driver->CAN_Rx_BufferInit(
   16012:	4b0d      	ldr	r3, [pc, #52]	; (16048 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x94>)
   16014:	6818      	ldr	r0, [r3, #0]
	HBcons->CANdevRxIdxStart + idx,
   16016:	68fb      	ldr	r3, [r7, #12]
   16018:	695b      	ldr	r3, [r3, #20]
	canopen_driver->CAN_Rx_BufferInit(
   1601a:	7afa      	ldrb	r2, [r7, #11]
   1601c:	1899      	adds	r1, r3, r2
	COB_ID,
	0x7FF,
	0,
	(void*)&HBcons->monitoredNodes[idx],
   1601e:	68fb      	ldr	r3, [r7, #12]
   16020:	689a      	ldr	r2, [r3, #8]
   16022:	7afb      	ldrb	r3, [r7, #11]
   16024:	011b      	lsls	r3, r3, #4
   16026:	4413      	add	r3, r2
	CO_HBcons_receive);
   16028:	4a08      	ldr	r2, [pc, #32]	; (1604c <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x98>)
   1602a:	9202      	str	r2, [sp, #8]
   1602c:	9301      	str	r3, [sp, #4]
   1602e:	2300      	movs	r3, #0
   16030:	9300      	str	r3, [sp, #0]
   16032:	f240 73ff 	movw	r3, #2047	; 0x7ff
   16036:	69fa      	ldr	r2, [r7, #28]
   16038:	4c05      	ldr	r4, [pc, #20]	; (16050 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x9c>)
   1603a:	47a0      	blx	r4
   1603c:	e000      	b.n	16040 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8c>
	if(idx >= HBcons->numberOfMonitoredNodes) return;
   1603e:	bf00      	nop
}
   16040:	3724      	adds	r7, #36	; 0x24
   16042:	46bd      	mov	sp, r7
   16044:	bd90      	pop	{r4, r7, pc}
   16046:	bf00      	nop
   16048:	2000da0c 	.word	0x2000da0c
   1604c:	00015f85 	.word	0x00015f85
   16050:	000157c1 	.word	0x000157c1

00016054 <_ZL11CO_ODF_1016P12CO_ODF_arg_t>:
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg){
   16054:	b580      	push	{r7, lr}
   16056:	b08c      	sub	sp, #48	; 0x30
   16058:	af00      	add	r7, sp, #0
   1605a:	6078      	str	r0, [r7, #4]
	CO_HBconsumer_t *HBcons;
	uint32_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   1605c:	2300      	movs	r3, #0
   1605e:	62fb      	str	r3, [r7, #44]	; 0x2c

	HBcons = (CO_HBconsumer_t*) ODF_arg->object;
   16060:	687b      	ldr	r3, [r7, #4]
   16062:	681b      	ldr	r3, [r3, #0]
   16064:	627b      	str	r3, [r7, #36]	; 0x24
	value =canopen_driver->CO_getUint32(ODF_arg->data);
   16066:	4b32      	ldr	r3, [pc, #200]	; (16130 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xdc>)
   16068:	681b      	ldr	r3, [r3, #0]
   1606a:	1d1a      	adds	r2, r3, #4
   1606c:	687b      	ldr	r3, [r7, #4]
   1606e:	685b      	ldr	r3, [r3, #4]
   16070:	4619      	mov	r1, r3
   16072:	4610      	mov	r0, r2
   16074:	4b2f      	ldr	r3, [pc, #188]	; (16134 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe0>)
   16076:	4798      	blx	r3
   16078:	6238      	str	r0, [r7, #32]

	if(!ODF_arg->reading){
   1607a:	687b      	ldr	r3, [r7, #4]
   1607c:	7f5b      	ldrb	r3, [r3, #29]
   1607e:	2b00      	cmp	r3, #0
   16080:	d150      	bne.n	16124 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
		uint8_t NodeID;
		uint32_t HBconsTime;

		NodeID = (value >> 16U) & 0xFFU;
   16082:	6a3b      	ldr	r3, [r7, #32]
   16084:	0c1b      	lsrs	r3, r3, #16
   16086:	77fb      	strb	r3, [r7, #31]
		HBconsTime = value & 0xFFFFU;
   16088:	6a3b      	ldr	r3, [r7, #32]
   1608a:	b29b      	uxth	r3, r3
   1608c:	61bb      	str	r3, [r7, #24]

		if((value & 0xFF800000U) != 0){
   1608e:	6a3b      	ldr	r3, [r7, #32]
   16090:	0ddb      	lsrs	r3, r3, #23
   16092:	05db      	lsls	r3, r3, #23
   16094:	2b00      	cmp	r3, #0
   16096:	d002      	beq.n	1609e <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x4a>
			ret = CO_SDO_AB_PRAM_INCOMPAT;
   16098:	4b27      	ldr	r3, [pc, #156]	; (16138 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
   1609a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1609c:	e036      	b.n	1610c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
		}
		else if((HBconsTime != 0) && (NodeID != 0)){
   1609e:	69bb      	ldr	r3, [r7, #24]
   160a0:	2b00      	cmp	r3, #0
   160a2:	d02f      	beq.n	16104 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
   160a4:	7ffb      	ldrb	r3, [r7, #31]
   160a6:	2b00      	cmp	r3, #0
   160a8:	d02c      	beq.n	16104 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
			uint8_t i;
			/* there must not be more entries with same index and time different than zero */
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
   160aa:	2300      	movs	r3, #0
   160ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   160b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   160b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   160b6:	7b12      	ldrb	r2, [r2, #12]
   160b8:	4293      	cmp	r3, r2
   160ba:	da26      	bge.n	1610a <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb6>
				uint32_t objectCopy = HBcons->HBconsTime[i];
   160bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   160be:	685a      	ldr	r2, [r3, #4]
   160c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   160c4:	009b      	lsls	r3, r3, #2
   160c6:	4413      	add	r3, r2
   160c8:	681b      	ldr	r3, [r3, #0]
   160ca:	617b      	str	r3, [r7, #20]
				uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
   160cc:	697b      	ldr	r3, [r7, #20]
   160ce:	0c1b      	lsrs	r3, r3, #16
   160d0:	74fb      	strb	r3, [r7, #19]
				uint32_t HBconsTimeObj = objectCopy & 0xFFFFU;
   160d2:	697b      	ldr	r3, [r7, #20]
   160d4:	b29b      	uxth	r3, r3
   160d6:	60fb      	str	r3, [r7, #12]
				if(((ODF_arg->subIndex-1U) != i) && (HBconsTimeObj != 0) && (NodeID == NodeIDObj)){
   160d8:	687b      	ldr	r3, [r7, #4]
   160da:	7f1b      	ldrb	r3, [r3, #28]
   160dc:	1e5a      	subs	r2, r3, #1
   160de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   160e2:	429a      	cmp	r2, r3
   160e4:	d008      	beq.n	160f8 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
   160e6:	68fb      	ldr	r3, [r7, #12]
   160e8:	2b00      	cmp	r3, #0
   160ea:	d005      	beq.n	160f8 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
   160ec:	7ffa      	ldrb	r2, [r7, #31]
   160ee:	7cfb      	ldrb	r3, [r7, #19]
   160f0:	429a      	cmp	r2, r3
   160f2:	d101      	bne.n	160f8 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
					ret = CO_SDO_AB_PRAM_INCOMPAT;
   160f4:	4b10      	ldr	r3, [pc, #64]	; (16138 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
   160f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
   160f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   160fc:	3301      	adds	r3, #1
   160fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   16102:	e7d5      	b.n	160b0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x5c>
				}
			}
		}
		else{
			ret = CO_SDO_AB_NONE;
   16104:	2300      	movs	r3, #0
   16106:	62fb      	str	r3, [r7, #44]	; 0x2c
   16108:	e000      	b.n	1610c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
			}
   1610a:	bf00      	nop
		}

		/* Configure */
		if(ret == CO_SDO_AB_NONE){
   1610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1610e:	2b00      	cmp	r3, #0
   16110:	d108      	bne.n	16124 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
			CO_HBcons_monitoredNodeConfig(HBcons, ODF_arg->subIndex-1U, value);
   16112:	687b      	ldr	r3, [r7, #4]
   16114:	7f1b      	ldrb	r3, [r3, #28]
   16116:	3b01      	subs	r3, #1
   16118:	b2db      	uxtb	r3, r3
   1611a:	6a3a      	ldr	r2, [r7, #32]
   1611c:	4619      	mov	r1, r3
   1611e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   16120:	4b06      	ldr	r3, [pc, #24]	; (1613c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe8>)
   16122:	4798      	blx	r3
		}
	}

	return ret;
   16124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   16126:	4618      	mov	r0, r3
   16128:	3730      	adds	r7, #48	; 0x30
   1612a:	46bd      	mov	sp, r7
   1612c:	bd80      	pop	{r7, pc}
   1612e:	bf00      	nop
   16130:	2000da0c 	.word	0x2000da0c
   16134:	00017379 	.word	0x00017379
   16138:	06040043 	.word	0x06040043
   1613c:	00015fb5 	.word	0x00015fb5

00016140 <_ZN20CO_HB_Consumer_ClassC1Ev>:


// default constructor
CO_HB_Consumer_Class::CO_HB_Consumer_Class()
   16140:	b480      	push	{r7}
   16142:	b083      	sub	sp, #12
   16144:	af00      	add	r7, sp, #0
   16146:	6078      	str	r0, [r7, #4]
{
	ptrHBConsumerClass=this;
   16148:	4a04      	ldr	r2, [pc, #16]	; (1615c <_ZN20CO_HB_Consumer_ClassC1Ev+0x1c>)
   1614a:	687b      	ldr	r3, [r7, #4]
   1614c:	6013      	str	r3, [r2, #0]
} //CO_HB_Consumer_Class
   1614e:	687b      	ldr	r3, [r7, #4]
   16150:	4618      	mov	r0, r3
   16152:	370c      	adds	r7, #12
   16154:	46bd      	mov	sp, r7
   16156:	bc80      	pop	{r7}
   16158:	4770      	bx	lr
   1615a:	bf00      	nop
   1615c:	2000da14 	.word	0x2000da14

00016160 <_ZN20CO_HB_Consumer_ClassD1Ev>:

// default destructor
CO_HB_Consumer_Class::~CO_HB_Consumer_Class()
   16160:	b480      	push	{r7}
   16162:	b083      	sub	sp, #12
   16164:	af00      	add	r7, sp, #0
   16166:	6078      	str	r0, [r7, #4]
{
} //~CO_HB_Consumer_Class
   16168:	687b      	ldr	r3, [r7, #4]
   1616a:	4618      	mov	r0, r3
   1616c:	370c      	adds	r7, #12
   1616e:	46bd      	mov	sp, r7
   16170:	bc80      	pop	{r7}
   16172:	4770      	bx	lr

00016174 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm>:
const uint32_t          HBconsTime[],
CO_HBconsNode_t         monitoredNodes[],
uint8_t                 numberOfMonitoredNodes,
CO_CANmodule_t         *CANdevRx,
uint32_t                CANdevRxIdxStart)
{
   16174:	b590      	push	{r4, r7, lr}
   16176:	b089      	sub	sp, #36	; 0x24
   16178:	af02      	add	r7, sp, #8
   1617a:	60f8      	str	r0, [r7, #12]
   1617c:	60b9      	str	r1, [r7, #8]
   1617e:	607a      	str	r2, [r7, #4]
   16180:	603b      	str	r3, [r7, #0]
	uint8_t i;
	ptrMonitoredNodes=monitoredNodes;
   16182:	4a2b      	ldr	r2, [pc, #172]	; (16230 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xbc>)
   16184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16186:	6013      	str	r3, [r2, #0]
	/* verify arguments */
	if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
   16188:	68bb      	ldr	r3, [r7, #8]
   1618a:	2b00      	cmp	r3, #0
   1618c:	d00e      	beq.n	161ac <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
   1618e:	687b      	ldr	r3, [r7, #4]
   16190:	2b00      	cmp	r3, #0
   16192:	d00b      	beq.n	161ac <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
   16194:	683b      	ldr	r3, [r7, #0]
   16196:	2b00      	cmp	r3, #0
   16198:	d008      	beq.n	161ac <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
   1619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1619c:	2b00      	cmp	r3, #0
   1619e:	d005      	beq.n	161ac <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
   161a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   161a2:	2b00      	cmp	r3, #0
   161a4:	d002      	beq.n	161ac <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
	monitoredNodes==NULL || CANdevRx==NULL){
   161a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   161a8:	2b00      	cmp	r3, #0
   161aa:	d102      	bne.n	161b2 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x3e>
		return CO_ERROR_ILLEGAL_ARGUMENT;
   161ac:	f04f 33ff 	mov.w	r3, #4294967295
   161b0:	e039      	b.n	16226 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xb2>
	}

	/* Configure object variables */
	HBcons->em = em;
   161b2:	68bb      	ldr	r3, [r7, #8]
   161b4:	687a      	ldr	r2, [r7, #4]
   161b6:	601a      	str	r2, [r3, #0]
	HBcons->HBconsTime = HBconsTime;
   161b8:	68bb      	ldr	r3, [r7, #8]
   161ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
   161bc:	605a      	str	r2, [r3, #4]
	HBcons->monitoredNodes = monitoredNodes;
   161be:	68bb      	ldr	r3, [r7, #8]
   161c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   161c2:	609a      	str	r2, [r3, #8]
	HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
   161c4:	68bb      	ldr	r3, [r7, #8]
   161c6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
   161ca:	731a      	strb	r2, [r3, #12]
	HBcons->allMonitoredOperational = 0;
   161cc:	68bb      	ldr	r3, [r7, #8]
   161ce:	2200      	movs	r2, #0
   161d0:	735a      	strb	r2, [r3, #13]
	HBcons->CANdevRx = CANdevRx;
   161d2:	68bb      	ldr	r3, [r7, #8]
   161d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   161d6:	611a      	str	r2, [r3, #16]
	HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
   161d8:	68bb      	ldr	r3, [r7, #8]
   161da:	6bba      	ldr	r2, [r7, #56]	; 0x38
   161dc:	615a      	str	r2, [r3, #20]

	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
   161de:	2300      	movs	r3, #0
   161e0:	75fb      	strb	r3, [r7, #23]
   161e2:	7dfb      	ldrb	r3, [r7, #23]
   161e4:	68ba      	ldr	r2, [r7, #8]
   161e6:	7b12      	ldrb	r2, [r2, #12]
   161e8:	4293      	cmp	r3, r2
   161ea:	da0e      	bge.n	1620a <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x96>

			CO_HBcons_monitoredNodeConfig(HBcons, i, HBcons->HBconsTime[i]);
   161ec:	68bb      	ldr	r3, [r7, #8]
   161ee:	685a      	ldr	r2, [r3, #4]
   161f0:	7dfb      	ldrb	r3, [r7, #23]
   161f2:	009b      	lsls	r3, r3, #2
   161f4:	4413      	add	r3, r2
   161f6:	681a      	ldr	r2, [r3, #0]
   161f8:	7dfb      	ldrb	r3, [r7, #23]
   161fa:	4619      	mov	r1, r3
   161fc:	68b8      	ldr	r0, [r7, #8]
   161fe:	4b0d      	ldr	r3, [pc, #52]	; (16234 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc0>)
   16200:	4798      	blx	r3
	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
   16202:	7dfb      	ldrb	r3, [r7, #23]
   16204:	3301      	adds	r3, #1
   16206:	75fb      	strb	r3, [r7, #23]
   16208:	e7eb      	b.n	161e2 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x6e>
		
	}
	

	/* Configure Object dictionary entry at index 0x1016 */
	canopen_driver->CO_OD_configure( OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
   1620a:	4b0b      	ldr	r3, [pc, #44]	; (16238 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc4>)
   1620c:	681b      	ldr	r3, [r3, #0]
   1620e:	1d18      	adds	r0, r3, #4
   16210:	2300      	movs	r3, #0
   16212:	9301      	str	r3, [sp, #4]
   16214:	2300      	movs	r3, #0
   16216:	9300      	str	r3, [sp, #0]
   16218:	68bb      	ldr	r3, [r7, #8]
   1621a:	4a08      	ldr	r2, [pc, #32]	; (1623c <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc8>)
   1621c:	f241 0116 	movw	r1, #4118	; 0x1016
   16220:	4c07      	ldr	r4, [pc, #28]	; (16240 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xcc>)
   16222:	47a0      	blx	r4

	return CO_ERROR_NO;
   16224:	2300      	movs	r3, #0
}
   16226:	4618      	mov	r0, r3
   16228:	371c      	adds	r7, #28
   1622a:	46bd      	mov	sp, r7
   1622c:	bd90      	pop	{r4, r7, pc}
   1622e:	bf00      	nop
   16230:	2000da18 	.word	0x2000da18
   16234:	00015fb5 	.word	0x00015fb5
   16238:	2000da0c 	.word	0x2000da0c
   1623c:	00016055 	.word	0x00016055
   16240:	000177cd 	.word	0x000177cd

00016244 <_ZN20CO_HB_Consumer_Class10HB_SetNodeEh>:
		AllMonitoredOperationalCopy = 0;
	}
	HBcons->allMonitoredOperational = AllMonitoredOperationalCopy;
}

void	CO_HB_Consumer_Class::HB_SetNode(uint8_t nd){
   16244:	b480      	push	{r7}
   16246:	b083      	sub	sp, #12
   16248:	af00      	add	r7, sp, #0
   1624a:	6078      	str	r0, [r7, #4]
   1624c:	460b      	mov	r3, r1
   1624e:	70fb      	strb	r3, [r7, #3]
	coNode=nd;
   16250:	687b      	ldr	r3, [r7, #4]
   16252:	78fa      	ldrb	r2, [r7, #3]
   16254:	711a      	strb	r2, [r3, #4]
}
   16256:	bf00      	nop
   16258:	370c      	adds	r7, #12
   1625a:	46bd      	mov	sp, r7
   1625c:	bc80      	pop	{r7}
   1625e:	4770      	bx	lr

00016260 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t>:
#include "CO_Driver_Class.h"

 CO_NMT_t               *NMT;


static void CO_NMT_receive(void *object, const CO_CANrxMsg_t *msg){
   16260:	b580      	push	{r7, lr}
   16262:	b084      	sub	sp, #16
   16264:	af00      	add	r7, sp, #0
   16266:	6078      	str	r0, [r7, #4]
   16268:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
   1626a:	687b      	ldr	r3, [r7, #4]
   1626c:	60fb      	str	r3, [r7, #12]

    nodeId = msg->data[1];
   1626e:	683b      	ldr	r3, [r7, #0]
   16270:	7d9b      	ldrb	r3, [r3, #22]
   16272:	72fb      	strb	r3, [r7, #11]

    if((msg->DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
   16274:	683b      	ldr	r3, [r7, #0]
   16276:	7d1b      	ldrb	r3, [r3, #20]
   16278:	2b02      	cmp	r3, #2
   1627a:	d146      	bne.n	1630a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
   1627c:	7afb      	ldrb	r3, [r7, #11]
   1627e:	2b00      	cmp	r3, #0
   16280:	d004      	beq.n	1628c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x2c>
   16282:	68fb      	ldr	r3, [r7, #12]
   16284:	7a9b      	ldrb	r3, [r3, #10]
   16286:	7afa      	ldrb	r2, [r7, #11]
   16288:	429a      	cmp	r2, r3
   1628a:	d13e      	bne.n	1630a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
        uint8_t command = msg->data[0];
   1628c:	683b      	ldr	r3, [r7, #0]
   1628e:	7d5b      	ldrb	r3, [r3, #21]
   16290:	72bb      	strb	r3, [r7, #10]
        uint8_t currentOperatingState = NMT->operatingState;
   16292:	68fb      	ldr	r3, [r7, #12]
   16294:	781b      	ldrb	r3, [r3, #0]
   16296:	727b      	strb	r3, [r7, #9]

        switch(command){
   16298:	7abb      	ldrb	r3, [r7, #10]
   1629a:	2b80      	cmp	r3, #128	; 0x80
   1629c:	d019      	beq.n	162d2 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x72>
   1629e:	2b80      	cmp	r3, #128	; 0x80
   162a0:	dc04      	bgt.n	162ac <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x4c>
   162a2:	2b01      	cmp	r3, #1
   162a4:	d007      	beq.n	162b6 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x56>
   162a6:	2b02      	cmp	r3, #2
   162a8:	d00f      	beq.n	162ca <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x6a>
   162aa:	e01f      	b.n	162ec <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
   162ac:	2b81      	cmp	r3, #129	; 0x81
   162ae:	d014      	beq.n	162da <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x7a>
   162b0:	2b82      	cmp	r3, #130	; 0x82
   162b2:	d016      	beq.n	162e2 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x82>
   162b4:	e01a      	b.n	162ec <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_OPERATIONAL:
                if((*NMT->emPr->errorRegister) == 0U){
   162b6:	68fb      	ldr	r3, [r7, #12]
   162b8:	695b      	ldr	r3, [r3, #20]
   162ba:	681b      	ldr	r3, [r3, #0]
   162bc:	781b      	ldrb	r3, [r3, #0]
   162be:	2b00      	cmp	r3, #0
   162c0:	d113      	bne.n	162ea <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
   162c2:	68fb      	ldr	r3, [r7, #12]
   162c4:	2205      	movs	r2, #5
   162c6:	701a      	strb	r2, [r3, #0]
                }
                break;
   162c8:	e00f      	b.n	162ea <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
            case CO_NMT_ENTER_STOPPED:
                NMT->operatingState = CO_NMT_STOPPED;
   162ca:	68fb      	ldr	r3, [r7, #12]
   162cc:	2204      	movs	r2, #4
   162ce:	701a      	strb	r2, [r3, #0]
                break;
   162d0:	e00c      	b.n	162ec <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_PRE_OPERATIONAL:
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
   162d2:	68fb      	ldr	r3, [r7, #12]
   162d4:	227f      	movs	r2, #127	; 0x7f
   162d6:	701a      	strb	r2, [r3, #0]
                break;
   162d8:	e008      	b.n	162ec <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_NODE:
                NMT->resetCommand = CO_RESET_APP;
   162da:	68fb      	ldr	r3, [r7, #12]
   162dc:	2202      	movs	r2, #2
   162de:	725a      	strb	r2, [r3, #9]
                break;
   162e0:	e004      	b.n	162ec <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
   162e2:	68fb      	ldr	r3, [r7, #12]
   162e4:	2201      	movs	r2, #1
   162e6:	725a      	strb	r2, [r3, #9]
                break;
   162e8:	e000      	b.n	162ec <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
                break;
   162ea:	bf00      	nop
        }

        if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
   162ec:	68fb      	ldr	r3, [r7, #12]
   162ee:	69db      	ldr	r3, [r3, #28]
   162f0:	2b00      	cmp	r3, #0
   162f2:	d00a      	beq.n	1630a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
   162f4:	68fb      	ldr	r3, [r7, #12]
   162f6:	781b      	ldrb	r3, [r3, #0]
   162f8:	7a7a      	ldrb	r2, [r7, #9]
   162fa:	429a      	cmp	r2, r3
   162fc:	d005      	beq.n	1630a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
            NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
   162fe:	68fb      	ldr	r3, [r7, #12]
   16300:	69db      	ldr	r3, [r3, #28]
   16302:	68fa      	ldr	r2, [r7, #12]
   16304:	7812      	ldrb	r2, [r2, #0]
   16306:	4610      	mov	r0, r2
   16308:	4798      	blx	r3
        }
    }
}
   1630a:	bf00      	nop
   1630c:	3710      	adds	r7, #16
   1630e:	46bd      	mov	sp, r7
   16310:	bd80      	pop	{r7, pc}

00016312 <_ZN22CO_NMT_Heartbeat_ClassC1Ev>:
// default constructor
CO_NMT_Heartbeat_Class::CO_NMT_Heartbeat_Class()
   16312:	b480      	push	{r7}
   16314:	b083      	sub	sp, #12
   16316:	af00      	add	r7, sp, #0
   16318:	6078      	str	r0, [r7, #4]
{
} //CO_NMT_Heartbeat
   1631a:	687b      	ldr	r3, [r7, #4]
   1631c:	4618      	mov	r0, r3
   1631e:	370c      	adds	r7, #12
   16320:	46bd      	mov	sp, r7
   16322:	bc80      	pop	{r7}
   16324:	4770      	bx	lr

00016326 <_ZN22CO_NMT_Heartbeat_ClassD1Ev>:

// default destructor
CO_NMT_Heartbeat_Class::~CO_NMT_Heartbeat_Class()
   16326:	b480      	push	{r7}
   16328:	b083      	sub	sp, #12
   1632a:	af00      	add	r7, sp, #0
   1632c:	6078      	str	r0, [r7, #4]
{
} //~CO_NMT_Heartbeat
   1632e:	687b      	ldr	r3, [r7, #4]
   16330:	4618      	mov	r0, r3
   16332:	370c      	adds	r7, #12
   16334:	46bd      	mov	sp, r7
   16336:	bc80      	pop	{r7}
   16338:	4770      	bx	lr
	...

0001633c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm>:
        uint32_t                NMT_rxIdx,
        uint32_t                CANidRxNMT,
        CO_CANmodule_t         *HB_CANdev,
        uint32_t                HB_txIdx,
        uint32_t                CANidTxHB)
{
   1633c:	b5b0      	push	{r4, r5, r7, lr}
   1633e:	b088      	sub	sp, #32
   16340:	af04      	add	r7, sp, #16
   16342:	60f8      	str	r0, [r7, #12]
   16344:	60b9      	str	r1, [r7, #8]
   16346:	607a      	str	r2, [r7, #4]
   16348:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if(NMT_Init==NULL || emPr==NULL || NMT_CANdev==NULL || HB_CANdev==NULL){
   1634a:	68bb      	ldr	r3, [r7, #8]
   1634c:	2b00      	cmp	r3, #0
   1634e:	d008      	beq.n	16362 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
   16350:	687b      	ldr	r3, [r7, #4]
   16352:	2b00      	cmp	r3, #0
   16354:	d005      	beq.n	16362 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
   16356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16358:	2b00      	cmp	r3, #0
   1635a:	d002      	beq.n	16362 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
   1635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1635e:	2b00      	cmp	r3, #0
   16360:	d102      	bne.n	16368 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   16362:	f04f 33ff 	mov.w	r3, #4294967295
   16366:	e062      	b.n	1642e <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xf2>
    }else{
		NMT=NMT_Init;
   16368:	4a33      	ldr	r2, [pc, #204]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   1636a:	68bb      	ldr	r3, [r7, #8]
   1636c:	6013      	str	r3, [r2, #0]
	}

    /* blinking bytes */
    NMT->LEDflickering          = 0;
   1636e:	4b32      	ldr	r3, [pc, #200]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16370:	681b      	ldr	r3, [r3, #0]
   16372:	2200      	movs	r2, #0
   16374:	705a      	strb	r2, [r3, #1]
    NMT->LEDblinking            = 0;
   16376:	4b30      	ldr	r3, [pc, #192]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16378:	681b      	ldr	r3, [r3, #0]
   1637a:	2200      	movs	r2, #0
   1637c:	709a      	strb	r2, [r3, #2]
    NMT->LEDsingleFlash         = 0;
   1637e:	4b2e      	ldr	r3, [pc, #184]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16380:	681b      	ldr	r3, [r3, #0]
   16382:	2200      	movs	r2, #0
   16384:	70da      	strb	r2, [r3, #3]
    NMT->LEDdoubleFlash         = 0;
   16386:	4b2c      	ldr	r3, [pc, #176]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16388:	681b      	ldr	r3, [r3, #0]
   1638a:	2200      	movs	r2, #0
   1638c:	711a      	strb	r2, [r3, #4]
    NMT->LEDtripleFlash         = 0;
   1638e:	4b2a      	ldr	r3, [pc, #168]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16390:	681b      	ldr	r3, [r3, #0]
   16392:	2200      	movs	r2, #0
   16394:	715a      	strb	r2, [r3, #5]
    NMT->LEDquadrupleFlash      = 0;
   16396:	4b28      	ldr	r3, [pc, #160]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16398:	681b      	ldr	r3, [r3, #0]
   1639a:	2200      	movs	r2, #0
   1639c:	719a      	strb	r2, [r3, #6]

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
   1639e:	4b26      	ldr	r3, [pc, #152]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   163a0:	681b      	ldr	r3, [r3, #0]
   163a2:	2200      	movs	r2, #0
   163a4:	701a      	strb	r2, [r3, #0]
    NMT->LEDgreenRun            = -1;
   163a6:	4b24      	ldr	r3, [pc, #144]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   163a8:	681b      	ldr	r3, [r3, #0]
   163aa:	22ff      	movs	r2, #255	; 0xff
   163ac:	71da      	strb	r2, [r3, #7]
    NMT->LEDredError            = 1;
   163ae:	4b22      	ldr	r3, [pc, #136]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   163b0:	681b      	ldr	r3, [r3, #0]
   163b2:	2201      	movs	r2, #1
   163b4:	721a      	strb	r2, [r3, #8]
    NMT->nodeId                 = nodeId;
   163b6:	4b20      	ldr	r3, [pc, #128]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   163b8:	681b      	ldr	r3, [r3, #0]
   163ba:	78fa      	ldrb	r2, [r7, #3]
   163bc:	729a      	strb	r2, [r3, #10]
    NMT->firstHBTime            = firstHBTime;
   163be:	4b1e      	ldr	r3, [pc, #120]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   163c0:	681b      	ldr	r3, [r3, #0]
   163c2:	6a3a      	ldr	r2, [r7, #32]
   163c4:	611a      	str	r2, [r3, #16]
    NMT->resetCommand           = 0;
   163c6:	4b1c      	ldr	r3, [pc, #112]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   163c8:	681b      	ldr	r3, [r3, #0]
   163ca:	2200      	movs	r2, #0
   163cc:	725a      	strb	r2, [r3, #9]
    NMT->HBproducerTimer        = 0xFFFF;
   163ce:	4b1a      	ldr	r3, [pc, #104]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   163d0:	681b      	ldr	r3, [r3, #0]
   163d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   163d6:	60da      	str	r2, [r3, #12]
    NMT->emPr                   = emPr;
   163d8:	4b17      	ldr	r3, [pc, #92]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   163da:	681b      	ldr	r3, [r3, #0]
   163dc:	687a      	ldr	r2, [r7, #4]
   163de:	615a      	str	r2, [r3, #20]
    NMT->ptrState             = NULL;
   163e0:	4b15      	ldr	r3, [pc, #84]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   163e2:	681b      	ldr	r3, [r3, #0]
   163e4:	2200      	movs	r2, #0
   163e6:	61da      	str	r2, [r3, #28]

    /* configure NMT CAN reception */
   canopen_driver->CAN_Rx_BufferInit(
   163e8:	4b14      	ldr	r3, [pc, #80]	; (1643c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
   163ea:	6818      	ldr	r0, [r3, #0]
   163ec:	4b12      	ldr	r3, [pc, #72]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   163ee:	681b      	ldr	r3, [r3, #0]
            NMT_rxIdx,          /* rx buffer index */
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message */
   163f0:	4a13      	ldr	r2, [pc, #76]	; (16440 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x104>)
   163f2:	9202      	str	r2, [sp, #8]
   163f4:	9301      	str	r3, [sp, #4]
   163f6:	2300      	movs	r3, #0
   163f8:	9300      	str	r3, [sp, #0]
   163fa:	f240 73ff 	movw	r3, #2047	; 0x7ff
   163fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16400:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   16402:	4c10      	ldr	r4, [pc, #64]	; (16444 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x108>)
   16404:	47a0      	blx	r4

    /* configure HB CAN transmission */
    NMT->HB_CANdev = HB_CANdev;
   16406:	4b0c      	ldr	r3, [pc, #48]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16408:	681b      	ldr	r3, [r3, #0]
   1640a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1640c:	619a      	str	r2, [r3, #24]
    NMT->HB_TXbuff =canopen_driver->CAN_Tx_BufferInit(
   1640e:	4b0a      	ldr	r3, [pc, #40]	; (16438 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16410:	681c      	ldr	r4, [r3, #0]
   16412:	4b0a      	ldr	r3, [pc, #40]	; (1643c <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
   16414:	6818      	ldr	r0, [r3, #0]
   16416:	2300      	movs	r3, #0
   16418:	9301      	str	r3, [sp, #4]
   1641a:	2301      	movs	r3, #1
   1641c:	9300      	str	r3, [sp, #0]
   1641e:	2300      	movs	r3, #0
   16420:	6bba      	ldr	r2, [r7, #56]	; 0x38
   16422:	6b79      	ldr	r1, [r7, #52]	; 0x34
   16424:	4d08      	ldr	r5, [pc, #32]	; (16448 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x10c>)
   16426:	47a8      	blx	r5
   16428:	4603      	mov	r3, r0
   1642a:	6223      	str	r3, [r4, #32]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
   1642c:	2300      	movs	r3, #0
}
   1642e:	4618      	mov	r0, r3
   16430:	3710      	adds	r7, #16
   16432:	46bd      	mov	sp, r7
   16434:	bdb0      	pop	{r4, r5, r7, pc}
   16436:	bf00      	nop
   16438:	2000da1c 	.word	0x2000da1c
   1643c:	2000da0c 	.word	0x2000da0c
   16440:	00016261 	.word	0x00016261
   16444:	000157c1 	.word	0x000157c1
   16448:	000158c1 	.word	0x000158c1

0001644c <_ZN11CO_OD_ClassC1Ev>:
{0x6401, 0x0C, 0xB6,  2, (void*)&CO_OD_RAM.readAnalogueInput16Bit[0]},
{0x6411, 0x08, 0xBE,  2, (void*)&CO_OD_RAM.writeAnalogueOutput16Bit[0]},
};

// default constructor
CO_OD_Class::CO_OD_Class()
   1644c:	b480      	push	{r7}
   1644e:	b083      	sub	sp, #12
   16450:	af00      	add	r7, sp, #0
   16452:	6078      	str	r0, [r7, #4]
{
} //CO_OD
   16454:	687b      	ldr	r3, [r7, #4]
   16456:	4618      	mov	r0, r3
   16458:	370c      	adds	r7, #12
   1645a:	46bd      	mov	sp, r7
   1645c:	bc80      	pop	{r7}
   1645e:	4770      	bx	lr

00016460 <_ZN11CO_OD_ClassD1Ev>:

// default destructor
CO_OD_Class::~CO_OD_Class()
   16460:	b480      	push	{r7}
   16462:	b083      	sub	sp, #12
   16464:	af00      	add	r7, sp, #0
   16466:	6078      	str	r0, [r7, #4]
{
} //~CO_OD
   16468:	687b      	ldr	r3, [r7, #4]
   1646a:	4618      	mov	r0, r3
   1646c:	370c      	adds	r7, #12
   1646e:	46bd      	mov	sp, r7
   16470:	bc80      	pop	{r7}
   16472:	4770      	bx	lr

00016474 <_ZN12CO_PDO_ClassC1Ev>:
#include "string.h"

static CO_CANtx_t local_tx_buffer;
static CO_CANtx_t local_rx_buffer;
// default constructor
CO_PDO_Class::CO_PDO_Class()
   16474:	b480      	push	{r7}
   16476:	b083      	sub	sp, #12
   16478:	af00      	add	r7, sp, #0
   1647a:	6078      	str	r0, [r7, #4]
{
} //CO_PDO_Class
   1647c:	687b      	ldr	r3, [r7, #4]
   1647e:	4618      	mov	r0, r3
   16480:	370c      	adds	r7, #12
   16482:	46bd      	mov	sp, r7
   16484:	bc80      	pop	{r7}
   16486:	4770      	bx	lr

00016488 <_ZN12CO_PDO_ClassD1Ev>:

// default destructor
CO_PDO_Class::~CO_PDO_Class()
   16488:	b480      	push	{r7}
   1648a:	b083      	sub	sp, #12
   1648c:	af00      	add	r7, sp, #0
   1648e:	6078      	str	r0, [r7, #4]
{
} //~CO_PDO_Class
   16490:	687b      	ldr	r3, [r7, #4]
   16492:	4618      	mov	r0, r3
   16494:	370c      	adds	r7, #12
   16496:	46bd      	mov	sp, r7
   16498:	bc80      	pop	{r7}
   1649a:	4770      	bx	lr

0001649c <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, const CO_CANrxMsg_t *msg){
   1649c:	b580      	push	{r7, lr}
   1649e:	b084      	sub	sp, #16
   164a0:	af00      	add	r7, sp, #0
   164a2:	6078      	str	r0, [r7, #4]
   164a4:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
   164a6:	687b      	ldr	r3, [r7, #4]
   164a8:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
   164aa:	68fb      	ldr	r3, [r7, #12]
   164ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   164b0:	2b00      	cmp	r3, #0
   164b2:	d076      	beq.n	165a2 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
   164b4:	68fb      	ldr	r3, [r7, #12]
   164b6:	695b      	ldr	r3, [r3, #20]
   164b8:	781b      	ldrb	r3, [r3, #0]
    if( (RPDO->valid) &&
   164ba:	2b05      	cmp	r3, #5
   164bc:	d171      	bne.n	165a2 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
        (msg->DLC >= RPDO->dataLength))
   164be:	683b      	ldr	r3, [r7, #0]
   164c0:	7d1b      	ldrb	r3, [r3, #20]
   164c2:	461a      	mov	r2, r3
   164c4:	68fb      	ldr	r3, [r7, #12]
   164c6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
   164ca:	429a      	cmp	r2, r3
   164cc:	db69      	blt.n	165a2 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
    {
        if(RPDO->synchronous && RPDO->SYNC->CANrxToggle) {
   164ce:	68fb      	ldr	r3, [r7, #12]
   164d0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   164d4:	2b00      	cmp	r3, #0
   164d6:	d031      	beq.n	1653c <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa0>
   164d8:	68fb      	ldr	r3, [r7, #12]
   164da:	689b      	ldr	r3, [r3, #8]
   164dc:	7edb      	ldrb	r3, [r3, #27]
   164de:	2b00      	cmp	r3, #0
   164e0:	d02c      	beq.n	1653c <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa0>
            /* copy data into second buffer and set 'new message' flag */
            RPDO->CANrxData[1][0] = msg->data[0];
   164e2:	683b      	ldr	r3, [r7, #0]
   164e4:	7d5a      	ldrb	r2, [r3, #21]
   164e6:	68fb      	ldr	r3, [r7, #12]
   164e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            RPDO->CANrxData[1][1] = msg->data[1];
   164ec:	683b      	ldr	r3, [r7, #0]
   164ee:	7d9a      	ldrb	r2, [r3, #22]
   164f0:	68fb      	ldr	r3, [r7, #12]
   164f2:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            RPDO->CANrxData[1][2] = msg->data[2];
   164f6:	683b      	ldr	r3, [r7, #0]
   164f8:	7dda      	ldrb	r2, [r3, #23]
   164fa:	68fb      	ldr	r3, [r7, #12]
   164fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            RPDO->CANrxData[1][3] = msg->data[3];
   16500:	683b      	ldr	r3, [r7, #0]
   16502:	7e1a      	ldrb	r2, [r3, #24]
   16504:	68fb      	ldr	r3, [r7, #12]
   16506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            RPDO->CANrxData[1][4] = msg->data[4];
   1650a:	683b      	ldr	r3, [r7, #0]
   1650c:	7e5a      	ldrb	r2, [r3, #25]
   1650e:	68fb      	ldr	r3, [r7, #12]
   16510:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            RPDO->CANrxData[1][5] = msg->data[5];
   16514:	683b      	ldr	r3, [r7, #0]
   16516:	7e9a      	ldrb	r2, [r3, #26]
   16518:	68fb      	ldr	r3, [r7, #12]
   1651a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            RPDO->CANrxData[1][6] = msg->data[6];
   1651e:	683b      	ldr	r3, [r7, #0]
   16520:	7eda      	ldrb	r2, [r3, #27]
   16522:	68fb      	ldr	r3, [r7, #12]
   16524:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            RPDO->CANrxData[1][7] = msg->data[7];
   16528:	683b      	ldr	r3, [r7, #0]
   1652a:	7f1a      	ldrb	r2, [r3, #28]
   1652c:	68fb      	ldr	r3, [r7, #12]
   1652e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

            RPDO->CANrxNew[1] = true;
   16532:	68fb      	ldr	r3, [r7, #12]
   16534:	2201      	movs	r2, #1
   16536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1653a:	e02b      	b.n	16594 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xf8>
        }
        else {
            /* copy data into default buffer and set 'new message' flag */
            RPDO->CANrxData[0][0] = msg->data[0];
   1653c:	683b      	ldr	r3, [r7, #0]
   1653e:	7d5a      	ldrb	r2, [r3, #21]
   16540:	68fb      	ldr	r3, [r7, #12]
   16542:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            RPDO->CANrxData[0][1] = msg->data[1];
   16546:	683b      	ldr	r3, [r7, #0]
   16548:	7d9a      	ldrb	r2, [r3, #22]
   1654a:	68fb      	ldr	r3, [r7, #12]
   1654c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            RPDO->CANrxData[0][2] = msg->data[2];
   16550:	683b      	ldr	r3, [r7, #0]
   16552:	7dda      	ldrb	r2, [r3, #23]
   16554:	68fb      	ldr	r3, [r7, #12]
   16556:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            RPDO->CANrxData[0][3] = msg->data[3];
   1655a:	683b      	ldr	r3, [r7, #0]
   1655c:	7e1a      	ldrb	r2, [r3, #24]
   1655e:	68fb      	ldr	r3, [r7, #12]
   16560:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            RPDO->CANrxData[0][4] = msg->data[4];
   16564:	683b      	ldr	r3, [r7, #0]
   16566:	7e5a      	ldrb	r2, [r3, #25]
   16568:	68fb      	ldr	r3, [r7, #12]
   1656a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            RPDO->CANrxData[0][5] = msg->data[5];
   1656e:	683b      	ldr	r3, [r7, #0]
   16570:	7e9a      	ldrb	r2, [r3, #26]
   16572:	68fb      	ldr	r3, [r7, #12]
   16574:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
            RPDO->CANrxData[0][6] = msg->data[6];
   16578:	683b      	ldr	r3, [r7, #0]
   1657a:	7eda      	ldrb	r2, [r3, #27]
   1657c:	68fb      	ldr	r3, [r7, #12]
   1657e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            RPDO->CANrxData[0][7] = msg->data[7];
   16582:	683b      	ldr	r3, [r7, #0]
   16584:	7f1a      	ldrb	r2, [r3, #28]
   16586:	68fb      	ldr	r3, [r7, #12]
   16588:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

            RPDO->CANrxNew[0] = true;
   1658c:	68fb      	ldr	r3, [r7, #12]
   1658e:	2201      	movs	r2, #1
   16590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        }
		memcpy(&local_rx_buffer.data[0],(void *)(&msg->data[0]),8);
   16594:	683b      	ldr	r3, [r7, #0]
   16596:	3315      	adds	r3, #21
   16598:	2208      	movs	r2, #8
   1659a:	4619      	mov	r1, r3
   1659c:	4803      	ldr	r0, [pc, #12]	; (165ac <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x110>)
   1659e:	4b04      	ldr	r3, [pc, #16]	; (165b0 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x114>)
   165a0:	4798      	blx	r3
    }
}
   165a2:	bf00      	nop
   165a4:	3710      	adds	r7, #16
   165a6:	46bd      	mov	sp, r7
   165a8:	bd80      	pop	{r7, pc}
   165aa:	bf00      	nop
   165ac:	2000da35 	.word	0x2000da35
   165b0:	0001a635 	.word	0x0001a635

000165b4 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
   165b4:	b590      	push	{r4, r7, lr}
   165b6:	b089      	sub	sp, #36	; 0x24
   165b8:	af04      	add	r7, sp, #16
   165ba:	6078      	str	r0, [r7, #4]
   165bc:	6039      	str	r1, [r7, #0]
    uint32_t ID;
    CO_ReturnError_t r;

    ID = (uint32_t)COB_IDUsedByRPDO;
   165be:	683b      	ldr	r3, [r7, #0]
   165c0:	60fb      	str	r3, [r7, #12]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
   165c2:	683a      	ldr	r2, [r7, #0]
   165c4:	4b2d      	ldr	r3, [pc, #180]	; (1667c <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xc8>)
   165c6:	4013      	ands	r3, r2
   165c8:	2b00      	cmp	r3, #0
   165ca:	d123      	bne.n	16614 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
   165cc:	687b      	ldr	r3, [r7, #4]
   165ce:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   165d2:	2b00      	cmp	r3, #0
   165d4:	d01e      	beq.n	16614 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
   165d6:	68fb      	ldr	r3, [r7, #12]
   165d8:	2b00      	cmp	r3, #0
   165da:	d01b      	beq.n	16614 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
   165dc:	687b      	ldr	r3, [r7, #4]
   165de:	69da      	ldr	r2, [r3, #28]
   165e0:	68fb      	ldr	r3, [r7, #12]
   165e2:	429a      	cmp	r2, r3
   165e4:	d105      	bne.n	165f2 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x3e>
   165e6:	687b      	ldr	r3, [r7, #4]
   165e8:	7e1b      	ldrb	r3, [r3, #24]
   165ea:	461a      	mov	r2, r3
   165ec:	68fb      	ldr	r3, [r7, #12]
   165ee:	4413      	add	r3, r2
   165f0:	60fb      	str	r3, [r7, #12]
        RPDO->valid = true;
   165f2:	687b      	ldr	r3, [r7, #4]
   165f4:	2201      	movs	r2, #1
   165f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
   165fa:	687b      	ldr	r3, [r7, #4]
   165fc:	68db      	ldr	r3, [r3, #12]
   165fe:	7a1b      	ldrb	r3, [r3, #8]
   16600:	2bf0      	cmp	r3, #240	; 0xf0
   16602:	bfd4      	ite	le
   16604:	2301      	movle	r3, #1
   16606:	2300      	movgt	r3, #0
   16608:	b2db      	uxtb	r3, r3
   1660a:	461a      	mov	r2, r3
   1660c:	687b      	ldr	r3, [r7, #4]
   1660e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   16612:	e00d      	b.n	16630 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x7c>
    }
    else{
        ID = 0;
   16614:	2300      	movs	r3, #0
   16616:	60fb      	str	r3, [r7, #12]
        RPDO->valid = false;
   16618:	687b      	ldr	r3, [r7, #4]
   1661a:	2200      	movs	r2, #0
   1661c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   16620:	687b      	ldr	r3, [r7, #4]
   16622:	2200      	movs	r2, #0
   16624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   16628:	687b      	ldr	r3, [r7, #4]
   1662a:	2200      	movs	r2, #0
   1662c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    r = canopen_driver->CAN_Rx_BufferInit(
   16630:	4b13      	ldr	r3, [pc, #76]	; (16680 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xcc>)
   16632:	6818      	ldr	r0, [r3, #0]
   16634:	687b      	ldr	r3, [r7, #4]
   16636:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
            RPDO->CANdevRxIdx,      /* rx buffer index */
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
   16638:	4b12      	ldr	r3, [pc, #72]	; (16684 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd0>)
   1663a:	9302      	str	r3, [sp, #8]
   1663c:	687b      	ldr	r3, [r7, #4]
   1663e:	9301      	str	r3, [sp, #4]
   16640:	2300      	movs	r3, #0
   16642:	9300      	str	r3, [sp, #0]
   16644:	f240 73ff 	movw	r3, #2047	; 0x7ff
   16648:	68fa      	ldr	r2, [r7, #12]
   1664a:	4c0f      	ldr	r4, [pc, #60]	; (16688 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd4>)
   1664c:	47a0      	blx	r4
   1664e:	4603      	mov	r3, r0
   16650:	72fb      	strb	r3, [r7, #11]
    if(r != CO_ERROR_NO){
   16652:	f997 300b 	ldrsb.w	r3, [r7, #11]
   16656:	2b00      	cmp	r3, #0
   16658:	d00b      	beq.n	16672 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xbe>
        RPDO->valid = false;
   1665a:	687b      	ldr	r3, [r7, #4]
   1665c:	2200      	movs	r2, #0
   1665e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   16662:	687b      	ldr	r3, [r7, #4]
   16664:	2200      	movs	r2, #0
   16666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1666a:	687b      	ldr	r3, [r7, #4]
   1666c:	2200      	movs	r2, #0
   1666e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
   16672:	bf00      	nop
   16674:	3714      	adds	r7, #20
   16676:	46bd      	mov	sp, r7
   16678:	bd90      	pop	{r4, r7, pc}
   1667a:	bf00      	nop
   1667c:	bffff800 	.word	0xbffff800
   16680:	2000da0c 	.word	0x2000da0c
   16684:	0001649d 	.word	0x0001649d
   16688:	000157c1 	.word	0x000157c1

0001668c <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
   1668c:	b590      	push	{r4, r7, lr}
   1668e:	b089      	sub	sp, #36	; 0x24
   16690:	af02      	add	r7, sp, #8
   16692:	60f8      	str	r0, [r7, #12]
   16694:	60b9      	str	r1, [r7, #8]
   16696:	4613      	mov	r3, r2
   16698:	71fb      	strb	r3, [r7, #7]
    uint32_t ID;

    ID = (uint32_t)COB_IDUsedByTPDO;
   1669a:	68bb      	ldr	r3, [r7, #8]
   1669c:	617b      	str	r3, [r7, #20]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
   1669e:	68ba      	ldr	r2, [r7, #8]
   166a0:	4b1c      	ldr	r3, [pc, #112]	; (16714 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x88>)
   166a2:	4013      	ands	r3, r2
   166a4:	2b00      	cmp	r3, #0
   166a6:	d115      	bne.n	166d4 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
   166a8:	68fb      	ldr	r3, [r7, #12]
   166aa:	7f9b      	ldrb	r3, [r3, #30]
   166ac:	2b00      	cmp	r3, #0
   166ae:	d011      	beq.n	166d4 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
   166b0:	697b      	ldr	r3, [r7, #20]
   166b2:	2b00      	cmp	r3, #0
   166b4:	d00e      	beq.n	166d4 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
   166b6:	68fb      	ldr	r3, [r7, #12]
   166b8:	699a      	ldr	r2, [r3, #24]
   166ba:	697b      	ldr	r3, [r7, #20]
   166bc:	429a      	cmp	r2, r3
   166be:	d105      	bne.n	166cc <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x40>
   166c0:	68fb      	ldr	r3, [r7, #12]
   166c2:	7d1b      	ldrb	r3, [r3, #20]
   166c4:	461a      	mov	r2, r3
   166c6:	697b      	ldr	r3, [r7, #20]
   166c8:	4413      	add	r3, r2
   166ca:	617b      	str	r3, [r7, #20]
        TPDO->valid = true;
   166cc:	68fb      	ldr	r3, [r7, #12]
   166ce:	2201      	movs	r2, #1
   166d0:	775a      	strb	r2, [r3, #29]
   166d2:	e004      	b.n	166de <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x52>
    }
    else{
        ID = 0;
   166d4:	2300      	movs	r3, #0
   166d6:	617b      	str	r3, [r7, #20]
        TPDO->valid = false;
   166d8:	68fb      	ldr	r3, [r7, #12]
   166da:	2200      	movs	r2, #0
   166dc:	775a      	strb	r2, [r3, #29]
    }

    TPDO->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
   166de:	4b0e      	ldr	r3, [pc, #56]	; (16718 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x8c>)
   166e0:	6818      	ldr	r0, [r3, #0]
   166e2:	68fb      	ldr	r3, [r7, #12]
   166e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
   166e6:	68fb      	ldr	r3, [r7, #12]
   166e8:	7f9b      	ldrb	r3, [r3, #30]
   166ea:	79fa      	ldrb	r2, [r7, #7]
   166ec:	9201      	str	r2, [sp, #4]
   166ee:	9300      	str	r3, [sp, #0]
   166f0:	2300      	movs	r3, #0
   166f2:	697a      	ldr	r2, [r7, #20]
   166f4:	4c09      	ldr	r4, [pc, #36]	; (1671c <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x90>)
   166f6:	47a0      	blx	r4
   166f8:	4602      	mov	r2, r0
   166fa:	68fb      	ldr	r3, [r7, #12]
   166fc:	651a      	str	r2, [r3, #80]	; 0x50
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
   166fe:	68fb      	ldr	r3, [r7, #12]
   16700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   16702:	2b00      	cmp	r3, #0
   16704:	d102      	bne.n	1670c <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x80>
        TPDO->valid = false;
   16706:	68fb      	ldr	r3, [r7, #12]
   16708:	2200      	movs	r2, #0
   1670a:	775a      	strb	r2, [r3, #29]
    }
}
   1670c:	bf00      	nop
   1670e:	371c      	adds	r7, #28
   16710:	46bd      	mov	sp, r7
   16712:	bd90      	pop	{r4, r7, pc}
   16714:	bffff800 	.word	0xbffff800
   16718:	2000da0c 	.word	0x2000da0c
   1671c:	000158c1 	.word	0x000158c1

00016720 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
   16720:	b580      	push	{r7, lr}
   16722:	b08a      	sub	sp, #40	; 0x28
   16724:	af00      	add	r7, sp, #0
   16726:	60f8      	str	r0, [r7, #12]
   16728:	60b9      	str	r1, [r7, #8]
   1672a:	603b      	str	r3, [r7, #0]
   1672c:	4613      	mov	r3, r2
   1672e:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint32_t)(map>>16);
   16730:	68bb      	ldr	r3, [r7, #8]
   16732:	0c1b      	lsrs	r3, r3, #16
   16734:	61fb      	str	r3, [r7, #28]
    subIndex = (uint8_t)(map>>8);
   16736:	68bb      	ldr	r3, [r7, #8]
   16738:	0a1b      	lsrs	r3, r3, #8
   1673a:	76fb      	strb	r3, [r7, #27]
    dataLen = (uint8_t) map;   /* data length in bits */
   1673c:	68bb      	ldr	r3, [r7, #8]
   1673e:	76bb      	strb	r3, [r7, #26]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   16740:	7ebb      	ldrb	r3, [r7, #26]
   16742:	f003 0307 	and.w	r3, r3, #7
   16746:	2b00      	cmp	r3, #0
   16748:	d001      	beq.n	1674e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x2e>
   1674a:	4b6b      	ldr	r3, [pc, #428]	; (168f8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   1674c:	e0cf      	b.n	168ee <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    dataLen >>= 3;    /* new data length is in bytes */
   1674e:	7ebb      	ldrb	r3, [r7, #26]
   16750:	10db      	asrs	r3, r3, #3
   16752:	76bb      	strb	r3, [r7, #26]
    *pLength += dataLen;
   16754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16756:	781a      	ldrb	r2, [r3, #0]
   16758:	7ebb      	ldrb	r3, [r7, #26]
   1675a:	4413      	add	r3, r2
   1675c:	b2da      	uxtb	r2, r3
   1675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16760:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
   16762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16764:	781b      	ldrb	r3, [r3, #0]
   16766:	2b08      	cmp	r3, #8
   16768:	dd01      	ble.n	1676e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x4e>
   1676a:	4b64      	ldr	r3, [pc, #400]	; (168fc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1dc>)
   1676c:	e0bf      	b.n	168ee <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
   1676e:	69fb      	ldr	r3, [r7, #28]
   16770:	2b07      	cmp	r3, #7
   16772:	d832      	bhi.n	167da <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
   16774:	7efb      	ldrb	r3, [r7, #27]
   16776:	2b00      	cmp	r3, #0
   16778:	d12f      	bne.n	167da <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
   1677a:	2304      	movs	r3, #4
   1677c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(index<2) dummySize = 0;
   16780:	69fb      	ldr	r3, [r7, #28]
   16782:	2b01      	cmp	r3, #1
   16784:	d803      	bhi.n	1678e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x6e>
   16786:	2300      	movs	r3, #0
   16788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   1678c:	e012      	b.n	167b4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==2 || index==5) dummySize = 1;
   1678e:	69fb      	ldr	r3, [r7, #28]
   16790:	2b02      	cmp	r3, #2
   16792:	d002      	beq.n	1679a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x7a>
   16794:	69fb      	ldr	r3, [r7, #28]
   16796:	2b05      	cmp	r3, #5
   16798:	d103      	bne.n	167a2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x82>
   1679a:	2301      	movs	r3, #1
   1679c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   167a0:	e008      	b.n	167b4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==3 || index==6) dummySize = 2;
   167a2:	69fb      	ldr	r3, [r7, #28]
   167a4:	2b03      	cmp	r3, #3
   167a6:	d002      	beq.n	167ae <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x8e>
   167a8:	69fb      	ldr	r3, [r7, #28]
   167aa:	2b06      	cmp	r3, #6
   167ac:	d102      	bne.n	167b4 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
   167ae:	2302      	movs	r3, #2
   167b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   167b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   167b8:	7ebb      	ldrb	r3, [r7, #26]
   167ba:	429a      	cmp	r2, r3
   167bc:	da01      	bge.n	167c2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xa2>
   167be:	4b4e      	ldr	r3, [pc, #312]	; (168f8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   167c0:	e095      	b.n	168ee <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
   167c2:	79fb      	ldrb	r3, [r7, #7]
   167c4:	2b00      	cmp	r3, #0
   167c6:	d103      	bne.n	167d0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb0>
   167c8:	683b      	ldr	r3, [r7, #0]
   167ca:	4a4d      	ldr	r2, [pc, #308]	; (16900 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e0>)
   167cc:	601a      	str	r2, [r3, #0]
   167ce:	e002      	b.n	167d6 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb6>
        else         *ppData = (uint8_t*) &dummyTX;
   167d0:	683b      	ldr	r3, [r7, #0]
   167d2:	4a4c      	ldr	r2, [pc, #304]	; (16904 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e4>)
   167d4:	601a      	str	r2, [r3, #0]

        return 0;
   167d6:	2300      	movs	r3, #0
   167d8:	e089      	b.n	168ee <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    }

    /* find object in Object Dictionary */
    entryNo = canopen_driver->CO_OD_find( index);
   167da:	4b4b      	ldr	r3, [pc, #300]	; (16908 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
   167dc:	681b      	ldr	r3, [r3, #0]
   167de:	3304      	adds	r3, #4
   167e0:	69f9      	ldr	r1, [r7, #28]
   167e2:	4618      	mov	r0, r3
   167e4:	4b49      	ldr	r3, [pc, #292]	; (1690c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ec>)
   167e6:	4798      	blx	r3
   167e8:	6178      	str	r0, [r7, #20]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
   167ea:	697b      	ldr	r3, [r7, #20]
   167ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
   167f0:	4293      	cmp	r3, r2
   167f2:	d00b      	beq.n	1680c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xec>
   167f4:	7ef9      	ldrb	r1, [r7, #27]
   167f6:	68fb      	ldr	r3, [r7, #12]
   167f8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   167fa:	697a      	ldr	r2, [r7, #20]
   167fc:	4613      	mov	r3, r2
   167fe:	009b      	lsls	r3, r3, #2
   16800:	4413      	add	r3, r2
   16802:	009b      	lsls	r3, r3, #2
   16804:	4403      	add	r3, r0
   16806:	791b      	ldrb	r3, [r3, #4]
   16808:	4299      	cmp	r1, r3
   1680a:	dd01      	ble.n	16810 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xf0>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
   1680c:	4b40      	ldr	r3, [pc, #256]	; (16910 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f0>)
   1680e:	e06e      	b.n	168ee <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    attr = canopen_driver->CO_OD_getAttribute( entryNo, subIndex);
   16810:	4b3d      	ldr	r3, [pc, #244]	; (16908 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
   16812:	681b      	ldr	r3, [r3, #0]
   16814:	3304      	adds	r3, #4
   16816:	7efa      	ldrb	r2, [r7, #27]
   16818:	6979      	ldr	r1, [r7, #20]
   1681a:	4618      	mov	r0, r3
   1681c:	4b3d      	ldr	r3, [pc, #244]	; (16914 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f4>)
   1681e:	4798      	blx	r3
   16820:	4603      	mov	r3, r0
   16822:	74fb      	strb	r3, [r7, #19]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   16824:	79fb      	ldrb	r3, [r7, #7]
   16826:	2b00      	cmp	r3, #0
   16828:	d10b      	bne.n	16842 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
   1682a:	7cfb      	ldrb	r3, [r7, #19]
   1682c:	f003 0310 	and.w	r3, r3, #16
   16830:	2b00      	cmp	r3, #0
   16832:	d004      	beq.n	1683e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x11e>
   16834:	7cfb      	ldrb	r3, [r7, #19]
   16836:	f003 0308 	and.w	r3, r3, #8
   1683a:	2b00      	cmp	r3, #0
   1683c:	d101      	bne.n	16842 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
   1683e:	4b2e      	ldr	r3, [pc, #184]	; (168f8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   16840:	e055      	b.n	168ee <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   16842:	79fb      	ldrb	r3, [r7, #7]
   16844:	2b00      	cmp	r3, #0
   16846:	d00b      	beq.n	16860 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
   16848:	7cfb      	ldrb	r3, [r7, #19]
   1684a:	f003 0320 	and.w	r3, r3, #32
   1684e:	2b00      	cmp	r3, #0
   16850:	d004      	beq.n	1685c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x13c>
   16852:	7cfb      	ldrb	r3, [r7, #19]
   16854:	f003 0304 	and.w	r3, r3, #4
   16858:	2b00      	cmp	r3, #0
   1685a:	d101      	bne.n	16860 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
   1685c:	4b26      	ldr	r3, [pc, #152]	; (168f8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   1685e:	e046      	b.n	168ee <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is size of variable big enough for map */
    objectLen = canopen_driver->CO_OD_getLength( entryNo, subIndex);
   16860:	4b29      	ldr	r3, [pc, #164]	; (16908 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
   16862:	681b      	ldr	r3, [r3, #0]
   16864:	3304      	adds	r3, #4
   16866:	7efa      	ldrb	r2, [r7, #27]
   16868:	6979      	ldr	r1, [r7, #20]
   1686a:	4618      	mov	r0, r3
   1686c:	4b2a      	ldr	r3, [pc, #168]	; (16918 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f8>)
   1686e:	4798      	blx	r3
   16870:	4603      	mov	r3, r0
   16872:	74bb      	strb	r3, [r7, #18]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   16874:	7cba      	ldrb	r2, [r7, #18]
   16876:	7ebb      	ldrb	r3, [r7, #26]
   16878:	429a      	cmp	r2, r3
   1687a:	da01      	bge.n	16880 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x160>
   1687c:	4b1e      	ldr	r3, [pc, #120]	; (168f8 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   1687e:	e036      	b.n	168ee <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
   16880:	f997 3013 	ldrsb.w	r3, [r7, #19]
   16884:	2b00      	cmp	r3, #0
   16886:	da01      	bge.n	1688c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16c>
   16888:	2201      	movs	r2, #1
   1688a:	e000      	b.n	1688e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16e>
   1688c:	2200      	movs	r2, #0
   1688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16890:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) (canopen_driver->CO_OD_getDataPointer( entryNo, subIndex));
   16892:	4b1d      	ldr	r3, [pc, #116]	; (16908 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
   16894:	681b      	ldr	r3, [r3, #0]
   16896:	3304      	adds	r3, #4
   16898:	7efa      	ldrb	r2, [r7, #27]
   1689a:	6979      	ldr	r1, [r7, #20]
   1689c:	4618      	mov	r0, r3
   1689e:	4b1f      	ldr	r3, [pc, #124]	; (1691c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1fc>)
   168a0:	4798      	blx	r3
   168a2:	4602      	mov	r2, r0
   168a4:	683b      	ldr	r3, [r7, #0]
   168a6:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
   168a8:	7cfb      	ldrb	r3, [r7, #19]
   168aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
   168ae:	2b00      	cmp	r3, #0
   168b0:	d01c      	beq.n	168ec <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
        uint32_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
   168b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   168b4:	781b      	ldrb	r3, [r3, #0]
   168b6:	461a      	mov	r2, r3
   168b8:	7ebb      	ldrb	r3, [r7, #26]
   168ba:	1ad3      	subs	r3, r2, r3
   168bc:	623b      	str	r3, [r7, #32]
   168be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   168c0:	781b      	ldrb	r3, [r3, #0]
   168c2:	461a      	mov	r2, r3
   168c4:	6a3b      	ldr	r3, [r7, #32]
   168c6:	429a      	cmp	r2, r3
   168c8:	d910      	bls.n	168ec <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
            *pSendIfCOSFlags |= 1<<i;
   168ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   168cc:	781b      	ldrb	r3, [r3, #0]
   168ce:	b25a      	sxtb	r2, r3
   168d0:	2101      	movs	r1, #1
   168d2:	6a3b      	ldr	r3, [r7, #32]
   168d4:	fa01 f303 	lsl.w	r3, r1, r3
   168d8:	b25b      	sxtb	r3, r3
   168da:	4313      	orrs	r3, r2
   168dc:	b25b      	sxtb	r3, r3
   168de:	b2da      	uxtb	r2, r3
   168e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   168e2:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
   168e4:	6a3b      	ldr	r3, [r7, #32]
   168e6:	3301      	adds	r3, #1
   168e8:	623b      	str	r3, [r7, #32]
   168ea:	e7e8      	b.n	168be <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x19e>
        }
    }

    return 0;
   168ec:	2300      	movs	r3, #0
}
   168ee:	4618      	mov	r0, r3
   168f0:	3728      	adds	r7, #40	; 0x28
   168f2:	46bd      	mov	sp, r7
   168f4:	bd80      	pop	{r7, pc}
   168f6:	bf00      	nop
   168f8:	06040041 	.word	0x06040041
   168fc:	06040042 	.word	0x06040042
   16900:	2000da44 	.word	0x2000da44
   16904:	2000da40 	.word	0x2000da40
   16908:	2000da0c 	.word	0x2000da0c
   1690c:	00017889 	.word	0x00017889
   16910:	06020000 	.word	0x06020000
   16914:	000179dd 	.word	0x000179dd
   16918:	00017935 	.word	0x00017935
   1691c:	00017a8d 	.word	0x00017a8d

00016920 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
   16920:	b590      	push	{r4, r7, lr}
   16922:	b091      	sub	sp, #68	; 0x44
   16924:	af04      	add	r7, sp, #16
   16926:	6078      	str	r0, [r7, #4]
   16928:	460b      	mov	r3, r1
   1692a:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
   1692c:	2300      	movs	r3, #0
   1692e:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
   16930:	2300      	movs	r3, #0
   16932:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
   16934:	687b      	ldr	r3, [r7, #4]
   16936:	691b      	ldr	r3, [r3, #16]
   16938:	3304      	adds	r3, #4
   1693a:	627b      	str	r3, [r7, #36]	; 0x24

    for(i=noOfMappedObjects; i>0; i--){
   1693c:	78fb      	ldrb	r3, [r7, #3]
   1693e:	62fb      	str	r3, [r7, #44]	; 0x2c
   16940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16942:	2b00      	cmp	r3, #0
   16944:	d045      	beq.n	169d2 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        uint32_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
   16946:	2300      	movs	r3, #0
   16948:	73fb      	strb	r3, [r7, #15]
        uint8_t prevLength = length;
   1694a:	7dfb      	ldrb	r3, [r7, #23]
   1694c:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
   1694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16950:	1d1a      	adds	r2, r3, #4
   16952:	627a      	str	r2, [r7, #36]	; 0x24
   16954:	681b      	ldr	r3, [r3, #0]
   16956:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
   16958:	687b      	ldr	r3, [r7, #4]
   1695a:	6858      	ldr	r0, [r3, #4]
                map,
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
   1695c:	f107 0210 	add.w	r2, r7, #16
   16960:	f107 030e 	add.w	r3, r7, #14
   16964:	9302      	str	r3, [sp, #8]
   16966:	f107 030f 	add.w	r3, r7, #15
   1696a:	9301      	str	r3, [sp, #4]
   1696c:	f107 0317 	add.w	r3, r7, #23
   16970:	9300      	str	r3, [sp, #0]
   16972:	4613      	mov	r3, r2
   16974:	2200      	movs	r2, #0
   16976:	69b9      	ldr	r1, [r7, #24]
   16978:	4c1a      	ldr	r4, [pc, #104]	; (169e4 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc4>)
   1697a:	47a0      	blx	r4
   1697c:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
   1697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16980:	2b00      	cmp	r3, #0
   16982:	d00e      	beq.n	169a2 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x82>
            length = 0;
   16984:	2300      	movs	r3, #0
   16986:	75fb      	strb	r3, [r7, #23]
           canopen_driver->EM_ErrorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
   16988:	4b17      	ldr	r3, [pc, #92]	; (169e8 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc8>)
   1698a:	681b      	ldr	r3, [r3, #0]
   1698c:	1d18      	adds	r0, r3, #4
   1698e:	687b      	ldr	r3, [r7, #4]
   16990:	6819      	ldr	r1, [r3, #0]
   16992:	69bb      	ldr	r3, [r7, #24]
   16994:	9300      	str	r3, [sp, #0]
   16996:	f44f 4302 	mov.w	r3, #33280	; 0x8200
   1699a:	221a      	movs	r2, #26
   1699c:	4c13      	ldr	r4, [pc, #76]	; (169ec <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xcc>)
   1699e:	47a0      	blx	r4
   169a0:	e017      	b.n	169d2 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
   169a2:	7ffb      	ldrb	r3, [r7, #31]
   169a4:	623b      	str	r3, [r7, #32]
   169a6:	7dfb      	ldrb	r3, [r7, #23]
   169a8:	461a      	mov	r2, r3
   169aa:	6a3b      	ldr	r3, [r7, #32]
   169ac:	429a      	cmp	r2, r3
   169ae:	d90c      	bls.n	169ca <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xaa>
            RPDO->mapPointer[j] = pData++;
   169b0:	693a      	ldr	r2, [r7, #16]
   169b2:	1c53      	adds	r3, r2, #1
   169b4:	613b      	str	r3, [r7, #16]
   169b6:	6879      	ldr	r1, [r7, #4]
   169b8:	6a3b      	ldr	r3, [r7, #32]
   169ba:	3308      	adds	r3, #8
   169bc:	009b      	lsls	r3, r3, #2
   169be:	440b      	add	r3, r1
   169c0:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
   169c2:	6a3b      	ldr	r3, [r7, #32]
   169c4:	3301      	adds	r3, #1
   169c6:	623b      	str	r3, [r7, #32]
   169c8:	e7ed      	b.n	169a6 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x86>
    for(i=noOfMappedObjects; i>0; i--){
   169ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   169cc:	3b01      	subs	r3, #1
   169ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   169d0:	e7b6      	b.n	16940 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x20>
        }
#endif

    }

    RPDO->dataLength = length;
   169d2:	7dfa      	ldrb	r2, [r7, #23]
   169d4:	687b      	ldr	r3, [r7, #4]
   169d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    return ret;
   169da:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
   169dc:	4618      	mov	r0, r3
   169de:	3734      	adds	r7, #52	; 0x34
   169e0:	46bd      	mov	sp, r7
   169e2:	bd90      	pop	{r4, r7, pc}
   169e4:	00016721 	.word	0x00016721
   169e8:	2000da0c 	.word	0x2000da0c
   169ec:	00015e31 	.word	0x00015e31

000169f0 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
   169f0:	b590      	push	{r4, r7, lr}
   169f2:	b091      	sub	sp, #68	; 0x44
   169f4:	af04      	add	r7, sp, #16
   169f6:	6078      	str	r0, [r7, #4]
   169f8:	460b      	mov	r3, r1
   169fa:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
   169fc:	2300      	movs	r3, #0
   169fe:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
   16a00:	2300      	movs	r3, #0
   16a02:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
   16a04:	687b      	ldr	r3, [r7, #4]
   16a06:	68db      	ldr	r3, [r3, #12]
   16a08:	3304      	adds	r3, #4
   16a0a:	627b      	str	r3, [r7, #36]	; 0x24

    TPDO->sendIfCOSFlags = 0;
   16a0c:	687b      	ldr	r3, [r7, #4]
   16a0e:	2200      	movs	r2, #0
   16a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    for(i=noOfMappedObjects; i>0; i--){
   16a14:	78fb      	ldrb	r3, [r7, #3]
   16a16:	62fb      	str	r3, [r7, #44]	; 0x2c
   16a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16a1a:	2b00      	cmp	r3, #0
   16a1c:	d042      	beq.n	16aa4 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        uint32_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
   16a1e:	7dfb      	ldrb	r3, [r7, #23]
   16a20:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
   16a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16a24:	1d1a      	adds	r2, r3, #4
   16a26:	627a      	str	r2, [r7, #36]	; 0x24
   16a28:	681b      	ldr	r3, [r3, #0]
   16a2a:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
   16a2c:	687b      	ldr	r3, [r7, #4]
   16a2e:	6858      	ldr	r0, [r3, #4]
   16a30:	687b      	ldr	r3, [r7, #4]
   16a32:	3340      	adds	r3, #64	; 0x40
                map,
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
   16a34:	f107 0110 	add.w	r1, r7, #16
   16a38:	f107 020f 	add.w	r2, r7, #15
   16a3c:	9202      	str	r2, [sp, #8]
   16a3e:	9301      	str	r3, [sp, #4]
   16a40:	f107 0317 	add.w	r3, r7, #23
   16a44:	9300      	str	r3, [sp, #0]
   16a46:	460b      	mov	r3, r1
   16a48:	2201      	movs	r2, #1
   16a4a:	69b9      	ldr	r1, [r7, #24]
   16a4c:	4c19      	ldr	r4, [pc, #100]	; (16ab4 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc4>)
   16a4e:	47a0      	blx	r4
   16a50:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
   16a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16a54:	2b00      	cmp	r3, #0
   16a56:	d00e      	beq.n	16a76 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x86>
            length = 0;
   16a58:	2300      	movs	r3, #0
   16a5a:	75fb      	strb	r3, [r7, #23]
            canopen_driver->EM_ErrorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
   16a5c:	4b16      	ldr	r3, [pc, #88]	; (16ab8 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc8>)
   16a5e:	681b      	ldr	r3, [r3, #0]
   16a60:	1d18      	adds	r0, r3, #4
   16a62:	687b      	ldr	r3, [r7, #4]
   16a64:	6819      	ldr	r1, [r3, #0]
   16a66:	69bb      	ldr	r3, [r7, #24]
   16a68:	9300      	str	r3, [sp, #0]
   16a6a:	f44f 4302 	mov.w	r3, #33280	; 0x8200
   16a6e:	221a      	movs	r2, #26
   16a70:	4c12      	ldr	r4, [pc, #72]	; (16abc <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xcc>)
   16a72:	47a0      	blx	r4
   16a74:	e016      	b.n	16aa4 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
   16a76:	7ffb      	ldrb	r3, [r7, #31]
   16a78:	623b      	str	r3, [r7, #32]
   16a7a:	7dfb      	ldrb	r3, [r7, #23]
   16a7c:	461a      	mov	r2, r3
   16a7e:	6a3b      	ldr	r3, [r7, #32]
   16a80:	429a      	cmp	r2, r3
   16a82:	d90b      	bls.n	16a9c <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xac>
            TPDO->mapPointer[j] = pData++;
   16a84:	693b      	ldr	r3, [r7, #16]
   16a86:	1c5a      	adds	r2, r3, #1
   16a88:	613a      	str	r2, [r7, #16]
   16a8a:	687a      	ldr	r2, [r7, #4]
   16a8c:	6a39      	ldr	r1, [r7, #32]
   16a8e:	3108      	adds	r1, #8
   16a90:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        for(j=prevLength; j<length; j++){
   16a94:	6a3b      	ldr	r3, [r7, #32]
   16a96:	3301      	adds	r3, #1
   16a98:	623b      	str	r3, [r7, #32]
   16a9a:	e7ee      	b.n	16a7a <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x8a>
    for(i=noOfMappedObjects; i>0; i--){
   16a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16a9e:	3b01      	subs	r3, #1
   16aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   16aa2:	e7b9      	b.n	16a18 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x28>
        }
#endif

    }

    TPDO->dataLength = length;
   16aa4:	7dfa      	ldrb	r2, [r7, #23]
   16aa6:	687b      	ldr	r3, [r7, #4]
   16aa8:	779a      	strb	r2, [r3, #30]

    return ret;
   16aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
   16aac:	4618      	mov	r0, r3
   16aae:	3734      	adds	r7, #52	; 0x34
   16ab0:	46bd      	mov	sp, r7
   16ab2:	bd90      	pop	{r4, r7, pc}
   16ab4:	00016721 	.word	0x00016721
   16ab8:	2000da0c 	.word	0x2000da0c
   16abc:	00015e31 	.word	0x00015e31

00016ac0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
   16ac0:	b580      	push	{r7, lr}
   16ac2:	b088      	sub	sp, #32
   16ac4:	af00      	add	r7, sp, #0
   16ac6:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
   16ac8:	687b      	ldr	r3, [r7, #4]
   16aca:	681b      	ldr	r3, [r3, #0]
   16acc:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
   16ace:	687b      	ldr	r3, [r7, #4]
   16ad0:	7f5b      	ldrb	r3, [r3, #29]
   16ad2:	2b00      	cmp	r3, #0
   16ad4:	d025      	beq.n	16b22 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x62>
        if(ODF_arg->subIndex == 1){
   16ad6:	687b      	ldr	r3, [r7, #4]
   16ad8:	7f1b      	ldrb	r3, [r3, #28]
   16ada:	2b01      	cmp	r3, #1
   16adc:	d11f      	bne.n	16b1e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
            uint32_t *value = (uint32_t*) ODF_arg->data;
   16ade:	687b      	ldr	r3, [r7, #4]
   16ae0:	685b      	ldr	r3, [r3, #4]
   16ae2:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
   16ae4:	69bb      	ldr	r3, [r7, #24]
   16ae6:	681b      	ldr	r3, [r3, #0]
   16ae8:	b29a      	uxth	r2, r3
   16aea:	69fb      	ldr	r3, [r7, #28]
   16aec:	69db      	ldr	r3, [r3, #28]
   16aee:	429a      	cmp	r2, r3
   16af0:	d10a      	bne.n	16b08 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
   16af2:	69fb      	ldr	r3, [r7, #28]
   16af4:	69db      	ldr	r3, [r3, #28]
   16af6:	2b00      	cmp	r3, #0
   16af8:	d006      	beq.n	16b08 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
                *value += RPDO->nodeId;
   16afa:	69bb      	ldr	r3, [r7, #24]
   16afc:	681b      	ldr	r3, [r3, #0]
   16afe:	69fa      	ldr	r2, [r7, #28]
   16b00:	7e12      	ldrb	r2, [r2, #24]
   16b02:	441a      	add	r2, r3
   16b04:	69bb      	ldr	r3, [r7, #24]
   16b06:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) *value |= 0x80000000L;
   16b08:	69fb      	ldr	r3, [r7, #28]
   16b0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   16b0e:	2b00      	cmp	r3, #0
   16b10:	d105      	bne.n	16b1e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
   16b12:	69bb      	ldr	r3, [r7, #24]
   16b14:	681b      	ldr	r3, [r3, #0]
   16b16:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
   16b1a:	69bb      	ldr	r3, [r7, #24]
   16b1c:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
   16b1e:	2300      	movs	r3, #0
   16b20:	e07f      	b.n	16c22 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
   16b22:	69fb      	ldr	r3, [r7, #28]
   16b24:	f893 3020 	ldrb.w	r3, [r3, #32]
   16b28:	f003 0304 	and.w	r3, r3, #4
   16b2c:	2b00      	cmp	r3, #0
   16b2e:	d001      	beq.n	16b34 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
   16b30:	4b3e      	ldr	r3, [pc, #248]	; (16c2c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x16c>)
   16b32:	e076      	b.n	16c22 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
   16b34:	69fb      	ldr	r3, [r7, #28]
   16b36:	695b      	ldr	r3, [r3, #20]
   16b38:	781b      	ldrb	r3, [r3, #0]
   16b3a:	2b05      	cmp	r3, #5
   16b3c:	d108      	bne.n	16b50 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
   16b3e:	69fb      	ldr	r3, [r7, #28]
   16b40:	f893 3020 	ldrb.w	r3, [r3, #32]
   16b44:	f003 0301 	and.w	r3, r3, #1
   16b48:	2b00      	cmp	r3, #0
   16b4a:	d001      	beq.n	16b50 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
   16b4c:	4b38      	ldr	r3, [pc, #224]	; (16c30 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x170>)
   16b4e:	e068      	b.n	16c22 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
   16b50:	687b      	ldr	r3, [r7, #4]
   16b52:	7f1b      	ldrb	r3, [r3, #28]
   16b54:	2b01      	cmp	r3, #1
   16b56:	d139      	bne.n	16bcc <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x10c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
   16b58:	687b      	ldr	r3, [r7, #4]
   16b5a:	685b      	ldr	r3, [r3, #4]
   16b5c:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
   16b5e:	697b      	ldr	r3, [r7, #20]
   16b60:	681a      	ldr	r2, [r3, #0]
   16b62:	4b34      	ldr	r3, [pc, #208]	; (16c34 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x174>)
   16b64:	4013      	ands	r3, r2
   16b66:	2b00      	cmp	r3, #0
   16b68:	d001      	beq.n	16b6e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xae>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16b6a:	4b33      	ldr	r3, [pc, #204]	; (16c38 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
   16b6c:	e059      	b.n	16c22 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
   16b6e:	697b      	ldr	r3, [r7, #20]
   16b70:	681b      	ldr	r3, [r3, #0]
   16b72:	b29a      	uxth	r2, r3
   16b74:	69fb      	ldr	r3, [r7, #28]
   16b76:	69db      	ldr	r3, [r3, #28]
   16b78:	69f9      	ldr	r1, [r7, #28]
   16b7a:	7e09      	ldrb	r1, [r1, #24]
   16b7c:	440b      	add	r3, r1
   16b7e:	429a      	cmp	r2, r3
   16b80:	d10c      	bne.n	16b9c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xdc>
            *value &= 0xC0000000L;
   16b82:	697b      	ldr	r3, [r7, #20]
   16b84:	681b      	ldr	r3, [r3, #0]
   16b86:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
   16b8a:	697b      	ldr	r3, [r7, #20]
   16b8c:	601a      	str	r2, [r3, #0]
            *value += RPDO->defaultCOB_ID;
   16b8e:	697b      	ldr	r3, [r7, #20]
   16b90:	681a      	ldr	r2, [r3, #0]
   16b92:	69fb      	ldr	r3, [r7, #28]
   16b94:	69db      	ldr	r3, [r3, #28]
   16b96:	441a      	add	r2, r3
   16b98:	697b      	ldr	r3, [r7, #20]
   16b9a:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((*value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
   16b9c:	69fb      	ldr	r3, [r7, #28]
   16b9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   16ba2:	2b00      	cmp	r3, #0
   16ba4:	d00b      	beq.n	16bbe <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
   16ba6:	697b      	ldr	r3, [r7, #20]
   16ba8:	681a      	ldr	r2, [r3, #0]
   16baa:	69fb      	ldr	r3, [r7, #28]
   16bac:	68db      	ldr	r3, [r3, #12]
   16bae:	685b      	ldr	r3, [r3, #4]
   16bb0:	4053      	eors	r3, r2
   16bb2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   16bb6:	2b00      	cmp	r3, #0
   16bb8:	d001      	beq.n	16bbe <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16bba:	4b1f      	ldr	r3, [pc, #124]	; (16c38 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
   16bbc:	e031      	b.n	16c22 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* configure RPDO */
       CO_RPDOconfigCom(RPDO, *value);
   16bbe:	697b      	ldr	r3, [r7, #20]
   16bc0:	681b      	ldr	r3, [r3, #0]
   16bc2:	4619      	mov	r1, r3
   16bc4:	69f8      	ldr	r0, [r7, #28]
   16bc6:	4b1d      	ldr	r3, [pc, #116]	; (16c3c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x17c>)
   16bc8:	4798      	blx	r3
   16bca:	e029      	b.n	16c20 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
   16bcc:	687b      	ldr	r3, [r7, #4]
   16bce:	7f1b      	ldrb	r3, [r3, #28]
   16bd0:	2b02      	cmp	r3, #2
   16bd2:	d125      	bne.n	16c20 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   16bd4:	687b      	ldr	r3, [r7, #4]
   16bd6:	685b      	ldr	r3, [r3, #4]
   16bd8:	613b      	str	r3, [r7, #16]
        bool_t synchronousPrev = RPDO->synchronous;
   16bda:	69fb      	ldr	r3, [r7, #28]
   16bdc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   16be0:	73fb      	strb	r3, [r7, #15]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
   16be2:	693b      	ldr	r3, [r7, #16]
   16be4:	781b      	ldrb	r3, [r3, #0]
   16be6:	2bf0      	cmp	r3, #240	; 0xf0
   16be8:	dd05      	ble.n	16bf6 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
   16bea:	693b      	ldr	r3, [r7, #16]
   16bec:	781b      	ldrb	r3, [r3, #0]
   16bee:	2bfd      	cmp	r3, #253	; 0xfd
   16bf0:	dc01      	bgt.n	16bf6 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16bf2:	4b11      	ldr	r3, [pc, #68]	; (16c38 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
   16bf4:	e015      	b.n	16c22 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        RPDO->synchronous = (*value <= 240) ? true : false;
   16bf6:	693b      	ldr	r3, [r7, #16]
   16bf8:	781b      	ldrb	r3, [r3, #0]
   16bfa:	2bf0      	cmp	r3, #240	; 0xf0
   16bfc:	bfd4      	ite	le
   16bfe:	2301      	movle	r3, #1
   16c00:	2300      	movgt	r3, #0
   16c02:	b2db      	uxtb	r3, r3
   16c04:	461a      	mov	r2, r3
   16c06:	69fb      	ldr	r3, [r7, #28]
   16c08:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
   16c0c:	69fb      	ldr	r3, [r7, #28]
   16c0e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   16c12:	7bfa      	ldrb	r2, [r7, #15]
   16c14:	429a      	cmp	r2, r3
   16c16:	d003      	beq.n	16c20 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
            RPDO->CANrxNew[1] = false;
   16c18:	69fb      	ldr	r3, [r7, #28]
   16c1a:	2200      	movs	r2, #0
   16c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
    }

    return CO_SDO_AB_NONE;
   16c20:	2300      	movs	r3, #0
}
   16c22:	4618      	mov	r0, r3
   16c24:	3720      	adds	r7, #32
   16c26:	46bd      	mov	sp, r7
   16c28:	bd80      	pop	{r7, pc}
   16c2a:	bf00      	nop
   16c2c:	06010002 	.word	0x06010002
   16c30:	08000022 	.word	0x08000022
   16c34:	3fff8000 	.word	0x3fff8000
   16c38:	06090030 	.word	0x06090030
   16c3c:	000165b5 	.word	0x000165b5

00016c40 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
   16c40:	b580      	push	{r7, lr}
   16c42:	b088      	sub	sp, #32
   16c44:	af00      	add	r7, sp, #0
   16c46:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
   16c48:	687b      	ldr	r3, [r7, #4]
   16c4a:	681b      	ldr	r3, [r3, #0]
   16c4c:	61fb      	str	r3, [r7, #28]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
   16c4e:	687b      	ldr	r3, [r7, #4]
   16c50:	7f1b      	ldrb	r3, [r3, #28]
   16c52:	2b04      	cmp	r3, #4
   16c54:	d101      	bne.n	16c5a <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1a>
   16c56:	4b6d      	ldr	r3, [pc, #436]	; (16e0c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1cc>)
   16c58:	e0d4      	b.n	16e04 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
   16c5a:	687b      	ldr	r3, [r7, #4]
   16c5c:	7f5b      	ldrb	r3, [r3, #29]
   16c5e:	2b00      	cmp	r3, #0
   16c60:	d024      	beq.n	16cac <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x6c>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
   16c62:	687b      	ldr	r3, [r7, #4]
   16c64:	7f1b      	ldrb	r3, [r3, #28]
   16c66:	2b01      	cmp	r3, #1
   16c68:	d11e      	bne.n	16ca8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
            uint32_t *value = (uint32_t*) ODF_arg->data;
   16c6a:	687b      	ldr	r3, [r7, #4]
   16c6c:	685b      	ldr	r3, [r3, #4]
   16c6e:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
   16c70:	69bb      	ldr	r3, [r7, #24]
   16c72:	681b      	ldr	r3, [r3, #0]
   16c74:	b29a      	uxth	r2, r3
   16c76:	69fb      	ldr	r3, [r7, #28]
   16c78:	699b      	ldr	r3, [r3, #24]
   16c7a:	429a      	cmp	r2, r3
   16c7c:	d10a      	bne.n	16c94 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
   16c7e:	69fb      	ldr	r3, [r7, #28]
   16c80:	699b      	ldr	r3, [r3, #24]
   16c82:	2b00      	cmp	r3, #0
   16c84:	d006      	beq.n	16c94 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
                *value += TPDO->nodeId;
   16c86:	69bb      	ldr	r3, [r7, #24]
   16c88:	681b      	ldr	r3, [r3, #0]
   16c8a:	69fa      	ldr	r2, [r7, #28]
   16c8c:	7d12      	ldrb	r2, [r2, #20]
   16c8e:	441a      	add	r2, r3
   16c90:	69bb      	ldr	r3, [r7, #24]
   16c92:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) *value |= 0x80000000L;
   16c94:	69fb      	ldr	r3, [r7, #28]
   16c96:	7f5b      	ldrb	r3, [r3, #29]
   16c98:	2b00      	cmp	r3, #0
   16c9a:	d105      	bne.n	16ca8 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
   16c9c:	69bb      	ldr	r3, [r7, #24]
   16c9e:	681b      	ldr	r3, [r3, #0]
   16ca0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
   16ca4:	69bb      	ldr	r3, [r7, #24]
   16ca6:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
   16ca8:	2300      	movs	r3, #0
   16caa:	e0ab      	b.n	16e04 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
   16cac:	69fb      	ldr	r3, [r7, #28]
   16cae:	7f1b      	ldrb	r3, [r3, #28]
   16cb0:	f003 0304 	and.w	r3, r3, #4
   16cb4:	2b00      	cmp	r3, #0
   16cb6:	d001      	beq.n	16cbc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x7c>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
   16cb8:	4b55      	ldr	r3, [pc, #340]	; (16e10 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d0>)
   16cba:	e0a3      	b.n	16e04 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
   16cbc:	69fb      	ldr	r3, [r7, #28]
   16cbe:	691b      	ldr	r3, [r3, #16]
   16cc0:	781b      	ldrb	r3, [r3, #0]
   16cc2:	2b05      	cmp	r3, #5
   16cc4:	d107      	bne.n	16cd6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
   16cc6:	69fb      	ldr	r3, [r7, #28]
   16cc8:	7f1b      	ldrb	r3, [r3, #28]
   16cca:	f003 0301 	and.w	r3, r3, #1
   16cce:	2b00      	cmp	r3, #0
   16cd0:	d001      	beq.n	16cd6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
   16cd2:	4b50      	ldr	r3, [pc, #320]	; (16e14 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d4>)
   16cd4:	e096      	b.n	16e04 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
   16cd6:	687b      	ldr	r3, [r7, #4]
   16cd8:	7f1b      	ldrb	r3, [r3, #28]
   16cda:	2b01      	cmp	r3, #1
   16cdc:	d140      	bne.n	16d60 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x120>
        uint32_t *value = (uint32_t*) ODF_arg->data;
   16cde:	687b      	ldr	r3, [r7, #4]
   16ce0:	685b      	ldr	r3, [r3, #4]
   16ce2:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
   16ce4:	697b      	ldr	r3, [r7, #20]
   16ce6:	681a      	ldr	r2, [r3, #0]
   16ce8:	4b4b      	ldr	r3, [pc, #300]	; (16e18 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d8>)
   16cea:	4013      	ands	r3, r2
   16cec:	2b00      	cmp	r3, #0
   16cee:	d001      	beq.n	16cf4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xb4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16cf0:	4b4a      	ldr	r3, [pc, #296]	; (16e1c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   16cf2:	e087      	b.n	16e04 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
   16cf4:	697b      	ldr	r3, [r7, #20]
   16cf6:	681b      	ldr	r3, [r3, #0]
   16cf8:	b29a      	uxth	r2, r3
   16cfa:	69fb      	ldr	r3, [r7, #28]
   16cfc:	699b      	ldr	r3, [r3, #24]
   16cfe:	69f9      	ldr	r1, [r7, #28]
   16d00:	7d09      	ldrb	r1, [r1, #20]
   16d02:	440b      	add	r3, r1
   16d04:	429a      	cmp	r2, r3
   16d06:	d10c      	bne.n	16d22 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xe2>
            *value &= 0xC0000000L;
   16d08:	697b      	ldr	r3, [r7, #20]
   16d0a:	681b      	ldr	r3, [r3, #0]
   16d0c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
   16d10:	697b      	ldr	r3, [r7, #20]
   16d12:	601a      	str	r2, [r3, #0]
            *value += TPDO->defaultCOB_ID;
   16d14:	697b      	ldr	r3, [r7, #20]
   16d16:	681a      	ldr	r2, [r3, #0]
   16d18:	69fb      	ldr	r3, [r7, #28]
   16d1a:	699b      	ldr	r3, [r3, #24]
   16d1c:	441a      	add	r2, r3
   16d1e:	697b      	ldr	r3, [r7, #20]
   16d20:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((*value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
   16d22:	69fb      	ldr	r3, [r7, #28]
   16d24:	7f5b      	ldrb	r3, [r3, #29]
   16d26:	2b00      	cmp	r3, #0
   16d28:	d00b      	beq.n	16d42 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
   16d2a:	697b      	ldr	r3, [r7, #20]
   16d2c:	681a      	ldr	r2, [r3, #0]
   16d2e:	69fb      	ldr	r3, [r7, #28]
   16d30:	689b      	ldr	r3, [r3, #8]
   16d32:	685b      	ldr	r3, [r3, #4]
   16d34:	4053      	eors	r3, r2
   16d36:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   16d3a:	2b00      	cmp	r3, #0
   16d3c:	d001      	beq.n	16d42 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16d3e:	4b37      	ldr	r3, [pc, #220]	; (16e1c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   16d40:	e060      	b.n	16e04 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, *value, TPDO->CANtxBuff->syncFlag);
   16d42:	697b      	ldr	r3, [r7, #20]
   16d44:	6819      	ldr	r1, [r3, #0]
   16d46:	69fb      	ldr	r3, [r7, #28]
   16d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   16d4a:	7b9b      	ldrb	r3, [r3, #14]
   16d4c:	b2db      	uxtb	r3, r3
   16d4e:	461a      	mov	r2, r3
   16d50:	69f8      	ldr	r0, [r7, #28]
   16d52:	4b33      	ldr	r3, [pc, #204]	; (16e20 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1e0>)
   16d54:	4798      	blx	r3
        TPDO->syncCounter = 255;
   16d56:	69fb      	ldr	r3, [r7, #28]
   16d58:	22ff      	movs	r2, #255	; 0xff
   16d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   16d5e:	e050      	b.n	16e02 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
   16d60:	687b      	ldr	r3, [r7, #4]
   16d62:	7f1b      	ldrb	r3, [r3, #28]
   16d64:	2b02      	cmp	r3, #2
   16d66:	d11b      	bne.n	16da0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   16d68:	687b      	ldr	r3, [r7, #4]
   16d6a:	685b      	ldr	r3, [r3, #4]
   16d6c:	613b      	str	r3, [r7, #16]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
   16d6e:	693b      	ldr	r3, [r7, #16]
   16d70:	781b      	ldrb	r3, [r3, #0]
   16d72:	2bf0      	cmp	r3, #240	; 0xf0
   16d74:	dd05      	ble.n	16d82 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
   16d76:	693b      	ldr	r3, [r7, #16]
   16d78:	781b      	ldrb	r3, [r3, #0]
   16d7a:	2bfd      	cmp	r3, #253	; 0xfd
   16d7c:	dc01      	bgt.n	16d82 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16d7e:	4b27      	ldr	r3, [pc, #156]	; (16e1c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   16d80:	e040      	b.n	16e04 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
   16d82:	69fb      	ldr	r3, [r7, #28]
   16d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   16d86:	693a      	ldr	r2, [r7, #16]
   16d88:	7812      	ldrb	r2, [r2, #0]
   16d8a:	2af0      	cmp	r2, #240	; 0xf0
   16d8c:	dc01      	bgt.n	16d92 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x152>
   16d8e:	2201      	movs	r2, #1
   16d90:	e000      	b.n	16d94 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x154>
   16d92:	2200      	movs	r2, #0
   16d94:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
   16d96:	69fb      	ldr	r3, [r7, #28]
   16d98:	22ff      	movs	r2, #255	; 0xff
   16d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   16d9e:	e030      	b.n	16e02 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
   16da0:	687b      	ldr	r3, [r7, #4]
   16da2:	7f1b      	ldrb	r3, [r3, #28]
   16da4:	2b03      	cmp	r3, #3
   16da6:	d109      	bne.n	16dbc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x17c>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
   16da8:	69fb      	ldr	r3, [r7, #28]
   16daa:	7f5b      	ldrb	r3, [r3, #29]
   16dac:	2b00      	cmp	r3, #0
   16dae:	d001      	beq.n	16db4 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x174>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16db0:	4b1a      	ldr	r3, [pc, #104]	; (16e1c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   16db2:	e027      	b.n	16e04 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        TPDO->inhibitTimer = 0;
   16db4:	69fb      	ldr	r3, [r7, #28]
   16db6:	2200      	movs	r2, #0
   16db8:	645a      	str	r2, [r3, #68]	; 0x44
   16dba:	e022      	b.n	16e02 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
   16dbc:	687b      	ldr	r3, [r7, #4]
   16dbe:	7f1b      	ldrb	r3, [r3, #28]
   16dc0:	2b05      	cmp	r3, #5
   16dc2:	d10b      	bne.n	16ddc <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x19c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
   16dc4:	687b      	ldr	r3, [r7, #4]
   16dc6:	685b      	ldr	r3, [r3, #4]
   16dc8:	60bb      	str	r3, [r7, #8]

        TPDO->eventTimer = ((uint32_t) *value) * 1000;
   16dca:	68bb      	ldr	r3, [r7, #8]
   16dcc:	681b      	ldr	r3, [r3, #0]
   16dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16dd2:	fb02 f203 	mul.w	r2, r2, r3
   16dd6:	69fb      	ldr	r3, [r7, #28]
   16dd8:	649a      	str	r2, [r3, #72]	; 0x48
   16dda:	e012      	b.n	16e02 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
   16ddc:	687b      	ldr	r3, [r7, #4]
   16dde:	7f1b      	ldrb	r3, [r3, #28]
   16de0:	2b06      	cmp	r3, #6
   16de2:	d10e      	bne.n	16e02 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   16de4:	687b      	ldr	r3, [r7, #4]
   16de6:	685b      	ldr	r3, [r3, #4]
   16de8:	60fb      	str	r3, [r7, #12]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
   16dea:	69fb      	ldr	r3, [r7, #28]
   16dec:	7f5b      	ldrb	r3, [r3, #29]
   16dee:	2b00      	cmp	r3, #0
   16df0:	d001      	beq.n	16df6 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1b6>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16df2:	4b0a      	ldr	r3, [pc, #40]	; (16e1c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   16df4:	e006      	b.n	16e04 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* values from 240...255 are not valid */
        if(*value > 240)
   16df6:	68fb      	ldr	r3, [r7, #12]
   16df8:	781b      	ldrb	r3, [r3, #0]
   16dfa:	2bf0      	cmp	r3, #240	; 0xf0
   16dfc:	dd01      	ble.n	16e02 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16dfe:	4b07      	ldr	r3, [pc, #28]	; (16e1c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   16e00:	e000      	b.n	16e04 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    return CO_SDO_AB_NONE;
   16e02:	2300      	movs	r3, #0
}
   16e04:	4618      	mov	r0, r3
   16e06:	3720      	adds	r7, #32
   16e08:	46bd      	mov	sp, r7
   16e0a:	bd80      	pop	{r7, pc}
   16e0c:	06090011 	.word	0x06090011
   16e10:	06010002 	.word	0x06010002
   16e14:	08000022 	.word	0x08000022
   16e18:	3fff8000 	.word	0x3fff8000
   16e1c:	06090030 	.word	0x06090030
   16e20:	0001668d 	.word	0x0001668d

00016e24 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
   16e24:	b590      	push	{r4, r7, lr}
   16e26:	b08d      	sub	sp, #52	; 0x34
   16e28:	af04      	add	r7, sp, #16
   16e2a:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
   16e2c:	687b      	ldr	r3, [r7, #4]
   16e2e:	681b      	ldr	r3, [r3, #0]
   16e30:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
   16e32:	687b      	ldr	r3, [r7, #4]
   16e34:	7f5b      	ldrb	r3, [r3, #29]
   16e36:	2b00      	cmp	r3, #0
   16e38:	d010      	beq.n	16e5c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x38>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   16e3a:	687b      	ldr	r3, [r7, #4]
   16e3c:	685b      	ldr	r3, [r3, #4]
   16e3e:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
   16e40:	687b      	ldr	r3, [r7, #4]
   16e42:	7f1b      	ldrb	r3, [r3, #28]
   16e44:	2b00      	cmp	r3, #0
   16e46:	d107      	bne.n	16e58 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
   16e48:	69fb      	ldr	r3, [r7, #28]
   16e4a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   16e4e:	2b00      	cmp	r3, #0
   16e50:	d102      	bne.n	16e58 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
   16e52:	69bb      	ldr	r3, [r7, #24]
   16e54:	2200      	movs	r2, #0
   16e56:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
   16e58:	2300      	movs	r3, #0
   16e5a:	e054      	b.n	16f06 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
   16e5c:	69fb      	ldr	r3, [r7, #28]
   16e5e:	f893 3020 	ldrb.w	r3, [r3, #32]
   16e62:	f003 0308 	and.w	r3, r3, #8
   16e66:	2b00      	cmp	r3, #0
   16e68:	d001      	beq.n	16e6e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x4a>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
   16e6a:	4b29      	ldr	r3, [pc, #164]	; (16f10 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xec>)
   16e6c:	e04b      	b.n	16f06 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
   16e6e:	69fb      	ldr	r3, [r7, #28]
   16e70:	695b      	ldr	r3, [r3, #20]
   16e72:	781b      	ldrb	r3, [r3, #0]
   16e74:	2b05      	cmp	r3, #5
   16e76:	d108      	bne.n	16e8a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
   16e78:	69fb      	ldr	r3, [r7, #28]
   16e7a:	f893 3020 	ldrb.w	r3, [r3, #32]
   16e7e:	f003 0302 	and.w	r3, r3, #2
   16e82:	2b00      	cmp	r3, #0
   16e84:	d001      	beq.n	16e8a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
   16e86:	4b23      	ldr	r3, [pc, #140]	; (16f14 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf0>)
   16e88:	e03d      	b.n	16f06 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(RPDO->valid)
   16e8a:	69fb      	ldr	r3, [r7, #28]
   16e8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   16e90:	2b00      	cmp	r3, #0
   16e92:	d001      	beq.n	16e98 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
   16e94:	4b20      	ldr	r3, [pc, #128]	; (16f18 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
   16e96:	e036      	b.n	16f06 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
   16e98:	687b      	ldr	r3, [r7, #4]
   16e9a:	7f1b      	ldrb	r3, [r3, #28]
   16e9c:	2b00      	cmp	r3, #0
   16e9e:	d110      	bne.n	16ec2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x9e>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   16ea0:	687b      	ldr	r3, [r7, #4]
   16ea2:	685b      	ldr	r3, [r3, #4]
   16ea4:	617b      	str	r3, [r7, #20]

        if(*value > 8)
   16ea6:	697b      	ldr	r3, [r7, #20]
   16ea8:	781b      	ldrb	r3, [r3, #0]
   16eaa:	2b08      	cmp	r3, #8
   16eac:	dd01      	ble.n	16eb2 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x8e>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
   16eae:	4b1b      	ldr	r3, [pc, #108]	; (16f1c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf8>)
   16eb0:	e029      	b.n	16f06 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_RPDOconfigMap(RPDO, *value);
   16eb2:	697b      	ldr	r3, [r7, #20]
   16eb4:	781b      	ldrb	r3, [r3, #0]
   16eb6:	4619      	mov	r1, r3
   16eb8:	69f8      	ldr	r0, [r7, #28]
   16eba:	4b19      	ldr	r3, [pc, #100]	; (16f20 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xfc>)
   16ebc:	4798      	blx	r3
   16ebe:	4603      	mov	r3, r0
   16ec0:	e021      	b.n	16f06 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
   16ec2:	687b      	ldr	r3, [r7, #4]
   16ec4:	685b      	ldr	r3, [r3, #4]
   16ec6:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
   16ec8:	2300      	movs	r3, #0
   16eca:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
   16ecc:	2300      	movs	r3, #0
   16ece:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
   16ed0:	69fb      	ldr	r3, [r7, #28]
   16ed2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   16ed6:	2b00      	cmp	r3, #0
   16ed8:	d001      	beq.n	16ede <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xba>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
   16eda:	4b0f      	ldr	r3, [pc, #60]	; (16f18 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
   16edc:	e013      	b.n	16f06 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* verify if mapping is correct */
        return  (CO_SDO_abortCode_t)CO_PDOfindMap(
   16ede:	69fb      	ldr	r3, [r7, #28]
   16ee0:	6858      	ldr	r0, [r3, #4]
   16ee2:	693b      	ldr	r3, [r7, #16]
   16ee4:	6819      	ldr	r1, [r3, #0]
               *value,
                0,
               &pData,
               &length,
               &dummy,
               &MBvar);
   16ee6:	f107 020c 	add.w	r2, r7, #12
   16eea:	f107 0309 	add.w	r3, r7, #9
   16eee:	9302      	str	r3, [sp, #8]
   16ef0:	f107 030a 	add.w	r3, r7, #10
   16ef4:	9301      	str	r3, [sp, #4]
   16ef6:	f107 030b 	add.w	r3, r7, #11
   16efa:	9300      	str	r3, [sp, #0]
   16efc:	4613      	mov	r3, r2
   16efe:	2200      	movs	r2, #0
   16f00:	4c08      	ldr	r4, [pc, #32]	; (16f24 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x100>)
   16f02:	47a0      	blx	r4
   16f04:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
   16f06:	4618      	mov	r0, r3
   16f08:	3724      	adds	r7, #36	; 0x24
   16f0a:	46bd      	mov	sp, r7
   16f0c:	bd90      	pop	{r4, r7, pc}
   16f0e:	bf00      	nop
   16f10:	06010002 	.word	0x06010002
   16f14:	08000022 	.word	0x08000022
   16f18:	06010000 	.word	0x06010000
   16f1c:	06040042 	.word	0x06040042
   16f20:	00016921 	.word	0x00016921
   16f24:	00016721 	.word	0x00016721

00016f28 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
   16f28:	b590      	push	{r4, r7, lr}
   16f2a:	b08d      	sub	sp, #52	; 0x34
   16f2c:	af04      	add	r7, sp, #16
   16f2e:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
   16f30:	687b      	ldr	r3, [r7, #4]
   16f32:	681b      	ldr	r3, [r3, #0]
   16f34:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
   16f36:	687b      	ldr	r3, [r7, #4]
   16f38:	7f5b      	ldrb	r3, [r3, #29]
   16f3a:	2b00      	cmp	r3, #0
   16f3c:	d00f      	beq.n	16f5e <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   16f3e:	687b      	ldr	r3, [r7, #4]
   16f40:	685b      	ldr	r3, [r3, #4]
   16f42:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
   16f44:	687b      	ldr	r3, [r7, #4]
   16f46:	7f1b      	ldrb	r3, [r3, #28]
   16f48:	2b00      	cmp	r3, #0
   16f4a:	d106      	bne.n	16f5a <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
   16f4c:	69fb      	ldr	r3, [r7, #28]
   16f4e:	7f9b      	ldrb	r3, [r3, #30]
   16f50:	2b00      	cmp	r3, #0
   16f52:	d102      	bne.n	16f5a <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
   16f54:	69bb      	ldr	r3, [r7, #24]
   16f56:	2200      	movs	r2, #0
   16f58:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
   16f5a:	2300      	movs	r3, #0
   16f5c:	e050      	b.n	17000 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
   16f5e:	69fb      	ldr	r3, [r7, #28]
   16f60:	7f1b      	ldrb	r3, [r3, #28]
   16f62:	f003 0308 	and.w	r3, r3, #8
   16f66:	2b00      	cmp	r3, #0
   16f68:	d001      	beq.n	16f6e <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
   16f6a:	4b27      	ldr	r3, [pc, #156]	; (17008 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe0>)
   16f6c:	e048      	b.n	17000 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
   16f6e:	69fb      	ldr	r3, [r7, #28]
   16f70:	691b      	ldr	r3, [r3, #16]
   16f72:	781b      	ldrb	r3, [r3, #0]
   16f74:	2b05      	cmp	r3, #5
   16f76:	d107      	bne.n	16f88 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
   16f78:	69fb      	ldr	r3, [r7, #28]
   16f7a:	7f1b      	ldrb	r3, [r3, #28]
   16f7c:	f003 0302 	and.w	r3, r3, #2
   16f80:	2b00      	cmp	r3, #0
   16f82:	d001      	beq.n	16f88 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
   16f84:	4b21      	ldr	r3, [pc, #132]	; (1700c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe4>)
   16f86:	e03b      	b.n	17000 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(TPDO->valid)
   16f88:	69fb      	ldr	r3, [r7, #28]
   16f8a:	7f5b      	ldrb	r3, [r3, #29]
   16f8c:	2b00      	cmp	r3, #0
   16f8e:	d001      	beq.n	16f94 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
   16f90:	4b1f      	ldr	r3, [pc, #124]	; (17010 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
   16f92:	e035      	b.n	17000 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
   16f94:	687b      	ldr	r3, [r7, #4]
   16f96:	7f1b      	ldrb	r3, [r3, #28]
   16f98:	2b00      	cmp	r3, #0
   16f9a:	d110      	bne.n	16fbe <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   16f9c:	687b      	ldr	r3, [r7, #4]
   16f9e:	685b      	ldr	r3, [r3, #4]
   16fa0:	617b      	str	r3, [r7, #20]

        if(*value > 8)
   16fa2:	697b      	ldr	r3, [r7, #20]
   16fa4:	781b      	ldrb	r3, [r3, #0]
   16fa6:	2b08      	cmp	r3, #8
   16fa8:	dd01      	ble.n	16fae <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
   16faa:	4b1a      	ldr	r3, [pc, #104]	; (17014 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xec>)
   16fac:	e028      	b.n	17000 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_TPDOconfigMap(TPDO, *value);
   16fae:	697b      	ldr	r3, [r7, #20]
   16fb0:	781b      	ldrb	r3, [r3, #0]
   16fb2:	4619      	mov	r1, r3
   16fb4:	69f8      	ldr	r0, [r7, #28]
   16fb6:	4b18      	ldr	r3, [pc, #96]	; (17018 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf0>)
   16fb8:	4798      	blx	r3
   16fba:	4603      	mov	r3, r0
   16fbc:	e020      	b.n	17000 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
   16fbe:	687b      	ldr	r3, [r7, #4]
   16fc0:	685b      	ldr	r3, [r3, #4]
   16fc2:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
   16fc4:	2300      	movs	r3, #0
   16fc6:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
   16fc8:	2300      	movs	r3, #0
   16fca:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
   16fcc:	69fb      	ldr	r3, [r7, #28]
   16fce:	7f9b      	ldrb	r3, [r3, #30]
   16fd0:	2b00      	cmp	r3, #0
   16fd2:	d001      	beq.n	16fd8 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
   16fd4:	4b0e      	ldr	r3, [pc, #56]	; (17010 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
   16fd6:	e013      	b.n	17000 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t)CO_PDOfindMap(
   16fd8:	69fb      	ldr	r3, [r7, #28]
   16fda:	6858      	ldr	r0, [r3, #4]
   16fdc:	693b      	ldr	r3, [r7, #16]
   16fde:	6819      	ldr	r1, [r3, #0]
               *value,
                1,
               &pData,
               &length,
               &dummy,
               &MBvar);
   16fe0:	f107 020c 	add.w	r2, r7, #12
   16fe4:	f107 0309 	add.w	r3, r7, #9
   16fe8:	9302      	str	r3, [sp, #8]
   16fea:	f107 030a 	add.w	r3, r7, #10
   16fee:	9301      	str	r3, [sp, #4]
   16ff0:	f107 030b 	add.w	r3, r7, #11
   16ff4:	9300      	str	r3, [sp, #0]
   16ff6:	4613      	mov	r3, r2
   16ff8:	2201      	movs	r2, #1
   16ffa:	4c08      	ldr	r4, [pc, #32]	; (1701c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf4>)
   16ffc:	47a0      	blx	r4
   16ffe:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
   17000:	4618      	mov	r0, r3
   17002:	3724      	adds	r7, #36	; 0x24
   17004:	46bd      	mov	sp, r7
   17006:	bd90      	pop	{r4, r7, pc}
   17008:	06010002 	.word	0x06010002
   1700c:	08000022 	.word	0x08000022
   17010:	06010000 	.word	0x06010000
   17014:	06040042 	.word	0x06040042
   17018:	000169f1 	.word	0x000169f1
   1701c:	00016721 	.word	0x00016721

00017020 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint32_t                idx_RPDOCommPar,
        uint32_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx)
{
   17020:	b590      	push	{r4, r7, lr}
   17022:	b087      	sub	sp, #28
   17024:	af02      	add	r7, sp, #8
   17026:	60f8      	str	r0, [r7, #12]
   17028:	60b9      	str	r1, [r7, #8]
   1702a:	607a      	str	r2, [r7, #4]
   1702c:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || SYNC==NULL || operatingState==NULL ||
   1702e:	68bb      	ldr	r3, [r7, #8]
   17030:	2b00      	cmp	r3, #0
   17032:	d014      	beq.n	1705e <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   17034:	687b      	ldr	r3, [r7, #4]
   17036:	2b00      	cmp	r3, #0
   17038:	d011      	beq.n	1705e <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   1703a:	683b      	ldr	r3, [r7, #0]
   1703c:	2b00      	cmp	r3, #0
   1703e:	d00e      	beq.n	1705e <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   17040:	6a3b      	ldr	r3, [r7, #32]
   17042:	2b00      	cmp	r3, #0
   17044:	d00b      	beq.n	1705e <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   17046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17048:	2b00      	cmp	r3, #0
   1704a:	d008      	beq.n	1705e <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   1704c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1704e:	2b00      	cmp	r3, #0
   17050:	d005      	beq.n	1705e <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
   17052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17054:	2b00      	cmp	r3, #0
   17056:	d002      	beq.n	1705e <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   17058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1705a:	2b00      	cmp	r3, #0
   1705c:	d102      	bne.n	17064 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x44>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   1705e:	f04f 33ff 	mov.w	r3, #4294967295
   17062:	e050      	b.n	17106 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xe6>
    }

    /* Configure object variables */
    RPDO->em = em;
   17064:	68bb      	ldr	r3, [r7, #8]
   17066:	687a      	ldr	r2, [r7, #4]
   17068:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
   1706a:	68bb      	ldr	r3, [r7, #8]
   1706c:	683a      	ldr	r2, [r7, #0]
   1706e:	605a      	str	r2, [r3, #4]
    RPDO->SYNC = SYNC;
   17070:	68bb      	ldr	r3, [r7, #8]
   17072:	6a3a      	ldr	r2, [r7, #32]
   17074:	609a      	str	r2, [r3, #8]
    RPDO->RPDOCommPar = RPDOCommPar;
   17076:	68bb      	ldr	r3, [r7, #8]
   17078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1707a:	60da      	str	r2, [r3, #12]
    RPDO->RPDOMapPar = RPDOMapPar;
   1707c:	68bb      	ldr	r3, [r7, #8]
   1707e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   17080:	611a      	str	r2, [r3, #16]
    RPDO->operatingState = operatingState;
   17082:	68bb      	ldr	r3, [r7, #8]
   17084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17086:	615a      	str	r2, [r3, #20]
    RPDO->nodeId = nodeId;
   17088:	68bb      	ldr	r3, [r7, #8]
   1708a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   1708e:	761a      	strb	r2, [r3, #24]
    RPDO->defaultCOB_ID = defaultCOB_ID;
   17090:	68bb      	ldr	r3, [r7, #8]
   17092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   17094:	61da      	str	r2, [r3, #28]
    RPDO->restrictionFlags = restrictionFlags;
   17096:	68bb      	ldr	r3, [r7, #8]
   17098:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
   1709c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    canopen_driver->CO_OD_configure( idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
   170a0:	4b1b      	ldr	r3, [pc, #108]	; (17110 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
   170a2:	681b      	ldr	r3, [r3, #0]
   170a4:	1d18      	adds	r0, r3, #4
   170a6:	2300      	movs	r3, #0
   170a8:	9301      	str	r3, [sp, #4]
   170aa:	2300      	movs	r3, #0
   170ac:	9300      	str	r3, [sp, #0]
   170ae:	68bb      	ldr	r3, [r7, #8]
   170b0:	4a18      	ldr	r2, [pc, #96]	; (17114 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf4>)
   170b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   170b4:	4c18      	ldr	r4, [pc, #96]	; (17118 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
   170b6:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
   170b8:	4b15      	ldr	r3, [pc, #84]	; (17110 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
   170ba:	681b      	ldr	r3, [r3, #0]
   170bc:	1d18      	adds	r0, r3, #4
   170be:	2300      	movs	r3, #0
   170c0:	9301      	str	r3, [sp, #4]
   170c2:	2300      	movs	r3, #0
   170c4:	9300      	str	r3, [sp, #0]
   170c6:	68bb      	ldr	r3, [r7, #8]
   170c8:	4a14      	ldr	r2, [pc, #80]	; (1711c <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xfc>)
   170ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
   170cc:	4c12      	ldr	r4, [pc, #72]	; (17118 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
   170ce:	47a0      	blx	r4

    /* configure communication and mapping */
    RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   170d0:	68bb      	ldr	r3, [r7, #8]
   170d2:	2200      	movs	r2, #0
   170d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   170d8:	68bb      	ldr	r3, [r7, #8]
   170da:	2200      	movs	r2, #0
   170dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    RPDO->CANdevRx = CANdevRx;
   170e0:	68bb      	ldr	r3, [r7, #8]
   170e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   170e4:	659a      	str	r2, [r3, #88]	; 0x58
    RPDO->CANdevRxIdx = CANdevRxIdx;
   170e6:	68bb      	ldr	r3, [r7, #8]
   170e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
   170ea:	65da      	str	r2, [r3, #92]	; 0x5c

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
   170ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   170ee:	781b      	ldrb	r3, [r3, #0]
   170f0:	4619      	mov	r1, r3
   170f2:	68b8      	ldr	r0, [r7, #8]
   170f4:	4b0a      	ldr	r3, [pc, #40]	; (17120 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x100>)
   170f6:	4798      	blx	r3
   CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
   170f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   170fa:	685b      	ldr	r3, [r3, #4]
   170fc:	4619      	mov	r1, r3
   170fe:	68b8      	ldr	r0, [r7, #8]
   17100:	4b08      	ldr	r3, [pc, #32]	; (17124 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x104>)
   17102:	4798      	blx	r3

    return CO_ERROR_NO;
   17104:	2300      	movs	r3, #0
}
   17106:	4618      	mov	r0, r3
   17108:	3714      	adds	r7, #20
   1710a:	46bd      	mov	sp, r7
   1710c:	bd90      	pop	{r4, r7, pc}
   1710e:	bf00      	nop
   17110:	2000da0c 	.word	0x2000da0c
   17114:	00016ac1 	.word	0x00016ac1
   17118:	000177cd 	.word	0x000177cd
   1711c:	00016e25 	.word	0x00016e25
   17120:	00016921 	.word	0x00016921
   17124:	000165b5 	.word	0x000165b5

00017128 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint32_t                idx_TPDOCommPar,
        uint32_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   17128:	b590      	push	{r4, r7, lr}
   1712a:	b087      	sub	sp, #28
   1712c:	af02      	add	r7, sp, #8
   1712e:	60f8      	str	r0, [r7, #12]
   17130:	60b9      	str	r1, [r7, #8]
   17132:	607a      	str	r2, [r7, #4]
   17134:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
   17136:	68bb      	ldr	r3, [r7, #8]
   17138:	2b00      	cmp	r3, #0
   1713a:	d011      	beq.n	17160 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   1713c:	687b      	ldr	r3, [r7, #4]
   1713e:	2b00      	cmp	r3, #0
   17140:	d00e      	beq.n	17160 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   17142:	683b      	ldr	r3, [r7, #0]
   17144:	2b00      	cmp	r3, #0
   17146:	d00b      	beq.n	17160 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   17148:	6a3b      	ldr	r3, [r7, #32]
   1714a:	2b00      	cmp	r3, #0
   1714c:	d008      	beq.n	17160 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   1714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17150:	2b00      	cmp	r3, #0
   17152:	d005      	beq.n	17160 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
   17154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17156:	2b00      	cmp	r3, #0
   17158:	d002      	beq.n	17160 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   1715a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1715c:	2b00      	cmp	r3, #0
   1715e:	d102      	bne.n	17166 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   17160:	f04f 33ff 	mov.w	r3, #4294967295
   17164:	e07e      	b.n	17264 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x13c>
    }

    /* Configure object variables */
    TPDO->em = em;
   17166:	68bb      	ldr	r3, [r7, #8]
   17168:	687a      	ldr	r2, [r7, #4]
   1716a:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
   1716c:	68bb      	ldr	r3, [r7, #8]
   1716e:	683a      	ldr	r2, [r7, #0]
   17170:	605a      	str	r2, [r3, #4]
    TPDO->TPDOCommPar = TPDOCommPar;
   17172:	68bb      	ldr	r3, [r7, #8]
   17174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   17176:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
   17178:	68bb      	ldr	r3, [r7, #8]
   1717a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1717c:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
   1717e:	68bb      	ldr	r3, [r7, #8]
   17180:	6a3a      	ldr	r2, [r7, #32]
   17182:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
   17184:	68bb      	ldr	r3, [r7, #8]
   17186:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
   1718a:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
   1718c:	68bb      	ldr	r3, [r7, #8]
   1718e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17190:	619a      	str	r2, [r3, #24]
    TPDO->restrictionFlags = restrictionFlags;
   17192:	68bb      	ldr	r3, [r7, #8]
   17194:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   17198:	771a      	strb	r2, [r3, #28]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    canopen_driver->CO_OD_configure( idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
   1719a:	4b34      	ldr	r3, [pc, #208]	; (1726c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x144>)
   1719c:	681b      	ldr	r3, [r3, #0]
   1719e:	1d18      	adds	r0, r3, #4
   171a0:	2300      	movs	r3, #0
   171a2:	9301      	str	r3, [sp, #4]
   171a4:	2300      	movs	r3, #0
   171a6:	9300      	str	r3, [sp, #0]
   171a8:	68bb      	ldr	r3, [r7, #8]
   171aa:	4a31      	ldr	r2, [pc, #196]	; (17270 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x148>)
   171ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   171ae:	4c31      	ldr	r4, [pc, #196]	; (17274 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x14c>)
   171b0:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
   171b2:	4b2e      	ldr	r3, [pc, #184]	; (1726c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x144>)
   171b4:	681b      	ldr	r3, [r3, #0]
   171b6:	1d18      	adds	r0, r3, #4
   171b8:	2300      	movs	r3, #0
   171ba:	9301      	str	r3, [sp, #4]
   171bc:	2300      	movs	r3, #0
   171be:	9300      	str	r3, [sp, #0]
   171c0:	68bb      	ldr	r3, [r7, #8]
   171c2:	4a2d      	ldr	r2, [pc, #180]	; (17278 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x150>)
   171c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   171c6:	4c2b      	ldr	r4, [pc, #172]	; (17274 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x14c>)
   171c8:	47a0      	blx	r4

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
   171ca:	68bb      	ldr	r3, [r7, #8]
   171cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   171ce:	64da      	str	r2, [r3, #76]	; 0x4c
    TPDO->CANdevTxIdx = CANdevTxIdx;
   171d0:	68bb      	ldr	r3, [r7, #8]
   171d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   171d4:	655a      	str	r2, [r3, #84]	; 0x54
    TPDO->syncCounter = 255;
   171d6:	68bb      	ldr	r3, [r7, #8]
   171d8:	22ff      	movs	r2, #255	; 0xff
   171da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TPDO->inhibitTimer = 0;
   171de:	68bb      	ldr	r3, [r7, #8]
   171e0:	2200      	movs	r2, #0
   171e2:	645a      	str	r2, [r3, #68]	; 0x44
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
   171e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   171e6:	695b      	ldr	r3, [r3, #20]
   171e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   171ec:	fb02 f203 	mul.w	r2, r2, r3
   171f0:	68bb      	ldr	r3, [r7, #8]
   171f2:	649a      	str	r2, [r3, #72]	; 0x48
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
   171f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   171f6:	7a1b      	ldrb	r3, [r3, #8]
   171f8:	2bfd      	cmp	r3, #253	; 0xfd
   171fa:	dd02      	ble.n	17202 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xda>
   171fc:	68bb      	ldr	r3, [r7, #8]
   171fe:	2201      	movs	r2, #1
   17200:	77da      	strb	r2, [r3, #31]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
   17202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17204:	781b      	ldrb	r3, [r3, #0]
   17206:	4619      	mov	r1, r3
   17208:	68b8      	ldr	r0, [r7, #8]
   1720a:	4b1c      	ldr	r3, [pc, #112]	; (1727c <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x154>)
   1720c:	4798      	blx	r3
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
   1720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17210:	6859      	ldr	r1, [r3, #4]
   17212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17214:	7a1b      	ldrb	r3, [r3, #8]
   17216:	2bf0      	cmp	r3, #240	; 0xf0
   17218:	dc01      	bgt.n	1721e <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf6>
   1721a:	2301      	movs	r3, #1
   1721c:	e000      	b.n	17220 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>
   1721e:	2300      	movs	r3, #0
   17220:	461a      	mov	r2, r3
   17222:	68b8      	ldr	r0, [r7, #8]
   17224:	4b16      	ldr	r3, [pc, #88]	; (17280 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x158>)
   17226:	4798      	blx	r3

    if((TPDOCommPar->transmissionType>240 &&
   17228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1722a:	7a1b      	ldrb	r3, [r3, #8]
   1722c:	2bf0      	cmp	r3, #240	; 0xf0
   1722e:	dd03      	ble.n	17238 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x110>
         TPDOCommPar->transmissionType<254) ||
   17230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17232:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
   17234:	2bfd      	cmp	r3, #253	; 0xfd
   17236:	dd03      	ble.n	17240 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x118>
         TPDOCommPar->SYNCStartValue>240){
   17238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1723a:	7e1b      	ldrb	r3, [r3, #24]
         TPDOCommPar->transmissionType<254) ||
   1723c:	2bf0      	cmp	r3, #240	; 0xf0
   1723e:	dd02      	ble.n	17246 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x11e>
            TPDO->valid = false;
   17240:	68bb      	ldr	r3, [r7, #8]
   17242:	2200      	movs	r2, #0
   17244:	775a      	strb	r2, [r3, #29]
    }
	node_ID=nodeId; 
   17246:	68fb      	ldr	r3, [r7, #12]
   17248:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
   1724c:	721a      	strb	r2, [r3, #8]
	memcpy(&local_tx_buffer,TPDO->CANtxBuff,sizeof(CO_CANtx_t));
   1724e:	68bb      	ldr	r3, [r7, #8]
   17250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   17252:	2210      	movs	r2, #16
   17254:	4619      	mov	r1, r3
   17256:	480b      	ldr	r0, [pc, #44]	; (17284 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x15c>)
   17258:	4b0b      	ldr	r3, [pc, #44]	; (17288 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x160>)
   1725a:	4798      	blx	r3
	tx_buffer=&local_tx_buffer;
   1725c:	68fb      	ldr	r3, [r7, #12]
   1725e:	4a09      	ldr	r2, [pc, #36]	; (17284 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x15c>)
   17260:	601a      	str	r2, [r3, #0]
    return CO_ERROR_NO;
   17262:	2300      	movs	r3, #0
}
   17264:	4618      	mov	r0, r3
   17266:	3714      	adds	r7, #20
   17268:	46bd      	mov	sp, r7
   1726a:	bd90      	pop	{r4, r7, pc}
   1726c:	2000da0c 	.word	0x2000da0c
   17270:	00016c41 	.word	0x00016c41
   17274:	000177cd 	.word	0x000177cd
   17278:	00016f29 	.word	0x00016f29
   1727c:	000169f1 	.word	0x000169f1
   17280:	0001668d 	.word	0x0001668d
   17284:	2000da20 	.word	0x2000da20
   17288:	0001a635 	.word	0x0001a635

0001728c <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh>:


    return   canopen_driver->CAN_Send( TPDO->CANtxBuff);
}

uint32_t CO_PDO_Class::Send_Simple_Run_Command(uint8_t *data,uint8_t node){
   1728c:	b580      	push	{r7, lr}
   1728e:	b086      	sub	sp, #24
   17290:	af00      	add	r7, sp, #0
   17292:	60f8      	str	r0, [r7, #12]
   17294:	60b9      	str	r1, [r7, #8]
   17296:	4613      	mov	r3, r2
   17298:	71fb      	strb	r3, [r7, #7]
	tx_buffer->ident=(CO_CAN_ID_RPDO_1+node)<<2;
   1729a:	68fb      	ldr	r3, [r7, #12]
   1729c:	681b      	ldr	r3, [r3, #0]
   1729e:	79fa      	ldrb	r2, [r7, #7]
   172a0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   172a4:	0092      	lsls	r2, r2, #2
   172a6:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++)
   172a8:	2300      	movs	r3, #0
   172aa:	75fb      	strb	r3, [r7, #23]
   172ac:	7dfb      	ldrb	r3, [r7, #23]
   172ae:	2b07      	cmp	r3, #7
   172b0:	dc0d      	bgt.n	172ce <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x42>
	{
		tx_buffer->data[i]=data[i];
   172b2:	68fb      	ldr	r3, [r7, #12]
   172b4:	681a      	ldr	r2, [r3, #0]
   172b6:	7dfb      	ldrb	r3, [r7, #23]
   172b8:	7df9      	ldrb	r1, [r7, #23]
   172ba:	68b8      	ldr	r0, [r7, #8]
   172bc:	4401      	add	r1, r0
   172be:	7809      	ldrb	r1, [r1, #0]
   172c0:	4413      	add	r3, r2
   172c2:	460a      	mov	r2, r1
   172c4:	715a      	strb	r2, [r3, #5]
	for (uint8_t i = 0; i < 8; i++)
   172c6:	7dfb      	ldrb	r3, [r7, #23]
   172c8:	3301      	adds	r3, #1
   172ca:	75fb      	strb	r3, [r7, #23]
   172cc:	e7ee      	b.n	172ac <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x20>
	}
	tx_buffer->DLC=4;
   172ce:	68fb      	ldr	r3, [r7, #12]
   172d0:	681b      	ldr	r3, [r3, #0]
   172d2:	2204      	movs	r2, #4
   172d4:	711a      	strb	r2, [r3, #4]
	 return   canopen_driver->CAN_Send(tx_buffer);
   172d6:	4b06      	ldr	r3, [pc, #24]	; (172f0 <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x64>)
   172d8:	681a      	ldr	r2, [r3, #0]
   172da:	68fb      	ldr	r3, [r7, #12]
   172dc:	681b      	ldr	r3, [r3, #0]
   172de:	4619      	mov	r1, r3
   172e0:	4610      	mov	r0, r2
   172e2:	4b04      	ldr	r3, [pc, #16]	; (172f4 <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x68>)
   172e4:	4798      	blx	r3
   172e6:	4603      	mov	r3, r0
}
   172e8:	4618      	mov	r0, r3
   172ea:	3718      	adds	r7, #24
   172ec:	46bd      	mov	sp, r7
   172ee:	bd80      	pop	{r7, pc}
   172f0:	2000da0c 	.word	0x2000da0c
   172f4:	0001596d 	.word	0x0001596d

000172f8 <_ZN12CO_SDO_ClassC1Ev>:

CO_SDO_Class	*ptrCOSDOClass;
CO_SDO_t *SDO;

// default constructor
CO_SDO_Class::CO_SDO_Class()
   172f8:	b580      	push	{r7, lr}
   172fa:	b082      	sub	sp, #8
   172fc:	af00      	add	r7, sp, #0
   172fe:	6078      	str	r0, [r7, #4]
   17300:	6878      	ldr	r0, [r7, #4]
   17302:	4b05      	ldr	r3, [pc, #20]	; (17318 <_ZN12CO_SDO_ClassC1Ev+0x20>)
   17304:	4798      	blx	r3
{
	ptrCOSDOClass=this;
   17306:	4a05      	ldr	r2, [pc, #20]	; (1731c <_ZN12CO_SDO_ClassC1Ev+0x24>)
   17308:	687b      	ldr	r3, [r7, #4]
   1730a:	6013      	str	r3, [r2, #0]
} //CO_SDO_Class
   1730c:	687b      	ldr	r3, [r7, #4]
   1730e:	4618      	mov	r0, r3
   17310:	3708      	adds	r7, #8
   17312:	46bd      	mov	sp, r7
   17314:	bd80      	pop	{r7, pc}
   17316:	bf00      	nop
   17318:	00017fc1 	.word	0x00017fc1
   1731c:	2000da48 	.word	0x2000da48

00017320 <_ZN12CO_SDO_ClassD1Ev>:

// default destructor
CO_SDO_Class::~CO_SDO_Class()
   17320:	b580      	push	{r7, lr}
   17322:	b082      	sub	sp, #8
   17324:	af00      	add	r7, sp, #0
   17326:	6078      	str	r0, [r7, #4]
   17328:	6878      	ldr	r0, [r7, #4]
   1732a:	4b03      	ldr	r3, [pc, #12]	; (17338 <_ZN12CO_SDO_ClassD1Ev+0x18>)
   1732c:	4798      	blx	r3
{
} //~CO_SDO_Class
   1732e:	687b      	ldr	r3, [r7, #4]
   17330:	4618      	mov	r0, r3
   17332:	3708      	adds	r7, #8
   17334:	46bd      	mov	sp, r7
   17336:	bd80      	pop	{r7, pc}
   17338:	00017fd5 	.word	0x00017fd5

0001733c <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm>:

void CO_SDO_Class::CO_memcpy(uint8_t dest[], const uint8_t src[], const uint32_t size){
   1733c:	b480      	push	{r7}
   1733e:	b087      	sub	sp, #28
   17340:	af00      	add	r7, sp, #0
   17342:	60f8      	str	r0, [r7, #12]
   17344:	60b9      	str	r1, [r7, #8]
   17346:	607a      	str	r2, [r7, #4]
   17348:	603b      	str	r3, [r7, #0]
    uint32_t i;
    for(i = 0; i < size; i++){
   1734a:	2300      	movs	r3, #0
   1734c:	617b      	str	r3, [r7, #20]
   1734e:	697a      	ldr	r2, [r7, #20]
   17350:	683b      	ldr	r3, [r7, #0]
   17352:	429a      	cmp	r2, r3
   17354:	d20b      	bcs.n	1736e <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x32>
        dest[i] = src[i];
   17356:	68ba      	ldr	r2, [r7, #8]
   17358:	697b      	ldr	r3, [r7, #20]
   1735a:	4413      	add	r3, r2
   1735c:	6879      	ldr	r1, [r7, #4]
   1735e:	697a      	ldr	r2, [r7, #20]
   17360:	440a      	add	r2, r1
   17362:	7812      	ldrb	r2, [r2, #0]
   17364:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < size; i++){
   17366:	697b      	ldr	r3, [r7, #20]
   17368:	3301      	adds	r3, #1
   1736a:	617b      	str	r3, [r7, #20]
   1736c:	e7ef      	b.n	1734e <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x12>
    }
}
   1736e:	bf00      	nop
   17370:	371c      	adds	r7, #28
   17372:	46bd      	mov	sp, r7
   17374:	bc80      	pop	{r7}
   17376:	4770      	bx	lr

00017378 <_ZN12CO_SDO_Class12CO_getUint32EPKh>:
    b.u8[0] = data[0];
    b.u8[1] = data[1];
    return b.u16[0];
}

uint32_t CO_SDO_Class::CO_getUint32(const uint8_t data[]){
   17378:	b480      	push	{r7}
   1737a:	b087      	sub	sp, #28
   1737c:	af00      	add	r7, sp, #0
   1737e:	6078      	str	r0, [r7, #4]
   17380:	6039      	str	r1, [r7, #0]
    CO_bytes_t b;
    b.u8[0] = data[0];
   17382:	683b      	ldr	r3, [r7, #0]
   17384:	781b      	ldrb	r3, [r3, #0]
   17386:	723b      	strb	r3, [r7, #8]
    b.u8[1] = data[1];
   17388:	683b      	ldr	r3, [r7, #0]
   1738a:	3301      	adds	r3, #1
   1738c:	781b      	ldrb	r3, [r3, #0]
   1738e:	727b      	strb	r3, [r7, #9]
    b.u8[2] = data[2];
   17390:	683b      	ldr	r3, [r7, #0]
   17392:	3302      	adds	r3, #2
   17394:	781b      	ldrb	r3, [r3, #0]
   17396:	72bb      	strb	r3, [r7, #10]
    b.u8[3] = data[3];
   17398:	683b      	ldr	r3, [r7, #0]
   1739a:	3303      	adds	r3, #3
   1739c:	781b      	ldrb	r3, [r3, #0]
   1739e:	72fb      	strb	r3, [r7, #11]
    return b.u32[0];
   173a0:	68bb      	ldr	r3, [r7, #8]
}
   173a2:	4618      	mov	r0, r3
   173a4:	371c      	adds	r7, #28
   173a6:	46bd      	mov	sp, r7
   173a8:	bc80      	pop	{r7}
   173aa:	4770      	bx	lr

000173ac <_ZN12CO_SDO_Class12CO_setUint32EPhm>:
    b.u16[0] = value;
    data[0] = b.u8[0];
    data[1] = b.u8[1];
}

void CO_SDO_Class::CO_setUint32(uint8_t data[], const uint32_t value){
   173ac:	b480      	push	{r7}
   173ae:	b089      	sub	sp, #36	; 0x24
   173b0:	af00      	add	r7, sp, #0
   173b2:	60f8      	str	r0, [r7, #12]
   173b4:	60b9      	str	r1, [r7, #8]
   173b6:	607a      	str	r2, [r7, #4]
    CO_bytes_t b;
    b.u32[0] = value;
   173b8:	687b      	ldr	r3, [r7, #4]
   173ba:	613b      	str	r3, [r7, #16]
    data[0] = b.u8[0];
   173bc:	7c3a      	ldrb	r2, [r7, #16]
   173be:	68bb      	ldr	r3, [r7, #8]
   173c0:	701a      	strb	r2, [r3, #0]
    data[1] = b.u8[1];
   173c2:	68bb      	ldr	r3, [r7, #8]
   173c4:	3301      	adds	r3, #1
   173c6:	7c7a      	ldrb	r2, [r7, #17]
   173c8:	701a      	strb	r2, [r3, #0]
    data[2] = b.u8[2];
   173ca:	68bb      	ldr	r3, [r7, #8]
   173cc:	3302      	adds	r3, #2
   173ce:	7cba      	ldrb	r2, [r7, #18]
   173d0:	701a      	strb	r2, [r3, #0]
    data[3] = b.u8[3];
   173d2:	68bb      	ldr	r3, [r7, #8]
   173d4:	3303      	adds	r3, #3
   173d6:	7cfa      	ldrb	r2, [r7, #19]
   173d8:	701a      	strb	r2, [r3, #0]
}
   173da:	bf00      	nop
   173dc:	3724      	adds	r7, #36	; 0x24
   173de:	46bd      	mov	sp, r7
   173e0:	bc80      	pop	{r7}
   173e2:	4770      	bx	lr

000173e4 <_ZN12CO_SDO_Class14CO_memcpySwap2EPvPKv>:

#ifdef CO_LITTLE_ENDIAN
void CO_SDO_Class::CO_memcpySwap2(void* dest, const void* src){
   173e4:	b480      	push	{r7}
   173e6:	b087      	sub	sp, #28
   173e8:	af00      	add	r7, sp, #0
   173ea:	60f8      	str	r0, [r7, #12]
   173ec:	60b9      	str	r1, [r7, #8]
   173ee:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
   173f0:	68bb      	ldr	r3, [r7, #8]
   173f2:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
   173f4:	687b      	ldr	r3, [r7, #4]
   173f6:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
   173f8:	693b      	ldr	r3, [r7, #16]
   173fa:	781a      	ldrb	r2, [r3, #0]
   173fc:	697b      	ldr	r3, [r7, #20]
   173fe:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
   17400:	697b      	ldr	r3, [r7, #20]
   17402:	3301      	adds	r3, #1
   17404:	693a      	ldr	r2, [r7, #16]
   17406:	7852      	ldrb	r2, [r2, #1]
   17408:	701a      	strb	r2, [r3, #0]
}
   1740a:	bf00      	nop
   1740c:	371c      	adds	r7, #28
   1740e:	46bd      	mov	sp, r7
   17410:	bc80      	pop	{r7}
   17412:	4770      	bx	lr

00017414 <_ZN12CO_SDO_Class14CO_memcpySwap4EPvPKv>:
void CO_SDO_Class::CO_memcpySwap4(void* dest, const void* src){
   17414:	b480      	push	{r7}
   17416:	b087      	sub	sp, #28
   17418:	af00      	add	r7, sp, #0
   1741a:	60f8      	str	r0, [r7, #12]
   1741c:	60b9      	str	r1, [r7, #8]
   1741e:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
   17420:	68bb      	ldr	r3, [r7, #8]
   17422:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
   17424:	687b      	ldr	r3, [r7, #4]
   17426:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
   17428:	693b      	ldr	r3, [r7, #16]
   1742a:	781a      	ldrb	r2, [r3, #0]
   1742c:	697b      	ldr	r3, [r7, #20]
   1742e:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
   17430:	697b      	ldr	r3, [r7, #20]
   17432:	3301      	adds	r3, #1
   17434:	693a      	ldr	r2, [r7, #16]
   17436:	7852      	ldrb	r2, [r2, #1]
   17438:	701a      	strb	r2, [r3, #0]
    cdest[2] = csrc[2];
   1743a:	697b      	ldr	r3, [r7, #20]
   1743c:	3302      	adds	r3, #2
   1743e:	693a      	ldr	r2, [r7, #16]
   17440:	7892      	ldrb	r2, [r2, #2]
   17442:	701a      	strb	r2, [r3, #0]
    cdest[3] = csrc[3];
   17444:	697b      	ldr	r3, [r7, #20]
   17446:	3303      	adds	r3, #3
   17448:	693a      	ldr	r2, [r7, #16]
   1744a:	78d2      	ldrb	r2, [r2, #3]
   1744c:	701a      	strb	r2, [r3, #0]
}
   1744e:	bf00      	nop
   17450:	371c      	adds	r7, #28
   17452:	46bd      	mov	sp, r7
   17454:	bc80      	pop	{r7}
   17456:	4770      	bx	lr

00017458 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */

static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg){
   17458:	b580      	push	{r7, lr}
   1745a:	b086      	sub	sp, #24
   1745c:	af00      	add	r7, sp, #0
   1745e:	6078      	str	r0, [r7, #4]
   17460:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;
	
    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
   17462:	687b      	ldr	r3, [r7, #4]
   17464:	613b      	str	r3, [r7, #16]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((msg->DLC == 8U) && (!SDO->CANrxNew)){
   17466:	683b      	ldr	r3, [r7, #0]
   17468:	7d1b      	ldrb	r3, [r3, #20]
   1746a:	2b08      	cmp	r3, #8
   1746c:	f040 80a4 	bne.w	175b8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
   17470:	693b      	ldr	r3, [r7, #16]
   17472:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   17476:	2b00      	cmp	r3, #0
   17478:	f040 809e 	bne.w	175b8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
   1747c:	693b      	ldr	r3, [r7, #16]
   1747e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   17482:	2b15      	cmp	r3, #21
   17484:	d024      	beq.n	174d0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x78>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = msg->data[0];
   17486:	683b      	ldr	r3, [r7, #0]
   17488:	7d5a      	ldrb	r2, [r3, #21]
   1748a:	693b      	ldr	r3, [r7, #16]
   1748c:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = msg->data[1];
   1748e:	683b      	ldr	r3, [r7, #0]
   17490:	7d9a      	ldrb	r2, [r3, #22]
   17492:	693b      	ldr	r3, [r7, #16]
   17494:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = msg->data[2];
   17496:	683b      	ldr	r3, [r7, #0]
   17498:	7dda      	ldrb	r2, [r3, #23]
   1749a:	693b      	ldr	r3, [r7, #16]
   1749c:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = msg->data[3];
   1749e:	683b      	ldr	r3, [r7, #0]
   174a0:	7e1a      	ldrb	r2, [r3, #24]
   174a2:	693b      	ldr	r3, [r7, #16]
   174a4:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = msg->data[4];
   174a6:	683b      	ldr	r3, [r7, #0]
   174a8:	7e5a      	ldrb	r2, [r3, #25]
   174aa:	693b      	ldr	r3, [r7, #16]
   174ac:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = msg->data[5];
   174ae:	683b      	ldr	r3, [r7, #0]
   174b0:	7e9a      	ldrb	r2, [r3, #26]
   174b2:	693b      	ldr	r3, [r7, #16]
   174b4:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = msg->data[6];
   174b6:	683b      	ldr	r3, [r7, #0]
   174b8:	7eda      	ldrb	r2, [r3, #27]
   174ba:	693b      	ldr	r3, [r7, #16]
   174bc:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = msg->data[7];
   174be:	683b      	ldr	r3, [r7, #0]
   174c0:	7f1a      	ldrb	r2, [r3, #28]
   174c2:	693b      	ldr	r3, [r7, #16]
   174c4:	71da      	strb	r2, [r3, #7]

            SDO->CANrxNew = true;
   174c6:	693b      	ldr	r3, [r7, #16]
   174c8:	2201      	movs	r2, #1
   174ca:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   174ce:	e067      	b.n	175a0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = msg->data[0];
   174d0:	683b      	ldr	r3, [r7, #0]
   174d2:	7d5a      	ldrb	r2, [r3, #21]
   174d4:	693b      	ldr	r3, [r7, #16]
   174d6:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
   174d8:	693b      	ldr	r3, [r7, #16]
   174da:	781b      	ldrb	r3, [r3, #0]
   174dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   174e0:	73fb      	strb	r3, [r7, #15]
            SDO->timeoutTimer = 0;
   174e2:	693b      	ldr	r3, [r7, #16]
   174e4:	2200      	movs	r2, #0
   174e6:	66da      	str	r2, [r3, #108]	; 0x6c

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
   174e8:	7bfa      	ldrb	r2, [r7, #15]
   174ea:	693b      	ldr	r3, [r7, #16]
   174ec:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   174f0:	3301      	adds	r3, #1
   174f2:	429a      	cmp	r2, r3
   174f4:	d141      	bne.n	1757a <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x122>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
   174f6:	693b      	ldr	r3, [r7, #16]
   174f8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   174fc:	3301      	adds	r3, #1
   174fe:	b2da      	uxtb	r2, r3
   17500:	693b      	ldr	r3, [r7, #16]
   17502:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

                /* copy data */
                for(i=1; i<8; i++) {
   17506:	2301      	movs	r3, #1
   17508:	75fb      	strb	r3, [r7, #23]
   1750a:	7dfb      	ldrb	r3, [r7, #23]
   1750c:	2b07      	cmp	r3, #7
   1750e:	dc1d      	bgt.n	1754c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = msg->data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
   17510:	693b      	ldr	r3, [r7, #16]
   17512:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   17514:	693b      	ldr	r3, [r7, #16]
   17516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17518:	1c58      	adds	r0, r3, #1
   1751a:	6939      	ldr	r1, [r7, #16]
   1751c:	6388      	str	r0, [r1, #56]	; 0x38
   1751e:	4413      	add	r3, r2
   17520:	7dfa      	ldrb	r2, [r7, #23]
   17522:	6839      	ldr	r1, [r7, #0]
   17524:	440a      	add	r2, r1
   17526:	7d52      	ldrb	r2, [r2, #21]
   17528:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
   1752a:	693b      	ldr	r3, [r7, #16]
   1752c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1752e:	2b1f      	cmp	r3, #31
   17530:	d908      	bls.n	17544 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xec>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   17532:	693b      	ldr	r3, [r7, #16]
   17534:	2216      	movs	r2, #22
   17536:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                        SDO->CANrxNew = true;
   1753a:	693b      	ldr	r3, [r7, #16]
   1753c:	2201      	movs	r2, #1
   1753e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
                        break;
   17542:	e003      	b.n	1754c <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                for(i=1; i<8; i++) {
   17544:	7dfb      	ldrb	r3, [r7, #23]
   17546:	3301      	adds	r3, #1
   17548:	75fb      	strb	r3, [r7, #23]
   1754a:	e7de      	b.n	1750a <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xb2>
                    }
                }

                /* break reception if last segment or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
   1754c:	693b      	ldr	r3, [r7, #16]
   1754e:	781b      	ldrb	r3, [r3, #0]
   17550:	b25b      	sxtb	r3, r3
   17552:	2b00      	cmp	r3, #0
   17554:	db08      	blt.n	17568 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x110>
   17556:	693b      	ldr	r3, [r7, #16]
   17558:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   1755c:	461a      	mov	r2, r3
   1755e:	693b      	ldr	r3, [r7, #16]
   17560:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   17564:	429a      	cmp	r2, r3
   17566:	db1b      	blt.n	175a0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                    SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   17568:	693b      	ldr	r3, [r7, #16]
   1756a:	2216      	movs	r2, #22
   1756c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                    SDO->CANrxNew = true;
   17570:	693b      	ldr	r3, [r7, #16]
   17572:	2201      	movs	r2, #1
   17574:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   17578:	e012      	b.n	175a0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
   1757a:	693b      	ldr	r3, [r7, #16]
   1757c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   17580:	7bfa      	ldrb	r2, [r7, #15]
   17582:	429a      	cmp	r2, r3
   17584:	d00c      	beq.n	175a0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
   17586:	693b      	ldr	r3, [r7, #16]
   17588:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   1758c:	2b00      	cmp	r3, #0
   1758e:	d007      	beq.n	175a0 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is totally wrong, break reception. */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   17590:	693b      	ldr	r3, [r7, #16]
   17592:	2216      	movs	r2, #22
   17594:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                SDO->CANrxNew = true;
   17598:	693b      	ldr	r3, [r7, #16]
   1759a:	2201      	movs	r2, #1
   1759c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }
        }

        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(SDO->CANrxNew && SDO->ptrFunctSignal != NULL) {
   175a0:	693b      	ldr	r3, [r7, #16]
   175a2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   175a6:	2b00      	cmp	r3, #0
   175a8:	d006      	beq.n	175b8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
   175aa:	693b      	ldr	r3, [r7, #16]
   175ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   175ae:	2b00      	cmp	r3, #0
   175b0:	d002      	beq.n	175b8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
            SDO->ptrFunctSignal();
   175b2:	693b      	ldr	r3, [r7, #16]
   175b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   175b6:	4798      	blx	r3
        }
    }
}
   175b8:	bf00      	nop
   175ba:	3718      	adds	r7, #24
   175bc:	46bd      	mov	sp, r7
   175be:	bd80      	pop	{r7, pc}

000175c0 <_ZL11CO_ODF_1200P12CO_ODF_arg_t>:
 * Function for accessing _SDO server parameter_ for default SDO (index 0x1200)
 * from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
 static CO_SDO_abortCode_t  CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
   175c0:	b580      	push	{r7, lr}
   175c2:	b086      	sub	sp, #24
   175c4:	af00      	add	r7, sp, #0
   175c6:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   175c8:	2300      	movs	r3, #0
   175ca:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
   175cc:	687b      	ldr	r3, [r7, #4]
   175ce:	681b      	ldr	r3, [r3, #0]
   175d0:	613b      	str	r3, [r7, #16]
    value = canopen_driver->CO_getUint32(ODF_arg->data);
   175d2:	4b12      	ldr	r3, [pc, #72]	; (1761c <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
   175d4:	681b      	ldr	r3, [r3, #0]
   175d6:	1d1a      	adds	r2, r3, #4
   175d8:	687b      	ldr	r3, [r7, #4]
   175da:	685b      	ldr	r3, [r3, #4]
   175dc:	4619      	mov	r1, r3
   175de:	4610      	mov	r0, r2
   175e0:	4b0f      	ldr	r3, [pc, #60]	; (17620 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x60>)
   175e2:	4798      	blx	r3
   175e4:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
   175e6:	687b      	ldr	r3, [r7, #4]
   175e8:	7f5b      	ldrb	r3, [r3, #29]
   175ea:	2b00      	cmp	r3, #0
   175ec:	d010      	beq.n	17610 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
   175ee:	687b      	ldr	r3, [r7, #4]
   175f0:	7f1b      	ldrb	r3, [r3, #28]
   175f2:	2b00      	cmp	r3, #0
   175f4:	d00c      	beq.n	17610 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
        canopen_driver->CO_setUint32(ODF_arg->data, value + *nodeId);
   175f6:	4b09      	ldr	r3, [pc, #36]	; (1761c <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
   175f8:	681b      	ldr	r3, [r3, #0]
   175fa:	1d18      	adds	r0, r3, #4
   175fc:	687b      	ldr	r3, [r7, #4]
   175fe:	6859      	ldr	r1, [r3, #4]
   17600:	693b      	ldr	r3, [r7, #16]
   17602:	781b      	ldrb	r3, [r3, #0]
   17604:	461a      	mov	r2, r3
   17606:	68fb      	ldr	r3, [r7, #12]
   17608:	4413      	add	r3, r2
   1760a:	461a      	mov	r2, r3
   1760c:	4b05      	ldr	r3, [pc, #20]	; (17624 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x64>)
   1760e:	4798      	blx	r3
    }

    return ret;
   17610:	697b      	ldr	r3, [r7, #20]
}
   17612:	4618      	mov	r0, r3
   17614:	3718      	adds	r7, #24
   17616:	46bd      	mov	sp, r7
   17618:	bd80      	pop	{r7, pc}
   1761a:	bf00      	nop
   1761c:	2000da0c 	.word	0x2000da0c
   17620:	00017379 	.word	0x00017379
   17624:	000173ad 	.word	0x000173ad

00017628 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m>:
        uint8_t                 nodeId,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   17628:	b5b0      	push	{r4, r5, r7, lr}
   1762a:	b08a      	sub	sp, #40	; 0x28
   1762c:	af04      	add	r7, sp, #16
   1762e:	60f8      	str	r0, [r7, #12]
   17630:	60b9      	str	r1, [r7, #8]
   17632:	607a      	str	r2, [r7, #4]
   17634:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(SDO_init==NULL || CANdevRx==NULL || CANdevTx==NULL){
   17636:	68bb      	ldr	r3, [r7, #8]
   17638:	2b00      	cmp	r3, #0
   1763a:	d005      	beq.n	17648 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
   1763c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1763e:	2b00      	cmp	r3, #0
   17640:	d002      	beq.n	17648 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
   17642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17644:	2b00      	cmp	r3, #0
   17646:	d102      	bne.n	1764e <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   17648:	f04f 33ff 	mov.w	r3, #4294967295
   1764c:	e0ac      	b.n	177a8 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x180>
    }else{
		SDO=SDO_init;
   1764e:	4a58      	ldr	r2, [pc, #352]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17650:	68bb      	ldr	r3, [r7, #8]
   17652:	6013      	str	r3, [r2, #0]
	}
	
    /* configure own object dictionary */
    if(parentSDO == NULL){
   17654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17656:	2b00      	cmp	r3, #0
   17658:	d13b      	bne.n	176d2 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xaa>
        uint32_t i;

        SDO->ownOD = true;
   1765a:	4b55      	ldr	r3, [pc, #340]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   1765c:	681b      	ldr	r3, [r3, #0]
   1765e:	2201      	movs	r2, #1
   17660:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = OD;
   17664:	4b52      	ldr	r3, [pc, #328]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17666:	681b      	ldr	r3, [r3, #0]
   17668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1766a:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = ODSize;
   1766c:	4b50      	ldr	r3, [pc, #320]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   1766e:	681b      	ldr	r3, [r3, #0]
   17670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   17672:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = ODExtensions;
   17674:	4b4e      	ldr	r3, [pc, #312]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17676:	681b      	ldr	r3, [r3, #0]
   17678:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1767a:	635a      	str	r2, [r3, #52]	; 0x34

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
   1767c:	2300      	movs	r3, #0
   1767e:	617b      	str	r3, [r7, #20]
   17680:	697a      	ldr	r2, [r7, #20]
   17682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17684:	429a      	cmp	r2, r3
   17686:	d238      	bcs.n	176fa <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xd2>
            SDO->ODExtensions[i].pODFunc = NULL;
   17688:	4b49      	ldr	r3, [pc, #292]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   1768a:	681b      	ldr	r3, [r3, #0]
   1768c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1768e:	697a      	ldr	r2, [r7, #20]
   17690:	4613      	mov	r3, r2
   17692:	005b      	lsls	r3, r3, #1
   17694:	4413      	add	r3, r2
   17696:	009b      	lsls	r3, r3, #2
   17698:	440b      	add	r3, r1
   1769a:	2200      	movs	r2, #0
   1769c:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
   1769e:	4b44      	ldr	r3, [pc, #272]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   176a0:	681b      	ldr	r3, [r3, #0]
   176a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
   176a4:	697a      	ldr	r2, [r7, #20]
   176a6:	4613      	mov	r3, r2
   176a8:	005b      	lsls	r3, r3, #1
   176aa:	4413      	add	r3, r2
   176ac:	009b      	lsls	r3, r3, #2
   176ae:	440b      	add	r3, r1
   176b0:	2200      	movs	r2, #0
   176b2:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
   176b4:	4b3e      	ldr	r3, [pc, #248]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   176b6:	681b      	ldr	r3, [r3, #0]
   176b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
   176ba:	697a      	ldr	r2, [r7, #20]
   176bc:	4613      	mov	r3, r2
   176be:	005b      	lsls	r3, r3, #1
   176c0:	4413      	add	r3, r2
   176c2:	009b      	lsls	r3, r3, #2
   176c4:	440b      	add	r3, r1
   176c6:	2200      	movs	r2, #0
   176c8:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
   176ca:	697b      	ldr	r3, [r7, #20]
   176cc:	3301      	adds	r3, #1
   176ce:	617b      	str	r3, [r7, #20]
   176d0:	e7d6      	b.n	17680 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x58>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
   176d2:	4b37      	ldr	r3, [pc, #220]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   176d4:	681b      	ldr	r3, [r3, #0]
   176d6:	2200      	movs	r2, #0
   176d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = parentSDO->OD;
   176dc:	4b34      	ldr	r3, [pc, #208]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   176de:	681b      	ldr	r3, [r3, #0]
   176e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   176e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   176e4:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = parentSDO->ODSize;
   176e6:	4b32      	ldr	r3, [pc, #200]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   176e8:	681b      	ldr	r3, [r3, #0]
   176ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   176ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
   176ee:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = parentSDO->ODExtensions;
   176f0:	4b2f      	ldr	r3, [pc, #188]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   176f2:	681b      	ldr	r3, [r3, #0]
   176f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   176f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
   176f8:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
   176fa:	4b2d      	ldr	r3, [pc, #180]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   176fc:	681b      	ldr	r3, [r3, #0]
   176fe:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
   17702:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    SDO->state = CO_SDO_ST_IDLE;
   17706:	4b2a      	ldr	r3, [pc, #168]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17708:	681b      	ldr	r3, [r3, #0]
   1770a:	2200      	movs	r2, #0
   1770c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
   17710:	4b27      	ldr	r3, [pc, #156]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17712:	681b      	ldr	r3, [r3, #0]
   17714:	2200      	movs	r2, #0
   17716:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    SDO->ptrFunctSignal = NULL;
   1771a:	4b25      	ldr	r3, [pc, #148]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   1771c:	681b      	ldr	r3, [r3, #0]
   1771e:	2200      	movs	r2, #0
   17720:	67da      	str	r2, [r3, #124]	; 0x7c


    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
   17722:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17724:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
   17728:	d10f      	bne.n	1774a <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x122>
        canopen_driver->CO_OD_configure( ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
   1772a:	4b22      	ldr	r3, [pc, #136]	; (177b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   1772c:	681b      	ldr	r3, [r3, #0]
   1772e:	1d18      	adds	r0, r3, #4
   17730:	4b1f      	ldr	r3, [pc, #124]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17732:	681b      	ldr	r3, [r3, #0]
   17734:	f103 0268 	add.w	r2, r3, #104	; 0x68
   17738:	2300      	movs	r3, #0
   1773a:	9301      	str	r3, [sp, #4]
   1773c:	2300      	movs	r3, #0
   1773e:	9300      	str	r3, [sp, #0]
   17740:	4613      	mov	r3, r2
   17742:	4a1d      	ldr	r2, [pc, #116]	; (177b8 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x190>)
   17744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   17746:	4c1d      	ldr	r4, [pc, #116]	; (177bc <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x194>)
   17748:	47a0      	blx	r4
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
   1774a:	687b      	ldr	r3, [r7, #4]
   1774c:	2b00      	cmp	r3, #0
   1774e:	db02      	blt.n	17756 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x12e>
   17750:	683b      	ldr	r3, [r7, #0]
   17752:	2b00      	cmp	r3, #0
   17754:	da03      	bge.n	1775e <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x136>
        // SDO is invalid
        COB_IDClientToServer = 0;
   17756:	2300      	movs	r3, #0
   17758:	607b      	str	r3, [r7, #4]
        COB_IDServerToClient = 0;
   1775a:	2300      	movs	r3, #0
   1775c:	603b      	str	r3, [r7, #0]
    }
    /* configure SDO server CAN reception */
  canopen_driver->CAN_Rx_BufferInit(
   1775e:	4b15      	ldr	r3, [pc, #84]	; (177b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   17760:	6818      	ldr	r0, [r3, #0]
   17762:	4b13      	ldr	r3, [pc, #76]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17764:	681b      	ldr	r3, [r3, #0]
            CANdevRxIdx,            /* rx buffer index */
            COB_IDClientToServer,   /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process received message */
   17766:	4a16      	ldr	r2, [pc, #88]	; (177c0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x198>)
   17768:	9202      	str	r2, [sp, #8]
   1776a:	9301      	str	r3, [sp, #4]
   1776c:	2300      	movs	r3, #0
   1776e:	9300      	str	r3, [sp, #0]
   17770:	f240 73ff 	movw	r3, #2047	; 0x7ff
   17774:	687a      	ldr	r2, [r7, #4]
   17776:	6c79      	ldr	r1, [r7, #68]	; 0x44
   17778:	4c12      	ldr	r4, [pc, #72]	; (177c4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x19c>)
   1777a:	47a0      	blx	r4
	//printf("Config_SDO_recieve");
    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
   1777c:	4b0c      	ldr	r3, [pc, #48]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   1777e:	681b      	ldr	r3, [r3, #0]
   17780:	6cba      	ldr	r2, [r7, #72]	; 0x48
   17782:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    SDO->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
   17786:	4b0a      	ldr	r3, [pc, #40]	; (177b0 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17788:	681c      	ldr	r4, [r3, #0]
   1778a:	4b0a      	ldr	r3, [pc, #40]	; (177b4 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   1778c:	6818      	ldr	r0, [r3, #0]
   1778e:	2300      	movs	r3, #0
   17790:	9301      	str	r3, [sp, #4]
   17792:	2308      	movs	r3, #8
   17794:	9300      	str	r3, [sp, #0]
   17796:	2300      	movs	r3, #0
   17798:	683a      	ldr	r2, [r7, #0]
   1779a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1779c:	4d0a      	ldr	r5, [pc, #40]	; (177c8 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x1a0>)
   1779e:	47a8      	blx	r5
   177a0:	4603      	mov	r3, r0
   177a2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */
	
    return CO_ERROR_NO;
   177a6:	2300      	movs	r3, #0
}
   177a8:	4618      	mov	r0, r3
   177aa:	3718      	adds	r7, #24
   177ac:	46bd      	mov	sp, r7
   177ae:	bdb0      	pop	{r4, r5, r7, pc}
   177b0:	2000da4c 	.word	0x2000da4c
   177b4:	2000da0c 	.word	0x2000da0c
   177b8:	000175c1 	.word	0x000175c1
   177bc:	000177cd 	.word	0x000177cd
   177c0:	00017459 	.word	0x00017459
   177c4:	000157c1 	.word	0x000157c1
   177c8:	000158c1 	.word	0x000158c1

000177cc <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh>:
        uint32_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
   177cc:	b580      	push	{r7, lr}
   177ce:	b088      	sub	sp, #32
   177d0:	af00      	add	r7, sp, #0
   177d2:	60f8      	str	r0, [r7, #12]
   177d4:	60b9      	str	r1, [r7, #8]
   177d6:	607a      	str	r2, [r7, #4]
   177d8:	603b      	str	r3, [r7, #0]
    uint32_t entryNo;

    entryNo = canopen_driver->CO_OD_find(index);
   177da:	4b28      	ldr	r3, [pc, #160]	; (1787c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb0>)
   177dc:	681b      	ldr	r3, [r3, #0]
   177de:	3304      	adds	r3, #4
   177e0:	68b9      	ldr	r1, [r7, #8]
   177e2:	4618      	mov	r0, r3
   177e4:	4b26      	ldr	r3, [pc, #152]	; (17880 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb4>)
   177e6:	4798      	blx	r3
   177e8:	61b8      	str	r0, [r7, #24]
    if(entryNo < 0xFFFFU){
   177ea:	69bb      	ldr	r3, [r7, #24]
   177ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   177f0:	4293      	cmp	r3, r2
   177f2:	d83e      	bhi.n	17872 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
   177f4:	4b23      	ldr	r3, [pc, #140]	; (17884 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb8>)
   177f6:	681b      	ldr	r3, [r3, #0]
   177f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
   177fa:	69ba      	ldr	r2, [r7, #24]
   177fc:	4613      	mov	r3, r2
   177fe:	005b      	lsls	r3, r3, #1
   17800:	4413      	add	r3, r2
   17802:	009b      	lsls	r3, r3, #2
   17804:	440b      	add	r3, r1
   17806:	617b      	str	r3, [r7, #20]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
   17808:	4b1e      	ldr	r3, [pc, #120]	; (17884 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb8>)
   1780a:	681b      	ldr	r3, [r3, #0]
   1780c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1780e:	69ba      	ldr	r2, [r7, #24]
   17810:	4613      	mov	r3, r2
   17812:	009b      	lsls	r3, r3, #2
   17814:	4413      	add	r3, r2
   17816:	009b      	lsls	r3, r3, #2
   17818:	440b      	add	r3, r1
   1781a:	791b      	ldrb	r3, [r3, #4]
   1781c:	74fb      	strb	r3, [r7, #19]

        ext->pODFunc = pODFunc;
   1781e:	697b      	ldr	r3, [r7, #20]
   17820:	687a      	ldr	r2, [r7, #4]
   17822:	601a      	str	r2, [r3, #0]
        ext->object = object;
   17824:	697b      	ldr	r3, [r7, #20]
   17826:	683a      	ldr	r2, [r7, #0]
   17828:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
   1782a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1782c:	2b00      	cmp	r3, #0
   1782e:	d01b      	beq.n	17868 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
   17830:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   17834:	2b00      	cmp	r3, #0
   17836:	d017      	beq.n	17868 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
   17838:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   1783c:	7cfb      	ldrb	r3, [r7, #19]
   1783e:	429a      	cmp	r2, r3
   17840:	d112      	bne.n	17868 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
            uint32_t i;
            ext->flags = flags;
   17842:	697b      	ldr	r3, [r7, #20]
   17844:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17846:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
   17848:	2300      	movs	r3, #0
   1784a:	61fb      	str	r3, [r7, #28]
   1784c:	7cfa      	ldrb	r2, [r7, #19]
   1784e:	69fb      	ldr	r3, [r7, #28]
   17850:	429a      	cmp	r2, r3
   17852:	d30d      	bcc.n	17870 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa4>
                ext->flags[i] = 0U;
   17854:	697b      	ldr	r3, [r7, #20]
   17856:	689a      	ldr	r2, [r3, #8]
   17858:	69fb      	ldr	r3, [r7, #28]
   1785a:	4413      	add	r3, r2
   1785c:	2200      	movs	r2, #0
   1785e:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
   17860:	69fb      	ldr	r3, [r7, #28]
   17862:	3301      	adds	r3, #1
   17864:	61fb      	str	r3, [r7, #28]
   17866:	e7f1      	b.n	1784c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x80>
            }
        }
        else{
            ext->flags = NULL;
   17868:	697b      	ldr	r3, [r7, #20]
   1786a:	2200      	movs	r2, #0
   1786c:	609a      	str	r2, [r3, #8]
        }
    }
}
   1786e:	e000      	b.n	17872 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
            }
   17870:	bf00      	nop
}
   17872:	bf00      	nop
   17874:	3720      	adds	r7, #32
   17876:	46bd      	mov	sp, r7
   17878:	bd80      	pop	{r7, pc}
   1787a:	bf00      	nop
   1787c:	2000da0c 	.word	0x2000da0c
   17880:	00017889 	.word	0x00017889
   17884:	2000da4c 	.word	0x2000da4c

00017888 <_ZN12CO_SDO_Class10CO_OD_findEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_find( uint32_t index){
   17888:	b480      	push	{r7}
   1788a:	b087      	sub	sp, #28
   1788c:	af00      	add	r7, sp, #0
   1788e:	6078      	str	r0, [r7, #4]
   17890:	6039      	str	r1, [r7, #0]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint32_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
   17892:	2300      	movs	r3, #0
   17894:	617b      	str	r3, [r7, #20]
    max = SDO->ODSize - 1U;
   17896:	4b26      	ldr	r3, [pc, #152]	; (17930 <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
   17898:	681b      	ldr	r3, [r3, #0]
   1789a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1789c:	3b01      	subs	r3, #1
   1789e:	613b      	str	r3, [r7, #16]
    while(min < max){
   178a0:	697a      	ldr	r2, [r7, #20]
   178a2:	693b      	ldr	r3, [r7, #16]
   178a4:	429a      	cmp	r2, r3
   178a6:	d227      	bcs.n	178f8 <_ZN12CO_SDO_Class10CO_OD_findEm+0x70>
        cur = (min + max) / 2;
   178a8:	697a      	ldr	r2, [r7, #20]
   178aa:	693b      	ldr	r3, [r7, #16]
   178ac:	4413      	add	r3, r2
   178ae:	085b      	lsrs	r3, r3, #1
   178b0:	60fb      	str	r3, [r7, #12]
        object = &SDO->OD[cur];
   178b2:	4b1f      	ldr	r3, [pc, #124]	; (17930 <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
   178b4:	681b      	ldr	r3, [r3, #0]
   178b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   178b8:	68fa      	ldr	r2, [r7, #12]
   178ba:	4613      	mov	r3, r2
   178bc:	009b      	lsls	r3, r3, #2
   178be:	4413      	add	r3, r2
   178c0:	009b      	lsls	r3, r3, #2
   178c2:	440b      	add	r3, r1
   178c4:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
   178c6:	68bb      	ldr	r3, [r7, #8]
   178c8:	681a      	ldr	r2, [r3, #0]
   178ca:	683b      	ldr	r3, [r7, #0]
   178cc:	429a      	cmp	r2, r3
   178ce:	d101      	bne.n	178d4 <_ZN12CO_SDO_Class10CO_OD_findEm+0x4c>
            return cur;
   178d0:	68fb      	ldr	r3, [r7, #12]
   178d2:	e028      	b.n	17926 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
        if(index < object->index){
   178d4:	68bb      	ldr	r3, [r7, #8]
   178d6:	681a      	ldr	r2, [r3, #0]
   178d8:	683b      	ldr	r3, [r7, #0]
   178da:	429a      	cmp	r2, r3
   178dc:	d908      	bls.n	178f0 <_ZN12CO_SDO_Class10CO_OD_findEm+0x68>
            max = cur;
   178de:	68fb      	ldr	r3, [r7, #12]
   178e0:	613b      	str	r3, [r7, #16]
            if(max) max--;
   178e2:	693b      	ldr	r3, [r7, #16]
   178e4:	2b00      	cmp	r3, #0
   178e6:	d0db      	beq.n	178a0 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
   178e8:	693b      	ldr	r3, [r7, #16]
   178ea:	3b01      	subs	r3, #1
   178ec:	613b      	str	r3, [r7, #16]
   178ee:	e7d7      	b.n	178a0 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
        }
        else
            min = cur + 1U;
   178f0:	68fb      	ldr	r3, [r7, #12]
   178f2:	3301      	adds	r3, #1
   178f4:	617b      	str	r3, [r7, #20]
    while(min < max){
   178f6:	e7d3      	b.n	178a0 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
    }

    if(min == max){
   178f8:	697a      	ldr	r2, [r7, #20]
   178fa:	693b      	ldr	r3, [r7, #16]
   178fc:	429a      	cmp	r2, r3
   178fe:	d110      	bne.n	17922 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
        object = &SDO->OD[min];
   17900:	4b0b      	ldr	r3, [pc, #44]	; (17930 <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
   17902:	681b      	ldr	r3, [r3, #0]
   17904:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   17906:	697a      	ldr	r2, [r7, #20]
   17908:	4613      	mov	r3, r2
   1790a:	009b      	lsls	r3, r3, #2
   1790c:	4413      	add	r3, r2
   1790e:	009b      	lsls	r3, r3, #2
   17910:	440b      	add	r3, r1
   17912:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
   17914:	68bb      	ldr	r3, [r7, #8]
   17916:	681a      	ldr	r2, [r3, #0]
   17918:	683b      	ldr	r3, [r7, #0]
   1791a:	429a      	cmp	r2, r3
   1791c:	d101      	bne.n	17922 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
            return min;
   1791e:	697b      	ldr	r3, [r7, #20]
   17920:	e001      	b.n	17926 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
   17922:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
   17926:	4618      	mov	r0, r3
   17928:	371c      	adds	r7, #28
   1792a:	46bd      	mov	sp, r7
   1792c:	bc80      	pop	{r7}
   1792e:	4770      	bx	lr
   17930:	2000da4c 	.word	0x2000da4c

00017934 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getLength(uint32_t entryNo, uint8_t subIndex){
   17934:	b480      	push	{r7}
   17936:	b087      	sub	sp, #28
   17938:	af00      	add	r7, sp, #0
   1793a:	60f8      	str	r0, [r7, #12]
   1793c:	60b9      	str	r1, [r7, #8]
   1793e:	4613      	mov	r3, r2
   17940:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   17942:	4b25      	ldr	r3, [pc, #148]	; (179d8 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0xa4>)
   17944:	681b      	ldr	r3, [r3, #0]
   17946:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   17948:	68ba      	ldr	r2, [r7, #8]
   1794a:	4613      	mov	r3, r2
   1794c:	009b      	lsls	r3, r3, #2
   1794e:	4413      	add	r3, r2
   17950:	009b      	lsls	r3, r3, #2
   17952:	440b      	add	r3, r1
   17954:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   17956:	68bb      	ldr	r3, [r7, #8]
   17958:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1795c:	4293      	cmp	r3, r2
   1795e:	d101      	bne.n	17964 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x30>
        return 0U;
   17960:	2300      	movs	r3, #0
   17962:	e034      	b.n	179ce <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
   17964:	697b      	ldr	r3, [r7, #20]
   17966:	791b      	ldrb	r3, [r3, #4]
   17968:	2b00      	cmp	r3, #0
   1796a:	d108      	bne.n	1797e <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x4a>
        if(object->pData == 0){ /* data type is domain */
   1796c:	697b      	ldr	r3, [r7, #20]
   1796e:	691b      	ldr	r3, [r3, #16]
   17970:	2b00      	cmp	r3, #0
   17972:	d101      	bne.n	17978 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x44>
            return CO_SDO_BUFFER_SIZE;
   17974:	2320      	movs	r3, #32
   17976:	e02a      	b.n	179ce <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
   17978:	697b      	ldr	r3, [r7, #20]
   1797a:	68db      	ldr	r3, [r3, #12]
   1797c:	e027      	b.n	179ce <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
   1797e:	697b      	ldr	r3, [r7, #20]
   17980:	689b      	ldr	r3, [r3, #8]
   17982:	2b00      	cmp	r3, #0
   17984:	d00d      	beq.n	179a2 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x6e>
        if(subIndex == 0U){
   17986:	79fb      	ldrb	r3, [r7, #7]
   17988:	2b00      	cmp	r3, #0
   1798a:	d101      	bne.n	17990 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x5c>
            return 1U;
   1798c:	2301      	movs	r3, #1
   1798e:	e01e      	b.n	179ce <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else if(object->pData == 0){
   17990:	697b      	ldr	r3, [r7, #20]
   17992:	691b      	ldr	r3, [r3, #16]
   17994:	2b00      	cmp	r3, #0
   17996:	d101      	bne.n	1799c <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x68>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
   17998:	2320      	movs	r3, #32
   1799a:	e018      	b.n	179ce <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
   1799c:	697b      	ldr	r3, [r7, #20]
   1799e:	68db      	ldr	r3, [r3, #12]
   179a0:	e015      	b.n	179ce <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
   179a2:	697b      	ldr	r3, [r7, #20]
   179a4:	6919      	ldr	r1, [r3, #16]
   179a6:	79fa      	ldrb	r2, [r7, #7]
   179a8:	4613      	mov	r3, r2
   179aa:	005b      	lsls	r3, r3, #1
   179ac:	4413      	add	r3, r2
   179ae:	009b      	lsls	r3, r3, #2
   179b0:	440b      	add	r3, r1
   179b2:	681b      	ldr	r3, [r3, #0]
   179b4:	2b00      	cmp	r3, #0
   179b6:	d101      	bne.n	179bc <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x88>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
   179b8:	2320      	movs	r3, #32
   179ba:	e008      	b.n	179ce <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
   179bc:	697b      	ldr	r3, [r7, #20]
   179be:	6919      	ldr	r1, [r3, #16]
   179c0:	79fa      	ldrb	r2, [r7, #7]
   179c2:	4613      	mov	r3, r2
   179c4:	005b      	lsls	r3, r3, #1
   179c6:	4413      	add	r3, r2
   179c8:	009b      	lsls	r3, r3, #2
   179ca:	440b      	add	r3, r1
   179cc:	689b      	ldr	r3, [r3, #8]
        }
    }
}
   179ce:	4618      	mov	r0, r3
   179d0:	371c      	adds	r7, #28
   179d2:	46bd      	mov	sp, r7
   179d4:	bc80      	pop	{r7}
   179d6:	4770      	bx	lr
   179d8:	2000da4c 	.word	0x2000da4c

000179dc <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getAttribute(uint32_t entryNo, uint8_t subIndex){
   179dc:	b480      	push	{r7}
   179de:	b089      	sub	sp, #36	; 0x24
   179e0:	af00      	add	r7, sp, #0
   179e2:	60f8      	str	r0, [r7, #12]
   179e4:	60b9      	str	r1, [r7, #8]
   179e6:	4613      	mov	r3, r2
   179e8:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   179ea:	4b27      	ldr	r3, [pc, #156]	; (17a88 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xac>)
   179ec:	681b      	ldr	r3, [r3, #0]
   179ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   179f0:	68ba      	ldr	r2, [r7, #8]
   179f2:	4613      	mov	r3, r2
   179f4:	009b      	lsls	r3, r3, #2
   179f6:	4413      	add	r3, r2
   179f8:	009b      	lsls	r3, r3, #2
   179fa:	440b      	add	r3, r1
   179fc:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   179fe:	68bb      	ldr	r3, [r7, #8]
   17a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17a04:	4293      	cmp	r3, r2
   17a06:	d101      	bne.n	17a0c <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x30>
        return 0U;
   17a08:	2300      	movs	r3, #0
   17a0a:	e037      	b.n	17a7c <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
   17a0c:	697b      	ldr	r3, [r7, #20]
   17a0e:	791b      	ldrb	r3, [r3, #4]
   17a10:	2b00      	cmp	r3, #0
   17a12:	d102      	bne.n	17a1a <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x3e>
        return object->attribute;
   17a14:	697b      	ldr	r3, [r7, #20]
   17a16:	689b      	ldr	r3, [r3, #8]
   17a18:	e030      	b.n	17a7c <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else if(object->attribute != 0U){/* Object type is Array */
   17a1a:	697b      	ldr	r3, [r7, #20]
   17a1c:	689b      	ldr	r3, [r3, #8]
   17a1e:	2b00      	cmp	r3, #0
   17a20:	d023      	beq.n	17a6a <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8e>
        bool_t exception_1003 = false;
   17a22:	2300      	movs	r3, #0
   17a24:	77fb      	strb	r3, [r7, #31]
        uint32_t attr = object->attribute;
   17a26:	697b      	ldr	r3, [r7, #20]
   17a28:	689b      	ldr	r3, [r3, #8]
   17a2a:	61bb      	str	r3, [r7, #24]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
   17a2c:	697b      	ldr	r3, [r7, #20]
   17a2e:	681b      	ldr	r3, [r3, #0]
   17a30:	f241 0203 	movw	r2, #4099	; 0x1003
   17a34:	4293      	cmp	r3, r2
   17a36:	d108      	bne.n	17a4a <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
   17a38:	79fb      	ldrb	r3, [r7, #7]
   17a3a:	2b00      	cmp	r3, #0
   17a3c:	d105      	bne.n	17a4a <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
            exception_1003 = true;
   17a3e:	2301      	movs	r3, #1
   17a40:	77fb      	strb	r3, [r7, #31]
            attr |= CO_ODA_WRITEABLE;
   17a42:	69bb      	ldr	r3, [r7, #24]
   17a44:	f043 0308 	orr.w	r3, r3, #8
   17a48:	61bb      	str	r3, [r7, #24]
        }

        if(subIndex == 0U  && exception_1003 == false){
   17a4a:	79fb      	ldrb	r3, [r7, #7]
   17a4c:	2b00      	cmp	r3, #0
   17a4e:	d10a      	bne.n	17a66 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
   17a50:	7ffb      	ldrb	r3, [r7, #31]
   17a52:	2b00      	cmp	r3, #0
   17a54:	d107      	bne.n	17a66 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
   17a56:	69bb      	ldr	r3, [r7, #24]
   17a58:	f023 0318 	bic.w	r3, r3, #24
   17a5c:	61bb      	str	r3, [r7, #24]
            attr |= CO_ODA_READABLE;
   17a5e:	69bb      	ldr	r3, [r7, #24]
   17a60:	f043 0304 	orr.w	r3, r3, #4
   17a64:	61bb      	str	r3, [r7, #24]
        }
        return attr;
   17a66:	69bb      	ldr	r3, [r7, #24]
   17a68:	e008      	b.n	17a7c <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
   17a6a:	697b      	ldr	r3, [r7, #20]
   17a6c:	6919      	ldr	r1, [r3, #16]
   17a6e:	79fa      	ldrb	r2, [r7, #7]
   17a70:	4613      	mov	r3, r2
   17a72:	005b      	lsls	r3, r3, #1
   17a74:	4413      	add	r3, r2
   17a76:	009b      	lsls	r3, r3, #2
   17a78:	440b      	add	r3, r1
   17a7a:	685b      	ldr	r3, [r3, #4]
    }
}
   17a7c:	4618      	mov	r0, r3
   17a7e:	3724      	adds	r7, #36	; 0x24
   17a80:	46bd      	mov	sp, r7
   17a82:	bc80      	pop	{r7}
   17a84:	4770      	bx	lr
   17a86:	bf00      	nop
   17a88:	2000da4c 	.word	0x2000da4c

00017a8c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh>:


/******************************************************************************/
void* CO_SDO_Class::CO_OD_getDataPointer( uint32_t entryNo, uint8_t subIndex){
   17a8c:	b480      	push	{r7}
   17a8e:	b087      	sub	sp, #28
   17a90:	af00      	add	r7, sp, #0
   17a92:	60f8      	str	r0, [r7, #12]
   17a94:	60b9      	str	r1, [r7, #8]
   17a96:	4613      	mov	r3, r2
   17a98:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   17a9a:	4b20      	ldr	r3, [pc, #128]	; (17b1c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x90>)
   17a9c:	681b      	ldr	r3, [r3, #0]
   17a9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   17aa0:	68ba      	ldr	r2, [r7, #8]
   17aa2:	4613      	mov	r3, r2
   17aa4:	009b      	lsls	r3, r3, #2
   17aa6:	4413      	add	r3, r2
   17aa8:	009b      	lsls	r3, r3, #2
   17aaa:	440b      	add	r3, r1
   17aac:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   17aae:	68bb      	ldr	r3, [r7, #8]
   17ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17ab4:	4293      	cmp	r3, r2
   17ab6:	d101      	bne.n	17abc <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x30>
        return 0;
   17ab8:	2300      	movs	r3, #0
   17aba:	e02a      	b.n	17b12 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
   17abc:	697b      	ldr	r3, [r7, #20]
   17abe:	791b      	ldrb	r3, [r3, #4]
   17ac0:	2b00      	cmp	r3, #0
   17ac2:	d102      	bne.n	17aca <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x3e>
        return object->pData;
   17ac4:	697b      	ldr	r3, [r7, #20]
   17ac6:	691b      	ldr	r3, [r3, #16]
   17ac8:	e023      	b.n	17b12 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }
    else if(object->attribute != 0U){/* Object type is Array */
   17aca:	697b      	ldr	r3, [r7, #20]
   17acc:	689b      	ldr	r3, [r3, #8]
   17ace:	2b00      	cmp	r3, #0
   17ad0:	d016      	beq.n	17b00 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x74>
        if(subIndex==0){
   17ad2:	79fb      	ldrb	r3, [r7, #7]
   17ad4:	2b00      	cmp	r3, #0
   17ad6:	d102      	bne.n	17ade <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x52>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
   17ad8:	697b      	ldr	r3, [r7, #20]
   17ada:	3304      	adds	r3, #4
   17adc:	e019      	b.n	17b12 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else if(object->pData == 0){
   17ade:	697b      	ldr	r3, [r7, #20]
   17ae0:	691b      	ldr	r3, [r3, #16]
   17ae2:	2b00      	cmp	r3, #0
   17ae4:	d101      	bne.n	17aea <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x5e>
            /* data type is domain */
            return 0;
   17ae6:	2300      	movs	r3, #0
   17ae8:	e013      	b.n	17b12 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
   17aea:	697b      	ldr	r3, [r7, #20]
   17aec:	691a      	ldr	r2, [r3, #16]
   17aee:	79fb      	ldrb	r3, [r7, #7]
   17af0:	3b01      	subs	r3, #1
   17af2:	4619      	mov	r1, r3
   17af4:	697b      	ldr	r3, [r7, #20]
   17af6:	68db      	ldr	r3, [r3, #12]
   17af8:	fb03 f301 	mul.w	r3, r3, r1
   17afc:	4413      	add	r3, r2
   17afe:	e008      	b.n	17b12 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
   17b00:	697b      	ldr	r3, [r7, #20]
   17b02:	6919      	ldr	r1, [r3, #16]
   17b04:	79fa      	ldrb	r2, [r7, #7]
   17b06:	4613      	mov	r3, r2
   17b08:	005b      	lsls	r3, r3, #1
   17b0a:	4413      	add	r3, r2
   17b0c:	009b      	lsls	r3, r3, #2
   17b0e:	440b      	add	r3, r1
   17b10:	681b      	ldr	r3, [r3, #0]
    }
}
   17b12:	4618      	mov	r0, r3
   17b14:	371c      	adds	r7, #28
   17b16:	46bd      	mov	sp, r7
   17b18:	bc80      	pop	{r7}
   17b1a:	4770      	bx	lr
   17b1c:	2000da4c 	.word	0x2000da4c

00017b20 <_ZN13CO_SYNC_ClassC1Ev>:
#include "string.h"

static CO_CANtx_t local_sync_tx_buffer;

// default constructor
CO_SYNC_Class::CO_SYNC_Class()
   17b20:	b480      	push	{r7}
   17b22:	b083      	sub	sp, #12
   17b24:	af00      	add	r7, sp, #0
   17b26:	6078      	str	r0, [r7, #4]
{
} //CO_SYNC_Class
   17b28:	687b      	ldr	r3, [r7, #4]
   17b2a:	4618      	mov	r0, r3
   17b2c:	370c      	adds	r7, #12
   17b2e:	46bd      	mov	sp, r7
   17b30:	bc80      	pop	{r7}
   17b32:	4770      	bx	lr

00017b34 <_ZN13CO_SYNC_ClassD1Ev>:

// default destructor
CO_SYNC_Class::~CO_SYNC_Class()
   17b34:	b480      	push	{r7}
   17b36:	b083      	sub	sp, #12
   17b38:	af00      	add	r7, sp, #0
   17b3a:	6078      	str	r0, [r7, #4]
{
} //~CO_SYNC_Class
   17b3c:	687b      	ldr	r3, [r7, #4]
   17b3e:	4618      	mov	r0, r3
   17b40:	370c      	adds	r7, #12
   17b42:	46bd      	mov	sp, r7
   17b44:	bc80      	pop	{r7}
   17b46:	4770      	bx	lr

00017b48 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, const CO_CANrxMsg_t *msg){
   17b48:	b480      	push	{r7}
   17b4a:	b085      	sub	sp, #20
   17b4c:	af00      	add	r7, sp, #0
   17b4e:	6078      	str	r0, [r7, #4]
   17b50:	6039      	str	r1, [r7, #0]
	
    CO_SYNC_t *SYNC;
    uint8_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
   17b52:	687b      	ldr	r3, [r7, #4]
   17b54:	60fb      	str	r3, [r7, #12]
    operState = *SYNC->operatingState;
   17b56:	68fb      	ldr	r3, [r7, #12]
   17b58:	685b      	ldr	r3, [r3, #4]
   17b5a:	781b      	ldrb	r3, [r3, #0]
   17b5c:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
   17b5e:	7afb      	ldrb	r3, [r7, #11]
   17b60:	2b05      	cmp	r3, #5
   17b62:	d002      	beq.n	17b6a <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x22>
   17b64:	7afb      	ldrb	r3, [r7, #11]
   17b66:	2b7f      	cmp	r3, #127	; 0x7f
   17b68:	d132      	bne.n	17bd0 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
        if(SYNC->counterOverflowValue == 0){
   17b6a:	68fb      	ldr	r3, [r7, #12]
   17b6c:	7e1b      	ldrb	r3, [r3, #24]
   17b6e:	2b00      	cmp	r3, #0
   17b70:	d10e      	bne.n	17b90 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x48>
            if(msg->DLC == 0U){
   17b72:	683b      	ldr	r3, [r7, #0]
   17b74:	7d1b      	ldrb	r3, [r3, #20]
   17b76:	2b00      	cmp	r3, #0
   17b78:	d103      	bne.n	17b82 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x3a>
                SYNC->CANrxNew = true;
   17b7a:	68fb      	ldr	r3, [r7, #12]
   17b7c:	2201      	movs	r2, #1
   17b7e:	769a      	strb	r2, [r3, #26]
   17b80:	e018      	b.n	17bb4 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0100U;
   17b82:	683b      	ldr	r3, [r7, #0]
   17b84:	7d1b      	ldrb	r3, [r3, #20]
   17b86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
   17b8a:	68fb      	ldr	r3, [r7, #12]
   17b8c:	625a      	str	r2, [r3, #36]	; 0x24
   17b8e:	e011      	b.n	17bb4 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
        }
        else{
            if(msg->DLC == 1U){
   17b90:	683b      	ldr	r3, [r7, #0]
   17b92:	7d1b      	ldrb	r3, [r3, #20]
   17b94:	2b01      	cmp	r3, #1
   17b96:	d107      	bne.n	17ba8 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x60>
                SYNC->counter = msg->data[0];
   17b98:	683b      	ldr	r3, [r7, #0]
   17b9a:	7d5a      	ldrb	r2, [r3, #21]
   17b9c:	68fb      	ldr	r3, [r7, #12]
   17b9e:	771a      	strb	r2, [r3, #28]
                SYNC->CANrxNew = true;
   17ba0:	68fb      	ldr	r3, [r7, #12]
   17ba2:	2201      	movs	r2, #1
   17ba4:	769a      	strb	r2, [r3, #26]
   17ba6:	e005      	b.n	17bb4 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0200U;
   17ba8:	683b      	ldr	r3, [r7, #0]
   17baa:	7d1b      	ldrb	r3, [r3, #20]
   17bac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
   17bb0:	68fb      	ldr	r3, [r7, #12]
   17bb2:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
        if(SYNC->CANrxNew) {
   17bb4:	68fb      	ldr	r3, [r7, #12]
   17bb6:	7e9b      	ldrb	r3, [r3, #26]
   17bb8:	2b00      	cmp	r3, #0
   17bba:	d009      	beq.n	17bd0 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
   17bbc:	68fb      	ldr	r3, [r7, #12]
   17bbe:	7edb      	ldrb	r3, [r3, #27]
   17bc0:	2b00      	cmp	r3, #0
   17bc2:	bf0c      	ite	eq
   17bc4:	2301      	moveq	r3, #1
   17bc6:	2300      	movne	r3, #0
   17bc8:	b2db      	uxtb	r3, r3
   17bca:	461a      	mov	r2, r3
   17bcc:	68fb      	ldr	r3, [r7, #12]
   17bce:	76da      	strb	r2, [r3, #27]
        }
    }
}
   17bd0:	bf00      	nop
   17bd2:	3714      	adds	r7, #20
   17bd4:	46bd      	mov	sp, r7
   17bd6:	bc80      	pop	{r7}
   17bd8:	4770      	bx	lr
	...

00017bdc <_ZL11CO_ODF_1005P12CO_ODF_arg_t>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
   17bdc:	b590      	push	{r4, r7, lr}
   17bde:	b08b      	sub	sp, #44	; 0x2c
   17be0:	af04      	add	r7, sp, #16
   17be2:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   17be4:	2300      	movs	r3, #0
   17be6:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   17be8:	687b      	ldr	r3, [r7, #4]
   17bea:	681b      	ldr	r3, [r3, #0]
   17bec:	60fb      	str	r3, [r7, #12]
    value =canopen_driver->CO_getUint32(ODF_arg->data);
   17bee:	4b35      	ldr	r3, [pc, #212]	; (17cc4 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   17bf0:	681b      	ldr	r3, [r3, #0]
   17bf2:	1d1a      	adds	r2, r3, #4
   17bf4:	687b      	ldr	r3, [r7, #4]
   17bf6:	685b      	ldr	r3, [r3, #4]
   17bf8:	4619      	mov	r1, r3
   17bfa:	4610      	mov	r0, r2
   17bfc:	4b32      	ldr	r3, [pc, #200]	; (17cc8 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xec>)
   17bfe:	4798      	blx	r3
   17c00:	60b8      	str	r0, [r7, #8]

    if(!ODF_arg->reading){
   17c02:	687b      	ldr	r3, [r7, #4]
   17c04:	7f5b      	ldrb	r3, [r3, #29]
   17c06:	2b00      	cmp	r3, #0
   17c08:	d157      	bne.n	17cba <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
        uint8_t configureSyncProducer = 0;
   17c0a:	2300      	movs	r3, #0
   17c0c:	74fb      	strb	r3, [r7, #19]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
   17c0e:	68bb      	ldr	r3, [r7, #8]
   17c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
   17c14:	2b00      	cmp	r3, #0
   17c16:	d002      	beq.n	17c1e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x42>
            ret = CO_SDO_AB_INVALID_VALUE;
   17c18:	4b2c      	ldr	r3, [pc, #176]	; (17ccc <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf0>)
   17c1a:	617b      	str	r3, [r7, #20]
   17c1c:	e00d      	b.n	17c3a <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
   17c1e:	68bb      	ldr	r3, [r7, #8]
   17c20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
   17c24:	2b00      	cmp	r3, #0
   17c26:	d008      	beq.n	17c3a <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
   17c28:	68fb      	ldr	r3, [r7, #12]
   17c2a:	7a1b      	ldrb	r3, [r3, #8]
   17c2c:	2b00      	cmp	r3, #0
   17c2e:	d002      	beq.n	17c36 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5a>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
   17c30:	4b27      	ldr	r3, [pc, #156]	; (17cd0 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf4>)
   17c32:	617b      	str	r3, [r7, #20]
   17c34:	e001      	b.n	17c3a <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                }
                else{
                    configureSyncProducer = 1;
   17c36:	2301      	movs	r3, #1
   17c38:	74fb      	strb	r3, [r7, #19]
                }
            }
        }

        /* configure sync producer and consumer */
        if(ret == CO_SDO_AB_NONE){
   17c3a:	697b      	ldr	r3, [r7, #20]
   17c3c:	2b00      	cmp	r3, #0
   17c3e:	d13c      	bne.n	17cba <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
            SYNC->COB_ID = (uint32_t)(value & 0x7FFU);
   17c40:	68bb      	ldr	r3, [r7, #8]
   17c42:	f3c3 020a 	ubfx	r2, r3, #0, #11
   17c46:	68fb      	ldr	r3, [r7, #12]
   17c48:	60da      	str	r2, [r3, #12]

            if(configureSyncProducer){
   17c4a:	7cfb      	ldrb	r3, [r7, #19]
   17c4c:	2b00      	cmp	r3, #0
   17c4e:	d021      	beq.n	17c94 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xb8>
                uint8_t len = 0U;
   17c50:	2300      	movs	r3, #0
   17c52:	74bb      	strb	r3, [r7, #18]
                if(SYNC->counterOverflowValue != 0U){
   17c54:	68fb      	ldr	r3, [r7, #12]
   17c56:	7e1b      	ldrb	r3, [r3, #24]
   17c58:	2b00      	cmp	r3, #0
   17c5a:	d007      	beq.n	17c6c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x90>
                    len = 1U;
   17c5c:	2301      	movs	r3, #1
   17c5e:	74bb      	strb	r3, [r7, #18]
                    SYNC->counter = 0U;
   17c60:	68fb      	ldr	r3, [r7, #12]
   17c62:	2200      	movs	r2, #0
   17c64:	771a      	strb	r2, [r3, #28]
                    SYNC->timer = 0U;
   17c66:	68fb      	ldr	r3, [r7, #12]
   17c68:	2200      	movs	r2, #0
   17c6a:	621a      	str	r2, [r3, #32]
                }
                SYNC->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
   17c6c:	4b15      	ldr	r3, [pc, #84]	; (17cc4 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   17c6e:	6818      	ldr	r0, [r3, #0]
   17c70:	68fb      	ldr	r3, [r7, #12]
   17c72:	6b99      	ldr	r1, [r3, #56]	; 0x38
   17c74:	68fb      	ldr	r3, [r7, #12]
   17c76:	68da      	ldr	r2, [r3, #12]
   17c78:	2300      	movs	r3, #0
   17c7a:	9301      	str	r3, [sp, #4]
   17c7c:	7cbb      	ldrb	r3, [r7, #18]
   17c7e:	9300      	str	r3, [sp, #0]
   17c80:	2300      	movs	r3, #0
   17c82:	4c14      	ldr	r4, [pc, #80]	; (17cd4 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf8>)
   17c84:	47a0      	blx	r4
   17c86:	4602      	mov	r2, r0
   17c88:	68fb      	ldr	r3, [r7, #12]
   17c8a:	635a      	str	r2, [r3, #52]	; 0x34
                        SYNC->CANdevTxIdx,      /* index of specific buffer inside CAN module */
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */
                SYNC->isProducer = true;
   17c8c:	68fb      	ldr	r3, [r7, #12]
   17c8e:	2201      	movs	r2, #1
   17c90:	721a      	strb	r2, [r3, #8]
   17c92:	e002      	b.n	17c9a <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xbe>
            }
            else{
                SYNC->isProducer = false;
   17c94:	68fb      	ldr	r3, [r7, #12]
   17c96:	2200      	movs	r2, #0
   17c98:	721a      	strb	r2, [r3, #8]
            }

            canopen_driver->CAN_Rx_BufferInit(
   17c9a:	4b0a      	ldr	r3, [pc, #40]	; (17cc4 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   17c9c:	6818      	ldr	r0, [r3, #0]
   17c9e:	68fb      	ldr	r3, [r7, #12]
   17ca0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   17ca2:	68fb      	ldr	r3, [r7, #12]
   17ca4:	68da      	ldr	r2, [r3, #12]
                    SYNC->CANdevRxIdx,      /* rx buffer index */
                    SYNC->COB_ID,           /* CAN identifier */
                    0x7FF,                  /* mask */
                    0,                      /* rtr */
                    (void*)SYNC,            /* object passed to receive function */
                    CO_SYNC_receive);       /* this function will process received message */
   17ca6:	4b0c      	ldr	r3, [pc, #48]	; (17cd8 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xfc>)
   17ca8:	9302      	str	r3, [sp, #8]
   17caa:	68fb      	ldr	r3, [r7, #12]
   17cac:	9301      	str	r3, [sp, #4]
   17cae:	2300      	movs	r3, #0
   17cb0:	9300      	str	r3, [sp, #0]
   17cb2:	f240 73ff 	movw	r3, #2047	; 0x7ff
   17cb6:	4c09      	ldr	r4, [pc, #36]	; (17cdc <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x100>)
   17cb8:	47a0      	blx	r4
        }
    }

    return ret;
   17cba:	697b      	ldr	r3, [r7, #20]
}
   17cbc:	4618      	mov	r0, r3
   17cbe:	371c      	adds	r7, #28
   17cc0:	46bd      	mov	sp, r7
   17cc2:	bd90      	pop	{r4, r7, pc}
   17cc4:	2000da0c 	.word	0x2000da0c
   17cc8:	00017379 	.word	0x00017379
   17ccc:	06090030 	.word	0x06090030
   17cd0:	08000022 	.word	0x08000022
   17cd4:	000158c1 	.word	0x000158c1
   17cd8:	00017b49 	.word	0x00017b49
   17cdc:	000157c1 	.word	0x000157c1

00017ce0 <_ZL11CO_ODF_1006P12CO_ODF_arg_t>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
   17ce0:	b580      	push	{r7, lr}
   17ce2:	b086      	sub	sp, #24
   17ce4:	af00      	add	r7, sp, #0
   17ce6:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   17ce8:	2300      	movs	r3, #0
   17cea:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   17cec:	687b      	ldr	r3, [r7, #4]
   17cee:	681b      	ldr	r3, [r3, #0]
   17cf0:	613b      	str	r3, [r7, #16]
    value = canopen_driver->CO_getUint32(ODF_arg->data);
   17cf2:	4b19      	ldr	r3, [pc, #100]	; (17d58 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x78>)
   17cf4:	681b      	ldr	r3, [r3, #0]
   17cf6:	1d1a      	adds	r2, r3, #4
   17cf8:	687b      	ldr	r3, [r7, #4]
   17cfa:	685b      	ldr	r3, [r3, #4]
   17cfc:	4619      	mov	r1, r3
   17cfe:	4610      	mov	r0, r2
   17d00:	4b16      	ldr	r3, [pc, #88]	; (17d5c <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x7c>)
   17d02:	4798      	blx	r3
   17d04:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
   17d06:	687b      	ldr	r3, [r7, #4]
   17d08:	7f5b      	ldrb	r3, [r3, #29]
   17d0a:	2b00      	cmp	r3, #0
   17d0c:	d11f      	bne.n	17d4e <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x6e>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
   17d0e:	693b      	ldr	r3, [r7, #16]
   17d10:	691b      	ldr	r3, [r3, #16]
   17d12:	2b00      	cmp	r3, #0
   17d14:	d105      	bne.n	17d22 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
   17d16:	68fb      	ldr	r3, [r7, #12]
   17d18:	2b00      	cmp	r3, #0
   17d1a:	d002      	beq.n	17d22 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
            SYNC->counter = 0;
   17d1c:	693b      	ldr	r3, [r7, #16]
   17d1e:	2200      	movs	r2, #0
   17d20:	771a      	strb	r2, [r3, #28]
        }

        SYNC->periodTime = value;
   17d22:	693b      	ldr	r3, [r7, #16]
   17d24:	68fa      	ldr	r2, [r7, #12]
   17d26:	611a      	str	r2, [r3, #16]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
   17d28:	68fb      	ldr	r3, [r7, #12]
   17d2a:	085a      	lsrs	r2, r3, #1
   17d2c:	4613      	mov	r3, r2
   17d2e:	005b      	lsls	r3, r3, #1
   17d30:	441a      	add	r2, r3
   17d32:	693b      	ldr	r3, [r7, #16]
   17d34:	615a      	str	r2, [r3, #20]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
   17d36:	693b      	ldr	r3, [r7, #16]
   17d38:	695a      	ldr	r2, [r3, #20]
   17d3a:	68fb      	ldr	r3, [r7, #12]
   17d3c:	429a      	cmp	r2, r3
   17d3e:	d203      	bcs.n	17d48 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x68>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
   17d40:	693b      	ldr	r3, [r7, #16]
   17d42:	f04f 32ff 	mov.w	r2, #4294967295
   17d46:	615a      	str	r2, [r3, #20]
        }

        SYNC->timer = 0;
   17d48:	693b      	ldr	r3, [r7, #16]
   17d4a:	2200      	movs	r2, #0
   17d4c:	621a      	str	r2, [r3, #32]
    }

    return ret;
   17d4e:	697b      	ldr	r3, [r7, #20]
}
   17d50:	4618      	mov	r0, r3
   17d52:	3718      	adds	r7, #24
   17d54:	46bd      	mov	sp, r7
   17d56:	bd80      	pop	{r7, pc}
   17d58:	2000da0c 	.word	0x2000da0c
   17d5c:	00017379 	.word	0x00017379

00017d60 <_ZL11CO_ODF_1019P12CO_ODF_arg_t>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
   17d60:	b590      	push	{r4, r7, lr}
   17d62:	b089      	sub	sp, #36	; 0x24
   17d64:	af02      	add	r7, sp, #8
   17d66:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   17d68:	2300      	movs	r3, #0
   17d6a:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   17d6c:	687b      	ldr	r3, [r7, #4]
   17d6e:	681b      	ldr	r3, [r3, #0]
   17d70:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
   17d72:	687b      	ldr	r3, [r7, #4]
   17d74:	685b      	ldr	r3, [r3, #4]
   17d76:	781b      	ldrb	r3, [r3, #0]
   17d78:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
   17d7a:	687b      	ldr	r3, [r7, #4]
   17d7c:	7f5b      	ldrb	r3, [r3, #29]
   17d7e:	2b00      	cmp	r3, #0
   17d80:	d12c      	bne.n	17ddc <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        uint8_t len = 0U;
   17d82:	2300      	movs	r3, #0
   17d84:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
   17d86:	68fb      	ldr	r3, [r7, #12]
   17d88:	691b      	ldr	r3, [r3, #16]
   17d8a:	2b00      	cmp	r3, #0
   17d8c:	d002      	beq.n	17d94 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
   17d8e:	4b16      	ldr	r3, [pc, #88]	; (17de8 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x88>)
   17d90:	617b      	str	r3, [r7, #20]
   17d92:	e023      	b.n	17ddc <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else if((value == 1) || (value > 240 && value <= 255)){
   17d94:	7afb      	ldrb	r3, [r7, #11]
   17d96:	2b01      	cmp	r3, #1
   17d98:	d005      	beq.n	17da6 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x46>
   17d9a:	7afb      	ldrb	r3, [r7, #11]
   17d9c:	2bf0      	cmp	r3, #240	; 0xf0
   17d9e:	dd05      	ble.n	17dac <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
   17da0:	7afb      	ldrb	r3, [r7, #11]
   17da2:	2bff      	cmp	r3, #255	; 0xff
   17da4:	dc02      	bgt.n	17dac <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_INVALID_VALUE;
   17da6:	4b11      	ldr	r3, [pc, #68]	; (17dec <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x8c>)
   17da8:	617b      	str	r3, [r7, #20]
   17daa:	e017      	b.n	17ddc <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else{
            SYNC->counterOverflowValue = value;
   17dac:	68fb      	ldr	r3, [r7, #12]
   17dae:	7afa      	ldrb	r2, [r7, #11]
   17db0:	761a      	strb	r2, [r3, #24]
            if(value != 0){
   17db2:	7afb      	ldrb	r3, [r7, #11]
   17db4:	2b00      	cmp	r3, #0
   17db6:	d001      	beq.n	17dbc <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x5c>
                len = 1U;
   17db8:	2301      	movs	r3, #1
   17dba:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff =canopen_driver->CAN_Tx_BufferInit(
   17dbc:	4b0c      	ldr	r3, [pc, #48]	; (17df0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x90>)
   17dbe:	6818      	ldr	r0, [r3, #0]
   17dc0:	68fb      	ldr	r3, [r7, #12]
   17dc2:	6b99      	ldr	r1, [r3, #56]	; 0x38
   17dc4:	68fb      	ldr	r3, [r7, #12]
   17dc6:	68da      	ldr	r2, [r3, #12]
   17dc8:	2300      	movs	r3, #0
   17dca:	9301      	str	r3, [sp, #4]
   17dcc:	7cfb      	ldrb	r3, [r7, #19]
   17dce:	9300      	str	r3, [sp, #0]
   17dd0:	2300      	movs	r3, #0
   17dd2:	4c08      	ldr	r4, [pc, #32]	; (17df4 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x94>)
   17dd4:	47a0      	blx	r4
   17dd6:	4602      	mov	r2, r0
   17dd8:	68fb      	ldr	r3, [r7, #12]
   17dda:	635a      	str	r2, [r3, #52]	; 0x34
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */
        }
    }

    return ret;
   17ddc:	697b      	ldr	r3, [r7, #20]
}
   17dde:	4618      	mov	r0, r3
   17de0:	371c      	adds	r7, #28
   17de2:	46bd      	mov	sp, r7
   17de4:	bd90      	pop	{r4, r7, pc}
   17de6:	bf00      	nop
   17de8:	08000022 	.word	0x08000022
   17dec:	06090030 	.word	0x06090030
   17df0:	2000da0c 	.word	0x2000da0c
   17df4:	000158c1 	.word	0x000158c1

00017df8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   17df8:	b590      	push	{r4, r7, lr}
   17dfa:	b08b      	sub	sp, #44	; 0x2c
   17dfc:	af04      	add	r7, sp, #16
   17dfe:	60f8      	str	r0, [r7, #12]
   17e00:	60b9      	str	r1, [r7, #8]
   17e02:	607a      	str	r2, [r7, #4]
   17e04:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
   17e06:	2300      	movs	r3, #0
   17e08:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
   17e0a:	68bb      	ldr	r3, [r7, #8]
   17e0c:	2b00      	cmp	r3, #0
   17e0e:	d00e      	beq.n	17e2e <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   17e10:	687b      	ldr	r3, [r7, #4]
   17e12:	2b00      	cmp	r3, #0
   17e14:	d00b      	beq.n	17e2e <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   17e16:	683b      	ldr	r3, [r7, #0]
   17e18:	2b00      	cmp	r3, #0
   17e1a:	d008      	beq.n	17e2e <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   17e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e1e:	2b00      	cmp	r3, #0
   17e20:	d005      	beq.n	17e2e <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   17e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17e24:	2b00      	cmp	r3, #0
   17e26:	d002      	beq.n	17e2e <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
        CANdevRx==NULL || CANdevTx==NULL){
   17e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17e2a:	2b00      	cmp	r3, #0
   17e2c:	d102      	bne.n	17e34 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   17e2e:	f04f 33ff 	mov.w	r3, #4294967295
   17e32:	e097      	b.n	17f64 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x16c>

    /* Configure object variables */
	#ifdef MASTER
	 SYNC->isProducer =  true;
	#else
	 SYNC->isProducer =  false;
   17e34:	68bb      	ldr	r3, [r7, #8]
   17e36:	2200      	movs	r2, #0
   17e38:	721a      	strb	r2, [r3, #8]
	#endif
 
	// SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
   17e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17e3c:	f3c3 020a 	ubfx	r2, r3, #0, #11
   17e40:	68bb      	ldr	r3, [r7, #8]
   17e42:	60da      	str	r2, [r3, #12]

    SYNC->periodTime = communicationCyclePeriod;
   17e44:	68bb      	ldr	r3, [r7, #8]
   17e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   17e48:	611a      	str	r2, [r3, #16]
  //  SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
	  SYNC->periodTimeoutTime = communicationCyclePeriod / 1 * 3;
   17e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   17e4c:	4613      	mov	r3, r2
   17e4e:	005b      	lsls	r3, r3, #1
   17e50:	441a      	add	r2, r3
   17e52:	68bb      	ldr	r3, [r7, #8]
   17e54:	615a      	str	r2, [r3, #20]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
   17e56:	68bb      	ldr	r3, [r7, #8]
   17e58:	695a      	ldr	r2, [r3, #20]
   17e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17e5c:	429a      	cmp	r2, r3
   17e5e:	d203      	bcs.n	17e68 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x70>
   17e60:	68bb      	ldr	r3, [r7, #8]
   17e62:	f04f 32ff 	mov.w	r2, #4294967295
   17e66:	615a      	str	r2, [r3, #20]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
   17e68:	68bb      	ldr	r3, [r7, #8]
   17e6a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
   17e6e:	761a      	strb	r2, [r3, #24]
    if(synchronousCounterOverflowValue) len = 1;
   17e70:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   17e74:	2b00      	cmp	r3, #0
   17e76:	d001      	beq.n	17e7c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x84>
   17e78:	2301      	movs	r3, #1
   17e7a:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
   17e7c:	68bb      	ldr	r3, [r7, #8]
   17e7e:	2201      	movs	r2, #1
   17e80:	765a      	strb	r2, [r3, #25]

    SYNC->CANrxNew = false;
   17e82:	68bb      	ldr	r3, [r7, #8]
   17e84:	2200      	movs	r2, #0
   17e86:	769a      	strb	r2, [r3, #26]
    SYNC->CANrxToggle = false;
   17e88:	68bb      	ldr	r3, [r7, #8]
   17e8a:	2200      	movs	r2, #0
   17e8c:	76da      	strb	r2, [r3, #27]
    SYNC->timer = 0;
   17e8e:	68bb      	ldr	r3, [r7, #8]
   17e90:	2200      	movs	r2, #0
   17e92:	621a      	str	r2, [r3, #32]
    SYNC->counter = 0;
   17e94:	68bb      	ldr	r3, [r7, #8]
   17e96:	2200      	movs	r2, #0
   17e98:	771a      	strb	r2, [r3, #28]
    SYNC->receiveError = 0U;
   17e9a:	68bb      	ldr	r3, [r7, #8]
   17e9c:	2200      	movs	r2, #0
   17e9e:	625a      	str	r2, [r3, #36]	; 0x24

    SYNC->em = em;
   17ea0:	68bb      	ldr	r3, [r7, #8]
   17ea2:	687a      	ldr	r2, [r7, #4]
   17ea4:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
   17ea6:	68bb      	ldr	r3, [r7, #8]
   17ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17eaa:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
   17eac:	68bb      	ldr	r3, [r7, #8]
   17eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
   17eb0:	629a      	str	r2, [r3, #40]	; 0x28
    SYNC->CANdevRxIdx = CANdevRxIdx;
   17eb2:	68bb      	ldr	r3, [r7, #8]
   17eb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   17eb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    canopen_driver->CO_OD_configure( OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
   17eb8:	4b2c      	ldr	r3, [pc, #176]	; (17f6c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   17eba:	681b      	ldr	r3, [r3, #0]
   17ebc:	1d18      	adds	r0, r3, #4
   17ebe:	2300      	movs	r3, #0
   17ec0:	9301      	str	r3, [sp, #4]
   17ec2:	2300      	movs	r3, #0
   17ec4:	9300      	str	r3, [sp, #0]
   17ec6:	68bb      	ldr	r3, [r7, #8]
   17ec8:	4a29      	ldr	r2, [pc, #164]	; (17f70 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x178>)
   17eca:	f241 0105 	movw	r1, #4101	; 0x1005
   17ece:	4c29      	ldr	r4, [pc, #164]	; (17f74 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   17ed0:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
   17ed2:	4b26      	ldr	r3, [pc, #152]	; (17f6c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   17ed4:	681b      	ldr	r3, [r3, #0]
   17ed6:	1d18      	adds	r0, r3, #4
   17ed8:	2300      	movs	r3, #0
   17eda:	9301      	str	r3, [sp, #4]
   17edc:	2300      	movs	r3, #0
   17ede:	9300      	str	r3, [sp, #0]
   17ee0:	68bb      	ldr	r3, [r7, #8]
   17ee2:	4a25      	ldr	r2, [pc, #148]	; (17f78 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x180>)
   17ee4:	f241 0106 	movw	r1, #4102	; 0x1006
   17ee8:	4c22      	ldr	r4, [pc, #136]	; (17f74 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   17eea:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
   17eec:	4b1f      	ldr	r3, [pc, #124]	; (17f6c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   17eee:	681b      	ldr	r3, [r3, #0]
   17ef0:	1d18      	adds	r0, r3, #4
   17ef2:	2300      	movs	r3, #0
   17ef4:	9301      	str	r3, [sp, #4]
   17ef6:	2300      	movs	r3, #0
   17ef8:	9300      	str	r3, [sp, #0]
   17efa:	68bb      	ldr	r3, [r7, #8]
   17efc:	4a1f      	ldr	r2, [pc, #124]	; (17f7c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x184>)
   17efe:	f241 0119 	movw	r1, #4121	; 0x1019
   17f02:	4c1c      	ldr	r4, [pc, #112]	; (17f74 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   17f04:	47a0      	blx	r4

    /* configure SYNC CAN reception */
    canopen_driver->CAN_Rx_BufferInit(
   17f06:	4b19      	ldr	r3, [pc, #100]	; (17f6c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   17f08:	6818      	ldr	r0, [r3, #0]
   17f0a:	68bb      	ldr	r3, [r7, #8]
   17f0c:	68da      	ldr	r2, [r3, #12]
            CANdevRxIdx,            /* rx buffer index */
            SYNC->COB_ID,           /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */
   17f0e:	4b1c      	ldr	r3, [pc, #112]	; (17f80 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x188>)
   17f10:	9302      	str	r3, [sp, #8]
   17f12:	68bb      	ldr	r3, [r7, #8]
   17f14:	9301      	str	r3, [sp, #4]
   17f16:	2300      	movs	r3, #0
   17f18:	9300      	str	r3, [sp, #0]
   17f1a:	f240 73ff 	movw	r3, #2047	; 0x7ff
   17f1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   17f20:	4c18      	ldr	r4, [pc, #96]	; (17f84 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x18c>)
   17f22:	47a0      	blx	r4

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
   17f24:	68bb      	ldr	r3, [r7, #8]
   17f26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17f28:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevTxIdx = CANdevTxIdx;
   17f2a:	68bb      	ldr	r3, [r7, #8]
   17f2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   17f2e:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->CANtxBuff =  canopen_driver->CAN_Tx_BufferInit(
   17f30:	4b0e      	ldr	r3, [pc, #56]	; (17f6c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   17f32:	6818      	ldr	r0, [r3, #0]
   17f34:	68bb      	ldr	r3, [r7, #8]
   17f36:	68da      	ldr	r2, [r3, #12]
   17f38:	2300      	movs	r3, #0
   17f3a:	9301      	str	r3, [sp, #4]
   17f3c:	7dfb      	ldrb	r3, [r7, #23]
   17f3e:	9300      	str	r3, [sp, #0]
   17f40:	2300      	movs	r3, #0
   17f42:	6c79      	ldr	r1, [r7, #68]	; 0x44
   17f44:	4c10      	ldr	r4, [pc, #64]	; (17f88 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x190>)
   17f46:	47a0      	blx	r4
   17f48:	4602      	mov	r2, r0
   17f4a:	68bb      	ldr	r3, [r7, #8]
   17f4c:	635a      	str	r2, [r3, #52]	; 0x34
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */
			
	memcpy(&local_sync_tx_buffer,SYNC->CANtxBuff,sizeof(CO_CANtx_t));
   17f4e:	68bb      	ldr	r3, [r7, #8]
   17f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17f52:	2210      	movs	r2, #16
   17f54:	4619      	mov	r1, r3
   17f56:	480d      	ldr	r0, [pc, #52]	; (17f8c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x194>)
   17f58:	4b0d      	ldr	r3, [pc, #52]	; (17f90 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x198>)
   17f5a:	4798      	blx	r3
		tx_buffer=&local_sync_tx_buffer;    
   17f5c:	68fb      	ldr	r3, [r7, #12]
   17f5e:	4a0b      	ldr	r2, [pc, #44]	; (17f8c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x194>)
   17f60:	601a      	str	r2, [r3, #0]
    return CO_ERROR_NO;
   17f62:	2300      	movs	r3, #0
}
   17f64:	4618      	mov	r0, r3
   17f66:	371c      	adds	r7, #28
   17f68:	46bd      	mov	sp, r7
   17f6a:	bd90      	pop	{r4, r7, pc}
   17f6c:	2000da0c 	.word	0x2000da0c
   17f70:	00017bdd 	.word	0x00017bdd
   17f74:	000177cd 	.word	0x000177cd
   17f78:	00017ce1 	.word	0x00017ce1
   17f7c:	00017d61 	.word	0x00017d61
   17f80:	00017b49 	.word	0x00017b49
   17f84:	000157c1 	.word	0x000157c1
   17f88:	000158c1 	.word	0x000158c1
   17f8c:	2000da50 	.word	0x2000da50
   17f90:	0001a635 	.word	0x0001a635

00017f94 <_ZN13CO_SYNC_Class16Send_SYNC_SignalEv>:
    }

    return ret;
}

uint8_t CO_SYNC_Class::Send_SYNC_Signal(void){
   17f94:	b580      	push	{r7, lr}
   17f96:	b082      	sub	sp, #8
   17f98:	af00      	add	r7, sp, #0
   17f9a:	6078      	str	r0, [r7, #4]
	return 	(uint8_t)canopen_driver->CAN_Send(tx_buffer);
   17f9c:	4b06      	ldr	r3, [pc, #24]	; (17fb8 <_ZN13CO_SYNC_Class16Send_SYNC_SignalEv+0x24>)
   17f9e:	681a      	ldr	r2, [r3, #0]
   17fa0:	687b      	ldr	r3, [r7, #4]
   17fa2:	681b      	ldr	r3, [r3, #0]
   17fa4:	4619      	mov	r1, r3
   17fa6:	4610      	mov	r0, r2
   17fa8:	4b04      	ldr	r3, [pc, #16]	; (17fbc <_ZN13CO_SYNC_Class16Send_SYNC_SignalEv+0x28>)
   17faa:	4798      	blx	r3
   17fac:	4603      	mov	r3, r0
   17fae:	b2db      	uxtb	r3, r3
}
   17fb0:	4618      	mov	r0, r3
   17fb2:	3708      	adds	r7, #8
   17fb4:	46bd      	mov	sp, r7
   17fb6:	bd80      	pop	{r7, pc}
   17fb8:	2000da0c 	.word	0x2000da0c
   17fbc:	0001596d 	.word	0x0001596d

00017fc0 <_ZN14CO_CRC16_ClassC1Ev>:
	0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U
};


// default constructor
CO_CRC16_Class::CO_CRC16_Class()
   17fc0:	b480      	push	{r7}
   17fc2:	b083      	sub	sp, #12
   17fc4:	af00      	add	r7, sp, #0
   17fc6:	6078      	str	r0, [r7, #4]
{
} //CO_CRC16_Class
   17fc8:	687b      	ldr	r3, [r7, #4]
   17fca:	4618      	mov	r0, r3
   17fcc:	370c      	adds	r7, #12
   17fce:	46bd      	mov	sp, r7
   17fd0:	bc80      	pop	{r7}
   17fd2:	4770      	bx	lr

00017fd4 <_ZN14CO_CRC16_ClassD1Ev>:

// default destructor
CO_CRC16_Class::~CO_CRC16_Class()
   17fd4:	b480      	push	{r7}
   17fd6:	b083      	sub	sp, #12
   17fd8:	af00      	add	r7, sp, #0
   17fda:	6078      	str	r0, [r7, #4]
{
} //~CO_CRC16_Class
   17fdc:	687b      	ldr	r3, [r7, #4]
   17fde:	4618      	mov	r0, r3
   17fe0:	370c      	adds	r7, #12
   17fe2:	46bd      	mov	sp, r7
   17fe4:	bc80      	pop	{r7}
   17fe6:	4770      	bx	lr

00017fe8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   17fe8:	b580      	push	{r7, lr}
   17fea:	b084      	sub	sp, #16
   17fec:	af00      	add	r7, sp, #0
   17fee:	60f8      	str	r0, [r7, #12]
   17ff0:	60b9      	str	r1, [r7, #8]
   17ff2:	4613      	mov	r3, r2
   17ff4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   17ff6:	68fb      	ldr	r3, [r7, #12]
   17ff8:	2b00      	cmp	r3, #0
   17ffa:	d004      	beq.n	18006 <io_write+0x1e>
   17ffc:	68bb      	ldr	r3, [r7, #8]
   17ffe:	2b00      	cmp	r3, #0
   18000:	d001      	beq.n	18006 <io_write+0x1e>
   18002:	2301      	movs	r3, #1
   18004:	e000      	b.n	18008 <io_write+0x20>
   18006:	2300      	movs	r3, #0
   18008:	f003 0301 	and.w	r3, r3, #1
   1800c:	b2db      	uxtb	r3, r3
   1800e:	2234      	movs	r2, #52	; 0x34
   18010:	4907      	ldr	r1, [pc, #28]	; (18030 <io_write+0x48>)
   18012:	4618      	mov	r0, r3
   18014:	4b07      	ldr	r3, [pc, #28]	; (18034 <io_write+0x4c>)
   18016:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   18018:	68fb      	ldr	r3, [r7, #12]
   1801a:	681b      	ldr	r3, [r3, #0]
   1801c:	88fa      	ldrh	r2, [r7, #6]
   1801e:	68b9      	ldr	r1, [r7, #8]
   18020:	68f8      	ldr	r0, [r7, #12]
   18022:	4798      	blx	r3
   18024:	4603      	mov	r3, r0
}
   18026:	4618      	mov	r0, r3
   18028:	3710      	adds	r7, #16
   1802a:	46bd      	mov	sp, r7
   1802c:	bd80      	pop	{r7, pc}
   1802e:	bf00      	nop
   18030:	0001bb84 	.word	0x0001bb84
   18034:	00004c81 	.word	0x00004c81

00018038 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   18038:	b580      	push	{r7, lr}
   1803a:	b084      	sub	sp, #16
   1803c:	af00      	add	r7, sp, #0
   1803e:	60f8      	str	r0, [r7, #12]
   18040:	60b9      	str	r1, [r7, #8]
   18042:	4613      	mov	r3, r2
   18044:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   18046:	68fb      	ldr	r3, [r7, #12]
   18048:	2b00      	cmp	r3, #0
   1804a:	d004      	beq.n	18056 <io_read+0x1e>
   1804c:	68bb      	ldr	r3, [r7, #8]
   1804e:	2b00      	cmp	r3, #0
   18050:	d001      	beq.n	18056 <io_read+0x1e>
   18052:	2301      	movs	r3, #1
   18054:	e000      	b.n	18058 <io_read+0x20>
   18056:	2300      	movs	r3, #0
   18058:	f003 0301 	and.w	r3, r3, #1
   1805c:	b2db      	uxtb	r3, r3
   1805e:	223d      	movs	r2, #61	; 0x3d
   18060:	4907      	ldr	r1, [pc, #28]	; (18080 <io_read+0x48>)
   18062:	4618      	mov	r0, r3
   18064:	4b07      	ldr	r3, [pc, #28]	; (18084 <io_read+0x4c>)
   18066:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   18068:	68fb      	ldr	r3, [r7, #12]
   1806a:	685b      	ldr	r3, [r3, #4]
   1806c:	88fa      	ldrh	r2, [r7, #6]
   1806e:	68b9      	ldr	r1, [r7, #8]
   18070:	68f8      	ldr	r0, [r7, #12]
   18072:	4798      	blx	r3
   18074:	4603      	mov	r3, r0
}
   18076:	4618      	mov	r0, r3
   18078:	3710      	adds	r7, #16
   1807a:	46bd      	mov	sp, r7
   1807c:	bd80      	pop	{r7, pc}
   1807e:	bf00      	nop
   18080:	0001bb84 	.word	0x0001bb84
   18084:	00004c81 	.word	0x00004c81

00018088 <itoa>:
#ifdef __cplusplus
extern "C" {
#endif

extern char* itoa(int value, char*string, int radix)
        {
   18088:	b580      	push	{r7, lr}
   1808a:	b084      	sub	sp, #16
   1808c:	af00      	add	r7, sp, #0
   1808e:	60f8      	str	r0, [r7, #12]
   18090:	60b9      	str	r1, [r7, #8]
   18092:	607a      	str	r2, [r7, #4]
            return ltoa(value, string, radix);
   18094:	687a      	ldr	r2, [r7, #4]
   18096:	68b9      	ldr	r1, [r7, #8]
   18098:	68f8      	ldr	r0, [r7, #12]
   1809a:	4b03      	ldr	r3, [pc, #12]	; (180a8 <itoa+0x20>)
   1809c:	4798      	blx	r3
   1809e:	4603      	mov	r3, r0
        }
   180a0:	4618      	mov	r0, r3
   180a2:	3710      	adds	r7, #16
   180a4:	46bd      	mov	sp, r7
   180a6:	bd80      	pop	{r7, pc}
   180a8:	000180ad 	.word	0x000180ad

000180ac <ltoa>:

        extern char* ltoa(long value, char*string, int radix)
        {
   180ac:	b480      	push	{r7}
   180ae:	b093      	sub	sp, #76	; 0x4c
   180b0:	af00      	add	r7, sp, #0
   180b2:	60f8      	str	r0, [r7, #12]
   180b4:	60b9      	str	r1, [r7, #8]
   180b6:	607a      	str	r2, [r7, #4]
            char tmp[33];
            char* tp = tmp;
   180b8:	f107 0310 	add.w	r3, r7, #16
   180bc:	647b      	str	r3, [r7, #68]	; 0x44
            long i;
            unsigned long v;
            int sign;
            char* sp;

            if (string == NULL)
   180be:	68bb      	ldr	r3, [r7, #8]
   180c0:	2b00      	cmp	r3, #0
   180c2:	d101      	bne.n	180c8 <ltoa+0x1c>
            {
                return 0;
   180c4:	2300      	movs	r3, #0
   180c6:	e061      	b.n	1818c <ltoa+0xe0>
            }

            if (radix > 36 || radix <= 1)
   180c8:	687b      	ldr	r3, [r7, #4]
   180ca:	2b24      	cmp	r3, #36	; 0x24
   180cc:	dc02      	bgt.n	180d4 <ltoa+0x28>
   180ce:	687b      	ldr	r3, [r7, #4]
   180d0:	2b01      	cmp	r3, #1
   180d2:	dc01      	bgt.n	180d8 <ltoa+0x2c>
            {
                return 0;
   180d4:	2300      	movs	r3, #0
   180d6:	e059      	b.n	1818c <ltoa+0xe0>
            }

            sign = (radix == 10 && value < 0);
   180d8:	687b      	ldr	r3, [r7, #4]
   180da:	2b0a      	cmp	r3, #10
   180dc:	d104      	bne.n	180e8 <ltoa+0x3c>
   180de:	68fb      	ldr	r3, [r7, #12]
   180e0:	2b00      	cmp	r3, #0
   180e2:	da01      	bge.n	180e8 <ltoa+0x3c>
   180e4:	2301      	movs	r3, #1
   180e6:	e000      	b.n	180ea <ltoa+0x3e>
   180e8:	2300      	movs	r3, #0
   180ea:	63bb      	str	r3, [r7, #56]	; 0x38
            if (sign)
   180ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   180ee:	2b00      	cmp	r3, #0
   180f0:	d003      	beq.n	180fa <ltoa+0x4e>
            {
                v = -value;
   180f2:	68fb      	ldr	r3, [r7, #12]
   180f4:	425b      	negs	r3, r3
   180f6:	643b      	str	r3, [r7, #64]	; 0x40
   180f8:	e023      	b.n	18142 <ltoa+0x96>
            }
            else
            {
                v = (unsigned long)value;
   180fa:	68fb      	ldr	r3, [r7, #12]
   180fc:	643b      	str	r3, [r7, #64]	; 0x40
            }

            while (v || tp == tmp)
   180fe:	e020      	b.n	18142 <ltoa+0x96>
            {
                i = v % radix;
   18100:	687a      	ldr	r2, [r7, #4]
   18102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18104:	fbb3 f1f2 	udiv	r1, r3, r2
   18108:	fb02 f201 	mul.w	r2, r2, r1
   1810c:	1a9b      	subs	r3, r3, r2
   1810e:	637b      	str	r3, [r7, #52]	; 0x34
                v = v / radix;
   18110:	687b      	ldr	r3, [r7, #4]
   18112:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   18114:	fbb2 f3f3 	udiv	r3, r2, r3
   18118:	643b      	str	r3, [r7, #64]	; 0x40
                if (i < 10)
   1811a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1811c:	2b09      	cmp	r3, #9
   1811e:	dc08      	bgt.n	18132 <ltoa+0x86>
                    *tp++ = i + '0';
   18120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18122:	1c5a      	adds	r2, r3, #1
   18124:	647a      	str	r2, [r7, #68]	; 0x44
   18126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   18128:	b2d2      	uxtb	r2, r2
   1812a:	3230      	adds	r2, #48	; 0x30
   1812c:	b2d2      	uxtb	r2, r2
   1812e:	701a      	strb	r2, [r3, #0]
   18130:	e007      	b.n	18142 <ltoa+0x96>
                else
                    *tp++ = i + 'a' - 10;
   18132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18134:	1c5a      	adds	r2, r3, #1
   18136:	647a      	str	r2, [r7, #68]	; 0x44
   18138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1813a:	b2d2      	uxtb	r2, r2
   1813c:	3257      	adds	r2, #87	; 0x57
   1813e:	b2d2      	uxtb	r2, r2
   18140:	701a      	strb	r2, [r3, #0]
            while (v || tp == tmp)
   18142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18144:	2b00      	cmp	r3, #0
   18146:	d1db      	bne.n	18100 <ltoa+0x54>
   18148:	f107 0310 	add.w	r3, r7, #16
   1814c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1814e:	429a      	cmp	r2, r3
   18150:	d0d6      	beq.n	18100 <ltoa+0x54>
            }

            sp = string;
   18152:	68bb      	ldr	r3, [r7, #8]
   18154:	63fb      	str	r3, [r7, #60]	; 0x3c

            if (sign)
   18156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18158:	2b00      	cmp	r3, #0
   1815a:	d00e      	beq.n	1817a <ltoa+0xce>
                *sp++ = '-';
   1815c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1815e:	1c5a      	adds	r2, r3, #1
   18160:	63fa      	str	r2, [r7, #60]	; 0x3c
   18162:	222d      	movs	r2, #45	; 0x2d
   18164:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
   18166:	e008      	b.n	1817a <ltoa+0xce>
                *sp++ = *--tp;
   18168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1816a:	1c5a      	adds	r2, r3, #1
   1816c:	63fa      	str	r2, [r7, #60]	; 0x3c
   1816e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   18170:	3a01      	subs	r2, #1
   18172:	647a      	str	r2, [r7, #68]	; 0x44
   18174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   18176:	7812      	ldrb	r2, [r2, #0]
   18178:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
   1817a:	f107 0310 	add.w	r3, r7, #16
   1817e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   18180:	429a      	cmp	r2, r3
   18182:	d8f1      	bhi.n	18168 <ltoa+0xbc>
            *sp = 0;
   18184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18186:	2200      	movs	r2, #0
   18188:	701a      	strb	r2, [r3, #0]

            return string;
   1818a:	68bb      	ldr	r3, [r7, #8]
        }
   1818c:	4618      	mov	r0, r3
   1818e:	374c      	adds	r7, #76	; 0x4c
   18190:	46bd      	mov	sp, r7
   18192:	bc80      	pop	{r7}
   18194:	4770      	bx	lr

00018196 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
   18196:	b480      	push	{r7}
   18198:	b083      	sub	sp, #12
   1819a:	af00      	add	r7, sp, #0
   1819c:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
   1819e:	687b      	ldr	r3, [r7, #4]
   181a0:	4618      	mov	r0, r3
   181a2:	370c      	adds	r7, #12
   181a4:	46bd      	mov	sp, r7
   181a6:	bc80      	pop	{r7}
   181a8:	4770      	bx	lr

000181aa <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
   181aa:	b480      	push	{r7}
   181ac:	b083      	sub	sp, #12
   181ae:	af00      	add	r7, sp, #0
   181b0:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
   181b2:	687b      	ldr	r3, [r7, #4]
   181b4:	4618      	mov	r0, r3
   181b6:	370c      	adds	r7, #12
   181b8:	46bd      	mov	sp, r7
   181ba:	bc80      	pop	{r7}
   181bc:	4770      	bx	lr

000181be <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
   181be:	b480      	push	{r7}
   181c0:	b085      	sub	sp, #20
   181c2:	af00      	add	r7, sp, #0
   181c4:	6078      	str	r0, [r7, #4]
   181c6:	460b      	mov	r3, r1
   181c8:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
   181ca:	2300      	movs	r3, #0
   181cc:	73fb      	strb	r3, [r7, #15]
   181ce:	7bfb      	ldrb	r3, [r7, #15]
   181d0:	2b01      	cmp	r3, #1
   181d2:	dc13      	bgt.n	181fc <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
   181d4:	7bfb      	ldrb	r3, [r7, #15]
   181d6:	78f9      	ldrb	r1, [r7, #3]
   181d8:	7bfa      	ldrb	r2, [r7, #15]
   181da:	2080      	movs	r0, #128	; 0x80
   181dc:	fa40 f202 	asr.w	r2, r0, r2
   181e0:	400a      	ands	r2, r1
   181e2:	2a00      	cmp	r2, #0
   181e4:	bfcc      	ite	gt
   181e6:	2201      	movgt	r2, #1
   181e8:	2200      	movle	r2, #0
   181ea:	b2d1      	uxtb	r1, r2
   181ec:	687a      	ldr	r2, [r7, #4]
   181ee:	4413      	add	r3, r2
   181f0:	460a      	mov	r2, r1
   181f2:	755a      	strb	r2, [r3, #21]
	for (uint8_t ii = 0; ii < 2; ii++)
   181f4:	7bfb      	ldrb	r3, [r7, #15]
   181f6:	3301      	adds	r3, #1
   181f8:	73fb      	strb	r3, [r7, #15]
   181fa:	e7e8      	b.n	181ce <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
   181fc:	bf00      	nop
   181fe:	3714      	adds	r7, #20
   18200:	46bd      	mov	sp, r7
   18202:	bc80      	pop	{r7}
   18204:	4770      	bx	lr

00018206 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
   18206:	b480      	push	{r7}
   18208:	b085      	sub	sp, #20
   1820a:	af00      	add	r7, sp, #0
   1820c:	6078      	str	r0, [r7, #4]
   1820e:	460b      	mov	r3, r1
   18210:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
   18212:	2300      	movs	r3, #0
   18214:	73fb      	strb	r3, [r7, #15]
   18216:	7bfb      	ldrb	r3, [r7, #15]
   18218:	2b02      	cmp	r3, #2
   1821a:	dc15      	bgt.n	18248 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
   1821c:	7bfb      	ldrb	r3, [r7, #15]
   1821e:	f1c3 0302 	rsb	r3, r3, #2
   18222:	78f9      	ldrb	r1, [r7, #3]
   18224:	7bfa      	ldrb	r2, [r7, #15]
   18226:	2020      	movs	r0, #32
   18228:	fa40 f202 	asr.w	r2, r0, r2
   1822c:	400a      	ands	r2, r1
   1822e:	2a00      	cmp	r2, #0
   18230:	bfcc      	ite	gt
   18232:	2201      	movgt	r2, #1
   18234:	2200      	movle	r2, #0
   18236:	b2d1      	uxtb	r1, r2
   18238:	687a      	ldr	r2, [r7, #4]
   1823a:	4413      	add	r3, r2
   1823c:	460a      	mov	r2, r1
   1823e:	75da      	strb	r2, [r3, #23]
	for (uint8_t ii = 0; ii < 3; ii++)
   18240:	7bfb      	ldrb	r3, [r7, #15]
   18242:	3301      	adds	r3, #1
   18244:	73fb      	strb	r3, [r7, #15]
   18246:	e7e6      	b.n	18216 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
   18248:	bf00      	nop
   1824a:	3714      	adds	r7, #20
   1824c:	46bd      	mov	sp, r7
   1824e:	bc80      	pop	{r7}
   18250:	4770      	bx	lr
	...

00018254 <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
   18254:	b580      	push	{r7, lr}
   18256:	b084      	sub	sp, #16
   18258:	af00      	add	r7, sp, #0
   1825a:	60f8      	str	r0, [r7, #12]
   1825c:	60b9      	str	r1, [r7, #8]
   1825e:	4613      	mov	r3, r2
   18260:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
   18262:	79fb      	ldrb	r3, [r7, #7]
   18264:	4619      	mov	r1, r3
   18266:	68b8      	ldr	r0, [r7, #8]
   18268:	4b0d      	ldr	r3, [pc, #52]	; (182a0 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
   1826a:	4798      	blx	r3
	FillLimitSwitch(v);
   1826c:	79fb      	ldrb	r3, [r7, #7]
   1826e:	4619      	mov	r1, r3
   18270:	68b8      	ldr	r0, [r7, #8]
   18272:	4b0c      	ldr	r3, [pc, #48]	; (182a4 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
   18274:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
   18276:	79fb      	ldrb	r3, [r7, #7]
   18278:	f003 0301 	and.w	r3, r3, #1
   1827c:	2b00      	cmp	r3, #0
   1827e:	bfcc      	ite	gt
   18280:	2301      	movgt	r3, #1
   18282:	2300      	movle	r3, #0
   18284:	b2da      	uxtb	r2, r3
   18286:	68bb      	ldr	r3, [r7, #8]
   18288:	769a      	strb	r2, [r3, #26]
	return controlStatus;
   1828a:	68fa      	ldr	r2, [r7, #12]
   1828c:	68bb      	ldr	r3, [r7, #8]
   1828e:	3315      	adds	r3, #21
   18290:	6819      	ldr	r1, [r3, #0]
   18292:	6011      	str	r1, [r2, #0]
   18294:	889b      	ldrh	r3, [r3, #4]
   18296:	8093      	strh	r3, [r2, #4]
}
   18298:	68f8      	ldr	r0, [r7, #12]
   1829a:	3710      	adds	r7, #16
   1829c:	46bd      	mov	sp, r7
   1829e:	bd80      	pop	{r7, pc}
   182a0:	000181bf 	.word	0x000181bf
   182a4:	00018207 	.word	0x00018207

000182a8 <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
   182a8:	b480      	push	{r7}
   182aa:	b085      	sub	sp, #20
   182ac:	af00      	add	r7, sp, #0
   182ae:	60f8      	str	r0, [r7, #12]
   182b0:	60b9      	str	r1, [r7, #8]
   182b2:	4613      	mov	r3, r2
   182b4:	71fb      	strb	r3, [r7, #7]
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
	} 
	else
	{
		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
   182b6:	79fb      	ldrb	r3, [r7, #7]
   182b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   182bc:	2b00      	cmp	r3, #0
   182be:	bfcc      	ite	gt
   182c0:	2301      	movgt	r3, #1
   182c2:	2300      	movle	r3, #0
   182c4:	b2da      	uxtb	r2, r3
   182c6:	68bb      	ldr	r3, [r7, #8]
   182c8:	76da      	strb	r2, [r3, #27]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
   182ca:	79fb      	ldrb	r3, [r7, #7]
   182cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
   182d0:	2b00      	cmp	r3, #0
   182d2:	bfcc      	ite	gt
   182d4:	2301      	movgt	r3, #1
   182d6:	2300      	movle	r3, #0
   182d8:	b2da      	uxtb	r2, r3
   182da:	68bb      	ldr	r3, [r7, #8]
   182dc:	771a      	strb	r2, [r3, #28]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
   182de:	79fb      	ldrb	r3, [r7, #7]
   182e0:	f003 0320 	and.w	r3, r3, #32
   182e4:	2b00      	cmp	r3, #0
   182e6:	bfcc      	ite	gt
   182e8:	2301      	movgt	r3, #1
   182ea:	2300      	movle	r3, #0
   182ec:	b2da      	uxtb	r2, r3
   182ee:	68bb      	ldr	r3, [r7, #8]
   182f0:	779a      	strb	r2, [r3, #30]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
   182f2:	79fb      	ldrb	r3, [r7, #7]
   182f4:	f003 0310 	and.w	r3, r3, #16
   182f8:	2b00      	cmp	r3, #0
   182fa:	bfcc      	ite	gt
   182fc:	2301      	movgt	r3, #1
   182fe:	2300      	movle	r3, #0
   18300:	b2da      	uxtb	r2, r3
   18302:	68bb      	ldr	r3, [r7, #8]
   18304:	775a      	strb	r2, [r3, #29]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
   18306:	79fb      	ldrb	r3, [r7, #7]
   18308:	f003 0308 	and.w	r3, r3, #8
   1830c:	2b00      	cmp	r3, #0
   1830e:	bfcc      	ite	gt
   18310:	2301      	movgt	r3, #1
   18312:	2300      	movle	r3, #0
   18314:	b2da      	uxtb	r2, r3
   18316:	68bb      	ldr	r3, [r7, #8]
   18318:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
   1831a:	79fb      	ldrb	r3, [r7, #7]
   1831c:	f003 0304 	and.w	r3, r3, #4
   18320:	2b00      	cmp	r3, #0
   18322:	bfcc      	ite	gt
   18324:	2301      	movgt	r3, #1
   18326:	2300      	movle	r3, #0
   18328:	b2da      	uxtb	r2, r3
   1832a:	68bb      	ldr	r3, [r7, #8]
   1832c:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
   18330:	79fb      	ldrb	r3, [r7, #7]
   18332:	f003 0302 	and.w	r3, r3, #2
   18336:	2b00      	cmp	r3, #0
   18338:	bfcc      	ite	gt
   1833a:	2301      	movgt	r3, #1
   1833c:	2300      	movle	r3, #0
   1833e:	b2da      	uxtb	r2, r3
   18340:	68bb      	ldr	r3, [r7, #8]
   18342:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
   18346:	79fb      	ldrb	r3, [r7, #7]
   18348:	f003 0301 	and.w	r3, r3, #1
   1834c:	2b00      	cmp	r3, #0
   1834e:	bfcc      	ite	gt
   18350:	2301      	movgt	r3, #1
   18352:	2300      	movle	r3, #0
   18354:	b2da      	uxtb	r2, r3
   18356:	68bb      	ldr	r3, [r7, #8]
   18358:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	return controlOutputs;
   1835c:	68fa      	ldr	r2, [r7, #12]
   1835e:	68bb      	ldr	r3, [r7, #8]
   18360:	331b      	adds	r3, #27
   18362:	6819      	ldr	r1, [r3, #0]
   18364:	685b      	ldr	r3, [r3, #4]
   18366:	6011      	str	r1, [r2, #0]
   18368:	6053      	str	r3, [r2, #4]
   1836a:	68f8      	ldr	r0, [r7, #12]
   1836c:	3714      	adds	r7, #20
   1836e:	46bd      	mov	sp, r7
   18370:	bc80      	pop	{r7}
   18372:	4770      	bx	lr

00018374 <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
   18374:	b480      	push	{r7}
   18376:	b083      	sub	sp, #12
   18378:	af00      	add	r7, sp, #0
   1837a:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
   1837c:	4b04      	ldr	r3, [pc, #16]	; (18390 <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
   1837e:	681b      	ldr	r3, [r3, #0]
   18380:	2201      	movs	r2, #1
   18382:	709a      	strb	r2, [r3, #2]
	asm("nop");
   18384:	bf00      	nop
}
   18386:	bf00      	nop
   18388:	370c      	adds	r7, #12
   1838a:	46bd      	mov	sp, r7
   1838c:	bc80      	pop	{r7}
   1838e:	4770      	bx	lr
   18390:	2000db60 	.word	0x2000db60

00018394 <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   18394:	b480      	push	{r7}
   18396:	b083      	sub	sp, #12
   18398:	af00      	add	r7, sp, #0
   1839a:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   1839c:	687b      	ldr	r3, [r7, #4]
   1839e:	4618      	mov	r0, r3
   183a0:	370c      	adds	r7, #12
   183a2:	46bd      	mov	sp, r7
   183a4:	bc80      	pop	{r7}
   183a6:	4770      	bx	lr

000183a8 <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   183a8:	b480      	push	{r7}
   183aa:	b083      	sub	sp, #12
   183ac:	af00      	add	r7, sp, #0
   183ae:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   183b0:	687b      	ldr	r3, [r7, #4]
   183b2:	4618      	mov	r0, r3
   183b4:	370c      	adds	r7, #12
   183b6:	46bd      	mov	sp, r7
   183b8:	bc80      	pop	{r7}
   183ba:	4770      	bx	lr

000183bc <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
   183bc:	b580      	push	{r7, lr}
   183be:	b084      	sub	sp, #16
   183c0:	af00      	add	r7, sp, #0
   183c2:	60f8      	str	r0, [r7, #12]
   183c4:	60b9      	str	r1, [r7, #8]
   183c6:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
   183c8:	4a1c      	ldr	r2, [pc, #112]	; (1843c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
   183ca:	68fb      	ldr	r3, [r7, #12]
   183cc:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
   183ce:	68fb      	ldr	r3, [r7, #12]
   183d0:	68ba      	ldr	r2, [r7, #8]
   183d2:	659a      	str	r2, [r3, #88]	; 0x58
	spiLT=spiLite;
   183d4:	68fb      	ldr	r3, [r7, #12]
   183d6:	687a      	ldr	r2, [r7, #4]
   183d8:	621a      	str	r2, [r3, #32]
	rx=spiLT->rxLiteBuffer;
   183da:	68fb      	ldr	r3, [r7, #12]
   183dc:	6a1b      	ldr	r3, [r3, #32]
   183de:	68da      	ldr	r2, [r3, #12]
   183e0:	68fb      	ldr	r3, [r7, #12]
   183e2:	62da      	str	r2, [r3, #44]	; 0x2c
	tx=spiLT->txLiteBuffer;
   183e4:	68fb      	ldr	r3, [r7, #12]
   183e6:	6a1b      	ldr	r3, [r3, #32]
   183e8:	689a      	ldr	r2, [r3, #8]
   183ea:	68fb      	ldr	r3, [r7, #12]
   183ec:	629a      	str	r2, [r3, #40]	; 0x28
	auxTimer=&hvacTimer;
   183ee:	68fb      	ldr	r3, [r7, #12]
   183f0:	4a13      	ldr	r2, [pc, #76]	; (18440 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
   183f2:	631a      	str	r2, [r3, #48]	; 0x30
	activeChannels[0]=4;
   183f4:	68fb      	ldr	r3, [r7, #12]
   183f6:	2204      	movs	r2, #4
   183f8:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=9;
   183fa:	68fb      	ldr	r3, [r7, #12]
   183fc:	2209      	movs	r2, #9
   183fe:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=14;
   18400:	68fb      	ldr	r3, [r7, #12]
   18402:	220e      	movs	r2, #14
   18404:	715a      	strb	r2, [r3, #5]
	activeChannels[3]=19;
   18406:	68fb      	ldr	r3, [r7, #12]
   18408:	2213      	movs	r2, #19
   1840a:	719a      	strb	r2, [r3, #6]
	delay_ms(200);
   1840c:	20c8      	movs	r0, #200	; 0xc8
   1840e:	4b0d      	ldr	r3, [pc, #52]	; (18444 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
   18410:	4798      	blx	r3
	temperatureTimer.Init();
   18412:	480d      	ldr	r0, [pc, #52]	; (18448 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
   18414:	4b0d      	ldr	r3, [pc, #52]	; (1844c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
   18416:	4798      	blx	r3
	configure_channels();
   18418:	68f8      	ldr	r0, [r7, #12]
   1841a:	4b0d      	ldr	r3, [pc, #52]	; (18450 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
   1841c:	4798      	blx	r3
	configure_global_parameters();
   1841e:	68f8      	ldr	r0, [r7, #12]
   18420:	4b0c      	ldr	r3, [pc, #48]	; (18454 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x98>)
   18422:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
   18424:	68fb      	ldr	r3, [r7, #12]
   18426:	2201      	movs	r2, #1
   18428:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
   1842a:	68f8      	ldr	r0, [r7, #12]
   1842c:	4b0a      	ldr	r3, [pc, #40]	; (18458 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x9c>)
   1842e:	4798      	blx	r3
   18430:	4603      	mov	r3, r0
}
   18432:	4618      	mov	r0, r3
   18434:	3710      	adds	r7, #16
   18436:	46bd      	mov	sp, r7
   18438:	bd80      	pop	{r7, pc}
   1843a:	bf00      	nop
   1843c:	2000db60 	.word	0x2000db60
   18440:	2000daa0 	.word	0x2000daa0
   18444:	00003625 	.word	0x00003625
   18448:	2000da60 	.word	0x2000da60
   1844c:	00010295 	.word	0x00010295
   18450:	00018865 	.word	0x00018865
   18454:	0001891d 	.word	0x0001891d
   18458:	00018955 	.word	0x00018955

0001845c <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
   1845c:	b590      	push	{r4, r7, lr}
   1845e:	b089      	sub	sp, #36	; 0x24
   18460:	af02      	add	r7, sp, #8
   18462:	60f8      	str	r0, [r7, #12]
   18464:	60b9      	str	r1, [r7, #8]
   18466:	603b      	str	r3, [r7, #0]
   18468:	4613      	mov	r3, r2
   1846a:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
   1846c:	79fb      	ldrb	r3, [r7, #7]
   1846e:	461a      	mov	r2, r3
   18470:	f44f 7100 	mov.w	r1, #512	; 0x200
   18474:	68f8      	ldr	r0, [r7, #12]
   18476:	4b0b      	ldr	r3, [pc, #44]	; (184a4 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
   18478:	4798      	blx	r3
   1847a:	4603      	mov	r3, r0
   1847c:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
   1847e:	8afa      	ldrh	r2, [r7, #22]
   18480:	683b      	ldr	r3, [r7, #0]
   18482:	9300      	str	r3, [sp, #0]
   18484:	4613      	mov	r3, r2
   18486:	2202      	movs	r2, #2
   18488:	68b9      	ldr	r1, [r7, #8]
   1848a:	68f8      	ldr	r0, [r7, #12]
   1848c:	4c06      	ldr	r4, [pc, #24]	; (184a8 <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
   1848e:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
   18490:	8afb      	ldrh	r3, [r7, #22]
   18492:	79fa      	ldrb	r2, [r7, #7]
   18494:	68b9      	ldr	r1, [r7, #8]
   18496:	68f8      	ldr	r0, [r7, #12]
   18498:	4c04      	ldr	r4, [pc, #16]	; (184ac <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
   1849a:	47a0      	blx	r4
}
   1849c:	bf00      	nop
   1849e:	371c      	adds	r7, #28
   184a0:	46bd      	mov	sp, r7
   184a2:	bd90      	pop	{r4, r7, pc}
   184a4:	00018839 	.word	0x00018839
   184a8:	000186f9 	.word	0x000186f9
   184ac:	000184fd 	.word	0x000184fd

000184b0 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
   184b0:	b590      	push	{r4, r7, lr}
   184b2:	b087      	sub	sp, #28
   184b4:	af02      	add	r7, sp, #8
   184b6:	6078      	str	r0, [r7, #4]
   184b8:	460b      	mov	r3, r1
   184ba:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
   184bc:	78fb      	ldrb	r3, [r7, #3]
   184be:	687a      	ldr	r2, [r7, #4]
   184c0:	4413      	add	r3, r2
   184c2:	78db      	ldrb	r3, [r3, #3]
   184c4:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
   184c6:	687b      	ldr	r3, [r7, #4]
   184c8:	2200      	movs	r2, #0
   184ca:	705a      	strb	r2, [r3, #1]
	ready=false;
   184cc:	687b      	ldr	r3, [r7, #4]
   184ce:	2200      	movs	r2, #0
   184d0:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
   184d2:	687b      	ldr	r3, [r7, #4]
   184d4:	6d99      	ldr	r1, [r3, #88]	; 0x58
   184d6:	7bfb      	ldrb	r3, [r7, #15]
   184d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   184dc:	b2db      	uxtb	r3, r3
   184de:	9300      	str	r3, [sp, #0]
   184e0:	2300      	movs	r3, #0
   184e2:	2202      	movs	r2, #2
   184e4:	6878      	ldr	r0, [r7, #4]
   184e6:	4c04      	ldr	r4, [pc, #16]	; (184f8 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
   184e8:	47a0      	blx	r4
	channelOnProcess=channel_number;
   184ea:	687b      	ldr	r3, [r7, #4]
   184ec:	7bfa      	ldrb	r2, [r7, #15]
   184ee:	721a      	strb	r2, [r3, #8]
	//wait_for_process_to_finish(chip_select);
}
   184f0:	bf00      	nop
   184f2:	3714      	adds	r7, #20
   184f4:	46bd      	mov	sp, r7
   184f6:	bd90      	pop	{r4, r7, pc}
   184f8:	000187c9 	.word	0x000187c9

000184fc <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
   184fc:	b590      	push	{r4, r7, lr}
   184fe:	b089      	sub	sp, #36	; 0x24
   18500:	af02      	add	r7, sp, #8
   18502:	60f8      	str	r0, [r7, #12]
   18504:	60b9      	str	r1, [r7, #8]
   18506:	4611      	mov	r1, r2
   18508:	461a      	mov	r2, r3
   1850a:	460b      	mov	r3, r1
   1850c:	71fb      	strb	r3, [r7, #7]
   1850e:	4613      	mov	r3, r2
   18510:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
   18512:	88ba      	ldrh	r2, [r7, #4]
   18514:	2300      	movs	r3, #0
   18516:	9300      	str	r3, [sp, #0]
   18518:	4613      	mov	r3, r2
   1851a:	2203      	movs	r2, #3
   1851c:	68b9      	ldr	r1, [r7, #8]
   1851e:	68f8      	ldr	r0, [r7, #12]
   18520:	4c03      	ldr	r4, [pc, #12]	; (18530 <_ZN13LTC2983_Class20print_config_channelEmht+0x34>)
   18522:	47a0      	blx	r4
   18524:	6178      	str	r0, [r7, #20]
	// 24 LSB's are conversion result
	
// 	usb<<"register value: ";
// 	usb.println(raw_data,HEX);
	
}
   18526:	bf00      	nop
   18528:	371c      	adds	r7, #28
   1852a:	46bd      	mov	sp, r7
   1852c:	bd90      	pop	{r4, r7, pc}
   1852e:	bf00      	nop
   18530:	000186f9 	.word	0x000186f9

00018534 <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
   18534:	b590      	push	{r4, r7, lr}
   18536:	b085      	sub	sp, #20
   18538:	af02      	add	r7, sp, #8
   1853a:	6078      	str	r0, [r7, #4]
   1853c:	460b      	mov	r3, r1
   1853e:	70fb      	strb	r3, [r7, #3]
   18540:	4613      	mov	r3, r2
   18542:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
   18544:	78fb      	ldrb	r3, [r7, #3]
   18546:	461a      	mov	r2, r3
   18548:	2110      	movs	r1, #16
   1854a:	6878      	ldr	r0, [r7, #4]
   1854c:	4b17      	ldr	r3, [pc, #92]	; (185ac <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
   1854e:	4798      	blx	r3
   18550:	4603      	mov	r3, r0
   18552:	461a      	mov	r2, r3
   18554:	687b      	ldr	r3, [r7, #4]
   18556:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
   1855a:	687b      	ldr	r3, [r7, #4]
   1855c:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1855e:	687b      	ldr	r3, [r7, #4]
   18560:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   18564:	2300      	movs	r3, #0
   18566:	9300      	str	r3, [sp, #0]
   18568:	4613      	mov	r3, r2
   1856a:	2203      	movs	r2, #3
   1856c:	6878      	ldr	r0, [r7, #4]
   1856e:	4c10      	ldr	r4, [pc, #64]	; (185b0 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
   18570:	47a0      	blx	r4
   18572:	4602      	mov	r2, r0
   18574:	687b      	ldr	r3, [r7, #4]
   18576:	655a      	str	r2, [r3, #84]	; 0x54


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
   18578:	687b      	ldr	r3, [r7, #4]
   1857a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1857c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   18580:	687b      	ldr	r3, [r7, #4]
   18582:	651a      	str	r2, [r3, #80]	; 0x50
	ConvertResult(raw_conversion_result, channel_number, channel_output);
   18584:	687b      	ldr	r3, [r7, #4]
   18586:	6d19      	ldr	r1, [r3, #80]	; 0x50
   18588:	78bb      	ldrb	r3, [r7, #2]
   1858a:	78fa      	ldrb	r2, [r7, #3]
   1858c:	6878      	ldr	r0, [r7, #4]
   1858e:	4c09      	ldr	r4, [pc, #36]	; (185b4 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
   18590:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
   18592:	687b      	ldr	r3, [r7, #4]
   18594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   18596:	0e1b      	lsrs	r3, r3, #24
   18598:	b2da      	uxtb	r2, r3
   1859a:	687b      	ldr	r3, [r7, #4]
   1859c:	71da      	strb	r2, [r3, #7]
	return scaled_result;
   1859e:	687b      	ldr	r3, [r7, #4]
   185a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
   185a2:	4618      	mov	r0, r3
   185a4:	370c      	adds	r7, #12
   185a6:	46bd      	mov	sp, r7
   185a8:	bd90      	pop	{r4, r7, pc}
   185aa:	bf00      	nop
   185ac:	00018839 	.word	0x00018839
   185b0:	000186f9 	.word	0x000186f9
   185b4:	0001860d 	.word	0x0001860d

000185b8 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
   185b8:	b580      	push	{r7, lr}
   185ba:	b082      	sub	sp, #8
   185bc:	af00      	add	r7, sp, #0
   185be:	6078      	str	r0, [r7, #4]
   185c0:	460b      	mov	r3, r1
   185c2:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
   185c4:	78fb      	ldrb	r3, [r7, #3]
   185c6:	687a      	ldr	r2, [r7, #4]
   185c8:	4413      	add	r3, r2
   185ca:	78db      	ldrb	r3, [r3, #3]
   185cc:	4619      	mov	r1, r3
   185ce:	6878      	ldr	r0, [r7, #4]
   185d0:	4b03      	ldr	r3, [pc, #12]	; (185e0 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
   185d2:	4798      	blx	r3
   185d4:	4603      	mov	r3, r0
}
   185d6:	4618      	mov	r0, r3
   185d8:	3708      	adds	r7, #8
   185da:	46bd      	mov	sp, r7
   185dc:	bd80      	pop	{r7, pc}
   185de:	bf00      	nop
   185e0:	000185e5 	.word	0x000185e5

000185e4 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
   185e4:	b580      	push	{r7, lr}
   185e6:	b082      	sub	sp, #8
   185e8:	af00      	add	r7, sp, #0
   185ea:	6078      	str	r0, [r7, #4]
   185ec:	460b      	mov	r3, r1
   185ee:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
   185f0:	78fb      	ldrb	r3, [r7, #3]
   185f2:	2202      	movs	r2, #2
   185f4:	4619      	mov	r1, r3
   185f6:	6878      	ldr	r0, [r7, #4]
   185f8:	4b03      	ldr	r3, [pc, #12]	; (18608 <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
   185fa:	4798      	blx	r3
   185fc:	4603      	mov	r3, r0
}
   185fe:	4618      	mov	r0, r3
   18600:	3708      	adds	r7, #8
   18602:	46bd      	mov	sp, r7
   18604:	bd80      	pop	{r7, pc}
   18606:	bf00      	nop
   18608:	00018535 	.word	0x00018535

0001860c <_ZN13LTC2983_Class13ConvertResultEmhh>:
// 		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
   1860c:	b580      	push	{r7, lr}
   1860e:	b084      	sub	sp, #16
   18610:	af00      	add	r7, sp, #0
   18612:	60f8      	str	r0, [r7, #12]
   18614:	60b9      	str	r1, [r7, #8]
   18616:	4611      	mov	r1, r2
   18618:	461a      	mov	r2, r3
   1861a:	460b      	mov	r3, r1
   1861c:	71fb      	strb	r3, [r7, #7]
   1861e:	4613      	mov	r3, r2
   18620:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
   18622:	68ba      	ldr	r2, [r7, #8]
   18624:	68fb      	ldr	r3, [r7, #12]
   18626:	661a      	str	r2, [r3, #96]	; 0x60
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
   18628:	68fb      	ldr	r3, [r7, #12]
   1862a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1862c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   18630:	2b00      	cmp	r3, #0
   18632:	d006      	beq.n	18642 <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
   18634:	68fb      	ldr	r3, [r7, #12]
   18636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   18638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   1863c:	461a      	mov	r2, r3
   1863e:	68fb      	ldr	r3, [r7, #12]
   18640:	661a      	str	r2, [r3, #96]	; 0x60

	// Translate and print result
	if (channel_output == TEMPERATURE)
   18642:	79bb      	ldrb	r3, [r7, #6]
   18644:	2b02      	cmp	r3, #2
   18646:	d11d      	bne.n	18684 <_ZN13LTC2983_Class13ConvertResultEmhh+0x78>
	{
		scaled_result= float(signed_data) / 1024;
   18648:	68fb      	ldr	r3, [r7, #12]
   1864a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1864c:	4b18      	ldr	r3, [pc, #96]	; (186b0 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   1864e:	4610      	mov	r0, r2
   18650:	4798      	blx	r3
   18652:	4602      	mov	r2, r0
   18654:	4b17      	ldr	r3, [pc, #92]	; (186b4 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   18656:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
   1865a:	4610      	mov	r0, r2
   1865c:	4798      	blx	r3
   1865e:	4603      	mov	r3, r0
   18660:	461a      	mov	r2, r3
   18662:	68fb      	ldr	r3, [r7, #12]
   18664:	65da      	str	r2, [r3, #92]	; 0x5c
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
   18666:	79fb      	ldrb	r3, [r7, #7]
   18668:	4619      	mov	r1, r3
   1866a:	68f8      	ldr	r0, [r7, #12]
   1866c:	4b12      	ldr	r3, [pc, #72]	; (186b8 <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
   1866e:	4798      	blx	r3
   18670:	4603      	mov	r3, r0
   18672:	4618      	mov	r0, r3
   18674:	68fb      	ldr	r3, [r7, #12]
   18676:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   18678:	68f9      	ldr	r1, [r7, #12]
   1867a:	1c83      	adds	r3, r0, #2
   1867c:	009b      	lsls	r3, r3, #2
   1867e:	440b      	add	r3, r1
   18680:	605a      	str	r2, [r3, #4]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
   18682:	e011      	b.n	186a8 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
	else if (channel_output == VOLTAGE)
   18684:	79bb      	ldrb	r3, [r7, #6]
   18686:	2b01      	cmp	r3, #1
   18688:	d10e      	bne.n	186a8 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
		scaled_result = float(signed_data) / 2097152;
   1868a:	68fb      	ldr	r3, [r7, #12]
   1868c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1868e:	4b08      	ldr	r3, [pc, #32]	; (186b0 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   18690:	4610      	mov	r0, r2
   18692:	4798      	blx	r3
   18694:	4602      	mov	r2, r0
   18696:	4b07      	ldr	r3, [pc, #28]	; (186b4 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   18698:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
   1869c:	4610      	mov	r0, r2
   1869e:	4798      	blx	r3
   186a0:	4603      	mov	r3, r0
   186a2:	461a      	mov	r2, r3
   186a4:	68fb      	ldr	r3, [r7, #12]
   186a6:	65da      	str	r2, [r3, #92]	; 0x5c
}
   186a8:	bf00      	nop
   186aa:	3710      	adds	r7, #16
   186ac:	46bd      	mov	sp, r7
   186ae:	bd80      	pop	{r7, pc}
   186b0:	0001a235 	.word	0x0001a235
   186b4:	0001a445 	.word	0x0001a445
   186b8:	000186bd 	.word	0x000186bd

000186bc <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
   186bc:	b480      	push	{r7}
   186be:	b085      	sub	sp, #20
   186c0:	af00      	add	r7, sp, #0
   186c2:	6078      	str	r0, [r7, #4]
   186c4:	460b      	mov	r3, r1
   186c6:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   186c8:	2300      	movs	r3, #0
   186ca:	73fb      	strb	r3, [r7, #15]
   186cc:	7bfb      	ldrb	r3, [r7, #15]
   186ce:	2b03      	cmp	r3, #3
   186d0:	dc0c      	bgt.n	186ec <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
   186d2:	7bfb      	ldrb	r3, [r7, #15]
   186d4:	687a      	ldr	r2, [r7, #4]
   186d6:	4413      	add	r3, r2
   186d8:	78db      	ldrb	r3, [r3, #3]
   186da:	78fa      	ldrb	r2, [r7, #3]
   186dc:	429a      	cmp	r2, r3
   186de:	d101      	bne.n	186e4 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
   186e0:	7bfb      	ldrb	r3, [r7, #15]
   186e2:	e004      	b.n	186ee <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   186e4:	7bfb      	ldrb	r3, [r7, #15]
   186e6:	3301      	adds	r3, #1
   186e8:	73fb      	strb	r3, [r7, #15]
   186ea:	e7ef      	b.n	186cc <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
   186ec:	2300      	movs	r3, #0
}
   186ee:	4618      	mov	r0, r3
   186f0:	3714      	adds	r7, #20
   186f2:	46bd      	mov	sp, r7
   186f4:	bc80      	pop	{r7}
   186f6:	4770      	bx	lr

000186f8 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   186f8:	b590      	push	{r4, r7, lr}
   186fa:	b089      	sub	sp, #36	; 0x24
   186fc:	af02      	add	r7, sp, #8
   186fe:	60f8      	str	r0, [r7, #12]
   18700:	60b9      	str	r1, [r7, #8]
   18702:	4611      	mov	r1, r2
   18704:	461a      	mov	r2, r3
   18706:	460b      	mov	r3, r1
   18708:	71fb      	strb	r3, [r7, #7]
   1870a:	4613      	mov	r3, r2
   1870c:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   1870e:	2300      	movs	r3, #0
   18710:	75fb      	strb	r3, [r7, #23]
   18712:	7dfb      	ldrb	r3, [r7, #23]
   18714:	2b06      	cmp	r3, #6
   18716:	dc09      	bgt.n	1872c <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
   18718:	68fb      	ldr	r3, [r7, #12]
   1871a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1871c:	7dfb      	ldrb	r3, [r7, #23]
   1871e:	4413      	add	r3, r2
   18720:	2200      	movs	r2, #0
   18722:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   18724:	7dfb      	ldrb	r3, [r7, #23]
   18726:	3301      	adds	r3, #1
   18728:	75fb      	strb	r3, [r7, #23]
   1872a:	e7f2      	b.n	18712 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
   1872c:	68fb      	ldr	r3, [r7, #12]
   1872e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18730:	79fa      	ldrb	r2, [r7, #7]
   18732:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
   18734:	68fb      	ldr	r3, [r7, #12]
   18736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18738:	3301      	adds	r3, #1
   1873a:	88ba      	ldrh	r2, [r7, #4]
   1873c:	1212      	asrs	r2, r2, #8
   1873e:	b2d2      	uxtb	r2, r2
   18740:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
   18742:	68fb      	ldr	r3, [r7, #12]
   18744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18746:	3302      	adds	r3, #2
   18748:	88ba      	ldrh	r2, [r7, #4]
   1874a:	b2d2      	uxtb	r2, r2
   1874c:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
   1874e:	68fb      	ldr	r3, [r7, #12]
   18750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18752:	3303      	adds	r3, #3
   18754:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18756:	0e12      	lsrs	r2, r2, #24
   18758:	b2d2      	uxtb	r2, r2
   1875a:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
   1875c:	68fb      	ldr	r3, [r7, #12]
   1875e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18760:	3304      	adds	r3, #4
   18762:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18764:	0c12      	lsrs	r2, r2, #16
   18766:	b2d2      	uxtb	r2, r2
   18768:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
   1876a:	68fb      	ldr	r3, [r7, #12]
   1876c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1876e:	3305      	adds	r3, #5
   18770:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18772:	0a12      	lsrs	r2, r2, #8
   18774:	b2d2      	uxtb	r2, r2
   18776:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
   18778:	68fb      	ldr	r3, [r7, #12]
   1877a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1877c:	3306      	adds	r3, #6
   1877e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18780:	b2d2      	uxtb	r2, r2
   18782:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
   18784:	68fb      	ldr	r3, [r7, #12]
   18786:	6a18      	ldr	r0, [r3, #32]
   18788:	68fb      	ldr	r3, [r7, #12]
   1878a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1878c:	f107 0110 	add.w	r1, r7, #16
   18790:	2307      	movs	r3, #7
   18792:	9300      	str	r3, [sp, #0]
   18794:	460b      	mov	r3, r1
   18796:	68b9      	ldr	r1, [r7, #8]
   18798:	4c0a      	ldr	r4, [pc, #40]	; (187c4 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
   1879a:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
   1879c:	7c3b      	ldrb	r3, [r7, #16]
   1879e:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
   187a0:	7c7b      	ldrb	r3, [r7, #17]
   187a2:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
   187a4:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
   187a6:	7cbb      	ldrb	r3, [r7, #18]
   187a8:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
   187aa:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
   187ac:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
   187ae:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
   187b0:	68fb      	ldr	r3, [r7, #12]
   187b2:	625a      	str	r2, [r3, #36]	; 0x24
	asm("nop");
   187b4:	bf00      	nop
	return output_data;
   187b6:	68fb      	ldr	r3, [r7, #12]
   187b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   187ba:	4618      	mov	r0, r3
   187bc:	371c      	adds	r7, #28
   187be:	46bd      	mov	sp, r7
   187c0:	bd90      	pop	{r4, r7, pc}
   187c2:	bf00      	nop
   187c4:	00018ced 	.word	0x00018ced

000187c8 <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
   187c8:	b590      	push	{r4, r7, lr}
   187ca:	b087      	sub	sp, #28
   187cc:	af02      	add	r7, sp, #8
   187ce:	60f8      	str	r0, [r7, #12]
   187d0:	60b9      	str	r1, [r7, #8]
   187d2:	4611      	mov	r1, r2
   187d4:	461a      	mov	r2, r3
   187d6:	460b      	mov	r3, r1
   187d8:	71fb      	strb	r3, [r7, #7]
   187da:	4613      	mov	r3, r2
   187dc:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
   187de:	68fb      	ldr	r3, [r7, #12]
   187e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   187e2:	79fa      	ldrb	r2, [r7, #7]
   187e4:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
   187e6:	68fb      	ldr	r3, [r7, #12]
   187e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   187ea:	3301      	adds	r3, #1
   187ec:	88ba      	ldrh	r2, [r7, #4]
   187ee:	1212      	asrs	r2, r2, #8
   187f0:	b2d2      	uxtb	r2, r2
   187f2:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
   187f4:	68fb      	ldr	r3, [r7, #12]
   187f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   187f8:	3302      	adds	r3, #2
   187fa:	88ba      	ldrh	r2, [r7, #4]
   187fc:	b2d2      	uxtb	r2, r2
   187fe:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
   18800:	68fb      	ldr	r3, [r7, #12]
   18802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18804:	3303      	adds	r3, #3
   18806:	f897 2020 	ldrb.w	r2, [r7, #32]
   1880a:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
   1880c:	68fb      	ldr	r3, [r7, #12]
   1880e:	6a18      	ldr	r0, [r3, #32]
   18810:	68fb      	ldr	r3, [r7, #12]
   18812:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18814:	68fb      	ldr	r3, [r7, #12]
   18816:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   18818:	2304      	movs	r3, #4
   1881a:	9300      	str	r3, [sp, #0]
   1881c:	460b      	mov	r3, r1
   1881e:	68b9      	ldr	r1, [r7, #8]
   18820:	4c04      	ldr	r4, [pc, #16]	; (18834 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
   18822:	47a0      	blx	r4
	return rx[0];
   18824:	68fb      	ldr	r3, [r7, #12]
   18826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18828:	781b      	ldrb	r3, [r3, #0]
}
   1882a:	4618      	mov	r0, r3
   1882c:	3714      	adds	r7, #20
   1882e:	46bd      	mov	sp, r7
   18830:	bd90      	pop	{r4, r7, pc}
   18832:	bf00      	nop
   18834:	00018ced 	.word	0x00018ced

00018838 <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   18838:	b480      	push	{r7}
   1883a:	b083      	sub	sp, #12
   1883c:	af00      	add	r7, sp, #0
   1883e:	6078      	str	r0, [r7, #4]
   18840:	460b      	mov	r3, r1
   18842:	807b      	strh	r3, [r7, #2]
   18844:	4613      	mov	r3, r2
   18846:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   18848:	787b      	ldrb	r3, [r7, #1]
   1884a:	3b01      	subs	r3, #1
   1884c:	b29b      	uxth	r3, r3
   1884e:	009b      	lsls	r3, r3, #2
   18850:	b29a      	uxth	r2, r3
   18852:	887b      	ldrh	r3, [r7, #2]
   18854:	4413      	add	r3, r2
   18856:	b29b      	uxth	r3, r3
}
   18858:	4618      	mov	r0, r3
   1885a:	370c      	adds	r7, #12
   1885c:	46bd      	mov	sp, r7
   1885e:	bc80      	pop	{r7}
   18860:	4770      	bx	lr
	...

00018864 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
   18864:	b590      	push	{r4, r7, lr}
   18866:	b085      	sub	sp, #20
   18868:	af00      	add	r7, sp, #0
   1886a:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	
	  // ----- Channel 2: Assign Sense Resistor -----
	  channel_assignment_data =
   1886c:	4b25      	ldr	r3, [pc, #148]	; (18904 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   1886e:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 2, channel_assignment_data);
   18870:	687b      	ldr	r3, [r7, #4]
   18872:	6d99      	ldr	r1, [r3, #88]	; 0x58
   18874:	68fb      	ldr	r3, [r7, #12]
   18876:	2202      	movs	r2, #2
   18878:	6878      	ldr	r0, [r7, #4]
   1887a:	4c23      	ldr	r4, [pc, #140]	; (18908 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   1887c:	47a0      	blx	r4
	  // ----- Channel 4: Assign RTD PT-100 -----
	  channel_assignment_data =
   1887e:	4b23      	ldr	r3, [pc, #140]	; (1890c <_ZN13LTC2983_Class18configure_channelsEv+0xa8>)
   18880:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__2 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 4, channel_assignment_data);
   18882:	687b      	ldr	r3, [r7, #4]
   18884:	6d99      	ldr	r1, [r3, #88]	; 0x58
   18886:	68fb      	ldr	r3, [r7, #12]
   18888:	2204      	movs	r2, #4
   1888a:	6878      	ldr	r0, [r7, #4]
   1888c:	4c1e      	ldr	r4, [pc, #120]	; (18908 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   1888e:	47a0      	blx	r4
	  // ----- Channel 7: Assign Sense Resistor -----
	  channel_assignment_data =
   18890:	4b1c      	ldr	r3, [pc, #112]	; (18904 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   18892:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 7, channel_assignment_data);
   18894:	687b      	ldr	r3, [r7, #4]
   18896:	6d99      	ldr	r1, [r3, #88]	; 0x58
   18898:	68fb      	ldr	r3, [r7, #12]
   1889a:	2207      	movs	r2, #7
   1889c:	6878      	ldr	r0, [r7, #4]
   1889e:	4c1a      	ldr	r4, [pc, #104]	; (18908 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   188a0:	47a0      	blx	r4
	  // ----- Channel 9: Assign RTD PT-100 -----
	  channel_assignment_data =
   188a2:	4b1b      	ldr	r3, [pc, #108]	; (18910 <_ZN13LTC2983_Class18configure_channelsEv+0xac>)
   188a4:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__7 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 9, channel_assignment_data);
   188a6:	687b      	ldr	r3, [r7, #4]
   188a8:	6d99      	ldr	r1, [r3, #88]	; 0x58
   188aa:	68fb      	ldr	r3, [r7, #12]
   188ac:	2209      	movs	r2, #9
   188ae:	6878      	ldr	r0, [r7, #4]
   188b0:	4c15      	ldr	r4, [pc, #84]	; (18908 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   188b2:	47a0      	blx	r4
	  // ----- Channel 12: Assign Sense Resistor -----
	  channel_assignment_data =
   188b4:	4b13      	ldr	r3, [pc, #76]	; (18904 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   188b6:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 12, channel_assignment_data);
   188b8:	687b      	ldr	r3, [r7, #4]
   188ba:	6d99      	ldr	r1, [r3, #88]	; 0x58
   188bc:	68fb      	ldr	r3, [r7, #12]
   188be:	220c      	movs	r2, #12
   188c0:	6878      	ldr	r0, [r7, #4]
   188c2:	4c11      	ldr	r4, [pc, #68]	; (18908 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   188c4:	47a0      	blx	r4
	  // ----- Channel 14: Assign RTD PT-100 -----
	  channel_assignment_data =
   188c6:	4b13      	ldr	r3, [pc, #76]	; (18914 <_ZN13LTC2983_Class18configure_channelsEv+0xb0>)
   188c8:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__12 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 14, channel_assignment_data);
   188ca:	687b      	ldr	r3, [r7, #4]
   188cc:	6d99      	ldr	r1, [r3, #88]	; 0x58
   188ce:	68fb      	ldr	r3, [r7, #12]
   188d0:	220e      	movs	r2, #14
   188d2:	6878      	ldr	r0, [r7, #4]
   188d4:	4c0c      	ldr	r4, [pc, #48]	; (18908 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   188d6:	47a0      	blx	r4
	  // ----- Channel 17: Assign Sense Resistor -----
	  channel_assignment_data =
   188d8:	4b0a      	ldr	r3, [pc, #40]	; (18904 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   188da:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 17, channel_assignment_data);
   188dc:	687b      	ldr	r3, [r7, #4]
   188de:	6d99      	ldr	r1, [r3, #88]	; 0x58
   188e0:	68fb      	ldr	r3, [r7, #12]
   188e2:	2211      	movs	r2, #17
   188e4:	6878      	ldr	r0, [r7, #4]
   188e6:	4c08      	ldr	r4, [pc, #32]	; (18908 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   188e8:	47a0      	blx	r4
	  // ----- Channel 19: Assign RTD PT-100 -----
	  channel_assignment_data =
   188ea:	4b0b      	ldr	r3, [pc, #44]	; (18918 <_ZN13LTC2983_Class18configure_channelsEv+0xb4>)
   188ec:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__17 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 19, channel_assignment_data);
   188ee:	687b      	ldr	r3, [r7, #4]
   188f0:	6d99      	ldr	r1, [r3, #88]	; 0x58
   188f2:	68fb      	ldr	r3, [r7, #12]
   188f4:	2213      	movs	r2, #19
   188f6:	6878      	ldr	r0, [r7, #4]
   188f8:	4c03      	ldr	r4, [pc, #12]	; (18908 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   188fa:	47a0      	blx	r4

}
   188fc:	bf00      	nop
   188fe:	3714      	adds	r7, #20
   18900:	46bd      	mov	sp, r7
   18902:	bd90      	pop	{r4, r7, pc}
   18904:	e89c4000 	.word	0xe89c4000
   18908:	0001845d 	.word	0x0001845d
   1890c:	60a91000 	.word	0x60a91000
   18910:	61e91000 	.word	0x61e91000
   18914:	63291000 	.word	0x63291000
   18918:	64691000 	.word	0x64691000

0001891c <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
   1891c:	b590      	push	{r4, r7, lr}
   1891e:	b085      	sub	sp, #20
   18920:	af02      	add	r7, sp, #8
   18922:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
   18924:	687b      	ldr	r3, [r7, #4]
   18926:	6d99      	ldr	r1, [r3, #88]	; 0x58
	REJECTION__50_60_HZ);
   18928:	2300      	movs	r3, #0
   1892a:	9300      	str	r3, [sp, #0]
   1892c:	23f0      	movs	r3, #240	; 0xf0
   1892e:	2202      	movs	r2, #2
   18930:	6878      	ldr	r0, [r7, #4]
   18932:	4c07      	ldr	r4, [pc, #28]	; (18950 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   18934:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
   18936:	687b      	ldr	r3, [r7, #4]
   18938:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1893a:	2300      	movs	r3, #0
   1893c:	9300      	str	r3, [sp, #0]
   1893e:	23ff      	movs	r3, #255	; 0xff
   18940:	2202      	movs	r2, #2
   18942:	6878      	ldr	r0, [r7, #4]
   18944:	4c02      	ldr	r4, [pc, #8]	; (18950 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   18946:	47a0      	blx	r4
}
   18948:	bf00      	nop
   1894a:	370c      	adds	r7, #12
   1894c:	46bd      	mov	sp, r7
   1894e:	bd90      	pop	{r4, r7, pc}
   18950:	000187c9 	.word	0x000187c9

00018954 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
   18954:	b580      	push	{r7, lr}
   18956:	b082      	sub	sp, #8
   18958:	af00      	add	r7, sp, #0
   1895a:	6078      	str	r0, [r7, #4]
	process_finished = 0;
   1895c:	687b      	ldr	r3, [r7, #4]
   1895e:	2200      	movs	r2, #0
   18960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	meassureTimeout=false;
   18964:	687b      	ldr	r3, [r7, #4]
   18966:	2200      	movs	r2, #0
   18968:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
   1896a:	4a31      	ldr	r2, [pc, #196]	; (18a30 <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
   1896c:	687b      	ldr	r3, [r7, #4]
   1896e:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   18970:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18974:	492f      	ldr	r1, [pc, #188]	; (18a34 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   18976:	4830      	ldr	r0, [pc, #192]	; (18a38 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   18978:	4b30      	ldr	r3, [pc, #192]	; (18a3c <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
   1897a:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   1897c:	687b      	ldr	r3, [r7, #4]
   1897e:	79db      	ldrb	r3, [r3, #7]
   18980:	2b01      	cmp	r3, #1
   18982:	d009      	beq.n	18998 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   18984:	687b      	ldr	r3, [r7, #4]
   18986:	789b      	ldrb	r3, [r3, #2]
   18988:	b2db      	uxtb	r3, r3
   1898a:	f083 0301 	eor.w	r3, r3, #1
   1898e:	b2db      	uxtb	r3, r3
   18990:	2b00      	cmp	r3, #0
   18992:	d001      	beq.n	18998 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   18994:	2301      	movs	r3, #1
   18996:	e000      	b.n	1899a <_ZN13LTC2983_Class8SelfTestEv+0x46>
   18998:	2300      	movs	r3, #0
   1899a:	2b00      	cmp	r3, #0
   1899c:	d034      	beq.n	18a08 <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
   1899e:	2100      	movs	r1, #0
   189a0:	6878      	ldr	r0, [r7, #4]
   189a2:	4b27      	ldr	r3, [pc, #156]	; (18a40 <_ZN13LTC2983_Class8SelfTestEv+0xec>)
   189a4:	4798      	blx	r3
		delay_ms(1);
   189a6:	2001      	movs	r0, #1
   189a8:	4b26      	ldr	r3, [pc, #152]	; (18a44 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   189aa:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
   189ac:	687b      	ldr	r3, [r7, #4]
   189ae:	781b      	ldrb	r3, [r3, #0]
   189b0:	b2db      	uxtb	r3, r3
   189b2:	f083 0301 	eor.w	r3, r3, #1
   189b6:	b2db      	uxtb	r3, r3
   189b8:	2b00      	cmp	r3, #0
   189ba:	d009      	beq.n	189d0 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   189bc:	687b      	ldr	r3, [r7, #4]
   189be:	789b      	ldrb	r3, [r3, #2]
   189c0:	b2db      	uxtb	r3, r3
   189c2:	f083 0301 	eor.w	r3, r3, #1
   189c6:	b2db      	uxtb	r3, r3
   189c8:	2b00      	cmp	r3, #0
   189ca:	d001      	beq.n	189d0 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   189cc:	2301      	movs	r3, #1
   189ce:	e000      	b.n	189d2 <_ZN13LTC2983_Class8SelfTestEv+0x7e>
   189d0:	2300      	movs	r3, #0
   189d2:	2b00      	cmp	r3, #0
   189d4:	d000      	beq.n	189d8 <_ZN13LTC2983_Class8SelfTestEv+0x84>
   189d6:	e7e9      	b.n	189ac <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
   189d8:	687b      	ldr	r3, [r7, #4]
   189da:	789b      	ldrb	r3, [r3, #2]
   189dc:	b2db      	uxtb	r3, r3
   189de:	f083 0301 	eor.w	r3, r3, #1
   189e2:	b2db      	uxtb	r3, r3
   189e4:	2b00      	cmp	r3, #0
   189e6:	d0c9      	beq.n	1897c <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
   189e8:	687b      	ldr	r3, [r7, #4]
   189ea:	781b      	ldrb	r3, [r3, #0]
   189ec:	b2db      	uxtb	r3, r3
   189ee:	2b00      	cmp	r3, #0
   189f0:	d006      	beq.n	18a00 <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
   189f2:	687b      	ldr	r3, [r7, #4]
   189f4:	78db      	ldrb	r3, [r3, #3]
   189f6:	4619      	mov	r1, r3
   189f8:	6878      	ldr	r0, [r7, #4]
   189fa:	4b13      	ldr	r3, [pc, #76]	; (18a48 <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
   189fc:	4798      	blx	r3
   189fe:	e7bd      	b.n	1897c <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
   18a00:	2001      	movs	r0, #1
   18a02:	4b10      	ldr	r3, [pc, #64]	; (18a44 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   18a04:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   18a06:	e7b9      	b.n	1897c <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
   18a08:	490a      	ldr	r1, [pc, #40]	; (18a34 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   18a0a:	480b      	ldr	r0, [pc, #44]	; (18a38 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   18a0c:	4b0f      	ldr	r3, [pc, #60]	; (18a4c <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
   18a0e:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
   18a10:	687b      	ldr	r3, [r7, #4]
   18a12:	79db      	ldrb	r3, [r3, #7]
   18a14:	2b01      	cmp	r3, #1
   18a16:	bf0c      	ite	eq
   18a18:	2301      	moveq	r3, #1
   18a1a:	2300      	movne	r3, #0
   18a1c:	b2da      	uxtb	r2, r3
   18a1e:	687b      	ldr	r3, [r7, #4]
   18a20:	771a      	strb	r2, [r3, #28]
	return	isOK;
   18a22:	687b      	ldr	r3, [r7, #4]
   18a24:	7f1b      	ldrb	r3, [r3, #28]
	}
   18a26:	4618      	mov	r0, r3
   18a28:	3708      	adds	r7, #8
   18a2a:	46bd      	mov	sp, r7
   18a2c:	bd80      	pop	{r7, pc}
   18a2e:	bf00      	nop
   18a30:	2000db60 	.word	0x2000db60
   18a34:	00018375 	.word	0x00018375
   18a38:	2000da60 	.word	0x2000da60
   18a3c:	0001047d 	.word	0x0001047d
   18a40:	000184b1 	.word	0x000184b1
   18a44:	00003625 	.word	0x00003625
   18a48:	000185e5 	.word	0x000185e5
   18a4c:	00010425 	.word	0x00010425

00018a50 <_Z41__static_initialization_and_destruction_0ii>:
   18a50:	b580      	push	{r7, lr}
   18a52:	b082      	sub	sp, #8
   18a54:	af00      	add	r7, sp, #0
   18a56:	6078      	str	r0, [r7, #4]
   18a58:	6039      	str	r1, [r7, #0]
   18a5a:	687b      	ldr	r3, [r7, #4]
   18a5c:	2b01      	cmp	r3, #1
   18a5e:	d14c      	bne.n	18afa <_Z41__static_initialization_and_destruction_0ii+0xaa>
   18a60:	683b      	ldr	r3, [r7, #0]
   18a62:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18a66:	4293      	cmp	r3, r2
   18a68:	d147      	bne.n	18afa <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   18a6a:	4926      	ldr	r1, [pc, #152]	; (18b04 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   18a6c:	4826      	ldr	r0, [pc, #152]	; (18b08 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   18a6e:	4b27      	ldr	r3, [pc, #156]	; (18b0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   18a70:	4798      	blx	r3
   18a72:	4a27      	ldr	r2, [pc, #156]	; (18b10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   18a74:	4927      	ldr	r1, [pc, #156]	; (18b14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   18a76:	4824      	ldr	r0, [pc, #144]	; (18b08 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   18a78:	4b27      	ldr	r3, [pc, #156]	; (18b18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   18a7a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   18a7c:	4927      	ldr	r1, [pc, #156]	; (18b1c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   18a7e:	4828      	ldr	r0, [pc, #160]	; (18b20 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   18a80:	4b22      	ldr	r3, [pc, #136]	; (18b0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   18a82:	4798      	blx	r3
   18a84:	4a22      	ldr	r2, [pc, #136]	; (18b10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   18a86:	4923      	ldr	r1, [pc, #140]	; (18b14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   18a88:	4825      	ldr	r0, [pc, #148]	; (18b20 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   18a8a:	4b23      	ldr	r3, [pc, #140]	; (18b18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   18a8c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   18a8e:	4925      	ldr	r1, [pc, #148]	; (18b24 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   18a90:	4825      	ldr	r0, [pc, #148]	; (18b28 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   18a92:	4b1e      	ldr	r3, [pc, #120]	; (18b0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   18a94:	4798      	blx	r3
   18a96:	4a1e      	ldr	r2, [pc, #120]	; (18b10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   18a98:	491e      	ldr	r1, [pc, #120]	; (18b14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   18a9a:	4823      	ldr	r0, [pc, #140]	; (18b28 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   18a9c:	4b1e      	ldr	r3, [pc, #120]	; (18b18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   18a9e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   18aa0:	4922      	ldr	r1, [pc, #136]	; (18b2c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   18aa2:	4823      	ldr	r0, [pc, #140]	; (18b30 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   18aa4:	4b19      	ldr	r3, [pc, #100]	; (18b0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   18aa6:	4798      	blx	r3
   18aa8:	4a19      	ldr	r2, [pc, #100]	; (18b10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   18aaa:	491a      	ldr	r1, [pc, #104]	; (18b14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   18aac:	4820      	ldr	r0, [pc, #128]	; (18b30 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   18aae:	4b1a      	ldr	r3, [pc, #104]	; (18b18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   18ab0:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   18ab2:	4920      	ldr	r1, [pc, #128]	; (18b34 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   18ab4:	4820      	ldr	r0, [pc, #128]	; (18b38 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   18ab6:	4b15      	ldr	r3, [pc, #84]	; (18b0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   18ab8:	4798      	blx	r3
   18aba:	4a15      	ldr	r2, [pc, #84]	; (18b10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   18abc:	4915      	ldr	r1, [pc, #84]	; (18b14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   18abe:	481e      	ldr	r0, [pc, #120]	; (18b38 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   18ac0:	4b15      	ldr	r3, [pc, #84]	; (18b18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   18ac2:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   18ac4:	491d      	ldr	r1, [pc, #116]	; (18b3c <_Z41__static_initialization_and_destruction_0ii+0xec>)
   18ac6:	481e      	ldr	r0, [pc, #120]	; (18b40 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   18ac8:	4b10      	ldr	r3, [pc, #64]	; (18b0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   18aca:	4798      	blx	r3
   18acc:	4a10      	ldr	r2, [pc, #64]	; (18b10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   18ace:	4911      	ldr	r1, [pc, #68]	; (18b14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   18ad0:	481b      	ldr	r0, [pc, #108]	; (18b40 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   18ad2:	4b11      	ldr	r3, [pc, #68]	; (18b18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   18ad4:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   18ad6:	491b      	ldr	r1, [pc, #108]	; (18b44 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   18ad8:	481b      	ldr	r0, [pc, #108]	; (18b48 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   18ada:	4b0c      	ldr	r3, [pc, #48]	; (18b0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   18adc:	4798      	blx	r3
   18ade:	4a0c      	ldr	r2, [pc, #48]	; (18b10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   18ae0:	490c      	ldr	r1, [pc, #48]	; (18b14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   18ae2:	4819      	ldr	r0, [pc, #100]	; (18b48 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   18ae4:	4b0c      	ldr	r3, [pc, #48]	; (18b18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   18ae6:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   18ae8:	4918      	ldr	r1, [pc, #96]	; (18b4c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   18aea:	4819      	ldr	r0, [pc, #100]	; (18b50 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   18aec:	4b07      	ldr	r3, [pc, #28]	; (18b0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   18aee:	4798      	blx	r3
   18af0:	4a07      	ldr	r2, [pc, #28]	; (18b10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   18af2:	4908      	ldr	r1, [pc, #32]	; (18b14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   18af4:	4816      	ldr	r0, [pc, #88]	; (18b50 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   18af6:	4b08      	ldr	r3, [pc, #32]	; (18b18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   18af8:	4798      	blx	r3
   18afa:	bf00      	nop
   18afc:	3708      	adds	r7, #8
   18afe:	46bd      	mov	sp, r7
   18b00:	bd80      	pop	{r7, pc}
   18b02:	bf00      	nop
   18b04:	2000dec8 	.word	0x2000dec8
   18b08:	2000da60 	.word	0x2000da60
   18b0c:	000101a9 	.word	0x000101a9
   18b10:	20000000 	.word	0x20000000
   18b14:	000101e1 	.word	0x000101e1
   18b18:	0001a0b5 	.word	0x0001a0b5
   18b1c:	2000df5c 	.word	0x2000df5c
   18b20:	2000da80 	.word	0x2000da80
   18b24:	2000e080 	.word	0x2000e080
   18b28:	2000daa0 	.word	0x2000daa0
   18b2c:	2000df7c 	.word	0x2000df7c
   18b30:	2000dac0 	.word	0x2000dac0
   18b34:	2000e040 	.word	0x2000e040
   18b38:	2000dae0 	.word	0x2000dae0
   18b3c:	2000e060 	.word	0x2000e060
   18b40:	2000db00 	.word	0x2000db00
   18b44:	2000df38 	.word	0x2000df38
   18b48:	2000db20 	.word	0x2000db20
   18b4c:	2000dfd8 	.word	0x2000dfd8
   18b50:	2000db40 	.word	0x2000db40

00018b54 <_GLOBAL__sub_I_ptrLTCClass>:
   18b54:	b580      	push	{r7, lr}
   18b56:	af00      	add	r7, sp, #0
   18b58:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18b5c:	2001      	movs	r0, #1
   18b5e:	4b01      	ldr	r3, [pc, #4]	; (18b64 <_GLOBAL__sub_I_ptrLTCClass+0x10>)
   18b60:	4798      	blx	r3
   18b62:	bd80      	pop	{r7, pc}
   18b64:	00018a51 	.word	0x00018a51

00018b68 <hri_port_set_OUT_reg>:
{
   18b68:	b480      	push	{r7}
   18b6a:	b085      	sub	sp, #20
   18b6c:	af00      	add	r7, sp, #0
   18b6e:	60f8      	str	r0, [r7, #12]
   18b70:	460b      	mov	r3, r1
   18b72:	607a      	str	r2, [r7, #4]
   18b74:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   18b76:	7afb      	ldrb	r3, [r7, #11]
   18b78:	68fa      	ldr	r2, [r7, #12]
   18b7a:	01db      	lsls	r3, r3, #7
   18b7c:	4413      	add	r3, r2
   18b7e:	3318      	adds	r3, #24
   18b80:	687a      	ldr	r2, [r7, #4]
   18b82:	601a      	str	r2, [r3, #0]
}
   18b84:	bf00      	nop
   18b86:	3714      	adds	r7, #20
   18b88:	46bd      	mov	sp, r7
   18b8a:	bc80      	pop	{r7}
   18b8c:	4770      	bx	lr

00018b8e <hri_port_clear_OUT_reg>:
{
   18b8e:	b480      	push	{r7}
   18b90:	b085      	sub	sp, #20
   18b92:	af00      	add	r7, sp, #0
   18b94:	60f8      	str	r0, [r7, #12]
   18b96:	460b      	mov	r3, r1
   18b98:	607a      	str	r2, [r7, #4]
   18b9a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   18b9c:	7afb      	ldrb	r3, [r7, #11]
   18b9e:	68fa      	ldr	r2, [r7, #12]
   18ba0:	01db      	lsls	r3, r3, #7
   18ba2:	4413      	add	r3, r2
   18ba4:	3314      	adds	r3, #20
   18ba6:	687a      	ldr	r2, [r7, #4]
   18ba8:	601a      	str	r2, [r3, #0]
}
   18baa:	bf00      	nop
   18bac:	3714      	adds	r7, #20
   18bae:	46bd      	mov	sp, r7
   18bb0:	bc80      	pop	{r7}
   18bb2:	4770      	bx	lr

00018bb4 <_gpio_set_level>:
{
   18bb4:	b580      	push	{r7, lr}
   18bb6:	b082      	sub	sp, #8
   18bb8:	af00      	add	r7, sp, #0
   18bba:	4603      	mov	r3, r0
   18bbc:	6039      	str	r1, [r7, #0]
   18bbe:	71fb      	strb	r3, [r7, #7]
   18bc0:	4613      	mov	r3, r2
   18bc2:	71bb      	strb	r3, [r7, #6]
	if (level) {
   18bc4:	79bb      	ldrb	r3, [r7, #6]
   18bc6:	2b00      	cmp	r3, #0
   18bc8:	d006      	beq.n	18bd8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   18bca:	79fb      	ldrb	r3, [r7, #7]
   18bcc:	683a      	ldr	r2, [r7, #0]
   18bce:	4619      	mov	r1, r3
   18bd0:	4806      	ldr	r0, [pc, #24]	; (18bec <_gpio_set_level+0x38>)
   18bd2:	4b07      	ldr	r3, [pc, #28]	; (18bf0 <_gpio_set_level+0x3c>)
   18bd4:	4798      	blx	r3
}
   18bd6:	e005      	b.n	18be4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   18bd8:	79fb      	ldrb	r3, [r7, #7]
   18bda:	683a      	ldr	r2, [r7, #0]
   18bdc:	4619      	mov	r1, r3
   18bde:	4803      	ldr	r0, [pc, #12]	; (18bec <_gpio_set_level+0x38>)
   18be0:	4b04      	ldr	r3, [pc, #16]	; (18bf4 <_gpio_set_level+0x40>)
   18be2:	4798      	blx	r3
}
   18be4:	bf00      	nop
   18be6:	3708      	adds	r7, #8
   18be8:	46bd      	mov	sp, r7
   18bea:	bd80      	pop	{r7, pc}
   18bec:	41008000 	.word	0x41008000
   18bf0:	00018b69 	.word	0x00018b69
   18bf4:	00018b8f 	.word	0x00018b8f

00018bf8 <gpio_set_pin_level>:
{
   18bf8:	b580      	push	{r7, lr}
   18bfa:	b082      	sub	sp, #8
   18bfc:	af00      	add	r7, sp, #0
   18bfe:	4603      	mov	r3, r0
   18c00:	460a      	mov	r2, r1
   18c02:	71fb      	strb	r3, [r7, #7]
   18c04:	4613      	mov	r3, r2
   18c06:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   18c08:	79fb      	ldrb	r3, [r7, #7]
   18c0a:	115b      	asrs	r3, r3, #5
   18c0c:	b2d8      	uxtb	r0, r3
   18c0e:	79fb      	ldrb	r3, [r7, #7]
   18c10:	f003 031f 	and.w	r3, r3, #31
   18c14:	2201      	movs	r2, #1
   18c16:	fa02 f303 	lsl.w	r3, r2, r3
   18c1a:	79ba      	ldrb	r2, [r7, #6]
   18c1c:	4619      	mov	r1, r3
   18c1e:	4b03      	ldr	r3, [pc, #12]	; (18c2c <gpio_set_pin_level+0x34>)
   18c20:	4798      	blx	r3
}
   18c22:	bf00      	nop
   18c24:	3708      	adds	r7, #8
   18c26:	46bd      	mov	sp, r7
   18c28:	bd80      	pop	{r7, pc}
   18c2a:	bf00      	nop
   18c2c:	00018bb5 	.word	0x00018bb5

00018c30 <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
   18c30:	b480      	push	{r7}
   18c32:	b083      	sub	sp, #12
   18c34:	af00      	add	r7, sp, #0
   18c36:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   18c38:	4a05      	ldr	r2, [pc, #20]	; (18c50 <_ZN6LT_SPIC1Ev+0x20>)
   18c3a:	687b      	ldr	r3, [r7, #4]
   18c3c:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
   18c3e:	687b      	ldr	r3, [r7, #4]
   18c40:	4a04      	ldr	r2, [pc, #16]	; (18c54 <_ZN6LT_SPIC1Ev+0x24>)
   18c42:	605a      	str	r2, [r3, #4]
} //LT_SPI
   18c44:	687b      	ldr	r3, [r7, #4]
   18c46:	4618      	mov	r0, r3
   18c48:	370c      	adds	r7, #12
   18c4a:	46bd      	mov	sp, r7
   18c4c:	bc80      	pop	{r7}
   18c4e:	4770      	bx	lr
   18c50:	2000db64 	.word	0x2000db64
   18c54:	2000db68 	.word	0x2000db68

00018c58 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   18c58:	b480      	push	{r7}
   18c5a:	b083      	sub	sp, #12
   18c5c:	af00      	add	r7, sp, #0
   18c5e:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   18c60:	687b      	ldr	r3, [r7, #4]
   18c62:	4618      	mov	r0, r3
   18c64:	370c      	adds	r7, #12
   18c66:	46bd      	mov	sp, r7
   18c68:	bc80      	pop	{r7}
   18c6a:	4770      	bx	lr

00018c6c <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
   18c6c:	b580      	push	{r7, lr}
   18c6e:	b082      	sub	sp, #8
   18c70:	af00      	add	r7, sp, #0
   18c72:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
   18c74:	687b      	ldr	r3, [r7, #4]
   18c76:	685a      	ldr	r2, [r3, #4]
   18c78:	687b      	ldr	r3, [r7, #4]
   18c7a:	691b      	ldr	r3, [r3, #16]
   18c7c:	4619      	mov	r1, r3
   18c7e:	4610      	mov	r0, r2
   18c80:	4b0e      	ldr	r3, [pc, #56]	; (18cbc <_ZN6LT_SPI4initEv+0x50>)
   18c82:	4798      	blx	r3
	spiTemp->init();
   18c84:	687b      	ldr	r3, [r7, #4]
   18c86:	685b      	ldr	r3, [r3, #4]
   18c88:	4618      	mov	r0, r3
   18c8a:	4b0d      	ldr	r3, [pc, #52]	; (18cc0 <_ZN6LT_SPI4initEv+0x54>)
   18c8c:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
   18c8e:	687b      	ldr	r3, [r7, #4]
   18c90:	685b      	ldr	r3, [r3, #4]
   18c92:	685a      	ldr	r2, [r3, #4]
   18c94:	687b      	ldr	r3, [r7, #4]
   18c96:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
   18c98:	687b      	ldr	r3, [r7, #4]
   18c9a:	685b      	ldr	r3, [r3, #4]
   18c9c:	689a      	ldr	r2, [r3, #8]
   18c9e:	687b      	ldr	r3, [r7, #4]
   18ca0:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
   18ca2:	687b      	ldr	r3, [r7, #4]
   18ca4:	685b      	ldr	r3, [r3, #4]
   18ca6:	4618      	mov	r0, r3
   18ca8:	4b06      	ldr	r3, [pc, #24]	; (18cc4 <_ZN6LT_SPI4initEv+0x58>)
   18caa:	4798      	blx	r3
	ready=true;
   18cac:	687b      	ldr	r3, [r7, #4]
   18cae:	2201      	movs	r2, #1
   18cb0:	701a      	strb	r2, [r3, #0]
}
   18cb2:	bf00      	nop
   18cb4:	3708      	adds	r7, #8
   18cb6:	46bd      	mov	sp, r7
   18cb8:	bd80      	pop	{r7, pc}
   18cba:	bf00      	nop
   18cbc:	00018f15 	.word	0x00018f15
   18cc0:	00018ecd 	.word	0x00018ecd
   18cc4:	00018f39 	.word	0x00018f39

00018cc8 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
   18cc8:	b480      	push	{r7}
   18cca:	b083      	sub	sp, #12
   18ccc:	af00      	add	r7, sp, #0
   18cce:	6078      	str	r0, [r7, #4]
   18cd0:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
   18cd2:	687b      	ldr	r3, [r7, #4]
   18cd4:	683a      	ldr	r2, [r7, #0]
   18cd6:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
   18cd8:	4a03      	ldr	r2, [pc, #12]	; (18ce8 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
   18cda:	687b      	ldr	r3, [r7, #4]
   18cdc:	6013      	str	r3, [r2, #0]
}
   18cde:	bf00      	nop
   18ce0:	370c      	adds	r7, #12
   18ce2:	46bd      	mov	sp, r7
   18ce4:	bc80      	pop	{r7}
   18ce6:	4770      	bx	lr
   18ce8:	2000db64 	.word	0x2000db64

00018cec <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   18cec:	b580      	push	{r7, lr}
   18cee:	b086      	sub	sp, #24
   18cf0:	af00      	add	r7, sp, #0
   18cf2:	60f8      	str	r0, [r7, #12]
   18cf4:	60b9      	str	r1, [r7, #8]
   18cf6:	607a      	str	r2, [r7, #4]
   18cf8:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
   18cfa:	687b      	ldr	r3, [r7, #4]
   18cfc:	781b      	ldrb	r3, [r3, #0]
   18cfe:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
   18d00:	68b9      	ldr	r1, [r7, #8]
   18d02:	68f8      	ldr	r0, [r7, #12]
   18d04:	4b25      	ldr	r3, [pc, #148]	; (18d9c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
   18d06:	4798      	blx	r3
	
	switch(rOrw){
   18d08:	7dfb      	ldrb	r3, [r7, #23]
   18d0a:	2b02      	cmp	r3, #2
   18d0c:	d002      	beq.n	18d14 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
   18d0e:	2b03      	cmp	r3, #3
   18d10:	d009      	beq.n	18d26 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
   18d12:	e028      	b.n	18d66 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
   18d14:	68fb      	ldr	r3, [r7, #12]
   18d16:	685b      	ldr	r3, [r3, #4]
   18d18:	f897 2020 	ldrb.w	r2, [r7, #32]
   18d1c:	6879      	ldr	r1, [r7, #4]
   18d1e:	4618      	mov	r0, r3
   18d20:	4b1f      	ldr	r3, [pc, #124]	; (18da0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   18d22:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
   18d24:	e031      	b.n	18d8a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
   18d26:	68fb      	ldr	r3, [r7, #12]
   18d28:	685b      	ldr	r3, [r3, #4]
   18d2a:	2203      	movs	r2, #3
   18d2c:	6879      	ldr	r1, [r7, #4]
   18d2e:	4618      	mov	r0, r3
   18d30:	4b1b      	ldr	r3, [pc, #108]	; (18da0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   18d32:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
   18d34:	f897 3020 	ldrb.w	r3, [r7, #32]
   18d38:	2b04      	cmp	r3, #4
   18d3a:	dd0b      	ble.n	18d54 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
   18d3c:	68fb      	ldr	r3, [r7, #12]
   18d3e:	6858      	ldr	r0, [r3, #4]
   18d40:	f897 3020 	ldrb.w	r3, [r7, #32]
   18d44:	3b03      	subs	r3, #3
   18d46:	461a      	mov	r2, r3
   18d48:	6839      	ldr	r1, [r7, #0]
   18d4a:	4b16      	ldr	r3, [pc, #88]	; (18da4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   18d4c:	4798      	blx	r3
					asm("nop");
   18d4e:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
   18d50:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
   18d52:	e01a      	b.n	18d8a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
   18d54:	68fb      	ldr	r3, [r7, #12]
   18d56:	685b      	ldr	r3, [r3, #4]
   18d58:	2201      	movs	r2, #1
   18d5a:	6839      	ldr	r1, [r7, #0]
   18d5c:	4618      	mov	r0, r3
   18d5e:	4b11      	ldr	r3, [pc, #68]	; (18da4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   18d60:	4798      	blx	r3
				asm("nop");
   18d62:	bf00      	nop
			break;
   18d64:	e011      	b.n	18d8a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
   18d66:	68fb      	ldr	r3, [r7, #12]
   18d68:	685b      	ldr	r3, [r3, #4]
   18d6a:	f897 2020 	ldrb.w	r2, [r7, #32]
   18d6e:	6879      	ldr	r1, [r7, #4]
   18d70:	4618      	mov	r0, r3
   18d72:	4b0b      	ldr	r3, [pc, #44]	; (18da0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   18d74:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
   18d76:	68fb      	ldr	r3, [r7, #12]
   18d78:	6858      	ldr	r0, [r3, #4]
   18d7a:	f897 3020 	ldrb.w	r3, [r7, #32]
   18d7e:	3b03      	subs	r3, #3
   18d80:	461a      	mov	r2, r3
   18d82:	6839      	ldr	r1, [r7, #0]
   18d84:	4b07      	ldr	r3, [pc, #28]	; (18da4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   18d86:	4798      	blx	r3
			break;
   18d88:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
   18d8a:	68b9      	ldr	r1, [r7, #8]
   18d8c:	68f8      	ldr	r0, [r7, #12]
   18d8e:	4b06      	ldr	r3, [pc, #24]	; (18da8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
   18d90:	4798      	blx	r3
	asm("nop");
   18d92:	bf00      	nop
	
}
   18d94:	bf00      	nop
   18d96:	3718      	adds	r7, #24
   18d98:	46bd      	mov	sp, r7
   18d9a:	bd80      	pop	{r7, pc}
   18d9c:	00018dad 	.word	0x00018dad
   18da0:	00018f75 	.word	0x00018f75
   18da4:	00018fb9 	.word	0x00018fb9
   18da8:	00018df5 	.word	0x00018df5

00018dac <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
   18dac:	b580      	push	{r7, lr}
   18dae:	b082      	sub	sp, #8
   18db0:	af00      	add	r7, sp, #0
   18db2:	6078      	str	r0, [r7, #4]
   18db4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   18db6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   18dba:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
   18dbc:	683b      	ldr	r3, [r7, #0]
   18dbe:	b2db      	uxtb	r3, r3
   18dc0:	2100      	movs	r1, #0
   18dc2:	4618      	mov	r0, r3
   18dc4:	4b08      	ldr	r3, [pc, #32]	; (18de8 <_ZN6LT_SPI4OpenEm+0x3c>)
   18dc6:	4798      	blx	r3
	 delay_us(10);
   18dc8:	200a      	movs	r0, #10
   18dca:	4b08      	ldr	r3, [pc, #32]	; (18dec <_ZN6LT_SPI4OpenEm+0x40>)
   18dcc:	4798      	blx	r3
	spiTemp->Enable();
   18dce:	687b      	ldr	r3, [r7, #4]
   18dd0:	685b      	ldr	r3, [r3, #4]
   18dd2:	4618      	mov	r0, r3
   18dd4:	4b06      	ldr	r3, [pc, #24]	; (18df0 <_ZN6LT_SPI4OpenEm+0x44>)
   18dd6:	4798      	blx	r3
	 delay_us(10);
   18dd8:	200a      	movs	r0, #10
   18dda:	4b04      	ldr	r3, [pc, #16]	; (18dec <_ZN6LT_SPI4OpenEm+0x40>)
   18ddc:	4798      	blx	r3
 }
   18dde:	bf00      	nop
   18de0:	3708      	adds	r7, #8
   18de2:	46bd      	mov	sp, r7
   18de4:	bd80      	pop	{r7, pc}
   18de6:	bf00      	nop
   18de8:	00018bf9 	.word	0x00018bf9
   18dec:	000035f1 	.word	0x000035f1
   18df0:	00018f39 	.word	0x00018f39

00018df4 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
   18df4:	b580      	push	{r7, lr}
   18df6:	b082      	sub	sp, #8
   18df8:	af00      	add	r7, sp, #0
   18dfa:	6078      	str	r0, [r7, #4]
   18dfc:	6039      	str	r1, [r7, #0]

	  delay_us(10);
   18dfe:	200a      	movs	r0, #10
   18e00:	4b0b      	ldr	r3, [pc, #44]	; (18e30 <_ZN6LT_SPI5CloseEm+0x3c>)
   18e02:	4798      	blx	r3
	 spiTemp->Disable();
   18e04:	687b      	ldr	r3, [r7, #4]
   18e06:	685b      	ldr	r3, [r3, #4]
   18e08:	4618      	mov	r0, r3
   18e0a:	4b0a      	ldr	r3, [pc, #40]	; (18e34 <_ZN6LT_SPI5CloseEm+0x40>)
   18e0c:	4798      	blx	r3
	delay_us(10);
   18e0e:	200a      	movs	r0, #10
   18e10:	4b07      	ldr	r3, [pc, #28]	; (18e30 <_ZN6LT_SPI5CloseEm+0x3c>)
   18e12:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
   18e14:	683b      	ldr	r3, [r7, #0]
   18e16:	b2db      	uxtb	r3, r3
   18e18:	2101      	movs	r1, #1
   18e1a:	4618      	mov	r0, r3
   18e1c:	4b06      	ldr	r3, [pc, #24]	; (18e38 <_ZN6LT_SPI5CloseEm+0x44>)
   18e1e:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
   18e20:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   18e24:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
   18e26:	bf00      	nop
   18e28:	3708      	adds	r7, #8
   18e2a:	46bd      	mov	sp, r7
   18e2c:	bd80      	pop	{r7, pc}
   18e2e:	bf00      	nop
   18e30:	000035f1 	.word	0x000035f1
   18e34:	00018ffd 	.word	0x00018ffd
   18e38:	00018bf9 	.word	0x00018bf9

00018e3c <_Z41__static_initialization_and_destruction_0ii>:
   18e3c:	b580      	push	{r7, lr}
   18e3e:	b082      	sub	sp, #8
   18e40:	af00      	add	r7, sp, #0
   18e42:	6078      	str	r0, [r7, #4]
   18e44:	6039      	str	r1, [r7, #0]
   18e46:	687b      	ldr	r3, [r7, #4]
   18e48:	2b01      	cmp	r3, #1
   18e4a:	d10c      	bne.n	18e66 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   18e4c:	683b      	ldr	r3, [r7, #0]
   18e4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18e52:	4293      	cmp	r3, r2
   18e54:	d107      	bne.n	18e66 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
   18e56:	4806      	ldr	r0, [pc, #24]	; (18e70 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   18e58:	4b06      	ldr	r3, [pc, #24]	; (18e74 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   18e5a:	4798      	blx	r3
   18e5c:	4a06      	ldr	r2, [pc, #24]	; (18e78 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   18e5e:	4907      	ldr	r1, [pc, #28]	; (18e7c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   18e60:	4803      	ldr	r0, [pc, #12]	; (18e70 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   18e62:	4b07      	ldr	r3, [pc, #28]	; (18e80 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   18e64:	4798      	blx	r3
   18e66:	bf00      	nop
   18e68:	3708      	adds	r7, #8
   18e6a:	46bd      	mov	sp, r7
   18e6c:	bd80      	pop	{r7, pc}
   18e6e:	bf00      	nop
   18e70:	2000db68 	.word	0x2000db68
   18e74:	00018e99 	.word	0x00018e99
   18e78:	20000000 	.word	0x20000000
   18e7c:	00018eb9 	.word	0x00018eb9
   18e80:	0001a0b5 	.word	0x0001a0b5

00018e84 <_GLOBAL__sub_I_ptrLTSPIClass>:
   18e84:	b580      	push	{r7, lr}
   18e86:	af00      	add	r7, sp, #0
   18e88:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18e8c:	2001      	movs	r0, #1
   18e8e:	4b01      	ldr	r3, [pc, #4]	; (18e94 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   18e90:	4798      	blx	r3
   18e92:	bd80      	pop	{r7, pc}
   18e94:	00018e3d 	.word	0x00018e3d

00018e98 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   18e98:	b480      	push	{r7}
   18e9a:	b083      	sub	sp, #12
   18e9c:	af00      	add	r7, sp, #0
   18e9e:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   18ea0:	4a04      	ldr	r2, [pc, #16]	; (18eb4 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   18ea2:	687b      	ldr	r3, [r7, #4]
   18ea4:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   18ea6:	687b      	ldr	r3, [r7, #4]
   18ea8:	4618      	mov	r0, r3
   18eaa:	370c      	adds	r7, #12
   18eac:	46bd      	mov	sp, r7
   18eae:	bc80      	pop	{r7}
   18eb0:	4770      	bx	lr
   18eb2:	bf00      	nop
   18eb4:	2000db84 	.word	0x2000db84

00018eb8 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   18eb8:	b480      	push	{r7}
   18eba:	b083      	sub	sp, #12
   18ebc:	af00      	add	r7, sp, #0
   18ebe:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   18ec0:	687b      	ldr	r3, [r7, #4]
   18ec2:	4618      	mov	r0, r3
   18ec4:	370c      	adds	r7, #12
   18ec6:	46bd      	mov	sp, r7
   18ec8:	bc80      	pop	{r7}
   18eca:	4770      	bx	lr

00018ecc <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   18ecc:	b580      	push	{r7, lr}
   18ece:	b082      	sub	sp, #8
   18ed0:	af00      	add	r7, sp, #0
   18ed2:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   18ed4:	687b      	ldr	r3, [r7, #4]
   18ed6:	68da      	ldr	r2, [r3, #12]
   18ed8:	687b      	ldr	r3, [r7, #4]
   18eda:	3310      	adds	r3, #16
   18edc:	4619      	mov	r1, r3
   18ede:	4610      	mov	r0, r2
   18ee0:	4b09      	ldr	r3, [pc, #36]	; (18f08 <_ZN13SPI_Syn_Class4initEv+0x3c>)
   18ee2:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   18ee4:	687b      	ldr	r3, [r7, #4]
   18ee6:	68db      	ldr	r3, [r3, #12]
   18ee8:	4618      	mov	r0, r3
   18eea:	4b08      	ldr	r3, [pc, #32]	; (18f0c <_ZN13SPI_Syn_Class4initEv+0x40>)
   18eec:	4798      	blx	r3
		txBuffer=txStaticBuffer;
   18eee:	687b      	ldr	r3, [r7, #4]
   18ef0:	4a07      	ldr	r2, [pc, #28]	; (18f10 <_ZN13SPI_Syn_Class4initEv+0x44>)
   18ef2:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
   18ef4:	687b      	ldr	r3, [r7, #4]
   18ef6:	4a06      	ldr	r2, [pc, #24]	; (18f10 <_ZN13SPI_Syn_Class4initEv+0x44>)
   18ef8:	609a      	str	r2, [r3, #8]
	ready=true;
   18efa:	687b      	ldr	r3, [r7, #4]
   18efc:	2201      	movs	r2, #1
   18efe:	701a      	strb	r2, [r3, #0]
	
}
   18f00:	bf00      	nop
   18f02:	3708      	adds	r7, #8
   18f04:	46bd      	mov	sp, r7
   18f06:	bd80      	pop	{r7, pc}
   18f08:	00003df9 	.word	0x00003df9
   18f0c:	00003c6d 	.word	0x00003c6d
   18f10:	2000db88 	.word	0x2000db88

00018f14 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   18f14:	b480      	push	{r7}
   18f16:	b083      	sub	sp, #12
   18f18:	af00      	add	r7, sp, #0
   18f1a:	6078      	str	r0, [r7, #4]
   18f1c:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   18f1e:	4a05      	ldr	r2, [pc, #20]	; (18f34 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   18f20:	687b      	ldr	r3, [r7, #4]
   18f22:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   18f24:	687b      	ldr	r3, [r7, #4]
   18f26:	683a      	ldr	r2, [r7, #0]
   18f28:	60da      	str	r2, [r3, #12]
}
   18f2a:	bf00      	nop
   18f2c:	370c      	adds	r7, #12
   18f2e:	46bd      	mov	sp, r7
   18f30:	bc80      	pop	{r7}
   18f32:	4770      	bx	lr
   18f34:	2000db84 	.word	0x2000db84

00018f38 <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
   18f38:	b580      	push	{r7, lr}
   18f3a:	b082      	sub	sp, #8
   18f3c:	af00      	add	r7, sp, #0
   18f3e:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   18f40:	687b      	ldr	r3, [r7, #4]
   18f42:	68da      	ldr	r2, [r3, #12]
   18f44:	687b      	ldr	r3, [r7, #4]
   18f46:	3310      	adds	r3, #16
   18f48:	4619      	mov	r1, r3
   18f4a:	4610      	mov	r0, r2
   18f4c:	4b07      	ldr	r3, [pc, #28]	; (18f6c <_ZN13SPI_Syn_Class6EnableEv+0x34>)
   18f4e:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   18f50:	687b      	ldr	r3, [r7, #4]
   18f52:	68db      	ldr	r3, [r3, #12]
   18f54:	4618      	mov	r0, r3
   18f56:	4b06      	ldr	r3, [pc, #24]	; (18f70 <_ZN13SPI_Syn_Class6EnableEv+0x38>)
   18f58:	4798      	blx	r3
	ready=true;
   18f5a:	687b      	ldr	r3, [r7, #4]
   18f5c:	2201      	movs	r2, #1
   18f5e:	701a      	strb	r2, [r3, #0]
	return 0;
   18f60:	2300      	movs	r3, #0
}
   18f62:	4618      	mov	r0, r3
   18f64:	3708      	adds	r7, #8
   18f66:	46bd      	mov	sp, r7
   18f68:	bd80      	pop	{r7, pc}
   18f6a:	bf00      	nop
   18f6c:	00003df9 	.word	0x00003df9
   18f70:	00003c6d 	.word	0x00003c6d

00018f74 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
   18f74:	b580      	push	{r7, lr}
   18f76:	b086      	sub	sp, #24
   18f78:	af00      	add	r7, sp, #0
   18f7a:	60f8      	str	r0, [r7, #12]
   18f7c:	60b9      	str	r1, [r7, #8]
   18f7e:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   18f80:	68fb      	ldr	r3, [r7, #12]
   18f82:	2201      	movs	r2, #1
   18f84:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
   18f86:	68fb      	ldr	r3, [r7, #12]
   18f88:	691b      	ldr	r3, [r3, #16]
   18f8a:	687a      	ldr	r2, [r7, #4]
   18f8c:	b292      	uxth	r2, r2
   18f8e:	68b9      	ldr	r1, [r7, #8]
   18f90:	4618      	mov	r0, r3
   18f92:	4b08      	ldr	r3, [pc, #32]	; (18fb4 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
   18f94:	4798      	blx	r3
   18f96:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   18f98:	697b      	ldr	r3, [r7, #20]
   18f9a:	2b00      	cmp	r3, #0
   18f9c:	bf14      	ite	ne
   18f9e:	2301      	movne	r3, #1
   18fa0:	2300      	moveq	r3, #0
   18fa2:	b2da      	uxtb	r2, r3
   18fa4:	68fb      	ldr	r3, [r7, #12]
   18fa6:	761a      	strb	r2, [r3, #24]
	 return w;
   18fa8:	697b      	ldr	r3, [r7, #20]
	
}
   18faa:	4618      	mov	r0, r3
   18fac:	3718      	adds	r7, #24
   18fae:	46bd      	mov	sp, r7
   18fb0:	bd80      	pop	{r7, pc}
   18fb2:	bf00      	nop
   18fb4:	00017fe9 	.word	0x00017fe9

00018fb8 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
   18fb8:	b580      	push	{r7, lr}
   18fba:	b086      	sub	sp, #24
   18fbc:	af00      	add	r7, sp, #0
   18fbe:	60f8      	str	r0, [r7, #12]
   18fc0:	60b9      	str	r1, [r7, #8]
   18fc2:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   18fc4:	68fb      	ldr	r3, [r7, #12]
   18fc6:	2201      	movs	r2, #1
   18fc8:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
   18fca:	68fb      	ldr	r3, [r7, #12]
   18fcc:	691b      	ldr	r3, [r3, #16]
   18fce:	687a      	ldr	r2, [r7, #4]
   18fd0:	b292      	uxth	r2, r2
   18fd2:	68b9      	ldr	r1, [r7, #8]
   18fd4:	4618      	mov	r0, r3
   18fd6:	4b08      	ldr	r3, [pc, #32]	; (18ff8 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
   18fd8:	4798      	blx	r3
   18fda:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   18fdc:	697b      	ldr	r3, [r7, #20]
   18fde:	2b00      	cmp	r3, #0
   18fe0:	bf14      	ite	ne
   18fe2:	2301      	movne	r3, #1
   18fe4:	2300      	moveq	r3, #0
   18fe6:	b2da      	uxtb	r2, r3
   18fe8:	68fb      	ldr	r3, [r7, #12]
   18fea:	765a      	strb	r2, [r3, #25]
	return  r;
   18fec:	697b      	ldr	r3, [r7, #20]
}
   18fee:	4618      	mov	r0, r3
   18ff0:	3718      	adds	r7, #24
   18ff2:	46bd      	mov	sp, r7
   18ff4:	bd80      	pop	{r7, pc}
   18ff6:	bf00      	nop
   18ff8:	00018039 	.word	0x00018039

00018ffc <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
   18ffc:	b580      	push	{r7, lr}
   18ffe:	b082      	sub	sp, #8
   19000:	af00      	add	r7, sp, #0
   19002:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   19004:	687b      	ldr	r3, [r7, #4]
   19006:	68db      	ldr	r3, [r3, #12]
   19008:	4618      	mov	r0, r3
   1900a:	4b03      	ldr	r3, [pc, #12]	; (19018 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
   1900c:	4798      	blx	r3
	
}
   1900e:	bf00      	nop
   19010:	3708      	adds	r7, #8
   19012:	46bd      	mov	sp, r7
   19014:	bd80      	pop	{r7, pc}
   19016:	bf00      	nop
   19018:	00003ca9 	.word	0x00003ca9

0001901c <hri_port_set_DIR_reg>:
{
   1901c:	b480      	push	{r7}
   1901e:	b085      	sub	sp, #20
   19020:	af00      	add	r7, sp, #0
   19022:	60f8      	str	r0, [r7, #12]
   19024:	460b      	mov	r3, r1
   19026:	607a      	str	r2, [r7, #4]
   19028:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   1902a:	7afb      	ldrb	r3, [r7, #11]
   1902c:	68fa      	ldr	r2, [r7, #12]
   1902e:	01db      	lsls	r3, r3, #7
   19030:	4413      	add	r3, r2
   19032:	3308      	adds	r3, #8
   19034:	687a      	ldr	r2, [r7, #4]
   19036:	601a      	str	r2, [r3, #0]
}
   19038:	bf00      	nop
   1903a:	3714      	adds	r7, #20
   1903c:	46bd      	mov	sp, r7
   1903e:	bc80      	pop	{r7}
   19040:	4770      	bx	lr

00019042 <hri_port_clear_DIR_reg>:
{
   19042:	b480      	push	{r7}
   19044:	b085      	sub	sp, #20
   19046:	af00      	add	r7, sp, #0
   19048:	60f8      	str	r0, [r7, #12]
   1904a:	460b      	mov	r3, r1
   1904c:	607a      	str	r2, [r7, #4]
   1904e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   19050:	7afb      	ldrb	r3, [r7, #11]
   19052:	68fa      	ldr	r2, [r7, #12]
   19054:	01db      	lsls	r3, r3, #7
   19056:	4413      	add	r3, r2
   19058:	3304      	adds	r3, #4
   1905a:	687a      	ldr	r2, [r7, #4]
   1905c:	601a      	str	r2, [r3, #0]
}
   1905e:	bf00      	nop
   19060:	3714      	adds	r7, #20
   19062:	46bd      	mov	sp, r7
   19064:	bc80      	pop	{r7}
   19066:	4770      	bx	lr

00019068 <hri_port_set_OUT_reg>:
{
   19068:	b480      	push	{r7}
   1906a:	b085      	sub	sp, #20
   1906c:	af00      	add	r7, sp, #0
   1906e:	60f8      	str	r0, [r7, #12]
   19070:	460b      	mov	r3, r1
   19072:	607a      	str	r2, [r7, #4]
   19074:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   19076:	7afb      	ldrb	r3, [r7, #11]
   19078:	68fa      	ldr	r2, [r7, #12]
   1907a:	01db      	lsls	r3, r3, #7
   1907c:	4413      	add	r3, r2
   1907e:	3318      	adds	r3, #24
   19080:	687a      	ldr	r2, [r7, #4]
   19082:	601a      	str	r2, [r3, #0]
}
   19084:	bf00      	nop
   19086:	3714      	adds	r7, #20
   19088:	46bd      	mov	sp, r7
   1908a:	bc80      	pop	{r7}
   1908c:	4770      	bx	lr

0001908e <hri_port_clear_OUT_reg>:
{
   1908e:	b480      	push	{r7}
   19090:	b085      	sub	sp, #20
   19092:	af00      	add	r7, sp, #0
   19094:	60f8      	str	r0, [r7, #12]
   19096:	460b      	mov	r3, r1
   19098:	607a      	str	r2, [r7, #4]
   1909a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   1909c:	7afb      	ldrb	r3, [r7, #11]
   1909e:	68fa      	ldr	r2, [r7, #12]
   190a0:	01db      	lsls	r3, r3, #7
   190a2:	4413      	add	r3, r2
   190a4:	3314      	adds	r3, #20
   190a6:	687a      	ldr	r2, [r7, #4]
   190a8:	601a      	str	r2, [r3, #0]
}
   190aa:	bf00      	nop
   190ac:	3714      	adds	r7, #20
   190ae:	46bd      	mov	sp, r7
   190b0:	bc80      	pop	{r7}
   190b2:	4770      	bx	lr

000190b4 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   190b4:	b480      	push	{r7}
   190b6:	b085      	sub	sp, #20
   190b8:	af00      	add	r7, sp, #0
   190ba:	6078      	str	r0, [r7, #4]
   190bc:	4608      	mov	r0, r1
   190be:	4611      	mov	r1, r2
   190c0:	461a      	mov	r2, r3
   190c2:	4603      	mov	r3, r0
   190c4:	70fb      	strb	r3, [r7, #3]
   190c6:	460b      	mov	r3, r1
   190c8:	70bb      	strb	r3, [r7, #2]
   190ca:	4613      	mov	r3, r2
   190cc:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   190ce:	78fa      	ldrb	r2, [r7, #3]
   190d0:	78bb      	ldrb	r3, [r7, #2]
   190d2:	6879      	ldr	r1, [r7, #4]
   190d4:	01d2      	lsls	r2, r2, #7
   190d6:	440a      	add	r2, r1
   190d8:	4413      	add	r3, r2
   190da:	3330      	adds	r3, #48	; 0x30
   190dc:	781b      	ldrb	r3, [r3, #0]
   190de:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   190e0:	7bfb      	ldrb	r3, [r7, #15]
   190e2:	f023 030f 	bic.w	r3, r3, #15
   190e6:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   190e8:	787b      	ldrb	r3, [r7, #1]
   190ea:	f003 030f 	and.w	r3, r3, #15
   190ee:	b2da      	uxtb	r2, r3
   190f0:	7bfb      	ldrb	r3, [r7, #15]
   190f2:	4313      	orrs	r3, r2
   190f4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   190f6:	78fa      	ldrb	r2, [r7, #3]
   190f8:	78bb      	ldrb	r3, [r7, #2]
   190fa:	6879      	ldr	r1, [r7, #4]
   190fc:	01d2      	lsls	r2, r2, #7
   190fe:	440a      	add	r2, r1
   19100:	4413      	add	r3, r2
   19102:	3330      	adds	r3, #48	; 0x30
   19104:	7bfa      	ldrb	r2, [r7, #15]
   19106:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   19108:	bf00      	nop
   1910a:	3714      	adds	r7, #20
   1910c:	46bd      	mov	sp, r7
   1910e:	bc80      	pop	{r7}
   19110:	4770      	bx	lr

00019112 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   19112:	b480      	push	{r7}
   19114:	b085      	sub	sp, #20
   19116:	af00      	add	r7, sp, #0
   19118:	6078      	str	r0, [r7, #4]
   1911a:	4608      	mov	r0, r1
   1911c:	4611      	mov	r1, r2
   1911e:	461a      	mov	r2, r3
   19120:	4603      	mov	r3, r0
   19122:	70fb      	strb	r3, [r7, #3]
   19124:	460b      	mov	r3, r1
   19126:	70bb      	strb	r3, [r7, #2]
   19128:	4613      	mov	r3, r2
   1912a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   1912c:	78fa      	ldrb	r2, [r7, #3]
   1912e:	78bb      	ldrb	r3, [r7, #2]
   19130:	6879      	ldr	r1, [r7, #4]
   19132:	01d2      	lsls	r2, r2, #7
   19134:	440a      	add	r2, r1
   19136:	4413      	add	r3, r2
   19138:	3330      	adds	r3, #48	; 0x30
   1913a:	781b      	ldrb	r3, [r3, #0]
   1913c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   1913e:	7bfb      	ldrb	r3, [r7, #15]
   19140:	f003 030f 	and.w	r3, r3, #15
   19144:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   19146:	787b      	ldrb	r3, [r7, #1]
   19148:	011b      	lsls	r3, r3, #4
   1914a:	b2da      	uxtb	r2, r3
   1914c:	7bfb      	ldrb	r3, [r7, #15]
   1914e:	4313      	orrs	r3, r2
   19150:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   19152:	78fa      	ldrb	r2, [r7, #3]
   19154:	78bb      	ldrb	r3, [r7, #2]
   19156:	6879      	ldr	r1, [r7, #4]
   19158:	01d2      	lsls	r2, r2, #7
   1915a:	440a      	add	r2, r1
   1915c:	4413      	add	r3, r2
   1915e:	3330      	adds	r3, #48	; 0x30
   19160:	7bfa      	ldrb	r2, [r7, #15]
   19162:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   19164:	bf00      	nop
   19166:	3714      	adds	r7, #20
   19168:	46bd      	mov	sp, r7
   1916a:	bc80      	pop	{r7}
   1916c:	4770      	bx	lr

0001916e <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   1916e:	b480      	push	{r7}
   19170:	b085      	sub	sp, #20
   19172:	af00      	add	r7, sp, #0
   19174:	6078      	str	r0, [r7, #4]
   19176:	4608      	mov	r0, r1
   19178:	4611      	mov	r1, r2
   1917a:	461a      	mov	r2, r3
   1917c:	4603      	mov	r3, r0
   1917e:	70fb      	strb	r3, [r7, #3]
   19180:	460b      	mov	r3, r1
   19182:	70bb      	strb	r3, [r7, #2]
   19184:	4613      	mov	r3, r2
   19186:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   19188:	78fa      	ldrb	r2, [r7, #3]
   1918a:	78bb      	ldrb	r3, [r7, #2]
   1918c:	6879      	ldr	r1, [r7, #4]
   1918e:	01d2      	lsls	r2, r2, #7
   19190:	440a      	add	r2, r1
   19192:	4413      	add	r3, r2
   19194:	3340      	adds	r3, #64	; 0x40
   19196:	781b      	ldrb	r3, [r3, #0]
   19198:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   1919a:	7bfb      	ldrb	r3, [r7, #15]
   1919c:	f023 0301 	bic.w	r3, r3, #1
   191a0:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   191a2:	787a      	ldrb	r2, [r7, #1]
   191a4:	7bfb      	ldrb	r3, [r7, #15]
   191a6:	4313      	orrs	r3, r2
   191a8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   191aa:	78fa      	ldrb	r2, [r7, #3]
   191ac:	78bb      	ldrb	r3, [r7, #2]
   191ae:	6879      	ldr	r1, [r7, #4]
   191b0:	01d2      	lsls	r2, r2, #7
   191b2:	440a      	add	r2, r1
   191b4:	4413      	add	r3, r2
   191b6:	3340      	adds	r3, #64	; 0x40
   191b8:	7bfa      	ldrb	r2, [r7, #15]
   191ba:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   191bc:	bf00      	nop
   191be:	3714      	adds	r7, #20
   191c0:	46bd      	mov	sp, r7
   191c2:	bc80      	pop	{r7}
   191c4:	4770      	bx	lr

000191c6 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   191c6:	b480      	push	{r7}
   191c8:	b085      	sub	sp, #20
   191ca:	af00      	add	r7, sp, #0
   191cc:	60f8      	str	r0, [r7, #12]
   191ce:	460b      	mov	r3, r1
   191d0:	607a      	str	r2, [r7, #4]
   191d2:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   191d4:	7afb      	ldrb	r3, [r7, #11]
   191d6:	68fa      	ldr	r2, [r7, #12]
   191d8:	01db      	lsls	r3, r3, #7
   191da:	4413      	add	r3, r2
   191dc:	3328      	adds	r3, #40	; 0x28
   191de:	687a      	ldr	r2, [r7, #4]
   191e0:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   191e2:	bf00      	nop
   191e4:	3714      	adds	r7, #20
   191e6:	46bd      	mov	sp, r7
   191e8:	bc80      	pop	{r7}
   191ea:	4770      	bx	lr

000191ec <_gpio_set_direction>:
{
   191ec:	b580      	push	{r7, lr}
   191ee:	b082      	sub	sp, #8
   191f0:	af00      	add	r7, sp, #0
   191f2:	4603      	mov	r3, r0
   191f4:	6039      	str	r1, [r7, #0]
   191f6:	71fb      	strb	r3, [r7, #7]
   191f8:	4613      	mov	r3, r2
   191fa:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   191fc:	79bb      	ldrb	r3, [r7, #6]
   191fe:	2b01      	cmp	r3, #1
   19200:	d01c      	beq.n	1923c <_gpio_set_direction+0x50>
   19202:	2b02      	cmp	r3, #2
   19204:	d037      	beq.n	19276 <_gpio_set_direction+0x8a>
   19206:	2b00      	cmp	r3, #0
   19208:	d14e      	bne.n	192a8 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   1920a:	79fb      	ldrb	r3, [r7, #7]
   1920c:	683a      	ldr	r2, [r7, #0]
   1920e:	4619      	mov	r1, r3
   19210:	482a      	ldr	r0, [pc, #168]	; (192bc <_gpio_set_direction+0xd0>)
   19212:	4b2b      	ldr	r3, [pc, #172]	; (192c0 <_gpio_set_direction+0xd4>)
   19214:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   19216:	683b      	ldr	r3, [r7, #0]
   19218:	b29b      	uxth	r3, r3
   1921a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   1921e:	79fb      	ldrb	r3, [r7, #7]
   19220:	4619      	mov	r1, r3
   19222:	4826      	ldr	r0, [pc, #152]	; (192bc <_gpio_set_direction+0xd0>)
   19224:	4b27      	ldr	r3, [pc, #156]	; (192c4 <_gpio_set_direction+0xd8>)
   19226:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   19228:	683b      	ldr	r3, [r7, #0]
   1922a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   1922c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   19230:	79fb      	ldrb	r3, [r7, #7]
   19232:	4619      	mov	r1, r3
   19234:	4821      	ldr	r0, [pc, #132]	; (192bc <_gpio_set_direction+0xd0>)
   19236:	4b23      	ldr	r3, [pc, #140]	; (192c4 <_gpio_set_direction+0xd8>)
   19238:	4798      	blx	r3
		break;
   1923a:	e03a      	b.n	192b2 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   1923c:	79fb      	ldrb	r3, [r7, #7]
   1923e:	683a      	ldr	r2, [r7, #0]
   19240:	4619      	mov	r1, r3
   19242:	481e      	ldr	r0, [pc, #120]	; (192bc <_gpio_set_direction+0xd0>)
   19244:	4b1e      	ldr	r3, [pc, #120]	; (192c0 <_gpio_set_direction+0xd4>)
   19246:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   19248:	683b      	ldr	r3, [r7, #0]
   1924a:	b29b      	uxth	r3, r3
   1924c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   19250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   19254:	79f9      	ldrb	r1, [r7, #7]
   19256:	461a      	mov	r2, r3
   19258:	4818      	ldr	r0, [pc, #96]	; (192bc <_gpio_set_direction+0xd0>)
   1925a:	4b1a      	ldr	r3, [pc, #104]	; (192c4 <_gpio_set_direction+0xd8>)
   1925c:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   1925e:	683b      	ldr	r3, [r7, #0]
   19260:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   19262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   19266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   1926a:	79f9      	ldrb	r1, [r7, #7]
   1926c:	461a      	mov	r2, r3
   1926e:	4813      	ldr	r0, [pc, #76]	; (192bc <_gpio_set_direction+0xd0>)
   19270:	4b14      	ldr	r3, [pc, #80]	; (192c4 <_gpio_set_direction+0xd8>)
   19272:	4798      	blx	r3
		break;
   19274:	e01d      	b.n	192b2 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   19276:	79fb      	ldrb	r3, [r7, #7]
   19278:	683a      	ldr	r2, [r7, #0]
   1927a:	4619      	mov	r1, r3
   1927c:	480f      	ldr	r0, [pc, #60]	; (192bc <_gpio_set_direction+0xd0>)
   1927e:	4b12      	ldr	r3, [pc, #72]	; (192c8 <_gpio_set_direction+0xdc>)
   19280:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   19282:	683b      	ldr	r3, [r7, #0]
   19284:	b29b      	uxth	r3, r3
   19286:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   1928a:	79fb      	ldrb	r3, [r7, #7]
   1928c:	4619      	mov	r1, r3
   1928e:	480b      	ldr	r0, [pc, #44]	; (192bc <_gpio_set_direction+0xd0>)
   19290:	4b0c      	ldr	r3, [pc, #48]	; (192c4 <_gpio_set_direction+0xd8>)
   19292:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   19294:	683b      	ldr	r3, [r7, #0]
   19296:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   19298:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   1929c:	79fb      	ldrb	r3, [r7, #7]
   1929e:	4619      	mov	r1, r3
   192a0:	4806      	ldr	r0, [pc, #24]	; (192bc <_gpio_set_direction+0xd0>)
   192a2:	4b08      	ldr	r3, [pc, #32]	; (192c4 <_gpio_set_direction+0xd8>)
   192a4:	4798      	blx	r3
		break;
   192a6:	e004      	b.n	192b2 <_gpio_set_direction+0xc6>
		ASSERT(false);
   192a8:	2246      	movs	r2, #70	; 0x46
   192aa:	4908      	ldr	r1, [pc, #32]	; (192cc <_gpio_set_direction+0xe0>)
   192ac:	2000      	movs	r0, #0
   192ae:	4b08      	ldr	r3, [pc, #32]	; (192d0 <_gpio_set_direction+0xe4>)
   192b0:	4798      	blx	r3
}
   192b2:	bf00      	nop
   192b4:	3708      	adds	r7, #8
   192b6:	46bd      	mov	sp, r7
   192b8:	bd80      	pop	{r7, pc}
   192ba:	bf00      	nop
   192bc:	41008000 	.word	0x41008000
   192c0:	00019043 	.word	0x00019043
   192c4:	000191c7 	.word	0x000191c7
   192c8:	0001901d 	.word	0x0001901d
   192cc:	0001bb98 	.word	0x0001bb98
   192d0:	00004c81 	.word	0x00004c81

000192d4 <_gpio_set_level>:
{
   192d4:	b580      	push	{r7, lr}
   192d6:	b082      	sub	sp, #8
   192d8:	af00      	add	r7, sp, #0
   192da:	4603      	mov	r3, r0
   192dc:	6039      	str	r1, [r7, #0]
   192de:	71fb      	strb	r3, [r7, #7]
   192e0:	4613      	mov	r3, r2
   192e2:	71bb      	strb	r3, [r7, #6]
	if (level) {
   192e4:	79bb      	ldrb	r3, [r7, #6]
   192e6:	2b00      	cmp	r3, #0
   192e8:	d006      	beq.n	192f8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   192ea:	79fb      	ldrb	r3, [r7, #7]
   192ec:	683a      	ldr	r2, [r7, #0]
   192ee:	4619      	mov	r1, r3
   192f0:	4806      	ldr	r0, [pc, #24]	; (1930c <_gpio_set_level+0x38>)
   192f2:	4b07      	ldr	r3, [pc, #28]	; (19310 <_gpio_set_level+0x3c>)
   192f4:	4798      	blx	r3
}
   192f6:	e005      	b.n	19304 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   192f8:	79fb      	ldrb	r3, [r7, #7]
   192fa:	683a      	ldr	r2, [r7, #0]
   192fc:	4619      	mov	r1, r3
   192fe:	4803      	ldr	r0, [pc, #12]	; (1930c <_gpio_set_level+0x38>)
   19300:	4b04      	ldr	r3, [pc, #16]	; (19314 <_gpio_set_level+0x40>)
   19302:	4798      	blx	r3
}
   19304:	bf00      	nop
   19306:	3708      	adds	r7, #8
   19308:	46bd      	mov	sp, r7
   1930a:	bd80      	pop	{r7, pc}
   1930c:	41008000 	.word	0x41008000
   19310:	00019069 	.word	0x00019069
   19314:	0001908f 	.word	0x0001908f

00019318 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   19318:	b590      	push	{r4, r7, lr}
   1931a:	b085      	sub	sp, #20
   1931c:	af00      	add	r7, sp, #0
   1931e:	6078      	str	r0, [r7, #4]
   19320:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   19322:	687b      	ldr	r3, [r7, #4]
   19324:	095b      	lsrs	r3, r3, #5
   19326:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   19328:	687b      	ldr	r3, [r7, #4]
   1932a:	b2db      	uxtb	r3, r3
   1932c:	f003 031f 	and.w	r3, r3, #31
   19330:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   19332:	683b      	ldr	r3, [r7, #0]
   19334:	f1b3 3fff 	cmp.w	r3, #4294967295
   19338:	d106      	bne.n	19348 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   1933a:	7bba      	ldrb	r2, [r7, #14]
   1933c:	7bf9      	ldrb	r1, [r7, #15]
   1933e:	2300      	movs	r3, #0
   19340:	4812      	ldr	r0, [pc, #72]	; (1938c <_gpio_set_pin_function+0x74>)
   19342:	4c13      	ldr	r4, [pc, #76]	; (19390 <_gpio_set_pin_function+0x78>)
   19344:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   19346:	e01d      	b.n	19384 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   19348:	7bba      	ldrb	r2, [r7, #14]
   1934a:	7bf9      	ldrb	r1, [r7, #15]
   1934c:	2301      	movs	r3, #1
   1934e:	480f      	ldr	r0, [pc, #60]	; (1938c <_gpio_set_pin_function+0x74>)
   19350:	4c0f      	ldr	r4, [pc, #60]	; (19390 <_gpio_set_pin_function+0x78>)
   19352:	47a0      	blx	r4
		if (pin & 1) {
   19354:	7bbb      	ldrb	r3, [r7, #14]
   19356:	f003 0301 	and.w	r3, r3, #1
   1935a:	2b00      	cmp	r3, #0
   1935c:	d009      	beq.n	19372 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   1935e:	7bbb      	ldrb	r3, [r7, #14]
   19360:	105b      	asrs	r3, r3, #1
   19362:	b2da      	uxtb	r2, r3
   19364:	683b      	ldr	r3, [r7, #0]
   19366:	b2db      	uxtb	r3, r3
   19368:	7bf9      	ldrb	r1, [r7, #15]
   1936a:	4808      	ldr	r0, [pc, #32]	; (1938c <_gpio_set_pin_function+0x74>)
   1936c:	4c09      	ldr	r4, [pc, #36]	; (19394 <_gpio_set_pin_function+0x7c>)
   1936e:	47a0      	blx	r4
}
   19370:	e008      	b.n	19384 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   19372:	7bbb      	ldrb	r3, [r7, #14]
   19374:	105b      	asrs	r3, r3, #1
   19376:	b2da      	uxtb	r2, r3
   19378:	683b      	ldr	r3, [r7, #0]
   1937a:	b2db      	uxtb	r3, r3
   1937c:	7bf9      	ldrb	r1, [r7, #15]
   1937e:	4803      	ldr	r0, [pc, #12]	; (1938c <_gpio_set_pin_function+0x74>)
   19380:	4c05      	ldr	r4, [pc, #20]	; (19398 <_gpio_set_pin_function+0x80>)
   19382:	47a0      	blx	r4
}
   19384:	bf00      	nop
   19386:	3714      	adds	r7, #20
   19388:	46bd      	mov	sp, r7
   1938a:	bd90      	pop	{r4, r7, pc}
   1938c:	41008000 	.word	0x41008000
   19390:	0001916f 	.word	0x0001916f
   19394:	00019113 	.word	0x00019113
   19398:	000190b5 	.word	0x000190b5

0001939c <gpio_set_pin_function>:
{
   1939c:	b580      	push	{r7, lr}
   1939e:	b082      	sub	sp, #8
   193a0:	af00      	add	r7, sp, #0
   193a2:	6078      	str	r0, [r7, #4]
   193a4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   193a6:	6839      	ldr	r1, [r7, #0]
   193a8:	6878      	ldr	r0, [r7, #4]
   193aa:	4b03      	ldr	r3, [pc, #12]	; (193b8 <gpio_set_pin_function+0x1c>)
   193ac:	4798      	blx	r3
}
   193ae:	bf00      	nop
   193b0:	3708      	adds	r7, #8
   193b2:	46bd      	mov	sp, r7
   193b4:	bd80      	pop	{r7, pc}
   193b6:	bf00      	nop
   193b8:	00019319 	.word	0x00019319

000193bc <gpio_set_pin_direction>:
{
   193bc:	b580      	push	{r7, lr}
   193be:	b082      	sub	sp, #8
   193c0:	af00      	add	r7, sp, #0
   193c2:	4603      	mov	r3, r0
   193c4:	460a      	mov	r2, r1
   193c6:	71fb      	strb	r3, [r7, #7]
   193c8:	4613      	mov	r3, r2
   193ca:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   193cc:	79fb      	ldrb	r3, [r7, #7]
   193ce:	115b      	asrs	r3, r3, #5
   193d0:	b2d8      	uxtb	r0, r3
   193d2:	79fb      	ldrb	r3, [r7, #7]
   193d4:	f003 031f 	and.w	r3, r3, #31
   193d8:	2201      	movs	r2, #1
   193da:	fa02 f303 	lsl.w	r3, r2, r3
   193de:	79ba      	ldrb	r2, [r7, #6]
   193e0:	4619      	mov	r1, r3
   193e2:	4b03      	ldr	r3, [pc, #12]	; (193f0 <gpio_set_pin_direction+0x34>)
   193e4:	4798      	blx	r3
}
   193e6:	bf00      	nop
   193e8:	3708      	adds	r7, #8
   193ea:	46bd      	mov	sp, r7
   193ec:	bd80      	pop	{r7, pc}
   193ee:	bf00      	nop
   193f0:	000191ed 	.word	0x000191ed

000193f4 <gpio_set_pin_level>:
{
   193f4:	b580      	push	{r7, lr}
   193f6:	b082      	sub	sp, #8
   193f8:	af00      	add	r7, sp, #0
   193fa:	4603      	mov	r3, r0
   193fc:	460a      	mov	r2, r1
   193fe:	71fb      	strb	r3, [r7, #7]
   19400:	4613      	mov	r3, r2
   19402:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   19404:	79fb      	ldrb	r3, [r7, #7]
   19406:	115b      	asrs	r3, r3, #5
   19408:	b2d8      	uxtb	r0, r3
   1940a:	79fb      	ldrb	r3, [r7, #7]
   1940c:	f003 031f 	and.w	r3, r3, #31
   19410:	2201      	movs	r2, #1
   19412:	fa02 f303 	lsl.w	r3, r2, r3
   19416:	79ba      	ldrb	r2, [r7, #6]
   19418:	4619      	mov	r1, r3
   1941a:	4b03      	ldr	r3, [pc, #12]	; (19428 <gpio_set_pin_level+0x34>)
   1941c:	4798      	blx	r3
}
   1941e:	bf00      	nop
   19420:	3708      	adds	r7, #8
   19422:	46bd      	mov	sp, r7
   19424:	bd80      	pop	{r7, pc}
   19426:	bf00      	nop
   19428:	000192d5 	.word	0x000192d5

0001942c <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   1942c:	b580      	push	{r7, lr}
   1942e:	b082      	sub	sp, #8
   19430:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   19432:	2100      	movs	r1, #0
   19434:	2008      	movs	r0, #8
   19436:	4b24      	ldr	r3, [pc, #144]	; (194c8 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   19438:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   1943a:	2100      	movs	r1, #0
   1943c:	202b      	movs	r0, #43	; 0x2b
   1943e:	4b22      	ldr	r3, [pc, #136]	; (194c8 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   19440:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   19442:	2100      	movs	r1, #0
   19444:	202a      	movs	r0, #42	; 0x2a
   19446:	4b20      	ldr	r3, [pc, #128]	; (194c8 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   19448:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   1944a:	2102      	movs	r1, #2
   1944c:	2008      	movs	r0, #8
   1944e:	4b1f      	ldr	r3, [pc, #124]	; (194cc <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   19450:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   19452:	2102      	movs	r1, #2
   19454:	202b      	movs	r0, #43	; 0x2b
   19456:	4b1d      	ldr	r3, [pc, #116]	; (194cc <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   19458:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   1945a:	2102      	movs	r1, #2
   1945c:	202a      	movs	r0, #42	; 0x2a
   1945e:	4b1b      	ldr	r3, [pc, #108]	; (194cc <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   19460:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   19462:	2101      	movs	r1, #1
   19464:	2008      	movs	r0, #8
   19466:	4b1a      	ldr	r3, [pc, #104]	; (194d0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   19468:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   1946a:	2100      	movs	r1, #0
   1946c:	202b      	movs	r0, #43	; 0x2b
   1946e:	4b18      	ldr	r3, [pc, #96]	; (194d0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   19470:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   19472:	2100      	movs	r1, #0
   19474:	202a      	movs	r0, #42	; 0x2a
   19476:	4b16      	ldr	r3, [pc, #88]	; (194d0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   19478:	4798      	blx	r3

	delay_us(1);
   1947a:	2001      	movs	r0, #1
   1947c:	4b15      	ldr	r3, [pc, #84]	; (194d4 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1947e:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   19480:	2300      	movs	r3, #0
   19482:	607b      	str	r3, [r7, #4]
   19484:	687b      	ldr	r3, [r7, #4]
   19486:	2b06      	cmp	r3, #6
   19488:	dc11      	bgt.n	194ae <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   1948a:	2101      	movs	r1, #1
   1948c:	202a      	movs	r0, #42	; 0x2a
   1948e:	4b10      	ldr	r3, [pc, #64]	; (194d0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   19490:	4798      	blx	r3
		delay_us(1);
   19492:	2001      	movs	r0, #1
   19494:	4b0f      	ldr	r3, [pc, #60]	; (194d4 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   19496:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   19498:	2100      	movs	r1, #0
   1949a:	202a      	movs	r0, #42	; 0x2a
   1949c:	4b0c      	ldr	r3, [pc, #48]	; (194d0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   1949e:	4798      	blx	r3
		delay_us(1);
   194a0:	2001      	movs	r0, #1
   194a2:	4b0c      	ldr	r3, [pc, #48]	; (194d4 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   194a4:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   194a6:	687b      	ldr	r3, [r7, #4]
   194a8:	3301      	adds	r3, #1
   194aa:	607b      	str	r3, [r7, #4]
   194ac:	e7ea      	b.n	19484 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   194ae:	2101      	movs	r1, #1
   194b0:	202b      	movs	r0, #43	; 0x2b
   194b2:	4b07      	ldr	r3, [pc, #28]	; (194d0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   194b4:	4798      	blx	r3
	delay_us(1);
   194b6:	2001      	movs	r0, #1
   194b8:	4b06      	ldr	r3, [pc, #24]	; (194d4 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   194ba:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   194bc:	4b06      	ldr	r3, [pc, #24]	; (194d8 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   194be:	4798      	blx	r3
}
   194c0:	bf00      	nop
   194c2:	3708      	adds	r7, #8
   194c4:	46bd      	mov	sp, r7
   194c6:	bd80      	pop	{r7, pc}
   194c8:	0001939d 	.word	0x0001939d
   194cc:	000193bd 	.word	0x000193bd
   194d0:	000193f5 	.word	0x000193f5
   194d4:	000035f1 	.word	0x000035f1
   194d8:	000022e9 	.word	0x000022e9

000194dc <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
   194dc:	b480      	push	{r7}
   194de:	b083      	sub	sp, #12
   194e0:	af00      	add	r7, sp, #0
   194e2:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
   194e4:	687b      	ldr	r3, [r7, #4]
   194e6:	4618      	mov	r0, r3
   194e8:	370c      	adds	r7, #12
   194ea:	46bd      	mov	sp, r7
   194ec:	bc80      	pop	{r7}
   194ee:	4770      	bx	lr

000194f0 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   194f0:	b480      	push	{r7}
   194f2:	b083      	sub	sp, #12
   194f4:	af00      	add	r7, sp, #0
   194f6:	6078      	str	r0, [r7, #4]
   194f8:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   194fa:	687b      	ldr	r3, [r7, #4]
   194fc:	683a      	ldr	r2, [r7, #0]
   194fe:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   19500:	687b      	ldr	r3, [r7, #4]
   19502:	4a04      	ldr	r2, [pc, #16]	; (19514 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   19504:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   19508:	687b      	ldr	r3, [r7, #4]
   1950a:	4618      	mov	r0, r3
   1950c:	370c      	adds	r7, #12
   1950e:	46bd      	mov	sp, r7
   19510:	bc80      	pop	{r7}
   19512:	4770      	bx	lr
   19514:	001fff00 	.word	0x001fff00

00019518 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   19518:	b480      	push	{r7}
   1951a:	b083      	sub	sp, #12
   1951c:	af00      	add	r7, sp, #0
   1951e:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   19520:	687b      	ldr	r3, [r7, #4]
   19522:	4618      	mov	r0, r3
   19524:	370c      	adds	r7, #12
   19526:	46bd      	mov	sp, r7
   19528:	bc80      	pop	{r7}
   1952a:	4770      	bx	lr

0001952c <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   1952c:	b580      	push	{r7, lr}
   1952e:	b082      	sub	sp, #8
   19530:	af00      	add	r7, sp, #0
   19532:	6078      	str	r0, [r7, #4]
	xferDone=false;
   19534:	687b      	ldr	r3, [r7, #4]
   19536:	2200      	movs	r2, #0
   19538:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   1953a:	6878      	ldr	r0, [r7, #4]
   1953c:	4b04      	ldr	r3, [pc, #16]	; (19550 <_ZN13N25Q256_Class4InitEv+0x24>)
   1953e:	4798      	blx	r3
	return SelfTest();
   19540:	6878      	ldr	r0, [r7, #4]
   19542:	4b04      	ldr	r3, [pc, #16]	; (19554 <_ZN13N25Q256_Class4InitEv+0x28>)
   19544:	4798      	blx	r3
   19546:	4603      	mov	r3, r0
}
   19548:	4618      	mov	r0, r3
   1954a:	3708      	adds	r7, #8
   1954c:	46bd      	mov	sp, r7
   1954e:	bd80      	pop	{r7, pc}
   19550:	00019559 	.word	0x00019559
   19554:	000196f5 	.word	0x000196f5

00019558 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   19558:	b590      	push	{r4, r7, lr}
   1955a:	b083      	sub	sp, #12
   1955c:	af00      	add	r7, sp, #0
   1955e:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   19560:	687b      	ldr	r3, [r7, #4]
   19562:	685b      	ldr	r3, [r3, #4]
   19564:	4618      	mov	r0, r3
   19566:	4b08      	ldr	r3, [pc, #32]	; (19588 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   19568:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   1956a:	687b      	ldr	r3, [r7, #4]
   1956c:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   1956e:	2300      	movs	r3, #0
   19570:	4a06      	ldr	r2, [pc, #24]	; (1958c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   19572:	4807      	ldr	r0, [pc, #28]	; (19590 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   19574:	4c07      	ldr	r4, [pc, #28]	; (19594 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   19576:	47a0      	blx	r4
   19578:	4602      	mov	r2, r0
   1957a:	687b      	ldr	r3, [r7, #4]
   1957c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   19580:	bf00      	nop
   19582:	370c      	adds	r7, #12
   19584:	46bd      	mov	sp, r7
   19586:	bd90      	pop	{r4, r7, pc}
   19588:	00003b29 	.word	0x00003b29
   1958c:	0001942d 	.word	0x0001942d
   19590:	2000dbcc 	.word	0x2000dbcc
   19594:	0000d499 	.word	0x0000d499

00019598 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   19598:	b580      	push	{r7, lr}
   1959a:	b084      	sub	sp, #16
   1959c:	af00      	add	r7, sp, #0
   1959e:	6078      	str	r0, [r7, #4]
   195a0:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   195a2:	687b      	ldr	r3, [r7, #4]
   195a4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   195a8:	685b      	ldr	r3, [r3, #4]
   195aa:	689b      	ldr	r3, [r3, #8]
   195ac:	687a      	ldr	r2, [r7, #4]
   195ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   195b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   195b6:	6839      	ldr	r1, [r7, #0]
   195b8:	4798      	blx	r3
   195ba:	4603      	mov	r3, r0
   195bc:	60fb      	str	r3, [r7, #12]
	return	e;
   195be:	68fb      	ldr	r3, [r7, #12]
}
   195c0:	4618      	mov	r0, r3
   195c2:	3710      	adds	r7, #16
   195c4:	46bd      	mov	sp, r7
   195c6:	bd80      	pop	{r7, pc}

000195c8 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   195c8:	b590      	push	{r4, r7, lr}
   195ca:	b087      	sub	sp, #28
   195cc:	af00      	add	r7, sp, #0
   195ce:	60f8      	str	r0, [r7, #12]
   195d0:	60b9      	str	r1, [r7, #8]
   195d2:	607a      	str	r2, [r7, #4]
   195d4:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   195d6:	68fb      	ldr	r3, [r7, #12]
   195d8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   195dc:	685b      	ldr	r3, [r3, #4]
   195de:	685c      	ldr	r4, [r3, #4]
   195e0:	68fb      	ldr	r3, [r7, #12]
   195e2:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   195e6:	683b      	ldr	r3, [r7, #0]
   195e8:	687a      	ldr	r2, [r7, #4]
   195ea:	68b9      	ldr	r1, [r7, #8]
   195ec:	47a0      	blx	r4
   195ee:	4603      	mov	r3, r0
   195f0:	617b      	str	r3, [r7, #20]
	return	w;
   195f2:	697b      	ldr	r3, [r7, #20]
}
   195f4:	4618      	mov	r0, r3
   195f6:	371c      	adds	r7, #28
   195f8:	46bd      	mov	sp, r7
   195fa:	bd90      	pop	{r4, r7, pc}

000195fc <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   195fc:	b590      	push	{r4, r7, lr}
   195fe:	b087      	sub	sp, #28
   19600:	af00      	add	r7, sp, #0
   19602:	60f8      	str	r0, [r7, #12]
   19604:	60b9      	str	r1, [r7, #8]
   19606:	607a      	str	r2, [r7, #4]
   19608:	603b      	str	r3, [r7, #0]
	xferDone=false;
   1960a:	68fb      	ldr	r3, [r7, #12]
   1960c:	2200      	movs	r2, #0
   1960e:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   19610:	68fb      	ldr	r3, [r7, #12]
   19612:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   19616:	685b      	ldr	r3, [r3, #4]
   19618:	681c      	ldr	r4, [r3, #0]
   1961a:	68fb      	ldr	r3, [r7, #12]
   1961c:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   19620:	683b      	ldr	r3, [r7, #0]
   19622:	687a      	ldr	r2, [r7, #4]
   19624:	68b9      	ldr	r1, [r7, #8]
   19626:	47a0      	blx	r4
   19628:	4603      	mov	r3, r0
   1962a:	617b      	str	r3, [r7, #20]
	return	r;
   1962c:	697b      	ldr	r3, [r7, #20]
}
   1962e:	4618      	mov	r0, r3
   19630:	371c      	adds	r7, #28
   19632:	46bd      	mov	sp, r7
   19634:	bd90      	pop	{r4, r7, pc}
	...

00019638 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   19638:	b580      	push	{r7, lr}
   1963a:	b082      	sub	sp, #8
   1963c:	af00      	add	r7, sp, #0
   1963e:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   19640:	687a      	ldr	r2, [r7, #4]
   19642:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   19646:	f043 0310 	orr.w	r3, r3, #16
   1964a:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   1964e:	687a      	ldr	r2, [r7, #4]
   19650:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   19654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19658:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   1965c:	687a      	ldr	r2, [r7, #4]
   1965e:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   19662:	f36f 1305 	bfc	r3, #4, #2
   19666:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   1966a:	687b      	ldr	r3, [r7, #4]
   1966c:	2205      	movs	r2, #5
   1966e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   19672:	687b      	ldr	r3, [r7, #4]
   19674:	2201      	movs	r2, #1
   19676:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   1967a:	687b      	ldr	r3, [r7, #4]
   1967c:	f203 2212 	addw	r2, r3, #530	; 0x212
   19680:	687b      	ldr	r3, [r7, #4]
   19682:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   19686:	687b      	ldr	r3, [r7, #4]
   19688:	685a      	ldr	r2, [r3, #4]
   1968a:	687b      	ldr	r3, [r7, #4]
   1968c:	f503 7305 	add.w	r3, r3, #532	; 0x214
   19690:	4619      	mov	r1, r3
   19692:	4610      	mov	r0, r2
   19694:	4b04      	ldr	r3, [pc, #16]	; (196a8 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   19696:	4798      	blx	r3
		return status;
   19698:	687b      	ldr	r3, [r7, #4]
   1969a:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   1969e:	4618      	mov	r0, r3
   196a0:	3708      	adds	r7, #8
   196a2:	46bd      	mov	sp, r7
   196a4:	bd80      	pop	{r7, pc}
   196a6:	bf00      	nop
   196a8:	00003ba1 	.word	0x00003ba1

000196ac <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   196ac:	b580      	push	{r7, lr}
   196ae:	b082      	sub	sp, #8
   196b0:	af00      	add	r7, sp, #0
   196b2:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   196b4:	6878      	ldr	r0, [r7, #4]
   196b6:	4b0e      	ldr	r3, [pc, #56]	; (196f0 <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   196b8:	4798      	blx	r3
   196ba:	4603      	mov	r3, r0
   196bc:	461a      	mov	r2, r3
   196be:	687b      	ldr	r3, [r7, #4]
   196c0:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   196c4:	687b      	ldr	r3, [r7, #4]
   196c6:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   196ca:	f003 0301 	and.w	r3, r3, #1
   196ce:	2b00      	cmp	r3, #0
   196d0:	d000      	beq.n	196d4 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   196d2:	e7ef      	b.n	196b4 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   196d4:	687b      	ldr	r3, [r7, #4]
   196d6:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   196da:	f003 0301 	and.w	r3, r3, #1
   196de:	2b00      	cmp	r3, #0
   196e0:	bf0c      	ite	eq
   196e2:	2301      	moveq	r3, #1
   196e4:	2300      	movne	r3, #0
   196e6:	b2db      	uxtb	r3, r3
}
   196e8:	4618      	mov	r0, r3
   196ea:	3708      	adds	r7, #8
   196ec:	46bd      	mov	sp, r7
   196ee:	bd80      	pop	{r7, pc}
   196f0:	00019639 	.word	0x00019639

000196f4 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   196f4:	b590      	push	{r4, r7, lr}
   196f6:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   196fa:	b085      	sub	sp, #20
   196fc:	af00      	add	r7, sp, #0
   196fe:	f107 0310 	add.w	r3, r7, #16
   19702:	3b0c      	subs	r3, #12
   19704:	6018      	str	r0, [r3, #0]
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	currentAddress=20*QSPI_ERBLK;
   19706:	f107 0310 	add.w	r3, r7, #16
   1970a:	3b0c      	subs	r3, #12
   1970c:	681b      	ldr	r3, [r3, #0]
   1970e:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   19712:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	for (uint32_t i = 0; i <QSPI_ERBLK ; i++) {
   19716:	2300      	movs	r3, #0
   19718:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1971c:	f102 020c 	add.w	r2, r2, #12
   19720:	6013      	str	r3, [r2, #0]
   19722:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   19726:	f103 030c 	add.w	r3, r3, #12
   1972a:	681b      	ldr	r3, [r3, #0]
   1972c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   19730:	d22f      	bcs.n	19792 <_ZN13N25Q256_Class8SelfTestEv+0x9e>
		testTXBuffer[i] = (uint8_t)rand();
   19732:	4b60      	ldr	r3, [pc, #384]	; (198b4 <_ZN13N25Q256_Class8SelfTestEv+0x1c0>)
   19734:	4798      	blx	r3
   19736:	4603      	mov	r3, r0
   19738:	b2d9      	uxtb	r1, r3
   1973a:	f107 0310 	add.w	r3, r7, #16
   1973e:	3b08      	subs	r3, #8
   19740:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   19744:	f102 020c 	add.w	r2, r2, #12
   19748:	6812      	ldr	r2, [r2, #0]
   1974a:	4413      	add	r3, r2
   1974c:	460a      	mov	r2, r1
   1974e:	701a      	strb	r2, [r3, #0]
		testRXBuffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
   19750:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   19754:	f103 030c 	add.w	r3, r3, #12
   19758:	681b      	ldr	r3, [r3, #0]
   1975a:	b2db      	uxtb	r3, r3
   1975c:	425b      	negs	r3, r3
   1975e:	b2d9      	uxtb	r1, r3
   19760:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   19764:	f103 0310 	add.w	r3, r3, #16
   19768:	3b08      	subs	r3, #8
   1976a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1976e:	f102 020c 	add.w	r2, r2, #12
   19772:	6812      	ldr	r2, [r2, #0]
   19774:	4413      	add	r3, r2
   19776:	460a      	mov	r2, r1
   19778:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i <QSPI_ERBLK ; i++) {
   1977a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   1977e:	f103 030c 	add.w	r3, r3, #12
   19782:	681b      	ldr	r3, [r3, #0]
   19784:	3301      	adds	r3, #1
   19786:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1978a:	f102 020c 	add.w	r2, r2, #12
   1978e:	6013      	str	r3, [r2, #0]
   19790:	e7c7      	b.n	19722 <_ZN13N25Q256_Class8SelfTestEv+0x2e>
	}

	//ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
	//WaitOnBusy();
	Erase(currentAddress);
   19792:	f107 0310 	add.w	r3, r7, #16
   19796:	3b0c      	subs	r3, #12
   19798:	681b      	ldr	r3, [r3, #0]
   1979a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   1979e:	f107 0310 	add.w	r3, r7, #16
   197a2:	3b0c      	subs	r3, #12
   197a4:	4611      	mov	r1, r2
   197a6:	6818      	ldr	r0, [r3, #0]
   197a8:	4b43      	ldr	r3, [pc, #268]	; (198b8 <_ZN13N25Q256_Class8SelfTestEv+0x1c4>)
   197aa:	4798      	blx	r3
	WaitOnBusy();
   197ac:	f107 0310 	add.w	r3, r7, #16
   197b0:	3b0c      	subs	r3, #12
   197b2:	6818      	ldr	r0, [r3, #0]
   197b4:	4b41      	ldr	r3, [pc, #260]	; (198bc <_ZN13N25Q256_Class8SelfTestEv+0x1c8>)
   197b6:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   197b8:	f107 0310 	add.w	r3, r7, #16
   197bc:	3b0c      	subs	r3, #12
   197be:	681b      	ldr	r3, [r3, #0]
   197c0:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   197c4:	f107 0110 	add.w	r1, r7, #16
   197c8:	3908      	subs	r1, #8
   197ca:	f107 0010 	add.w	r0, r7, #16
   197ce:	380c      	subs	r0, #12
   197d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   197d4:	6800      	ldr	r0, [r0, #0]
   197d6:	4c3a      	ldr	r4, [pc, #232]	; (198c0 <_ZN13N25Q256_Class8SelfTestEv+0x1cc>)
   197d8:	47a0      	blx	r4
	WaitOnBusy();
   197da:	f107 0310 	add.w	r3, r7, #16
   197de:	3b0c      	subs	r3, #12
   197e0:	6818      	ldr	r0, [r3, #0]
   197e2:	4b36      	ldr	r3, [pc, #216]	; (198bc <_ZN13N25Q256_Class8SelfTestEv+0x1c8>)
   197e4:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   197e6:	f107 0310 	add.w	r3, r7, #16
   197ea:	3b0c      	subs	r3, #12
   197ec:	681b      	ldr	r3, [r3, #0]
   197ee:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   197f2:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   197f6:	f101 0110 	add.w	r1, r1, #16
   197fa:	3908      	subs	r1, #8
   197fc:	f107 0010 	add.w	r0, r7, #16
   19800:	380c      	subs	r0, #12
   19802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   19806:	6800      	ldr	r0, [r0, #0]
   19808:	4c2e      	ldr	r4, [pc, #184]	; (198c4 <_ZN13N25Q256_Class8SelfTestEv+0x1d0>)
   1980a:	47a0      	blx	r4
	WaitOnBusy();
   1980c:	f107 0310 	add.w	r3, r7, #16
   19810:	3b0c      	subs	r3, #12
   19812:	6818      	ldr	r0, [r3, #0]
   19814:	4b29      	ldr	r3, [pc, #164]	; (198bc <_ZN13N25Q256_Class8SelfTestEv+0x1c8>)
   19816:	4798      	blx	r3
	isOK	 = true;
   19818:	f107 0310 	add.w	r3, r7, #16
   1981c:	3b0c      	subs	r3, #12
   1981e:	681b      	ldr	r3, [r3, #0]
   19820:	2201      	movs	r2, #1
   19822:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   19826:	2300      	movs	r3, #0
   19828:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   1982c:	f102 0208 	add.w	r2, r2, #8
   19830:	6013      	str	r3, [r2, #0]
   19832:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   19836:	f103 0308 	add.w	r3, r3, #8
   1983a:	681b      	ldr	r3, [r3, #0]
   1983c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   19840:	da2b      	bge.n	1989a <_ZN13N25Q256_Class8SelfTestEv+0x1a6>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   19842:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   19846:	f103 0310 	add.w	r3, r3, #16
   1984a:	3b08      	subs	r3, #8
   1984c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   19850:	f102 0208 	add.w	r2, r2, #8
   19854:	6812      	ldr	r2, [r2, #0]
   19856:	4413      	add	r3, r2
   19858:	781a      	ldrb	r2, [r3, #0]
   1985a:	f107 0310 	add.w	r3, r7, #16
   1985e:	3b08      	subs	r3, #8
   19860:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   19864:	f101 0108 	add.w	r1, r1, #8
   19868:	6809      	ldr	r1, [r1, #0]
   1986a:	440b      	add	r3, r1
   1986c:	781b      	ldrb	r3, [r3, #0]
   1986e:	429a      	cmp	r2, r3
   19870:	d007      	beq.n	19882 <_ZN13N25Q256_Class8SelfTestEv+0x18e>
			isOK = false;
   19872:	f107 0310 	add.w	r3, r7, #16
   19876:	3b0c      	subs	r3, #12
   19878:	681b      	ldr	r3, [r3, #0]
   1987a:	2200      	movs	r2, #0
   1987c:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   19880:	e00b      	b.n	1989a <_ZN13N25Q256_Class8SelfTestEv+0x1a6>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   19882:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   19886:	f103 0308 	add.w	r3, r3, #8
   1988a:	681b      	ldr	r3, [r3, #0]
   1988c:	3301      	adds	r3, #1
   1988e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   19892:	f102 0208 	add.w	r2, r2, #8
   19896:	6013      	str	r3, [r2, #0]
   19898:	e7cb      	b.n	19832 <_ZN13N25Q256_Class8SelfTestEv+0x13e>
		}
					
	}
	return	isOK;
   1989a:	f107 0310 	add.w	r3, r7, #16
   1989e:	3b0c      	subs	r3, #12
   198a0:	681b      	ldr	r3, [r3, #0]
   198a2:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   198a6:	4618      	mov	r0, r3
   198a8:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   198ac:	3714      	adds	r7, #20
   198ae:	46bd      	mov	sp, r7
   198b0:	bd90      	pop	{r4, r7, pc}
   198b2:	bf00      	nop
   198b4:	0001a805 	.word	0x0001a805
   198b8:	00019599 	.word	0x00019599
   198bc:	000196ad 	.word	0x000196ad
   198c0:	000195c9 	.word	0x000195c9
   198c4:	000195fd 	.word	0x000195fd

000198c8 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   198c8:	b580      	push	{r7, lr}
   198ca:	b082      	sub	sp, #8
   198cc:	af00      	add	r7, sp, #0
   198ce:	6078      	str	r0, [r7, #4]
   198d0:	6039      	str	r1, [r7, #0]
   198d2:	687b      	ldr	r3, [r7, #4]
   198d4:	2b01      	cmp	r3, #1
   198d6:	d10d      	bne.n	198f4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   198d8:	683b      	ldr	r3, [r7, #0]
   198da:	f64f 72ff 	movw	r2, #65535	; 0xffff
   198de:	4293      	cmp	r3, r2
   198e0:	d108      	bne.n	198f4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   198e2:	4906      	ldr	r1, [pc, #24]	; (198fc <_Z41__static_initialization_and_destruction_0ii+0x34>)
   198e4:	4806      	ldr	r0, [pc, #24]	; (19900 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   198e6:	4b07      	ldr	r3, [pc, #28]	; (19904 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   198e8:	4798      	blx	r3
   198ea:	4a07      	ldr	r2, [pc, #28]	; (19908 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   198ec:	4907      	ldr	r1, [pc, #28]	; (1990c <_Z41__static_initialization_and_destruction_0ii+0x44>)
   198ee:	4804      	ldr	r0, [pc, #16]	; (19900 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   198f0:	4b07      	ldr	r3, [pc, #28]	; (19910 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   198f2:	4798      	blx	r3
   198f4:	bf00      	nop
   198f6:	3708      	adds	r7, #8
   198f8:	46bd      	mov	sp, r7
   198fa:	bd80      	pop	{r7, pc}
   198fc:	2000df58 	.word	0x2000df58
   19900:	2000dbdc 	.word	0x2000dbdc
   19904:	000194f1 	.word	0x000194f1
   19908:	20000000 	.word	0x20000000
   1990c:	00019519 	.word	0x00019519
   19910:	0001a0b5 	.word	0x0001a0b5

00019914 <_GLOBAL__sub_I_ptrN25Q256Class>:
   19914:	b580      	push	{r7, lr}
   19916:	af00      	add	r7, sp, #0
   19918:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1991c:	2001      	movs	r0, #1
   1991e:	4b01      	ldr	r3, [pc, #4]	; (19924 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   19920:	4798      	blx	r3
   19922:	bd80      	pop	{r7, pc}
   19924:	000198c9 	.word	0x000198c9

00019928 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   19928:	b580      	push	{r7, lr}
   1992a:	b082      	sub	sp, #8
   1992c:	af00      	add	r7, sp, #0
   1992e:	6078      	str	r0, [r7, #4]
   19930:	687b      	ldr	r3, [r7, #4]
   19932:	4618      	mov	r0, r3
   19934:	4b06      	ldr	r3, [pc, #24]	; (19950 <_ZN14Calendar_ClassC1Ev+0x28>)
   19936:	4798      	blx	r3
   19938:	4a06      	ldr	r2, [pc, #24]	; (19954 <_ZN14Calendar_ClassC1Ev+0x2c>)
   1993a:	687b      	ldr	r3, [r7, #4]
   1993c:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   1993e:	4a06      	ldr	r2, [pc, #24]	; (19958 <_ZN14Calendar_ClassC1Ev+0x30>)
   19940:	687b      	ldr	r3, [r7, #4]
   19942:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   19944:	687b      	ldr	r3, [r7, #4]
   19946:	4618      	mov	r0, r3
   19948:	3708      	adds	r7, #8
   1994a:	46bd      	mov	sp, r7
   1994c:	bd80      	pop	{r7, pc}
   1994e:	bf00      	nop
   19950:	0001a075 	.word	0x0001a075
   19954:	0001bbf0 	.word	0x0001bbf0
   19958:	2000de10 	.word	0x2000de10

0001995c <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   1995c:	b580      	push	{r7, lr}
   1995e:	b082      	sub	sp, #8
   19960:	af00      	add	r7, sp, #0
   19962:	6078      	str	r0, [r7, #4]
   19964:	6039      	str	r1, [r7, #0]
   19966:	687b      	ldr	r3, [r7, #4]
   19968:	4618      	mov	r0, r3
   1996a:	4b08      	ldr	r3, [pc, #32]	; (1998c <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   1996c:	4798      	blx	r3
   1996e:	4a08      	ldr	r2, [pc, #32]	; (19990 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   19970:	687b      	ldr	r3, [r7, #4]
   19972:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   19974:	687b      	ldr	r3, [r7, #4]
   19976:	683a      	ldr	r2, [r7, #0]
   19978:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ptrCalendarClass=this;
   1997c:	4a05      	ldr	r2, [pc, #20]	; (19994 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   1997e:	687b      	ldr	r3, [r7, #4]
   19980:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   19982:	687b      	ldr	r3, [r7, #4]
   19984:	4618      	mov	r0, r3
   19986:	3708      	adds	r7, #8
   19988:	46bd      	mov	sp, r7
   1998a:	bd80      	pop	{r7, pc}
   1998c:	0001a075 	.word	0x0001a075
   19990:	0001bbf0 	.word	0x0001bbf0
   19994:	2000de10 	.word	0x2000de10

00019998 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   19998:	b580      	push	{r7, lr}
   1999a:	b082      	sub	sp, #8
   1999c:	af00      	add	r7, sp, #0
   1999e:	6078      	str	r0, [r7, #4]
   199a0:	4a05      	ldr	r2, [pc, #20]	; (199b8 <_ZN14Calendar_ClassD1Ev+0x20>)
   199a2:	687b      	ldr	r3, [r7, #4]
   199a4:	601a      	str	r2, [r3, #0]
   199a6:	687b      	ldr	r3, [r7, #4]
   199a8:	4618      	mov	r0, r3
   199aa:	4b04      	ldr	r3, [pc, #16]	; (199bc <_ZN14Calendar_ClassD1Ev+0x24>)
   199ac:	4798      	blx	r3
{
} //~Calendar_Class
   199ae:	687b      	ldr	r3, [r7, #4]
   199b0:	4618      	mov	r0, r3
   199b2:	3708      	adds	r7, #8
   199b4:	46bd      	mov	sp, r7
   199b6:	bd80      	pop	{r7, pc}
   199b8:	0001bbf0 	.word	0x0001bbf0
   199bc:	0001a095 	.word	0x0001a095

000199c0 <_ZN14Calendar_Class4InitE18calendar_date_time>:
	SaveCurrentDateTime();
	
}


bool	Calendar_Class::Init(calendar_date_time dt_memory){
   199c0:	b580      	push	{r7, lr}
   199c2:	b084      	sub	sp, #16
   199c4:	af00      	add	r7, sp, #0
   199c6:	60f8      	str	r0, [r7, #12]
   199c8:	1d3b      	adds	r3, r7, #4
   199ca:	e883 0006 	stmia.w	r3, {r1, r2}

	calendar_enable(ptrCalendar);
   199ce:	68fb      	ldr	r3, [r7, #12]
   199d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   199d4:	4618      	mov	r0, r3
   199d6:	4b4c      	ldr	r3, [pc, #304]	; (19b08 <_ZN14Calendar_Class4InitE18calendar_date_time+0x148>)
   199d8:	4798      	blx	r3
	
	InitReferenceDates();
   199da:	68f8      	ldr	r0, [r7, #12]
   199dc:	4b4b      	ldr	r3, [pc, #300]	; (19b0c <_ZN14Calendar_Class4InitE18calendar_date_time+0x14c>)
   199de:	4798      	blx	r3
	lastDateTime=dt_memory;
   199e0:	68fb      	ldr	r3, [r7, #12]
   199e2:	3360      	adds	r3, #96	; 0x60
   199e4:	1d3a      	adds	r2, r7, #4
   199e6:	e892 0003 	ldmia.w	r2, {r0, r1}
   199ea:	e883 0003 	stmia.w	r3, {r0, r1}
	//memory.ReadAddress((uint8_t*)handler,CALENDER_ADDRESS,QSPI_BUFFER_SIZE);
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   199ee:	68fb      	ldr	r3, [r7, #12]
   199f0:	681b      	ldr	r3, [r3, #0]
   199f2:	3304      	adds	r3, #4
   199f4:	681b      	ldr	r3, [r3, #0]
   199f6:	68fa      	ldr	r2, [r7, #12]
   199f8:	3260      	adds	r2, #96	; 0x60
   199fa:	4611      	mov	r1, r2
   199fc:	68f8      	ldr	r0, [r7, #12]
   199fe:	4798      	blx	r3
   19a00:	4602      	mov	r2, r0
   19a02:	68fb      	ldr	r3, [r7, #12]
   19a04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	maxTimestamp=convert_datetime_to_timestamp(&maxDateTime);
   19a08:	68fb      	ldr	r3, [r7, #12]
   19a0a:	681b      	ldr	r3, [r3, #0]
   19a0c:	3304      	adds	r3, #4
   19a0e:	681b      	ldr	r3, [r3, #0]
   19a10:	68fa      	ldr	r2, [r7, #12]
   19a12:	326c      	adds	r2, #108	; 0x6c
   19a14:	4611      	mov	r1, r2
   19a16:	68f8      	ldr	r0, [r7, #12]
   19a18:	4798      	blx	r3
   19a1a:	4602      	mov	r2, r0
   19a1c:	68fb      	ldr	r3, [r7, #12]
   19a1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	erasedTimestamp=convert_datetime_to_timestamp(&erasedDateTime);
   19a22:	68fb      	ldr	r3, [r7, #12]
   19a24:	681b      	ldr	r3, [r3, #0]
   19a26:	3304      	adds	r3, #4
   19a28:	681b      	ldr	r3, [r3, #0]
   19a2a:	68fa      	ldr	r2, [r7, #12]
   19a2c:	327c      	adds	r2, #124	; 0x7c
   19a2e:	4611      	mov	r1, r2
   19a30:	68f8      	ldr	r0, [r7, #12]
   19a32:	4798      	blx	r3
   19a34:	4602      	mov	r2, r0
   19a36:	68fb      	ldr	r3, [r7, #12]
   19a38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	nullTimestamp=convert_datetime_to_timestamp(&nullDateTime);
   19a3c:	68fb      	ldr	r3, [r7, #12]
   19a3e:	681b      	ldr	r3, [r3, #0]
   19a40:	3304      	adds	r3, #4
   19a42:	681b      	ldr	r3, [r3, #0]
   19a44:	68fa      	ldr	r2, [r7, #12]
   19a46:	3284      	adds	r2, #132	; 0x84
   19a48:	4611      	mov	r1, r2
   19a4a:	68f8      	ldr	r0, [r7, #12]
   19a4c:	4798      	blx	r3
   19a4e:	4602      	mov	r2, r0
   19a50:	68fb      	ldr	r3, [r7, #12]
   19a52:	669a      	str	r2, [r3, #104]	; 0x68
	SetCompilationDateTime();
   19a54:	68f8      	ldr	r0, [r7, #12]
   19a56:	4b2e      	ldr	r3, [pc, #184]	; (19b10 <_ZN14Calendar_Class4InitE18calendar_date_time+0x150>)
   19a58:	4798      	blx	r3
	compilationTimestamp=convert_datetime_to_timestamp(&compilationDateTime);
   19a5a:	68fb      	ldr	r3, [r7, #12]
   19a5c:	681b      	ldr	r3, [r3, #0]
   19a5e:	3304      	adds	r3, #4
   19a60:	681b      	ldr	r3, [r3, #0]
   19a62:	68fa      	ldr	r2, [r7, #12]
   19a64:	3274      	adds	r2, #116	; 0x74
   19a66:	4611      	mov	r1, r2
   19a68:	68f8      	ldr	r0, [r7, #12]
   19a6a:	4798      	blx	r3
   19a6c:	4602      	mov	r2, r0
   19a6e:	68fb      	ldr	r3, [r7, #12]
   19a70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	if ((lastTimestamp>maxTimestamp)||(lastTimestamp==erasedTimestamp)||(lastTimestamp==nullTimestamp))
   19a74:	68fb      	ldr	r3, [r7, #12]
   19a76:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   19a7a:	68fb      	ldr	r3, [r7, #12]
   19a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   19a80:	429a      	cmp	r2, r3
   19a82:	d80e      	bhi.n	19aa2 <_ZN14Calendar_Class4InitE18calendar_date_time+0xe2>
   19a84:	68fb      	ldr	r3, [r7, #12]
   19a86:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   19a8a:	68fb      	ldr	r3, [r7, #12]
   19a8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   19a90:	429a      	cmp	r2, r3
   19a92:	d006      	beq.n	19aa2 <_ZN14Calendar_Class4InitE18calendar_date_time+0xe2>
   19a94:	68fb      	ldr	r3, [r7, #12]
   19a96:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   19a9a:	68fb      	ldr	r3, [r7, #12]
   19a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   19a9e:	429a      	cmp	r2, r3
   19aa0:	d106      	bne.n	19ab0 <_ZN14Calendar_Class4InitE18calendar_date_time+0xf0>
	{
		SetDateTime(&compilationDateTime);
   19aa2:	68fb      	ldr	r3, [r7, #12]
   19aa4:	3374      	adds	r3, #116	; 0x74
   19aa6:	4619      	mov	r1, r3
   19aa8:	68f8      	ldr	r0, [r7, #12]
   19aaa:	4b1a      	ldr	r3, [pc, #104]	; (19b14 <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
   19aac:	4798      	blx	r3
   19aae:	e022      	b.n	19af6 <_ZN14Calendar_Class4InitE18calendar_date_time+0x136>
	}
	else
	{
		if (lastTimestamp<compilationTimestamp)
   19ab0:	68fb      	ldr	r3, [r7, #12]
   19ab2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   19ab6:	68fb      	ldr	r3, [r7, #12]
   19ab8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   19abc:	429a      	cmp	r2, r3
   19abe:	d206      	bcs.n	19ace <_ZN14Calendar_Class4InitE18calendar_date_time+0x10e>
		{
			SetDateTime(&compilationDateTime);
   19ac0:	68fb      	ldr	r3, [r7, #12]
   19ac2:	3374      	adds	r3, #116	; 0x74
   19ac4:	4619      	mov	r1, r3
   19ac6:	68f8      	ldr	r0, [r7, #12]
   19ac8:	4b12      	ldr	r3, [pc, #72]	; (19b14 <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
   19aca:	4798      	blx	r3
   19acc:	e013      	b.n	19af6 <_ZN14Calendar_Class4InitE18calendar_date_time+0x136>
		}
		else
		{
			if (lastTimestamp==nullTimestamp)
   19ace:	68fb      	ldr	r3, [r7, #12]
   19ad0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   19ad4:	68fb      	ldr	r3, [r7, #12]
   19ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   19ad8:	429a      	cmp	r2, r3
   19ada:	d106      	bne.n	19aea <_ZN14Calendar_Class4InitE18calendar_date_time+0x12a>
			{
				SetDateTime(&compilationDateTime);
   19adc:	68fb      	ldr	r3, [r7, #12]
   19ade:	3374      	adds	r3, #116	; 0x74
   19ae0:	4619      	mov	r1, r3
   19ae2:	68f8      	ldr	r0, [r7, #12]
   19ae4:	4b0b      	ldr	r3, [pc, #44]	; (19b14 <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
   19ae6:	4798      	blx	r3
   19ae8:	e005      	b.n	19af6 <_ZN14Calendar_Class4InitE18calendar_date_time+0x136>
			}
			else
			{
				SetDateTime(&lastDateTime);
   19aea:	68fb      	ldr	r3, [r7, #12]
   19aec:	3360      	adds	r3, #96	; 0x60
   19aee:	4619      	mov	r1, r3
   19af0:	68f8      	ldr	r0, [r7, #12]
   19af2:	4b08      	ldr	r3, [pc, #32]	; (19b14 <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
   19af4:	4798      	blx	r3
			}
			
		}
	}
	enlapsedTime=false;
   19af6:	68fb      	ldr	r3, [r7, #12]
   19af8:	2200      	movs	r2, #0
   19afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	
	return true;
   19afe:	2301      	movs	r3, #1
}
   19b00:	4618      	mov	r0, r3
   19b02:	3710      	adds	r7, #16
   19b04:	46bd      	mov	sp, r7
   19b06:	bd80      	pop	{r7, pc}
   19b08:	0000317d 	.word	0x0000317d
   19b0c:	00019b19 	.word	0x00019b19
   19b10:	00019bc1 	.word	0x00019bc1
   19b14:	00019dc5 	.word	0x00019dc5

00019b18 <_ZN14Calendar_Class18InitReferenceDatesEv>:
	calendar_set_alarm(ptrCalendar, &alarm, alarm_calendar);
}

	
	
void	Calendar_Class::InitReferenceDates(void){
   19b18:	b480      	push	{r7}
   19b1a:	b083      	sub	sp, #12
   19b1c:	af00      	add	r7, sp, #0
   19b1e:	6078      	str	r0, [r7, #4]
	

		maxDateTime.date.year  = 2050;
   19b20:	687b      	ldr	r3, [r7, #4]
   19b22:	f640 0202 	movw	r2, #2050	; 0x802
   19b26:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		maxDateTime.date.month = 12;
   19b2a:	687b      	ldr	r3, [r7, #4]
   19b2c:	220c      	movs	r2, #12
   19b2e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		maxDateTime.date.day   = 31;
   19b32:	687b      	ldr	r3, [r7, #4]
   19b34:	221f      	movs	r2, #31
   19b36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

		maxDateTime.time.hour = 12;
   19b3a:	687b      	ldr	r3, [r7, #4]
   19b3c:	220c      	movs	r2, #12
   19b3e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		maxDateTime.time.min  = 59;
   19b42:	687b      	ldr	r3, [r7, #4]
   19b44:	223b      	movs	r2, #59	; 0x3b
   19b46:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		maxDateTime.time.sec  = 59;
   19b4a:	687b      	ldr	r3, [r7, #4]
   19b4c:	223b      	movs	r2, #59	; 0x3b
   19b4e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		
		erasedDateTime.date.year  =0xffff;
   19b52:	687b      	ldr	r3, [r7, #4]
   19b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19b58:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		erasedDateTime.date.month = 0xff;
   19b5c:	687b      	ldr	r3, [r7, #4]
   19b5e:	22ff      	movs	r2, #255	; 0xff
   19b60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		erasedDateTime.date.day   = 0xff;
   19b64:	687b      	ldr	r3, [r7, #4]
   19b66:	22ff      	movs	r2, #255	; 0xff
   19b68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		erasedDateTime.time.hour = 0xff;
   19b6c:	687b      	ldr	r3, [r7, #4]
   19b6e:	22ff      	movs	r2, #255	; 0xff
   19b70:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		erasedDateTime.time.min  = 0xff;
   19b74:	687b      	ldr	r3, [r7, #4]
   19b76:	22ff      	movs	r2, #255	; 0xff
   19b78:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		erasedDateTime.time.sec  = 0xff;
   19b7c:	687b      	ldr	r3, [r7, #4]
   19b7e:	22ff      	movs	r2, #255	; 0xff
   19b80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		
		nullDateTime.date.year  = 0x0;
   19b84:	687b      	ldr	r3, [r7, #4]
   19b86:	2200      	movs	r2, #0
   19b88:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		nullDateTime.date.month = 0x0;
   19b8c:	687b      	ldr	r3, [r7, #4]
   19b8e:	2200      	movs	r2, #0
   19b90:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		nullDateTime.date.day   = 0x0;
   19b94:	687b      	ldr	r3, [r7, #4]
   19b96:	2200      	movs	r2, #0
   19b98:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

		nullDateTime.time.hour = 0x0;
   19b9c:	687b      	ldr	r3, [r7, #4]
   19b9e:	2200      	movs	r2, #0
   19ba0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		nullDateTime.time.min  = 0x0;
   19ba4:	687b      	ldr	r3, [r7, #4]
   19ba6:	2200      	movs	r2, #0
   19ba8:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		nullDateTime.time.sec  = 0x0;
   19bac:	687b      	ldr	r3, [r7, #4]
   19bae:	2200      	movs	r2, #0
   19bb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
   19bb4:	bf00      	nop
   19bb6:	370c      	adds	r7, #12
   19bb8:	46bd      	mov	sp, r7
   19bba:	bc80      	pop	{r7}
   19bbc:	4770      	bx	lr
	...

00019bc0 <_ZN14Calendar_Class22SetCompilationDateTimeEv>:
	
void	Calendar_Class::SetCompilationDateTime(void){
   19bc0:	b480      	push	{r7}
   19bc2:	b083      	sub	sp, #12
   19bc4:	af00      	add	r7, sp, #0
   19bc6:	6078      	str	r0, [r7, #4]
		

		compilationDateTime.date.year  =((((__DATE__ [7]-'0')*10+(__DATE__[8]-'0'))*10+(__DATE__ [9]-'0'))*10+(__DATE__ [10]-'0')) ;
   19bc8:	2332      	movs	r3, #50	; 0x32
   19bca:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   19bce:	4613      	mov	r3, r2
   19bd0:	009b      	lsls	r3, r3, #2
   19bd2:	4413      	add	r3, r2
   19bd4:	005b      	lsls	r3, r3, #1
   19bd6:	461a      	mov	r2, r3
   19bd8:	2330      	movs	r3, #48	; 0x30
   19bda:	3b30      	subs	r3, #48	; 0x30
   19bdc:	441a      	add	r2, r3
   19bde:	4613      	mov	r3, r2
   19be0:	009b      	lsls	r3, r3, #2
   19be2:	4413      	add	r3, r2
   19be4:	005b      	lsls	r3, r3, #1
   19be6:	461a      	mov	r2, r3
   19be8:	2332      	movs	r3, #50	; 0x32
   19bea:	3b30      	subs	r3, #48	; 0x30
   19bec:	4413      	add	r3, r2
   19bee:	b29b      	uxth	r3, r3
   19bf0:	461a      	mov	r2, r3
   19bf2:	0092      	lsls	r2, r2, #2
   19bf4:	4413      	add	r3, r2
   19bf6:	005b      	lsls	r3, r3, #1
   19bf8:	b29a      	uxth	r2, r3
   19bfa:	2331      	movs	r3, #49	; 0x31
   19bfc:	b29b      	uxth	r3, r3
   19bfe:	4413      	add	r3, r2
   19c00:	b29b      	uxth	r3, r3
   19c02:	3b30      	subs	r3, #48	; 0x30
   19c04:	b29a      	uxth	r2, r3
   19c06:	687b      	ldr	r3, [r7, #4]
   19c08:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   19c0c:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'y' ? 4                               \
                                : __DATE__ [2] == 'l' ? 6                               \
                                : __DATE__ [2] == 'g' ? 7                               \
                                : __DATE__ [2] == 'p' ? 8                               \
                                : __DATE__ [2] == 't' ? 9                               \
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19c0e:	2b6e      	cmp	r3, #110	; 0x6e
   19c10:	d106      	bne.n	19c20 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x60>
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   19c12:	2365      	movs	r3, #101	; 0x65
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19c14:	2b61      	cmp	r3, #97	; 0x61
   19c16:	d101      	bne.n	19c1c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x5c>
   19c18:	2301      	movs	r3, #1
   19c1a:	e02f      	b.n	19c7c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   19c1c:	2306      	movs	r3, #6
   19c1e:	e02d      	b.n	19c7c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'b' ? 1                               \
   19c20:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19c22:	2b62      	cmp	r3, #98	; 0x62
   19c24:	d029      	beq.n	19c7a <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xba>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   19c26:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19c28:	2b72      	cmp	r3, #114	; 0x72
   19c2a:	d106      	bne.n	19c3a <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x7a>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   19c2c:	2346      	movs	r3, #70	; 0x46
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19c2e:	2b4d      	cmp	r3, #77	; 0x4d
   19c30:	d101      	bne.n	19c36 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x76>
   19c32:	2303      	movs	r3, #3
   19c34:	e022      	b.n	19c7c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   19c36:	2304      	movs	r3, #4
   19c38:	e020      	b.n	19c7c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'y' ? 4                               \
   19c3a:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19c3c:	2b79      	cmp	r3, #121	; 0x79
   19c3e:	d01a      	beq.n	19c76 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb6>
                                : __DATE__ [2] == 'l' ? 6                               \
   19c40:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19c42:	2b6c      	cmp	r3, #108	; 0x6c
   19c44:	d015      	beq.n	19c72 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb2>
                                : __DATE__ [2] == 'g' ? 7                               \
   19c46:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19c48:	2b67      	cmp	r3, #103	; 0x67
   19c4a:	d010      	beq.n	19c6e <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xae>
                                : __DATE__ [2] == 'p' ? 8                               \
   19c4c:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19c4e:	2b70      	cmp	r3, #112	; 0x70
   19c50:	d00b      	beq.n	19c6a <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xaa>
                                : __DATE__ [2] == 't' ? 9                               \
   19c52:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   19c54:	2b74      	cmp	r3, #116	; 0x74
   19c56:	d006      	beq.n	19c66 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa6>
   19c58:	2362      	movs	r3, #98	; 0x62
   19c5a:	2b76      	cmp	r3, #118	; 0x76
   19c5c:	d101      	bne.n	19c62 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa2>
   19c5e:	230b      	movs	r3, #11
   19c60:	e00c      	b.n	19c7c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   19c62:	230c      	movs	r3, #12
   19c64:	e00a      	b.n	19c7c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   19c66:	230a      	movs	r3, #10
   19c68:	e008      	b.n	19c7c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   19c6a:	2309      	movs	r3, #9
   19c6c:	e006      	b.n	19c7c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   19c6e:	2308      	movs	r3, #8
   19c70:	e004      	b.n	19c7c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   19c72:	2307      	movs	r3, #7
   19c74:	e002      	b.n	19c7c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   19c76:	2305      	movs	r3, #5
   19c78:	e000      	b.n	19c7c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   19c7a:	2302      	movs	r3, #2
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   19c7c:	687a      	ldr	r2, [r7, #4]
   19c7e:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
		compilationDateTime.date.day   = ((__DATE__ [4]==' ' ? 0 : __DATE__  [4]-'0')*10+(__DATE__[5]-'0'));
   19c82:	2320      	movs	r3, #32
   19c84:	2b20      	cmp	r3, #32
   19c86:	d008      	beq.n	19c9a <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xda>
   19c88:	2320      	movs	r3, #32
   19c8a:	3b30      	subs	r3, #48	; 0x30
   19c8c:	b2db      	uxtb	r3, r3
   19c8e:	461a      	mov	r2, r3
   19c90:	0092      	lsls	r2, r2, #2
   19c92:	4413      	add	r3, r2
   19c94:	005b      	lsls	r3, r3, #1
   19c96:	b2db      	uxtb	r3, r3
   19c98:	e000      	b.n	19c9c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xdc>
   19c9a:	2300      	movs	r3, #0
   19c9c:	2232      	movs	r2, #50	; 0x32
   19c9e:	4413      	add	r3, r2
   19ca0:	b2db      	uxtb	r3, r3
   19ca2:	3b30      	subs	r3, #48	; 0x30
   19ca4:	b2da      	uxtb	r2, r3
   19ca6:	687b      	ldr	r3, [r7, #4]
   19ca8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		compilationDateTime.time.hour = (((__TIME__[0]-'0')*10) + (__TIME__[1]-'0'));
   19cac:	2331      	movs	r3, #49	; 0x31
   19cae:	3b30      	subs	r3, #48	; 0x30
   19cb0:	b2db      	uxtb	r3, r3
   19cb2:	461a      	mov	r2, r3
   19cb4:	0092      	lsls	r2, r2, #2
   19cb6:	4413      	add	r3, r2
   19cb8:	005b      	lsls	r3, r3, #1
   19cba:	b2db      	uxtb	r3, r3
   19cbc:	2232      	movs	r2, #50	; 0x32
   19cbe:	4413      	add	r3, r2
   19cc0:	b2db      	uxtb	r3, r3
   19cc2:	3b30      	subs	r3, #48	; 0x30
   19cc4:	b2da      	uxtb	r2, r3
   19cc6:	687b      	ldr	r3, [r7, #4]
   19cc8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		compilationDateTime.time.min  = (((__TIME__[3]-'0')*10) + (__TIME__[4]-'0'));
   19ccc:	2333      	movs	r3, #51	; 0x33
   19cce:	3b30      	subs	r3, #48	; 0x30
   19cd0:	b2db      	uxtb	r3, r3
   19cd2:	461a      	mov	r2, r3
   19cd4:	0092      	lsls	r2, r2, #2
   19cd6:	4413      	add	r3, r2
   19cd8:	005b      	lsls	r3, r3, #1
   19cda:	b2db      	uxtb	r3, r3
   19cdc:	2230      	movs	r2, #48	; 0x30
   19cde:	4413      	add	r3, r2
   19ce0:	b2db      	uxtb	r3, r3
   19ce2:	3b30      	subs	r3, #48	; 0x30
   19ce4:	b2da      	uxtb	r2, r3
   19ce6:	687b      	ldr	r3, [r7, #4]
   19ce8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		compilationDateTime.time.sec  = (((__TIME__[6]-'0')*10) + (__TIME__[7]-'0'));
   19cec:	2330      	movs	r3, #48	; 0x30
   19cee:	3b30      	subs	r3, #48	; 0x30
   19cf0:	b2db      	uxtb	r3, r3
   19cf2:	461a      	mov	r2, r3
   19cf4:	0092      	lsls	r2, r2, #2
   19cf6:	4413      	add	r3, r2
   19cf8:	005b      	lsls	r3, r3, #1
   19cfa:	b2db      	uxtb	r3, r3
   19cfc:	2231      	movs	r2, #49	; 0x31
   19cfe:	4413      	add	r3, r2
   19d00:	b2db      	uxtb	r3, r3
   19d02:	3b30      	subs	r3, #48	; 0x30
   19d04:	b2da      	uxtb	r2, r3
   19d06:	687b      	ldr	r3, [r7, #4]
   19d08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		compiled_time=__TIME__;
   19d0c:	687b      	ldr	r3, [r7, #4]
   19d0e:	4a04      	ldr	r2, [pc, #16]	; (19d20 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x160>)
   19d10:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	}
   19d14:	bf00      	nop
   19d16:	370c      	adds	r7, #12
   19d18:	46bd      	mov	sp, r7
   19d1a:	bc80      	pop	{r7}
   19d1c:	4770      	bx	lr
   19d1e:	bf00      	nop
   19d20:	0001bbdc 	.word	0x0001bbdc

00019d24 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   19d24:	b580      	push	{r7, lr}
   19d26:	b082      	sub	sp, #8
   19d28:	af00      	add	r7, sp, #0
   19d2a:	6078      	str	r0, [r7, #4]
   19d2c:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   19d2e:	687b      	ldr	r3, [r7, #4]
   19d30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   19d34:	6839      	ldr	r1, [r7, #0]
   19d36:	4618      	mov	r0, r3
   19d38:	4b03      	ldr	r3, [pc, #12]	; (19d48 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   19d3a:	4798      	blx	r3
   19d3c:	4603      	mov	r3, r0
}
   19d3e:	4618      	mov	r0, r3
   19d40:	3708      	adds	r7, #8
   19d42:	46bd      	mov	sp, r7
   19d44:	bd80      	pop	{r7, pc}
   19d46:	bf00      	nop
   19d48:	000032cd 	.word	0x000032cd

00019d4c <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   19d4c:	b480      	push	{r7}
   19d4e:	b083      	sub	sp, #12
   19d50:	af00      	add	r7, sp, #0
   19d52:	6078      	str	r0, [r7, #4]
   19d54:	460b      	mov	r3, r1
   19d56:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   19d58:	887b      	ldrh	r3, [r7, #2]
   19d5a:	f003 0303 	and.w	r3, r3, #3
   19d5e:	2b00      	cmp	r3, #0
   19d60:	d001      	beq.n	19d66 <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   19d62:	2300      	movs	r3, #0
   19d64:	e000      	b.n	19d68 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   19d66:	2301      	movs	r3, #1
	}
}
   19d68:	4618      	mov	r0, r3
   19d6a:	370c      	adds	r7, #12
   19d6c:	46bd      	mov	sp, r7
   19d6e:	bc80      	pop	{r7}
   19d70:	4770      	bx	lr
	...

00019d74 <_ZN14Calendar_Class7SetTimeEP13calendar_time>:

uint32_t	Calendar_Class::SetTime(calendar_time *p_calendar_time){
   19d74:	b580      	push	{r7, lr}
   19d76:	b082      	sub	sp, #8
   19d78:	af00      	add	r7, sp, #0
   19d7a:	6078      	str	r0, [r7, #4]
   19d7c:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_time(ptrCalendar,p_calendar_time);
   19d7e:	687b      	ldr	r3, [r7, #4]
   19d80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   19d84:	6839      	ldr	r1, [r7, #0]
   19d86:	4618      	mov	r0, r3
   19d88:	4b03      	ldr	r3, [pc, #12]	; (19d98 <_ZN14Calendar_Class7SetTimeEP13calendar_time+0x24>)
   19d8a:	4798      	blx	r3
   19d8c:	4603      	mov	r3, r0
}
   19d8e:	4618      	mov	r0, r3
   19d90:	3708      	adds	r7, #8
   19d92:	46bd      	mov	sp, r7
   19d94:	bd80      	pop	{r7, pc}
   19d96:	bf00      	nop
   19d98:	000031bd 	.word	0x000031bd

00019d9c <_ZN14Calendar_Class7SetDateEP13calendar_date>:
uint32_t	Calendar_Class::SetDate(calendar_date *p_calendar_date){
   19d9c:	b580      	push	{r7, lr}
   19d9e:	b082      	sub	sp, #8
   19da0:	af00      	add	r7, sp, #0
   19da2:	6078      	str	r0, [r7, #4]
   19da4:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_date(ptrCalendar,p_calendar_date);
   19da6:	687b      	ldr	r3, [r7, #4]
   19da8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   19dac:	6839      	ldr	r1, [r7, #0]
   19dae:	4618      	mov	r0, r3
   19db0:	4b03      	ldr	r3, [pc, #12]	; (19dc0 <_ZN14Calendar_Class7SetDateEP13calendar_date+0x24>)
   19db2:	4798      	blx	r3
   19db4:	4603      	mov	r3, r0
}
   19db6:	4618      	mov	r0, r3
   19db8:	3708      	adds	r7, #8
   19dba:	46bd      	mov	sp, r7
   19dbc:	bd80      	pop	{r7, pc}
   19dbe:	bf00      	nop
   19dc0:	00003245 	.word	0x00003245

00019dc4 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time>:


uint32_t	Calendar_Class::SetDateTime(calendar_date_time *cdt){
   19dc4:	b580      	push	{r7, lr}
   19dc6:	b084      	sub	sp, #16
   19dc8:	af00      	add	r7, sp, #0
   19dca:	6078      	str	r0, [r7, #4]
   19dcc:	6039      	str	r1, [r7, #0]
	calendar_date	cd=cdt->date;
   19dce:	683a      	ldr	r2, [r7, #0]
   19dd0:	f107 030c 	add.w	r3, r7, #12
   19dd4:	3204      	adds	r2, #4
   19dd6:	6810      	ldr	r0, [r2, #0]
   19dd8:	6018      	str	r0, [r3, #0]
	SetDate(&cd);
   19dda:	f107 030c 	add.w	r3, r7, #12
   19dde:	4619      	mov	r1, r3
   19de0:	6878      	ldr	r0, [r7, #4]
   19de2:	4b0a      	ldr	r3, [pc, #40]	; (19e0c <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x48>)
   19de4:	4798      	blx	r3
	//GetDateTime();
	calendar_time ct=cdt->time;
   19de6:	683a      	ldr	r2, [r7, #0]
   19de8:	f107 0308 	add.w	r3, r7, #8
   19dec:	8811      	ldrh	r1, [r2, #0]
   19dee:	7892      	ldrb	r2, [r2, #2]
   19df0:	8019      	strh	r1, [r3, #0]
   19df2:	709a      	strb	r2, [r3, #2]
	return SetTime(&ct);
   19df4:	f107 0308 	add.w	r3, r7, #8
   19df8:	4619      	mov	r1, r3
   19dfa:	6878      	ldr	r0, [r7, #4]
   19dfc:	4b04      	ldr	r3, [pc, #16]	; (19e10 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x4c>)
   19dfe:	4798      	blx	r3
   19e00:	4603      	mov	r3, r0
			
}
   19e02:	4618      	mov	r0, r3
   19e04:	3710      	adds	r7, #16
   19e06:	46bd      	mov	sp, r7
   19e08:	bd80      	pop	{r7, pc}
   19e0a:	bf00      	nop
   19e0c:	00019d9d 	.word	0x00019d9d
   19e10:	00019d75 	.word	0x00019d75

00019e14 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   19e14:	b580      	push	{r7, lr}
   19e16:	b086      	sub	sp, #24
   19e18:	af00      	add	r7, sp, #0
   19e1a:	6078      	str	r0, [r7, #4]
   19e1c:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   19e1e:	2300      	movs	r3, #0
   19e20:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   19e22:	2300      	movs	r3, #0
   19e24:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   19e26:	683b      	ldr	r3, [r7, #0]
   19e28:	88db      	ldrh	r3, [r3, #6]
   19e2a:	b2da      	uxtb	r2, r3
   19e2c:	687b      	ldr	r3, [r7, #4]
   19e2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   19e32:	699b      	ldr	r3, [r3, #24]
   19e34:	b2db      	uxtb	r3, r3
   19e36:	1ad3      	subs	r3, r2, r3
   19e38:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   19e3a:	683b      	ldr	r3, [r7, #0]
   19e3c:	795b      	ldrb	r3, [r3, #5]
   19e3e:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   19e40:	683b      	ldr	r3, [r7, #0]
   19e42:	791b      	ldrb	r3, [r3, #4]
   19e44:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   19e46:	683b      	ldr	r3, [r7, #0]
   19e48:	789b      	ldrb	r3, [r3, #2]
   19e4a:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   19e4c:	683b      	ldr	r3, [r7, #0]
   19e4e:	785b      	ldrb	r3, [r3, #1]
   19e50:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   19e52:	683b      	ldr	r3, [r7, #0]
   19e54:	781b      	ldrb	r3, [r3, #0]
   19e56:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   19e58:	2300      	movs	r3, #0
   19e5a:	613b      	str	r3, [r7, #16]
   19e5c:	7bfa      	ldrb	r2, [r7, #15]
   19e5e:	693b      	ldr	r3, [r7, #16]
   19e60:	429a      	cmp	r2, r3
   19e62:	d91e      	bls.n	19ea2 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   19e64:	687b      	ldr	r3, [r7, #4]
   19e66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   19e6a:	699b      	ldr	r3, [r3, #24]
   19e6c:	b29a      	uxth	r2, r3
   19e6e:	693b      	ldr	r3, [r7, #16]
   19e70:	b29b      	uxth	r3, r3
   19e72:	4413      	add	r3, r2
   19e74:	b29b      	uxth	r3, r3
   19e76:	4619      	mov	r1, r3
   19e78:	6878      	ldr	r0, [r7, #4]
   19e7a:	4b27      	ldr	r3, [pc, #156]	; (19f18 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   19e7c:	4798      	blx	r3
   19e7e:	4603      	mov	r3, r0
   19e80:	2b00      	cmp	r3, #0
   19e82:	d006      	beq.n	19e92 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   19e84:	697b      	ldr	r3, [r7, #20]
   19e86:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   19e8a:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   19e8e:	617b      	str	r3, [r7, #20]
   19e90:	e003      	b.n	19e9a <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   19e92:	697a      	ldr	r2, [r7, #20]
   19e94:	4b21      	ldr	r3, [pc, #132]	; (19f1c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   19e96:	4413      	add	r3, r2
   19e98:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   19e9a:	693b      	ldr	r3, [r7, #16]
   19e9c:	3301      	adds	r3, #1
   19e9e:	613b      	str	r3, [r7, #16]
   19ea0:	e7dc      	b.n	19e5c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   19ea2:	2301      	movs	r3, #1
   19ea4:	613b      	str	r3, [r7, #16]
   19ea6:	7bba      	ldrb	r2, [r7, #14]
   19ea8:	693b      	ldr	r3, [r7, #16]
   19eaa:	429a      	cmp	r2, r3
   19eac:	d910      	bls.n	19ed0 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   19eae:	683b      	ldr	r3, [r7, #0]
   19eb0:	88db      	ldrh	r3, [r3, #6]
   19eb2:	4619      	mov	r1, r3
   19eb4:	693b      	ldr	r3, [r7, #16]
   19eb6:	b2db      	uxtb	r3, r3
   19eb8:	461a      	mov	r2, r3
   19eba:	6878      	ldr	r0, [r7, #4]
   19ebc:	4b18      	ldr	r3, [pc, #96]	; (19f20 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   19ebe:	4798      	blx	r3
   19ec0:	4602      	mov	r2, r0
   19ec2:	697b      	ldr	r3, [r7, #20]
   19ec4:	4413      	add	r3, r2
   19ec6:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   19ec8:	693b      	ldr	r3, [r7, #16]
   19eca:	3301      	adds	r3, #1
   19ecc:	613b      	str	r3, [r7, #16]
   19ece:	e7ea      	b.n	19ea6 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   19ed0:	7b7b      	ldrb	r3, [r7, #13]
   19ed2:	3b01      	subs	r3, #1
   19ed4:	4a13      	ldr	r2, [pc, #76]	; (19f24 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   19ed6:	fb02 f303 	mul.w	r3, r2, r3
   19eda:	461a      	mov	r2, r3
   19edc:	697b      	ldr	r3, [r7, #20]
   19ede:	4413      	add	r3, r2
   19ee0:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   19ee2:	7b3b      	ldrb	r3, [r7, #12]
   19ee4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   19ee8:	fb02 f303 	mul.w	r3, r2, r3
   19eec:	461a      	mov	r2, r3
   19eee:	697b      	ldr	r3, [r7, #20]
   19ef0:	4413      	add	r3, r2
   19ef2:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   19ef4:	7afa      	ldrb	r2, [r7, #11]
   19ef6:	4613      	mov	r3, r2
   19ef8:	011b      	lsls	r3, r3, #4
   19efa:	1a9b      	subs	r3, r3, r2
   19efc:	009b      	lsls	r3, r3, #2
   19efe:	461a      	mov	r2, r3
   19f00:	697b      	ldr	r3, [r7, #20]
   19f02:	4413      	add	r3, r2
   19f04:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   19f06:	7abb      	ldrb	r3, [r7, #10]
   19f08:	697a      	ldr	r2, [r7, #20]
   19f0a:	4413      	add	r3, r2
   19f0c:	617b      	str	r3, [r7, #20]

	return tmp;
   19f0e:	697b      	ldr	r3, [r7, #20]
}
   19f10:	4618      	mov	r0, r3
   19f12:	3718      	adds	r7, #24
   19f14:	46bd      	mov	sp, r7
   19f16:	bd80      	pop	{r7, pc}
   19f18:	00019d4d 	.word	0x00019d4d
   19f1c:	01e13380 	.word	0x01e13380
   19f20:	00019f29 	.word	0x00019f29
   19f24:	00015180 	.word	0x00015180

00019f28 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   19f28:	b580      	push	{r7, lr}
   19f2a:	b086      	sub	sp, #24
   19f2c:	af00      	add	r7, sp, #0
   19f2e:	60f8      	str	r0, [r7, #12]
   19f30:	60b9      	str	r1, [r7, #8]
   19f32:	4613      	mov	r3, r2
   19f34:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   19f36:	2300      	movs	r3, #0
   19f38:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   19f3a:	68bb      	ldr	r3, [r7, #8]
   19f3c:	b29b      	uxth	r3, r3
   19f3e:	4619      	mov	r1, r3
   19f40:	68f8      	ldr	r0, [r7, #12]
   19f42:	4b2f      	ldr	r3, [pc, #188]	; (1a000 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   19f44:	4798      	blx	r3
   19f46:	4603      	mov	r3, r0
   19f48:	2b00      	cmp	r3, #0
   19f4a:	d028      	beq.n	19f9e <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   19f4c:	79fb      	ldrb	r3, [r7, #7]
   19f4e:	3b01      	subs	r3, #1
   19f50:	2b0b      	cmp	r3, #11
   19f52:	d84c      	bhi.n	19fee <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   19f54:	a201      	add	r2, pc, #4	; (adr r2, 19f5c <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   19f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19f5a:	bf00      	nop
   19f5c:	00019f8d 	.word	0x00019f8d
   19f60:	00019f93 	.word	0x00019f93
   19f64:	00019f8d 	.word	0x00019f8d
   19f68:	00019f99 	.word	0x00019f99
   19f6c:	00019f8d 	.word	0x00019f8d
   19f70:	00019f99 	.word	0x00019f99
   19f74:	00019f8d 	.word	0x00019f8d
   19f78:	00019f8d 	.word	0x00019f8d
   19f7c:	00019f99 	.word	0x00019f99
   19f80:	00019f8d 	.word	0x00019f8d
   19f84:	00019f99 	.word	0x00019f99
   19f88:	00019f8d 	.word	0x00019f8d
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   19f8c:	4b1d      	ldr	r3, [pc, #116]	; (1a004 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   19f8e:	617b      	str	r3, [r7, #20]
			break;
   19f90:	e030      	b.n	19ff4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   19f92:	4b1d      	ldr	r3, [pc, #116]	; (1a008 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   19f94:	617b      	str	r3, [r7, #20]
			break;
   19f96:	e02d      	b.n	19ff4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   19f98:	4b1c      	ldr	r3, [pc, #112]	; (1a00c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   19f9a:	617b      	str	r3, [r7, #20]
			break;
   19f9c:	e02a      	b.n	19ff4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   19f9e:	79fb      	ldrb	r3, [r7, #7]
   19fa0:	3b01      	subs	r3, #1
   19fa2:	2b0b      	cmp	r3, #11
   19fa4:	d825      	bhi.n	19ff2 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   19fa6:	a201      	add	r2, pc, #4	; (adr r2, 19fac <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   19fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19fac:	00019fdd 	.word	0x00019fdd
   19fb0:	00019fe3 	.word	0x00019fe3
   19fb4:	00019fdd 	.word	0x00019fdd
   19fb8:	00019fe9 	.word	0x00019fe9
   19fbc:	00019fdd 	.word	0x00019fdd
   19fc0:	00019fe9 	.word	0x00019fe9
   19fc4:	00019fdd 	.word	0x00019fdd
   19fc8:	00019fdd 	.word	0x00019fdd
   19fcc:	00019fe9 	.word	0x00019fe9
   19fd0:	00019fdd 	.word	0x00019fdd
   19fd4:	00019fe9 	.word	0x00019fe9
   19fd8:	00019fdd 	.word	0x00019fdd
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   19fdc:	4b09      	ldr	r3, [pc, #36]	; (1a004 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   19fde:	617b      	str	r3, [r7, #20]
			break;
   19fe0:	e008      	b.n	19ff4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   19fe2:	4b0b      	ldr	r3, [pc, #44]	; (1a010 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   19fe4:	617b      	str	r3, [r7, #20]
			break;
   19fe6:	e005      	b.n	19ff4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   19fe8:	4b08      	ldr	r3, [pc, #32]	; (1a00c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   19fea:	617b      	str	r3, [r7, #20]
			break;
   19fec:	e002      	b.n	19ff4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   19fee:	bf00      	nop
   19ff0:	e000      	b.n	19ff4 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   19ff2:	bf00      	nop
		}
	}

	return sec_in_month;
   19ff4:	697b      	ldr	r3, [r7, #20]
}
   19ff6:	4618      	mov	r0, r3
   19ff8:	3718      	adds	r7, #24
   19ffa:	46bd      	mov	sp, r7
   19ffc:	bd80      	pop	{r7, pc}
   19ffe:	bf00      	nop
   1a000:	00019d4d 	.word	0x00019d4d
   1a004:	0028de80 	.word	0x0028de80
   1a008:	00263b80 	.word	0x00263b80
   1a00c:	00278d00 	.word	0x00278d00
   1a010:	0024ea00 	.word	0x0024ea00

0001a014 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

   1a014:	b580      	push	{r7, lr}
   1a016:	b082      	sub	sp, #8
   1a018:	af00      	add	r7, sp, #0
   1a01a:	6078      	str	r0, [r7, #4]
   1a01c:	6039      	str	r1, [r7, #0]
   1a01e:	687b      	ldr	r3, [r7, #4]
   1a020:	2b01      	cmp	r3, #1
   1a022:	d10d      	bne.n	1a040 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1a024:	683b      	ldr	r3, [r7, #0]
   1a026:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a02a:	4293      	cmp	r3, r2
   1a02c:	d108      	bne.n	1a040 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1a02e:	4906      	ldr	r1, [pc, #24]	; (1a048 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1a030:	4806      	ldr	r0, [pc, #24]	; (1a04c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1a032:	4b07      	ldr	r3, [pc, #28]	; (1a050 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1a034:	4798      	blx	r3
   1a036:	4a07      	ldr	r2, [pc, #28]	; (1a054 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   1a038:	4907      	ldr	r1, [pc, #28]	; (1a058 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1a03a:	4804      	ldr	r0, [pc, #16]	; (1a04c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1a03c:	4b07      	ldr	r3, [pc, #28]	; (1a05c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1a03e:	4798      	blx	r3
   1a040:	bf00      	nop
   1a042:	3708      	adds	r7, #8
   1a044:	46bd      	mov	sp, r7
   1a046:	bd80      	pop	{r7, pc}
   1a048:	2000e0a0 	.word	0x2000e0a0
   1a04c:	2000de18 	.word	0x2000de18
   1a050:	0001995d 	.word	0x0001995d
   1a054:	20000000 	.word	0x20000000
   1a058:	00019999 	.word	0x00019999
   1a05c:	0001a0b5 	.word	0x0001a0b5

0001a060 <_GLOBAL__sub_I_ptrCalendarClass>:
   1a060:	b580      	push	{r7, lr}
   1a062:	af00      	add	r7, sp, #0
   1a064:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a068:	2001      	movs	r0, #1
   1a06a:	4b01      	ldr	r3, [pc, #4]	; (1a070 <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   1a06c:	4798      	blx	r3
   1a06e:	bd80      	pop	{r7, pc}
   1a070:	0001a015 	.word	0x0001a015

0001a074 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
//#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   1a074:	b480      	push	{r7}
   1a076:	b083      	sub	sp, #12
   1a078:	af00      	add	r7, sp, #0
   1a07a:	6078      	str	r0, [r7, #4]
   1a07c:	4a04      	ldr	r2, [pc, #16]	; (1a090 <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   1a07e:	687b      	ldr	r3, [r7, #4]
   1a080:	601a      	str	r2, [r3, #0]
{
} //~D
   1a082:	687b      	ldr	r3, [r7, #4]
   1a084:	4618      	mov	r0, r3
   1a086:	370c      	adds	r7, #12
   1a088:	46bd      	mov	sp, r7
   1a08a:	bc80      	pop	{r7}
   1a08c:	4770      	bx	lr
   1a08e:	bf00      	nop
   1a090:	0001bc00 	.word	0x0001bc00

0001a094 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   1a094:	b480      	push	{r7}
   1a096:	b083      	sub	sp, #12
   1a098:	af00      	add	r7, sp, #0
   1a09a:	6078      	str	r0, [r7, #4]
   1a09c:	4a04      	ldr	r2, [pc, #16]	; (1a0b0 <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   1a09e:	687b      	ldr	r3, [r7, #4]
   1a0a0:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   1a0a2:	687b      	ldr	r3, [r7, #4]
   1a0a4:	4618      	mov	r0, r3
   1a0a6:	370c      	adds	r7, #12
   1a0a8:	46bd      	mov	sp, r7
   1a0aa:	bc80      	pop	{r7}
   1a0ac:	4770      	bx	lr
   1a0ae:	bf00      	nop
   1a0b0:	0001bc00 	.word	0x0001bc00

0001a0b4 <__aeabi_atexit>:
   1a0b4:	460b      	mov	r3, r1
   1a0b6:	4601      	mov	r1, r0
   1a0b8:	4618      	mov	r0, r3
   1a0ba:	f000 ba7f 	b.w	1a5bc <__cxa_atexit>
   1a0be:	bf00      	nop

0001a0c0 <__aeabi_frsub>:
   1a0c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1a0c4:	e002      	b.n	1a0cc <__addsf3>
   1a0c6:	bf00      	nop

0001a0c8 <__aeabi_fsub>:
   1a0c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001a0cc <__addsf3>:
   1a0cc:	0042      	lsls	r2, r0, #1
   1a0ce:	bf1f      	itttt	ne
   1a0d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1a0d4:	ea92 0f03 	teqne	r2, r3
   1a0d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1a0dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1a0e0:	d06a      	beq.n	1a1b8 <__addsf3+0xec>
   1a0e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1a0e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1a0ea:	bfc1      	itttt	gt
   1a0ec:	18d2      	addgt	r2, r2, r3
   1a0ee:	4041      	eorgt	r1, r0
   1a0f0:	4048      	eorgt	r0, r1
   1a0f2:	4041      	eorgt	r1, r0
   1a0f4:	bfb8      	it	lt
   1a0f6:	425b      	neglt	r3, r3
   1a0f8:	2b19      	cmp	r3, #25
   1a0fa:	bf88      	it	hi
   1a0fc:	4770      	bxhi	lr
   1a0fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1a102:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a106:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a10a:	bf18      	it	ne
   1a10c:	4240      	negne	r0, r0
   1a10e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1a112:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1a116:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1a11a:	bf18      	it	ne
   1a11c:	4249      	negne	r1, r1
   1a11e:	ea92 0f03 	teq	r2, r3
   1a122:	d03f      	beq.n	1a1a4 <__addsf3+0xd8>
   1a124:	f1a2 0201 	sub.w	r2, r2, #1
   1a128:	fa41 fc03 	asr.w	ip, r1, r3
   1a12c:	eb10 000c 	adds.w	r0, r0, ip
   1a130:	f1c3 0320 	rsb	r3, r3, #32
   1a134:	fa01 f103 	lsl.w	r1, r1, r3
   1a138:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1a13c:	d502      	bpl.n	1a144 <__addsf3+0x78>
   1a13e:	4249      	negs	r1, r1
   1a140:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1a144:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1a148:	d313      	bcc.n	1a172 <__addsf3+0xa6>
   1a14a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1a14e:	d306      	bcc.n	1a15e <__addsf3+0x92>
   1a150:	0840      	lsrs	r0, r0, #1
   1a152:	ea4f 0131 	mov.w	r1, r1, rrx
   1a156:	f102 0201 	add.w	r2, r2, #1
   1a15a:	2afe      	cmp	r2, #254	; 0xfe
   1a15c:	d251      	bcs.n	1a202 <__addsf3+0x136>
   1a15e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1a162:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1a166:	bf08      	it	eq
   1a168:	f020 0001 	biceq.w	r0, r0, #1
   1a16c:	ea40 0003 	orr.w	r0, r0, r3
   1a170:	4770      	bx	lr
   1a172:	0049      	lsls	r1, r1, #1
   1a174:	eb40 0000 	adc.w	r0, r0, r0
   1a178:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1a17c:	f1a2 0201 	sub.w	r2, r2, #1
   1a180:	d1ed      	bne.n	1a15e <__addsf3+0x92>
   1a182:	fab0 fc80 	clz	ip, r0
   1a186:	f1ac 0c08 	sub.w	ip, ip, #8
   1a18a:	ebb2 020c 	subs.w	r2, r2, ip
   1a18e:	fa00 f00c 	lsl.w	r0, r0, ip
   1a192:	bfaa      	itet	ge
   1a194:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1a198:	4252      	neglt	r2, r2
   1a19a:	4318      	orrge	r0, r3
   1a19c:	bfbc      	itt	lt
   1a19e:	40d0      	lsrlt	r0, r2
   1a1a0:	4318      	orrlt	r0, r3
   1a1a2:	4770      	bx	lr
   1a1a4:	f092 0f00 	teq	r2, #0
   1a1a8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1a1ac:	bf06      	itte	eq
   1a1ae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1a1b2:	3201      	addeq	r2, #1
   1a1b4:	3b01      	subne	r3, #1
   1a1b6:	e7b5      	b.n	1a124 <__addsf3+0x58>
   1a1b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1a1bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1a1c0:	bf18      	it	ne
   1a1c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1a1c6:	d021      	beq.n	1a20c <__addsf3+0x140>
   1a1c8:	ea92 0f03 	teq	r2, r3
   1a1cc:	d004      	beq.n	1a1d8 <__addsf3+0x10c>
   1a1ce:	f092 0f00 	teq	r2, #0
   1a1d2:	bf08      	it	eq
   1a1d4:	4608      	moveq	r0, r1
   1a1d6:	4770      	bx	lr
   1a1d8:	ea90 0f01 	teq	r0, r1
   1a1dc:	bf1c      	itt	ne
   1a1de:	2000      	movne	r0, #0
   1a1e0:	4770      	bxne	lr
   1a1e2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1a1e6:	d104      	bne.n	1a1f2 <__addsf3+0x126>
   1a1e8:	0040      	lsls	r0, r0, #1
   1a1ea:	bf28      	it	cs
   1a1ec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1a1f0:	4770      	bx	lr
   1a1f2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1a1f6:	bf3c      	itt	cc
   1a1f8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1a1fc:	4770      	bxcc	lr
   1a1fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1a202:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1a206:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a20a:	4770      	bx	lr
   1a20c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1a210:	bf16      	itet	ne
   1a212:	4608      	movne	r0, r1
   1a214:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1a218:	4601      	movne	r1, r0
   1a21a:	0242      	lsls	r2, r0, #9
   1a21c:	bf06      	itte	eq
   1a21e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1a222:	ea90 0f01 	teqeq	r0, r1
   1a226:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1a22a:	4770      	bx	lr

0001a22c <__aeabi_ui2f>:
   1a22c:	f04f 0300 	mov.w	r3, #0
   1a230:	e004      	b.n	1a23c <__aeabi_i2f+0x8>
   1a232:	bf00      	nop

0001a234 <__aeabi_i2f>:
   1a234:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1a238:	bf48      	it	mi
   1a23a:	4240      	negmi	r0, r0
   1a23c:	ea5f 0c00 	movs.w	ip, r0
   1a240:	bf08      	it	eq
   1a242:	4770      	bxeq	lr
   1a244:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1a248:	4601      	mov	r1, r0
   1a24a:	f04f 0000 	mov.w	r0, #0
   1a24e:	e01c      	b.n	1a28a <__aeabi_l2f+0x2a>

0001a250 <__aeabi_ul2f>:
   1a250:	ea50 0201 	orrs.w	r2, r0, r1
   1a254:	bf08      	it	eq
   1a256:	4770      	bxeq	lr
   1a258:	f04f 0300 	mov.w	r3, #0
   1a25c:	e00a      	b.n	1a274 <__aeabi_l2f+0x14>
   1a25e:	bf00      	nop

0001a260 <__aeabi_l2f>:
   1a260:	ea50 0201 	orrs.w	r2, r0, r1
   1a264:	bf08      	it	eq
   1a266:	4770      	bxeq	lr
   1a268:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1a26c:	d502      	bpl.n	1a274 <__aeabi_l2f+0x14>
   1a26e:	4240      	negs	r0, r0
   1a270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a274:	ea5f 0c01 	movs.w	ip, r1
   1a278:	bf02      	ittt	eq
   1a27a:	4684      	moveq	ip, r0
   1a27c:	4601      	moveq	r1, r0
   1a27e:	2000      	moveq	r0, #0
   1a280:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1a284:	bf08      	it	eq
   1a286:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1a28a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1a28e:	fabc f28c 	clz	r2, ip
   1a292:	3a08      	subs	r2, #8
   1a294:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1a298:	db10      	blt.n	1a2bc <__aeabi_l2f+0x5c>
   1a29a:	fa01 fc02 	lsl.w	ip, r1, r2
   1a29e:	4463      	add	r3, ip
   1a2a0:	fa00 fc02 	lsl.w	ip, r0, r2
   1a2a4:	f1c2 0220 	rsb	r2, r2, #32
   1a2a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1a2ac:	fa20 f202 	lsr.w	r2, r0, r2
   1a2b0:	eb43 0002 	adc.w	r0, r3, r2
   1a2b4:	bf08      	it	eq
   1a2b6:	f020 0001 	biceq.w	r0, r0, #1
   1a2ba:	4770      	bx	lr
   1a2bc:	f102 0220 	add.w	r2, r2, #32
   1a2c0:	fa01 fc02 	lsl.w	ip, r1, r2
   1a2c4:	f1c2 0220 	rsb	r2, r2, #32
   1a2c8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1a2cc:	fa21 f202 	lsr.w	r2, r1, r2
   1a2d0:	eb43 0002 	adc.w	r0, r3, r2
   1a2d4:	bf08      	it	eq
   1a2d6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1a2da:	4770      	bx	lr

0001a2dc <__aeabi_fmul>:
   1a2dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1a2e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1a2e4:	bf1e      	ittt	ne
   1a2e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1a2ea:	ea92 0f0c 	teqne	r2, ip
   1a2ee:	ea93 0f0c 	teqne	r3, ip
   1a2f2:	d06f      	beq.n	1a3d4 <__aeabi_fmul+0xf8>
   1a2f4:	441a      	add	r2, r3
   1a2f6:	ea80 0c01 	eor.w	ip, r0, r1
   1a2fa:	0240      	lsls	r0, r0, #9
   1a2fc:	bf18      	it	ne
   1a2fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1a302:	d01e      	beq.n	1a342 <__aeabi_fmul+0x66>
   1a304:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1a308:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1a30c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1a310:	fba0 3101 	umull	r3, r1, r0, r1
   1a314:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1a318:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1a31c:	bf3e      	ittt	cc
   1a31e:	0049      	lslcc	r1, r1, #1
   1a320:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   1a324:	005b      	lslcc	r3, r3, #1
   1a326:	ea40 0001 	orr.w	r0, r0, r1
   1a32a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1a32e:	2afd      	cmp	r2, #253	; 0xfd
   1a330:	d81d      	bhi.n	1a36e <__aeabi_fmul+0x92>
   1a332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1a336:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1a33a:	bf08      	it	eq
   1a33c:	f020 0001 	biceq.w	r0, r0, #1
   1a340:	4770      	bx	lr
   1a342:	f090 0f00 	teq	r0, #0
   1a346:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1a34a:	bf08      	it	eq
   1a34c:	0249      	lsleq	r1, r1, #9
   1a34e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1a352:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1a356:	3a7f      	subs	r2, #127	; 0x7f
   1a358:	bfc2      	ittt	gt
   1a35a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1a35e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1a362:	4770      	bxgt	lr
   1a364:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a368:	f04f 0300 	mov.w	r3, #0
   1a36c:	3a01      	subs	r2, #1
   1a36e:	dc5d      	bgt.n	1a42c <__aeabi_fmul+0x150>
   1a370:	f112 0f19 	cmn.w	r2, #25
   1a374:	bfdc      	itt	le
   1a376:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1a37a:	4770      	bxle	lr
   1a37c:	f1c2 0200 	rsb	r2, r2, #0
   1a380:	0041      	lsls	r1, r0, #1
   1a382:	fa21 f102 	lsr.w	r1, r1, r2
   1a386:	f1c2 0220 	rsb	r2, r2, #32
   1a38a:	fa00 fc02 	lsl.w	ip, r0, r2
   1a38e:	ea5f 0031 	movs.w	r0, r1, rrx
   1a392:	f140 0000 	adc.w	r0, r0, #0
   1a396:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1a39a:	bf08      	it	eq
   1a39c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1a3a0:	4770      	bx	lr
   1a3a2:	f092 0f00 	teq	r2, #0
   1a3a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1a3aa:	bf02      	ittt	eq
   1a3ac:	0040      	lsleq	r0, r0, #1
   1a3ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1a3b2:	3a01      	subeq	r2, #1
   1a3b4:	d0f9      	beq.n	1a3aa <__aeabi_fmul+0xce>
   1a3b6:	ea40 000c 	orr.w	r0, r0, ip
   1a3ba:	f093 0f00 	teq	r3, #0
   1a3be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1a3c2:	bf02      	ittt	eq
   1a3c4:	0049      	lsleq	r1, r1, #1
   1a3c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1a3ca:	3b01      	subeq	r3, #1
   1a3cc:	d0f9      	beq.n	1a3c2 <__aeabi_fmul+0xe6>
   1a3ce:	ea41 010c 	orr.w	r1, r1, ip
   1a3d2:	e78f      	b.n	1a2f4 <__aeabi_fmul+0x18>
   1a3d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1a3d8:	ea92 0f0c 	teq	r2, ip
   1a3dc:	bf18      	it	ne
   1a3de:	ea93 0f0c 	teqne	r3, ip
   1a3e2:	d00a      	beq.n	1a3fa <__aeabi_fmul+0x11e>
   1a3e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1a3e8:	bf18      	it	ne
   1a3ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1a3ee:	d1d8      	bne.n	1a3a2 <__aeabi_fmul+0xc6>
   1a3f0:	ea80 0001 	eor.w	r0, r0, r1
   1a3f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1a3f8:	4770      	bx	lr
   1a3fa:	f090 0f00 	teq	r0, #0
   1a3fe:	bf17      	itett	ne
   1a400:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1a404:	4608      	moveq	r0, r1
   1a406:	f091 0f00 	teqne	r1, #0
   1a40a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1a40e:	d014      	beq.n	1a43a <__aeabi_fmul+0x15e>
   1a410:	ea92 0f0c 	teq	r2, ip
   1a414:	d101      	bne.n	1a41a <__aeabi_fmul+0x13e>
   1a416:	0242      	lsls	r2, r0, #9
   1a418:	d10f      	bne.n	1a43a <__aeabi_fmul+0x15e>
   1a41a:	ea93 0f0c 	teq	r3, ip
   1a41e:	d103      	bne.n	1a428 <__aeabi_fmul+0x14c>
   1a420:	024b      	lsls	r3, r1, #9
   1a422:	bf18      	it	ne
   1a424:	4608      	movne	r0, r1
   1a426:	d108      	bne.n	1a43a <__aeabi_fmul+0x15e>
   1a428:	ea80 0001 	eor.w	r0, r0, r1
   1a42c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1a430:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1a434:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a438:	4770      	bx	lr
   1a43a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1a43e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1a442:	4770      	bx	lr

0001a444 <__aeabi_fdiv>:
   1a444:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1a448:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1a44c:	bf1e      	ittt	ne
   1a44e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1a452:	ea92 0f0c 	teqne	r2, ip
   1a456:	ea93 0f0c 	teqne	r3, ip
   1a45a:	d069      	beq.n	1a530 <__aeabi_fdiv+0xec>
   1a45c:	eba2 0203 	sub.w	r2, r2, r3
   1a460:	ea80 0c01 	eor.w	ip, r0, r1
   1a464:	0249      	lsls	r1, r1, #9
   1a466:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1a46a:	d037      	beq.n	1a4dc <__aeabi_fdiv+0x98>
   1a46c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1a470:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1a474:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1a478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1a47c:	428b      	cmp	r3, r1
   1a47e:	bf38      	it	cc
   1a480:	005b      	lslcc	r3, r3, #1
   1a482:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1a486:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1a48a:	428b      	cmp	r3, r1
   1a48c:	bf24      	itt	cs
   1a48e:	1a5b      	subcs	r3, r3, r1
   1a490:	ea40 000c 	orrcs.w	r0, r0, ip
   1a494:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1a498:	bf24      	itt	cs
   1a49a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1a49e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1a4a2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1a4a6:	bf24      	itt	cs
   1a4a8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1a4ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1a4b0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1a4b4:	bf24      	itt	cs
   1a4b6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1a4ba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1a4be:	011b      	lsls	r3, r3, #4
   1a4c0:	bf18      	it	ne
   1a4c2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1a4c6:	d1e0      	bne.n	1a48a <__aeabi_fdiv+0x46>
   1a4c8:	2afd      	cmp	r2, #253	; 0xfd
   1a4ca:	f63f af50 	bhi.w	1a36e <__aeabi_fmul+0x92>
   1a4ce:	428b      	cmp	r3, r1
   1a4d0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1a4d4:	bf08      	it	eq
   1a4d6:	f020 0001 	biceq.w	r0, r0, #1
   1a4da:	4770      	bx	lr
   1a4dc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1a4e0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1a4e4:	327f      	adds	r2, #127	; 0x7f
   1a4e6:	bfc2      	ittt	gt
   1a4e8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1a4ec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1a4f0:	4770      	bxgt	lr
   1a4f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a4f6:	f04f 0300 	mov.w	r3, #0
   1a4fa:	3a01      	subs	r2, #1
   1a4fc:	e737      	b.n	1a36e <__aeabi_fmul+0x92>
   1a4fe:	f092 0f00 	teq	r2, #0
   1a502:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1a506:	bf02      	ittt	eq
   1a508:	0040      	lsleq	r0, r0, #1
   1a50a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1a50e:	3a01      	subeq	r2, #1
   1a510:	d0f9      	beq.n	1a506 <__aeabi_fdiv+0xc2>
   1a512:	ea40 000c 	orr.w	r0, r0, ip
   1a516:	f093 0f00 	teq	r3, #0
   1a51a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1a51e:	bf02      	ittt	eq
   1a520:	0049      	lsleq	r1, r1, #1
   1a522:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1a526:	3b01      	subeq	r3, #1
   1a528:	d0f9      	beq.n	1a51e <__aeabi_fdiv+0xda>
   1a52a:	ea41 010c 	orr.w	r1, r1, ip
   1a52e:	e795      	b.n	1a45c <__aeabi_fdiv+0x18>
   1a530:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1a534:	ea92 0f0c 	teq	r2, ip
   1a538:	d108      	bne.n	1a54c <__aeabi_fdiv+0x108>
   1a53a:	0242      	lsls	r2, r0, #9
   1a53c:	f47f af7d 	bne.w	1a43a <__aeabi_fmul+0x15e>
   1a540:	ea93 0f0c 	teq	r3, ip
   1a544:	f47f af70 	bne.w	1a428 <__aeabi_fmul+0x14c>
   1a548:	4608      	mov	r0, r1
   1a54a:	e776      	b.n	1a43a <__aeabi_fmul+0x15e>
   1a54c:	ea93 0f0c 	teq	r3, ip
   1a550:	d104      	bne.n	1a55c <__aeabi_fdiv+0x118>
   1a552:	024b      	lsls	r3, r1, #9
   1a554:	f43f af4c 	beq.w	1a3f0 <__aeabi_fmul+0x114>
   1a558:	4608      	mov	r0, r1
   1a55a:	e76e      	b.n	1a43a <__aeabi_fmul+0x15e>
   1a55c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1a560:	bf18      	it	ne
   1a562:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1a566:	d1ca      	bne.n	1a4fe <__aeabi_fdiv+0xba>
   1a568:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1a56c:	f47f af5c 	bne.w	1a428 <__aeabi_fmul+0x14c>
   1a570:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1a574:	f47f af3c 	bne.w	1a3f0 <__aeabi_fmul+0x114>
   1a578:	e75f      	b.n	1a43a <__aeabi_fmul+0x15e>
   1a57a:	bf00      	nop

0001a57c <__aeabi_f2uiz>:
   1a57c:	0042      	lsls	r2, r0, #1
   1a57e:	d20e      	bcs.n	1a59e <__aeabi_f2uiz+0x22>
   1a580:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1a584:	d30b      	bcc.n	1a59e <__aeabi_f2uiz+0x22>
   1a586:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1a58a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1a58e:	d409      	bmi.n	1a5a4 <__aeabi_f2uiz+0x28>
   1a590:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1a594:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1a598:	fa23 f002 	lsr.w	r0, r3, r2
   1a59c:	4770      	bx	lr
   1a59e:	f04f 0000 	mov.w	r0, #0
   1a5a2:	4770      	bx	lr
   1a5a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1a5a8:	d101      	bne.n	1a5ae <__aeabi_f2uiz+0x32>
   1a5aa:	0242      	lsls	r2, r0, #9
   1a5ac:	d102      	bne.n	1a5b4 <__aeabi_f2uiz+0x38>
   1a5ae:	f04f 30ff 	mov.w	r0, #4294967295
   1a5b2:	4770      	bx	lr
   1a5b4:	f04f 0000 	mov.w	r0, #0
   1a5b8:	4770      	bx	lr
   1a5ba:	bf00      	nop

0001a5bc <__cxa_atexit>:
   1a5bc:	4613      	mov	r3, r2
   1a5be:	460a      	mov	r2, r1
   1a5c0:	4601      	mov	r1, r0
   1a5c2:	2002      	movs	r0, #2
   1a5c4:	f000 ba2a 	b.w	1aa1c <__register_exitproc>

0001a5c8 <ffs>:
   1a5c8:	b140      	cbz	r0, 1a5dc <ffs+0x14>
   1a5ca:	2300      	movs	r3, #0
   1a5cc:	fa40 f103 	asr.w	r1, r0, r3
   1a5d0:	1c5a      	adds	r2, r3, #1
   1a5d2:	07c9      	lsls	r1, r1, #31
   1a5d4:	4613      	mov	r3, r2
   1a5d6:	d5f9      	bpl.n	1a5cc <ffs+0x4>
   1a5d8:	4610      	mov	r0, r2
   1a5da:	4770      	bx	lr
   1a5dc:	4602      	mov	r2, r0
   1a5de:	4610      	mov	r0, r2
   1a5e0:	4770      	bx	lr
   1a5e2:	bf00      	nop

0001a5e4 <__libc_init_array>:
   1a5e4:	b570      	push	{r4, r5, r6, lr}
   1a5e6:	4e0f      	ldr	r6, [pc, #60]	; (1a624 <__libc_init_array+0x40>)
   1a5e8:	4d0f      	ldr	r5, [pc, #60]	; (1a628 <__libc_init_array+0x44>)
   1a5ea:	1b76      	subs	r6, r6, r5
   1a5ec:	10b6      	asrs	r6, r6, #2
   1a5ee:	bf18      	it	ne
   1a5f0:	2400      	movne	r4, #0
   1a5f2:	d005      	beq.n	1a600 <__libc_init_array+0x1c>
   1a5f4:	3401      	adds	r4, #1
   1a5f6:	f855 3b04 	ldr.w	r3, [r5], #4
   1a5fa:	4798      	blx	r3
   1a5fc:	42a6      	cmp	r6, r4
   1a5fe:	d1f9      	bne.n	1a5f4 <__libc_init_array+0x10>
   1a600:	4e0a      	ldr	r6, [pc, #40]	; (1a62c <__libc_init_array+0x48>)
   1a602:	4d0b      	ldr	r5, [pc, #44]	; (1a630 <__libc_init_array+0x4c>)
   1a604:	1b76      	subs	r6, r6, r5
   1a606:	f001 fb01 	bl	1bc0c <_init>
   1a60a:	10b6      	asrs	r6, r6, #2
   1a60c:	bf18      	it	ne
   1a60e:	2400      	movne	r4, #0
   1a610:	d006      	beq.n	1a620 <__libc_init_array+0x3c>
   1a612:	3401      	adds	r4, #1
   1a614:	f855 3b04 	ldr.w	r3, [r5], #4
   1a618:	4798      	blx	r3
   1a61a:	42a6      	cmp	r6, r4
   1a61c:	d1f9      	bne.n	1a612 <__libc_init_array+0x2e>
   1a61e:	bd70      	pop	{r4, r5, r6, pc}
   1a620:	bd70      	pop	{r4, r5, r6, pc}
   1a622:	bf00      	nop
   1a624:	0001bc18 	.word	0x0001bc18
   1a628:	0001bc18 	.word	0x0001bc18
   1a62c:	0001bc8c 	.word	0x0001bc8c
   1a630:	0001bc18 	.word	0x0001bc18

0001a634 <memcpy>:
   1a634:	4684      	mov	ip, r0
   1a636:	ea41 0300 	orr.w	r3, r1, r0
   1a63a:	f013 0303 	ands.w	r3, r3, #3
   1a63e:	d16d      	bne.n	1a71c <memcpy+0xe8>
   1a640:	3a40      	subs	r2, #64	; 0x40
   1a642:	d341      	bcc.n	1a6c8 <memcpy+0x94>
   1a644:	f851 3b04 	ldr.w	r3, [r1], #4
   1a648:	f840 3b04 	str.w	r3, [r0], #4
   1a64c:	f851 3b04 	ldr.w	r3, [r1], #4
   1a650:	f840 3b04 	str.w	r3, [r0], #4
   1a654:	f851 3b04 	ldr.w	r3, [r1], #4
   1a658:	f840 3b04 	str.w	r3, [r0], #4
   1a65c:	f851 3b04 	ldr.w	r3, [r1], #4
   1a660:	f840 3b04 	str.w	r3, [r0], #4
   1a664:	f851 3b04 	ldr.w	r3, [r1], #4
   1a668:	f840 3b04 	str.w	r3, [r0], #4
   1a66c:	f851 3b04 	ldr.w	r3, [r1], #4
   1a670:	f840 3b04 	str.w	r3, [r0], #4
   1a674:	f851 3b04 	ldr.w	r3, [r1], #4
   1a678:	f840 3b04 	str.w	r3, [r0], #4
   1a67c:	f851 3b04 	ldr.w	r3, [r1], #4
   1a680:	f840 3b04 	str.w	r3, [r0], #4
   1a684:	f851 3b04 	ldr.w	r3, [r1], #4
   1a688:	f840 3b04 	str.w	r3, [r0], #4
   1a68c:	f851 3b04 	ldr.w	r3, [r1], #4
   1a690:	f840 3b04 	str.w	r3, [r0], #4
   1a694:	f851 3b04 	ldr.w	r3, [r1], #4
   1a698:	f840 3b04 	str.w	r3, [r0], #4
   1a69c:	f851 3b04 	ldr.w	r3, [r1], #4
   1a6a0:	f840 3b04 	str.w	r3, [r0], #4
   1a6a4:	f851 3b04 	ldr.w	r3, [r1], #4
   1a6a8:	f840 3b04 	str.w	r3, [r0], #4
   1a6ac:	f851 3b04 	ldr.w	r3, [r1], #4
   1a6b0:	f840 3b04 	str.w	r3, [r0], #4
   1a6b4:	f851 3b04 	ldr.w	r3, [r1], #4
   1a6b8:	f840 3b04 	str.w	r3, [r0], #4
   1a6bc:	f851 3b04 	ldr.w	r3, [r1], #4
   1a6c0:	f840 3b04 	str.w	r3, [r0], #4
   1a6c4:	3a40      	subs	r2, #64	; 0x40
   1a6c6:	d2bd      	bcs.n	1a644 <memcpy+0x10>
   1a6c8:	3230      	adds	r2, #48	; 0x30
   1a6ca:	d311      	bcc.n	1a6f0 <memcpy+0xbc>
   1a6cc:	f851 3b04 	ldr.w	r3, [r1], #4
   1a6d0:	f840 3b04 	str.w	r3, [r0], #4
   1a6d4:	f851 3b04 	ldr.w	r3, [r1], #4
   1a6d8:	f840 3b04 	str.w	r3, [r0], #4
   1a6dc:	f851 3b04 	ldr.w	r3, [r1], #4
   1a6e0:	f840 3b04 	str.w	r3, [r0], #4
   1a6e4:	f851 3b04 	ldr.w	r3, [r1], #4
   1a6e8:	f840 3b04 	str.w	r3, [r0], #4
   1a6ec:	3a10      	subs	r2, #16
   1a6ee:	d2ed      	bcs.n	1a6cc <memcpy+0x98>
   1a6f0:	320c      	adds	r2, #12
   1a6f2:	d305      	bcc.n	1a700 <memcpy+0xcc>
   1a6f4:	f851 3b04 	ldr.w	r3, [r1], #4
   1a6f8:	f840 3b04 	str.w	r3, [r0], #4
   1a6fc:	3a04      	subs	r2, #4
   1a6fe:	d2f9      	bcs.n	1a6f4 <memcpy+0xc0>
   1a700:	3204      	adds	r2, #4
   1a702:	d008      	beq.n	1a716 <memcpy+0xe2>
   1a704:	07d2      	lsls	r2, r2, #31
   1a706:	bf1c      	itt	ne
   1a708:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1a70c:	f800 3b01 	strbne.w	r3, [r0], #1
   1a710:	d301      	bcc.n	1a716 <memcpy+0xe2>
   1a712:	880b      	ldrh	r3, [r1, #0]
   1a714:	8003      	strh	r3, [r0, #0]
   1a716:	4660      	mov	r0, ip
   1a718:	4770      	bx	lr
   1a71a:	bf00      	nop
   1a71c:	2a08      	cmp	r2, #8
   1a71e:	d313      	bcc.n	1a748 <memcpy+0x114>
   1a720:	078b      	lsls	r3, r1, #30
   1a722:	d08d      	beq.n	1a640 <memcpy+0xc>
   1a724:	f010 0303 	ands.w	r3, r0, #3
   1a728:	d08a      	beq.n	1a640 <memcpy+0xc>
   1a72a:	f1c3 0304 	rsb	r3, r3, #4
   1a72e:	1ad2      	subs	r2, r2, r3
   1a730:	07db      	lsls	r3, r3, #31
   1a732:	bf1c      	itt	ne
   1a734:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1a738:	f800 3b01 	strbne.w	r3, [r0], #1
   1a73c:	d380      	bcc.n	1a640 <memcpy+0xc>
   1a73e:	f831 3b02 	ldrh.w	r3, [r1], #2
   1a742:	f820 3b02 	strh.w	r3, [r0], #2
   1a746:	e77b      	b.n	1a640 <memcpy+0xc>
   1a748:	3a04      	subs	r2, #4
   1a74a:	d3d9      	bcc.n	1a700 <memcpy+0xcc>
   1a74c:	3a01      	subs	r2, #1
   1a74e:	f811 3b01 	ldrb.w	r3, [r1], #1
   1a752:	f800 3b01 	strb.w	r3, [r0], #1
   1a756:	d2f9      	bcs.n	1a74c <memcpy+0x118>
   1a758:	780b      	ldrb	r3, [r1, #0]
   1a75a:	7003      	strb	r3, [r0, #0]
   1a75c:	784b      	ldrb	r3, [r1, #1]
   1a75e:	7043      	strb	r3, [r0, #1]
   1a760:	788b      	ldrb	r3, [r1, #2]
   1a762:	7083      	strb	r3, [r0, #2]
   1a764:	4660      	mov	r0, ip
   1a766:	4770      	bx	lr

0001a768 <memset>:
   1a768:	b470      	push	{r4, r5, r6}
   1a76a:	0786      	lsls	r6, r0, #30
   1a76c:	d046      	beq.n	1a7fc <memset+0x94>
   1a76e:	1e54      	subs	r4, r2, #1
   1a770:	2a00      	cmp	r2, #0
   1a772:	d041      	beq.n	1a7f8 <memset+0x90>
   1a774:	b2ca      	uxtb	r2, r1
   1a776:	4603      	mov	r3, r0
   1a778:	e002      	b.n	1a780 <memset+0x18>
   1a77a:	f114 34ff 	adds.w	r4, r4, #4294967295
   1a77e:	d33b      	bcc.n	1a7f8 <memset+0x90>
   1a780:	f803 2b01 	strb.w	r2, [r3], #1
   1a784:	079d      	lsls	r5, r3, #30
   1a786:	d1f8      	bne.n	1a77a <memset+0x12>
   1a788:	2c03      	cmp	r4, #3
   1a78a:	d92e      	bls.n	1a7ea <memset+0x82>
   1a78c:	b2cd      	uxtb	r5, r1
   1a78e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1a792:	2c0f      	cmp	r4, #15
   1a794:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1a798:	d919      	bls.n	1a7ce <memset+0x66>
   1a79a:	f103 0210 	add.w	r2, r3, #16
   1a79e:	4626      	mov	r6, r4
   1a7a0:	3e10      	subs	r6, #16
   1a7a2:	2e0f      	cmp	r6, #15
   1a7a4:	f842 5c10 	str.w	r5, [r2, #-16]
   1a7a8:	f842 5c0c 	str.w	r5, [r2, #-12]
   1a7ac:	f842 5c08 	str.w	r5, [r2, #-8]
   1a7b0:	f842 5c04 	str.w	r5, [r2, #-4]
   1a7b4:	f102 0210 	add.w	r2, r2, #16
   1a7b8:	d8f2      	bhi.n	1a7a0 <memset+0x38>
   1a7ba:	f1a4 0210 	sub.w	r2, r4, #16
   1a7be:	f022 020f 	bic.w	r2, r2, #15
   1a7c2:	f004 040f 	and.w	r4, r4, #15
   1a7c6:	3210      	adds	r2, #16
   1a7c8:	2c03      	cmp	r4, #3
   1a7ca:	4413      	add	r3, r2
   1a7cc:	d90d      	bls.n	1a7ea <memset+0x82>
   1a7ce:	461e      	mov	r6, r3
   1a7d0:	4622      	mov	r2, r4
   1a7d2:	3a04      	subs	r2, #4
   1a7d4:	2a03      	cmp	r2, #3
   1a7d6:	f846 5b04 	str.w	r5, [r6], #4
   1a7da:	d8fa      	bhi.n	1a7d2 <memset+0x6a>
   1a7dc:	1f22      	subs	r2, r4, #4
   1a7de:	f022 0203 	bic.w	r2, r2, #3
   1a7e2:	3204      	adds	r2, #4
   1a7e4:	4413      	add	r3, r2
   1a7e6:	f004 0403 	and.w	r4, r4, #3
   1a7ea:	b12c      	cbz	r4, 1a7f8 <memset+0x90>
   1a7ec:	b2c9      	uxtb	r1, r1
   1a7ee:	441c      	add	r4, r3
   1a7f0:	f803 1b01 	strb.w	r1, [r3], #1
   1a7f4:	429c      	cmp	r4, r3
   1a7f6:	d1fb      	bne.n	1a7f0 <memset+0x88>
   1a7f8:	bc70      	pop	{r4, r5, r6}
   1a7fa:	4770      	bx	lr
   1a7fc:	4614      	mov	r4, r2
   1a7fe:	4603      	mov	r3, r0
   1a800:	e7c2      	b.n	1a788 <memset+0x20>
   1a802:	bf00      	nop

0001a804 <rand>:
   1a804:	b410      	push	{r4}
   1a806:	4b0c      	ldr	r3, [pc, #48]	; (1a838 <rand+0x34>)
   1a808:	480c      	ldr	r0, [pc, #48]	; (1a83c <rand+0x38>)
   1a80a:	6819      	ldr	r1, [r3, #0]
   1a80c:	4c0c      	ldr	r4, [pc, #48]	; (1a840 <rand+0x3c>)
   1a80e:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   1a812:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   1a816:	fb00 f002 	mul.w	r0, r0, r2
   1a81a:	fb04 0003 	mla	r0, r4, r3, r0
   1a81e:	fba2 2304 	umull	r2, r3, r2, r4
   1a822:	4403      	add	r3, r0
   1a824:	3201      	adds	r2, #1
   1a826:	f143 0300 	adc.w	r3, r3, #0
   1a82a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   1a82e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1a832:	bc10      	pop	{r4}
   1a834:	4770      	bx	lr
   1a836:	bf00      	nop
   1a838:	20000614 	.word	0x20000614
   1a83c:	5851f42d 	.word	0x5851f42d
   1a840:	4c957f2d 	.word	0x4c957f2d

0001a844 <strcat>:
   1a844:	0783      	lsls	r3, r0, #30
   1a846:	b510      	push	{r4, lr}
   1a848:	4604      	mov	r4, r0
   1a84a:	d110      	bne.n	1a86e <strcat+0x2a>
   1a84c:	6802      	ldr	r2, [r0, #0]
   1a84e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1a852:	ea23 0302 	bic.w	r3, r3, r2
   1a856:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1a85a:	d108      	bne.n	1a86e <strcat+0x2a>
   1a85c:	f850 2f04 	ldr.w	r2, [r0, #4]!
   1a860:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1a864:	ea23 0302 	bic.w	r3, r3, r2
   1a868:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1a86c:	d0f6      	beq.n	1a85c <strcat+0x18>
   1a86e:	7803      	ldrb	r3, [r0, #0]
   1a870:	b11b      	cbz	r3, 1a87a <strcat+0x36>
   1a872:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1a876:	2b00      	cmp	r3, #0
   1a878:	d1fb      	bne.n	1a872 <strcat+0x2e>
   1a87a:	f000 f803 	bl	1a884 <strcpy>
   1a87e:	4620      	mov	r0, r4
   1a880:	bd10      	pop	{r4, pc}
   1a882:	bf00      	nop

0001a884 <strcpy>:
   1a884:	ea80 0201 	eor.w	r2, r0, r1
   1a888:	4684      	mov	ip, r0
   1a88a:	f012 0f03 	tst.w	r2, #3
   1a88e:	d14f      	bne.n	1a930 <strcpy+0xac>
   1a890:	f011 0f03 	tst.w	r1, #3
   1a894:	d132      	bne.n	1a8fc <strcpy+0x78>
   1a896:	f84d 4d04 	str.w	r4, [sp, #-4]!
   1a89a:	f011 0f04 	tst.w	r1, #4
   1a89e:	f851 3b04 	ldr.w	r3, [r1], #4
   1a8a2:	d00b      	beq.n	1a8bc <strcpy+0x38>
   1a8a4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1a8a8:	439a      	bics	r2, r3
   1a8aa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1a8ae:	bf04      	itt	eq
   1a8b0:	f84c 3b04 	streq.w	r3, [ip], #4
   1a8b4:	f851 3b04 	ldreq.w	r3, [r1], #4
   1a8b8:	d116      	bne.n	1a8e8 <strcpy+0x64>
   1a8ba:	bf00      	nop
   1a8bc:	f851 4b04 	ldr.w	r4, [r1], #4
   1a8c0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1a8c4:	439a      	bics	r2, r3
   1a8c6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1a8ca:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1a8ce:	d10b      	bne.n	1a8e8 <strcpy+0x64>
   1a8d0:	f84c 3b04 	str.w	r3, [ip], #4
   1a8d4:	43a2      	bics	r2, r4
   1a8d6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1a8da:	bf04      	itt	eq
   1a8dc:	f851 3b04 	ldreq.w	r3, [r1], #4
   1a8e0:	f84c 4b04 	streq.w	r4, [ip], #4
   1a8e4:	d0ea      	beq.n	1a8bc <strcpy+0x38>
   1a8e6:	4623      	mov	r3, r4
   1a8e8:	f80c 3b01 	strb.w	r3, [ip], #1
   1a8ec:	f013 0fff 	tst.w	r3, #255	; 0xff
   1a8f0:	ea4f 2333 	mov.w	r3, r3, ror #8
   1a8f4:	d1f8      	bne.n	1a8e8 <strcpy+0x64>
   1a8f6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a8fa:	4770      	bx	lr
   1a8fc:	f011 0f01 	tst.w	r1, #1
   1a900:	d006      	beq.n	1a910 <strcpy+0x8c>
   1a902:	f811 2b01 	ldrb.w	r2, [r1], #1
   1a906:	f80c 2b01 	strb.w	r2, [ip], #1
   1a90a:	2a00      	cmp	r2, #0
   1a90c:	bf08      	it	eq
   1a90e:	4770      	bxeq	lr
   1a910:	f011 0f02 	tst.w	r1, #2
   1a914:	d0bf      	beq.n	1a896 <strcpy+0x12>
   1a916:	f831 2b02 	ldrh.w	r2, [r1], #2
   1a91a:	f012 0fff 	tst.w	r2, #255	; 0xff
   1a91e:	bf16      	itet	ne
   1a920:	f82c 2b02 	strhne.w	r2, [ip], #2
   1a924:	f88c 2000 	strbeq.w	r2, [ip]
   1a928:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   1a92c:	d1b3      	bne.n	1a896 <strcpy+0x12>
   1a92e:	4770      	bx	lr
   1a930:	f811 2b01 	ldrb.w	r2, [r1], #1
   1a934:	f80c 2b01 	strb.w	r2, [ip], #1
   1a938:	2a00      	cmp	r2, #0
   1a93a:	d1f9      	bne.n	1a930 <strcpy+0xac>
   1a93c:	4770      	bx	lr
   1a93e:	bf00      	nop

0001a940 <strlen>:
   1a940:	f890 f000 	pld	[r0]
   1a944:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1a948:	f020 0107 	bic.w	r1, r0, #7
   1a94c:	f06f 0c00 	mvn.w	ip, #0
   1a950:	f010 0407 	ands.w	r4, r0, #7
   1a954:	f891 f020 	pld	[r1, #32]
   1a958:	f040 8049 	bne.w	1a9ee <strlen+0xae>
   1a95c:	f04f 0400 	mov.w	r4, #0
   1a960:	f06f 0007 	mvn.w	r0, #7
   1a964:	e9d1 2300 	ldrd	r2, r3, [r1]
   1a968:	f891 f040 	pld	[r1, #64]	; 0x40
   1a96c:	f100 0008 	add.w	r0, r0, #8
   1a970:	fa82 f24c 	uadd8	r2, r2, ip
   1a974:	faa4 f28c 	sel	r2, r4, ip
   1a978:	fa83 f34c 	uadd8	r3, r3, ip
   1a97c:	faa2 f38c 	sel	r3, r2, ip
   1a980:	bb4b      	cbnz	r3, 1a9d6 <strlen+0x96>
   1a982:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1a986:	fa82 f24c 	uadd8	r2, r2, ip
   1a98a:	f100 0008 	add.w	r0, r0, #8
   1a98e:	faa4 f28c 	sel	r2, r4, ip
   1a992:	fa83 f34c 	uadd8	r3, r3, ip
   1a996:	faa2 f38c 	sel	r3, r2, ip
   1a99a:	b9e3      	cbnz	r3, 1a9d6 <strlen+0x96>
   1a99c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1a9a0:	fa82 f24c 	uadd8	r2, r2, ip
   1a9a4:	f100 0008 	add.w	r0, r0, #8
   1a9a8:	faa4 f28c 	sel	r2, r4, ip
   1a9ac:	fa83 f34c 	uadd8	r3, r3, ip
   1a9b0:	faa2 f38c 	sel	r3, r2, ip
   1a9b4:	b97b      	cbnz	r3, 1a9d6 <strlen+0x96>
   1a9b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1a9ba:	f101 0120 	add.w	r1, r1, #32
   1a9be:	fa82 f24c 	uadd8	r2, r2, ip
   1a9c2:	f100 0008 	add.w	r0, r0, #8
   1a9c6:	faa4 f28c 	sel	r2, r4, ip
   1a9ca:	fa83 f34c 	uadd8	r3, r3, ip
   1a9ce:	faa2 f38c 	sel	r3, r2, ip
   1a9d2:	2b00      	cmp	r3, #0
   1a9d4:	d0c6      	beq.n	1a964 <strlen+0x24>
   1a9d6:	2a00      	cmp	r2, #0
   1a9d8:	bf04      	itt	eq
   1a9da:	3004      	addeq	r0, #4
   1a9dc:	461a      	moveq	r2, r3
   1a9de:	ba12      	rev	r2, r2
   1a9e0:	fab2 f282 	clz	r2, r2
   1a9e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1a9e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1a9ec:	4770      	bx	lr
   1a9ee:	e9d1 2300 	ldrd	r2, r3, [r1]
   1a9f2:	f004 0503 	and.w	r5, r4, #3
   1a9f6:	f1c4 0000 	rsb	r0, r4, #0
   1a9fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1a9fe:	f014 0f04 	tst.w	r4, #4
   1aa02:	f891 f040 	pld	[r1, #64]	; 0x40
   1aa06:	fa0c f505 	lsl.w	r5, ip, r5
   1aa0a:	ea62 0205 	orn	r2, r2, r5
   1aa0e:	bf1c      	itt	ne
   1aa10:	ea63 0305 	ornne	r3, r3, r5
   1aa14:	4662      	movne	r2, ip
   1aa16:	f04f 0400 	mov.w	r4, #0
   1aa1a:	e7a9      	b.n	1a970 <strlen+0x30>

0001aa1c <__register_exitproc>:
   1aa1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1aa20:	4d2c      	ldr	r5, [pc, #176]	; (1aad4 <__register_exitproc+0xb8>)
   1aa22:	4606      	mov	r6, r0
   1aa24:	6828      	ldr	r0, [r5, #0]
   1aa26:	4698      	mov	r8, r3
   1aa28:	460f      	mov	r7, r1
   1aa2a:	4691      	mov	r9, r2
   1aa2c:	f000 f882 	bl	1ab34 <__retarget_lock_acquire_recursive>
   1aa30:	4b29      	ldr	r3, [pc, #164]	; (1aad8 <__register_exitproc+0xbc>)
   1aa32:	681c      	ldr	r4, [r3, #0]
   1aa34:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1aa38:	2b00      	cmp	r3, #0
   1aa3a:	d03e      	beq.n	1aaba <__register_exitproc+0x9e>
   1aa3c:	685a      	ldr	r2, [r3, #4]
   1aa3e:	2a1f      	cmp	r2, #31
   1aa40:	dc1c      	bgt.n	1aa7c <__register_exitproc+0x60>
   1aa42:	f102 0e01 	add.w	lr, r2, #1
   1aa46:	b176      	cbz	r6, 1aa66 <__register_exitproc+0x4a>
   1aa48:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1aa4c:	2401      	movs	r4, #1
   1aa4e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   1aa52:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   1aa56:	4094      	lsls	r4, r2
   1aa58:	4320      	orrs	r0, r4
   1aa5a:	2e02      	cmp	r6, #2
   1aa5c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   1aa60:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   1aa64:	d023      	beq.n	1aaae <__register_exitproc+0x92>
   1aa66:	3202      	adds	r2, #2
   1aa68:	f8c3 e004 	str.w	lr, [r3, #4]
   1aa6c:	6828      	ldr	r0, [r5, #0]
   1aa6e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1aa72:	f000 f861 	bl	1ab38 <__retarget_lock_release_recursive>
   1aa76:	2000      	movs	r0, #0
   1aa78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1aa7c:	4b17      	ldr	r3, [pc, #92]	; (1aadc <__register_exitproc+0xc0>)
   1aa7e:	b30b      	cbz	r3, 1aac4 <__register_exitproc+0xa8>
   1aa80:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1aa84:	f7f6 fb90 	bl	111a8 <malloc>
   1aa88:	4603      	mov	r3, r0
   1aa8a:	b1d8      	cbz	r0, 1aac4 <__register_exitproc+0xa8>
   1aa8c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   1aa90:	6002      	str	r2, [r0, #0]
   1aa92:	2100      	movs	r1, #0
   1aa94:	6041      	str	r1, [r0, #4]
   1aa96:	460a      	mov	r2, r1
   1aa98:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1aa9c:	f04f 0e01 	mov.w	lr, #1
   1aaa0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   1aaa4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   1aaa8:	2e00      	cmp	r6, #0
   1aaaa:	d0dc      	beq.n	1aa66 <__register_exitproc+0x4a>
   1aaac:	e7cc      	b.n	1aa48 <__register_exitproc+0x2c>
   1aaae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   1aab2:	430c      	orrs	r4, r1
   1aab4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   1aab8:	e7d5      	b.n	1aa66 <__register_exitproc+0x4a>
   1aaba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1aabe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1aac2:	e7bb      	b.n	1aa3c <__register_exitproc+0x20>
   1aac4:	6828      	ldr	r0, [r5, #0]
   1aac6:	f000 f837 	bl	1ab38 <__retarget_lock_release_recursive>
   1aaca:	f04f 30ff 	mov.w	r0, #4294967295
   1aace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1aad2:	bf00      	nop
   1aad4:	20000a40 	.word	0x20000a40
   1aad8:	0001bc08 	.word	0x0001bc08
   1aadc:	000111a9 	.word	0x000111a9

0001aae0 <register_fini>:
   1aae0:	4b02      	ldr	r3, [pc, #8]	; (1aaec <register_fini+0xc>)
   1aae2:	b113      	cbz	r3, 1aaea <register_fini+0xa>
   1aae4:	4802      	ldr	r0, [pc, #8]	; (1aaf0 <register_fini+0x10>)
   1aae6:	f000 b805 	b.w	1aaf4 <atexit>
   1aaea:	4770      	bx	lr
   1aaec:	00000000 	.word	0x00000000
   1aaf0:	0001ab01 	.word	0x0001ab01

0001aaf4 <atexit>:
   1aaf4:	2300      	movs	r3, #0
   1aaf6:	4601      	mov	r1, r0
   1aaf8:	461a      	mov	r2, r3
   1aafa:	4618      	mov	r0, r3
   1aafc:	f7ff bf8e 	b.w	1aa1c <__register_exitproc>

0001ab00 <__libc_fini_array>:
   1ab00:	b538      	push	{r3, r4, r5, lr}
   1ab02:	4c0a      	ldr	r4, [pc, #40]	; (1ab2c <__libc_fini_array+0x2c>)
   1ab04:	4d0a      	ldr	r5, [pc, #40]	; (1ab30 <__libc_fini_array+0x30>)
   1ab06:	1b64      	subs	r4, r4, r5
   1ab08:	10a4      	asrs	r4, r4, #2
   1ab0a:	d00a      	beq.n	1ab22 <__libc_fini_array+0x22>
   1ab0c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   1ab10:	3b01      	subs	r3, #1
   1ab12:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1ab16:	3c01      	subs	r4, #1
   1ab18:	f855 3904 	ldr.w	r3, [r5], #-4
   1ab1c:	4798      	blx	r3
   1ab1e:	2c00      	cmp	r4, #0
   1ab20:	d1f9      	bne.n	1ab16 <__libc_fini_array+0x16>
   1ab22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1ab26:	f001 b8b1 	b.w	1bc8c <_fini>
   1ab2a:	bf00      	nop
   1ab2c:	0001bc9c 	.word	0x0001bc9c
   1ab30:	0001bc98 	.word	0x0001bc98

0001ab34 <__retarget_lock_acquire_recursive>:
   1ab34:	4770      	bx	lr
   1ab36:	bf00      	nop

0001ab38 <__retarget_lock_release_recursive>:
   1ab38:	4770      	bx	lr
   1ab3a:	bf00      	nop
   1ab3c:	6f666e49 	.word	0x6f666e49
   1ab40:	6d654d3a 	.word	0x6d654d3a
   1ab44:	2079726f 	.word	0x2079726f
   1ab48:	72617453 	.word	0x72617453
   1ab4c:	00646574 	.word	0x00646574
   1ab50:	6e6e7552 	.word	0x6e6e7552
   1ab54:	20676e69 	.word	0x20676e69
   1ab58:	6b696c20 	.word	0x6b696c20
   1ab5c:	72632065 	.word	0x72632065
   1ab60:	21797a61 	.word	0x21797a61
   1ab64:	203a2121 	.word	0x203a2121
   1ab68:	00000000 	.word	0x00000000

0001ab6c <_ZTC16Maintenance_Tool0_16Commands_Handler>:
   1ab6c:	00000194 00000000 00000000              ............

0001ab78 <_ZTT16Maintenance_Tool>:
   1ab78:	0001ab8c 0001ab78                       ....x...

0001ab80 <_ZTV16Maintenance_Tool>:
   1ab80:	00000194 00000000 00000000 682f2e2e     ............../h
   1ab90:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   1aba0:	7361625f 00682e65 682f2e2e 692f6c61     _base.h.../hal/i
   1abb0:	756c636e 682f6564 775f6c61 682e7464     nclude/hal_wdt.h
   1abc0:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
   1abd0:	635f6c61 6e656c61 2e726164 00000063     al_calendar.c...
   1abe0:	682f2e2e 732f6c61 682f6372 635f6c61     ../hal/src/hal_c
   1abf0:	615f6e61 636e7973 0000632e 682f2e2e     an_async.c..../h
   1ac00:	732f6c61 682f6372 635f6c61 735f6372     al/src/hal_crc_s
   1ac10:	2e636e79 00000063 682f2e2e 732f6c61     ync.c...../hal/s
   1ac20:	682f6372 695f6c61 6d5f6332 6e79735f     rc/hal_i2c_m_syn
   1ac30:	00632e63 682f2e2e 732f6c61 682f6372     c.c.../hal/src/h
   1ac40:	705f6c61 632e6d77 00000000 682f2e2e     al_pwm.c....../h
   1ac50:	732f6c61 682f6372 715f6c61 5f697073     al/src/hal_qspi_
   1ac60:	636e7973 0000632e 682f2e2e 732f6c61     sync.c..../hal/s
   1ac70:	682f6372 735f6c61 6d5f6970 6e79735f     rc/hal_spi_m_syn
   1ac80:	00632e63 682f2e2e 732f6c61 682f6372     c.c.../hal/src/h
   1ac90:	745f6c61 72656d69 0000632e 682f2e2e     al_timer.c..../h
   1aca0:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
   1acb0:	6c5f736c 2e747369 00000063 03020100     ls_list.c.......
   1acc0:	07060504 14100c08 40302018              ......... 0@

0001accc <_map>:
   1accc:	00000000 00000040 00000001 00000021     ....@.......!...
   1acdc:	00000003 00000003 00000004 00000004     ................
   1acec:	00000005 00000005 00000006 00000056     ............V...
   1acfc:	00000007 00000057 00000008 00000028     ....W.......(...
   1ad0c:	00000009 00000029 682f2e2e 652f6c70     ....)...../hpl/e
   1ad1c:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

0001ad2c <user_mux_confs>:
   1ad2c:	00020100 00000000 00000000 00000000     ................
	...

0001ad70 <channel_confs>:
   1ad70:	0660065f 00000000 00000000 00000000     _.`.............
	...

0001adb0 <interrupt_cfg>:
	...
   1ae30:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   1ae40:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   1ae50:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   1ae60:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   1ae70:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   1ae80:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   1ae90:	43000400 43000800 43000c00              ...C...C...C

0001ae9c <sercomspi_regs>:
   1ae9c:	0020000c 00020000 00000000 01ff0001     .. .............
   1aeac:	30000c04 02000000 00000000 ff001700     ...0............
   1aebc:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   1aecc:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   1aedc:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1aeec:	43001400 43001800                       ...C...C

0001aef4 <_usb_ep_cfgs>:
   1aef4:	20002354 00000000 00000040 20002394     T#. ....@....#. 
   1af04:	200023d4 00400040 20002414 20002454     .#. @.@..$. T$. 
   1af14:	00400040 20002494 200024d4 00400040     @.@..$. .$. @.@.
   1af24:	20002514 20002554 00400040 00000804     .%. T%. @.@.....
   1af34:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   1af44:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   1af54:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   1af64:	7361625f 00682e65                       _base.h.

0001af6c <n25q256a_interface>:
   1af6c:	0000d4e9 0000d58d 0000d69d 0000d855     ............U...
   1af7c:	0000d8e5 752f2e2e 642f6273 63697665     ....../usb/devic
   1af8c:	73752f65 2e636462 00000063              e/usbdc.c...

0001af98 <_ZTV20Compresor_Controller>:
	...
   1afa0:	00015ab1                                .Z..

0001afa4 <_ZTV28Compressor_CANOpen_Interface>:
	...
   1afac:	00015ab1                                .Z..

0001afb0 <_ZTV9CDC_Class>:
	...
   1afb8:	00010af9 00010bd9 0001074d 00010ac1     ........M.......
   1afc8:	00010c71 00010a85 00010969 000109b9     q.......i.......
   1afd8:	00010ae1 00010b41                       ....A...

0001afe0 <_ZTV6Stream>:
	...
   1afe8:	000111bd 00010ddd 0001074d 00010761     ........M...a...
   1aff8:	000111bd 000111bd 000111bd 2e257830     ............0x%.
   1b008:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   1b018:	0066766f                                ovf.

0001b01c <_ZTV5Print>:
	...
   1b024:	000111bd 00010ddd 0001074d 00010761     ........M...a...

0001b034 <_ZTV18Event_Logger_Class>:
	...
   1b03c:	00019d25 00019e15 74696e49 696c6169     %.......Initiali
   1b04c:	6974617a 46206e6f 73696e69 00646568     zation Finished.
   1b05c:	43555320 53534543 00000000 49414620      SUCCESS.... FAI
   1b06c:	44454c4c 00000000 4b4e5520 4e574f4e     LLED.... UNKNOWN
   1b07c:	00000000 73616c46 654d2068 79726f6d     ....Flash Memory
   1b08c:	6c655320 73655466 41502074 44455353      SelfTest PASSED
   1b09c:	00000000 73616c46 654d2068 79726f6d     ....Flash Memory
   1b0ac:	6c655320 73655466 41462074 44454c49      SelfTest FAILED
   1b0bc:	00000000 75646f4d 0020656c 20495053     ....Module .SPI 
   1b0cc:	706d6554 74617265 73657275 61745320     Temperatures Sta
   1b0dc:	64657472 00000000 20495053 706d6554     rted....SPI Temp
   1b0ec:	74617265 73657275 69614620 0064656c     eratures Failed.

0001b0fc <_ZTV13CANOpen_Class>:
	...
   1b104:	00015ab1                                .Z..

0001b108 <_ZTV8CO_Class>:
	...
   1b110:	00015ab1                                .Z..

0001b114 <_ZTV15CO_Driver_Class>:
	...
   1b11c:	00015ab1                                .Z..

0001b120 <_ZL13OD_record1018>:
   1b120:	200003e0 00000005 00000001 200003e4     ... ........... 
   1b130:	00000085 00000004 200003e8 00000085     ........... ....
   1b140:	00000004 200003ec 00000085 00000004     ....... ........
   1b150:	200003f0 00000085 00000004              ... ........

0001b15c <_ZL13OD_record1200>:
   1b15c:	200003fc 00000005 00000001 20000400     ... ........... 
   1b16c:	00000085 00000004 20000404 00000085     ........... ....
   1b17c:	00000004                                ....

0001b180 <_ZL13OD_record1400>:
   1b180:	20000408 00000005 00000001 2000040c     ... ........... 
   1b190:	0000008d 00000004 20000410 0000000d     ........... ....
   1b1a0:	00000001                                ....

0001b1a4 <_ZL13OD_record1401>:
   1b1a4:	20000414 00000005 00000001 20000418     ... ........... 
   1b1b4:	0000008d 00000004 2000041c 0000000d     ........... ....
   1b1c4:	00000001                                ....

0001b1c8 <_ZL13OD_record1402>:
   1b1c8:	20000420 00000005 00000001 20000424      .. ........$.. 
   1b1d8:	0000008d 00000004 20000428 0000000d     ........(.. ....
   1b1e8:	00000001                                ....

0001b1ec <_ZL13OD_record1403>:
   1b1ec:	2000042c 00000005 00000001 20000430     ,.. ........0.. 
   1b1fc:	0000008d 00000004 20000434 0000000d     ........4.. ....
   1b20c:	00000001                                ....

0001b210 <_ZL13OD_record1600>:
   1b210:	20000438 0000000d 00000001 2000043c     8.. ........<.. 
   1b220:	0000008d 00000004 20000440 0000008d     ........@.. ....
   1b230:	00000004 20000444 0000008d 00000004     ....D.. ........
   1b240:	20000448 0000008d 00000004 2000044c     H.. ........L.. 
   1b250:	0000008d 00000004 20000450 0000008d     ........P.. ....
   1b260:	00000004 20000454 0000008d 00000004     ....T.. ........
   1b270:	20000458 0000008d 00000004              X.. ........

0001b27c <_ZL13OD_record1601>:
   1b27c:	2000045c 0000000d 00000001 20000460     \.. ........`.. 
   1b28c:	0000008d 00000004 20000464 0000008d     ........d.. ....
   1b29c:	00000004 20000468 0000008d 00000004     ....h.. ........
   1b2ac:	2000046c 0000008d 00000004 20000470     l.. ........p.. 
   1b2bc:	0000008d 00000004 20000474 0000008d     ........t.. ....
   1b2cc:	00000004 20000478 0000008d 00000004     ....x.. ........
   1b2dc:	2000047c 0000008d 00000004              |.. ........

0001b2e8 <_ZL13OD_record1602>:
   1b2e8:	20000480 0000000d 00000001 20000484     ... ........... 
   1b2f8:	0000008d 00000004 20000488 0000008d     ........... ....
   1b308:	00000004 2000048c 0000008d 00000004     ....... ........
   1b318:	20000490 0000008d 00000004 20000494     ... ........... 
   1b328:	0000008d 00000004 20000498 0000008d     ........... ....
   1b338:	00000004 2000049c 0000008d 00000004     ....... ........
   1b348:	200004a0 0000008d 00000004              ... ........

0001b354 <_ZL13OD_record1603>:
   1b354:	200004a4 0000000d 00000001 200004a8     ... ........... 
   1b364:	0000008d 00000004 200004ac 0000008d     ........... ....
   1b374:	00000004 200004b0 0000008d 00000004     ....... ........
   1b384:	200004b4 0000008d 00000004 200004b8     ... ........... 
   1b394:	0000008d 00000004 200004bc 0000008d     ........... ....
   1b3a4:	00000004 200004c0 0000008d 00000004     ....... ........
   1b3b4:	200004c4 0000008d 00000004              ... ........

0001b3c0 <_ZL13OD_record1800>:
   1b3c0:	200004c8 00000005 00000001 200004cc     ... ........... 
   1b3d0:	0000008d 00000004 200004d0 0000000d     ........... ....
   1b3e0:	00000001 200004d4 0000008d 00000002     ....... ........
   1b3f0:	200004d8 0000000d 00000001 200004dc     ... ........... 
   1b400:	0000008d 00000002 200004e0 0000000d     ........... ....
   1b410:	00000001                                ....

0001b414 <_ZL13OD_record1801>:
   1b414:	200004e4 00000005 00000001 200004e8     ... ........... 
   1b424:	0000008d 00000004 200004ec 0000000d     ........... ....
   1b434:	00000001 200004f0 0000008d 00000002     ....... ........
   1b444:	200004f4 0000000d 00000001 200004f8     ... ........... 
   1b454:	0000008d 00000002 200004fc 0000000d     ........... ....
   1b464:	00000001                                ....

0001b468 <_ZL13OD_record1802>:
   1b468:	20000500 00000005 00000001 20000504     ... ........... 
   1b478:	0000008d 00000004 20000508 0000000d     ........... ....
   1b488:	00000001 2000050c 0000008d 00000002     ....... ........
   1b498:	20000510 0000000d 00000001 20000514     ... ........... 
   1b4a8:	0000008d 00000002 20000518 0000000d     ........... ....
   1b4b8:	00000001                                ....

0001b4bc <_ZL13OD_record1803>:
   1b4bc:	2000051c 00000005 00000001 20000520     ... ........ .. 
   1b4cc:	0000008d 00000004 20000524 0000000d     ........$.. ....
   1b4dc:	00000001 20000528 0000008d 00000002     ....(.. ........
   1b4ec:	2000052c 0000000d 00000001 20000530     ,.. ........0.. 
   1b4fc:	0000008d 00000002 20000534 0000000d     ........4.. ....
   1b50c:	00000001                                ....

0001b510 <_ZL13OD_record1A00>:
   1b510:	20000538 0000000d 00000001 2000053c     8.. ........<.. 
   1b520:	0000008d 00000004 20000540 0000008d     ........@.. ....
   1b530:	00000004 20000544 0000008d 00000004     ....D.. ........
   1b540:	20000548 0000008d 00000004 2000054c     H.. ........L.. 
   1b550:	0000008d 00000004 20000550 0000008d     ........P.. ....
   1b560:	00000004 20000554 0000008d 00000004     ....T.. ........
   1b570:	20000558 0000008d 00000004              X.. ........

0001b57c <_ZL13OD_record1A01>:
   1b57c:	2000055c 0000000d 00000001 20000560     \.. ........`.. 
   1b58c:	0000008d 00000004 20000564 0000008d     ........d.. ....
   1b59c:	00000004 20000568 0000008d 00000004     ....h.. ........
   1b5ac:	2000056c 0000008d 00000004 20000570     l.. ........p.. 
   1b5bc:	0000008d 00000004 20000574 0000008d     ........t.. ....
   1b5cc:	00000004 20000578 0000008d 00000004     ....x.. ........
   1b5dc:	2000057c 0000008d 00000004              |.. ........

0001b5e8 <_ZL13OD_record1A02>:
   1b5e8:	20000580 0000000d 00000001 20000584     ... ........... 
   1b5f8:	0000008d 00000004 20000588 0000008d     ........... ....
   1b608:	00000004 2000058c 0000008d 00000004     ....... ........
   1b618:	20000590 0000008d 00000004 20000594     ... ........... 
   1b628:	0000008d 00000004 20000598 0000008d     ........... ....
   1b638:	00000004 2000059c 0000008d 00000004     ....... ........
   1b648:	200005a0 0000008d 00000004              ... ........

0001b654 <_ZL13OD_record1A03>:
   1b654:	200005a4 0000000d 00000001 200005a8     ... ........... 
   1b664:	0000008d 00000004 200005ac 0000008d     ........... ....
   1b674:	00000004 200005b0 0000008d 00000004     ....... ........
   1b684:	200005b4 0000008d 00000004 200005b8     ... ........... 
   1b694:	0000008d 00000004 200005bc 0000008d     ........... ....
   1b6a4:	00000004 200005c0 0000008d 00000004     ....... ........
   1b6b4:	200005c4 0000008d 00000004              ... ........

0001b6c0 <_ZL13OD_record2120>:
   1b6c0:	200002b0 00000006 00000001 200002b8     ... ........... 
   1b6d0:	000000be 00000008 200002c0 000000be     ........... ....
   1b6e0:	00000008 200002c8 000000be 00000004     ....... ........
   1b6f0:	200002d0 000000be 00000008 00000000     ... ............
   1b700:	0000000e 00000000                       ........

0001b708 <_ZL13OD_record2130>:
   1b708:	200002e0 00000006 00000001 200002e1     ... ........... 
   1b718:	00000006 0000001e 20000300 0000008e     ........... ....
   1b728:	00000008 20000308 000000be 00000004     ....... ........

0001b738 <CO_ObjDict>:
   1b738:	00001000 00000000 00000085 00000004     ................
   1b748:	200003a0 00001001 00000000 00000036     ... ........6...
   1b758:	00000001 20000224 00001002 00000000     ....$.. ........
   1b768:	000000b6 00000004 20000228 00001003     ........(.. ....
   1b778:	00000008 0000008e 00000004 2000022c     ............,.. 
   1b788:	00001005 00000000 0000008d 00000004     ................
   1b798:	200003a4 00001006 00000000 0000008d     ... ............
   1b7a8:	00000004 200003a8 00001007 00000000     ....... ........
   1b7b8:	0000008d 00000004 200003ac 00001008     ........... ....
   1b7c8:	00000000 00000005 0000000b 200003b0     ............... 
   1b7d8:	00001009 00000000 00000005 00000004     ................
   1b7e8:	200003bb 0000100a 00000000 00000005     ... ............
   1b7f8:	00000004 200003bf 00001010 00000001     ....... ........
   1b808:	0000008e 00000004 2000024c 00001011     ........L.. ....
   1b818:	00000001 0000008e 00000004 20000250     ............P.. 
   1b828:	00001014 00000000 00000085 00000004     ................
   1b838:	200003c4 00001015 00000000 0000008d     ... ............
   1b848:	00000002 200003c8 00001016 00000004     ....... ........
   1b858:	0000008d 00000004 200003cc 00001017     ........... ....
   1b868:	00000000 0000008d 00000002 200003dc     ............... 
   1b878:	00001018 00000004 00000000 00000000     ................
   1b888:	0001b120 00001019 00000000 0000000d      ...............
   1b898:	00000001 200003f4 00001029 00000006     ....... ).......
   1b8a8:	0000000d 00000001 200003f5 00001200     ........... ....
   1b8b8:	00000002 00000000 00000000 0001b15c     ............\...
   1b8c8:	00001400 00000002 00000000 00000000     ................
   1b8d8:	0001b180 00001401 00000002 00000000     ................
   1b8e8:	00000000 0001b1a4 00001402 00000002     ................
	...
   1b900:	0001b1c8 00001403 00000002 00000000     ................
   1b910:	00000000 0001b1ec 00001600 00000008     ................
	...
   1b928:	0001b210 00001601 00000008 00000000     ................
   1b938:	00000000 0001b27c 00001602 00000008     ....|...........
	...
   1b950:	0001b2e8 00001603 00000008 00000000     ................
   1b960:	00000000 0001b354 00001800 00000006     ....T...........
	...
   1b978:	0001b3c0 00001801 00000006 00000000     ................
   1b988:	00000000 0001b414 00001802 00000006     ................
	...
   1b9a0:	0001b468 00001803 00000006 00000000     h...............
   1b9b0:	00000000 0001b4bc 00001a00 00000008     ................
	...
   1b9c8:	0001b510 00001a01 00000008 00000000     ................
   1b9d8:	00000000 0001b57c 00001a02 00000008     ....|...........
	...
   1b9f0:	0001b5e8 00001a03 00000008 00000000     ................
   1ba00:	00000000 0001b654 00001f80 00000000     ....T...........
   1ba10:	0000008d 00000004 200005c8 00002100     ........... .!..
   1ba20:	00000000 00000036 0000000a 20000254     ....6.......T.. 
   1ba30:	00002101 00000000 0000000d 00000001     .!..............
   1ba40:	200005cc 00002102 00000000 0000008d     ... .!..........
   1ba50:	00000002 200005ce 00002103 00000000     ....... .!......
   1ba60:	0000008e 00000002 2000025e 00002104     ........^.. .!..
   1ba70:	00000000 00000086 00000002 20000260     ............`.. 
   1ba80:	00002106 00000000 00000087 00000004     .!..............
   1ba90:	20000354 00002107 00000005 000000be     T.. .!..........
   1baa0:	00000002 20000262 00002108 00000001     ....b.. .!......
   1bab0:	000000fd 00000008 2000026c 00002109     ........l.. .!..
   1bac0:	00000001 000000fd 00000008 2000026e     ............n.. 
   1bad0:	00002110 00000010 000000fe 00000004     .!..............
   1bae0:	20000270 00002111 00000010 000000fd     p.. .!..........
   1baf0:	00000004 200005d0 00002112 00000010     ....... .!......
   1bb00:	000000ff 00000004 20000358 00002120     ........X..  !..
   1bb10:	00000005 0000007d 00000008 0001b6c0     ....}...........
   1bb20:	00002130 00000003 00000000 00000000     0!..............
   1bb30:	0001b708 00006000 00000008 00000076     .....`......v...
   1bb40:	00000001 20000310 00006200 00000008     ....... .b......
   1bb50:	0000003e 00000001 20000318 00006401     >.......... .d..
   1bb60:	0000000c 000000b6 00000002 20000320     ............ .. 
   1bb70:	00006411 00000008 000000be 00000002     .d..............
   1bb80:	20000338 682f2e2e 732f6c61 682f6372     8.. ../hal/src/h
   1bb90:	695f6c61 00632e6f 2e2f2e2e 2e2e2f2e     al_io.c.../../..
   1bba0:	554c412f 6972445f 2f726576 5f554c41     /ALU_Driver/ALU_
   1bbb0:	76697244 682f7265 702f6c70 2f74726f     Driver/hpl/port/
   1bbc0:	5f6c7068 6f697067 7361625f 00682e65     hpl_gpio_base.h.

0001bbd0 <defaultParameters>:
   1bbd0:	00004020                                 @..

0001bbd4 <defaultPreferences>:
   1bbd4:	000000fa 00000032 333a3231 31303a30     ....2...12:30:01
   1bbe4:	00000000                                ....

0001bbe8 <_ZTV14Calendar_Class>:
	...
   1bbf0:	00019d25 00019e15                       %.......

0001bbf8 <_ZTV17DateTimeLog_Class>:
	...
   1bc00:	000111bd 000111bd                       ........

0001bc08 <_global_impure_ptr>:
   1bc08:	20000618                                ... 

0001bc0c <_init>:
   1bc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc0e:	bf00      	nop
   1bc10:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1bc12:	bc08      	pop	{r3}
   1bc14:	469e      	mov	lr, r3
   1bc16:	4770      	bx	lr

0001bc18 <__init_array_start>:
   1bc18:	0001aae1 	.word	0x0001aae1

0001bc1c <__frame_dummy_init_array_entry>:
   1bc1c:	00000289 000006e1 00000f8d 00001301     ................
   1bc2c:	0000f281 0000f539 0000f971 0000fa5d     ....9...q...]...
   1bc3c:	0000fc99 00010195 00010715 00010dc9     ................
   1bc4c:	00011195 000112cd 00011479 000116d5     ........y.......
   1bc5c:	00011ad9 00011e55 00013581 00013c41     ....U....5..A<..
   1bc6c:	00014041 000142c1 00014465 000147a5     A@...B..eD...G..
   1bc7c:	00018b55 00018e85 00019915 0001a061     U...........a...

0001bc8c <_fini>:
   1bc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc8e:	bf00      	nop
   1bc90:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1bc92:	bc08      	pop	{r3}
   1bc94:	469e      	mov	lr, r3
   1bc96:	4770      	bx	lr

0001bc98 <__fini_array_start>:
   1bc98:	00000265 	.word	0x00000265
