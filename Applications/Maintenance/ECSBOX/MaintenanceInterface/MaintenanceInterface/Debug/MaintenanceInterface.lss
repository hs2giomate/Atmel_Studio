
MaintenanceInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001c2c0  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001c2c0  0001c2c0  0002c2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a44  20000000  0001c2c8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00030a44  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00030a44  2**0
                  CONTENTS
  5 .bss          0000d798  20000a48  0001cd10  00030a44  2**3
                  ALLOC
  6 .stack        00010000  2000e1e0  0002a4a8  00030a44  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00030a44  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00030a72  2**0
                  CONTENTS, READONLY
  9 .debug_info   000f5c97  00000000  00000000  00030acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000146a3  00000000  00000000  00126762  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000277cd  00000000  00000000  0013ae05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000045b0  00000000  00000000  001625d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000040e0  00000000  00000000  00166b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0006a1b7  00000000  00000000  0016ac62  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0006a207  00000000  00000000  001d4e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00150ba2  00000000  00000000  0023f020  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00011798  00000000  00000000  0038fbc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 e1 01 20 6d 0c 00 00 69 0c 00 00 69 0c 00 00     ... m...i...i...
      10:	69 0c 00 00 69 0c 00 00 69 0c 00 00 00 00 00 00     i...i...i.......
	...
      2c:	69 0c 00 00 69 0c 00 00 00 00 00 00 69 0c 00 00     i...i.......i...
      3c:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
      4c:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
      5c:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
      6c:	a5 79 00 00 3d 66 00 00 4d 66 00 00 69 0c 00 00     .y..=f..Mf..i...
      7c:	5d 66 00 00 6d 66 00 00 7d 66 00 00 8d 66 00 00     ]f..mf..}f...f..
      8c:	9d 66 00 00 ad 66 00 00 bd 66 00 00 cd 66 00 00     .f...f...f...f..
      9c:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
      ac:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
      bc:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
      cc:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
      dc:	69 0c 00 00 69 0c 00 00 69 0c 00 00 00 00 00 00     i...i...i.......
	...
      f4:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     104:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     114:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     124:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     134:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     144:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     154:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     164:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     174:	69 0c 00 00 69 0c 00 00 71 5a 00 00 11 ca 00 00     i...i...qZ......
     184:	21 ca 00 00 31 ca 00 00 41 ca 00 00 69 0c 00 00     !...1...A...i...
     194:	51 94 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     Q...i...i...i...
     1a4:	69 0c 00 00 69 0c 00 00 69 0c 00 00 6d 94 00 00     i...i...i...m...
     1b4:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     1c4:	89 94 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     ....i...i...i...
     1d4:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     1e4:	69 0c 00 00 69 0c 00 00 0d a1 00 00 69 0c 00 00     i...i.......i...
     1f4:	29 a1 00 00 69 0c 00 00 45 a1 00 00 61 a1 00 00     )...i...E...a...
     204:	7d a1 00 00 99 a1 00 00 69 0c 00 00 69 0c 00 00     }.......i...i...
     214:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     224:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     234:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     244:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...
     254:	69 0c 00 00 69 0c 00 00 69 0c 00 00 69 0c 00 00     i...i...i...i...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000a48 	.word	0x20000a48
     280:	00000000 	.word	0x00000000
     284:	0001c2c8 	.word	0x0001c2c8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001c2c8 	.word	0x0001c2c8
     2c4:	20000a4c 	.word	0x20000a4c
     2c8:	0001c2c8 	.word	0x0001c2c8
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN16Commands_HandlerC2Ev>:
static uint8_t  local_memory_block[QSPI_ERBLK];
static uint32_t local_last_read_stack;
uint8_t	local_compressor_data_array[COMPRESSOR_CONTROLLER_DATA_SIZE];

// default constructor
Commands_Handler::Commands_Handler()
     2d0:	b470      	push	{r4, r5, r6}
     2d2:	680a      	ldr	r2, [r1, #0]
     2d4:	6002      	str	r2, [r0, #0]
    kGAINCommandSetNSDData,             //!< Editing NSD data
    kGAINCommandSetNSDDataBlock,        //!< Editing NSD data in data blocks (see NSD communication: Data blockes are tranmitted to GNC)
    kGAINCommandSetView,                 //!< Enables simplified view or standard view (only 932/933)
	kGAINNumberOfCommands
	};
 struct __attribute__((__packed__)) HVACMessageHeader
     2d6:	2200      	movs	r2, #0
     2d8:	2664      	movs	r6, #100	; 0x64
     2da:	7106      	strb	r6, [r0, #4]
     2dc:	2563      	movs	r5, #99	; 0x63
     2de:	7145      	strb	r5, [r0, #5]
     2e0:	2462      	movs	r4, #98	; 0x62
     2e2:	7184      	strb	r4, [r0, #6]
     2e4:	2161      	movs	r1, #97	; 0x61
     2e6:	71c1      	strb	r1, [r0, #7]
     2e8:	7242      	strb	r2, [r0, #9]
     2ea:	7406      	strb	r6, [r0, #16]
     2ec:	7445      	strb	r5, [r0, #17]
     2ee:	7484      	strb	r4, [r0, #18]
     2f0:	74c1      	strb	r1, [r0, #19]
     2f2:	7542      	strb	r2, [r0, #21]
     2f4:	f880 6080 	strb.w	r6, [r0, #128]	; 0x80
     2f8:	f880 5081 	strb.w	r5, [r0, #129]	; 0x81
     2fc:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
     300:	f880 1083 	strb.w	r1, [r0, #131]	; 0x83
     304:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
{
	last_logger_array_stack=&local_last_read_stack;
     308:	4a02      	ldr	r2, [pc, #8]	; (314 <_ZN16Commands_HandlerC2Ev+0x44>)
     30a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
} //Commands_Handler
     30e:	bc70      	pop	{r4, r5, r6}
     310:	4770      	bx	lr
     312:	bf00      	nop
     314:	20000a64 	.word	0x20000a64

00000318 <_ZN16Commands_HandlerD2Ev>:

// default destructor
Commands_Handler::~Commands_Handler()
     318:	680b      	ldr	r3, [r1, #0]
     31a:	6003      	str	r3, [r0, #0]
{
} //~Commands_Handler
     31c:	4770      	bx	lr
	...

00000320 <_ZN16Commands_Handler18InitCommandHandlerEPh>:

void Commands_Handler::InitCommandHandler(uint8_t * buffer){
	usbMessageBuffer=buffer;
     320:	60c1      	str	r1, [r0, #12]
	memory_block=local_memory_block;
     322:	4b03      	ldr	r3, [pc, #12]	; (330 <_ZN16Commands_Handler18InitCommandHandlerEPh+0x10>)
     324:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
	compressor_data_array=local_compressor_data_array;
     328:	4b02      	ldr	r3, [pc, #8]	; (334 <_ZN16Commands_Handler18InitCommandHandlerEPh+0x14>)
     32a:	6583      	str	r3, [r0, #88]	; 0x58
     32c:	4770      	bx	lr
     32e:	bf00      	nop
     330:	20000a68 	.word	0x20000a68
     334:	20001a68 	.word	0x20001a68

00000338 <_ZN16Commands_Handler13SetEnableFan1Eh>:
	}
	return SetEnableFan1(data);
	
}

uint8_t Commands_Handler::SetEnableFan1(uint8_t data){
     338:	b510      	push	{r4, lr}
     33a:	460c      	mov	r4, r1
	if ((data&(0x01))>0)
     33c:	f011 0f01 	tst.w	r1, #1
	{
		fans.evaporator[0]->SetEnable(true);
     340:	bf14      	ite	ne
     342:	2101      	movne	r1, #1
	}
	else
	{
		fans.evaporator[0]->SetEnable(false);
     344:	2100      	moveq	r1, #0
     346:	4b03      	ldr	r3, [pc, #12]	; (354 <_ZN16Commands_Handler13SetEnableFan1Eh+0x1c>)
     348:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     34a:	4b03      	ldr	r3, [pc, #12]	; (358 <_ZN16Commands_Handler13SetEnableFan1Eh+0x20>)
     34c:	4798      	blx	r3
	}
	return data;
}
     34e:	4620      	mov	r0, r4
     350:	bd10      	pop	{r4, pc}
     352:	bf00      	nop
     354:	200037a8 	.word	0x200037a8
     358:	0001186d 	.word	0x0001186d

0000035c <_ZN16Commands_Handler13SetEnableFan2Eh>:
uint8_t	Commands_Handler::SetEnableFan2(uint8_t data){
     35c:	b538      	push	{r3, r4, r5, lr}
     35e:	4605      	mov	r5, r0
     360:	460c      	mov	r4, r1
	if ((data&(0x02))>0){
     362:	f011 0f02 	tst.w	r1, #2
		fans.evaporator[1]->SetEnable(true);
     366:	bf14      	ite	ne
     368:	2101      	movne	r1, #1
		fans.evaporator[1]->SetEnable(false);
     36a:	2100      	moveq	r1, #0
     36c:	4b04      	ldr	r3, [pc, #16]	; (380 <_ZN16Commands_Handler13SetEnableFan2Eh+0x24>)
     36e:	6e18      	ldr	r0, [r3, #96]	; 0x60
     370:	4b04      	ldr	r3, [pc, #16]	; (384 <_ZN16Commands_Handler13SetEnableFan2Eh+0x28>)
     372:	4798      	blx	r3
	return SetEnableFan1(data);
     374:	4621      	mov	r1, r4
     376:	4628      	mov	r0, r5
     378:	4b03      	ldr	r3, [pc, #12]	; (388 <_ZN16Commands_Handler13SetEnableFan2Eh+0x2c>)
     37a:	4798      	blx	r3
}
     37c:	bd38      	pop	{r3, r4, r5, pc}
     37e:	bf00      	nop
     380:	200037a8 	.word	0x200037a8
     384:	0001186d 	.word	0x0001186d
     388:	00000339 	.word	0x00000339

0000038c <_ZN16Commands_Handler19SetEnableCondesatorEh>:
uint8_t Commands_Handler::SetEnableCondesator(uint8_t data){
     38c:	b538      	push	{r3, r4, r5, lr}
     38e:	4605      	mov	r5, r0
     390:	460c      	mov	r4, r1
	if ((data&(0x04))>0)
     392:	f011 0f04 	tst.w	r1, #4
		fans.condesator->SetEnable(true);
     396:	bf14      	ite	ne
     398:	2101      	movne	r1, #1
		fans.condesator->SetEnable(false);
     39a:	2100      	moveq	r1, #0
     39c:	4b04      	ldr	r3, [pc, #16]	; (3b0 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x24>)
     39e:	6e58      	ldr	r0, [r3, #100]	; 0x64
     3a0:	4b04      	ldr	r3, [pc, #16]	; (3b4 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x28>)
     3a2:	4798      	blx	r3
	return SetEnableFan2(data);
     3a4:	4621      	mov	r1, r4
     3a6:	4628      	mov	r0, r5
     3a8:	4b03      	ldr	r3, [pc, #12]	; (3b8 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x2c>)
     3aa:	4798      	blx	r3
}
     3ac:	bd38      	pop	{r3, r4, r5, pc}
     3ae:	bf00      	nop
     3b0:	200037a8 	.word	0x200037a8
     3b4:	000114b1 	.word	0x000114b1
     3b8:	0000035d 	.word	0x0000035d

000003bc <_ZN16Commands_Handler20CommandSetEnableFansEv>:
bool Commands_Handler::CommandSetEnableFans(void){
     3bc:	b510      	push	{r4, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     3be:	68c3      	ldr	r3, [r0, #12]
     3c0:	6819      	ldr	r1, [r3, #0]
     3c2:	6041      	str	r1, [r0, #4]
     3c4:	8899      	ldrh	r1, [r3, #4]
     3c6:	799b      	ldrb	r3, [r3, #6]
     3c8:	8101      	strh	r1, [r0, #8]
     3ca:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandSetEnableFans);
     3cc:	7a43      	ldrb	r3, [r0, #9]
     3ce:	2b4b      	cmp	r3, #75	; 0x4b
     3d0:	bf0c      	ite	eq
     3d2:	2401      	moveq	r4, #1
     3d4:	2400      	movne	r4, #0
	if (result){
     3d6:	d001      	beq.n	3dc <_ZN16Commands_Handler20CommandSetEnableFansEv+0x20>
}
     3d8:	4620      	mov	r0, r4
     3da:	bd10      	pop	{r4, pc}
		SetEnableCondesator(data);
     3dc:	7a81      	ldrb	r1, [r0, #10]
     3de:	4b01      	ldr	r3, [pc, #4]	; (3e4 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x28>)
     3e0:	4798      	blx	r3
     3e2:	e7f9      	b.n	3d8 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x1c>
     3e4:	0000038d 	.word	0x0000038d

000003e8 <_ZN16Commands_Handler17CommandSetPWMFansEv>:

bool Commands_Handler::CommandSetPWMFans(void){
     3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	uint8_t		*data=data_fans_array;
	
	
	//memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
	memcpy(&message64,usbMessageBuffer,64);
     3ea:	68c3      	ldr	r3, [r0, #12]
     3ec:	f100 0210 	add.w	r2, r0, #16
     3f0:	f103 0140 	add.w	r1, r3, #64	; 0x40
     3f4:	681f      	ldr	r7, [r3, #0]
     3f6:	685e      	ldr	r6, [r3, #4]
     3f8:	689d      	ldr	r5, [r3, #8]
     3fa:	68dc      	ldr	r4, [r3, #12]
     3fc:	6017      	str	r7, [r2, #0]
     3fe:	6056      	str	r6, [r2, #4]
     400:	6095      	str	r5, [r2, #8]
     402:	60d4      	str	r4, [r2, #12]
     404:	3310      	adds	r3, #16
     406:	3210      	adds	r2, #16
     408:	428b      	cmp	r3, r1
     40a:	d1f3      	bne.n	3f4 <_ZN16Commands_Handler17CommandSetPWMFansEv+0xc>
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task ==	kHVACCommandSetPWMFans);
     40c:	7d43      	ldrb	r3, [r0, #21]
     40e:	2b4c      	cmp	r3, #76	; 0x4c
     410:	bf0c      	ite	eq
     412:	2501      	moveq	r5, #1
     414:	2500      	movne	r5, #0
	if (result){
     416:	d112      	bne.n	43e <_ZN16Commands_Handler17CommandSetPWMFansEv+0x56>
     418:	4604      	mov	r4, r0
		data=message64.content;
		if (data[0]>0)
     41a:	7d81      	ldrb	r1, [r0, #22]
     41c:	b119      	cbz	r1, 426 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x3e>
		{
			fans.evaporator[0]->SetPWM(data[0]);
     41e:	4b09      	ldr	r3, [pc, #36]	; (444 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     420:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     422:	4b09      	ldr	r3, [pc, #36]	; (448 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x60>)
     424:	4798      	blx	r3
			
		}

		if (data[1]>0){
     426:	7de1      	ldrb	r1, [r4, #23]
     428:	b119      	cbz	r1, 432 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x4a>
			fans.evaporator[1]->SetPWM(data[1]);
     42a:	4b06      	ldr	r3, [pc, #24]	; (444 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     42c:	6e18      	ldr	r0, [r3, #96]	; 0x60
     42e:	4b06      	ldr	r3, [pc, #24]	; (448 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x60>)
     430:	4798      	blx	r3
		}
		if (data[2]>0){
     432:	7e21      	ldrb	r1, [r4, #24]
     434:	b119      	cbz	r1, 43e <_ZN16Commands_Handler17CommandSetPWMFansEv+0x56>
			fans.condesator->SetPWM(data[2]);
     436:	4b03      	ldr	r3, [pc, #12]	; (444 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x5c>)
     438:	6e58      	ldr	r0, [r3, #100]	; 0x64
     43a:	4b04      	ldr	r3, [pc, #16]	; (44c <_ZN16Commands_Handler17CommandSetPWMFansEv+0x64>)
     43c:	4798      	blx	r3
		

	}
	
	return result;
}
     43e:	4628      	mov	r0, r5
     440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     442:	bf00      	nop
     444:	200037a8 	.word	0x200037a8
     448:	00011891 	.word	0x00011891
     44c:	000114c9 	.word	0x000114c9

00000450 <_ZN16Commands_Handler22CommandSetFlapperValveEv>:
	}
	
	return result;
}

bool  Commands_Handler::CommandSetFlapperValve(void){
     450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}


	uint8_t	data=0;
	
	memcpy(&message64,usbMessageBuffer,64);
     454:	68c3      	ldr	r3, [r0, #12]
     456:	f100 0210 	add.w	r2, r0, #16
     45a:	f103 0140 	add.w	r1, r3, #64	; 0x40
     45e:	681f      	ldr	r7, [r3, #0]
     460:	685e      	ldr	r6, [r3, #4]
     462:	689d      	ldr	r5, [r3, #8]
     464:	68dc      	ldr	r4, [r3, #12]
     466:	6017      	str	r7, [r2, #0]
     468:	6056      	str	r6, [r2, #4]
     46a:	6095      	str	r5, [r2, #8]
     46c:	60d4      	str	r4, [r2, #12]
     46e:	3310      	adds	r3, #16
     470:	3210      	adds	r2, #16
     472:	428b      	cmp	r3, r1
     474:	d1f3      	bne.n	45e <_ZN16Commands_Handler22CommandSetFlapperValveEv+0xe>
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task == kHVACCommandFlapperValve);
     476:	7d43      	ldrb	r3, [r0, #21]
     478:	2b4f      	cmp	r3, #79	; 0x4f
     47a:	bf0c      	ite	eq
     47c:	2701      	moveq	r7, #1
     47e:	2700      	movne	r7, #0
	if (result){
     480:	d002      	beq.n	488 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x38>
	}else{

	}
	
	return result;
}
     482:	4638      	mov	r0, r7
     484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     488:	4e0c      	ldr	r6, [pc, #48]	; (4bc <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x6c>)
     48a:	f100 0516 	add.w	r5, r0, #22
     48e:	f100 0418 	add.w	r4, r0, #24
					flapper.valve[i]->StopControlling();
     492:	f8df 902c 	ldr.w	r9, [pc, #44]	; 4c0 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x70>
					flapper.valve[i]->StartControlling() ;
     496:	f8df 802c 	ldr.w	r8, [pc, #44]	; 4c4 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x74>
     49a:	e003      	b.n	4a4 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x54>
     49c:	47c0      	blx	r8
     49e:	3501      	adds	r5, #1
		for (int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     4a0:	42a5      	cmp	r5, r4
     4a2:	d0ee      	beq.n	482 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x32>
			if (flapper.valve[i]->isOK)
     4a4:	f856 0b04 	ldr.w	r0, [r6], #4
     4a8:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
     4ac:	2b00      	cmp	r3, #0
     4ae:	d0f6      	beq.n	49e <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x4e>
				if ((data&(0x01))>0)
     4b0:	782b      	ldrb	r3, [r5, #0]
     4b2:	f013 0f01 	tst.w	r3, #1
     4b6:	d1f1      	bne.n	49c <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x4c>
					flapper.valve[i]->StopControlling();
     4b8:	47c8      	blx	r9
     4ba:	e7f0      	b.n	49e <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x4e>
     4bc:	20005440 	.word	0x20005440
     4c0:	00013195 	.word	0x00013195
     4c4:	00013379 	.word	0x00013379

000004c8 <_ZN16Commands_Handler25CommandSetFlapperPositionEv>:

bool  Commands_Handler::CommandSetFlapperPosition(void){
     4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}


	uint8_t	data=0;
	
	memcpy(&message64,usbMessageBuffer,64);
     4cc:	68c3      	ldr	r3, [r0, #12]
     4ce:	f100 0210 	add.w	r2, r0, #16
     4d2:	f103 0140 	add.w	r1, r3, #64	; 0x40
     4d6:	681f      	ldr	r7, [r3, #0]
     4d8:	685e      	ldr	r6, [r3, #4]
     4da:	689d      	ldr	r5, [r3, #8]
     4dc:	68dc      	ldr	r4, [r3, #12]
     4de:	6017      	str	r7, [r2, #0]
     4e0:	6056      	str	r6, [r2, #4]
     4e2:	6095      	str	r5, [r2, #8]
     4e4:	60d4      	str	r4, [r2, #12]
     4e6:	3310      	adds	r3, #16
     4e8:	3210      	adds	r2, #16
     4ea:	428b      	cmp	r3, r1
     4ec:	d1f3      	bne.n	4d6 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0xe>
	

	bool	result(message64.header.task == kHVACWriteSetpointFlapperValve);
     4ee:	7d43      	ldrb	r3, [r0, #21]
     4f0:	2b50      	cmp	r3, #80	; 0x50
     4f2:	bf0c      	ite	eq
     4f4:	2701      	moveq	r7, #1
     4f6:	2700      	movne	r7, #0
	if (result){
     4f8:	d002      	beq.n	500 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x38>
	}else{

	}
	
	return result;
}
     4fa:	4638      	mov	r0, r7
     4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     500:	4d0f      	ldr	r5, [pc, #60]	; (540 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x78>)
     502:	f100 0616 	add.w	r6, r0, #22
     506:	f100 0418 	add.w	r4, r0, #24
				flapper.valve[i]->doPeriodicTask=false;
     50a:	f04f 0900 	mov.w	r9, #0
					flapper.valve[i]->StartControlling(data);
     50e:	f8df a034 	ldr.w	sl, [pc, #52]	; 544 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x7c>
     512:	e007      	b.n	524 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x5c>
				flapper.valve[i]->doPeriodicTask=false;
     514:	f8d8 3000 	ldr.w	r3, [r8]
     518:	f883 9079 	strb.w	r9, [r3, #121]	; 0x79
     51c:	3504      	adds	r5, #4
     51e:	3601      	adds	r6, #1
		for ( int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     520:	42a6      	cmp	r6, r4
     522:	d0ea      	beq.n	4fa <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x32>
     524:	46a8      	mov	r8, r5
			if (flapper.valve[i]->isOK)
     526:	6828      	ldr	r0, [r5, #0]
     528:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
     52c:	2b00      	cmp	r3, #0
     52e:	d0f5      	beq.n	51c <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x54>
				if (flapper.valve[i]->controllerEnabled)
     530:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
     534:	2b00      	cmp	r3, #0
     536:	d0ed      	beq.n	514 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x4c>
					flapper.valve[i]->StartControlling(data);
     538:	7831      	ldrb	r1, [r6, #0]
     53a:	47d0      	blx	sl
     53c:	e7ea      	b.n	514 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x4c>
     53e:	bf00      	nop
     540:	20005440 	.word	0x20005440
     544:	000131d9 	.word	0x000131d9

00000548 <_ZN16Commands_Handler22CommandWriteParametersEv>:


	
	return result;
}
bool Commands_Handler::CommandWriteParameters(void){
     548:	b510      	push	{r4, lr}

	uint32_t	w,r;
	int n=sizeof(HVACMessageHeader);
	HVACMessageHeader hm;
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     54a:	68c3      	ldr	r3, [r0, #12]
     54c:	6819      	ldr	r1, [r3, #0]
     54e:	6041      	str	r1, [r0, #4]
     550:	889c      	ldrh	r4, [r3, #4]
     552:	7999      	ldrb	r1, [r3, #6]
     554:	8104      	strh	r4, [r0, #8]
     556:	7281      	strb	r1, [r0, #10]
	
	bool	result(singleTaskMessage.header.task == kGAINCommandWriteParameters);
	if (result){
     558:	7a42      	ldrb	r2, [r0, #9]
     55a:	2a47      	cmp	r2, #71	; 0x47
     55c:	d001      	beq.n	562 <_ZN16Commands_Handler22CommandWriteParametersEv+0x1a>
	bool	result(singleTaskMessage.header.task == kGAINCommandWriteParameters);
     55e:	2000      	movs	r0, #0
		}else{

	}
	
	return result;
}
     560:	bd10      	pop	{r4, pc}
		memcpy((uint8_t*)&parameters,&usbMessageBuffer[n],sizeof(UserParameters));
     562:	88db      	ldrh	r3, [r3, #6]
     564:	4601      	mov	r1, r0
     566:	f821 3f5c 	strh.w	r3, [r1, #92]!
		r=memory.SaveParameters(parameters);
     56a:	4803      	ldr	r0, [pc, #12]	; (578 <_ZN16Commands_Handler22CommandWriteParametersEv+0x30>)
     56c:	4b03      	ldr	r3, [pc, #12]	; (57c <_ZN16Commands_Handler22CommandWriteParametersEv+0x34>)
     56e:	4798      	blx	r3
		result=(bool)(r==0);
     570:	fab0 f080 	clz	r0, r0
     574:	0940      	lsrs	r0, r0, #5
     576:	bd10      	pop	{r4, pc}
     578:	20006ae8 	.word	0x20006ae8
     57c:	000145b5 	.word	0x000145b5

00000580 <_ZN16Commands_Handler17CommandSetHeatersEv>:
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
		
	}
	return result;
}
bool Commands_Handler::CommandSetHeaters(void){
     580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}


	
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     584:	68c3      	ldr	r3, [r0, #12]
     586:	6819      	ldr	r1, [r3, #0]
     588:	6041      	str	r1, [r0, #4]
     58a:	8899      	ldrh	r1, [r3, #4]
     58c:	799b      	ldrb	r3, [r3, #6]
     58e:	8101      	strh	r1, [r0, #8]
     590:	7283      	strb	r3, [r0, #10]
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(singleTaskMessage.header.task == kHVACCommandSetHeaters);
     592:	7a43      	ldrb	r3, [r0, #9]
     594:	2b49      	cmp	r3, #73	; 0x49
     596:	bf0c      	ite	eq
     598:	f04f 0a01 	moveq.w	sl, #1
     59c:	f04f 0a00 	movne.w	sl, #0
	if (result){
     5a0:	d002      	beq.n	5a8 <_ZN16Commands_Handler17CommandSetHeatersEv+0x28>
			
		}
	}
	
	return result;
}
     5a2:	4650      	mov	r0, sl
     5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		lastEnableHeaters=enableHeaters;
     5a8:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
     5ac:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
		enableHeaters=singleTaskMessage.description;
     5b0:	7a83      	ldrb	r3, [r0, #10]
     5b2:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
		if (enableHeaters!=lastEnableHeaters)
     5b6:	429a      	cmp	r2, r3
     5b8:	d0f3      	beq.n	5a2 <_ZN16Commands_Handler17CommandSetHeatersEv+0x22>
     5ba:	4605      	mov	r5, r0
     5bc:	2600      	movs	r6, #0
					heaters.module[j]->SetRelay(i,powerOn);
     5be:	f8df 9030 	ldr.w	r9, [pc, #48]	; 5f0 <_ZN16Commands_Handler17CommandSetHeatersEv+0x70>
     5c2:	f8df 8030 	ldr.w	r8, [pc, #48]	; 5f4 <_ZN16Commands_Handler17CommandSetHeatersEv+0x74>
     5c6:	2400      	movs	r4, #0
     5c8:	eb06 0709 	add.w	r7, r6, r9
					powerOn=enableHeaters&(0x01<<(i+4*j));
     5cc:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
     5d0:	1933      	adds	r3, r6, r4
     5d2:	411a      	asrs	r2, r3
     5d4:	f002 0201 	and.w	r2, r2, #1
     5d8:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
					heaters.module[j]->SetRelay(i,powerOn);
     5dc:	b2e1      	uxtb	r1, r4
     5de:	6a78      	ldr	r0, [r7, #36]	; 0x24
     5e0:	47c0      	blx	r8
     5e2:	3401      	adds	r4, #1
				for (uint8_t i = 0; i < 4; i++)
     5e4:	2c04      	cmp	r4, #4
     5e6:	d1f1      	bne.n	5cc <_ZN16Commands_Handler17CommandSetHeatersEv+0x4c>
     5e8:	3604      	adds	r6, #4
			for (uint8_t j = 0; j < 2; j++)
     5ea:	2e08      	cmp	r6, #8
     5ec:	d1eb      	bne.n	5c6 <_ZN16Commands_Handler17CommandSetHeatersEv+0x46>
     5ee:	e7d8      	b.n	5a2 <_ZN16Commands_Handler17CommandSetHeatersEv+0x22>
     5f0:	20002dec 	.word	0x20002dec
     5f4:	00014251 	.word	0x00014251

000005f8 <_ZN16Commands_Handler18CommandSetScavengeEv>:
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
		
	}
	return result;
}
bool Commands_Handler::CommandSetScavenge(void){
     5f8:	b510      	push	{r4, lr}


	
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     5fa:	68c3      	ldr	r3, [r0, #12]
     5fc:	6819      	ldr	r1, [r3, #0]
     5fe:	6041      	str	r1, [r0, #4]
     600:	8899      	ldrh	r1, [r3, #4]
     602:	799b      	ldrb	r3, [r3, #6]
     604:	8101      	strh	r1, [r0, #8]
     606:	7283      	strb	r3, [r0, #10]
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(singleTaskMessage.header.task == kHVACCommandSetScavenge);
     608:	7a43      	ldrb	r3, [r0, #9]
     60a:	2b53      	cmp	r3, #83	; 0x53
     60c:	bf0c      	ite	eq
     60e:	2401      	moveq	r4, #1
     610:	2400      	movne	r4, #0
	if (result){
     612:	d001      	beq.n	618 <_ZN16Commands_Handler18CommandSetScavengeEv+0x20>
		scavenge.SetEnable(powerOn);
	
	}
	
	return result;
}
     614:	4620      	mov	r0, r4
     616:	bd10      	pop	{r4, pc}
		data_byte=singleTaskMessage.description;
     618:	7a81      	ldrb	r1, [r0, #10]
     61a:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
		powerOn=(data_byte&(0x02))>0;
     61e:	f3c1 0140 	ubfx	r1, r1, #1, #1
     622:	f880 1061 	strb.w	r1, [r0, #97]	; 0x61
		scavenge.SetEnable(powerOn);
     626:	4802      	ldr	r0, [pc, #8]	; (630 <_ZN16Commands_Handler18CommandSetScavengeEv+0x38>)
     628:	4b02      	ldr	r3, [pc, #8]	; (634 <_ZN16Commands_Handler18CommandSetScavengeEv+0x3c>)
     62a:	4798      	blx	r3
     62c:	e7f2      	b.n	614 <_ZN16Commands_Handler18CommandSetScavengeEv+0x1c>
     62e:	bf00      	nop
     630:	2000ce38 	.word	0x2000ce38
     634:	000147ad 	.word	0x000147ad

00000638 <_ZN16Commands_Handler20CommandSetCompressorEv>:
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
		
	}
	return result;
}
bool Commands_Handler::CommandSetCompressor(void){
     638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	memcpy(&message64,usbMessageBuffer,64);
     63a:	68c3      	ldr	r3, [r0, #12]
     63c:	f100 0210 	add.w	r2, r0, #16
     640:	f103 0140 	add.w	r1, r3, #64	; 0x40
     644:	681f      	ldr	r7, [r3, #0]
     646:	685e      	ldr	r6, [r3, #4]
     648:	689d      	ldr	r5, [r3, #8]
     64a:	68dc      	ldr	r4, [r3, #12]
     64c:	6017      	str	r7, [r2, #0]
     64e:	6056      	str	r6, [r2, #4]
     650:	6095      	str	r5, [r2, #8]
     652:	60d4      	str	r4, [r2, #12]
     654:	3310      	adds	r3, #16
     656:	3210      	adds	r2, #16
     658:	428b      	cmp	r3, r1
     65a:	d1f3      	bne.n	644 <_ZN16Commands_Handler20CommandSetCompressorEv+0xc>
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task == kHVACCommandSetCompressor);
     65c:	7d43      	ldrb	r3, [r0, #21]
     65e:	2b55      	cmp	r3, #85	; 0x55
     660:	bf0c      	ite	eq
     662:	2501      	moveq	r5, #1
     664:	2500      	movne	r5, #0
	if (result){
     666:	d001      	beq.n	66c <_ZN16Commands_Handler20CommandSetCompressorEv+0x34>
	
		
	}
	
	return result;
     668:	4628      	mov	r0, r5
     66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     66c:	4604      	mov	r4, r0
		data_byte=message64.content[0] ;
     66e:	7d82      	ldrb	r2, [r0, #22]
     670:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
		compressor_speed=message64.content[1]*256+message64.content[2];
     674:	7dc1      	ldrb	r1, [r0, #23]
     676:	7e03      	ldrb	r3, [r0, #24]
     678:	eb03 2301 	add.w	r3, r3, r1, lsl #8
     67c:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		if ((data_byte&0x01)>0)
     680:	f012 0f01 	tst.w	r2, #1
     684:	d014      	beq.n	6b0 <_ZN16Commands_Handler20CommandSetCompressorEv+0x78>
			if (ccu.IsEnabled())
     686:	4813      	ldr	r0, [pc, #76]	; (6d4 <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     688:	4b13      	ldr	r3, [pc, #76]	; (6d8 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa0>)
     68a:	4798      	blx	r3
     68c:	b158      	cbz	r0, 6a6 <_ZN16Commands_Handler20CommandSetCompressorEv+0x6e>
				if ( compressor_speed>0)
     68e:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
     692:	b119      	cbz	r1, 69c <_ZN16Commands_Handler20CommandSetCompressorEv+0x64>
					ccu.Set_Motor_Speed(compressor_speed);
     694:	4811      	ldr	r0, [pc, #68]	; (6dc <_ZN16Commands_Handler20CommandSetCompressorEv+0xa4>)
     696:	4b12      	ldr	r3, [pc, #72]	; (6e0 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa8>)
     698:	4798      	blx	r3
     69a:	e7e5      	b.n	668 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
					ccu.SetEnable(false);
     69c:	2100      	movs	r1, #0
     69e:	480d      	ldr	r0, [pc, #52]	; (6d4 <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     6a0:	4b10      	ldr	r3, [pc, #64]	; (6e4 <_ZN16Commands_Handler20CommandSetCompressorEv+0xac>)
     6a2:	4798      	blx	r3
     6a4:	e7e0      	b.n	668 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
				ccu.SetEnable(true);
     6a6:	2101      	movs	r1, #1
     6a8:	480a      	ldr	r0, [pc, #40]	; (6d4 <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     6aa:	4b0e      	ldr	r3, [pc, #56]	; (6e4 <_ZN16Commands_Handler20CommandSetCompressorEv+0xac>)
     6ac:	4798      	blx	r3
     6ae:	e7db      	b.n	668 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
			if (ccu.IsEnabled())
     6b0:	4808      	ldr	r0, [pc, #32]	; (6d4 <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     6b2:	4b09      	ldr	r3, [pc, #36]	; (6d8 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa0>)
     6b4:	4798      	blx	r3
     6b6:	b938      	cbnz	r0, 6c8 <_ZN16Commands_Handler20CommandSetCompressorEv+0x90>
				if ( compressor_speed>0)
     6b8:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
     6bc:	2900      	cmp	r1, #0
     6be:	d0d3      	beq.n	668 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
					ccu.Set_Motor_Speed(compressor_speed);
     6c0:	4806      	ldr	r0, [pc, #24]	; (6dc <_ZN16Commands_Handler20CommandSetCompressorEv+0xa4>)
     6c2:	4b07      	ldr	r3, [pc, #28]	; (6e0 <_ZN16Commands_Handler20CommandSetCompressorEv+0xa8>)
     6c4:	4798      	blx	r3
     6c6:	e7cf      	b.n	668 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
				ccu.SetEnable(false);
     6c8:	2100      	movs	r1, #0
     6ca:	4802      	ldr	r0, [pc, #8]	; (6d4 <_ZN16Commands_Handler20CommandSetCompressorEv+0x9c>)
     6cc:	4b05      	ldr	r3, [pc, #20]	; (6e4 <_ZN16Commands_Handler20CommandSetCompressorEv+0xac>)
     6ce:	4798      	blx	r3
     6d0:	e7ca      	b.n	668 <_ZN16Commands_Handler20CommandSetCompressorEv+0x30>
     6d2:	bf00      	nop
     6d4:	20002ac8 	.word	0x20002ac8
     6d8:	0000f4d1 	.word	0x0000f4d1
     6dc:	20002918 	.word	0x20002918
     6e0:	0000f8e9 	.word	0x0000f8e9
     6e4:	0000f49d 	.word	0x0000f49d

000006e8 <_GLOBAL__sub_I_local_compressor_data_array>:
     6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     6ec:	4c2c      	ldr	r4, [pc, #176]	; (7a0 <_GLOBAL__sub_I_local_compressor_data_array+0xb8>)
     6ee:	f1a4 05dc 	sub.w	r5, r4, #220	; 0xdc
     6f2:	492c      	ldr	r1, [pc, #176]	; (7a4 <_GLOBAL__sub_I_local_compressor_data_array+0xbc>)
     6f4:	4628      	mov	r0, r5
     6f6:	4b2c      	ldr	r3, [pc, #176]	; (7a8 <_GLOBAL__sub_I_local_compressor_data_array+0xc0>)
     6f8:	4798      	blx	r3
     6fa:	4e2c      	ldr	r6, [pc, #176]	; (7ac <_GLOBAL__sub_I_local_compressor_data_array+0xc4>)
     6fc:	4632      	mov	r2, r6
     6fe:	492c      	ldr	r1, [pc, #176]	; (7b0 <_GLOBAL__sub_I_local_compressor_data_array+0xc8>)
     700:	4628      	mov	r0, r5
     702:	4d2c      	ldr	r5, [pc, #176]	; (7b4 <_GLOBAL__sub_I_local_compressor_data_array+0xcc>)
     704:	47a8      	blx	r5
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     706:	f1a4 09c4 	sub.w	r9, r4, #196	; 0xc4
     70a:	492b      	ldr	r1, [pc, #172]	; (7b8 <_GLOBAL__sub_I_local_compressor_data_array+0xd0>)
     70c:	4648      	mov	r0, r9
     70e:	4f2b      	ldr	r7, [pc, #172]	; (7bc <_GLOBAL__sub_I_local_compressor_data_array+0xd4>)
     710:	47b8      	blx	r7
     712:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 7dc <_GLOBAL__sub_I_local_compressor_data_array+0xf4>
     716:	4632      	mov	r2, r6
     718:	4641      	mov	r1, r8
     71a:	4648      	mov	r0, r9
     71c:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     71e:	f1a4 09a4 	sub.w	r9, r4, #164	; 0xa4
     722:	4927      	ldr	r1, [pc, #156]	; (7c0 <_GLOBAL__sub_I_local_compressor_data_array+0xd8>)
     724:	4648      	mov	r0, r9
     726:	47b8      	blx	r7
     728:	4632      	mov	r2, r6
     72a:	4641      	mov	r1, r8
     72c:	4648      	mov	r0, r9
     72e:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     730:	f1a4 0984 	sub.w	r9, r4, #132	; 0x84
     734:	4923      	ldr	r1, [pc, #140]	; (7c4 <_GLOBAL__sub_I_local_compressor_data_array+0xdc>)
     736:	4648      	mov	r0, r9
     738:	47b8      	blx	r7
     73a:	4632      	mov	r2, r6
     73c:	4641      	mov	r1, r8
     73e:	4648      	mov	r0, r9
     740:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     742:	f1a4 0964 	sub.w	r9, r4, #100	; 0x64
     746:	4920      	ldr	r1, [pc, #128]	; (7c8 <_GLOBAL__sub_I_local_compressor_data_array+0xe0>)
     748:	4648      	mov	r0, r9
     74a:	47b8      	blx	r7
     74c:	4632      	mov	r2, r6
     74e:	4641      	mov	r1, r8
     750:	4648      	mov	r0, r9
     752:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     754:	f1a4 0944 	sub.w	r9, r4, #68	; 0x44
     758:	491c      	ldr	r1, [pc, #112]	; (7cc <_GLOBAL__sub_I_local_compressor_data_array+0xe4>)
     75a:	4648      	mov	r0, r9
     75c:	47b8      	blx	r7
     75e:	4632      	mov	r2, r6
     760:	4641      	mov	r1, r8
     762:	4648      	mov	r0, r9
     764:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     766:	f1a4 0924 	sub.w	r9, r4, #36	; 0x24
     76a:	4919      	ldr	r1, [pc, #100]	; (7d0 <_GLOBAL__sub_I_local_compressor_data_array+0xe8>)
     76c:	4648      	mov	r0, r9
     76e:	47b8      	blx	r7
     770:	4632      	mov	r2, r6
     772:	4641      	mov	r1, r8
     774:	4648      	mov	r0, r9
     776:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     778:	f1a4 0904 	sub.w	r9, r4, #4
     77c:	4915      	ldr	r1, [pc, #84]	; (7d4 <_GLOBAL__sub_I_local_compressor_data_array+0xec>)
     77e:	4648      	mov	r0, r9
     780:	47b8      	blx	r7
     782:	4632      	mov	r2, r6
     784:	4641      	mov	r1, r8
     786:	4648      	mov	r0, r9
     788:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     78a:	341c      	adds	r4, #28
     78c:	4912      	ldr	r1, [pc, #72]	; (7d8 <_GLOBAL__sub_I_local_compressor_data_array+0xf0>)
     78e:	4620      	mov	r0, r4
     790:	47b8      	blx	r7
     792:	4632      	mov	r2, r6
     794:	4641      	mov	r1, r8
     796:	4620      	mov	r0, r4
     798:	47a8      	blx	r5
     79a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     79e:	bf00      	nop
     7a0:	20001b5c 	.word	0x20001b5c
     7a4:	2000e058 	.word	0x2000e058
     7a8:	0000fc6d 	.word	0x0000fc6d
     7ac:	20000000 	.word	0x20000000
     7b0:	0000fc89 	.word	0x0000fc89
     7b4:	0001a611 	.word	0x0001a611
     7b8:	2000df28 	.word	0x2000df28
     7bc:	00010441 	.word	0x00010441
     7c0:	2000dfbc 	.word	0x2000dfbc
     7c4:	2000e0e0 	.word	0x2000e0e0
     7c8:	2000dfdc 	.word	0x2000dfdc
     7cc:	2000e0a0 	.word	0x2000e0a0
     7d0:	2000e0c0 	.word	0x2000e0c0
     7d4:	2000df98 	.word	0x2000df98
     7d8:	2000e038 	.word	0x2000e038
     7dc:	00010479 	.word	0x00010479

000007e0 <_ZN16Commands_Handler17CommandFansStatusEv>:
bool Commands_Handler::CommandFansStatus(){
     7e0:	b530      	push	{r4, r5, lr}
     7e2:	b083      	sub	sp, #12
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     7e4:	68c3      	ldr	r3, [r0, #12]
     7e6:	6819      	ldr	r1, [r3, #0]
     7e8:	6041      	str	r1, [r0, #4]
     7ea:	8899      	ldrh	r1, [r3, #4]
     7ec:	799b      	ldrb	r3, [r3, #6]
     7ee:	8101      	strh	r1, [r0, #8]
     7f0:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandRedStatusFans);
     7f2:	7a43      	ldrb	r3, [r0, #9]
     7f4:	2b51      	cmp	r3, #81	; 0x51
     7f6:	bf0c      	ite	eq
     7f8:	2501      	moveq	r5, #1
     7fa:	2500      	movne	r5, #0
	if (result){
     7fc:	d002      	beq.n	804 <_ZN16Commands_Handler17CommandFansStatusEv+0x24>
}
     7fe:	4628      	mov	r0, r5
     800:	b003      	add	sp, #12
     802:	bd30      	pop	{r4, r5, pc}
     804:	4604      	mov	r4, r0
		fans.GetGPIOSValues(gpios);
     806:	4669      	mov	r1, sp
     808:	4808      	ldr	r0, [pc, #32]	; (82c <_ZN16Commands_Handler17CommandFansStatusEv+0x4c>)
     80a:	4b09      	ldr	r3, [pc, #36]	; (830 <_ZN16Commands_Handler17CommandFansStatusEv+0x50>)
     80c:	4798      	blx	r3
		CreateFullBufferMessage(usbMessageBuffer,gpios);
     80e:	6823      	ldr	r3, [r4, #0]
     810:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     814:	466a      	mov	r2, sp
     816:	68e1      	ldr	r1, [r4, #12]
     818:	4420      	add	r0, r4
     81a:	4b06      	ldr	r3, [pc, #24]	; (834 <_ZN16Commands_Handler17CommandFansStatusEv+0x54>)
     81c:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     81e:	2240      	movs	r2, #64	; 0x40
     820:	68e1      	ldr	r1, [r4, #12]
     822:	4805      	ldr	r0, [pc, #20]	; (838 <_ZN16Commands_Handler17CommandFansStatusEv+0x58>)
     824:	4b05      	ldr	r3, [pc, #20]	; (83c <_ZN16Commands_Handler17CommandFansStatusEv+0x5c>)
     826:	4798      	blx	r3
     828:	e7e9      	b.n	7fe <_ZN16Commands_Handler17CommandFansStatusEv+0x1e>
     82a:	bf00      	nop
     82c:	200037a8 	.word	0x200037a8
     830:	000116ed 	.word	0x000116ed
     834:	000010cd 	.word	0x000010cd
     838:	200034b0 	.word	0x200034b0
     83c:	00010e71 	.word	0x00010e71

00000840 <_ZN16Commands_Handler22CommandReadFlapperDataEv>:
bool Commands_Handler::CommandReadFlapperData(void){
     840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     844:	b08c      	sub	sp, #48	; 0x30
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     846:	68c3      	ldr	r3, [r0, #12]
     848:	6819      	ldr	r1, [r3, #0]
     84a:	6041      	str	r1, [r0, #4]
     84c:	8899      	ldrh	r1, [r3, #4]
     84e:	799b      	ldrb	r3, [r3, #6]
     850:	8101      	strh	r1, [r0, #8]
     852:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACReadPositionFlapperValve);
     854:	7a43      	ldrb	r3, [r0, #9]
     856:	2b4e      	cmp	r3, #78	; 0x4e
     858:	bf0c      	ite	eq
     85a:	f04f 0801 	moveq.w	r8, #1
     85e:	f04f 0800 	movne.w	r8, #0
	if (result){
     862:	d003      	beq.n	86c <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x2c>
}
     864:	4640      	mov	r0, r8
     866:	b00c      	add	sp, #48	; 0x30
     868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     86c:	4605      	mov	r5, r0
     86e:	4f22      	ldr	r7, [pc, #136]	; (8f8 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xb8>)
	if (result){
     870:	2600      	movs	r6, #0
				fvds[i]= flapper.valve[i]->dataStruct;
     872:	f10d 0904 	add.w	r9, sp, #4
				flapper.valve[i]->UpdateFlapperValveData();
     876:	f8df a090 	ldr.w	sl, [pc, #144]	; 908 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xc8>
			if (flapper.valve[i]->isOK)
     87a:	6838      	ldr	r0, [r7, #0]
     87c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
     880:	bb23      	cbnz	r3, 8cc <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x8c>
				fvds[i]= flapper.valve[i]->dataStruct;
     882:	eb06 0e09 	add.w	lr, r6, r9
     886:	f100 0484 	add.w	r4, r0, #132	; 0x84
     88a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     88c:	f846 0009 	str.w	r0, [r6, r9]
     890:	f8ce 1004 	str.w	r1, [lr, #4]
     894:	f8ce 2008 	str.w	r2, [lr, #8]
     898:	f8ce 300c 	str.w	r3, [lr, #12]
     89c:	6820      	ldr	r0, [r4, #0]
     89e:	f8ce 0010 	str.w	r0, [lr, #16]
     8a2:	7923      	ldrb	r3, [r4, #4]
     8a4:	f88e 3014 	strb.w	r3, [lr, #20]
     8a8:	3704      	adds	r7, #4
     8aa:	3615      	adds	r6, #21
		for (int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     8ac:	2e2a      	cmp	r6, #42	; 0x2a
     8ae:	d1e4      	bne.n	87a <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x3a>
		CreateFullBufferMessage(usbMessageBuffer,(uint8_t*)&fvds[0]);
     8b0:	682b      	ldr	r3, [r5, #0]
     8b2:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     8b6:	aa01      	add	r2, sp, #4
     8b8:	68e9      	ldr	r1, [r5, #12]
     8ba:	4428      	add	r0, r5
     8bc:	4b0f      	ldr	r3, [pc, #60]	; (8fc <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xbc>)
     8be:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     8c0:	2240      	movs	r2, #64	; 0x40
     8c2:	68e9      	ldr	r1, [r5, #12]
     8c4:	480e      	ldr	r0, [pc, #56]	; (900 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xc0>)
     8c6:	4b0f      	ldr	r3, [pc, #60]	; (904 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0xc4>)
     8c8:	4798      	blx	r3
     8ca:	e7cb      	b.n	864 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x24>
				flapper.valve[i]->UpdateFlapperValveData();
     8cc:	47d0      	blx	sl
				fvds[i]= flapper.valve[i]->dataStruct;
     8ce:	683c      	ldr	r4, [r7, #0]
     8d0:	eb06 0e09 	add.w	lr, r6, r9
     8d4:	3484      	adds	r4, #132	; 0x84
     8d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     8d8:	f846 0009 	str.w	r0, [r6, r9]
     8dc:	f8ce 1004 	str.w	r1, [lr, #4]
     8e0:	f8ce 2008 	str.w	r2, [lr, #8]
     8e4:	f8ce 300c 	str.w	r3, [lr, #12]
     8e8:	6820      	ldr	r0, [r4, #0]
     8ea:	f8ce 0010 	str.w	r0, [lr, #16]
     8ee:	7923      	ldrb	r3, [r4, #4]
     8f0:	f88e 3014 	strb.w	r3, [lr, #20]
     8f4:	e7d8      	b.n	8a8 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x68>
     8f6:	bf00      	nop
     8f8:	20005440 	.word	0x20005440
     8fc:	000010cd 	.word	0x000010cd
     900:	200034b0 	.word	0x200034b0
     904:	00010e71 	.word	0x00010e71
     908:	000133d5 	.word	0x000133d5

0000090c <_ZN16Commands_Handler21CommandReadParametersEv>:
bool Commands_Handler::CommandReadParameters(){
     90c:	b538      	push	{r3, r4, r5, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     90e:	68c3      	ldr	r3, [r0, #12]
     910:	6819      	ldr	r1, [r3, #0]
     912:	6041      	str	r1, [r0, #4]
     914:	8899      	ldrh	r1, [r3, #4]
     916:	799b      	ldrb	r3, [r3, #6]
     918:	8101      	strh	r1, [r0, #8]
     91a:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kGAINCommandReadParameters);
     91c:	7a43      	ldrb	r3, [r0, #9]
     91e:	2b48      	cmp	r3, #72	; 0x48
     920:	bf0c      	ite	eq
     922:	2501      	moveq	r5, #1
     924:	2500      	movne	r5, #0
	if (result){
     926:	d001      	beq.n	92c <_ZN16Commands_Handler21CommandReadParametersEv+0x20>
}
     928:	4628      	mov	r0, r5
     92a:	bd38      	pop	{r3, r4, r5, pc}
     92c:	4604      	mov	r4, r0
		memory.ReadParameters(parameters);
     92e:	f100 015c 	add.w	r1, r0, #92	; 0x5c
     932:	4811      	ldr	r0, [pc, #68]	; (978 <_ZN16Commands_Handler21CommandReadParametersEv+0x6c>)
     934:	4b11      	ldr	r3, [pc, #68]	; (97c <_ZN16Commands_Handler21CommandReadParametersEv+0x70>)
     936:	4798      	blx	r3
		memcpy(usbMessageBuffer,(void*)&hm,n);
     938:	68e3      	ldr	r3, [r4, #12]
     93a:	4a11      	ldr	r2, [pc, #68]	; (980 <_ZN16Commands_Handler21CommandReadParametersEv+0x74>)
     93c:	601a      	str	r2, [r3, #0]
     93e:	2200      	movs	r2, #0
     940:	711a      	strb	r2, [r3, #4]
     942:	715a      	strb	r2, [r3, #5]
		memcpy((uint8_t*)&usbMessageBuffer[n],(void*)&parameters,sizeof(UserParameters));
     944:	68e3      	ldr	r3, [r4, #12]
     946:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
     94a:	80da      	strh	r2, [r3, #6]
		is_stand_alone=flapper.IsStandAlone();
     94c:	480d      	ldr	r0, [pc, #52]	; (984 <_ZN16Commands_Handler21CommandReadParametersEv+0x78>)
     94e:	4b0e      	ldr	r3, [pc, #56]	; (988 <_ZN16Commands_Handler21CommandReadParametersEv+0x7c>)
     950:	4798      	blx	r3
     952:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
		if (is_stand_alone)
     956:	b148      	cbz	r0, 96c <_ZN16Commands_Handler21CommandReadParametersEv+0x60>
			usbMessageBuffer[n+sizeof(UserParameters)]=parameters.flapperValveStandAloneMinimumPosition;
     958:	68e3      	ldr	r3, [r4, #12]
     95a:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
     95e:	721a      	strb	r2, [r3, #8]
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     960:	2240      	movs	r2, #64	; 0x40
     962:	68e1      	ldr	r1, [r4, #12]
     964:	4809      	ldr	r0, [pc, #36]	; (98c <_ZN16Commands_Handler21CommandReadParametersEv+0x80>)
     966:	4b0a      	ldr	r3, [pc, #40]	; (990 <_ZN16Commands_Handler21CommandReadParametersEv+0x84>)
     968:	4798      	blx	r3
     96a:	e7dd      	b.n	928 <_ZN16Commands_Handler21CommandReadParametersEv+0x1c>
			usbMessageBuffer[n+sizeof(UserParameters)]=parameters.flapperValveMinimumPosition;
     96c:	68e3      	ldr	r3, [r4, #12]
     96e:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
     972:	721a      	strb	r2, [r3, #8]
     974:	e7f4      	b.n	960 <_ZN16Commands_Handler21CommandReadParametersEv+0x54>
     976:	bf00      	nop
     978:	20006ae8 	.word	0x20006ae8
     97c:	00014489 	.word	0x00014489
     980:	61626364 	.word	0x61626364
     984:	2000535c 	.word	0x2000535c
     988:	0001214d 	.word	0x0001214d
     98c:	200034b0 	.word	0x200034b0
     990:	00010e71 	.word	0x00010e71

00000994 <_ZN16Commands_Handler21CommandReadDataLoggerEv>:
bool Commands_Handler::CommandReadDataLogger(){
     994:	b5f0      	push	{r4, r5, r6, r7, lr}
     996:	b083      	sub	sp, #12
	memcpy(&dataLogMessage,usbMessageBuffer,sizeof(DataLogMessage));
     998:	68c1      	ldr	r1, [r0, #12]
     99a:	680c      	ldr	r4, [r1, #0]
     99c:	684a      	ldr	r2, [r1, #4]
     99e:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
     9a2:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
     9a6:	890a      	ldrh	r2, [r1, #8]
     9a8:	f8a0 2088 	strh.w	r2, [r0, #136]	; 0x88
	if (result){
     9ac:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
     9b0:	2b57      	cmp	r3, #87	; 0x57
     9b2:	d002      	beq.n	9ba <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x26>
	bool	result(dataLogMessage.header.task == kHVACCommandReadDataLog);
     9b4:	2000      	movs	r0, #0
}
     9b6:	b003      	add	sp, #12
     9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9ba:	4604      	mov	r4, r0
			uint32_t add=*logger.memory_event_stack;
     9bc:	4b56      	ldr	r3, [pc, #344]	; (b18 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x184>)
     9be:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
     9c2:	681b      	ldr	r3, [r3, #0]
     9c4:	9301      	str	r3, [sp, #4]
			if (add>=dataLogMessage.address)
     9c6:	f8d0 0086 	ldr.w	r0, [r0, #134]	; 0x86
     9ca:	4283      	cmp	r3, r0
     9cc:	d240      	bcs.n	a50 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0xbc>
				current_logger_stack_value=*logger.event_buffer_arrray_stack;
     9ce:	4b52      	ldr	r3, [pc, #328]	; (b18 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x184>)
     9d0:	f8d3 35f4 	ldr.w	r3, [r3, #1524]	; 0x5f4
     9d4:	681b      	ldr	r3, [r3, #0]
     9d6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
				if (current_logger_stack_value>local_last_read_stack)
     9da:	4a50      	ldr	r2, [pc, #320]	; (b1c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x188>)
     9dc:	6812      	ldr	r2, [r2, #0]
     9de:	4293      	cmp	r3, r2
     9e0:	f240 808a 	bls.w	af8 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x164>
					logger_data_buffer_temp_size=current_logger_stack_value-local_last_read_stack;
     9e4:	1a9b      	subs	r3, r3, r2
     9e6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
					memory_flash_address=(logger_data_buffer_temp_size)&(0xffff);
     9ea:	b29b      	uxth	r3, r3
					memory_flash_address|=EVENT_LOGGER_MASK;
     9ec:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
     9f0:	f443 032a 	orr.w	r3, r3, #11141120	; 0xaa0000
     9f4:	6723      	str	r3, [r4, #112]	; 0x70
					memcpy(logger_buffer,(uint8_t*)&memory_flash_address,4);
     9f6:	67a3      	str	r3, [r4, #120]	; 0x78
					ucontroller_timestamp=logger.GetCurrentTimeStamp();
     9f8:	4f47      	ldr	r7, [pc, #284]	; (b18 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x184>)
     9fa:	4638      	mov	r0, r7
     9fc:	4b48      	ldr	r3, [pc, #288]	; (b20 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x18c>)
     9fe:	4798      	blx	r3
     a00:	6760      	str	r0, [r4, #116]	; 0x74
					memcpy((uint8_t*)&logger_buffer[4],(uint8_t*)&ucontroller_timestamp,4);
     a02:	67e0      	str	r0, [r4, #124]	; 0x7c
					CreateFullBufferMessage(usbMessageBuffer,logger_buffer);
     a04:	6823      	ldr	r3, [r4, #0]
     a06:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     a0a:	f104 0278 	add.w	r2, r4, #120	; 0x78
     a0e:	68e1      	ldr	r1, [r4, #12]
     a10:	4420      	add	r0, r4
     a12:	4b44      	ldr	r3, [pc, #272]	; (b24 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x190>)
     a14:	4798      	blx	r3
					usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     a16:	4e44      	ldr	r6, [pc, #272]	; (b28 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x194>)
     a18:	2240      	movs	r2, #64	; 0x40
     a1a:	68e1      	ldr	r1, [r4, #12]
     a1c:	4630      	mov	r0, r6
     a1e:	4d43      	ldr	r5, [pc, #268]	; (b2c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x198>)
     a20:	47a8      	blx	r5
					delay_ms(100);
     a22:	2064      	movs	r0, #100	; 0x64
     a24:	4b42      	ldr	r3, [pc, #264]	; (b30 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x19c>)
     a26:	4798      	blx	r3
					write_result=usb.write(&logger.event_buffer_arrray[local_last_read_stack],logger_data_buffer_temp_size);
     a28:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
     a2c:	4b3b      	ldr	r3, [pc, #236]	; (b1c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x188>)
     a2e:	681b      	ldr	r3, [r3, #0]
     a30:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
     a34:	4419      	add	r1, r3
     a36:	4630      	mov	r0, r6
     a38:	47a8      	blx	r5
     a3a:	66e0      	str	r0, [r4, #108]	; 0x6c
					if (write_result==0)
     a3c:	2800      	cmp	r0, #0
     a3e:	d04b      	beq.n	ad8 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x144>
						local_last_read_stack=*logger.event_buffer_arrray_stack;
     a40:	4b35      	ldr	r3, [pc, #212]	; (b18 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x184>)
     a42:	f8d3 35f4 	ldr.w	r3, [r3, #1524]	; 0x5f4
     a46:	681a      	ldr	r2, [r3, #0]
     a48:	4b34      	ldr	r3, [pc, #208]	; (b1c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x188>)
     a4a:	601a      	str	r2, [r3, #0]
						result=false;
     a4c:	2000      	movs	r0, #0
     a4e:	e7b2      	b.n	9b6 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x22>
				memory_flash_address= dataLogMessage.address;
     a50:	6720      	str	r0, [r4, #112]	; 0x70
				read_result=memory.ReadEventLogSector(memory_flash_address,memory_block);
     a52:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
     a56:	4601      	mov	r1, r0
     a58:	4836      	ldr	r0, [pc, #216]	; (b34 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x1a0>)
     a5a:	4b37      	ldr	r3, [pc, #220]	; (b38 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x1a4>)
     a5c:	4798      	blx	r3
     a5e:	66a0      	str	r0, [r4, #104]	; 0x68
				if (read_result==0)
     a60:	bb48      	cbnz	r0, ab6 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x122>
					memcpy(logger_buffer,(uint8_t*)&memory_flash_address,4);
     a62:	6f23      	ldr	r3, [r4, #112]	; 0x70
     a64:	67a3      	str	r3, [r4, #120]	; 0x78
					ucontroller_timestamp=logger.GetCurrentTimeStamp();
     a66:	4d2c      	ldr	r5, [pc, #176]	; (b18 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x184>)
     a68:	4628      	mov	r0, r5
     a6a:	4b2d      	ldr	r3, [pc, #180]	; (b20 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x18c>)
     a6c:	4798      	blx	r3
     a6e:	6760      	str	r0, [r4, #116]	; 0x74
					memcpy((uint8_t*)&logger_buffer[4],(uint8_t*)&ucontroller_timestamp,4);
     a70:	67e0      	str	r0, [r4, #124]	; 0x7c
					CreateFullBufferMessage(usbMessageBuffer,logger_buffer);
     a72:	6823      	ldr	r3, [r4, #0]
     a74:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     a78:	f104 0278 	add.w	r2, r4, #120	; 0x78
     a7c:	68e1      	ldr	r1, [r4, #12]
     a7e:	4420      	add	r0, r4
     a80:	4b28      	ldr	r3, [pc, #160]	; (b24 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x190>)
     a82:	4798      	blx	r3
					usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     a84:	4f28      	ldr	r7, [pc, #160]	; (b28 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x194>)
     a86:	2240      	movs	r2, #64	; 0x40
     a88:	68e1      	ldr	r1, [r4, #12]
     a8a:	4638      	mov	r0, r7
     a8c:	4e27      	ldr	r6, [pc, #156]	; (b2c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x198>)
     a8e:	47b0      	blx	r6
					delay_ms(100);
     a90:	2064      	movs	r0, #100	; 0x64
     a92:	4b27      	ldr	r3, [pc, #156]	; (b30 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x19c>)
     a94:	4798      	blx	r3
					write_result=usb.write(memory_block,QSPI_ERBLK);
     a96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     a9a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
     a9e:	4638      	mov	r0, r7
     aa0:	47b0      	blx	r6
     aa2:	66e0      	str	r0, [r4, #108]	; 0x6c
					local_last_read_stack=*logger.event_buffer_arrray_stack;
     aa4:	f8d5 35f4 	ldr.w	r3, [r5, #1524]	; 0x5f4
     aa8:	681a      	ldr	r2, [r3, #0]
     aaa:	4b1c      	ldr	r3, [pc, #112]	; (b1c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x188>)
     aac:	601a      	str	r2, [r3, #0]
					result=write_result==0;
     aae:	fab0 f080 	clz	r0, r0
     ab2:	0940      	lsrs	r0, r0, #5
     ab4:	e77f      	b.n	9b6 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x22>
					memory_flash_address=0;
     ab6:	2500      	movs	r5, #0
     ab8:	6725      	str	r5, [r4, #112]	; 0x70
					CreateFullBufferMessage(usbMessageBuffer,(uint8_t*)&add);
     aba:	6823      	ldr	r3, [r4, #0]
     abc:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     ac0:	aa01      	add	r2, sp, #4
     ac2:	68e1      	ldr	r1, [r4, #12]
     ac4:	4420      	add	r0, r4
     ac6:	4b17      	ldr	r3, [pc, #92]	; (b24 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x190>)
     ac8:	4798      	blx	r3
					usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     aca:	2240      	movs	r2, #64	; 0x40
     acc:	68e1      	ldr	r1, [r4, #12]
     ace:	4816      	ldr	r0, [pc, #88]	; (b28 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x194>)
     ad0:	4b16      	ldr	r3, [pc, #88]	; (b2c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x198>)
     ad2:	4798      	blx	r3
					result=false;
     ad4:	4628      	mov	r0, r5
     ad6:	e76e      	b.n	9b6 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x22>
						memset(&logger.event_buffer_arrray[local_last_read_stack],0,logger_data_buffer_temp_size);
     ad8:	4d10      	ldr	r5, [pc, #64]	; (b1c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x188>)
     ada:	f8d7 05f0 	ldr.w	r0, [r7, #1520]	; 0x5f0
     ade:	682b      	ldr	r3, [r5, #0]
     ae0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
     ae4:	2100      	movs	r1, #0
     ae6:	4418      	add	r0, r3
     ae8:	4b14      	ldr	r3, [pc, #80]	; (b3c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x1a8>)
     aea:	4798      	blx	r3
						*logger.event_buffer_arrray_stack=local_last_read_stack;
     aec:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
     af0:	682a      	ldr	r2, [r5, #0]
     af2:	601a      	str	r2, [r3, #0]
						result=true;
     af4:	2001      	movs	r0, #1
     af6:	e75e      	b.n	9b6 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x22>
						memory_flash_address=0;
     af8:	2500      	movs	r5, #0
     afa:	6725      	str	r5, [r4, #112]	; 0x70
						CreateFullBufferMessage(usbMessageBuffer,(uint8_t*)&add);
     afc:	6823      	ldr	r3, [r4, #0]
     afe:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     b02:	aa01      	add	r2, sp, #4
     b04:	4420      	add	r0, r4
     b06:	4b07      	ldr	r3, [pc, #28]	; (b24 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x190>)
     b08:	4798      	blx	r3
						usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     b0a:	2240      	movs	r2, #64	; 0x40
     b0c:	68e1      	ldr	r1, [r4, #12]
     b0e:	4806      	ldr	r0, [pc, #24]	; (b28 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x194>)
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x198>)
     b12:	4798      	blx	r3
						result=false;
     b14:	4628      	mov	r0, r5
     b16:	e74e      	b.n	9b6 <_ZN16Commands_Handler21CommandReadDataLoggerEv+0x22>
     b18:	20003a68 	.word	0x20003a68
     b1c:	20000a64 	.word	0x20000a64
     b20:	00011c89 	.word	0x00011c89
     b24:	000010cd 	.word	0x000010cd
     b28:	200034b0 	.word	0x200034b0
     b2c:	00010e71 	.word	0x00010e71
     b30:	00003681 	.word	0x00003681
     b34:	20006ae8 	.word	0x20006ae8
     b38:	00014429 	.word	0x00014429
     b3c:	0001acc5 	.word	0x0001acc5

00000b40 <_ZN16Commands_Handler23CommandReadHeaterStatusEv>:
bool Commands_Handler::CommandReadHeaterStatus(){
     b40:	b570      	push	{r4, r5, r6, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     b42:	68c3      	ldr	r3, [r0, #12]
     b44:	6819      	ldr	r1, [r3, #0]
     b46:	6041      	str	r1, [r0, #4]
     b48:	8899      	ldrh	r1, [r3, #4]
     b4a:	799b      	ldrb	r3, [r3, #6]
     b4c:	8101      	strh	r1, [r0, #8]
     b4e:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandReadHeaterStatus);
     b50:	7a43      	ldrb	r3, [r0, #9]
     b52:	2b4a      	cmp	r3, #74	; 0x4a
     b54:	bf0c      	ite	eq
     b56:	2501      	moveq	r5, #1
     b58:	2500      	movne	r5, #0
	if (result){
     b5a:	d001      	beq.n	b60 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x20>
}
     b5c:	4628      	mov	r0, r5
     b5e:	bd70      	pop	{r4, r5, r6, pc}
     b60:	4604      	mov	r4, r0
		heaters.ReadAllGPIOs(heater_data_array);
     b62:	f100 0653 	add.w	r6, r0, #83	; 0x53
     b66:	4631      	mov	r1, r6
     b68:	4808      	ldr	r0, [pc, #32]	; (b8c <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x4c>)
     b6a:	4b09      	ldr	r3, [pc, #36]	; (b90 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x50>)
     b6c:	4798      	blx	r3
		CreateFullBufferMessage(usbMessageBuffer,heater_data_array);
     b6e:	6823      	ldr	r3, [r4, #0]
     b70:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     b74:	4632      	mov	r2, r6
     b76:	68e1      	ldr	r1, [r4, #12]
     b78:	4420      	add	r0, r4
     b7a:	4b06      	ldr	r3, [pc, #24]	; (b94 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x54>)
     b7c:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     b7e:	2240      	movs	r2, #64	; 0x40
     b80:	68e1      	ldr	r1, [r4, #12]
     b82:	4805      	ldr	r0, [pc, #20]	; (b98 <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x58>)
     b84:	4b05      	ldr	r3, [pc, #20]	; (b9c <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x5c>)
     b86:	4798      	blx	r3
     b88:	e7e8      	b.n	b5c <_ZN16Commands_Handler23CommandReadHeaterStatusEv+0x1c>
     b8a:	bf00      	nop
     b8c:	20002dec 	.word	0x20002dec
     b90:	0000fbbd 	.word	0x0000fbbd
     b94:	000010cd 	.word	0x000010cd
     b98:	200034b0 	.word	0x200034b0
     b9c:	00010e71 	.word	0x00010e71

00000ba0 <_ZN16Commands_Handler25CommandReadScavengeStatusEv>:
bool Commands_Handler::CommandReadScavengeStatus(void){
     ba0:	b538      	push	{r3, r4, r5, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     ba2:	68c3      	ldr	r3, [r0, #12]
     ba4:	6819      	ldr	r1, [r3, #0]
     ba6:	6041      	str	r1, [r0, #4]
     ba8:	8899      	ldrh	r1, [r3, #4]
     baa:	799b      	ldrb	r3, [r3, #6]
     bac:	8101      	strh	r1, [r0, #8]
     bae:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandReadScavengeStatus);
     bb0:	7a43      	ldrb	r3, [r0, #9]
     bb2:	2b52      	cmp	r3, #82	; 0x52
     bb4:	bf0c      	ite	eq
     bb6:	2501      	moveq	r5, #1
     bb8:	2500      	movne	r5, #0
	if (result){
     bba:	d001      	beq.n	bc0 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x20>
}
     bbc:	4628      	mov	r0, r5
     bbe:	bd38      	pop	{r3, r4, r5, pc}
     bc0:	4604      	mov	r4, r0
		data_byte=scavenge.ReadStatus();
     bc2:	4809      	ldr	r0, [pc, #36]	; (be8 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x48>)
     bc4:	4b09      	ldr	r3, [pc, #36]	; (bec <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x4c>)
     bc6:	4798      	blx	r3
     bc8:	4622      	mov	r2, r4
     bca:	f802 0f62 	strb.w	r0, [r2, #98]!
		CreateFullBufferMessage(usbMessageBuffer,&data_byte);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     bd4:	68e1      	ldr	r1, [r4, #12]
     bd6:	4420      	add	r0, r4
     bd8:	4b05      	ldr	r3, [pc, #20]	; (bf0 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x50>)
     bda:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     bdc:	2240      	movs	r2, #64	; 0x40
     bde:	68e1      	ldr	r1, [r4, #12]
     be0:	4804      	ldr	r0, [pc, #16]	; (bf4 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x54>)
     be2:	4b05      	ldr	r3, [pc, #20]	; (bf8 <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x58>)
     be4:	4798      	blx	r3
     be6:	e7e9      	b.n	bbc <_ZN16Commands_Handler25CommandReadScavengeStatusEv+0x1c>
     be8:	2000ce38 	.word	0x2000ce38
     bec:	00014789 	.word	0x00014789
     bf0:	000010cd 	.word	0x000010cd
     bf4:	200034b0 	.word	0x200034b0
     bf8:	00010e71 	.word	0x00010e71

00000bfc <_ZN16Commands_Handler27CommandReadCompressorStatusEv>:
bool Commands_Handler::CommandReadCompressorStatus(void){
     bfc:	b538      	push	{r3, r4, r5, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     bfe:	68c3      	ldr	r3, [r0, #12]
     c00:	6819      	ldr	r1, [r3, #0]
     c02:	6041      	str	r1, [r0, #4]
     c04:	8899      	ldrh	r1, [r3, #4]
     c06:	799b      	ldrb	r3, [r3, #6]
     c08:	8101      	strh	r1, [r0, #8]
     c0a:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandReadCompressorStatus);
     c0c:	7a43      	ldrb	r3, [r0, #9]
     c0e:	2b54      	cmp	r3, #84	; 0x54
     c10:	bf0c      	ite	eq
     c12:	2501      	moveq	r5, #1
     c14:	2500      	movne	r5, #0
	if (result){
     c16:	d001      	beq.n	c1c <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x20>
}
     c18:	4628      	mov	r0, r5
     c1a:	bd38      	pop	{r3, r4, r5, pc}
     c1c:	4604      	mov	r4, r0
		ccu.GetCompressorStatus(compressor_data_array);
     c1e:	6d81      	ldr	r1, [r0, #88]	; 0x58
     c20:	480b      	ldr	r0, [pc, #44]	; (c50 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x54>)
     c22:	4b0c      	ldr	r3, [pc, #48]	; (c54 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x58>)
     c24:	4798      	blx	r3
		memcpy(&compressor_data_array[16],(void*)&temperatures.values[0][0],4);
     c26:	6da2      	ldr	r2, [r4, #88]	; 0x58
     c28:	4b0b      	ldr	r3, [pc, #44]	; (c58 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x5c>)
     c2a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
     c2c:	6111      	str	r1, [r2, #16]
		memcpy(&compressor_data_array[20],(void*)&temperatures.values[0][1],4);
     c2e:	6da2      	ldr	r2, [r4, #88]	; 0x58
     c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     c32:	6153      	str	r3, [r2, #20]
		CreateFullBufferMessage(usbMessageBuffer,compressor_data_array);
     c34:	6823      	ldr	r3, [r4, #0]
     c36:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     c3a:	6da2      	ldr	r2, [r4, #88]	; 0x58
     c3c:	68e1      	ldr	r1, [r4, #12]
     c3e:	4420      	add	r0, r4
     c40:	4b06      	ldr	r3, [pc, #24]	; (c5c <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x60>)
     c42:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     c44:	2240      	movs	r2, #64	; 0x40
     c46:	68e1      	ldr	r1, [r4, #12]
     c48:	4805      	ldr	r0, [pc, #20]	; (c60 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x64>)
     c4a:	4b06      	ldr	r3, [pc, #24]	; (c64 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x68>)
     c4c:	4798      	blx	r3
     c4e:	e7e3      	b.n	c18 <_ZN16Commands_Handler27CommandReadCompressorStatusEv+0x1c>
     c50:	20002918 	.word	0x20002918
     c54:	0000f13d 	.word	0x0000f13d
     c58:	2000ce4c 	.word	0x2000ce4c
     c5c:	000010cd 	.word	0x000010cd
     c60:	200034b0 	.word	0x200034b0
     c64:	00010e71 	.word	0x00010e71

00000c68 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
			asm("nop");
     c68:	bf00      	nop
     c6a:	e7fd      	b.n	c68 <Dummy_Handler>

00000c6c <Reset_Handler>:
{
     c6c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     c6e:	4b17      	ldr	r3, [pc, #92]	; (ccc <Reset_Handler+0x60>)
     c70:	4a17      	ldr	r2, [pc, #92]	; (cd0 <Reset_Handler+0x64>)
     c72:	429a      	cmp	r2, r3
     c74:	d010      	beq.n	c98 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     c76:	4b17      	ldr	r3, [pc, #92]	; (cd4 <Reset_Handler+0x68>)
     c78:	4a14      	ldr	r2, [pc, #80]	; (ccc <Reset_Handler+0x60>)
     c7a:	429a      	cmp	r2, r3
     c7c:	d20c      	bcs.n	c98 <Reset_Handler+0x2c>
     c7e:	3b01      	subs	r3, #1
     c80:	1a9b      	subs	r3, r3, r2
     c82:	f023 0303 	bic.w	r3, r3, #3
     c86:	3304      	adds	r3, #4
     c88:	4413      	add	r3, r2
     c8a:	4911      	ldr	r1, [pc, #68]	; (cd0 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     c8c:	f851 0b04 	ldr.w	r0, [r1], #4
     c90:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     c94:	429a      	cmp	r2, r3
     c96:	d1f9      	bne.n	c8c <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     c98:	4b0f      	ldr	r3, [pc, #60]	; (cd8 <Reset_Handler+0x6c>)
     c9a:	4a10      	ldr	r2, [pc, #64]	; (cdc <Reset_Handler+0x70>)
     c9c:	429a      	cmp	r2, r3
     c9e:	d20a      	bcs.n	cb6 <Reset_Handler+0x4a>
     ca0:	3b01      	subs	r3, #1
     ca2:	1a9b      	subs	r3, r3, r2
     ca4:	f023 0303 	bic.w	r3, r3, #3
     ca8:	3304      	adds	r3, #4
     caa:	4413      	add	r3, r2
                *pDest++ = 0;
     cac:	2100      	movs	r1, #0
     cae:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     cb2:	4293      	cmp	r3, r2
     cb4:	d1fb      	bne.n	cae <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     cb6:	4a0a      	ldr	r2, [pc, #40]	; (ce0 <Reset_Handler+0x74>)
     cb8:	4b0a      	ldr	r3, [pc, #40]	; (ce4 <Reset_Handler+0x78>)
     cba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     cbe:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     cc0:	4b09      	ldr	r3, [pc, #36]	; (ce8 <Reset_Handler+0x7c>)
     cc2:	4798      	blx	r3
        main();
     cc4:	4b09      	ldr	r3, [pc, #36]	; (cec <Reset_Handler+0x80>)
     cc6:	4798      	blx	r3
     cc8:	e7fe      	b.n	cc8 <Reset_Handler+0x5c>
     cca:	bf00      	nop
     ccc:	20000000 	.word	0x20000000
     cd0:	0001c2c8 	.word	0x0001c2c8
     cd4:	20000a44 	.word	0x20000a44
     cd8:	2000e1e0 	.word	0x2000e1e0
     cdc:	20000a48 	.word	0x20000a48
     ce0:	e000ed00 	.word	0xe000ed00
     ce4:	00000000 	.word	0x00000000
     ce8:	0001ab41 	.word	0x0001ab41
     cec:	00000d25 	.word	0x00000d25

00000cf0 <_ZL15FirmwareIsAlivePK10timer_task>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cf0:	2280      	movs	r2, #128	; 0x80
     cf2:	4b0a      	ldr	r3, [pc, #40]	; (d1c <_ZL15FirmwareIsAlivePK10timer_task+0x2c>)
     cf4:	619a      	str	r2, [r3, #24]

static void FirmwareIsAlive(const struct timer_task *const timer_task)
{
	gpio_set_pin_level(iAlcFwIsAlive,true);
	is_firmware_OK=true;
	if (counter_running==last_count)
     cf6:	4b0a      	ldr	r3, [pc, #40]	; (d20 <_ZL15FirmwareIsAlivePK10timer_task+0x30>)
     cf8:	681a      	ldr	r2, [r3, #0]
     cfa:	685b      	ldr	r3, [r3, #4]
     cfc:	429a      	cmp	r2, r3
     cfe:	d009      	beq.n	d14 <_ZL15FirmwareIsAlivePK10timer_task+0x24>
		is_running=false;
	} 
	else
	{
		is_running=true;
		last_count=counter_running;
     d00:	4b07      	ldr	r3, [pc, #28]	; (d20 <_ZL15FirmwareIsAlivePK10timer_task+0x30>)
     d02:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     d04:	4b05      	ldr	r3, [pc, #20]	; (d1c <_ZL15FirmwareIsAlivePK10timer_task+0x2c>)
     d06:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d0a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     d0e:	2204      	movs	r2, #4
     d10:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
		gpio_toggle_pin_level(LED0);
		gpio_toggle_pin_level(CPU_RUNNING);
		
	}
	
	localtimeout=true;
     d14:	2201      	movs	r2, #1
     d16:	4b02      	ldr	r3, [pc, #8]	; (d20 <_ZL15FirmwareIsAlivePK10timer_task+0x30>)
     d18:	721a      	strb	r2, [r3, #8]
     d1a:	4770      	bx	lr
     d1c:	41008000 	.word	0x41008000
     d20:	20001b98 	.word	0x20001b98

00000d24 <main>:




int main(void)		
{
     d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d28:	2204      	movs	r2, #4
     d2a:	4b71      	ldr	r3, [pc, #452]	; (ef0 <main+0x1cc>)
     d2c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(CPU_RUNNING,false);
	bool gotNewTemperature=false;
	atmel_start_init();
     d30:	4b70      	ldr	r3, [pc, #448]	; (ef4 <main+0x1d0>)
     d32:	4798      	blx	r3
	
	//StartLivePulse();
	delay_ms(200);
     d34:	20c8      	movs	r0, #200	; 0xc8
     d36:	4b70      	ldr	r3, [pc, #448]	; (ef8 <main+0x1d4>)
     d38:	4798      	blx	r3
	logger.Init();
     d3a:	4870      	ldr	r0, [pc, #448]	; (efc <main+0x1d8>)
     d3c:	4b70      	ldr	r3, [pc, #448]	; (f00 <main+0x1dc>)
     d3e:	4798      	blx	r3
	while(!memory.Init()){
     d40:	4e70      	ldr	r6, [pc, #448]	; (f04 <main+0x1e0>)
     d42:	4d71      	ldr	r5, [pc, #452]	; (f08 <main+0x1e4>)
		delay_ms(DELAY_ERROR);
     d44:	4c6c      	ldr	r4, [pc, #432]	; (ef8 <main+0x1d4>)
	while(!memory.Init()){
     d46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     d4a:	4630      	mov	r0, r6
     d4c:	47a8      	blx	r5
     d4e:	b938      	cbnz	r0, d60 <main+0x3c>
		delay_ms(DELAY_ERROR);
     d50:	2064      	movs	r0, #100	; 0x64
     d52:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     d54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d58:	4b65      	ldr	r3, [pc, #404]	; (ef0 <main+0x1cc>)
     d5a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     d5e:	e7f2      	b.n	d46 <main+0x22>
		gpio_toggle_pin_level(LED0);
	}
	if (memory.initiated)
     d60:	4b68      	ldr	r3, [pc, #416]	; (f04 <main+0x1e0>)
     d62:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
     d66:	b133      	cbz	r3, d76 <main+0x52>
	{
		memory.WriteDefaultParameters();
     d68:	4866      	ldr	r0, [pc, #408]	; (f04 <main+0x1e0>)
     d6a:	4b68      	ldr	r3, [pc, #416]	; (f0c <main+0x1e8>)
     d6c:	4798      	blx	r3
		logger.SaveEvent("Info:Memory Started");
     d6e:	4968      	ldr	r1, [pc, #416]	; (f10 <main+0x1ec>)
     d70:	4862      	ldr	r0, [pc, #392]	; (efc <main+0x1d8>)
     d72:	4b68      	ldr	r3, [pc, #416]	; (f14 <main+0x1f0>)
     d74:	4798      	blx	r3
	}
	while(!heaters.Init()){
     d76:	4e68      	ldr	r6, [pc, #416]	; (f18 <main+0x1f4>)
     d78:	4d68      	ldr	r5, [pc, #416]	; (f1c <main+0x1f8>)
		delay_ms(DELAY_ERROR);
     d7a:	4c5f      	ldr	r4, [pc, #380]	; (ef8 <main+0x1d4>)
	while(!heaters.Init()){
     d7c:	4630      	mov	r0, r6
     d7e:	47a8      	blx	r5
     d80:	b938      	cbnz	r0, d92 <main+0x6e>
		delay_ms(DELAY_ERROR);
     d82:	2064      	movs	r0, #100	; 0x64
     d84:	47a0      	blx	r4
     d86:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     d8a:	4b59      	ldr	r3, [pc, #356]	; (ef0 <main+0x1cc>)
     d8c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     d90:	e7f4      	b.n	d7c <main+0x58>
		gpio_toggle_pin_level(LED0);

	}
	
	bool isOK=temperatures.Init();
     d92:	4863      	ldr	r0, [pc, #396]	; (f20 <main+0x1fc>)
     d94:	4b63      	ldr	r3, [pc, #396]	; (f24 <main+0x200>)
     d96:	4798      	blx	r3
	if (isOK)
     d98:	b110      	cbz	r0, da0 <main+0x7c>
	{
		temperatures.StartOneConversion();
     d9a:	4861      	ldr	r0, [pc, #388]	; (f20 <main+0x1fc>)
     d9c:	4b62      	ldr	r3, [pc, #392]	; (f28 <main+0x204>)
     d9e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     da0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     da4:	4b52      	ldr	r3, [pc, #328]	; (ef0 <main+0x1cc>)
     da6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
 	gpio_set_pin_level(LED0,true);
	while (!flapper.Init())
     daa:	4e60      	ldr	r6, [pc, #384]	; (f2c <main+0x208>)
     dac:	4d60      	ldr	r5, [pc, #384]	; (f30 <main+0x20c>)
	{
		delay_ms(DELAY_ERROR);
     dae:	4c52      	ldr	r4, [pc, #328]	; (ef8 <main+0x1d4>)
	while (!flapper.Init())
     db0:	4630      	mov	r0, r6
     db2:	47a8      	blx	r5
     db4:	b938      	cbnz	r0, dc6 <main+0xa2>
		delay_ms(DELAY_ERROR);
     db6:	2064      	movs	r0, #100	; 0x64
     db8:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     dba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     dbe:	4b4c      	ldr	r3, [pc, #304]	; (ef0 <main+0x1cc>)
     dc0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     dc4:	e7f4      	b.n	db0 <main+0x8c>
		gpio_toggle_pin_level(LED0);
	}
	while(!fans.Init()){
     dc6:	4e5b      	ldr	r6, [pc, #364]	; (f34 <main+0x210>)
     dc8:	4d5b      	ldr	r5, [pc, #364]	; (f38 <main+0x214>)
		delay_ms(DELAY_ERROR);
     dca:	4c4b      	ldr	r4, [pc, #300]	; (ef8 <main+0x1d4>)
	while(!fans.Init()){
     dcc:	4630      	mov	r0, r6
     dce:	47a8      	blx	r5
     dd0:	b938      	cbnz	r0, de2 <main+0xbe>
		delay_ms(DELAY_ERROR);
     dd2:	2064      	movs	r0, #100	; 0x64
     dd4:	47a0      	blx	r4
     dd6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     dda:	4b45      	ldr	r3, [pc, #276]	; (ef0 <main+0x1cc>)
     ddc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     de0:	e7f4      	b.n	dcc <main+0xa8>
		gpio_toggle_pin_level(LED0);
		
	}
	fans.condesator->SetEnable(false);
     de2:	4c54      	ldr	r4, [pc, #336]	; (f34 <main+0x210>)
     de4:	2100      	movs	r1, #0
     de6:	6e60      	ldr	r0, [r4, #100]	; 0x64
     de8:	4b54      	ldr	r3, [pc, #336]	; (f3c <main+0x218>)
     dea:	4798      	blx	r3
	fans.evaporator[0]->SetEnable(false);
     dec:	2100      	movs	r1, #0
     dee:	6de0      	ldr	r0, [r4, #92]	; 0x5c
     df0:	4d53      	ldr	r5, [pc, #332]	; (f40 <main+0x21c>)
     df2:	47a8      	blx	r5
	fans.evaporator[1]->SetEnable(false);
     df4:	2100      	movs	r1, #0
     df6:	6e20      	ldr	r0, [r4, #96]	; 0x60
     df8:	47a8      	blx	r5
// 	

	while(!scavenge.Init()){
     dfa:	4e52      	ldr	r6, [pc, #328]	; (f44 <main+0x220>)
     dfc:	4d52      	ldr	r5, [pc, #328]	; (f48 <main+0x224>)
		delay_ms(DELAY_ERROR);
     dfe:	4c3e      	ldr	r4, [pc, #248]	; (ef8 <main+0x1d4>)
	while(!scavenge.Init()){
     e00:	4630      	mov	r0, r6
     e02:	47a8      	blx	r5
     e04:	b938      	cbnz	r0, e16 <main+0xf2>
		delay_ms(DELAY_ERROR);
     e06:	2064      	movs	r0, #100	; 0x64
     e08:	47a0      	blx	r4
     e0a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     e0e:	4b38      	ldr	r3, [pc, #224]	; (ef0 <main+0x1cc>)
     e10:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     e14:	e7f4      	b.n	e00 <main+0xdc>

		gpio_toggle_pin_level(LED0);

	}
	scavenge.SetEnable(false);
     e16:	2100      	movs	r1, #0
     e18:	484a      	ldr	r0, [pc, #296]	; (f44 <main+0x220>)
     e1a:	4b4c      	ldr	r3, [pc, #304]	; (f4c <main+0x228>)
     e1c:	4798      	blx	r3
	while(!ccu.Init()){
     e1e:	4e4c      	ldr	r6, [pc, #304]	; (f50 <main+0x22c>)
     e20:	4d4c      	ldr	r5, [pc, #304]	; (f54 <main+0x230>)
		delay_ms(DELAY_ERROR);
     e22:	4c35      	ldr	r4, [pc, #212]	; (ef8 <main+0x1d4>)
	while(!ccu.Init()){
     e24:	4630      	mov	r0, r6
     e26:	47a8      	blx	r5
     e28:	b938      	cbnz	r0, e3a <main+0x116>
		delay_ms(DELAY_ERROR);
     e2a:	2064      	movs	r0, #100	; 0x64
     e2c:	47a0      	blx	r4
     e2e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     e32:	4b2f      	ldr	r3, [pc, #188]	; (ef0 <main+0x1cc>)
     e34:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     e38:	e7f4      	b.n	e24 <main+0x100>
		gpio_toggle_pin_level(LED0);
	}
	ccu.SetEnable(false);
     e3a:	2100      	movs	r1, #0
     e3c:	4846      	ldr	r0, [pc, #280]	; (f58 <main+0x234>)
     e3e:	4b47      	ldr	r3, [pc, #284]	; (f5c <main+0x238>)
     e40:	4798      	blx	r3
	
	
	
	usb.Init();
     e42:	4847      	ldr	r0, [pc, #284]	; (f60 <main+0x23c>)
     e44:	4b47      	ldr	r3, [pc, #284]	; (f64 <main+0x240>)
     e46:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     e4c:	4b28      	ldr	r3, [pc, #160]	; (ef0 <main+0x1cc>)
     e4e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	
	



	hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareIsAlive),1000);
     e52:	4c45      	ldr	r4, [pc, #276]	; (f68 <main+0x244>)
     e54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     e58:	4944      	ldr	r1, [pc, #272]	; (f6c <main+0x248>)
     e5a:	f104 000c 	add.w	r0, r4, #12
     e5e:	4b44      	ldr	r3, [pc, #272]	; (f70 <main+0x24c>)
     e60:	4798      	blx	r3
	uint8_t localPosition;
 	//flapper.valve1->StartControlling(220);

 	//flapper.valve2->StartControlling(220);
	
	userApp.Init();
     e62:	f104 002c 	add.w	r0, r4, #44	; 0x2c
     e66:	4b43      	ldr	r3, [pc, #268]	; (f74 <main+0x250>)
     e68:	4798      	blx	r3

	
	


	logger.SaveInstationLog();
     e6a:	4824      	ldr	r0, [pc, #144]	; (efc <main+0x1d8>)
     e6c:	4b42      	ldr	r3, [pc, #264]	; (f78 <main+0x254>)
     e6e:	4798      	blx	r3

	while (1)
	{
		
		if (userApp.IsAppConnected())
     e70:	4625      	mov	r5, r4
     e72:	f8df 8120 	ldr.w	r8, [pc, #288]	; f94 <main+0x270>
		{
			userApp.handleCommunication();			
     e76:	f8df 9120 	ldr.w	r9, [pc, #288]	; f98 <main+0x274>
		}
	//	delay_ms(10);
		
	//	while ((!flapper.valve1->gotSetpoint)|((!flapper.valve2->gotSetpoint)&false))
	//	{
			flapper.valve1->Control_NBC_StandAlone_Reset();
     e7a:	4e2c      	ldr	r6, [pc, #176]	; (f2c <main+0x208>)
     e7c:	e035      	b.n	eea <main+0x1c6>
			userApp.handleCommunication();			
     e7e:	4638      	mov	r0, r7
     e80:	47c8      	blx	r9
     e82:	e00e      	b.n	ea2 <main+0x17e>
						gotNewTemperature=true;
					
					}
				
				}
				temperatures.StartOneConversion();
     e84:	4826      	ldr	r0, [pc, #152]	; (f20 <main+0x1fc>)
     e86:	4b28      	ldr	r3, [pc, #160]	; (f28 <main+0x204>)
     e88:	4798      	blx	r3
				asm("nop");
     e8a:	bf00      	nop
			}
		}
		
		
		ccu.Periodic_Task();
     e8c:	4830      	ldr	r0, [pc, #192]	; (f50 <main+0x22c>)
     e8e:	4b3b      	ldr	r3, [pc, #236]	; (f7c <main+0x258>)
     e90:	4798      	blx	r3
		counter_running++;
     e92:	682b      	ldr	r3, [r5, #0]
     e94:	3301      	adds	r3, #1
     e96:	602b      	str	r3, [r5, #0]
		if (counter_running==0)
     e98:	b30b      	cbz	r3, ede <main+0x1ba>
		if (userApp.IsAppConnected())
     e9a:	4638      	mov	r0, r7
     e9c:	47c0      	blx	r8
     e9e:	2800      	cmp	r0, #0
     ea0:	d1ed      	bne.n	e7e <main+0x15a>
			flapper.valve1->Control_NBC_StandAlone_Reset();
     ea2:	f8d6 00dc 	ldr.w	r0, [r6, #220]	; 0xdc
     ea6:	4c36      	ldr	r4, [pc, #216]	; (f80 <main+0x25c>)
     ea8:	47a0      	blx	r4
			flapper.valve2->Control_NBC_StandAlone_Reset();
     eaa:	f8d6 00e0 	ldr.w	r0, [r6, #224]	; 0xe0
     eae:	47a0      	blx	r4
		if (temperatures.isOK)
     eb0:	4b1b      	ldr	r3, [pc, #108]	; (f20 <main+0x1fc>)
     eb2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
     eb6:	2b00      	cmp	r3, #0
     eb8:	d0e8      	beq.n	e8c <main+0x168>
			if (temperatures.IsConversionFinished())
     eba:	4819      	ldr	r0, [pc, #100]	; (f20 <main+0x1fc>)
     ebc:	4b31      	ldr	r3, [pc, #196]	; (f84 <main+0x260>)
     ebe:	4798      	blx	r3
     ec0:	2800      	cmp	r0, #0
     ec2:	d0e3      	beq.n	e8c <main+0x168>
				temperatures.GetConversionResult();
     ec4:	4c16      	ldr	r4, [pc, #88]	; (f20 <main+0x1fc>)
     ec6:	4620      	mov	r0, r4
     ec8:	4b2f      	ldr	r3, [pc, #188]	; (f88 <main+0x264>)
     eca:	4798      	blx	r3
				if (temperatures.faultData==VALID_TEMPERATURE)
     ecc:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
     ed0:	2b01      	cmp	r3, #1
     ed2:	d1d7      	bne.n	e84 <main+0x160>
					currentTemperature=temperatures.lastValue;
     ed4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
     ed8:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
     edc:	e7d2      	b.n	e84 <main+0x160>
		{
			logger.SaveEventIndexResult("Running  like crazy!!!: ",(uint8_t)counter_running,true);
     ede:	2301      	movs	r3, #1
     ee0:	2200      	movs	r2, #0
     ee2:	492a      	ldr	r1, [pc, #168]	; (f8c <main+0x268>)
     ee4:	4805      	ldr	r0, [pc, #20]	; (efc <main+0x1d8>)
     ee6:	4c2a      	ldr	r4, [pc, #168]	; (f90 <main+0x26c>)
     ee8:	47a0      	blx	r4
		if (userApp.IsAppConnected())
     eea:	f105 072c 	add.w	r7, r5, #44	; 0x2c
     eee:	e7d4      	b.n	e9a <main+0x176>
     ef0:	41008000 	.word	0x41008000
     ef4:	00001805 	.word	0x00001805
     ef8:	00003681 	.word	0x00003681
     efc:	20003a68 	.word	0x20003a68
     f00:	00011a51 	.word	0x00011a51
     f04:	20006ae8 	.word	0x20006ae8
     f08:	0001456d 	.word	0x0001456d
     f0c:	000144b5 	.word	0x000144b5
     f10:	0001b0bc 	.word	0x0001b0bc
     f14:	00011de9 	.word	0x00011de9
     f18:	20002dec 	.word	0x20002dec
     f1c:	0000fb29 	.word	0x0000fb29
     f20:	2000ce4c 	.word	0x2000ce4c
     f24:	000149d1 	.word	0x000149d1
     f28:	00014a85 	.word	0x00014a85
     f2c:	2000535c 	.word	0x2000535c
     f30:	000120dd 	.word	0x000120dd
     f34:	200037a8 	.word	0x200037a8
     f38:	00011675 	.word	0x00011675
     f3c:	000114b1 	.word	0x000114b1
     f40:	0001186d 	.word	0x0001186d
     f44:	2000ce38 	.word	0x2000ce38
     f48:	000147e5 	.word	0x000147e5
     f4c:	000147ad 	.word	0x000147ad
     f50:	20002918 	.word	0x20002918
     f54:	0000f071 	.word	0x0000f071
     f58:	20002ac8 	.word	0x20002ac8
     f5c:	0000f49d 	.word	0x0000f49d
     f60:	200034b0 	.word	0x200034b0
     f64:	00010ba1 	.word	0x00010ba1
     f68:	20001b98 	.word	0x20001b98
     f6c:	00000cf1 	.word	0x00000cf1
     f70:	0001061d 	.word	0x0001061d
     f74:	0000129d 	.word	0x0000129d
     f78:	00011ba9 	.word	0x00011ba9
     f7c:	0000f759 	.word	0x0000f759
     f80:	0001283d 	.word	0x0001283d
     f84:	00014b61 	.word	0x00014b61
     f88:	00014acd 	.word	0x00014acd
     f8c:	0001b0d0 	.word	0x0001b0d0
     f90:	00011dd9 	.word	0x00011dd9
     f94:	0000177d 	.word	0x0000177d
     f98:	0000169d 	.word	0x0000169d

00000f9c <_GLOBAL__sub_I_localtimeout>:
// 		delay_ms(500	
//		}
	}

	
}
     f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     fa0:	4c30      	ldr	r4, [pc, #192]	; (1064 <_GLOBAL__sub_I_localtimeout+0xc8>)
     fa2:	f504 7501 	add.w	r5, r4, #516	; 0x204
     fa6:	4930      	ldr	r1, [pc, #192]	; (1068 <_GLOBAL__sub_I_localtimeout+0xcc>)
     fa8:	4628      	mov	r0, r5
     faa:	4f30      	ldr	r7, [pc, #192]	; (106c <_GLOBAL__sub_I_localtimeout+0xd0>)
     fac:	47b8      	blx	r7
     fae:	4e30      	ldr	r6, [pc, #192]	; (1070 <_GLOBAL__sub_I_localtimeout+0xd4>)
     fb0:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 10a8 <_GLOBAL__sub_I_localtimeout+0x10c>
     fb4:	4632      	mov	r2, r6
     fb6:	4641      	mov	r1, r8
     fb8:	4628      	mov	r0, r5
     fba:	4d2e      	ldr	r5, [pc, #184]	; (1074 <_GLOBAL__sub_I_localtimeout+0xd8>)
     fbc:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     fbe:	f504 7909 	add.w	r9, r4, #548	; 0x224
     fc2:	492d      	ldr	r1, [pc, #180]	; (1078 <_GLOBAL__sub_I_localtimeout+0xdc>)
     fc4:	4648      	mov	r0, r9
     fc6:	47b8      	blx	r7
     fc8:	4632      	mov	r2, r6
     fca:	4641      	mov	r1, r8
     fcc:	4648      	mov	r0, r9
     fce:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     fd0:	f104 090c 	add.w	r9, r4, #12
     fd4:	4929      	ldr	r1, [pc, #164]	; (107c <_GLOBAL__sub_I_localtimeout+0xe0>)
     fd6:	4648      	mov	r0, r9
     fd8:	47b8      	blx	r7
     fda:	4632      	mov	r2, r6
     fdc:	4641      	mov	r1, r8
     fde:	4648      	mov	r0, r9
     fe0:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     fe2:	f504 7911 	add.w	r9, r4, #580	; 0x244
     fe6:	4926      	ldr	r1, [pc, #152]	; (1080 <_GLOBAL__sub_I_localtimeout+0xe4>)
     fe8:	4648      	mov	r0, r9
     fea:	47b8      	blx	r7
     fec:	4632      	mov	r2, r6
     fee:	4641      	mov	r1, r8
     ff0:	4648      	mov	r0, r9
     ff2:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     ff4:	f504 7919 	add.w	r9, r4, #612	; 0x264
     ff8:	4922      	ldr	r1, [pc, #136]	; (1084 <_GLOBAL__sub_I_localtimeout+0xe8>)
     ffa:	4648      	mov	r0, r9
     ffc:	47b8      	blx	r7
     ffe:	4632      	mov	r2, r6
    1000:	4641      	mov	r1, r8
    1002:	4648      	mov	r0, r9
    1004:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
    1006:	f504 7921 	add.w	r9, r4, #644	; 0x284
    100a:	491f      	ldr	r1, [pc, #124]	; (1088 <_GLOBAL__sub_I_localtimeout+0xec>)
    100c:	4648      	mov	r0, r9
    100e:	47b8      	blx	r7
    1010:	4632      	mov	r2, r6
    1012:	4641      	mov	r1, r8
    1014:	4648      	mov	r0, r9
    1016:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    1018:	f504 7929 	add.w	r9, r4, #676	; 0x2a4
    101c:	491b      	ldr	r1, [pc, #108]	; (108c <_GLOBAL__sub_I_localtimeout+0xf0>)
    101e:	4648      	mov	r0, r9
    1020:	47b8      	blx	r7
    1022:	4632      	mov	r2, r6
    1024:	4641      	mov	r1, r8
    1026:	4648      	mov	r0, r9
    1028:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
    102a:	f504 7931 	add.w	r9, r4, #708	; 0x2c4
    102e:	4918      	ldr	r1, [pc, #96]	; (1090 <_GLOBAL__sub_I_localtimeout+0xf4>)
    1030:	4648      	mov	r0, r9
    1032:	47b8      	blx	r7
    1034:	4632      	mov	r2, r6
    1036:	4641      	mov	r1, r8
    1038:	4648      	mov	r0, r9
    103a:	47a8      	blx	r5
    103c:	f504 7739 	add.w	r7, r4, #740	; 0x2e4
    1040:	4914      	ldr	r1, [pc, #80]	; (1094 <_GLOBAL__sub_I_localtimeout+0xf8>)
    1042:	4638      	mov	r0, r7
    1044:	4b14      	ldr	r3, [pc, #80]	; (1098 <_GLOBAL__sub_I_localtimeout+0xfc>)
    1046:	4798      	blx	r3
    1048:	4632      	mov	r2, r6
    104a:	4914      	ldr	r1, [pc, #80]	; (109c <_GLOBAL__sub_I_localtimeout+0x100>)
    104c:	4638      	mov	r0, r7
    104e:	47a8      	blx	r5
static Maintenance_Tool	userApp;
    1050:	342c      	adds	r4, #44	; 0x2c
    1052:	4620      	mov	r0, r4
    1054:	4b12      	ldr	r3, [pc, #72]	; (10a0 <_GLOBAL__sub_I_localtimeout+0x104>)
    1056:	4798      	blx	r3
    1058:	4632      	mov	r2, r6
    105a:	4912      	ldr	r1, [pc, #72]	; (10a4 <_GLOBAL__sub_I_localtimeout+0x108>)
    105c:	4620      	mov	r0, r4
    105e:	47a8      	blx	r5
    1060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1064:	20001b98 	.word	0x20001b98
    1068:	2000df28 	.word	0x2000df28
    106c:	00010441 	.word	0x00010441
    1070:	20000000 	.word	0x20000000
    1074:	0001a611 	.word	0x0001a611
    1078:	2000dfbc 	.word	0x2000dfbc
    107c:	2000e0e0 	.word	0x2000e0e0
    1080:	2000dfdc 	.word	0x2000dfdc
    1084:	2000e0a0 	.word	0x2000e0a0
    1088:	2000e0c0 	.word	0x2000e0c0
    108c:	2000df98 	.word	0x2000df98
    1090:	2000e038 	.word	0x2000e038
    1094:	2000e058 	.word	0x2000e058
    1098:	0000fc6d 	.word	0x0000fc6d
    109c:	0000fc89 	.word	0x0000fc89
    10a0:	00001175 	.word	0x00001175
    10a4:	00001129 	.word	0x00001129
    10a8:	00010479 	.word	0x00010479

000010ac <_ZN22MaintenanceDataHandlerC1Ev>:
    10ac:	2264      	movs	r2, #100	; 0x64
    10ae:	7002      	strb	r2, [r0, #0]
    10b0:	2263      	movs	r2, #99	; 0x63
    10b2:	7042      	strb	r2, [r0, #1]
    10b4:	2262      	movs	r2, #98	; 0x62
    10b6:	7082      	strb	r2, [r0, #2]
    10b8:	2261      	movs	r2, #97	; 0x61
    10ba:	70c2      	strb	r2, [r0, #3]
    10bc:	2200      	movs	r2, #0
    10be:	7142      	strb	r2, [r0, #5]
#include "string.h"

// default constructor
MaintenanceDataHandler::MaintenanceDataHandler()
{
	sizeFullBufferMessage=FULL_MESSAGE_SIZE;
    10c0:	223a      	movs	r2, #58	; 0x3a
    10c2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} //MaintenanceDataHandler
    10c6:	4770      	bx	lr

000010c8 <_ZN22MaintenanceDataHandlerD1Ev>:

// default destructor
MaintenanceDataHandler::~MaintenanceDataHandler()
{
} //~MaintenanceDataHandler
    10c8:	4770      	bx	lr
	...

000010cc <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_>:

uint8_t MaintenanceDataHandler::CreateFullBufferMessage(uint8_t *localBuff,  uint8_t *data){
    10cc:	b570      	push	{r4, r5, r6, lr}
    10ce:	4605      	mov	r5, r0
    10d0:	460c      	mov	r4, r1
    10d2:	4611      	mov	r1, r2
	
	memcpy((void*)fullBufferMessage.content,(void*)data,sizeFullBufferMessage);
    10d4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    10d8:	3006      	adds	r0, #6
    10da:	4b09      	ldr	r3, [pc, #36]	; (1100 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x34>)
    10dc:	4798      	blx	r3
	memcpy((void*)localBuff,(void *)&fullBufferMessage,MAINTENANCE_TOOL_BUFFER_SIZE);
    10de:	462b      	mov	r3, r5
    10e0:	4621      	mov	r1, r4
    10e2:	3540      	adds	r5, #64	; 0x40
    10e4:	681e      	ldr	r6, [r3, #0]
    10e6:	685c      	ldr	r4, [r3, #4]
    10e8:	6898      	ldr	r0, [r3, #8]
    10ea:	68da      	ldr	r2, [r3, #12]
    10ec:	600e      	str	r6, [r1, #0]
    10ee:	604c      	str	r4, [r1, #4]
    10f0:	6088      	str	r0, [r1, #8]
    10f2:	60ca      	str	r2, [r1, #12]
    10f4:	3310      	adds	r3, #16
    10f6:	3110      	adds	r1, #16
    10f8:	42ab      	cmp	r3, r5
    10fa:	d1f3      	bne.n	10e4 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x18>
	return 0;
}
    10fc:	2000      	movs	r0, #0
    10fe:	bd70      	pop	{r4, r5, r6, pc}
    1100:	0001ab91 	.word	0x0001ab91

00001104 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
    1104:	4b03      	ldr	r3, [pc, #12]	; (1114 <_ZL21MaintenaceToolTimmingPK10timer_task+0x10>)
    1106:	681a      	ldr	r2, [r3, #0]
    1108:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
    110c:	3301      	adds	r3, #1
    110e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    1112:	4770      	bx	lr
    1114:	20001e98 	.word	0x20001e98

00001118 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
    1118:	4b02      	ldr	r3, [pc, #8]	; (1124 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
    111a:	681b      	ldr	r3, [r3, #0]
    111c:	2200      	movs	r2, #0
    111e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    1122:	4770      	bx	lr
    1124:	20001e98 	.word	0x20001e98

00001128 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	localBuffer=staticBuffer;
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
    1128:	b538      	push	{r3, r4, r5, lr}
    112a:	4604      	mov	r4, r0
    112c:	4b0a      	ldr	r3, [pc, #40]	; (1158 <_ZN16Maintenance_ToolD1Ev+0x30>)
    112e:	6003      	str	r3, [r0, #0]
{
	ticks=0;
    1130:	2300      	movs	r3, #0
    1132:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
	interfaceTimer.Stop();
    1136:	4d09      	ldr	r5, [pc, #36]	; (115c <_ZN16Maintenance_ToolD1Ev+0x34>)
    1138:	4628      	mov	r0, r5
    113a:	4b09      	ldr	r3, [pc, #36]	; (1160 <_ZN16Maintenance_ToolD1Ev+0x38>)
    113c:	4798      	blx	r3
	interfaceTimer.Remove_task();
    113e:	4628      	mov	r0, r5
    1140:	4b08      	ldr	r3, [pc, #32]	; (1164 <_ZN16Maintenance_ToolD1Ev+0x3c>)
    1142:	4798      	blx	r3
Maintenance_Tool::~Maintenance_Tool()
    1144:	4908      	ldr	r1, [pc, #32]	; (1168 <_ZN16Maintenance_ToolD1Ev+0x40>)
    1146:	4620      	mov	r0, r4
    1148:	4b08      	ldr	r3, [pc, #32]	; (116c <_ZN16Maintenance_ToolD1Ev+0x44>)
    114a:	4798      	blx	r3
    114c:	f504 70c8 	add.w	r0, r4, #400	; 0x190
    1150:	4b07      	ldr	r3, [pc, #28]	; (1170 <_ZN16Maintenance_ToolD1Ev+0x48>)
    1152:	4798      	blx	r3
	
} //~Maintenance_Tool
    1154:	4620      	mov	r0, r4
    1156:	bd38      	pop	{r3, r4, r5, pc}
    1158:	0001b10c 	.word	0x0001b10c
    115c:	20001e9c 	.word	0x20001e9c
    1160:	000105a1 	.word	0x000105a1
    1164:	00010691 	.word	0x00010691
    1168:	0001b0fc 	.word	0x0001b0fc
    116c:	00000319 	.word	0x00000319
    1170:	000010c9 	.word	0x000010c9

00001174 <_ZN16Maintenance_ToolC1Ev>:
Maintenance_Tool::Maintenance_Tool()
    1174:	b538      	push	{r3, r4, r5, lr}
    1176:	4604      	mov	r4, r0
    1178:	f500 70c8 	add.w	r0, r0, #400	; 0x190
    117c:	4b17      	ldr	r3, [pc, #92]	; (11dc <_ZN16Maintenance_ToolC1Ev+0x68>)
    117e:	4798      	blx	r3
    1180:	4917      	ldr	r1, [pc, #92]	; (11e0 <_ZN16Maintenance_ToolC1Ev+0x6c>)
    1182:	4620      	mov	r0, r4
    1184:	4b17      	ldr	r3, [pc, #92]	; (11e4 <_ZN16Maintenance_ToolC1Ev+0x70>)
    1186:	4798      	blx	r3
    1188:	4b17      	ldr	r3, [pc, #92]	; (11e8 <_ZN16Maintenance_ToolC1Ev+0x74>)
    118a:	6023      	str	r3, [r4, #0]
    118c:	2300      	movs	r3, #0
    118e:	2564      	movs	r5, #100	; 0x64
    1190:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
    1194:	2063      	movs	r0, #99	; 0x63
    1196:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
    119a:	2162      	movs	r1, #98	; 0x62
    119c:	f884 10f6 	strb.w	r1, [r4, #246]	; 0xf6
    11a0:	2261      	movs	r2, #97	; 0x61
    11a2:	f884 20f7 	strb.w	r2, [r4, #247]	; 0xf7
    11a6:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
    11aa:	f884 5182 	strb.w	r5, [r4, #386]	; 0x182
    11ae:	f884 0183 	strb.w	r0, [r4, #387]	; 0x183
    11b2:	f884 1184 	strb.w	r1, [r4, #388]	; 0x184
    11b6:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
    11ba:	f884 3187 	strb.w	r3, [r4, #391]	; 0x187
	ptrMaintenanceTool=this;
    11be:	4a0b      	ldr	r2, [pc, #44]	; (11ec <_ZN16Maintenance_ToolC1Ev+0x78>)
    11c0:	f842 4b24 	str.w	r4, [r2], #36
	maintenanceIsConnected = false;
    11c4:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	nextMaintenanceSyncTime = 0;
    11c8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	nextMaintenanceUsageTimerSyncTime = 0;
    11cc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	ticks=0;
    11d0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	localBuffer=staticBuffer;
    11d4:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
} //Maintenance_Tool
    11d8:	4620      	mov	r0, r4
    11da:	bd38      	pop	{r3, r4, r5, pc}
    11dc:	000010ad 	.word	0x000010ad
    11e0:	0001b0fc 	.word	0x0001b0fc
    11e4:	000002d1 	.word	0x000002d1
    11e8:	0001b10c 	.word	0x0001b10c
    11ec:	20001e98 	.word	0x20001e98

000011f0 <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
    11f0:	b410      	push	{r4}
    11f2:	4604      	mov	r4, r0
    11f4:	2300      	movs	r3, #0
	uint8_t i;
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
    11f6:	4619      	mov	r1, r3
    11f8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    11fc:	54d1      	strb	r1, [r2, r3]
    11fe:	1c58      	adds	r0, r3, #1
    1200:	b2c0      	uxtb	r0, r0
    1202:	3301      	adds	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
    1204:	2b40      	cmp	r3, #64	; 0x40
    1206:	d1f7      	bne.n	11f8 <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
	}
	return	i;
}
    1208:	bc10      	pop	{r4}
    120a:	4770      	bx	lr

0000120c <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
    120c:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
    1210:	b933      	cbnz	r3, 1220 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x14>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
    1212:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		maintenanceIsConnected = true;
    1216:	2301      	movs	r3, #1
    1218:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
		bSendNotifications = true;
    121c:	f880 30b1 	strb.w	r3, [r0, #177]	; 0xb1
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
    1220:	f890 0158 	ldrb.w	r0, [r0, #344]	; 0x158
    1224:	4770      	bx	lr

00001226 <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
    1226:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
    1228:	0855      	lsrs	r5, r2, #1
    122a:	d007      	beq.n	123c <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
    122c:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
    122e:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
    1232:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
    1234:	3401      	adds	r4, #1
    1236:	b2a4      	uxth	r4, r4
    1238:	42ac      	cmp	r4, r5
    123a:	dbf8      	blt.n	122e <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
    123c:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
    1240:	bf1d      	ittte	ne
    1242:	189b      	addne	r3, r3, r2
    1244:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
    1248:	4048      	eorne	r0, r1
    124a:	4608      	moveq	r0, r1

	return checksum;
	}
    124c:	bc30      	pop	{r4, r5}
    124e:	4770      	bx	lr

00001250 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
    1250:	b538      	push	{r3, r4, r5, lr}
    1252:	4604      	mov	r4, r0
	checksum=0;
    1254:	2500      	movs	r5, #0
    1256:	f8a0 515e 	strh.w	r5, [r0, #350]	; 0x15e
	checksum = calculateChecksum(0, sizeof(header), &header);
    125a:	460b      	mov	r3, r1
    125c:	2206      	movs	r2, #6
    125e:	4629      	mov	r1, r5
    1260:	4d02      	ldr	r5, [pc, #8]	; (126c <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
    1262:	47a8      	blx	r5
    1264:	f8a4 015e 	strh.w	r0, [r4, #350]	; 0x15e
	}
    1268:	bd38      	pop	{r3, r4, r5, pc}
    126a:	bf00      	nop
    126c:	00001227 	.word	0x00001227

00001270 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
{
	uint8_t i;
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
    1270:	4b06      	ldr	r3, [pc, #24]	; (128c <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x1c>)
    1272:	681b      	ldr	r3, [r3, #0]
    1274:	600b      	str	r3, [r1, #0]
    1276:	4b06      	ldr	r3, [pc, #24]	; (1290 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x20>)
    1278:	681b      	ldr	r3, [r3, #0]
    127a:	604b      	str	r3, [r1, #4]
    127c:	4b05      	ldr	r3, [pc, #20]	; (1294 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x24>)
    127e:	681b      	ldr	r3, [r3, #0]
    1280:	608b      	str	r3, [r1, #8]
    1282:	4b05      	ldr	r3, [pc, #20]	; (1298 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
    1284:	681b      	ldr	r3, [r3, #0]
    1286:	60cb      	str	r3, [r1, #12]
    1288:	4770      	bx	lr
    128a:	bf00      	nop
    128c:	41002018 	.word	0x41002018
    1290:	4100201c 	.word	0x4100201c
    1294:	41002020 	.word	0x41002020
    1298:	41002024 	.word	0x41002024

0000129c <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
    129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    129e:	4604      	mov	r4, r0
	ticks=0;
    12a0:	2600      	movs	r6, #0
    12a2:	f8c0 609c 	str.w	r6, [r0, #156]	; 0x9c
	interfaceTimer.Init();
    12a6:	4d14      	ldr	r5, [pc, #80]	; (12f8 <_ZN16Maintenance_Tool4InitEv+0x5c>)
    12a8:	4628      	mov	r0, r5
    12aa:	4b14      	ldr	r3, [pc, #80]	; (12fc <_ZN16Maintenance_Tool4InitEv+0x60>)
    12ac:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
    12ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    12b2:	4913      	ldr	r1, [pc, #76]	; (1300 <_ZN16Maintenance_Tool4InitEv+0x64>)
    12b4:	4628      	mov	r0, r5
    12b6:	4b13      	ldr	r3, [pc, #76]	; (1304 <_ZN16Maintenance_Tool4InitEv+0x68>)
    12b8:	4798      	blx	r3
	InitCommandHandler(localBuffer);
    12ba:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    12be:	4620      	mov	r0, r4
    12c0:	4b11      	ldr	r3, [pc, #68]	; (1308 <_ZN16Maintenance_Tool4InitEv+0x6c>)
    12c2:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
    12c4:	f204 1565 	addw	r5, r4, #357	; 0x165
    12c8:	4629      	mov	r1, r5
    12ca:	4620      	mov	r0, r4
    12cc:	4b0f      	ldr	r3, [pc, #60]	; (130c <_ZN16Maintenance_Tool4InitEv+0x70>)
    12ce:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
    12d0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    12d4:	f8d4 7165 	ldr.w	r7, [r4, #357]	; 0x165
    12d8:	f8d4 0169 	ldr.w	r0, [r4, #361]	; 0x169
    12dc:	f8d4 116d 	ldr.w	r1, [r4, #365]	; 0x16d
    12e0:	f8d4 2171 	ldr.w	r2, [r4, #369]	; 0x171
    12e4:	601f      	str	r7, [r3, #0]
    12e6:	6058      	str	r0, [r3, #4]
    12e8:	6099      	str	r1, [r3, #8]
    12ea:	60da      	str	r2, [r3, #12]
	gotAccess=false;
    12ec:	f884 6159 	strb.w	r6, [r4, #345]	; 0x159
}
    12f0:	f894 0158 	ldrb.w	r0, [r4, #344]	; 0x158
    12f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12f6:	bf00      	nop
    12f8:	20001e9c 	.word	0x20001e9c
    12fc:	0001052d 	.word	0x0001052d
    1300:	00001105 	.word	0x00001105
    1304:	00010669 	.word	0x00010669
    1308:	00000321 	.word	0x00000321
    130c:	00001271 	.word	0x00001271

00001310 <_GLOBAL__sub_I_ptrMaintenanceTool>:
	}

}
    1310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    1314:	4c31      	ldr	r4, [pc, #196]	; (13dc <_GLOBAL__sub_I_ptrMaintenanceTool+0xcc>)
    1316:	f104 0564 	add.w	r5, r4, #100	; 0x64
    131a:	4931      	ldr	r1, [pc, #196]	; (13e0 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd0>)
    131c:	4628      	mov	r0, r5
    131e:	4f31      	ldr	r7, [pc, #196]	; (13e4 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd4>)
    1320:	47b8      	blx	r7
    1322:	4e31      	ldr	r6, [pc, #196]	; (13e8 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd8>)
    1324:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1420 <_GLOBAL__sub_I_ptrMaintenanceTool+0x110>
    1328:	4632      	mov	r2, r6
    132a:	4641      	mov	r1, r8
    132c:	4628      	mov	r0, r5
    132e:	4d2f      	ldr	r5, [pc, #188]	; (13ec <_GLOBAL__sub_I_ptrMaintenanceTool+0xdc>)
    1330:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
    1332:	f104 0984 	add.w	r9, r4, #132	; 0x84
    1336:	492e      	ldr	r1, [pc, #184]	; (13f0 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe0>)
    1338:	4648      	mov	r0, r9
    133a:	47b8      	blx	r7
    133c:	4632      	mov	r2, r6
    133e:	4641      	mov	r1, r8
    1340:	4648      	mov	r0, r9
    1342:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
    1344:	f104 09a4 	add.w	r9, r4, #164	; 0xa4
    1348:	492a      	ldr	r1, [pc, #168]	; (13f4 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe4>)
    134a:	4648      	mov	r0, r9
    134c:	47b8      	blx	r7
    134e:	4632      	mov	r2, r6
    1350:	4641      	mov	r1, r8
    1352:	4648      	mov	r0, r9
    1354:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    1356:	f104 09c4 	add.w	r9, r4, #196	; 0xc4
    135a:	4927      	ldr	r1, [pc, #156]	; (13f8 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe8>)
    135c:	4648      	mov	r0, r9
    135e:	47b8      	blx	r7
    1360:	4632      	mov	r2, r6
    1362:	4641      	mov	r1, r8
    1364:	4648      	mov	r0, r9
    1366:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
    1368:	f104 09e4 	add.w	r9, r4, #228	; 0xe4
    136c:	4923      	ldr	r1, [pc, #140]	; (13fc <_GLOBAL__sub_I_ptrMaintenanceTool+0xec>)
    136e:	4648      	mov	r0, r9
    1370:	47b8      	blx	r7
    1372:	4632      	mov	r2, r6
    1374:	4641      	mov	r1, r8
    1376:	4648      	mov	r0, r9
    1378:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
    137a:	f504 7982 	add.w	r9, r4, #260	; 0x104
    137e:	4920      	ldr	r1, [pc, #128]	; (1400 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf0>)
    1380:	4648      	mov	r0, r9
    1382:	47b8      	blx	r7
    1384:	4632      	mov	r2, r6
    1386:	4641      	mov	r1, r8
    1388:	4648      	mov	r0, r9
    138a:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    138c:	f104 0904 	add.w	r9, r4, #4
    1390:	491c      	ldr	r1, [pc, #112]	; (1404 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf4>)
    1392:	4648      	mov	r0, r9
    1394:	47b8      	blx	r7
    1396:	4632      	mov	r2, r6
    1398:	4641      	mov	r1, r8
    139a:	4648      	mov	r0, r9
    139c:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
    139e:	f504 7992 	add.w	r9, r4, #292	; 0x124
    13a2:	4919      	ldr	r1, [pc, #100]	; (1408 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf8>)
    13a4:	4648      	mov	r0, r9
    13a6:	47b8      	blx	r7
    13a8:	4632      	mov	r2, r6
    13aa:	4641      	mov	r1, r8
    13ac:	4648      	mov	r0, r9
    13ae:	47a8      	blx	r5
    13b0:	f504 77a2 	add.w	r7, r4, #324	; 0x144
    13b4:	4915      	ldr	r1, [pc, #84]	; (140c <_GLOBAL__sub_I_ptrMaintenanceTool+0xfc>)
    13b6:	4638      	mov	r0, r7
    13b8:	4b15      	ldr	r3, [pc, #84]	; (1410 <_GLOBAL__sub_I_ptrMaintenanceTool+0x100>)
    13ba:	4798      	blx	r3
    13bc:	4632      	mov	r2, r6
    13be:	4915      	ldr	r1, [pc, #84]	; (1414 <_GLOBAL__sub_I_ptrMaintenanceTool+0x104>)
    13c0:	4638      	mov	r0, r7
    13c2:	47a8      	blx	r5
    13c4:	f504 74ae 	add.w	r4, r4, #348	; 0x15c
    13c8:	4620      	mov	r0, r4
    13ca:	4b13      	ldr	r3, [pc, #76]	; (1418 <_GLOBAL__sub_I_ptrMaintenanceTool+0x108>)
    13cc:	4798      	blx	r3
    13ce:	4632      	mov	r2, r6
    13d0:	4912      	ldr	r1, [pc, #72]	; (141c <_GLOBAL__sub_I_ptrMaintenanceTool+0x10c>)
    13d2:	4620      	mov	r0, r4
    13d4:	47a8      	blx	r5
    13d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    13da:	bf00      	nop
    13dc:	20001e98 	.word	0x20001e98
    13e0:	2000df28 	.word	0x2000df28
    13e4:	00010441 	.word	0x00010441
    13e8:	20000000 	.word	0x20000000
    13ec:	0001a611 	.word	0x0001a611
    13f0:	2000dfbc 	.word	0x2000dfbc
    13f4:	2000e0e0 	.word	0x2000e0e0
    13f8:	2000dfdc 	.word	0x2000dfdc
    13fc:	2000e0a0 	.word	0x2000e0a0
    1400:	2000e0c0 	.word	0x2000e0c0
    1404:	2000df98 	.word	0x2000df98
    1408:	2000e038 	.word	0x2000e038
    140c:	2000e058 	.word	0x2000e058
    1410:	0000fc6d 	.word	0x0000fc6d
    1414:	0000fc89 	.word	0x0000fc89
    1418:	00001175 	.word	0x00001175
    141c:	00001129 	.word	0x00001129
    1420:	00010479 	.word	0x00010479

00001424 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
    1424:	b538      	push	{r3, r4, r5, lr}
    1426:	4605      	mov	r5, r0
    1428:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
    142a:	4b05      	ldr	r3, [pc, #20]	; (1440 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
    142c:	4798      	blx	r3
    142e:	f8a5 015e 	strh.w	r0, [r5, #350]	; 0x15e
	usb.writeData(&header, sizeof(header));
    1432:	2206      	movs	r2, #6
    1434:	4621      	mov	r1, r4
    1436:	4803      	ldr	r0, [pc, #12]	; (1444 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
    1438:	4b03      	ldr	r3, [pc, #12]	; (1448 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
    143a:	4798      	blx	r3
    143c:	bd38      	pop	{r3, r4, r5, pc}
    143e:	bf00      	nop
    1440:	00001251 	.word	0x00001251
    1444:	200034b0 	.word	0x200034b0
    1448:	00010dd9 	.word	0x00010dd9

0000144c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv>:
bool Maintenance_Tool::CommandReadTemmperatures(){
    144c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool	result(header.task == kHVACCommandReadTemperatures);
    1450:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
    1454:	2b4d      	cmp	r3, #77	; 0x4d
    1456:	bf0c      	ite	eq
    1458:	2501      	moveq	r5, #1
    145a:	2500      	movne	r5, #0
	if (result){
    145c:	d002      	beq.n	1464 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x18>
}
    145e:	4628      	mov	r0, r5
    1460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		singleTask.description=temperatures.faultData;
    1464:	4b18      	ldr	r3, [pc, #96]	; (14c8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
    1466:	f893 809c 	ldrb.w	r8, [r3, #156]	; 0x9c
		memcpy(localBuffer,(void*)&singleTask,n);
    146a:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    146e:	4a17      	ldr	r2, [pc, #92]	; (14cc <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
    1470:	601a      	str	r2, [r3, #0]
    1472:	2200      	movs	r2, #0
    1474:	711a      	strb	r2, [r3, #4]
    1476:	224d      	movs	r2, #77	; 0x4d
    1478:	715a      	strb	r2, [r3, #5]
    147a:	f883 8006 	strb.w	r8, [r3, #6]
    147e:	2307      	movs	r3, #7
    1480:	4911      	ldr	r1, [pc, #68]	; (14c8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
    1482:	f103 0261 	add.w	r2, r3, #97	; 0x61
    1486:	440a      	add	r2, r1
    1488:	f103 0710 	add.w	r7, r3, #16
				memcpy(&localBuffer[n+4*((4*i)+j)],(void*)&temperatures.values[i][j],4);
    148c:	f852 4f04 	ldr.w	r4, [r2, #4]!
    1490:	f8d0 618c 	ldr.w	r6, [r0, #396]	; 0x18c
    1494:	50f4      	str	r4, [r6, r3]
    1496:	3304      	adds	r3, #4
			for (int j = 0; j < 4; j++)
    1498:	42bb      	cmp	r3, r7
    149a:	d1f7      	bne.n	148c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x40>
		for (int i = 0; i < 3; i++)
    149c:	2b37      	cmp	r3, #55	; 0x37
    149e:	d1f0      	bne.n	1482 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x36>
    14a0:	4604      	mov	r4, r0
		usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    14a2:	2240      	movs	r2, #64	; 0x40
    14a4:	f8d0 118c 	ldr.w	r1, [r0, #396]	; 0x18c
    14a8:	4809      	ldr	r0, [pc, #36]	; (14d0 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x84>)
    14aa:	4b0a      	ldr	r3, [pc, #40]	; (14d4 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x88>)
    14ac:	4798      	blx	r3
		singleTaskMessage=singleTask;
    14ae:	4b07      	ldr	r3, [pc, #28]	; (14cc <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
    14b0:	f8c4 3182 	str.w	r3, [r4, #386]	; 0x182
    14b4:	2200      	movs	r2, #0
    14b6:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
    14ba:	234d      	movs	r3, #77	; 0x4d
    14bc:	f884 3187 	strb.w	r3, [r4, #391]	; 0x187
    14c0:	f884 8188 	strb.w	r8, [r4, #392]	; 0x188
    14c4:	e7cb      	b.n	145e <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x12>
    14c6:	bf00      	nop
    14c8:	2000ce4c 	.word	0x2000ce4c
    14cc:	61626364 	.word	0x61626364
    14d0:	200034b0 	.word	0x200034b0
    14d4:	00010e71 	.word	0x00010e71

000014d8 <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
    14d8:	b570      	push	{r4, r5, r6, lr}
    14da:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
    14dc:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
    14e0:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    14e4:	681a      	ldr	r2, [r3, #0]
    14e6:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
    14ea:	889b      	ldrh	r3, [r3, #4]
    14ec:	80ab      	strh	r3, [r5, #4]
	&& (header.task<kGAINNumberOfCommands))
    14ee:	f890 30f9 	ldrb.w	r3, [r0, #249]	; 0xf9
    14f2:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
    14f4:	b2db      	uxtb	r3, r3
    14f6:	2b1c      	cmp	r3, #28
    14f8:	d81b      	bhi.n	1532 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x5a>
		gotTask=true;
    14fa:	2301      	movs	r3, #1
    14fc:	f880 315b 	strb.w	r3, [r0, #347]	; 0x15b
		result=gotTask;
    1500:	f880 3158 	strb.w	r3, [r0, #344]	; 0x158
		switch (header.task)
    1504:	f894 30f9 	ldrb.w	r3, [r4, #249]	; 0xf9
    1508:	3b41      	subs	r3, #65	; 0x41
    150a:	2b1c      	cmp	r3, #28
    150c:	f200 809a 	bhi.w	1644 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x16c>
    1510:	e8df f003 	tbb	[pc, r3]
    1514:	2f1f2922 	.word	0x2f1f2922
    1518:	3e381f1f 	.word	0x3e381f1f
    151c:	746e504a 	.word	0x746e504a
    1520:	928c8680 	.word	0x928c8680
    1524:	68565c7a 	.word	0x68565c7a
    1528:	1f449862 	.word	0x1f449862
    152c:	98981f1f 	.word	0x98981f1f
    1530:	1f          	.byte	0x1f
    1531:	00          	.byte	0x00
		gotTask=false;
    1532:	2300      	movs	r3, #0
    1534:	f880 315b 	strb.w	r3, [r0, #347]	; 0x15b
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
    1538:	4e44      	ldr	r6, [pc, #272]	; (164c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x174>)
    153a:	2240      	movs	r2, #64	; 0x40
    153c:	f500 71c6 	add.w	r1, r0, #396	; 0x18c
    1540:	4630      	mov	r0, r6
    1542:	4b43      	ldr	r3, [pc, #268]	; (1650 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x178>)
    1544:	4798      	blx	r3
		result=usb.rxReady;
    1546:	7d73      	ldrb	r3, [r6, #21]
    1548:	b2db      	uxtb	r3, r3
    154a:	f884 3158 	strb.w	r3, [r4, #344]	; 0x158
	if (result)
    154e:	2b00      	cmp	r3, #0
    1550:	d1d8      	bne.n	1504 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2c>
	}
    1552:	f894 0158 	ldrb.w	r0, [r4, #344]	; 0x158
    1556:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
    1558:	4629      	mov	r1, r5
    155a:	4620      	mov	r0, r4
    155c:	4b3d      	ldr	r3, [pc, #244]	; (1654 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x17c>)
    155e:	4798      	blx	r3
    1560:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
				break;
    1564:	e7f5      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
	maintenanceIsConnected = false;
    1566:	2300      	movs	r3, #0
    1568:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	bSendNotifications = false;
    156c:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
				break;
    1570:	e7ef      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				notifyGAINCommandReceived( header, result);
    1572:	2201      	movs	r2, #1
    1574:	4629      	mov	r1, r5
    1576:	4620      	mov	r0, r4
    1578:	4b37      	ldr	r3, [pc, #220]	; (1658 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x180>)
    157a:	4798      	blx	r3
				result = handleGAINCommandReset(header);
    157c:	2301      	movs	r3, #1
    157e:	f884 3158 	strb.w	r3, [r4, #344]	; 0x158
				break;
    1582:	e7e6      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandWriteParameters();
    1584:	4620      	mov	r0, r4
    1586:	4b35      	ldr	r3, [pc, #212]	; (165c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x184>)
    1588:	4798      	blx	r3
    158a:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
				break;
    158e:	e7e0      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadParameters();
    1590:	4620      	mov	r0, r4
    1592:	4b33      	ldr	r3, [pc, #204]	; (1660 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x188>)
    1594:	4798      	blx	r3
    1596:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
				break;
    159a:	e7da      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadDataLogger();
    159c:	4620      	mov	r0, r4
    159e:	4b31      	ldr	r3, [pc, #196]	; (1664 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x18c>)
    15a0:	4798      	blx	r3
    15a2:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
				break;
    15a6:	e7d4      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetHeaters();
    15a8:	4620      	mov	r0, r4
    15aa:	4b2f      	ldr	r3, [pc, #188]	; (1668 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x190>)
    15ac:	4798      	blx	r3
    15ae:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
				break;
    15b2:	e7ce      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadHeaterStatus();
    15b4:	4620      	mov	r0, r4
    15b6:	4b2d      	ldr	r3, [pc, #180]	; (166c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x194>)
    15b8:	4798      	blx	r3
    15ba:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
				break;
    15be:	e7c8      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetScavenge();
    15c0:	4620      	mov	r0, r4
    15c2:	4b2b      	ldr	r3, [pc, #172]	; (1670 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x198>)
    15c4:	4798      	blx	r3
    15c6:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
				break;
    15ca:	e7c2      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadScavengeStatus();
    15cc:	4620      	mov	r0, r4
    15ce:	4b29      	ldr	r3, [pc, #164]	; (1674 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x19c>)
    15d0:	4798      	blx	r3
    15d2:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
				break;
    15d6:	e7bc      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetCompressor();
    15d8:	4620      	mov	r0, r4
    15da:	4b27      	ldr	r3, [pc, #156]	; (1678 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1a0>)
    15dc:	4798      	blx	r3
    15de:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
				break;
    15e2:	e7b6      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadCompressorStatus();
    15e4:	4620      	mov	r0, r4
    15e6:	4b25      	ldr	r3, [pc, #148]	; (167c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1a4>)
    15e8:	4798      	blx	r3
    15ea:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
				break;
    15ee:	e7b0      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetEnableFans();
    15f0:	4620      	mov	r0, r4
    15f2:	4b23      	ldr	r3, [pc, #140]	; (1680 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1a8>)
    15f4:	4798      	blx	r3
    15f6:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
				break;
    15fa:	e7aa      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetPWMFans();
    15fc:	4620      	mov	r0, r4
    15fe:	4b21      	ldr	r3, [pc, #132]	; (1684 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1ac>)
    1600:	4798      	blx	r3
    1602:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
				break;
    1606:	e7a4      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandFansStatus();
    1608:	4620      	mov	r0, r4
    160a:	4b1f      	ldr	r3, [pc, #124]	; (1688 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1b0>)
    160c:	4798      	blx	r3
    160e:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
				break;
    1612:	e79e      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadTemmperatures();
    1614:	4620      	mov	r0, r4
    1616:	4b1d      	ldr	r3, [pc, #116]	; (168c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1b4>)
    1618:	4798      	blx	r3
    161a:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
				break;
    161e:	e798      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandReadFlapperData();
    1620:	4620      	mov	r0, r4
    1622:	4b1b      	ldr	r3, [pc, #108]	; (1690 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1b8>)
    1624:	4798      	blx	r3
    1626:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
				break;
    162a:	e792      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetFlapperValve();
    162c:	4620      	mov	r0, r4
    162e:	4b19      	ldr	r3, [pc, #100]	; (1694 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1bc>)
    1630:	4798      	blx	r3
    1632:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
				break;
    1636:	e78c      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = CommandSetFlapperPosition();
    1638:	4620      	mov	r0, r4
    163a:	4b17      	ldr	r3, [pc, #92]	; (1698 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x1c0>)
    163c:	4798      	blx	r3
    163e:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
				break;
    1642:	e786      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
				result = false;
    1644:	2300      	movs	r3, #0
    1646:	f884 3158 	strb.w	r3, [r4, #344]	; 0x158
				break;
    164a:	e782      	b.n	1552 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x7a>
    164c:	200034b0 	.word	0x200034b0
    1650:	00010ced 	.word	0x00010ced
    1654:	0000120d 	.word	0x0000120d
    1658:	00001425 	.word	0x00001425
    165c:	00000549 	.word	0x00000549
    1660:	0000090d 	.word	0x0000090d
    1664:	00000995 	.word	0x00000995
    1668:	00000581 	.word	0x00000581
    166c:	00000b41 	.word	0x00000b41
    1670:	000005f9 	.word	0x000005f9
    1674:	00000ba1 	.word	0x00000ba1
    1678:	00000639 	.word	0x00000639
    167c:	00000bfd 	.word	0x00000bfd
    1680:	000003bd 	.word	0x000003bd
    1684:	000003e9 	.word	0x000003e9
    1688:	000007e1 	.word	0x000007e1
    168c:	0000144d 	.word	0x0000144d
    1690:	00000841 	.word	0x00000841
    1694:	00000451 	.word	0x00000451
    1698:	000004c9 	.word	0x000004c9

0000169c <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
    169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    169e:	4604      	mov	r4, r0
	result=false;
    16a0:	2300      	movs	r3, #0
    16a2:	f880 3158 	strb.w	r3, [r0, #344]	; 0x158
	if (gotAccess)
    16a6:	f890 3159 	ldrb.w	r3, [r0, #345]	; 0x159
    16aa:	2b00      	cmp	r3, #0
    16ac:	d050      	beq.n	1750 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>
		if (usb.rxReady)
    16ae:	4b2a      	ldr	r3, [pc, #168]	; (1758 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    16b0:	7d5b      	ldrb	r3, [r3, #21]
    16b2:	b95b      	cbnz	r3, 16cc <_ZN16Maintenance_Tool19handleCommunicationEv+0x30>
			gotCommand=false;
    16b4:	2300      	movs	r3, #0
    16b6:	f880 315a 	strb.w	r3, [r0, #346]	; 0x15a
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    16ba:	2240      	movs	r2, #64	; 0x40
    16bc:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    16c0:	4825      	ldr	r0, [pc, #148]	; (1758 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    16c2:	4b26      	ldr	r3, [pc, #152]	; (175c <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
    16c4:	4798      	blx	r3
	}
    16c6:	f894 0158 	ldrb.w	r0, [r4, #344]	; 0x158
    16ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeMessage);
    16cc:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    16d0:	681a      	ldr	r2, [r3, #0]
    16d2:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
    16d6:	889b      	ldrh	r3, [r3, #4]
    16d8:	f8a0 30f8 	strh.w	r3, [r0, #248]	; 0xf8
			switch (input){
    16dc:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    16e0:	2b3d      	cmp	r3, #61	; 0x3d
    16e2:	d017      	beq.n	1714 <_ZN16Maintenance_Tool19handleCommunicationEv+0x78>
    16e4:	2b3e      	cmp	r3, #62	; 0x3e
    16e6:	d010      	beq.n	170a <_ZN16Maintenance_Tool19handleCommunicationEv+0x6e>
    16e8:	2b3c      	cmp	r3, #60	; 0x3c
    16ea:	d003      	beq.n	16f4 <_ZN16Maintenance_Tool19handleCommunicationEv+0x58>
					gotCommand=false;
    16ec:	2300      	movs	r3, #0
    16ee:	f880 315a 	strb.w	r3, [r0, #346]	; 0x15a
				break;
    16f2:	e006      	b.n	1702 <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
					gotCommand=true;
    16f4:	2301      	movs	r3, #1
    16f6:	f880 315a 	strb.w	r3, [r0, #346]	; 0x15a
					result = handleHVACTask();
    16fa:	4b19      	ldr	r3, [pc, #100]	; (1760 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
    16fc:	4798      	blx	r3
    16fe:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
			ClearLocalBuffer();
    1702:	4620      	mov	r0, r4
    1704:	4b17      	ldr	r3, [pc, #92]	; (1764 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
    1706:	4798      	blx	r3
    1708:	e7d7      	b.n	16ba <_ZN16Maintenance_Tool19handleCommunicationEv+0x1e>
					result = handleHVACTask();
    170a:	4b15      	ldr	r3, [pc, #84]	; (1760 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
    170c:	4798      	blx	r3
    170e:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
				break;
    1712:	e7f6      	b.n	1702 <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
					is_MTPC_Beaming=true;
    1714:	2501      	movs	r5, #1
    1716:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
					interfaceTimer.Stop();
    171a:	4e13      	ldr	r6, [pc, #76]	; (1768 <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
    171c:	4630      	mov	r0, r6
    171e:	4b13      	ldr	r3, [pc, #76]	; (176c <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
    1720:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
    1722:	4f13      	ldr	r7, [pc, #76]	; (1770 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
    1724:	4639      	mov	r1, r7
    1726:	4630      	mov	r0, r6
    1728:	4b12      	ldr	r3, [pc, #72]	; (1774 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd8>)
    172a:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
    172c:	f242 7210 	movw	r2, #10000	; 0x2710
    1730:	4639      	mov	r1, r7
    1732:	4630      	mov	r0, r6
    1734:	4b10      	ldr	r3, [pc, #64]	; (1778 <_ZN16Maintenance_Tool19handleCommunicationEv+0xdc>)
    1736:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
    1738:	2300      	movs	r3, #0
    173a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
					maintenanceIsConnected = true;
    173e:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
					bSendNotifications = true;
    1742:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
					result=is_MTPC_Beaming;
    1746:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
    174a:	f884 3158 	strb.w	r3, [r4, #344]	; 0x158
				break;
    174e:	e7d8      	b.n	1702 <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
		gotCommand=false;
    1750:	2300      	movs	r3, #0
    1752:	f880 315a 	strb.w	r3, [r0, #346]	; 0x15a
    1756:	e7b6      	b.n	16c6 <_ZN16Maintenance_Tool19handleCommunicationEv+0x2a>
    1758:	200034b0 	.word	0x200034b0
    175c:	00010ced 	.word	0x00010ced
    1760:	000014d9 	.word	0x000014d9
    1764:	000011f1 	.word	0x000011f1
    1768:	20001e9c 	.word	0x20001e9c
    176c:	000105a1 	.word	0x000105a1
    1770:	00001119 	.word	0x00001119
    1774:	000106bd 	.word	0x000106bd
    1778:	00010715 	.word	0x00010715

0000177c <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
    177c:	b510      	push	{r4, lr}
    177e:	4604      	mov	r4, r0
	result=false;
    1780:	2300      	movs	r3, #0
    1782:	f880 3158 	strb.w	r3, [r0, #344]	; 0x158
	magic=0;
    1786:	f8c0 317c 	str.w	r3, [r0, #380]	; 0x17c
	if (gotAccess==true)
    178a:	f890 3159 	ldrb.w	r3, [r0, #345]	; 0x159
    178e:	b12b      	cbz	r3, 179c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
    1790:	2301      	movs	r3, #1
    1792:	f880 3158 	strb.w	r3, [r0, #344]	; 0x158
	return	result;
    1796:	f894 0158 	ldrb.w	r0, [r4, #344]	; 0x158
}
    179a:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
    179c:	4b15      	ldr	r3, [pc, #84]	; (17f4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
    179e:	7d5b      	ldrb	r3, [r3, #21]
    17a0:	b1b3      	cbz	r3, 17d0 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x54>
				magic|= localBuffer[i];
    17a2:	f8d0 018c 	ldr.w	r0, [r0, #396]	; 0x18c
    17a6:	1e41      	subs	r1, r0, #1
    17a8:	3003      	adds	r0, #3
				magic=magic<<8;
    17aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    17ae:	021b      	lsls	r3, r3, #8
    17b0:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
				magic|= localBuffer[i];
    17b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    17b8:	4313      	orrs	r3, r2
    17ba:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
			for (int i = 0; i < 4; i++)
    17be:	4281      	cmp	r1, r0
    17c0:	d1f3      	bne.n	17aa <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2e>
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
    17c2:	4a0d      	ldr	r2, [pc, #52]	; (17f8 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
    17c4:	ea83 0102 	eor.w	r1, r3, r2
    17c8:	f8c4 1178 	str.w	r1, [r4, #376]	; 0x178
			if (xorResult==0)
    17cc:	4293      	cmp	r3, r2
    17ce:	d006      	beq.n	17de <_ZN16Maintenance_Tool14IsAppConnectedEv+0x62>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    17d0:	2240      	movs	r2, #64	; 0x40
    17d2:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    17d6:	4807      	ldr	r0, [pc, #28]	; (17f4 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x78>)
    17d8:	4b08      	ldr	r3, [pc, #32]	; (17fc <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
    17da:	4798      	blx	r3
    17dc:	e7db      	b.n	1796 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
    17de:	2301      	movs	r3, #1
    17e0:	f884 3159 	strb.w	r3, [r4, #345]	; 0x159
				result=true;
    17e4:	f884 3158 	strb.w	r3, [r4, #344]	; 0x158
				is_MTPC_Beaming=true;
    17e8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
				return	handleCommunication();
    17ec:	4620      	mov	r0, r4
    17ee:	4b04      	ldr	r3, [pc, #16]	; (1800 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
    17f0:	4798      	blx	r3
    17f2:	bd10      	pop	{r4, pc}
    17f4:	200034b0 	.word	0x200034b0
    17f8:	61626364 	.word	0x61626364
    17fc:	00010ced 	.word	0x00010ced
    1800:	0000169d 	.word	0x0000169d

00001804 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    1804:	b580      	push	{r7, lr}
    1806:	af00      	add	r7, sp, #0
	system_init();
    1808:	4b03      	ldr	r3, [pc, #12]	; (1818 <atmel_start_init+0x14>)
    180a:	4798      	blx	r3
	usb_init();
    180c:	4b03      	ldr	r3, [pc, #12]	; (181c <atmel_start_init+0x18>)
    180e:	4798      	blx	r3
	spi_nor_flash_init();
    1810:	4b03      	ldr	r3, [pc, #12]	; (1820 <atmel_start_init+0x1c>)
    1812:	4798      	blx	r3
}
    1814:	bf00      	nop
    1816:	bd80      	pop	{r7, pc}
    1818:	00002c1d 	.word	0x00002c1d
    181c:	0000d115 	.word	0x0000d115
    1820:	0000d0a9 	.word	0x0000d0a9

00001824 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    1824:	b480      	push	{r7}
    1826:	b085      	sub	sp, #20
    1828:	af00      	add	r7, sp, #0
    182a:	60f8      	str	r0, [r7, #12]
    182c:	460b      	mov	r3, r1
    182e:	607a      	str	r2, [r7, #4]
    1830:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1832:	7afa      	ldrb	r2, [r7, #11]
    1834:	68fb      	ldr	r3, [r7, #12]
    1836:	3220      	adds	r2, #32
    1838:	6879      	ldr	r1, [r7, #4]
    183a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    183e:	bf00      	nop
    1840:	3714      	adds	r7, #20
    1842:	46bd      	mov	sp, r7
    1844:	f85d 7b04 	ldr.w	r7, [sp], #4
    1848:	4770      	bx	lr

0000184a <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    184a:	b480      	push	{r7}
    184c:	b083      	sub	sp, #12
    184e:	af00      	add	r7, sp, #0
    1850:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    1852:	687b      	ldr	r3, [r7, #4]
    1854:	691b      	ldr	r3, [r3, #16]
    1856:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    185a:	687b      	ldr	r3, [r7, #4]
    185c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    185e:	bf00      	nop
    1860:	370c      	adds	r7, #12
    1862:	46bd      	mov	sp, r7
    1864:	f85d 7b04 	ldr.w	r7, [sp], #4
    1868:	4770      	bx	lr

0000186a <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    186a:	b480      	push	{r7}
    186c:	b083      	sub	sp, #12
    186e:	af00      	add	r7, sp, #0
    1870:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    1872:	687b      	ldr	r3, [r7, #4]
    1874:	691b      	ldr	r3, [r3, #16]
    1876:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    187a:	687b      	ldr	r3, [r7, #4]
    187c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    187e:	bf00      	nop
    1880:	370c      	adds	r7, #12
    1882:	46bd      	mov	sp, r7
    1884:	f85d 7b04 	ldr.w	r7, [sp], #4
    1888:	4770      	bx	lr

0000188a <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    188a:	b480      	push	{r7}
    188c:	b083      	sub	sp, #12
    188e:	af00      	add	r7, sp, #0
    1890:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    1892:	687b      	ldr	r3, [r7, #4]
    1894:	691b      	ldr	r3, [r3, #16]
    1896:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    189a:	687b      	ldr	r3, [r7, #4]
    189c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    189e:	bf00      	nop
    18a0:	370c      	adds	r7, #12
    18a2:	46bd      	mov	sp, r7
    18a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    18a8:	4770      	bx	lr

000018aa <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    18aa:	b480      	push	{r7}
    18ac:	b083      	sub	sp, #12
    18ae:	af00      	add	r7, sp, #0
    18b0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    18b2:	687b      	ldr	r3, [r7, #4]
    18b4:	691b      	ldr	r3, [r3, #16]
    18b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    18ba:	687b      	ldr	r3, [r7, #4]
    18bc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    18be:	bf00      	nop
    18c0:	370c      	adds	r7, #12
    18c2:	46bd      	mov	sp, r7
    18c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    18c8:	4770      	bx	lr

000018ca <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    18ca:	b480      	push	{r7}
    18cc:	b083      	sub	sp, #12
    18ce:	af00      	add	r7, sp, #0
    18d0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	695b      	ldr	r3, [r3, #20]
    18d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    18da:	687b      	ldr	r3, [r7, #4]
    18dc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    18de:	bf00      	nop
    18e0:	370c      	adds	r7, #12
    18e2:	46bd      	mov	sp, r7
    18e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    18e8:	4770      	bx	lr

000018ea <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    18ea:	b480      	push	{r7}
    18ec:	b083      	sub	sp, #12
    18ee:	af00      	add	r7, sp, #0
    18f0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    18f2:	687b      	ldr	r3, [r7, #4]
    18f4:	695b      	ldr	r3, [r3, #20]
    18f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    18fa:	687b      	ldr	r3, [r7, #4]
    18fc:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    18fe:	bf00      	nop
    1900:	370c      	adds	r7, #12
    1902:	46bd      	mov	sp, r7
    1904:	f85d 7b04 	ldr.w	r7, [sp], #4
    1908:	4770      	bx	lr

0000190a <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    190a:	b480      	push	{r7}
    190c:	b083      	sub	sp, #12
    190e:	af00      	add	r7, sp, #0
    1910:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    1912:	687b      	ldr	r3, [r7, #4]
    1914:	695b      	ldr	r3, [r3, #20]
    1916:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    191a:	687b      	ldr	r3, [r7, #4]
    191c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    191e:	bf00      	nop
    1920:	370c      	adds	r7, #12
    1922:	46bd      	mov	sp, r7
    1924:	f85d 7b04 	ldr.w	r7, [sp], #4
    1928:	4770      	bx	lr

0000192a <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    192a:	b480      	push	{r7}
    192c:	b083      	sub	sp, #12
    192e:	af00      	add	r7, sp, #0
    1930:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1932:	687b      	ldr	r3, [r7, #4]
    1934:	695b      	ldr	r3, [r3, #20]
    1936:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    193e:	bf00      	nop
    1940:	370c      	adds	r7, #12
    1942:	46bd      	mov	sp, r7
    1944:	f85d 7b04 	ldr.w	r7, [sp], #4
    1948:	4770      	bx	lr

0000194a <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    194a:	b480      	push	{r7}
    194c:	b083      	sub	sp, #12
    194e:	af00      	add	r7, sp, #0
    1950:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    1952:	687b      	ldr	r3, [r7, #4]
    1954:	699b      	ldr	r3, [r3, #24]
    1956:	f043 0201 	orr.w	r2, r3, #1
    195a:	687b      	ldr	r3, [r7, #4]
    195c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    195e:	bf00      	nop
    1960:	370c      	adds	r7, #12
    1962:	46bd      	mov	sp, r7
    1964:	f85d 7b04 	ldr.w	r7, [sp], #4
    1968:	4770      	bx	lr

0000196a <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    196a:	b480      	push	{r7}
    196c:	b083      	sub	sp, #12
    196e:	af00      	add	r7, sp, #0
    1970:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    1972:	687b      	ldr	r3, [r7, #4]
    1974:	699b      	ldr	r3, [r3, #24]
    1976:	f043 0202 	orr.w	r2, r3, #2
    197a:	687b      	ldr	r3, [r7, #4]
    197c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    197e:	bf00      	nop
    1980:	370c      	adds	r7, #12
    1982:	46bd      	mov	sp, r7
    1984:	f85d 7b04 	ldr.w	r7, [sp], #4
    1988:	4770      	bx	lr

0000198a <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    198a:	b480      	push	{r7}
    198c:	b083      	sub	sp, #12
    198e:	af00      	add	r7, sp, #0
    1990:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	699b      	ldr	r3, [r3, #24]
    1996:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    199a:	687b      	ldr	r3, [r7, #4]
    199c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    199e:	bf00      	nop
    19a0:	370c      	adds	r7, #12
    19a2:	46bd      	mov	sp, r7
    19a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    19a8:	4770      	bx	lr

000019aa <hri_mclk_set_APBBMASK_SERCOM3_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
    19aa:	b480      	push	{r7}
    19ac:	b083      	sub	sp, #12
    19ae:	af00      	add	r7, sp, #0
    19b0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    19b2:	687b      	ldr	r3, [r7, #4]
    19b4:	699b      	ldr	r3, [r3, #24]
    19b6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    19ba:	687b      	ldr	r3, [r7, #4]
    19bc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    19be:	bf00      	nop
    19c0:	370c      	adds	r7, #12
    19c2:	46bd      	mov	sp, r7
    19c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    19c8:	4770      	bx	lr

000019ca <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    19ca:	b480      	push	{r7}
    19cc:	b083      	sub	sp, #12
    19ce:	af00      	add	r7, sp, #0
    19d0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    19d2:	687b      	ldr	r3, [r7, #4]
    19d4:	699b      	ldr	r3, [r3, #24]
    19d6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    19da:	687b      	ldr	r3, [r7, #4]
    19dc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    19de:	bf00      	nop
    19e0:	370c      	adds	r7, #12
    19e2:	46bd      	mov	sp, r7
    19e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    19e8:	4770      	bx	lr

000019ea <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    19ea:	b480      	push	{r7}
    19ec:	b083      	sub	sp, #12
    19ee:	af00      	add	r7, sp, #0
    19f0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    19f2:	687b      	ldr	r3, [r7, #4]
    19f4:	699b      	ldr	r3, [r3, #24]
    19f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    19fa:	687b      	ldr	r3, [r7, #4]
    19fc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    19fe:	bf00      	nop
    1a00:	370c      	adds	r7, #12
    1a02:	46bd      	mov	sp, r7
    1a04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a08:	4770      	bx	lr

00001a0a <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    1a0a:	b480      	push	{r7}
    1a0c:	b083      	sub	sp, #12
    1a0e:	af00      	add	r7, sp, #0
    1a10:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    1a12:	687b      	ldr	r3, [r7, #4]
    1a14:	699b      	ldr	r3, [r3, #24]
    1a16:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1a1a:	687b      	ldr	r3, [r7, #4]
    1a1c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a1e:	bf00      	nop
    1a20:	370c      	adds	r7, #12
    1a22:	46bd      	mov	sp, r7
    1a24:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a28:	4770      	bx	lr

00001a2a <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
    1a2a:	b480      	push	{r7}
    1a2c:	b083      	sub	sp, #12
    1a2e:	af00      	add	r7, sp, #0
    1a30:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    1a32:	687b      	ldr	r3, [r7, #4]
    1a34:	69db      	ldr	r3, [r3, #28]
    1a36:	f043 0208 	orr.w	r2, r3, #8
    1a3a:	687b      	ldr	r3, [r7, #4]
    1a3c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a3e:	bf00      	nop
    1a40:	370c      	adds	r7, #12
    1a42:	46bd      	mov	sp, r7
    1a44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a48:	4770      	bx	lr

00001a4a <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    1a4a:	b480      	push	{r7}
    1a4c:	b083      	sub	sp, #12
    1a4e:	af00      	add	r7, sp, #0
    1a50:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    1a52:	687b      	ldr	r3, [r7, #4]
    1a54:	69db      	ldr	r3, [r3, #28]
    1a56:	f043 0220 	orr.w	r2, r3, #32
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a5e:	bf00      	nop
    1a60:	370c      	adds	r7, #12
    1a62:	46bd      	mov	sp, r7
    1a64:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a68:	4770      	bx	lr

00001a6a <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    1a6a:	b480      	push	{r7}
    1a6c:	b083      	sub	sp, #12
    1a6e:	af00      	add	r7, sp, #0
    1a70:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    1a72:	687b      	ldr	r3, [r7, #4]
    1a74:	69db      	ldr	r3, [r3, #28]
    1a76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    1a7a:	687b      	ldr	r3, [r7, #4]
    1a7c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a7e:	bf00      	nop
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr

00001a8a <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    1a8a:	b480      	push	{r7}
    1a8c:	b083      	sub	sp, #12
    1a8e:	af00      	add	r7, sp, #0
    1a90:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    1a92:	687b      	ldr	r3, [r7, #4]
    1a94:	69db      	ldr	r3, [r3, #28]
    1a96:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1a9a:	687b      	ldr	r3, [r7, #4]
    1a9c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1a9e:	bf00      	nop
    1aa0:	370c      	adds	r7, #12
    1aa2:	46bd      	mov	sp, r7
    1aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1aa8:	4770      	bx	lr

00001aaa <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    1aaa:	b480      	push	{r7}
    1aac:	b083      	sub	sp, #12
    1aae:	af00      	add	r7, sp, #0
    1ab0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    1ab2:	687b      	ldr	r3, [r7, #4]
    1ab4:	6a1b      	ldr	r3, [r3, #32]
    1ab6:	f043 0201 	orr.w	r2, r3, #1
    1aba:	687b      	ldr	r3, [r7, #4]
    1abc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1abe:	bf00      	nop
    1ac0:	370c      	adds	r7, #12
    1ac2:	46bd      	mov	sp, r7
    1ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac8:	4770      	bx	lr

00001aca <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    1aca:	b480      	push	{r7}
    1acc:	b083      	sub	sp, #12
    1ace:	af00      	add	r7, sp, #0
    1ad0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    1ad2:	687b      	ldr	r3, [r7, #4]
    1ad4:	6a1b      	ldr	r3, [r3, #32]
    1ad6:	f043 0202 	orr.w	r2, r3, #2
    1ada:	687b      	ldr	r3, [r7, #4]
    1adc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1ade:	bf00      	nop
    1ae0:	370c      	adds	r7, #12
    1ae2:	46bd      	mov	sp, r7
    1ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ae8:	4770      	bx	lr

00001aea <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    1aea:	b480      	push	{r7}
    1aec:	b083      	sub	sp, #12
    1aee:	af00      	add	r7, sp, #0
    1af0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    1af2:	687b      	ldr	r3, [r7, #4]
    1af4:	6a1b      	ldr	r3, [r3, #32]
    1af6:	f043 0204 	orr.w	r2, r3, #4
    1afa:	687b      	ldr	r3, [r7, #4]
    1afc:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1afe:	bf00      	nop
    1b00:	370c      	adds	r7, #12
    1b02:	46bd      	mov	sp, r7
    1b04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b08:	4770      	bx	lr

00001b0a <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    1b0a:	b480      	push	{r7}
    1b0c:	b083      	sub	sp, #12
    1b0e:	af00      	add	r7, sp, #0
    1b10:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    1b12:	687b      	ldr	r3, [r7, #4]
    1b14:	6a1b      	ldr	r3, [r3, #32]
    1b16:	f043 0208 	orr.w	r2, r3, #8
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1b1e:	bf00      	nop
    1b20:	370c      	adds	r7, #12
    1b22:	46bd      	mov	sp, r7
    1b24:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b28:	4770      	bx	lr

00001b2a <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    1b2a:	b480      	push	{r7}
    1b2c:	b083      	sub	sp, #12
    1b2e:	af00      	add	r7, sp, #0
    1b30:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    1b32:	687b      	ldr	r3, [r7, #4]
    1b34:	6a1b      	ldr	r3, [r3, #32]
    1b36:	f043 0220 	orr.w	r2, r3, #32
    1b3a:	687b      	ldr	r3, [r7, #4]
    1b3c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1b3e:	bf00      	nop
    1b40:	370c      	adds	r7, #12
    1b42:	46bd      	mov	sp, r7
    1b44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b48:	4770      	bx	lr

00001b4a <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    1b4a:	b480      	push	{r7}
    1b4c:	b083      	sub	sp, #12
    1b4e:	af00      	add	r7, sp, #0
    1b50:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	6a1b      	ldr	r3, [r3, #32]
    1b56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    1b5a:	687b      	ldr	r3, [r7, #4]
    1b5c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1b5e:	bf00      	nop
    1b60:	370c      	adds	r7, #12
    1b62:	46bd      	mov	sp, r7
    1b64:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b68:	4770      	bx	lr

00001b6a <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1b6a:	b480      	push	{r7}
    1b6c:	b085      	sub	sp, #20
    1b6e:	af00      	add	r7, sp, #0
    1b70:	60f8      	str	r0, [r7, #12]
    1b72:	460b      	mov	r3, r1
    1b74:	607a      	str	r2, [r7, #4]
    1b76:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1b78:	7afb      	ldrb	r3, [r7, #11]
    1b7a:	68fa      	ldr	r2, [r7, #12]
    1b7c:	01db      	lsls	r3, r3, #7
    1b7e:	4413      	add	r3, r2
    1b80:	3308      	adds	r3, #8
    1b82:	687a      	ldr	r2, [r7, #4]
    1b84:	601a      	str	r2, [r3, #0]
}
    1b86:	bf00      	nop
    1b88:	3714      	adds	r7, #20
    1b8a:	46bd      	mov	sp, r7
    1b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b90:	4770      	bx	lr

00001b92 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    1b92:	b480      	push	{r7}
    1b94:	b085      	sub	sp, #20
    1b96:	af00      	add	r7, sp, #0
    1b98:	60f8      	str	r0, [r7, #12]
    1b9a:	460b      	mov	r3, r1
    1b9c:	607a      	str	r2, [r7, #4]
    1b9e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1ba0:	7afb      	ldrb	r3, [r7, #11]
    1ba2:	68fa      	ldr	r2, [r7, #12]
    1ba4:	01db      	lsls	r3, r3, #7
    1ba6:	4413      	add	r3, r2
    1ba8:	3304      	adds	r3, #4
    1baa:	687a      	ldr	r2, [r7, #4]
    1bac:	601a      	str	r2, [r3, #0]
}
    1bae:	bf00      	nop
    1bb0:	3714      	adds	r7, #20
    1bb2:	46bd      	mov	sp, r7
    1bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb8:	4770      	bx	lr

00001bba <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1bba:	b480      	push	{r7}
    1bbc:	b085      	sub	sp, #20
    1bbe:	af00      	add	r7, sp, #0
    1bc0:	60f8      	str	r0, [r7, #12]
    1bc2:	460b      	mov	r3, r1
    1bc4:	607a      	str	r2, [r7, #4]
    1bc6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1bc8:	7afb      	ldrb	r3, [r7, #11]
    1bca:	68fa      	ldr	r2, [r7, #12]
    1bcc:	01db      	lsls	r3, r3, #7
    1bce:	4413      	add	r3, r2
    1bd0:	3318      	adds	r3, #24
    1bd2:	687a      	ldr	r2, [r7, #4]
    1bd4:	601a      	str	r2, [r3, #0]
}
    1bd6:	bf00      	nop
    1bd8:	3714      	adds	r7, #20
    1bda:	46bd      	mov	sp, r7
    1bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1be0:	4770      	bx	lr

00001be2 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1be2:	b480      	push	{r7}
    1be4:	b085      	sub	sp, #20
    1be6:	af00      	add	r7, sp, #0
    1be8:	60f8      	str	r0, [r7, #12]
    1bea:	460b      	mov	r3, r1
    1bec:	607a      	str	r2, [r7, #4]
    1bee:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1bf0:	7afb      	ldrb	r3, [r7, #11]
    1bf2:	68fa      	ldr	r2, [r7, #12]
    1bf4:	01db      	lsls	r3, r3, #7
    1bf6:	4413      	add	r3, r2
    1bf8:	3314      	adds	r3, #20
    1bfa:	687a      	ldr	r2, [r7, #4]
    1bfc:	601a      	str	r2, [r3, #0]
}
    1bfe:	bf00      	nop
    1c00:	3714      	adds	r7, #20
    1c02:	46bd      	mov	sp, r7
    1c04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c08:	4770      	bx	lr

00001c0a <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    1c0a:	b480      	push	{r7}
    1c0c:	b085      	sub	sp, #20
    1c0e:	af00      	add	r7, sp, #0
    1c10:	6078      	str	r0, [r7, #4]
    1c12:	4608      	mov	r0, r1
    1c14:	4611      	mov	r1, r2
    1c16:	461a      	mov	r2, r3
    1c18:	4603      	mov	r3, r0
    1c1a:	70fb      	strb	r3, [r7, #3]
    1c1c:	460b      	mov	r3, r1
    1c1e:	70bb      	strb	r3, [r7, #2]
    1c20:	4613      	mov	r3, r2
    1c22:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1c24:	78fa      	ldrb	r2, [r7, #3]
    1c26:	78bb      	ldrb	r3, [r7, #2]
    1c28:	6879      	ldr	r1, [r7, #4]
    1c2a:	01d2      	lsls	r2, r2, #7
    1c2c:	440a      	add	r2, r1
    1c2e:	4413      	add	r3, r2
    1c30:	3330      	adds	r3, #48	; 0x30
    1c32:	781b      	ldrb	r3, [r3, #0]
    1c34:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1c36:	7bfb      	ldrb	r3, [r7, #15]
    1c38:	f023 030f 	bic.w	r3, r3, #15
    1c3c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    1c3e:	787b      	ldrb	r3, [r7, #1]
    1c40:	f003 030f 	and.w	r3, r3, #15
    1c44:	b2da      	uxtb	r2, r3
    1c46:	7bfb      	ldrb	r3, [r7, #15]
    1c48:	4313      	orrs	r3, r2
    1c4a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1c4c:	78fa      	ldrb	r2, [r7, #3]
    1c4e:	78bb      	ldrb	r3, [r7, #2]
    1c50:	6879      	ldr	r1, [r7, #4]
    1c52:	01d2      	lsls	r2, r2, #7
    1c54:	440a      	add	r2, r1
    1c56:	4413      	add	r3, r2
    1c58:	3330      	adds	r3, #48	; 0x30
    1c5a:	7bfa      	ldrb	r2, [r7, #15]
    1c5c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1c5e:	bf00      	nop
    1c60:	3714      	adds	r7, #20
    1c62:	46bd      	mov	sp, r7
    1c64:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c68:	4770      	bx	lr

00001c6a <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    1c6a:	b480      	push	{r7}
    1c6c:	b085      	sub	sp, #20
    1c6e:	af00      	add	r7, sp, #0
    1c70:	6078      	str	r0, [r7, #4]
    1c72:	4608      	mov	r0, r1
    1c74:	4611      	mov	r1, r2
    1c76:	461a      	mov	r2, r3
    1c78:	4603      	mov	r3, r0
    1c7a:	70fb      	strb	r3, [r7, #3]
    1c7c:	460b      	mov	r3, r1
    1c7e:	70bb      	strb	r3, [r7, #2]
    1c80:	4613      	mov	r3, r2
    1c82:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1c84:	78fa      	ldrb	r2, [r7, #3]
    1c86:	78bb      	ldrb	r3, [r7, #2]
    1c88:	6879      	ldr	r1, [r7, #4]
    1c8a:	01d2      	lsls	r2, r2, #7
    1c8c:	440a      	add	r2, r1
    1c8e:	4413      	add	r3, r2
    1c90:	3330      	adds	r3, #48	; 0x30
    1c92:	781b      	ldrb	r3, [r3, #0]
    1c94:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1c96:	7bfb      	ldrb	r3, [r7, #15]
    1c98:	f003 030f 	and.w	r3, r3, #15
    1c9c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    1c9e:	787b      	ldrb	r3, [r7, #1]
    1ca0:	011b      	lsls	r3, r3, #4
    1ca2:	b2da      	uxtb	r2, r3
    1ca4:	7bfb      	ldrb	r3, [r7, #15]
    1ca6:	4313      	orrs	r3, r2
    1ca8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1caa:	78fa      	ldrb	r2, [r7, #3]
    1cac:	78bb      	ldrb	r3, [r7, #2]
    1cae:	6879      	ldr	r1, [r7, #4]
    1cb0:	01d2      	lsls	r2, r2, #7
    1cb2:	440a      	add	r2, r1
    1cb4:	4413      	add	r3, r2
    1cb6:	3330      	adds	r3, #48	; 0x30
    1cb8:	7bfa      	ldrb	r2, [r7, #15]
    1cba:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1cbc:	bf00      	nop
    1cbe:	3714      	adds	r7, #20
    1cc0:	46bd      	mov	sp, r7
    1cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cc6:	4770      	bx	lr

00001cc8 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    1cc8:	b480      	push	{r7}
    1cca:	b085      	sub	sp, #20
    1ccc:	af00      	add	r7, sp, #0
    1cce:	6078      	str	r0, [r7, #4]
    1cd0:	4608      	mov	r0, r1
    1cd2:	4611      	mov	r1, r2
    1cd4:	461a      	mov	r2, r3
    1cd6:	4603      	mov	r3, r0
    1cd8:	70fb      	strb	r3, [r7, #3]
    1cda:	460b      	mov	r3, r1
    1cdc:	70bb      	strb	r3, [r7, #2]
    1cde:	4613      	mov	r3, r2
    1ce0:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1ce2:	78fa      	ldrb	r2, [r7, #3]
    1ce4:	78bb      	ldrb	r3, [r7, #2]
    1ce6:	6879      	ldr	r1, [r7, #4]
    1ce8:	01d2      	lsls	r2, r2, #7
    1cea:	440a      	add	r2, r1
    1cec:	4413      	add	r3, r2
    1cee:	3340      	adds	r3, #64	; 0x40
    1cf0:	781b      	ldrb	r3, [r3, #0]
    1cf2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1cf4:	7bfb      	ldrb	r3, [r7, #15]
    1cf6:	f023 0301 	bic.w	r3, r3, #1
    1cfa:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1cfc:	787a      	ldrb	r2, [r7, #1]
    1cfe:	7bfb      	ldrb	r3, [r7, #15]
    1d00:	4313      	orrs	r3, r2
    1d02:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d04:	78fa      	ldrb	r2, [r7, #3]
    1d06:	78bb      	ldrb	r3, [r7, #2]
    1d08:	6879      	ldr	r1, [r7, #4]
    1d0a:	01d2      	lsls	r2, r2, #7
    1d0c:	440a      	add	r2, r1
    1d0e:	4413      	add	r3, r2
    1d10:	3340      	adds	r3, #64	; 0x40
    1d12:	7bfa      	ldrb	r2, [r7, #15]
    1d14:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1d16:	bf00      	nop
    1d18:	3714      	adds	r7, #20
    1d1a:	46bd      	mov	sp, r7
    1d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d20:	4770      	bx	lr

00001d22 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1d22:	b490      	push	{r4, r7}
    1d24:	b082      	sub	sp, #8
    1d26:	af00      	add	r7, sp, #0
    1d28:	6078      	str	r0, [r7, #4]
    1d2a:	460b      	mov	r3, r1
    1d2c:	70fb      	strb	r3, [r7, #3]
    1d2e:	4613      	mov	r3, r2
    1d30:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1d32:	78fa      	ldrb	r2, [r7, #3]
    1d34:	78bb      	ldrb	r3, [r7, #2]
    1d36:	78f8      	ldrb	r0, [r7, #3]
    1d38:	78b9      	ldrb	r1, [r7, #2]
    1d3a:	687c      	ldr	r4, [r7, #4]
    1d3c:	01c0      	lsls	r0, r0, #7
    1d3e:	4420      	add	r0, r4
    1d40:	4401      	add	r1, r0
    1d42:	3140      	adds	r1, #64	; 0x40
    1d44:	7809      	ldrb	r1, [r1, #0]
    1d46:	b2c9      	uxtb	r1, r1
    1d48:	f041 0104 	orr.w	r1, r1, #4
    1d4c:	b2c8      	uxtb	r0, r1
    1d4e:	6879      	ldr	r1, [r7, #4]
    1d50:	01d2      	lsls	r2, r2, #7
    1d52:	440a      	add	r2, r1
    1d54:	4413      	add	r3, r2
    1d56:	3340      	adds	r3, #64	; 0x40
    1d58:	4602      	mov	r2, r0
    1d5a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1d5c:	bf00      	nop
    1d5e:	3708      	adds	r7, #8
    1d60:	46bd      	mov	sp, r7
    1d62:	bc90      	pop	{r4, r7}
    1d64:	4770      	bx	lr

00001d66 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1d66:	b490      	push	{r4, r7}
    1d68:	b082      	sub	sp, #8
    1d6a:	af00      	add	r7, sp, #0
    1d6c:	6078      	str	r0, [r7, #4]
    1d6e:	460b      	mov	r3, r1
    1d70:	70fb      	strb	r3, [r7, #3]
    1d72:	4613      	mov	r3, r2
    1d74:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1d76:	78fa      	ldrb	r2, [r7, #3]
    1d78:	78bb      	ldrb	r3, [r7, #2]
    1d7a:	78f8      	ldrb	r0, [r7, #3]
    1d7c:	78b9      	ldrb	r1, [r7, #2]
    1d7e:	687c      	ldr	r4, [r7, #4]
    1d80:	01c0      	lsls	r0, r0, #7
    1d82:	4420      	add	r0, r4
    1d84:	4401      	add	r1, r0
    1d86:	3140      	adds	r1, #64	; 0x40
    1d88:	7809      	ldrb	r1, [r1, #0]
    1d8a:	b2c9      	uxtb	r1, r1
    1d8c:	f021 0104 	bic.w	r1, r1, #4
    1d90:	b2c8      	uxtb	r0, r1
    1d92:	6879      	ldr	r1, [r7, #4]
    1d94:	01d2      	lsls	r2, r2, #7
    1d96:	440a      	add	r2, r1
    1d98:	4413      	add	r3, r2
    1d9a:	3340      	adds	r3, #64	; 0x40
    1d9c:	4602      	mov	r2, r0
    1d9e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1da0:	bf00      	nop
    1da2:	3708      	adds	r7, #8
    1da4:	46bd      	mov	sp, r7
    1da6:	bc90      	pop	{r4, r7}
    1da8:	4770      	bx	lr

00001daa <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    1daa:	b480      	push	{r7}
    1dac:	b085      	sub	sp, #20
    1dae:	af00      	add	r7, sp, #0
    1db0:	60f8      	str	r0, [r7, #12]
    1db2:	460b      	mov	r3, r1
    1db4:	607a      	str	r2, [r7, #4]
    1db6:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1db8:	7afb      	ldrb	r3, [r7, #11]
    1dba:	68fa      	ldr	r2, [r7, #12]
    1dbc:	01db      	lsls	r3, r3, #7
    1dbe:	4413      	add	r3, r2
    1dc0:	3328      	adds	r3, #40	; 0x28
    1dc2:	687a      	ldr	r2, [r7, #4]
    1dc4:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1dc6:	bf00      	nop
    1dc8:	3714      	adds	r7, #20
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
	...

00001dd4 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    1dd4:	b580      	push	{r7, lr}
    1dd6:	b082      	sub	sp, #8
    1dd8:	af00      	add	r7, sp, #0
    1dda:	4603      	mov	r3, r0
    1ddc:	6039      	str	r1, [r7, #0]
    1dde:	71fb      	strb	r3, [r7, #7]
    1de0:	4613      	mov	r3, r2
    1de2:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    1de4:	79bb      	ldrb	r3, [r7, #6]
    1de6:	2b01      	cmp	r3, #1
    1de8:	d01c      	beq.n	1e24 <_gpio_set_direction+0x50>
    1dea:	2b02      	cmp	r3, #2
    1dec:	d037      	beq.n	1e5e <_gpio_set_direction+0x8a>
    1dee:	2b00      	cmp	r3, #0
    1df0:	d14e      	bne.n	1e90 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1df2:	79fb      	ldrb	r3, [r7, #7]
    1df4:	683a      	ldr	r2, [r7, #0]
    1df6:	4619      	mov	r1, r3
    1df8:	482a      	ldr	r0, [pc, #168]	; (1ea4 <_gpio_set_direction+0xd0>)
    1dfa:	4b2b      	ldr	r3, [pc, #172]	; (1ea8 <_gpio_set_direction+0xd4>)
    1dfc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1dfe:	683b      	ldr	r3, [r7, #0]
    1e00:	b29b      	uxth	r3, r3
    1e02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1e06:	79fb      	ldrb	r3, [r7, #7]
    1e08:	4619      	mov	r1, r3
    1e0a:	4826      	ldr	r0, [pc, #152]	; (1ea4 <_gpio_set_direction+0xd0>)
    1e0c:	4b27      	ldr	r3, [pc, #156]	; (1eac <_gpio_set_direction+0xd8>)
    1e0e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1e10:	683b      	ldr	r3, [r7, #0]
    1e12:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1e14:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1e18:	79fb      	ldrb	r3, [r7, #7]
    1e1a:	4619      	mov	r1, r3
    1e1c:	4821      	ldr	r0, [pc, #132]	; (1ea4 <_gpio_set_direction+0xd0>)
    1e1e:	4b23      	ldr	r3, [pc, #140]	; (1eac <_gpio_set_direction+0xd8>)
    1e20:	4798      	blx	r3
		break;
    1e22:	e03a      	b.n	1e9a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1e24:	79fb      	ldrb	r3, [r7, #7]
    1e26:	683a      	ldr	r2, [r7, #0]
    1e28:	4619      	mov	r1, r3
    1e2a:	481e      	ldr	r0, [pc, #120]	; (1ea4 <_gpio_set_direction+0xd0>)
    1e2c:	4b1e      	ldr	r3, [pc, #120]	; (1ea8 <_gpio_set_direction+0xd4>)
    1e2e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1e30:	683b      	ldr	r3, [r7, #0]
    1e32:	b29b      	uxth	r3, r3
    1e34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    1e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1e3c:	79f9      	ldrb	r1, [r7, #7]
    1e3e:	461a      	mov	r2, r3
    1e40:	4818      	ldr	r0, [pc, #96]	; (1ea4 <_gpio_set_direction+0xd0>)
    1e42:	4b1a      	ldr	r3, [pc, #104]	; (1eac <_gpio_set_direction+0xd8>)
    1e44:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    1e46:	683b      	ldr	r3, [r7, #0]
    1e48:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    1e4a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    1e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1e52:	79f9      	ldrb	r1, [r7, #7]
    1e54:	461a      	mov	r2, r3
    1e56:	4813      	ldr	r0, [pc, #76]	; (1ea4 <_gpio_set_direction+0xd0>)
    1e58:	4b14      	ldr	r3, [pc, #80]	; (1eac <_gpio_set_direction+0xd8>)
    1e5a:	4798      	blx	r3
		break;
    1e5c:	e01d      	b.n	1e9a <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    1e5e:	79fb      	ldrb	r3, [r7, #7]
    1e60:	683a      	ldr	r2, [r7, #0]
    1e62:	4619      	mov	r1, r3
    1e64:	480f      	ldr	r0, [pc, #60]	; (1ea4 <_gpio_set_direction+0xd0>)
    1e66:	4b12      	ldr	r3, [pc, #72]	; (1eb0 <_gpio_set_direction+0xdc>)
    1e68:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1e6a:	683b      	ldr	r3, [r7, #0]
    1e6c:	b29b      	uxth	r3, r3
    1e6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1e72:	79fb      	ldrb	r3, [r7, #7]
    1e74:	4619      	mov	r1, r3
    1e76:	480b      	ldr	r0, [pc, #44]	; (1ea4 <_gpio_set_direction+0xd0>)
    1e78:	4b0c      	ldr	r3, [pc, #48]	; (1eac <_gpio_set_direction+0xd8>)
    1e7a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1e7c:	683b      	ldr	r3, [r7, #0]
    1e7e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1e80:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1e84:	79fb      	ldrb	r3, [r7, #7]
    1e86:	4619      	mov	r1, r3
    1e88:	4806      	ldr	r0, [pc, #24]	; (1ea4 <_gpio_set_direction+0xd0>)
    1e8a:	4b08      	ldr	r3, [pc, #32]	; (1eac <_gpio_set_direction+0xd8>)
    1e8c:	4798      	blx	r3
		break;
    1e8e:	e004      	b.n	1e9a <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    1e90:	2246      	movs	r2, #70	; 0x46
    1e92:	4908      	ldr	r1, [pc, #32]	; (1eb4 <_gpio_set_direction+0xe0>)
    1e94:	2000      	movs	r0, #0
    1e96:	4b08      	ldr	r3, [pc, #32]	; (1eb8 <_gpio_set_direction+0xe4>)
    1e98:	4798      	blx	r3
	}
}
    1e9a:	bf00      	nop
    1e9c:	3708      	adds	r7, #8
    1e9e:	46bd      	mov	sp, r7
    1ea0:	bd80      	pop	{r7, pc}
    1ea2:	bf00      	nop
    1ea4:	41008000 	.word	0x41008000
    1ea8:	00001b93 	.word	0x00001b93
    1eac:	00001dab 	.word	0x00001dab
    1eb0:	00001b6b 	.word	0x00001b6b
    1eb4:	0001b10c 	.word	0x0001b10c
    1eb8:	00004cdd 	.word	0x00004cdd

00001ebc <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1ebc:	b580      	push	{r7, lr}
    1ebe:	b082      	sub	sp, #8
    1ec0:	af00      	add	r7, sp, #0
    1ec2:	4603      	mov	r3, r0
    1ec4:	6039      	str	r1, [r7, #0]
    1ec6:	71fb      	strb	r3, [r7, #7]
    1ec8:	4613      	mov	r3, r2
    1eca:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1ecc:	79bb      	ldrb	r3, [r7, #6]
    1ece:	2b00      	cmp	r3, #0
    1ed0:	d006      	beq.n	1ee0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    1ed2:	79fb      	ldrb	r3, [r7, #7]
    1ed4:	683a      	ldr	r2, [r7, #0]
    1ed6:	4619      	mov	r1, r3
    1ed8:	4806      	ldr	r0, [pc, #24]	; (1ef4 <_gpio_set_level+0x38>)
    1eda:	4b07      	ldr	r3, [pc, #28]	; (1ef8 <_gpio_set_level+0x3c>)
    1edc:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    1ede:	e005      	b.n	1eec <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1ee0:	79fb      	ldrb	r3, [r7, #7]
    1ee2:	683a      	ldr	r2, [r7, #0]
    1ee4:	4619      	mov	r1, r3
    1ee6:	4803      	ldr	r0, [pc, #12]	; (1ef4 <_gpio_set_level+0x38>)
    1ee8:	4b04      	ldr	r3, [pc, #16]	; (1efc <_gpio_set_level+0x40>)
    1eea:	4798      	blx	r3
}
    1eec:	bf00      	nop
    1eee:	3708      	adds	r7, #8
    1ef0:	46bd      	mov	sp, r7
    1ef2:	bd80      	pop	{r7, pc}
    1ef4:	41008000 	.word	0x41008000
    1ef8:	00001bbb 	.word	0x00001bbb
    1efc:	00001be3 	.word	0x00001be3

00001f00 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    1f00:	b580      	push	{r7, lr}
    1f02:	b082      	sub	sp, #8
    1f04:	af00      	add	r7, sp, #0
    1f06:	4603      	mov	r3, r0
    1f08:	71fb      	strb	r3, [r7, #7]
    1f0a:	460b      	mov	r3, r1
    1f0c:	71bb      	strb	r3, [r7, #6]
    1f0e:	4613      	mov	r3, r2
    1f10:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    1f12:	797b      	ldrb	r3, [r7, #5]
    1f14:	2b01      	cmp	r3, #1
    1f16:	d00a      	beq.n	1f2e <_gpio_set_pin_pull_mode+0x2e>
    1f18:	2b02      	cmp	r3, #2
    1f1a:	d01f      	beq.n	1f5c <_gpio_set_pin_pull_mode+0x5c>
    1f1c:	2b00      	cmp	r3, #0
    1f1e:	d134      	bne.n	1f8a <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1f20:	79ba      	ldrb	r2, [r7, #6]
    1f22:	79fb      	ldrb	r3, [r7, #7]
    1f24:	4619      	mov	r1, r3
    1f26:	481e      	ldr	r0, [pc, #120]	; (1fa0 <_gpio_set_pin_pull_mode+0xa0>)
    1f28:	4b1e      	ldr	r3, [pc, #120]	; (1fa4 <_gpio_set_pin_pull_mode+0xa4>)
    1f2a:	4798      	blx	r3
		break;
    1f2c:	e033      	b.n	1f96 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1f2e:	79bb      	ldrb	r3, [r7, #6]
    1f30:	2201      	movs	r2, #1
    1f32:	409a      	lsls	r2, r3
    1f34:	79fb      	ldrb	r3, [r7, #7]
    1f36:	4619      	mov	r1, r3
    1f38:	4819      	ldr	r0, [pc, #100]	; (1fa0 <_gpio_set_pin_pull_mode+0xa0>)
    1f3a:	4b1b      	ldr	r3, [pc, #108]	; (1fa8 <_gpio_set_pin_pull_mode+0xa8>)
    1f3c:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1f3e:	79ba      	ldrb	r2, [r7, #6]
    1f40:	79fb      	ldrb	r3, [r7, #7]
    1f42:	4619      	mov	r1, r3
    1f44:	4816      	ldr	r0, [pc, #88]	; (1fa0 <_gpio_set_pin_pull_mode+0xa0>)
    1f46:	4b19      	ldr	r3, [pc, #100]	; (1fac <_gpio_set_pin_pull_mode+0xac>)
    1f48:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    1f4a:	79bb      	ldrb	r3, [r7, #6]
    1f4c:	2201      	movs	r2, #1
    1f4e:	409a      	lsls	r2, r3
    1f50:	79fb      	ldrb	r3, [r7, #7]
    1f52:	4619      	mov	r1, r3
    1f54:	4812      	ldr	r0, [pc, #72]	; (1fa0 <_gpio_set_pin_pull_mode+0xa0>)
    1f56:	4b16      	ldr	r3, [pc, #88]	; (1fb0 <_gpio_set_pin_pull_mode+0xb0>)
    1f58:	4798      	blx	r3
		break;
    1f5a:	e01c      	b.n	1f96 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1f5c:	79bb      	ldrb	r3, [r7, #6]
    1f5e:	2201      	movs	r2, #1
    1f60:	409a      	lsls	r2, r3
    1f62:	79fb      	ldrb	r3, [r7, #7]
    1f64:	4619      	mov	r1, r3
    1f66:	480e      	ldr	r0, [pc, #56]	; (1fa0 <_gpio_set_pin_pull_mode+0xa0>)
    1f68:	4b0f      	ldr	r3, [pc, #60]	; (1fa8 <_gpio_set_pin_pull_mode+0xa8>)
    1f6a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1f6c:	79ba      	ldrb	r2, [r7, #6]
    1f6e:	79fb      	ldrb	r3, [r7, #7]
    1f70:	4619      	mov	r1, r3
    1f72:	480b      	ldr	r0, [pc, #44]	; (1fa0 <_gpio_set_pin_pull_mode+0xa0>)
    1f74:	4b0d      	ldr	r3, [pc, #52]	; (1fac <_gpio_set_pin_pull_mode+0xac>)
    1f76:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    1f78:	79bb      	ldrb	r3, [r7, #6]
    1f7a:	2201      	movs	r2, #1
    1f7c:	409a      	lsls	r2, r3
    1f7e:	79fb      	ldrb	r3, [r7, #7]
    1f80:	4619      	mov	r1, r3
    1f82:	4807      	ldr	r0, [pc, #28]	; (1fa0 <_gpio_set_pin_pull_mode+0xa0>)
    1f84:	4b0b      	ldr	r3, [pc, #44]	; (1fb4 <_gpio_set_pin_pull_mode+0xb4>)
    1f86:	4798      	blx	r3
		break;
    1f88:	e005      	b.n	1f96 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    1f8a:	2289      	movs	r2, #137	; 0x89
    1f8c:	490a      	ldr	r1, [pc, #40]	; (1fb8 <_gpio_set_pin_pull_mode+0xb8>)
    1f8e:	2000      	movs	r0, #0
    1f90:	4b0a      	ldr	r3, [pc, #40]	; (1fbc <_gpio_set_pin_pull_mode+0xbc>)
    1f92:	4798      	blx	r3
		break;
    1f94:	bf00      	nop
	}
}
    1f96:	bf00      	nop
    1f98:	3708      	adds	r7, #8
    1f9a:	46bd      	mov	sp, r7
    1f9c:	bd80      	pop	{r7, pc}
    1f9e:	bf00      	nop
    1fa0:	41008000 	.word	0x41008000
    1fa4:	00001d67 	.word	0x00001d67
    1fa8:	00001b93 	.word	0x00001b93
    1fac:	00001d23 	.word	0x00001d23
    1fb0:	00001bbb 	.word	0x00001bbb
    1fb4:	00001be3 	.word	0x00001be3
    1fb8:	0001b10c 	.word	0x0001b10c
    1fbc:	00004cdd 	.word	0x00004cdd

00001fc0 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1fc0:	b590      	push	{r4, r7, lr}
    1fc2:	b085      	sub	sp, #20
    1fc4:	af00      	add	r7, sp, #0
    1fc6:	6078      	str	r0, [r7, #4]
    1fc8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1fca:	687b      	ldr	r3, [r7, #4]
    1fcc:	095b      	lsrs	r3, r3, #5
    1fce:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    1fd0:	687b      	ldr	r3, [r7, #4]
    1fd2:	b2db      	uxtb	r3, r3
    1fd4:	f003 031f 	and.w	r3, r3, #31
    1fd8:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1fda:	683b      	ldr	r3, [r7, #0]
    1fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
    1fe0:	d106      	bne.n	1ff0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    1fe2:	7bba      	ldrb	r2, [r7, #14]
    1fe4:	7bf9      	ldrb	r1, [r7, #15]
    1fe6:	2300      	movs	r3, #0
    1fe8:	4812      	ldr	r0, [pc, #72]	; (2034 <_gpio_set_pin_function+0x74>)
    1fea:	4c13      	ldr	r4, [pc, #76]	; (2038 <_gpio_set_pin_function+0x78>)
    1fec:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    1fee:	e01d      	b.n	202c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1ff0:	7bba      	ldrb	r2, [r7, #14]
    1ff2:	7bf9      	ldrb	r1, [r7, #15]
    1ff4:	2301      	movs	r3, #1
    1ff6:	480f      	ldr	r0, [pc, #60]	; (2034 <_gpio_set_pin_function+0x74>)
    1ff8:	4c0f      	ldr	r4, [pc, #60]	; (2038 <_gpio_set_pin_function+0x78>)
    1ffa:	47a0      	blx	r4
		if (pin & 1) {
    1ffc:	7bbb      	ldrb	r3, [r7, #14]
    1ffe:	f003 0301 	and.w	r3, r3, #1
    2002:	2b00      	cmp	r3, #0
    2004:	d009      	beq.n	201a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    2006:	7bbb      	ldrb	r3, [r7, #14]
    2008:	085b      	lsrs	r3, r3, #1
    200a:	b2da      	uxtb	r2, r3
    200c:	683b      	ldr	r3, [r7, #0]
    200e:	b2db      	uxtb	r3, r3
    2010:	7bf9      	ldrb	r1, [r7, #15]
    2012:	4808      	ldr	r0, [pc, #32]	; (2034 <_gpio_set_pin_function+0x74>)
    2014:	4c09      	ldr	r4, [pc, #36]	; (203c <_gpio_set_pin_function+0x7c>)
    2016:	47a0      	blx	r4
}
    2018:	e008      	b.n	202c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    201a:	7bbb      	ldrb	r3, [r7, #14]
    201c:	085b      	lsrs	r3, r3, #1
    201e:	b2da      	uxtb	r2, r3
    2020:	683b      	ldr	r3, [r7, #0]
    2022:	b2db      	uxtb	r3, r3
    2024:	7bf9      	ldrb	r1, [r7, #15]
    2026:	4803      	ldr	r0, [pc, #12]	; (2034 <_gpio_set_pin_function+0x74>)
    2028:	4c05      	ldr	r4, [pc, #20]	; (2040 <_gpio_set_pin_function+0x80>)
    202a:	47a0      	blx	r4
}
    202c:	bf00      	nop
    202e:	3714      	adds	r7, #20
    2030:	46bd      	mov	sp, r7
    2032:	bd90      	pop	{r4, r7, pc}
    2034:	41008000 	.word	0x41008000
    2038:	00001cc9 	.word	0x00001cc9
    203c:	00001c6b 	.word	0x00001c6b
    2040:	00001c0b 	.word	0x00001c0b

00002044 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    2044:	b580      	push	{r7, lr}
    2046:	b082      	sub	sp, #8
    2048:	af00      	add	r7, sp, #0
    204a:	4603      	mov	r3, r0
    204c:	460a      	mov	r2, r1
    204e:	71fb      	strb	r3, [r7, #7]
    2050:	4613      	mov	r3, r2
    2052:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    2054:	79fb      	ldrb	r3, [r7, #7]
    2056:	095b      	lsrs	r3, r3, #5
    2058:	b2d8      	uxtb	r0, r3
    205a:	79fb      	ldrb	r3, [r7, #7]
    205c:	f003 031f 	and.w	r3, r3, #31
    2060:	b2db      	uxtb	r3, r3
    2062:	79ba      	ldrb	r2, [r7, #6]
    2064:	4619      	mov	r1, r3
    2066:	4b03      	ldr	r3, [pc, #12]	; (2074 <gpio_set_pin_pull_mode+0x30>)
    2068:	4798      	blx	r3
}
    206a:	bf00      	nop
    206c:	3708      	adds	r7, #8
    206e:	46bd      	mov	sp, r7
    2070:	bd80      	pop	{r7, pc}
    2072:	bf00      	nop
    2074:	00001f01 	.word	0x00001f01

00002078 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    2078:	b580      	push	{r7, lr}
    207a:	b082      	sub	sp, #8
    207c:	af00      	add	r7, sp, #0
    207e:	6078      	str	r0, [r7, #4]
    2080:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    2082:	6839      	ldr	r1, [r7, #0]
    2084:	6878      	ldr	r0, [r7, #4]
    2086:	4b03      	ldr	r3, [pc, #12]	; (2094 <gpio_set_pin_function+0x1c>)
    2088:	4798      	blx	r3
}
    208a:	bf00      	nop
    208c:	3708      	adds	r7, #8
    208e:	46bd      	mov	sp, r7
    2090:	bd80      	pop	{r7, pc}
    2092:	bf00      	nop
    2094:	00001fc1 	.word	0x00001fc1

00002098 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    2098:	b580      	push	{r7, lr}
    209a:	b082      	sub	sp, #8
    209c:	af00      	add	r7, sp, #0
    209e:	4603      	mov	r3, r0
    20a0:	460a      	mov	r2, r1
    20a2:	71fb      	strb	r3, [r7, #7]
    20a4:	4613      	mov	r3, r2
    20a6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    20a8:	79fb      	ldrb	r3, [r7, #7]
    20aa:	095b      	lsrs	r3, r3, #5
    20ac:	b2d8      	uxtb	r0, r3
    20ae:	79fb      	ldrb	r3, [r7, #7]
    20b0:	f003 031f 	and.w	r3, r3, #31
    20b4:	2201      	movs	r2, #1
    20b6:	fa02 f303 	lsl.w	r3, r2, r3
    20ba:	79ba      	ldrb	r2, [r7, #6]
    20bc:	4619      	mov	r1, r3
    20be:	4b03      	ldr	r3, [pc, #12]	; (20cc <gpio_set_pin_direction+0x34>)
    20c0:	4798      	blx	r3
}
    20c2:	bf00      	nop
    20c4:	3708      	adds	r7, #8
    20c6:	46bd      	mov	sp, r7
    20c8:	bd80      	pop	{r7, pc}
    20ca:	bf00      	nop
    20cc:	00001dd5 	.word	0x00001dd5

000020d0 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    20d0:	b580      	push	{r7, lr}
    20d2:	b082      	sub	sp, #8
    20d4:	af00      	add	r7, sp, #0
    20d6:	4603      	mov	r3, r0
    20d8:	460a      	mov	r2, r1
    20da:	71fb      	strb	r3, [r7, #7]
    20dc:	4613      	mov	r3, r2
    20de:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    20e0:	79fb      	ldrb	r3, [r7, #7]
    20e2:	095b      	lsrs	r3, r3, #5
    20e4:	b2d8      	uxtb	r0, r3
    20e6:	79fb      	ldrb	r3, [r7, #7]
    20e8:	f003 031f 	and.w	r3, r3, #31
    20ec:	2201      	movs	r2, #1
    20ee:	fa02 f303 	lsl.w	r3, r2, r3
    20f2:	79ba      	ldrb	r2, [r7, #6]
    20f4:	4619      	mov	r1, r3
    20f6:	4b03      	ldr	r3, [pc, #12]	; (2104 <gpio_set_pin_level+0x34>)
    20f8:	4798      	blx	r3
}
    20fa:	bf00      	nop
    20fc:	3708      	adds	r7, #8
    20fe:	46bd      	mov	sp, r7
    2100:	bd80      	pop	{r7, pc}
    2102:	bf00      	nop
    2104:	00001ebd 	.word	0x00001ebd

00002108 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    2108:	b580      	push	{r7, lr}
    210a:	af00      	add	r7, sp, #0
	_init_chip();
    210c:	4b01      	ldr	r3, [pc, #4]	; (2114 <init_mcu+0xc>)
    210e:	4798      	blx	r3
}
    2110:	bf00      	nop
    2112:	bd80      	pop	{r7, pc}
    2114:	00005f35 	.word	0x00005f35

00002118 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    2118:	b580      	push	{r7, lr}
    211a:	b082      	sub	sp, #8
    211c:	af00      	add	r7, sp, #0
    211e:	6078      	str	r0, [r7, #4]
    2120:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2b00      	cmp	r3, #0
    2126:	d004      	beq.n	2132 <wdt_init+0x1a>
    2128:	683b      	ldr	r3, [r7, #0]
    212a:	2b00      	cmp	r3, #0
    212c:	d001      	beq.n	2132 <wdt_init+0x1a>
    212e:	2301      	movs	r3, #1
    2130:	e000      	b.n	2134 <wdt_init+0x1c>
    2132:	2300      	movs	r3, #0
    2134:	f003 0301 	and.w	r3, r3, #1
    2138:	b2db      	uxtb	r3, r3
    213a:	2248      	movs	r2, #72	; 0x48
    213c:	4907      	ldr	r1, [pc, #28]	; (215c <wdt_init+0x44>)
    213e:	4618      	mov	r0, r3
    2140:	4b07      	ldr	r3, [pc, #28]	; (2160 <wdt_init+0x48>)
    2142:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    2144:	687b      	ldr	r3, [r7, #4]
    2146:	683a      	ldr	r2, [r7, #0]
    2148:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    214a:	687b      	ldr	r3, [r7, #4]
    214c:	4618      	mov	r0, r3
    214e:	4b05      	ldr	r3, [pc, #20]	; (2164 <wdt_init+0x4c>)
    2150:	4798      	blx	r3
    2152:	4603      	mov	r3, r0
}
    2154:	4618      	mov	r0, r3
    2156:	3708      	adds	r7, #8
    2158:	46bd      	mov	sp, r7
    215a:	bd80      	pop	{r7, pc}
    215c:	0001b128 	.word	0x0001b128
    2160:	00004cdd 	.word	0x00004cdd
    2164:	0000cb4d 	.word	0x0000cb4d

00002168 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    2168:	b580      	push	{r7, lr}
    216a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    216c:	4804      	ldr	r0, [pc, #16]	; (2180 <CRC_CALC_init+0x18>)
    216e:	4b05      	ldr	r3, [pc, #20]	; (2184 <CRC_CALC_init+0x1c>)
    2170:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    2172:	4905      	ldr	r1, [pc, #20]	; (2188 <CRC_CALC_init+0x20>)
    2174:	4805      	ldr	r0, [pc, #20]	; (218c <CRC_CALC_init+0x24>)
    2176:	4b06      	ldr	r3, [pc, #24]	; (2190 <CRC_CALC_init+0x28>)
    2178:	4798      	blx	r3
}
    217a:	bf00      	nop
    217c:	bd80      	pop	{r7, pc}
    217e:	bf00      	nop
    2180:	40000800 	.word	0x40000800
    2184:	0000196b 	.word	0x0000196b
    2188:	41002000 	.word	0x41002000
    218c:	2000e124 	.word	0x2000e124
    2190:	00003601 	.word	0x00003601

00002194 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    2194:	b580      	push	{r7, lr}
    2196:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2198:	2244      	movs	r2, #68	; 0x44
    219a:	2104      	movs	r1, #4
    219c:	4845      	ldr	r0, [pc, #276]	; (22b4 <EXTERNAL_IRQ_0_init+0x120>)
    219e:	4b46      	ldr	r3, [pc, #280]	; (22b8 <EXTERNAL_IRQ_0_init+0x124>)
    21a0:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    21a2:	4846      	ldr	r0, [pc, #280]	; (22bc <EXTERNAL_IRQ_0_init+0x128>)
    21a4:	4b46      	ldr	r3, [pc, #280]	; (22c0 <EXTERNAL_IRQ_0_init+0x12c>)
    21a6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    21a8:	2101      	movs	r1, #1
    21aa:	2040      	movs	r0, #64	; 0x40
    21ac:	4b45      	ldr	r3, [pc, #276]	; (22c4 <EXTERNAL_IRQ_0_init+0x130>)
    21ae:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    21b0:	2100      	movs	r1, #0
    21b2:	2040      	movs	r0, #64	; 0x40
    21b4:	4b44      	ldr	r3, [pc, #272]	; (22c8 <EXTERNAL_IRQ_0_init+0x134>)
    21b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    21b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    21bc:	2040      	movs	r0, #64	; 0x40
    21be:	4b43      	ldr	r3, [pc, #268]	; (22cc <EXTERNAL_IRQ_0_init+0x138>)
    21c0:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    21c2:	2101      	movs	r1, #1
    21c4:	2021      	movs	r0, #33	; 0x21
    21c6:	4b3f      	ldr	r3, [pc, #252]	; (22c4 <EXTERNAL_IRQ_0_init+0x130>)
    21c8:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    21ca:	2100      	movs	r1, #0
    21cc:	2021      	movs	r0, #33	; 0x21
    21ce:	4b3e      	ldr	r3, [pc, #248]	; (22c8 <EXTERNAL_IRQ_0_init+0x134>)
    21d0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    21d2:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    21d6:	2021      	movs	r0, #33	; 0x21
    21d8:	4b3c      	ldr	r3, [pc, #240]	; (22cc <EXTERNAL_IRQ_0_init+0x138>)
    21da:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    21dc:	2101      	movs	r1, #1
    21de:	2003      	movs	r0, #3
    21e0:	4b38      	ldr	r3, [pc, #224]	; (22c4 <EXTERNAL_IRQ_0_init+0x130>)
    21e2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    21e4:	2102      	movs	r1, #2
    21e6:	2003      	movs	r0, #3
    21e8:	4b37      	ldr	r3, [pc, #220]	; (22c8 <EXTERNAL_IRQ_0_init+0x134>)
    21ea:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    21ec:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    21f0:	2003      	movs	r0, #3
    21f2:	4b36      	ldr	r3, [pc, #216]	; (22cc <EXTERNAL_IRQ_0_init+0x138>)
    21f4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    21f6:	2101      	movs	r1, #1
    21f8:	2004      	movs	r0, #4
    21fa:	4b32      	ldr	r3, [pc, #200]	; (22c4 <EXTERNAL_IRQ_0_init+0x130>)
    21fc:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    21fe:	2102      	movs	r1, #2
    2200:	2004      	movs	r0, #4
    2202:	4b31      	ldr	r3, [pc, #196]	; (22c8 <EXTERNAL_IRQ_0_init+0x134>)
    2204:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    2206:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    220a:	2004      	movs	r0, #4
    220c:	4b2f      	ldr	r3, [pc, #188]	; (22cc <EXTERNAL_IRQ_0_init+0x138>)
    220e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    2210:	2101      	movs	r1, #1
    2212:	2005      	movs	r0, #5
    2214:	4b2b      	ldr	r3, [pc, #172]	; (22c4 <EXTERNAL_IRQ_0_init+0x130>)
    2216:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    2218:	2102      	movs	r1, #2
    221a:	2005      	movs	r0, #5
    221c:	4b2a      	ldr	r3, [pc, #168]	; (22c8 <EXTERNAL_IRQ_0_init+0x134>)
    221e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    2220:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    2224:	2005      	movs	r0, #5
    2226:	4b29      	ldr	r3, [pc, #164]	; (22cc <EXTERNAL_IRQ_0_init+0x138>)
    2228:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    222a:	2101      	movs	r1, #1
    222c:	2056      	movs	r0, #86	; 0x56
    222e:	4b25      	ldr	r3, [pc, #148]	; (22c4 <EXTERNAL_IRQ_0_init+0x130>)
    2230:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    2232:	2102      	movs	r1, #2
    2234:	2056      	movs	r0, #86	; 0x56
    2236:	4b24      	ldr	r3, [pc, #144]	; (22c8 <EXTERNAL_IRQ_0_init+0x134>)
    2238:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    223a:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    223e:	2056      	movs	r0, #86	; 0x56
    2240:	4b22      	ldr	r3, [pc, #136]	; (22cc <EXTERNAL_IRQ_0_init+0x138>)
    2242:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    2244:	2101      	movs	r1, #1
    2246:	2057      	movs	r0, #87	; 0x57
    2248:	4b1e      	ldr	r3, [pc, #120]	; (22c4 <EXTERNAL_IRQ_0_init+0x130>)
    224a:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    224c:	2102      	movs	r1, #2
    224e:	2057      	movs	r0, #87	; 0x57
    2250:	4b1d      	ldr	r3, [pc, #116]	; (22c8 <EXTERNAL_IRQ_0_init+0x134>)
    2252:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    2254:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    2258:	2057      	movs	r0, #87	; 0x57
    225a:	4b1c      	ldr	r3, [pc, #112]	; (22cc <EXTERNAL_IRQ_0_init+0x138>)
    225c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    225e:	2101      	movs	r1, #1
    2260:	2028      	movs	r0, #40	; 0x28
    2262:	4b18      	ldr	r3, [pc, #96]	; (22c4 <EXTERNAL_IRQ_0_init+0x130>)
    2264:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    2266:	2100      	movs	r1, #0
    2268:	2028      	movs	r0, #40	; 0x28
    226a:	4b17      	ldr	r3, [pc, #92]	; (22c8 <EXTERNAL_IRQ_0_init+0x134>)
    226c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    226e:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    2272:	2028      	movs	r0, #40	; 0x28
    2274:	4b15      	ldr	r3, [pc, #84]	; (22cc <EXTERNAL_IRQ_0_init+0x138>)
    2276:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    2278:	2101      	movs	r1, #1
    227a:	2029      	movs	r0, #41	; 0x29
    227c:	4b11      	ldr	r3, [pc, #68]	; (22c4 <EXTERNAL_IRQ_0_init+0x130>)
    227e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    2280:	2100      	movs	r1, #0
    2282:	2029      	movs	r0, #41	; 0x29
    2284:	4b10      	ldr	r3, [pc, #64]	; (22c8 <EXTERNAL_IRQ_0_init+0x134>)
    2286:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    2288:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    228c:	2029      	movs	r0, #41	; 0x29
    228e:	4b0f      	ldr	r3, [pc, #60]	; (22cc <EXTERNAL_IRQ_0_init+0x138>)
    2290:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC10, GPIO_DIRECTION_IN);
    2292:	2101      	movs	r1, #1
    2294:	204a      	movs	r0, #74	; 0x4a
    2296:	4b0b      	ldr	r3, [pc, #44]	; (22c4 <EXTERNAL_IRQ_0_init+0x130>)
    2298:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC10,
    229a:	2100      	movs	r1, #0
    229c:	204a      	movs	r0, #74	; 0x4a
    229e:	4b0a      	ldr	r3, [pc, #40]	; (22c8 <EXTERNAL_IRQ_0_init+0x134>)
    22a0:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC10, PINMUX_PC10A_EIC_EXTINT10);
    22a2:	f44f 0194 	mov.w	r1, #4849664	; 0x4a0000
    22a6:	204a      	movs	r0, #74	; 0x4a
    22a8:	4b08      	ldr	r3, [pc, #32]	; (22cc <EXTERNAL_IRQ_0_init+0x138>)
    22aa:	4798      	blx	r3

	ext_irq_init();
    22ac:	4b08      	ldr	r3, [pc, #32]	; (22d0 <EXTERNAL_IRQ_0_init+0x13c>)
    22ae:	4798      	blx	r3
}
    22b0:	bf00      	nop
    22b2:	bd80      	pop	{r7, pc}
    22b4:	40001c00 	.word	0x40001c00
    22b8:	00001825 	.word	0x00001825
    22bc:	40000800 	.word	0x40000800
    22c0:	0000190b 	.word	0x0000190b
    22c4:	00002099 	.word	0x00002099
    22c8:	00002045 	.word	0x00002045
    22cc:	00002079 	.word	0x00002079
    22d0:	000036c9 	.word	0x000036c9

000022d4 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    22d4:	b580      	push	{r7, lr}
    22d6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    22d8:	2244      	movs	r2, #68	; 0x44
    22da:	210b      	movs	r1, #11
    22dc:	4807      	ldr	r0, [pc, #28]	; (22fc <EVENT_SYSTEM_0_init+0x28>)
    22de:	4b08      	ldr	r3, [pc, #32]	; (2300 <EVENT_SYSTEM_0_init+0x2c>)
    22e0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    22e2:	2244      	movs	r2, #68	; 0x44
    22e4:	210c      	movs	r1, #12
    22e6:	4805      	ldr	r0, [pc, #20]	; (22fc <EVENT_SYSTEM_0_init+0x28>)
    22e8:	4b05      	ldr	r3, [pc, #20]	; (2300 <EVENT_SYSTEM_0_init+0x2c>)
    22ea:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    22ec:	4805      	ldr	r0, [pc, #20]	; (2304 <EVENT_SYSTEM_0_init+0x30>)
    22ee:	4b06      	ldr	r3, [pc, #24]	; (2308 <EVENT_SYSTEM_0_init+0x34>)
    22f0:	4798      	blx	r3

	event_system_init();
    22f2:	4b06      	ldr	r3, [pc, #24]	; (230c <EVENT_SYSTEM_0_init+0x38>)
    22f4:	4798      	blx	r3
}
    22f6:	bf00      	nop
    22f8:	bd80      	pop	{r7, pc}
    22fa:	bf00      	nop
    22fc:	40001c00 	.word	0x40001c00
    2300:	00001825 	.word	0x00001825
    2304:	40000800 	.word	0x40000800
    2308:	0000198b 	.word	0x0000198b
    230c:	000036b5 	.word	0x000036b5

00002310 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    2310:	b580      	push	{r7, lr}
    2312:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    2314:	2101      	movs	r1, #1
    2316:	202b      	movs	r0, #43	; 0x2b
    2318:	4b2b      	ldr	r3, [pc, #172]	; (23c8 <QSPI_N25Q256_PORT_init+0xb8>)
    231a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    231c:	2100      	movs	r1, #0
    231e:	202b      	movs	r0, #43	; 0x2b
    2320:	4b2a      	ldr	r3, [pc, #168]	; (23cc <QSPI_N25Q256_PORT_init+0xbc>)
    2322:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    2324:	492a      	ldr	r1, [pc, #168]	; (23d0 <QSPI_N25Q256_PORT_init+0xc0>)
    2326:	202b      	movs	r0, #43	; 0x2b
    2328:	4b2a      	ldr	r3, [pc, #168]	; (23d4 <QSPI_N25Q256_PORT_init+0xc4>)
    232a:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    232c:	2102      	movs	r1, #2
    232e:	2008      	movs	r0, #8
    2330:	4b25      	ldr	r3, [pc, #148]	; (23c8 <QSPI_N25Q256_PORT_init+0xb8>)
    2332:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    2334:	2100      	movs	r1, #0
    2336:	2008      	movs	r0, #8
    2338:	4b27      	ldr	r3, [pc, #156]	; (23d8 <QSPI_N25Q256_PORT_init+0xc8>)
    233a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    233c:	2100      	movs	r1, #0
    233e:	2008      	movs	r0, #8
    2340:	4b22      	ldr	r3, [pc, #136]	; (23cc <QSPI_N25Q256_PORT_init+0xbc>)
    2342:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    2344:	4925      	ldr	r1, [pc, #148]	; (23dc <QSPI_N25Q256_PORT_init+0xcc>)
    2346:	2008      	movs	r0, #8
    2348:	4b22      	ldr	r3, [pc, #136]	; (23d4 <QSPI_N25Q256_PORT_init+0xc4>)
    234a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    234c:	2102      	movs	r1, #2
    234e:	2009      	movs	r0, #9
    2350:	4b1d      	ldr	r3, [pc, #116]	; (23c8 <QSPI_N25Q256_PORT_init+0xb8>)
    2352:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    2354:	2100      	movs	r1, #0
    2356:	2009      	movs	r0, #9
    2358:	4b1f      	ldr	r3, [pc, #124]	; (23d8 <QSPI_N25Q256_PORT_init+0xc8>)
    235a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    235c:	2100      	movs	r1, #0
    235e:	2009      	movs	r0, #9
    2360:	4b1a      	ldr	r3, [pc, #104]	; (23cc <QSPI_N25Q256_PORT_init+0xbc>)
    2362:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    2364:	491e      	ldr	r1, [pc, #120]	; (23e0 <QSPI_N25Q256_PORT_init+0xd0>)
    2366:	2009      	movs	r0, #9
    2368:	4b1a      	ldr	r3, [pc, #104]	; (23d4 <QSPI_N25Q256_PORT_init+0xc4>)
    236a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    236c:	2102      	movs	r1, #2
    236e:	200a      	movs	r0, #10
    2370:	4b15      	ldr	r3, [pc, #84]	; (23c8 <QSPI_N25Q256_PORT_init+0xb8>)
    2372:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    2374:	2100      	movs	r1, #0
    2376:	200a      	movs	r0, #10
    2378:	4b17      	ldr	r3, [pc, #92]	; (23d8 <QSPI_N25Q256_PORT_init+0xc8>)
    237a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    237c:	2100      	movs	r1, #0
    237e:	200a      	movs	r0, #10
    2380:	4b12      	ldr	r3, [pc, #72]	; (23cc <QSPI_N25Q256_PORT_init+0xbc>)
    2382:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    2384:	4917      	ldr	r1, [pc, #92]	; (23e4 <QSPI_N25Q256_PORT_init+0xd4>)
    2386:	200a      	movs	r0, #10
    2388:	4b12      	ldr	r3, [pc, #72]	; (23d4 <QSPI_N25Q256_PORT_init+0xc4>)
    238a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    238c:	2102      	movs	r1, #2
    238e:	200b      	movs	r0, #11
    2390:	4b0d      	ldr	r3, [pc, #52]	; (23c8 <QSPI_N25Q256_PORT_init+0xb8>)
    2392:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    2394:	2100      	movs	r1, #0
    2396:	200b      	movs	r0, #11
    2398:	4b0f      	ldr	r3, [pc, #60]	; (23d8 <QSPI_N25Q256_PORT_init+0xc8>)
    239a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    239c:	2100      	movs	r1, #0
    239e:	200b      	movs	r0, #11
    23a0:	4b0a      	ldr	r3, [pc, #40]	; (23cc <QSPI_N25Q256_PORT_init+0xbc>)
    23a2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    23a4:	4910      	ldr	r1, [pc, #64]	; (23e8 <QSPI_N25Q256_PORT_init+0xd8>)
    23a6:	200b      	movs	r0, #11
    23a8:	4b0a      	ldr	r3, [pc, #40]	; (23d4 <QSPI_N25Q256_PORT_init+0xc4>)
    23aa:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    23ac:	2101      	movs	r1, #1
    23ae:	202a      	movs	r0, #42	; 0x2a
    23b0:	4b05      	ldr	r3, [pc, #20]	; (23c8 <QSPI_N25Q256_PORT_init+0xb8>)
    23b2:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    23b4:	2100      	movs	r1, #0
    23b6:	202a      	movs	r0, #42	; 0x2a
    23b8:	4b04      	ldr	r3, [pc, #16]	; (23cc <QSPI_N25Q256_PORT_init+0xbc>)
    23ba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    23bc:	490b      	ldr	r1, [pc, #44]	; (23ec <QSPI_N25Q256_PORT_init+0xdc>)
    23be:	202a      	movs	r0, #42	; 0x2a
    23c0:	4b04      	ldr	r3, [pc, #16]	; (23d4 <QSPI_N25Q256_PORT_init+0xc4>)
    23c2:	4798      	blx	r3
}
    23c4:	bf00      	nop
    23c6:	bd80      	pop	{r7, pc}
    23c8:	00002099 	.word	0x00002099
    23cc:	00002045 	.word	0x00002045
    23d0:	002b0007 	.word	0x002b0007
    23d4:	00002079 	.word	0x00002079
    23d8:	000020d1 	.word	0x000020d1
    23dc:	00080007 	.word	0x00080007
    23e0:	00090007 	.word	0x00090007
    23e4:	000a0007 	.word	0x000a0007
    23e8:	000b0007 	.word	0x000b0007
    23ec:	002a0007 	.word	0x002a0007

000023f0 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    23f0:	b580      	push	{r7, lr}
    23f2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    23f4:	4805      	ldr	r0, [pc, #20]	; (240c <QSPI_N25Q256_CLOCK_init+0x1c>)
    23f6:	4b06      	ldr	r3, [pc, #24]	; (2410 <QSPI_N25Q256_CLOCK_init+0x20>)
    23f8:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    23fa:	4804      	ldr	r0, [pc, #16]	; (240c <QSPI_N25Q256_CLOCK_init+0x1c>)
    23fc:	4b05      	ldr	r3, [pc, #20]	; (2414 <QSPI_N25Q256_CLOCK_init+0x24>)
    23fe:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    2400:	4802      	ldr	r0, [pc, #8]	; (240c <QSPI_N25Q256_CLOCK_init+0x1c>)
    2402:	4b05      	ldr	r3, [pc, #20]	; (2418 <QSPI_N25Q256_CLOCK_init+0x28>)
    2404:	4798      	blx	r3
}
    2406:	bf00      	nop
    2408:	bd80      	pop	{r7, pc}
    240a:	bf00      	nop
    240c:	40000800 	.word	0x40000800
    2410:	0000186b 	.word	0x0000186b
    2414:	000018ab 	.word	0x000018ab
    2418:	00001a8b 	.word	0x00001a8b

0000241c <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    241c:	b580      	push	{r7, lr}
    241e:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    2420:	4b04      	ldr	r3, [pc, #16]	; (2434 <QSPI_N25Q256_init+0x18>)
    2422:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    2424:	4904      	ldr	r1, [pc, #16]	; (2438 <QSPI_N25Q256_init+0x1c>)
    2426:	4805      	ldr	r0, [pc, #20]	; (243c <QSPI_N25Q256_init+0x20>)
    2428:	4b05      	ldr	r3, [pc, #20]	; (2440 <QSPI_N25Q256_init+0x24>)
    242a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    242c:	4b05      	ldr	r3, [pc, #20]	; (2444 <QSPI_N25Q256_init+0x28>)
    242e:	4798      	blx	r3
}
    2430:	bf00      	nop
    2432:	bd80      	pop	{r7, pc}
    2434:	000023f1 	.word	0x000023f1
    2438:	42003400 	.word	0x42003400
    243c:	2000dfb8 	.word	0x2000dfb8
    2440:	00003b39 	.word	0x00003b39
    2444:	00002311 	.word	0x00002311

00002448 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    2448:	b580      	push	{r7, lr}
    244a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    244c:	4802      	ldr	r0, [pc, #8]	; (2458 <DATETIME_CLOCK_CLOCK_init+0x10>)
    244e:	4b03      	ldr	r3, [pc, #12]	; (245c <DATETIME_CLOCK_CLOCK_init+0x14>)
    2450:	4798      	blx	r3
}
    2452:	bf00      	nop
    2454:	bd80      	pop	{r7, pc}
    2456:	bf00      	nop
    2458:	40000800 	.word	0x40000800
    245c:	000018eb 	.word	0x000018eb

00002460 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    2460:	b580      	push	{r7, lr}
    2462:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    2464:	4b03      	ldr	r3, [pc, #12]	; (2474 <DATETIME_CLOCK_init+0x14>)
    2466:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    2468:	4903      	ldr	r1, [pc, #12]	; (2478 <DATETIME_CLOCK_init+0x18>)
    246a:	4804      	ldr	r0, [pc, #16]	; (247c <DATETIME_CLOCK_init+0x1c>)
    246c:	4b04      	ldr	r3, [pc, #16]	; (2480 <DATETIME_CLOCK_init+0x20>)
    246e:	4798      	blx	r3
}
    2470:	bf00      	nop
    2472:	bd80      	pop	{r7, pc}
    2474:	00002449 	.word	0x00002449
    2478:	40002400 	.word	0x40002400
    247c:	2000e100 	.word	0x2000e100
    2480:	00003169 	.word	0x00003169

00002484 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    2484:	b580      	push	{r7, lr}
    2486:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA17,
    2488:	2100      	movs	r1, #0
    248a:	2011      	movs	r0, #17
    248c:	4b07      	ldr	r3, [pc, #28]	; (24ac <I2C_HEATERS_PORT_init+0x28>)
    248e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17D_SERCOM3_PAD0);
    2490:	4907      	ldr	r1, [pc, #28]	; (24b0 <I2C_HEATERS_PORT_init+0x2c>)
    2492:	2011      	movs	r0, #17
    2494:	4b07      	ldr	r3, [pc, #28]	; (24b4 <I2C_HEATERS_PORT_init+0x30>)
    2496:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA16,
    2498:	2100      	movs	r1, #0
    249a:	2010      	movs	r0, #16
    249c:	4b03      	ldr	r3, [pc, #12]	; (24ac <I2C_HEATERS_PORT_init+0x28>)
    249e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA16, PINMUX_PA16D_SERCOM3_PAD1);
    24a0:	4905      	ldr	r1, [pc, #20]	; (24b8 <I2C_HEATERS_PORT_init+0x34>)
    24a2:	2010      	movs	r0, #16
    24a4:	4b03      	ldr	r3, [pc, #12]	; (24b4 <I2C_HEATERS_PORT_init+0x30>)
    24a6:	4798      	blx	r3
}
    24a8:	bf00      	nop
    24aa:	bd80      	pop	{r7, pc}
    24ac:	00002045 	.word	0x00002045
    24b0:	00110003 	.word	0x00110003
    24b4:	00002079 	.word	0x00002079
    24b8:	00100003 	.word	0x00100003

000024bc <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    24bc:	b580      	push	{r7, lr}
    24be:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    24c0:	2240      	movs	r2, #64	; 0x40
    24c2:	2118      	movs	r1, #24
    24c4:	4806      	ldr	r0, [pc, #24]	; (24e0 <I2C_HEATERS_CLOCK_init+0x24>)
    24c6:	4b07      	ldr	r3, [pc, #28]	; (24e4 <I2C_HEATERS_CLOCK_init+0x28>)
    24c8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    24ca:	2243      	movs	r2, #67	; 0x43
    24cc:	2103      	movs	r1, #3
    24ce:	4804      	ldr	r0, [pc, #16]	; (24e0 <I2C_HEATERS_CLOCK_init+0x24>)
    24d0:	4b04      	ldr	r3, [pc, #16]	; (24e4 <I2C_HEATERS_CLOCK_init+0x28>)
    24d2:	4798      	blx	r3

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
    24d4:	4804      	ldr	r0, [pc, #16]	; (24e8 <I2C_HEATERS_CLOCK_init+0x2c>)
    24d6:	4b05      	ldr	r3, [pc, #20]	; (24ec <I2C_HEATERS_CLOCK_init+0x30>)
    24d8:	4798      	blx	r3
}
    24da:	bf00      	nop
    24dc:	bd80      	pop	{r7, pc}
    24de:	bf00      	nop
    24e0:	40001c00 	.word	0x40001c00
    24e4:	00001825 	.word	0x00001825
    24e8:	40000800 	.word	0x40000800
    24ec:	000019ab 	.word	0x000019ab

000024f0 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    24f0:	b580      	push	{r7, lr}
    24f2:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    24f4:	4b04      	ldr	r3, [pc, #16]	; (2508 <I2C_HEATERS_init+0x18>)
    24f6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM3);
    24f8:	4904      	ldr	r1, [pc, #16]	; (250c <I2C_HEATERS_init+0x1c>)
    24fa:	4805      	ldr	r0, [pc, #20]	; (2510 <I2C_HEATERS_init+0x20>)
    24fc:	4b05      	ldr	r3, [pc, #20]	; (2514 <I2C_HEATERS_init+0x24>)
    24fe:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    2500:	4b05      	ldr	r3, [pc, #20]	; (2518 <I2C_HEATERS_init+0x28>)
    2502:	4798      	blx	r3
}
    2504:	bf00      	nop
    2506:	bd80      	pop	{r7, pc}
    2508:	000024bd 	.word	0x000024bd
    250c:	41014000 	.word	0x41014000
    2510:	2000e058 	.word	0x2000e058
    2514:	00003991 	.word	0x00003991
    2518:	00002485 	.word	0x00002485

0000251c <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    251c:	b580      	push	{r7, lr}
    251e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    2520:	2100      	movs	r1, #0
    2522:	203b      	movs	r0, #59	; 0x3b
    2524:	4b11      	ldr	r3, [pc, #68]	; (256c <SPI_TEMP_PORT_init+0x50>)
    2526:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    2528:	2102      	movs	r1, #2
    252a:	203b      	movs	r0, #59	; 0x3b
    252c:	4b10      	ldr	r3, [pc, #64]	; (2570 <SPI_TEMP_PORT_init+0x54>)
    252e:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    2530:	4910      	ldr	r1, [pc, #64]	; (2574 <SPI_TEMP_PORT_init+0x58>)
    2532:	203b      	movs	r0, #59	; 0x3b
    2534:	4b10      	ldr	r3, [pc, #64]	; (2578 <SPI_TEMP_PORT_init+0x5c>)
    2536:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    2538:	2100      	movs	r1, #0
    253a:	203a      	movs	r0, #58	; 0x3a
    253c:	4b0b      	ldr	r3, [pc, #44]	; (256c <SPI_TEMP_PORT_init+0x50>)
    253e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    2540:	2102      	movs	r1, #2
    2542:	203a      	movs	r0, #58	; 0x3a
    2544:	4b0a      	ldr	r3, [pc, #40]	; (2570 <SPI_TEMP_PORT_init+0x54>)
    2546:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    2548:	490c      	ldr	r1, [pc, #48]	; (257c <SPI_TEMP_PORT_init+0x60>)
    254a:	203a      	movs	r0, #58	; 0x3a
    254c:	4b0a      	ldr	r3, [pc, #40]	; (2578 <SPI_TEMP_PORT_init+0x5c>)
    254e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    2550:	2101      	movs	r1, #1
    2552:	203c      	movs	r0, #60	; 0x3c
    2554:	4b06      	ldr	r3, [pc, #24]	; (2570 <SPI_TEMP_PORT_init+0x54>)
    2556:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    2558:	2100      	movs	r1, #0
    255a:	203c      	movs	r0, #60	; 0x3c
    255c:	4b08      	ldr	r3, [pc, #32]	; (2580 <SPI_TEMP_PORT_init+0x64>)
    255e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    2560:	4908      	ldr	r1, [pc, #32]	; (2584 <SPI_TEMP_PORT_init+0x68>)
    2562:	203c      	movs	r0, #60	; 0x3c
    2564:	4b04      	ldr	r3, [pc, #16]	; (2578 <SPI_TEMP_PORT_init+0x5c>)
    2566:	4798      	blx	r3
}
    2568:	bf00      	nop
    256a:	bd80      	pop	{r7, pc}
    256c:	000020d1 	.word	0x000020d1
    2570:	00002099 	.word	0x00002099
    2574:	003b0003 	.word	0x003b0003
    2578:	00002079 	.word	0x00002079
    257c:	003a0003 	.word	0x003a0003
    2580:	00002045 	.word	0x00002045
    2584:	003c0003 	.word	0x003c0003

00002588 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    2588:	b580      	push	{r7, lr}
    258a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    258c:	2245      	movs	r2, #69	; 0x45
    258e:	2122      	movs	r1, #34	; 0x22
    2590:	4806      	ldr	r0, [pc, #24]	; (25ac <SPI_TEMP_CLOCK_init+0x24>)
    2592:	4b07      	ldr	r3, [pc, #28]	; (25b0 <SPI_TEMP_CLOCK_init+0x28>)
    2594:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2596:	224a      	movs	r2, #74	; 0x4a
    2598:	2103      	movs	r1, #3
    259a:	4804      	ldr	r0, [pc, #16]	; (25ac <SPI_TEMP_CLOCK_init+0x24>)
    259c:	4b04      	ldr	r3, [pc, #16]	; (25b0 <SPI_TEMP_CLOCK_init+0x28>)
    259e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    25a0:	4804      	ldr	r0, [pc, #16]	; (25b4 <SPI_TEMP_CLOCK_init+0x2c>)
    25a2:	4b05      	ldr	r3, [pc, #20]	; (25b8 <SPI_TEMP_CLOCK_init+0x30>)
    25a4:	4798      	blx	r3
}
    25a6:	bf00      	nop
    25a8:	bd80      	pop	{r7, pc}
    25aa:	bf00      	nop
    25ac:	40001c00 	.word	0x40001c00
    25b0:	00001825 	.word	0x00001825
    25b4:	40000800 	.word	0x40000800
    25b8:	00001aab 	.word	0x00001aab

000025bc <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    25bc:	b580      	push	{r7, lr}
    25be:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    25c0:	4b05      	ldr	r3, [pc, #20]	; (25d8 <SPI_TEMP_init+0x1c>)
    25c2:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    25c4:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    25c8:	4804      	ldr	r0, [pc, #16]	; (25dc <SPI_TEMP_init+0x20>)
    25ca:	4b05      	ldr	r3, [pc, #20]	; (25e0 <SPI_TEMP_init+0x24>)
    25cc:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    25ce:	4b05      	ldr	r3, [pc, #20]	; (25e4 <SPI_TEMP_init+0x28>)
    25d0:	4798      	blx	r3
}
    25d2:	bf00      	nop
    25d4:	bd80      	pop	{r7, pc}
    25d6:	bf00      	nop
    25d8:	00002589 	.word	0x00002589
    25dc:	2000df60 	.word	0x2000df60
    25e0:	00003c49 	.word	0x00003c49
    25e4:	0000251d 	.word	0x0000251d

000025e8 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    25e8:	b580      	push	{r7, lr}
    25ea:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    25ec:	2100      	movs	r1, #0
    25ee:	2017      	movs	r0, #23
    25f0:	4b07      	ldr	r3, [pc, #28]	; (2610 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    25f2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    25f4:	4907      	ldr	r1, [pc, #28]	; (2614 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    25f6:	2017      	movs	r0, #23
    25f8:	4b07      	ldr	r3, [pc, #28]	; (2618 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    25fa:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    25fc:	2100      	movs	r1, #0
    25fe:	2016      	movs	r0, #22
    2600:	4b03      	ldr	r3, [pc, #12]	; (2610 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    2602:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    2604:	4905      	ldr	r1, [pc, #20]	; (261c <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    2606:	2016      	movs	r0, #22
    2608:	4b03      	ldr	r3, [pc, #12]	; (2618 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    260a:	4798      	blx	r3
}
    260c:	bf00      	nop
    260e:	bd80      	pop	{r7, pc}
    2610:	00002045 	.word	0x00002045
    2614:	00170003 	.word	0x00170003
    2618:	00002079 	.word	0x00002079
    261c:	00160003 	.word	0x00160003

00002620 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    2620:	b580      	push	{r7, lr}
    2622:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2624:	2244      	movs	r2, #68	; 0x44
    2626:	2123      	movs	r1, #35	; 0x23
    2628:	4806      	ldr	r0, [pc, #24]	; (2644 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    262a:	4b07      	ldr	r3, [pc, #28]	; (2648 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    262c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    262e:	224a      	movs	r2, #74	; 0x4a
    2630:	2103      	movs	r1, #3
    2632:	4804      	ldr	r0, [pc, #16]	; (2644 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    2634:	4b04      	ldr	r3, [pc, #16]	; (2648 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    2636:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    2638:	4804      	ldr	r0, [pc, #16]	; (264c <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    263a:	4b05      	ldr	r3, [pc, #20]	; (2650 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    263c:	4798      	blx	r3
}
    263e:	bf00      	nop
    2640:	bd80      	pop	{r7, pc}
    2642:	bf00      	nop
    2644:	40001c00 	.word	0x40001c00
    2648:	00001825 	.word	0x00001825
    264c:	40000800 	.word	0x40000800
    2650:	00001acb 	.word	0x00001acb

00002654 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    2654:	b580      	push	{r7, lr}
    2656:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    2658:	4b04      	ldr	r3, [pc, #16]	; (266c <I2C_FLAPPER_VALVE_init+0x18>)
    265a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    265c:	4904      	ldr	r1, [pc, #16]	; (2670 <I2C_FLAPPER_VALVE_init+0x1c>)
    265e:	4805      	ldr	r0, [pc, #20]	; (2674 <I2C_FLAPPER_VALVE_init+0x20>)
    2660:	4b05      	ldr	r3, [pc, #20]	; (2678 <I2C_FLAPPER_VALVE_init+0x24>)
    2662:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    2664:	4b05      	ldr	r3, [pc, #20]	; (267c <I2C_FLAPPER_VALVE_init+0x28>)
    2666:	4798      	blx	r3
}
    2668:	bf00      	nop
    266a:	bd80      	pop	{r7, pc}
    266c:	00002621 	.word	0x00002621
    2670:	43000400 	.word	0x43000400
    2674:	2000dffc 	.word	0x2000dffc
    2678:	00003991 	.word	0x00003991
    267c:	000025e9 	.word	0x000025e9

00002680 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    2680:	b580      	push	{r7, lr}
    2682:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    2684:	2100      	movs	r1, #0
    2686:	2044      	movs	r0, #68	; 0x44
    2688:	4b11      	ldr	r3, [pc, #68]	; (26d0 <SPI_HI3593_PORT_init+0x50>)
    268a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    268c:	2102      	movs	r1, #2
    268e:	2044      	movs	r0, #68	; 0x44
    2690:	4b10      	ldr	r3, [pc, #64]	; (26d4 <SPI_HI3593_PORT_init+0x54>)
    2692:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    2694:	4910      	ldr	r1, [pc, #64]	; (26d8 <SPI_HI3593_PORT_init+0x58>)
    2696:	2044      	movs	r0, #68	; 0x44
    2698:	4b10      	ldr	r3, [pc, #64]	; (26dc <SPI_HI3593_PORT_init+0x5c>)
    269a:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    269c:	2100      	movs	r1, #0
    269e:	2045      	movs	r0, #69	; 0x45
    26a0:	4b0b      	ldr	r3, [pc, #44]	; (26d0 <SPI_HI3593_PORT_init+0x50>)
    26a2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    26a4:	2102      	movs	r1, #2
    26a6:	2045      	movs	r0, #69	; 0x45
    26a8:	4b0a      	ldr	r3, [pc, #40]	; (26d4 <SPI_HI3593_PORT_init+0x54>)
    26aa:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    26ac:	490c      	ldr	r1, [pc, #48]	; (26e0 <SPI_HI3593_PORT_init+0x60>)
    26ae:	2045      	movs	r0, #69	; 0x45
    26b0:	4b0a      	ldr	r3, [pc, #40]	; (26dc <SPI_HI3593_PORT_init+0x5c>)
    26b2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    26b4:	2101      	movs	r1, #1
    26b6:	2047      	movs	r0, #71	; 0x47
    26b8:	4b06      	ldr	r3, [pc, #24]	; (26d4 <SPI_HI3593_PORT_init+0x54>)
    26ba:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    26bc:	2100      	movs	r1, #0
    26be:	2047      	movs	r0, #71	; 0x47
    26c0:	4b08      	ldr	r3, [pc, #32]	; (26e4 <SPI_HI3593_PORT_init+0x64>)
    26c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    26c4:	4908      	ldr	r1, [pc, #32]	; (26e8 <SPI_HI3593_PORT_init+0x68>)
    26c6:	2047      	movs	r0, #71	; 0x47
    26c8:	4b04      	ldr	r3, [pc, #16]	; (26dc <SPI_HI3593_PORT_init+0x5c>)
    26ca:	4798      	blx	r3
}
    26cc:	bf00      	nop
    26ce:	bd80      	pop	{r7, pc}
    26d0:	000020d1 	.word	0x000020d1
    26d4:	00002099 	.word	0x00002099
    26d8:	00440002 	.word	0x00440002
    26dc:	00002079 	.word	0x00002079
    26e0:	00450002 	.word	0x00450002
    26e4:	00002045 	.word	0x00002045
    26e8:	00470002 	.word	0x00470002

000026ec <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    26ec:	b580      	push	{r7, lr}
    26ee:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    26f0:	2242      	movs	r2, #66	; 0x42
    26f2:	2124      	movs	r1, #36	; 0x24
    26f4:	4806      	ldr	r0, [pc, #24]	; (2710 <SPI_HI3593_CLOCK_init+0x24>)
    26f6:	4b07      	ldr	r3, [pc, #28]	; (2714 <SPI_HI3593_CLOCK_init+0x28>)
    26f8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    26fa:	224a      	movs	r2, #74	; 0x4a
    26fc:	2103      	movs	r1, #3
    26fe:	4804      	ldr	r0, [pc, #16]	; (2710 <SPI_HI3593_CLOCK_init+0x24>)
    2700:	4b04      	ldr	r3, [pc, #16]	; (2714 <SPI_HI3593_CLOCK_init+0x28>)
    2702:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    2704:	4804      	ldr	r0, [pc, #16]	; (2718 <SPI_HI3593_CLOCK_init+0x2c>)
    2706:	4b05      	ldr	r3, [pc, #20]	; (271c <SPI_HI3593_CLOCK_init+0x30>)
    2708:	4798      	blx	r3
}
    270a:	bf00      	nop
    270c:	bd80      	pop	{r7, pc}
    270e:	bf00      	nop
    2710:	40001c00 	.word	0x40001c00
    2714:	00001825 	.word	0x00001825
    2718:	40000800 	.word	0x40000800
    271c:	00001aeb 	.word	0x00001aeb

00002720 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    2720:	b580      	push	{r7, lr}
    2722:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    2724:	4b04      	ldr	r3, [pc, #16]	; (2738 <SPI_HI3593_init+0x18>)
    2726:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    2728:	4904      	ldr	r1, [pc, #16]	; (273c <SPI_HI3593_init+0x1c>)
    272a:	4805      	ldr	r0, [pc, #20]	; (2740 <SPI_HI3593_init+0x20>)
    272c:	4b05      	ldr	r3, [pc, #20]	; (2744 <SPI_HI3593_init+0x24>)
    272e:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    2730:	4b05      	ldr	r3, [pc, #20]	; (2748 <SPI_HI3593_init+0x28>)
    2732:	4798      	blx	r3
}
    2734:	bf00      	nop
    2736:	bd80      	pop	{r7, pc}
    2738:	000026ed 	.word	0x000026ed
    273c:	43000800 	.word	0x43000800
    2740:	2000df48 	.word	0x2000df48
    2744:	00003c49 	.word	0x00003c49
    2748:	00002681 	.word	0x00002681

0000274c <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    274c:	b580      	push	{r7, lr}
    274e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    2750:	2100      	movs	r1, #0
    2752:	2068      	movs	r0, #104	; 0x68
    2754:	4b07      	ldr	r3, [pc, #28]	; (2774 <I2C_FANS_PORT_init+0x28>)
    2756:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    2758:	4907      	ldr	r1, [pc, #28]	; (2778 <I2C_FANS_PORT_init+0x2c>)
    275a:	2068      	movs	r0, #104	; 0x68
    275c:	4b07      	ldr	r3, [pc, #28]	; (277c <I2C_FANS_PORT_init+0x30>)
    275e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    2760:	2100      	movs	r1, #0
    2762:	2069      	movs	r0, #105	; 0x69
    2764:	4b03      	ldr	r3, [pc, #12]	; (2774 <I2C_FANS_PORT_init+0x28>)
    2766:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    2768:	4905      	ldr	r1, [pc, #20]	; (2780 <I2C_FANS_PORT_init+0x34>)
    276a:	2069      	movs	r0, #105	; 0x69
    276c:	4b03      	ldr	r3, [pc, #12]	; (277c <I2C_FANS_PORT_init+0x30>)
    276e:	4798      	blx	r3
}
    2770:	bf00      	nop
    2772:	bd80      	pop	{r7, pc}
    2774:	00002045 	.word	0x00002045
    2778:	00680002 	.word	0x00680002
    277c:	00002079 	.word	0x00002079
    2780:	00690002 	.word	0x00690002

00002784 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    2784:	b580      	push	{r7, lr}
    2786:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2788:	2244      	movs	r2, #68	; 0x44
    278a:	2125      	movs	r1, #37	; 0x25
    278c:	4806      	ldr	r0, [pc, #24]	; (27a8 <I2C_FANS_CLOCK_init+0x24>)
    278e:	4b07      	ldr	r3, [pc, #28]	; (27ac <I2C_FANS_CLOCK_init+0x28>)
    2790:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2792:	224a      	movs	r2, #74	; 0x4a
    2794:	2103      	movs	r1, #3
    2796:	4804      	ldr	r0, [pc, #16]	; (27a8 <I2C_FANS_CLOCK_init+0x24>)
    2798:	4b04      	ldr	r3, [pc, #16]	; (27ac <I2C_FANS_CLOCK_init+0x28>)
    279a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    279c:	4804      	ldr	r0, [pc, #16]	; (27b0 <I2C_FANS_CLOCK_init+0x2c>)
    279e:	4b05      	ldr	r3, [pc, #20]	; (27b4 <I2C_FANS_CLOCK_init+0x30>)
    27a0:	4798      	blx	r3
}
    27a2:	bf00      	nop
    27a4:	bd80      	pop	{r7, pc}
    27a6:	bf00      	nop
    27a8:	40001c00 	.word	0x40001c00
    27ac:	00001825 	.word	0x00001825
    27b0:	40000800 	.word	0x40000800
    27b4:	00001b0b 	.word	0x00001b0b

000027b8 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    27b8:	b580      	push	{r7, lr}
    27ba:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    27bc:	4b04      	ldr	r3, [pc, #16]	; (27d0 <I2C_FANS_init+0x18>)
    27be:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    27c0:	4904      	ldr	r1, [pc, #16]	; (27d4 <I2C_FANS_init+0x1c>)
    27c2:	4805      	ldr	r0, [pc, #20]	; (27d8 <I2C_FANS_init+0x20>)
    27c4:	4b05      	ldr	r3, [pc, #20]	; (27dc <I2C_FANS_init+0x24>)
    27c6:	4798      	blx	r3
	I2C_FANS_PORT_init();
    27c8:	4b05      	ldr	r3, [pc, #20]	; (27e0 <I2C_FANS_init+0x28>)
    27ca:	4798      	blx	r3
}
    27cc:	bf00      	nop
    27ce:	bd80      	pop	{r7, pc}
    27d0:	00002785 	.word	0x00002785
    27d4:	43000c00 	.word	0x43000c00
    27d8:	2000df78 	.word	0x2000df78
    27dc:	00003991 	.word	0x00003991
    27e0:	0000274d 	.word	0x0000274d

000027e4 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    27e4:	b580      	push	{r7, lr}
    27e6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    27e8:	4808      	ldr	r0, [pc, #32]	; (280c <TIMER_USB_init+0x28>)
    27ea:	4b09      	ldr	r3, [pc, #36]	; (2810 <TIMER_USB_init+0x2c>)
    27ec:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    27ee:	2243      	movs	r2, #67	; 0x43
    27f0:	2109      	movs	r1, #9
    27f2:	4808      	ldr	r0, [pc, #32]	; (2814 <TIMER_USB_init+0x30>)
    27f4:	4b08      	ldr	r3, [pc, #32]	; (2818 <TIMER_USB_init+0x34>)
    27f6:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    27f8:	4b08      	ldr	r3, [pc, #32]	; (281c <TIMER_USB_init+0x38>)
    27fa:	4798      	blx	r3
    27fc:	4603      	mov	r3, r0
    27fe:	461a      	mov	r2, r3
    2800:	4907      	ldr	r1, [pc, #28]	; (2820 <TIMER_USB_init+0x3c>)
    2802:	4808      	ldr	r0, [pc, #32]	; (2824 <TIMER_USB_init+0x40>)
    2804:	4b08      	ldr	r3, [pc, #32]	; (2828 <TIMER_USB_init+0x44>)
    2806:	4798      	blx	r3
}
    2808:	bf00      	nop
    280a:	bd80      	pop	{r7, pc}
    280c:	40000800 	.word	0x40000800
    2810:	0000192b 	.word	0x0000192b
    2814:	40001c00 	.word	0x40001c00
    2818:	00001825 	.word	0x00001825
    281c:	00009fe5 	.word	0x00009fe5
    2820:	40003800 	.word	0x40003800
    2824:	2000e0c0 	.word	0x2000e0c0
    2828:	00003ed9 	.word	0x00003ed9

0000282c <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    282c:	b580      	push	{r7, lr}
    282e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    2830:	4808      	ldr	r0, [pc, #32]	; (2854 <TIMER_ARINC_init+0x28>)
    2832:	4b09      	ldr	r3, [pc, #36]	; (2858 <TIMER_ARINC_init+0x2c>)
    2834:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2836:	2244      	movs	r2, #68	; 0x44
    2838:	211a      	movs	r1, #26
    283a:	4808      	ldr	r0, [pc, #32]	; (285c <TIMER_ARINC_init+0x30>)
    283c:	4b08      	ldr	r3, [pc, #32]	; (2860 <TIMER_ARINC_init+0x34>)
    283e:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    2840:	4b08      	ldr	r3, [pc, #32]	; (2864 <TIMER_ARINC_init+0x38>)
    2842:	4798      	blx	r3
    2844:	4603      	mov	r3, r0
    2846:	461a      	mov	r2, r3
    2848:	4907      	ldr	r1, [pc, #28]	; (2868 <TIMER_ARINC_init+0x3c>)
    284a:	4808      	ldr	r0, [pc, #32]	; (286c <TIMER_ARINC_init+0x40>)
    284c:	4b08      	ldr	r3, [pc, #32]	; (2870 <TIMER_ARINC_init+0x44>)
    284e:	4798      	blx	r3
}
    2850:	bf00      	nop
    2852:	bd80      	pop	{r7, pc}
    2854:	40000800 	.word	0x40000800
    2858:	00001a0b 	.word	0x00001a0b
    285c:	40001c00 	.word	0x40001c00
    2860:	00001825 	.word	0x00001825
    2864:	00009fe5 	.word	0x00009fe5
    2868:	4101a000 	.word	0x4101a000
    286c:	2000e0a0 	.word	0x2000e0a0
    2870:	00003ed9 	.word	0x00003ed9

00002874 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    2874:	b580      	push	{r7, lr}
    2876:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    2878:	4808      	ldr	r0, [pc, #32]	; (289c <TIMER_MAINTENANCE_init+0x28>)
    287a:	4b09      	ldr	r3, [pc, #36]	; (28a0 <TIMER_MAINTENANCE_init+0x2c>)
    287c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    287e:	2246      	movs	r2, #70	; 0x46
    2880:	211e      	movs	r1, #30
    2882:	4808      	ldr	r0, [pc, #32]	; (28a4 <TIMER_MAINTENANCE_init+0x30>)
    2884:	4b08      	ldr	r3, [pc, #32]	; (28a8 <TIMER_MAINTENANCE_init+0x34>)
    2886:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    2888:	4b08      	ldr	r3, [pc, #32]	; (28ac <TIMER_MAINTENANCE_init+0x38>)
    288a:	4798      	blx	r3
    288c:	4603      	mov	r3, r0
    288e:	461a      	mov	r2, r3
    2890:	4907      	ldr	r1, [pc, #28]	; (28b0 <TIMER_MAINTENANCE_init+0x3c>)
    2892:	4808      	ldr	r0, [pc, #32]	; (28b4 <TIMER_MAINTENANCE_init+0x40>)
    2894:	4b08      	ldr	r3, [pc, #32]	; (28b8 <TIMER_MAINTENANCE_init+0x44>)
    2896:	4798      	blx	r3
}
    2898:	bf00      	nop
    289a:	bd80      	pop	{r7, pc}
    289c:	40000800 	.word	0x40000800
    28a0:	00001a4b 	.word	0x00001a4b
    28a4:	40001c00 	.word	0x40001c00
    28a8:	00001825 	.word	0x00001825
    28ac:	00009fe5 	.word	0x00009fe5
    28b0:	42001400 	.word	0x42001400
    28b4:	2000df98 	.word	0x2000df98
    28b8:	00003ed9 	.word	0x00003ed9

000028bc <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    28bc:	b580      	push	{r7, lr}
    28be:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    28c0:	4808      	ldr	r0, [pc, #32]	; (28e4 <TIMER_INTERFACE_init+0x28>)
    28c2:	4b09      	ldr	r3, [pc, #36]	; (28e8 <TIMER_INTERFACE_init+0x2c>)
    28c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    28c6:	2246      	movs	r2, #70	; 0x46
    28c8:	211e      	movs	r1, #30
    28ca:	4808      	ldr	r0, [pc, #32]	; (28ec <TIMER_INTERFACE_init+0x30>)
    28cc:	4b08      	ldr	r3, [pc, #32]	; (28f0 <TIMER_INTERFACE_init+0x34>)
    28ce:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    28d0:	4b08      	ldr	r3, [pc, #32]	; (28f4 <TIMER_INTERFACE_init+0x38>)
    28d2:	4798      	blx	r3
    28d4:	4603      	mov	r3, r0
    28d6:	461a      	mov	r2, r3
    28d8:	4907      	ldr	r1, [pc, #28]	; (28f8 <TIMER_INTERFACE_init+0x3c>)
    28da:	4808      	ldr	r0, [pc, #32]	; (28fc <TIMER_INTERFACE_init+0x40>)
    28dc:	4b08      	ldr	r3, [pc, #32]	; (2900 <TIMER_INTERFACE_init+0x44>)
    28de:	4798      	blx	r3
}
    28e0:	bf00      	nop
    28e2:	bd80      	pop	{r7, pc}
    28e4:	40000800 	.word	0x40000800
    28e8:	00001a6b 	.word	0x00001a6b
    28ec:	40001c00 	.word	0x40001c00
    28f0:	00001825 	.word	0x00001825
    28f4:	00009fe5 	.word	0x00009fe5
    28f8:	42001800 	.word	0x42001800
    28fc:	2000dfdc 	.word	0x2000dfdc
    2900:	00003ed9 	.word	0x00003ed9

00002904 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    2904:	b580      	push	{r7, lr}
    2906:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    2908:	4808      	ldr	r0, [pc, #32]	; (292c <TIMER_EVENT_init+0x28>)
    290a:	4b09      	ldr	r3, [pc, #36]	; (2930 <TIMER_EVENT_init+0x2c>)
    290c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    290e:	2246      	movs	r2, #70	; 0x46
    2910:	2127      	movs	r1, #39	; 0x27
    2912:	4808      	ldr	r0, [pc, #32]	; (2934 <TIMER_EVENT_init+0x30>)
    2914:	4b08      	ldr	r3, [pc, #32]	; (2938 <TIMER_EVENT_init+0x34>)
    2916:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    2918:	4b08      	ldr	r3, [pc, #32]	; (293c <TIMER_EVENT_init+0x38>)
    291a:	4798      	blx	r3
    291c:	4603      	mov	r3, r0
    291e:	461a      	mov	r2, r3
    2920:	4907      	ldr	r1, [pc, #28]	; (2940 <TIMER_EVENT_init+0x3c>)
    2922:	4808      	ldr	r0, [pc, #32]	; (2944 <TIMER_EVENT_init+0x40>)
    2924:	4b08      	ldr	r3, [pc, #32]	; (2948 <TIMER_EVENT_init+0x44>)
    2926:	4798      	blx	r3
}
    2928:	bf00      	nop
    292a:	bd80      	pop	{r7, pc}
    292c:	40000800 	.word	0x40000800
    2930:	00001b2b 	.word	0x00001b2b
    2934:	40001c00 	.word	0x40001c00
    2938:	00001825 	.word	0x00001825
    293c:	00009fe5 	.word	0x00009fe5
    2940:	43001400 	.word	0x43001400
    2944:	2000dfbc 	.word	0x2000dfbc
    2948:	00003ed9 	.word	0x00003ed9

0000294c <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    294c:	b480      	push	{r7}
    294e:	af00      	add	r7, sp, #0
}
    2950:	bf00      	nop
    2952:	46bd      	mov	sp, r7
    2954:	f85d 7b04 	ldr.w	r7, [sp], #4
    2958:	4770      	bx	lr
	...

0000295c <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    295c:	b580      	push	{r7, lr}
    295e:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    2960:	4804      	ldr	r0, [pc, #16]	; (2974 <LIVE_PULSE_CLOCK_init+0x18>)
    2962:	4b05      	ldr	r3, [pc, #20]	; (2978 <LIVE_PULSE_CLOCK_init+0x1c>)
    2964:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2966:	2240      	movs	r2, #64	; 0x40
    2968:	2127      	movs	r1, #39	; 0x27
    296a:	4804      	ldr	r0, [pc, #16]	; (297c <LIVE_PULSE_CLOCK_init+0x20>)
    296c:	4b04      	ldr	r3, [pc, #16]	; (2980 <LIVE_PULSE_CLOCK_init+0x24>)
    296e:	4798      	blx	r3
}
    2970:	bf00      	nop
    2972:	bd80      	pop	{r7, pc}
    2974:	40000800 	.word	0x40000800
    2978:	00001b4b 	.word	0x00001b4b
    297c:	40001c00 	.word	0x40001c00
    2980:	00001825 	.word	0x00001825

00002984 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    2984:	b580      	push	{r7, lr}
    2986:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    2988:	4b06      	ldr	r3, [pc, #24]	; (29a4 <LIVE_PULSE_init+0x20>)
    298a:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    298c:	4b06      	ldr	r3, [pc, #24]	; (29a8 <LIVE_PULSE_init+0x24>)
    298e:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    2990:	4b06      	ldr	r3, [pc, #24]	; (29ac <LIVE_PULSE_init+0x28>)
    2992:	4798      	blx	r3
    2994:	4603      	mov	r3, r0
    2996:	461a      	mov	r2, r3
    2998:	4905      	ldr	r1, [pc, #20]	; (29b0 <LIVE_PULSE_init+0x2c>)
    299a:	4806      	ldr	r0, [pc, #24]	; (29b4 <LIVE_PULSE_init+0x30>)
    299c:	4b06      	ldr	r3, [pc, #24]	; (29b8 <LIVE_PULSE_init+0x34>)
    299e:	4798      	blx	r3
}
    29a0:	bf00      	nop
    29a2:	bd80      	pop	{r7, pc}
    29a4:	0000295d 	.word	0x0000295d
    29a8:	0000294d 	.word	0x0000294d
    29ac:	00009ff9 	.word	0x00009ff9
    29b0:	43001800 	.word	0x43001800
    29b4:	2000e01c 	.word	0x2000e01c
    29b8:	00003a8d 	.word	0x00003a8d

000029bc <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    29bc:	b580      	push	{r7, lr}
    29be:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    29c0:	4804      	ldr	r0, [pc, #16]	; (29d4 <TIMER_HVAC_CLOCK_init+0x18>)
    29c2:	4b05      	ldr	r3, [pc, #20]	; (29d8 <TIMER_HVAC_CLOCK_init+0x1c>)
    29c4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    29c6:	2244      	movs	r2, #68	; 0x44
    29c8:	2119      	movs	r1, #25
    29ca:	4804      	ldr	r0, [pc, #16]	; (29dc <TIMER_HVAC_CLOCK_init+0x20>)
    29cc:	4b04      	ldr	r3, [pc, #16]	; (29e0 <TIMER_HVAC_CLOCK_init+0x24>)
    29ce:	4798      	blx	r3
}
    29d0:	bf00      	nop
    29d2:	bd80      	pop	{r7, pc}
    29d4:	40000800 	.word	0x40000800
    29d8:	000019cb 	.word	0x000019cb
    29dc:	40001c00 	.word	0x40001c00
    29e0:	00001825 	.word	0x00001825

000029e4 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    29e4:	b580      	push	{r7, lr}
    29e6:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    29e8:	4b05      	ldr	r3, [pc, #20]	; (2a00 <TIMER_HVAC_init+0x1c>)
    29ea:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    29ec:	4b05      	ldr	r3, [pc, #20]	; (2a04 <TIMER_HVAC_init+0x20>)
    29ee:	4798      	blx	r3
    29f0:	4603      	mov	r3, r0
    29f2:	461a      	mov	r2, r3
    29f4:	4904      	ldr	r1, [pc, #16]	; (2a08 <TIMER_HVAC_init+0x24>)
    29f6:	4805      	ldr	r0, [pc, #20]	; (2a0c <TIMER_HVAC_init+0x28>)
    29f8:	4b05      	ldr	r3, [pc, #20]	; (2a10 <TIMER_HVAC_init+0x2c>)
    29fa:	4798      	blx	r3
}
    29fc:	bf00      	nop
    29fe:	bd80      	pop	{r7, pc}
    2a00:	000029bd 	.word	0x000029bd
    2a04:	000093c9 	.word	0x000093c9
    2a08:	41016000 	.word	0x41016000
    2a0c:	2000e0e0 	.word	0x2000e0e0
    2a10:	00003ed9 	.word	0x00003ed9

00002a14 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    2a14:	b580      	push	{r7, lr}
    2a16:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    2a18:	4804      	ldr	r0, [pc, #16]	; (2a2c <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    2a1a:	4b05      	ldr	r3, [pc, #20]	; (2a30 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    2a1c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2a1e:	2244      	movs	r2, #68	; 0x44
    2a20:	2119      	movs	r1, #25
    2a22:	4804      	ldr	r0, [pc, #16]	; (2a34 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    2a24:	4b04      	ldr	r3, [pc, #16]	; (2a38 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    2a26:	4798      	blx	r3
}
    2a28:	bf00      	nop
    2a2a:	bd80      	pop	{r7, pc}
    2a2c:	40000800 	.word	0x40000800
    2a30:	000019eb 	.word	0x000019eb
    2a34:	40001c00 	.word	0x40001c00
    2a38:	00001825 	.word	0x00001825

00002a3c <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    2a3c:	b580      	push	{r7, lr}
    2a3e:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    2a40:	4b05      	ldr	r3, [pc, #20]	; (2a58 <TIMER_TEMPERATURES_init+0x1c>)
    2a42:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    2a44:	4b05      	ldr	r3, [pc, #20]	; (2a5c <TIMER_TEMPERATURES_init+0x20>)
    2a46:	4798      	blx	r3
    2a48:	4603      	mov	r3, r0
    2a4a:	461a      	mov	r2, r3
    2a4c:	4904      	ldr	r1, [pc, #16]	; (2a60 <TIMER_TEMPERATURES_init+0x24>)
    2a4e:	4805      	ldr	r0, [pc, #20]	; (2a64 <TIMER_TEMPERATURES_init+0x28>)
    2a50:	4b05      	ldr	r3, [pc, #20]	; (2a68 <TIMER_TEMPERATURES_init+0x2c>)
    2a52:	4798      	blx	r3
}
    2a54:	bf00      	nop
    2a56:	bd80      	pop	{r7, pc}
    2a58:	00002a15 	.word	0x00002a15
    2a5c:	000093c9 	.word	0x000093c9
    2a60:	41018000 	.word	0x41018000
    2a64:	2000df28 	.word	0x2000df28
    2a68:	00003ed9 	.word	0x00003ed9

00002a6c <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    2a6c:	b580      	push	{r7, lr}
    2a6e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    2a70:	4804      	ldr	r0, [pc, #16]	; (2a84 <TIMER_CCU_CLOCK_init+0x18>)
    2a72:	4b05      	ldr	r3, [pc, #20]	; (2a88 <TIMER_CCU_CLOCK_init+0x1c>)
    2a74:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2a76:	2240      	movs	r2, #64	; 0x40
    2a78:	211d      	movs	r1, #29
    2a7a:	4804      	ldr	r0, [pc, #16]	; (2a8c <TIMER_CCU_CLOCK_init+0x20>)
    2a7c:	4b04      	ldr	r3, [pc, #16]	; (2a90 <TIMER_CCU_CLOCK_init+0x24>)
    2a7e:	4798      	blx	r3
}
    2a80:	bf00      	nop
    2a82:	bd80      	pop	{r7, pc}
    2a84:	40000800 	.word	0x40000800
    2a88:	00001a2b 	.word	0x00001a2b
    2a8c:	40001c00 	.word	0x40001c00
    2a90:	00001825 	.word	0x00001825

00002a94 <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    2a94:	b580      	push	{r7, lr}
    2a96:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    2a98:	4b05      	ldr	r3, [pc, #20]	; (2ab0 <TIMER_CCU_init+0x1c>)
    2a9a:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    2a9c:	4b05      	ldr	r3, [pc, #20]	; (2ab4 <TIMER_CCU_init+0x20>)
    2a9e:	4798      	blx	r3
    2aa0:	4603      	mov	r3, r0
    2aa2:	461a      	mov	r2, r3
    2aa4:	4904      	ldr	r1, [pc, #16]	; (2ab8 <TIMER_CCU_init+0x24>)
    2aa6:	4805      	ldr	r0, [pc, #20]	; (2abc <TIMER_CCU_init+0x28>)
    2aa8:	4b05      	ldr	r3, [pc, #20]	; (2ac0 <TIMER_CCU_init+0x2c>)
    2aaa:	4798      	blx	r3
}
    2aac:	bf00      	nop
    2aae:	bd80      	pop	{r7, pc}
    2ab0:	00002a6d 	.word	0x00002a6d
    2ab4:	000093c9 	.word	0x000093c9
    2ab8:	42000c00 	.word	0x42000c00
    2abc:	2000e038 	.word	0x2000e038
    2ac0:	00003ed9 	.word	0x00003ed9

00002ac4 <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    2ac4:	b580      	push	{r7, lr}
    2ac6:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    2ac8:	2102      	movs	r1, #2
    2aca:	2018      	movs	r0, #24
    2acc:	4b0f      	ldr	r3, [pc, #60]	; (2b0c <CDCUSB_PORT_init+0x48>)
    2ace:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    2ad0:	2100      	movs	r1, #0
    2ad2:	2018      	movs	r0, #24
    2ad4:	4b0e      	ldr	r3, [pc, #56]	; (2b10 <CDCUSB_PORT_init+0x4c>)
    2ad6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    2ad8:	2100      	movs	r1, #0
    2ada:	2018      	movs	r0, #24
    2adc:	4b0d      	ldr	r3, [pc, #52]	; (2b14 <CDCUSB_PORT_init+0x50>)
    2ade:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    2ae0:	490d      	ldr	r1, [pc, #52]	; (2b18 <CDCUSB_PORT_init+0x54>)
    2ae2:	2018      	movs	r0, #24
    2ae4:	4b0d      	ldr	r3, [pc, #52]	; (2b1c <CDCUSB_PORT_init+0x58>)
    2ae6:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    2ae8:	2102      	movs	r1, #2
    2aea:	2019      	movs	r0, #25
    2aec:	4b07      	ldr	r3, [pc, #28]	; (2b0c <CDCUSB_PORT_init+0x48>)
    2aee:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    2af0:	2100      	movs	r1, #0
    2af2:	2019      	movs	r0, #25
    2af4:	4b06      	ldr	r3, [pc, #24]	; (2b10 <CDCUSB_PORT_init+0x4c>)
    2af6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    2af8:	2100      	movs	r1, #0
    2afa:	2019      	movs	r0, #25
    2afc:	4b05      	ldr	r3, [pc, #20]	; (2b14 <CDCUSB_PORT_init+0x50>)
    2afe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    2b00:	4907      	ldr	r1, [pc, #28]	; (2b20 <CDCUSB_PORT_init+0x5c>)
    2b02:	2019      	movs	r0, #25
    2b04:	4b05      	ldr	r3, [pc, #20]	; (2b1c <CDCUSB_PORT_init+0x58>)
    2b06:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    2b08:	bf00      	nop
    2b0a:	bd80      	pop	{r7, pc}
    2b0c:	00002099 	.word	0x00002099
    2b10:	000020d1 	.word	0x000020d1
    2b14:	00002045 	.word	0x00002045
    2b18:	00180007 	.word	0x00180007
    2b1c:	00002079 	.word	0x00002079
    2b20:	00190007 	.word	0x00190007

00002b24 <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    2b24:	b580      	push	{r7, lr}
    2b26:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    2b28:	2242      	movs	r2, #66	; 0x42
    2b2a:	210a      	movs	r1, #10
    2b2c:	4805      	ldr	r0, [pc, #20]	; (2b44 <CDCUSB_CLOCK_init+0x20>)
    2b2e:	4b06      	ldr	r3, [pc, #24]	; (2b48 <CDCUSB_CLOCK_init+0x24>)
    2b30:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    2b32:	4806      	ldr	r0, [pc, #24]	; (2b4c <CDCUSB_CLOCK_init+0x28>)
    2b34:	4b06      	ldr	r3, [pc, #24]	; (2b50 <CDCUSB_CLOCK_init+0x2c>)
    2b36:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    2b38:	4804      	ldr	r0, [pc, #16]	; (2b4c <CDCUSB_CLOCK_init+0x28>)
    2b3a:	4b06      	ldr	r3, [pc, #24]	; (2b54 <CDCUSB_CLOCK_init+0x30>)
    2b3c:	4798      	blx	r3
}
    2b3e:	bf00      	nop
    2b40:	bd80      	pop	{r7, pc}
    2b42:	bf00      	nop
    2b44:	40001c00 	.word	0x40001c00
    2b48:	00001825 	.word	0x00001825
    2b4c:	40000800 	.word	0x40000800
    2b50:	0000184b 	.word	0x0000184b
    2b54:	0000194b 	.word	0x0000194b

00002b58 <CDCUSB_init>:

void CDCUSB_init(void)
{
    2b58:	b580      	push	{r7, lr}
    2b5a:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    2b5c:	4b03      	ldr	r3, [pc, #12]	; (2b6c <CDCUSB_init+0x14>)
    2b5e:	4798      	blx	r3
	usb_d_init();
    2b60:	4b03      	ldr	r3, [pc, #12]	; (2b70 <CDCUSB_init+0x18>)
    2b62:	4798      	blx	r3
	CDCUSB_PORT_init();
    2b64:	4b03      	ldr	r3, [pc, #12]	; (2b74 <CDCUSB_init+0x1c>)
    2b66:	4798      	blx	r3
}
    2b68:	bf00      	nop
    2b6a:	bd80      	pop	{r7, pc}
    2b6c:	00002b25 	.word	0x00002b25
    2b70:	00004735 	.word	0x00004735
    2b74:	00002ac5 	.word	0x00002ac5

00002b78 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    2b78:	b580      	push	{r7, lr}
    2b7a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    2b7c:	4802      	ldr	r0, [pc, #8]	; (2b88 <WATCHDOG_CLOCK_init+0x10>)
    2b7e:	4b03      	ldr	r3, [pc, #12]	; (2b8c <WATCHDOG_CLOCK_init+0x14>)
    2b80:	4798      	blx	r3
}
    2b82:	bf00      	nop
    2b84:	bd80      	pop	{r7, pc}
    2b86:	bf00      	nop
    2b88:	40000800 	.word	0x40000800
    2b8c:	000018cb 	.word	0x000018cb

00002b90 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    2b90:	b580      	push	{r7, lr}
    2b92:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    2b94:	4b03      	ldr	r3, [pc, #12]	; (2ba4 <WATCHDOG_init+0x14>)
    2b96:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    2b98:	4903      	ldr	r1, [pc, #12]	; (2ba8 <WATCHDOG_init+0x18>)
    2b9a:	4804      	ldr	r0, [pc, #16]	; (2bac <WATCHDOG_init+0x1c>)
    2b9c:	4b04      	ldr	r3, [pc, #16]	; (2bb0 <WATCHDOG_init+0x20>)
    2b9e:	4798      	blx	r3
}
    2ba0:	bf00      	nop
    2ba2:	bd80      	pop	{r7, pc}
    2ba4:	00002b79 	.word	0x00002b79
    2ba8:	40002000 	.word	0x40002000
    2bac:	2000e120 	.word	0x2000e120
    2bb0:	00002119 	.word	0x00002119

00002bb4 <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    2bb4:	b580      	push	{r7, lr}
    2bb6:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    2bb8:	4904      	ldr	r1, [pc, #16]	; (2bcc <CAN_CCU_PORT_init+0x18>)
    2bba:	202d      	movs	r0, #45	; 0x2d
    2bbc:	4b04      	ldr	r3, [pc, #16]	; (2bd0 <CAN_CCU_PORT_init+0x1c>)
    2bbe:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    2bc0:	4904      	ldr	r1, [pc, #16]	; (2bd4 <CAN_CCU_PORT_init+0x20>)
    2bc2:	202c      	movs	r0, #44	; 0x2c
    2bc4:	4b02      	ldr	r3, [pc, #8]	; (2bd0 <CAN_CCU_PORT_init+0x1c>)
    2bc6:	4798      	blx	r3
}
    2bc8:	bf00      	nop
    2bca:	bd80      	pop	{r7, pc}
    2bcc:	002d0007 	.word	0x002d0007
    2bd0:	00002079 	.word	0x00002079
    2bd4:	002c0007 	.word	0x002c0007

00002bd8 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    2bd8:	b580      	push	{r7, lr}
    2bda:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    2bdc:	4807      	ldr	r0, [pc, #28]	; (2bfc <CAN_CCU_init+0x24>)
    2bde:	4b08      	ldr	r3, [pc, #32]	; (2c00 <CAN_CCU_init+0x28>)
    2be0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2be2:	2249      	movs	r2, #73	; 0x49
    2be4:	211c      	movs	r1, #28
    2be6:	4807      	ldr	r0, [pc, #28]	; (2c04 <CAN_CCU_init+0x2c>)
    2be8:	4b07      	ldr	r3, [pc, #28]	; (2c08 <CAN_CCU_init+0x30>)
    2bea:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    2bec:	4907      	ldr	r1, [pc, #28]	; (2c0c <CAN_CCU_init+0x34>)
    2bee:	4808      	ldr	r0, [pc, #32]	; (2c10 <CAN_CCU_init+0x38>)
    2bf0:	4b08      	ldr	r3, [pc, #32]	; (2c14 <CAN_CCU_init+0x3c>)
    2bf2:	4798      	blx	r3
	CAN_CCU_PORT_init();
    2bf4:	4b08      	ldr	r3, [pc, #32]	; (2c18 <CAN_CCU_init+0x40>)
    2bf6:	4798      	blx	r3
}
    2bf8:	bf00      	nop
    2bfa:	bd80      	pop	{r7, pc}
    2bfc:	40000800 	.word	0x40000800
    2c00:	0000188b 	.word	0x0000188b
    2c04:	40001c00 	.word	0x40001c00
    2c08:	00001825 	.word	0x00001825
    2c0c:	42000400 	.word	0x42000400
    2c10:	2000e078 	.word	0x2000e078
    2c14:	00003379 	.word	0x00003379
    2c18:	00002bb5 	.word	0x00002bb5

00002c1c <system_init>:

void system_init(void)
{
    2c1c:	b580      	push	{r7, lr}
    2c1e:	af00      	add	r7, sp, #0
	init_mcu();
    2c20:	4b6c      	ldr	r3, [pc, #432]	; (2dd4 <system_init+0x1b8>)
    2c22:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    2c24:	2100      	movs	r1, #0
    2c26:	2007      	movs	r0, #7
    2c28:	4b6b      	ldr	r3, [pc, #428]	; (2dd8 <system_init+0x1bc>)
    2c2a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    2c2c:	2102      	movs	r1, #2
    2c2e:	2007      	movs	r0, #7
    2c30:	4b6a      	ldr	r3, [pc, #424]	; (2ddc <system_init+0x1c0>)
    2c32:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    2c34:	f04f 31ff 	mov.w	r1, #4294967295
    2c38:	2007      	movs	r0, #7
    2c3a:	4b69      	ldr	r3, [pc, #420]	; (2de0 <system_init+0x1c4>)
    2c3c:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    2c3e:	2101      	movs	r1, #1
    2c40:	200f      	movs	r0, #15
    2c42:	4b65      	ldr	r3, [pc, #404]	; (2dd8 <system_init+0x1bc>)
    2c44:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    2c46:	2102      	movs	r1, #2
    2c48:	200f      	movs	r0, #15
    2c4a:	4b64      	ldr	r3, [pc, #400]	; (2ddc <system_init+0x1c0>)
    2c4c:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    2c4e:	f04f 31ff 	mov.w	r1, #4294967295
    2c52:	200f      	movs	r0, #15
    2c54:	4b62      	ldr	r3, [pc, #392]	; (2de0 <system_init+0x1c4>)
    2c56:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    2c58:	2101      	movs	r1, #1
    2c5a:	2013      	movs	r0, #19
    2c5c:	4b5e      	ldr	r3, [pc, #376]	; (2dd8 <system_init+0x1bc>)
    2c5e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    2c60:	2102      	movs	r1, #2
    2c62:	2013      	movs	r0, #19
    2c64:	4b5d      	ldr	r3, [pc, #372]	; (2ddc <system_init+0x1c0>)
    2c66:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    2c68:	f04f 31ff 	mov.w	r1, #4294967295
    2c6c:	2013      	movs	r0, #19
    2c6e:	4b5c      	ldr	r3, [pc, #368]	; (2de0 <system_init+0x1c4>)
    2c70:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    2c72:	2101      	movs	r1, #1
    2c74:	201b      	movs	r0, #27
    2c76:	4b58      	ldr	r3, [pc, #352]	; (2dd8 <system_init+0x1bc>)
    2c78:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    2c7a:	2102      	movs	r1, #2
    2c7c:	201b      	movs	r0, #27
    2c7e:	4b57      	ldr	r3, [pc, #348]	; (2ddc <system_init+0x1c0>)
    2c80:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    2c82:	f04f 31ff 	mov.w	r1, #4294967295
    2c86:	201b      	movs	r0, #27
    2c88:	4b55      	ldr	r3, [pc, #340]	; (2de0 <system_init+0x1c4>)
    2c8a:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    2c8c:	2101      	movs	r1, #1
    2c8e:	2027      	movs	r0, #39	; 0x27
    2c90:	4b51      	ldr	r3, [pc, #324]	; (2dd8 <system_init+0x1bc>)
    2c92:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    2c94:	2102      	movs	r1, #2
    2c96:	2027      	movs	r0, #39	; 0x27
    2c98:	4b50      	ldr	r3, [pc, #320]	; (2ddc <system_init+0x1c0>)
    2c9a:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    2c9c:	f04f 31ff 	mov.w	r1, #4294967295
    2ca0:	2027      	movs	r0, #39	; 0x27
    2ca2:	4b4f      	ldr	r3, [pc, #316]	; (2de0 <system_init+0x1c4>)
    2ca4:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    2ca6:	2101      	movs	r1, #1
    2ca8:	203d      	movs	r0, #61	; 0x3d
    2caa:	4b4b      	ldr	r3, [pc, #300]	; (2dd8 <system_init+0x1bc>)
    2cac:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    2cae:	2102      	movs	r1, #2
    2cb0:	203d      	movs	r0, #61	; 0x3d
    2cb2:	4b4a      	ldr	r3, [pc, #296]	; (2ddc <system_init+0x1c0>)
    2cb4:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    2cb6:	f04f 31ff 	mov.w	r1, #4294967295
    2cba:	203d      	movs	r0, #61	; 0x3d
    2cbc:	4b48      	ldr	r3, [pc, #288]	; (2de0 <system_init+0x1c4>)
    2cbe:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    2cc0:	2101      	movs	r1, #1
    2cc2:	203f      	movs	r0, #63	; 0x3f
    2cc4:	4b45      	ldr	r3, [pc, #276]	; (2ddc <system_init+0x1c0>)
    2cc6:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    2cc8:	2101      	movs	r1, #1
    2cca:	203f      	movs	r0, #63	; 0x3f
    2ccc:	4b45      	ldr	r3, [pc, #276]	; (2de4 <system_init+0x1c8>)
    2cce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    2cd0:	f04f 31ff 	mov.w	r1, #4294967295
    2cd4:	203f      	movs	r0, #63	; 0x3f
    2cd6:	4b42      	ldr	r3, [pc, #264]	; (2de0 <system_init+0x1c4>)
    2cd8:	4798      	blx	r3

	// GPIO on PC02

	gpio_set_pin_level(CPU_RUNNING,
    2cda:	2100      	movs	r1, #0
    2cdc:	2042      	movs	r0, #66	; 0x42
    2cde:	4b3e      	ldr	r3, [pc, #248]	; (2dd8 <system_init+0x1bc>)
    2ce0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CPU_RUNNING, GPIO_DIRECTION_OUT);
    2ce2:	2102      	movs	r1, #2
    2ce4:	2042      	movs	r0, #66	; 0x42
    2ce6:	4b3d      	ldr	r3, [pc, #244]	; (2ddc <system_init+0x1c0>)
    2ce8:	4798      	blx	r3

	gpio_set_pin_function(CPU_RUNNING, GPIO_PIN_FUNCTION_OFF);
    2cea:	f04f 31ff 	mov.w	r1, #4294967295
    2cee:	2042      	movs	r0, #66	; 0x42
    2cf0:	4b3b      	ldr	r3, [pc, #236]	; (2de0 <system_init+0x1c4>)
    2cf2:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    2cf4:	2100      	movs	r1, #0
    2cf6:	204d      	movs	r0, #77	; 0x4d
    2cf8:	4b37      	ldr	r3, [pc, #220]	; (2dd8 <system_init+0x1bc>)
    2cfa:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    2cfc:	2102      	movs	r1, #2
    2cfe:	204d      	movs	r0, #77	; 0x4d
    2d00:	4b36      	ldr	r3, [pc, #216]	; (2ddc <system_init+0x1c0>)
    2d02:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    2d04:	f04f 31ff 	mov.w	r1, #4294967295
    2d08:	204d      	movs	r0, #77	; 0x4d
    2d0a:	4b35      	ldr	r3, [pc, #212]	; (2de0 <system_init+0x1c4>)
    2d0c:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    2d0e:	2101      	movs	r1, #1
    2d10:	204e      	movs	r0, #78	; 0x4e
    2d12:	4b31      	ldr	r3, [pc, #196]	; (2dd8 <system_init+0x1bc>)
    2d14:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    2d16:	2102      	movs	r1, #2
    2d18:	204e      	movs	r0, #78	; 0x4e
    2d1a:	4b30      	ldr	r3, [pc, #192]	; (2ddc <system_init+0x1c0>)
    2d1c:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    2d1e:	f04f 31ff 	mov.w	r1, #4294967295
    2d22:	204e      	movs	r0, #78	; 0x4e
    2d24:	4b2e      	ldr	r3, [pc, #184]	; (2de0 <system_init+0x1c4>)
    2d26:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    2d28:	2100      	movs	r1, #0
    2d2a:	204f      	movs	r0, #79	; 0x4f
    2d2c:	4b2a      	ldr	r3, [pc, #168]	; (2dd8 <system_init+0x1bc>)
    2d2e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    2d30:	2102      	movs	r1, #2
    2d32:	204f      	movs	r0, #79	; 0x4f
    2d34:	4b29      	ldr	r3, [pc, #164]	; (2ddc <system_init+0x1c0>)
    2d36:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    2d38:	f04f 31ff 	mov.w	r1, #4294967295
    2d3c:	204f      	movs	r0, #79	; 0x4f
    2d3e:	4b28      	ldr	r3, [pc, #160]	; (2de0 <system_init+0x1c4>)
    2d40:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    2d42:	2100      	movs	r1, #0
    2d44:	2052      	movs	r0, #82	; 0x52
    2d46:	4b24      	ldr	r3, [pc, #144]	; (2dd8 <system_init+0x1bc>)
    2d48:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    2d4a:	2102      	movs	r1, #2
    2d4c:	2052      	movs	r0, #82	; 0x52
    2d4e:	4b23      	ldr	r3, [pc, #140]	; (2ddc <system_init+0x1c0>)
    2d50:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    2d52:	f04f 31ff 	mov.w	r1, #4294967295
    2d56:	2052      	movs	r0, #82	; 0x52
    2d58:	4b21      	ldr	r3, [pc, #132]	; (2de0 <system_init+0x1c4>)
    2d5a:	4798      	blx	r3

	// GPIO on PC19

	gpio_set_pin_level(USB_ID,
    2d5c:	2100      	movs	r1, #0
    2d5e:	2053      	movs	r0, #83	; 0x53
    2d60:	4b1d      	ldr	r3, [pc, #116]	; (2dd8 <system_init+0x1bc>)
    2d62:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(USB_ID, GPIO_DIRECTION_OUT);
    2d64:	2102      	movs	r1, #2
    2d66:	2053      	movs	r0, #83	; 0x53
    2d68:	4b1c      	ldr	r3, [pc, #112]	; (2ddc <system_init+0x1c0>)
    2d6a:	4798      	blx	r3

	gpio_set_pin_function(USB_ID, GPIO_PIN_FUNCTION_OFF);
    2d6c:	f04f 31ff 	mov.w	r1, #4294967295
    2d70:	2053      	movs	r0, #83	; 0x53
    2d72:	4b1b      	ldr	r3, [pc, #108]	; (2de0 <system_init+0x1c4>)
    2d74:	4798      	blx	r3

	CRC_CALC_init();
    2d76:	4b1c      	ldr	r3, [pc, #112]	; (2de8 <system_init+0x1cc>)
    2d78:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    2d7a:	4b1c      	ldr	r3, [pc, #112]	; (2dec <system_init+0x1d0>)
    2d7c:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    2d7e:	4b1c      	ldr	r3, [pc, #112]	; (2df0 <system_init+0x1d4>)
    2d80:	4798      	blx	r3

	QSPI_N25Q256_init();
    2d82:	4b1c      	ldr	r3, [pc, #112]	; (2df4 <system_init+0x1d8>)
    2d84:	4798      	blx	r3

	DATETIME_CLOCK_init();
    2d86:	4b1c      	ldr	r3, [pc, #112]	; (2df8 <system_init+0x1dc>)
    2d88:	4798      	blx	r3

	I2C_HEATERS_init();
    2d8a:	4b1c      	ldr	r3, [pc, #112]	; (2dfc <system_init+0x1e0>)
    2d8c:	4798      	blx	r3

	SPI_TEMP_init();
    2d8e:	4b1c      	ldr	r3, [pc, #112]	; (2e00 <system_init+0x1e4>)
    2d90:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    2d92:	4b1c      	ldr	r3, [pc, #112]	; (2e04 <system_init+0x1e8>)
    2d94:	4798      	blx	r3

	SPI_HI3593_init();
    2d96:	4b1c      	ldr	r3, [pc, #112]	; (2e08 <system_init+0x1ec>)
    2d98:	4798      	blx	r3

	I2C_FANS_init();
    2d9a:	4b1c      	ldr	r3, [pc, #112]	; (2e0c <system_init+0x1f0>)
    2d9c:	4798      	blx	r3

	TIMER_USB_init();
    2d9e:	4b1c      	ldr	r3, [pc, #112]	; (2e10 <system_init+0x1f4>)
    2da0:	4798      	blx	r3
	TIMER_ARINC_init();
    2da2:	4b1c      	ldr	r3, [pc, #112]	; (2e14 <system_init+0x1f8>)
    2da4:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    2da6:	4b1c      	ldr	r3, [pc, #112]	; (2e18 <system_init+0x1fc>)
    2da8:	4798      	blx	r3
	TIMER_INTERFACE_init();
    2daa:	4b1c      	ldr	r3, [pc, #112]	; (2e1c <system_init+0x200>)
    2dac:	4798      	blx	r3
	TIMER_EVENT_init();
    2dae:	4b1c      	ldr	r3, [pc, #112]	; (2e20 <system_init+0x204>)
    2db0:	4798      	blx	r3
	LIVE_PULSE_init();
    2db2:	4b1c      	ldr	r3, [pc, #112]	; (2e24 <system_init+0x208>)
    2db4:	4798      	blx	r3

	TIMER_HVAC_init();
    2db6:	4b1c      	ldr	r3, [pc, #112]	; (2e28 <system_init+0x20c>)
    2db8:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    2dba:	4b1c      	ldr	r3, [pc, #112]	; (2e2c <system_init+0x210>)
    2dbc:	4798      	blx	r3

	TIMER_CCU_init();
    2dbe:	4b1c      	ldr	r3, [pc, #112]	; (2e30 <system_init+0x214>)
    2dc0:	4798      	blx	r3

	CDCUSB_init();
    2dc2:	4b1c      	ldr	r3, [pc, #112]	; (2e34 <system_init+0x218>)
    2dc4:	4798      	blx	r3

	WATCHDOG_init();
    2dc6:	4b1c      	ldr	r3, [pc, #112]	; (2e38 <system_init+0x21c>)
    2dc8:	4798      	blx	r3
	CAN_CCU_init();
    2dca:	4b1c      	ldr	r3, [pc, #112]	; (2e3c <system_init+0x220>)
    2dcc:	4798      	blx	r3
}
    2dce:	bf00      	nop
    2dd0:	bd80      	pop	{r7, pc}
    2dd2:	bf00      	nop
    2dd4:	00002109 	.word	0x00002109
    2dd8:	000020d1 	.word	0x000020d1
    2ddc:	00002099 	.word	0x00002099
    2de0:	00002079 	.word	0x00002079
    2de4:	00002045 	.word	0x00002045
    2de8:	00002169 	.word	0x00002169
    2dec:	00002195 	.word	0x00002195
    2df0:	000022d5 	.word	0x000022d5
    2df4:	0000241d 	.word	0x0000241d
    2df8:	00002461 	.word	0x00002461
    2dfc:	000024f1 	.word	0x000024f1
    2e00:	000025bd 	.word	0x000025bd
    2e04:	00002655 	.word	0x00002655
    2e08:	00002721 	.word	0x00002721
    2e0c:	000027b9 	.word	0x000027b9
    2e10:	000027e5 	.word	0x000027e5
    2e14:	0000282d 	.word	0x0000282d
    2e18:	00002875 	.word	0x00002875
    2e1c:	000028bd 	.word	0x000028bd
    2e20:	00002905 	.word	0x00002905
    2e24:	00002985 	.word	0x00002985
    2e28:	000029e5 	.word	0x000029e5
    2e2c:	00002a3d 	.word	0x00002a3d
    2e30:	00002a95 	.word	0x00002a95
    2e34:	00002b59 	.word	0x00002b59
    2e38:	00002b91 	.word	0x00002b91
    2e3c:	00002bd9 	.word	0x00002bd9

00002e40 <leap_year>:
/** \brief leap year check
 *  \retval false  not leap year.
 *  \retval true  leap year.
 */
static bool leap_year(uint16_t year)
{
    2e40:	b480      	push	{r7}
    2e42:	b083      	sub	sp, #12
    2e44:	af00      	add	r7, sp, #0
    2e46:	4603      	mov	r3, r0
    2e48:	80fb      	strh	r3, [r7, #6]
	if (year & 3) {
    2e4a:	88fb      	ldrh	r3, [r7, #6]
    2e4c:	f003 0303 	and.w	r3, r3, #3
    2e50:	2b00      	cmp	r3, #0
    2e52:	d001      	beq.n	2e58 <leap_year+0x18>
		return false;
    2e54:	2300      	movs	r3, #0
    2e56:	e000      	b.n	2e5a <leap_year+0x1a>
	} else {
		return true;
    2e58:	2301      	movs	r3, #1
	}
}
    2e5a:	4618      	mov	r0, r3
    2e5c:	370c      	adds	r7, #12
    2e5e:	46bd      	mov	sp, r7
    2e60:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e64:	4770      	bx	lr
	...

00002e68 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    2e68:	b580      	push	{r7, lr}
    2e6a:	b084      	sub	sp, #16
    2e6c:	af00      	add	r7, sp, #0
    2e6e:	6078      	str	r0, [r7, #4]
    2e70:	460b      	mov	r3, r1
    2e72:	70fb      	strb	r3, [r7, #3]
	uint32_t sec_in_month = 0;
    2e74:	2300      	movs	r3, #0
    2e76:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    2e78:	687b      	ldr	r3, [r7, #4]
    2e7a:	b29b      	uxth	r3, r3
    2e7c:	4618      	mov	r0, r3
    2e7e:	4b2f      	ldr	r3, [pc, #188]	; (2f3c <get_secs_in_month+0xd4>)
    2e80:	4798      	blx	r3
    2e82:	4603      	mov	r3, r0
    2e84:	2b00      	cmp	r3, #0
    2e86:	d028      	beq.n	2eda <get_secs_in_month+0x72>
		switch (month) {
    2e88:	78fb      	ldrb	r3, [r7, #3]
    2e8a:	3b01      	subs	r3, #1
    2e8c:	2b0b      	cmp	r3, #11
    2e8e:	d84c      	bhi.n	2f2a <get_secs_in_month+0xc2>
    2e90:	a201      	add	r2, pc, #4	; (adr r2, 2e98 <get_secs_in_month+0x30>)
    2e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2e96:	bf00      	nop
    2e98:	00002ec9 	.word	0x00002ec9
    2e9c:	00002ecf 	.word	0x00002ecf
    2ea0:	00002ec9 	.word	0x00002ec9
    2ea4:	00002ed5 	.word	0x00002ed5
    2ea8:	00002ec9 	.word	0x00002ec9
    2eac:	00002ed5 	.word	0x00002ed5
    2eb0:	00002ec9 	.word	0x00002ec9
    2eb4:	00002ec9 	.word	0x00002ec9
    2eb8:	00002ed5 	.word	0x00002ed5
    2ebc:	00002ec9 	.word	0x00002ec9
    2ec0:	00002ed5 	.word	0x00002ed5
    2ec4:	00002ec9 	.word	0x00002ec9
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2ec8:	4b1d      	ldr	r3, [pc, #116]	; (2f40 <get_secs_in_month+0xd8>)
    2eca:	60fb      	str	r3, [r7, #12]
			break;
    2ecc:	e030      	b.n	2f30 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    2ece:	4b1d      	ldr	r3, [pc, #116]	; (2f44 <get_secs_in_month+0xdc>)
    2ed0:	60fb      	str	r3, [r7, #12]
			break;
    2ed2:	e02d      	b.n	2f30 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    2ed4:	4b1c      	ldr	r3, [pc, #112]	; (2f48 <get_secs_in_month+0xe0>)
    2ed6:	60fb      	str	r3, [r7, #12]
			break;
    2ed8:	e02a      	b.n	2f30 <get_secs_in_month+0xc8>
		default:
			break;
		}
	} else {
		switch (month) {
    2eda:	78fb      	ldrb	r3, [r7, #3]
    2edc:	3b01      	subs	r3, #1
    2ede:	2b0b      	cmp	r3, #11
    2ee0:	d825      	bhi.n	2f2e <get_secs_in_month+0xc6>
    2ee2:	a201      	add	r2, pc, #4	; (adr r2, 2ee8 <get_secs_in_month+0x80>)
    2ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2ee8:	00002f19 	.word	0x00002f19
    2eec:	00002f1f 	.word	0x00002f1f
    2ef0:	00002f19 	.word	0x00002f19
    2ef4:	00002f25 	.word	0x00002f25
    2ef8:	00002f19 	.word	0x00002f19
    2efc:	00002f25 	.word	0x00002f25
    2f00:	00002f19 	.word	0x00002f19
    2f04:	00002f19 	.word	0x00002f19
    2f08:	00002f25 	.word	0x00002f25
    2f0c:	00002f19 	.word	0x00002f19
    2f10:	00002f25 	.word	0x00002f25
    2f14:	00002f19 	.word	0x00002f19
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    2f18:	4b09      	ldr	r3, [pc, #36]	; (2f40 <get_secs_in_month+0xd8>)
    2f1a:	60fb      	str	r3, [r7, #12]
			break;
    2f1c:	e008      	b.n	2f30 <get_secs_in_month+0xc8>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    2f1e:	4b0b      	ldr	r3, [pc, #44]	; (2f4c <get_secs_in_month+0xe4>)
    2f20:	60fb      	str	r3, [r7, #12]
			break;
    2f22:	e005      	b.n	2f30 <get_secs_in_month+0xc8>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    2f24:	4b08      	ldr	r3, [pc, #32]	; (2f48 <get_secs_in_month+0xe0>)
    2f26:	60fb      	str	r3, [r7, #12]
			break;
    2f28:	e002      	b.n	2f30 <get_secs_in_month+0xc8>
			break;
    2f2a:	bf00      	nop
    2f2c:	e000      	b.n	2f30 <get_secs_in_month+0xc8>
		default:
			break;
    2f2e:	bf00      	nop
		}
	}

	return sec_in_month;
    2f30:	68fb      	ldr	r3, [r7, #12]
}
    2f32:	4618      	mov	r0, r3
    2f34:	3710      	adds	r7, #16
    2f36:	46bd      	mov	sp, r7
    2f38:	bd80      	pop	{r7, pc}
    2f3a:	bf00      	nop
    2f3c:	00002e41 	.word	0x00002e41
    2f40:	0028de80 	.word	0x0028de80
    2f44:	00263b80 	.word	0x00263b80
    2f48:	00278d00 	.word	0x00278d00
    2f4c:	0024ea00 	.word	0x0024ea00

00002f50 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(struct calendar_descriptor *const calendar, uint32_t ts,
                                             struct calendar_date_time *dt)
{
    2f50:	b580      	push	{r7, lr}
    2f52:	b08a      	sub	sp, #40	; 0x28
    2f54:	af00      	add	r7, sp, #0
    2f56:	60f8      	str	r0, [r7, #12]
    2f58:	60b9      	str	r1, [r7, #8]
    2f5a:	607a      	str	r2, [r7, #4]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = calendar->base_year;
    2f5c:	68fb      	ldr	r3, [r7, #12]
    2f5e:	699b      	ldr	r3, [r3, #24]
    2f60:	623b      	str	r3, [r7, #32]
	uint8_t  tmp_month   = 1;
    2f62:	2301      	movs	r3, #1
    2f64:	77fb      	strb	r3, [r7, #31]
	uint8_t  tmp_day     = 1;
    2f66:	2301      	movs	r3, #1
    2f68:	77bb      	strb	r3, [r7, #30]
	uint8_t  tmp_hour    = 0;
    2f6a:	2300      	movs	r3, #0
    2f6c:	777b      	strb	r3, [r7, #29]
	uint8_t  tmp_minutes = 0;
    2f6e:	2300      	movs	r3, #0
    2f70:	773b      	strb	r3, [r7, #28]

	tmp = ts;
    2f72:	68bb      	ldr	r3, [r7, #8]
    2f74:	627b      	str	r3, [r7, #36]	; 0x24

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    2f76:	6a3b      	ldr	r3, [r7, #32]
    2f78:	b29b      	uxth	r3, r3
    2f7a:	4618      	mov	r0, r3
    2f7c:	4b32      	ldr	r3, [pc, #200]	; (3048 <convert_timestamp_to_datetime+0xf8>)
    2f7e:	4798      	blx	r3
    2f80:	4603      	mov	r3, r0
    2f82:	2b00      	cmp	r3, #0
    2f84:	d001      	beq.n	2f8a <convert_timestamp_to_datetime+0x3a>
    2f86:	4b31      	ldr	r3, [pc, #196]	; (304c <convert_timestamp_to_datetime+0xfc>)
    2f88:	e000      	b.n	2f8c <convert_timestamp_to_datetime+0x3c>
    2f8a:	4b31      	ldr	r3, [pc, #196]	; (3050 <convert_timestamp_to_datetime+0x100>)
    2f8c:	61bb      	str	r3, [r7, #24]

		if (tmp >= sec_in_year) {
    2f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2f90:	69bb      	ldr	r3, [r7, #24]
    2f92:	429a      	cmp	r2, r3
    2f94:	d307      	bcc.n	2fa6 <convert_timestamp_to_datetime+0x56>
			tmp -= sec_in_year;
    2f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2f98:	69bb      	ldr	r3, [r7, #24]
    2f9a:	1ad3      	subs	r3, r2, r3
    2f9c:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_year++;
    2f9e:	6a3b      	ldr	r3, [r7, #32]
    2fa0:	3301      	adds	r3, #1
    2fa2:	623b      	str	r3, [r7, #32]
    2fa4:	e7e7      	b.n	2f76 <convert_timestamp_to_datetime+0x26>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    2fa6:	7ffb      	ldrb	r3, [r7, #31]
    2fa8:	4619      	mov	r1, r3
    2faa:	6a38      	ldr	r0, [r7, #32]
    2fac:	4b29      	ldr	r3, [pc, #164]	; (3054 <convert_timestamp_to_datetime+0x104>)
    2fae:	4798      	blx	r3
    2fb0:	6178      	str	r0, [r7, #20]

		if (tmp >= sec_in_month) {
    2fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2fb4:	697b      	ldr	r3, [r7, #20]
    2fb6:	429a      	cmp	r2, r3
    2fb8:	d307      	bcc.n	2fca <convert_timestamp_to_datetime+0x7a>
			tmp -= sec_in_month;
    2fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2fbc:	697b      	ldr	r3, [r7, #20]
    2fbe:	1ad3      	subs	r3, r2, r3
    2fc0:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_month++;
    2fc2:	7ffb      	ldrb	r3, [r7, #31]
    2fc4:	3301      	adds	r3, #1
    2fc6:	77fb      	strb	r3, [r7, #31]
    2fc8:	e7ed      	b.n	2fa6 <convert_timestamp_to_datetime+0x56>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    2fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2fcc:	4a22      	ldr	r2, [pc, #136]	; (3058 <convert_timestamp_to_datetime+0x108>)
    2fce:	4293      	cmp	r3, r2
    2fd0:	d909      	bls.n	2fe6 <convert_timestamp_to_datetime+0x96>
			tmp -= SECS_IN_DAY;
    2fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2fd4:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
    2fd8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
    2fdc:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_day++;
    2fde:	7fbb      	ldrb	r3, [r7, #30]
    2fe0:	3301      	adds	r3, #1
    2fe2:	77bb      	strb	r3, [r7, #30]
    2fe4:	e7f1      	b.n	2fca <convert_timestamp_to_datetime+0x7a>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    2fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2fe8:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
    2fec:	d307      	bcc.n	2ffe <convert_timestamp_to_datetime+0xae>
			tmp -= SECS_IN_HOUR;
    2fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ff0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
    2ff4:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_hour++;
    2ff6:	7f7b      	ldrb	r3, [r7, #29]
    2ff8:	3301      	adds	r3, #1
    2ffa:	777b      	strb	r3, [r7, #29]
    2ffc:	e7f3      	b.n	2fe6 <convert_timestamp_to_datetime+0x96>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    2ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3000:	2b3b      	cmp	r3, #59	; 0x3b
    3002:	d906      	bls.n	3012 <convert_timestamp_to_datetime+0xc2>
			tmp -= SECS_IN_MINUTE;
    3004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3006:	3b3c      	subs	r3, #60	; 0x3c
    3008:	627b      	str	r3, [r7, #36]	; 0x24
			tmp_minutes++;
    300a:	7f3b      	ldrb	r3, [r7, #28]
    300c:	3301      	adds	r3, #1
    300e:	773b      	strb	r3, [r7, #28]
		if (tmp >= SECS_IN_MINUTE) {
    3010:	e7f5      	b.n	2ffe <convert_timestamp_to_datetime+0xae>
		} else {
			break;
    3012:	bf00      	nop
		}
	}

	dt->date.year  = tmp_year;
    3014:	6a3b      	ldr	r3, [r7, #32]
    3016:	b29a      	uxth	r2, r3
    3018:	687b      	ldr	r3, [r7, #4]
    301a:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    301c:	687b      	ldr	r3, [r7, #4]
    301e:	7ffa      	ldrb	r2, [r7, #31]
    3020:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    3022:	687b      	ldr	r3, [r7, #4]
    3024:	7fba      	ldrb	r2, [r7, #30]
    3026:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    3028:	687b      	ldr	r3, [r7, #4]
    302a:	7f7a      	ldrb	r2, [r7, #29]
    302c:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    302e:	687b      	ldr	r3, [r7, #4]
    3030:	7f3a      	ldrb	r2, [r7, #28]
    3032:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    3034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3036:	b2da      	uxtb	r2, r3
    3038:	687b      	ldr	r3, [r7, #4]
    303a:	701a      	strb	r2, [r3, #0]

	return ERR_NONE;
    303c:	2300      	movs	r3, #0
}
    303e:	4618      	mov	r0, r3
    3040:	3728      	adds	r7, #40	; 0x28
    3042:	46bd      	mov	sp, r7
    3044:	bd80      	pop	{r7, pc}
    3046:	bf00      	nop
    3048:	00002e41 	.word	0x00002e41
    304c:	01e28500 	.word	0x01e28500
    3050:	01e13380 	.word	0x01e13380
    3054:	00002e69 	.word	0x00002e69
    3058:	0001517f 	.word	0x0001517f

0000305c <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_descriptor *const calendar, struct calendar_date_time *dt)
{
    305c:	b580      	push	{r7, lr}
    305e:	b086      	sub	sp, #24
    3060:	af00      	add	r7, sp, #0
    3062:	6078      	str	r0, [r7, #4]
    3064:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
    3066:	2300      	movs	r3, #0
    3068:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    306a:	2300      	movs	r3, #0
    306c:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - calendar->base_year;
    306e:	683b      	ldr	r3, [r7, #0]
    3070:	88db      	ldrh	r3, [r3, #6]
    3072:	b2da      	uxtb	r2, r3
    3074:	687b      	ldr	r3, [r7, #4]
    3076:	699b      	ldr	r3, [r3, #24]
    3078:	b2db      	uxtb	r3, r3
    307a:	1ad3      	subs	r3, r2, r3
    307c:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
    307e:	683b      	ldr	r3, [r7, #0]
    3080:	795b      	ldrb	r3, [r3, #5]
    3082:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
    3084:	683b      	ldr	r3, [r7, #0]
    3086:	791b      	ldrb	r3, [r3, #4]
    3088:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
    308a:	683b      	ldr	r3, [r7, #0]
    308c:	789b      	ldrb	r3, [r3, #2]
    308e:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
    3090:	683b      	ldr	r3, [r7, #0]
    3092:	785b      	ldrb	r3, [r3, #1]
    3094:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
    3096:	683b      	ldr	r3, [r7, #0]
    3098:	781b      	ldrb	r3, [r3, #0]
    309a:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    309c:	2300      	movs	r3, #0
    309e:	613b      	str	r3, [r7, #16]
    30a0:	e01a      	b.n	30d8 <convert_datetime_to_timestamp+0x7c>
		if (leap_year(calendar->base_year + i)) {
    30a2:	687b      	ldr	r3, [r7, #4]
    30a4:	699b      	ldr	r3, [r3, #24]
    30a6:	b29a      	uxth	r2, r3
    30a8:	693b      	ldr	r3, [r7, #16]
    30aa:	b29b      	uxth	r3, r3
    30ac:	4413      	add	r3, r2
    30ae:	b29b      	uxth	r3, r3
    30b0:	4618      	mov	r0, r3
    30b2:	4b29      	ldr	r3, [pc, #164]	; (3158 <convert_datetime_to_timestamp+0xfc>)
    30b4:	4798      	blx	r3
    30b6:	4603      	mov	r3, r0
    30b8:	2b00      	cmp	r3, #0
    30ba:	d006      	beq.n	30ca <convert_datetime_to_timestamp+0x6e>
			tmp += SECS_IN_LEAP_YEAR;
    30bc:	697b      	ldr	r3, [r7, #20]
    30be:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
    30c2:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
    30c6:	617b      	str	r3, [r7, #20]
    30c8:	e003      	b.n	30d2 <convert_datetime_to_timestamp+0x76>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    30ca:	697a      	ldr	r2, [r7, #20]
    30cc:	4b23      	ldr	r3, [pc, #140]	; (315c <convert_datetime_to_timestamp+0x100>)
    30ce:	4413      	add	r3, r2
    30d0:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    30d2:	693b      	ldr	r3, [r7, #16]
    30d4:	3301      	adds	r3, #1
    30d6:	613b      	str	r3, [r7, #16]
    30d8:	7bfa      	ldrb	r2, [r7, #15]
    30da:	693b      	ldr	r3, [r7, #16]
    30dc:	429a      	cmp	r2, r3
    30de:	d8e0      	bhi.n	30a2 <convert_datetime_to_timestamp+0x46>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    30e0:	2301      	movs	r3, #1
    30e2:	613b      	str	r3, [r7, #16]
    30e4:	e00f      	b.n	3106 <convert_datetime_to_timestamp+0xaa>
		tmp += get_secs_in_month(dt->date.year, i);
    30e6:	683b      	ldr	r3, [r7, #0]
    30e8:	88db      	ldrh	r3, [r3, #6]
    30ea:	461a      	mov	r2, r3
    30ec:	693b      	ldr	r3, [r7, #16]
    30ee:	b2db      	uxtb	r3, r3
    30f0:	4619      	mov	r1, r3
    30f2:	4610      	mov	r0, r2
    30f4:	4b1a      	ldr	r3, [pc, #104]	; (3160 <convert_datetime_to_timestamp+0x104>)
    30f6:	4798      	blx	r3
    30f8:	4602      	mov	r2, r0
    30fa:	697b      	ldr	r3, [r7, #20]
    30fc:	4413      	add	r3, r2
    30fe:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    3100:	693b      	ldr	r3, [r7, #16]
    3102:	3301      	adds	r3, #1
    3104:	613b      	str	r3, [r7, #16]
    3106:	7bba      	ldrb	r2, [r7, #14]
    3108:	693b      	ldr	r3, [r7, #16]
    310a:	429a      	cmp	r2, r3
    310c:	d8eb      	bhi.n	30e6 <convert_datetime_to_timestamp+0x8a>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    310e:	7b7b      	ldrb	r3, [r7, #13]
    3110:	3b01      	subs	r3, #1
    3112:	4a14      	ldr	r2, [pc, #80]	; (3164 <convert_datetime_to_timestamp+0x108>)
    3114:	fb02 f303 	mul.w	r3, r2, r3
    3118:	461a      	mov	r2, r3
    311a:	697b      	ldr	r3, [r7, #20]
    311c:	4413      	add	r3, r2
    311e:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    3120:	7b3b      	ldrb	r3, [r7, #12]
    3122:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    3126:	fb02 f303 	mul.w	r3, r2, r3
    312a:	461a      	mov	r2, r3
    312c:	697b      	ldr	r3, [r7, #20]
    312e:	4413      	add	r3, r2
    3130:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    3132:	7afa      	ldrb	r2, [r7, #11]
    3134:	4613      	mov	r3, r2
    3136:	011b      	lsls	r3, r3, #4
    3138:	1a9b      	subs	r3, r3, r2
    313a:	009b      	lsls	r3, r3, #2
    313c:	461a      	mov	r2, r3
    313e:	697b      	ldr	r3, [r7, #20]
    3140:	4413      	add	r3, r2
    3142:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    3144:	7abb      	ldrb	r3, [r7, #10]
    3146:	697a      	ldr	r2, [r7, #20]
    3148:	4413      	add	r3, r2
    314a:	617b      	str	r3, [r7, #20]

	return tmp;
    314c:	697b      	ldr	r3, [r7, #20]
}
    314e:	4618      	mov	r0, r3
    3150:	3718      	adds	r7, #24
    3152:	46bd      	mov	sp, r7
    3154:	bd80      	pop	{r7, pc}
    3156:	bf00      	nop
    3158:	00002e41 	.word	0x00002e41
    315c:	01e13380 	.word	0x01e13380
    3160:	00002e69 	.word	0x00002e69
    3164:	00015180 	.word	0x00015180

00003168 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    3168:	b580      	push	{r7, lr}
    316a:	b084      	sub	sp, #16
    316c:	af00      	add	r7, sp, #0
    316e:	6078      	str	r0, [r7, #4]
    3170:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    3172:	2300      	movs	r3, #0
    3174:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    3176:	687b      	ldr	r3, [r7, #4]
    3178:	2b00      	cmp	r3, #0
    317a:	bf14      	ite	ne
    317c:	2301      	movne	r3, #1
    317e:	2300      	moveq	r3, #0
    3180:	b2db      	uxtb	r3, r3
    3182:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    3186:	4911      	ldr	r1, [pc, #68]	; (31cc <calendar_init+0x64>)
    3188:	4618      	mov	r0, r3
    318a:	4b11      	ldr	r3, [pc, #68]	; (31d0 <calendar_init+0x68>)
    318c:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    318e:	687b      	ldr	r3, [r7, #4]
    3190:	681a      	ldr	r2, [r3, #0]
    3192:	683b      	ldr	r3, [r7, #0]
    3194:	429a      	cmp	r2, r3
    3196:	d101      	bne.n	319c <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    3198:	2300      	movs	r3, #0
    319a:	e013      	b.n	31c4 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    319c:	687b      	ldr	r3, [r7, #4]
    319e:	681b      	ldr	r3, [r3, #0]
    31a0:	2b00      	cmp	r3, #0
    31a2:	d002      	beq.n	31aa <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    31a4:	f06f 0311 	mvn.w	r3, #17
    31a8:	e00c      	b.n	31c4 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    31aa:	687b      	ldr	r3, [r7, #4]
    31ac:	683a      	ldr	r2, [r7, #0]
    31ae:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    31b0:	687b      	ldr	r3, [r7, #4]
    31b2:	4618      	mov	r0, r3
    31b4:	4b07      	ldr	r3, [pc, #28]	; (31d4 <calendar_init+0x6c>)
    31b6:	4798      	blx	r3
    31b8:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    31ba:	687b      	ldr	r3, [r7, #4]
    31bc:	f240 72b2 	movw	r2, #1970	; 0x7b2
    31c0:	619a      	str	r2, [r3, #24]

	return ret;
    31c2:	68fb      	ldr	r3, [r7, #12]
}
    31c4:	4618      	mov	r0, r3
    31c6:	3710      	adds	r7, #16
    31c8:	46bd      	mov	sp, r7
    31ca:	bd80      	pop	{r7, pc}
    31cc:	0001b144 	.word	0x0001b144
    31d0:	00004cdd 	.word	0x00004cdd
    31d4:	00007781 	.word	0x00007781

000031d8 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
    31d8:	b580      	push	{r7, lr}
    31da:	b082      	sub	sp, #8
    31dc:	af00      	add	r7, sp, #0
    31de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(calendar);
    31e0:	687b      	ldr	r3, [r7, #4]
    31e2:	2b00      	cmp	r3, #0
    31e4:	bf14      	ite	ne
    31e6:	2301      	movne	r3, #1
    31e8:	2300      	moveq	r3, #0
    31ea:	b2db      	uxtb	r3, r3
    31ec:	f240 12e5 	movw	r2, #485	; 0x1e5
    31f0:	4906      	ldr	r1, [pc, #24]	; (320c <calendar_enable+0x34>)
    31f2:	4618      	mov	r0, r3
    31f4:	4b06      	ldr	r3, [pc, #24]	; (3210 <calendar_enable+0x38>)
    31f6:	4798      	blx	r3

	_calendar_enable(&calendar->device);
    31f8:	687b      	ldr	r3, [r7, #4]
    31fa:	4618      	mov	r0, r3
    31fc:	4b05      	ldr	r3, [pc, #20]	; (3214 <calendar_enable+0x3c>)
    31fe:	4798      	blx	r3

	return ERR_NONE;
    3200:	2300      	movs	r3, #0
}
    3202:	4618      	mov	r0, r3
    3204:	3708      	adds	r7, #8
    3206:	46bd      	mov	sp, r7
    3208:	bd80      	pop	{r7, pc}
    320a:	bf00      	nop
    320c:	0001b144 	.word	0x0001b144
    3210:	00004cdd 	.word	0x00004cdd
    3214:	00007839 	.word	0x00007839

00003218 <calendar_set_time>:
}

/** \brief Set time for calendar
 */
int32_t calendar_set_time(struct calendar_descriptor *const calendar, struct calendar_time *const p_calendar_time)
{
    3218:	b580      	push	{r7, lr}
    321a:	b086      	sub	sp, #24
    321c:	af00      	add	r7, sp, #0
    321e:	6078      	str	r0, [r7, #4]
    3220:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    3222:	687b      	ldr	r3, [r7, #4]
    3224:	2b00      	cmp	r3, #0
    3226:	bf14      	ite	ne
    3228:	2301      	movne	r3, #1
    322a:	2300      	moveq	r3, #0
    322c:	b2db      	uxtb	r3, r3
    322e:	f44f 7203 	mov.w	r2, #524	; 0x20c
    3232:	4915      	ldr	r1, [pc, #84]	; (3288 <calendar_set_time+0x70>)
    3234:	4618      	mov	r0, r3
    3236:	4b15      	ldr	r3, [pc, #84]	; (328c <calendar_set_time+0x74>)
    3238:	4798      	blx	r3

	/* convert time to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    323a:	687b      	ldr	r3, [r7, #4]
    323c:	4618      	mov	r0, r3
    323e:	4b14      	ldr	r3, [pc, #80]	; (3290 <calendar_set_time+0x78>)
    3240:	4798      	blx	r3
    3242:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    3244:	f107 0308 	add.w	r3, r7, #8
    3248:	461a      	mov	r2, r3
    324a:	6979      	ldr	r1, [r7, #20]
    324c:	6878      	ldr	r0, [r7, #4]
    324e:	4b11      	ldr	r3, [pc, #68]	; (3294 <calendar_set_time+0x7c>)
    3250:	4798      	blx	r3
	dt.time.sec  = p_calendar_time->sec;
    3252:	683b      	ldr	r3, [r7, #0]
    3254:	781b      	ldrb	r3, [r3, #0]
    3256:	723b      	strb	r3, [r7, #8]
	dt.time.min  = p_calendar_time->min;
    3258:	683b      	ldr	r3, [r7, #0]
    325a:	785b      	ldrb	r3, [r3, #1]
    325c:	727b      	strb	r3, [r7, #9]
	dt.time.hour = p_calendar_time->hour;
    325e:	683b      	ldr	r3, [r7, #0]
    3260:	789b      	ldrb	r3, [r3, #2]
    3262:	72bb      	strb	r3, [r7, #10]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    3264:	f107 0308 	add.w	r3, r7, #8
    3268:	4619      	mov	r1, r3
    326a:	6878      	ldr	r0, [r7, #4]
    326c:	4b0a      	ldr	r3, [pc, #40]	; (3298 <calendar_set_time+0x80>)
    326e:	4798      	blx	r3
    3270:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    3272:	687b      	ldr	r3, [r7, #4]
    3274:	6939      	ldr	r1, [r7, #16]
    3276:	4618      	mov	r0, r3
    3278:	4b08      	ldr	r3, [pc, #32]	; (329c <calendar_set_time+0x84>)
    327a:	4798      	blx	r3

	return ERR_NONE;
    327c:	2300      	movs	r3, #0
}
    327e:	4618      	mov	r0, r3
    3280:	3718      	adds	r7, #24
    3282:	46bd      	mov	sp, r7
    3284:	bd80      	pop	{r7, pc}
    3286:	bf00      	nop
    3288:	0001b144 	.word	0x0001b144
    328c:	00004cdd 	.word	0x00004cdd
    3290:	000078d5 	.word	0x000078d5
    3294:	00002f51 	.word	0x00002f51
    3298:	0000305d 	.word	0x0000305d
    329c:	00007885 	.word	0x00007885

000032a0 <calendar_set_date>:

/** \brief Set date for calendar
 */
int32_t calendar_set_date(struct calendar_descriptor *const calendar, struct calendar_date *const p_calendar_date)
{
    32a0:	b580      	push	{r7, lr}
    32a2:	b086      	sub	sp, #24
    32a4:	af00      	add	r7, sp, #0
    32a6:	6078      	str	r0, [r7, #4]
    32a8:	6039      	str	r1, [r7, #0]
	struct calendar_date_time dt;
	uint32_t                  current_ts, new_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    32aa:	687b      	ldr	r3, [r7, #4]
    32ac:	2b00      	cmp	r3, #0
    32ae:	bf14      	ite	ne
    32b0:	2301      	movne	r3, #1
    32b2:	2300      	moveq	r3, #0
    32b4:	b2db      	uxtb	r3, r3
    32b6:	f44f 7209 	mov.w	r2, #548	; 0x224
    32ba:	4915      	ldr	r1, [pc, #84]	; (3310 <calendar_set_date+0x70>)
    32bc:	4618      	mov	r0, r3
    32be:	4b15      	ldr	r3, [pc, #84]	; (3314 <calendar_set_date+0x74>)
    32c0:	4798      	blx	r3

	/* convert date to timestamp */
	current_ts = _calendar_get_counter(&calendar->device);
    32c2:	687b      	ldr	r3, [r7, #4]
    32c4:	4618      	mov	r0, r3
    32c6:	4b14      	ldr	r3, [pc, #80]	; (3318 <calendar_set_date+0x78>)
    32c8:	4798      	blx	r3
    32ca:	6178      	str	r0, [r7, #20]
	convert_timestamp_to_datetime(calendar, current_ts, &dt);
    32cc:	f107 0308 	add.w	r3, r7, #8
    32d0:	461a      	mov	r2, r3
    32d2:	6979      	ldr	r1, [r7, #20]
    32d4:	6878      	ldr	r0, [r7, #4]
    32d6:	4b11      	ldr	r3, [pc, #68]	; (331c <calendar_set_date+0x7c>)
    32d8:	4798      	blx	r3
	dt.date.day   = p_calendar_date->day;
    32da:	683b      	ldr	r3, [r7, #0]
    32dc:	781b      	ldrb	r3, [r3, #0]
    32de:	733b      	strb	r3, [r7, #12]
	dt.date.month = p_calendar_date->month;
    32e0:	683b      	ldr	r3, [r7, #0]
    32e2:	785b      	ldrb	r3, [r3, #1]
    32e4:	737b      	strb	r3, [r7, #13]
	dt.date.year  = p_calendar_date->year;
    32e6:	683b      	ldr	r3, [r7, #0]
    32e8:	885b      	ldrh	r3, [r3, #2]
    32ea:	81fb      	strh	r3, [r7, #14]

	new_ts = convert_datetime_to_timestamp(calendar, &dt);
    32ec:	f107 0308 	add.w	r3, r7, #8
    32f0:	4619      	mov	r1, r3
    32f2:	6878      	ldr	r0, [r7, #4]
    32f4:	4b0a      	ldr	r3, [pc, #40]	; (3320 <calendar_set_date+0x80>)
    32f6:	4798      	blx	r3
    32f8:	6138      	str	r0, [r7, #16]

	_calendar_set_counter(&calendar->device, new_ts);
    32fa:	687b      	ldr	r3, [r7, #4]
    32fc:	6939      	ldr	r1, [r7, #16]
    32fe:	4618      	mov	r0, r3
    3300:	4b08      	ldr	r3, [pc, #32]	; (3324 <calendar_set_date+0x84>)
    3302:	4798      	blx	r3

	return ERR_NONE;
    3304:	2300      	movs	r3, #0
}
    3306:	4618      	mov	r0, r3
    3308:	3718      	adds	r7, #24
    330a:	46bd      	mov	sp, r7
    330c:	bd80      	pop	{r7, pc}
    330e:	bf00      	nop
    3310:	0001b144 	.word	0x0001b144
    3314:	00004cdd 	.word	0x00004cdd
    3318:	000078d5 	.word	0x000078d5
    331c:	00002f51 	.word	0x00002f51
    3320:	0000305d 	.word	0x0000305d
    3324:	00007885 	.word	0x00007885

00003328 <calendar_get_date_time>:

/** \brief Get date/time for calendar
 */
int32_t calendar_get_date_time(struct calendar_descriptor *const calendar, struct calendar_date_time *const date_time)
{
    3328:	b580      	push	{r7, lr}
    332a:	b084      	sub	sp, #16
    332c:	af00      	add	r7, sp, #0
    332e:	6078      	str	r0, [r7, #4]
    3330:	6039      	str	r1, [r7, #0]
	uint32_t current_ts;

	/* Sanity check arguments */
	ASSERT(calendar);
    3332:	687b      	ldr	r3, [r7, #4]
    3334:	2b00      	cmp	r3, #0
    3336:	bf14      	ite	ne
    3338:	2301      	movne	r3, #1
    333a:	2300      	moveq	r3, #0
    333c:	b2db      	uxtb	r3, r3
    333e:	f240 223b 	movw	r2, #571	; 0x23b
    3342:	4909      	ldr	r1, [pc, #36]	; (3368 <calendar_get_date_time+0x40>)
    3344:	4618      	mov	r0, r3
    3346:	4b09      	ldr	r3, [pc, #36]	; (336c <calendar_get_date_time+0x44>)
    3348:	4798      	blx	r3

	/* convert current timestamp to date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    334a:	687b      	ldr	r3, [r7, #4]
    334c:	4618      	mov	r0, r3
    334e:	4b08      	ldr	r3, [pc, #32]	; (3370 <calendar_get_date_time+0x48>)
    3350:	4798      	blx	r3
    3352:	60f8      	str	r0, [r7, #12]
	convert_timestamp_to_datetime(calendar, current_ts, date_time);
    3354:	683a      	ldr	r2, [r7, #0]
    3356:	68f9      	ldr	r1, [r7, #12]
    3358:	6878      	ldr	r0, [r7, #4]
    335a:	4b06      	ldr	r3, [pc, #24]	; (3374 <calendar_get_date_time+0x4c>)
    335c:	4798      	blx	r3

	return ERR_NONE;
    335e:	2300      	movs	r3, #0
}
    3360:	4618      	mov	r0, r3
    3362:	3710      	adds	r7, #16
    3364:	46bd      	mov	sp, r7
    3366:	bd80      	pop	{r7, pc}
    3368:	0001b144 	.word	0x0001b144
    336c:	00004cdd 	.word	0x00004cdd
    3370:	000078d5 	.word	0x000078d5
    3374:	00002f51 	.word	0x00002f51

00003378 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    3378:	b580      	push	{r7, lr}
    337a:	b084      	sub	sp, #16
    337c:	af00      	add	r7, sp, #0
    337e:	6078      	str	r0, [r7, #4]
    3380:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    3382:	687b      	ldr	r3, [r7, #4]
    3384:	2b00      	cmp	r3, #0
    3386:	d004      	beq.n	3392 <can_async_init+0x1a>
    3388:	683b      	ldr	r3, [r7, #0]
    338a:	2b00      	cmp	r3, #0
    338c:	d001      	beq.n	3392 <can_async_init+0x1a>
    338e:	2301      	movs	r3, #1
    3390:	e000      	b.n	3394 <can_async_init+0x1c>
    3392:	2300      	movs	r3, #0
    3394:	f003 0301 	and.w	r3, r3, #1
    3398:	b2db      	uxtb	r3, r3
    339a:	2241      	movs	r2, #65	; 0x41
    339c:	490e      	ldr	r1, [pc, #56]	; (33d8 <can_async_init+0x60>)
    339e:	4618      	mov	r0, r3
    33a0:	4b0e      	ldr	r3, [pc, #56]	; (33dc <can_async_init+0x64>)
    33a2:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    33a4:	687b      	ldr	r3, [r7, #4]
    33a6:	6839      	ldr	r1, [r7, #0]
    33a8:	4618      	mov	r0, r3
    33aa:	4b0d      	ldr	r3, [pc, #52]	; (33e0 <can_async_init+0x68>)
    33ac:	4798      	blx	r3
    33ae:	60f8      	str	r0, [r7, #12]
	if (rc) {
    33b0:	68fb      	ldr	r3, [r7, #12]
    33b2:	2b00      	cmp	r3, #0
    33b4:	d001      	beq.n	33ba <can_async_init+0x42>
		return rc;
    33b6:	68fb      	ldr	r3, [r7, #12]
    33b8:	e009      	b.n	33ce <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    33ba:	687b      	ldr	r3, [r7, #4]
    33bc:	4a09      	ldr	r2, [pc, #36]	; (33e4 <can_async_init+0x6c>)
    33be:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    33c0:	687b      	ldr	r3, [r7, #4]
    33c2:	4a09      	ldr	r2, [pc, #36]	; (33e8 <can_async_init+0x70>)
    33c4:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    33c6:	687b      	ldr	r3, [r7, #4]
    33c8:	4a08      	ldr	r2, [pc, #32]	; (33ec <can_async_init+0x74>)
    33ca:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    33cc:	2300      	movs	r3, #0
}
    33ce:	4618      	mov	r0, r3
    33d0:	3710      	adds	r7, #16
    33d2:	46bd      	mov	sp, r7
    33d4:	bd80      	pop	{r7, pc}
    33d6:	bf00      	nop
    33d8:	0001b160 	.word	0x0001b160
    33dc:	00004cdd 	.word	0x00004cdd
    33e0:	00005445 	.word	0x00005445
    33e4:	0000358d 	.word	0x0000358d
    33e8:	000035b1 	.word	0x000035b1
    33ec:	000035d5 	.word	0x000035d5

000033f0 <can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t can_async_enable(struct can_async_descriptor *const descr)
{
    33f0:	b580      	push	{r7, lr}
    33f2:	b082      	sub	sp, #8
    33f4:	af00      	add	r7, sp, #0
    33f6:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    33f8:	687b      	ldr	r3, [r7, #4]
    33fa:	2b00      	cmp	r3, #0
    33fc:	bf14      	ite	ne
    33fe:	2301      	movne	r3, #1
    3400:	2300      	moveq	r3, #0
    3402:	b2db      	uxtb	r3, r3
    3404:	225c      	movs	r2, #92	; 0x5c
    3406:	4906      	ldr	r1, [pc, #24]	; (3420 <can_async_enable+0x30>)
    3408:	4618      	mov	r0, r3
    340a:	4b06      	ldr	r3, [pc, #24]	; (3424 <can_async_enable+0x34>)
    340c:	4798      	blx	r3
	return _can_async_enable(&descr->dev);
    340e:	687b      	ldr	r3, [r7, #4]
    3410:	4618      	mov	r0, r3
    3412:	4b05      	ldr	r3, [pc, #20]	; (3428 <can_async_enable+0x38>)
    3414:	4798      	blx	r3
    3416:	4603      	mov	r3, r0
}
    3418:	4618      	mov	r0, r3
    341a:	3708      	adds	r7, #8
    341c:	46bd      	mov	sp, r7
    341e:	bd80      	pop	{r7, pc}
    3420:	0001b160 	.word	0x0001b160
    3424:	00004cdd 	.word	0x00004cdd
    3428:	0000562d 	.word	0x0000562d

0000342c <can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t can_async_read(struct can_async_descriptor *const descr, struct can_message *msg)
{
    342c:	b580      	push	{r7, lr}
    342e:	b082      	sub	sp, #8
    3430:	af00      	add	r7, sp, #0
    3432:	6078      	str	r0, [r7, #4]
    3434:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    3436:	687b      	ldr	r3, [r7, #4]
    3438:	2b00      	cmp	r3, #0
    343a:	d004      	beq.n	3446 <can_async_read+0x1a>
    343c:	683b      	ldr	r3, [r7, #0]
    343e:	2b00      	cmp	r3, #0
    3440:	d001      	beq.n	3446 <can_async_read+0x1a>
    3442:	2301      	movs	r3, #1
    3444:	e000      	b.n	3448 <can_async_read+0x1c>
    3446:	2300      	movs	r3, #0
    3448:	f003 0301 	and.w	r3, r3, #1
    344c:	b2db      	uxtb	r3, r3
    344e:	226e      	movs	r2, #110	; 0x6e
    3450:	4906      	ldr	r1, [pc, #24]	; (346c <can_async_read+0x40>)
    3452:	4618      	mov	r0, r3
    3454:	4b06      	ldr	r3, [pc, #24]	; (3470 <can_async_read+0x44>)
    3456:	4798      	blx	r3
	return _can_async_read(&descr->dev, msg);
    3458:	687b      	ldr	r3, [r7, #4]
    345a:	6839      	ldr	r1, [r7, #0]
    345c:	4618      	mov	r0, r3
    345e:	4b05      	ldr	r3, [pc, #20]	; (3474 <can_async_read+0x48>)
    3460:	4798      	blx	r3
    3462:	4603      	mov	r3, r0
}
    3464:	4618      	mov	r0, r3
    3466:	3708      	adds	r7, #8
    3468:	46bd      	mov	sp, r7
    346a:	bd80      	pop	{r7, pc}
    346c:	0001b160 	.word	0x0001b160
    3470:	00004cdd 	.word	0x00004cdd
    3474:	0000564d 	.word	0x0000564d

00003478 <can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t can_async_write(struct can_async_descriptor *const descr, struct can_message *msg)
{
    3478:	b580      	push	{r7, lr}
    347a:	b082      	sub	sp, #8
    347c:	af00      	add	r7, sp, #0
    347e:	6078      	str	r0, [r7, #4]
    3480:	6039      	str	r1, [r7, #0]
	ASSERT(descr && msg);
    3482:	687b      	ldr	r3, [r7, #4]
    3484:	2b00      	cmp	r3, #0
    3486:	d004      	beq.n	3492 <can_async_write+0x1a>
    3488:	683b      	ldr	r3, [r7, #0]
    348a:	2b00      	cmp	r3, #0
    348c:	d001      	beq.n	3492 <can_async_write+0x1a>
    348e:	2301      	movs	r3, #1
    3490:	e000      	b.n	3494 <can_async_write+0x1c>
    3492:	2300      	movs	r3, #0
    3494:	f003 0301 	and.w	r3, r3, #1
    3498:	b2db      	uxtb	r3, r3
    349a:	2277      	movs	r2, #119	; 0x77
    349c:	4906      	ldr	r1, [pc, #24]	; (34b8 <can_async_write+0x40>)
    349e:	4618      	mov	r0, r3
    34a0:	4b06      	ldr	r3, [pc, #24]	; (34bc <can_async_write+0x44>)
    34a2:	4798      	blx	r3
	return _can_async_write(&descr->dev, msg);
    34a4:	687b      	ldr	r3, [r7, #4]
    34a6:	6839      	ldr	r1, [r7, #0]
    34a8:	4618      	mov	r0, r3
    34aa:	4b05      	ldr	r3, [pc, #20]	; (34c0 <can_async_write+0x48>)
    34ac:	4798      	blx	r3
    34ae:	4603      	mov	r3, r0
}
    34b0:	4618      	mov	r0, r3
    34b2:	3708      	adds	r7, #8
    34b4:	46bd      	mov	sp, r7
    34b6:	bd80      	pop	{r7, pc}
    34b8:	0001b160 	.word	0x0001b160
    34bc:	00004cdd 	.word	0x00004cdd
    34c0:	0000575d 	.word	0x0000575d

000034c4 <can_async_register_callback>:
/**
 * \brief Register CAN callback function to interrupt
 */
int32_t can_async_register_callback(struct can_async_descriptor *const descr, enum can_async_callback_type type,
                                    FUNC_PTR cb)
{
    34c4:	b580      	push	{r7, lr}
    34c6:	b084      	sub	sp, #16
    34c8:	af00      	add	r7, sp, #0
    34ca:	60f8      	str	r0, [r7, #12]
    34cc:	460b      	mov	r3, r1
    34ce:	607a      	str	r2, [r7, #4]
    34d0:	72fb      	strb	r3, [r7, #11]
	ASSERT(descr);
    34d2:	68fb      	ldr	r3, [r7, #12]
    34d4:	2b00      	cmp	r3, #0
    34d6:	bf14      	ite	ne
    34d8:	2301      	movne	r3, #1
    34da:	2300      	moveq	r3, #0
    34dc:	b2db      	uxtb	r3, r3
    34de:	2281      	movs	r2, #129	; 0x81
    34e0:	4914      	ldr	r1, [pc, #80]	; (3534 <can_async_register_callback+0x70>)
    34e2:	4618      	mov	r0, r3
    34e4:	4b14      	ldr	r3, [pc, #80]	; (3538 <can_async_register_callback+0x74>)
    34e6:	4798      	blx	r3

	switch (type) {
    34e8:	7afb      	ldrb	r3, [r7, #11]
    34ea:	2b01      	cmp	r3, #1
    34ec:	d007      	beq.n	34fe <can_async_register_callback+0x3a>
    34ee:	2b02      	cmp	r3, #2
    34f0:	d009      	beq.n	3506 <can_async_register_callback+0x42>
    34f2:	2b00      	cmp	r3, #0
    34f4:	d10b      	bne.n	350e <can_async_register_callback+0x4a>
	case CAN_ASYNC_RX_CB:
		descr->cb.rx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    34f6:	68fb      	ldr	r3, [r7, #12]
    34f8:	687a      	ldr	r2, [r7, #4]
    34fa:	621a      	str	r2, [r3, #32]
		break;
    34fc:	e00a      	b.n	3514 <can_async_register_callback+0x50>
	case CAN_ASYNC_TX_CB:
		descr->cb.tx_done = (cb != NULL) ? (can_cb_t)cb : NULL;
    34fe:	68fb      	ldr	r3, [r7, #12]
    3500:	687a      	ldr	r2, [r7, #4]
    3502:	61da      	str	r2, [r3, #28]
		break;
    3504:	e006      	b.n	3514 <can_async_register_callback+0x50>
	case CAN_ASYNC_IRQ_CB:
		descr->cb.irq_handler
		    = (cb != NULL) ? (void (*)(struct can_async_descriptor *const, enum can_async_interrupt_type))cb : NULL;
    3506:	68fb      	ldr	r3, [r7, #12]
    3508:	687a      	ldr	r2, [r7, #4]
    350a:	625a      	str	r2, [r3, #36]	; 0x24
		break;
    350c:	e002      	b.n	3514 <can_async_register_callback+0x50>
	default:
		return ERR_INVALID_ARG;
    350e:	f06f 030c 	mvn.w	r3, #12
    3512:	e00b      	b.n	352c <can_async_register_callback+0x68>
	}

	_can_async_set_irq_state(&descr->dev, type, NULL != cb);
    3514:	68f8      	ldr	r0, [r7, #12]
    3516:	687b      	ldr	r3, [r7, #4]
    3518:	2b00      	cmp	r3, #0
    351a:	bf14      	ite	ne
    351c:	2301      	movne	r3, #1
    351e:	2300      	moveq	r3, #0
    3520:	b2da      	uxtb	r2, r3
    3522:	7afb      	ldrb	r3, [r7, #11]
    3524:	4619      	mov	r1, r3
    3526:	4b05      	ldr	r3, [pc, #20]	; (353c <can_async_register_callback+0x78>)
    3528:	4798      	blx	r3

	return ERR_NONE;
    352a:	2300      	movs	r3, #0
}
    352c:	4618      	mov	r0, r3
    352e:	3710      	adds	r7, #16
    3530:	46bd      	mov	sp, r7
    3532:	bd80      	pop	{r7, pc}
    3534:	0001b160 	.word	0x0001b160
    3538:	00004cdd 	.word	0x00004cdd
    353c:	00005919 	.word	0x00005919

00003540 <can_async_set_filter>:
/**
 * \brief Set CAN filter
 */
int32_t can_async_set_filter(struct can_async_descriptor *const descr, uint8_t index, enum can_format fmt,
                             struct can_filter *filter)
{
    3540:	b590      	push	{r4, r7, lr}
    3542:	b085      	sub	sp, #20
    3544:	af00      	add	r7, sp, #0
    3546:	60f8      	str	r0, [r7, #12]
    3548:	607b      	str	r3, [r7, #4]
    354a:	460b      	mov	r3, r1
    354c:	72fb      	strb	r3, [r7, #11]
    354e:	4613      	mov	r3, r2
    3550:	72bb      	strb	r3, [r7, #10]
	ASSERT(descr);
    3552:	68fb      	ldr	r3, [r7, #12]
    3554:	2b00      	cmp	r3, #0
    3556:	bf14      	ite	ne
    3558:	2301      	movne	r3, #1
    355a:	2300      	moveq	r3, #0
    355c:	b2db      	uxtb	r3, r3
    355e:	22b8      	movs	r2, #184	; 0xb8
    3560:	4907      	ldr	r1, [pc, #28]	; (3580 <can_async_set_filter+0x40>)
    3562:	4618      	mov	r0, r3
    3564:	4b07      	ldr	r3, [pc, #28]	; (3584 <can_async_set_filter+0x44>)
    3566:	4798      	blx	r3
	return _can_async_set_filter(&descr->dev, index, fmt, filter);
    3568:	68f8      	ldr	r0, [r7, #12]
    356a:	7aba      	ldrb	r2, [r7, #10]
    356c:	7af9      	ldrb	r1, [r7, #11]
    356e:	687b      	ldr	r3, [r7, #4]
    3570:	4c05      	ldr	r4, [pc, #20]	; (3588 <can_async_set_filter+0x48>)
    3572:	47a0      	blx	r4
    3574:	4603      	mov	r3, r0
}
    3576:	4618      	mov	r0, r3
    3578:	3714      	adds	r7, #20
    357a:	46bd      	mov	sp, r7
    357c:	bd90      	pop	{r4, r7, pc}
    357e:	bf00      	nop
    3580:	0001b160 	.word	0x0001b160
    3584:	00004cdd 	.word	0x00004cdd
    3588:	000059a9 	.word	0x000059a9

0000358c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    358c:	b580      	push	{r7, lr}
    358e:	b084      	sub	sp, #16
    3590:	af00      	add	r7, sp, #0
    3592:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    3594:	687b      	ldr	r3, [r7, #4]
    3596:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    3598:	68fb      	ldr	r3, [r7, #12]
    359a:	69db      	ldr	r3, [r3, #28]
    359c:	2b00      	cmp	r3, #0
    359e:	d003      	beq.n	35a8 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    35a0:	68fb      	ldr	r3, [r7, #12]
    35a2:	69db      	ldr	r3, [r3, #28]
    35a4:	68f8      	ldr	r0, [r7, #12]
    35a6:	4798      	blx	r3
	}
}
    35a8:	bf00      	nop
    35aa:	3710      	adds	r7, #16
    35ac:	46bd      	mov	sp, r7
    35ae:	bd80      	pop	{r7, pc}

000035b0 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    35b0:	b580      	push	{r7, lr}
    35b2:	b084      	sub	sp, #16
    35b4:	af00      	add	r7, sp, #0
    35b6:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    35b8:	687b      	ldr	r3, [r7, #4]
    35ba:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    35bc:	68fb      	ldr	r3, [r7, #12]
    35be:	6a1b      	ldr	r3, [r3, #32]
    35c0:	2b00      	cmp	r3, #0
    35c2:	d003      	beq.n	35cc <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    35c4:	68fb      	ldr	r3, [r7, #12]
    35c6:	6a1b      	ldr	r3, [r3, #32]
    35c8:	68f8      	ldr	r0, [r7, #12]
    35ca:	4798      	blx	r3
	}
}
    35cc:	bf00      	nop
    35ce:	3710      	adds	r7, #16
    35d0:	46bd      	mov	sp, r7
    35d2:	bd80      	pop	{r7, pc}

000035d4 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    35d4:	b580      	push	{r7, lr}
    35d6:	b084      	sub	sp, #16
    35d8:	af00      	add	r7, sp, #0
    35da:	6078      	str	r0, [r7, #4]
    35dc:	460b      	mov	r3, r1
    35de:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    35e0:	687b      	ldr	r3, [r7, #4]
    35e2:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    35e4:	68fb      	ldr	r3, [r7, #12]
    35e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    35e8:	2b00      	cmp	r3, #0
    35ea:	d005      	beq.n	35f8 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    35ec:	68fb      	ldr	r3, [r7, #12]
    35ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    35f0:	78fa      	ldrb	r2, [r7, #3]
    35f2:	4611      	mov	r1, r2
    35f4:	68f8      	ldr	r0, [r7, #12]
    35f6:	4798      	blx	r3
	}
}
    35f8:	bf00      	nop
    35fa:	3710      	adds	r7, #16
    35fc:	46bd      	mov	sp, r7
    35fe:	bd80      	pop	{r7, pc}

00003600 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    3600:	b580      	push	{r7, lr}
    3602:	b082      	sub	sp, #8
    3604:	af00      	add	r7, sp, #0
    3606:	6078      	str	r0, [r7, #4]
    3608:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    360a:	687b      	ldr	r3, [r7, #4]
    360c:	2b00      	cmp	r3, #0
    360e:	d004      	beq.n	361a <crc_sync_init+0x1a>
    3610:	683b      	ldr	r3, [r7, #0]
    3612:	2b00      	cmp	r3, #0
    3614:	d001      	beq.n	361a <crc_sync_init+0x1a>
    3616:	2301      	movs	r3, #1
    3618:	e000      	b.n	361c <crc_sync_init+0x1c>
    361a:	2300      	movs	r3, #0
    361c:	f003 0301 	and.w	r3, r3, #1
    3620:	b2db      	uxtb	r3, r3
    3622:	222b      	movs	r2, #43	; 0x2b
    3624:	4906      	ldr	r1, [pc, #24]	; (3640 <crc_sync_init+0x40>)
    3626:	4618      	mov	r0, r3
    3628:	4b06      	ldr	r3, [pc, #24]	; (3644 <crc_sync_init+0x44>)
    362a:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    362c:	687b      	ldr	r3, [r7, #4]
    362e:	6839      	ldr	r1, [r7, #0]
    3630:	4618      	mov	r0, r3
    3632:	4b05      	ldr	r3, [pc, #20]	; (3648 <crc_sync_init+0x48>)
    3634:	4798      	blx	r3
    3636:	4603      	mov	r3, r0
}
    3638:	4618      	mov	r0, r3
    363a:	3708      	adds	r7, #8
    363c:	46bd      	mov	sp, r7
    363e:	bd80      	pop	{r7, pc}
    3640:	0001b17c 	.word	0x0001b17c
    3644:	00004cdd 	.word	0x00004cdd
    3648:	00005f89 	.word	0x00005f89

0000364c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    364c:	b590      	push	{r4, r7, lr}
    364e:	b083      	sub	sp, #12
    3650:	af00      	add	r7, sp, #0
    3652:	4603      	mov	r3, r0
    3654:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    3656:	4b07      	ldr	r3, [pc, #28]	; (3674 <delay_us+0x28>)
    3658:	681c      	ldr	r4, [r3, #0]
    365a:	88fb      	ldrh	r3, [r7, #6]
    365c:	4618      	mov	r0, r3
    365e:	4b06      	ldr	r3, [pc, #24]	; (3678 <delay_us+0x2c>)
    3660:	4798      	blx	r3
    3662:	4603      	mov	r3, r0
    3664:	4619      	mov	r1, r3
    3666:	4620      	mov	r0, r4
    3668:	4b04      	ldr	r3, [pc, #16]	; (367c <delay_us+0x30>)
    366a:	4798      	blx	r3
}
    366c:	bf00      	nop
    366e:	370c      	adds	r7, #12
    3670:	46bd      	mov	sp, r7
    3672:	bd90      	pop	{r4, r7, pc}
    3674:	200021c8 	.word	0x200021c8
    3678:	00005cdd 	.word	0x00005cdd
    367c:	00005e71 	.word	0x00005e71

00003680 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    3680:	b590      	push	{r4, r7, lr}
    3682:	b083      	sub	sp, #12
    3684:	af00      	add	r7, sp, #0
    3686:	4603      	mov	r3, r0
    3688:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    368a:	4b07      	ldr	r3, [pc, #28]	; (36a8 <delay_ms+0x28>)
    368c:	681c      	ldr	r4, [r3, #0]
    368e:	88fb      	ldrh	r3, [r7, #6]
    3690:	4618      	mov	r0, r3
    3692:	4b06      	ldr	r3, [pc, #24]	; (36ac <delay_ms+0x2c>)
    3694:	4798      	blx	r3
    3696:	4603      	mov	r3, r0
    3698:	4619      	mov	r1, r3
    369a:	4620      	mov	r0, r4
    369c:	4b04      	ldr	r3, [pc, #16]	; (36b0 <delay_ms+0x30>)
    369e:	4798      	blx	r3
}
    36a0:	bf00      	nop
    36a2:	370c      	adds	r7, #12
    36a4:	46bd      	mov	sp, r7
    36a6:	bd90      	pop	{r4, r7, pc}
    36a8:	200021c8 	.word	0x200021c8
    36ac:	00005e49 	.word	0x00005e49
    36b0:	00005e71 	.word	0x00005e71

000036b4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    36b4:	b580      	push	{r7, lr}
    36b6:	af00      	add	r7, sp, #0
	return _event_system_init();
    36b8:	4b02      	ldr	r3, [pc, #8]	; (36c4 <event_system_init+0x10>)
    36ba:	4798      	blx	r3
    36bc:	4603      	mov	r3, r0
}
    36be:	4618      	mov	r0, r3
    36c0:	bd80      	pop	{r7, pc}
    36c2:	bf00      	nop
    36c4:	00006769 	.word	0x00006769

000036c8 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    36c8:	b580      	push	{r7, lr}
    36ca:	b082      	sub	sp, #8
    36cc:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    36ce:	2300      	movs	r3, #0
    36d0:	80fb      	strh	r3, [r7, #6]
    36d2:	e00e      	b.n	36f2 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    36d4:	88fb      	ldrh	r3, [r7, #6]
    36d6:	4a0c      	ldr	r2, [pc, #48]	; (3708 <ext_irq_init+0x40>)
    36d8:	00db      	lsls	r3, r3, #3
    36da:	4413      	add	r3, r2
    36dc:	f04f 32ff 	mov.w	r2, #4294967295
    36e0:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    36e2:	88fb      	ldrh	r3, [r7, #6]
    36e4:	4a08      	ldr	r2, [pc, #32]	; (3708 <ext_irq_init+0x40>)
    36e6:	2100      	movs	r1, #0
    36e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    36ec:	88fb      	ldrh	r3, [r7, #6]
    36ee:	3301      	adds	r3, #1
    36f0:	80fb      	strh	r3, [r7, #6]
    36f2:	88fb      	ldrh	r3, [r7, #6]
    36f4:	2b09      	cmp	r3, #9
    36f6:	d9ed      	bls.n	36d4 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    36f8:	4804      	ldr	r0, [pc, #16]	; (370c <ext_irq_init+0x44>)
    36fa:	4b05      	ldr	r3, [pc, #20]	; (3710 <ext_irq_init+0x48>)
    36fc:	4798      	blx	r3
    36fe:	4603      	mov	r3, r0
}
    3700:	4618      	mov	r0, r3
    3702:	3708      	adds	r7, #8
    3704:	46bd      	mov	sp, r7
    3706:	bd80      	pop	{r7, pc}
    3708:	200021cc 	.word	0x200021cc
    370c:	0000386d 	.word	0x0000386d
    3710:	000062c9 	.word	0x000062c9

00003714 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    3714:	b580      	push	{r7, lr}
    3716:	b086      	sub	sp, #24
    3718:	af00      	add	r7, sp, #0
    371a:	6078      	str	r0, [r7, #4]
    371c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    371e:	2300      	movs	r3, #0
    3720:	75fb      	strb	r3, [r7, #23]
    3722:	2300      	movs	r3, #0
    3724:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    3726:	2300      	movs	r3, #0
    3728:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    372a:	e012      	b.n	3752 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    372c:	7dfb      	ldrb	r3, [r7, #23]
    372e:	4a4d      	ldr	r2, [pc, #308]	; (3864 <ext_irq_register+0x150>)
    3730:	00db      	lsls	r3, r3, #3
    3732:	4413      	add	r3, r2
    3734:	685a      	ldr	r2, [r3, #4]
    3736:	687b      	ldr	r3, [r7, #4]
    3738:	429a      	cmp	r2, r3
    373a:	d107      	bne.n	374c <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    373c:	7dfb      	ldrb	r3, [r7, #23]
    373e:	4949      	ldr	r1, [pc, #292]	; (3864 <ext_irq_register+0x150>)
    3740:	683a      	ldr	r2, [r7, #0]
    3742:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    3746:	2301      	movs	r3, #1
    3748:	757b      	strb	r3, [r7, #21]
			break;
    374a:	e005      	b.n	3758 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    374c:	7dfb      	ldrb	r3, [r7, #23]
    374e:	3301      	adds	r3, #1
    3750:	75fb      	strb	r3, [r7, #23]
    3752:	7dfb      	ldrb	r3, [r7, #23]
    3754:	2b09      	cmp	r3, #9
    3756:	d9e9      	bls.n	372c <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    3758:	683b      	ldr	r3, [r7, #0]
    375a:	2b00      	cmp	r3, #0
    375c:	d10e      	bne.n	377c <ext_irq_register+0x68>
		if (!found) {
    375e:	7d7b      	ldrb	r3, [r7, #21]
    3760:	f083 0301 	eor.w	r3, r3, #1
    3764:	b2db      	uxtb	r3, r3
    3766:	2b00      	cmp	r3, #0
    3768:	d002      	beq.n	3770 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    376a:	f06f 030c 	mvn.w	r3, #12
    376e:	e074      	b.n	385a <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    3770:	2100      	movs	r1, #0
    3772:	6878      	ldr	r0, [r7, #4]
    3774:	4b3c      	ldr	r3, [pc, #240]	; (3868 <ext_irq_register+0x154>)
    3776:	4798      	blx	r3
    3778:	4603      	mov	r3, r0
    377a:	e06e      	b.n	385a <ext_irq_register+0x146>
	}

	if (!found) {
    377c:	7d7b      	ldrb	r3, [r7, #21]
    377e:	f083 0301 	eor.w	r3, r3, #1
    3782:	b2db      	uxtb	r3, r3
    3784:	2b00      	cmp	r3, #0
    3786:	d05a      	beq.n	383e <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    3788:	2300      	movs	r3, #0
    378a:	75fb      	strb	r3, [r7, #23]
    378c:	e016      	b.n	37bc <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    378e:	7dfb      	ldrb	r3, [r7, #23]
    3790:	4a34      	ldr	r2, [pc, #208]	; (3864 <ext_irq_register+0x150>)
    3792:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3796:	2b00      	cmp	r3, #0
    3798:	d10d      	bne.n	37b6 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    379a:	7dfb      	ldrb	r3, [r7, #23]
    379c:	4931      	ldr	r1, [pc, #196]	; (3864 <ext_irq_register+0x150>)
    379e:	683a      	ldr	r2, [r7, #0]
    37a0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    37a4:	7dfb      	ldrb	r3, [r7, #23]
    37a6:	4a2f      	ldr	r2, [pc, #188]	; (3864 <ext_irq_register+0x150>)
    37a8:	00db      	lsls	r3, r3, #3
    37aa:	4413      	add	r3, r2
    37ac:	687a      	ldr	r2, [r7, #4]
    37ae:	605a      	str	r2, [r3, #4]
				found           = true;
    37b0:	2301      	movs	r3, #1
    37b2:	757b      	strb	r3, [r7, #21]
				break;
    37b4:	e005      	b.n	37c2 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    37b6:	7dfb      	ldrb	r3, [r7, #23]
    37b8:	3301      	adds	r3, #1
    37ba:	75fb      	strb	r3, [r7, #23]
    37bc:	7dfb      	ldrb	r3, [r7, #23]
    37be:	2b09      	cmp	r3, #9
    37c0:	d9e5      	bls.n	378e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    37c2:	e036      	b.n	3832 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    37c4:	7dfb      	ldrb	r3, [r7, #23]
    37c6:	4a27      	ldr	r2, [pc, #156]	; (3864 <ext_irq_register+0x150>)
    37c8:	00db      	lsls	r3, r3, #3
    37ca:	4413      	add	r3, r2
    37cc:	685a      	ldr	r2, [r3, #4]
    37ce:	7dbb      	ldrb	r3, [r7, #22]
    37d0:	4924      	ldr	r1, [pc, #144]	; (3864 <ext_irq_register+0x150>)
    37d2:	00db      	lsls	r3, r3, #3
    37d4:	440b      	add	r3, r1
    37d6:	685b      	ldr	r3, [r3, #4]
    37d8:	429a      	cmp	r2, r3
    37da:	d227      	bcs.n	382c <ext_irq_register+0x118>
    37dc:	7dbb      	ldrb	r3, [r7, #22]
    37de:	4a21      	ldr	r2, [pc, #132]	; (3864 <ext_irq_register+0x150>)
    37e0:	00db      	lsls	r3, r3, #3
    37e2:	4413      	add	r3, r2
    37e4:	685b      	ldr	r3, [r3, #4]
    37e6:	f1b3 3fff 	cmp.w	r3, #4294967295
    37ea:	d01f      	beq.n	382c <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    37ec:	7dbb      	ldrb	r3, [r7, #22]
    37ee:	491d      	ldr	r1, [pc, #116]	; (3864 <ext_irq_register+0x150>)
    37f0:	f107 020c 	add.w	r2, r7, #12
    37f4:	00db      	lsls	r3, r3, #3
    37f6:	440b      	add	r3, r1
    37f8:	e893 0003 	ldmia.w	r3, {r0, r1}
    37fc:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    3800:	7dbb      	ldrb	r3, [r7, #22]
    3802:	7dfa      	ldrb	r2, [r7, #23]
    3804:	4817      	ldr	r0, [pc, #92]	; (3864 <ext_irq_register+0x150>)
    3806:	4917      	ldr	r1, [pc, #92]	; (3864 <ext_irq_register+0x150>)
    3808:	00db      	lsls	r3, r3, #3
    380a:	4403      	add	r3, r0
    380c:	00d2      	lsls	r2, r2, #3
    380e:	440a      	add	r2, r1
    3810:	e892 0003 	ldmia.w	r2, {r0, r1}
    3814:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    3818:	7dfb      	ldrb	r3, [r7, #23]
    381a:	4a12      	ldr	r2, [pc, #72]	; (3864 <ext_irq_register+0x150>)
    381c:	00db      	lsls	r3, r3, #3
    381e:	4413      	add	r3, r2
    3820:	f107 020c 	add.w	r2, r7, #12
    3824:	e892 0003 	ldmia.w	r2, {r0, r1}
    3828:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    382c:	7dbb      	ldrb	r3, [r7, #22]
    382e:	3301      	adds	r3, #1
    3830:	75bb      	strb	r3, [r7, #22]
    3832:	7dbb      	ldrb	r3, [r7, #22]
    3834:	2b09      	cmp	r3, #9
    3836:	d802      	bhi.n	383e <ext_irq_register+0x12a>
    3838:	7dfb      	ldrb	r3, [r7, #23]
    383a:	2b09      	cmp	r3, #9
    383c:	d9c2      	bls.n	37c4 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    383e:	7d7b      	ldrb	r3, [r7, #21]
    3840:	f083 0301 	eor.w	r3, r3, #1
    3844:	b2db      	uxtb	r3, r3
    3846:	2b00      	cmp	r3, #0
    3848:	d002      	beq.n	3850 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    384a:	f06f 030c 	mvn.w	r3, #12
    384e:	e004      	b.n	385a <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    3850:	2101      	movs	r1, #1
    3852:	6878      	ldr	r0, [r7, #4]
    3854:	4b04      	ldr	r3, [pc, #16]	; (3868 <ext_irq_register+0x154>)
    3856:	4798      	blx	r3
    3858:	4603      	mov	r3, r0
}
    385a:	4618      	mov	r0, r3
    385c:	3718      	adds	r7, #24
    385e:	46bd      	mov	sp, r7
    3860:	bd80      	pop	{r7, pc}
    3862:	bf00      	nop
    3864:	200021cc 	.word	0x200021cc
    3868:	00006471 	.word	0x00006471

0000386c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    386c:	b580      	push	{r7, lr}
    386e:	b084      	sub	sp, #16
    3870:	af00      	add	r7, sp, #0
    3872:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    3874:	2300      	movs	r3, #0
    3876:	73fb      	strb	r3, [r7, #15]
    3878:	230a      	movs	r3, #10
    387a:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    387c:	e02a      	b.n	38d4 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    387e:	7bba      	ldrb	r2, [r7, #14]
    3880:	7bfb      	ldrb	r3, [r7, #15]
    3882:	4413      	add	r3, r2
    3884:	105b      	asrs	r3, r3, #1
    3886:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    3888:	7b7b      	ldrb	r3, [r7, #13]
    388a:	2b09      	cmp	r3, #9
    388c:	d827      	bhi.n	38de <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    388e:	7b7b      	ldrb	r3, [r7, #13]
    3890:	4a16      	ldr	r2, [pc, #88]	; (38ec <process_ext_irq+0x80>)
    3892:	00db      	lsls	r3, r3, #3
    3894:	4413      	add	r3, r2
    3896:	685a      	ldr	r2, [r3, #4]
    3898:	687b      	ldr	r3, [r7, #4]
    389a:	429a      	cmp	r2, r3
    389c:	d10b      	bne.n	38b6 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    389e:	7b7b      	ldrb	r3, [r7, #13]
    38a0:	4a12      	ldr	r2, [pc, #72]	; (38ec <process_ext_irq+0x80>)
    38a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    38a6:	2b00      	cmp	r3, #0
    38a8:	d01b      	beq.n	38e2 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    38aa:	7b7b      	ldrb	r3, [r7, #13]
    38ac:	4a0f      	ldr	r2, [pc, #60]	; (38ec <process_ext_irq+0x80>)
    38ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    38b2:	4798      	blx	r3
			}
			return;
    38b4:	e015      	b.n	38e2 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    38b6:	7b7b      	ldrb	r3, [r7, #13]
    38b8:	4a0c      	ldr	r2, [pc, #48]	; (38ec <process_ext_irq+0x80>)
    38ba:	00db      	lsls	r3, r3, #3
    38bc:	4413      	add	r3, r2
    38be:	685a      	ldr	r2, [r3, #4]
    38c0:	687b      	ldr	r3, [r7, #4]
    38c2:	429a      	cmp	r2, r3
    38c4:	d203      	bcs.n	38ce <process_ext_irq+0x62>
			lower = middle + 1;
    38c6:	7b7b      	ldrb	r3, [r7, #13]
    38c8:	3301      	adds	r3, #1
    38ca:	73fb      	strb	r3, [r7, #15]
    38cc:	e002      	b.n	38d4 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    38ce:	7b7b      	ldrb	r3, [r7, #13]
    38d0:	3b01      	subs	r3, #1
    38d2:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    38d4:	7bba      	ldrb	r2, [r7, #14]
    38d6:	7bfb      	ldrb	r3, [r7, #15]
    38d8:	429a      	cmp	r2, r3
    38da:	d2d0      	bcs.n	387e <process_ext_irq+0x12>
    38dc:	e002      	b.n	38e4 <process_ext_irq+0x78>
			return;
    38de:	bf00      	nop
    38e0:	e000      	b.n	38e4 <process_ext_irq+0x78>
			return;
    38e2:	bf00      	nop
		}
	}
}
    38e4:	3710      	adds	r7, #16
    38e6:	46bd      	mov	sp, r7
    38e8:	bd80      	pop	{r7, pc}
    38ea:	bf00      	nop
    38ec:	200021cc 	.word	0x200021cc

000038f0 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    38f0:	b580      	push	{r7, lr}
    38f2:	b08a      	sub	sp, #40	; 0x28
    38f4:	af00      	add	r7, sp, #0
    38f6:	60f8      	str	r0, [r7, #12]
    38f8:	60b9      	str	r1, [r7, #8]
    38fa:	4613      	mov	r3, r2
    38fc:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    38fe:	68fb      	ldr	r3, [r7, #12]
    3900:	3b14      	subs	r3, #20
    3902:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    3904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3906:	8b9b      	ldrh	r3, [r3, #28]
    3908:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    390a:	88fb      	ldrh	r3, [r7, #6]
    390c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    390e:	f248 0301 	movw	r3, #32769	; 0x8001
    3912:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    3914:	68bb      	ldr	r3, [r7, #8]
    3916:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    3918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    391a:	f107 0214 	add.w	r2, r7, #20
    391e:	4611      	mov	r1, r2
    3920:	4618      	mov	r0, r3
    3922:	4b06      	ldr	r3, [pc, #24]	; (393c <i2c_m_sync_read+0x4c>)
    3924:	4798      	blx	r3
    3926:	6238      	str	r0, [r7, #32]

	if (ret) {
    3928:	6a3b      	ldr	r3, [r7, #32]
    392a:	2b00      	cmp	r3, #0
    392c:	d001      	beq.n	3932 <i2c_m_sync_read+0x42>
		return ret;
    392e:	6a3b      	ldr	r3, [r7, #32]
    3930:	e000      	b.n	3934 <i2c_m_sync_read+0x44>
	}

	return n;
    3932:	88fb      	ldrh	r3, [r7, #6]
}
    3934:	4618      	mov	r0, r3
    3936:	3728      	adds	r7, #40	; 0x28
    3938:	46bd      	mov	sp, r7
    393a:	bd80      	pop	{r7, pc}
    393c:	0000854d 	.word	0x0000854d

00003940 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    3940:	b580      	push	{r7, lr}
    3942:	b08a      	sub	sp, #40	; 0x28
    3944:	af00      	add	r7, sp, #0
    3946:	60f8      	str	r0, [r7, #12]
    3948:	60b9      	str	r1, [r7, #8]
    394a:	4613      	mov	r3, r2
    394c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    394e:	68fb      	ldr	r3, [r7, #12]
    3950:	3b14      	subs	r3, #20
    3952:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    3954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3956:	8b9b      	ldrh	r3, [r3, #28]
    3958:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    395a:	88fb      	ldrh	r3, [r7, #6]
    395c:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    395e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3962:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    3964:	68bb      	ldr	r3, [r7, #8]
    3966:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    3968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    396a:	f107 0214 	add.w	r2, r7, #20
    396e:	4611      	mov	r1, r2
    3970:	4618      	mov	r0, r3
    3972:	4b06      	ldr	r3, [pc, #24]	; (398c <i2c_m_sync_write+0x4c>)
    3974:	4798      	blx	r3
    3976:	6238      	str	r0, [r7, #32]

	if (ret) {
    3978:	6a3b      	ldr	r3, [r7, #32]
    397a:	2b00      	cmp	r3, #0
    397c:	d001      	beq.n	3982 <i2c_m_sync_write+0x42>
		return ret;
    397e:	6a3b      	ldr	r3, [r7, #32]
    3980:	e000      	b.n	3984 <i2c_m_sync_write+0x44>
	}

	return n;
    3982:	88fb      	ldrh	r3, [r7, #6]
}
    3984:	4618      	mov	r0, r3
    3986:	3728      	adds	r7, #40	; 0x28
    3988:	46bd      	mov	sp, r7
    398a:	bd80      	pop	{r7, pc}
    398c:	0000854d 	.word	0x0000854d

00003990 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    3990:	b580      	push	{r7, lr}
    3992:	b084      	sub	sp, #16
    3994:	af00      	add	r7, sp, #0
    3996:	6078      	str	r0, [r7, #4]
    3998:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    399a:	687b      	ldr	r3, [r7, #4]
    399c:	2b00      	cmp	r3, #0
    399e:	bf14      	ite	ne
    39a0:	2301      	movne	r3, #1
    39a2:	2300      	moveq	r3, #0
    39a4:	b2db      	uxtb	r3, r3
    39a6:	225e      	movs	r2, #94	; 0x5e
    39a8:	490c      	ldr	r1, [pc, #48]	; (39dc <i2c_m_sync_init+0x4c>)
    39aa:	4618      	mov	r0, r3
    39ac:	4b0c      	ldr	r3, [pc, #48]	; (39e0 <i2c_m_sync_init+0x50>)
    39ae:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    39b0:	687b      	ldr	r3, [r7, #4]
    39b2:	6839      	ldr	r1, [r7, #0]
    39b4:	4618      	mov	r0, r3
    39b6:	4b0b      	ldr	r3, [pc, #44]	; (39e4 <i2c_m_sync_init+0x54>)
    39b8:	4798      	blx	r3
    39ba:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    39bc:	68fb      	ldr	r3, [r7, #12]
    39be:	2b00      	cmp	r3, #0
    39c0:	d001      	beq.n	39c6 <i2c_m_sync_init+0x36>
		return init_status;
    39c2:	68fb      	ldr	r3, [r7, #12]
    39c4:	e006      	b.n	39d4 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    39c6:	687b      	ldr	r3, [r7, #4]
    39c8:	4a07      	ldr	r2, [pc, #28]	; (39e8 <i2c_m_sync_init+0x58>)
    39ca:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    39cc:	687b      	ldr	r3, [r7, #4]
    39ce:	4a07      	ldr	r2, [pc, #28]	; (39ec <i2c_m_sync_init+0x5c>)
    39d0:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    39d2:	2300      	movs	r3, #0
}
    39d4:	4618      	mov	r0, r3
    39d6:	3710      	adds	r7, #16
    39d8:	46bd      	mov	sp, r7
    39da:	bd80      	pop	{r7, pc}
    39dc:	0001b198 	.word	0x0001b198
    39e0:	00004cdd 	.word	0x00004cdd
    39e4:	000082ed 	.word	0x000082ed
    39e8:	000038f1 	.word	0x000038f1
    39ec:	00003941 	.word	0x00003941

000039f0 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    39f0:	b580      	push	{r7, lr}
    39f2:	b082      	sub	sp, #8
    39f4:	af00      	add	r7, sp, #0
    39f6:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    39f8:	687b      	ldr	r3, [r7, #4]
    39fa:	4618      	mov	r0, r3
    39fc:	4b03      	ldr	r3, [pc, #12]	; (3a0c <i2c_m_sync_enable+0x1c>)
    39fe:	4798      	blx	r3
    3a00:	4603      	mov	r3, r0
}
    3a02:	4618      	mov	r0, r3
    3a04:	3708      	adds	r7, #8
    3a06:	46bd      	mov	sp, r7
    3a08:	bd80      	pop	{r7, pc}
    3a0a:	bf00      	nop
    3a0c:	00008335 	.word	0x00008335

00003a10 <i2c_m_sync_disable>:

/**
 * \brief Sync version of i2c disable
 */
int32_t i2c_m_sync_disable(struct i2c_m_sync_desc *i2c)
{
    3a10:	b580      	push	{r7, lr}
    3a12:	b082      	sub	sp, #8
    3a14:	af00      	add	r7, sp, #0
    3a16:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_disable(&i2c->device);
    3a18:	687b      	ldr	r3, [r7, #4]
    3a1a:	4618      	mov	r0, r3
    3a1c:	4b03      	ldr	r3, [pc, #12]	; (3a2c <i2c_m_sync_disable+0x1c>)
    3a1e:	4798      	blx	r3
    3a20:	4603      	mov	r3, r0
}
    3a22:	4618      	mov	r0, r3
    3a24:	3708      	adds	r7, #8
    3a26:	46bd      	mov	sp, r7
    3a28:	bd80      	pop	{r7, pc}
    3a2a:	bf00      	nop
    3a2c:	00008375 	.word	0x00008375

00003a30 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    3a30:	b480      	push	{r7}
    3a32:	b085      	sub	sp, #20
    3a34:	af00      	add	r7, sp, #0
    3a36:	60f8      	str	r0, [r7, #12]
    3a38:	460b      	mov	r3, r1
    3a3a:	607a      	str	r2, [r7, #4]
    3a3c:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    3a3e:	897b      	ldrh	r3, [r7, #10]
    3a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
    3a44:	b21a      	sxth	r2, r3
    3a46:	687b      	ldr	r3, [r7, #4]
    3a48:	b21b      	sxth	r3, r3
    3a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3a4e:	b21b      	sxth	r3, r3
    3a50:	4313      	orrs	r3, r2
    3a52:	b21b      	sxth	r3, r3
    3a54:	b29a      	uxth	r2, r3
    3a56:	68fb      	ldr	r3, [r7, #12]
    3a58:	839a      	strh	r2, [r3, #28]
    3a5a:	68fb      	ldr	r3, [r7, #12]
    3a5c:	8b9b      	ldrh	r3, [r3, #28]
}
    3a5e:	4618      	mov	r0, r3
    3a60:	3714      	adds	r7, #20
    3a62:	46bd      	mov	sp, r7
    3a64:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a68:	4770      	bx	lr

00003a6a <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    3a6a:	b480      	push	{r7}
    3a6c:	b083      	sub	sp, #12
    3a6e:	af00      	add	r7, sp, #0
    3a70:	6078      	str	r0, [r7, #4]
    3a72:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    3a74:	687b      	ldr	r3, [r7, #4]
    3a76:	f103 0214 	add.w	r2, r3, #20
    3a7a:	683b      	ldr	r3, [r7, #0]
    3a7c:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    3a7e:	2300      	movs	r3, #0
}
    3a80:	4618      	mov	r0, r3
    3a82:	370c      	adds	r7, #12
    3a84:	46bd      	mov	sp, r7
    3a86:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a8a:	4770      	bx	lr

00003a8c <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    3a8c:	b580      	push	{r7, lr}
    3a8e:	b084      	sub	sp, #16
    3a90:	af00      	add	r7, sp, #0
    3a92:	60f8      	str	r0, [r7, #12]
    3a94:	60b9      	str	r1, [r7, #8]
    3a96:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    3a98:	68fb      	ldr	r3, [r7, #12]
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	d004      	beq.n	3aa8 <pwm_init+0x1c>
    3a9e:	68bb      	ldr	r3, [r7, #8]
    3aa0:	2b00      	cmp	r3, #0
    3aa2:	d001      	beq.n	3aa8 <pwm_init+0x1c>
    3aa4:	2301      	movs	r3, #1
    3aa6:	e000      	b.n	3aaa <pwm_init+0x1e>
    3aa8:	2300      	movs	r3, #0
    3aaa:	f003 0301 	and.w	r3, r3, #1
    3aae:	b2db      	uxtb	r3, r3
    3ab0:	2233      	movs	r2, #51	; 0x33
    3ab2:	490a      	ldr	r1, [pc, #40]	; (3adc <pwm_init+0x50>)
    3ab4:	4618      	mov	r0, r3
    3ab6:	4b0a      	ldr	r3, [pc, #40]	; (3ae0 <pwm_init+0x54>)
    3ab8:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    3aba:	68fb      	ldr	r3, [r7, #12]
    3abc:	68b9      	ldr	r1, [r7, #8]
    3abe:	4618      	mov	r0, r3
    3ac0:	4b08      	ldr	r3, [pc, #32]	; (3ae4 <pwm_init+0x58>)
    3ac2:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    3ac4:	68fb      	ldr	r3, [r7, #12]
    3ac6:	4a08      	ldr	r2, [pc, #32]	; (3ae8 <pwm_init+0x5c>)
    3ac8:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    3aca:	68fb      	ldr	r3, [r7, #12]
    3acc:	4a07      	ldr	r2, [pc, #28]	; (3aec <pwm_init+0x60>)
    3ace:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    3ad0:	2300      	movs	r3, #0
}
    3ad2:	4618      	mov	r0, r3
    3ad4:	3710      	adds	r7, #16
    3ad6:	46bd      	mov	sp, r7
    3ad8:	bd80      	pop	{r7, pc}
    3ada:	bf00      	nop
    3adc:	0001b1b4 	.word	0x0001b1b4
    3ae0:	00004cdd 	.word	0x00004cdd
    3ae4:	00009c15 	.word	0x00009c15
    3ae8:	00003af1 	.word	0x00003af1
    3aec:	00003b15 	.word	0x00003b15

00003af0 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    3af0:	b580      	push	{r7, lr}
    3af2:	b084      	sub	sp, #16
    3af4:	af00      	add	r7, sp, #0
    3af6:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    3af8:	687b      	ldr	r3, [r7, #4]
    3afa:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    3afc:	68fb      	ldr	r3, [r7, #12]
    3afe:	695b      	ldr	r3, [r3, #20]
    3b00:	2b00      	cmp	r3, #0
    3b02:	d003      	beq.n	3b0c <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    3b04:	68fb      	ldr	r3, [r7, #12]
    3b06:	695b      	ldr	r3, [r3, #20]
    3b08:	68f8      	ldr	r0, [r7, #12]
    3b0a:	4798      	blx	r3
	}
}
    3b0c:	bf00      	nop
    3b0e:	3710      	adds	r7, #16
    3b10:	46bd      	mov	sp, r7
    3b12:	bd80      	pop	{r7, pc}

00003b14 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    3b14:	b580      	push	{r7, lr}
    3b16:	b084      	sub	sp, #16
    3b18:	af00      	add	r7, sp, #0
    3b1a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    3b1c:	687b      	ldr	r3, [r7, #4]
    3b1e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    3b20:	68fb      	ldr	r3, [r7, #12]
    3b22:	699b      	ldr	r3, [r3, #24]
    3b24:	2b00      	cmp	r3, #0
    3b26:	d003      	beq.n	3b30 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    3b28:	68fb      	ldr	r3, [r7, #12]
    3b2a:	699b      	ldr	r3, [r3, #24]
    3b2c:	68f8      	ldr	r0, [r7, #12]
    3b2e:	4798      	blx	r3
	}
}
    3b30:	bf00      	nop
    3b32:	3710      	adds	r7, #16
    3b34:	46bd      	mov	sp, r7
    3b36:	bd80      	pop	{r7, pc}

00003b38 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    3b38:	b580      	push	{r7, lr}
    3b3a:	b082      	sub	sp, #8
    3b3c:	af00      	add	r7, sp, #0
    3b3e:	6078      	str	r0, [r7, #4]
    3b40:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    3b42:	687b      	ldr	r3, [r7, #4]
    3b44:	2b00      	cmp	r3, #0
    3b46:	d004      	beq.n	3b52 <qspi_sync_init+0x1a>
    3b48:	683b      	ldr	r3, [r7, #0]
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	d001      	beq.n	3b52 <qspi_sync_init+0x1a>
    3b4e:	2301      	movs	r3, #1
    3b50:	e000      	b.n	3b54 <qspi_sync_init+0x1c>
    3b52:	2300      	movs	r3, #0
    3b54:	f003 0301 	and.w	r3, r3, #1
    3b58:	b2db      	uxtb	r3, r3
    3b5a:	2231      	movs	r2, #49	; 0x31
    3b5c:	4906      	ldr	r1, [pc, #24]	; (3b78 <qspi_sync_init+0x40>)
    3b5e:	4618      	mov	r0, r3
    3b60:	4b06      	ldr	r3, [pc, #24]	; (3b7c <qspi_sync_init+0x44>)
    3b62:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    3b64:	687b      	ldr	r3, [r7, #4]
    3b66:	6839      	ldr	r1, [r7, #0]
    3b68:	4618      	mov	r0, r3
    3b6a:	4b05      	ldr	r3, [pc, #20]	; (3b80 <qspi_sync_init+0x48>)
    3b6c:	4798      	blx	r3
    3b6e:	4603      	mov	r3, r0
}
    3b70:	4618      	mov	r0, r3
    3b72:	3708      	adds	r7, #8
    3b74:	46bd      	mov	sp, r7
    3b76:	bd80      	pop	{r7, pc}
    3b78:	0001b1cc 	.word	0x0001b1cc
    3b7c:	00004cdd 	.word	0x00004cdd
    3b80:	00007349 	.word	0x00007349

00003b84 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    3b84:	b580      	push	{r7, lr}
    3b86:	b082      	sub	sp, #8
    3b88:	af00      	add	r7, sp, #0
    3b8a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    3b8c:	687b      	ldr	r3, [r7, #4]
    3b8e:	2b00      	cmp	r3, #0
    3b90:	bf14      	ite	ne
    3b92:	2301      	movne	r3, #1
    3b94:	2300      	moveq	r3, #0
    3b96:	b2db      	uxtb	r3, r3
    3b98:	223f      	movs	r2, #63	; 0x3f
    3b9a:	4906      	ldr	r1, [pc, #24]	; (3bb4 <qspi_sync_enable+0x30>)
    3b9c:	4618      	mov	r0, r3
    3b9e:	4b06      	ldr	r3, [pc, #24]	; (3bb8 <qspi_sync_enable+0x34>)
    3ba0:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    3ba2:	687b      	ldr	r3, [r7, #4]
    3ba4:	4618      	mov	r0, r3
    3ba6:	4b05      	ldr	r3, [pc, #20]	; (3bbc <qspi_sync_enable+0x38>)
    3ba8:	4798      	blx	r3
    3baa:	4603      	mov	r3, r0
}
    3bac:	4618      	mov	r0, r3
    3bae:	3708      	adds	r7, #8
    3bb0:	46bd      	mov	sp, r7
    3bb2:	bd80      	pop	{r7, pc}
    3bb4:	0001b1cc 	.word	0x0001b1cc
    3bb8:	00004cdd 	.word	0x00004cdd
    3bbc:	000073bd 	.word	0x000073bd

00003bc0 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    3bc0:	b580      	push	{r7, lr}
    3bc2:	b082      	sub	sp, #8
    3bc4:	af00      	add	r7, sp, #0
    3bc6:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    3bc8:	687b      	ldr	r3, [r7, #4]
    3bca:	2b00      	cmp	r3, #0
    3bcc:	bf14      	ite	ne
    3bce:	2301      	movne	r3, #1
    3bd0:	2300      	moveq	r3, #0
    3bd2:	b2db      	uxtb	r3, r3
    3bd4:	2246      	movs	r2, #70	; 0x46
    3bd6:	4906      	ldr	r1, [pc, #24]	; (3bf0 <qspi_sync_disable+0x30>)
    3bd8:	4618      	mov	r0, r3
    3bda:	4b06      	ldr	r3, [pc, #24]	; (3bf4 <qspi_sync_disable+0x34>)
    3bdc:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    3bde:	687b      	ldr	r3, [r7, #4]
    3be0:	4618      	mov	r0, r3
    3be2:	4b05      	ldr	r3, [pc, #20]	; (3bf8 <qspi_sync_disable+0x38>)
    3be4:	4798      	blx	r3
    3be6:	4603      	mov	r3, r0
}
    3be8:	4618      	mov	r0, r3
    3bea:	3708      	adds	r7, #8
    3bec:	46bd      	mov	sp, r7
    3bee:	bd80      	pop	{r7, pc}
    3bf0:	0001b1cc 	.word	0x0001b1cc
    3bf4:	00004cdd 	.word	0x00004cdd
    3bf8:	000073e1 	.word	0x000073e1

00003bfc <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    3bfc:	b580      	push	{r7, lr}
    3bfe:	b082      	sub	sp, #8
    3c00:	af00      	add	r7, sp, #0
    3c02:	6078      	str	r0, [r7, #4]
    3c04:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    3c06:	687b      	ldr	r3, [r7, #4]
    3c08:	2b00      	cmp	r3, #0
    3c0a:	d004      	beq.n	3c16 <qspi_sync_serial_run_command+0x1a>
    3c0c:	683b      	ldr	r3, [r7, #0]
    3c0e:	2b00      	cmp	r3, #0
    3c10:	d001      	beq.n	3c16 <qspi_sync_serial_run_command+0x1a>
    3c12:	2301      	movs	r3, #1
    3c14:	e000      	b.n	3c18 <qspi_sync_serial_run_command+0x1c>
    3c16:	2300      	movs	r3, #0
    3c18:	f003 0301 	and.w	r3, r3, #1
    3c1c:	b2db      	uxtb	r3, r3
    3c1e:	224d      	movs	r2, #77	; 0x4d
    3c20:	4906      	ldr	r1, [pc, #24]	; (3c3c <qspi_sync_serial_run_command+0x40>)
    3c22:	4618      	mov	r0, r3
    3c24:	4b06      	ldr	r3, [pc, #24]	; (3c40 <qspi_sync_serial_run_command+0x44>)
    3c26:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    3c28:	687b      	ldr	r3, [r7, #4]
    3c2a:	6839      	ldr	r1, [r7, #0]
    3c2c:	4618      	mov	r0, r3
    3c2e:	4b05      	ldr	r3, [pc, #20]	; (3c44 <qspi_sync_serial_run_command+0x48>)
    3c30:	4798      	blx	r3
    3c32:	4603      	mov	r3, r0
}
    3c34:	4618      	mov	r0, r3
    3c36:	3708      	adds	r7, #8
    3c38:	46bd      	mov	sp, r7
    3c3a:	bd80      	pop	{r7, pc}
    3c3c:	0001b1cc 	.word	0x0001b1cc
    3c40:	00004cdd 	.word	0x00004cdd
    3c44:	0000752d 	.word	0x0000752d

00003c48 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    3c48:	b580      	push	{r7, lr}
    3c4a:	b084      	sub	sp, #16
    3c4c:	af00      	add	r7, sp, #0
    3c4e:	6078      	str	r0, [r7, #4]
    3c50:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    3c52:	2300      	movs	r3, #0
    3c54:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    3c56:	687b      	ldr	r3, [r7, #4]
    3c58:	2b00      	cmp	r3, #0
    3c5a:	d004      	beq.n	3c66 <spi_m_sync_init+0x1e>
    3c5c:	683b      	ldr	r3, [r7, #0]
    3c5e:	2b00      	cmp	r3, #0
    3c60:	d001      	beq.n	3c66 <spi_m_sync_init+0x1e>
    3c62:	2301      	movs	r3, #1
    3c64:	e000      	b.n	3c68 <spi_m_sync_init+0x20>
    3c66:	2300      	movs	r3, #0
    3c68:	f003 0301 	and.w	r3, r3, #1
    3c6c:	b2db      	uxtb	r3, r3
    3c6e:	2240      	movs	r2, #64	; 0x40
    3c70:	4910      	ldr	r1, [pc, #64]	; (3cb4 <spi_m_sync_init+0x6c>)
    3c72:	4618      	mov	r0, r3
    3c74:	4b10      	ldr	r3, [pc, #64]	; (3cb8 <spi_m_sync_init+0x70>)
    3c76:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    3c78:	687b      	ldr	r3, [r7, #4]
    3c7a:	683a      	ldr	r2, [r7, #0]
    3c7c:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    3c7e:	687b      	ldr	r3, [r7, #4]
    3c80:	3304      	adds	r3, #4
    3c82:	6839      	ldr	r1, [r7, #0]
    3c84:	4618      	mov	r0, r3
    3c86:	4b0d      	ldr	r3, [pc, #52]	; (3cbc <spi_m_sync_init+0x74>)
    3c88:	4798      	blx	r3
    3c8a:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    3c8c:	68fb      	ldr	r3, [r7, #12]
    3c8e:	2b00      	cmp	r3, #0
    3c90:	da01      	bge.n	3c96 <spi_m_sync_init+0x4e>
		return rc;
    3c92:	68fb      	ldr	r3, [r7, #12]
    3c94:	e00a      	b.n	3cac <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    3c96:	687b      	ldr	r3, [r7, #4]
    3c98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3c9c:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    3c9e:	687b      	ldr	r3, [r7, #4]
    3ca0:	4a07      	ldr	r2, [pc, #28]	; (3cc0 <spi_m_sync_init+0x78>)
    3ca2:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    3ca4:	687b      	ldr	r3, [r7, #4]
    3ca6:	4a07      	ldr	r2, [pc, #28]	; (3cc4 <spi_m_sync_init+0x7c>)
    3ca8:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    3caa:	2300      	movs	r3, #0
}
    3cac:	4618      	mov	r0, r3
    3cae:	3710      	adds	r7, #16
    3cb0:	46bd      	mov	sp, r7
    3cb2:	bd80      	pop	{r7, pc}
    3cb4:	0001b1e8 	.word	0x0001b1e8
    3cb8:	00004cdd 	.word	0x00004cdd
    3cbc:	00008a49 	.word	0x00008a49
    3cc0:	00003d41 	.word	0x00003d41
    3cc4:	00003d99 	.word	0x00003d99

00003cc8 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    3cc8:	b580      	push	{r7, lr}
    3cca:	b082      	sub	sp, #8
    3ccc:	af00      	add	r7, sp, #0
    3cce:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    3cd0:	687b      	ldr	r3, [r7, #4]
    3cd2:	2b00      	cmp	r3, #0
    3cd4:	bf14      	ite	ne
    3cd6:	2301      	movne	r3, #1
    3cd8:	2300      	moveq	r3, #0
    3cda:	b2db      	uxtb	r3, r3
    3cdc:	2257      	movs	r2, #87	; 0x57
    3cde:	4906      	ldr	r1, [pc, #24]	; (3cf8 <spi_m_sync_enable+0x30>)
    3ce0:	4618      	mov	r0, r3
    3ce2:	4b06      	ldr	r3, [pc, #24]	; (3cfc <spi_m_sync_enable+0x34>)
    3ce4:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    3ce6:	687b      	ldr	r3, [r7, #4]
    3ce8:	3304      	adds	r3, #4
    3cea:	4618      	mov	r0, r3
    3cec:	4b04      	ldr	r3, [pc, #16]	; (3d00 <spi_m_sync_enable+0x38>)
    3cee:	4798      	blx	r3
}
    3cf0:	bf00      	nop
    3cf2:	3708      	adds	r7, #8
    3cf4:	46bd      	mov	sp, r7
    3cf6:	bd80      	pop	{r7, pc}
    3cf8:	0001b1e8 	.word	0x0001b1e8
    3cfc:	00004cdd 	.word	0x00004cdd
    3d00:	00008b55 	.word	0x00008b55

00003d04 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    3d04:	b580      	push	{r7, lr}
    3d06:	b082      	sub	sp, #8
    3d08:	af00      	add	r7, sp, #0
    3d0a:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    3d0c:	687b      	ldr	r3, [r7, #4]
    3d0e:	2b00      	cmp	r3, #0
    3d10:	bf14      	ite	ne
    3d12:	2301      	movne	r3, #1
    3d14:	2300      	moveq	r3, #0
    3d16:	b2db      	uxtb	r3, r3
    3d18:	225d      	movs	r2, #93	; 0x5d
    3d1a:	4906      	ldr	r1, [pc, #24]	; (3d34 <spi_m_sync_disable+0x30>)
    3d1c:	4618      	mov	r0, r3
    3d1e:	4b06      	ldr	r3, [pc, #24]	; (3d38 <spi_m_sync_disable+0x34>)
    3d20:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    3d22:	687b      	ldr	r3, [r7, #4]
    3d24:	3304      	adds	r3, #4
    3d26:	4618      	mov	r0, r3
    3d28:	4b04      	ldr	r3, [pc, #16]	; (3d3c <spi_m_sync_disable+0x38>)
    3d2a:	4798      	blx	r3
}
    3d2c:	bf00      	nop
    3d2e:	3708      	adds	r7, #8
    3d30:	46bd      	mov	sp, r7
    3d32:	bd80      	pop	{r7, pc}
    3d34:	0001b1e8 	.word	0x0001b1e8
    3d38:	00004cdd 	.word	0x00004cdd
    3d3c:	00008ba5 	.word	0x00008ba5

00003d40 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    3d40:	b580      	push	{r7, lr}
    3d42:	b088      	sub	sp, #32
    3d44:	af00      	add	r7, sp, #0
    3d46:	60f8      	str	r0, [r7, #12]
    3d48:	60b9      	str	r1, [r7, #8]
    3d4a:	4613      	mov	r3, r2
    3d4c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    3d4e:	68fb      	ldr	r3, [r7, #12]
    3d50:	2b00      	cmp	r3, #0
    3d52:	bf14      	ite	ne
    3d54:	2301      	movne	r3, #1
    3d56:	2300      	moveq	r3, #0
    3d58:	b2db      	uxtb	r3, r3
    3d5a:	2287      	movs	r2, #135	; 0x87
    3d5c:	490b      	ldr	r1, [pc, #44]	; (3d8c <_spi_m_sync_io_read+0x4c>)
    3d5e:	4618      	mov	r0, r3
    3d60:	4b0b      	ldr	r3, [pc, #44]	; (3d90 <_spi_m_sync_io_read+0x50>)
    3d62:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    3d64:	68fb      	ldr	r3, [r7, #12]
    3d66:	3b0c      	subs	r3, #12
    3d68:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    3d6a:	68bb      	ldr	r3, [r7, #8]
    3d6c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    3d6e:	2300      	movs	r3, #0
    3d70:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    3d72:	88fb      	ldrh	r3, [r7, #6]
    3d74:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    3d76:	f107 0310 	add.w	r3, r7, #16
    3d7a:	4619      	mov	r1, r3
    3d7c:	69f8      	ldr	r0, [r7, #28]
    3d7e:	4b05      	ldr	r3, [pc, #20]	; (3d94 <_spi_m_sync_io_read+0x54>)
    3d80:	4798      	blx	r3
    3d82:	4603      	mov	r3, r0
}
    3d84:	4618      	mov	r0, r3
    3d86:	3720      	adds	r7, #32
    3d88:	46bd      	mov	sp, r7
    3d8a:	bd80      	pop	{r7, pc}
    3d8c:	0001b1e8 	.word	0x0001b1e8
    3d90:	00004cdd 	.word	0x00004cdd
    3d94:	00003df1 	.word	0x00003df1

00003d98 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    3d98:	b580      	push	{r7, lr}
    3d9a:	b088      	sub	sp, #32
    3d9c:	af00      	add	r7, sp, #0
    3d9e:	60f8      	str	r0, [r7, #12]
    3da0:	60b9      	str	r1, [r7, #8]
    3da2:	4613      	mov	r3, r2
    3da4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    3da6:	68fb      	ldr	r3, [r7, #12]
    3da8:	2b00      	cmp	r3, #0
    3daa:	bf14      	ite	ne
    3dac:	2301      	movne	r3, #1
    3dae:	2300      	moveq	r3, #0
    3db0:	b2db      	uxtb	r3, r3
    3db2:	22a3      	movs	r2, #163	; 0xa3
    3db4:	490b      	ldr	r1, [pc, #44]	; (3de4 <_spi_m_sync_io_write+0x4c>)
    3db6:	4618      	mov	r0, r3
    3db8:	4b0b      	ldr	r3, [pc, #44]	; (3de8 <_spi_m_sync_io_write+0x50>)
    3dba:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    3dbc:	68fb      	ldr	r3, [r7, #12]
    3dbe:	3b0c      	subs	r3, #12
    3dc0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    3dc2:	2300      	movs	r3, #0
    3dc4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    3dc6:	68bb      	ldr	r3, [r7, #8]
    3dc8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    3dca:	88fb      	ldrh	r3, [r7, #6]
    3dcc:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    3dce:	f107 0310 	add.w	r3, r7, #16
    3dd2:	4619      	mov	r1, r3
    3dd4:	69f8      	ldr	r0, [r7, #28]
    3dd6:	4b05      	ldr	r3, [pc, #20]	; (3dec <_spi_m_sync_io_write+0x54>)
    3dd8:	4798      	blx	r3
    3dda:	4603      	mov	r3, r0
}
    3ddc:	4618      	mov	r0, r3
    3dde:	3720      	adds	r7, #32
    3de0:	46bd      	mov	sp, r7
    3de2:	bd80      	pop	{r7, pc}
    3de4:	0001b1e8 	.word	0x0001b1e8
    3de8:	00004cdd 	.word	0x00004cdd
    3dec:	00003df1 	.word	0x00003df1

00003df0 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    3df0:	b580      	push	{r7, lr}
    3df2:	b086      	sub	sp, #24
    3df4:	af00      	add	r7, sp, #0
    3df6:	6078      	str	r0, [r7, #4]
    3df8:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    3dfa:	687b      	ldr	r3, [r7, #4]
    3dfc:	2b00      	cmp	r3, #0
    3dfe:	d004      	beq.n	3e0a <spi_m_sync_transfer+0x1a>
    3e00:	683b      	ldr	r3, [r7, #0]
    3e02:	2b00      	cmp	r3, #0
    3e04:	d001      	beq.n	3e0a <spi_m_sync_transfer+0x1a>
    3e06:	2301      	movs	r3, #1
    3e08:	e000      	b.n	3e0c <spi_m_sync_transfer+0x1c>
    3e0a:	2300      	movs	r3, #0
    3e0c:	f003 0301 	and.w	r3, r3, #1
    3e10:	b2db      	uxtb	r3, r3
    3e12:	22b3      	movs	r2, #179	; 0xb3
    3e14:	490c      	ldr	r1, [pc, #48]	; (3e48 <spi_m_sync_transfer+0x58>)
    3e16:	4618      	mov	r0, r3
    3e18:	4b0c      	ldr	r3, [pc, #48]	; (3e4c <spi_m_sync_transfer+0x5c>)
    3e1a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    3e1c:	683b      	ldr	r3, [r7, #0]
    3e1e:	681b      	ldr	r3, [r3, #0]
    3e20:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    3e22:	683b      	ldr	r3, [r7, #0]
    3e24:	685b      	ldr	r3, [r3, #4]
    3e26:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    3e28:	683b      	ldr	r3, [r7, #0]
    3e2a:	689b      	ldr	r3, [r3, #8]
    3e2c:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    3e2e:	687b      	ldr	r3, [r7, #4]
    3e30:	3304      	adds	r3, #4
    3e32:	f107 020c 	add.w	r2, r7, #12
    3e36:	4611      	mov	r1, r2
    3e38:	4618      	mov	r0, r3
    3e3a:	4b05      	ldr	r3, [pc, #20]	; (3e50 <spi_m_sync_transfer+0x60>)
    3e3c:	4798      	blx	r3
    3e3e:	4603      	mov	r3, r0
}
    3e40:	4618      	mov	r0, r3
    3e42:	3718      	adds	r7, #24
    3e44:	46bd      	mov	sp, r7
    3e46:	bd80      	pop	{r7, pc}
    3e48:	0001b1e8 	.word	0x0001b1e8
    3e4c:	00004cdd 	.word	0x00004cdd
    3e50:	00008d49 	.word	0x00008d49

00003e54 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    3e54:	b580      	push	{r7, lr}
    3e56:	b082      	sub	sp, #8
    3e58:	af00      	add	r7, sp, #0
    3e5a:	6078      	str	r0, [r7, #4]
    3e5c:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    3e5e:	687b      	ldr	r3, [r7, #4]
    3e60:	2b00      	cmp	r3, #0
    3e62:	d004      	beq.n	3e6e <spi_m_sync_get_io_descriptor+0x1a>
    3e64:	683b      	ldr	r3, [r7, #0]
    3e66:	2b00      	cmp	r3, #0
    3e68:	d001      	beq.n	3e6e <spi_m_sync_get_io_descriptor+0x1a>
    3e6a:	2301      	movs	r3, #1
    3e6c:	e000      	b.n	3e70 <spi_m_sync_get_io_descriptor+0x1c>
    3e6e:	2300      	movs	r3, #0
    3e70:	f003 0301 	and.w	r3, r3, #1
    3e74:	b2db      	uxtb	r3, r3
    3e76:	22bd      	movs	r2, #189	; 0xbd
    3e78:	4906      	ldr	r1, [pc, #24]	; (3e94 <spi_m_sync_get_io_descriptor+0x40>)
    3e7a:	4618      	mov	r0, r3
    3e7c:	4b06      	ldr	r3, [pc, #24]	; (3e98 <spi_m_sync_get_io_descriptor+0x44>)
    3e7e:	4798      	blx	r3
	*io = &spi->io;
    3e80:	687b      	ldr	r3, [r7, #4]
    3e82:	f103 020c 	add.w	r2, r3, #12
    3e86:	683b      	ldr	r3, [r7, #0]
    3e88:	601a      	str	r2, [r3, #0]
	return 0;
    3e8a:	2300      	movs	r3, #0
}
    3e8c:	4618      	mov	r0, r3
    3e8e:	3708      	adds	r7, #8
    3e90:	46bd      	mov	sp, r7
    3e92:	bd80      	pop	{r7, pc}
    3e94:	0001b1e8 	.word	0x0001b1e8
    3e98:	00004cdd 	.word	0x00004cdd

00003e9c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    3e9c:	b480      	push	{r7}
    3e9e:	b083      	sub	sp, #12
    3ea0:	af00      	add	r7, sp, #0
    3ea2:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    3ea4:	687b      	ldr	r3, [r7, #4]
    3ea6:	681b      	ldr	r3, [r3, #0]
}
    3ea8:	4618      	mov	r0, r3
    3eaa:	370c      	adds	r7, #12
    3eac:	46bd      	mov	sp, r7
    3eae:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eb2:	4770      	bx	lr

00003eb4 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    3eb4:	b480      	push	{r7}
    3eb6:	b083      	sub	sp, #12
    3eb8:	af00      	add	r7, sp, #0
    3eba:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    3ebc:	687b      	ldr	r3, [r7, #4]
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	d002      	beq.n	3ec8 <list_get_next_element+0x14>
    3ec2:	687b      	ldr	r3, [r7, #4]
    3ec4:	681b      	ldr	r3, [r3, #0]
    3ec6:	e000      	b.n	3eca <list_get_next_element+0x16>
    3ec8:	2300      	movs	r3, #0
}
    3eca:	4618      	mov	r0, r3
    3ecc:	370c      	adds	r7, #12
    3ece:	46bd      	mov	sp, r7
    3ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ed4:	4770      	bx	lr
	...

00003ed8 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    3ed8:	b580      	push	{r7, lr}
    3eda:	b084      	sub	sp, #16
    3edc:	af00      	add	r7, sp, #0
    3ede:	60f8      	str	r0, [r7, #12]
    3ee0:	60b9      	str	r1, [r7, #8]
    3ee2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    3ee4:	68fb      	ldr	r3, [r7, #12]
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	d007      	beq.n	3efa <timer_init+0x22>
    3eea:	68bb      	ldr	r3, [r7, #8]
    3eec:	2b00      	cmp	r3, #0
    3eee:	d004      	beq.n	3efa <timer_init+0x22>
    3ef0:	687b      	ldr	r3, [r7, #4]
    3ef2:	2b00      	cmp	r3, #0
    3ef4:	d001      	beq.n	3efa <timer_init+0x22>
    3ef6:	2301      	movs	r3, #1
    3ef8:	e000      	b.n	3efc <timer_init+0x24>
    3efa:	2300      	movs	r3, #0
    3efc:	f003 0301 	and.w	r3, r3, #1
    3f00:	b2db      	uxtb	r3, r3
    3f02:	223b      	movs	r2, #59	; 0x3b
    3f04:	490c      	ldr	r1, [pc, #48]	; (3f38 <timer_init+0x60>)
    3f06:	4618      	mov	r0, r3
    3f08:	4b0c      	ldr	r3, [pc, #48]	; (3f3c <timer_init+0x64>)
    3f0a:	4798      	blx	r3
	descr->func = func;
    3f0c:	68fb      	ldr	r3, [r7, #12]
    3f0e:	687a      	ldr	r2, [r7, #4]
    3f10:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    3f12:	68fb      	ldr	r3, [r7, #12]
    3f14:	681b      	ldr	r3, [r3, #0]
    3f16:	681b      	ldr	r3, [r3, #0]
    3f18:	68fa      	ldr	r2, [r7, #12]
    3f1a:	3204      	adds	r2, #4
    3f1c:	68b9      	ldr	r1, [r7, #8]
    3f1e:	4610      	mov	r0, r2
    3f20:	4798      	blx	r3
	descr->time                           = 0;
    3f22:	68fb      	ldr	r3, [r7, #12]
    3f24:	2200      	movs	r2, #0
    3f26:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    3f28:	68fb      	ldr	r3, [r7, #12]
    3f2a:	4a05      	ldr	r2, [pc, #20]	; (3f40 <timer_init+0x68>)
    3f2c:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    3f2e:	2300      	movs	r3, #0
}
    3f30:	4618      	mov	r0, r3
    3f32:	3710      	adds	r7, #16
    3f34:	46bd      	mov	sp, r7
    3f36:	bd80      	pop	{r7, pc}
    3f38:	0001b204 	.word	0x0001b204
    3f3c:	00004cdd 	.word	0x00004cdd
    3f40:	000042c9 	.word	0x000042c9

00003f44 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    3f44:	b580      	push	{r7, lr}
    3f46:	b082      	sub	sp, #8
    3f48:	af00      	add	r7, sp, #0
    3f4a:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3f4c:	687b      	ldr	r3, [r7, #4]
    3f4e:	2b00      	cmp	r3, #0
    3f50:	d005      	beq.n	3f5e <timer_start+0x1a>
    3f52:	687b      	ldr	r3, [r7, #4]
    3f54:	681b      	ldr	r3, [r3, #0]
    3f56:	2b00      	cmp	r3, #0
    3f58:	d001      	beq.n	3f5e <timer_start+0x1a>
    3f5a:	2301      	movs	r3, #1
    3f5c:	e000      	b.n	3f60 <timer_start+0x1c>
    3f5e:	2300      	movs	r3, #0
    3f60:	f003 0301 	and.w	r3, r3, #1
    3f64:	b2db      	uxtb	r3, r3
    3f66:	2254      	movs	r2, #84	; 0x54
    3f68:	490e      	ldr	r1, [pc, #56]	; (3fa4 <timer_start+0x60>)
    3f6a:	4618      	mov	r0, r3
    3f6c:	4b0e      	ldr	r3, [pc, #56]	; (3fa8 <timer_start+0x64>)
    3f6e:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    3f70:	687b      	ldr	r3, [r7, #4]
    3f72:	681b      	ldr	r3, [r3, #0]
    3f74:	699b      	ldr	r3, [r3, #24]
    3f76:	687a      	ldr	r2, [r7, #4]
    3f78:	3204      	adds	r2, #4
    3f7a:	4610      	mov	r0, r2
    3f7c:	4798      	blx	r3
    3f7e:	4603      	mov	r3, r0
    3f80:	2b00      	cmp	r3, #0
    3f82:	d002      	beq.n	3f8a <timer_start+0x46>
		return ERR_DENIED;
    3f84:	f06f 0310 	mvn.w	r3, #16
    3f88:	e007      	b.n	3f9a <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    3f8a:	687b      	ldr	r3, [r7, #4]
    3f8c:	681b      	ldr	r3, [r3, #0]
    3f8e:	689b      	ldr	r3, [r3, #8]
    3f90:	687a      	ldr	r2, [r7, #4]
    3f92:	3204      	adds	r2, #4
    3f94:	4610      	mov	r0, r2
    3f96:	4798      	blx	r3

	return ERR_NONE;
    3f98:	2300      	movs	r3, #0
}
    3f9a:	4618      	mov	r0, r3
    3f9c:	3708      	adds	r7, #8
    3f9e:	46bd      	mov	sp, r7
    3fa0:	bd80      	pop	{r7, pc}
    3fa2:	bf00      	nop
    3fa4:	0001b204 	.word	0x0001b204
    3fa8:	00004cdd 	.word	0x00004cdd

00003fac <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    3fac:	b580      	push	{r7, lr}
    3fae:	b082      	sub	sp, #8
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	2b00      	cmp	r3, #0
    3fb8:	d005      	beq.n	3fc6 <timer_stop+0x1a>
    3fba:	687b      	ldr	r3, [r7, #4]
    3fbc:	681b      	ldr	r3, [r3, #0]
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d001      	beq.n	3fc6 <timer_stop+0x1a>
    3fc2:	2301      	movs	r3, #1
    3fc4:	e000      	b.n	3fc8 <timer_stop+0x1c>
    3fc6:	2300      	movs	r3, #0
    3fc8:	f003 0301 	and.w	r3, r3, #1
    3fcc:	b2db      	uxtb	r3, r3
    3fce:	2262      	movs	r2, #98	; 0x62
    3fd0:	490f      	ldr	r1, [pc, #60]	; (4010 <timer_stop+0x64>)
    3fd2:	4618      	mov	r0, r3
    3fd4:	4b0f      	ldr	r3, [pc, #60]	; (4014 <timer_stop+0x68>)
    3fd6:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    3fd8:	687b      	ldr	r3, [r7, #4]
    3fda:	681b      	ldr	r3, [r3, #0]
    3fdc:	699b      	ldr	r3, [r3, #24]
    3fde:	687a      	ldr	r2, [r7, #4]
    3fe0:	3204      	adds	r2, #4
    3fe2:	4610      	mov	r0, r2
    3fe4:	4798      	blx	r3
    3fe6:	4603      	mov	r3, r0
    3fe8:	f083 0301 	eor.w	r3, r3, #1
    3fec:	b2db      	uxtb	r3, r3
    3fee:	2b00      	cmp	r3, #0
    3ff0:	d002      	beq.n	3ff8 <timer_stop+0x4c>
		return ERR_DENIED;
    3ff2:	f06f 0310 	mvn.w	r3, #16
    3ff6:	e007      	b.n	4008 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    3ff8:	687b      	ldr	r3, [r7, #4]
    3ffa:	681b      	ldr	r3, [r3, #0]
    3ffc:	68db      	ldr	r3, [r3, #12]
    3ffe:	687a      	ldr	r2, [r7, #4]
    4000:	3204      	adds	r2, #4
    4002:	4610      	mov	r0, r2
    4004:	4798      	blx	r3

	return ERR_NONE;
    4006:	2300      	movs	r3, #0
}
    4008:	4618      	mov	r0, r3
    400a:	3708      	adds	r7, #8
    400c:	46bd      	mov	sp, r7
    400e:	bd80      	pop	{r7, pc}
    4010:	0001b204 	.word	0x0001b204
    4014:	00004cdd 	.word	0x00004cdd

00004018 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    4018:	b580      	push	{r7, lr}
    401a:	b084      	sub	sp, #16
    401c:	af00      	add	r7, sp, #0
    401e:	6078      	str	r0, [r7, #4]
    4020:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    4022:	687b      	ldr	r3, [r7, #4]
    4024:	2b00      	cmp	r3, #0
    4026:	d008      	beq.n	403a <timer_add_task+0x22>
    4028:	683b      	ldr	r3, [r7, #0]
    402a:	2b00      	cmp	r3, #0
    402c:	d005      	beq.n	403a <timer_add_task+0x22>
    402e:	687b      	ldr	r3, [r7, #4]
    4030:	681b      	ldr	r3, [r3, #0]
    4032:	2b00      	cmp	r3, #0
    4034:	d001      	beq.n	403a <timer_add_task+0x22>
    4036:	2301      	movs	r3, #1
    4038:	e000      	b.n	403c <timer_add_task+0x24>
    403a:	2300      	movs	r3, #0
    403c:	f003 0301 	and.w	r3, r3, #1
    4040:	b2db      	uxtb	r3, r3
    4042:	227b      	movs	r2, #123	; 0x7b
    4044:	492f      	ldr	r1, [pc, #188]	; (4104 <timer_add_task+0xec>)
    4046:	4618      	mov	r0, r3
    4048:	4b2f      	ldr	r3, [pc, #188]	; (4108 <timer_add_task+0xf0>)
    404a:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    404c:	687b      	ldr	r3, [r7, #4]
    404e:	7f1b      	ldrb	r3, [r3, #28]
    4050:	b2db      	uxtb	r3, r3
    4052:	f043 0301 	orr.w	r3, r3, #1
    4056:	b2da      	uxtb	r2, r3
    4058:	687b      	ldr	r3, [r7, #4]
    405a:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    405c:	687b      	ldr	r3, [r7, #4]
    405e:	3318      	adds	r3, #24
    4060:	6839      	ldr	r1, [r7, #0]
    4062:	4618      	mov	r0, r3
    4064:	4b29      	ldr	r3, [pc, #164]	; (410c <timer_add_task+0xf4>)
    4066:	4798      	blx	r3
    4068:	4603      	mov	r3, r0
    406a:	2b00      	cmp	r3, #0
    406c:	d00f      	beq.n	408e <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    406e:	687b      	ldr	r3, [r7, #4]
    4070:	7f1b      	ldrb	r3, [r3, #28]
    4072:	b2db      	uxtb	r3, r3
    4074:	f023 0301 	bic.w	r3, r3, #1
    4078:	b2da      	uxtb	r2, r3
    407a:	687b      	ldr	r3, [r7, #4]
    407c:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    407e:	2280      	movs	r2, #128	; 0x80
    4080:	4920      	ldr	r1, [pc, #128]	; (4104 <timer_add_task+0xec>)
    4082:	2000      	movs	r0, #0
    4084:	4b20      	ldr	r3, [pc, #128]	; (4108 <timer_add_task+0xf0>)
    4086:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    4088:	f06f 0311 	mvn.w	r3, #17
    408c:	e035      	b.n	40fa <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    408e:	687b      	ldr	r3, [r7, #4]
    4090:	695a      	ldr	r2, [r3, #20]
    4092:	683b      	ldr	r3, [r7, #0]
    4094:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    4096:	687b      	ldr	r3, [r7, #4]
    4098:	f103 0018 	add.w	r0, r3, #24
    409c:	687b      	ldr	r3, [r7, #4]
    409e:	695b      	ldr	r3, [r3, #20]
    40a0:	461a      	mov	r2, r3
    40a2:	6839      	ldr	r1, [r7, #0]
    40a4:	4b1a      	ldr	r3, [pc, #104]	; (4110 <timer_add_task+0xf8>)
    40a6:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    40a8:	687b      	ldr	r3, [r7, #4]
    40aa:	7f1b      	ldrb	r3, [r3, #28]
    40ac:	b2db      	uxtb	r3, r3
    40ae:	f023 0301 	bic.w	r3, r3, #1
    40b2:	b2da      	uxtb	r2, r3
    40b4:	687b      	ldr	r3, [r7, #4]
    40b6:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    40b8:	687b      	ldr	r3, [r7, #4]
    40ba:	7f1b      	ldrb	r3, [r3, #28]
    40bc:	b2db      	uxtb	r3, r3
    40be:	f003 0302 	and.w	r3, r3, #2
    40c2:	2b00      	cmp	r3, #0
    40c4:	d018      	beq.n	40f8 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    40c6:	f107 030c 	add.w	r3, r7, #12
    40ca:	4618      	mov	r0, r3
    40cc:	4b11      	ldr	r3, [pc, #68]	; (4114 <timer_add_task+0xfc>)
    40ce:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    40d0:	687b      	ldr	r3, [r7, #4]
    40d2:	7f1b      	ldrb	r3, [r3, #28]
    40d4:	b2db      	uxtb	r3, r3
    40d6:	f023 0302 	bic.w	r3, r3, #2
    40da:	b2da      	uxtb	r2, r3
    40dc:	687b      	ldr	r3, [r7, #4]
    40de:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    40e0:	687b      	ldr	r3, [r7, #4]
    40e2:	681b      	ldr	r3, [r3, #0]
    40e4:	69db      	ldr	r3, [r3, #28]
    40e6:	687a      	ldr	r2, [r7, #4]
    40e8:	3204      	adds	r2, #4
    40ea:	4610      	mov	r0, r2
    40ec:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    40ee:	f107 030c 	add.w	r3, r7, #12
    40f2:	4618      	mov	r0, r3
    40f4:	4b08      	ldr	r3, [pc, #32]	; (4118 <timer_add_task+0x100>)
    40f6:	4798      	blx	r3
	}

	return ERR_NONE;
    40f8:	2300      	movs	r3, #0
}
    40fa:	4618      	mov	r0, r3
    40fc:	3710      	adds	r7, #16
    40fe:	46bd      	mov	sp, r7
    4100:	bd80      	pop	{r7, pc}
    4102:	bf00      	nop
    4104:	0001b204 	.word	0x0001b204
    4108:	00004cdd 	.word	0x00004cdd
    410c:	00004d05 	.word	0x00004d05
    4110:	00004219 	.word	0x00004219
    4114:	0000d125 	.word	0x0000d125
    4118:	0000d14b 	.word	0x0000d14b

0000411c <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    411c:	b580      	push	{r7, lr}
    411e:	b084      	sub	sp, #16
    4120:	af00      	add	r7, sp, #0
    4122:	6078      	str	r0, [r7, #4]
    4124:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    4126:	687b      	ldr	r3, [r7, #4]
    4128:	2b00      	cmp	r3, #0
    412a:	d008      	beq.n	413e <timer_remove_task+0x22>
    412c:	683b      	ldr	r3, [r7, #0]
    412e:	2b00      	cmp	r3, #0
    4130:	d005      	beq.n	413e <timer_remove_task+0x22>
    4132:	687b      	ldr	r3, [r7, #4]
    4134:	681b      	ldr	r3, [r3, #0]
    4136:	2b00      	cmp	r3, #0
    4138:	d001      	beq.n	413e <timer_remove_task+0x22>
    413a:	2301      	movs	r3, #1
    413c:	e000      	b.n	4140 <timer_remove_task+0x24>
    413e:	2300      	movs	r3, #0
    4140:	f003 0301 	and.w	r3, r3, #1
    4144:	b2db      	uxtb	r3, r3
    4146:	2296      	movs	r2, #150	; 0x96
    4148:	492d      	ldr	r1, [pc, #180]	; (4200 <timer_remove_task+0xe4>)
    414a:	4618      	mov	r0, r3
    414c:	4b2d      	ldr	r3, [pc, #180]	; (4204 <timer_remove_task+0xe8>)
    414e:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    4150:	687b      	ldr	r3, [r7, #4]
    4152:	7f1b      	ldrb	r3, [r3, #28]
    4154:	b2db      	uxtb	r3, r3
    4156:	f043 0301 	orr.w	r3, r3, #1
    415a:	b2da      	uxtb	r2, r3
    415c:	687b      	ldr	r3, [r7, #4]
    415e:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    4160:	687b      	ldr	r3, [r7, #4]
    4162:	3318      	adds	r3, #24
    4164:	6839      	ldr	r1, [r7, #0]
    4166:	4618      	mov	r0, r3
    4168:	4b27      	ldr	r3, [pc, #156]	; (4208 <timer_remove_task+0xec>)
    416a:	4798      	blx	r3
    416c:	4603      	mov	r3, r0
    416e:	f083 0301 	eor.w	r3, r3, #1
    4172:	b2db      	uxtb	r3, r3
    4174:	2b00      	cmp	r3, #0
    4176:	d00f      	beq.n	4198 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    4178:	687b      	ldr	r3, [r7, #4]
    417a:	7f1b      	ldrb	r3, [r3, #28]
    417c:	b2db      	uxtb	r3, r3
    417e:	f023 0301 	bic.w	r3, r3, #1
    4182:	b2da      	uxtb	r2, r3
    4184:	687b      	ldr	r3, [r7, #4]
    4186:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    4188:	229b      	movs	r2, #155	; 0x9b
    418a:	491d      	ldr	r1, [pc, #116]	; (4200 <timer_remove_task+0xe4>)
    418c:	2000      	movs	r0, #0
    418e:	4b1d      	ldr	r3, [pc, #116]	; (4204 <timer_remove_task+0xe8>)
    4190:	4798      	blx	r3
		return ERR_NOT_FOUND;
    4192:	f06f 0309 	mvn.w	r3, #9
    4196:	e02e      	b.n	41f6 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    4198:	687b      	ldr	r3, [r7, #4]
    419a:	3318      	adds	r3, #24
    419c:	6839      	ldr	r1, [r7, #0]
    419e:	4618      	mov	r0, r3
    41a0:	4b1a      	ldr	r3, [pc, #104]	; (420c <timer_remove_task+0xf0>)
    41a2:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    41a4:	687b      	ldr	r3, [r7, #4]
    41a6:	7f1b      	ldrb	r3, [r3, #28]
    41a8:	b2db      	uxtb	r3, r3
    41aa:	f023 0301 	bic.w	r3, r3, #1
    41ae:	b2da      	uxtb	r2, r3
    41b0:	687b      	ldr	r3, [r7, #4]
    41b2:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    41b4:	687b      	ldr	r3, [r7, #4]
    41b6:	7f1b      	ldrb	r3, [r3, #28]
    41b8:	b2db      	uxtb	r3, r3
    41ba:	f003 0302 	and.w	r3, r3, #2
    41be:	2b00      	cmp	r3, #0
    41c0:	d018      	beq.n	41f4 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    41c2:	f107 030c 	add.w	r3, r7, #12
    41c6:	4618      	mov	r0, r3
    41c8:	4b11      	ldr	r3, [pc, #68]	; (4210 <timer_remove_task+0xf4>)
    41ca:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    41cc:	687b      	ldr	r3, [r7, #4]
    41ce:	7f1b      	ldrb	r3, [r3, #28]
    41d0:	b2db      	uxtb	r3, r3
    41d2:	f023 0302 	bic.w	r3, r3, #2
    41d6:	b2da      	uxtb	r2, r3
    41d8:	687b      	ldr	r3, [r7, #4]
    41da:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    41dc:	687b      	ldr	r3, [r7, #4]
    41de:	681b      	ldr	r3, [r3, #0]
    41e0:	69db      	ldr	r3, [r3, #28]
    41e2:	687a      	ldr	r2, [r7, #4]
    41e4:	3204      	adds	r2, #4
    41e6:	4610      	mov	r0, r2
    41e8:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    41ea:	f107 030c 	add.w	r3, r7, #12
    41ee:	4618      	mov	r0, r3
    41f0:	4b08      	ldr	r3, [pc, #32]	; (4214 <timer_remove_task+0xf8>)
    41f2:	4798      	blx	r3
	}

	return ERR_NONE;
    41f4:	2300      	movs	r3, #0
}
    41f6:	4618      	mov	r0, r3
    41f8:	3710      	adds	r7, #16
    41fa:	46bd      	mov	sp, r7
    41fc:	bd80      	pop	{r7, pc}
    41fe:	bf00      	nop
    4200:	0001b204 	.word	0x0001b204
    4204:	00004cdd 	.word	0x00004cdd
    4208:	00004d05 	.word	0x00004d05
    420c:	00004e67 	.word	0x00004e67
    4210:	0000d125 	.word	0x0000d125
    4214:	0000d14b 	.word	0x0000d14b

00004218 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    4218:	b580      	push	{r7, lr}
    421a:	b088      	sub	sp, #32
    421c:	af00      	add	r7, sp, #0
    421e:	60f8      	str	r0, [r7, #12]
    4220:	60b9      	str	r1, [r7, #8]
    4222:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    4224:	2300      	movs	r3, #0
    4226:	61bb      	str	r3, [r7, #24]
    4228:	68f8      	ldr	r0, [r7, #12]
    422a:	4b23      	ldr	r3, [pc, #140]	; (42b8 <timer_add_timer_task+0xa0>)
    422c:	4798      	blx	r3
    422e:	6138      	str	r0, [r7, #16]

	if (!head) {
    4230:	693b      	ldr	r3, [r7, #16]
    4232:	2b00      	cmp	r3, #0
    4234:	d104      	bne.n	4240 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    4236:	68b9      	ldr	r1, [r7, #8]
    4238:	68f8      	ldr	r0, [r7, #12]
    423a:	4b20      	ldr	r3, [pc, #128]	; (42bc <timer_add_timer_task+0xa4>)
    423c:	4798      	blx	r3
		return;
    423e:	e037      	b.n	42b0 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4240:	693b      	ldr	r3, [r7, #16]
    4242:	61fb      	str	r3, [r7, #28]
    4244:	e022      	b.n	428c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    4246:	69fb      	ldr	r3, [r7, #28]
    4248:	685a      	ldr	r2, [r3, #4]
    424a:	687b      	ldr	r3, [r7, #4]
    424c:	429a      	cmp	r2, r3
    424e:	d808      	bhi.n	4262 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    4250:	69fb      	ldr	r3, [r7, #28]
    4252:	689a      	ldr	r2, [r3, #8]
    4254:	69fb      	ldr	r3, [r7, #28]
    4256:	6859      	ldr	r1, [r3, #4]
    4258:	687b      	ldr	r3, [r7, #4]
    425a:	1acb      	subs	r3, r1, r3
    425c:	4413      	add	r3, r2
    425e:	617b      	str	r3, [r7, #20]
    4260:	e009      	b.n	4276 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    4262:	69fb      	ldr	r3, [r7, #28]
    4264:	689a      	ldr	r2, [r3, #8]
    4266:	69fb      	ldr	r3, [r7, #28]
    4268:	685b      	ldr	r3, [r3, #4]
    426a:	441a      	add	r2, r3
    426c:	687b      	ldr	r3, [r7, #4]
    426e:	425b      	negs	r3, r3
    4270:	4413      	add	r3, r2
    4272:	3301      	adds	r3, #1
    4274:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    4276:	68bb      	ldr	r3, [r7, #8]
    4278:	689a      	ldr	r2, [r3, #8]
    427a:	697b      	ldr	r3, [r7, #20]
    427c:	429a      	cmp	r2, r3
    427e:	d909      	bls.n	4294 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    4280:	69fb      	ldr	r3, [r7, #28]
    4282:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    4284:	69f8      	ldr	r0, [r7, #28]
    4286:	4b0e      	ldr	r3, [pc, #56]	; (42c0 <timer_add_timer_task+0xa8>)
    4288:	4798      	blx	r3
    428a:	61f8      	str	r0, [r7, #28]
    428c:	69fb      	ldr	r3, [r7, #28]
    428e:	2b00      	cmp	r3, #0
    4290:	d1d9      	bne.n	4246 <timer_add_timer_task+0x2e>
    4292:	e000      	b.n	4296 <timer_add_timer_task+0x7e>
			break;
    4294:	bf00      	nop
	}

	if (it == head) {
    4296:	69fa      	ldr	r2, [r7, #28]
    4298:	693b      	ldr	r3, [r7, #16]
    429a:	429a      	cmp	r2, r3
    429c:	d104      	bne.n	42a8 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    429e:	68b9      	ldr	r1, [r7, #8]
    42a0:	68f8      	ldr	r0, [r7, #12]
    42a2:	4b06      	ldr	r3, [pc, #24]	; (42bc <timer_add_timer_task+0xa4>)
    42a4:	4798      	blx	r3
    42a6:	e003      	b.n	42b0 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    42a8:	68b9      	ldr	r1, [r7, #8]
    42aa:	69b8      	ldr	r0, [r7, #24]
    42ac:	4b05      	ldr	r3, [pc, #20]	; (42c4 <timer_add_timer_task+0xac>)
    42ae:	4798      	blx	r3
	}
}
    42b0:	3720      	adds	r7, #32
    42b2:	46bd      	mov	sp, r7
    42b4:	bd80      	pop	{r7, pc}
    42b6:	bf00      	nop
    42b8:	00003e9d 	.word	0x00003e9d
    42bc:	00004d3d 	.word	0x00004d3d
    42c0:	00003eb5 	.word	0x00003eb5
    42c4:	00004d95 	.word	0x00004d95

000042c8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    42c8:	b580      	push	{r7, lr}
    42ca:	b086      	sub	sp, #24
    42cc:	af00      	add	r7, sp, #0
    42ce:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    42d0:	687b      	ldr	r3, [r7, #4]
    42d2:	3b04      	subs	r3, #4
    42d4:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    42d6:	693b      	ldr	r3, [r7, #16]
    42d8:	3318      	adds	r3, #24
    42da:	4618      	mov	r0, r3
    42dc:	4b27      	ldr	r3, [pc, #156]	; (437c <timer_process_counted+0xb4>)
    42de:	4798      	blx	r3
    42e0:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    42e2:	693b      	ldr	r3, [r7, #16]
    42e4:	695b      	ldr	r3, [r3, #20]
    42e6:	1c5a      	adds	r2, r3, #1
    42e8:	693b      	ldr	r3, [r7, #16]
    42ea:	615a      	str	r2, [r3, #20]
    42ec:	693b      	ldr	r3, [r7, #16]
    42ee:	695b      	ldr	r3, [r3, #20]
    42f0:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    42f2:	693b      	ldr	r3, [r7, #16]
    42f4:	7f1b      	ldrb	r3, [r3, #28]
    42f6:	b2db      	uxtb	r3, r3
    42f8:	f003 0301 	and.w	r3, r3, #1
    42fc:	2b00      	cmp	r3, #0
    42fe:	d106      	bne.n	430e <timer_process_counted+0x46>
    4300:	693b      	ldr	r3, [r7, #16]
    4302:	7f1b      	ldrb	r3, [r3, #28]
    4304:	b2db      	uxtb	r3, r3
    4306:	f003 0302 	and.w	r3, r3, #2
    430a:	2b00      	cmp	r3, #0
    430c:	d027      	beq.n	435e <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    430e:	693b      	ldr	r3, [r7, #16]
    4310:	7f1b      	ldrb	r3, [r3, #28]
    4312:	b2db      	uxtb	r3, r3
    4314:	f043 0302 	orr.w	r3, r3, #2
    4318:	b2da      	uxtb	r2, r3
    431a:	693b      	ldr	r3, [r7, #16]
    431c:	771a      	strb	r2, [r3, #28]
		return;
    431e:	e029      	b.n	4374 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    4320:	697b      	ldr	r3, [r7, #20]
    4322:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    4324:	693b      	ldr	r3, [r7, #16]
    4326:	3318      	adds	r3, #24
    4328:	4618      	mov	r0, r3
    432a:	4b15      	ldr	r3, [pc, #84]	; (4380 <timer_process_counted+0xb8>)
    432c:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    432e:	68bb      	ldr	r3, [r7, #8]
    4330:	7c1b      	ldrb	r3, [r3, #16]
    4332:	2b01      	cmp	r3, #1
    4334:	d109      	bne.n	434a <timer_process_counted+0x82>
			tmp->time_label = time;
    4336:	68bb      	ldr	r3, [r7, #8]
    4338:	68fa      	ldr	r2, [r7, #12]
    433a:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    433c:	693b      	ldr	r3, [r7, #16]
    433e:	3318      	adds	r3, #24
    4340:	68fa      	ldr	r2, [r7, #12]
    4342:	68b9      	ldr	r1, [r7, #8]
    4344:	4618      	mov	r0, r3
    4346:	4b0f      	ldr	r3, [pc, #60]	; (4384 <timer_process_counted+0xbc>)
    4348:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    434a:	693b      	ldr	r3, [r7, #16]
    434c:	3318      	adds	r3, #24
    434e:	4618      	mov	r0, r3
    4350:	4b0a      	ldr	r3, [pc, #40]	; (437c <timer_process_counted+0xb4>)
    4352:	4798      	blx	r3
    4354:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    4356:	68bb      	ldr	r3, [r7, #8]
    4358:	68db      	ldr	r3, [r3, #12]
    435a:	68b8      	ldr	r0, [r7, #8]
    435c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    435e:	697b      	ldr	r3, [r7, #20]
    4360:	2b00      	cmp	r3, #0
    4362:	d007      	beq.n	4374 <timer_process_counted+0xac>
    4364:	697b      	ldr	r3, [r7, #20]
    4366:	685b      	ldr	r3, [r3, #4]
    4368:	68fa      	ldr	r2, [r7, #12]
    436a:	1ad2      	subs	r2, r2, r3
    436c:	697b      	ldr	r3, [r7, #20]
    436e:	689b      	ldr	r3, [r3, #8]
    4370:	429a      	cmp	r2, r3
    4372:	d2d5      	bcs.n	4320 <timer_process_counted+0x58>
	}
}
    4374:	3718      	adds	r7, #24
    4376:	46bd      	mov	sp, r7
    4378:	bd80      	pop	{r7, pc}
    437a:	bf00      	nop
    437c:	00003e9d 	.word	0x00003e9d
    4380:	00004e35 	.word	0x00004e35
    4384:	00004219 	.word	0x00004219

00004388 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    4388:	b480      	push	{r7}
    438a:	b085      	sub	sp, #20
    438c:	af00      	add	r7, sp, #0
    438e:	4603      	mov	r3, r0
    4390:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4392:	2300      	movs	r3, #0
    4394:	73fb      	strb	r3, [r7, #15]
    4396:	e029      	b.n	43ec <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    4398:	f997 300f 	ldrsb.w	r3, [r7, #15]
    439c:	4a19      	ldr	r2, [pc, #100]	; (4404 <_usb_d_find_ep+0x7c>)
    439e:	015b      	lsls	r3, r3, #5
    43a0:	4413      	add	r3, r2
    43a2:	3301      	adds	r3, #1
    43a4:	781b      	ldrb	r3, [r3, #0]
    43a6:	79fa      	ldrb	r2, [r7, #7]
    43a8:	429a      	cmp	r2, r3
    43aa:	d102      	bne.n	43b2 <_usb_d_find_ep+0x2a>
			return i;
    43ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
    43b0:	e022      	b.n	43f8 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    43b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    43b6:	4a13      	ldr	r2, [pc, #76]	; (4404 <_usb_d_find_ep+0x7c>)
    43b8:	015b      	lsls	r3, r3, #5
    43ba:	4413      	add	r3, r2
    43bc:	781b      	ldrb	r3, [r3, #0]
    43be:	2b00      	cmp	r3, #0
    43c0:	d10e      	bne.n	43e0 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    43c2:	79fb      	ldrb	r3, [r7, #7]
    43c4:	f003 030f 	and.w	r3, r3, #15
    43c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    43cc:	490d      	ldr	r1, [pc, #52]	; (4404 <_usb_d_find_ep+0x7c>)
    43ce:	0152      	lsls	r2, r2, #5
    43d0:	440a      	add	r2, r1
    43d2:	3201      	adds	r2, #1
    43d4:	7812      	ldrb	r2, [r2, #0]
    43d6:	4293      	cmp	r3, r2
    43d8:	d102      	bne.n	43e0 <_usb_d_find_ep+0x58>
			return i;
    43da:	f997 300f 	ldrsb.w	r3, [r7, #15]
    43de:	e00b      	b.n	43f8 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    43e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    43e4:	b2db      	uxtb	r3, r3
    43e6:	3301      	adds	r3, #1
    43e8:	b2db      	uxtb	r3, r3
    43ea:	73fb      	strb	r3, [r7, #15]
    43ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
    43f0:	2b03      	cmp	r3, #3
    43f2:	ddd1      	ble.n	4398 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    43f4:	f04f 33ff 	mov.w	r3, #4294967295
}
    43f8:	4618      	mov	r0, r3
    43fa:	3714      	adds	r7, #20
    43fc:	46bd      	mov	sp, r7
    43fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4402:	4770      	bx	lr
    4404:	2000221c 	.word	0x2000221c

00004408 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    4408:	b580      	push	{r7, lr}
    440a:	b088      	sub	sp, #32
    440c:	af00      	add	r7, sp, #0
    440e:	60ba      	str	r2, [r7, #8]
    4410:	607b      	str	r3, [r7, #4]
    4412:	4603      	mov	r3, r0
    4414:	73fb      	strb	r3, [r7, #15]
    4416:	460b      	mov	r3, r1
    4418:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    441a:	68bb      	ldr	r3, [r7, #8]
    441c:	617b      	str	r3, [r7, #20]
    441e:	687b      	ldr	r3, [r7, #4]
    4420:	61bb      	str	r3, [r7, #24]
    4422:	7bbb      	ldrb	r3, [r7, #14]
    4424:	2b00      	cmp	r3, #0
    4426:	d004      	beq.n	4432 <_usb_d_trans+0x2a>
    4428:	7bfb      	ldrb	r3, [r7, #15]
    442a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    442e:	b2db      	uxtb	r3, r3
    4430:	e003      	b.n	443a <_usb_d_trans+0x32>
    4432:	7bfb      	ldrb	r3, [r7, #15]
    4434:	f003 030f 	and.w	r3, r3, #15
    4438:	b2db      	uxtb	r3, r3
    443a:	773b      	strb	r3, [r7, #28]
    443c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    4440:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    4442:	f107 0314 	add.w	r3, r7, #20
    4446:	4618      	mov	r0, r3
    4448:	4b03      	ldr	r3, [pc, #12]	; (4458 <_usb_d_trans+0x50>)
    444a:	4798      	blx	r3
    444c:	4603      	mov	r3, r0
}
    444e:	4618      	mov	r0, r3
    4450:	3720      	adds	r7, #32
    4452:	46bd      	mov	sp, r7
    4454:	bd80      	pop	{r7, pc}
    4456:	bf00      	nop
    4458:	0000c759 	.word	0x0000c759

0000445c <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    445c:	b480      	push	{r7}
    445e:	b085      	sub	sp, #20
    4460:	af00      	add	r7, sp, #0
    4462:	60f8      	str	r0, [r7, #12]
    4464:	60b9      	str	r1, [r7, #8]
    4466:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    4468:	2300      	movs	r3, #0
}
    446a:	4618      	mov	r0, r3
    446c:	3714      	adds	r7, #20
    446e:	46bd      	mov	sp, r7
    4470:	f85d 7b04 	ldr.w	r7, [sp], #4
    4474:	4770      	bx	lr
	...

00004478 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    4478:	b580      	push	{r7, lr}
    447a:	b086      	sub	sp, #24
    447c:	af00      	add	r7, sp, #0
    447e:	4603      	mov	r3, r0
    4480:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4482:	79fb      	ldrb	r3, [r7, #7]
    4484:	4618      	mov	r0, r3
    4486:	4b2a      	ldr	r3, [pc, #168]	; (4530 <usb_d_cb_trans_setup+0xb8>)
    4488:	4798      	blx	r3
    448a:	4603      	mov	r3, r0
    448c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    448e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4492:	015b      	lsls	r3, r3, #5
    4494:	4a27      	ldr	r2, [pc, #156]	; (4534 <usb_d_cb_trans_setup+0xbc>)
    4496:	4413      	add	r3, r2
    4498:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    449a:	693b      	ldr	r3, [r7, #16]
    449c:	330c      	adds	r3, #12
    449e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    44a0:	79fb      	ldrb	r3, [r7, #7]
    44a2:	68f9      	ldr	r1, [r7, #12]
    44a4:	4618      	mov	r0, r3
    44a6:	4b24      	ldr	r3, [pc, #144]	; (4538 <usb_d_cb_trans_setup+0xc0>)
    44a8:	4798      	blx	r3
    44aa:	4603      	mov	r3, r0
    44ac:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    44ae:	7afb      	ldrb	r3, [r7, #11]
    44b0:	2b08      	cmp	r3, #8
    44b2:	d00d      	beq.n	44d0 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    44b4:	79fb      	ldrb	r3, [r7, #7]
    44b6:	2101      	movs	r1, #1
    44b8:	4618      	mov	r0, r3
    44ba:	4b20      	ldr	r3, [pc, #128]	; (453c <usb_d_cb_trans_setup+0xc4>)
    44bc:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    44be:	79fb      	ldrb	r3, [r7, #7]
    44c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    44c4:	b2db      	uxtb	r3, r3
    44c6:	2101      	movs	r1, #1
    44c8:	4618      	mov	r0, r3
    44ca:	4b1c      	ldr	r3, [pc, #112]	; (453c <usb_d_cb_trans_setup+0xc4>)
    44cc:	4798      	blx	r3
		return;
    44ce:	e02b      	b.n	4528 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    44d0:	79fb      	ldrb	r3, [r7, #7]
    44d2:	2100      	movs	r1, #0
    44d4:	4618      	mov	r0, r3
    44d6:	4b19      	ldr	r3, [pc, #100]	; (453c <usb_d_cb_trans_setup+0xc4>)
    44d8:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    44da:	79fb      	ldrb	r3, [r7, #7]
    44dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    44e0:	b2db      	uxtb	r3, r3
    44e2:	2100      	movs	r1, #0
    44e4:	4618      	mov	r0, r3
    44e6:	4b15      	ldr	r3, [pc, #84]	; (453c <usb_d_cb_trans_setup+0xc4>)
    44e8:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    44ea:	693b      	ldr	r3, [r7, #16]
    44ec:	2201      	movs	r2, #1
    44ee:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    44f0:	693b      	ldr	r3, [r7, #16]
    44f2:	695b      	ldr	r3, [r3, #20]
    44f4:	79fa      	ldrb	r2, [r7, #7]
    44f6:	68f9      	ldr	r1, [r7, #12]
    44f8:	4610      	mov	r0, r2
    44fa:	4798      	blx	r3
    44fc:	4603      	mov	r3, r0
    44fe:	f083 0301 	eor.w	r3, r3, #1
    4502:	b2db      	uxtb	r3, r3
    4504:	2b00      	cmp	r3, #0
    4506:	d00f      	beq.n	4528 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    4508:	693b      	ldr	r3, [r7, #16]
    450a:	2205      	movs	r2, #5
    450c:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    450e:	79fb      	ldrb	r3, [r7, #7]
    4510:	2101      	movs	r1, #1
    4512:	4618      	mov	r0, r3
    4514:	4b09      	ldr	r3, [pc, #36]	; (453c <usb_d_cb_trans_setup+0xc4>)
    4516:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    4518:	79fb      	ldrb	r3, [r7, #7]
    451a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    451e:	b2db      	uxtb	r3, r3
    4520:	2101      	movs	r1, #1
    4522:	4618      	mov	r0, r3
    4524:	4b05      	ldr	r3, [pc, #20]	; (453c <usb_d_cb_trans_setup+0xc4>)
    4526:	4798      	blx	r3
	}
}
    4528:	3718      	adds	r7, #24
    452a:	46bd      	mov	sp, r7
    452c:	bd80      	pop	{r7, pc}
    452e:	bf00      	nop
    4530:	00004389 	.word	0x00004389
    4534:	2000221c 	.word	0x2000221c
    4538:	0000c6b1 	.word	0x0000c6b1
    453c:	0000c529 	.word	0x0000c529

00004540 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    4540:	b580      	push	{r7, lr}
    4542:	b084      	sub	sp, #16
    4544:	af00      	add	r7, sp, #0
    4546:	4603      	mov	r3, r0
    4548:	6039      	str	r1, [r7, #0]
    454a:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    454c:	79fb      	ldrb	r3, [r7, #7]
    454e:	4618      	mov	r0, r3
    4550:	4b0d      	ldr	r3, [pc, #52]	; (4588 <usb_d_cb_trans_more+0x48>)
    4552:	4798      	blx	r3
    4554:	4603      	mov	r3, r0
    4556:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4558:	f997 300f 	ldrsb.w	r3, [r7, #15]
    455c:	015b      	lsls	r3, r3, #5
    455e:	4a0b      	ldr	r2, [pc, #44]	; (458c <usb_d_cb_trans_more+0x4c>)
    4560:	4413      	add	r3, r2
    4562:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    4564:	68bb      	ldr	r3, [r7, #8]
    4566:	789b      	ldrb	r3, [r3, #2]
    4568:	2b03      	cmp	r3, #3
    456a:	d107      	bne.n	457c <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    456c:	68bb      	ldr	r3, [r7, #8]
    456e:	699b      	ldr	r3, [r3, #24]
    4570:	79fa      	ldrb	r2, [r7, #7]
    4572:	6839      	ldr	r1, [r7, #0]
    4574:	4610      	mov	r0, r2
    4576:	4798      	blx	r3
    4578:	4603      	mov	r3, r0
    457a:	e000      	b.n	457e <usb_d_cb_trans_more+0x3e>
	}
	return false;
    457c:	2300      	movs	r3, #0
}
    457e:	4618      	mov	r0, r3
    4580:	3710      	adds	r7, #16
    4582:	46bd      	mov	sp, r7
    4584:	bd80      	pop	{r7, pc}
    4586:	bf00      	nop
    4588:	00004389 	.word	0x00004389
    458c:	2000221c 	.word	0x2000221c

00004590 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    4590:	b590      	push	{r4, r7, lr}
    4592:	b087      	sub	sp, #28
    4594:	af02      	add	r7, sp, #8
    4596:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    4598:	687b      	ldr	r3, [r7, #4]
    459a:	789b      	ldrb	r3, [r3, #2]
    459c:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    459e:	687b      	ldr	r3, [r7, #4]
    45a0:	7b1b      	ldrb	r3, [r3, #12]
    45a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    45a6:	2b00      	cmp	r3, #0
    45a8:	bf14      	ite	ne
    45aa:	2301      	movne	r3, #1
    45ac:	2300      	moveq	r3, #0
    45ae:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    45b0:	7bfb      	ldrb	r3, [r7, #15]
    45b2:	2b03      	cmp	r3, #3
    45b4:	d13a      	bne.n	462c <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    45b6:	687b      	ldr	r3, [r7, #4]
    45b8:	69db      	ldr	r3, [r3, #28]
    45ba:	687a      	ldr	r2, [r7, #4]
    45bc:	7850      	ldrb	r0, [r2, #1]
    45be:	687a      	ldr	r2, [r7, #4]
    45c0:	320c      	adds	r2, #12
    45c2:	2101      	movs	r1, #1
    45c4:	4798      	blx	r3
    45c6:	4603      	mov	r3, r0
    45c8:	737b      	strb	r3, [r7, #13]
		if (err) {
    45ca:	7b7b      	ldrb	r3, [r7, #13]
    45cc:	2b00      	cmp	r3, #0
    45ce:	d015      	beq.n	45fc <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    45d0:	687b      	ldr	r3, [r7, #4]
    45d2:	2205      	movs	r2, #5
    45d4:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    45d6:	687b      	ldr	r3, [r7, #4]
    45d8:	2202      	movs	r2, #2
    45da:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    45dc:	7bbb      	ldrb	r3, [r7, #14]
    45de:	2b00      	cmp	r3, #0
    45e0:	d002      	beq.n	45e8 <usb_d_ctrl_trans_done+0x58>
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	785b      	ldrb	r3, [r3, #1]
    45e6:	e004      	b.n	45f2 <usb_d_ctrl_trans_done+0x62>
    45e8:	687b      	ldr	r3, [r7, #4]
    45ea:	785b      	ldrb	r3, [r3, #1]
    45ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
    45f0:	b2db      	uxtb	r3, r3
    45f2:	2101      	movs	r1, #1
    45f4:	4618      	mov	r0, r3
    45f6:	4b15      	ldr	r3, [pc, #84]	; (464c <usb_d_ctrl_trans_done+0xbc>)
    45f8:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    45fa:	e022      	b.n	4642 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    45fc:	687b      	ldr	r3, [r7, #4]
    45fe:	2204      	movs	r2, #4
    4600:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    4602:	687b      	ldr	r3, [r7, #4]
    4604:	7858      	ldrb	r0, [r3, #1]
    4606:	7bbb      	ldrb	r3, [r7, #14]
    4608:	2b00      	cmp	r3, #0
    460a:	bf14      	ite	ne
    460c:	2301      	movne	r3, #1
    460e:	2300      	moveq	r3, #0
    4610:	b2db      	uxtb	r3, r3
    4612:	f083 0301 	eor.w	r3, r3, #1
    4616:	b2db      	uxtb	r3, r3
    4618:	f003 0301 	and.w	r3, r3, #1
    461c:	b2d9      	uxtb	r1, r3
    461e:	2301      	movs	r3, #1
    4620:	9300      	str	r3, [sp, #0]
    4622:	2300      	movs	r3, #0
    4624:	2200      	movs	r2, #0
    4626:	4c0a      	ldr	r4, [pc, #40]	; (4650 <usb_d_ctrl_trans_done+0xc0>)
    4628:	47a0      	blx	r4
}
    462a:	e00a      	b.n	4642 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    462c:	687b      	ldr	r3, [r7, #4]
    462e:	69db      	ldr	r3, [r3, #28]
    4630:	687a      	ldr	r2, [r7, #4]
    4632:	7850      	ldrb	r0, [r2, #1]
    4634:	687a      	ldr	r2, [r7, #4]
    4636:	320c      	adds	r2, #12
    4638:	2100      	movs	r1, #0
    463a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    463c:	687b      	ldr	r3, [r7, #4]
    463e:	2202      	movs	r2, #2
    4640:	709a      	strb	r2, [r3, #2]
}
    4642:	bf00      	nop
    4644:	3714      	adds	r7, #20
    4646:	46bd      	mov	sp, r7
    4648:	bd90      	pop	{r4, r7, pc}
    464a:	bf00      	nop
    464c:	0000c529 	.word	0x0000c529
    4650:	00004409 	.word	0x00004409

00004654 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    4654:	b580      	push	{r7, lr}
    4656:	b086      	sub	sp, #24
    4658:	af00      	add	r7, sp, #0
    465a:	4603      	mov	r3, r0
    465c:	60b9      	str	r1, [r7, #8]
    465e:	607a      	str	r2, [r7, #4]
    4660:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4662:	7bfb      	ldrb	r3, [r7, #15]
    4664:	4618      	mov	r0, r3
    4666:	4b2f      	ldr	r3, [pc, #188]	; (4724 <_usb_d_cb_trans_done+0xd0>)
    4668:	4798      	blx	r3
    466a:	4603      	mov	r3, r0
    466c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    466e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4672:	015b      	lsls	r3, r3, #5
    4674:	4a2c      	ldr	r2, [pc, #176]	; (4728 <_usb_d_cb_trans_done+0xd4>)
    4676:	4413      	add	r3, r2
    4678:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    467a:	68bb      	ldr	r3, [r7, #8]
    467c:	2b00      	cmp	r3, #0
    467e:	d10e      	bne.n	469e <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    4680:	693b      	ldr	r3, [r7, #16]
    4682:	2200      	movs	r2, #0
    4684:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4686:	693b      	ldr	r3, [r7, #16]
    4688:	781b      	ldrb	r3, [r3, #0]
    468a:	2b00      	cmp	r3, #0
    468c:	d103      	bne.n	4696 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    468e:	6938      	ldr	r0, [r7, #16]
    4690:	4b26      	ldr	r3, [pc, #152]	; (472c <_usb_d_cb_trans_done+0xd8>)
    4692:	4798      	blx	r3
			return;
    4694:	e043      	b.n	471e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    4696:	693b      	ldr	r3, [r7, #16]
    4698:	2201      	movs	r2, #1
    469a:	709a      	strb	r2, [r3, #2]
    469c:	e038      	b.n	4710 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    469e:	68bb      	ldr	r3, [r7, #8]
    46a0:	2b01      	cmp	r3, #1
    46a2:	d113      	bne.n	46cc <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    46a4:	693b      	ldr	r3, [r7, #16]
    46a6:	2202      	movs	r2, #2
    46a8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    46aa:	693b      	ldr	r3, [r7, #16]
    46ac:	781b      	ldrb	r3, [r3, #0]
    46ae:	2b00      	cmp	r3, #0
    46b0:	d108      	bne.n	46c4 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    46b2:	693b      	ldr	r3, [r7, #16]
    46b4:	2202      	movs	r2, #2
    46b6:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    46b8:	7bfb      	ldrb	r3, [r7, #15]
    46ba:	2100      	movs	r1, #0
    46bc:	4618      	mov	r0, r3
    46be:	4b1c      	ldr	r3, [pc, #112]	; (4730 <_usb_d_cb_trans_done+0xdc>)
    46c0:	4798      	blx	r3
    46c2:	e025      	b.n	4710 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    46c4:	693b      	ldr	r3, [r7, #16]
    46c6:	2205      	movs	r2, #5
    46c8:	709a      	strb	r2, [r3, #2]
    46ca:	e021      	b.n	4710 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    46cc:	68bb      	ldr	r3, [r7, #8]
    46ce:	2b02      	cmp	r3, #2
    46d0:	d10e      	bne.n	46f0 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    46d2:	693b      	ldr	r3, [r7, #16]
    46d4:	2204      	movs	r2, #4
    46d6:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    46d8:	693b      	ldr	r3, [r7, #16]
    46da:	781b      	ldrb	r3, [r3, #0]
    46dc:	2b00      	cmp	r3, #0
    46de:	d103      	bne.n	46e8 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    46e0:	693b      	ldr	r3, [r7, #16]
    46e2:	2202      	movs	r2, #2
    46e4:	709a      	strb	r2, [r3, #2]
			return;
    46e6:	e01a      	b.n	471e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    46e8:	693b      	ldr	r3, [r7, #16]
    46ea:	2201      	movs	r2, #1
    46ec:	709a      	strb	r2, [r3, #2]
    46ee:	e00f      	b.n	4710 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    46f0:	68bb      	ldr	r3, [r7, #8]
    46f2:	2b03      	cmp	r3, #3
    46f4:	d106      	bne.n	4704 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    46f6:	693b      	ldr	r3, [r7, #16]
    46f8:	2200      	movs	r2, #0
    46fa:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    46fc:	693b      	ldr	r3, [r7, #16]
    46fe:	2205      	movs	r2, #5
    4700:	70da      	strb	r2, [r3, #3]
    4702:	e005      	b.n	4710 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    4704:	693b      	ldr	r3, [r7, #16]
    4706:	2206      	movs	r2, #6
    4708:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    470a:	693b      	ldr	r3, [r7, #16]
    470c:	2206      	movs	r2, #6
    470e:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    4710:	693b      	ldr	r3, [r7, #16]
    4712:	69db      	ldr	r3, [r3, #28]
    4714:	693a      	ldr	r2, [r7, #16]
    4716:	78d1      	ldrb	r1, [r2, #3]
    4718:	687a      	ldr	r2, [r7, #4]
    471a:	7bf8      	ldrb	r0, [r7, #15]
    471c:	4798      	blx	r3
}
    471e:	3718      	adds	r7, #24
    4720:	46bd      	mov	sp, r7
    4722:	bd80      	pop	{r7, pc}
    4724:	00004389 	.word	0x00004389
    4728:	2000221c 	.word	0x2000221c
    472c:	00004591 	.word	0x00004591
    4730:	0000c529 	.word	0x0000c529

00004734 <usb_d_init>:

int32_t usb_d_init(void)
{
    4734:	b580      	push	{r7, lr}
    4736:	b082      	sub	sp, #8
    4738:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    473a:	4b21      	ldr	r3, [pc, #132]	; (47c0 <usb_d_init+0x8c>)
    473c:	4798      	blx	r3
    473e:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    4740:	683b      	ldr	r3, [r7, #0]
    4742:	2b00      	cmp	r3, #0
    4744:	da01      	bge.n	474a <usb_d_init+0x16>
		return rc;
    4746:	683b      	ldr	r3, [r7, #0]
    4748:	e036      	b.n	47b8 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    474a:	2280      	movs	r2, #128	; 0x80
    474c:	2100      	movs	r1, #0
    474e:	481d      	ldr	r0, [pc, #116]	; (47c4 <usb_d_init+0x90>)
    4750:	4b1d      	ldr	r3, [pc, #116]	; (47c8 <usb_d_init+0x94>)
    4752:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4754:	2300      	movs	r3, #0
    4756:	71fb      	strb	r3, [r7, #7]
    4758:	e01e      	b.n	4798 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    475a:	79fb      	ldrb	r3, [r7, #7]
    475c:	4a19      	ldr	r2, [pc, #100]	; (47c4 <usb_d_init+0x90>)
    475e:	015b      	lsls	r3, r3, #5
    4760:	4413      	add	r3, r2
    4762:	3301      	adds	r3, #1
    4764:	22ff      	movs	r2, #255	; 0xff
    4766:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    4768:	79fb      	ldrb	r3, [r7, #7]
    476a:	4a16      	ldr	r2, [pc, #88]	; (47c4 <usb_d_init+0x90>)
    476c:	015b      	lsls	r3, r3, #5
    476e:	4413      	add	r3, r2
    4770:	3314      	adds	r3, #20
    4772:	4a16      	ldr	r2, [pc, #88]	; (47cc <usb_d_init+0x98>)
    4774:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    4776:	79fb      	ldrb	r3, [r7, #7]
    4778:	4a12      	ldr	r2, [pc, #72]	; (47c4 <usb_d_init+0x90>)
    477a:	015b      	lsls	r3, r3, #5
    477c:	4413      	add	r3, r2
    477e:	3318      	adds	r3, #24
    4780:	4a12      	ldr	r2, [pc, #72]	; (47cc <usb_d_init+0x98>)
    4782:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    4784:	79fb      	ldrb	r3, [r7, #7]
    4786:	4a0f      	ldr	r2, [pc, #60]	; (47c4 <usb_d_init+0x90>)
    4788:	015b      	lsls	r3, r3, #5
    478a:	4413      	add	r3, r2
    478c:	331c      	adds	r3, #28
    478e:	4a0f      	ldr	r2, [pc, #60]	; (47cc <usb_d_init+0x98>)
    4790:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    4792:	79fb      	ldrb	r3, [r7, #7]
    4794:	3301      	adds	r3, #1
    4796:	71fb      	strb	r3, [r7, #7]
    4798:	79fb      	ldrb	r3, [r7, #7]
    479a:	2b03      	cmp	r3, #3
    479c:	d9dd      	bls.n	475a <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    479e:	490c      	ldr	r1, [pc, #48]	; (47d0 <usb_d_init+0x9c>)
    47a0:	2000      	movs	r0, #0
    47a2:	4b0c      	ldr	r3, [pc, #48]	; (47d4 <usb_d_init+0xa0>)
    47a4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    47a6:	490c      	ldr	r1, [pc, #48]	; (47d8 <usb_d_init+0xa4>)
    47a8:	2001      	movs	r0, #1
    47aa:	4b0a      	ldr	r3, [pc, #40]	; (47d4 <usb_d_init+0xa0>)
    47ac:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    47ae:	490b      	ldr	r1, [pc, #44]	; (47dc <usb_d_init+0xa8>)
    47b0:	2002      	movs	r0, #2
    47b2:	4b08      	ldr	r3, [pc, #32]	; (47d4 <usb_d_init+0xa0>)
    47b4:	4798      	blx	r3
	return ERR_NONE;
    47b6:	2300      	movs	r3, #0
}
    47b8:	4618      	mov	r0, r3
    47ba:	3708      	adds	r7, #8
    47bc:	46bd      	mov	sp, r7
    47be:	bd80      	pop	{r7, pc}
    47c0:	0000bd71 	.word	0x0000bd71
    47c4:	2000221c 	.word	0x2000221c
    47c8:	0001acc5 	.word	0x0001acc5
    47cc:	0000445d 	.word	0x0000445d
    47d0:	00004479 	.word	0x00004479
    47d4:	0000c9b9 	.word	0x0000c9b9
    47d8:	00004541 	.word	0x00004541
    47dc:	00004655 	.word	0x00004655

000047e0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    47e0:	b580      	push	{r7, lr}
    47e2:	b082      	sub	sp, #8
    47e4:	af00      	add	r7, sp, #0
    47e6:	4603      	mov	r3, r0
    47e8:	6039      	str	r1, [r7, #0]
    47ea:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    47ec:	79fb      	ldrb	r3, [r7, #7]
    47ee:	6839      	ldr	r1, [r7, #0]
    47f0:	4618      	mov	r0, r3
    47f2:	4b03      	ldr	r3, [pc, #12]	; (4800 <usb_d_register_callback+0x20>)
    47f4:	4798      	blx	r3
}
    47f6:	bf00      	nop
    47f8:	3708      	adds	r7, #8
    47fa:	46bd      	mov	sp, r7
    47fc:	bd80      	pop	{r7, pc}
    47fe:	bf00      	nop
    4800:	0000c971 	.word	0x0000c971

00004804 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    4804:	b580      	push	{r7, lr}
    4806:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    4808:	4b02      	ldr	r3, [pc, #8]	; (4814 <usb_d_enable+0x10>)
    480a:	4798      	blx	r3
    480c:	4603      	mov	r3, r0
}
    480e:	4618      	mov	r0, r3
    4810:	bd80      	pop	{r7, pc}
    4812:	bf00      	nop
    4814:	0000be61 	.word	0x0000be61

00004818 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    4818:	b580      	push	{r7, lr}
    481a:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    481c:	4b01      	ldr	r3, [pc, #4]	; (4824 <usb_d_attach+0xc>)
    481e:	4798      	blx	r3
}
    4820:	bf00      	nop
    4822:	bd80      	pop	{r7, pc}
    4824:	0000bee5 	.word	0x0000bee5

00004828 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    4828:	b580      	push	{r7, lr}
    482a:	b082      	sub	sp, #8
    482c:	af00      	add	r7, sp, #0
    482e:	4603      	mov	r3, r0
    4830:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    4832:	79fb      	ldrb	r3, [r7, #7]
    4834:	4618      	mov	r0, r3
    4836:	4b03      	ldr	r3, [pc, #12]	; (4844 <usb_d_set_address+0x1c>)
    4838:	4798      	blx	r3
}
    483a:	bf00      	nop
    483c:	3708      	adds	r7, #8
    483e:	46bd      	mov	sp, r7
    4840:	bd80      	pop	{r7, pc}
    4842:	bf00      	nop
    4844:	0000bef9 	.word	0x0000bef9

00004848 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    4848:	b580      	push	{r7, lr}
    484a:	b082      	sub	sp, #8
    484c:	af00      	add	r7, sp, #0
    484e:	4603      	mov	r3, r0
    4850:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    4852:	79fb      	ldrb	r3, [r7, #7]
    4854:	b29b      	uxth	r3, r3
    4856:	461a      	mov	r2, r3
    4858:	2100      	movs	r1, #0
    485a:	2000      	movs	r0, #0
    485c:	4b03      	ldr	r3, [pc, #12]	; (486c <usb_d_ep0_init+0x24>)
    485e:	4798      	blx	r3
    4860:	4603      	mov	r3, r0
}
    4862:	4618      	mov	r0, r3
    4864:	3708      	adds	r7, #8
    4866:	46bd      	mov	sp, r7
    4868:	bd80      	pop	{r7, pc}
    486a:	bf00      	nop
    486c:	00004871 	.word	0x00004871

00004870 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    4870:	b580      	push	{r7, lr}
    4872:	b086      	sub	sp, #24
    4874:	af00      	add	r7, sp, #0
    4876:	4603      	mov	r3, r0
    4878:	71fb      	strb	r3, [r7, #7]
    487a:	460b      	mov	r3, r1
    487c:	71bb      	strb	r3, [r7, #6]
    487e:	4613      	mov	r3, r2
    4880:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    4882:	79fb      	ldrb	r3, [r7, #7]
    4884:	4618      	mov	r0, r3
    4886:	4b1e      	ldr	r3, [pc, #120]	; (4900 <usb_d_ep_init+0x90>)
    4888:	4798      	blx	r3
    488a:	4603      	mov	r3, r0
    488c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    488e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4892:	015b      	lsls	r3, r3, #5
    4894:	4a1b      	ldr	r2, [pc, #108]	; (4904 <usb_d_ep_init+0x94>)
    4896:	4413      	add	r3, r2
    4898:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    489a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    489e:	2b00      	cmp	r3, #0
    48a0:	db02      	blt.n	48a8 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    48a2:	f06f 0313 	mvn.w	r3, #19
    48a6:	e027      	b.n	48f8 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    48a8:	20ff      	movs	r0, #255	; 0xff
    48aa:	4b15      	ldr	r3, [pc, #84]	; (4900 <usb_d_ep_init+0x90>)
    48ac:	4798      	blx	r3
    48ae:	4603      	mov	r3, r0
    48b0:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    48b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    48b6:	2b00      	cmp	r3, #0
    48b8:	da02      	bge.n	48c0 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    48ba:	f06f 0314 	mvn.w	r3, #20
    48be:	e01b      	b.n	48f8 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    48c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
    48c4:	015b      	lsls	r3, r3, #5
    48c6:	4a0f      	ldr	r2, [pc, #60]	; (4904 <usb_d_ep_init+0x94>)
    48c8:	4413      	add	r3, r2
    48ca:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    48cc:	88ba      	ldrh	r2, [r7, #4]
    48ce:	79b9      	ldrb	r1, [r7, #6]
    48d0:	79fb      	ldrb	r3, [r7, #7]
    48d2:	4618      	mov	r0, r3
    48d4:	4b0c      	ldr	r3, [pc, #48]	; (4908 <usb_d_ep_init+0x98>)
    48d6:	4798      	blx	r3
    48d8:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    48da:	68fb      	ldr	r3, [r7, #12]
    48dc:	2b00      	cmp	r3, #0
    48de:	da01      	bge.n	48e4 <usb_d_ep_init+0x74>
		return rc;
    48e0:	68fb      	ldr	r3, [r7, #12]
    48e2:	e009      	b.n	48f8 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    48e4:	693b      	ldr	r3, [r7, #16]
    48e6:	79fa      	ldrb	r2, [r7, #7]
    48e8:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    48ea:	79bb      	ldrb	r3, [r7, #6]
    48ec:	f003 0303 	and.w	r3, r3, #3
    48f0:	b2da      	uxtb	r2, r3
    48f2:	693b      	ldr	r3, [r7, #16]
    48f4:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    48f6:	2300      	movs	r3, #0
}
    48f8:	4618      	mov	r0, r3
    48fa:	3718      	adds	r7, #24
    48fc:	46bd      	mov	sp, r7
    48fe:	bd80      	pop	{r7, pc}
    4900:	00004389 	.word	0x00004389
    4904:	2000221c 	.word	0x2000221c
    4908:	0000bf99 	.word	0x0000bf99

0000490c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    490c:	b580      	push	{r7, lr}
    490e:	b084      	sub	sp, #16
    4910:	af00      	add	r7, sp, #0
    4912:	4603      	mov	r3, r0
    4914:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4916:	79fb      	ldrb	r3, [r7, #7]
    4918:	4618      	mov	r0, r3
    491a:	4b0d      	ldr	r3, [pc, #52]	; (4950 <usb_d_ep_deinit+0x44>)
    491c:	4798      	blx	r3
    491e:	4603      	mov	r3, r0
    4920:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4922:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4926:	015b      	lsls	r3, r3, #5
    4928:	4a0a      	ldr	r2, [pc, #40]	; (4954 <usb_d_ep_deinit+0x48>)
    492a:	4413      	add	r3, r2
    492c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    492e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4932:	2b00      	cmp	r3, #0
    4934:	db07      	blt.n	4946 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    4936:	79fb      	ldrb	r3, [r7, #7]
    4938:	4618      	mov	r0, r3
    493a:	4b07      	ldr	r3, [pc, #28]	; (4958 <usb_d_ep_deinit+0x4c>)
    493c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    493e:	68bb      	ldr	r3, [r7, #8]
    4940:	22ff      	movs	r2, #255	; 0xff
    4942:	705a      	strb	r2, [r3, #1]
    4944:	e000      	b.n	4948 <usb_d_ep_deinit+0x3c>
		return;
    4946:	bf00      	nop
}
    4948:	3710      	adds	r7, #16
    494a:	46bd      	mov	sp, r7
    494c:	bd80      	pop	{r7, pc}
    494e:	bf00      	nop
    4950:	00004389 	.word	0x00004389
    4954:	2000221c 	.word	0x2000221c
    4958:	0000c0cd 	.word	0x0000c0cd

0000495c <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    495c:	b580      	push	{r7, lr}
    495e:	b086      	sub	sp, #24
    4960:	af00      	add	r7, sp, #0
    4962:	4603      	mov	r3, r0
    4964:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4966:	79fb      	ldrb	r3, [r7, #7]
    4968:	4618      	mov	r0, r3
    496a:	4b15      	ldr	r3, [pc, #84]	; (49c0 <usb_d_ep_enable+0x64>)
    496c:	4798      	blx	r3
    496e:	4603      	mov	r3, r0
    4970:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4972:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4976:	015b      	lsls	r3, r3, #5
    4978:	4a12      	ldr	r2, [pc, #72]	; (49c4 <usb_d_ep_enable+0x68>)
    497a:	4413      	add	r3, r2
    497c:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    497e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4982:	2b00      	cmp	r3, #0
    4984:	da02      	bge.n	498c <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    4986:	f06f 0311 	mvn.w	r3, #17
    498a:	e014      	b.n	49b6 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    498c:	693b      	ldr	r3, [r7, #16]
    498e:	781b      	ldrb	r3, [r3, #0]
    4990:	2b00      	cmp	r3, #0
    4992:	d101      	bne.n	4998 <usb_d_ep_enable+0x3c>
    4994:	2202      	movs	r2, #2
    4996:	e000      	b.n	499a <usb_d_ep_enable+0x3e>
    4998:	2201      	movs	r2, #1
    499a:	693b      	ldr	r3, [r7, #16]
    499c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    499e:	79fb      	ldrb	r3, [r7, #7]
    49a0:	4618      	mov	r0, r3
    49a2:	4b09      	ldr	r3, [pc, #36]	; (49c8 <usb_d_ep_enable+0x6c>)
    49a4:	4798      	blx	r3
    49a6:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    49a8:	68fb      	ldr	r3, [r7, #12]
    49aa:	2b00      	cmp	r3, #0
    49ac:	da02      	bge.n	49b4 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    49ae:	693b      	ldr	r3, [r7, #16]
    49b0:	2200      	movs	r2, #0
    49b2:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    49b4:	68fb      	ldr	r3, [r7, #12]
}
    49b6:	4618      	mov	r0, r3
    49b8:	3718      	adds	r7, #24
    49ba:	46bd      	mov	sp, r7
    49bc:	bd80      	pop	{r7, pc}
    49be:	bf00      	nop
    49c0:	00004389 	.word	0x00004389
    49c4:	2000221c 	.word	0x2000221c
    49c8:	0000c1b1 	.word	0x0000c1b1

000049cc <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    49cc:	b590      	push	{r4, r7, lr}
    49ce:	b08d      	sub	sp, #52	; 0x34
    49d0:	af02      	add	r7, sp, #8
    49d2:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    49d4:	687b      	ldr	r3, [r7, #4]
    49d6:	7a1b      	ldrb	r3, [r3, #8]
    49d8:	4618      	mov	r0, r3
    49da:	4b51      	ldr	r3, [pc, #324]	; (4b20 <usb_d_ep_transfer+0x154>)
    49dc:	4798      	blx	r3
    49de:	4603      	mov	r3, r0
    49e0:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    49e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
    49e6:	015b      	lsls	r3, r3, #5
    49e8:	4a4e      	ldr	r2, [pc, #312]	; (4b24 <usb_d_ep_transfer+0x158>)
    49ea:	4413      	add	r3, r2
    49ec:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    49ee:	687b      	ldr	r3, [r7, #4]
    49f0:	7a1b      	ldrb	r3, [r3, #8]
    49f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    49f6:	2b00      	cmp	r3, #0
    49f8:	bf14      	ite	ne
    49fa:	2301      	movne	r3, #1
    49fc:	2300      	moveq	r3, #0
    49fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    4a02:	687b      	ldr	r3, [r7, #4]
    4a04:	7a5b      	ldrb	r3, [r3, #9]
    4a06:	2b00      	cmp	r3, #0
    4a08:	bf14      	ite	ne
    4a0a:	2301      	movne	r3, #1
    4a0c:	2300      	moveq	r3, #0
    4a0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    4a12:	687b      	ldr	r3, [r7, #4]
    4a14:	685b      	ldr	r3, [r3, #4]
    4a16:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    4a18:	f997 301f 	ldrsb.w	r3, [r7, #31]
    4a1c:	2b00      	cmp	r3, #0
    4a1e:	da02      	bge.n	4a26 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    4a20:	f06f 0311 	mvn.w	r3, #17
    4a24:	e077      	b.n	4b16 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    4a26:	f107 0308 	add.w	r3, r7, #8
    4a2a:	4618      	mov	r0, r3
    4a2c:	4b3e      	ldr	r3, [pc, #248]	; (4b28 <usb_d_ep_transfer+0x15c>)
    4a2e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    4a30:	69bb      	ldr	r3, [r7, #24]
    4a32:	789b      	ldrb	r3, [r3, #2]
    4a34:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    4a36:	7bfb      	ldrb	r3, [r7, #15]
    4a38:	b2db      	uxtb	r3, r3
    4a3a:	2b01      	cmp	r3, #1
    4a3c:	d10c      	bne.n	4a58 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    4a3e:	69bb      	ldr	r3, [r7, #24]
    4a40:	2203      	movs	r2, #3
    4a42:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    4a44:	f107 0308 	add.w	r3, r7, #8
    4a48:	4618      	mov	r0, r3
    4a4a:	4b38      	ldr	r3, [pc, #224]	; (4b2c <usb_d_ep_transfer+0x160>)
    4a4c:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    4a4e:	69bb      	ldr	r3, [r7, #24]
    4a50:	781b      	ldrb	r3, [r3, #0]
    4a52:	2b00      	cmp	r3, #0
    4a54:	d151      	bne.n	4afa <usb_d_ep_transfer+0x12e>
    4a56:	e017      	b.n	4a88 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    4a58:	f107 0308 	add.w	r3, r7, #8
    4a5c:	4618      	mov	r0, r3
    4a5e:	4b33      	ldr	r3, [pc, #204]	; (4b2c <usb_d_ep_transfer+0x160>)
    4a60:	4798      	blx	r3
		switch (state) {
    4a62:	7bfb      	ldrb	r3, [r7, #15]
    4a64:	b2db      	uxtb	r3, r3
    4a66:	2b05      	cmp	r3, #5
    4a68:	d004      	beq.n	4a74 <usb_d_ep_transfer+0xa8>
    4a6a:	2b06      	cmp	r3, #6
    4a6c:	d004      	beq.n	4a78 <usb_d_ep_transfer+0xac>
    4a6e:	2b00      	cmp	r3, #0
    4a70:	d005      	beq.n	4a7e <usb_d_ep_transfer+0xb2>
    4a72:	e007      	b.n	4a84 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    4a74:	2302      	movs	r3, #2
    4a76:	e04e      	b.n	4b16 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    4a78:	f06f 030f 	mvn.w	r3, #15
    4a7c:	e04b      	b.n	4b16 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    4a7e:	f06f 0312 	mvn.w	r3, #18
    4a82:	e048      	b.n	4b16 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    4a84:	2301      	movs	r3, #1
    4a86:	e046      	b.n	4b16 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    4a88:	69bb      	ldr	r3, [r7, #24]
    4a8a:	7c9b      	ldrb	r3, [r3, #18]
    4a8c:	b29a      	uxth	r2, r3
    4a8e:	69bb      	ldr	r3, [r7, #24]
    4a90:	7cdb      	ldrb	r3, [r3, #19]
    4a92:	b29b      	uxth	r3, r3
    4a94:	021b      	lsls	r3, r3, #8
    4a96:	b29b      	uxth	r3, r3
    4a98:	4413      	add	r3, r2
    4a9a:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    4a9c:	8afb      	ldrh	r3, [r7, #22]
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	d10b      	bne.n	4aba <usb_d_ep_transfer+0xee>
			dir                 = true;
    4aa2:	2301      	movs	r3, #1
    4aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    4aa8:	2300      	movs	r3, #0
    4aaa:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    4aac:	2301      	movs	r3, #1
    4aae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    4ab2:	69bb      	ldr	r3, [r7, #24]
    4ab4:	2204      	movs	r2, #4
    4ab6:	709a      	strb	r2, [r3, #2]
    4ab8:	e01f      	b.n	4afa <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    4aba:	69bb      	ldr	r3, [r7, #24]
    4abc:	7b1b      	ldrb	r3, [r3, #12]
    4abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4ac2:	2b00      	cmp	r3, #0
    4ac4:	bf14      	ite	ne
    4ac6:	2301      	movne	r3, #1
    4ac8:	2300      	moveq	r3, #0
    4aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    4ace:	8afa      	ldrh	r2, [r7, #22]
    4ad0:	6a3b      	ldr	r3, [r7, #32]
    4ad2:	429a      	cmp	r2, r3
    4ad4:	d201      	bcs.n	4ada <usb_d_ep_transfer+0x10e>
				len = req_len;
    4ad6:	8afb      	ldrh	r3, [r7, #22]
    4ad8:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    4ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    4ade:	2b00      	cmp	r3, #0
    4ae0:	d008      	beq.n	4af4 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    4ae2:	8afa      	ldrh	r2, [r7, #22]
    4ae4:	6a3b      	ldr	r3, [r7, #32]
    4ae6:	429a      	cmp	r2, r3
    4ae8:	bf8c      	ite	hi
    4aea:	2301      	movhi	r3, #1
    4aec:	2300      	movls	r3, #0
    4aee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    4af2:	e002      	b.n	4afa <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    4af4:	2300      	movs	r3, #0
    4af6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    4afa:	687b      	ldr	r3, [r7, #4]
    4afc:	7a18      	ldrb	r0, [r3, #8]
    4afe:	687b      	ldr	r3, [r7, #4]
    4b00:	681a      	ldr	r2, [r3, #0]
    4b02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    4b06:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    4b0a:	9300      	str	r3, [sp, #0]
    4b0c:	6a3b      	ldr	r3, [r7, #32]
    4b0e:	4c08      	ldr	r4, [pc, #32]	; (4b30 <usb_d_ep_transfer+0x164>)
    4b10:	47a0      	blx	r4
    4b12:	6138      	str	r0, [r7, #16]
	return rc;
    4b14:	693b      	ldr	r3, [r7, #16]
}
    4b16:	4618      	mov	r0, r3
    4b18:	372c      	adds	r7, #44	; 0x2c
    4b1a:	46bd      	mov	sp, r7
    4b1c:	bd90      	pop	{r4, r7, pc}
    4b1e:	bf00      	nop
    4b20:	00004389 	.word	0x00004389
    4b24:	2000221c 	.word	0x2000221c
    4b28:	0000d125 	.word	0x0000d125
    4b2c:	0000d14b 	.word	0x0000d14b
    4b30:	00004409 	.word	0x00004409

00004b34 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    4b34:	b580      	push	{r7, lr}
    4b36:	b084      	sub	sp, #16
    4b38:	af00      	add	r7, sp, #0
    4b3a:	4603      	mov	r3, r0
    4b3c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4b3e:	79fb      	ldrb	r3, [r7, #7]
    4b40:	4618      	mov	r0, r3
    4b42:	4b0e      	ldr	r3, [pc, #56]	; (4b7c <usb_d_ep_abort+0x48>)
    4b44:	4798      	blx	r3
    4b46:	4603      	mov	r3, r0
    4b48:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4b4e:	015b      	lsls	r3, r3, #5
    4b50:	4a0b      	ldr	r2, [pc, #44]	; (4b80 <usb_d_ep_abort+0x4c>)
    4b52:	4413      	add	r3, r2
    4b54:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    4b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4b5a:	2b00      	cmp	r3, #0
    4b5c:	db0a      	blt.n	4b74 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    4b5e:	79fb      	ldrb	r3, [r7, #7]
    4b60:	4618      	mov	r0, r3
    4b62:	4b08      	ldr	r3, [pc, #32]	; (4b84 <usb_d_ep_abort+0x50>)
    4b64:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    4b66:	68bb      	ldr	r3, [r7, #8]
    4b68:	2201      	movs	r2, #1
    4b6a:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    4b6c:	68bb      	ldr	r3, [r7, #8]
    4b6e:	2204      	movs	r2, #4
    4b70:	70da      	strb	r2, [r3, #3]
    4b72:	e000      	b.n	4b76 <usb_d_ep_abort+0x42>
		return;
    4b74:	bf00      	nop
}
    4b76:	3710      	adds	r7, #16
    4b78:	46bd      	mov	sp, r7
    4b7a:	bd80      	pop	{r7, pc}
    4b7c:	00004389 	.word	0x00004389
    4b80:	2000221c 	.word	0x2000221c
    4b84:	0000c91d 	.word	0x0000c91d

00004b88 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    4b88:	b580      	push	{r7, lr}
    4b8a:	b086      	sub	sp, #24
    4b8c:	af00      	add	r7, sp, #0
    4b8e:	4603      	mov	r3, r0
    4b90:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4b92:	79fb      	ldrb	r3, [r7, #7]
    4b94:	4618      	mov	r0, r3
    4b96:	4b1a      	ldr	r3, [pc, #104]	; (4c00 <_usb_d_ep_halt_clr+0x78>)
    4b98:	4798      	blx	r3
    4b9a:	4603      	mov	r3, r0
    4b9c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4b9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4ba2:	015b      	lsls	r3, r3, #5
    4ba4:	4a17      	ldr	r2, [pc, #92]	; (4c04 <_usb_d_ep_halt_clr+0x7c>)
    4ba6:	4413      	add	r3, r2
    4ba8:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    4baa:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4bae:	2b00      	cmp	r3, #0
    4bb0:	da02      	bge.n	4bb8 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    4bb2:	f06f 0311 	mvn.w	r3, #17
    4bb6:	e01f      	b.n	4bf8 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    4bb8:	79fb      	ldrb	r3, [r7, #7]
    4bba:	2102      	movs	r1, #2
    4bbc:	4618      	mov	r0, r3
    4bbe:	4b12      	ldr	r3, [pc, #72]	; (4c08 <_usb_d_ep_halt_clr+0x80>)
    4bc0:	4798      	blx	r3
    4bc2:	4603      	mov	r3, r0
    4bc4:	2b00      	cmp	r3, #0
    4bc6:	d016      	beq.n	4bf6 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    4bc8:	79fb      	ldrb	r3, [r7, #7]
    4bca:	2100      	movs	r1, #0
    4bcc:	4618      	mov	r0, r3
    4bce:	4b0e      	ldr	r3, [pc, #56]	; (4c08 <_usb_d_ep_halt_clr+0x80>)
    4bd0:	4798      	blx	r3
    4bd2:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    4bd4:	68fb      	ldr	r3, [r7, #12]
    4bd6:	2b00      	cmp	r3, #0
    4bd8:	da01      	bge.n	4bde <_usb_d_ep_halt_clr+0x56>
			return rc;
    4bda:	68fb      	ldr	r3, [r7, #12]
    4bdc:	e00c      	b.n	4bf8 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    4bde:	693b      	ldr	r3, [r7, #16]
    4be0:	2201      	movs	r2, #1
    4be2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    4be4:	693b      	ldr	r3, [r7, #16]
    4be6:	2203      	movs	r2, #3
    4be8:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    4bea:	693b      	ldr	r3, [r7, #16]
    4bec:	69db      	ldr	r3, [r3, #28]
    4bee:	79f8      	ldrb	r0, [r7, #7]
    4bf0:	2200      	movs	r2, #0
    4bf2:	2103      	movs	r1, #3
    4bf4:	4798      	blx	r3
	}
	return ERR_NONE;
    4bf6:	2300      	movs	r3, #0
}
    4bf8:	4618      	mov	r0, r3
    4bfa:	3718      	adds	r7, #24
    4bfc:	46bd      	mov	sp, r7
    4bfe:	bd80      	pop	{r7, pc}
    4c00:	00004389 	.word	0x00004389
    4c04:	2000221c 	.word	0x2000221c
    4c08:	0000c529 	.word	0x0000c529

00004c0c <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    4c0c:	b580      	push	{r7, lr}
    4c0e:	b082      	sub	sp, #8
    4c10:	af00      	add	r7, sp, #0
    4c12:	4603      	mov	r3, r0
    4c14:	460a      	mov	r2, r1
    4c16:	71fb      	strb	r3, [r7, #7]
    4c18:	4613      	mov	r3, r2
    4c1a:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    4c1c:	79bb      	ldrb	r3, [r7, #6]
    4c1e:	2b00      	cmp	r3, #0
    4c20:	d105      	bne.n	4c2e <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    4c22:	79fb      	ldrb	r3, [r7, #7]
    4c24:	4618      	mov	r0, r3
    4c26:	4b0c      	ldr	r3, [pc, #48]	; (4c58 <usb_d_ep_halt+0x4c>)
    4c28:	4798      	blx	r3
    4c2a:	4603      	mov	r3, r0
    4c2c:	e00f      	b.n	4c4e <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    4c2e:	79bb      	ldrb	r3, [r7, #6]
    4c30:	2b01      	cmp	r3, #1
    4c32:	d106      	bne.n	4c42 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    4c34:	79fb      	ldrb	r3, [r7, #7]
    4c36:	2101      	movs	r1, #1
    4c38:	4618      	mov	r0, r3
    4c3a:	4b08      	ldr	r3, [pc, #32]	; (4c5c <usb_d_ep_halt+0x50>)
    4c3c:	4798      	blx	r3
    4c3e:	4603      	mov	r3, r0
    4c40:	e005      	b.n	4c4e <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    4c42:	79fb      	ldrb	r3, [r7, #7]
    4c44:	2102      	movs	r1, #2
    4c46:	4618      	mov	r0, r3
    4c48:	4b04      	ldr	r3, [pc, #16]	; (4c5c <usb_d_ep_halt+0x50>)
    4c4a:	4798      	blx	r3
    4c4c:	4603      	mov	r3, r0
	}
}
    4c4e:	4618      	mov	r0, r3
    4c50:	3708      	adds	r7, #8
    4c52:	46bd      	mov	sp, r7
    4c54:	bd80      	pop	{r7, pc}
    4c56:	bf00      	nop
    4c58:	00004b89 	.word	0x00004b89
    4c5c:	0000c529 	.word	0x0000c529

00004c60 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    4c60:	b580      	push	{r7, lr}
    4c62:	b086      	sub	sp, #24
    4c64:	af00      	add	r7, sp, #0
    4c66:	4603      	mov	r3, r0
    4c68:	603a      	str	r2, [r7, #0]
    4c6a:	71fb      	strb	r3, [r7, #7]
    4c6c:	460b      	mov	r3, r1
    4c6e:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    4c70:	79fb      	ldrb	r3, [r7, #7]
    4c72:	4618      	mov	r0, r3
    4c74:	4b16      	ldr	r3, [pc, #88]	; (4cd0 <usb_d_ep_register_callback+0x70>)
    4c76:	4798      	blx	r3
    4c78:	4603      	mov	r3, r0
    4c7a:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    4c7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4c80:	015b      	lsls	r3, r3, #5
    4c82:	4a14      	ldr	r2, [pc, #80]	; (4cd4 <usb_d_ep_register_callback+0x74>)
    4c84:	4413      	add	r3, r2
    4c86:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    4c88:	683b      	ldr	r3, [r7, #0]
    4c8a:	2b00      	cmp	r3, #0
    4c8c:	d001      	beq.n	4c92 <usb_d_ep_register_callback+0x32>
    4c8e:	683b      	ldr	r3, [r7, #0]
    4c90:	e000      	b.n	4c94 <usb_d_ep_register_callback+0x34>
    4c92:	4b11      	ldr	r3, [pc, #68]	; (4cd8 <usb_d_ep_register_callback+0x78>)
    4c94:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    4c96:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	db13      	blt.n	4cc6 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    4c9e:	79bb      	ldrb	r3, [r7, #6]
    4ca0:	2b01      	cmp	r3, #1
    4ca2:	d008      	beq.n	4cb6 <usb_d_ep_register_callback+0x56>
    4ca4:	2b02      	cmp	r3, #2
    4ca6:	d00a      	beq.n	4cbe <usb_d_ep_register_callback+0x5e>
    4ca8:	2b00      	cmp	r3, #0
    4caa:	d000      	beq.n	4cae <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    4cac:	e00c      	b.n	4cc8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    4cae:	693b      	ldr	r3, [r7, #16]
    4cb0:	68fa      	ldr	r2, [r7, #12]
    4cb2:	615a      	str	r2, [r3, #20]
		break;
    4cb4:	e008      	b.n	4cc8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    4cb6:	693b      	ldr	r3, [r7, #16]
    4cb8:	68fa      	ldr	r2, [r7, #12]
    4cba:	619a      	str	r2, [r3, #24]
		break;
    4cbc:	e004      	b.n	4cc8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    4cbe:	693b      	ldr	r3, [r7, #16]
    4cc0:	68fa      	ldr	r2, [r7, #12]
    4cc2:	61da      	str	r2, [r3, #28]
		break;
    4cc4:	e000      	b.n	4cc8 <usb_d_ep_register_callback+0x68>
		return;
    4cc6:	bf00      	nop
	}
}
    4cc8:	3718      	adds	r7, #24
    4cca:	46bd      	mov	sp, r7
    4ccc:	bd80      	pop	{r7, pc}
    4cce:	bf00      	nop
    4cd0:	00004389 	.word	0x00004389
    4cd4:	2000221c 	.word	0x2000221c
    4cd8:	0000445d 	.word	0x0000445d

00004cdc <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    4cdc:	b480      	push	{r7}
    4cde:	b085      	sub	sp, #20
    4ce0:	af00      	add	r7, sp, #0
    4ce2:	4603      	mov	r3, r0
    4ce4:	60b9      	str	r1, [r7, #8]
    4ce6:	607a      	str	r2, [r7, #4]
    4ce8:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    4cea:	7bfb      	ldrb	r3, [r7, #15]
    4cec:	f083 0301 	eor.w	r3, r3, #1
    4cf0:	b2db      	uxtb	r3, r3
    4cf2:	2b00      	cmp	r3, #0
    4cf4:	d000      	beq.n	4cf8 <assert+0x1c>
		__asm("BKPT #0");
    4cf6:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    4cf8:	bf00      	nop
    4cfa:	3714      	adds	r7, #20
    4cfc:	46bd      	mov	sp, r7
    4cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d02:	4770      	bx	lr

00004d04 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    4d04:	b480      	push	{r7}
    4d06:	b085      	sub	sp, #20
    4d08:	af00      	add	r7, sp, #0
    4d0a:	6078      	str	r0, [r7, #4]
    4d0c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    4d0e:	687b      	ldr	r3, [r7, #4]
    4d10:	681b      	ldr	r3, [r3, #0]
    4d12:	60fb      	str	r3, [r7, #12]
    4d14:	e008      	b.n	4d28 <is_list_element+0x24>
		if (it == element) {
    4d16:	68fa      	ldr	r2, [r7, #12]
    4d18:	683b      	ldr	r3, [r7, #0]
    4d1a:	429a      	cmp	r2, r3
    4d1c:	d101      	bne.n	4d22 <is_list_element+0x1e>
			return true;
    4d1e:	2301      	movs	r3, #1
    4d20:	e006      	b.n	4d30 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    4d22:	68fb      	ldr	r3, [r7, #12]
    4d24:	681b      	ldr	r3, [r3, #0]
    4d26:	60fb      	str	r3, [r7, #12]
    4d28:	68fb      	ldr	r3, [r7, #12]
    4d2a:	2b00      	cmp	r3, #0
    4d2c:	d1f3      	bne.n	4d16 <is_list_element+0x12>
		}
	}

	return false;
    4d2e:	2300      	movs	r3, #0
}
    4d30:	4618      	mov	r0, r3
    4d32:	3714      	adds	r7, #20
    4d34:	46bd      	mov	sp, r7
    4d36:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d3a:	4770      	bx	lr

00004d3c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    4d3c:	b580      	push	{r7, lr}
    4d3e:	b082      	sub	sp, #8
    4d40:	af00      	add	r7, sp, #0
    4d42:	6078      	str	r0, [r7, #4]
    4d44:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    4d46:	6839      	ldr	r1, [r7, #0]
    4d48:	6878      	ldr	r0, [r7, #4]
    4d4a:	4b0f      	ldr	r3, [pc, #60]	; (4d88 <list_insert_as_head+0x4c>)
    4d4c:	4798      	blx	r3
    4d4e:	4603      	mov	r3, r0
    4d50:	2b00      	cmp	r3, #0
    4d52:	bf14      	ite	ne
    4d54:	2301      	movne	r3, #1
    4d56:	2300      	moveq	r3, #0
    4d58:	b2db      	uxtb	r3, r3
    4d5a:	f083 0301 	eor.w	r3, r3, #1
    4d5e:	b2db      	uxtb	r3, r3
    4d60:	f003 0301 	and.w	r3, r3, #1
    4d64:	b2db      	uxtb	r3, r3
    4d66:	2239      	movs	r2, #57	; 0x39
    4d68:	4908      	ldr	r1, [pc, #32]	; (4d8c <list_insert_as_head+0x50>)
    4d6a:	4618      	mov	r0, r3
    4d6c:	4b08      	ldr	r3, [pc, #32]	; (4d90 <list_insert_as_head+0x54>)
    4d6e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    4d70:	687b      	ldr	r3, [r7, #4]
    4d72:	681a      	ldr	r2, [r3, #0]
    4d74:	683b      	ldr	r3, [r7, #0]
    4d76:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    4d78:	687b      	ldr	r3, [r7, #4]
    4d7a:	683a      	ldr	r2, [r7, #0]
    4d7c:	601a      	str	r2, [r3, #0]
}
    4d7e:	bf00      	nop
    4d80:	3708      	adds	r7, #8
    4d82:	46bd      	mov	sp, r7
    4d84:	bd80      	pop	{r7, pc}
    4d86:	bf00      	nop
    4d88:	00004d05 	.word	0x00004d05
    4d8c:	0001b21c 	.word	0x0001b21c
    4d90:	00004cdd 	.word	0x00004cdd

00004d94 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    4d94:	b480      	push	{r7}
    4d96:	b083      	sub	sp, #12
    4d98:	af00      	add	r7, sp, #0
    4d9a:	6078      	str	r0, [r7, #4]
    4d9c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    4d9e:	687b      	ldr	r3, [r7, #4]
    4da0:	681a      	ldr	r2, [r3, #0]
    4da2:	683b      	ldr	r3, [r7, #0]
    4da4:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    4da6:	687b      	ldr	r3, [r7, #4]
    4da8:	683a      	ldr	r2, [r7, #0]
    4daa:	601a      	str	r2, [r3, #0]
}
    4dac:	bf00      	nop
    4dae:	370c      	adds	r7, #12
    4db0:	46bd      	mov	sp, r7
    4db2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4db6:	4770      	bx	lr

00004db8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    4db8:	b580      	push	{r7, lr}
    4dba:	b084      	sub	sp, #16
    4dbc:	af00      	add	r7, sp, #0
    4dbe:	6078      	str	r0, [r7, #4]
    4dc0:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    4dc2:	687b      	ldr	r3, [r7, #4]
    4dc4:	681b      	ldr	r3, [r3, #0]
    4dc6:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    4dc8:	6839      	ldr	r1, [r7, #0]
    4dca:	6878      	ldr	r0, [r7, #4]
    4dcc:	4b16      	ldr	r3, [pc, #88]	; (4e28 <list_insert_at_end+0x70>)
    4dce:	4798      	blx	r3
    4dd0:	4603      	mov	r3, r0
    4dd2:	2b00      	cmp	r3, #0
    4dd4:	bf14      	ite	ne
    4dd6:	2301      	movne	r3, #1
    4dd8:	2300      	moveq	r3, #0
    4dda:	b2db      	uxtb	r3, r3
    4ddc:	f083 0301 	eor.w	r3, r3, #1
    4de0:	b2db      	uxtb	r3, r3
    4de2:	f003 0301 	and.w	r3, r3, #1
    4de6:	b2db      	uxtb	r3, r3
    4de8:	224f      	movs	r2, #79	; 0x4f
    4dea:	4910      	ldr	r1, [pc, #64]	; (4e2c <list_insert_at_end+0x74>)
    4dec:	4618      	mov	r0, r3
    4dee:	4b10      	ldr	r3, [pc, #64]	; (4e30 <list_insert_at_end+0x78>)
    4df0:	4798      	blx	r3

	if (!list->head) {
    4df2:	687b      	ldr	r3, [r7, #4]
    4df4:	681b      	ldr	r3, [r3, #0]
    4df6:	2b00      	cmp	r3, #0
    4df8:	d109      	bne.n	4e0e <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    4dfa:	687b      	ldr	r3, [r7, #4]
    4dfc:	683a      	ldr	r2, [r7, #0]
    4dfe:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    4e00:	683b      	ldr	r3, [r7, #0]
    4e02:	2200      	movs	r2, #0
    4e04:	601a      	str	r2, [r3, #0]
		return;
    4e06:	e00c      	b.n	4e22 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    4e08:	68fb      	ldr	r3, [r7, #12]
    4e0a:	681b      	ldr	r3, [r3, #0]
    4e0c:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    4e0e:	68fb      	ldr	r3, [r7, #12]
    4e10:	681b      	ldr	r3, [r3, #0]
    4e12:	2b00      	cmp	r3, #0
    4e14:	d1f8      	bne.n	4e08 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    4e16:	68fb      	ldr	r3, [r7, #12]
    4e18:	683a      	ldr	r2, [r7, #0]
    4e1a:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    4e1c:	683b      	ldr	r3, [r7, #0]
    4e1e:	2200      	movs	r2, #0
    4e20:	601a      	str	r2, [r3, #0]
}
    4e22:	3710      	adds	r7, #16
    4e24:	46bd      	mov	sp, r7
    4e26:	bd80      	pop	{r7, pc}
    4e28:	00004d05 	.word	0x00004d05
    4e2c:	0001b21c 	.word	0x0001b21c
    4e30:	00004cdd 	.word	0x00004cdd

00004e34 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    4e34:	b480      	push	{r7}
    4e36:	b085      	sub	sp, #20
    4e38:	af00      	add	r7, sp, #0
    4e3a:	6078      	str	r0, [r7, #4]
	if (list->head) {
    4e3c:	687b      	ldr	r3, [r7, #4]
    4e3e:	681b      	ldr	r3, [r3, #0]
    4e40:	2b00      	cmp	r3, #0
    4e42:	d009      	beq.n	4e58 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    4e44:	687b      	ldr	r3, [r7, #4]
    4e46:	681b      	ldr	r3, [r3, #0]
    4e48:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    4e4a:	687b      	ldr	r3, [r7, #4]
    4e4c:	681b      	ldr	r3, [r3, #0]
    4e4e:	681a      	ldr	r2, [r3, #0]
    4e50:	687b      	ldr	r3, [r7, #4]
    4e52:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    4e54:	68fb      	ldr	r3, [r7, #12]
    4e56:	e000      	b.n	4e5a <list_remove_head+0x26>
	}

	return NULL;
    4e58:	2300      	movs	r3, #0
}
    4e5a:	4618      	mov	r0, r3
    4e5c:	3714      	adds	r7, #20
    4e5e:	46bd      	mov	sp, r7
    4e60:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e64:	4770      	bx	lr

00004e66 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    4e66:	b480      	push	{r7}
    4e68:	b085      	sub	sp, #20
    4e6a:	af00      	add	r7, sp, #0
    4e6c:	6078      	str	r0, [r7, #4]
    4e6e:	6039      	str	r1, [r7, #0]
	if (!element) {
    4e70:	683b      	ldr	r3, [r7, #0]
    4e72:	2b00      	cmp	r3, #0
    4e74:	d101      	bne.n	4e7a <list_delete_element+0x14>
		return false;
    4e76:	2300      	movs	r3, #0
    4e78:	e024      	b.n	4ec4 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    4e7a:	687b      	ldr	r3, [r7, #4]
    4e7c:	681a      	ldr	r2, [r3, #0]
    4e7e:	683b      	ldr	r3, [r7, #0]
    4e80:	429a      	cmp	r2, r3
    4e82:	d106      	bne.n	4e92 <list_delete_element+0x2c>
		list->head = list->head->next;
    4e84:	687b      	ldr	r3, [r7, #4]
    4e86:	681b      	ldr	r3, [r3, #0]
    4e88:	681a      	ldr	r2, [r3, #0]
    4e8a:	687b      	ldr	r3, [r7, #4]
    4e8c:	601a      	str	r2, [r3, #0]
		return true;
    4e8e:	2301      	movs	r3, #1
    4e90:	e018      	b.n	4ec4 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    4e92:	687b      	ldr	r3, [r7, #4]
    4e94:	681b      	ldr	r3, [r3, #0]
    4e96:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    4e98:	e002      	b.n	4ea0 <list_delete_element+0x3a>
			it = it->next;
    4e9a:	68fb      	ldr	r3, [r7, #12]
    4e9c:	681b      	ldr	r3, [r3, #0]
    4e9e:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    4ea0:	68fb      	ldr	r3, [r7, #12]
    4ea2:	2b00      	cmp	r3, #0
    4ea4:	d004      	beq.n	4eb0 <list_delete_element+0x4a>
    4ea6:	68fb      	ldr	r3, [r7, #12]
    4ea8:	681a      	ldr	r2, [r3, #0]
    4eaa:	683b      	ldr	r3, [r7, #0]
    4eac:	429a      	cmp	r2, r3
    4eae:	d1f4      	bne.n	4e9a <list_delete_element+0x34>
		}
		if (it) {
    4eb0:	68fb      	ldr	r3, [r7, #12]
    4eb2:	2b00      	cmp	r3, #0
    4eb4:	d005      	beq.n	4ec2 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    4eb6:	683b      	ldr	r3, [r7, #0]
    4eb8:	681a      	ldr	r2, [r3, #0]
    4eba:	68fb      	ldr	r3, [r7, #12]
    4ebc:	601a      	str	r2, [r3, #0]
			return true;
    4ebe:	2301      	movs	r3, #1
    4ec0:	e000      	b.n	4ec4 <list_delete_element+0x5e>
		}
	}

	return false;
    4ec2:	2300      	movs	r3, #0
}
    4ec4:	4618      	mov	r0, r3
    4ec6:	3714      	adds	r7, #20
    4ec8:	46bd      	mov	sp, r7
    4eca:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ece:	4770      	bx	lr

00004ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    4ed0:	b480      	push	{r7}
    4ed2:	b083      	sub	sp, #12
    4ed4:	af00      	add	r7, sp, #0
    4ed6:	4603      	mov	r3, r0
    4ed8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4ede:	2b00      	cmp	r3, #0
    4ee0:	db0b      	blt.n	4efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4ee2:	4909      	ldr	r1, [pc, #36]	; (4f08 <__NVIC_EnableIRQ+0x38>)
    4ee4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4ee8:	095b      	lsrs	r3, r3, #5
    4eea:	88fa      	ldrh	r2, [r7, #6]
    4eec:	f002 021f 	and.w	r2, r2, #31
    4ef0:	2001      	movs	r0, #1
    4ef2:	fa00 f202 	lsl.w	r2, r0, r2
    4ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4efa:	bf00      	nop
    4efc:	370c      	adds	r7, #12
    4efe:	46bd      	mov	sp, r7
    4f00:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f04:	4770      	bx	lr
    4f06:	bf00      	nop
    4f08:	e000e100 	.word	0xe000e100

00004f0c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    4f0c:	b480      	push	{r7}
    4f0e:	b083      	sub	sp, #12
    4f10:	af00      	add	r7, sp, #0
    4f12:	4603      	mov	r3, r0
    4f14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4f1a:	2b00      	cmp	r3, #0
    4f1c:	db10      	blt.n	4f40 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4f1e:	490b      	ldr	r1, [pc, #44]	; (4f4c <__NVIC_DisableIRQ+0x40>)
    4f20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4f24:	095b      	lsrs	r3, r3, #5
    4f26:	88fa      	ldrh	r2, [r7, #6]
    4f28:	f002 021f 	and.w	r2, r2, #31
    4f2c:	2001      	movs	r0, #1
    4f2e:	fa00 f202 	lsl.w	r2, r0, r2
    4f32:	3320      	adds	r3, #32
    4f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4f38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4f3c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    4f40:	bf00      	nop
    4f42:	370c      	adds	r7, #12
    4f44:	46bd      	mov	sp, r7
    4f46:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f4a:	4770      	bx	lr
    4f4c:	e000e100 	.word	0xe000e100

00004f50 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    4f50:	b480      	push	{r7}
    4f52:	b083      	sub	sp, #12
    4f54:	af00      	add	r7, sp, #0
    4f56:	4603      	mov	r3, r0
    4f58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4f5e:	2b00      	cmp	r3, #0
    4f60:	db0c      	blt.n	4f7c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4f62:	4909      	ldr	r1, [pc, #36]	; (4f88 <__NVIC_ClearPendingIRQ+0x38>)
    4f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4f68:	095b      	lsrs	r3, r3, #5
    4f6a:	88fa      	ldrh	r2, [r7, #6]
    4f6c:	f002 021f 	and.w	r2, r2, #31
    4f70:	2001      	movs	r0, #1
    4f72:	fa00 f202 	lsl.w	r2, r0, r2
    4f76:	3360      	adds	r3, #96	; 0x60
    4f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4f7c:	bf00      	nop
    4f7e:	370c      	adds	r7, #12
    4f80:	46bd      	mov	sp, r7
    4f82:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f86:	4770      	bx	lr
    4f88:	e000e100 	.word	0xe000e100

00004f8c <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    4f8c:	b480      	push	{r7}
    4f8e:	b083      	sub	sp, #12
    4f90:	af00      	add	r7, sp, #0
    4f92:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    4f94:	687b      	ldr	r3, [r7, #4]
    4f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4f98:	095b      	lsrs	r3, r3, #5
    4f9a:	f003 0301 	and.w	r3, r3, #1
    4f9e:	2b00      	cmp	r3, #0
    4fa0:	bf14      	ite	ne
    4fa2:	2301      	movne	r3, #1
    4fa4:	2300      	moveq	r3, #0
    4fa6:	b2db      	uxtb	r3, r3
}
    4fa8:	4618      	mov	r0, r3
    4faa:	370c      	adds	r7, #12
    4fac:	46bd      	mov	sp, r7
    4fae:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fb2:	4770      	bx	lr

00004fb4 <hri_can_read_RXF0S_F0FL_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL(mask)) >> CAN_RXF0S_F0FL_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0FL_bf(const void *const hw)
{
    4fb4:	b480      	push	{r7}
    4fb6:	b083      	sub	sp, #12
    4fb8:	af00      	add	r7, sp, #0
    4fba:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0FL_Msk) >> CAN_RXF0S_F0FL_Pos;
    4fbc:	687b      	ldr	r3, [r7, #4]
    4fbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    4fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
    4fc6:	4618      	mov	r0, r3
    4fc8:	370c      	adds	r7, #12
    4fca:	46bd      	mov	sp, r7
    4fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fd0:	4770      	bx	lr

00004fd2 <hri_can_read_RXF0S_F0GI_bf>:
{
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI(mask)) >> CAN_RXF0S_F0GI_Pos;
}

static inline hri_can_rxf0s_reg_t hri_can_read_RXF0S_F0GI_bf(const void *const hw)
{
    4fd2:	b480      	push	{r7}
    4fd4:	b083      	sub	sp, #12
    4fd6:	af00      	add	r7, sp, #0
    4fd8:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->RXF0S.reg & CAN_RXF0S_F0GI_Msk) >> CAN_RXF0S_F0GI_Pos;
    4fda:	687b      	ldr	r3, [r7, #4]
    4fdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    4fe0:	0a1b      	lsrs	r3, r3, #8
    4fe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    4fe6:	4618      	mov	r0, r3
    4fe8:	370c      	adds	r7, #12
    4fea:	46bd      	mov	sp, r7
    4fec:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ff0:	4770      	bx	lr

00004ff2 <hri_can_get_TXFQS_TFQF_bit>:
{
	return ((Can *)hw)->RXF1S.reg;
}

static inline bool hri_can_get_TXFQS_TFQF_bit(const void *const hw)
{
    4ff2:	b480      	push	{r7}
    4ff4:	b083      	sub	sp, #12
    4ff6:	af00      	add	r7, sp, #0
    4ff8:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQF) >> CAN_TXFQS_TFQF_Pos;
    4ffa:	687b      	ldr	r3, [r7, #4]
    4ffc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    5000:	0d5b      	lsrs	r3, r3, #21
    5002:	f003 0301 	and.w	r3, r3, #1
    5006:	2b00      	cmp	r3, #0
    5008:	bf14      	ite	ne
    500a:	2301      	movne	r3, #1
    500c:	2300      	moveq	r3, #0
    500e:	b2db      	uxtb	r3, r3
}
    5010:	4618      	mov	r0, r3
    5012:	370c      	adds	r7, #12
    5014:	46bd      	mov	sp, r7
    5016:	f85d 7b04 	ldr.w	r7, [sp], #4
    501a:	4770      	bx	lr

0000501c <hri_can_read_TXFQS_TFQPI_bf>:
{
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI(mask)) >> CAN_TXFQS_TFQPI_Pos;
}

static inline hri_can_txfqs_reg_t hri_can_read_TXFQS_TFQPI_bf(const void *const hw)
{
    501c:	b480      	push	{r7}
    501e:	b083      	sub	sp, #12
    5020:	af00      	add	r7, sp, #0
    5022:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->TXFQS.reg & CAN_TXFQS_TFQPI_Msk) >> CAN_TXFQS_TFQPI_Pos;
    5024:	687b      	ldr	r3, [r7, #4]
    5026:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    502a:	0c1b      	lsrs	r3, r3, #16
    502c:	f003 031f 	and.w	r3, r3, #31
}
    5030:	4618      	mov	r0, r3
    5032:	370c      	adds	r7, #12
    5034:	46bd      	mov	sp, r7
    5036:	f85d 7b04 	ldr.w	r7, [sp], #4
    503a:	4770      	bx	lr

0000503c <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    503c:	b480      	push	{r7}
    503e:	b083      	sub	sp, #12
    5040:	af00      	add	r7, sp, #0
    5042:	6078      	str	r0, [r7, #4]
    5044:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    5046:	687b      	ldr	r3, [r7, #4]
    5048:	683a      	ldr	r2, [r7, #0]
    504a:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    504c:	bf00      	nop
    504e:	370c      	adds	r7, #12
    5050:	46bd      	mov	sp, r7
    5052:	f85d 7b04 	ldr.w	r7, [sp], #4
    5056:	4770      	bx	lr

00005058 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    5058:	b480      	push	{r7}
    505a:	b083      	sub	sp, #12
    505c:	af00      	add	r7, sp, #0
    505e:	6078      	str	r0, [r7, #4]
    5060:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    5062:	687b      	ldr	r3, [r7, #4]
    5064:	683a      	ldr	r2, [r7, #0]
    5066:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5068:	bf00      	nop
    506a:	370c      	adds	r7, #12
    506c:	46bd      	mov	sp, r7
    506e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5072:	4770      	bx	lr

00005074 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    5074:	b480      	push	{r7}
    5076:	b083      	sub	sp, #12
    5078:	af00      	add	r7, sp, #0
    507a:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    507c:	687b      	ldr	r3, [r7, #4]
    507e:	699b      	ldr	r3, [r3, #24]
    5080:	f043 0201 	orr.w	r2, r3, #1
    5084:	687b      	ldr	r3, [r7, #4]
    5086:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5088:	bf00      	nop
    508a:	370c      	adds	r7, #12
    508c:	46bd      	mov	sp, r7
    508e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5092:	4770      	bx	lr

00005094 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    5094:	b480      	push	{r7}
    5096:	b085      	sub	sp, #20
    5098:	af00      	add	r7, sp, #0
    509a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    509c:	687b      	ldr	r3, [r7, #4]
    509e:	699b      	ldr	r3, [r3, #24]
    50a0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    50a2:	68fb      	ldr	r3, [r7, #12]
    50a4:	f003 0301 	and.w	r3, r3, #1
    50a8:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    50aa:	68fb      	ldr	r3, [r7, #12]
    50ac:	2b00      	cmp	r3, #0
    50ae:	bf14      	ite	ne
    50b0:	2301      	movne	r3, #1
    50b2:	2300      	moveq	r3, #0
    50b4:	b2db      	uxtb	r3, r3
}
    50b6:	4618      	mov	r0, r3
    50b8:	3714      	adds	r7, #20
    50ba:	46bd      	mov	sp, r7
    50bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    50c0:	4770      	bx	lr

000050c2 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    50c2:	b480      	push	{r7}
    50c4:	b083      	sub	sp, #12
    50c6:	af00      	add	r7, sp, #0
    50c8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    50ca:	687b      	ldr	r3, [r7, #4]
    50cc:	699b      	ldr	r3, [r3, #24]
    50ce:	f023 0201 	bic.w	r2, r3, #1
    50d2:	687b      	ldr	r3, [r7, #4]
    50d4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    50d6:	bf00      	nop
    50d8:	370c      	adds	r7, #12
    50da:	46bd      	mov	sp, r7
    50dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    50e0:	4770      	bx	lr

000050e2 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    50e2:	b480      	push	{r7}
    50e4:	b083      	sub	sp, #12
    50e6:	af00      	add	r7, sp, #0
    50e8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    50ea:	687b      	ldr	r3, [r7, #4]
    50ec:	699b      	ldr	r3, [r3, #24]
    50ee:	f043 0202 	orr.w	r2, r3, #2
    50f2:	687b      	ldr	r3, [r7, #4]
    50f4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    50f6:	bf00      	nop
    50f8:	370c      	adds	r7, #12
    50fa:	46bd      	mov	sp, r7
    50fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5100:	4770      	bx	lr

00005102 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    5102:	b480      	push	{r7}
    5104:	b083      	sub	sp, #12
    5106:	af00      	add	r7, sp, #0
    5108:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    510a:	687b      	ldr	r3, [r7, #4]
    510c:	699b      	ldr	r3, [r3, #24]
    510e:	f023 0202 	bic.w	r2, r3, #2
    5112:	687b      	ldr	r3, [r7, #4]
    5114:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5116:	bf00      	nop
    5118:	370c      	adds	r7, #12
    511a:	46bd      	mov	sp, r7
    511c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5120:	4770      	bx	lr

00005122 <hri_can_get_CCCR_FDOE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_FDOE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_FDOE_bit(const void *const hw)
{
    5122:	b480      	push	{r7}
    5124:	b085      	sub	sp, #20
    5126:	af00      	add	r7, sp, #0
    5128:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    512a:	687b      	ldr	r3, [r7, #4]
    512c:	699b      	ldr	r3, [r3, #24]
    512e:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_FDOE) >> CAN_CCCR_FDOE_Pos;
    5130:	68fb      	ldr	r3, [r7, #12]
    5132:	0a1b      	lsrs	r3, r3, #8
    5134:	f003 0301 	and.w	r3, r3, #1
    5138:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    513a:	68fb      	ldr	r3, [r7, #12]
    513c:	2b00      	cmp	r3, #0
    513e:	bf14      	ite	ne
    5140:	2301      	movne	r3, #1
    5142:	2300      	moveq	r3, #0
    5144:	b2db      	uxtb	r3, r3
}
    5146:	4618      	mov	r0, r3
    5148:	3714      	adds	r7, #20
    514a:	46bd      	mov	sp, r7
    514c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5150:	4770      	bx	lr

00005152 <hri_can_get_CCCR_BRSE_bit>:
	((Can *)hw)->CCCR.reg |= CAN_CCCR_BRSE;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_can_get_CCCR_BRSE_bit(const void *const hw)
{
    5152:	b480      	push	{r7}
    5154:	b085      	sub	sp, #20
    5156:	af00      	add	r7, sp, #0
    5158:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    515a:	687b      	ldr	r3, [r7, #4]
    515c:	699b      	ldr	r3, [r3, #24]
    515e:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_BRSE) >> CAN_CCCR_BRSE_Pos;
    5160:	68fb      	ldr	r3, [r7, #12]
    5162:	0a5b      	lsrs	r3, r3, #9
    5164:	f003 0301 	and.w	r3, r3, #1
    5168:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    516a:	68fb      	ldr	r3, [r7, #12]
    516c:	2b00      	cmp	r3, #0
    516e:	bf14      	ite	ne
    5170:	2301      	movne	r3, #1
    5172:	2300      	moveq	r3, #0
    5174:	b2db      	uxtb	r3, r3
}
    5176:	4618      	mov	r0, r3
    5178:	3714      	adds	r7, #20
    517a:	46bd      	mov	sp, r7
    517c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5180:	4770      	bx	lr

00005182 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    5182:	b480      	push	{r7}
    5184:	b083      	sub	sp, #12
    5186:	af00      	add	r7, sp, #0
    5188:	6078      	str	r0, [r7, #4]
    518a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    518c:	687b      	ldr	r3, [r7, #4]
    518e:	699a      	ldr	r2, [r3, #24]
    5190:	683b      	ldr	r3, [r7, #0]
    5192:	431a      	orrs	r2, r3
    5194:	687b      	ldr	r3, [r7, #4]
    5196:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    5198:	bf00      	nop
    519a:	370c      	adds	r7, #12
    519c:	46bd      	mov	sp, r7
    519e:	f85d 7b04 	ldr.w	r7, [sp], #4
    51a2:	4770      	bx	lr

000051a4 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    51a4:	b480      	push	{r7}
    51a6:	b083      	sub	sp, #12
    51a8:	af00      	add	r7, sp, #0
    51aa:	6078      	str	r0, [r7, #4]
    51ac:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    51ae:	687b      	ldr	r3, [r7, #4]
    51b0:	683a      	ldr	r2, [r7, #0]
    51b2:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    51b4:	bf00      	nop
    51b6:	370c      	adds	r7, #12
    51b8:	46bd      	mov	sp, r7
    51ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    51be:	4770      	bx	lr

000051c0 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    51c0:	b480      	push	{r7}
    51c2:	b083      	sub	sp, #12
    51c4:	af00      	add	r7, sp, #0
    51c6:	6078      	str	r0, [r7, #4]
    51c8:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    51ca:	687b      	ldr	r3, [r7, #4]
    51cc:	683a      	ldr	r2, [r7, #0]
    51ce:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    51d0:	bf00      	nop
    51d2:	370c      	adds	r7, #12
    51d4:	46bd      	mov	sp, r7
    51d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    51da:	4770      	bx	lr

000051dc <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    51dc:	b480      	push	{r7}
    51de:	b083      	sub	sp, #12
    51e0:	af00      	add	r7, sp, #0
    51e2:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    51e4:	687b      	ldr	r3, [r7, #4]
    51e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    51e8:	4618      	mov	r0, r3
    51ea:	370c      	adds	r7, #12
    51ec:	46bd      	mov	sp, r7
    51ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    51f2:	4770      	bx	lr

000051f4 <hri_can_write_IE_RF0NE_bit>:
	tmp = (tmp & CAN_IE_RF0NE) >> CAN_IE_RF0NE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_RF0NE_bit(const void *const hw, bool value)
{
    51f4:	b480      	push	{r7}
    51f6:	b085      	sub	sp, #20
    51f8:	af00      	add	r7, sp, #0
    51fa:	6078      	str	r0, [r7, #4]
    51fc:	460b      	mov	r3, r1
    51fe:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    5200:	687b      	ldr	r3, [r7, #4]
    5202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5204:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_RF0NE;
    5206:	68fb      	ldr	r3, [r7, #12]
    5208:	f023 0301 	bic.w	r3, r3, #1
    520c:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_RF0NE_Pos;
    520e:	78fb      	ldrb	r3, [r7, #3]
    5210:	68fa      	ldr	r2, [r7, #12]
    5212:	4313      	orrs	r3, r2
    5214:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    5216:	687b      	ldr	r3, [r7, #4]
    5218:	68fa      	ldr	r2, [r7, #12]
    521a:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    521c:	bf00      	nop
    521e:	3714      	adds	r7, #20
    5220:	46bd      	mov	sp, r7
    5222:	f85d 7b04 	ldr.w	r7, [sp], #4
    5226:	4770      	bx	lr

00005228 <hri_can_write_IE_TCE_bit>:
	tmp = (tmp & CAN_IE_TCE) >> CAN_IE_TCE_Pos;
	return (bool)tmp;
}

static inline void hri_can_write_IE_TCE_bit(const void *const hw, bool value)
{
    5228:	b480      	push	{r7}
    522a:	b085      	sub	sp, #20
    522c:	af00      	add	r7, sp, #0
    522e:	6078      	str	r0, [r7, #4]
    5230:	460b      	mov	r3, r1
    5232:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->IE.reg;
    5234:	687b      	ldr	r3, [r7, #4]
    5236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5238:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_IE_TCE;
    523a:	68fb      	ldr	r3, [r7, #12]
    523c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    5240:	60fb      	str	r3, [r7, #12]
	tmp |= value << CAN_IE_TCE_Pos;
    5242:	78fb      	ldrb	r3, [r7, #3]
    5244:	025b      	lsls	r3, r3, #9
    5246:	461a      	mov	r2, r3
    5248:	68fb      	ldr	r3, [r7, #12]
    524a:	4313      	orrs	r3, r2
    524c:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->IE.reg = tmp;
    524e:	687b      	ldr	r3, [r7, #4]
    5250:	68fa      	ldr	r2, [r7, #12]
    5252:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    5254:	bf00      	nop
    5256:	3714      	adds	r7, #20
    5258:	46bd      	mov	sp, r7
    525a:	f85d 7b04 	ldr.w	r7, [sp], #4
    525e:	4770      	bx	lr

00005260 <hri_can_get_IE_reg>:
	((Can *)hw)->IE.reg |= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ie_reg_t hri_can_get_IE_reg(const void *const hw, hri_can_ie_reg_t mask)
{
    5260:	b480      	push	{r7}
    5262:	b085      	sub	sp, #20
    5264:	af00      	add	r7, sp, #0
    5266:	6078      	str	r0, [r7, #4]
    5268:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Can *)hw)->IE.reg;
    526a:	687b      	ldr	r3, [r7, #4]
    526c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    526e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5270:	68fa      	ldr	r2, [r7, #12]
    5272:	683b      	ldr	r3, [r7, #0]
    5274:	4013      	ands	r3, r2
    5276:	60fb      	str	r3, [r7, #12]
	return tmp;
    5278:	68fb      	ldr	r3, [r7, #12]
}
    527a:	4618      	mov	r0, r3
    527c:	3714      	adds	r7, #20
    527e:	46bd      	mov	sp, r7
    5280:	f85d 7b04 	ldr.w	r7, [sp], #4
    5284:	4770      	bx	lr

00005286 <hri_can_write_IE_reg>:

static inline void hri_can_write_IE_reg(const void *const hw, hri_can_ie_reg_t data)
{
    5286:	b480      	push	{r7}
    5288:	b083      	sub	sp, #12
    528a:	af00      	add	r7, sp, #0
    528c:	6078      	str	r0, [r7, #4]
    528e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IE.reg = data;
    5290:	687b      	ldr	r3, [r7, #4]
    5292:	683a      	ldr	r2, [r7, #0]
    5294:	655a      	str	r2, [r3, #84]	; 0x54
	CAN_CRITICAL_SECTION_LEAVE();
}
    5296:	bf00      	nop
    5298:	370c      	adds	r7, #12
    529a:	46bd      	mov	sp, r7
    529c:	f85d 7b04 	ldr.w	r7, [sp], #4
    52a0:	4770      	bx	lr

000052a2 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    52a2:	b480      	push	{r7}
    52a4:	b083      	sub	sp, #12
    52a6:	af00      	add	r7, sp, #0
    52a8:	6078      	str	r0, [r7, #4]
    52aa:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    52ac:	687b      	ldr	r3, [r7, #4]
    52ae:	683a      	ldr	r2, [r7, #0]
    52b0:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    52b2:	bf00      	nop
    52b4:	370c      	adds	r7, #12
    52b6:	46bd      	mov	sp, r7
    52b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    52bc:	4770      	bx	lr

000052be <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    52be:	b480      	push	{r7}
    52c0:	b083      	sub	sp, #12
    52c2:	af00      	add	r7, sp, #0
    52c4:	6078      	str	r0, [r7, #4]
    52c6:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    52c8:	687b      	ldr	r3, [r7, #4]
    52ca:	683a      	ldr	r2, [r7, #0]
    52cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    52d0:	bf00      	nop
    52d2:	370c      	adds	r7, #12
    52d4:	46bd      	mov	sp, r7
    52d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    52da:	4770      	bx	lr

000052dc <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    52dc:	b480      	push	{r7}
    52de:	b083      	sub	sp, #12
    52e0:	af00      	add	r7, sp, #0
    52e2:	6078      	str	r0, [r7, #4]
    52e4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    52e6:	687b      	ldr	r3, [r7, #4]
    52e8:	683a      	ldr	r2, [r7, #0]
    52ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    52ee:	bf00      	nop
    52f0:	370c      	adds	r7, #12
    52f2:	46bd      	mov	sp, r7
    52f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    52f8:	4770      	bx	lr

000052fa <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    52fa:	b480      	push	{r7}
    52fc:	b083      	sub	sp, #12
    52fe:	af00      	add	r7, sp, #0
    5300:	6078      	str	r0, [r7, #4]
    5302:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    5304:	687b      	ldr	r3, [r7, #4]
    5306:	683a      	ldr	r2, [r7, #0]
    5308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    530c:	bf00      	nop
    530e:	370c      	adds	r7, #12
    5310:	46bd      	mov	sp, r7
    5312:	f85d 7b04 	ldr.w	r7, [sp], #4
    5316:	4770      	bx	lr

00005318 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    5318:	b480      	push	{r7}
    531a:	b083      	sub	sp, #12
    531c:	af00      	add	r7, sp, #0
    531e:	6078      	str	r0, [r7, #4]
    5320:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    5322:	687b      	ldr	r3, [r7, #4]
    5324:	683a      	ldr	r2, [r7, #0]
    5326:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    532a:	bf00      	nop
    532c:	370c      	adds	r7, #12
    532e:	46bd      	mov	sp, r7
    5330:	f85d 7b04 	ldr.w	r7, [sp], #4
    5334:	4770      	bx	lr

00005336 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    5336:	b480      	push	{r7}
    5338:	b083      	sub	sp, #12
    533a:	af00      	add	r7, sp, #0
    533c:	6078      	str	r0, [r7, #4]
    533e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    5340:	687b      	ldr	r3, [r7, #4]
    5342:	683a      	ldr	r2, [r7, #0]
    5344:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5348:	bf00      	nop
    534a:	370c      	adds	r7, #12
    534c:	46bd      	mov	sp, r7
    534e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5352:	4770      	bx	lr

00005354 <hri_can_write_RXF0A_F0AI_bf>:
	tmp = (tmp & CAN_RXF0A_F0AI(mask)) >> CAN_RXF0A_F0AI_Pos;
	return tmp;
}

static inline void hri_can_write_RXF0A_F0AI_bf(const void *const hw, hri_can_rxf0a_reg_t data)
{
    5354:	b480      	push	{r7}
    5356:	b085      	sub	sp, #20
    5358:	af00      	add	r7, sp, #0
    535a:	6078      	str	r0, [r7, #4]
    535c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	CAN_CRITICAL_SECTION_ENTER();
	tmp = ((Can *)hw)->RXF0A.reg;
    535e:	687b      	ldr	r3, [r7, #4]
    5360:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    5364:	60fb      	str	r3, [r7, #12]
	tmp &= ~CAN_RXF0A_F0AI_Msk;
    5366:	68fb      	ldr	r3, [r7, #12]
    5368:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    536c:	60fb      	str	r3, [r7, #12]
	tmp |= CAN_RXF0A_F0AI(data);
    536e:	683b      	ldr	r3, [r7, #0]
    5370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5374:	68fa      	ldr	r2, [r7, #12]
    5376:	4313      	orrs	r3, r2
    5378:	60fb      	str	r3, [r7, #12]
	((Can *)hw)->RXF0A.reg = tmp;
    537a:	687b      	ldr	r3, [r7, #4]
    537c:	68fa      	ldr	r2, [r7, #12]
    537e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	CAN_CRITICAL_SECTION_LEAVE();
}
    5382:	bf00      	nop
    5384:	3714      	adds	r7, #20
    5386:	46bd      	mov	sp, r7
    5388:	f85d 7b04 	ldr.w	r7, [sp], #4
    538c:	4770      	bx	lr

0000538e <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    538e:	b480      	push	{r7}
    5390:	b083      	sub	sp, #12
    5392:	af00      	add	r7, sp, #0
    5394:	6078      	str	r0, [r7, #4]
    5396:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    5398:	687b      	ldr	r3, [r7, #4]
    539a:	683a      	ldr	r2, [r7, #0]
    539c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    53a0:	bf00      	nop
    53a2:	370c      	adds	r7, #12
    53a4:	46bd      	mov	sp, r7
    53a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    53aa:	4770      	bx	lr

000053ac <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    53ac:	b480      	push	{r7}
    53ae:	b083      	sub	sp, #12
    53b0:	af00      	add	r7, sp, #0
    53b2:	6078      	str	r0, [r7, #4]
    53b4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    53b6:	687b      	ldr	r3, [r7, #4]
    53b8:	683a      	ldr	r2, [r7, #0]
    53ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    53be:	bf00      	nop
    53c0:	370c      	adds	r7, #12
    53c2:	46bd      	mov	sp, r7
    53c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    53c8:	4770      	bx	lr

000053ca <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    53ca:	b480      	push	{r7}
    53cc:	b083      	sub	sp, #12
    53ce:	af00      	add	r7, sp, #0
    53d0:	6078      	str	r0, [r7, #4]
    53d2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    53d4:	687b      	ldr	r3, [r7, #4]
    53d6:	683a      	ldr	r2, [r7, #0]
    53d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    53dc:	bf00      	nop
    53de:	370c      	adds	r7, #12
    53e0:	46bd      	mov	sp, r7
    53e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    53e6:	4770      	bx	lr

000053e8 <hri_can_write_TXBAR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBAR_reg(const void *const hw, hri_can_txbar_reg_t data)
{
    53e8:	b480      	push	{r7}
    53ea:	b083      	sub	sp, #12
    53ec:	af00      	add	r7, sp, #0
    53ee:	6078      	str	r0, [r7, #4]
    53f0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBAR.reg = data;
    53f2:	687b      	ldr	r3, [r7, #4]
    53f4:	683a      	ldr	r2, [r7, #0]
    53f6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	CAN_CRITICAL_SECTION_LEAVE();
}
    53fa:	bf00      	nop
    53fc:	370c      	adds	r7, #12
    53fe:	46bd      	mov	sp, r7
    5400:	f85d 7b04 	ldr.w	r7, [sp], #4
    5404:	4770      	bx	lr

00005406 <hri_can_write_TXBTIE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBTIE_reg(const void *const hw, hri_can_txbtie_reg_t data)
{
    5406:	b480      	push	{r7}
    5408:	b083      	sub	sp, #12
    540a:	af00      	add	r7, sp, #0
    540c:	6078      	str	r0, [r7, #4]
    540e:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBTIE.reg = data;
    5410:	687b      	ldr	r3, [r7, #4]
    5412:	683a      	ldr	r2, [r7, #0]
    5414:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5418:	bf00      	nop
    541a:	370c      	adds	r7, #12
    541c:	46bd      	mov	sp, r7
    541e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5422:	4770      	bx	lr

00005424 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    5424:	b480      	push	{r7}
    5426:	b083      	sub	sp, #12
    5428:	af00      	add	r7, sp, #0
    542a:	6078      	str	r0, [r7, #4]
    542c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    542e:	687b      	ldr	r3, [r7, #4]
    5430:	683a      	ldr	r2, [r7, #0]
    5432:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    5436:	bf00      	nop
    5438:	370c      	adds	r7, #12
    543a:	46bd      	mov	sp, r7
    543c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5440:	4770      	bx	lr
	...

00005444 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    5444:	b580      	push	{r7, lr}
    5446:	b082      	sub	sp, #8
    5448:	af00      	add	r7, sp, #0
    544a:	6078      	str	r0, [r7, #4]
    544c:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    544e:	687b      	ldr	r3, [r7, #4]
    5450:	683a      	ldr	r2, [r7, #0]
    5452:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    5454:	687b      	ldr	r3, [r7, #4]
    5456:	681b      	ldr	r3, [r3, #0]
    5458:	4618      	mov	r0, r3
    545a:	4b56      	ldr	r3, [pc, #344]	; (55b4 <_can_async_init+0x170>)
    545c:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    545e:	bf00      	nop
    5460:	687b      	ldr	r3, [r7, #4]
    5462:	681b      	ldr	r3, [r3, #0]
    5464:	4618      	mov	r0, r3
    5466:	4b54      	ldr	r3, [pc, #336]	; (55b8 <_can_async_init+0x174>)
    5468:	4798      	blx	r3
    546a:	4603      	mov	r3, r0
    546c:	f083 0301 	eor.w	r3, r3, #1
    5470:	b2db      	uxtb	r3, r3
    5472:	2b00      	cmp	r3, #0
    5474:	d1f4      	bne.n	5460 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    5476:	687b      	ldr	r3, [r7, #4]
    5478:	681b      	ldr	r3, [r3, #0]
    547a:	4618      	mov	r0, r3
    547c:	4b4f      	ldr	r3, [pc, #316]	; (55bc <_can_async_init+0x178>)
    547e:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    5480:	683b      	ldr	r3, [r7, #0]
    5482:	4a4f      	ldr	r2, [pc, #316]	; (55c0 <_can_async_init+0x17c>)
    5484:	4293      	cmp	r3, r2
    5486:	d17c      	bne.n	5582 <_can_async_init+0x13e>
		_can1_dev    = dev;
    5488:	4a4e      	ldr	r2, [pc, #312]	; (55c4 <_can_async_init+0x180>)
    548a:	687b      	ldr	r3, [r7, #4]
    548c:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    548e:	687b      	ldr	r3, [r7, #4]
    5490:	4a4d      	ldr	r2, [pc, #308]	; (55c8 <_can_async_init+0x184>)
    5492:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    5494:	687b      	ldr	r3, [r7, #4]
    5496:	681b      	ldr	r3, [r3, #0]
    5498:	f44f 7100 	mov.w	r1, #512	; 0x200
    549c:	4618      	mov	r0, r3
    549e:	4b4b      	ldr	r3, [pc, #300]	; (55cc <_can_async_init+0x188>)
    54a0:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    54a2:	687b      	ldr	r3, [r7, #4]
    54a4:	681b      	ldr	r3, [r3, #0]
    54a6:	2102      	movs	r1, #2
    54a8:	4618      	mov	r0, r3
    54aa:	4b49      	ldr	r3, [pc, #292]	; (55d0 <_can_async_init+0x18c>)
    54ac:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    54ae:	687b      	ldr	r3, [r7, #4]
    54b0:	681b      	ldr	r3, [r3, #0]
    54b2:	f640 2103 	movw	r1, #2563	; 0xa03
    54b6:	4618      	mov	r0, r3
    54b8:	4b46      	ldr	r3, [pc, #280]	; (55d4 <_can_async_init+0x190>)
    54ba:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    54bc:	687b      	ldr	r3, [r7, #4]
    54be:	681b      	ldr	r3, [r3, #0]
    54c0:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    54c4:	4618      	mov	r0, r3
    54c6:	4b44      	ldr	r3, [pc, #272]	; (55d8 <_can_async_init+0x194>)
    54c8:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    54ca:	687b      	ldr	r3, [r7, #4]
    54cc:	681a      	ldr	r2, [r3, #0]
    54ce:	4b43      	ldr	r3, [pc, #268]	; (55dc <_can_async_init+0x198>)
    54d0:	b29b      	uxth	r3, r3
    54d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    54d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    54da:	4619      	mov	r1, r3
    54dc:	4610      	mov	r0, r2
    54de:	4b40      	ldr	r3, [pc, #256]	; (55e0 <_can_async_init+0x19c>)
    54e0:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    54e2:	687b      	ldr	r3, [r7, #4]
    54e4:	681b      	ldr	r3, [r3, #0]
    54e6:	2107      	movs	r1, #7
    54e8:	4618      	mov	r0, r3
    54ea:	4b3e      	ldr	r3, [pc, #248]	; (55e4 <_can_async_init+0x1a0>)
    54ec:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    54ee:	687b      	ldr	r3, [r7, #4]
    54f0:	681b      	ldr	r3, [r3, #0]
    54f2:	2107      	movs	r1, #7
    54f4:	4618      	mov	r0, r3
    54f6:	4b3c      	ldr	r3, [pc, #240]	; (55e8 <_can_async_init+0x1a4>)
    54f8:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    54fa:	687b      	ldr	r3, [r7, #4]
    54fc:	681a      	ldr	r2, [r3, #0]
    54fe:	4b3b      	ldr	r3, [pc, #236]	; (55ec <_can_async_init+0x1a8>)
    5500:	b29b      	uxth	r3, r3
    5502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    5506:	4619      	mov	r1, r3
    5508:	4610      	mov	r0, r2
    550a:	4b39      	ldr	r3, [pc, #228]	; (55f0 <_can_async_init+0x1ac>)
    550c:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    550e:	687b      	ldr	r3, [r7, #4]
    5510:	681a      	ldr	r2, [r3, #0]
    5512:	4b38      	ldr	r3, [pc, #224]	; (55f4 <_can_async_init+0x1b0>)
    5514:	b29b      	uxth	r3, r3
    5516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    551a:	4619      	mov	r1, r3
    551c:	4610      	mov	r0, r2
    551e:	4b36      	ldr	r3, [pc, #216]	; (55f8 <_can_async_init+0x1b4>)
    5520:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    5522:	687b      	ldr	r3, [r7, #4]
    5524:	681b      	ldr	r3, [r3, #0]
    5526:	2108      	movs	r1, #8
    5528:	4618      	mov	r0, r3
    552a:	4b34      	ldr	r3, [pc, #208]	; (55fc <_can_async_init+0x1b8>)
    552c:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    552e:	687b      	ldr	r3, [r7, #4]
    5530:	681a      	ldr	r2, [r3, #0]
    5532:	4b33      	ldr	r3, [pc, #204]	; (5600 <_can_async_init+0x1bc>)
    5534:	b29b      	uxth	r3, r3
    5536:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    553a:	4619      	mov	r1, r3
    553c:	4610      	mov	r0, r2
    553e:	4b31      	ldr	r3, [pc, #196]	; (5604 <_can_async_init+0x1c0>)
    5540:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    5542:	687b      	ldr	r3, [r7, #4]
    5544:	681a      	ldr	r2, [r3, #0]
    5546:	4b30      	ldr	r3, [pc, #192]	; (5608 <_can_async_init+0x1c4>)
    5548:	b29b      	uxth	r3, r3
    554a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    554e:	4619      	mov	r1, r3
    5550:	4610      	mov	r0, r2
    5552:	4b2e      	ldr	r3, [pc, #184]	; (560c <_can_async_init+0x1c8>)
    5554:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    5556:	687b      	ldr	r3, [r7, #4]
    5558:	681b      	ldr	r3, [r3, #0]
    555a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    555e:	4618      	mov	r0, r3
    5560:	4b2b      	ldr	r3, [pc, #172]	; (5610 <_can_async_init+0x1cc>)
    5562:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    5564:	204f      	movs	r0, #79	; 0x4f
    5566:	4b2b      	ldr	r3, [pc, #172]	; (5614 <_can_async_init+0x1d0>)
    5568:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    556a:	204f      	movs	r0, #79	; 0x4f
    556c:	4b2a      	ldr	r3, [pc, #168]	; (5618 <_can_async_init+0x1d4>)
    556e:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    5570:	204f      	movs	r0, #79	; 0x4f
    5572:	4b2a      	ldr	r3, [pc, #168]	; (561c <_can_async_init+0x1d8>)
    5574:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    5576:	687b      	ldr	r3, [r7, #4]
    5578:	681b      	ldr	r3, [r3, #0]
    557a:	2101      	movs	r1, #1
    557c:	4618      	mov	r0, r3
    557e:	4b28      	ldr	r3, [pc, #160]	; (5620 <_can_async_init+0x1dc>)
    5580:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    5582:	687b      	ldr	r3, [r7, #4]
    5584:	681b      	ldr	r3, [r3, #0]
    5586:	4618      	mov	r0, r3
    5588:	4b26      	ldr	r3, [pc, #152]	; (5624 <_can_async_init+0x1e0>)
    558a:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    558c:	687b      	ldr	r3, [r7, #4]
    558e:	681b      	ldr	r3, [r3, #0]
    5590:	4618      	mov	r0, r3
    5592:	4b25      	ldr	r3, [pc, #148]	; (5628 <_can_async_init+0x1e4>)
    5594:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    5596:	bf00      	nop
    5598:	687b      	ldr	r3, [r7, #4]
    559a:	681b      	ldr	r3, [r3, #0]
    559c:	4618      	mov	r0, r3
    559e:	4b06      	ldr	r3, [pc, #24]	; (55b8 <_can_async_init+0x174>)
    55a0:	4798      	blx	r3
    55a2:	4603      	mov	r3, r0
    55a4:	2b00      	cmp	r3, #0
    55a6:	d1f7      	bne.n	5598 <_can_async_init+0x154>
	};

	return ERR_NONE;
    55a8:	2300      	movs	r3, #0
}
    55aa:	4618      	mov	r0, r3
    55ac:	3708      	adds	r7, #8
    55ae:	46bd      	mov	sp, r7
    55b0:	bd80      	pop	{r7, pc}
    55b2:	bf00      	nop
    55b4:	00005075 	.word	0x00005075
    55b8:	00005095 	.word	0x00005095
    55bc:	000050e3 	.word	0x000050e3
    55c0:	42000400 	.word	0x42000400
    55c4:	2000233c 	.word	0x2000233c
    55c8:	20000004 	.word	0x20000004
    55cc:	00005183 	.word	0x00005183
    55d0:	0000503d 	.word	0x0000503d
    55d4:	000051a5 	.word	0x000051a5
    55d8:	00005059 	.word	0x00005059
    55dc:	2000e170 	.word	0x2000e170
    55e0:	00005337 	.word	0x00005337
    55e4:	0000538f 	.word	0x0000538f
    55e8:	000053cb 	.word	0x000053cb
    55ec:	2000e128 	.word	0x2000e128
    55f0:	000053ad 	.word	0x000053ad
    55f4:	2000229c 	.word	0x2000229c
    55f8:	00005425 	.word	0x00005425
    55fc:	000052bf 	.word	0x000052bf
    5600:	200022ac 	.word	0x200022ac
    5604:	000052dd 	.word	0x000052dd
    5608:	2000232c 	.word	0x2000232c
    560c:	000052fb 	.word	0x000052fb
    5610:	00005319 	.word	0x00005319
    5614:	00004f0d 	.word	0x00004f0d
    5618:	00004f51 	.word	0x00004f51
    561c:	00004ed1 	.word	0x00004ed1
    5620:	000052a3 	.word	0x000052a3
    5624:	00005103 	.word	0x00005103
    5628:	000050c3 	.word	0x000050c3

0000562c <_can_async_enable>:

/**
 * \brief Enable CAN
 */
int32_t _can_async_enable(struct _can_async_device *const dev)
{
    562c:	b580      	push	{r7, lr}
    562e:	b082      	sub	sp, #8
    5630:	af00      	add	r7, sp, #0
    5632:	6078      	str	r0, [r7, #4]
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    5634:	687b      	ldr	r3, [r7, #4]
    5636:	681b      	ldr	r3, [r3, #0]
    5638:	4618      	mov	r0, r3
    563a:	4b03      	ldr	r3, [pc, #12]	; (5648 <_can_async_enable+0x1c>)
    563c:	4798      	blx	r3
	return ERR_NONE;
    563e:	2300      	movs	r3, #0
}
    5640:	4618      	mov	r0, r3
    5642:	3708      	adds	r7, #8
    5644:	46bd      	mov	sp, r7
    5646:	bd80      	pop	{r7, pc}
    5648:	000050c3 	.word	0x000050c3

0000564c <_can_async_read>:

/**
 * \brief Read a CAN message
 */
int32_t _can_async_read(struct _can_async_device *const dev, struct can_message *msg)
{
    564c:	b590      	push	{r4, r7, lr}
    564e:	b089      	sub	sp, #36	; 0x24
    5650:	af00      	add	r7, sp, #0
    5652:	6078      	str	r0, [r7, #4]
    5654:	6039      	str	r1, [r7, #0]
	struct _can_rx_fifo_entry *f = NULL;
    5656:	2300      	movs	r3, #0
    5658:	61fb      	str	r3, [r7, #28]
	hri_can_rxf0s_reg_t        get_index;

	if (!hri_can_read_RXF0S_F0FL_bf(dev->hw)) {
    565a:	687b      	ldr	r3, [r7, #4]
    565c:	681b      	ldr	r3, [r3, #0]
    565e:	4618      	mov	r0, r3
    5660:	4b37      	ldr	r3, [pc, #220]	; (5740 <_can_async_read+0xf4>)
    5662:	4798      	blx	r3
    5664:	4603      	mov	r3, r0
    5666:	2b00      	cmp	r3, #0
    5668:	d102      	bne.n	5670 <_can_async_read+0x24>
		return ERR_NOT_FOUND;
    566a:	f06f 0309 	mvn.w	r3, #9
    566e:	e063      	b.n	5738 <_can_async_read+0xec>
	}

	get_index = hri_can_read_RXF0S_F0GI_bf(dev->hw);
    5670:	687b      	ldr	r3, [r7, #4]
    5672:	681b      	ldr	r3, [r3, #0]
    5674:	4618      	mov	r0, r3
    5676:	4b33      	ldr	r3, [pc, #204]	; (5744 <_can_async_read+0xf8>)
    5678:	4798      	blx	r3
    567a:	61b8      	str	r0, [r7, #24]
	if (dev->hw == CAN0) {
		f = (struct _can_rx_fifo_entry *)(can0_rx_fifo + get_index * CONF_CAN0_F0DS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    567c:	687b      	ldr	r3, [r7, #4]
    567e:	681b      	ldr	r3, [r3, #0]
    5680:	4a31      	ldr	r2, [pc, #196]	; (5748 <_can_async_read+0xfc>)
    5682:	4293      	cmp	r3, r2
    5684:	d108      	bne.n	5698 <_can_async_read+0x4c>
		f = (struct _can_rx_fifo_entry *)(can1_rx_fifo + get_index * CONF_CAN1_F0DS);
    5686:	69ba      	ldr	r2, [r7, #24]
    5688:	4613      	mov	r3, r2
    568a:	00db      	lsls	r3, r3, #3
    568c:	4413      	add	r3, r2
    568e:	00db      	lsls	r3, r3, #3
    5690:	461a      	mov	r2, r3
    5692:	4b2e      	ldr	r3, [pc, #184]	; (574c <_can_async_read+0x100>)
    5694:	4413      	add	r3, r2
    5696:	61fb      	str	r3, [r7, #28]
	}
#endif

	if (f == NULL) {
    5698:	69fb      	ldr	r3, [r7, #28]
    569a:	2b00      	cmp	r3, #0
    569c:	d102      	bne.n	56a4 <_can_async_read+0x58>
		return ERR_NO_RESOURCE;
    569e:	f06f 031b 	mvn.w	r3, #27
    56a2:	e049      	b.n	5738 <_can_async_read+0xec>
	}

	if (f->R0.bit.XTD == 1) {
    56a4:	69fb      	ldr	r3, [r7, #28]
    56a6:	681b      	ldr	r3, [r3, #0]
    56a8:	f3c3 7380 	ubfx	r3, r3, #30, #1
    56ac:	b2db      	uxtb	r3, r3
    56ae:	2b01      	cmp	r3, #1
    56b0:	d10a      	bne.n	56c8 <_can_async_read+0x7c>
		msg->fmt = CAN_FMT_EXTID;
    56b2:	683b      	ldr	r3, [r7, #0]
    56b4:	2201      	movs	r2, #1
    56b6:	735a      	strb	r2, [r3, #13]
		msg->id  = f->R0.bit.ID;
    56b8:	69fb      	ldr	r3, [r7, #28]
    56ba:	681b      	ldr	r3, [r3, #0]
    56bc:	f3c3 031c 	ubfx	r3, r3, #0, #29
    56c0:	461a      	mov	r2, r3
    56c2:	683b      	ldr	r3, [r7, #0]
    56c4:	601a      	str	r2, [r3, #0]
    56c6:	e00a      	b.n	56de <_can_async_read+0x92>
	} else {
		msg->fmt = CAN_FMT_STDID;
    56c8:	683b      	ldr	r3, [r7, #0]
    56ca:	2200      	movs	r2, #0
    56cc:	735a      	strb	r2, [r3, #13]
		/* A standard identifier is stored into ID[28:18] */
		msg->id = f->R0.bit.ID >> 18;
    56ce:	69fb      	ldr	r3, [r7, #28]
    56d0:	681b      	ldr	r3, [r3, #0]
    56d2:	f3c3 031c 	ubfx	r3, r3, #0, #29
    56d6:	149b      	asrs	r3, r3, #18
    56d8:	461a      	mov	r2, r3
    56da:	683b      	ldr	r3, [r7, #0]
    56dc:	601a      	str	r2, [r3, #0]
	}

	if (f->R0.bit.RTR == 1) {
    56de:	69fb      	ldr	r3, [r7, #28]
    56e0:	681b      	ldr	r3, [r3, #0]
    56e2:	f3c3 7340 	ubfx	r3, r3, #29, #1
    56e6:	b2db      	uxtb	r3, r3
    56e8:	2b01      	cmp	r3, #1
    56ea:	d102      	bne.n	56f2 <_can_async_read+0xa6>
		msg->type = CAN_TYPE_REMOTE;
    56ec:	683b      	ldr	r3, [r7, #0]
    56ee:	2201      	movs	r2, #1
    56f0:	711a      	strb	r2, [r3, #4]
	}

	const uint8_t dlc2len[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64};
    56f2:	4b17      	ldr	r3, [pc, #92]	; (5750 <_can_async_read+0x104>)
    56f4:	f107 0408 	add.w	r4, r7, #8
    56f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    56fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	msg->len                = dlc2len[f->R1.bit.DLC];
    56fe:	69fb      	ldr	r3, [r7, #28]
    5700:	685b      	ldr	r3, [r3, #4]
    5702:	f3c3 4303 	ubfx	r3, r3, #16, #4
    5706:	b2db      	uxtb	r3, r3
    5708:	f107 0220 	add.w	r2, r7, #32
    570c:	4413      	add	r3, r2
    570e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
    5712:	683b      	ldr	r3, [r7, #0]
    5714:	731a      	strb	r2, [r3, #12]

	memcpy(msg->data, f->data, msg->len);
    5716:	683b      	ldr	r3, [r7, #0]
    5718:	6898      	ldr	r0, [r3, #8]
    571a:	69fb      	ldr	r3, [r7, #28]
    571c:	f103 0108 	add.w	r1, r3, #8
    5720:	683b      	ldr	r3, [r7, #0]
    5722:	7b1b      	ldrb	r3, [r3, #12]
    5724:	461a      	mov	r2, r3
    5726:	4b0b      	ldr	r3, [pc, #44]	; (5754 <_can_async_read+0x108>)
    5728:	4798      	blx	r3

	hri_can_write_RXF0A_F0AI_bf(dev->hw, get_index);
    572a:	687b      	ldr	r3, [r7, #4]
    572c:	681b      	ldr	r3, [r3, #0]
    572e:	69b9      	ldr	r1, [r7, #24]
    5730:	4618      	mov	r0, r3
    5732:	4b09      	ldr	r3, [pc, #36]	; (5758 <_can_async_read+0x10c>)
    5734:	4798      	blx	r3

	return ERR_NONE;
    5736:	2300      	movs	r3, #0
}
    5738:	4618      	mov	r0, r3
    573a:	3724      	adds	r7, #36	; 0x24
    573c:	46bd      	mov	sp, r7
    573e:	bd90      	pop	{r4, r7, pc}
    5740:	00004fb5 	.word	0x00004fb5
    5744:	00004fd3 	.word	0x00004fd3
    5748:	42000400 	.word	0x42000400
    574c:	2000e170 	.word	0x2000e170
    5750:	0001b23c 	.word	0x0001b23c
    5754:	0001ab91 	.word	0x0001ab91
    5758:	00005355 	.word	0x00005355

0000575c <_can_async_write>:

/**
 * \brief Write a CAN message
 */
int32_t _can_async_write(struct _can_async_device *const dev, struct can_message *msg)
{
    575c:	b590      	push	{r4, r7, lr}
    575e:	b085      	sub	sp, #20
    5760:	af00      	add	r7, sp, #0
    5762:	6078      	str	r0, [r7, #4]
    5764:	6039      	str	r1, [r7, #0]
	struct _can_tx_fifo_entry *f = NULL;
    5766:	2300      	movs	r3, #0
    5768:	60fb      	str	r3, [r7, #12]
	hri_can_txfqs_reg_t        put_index;

	if (hri_can_get_TXFQS_TFQF_bit(dev->hw)) {
    576a:	687b      	ldr	r3, [r7, #4]
    576c:	681b      	ldr	r3, [r3, #0]
    576e:	4618      	mov	r0, r3
    5770:	4b61      	ldr	r3, [pc, #388]	; (58f8 <_can_async_write+0x19c>)
    5772:	4798      	blx	r3
    5774:	4603      	mov	r3, r0
    5776:	2b00      	cmp	r3, #0
    5778:	d002      	beq.n	5780 <_can_async_write+0x24>
		return ERR_NO_RESOURCE;
    577a:	f06f 031b 	mvn.w	r3, #27
    577e:	e0b7      	b.n	58f0 <_can_async_write+0x194>
	}

	put_index = hri_can_read_TXFQS_TFQPI_bf(dev->hw);
    5780:	687b      	ldr	r3, [r7, #4]
    5782:	681b      	ldr	r3, [r3, #0]
    5784:	4618      	mov	r0, r3
    5786:	4b5d      	ldr	r3, [pc, #372]	; (58fc <_can_async_write+0x1a0>)
    5788:	4798      	blx	r3
    578a:	60b8      	str	r0, [r7, #8]
	if (dev->hw == CAN0) {
		f = (struct _can_tx_fifo_entry *)(can0_tx_fifo + put_index * CONF_CAN0_TBDS);
	}
#endif
#ifdef CONF_CAN1_ENABLED
	if (dev->hw == CAN1) {
    578c:	687b      	ldr	r3, [r7, #4]
    578e:	681b      	ldr	r3, [r3, #0]
    5790:	4a5b      	ldr	r2, [pc, #364]	; (5900 <_can_async_write+0x1a4>)
    5792:	4293      	cmp	r3, r2
    5794:	d108      	bne.n	57a8 <_can_async_write+0x4c>
		f = (struct _can_tx_fifo_entry *)(can1_tx_fifo + put_index * CONF_CAN1_TBDS);
    5796:	68ba      	ldr	r2, [r7, #8]
    5798:	4613      	mov	r3, r2
    579a:	00db      	lsls	r3, r3, #3
    579c:	4413      	add	r3, r2
    579e:	00db      	lsls	r3, r3, #3
    57a0:	461a      	mov	r2, r3
    57a2:	4b58      	ldr	r3, [pc, #352]	; (5904 <_can_async_write+0x1a8>)
    57a4:	4413      	add	r3, r2
    57a6:	60fb      	str	r3, [r7, #12]
	}
#endif
	if (f == NULL) {
    57a8:	68fb      	ldr	r3, [r7, #12]
    57aa:	2b00      	cmp	r3, #0
    57ac:	d102      	bne.n	57b4 <_can_async_write+0x58>
		return ERR_NO_RESOURCE;
    57ae:	f06f 031b 	mvn.w	r3, #27
    57b2:	e09d      	b.n	58f0 <_can_async_write+0x194>
	}

	if (msg->fmt == CAN_FMT_EXTID) {
    57b4:	683b      	ldr	r3, [r7, #0]
    57b6:	7b5b      	ldrb	r3, [r3, #13]
    57b8:	2b01      	cmp	r3, #1
    57ba:	d109      	bne.n	57d0 <_can_async_write+0x74>
		f->T0.val     = msg->id;
    57bc:	683b      	ldr	r3, [r7, #0]
    57be:	681a      	ldr	r2, [r3, #0]
    57c0:	68fb      	ldr	r3, [r7, #12]
    57c2:	601a      	str	r2, [r3, #0]
		f->T0.bit.XTD = 1;
    57c4:	68fa      	ldr	r2, [r7, #12]
    57c6:	6813      	ldr	r3, [r2, #0]
    57c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    57cc:	6013      	str	r3, [r2, #0]
    57ce:	e004      	b.n	57da <_can_async_write+0x7e>
	} else {
		/* A standard identifier is stored into ID[28:18] */
		f->T0.val = msg->id << 18;
    57d0:	683b      	ldr	r3, [r7, #0]
    57d2:	681b      	ldr	r3, [r3, #0]
    57d4:	049a      	lsls	r2, r3, #18
    57d6:	68fb      	ldr	r3, [r7, #12]
    57d8:	601a      	str	r2, [r3, #0]
	}

	if (msg->len <= 8) {
    57da:	683b      	ldr	r3, [r7, #0]
    57dc:	7b1b      	ldrb	r3, [r3, #12]
    57de:	2b08      	cmp	r3, #8
    57e0:	d80a      	bhi.n	57f8 <_can_async_write+0x9c>
		f->T1.bit.DLC = msg->len;
    57e2:	683b      	ldr	r3, [r7, #0]
    57e4:	7b1b      	ldrb	r3, [r3, #12]
    57e6:	f003 030f 	and.w	r3, r3, #15
    57ea:	b2d9      	uxtb	r1, r3
    57ec:	68fa      	ldr	r2, [r7, #12]
    57ee:	6853      	ldr	r3, [r2, #4]
    57f0:	f361 4313 	bfi	r3, r1, #16, #4
    57f4:	6053      	str	r3, [r2, #4]
    57f6:	e04a      	b.n	588e <_can_async_write+0x132>
	} else if (msg->len <= 12) {
    57f8:	683b      	ldr	r3, [r7, #0]
    57fa:	7b1b      	ldrb	r3, [r3, #12]
    57fc:	2b0c      	cmp	r3, #12
    57fe:	d806      	bhi.n	580e <_can_async_write+0xb2>
		f->T1.bit.DLC = 0x9;
    5800:	68fa      	ldr	r2, [r7, #12]
    5802:	6853      	ldr	r3, [r2, #4]
    5804:	2109      	movs	r1, #9
    5806:	f361 4313 	bfi	r3, r1, #16, #4
    580a:	6053      	str	r3, [r2, #4]
    580c:	e03f      	b.n	588e <_can_async_write+0x132>
	} else if (msg->len <= 16) {
    580e:	683b      	ldr	r3, [r7, #0]
    5810:	7b1b      	ldrb	r3, [r3, #12]
    5812:	2b10      	cmp	r3, #16
    5814:	d806      	bhi.n	5824 <_can_async_write+0xc8>
		f->T1.bit.DLC = 0xA;
    5816:	68fa      	ldr	r2, [r7, #12]
    5818:	6853      	ldr	r3, [r2, #4]
    581a:	210a      	movs	r1, #10
    581c:	f361 4313 	bfi	r3, r1, #16, #4
    5820:	6053      	str	r3, [r2, #4]
    5822:	e034      	b.n	588e <_can_async_write+0x132>
	} else if (msg->len <= 20) {
    5824:	683b      	ldr	r3, [r7, #0]
    5826:	7b1b      	ldrb	r3, [r3, #12]
    5828:	2b14      	cmp	r3, #20
    582a:	d806      	bhi.n	583a <_can_async_write+0xde>
		f->T1.bit.DLC = 0xB;
    582c:	68fa      	ldr	r2, [r7, #12]
    582e:	6853      	ldr	r3, [r2, #4]
    5830:	210b      	movs	r1, #11
    5832:	f361 4313 	bfi	r3, r1, #16, #4
    5836:	6053      	str	r3, [r2, #4]
    5838:	e029      	b.n	588e <_can_async_write+0x132>
	} else if (msg->len <= 24) {
    583a:	683b      	ldr	r3, [r7, #0]
    583c:	7b1b      	ldrb	r3, [r3, #12]
    583e:	2b18      	cmp	r3, #24
    5840:	d806      	bhi.n	5850 <_can_async_write+0xf4>
		f->T1.bit.DLC = 0xC;
    5842:	68fa      	ldr	r2, [r7, #12]
    5844:	6853      	ldr	r3, [r2, #4]
    5846:	210c      	movs	r1, #12
    5848:	f361 4313 	bfi	r3, r1, #16, #4
    584c:	6053      	str	r3, [r2, #4]
    584e:	e01e      	b.n	588e <_can_async_write+0x132>
	} else if (msg->len <= 32) {
    5850:	683b      	ldr	r3, [r7, #0]
    5852:	7b1b      	ldrb	r3, [r3, #12]
    5854:	2b20      	cmp	r3, #32
    5856:	d806      	bhi.n	5866 <_can_async_write+0x10a>
		f->T1.bit.DLC = 0xD;
    5858:	68fa      	ldr	r2, [r7, #12]
    585a:	6853      	ldr	r3, [r2, #4]
    585c:	210d      	movs	r1, #13
    585e:	f361 4313 	bfi	r3, r1, #16, #4
    5862:	6053      	str	r3, [r2, #4]
    5864:	e013      	b.n	588e <_can_async_write+0x132>
	} else if (msg->len <= 48) {
    5866:	683b      	ldr	r3, [r7, #0]
    5868:	7b1b      	ldrb	r3, [r3, #12]
    586a:	2b30      	cmp	r3, #48	; 0x30
    586c:	d806      	bhi.n	587c <_can_async_write+0x120>
		f->T1.bit.DLC = 0xE;
    586e:	68fa      	ldr	r2, [r7, #12]
    5870:	6853      	ldr	r3, [r2, #4]
    5872:	210e      	movs	r1, #14
    5874:	f361 4313 	bfi	r3, r1, #16, #4
    5878:	6053      	str	r3, [r2, #4]
    587a:	e008      	b.n	588e <_can_async_write+0x132>
	} else if (msg->len <= 64) {
    587c:	683b      	ldr	r3, [r7, #0]
    587e:	7b1b      	ldrb	r3, [r3, #12]
    5880:	2b40      	cmp	r3, #64	; 0x40
    5882:	d804      	bhi.n	588e <_can_async_write+0x132>
		f->T1.bit.DLC = 0xF;
    5884:	68fa      	ldr	r2, [r7, #12]
    5886:	6853      	ldr	r3, [r2, #4]
    5888:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    588c:	6053      	str	r3, [r2, #4]
	}

	f->T1.bit.FDF = hri_can_get_CCCR_FDOE_bit(dev->hw);
    588e:	687b      	ldr	r3, [r7, #4]
    5890:	681b      	ldr	r3, [r3, #0]
    5892:	4618      	mov	r0, r3
    5894:	4b1c      	ldr	r3, [pc, #112]	; (5908 <_can_async_write+0x1ac>)
    5896:	4798      	blx	r3
    5898:	4603      	mov	r3, r0
    589a:	4619      	mov	r1, r3
    589c:	68fa      	ldr	r2, [r7, #12]
    589e:	6853      	ldr	r3, [r2, #4]
    58a0:	f361 5355 	bfi	r3, r1, #21, #1
    58a4:	6053      	str	r3, [r2, #4]
	f->T1.bit.BRS = hri_can_get_CCCR_BRSE_bit(dev->hw);
    58a6:	687b      	ldr	r3, [r7, #4]
    58a8:	681b      	ldr	r3, [r3, #0]
    58aa:	4618      	mov	r0, r3
    58ac:	4b17      	ldr	r3, [pc, #92]	; (590c <_can_async_write+0x1b0>)
    58ae:	4798      	blx	r3
    58b0:	4603      	mov	r3, r0
    58b2:	4619      	mov	r1, r3
    58b4:	68fa      	ldr	r2, [r7, #12]
    58b6:	6853      	ldr	r3, [r2, #4]
    58b8:	f361 5314 	bfi	r3, r1, #20, #1
    58bc:	6053      	str	r3, [r2, #4]

	memcpy(f->data, msg->data, msg->len);
    58be:	68fb      	ldr	r3, [r7, #12]
    58c0:	f103 0008 	add.w	r0, r3, #8
    58c4:	683b      	ldr	r3, [r7, #0]
    58c6:	6899      	ldr	r1, [r3, #8]
    58c8:	683b      	ldr	r3, [r7, #0]
    58ca:	7b1b      	ldrb	r3, [r3, #12]
    58cc:	461a      	mov	r2, r3
    58ce:	4b10      	ldr	r3, [pc, #64]	; (5910 <_can_async_write+0x1b4>)
    58d0:	4798      	blx	r3

	hri_can_write_TXBAR_reg(dev->hw, 1 << hri_can_read_TXFQS_TFQPI_bf(dev->hw));
    58d2:	687b      	ldr	r3, [r7, #4]
    58d4:	681c      	ldr	r4, [r3, #0]
    58d6:	687b      	ldr	r3, [r7, #4]
    58d8:	681b      	ldr	r3, [r3, #0]
    58da:	4618      	mov	r0, r3
    58dc:	4b07      	ldr	r3, [pc, #28]	; (58fc <_can_async_write+0x1a0>)
    58de:	4798      	blx	r3
    58e0:	4602      	mov	r2, r0
    58e2:	2301      	movs	r3, #1
    58e4:	4093      	lsls	r3, r2
    58e6:	4619      	mov	r1, r3
    58e8:	4620      	mov	r0, r4
    58ea:	4b0a      	ldr	r3, [pc, #40]	; (5914 <_can_async_write+0x1b8>)
    58ec:	4798      	blx	r3
	return ERR_NONE;
    58ee:	2300      	movs	r3, #0
}
    58f0:	4618      	mov	r0, r3
    58f2:	3714      	adds	r7, #20
    58f4:	46bd      	mov	sp, r7
    58f6:	bd90      	pop	{r4, r7, pc}
    58f8:	00004ff3 	.word	0x00004ff3
    58fc:	0000501d 	.word	0x0000501d
    5900:	42000400 	.word	0x42000400
    5904:	2000e128 	.word	0x2000e128
    5908:	00005123 	.word	0x00005123
    590c:	00005153 	.word	0x00005153
    5910:	0001ab91 	.word	0x0001ab91
    5914:	000053e9 	.word	0x000053e9

00005918 <_can_async_set_irq_state>:

/**
 * \brief Set CAN Interrupt State
 */
void _can_async_set_irq_state(struct _can_async_device *const dev, enum can_async_callback_type type, bool state)
{
    5918:	b580      	push	{r7, lr}
    591a:	b084      	sub	sp, #16
    591c:	af00      	add	r7, sp, #0
    591e:	6078      	str	r0, [r7, #4]
    5920:	460b      	mov	r3, r1
    5922:	70fb      	strb	r3, [r7, #3]
    5924:	4613      	mov	r3, r2
    5926:	70bb      	strb	r3, [r7, #2]
	uint32_t ie;

	if (type == CAN_ASYNC_RX_CB) {
    5928:	78fb      	ldrb	r3, [r7, #3]
    592a:	2b00      	cmp	r3, #0
    592c:	d107      	bne.n	593e <_can_async_set_irq_state+0x26>
		hri_can_write_IE_RF0NE_bit(dev->hw, state);
    592e:	687b      	ldr	r3, [r7, #4]
    5930:	681b      	ldr	r3, [r3, #0]
    5932:	78ba      	ldrb	r2, [r7, #2]
    5934:	4611      	mov	r1, r2
    5936:	4618      	mov	r0, r3
    5938:	4b16      	ldr	r3, [pc, #88]	; (5994 <_can_async_set_irq_state+0x7c>)
    593a:	4798      	blx	r3
	} else if (type == CAN_ASYNC_IRQ_CB) {
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
	}

	return;
    593c:	e026      	b.n	598c <_can_async_set_irq_state+0x74>
	} else if (type == CAN_ASYNC_TX_CB) {
    593e:	78fb      	ldrb	r3, [r7, #3]
    5940:	2b01      	cmp	r3, #1
    5942:	d10e      	bne.n	5962 <_can_async_set_irq_state+0x4a>
		hri_can_write_IE_TCE_bit(dev->hw, state);
    5944:	687b      	ldr	r3, [r7, #4]
    5946:	681b      	ldr	r3, [r3, #0]
    5948:	78ba      	ldrb	r2, [r7, #2]
    594a:	4611      	mov	r1, r2
    594c:	4618      	mov	r0, r3
    594e:	4b12      	ldr	r3, [pc, #72]	; (5998 <_can_async_set_irq_state+0x80>)
    5950:	4798      	blx	r3
		hri_can_write_TXBTIE_reg(dev->hw, CAN_TXBTIE_MASK);
    5952:	687b      	ldr	r3, [r7, #4]
    5954:	681b      	ldr	r3, [r3, #0]
    5956:	f04f 31ff 	mov.w	r1, #4294967295
    595a:	4618      	mov	r0, r3
    595c:	4b0f      	ldr	r3, [pc, #60]	; (599c <_can_async_set_irq_state+0x84>)
    595e:	4798      	blx	r3
	return;
    5960:	e014      	b.n	598c <_can_async_set_irq_state+0x74>
	} else if (type == CAN_ASYNC_IRQ_CB) {
    5962:	78fb      	ldrb	r3, [r7, #3]
    5964:	2b02      	cmp	r3, #2
    5966:	d111      	bne.n	598c <_can_async_set_irq_state+0x74>
		ie = hri_can_get_IE_reg(dev->hw, CAN_IE_RF0NE | CAN_IE_TCE);
    5968:	687b      	ldr	r3, [r7, #4]
    596a:	681b      	ldr	r3, [r3, #0]
    596c:	f240 2101 	movw	r1, #513	; 0x201
    5970:	4618      	mov	r0, r3
    5972:	4b0b      	ldr	r3, [pc, #44]	; (59a0 <_can_async_set_irq_state+0x88>)
    5974:	4798      	blx	r3
    5976:	60f8      	str	r0, [r7, #12]
		hri_can_write_IE_reg(dev->hw, ie | CONF_CAN0_IE_REG);
    5978:	687b      	ldr	r3, [r7, #4]
    597a:	681a      	ldr	r2, [r3, #0]
    597c:	68fb      	ldr	r3, [r7, #12]
    597e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    5982:	4619      	mov	r1, r3
    5984:	4610      	mov	r0, r2
    5986:	4b07      	ldr	r3, [pc, #28]	; (59a4 <_can_async_set_irq_state+0x8c>)
    5988:	4798      	blx	r3
	return;
    598a:	bf00      	nop
    598c:	bf00      	nop
}
    598e:	3710      	adds	r7, #16
    5990:	46bd      	mov	sp, r7
    5992:	bd80      	pop	{r7, pc}
    5994:	000051f5 	.word	0x000051f5
    5998:	00005229 	.word	0x00005229
    599c:	00005407 	.word	0x00005407
    59a0:	00005261 	.word	0x00005261
    59a4:	00005287 	.word	0x00005287

000059a8 <_can_async_set_filter>:
/**
 * \brief Set CAN to the specified mode
 */
int32_t _can_async_set_filter(struct _can_async_device *const dev, uint8_t index, enum can_format fmt,
                              struct can_filter *filter)
{
    59a8:	b480      	push	{r7}
    59aa:	b087      	sub	sp, #28
    59ac:	af00      	add	r7, sp, #0
    59ae:	60f8      	str	r0, [r7, #12]
    59b0:	607b      	str	r3, [r7, #4]
    59b2:	460b      	mov	r3, r1
    59b4:	72fb      	strb	r3, [r7, #11]
    59b6:	4613      	mov	r3, r2
    59b8:	72bb      	strb	r3, [r7, #10]
	struct _can_standard_message_filter_element *sf;
	struct _can_extended_message_filter_element *ef;

	sf = &((struct _can_context *)dev->context)->rx_std_filter[index];
    59ba:	68fb      	ldr	r3, [r7, #12]
    59bc:	699b      	ldr	r3, [r3, #24]
    59be:	68da      	ldr	r2, [r3, #12]
    59c0:	7afb      	ldrb	r3, [r7, #11]
    59c2:	009b      	lsls	r3, r3, #2
    59c4:	4413      	add	r3, r2
    59c6:	617b      	str	r3, [r7, #20]
	ef = &((struct _can_context *)dev->context)->rx_ext_filter[index];
    59c8:	68fb      	ldr	r3, [r7, #12]
    59ca:	699b      	ldr	r3, [r3, #24]
    59cc:	691a      	ldr	r2, [r3, #16]
    59ce:	7afb      	ldrb	r3, [r7, #11]
    59d0:	00db      	lsls	r3, r3, #3
    59d2:	4413      	add	r3, r2
    59d4:	613b      	str	r3, [r7, #16]

	if (fmt == CAN_FMT_STDID) {
    59d6:	7abb      	ldrb	r3, [r7, #10]
    59d8:	2b00      	cmp	r3, #0
    59da:	d123      	bne.n	5a24 <_can_async_set_filter+0x7c>
		if (filter == NULL) {
    59dc:	687b      	ldr	r3, [r7, #4]
    59de:	2b00      	cmp	r3, #0
    59e0:	d104      	bne.n	59ec <_can_async_set_filter+0x44>
			sf->S0.val = 0;
    59e2:	697b      	ldr	r3, [r7, #20]
    59e4:	2200      	movs	r2, #0
    59e6:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    59e8:	2300      	movs	r3, #0
    59ea:	e03b      	b.n	5a64 <_can_async_set_filter+0xbc>
		}
		sf->S0.val       = filter->mask;
    59ec:	687b      	ldr	r3, [r7, #4]
    59ee:	685a      	ldr	r2, [r3, #4]
    59f0:	697b      	ldr	r3, [r7, #20]
    59f2:	601a      	str	r2, [r3, #0]
		sf->S0.bit.SFID1 = filter->id;
    59f4:	687b      	ldr	r3, [r7, #4]
    59f6:	681b      	ldr	r3, [r3, #0]
    59f8:	b29b      	uxth	r3, r3
    59fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
    59fe:	b299      	uxth	r1, r3
    5a00:	697a      	ldr	r2, [r7, #20]
    5a02:	6813      	ldr	r3, [r2, #0]
    5a04:	f361 431a 	bfi	r3, r1, #16, #11
    5a08:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFT   = _CAN_SFT_CLASSIC;
    5a0a:	697a      	ldr	r2, [r7, #20]
    5a0c:	6813      	ldr	r3, [r2, #0]
    5a0e:	2102      	movs	r1, #2
    5a10:	f361 739f 	bfi	r3, r1, #30, #2
    5a14:	6013      	str	r3, [r2, #0]
		sf->S0.bit.SFEC  = _CAN_SFEC_STF0M;
    5a16:	697a      	ldr	r2, [r7, #20]
    5a18:	6813      	ldr	r3, [r2, #0]
    5a1a:	2101      	movs	r1, #1
    5a1c:	f361 63dd 	bfi	r3, r1, #27, #3
    5a20:	6013      	str	r3, [r2, #0]
    5a22:	e01e      	b.n	5a62 <_can_async_set_filter+0xba>
	} else if (fmt == CAN_FMT_EXTID) {
    5a24:	7abb      	ldrb	r3, [r7, #10]
    5a26:	2b01      	cmp	r3, #1
    5a28:	d11b      	bne.n	5a62 <_can_async_set_filter+0xba>
		if (filter == NULL) {
    5a2a:	687b      	ldr	r3, [r7, #4]
    5a2c:	2b00      	cmp	r3, #0
    5a2e:	d104      	bne.n	5a3a <_can_async_set_filter+0x92>
			ef->F0.val = 0;
    5a30:	693b      	ldr	r3, [r7, #16]
    5a32:	2200      	movs	r2, #0
    5a34:	601a      	str	r2, [r3, #0]
			return ERR_NONE;
    5a36:	2300      	movs	r3, #0
    5a38:	e014      	b.n	5a64 <_can_async_set_filter+0xbc>
		}
		ef->F0.val      = filter->id;
    5a3a:	687b      	ldr	r3, [r7, #4]
    5a3c:	681a      	ldr	r2, [r3, #0]
    5a3e:	693b      	ldr	r3, [r7, #16]
    5a40:	601a      	str	r2, [r3, #0]
		ef->F0.bit.EFEC = _CAN_EFEC_STF0M;
    5a42:	693a      	ldr	r2, [r7, #16]
    5a44:	6813      	ldr	r3, [r2, #0]
    5a46:	2101      	movs	r1, #1
    5a48:	f361 735f 	bfi	r3, r1, #29, #3
    5a4c:	6013      	str	r3, [r2, #0]
		ef->F1.val      = filter->mask;
    5a4e:	687b      	ldr	r3, [r7, #4]
    5a50:	685a      	ldr	r2, [r3, #4]
    5a52:	693b      	ldr	r3, [r7, #16]
    5a54:	605a      	str	r2, [r3, #4]
		ef->F1.bit.EFT  = _CAN_EFT_CLASSIC;
    5a56:	693a      	ldr	r2, [r7, #16]
    5a58:	6853      	ldr	r3, [r2, #4]
    5a5a:	2102      	movs	r1, #2
    5a5c:	f361 739f 	bfi	r3, r1, #30, #2
    5a60:	6053      	str	r3, [r2, #4]
	}

	return ERR_NONE;
    5a62:	2300      	movs	r3, #0
}
    5a64:	4618      	mov	r0, r3
    5a66:	371c      	adds	r7, #28
    5a68:	46bd      	mov	sp, r7
    5a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a6e:	4770      	bx	lr

00005a70 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    5a70:	b590      	push	{r4, r7, lr}
    5a72:	b083      	sub	sp, #12
    5a74:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    5a76:	4b2c      	ldr	r3, [pc, #176]	; (5b28 <CAN1_Handler+0xb8>)
    5a78:	681b      	ldr	r3, [r3, #0]
    5a7a:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    5a7c:	687b      	ldr	r3, [r7, #4]
    5a7e:	681b      	ldr	r3, [r3, #0]
    5a80:	4618      	mov	r0, r3
    5a82:	4b2a      	ldr	r3, [pc, #168]	; (5b2c <CAN1_Handler+0xbc>)
    5a84:	4798      	blx	r3
    5a86:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    5a88:	683b      	ldr	r3, [r7, #0]
    5a8a:	f003 0301 	and.w	r3, r3, #1
    5a8e:	2b00      	cmp	r3, #0
    5a90:	d003      	beq.n	5a9a <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    5a92:	687b      	ldr	r3, [r7, #4]
    5a94:	689b      	ldr	r3, [r3, #8]
    5a96:	6878      	ldr	r0, [r7, #4]
    5a98:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    5a9a:	683b      	ldr	r3, [r7, #0]
    5a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    5aa0:	2b00      	cmp	r3, #0
    5aa2:	d003      	beq.n	5aac <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    5aa4:	687b      	ldr	r3, [r7, #4]
    5aa6:	685b      	ldr	r3, [r3, #4]
    5aa8:	6878      	ldr	r0, [r7, #4]
    5aaa:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    5aac:	683b      	ldr	r3, [r7, #0]
    5aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    5ab2:	2b00      	cmp	r3, #0
    5ab4:	d004      	beq.n	5ac0 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    5ab6:	687b      	ldr	r3, [r7, #4]
    5ab8:	68db      	ldr	r3, [r3, #12]
    5aba:	2103      	movs	r1, #3
    5abc:	6878      	ldr	r0, [r7, #4]
    5abe:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    5ac0:	683b      	ldr	r3, [r7, #0]
    5ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    5ac6:	2b00      	cmp	r3, #0
    5ac8:	d004      	beq.n	5ad4 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    5aca:	687b      	ldr	r3, [r7, #4]
    5acc:	68db      	ldr	r3, [r3, #12]
    5ace:	2100      	movs	r1, #0
    5ad0:	6878      	ldr	r0, [r7, #4]
    5ad2:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    5ad4:	683b      	ldr	r3, [r7, #0]
    5ad6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    5ada:	2b00      	cmp	r3, #0
    5adc:	d00f      	beq.n	5afe <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    5ade:	687b      	ldr	r3, [r7, #4]
    5ae0:	68dc      	ldr	r4, [r3, #12]
    5ae2:	687b      	ldr	r3, [r7, #4]
    5ae4:	681b      	ldr	r3, [r3, #0]
    5ae6:	4618      	mov	r0, r3
    5ae8:	4b11      	ldr	r3, [pc, #68]	; (5b30 <CAN1_Handler+0xc0>)
    5aea:	4798      	blx	r3
    5aec:	4603      	mov	r3, r0
    5aee:	2b00      	cmp	r3, #0
    5af0:	d001      	beq.n	5af6 <CAN1_Handler+0x86>
    5af2:	2302      	movs	r3, #2
    5af4:	e000      	b.n	5af8 <CAN1_Handler+0x88>
    5af6:	2301      	movs	r3, #1
    5af8:	4619      	mov	r1, r3
    5afa:	6878      	ldr	r0, [r7, #4]
    5afc:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    5afe:	683b      	ldr	r3, [r7, #0]
    5b00:	f003 0308 	and.w	r3, r3, #8
    5b04:	2b00      	cmp	r3, #0
    5b06:	d004      	beq.n	5b12 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    5b08:	687b      	ldr	r3, [r7, #4]
    5b0a:	68db      	ldr	r3, [r3, #12]
    5b0c:	2104      	movs	r1, #4
    5b0e:	6878      	ldr	r0, [r7, #4]
    5b10:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    5b12:	687b      	ldr	r3, [r7, #4]
    5b14:	681b      	ldr	r3, [r3, #0]
    5b16:	6839      	ldr	r1, [r7, #0]
    5b18:	4618      	mov	r0, r3
    5b1a:	4b06      	ldr	r3, [pc, #24]	; (5b34 <CAN1_Handler+0xc4>)
    5b1c:	4798      	blx	r3
}
    5b1e:	bf00      	nop
    5b20:	370c      	adds	r7, #12
    5b22:	46bd      	mov	sp, r7
    5b24:	bd90      	pop	{r4, r7, pc}
    5b26:	bf00      	nop
    5b28:	2000233c 	.word	0x2000233c
    5b2c:	000051dd 	.word	0x000051dd
    5b30:	00004f8d 	.word	0x00004f8d
    5b34:	000051c1 	.word	0x000051c1

00005b38 <__NVIC_SetPendingIRQ>:
{
    5b38:	b480      	push	{r7}
    5b3a:	b083      	sub	sp, #12
    5b3c:	af00      	add	r7, sp, #0
    5b3e:	4603      	mov	r3, r0
    5b40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5b46:	2b00      	cmp	r3, #0
    5b48:	db0c      	blt.n	5b64 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5b4a:	4909      	ldr	r1, [pc, #36]	; (5b70 <__NVIC_SetPendingIRQ+0x38>)
    5b4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5b50:	095b      	lsrs	r3, r3, #5
    5b52:	88fa      	ldrh	r2, [r7, #6]
    5b54:	f002 021f 	and.w	r2, r2, #31
    5b58:	2001      	movs	r0, #1
    5b5a:	fa00 f202 	lsl.w	r2, r0, r2
    5b5e:	3340      	adds	r3, #64	; 0x40
    5b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5b64:	bf00      	nop
    5b66:	370c      	adds	r7, #12
    5b68:	46bd      	mov	sp, r7
    5b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b6e:	4770      	bx	lr
    5b70:	e000e100 	.word	0xe000e100

00005b74 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    5b74:	b580      	push	{r7, lr}
    5b76:	b082      	sub	sp, #8
    5b78:	af00      	add	r7, sp, #0
    5b7a:	4603      	mov	r3, r0
    5b7c:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    5b7e:	79fb      	ldrb	r3, [r7, #7]
    5b80:	b21b      	sxth	r3, r3
    5b82:	4618      	mov	r0, r3
    5b84:	4b02      	ldr	r3, [pc, #8]	; (5b90 <_irq_set+0x1c>)
    5b86:	4798      	blx	r3
}
    5b88:	bf00      	nop
    5b8a:	3708      	adds	r7, #8
    5b8c:	46bd      	mov	sp, r7
    5b8e:	bd80      	pop	{r7, pc}
    5b90:	00005b39 	.word	0x00005b39

00005b94 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    5b94:	b480      	push	{r7}
    5b96:	b083      	sub	sp, #12
    5b98:	af00      	add	r7, sp, #0
    5b9a:	4603      	mov	r3, r0
    5b9c:	6039      	str	r1, [r7, #0]
    5b9e:	80fb      	strh	r3, [r7, #6]
    5ba0:	4613      	mov	r3, r2
    5ba2:	717b      	strb	r3, [r7, #5]
	switch (power) {
    5ba4:	797b      	ldrb	r3, [r7, #5]
    5ba6:	3b04      	subs	r3, #4
    5ba8:	2b05      	cmp	r3, #5
    5baa:	d86b      	bhi.n	5c84 <_get_cycles_for_us_internal+0xf0>
    5bac:	a201      	add	r2, pc, #4	; (adr r2, 5bb4 <_get_cycles_for_us_internal+0x20>)
    5bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5bb2:	bf00      	nop
    5bb4:	00005c63 	.word	0x00005c63
    5bb8:	00005c43 	.word	0x00005c43
    5bbc:	00005c25 	.word	0x00005c25
    5bc0:	00005c07 	.word	0x00005c07
    5bc4:	00005be9 	.word	0x00005be9
    5bc8:	00005bcd 	.word	0x00005bcd
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    5bcc:	88fb      	ldrh	r3, [r7, #6]
    5bce:	683a      	ldr	r2, [r7, #0]
    5bd0:	4935      	ldr	r1, [pc, #212]	; (5ca8 <_get_cycles_for_us_internal+0x114>)
    5bd2:	fba1 1202 	umull	r1, r2, r1, r2
    5bd6:	0c92      	lsrs	r2, r2, #18
    5bd8:	fb02 f303 	mul.w	r3, r2, r3
    5bdc:	3302      	adds	r3, #2
    5bde:	4a33      	ldr	r2, [pc, #204]	; (5cac <_get_cycles_for_us_internal+0x118>)
    5be0:	fba2 2303 	umull	r2, r3, r2, r3
    5be4:	085b      	lsrs	r3, r3, #1
    5be6:	e059      	b.n	5c9c <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    5be8:	88fb      	ldrh	r3, [r7, #6]
    5bea:	683a      	ldr	r2, [r7, #0]
    5bec:	0952      	lsrs	r2, r2, #5
    5bee:	4930      	ldr	r1, [pc, #192]	; (5cb0 <_get_cycles_for_us_internal+0x11c>)
    5bf0:	fba1 1202 	umull	r1, r2, r1, r2
    5bf4:	09d2      	lsrs	r2, r2, #7
    5bf6:	fb02 f303 	mul.w	r3, r2, r3
    5bfa:	331d      	adds	r3, #29
    5bfc:	4a2d      	ldr	r2, [pc, #180]	; (5cb4 <_get_cycles_for_us_internal+0x120>)
    5bfe:	fba2 2303 	umull	r2, r3, r2, r3
    5c02:	091b      	lsrs	r3, r3, #4
    5c04:	e04a      	b.n	5c9c <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    5c06:	88fb      	ldrh	r3, [r7, #6]
    5c08:	683a      	ldr	r2, [r7, #0]
    5c0a:	492b      	ldr	r1, [pc, #172]	; (5cb8 <_get_cycles_for_us_internal+0x124>)
    5c0c:	fba1 1202 	umull	r1, r2, r1, r2
    5c10:	0b52      	lsrs	r2, r2, #13
    5c12:	fb02 f303 	mul.w	r3, r2, r3
    5c16:	f203 132b 	addw	r3, r3, #299	; 0x12b
    5c1a:	4a28      	ldr	r2, [pc, #160]	; (5cbc <_get_cycles_for_us_internal+0x128>)
    5c1c:	fba2 2303 	umull	r2, r3, r2, r3
    5c20:	095b      	lsrs	r3, r3, #5
    5c22:	e03b      	b.n	5c9c <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    5c24:	88fb      	ldrh	r3, [r7, #6]
    5c26:	683a      	ldr	r2, [r7, #0]
    5c28:	4925      	ldr	r1, [pc, #148]	; (5cc0 <_get_cycles_for_us_internal+0x12c>)
    5c2a:	fba1 1202 	umull	r1, r2, r1, r2
    5c2e:	0992      	lsrs	r2, r2, #6
    5c30:	fb02 f303 	mul.w	r3, r2, r3
    5c34:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    5c38:	4a22      	ldr	r2, [pc, #136]	; (5cc4 <_get_cycles_for_us_internal+0x130>)
    5c3a:	fba2 2303 	umull	r2, r3, r2, r3
    5c3e:	099b      	lsrs	r3, r3, #6
    5c40:	e02c      	b.n	5c9c <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    5c42:	88fb      	ldrh	r3, [r7, #6]
    5c44:	683a      	ldr	r2, [r7, #0]
    5c46:	4920      	ldr	r1, [pc, #128]	; (5cc8 <_get_cycles_for_us_internal+0x134>)
    5c48:	fba1 1202 	umull	r1, r2, r1, r2
    5c4c:	0952      	lsrs	r2, r2, #5
    5c4e:	fb02 f303 	mul.w	r3, r2, r3
    5c52:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    5c56:	332f      	adds	r3, #47	; 0x2f
    5c58:	4a1c      	ldr	r2, [pc, #112]	; (5ccc <_get_cycles_for_us_internal+0x138>)
    5c5a:	fba2 2303 	umull	r2, r3, r2, r3
    5c5e:	0b5b      	lsrs	r3, r3, #13
    5c60:	e01c      	b.n	5c9c <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    5c62:	88fb      	ldrh	r3, [r7, #6]
    5c64:	683a      	ldr	r2, [r7, #0]
    5c66:	491a      	ldr	r1, [pc, #104]	; (5cd0 <_get_cycles_for_us_internal+0x13c>)
    5c68:	fba1 1202 	umull	r1, r2, r1, r2
    5c6c:	08d2      	lsrs	r2, r2, #3
    5c6e:	fb02 f303 	mul.w	r3, r2, r3
    5c72:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    5c76:	f203 33df 	addw	r3, r3, #991	; 0x3df
    5c7a:	4a16      	ldr	r2, [pc, #88]	; (5cd4 <_get_cycles_for_us_internal+0x140>)
    5c7c:	fba2 2303 	umull	r2, r3, r2, r3
    5c80:	0c5b      	lsrs	r3, r3, #17
    5c82:	e00b      	b.n	5c9c <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    5c84:	88fb      	ldrh	r3, [r7, #6]
    5c86:	683a      	ldr	r2, [r7, #0]
    5c88:	fb02 f303 	mul.w	r3, r2, r3
    5c8c:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    5c90:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    5c94:	4a10      	ldr	r2, [pc, #64]	; (5cd8 <_get_cycles_for_us_internal+0x144>)
    5c96:	fba2 2303 	umull	r2, r3, r2, r3
    5c9a:	0c9b      	lsrs	r3, r3, #18
	}
}
    5c9c:	4618      	mov	r0, r3
    5c9e:	370c      	adds	r7, #12
    5ca0:	46bd      	mov	sp, r7
    5ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ca6:	4770      	bx	lr
    5ca8:	431bde83 	.word	0x431bde83
    5cac:	aaaaaaab 	.word	0xaaaaaaab
    5cb0:	0a7c5ac5 	.word	0x0a7c5ac5
    5cb4:	88888889 	.word	0x88888889
    5cb8:	d1b71759 	.word	0xd1b71759
    5cbc:	1b4e81b5 	.word	0x1b4e81b5
    5cc0:	10624dd3 	.word	0x10624dd3
    5cc4:	057619f1 	.word	0x057619f1
    5cc8:	51eb851f 	.word	0x51eb851f
    5ccc:	45e7b273 	.word	0x45e7b273
    5cd0:	cccccccd 	.word	0xcccccccd
    5cd4:	6fd91d85 	.word	0x6fd91d85
    5cd8:	165e9f81 	.word	0x165e9f81

00005cdc <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    5cdc:	b580      	push	{r7, lr}
    5cde:	b082      	sub	sp, #8
    5ce0:	af00      	add	r7, sp, #0
    5ce2:	4603      	mov	r3, r0
    5ce4:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    5ce6:	88fb      	ldrh	r3, [r7, #6]
    5ce8:	2209      	movs	r2, #9
    5cea:	4904      	ldr	r1, [pc, #16]	; (5cfc <_get_cycles_for_us+0x20>)
    5cec:	4618      	mov	r0, r3
    5cee:	4b04      	ldr	r3, [pc, #16]	; (5d00 <_get_cycles_for_us+0x24>)
    5cf0:	4798      	blx	r3
    5cf2:	4603      	mov	r3, r0
}
    5cf4:	4618      	mov	r0, r3
    5cf6:	3708      	adds	r7, #8
    5cf8:	46bd      	mov	sp, r7
    5cfa:	bd80      	pop	{r7, pc}
    5cfc:	07270e00 	.word	0x07270e00
    5d00:	00005b95 	.word	0x00005b95

00005d04 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    5d04:	b480      	push	{r7}
    5d06:	b083      	sub	sp, #12
    5d08:	af00      	add	r7, sp, #0
    5d0a:	4603      	mov	r3, r0
    5d0c:	6039      	str	r1, [r7, #0]
    5d0e:	80fb      	strh	r3, [r7, #6]
    5d10:	4613      	mov	r3, r2
    5d12:	717b      	strb	r3, [r7, #5]
	switch (power) {
    5d14:	797b      	ldrb	r3, [r7, #5]
    5d16:	3b04      	subs	r3, #4
    5d18:	2b05      	cmp	r3, #5
    5d1a:	d870      	bhi.n	5dfe <_get_cycles_for_ms_internal+0xfa>
    5d1c:	a201      	add	r2, pc, #4	; (adr r2, 5d24 <_get_cycles_for_ms_internal+0x20>)
    5d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5d22:	bf00      	nop
    5d24:	00005de1 	.word	0x00005de1
    5d28:	00005dc5 	.word	0x00005dc5
    5d2c:	00005da9 	.word	0x00005da9
    5d30:	00005d85 	.word	0x00005d85
    5d34:	00005d61 	.word	0x00005d61
    5d38:	00005d3d 	.word	0x00005d3d
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    5d3c:	88fb      	ldrh	r3, [r7, #6]
    5d3e:	683a      	ldr	r2, [r7, #0]
    5d40:	4937      	ldr	r1, [pc, #220]	; (5e20 <_get_cycles_for_ms_internal+0x11c>)
    5d42:	fba1 1202 	umull	r1, r2, r1, r2
    5d46:	0c92      	lsrs	r2, r2, #18
    5d48:	fb02 f303 	mul.w	r3, r2, r3
    5d4c:	3302      	adds	r3, #2
    5d4e:	4a35      	ldr	r2, [pc, #212]	; (5e24 <_get_cycles_for_ms_internal+0x120>)
    5d50:	fba2 2303 	umull	r2, r3, r2, r3
    5d54:	085b      	lsrs	r3, r3, #1
    5d56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5d5a:	fb02 f303 	mul.w	r3, r2, r3
    5d5e:	e058      	b.n	5e12 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    5d60:	88fb      	ldrh	r3, [r7, #6]
    5d62:	683a      	ldr	r2, [r7, #0]
    5d64:	0952      	lsrs	r2, r2, #5
    5d66:	4930      	ldr	r1, [pc, #192]	; (5e28 <_get_cycles_for_ms_internal+0x124>)
    5d68:	fba1 1202 	umull	r1, r2, r1, r2
    5d6c:	09d2      	lsrs	r2, r2, #7
    5d6e:	fb02 f303 	mul.w	r3, r2, r3
    5d72:	3302      	adds	r3, #2
    5d74:	4a2b      	ldr	r2, [pc, #172]	; (5e24 <_get_cycles_for_ms_internal+0x120>)
    5d76:	fba2 2303 	umull	r2, r3, r2, r3
    5d7a:	085b      	lsrs	r3, r3, #1
    5d7c:	2264      	movs	r2, #100	; 0x64
    5d7e:	fb02 f303 	mul.w	r3, r2, r3
    5d82:	e046      	b.n	5e12 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    5d84:	88fb      	ldrh	r3, [r7, #6]
    5d86:	683a      	ldr	r2, [r7, #0]
    5d88:	4928      	ldr	r1, [pc, #160]	; (5e2c <_get_cycles_for_ms_internal+0x128>)
    5d8a:	fba1 1202 	umull	r1, r2, r1, r2
    5d8e:	0b52      	lsrs	r2, r2, #13
    5d90:	fb02 f303 	mul.w	r3, r2, r3
    5d94:	3302      	adds	r3, #2
    5d96:	4a23      	ldr	r2, [pc, #140]	; (5e24 <_get_cycles_for_ms_internal+0x120>)
    5d98:	fba2 2303 	umull	r2, r3, r2, r3
    5d9c:	085a      	lsrs	r2, r3, #1
    5d9e:	4613      	mov	r3, r2
    5da0:	009b      	lsls	r3, r3, #2
    5da2:	4413      	add	r3, r2
    5da4:	005b      	lsls	r3, r3, #1
    5da6:	e034      	b.n	5e12 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    5da8:	88fb      	ldrh	r3, [r7, #6]
    5daa:	683a      	ldr	r2, [r7, #0]
    5dac:	4920      	ldr	r1, [pc, #128]	; (5e30 <_get_cycles_for_ms_internal+0x12c>)
    5dae:	fba1 1202 	umull	r1, r2, r1, r2
    5db2:	0992      	lsrs	r2, r2, #6
    5db4:	fb02 f303 	mul.w	r3, r2, r3
    5db8:	3302      	adds	r3, #2
    5dba:	4a1a      	ldr	r2, [pc, #104]	; (5e24 <_get_cycles_for_ms_internal+0x120>)
    5dbc:	fba2 2303 	umull	r2, r3, r2, r3
    5dc0:	085b      	lsrs	r3, r3, #1
    5dc2:	e026      	b.n	5e12 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    5dc4:	88fb      	ldrh	r3, [r7, #6]
    5dc6:	683a      	ldr	r2, [r7, #0]
    5dc8:	491a      	ldr	r1, [pc, #104]	; (5e34 <_get_cycles_for_ms_internal+0x130>)
    5dca:	fba1 1202 	umull	r1, r2, r1, r2
    5dce:	0952      	lsrs	r2, r2, #5
    5dd0:	fb02 f303 	mul.w	r3, r2, r3
    5dd4:	331d      	adds	r3, #29
    5dd6:	4a18      	ldr	r2, [pc, #96]	; (5e38 <_get_cycles_for_ms_internal+0x134>)
    5dd8:	fba2 2303 	umull	r2, r3, r2, r3
    5ddc:	091b      	lsrs	r3, r3, #4
    5dde:	e018      	b.n	5e12 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    5de0:	88fb      	ldrh	r3, [r7, #6]
    5de2:	683a      	ldr	r2, [r7, #0]
    5de4:	4915      	ldr	r1, [pc, #84]	; (5e3c <_get_cycles_for_ms_internal+0x138>)
    5de6:	fba1 1202 	umull	r1, r2, r1, r2
    5dea:	08d2      	lsrs	r2, r2, #3
    5dec:	fb02 f303 	mul.w	r3, r2, r3
    5df0:	f203 132b 	addw	r3, r3, #299	; 0x12b
    5df4:	4a12      	ldr	r2, [pc, #72]	; (5e40 <_get_cycles_for_ms_internal+0x13c>)
    5df6:	fba2 2303 	umull	r2, r3, r2, r3
    5dfa:	095b      	lsrs	r3, r3, #5
    5dfc:	e009      	b.n	5e12 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    5dfe:	88fb      	ldrh	r3, [r7, #6]
    5e00:	683a      	ldr	r2, [r7, #0]
    5e02:	fb02 f303 	mul.w	r3, r2, r3
    5e06:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    5e0a:	4a0e      	ldr	r2, [pc, #56]	; (5e44 <_get_cycles_for_ms_internal+0x140>)
    5e0c:	fba2 2303 	umull	r2, r3, r2, r3
    5e10:	099b      	lsrs	r3, r3, #6
	}
}
    5e12:	4618      	mov	r0, r3
    5e14:	370c      	adds	r7, #12
    5e16:	46bd      	mov	sp, r7
    5e18:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e1c:	4770      	bx	lr
    5e1e:	bf00      	nop
    5e20:	431bde83 	.word	0x431bde83
    5e24:	aaaaaaab 	.word	0xaaaaaaab
    5e28:	0a7c5ac5 	.word	0x0a7c5ac5
    5e2c:	d1b71759 	.word	0xd1b71759
    5e30:	10624dd3 	.word	0x10624dd3
    5e34:	51eb851f 	.word	0x51eb851f
    5e38:	88888889 	.word	0x88888889
    5e3c:	cccccccd 	.word	0xcccccccd
    5e40:	1b4e81b5 	.word	0x1b4e81b5
    5e44:	057619f1 	.word	0x057619f1

00005e48 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    5e48:	b580      	push	{r7, lr}
    5e4a:	b082      	sub	sp, #8
    5e4c:	af00      	add	r7, sp, #0
    5e4e:	4603      	mov	r3, r0
    5e50:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    5e52:	88fb      	ldrh	r3, [r7, #6]
    5e54:	2209      	movs	r2, #9
    5e56:	4904      	ldr	r1, [pc, #16]	; (5e68 <_get_cycles_for_ms+0x20>)
    5e58:	4618      	mov	r0, r3
    5e5a:	4b04      	ldr	r3, [pc, #16]	; (5e6c <_get_cycles_for_ms+0x24>)
    5e5c:	4798      	blx	r3
    5e5e:	4603      	mov	r3, r0
}
    5e60:	4618      	mov	r0, r3
    5e62:	3708      	adds	r7, #8
    5e64:	46bd      	mov	sp, r7
    5e66:	bd80      	pop	{r7, pc}
    5e68:	07270e00 	.word	0x07270e00
    5e6c:	00005d05 	.word	0x00005d05

00005e70 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    5e70:	b480      	push	{r7}
    5e72:	b083      	sub	sp, #12
    5e74:	af00      	add	r7, sp, #0
    5e76:	6078      	str	r0, [r7, #4]
    5e78:	6039      	str	r1, [r7, #0]
    5e7a:	bf00      	nop
    5e7c:	f3af 8000 	nop.w

00005e80 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    5e80:	3901      	subs	r1, #1
    5e82:	d8fd      	bhi.n	5e80 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    5e84:	bf00      	nop
    5e86:	370c      	adds	r7, #12
    5e88:	46bd      	mov	sp, r7
    5e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e8e:	4770      	bx	lr

00005e90 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    5e90:	b480      	push	{r7}
    5e92:	b083      	sub	sp, #12
    5e94:	af00      	add	r7, sp, #0
    5e96:	6078      	str	r0, [r7, #4]
    5e98:	460b      	mov	r3, r1
    5e9a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    5e9c:	687b      	ldr	r3, [r7, #4]
    5e9e:	881b      	ldrh	r3, [r3, #0]
    5ea0:	b29a      	uxth	r2, r3
    5ea2:	887b      	ldrh	r3, [r7, #2]
    5ea4:	021b      	lsls	r3, r3, #8
    5ea6:	b29b      	uxth	r3, r3
    5ea8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    5eac:	b29b      	uxth	r3, r3
    5eae:	4313      	orrs	r3, r2
    5eb0:	b29a      	uxth	r2, r3
    5eb2:	687b      	ldr	r3, [r7, #4]
    5eb4:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    5eb6:	bf00      	nop
    5eb8:	370c      	adds	r7, #12
    5eba:	46bd      	mov	sp, r7
    5ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ec0:	4770      	bx	lr

00005ec2 <hri_port_set_EVCTRL_reg>:
{
    5ec2:	b480      	push	{r7}
    5ec4:	b085      	sub	sp, #20
    5ec6:	af00      	add	r7, sp, #0
    5ec8:	60f8      	str	r0, [r7, #12]
    5eca:	460b      	mov	r3, r1
    5ecc:	607a      	str	r2, [r7, #4]
    5ece:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    5ed0:	7afb      	ldrb	r3, [r7, #11]
    5ed2:	7afa      	ldrb	r2, [r7, #11]
    5ed4:	68f9      	ldr	r1, [r7, #12]
    5ed6:	01d2      	lsls	r2, r2, #7
    5ed8:	440a      	add	r2, r1
    5eda:	322c      	adds	r2, #44	; 0x2c
    5edc:	6811      	ldr	r1, [r2, #0]
    5ede:	687a      	ldr	r2, [r7, #4]
    5ee0:	430a      	orrs	r2, r1
    5ee2:	68f9      	ldr	r1, [r7, #12]
    5ee4:	01db      	lsls	r3, r3, #7
    5ee6:	440b      	add	r3, r1
    5ee8:	332c      	adds	r3, #44	; 0x2c
    5eea:	601a      	str	r2, [r3, #0]
}
    5eec:	bf00      	nop
    5eee:	3714      	adds	r7, #20
    5ef0:	46bd      	mov	sp, r7
    5ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ef6:	4770      	bx	lr

00005ef8 <_port_event_init>:

static inline void _port_event_init()
{
    5ef8:	b580      	push	{r7, lr}
    5efa:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    5efc:	2200      	movs	r2, #0
    5efe:	2100      	movs	r1, #0
    5f00:	480a      	ldr	r0, [pc, #40]	; (5f2c <_port_event_init+0x34>)
    5f02:	4b0b      	ldr	r3, [pc, #44]	; (5f30 <_port_event_init+0x38>)
    5f04:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    5f06:	2200      	movs	r2, #0
    5f08:	2101      	movs	r1, #1
    5f0a:	4808      	ldr	r0, [pc, #32]	; (5f2c <_port_event_init+0x34>)
    5f0c:	4b08      	ldr	r3, [pc, #32]	; (5f30 <_port_event_init+0x38>)
    5f0e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    5f10:	f64e 72ef 	movw	r2, #61423	; 0xefef
    5f14:	2102      	movs	r1, #2
    5f16:	4805      	ldr	r0, [pc, #20]	; (5f2c <_port_event_init+0x34>)
    5f18:	4b05      	ldr	r3, [pc, #20]	; (5f30 <_port_event_init+0x38>)
    5f1a:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    5f1c:	2200      	movs	r2, #0
    5f1e:	2103      	movs	r1, #3
    5f20:	4802      	ldr	r0, [pc, #8]	; (5f2c <_port_event_init+0x34>)
    5f22:	4b03      	ldr	r3, [pc, #12]	; (5f30 <_port_event_init+0x38>)
    5f24:	4798      	blx	r3
}
    5f26:	bf00      	nop
    5f28:	bd80      	pop	{r7, pc}
    5f2a:	bf00      	nop
    5f2c:	41008000 	.word	0x41008000
    5f30:	00005ec3 	.word	0x00005ec3

00005f34 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    5f34:	b580      	push	{r7, lr}
    5f36:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    5f38:	2104      	movs	r1, #4
    5f3a:	480b      	ldr	r0, [pc, #44]	; (5f68 <_init_chip+0x34>)
    5f3c:	4b0b      	ldr	r3, [pc, #44]	; (5f6c <_init_chip+0x38>)
    5f3e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    5f40:	4b0b      	ldr	r3, [pc, #44]	; (5f70 <_init_chip+0x3c>)
    5f42:	4798      	blx	r3
	_oscctrl_init_sources();
    5f44:	4b0b      	ldr	r3, [pc, #44]	; (5f74 <_init_chip+0x40>)
    5f46:	4798      	blx	r3
	_mclk_init();
    5f48:	4b0b      	ldr	r3, [pc, #44]	; (5f78 <_init_chip+0x44>)
    5f4a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    5f4c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    5f50:	4b0a      	ldr	r3, [pc, #40]	; (5f7c <_init_chip+0x48>)
    5f52:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    5f54:	4b0a      	ldr	r3, [pc, #40]	; (5f80 <_init_chip+0x4c>)
    5f56:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    5f58:	f640 30df 	movw	r0, #3039	; 0xbdf
    5f5c:	4b07      	ldr	r3, [pc, #28]	; (5f7c <_init_chip+0x48>)
    5f5e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    5f60:	4b08      	ldr	r3, [pc, #32]	; (5f84 <_init_chip+0x50>)
    5f62:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    5f64:	bf00      	nop
    5f66:	bd80      	pop	{r7, pc}
    5f68:	41004000 	.word	0x41004000
    5f6c:	00005e91 	.word	0x00005e91
    5f70:	00006a81 	.word	0x00006a81
    5f74:	00006f49 	.word	0x00006f49
    5f78:	000069a1 	.word	0x000069a1
    5f7c:	00006849 	.word	0x00006849
    5f80:	00006f89 	.word	0x00006f89
    5f84:	00005ef9 	.word	0x00005ef9

00005f88 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    5f88:	b480      	push	{r7}
    5f8a:	b083      	sub	sp, #12
    5f8c:	af00      	add	r7, sp, #0
    5f8e:	6078      	str	r0, [r7, #4]
    5f90:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    5f92:	687b      	ldr	r3, [r7, #4]
    5f94:	683a      	ldr	r2, [r7, #0]
    5f96:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    5f98:	2300      	movs	r3, #0
}
    5f9a:	4618      	mov	r0, r3
    5f9c:	370c      	adds	r7, #12
    5f9e:	46bd      	mov	sp, r7
    5fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fa4:	4770      	bx	lr
	...

00005fa8 <__NVIC_EnableIRQ>:
{
    5fa8:	b480      	push	{r7}
    5faa:	b083      	sub	sp, #12
    5fac:	af00      	add	r7, sp, #0
    5fae:	4603      	mov	r3, r0
    5fb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5fb6:	2b00      	cmp	r3, #0
    5fb8:	db0b      	blt.n	5fd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5fba:	4909      	ldr	r1, [pc, #36]	; (5fe0 <__NVIC_EnableIRQ+0x38>)
    5fbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5fc0:	095b      	lsrs	r3, r3, #5
    5fc2:	88fa      	ldrh	r2, [r7, #6]
    5fc4:	f002 021f 	and.w	r2, r2, #31
    5fc8:	2001      	movs	r0, #1
    5fca:	fa00 f202 	lsl.w	r2, r0, r2
    5fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5fd2:	bf00      	nop
    5fd4:	370c      	adds	r7, #12
    5fd6:	46bd      	mov	sp, r7
    5fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fdc:	4770      	bx	lr
    5fde:	bf00      	nop
    5fe0:	e000e100 	.word	0xe000e100

00005fe4 <__NVIC_DisableIRQ>:
{
    5fe4:	b480      	push	{r7}
    5fe6:	b083      	sub	sp, #12
    5fe8:	af00      	add	r7, sp, #0
    5fea:	4603      	mov	r3, r0
    5fec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    5fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5ff2:	2b00      	cmp	r3, #0
    5ff4:	db10      	blt.n	6018 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5ff6:	490b      	ldr	r1, [pc, #44]	; (6024 <__NVIC_DisableIRQ+0x40>)
    5ff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    5ffc:	095b      	lsrs	r3, r3, #5
    5ffe:	88fa      	ldrh	r2, [r7, #6]
    6000:	f002 021f 	and.w	r2, r2, #31
    6004:	2001      	movs	r0, #1
    6006:	fa00 f202 	lsl.w	r2, r0, r2
    600a:	3320      	adds	r3, #32
    600c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    6010:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6014:	f3bf 8f6f 	isb	sy
}
    6018:	bf00      	nop
    601a:	370c      	adds	r7, #12
    601c:	46bd      	mov	sp, r7
    601e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6022:	4770      	bx	lr
    6024:	e000e100 	.word	0xe000e100

00006028 <__NVIC_ClearPendingIRQ>:
{
    6028:	b480      	push	{r7}
    602a:	b083      	sub	sp, #12
    602c:	af00      	add	r7, sp, #0
    602e:	4603      	mov	r3, r0
    6030:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    6032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6036:	2b00      	cmp	r3, #0
    6038:	db0c      	blt.n	6054 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    603a:	4909      	ldr	r1, [pc, #36]	; (6060 <__NVIC_ClearPendingIRQ+0x38>)
    603c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6040:	095b      	lsrs	r3, r3, #5
    6042:	88fa      	ldrh	r2, [r7, #6]
    6044:	f002 021f 	and.w	r2, r2, #31
    6048:	2001      	movs	r0, #1
    604a:	fa00 f202 	lsl.w	r2, r0, r2
    604e:	3360      	adds	r3, #96	; 0x60
    6050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6054:	bf00      	nop
    6056:	370c      	adds	r7, #12
    6058:	46bd      	mov	sp, r7
    605a:	f85d 7b04 	ldr.w	r7, [sp], #4
    605e:	4770      	bx	lr
    6060:	e000e100 	.word	0xe000e100

00006064 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    6064:	b480      	push	{r7}
    6066:	b083      	sub	sp, #12
    6068:	af00      	add	r7, sp, #0
    606a:	6078      	str	r0, [r7, #4]
    606c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    606e:	bf00      	nop
    6070:	687b      	ldr	r3, [r7, #4]
    6072:	685a      	ldr	r2, [r3, #4]
    6074:	683b      	ldr	r3, [r7, #0]
    6076:	4013      	ands	r3, r2
    6078:	2b00      	cmp	r3, #0
    607a:	d1f9      	bne.n	6070 <hri_eic_wait_for_sync+0xc>
	};
}
    607c:	bf00      	nop
    607e:	370c      	adds	r7, #12
    6080:	46bd      	mov	sp, r7
    6082:	f85d 7b04 	ldr.w	r7, [sp], #4
    6086:	4770      	bx	lr

00006088 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    6088:	b480      	push	{r7}
    608a:	b083      	sub	sp, #12
    608c:	af00      	add	r7, sp, #0
    608e:	6078      	str	r0, [r7, #4]
    6090:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    6092:	687b      	ldr	r3, [r7, #4]
    6094:	685a      	ldr	r2, [r3, #4]
    6096:	683b      	ldr	r3, [r7, #0]
    6098:	4013      	ands	r3, r2
    609a:	2b00      	cmp	r3, #0
    609c:	bf14      	ite	ne
    609e:	2301      	movne	r3, #1
    60a0:	2300      	moveq	r3, #0
    60a2:	b2db      	uxtb	r3, r3
}
    60a4:	4618      	mov	r0, r3
    60a6:	370c      	adds	r7, #12
    60a8:	46bd      	mov	sp, r7
    60aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    60ae:	4770      	bx	lr

000060b0 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    60b0:	b480      	push	{r7}
    60b2:	b083      	sub	sp, #12
    60b4:	af00      	add	r7, sp, #0
    60b6:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    60b8:	687b      	ldr	r3, [r7, #4]
    60ba:	695b      	ldr	r3, [r3, #20]
}
    60bc:	4618      	mov	r0, r3
    60be:	370c      	adds	r7, #12
    60c0:	46bd      	mov	sp, r7
    60c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    60c6:	4770      	bx	lr

000060c8 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    60c8:	b480      	push	{r7}
    60ca:	b083      	sub	sp, #12
    60cc:	af00      	add	r7, sp, #0
    60ce:	6078      	str	r0, [r7, #4]
    60d0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    60d2:	687b      	ldr	r3, [r7, #4]
    60d4:	683a      	ldr	r2, [r7, #0]
    60d6:	615a      	str	r2, [r3, #20]
}
    60d8:	bf00      	nop
    60da:	370c      	adds	r7, #12
    60dc:	46bd      	mov	sp, r7
    60de:	f85d 7b04 	ldr.w	r7, [sp], #4
    60e2:	4770      	bx	lr

000060e4 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    60e4:	b480      	push	{r7}
    60e6:	b083      	sub	sp, #12
    60e8:	af00      	add	r7, sp, #0
    60ea:	6078      	str	r0, [r7, #4]
    60ec:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    60ee:	687b      	ldr	r3, [r7, #4]
    60f0:	683a      	ldr	r2, [r7, #0]
    60f2:	611a      	str	r2, [r3, #16]
}
    60f4:	bf00      	nop
    60f6:	370c      	adds	r7, #12
    60f8:	46bd      	mov	sp, r7
    60fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    60fe:	4770      	bx	lr

00006100 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    6100:	b480      	push	{r7}
    6102:	b083      	sub	sp, #12
    6104:	af00      	add	r7, sp, #0
    6106:	6078      	str	r0, [r7, #4]
    6108:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    610a:	687b      	ldr	r3, [r7, #4]
    610c:	683a      	ldr	r2, [r7, #0]
    610e:	60da      	str	r2, [r3, #12]
}
    6110:	bf00      	nop
    6112:	370c      	adds	r7, #12
    6114:	46bd      	mov	sp, r7
    6116:	f85d 7b04 	ldr.w	r7, [sp], #4
    611a:	4770      	bx	lr

0000611c <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    611c:	b580      	push	{r7, lr}
    611e:	b082      	sub	sp, #8
    6120:	af00      	add	r7, sp, #0
    6122:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    6124:	687b      	ldr	r3, [r7, #4]
    6126:	781b      	ldrb	r3, [r3, #0]
    6128:	b2db      	uxtb	r3, r3
    612a:	f043 0302 	orr.w	r3, r3, #2
    612e:	b2da      	uxtb	r2, r3
    6130:	687b      	ldr	r3, [r7, #4]
    6132:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    6134:	2103      	movs	r1, #3
    6136:	6878      	ldr	r0, [r7, #4]
    6138:	4b02      	ldr	r3, [pc, #8]	; (6144 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    613a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    613c:	bf00      	nop
    613e:	3708      	adds	r7, #8
    6140:	46bd      	mov	sp, r7
    6142:	bd80      	pop	{r7, pc}
    6144:	00006065 	.word	0x00006065

00006148 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6148:	b580      	push	{r7, lr}
    614a:	b082      	sub	sp, #8
    614c:	af00      	add	r7, sp, #0
    614e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    6150:	687b      	ldr	r3, [r7, #4]
    6152:	781b      	ldrb	r3, [r3, #0]
    6154:	b2db      	uxtb	r3, r3
    6156:	f023 0302 	bic.w	r3, r3, #2
    615a:	b2da      	uxtb	r2, r3
    615c:	687b      	ldr	r3, [r7, #4]
    615e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    6160:	2103      	movs	r1, #3
    6162:	6878      	ldr	r0, [r7, #4]
    6164:	4b02      	ldr	r3, [pc, #8]	; (6170 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    6166:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6168:	bf00      	nop
    616a:	3708      	adds	r7, #8
    616c:	46bd      	mov	sp, r7
    616e:	bd80      	pop	{r7, pc}
    6170:	00006065 	.word	0x00006065

00006174 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    6174:	b580      	push	{r7, lr}
    6176:	b084      	sub	sp, #16
    6178:	af00      	add	r7, sp, #0
    617a:	6078      	str	r0, [r7, #4]
    617c:	460b      	mov	r3, r1
    617e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    6180:	687b      	ldr	r3, [r7, #4]
    6182:	781b      	ldrb	r3, [r3, #0]
    6184:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    6186:	7bfb      	ldrb	r3, [r7, #15]
    6188:	f023 0310 	bic.w	r3, r3, #16
    618c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    618e:	78fb      	ldrb	r3, [r7, #3]
    6190:	011b      	lsls	r3, r3, #4
    6192:	b25a      	sxtb	r2, r3
    6194:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6198:	4313      	orrs	r3, r2
    619a:	b25b      	sxtb	r3, r3
    619c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    619e:	687b      	ldr	r3, [r7, #4]
    61a0:	7bfa      	ldrb	r2, [r7, #15]
    61a2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    61a4:	2103      	movs	r1, #3
    61a6:	6878      	ldr	r0, [r7, #4]
    61a8:	4b02      	ldr	r3, [pc, #8]	; (61b4 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    61aa:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    61ac:	bf00      	nop
    61ae:	3710      	adds	r7, #16
    61b0:	46bd      	mov	sp, r7
    61b2:	bd80      	pop	{r7, pc}
    61b4:	00006065 	.word	0x00006065

000061b8 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    61b8:	b580      	push	{r7, lr}
    61ba:	b084      	sub	sp, #16
    61bc:	af00      	add	r7, sp, #0
    61be:	6078      	str	r0, [r7, #4]
    61c0:	460b      	mov	r3, r1
    61c2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    61c4:	2103      	movs	r1, #3
    61c6:	6878      	ldr	r0, [r7, #4]
    61c8:	4b06      	ldr	r3, [pc, #24]	; (61e4 <hri_eic_get_CTRLA_reg+0x2c>)
    61ca:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    61cc:	687b      	ldr	r3, [r7, #4]
    61ce:	781b      	ldrb	r3, [r3, #0]
    61d0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    61d2:	7bfa      	ldrb	r2, [r7, #15]
    61d4:	78fb      	ldrb	r3, [r7, #3]
    61d6:	4013      	ands	r3, r2
    61d8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    61da:	7bfb      	ldrb	r3, [r7, #15]
}
    61dc:	4618      	mov	r0, r3
    61de:	3710      	adds	r7, #16
    61e0:	46bd      	mov	sp, r7
    61e2:	bd80      	pop	{r7, pc}
    61e4:	00006065 	.word	0x00006065

000061e8 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    61e8:	b580      	push	{r7, lr}
    61ea:	b082      	sub	sp, #8
    61ec:	af00      	add	r7, sp, #0
    61ee:	6078      	str	r0, [r7, #4]
    61f0:	460b      	mov	r3, r1
    61f2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    61f4:	687b      	ldr	r3, [r7, #4]
    61f6:	78fa      	ldrb	r2, [r7, #3]
    61f8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    61fa:	2103      	movs	r1, #3
    61fc:	6878      	ldr	r0, [r7, #4]
    61fe:	4b03      	ldr	r3, [pc, #12]	; (620c <hri_eic_write_CTRLA_reg+0x24>)
    6200:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    6202:	bf00      	nop
    6204:	3708      	adds	r7, #8
    6206:	46bd      	mov	sp, r7
    6208:	bd80      	pop	{r7, pc}
    620a:	bf00      	nop
    620c:	00006065 	.word	0x00006065

00006210 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    6210:	b480      	push	{r7}
    6212:	b083      	sub	sp, #12
    6214:	af00      	add	r7, sp, #0
    6216:	6078      	str	r0, [r7, #4]
    6218:	460b      	mov	r3, r1
    621a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    621c:	687b      	ldr	r3, [r7, #4]
    621e:	78fa      	ldrb	r2, [r7, #3]
    6220:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6222:	bf00      	nop
    6224:	370c      	adds	r7, #12
    6226:	46bd      	mov	sp, r7
    6228:	f85d 7b04 	ldr.w	r7, [sp], #4
    622c:	4770      	bx	lr

0000622e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    622e:	b480      	push	{r7}
    6230:	b083      	sub	sp, #12
    6232:	af00      	add	r7, sp, #0
    6234:	6078      	str	r0, [r7, #4]
    6236:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    6238:	687b      	ldr	r3, [r7, #4]
    623a:	683a      	ldr	r2, [r7, #0]
    623c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    623e:	bf00      	nop
    6240:	370c      	adds	r7, #12
    6242:	46bd      	mov	sp, r7
    6244:	f85d 7b04 	ldr.w	r7, [sp], #4
    6248:	4770      	bx	lr

0000624a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    624a:	b480      	push	{r7}
    624c:	b083      	sub	sp, #12
    624e:	af00      	add	r7, sp, #0
    6250:	6078      	str	r0, [r7, #4]
    6252:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    6254:	687b      	ldr	r3, [r7, #4]
    6256:	683a      	ldr	r2, [r7, #0]
    6258:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    625a:	bf00      	nop
    625c:	370c      	adds	r7, #12
    625e:	46bd      	mov	sp, r7
    6260:	f85d 7b04 	ldr.w	r7, [sp], #4
    6264:	4770      	bx	lr

00006266 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    6266:	b480      	push	{r7}
    6268:	b085      	sub	sp, #20
    626a:	af00      	add	r7, sp, #0
    626c:	60f8      	str	r0, [r7, #12]
    626e:	460b      	mov	r3, r1
    6270:	607a      	str	r2, [r7, #4]
    6272:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    6274:	7afb      	ldrb	r3, [r7, #11]
    6276:	68fa      	ldr	r2, [r7, #12]
    6278:	3306      	adds	r3, #6
    627a:	009b      	lsls	r3, r3, #2
    627c:	4413      	add	r3, r2
    627e:	687a      	ldr	r2, [r7, #4]
    6280:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    6282:	bf00      	nop
    6284:	3714      	adds	r7, #20
    6286:	46bd      	mov	sp, r7
    6288:	f85d 7b04 	ldr.w	r7, [sp], #4
    628c:	4770      	bx	lr

0000628e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    628e:	b480      	push	{r7}
    6290:	b083      	sub	sp, #12
    6292:	af00      	add	r7, sp, #0
    6294:	6078      	str	r0, [r7, #4]
    6296:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    6298:	687b      	ldr	r3, [r7, #4]
    629a:	683a      	ldr	r2, [r7, #0]
    629c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    629e:	bf00      	nop
    62a0:	370c      	adds	r7, #12
    62a2:	46bd      	mov	sp, r7
    62a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    62a8:	4770      	bx	lr

000062aa <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    62aa:	b480      	push	{r7}
    62ac:	b083      	sub	sp, #12
    62ae:	af00      	add	r7, sp, #0
    62b0:	6078      	str	r0, [r7, #4]
    62b2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    62b4:	687b      	ldr	r3, [r7, #4]
    62b6:	683a      	ldr	r2, [r7, #0]
    62b8:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    62ba:	bf00      	nop
    62bc:	370c      	adds	r7, #12
    62be:	46bd      	mov	sp, r7
    62c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    62c4:	4770      	bx	lr
	...

000062c8 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    62c8:	b580      	push	{r7, lr}
    62ca:	b082      	sub	sp, #8
    62cc:	af00      	add	r7, sp, #0
    62ce:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    62d0:	2101      	movs	r1, #1
    62d2:	4854      	ldr	r0, [pc, #336]	; (6424 <_ext_irq_init+0x15c>)
    62d4:	4b54      	ldr	r3, [pc, #336]	; (6428 <_ext_irq_init+0x160>)
    62d6:	4798      	blx	r3
    62d8:	4603      	mov	r3, r0
    62da:	f083 0301 	eor.w	r3, r3, #1
    62de:	b2db      	uxtb	r3, r3
    62e0:	2b00      	cmp	r3, #0
    62e2:	d011      	beq.n	6308 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    62e4:	2102      	movs	r1, #2
    62e6:	484f      	ldr	r0, [pc, #316]	; (6424 <_ext_irq_init+0x15c>)
    62e8:	4b50      	ldr	r3, [pc, #320]	; (642c <_ext_irq_init+0x164>)
    62ea:	4798      	blx	r3
    62ec:	4603      	mov	r3, r0
    62ee:	2b00      	cmp	r3, #0
    62f0:	d006      	beq.n	6300 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    62f2:	484c      	ldr	r0, [pc, #304]	; (6424 <_ext_irq_init+0x15c>)
    62f4:	4b4e      	ldr	r3, [pc, #312]	; (6430 <_ext_irq_init+0x168>)
    62f6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    62f8:	2102      	movs	r1, #2
    62fa:	484a      	ldr	r0, [pc, #296]	; (6424 <_ext_irq_init+0x15c>)
    62fc:	4b4d      	ldr	r3, [pc, #308]	; (6434 <_ext_irq_init+0x16c>)
    62fe:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    6300:	2101      	movs	r1, #1
    6302:	4848      	ldr	r0, [pc, #288]	; (6424 <_ext_irq_init+0x15c>)
    6304:	4b4c      	ldr	r3, [pc, #304]	; (6438 <_ext_irq_init+0x170>)
    6306:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    6308:	2101      	movs	r1, #1
    630a:	4846      	ldr	r0, [pc, #280]	; (6424 <_ext_irq_init+0x15c>)
    630c:	4b49      	ldr	r3, [pc, #292]	; (6434 <_ext_irq_init+0x16c>)
    630e:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    6310:	2100      	movs	r1, #0
    6312:	4844      	ldr	r0, [pc, #272]	; (6424 <_ext_irq_init+0x15c>)
    6314:	4b49      	ldr	r3, [pc, #292]	; (643c <_ext_irq_init+0x174>)
    6316:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    6318:	2100      	movs	r1, #0
    631a:	4842      	ldr	r0, [pc, #264]	; (6424 <_ext_irq_init+0x15c>)
    631c:	4b48      	ldr	r3, [pc, #288]	; (6440 <_ext_irq_init+0x178>)
    631e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    6320:	2100      	movs	r1, #0
    6322:	4840      	ldr	r0, [pc, #256]	; (6424 <_ext_irq_init+0x15c>)
    6324:	4b47      	ldr	r3, [pc, #284]	; (6444 <_ext_irq_init+0x17c>)
    6326:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    6328:	f240 71bb 	movw	r1, #1979	; 0x7bb
    632c:	483d      	ldr	r0, [pc, #244]	; (6424 <_ext_irq_init+0x15c>)
    632e:	4b46      	ldr	r3, [pc, #280]	; (6448 <_ext_irq_init+0x180>)
    6330:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    6332:	f240 713b 	movw	r1, #1851	; 0x73b
    6336:	483b      	ldr	r0, [pc, #236]	; (6424 <_ext_irq_init+0x15c>)
    6338:	4b44      	ldr	r3, [pc, #272]	; (644c <_ext_irq_init+0x184>)
    633a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    633c:	2100      	movs	r1, #0
    633e:	4839      	ldr	r0, [pc, #228]	; (6424 <_ext_irq_init+0x15c>)
    6340:	4b43      	ldr	r3, [pc, #268]	; (6450 <_ext_irq_init+0x188>)
    6342:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    6344:	4a43      	ldr	r2, [pc, #268]	; (6454 <_ext_irq_init+0x18c>)
    6346:	2100      	movs	r1, #0
    6348:	4836      	ldr	r0, [pc, #216]	; (6424 <_ext_irq_init+0x15c>)
    634a:	4b43      	ldr	r3, [pc, #268]	; (6458 <_ext_irq_init+0x190>)
    634c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    634e:	2211      	movs	r2, #17
    6350:	2101      	movs	r1, #1
    6352:	4834      	ldr	r0, [pc, #208]	; (6424 <_ext_irq_init+0x15c>)
    6354:	4b40      	ldr	r3, [pc, #256]	; (6458 <_ext_irq_init+0x190>)
    6356:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    6358:	4832      	ldr	r0, [pc, #200]	; (6424 <_ext_irq_init+0x15c>)
    635a:	4b40      	ldr	r3, [pc, #256]	; (645c <_ext_irq_init+0x194>)
    635c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    635e:	200c      	movs	r0, #12
    6360:	4b3f      	ldr	r3, [pc, #252]	; (6460 <_ext_irq_init+0x198>)
    6362:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    6364:	200c      	movs	r0, #12
    6366:	4b3f      	ldr	r3, [pc, #252]	; (6464 <_ext_irq_init+0x19c>)
    6368:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    636a:	200c      	movs	r0, #12
    636c:	4b3e      	ldr	r3, [pc, #248]	; (6468 <_ext_irq_init+0x1a0>)
    636e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    6370:	200d      	movs	r0, #13
    6372:	4b3b      	ldr	r3, [pc, #236]	; (6460 <_ext_irq_init+0x198>)
    6374:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    6376:	200d      	movs	r0, #13
    6378:	4b3a      	ldr	r3, [pc, #232]	; (6464 <_ext_irq_init+0x19c>)
    637a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    637c:	200d      	movs	r0, #13
    637e:	4b3a      	ldr	r3, [pc, #232]	; (6468 <_ext_irq_init+0x1a0>)
    6380:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    6382:	200f      	movs	r0, #15
    6384:	4b36      	ldr	r3, [pc, #216]	; (6460 <_ext_irq_init+0x198>)
    6386:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    6388:	200f      	movs	r0, #15
    638a:	4b36      	ldr	r3, [pc, #216]	; (6464 <_ext_irq_init+0x19c>)
    638c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    638e:	200f      	movs	r0, #15
    6390:	4b35      	ldr	r3, [pc, #212]	; (6468 <_ext_irq_init+0x1a0>)
    6392:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    6394:	2010      	movs	r0, #16
    6396:	4b32      	ldr	r3, [pc, #200]	; (6460 <_ext_irq_init+0x198>)
    6398:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    639a:	2010      	movs	r0, #16
    639c:	4b31      	ldr	r3, [pc, #196]	; (6464 <_ext_irq_init+0x19c>)
    639e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    63a0:	2010      	movs	r0, #16
    63a2:	4b31      	ldr	r3, [pc, #196]	; (6468 <_ext_irq_init+0x1a0>)
    63a4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    63a6:	2011      	movs	r0, #17
    63a8:	4b2d      	ldr	r3, [pc, #180]	; (6460 <_ext_irq_init+0x198>)
    63aa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    63ac:	2011      	movs	r0, #17
    63ae:	4b2d      	ldr	r3, [pc, #180]	; (6464 <_ext_irq_init+0x19c>)
    63b0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    63b2:	2011      	movs	r0, #17
    63b4:	4b2c      	ldr	r3, [pc, #176]	; (6468 <_ext_irq_init+0x1a0>)
    63b6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    63b8:	2012      	movs	r0, #18
    63ba:	4b29      	ldr	r3, [pc, #164]	; (6460 <_ext_irq_init+0x198>)
    63bc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    63be:	2012      	movs	r0, #18
    63c0:	4b28      	ldr	r3, [pc, #160]	; (6464 <_ext_irq_init+0x19c>)
    63c2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    63c4:	2012      	movs	r0, #18
    63c6:	4b28      	ldr	r3, [pc, #160]	; (6468 <_ext_irq_init+0x1a0>)
    63c8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    63ca:	2013      	movs	r0, #19
    63cc:	4b24      	ldr	r3, [pc, #144]	; (6460 <_ext_irq_init+0x198>)
    63ce:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    63d0:	2013      	movs	r0, #19
    63d2:	4b24      	ldr	r3, [pc, #144]	; (6464 <_ext_irq_init+0x19c>)
    63d4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    63d6:	2013      	movs	r0, #19
    63d8:	4b23      	ldr	r3, [pc, #140]	; (6468 <_ext_irq_init+0x1a0>)
    63da:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    63dc:	2014      	movs	r0, #20
    63de:	4b20      	ldr	r3, [pc, #128]	; (6460 <_ext_irq_init+0x198>)
    63e0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    63e2:	2014      	movs	r0, #20
    63e4:	4b1f      	ldr	r3, [pc, #124]	; (6464 <_ext_irq_init+0x19c>)
    63e6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    63e8:	2014      	movs	r0, #20
    63ea:	4b1f      	ldr	r3, [pc, #124]	; (6468 <_ext_irq_init+0x1a0>)
    63ec:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    63ee:	2015      	movs	r0, #21
    63f0:	4b1b      	ldr	r3, [pc, #108]	; (6460 <_ext_irq_init+0x198>)
    63f2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    63f4:	2015      	movs	r0, #21
    63f6:	4b1b      	ldr	r3, [pc, #108]	; (6464 <_ext_irq_init+0x19c>)
    63f8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    63fa:	2015      	movs	r0, #21
    63fc:	4b1a      	ldr	r3, [pc, #104]	; (6468 <_ext_irq_init+0x1a0>)
    63fe:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_10_IRQn);
    6400:	2016      	movs	r0, #22
    6402:	4b17      	ldr	r3, [pc, #92]	; (6460 <_ext_irq_init+0x198>)
    6404:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_10_IRQn);
    6406:	2016      	movs	r0, #22
    6408:	4b16      	ldr	r3, [pc, #88]	; (6464 <_ext_irq_init+0x19c>)
    640a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_10_IRQn);
    640c:	2016      	movs	r0, #22
    640e:	4b16      	ldr	r3, [pc, #88]	; (6468 <_ext_irq_init+0x1a0>)
    6410:	4798      	blx	r3

	callback = cb;
    6412:	4a16      	ldr	r2, [pc, #88]	; (646c <_ext_irq_init+0x1a4>)
    6414:	687b      	ldr	r3, [r7, #4]
    6416:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    6418:	2300      	movs	r3, #0
}
    641a:	4618      	mov	r0, r3
    641c:	3708      	adds	r7, #8
    641e:	46bd      	mov	sp, r7
    6420:	bd80      	pop	{r7, pc}
    6422:	bf00      	nop
    6424:	40002800 	.word	0x40002800
    6428:	00006089 	.word	0x00006089
    642c:	000061b9 	.word	0x000061b9
    6430:	00006149 	.word	0x00006149
    6434:	00006065 	.word	0x00006065
    6438:	000061e9 	.word	0x000061e9
    643c:	00006175 	.word	0x00006175
    6440:	00006211 	.word	0x00006211
    6444:	0000622f 	.word	0x0000622f
    6448:	0000624b 	.word	0x0000624b
    644c:	0000628f 	.word	0x0000628f
    6450:	000062ab 	.word	0x000062ab
    6454:	90991013 	.word	0x90991013
    6458:	00006267 	.word	0x00006267
    645c:	0000611d 	.word	0x0000611d
    6460:	00005fe5 	.word	0x00005fe5
    6464:	00006029 	.word	0x00006029
    6468:	00005fa9 	.word	0x00005fa9
    646c:	20002340 	.word	0x20002340

00006470 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    6470:	b580      	push	{r7, lr}
    6472:	b084      	sub	sp, #16
    6474:	af00      	add	r7, sp, #0
    6476:	6078      	str	r0, [r7, #4]
    6478:	460b      	mov	r3, r1
    647a:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    647c:	23ff      	movs	r3, #255	; 0xff
    647e:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    6480:	2300      	movs	r3, #0
    6482:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    6484:	e010      	b.n	64a8 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    6486:	7bbb      	ldrb	r3, [r7, #14]
    6488:	4a1c      	ldr	r2, [pc, #112]	; (64fc <_ext_irq_enable+0x8c>)
    648a:	00db      	lsls	r3, r3, #3
    648c:	4413      	add	r3, r2
    648e:	685a      	ldr	r2, [r3, #4]
    6490:	687b      	ldr	r3, [r7, #4]
    6492:	429a      	cmp	r2, r3
    6494:	d105      	bne.n	64a2 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    6496:	7bbb      	ldrb	r3, [r7, #14]
    6498:	4a18      	ldr	r2, [pc, #96]	; (64fc <_ext_irq_enable+0x8c>)
    649a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    649e:	73fb      	strb	r3, [r7, #15]
			break;
    64a0:	e005      	b.n	64ae <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    64a2:	7bbb      	ldrb	r3, [r7, #14]
    64a4:	3301      	adds	r3, #1
    64a6:	73bb      	strb	r3, [r7, #14]
    64a8:	7bbb      	ldrb	r3, [r7, #14]
    64aa:	2b09      	cmp	r3, #9
    64ac:	d9eb      	bls.n	6486 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    64ae:	7bfb      	ldrb	r3, [r7, #15]
    64b0:	2bff      	cmp	r3, #255	; 0xff
    64b2:	d102      	bne.n	64ba <_ext_irq_enable+0x4a>
		return -1;
    64b4:	f04f 33ff 	mov.w	r3, #4294967295
    64b8:	e01c      	b.n	64f4 <_ext_irq_enable+0x84>
	}

	if (enable) {
    64ba:	78fb      	ldrb	r3, [r7, #3]
    64bc:	2b00      	cmp	r3, #0
    64be:	d008      	beq.n	64d2 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    64c0:	7bfb      	ldrb	r3, [r7, #15]
    64c2:	2201      	movs	r2, #1
    64c4:	fa02 f303 	lsl.w	r3, r2, r3
    64c8:	4619      	mov	r1, r3
    64ca:	480d      	ldr	r0, [pc, #52]	; (6500 <_ext_irq_enable+0x90>)
    64cc:	4b0d      	ldr	r3, [pc, #52]	; (6504 <_ext_irq_enable+0x94>)
    64ce:	4798      	blx	r3
    64d0:	e00f      	b.n	64f2 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    64d2:	7bfb      	ldrb	r3, [r7, #15]
    64d4:	2201      	movs	r2, #1
    64d6:	fa02 f303 	lsl.w	r3, r2, r3
    64da:	4619      	mov	r1, r3
    64dc:	4808      	ldr	r0, [pc, #32]	; (6500 <_ext_irq_enable+0x90>)
    64de:	4b0a      	ldr	r3, [pc, #40]	; (6508 <_ext_irq_enable+0x98>)
    64e0:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    64e2:	7bfb      	ldrb	r3, [r7, #15]
    64e4:	2201      	movs	r2, #1
    64e6:	fa02 f303 	lsl.w	r3, r2, r3
    64ea:	4619      	mov	r1, r3
    64ec:	4804      	ldr	r0, [pc, #16]	; (6500 <_ext_irq_enable+0x90>)
    64ee:	4b07      	ldr	r3, [pc, #28]	; (650c <_ext_irq_enable+0x9c>)
    64f0:	4798      	blx	r3
	}

	return ERR_NONE;
    64f2:	2300      	movs	r3, #0
}
    64f4:	4618      	mov	r0, r3
    64f6:	3710      	adds	r7, #16
    64f8:	46bd      	mov	sp, r7
    64fa:	bd80      	pop	{r7, pc}
    64fc:	0001b24c 	.word	0x0001b24c
    6500:	40002800 	.word	0x40002800
    6504:	000060e5 	.word	0x000060e5
    6508:	00006101 	.word	0x00006101
    650c:	000060c9 	.word	0x000060c9

00006510 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    6510:	b580      	push	{r7, lr}
    6512:	b084      	sub	sp, #16
    6514:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    6516:	4841      	ldr	r0, [pc, #260]	; (661c <_ext_irq_handler+0x10c>)
    6518:	4b41      	ldr	r3, [pc, #260]	; (6620 <_ext_irq_handler+0x110>)
    651a:	4798      	blx	r3
    651c:	4603      	mov	r3, r0
    651e:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    6520:	f04f 33ff 	mov.w	r3, #4294967295
    6524:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    6526:	683b      	ldr	r3, [r7, #0]
    6528:	4619      	mov	r1, r3
    652a:	483c      	ldr	r0, [pc, #240]	; (661c <_ext_irq_handler+0x10c>)
    652c:	4b3d      	ldr	r3, [pc, #244]	; (6624 <_ext_irq_handler+0x114>)
    652e:	4798      	blx	r3

	ASSERT(callback);
    6530:	4b3d      	ldr	r3, [pc, #244]	; (6628 <_ext_irq_handler+0x118>)
    6532:	681b      	ldr	r3, [r3, #0]
    6534:	2b00      	cmp	r3, #0
    6536:	bf14      	ite	ne
    6538:	2301      	movne	r3, #1
    653a:	2300      	moveq	r3, #0
    653c:	b2db      	uxtb	r3, r3
    653e:	f44f 7286 	mov.w	r2, #268	; 0x10c
    6542:	493a      	ldr	r1, [pc, #232]	; (662c <_ext_irq_handler+0x11c>)
    6544:	4618      	mov	r0, r3
    6546:	4b3a      	ldr	r3, [pc, #232]	; (6630 <_ext_irq_handler+0x120>)
    6548:	4798      	blx	r3

	while (flags) {
    654a:	e060      	b.n	660e <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    654c:	683b      	ldr	r3, [r7, #0]
    654e:	4618      	mov	r0, r3
    6550:	4b38      	ldr	r3, [pc, #224]	; (6634 <_ext_irq_handler+0x124>)
    6552:	4798      	blx	r3
    6554:	4603      	mov	r3, r0
    6556:	b2db      	uxtb	r3, r3
    6558:	3b01      	subs	r3, #1
    655a:	b2db      	uxtb	r3, r3
    655c:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    655e:	e047      	b.n	65f0 <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    6560:	2300      	movs	r3, #0
    6562:	71fb      	strb	r3, [r7, #7]
    6564:	230a      	movs	r3, #10
    6566:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    6568:	e024      	b.n	65b4 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    656a:	79ba      	ldrb	r2, [r7, #6]
    656c:	79fb      	ldrb	r3, [r7, #7]
    656e:	4413      	add	r3, r2
    6570:	105b      	asrs	r3, r3, #1
    6572:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    6574:	797b      	ldrb	r3, [r7, #5]
    6576:	4a30      	ldr	r2, [pc, #192]	; (6638 <_ext_irq_handler+0x128>)
    6578:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    657c:	461a      	mov	r2, r3
    657e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6582:	429a      	cmp	r2, r3
    6584:	d106      	bne.n	6594 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    6586:	797b      	ldrb	r3, [r7, #5]
    6588:	4a2b      	ldr	r2, [pc, #172]	; (6638 <_ext_irq_handler+0x128>)
    658a:	00db      	lsls	r3, r3, #3
    658c:	4413      	add	r3, r2
    658e:	685b      	ldr	r3, [r3, #4]
    6590:	60bb      	str	r3, [r7, #8]
					break;
    6592:	e013      	b.n	65bc <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    6594:	797b      	ldrb	r3, [r7, #5]
    6596:	4a28      	ldr	r2, [pc, #160]	; (6638 <_ext_irq_handler+0x128>)
    6598:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    659c:	461a      	mov	r2, r3
    659e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    65a2:	429a      	cmp	r2, r3
    65a4:	da03      	bge.n	65ae <_ext_irq_handler+0x9e>
					lower = middle + 1;
    65a6:	797b      	ldrb	r3, [r7, #5]
    65a8:	3301      	adds	r3, #1
    65aa:	71fb      	strb	r3, [r7, #7]
    65ac:	e002      	b.n	65b4 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    65ae:	797b      	ldrb	r3, [r7, #5]
    65b0:	3b01      	subs	r3, #1
    65b2:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    65b4:	79ba      	ldrb	r2, [r7, #6]
    65b6:	79fb      	ldrb	r3, [r7, #7]
    65b8:	429a      	cmp	r2, r3
    65ba:	d2d6      	bcs.n	656a <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    65bc:	68bb      	ldr	r3, [r7, #8]
    65be:	f1b3 3fff 	cmp.w	r3, #4294967295
    65c2:	d003      	beq.n	65cc <_ext_irq_handler+0xbc>
				callback(pin);
    65c4:	4b18      	ldr	r3, [pc, #96]	; (6628 <_ext_irq_handler+0x118>)
    65c6:	681b      	ldr	r3, [r3, #0]
    65c8:	68b8      	ldr	r0, [r7, #8]
    65ca:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    65cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    65d0:	2201      	movs	r2, #1
    65d2:	fa02 f303 	lsl.w	r3, r2, r3
    65d6:	43da      	mvns	r2, r3
    65d8:	683b      	ldr	r3, [r7, #0]
    65da:	4013      	ands	r3, r2
    65dc:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    65de:	683b      	ldr	r3, [r7, #0]
    65e0:	4618      	mov	r0, r3
    65e2:	4b14      	ldr	r3, [pc, #80]	; (6634 <_ext_irq_handler+0x124>)
    65e4:	4798      	blx	r3
    65e6:	4603      	mov	r3, r0
    65e8:	b2db      	uxtb	r3, r3
    65ea:	3b01      	subs	r3, #1
    65ec:	b2db      	uxtb	r3, r3
    65ee:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    65f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    65f4:	f1b3 3fff 	cmp.w	r3, #4294967295
    65f8:	d1b2      	bne.n	6560 <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    65fa:	4808      	ldr	r0, [pc, #32]	; (661c <_ext_irq_handler+0x10c>)
    65fc:	4b08      	ldr	r3, [pc, #32]	; (6620 <_ext_irq_handler+0x110>)
    65fe:	4798      	blx	r3
    6600:	4603      	mov	r3, r0
    6602:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    6604:	683b      	ldr	r3, [r7, #0]
    6606:	4619      	mov	r1, r3
    6608:	4804      	ldr	r0, [pc, #16]	; (661c <_ext_irq_handler+0x10c>)
    660a:	4b06      	ldr	r3, [pc, #24]	; (6624 <_ext_irq_handler+0x114>)
    660c:	4798      	blx	r3
	while (flags) {
    660e:	683b      	ldr	r3, [r7, #0]
    6610:	2b00      	cmp	r3, #0
    6612:	d19b      	bne.n	654c <_ext_irq_handler+0x3c>
	}
}
    6614:	bf00      	nop
    6616:	3710      	adds	r7, #16
    6618:	46bd      	mov	sp, r7
    661a:	bd80      	pop	{r7, pc}
    661c:	40002800 	.word	0x40002800
    6620:	000060b1 	.word	0x000060b1
    6624:	000060c9 	.word	0x000060c9
    6628:	20002340 	.word	0x20002340
    662c:	0001b29c 	.word	0x0001b29c
    6630:	00004cdd 	.word	0x00004cdd
    6634:	0001ab25 	.word	0x0001ab25
    6638:	0001b24c 	.word	0x0001b24c

0000663c <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    663c:	b580      	push	{r7, lr}
    663e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6640:	4b01      	ldr	r3, [pc, #4]	; (6648 <EIC_0_Handler+0xc>)
    6642:	4798      	blx	r3
} /**
    6644:	bf00      	nop
    6646:	bd80      	pop	{r7, pc}
    6648:	00006511 	.word	0x00006511

0000664c <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    664c:	b580      	push	{r7, lr}
    664e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6650:	4b01      	ldr	r3, [pc, #4]	; (6658 <EIC_1_Handler+0xc>)
    6652:	4798      	blx	r3
} /**
    6654:	bf00      	nop
    6656:	bd80      	pop	{r7, pc}
    6658:	00006511 	.word	0x00006511

0000665c <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    665c:	b580      	push	{r7, lr}
    665e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6660:	4b01      	ldr	r3, [pc, #4]	; (6668 <EIC_3_Handler+0xc>)
    6662:	4798      	blx	r3
} /**
    6664:	bf00      	nop
    6666:	bd80      	pop	{r7, pc}
    6668:	00006511 	.word	0x00006511

0000666c <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    666c:	b580      	push	{r7, lr}
    666e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6670:	4b01      	ldr	r3, [pc, #4]	; (6678 <EIC_4_Handler+0xc>)
    6672:	4798      	blx	r3
} /**
    6674:	bf00      	nop
    6676:	bd80      	pop	{r7, pc}
    6678:	00006511 	.word	0x00006511

0000667c <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    667c:	b580      	push	{r7, lr}
    667e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6680:	4b01      	ldr	r3, [pc, #4]	; (6688 <EIC_5_Handler+0xc>)
    6682:	4798      	blx	r3
} /**
    6684:	bf00      	nop
    6686:	bd80      	pop	{r7, pc}
    6688:	00006511 	.word	0x00006511

0000668c <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    668c:	b580      	push	{r7, lr}
    668e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    6690:	4b01      	ldr	r3, [pc, #4]	; (6698 <EIC_6_Handler+0xc>)
    6692:	4798      	blx	r3
} /**
    6694:	bf00      	nop
    6696:	bd80      	pop	{r7, pc}
    6698:	00006511 	.word	0x00006511

0000669c <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    669c:	b580      	push	{r7, lr}
    669e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    66a0:	4b01      	ldr	r3, [pc, #4]	; (66a8 <EIC_7_Handler+0xc>)
    66a2:	4798      	blx	r3
} /**
    66a4:	bf00      	nop
    66a6:	bd80      	pop	{r7, pc}
    66a8:	00006511 	.word	0x00006511

000066ac <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    66ac:	b580      	push	{r7, lr}
    66ae:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    66b0:	4b01      	ldr	r3, [pc, #4]	; (66b8 <EIC_8_Handler+0xc>)
    66b2:	4798      	blx	r3
} /**
    66b4:	bf00      	nop
    66b6:	bd80      	pop	{r7, pc}
    66b8:	00006511 	.word	0x00006511

000066bc <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    66bc:	b580      	push	{r7, lr}
    66be:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    66c0:	4b01      	ldr	r3, [pc, #4]	; (66c8 <EIC_9_Handler+0xc>)
    66c2:	4798      	blx	r3
} /**
    66c4:	bf00      	nop
    66c6:	bd80      	pop	{r7, pc}
    66c8:	00006511 	.word	0x00006511

000066cc <EIC_10_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_10_Handler(void)
{
    66cc:	b580      	push	{r7, lr}
    66ce:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    66d0:	4b01      	ldr	r3, [pc, #4]	; (66d8 <EIC_10_Handler+0xc>)
    66d2:	4798      	blx	r3
}
    66d4:	bf00      	nop
    66d6:	bd80      	pop	{r7, pc}
    66d8:	00006511 	.word	0x00006511

000066dc <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    66dc:	b480      	push	{r7}
    66de:	b085      	sub	sp, #20
    66e0:	af00      	add	r7, sp, #0
    66e2:	60f8      	str	r0, [r7, #12]
    66e4:	460b      	mov	r3, r1
    66e6:	607a      	str	r2, [r7, #4]
    66e8:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    66ea:	7afa      	ldrb	r2, [r7, #11]
    66ec:	68fb      	ldr	r3, [r7, #12]
    66ee:	3248      	adds	r2, #72	; 0x48
    66f0:	6879      	ldr	r1, [r7, #4]
    66f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    66f6:	bf00      	nop
    66f8:	3714      	adds	r7, #20
    66fa:	46bd      	mov	sp, r7
    66fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    6700:	4770      	bx	lr

00006702 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    6702:	b480      	push	{r7}
    6704:	b083      	sub	sp, #12
    6706:	af00      	add	r7, sp, #0
    6708:	6078      	str	r0, [r7, #4]
    670a:	460b      	mov	r3, r1
    670c:	70fb      	strb	r3, [r7, #3]
    670e:	4613      	mov	r3, r2
    6710:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    6712:	78fb      	ldrb	r3, [r7, #3]
    6714:	687a      	ldr	r2, [r7, #4]
    6716:	3304      	adds	r3, #4
    6718:	00db      	lsls	r3, r3, #3
    671a:	4413      	add	r3, r2
    671c:	78ba      	ldrb	r2, [r7, #2]
    671e:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    6720:	78fb      	ldrb	r3, [r7, #3]
    6722:	78ba      	ldrb	r2, [r7, #2]
    6724:	43d2      	mvns	r2, r2
    6726:	b2d1      	uxtb	r1, r2
    6728:	687a      	ldr	r2, [r7, #4]
    672a:	3304      	adds	r3, #4
    672c:	00db      	lsls	r3, r3, #3
    672e:	4413      	add	r3, r2
    6730:	460a      	mov	r2, r1
    6732:	711a      	strb	r2, [r3, #4]
}
    6734:	bf00      	nop
    6736:	370c      	adds	r7, #12
    6738:	46bd      	mov	sp, r7
    673a:	f85d 7b04 	ldr.w	r7, [sp], #4
    673e:	4770      	bx	lr

00006740 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    6740:	b480      	push	{r7}
    6742:	b085      	sub	sp, #20
    6744:	af00      	add	r7, sp, #0
    6746:	60f8      	str	r0, [r7, #12]
    6748:	460b      	mov	r3, r1
    674a:	607a      	str	r2, [r7, #4]
    674c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    674e:	7afa      	ldrb	r2, [r7, #11]
    6750:	68fb      	ldr	r3, [r7, #12]
    6752:	3204      	adds	r2, #4
    6754:	6879      	ldr	r1, [r7, #4]
    6756:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    675a:	bf00      	nop
    675c:	3714      	adds	r7, #20
    675e:	46bd      	mov	sp, r7
    6760:	f85d 7b04 	ldr.w	r7, [sp], #4
    6764:	4770      	bx	lr
	...

00006768 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    6768:	b580      	push	{r7, lr}
    676a:	b082      	sub	sp, #8
    676c:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    676e:	2300      	movs	r3, #0
    6770:	71fb      	strb	r3, [r7, #7]
    6772:	e00b      	b.n	678c <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    6774:	79fb      	ldrb	r3, [r7, #7]
    6776:	4a18      	ldr	r2, [pc, #96]	; (67d8 <_event_system_init+0x70>)
    6778:	5cd3      	ldrb	r3, [r2, r3]
    677a:	461a      	mov	r2, r3
    677c:	79fb      	ldrb	r3, [r7, #7]
    677e:	4619      	mov	r1, r3
    6780:	4816      	ldr	r0, [pc, #88]	; (67dc <_event_system_init+0x74>)
    6782:	4b17      	ldr	r3, [pc, #92]	; (67e0 <_event_system_init+0x78>)
    6784:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    6786:	79fb      	ldrb	r3, [r7, #7]
    6788:	3301      	adds	r3, #1
    678a:	71fb      	strb	r3, [r7, #7]
    678c:	79fb      	ldrb	r3, [r7, #7]
    678e:	2b42      	cmp	r3, #66	; 0x42
    6790:	d9f0      	bls.n	6774 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    6792:	2300      	movs	r3, #0
    6794:	71fb      	strb	r3, [r7, #7]
    6796:	e016      	b.n	67c6 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    6798:	79fb      	ldrb	r3, [r7, #7]
    679a:	4a12      	ldr	r2, [pc, #72]	; (67e4 <_event_system_init+0x7c>)
    679c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    67a0:	461a      	mov	r2, r3
    67a2:	79fb      	ldrb	r3, [r7, #7]
    67a4:	4619      	mov	r1, r3
    67a6:	480d      	ldr	r0, [pc, #52]	; (67dc <_event_system_init+0x74>)
    67a8:	4b0f      	ldr	r3, [pc, #60]	; (67e8 <_event_system_init+0x80>)
    67aa:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    67ac:	79fb      	ldrb	r3, [r7, #7]
    67ae:	4a0f      	ldr	r2, [pc, #60]	; (67ec <_event_system_init+0x84>)
    67b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67b4:	b2da      	uxtb	r2, r3
    67b6:	79fb      	ldrb	r3, [r7, #7]
    67b8:	4619      	mov	r1, r3
    67ba:	4808      	ldr	r0, [pc, #32]	; (67dc <_event_system_init+0x74>)
    67bc:	4b0c      	ldr	r3, [pc, #48]	; (67f0 <_event_system_init+0x88>)
    67be:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    67c0:	79fb      	ldrb	r3, [r7, #7]
    67c2:	3301      	adds	r3, #1
    67c4:	71fb      	strb	r3, [r7, #7]
    67c6:	79fb      	ldrb	r3, [r7, #7]
    67c8:	2b1f      	cmp	r3, #31
    67ca:	d9e5      	bls.n	6798 <_event_system_init+0x30>
	}

	return ERR_NONE;
    67cc:	2300      	movs	r3, #0
}
    67ce:	4618      	mov	r0, r3
    67d0:	3708      	adds	r7, #8
    67d2:	46bd      	mov	sp, r7
    67d4:	bd80      	pop	{r7, pc}
    67d6:	bf00      	nop
    67d8:	0001b2b4 	.word	0x0001b2b4
    67dc:	4100e000 	.word	0x4100e000
    67e0:	000066dd 	.word	0x000066dd
    67e4:	0001b2f8 	.word	0x0001b2f8
    67e8:	00006741 	.word	0x00006741
    67ec:	0001b338 	.word	0x0001b338
    67f0:	00006703 	.word	0x00006703

000067f4 <hri_gclk_wait_for_sync>:
{
    67f4:	b480      	push	{r7}
    67f6:	b083      	sub	sp, #12
    67f8:	af00      	add	r7, sp, #0
    67fa:	6078      	str	r0, [r7, #4]
    67fc:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    67fe:	bf00      	nop
    6800:	687b      	ldr	r3, [r7, #4]
    6802:	685a      	ldr	r2, [r3, #4]
    6804:	683b      	ldr	r3, [r7, #0]
    6806:	4013      	ands	r3, r2
    6808:	2b00      	cmp	r3, #0
    680a:	d1f9      	bne.n	6800 <hri_gclk_wait_for_sync+0xc>
}
    680c:	bf00      	nop
    680e:	370c      	adds	r7, #12
    6810:	46bd      	mov	sp, r7
    6812:	f85d 7b04 	ldr.w	r7, [sp], #4
    6816:	4770      	bx	lr

00006818 <hri_gclk_write_GENCTRL_reg>:
{
    6818:	b580      	push	{r7, lr}
    681a:	b084      	sub	sp, #16
    681c:	af00      	add	r7, sp, #0
    681e:	60f8      	str	r0, [r7, #12]
    6820:	460b      	mov	r3, r1
    6822:	607a      	str	r2, [r7, #4]
    6824:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    6826:	7afa      	ldrb	r2, [r7, #11]
    6828:	68fb      	ldr	r3, [r7, #12]
    682a:	3208      	adds	r2, #8
    682c:	6879      	ldr	r1, [r7, #4]
    682e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    6832:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    6836:	68f8      	ldr	r0, [r7, #12]
    6838:	4b02      	ldr	r3, [pc, #8]	; (6844 <hri_gclk_write_GENCTRL_reg+0x2c>)
    683a:	4798      	blx	r3
}
    683c:	bf00      	nop
    683e:	3710      	adds	r7, #16
    6840:	46bd      	mov	sp, r7
    6842:	bd80      	pop	{r7, pc}
    6844:	000067f5 	.word	0x000067f5

00006848 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    6848:	b580      	push	{r7, lr}
    684a:	b082      	sub	sp, #8
    684c:	af00      	add	r7, sp, #0
    684e:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    6850:	687b      	ldr	r3, [r7, #4]
    6852:	f003 0301 	and.w	r3, r3, #1
    6856:	2b00      	cmp	r3, #0
    6858:	d004      	beq.n	6864 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    685a:	4a3b      	ldr	r2, [pc, #236]	; (6948 <_gclk_init_generators_by_fref+0x100>)
    685c:	2100      	movs	r1, #0
    685e:	483b      	ldr	r0, [pc, #236]	; (694c <_gclk_init_generators_by_fref+0x104>)
    6860:	4b3b      	ldr	r3, [pc, #236]	; (6950 <_gclk_init_generators_by_fref+0x108>)
    6862:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    6864:	687b      	ldr	r3, [r7, #4]
    6866:	f003 0302 	and.w	r3, r3, #2
    686a:	2b00      	cmp	r3, #0
    686c:	d004      	beq.n	6878 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    686e:	4a39      	ldr	r2, [pc, #228]	; (6954 <_gclk_init_generators_by_fref+0x10c>)
    6870:	2101      	movs	r1, #1
    6872:	4836      	ldr	r0, [pc, #216]	; (694c <_gclk_init_generators_by_fref+0x104>)
    6874:	4b36      	ldr	r3, [pc, #216]	; (6950 <_gclk_init_generators_by_fref+0x108>)
    6876:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    6878:	687b      	ldr	r3, [r7, #4]
    687a:	f003 0304 	and.w	r3, r3, #4
    687e:	2b00      	cmp	r3, #0
    6880:	d004      	beq.n	688c <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    6882:	4a35      	ldr	r2, [pc, #212]	; (6958 <_gclk_init_generators_by_fref+0x110>)
    6884:	2102      	movs	r1, #2
    6886:	4831      	ldr	r0, [pc, #196]	; (694c <_gclk_init_generators_by_fref+0x104>)
    6888:	4b31      	ldr	r3, [pc, #196]	; (6950 <_gclk_init_generators_by_fref+0x108>)
    688a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    688c:	687b      	ldr	r3, [r7, #4]
    688e:	f003 0308 	and.w	r3, r3, #8
    6892:	2b00      	cmp	r3, #0
    6894:	d004      	beq.n	68a0 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    6896:	4a31      	ldr	r2, [pc, #196]	; (695c <_gclk_init_generators_by_fref+0x114>)
    6898:	2103      	movs	r1, #3
    689a:	482c      	ldr	r0, [pc, #176]	; (694c <_gclk_init_generators_by_fref+0x104>)
    689c:	4b2c      	ldr	r3, [pc, #176]	; (6950 <_gclk_init_generators_by_fref+0x108>)
    689e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    68a0:	687b      	ldr	r3, [r7, #4]
    68a2:	f003 0310 	and.w	r3, r3, #16
    68a6:	2b00      	cmp	r3, #0
    68a8:	d004      	beq.n	68b4 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    68aa:	4a2d      	ldr	r2, [pc, #180]	; (6960 <_gclk_init_generators_by_fref+0x118>)
    68ac:	2104      	movs	r1, #4
    68ae:	4827      	ldr	r0, [pc, #156]	; (694c <_gclk_init_generators_by_fref+0x104>)
    68b0:	4b27      	ldr	r3, [pc, #156]	; (6950 <_gclk_init_generators_by_fref+0x108>)
    68b2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    68b4:	687b      	ldr	r3, [r7, #4]
    68b6:	f003 0320 	and.w	r3, r3, #32
    68ba:	2b00      	cmp	r3, #0
    68bc:	d004      	beq.n	68c8 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    68be:	4a29      	ldr	r2, [pc, #164]	; (6964 <_gclk_init_generators_by_fref+0x11c>)
    68c0:	2105      	movs	r1, #5
    68c2:	4822      	ldr	r0, [pc, #136]	; (694c <_gclk_init_generators_by_fref+0x104>)
    68c4:	4b22      	ldr	r3, [pc, #136]	; (6950 <_gclk_init_generators_by_fref+0x108>)
    68c6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    68c8:	687b      	ldr	r3, [r7, #4]
    68ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
    68ce:	2b00      	cmp	r3, #0
    68d0:	d004      	beq.n	68dc <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    68d2:	4a25      	ldr	r2, [pc, #148]	; (6968 <_gclk_init_generators_by_fref+0x120>)
    68d4:	2106      	movs	r1, #6
    68d6:	481d      	ldr	r0, [pc, #116]	; (694c <_gclk_init_generators_by_fref+0x104>)
    68d8:	4b1d      	ldr	r3, [pc, #116]	; (6950 <_gclk_init_generators_by_fref+0x108>)
    68da:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    68dc:	687b      	ldr	r3, [r7, #4]
    68de:	f003 0380 	and.w	r3, r3, #128	; 0x80
    68e2:	2b00      	cmp	r3, #0
    68e4:	d004      	beq.n	68f0 <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    68e6:	4a21      	ldr	r2, [pc, #132]	; (696c <_gclk_init_generators_by_fref+0x124>)
    68e8:	2107      	movs	r1, #7
    68ea:	4818      	ldr	r0, [pc, #96]	; (694c <_gclk_init_generators_by_fref+0x104>)
    68ec:	4b18      	ldr	r3, [pc, #96]	; (6950 <_gclk_init_generators_by_fref+0x108>)
    68ee:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    68f0:	687b      	ldr	r3, [r7, #4]
    68f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    68f6:	2b00      	cmp	r3, #0
    68f8:	d004      	beq.n	6904 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    68fa:	4a1d      	ldr	r2, [pc, #116]	; (6970 <_gclk_init_generators_by_fref+0x128>)
    68fc:	2108      	movs	r1, #8
    68fe:	4813      	ldr	r0, [pc, #76]	; (694c <_gclk_init_generators_by_fref+0x104>)
    6900:	4b13      	ldr	r3, [pc, #76]	; (6950 <_gclk_init_generators_by_fref+0x108>)
    6902:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    6904:	687b      	ldr	r3, [r7, #4]
    6906:	f403 7300 	and.w	r3, r3, #512	; 0x200
    690a:	2b00      	cmp	r3, #0
    690c:	d004      	beq.n	6918 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    690e:	4a19      	ldr	r2, [pc, #100]	; (6974 <_gclk_init_generators_by_fref+0x12c>)
    6910:	2109      	movs	r1, #9
    6912:	480e      	ldr	r0, [pc, #56]	; (694c <_gclk_init_generators_by_fref+0x104>)
    6914:	4b0e      	ldr	r3, [pc, #56]	; (6950 <_gclk_init_generators_by_fref+0x108>)
    6916:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    6918:	687b      	ldr	r3, [r7, #4]
    691a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    691e:	2b00      	cmp	r3, #0
    6920:	d004      	beq.n	692c <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    6922:	4a15      	ldr	r2, [pc, #84]	; (6978 <_gclk_init_generators_by_fref+0x130>)
    6924:	210a      	movs	r1, #10
    6926:	4809      	ldr	r0, [pc, #36]	; (694c <_gclk_init_generators_by_fref+0x104>)
    6928:	4b09      	ldr	r3, [pc, #36]	; (6950 <_gclk_init_generators_by_fref+0x108>)
    692a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    692c:	687b      	ldr	r3, [r7, #4]
    692e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    6932:	2b00      	cmp	r3, #0
    6934:	d004      	beq.n	6940 <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    6936:	4a11      	ldr	r2, [pc, #68]	; (697c <_gclk_init_generators_by_fref+0x134>)
    6938:	210b      	movs	r1, #11
    693a:	4804      	ldr	r0, [pc, #16]	; (694c <_gclk_init_generators_by_fref+0x104>)
    693c:	4b04      	ldr	r3, [pc, #16]	; (6950 <_gclk_init_generators_by_fref+0x108>)
    693e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    6940:	bf00      	nop
    6942:	3708      	adds	r7, #8
    6944:	46bd      	mov	sp, r7
    6946:	bd80      	pop	{r7, pc}
    6948:	00010107 	.word	0x00010107
    694c:	40001c00 	.word	0x40001c00
    6950:	00006819 	.word	0x00006819
    6954:	00010907 	.word	0x00010907
    6958:	00010906 	.word	0x00010906
    695c:	00020908 	.word	0x00020908
    6960:	00010901 	.word	0x00010901
    6964:	00062901 	.word	0x00062901
    6968:	000c2901 	.word	0x000c2901
    696c:	00082908 	.word	0x00082908
    6970:	00032901 	.word	0x00032901
    6974:	00011908 	.word	0x00011908
    6978:	00010905 	.word	0x00010905
    697c:	00041905 	.word	0x00041905

00006980 <hri_mclk_write_CPUDIV_reg>:
{
    6980:	b480      	push	{r7}
    6982:	b083      	sub	sp, #12
    6984:	af00      	add	r7, sp, #0
    6986:	6078      	str	r0, [r7, #4]
    6988:	460b      	mov	r3, r1
    698a:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    698c:	687b      	ldr	r3, [r7, #4]
    698e:	78fa      	ldrb	r2, [r7, #3]
    6990:	715a      	strb	r2, [r3, #5]
}
    6992:	bf00      	nop
    6994:	370c      	adds	r7, #12
    6996:	46bd      	mov	sp, r7
    6998:	f85d 7b04 	ldr.w	r7, [sp], #4
    699c:	4770      	bx	lr
	...

000069a0 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    69a0:	b580      	push	{r7, lr}
    69a2:	b082      	sub	sp, #8
    69a4:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    69a6:	4b05      	ldr	r3, [pc, #20]	; (69bc <_mclk_init+0x1c>)
    69a8:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    69aa:	2101      	movs	r1, #1
    69ac:	6878      	ldr	r0, [r7, #4]
    69ae:	4b04      	ldr	r3, [pc, #16]	; (69c0 <_mclk_init+0x20>)
    69b0:	4798      	blx	r3
}
    69b2:	bf00      	nop
    69b4:	3708      	adds	r7, #8
    69b6:	46bd      	mov	sp, r7
    69b8:	bd80      	pop	{r7, pc}
    69ba:	bf00      	nop
    69bc:	40000800 	.word	0x40000800
    69c0:	00006981 	.word	0x00006981

000069c4 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    69c4:	b480      	push	{r7}
    69c6:	b083      	sub	sp, #12
    69c8:	af00      	add	r7, sp, #0
    69ca:	6078      	str	r0, [r7, #4]
    69cc:	460b      	mov	r3, r1
    69ce:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    69d0:	687b      	ldr	r3, [r7, #4]
    69d2:	78fa      	ldrb	r2, [r7, #3]
    69d4:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    69d6:	bf00      	nop
    69d8:	370c      	adds	r7, #12
    69da:	46bd      	mov	sp, r7
    69dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    69e0:	4770      	bx	lr

000069e2 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    69e2:	b480      	push	{r7}
    69e4:	b083      	sub	sp, #12
    69e6:	af00      	add	r7, sp, #0
    69e8:	6078      	str	r0, [r7, #4]
    69ea:	460b      	mov	r3, r1
    69ec:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    69ee:	687b      	ldr	r3, [r7, #4]
    69f0:	887a      	ldrh	r2, [r7, #2]
    69f2:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    69f4:	bf00      	nop
    69f6:	370c      	adds	r7, #12
    69f8:	46bd      	mov	sp, r7
    69fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    69fe:	4770      	bx	lr

00006a00 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    6a00:	b480      	push	{r7}
    6a02:	b083      	sub	sp, #12
    6a04:	af00      	add	r7, sp, #0
    6a06:	6078      	str	r0, [r7, #4]
    6a08:	460b      	mov	r3, r1
    6a0a:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    6a0c:	687b      	ldr	r3, [r7, #4]
    6a0e:	78fa      	ldrb	r2, [r7, #3]
    6a10:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6a12:	bf00      	nop
    6a14:	370c      	adds	r7, #12
    6a16:	46bd      	mov	sp, r7
    6a18:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a1c:	4770      	bx	lr

00006a1e <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    6a1e:	b480      	push	{r7}
    6a20:	b083      	sub	sp, #12
    6a22:	af00      	add	r7, sp, #0
    6a24:	6078      	str	r0, [r7, #4]
    6a26:	460b      	mov	r3, r1
    6a28:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    6a2a:	687b      	ldr	r3, [r7, #4]
    6a2c:	78fa      	ldrb	r2, [r7, #3]
    6a2e:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6a30:	bf00      	nop
    6a32:	370c      	adds	r7, #12
    6a34:	46bd      	mov	sp, r7
    6a36:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a3a:	4770      	bx	lr

00006a3c <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    6a3c:	b480      	push	{r7}
    6a3e:	b085      	sub	sp, #20
    6a40:	af00      	add	r7, sp, #0
    6a42:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    6a44:	687b      	ldr	r3, [r7, #4]
    6a46:	69db      	ldr	r3, [r3, #28]
    6a48:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    6a4a:	68fb      	ldr	r3, [r7, #12]
    6a4c:	0a1b      	lsrs	r3, r3, #8
    6a4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a52:	60fb      	str	r3, [r7, #12]
	return tmp;
    6a54:	68fb      	ldr	r3, [r7, #12]
}
    6a56:	4618      	mov	r0, r3
    6a58:	3714      	adds	r7, #20
    6a5a:	46bd      	mov	sp, r7
    6a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a60:	4770      	bx	lr

00006a62 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    6a62:	b480      	push	{r7}
    6a64:	b083      	sub	sp, #12
    6a66:	af00      	add	r7, sp, #0
    6a68:	6078      	str	r0, [r7, #4]
    6a6a:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    6a6c:	687b      	ldr	r3, [r7, #4]
    6a6e:	683a      	ldr	r2, [r7, #0]
    6a70:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    6a72:	bf00      	nop
    6a74:	370c      	adds	r7, #12
    6a76:	46bd      	mov	sp, r7
    6a78:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a7c:	4770      	bx	lr
	...

00006a80 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    6a80:	b580      	push	{r7, lr}
    6a82:	b082      	sub	sp, #8
    6a84:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    6a86:	4b13      	ldr	r3, [pc, #76]	; (6ad4 <_osc32kctrl_init_sources+0x54>)
    6a88:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    6a8a:	2300      	movs	r3, #0
    6a8c:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    6a8e:	f242 018e 	movw	r1, #8334	; 0x208e
    6a92:	6878      	ldr	r0, [r7, #4]
    6a94:	4b10      	ldr	r3, [pc, #64]	; (6ad8 <_osc32kctrl_init_sources+0x58>)
    6a96:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    6a98:	2100      	movs	r1, #0
    6a9a:	6878      	ldr	r0, [r7, #4]
    6a9c:	4b0f      	ldr	r3, [pc, #60]	; (6adc <_osc32kctrl_init_sources+0x5c>)
    6a9e:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    6aa0:	2100      	movs	r1, #0
    6aa2:	6878      	ldr	r0, [r7, #4]
    6aa4:	4b0e      	ldr	r3, [pc, #56]	; (6ae0 <_osc32kctrl_init_sources+0x60>)
    6aa6:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    6aa8:	6878      	ldr	r0, [r7, #4]
    6aaa:	4b0e      	ldr	r3, [pc, #56]	; (6ae4 <_osc32kctrl_init_sources+0x64>)
    6aac:	4798      	blx	r3
    6aae:	4603      	mov	r3, r0
    6ab0:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    6ab2:	887b      	ldrh	r3, [r7, #2]
    6ab4:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    6ab6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    6aba:	4619      	mov	r1, r3
    6abc:	6878      	ldr	r0, [r7, #4]
    6abe:	4b0a      	ldr	r3, [pc, #40]	; (6ae8 <_osc32kctrl_init_sources+0x68>)
    6ac0:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    6ac2:	2100      	movs	r1, #0
    6ac4:	6878      	ldr	r0, [r7, #4]
    6ac6:	4b09      	ldr	r3, [pc, #36]	; (6aec <_osc32kctrl_init_sources+0x6c>)
    6ac8:	4798      	blx	r3
	(void)calib;
}
    6aca:	bf00      	nop
    6acc:	3708      	adds	r7, #8
    6ace:	46bd      	mov	sp, r7
    6ad0:	bd80      	pop	{r7, pc}
    6ad2:	bf00      	nop
    6ad4:	40001400 	.word	0x40001400
    6ad8:	000069e3 	.word	0x000069e3
    6adc:	00006a01 	.word	0x00006a01
    6ae0:	00006a1f 	.word	0x00006a1f
    6ae4:	00006a3d 	.word	0x00006a3d
    6ae8:	00006a63 	.word	0x00006a63
    6aec:	000069c5 	.word	0x000069c5

00006af0 <hri_gclk_wait_for_sync>:
{
    6af0:	b480      	push	{r7}
    6af2:	b083      	sub	sp, #12
    6af4:	af00      	add	r7, sp, #0
    6af6:	6078      	str	r0, [r7, #4]
    6af8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    6afa:	bf00      	nop
    6afc:	687b      	ldr	r3, [r7, #4]
    6afe:	685a      	ldr	r2, [r3, #4]
    6b00:	683b      	ldr	r3, [r7, #0]
    6b02:	4013      	ands	r3, r2
    6b04:	2b00      	cmp	r3, #0
    6b06:	d1f9      	bne.n	6afc <hri_gclk_wait_for_sync+0xc>
}
    6b08:	bf00      	nop
    6b0a:	370c      	adds	r7, #12
    6b0c:	46bd      	mov	sp, r7
    6b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b12:	4770      	bx	lr

00006b14 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    6b14:	b480      	push	{r7}
    6b16:	b083      	sub	sp, #12
    6b18:	af00      	add	r7, sp, #0
    6b1a:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    6b1c:	687b      	ldr	r3, [r7, #4]
    6b1e:	685b      	ldr	r3, [r3, #4]
    6b20:	089b      	lsrs	r3, r3, #2
    6b22:	f003 0301 	and.w	r3, r3, #1
    6b26:	2b00      	cmp	r3, #0
    6b28:	bf14      	ite	ne
    6b2a:	2301      	movne	r3, #1
    6b2c:	2300      	moveq	r3, #0
    6b2e:	b2db      	uxtb	r3, r3
}
    6b30:	4618      	mov	r0, r3
    6b32:	370c      	adds	r7, #12
    6b34:	46bd      	mov	sp, r7
    6b36:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b3a:	4770      	bx	lr

00006b3c <hri_gclk_read_SYNCBUSY_reg>:
{
    6b3c:	b480      	push	{r7}
    6b3e:	b083      	sub	sp, #12
    6b40:	af00      	add	r7, sp, #0
    6b42:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    6b44:	687b      	ldr	r3, [r7, #4]
    6b46:	685b      	ldr	r3, [r3, #4]
}
    6b48:	4618      	mov	r0, r3
    6b4a:	370c      	adds	r7, #12
    6b4c:	46bd      	mov	sp, r7
    6b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b52:	4770      	bx	lr

00006b54 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    6b54:	b580      	push	{r7, lr}
    6b56:	b086      	sub	sp, #24
    6b58:	af00      	add	r7, sp, #0
    6b5a:	60f8      	str	r0, [r7, #12]
    6b5c:	460b      	mov	r3, r1
    6b5e:	607a      	str	r2, [r7, #4]
    6b60:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    6b62:	7afa      	ldrb	r2, [r7, #11]
    6b64:	68fb      	ldr	r3, [r7, #12]
    6b66:	3208      	adds	r2, #8
    6b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b6c:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    6b6e:	697b      	ldr	r3, [r7, #20]
    6b70:	f023 030f 	bic.w	r3, r3, #15
    6b74:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    6b76:	687b      	ldr	r3, [r7, #4]
    6b78:	f003 030f 	and.w	r3, r3, #15
    6b7c:	697a      	ldr	r2, [r7, #20]
    6b7e:	4313      	orrs	r3, r2
    6b80:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    6b82:	7afa      	ldrb	r2, [r7, #11]
    6b84:	68fb      	ldr	r3, [r7, #12]
    6b86:	3208      	adds	r2, #8
    6b88:	6979      	ldr	r1, [r7, #20]
    6b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    6b8e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    6b92:	68f8      	ldr	r0, [r7, #12]
    6b94:	4b02      	ldr	r3, [pc, #8]	; (6ba0 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    6b96:	4798      	blx	r3
}
    6b98:	bf00      	nop
    6b9a:	3718      	adds	r7, #24
    6b9c:	46bd      	mov	sp, r7
    6b9e:	bd80      	pop	{r7, pc}
    6ba0:	00006af1 	.word	0x00006af1

00006ba4 <hri_gclk_write_PCHCTRL_reg>:
{
    6ba4:	b480      	push	{r7}
    6ba6:	b085      	sub	sp, #20
    6ba8:	af00      	add	r7, sp, #0
    6baa:	60f8      	str	r0, [r7, #12]
    6bac:	460b      	mov	r3, r1
    6bae:	607a      	str	r2, [r7, #4]
    6bb0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    6bb2:	7afa      	ldrb	r2, [r7, #11]
    6bb4:	68fb      	ldr	r3, [r7, #12]
    6bb6:	3220      	adds	r2, #32
    6bb8:	6879      	ldr	r1, [r7, #4]
    6bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6bbe:	bf00      	nop
    6bc0:	3714      	adds	r7, #20
    6bc2:	46bd      	mov	sp, r7
    6bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bc8:	4770      	bx	lr

00006bca <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    6bca:	b480      	push	{r7}
    6bcc:	b085      	sub	sp, #20
    6bce:	af00      	add	r7, sp, #0
    6bd0:	60f8      	str	r0, [r7, #12]
    6bd2:	460b      	mov	r3, r1
    6bd4:	607a      	str	r2, [r7, #4]
    6bd6:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    6bd8:	bf00      	nop
    6bda:	7afa      	ldrb	r2, [r7, #11]
    6bdc:	68f9      	ldr	r1, [r7, #12]
    6bde:	4613      	mov	r3, r2
    6be0:	009b      	lsls	r3, r3, #2
    6be2:	4413      	add	r3, r2
    6be4:	009b      	lsls	r3, r3, #2
    6be6:	440b      	add	r3, r1
    6be8:	333c      	adds	r3, #60	; 0x3c
    6bea:	681a      	ldr	r2, [r3, #0]
    6bec:	687b      	ldr	r3, [r7, #4]
    6bee:	4013      	ands	r3, r2
    6bf0:	2b00      	cmp	r3, #0
    6bf2:	d1f2      	bne.n	6bda <hri_oscctrl_wait_for_sync+0x10>
	};
}
    6bf4:	bf00      	nop
    6bf6:	3714      	adds	r7, #20
    6bf8:	46bd      	mov	sp, r7
    6bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    6bfe:	4770      	bx	lr

00006c00 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    6c00:	b480      	push	{r7}
    6c02:	b083      	sub	sp, #12
    6c04:	af00      	add	r7, sp, #0
    6c06:	6078      	str	r0, [r7, #4]
    6c08:	460b      	mov	r3, r1
    6c0a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    6c0c:	78fa      	ldrb	r2, [r7, #3]
    6c0e:	6879      	ldr	r1, [r7, #4]
    6c10:	4613      	mov	r3, r2
    6c12:	009b      	lsls	r3, r3, #2
    6c14:	4413      	add	r3, r2
    6c16:	009b      	lsls	r3, r3, #2
    6c18:	440b      	add	r3, r1
    6c1a:	3340      	adds	r3, #64	; 0x40
    6c1c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    6c1e:	f003 0301 	and.w	r3, r3, #1
    6c22:	2b00      	cmp	r3, #0
    6c24:	bf14      	ite	ne
    6c26:	2301      	movne	r3, #1
    6c28:	2300      	moveq	r3, #0
    6c2a:	b2db      	uxtb	r3, r3
}
    6c2c:	4618      	mov	r0, r3
    6c2e:	370c      	adds	r7, #12
    6c30:	46bd      	mov	sp, r7
    6c32:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c36:	4770      	bx	lr

00006c38 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    6c38:	b480      	push	{r7}
    6c3a:	b083      	sub	sp, #12
    6c3c:	af00      	add	r7, sp, #0
    6c3e:	6078      	str	r0, [r7, #4]
    6c40:	460b      	mov	r3, r1
    6c42:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    6c44:	78fa      	ldrb	r2, [r7, #3]
    6c46:	6879      	ldr	r1, [r7, #4]
    6c48:	4613      	mov	r3, r2
    6c4a:	009b      	lsls	r3, r3, #2
    6c4c:	4413      	add	r3, r2
    6c4e:	009b      	lsls	r3, r3, #2
    6c50:	440b      	add	r3, r1
    6c52:	3340      	adds	r3, #64	; 0x40
    6c54:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    6c56:	085b      	lsrs	r3, r3, #1
    6c58:	f003 0301 	and.w	r3, r3, #1
    6c5c:	2b00      	cmp	r3, #0
    6c5e:	bf14      	ite	ne
    6c60:	2301      	movne	r3, #1
    6c62:	2300      	moveq	r3, #0
    6c64:	b2db      	uxtb	r3, r3
}
    6c66:	4618      	mov	r0, r3
    6c68:	370c      	adds	r7, #12
    6c6a:	46bd      	mov	sp, r7
    6c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6c70:	4770      	bx	lr
	...

00006c74 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    6c74:	b580      	push	{r7, lr}
    6c76:	b082      	sub	sp, #8
    6c78:	af00      	add	r7, sp, #0
    6c7a:	6078      	str	r0, [r7, #4]
    6c7c:	460b      	mov	r3, r1
    6c7e:	70fb      	strb	r3, [r7, #3]
    6c80:	4613      	mov	r3, r2
    6c82:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    6c84:	78fa      	ldrb	r2, [r7, #3]
    6c86:	6879      	ldr	r1, [r7, #4]
    6c88:	4613      	mov	r3, r2
    6c8a:	009b      	lsls	r3, r3, #2
    6c8c:	4413      	add	r3, r2
    6c8e:	009b      	lsls	r3, r3, #2
    6c90:	440b      	add	r3, r1
    6c92:	3330      	adds	r3, #48	; 0x30
    6c94:	78ba      	ldrb	r2, [r7, #2]
    6c96:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    6c98:	78fb      	ldrb	r3, [r7, #3]
    6c9a:	2202      	movs	r2, #2
    6c9c:	4619      	mov	r1, r3
    6c9e:	6878      	ldr	r0, [r7, #4]
    6ca0:	4b02      	ldr	r3, [pc, #8]	; (6cac <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    6ca2:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6ca4:	bf00      	nop
    6ca6:	3708      	adds	r7, #8
    6ca8:	46bd      	mov	sp, r7
    6caa:	bd80      	pop	{r7, pc}
    6cac:	00006bcb 	.word	0x00006bcb

00006cb0 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    6cb0:	b580      	push	{r7, lr}
    6cb2:	b084      	sub	sp, #16
    6cb4:	af00      	add	r7, sp, #0
    6cb6:	60f8      	str	r0, [r7, #12]
    6cb8:	460b      	mov	r3, r1
    6cba:	607a      	str	r2, [r7, #4]
    6cbc:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    6cbe:	7afa      	ldrb	r2, [r7, #11]
    6cc0:	68f9      	ldr	r1, [r7, #12]
    6cc2:	4613      	mov	r3, r2
    6cc4:	009b      	lsls	r3, r3, #2
    6cc6:	4413      	add	r3, r2
    6cc8:	009b      	lsls	r3, r3, #2
    6cca:	440b      	add	r3, r1
    6ccc:	3334      	adds	r3, #52	; 0x34
    6cce:	687a      	ldr	r2, [r7, #4]
    6cd0:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    6cd2:	7afb      	ldrb	r3, [r7, #11]
    6cd4:	2206      	movs	r2, #6
    6cd6:	4619      	mov	r1, r3
    6cd8:	68f8      	ldr	r0, [r7, #12]
    6cda:	4b03      	ldr	r3, [pc, #12]	; (6ce8 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    6cdc:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6cde:	bf00      	nop
    6ce0:	3710      	adds	r7, #16
    6ce2:	46bd      	mov	sp, r7
    6ce4:	bd80      	pop	{r7, pc}
    6ce6:	bf00      	nop
    6ce8:	00006bcb 	.word	0x00006bcb

00006cec <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    6cec:	b480      	push	{r7}
    6cee:	b085      	sub	sp, #20
    6cf0:	af00      	add	r7, sp, #0
    6cf2:	60f8      	str	r0, [r7, #12]
    6cf4:	460b      	mov	r3, r1
    6cf6:	607a      	str	r2, [r7, #4]
    6cf8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    6cfa:	7afa      	ldrb	r2, [r7, #11]
    6cfc:	68f9      	ldr	r1, [r7, #12]
    6cfe:	4613      	mov	r3, r2
    6d00:	009b      	lsls	r3, r3, #2
    6d02:	4413      	add	r3, r2
    6d04:	009b      	lsls	r3, r3, #2
    6d06:	440b      	add	r3, r1
    6d08:	3338      	adds	r3, #56	; 0x38
    6d0a:	687a      	ldr	r2, [r7, #4]
    6d0c:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6d0e:	bf00      	nop
    6d10:	3714      	adds	r7, #20
    6d12:	46bd      	mov	sp, r7
    6d14:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d18:	4770      	bx	lr

00006d1a <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    6d1a:	b480      	push	{r7}
    6d1c:	b083      	sub	sp, #12
    6d1e:	af00      	add	r7, sp, #0
    6d20:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    6d22:	687b      	ldr	r3, [r7, #4]
    6d24:	691b      	ldr	r3, [r3, #16]
    6d26:	085b      	lsrs	r3, r3, #1
    6d28:	f003 0301 	and.w	r3, r3, #1
    6d2c:	2b00      	cmp	r3, #0
    6d2e:	bf14      	ite	ne
    6d30:	2301      	movne	r3, #1
    6d32:	2300      	moveq	r3, #0
    6d34:	b2db      	uxtb	r3, r3
}
    6d36:	4618      	mov	r0, r3
    6d38:	370c      	adds	r7, #12
    6d3a:	46bd      	mov	sp, r7
    6d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d40:	4770      	bx	lr

00006d42 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    6d42:	b480      	push	{r7}
    6d44:	b083      	sub	sp, #12
    6d46:	af00      	add	r7, sp, #0
    6d48:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    6d4a:	687b      	ldr	r3, [r7, #4]
    6d4c:	691b      	ldr	r3, [r3, #16]
    6d4e:	0a1b      	lsrs	r3, r3, #8
    6d50:	f003 0301 	and.w	r3, r3, #1
    6d54:	2b00      	cmp	r3, #0
    6d56:	bf14      	ite	ne
    6d58:	2301      	movne	r3, #1
    6d5a:	2300      	moveq	r3, #0
    6d5c:	b2db      	uxtb	r3, r3
}
    6d5e:	4618      	mov	r0, r3
    6d60:	370c      	adds	r7, #12
    6d62:	46bd      	mov	sp, r7
    6d64:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d68:	4770      	bx	lr

00006d6a <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    6d6a:	b480      	push	{r7}
    6d6c:	b085      	sub	sp, #20
    6d6e:	af00      	add	r7, sp, #0
    6d70:	6078      	str	r0, [r7, #4]
    6d72:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    6d74:	687b      	ldr	r3, [r7, #4]
    6d76:	691b      	ldr	r3, [r3, #16]
    6d78:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6d7a:	68fa      	ldr	r2, [r7, #12]
    6d7c:	683b      	ldr	r3, [r7, #0]
    6d7e:	4013      	ands	r3, r2
    6d80:	60fb      	str	r3, [r7, #12]
	return tmp;
    6d82:	68fb      	ldr	r3, [r7, #12]
}
    6d84:	4618      	mov	r0, r3
    6d86:	3714      	adds	r7, #20
    6d88:	46bd      	mov	sp, r7
    6d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d8e:	4770      	bx	lr

00006d90 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    6d90:	b480      	push	{r7}
    6d92:	b085      	sub	sp, #20
    6d94:	af00      	add	r7, sp, #0
    6d96:	60f8      	str	r0, [r7, #12]
    6d98:	460b      	mov	r3, r1
    6d9a:	607a      	str	r2, [r7, #4]
    6d9c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    6d9e:	7afb      	ldrb	r3, [r7, #11]
    6da0:	68fa      	ldr	r2, [r7, #12]
    6da2:	3304      	adds	r3, #4
    6da4:	009b      	lsls	r3, r3, #2
    6da6:	4413      	add	r3, r2
    6da8:	687a      	ldr	r2, [r7, #4]
    6daa:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6dac:	bf00      	nop
    6dae:	3714      	adds	r7, #20
    6db0:	46bd      	mov	sp, r7
    6db2:	f85d 7b04 	ldr.w	r7, [sp], #4
    6db6:	4770      	bx	lr

00006db8 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    6db8:	b480      	push	{r7}
    6dba:	b083      	sub	sp, #12
    6dbc:	af00      	add	r7, sp, #0
    6dbe:	6078      	str	r0, [r7, #4]
    6dc0:	460b      	mov	r3, r1
    6dc2:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    6dc4:	687b      	ldr	r3, [r7, #4]
    6dc6:	78fa      	ldrb	r2, [r7, #3]
    6dc8:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6dca:	bf00      	nop
    6dcc:	370c      	adds	r7, #12
    6dce:	46bd      	mov	sp, r7
    6dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    6dd4:	4770      	bx	lr

00006dd6 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    6dd6:	b480      	push	{r7}
    6dd8:	b085      	sub	sp, #20
    6dda:	af00      	add	r7, sp, #0
    6ddc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    6dde:	687b      	ldr	r3, [r7, #4]
    6de0:	f893 3020 	ldrb.w	r3, [r3, #32]
    6de4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    6de6:	7bfb      	ldrb	r3, [r7, #15]
    6de8:	f003 0301 	and.w	r3, r3, #1
    6dec:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6dee:	7bfb      	ldrb	r3, [r7, #15]
    6df0:	2b00      	cmp	r3, #0
    6df2:	bf14      	ite	ne
    6df4:	2301      	movne	r3, #1
    6df6:	2300      	moveq	r3, #0
    6df8:	b2db      	uxtb	r3, r3
}
    6dfa:	4618      	mov	r0, r3
    6dfc:	3714      	adds	r7, #20
    6dfe:	46bd      	mov	sp, r7
    6e00:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e04:	4770      	bx	lr

00006e06 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    6e06:	b480      	push	{r7}
    6e08:	b083      	sub	sp, #12
    6e0a:	af00      	add	r7, sp, #0
    6e0c:	6078      	str	r0, [r7, #4]
    6e0e:	460b      	mov	r3, r1
    6e10:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    6e12:	687b      	ldr	r3, [r7, #4]
    6e14:	78fa      	ldrb	r2, [r7, #3]
    6e16:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6e1a:	bf00      	nop
    6e1c:	370c      	adds	r7, #12
    6e1e:	46bd      	mov	sp, r7
    6e20:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e24:	4770      	bx	lr

00006e26 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    6e26:	b480      	push	{r7}
    6e28:	b083      	sub	sp, #12
    6e2a:	af00      	add	r7, sp, #0
    6e2c:	6078      	str	r0, [r7, #4]
    6e2e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    6e30:	687b      	ldr	r3, [r7, #4]
    6e32:	683a      	ldr	r2, [r7, #0]
    6e34:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6e36:	bf00      	nop
    6e38:	370c      	adds	r7, #12
    6e3a:	46bd      	mov	sp, r7
    6e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e40:	4770      	bx	lr

00006e42 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    6e42:	b480      	push	{r7}
    6e44:	b083      	sub	sp, #12
    6e46:	af00      	add	r7, sp, #0
    6e48:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    6e4a:	687b      	ldr	r3, [r7, #4]
    6e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6e4e:	4618      	mov	r0, r3
    6e50:	370c      	adds	r7, #12
    6e52:	46bd      	mov	sp, r7
    6e54:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e58:	4770      	bx	lr

00006e5a <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    6e5a:	b480      	push	{r7}
    6e5c:	b083      	sub	sp, #12
    6e5e:	af00      	add	r7, sp, #0
    6e60:	6078      	str	r0, [r7, #4]
    6e62:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    6e64:	687b      	ldr	r3, [r7, #4]
    6e66:	683a      	ldr	r2, [r7, #0]
    6e68:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    6e6a:	bf00      	nop
    6e6c:	370c      	adds	r7, #12
    6e6e:	46bd      	mov	sp, r7
    6e70:	f85d 7b04 	ldr.w	r7, [sp], #4
    6e74:	4770      	bx	lr

00006e76 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    6e76:	b480      	push	{r7}
    6e78:	b085      	sub	sp, #20
    6e7a:	af00      	add	r7, sp, #0
    6e7c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6e7e:	687b      	ldr	r3, [r7, #4]
    6e80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6e84:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    6e86:	7bfb      	ldrb	r3, [r7, #15]
    6e88:	085b      	lsrs	r3, r3, #1
    6e8a:	b2db      	uxtb	r3, r3
    6e8c:	f003 0301 	and.w	r3, r3, #1
    6e90:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6e92:	7bfb      	ldrb	r3, [r7, #15]
    6e94:	2b00      	cmp	r3, #0
    6e96:	bf14      	ite	ne
    6e98:	2301      	movne	r3, #1
    6e9a:	2300      	moveq	r3, #0
    6e9c:	b2db      	uxtb	r3, r3
}
    6e9e:	4618      	mov	r0, r3
    6ea0:	3714      	adds	r7, #20
    6ea2:	46bd      	mov	sp, r7
    6ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ea8:	4770      	bx	lr

00006eaa <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    6eaa:	b480      	push	{r7}
    6eac:	b085      	sub	sp, #20
    6eae:	af00      	add	r7, sp, #0
    6eb0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6eb2:	687b      	ldr	r3, [r7, #4]
    6eb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6eb8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    6eba:	7bfb      	ldrb	r3, [r7, #15]
    6ebc:	089b      	lsrs	r3, r3, #2
    6ebe:	b2db      	uxtb	r3, r3
    6ec0:	f003 0301 	and.w	r3, r3, #1
    6ec4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6ec6:	7bfb      	ldrb	r3, [r7, #15]
    6ec8:	2b00      	cmp	r3, #0
    6eca:	bf14      	ite	ne
    6ecc:	2301      	movne	r3, #1
    6ece:	2300      	moveq	r3, #0
    6ed0:	b2db      	uxtb	r3, r3
}
    6ed2:	4618      	mov	r0, r3
    6ed4:	3714      	adds	r7, #20
    6ed6:	46bd      	mov	sp, r7
    6ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
    6edc:	4770      	bx	lr

00006ede <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    6ede:	b480      	push	{r7}
    6ee0:	b085      	sub	sp, #20
    6ee2:	af00      	add	r7, sp, #0
    6ee4:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6ee6:	687b      	ldr	r3, [r7, #4]
    6ee8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6eec:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    6eee:	7bfb      	ldrb	r3, [r7, #15]
    6ef0:	08db      	lsrs	r3, r3, #3
    6ef2:	b2db      	uxtb	r3, r3
    6ef4:	f003 0301 	and.w	r3, r3, #1
    6ef8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6efa:	7bfb      	ldrb	r3, [r7, #15]
    6efc:	2b00      	cmp	r3, #0
    6efe:	bf14      	ite	ne
    6f00:	2301      	movne	r3, #1
    6f02:	2300      	moveq	r3, #0
    6f04:	b2db      	uxtb	r3, r3
}
    6f06:	4618      	mov	r0, r3
    6f08:	3714      	adds	r7, #20
    6f0a:	46bd      	mov	sp, r7
    6f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f10:	4770      	bx	lr

00006f12 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    6f12:	b480      	push	{r7}
    6f14:	b085      	sub	sp, #20
    6f16:	af00      	add	r7, sp, #0
    6f18:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    6f1a:	687b      	ldr	r3, [r7, #4]
    6f1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    6f20:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    6f22:	7bfb      	ldrb	r3, [r7, #15]
    6f24:	091b      	lsrs	r3, r3, #4
    6f26:	b2db      	uxtb	r3, r3
    6f28:	f003 0301 	and.w	r3, r3, #1
    6f2c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    6f2e:	7bfb      	ldrb	r3, [r7, #15]
    6f30:	2b00      	cmp	r3, #0
    6f32:	bf14      	ite	ne
    6f34:	2301      	movne	r3, #1
    6f36:	2300      	moveq	r3, #0
    6f38:	b2db      	uxtb	r3, r3
}
    6f3a:	4618      	mov	r0, r3
    6f3c:	3714      	adds	r7, #20
    6f3e:	46bd      	mov	sp, r7
    6f40:	f85d 7b04 	ldr.w	r7, [sp], #4
    6f44:	4770      	bx	lr
	...

00006f48 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    6f48:	b580      	push	{r7, lr}
    6f4a:	b082      	sub	sp, #8
    6f4c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    6f4e:	4b0a      	ldr	r3, [pc, #40]	; (6f78 <_oscctrl_init_sources+0x30>)
    6f50:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    6f52:	4a0a      	ldr	r2, [pc, #40]	; (6f7c <_oscctrl_init_sources+0x34>)
    6f54:	2101      	movs	r1, #1
    6f56:	6878      	ldr	r0, [r7, #4]
    6f58:	4b09      	ldr	r3, [pc, #36]	; (6f80 <_oscctrl_init_sources+0x38>)
    6f5a:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    6f5c:	bf00      	nop
    6f5e:	6878      	ldr	r0, [r7, #4]
    6f60:	4b08      	ldr	r3, [pc, #32]	; (6f84 <_oscctrl_init_sources+0x3c>)
    6f62:	4798      	blx	r3
    6f64:	4603      	mov	r3, r0
    6f66:	f083 0301 	eor.w	r3, r3, #1
    6f6a:	b2db      	uxtb	r3, r3
    6f6c:	2b00      	cmp	r3, #0
    6f6e:	d1f6      	bne.n	6f5e <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    6f70:	bf00      	nop
    6f72:	3708      	adds	r7, #8
    6f74:	46bd      	mov	sp, r7
    6f76:	bd80      	pop	{r7, pc}
    6f78:	40001000 	.word	0x40001000
    6f7c:	03002646 	.word	0x03002646
    6f80:	00006d91 	.word	0x00006d91
    6f84:	00006d1b 	.word	0x00006d1b

00006f88 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    6f88:	b580      	push	{r7, lr}
    6f8a:	b084      	sub	sp, #16
    6f8c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    6f8e:	4b6b      	ldr	r3, [pc, #428]	; (713c <_oscctrl_init_referenced_generators+0x1b4>)
    6f90:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    6f92:	2204      	movs	r2, #4
    6f94:	2100      	movs	r1, #0
    6f96:	486a      	ldr	r0, [pc, #424]	; (7140 <_oscctrl_init_referenced_generators+0x1b8>)
    6f98:	4b6a      	ldr	r3, [pc, #424]	; (7144 <_oscctrl_init_referenced_generators+0x1bc>)
    6f9a:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    6f9c:	bf00      	nop
    6f9e:	4868      	ldr	r0, [pc, #416]	; (7140 <_oscctrl_init_referenced_generators+0x1b8>)
    6fa0:	4b69      	ldr	r3, [pc, #420]	; (7148 <_oscctrl_init_referenced_generators+0x1c0>)
    6fa2:	4798      	blx	r3
    6fa4:	4603      	mov	r3, r0
    6fa6:	2b00      	cmp	r3, #0
    6fa8:	d1f9      	bne.n	6f9e <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    6faa:	2100      	movs	r1, #0
    6fac:	68f8      	ldr	r0, [r7, #12]
    6fae:	4b67      	ldr	r3, [pc, #412]	; (714c <_oscctrl_init_referenced_generators+0x1c4>)
    6fb0:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    6fb2:	4967      	ldr	r1, [pc, #412]	; (7150 <_oscctrl_init_referenced_generators+0x1c8>)
    6fb4:	68f8      	ldr	r0, [r7, #12]
    6fb6:	4b67      	ldr	r3, [pc, #412]	; (7154 <_oscctrl_init_referenced_generators+0x1cc>)
    6fb8:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    6fba:	bf00      	nop
    6fbc:	68f8      	ldr	r0, [r7, #12]
    6fbe:	4b66      	ldr	r3, [pc, #408]	; (7158 <_oscctrl_init_referenced_generators+0x1d0>)
    6fc0:	4798      	blx	r3
    6fc2:	4603      	mov	r3, r0
    6fc4:	2b00      	cmp	r3, #0
    6fc6:	d1f9      	bne.n	6fbc <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    6fc8:	2100      	movs	r1, #0
    6fca:	68f8      	ldr	r0, [r7, #12]
    6fcc:	4b63      	ldr	r3, [pc, #396]	; (715c <_oscctrl_init_referenced_generators+0x1d4>)
    6fce:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    6fd0:	bf00      	nop
    6fd2:	68f8      	ldr	r0, [r7, #12]
    6fd4:	4b62      	ldr	r3, [pc, #392]	; (7160 <_oscctrl_init_referenced_generators+0x1d8>)
    6fd6:	4798      	blx	r3
    6fd8:	4603      	mov	r3, r0
    6fda:	2b00      	cmp	r3, #0
    6fdc:	d1f9      	bne.n	6fd2 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    6fde:	2302      	movs	r3, #2
    6fe0:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    6fe2:	7afb      	ldrb	r3, [r7, #11]
    6fe4:	4619      	mov	r1, r3
    6fe6:	68f8      	ldr	r0, [r7, #12]
    6fe8:	4b58      	ldr	r3, [pc, #352]	; (714c <_oscctrl_init_referenced_generators+0x1c4>)
    6fea:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    6fec:	bf00      	nop
    6fee:	68f8      	ldr	r0, [r7, #12]
    6ff0:	4b5c      	ldr	r3, [pc, #368]	; (7164 <_oscctrl_init_referenced_generators+0x1dc>)
    6ff2:	4798      	blx	r3
    6ff4:	4603      	mov	r3, r0
    6ff6:	2b00      	cmp	r3, #0
    6ff8:	d1f9      	bne.n	6fee <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    6ffa:	68f8      	ldr	r0, [r7, #12]
    6ffc:	4b5a      	ldr	r3, [pc, #360]	; (7168 <_oscctrl_init_referenced_generators+0x1e0>)
    6ffe:	4798      	blx	r3
    7000:	4603      	mov	r3, r0
    7002:	4619      	mov	r1, r3
    7004:	68f8      	ldr	r0, [r7, #12]
    7006:	4b59      	ldr	r3, [pc, #356]	; (716c <_oscctrl_init_referenced_generators+0x1e4>)
    7008:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    700a:	bf00      	nop
    700c:	68f8      	ldr	r0, [r7, #12]
    700e:	4b58      	ldr	r3, [pc, #352]	; (7170 <_oscctrl_init_referenced_generators+0x1e8>)
    7010:	4798      	blx	r3
    7012:	4603      	mov	r3, r0
    7014:	2b00      	cmp	r3, #0
    7016:	d1f9      	bne.n	700c <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    7018:	2319      	movs	r3, #25
    701a:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    701c:	7afb      	ldrb	r3, [r7, #11]
    701e:	4619      	mov	r1, r3
    7020:	68f8      	ldr	r0, [r7, #12]
    7022:	4b4e      	ldr	r3, [pc, #312]	; (715c <_oscctrl_init_referenced_generators+0x1d4>)
    7024:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    7026:	bf00      	nop
    7028:	68f8      	ldr	r0, [r7, #12]
    702a:	4b4d      	ldr	r3, [pc, #308]	; (7160 <_oscctrl_init_referenced_generators+0x1d8>)
    702c:	4798      	blx	r3
    702e:	4603      	mov	r3, r0
    7030:	2b00      	cmp	r3, #0
    7032:	d1f9      	bne.n	7028 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    7034:	2245      	movs	r2, #69	; 0x45
    7036:	2101      	movs	r1, #1
    7038:	4841      	ldr	r0, [pc, #260]	; (7140 <_oscctrl_init_referenced_generators+0x1b8>)
    703a:	4b4e      	ldr	r3, [pc, #312]	; (7174 <_oscctrl_init_referenced_generators+0x1ec>)
    703c:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    703e:	223b      	movs	r2, #59	; 0x3b
    7040:	2100      	movs	r1, #0
    7042:	68f8      	ldr	r0, [r7, #12]
    7044:	4b4c      	ldr	r3, [pc, #304]	; (7178 <_oscctrl_init_referenced_generators+0x1f0>)
    7046:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    7048:	f44f 6201 	mov.w	r2, #2064	; 0x810
    704c:	2100      	movs	r1, #0
    704e:	68f8      	ldr	r0, [r7, #12]
    7050:	4b4a      	ldr	r3, [pc, #296]	; (717c <_oscctrl_init_referenced_generators+0x1f4>)
    7052:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    7054:	2242      	movs	r2, #66	; 0x42
    7056:	2100      	movs	r1, #0
    7058:	68f8      	ldr	r0, [r7, #12]
    705a:	4b49      	ldr	r3, [pc, #292]	; (7180 <_oscctrl_init_referenced_generators+0x1f8>)
    705c:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    705e:	4a49      	ldr	r2, [pc, #292]	; (7184 <_oscctrl_init_referenced_generators+0x1fc>)
    7060:	2101      	movs	r1, #1
    7062:	68f8      	ldr	r0, [r7, #12]
    7064:	4b44      	ldr	r3, [pc, #272]	; (7178 <_oscctrl_init_referenced_generators+0x1f0>)
    7066:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    7068:	f44f 6203 	mov.w	r2, #2096	; 0x830
    706c:	2101      	movs	r1, #1
    706e:	68f8      	ldr	r0, [r7, #12]
    7070:	4b42      	ldr	r3, [pc, #264]	; (717c <_oscctrl_init_referenced_generators+0x1f4>)
    7072:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    7074:	2202      	movs	r2, #2
    7076:	2101      	movs	r1, #1
    7078:	68f8      	ldr	r0, [r7, #12]
    707a:	4b41      	ldr	r3, [pc, #260]	; (7180 <_oscctrl_init_referenced_generators+0x1f8>)
    707c:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    707e:	68f8      	ldr	r0, [r7, #12]
    7080:	4b41      	ldr	r3, [pc, #260]	; (7188 <_oscctrl_init_referenced_generators+0x200>)
    7082:	4798      	blx	r3
    7084:	4603      	mov	r3, r0
    7086:	2b00      	cmp	r3, #0
    7088:	d00c      	beq.n	70a4 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    708a:	f44f 6310 	mov.w	r3, #2304	; 0x900
    708e:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    7090:	bf00      	nop
    7092:	6879      	ldr	r1, [r7, #4]
    7094:	68f8      	ldr	r0, [r7, #12]
    7096:	4b3d      	ldr	r3, [pc, #244]	; (718c <_oscctrl_init_referenced_generators+0x204>)
    7098:	4798      	blx	r3
    709a:	4602      	mov	r2, r0
    709c:	687b      	ldr	r3, [r7, #4]
    709e:	429a      	cmp	r2, r3
    70a0:	d1f7      	bne.n	7092 <_oscctrl_init_referenced_generators+0x10a>
    70a2:	e009      	b.n	70b8 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    70a4:	bf00      	nop
    70a6:	68f8      	ldr	r0, [r7, #12]
    70a8:	4b39      	ldr	r3, [pc, #228]	; (7190 <_oscctrl_init_referenced_generators+0x208>)
    70aa:	4798      	blx	r3
    70ac:	4603      	mov	r3, r0
    70ae:	f083 0301 	eor.w	r3, r3, #1
    70b2:	b2db      	uxtb	r3, r3
    70b4:	2b00      	cmp	r3, #0
    70b6:	d1f6      	bne.n	70a6 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    70b8:	bf00      	nop
    70ba:	2100      	movs	r1, #0
    70bc:	68f8      	ldr	r0, [r7, #12]
    70be:	4b35      	ldr	r3, [pc, #212]	; (7194 <_oscctrl_init_referenced_generators+0x20c>)
    70c0:	4798      	blx	r3
    70c2:	4603      	mov	r3, r0
    70c4:	f083 0301 	eor.w	r3, r3, #1
    70c8:	b2db      	uxtb	r3, r3
    70ca:	2b00      	cmp	r3, #0
    70cc:	d009      	beq.n	70e2 <_oscctrl_init_referenced_generators+0x15a>
    70ce:	2100      	movs	r1, #0
    70d0:	68f8      	ldr	r0, [r7, #12]
    70d2:	4b31      	ldr	r3, [pc, #196]	; (7198 <_oscctrl_init_referenced_generators+0x210>)
    70d4:	4798      	blx	r3
    70d6:	4603      	mov	r3, r0
    70d8:	f083 0301 	eor.w	r3, r3, #1
    70dc:	b2db      	uxtb	r3, r3
    70de:	2b00      	cmp	r3, #0
    70e0:	d1eb      	bne.n	70ba <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    70e2:	bf00      	nop
    70e4:	2101      	movs	r1, #1
    70e6:	68f8      	ldr	r0, [r7, #12]
    70e8:	4b2a      	ldr	r3, [pc, #168]	; (7194 <_oscctrl_init_referenced_generators+0x20c>)
    70ea:	4798      	blx	r3
    70ec:	4603      	mov	r3, r0
    70ee:	f083 0301 	eor.w	r3, r3, #1
    70f2:	b2db      	uxtb	r3, r3
    70f4:	2b00      	cmp	r3, #0
    70f6:	d009      	beq.n	710c <_oscctrl_init_referenced_generators+0x184>
    70f8:	2101      	movs	r1, #1
    70fa:	68f8      	ldr	r0, [r7, #12]
    70fc:	4b26      	ldr	r3, [pc, #152]	; (7198 <_oscctrl_init_referenced_generators+0x210>)
    70fe:	4798      	blx	r3
    7100:	4603      	mov	r3, r0
    7102:	f083 0301 	eor.w	r3, r3, #1
    7106:	b2db      	uxtb	r3, r3
    7108:	2b00      	cmp	r3, #0
    710a:	d1eb      	bne.n	70e4 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    710c:	bf00      	nop
    710e:	480c      	ldr	r0, [pc, #48]	; (7140 <_oscctrl_init_referenced_generators+0x1b8>)
    7110:	4b22      	ldr	r3, [pc, #136]	; (719c <_oscctrl_init_referenced_generators+0x214>)
    7112:	4798      	blx	r3
    7114:	4603      	mov	r3, r0
    7116:	2b00      	cmp	r3, #0
    7118:	d1f9      	bne.n	710e <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    711a:	2207      	movs	r2, #7
    711c:	2100      	movs	r1, #0
    711e:	4808      	ldr	r0, [pc, #32]	; (7140 <_oscctrl_init_referenced_generators+0x1b8>)
    7120:	4b08      	ldr	r3, [pc, #32]	; (7144 <_oscctrl_init_referenced_generators+0x1bc>)
    7122:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    7124:	bf00      	nop
    7126:	4806      	ldr	r0, [pc, #24]	; (7140 <_oscctrl_init_referenced_generators+0x1b8>)
    7128:	4b07      	ldr	r3, [pc, #28]	; (7148 <_oscctrl_init_referenced_generators+0x1c0>)
    712a:	4798      	blx	r3
    712c:	4603      	mov	r3, r0
    712e:	2b00      	cmp	r3, #0
    7130:	d1f9      	bne.n	7126 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    7132:	bf00      	nop
    7134:	3710      	adds	r7, #16
    7136:	46bd      	mov	sp, r7
    7138:	bd80      	pop	{r7, pc}
    713a:	bf00      	nop
    713c:	40001000 	.word	0x40001000
    7140:	40001c00 	.word	0x40001c00
    7144:	00006b55 	.word	0x00006b55
    7148:	00006b15 	.word	0x00006b15
    714c:	00006db9 	.word	0x00006db9
    7150:	0401bb80 	.word	0x0401bb80
    7154:	00006e5b 	.word	0x00006e5b
    7158:	00006f13 	.word	0x00006f13
    715c:	00006e07 	.word	0x00006e07
    7160:	00006eab 	.word	0x00006eab
    7164:	00006e77 	.word	0x00006e77
    7168:	00006e43 	.word	0x00006e43
    716c:	00006e27 	.word	0x00006e27
    7170:	00006edf 	.word	0x00006edf
    7174:	00006ba5 	.word	0x00006ba5
    7178:	00006cb1 	.word	0x00006cb1
    717c:	00006ced 	.word	0x00006ced
    7180:	00006c75 	.word	0x00006c75
    7184:	000407a0 	.word	0x000407a0
    7188:	00006dd7 	.word	0x00006dd7
    718c:	00006d6b 	.word	0x00006d6b
    7190:	00006d43 	.word	0x00006d43
    7194:	00006c01 	.word	0x00006c01
    7198:	00006c39 	.word	0x00006c39
    719c:	00006b3d 	.word	0x00006b3d

000071a0 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    71a0:	b480      	push	{r7}
    71a2:	b083      	sub	sp, #12
    71a4:	af00      	add	r7, sp, #0
    71a6:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    71a8:	687b      	ldr	r3, [r7, #4]
    71aa:	69db      	ldr	r3, [r3, #28]
    71ac:	0a9b      	lsrs	r3, r3, #10
    71ae:	f003 0301 	and.w	r3, r3, #1
    71b2:	2b00      	cmp	r3, #0
    71b4:	bf14      	ite	ne
    71b6:	2301      	movne	r3, #1
    71b8:	2300      	moveq	r3, #0
    71ba:	b2db      	uxtb	r3, r3
}
    71bc:	4618      	mov	r0, r3
    71be:	370c      	adds	r7, #12
    71c0:	46bd      	mov	sp, r7
    71c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    71c6:	4770      	bx	lr

000071c8 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    71c8:	b480      	push	{r7}
    71ca:	b083      	sub	sp, #12
    71cc:	af00      	add	r7, sp, #0
    71ce:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    71d0:	687b      	ldr	r3, [r7, #4]
    71d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    71d6:	61da      	str	r2, [r3, #28]
}
    71d8:	bf00      	nop
    71da:	370c      	adds	r7, #12
    71dc:	46bd      	mov	sp, r7
    71de:	f85d 7b04 	ldr.w	r7, [sp], #4
    71e2:	4770      	bx	lr

000071e4 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    71e4:	b480      	push	{r7}
    71e6:	b083      	sub	sp, #12
    71e8:	af00      	add	r7, sp, #0
    71ea:	6078      	str	r0, [r7, #4]
    71ec:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    71ee:	687b      	ldr	r3, [r7, #4]
    71f0:	683a      	ldr	r2, [r7, #0]
    71f2:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    71f4:	bf00      	nop
    71f6:	370c      	adds	r7, #12
    71f8:	46bd      	mov	sp, r7
    71fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    71fe:	4770      	bx	lr

00007200 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    7200:	b480      	push	{r7}
    7202:	b083      	sub	sp, #12
    7204:	af00      	add	r7, sp, #0
    7206:	6078      	str	r0, [r7, #4]
    7208:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    720a:	687b      	ldr	r3, [r7, #4]
    720c:	683a      	ldr	r2, [r7, #0]
    720e:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7210:	bf00      	nop
    7212:	370c      	adds	r7, #12
    7214:	46bd      	mov	sp, r7
    7216:	f85d 7b04 	ldr.w	r7, [sp], #4
    721a:	4770      	bx	lr

0000721c <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    721c:	b480      	push	{r7}
    721e:	b083      	sub	sp, #12
    7220:	af00      	add	r7, sp, #0
    7222:	6078      	str	r0, [r7, #4]
    7224:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    7226:	687b      	ldr	r3, [r7, #4]
    7228:	683a      	ldr	r2, [r7, #0]
    722a:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    722c:	bf00      	nop
    722e:	370c      	adds	r7, #12
    7230:	46bd      	mov	sp, r7
    7232:	f85d 7b04 	ldr.w	r7, [sp], #4
    7236:	4770      	bx	lr

00007238 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    7238:	b480      	push	{r7}
    723a:	b083      	sub	sp, #12
    723c:	af00      	add	r7, sp, #0
    723e:	6078      	str	r0, [r7, #4]
    7240:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    7242:	687b      	ldr	r3, [r7, #4]
    7244:	683a      	ldr	r2, [r7, #0]
    7246:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    7248:	bf00      	nop
    724a:	370c      	adds	r7, #12
    724c:	46bd      	mov	sp, r7
    724e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7252:	4770      	bx	lr

00007254 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    7254:	b480      	push	{r7}
    7256:	b085      	sub	sp, #20
    7258:	af00      	add	r7, sp, #0
    725a:	6078      	str	r0, [r7, #4]
    725c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    725e:	687b      	ldr	r3, [r7, #4]
    7260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7262:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    7264:	68fb      	ldr	r3, [r7, #12]
    7266:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    726a:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    726c:	683b      	ldr	r3, [r7, #0]
    726e:	b2db      	uxtb	r3, r3
    7270:	68fa      	ldr	r2, [r7, #12]
    7272:	4313      	orrs	r3, r2
    7274:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    7276:	687b      	ldr	r3, [r7, #4]
    7278:	68fa      	ldr	r2, [r7, #12]
    727a:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    727c:	bf00      	nop
    727e:	3714      	adds	r7, #20
    7280:	46bd      	mov	sp, r7
    7282:	f85d 7b04 	ldr.w	r7, [sp], #4
    7286:	4770      	bx	lr

00007288 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    7288:	b480      	push	{r7}
    728a:	b085      	sub	sp, #20
    728c:	af00      	add	r7, sp, #0
    728e:	6078      	str	r0, [r7, #4]
    7290:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    7292:	687b      	ldr	r3, [r7, #4]
    7294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7296:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    7298:	68fb      	ldr	r3, [r7, #12]
    729a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    729e:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    72a0:	683b      	ldr	r3, [r7, #0]
    72a2:	041b      	lsls	r3, r3, #16
    72a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    72a8:	68fa      	ldr	r2, [r7, #12]
    72aa:	4313      	orrs	r3, r2
    72ac:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    72ae:	687b      	ldr	r3, [r7, #4]
    72b0:	68fa      	ldr	r2, [r7, #12]
    72b2:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    72b4:	bf00      	nop
    72b6:	3714      	adds	r7, #20
    72b8:	46bd      	mov	sp, r7
    72ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    72be:	4770      	bx	lr

000072c0 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    72c0:	b480      	push	{r7}
    72c2:	b083      	sub	sp, #12
    72c4:	af00      	add	r7, sp, #0
    72c6:	6078      	str	r0, [r7, #4]
    72c8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    72ca:	687b      	ldr	r3, [r7, #4]
    72cc:	683a      	ldr	r2, [r7, #0]
    72ce:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    72d0:	bf00      	nop
    72d2:	370c      	adds	r7, #12
    72d4:	46bd      	mov	sp, r7
    72d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    72da:	4770      	bx	lr

000072dc <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    72dc:	b480      	push	{r7}
    72de:	b083      	sub	sp, #12
    72e0:	af00      	add	r7, sp, #0
    72e2:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    72e4:	687b      	ldr	r3, [r7, #4]
    72e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    72e8:	4618      	mov	r0, r3
    72ea:	370c      	adds	r7, #12
    72ec:	46bd      	mov	sp, r7
    72ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    72f2:	4770      	bx	lr

000072f4 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    72f4:	b480      	push	{r7}
    72f6:	b085      	sub	sp, #20
    72f8:	af00      	add	r7, sp, #0
    72fa:	60f8      	str	r0, [r7, #12]
    72fc:	60b9      	str	r1, [r7, #8]
    72fe:	607a      	str	r2, [r7, #4]
	while (count--) {
    7300:	e007      	b.n	7312 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    7302:	68fb      	ldr	r3, [r7, #12]
    7304:	1c5a      	adds	r2, r3, #1
    7306:	60fa      	str	r2, [r7, #12]
    7308:	68ba      	ldr	r2, [r7, #8]
    730a:	1c51      	adds	r1, r2, #1
    730c:	60b9      	str	r1, [r7, #8]
    730e:	7812      	ldrb	r2, [r2, #0]
    7310:	701a      	strb	r2, [r3, #0]
	while (count--) {
    7312:	687b      	ldr	r3, [r7, #4]
    7314:	1e5a      	subs	r2, r3, #1
    7316:	607a      	str	r2, [r7, #4]
    7318:	2b00      	cmp	r3, #0
    731a:	d1f2      	bne.n	7302 <_qspi_memcpy+0xe>
	}
}
    731c:	bf00      	nop
    731e:	3714      	adds	r7, #20
    7320:	46bd      	mov	sp, r7
    7322:	f85d 7b04 	ldr.w	r7, [sp], #4
    7326:	4770      	bx	lr

00007328 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    7328:	b580      	push	{r7, lr}
    732a:	b082      	sub	sp, #8
    732c:	af00      	add	r7, sp, #0
    732e:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    7330:	4903      	ldr	r1, [pc, #12]	; (7340 <_qspi_end_transfer+0x18>)
    7332:	6878      	ldr	r0, [r7, #4]
    7334:	4b03      	ldr	r3, [pc, #12]	; (7344 <_qspi_end_transfer+0x1c>)
    7336:	4798      	blx	r3
}
    7338:	bf00      	nop
    733a:	3708      	adds	r7, #8
    733c:	46bd      	mov	sp, r7
    733e:	bd80      	pop	{r7, pc}
    7340:	01000002 	.word	0x01000002
    7344:	000071e5 	.word	0x000071e5

00007348 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    7348:	b580      	push	{r7, lr}
    734a:	b082      	sub	sp, #8
    734c:	af00      	add	r7, sp, #0
    734e:	6078      	str	r0, [r7, #4]
    7350:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    7352:	687b      	ldr	r3, [r7, #4]
    7354:	2b00      	cmp	r3, #0
    7356:	d004      	beq.n	7362 <_qspi_sync_init+0x1a>
    7358:	683b      	ldr	r3, [r7, #0]
    735a:	2b00      	cmp	r3, #0
    735c:	d001      	beq.n	7362 <_qspi_sync_init+0x1a>
    735e:	2301      	movs	r3, #1
    7360:	e000      	b.n	7364 <_qspi_sync_init+0x1c>
    7362:	2300      	movs	r3, #0
    7364:	f003 0301 	and.w	r3, r3, #1
    7368:	b2db      	uxtb	r3, r3
    736a:	2240      	movs	r2, #64	; 0x40
    736c:	490c      	ldr	r1, [pc, #48]	; (73a0 <_qspi_sync_init+0x58>)
    736e:	4618      	mov	r0, r3
    7370:	4b0c      	ldr	r3, [pc, #48]	; (73a4 <_qspi_sync_init+0x5c>)
    7372:	4798      	blx	r3
	dev->prvt = hw;
    7374:	687b      	ldr	r3, [r7, #4]
    7376:	683a      	ldr	r2, [r7, #0]
    7378:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    737a:	687b      	ldr	r3, [r7, #4]
    737c:	681b      	ldr	r3, [r3, #0]
    737e:	2101      	movs	r1, #1
    7380:	4618      	mov	r0, r3
    7382:	4b09      	ldr	r3, [pc, #36]	; (73a8 <_qspi_sync_init+0x60>)
    7384:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    7386:	4909      	ldr	r1, [pc, #36]	; (73ac <_qspi_sync_init+0x64>)
    7388:	6838      	ldr	r0, [r7, #0]
    738a:	4b09      	ldr	r3, [pc, #36]	; (73b0 <_qspi_sync_init+0x68>)
    738c:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    738e:	4909      	ldr	r1, [pc, #36]	; (73b4 <_qspi_sync_init+0x6c>)
    7390:	6838      	ldr	r0, [r7, #0]
    7392:	4b09      	ldr	r3, [pc, #36]	; (73b8 <_qspi_sync_init+0x70>)
    7394:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    7396:	2300      	movs	r3, #0
}
    7398:	4618      	mov	r0, r3
    739a:	3708      	adds	r7, #8
    739c:	46bd      	mov	sp, r7
    739e:	bd80      	pop	{r7, pc}
    73a0:	0001b3b8 	.word	0x0001b3b8
    73a4:	00004cdd 	.word	0x00004cdd
    73a8:	000071e5 	.word	0x000071e5
    73ac:	06000011 	.word	0x06000011
    73b0:	00007201 	.word	0x00007201
    73b4:	00241300 	.word	0x00241300
    73b8:	0000721d 	.word	0x0000721d

000073bc <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    73bc:	b580      	push	{r7, lr}
    73be:	b082      	sub	sp, #8
    73c0:	af00      	add	r7, sp, #0
    73c2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    73c4:	687b      	ldr	r3, [r7, #4]
    73c6:	681b      	ldr	r3, [r3, #0]
    73c8:	2102      	movs	r1, #2
    73ca:	4618      	mov	r0, r3
    73cc:	4b03      	ldr	r3, [pc, #12]	; (73dc <_qspi_sync_enable+0x20>)
    73ce:	4798      	blx	r3
	return ERR_NONE;
    73d0:	2300      	movs	r3, #0
}
    73d2:	4618      	mov	r0, r3
    73d4:	3708      	adds	r7, #8
    73d6:	46bd      	mov	sp, r7
    73d8:	bd80      	pop	{r7, pc}
    73da:	bf00      	nop
    73dc:	000071e5 	.word	0x000071e5

000073e0 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    73e0:	b580      	push	{r7, lr}
    73e2:	b082      	sub	sp, #8
    73e4:	af00      	add	r7, sp, #0
    73e6:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    73e8:	687b      	ldr	r3, [r7, #4]
    73ea:	681b      	ldr	r3, [r3, #0]
    73ec:	2100      	movs	r1, #0
    73ee:	4618      	mov	r0, r3
    73f0:	4b03      	ldr	r3, [pc, #12]	; (7400 <_qspi_sync_disable+0x20>)
    73f2:	4798      	blx	r3
	return ERR_NONE;
    73f4:	2300      	movs	r3, #0
}
    73f6:	4618      	mov	r0, r3
    73f8:	3708      	adds	r7, #8
    73fa:	46bd      	mov	sp, r7
    73fc:	bd80      	pop	{r7, pc}
    73fe:	bf00      	nop
    7400:	000071e5 	.word	0x000071e5

00007404 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7404:	b580      	push	{r7, lr}
    7406:	b084      	sub	sp, #16
    7408:	af00      	add	r7, sp, #0
    740a:	6078      	str	r0, [r7, #4]
    740c:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    740e:	687b      	ldr	r3, [r7, #4]
    7410:	681b      	ldr	r3, [r3, #0]
    7412:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    7414:	683b      	ldr	r3, [r7, #0]
    7416:	781b      	ldrb	r3, [r3, #0]
    7418:	f003 0320 	and.w	r3, r3, #32
    741c:	b2db      	uxtb	r3, r3
    741e:	2b00      	cmp	r3, #0
    7420:	d005      	beq.n	742e <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    7422:	683b      	ldr	r3, [r7, #0]
    7424:	689b      	ldr	r3, [r3, #8]
    7426:	4619      	mov	r1, r3
    7428:	68f8      	ldr	r0, [r7, #12]
    742a:	4b13      	ldr	r3, [pc, #76]	; (7478 <_qspi_sync_command_set_ifr+0x74>)
    742c:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    742e:	683b      	ldr	r3, [r7, #0]
    7430:	781b      	ldrb	r3, [r3, #0]
    7432:	f003 0310 	and.w	r3, r3, #16
    7436:	b2db      	uxtb	r3, r3
    7438:	2b00      	cmp	r3, #0
    743a:	d005      	beq.n	7448 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    743c:	683b      	ldr	r3, [r7, #0]
    743e:	791b      	ldrb	r3, [r3, #4]
    7440:	4619      	mov	r1, r3
    7442:	68f8      	ldr	r0, [r7, #12]
    7444:	4b0d      	ldr	r3, [pc, #52]	; (747c <_qspi_sync_command_set_ifr+0x78>)
    7446:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    7448:	683b      	ldr	r3, [r7, #0]
    744a:	781b      	ldrb	r3, [r3, #0]
    744c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7450:	b2db      	uxtb	r3, r3
    7452:	2b00      	cmp	r3, #0
    7454:	d005      	beq.n	7462 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    7456:	683b      	ldr	r3, [r7, #0]
    7458:	795b      	ldrb	r3, [r3, #5]
    745a:	4619      	mov	r1, r3
    745c:	68f8      	ldr	r0, [r7, #12]
    745e:	4b08      	ldr	r3, [pc, #32]	; (7480 <_qspi_sync_command_set_ifr+0x7c>)
    7460:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    7462:	683b      	ldr	r3, [r7, #0]
    7464:	681b      	ldr	r3, [r3, #0]
    7466:	4619      	mov	r1, r3
    7468:	68f8      	ldr	r0, [r7, #12]
    746a:	4b06      	ldr	r3, [pc, #24]	; (7484 <_qspi_sync_command_set_ifr+0x80>)
    746c:	4798      	blx	r3
}
    746e:	bf00      	nop
    7470:	3710      	adds	r7, #16
    7472:	46bd      	mov	sp, r7
    7474:	bd80      	pop	{r7, pc}
    7476:	bf00      	nop
    7478:	00007239 	.word	0x00007239
    747c:	00007255 	.word	0x00007255
    7480:	00007289 	.word	0x00007289
    7484:	000072c1 	.word	0x000072c1

00007488 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    7488:	b580      	push	{r7, lr}
    748a:	b084      	sub	sp, #16
    748c:	af00      	add	r7, sp, #0
    748e:	6078      	str	r0, [r7, #4]
    7490:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    7492:	687b      	ldr	r3, [r7, #4]
    7494:	681b      	ldr	r3, [r3, #0]
    7496:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    7498:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    749c:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    749e:	683b      	ldr	r3, [r7, #0]
    74a0:	781b      	ldrb	r3, [r3, #0]
    74a2:	f003 0320 	and.w	r3, r3, #32
    74a6:	b2db      	uxtb	r3, r3
    74a8:	2b00      	cmp	r3, #0
    74aa:	d004      	beq.n	74b6 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    74ac:	683b      	ldr	r3, [r7, #0]
    74ae:	689b      	ldr	r3, [r3, #8]
    74b0:	68fa      	ldr	r2, [r7, #12]
    74b2:	4413      	add	r3, r2
    74b4:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    74b6:	68b8      	ldr	r0, [r7, #8]
    74b8:	4b18      	ldr	r3, [pc, #96]	; (751c <_qspi_sync_run_transfer+0x94>)
    74ba:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    74bc:	683b      	ldr	r3, [r7, #0]
    74be:	691b      	ldr	r3, [r3, #16]
    74c0:	2b00      	cmp	r3, #0
    74c2:	d103      	bne.n	74cc <_qspi_sync_run_transfer+0x44>
    74c4:	683b      	ldr	r3, [r7, #0]
    74c6:	695b      	ldr	r3, [r3, #20]
    74c8:	2b00      	cmp	r3, #0
    74ca:	d001      	beq.n	74d0 <_qspi_sync_run_transfer+0x48>
    74cc:	2301      	movs	r3, #1
    74ce:	e000      	b.n	74d2 <_qspi_sync_run_transfer+0x4a>
    74d0:	2300      	movs	r3, #0
    74d2:	f003 0301 	and.w	r3, r3, #1
    74d6:	b2db      	uxtb	r3, r3
    74d8:	2282      	movs	r2, #130	; 0x82
    74da:	4911      	ldr	r1, [pc, #68]	; (7520 <_qspi_sync_run_transfer+0x98>)
    74dc:	4618      	mov	r0, r3
    74de:	4b11      	ldr	r3, [pc, #68]	; (7524 <_qspi_sync_run_transfer+0x9c>)
    74e0:	4798      	blx	r3

	if (cmd->tx_buf) {
    74e2:	683b      	ldr	r3, [r7, #0]
    74e4:	691b      	ldr	r3, [r3, #16]
    74e6:	2b00      	cmp	r3, #0
    74e8:	d008      	beq.n	74fc <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    74ea:	683b      	ldr	r3, [r7, #0]
    74ec:	6919      	ldr	r1, [r3, #16]
    74ee:	683b      	ldr	r3, [r7, #0]
    74f0:	68db      	ldr	r3, [r3, #12]
    74f2:	461a      	mov	r2, r3
    74f4:	68f8      	ldr	r0, [r7, #12]
    74f6:	4b0c      	ldr	r3, [pc, #48]	; (7528 <_qspi_sync_run_transfer+0xa0>)
    74f8:	4798      	blx	r3
    74fa:	e007      	b.n	750c <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    74fc:	683b      	ldr	r3, [r7, #0]
    74fe:	6958      	ldr	r0, [r3, #20]
    7500:	683b      	ldr	r3, [r7, #0]
    7502:	68db      	ldr	r3, [r3, #12]
    7504:	461a      	mov	r2, r3
    7506:	68f9      	ldr	r1, [r7, #12]
    7508:	4b07      	ldr	r3, [pc, #28]	; (7528 <_qspi_sync_run_transfer+0xa0>)
    750a:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    750c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7510:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    7514:	bf00      	nop
    7516:	3710      	adds	r7, #16
    7518:	46bd      	mov	sp, r7
    751a:	bd80      	pop	{r7, pc}
    751c:	000072dd 	.word	0x000072dd
    7520:	0001b3b8 	.word	0x0001b3b8
    7524:	00004cdd 	.word	0x00004cdd
    7528:	000072f5 	.word	0x000072f5

0000752c <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    752c:	b580      	push	{r7, lr}
    752e:	b082      	sub	sp, #8
    7530:	af00      	add	r7, sp, #0
    7532:	6078      	str	r0, [r7, #4]
    7534:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    7536:	6839      	ldr	r1, [r7, #0]
    7538:	6878      	ldr	r0, [r7, #4]
    753a:	4b14      	ldr	r3, [pc, #80]	; (758c <_qspi_sync_serial_run_command+0x60>)
    753c:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    753e:	683b      	ldr	r3, [r7, #0]
    7540:	781b      	ldrb	r3, [r3, #0]
    7542:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    7546:	b2db      	uxtb	r3, r3
    7548:	2b00      	cmp	r3, #0
    754a:	d003      	beq.n	7554 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    754c:	6839      	ldr	r1, [r7, #0]
    754e:	6878      	ldr	r0, [r7, #4]
    7550:	4b0f      	ldr	r3, [pc, #60]	; (7590 <_qspi_sync_serial_run_command+0x64>)
    7552:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    7554:	687b      	ldr	r3, [r7, #4]
    7556:	681b      	ldr	r3, [r3, #0]
    7558:	4618      	mov	r0, r3
    755a:	4b0e      	ldr	r3, [pc, #56]	; (7594 <_qspi_sync_serial_run_command+0x68>)
    755c:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    755e:	bf00      	nop
    7560:	687b      	ldr	r3, [r7, #4]
    7562:	681b      	ldr	r3, [r3, #0]
    7564:	4618      	mov	r0, r3
    7566:	4b0c      	ldr	r3, [pc, #48]	; (7598 <_qspi_sync_serial_run_command+0x6c>)
    7568:	4798      	blx	r3
    756a:	4603      	mov	r3, r0
    756c:	f083 0301 	eor.w	r3, r3, #1
    7570:	b2db      	uxtb	r3, r3
    7572:	2b00      	cmp	r3, #0
    7574:	d1f4      	bne.n	7560 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    7576:	687b      	ldr	r3, [r7, #4]
    7578:	681b      	ldr	r3, [r3, #0]
    757a:	4618      	mov	r0, r3
    757c:	4b07      	ldr	r3, [pc, #28]	; (759c <_qspi_sync_serial_run_command+0x70>)
    757e:	4798      	blx	r3
	return ERR_NONE;
    7580:	2300      	movs	r3, #0
}
    7582:	4618      	mov	r0, r3
    7584:	3708      	adds	r7, #8
    7586:	46bd      	mov	sp, r7
    7588:	bd80      	pop	{r7, pc}
    758a:	bf00      	nop
    758c:	00007405 	.word	0x00007405
    7590:	00007489 	.word	0x00007489
    7594:	00007329 	.word	0x00007329
    7598:	000071a1 	.word	0x000071a1
    759c:	000071c9 	.word	0x000071c9

000075a0 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    75a0:	b480      	push	{r7}
    75a2:	b083      	sub	sp, #12
    75a4:	af00      	add	r7, sp, #0
    75a6:	6078      	str	r0, [r7, #4]
    75a8:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    75aa:	bf00      	nop
    75ac:	687b      	ldr	r3, [r7, #4]
    75ae:	691a      	ldr	r2, [r3, #16]
    75b0:	683b      	ldr	r3, [r7, #0]
    75b2:	4013      	ands	r3, r2
    75b4:	2b00      	cmp	r3, #0
    75b6:	d1f9      	bne.n	75ac <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    75b8:	bf00      	nop
    75ba:	370c      	adds	r7, #12
    75bc:	46bd      	mov	sp, r7
    75be:	f85d 7b04 	ldr.w	r7, [sp], #4
    75c2:	4770      	bx	lr

000075c4 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    75c4:	b480      	push	{r7}
    75c6:	b083      	sub	sp, #12
    75c8:	af00      	add	r7, sp, #0
    75ca:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    75cc:	687b      	ldr	r3, [r7, #4]
    75ce:	f44f 7280 	mov.w	r2, #256	; 0x100
    75d2:	819a      	strh	r2, [r3, #12]
}
    75d4:	bf00      	nop
    75d6:	370c      	adds	r7, #12
    75d8:	46bd      	mov	sp, r7
    75da:	f85d 7b04 	ldr.w	r7, [sp], #4
    75de:	4770      	bx	lr

000075e0 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    75e0:	b480      	push	{r7}
    75e2:	b083      	sub	sp, #12
    75e4:	af00      	add	r7, sp, #0
    75e6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    75e8:	687b      	ldr	r3, [r7, #4]
    75ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    75ee:	819a      	strh	r2, [r3, #12]
}
    75f0:	bf00      	nop
    75f2:	370c      	adds	r7, #12
    75f4:	46bd      	mov	sp, r7
    75f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    75fa:	4770      	bx	lr

000075fc <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    75fc:	b480      	push	{r7}
    75fe:	b083      	sub	sp, #12
    7600:	af00      	add	r7, sp, #0
    7602:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    7604:	687b      	ldr	r3, [r7, #4]
    7606:	899b      	ldrh	r3, [r3, #12]
    7608:	b29b      	uxth	r3, r3
}
    760a:	4618      	mov	r0, r3
    760c:	370c      	adds	r7, #12
    760e:	46bd      	mov	sp, r7
    7610:	f85d 7b04 	ldr.w	r7, [sp], #4
    7614:	4770      	bx	lr

00007616 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    7616:	b480      	push	{r7}
    7618:	b083      	sub	sp, #12
    761a:	af00      	add	r7, sp, #0
    761c:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    761e:	687b      	ldr	r3, [r7, #4]
    7620:	895b      	ldrh	r3, [r3, #10]
    7622:	b29b      	uxth	r3, r3
}
    7624:	4618      	mov	r0, r3
    7626:	370c      	adds	r7, #12
    7628:	46bd      	mov	sp, r7
    762a:	f85d 7b04 	ldr.w	r7, [sp], #4
    762e:	4770      	bx	lr

00007630 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    7630:	b580      	push	{r7, lr}
    7632:	b082      	sub	sp, #8
    7634:	af00      	add	r7, sp, #0
    7636:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    7638:	687b      	ldr	r3, [r7, #4]
    763a:	881b      	ldrh	r3, [r3, #0]
    763c:	b29b      	uxth	r3, r3
    763e:	f043 0301 	orr.w	r3, r3, #1
    7642:	b29a      	uxth	r2, r3
    7644:	687b      	ldr	r3, [r7, #4]
    7646:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    7648:	2101      	movs	r1, #1
    764a:	6878      	ldr	r0, [r7, #4]
    764c:	4b02      	ldr	r3, [pc, #8]	; (7658 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    764e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    7650:	bf00      	nop
    7652:	3708      	adds	r7, #8
    7654:	46bd      	mov	sp, r7
    7656:	bd80      	pop	{r7, pc}
    7658:	000075a1 	.word	0x000075a1

0000765c <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    765c:	b580      	push	{r7, lr}
    765e:	b082      	sub	sp, #8
    7660:	af00      	add	r7, sp, #0
    7662:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    7664:	687b      	ldr	r3, [r7, #4]
    7666:	881b      	ldrh	r3, [r3, #0]
    7668:	b29b      	uxth	r3, r3
    766a:	f043 0302 	orr.w	r3, r3, #2
    766e:	b29a      	uxth	r2, r3
    7670:	687b      	ldr	r3, [r7, #4]
    7672:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7674:	f248 0103 	movw	r1, #32771	; 0x8003
    7678:	6878      	ldr	r0, [r7, #4]
    767a:	4b03      	ldr	r3, [pc, #12]	; (7688 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    767c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    767e:	bf00      	nop
    7680:	3708      	adds	r7, #8
    7682:	46bd      	mov	sp, r7
    7684:	bd80      	pop	{r7, pc}
    7686:	bf00      	nop
    7688:	000075a1 	.word	0x000075a1

0000768c <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    768c:	b580      	push	{r7, lr}
    768e:	b084      	sub	sp, #16
    7690:	af00      	add	r7, sp, #0
    7692:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    7694:	f248 0103 	movw	r1, #32771	; 0x8003
    7698:	6878      	ldr	r0, [r7, #4]
    769a:	4b0a      	ldr	r3, [pc, #40]	; (76c4 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    769c:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    769e:	687b      	ldr	r3, [r7, #4]
    76a0:	881b      	ldrh	r3, [r3, #0]
    76a2:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    76a4:	89fb      	ldrh	r3, [r7, #14]
    76a6:	085b      	lsrs	r3, r3, #1
    76a8:	b29b      	uxth	r3, r3
    76aa:	f003 0301 	and.w	r3, r3, #1
    76ae:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    76b0:	89fb      	ldrh	r3, [r7, #14]
    76b2:	2b00      	cmp	r3, #0
    76b4:	bf14      	ite	ne
    76b6:	2301      	movne	r3, #1
    76b8:	2300      	moveq	r3, #0
    76ba:	b2db      	uxtb	r3, r3
}
    76bc:	4618      	mov	r0, r3
    76be:	3710      	adds	r7, #16
    76c0:	46bd      	mov	sp, r7
    76c2:	bd80      	pop	{r7, pc}
    76c4:	000075a1 	.word	0x000075a1

000076c8 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    76c8:	b580      	push	{r7, lr}
    76ca:	b082      	sub	sp, #8
    76cc:	af00      	add	r7, sp, #0
    76ce:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    76d0:	687b      	ldr	r3, [r7, #4]
    76d2:	881b      	ldrh	r3, [r3, #0]
    76d4:	b29b      	uxth	r3, r3
    76d6:	f023 0302 	bic.w	r3, r3, #2
    76da:	b29a      	uxth	r2, r3
    76dc:	687b      	ldr	r3, [r7, #4]
    76de:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    76e0:	f248 0103 	movw	r1, #32771	; 0x8003
    76e4:	6878      	ldr	r0, [r7, #4]
    76e6:	4b03      	ldr	r3, [pc, #12]	; (76f4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    76e8:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    76ea:	bf00      	nop
    76ec:	3708      	adds	r7, #8
    76ee:	46bd      	mov	sp, r7
    76f0:	bd80      	pop	{r7, pc}
    76f2:	bf00      	nop
    76f4:	000075a1 	.word	0x000075a1

000076f8 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    76f8:	b580      	push	{r7, lr}
    76fa:	b082      	sub	sp, #8
    76fc:	af00      	add	r7, sp, #0
    76fe:	6078      	str	r0, [r7, #4]
    7700:	460b      	mov	r3, r1
    7702:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    7704:	687b      	ldr	r3, [r7, #4]
    7706:	887a      	ldrh	r2, [r7, #2]
    7708:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    770a:	f248 0103 	movw	r1, #32771	; 0x8003
    770e:	6878      	ldr	r0, [r7, #4]
    7710:	4b02      	ldr	r3, [pc, #8]	; (771c <hri_rtcmode0_write_CTRLA_reg+0x24>)
    7712:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    7714:	bf00      	nop
    7716:	3708      	adds	r7, #8
    7718:	46bd      	mov	sp, r7
    771a:	bd80      	pop	{r7, pc}
    771c:	000075a1 	.word	0x000075a1

00007720 <hri_rtcmode0_write_COUNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_COUNT_reg(const void *const hw, hri_rtcmode0_count_reg_t data)
{
    7720:	b580      	push	{r7, lr}
    7722:	b082      	sub	sp, #8
    7724:	af00      	add	r7, sp, #0
    7726:	6078      	str	r0, [r7, #4]
    7728:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    772a:	687b      	ldr	r3, [r7, #4]
    772c:	683a      	ldr	r2, [r7, #0]
    772e:	619a      	str	r2, [r3, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    7730:	2108      	movs	r1, #8
    7732:	6878      	ldr	r0, [r7, #4]
    7734:	4b02      	ldr	r3, [pc, #8]	; (7740 <hri_rtcmode0_write_COUNT_reg+0x20>)
    7736:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    7738:	bf00      	nop
    773a:	3708      	adds	r7, #8
    773c:	46bd      	mov	sp, r7
    773e:	bd80      	pop	{r7, pc}
    7740:	000075a1 	.word	0x000075a1

00007744 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    7744:	b580      	push	{r7, lr}
    7746:	b082      	sub	sp, #8
    7748:	af00      	add	r7, sp, #0
    774a:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    774c:	2108      	movs	r1, #8
    774e:	6878      	ldr	r0, [r7, #4]
    7750:	4b03      	ldr	r3, [pc, #12]	; (7760 <hri_rtcmode0_read_COUNT_reg+0x1c>)
    7752:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    7754:	687b      	ldr	r3, [r7, #4]
    7756:	699b      	ldr	r3, [r3, #24]
}
    7758:	4618      	mov	r0, r3
    775a:	3708      	adds	r7, #8
    775c:	46bd      	mov	sp, r7
    775e:	bd80      	pop	{r7, pc}
    7760:	000075a1 	.word	0x000075a1

00007764 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    7764:	b480      	push	{r7}
    7766:	b083      	sub	sp, #12
    7768:	af00      	add	r7, sp, #0
    776a:	6078      	str	r0, [r7, #4]
    776c:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    776e:	687b      	ldr	r3, [r7, #4]
    7770:	683a      	ldr	r2, [r7, #0]
    7772:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    7774:	bf00      	nop
    7776:	370c      	adds	r7, #12
    7778:	46bd      	mov	sp, r7
    777a:	f85d 7b04 	ldr.w	r7, [sp], #4
    777e:	4770      	bx	lr

00007780 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    7780:	b580      	push	{r7, lr}
    7782:	b082      	sub	sp, #8
    7784:	af00      	add	r7, sp, #0
    7786:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    7788:	687b      	ldr	r3, [r7, #4]
    778a:	2b00      	cmp	r3, #0
    778c:	d005      	beq.n	779a <_calendar_init+0x1a>
    778e:	687b      	ldr	r3, [r7, #4]
    7790:	681b      	ldr	r3, [r3, #0]
    7792:	2b00      	cmp	r3, #0
    7794:	d001      	beq.n	779a <_calendar_init+0x1a>
    7796:	2301      	movs	r3, #1
    7798:	e000      	b.n	779c <_calendar_init+0x1c>
    779a:	2300      	movs	r3, #0
    779c:	f003 0301 	and.w	r3, r3, #1
    77a0:	b2db      	uxtb	r3, r3
    77a2:	222f      	movs	r2, #47	; 0x2f
    77a4:	491b      	ldr	r1, [pc, #108]	; (7814 <_calendar_init+0x94>)
    77a6:	4618      	mov	r0, r3
    77a8:	4b1b      	ldr	r3, [pc, #108]	; (7818 <_calendar_init+0x98>)
    77aa:	4798      	blx	r3

	_rtc_dev = dev;
    77ac:	4a1b      	ldr	r2, [pc, #108]	; (781c <_calendar_init+0x9c>)
    77ae:	687b      	ldr	r3, [r7, #4]
    77b0:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    77b2:	687b      	ldr	r3, [r7, #4]
    77b4:	681b      	ldr	r3, [r3, #0]
    77b6:	4618      	mov	r0, r3
    77b8:	4b19      	ldr	r3, [pc, #100]	; (7820 <_calendar_init+0xa0>)
    77ba:	4798      	blx	r3
    77bc:	4603      	mov	r3, r0
    77be:	2b00      	cmp	r3, #0
    77c0:	d00a      	beq.n	77d8 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    77c2:	687b      	ldr	r3, [r7, #4]
    77c4:	681b      	ldr	r3, [r3, #0]
    77c6:	4618      	mov	r0, r3
    77c8:	4b16      	ldr	r3, [pc, #88]	; (7824 <_calendar_init+0xa4>)
    77ca:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    77cc:	687b      	ldr	r3, [r7, #4]
    77ce:	681b      	ldr	r3, [r3, #0]
    77d0:	2102      	movs	r1, #2
    77d2:	4618      	mov	r0, r3
    77d4:	4b14      	ldr	r3, [pc, #80]	; (7828 <_calendar_init+0xa8>)
    77d6:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    77d8:	687b      	ldr	r3, [r7, #4]
    77da:	681b      	ldr	r3, [r3, #0]
    77dc:	4618      	mov	r0, r3
    77de:	4b13      	ldr	r3, [pc, #76]	; (782c <_calendar_init+0xac>)
    77e0:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    77e2:	687b      	ldr	r3, [r7, #4]
    77e4:	681b      	ldr	r3, [r3, #0]
    77e6:	2101      	movs	r1, #1
    77e8:	4618      	mov	r0, r3
    77ea:	4b0f      	ldr	r3, [pc, #60]	; (7828 <_calendar_init+0xa8>)
    77ec:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    77ee:	687b      	ldr	r3, [r7, #4]
    77f0:	681b      	ldr	r3, [r3, #0]
    77f2:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    77f6:	4618      	mov	r0, r3
    77f8:	4b0d      	ldr	r3, [pc, #52]	; (7830 <_calendar_init+0xb0>)
    77fa:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    77fc:	687b      	ldr	r3, [r7, #4]
    77fe:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    7800:	2100      	movs	r1, #0
    7802:	4618      	mov	r0, r3
    7804:	4b0b      	ldr	r3, [pc, #44]	; (7834 <_calendar_init+0xb4>)
    7806:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    7808:	2300      	movs	r3, #0
}
    780a:	4618      	mov	r0, r3
    780c:	3708      	adds	r7, #8
    780e:	46bd      	mov	sp, r7
    7810:	bd80      	pop	{r7, pc}
    7812:	bf00      	nop
    7814:	0001b3d0 	.word	0x0001b3d0
    7818:	00004cdd 	.word	0x00004cdd
    781c:	20002344 	.word	0x20002344
    7820:	0000768d 	.word	0x0000768d
    7824:	000076c9 	.word	0x000076c9
    7828:	000075a1 	.word	0x000075a1
    782c:	00007631 	.word	0x00007631
    7830:	000076f9 	.word	0x000076f9
    7834:	00007765 	.word	0x00007765

00007838 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    7838:	b580      	push	{r7, lr}
    783a:	b082      	sub	sp, #8
    783c:	af00      	add	r7, sp, #0
    783e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    7840:	687b      	ldr	r3, [r7, #4]
    7842:	2b00      	cmp	r3, #0
    7844:	d005      	beq.n	7852 <_calendar_enable+0x1a>
    7846:	687b      	ldr	r3, [r7, #4]
    7848:	681b      	ldr	r3, [r3, #0]
    784a:	2b00      	cmp	r3, #0
    784c:	d001      	beq.n	7852 <_calendar_enable+0x1a>
    784e:	2301      	movs	r3, #1
    7850:	e000      	b.n	7854 <_calendar_enable+0x1c>
    7852:	2300      	movs	r3, #0
    7854:	f003 0301 	and.w	r3, r3, #1
    7858:	b2db      	uxtb	r3, r3
    785a:	2275      	movs	r2, #117	; 0x75
    785c:	4906      	ldr	r1, [pc, #24]	; (7878 <_calendar_enable+0x40>)
    785e:	4618      	mov	r0, r3
    7860:	4b06      	ldr	r3, [pc, #24]	; (787c <_calendar_enable+0x44>)
    7862:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    7864:	687b      	ldr	r3, [r7, #4]
    7866:	681b      	ldr	r3, [r3, #0]
    7868:	4618      	mov	r0, r3
    786a:	4b05      	ldr	r3, [pc, #20]	; (7880 <_calendar_enable+0x48>)
    786c:	4798      	blx	r3

	return ERR_NONE;
    786e:	2300      	movs	r3, #0
}
    7870:	4618      	mov	r0, r3
    7872:	3708      	adds	r7, #8
    7874:	46bd      	mov	sp, r7
    7876:	bd80      	pop	{r7, pc}
    7878:	0001b3d0 	.word	0x0001b3d0
    787c:	00004cdd 	.word	0x00004cdd
    7880:	0000765d 	.word	0x0000765d

00007884 <_calendar_set_counter>:

/**
 * \brief Set the current calendar time to desired time.
 */
int32_t _calendar_set_counter(struct calendar_dev *const dev, const uint32_t counter)
{
    7884:	b580      	push	{r7, lr}
    7886:	b082      	sub	sp, #8
    7888:	af00      	add	r7, sp, #0
    788a:	6078      	str	r0, [r7, #4]
    788c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->hw);
    788e:	687b      	ldr	r3, [r7, #4]
    7890:	2b00      	cmp	r3, #0
    7892:	d005      	beq.n	78a0 <_calendar_set_counter+0x1c>
    7894:	687b      	ldr	r3, [r7, #4]
    7896:	681b      	ldr	r3, [r3, #0]
    7898:	2b00      	cmp	r3, #0
    789a:	d001      	beq.n	78a0 <_calendar_set_counter+0x1c>
    789c:	2301      	movs	r3, #1
    789e:	e000      	b.n	78a2 <_calendar_set_counter+0x1e>
    78a0:	2300      	movs	r3, #0
    78a2:	f003 0301 	and.w	r3, r3, #1
    78a6:	b2db      	uxtb	r3, r3
    78a8:	228d      	movs	r2, #141	; 0x8d
    78aa:	4907      	ldr	r1, [pc, #28]	; (78c8 <_calendar_set_counter+0x44>)
    78ac:	4618      	mov	r0, r3
    78ae:	4b07      	ldr	r3, [pc, #28]	; (78cc <_calendar_set_counter+0x48>)
    78b0:	4798      	blx	r3

	hri_rtcmode0_write_COUNT_reg(dev->hw, counter);
    78b2:	687b      	ldr	r3, [r7, #4]
    78b4:	681b      	ldr	r3, [r3, #0]
    78b6:	6839      	ldr	r1, [r7, #0]
    78b8:	4618      	mov	r0, r3
    78ba:	4b05      	ldr	r3, [pc, #20]	; (78d0 <_calendar_set_counter+0x4c>)
    78bc:	4798      	blx	r3

	return ERR_NONE;
    78be:	2300      	movs	r3, #0
}
    78c0:	4618      	mov	r0, r3
    78c2:	3708      	adds	r7, #8
    78c4:	46bd      	mov	sp, r7
    78c6:	bd80      	pop	{r7, pc}
    78c8:	0001b3d0 	.word	0x0001b3d0
    78cc:	00004cdd 	.word	0x00004cdd
    78d0:	00007721 	.word	0x00007721

000078d4 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    78d4:	b580      	push	{r7, lr}
    78d6:	b082      	sub	sp, #8
    78d8:	af00      	add	r7, sp, #0
    78da:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    78dc:	687b      	ldr	r3, [r7, #4]
    78de:	2b00      	cmp	r3, #0
    78e0:	d005      	beq.n	78ee <_calendar_get_counter+0x1a>
    78e2:	687b      	ldr	r3, [r7, #4]
    78e4:	681b      	ldr	r3, [r3, #0]
    78e6:	2b00      	cmp	r3, #0
    78e8:	d001      	beq.n	78ee <_calendar_get_counter+0x1a>
    78ea:	2301      	movs	r3, #1
    78ec:	e000      	b.n	78f0 <_calendar_get_counter+0x1c>
    78ee:	2300      	movs	r3, #0
    78f0:	f003 0301 	and.w	r3, r3, #1
    78f4:	b2db      	uxtb	r3, r3
    78f6:	2299      	movs	r2, #153	; 0x99
    78f8:	4906      	ldr	r1, [pc, #24]	; (7914 <_calendar_get_counter+0x40>)
    78fa:	4618      	mov	r0, r3
    78fc:	4b06      	ldr	r3, [pc, #24]	; (7918 <_calendar_get_counter+0x44>)
    78fe:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    7900:	687b      	ldr	r3, [r7, #4]
    7902:	681b      	ldr	r3, [r3, #0]
    7904:	4618      	mov	r0, r3
    7906:	4b05      	ldr	r3, [pc, #20]	; (791c <_calendar_get_counter+0x48>)
    7908:	4798      	blx	r3
    790a:	4603      	mov	r3, r0
}
    790c:	4618      	mov	r0, r3
    790e:	3708      	adds	r7, #8
    7910:	46bd      	mov	sp, r7
    7912:	bd80      	pop	{r7, pc}
    7914:	0001b3d0 	.word	0x0001b3d0
    7918:	00004cdd 	.word	0x00004cdd
    791c:	00007745 	.word	0x00007745

00007920 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    7920:	b580      	push	{r7, lr}
    7922:	b084      	sub	sp, #16
    7924:	af00      	add	r7, sp, #0
    7926:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    7928:	687b      	ldr	r3, [r7, #4]
    792a:	681b      	ldr	r3, [r3, #0]
    792c:	4618      	mov	r0, r3
    792e:	4b19      	ldr	r3, [pc, #100]	; (7994 <_rtc_interrupt_handler+0x74>)
    7930:	4798      	blx	r3
    7932:	4603      	mov	r3, r0
    7934:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    7936:	687b      	ldr	r3, [r7, #4]
    7938:	681b      	ldr	r3, [r3, #0]
    793a:	4618      	mov	r0, r3
    793c:	4b16      	ldr	r3, [pc, #88]	; (7998 <_rtc_interrupt_handler+0x78>)
    793e:	4798      	blx	r3
    7940:	4603      	mov	r3, r0
    7942:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    7944:	89fa      	ldrh	r2, [r7, #14]
    7946:	89bb      	ldrh	r3, [r7, #12]
    7948:	4013      	ands	r3, r2
    794a:	b29b      	uxth	r3, r3
    794c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7950:	2b00      	cmp	r3, #0
    7952:	d009      	beq.n	7968 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    7954:	687b      	ldr	r3, [r7, #4]
    7956:	685b      	ldr	r3, [r3, #4]
    7958:	6878      	ldr	r0, [r7, #4]
    795a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    795c:	687b      	ldr	r3, [r7, #4]
    795e:	681b      	ldr	r3, [r3, #0]
    7960:	4618      	mov	r0, r3
    7962:	4b0e      	ldr	r3, [pc, #56]	; (799c <_rtc_interrupt_handler+0x7c>)
    7964:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    7966:	e010      	b.n	798a <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    7968:	89fa      	ldrh	r2, [r7, #14]
    796a:	89bb      	ldrh	r3, [r7, #12]
    796c:	4013      	ands	r3, r2
    796e:	b29b      	uxth	r3, r3
    7970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7974:	2b00      	cmp	r3, #0
    7976:	d008      	beq.n	798a <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    7978:	687b      	ldr	r3, [r7, #4]
    797a:	689b      	ldr	r3, [r3, #8]
    797c:	6878      	ldr	r0, [r7, #4]
    797e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    7980:	687b      	ldr	r3, [r7, #4]
    7982:	681b      	ldr	r3, [r3, #0]
    7984:	4618      	mov	r0, r3
    7986:	4b06      	ldr	r3, [pc, #24]	; (79a0 <_rtc_interrupt_handler+0x80>)
    7988:	4798      	blx	r3
}
    798a:	bf00      	nop
    798c:	3710      	adds	r7, #16
    798e:	46bd      	mov	sp, r7
    7990:	bd80      	pop	{r7, pc}
    7992:	bf00      	nop
    7994:	000075fd 	.word	0x000075fd
    7998:	00007617 	.word	0x00007617
    799c:	000075c5 	.word	0x000075c5
    79a0:	000075e1 	.word	0x000075e1

000079a4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    79a4:	b580      	push	{r7, lr}
    79a6:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    79a8:	4b03      	ldr	r3, [pc, #12]	; (79b8 <RTC_Handler+0x14>)
    79aa:	681b      	ldr	r3, [r3, #0]
    79ac:	4618      	mov	r0, r3
    79ae:	4b03      	ldr	r3, [pc, #12]	; (79bc <RTC_Handler+0x18>)
    79b0:	4798      	blx	r3
}
    79b2:	bf00      	nop
    79b4:	bd80      	pop	{r7, pc}
    79b6:	bf00      	nop
    79b8:	20002344 	.word	0x20002344
    79bc:	00007921 	.word	0x00007921

000079c0 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    79c0:	b480      	push	{r7}
    79c2:	b083      	sub	sp, #12
    79c4:	af00      	add	r7, sp, #0
    79c6:	6078      	str	r0, [r7, #4]
    79c8:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    79ca:	bf00      	nop
    79cc:	687b      	ldr	r3, [r7, #4]
    79ce:	69da      	ldr	r2, [r3, #28]
    79d0:	683b      	ldr	r3, [r7, #0]
    79d2:	4013      	ands	r3, r2
    79d4:	2b00      	cmp	r3, #0
    79d6:	d1f9      	bne.n	79cc <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    79d8:	bf00      	nop
    79da:	370c      	adds	r7, #12
    79dc:	46bd      	mov	sp, r7
    79de:	f85d 7b04 	ldr.w	r7, [sp], #4
    79e2:	4770      	bx	lr

000079e4 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    79e4:	b480      	push	{r7}
    79e6:	b083      	sub	sp, #12
    79e8:	af00      	add	r7, sp, #0
    79ea:	6078      	str	r0, [r7, #4]
    79ec:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    79ee:	687b      	ldr	r3, [r7, #4]
    79f0:	69da      	ldr	r2, [r3, #28]
    79f2:	683b      	ldr	r3, [r7, #0]
    79f4:	4013      	ands	r3, r2
    79f6:	2b00      	cmp	r3, #0
    79f8:	bf14      	ite	ne
    79fa:	2301      	movne	r3, #1
    79fc:	2300      	moveq	r3, #0
    79fe:	b2db      	uxtb	r3, r3
}
    7a00:	4618      	mov	r0, r3
    7a02:	370c      	adds	r7, #12
    7a04:	46bd      	mov	sp, r7
    7a06:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a0a:	4770      	bx	lr

00007a0c <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    7a0c:	b480      	push	{r7}
    7a0e:	b083      	sub	sp, #12
    7a10:	af00      	add	r7, sp, #0
    7a12:	6078      	str	r0, [r7, #4]
    7a14:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    7a16:	bf00      	nop
    7a18:	687b      	ldr	r3, [r7, #4]
    7a1a:	69da      	ldr	r2, [r3, #28]
    7a1c:	683b      	ldr	r3, [r7, #0]
    7a1e:	4013      	ands	r3, r2
    7a20:	2b00      	cmp	r3, #0
    7a22:	d1f9      	bne.n	7a18 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    7a24:	bf00      	nop
    7a26:	370c      	adds	r7, #12
    7a28:	46bd      	mov	sp, r7
    7a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a2e:	4770      	bx	lr

00007a30 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    7a30:	b480      	push	{r7}
    7a32:	b083      	sub	sp, #12
    7a34:	af00      	add	r7, sp, #0
    7a36:	6078      	str	r0, [r7, #4]
    7a38:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    7a3a:	687b      	ldr	r3, [r7, #4]
    7a3c:	69da      	ldr	r2, [r3, #28]
    7a3e:	683b      	ldr	r3, [r7, #0]
    7a40:	4013      	ands	r3, r2
    7a42:	2b00      	cmp	r3, #0
    7a44:	bf14      	ite	ne
    7a46:	2301      	movne	r3, #1
    7a48:	2300      	moveq	r3, #0
    7a4a:	b2db      	uxtb	r3, r3
}
    7a4c:	4618      	mov	r0, r3
    7a4e:	370c      	adds	r7, #12
    7a50:	46bd      	mov	sp, r7
    7a52:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a56:	4770      	bx	lr

00007a58 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    7a58:	b480      	push	{r7}
    7a5a:	b083      	sub	sp, #12
    7a5c:	af00      	add	r7, sp, #0
    7a5e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    7a60:	687b      	ldr	r3, [r7, #4]
    7a62:	2201      	movs	r2, #1
    7a64:	761a      	strb	r2, [r3, #24]
}
    7a66:	bf00      	nop
    7a68:	370c      	adds	r7, #12
    7a6a:	46bd      	mov	sp, r7
    7a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a70:	4770      	bx	lr

00007a72 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    7a72:	b480      	push	{r7}
    7a74:	b083      	sub	sp, #12
    7a76:	af00      	add	r7, sp, #0
    7a78:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7a7a:	687b      	ldr	r3, [r7, #4]
    7a7c:	2202      	movs	r2, #2
    7a7e:	761a      	strb	r2, [r3, #24]
}
    7a80:	bf00      	nop
    7a82:	370c      	adds	r7, #12
    7a84:	46bd      	mov	sp, r7
    7a86:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a8a:	4770      	bx	lr

00007a8c <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    7a8c:	b480      	push	{r7}
    7a8e:	b083      	sub	sp, #12
    7a90:	af00      	add	r7, sp, #0
    7a92:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    7a94:	687b      	ldr	r3, [r7, #4]
    7a96:	7e1b      	ldrb	r3, [r3, #24]
    7a98:	b2db      	uxtb	r3, r3
}
    7a9a:	4618      	mov	r0, r3
    7a9c:	370c      	adds	r7, #12
    7a9e:	46bd      	mov	sp, r7
    7aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7aa4:	4770      	bx	lr

00007aa6 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    7aa6:	b480      	push	{r7}
    7aa8:	b085      	sub	sp, #20
    7aaa:	af00      	add	r7, sp, #0
    7aac:	6078      	str	r0, [r7, #4]
    7aae:	460b      	mov	r3, r1
    7ab0:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    7ab2:	687b      	ldr	r3, [r7, #4]
    7ab4:	7e1b      	ldrb	r3, [r3, #24]
    7ab6:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    7ab8:	7bfa      	ldrb	r2, [r7, #15]
    7aba:	78fb      	ldrb	r3, [r7, #3]
    7abc:	4013      	ands	r3, r2
    7abe:	73fb      	strb	r3, [r7, #15]
	return tmp;
    7ac0:	7bfb      	ldrb	r3, [r7, #15]
}
    7ac2:	4618      	mov	r0, r3
    7ac4:	3714      	adds	r7, #20
    7ac6:	46bd      	mov	sp, r7
    7ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7acc:	4770      	bx	lr

00007ace <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    7ace:	b480      	push	{r7}
    7ad0:	b083      	sub	sp, #12
    7ad2:	af00      	add	r7, sp, #0
    7ad4:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    7ad6:	687b      	ldr	r3, [r7, #4]
    7ad8:	7e1b      	ldrb	r3, [r3, #24]
    7ada:	b2db      	uxtb	r3, r3
}
    7adc:	4618      	mov	r0, r3
    7ade:	370c      	adds	r7, #12
    7ae0:	46bd      	mov	sp, r7
    7ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ae6:	4770      	bx	lr

00007ae8 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    7ae8:	b480      	push	{r7}
    7aea:	b083      	sub	sp, #12
    7aec:	af00      	add	r7, sp, #0
    7aee:	6078      	str	r0, [r7, #4]
    7af0:	460b      	mov	r3, r1
    7af2:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    7af4:	687b      	ldr	r3, [r7, #4]
    7af6:	78fa      	ldrb	r2, [r7, #3]
    7af8:	761a      	strb	r2, [r3, #24]
}
    7afa:	bf00      	nop
    7afc:	370c      	adds	r7, #12
    7afe:	46bd      	mov	sp, r7
    7b00:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b04:	4770      	bx	lr
	...

00007b08 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7b08:	b580      	push	{r7, lr}
    7b0a:	b082      	sub	sp, #8
    7b0c:	af00      	add	r7, sp, #0
    7b0e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    7b10:	687b      	ldr	r3, [r7, #4]
    7b12:	681b      	ldr	r3, [r3, #0]
    7b14:	f043 0202 	orr.w	r2, r3, #2
    7b18:	687b      	ldr	r3, [r7, #4]
    7b1a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7b1c:	2103      	movs	r1, #3
    7b1e:	6878      	ldr	r0, [r7, #4]
    7b20:	4b02      	ldr	r3, [pc, #8]	; (7b2c <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    7b22:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7b24:	bf00      	nop
    7b26:	3708      	adds	r7, #8
    7b28:	46bd      	mov	sp, r7
    7b2a:	bd80      	pop	{r7, pc}
    7b2c:	000079c1 	.word	0x000079c1

00007b30 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7b30:	b580      	push	{r7, lr}
    7b32:	b082      	sub	sp, #8
    7b34:	af00      	add	r7, sp, #0
    7b36:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    7b38:	687b      	ldr	r3, [r7, #4]
    7b3a:	681b      	ldr	r3, [r3, #0]
    7b3c:	f023 0202 	bic.w	r2, r3, #2
    7b40:	687b      	ldr	r3, [r7, #4]
    7b42:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7b44:	2103      	movs	r1, #3
    7b46:	6878      	ldr	r0, [r7, #4]
    7b48:	4b02      	ldr	r3, [pc, #8]	; (7b54 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    7b4a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7b4c:	bf00      	nop
    7b4e:	3708      	adds	r7, #8
    7b50:	46bd      	mov	sp, r7
    7b52:	bd80      	pop	{r7, pc}
    7b54:	000079c1 	.word	0x000079c1

00007b58 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    7b58:	b480      	push	{r7}
    7b5a:	b085      	sub	sp, #20
    7b5c:	af00      	add	r7, sp, #0
    7b5e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7b60:	687b      	ldr	r3, [r7, #4]
    7b62:	681b      	ldr	r3, [r3, #0]
    7b64:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    7b66:	68fb      	ldr	r3, [r7, #12]
    7b68:	0edb      	lsrs	r3, r3, #27
    7b6a:	f003 0301 	and.w	r3, r3, #1
    7b6e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7b70:	68fb      	ldr	r3, [r7, #12]
    7b72:	2b00      	cmp	r3, #0
    7b74:	bf14      	ite	ne
    7b76:	2301      	movne	r3, #1
    7b78:	2300      	moveq	r3, #0
    7b7a:	b2db      	uxtb	r3, r3
}
    7b7c:	4618      	mov	r0, r3
    7b7e:	3714      	adds	r7, #20
    7b80:	46bd      	mov	sp, r7
    7b82:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b86:	4770      	bx	lr

00007b88 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    7b88:	b580      	push	{r7, lr}
    7b8a:	b084      	sub	sp, #16
    7b8c:	af00      	add	r7, sp, #0
    7b8e:	6078      	str	r0, [r7, #4]
    7b90:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7b92:	2103      	movs	r1, #3
    7b94:	6878      	ldr	r0, [r7, #4]
    7b96:	4b07      	ldr	r3, [pc, #28]	; (7bb4 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    7b98:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    7b9a:	687b      	ldr	r3, [r7, #4]
    7b9c:	681b      	ldr	r3, [r3, #0]
    7b9e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7ba0:	68fa      	ldr	r2, [r7, #12]
    7ba2:	683b      	ldr	r3, [r7, #0]
    7ba4:	4013      	ands	r3, r2
    7ba6:	60fb      	str	r3, [r7, #12]
	return tmp;
    7ba8:	68fb      	ldr	r3, [r7, #12]
}
    7baa:	4618      	mov	r0, r3
    7bac:	3710      	adds	r7, #16
    7bae:	46bd      	mov	sp, r7
    7bb0:	bd80      	pop	{r7, pc}
    7bb2:	bf00      	nop
    7bb4:	000079c1 	.word	0x000079c1

00007bb8 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    7bb8:	b580      	push	{r7, lr}
    7bba:	b082      	sub	sp, #8
    7bbc:	af00      	add	r7, sp, #0
    7bbe:	6078      	str	r0, [r7, #4]
    7bc0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    7bc2:	687b      	ldr	r3, [r7, #4]
    7bc4:	683a      	ldr	r2, [r7, #0]
    7bc6:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    7bc8:	2103      	movs	r1, #3
    7bca:	6878      	ldr	r0, [r7, #4]
    7bcc:	4b02      	ldr	r3, [pc, #8]	; (7bd8 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    7bce:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7bd0:	bf00      	nop
    7bd2:	3708      	adds	r7, #8
    7bd4:	46bd      	mov	sp, r7
    7bd6:	bd80      	pop	{r7, pc}
    7bd8:	000079c1 	.word	0x000079c1

00007bdc <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7bdc:	b580      	push	{r7, lr}
    7bde:	b082      	sub	sp, #8
    7be0:	af00      	add	r7, sp, #0
    7be2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    7be4:	687b      	ldr	r3, [r7, #4]
    7be6:	681b      	ldr	r3, [r3, #0]
    7be8:	f043 0202 	orr.w	r2, r3, #2
    7bec:	687b      	ldr	r3, [r7, #4]
    7bee:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7bf0:	2103      	movs	r1, #3
    7bf2:	6878      	ldr	r0, [r7, #4]
    7bf4:	4b02      	ldr	r3, [pc, #8]	; (7c00 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    7bf6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7bf8:	bf00      	nop
    7bfa:	3708      	adds	r7, #8
    7bfc:	46bd      	mov	sp, r7
    7bfe:	bd80      	pop	{r7, pc}
    7c00:	00007a0d 	.word	0x00007a0d

00007c04 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7c04:	b580      	push	{r7, lr}
    7c06:	b084      	sub	sp, #16
    7c08:	af00      	add	r7, sp, #0
    7c0a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7c0c:	2103      	movs	r1, #3
    7c0e:	6878      	ldr	r0, [r7, #4]
    7c10:	4b09      	ldr	r3, [pc, #36]	; (7c38 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    7c12:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7c14:	687b      	ldr	r3, [r7, #4]
    7c16:	681b      	ldr	r3, [r3, #0]
    7c18:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    7c1a:	68fb      	ldr	r3, [r7, #12]
    7c1c:	085b      	lsrs	r3, r3, #1
    7c1e:	f003 0301 	and.w	r3, r3, #1
    7c22:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7c24:	68fb      	ldr	r3, [r7, #12]
    7c26:	2b00      	cmp	r3, #0
    7c28:	bf14      	ite	ne
    7c2a:	2301      	movne	r3, #1
    7c2c:	2300      	moveq	r3, #0
    7c2e:	b2db      	uxtb	r3, r3
}
    7c30:	4618      	mov	r0, r3
    7c32:	3710      	adds	r7, #16
    7c34:	46bd      	mov	sp, r7
    7c36:	bd80      	pop	{r7, pc}
    7c38:	00007a0d 	.word	0x00007a0d

00007c3c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7c3c:	b580      	push	{r7, lr}
    7c3e:	b082      	sub	sp, #8
    7c40:	af00      	add	r7, sp, #0
    7c42:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7c44:	687b      	ldr	r3, [r7, #4]
    7c46:	681b      	ldr	r3, [r3, #0]
    7c48:	f023 0202 	bic.w	r2, r3, #2
    7c4c:	687b      	ldr	r3, [r7, #4]
    7c4e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7c50:	2103      	movs	r1, #3
    7c52:	6878      	ldr	r0, [r7, #4]
    7c54:	4b02      	ldr	r3, [pc, #8]	; (7c60 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    7c56:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7c58:	bf00      	nop
    7c5a:	3708      	adds	r7, #8
    7c5c:	46bd      	mov	sp, r7
    7c5e:	bd80      	pop	{r7, pc}
    7c60:	00007a0d 	.word	0x00007a0d

00007c64 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    7c64:	b580      	push	{r7, lr}
    7c66:	b084      	sub	sp, #16
    7c68:	af00      	add	r7, sp, #0
    7c6a:	6078      	str	r0, [r7, #4]
    7c6c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7c6e:	2103      	movs	r1, #3
    7c70:	6878      	ldr	r0, [r7, #4]
    7c72:	4b07      	ldr	r3, [pc, #28]	; (7c90 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    7c74:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    7c76:	687b      	ldr	r3, [r7, #4]
    7c78:	681b      	ldr	r3, [r3, #0]
    7c7a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7c7c:	68fa      	ldr	r2, [r7, #12]
    7c7e:	683b      	ldr	r3, [r7, #0]
    7c80:	4013      	ands	r3, r2
    7c82:	60fb      	str	r3, [r7, #12]
	return tmp;
    7c84:	68fb      	ldr	r3, [r7, #12]
}
    7c86:	4618      	mov	r0, r3
    7c88:	3710      	adds	r7, #16
    7c8a:	46bd      	mov	sp, r7
    7c8c:	bd80      	pop	{r7, pc}
    7c8e:	bf00      	nop
    7c90:	00007a0d 	.word	0x00007a0d

00007c94 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    7c94:	b580      	push	{r7, lr}
    7c96:	b082      	sub	sp, #8
    7c98:	af00      	add	r7, sp, #0
    7c9a:	6078      	str	r0, [r7, #4]
    7c9c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    7c9e:	687b      	ldr	r3, [r7, #4]
    7ca0:	683a      	ldr	r2, [r7, #0]
    7ca2:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    7ca4:	2103      	movs	r1, #3
    7ca6:	6878      	ldr	r0, [r7, #4]
    7ca8:	4b02      	ldr	r3, [pc, #8]	; (7cb4 <hri_sercomspi_write_CTRLA_reg+0x20>)
    7caa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7cac:	bf00      	nop
    7cae:	3708      	adds	r7, #8
    7cb0:	46bd      	mov	sp, r7
    7cb2:	bd80      	pop	{r7, pc}
    7cb4:	00007a0d 	.word	0x00007a0d

00007cb8 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    7cb8:	b580      	push	{r7, lr}
    7cba:	b082      	sub	sp, #8
    7cbc:	af00      	add	r7, sp, #0
    7cbe:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    7cc0:	687b      	ldr	r3, [r7, #4]
    7cc2:	685b      	ldr	r3, [r3, #4]
    7cc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    7cc8:	687b      	ldr	r3, [r7, #4]
    7cca:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7ccc:	2104      	movs	r1, #4
    7cce:	6878      	ldr	r0, [r7, #4]
    7cd0:	4b02      	ldr	r3, [pc, #8]	; (7cdc <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    7cd2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7cd4:	bf00      	nop
    7cd6:	3708      	adds	r7, #8
    7cd8:	46bd      	mov	sp, r7
    7cda:	bd80      	pop	{r7, pc}
    7cdc:	000079c1 	.word	0x000079c1

00007ce0 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    7ce0:	b580      	push	{r7, lr}
    7ce2:	b082      	sub	sp, #8
    7ce4:	af00      	add	r7, sp, #0
    7ce6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    7ce8:	687b      	ldr	r3, [r7, #4]
    7cea:	685b      	ldr	r3, [r3, #4]
    7cec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    7cf0:	687b      	ldr	r3, [r7, #4]
    7cf2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7cf4:	2104      	movs	r1, #4
    7cf6:	6878      	ldr	r0, [r7, #4]
    7cf8:	4b02      	ldr	r3, [pc, #8]	; (7d04 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    7cfa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7cfc:	bf00      	nop
    7cfe:	3708      	adds	r7, #8
    7d00:	46bd      	mov	sp, r7
    7d02:	bd80      	pop	{r7, pc}
    7d04:	000079c1 	.word	0x000079c1

00007d08 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    7d08:	b580      	push	{r7, lr}
    7d0a:	b082      	sub	sp, #8
    7d0c:	af00      	add	r7, sp, #0
    7d0e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7d10:	687b      	ldr	r3, [r7, #4]
    7d12:	685b      	ldr	r3, [r3, #4]
    7d14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    7d18:	687b      	ldr	r3, [r7, #4]
    7d1a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7d1c:	2104      	movs	r1, #4
    7d1e:	6878      	ldr	r0, [r7, #4]
    7d20:	4b02      	ldr	r3, [pc, #8]	; (7d2c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    7d22:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7d24:	bf00      	nop
    7d26:	3708      	adds	r7, #8
    7d28:	46bd      	mov	sp, r7
    7d2a:	bd80      	pop	{r7, pc}
    7d2c:	000079c1 	.word	0x000079c1

00007d30 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    7d30:	b580      	push	{r7, lr}
    7d32:	b082      	sub	sp, #8
    7d34:	af00      	add	r7, sp, #0
    7d36:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    7d38:	687b      	ldr	r3, [r7, #4]
    7d3a:	685b      	ldr	r3, [r3, #4]
    7d3c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    7d40:	687b      	ldr	r3, [r7, #4]
    7d42:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7d44:	2104      	movs	r1, #4
    7d46:	6878      	ldr	r0, [r7, #4]
    7d48:	4b02      	ldr	r3, [pc, #8]	; (7d54 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    7d4a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7d4c:	bf00      	nop
    7d4e:	3708      	adds	r7, #8
    7d50:	46bd      	mov	sp, r7
    7d52:	bd80      	pop	{r7, pc}
    7d54:	000079c1 	.word	0x000079c1

00007d58 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    7d58:	b580      	push	{r7, lr}
    7d5a:	b082      	sub	sp, #8
    7d5c:	af00      	add	r7, sp, #0
    7d5e:	6078      	str	r0, [r7, #4]
    7d60:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    7d62:	687b      	ldr	r3, [r7, #4]
    7d64:	685a      	ldr	r2, [r3, #4]
    7d66:	683b      	ldr	r3, [r7, #0]
    7d68:	041b      	lsls	r3, r3, #16
    7d6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    7d6e:	431a      	orrs	r2, r3
    7d70:	687b      	ldr	r3, [r7, #4]
    7d72:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7d74:	2104      	movs	r1, #4
    7d76:	6878      	ldr	r0, [r7, #4]
    7d78:	4b02      	ldr	r3, [pc, #8]	; (7d84 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    7d7a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7d7c:	bf00      	nop
    7d7e:	3708      	adds	r7, #8
    7d80:	46bd      	mov	sp, r7
    7d82:	bd80      	pop	{r7, pc}
    7d84:	000079c1 	.word	0x000079c1

00007d88 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    7d88:	b580      	push	{r7, lr}
    7d8a:	b082      	sub	sp, #8
    7d8c:	af00      	add	r7, sp, #0
    7d8e:	6078      	str	r0, [r7, #4]
    7d90:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    7d92:	687b      	ldr	r3, [r7, #4]
    7d94:	683a      	ldr	r2, [r7, #0]
    7d96:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7d98:	2104      	movs	r1, #4
    7d9a:	6878      	ldr	r0, [r7, #4]
    7d9c:	4b02      	ldr	r3, [pc, #8]	; (7da8 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    7d9e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7da0:	bf00      	nop
    7da2:	3708      	adds	r7, #8
    7da4:	46bd      	mov	sp, r7
    7da6:	bd80      	pop	{r7, pc}
    7da8:	000079c1 	.word	0x000079c1

00007dac <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    7dac:	b580      	push	{r7, lr}
    7dae:	b082      	sub	sp, #8
    7db0:	af00      	add	r7, sp, #0
    7db2:	6078      	str	r0, [r7, #4]
    7db4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    7db6:	687b      	ldr	r3, [r7, #4]
    7db8:	683a      	ldr	r2, [r7, #0]
    7dba:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    7dbc:	2117      	movs	r1, #23
    7dbe:	6878      	ldr	r0, [r7, #4]
    7dc0:	4b02      	ldr	r3, [pc, #8]	; (7dcc <hri_sercomspi_write_CTRLB_reg+0x20>)
    7dc2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7dc4:	bf00      	nop
    7dc6:	3708      	adds	r7, #8
    7dc8:	46bd      	mov	sp, r7
    7dca:	bd80      	pop	{r7, pc}
    7dcc:	00007a0d 	.word	0x00007a0d

00007dd0 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    7dd0:	b480      	push	{r7}
    7dd2:	b083      	sub	sp, #12
    7dd4:	af00      	add	r7, sp, #0
    7dd6:	6078      	str	r0, [r7, #4]
    7dd8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    7dda:	687b      	ldr	r3, [r7, #4]
    7ddc:	683a      	ldr	r2, [r7, #0]
    7dde:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7de0:	bf00      	nop
    7de2:	370c      	adds	r7, #12
    7de4:	46bd      	mov	sp, r7
    7de6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dea:	4770      	bx	lr

00007dec <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    7dec:	b480      	push	{r7}
    7dee:	b083      	sub	sp, #12
    7df0:	af00      	add	r7, sp, #0
    7df2:	6078      	str	r0, [r7, #4]
    7df4:	460b      	mov	r3, r1
    7df6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    7df8:	687b      	ldr	r3, [r7, #4]
    7dfa:	78fa      	ldrb	r2, [r7, #3]
    7dfc:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7dfe:	bf00      	nop
    7e00:	370c      	adds	r7, #12
    7e02:	46bd      	mov	sp, r7
    7e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e08:	4770      	bx	lr
	...

00007e0c <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    7e0c:	b580      	push	{r7, lr}
    7e0e:	b084      	sub	sp, #16
    7e10:	af00      	add	r7, sp, #0
    7e12:	6078      	str	r0, [r7, #4]
    7e14:	460b      	mov	r3, r1
    7e16:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    7e18:	687b      	ldr	r3, [r7, #4]
    7e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7e1c:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    7e1e:	68fb      	ldr	r3, [r7, #12]
    7e20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    7e24:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    7e26:	78fb      	ldrb	r3, [r7, #3]
    7e28:	039b      	lsls	r3, r3, #14
    7e2a:	461a      	mov	r2, r3
    7e2c:	68fb      	ldr	r3, [r7, #12]
    7e2e:	4313      	orrs	r3, r2
    7e30:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    7e32:	687b      	ldr	r3, [r7, #4]
    7e34:	68fa      	ldr	r2, [r7, #12]
    7e36:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7e38:	2104      	movs	r1, #4
    7e3a:	6878      	ldr	r0, [r7, #4]
    7e3c:	4b02      	ldr	r3, [pc, #8]	; (7e48 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    7e3e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7e40:	bf00      	nop
    7e42:	3710      	adds	r7, #16
    7e44:	46bd      	mov	sp, r7
    7e46:	bd80      	pop	{r7, pc}
    7e48:	000079c1 	.word	0x000079c1

00007e4c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    7e4c:	b580      	push	{r7, lr}
    7e4e:	b082      	sub	sp, #8
    7e50:	af00      	add	r7, sp, #0
    7e52:	6078      	str	r0, [r7, #4]
    7e54:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    7e56:	687b      	ldr	r3, [r7, #4]
    7e58:	683a      	ldr	r2, [r7, #0]
    7e5a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7e5c:	2104      	movs	r1, #4
    7e5e:	6878      	ldr	r0, [r7, #4]
    7e60:	4b02      	ldr	r3, [pc, #8]	; (7e6c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    7e62:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7e64:	bf00      	nop
    7e66:	3708      	adds	r7, #8
    7e68:	46bd      	mov	sp, r7
    7e6a:	bd80      	pop	{r7, pc}
    7e6c:	000079c1 	.word	0x000079c1

00007e70 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    7e70:	b580      	push	{r7, lr}
    7e72:	b082      	sub	sp, #8
    7e74:	af00      	add	r7, sp, #0
    7e76:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7e78:	2104      	movs	r1, #4
    7e7a:	6878      	ldr	r0, [r7, #4]
    7e7c:	4b03      	ldr	r3, [pc, #12]	; (7e8c <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    7e7e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    7e80:	687b      	ldr	r3, [r7, #4]
    7e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    7e84:	4618      	mov	r0, r3
    7e86:	3708      	adds	r7, #8
    7e88:	46bd      	mov	sp, r7
    7e8a:	bd80      	pop	{r7, pc}
    7e8c:	000079c1 	.word	0x000079c1

00007e90 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    7e90:	b480      	push	{r7}
    7e92:	b083      	sub	sp, #12
    7e94:	af00      	add	r7, sp, #0
    7e96:	6078      	str	r0, [r7, #4]
    7e98:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    7e9a:	687b      	ldr	r3, [r7, #4]
    7e9c:	683a      	ldr	r2, [r7, #0]
    7e9e:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7ea0:	bf00      	nop
    7ea2:	370c      	adds	r7, #12
    7ea4:	46bd      	mov	sp, r7
    7ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eaa:	4770      	bx	lr

00007eac <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    7eac:	b580      	push	{r7, lr}
    7eae:	b082      	sub	sp, #8
    7eb0:	af00      	add	r7, sp, #0
    7eb2:	6078      	str	r0, [r7, #4]
    7eb4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    7eb6:	687b      	ldr	r3, [r7, #4]
    7eb8:	683a      	ldr	r2, [r7, #0]
    7eba:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7ebc:	2104      	movs	r1, #4
    7ebe:	6878      	ldr	r0, [r7, #4]
    7ec0:	4b02      	ldr	r3, [pc, #8]	; (7ecc <hri_sercomi2cm_write_DATA_reg+0x20>)
    7ec2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7ec4:	bf00      	nop
    7ec6:	3708      	adds	r7, #8
    7ec8:	46bd      	mov	sp, r7
    7eca:	bd80      	pop	{r7, pc}
    7ecc:	000079c1 	.word	0x000079c1

00007ed0 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    7ed0:	b580      	push	{r7, lr}
    7ed2:	b082      	sub	sp, #8
    7ed4:	af00      	add	r7, sp, #0
    7ed6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7ed8:	2104      	movs	r1, #4
    7eda:	6878      	ldr	r0, [r7, #4]
    7edc:	4b03      	ldr	r3, [pc, #12]	; (7eec <hri_sercomi2cm_read_DATA_reg+0x1c>)
    7ede:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    7ee0:	687b      	ldr	r3, [r7, #4]
    7ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    7ee4:	4618      	mov	r0, r3
    7ee6:	3708      	adds	r7, #8
    7ee8:	46bd      	mov	sp, r7
    7eea:	bd80      	pop	{r7, pc}
    7eec:	000079c1 	.word	0x000079c1

00007ef0 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    7ef0:	b480      	push	{r7}
    7ef2:	b083      	sub	sp, #12
    7ef4:	af00      	add	r7, sp, #0
    7ef6:	6078      	str	r0, [r7, #4]
    7ef8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    7efa:	687b      	ldr	r3, [r7, #4]
    7efc:	683a      	ldr	r2, [r7, #0]
    7efe:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7f00:	bf00      	nop
    7f02:	370c      	adds	r7, #12
    7f04:	46bd      	mov	sp, r7
    7f06:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f0a:	4770      	bx	lr

00007f0c <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    7f0c:	b480      	push	{r7}
    7f0e:	b083      	sub	sp, #12
    7f10:	af00      	add	r7, sp, #0
    7f12:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    7f14:	687b      	ldr	r3, [r7, #4]
    7f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    7f18:	4618      	mov	r0, r3
    7f1a:	370c      	adds	r7, #12
    7f1c:	46bd      	mov	sp, r7
    7f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f22:	4770      	bx	lr

00007f24 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    7f24:	b480      	push	{r7}
    7f26:	b083      	sub	sp, #12
    7f28:	af00      	add	r7, sp, #0
    7f2a:	6078      	str	r0, [r7, #4]
    7f2c:	460b      	mov	r3, r1
    7f2e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    7f30:	687b      	ldr	r3, [r7, #4]
    7f32:	78fa      	ldrb	r2, [r7, #3]
    7f34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7f38:	bf00      	nop
    7f3a:	370c      	adds	r7, #12
    7f3c:	46bd      	mov	sp, r7
    7f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f42:	4770      	bx	lr

00007f44 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    7f44:	b480      	push	{r7}
    7f46:	b083      	sub	sp, #12
    7f48:	af00      	add	r7, sp, #0
    7f4a:	6078      	str	r0, [r7, #4]
    7f4c:	460b      	mov	r3, r1
    7f4e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    7f50:	687b      	ldr	r3, [r7, #4]
    7f52:	887a      	ldrh	r2, [r7, #2]
    7f54:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7f56:	bf00      	nop
    7f58:	370c      	adds	r7, #12
    7f5a:	46bd      	mov	sp, r7
    7f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f60:	4770      	bx	lr
	...

00007f64 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    7f64:	b580      	push	{r7, lr}
    7f66:	b082      	sub	sp, #8
    7f68:	af00      	add	r7, sp, #0
    7f6a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7f6c:	2104      	movs	r1, #4
    7f6e:	6878      	ldr	r0, [r7, #4]
    7f70:	4b06      	ldr	r3, [pc, #24]	; (7f8c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    7f72:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    7f74:	687b      	ldr	r3, [r7, #4]
    7f76:	8b5b      	ldrh	r3, [r3, #26]
    7f78:	b29b      	uxth	r3, r3
    7f7a:	091b      	lsrs	r3, r3, #4
    7f7c:	b29b      	uxth	r3, r3
    7f7e:	f003 0303 	and.w	r3, r3, #3
    7f82:	b29b      	uxth	r3, r3
}
    7f84:	4618      	mov	r0, r3
    7f86:	3708      	adds	r7, #8
    7f88:	46bd      	mov	sp, r7
    7f8a:	bd80      	pop	{r7, pc}
    7f8c:	000079c1 	.word	0x000079c1

00007f90 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    7f90:	b580      	push	{r7, lr}
    7f92:	b082      	sub	sp, #8
    7f94:	af00      	add	r7, sp, #0
    7f96:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7f98:	2104      	movs	r1, #4
    7f9a:	6878      	ldr	r0, [r7, #4]
    7f9c:	4b04      	ldr	r3, [pc, #16]	; (7fb0 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    7f9e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    7fa0:	687b      	ldr	r3, [r7, #4]
    7fa2:	8b5b      	ldrh	r3, [r3, #26]
    7fa4:	b29b      	uxth	r3, r3
}
    7fa6:	4618      	mov	r0, r3
    7fa8:	3708      	adds	r7, #8
    7faa:	46bd      	mov	sp, r7
    7fac:	bd80      	pop	{r7, pc}
    7fae:	bf00      	nop
    7fb0:	000079c1 	.word	0x000079c1

00007fb4 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    7fb4:	b580      	push	{r7, lr}
    7fb6:	b082      	sub	sp, #8
    7fb8:	af00      	add	r7, sp, #0
    7fba:	6078      	str	r0, [r7, #4]
    7fbc:	460b      	mov	r3, r1
    7fbe:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    7fc0:	687b      	ldr	r3, [r7, #4]
    7fc2:	887a      	ldrh	r2, [r7, #2]
    7fc4:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    7fc6:	2104      	movs	r1, #4
    7fc8:	6878      	ldr	r0, [r7, #4]
    7fca:	4b03      	ldr	r3, [pc, #12]	; (7fd8 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    7fcc:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    7fce:	bf00      	nop
    7fd0:	3708      	adds	r7, #8
    7fd2:	46bd      	mov	sp, r7
    7fd4:	bd80      	pop	{r7, pc}
    7fd6:	bf00      	nop
    7fd8:	000079c1 	.word	0x000079c1

00007fdc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    7fdc:	b4b0      	push	{r4, r5, r7}
    7fde:	b08d      	sub	sp, #52	; 0x34
    7fe0:	af00      	add	r7, sp, #0
    7fe2:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    7fe4:	4b13      	ldr	r3, [pc, #76]	; (8034 <_sercom_get_hardware_index+0x58>)
    7fe6:	f107 040c 	add.w	r4, r7, #12
    7fea:	461d      	mov	r5, r3
    7fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7ff0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7ff4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7ff8:	2300      	movs	r3, #0
    7ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    7ffc:	e010      	b.n	8020 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    7ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8000:	009b      	lsls	r3, r3, #2
    8002:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8006:	4413      	add	r3, r2
    8008:	f853 3c24 	ldr.w	r3, [r3, #-36]
    800c:	461a      	mov	r2, r3
    800e:	687b      	ldr	r3, [r7, #4]
    8010:	429a      	cmp	r2, r3
    8012:	d102      	bne.n	801a <_sercom_get_hardware_index+0x3e>
			return i;
    8014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8016:	b2db      	uxtb	r3, r3
    8018:	e006      	b.n	8028 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    801a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    801c:	3301      	adds	r3, #1
    801e:	62fb      	str	r3, [r7, #44]	; 0x2c
    8020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8022:	2b07      	cmp	r3, #7
    8024:	d9eb      	bls.n	7ffe <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    8026:	2300      	movs	r3, #0
}
    8028:	4618      	mov	r0, r3
    802a:	3734      	adds	r7, #52	; 0x34
    802c:	46bd      	mov	sp, r7
    802e:	bcb0      	pop	{r4, r5, r7}
    8030:	4770      	bx	lr
    8032:	bf00      	nop
    8034:	0001b404 	.word	0x0001b404

00008038 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    8038:	b580      	push	{r7, lr}
    803a:	b084      	sub	sp, #16
    803c:	af00      	add	r7, sp, #0
    803e:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    8040:	6878      	ldr	r0, [r7, #4]
    8042:	4b13      	ldr	r3, [pc, #76]	; (8090 <_get_i2cm_index+0x58>)
    8044:	4798      	blx	r3
    8046:	4603      	mov	r3, r0
    8048:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    804a:	2300      	movs	r3, #0
    804c:	73fb      	strb	r3, [r7, #15]
    804e:	e010      	b.n	8072 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    8050:	7bfa      	ldrb	r2, [r7, #15]
    8052:	4910      	ldr	r1, [pc, #64]	; (8094 <_get_i2cm_index+0x5c>)
    8054:	4613      	mov	r3, r2
    8056:	005b      	lsls	r3, r3, #1
    8058:	4413      	add	r3, r2
    805a:	00db      	lsls	r3, r3, #3
    805c:	440b      	add	r3, r1
    805e:	781b      	ldrb	r3, [r3, #0]
    8060:	7bba      	ldrb	r2, [r7, #14]
    8062:	429a      	cmp	r2, r3
    8064:	d102      	bne.n	806c <_get_i2cm_index+0x34>
			return i;
    8066:	f997 300f 	ldrsb.w	r3, [r7, #15]
    806a:	e00d      	b.n	8088 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    806c:	7bfb      	ldrb	r3, [r7, #15]
    806e:	3301      	adds	r3, #1
    8070:	73fb      	strb	r3, [r7, #15]
    8072:	7bfb      	ldrb	r3, [r7, #15]
    8074:	2b02      	cmp	r3, #2
    8076:	d9eb      	bls.n	8050 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    8078:	f240 32a6 	movw	r2, #934	; 0x3a6
    807c:	4906      	ldr	r1, [pc, #24]	; (8098 <_get_i2cm_index+0x60>)
    807e:	2000      	movs	r0, #0
    8080:	4b06      	ldr	r3, [pc, #24]	; (809c <_get_i2cm_index+0x64>)
    8082:	4798      	blx	r3
	return -1;
    8084:	f04f 33ff 	mov.w	r3, #4294967295
}
    8088:	4618      	mov	r0, r3
    808a:	3710      	adds	r7, #16
    808c:	46bd      	mov	sp, r7
    808e:	bd80      	pop	{r7, pc}
    8090:	00007fdd 	.word	0x00007fdd
    8094:	20000018 	.word	0x20000018
    8098:	0001b3e8 	.word	0x0001b3e8
    809c:	00004cdd 	.word	0x00004cdd

000080a0 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    80a0:	b580      	push	{r7, lr}
    80a2:	b082      	sub	sp, #8
    80a4:	af00      	add	r7, sp, #0
    80a6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    80a8:	2103      	movs	r1, #3
    80aa:	6878      	ldr	r0, [r7, #4]
    80ac:	4b02      	ldr	r3, [pc, #8]	; (80b8 <_sercom_i2c_send_stop+0x18>)
    80ae:	4798      	blx	r3
}
    80b0:	bf00      	nop
    80b2:	3708      	adds	r7, #8
    80b4:	46bd      	mov	sp, r7
    80b6:	bd80      	pop	{r7, pc}
    80b8:	00007d59 	.word	0x00007d59

000080bc <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    80bc:	b590      	push	{r4, r7, lr}
    80be:	b087      	sub	sp, #28
    80c0:	af00      	add	r7, sp, #0
    80c2:	60f8      	str	r0, [r7, #12]
    80c4:	60b9      	str	r1, [r7, #8]
    80c6:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    80c8:	68f8      	ldr	r0, [r7, #12]
    80ca:	4b7d      	ldr	r3, [pc, #500]	; (82c0 <_sercom_i2c_sync_analyse_flags+0x204>)
    80cc:	4798      	blx	r3
    80ce:	4603      	mov	r3, r0
    80d0:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    80d2:	68f8      	ldr	r0, [r7, #12]
    80d4:	4b7b      	ldr	r3, [pc, #492]	; (82c4 <_sercom_i2c_sync_analyse_flags+0x208>)
    80d6:	4798      	blx	r3
    80d8:	4603      	mov	r3, r0
    80da:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    80dc:	68bb      	ldr	r3, [r7, #8]
    80de:	f003 0301 	and.w	r3, r3, #1
    80e2:	2b00      	cmp	r3, #0
    80e4:	f000 8095 	beq.w	8212 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    80e8:	8a7b      	ldrh	r3, [r7, #18]
    80ea:	f003 0302 	and.w	r3, r3, #2
    80ee:	2b00      	cmp	r3, #0
    80f0:	d01d      	beq.n	812e <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    80f2:	68f8      	ldr	r0, [r7, #12]
    80f4:	4b74      	ldr	r3, [pc, #464]	; (82c8 <_sercom_i2c_sync_analyse_flags+0x20c>)
    80f6:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    80f8:	687b      	ldr	r3, [r7, #4]
    80fa:	885b      	ldrh	r3, [r3, #2]
    80fc:	b29b      	uxth	r3, r3
    80fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    8102:	b29a      	uxth	r2, r3
    8104:	687b      	ldr	r3, [r7, #4]
    8106:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    8108:	687b      	ldr	r3, [r7, #4]
    810a:	885b      	ldrh	r3, [r3, #2]
    810c:	b29b      	uxth	r3, r3
    810e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8112:	b29a      	uxth	r2, r3
    8114:	687b      	ldr	r3, [r7, #4]
    8116:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    8118:	8a7b      	ldrh	r3, [r7, #18]
    811a:	f003 0301 	and.w	r3, r3, #1
    811e:	2b00      	cmp	r3, #0
    8120:	d002      	beq.n	8128 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    8122:	f06f 0304 	mvn.w	r3, #4
    8126:	e0c6      	b.n	82b6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    8128:	f06f 0303 	mvn.w	r3, #3
    812c:	e0c3      	b.n	82b6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    812e:	8a7b      	ldrh	r3, [r7, #18]
    8130:	f003 0304 	and.w	r3, r3, #4
    8134:	2b00      	cmp	r3, #0
    8136:	d01f      	beq.n	8178 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    8138:	687b      	ldr	r3, [r7, #4]
    813a:	685b      	ldr	r3, [r3, #4]
    813c:	2b00      	cmp	r3, #0
    813e:	dd07      	ble.n	8150 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    8140:	687b      	ldr	r3, [r7, #4]
    8142:	885b      	ldrh	r3, [r3, #2]
    8144:	b29b      	uxth	r3, r3
    8146:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    814a:	b29a      	uxth	r2, r3
    814c:	687b      	ldr	r3, [r7, #4]
    814e:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    8150:	687b      	ldr	r3, [r7, #4]
    8152:	885b      	ldrh	r3, [r3, #2]
    8154:	b29b      	uxth	r3, r3
    8156:	b21b      	sxth	r3, r3
    8158:	2b00      	cmp	r3, #0
    815a:	da02      	bge.n	8162 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    815c:	68f8      	ldr	r0, [r7, #12]
    815e:	4b5b      	ldr	r3, [pc, #364]	; (82cc <_sercom_i2c_sync_analyse_flags+0x210>)
    8160:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    8162:	687b      	ldr	r3, [r7, #4]
    8164:	885b      	ldrh	r3, [r3, #2]
    8166:	b29b      	uxth	r3, r3
    8168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    816c:	b29a      	uxth	r2, r3
    816e:	687b      	ldr	r3, [r7, #4]
    8170:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    8172:	f06f 0301 	mvn.w	r3, #1
    8176:	e09e      	b.n	82b6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    8178:	687b      	ldr	r3, [r7, #4]
    817a:	885b      	ldrh	r3, [r3, #2]
    817c:	b29b      	uxth	r3, r3
    817e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    8182:	2b00      	cmp	r3, #0
    8184:	d01c      	beq.n	81c0 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    8186:	687b      	ldr	r3, [r7, #4]
    8188:	881b      	ldrh	r3, [r3, #0]
    818a:	121b      	asrs	r3, r3, #8
    818c:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    818e:	f003 0406 	and.w	r4, r3, #6
    8192:	68f8      	ldr	r0, [r7, #12]
    8194:	4b4e      	ldr	r3, [pc, #312]	; (82d0 <_sercom_i2c_sync_analyse_flags+0x214>)
    8196:	4798      	blx	r3
    8198:	4603      	mov	r3, r0
    819a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    819e:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    81a0:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    81a4:	4619      	mov	r1, r3
    81a6:	68f8      	ldr	r0, [r7, #12]
    81a8:	4b4a      	ldr	r3, [pc, #296]	; (82d4 <_sercom_i2c_sync_analyse_flags+0x218>)
    81aa:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    81ac:	687b      	ldr	r3, [r7, #4]
    81ae:	885b      	ldrh	r3, [r3, #2]
    81b0:	b29b      	uxth	r3, r3
    81b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    81b6:	b29a      	uxth	r2, r3
    81b8:	687b      	ldr	r3, [r7, #4]
    81ba:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    81bc:	2300      	movs	r3, #0
    81be:	e07a      	b.n	82b6 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    81c0:	687b      	ldr	r3, [r7, #4]
    81c2:	685b      	ldr	r3, [r3, #4]
    81c4:	2b00      	cmp	r3, #0
    81c6:	d111      	bne.n	81ec <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    81c8:	687b      	ldr	r3, [r7, #4]
    81ca:	885b      	ldrh	r3, [r3, #2]
    81cc:	b29b      	uxth	r3, r3
    81ce:	b21b      	sxth	r3, r3
    81d0:	2b00      	cmp	r3, #0
    81d2:	da02      	bge.n	81da <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    81d4:	68f8      	ldr	r0, [r7, #12]
    81d6:	4b3d      	ldr	r3, [pc, #244]	; (82cc <_sercom_i2c_sync_analyse_flags+0x210>)
    81d8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    81da:	687b      	ldr	r3, [r7, #4]
    81dc:	885b      	ldrh	r3, [r3, #2]
    81de:	b29b      	uxth	r3, r3
    81e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    81e4:	b29a      	uxth	r2, r3
    81e6:	687b      	ldr	r3, [r7, #4]
    81e8:	805a      	strh	r2, [r3, #2]
    81ea:	e010      	b.n	820e <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    81ec:	687b      	ldr	r3, [r7, #4]
    81ee:	689b      	ldr	r3, [r3, #8]
    81f0:	781b      	ldrb	r3, [r3, #0]
    81f2:	4619      	mov	r1, r3
    81f4:	68f8      	ldr	r0, [r7, #12]
    81f6:	4b38      	ldr	r3, [pc, #224]	; (82d8 <_sercom_i2c_sync_analyse_flags+0x21c>)
    81f8:	4798      	blx	r3
				msg->buffer++;
    81fa:	687b      	ldr	r3, [r7, #4]
    81fc:	689b      	ldr	r3, [r3, #8]
    81fe:	1c5a      	adds	r2, r3, #1
    8200:	687b      	ldr	r3, [r7, #4]
    8202:	609a      	str	r2, [r3, #8]
				msg->len--;
    8204:	687b      	ldr	r3, [r7, #4]
    8206:	685b      	ldr	r3, [r3, #4]
    8208:	1e5a      	subs	r2, r3, #1
    820a:	687b      	ldr	r3, [r7, #4]
    820c:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    820e:	2300      	movs	r3, #0
    8210:	e051      	b.n	82b6 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    8212:	68bb      	ldr	r3, [r7, #8]
    8214:	f003 0302 	and.w	r3, r3, #2
    8218:	2b00      	cmp	r3, #0
    821a:	d04b      	beq.n	82b4 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    821c:	687b      	ldr	r3, [r7, #4]
    821e:	685b      	ldr	r3, [r3, #4]
    8220:	2b00      	cmp	r3, #0
    8222:	d041      	beq.n	82a8 <_sercom_i2c_sync_analyse_flags+0x1ec>
    8224:	8a7b      	ldrh	r3, [r7, #18]
    8226:	f003 0304 	and.w	r3, r3, #4
    822a:	2b00      	cmp	r3, #0
    822c:	d13c      	bne.n	82a8 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    822e:	687b      	ldr	r3, [r7, #4]
    8230:	685b      	ldr	r3, [r3, #4]
    8232:	1e5a      	subs	r2, r3, #1
    8234:	687b      	ldr	r3, [r7, #4]
    8236:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    8238:	687b      	ldr	r3, [r7, #4]
    823a:	685b      	ldr	r3, [r3, #4]
    823c:	2b00      	cmp	r3, #0
    823e:	d102      	bne.n	8246 <_sercom_i2c_sync_analyse_flags+0x18a>
    8240:	697b      	ldr	r3, [r7, #20]
    8242:	2b00      	cmp	r3, #0
    8244:	d006      	beq.n	8254 <_sercom_i2c_sync_analyse_flags+0x198>
    8246:	687b      	ldr	r3, [r7, #4]
    8248:	685b      	ldr	r3, [r3, #4]
    824a:	2b01      	cmp	r3, #1
    824c:	d105      	bne.n	825a <_sercom_i2c_sync_analyse_flags+0x19e>
    824e:	697b      	ldr	r3, [r7, #20]
    8250:	2b00      	cmp	r3, #0
    8252:	d002      	beq.n	825a <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    8254:	68f8      	ldr	r0, [r7, #12]
    8256:	4b21      	ldr	r3, [pc, #132]	; (82dc <_sercom_i2c_sync_analyse_flags+0x220>)
    8258:	4798      	blx	r3
			}

			if (msg->len == 0) {
    825a:	687b      	ldr	r3, [r7, #4]
    825c:	685b      	ldr	r3, [r3, #4]
    825e:	2b00      	cmp	r3, #0
    8260:	d113      	bne.n	828a <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    8262:	687b      	ldr	r3, [r7, #4]
    8264:	885b      	ldrh	r3, [r3, #2]
    8266:	b29b      	uxth	r3, r3
    8268:	b21b      	sxth	r3, r3
    826a:	2b00      	cmp	r3, #0
    826c:	da05      	bge.n	827a <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    826e:	68f8      	ldr	r0, [r7, #12]
    8270:	4b1b      	ldr	r3, [pc, #108]	; (82e0 <_sercom_i2c_sync_analyse_flags+0x224>)
    8272:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    8274:	68f8      	ldr	r0, [r7, #12]
    8276:	4b15      	ldr	r3, [pc, #84]	; (82cc <_sercom_i2c_sync_analyse_flags+0x210>)
    8278:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    827a:	687b      	ldr	r3, [r7, #4]
    827c:	885b      	ldrh	r3, [r3, #2]
    827e:	b29b      	uxth	r3, r3
    8280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    8284:	b29a      	uxth	r2, r3
    8286:	687b      	ldr	r3, [r7, #4]
    8288:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    828a:	687b      	ldr	r3, [r7, #4]
    828c:	689c      	ldr	r4, [r3, #8]
    828e:	1c62      	adds	r2, r4, #1
    8290:	687b      	ldr	r3, [r7, #4]
    8292:	609a      	str	r2, [r3, #8]
    8294:	68f8      	ldr	r0, [r7, #12]
    8296:	4b13      	ldr	r3, [pc, #76]	; (82e4 <_sercom_i2c_sync_analyse_flags+0x228>)
    8298:	4798      	blx	r3
    829a:	4603      	mov	r3, r0
    829c:	b2db      	uxtb	r3, r3
    829e:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    82a0:	68f8      	ldr	r0, [r7, #12]
    82a2:	4b11      	ldr	r3, [pc, #68]	; (82e8 <_sercom_i2c_sync_analyse_flags+0x22c>)
    82a4:	4798      	blx	r3
    82a6:	e005      	b.n	82b4 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    82a8:	68f8      	ldr	r0, [r7, #12]
    82aa:	4b0f      	ldr	r3, [pc, #60]	; (82e8 <_sercom_i2c_sync_analyse_flags+0x22c>)
    82ac:	4798      	blx	r3
			return I2C_NACK;
    82ae:	f06f 0301 	mvn.w	r3, #1
    82b2:	e000      	b.n	82b6 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    82b4:	2300      	movs	r3, #0
}
    82b6:	4618      	mov	r0, r3
    82b8:	371c      	adds	r7, #28
    82ba:	46bd      	mov	sp, r7
    82bc:	bd90      	pop	{r4, r7, pc}
    82be:	bf00      	nop
    82c0:	00007b59 	.word	0x00007b59
    82c4:	00007f91 	.word	0x00007f91
    82c8:	00007a59 	.word	0x00007a59
    82cc:	000080a1 	.word	0x000080a1
    82d0:	00007e71 	.word	0x00007e71
    82d4:	00007e4d 	.word	0x00007e4d
    82d8:	00007ead 	.word	0x00007ead
    82dc:	00007d09 	.word	0x00007d09
    82e0:	00007ce1 	.word	0x00007ce1
    82e4:	00007ed1 	.word	0x00007ed1
    82e8:	00007a73 	.word	0x00007a73

000082ec <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    82ec:	b580      	push	{r7, lr}
    82ee:	b082      	sub	sp, #8
    82f0:	af00      	add	r7, sp, #0
    82f2:	6078      	str	r0, [r7, #4]
    82f4:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    82f6:	687b      	ldr	r3, [r7, #4]
    82f8:	2b00      	cmp	r3, #0
    82fa:	bf14      	ite	ne
    82fc:	2301      	movne	r3, #1
    82fe:	2300      	moveq	r3, #0
    8300:	b2db      	uxtb	r3, r3
    8302:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    8306:	4908      	ldr	r1, [pc, #32]	; (8328 <_i2c_m_sync_init+0x3c>)
    8308:	4618      	mov	r0, r3
    830a:	4b08      	ldr	r3, [pc, #32]	; (832c <_i2c_m_sync_init+0x40>)
    830c:	4798      	blx	r3

	i2c_dev->hw = hw;
    830e:	687b      	ldr	r3, [r7, #4]
    8310:	683a      	ldr	r2, [r7, #0]
    8312:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    8314:	687b      	ldr	r3, [r7, #4]
    8316:	6839      	ldr	r1, [r7, #0]
    8318:	4618      	mov	r0, r3
    831a:	4b05      	ldr	r3, [pc, #20]	; (8330 <_i2c_m_sync_init+0x44>)
    831c:	4798      	blx	r3
    831e:	4603      	mov	r3, r0
}
    8320:	4618      	mov	r0, r3
    8322:	3708      	adds	r7, #8
    8324:	46bd      	mov	sp, r7
    8326:	bd80      	pop	{r7, pc}
    8328:	0001b3e8 	.word	0x0001b3e8
    832c:	00004cdd 	.word	0x00004cdd
    8330:	00008705 	.word	0x00008705

00008334 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    8334:	b580      	push	{r7, lr}
    8336:	b082      	sub	sp, #8
    8338:	af00      	add	r7, sp, #0
    833a:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    833c:	687b      	ldr	r3, [r7, #4]
    833e:	2b00      	cmp	r3, #0
    8340:	bf14      	ite	ne
    8342:	2301      	movne	r3, #1
    8344:	2300      	moveq	r3, #0
    8346:	b2db      	uxtb	r3, r3
    8348:	f240 5235 	movw	r2, #1333	; 0x535
    834c:	4906      	ldr	r1, [pc, #24]	; (8368 <_i2c_m_sync_enable+0x34>)
    834e:	4618      	mov	r0, r3
    8350:	4b06      	ldr	r3, [pc, #24]	; (836c <_i2c_m_sync_enable+0x38>)
    8352:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    8354:	687b      	ldr	r3, [r7, #4]
    8356:	691b      	ldr	r3, [r3, #16]
    8358:	4618      	mov	r0, r3
    835a:	4b05      	ldr	r3, [pc, #20]	; (8370 <_i2c_m_sync_enable+0x3c>)
    835c:	4798      	blx	r3
    835e:	4603      	mov	r3, r0
}
    8360:	4618      	mov	r0, r3
    8362:	3708      	adds	r7, #8
    8364:	46bd      	mov	sp, r7
    8366:	bd80      	pop	{r7, pc}
    8368:	0001b3e8 	.word	0x0001b3e8
    836c:	00004cdd 	.word	0x00004cdd
    8370:	00008679 	.word	0x00008679

00008374 <_i2c_m_sync_disable>:
 * \brief Disable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_disable(struct _i2c_m_sync_device *const i2c_dev)
{
    8374:	b580      	push	{r7, lr}
    8376:	b084      	sub	sp, #16
    8378:	af00      	add	r7, sp, #0
    837a:	6078      	str	r0, [r7, #4]
	void *hw = i2c_dev->hw;
    837c:	687b      	ldr	r3, [r7, #4]
    837e:	691b      	ldr	r3, [r3, #16]
    8380:	60fb      	str	r3, [r7, #12]

	ASSERT(i2c_dev);
    8382:	687b      	ldr	r3, [r7, #4]
    8384:	2b00      	cmp	r3, #0
    8386:	bf14      	ite	ne
    8388:	2301      	movne	r3, #1
    838a:	2300      	moveq	r3, #0
    838c:	b2db      	uxtb	r3, r3
    838e:	f240 5243 	movw	r2, #1347	; 0x543
    8392:	490c      	ldr	r1, [pc, #48]	; (83c4 <_i2c_m_sync_disable+0x50>)
    8394:	4618      	mov	r0, r3
    8396:	4b0c      	ldr	r3, [pc, #48]	; (83c8 <_i2c_m_sync_disable+0x54>)
    8398:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    839a:	687b      	ldr	r3, [r7, #4]
    839c:	691b      	ldr	r3, [r3, #16]
    839e:	2b00      	cmp	r3, #0
    83a0:	bf14      	ite	ne
    83a2:	2301      	movne	r3, #1
    83a4:	2300      	moveq	r3, #0
    83a6:	b2db      	uxtb	r3, r3
    83a8:	f240 5244 	movw	r2, #1348	; 0x544
    83ac:	4905      	ldr	r1, [pc, #20]	; (83c4 <_i2c_m_sync_disable+0x50>)
    83ae:	4618      	mov	r0, r3
    83b0:	4b05      	ldr	r3, [pc, #20]	; (83c8 <_i2c_m_sync_disable+0x54>)
    83b2:	4798      	blx	r3

	hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    83b4:	68f8      	ldr	r0, [r7, #12]
    83b6:	4b05      	ldr	r3, [pc, #20]	; (83cc <_i2c_m_sync_disable+0x58>)
    83b8:	4798      	blx	r3

	return ERR_NONE;
    83ba:	2300      	movs	r3, #0
}
    83bc:	4618      	mov	r0, r3
    83be:	3710      	adds	r7, #16
    83c0:	46bd      	mov	sp, r7
    83c2:	bd80      	pop	{r7, pc}
    83c4:	0001b3e8 	.word	0x0001b3e8
    83c8:	00004cdd 	.word	0x00004cdd
    83cc:	00007b31 	.word	0x00007b31

000083d0 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    83d0:	b580      	push	{r7, lr}
    83d2:	b084      	sub	sp, #16
    83d4:	af00      	add	r7, sp, #0
    83d6:	6078      	str	r0, [r7, #4]
    83d8:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    83da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    83de:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    83e0:	687b      	ldr	r3, [r7, #4]
    83e2:	691b      	ldr	r3, [r3, #16]
    83e4:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    83e6:	68b8      	ldr	r0, [r7, #8]
    83e8:	4b0f      	ldr	r3, [pc, #60]	; (8428 <_sercom_i2c_sync_wait_bus+0x58>)
    83ea:	4798      	blx	r3
    83ec:	4603      	mov	r3, r0
    83ee:	461a      	mov	r2, r3
    83f0:	683b      	ldr	r3, [r7, #0]
    83f2:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    83f4:	68fb      	ldr	r3, [r7, #12]
    83f6:	1e5a      	subs	r2, r3, #1
    83f8:	60fa      	str	r2, [r7, #12]
    83fa:	2b00      	cmp	r3, #0
    83fc:	d102      	bne.n	8404 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    83fe:	f06f 0304 	mvn.w	r3, #4
    8402:	e00c      	b.n	841e <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    8404:	683b      	ldr	r3, [r7, #0]
    8406:	681b      	ldr	r3, [r3, #0]
    8408:	f003 0301 	and.w	r3, r3, #1
    840c:	2b00      	cmp	r3, #0
    840e:	d105      	bne.n	841c <_sercom_i2c_sync_wait_bus+0x4c>
    8410:	683b      	ldr	r3, [r7, #0]
    8412:	681b      	ldr	r3, [r3, #0]
    8414:	f003 0302 	and.w	r3, r3, #2
    8418:	2b00      	cmp	r3, #0
    841a:	d0e4      	beq.n	83e6 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    841c:	2300      	movs	r3, #0
}
    841e:	4618      	mov	r0, r3
    8420:	3710      	adds	r7, #16
    8422:	46bd      	mov	sp, r7
    8424:	bd80      	pop	{r7, pc}
    8426:	bf00      	nop
    8428:	00007a8d 	.word	0x00007a8d

0000842c <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    842c:	b590      	push	{r4, r7, lr}
    842e:	b087      	sub	sp, #28
    8430:	af00      	add	r7, sp, #0
    8432:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    8434:	687b      	ldr	r3, [r7, #4]
    8436:	691b      	ldr	r3, [r3, #16]
    8438:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    843a:	687b      	ldr	r3, [r7, #4]
    843c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    843e:	6978      	ldr	r0, [r7, #20]
    8440:	4b39      	ldr	r3, [pc, #228]	; (8528 <_sercom_i2c_sync_send_address+0xfc>)
    8442:	4798      	blx	r3
    8444:	4603      	mov	r3, r0
    8446:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    8448:	687b      	ldr	r3, [r7, #4]
    844a:	2b00      	cmp	r3, #0
    844c:	bf14      	ite	ne
    844e:	2301      	movne	r3, #1
    8450:	2300      	moveq	r3, #0
    8452:	b2db      	uxtb	r3, r3
    8454:	f240 52a5 	movw	r2, #1445	; 0x5a5
    8458:	4934      	ldr	r1, [pc, #208]	; (852c <_sercom_i2c_sync_send_address+0x100>)
    845a:	4618      	mov	r0, r3
    845c:	4b34      	ldr	r3, [pc, #208]	; (8530 <_sercom_i2c_sync_send_address+0x104>)
    845e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    8460:	693b      	ldr	r3, [r7, #16]
    8462:	685b      	ldr	r3, [r3, #4]
    8464:	2b01      	cmp	r3, #1
    8466:	d106      	bne.n	8476 <_sercom_i2c_sync_send_address+0x4a>
    8468:	68fb      	ldr	r3, [r7, #12]
    846a:	2b00      	cmp	r3, #0
    846c:	d003      	beq.n	8476 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    846e:	6978      	ldr	r0, [r7, #20]
    8470:	4b30      	ldr	r3, [pc, #192]	; (8534 <_sercom_i2c_sync_send_address+0x108>)
    8472:	4798      	blx	r3
    8474:	e002      	b.n	847c <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    8476:	6978      	ldr	r0, [r7, #20]
    8478:	4b2f      	ldr	r3, [pc, #188]	; (8538 <_sercom_i2c_sync_send_address+0x10c>)
    847a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    847c:	693b      	ldr	r3, [r7, #16]
    847e:	881b      	ldrh	r3, [r3, #0]
    8480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    8484:	2b00      	cmp	r3, #0
    8486:	d022      	beq.n	84ce <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    8488:	693b      	ldr	r3, [r7, #16]
    848a:	885b      	ldrh	r3, [r3, #2]
    848c:	b29b      	uxth	r3, r3
    848e:	f003 0301 	and.w	r3, r3, #1
    8492:	2b00      	cmp	r3, #0
    8494:	d007      	beq.n	84a6 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    8496:	693b      	ldr	r3, [r7, #16]
    8498:	885b      	ldrh	r3, [r3, #2]
    849a:	b29b      	uxth	r3, r3
    849c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    84a0:	b29a      	uxth	r2, r3
    84a2:	693b      	ldr	r3, [r7, #16]
    84a4:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    84a6:	693b      	ldr	r3, [r7, #16]
    84a8:	881b      	ldrh	r3, [r3, #0]
    84aa:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    84ac:	f240 74fe 	movw	r4, #2046	; 0x7fe
    84b0:	401c      	ands	r4, r3
    84b2:	6978      	ldr	r0, [r7, #20]
    84b4:	4b21      	ldr	r3, [pc, #132]	; (853c <_sercom_i2c_sync_send_address+0x110>)
    84b6:	4798      	blx	r3
    84b8:	4603      	mov	r3, r0
    84ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    84be:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    84c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    84c4:	4619      	mov	r1, r3
    84c6:	6978      	ldr	r0, [r7, #20]
    84c8:	4b1d      	ldr	r3, [pc, #116]	; (8540 <_sercom_i2c_sync_send_address+0x114>)
    84ca:	4798      	blx	r3
    84cc:	e01a      	b.n	8504 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    84ce:	693b      	ldr	r3, [r7, #16]
    84d0:	881b      	ldrh	r3, [r3, #0]
    84d2:	005b      	lsls	r3, r3, #1
    84d4:	b2db      	uxtb	r3, r3
    84d6:	693a      	ldr	r2, [r7, #16]
    84d8:	8852      	ldrh	r2, [r2, #2]
    84da:	b292      	uxth	r2, r2
    84dc:	f002 0201 	and.w	r2, r2, #1
    84e0:	2a00      	cmp	r2, #0
    84e2:	bf14      	ite	ne
    84e4:	2201      	movne	r2, #1
    84e6:	2200      	moveq	r2, #0
    84e8:	b2d2      	uxtb	r2, r2
    84ea:	4313      	orrs	r3, r2
    84ec:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    84ee:	6978      	ldr	r0, [r7, #20]
    84f0:	4b12      	ldr	r3, [pc, #72]	; (853c <_sercom_i2c_sync_send_address+0x110>)
    84f2:	4798      	blx	r3
    84f4:	4603      	mov	r3, r0
    84f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    84fa:	4323      	orrs	r3, r4
    84fc:	4619      	mov	r1, r3
    84fe:	6978      	ldr	r0, [r7, #20]
    8500:	4b0f      	ldr	r3, [pc, #60]	; (8540 <_sercom_i2c_sync_send_address+0x114>)
    8502:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    8504:	f107 0308 	add.w	r3, r7, #8
    8508:	4619      	mov	r1, r3
    850a:	6878      	ldr	r0, [r7, #4]
    850c:	4b0d      	ldr	r3, [pc, #52]	; (8544 <_sercom_i2c_sync_send_address+0x118>)
    850e:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    8510:	68bb      	ldr	r3, [r7, #8]
    8512:	693a      	ldr	r2, [r7, #16]
    8514:	4619      	mov	r1, r3
    8516:	6978      	ldr	r0, [r7, #20]
    8518:	4b0b      	ldr	r3, [pc, #44]	; (8548 <_sercom_i2c_sync_send_address+0x11c>)
    851a:	4798      	blx	r3
    851c:	4603      	mov	r3, r0
}
    851e:	4618      	mov	r0, r3
    8520:	371c      	adds	r7, #28
    8522:	46bd      	mov	sp, r7
    8524:	bd90      	pop	{r4, r7, pc}
    8526:	bf00      	nop
    8528:	00007b59 	.word	0x00007b59
    852c:	0001b3e8 	.word	0x0001b3e8
    8530:	00004cdd 	.word	0x00004cdd
    8534:	00007d09 	.word	0x00007d09
    8538:	00007d31 	.word	0x00007d31
    853c:	00007e71 	.word	0x00007e71
    8540:	00007e4d 	.word	0x00007e4d
    8544:	000083d1 	.word	0x000083d1
    8548:	000080bd 	.word	0x000080bd

0000854c <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    854c:	b580      	push	{r7, lr}
    854e:	b086      	sub	sp, #24
    8550:	af00      	add	r7, sp, #0
    8552:	6078      	str	r0, [r7, #4]
    8554:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    8556:	687b      	ldr	r3, [r7, #4]
    8558:	691b      	ldr	r3, [r3, #16]
    855a:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    855c:	687b      	ldr	r3, [r7, #4]
    855e:	2b00      	cmp	r3, #0
    8560:	bf14      	ite	ne
    8562:	2301      	movne	r3, #1
    8564:	2300      	moveq	r3, #0
    8566:	b2db      	uxtb	r3, r3
    8568:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    856c:	493b      	ldr	r1, [pc, #236]	; (865c <_i2c_m_sync_transfer+0x110>)
    856e:	4618      	mov	r0, r3
    8570:	4b3b      	ldr	r3, [pc, #236]	; (8660 <_i2c_m_sync_transfer+0x114>)
    8572:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    8574:	687b      	ldr	r3, [r7, #4]
    8576:	691b      	ldr	r3, [r3, #16]
    8578:	2b00      	cmp	r3, #0
    857a:	bf14      	ite	ne
    857c:	2301      	movne	r3, #1
    857e:	2300      	moveq	r3, #0
    8580:	b2db      	uxtb	r3, r3
    8582:	f240 52d1 	movw	r2, #1489	; 0x5d1
    8586:	4935      	ldr	r1, [pc, #212]	; (865c <_i2c_m_sync_transfer+0x110>)
    8588:	4618      	mov	r0, r3
    858a:	4b35      	ldr	r3, [pc, #212]	; (8660 <_i2c_m_sync_transfer+0x114>)
    858c:	4798      	blx	r3
	ASSERT(msg);
    858e:	683b      	ldr	r3, [r7, #0]
    8590:	2b00      	cmp	r3, #0
    8592:	bf14      	ite	ne
    8594:	2301      	movne	r3, #1
    8596:	2300      	moveq	r3, #0
    8598:	b2db      	uxtb	r3, r3
    859a:	f240 52d2 	movw	r2, #1490	; 0x5d2
    859e:	492f      	ldr	r1, [pc, #188]	; (865c <_i2c_m_sync_transfer+0x110>)
    85a0:	4618      	mov	r0, r3
    85a2:	4b2f      	ldr	r3, [pc, #188]	; (8660 <_i2c_m_sync_transfer+0x114>)
    85a4:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    85a6:	687b      	ldr	r3, [r7, #4]
    85a8:	885b      	ldrh	r3, [r3, #2]
    85aa:	b29b      	uxth	r3, r3
    85ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
    85b0:	2b00      	cmp	r3, #0
    85b2:	d002      	beq.n	85ba <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    85b4:	f06f 0305 	mvn.w	r3, #5
    85b8:	e04c      	b.n	8654 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    85ba:	683b      	ldr	r3, [r7, #0]
    85bc:	885b      	ldrh	r3, [r3, #2]
    85be:	b29b      	uxth	r3, r3
    85c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    85c4:	b29a      	uxth	r2, r3
    85c6:	683b      	ldr	r3, [r7, #0]
    85c8:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    85ca:	687b      	ldr	r3, [r7, #4]
    85cc:	683a      	ldr	r2, [r7, #0]
    85ce:	ca07      	ldmia	r2, {r0, r1, r2}
    85d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    85d4:	6938      	ldr	r0, [r7, #16]
    85d6:	4b23      	ldr	r3, [pc, #140]	; (8664 <_i2c_m_sync_transfer+0x118>)
    85d8:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    85da:	6878      	ldr	r0, [r7, #4]
    85dc:	4b22      	ldr	r3, [pc, #136]	; (8668 <_i2c_m_sync_transfer+0x11c>)
    85de:	4798      	blx	r3
    85e0:	6178      	str	r0, [r7, #20]

	if (ret) {
    85e2:	697b      	ldr	r3, [r7, #20]
    85e4:	2b00      	cmp	r3, #0
    85e6:	d02d      	beq.n	8644 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    85e8:	687b      	ldr	r3, [r7, #4]
    85ea:	885b      	ldrh	r3, [r3, #2]
    85ec:	b29b      	uxth	r3, r3
    85ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    85f2:	b29a      	uxth	r2, r3
    85f4:	687b      	ldr	r3, [r7, #4]
    85f6:	805a      	strh	r2, [r3, #2]

		return ret;
    85f8:	697b      	ldr	r3, [r7, #20]
    85fa:	e02b      	b.n	8654 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    85fc:	f107 030c 	add.w	r3, r7, #12
    8600:	4619      	mov	r1, r3
    8602:	6878      	ldr	r0, [r7, #4]
    8604:	4b19      	ldr	r3, [pc, #100]	; (866c <_i2c_m_sync_transfer+0x120>)
    8606:	4798      	blx	r3
    8608:	6178      	str	r0, [r7, #20]

		if (ret) {
    860a:	697b      	ldr	r3, [r7, #20]
    860c:	2b00      	cmp	r3, #0
    860e:	d012      	beq.n	8636 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    8610:	683b      	ldr	r3, [r7, #0]
    8612:	885b      	ldrh	r3, [r3, #2]
    8614:	b29b      	uxth	r3, r3
    8616:	b21b      	sxth	r3, r3
    8618:	2b00      	cmp	r3, #0
    861a:	da02      	bge.n	8622 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    861c:	6938      	ldr	r0, [r7, #16]
    861e:	4b14      	ldr	r3, [pc, #80]	; (8670 <_i2c_m_sync_transfer+0x124>)
    8620:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    8622:	687b      	ldr	r3, [r7, #4]
    8624:	885b      	ldrh	r3, [r3, #2]
    8626:	b29b      	uxth	r3, r3
    8628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    862c:	b29a      	uxth	r2, r3
    862e:	687b      	ldr	r3, [r7, #4]
    8630:	805a      	strh	r2, [r3, #2]

			return ret;
    8632:	697b      	ldr	r3, [r7, #20]
    8634:	e00e      	b.n	8654 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    8636:	68fb      	ldr	r3, [r7, #12]
    8638:	687a      	ldr	r2, [r7, #4]
    863a:	4619      	mov	r1, r3
    863c:	6938      	ldr	r0, [r7, #16]
    863e:	4b0d      	ldr	r3, [pc, #52]	; (8674 <_i2c_m_sync_transfer+0x128>)
    8640:	4798      	blx	r3
    8642:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    8644:	687b      	ldr	r3, [r7, #4]
    8646:	885b      	ldrh	r3, [r3, #2]
    8648:	b29b      	uxth	r3, r3
    864a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    864e:	2b00      	cmp	r3, #0
    8650:	d1d4      	bne.n	85fc <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    8652:	697b      	ldr	r3, [r7, #20]
}
    8654:	4618      	mov	r0, r3
    8656:	3718      	adds	r7, #24
    8658:	46bd      	mov	sp, r7
    865a:	bd80      	pop	{r7, pc}
    865c:	0001b3e8 	.word	0x0001b3e8
    8660:	00004cdd 	.word	0x00004cdd
    8664:	00007cb9 	.word	0x00007cb9
    8668:	0000842d 	.word	0x0000842d
    866c:	000083d1 	.word	0x000083d1
    8670:	000080a1 	.word	0x000080a1
    8674:	000080bd 	.word	0x000080bd

00008678 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    8678:	b580      	push	{r7, lr}
    867a:	b084      	sub	sp, #16
    867c:	af00      	add	r7, sp, #0
    867e:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    8680:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8684:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    8686:	2304      	movs	r3, #4
    8688:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    868a:	687b      	ldr	r3, [r7, #4]
    868c:	2b00      	cmp	r3, #0
    868e:	bf14      	ite	ne
    8690:	2301      	movne	r3, #1
    8692:	2300      	moveq	r3, #0
    8694:	b2db      	uxtb	r3, r3
    8696:	f240 6205 	movw	r2, #1541	; 0x605
    869a:	4915      	ldr	r1, [pc, #84]	; (86f0 <_i2c_m_enable_implementation+0x78>)
    869c:	4618      	mov	r0, r3
    869e:	4b15      	ldr	r3, [pc, #84]	; (86f4 <_i2c_m_enable_implementation+0x7c>)
    86a0:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    86a2:	6878      	ldr	r0, [r7, #4]
    86a4:	4b14      	ldr	r3, [pc, #80]	; (86f8 <_i2c_m_enable_implementation+0x80>)
    86a6:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    86a8:	e016      	b.n	86d8 <_i2c_m_enable_implementation+0x60>
		timeout--;
    86aa:	68fb      	ldr	r3, [r7, #12]
    86ac:	3b01      	subs	r3, #1
    86ae:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    86b0:	68fb      	ldr	r3, [r7, #12]
    86b2:	2b00      	cmp	r3, #0
    86b4:	dc10      	bgt.n	86d8 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    86b6:	68bb      	ldr	r3, [r7, #8]
    86b8:	3b01      	subs	r3, #1
    86ba:	60bb      	str	r3, [r7, #8]
    86bc:	68bb      	ldr	r3, [r7, #8]
    86be:	2b00      	cmp	r3, #0
    86c0:	d007      	beq.n	86d2 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    86c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    86c6:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    86c8:	2110      	movs	r1, #16
    86ca:	6878      	ldr	r0, [r7, #4]
    86cc:	4b0b      	ldr	r3, [pc, #44]	; (86fc <_i2c_m_enable_implementation+0x84>)
    86ce:	4798      	blx	r3
    86d0:	e002      	b.n	86d8 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    86d2:	f06f 0305 	mvn.w	r3, #5
    86d6:	e006      	b.n	86e6 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    86d8:	6878      	ldr	r0, [r7, #4]
    86da:	4b09      	ldr	r3, [pc, #36]	; (8700 <_i2c_m_enable_implementation+0x88>)
    86dc:	4798      	blx	r3
    86de:	4603      	mov	r3, r0
    86e0:	2b01      	cmp	r3, #1
    86e2:	d1e2      	bne.n	86aa <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    86e4:	2300      	movs	r3, #0
}
    86e6:	4618      	mov	r0, r3
    86e8:	3710      	adds	r7, #16
    86ea:	46bd      	mov	sp, r7
    86ec:	bd80      	pop	{r7, pc}
    86ee:	bf00      	nop
    86f0:	0001b3e8 	.word	0x0001b3e8
    86f4:	00004cdd 	.word	0x00004cdd
    86f8:	00007b09 	.word	0x00007b09
    86fc:	00007fb5 	.word	0x00007fb5
    8700:	00007f65 	.word	0x00007f65

00008704 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    8704:	b580      	push	{r7, lr}
    8706:	b084      	sub	sp, #16
    8708:	af00      	add	r7, sp, #0
    870a:	6078      	str	r0, [r7, #4]
    870c:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    870e:	6838      	ldr	r0, [r7, #0]
    8710:	4b42      	ldr	r3, [pc, #264]	; (881c <_i2c_m_sync_init_impl+0x118>)
    8712:	4798      	blx	r3
    8714:	4603      	mov	r3, r0
    8716:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    8718:	2101      	movs	r1, #1
    871a:	6838      	ldr	r0, [r7, #0]
    871c:	4b40      	ldr	r3, [pc, #256]	; (8820 <_i2c_m_sync_init_impl+0x11c>)
    871e:	4798      	blx	r3
    8720:	4603      	mov	r3, r0
    8722:	f083 0301 	eor.w	r3, r3, #1
    8726:	b2db      	uxtb	r3, r3
    8728:	2b00      	cmp	r3, #0
    872a:	d020      	beq.n	876e <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    872c:	7bfa      	ldrb	r2, [r7, #15]
    872e:	493d      	ldr	r1, [pc, #244]	; (8824 <_i2c_m_sync_init_impl+0x120>)
    8730:	4613      	mov	r3, r2
    8732:	005b      	lsls	r3, r3, #1
    8734:	4413      	add	r3, r2
    8736:	00db      	lsls	r3, r3, #3
    8738:	440b      	add	r3, r1
    873a:	3304      	adds	r3, #4
    873c:	681b      	ldr	r3, [r3, #0]
    873e:	f003 031c 	and.w	r3, r3, #28
    8742:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    8744:	2102      	movs	r1, #2
    8746:	6838      	ldr	r0, [r7, #0]
    8748:	4b37      	ldr	r3, [pc, #220]	; (8828 <_i2c_m_sync_init_impl+0x124>)
    874a:	4798      	blx	r3
    874c:	4603      	mov	r3, r0
    874e:	2b00      	cmp	r3, #0
    8750:	d006      	beq.n	8760 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    8752:	6838      	ldr	r0, [r7, #0]
    8754:	4b35      	ldr	r3, [pc, #212]	; (882c <_i2c_m_sync_init_impl+0x128>)
    8756:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    8758:	2102      	movs	r1, #2
    875a:	6838      	ldr	r0, [r7, #0]
    875c:	4b34      	ldr	r3, [pc, #208]	; (8830 <_i2c_m_sync_init_impl+0x12c>)
    875e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    8760:	68bb      	ldr	r3, [r7, #8]
    8762:	f043 0301 	orr.w	r3, r3, #1
    8766:	4619      	mov	r1, r3
    8768:	6838      	ldr	r0, [r7, #0]
    876a:	4b32      	ldr	r3, [pc, #200]	; (8834 <_i2c_m_sync_init_impl+0x130>)
    876c:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    876e:	2101      	movs	r1, #1
    8770:	6838      	ldr	r0, [r7, #0]
    8772:	4b2f      	ldr	r3, [pc, #188]	; (8830 <_i2c_m_sync_init_impl+0x12c>)
    8774:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    8776:	7bfa      	ldrb	r2, [r7, #15]
    8778:	492a      	ldr	r1, [pc, #168]	; (8824 <_i2c_m_sync_init_impl+0x120>)
    877a:	4613      	mov	r3, r2
    877c:	005b      	lsls	r3, r3, #1
    877e:	4413      	add	r3, r2
    8780:	00db      	lsls	r3, r3, #3
    8782:	440b      	add	r3, r1
    8784:	3304      	adds	r3, #4
    8786:	681b      	ldr	r3, [r3, #0]
    8788:	4619      	mov	r1, r3
    878a:	6838      	ldr	r0, [r7, #0]
    878c:	4b29      	ldr	r3, [pc, #164]	; (8834 <_i2c_m_sync_init_impl+0x130>)
    878e:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    8790:	7bfa      	ldrb	r2, [r7, #15]
    8792:	4924      	ldr	r1, [pc, #144]	; (8824 <_i2c_m_sync_init_impl+0x120>)
    8794:	4613      	mov	r3, r2
    8796:	005b      	lsls	r3, r3, #1
    8798:	4413      	add	r3, r2
    879a:	00db      	lsls	r3, r3, #3
    879c:	440b      	add	r3, r1
    879e:	3308      	adds	r3, #8
    87a0:	681b      	ldr	r3, [r3, #0]
    87a2:	4619      	mov	r1, r3
    87a4:	6838      	ldr	r0, [r7, #0]
    87a6:	4b24      	ldr	r3, [pc, #144]	; (8838 <_i2c_m_sync_init_impl+0x134>)
    87a8:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    87aa:	7bfa      	ldrb	r2, [r7, #15]
    87ac:	491d      	ldr	r1, [pc, #116]	; (8824 <_i2c_m_sync_init_impl+0x120>)
    87ae:	4613      	mov	r3, r2
    87b0:	005b      	lsls	r3, r3, #1
    87b2:	4413      	add	r3, r2
    87b4:	00db      	lsls	r3, r3, #3
    87b6:	440b      	add	r3, r1
    87b8:	330c      	adds	r3, #12
    87ba:	681b      	ldr	r3, [r3, #0]
    87bc:	4619      	mov	r1, r3
    87be:	6838      	ldr	r0, [r7, #0]
    87c0:	4b1e      	ldr	r3, [pc, #120]	; (883c <_i2c_m_sync_init_impl+0x138>)
    87c2:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    87c4:	7bfa      	ldrb	r2, [r7, #15]
    87c6:	4917      	ldr	r1, [pc, #92]	; (8824 <_i2c_m_sync_init_impl+0x120>)
    87c8:	4613      	mov	r3, r2
    87ca:	005b      	lsls	r3, r3, #1
    87cc:	4413      	add	r3, r2
    87ce:	00db      	lsls	r3, r3, #3
    87d0:	440b      	add	r3, r1
    87d2:	3304      	adds	r3, #4
    87d4:	681b      	ldr	r3, [r3, #0]
    87d6:	0e1b      	lsrs	r3, r3, #24
    87d8:	b29b      	uxth	r3, r3
    87da:	f003 0303 	and.w	r3, r3, #3
    87de:	b29a      	uxth	r2, r3
    87e0:	687b      	ldr	r3, [r7, #4]
    87e2:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    87e4:	687b      	ldr	r3, [r7, #4]
    87e6:	899b      	ldrh	r3, [r3, #12]
    87e8:	2b01      	cmp	r3, #1
    87ea:	bf8c      	ite	hi
    87ec:	2301      	movhi	r3, #1
    87ee:	2300      	movls	r3, #0
    87f0:	b2db      	uxtb	r3, r3
    87f2:	4619      	mov	r1, r3
    87f4:	6838      	ldr	r0, [r7, #0]
    87f6:	4b12      	ldr	r3, [pc, #72]	; (8840 <_i2c_m_sync_init_impl+0x13c>)
    87f8:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    87fa:	7bfa      	ldrb	r2, [r7, #15]
    87fc:	4909      	ldr	r1, [pc, #36]	; (8824 <_i2c_m_sync_init_impl+0x120>)
    87fe:	4613      	mov	r3, r2
    8800:	005b      	lsls	r3, r3, #1
    8802:	4413      	add	r3, r2
    8804:	00db      	lsls	r3, r3, #3
    8806:	440b      	add	r3, r1
    8808:	3312      	adds	r3, #18
    880a:	881a      	ldrh	r2, [r3, #0]
    880c:	687b      	ldr	r3, [r7, #4]
    880e:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    8810:	2300      	movs	r3, #0
}
    8812:	4618      	mov	r0, r3
    8814:	3710      	adds	r7, #16
    8816:	46bd      	mov	sp, r7
    8818:	bd80      	pop	{r7, pc}
    881a:	bf00      	nop
    881c:	00008039 	.word	0x00008039
    8820:	000079e5 	.word	0x000079e5
    8824:	20000018 	.word	0x20000018
    8828:	00007b89 	.word	0x00007b89
    882c:	00007b31 	.word	0x00007b31
    8830:	000079c1 	.word	0x000079c1
    8834:	00007bb9 	.word	0x00007bb9
    8838:	00007d89 	.word	0x00007d89
    883c:	00007dd1 	.word	0x00007dd1
    8840:	00007e0d 	.word	0x00007e0d

00008844 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    8844:	b580      	push	{r7, lr}
    8846:	b082      	sub	sp, #8
    8848:	af00      	add	r7, sp, #0
    884a:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    884c:	2101      	movs	r1, #1
    884e:	6878      	ldr	r0, [r7, #4]
    8850:	4b07      	ldr	r3, [pc, #28]	; (8870 <_spi_sync_enable+0x2c>)
    8852:	4798      	blx	r3
    8854:	4603      	mov	r3, r0
    8856:	2b00      	cmp	r3, #0
    8858:	d002      	beq.n	8860 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    885a:	f06f 0303 	mvn.w	r3, #3
    885e:	e003      	b.n	8868 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    8860:	6878      	ldr	r0, [r7, #4]
    8862:	4b04      	ldr	r3, [pc, #16]	; (8874 <_spi_sync_enable+0x30>)
    8864:	4798      	blx	r3

	return ERR_NONE;
    8866:	2300      	movs	r3, #0
}
    8868:	4618      	mov	r0, r3
    886a:	3708      	adds	r7, #8
    886c:	46bd      	mov	sp, r7
    886e:	bd80      	pop	{r7, pc}
    8870:	00007a31 	.word	0x00007a31
    8874:	00007bdd 	.word	0x00007bdd

00008878 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    8878:	b580      	push	{r7, lr}
    887a:	b082      	sub	sp, #8
    887c:	af00      	add	r7, sp, #0
    887e:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8880:	2101      	movs	r1, #1
    8882:	6878      	ldr	r0, [r7, #4]
    8884:	4b07      	ldr	r3, [pc, #28]	; (88a4 <_spi_sync_disable+0x2c>)
    8886:	4798      	blx	r3
    8888:	4603      	mov	r3, r0
    888a:	2b00      	cmp	r3, #0
    888c:	d002      	beq.n	8894 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    888e:	f06f 0303 	mvn.w	r3, #3
    8892:	e003      	b.n	889c <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    8894:	6878      	ldr	r0, [r7, #4]
    8896:	4b04      	ldr	r3, [pc, #16]	; (88a8 <_spi_sync_disable+0x30>)
    8898:	4798      	blx	r3

	return ERR_NONE;
    889a:	2300      	movs	r3, #0
}
    889c:	4618      	mov	r0, r3
    889e:	3708      	adds	r7, #8
    88a0:	46bd      	mov	sp, r7
    88a2:	bd80      	pop	{r7, pc}
    88a4:	00007a31 	.word	0x00007a31
    88a8:	00007c3d 	.word	0x00007c3d

000088ac <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    88ac:	b580      	push	{r7, lr}
    88ae:	b082      	sub	sp, #8
    88b0:	af00      	add	r7, sp, #0
    88b2:	6078      	str	r0, [r7, #4]
    88b4:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    88b6:	687b      	ldr	r3, [r7, #4]
    88b8:	2b00      	cmp	r3, #0
    88ba:	d004      	beq.n	88c6 <_spi_load_regs_master+0x1a>
    88bc:	683b      	ldr	r3, [r7, #0]
    88be:	2b00      	cmp	r3, #0
    88c0:	d001      	beq.n	88c6 <_spi_load_regs_master+0x1a>
    88c2:	2301      	movs	r3, #1
    88c4:	e000      	b.n	88c8 <_spi_load_regs_master+0x1c>
    88c6:	2300      	movs	r3, #0
    88c8:	f003 0301 	and.w	r3, r3, #1
    88cc:	b2db      	uxtb	r3, r3
    88ce:	f640 1209 	movw	r2, #2313	; 0x909
    88d2:	4915      	ldr	r1, [pc, #84]	; (8928 <_spi_load_regs_master+0x7c>)
    88d4:	4618      	mov	r0, r3
    88d6:	4b15      	ldr	r3, [pc, #84]	; (892c <_spi_load_regs_master+0x80>)
    88d8:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    88da:	683b      	ldr	r3, [r7, #0]
    88dc:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    88de:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    88e2:	f023 0301 	bic.w	r3, r3, #1
    88e6:	4619      	mov	r1, r3
    88e8:	6878      	ldr	r0, [r7, #4]
    88ea:	4b11      	ldr	r3, [pc, #68]	; (8930 <_spi_load_regs_master+0x84>)
    88ec:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    88ee:	683b      	ldr	r3, [r7, #0]
    88f0:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    88f2:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    88f6:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    88fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    88fe:	4619      	mov	r1, r3
    8900:	6878      	ldr	r0, [r7, #4]
    8902:	4b0c      	ldr	r3, [pc, #48]	; (8934 <_spi_load_regs_master+0x88>)
    8904:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    8906:	683b      	ldr	r3, [r7, #0]
    8908:	7b1b      	ldrb	r3, [r3, #12]
    890a:	4619      	mov	r1, r3
    890c:	6878      	ldr	r0, [r7, #4]
    890e:	4b0a      	ldr	r3, [pc, #40]	; (8938 <_spi_load_regs_master+0x8c>)
    8910:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    8912:	683b      	ldr	r3, [r7, #0]
    8914:	7b5b      	ldrb	r3, [r3, #13]
    8916:	4619      	mov	r1, r3
    8918:	6878      	ldr	r0, [r7, #4]
    891a:	4b08      	ldr	r3, [pc, #32]	; (893c <_spi_load_regs_master+0x90>)
    891c:	4798      	blx	r3
}
    891e:	bf00      	nop
    8920:	3708      	adds	r7, #8
    8922:	46bd      	mov	sp, r7
    8924:	bd80      	pop	{r7, pc}
    8926:	bf00      	nop
    8928:	0001b3e8 	.word	0x0001b3e8
    892c:	00004cdd 	.word	0x00004cdd
    8930:	00007c95 	.word	0x00007c95
    8934:	00007dad 	.word	0x00007dad
    8938:	00007ded 	.word	0x00007ded
    893c:	00007f25 	.word	0x00007f25

00008940 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    8940:	b580      	push	{r7, lr}
    8942:	b082      	sub	sp, #8
    8944:	af00      	add	r7, sp, #0
    8946:	6078      	str	r0, [r7, #4]
    8948:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    894a:	687b      	ldr	r3, [r7, #4]
    894c:	2b00      	cmp	r3, #0
    894e:	d004      	beq.n	895a <_spi_load_regs_slave+0x1a>
    8950:	683b      	ldr	r3, [r7, #0]
    8952:	2b00      	cmp	r3, #0
    8954:	d001      	beq.n	895a <_spi_load_regs_slave+0x1a>
    8956:	2301      	movs	r3, #1
    8958:	e000      	b.n	895c <_spi_load_regs_slave+0x1c>
    895a:	2300      	movs	r3, #0
    895c:	f003 0301 	and.w	r3, r3, #1
    8960:	b2db      	uxtb	r3, r3
    8962:	f640 121d 	movw	r2, #2333	; 0x91d
    8966:	491a      	ldr	r1, [pc, #104]	; (89d0 <_spi_load_regs_slave+0x90>)
    8968:	4618      	mov	r0, r3
    896a:	4b1a      	ldr	r3, [pc, #104]	; (89d4 <_spi_load_regs_slave+0x94>)
    896c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    896e:	683b      	ldr	r3, [r7, #0]
    8970:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    8972:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    8976:	f023 0301 	bic.w	r3, r3, #1
    897a:	4619      	mov	r1, r3
    897c:	6878      	ldr	r0, [r7, #4]
    897e:	4b16      	ldr	r3, [pc, #88]	; (89d8 <_spi_load_regs_slave+0x98>)
    8980:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    8982:	683b      	ldr	r3, [r7, #0]
    8984:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    8986:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    898a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    898e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8992:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    8996:	4619      	mov	r1, r3
    8998:	6878      	ldr	r0, [r7, #4]
    899a:	4b10      	ldr	r3, [pc, #64]	; (89dc <_spi_load_regs_slave+0x9c>)
    899c:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    899e:	683b      	ldr	r3, [r7, #0]
    89a0:	689b      	ldr	r3, [r3, #8]
    89a2:	4619      	mov	r1, r3
    89a4:	6878      	ldr	r0, [r7, #4]
    89a6:	4b0e      	ldr	r3, [pc, #56]	; (89e0 <_spi_load_regs_slave+0xa0>)
    89a8:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    89aa:	683b      	ldr	r3, [r7, #0]
    89ac:	7b5b      	ldrb	r3, [r3, #13]
    89ae:	4619      	mov	r1, r3
    89b0:	6878      	ldr	r0, [r7, #4]
    89b2:	4b0c      	ldr	r3, [pc, #48]	; (89e4 <_spi_load_regs_slave+0xa4>)
    89b4:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    89b6:	bf00      	nop
    89b8:	f04f 31ff 	mov.w	r1, #4294967295
    89bc:	6878      	ldr	r0, [r7, #4]
    89be:	4b0a      	ldr	r3, [pc, #40]	; (89e8 <_spi_load_regs_slave+0xa8>)
    89c0:	4798      	blx	r3
    89c2:	4603      	mov	r3, r0
    89c4:	2b00      	cmp	r3, #0
    89c6:	d1f7      	bne.n	89b8 <_spi_load_regs_slave+0x78>
		;
}
    89c8:	bf00      	nop
    89ca:	3708      	adds	r7, #8
    89cc:	46bd      	mov	sp, r7
    89ce:	bd80      	pop	{r7, pc}
    89d0:	0001b3e8 	.word	0x0001b3e8
    89d4:	00004cdd 	.word	0x00004cdd
    89d8:	00007c95 	.word	0x00007c95
    89dc:	00007dad 	.word	0x00007dad
    89e0:	00007e91 	.word	0x00007e91
    89e4:	00007f25 	.word	0x00007f25
    89e8:	00007a31 	.word	0x00007a31

000089ec <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    89ec:	b580      	push	{r7, lr}
    89ee:	b084      	sub	sp, #16
    89f0:	af00      	add	r7, sp, #0
    89f2:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    89f4:	687b      	ldr	r3, [r7, #4]
    89f6:	4618      	mov	r0, r3
    89f8:	4b11      	ldr	r3, [pc, #68]	; (8a40 <_spi_get_regs+0x54>)
    89fa:	4798      	blx	r3
    89fc:	4603      	mov	r3, r0
    89fe:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    8a00:	2300      	movs	r3, #0
    8a02:	73fb      	strb	r3, [r7, #15]
    8a04:	e014      	b.n	8a30 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    8a06:	7bfa      	ldrb	r2, [r7, #15]
    8a08:	490e      	ldr	r1, [pc, #56]	; (8a44 <_spi_get_regs+0x58>)
    8a0a:	4613      	mov	r3, r2
    8a0c:	011b      	lsls	r3, r3, #4
    8a0e:	4413      	add	r3, r2
    8a10:	440b      	add	r3, r1
    8a12:	3310      	adds	r3, #16
    8a14:	781b      	ldrb	r3, [r3, #0]
    8a16:	7bba      	ldrb	r2, [r7, #14]
    8a18:	429a      	cmp	r2, r3
    8a1a:	d106      	bne.n	8a2a <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    8a1c:	7bfa      	ldrb	r2, [r7, #15]
    8a1e:	4613      	mov	r3, r2
    8a20:	011b      	lsls	r3, r3, #4
    8a22:	4413      	add	r3, r2
    8a24:	4a07      	ldr	r2, [pc, #28]	; (8a44 <_spi_get_regs+0x58>)
    8a26:	4413      	add	r3, r2
    8a28:	e006      	b.n	8a38 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    8a2a:	7bfb      	ldrb	r3, [r7, #15]
    8a2c:	3301      	adds	r3, #1
    8a2e:	73fb      	strb	r3, [r7, #15]
    8a30:	7bfb      	ldrb	r3, [r7, #15]
    8a32:	2b01      	cmp	r3, #1
    8a34:	d9e7      	bls.n	8a06 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    8a36:	2300      	movs	r3, #0
}
    8a38:	4618      	mov	r0, r3
    8a3a:	3710      	adds	r7, #16
    8a3c:	46bd      	mov	sp, r7
    8a3e:	bd80      	pop	{r7, pc}
    8a40:	00007fdd 	.word	0x00007fdd
    8a44:	0001b424 	.word	0x0001b424

00008a48 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    8a48:	b580      	push	{r7, lr}
    8a4a:	b084      	sub	sp, #16
    8a4c:	af00      	add	r7, sp, #0
    8a4e:	6078      	str	r0, [r7, #4]
    8a50:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    8a52:	683b      	ldr	r3, [r7, #0]
    8a54:	4618      	mov	r0, r3
    8a56:	4b35      	ldr	r3, [pc, #212]	; (8b2c <_spi_m_sync_init+0xe4>)
    8a58:	4798      	blx	r3
    8a5a:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    8a5c:	687b      	ldr	r3, [r7, #4]
    8a5e:	2b00      	cmp	r3, #0
    8a60:	d004      	beq.n	8a6c <_spi_m_sync_init+0x24>
    8a62:	683b      	ldr	r3, [r7, #0]
    8a64:	2b00      	cmp	r3, #0
    8a66:	d001      	beq.n	8a6c <_spi_m_sync_init+0x24>
    8a68:	2301      	movs	r3, #1
    8a6a:	e000      	b.n	8a6e <_spi_m_sync_init+0x26>
    8a6c:	2300      	movs	r3, #0
    8a6e:	f003 0301 	and.w	r3, r3, #1
    8a72:	b2db      	uxtb	r3, r3
    8a74:	f640 123f 	movw	r2, #2367	; 0x93f
    8a78:	492d      	ldr	r1, [pc, #180]	; (8b30 <_spi_m_sync_init+0xe8>)
    8a7a:	4618      	mov	r0, r3
    8a7c:	4b2d      	ldr	r3, [pc, #180]	; (8b34 <_spi_m_sync_init+0xec>)
    8a7e:	4798      	blx	r3

	if (regs == NULL) {
    8a80:	68fb      	ldr	r3, [r7, #12]
    8a82:	2b00      	cmp	r3, #0
    8a84:	d102      	bne.n	8a8c <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    8a86:	f06f 030c 	mvn.w	r3, #12
    8a8a:	e04a      	b.n	8b22 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    8a8c:	2101      	movs	r1, #1
    8a8e:	6838      	ldr	r0, [r7, #0]
    8a90:	4b29      	ldr	r3, [pc, #164]	; (8b38 <_spi_m_sync_init+0xf0>)
    8a92:	4798      	blx	r3
    8a94:	4603      	mov	r3, r0
    8a96:	f083 0301 	eor.w	r3, r3, #1
    8a9a:	b2db      	uxtb	r3, r3
    8a9c:	2b00      	cmp	r3, #0
    8a9e:	d019      	beq.n	8ad4 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    8aa0:	68fb      	ldr	r3, [r7, #12]
    8aa2:	681b      	ldr	r3, [r3, #0]
    8aa4:	f003 031c 	and.w	r3, r3, #28
    8aa8:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    8aaa:	2102      	movs	r1, #2
    8aac:	6838      	ldr	r0, [r7, #0]
    8aae:	4b23      	ldr	r3, [pc, #140]	; (8b3c <_spi_m_sync_init+0xf4>)
    8ab0:	4798      	blx	r3
    8ab2:	4603      	mov	r3, r0
    8ab4:	2b00      	cmp	r3, #0
    8ab6:	d006      	beq.n	8ac6 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    8ab8:	6838      	ldr	r0, [r7, #0]
    8aba:	4b21      	ldr	r3, [pc, #132]	; (8b40 <_spi_m_sync_init+0xf8>)
    8abc:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    8abe:	2102      	movs	r1, #2
    8ac0:	6838      	ldr	r0, [r7, #0]
    8ac2:	4b20      	ldr	r3, [pc, #128]	; (8b44 <_spi_m_sync_init+0xfc>)
    8ac4:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    8ac6:	68bb      	ldr	r3, [r7, #8]
    8ac8:	f043 0301 	orr.w	r3, r3, #1
    8acc:	4619      	mov	r1, r3
    8ace:	6838      	ldr	r0, [r7, #0]
    8ad0:	4b1d      	ldr	r3, [pc, #116]	; (8b48 <_spi_m_sync_init+0x100>)
    8ad2:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    8ad4:	2101      	movs	r1, #1
    8ad6:	6838      	ldr	r0, [r7, #0]
    8ad8:	4b1a      	ldr	r3, [pc, #104]	; (8b44 <_spi_m_sync_init+0xfc>)
    8ada:	4798      	blx	r3

	dev->prvt = hw;
    8adc:	687b      	ldr	r3, [r7, #4]
    8ade:	683a      	ldr	r2, [r7, #0]
    8ae0:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    8ae2:	68fb      	ldr	r3, [r7, #12]
    8ae4:	681b      	ldr	r3, [r3, #0]
    8ae6:	f003 031c 	and.w	r3, r3, #28
    8aea:	2b08      	cmp	r3, #8
    8aec:	d104      	bne.n	8af8 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    8aee:	68f9      	ldr	r1, [r7, #12]
    8af0:	6838      	ldr	r0, [r7, #0]
    8af2:	4b16      	ldr	r3, [pc, #88]	; (8b4c <_spi_m_sync_init+0x104>)
    8af4:	4798      	blx	r3
    8af6:	e003      	b.n	8b00 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    8af8:	68f9      	ldr	r1, [r7, #12]
    8afa:	6838      	ldr	r0, [r7, #0]
    8afc:	4b14      	ldr	r3, [pc, #80]	; (8b50 <_spi_m_sync_init+0x108>)
    8afe:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    8b00:	68fb      	ldr	r3, [r7, #12]
    8b02:	685b      	ldr	r3, [r3, #4]
    8b04:	f003 0307 	and.w	r3, r3, #7
    8b08:	2b00      	cmp	r3, #0
    8b0a:	d101      	bne.n	8b10 <_spi_m_sync_init+0xc8>
    8b0c:	2201      	movs	r2, #1
    8b0e:	e000      	b.n	8b12 <_spi_m_sync_init+0xca>
    8b10:	2202      	movs	r2, #2
    8b12:	687b      	ldr	r3, [r7, #4]
    8b14:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    8b16:	68fb      	ldr	r3, [r7, #12]
    8b18:	89db      	ldrh	r3, [r3, #14]
    8b1a:	b29a      	uxth	r2, r3
    8b1c:	687b      	ldr	r3, [r7, #4]
    8b1e:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    8b20:	2300      	movs	r3, #0
}
    8b22:	4618      	mov	r0, r3
    8b24:	3710      	adds	r7, #16
    8b26:	46bd      	mov	sp, r7
    8b28:	bd80      	pop	{r7, pc}
    8b2a:	bf00      	nop
    8b2c:	000089ed 	.word	0x000089ed
    8b30:	0001b3e8 	.word	0x0001b3e8
    8b34:	00004cdd 	.word	0x00004cdd
    8b38:	00007a31 	.word	0x00007a31
    8b3c:	00007c65 	.word	0x00007c65
    8b40:	00007c3d 	.word	0x00007c3d
    8b44:	00007a0d 	.word	0x00007a0d
    8b48:	00007c95 	.word	0x00007c95
    8b4c:	00008941 	.word	0x00008941
    8b50:	000088ad 	.word	0x000088ad

00008b54 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    8b54:	b580      	push	{r7, lr}
    8b56:	b082      	sub	sp, #8
    8b58:	af00      	add	r7, sp, #0
    8b5a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    8b5c:	687b      	ldr	r3, [r7, #4]
    8b5e:	2b00      	cmp	r3, #0
    8b60:	d005      	beq.n	8b6e <_spi_m_sync_enable+0x1a>
    8b62:	687b      	ldr	r3, [r7, #4]
    8b64:	681b      	ldr	r3, [r3, #0]
    8b66:	2b00      	cmp	r3, #0
    8b68:	d001      	beq.n	8b6e <_spi_m_sync_enable+0x1a>
    8b6a:	2301      	movs	r3, #1
    8b6c:	e000      	b.n	8b70 <_spi_m_sync_enable+0x1c>
    8b6e:	2300      	movs	r3, #0
    8b70:	f003 0301 	and.w	r3, r3, #1
    8b74:	b2db      	uxtb	r3, r3
    8b76:	f640 129e 	movw	r2, #2462	; 0x99e
    8b7a:	4907      	ldr	r1, [pc, #28]	; (8b98 <_spi_m_sync_enable+0x44>)
    8b7c:	4618      	mov	r0, r3
    8b7e:	4b07      	ldr	r3, [pc, #28]	; (8b9c <_spi_m_sync_enable+0x48>)
    8b80:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    8b82:	687b      	ldr	r3, [r7, #4]
    8b84:	681b      	ldr	r3, [r3, #0]
    8b86:	4618      	mov	r0, r3
    8b88:	4b05      	ldr	r3, [pc, #20]	; (8ba0 <_spi_m_sync_enable+0x4c>)
    8b8a:	4798      	blx	r3
    8b8c:	4603      	mov	r3, r0
}
    8b8e:	4618      	mov	r0, r3
    8b90:	3708      	adds	r7, #8
    8b92:	46bd      	mov	sp, r7
    8b94:	bd80      	pop	{r7, pc}
    8b96:	bf00      	nop
    8b98:	0001b3e8 	.word	0x0001b3e8
    8b9c:	00004cdd 	.word	0x00004cdd
    8ba0:	00008845 	.word	0x00008845

00008ba4 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    8ba4:	b580      	push	{r7, lr}
    8ba6:	b082      	sub	sp, #8
    8ba8:	af00      	add	r7, sp, #0
    8baa:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    8bac:	687b      	ldr	r3, [r7, #4]
    8bae:	2b00      	cmp	r3, #0
    8bb0:	d005      	beq.n	8bbe <_spi_m_sync_disable+0x1a>
    8bb2:	687b      	ldr	r3, [r7, #4]
    8bb4:	681b      	ldr	r3, [r3, #0]
    8bb6:	2b00      	cmp	r3, #0
    8bb8:	d001      	beq.n	8bbe <_spi_m_sync_disable+0x1a>
    8bba:	2301      	movs	r3, #1
    8bbc:	e000      	b.n	8bc0 <_spi_m_sync_disable+0x1c>
    8bbe:	2300      	movs	r3, #0
    8bc0:	f003 0301 	and.w	r3, r3, #1
    8bc4:	b2db      	uxtb	r3, r3
    8bc6:	f640 12ba 	movw	r2, #2490	; 0x9ba
    8bca:	4907      	ldr	r1, [pc, #28]	; (8be8 <_spi_m_sync_disable+0x44>)
    8bcc:	4618      	mov	r0, r3
    8bce:	4b07      	ldr	r3, [pc, #28]	; (8bec <_spi_m_sync_disable+0x48>)
    8bd0:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    8bd2:	687b      	ldr	r3, [r7, #4]
    8bd4:	681b      	ldr	r3, [r3, #0]
    8bd6:	4618      	mov	r0, r3
    8bd8:	4b05      	ldr	r3, [pc, #20]	; (8bf0 <_spi_m_sync_disable+0x4c>)
    8bda:	4798      	blx	r3
    8bdc:	4603      	mov	r3, r0
}
    8bde:	4618      	mov	r0, r3
    8be0:	3708      	adds	r7, #8
    8be2:	46bd      	mov	sp, r7
    8be4:	bd80      	pop	{r7, pc}
    8be6:	bf00      	nop
    8be8:	0001b3e8 	.word	0x0001b3e8
    8bec:	00004cdd 	.word	0x00004cdd
    8bf0:	00008879 	.word	0x00008879

00008bf4 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    8bf4:	b580      	push	{r7, lr}
    8bf6:	b082      	sub	sp, #8
    8bf8:	af00      	add	r7, sp, #0
    8bfa:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    8bfc:	bf00      	nop
    8bfe:	2103      	movs	r1, #3
    8c00:	6878      	ldr	r0, [r7, #4]
    8c02:	4b06      	ldr	r3, [pc, #24]	; (8c1c <_spi_wait_bus_idle+0x28>)
    8c04:	4798      	blx	r3
    8c06:	4603      	mov	r3, r0
    8c08:	2b00      	cmp	r3, #0
    8c0a:	d0f8      	beq.n	8bfe <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    8c0c:	2103      	movs	r1, #3
    8c0e:	6878      	ldr	r0, [r7, #4]
    8c10:	4b03      	ldr	r3, [pc, #12]	; (8c20 <_spi_wait_bus_idle+0x2c>)
    8c12:	4798      	blx	r3
}
    8c14:	bf00      	nop
    8c16:	3708      	adds	r7, #8
    8c18:	46bd      	mov	sp, r7
    8c1a:	bd80      	pop	{r7, pc}
    8c1c:	00007aa7 	.word	0x00007aa7
    8c20:	00007ae9 	.word	0x00007ae9

00008c24 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    8c24:	b580      	push	{r7, lr}
    8c26:	b086      	sub	sp, #24
    8c28:	af00      	add	r7, sp, #0
    8c2a:	60f8      	str	r0, [r7, #12]
    8c2c:	60b9      	str	r1, [r7, #8]
    8c2e:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    8c30:	68bb      	ldr	r3, [r7, #8]
    8c32:	f003 0304 	and.w	r3, r3, #4
    8c36:	2b00      	cmp	r3, #0
    8c38:	d101      	bne.n	8c3e <_spi_rx_check_and_receive+0x1a>
		return false;
    8c3a:	2300      	movs	r3, #0
    8c3c:	e022      	b.n	8c84 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    8c3e:	68f8      	ldr	r0, [r7, #12]
    8c40:	4b12      	ldr	r3, [pc, #72]	; (8c8c <_spi_rx_check_and_receive+0x68>)
    8c42:	4798      	blx	r3
    8c44:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    8c46:	687b      	ldr	r3, [r7, #4]
    8c48:	685b      	ldr	r3, [r3, #4]
    8c4a:	2b00      	cmp	r3, #0
    8c4c:	d014      	beq.n	8c78 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    8c4e:	687b      	ldr	r3, [r7, #4]
    8c50:	685b      	ldr	r3, [r3, #4]
    8c52:	1c59      	adds	r1, r3, #1
    8c54:	687a      	ldr	r2, [r7, #4]
    8c56:	6051      	str	r1, [r2, #4]
    8c58:	697a      	ldr	r2, [r7, #20]
    8c5a:	b2d2      	uxtb	r2, r2
    8c5c:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    8c5e:	687b      	ldr	r3, [r7, #4]
    8c60:	7c1b      	ldrb	r3, [r3, #16]
    8c62:	2b01      	cmp	r3, #1
    8c64:	d908      	bls.n	8c78 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    8c66:	687b      	ldr	r3, [r7, #4]
    8c68:	685b      	ldr	r3, [r3, #4]
    8c6a:	1c59      	adds	r1, r3, #1
    8c6c:	687a      	ldr	r2, [r7, #4]
    8c6e:	6051      	str	r1, [r2, #4]
    8c70:	697a      	ldr	r2, [r7, #20]
    8c72:	0a12      	lsrs	r2, r2, #8
    8c74:	b2d2      	uxtb	r2, r2
    8c76:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    8c78:	687b      	ldr	r3, [r7, #4]
    8c7a:	68db      	ldr	r3, [r3, #12]
    8c7c:	1c5a      	adds	r2, r3, #1
    8c7e:	687b      	ldr	r3, [r7, #4]
    8c80:	60da      	str	r2, [r3, #12]

	return true;
    8c82:	2301      	movs	r3, #1
}
    8c84:	4618      	mov	r0, r3
    8c86:	3718      	adds	r7, #24
    8c88:	46bd      	mov	sp, r7
    8c8a:	bd80      	pop	{r7, pc}
    8c8c:	00007f0d 	.word	0x00007f0d

00008c90 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    8c90:	b580      	push	{r7, lr}
    8c92:	b086      	sub	sp, #24
    8c94:	af00      	add	r7, sp, #0
    8c96:	60f8      	str	r0, [r7, #12]
    8c98:	60b9      	str	r1, [r7, #8]
    8c9a:	607a      	str	r2, [r7, #4]
    8c9c:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    8c9e:	68bb      	ldr	r3, [r7, #8]
    8ca0:	f003 0301 	and.w	r3, r3, #1
    8ca4:	2b00      	cmp	r3, #0
    8ca6:	d028      	beq.n	8cfa <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    8ca8:	687b      	ldr	r3, [r7, #4]
    8caa:	681b      	ldr	r3, [r3, #0]
    8cac:	2b00      	cmp	r3, #0
    8cae:	d018      	beq.n	8ce2 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    8cb0:	687b      	ldr	r3, [r7, #4]
    8cb2:	681b      	ldr	r3, [r3, #0]
    8cb4:	1c59      	adds	r1, r3, #1
    8cb6:	687a      	ldr	r2, [r7, #4]
    8cb8:	6011      	str	r1, [r2, #0]
    8cba:	781b      	ldrb	r3, [r3, #0]
    8cbc:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    8cbe:	687b      	ldr	r3, [r7, #4]
    8cc0:	7c1b      	ldrb	r3, [r3, #16]
    8cc2:	2b01      	cmp	r3, #1
    8cc4:	d90f      	bls.n	8ce6 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    8cc6:	687b      	ldr	r3, [r7, #4]
    8cc8:	681b      	ldr	r3, [r3, #0]
    8cca:	781b      	ldrb	r3, [r3, #0]
    8ccc:	021b      	lsls	r3, r3, #8
    8cce:	461a      	mov	r2, r3
    8cd0:	697b      	ldr	r3, [r7, #20]
    8cd2:	4313      	orrs	r3, r2
    8cd4:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    8cd6:	687b      	ldr	r3, [r7, #4]
    8cd8:	681b      	ldr	r3, [r3, #0]
    8cda:	1c5a      	adds	r2, r3, #1
    8cdc:	687b      	ldr	r3, [r7, #4]
    8cde:	601a      	str	r2, [r3, #0]
    8ce0:	e001      	b.n	8ce6 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    8ce2:	887b      	ldrh	r3, [r7, #2]
    8ce4:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    8ce6:	687b      	ldr	r3, [r7, #4]
    8ce8:	689b      	ldr	r3, [r3, #8]
    8cea:	1c5a      	adds	r2, r3, #1
    8cec:	687b      	ldr	r3, [r7, #4]
    8cee:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    8cf0:	6979      	ldr	r1, [r7, #20]
    8cf2:	68f8      	ldr	r0, [r7, #12]
    8cf4:	4b03      	ldr	r3, [pc, #12]	; (8d04 <_spi_tx_check_and_send+0x74>)
    8cf6:	4798      	blx	r3
    8cf8:	e000      	b.n	8cfc <_spi_tx_check_and_send+0x6c>
		return;
    8cfa:	bf00      	nop
}
    8cfc:	3718      	adds	r7, #24
    8cfe:	46bd      	mov	sp, r7
    8d00:	bd80      	pop	{r7, pc}
    8d02:	bf00      	nop
    8d04:	00007ef1 	.word	0x00007ef1

00008d08 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    8d08:	b580      	push	{r7, lr}
    8d0a:	b082      	sub	sp, #8
    8d0c:	af00      	add	r7, sp, #0
    8d0e:	6078      	str	r0, [r7, #4]
    8d10:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    8d12:	687b      	ldr	r3, [r7, #4]
    8d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8d18:	2b00      	cmp	r3, #0
    8d1a:	d00b      	beq.n	8d34 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    8d1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8d20:	6838      	ldr	r0, [r7, #0]
    8d22:	4b07      	ldr	r3, [pc, #28]	; (8d40 <_spi_err_check+0x38>)
    8d24:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    8d26:	2180      	movs	r1, #128	; 0x80
    8d28:	6838      	ldr	r0, [r7, #0]
    8d2a:	4b06      	ldr	r3, [pc, #24]	; (8d44 <_spi_err_check+0x3c>)
    8d2c:	4798      	blx	r3
		return ERR_OVERFLOW;
    8d2e:	f06f 0312 	mvn.w	r3, #18
    8d32:	e000      	b.n	8d36 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    8d34:	2300      	movs	r3, #0
}
    8d36:	4618      	mov	r0, r3
    8d38:	3708      	adds	r7, #8
    8d3a:	46bd      	mov	sp, r7
    8d3c:	bd80      	pop	{r7, pc}
    8d3e:	bf00      	nop
    8d40:	00007f45 	.word	0x00007f45
    8d44:	00007ae9 	.word	0x00007ae9

00008d48 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    8d48:	b590      	push	{r4, r7, lr}
    8d4a:	b08b      	sub	sp, #44	; 0x2c
    8d4c:	af00      	add	r7, sp, #0
    8d4e:	6078      	str	r0, [r7, #4]
    8d50:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    8d52:	687b      	ldr	r3, [r7, #4]
    8d54:	681b      	ldr	r3, [r3, #0]
    8d56:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    8d58:	2300      	movs	r3, #0
    8d5a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    8d5c:	683b      	ldr	r3, [r7, #0]
    8d5e:	681b      	ldr	r3, [r3, #0]
    8d60:	60bb      	str	r3, [r7, #8]
    8d62:	683b      	ldr	r3, [r7, #0]
    8d64:	685b      	ldr	r3, [r3, #4]
    8d66:	60fb      	str	r3, [r7, #12]
    8d68:	2300      	movs	r3, #0
    8d6a:	613b      	str	r3, [r7, #16]
    8d6c:	2300      	movs	r3, #0
    8d6e:	617b      	str	r3, [r7, #20]
    8d70:	687b      	ldr	r3, [r7, #4]
    8d72:	791b      	ldrb	r3, [r3, #4]
    8d74:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    8d76:	687b      	ldr	r3, [r7, #4]
    8d78:	2b00      	cmp	r3, #0
    8d7a:	d004      	beq.n	8d86 <_spi_m_sync_trans+0x3e>
    8d7c:	6a3b      	ldr	r3, [r7, #32]
    8d7e:	2b00      	cmp	r3, #0
    8d80:	d001      	beq.n	8d86 <_spi_m_sync_trans+0x3e>
    8d82:	2301      	movs	r3, #1
    8d84:	e000      	b.n	8d88 <_spi_m_sync_trans+0x40>
    8d86:	2300      	movs	r3, #0
    8d88:	f003 0301 	and.w	r3, r3, #1
    8d8c:	b2db      	uxtb	r3, r3
    8d8e:	f640 22a3 	movw	r2, #2723	; 0xaa3
    8d92:	492b      	ldr	r1, [pc, #172]	; (8e40 <_spi_m_sync_trans+0xf8>)
    8d94:	4618      	mov	r0, r3
    8d96:	4b2b      	ldr	r3, [pc, #172]	; (8e44 <_spi_m_sync_trans+0xfc>)
    8d98:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    8d9a:	2107      	movs	r1, #7
    8d9c:	6a38      	ldr	r0, [r7, #32]
    8d9e:	4b2a      	ldr	r3, [pc, #168]	; (8e48 <_spi_m_sync_trans+0x100>)
    8da0:	4798      	blx	r3
    8da2:	4603      	mov	r3, r0
    8da4:	2b00      	cmp	r3, #0
    8da6:	d002      	beq.n	8dae <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    8da8:	f06f 0303 	mvn.w	r3, #3
    8dac:	e043      	b.n	8e36 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    8dae:	6a38      	ldr	r0, [r7, #32]
    8db0:	4b26      	ldr	r3, [pc, #152]	; (8e4c <_spi_m_sync_trans+0x104>)
    8db2:	4798      	blx	r3
    8db4:	4603      	mov	r3, r0
    8db6:	f083 0301 	eor.w	r3, r3, #1
    8dba:	b2db      	uxtb	r3, r3
    8dbc:	2b00      	cmp	r3, #0
    8dbe:	d002      	beq.n	8dc6 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    8dc0:	f06f 0313 	mvn.w	r3, #19
    8dc4:	e037      	b.n	8e36 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    8dc6:	6a38      	ldr	r0, [r7, #32]
    8dc8:	4b21      	ldr	r3, [pc, #132]	; (8e50 <_spi_m_sync_trans+0x108>)
    8dca:	4798      	blx	r3
    8dcc:	4603      	mov	r3, r0
    8dce:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    8dd0:	f107 0308 	add.w	r3, r7, #8
    8dd4:	461a      	mov	r2, r3
    8dd6:	69f9      	ldr	r1, [r7, #28]
    8dd8:	6a38      	ldr	r0, [r7, #32]
    8dda:	4b1e      	ldr	r3, [pc, #120]	; (8e54 <_spi_m_sync_trans+0x10c>)
    8ddc:	4798      	blx	r3
    8dde:	4603      	mov	r3, r0
    8de0:	f083 0301 	eor.w	r3, r3, #1
    8de4:	b2db      	uxtb	r3, r3
    8de6:	2b00      	cmp	r3, #0
    8de8:	d00b      	beq.n	8e02 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    8dea:	697a      	ldr	r2, [r7, #20]
    8dec:	693b      	ldr	r3, [r7, #16]
    8dee:	429a      	cmp	r2, r3
    8df0:	d307      	bcc.n	8e02 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    8df2:	687b      	ldr	r3, [r7, #4]
    8df4:	88db      	ldrh	r3, [r3, #6]
    8df6:	f107 0208 	add.w	r2, r7, #8
    8dfa:	69f9      	ldr	r1, [r7, #28]
    8dfc:	6a38      	ldr	r0, [r7, #32]
    8dfe:	4c16      	ldr	r4, [pc, #88]	; (8e58 <_spi_m_sync_trans+0x110>)
    8e00:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    8e02:	6a39      	ldr	r1, [r7, #32]
    8e04:	69f8      	ldr	r0, [r7, #28]
    8e06:	4b15      	ldr	r3, [pc, #84]	; (8e5c <_spi_m_sync_trans+0x114>)
    8e08:	4798      	blx	r3
    8e0a:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    8e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e0e:	2b00      	cmp	r3, #0
    8e10:	db0c      	blt.n	8e2c <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    8e12:	693a      	ldr	r2, [r7, #16]
    8e14:	683b      	ldr	r3, [r7, #0]
    8e16:	689b      	ldr	r3, [r3, #8]
    8e18:	429a      	cmp	r2, r3
    8e1a:	d3d4      	bcc.n	8dc6 <_spi_m_sync_trans+0x7e>
    8e1c:	697a      	ldr	r2, [r7, #20]
    8e1e:	683b      	ldr	r3, [r7, #0]
    8e20:	689b      	ldr	r3, [r3, #8]
    8e22:	429a      	cmp	r2, r3
    8e24:	d3cf      	bcc.n	8dc6 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    8e26:	693b      	ldr	r3, [r7, #16]
    8e28:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    8e2a:	e000      	b.n	8e2e <_spi_m_sync_trans+0xe6>
			break;
    8e2c:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    8e2e:	6a38      	ldr	r0, [r7, #32]
    8e30:	4b0b      	ldr	r3, [pc, #44]	; (8e60 <_spi_m_sync_trans+0x118>)
    8e32:	4798      	blx	r3

	return rc;
    8e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    8e36:	4618      	mov	r0, r3
    8e38:	372c      	adds	r7, #44	; 0x2c
    8e3a:	46bd      	mov	sp, r7
    8e3c:	bd90      	pop	{r4, r7, pc}
    8e3e:	bf00      	nop
    8e40:	0001b3e8 	.word	0x0001b3e8
    8e44:	00004cdd 	.word	0x00004cdd
    8e48:	00007a31 	.word	0x00007a31
    8e4c:	00007c05 	.word	0x00007c05
    8e50:	00007acf 	.word	0x00007acf
    8e54:	00008c25 	.word	0x00008c25
    8e58:	00008c91 	.word	0x00008c91
    8e5c:	00008d09 	.word	0x00008d09
    8e60:	00008bf5 	.word	0x00008bf5

00008e64 <__NVIC_EnableIRQ>:
{
    8e64:	b480      	push	{r7}
    8e66:	b083      	sub	sp, #12
    8e68:	af00      	add	r7, sp, #0
    8e6a:	4603      	mov	r3, r0
    8e6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8e72:	2b00      	cmp	r3, #0
    8e74:	db0b      	blt.n	8e8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8e76:	4909      	ldr	r1, [pc, #36]	; (8e9c <__NVIC_EnableIRQ+0x38>)
    8e78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8e7c:	095b      	lsrs	r3, r3, #5
    8e7e:	88fa      	ldrh	r2, [r7, #6]
    8e80:	f002 021f 	and.w	r2, r2, #31
    8e84:	2001      	movs	r0, #1
    8e86:	fa00 f202 	lsl.w	r2, r0, r2
    8e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8e8e:	bf00      	nop
    8e90:	370c      	adds	r7, #12
    8e92:	46bd      	mov	sp, r7
    8e94:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e98:	4770      	bx	lr
    8e9a:	bf00      	nop
    8e9c:	e000e100 	.word	0xe000e100

00008ea0 <__NVIC_DisableIRQ>:
{
    8ea0:	b480      	push	{r7}
    8ea2:	b083      	sub	sp, #12
    8ea4:	af00      	add	r7, sp, #0
    8ea6:	4603      	mov	r3, r0
    8ea8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8eaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8eae:	2b00      	cmp	r3, #0
    8eb0:	db10      	blt.n	8ed4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8eb2:	490b      	ldr	r1, [pc, #44]	; (8ee0 <__NVIC_DisableIRQ+0x40>)
    8eb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8eb8:	095b      	lsrs	r3, r3, #5
    8eba:	88fa      	ldrh	r2, [r7, #6]
    8ebc:	f002 021f 	and.w	r2, r2, #31
    8ec0:	2001      	movs	r0, #1
    8ec2:	fa00 f202 	lsl.w	r2, r0, r2
    8ec6:	3320      	adds	r3, #32
    8ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    8ecc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8ed0:	f3bf 8f6f 	isb	sy
}
    8ed4:	bf00      	nop
    8ed6:	370c      	adds	r7, #12
    8ed8:	46bd      	mov	sp, r7
    8eda:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ede:	4770      	bx	lr
    8ee0:	e000e100 	.word	0xe000e100

00008ee4 <__NVIC_ClearPendingIRQ>:
{
    8ee4:	b480      	push	{r7}
    8ee6:	b083      	sub	sp, #12
    8ee8:	af00      	add	r7, sp, #0
    8eea:	4603      	mov	r3, r0
    8eec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8ef2:	2b00      	cmp	r3, #0
    8ef4:	db0c      	blt.n	8f10 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8ef6:	4909      	ldr	r1, [pc, #36]	; (8f1c <__NVIC_ClearPendingIRQ+0x38>)
    8ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8efc:	095b      	lsrs	r3, r3, #5
    8efe:	88fa      	ldrh	r2, [r7, #6]
    8f00:	f002 021f 	and.w	r2, r2, #31
    8f04:	2001      	movs	r0, #1
    8f06:	fa00 f202 	lsl.w	r2, r0, r2
    8f0a:	3360      	adds	r3, #96	; 0x60
    8f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8f10:	bf00      	nop
    8f12:	370c      	adds	r7, #12
    8f14:	46bd      	mov	sp, r7
    8f16:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f1a:	4770      	bx	lr
    8f1c:	e000e100 	.word	0xe000e100

00008f20 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    8f20:	b480      	push	{r7}
    8f22:	b083      	sub	sp, #12
    8f24:	af00      	add	r7, sp, #0
    8f26:	6078      	str	r0, [r7, #4]
    8f28:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    8f2a:	bf00      	nop
    8f2c:	687b      	ldr	r3, [r7, #4]
    8f2e:	689a      	ldr	r2, [r3, #8]
    8f30:	683b      	ldr	r3, [r7, #0]
    8f32:	4013      	ands	r3, r2
    8f34:	2b00      	cmp	r3, #0
    8f36:	d1f9      	bne.n	8f2c <hri_tcc_wait_for_sync+0xc>
	};
}
    8f38:	bf00      	nop
    8f3a:	370c      	adds	r7, #12
    8f3c:	46bd      	mov	sp, r7
    8f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f42:	4770      	bx	lr

00008f44 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    8f44:	b480      	push	{r7}
    8f46:	b083      	sub	sp, #12
    8f48:	af00      	add	r7, sp, #0
    8f4a:	6078      	str	r0, [r7, #4]
    8f4c:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    8f4e:	687b      	ldr	r3, [r7, #4]
    8f50:	689a      	ldr	r2, [r3, #8]
    8f52:	683b      	ldr	r3, [r7, #0]
    8f54:	4013      	ands	r3, r2
    8f56:	2b00      	cmp	r3, #0
    8f58:	bf14      	ite	ne
    8f5a:	2301      	movne	r3, #1
    8f5c:	2300      	moveq	r3, #0
    8f5e:	b2db      	uxtb	r3, r3
}
    8f60:	4618      	mov	r0, r3
    8f62:	370c      	adds	r7, #12
    8f64:	46bd      	mov	sp, r7
    8f66:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f6a:	4770      	bx	lr

00008f6c <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    8f6c:	b480      	push	{r7}
    8f6e:	b083      	sub	sp, #12
    8f70:	af00      	add	r7, sp, #0
    8f72:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    8f74:	687b      	ldr	r3, [r7, #4]
    8f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8f78:	f003 0301 	and.w	r3, r3, #1
    8f7c:	2b00      	cmp	r3, #0
    8f7e:	bf14      	ite	ne
    8f80:	2301      	movne	r3, #1
    8f82:	2300      	moveq	r3, #0
    8f84:	b2db      	uxtb	r3, r3
}
    8f86:	4618      	mov	r0, r3
    8f88:	370c      	adds	r7, #12
    8f8a:	46bd      	mov	sp, r7
    8f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f90:	4770      	bx	lr

00008f92 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    8f92:	b480      	push	{r7}
    8f94:	b083      	sub	sp, #12
    8f96:	af00      	add	r7, sp, #0
    8f98:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    8f9a:	687b      	ldr	r3, [r7, #4]
    8f9c:	2201      	movs	r2, #1
    8f9e:	62da      	str	r2, [r3, #44]	; 0x2c
}
    8fa0:	bf00      	nop
    8fa2:	370c      	adds	r7, #12
    8fa4:	46bd      	mov	sp, r7
    8fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8faa:	4770      	bx	lr

00008fac <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    8fac:	b480      	push	{r7}
    8fae:	b083      	sub	sp, #12
    8fb0:	af00      	add	r7, sp, #0
    8fb2:	6078      	str	r0, [r7, #4]
    8fb4:	460b      	mov	r3, r1
    8fb6:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    8fb8:	687b      	ldr	r3, [r7, #4]
    8fba:	78fa      	ldrb	r2, [r7, #3]
    8fbc:	715a      	strb	r2, [r3, #5]
}
    8fbe:	bf00      	nop
    8fc0:	370c      	adds	r7, #12
    8fc2:	46bd      	mov	sp, r7
    8fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fc8:	4770      	bx	lr

00008fca <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    8fca:	b480      	push	{r7}
    8fcc:	b083      	sub	sp, #12
    8fce:	af00      	add	r7, sp, #0
    8fd0:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    8fd2:	687b      	ldr	r3, [r7, #4]
    8fd4:	2201      	movs	r2, #1
    8fd6:	629a      	str	r2, [r3, #40]	; 0x28
}
    8fd8:	bf00      	nop
    8fda:	370c      	adds	r7, #12
    8fdc:	46bd      	mov	sp, r7
    8fde:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fe2:	4770      	bx	lr

00008fe4 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    8fe4:	b580      	push	{r7, lr}
    8fe6:	b082      	sub	sp, #8
    8fe8:	af00      	add	r7, sp, #0
    8fea:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    8fec:	687b      	ldr	r3, [r7, #4]
    8fee:	681b      	ldr	r3, [r3, #0]
    8ff0:	f043 0201 	orr.w	r2, r3, #1
    8ff4:	687b      	ldr	r3, [r7, #4]
    8ff6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    8ff8:	2101      	movs	r1, #1
    8ffa:	6878      	ldr	r0, [r7, #4]
    8ffc:	4b02      	ldr	r3, [pc, #8]	; (9008 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    8ffe:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    9000:	bf00      	nop
    9002:	3708      	adds	r7, #8
    9004:	46bd      	mov	sp, r7
    9006:	bd80      	pop	{r7, pc}
    9008:	00008f21 	.word	0x00008f21

0000900c <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    900c:	b580      	push	{r7, lr}
    900e:	b082      	sub	sp, #8
    9010:	af00      	add	r7, sp, #0
    9012:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    9014:	687b      	ldr	r3, [r7, #4]
    9016:	681b      	ldr	r3, [r3, #0]
    9018:	f043 0202 	orr.w	r2, r3, #2
    901c:	687b      	ldr	r3, [r7, #4]
    901e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    9020:	2103      	movs	r1, #3
    9022:	6878      	ldr	r0, [r7, #4]
    9024:	4b02      	ldr	r3, [pc, #8]	; (9030 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    9026:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    9028:	bf00      	nop
    902a:	3708      	adds	r7, #8
    902c:	46bd      	mov	sp, r7
    902e:	bd80      	pop	{r7, pc}
    9030:	00008f21 	.word	0x00008f21

00009034 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    9034:	b580      	push	{r7, lr}
    9036:	b084      	sub	sp, #16
    9038:	af00      	add	r7, sp, #0
    903a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    903c:	2103      	movs	r1, #3
    903e:	6878      	ldr	r0, [r7, #4]
    9040:	4b09      	ldr	r3, [pc, #36]	; (9068 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    9042:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    9044:	687b      	ldr	r3, [r7, #4]
    9046:	681b      	ldr	r3, [r3, #0]
    9048:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    904a:	68fb      	ldr	r3, [r7, #12]
    904c:	085b      	lsrs	r3, r3, #1
    904e:	f003 0301 	and.w	r3, r3, #1
    9052:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9054:	68fb      	ldr	r3, [r7, #12]
    9056:	2b00      	cmp	r3, #0
    9058:	bf14      	ite	ne
    905a:	2301      	movne	r3, #1
    905c:	2300      	moveq	r3, #0
    905e:	b2db      	uxtb	r3, r3
}
    9060:	4618      	mov	r0, r3
    9062:	3710      	adds	r7, #16
    9064:	46bd      	mov	sp, r7
    9066:	bd80      	pop	{r7, pc}
    9068:	00008f21 	.word	0x00008f21

0000906c <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    906c:	b580      	push	{r7, lr}
    906e:	b082      	sub	sp, #8
    9070:	af00      	add	r7, sp, #0
    9072:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    9074:	687b      	ldr	r3, [r7, #4]
    9076:	681b      	ldr	r3, [r3, #0]
    9078:	f023 0202 	bic.w	r2, r3, #2
    907c:	687b      	ldr	r3, [r7, #4]
    907e:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    9080:	2103      	movs	r1, #3
    9082:	6878      	ldr	r0, [r7, #4]
    9084:	4b02      	ldr	r3, [pc, #8]	; (9090 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    9086:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    9088:	bf00      	nop
    908a:	3708      	adds	r7, #8
    908c:	46bd      	mov	sp, r7
    908e:	bd80      	pop	{r7, pc}
    9090:	00008f21 	.word	0x00008f21

00009094 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    9094:	b580      	push	{r7, lr}
    9096:	b084      	sub	sp, #16
    9098:	af00      	add	r7, sp, #0
    909a:	6078      	str	r0, [r7, #4]
    909c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    909e:	2103      	movs	r1, #3
    90a0:	6878      	ldr	r0, [r7, #4]
    90a2:	4b07      	ldr	r3, [pc, #28]	; (90c0 <hri_tcc_get_CTRLA_reg+0x2c>)
    90a4:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    90a6:	687b      	ldr	r3, [r7, #4]
    90a8:	681b      	ldr	r3, [r3, #0]
    90aa:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    90ac:	68fa      	ldr	r2, [r7, #12]
    90ae:	683b      	ldr	r3, [r7, #0]
    90b0:	4013      	ands	r3, r2
    90b2:	60fb      	str	r3, [r7, #12]
	return tmp;
    90b4:	68fb      	ldr	r3, [r7, #12]
}
    90b6:	4618      	mov	r0, r3
    90b8:	3710      	adds	r7, #16
    90ba:	46bd      	mov	sp, r7
    90bc:	bd80      	pop	{r7, pc}
    90be:	bf00      	nop
    90c0:	00008f21 	.word	0x00008f21

000090c4 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    90c4:	b580      	push	{r7, lr}
    90c6:	b082      	sub	sp, #8
    90c8:	af00      	add	r7, sp, #0
    90ca:	6078      	str	r0, [r7, #4]
    90cc:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    90ce:	687b      	ldr	r3, [r7, #4]
    90d0:	683a      	ldr	r2, [r7, #0]
    90d2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    90d4:	2103      	movs	r1, #3
    90d6:	6878      	ldr	r0, [r7, #4]
    90d8:	4b02      	ldr	r3, [pc, #8]	; (90e4 <hri_tcc_write_CTRLA_reg+0x20>)
    90da:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    90dc:	bf00      	nop
    90de:	3708      	adds	r7, #8
    90e0:	46bd      	mov	sp, r7
    90e2:	bd80      	pop	{r7, pc}
    90e4:	00008f21 	.word	0x00008f21

000090e8 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    90e8:	b480      	push	{r7}
    90ea:	b083      	sub	sp, #12
    90ec:	af00      	add	r7, sp, #0
    90ee:	6078      	str	r0, [r7, #4]
    90f0:	460b      	mov	r3, r1
    90f2:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    90f4:	687b      	ldr	r3, [r7, #4]
    90f6:	78fa      	ldrb	r2, [r7, #3]
    90f8:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    90fa:	bf00      	nop
    90fc:	370c      	adds	r7, #12
    90fe:	46bd      	mov	sp, r7
    9100:	f85d 7b04 	ldr.w	r7, [sp], #4
    9104:	4770      	bx	lr

00009106 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    9106:	b480      	push	{r7}
    9108:	b083      	sub	sp, #12
    910a:	af00      	add	r7, sp, #0
    910c:	6078      	str	r0, [r7, #4]
    910e:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    9110:	687b      	ldr	r3, [r7, #4]
    9112:	683a      	ldr	r2, [r7, #0]
    9114:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    9116:	bf00      	nop
    9118:	370c      	adds	r7, #12
    911a:	46bd      	mov	sp, r7
    911c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9120:	4770      	bx	lr
	...

00009124 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    9124:	b580      	push	{r7, lr}
    9126:	b082      	sub	sp, #8
    9128:	af00      	add	r7, sp, #0
    912a:	6078      	str	r0, [r7, #4]
    912c:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    912e:	687b      	ldr	r3, [r7, #4]
    9130:	683a      	ldr	r2, [r7, #0]
    9132:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    9134:	2180      	movs	r1, #128	; 0x80
    9136:	6878      	ldr	r0, [r7, #4]
    9138:	4b02      	ldr	r3, [pc, #8]	; (9144 <hri_tcc_write_PER_reg+0x20>)
    913a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    913c:	bf00      	nop
    913e:	3708      	adds	r7, #8
    9140:	46bd      	mov	sp, r7
    9142:	bd80      	pop	{r7, pc}
    9144:	00008f21 	.word	0x00008f21

00009148 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    9148:	b580      	push	{r7, lr}
    914a:	b082      	sub	sp, #8
    914c:	af00      	add	r7, sp, #0
    914e:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    9150:	2180      	movs	r1, #128	; 0x80
    9152:	6878      	ldr	r0, [r7, #4]
    9154:	4b03      	ldr	r3, [pc, #12]	; (9164 <hri_tcc_read_PER_reg+0x1c>)
    9156:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    9158:	687b      	ldr	r3, [r7, #4]
    915a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    915c:	4618      	mov	r0, r3
    915e:	3708      	adds	r7, #8
    9160:	46bd      	mov	sp, r7
    9162:	bd80      	pop	{r7, pc}
    9164:	00008f21 	.word	0x00008f21

00009168 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    9168:	b480      	push	{r7}
    916a:	b083      	sub	sp, #12
    916c:	af00      	add	r7, sp, #0
    916e:	6078      	str	r0, [r7, #4]
    9170:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    9172:	687b      	ldr	r3, [r7, #4]
    9174:	4a0c      	ldr	r2, [pc, #48]	; (91a8 <_tcc_init_irq_param+0x40>)
    9176:	4293      	cmp	r3, r2
    9178:	d102      	bne.n	9180 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    917a:	4a0c      	ldr	r2, [pc, #48]	; (91ac <_tcc_init_irq_param+0x44>)
    917c:	683b      	ldr	r3, [r7, #0]
    917e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    9180:	687b      	ldr	r3, [r7, #4]
    9182:	4a0b      	ldr	r2, [pc, #44]	; (91b0 <_tcc_init_irq_param+0x48>)
    9184:	4293      	cmp	r3, r2
    9186:	d102      	bne.n	918e <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    9188:	4a0a      	ldr	r2, [pc, #40]	; (91b4 <_tcc_init_irq_param+0x4c>)
    918a:	683b      	ldr	r3, [r7, #0]
    918c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    918e:	687b      	ldr	r3, [r7, #4]
    9190:	4a09      	ldr	r2, [pc, #36]	; (91b8 <_tcc_init_irq_param+0x50>)
    9192:	4293      	cmp	r3, r2
    9194:	d102      	bne.n	919c <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    9196:	4a09      	ldr	r2, [pc, #36]	; (91bc <_tcc_init_irq_param+0x54>)
    9198:	683b      	ldr	r3, [r7, #0]
    919a:	6013      	str	r3, [r2, #0]
	}
}
    919c:	bf00      	nop
    919e:	370c      	adds	r7, #12
    91a0:	46bd      	mov	sp, r7
    91a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    91a6:	4770      	bx	lr
    91a8:	41016000 	.word	0x41016000
    91ac:	20002348 	.word	0x20002348
    91b0:	41018000 	.word	0x41018000
    91b4:	2000234c 	.word	0x2000234c
    91b8:	42000c00 	.word	0x42000c00
    91bc:	20002350 	.word	0x20002350

000091c0 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    91c0:	b580      	push	{r7, lr}
    91c2:	b084      	sub	sp, #16
    91c4:	af00      	add	r7, sp, #0
    91c6:	6078      	str	r0, [r7, #4]
    91c8:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    91ca:	6838      	ldr	r0, [r7, #0]
    91cc:	4b33      	ldr	r3, [pc, #204]	; (929c <_tcc_timer_init+0xdc>)
    91ce:	4798      	blx	r3
    91d0:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    91d2:	68fb      	ldr	r3, [r7, #12]
    91d4:	2b00      	cmp	r3, #0
    91d6:	d102      	bne.n	91de <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    91d8:	f06f 0309 	mvn.w	r3, #9
    91dc:	e05a      	b.n	9294 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    91de:	687b      	ldr	r3, [r7, #4]
    91e0:	683a      	ldr	r2, [r7, #0]
    91e2:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    91e4:	2101      	movs	r1, #1
    91e6:	6838      	ldr	r0, [r7, #0]
    91e8:	4b2d      	ldr	r3, [pc, #180]	; (92a0 <_tcc_timer_init+0xe0>)
    91ea:	4798      	blx	r3
    91ec:	4603      	mov	r3, r0
    91ee:	f083 0301 	eor.w	r3, r3, #1
    91f2:	b2db      	uxtb	r3, r3
    91f4:	2b00      	cmp	r3, #0
    91f6:	d011      	beq.n	921c <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    91f8:	2102      	movs	r1, #2
    91fa:	6838      	ldr	r0, [r7, #0]
    91fc:	4b29      	ldr	r3, [pc, #164]	; (92a4 <_tcc_timer_init+0xe4>)
    91fe:	4798      	blx	r3
    9200:	4603      	mov	r3, r0
    9202:	2b00      	cmp	r3, #0
    9204:	d006      	beq.n	9214 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    9206:	6838      	ldr	r0, [r7, #0]
    9208:	4b27      	ldr	r3, [pc, #156]	; (92a8 <_tcc_timer_init+0xe8>)
    920a:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    920c:	2102      	movs	r1, #2
    920e:	6838      	ldr	r0, [r7, #0]
    9210:	4b26      	ldr	r3, [pc, #152]	; (92ac <_tcc_timer_init+0xec>)
    9212:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    9214:	2101      	movs	r1, #1
    9216:	6838      	ldr	r0, [r7, #0]
    9218:	4b25      	ldr	r3, [pc, #148]	; (92b0 <_tcc_timer_init+0xf0>)
    921a:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    921c:	2101      	movs	r1, #1
    921e:	6838      	ldr	r0, [r7, #0]
    9220:	4b22      	ldr	r3, [pc, #136]	; (92ac <_tcc_timer_init+0xec>)
    9222:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    9224:	68fb      	ldr	r3, [r7, #12]
    9226:	689b      	ldr	r3, [r3, #8]
    9228:	4619      	mov	r1, r3
    922a:	6838      	ldr	r0, [r7, #0]
    922c:	4b20      	ldr	r3, [pc, #128]	; (92b0 <_tcc_timer_init+0xf0>)
    922e:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    9230:	68fb      	ldr	r3, [r7, #12]
    9232:	7b1b      	ldrb	r3, [r3, #12]
    9234:	4619      	mov	r1, r3
    9236:	6838      	ldr	r0, [r7, #0]
    9238:	4b1e      	ldr	r3, [pc, #120]	; (92b4 <_tcc_timer_init+0xf4>)
    923a:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    923c:	68fb      	ldr	r3, [r7, #12]
    923e:	7b5b      	ldrb	r3, [r3, #13]
    9240:	4619      	mov	r1, r3
    9242:	6838      	ldr	r0, [r7, #0]
    9244:	4b1c      	ldr	r3, [pc, #112]	; (92b8 <_tcc_timer_init+0xf8>)
    9246:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    9248:	68fb      	ldr	r3, [r7, #12]
    924a:	691b      	ldr	r3, [r3, #16]
    924c:	4619      	mov	r1, r3
    924e:	6838      	ldr	r0, [r7, #0]
    9250:	4b1a      	ldr	r3, [pc, #104]	; (92bc <_tcc_timer_init+0xfc>)
    9252:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    9254:	68fb      	ldr	r3, [r7, #12]
    9256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9258:	4619      	mov	r1, r3
    925a:	6838      	ldr	r0, [r7, #0]
    925c:	4b18      	ldr	r3, [pc, #96]	; (92c0 <_tcc_timer_init+0x100>)
    925e:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    9260:	6838      	ldr	r0, [r7, #0]
    9262:	4b18      	ldr	r3, [pc, #96]	; (92c4 <_tcc_timer_init+0x104>)
    9264:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    9266:	6879      	ldr	r1, [r7, #4]
    9268:	6838      	ldr	r0, [r7, #0]
    926a:	4b17      	ldr	r3, [pc, #92]	; (92c8 <_tcc_timer_init+0x108>)
    926c:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    926e:	68fb      	ldr	r3, [r7, #12]
    9270:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    9274:	4618      	mov	r0, r3
    9276:	4b15      	ldr	r3, [pc, #84]	; (92cc <_tcc_timer_init+0x10c>)
    9278:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    927a:	68fb      	ldr	r3, [r7, #12]
    927c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    9280:	4618      	mov	r0, r3
    9282:	4b13      	ldr	r3, [pc, #76]	; (92d0 <_tcc_timer_init+0x110>)
    9284:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    9286:	68fb      	ldr	r3, [r7, #12]
    9288:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    928c:	4618      	mov	r0, r3
    928e:	4b11      	ldr	r3, [pc, #68]	; (92d4 <_tcc_timer_init+0x114>)
    9290:	4798      	blx	r3

	return ERR_NONE;
    9292:	2300      	movs	r3, #0
}
    9294:	4618      	mov	r0, r3
    9296:	3710      	adds	r7, #16
    9298:	46bd      	mov	sp, r7
    929a:	bd80      	pop	{r7, pc}
    929c:	000094a5 	.word	0x000094a5
    92a0:	00008f45 	.word	0x00008f45
    92a4:	00009095 	.word	0x00009095
    92a8:	0000906d 	.word	0x0000906d
    92ac:	00008f21 	.word	0x00008f21
    92b0:	000090c5 	.word	0x000090c5
    92b4:	00008fad 	.word	0x00008fad
    92b8:	000090e9 	.word	0x000090e9
    92bc:	00009107 	.word	0x00009107
    92c0:	00009125 	.word	0x00009125
    92c4:	00008fcb 	.word	0x00008fcb
    92c8:	00009169 	.word	0x00009169
    92cc:	00008ea1 	.word	0x00008ea1
    92d0:	00008ee5 	.word	0x00008ee5
    92d4:	00008e65 	.word	0x00008e65

000092d8 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    92d8:	b580      	push	{r7, lr}
    92da:	b084      	sub	sp, #16
    92dc:	af00      	add	r7, sp, #0
    92de:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    92e0:	687b      	ldr	r3, [r7, #4]
    92e2:	68db      	ldr	r3, [r3, #12]
    92e4:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    92e6:	68f8      	ldr	r0, [r7, #12]
    92e8:	4b0a      	ldr	r3, [pc, #40]	; (9314 <_tcc_timer_deinit+0x3c>)
    92ea:	4798      	blx	r3
    92ec:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    92ee:	68bb      	ldr	r3, [r7, #8]
    92f0:	2b00      	cmp	r3, #0
    92f2:	d00b      	beq.n	930c <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    92f4:	68bb      	ldr	r3, [r7, #8]
    92f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    92fa:	4618      	mov	r0, r3
    92fc:	4b06      	ldr	r3, [pc, #24]	; (9318 <_tcc_timer_deinit+0x40>)
    92fe:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    9300:	68f8      	ldr	r0, [r7, #12]
    9302:	4b06      	ldr	r3, [pc, #24]	; (931c <_tcc_timer_deinit+0x44>)
    9304:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    9306:	68f8      	ldr	r0, [r7, #12]
    9308:	4b05      	ldr	r3, [pc, #20]	; (9320 <_tcc_timer_deinit+0x48>)
    930a:	4798      	blx	r3
	}
}
    930c:	bf00      	nop
    930e:	3710      	adds	r7, #16
    9310:	46bd      	mov	sp, r7
    9312:	bd80      	pop	{r7, pc}
    9314:	000094a5 	.word	0x000094a5
    9318:	00008ea1 	.word	0x00008ea1
    931c:	0000906d 	.word	0x0000906d
    9320:	00008fe5 	.word	0x00008fe5

00009324 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    9324:	b580      	push	{r7, lr}
    9326:	b082      	sub	sp, #8
    9328:	af00      	add	r7, sp, #0
    932a:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    932c:	687b      	ldr	r3, [r7, #4]
    932e:	68db      	ldr	r3, [r3, #12]
    9330:	4618      	mov	r0, r3
    9332:	4b03      	ldr	r3, [pc, #12]	; (9340 <_tcc_timer_start+0x1c>)
    9334:	4798      	blx	r3
}
    9336:	bf00      	nop
    9338:	3708      	adds	r7, #8
    933a:	46bd      	mov	sp, r7
    933c:	bd80      	pop	{r7, pc}
    933e:	bf00      	nop
    9340:	0000900d 	.word	0x0000900d

00009344 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    9344:	b580      	push	{r7, lr}
    9346:	b082      	sub	sp, #8
    9348:	af00      	add	r7, sp, #0
    934a:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    934c:	687b      	ldr	r3, [r7, #4]
    934e:	68db      	ldr	r3, [r3, #12]
    9350:	4618      	mov	r0, r3
    9352:	4b03      	ldr	r3, [pc, #12]	; (9360 <_tcc_timer_stop+0x1c>)
    9354:	4798      	blx	r3
}
    9356:	bf00      	nop
    9358:	3708      	adds	r7, #8
    935a:	46bd      	mov	sp, r7
    935c:	bd80      	pop	{r7, pc}
    935e:	bf00      	nop
    9360:	0000906d 	.word	0x0000906d

00009364 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    9364:	b580      	push	{r7, lr}
    9366:	b082      	sub	sp, #8
    9368:	af00      	add	r7, sp, #0
    936a:	6078      	str	r0, [r7, #4]
    936c:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    936e:	687b      	ldr	r3, [r7, #4]
    9370:	68db      	ldr	r3, [r3, #12]
    9372:	6839      	ldr	r1, [r7, #0]
    9374:	4618      	mov	r0, r3
    9376:	4b03      	ldr	r3, [pc, #12]	; (9384 <_tcc_timer_set_period+0x20>)
    9378:	4798      	blx	r3
}
    937a:	bf00      	nop
    937c:	3708      	adds	r7, #8
    937e:	46bd      	mov	sp, r7
    9380:	bd80      	pop	{r7, pc}
    9382:	bf00      	nop
    9384:	00009125 	.word	0x00009125

00009388 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    9388:	b580      	push	{r7, lr}
    938a:	b082      	sub	sp, #8
    938c:	af00      	add	r7, sp, #0
    938e:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    9390:	687b      	ldr	r3, [r7, #4]
    9392:	68db      	ldr	r3, [r3, #12]
    9394:	4618      	mov	r0, r3
    9396:	4b03      	ldr	r3, [pc, #12]	; (93a4 <_tcc_timer_get_period+0x1c>)
    9398:	4798      	blx	r3
    939a:	4603      	mov	r3, r0
}
    939c:	4618      	mov	r0, r3
    939e:	3708      	adds	r7, #8
    93a0:	46bd      	mov	sp, r7
    93a2:	bd80      	pop	{r7, pc}
    93a4:	00009149 	.word	0x00009149

000093a8 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    93a8:	b580      	push	{r7, lr}
    93aa:	b082      	sub	sp, #8
    93ac:	af00      	add	r7, sp, #0
    93ae:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    93b0:	687b      	ldr	r3, [r7, #4]
    93b2:	68db      	ldr	r3, [r3, #12]
    93b4:	4618      	mov	r0, r3
    93b6:	4b03      	ldr	r3, [pc, #12]	; (93c4 <_tcc_timer_is_started+0x1c>)
    93b8:	4798      	blx	r3
    93ba:	4603      	mov	r3, r0
}
    93bc:	4618      	mov	r0, r3
    93be:	3708      	adds	r7, #8
    93c0:	46bd      	mov	sp, r7
    93c2:	bd80      	pop	{r7, pc}
    93c4:	00009035 	.word	0x00009035

000093c8 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    93c8:	b480      	push	{r7}
    93ca:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    93cc:	4b02      	ldr	r3, [pc, #8]	; (93d8 <_tcc_get_timer+0x10>)
}
    93ce:	4618      	mov	r0, r3
    93d0:	46bd      	mov	sp, r7
    93d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    93d6:	4770      	bx	lr
    93d8:	200000f0 	.word	0x200000f0

000093dc <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    93dc:	b580      	push	{r7, lr}
    93de:	b084      	sub	sp, #16
    93e0:	af00      	add	r7, sp, #0
    93e2:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    93e4:	687b      	ldr	r3, [r7, #4]
    93e6:	68db      	ldr	r3, [r3, #12]
    93e8:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    93ea:	68f8      	ldr	r0, [r7, #12]
    93ec:	4b08      	ldr	r3, [pc, #32]	; (9410 <_tcc_timer_set_irq+0x34>)
    93ee:	4798      	blx	r3
    93f0:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    93f2:	68bb      	ldr	r3, [r7, #8]
    93f4:	2b00      	cmp	r3, #0
    93f6:	d006      	beq.n	9406 <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    93f8:	68bb      	ldr	r3, [r7, #8]
    93fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    93fe:	b2db      	uxtb	r3, r3
    9400:	4618      	mov	r0, r3
    9402:	4b04      	ldr	r3, [pc, #16]	; (9414 <_tcc_timer_set_irq+0x38>)
    9404:	4798      	blx	r3
	}
}
    9406:	bf00      	nop
    9408:	3710      	adds	r7, #16
    940a:	46bd      	mov	sp, r7
    940c:	bd80      	pop	{r7, pc}
    940e:	bf00      	nop
    9410:	000094a5 	.word	0x000094a5
    9414:	00005b75 	.word	0x00005b75

00009418 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    9418:	b580      	push	{r7, lr}
    941a:	b084      	sub	sp, #16
    941c:	af00      	add	r7, sp, #0
    941e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9420:	687b      	ldr	r3, [r7, #4]
    9422:	68db      	ldr	r3, [r3, #12]
    9424:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    9426:	68f8      	ldr	r0, [r7, #12]
    9428:	4b07      	ldr	r3, [pc, #28]	; (9448 <tcc_interrupt_handler+0x30>)
    942a:	4798      	blx	r3
    942c:	4603      	mov	r3, r0
    942e:	2b00      	cmp	r3, #0
    9430:	d006      	beq.n	9440 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    9432:	68f8      	ldr	r0, [r7, #12]
    9434:	4b05      	ldr	r3, [pc, #20]	; (944c <tcc_interrupt_handler+0x34>)
    9436:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    9438:	687b      	ldr	r3, [r7, #4]
    943a:	681b      	ldr	r3, [r3, #0]
    943c:	6878      	ldr	r0, [r7, #4]
    943e:	4798      	blx	r3
	}
}
    9440:	bf00      	nop
    9442:	3710      	adds	r7, #16
    9444:	46bd      	mov	sp, r7
    9446:	bd80      	pop	{r7, pc}
    9448:	00008f6d 	.word	0x00008f6d
    944c:	00008f93 	.word	0x00008f93

00009450 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    9450:	b580      	push	{r7, lr}
    9452:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    9454:	4b03      	ldr	r3, [pc, #12]	; (9464 <TCC0_0_Handler+0x14>)
    9456:	681b      	ldr	r3, [r3, #0]
    9458:	4618      	mov	r0, r3
    945a:	4b03      	ldr	r3, [pc, #12]	; (9468 <TCC0_0_Handler+0x18>)
    945c:	4798      	blx	r3
}
    945e:	bf00      	nop
    9460:	bd80      	pop	{r7, pc}
    9462:	bf00      	nop
    9464:	20002348 	.word	0x20002348
    9468:	00009419 	.word	0x00009419

0000946c <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    946c:	b580      	push	{r7, lr}
    946e:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    9470:	4b03      	ldr	r3, [pc, #12]	; (9480 <TCC1_0_Handler+0x14>)
    9472:	681b      	ldr	r3, [r3, #0]
    9474:	4618      	mov	r0, r3
    9476:	4b03      	ldr	r3, [pc, #12]	; (9484 <TCC1_0_Handler+0x18>)
    9478:	4798      	blx	r3
}
    947a:	bf00      	nop
    947c:	bd80      	pop	{r7, pc}
    947e:	bf00      	nop
    9480:	2000234c 	.word	0x2000234c
    9484:	00009419 	.word	0x00009419

00009488 <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    9488:	b580      	push	{r7, lr}
    948a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    948c:	4b03      	ldr	r3, [pc, #12]	; (949c <TCC2_0_Handler+0x14>)
    948e:	681b      	ldr	r3, [r3, #0]
    9490:	4618      	mov	r0, r3
    9492:	4b03      	ldr	r3, [pc, #12]	; (94a0 <TCC2_0_Handler+0x18>)
    9494:	4798      	blx	r3
}
    9496:	bf00      	nop
    9498:	bd80      	pop	{r7, pc}
    949a:	bf00      	nop
    949c:	20002350 	.word	0x20002350
    94a0:	00009419 	.word	0x00009419

000094a4 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    94a4:	b480      	push	{r7}
    94a6:	b085      	sub	sp, #20
    94a8:	af00      	add	r7, sp, #0
    94aa:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    94ac:	2300      	movs	r3, #0
    94ae:	73fb      	strb	r3, [r7, #15]
    94b0:	e015      	b.n	94de <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    94b2:	7bfa      	ldrb	r2, [r7, #15]
    94b4:	490f      	ldr	r1, [pc, #60]	; (94f4 <_get_tcc_cfg+0x50>)
    94b6:	4613      	mov	r3, r2
    94b8:	005b      	lsls	r3, r3, #1
    94ba:	4413      	add	r3, r2
    94bc:	011b      	lsls	r3, r3, #4
    94be:	440b      	add	r3, r1
    94c0:	681a      	ldr	r2, [r3, #0]
    94c2:	687b      	ldr	r3, [r7, #4]
    94c4:	429a      	cmp	r2, r3
    94c6:	d107      	bne.n	94d8 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    94c8:	7bfa      	ldrb	r2, [r7, #15]
    94ca:	4613      	mov	r3, r2
    94cc:	005b      	lsls	r3, r3, #1
    94ce:	4413      	add	r3, r2
    94d0:	011b      	lsls	r3, r3, #4
    94d2:	4a08      	ldr	r2, [pc, #32]	; (94f4 <_get_tcc_cfg+0x50>)
    94d4:	4413      	add	r3, r2
    94d6:	e006      	b.n	94e6 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    94d8:	7bfb      	ldrb	r3, [r7, #15]
    94da:	3301      	adds	r3, #1
    94dc:	73fb      	strb	r3, [r7, #15]
    94de:	7bfb      	ldrb	r3, [r7, #15]
    94e0:	2b02      	cmp	r3, #2
    94e2:	d9e6      	bls.n	94b2 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    94e4:	2300      	movs	r3, #0
}
    94e6:	4618      	mov	r0, r3
    94e8:	3714      	adds	r7, #20
    94ea:	46bd      	mov	sp, r7
    94ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    94f0:	4770      	bx	lr
    94f2:	bf00      	nop
    94f4:	20000060 	.word	0x20000060

000094f8 <__NVIC_EnableIRQ>:
{
    94f8:	b480      	push	{r7}
    94fa:	b083      	sub	sp, #12
    94fc:	af00      	add	r7, sp, #0
    94fe:	4603      	mov	r3, r0
    9500:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9506:	2b00      	cmp	r3, #0
    9508:	db0b      	blt.n	9522 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    950a:	4909      	ldr	r1, [pc, #36]	; (9530 <__NVIC_EnableIRQ+0x38>)
    950c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9510:	095b      	lsrs	r3, r3, #5
    9512:	88fa      	ldrh	r2, [r7, #6]
    9514:	f002 021f 	and.w	r2, r2, #31
    9518:	2001      	movs	r0, #1
    951a:	fa00 f202 	lsl.w	r2, r0, r2
    951e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9522:	bf00      	nop
    9524:	370c      	adds	r7, #12
    9526:	46bd      	mov	sp, r7
    9528:	f85d 7b04 	ldr.w	r7, [sp], #4
    952c:	4770      	bx	lr
    952e:	bf00      	nop
    9530:	e000e100 	.word	0xe000e100

00009534 <__NVIC_DisableIRQ>:
{
    9534:	b480      	push	{r7}
    9536:	b083      	sub	sp, #12
    9538:	af00      	add	r7, sp, #0
    953a:	4603      	mov	r3, r0
    953c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    953e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9542:	2b00      	cmp	r3, #0
    9544:	db10      	blt.n	9568 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9546:	490b      	ldr	r1, [pc, #44]	; (9574 <__NVIC_DisableIRQ+0x40>)
    9548:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    954c:	095b      	lsrs	r3, r3, #5
    954e:	88fa      	ldrh	r2, [r7, #6]
    9550:	f002 021f 	and.w	r2, r2, #31
    9554:	2001      	movs	r0, #1
    9556:	fa00 f202 	lsl.w	r2, r0, r2
    955a:	3320      	adds	r3, #32
    955c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    9560:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9564:	f3bf 8f6f 	isb	sy
}
    9568:	bf00      	nop
    956a:	370c      	adds	r7, #12
    956c:	46bd      	mov	sp, r7
    956e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9572:	4770      	bx	lr
    9574:	e000e100 	.word	0xe000e100

00009578 <__NVIC_ClearPendingIRQ>:
{
    9578:	b480      	push	{r7}
    957a:	b083      	sub	sp, #12
    957c:	af00      	add	r7, sp, #0
    957e:	4603      	mov	r3, r0
    9580:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    9582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9586:	2b00      	cmp	r3, #0
    9588:	db0c      	blt.n	95a4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    958a:	4909      	ldr	r1, [pc, #36]	; (95b0 <__NVIC_ClearPendingIRQ+0x38>)
    958c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    9590:	095b      	lsrs	r3, r3, #5
    9592:	88fa      	ldrh	r2, [r7, #6]
    9594:	f002 021f 	and.w	r2, r2, #31
    9598:	2001      	movs	r0, #1
    959a:	fa00 f202 	lsl.w	r2, r0, r2
    959e:	3360      	adds	r3, #96	; 0x60
    95a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    95a4:	bf00      	nop
    95a6:	370c      	adds	r7, #12
    95a8:	46bd      	mov	sp, r7
    95aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    95ae:	4770      	bx	lr
    95b0:	e000e100 	.word	0xe000e100

000095b4 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    95b4:	b480      	push	{r7}
    95b6:	b083      	sub	sp, #12
    95b8:	af00      	add	r7, sp, #0
    95ba:	6078      	str	r0, [r7, #4]
    95bc:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    95be:	bf00      	nop
    95c0:	687b      	ldr	r3, [r7, #4]
    95c2:	691a      	ldr	r2, [r3, #16]
    95c4:	683b      	ldr	r3, [r7, #0]
    95c6:	4013      	ands	r3, r2
    95c8:	2b00      	cmp	r3, #0
    95ca:	d1f9      	bne.n	95c0 <hri_tc_wait_for_sync+0xc>
	};
}
    95cc:	bf00      	nop
    95ce:	370c      	adds	r7, #12
    95d0:	46bd      	mov	sp, r7
    95d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    95d6:	4770      	bx	lr

000095d8 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    95d8:	b480      	push	{r7}
    95da:	b083      	sub	sp, #12
    95dc:	af00      	add	r7, sp, #0
    95de:	6078      	str	r0, [r7, #4]
    95e0:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    95e2:	687b      	ldr	r3, [r7, #4]
    95e4:	691a      	ldr	r2, [r3, #16]
    95e6:	683b      	ldr	r3, [r7, #0]
    95e8:	4013      	ands	r3, r2
    95ea:	2b00      	cmp	r3, #0
    95ec:	bf14      	ite	ne
    95ee:	2301      	movne	r3, #1
    95f0:	2300      	moveq	r3, #0
    95f2:	b2db      	uxtb	r3, r3
}
    95f4:	4618      	mov	r0, r3
    95f6:	370c      	adds	r7, #12
    95f8:	46bd      	mov	sp, r7
    95fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    95fe:	4770      	bx	lr

00009600 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    9600:	b480      	push	{r7}
    9602:	b083      	sub	sp, #12
    9604:	af00      	add	r7, sp, #0
    9606:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    9608:	687b      	ldr	r3, [r7, #4]
    960a:	7a9b      	ldrb	r3, [r3, #10]
    960c:	b2db      	uxtb	r3, r3
    960e:	f003 0301 	and.w	r3, r3, #1
    9612:	2b00      	cmp	r3, #0
    9614:	bf14      	ite	ne
    9616:	2301      	movne	r3, #1
    9618:	2300      	moveq	r3, #0
    961a:	b2db      	uxtb	r3, r3
}
    961c:	4618      	mov	r0, r3
    961e:	370c      	adds	r7, #12
    9620:	46bd      	mov	sp, r7
    9622:	f85d 7b04 	ldr.w	r7, [sp], #4
    9626:	4770      	bx	lr

00009628 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    9628:	b480      	push	{r7}
    962a:	b083      	sub	sp, #12
    962c:	af00      	add	r7, sp, #0
    962e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    9630:	687b      	ldr	r3, [r7, #4]
    9632:	2201      	movs	r2, #1
    9634:	729a      	strb	r2, [r3, #10]
}
    9636:	bf00      	nop
    9638:	370c      	adds	r7, #12
    963a:	46bd      	mov	sp, r7
    963c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9640:	4770      	bx	lr

00009642 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    9642:	b480      	push	{r7}
    9644:	b083      	sub	sp, #12
    9646:	af00      	add	r7, sp, #0
    9648:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    964a:	687b      	ldr	r3, [r7, #4]
    964c:	2202      	movs	r2, #2
    964e:	729a      	strb	r2, [r3, #10]
}
    9650:	bf00      	nop
    9652:	370c      	adds	r7, #12
    9654:	46bd      	mov	sp, r7
    9656:	f85d 7b04 	ldr.w	r7, [sp], #4
    965a:	4770      	bx	lr

0000965c <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    965c:	b480      	push	{r7}
    965e:	b083      	sub	sp, #12
    9660:	af00      	add	r7, sp, #0
    9662:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    9664:	687b      	ldr	r3, [r7, #4]
    9666:	2201      	movs	r2, #1
    9668:	725a      	strb	r2, [r3, #9]
}
    966a:	bf00      	nop
    966c:	370c      	adds	r7, #12
    966e:	46bd      	mov	sp, r7
    9670:	f85d 7b04 	ldr.w	r7, [sp], #4
    9674:	4770      	bx	lr

00009676 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    9676:	b480      	push	{r7}
    9678:	b083      	sub	sp, #12
    967a:	af00      	add	r7, sp, #0
    967c:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    967e:	687b      	ldr	r3, [r7, #4]
    9680:	7a5b      	ldrb	r3, [r3, #9]
    9682:	b2db      	uxtb	r3, r3
    9684:	085b      	lsrs	r3, r3, #1
    9686:	f003 0301 	and.w	r3, r3, #1
    968a:	2b00      	cmp	r3, #0
    968c:	bf14      	ite	ne
    968e:	2301      	movne	r3, #1
    9690:	2300      	moveq	r3, #0
    9692:	b2db      	uxtb	r3, r3
}
    9694:	4618      	mov	r0, r3
    9696:	370c      	adds	r7, #12
    9698:	46bd      	mov	sp, r7
    969a:	f85d 7b04 	ldr.w	r7, [sp], #4
    969e:	4770      	bx	lr

000096a0 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    96a0:	b580      	push	{r7, lr}
    96a2:	b082      	sub	sp, #8
    96a4:	af00      	add	r7, sp, #0
    96a6:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    96a8:	687b      	ldr	r3, [r7, #4]
    96aa:	681b      	ldr	r3, [r3, #0]
    96ac:	f043 0201 	orr.w	r2, r3, #1
    96b0:	687b      	ldr	r3, [r7, #4]
    96b2:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    96b4:	2101      	movs	r1, #1
    96b6:	6878      	ldr	r0, [r7, #4]
    96b8:	4b02      	ldr	r3, [pc, #8]	; (96c4 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    96ba:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    96bc:	bf00      	nop
    96be:	3708      	adds	r7, #8
    96c0:	46bd      	mov	sp, r7
    96c2:	bd80      	pop	{r7, pc}
    96c4:	000095b5 	.word	0x000095b5

000096c8 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    96c8:	b580      	push	{r7, lr}
    96ca:	b082      	sub	sp, #8
    96cc:	af00      	add	r7, sp, #0
    96ce:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    96d0:	687b      	ldr	r3, [r7, #4]
    96d2:	681b      	ldr	r3, [r3, #0]
    96d4:	f043 0202 	orr.w	r2, r3, #2
    96d8:	687b      	ldr	r3, [r7, #4]
    96da:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    96dc:	2103      	movs	r1, #3
    96de:	6878      	ldr	r0, [r7, #4]
    96e0:	4b02      	ldr	r3, [pc, #8]	; (96ec <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    96e2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    96e4:	bf00      	nop
    96e6:	3708      	adds	r7, #8
    96e8:	46bd      	mov	sp, r7
    96ea:	bd80      	pop	{r7, pc}
    96ec:	000095b5 	.word	0x000095b5

000096f0 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    96f0:	b580      	push	{r7, lr}
    96f2:	b084      	sub	sp, #16
    96f4:	af00      	add	r7, sp, #0
    96f6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    96f8:	2103      	movs	r1, #3
    96fa:	6878      	ldr	r0, [r7, #4]
    96fc:	4b09      	ldr	r3, [pc, #36]	; (9724 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    96fe:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9700:	687b      	ldr	r3, [r7, #4]
    9702:	681b      	ldr	r3, [r3, #0]
    9704:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    9706:	68fb      	ldr	r3, [r7, #12]
    9708:	085b      	lsrs	r3, r3, #1
    970a:	f003 0301 	and.w	r3, r3, #1
    970e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    9710:	68fb      	ldr	r3, [r7, #12]
    9712:	2b00      	cmp	r3, #0
    9714:	bf14      	ite	ne
    9716:	2301      	movne	r3, #1
    9718:	2300      	moveq	r3, #0
    971a:	b2db      	uxtb	r3, r3
}
    971c:	4618      	mov	r0, r3
    971e:	3710      	adds	r7, #16
    9720:	46bd      	mov	sp, r7
    9722:	bd80      	pop	{r7, pc}
    9724:	000095b5 	.word	0x000095b5

00009728 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9728:	b580      	push	{r7, lr}
    972a:	b082      	sub	sp, #8
    972c:	af00      	add	r7, sp, #0
    972e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    9730:	687b      	ldr	r3, [r7, #4]
    9732:	681b      	ldr	r3, [r3, #0]
    9734:	f023 0202 	bic.w	r2, r3, #2
    9738:	687b      	ldr	r3, [r7, #4]
    973a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    973c:	2103      	movs	r1, #3
    973e:	6878      	ldr	r0, [r7, #4]
    9740:	4b02      	ldr	r3, [pc, #8]	; (974c <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    9742:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9744:	bf00      	nop
    9746:	3708      	adds	r7, #8
    9748:	46bd      	mov	sp, r7
    974a:	bd80      	pop	{r7, pc}
    974c:	000095b5 	.word	0x000095b5

00009750 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    9750:	b480      	push	{r7}
    9752:	b085      	sub	sp, #20
    9754:	af00      	add	r7, sp, #0
    9756:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    9758:	687b      	ldr	r3, [r7, #4]
    975a:	681b      	ldr	r3, [r3, #0]
    975c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    975e:	68fb      	ldr	r3, [r7, #12]
    9760:	089b      	lsrs	r3, r3, #2
    9762:	f003 0303 	and.w	r3, r3, #3
    9766:	60fb      	str	r3, [r7, #12]
	return tmp;
    9768:	68fb      	ldr	r3, [r7, #12]
}
    976a:	4618      	mov	r0, r3
    976c:	3714      	adds	r7, #20
    976e:	46bd      	mov	sp, r7
    9770:	f85d 7b04 	ldr.w	r7, [sp], #4
    9774:	4770      	bx	lr
	...

00009778 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    9778:	b580      	push	{r7, lr}
    977a:	b084      	sub	sp, #16
    977c:	af00      	add	r7, sp, #0
    977e:	6078      	str	r0, [r7, #4]
    9780:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    9782:	2103      	movs	r1, #3
    9784:	6878      	ldr	r0, [r7, #4]
    9786:	4b07      	ldr	r3, [pc, #28]	; (97a4 <hri_tc_get_CTRLA_reg+0x2c>)
    9788:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    978a:	687b      	ldr	r3, [r7, #4]
    978c:	681b      	ldr	r3, [r3, #0]
    978e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    9790:	68fa      	ldr	r2, [r7, #12]
    9792:	683b      	ldr	r3, [r7, #0]
    9794:	4013      	ands	r3, r2
    9796:	60fb      	str	r3, [r7, #12]
	return tmp;
    9798:	68fb      	ldr	r3, [r7, #12]
}
    979a:	4618      	mov	r0, r3
    979c:	3710      	adds	r7, #16
    979e:	46bd      	mov	sp, r7
    97a0:	bd80      	pop	{r7, pc}
    97a2:	bf00      	nop
    97a4:	000095b5 	.word	0x000095b5

000097a8 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    97a8:	b580      	push	{r7, lr}
    97aa:	b082      	sub	sp, #8
    97ac:	af00      	add	r7, sp, #0
    97ae:	6078      	str	r0, [r7, #4]
    97b0:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    97b2:	687b      	ldr	r3, [r7, #4]
    97b4:	683a      	ldr	r2, [r7, #0]
    97b6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    97b8:	2103      	movs	r1, #3
    97ba:	6878      	ldr	r0, [r7, #4]
    97bc:	4b02      	ldr	r3, [pc, #8]	; (97c8 <hri_tc_write_CTRLA_reg+0x20>)
    97be:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    97c0:	bf00      	nop
    97c2:	3708      	adds	r7, #8
    97c4:	46bd      	mov	sp, r7
    97c6:	bd80      	pop	{r7, pc}
    97c8:	000095b5 	.word	0x000095b5

000097cc <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    97cc:	b480      	push	{r7}
    97ce:	b083      	sub	sp, #12
    97d0:	af00      	add	r7, sp, #0
    97d2:	6078      	str	r0, [r7, #4]
    97d4:	460b      	mov	r3, r1
    97d6:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    97d8:	687b      	ldr	r3, [r7, #4]
    97da:	887a      	ldrh	r2, [r7, #2]
    97dc:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    97de:	bf00      	nop
    97e0:	370c      	adds	r7, #12
    97e2:	46bd      	mov	sp, r7
    97e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    97e8:	4770      	bx	lr

000097ea <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    97ea:	b480      	push	{r7}
    97ec:	b083      	sub	sp, #12
    97ee:	af00      	add	r7, sp, #0
    97f0:	6078      	str	r0, [r7, #4]
    97f2:	460b      	mov	r3, r1
    97f4:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    97f6:	687b      	ldr	r3, [r7, #4]
    97f8:	78fa      	ldrb	r2, [r7, #3]
    97fa:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    97fc:	bf00      	nop
    97fe:	370c      	adds	r7, #12
    9800:	46bd      	mov	sp, r7
    9802:	f85d 7b04 	ldr.w	r7, [sp], #4
    9806:	4770      	bx	lr

00009808 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    9808:	b480      	push	{r7}
    980a:	b083      	sub	sp, #12
    980c:	af00      	add	r7, sp, #0
    980e:	6078      	str	r0, [r7, #4]
    9810:	460b      	mov	r3, r1
    9812:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    9814:	687b      	ldr	r3, [r7, #4]
    9816:	78fa      	ldrb	r2, [r7, #3]
    9818:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    981a:	bf00      	nop
    981c:	370c      	adds	r7, #12
    981e:	46bd      	mov	sp, r7
    9820:	f85d 7b04 	ldr.w	r7, [sp], #4
    9824:	4770      	bx	lr
	...

00009828 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    9828:	b580      	push	{r7, lr}
    982a:	b082      	sub	sp, #8
    982c:	af00      	add	r7, sp, #0
    982e:	6078      	str	r0, [r7, #4]
    9830:	460b      	mov	r3, r1
    9832:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    9834:	687b      	ldr	r3, [r7, #4]
    9836:	78fa      	ldrb	r2, [r7, #3]
    9838:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    983a:	2120      	movs	r1, #32
    983c:	6878      	ldr	r0, [r7, #4]
    983e:	4b03      	ldr	r3, [pc, #12]	; (984c <hri_tccount8_write_PER_reg+0x24>)
    9840:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9842:	bf00      	nop
    9844:	3708      	adds	r7, #8
    9846:	46bd      	mov	sp, r7
    9848:	bd80      	pop	{r7, pc}
    984a:	bf00      	nop
    984c:	000095b5 	.word	0x000095b5

00009850 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    9850:	b580      	push	{r7, lr}
    9852:	b082      	sub	sp, #8
    9854:	af00      	add	r7, sp, #0
    9856:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    9858:	2120      	movs	r1, #32
    985a:	6878      	ldr	r0, [r7, #4]
    985c:	4b04      	ldr	r3, [pc, #16]	; (9870 <hri_tccount8_read_PER_reg+0x20>)
    985e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    9860:	687b      	ldr	r3, [r7, #4]
    9862:	7edb      	ldrb	r3, [r3, #27]
    9864:	b2db      	uxtb	r3, r3
}
    9866:	4618      	mov	r0, r3
    9868:	3708      	adds	r7, #8
    986a:	46bd      	mov	sp, r7
    986c:	bd80      	pop	{r7, pc}
    986e:	bf00      	nop
    9870:	000095b5 	.word	0x000095b5

00009874 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    9874:	b580      	push	{r7, lr}
    9876:	b082      	sub	sp, #8
    9878:	af00      	add	r7, sp, #0
    987a:	6078      	str	r0, [r7, #4]
    987c:	460b      	mov	r3, r1
    987e:	70fb      	strb	r3, [r7, #3]
    9880:	4613      	mov	r3, r2
    9882:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    9884:	78fb      	ldrb	r3, [r7, #3]
    9886:	687a      	ldr	r2, [r7, #4]
    9888:	4413      	add	r3, r2
    988a:	78ba      	ldrb	r2, [r7, #2]
    988c:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    988e:	21c0      	movs	r1, #192	; 0xc0
    9890:	6878      	ldr	r0, [r7, #4]
    9892:	4b03      	ldr	r3, [pc, #12]	; (98a0 <hri_tccount8_write_CC_reg+0x2c>)
    9894:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    9896:	bf00      	nop
    9898:	3708      	adds	r7, #8
    989a:	46bd      	mov	sp, r7
    989c:	bd80      	pop	{r7, pc}
    989e:	bf00      	nop
    98a0:	000095b5 	.word	0x000095b5

000098a4 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    98a4:	b580      	push	{r7, lr}
    98a6:	b082      	sub	sp, #8
    98a8:	af00      	add	r7, sp, #0
    98aa:	6078      	str	r0, [r7, #4]
    98ac:	460b      	mov	r3, r1
    98ae:	70fb      	strb	r3, [r7, #3]
    98b0:	4613      	mov	r3, r2
    98b2:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    98b4:	78fb      	ldrb	r3, [r7, #3]
    98b6:	687a      	ldr	r2, [r7, #4]
    98b8:	330c      	adds	r3, #12
    98ba:	005b      	lsls	r3, r3, #1
    98bc:	4413      	add	r3, r2
    98be:	883a      	ldrh	r2, [r7, #0]
    98c0:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    98c2:	21c0      	movs	r1, #192	; 0xc0
    98c4:	6878      	ldr	r0, [r7, #4]
    98c6:	4b03      	ldr	r3, [pc, #12]	; (98d4 <hri_tccount16_write_CC_reg+0x30>)
    98c8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    98ca:	bf00      	nop
    98cc:	3708      	adds	r7, #8
    98ce:	46bd      	mov	sp, r7
    98d0:	bd80      	pop	{r7, pc}
    98d2:	bf00      	nop
    98d4:	000095b5 	.word	0x000095b5

000098d8 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    98d8:	b580      	push	{r7, lr}
    98da:	b082      	sub	sp, #8
    98dc:	af00      	add	r7, sp, #0
    98de:	6078      	str	r0, [r7, #4]
    98e0:	460b      	mov	r3, r1
    98e2:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    98e4:	21c0      	movs	r1, #192	; 0xc0
    98e6:	6878      	ldr	r0, [r7, #4]
    98e8:	4b06      	ldr	r3, [pc, #24]	; (9904 <hri_tccount16_read_CC_reg+0x2c>)
    98ea:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    98ec:	78fb      	ldrb	r3, [r7, #3]
    98ee:	687a      	ldr	r2, [r7, #4]
    98f0:	330c      	adds	r3, #12
    98f2:	005b      	lsls	r3, r3, #1
    98f4:	4413      	add	r3, r2
    98f6:	889b      	ldrh	r3, [r3, #4]
    98f8:	b29b      	uxth	r3, r3
}
    98fa:	4618      	mov	r0, r3
    98fc:	3708      	adds	r7, #8
    98fe:	46bd      	mov	sp, r7
    9900:	bd80      	pop	{r7, pc}
    9902:	bf00      	nop
    9904:	000095b5 	.word	0x000095b5

00009908 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    9908:	b580      	push	{r7, lr}
    990a:	b084      	sub	sp, #16
    990c:	af00      	add	r7, sp, #0
    990e:	60f8      	str	r0, [r7, #12]
    9910:	460b      	mov	r3, r1
    9912:	607a      	str	r2, [r7, #4]
    9914:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    9916:	7afb      	ldrb	r3, [r7, #11]
    9918:	68fa      	ldr	r2, [r7, #12]
    991a:	3306      	adds	r3, #6
    991c:	009b      	lsls	r3, r3, #2
    991e:	4413      	add	r3, r2
    9920:	687a      	ldr	r2, [r7, #4]
    9922:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9924:	21c0      	movs	r1, #192	; 0xc0
    9926:	68f8      	ldr	r0, [r7, #12]
    9928:	4b02      	ldr	r3, [pc, #8]	; (9934 <hri_tccount32_write_CC_reg+0x2c>)
    992a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    992c:	bf00      	nop
    992e:	3710      	adds	r7, #16
    9930:	46bd      	mov	sp, r7
    9932:	bd80      	pop	{r7, pc}
    9934:	000095b5 	.word	0x000095b5

00009938 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    9938:	b580      	push	{r7, lr}
    993a:	b082      	sub	sp, #8
    993c:	af00      	add	r7, sp, #0
    993e:	6078      	str	r0, [r7, #4]
    9940:	460b      	mov	r3, r1
    9942:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    9944:	21c0      	movs	r1, #192	; 0xc0
    9946:	6878      	ldr	r0, [r7, #4]
    9948:	4b05      	ldr	r3, [pc, #20]	; (9960 <hri_tccount32_read_CC_reg+0x28>)
    994a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    994c:	78fb      	ldrb	r3, [r7, #3]
    994e:	687a      	ldr	r2, [r7, #4]
    9950:	3306      	adds	r3, #6
    9952:	009b      	lsls	r3, r3, #2
    9954:	4413      	add	r3, r2
    9956:	685b      	ldr	r3, [r3, #4]
}
    9958:	4618      	mov	r0, r3
    995a:	3708      	adds	r7, #8
    995c:	46bd      	mov	sp, r7
    995e:	bd80      	pop	{r7, pc}
    9960:	000095b5 	.word	0x000095b5

00009964 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    9964:	b580      	push	{r7, lr}
    9966:	b084      	sub	sp, #16
    9968:	af00      	add	r7, sp, #0
    996a:	6078      	str	r0, [r7, #4]
    996c:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    996e:	6838      	ldr	r0, [r7, #0]
    9970:	4b93      	ldr	r3, [pc, #588]	; (9bc0 <_tc_timer_init+0x25c>)
    9972:	4798      	blx	r3
    9974:	4603      	mov	r3, r0
    9976:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    9978:	687b      	ldr	r3, [r7, #4]
    997a:	683a      	ldr	r2, [r7, #0]
    997c:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    997e:	22a4      	movs	r2, #164	; 0xa4
    9980:	4990      	ldr	r1, [pc, #576]	; (9bc4 <_tc_timer_init+0x260>)
    9982:	2001      	movs	r0, #1
    9984:	4b90      	ldr	r3, [pc, #576]	; (9bc8 <_tc_timer_init+0x264>)
    9986:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    9988:	2101      	movs	r1, #1
    998a:	6838      	ldr	r0, [r7, #0]
    998c:	4b8f      	ldr	r3, [pc, #572]	; (9bcc <_tc_timer_init+0x268>)
    998e:	4798      	blx	r3
    9990:	4603      	mov	r3, r0
    9992:	f083 0301 	eor.w	r3, r3, #1
    9996:	b2db      	uxtb	r3, r3
    9998:	2b00      	cmp	r3, #0
    999a:	d011      	beq.n	99c0 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    999c:	2102      	movs	r1, #2
    999e:	6838      	ldr	r0, [r7, #0]
    99a0:	4b8b      	ldr	r3, [pc, #556]	; (9bd0 <_tc_timer_init+0x26c>)
    99a2:	4798      	blx	r3
    99a4:	4603      	mov	r3, r0
    99a6:	2b00      	cmp	r3, #0
    99a8:	d006      	beq.n	99b8 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    99aa:	6838      	ldr	r0, [r7, #0]
    99ac:	4b89      	ldr	r3, [pc, #548]	; (9bd4 <_tc_timer_init+0x270>)
    99ae:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    99b0:	2102      	movs	r1, #2
    99b2:	6838      	ldr	r0, [r7, #0]
    99b4:	4b88      	ldr	r3, [pc, #544]	; (9bd8 <_tc_timer_init+0x274>)
    99b6:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    99b8:	2101      	movs	r1, #1
    99ba:	6838      	ldr	r0, [r7, #0]
    99bc:	4b87      	ldr	r3, [pc, #540]	; (9bdc <_tc_timer_init+0x278>)
    99be:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    99c0:	2101      	movs	r1, #1
    99c2:	6838      	ldr	r0, [r7, #0]
    99c4:	4b84      	ldr	r3, [pc, #528]	; (9bd8 <_tc_timer_init+0x274>)
    99c6:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    99c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    99cc:	4984      	ldr	r1, [pc, #528]	; (9be0 <_tc_timer_init+0x27c>)
    99ce:	4613      	mov	r3, r2
    99d0:	009b      	lsls	r3, r3, #2
    99d2:	4413      	add	r3, r2
    99d4:	009b      	lsls	r3, r3, #2
    99d6:	440b      	add	r3, r1
    99d8:	3304      	adds	r3, #4
    99da:	681b      	ldr	r3, [r3, #0]
    99dc:	4619      	mov	r1, r3
    99de:	6838      	ldr	r0, [r7, #0]
    99e0:	4b7e      	ldr	r3, [pc, #504]	; (9bdc <_tc_timer_init+0x278>)
    99e2:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    99e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    99e8:	497d      	ldr	r1, [pc, #500]	; (9be0 <_tc_timer_init+0x27c>)
    99ea:	4613      	mov	r3, r2
    99ec:	009b      	lsls	r3, r3, #2
    99ee:	4413      	add	r3, r2
    99f0:	009b      	lsls	r3, r3, #2
    99f2:	440b      	add	r3, r1
    99f4:	330a      	adds	r3, #10
    99f6:	781b      	ldrb	r3, [r3, #0]
    99f8:	4619      	mov	r1, r3
    99fa:	6838      	ldr	r0, [r7, #0]
    99fc:	4b79      	ldr	r3, [pc, #484]	; (9be4 <_tc_timer_init+0x280>)
    99fe:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    9a00:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a04:	4976      	ldr	r1, [pc, #472]	; (9be0 <_tc_timer_init+0x27c>)
    9a06:	4613      	mov	r3, r2
    9a08:	009b      	lsls	r3, r3, #2
    9a0a:	4413      	add	r3, r2
    9a0c:	009b      	lsls	r3, r3, #2
    9a0e:	440b      	add	r3, r1
    9a10:	3308      	adds	r3, #8
    9a12:	881b      	ldrh	r3, [r3, #0]
    9a14:	4619      	mov	r1, r3
    9a16:	6838      	ldr	r0, [r7, #0]
    9a18:	4b73      	ldr	r3, [pc, #460]	; (9be8 <_tc_timer_init+0x284>)
    9a1a:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    9a1c:	2101      	movs	r1, #1
    9a1e:	6838      	ldr	r0, [r7, #0]
    9a20:	4b72      	ldr	r3, [pc, #456]	; (9bec <_tc_timer_init+0x288>)
    9a22:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    9a24:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a28:	496d      	ldr	r1, [pc, #436]	; (9be0 <_tc_timer_init+0x27c>)
    9a2a:	4613      	mov	r3, r2
    9a2c:	009b      	lsls	r3, r3, #2
    9a2e:	4413      	add	r3, r2
    9a30:	009b      	lsls	r3, r3, #2
    9a32:	440b      	add	r3, r1
    9a34:	3304      	adds	r3, #4
    9a36:	681b      	ldr	r3, [r3, #0]
    9a38:	f003 030c 	and.w	r3, r3, #12
    9a3c:	2b08      	cmp	r3, #8
    9a3e:	d11e      	bne.n	9a7e <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    9a40:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a44:	4966      	ldr	r1, [pc, #408]	; (9be0 <_tc_timer_init+0x27c>)
    9a46:	4613      	mov	r3, r2
    9a48:	009b      	lsls	r3, r3, #2
    9a4a:	4413      	add	r3, r2
    9a4c:	009b      	lsls	r3, r3, #2
    9a4e:	440b      	add	r3, r1
    9a50:	330c      	adds	r3, #12
    9a52:	681b      	ldr	r3, [r3, #0]
    9a54:	461a      	mov	r2, r3
    9a56:	2100      	movs	r1, #0
    9a58:	6838      	ldr	r0, [r7, #0]
    9a5a:	4b65      	ldr	r3, [pc, #404]	; (9bf0 <_tc_timer_init+0x28c>)
    9a5c:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    9a5e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a62:	495f      	ldr	r1, [pc, #380]	; (9be0 <_tc_timer_init+0x27c>)
    9a64:	4613      	mov	r3, r2
    9a66:	009b      	lsls	r3, r3, #2
    9a68:	4413      	add	r3, r2
    9a6a:	009b      	lsls	r3, r3, #2
    9a6c:	440b      	add	r3, r1
    9a6e:	3310      	adds	r3, #16
    9a70:	681b      	ldr	r3, [r3, #0]
    9a72:	461a      	mov	r2, r3
    9a74:	2101      	movs	r1, #1
    9a76:	6838      	ldr	r0, [r7, #0]
    9a78:	4b5d      	ldr	r3, [pc, #372]	; (9bf0 <_tc_timer_init+0x28c>)
    9a7a:	4798      	blx	r3
    9a7c:	e06a      	b.n	9b54 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    9a7e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a82:	4957      	ldr	r1, [pc, #348]	; (9be0 <_tc_timer_init+0x27c>)
    9a84:	4613      	mov	r3, r2
    9a86:	009b      	lsls	r3, r3, #2
    9a88:	4413      	add	r3, r2
    9a8a:	009b      	lsls	r3, r3, #2
    9a8c:	440b      	add	r3, r1
    9a8e:	3304      	adds	r3, #4
    9a90:	681b      	ldr	r3, [r3, #0]
    9a92:	f003 030c 	and.w	r3, r3, #12
    9a96:	2b00      	cmp	r3, #0
    9a98:	d120      	bne.n	9adc <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    9a9a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9a9e:	4950      	ldr	r1, [pc, #320]	; (9be0 <_tc_timer_init+0x27c>)
    9aa0:	4613      	mov	r3, r2
    9aa2:	009b      	lsls	r3, r3, #2
    9aa4:	4413      	add	r3, r2
    9aa6:	009b      	lsls	r3, r3, #2
    9aa8:	440b      	add	r3, r1
    9aaa:	330c      	adds	r3, #12
    9aac:	681b      	ldr	r3, [r3, #0]
    9aae:	b29b      	uxth	r3, r3
    9ab0:	461a      	mov	r2, r3
    9ab2:	2100      	movs	r1, #0
    9ab4:	6838      	ldr	r0, [r7, #0]
    9ab6:	4b4f      	ldr	r3, [pc, #316]	; (9bf4 <_tc_timer_init+0x290>)
    9ab8:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    9aba:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9abe:	4948      	ldr	r1, [pc, #288]	; (9be0 <_tc_timer_init+0x27c>)
    9ac0:	4613      	mov	r3, r2
    9ac2:	009b      	lsls	r3, r3, #2
    9ac4:	4413      	add	r3, r2
    9ac6:	009b      	lsls	r3, r3, #2
    9ac8:	440b      	add	r3, r1
    9aca:	3310      	adds	r3, #16
    9acc:	681b      	ldr	r3, [r3, #0]
    9ace:	b29b      	uxth	r3, r3
    9ad0:	461a      	mov	r2, r3
    9ad2:	2101      	movs	r1, #1
    9ad4:	6838      	ldr	r0, [r7, #0]
    9ad6:	4b47      	ldr	r3, [pc, #284]	; (9bf4 <_tc_timer_init+0x290>)
    9ad8:	4798      	blx	r3
    9ada:	e03b      	b.n	9b54 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    9adc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9ae0:	493f      	ldr	r1, [pc, #252]	; (9be0 <_tc_timer_init+0x27c>)
    9ae2:	4613      	mov	r3, r2
    9ae4:	009b      	lsls	r3, r3, #2
    9ae6:	4413      	add	r3, r2
    9ae8:	009b      	lsls	r3, r3, #2
    9aea:	440b      	add	r3, r1
    9aec:	3304      	adds	r3, #4
    9aee:	681b      	ldr	r3, [r3, #0]
    9af0:	f003 030c 	and.w	r3, r3, #12
    9af4:	2b04      	cmp	r3, #4
    9af6:	d12d      	bne.n	9b54 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    9af8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9afc:	4938      	ldr	r1, [pc, #224]	; (9be0 <_tc_timer_init+0x27c>)
    9afe:	4613      	mov	r3, r2
    9b00:	009b      	lsls	r3, r3, #2
    9b02:	4413      	add	r3, r2
    9b04:	009b      	lsls	r3, r3, #2
    9b06:	440b      	add	r3, r1
    9b08:	330c      	adds	r3, #12
    9b0a:	681b      	ldr	r3, [r3, #0]
    9b0c:	b2db      	uxtb	r3, r3
    9b0e:	461a      	mov	r2, r3
    9b10:	2100      	movs	r1, #0
    9b12:	6838      	ldr	r0, [r7, #0]
    9b14:	4b38      	ldr	r3, [pc, #224]	; (9bf8 <_tc_timer_init+0x294>)
    9b16:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    9b18:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b1c:	4930      	ldr	r1, [pc, #192]	; (9be0 <_tc_timer_init+0x27c>)
    9b1e:	4613      	mov	r3, r2
    9b20:	009b      	lsls	r3, r3, #2
    9b22:	4413      	add	r3, r2
    9b24:	009b      	lsls	r3, r3, #2
    9b26:	440b      	add	r3, r1
    9b28:	3310      	adds	r3, #16
    9b2a:	681b      	ldr	r3, [r3, #0]
    9b2c:	b2db      	uxtb	r3, r3
    9b2e:	461a      	mov	r2, r3
    9b30:	2101      	movs	r1, #1
    9b32:	6838      	ldr	r0, [r7, #0]
    9b34:	4b30      	ldr	r3, [pc, #192]	; (9bf8 <_tc_timer_init+0x294>)
    9b36:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    9b38:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b3c:	4928      	ldr	r1, [pc, #160]	; (9be0 <_tc_timer_init+0x27c>)
    9b3e:	4613      	mov	r3, r2
    9b40:	009b      	lsls	r3, r3, #2
    9b42:	4413      	add	r3, r2
    9b44:	009b      	lsls	r3, r3, #2
    9b46:	440b      	add	r3, r1
    9b48:	330b      	adds	r3, #11
    9b4a:	781b      	ldrb	r3, [r3, #0]
    9b4c:	4619      	mov	r1, r3
    9b4e:	6838      	ldr	r0, [r7, #0]
    9b50:	4b2a      	ldr	r3, [pc, #168]	; (9bfc <_tc_timer_init+0x298>)
    9b52:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    9b54:	6838      	ldr	r0, [r7, #0]
    9b56:	4b2a      	ldr	r3, [pc, #168]	; (9c00 <_tc_timer_init+0x29c>)
    9b58:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    9b5a:	6879      	ldr	r1, [r7, #4]
    9b5c:	6838      	ldr	r0, [r7, #0]
    9b5e:	4b29      	ldr	r3, [pc, #164]	; (9c04 <_tc_timer_init+0x2a0>)
    9b60:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    9b62:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b66:	491e      	ldr	r1, [pc, #120]	; (9be0 <_tc_timer_init+0x27c>)
    9b68:	4613      	mov	r3, r2
    9b6a:	009b      	lsls	r3, r3, #2
    9b6c:	4413      	add	r3, r2
    9b6e:	009b      	lsls	r3, r3, #2
    9b70:	440b      	add	r3, r1
    9b72:	3302      	adds	r3, #2
    9b74:	f9b3 3000 	ldrsh.w	r3, [r3]
    9b78:	4618      	mov	r0, r3
    9b7a:	4b23      	ldr	r3, [pc, #140]	; (9c08 <_tc_timer_init+0x2a4>)
    9b7c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    9b7e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b82:	4917      	ldr	r1, [pc, #92]	; (9be0 <_tc_timer_init+0x27c>)
    9b84:	4613      	mov	r3, r2
    9b86:	009b      	lsls	r3, r3, #2
    9b88:	4413      	add	r3, r2
    9b8a:	009b      	lsls	r3, r3, #2
    9b8c:	440b      	add	r3, r1
    9b8e:	3302      	adds	r3, #2
    9b90:	f9b3 3000 	ldrsh.w	r3, [r3]
    9b94:	4618      	mov	r0, r3
    9b96:	4b1d      	ldr	r3, [pc, #116]	; (9c0c <_tc_timer_init+0x2a8>)
    9b98:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    9b9a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9b9e:	4910      	ldr	r1, [pc, #64]	; (9be0 <_tc_timer_init+0x27c>)
    9ba0:	4613      	mov	r3, r2
    9ba2:	009b      	lsls	r3, r3, #2
    9ba4:	4413      	add	r3, r2
    9ba6:	009b      	lsls	r3, r3, #2
    9ba8:	440b      	add	r3, r1
    9baa:	3302      	adds	r3, #2
    9bac:	f9b3 3000 	ldrsh.w	r3, [r3]
    9bb0:	4618      	mov	r0, r3
    9bb2:	4b17      	ldr	r3, [pc, #92]	; (9c10 <_tc_timer_init+0x2ac>)
    9bb4:	4798      	blx	r3

	return ERR_NONE;
    9bb6:	2300      	movs	r3, #0
}
    9bb8:	4618      	mov	r0, r3
    9bba:	3710      	adds	r7, #16
    9bbc:	46bd      	mov	sp, r7
    9bbe:	bd80      	pop	{r7, pc}
    9bc0:	0000a1b5 	.word	0x0000a1b5
    9bc4:	0001b448 	.word	0x0001b448
    9bc8:	00004cdd 	.word	0x00004cdd
    9bcc:	000095d9 	.word	0x000095d9
    9bd0:	00009779 	.word	0x00009779
    9bd4:	00009729 	.word	0x00009729
    9bd8:	000095b5 	.word	0x000095b5
    9bdc:	000097a9 	.word	0x000097a9
    9be0:	20000110 	.word	0x20000110
    9be4:	00009809 	.word	0x00009809
    9be8:	000097cd 	.word	0x000097cd
    9bec:	000097eb 	.word	0x000097eb
    9bf0:	00009909 	.word	0x00009909
    9bf4:	000098a5 	.word	0x000098a5
    9bf8:	00009875 	.word	0x00009875
    9bfc:	00009829 	.word	0x00009829
    9c00:	0000965d 	.word	0x0000965d
    9c04:	0000a21d 	.word	0x0000a21d
    9c08:	00009535 	.word	0x00009535
    9c0c:	00009579 	.word	0x00009579
    9c10:	000094f9 	.word	0x000094f9

00009c14 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    9c14:	b580      	push	{r7, lr}
    9c16:	b084      	sub	sp, #16
    9c18:	af00      	add	r7, sp, #0
    9c1a:	6078      	str	r0, [r7, #4]
    9c1c:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    9c1e:	6838      	ldr	r0, [r7, #0]
    9c20:	4b73      	ldr	r3, [pc, #460]	; (9df0 <_pwm_init+0x1dc>)
    9c22:	4798      	blx	r3
    9c24:	4603      	mov	r3, r0
    9c26:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    9c28:	687b      	ldr	r3, [r7, #4]
    9c2a:	683a      	ldr	r2, [r7, #0]
    9c2c:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    9c2e:	2101      	movs	r1, #1
    9c30:	6838      	ldr	r0, [r7, #0]
    9c32:	4b70      	ldr	r3, [pc, #448]	; (9df4 <_pwm_init+0x1e0>)
    9c34:	4798      	blx	r3
    9c36:	4603      	mov	r3, r0
    9c38:	f083 0301 	eor.w	r3, r3, #1
    9c3c:	b2db      	uxtb	r3, r3
    9c3e:	2b00      	cmp	r3, #0
    9c40:	d011      	beq.n	9c66 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    9c42:	2102      	movs	r1, #2
    9c44:	6838      	ldr	r0, [r7, #0]
    9c46:	4b6c      	ldr	r3, [pc, #432]	; (9df8 <_pwm_init+0x1e4>)
    9c48:	4798      	blx	r3
    9c4a:	4603      	mov	r3, r0
    9c4c:	2b00      	cmp	r3, #0
    9c4e:	d006      	beq.n	9c5e <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    9c50:	6838      	ldr	r0, [r7, #0]
    9c52:	4b6a      	ldr	r3, [pc, #424]	; (9dfc <_pwm_init+0x1e8>)
    9c54:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    9c56:	2102      	movs	r1, #2
    9c58:	6838      	ldr	r0, [r7, #0]
    9c5a:	4b69      	ldr	r3, [pc, #420]	; (9e00 <_pwm_init+0x1ec>)
    9c5c:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    9c5e:	2101      	movs	r1, #1
    9c60:	6838      	ldr	r0, [r7, #0]
    9c62:	4b68      	ldr	r3, [pc, #416]	; (9e04 <_pwm_init+0x1f0>)
    9c64:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    9c66:	2101      	movs	r1, #1
    9c68:	6838      	ldr	r0, [r7, #0]
    9c6a:	4b65      	ldr	r3, [pc, #404]	; (9e00 <_pwm_init+0x1ec>)
    9c6c:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    9c6e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c72:	4965      	ldr	r1, [pc, #404]	; (9e08 <_pwm_init+0x1f4>)
    9c74:	4613      	mov	r3, r2
    9c76:	009b      	lsls	r3, r3, #2
    9c78:	4413      	add	r3, r2
    9c7a:	009b      	lsls	r3, r3, #2
    9c7c:	440b      	add	r3, r1
    9c7e:	3304      	adds	r3, #4
    9c80:	681b      	ldr	r3, [r3, #0]
    9c82:	4619      	mov	r1, r3
    9c84:	6838      	ldr	r0, [r7, #0]
    9c86:	4b5f      	ldr	r3, [pc, #380]	; (9e04 <_pwm_init+0x1f0>)
    9c88:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    9c8a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9c8e:	495e      	ldr	r1, [pc, #376]	; (9e08 <_pwm_init+0x1f4>)
    9c90:	4613      	mov	r3, r2
    9c92:	009b      	lsls	r3, r3, #2
    9c94:	4413      	add	r3, r2
    9c96:	009b      	lsls	r3, r3, #2
    9c98:	440b      	add	r3, r1
    9c9a:	330a      	adds	r3, #10
    9c9c:	781b      	ldrb	r3, [r3, #0]
    9c9e:	4619      	mov	r1, r3
    9ca0:	6838      	ldr	r0, [r7, #0]
    9ca2:	4b5a      	ldr	r3, [pc, #360]	; (9e0c <_pwm_init+0x1f8>)
    9ca4:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    9ca6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9caa:	4957      	ldr	r1, [pc, #348]	; (9e08 <_pwm_init+0x1f4>)
    9cac:	4613      	mov	r3, r2
    9cae:	009b      	lsls	r3, r3, #2
    9cb0:	4413      	add	r3, r2
    9cb2:	009b      	lsls	r3, r3, #2
    9cb4:	440b      	add	r3, r1
    9cb6:	3308      	adds	r3, #8
    9cb8:	881b      	ldrh	r3, [r3, #0]
    9cba:	4619      	mov	r1, r3
    9cbc:	6838      	ldr	r0, [r7, #0]
    9cbe:	4b54      	ldr	r3, [pc, #336]	; (9e10 <_pwm_init+0x1fc>)
    9cc0:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    9cc2:	2103      	movs	r1, #3
    9cc4:	6838      	ldr	r0, [r7, #0]
    9cc6:	4b53      	ldr	r3, [pc, #332]	; (9e14 <_pwm_init+0x200>)
    9cc8:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    9cca:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9cce:	494e      	ldr	r1, [pc, #312]	; (9e08 <_pwm_init+0x1f4>)
    9cd0:	4613      	mov	r3, r2
    9cd2:	009b      	lsls	r3, r3, #2
    9cd4:	4413      	add	r3, r2
    9cd6:	009b      	lsls	r3, r3, #2
    9cd8:	440b      	add	r3, r1
    9cda:	3304      	adds	r3, #4
    9cdc:	681b      	ldr	r3, [r3, #0]
    9cde:	f003 030c 	and.w	r3, r3, #12
    9ce2:	2b08      	cmp	r3, #8
    9ce4:	d11e      	bne.n	9d24 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    9ce6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9cea:	4947      	ldr	r1, [pc, #284]	; (9e08 <_pwm_init+0x1f4>)
    9cec:	4613      	mov	r3, r2
    9cee:	009b      	lsls	r3, r3, #2
    9cf0:	4413      	add	r3, r2
    9cf2:	009b      	lsls	r3, r3, #2
    9cf4:	440b      	add	r3, r1
    9cf6:	330c      	adds	r3, #12
    9cf8:	681b      	ldr	r3, [r3, #0]
    9cfa:	461a      	mov	r2, r3
    9cfc:	2100      	movs	r1, #0
    9cfe:	6838      	ldr	r0, [r7, #0]
    9d00:	4b45      	ldr	r3, [pc, #276]	; (9e18 <_pwm_init+0x204>)
    9d02:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    9d04:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9d08:	493f      	ldr	r1, [pc, #252]	; (9e08 <_pwm_init+0x1f4>)
    9d0a:	4613      	mov	r3, r2
    9d0c:	009b      	lsls	r3, r3, #2
    9d0e:	4413      	add	r3, r2
    9d10:	009b      	lsls	r3, r3, #2
    9d12:	440b      	add	r3, r1
    9d14:	3310      	adds	r3, #16
    9d16:	681b      	ldr	r3, [r3, #0]
    9d18:	461a      	mov	r2, r3
    9d1a:	2101      	movs	r1, #1
    9d1c:	6838      	ldr	r0, [r7, #0]
    9d1e:	4b3e      	ldr	r3, [pc, #248]	; (9e18 <_pwm_init+0x204>)
    9d20:	4798      	blx	r3
    9d22:	e031      	b.n	9d88 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    9d24:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9d28:	4937      	ldr	r1, [pc, #220]	; (9e08 <_pwm_init+0x1f4>)
    9d2a:	4613      	mov	r3, r2
    9d2c:	009b      	lsls	r3, r3, #2
    9d2e:	4413      	add	r3, r2
    9d30:	009b      	lsls	r3, r3, #2
    9d32:	440b      	add	r3, r1
    9d34:	3304      	adds	r3, #4
    9d36:	681b      	ldr	r3, [r3, #0]
    9d38:	f003 030c 	and.w	r3, r3, #12
    9d3c:	2b00      	cmp	r3, #0
    9d3e:	d120      	bne.n	9d82 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    9d40:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9d44:	4930      	ldr	r1, [pc, #192]	; (9e08 <_pwm_init+0x1f4>)
    9d46:	4613      	mov	r3, r2
    9d48:	009b      	lsls	r3, r3, #2
    9d4a:	4413      	add	r3, r2
    9d4c:	009b      	lsls	r3, r3, #2
    9d4e:	440b      	add	r3, r1
    9d50:	330c      	adds	r3, #12
    9d52:	681b      	ldr	r3, [r3, #0]
    9d54:	b29b      	uxth	r3, r3
    9d56:	461a      	mov	r2, r3
    9d58:	2100      	movs	r1, #0
    9d5a:	6838      	ldr	r0, [r7, #0]
    9d5c:	4b2f      	ldr	r3, [pc, #188]	; (9e1c <_pwm_init+0x208>)
    9d5e:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    9d60:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9d64:	4928      	ldr	r1, [pc, #160]	; (9e08 <_pwm_init+0x1f4>)
    9d66:	4613      	mov	r3, r2
    9d68:	009b      	lsls	r3, r3, #2
    9d6a:	4413      	add	r3, r2
    9d6c:	009b      	lsls	r3, r3, #2
    9d6e:	440b      	add	r3, r1
    9d70:	3310      	adds	r3, #16
    9d72:	681b      	ldr	r3, [r3, #0]
    9d74:	b29b      	uxth	r3, r3
    9d76:	461a      	mov	r2, r3
    9d78:	2101      	movs	r1, #1
    9d7a:	6838      	ldr	r0, [r7, #0]
    9d7c:	4b27      	ldr	r3, [pc, #156]	; (9e1c <_pwm_init+0x208>)
    9d7e:	4798      	blx	r3
    9d80:	e002      	b.n	9d88 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    9d82:	f04f 33ff 	mov.w	r3, #4294967295
    9d86:	e02e      	b.n	9de6 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    9d88:	6879      	ldr	r1, [r7, #4]
    9d8a:	6838      	ldr	r0, [r7, #0]
    9d8c:	4b24      	ldr	r3, [pc, #144]	; (9e20 <_pwm_init+0x20c>)
    9d8e:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    9d90:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9d94:	491c      	ldr	r1, [pc, #112]	; (9e08 <_pwm_init+0x1f4>)
    9d96:	4613      	mov	r3, r2
    9d98:	009b      	lsls	r3, r3, #2
    9d9a:	4413      	add	r3, r2
    9d9c:	009b      	lsls	r3, r3, #2
    9d9e:	440b      	add	r3, r1
    9da0:	3302      	adds	r3, #2
    9da2:	f9b3 3000 	ldrsh.w	r3, [r3]
    9da6:	4618      	mov	r0, r3
    9da8:	4b1e      	ldr	r3, [pc, #120]	; (9e24 <_pwm_init+0x210>)
    9daa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    9dac:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9db0:	4915      	ldr	r1, [pc, #84]	; (9e08 <_pwm_init+0x1f4>)
    9db2:	4613      	mov	r3, r2
    9db4:	009b      	lsls	r3, r3, #2
    9db6:	4413      	add	r3, r2
    9db8:	009b      	lsls	r3, r3, #2
    9dba:	440b      	add	r3, r1
    9dbc:	3302      	adds	r3, #2
    9dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
    9dc2:	4618      	mov	r0, r3
    9dc4:	4b18      	ldr	r3, [pc, #96]	; (9e28 <_pwm_init+0x214>)
    9dc6:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    9dc8:	f997 200f 	ldrsb.w	r2, [r7, #15]
    9dcc:	490e      	ldr	r1, [pc, #56]	; (9e08 <_pwm_init+0x1f4>)
    9dce:	4613      	mov	r3, r2
    9dd0:	009b      	lsls	r3, r3, #2
    9dd2:	4413      	add	r3, r2
    9dd4:	009b      	lsls	r3, r3, #2
    9dd6:	440b      	add	r3, r1
    9dd8:	3302      	adds	r3, #2
    9dda:	f9b3 3000 	ldrsh.w	r3, [r3]
    9dde:	4618      	mov	r0, r3
    9de0:	4b12      	ldr	r3, [pc, #72]	; (9e2c <_pwm_init+0x218>)
    9de2:	4798      	blx	r3

	return 0;
    9de4:	2300      	movs	r3, #0
}
    9de6:	4618      	mov	r0, r3
    9de8:	3710      	adds	r7, #16
    9dea:	46bd      	mov	sp, r7
    9dec:	bd80      	pop	{r7, pc}
    9dee:	bf00      	nop
    9df0:	0000a1b5 	.word	0x0000a1b5
    9df4:	000095d9 	.word	0x000095d9
    9df8:	00009779 	.word	0x00009779
    9dfc:	00009729 	.word	0x00009729
    9e00:	000095b5 	.word	0x000095b5
    9e04:	000097a9 	.word	0x000097a9
    9e08:	20000110 	.word	0x20000110
    9e0c:	00009809 	.word	0x00009809
    9e10:	000097cd 	.word	0x000097cd
    9e14:	000097eb 	.word	0x000097eb
    9e18:	00009909 	.word	0x00009909
    9e1c:	000098a5 	.word	0x000098a5
    9e20:	0000a21d 	.word	0x0000a21d
    9e24:	00009535 	.word	0x00009535
    9e28:	00009579 	.word	0x00009579
    9e2c:	000094f9 	.word	0x000094f9

00009e30 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    9e30:	b580      	push	{r7, lr}
    9e32:	b084      	sub	sp, #16
    9e34:	af00      	add	r7, sp, #0
    9e36:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9e38:	687b      	ldr	r3, [r7, #4]
    9e3a:	68db      	ldr	r3, [r3, #12]
    9e3c:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    9e3e:	68f8      	ldr	r0, [r7, #12]
    9e40:	4b10      	ldr	r3, [pc, #64]	; (9e84 <_tc_timer_deinit+0x54>)
    9e42:	4798      	blx	r3
    9e44:	4603      	mov	r3, r0
    9e46:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    9e48:	22f9      	movs	r2, #249	; 0xf9
    9e4a:	490f      	ldr	r1, [pc, #60]	; (9e88 <_tc_timer_deinit+0x58>)
    9e4c:	2001      	movs	r0, #1
    9e4e:	4b0f      	ldr	r3, [pc, #60]	; (9e8c <_tc_timer_deinit+0x5c>)
    9e50:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    9e52:	f997 200b 	ldrsb.w	r2, [r7, #11]
    9e56:	490e      	ldr	r1, [pc, #56]	; (9e90 <_tc_timer_deinit+0x60>)
    9e58:	4613      	mov	r3, r2
    9e5a:	009b      	lsls	r3, r3, #2
    9e5c:	4413      	add	r3, r2
    9e5e:	009b      	lsls	r3, r3, #2
    9e60:	440b      	add	r3, r1
    9e62:	3302      	adds	r3, #2
    9e64:	f9b3 3000 	ldrsh.w	r3, [r3]
    9e68:	4618      	mov	r0, r3
    9e6a:	4b0a      	ldr	r3, [pc, #40]	; (9e94 <_tc_timer_deinit+0x64>)
    9e6c:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    9e6e:	68f8      	ldr	r0, [r7, #12]
    9e70:	4b09      	ldr	r3, [pc, #36]	; (9e98 <_tc_timer_deinit+0x68>)
    9e72:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    9e74:	68f8      	ldr	r0, [r7, #12]
    9e76:	4b09      	ldr	r3, [pc, #36]	; (9e9c <_tc_timer_deinit+0x6c>)
    9e78:	4798      	blx	r3
}
    9e7a:	bf00      	nop
    9e7c:	3710      	adds	r7, #16
    9e7e:	46bd      	mov	sp, r7
    9e80:	bd80      	pop	{r7, pc}
    9e82:	bf00      	nop
    9e84:	0000a1b5 	.word	0x0000a1b5
    9e88:	0001b448 	.word	0x0001b448
    9e8c:	00004cdd 	.word	0x00004cdd
    9e90:	20000110 	.word	0x20000110
    9e94:	00009535 	.word	0x00009535
    9e98:	00009729 	.word	0x00009729
    9e9c:	000096a1 	.word	0x000096a1

00009ea0 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    9ea0:	b580      	push	{r7, lr}
    9ea2:	b082      	sub	sp, #8
    9ea4:	af00      	add	r7, sp, #0
    9ea6:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    9ea8:	687b      	ldr	r3, [r7, #4]
    9eaa:	68db      	ldr	r3, [r3, #12]
    9eac:	4618      	mov	r0, r3
    9eae:	4b03      	ldr	r3, [pc, #12]	; (9ebc <_tc_timer_start+0x1c>)
    9eb0:	4798      	blx	r3
}
    9eb2:	bf00      	nop
    9eb4:	3708      	adds	r7, #8
    9eb6:	46bd      	mov	sp, r7
    9eb8:	bd80      	pop	{r7, pc}
    9eba:	bf00      	nop
    9ebc:	000096c9 	.word	0x000096c9

00009ec0 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    9ec0:	b580      	push	{r7, lr}
    9ec2:	b082      	sub	sp, #8
    9ec4:	af00      	add	r7, sp, #0
    9ec6:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    9ec8:	687b      	ldr	r3, [r7, #4]
    9eca:	68db      	ldr	r3, [r3, #12]
    9ecc:	4618      	mov	r0, r3
    9ece:	4b03      	ldr	r3, [pc, #12]	; (9edc <_tc_timer_stop+0x1c>)
    9ed0:	4798      	blx	r3
}
    9ed2:	bf00      	nop
    9ed4:	3708      	adds	r7, #8
    9ed6:	46bd      	mov	sp, r7
    9ed8:	bd80      	pop	{r7, pc}
    9eda:	bf00      	nop
    9edc:	00009729 	.word	0x00009729

00009ee0 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    9ee0:	b580      	push	{r7, lr}
    9ee2:	b084      	sub	sp, #16
    9ee4:	af00      	add	r7, sp, #0
    9ee6:	6078      	str	r0, [r7, #4]
    9ee8:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    9eea:	687b      	ldr	r3, [r7, #4]
    9eec:	68db      	ldr	r3, [r3, #12]
    9eee:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9ef0:	68f8      	ldr	r0, [r7, #12]
    9ef2:	4b14      	ldr	r3, [pc, #80]	; (9f44 <_tc_timer_set_period+0x64>)
    9ef4:	4798      	blx	r3
    9ef6:	4603      	mov	r3, r0
    9ef8:	2b02      	cmp	r3, #2
    9efa:	d105      	bne.n	9f08 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    9efc:	683a      	ldr	r2, [r7, #0]
    9efe:	2100      	movs	r1, #0
    9f00:	68f8      	ldr	r0, [r7, #12]
    9f02:	4b11      	ldr	r3, [pc, #68]	; (9f48 <_tc_timer_set_period+0x68>)
    9f04:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    9f06:	e019      	b.n	9f3c <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9f08:	68f8      	ldr	r0, [r7, #12]
    9f0a:	4b0e      	ldr	r3, [pc, #56]	; (9f44 <_tc_timer_set_period+0x64>)
    9f0c:	4798      	blx	r3
    9f0e:	4603      	mov	r3, r0
    9f10:	2b00      	cmp	r3, #0
    9f12:	d107      	bne.n	9f24 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    9f14:	683b      	ldr	r3, [r7, #0]
    9f16:	b29b      	uxth	r3, r3
    9f18:	461a      	mov	r2, r3
    9f1a:	2100      	movs	r1, #0
    9f1c:	68f8      	ldr	r0, [r7, #12]
    9f1e:	4b0b      	ldr	r3, [pc, #44]	; (9f4c <_tc_timer_set_period+0x6c>)
    9f20:	4798      	blx	r3
}
    9f22:	e00b      	b.n	9f3c <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9f24:	68f8      	ldr	r0, [r7, #12]
    9f26:	4b07      	ldr	r3, [pc, #28]	; (9f44 <_tc_timer_set_period+0x64>)
    9f28:	4798      	blx	r3
    9f2a:	4603      	mov	r3, r0
    9f2c:	2b01      	cmp	r3, #1
    9f2e:	d105      	bne.n	9f3c <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    9f30:	683b      	ldr	r3, [r7, #0]
    9f32:	b2db      	uxtb	r3, r3
    9f34:	4619      	mov	r1, r3
    9f36:	68f8      	ldr	r0, [r7, #12]
    9f38:	4b05      	ldr	r3, [pc, #20]	; (9f50 <_tc_timer_set_period+0x70>)
    9f3a:	4798      	blx	r3
}
    9f3c:	bf00      	nop
    9f3e:	3710      	adds	r7, #16
    9f40:	46bd      	mov	sp, r7
    9f42:	bd80      	pop	{r7, pc}
    9f44:	00009751 	.word	0x00009751
    9f48:	00009909 	.word	0x00009909
    9f4c:	000098a5 	.word	0x000098a5
    9f50:	00009829 	.word	0x00009829

00009f54 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    9f54:	b580      	push	{r7, lr}
    9f56:	b084      	sub	sp, #16
    9f58:	af00      	add	r7, sp, #0
    9f5a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    9f5c:	687b      	ldr	r3, [r7, #4]
    9f5e:	68db      	ldr	r3, [r3, #12]
    9f60:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9f62:	68f8      	ldr	r0, [r7, #12]
    9f64:	4b13      	ldr	r3, [pc, #76]	; (9fb4 <_tc_timer_get_period+0x60>)
    9f66:	4798      	blx	r3
    9f68:	4603      	mov	r3, r0
    9f6a:	2b02      	cmp	r3, #2
    9f6c:	d105      	bne.n	9f7a <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    9f6e:	2100      	movs	r1, #0
    9f70:	68f8      	ldr	r0, [r7, #12]
    9f72:	4b11      	ldr	r3, [pc, #68]	; (9fb8 <_tc_timer_get_period+0x64>)
    9f74:	4798      	blx	r3
    9f76:	4603      	mov	r3, r0
    9f78:	e017      	b.n	9faa <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9f7a:	68f8      	ldr	r0, [r7, #12]
    9f7c:	4b0d      	ldr	r3, [pc, #52]	; (9fb4 <_tc_timer_get_period+0x60>)
    9f7e:	4798      	blx	r3
    9f80:	4603      	mov	r3, r0
    9f82:	2b00      	cmp	r3, #0
    9f84:	d105      	bne.n	9f92 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    9f86:	2100      	movs	r1, #0
    9f88:	68f8      	ldr	r0, [r7, #12]
    9f8a:	4b0c      	ldr	r3, [pc, #48]	; (9fbc <_tc_timer_get_period+0x68>)
    9f8c:	4798      	blx	r3
    9f8e:	4603      	mov	r3, r0
    9f90:	e00b      	b.n	9faa <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    9f92:	68f8      	ldr	r0, [r7, #12]
    9f94:	4b07      	ldr	r3, [pc, #28]	; (9fb4 <_tc_timer_get_period+0x60>)
    9f96:	4798      	blx	r3
    9f98:	4603      	mov	r3, r0
    9f9a:	2b01      	cmp	r3, #1
    9f9c:	d104      	bne.n	9fa8 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    9f9e:	68f8      	ldr	r0, [r7, #12]
    9fa0:	4b07      	ldr	r3, [pc, #28]	; (9fc0 <_tc_timer_get_period+0x6c>)
    9fa2:	4798      	blx	r3
    9fa4:	4603      	mov	r3, r0
    9fa6:	e000      	b.n	9faa <_tc_timer_get_period+0x56>
	}

	return 0;
    9fa8:	2300      	movs	r3, #0
}
    9faa:	4618      	mov	r0, r3
    9fac:	3710      	adds	r7, #16
    9fae:	46bd      	mov	sp, r7
    9fb0:	bd80      	pop	{r7, pc}
    9fb2:	bf00      	nop
    9fb4:	00009751 	.word	0x00009751
    9fb8:	00009939 	.word	0x00009939
    9fbc:	000098d9 	.word	0x000098d9
    9fc0:	00009851 	.word	0x00009851

00009fc4 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    9fc4:	b580      	push	{r7, lr}
    9fc6:	b082      	sub	sp, #8
    9fc8:	af00      	add	r7, sp, #0
    9fca:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    9fcc:	687b      	ldr	r3, [r7, #4]
    9fce:	68db      	ldr	r3, [r3, #12]
    9fd0:	4618      	mov	r0, r3
    9fd2:	4b03      	ldr	r3, [pc, #12]	; (9fe0 <_tc_timer_is_started+0x1c>)
    9fd4:	4798      	blx	r3
    9fd6:	4603      	mov	r3, r0
}
    9fd8:	4618      	mov	r0, r3
    9fda:	3708      	adds	r7, #8
    9fdc:	46bd      	mov	sp, r7
    9fde:	bd80      	pop	{r7, pc}
    9fe0:	000096f1 	.word	0x000096f1

00009fe4 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    9fe4:	b480      	push	{r7}
    9fe6:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    9fe8:	4b02      	ldr	r3, [pc, #8]	; (9ff4 <_tc_get_timer+0x10>)
}
    9fea:	4618      	mov	r0, r3
    9fec:	46bd      	mov	sp, r7
    9fee:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ff2:	4770      	bx	lr
    9ff4:	20000188 	.word	0x20000188

00009ff8 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    9ff8:	b480      	push	{r7}
    9ffa:	af00      	add	r7, sp, #0
	return NULL;
    9ffc:	2300      	movs	r3, #0
}
    9ffe:	4618      	mov	r0, r3
    a000:	46bd      	mov	sp, r7
    a002:	f85d 7b04 	ldr.w	r7, [sp], #4
    a006:	4770      	bx	lr

0000a008 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    a008:	b580      	push	{r7, lr}
    a00a:	b084      	sub	sp, #16
    a00c:	af00      	add	r7, sp, #0
    a00e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a010:	687b      	ldr	r3, [r7, #4]
    a012:	68db      	ldr	r3, [r3, #12]
    a014:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    a016:	68f8      	ldr	r0, [r7, #12]
    a018:	4b0e      	ldr	r3, [pc, #56]	; (a054 <_tc_timer_set_irq+0x4c>)
    a01a:	4798      	blx	r3
    a01c:	4603      	mov	r3, r0
    a01e:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    a020:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    a024:	490c      	ldr	r1, [pc, #48]	; (a058 <_tc_timer_set_irq+0x50>)
    a026:	2001      	movs	r0, #1
    a028:	4b0c      	ldr	r3, [pc, #48]	; (a05c <_tc_timer_set_irq+0x54>)
    a02a:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    a02c:	f997 200b 	ldrsb.w	r2, [r7, #11]
    a030:	490b      	ldr	r1, [pc, #44]	; (a060 <_tc_timer_set_irq+0x58>)
    a032:	4613      	mov	r3, r2
    a034:	009b      	lsls	r3, r3, #2
    a036:	4413      	add	r3, r2
    a038:	009b      	lsls	r3, r3, #2
    a03a:	440b      	add	r3, r1
    a03c:	3302      	adds	r3, #2
    a03e:	f9b3 3000 	ldrsh.w	r3, [r3]
    a042:	b2db      	uxtb	r3, r3
    a044:	4618      	mov	r0, r3
    a046:	4b07      	ldr	r3, [pc, #28]	; (a064 <_tc_timer_set_irq+0x5c>)
    a048:	4798      	blx	r3
}
    a04a:	bf00      	nop
    a04c:	3710      	adds	r7, #16
    a04e:	46bd      	mov	sp, r7
    a050:	bd80      	pop	{r7, pc}
    a052:	bf00      	nop
    a054:	0000a1b5 	.word	0x0000a1b5
    a058:	0001b448 	.word	0x0001b448
    a05c:	00004cdd 	.word	0x00004cdd
    a060:	20000110 	.word	0x20000110
    a064:	00005b75 	.word	0x00005b75

0000a068 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    a068:	b580      	push	{r7, lr}
    a06a:	b084      	sub	sp, #16
    a06c:	af00      	add	r7, sp, #0
    a06e:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a070:	687b      	ldr	r3, [r7, #4]
    a072:	68db      	ldr	r3, [r3, #12]
    a074:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    a076:	68f8      	ldr	r0, [r7, #12]
    a078:	4b07      	ldr	r3, [pc, #28]	; (a098 <tc_interrupt_handler+0x30>)
    a07a:	4798      	blx	r3
    a07c:	4603      	mov	r3, r0
    a07e:	2b00      	cmp	r3, #0
    a080:	d006      	beq.n	a090 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    a082:	68f8      	ldr	r0, [r7, #12]
    a084:	4b05      	ldr	r3, [pc, #20]	; (a09c <tc_interrupt_handler+0x34>)
    a086:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    a088:	687b      	ldr	r3, [r7, #4]
    a08a:	681b      	ldr	r3, [r3, #0]
    a08c:	6878      	ldr	r0, [r7, #4]
    a08e:	4798      	blx	r3
	}
}
    a090:	bf00      	nop
    a092:	3710      	adds	r7, #16
    a094:	46bd      	mov	sp, r7
    a096:	bd80      	pop	{r7, pc}
    a098:	00009601 	.word	0x00009601
    a09c:	00009629 	.word	0x00009629

0000a0a0 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    a0a0:	b580      	push	{r7, lr}
    a0a2:	b084      	sub	sp, #16
    a0a4:	af00      	add	r7, sp, #0
    a0a6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    a0a8:	687b      	ldr	r3, [r7, #4]
    a0aa:	691b      	ldr	r3, [r3, #16]
    a0ac:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    a0ae:	68f8      	ldr	r0, [r7, #12]
    a0b0:	4b12      	ldr	r3, [pc, #72]	; (a0fc <tc_pwm_interrupt_handler+0x5c>)
    a0b2:	4798      	blx	r3
    a0b4:	4603      	mov	r3, r0
    a0b6:	2b00      	cmp	r3, #0
    a0b8:	d00a      	beq.n	a0d0 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    a0ba:	68f8      	ldr	r0, [r7, #12]
    a0bc:	4b10      	ldr	r3, [pc, #64]	; (a100 <tc_pwm_interrupt_handler+0x60>)
    a0be:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    a0c0:	687b      	ldr	r3, [r7, #4]
    a0c2:	681b      	ldr	r3, [r3, #0]
    a0c4:	2b00      	cmp	r3, #0
    a0c6:	d003      	beq.n	a0d0 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    a0c8:	687b      	ldr	r3, [r7, #4]
    a0ca:	681b      	ldr	r3, [r3, #0]
    a0cc:	6878      	ldr	r0, [r7, #4]
    a0ce:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    a0d0:	68f8      	ldr	r0, [r7, #12]
    a0d2:	4b0c      	ldr	r3, [pc, #48]	; (a104 <tc_pwm_interrupt_handler+0x64>)
    a0d4:	4798      	blx	r3
    a0d6:	4603      	mov	r3, r0
    a0d8:	2b00      	cmp	r3, #0
    a0da:	d00a      	beq.n	a0f2 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    a0dc:	68f8      	ldr	r0, [r7, #12]
    a0de:	4b0a      	ldr	r3, [pc, #40]	; (a108 <tc_pwm_interrupt_handler+0x68>)
    a0e0:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    a0e2:	687b      	ldr	r3, [r7, #4]
    a0e4:	685b      	ldr	r3, [r3, #4]
    a0e6:	2b00      	cmp	r3, #0
    a0e8:	d003      	beq.n	a0f2 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    a0ea:	687b      	ldr	r3, [r7, #4]
    a0ec:	685b      	ldr	r3, [r3, #4]
    a0ee:	6878      	ldr	r0, [r7, #4]
    a0f0:	4798      	blx	r3
		}
	}
}
    a0f2:	bf00      	nop
    a0f4:	3710      	adds	r7, #16
    a0f6:	46bd      	mov	sp, r7
    a0f8:	bd80      	pop	{r7, pc}
    a0fa:	bf00      	nop
    a0fc:	00009601 	.word	0x00009601
    a100:	00009629 	.word	0x00009629
    a104:	00009677 	.word	0x00009677
    a108:	00009643 	.word	0x00009643

0000a10c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    a10c:	b580      	push	{r7, lr}
    a10e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    a110:	4b03      	ldr	r3, [pc, #12]	; (a120 <TC0_Handler+0x14>)
    a112:	681b      	ldr	r3, [r3, #0]
    a114:	4618      	mov	r0, r3
    a116:	4b03      	ldr	r3, [pc, #12]	; (a124 <TC0_Handler+0x18>)
    a118:	4798      	blx	r3
}
    a11a:	bf00      	nop
    a11c:	bd80      	pop	{r7, pc}
    a11e:	bf00      	nop
    a120:	20002354 	.word	0x20002354
    a124:	0000a069 	.word	0x0000a069

0000a128 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    a128:	b580      	push	{r7, lr}
    a12a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    a12c:	4b03      	ldr	r3, [pc, #12]	; (a13c <TC2_Handler+0x14>)
    a12e:	681b      	ldr	r3, [r3, #0]
    a130:	4618      	mov	r0, r3
    a132:	4b03      	ldr	r3, [pc, #12]	; (a140 <TC2_Handler+0x18>)
    a134:	4798      	blx	r3
}
    a136:	bf00      	nop
    a138:	bd80      	pop	{r7, pc}
    a13a:	bf00      	nop
    a13c:	20002358 	.word	0x20002358
    a140:	0000a069 	.word	0x0000a069

0000a144 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    a144:	b580      	push	{r7, lr}
    a146:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    a148:	4b03      	ldr	r3, [pc, #12]	; (a158 <TC4_Handler+0x14>)
    a14a:	681b      	ldr	r3, [r3, #0]
    a14c:	4618      	mov	r0, r3
    a14e:	4b03      	ldr	r3, [pc, #12]	; (a15c <TC4_Handler+0x18>)
    a150:	4798      	blx	r3
}
    a152:	bf00      	nop
    a154:	bd80      	pop	{r7, pc}
    a156:	bf00      	nop
    a158:	2000235c 	.word	0x2000235c
    a15c:	0000a069 	.word	0x0000a069

0000a160 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    a160:	b580      	push	{r7, lr}
    a162:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    a164:	4b03      	ldr	r3, [pc, #12]	; (a174 <TC5_Handler+0x14>)
    a166:	681b      	ldr	r3, [r3, #0]
    a168:	4618      	mov	r0, r3
    a16a:	4b03      	ldr	r3, [pc, #12]	; (a178 <TC5_Handler+0x18>)
    a16c:	4798      	blx	r3
}
    a16e:	bf00      	nop
    a170:	bd80      	pop	{r7, pc}
    a172:	bf00      	nop
    a174:	20002360 	.word	0x20002360
    a178:	0000a069 	.word	0x0000a069

0000a17c <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    a17c:	b580      	push	{r7, lr}
    a17e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    a180:	4b03      	ldr	r3, [pc, #12]	; (a190 <TC6_Handler+0x14>)
    a182:	681b      	ldr	r3, [r3, #0]
    a184:	4618      	mov	r0, r3
    a186:	4b03      	ldr	r3, [pc, #12]	; (a194 <TC6_Handler+0x18>)
    a188:	4798      	blx	r3
}
    a18a:	bf00      	nop
    a18c:	bd80      	pop	{r7, pc}
    a18e:	bf00      	nop
    a190:	20002364 	.word	0x20002364
    a194:	0000a069 	.word	0x0000a069

0000a198 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    a198:	b580      	push	{r7, lr}
    a19a:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    a19c:	4b03      	ldr	r3, [pc, #12]	; (a1ac <TC7_Handler+0x14>)
    a19e:	681b      	ldr	r3, [r3, #0]
    a1a0:	4618      	mov	r0, r3
    a1a2:	4b03      	ldr	r3, [pc, #12]	; (a1b0 <TC7_Handler+0x18>)
    a1a4:	4798      	blx	r3
}
    a1a6:	bf00      	nop
    a1a8:	bd80      	pop	{r7, pc}
    a1aa:	bf00      	nop
    a1ac:	20002368 	.word	0x20002368
    a1b0:	0000a0a1 	.word	0x0000a0a1

0000a1b4 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    a1b4:	b580      	push	{r7, lr}
    a1b6:	b084      	sub	sp, #16
    a1b8:	af00      	add	r7, sp, #0
    a1ba:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    a1bc:	6878      	ldr	r0, [r7, #4]
    a1be:	4b13      	ldr	r3, [pc, #76]	; (a20c <get_tc_index+0x58>)
    a1c0:	4798      	blx	r3
    a1c2:	4603      	mov	r3, r0
    a1c4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    a1c6:	2300      	movs	r3, #0
    a1c8:	73fb      	strb	r3, [r7, #15]
    a1ca:	e010      	b.n	a1ee <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    a1cc:	7bfa      	ldrb	r2, [r7, #15]
    a1ce:	4910      	ldr	r1, [pc, #64]	; (a210 <get_tc_index+0x5c>)
    a1d0:	4613      	mov	r3, r2
    a1d2:	009b      	lsls	r3, r3, #2
    a1d4:	4413      	add	r3, r2
    a1d6:	009b      	lsls	r3, r3, #2
    a1d8:	440b      	add	r3, r1
    a1da:	781b      	ldrb	r3, [r3, #0]
    a1dc:	7bba      	ldrb	r2, [r7, #14]
    a1de:	429a      	cmp	r2, r3
    a1e0:	d102      	bne.n	a1e8 <get_tc_index+0x34>
			return i;
    a1e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    a1e6:	e00d      	b.n	a204 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    a1e8:	7bfb      	ldrb	r3, [r7, #15]
    a1ea:	3301      	adds	r3, #1
    a1ec:	73fb      	strb	r3, [r7, #15]
    a1ee:	7bfb      	ldrb	r3, [r7, #15]
    a1f0:	2b05      	cmp	r3, #5
    a1f2:	d9eb      	bls.n	a1cc <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    a1f4:	f240 221d 	movw	r2, #541	; 0x21d
    a1f8:	4906      	ldr	r1, [pc, #24]	; (a214 <get_tc_index+0x60>)
    a1fa:	2000      	movs	r0, #0
    a1fc:	4b06      	ldr	r3, [pc, #24]	; (a218 <get_tc_index+0x64>)
    a1fe:	4798      	blx	r3
	return -1;
    a200:	f04f 33ff 	mov.w	r3, #4294967295
}
    a204:	4618      	mov	r0, r3
    a206:	3710      	adds	r7, #16
    a208:	46bd      	mov	sp, r7
    a20a:	bd80      	pop	{r7, pc}
    a20c:	0000a2b9 	.word	0x0000a2b9
    a210:	20000110 	.word	0x20000110
    a214:	0001b448 	.word	0x0001b448
    a218:	00004cdd 	.word	0x00004cdd

0000a21c <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    a21c:	b480      	push	{r7}
    a21e:	b083      	sub	sp, #12
    a220:	af00      	add	r7, sp, #0
    a222:	6078      	str	r0, [r7, #4]
    a224:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    a226:	687b      	ldr	r3, [r7, #4]
    a228:	4a17      	ldr	r2, [pc, #92]	; (a288 <_tc_init_irq_param+0x6c>)
    a22a:	4293      	cmp	r3, r2
    a22c:	d102      	bne.n	a234 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    a22e:	4a17      	ldr	r2, [pc, #92]	; (a28c <_tc_init_irq_param+0x70>)
    a230:	683b      	ldr	r3, [r7, #0]
    a232:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    a234:	687b      	ldr	r3, [r7, #4]
    a236:	4a16      	ldr	r2, [pc, #88]	; (a290 <_tc_init_irq_param+0x74>)
    a238:	4293      	cmp	r3, r2
    a23a:	d102      	bne.n	a242 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    a23c:	4a15      	ldr	r2, [pc, #84]	; (a294 <_tc_init_irq_param+0x78>)
    a23e:	683b      	ldr	r3, [r7, #0]
    a240:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    a242:	687b      	ldr	r3, [r7, #4]
    a244:	4a14      	ldr	r2, [pc, #80]	; (a298 <_tc_init_irq_param+0x7c>)
    a246:	4293      	cmp	r3, r2
    a248:	d102      	bne.n	a250 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    a24a:	4a14      	ldr	r2, [pc, #80]	; (a29c <_tc_init_irq_param+0x80>)
    a24c:	683b      	ldr	r3, [r7, #0]
    a24e:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    a250:	687b      	ldr	r3, [r7, #4]
    a252:	4a13      	ldr	r2, [pc, #76]	; (a2a0 <_tc_init_irq_param+0x84>)
    a254:	4293      	cmp	r3, r2
    a256:	d102      	bne.n	a25e <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    a258:	4a12      	ldr	r2, [pc, #72]	; (a2a4 <_tc_init_irq_param+0x88>)
    a25a:	683b      	ldr	r3, [r7, #0]
    a25c:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    a25e:	687b      	ldr	r3, [r7, #4]
    a260:	4a11      	ldr	r2, [pc, #68]	; (a2a8 <_tc_init_irq_param+0x8c>)
    a262:	4293      	cmp	r3, r2
    a264:	d102      	bne.n	a26c <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    a266:	4a11      	ldr	r2, [pc, #68]	; (a2ac <_tc_init_irq_param+0x90>)
    a268:	683b      	ldr	r3, [r7, #0]
    a26a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    a26c:	687b      	ldr	r3, [r7, #4]
    a26e:	4a10      	ldr	r2, [pc, #64]	; (a2b0 <_tc_init_irq_param+0x94>)
    a270:	4293      	cmp	r3, r2
    a272:	d102      	bne.n	a27a <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    a274:	4a0f      	ldr	r2, [pc, #60]	; (a2b4 <_tc_init_irq_param+0x98>)
    a276:	683b      	ldr	r3, [r7, #0]
    a278:	6013      	str	r3, [r2, #0]
	}
}
    a27a:	bf00      	nop
    a27c:	370c      	adds	r7, #12
    a27e:	46bd      	mov	sp, r7
    a280:	f85d 7b04 	ldr.w	r7, [sp], #4
    a284:	4770      	bx	lr
    a286:	bf00      	nop
    a288:	40003800 	.word	0x40003800
    a28c:	20002354 	.word	0x20002354
    a290:	4101a000 	.word	0x4101a000
    a294:	20002358 	.word	0x20002358
    a298:	42001400 	.word	0x42001400
    a29c:	2000235c 	.word	0x2000235c
    a2a0:	42001800 	.word	0x42001800
    a2a4:	20002360 	.word	0x20002360
    a2a8:	43001400 	.word	0x43001400
    a2ac:	20002364 	.word	0x20002364
    a2b0:	43001800 	.word	0x43001800
    a2b4:	20002368 	.word	0x20002368

0000a2b8 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    a2b8:	b4b0      	push	{r4, r5, r7}
    a2ba:	b08d      	sub	sp, #52	; 0x34
    a2bc:	af00      	add	r7, sp, #0
    a2be:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    a2c0:	4b13      	ldr	r3, [pc, #76]	; (a310 <_get_hardware_offset+0x58>)
    a2c2:	f107 040c 	add.w	r4, r7, #12
    a2c6:	461d      	mov	r5, r3
    a2c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a2ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a2cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a2d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    a2d4:	2300      	movs	r3, #0
    a2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    a2d8:	e010      	b.n	a2fc <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    a2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a2dc:	009b      	lsls	r3, r3, #2
    a2de:	f107 0230 	add.w	r2, r7, #48	; 0x30
    a2e2:	4413      	add	r3, r2
    a2e4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    a2e8:	461a      	mov	r2, r3
    a2ea:	687b      	ldr	r3, [r7, #4]
    a2ec:	429a      	cmp	r2, r3
    a2ee:	d102      	bne.n	a2f6 <_get_hardware_offset+0x3e>
			return i;
    a2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a2f2:	b2db      	uxtb	r3, r3
    a2f4:	e006      	b.n	a304 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a2f8:	3301      	adds	r3, #1
    a2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    a2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a2fe:	2b07      	cmp	r3, #7
    a300:	d9eb      	bls.n	a2da <_get_hardware_offset+0x22>
		}
	}
	return 0;
    a302:	2300      	movs	r3, #0
}
    a304:	4618      	mov	r0, r3
    a306:	3734      	adds	r7, #52	; 0x34
    a308:	46bd      	mov	sp, r7
    a30a:	bcb0      	pop	{r4, r5, r7}
    a30c:	4770      	bx	lr
    a30e:	bf00      	nop
    a310:	0001b45c 	.word	0x0001b45c

0000a314 <__NVIC_EnableIRQ>:
{
    a314:	b480      	push	{r7}
    a316:	b083      	sub	sp, #12
    a318:	af00      	add	r7, sp, #0
    a31a:	4603      	mov	r3, r0
    a31c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    a31e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a322:	2b00      	cmp	r3, #0
    a324:	db0b      	blt.n	a33e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a326:	4909      	ldr	r1, [pc, #36]	; (a34c <__NVIC_EnableIRQ+0x38>)
    a328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    a32c:	095b      	lsrs	r3, r3, #5
    a32e:	88fa      	ldrh	r2, [r7, #6]
    a330:	f002 021f 	and.w	r2, r2, #31
    a334:	2001      	movs	r0, #1
    a336:	fa00 f202 	lsl.w	r2, r0, r2
    a33a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a33e:	bf00      	nop
    a340:	370c      	adds	r7, #12
    a342:	46bd      	mov	sp, r7
    a344:	f85d 7b04 	ldr.w	r7, [sp], #4
    a348:	4770      	bx	lr
    a34a:	bf00      	nop
    a34c:	e000e100 	.word	0xe000e100

0000a350 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    a350:	b480      	push	{r7}
    a352:	b087      	sub	sp, #28
    a354:	af00      	add	r7, sp, #0
    a356:	60f8      	str	r0, [r7, #12]
    a358:	460b      	mov	r3, r1
    a35a:	607a      	str	r2, [r7, #4]
    a35c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    a35e:	7afa      	ldrb	r2, [r7, #11]
    a360:	68f9      	ldr	r1, [r7, #12]
    a362:	4613      	mov	r3, r2
    a364:	009b      	lsls	r3, r3, #2
    a366:	4413      	add	r3, r2
    a368:	009b      	lsls	r3, r3, #2
    a36a:	440b      	add	r3, r1
    a36c:	3340      	adds	r3, #64	; 0x40
    a36e:	681b      	ldr	r3, [r3, #0]
    a370:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    a372:	697a      	ldr	r2, [r7, #20]
    a374:	687b      	ldr	r3, [r7, #4]
    a376:	4013      	ands	r3, r2
    a378:	617b      	str	r3, [r7, #20]
	return tmp;
    a37a:	697b      	ldr	r3, [r7, #20]
}
    a37c:	4618      	mov	r0, r3
    a37e:	371c      	adds	r7, #28
    a380:	46bd      	mov	sp, r7
    a382:	f85d 7b04 	ldr.w	r7, [sp], #4
    a386:	4770      	bx	lr

0000a388 <hri_oscctrl_get_STATUS_reg>:
{
    a388:	b480      	push	{r7}
    a38a:	b085      	sub	sp, #20
    a38c:	af00      	add	r7, sp, #0
    a38e:	6078      	str	r0, [r7, #4]
    a390:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    a392:	687b      	ldr	r3, [r7, #4]
    a394:	691b      	ldr	r3, [r3, #16]
    a396:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    a398:	68fa      	ldr	r2, [r7, #12]
    a39a:	683b      	ldr	r3, [r7, #0]
    a39c:	4013      	ands	r3, r2
    a39e:	60fb      	str	r3, [r7, #12]
	return tmp;
    a3a0:	68fb      	ldr	r3, [r7, #12]
}
    a3a2:	4618      	mov	r0, r3
    a3a4:	3714      	adds	r7, #20
    a3a6:	46bd      	mov	sp, r7
    a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3ac:	4770      	bx	lr

0000a3ae <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    a3ae:	b480      	push	{r7}
    a3b0:	b085      	sub	sp, #20
    a3b2:	af00      	add	r7, sp, #0
    a3b4:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    a3b6:	687b      	ldr	r3, [r7, #4]
    a3b8:	f893 3020 	ldrb.w	r3, [r3, #32]
    a3bc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    a3be:	7bfb      	ldrb	r3, [r7, #15]
    a3c0:	f003 0301 	and.w	r3, r3, #1
    a3c4:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    a3c6:	7bfb      	ldrb	r3, [r7, #15]
    a3c8:	2b00      	cmp	r3, #0
    a3ca:	bf14      	ite	ne
    a3cc:	2301      	movne	r3, #1
    a3ce:	2300      	moveq	r3, #0
    a3d0:	b2db      	uxtb	r3, r3
}
    a3d2:	4618      	mov	r0, r3
    a3d4:	3714      	adds	r7, #20
    a3d6:	46bd      	mov	sp, r7
    a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3dc:	4770      	bx	lr

0000a3de <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    a3de:	b480      	push	{r7}
    a3e0:	b083      	sub	sp, #12
    a3e2:	af00      	add	r7, sp, #0
    a3e4:	6078      	str	r0, [r7, #4]
    a3e6:	460b      	mov	r3, r1
    a3e8:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    a3ea:	bf00      	nop
    a3ec:	687b      	ldr	r3, [r7, #4]
    a3ee:	789b      	ldrb	r3, [r3, #2]
    a3f0:	b2da      	uxtb	r2, r3
    a3f2:	78fb      	ldrb	r3, [r7, #3]
    a3f4:	4013      	ands	r3, r2
    a3f6:	b2db      	uxtb	r3, r3
    a3f8:	2b00      	cmp	r3, #0
    a3fa:	d1f7      	bne.n	a3ec <hri_usb_wait_for_sync+0xe>
	};
}
    a3fc:	bf00      	nop
    a3fe:	370c      	adds	r7, #12
    a400:	46bd      	mov	sp, r7
    a402:	f85d 7b04 	ldr.w	r7, [sp], #4
    a406:	4770      	bx	lr

0000a408 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    a408:	b480      	push	{r7}
    a40a:	b083      	sub	sp, #12
    a40c:	af00      	add	r7, sp, #0
    a40e:	6078      	str	r0, [r7, #4]
    a410:	460b      	mov	r3, r1
    a412:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    a414:	687b      	ldr	r3, [r7, #4]
    a416:	789b      	ldrb	r3, [r3, #2]
    a418:	b2da      	uxtb	r2, r3
    a41a:	78fb      	ldrb	r3, [r7, #3]
    a41c:	4013      	ands	r3, r2
    a41e:	b2db      	uxtb	r3, r3
    a420:	2b00      	cmp	r3, #0
    a422:	bf14      	ite	ne
    a424:	2301      	movne	r3, #1
    a426:	2300      	moveq	r3, #0
    a428:	b2db      	uxtb	r3, r3
}
    a42a:	4618      	mov	r0, r3
    a42c:	370c      	adds	r7, #12
    a42e:	46bd      	mov	sp, r7
    a430:	f85d 7b04 	ldr.w	r7, [sp], #4
    a434:	4770      	bx	lr

0000a436 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    a436:	b480      	push	{r7}
    a438:	b085      	sub	sp, #20
    a43a:	af00      	add	r7, sp, #0
    a43c:	6078      	str	r0, [r7, #4]
    a43e:	460b      	mov	r3, r1
    a440:	70fb      	strb	r3, [r7, #3]
    a442:	4613      	mov	r3, r2
    a444:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    a446:	78fb      	ldrb	r3, [r7, #3]
    a448:	687a      	ldr	r2, [r7, #4]
    a44a:	3308      	adds	r3, #8
    a44c:	015b      	lsls	r3, r3, #5
    a44e:	4413      	add	r3, r2
    a450:	3307      	adds	r3, #7
    a452:	781b      	ldrb	r3, [r3, #0]
    a454:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a456:	7bfa      	ldrb	r2, [r7, #15]
    a458:	78bb      	ldrb	r3, [r7, #2]
    a45a:	4013      	ands	r3, r2
    a45c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a45e:	7bfb      	ldrb	r3, [r7, #15]
}
    a460:	4618      	mov	r0, r3
    a462:	3714      	adds	r7, #20
    a464:	46bd      	mov	sp, r7
    a466:	f85d 7b04 	ldr.w	r7, [sp], #4
    a46a:	4770      	bx	lr

0000a46c <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    a46c:	b480      	push	{r7}
    a46e:	b083      	sub	sp, #12
    a470:	af00      	add	r7, sp, #0
    a472:	6078      	str	r0, [r7, #4]
    a474:	460b      	mov	r3, r1
    a476:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    a478:	78fb      	ldrb	r3, [r7, #3]
    a47a:	687a      	ldr	r2, [r7, #4]
    a47c:	3308      	adds	r3, #8
    a47e:	015b      	lsls	r3, r3, #5
    a480:	4413      	add	r3, r2
    a482:	3307      	adds	r3, #7
    a484:	781b      	ldrb	r3, [r3, #0]
    a486:	b2db      	uxtb	r3, r3
}
    a488:	4618      	mov	r0, r3
    a48a:	370c      	adds	r7, #12
    a48c:	46bd      	mov	sp, r7
    a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a492:	4770      	bx	lr

0000a494 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    a494:	b480      	push	{r7}
    a496:	b083      	sub	sp, #12
    a498:	af00      	add	r7, sp, #0
    a49a:	6078      	str	r0, [r7, #4]
    a49c:	460b      	mov	r3, r1
    a49e:	70fb      	strb	r3, [r7, #3]
    a4a0:	4613      	mov	r3, r2
    a4a2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    a4a4:	78fb      	ldrb	r3, [r7, #3]
    a4a6:	687a      	ldr	r2, [r7, #4]
    a4a8:	3308      	adds	r3, #8
    a4aa:	015b      	lsls	r3, r3, #5
    a4ac:	4413      	add	r3, r2
    a4ae:	3307      	adds	r3, #7
    a4b0:	78ba      	ldrb	r2, [r7, #2]
    a4b2:	701a      	strb	r2, [r3, #0]
}
    a4b4:	bf00      	nop
    a4b6:	370c      	adds	r7, #12
    a4b8:	46bd      	mov	sp, r7
    a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4be:	4770      	bx	lr

0000a4c0 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    a4c0:	b480      	push	{r7}
    a4c2:	b083      	sub	sp, #12
    a4c4:	af00      	add	r7, sp, #0
    a4c6:	6078      	str	r0, [r7, #4]
    a4c8:	460b      	mov	r3, r1
    a4ca:	70fb      	strb	r3, [r7, #3]
    a4cc:	4613      	mov	r3, r2
    a4ce:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    a4d0:	78fb      	ldrb	r3, [r7, #3]
    a4d2:	687a      	ldr	r2, [r7, #4]
    a4d4:	3308      	adds	r3, #8
    a4d6:	015b      	lsls	r3, r3, #5
    a4d8:	4413      	add	r3, r2
    a4da:	3305      	adds	r3, #5
    a4dc:	78ba      	ldrb	r2, [r7, #2]
    a4de:	701a      	strb	r2, [r3, #0]
}
    a4e0:	bf00      	nop
    a4e2:	370c      	adds	r7, #12
    a4e4:	46bd      	mov	sp, r7
    a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4ea:	4770      	bx	lr

0000a4ec <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    a4ec:	b480      	push	{r7}
    a4ee:	b083      	sub	sp, #12
    a4f0:	af00      	add	r7, sp, #0
    a4f2:	6078      	str	r0, [r7, #4]
    a4f4:	460b      	mov	r3, r1
    a4f6:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    a4f8:	78fb      	ldrb	r3, [r7, #3]
    a4fa:	687a      	ldr	r2, [r7, #4]
    a4fc:	3308      	adds	r3, #8
    a4fe:	015b      	lsls	r3, r3, #5
    a500:	4413      	add	r3, r2
    a502:	3306      	adds	r3, #6
    a504:	781b      	ldrb	r3, [r3, #0]
    a506:	b2db      	uxtb	r3, r3
}
    a508:	4618      	mov	r0, r3
    a50a:	370c      	adds	r7, #12
    a50c:	46bd      	mov	sp, r7
    a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a512:	4770      	bx	lr

0000a514 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    a514:	b480      	push	{r7}
    a516:	b083      	sub	sp, #12
    a518:	af00      	add	r7, sp, #0
    a51a:	6078      	str	r0, [r7, #4]
    a51c:	460b      	mov	r3, r1
    a51e:	70fb      	strb	r3, [r7, #3]
    a520:	4613      	mov	r3, r2
    a522:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    a524:	78fb      	ldrb	r3, [r7, #3]
    a526:	687a      	ldr	r2, [r7, #4]
    a528:	3308      	adds	r3, #8
    a52a:	015b      	lsls	r3, r3, #5
    a52c:	4413      	add	r3, r2
    a52e:	3304      	adds	r3, #4
    a530:	78ba      	ldrb	r2, [r7, #2]
    a532:	701a      	strb	r2, [r3, #0]
}
    a534:	bf00      	nop
    a536:	370c      	adds	r7, #12
    a538:	46bd      	mov	sp, r7
    a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a53e:	4770      	bx	lr

0000a540 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    a540:	b480      	push	{r7}
    a542:	b083      	sub	sp, #12
    a544:	af00      	add	r7, sp, #0
    a546:	6078      	str	r0, [r7, #4]
    a548:	460b      	mov	r3, r1
    a54a:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    a54c:	78fb      	ldrb	r3, [r7, #3]
    a54e:	687a      	ldr	r2, [r7, #4]
    a550:	015b      	lsls	r3, r3, #5
    a552:	4413      	add	r3, r2
    a554:	f503 7384 	add.w	r3, r3, #264	; 0x108
    a558:	2210      	movs	r2, #16
    a55a:	701a      	strb	r2, [r3, #0]
}
    a55c:	bf00      	nop
    a55e:	370c      	adds	r7, #12
    a560:	46bd      	mov	sp, r7
    a562:	f85d 7b04 	ldr.w	r7, [sp], #4
    a566:	4770      	bx	lr

0000a568 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    a568:	b480      	push	{r7}
    a56a:	b083      	sub	sp, #12
    a56c:	af00      	add	r7, sp, #0
    a56e:	6078      	str	r0, [r7, #4]
    a570:	460b      	mov	r3, r1
    a572:	70fb      	strb	r3, [r7, #3]
    a574:	4613      	mov	r3, r2
    a576:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    a578:	78fb      	ldrb	r3, [r7, #3]
    a57a:	687a      	ldr	r2, [r7, #4]
    a57c:	015b      	lsls	r3, r3, #5
    a57e:	4413      	add	r3, r2
    a580:	f203 1309 	addw	r3, r3, #265	; 0x109
    a584:	78ba      	ldrb	r2, [r7, #2]
    a586:	701a      	strb	r2, [r3, #0]
}
    a588:	bf00      	nop
    a58a:	370c      	adds	r7, #12
    a58c:	46bd      	mov	sp, r7
    a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a592:	4770      	bx	lr

0000a594 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    a594:	b480      	push	{r7}
    a596:	b083      	sub	sp, #12
    a598:	af00      	add	r7, sp, #0
    a59a:	6078      	str	r0, [r7, #4]
    a59c:	460b      	mov	r3, r1
    a59e:	70fb      	strb	r3, [r7, #3]
    a5a0:	4613      	mov	r3, r2
    a5a2:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    a5a4:	78fb      	ldrb	r3, [r7, #3]
    a5a6:	687a      	ldr	r2, [r7, #4]
    a5a8:	015b      	lsls	r3, r3, #5
    a5aa:	4413      	add	r3, r2
    a5ac:	f503 7384 	add.w	r3, r3, #264	; 0x108
    a5b0:	78ba      	ldrb	r2, [r7, #2]
    a5b2:	701a      	strb	r2, [r3, #0]
}
    a5b4:	bf00      	nop
    a5b6:	370c      	adds	r7, #12
    a5b8:	46bd      	mov	sp, r7
    a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5be:	4770      	bx	lr

0000a5c0 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    a5c0:	b480      	push	{r7}
    a5c2:	b085      	sub	sp, #20
    a5c4:	af00      	add	r7, sp, #0
    a5c6:	6078      	str	r0, [r7, #4]
    a5c8:	460b      	mov	r3, r1
    a5ca:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a5cc:	78fb      	ldrb	r3, [r7, #3]
    a5ce:	687a      	ldr	r2, [r7, #4]
    a5d0:	3308      	adds	r3, #8
    a5d2:	015b      	lsls	r3, r3, #5
    a5d4:	4413      	add	r3, r2
    a5d6:	781b      	ldrb	r3, [r3, #0]
    a5d8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    a5da:	7bfb      	ldrb	r3, [r7, #15]
    a5dc:	f003 0307 	and.w	r3, r3, #7
    a5e0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a5e2:	7bfb      	ldrb	r3, [r7, #15]
}
    a5e4:	4618      	mov	r0, r3
    a5e6:	3714      	adds	r7, #20
    a5e8:	46bd      	mov	sp, r7
    a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5ee:	4770      	bx	lr

0000a5f0 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    a5f0:	b480      	push	{r7}
    a5f2:	b085      	sub	sp, #20
    a5f4:	af00      	add	r7, sp, #0
    a5f6:	6078      	str	r0, [r7, #4]
    a5f8:	460b      	mov	r3, r1
    a5fa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a5fc:	78fb      	ldrb	r3, [r7, #3]
    a5fe:	687a      	ldr	r2, [r7, #4]
    a600:	3308      	adds	r3, #8
    a602:	015b      	lsls	r3, r3, #5
    a604:	4413      	add	r3, r2
    a606:	781b      	ldrb	r3, [r3, #0]
    a608:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    a60a:	7bfb      	ldrb	r3, [r7, #15]
    a60c:	091b      	lsrs	r3, r3, #4
    a60e:	b2db      	uxtb	r3, r3
    a610:	f003 0307 	and.w	r3, r3, #7
    a614:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a616:	7bfb      	ldrb	r3, [r7, #15]
}
    a618:	4618      	mov	r0, r3
    a61a:	3714      	adds	r7, #20
    a61c:	46bd      	mov	sp, r7
    a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a622:	4770      	bx	lr

0000a624 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    a624:	b480      	push	{r7}
    a626:	b083      	sub	sp, #12
    a628:	af00      	add	r7, sp, #0
    a62a:	6078      	str	r0, [r7, #4]
    a62c:	460b      	mov	r3, r1
    a62e:	70fb      	strb	r3, [r7, #3]
    a630:	4613      	mov	r3, r2
    a632:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    a634:	78fb      	ldrb	r3, [r7, #3]
    a636:	687a      	ldr	r2, [r7, #4]
    a638:	3308      	adds	r3, #8
    a63a:	015b      	lsls	r3, r3, #5
    a63c:	4413      	add	r3, r2
    a63e:	78ba      	ldrb	r2, [r7, #2]
    a640:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    a642:	bf00      	nop
    a644:	370c      	adds	r7, #12
    a646:	46bd      	mov	sp, r7
    a648:	f85d 7b04 	ldr.w	r7, [sp], #4
    a64c:	4770      	bx	lr

0000a64e <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    a64e:	b480      	push	{r7}
    a650:	b083      	sub	sp, #12
    a652:	af00      	add	r7, sp, #0
    a654:	6078      	str	r0, [r7, #4]
    a656:	460b      	mov	r3, r1
    a658:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    a65a:	78fb      	ldrb	r3, [r7, #3]
    a65c:	687a      	ldr	r2, [r7, #4]
    a65e:	3308      	adds	r3, #8
    a660:	015b      	lsls	r3, r3, #5
    a662:	4413      	add	r3, r2
    a664:	781b      	ldrb	r3, [r3, #0]
    a666:	b2db      	uxtb	r3, r3
}
    a668:	4618      	mov	r0, r3
    a66a:	370c      	adds	r7, #12
    a66c:	46bd      	mov	sp, r7
    a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a672:	4770      	bx	lr

0000a674 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    a674:	b480      	push	{r7}
    a676:	b083      	sub	sp, #12
    a678:	af00      	add	r7, sp, #0
    a67a:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    a67c:	687b      	ldr	r3, [r7, #4]
    a67e:	8b9b      	ldrh	r3, [r3, #28]
    a680:	b29b      	uxth	r3, r3
}
    a682:	4618      	mov	r0, r3
    a684:	370c      	adds	r7, #12
    a686:	46bd      	mov	sp, r7
    a688:	f85d 7b04 	ldr.w	r7, [sp], #4
    a68c:	4770      	bx	lr

0000a68e <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    a68e:	b480      	push	{r7}
    a690:	b083      	sub	sp, #12
    a692:	af00      	add	r7, sp, #0
    a694:	6078      	str	r0, [r7, #4]
    a696:	460b      	mov	r3, r1
    a698:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    a69a:	687b      	ldr	r3, [r7, #4]
    a69c:	887a      	ldrh	r2, [r7, #2]
    a69e:	839a      	strh	r2, [r3, #28]
}
    a6a0:	bf00      	nop
    a6a2:	370c      	adds	r7, #12
    a6a4:	46bd      	mov	sp, r7
    a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6aa:	4770      	bx	lr

0000a6ac <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    a6ac:	b480      	push	{r7}
    a6ae:	b083      	sub	sp, #12
    a6b0:	af00      	add	r7, sp, #0
    a6b2:	6078      	str	r0, [r7, #4]
    a6b4:	460b      	mov	r3, r1
    a6b6:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    a6b8:	687b      	ldr	r3, [r7, #4]
    a6ba:	887a      	ldrh	r2, [r7, #2]
    a6bc:	831a      	strh	r2, [r3, #24]
}
    a6be:	bf00      	nop
    a6c0:	370c      	adds	r7, #12
    a6c2:	46bd      	mov	sp, r7
    a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6c8:	4770      	bx	lr

0000a6ca <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    a6ca:	b480      	push	{r7}
    a6cc:	b083      	sub	sp, #12
    a6ce:	af00      	add	r7, sp, #0
    a6d0:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    a6d2:	687b      	ldr	r3, [r7, #4]
    a6d4:	8b1b      	ldrh	r3, [r3, #24]
    a6d6:	b29b      	uxth	r3, r3
}
    a6d8:	4618      	mov	r0, r3
    a6da:	370c      	adds	r7, #12
    a6dc:	46bd      	mov	sp, r7
    a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6e2:	4770      	bx	lr

0000a6e4 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    a6e4:	b480      	push	{r7}
    a6e6:	b083      	sub	sp, #12
    a6e8:	af00      	add	r7, sp, #0
    a6ea:	6078      	str	r0, [r7, #4]
    a6ec:	460b      	mov	r3, r1
    a6ee:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    a6f0:	687b      	ldr	r3, [r7, #4]
    a6f2:	887a      	ldrh	r2, [r7, #2]
    a6f4:	829a      	strh	r2, [r3, #20]
}
    a6f6:	bf00      	nop
    a6f8:	370c      	adds	r7, #12
    a6fa:	46bd      	mov	sp, r7
    a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a700:	4770      	bx	lr

0000a702 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    a702:	b480      	push	{r7}
    a704:	b085      	sub	sp, #20
    a706:	af00      	add	r7, sp, #0
    a708:	6078      	str	r0, [r7, #4]
    a70a:	460b      	mov	r3, r1
    a70c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    a70e:	687b      	ldr	r3, [r7, #4]
    a710:	789b      	ldrb	r3, [r3, #2]
    a712:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a714:	7bfa      	ldrb	r2, [r7, #15]
    a716:	78fb      	ldrb	r3, [r7, #3]
    a718:	4013      	ands	r3, r2
    a71a:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a71c:	7bfb      	ldrb	r3, [r7, #15]
}
    a71e:	4618      	mov	r0, r3
    a720:	3714      	adds	r7, #20
    a722:	46bd      	mov	sp, r7
    a724:	f85d 7b04 	ldr.w	r7, [sp], #4
    a728:	4770      	bx	lr
	...

0000a72c <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    a72c:	b580      	push	{r7, lr}
    a72e:	b082      	sub	sp, #8
    a730:	af00      	add	r7, sp, #0
    a732:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    a734:	687b      	ldr	r3, [r7, #4]
    a736:	781b      	ldrb	r3, [r3, #0]
    a738:	b2db      	uxtb	r3, r3
    a73a:	f023 0302 	bic.w	r3, r3, #2
    a73e:	b2da      	uxtb	r2, r3
    a740:	687b      	ldr	r3, [r7, #4]
    a742:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    a744:	2103      	movs	r1, #3
    a746:	6878      	ldr	r0, [r7, #4]
    a748:	4b02      	ldr	r3, [pc, #8]	; (a754 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    a74a:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    a74c:	bf00      	nop
    a74e:	3708      	adds	r7, #8
    a750:	46bd      	mov	sp, r7
    a752:	bd80      	pop	{r7, pc}
    a754:	0000a3df 	.word	0x0000a3df

0000a758 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    a758:	b580      	push	{r7, lr}
    a75a:	b084      	sub	sp, #16
    a75c:	af00      	add	r7, sp, #0
    a75e:	6078      	str	r0, [r7, #4]
    a760:	460b      	mov	r3, r1
    a762:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a764:	2103      	movs	r1, #3
    a766:	6878      	ldr	r0, [r7, #4]
    a768:	4b06      	ldr	r3, [pc, #24]	; (a784 <hri_usb_get_CTRLA_reg+0x2c>)
    a76a:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    a76c:	687b      	ldr	r3, [r7, #4]
    a76e:	781b      	ldrb	r3, [r3, #0]
    a770:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    a772:	7bfa      	ldrb	r2, [r7, #15]
    a774:	78fb      	ldrb	r3, [r7, #3]
    a776:	4013      	ands	r3, r2
    a778:	73fb      	strb	r3, [r7, #15]
	return tmp;
    a77a:	7bfb      	ldrb	r3, [r7, #15]
}
    a77c:	4618      	mov	r0, r3
    a77e:	3710      	adds	r7, #16
    a780:	46bd      	mov	sp, r7
    a782:	bd80      	pop	{r7, pc}
    a784:	0000a3df 	.word	0x0000a3df

0000a788 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    a788:	b580      	push	{r7, lr}
    a78a:	b082      	sub	sp, #8
    a78c:	af00      	add	r7, sp, #0
    a78e:	6078      	str	r0, [r7, #4]
    a790:	460b      	mov	r3, r1
    a792:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    a794:	687b      	ldr	r3, [r7, #4]
    a796:	78fa      	ldrb	r2, [r7, #3]
    a798:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a79a:	2103      	movs	r1, #3
    a79c:	6878      	ldr	r0, [r7, #4]
    a79e:	4b03      	ldr	r3, [pc, #12]	; (a7ac <hri_usb_write_CTRLA_reg+0x24>)
    a7a0:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    a7a2:	bf00      	nop
    a7a4:	3708      	adds	r7, #8
    a7a6:	46bd      	mov	sp, r7
    a7a8:	bd80      	pop	{r7, pc}
    a7aa:	bf00      	nop
    a7ac:	0000a3df 	.word	0x0000a3df

0000a7b0 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    a7b0:	b580      	push	{r7, lr}
    a7b2:	b082      	sub	sp, #8
    a7b4:	af00      	add	r7, sp, #0
    a7b6:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    a7b8:	2103      	movs	r1, #3
    a7ba:	6878      	ldr	r0, [r7, #4]
    a7bc:	4b04      	ldr	r3, [pc, #16]	; (a7d0 <hri_usb_read_CTRLA_reg+0x20>)
    a7be:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    a7c0:	687b      	ldr	r3, [r7, #4]
    a7c2:	781b      	ldrb	r3, [r3, #0]
    a7c4:	b2db      	uxtb	r3, r3
}
    a7c6:	4618      	mov	r0, r3
    a7c8:	3708      	adds	r7, #8
    a7ca:	46bd      	mov	sp, r7
    a7cc:	bd80      	pop	{r7, pc}
    a7ce:	bf00      	nop
    a7d0:	0000a3df 	.word	0x0000a3df

0000a7d4 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    a7d4:	b480      	push	{r7}
    a7d6:	b083      	sub	sp, #12
    a7d8:	af00      	add	r7, sp, #0
    a7da:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    a7dc:	687b      	ldr	r3, [r7, #4]
    a7de:	891b      	ldrh	r3, [r3, #8]
    a7e0:	b29b      	uxth	r3, r3
    a7e2:	f023 0301 	bic.w	r3, r3, #1
    a7e6:	b29a      	uxth	r2, r3
    a7e8:	687b      	ldr	r3, [r7, #4]
    a7ea:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    a7ec:	bf00      	nop
    a7ee:	370c      	adds	r7, #12
    a7f0:	46bd      	mov	sp, r7
    a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7f6:	4770      	bx	lr

0000a7f8 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    a7f8:	b480      	push	{r7}
    a7fa:	b083      	sub	sp, #12
    a7fc:	af00      	add	r7, sp, #0
    a7fe:	6078      	str	r0, [r7, #4]
    a800:	460b      	mov	r3, r1
    a802:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    a804:	687b      	ldr	r3, [r7, #4]
    a806:	887a      	ldrh	r2, [r7, #2]
    a808:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    a80a:	bf00      	nop
    a80c:	370c      	adds	r7, #12
    a80e:	46bd      	mov	sp, r7
    a810:	f85d 7b04 	ldr.w	r7, [sp], #4
    a814:	4770      	bx	lr

0000a816 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    a816:	b480      	push	{r7}
    a818:	b083      	sub	sp, #12
    a81a:	af00      	add	r7, sp, #0
    a81c:	6078      	str	r0, [r7, #4]
    a81e:	460b      	mov	r3, r1
    a820:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    a822:	687b      	ldr	r3, [r7, #4]
    a824:	78fa      	ldrb	r2, [r7, #3]
    a826:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    a828:	bf00      	nop
    a82a:	370c      	adds	r7, #12
    a82c:	46bd      	mov	sp, r7
    a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a832:	4770      	bx	lr

0000a834 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    a834:	b480      	push	{r7}
    a836:	b083      	sub	sp, #12
    a838:	af00      	add	r7, sp, #0
    a83a:	6078      	str	r0, [r7, #4]
    a83c:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    a83e:	687b      	ldr	r3, [r7, #4]
    a840:	683a      	ldr	r2, [r7, #0]
    a842:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    a844:	bf00      	nop
    a846:	370c      	adds	r7, #12
    a848:	46bd      	mov	sp, r7
    a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a84e:	4770      	bx	lr

0000a850 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    a850:	b480      	push	{r7}
    a852:	b083      	sub	sp, #12
    a854:	af00      	add	r7, sp, #0
    a856:	6078      	str	r0, [r7, #4]
    a858:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    a85a:	2300      	movs	r3, #0
}
    a85c:	4618      	mov	r0, r3
    a85e:	370c      	adds	r7, #12
    a860:	46bd      	mov	sp, r7
    a862:	f85d 7b04 	ldr.w	r7, [sp], #4
    a866:	4770      	bx	lr

0000a868 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    a868:	b480      	push	{r7}
    a86a:	b085      	sub	sp, #20
    a86c:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    a86e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a872:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    a874:	4b28      	ldr	r3, [pc, #160]	; (a918 <_usb_load_calib+0xb0>)
    a876:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    a878:	f003 031f 	and.w	r3, r3, #31
    a87c:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    a87e:	4b26      	ldr	r3, [pc, #152]	; (a918 <_usb_load_calib+0xb0>)
    a880:	681b      	ldr	r3, [r3, #0]
    a882:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    a884:	f003 031f 	and.w	r3, r3, #31
    a888:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    a88a:	4b23      	ldr	r3, [pc, #140]	; (a918 <_usb_load_calib+0xb0>)
    a88c:	681b      	ldr	r3, [r3, #0]
    a88e:	0a9b      	lsrs	r3, r3, #10
    a890:	f003 0307 	and.w	r3, r3, #7
    a894:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    a896:	68fb      	ldr	r3, [r7, #12]
    a898:	2b00      	cmp	r3, #0
    a89a:	d002      	beq.n	a8a2 <_usb_load_calib+0x3a>
    a89c:	68fb      	ldr	r3, [r7, #12]
    a89e:	2b1f      	cmp	r3, #31
    a8a0:	d101      	bne.n	a8a6 <_usb_load_calib+0x3e>
		pad_transn = 9;
    a8a2:	2309      	movs	r3, #9
    a8a4:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    a8a6:	68bb      	ldr	r3, [r7, #8]
    a8a8:	2b00      	cmp	r3, #0
    a8aa:	d002      	beq.n	a8b2 <_usb_load_calib+0x4a>
    a8ac:	68bb      	ldr	r3, [r7, #8]
    a8ae:	2b1f      	cmp	r3, #31
    a8b0:	d101      	bne.n	a8b6 <_usb_load_calib+0x4e>
		pad_transp = 25;
    a8b2:	2319      	movs	r3, #25
    a8b4:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    a8b6:	687b      	ldr	r3, [r7, #4]
    a8b8:	2b00      	cmp	r3, #0
    a8ba:	d002      	beq.n	a8c2 <_usb_load_calib+0x5a>
    a8bc:	687b      	ldr	r3, [r7, #4]
    a8be:	2b07      	cmp	r3, #7
    a8c0:	d101      	bne.n	a8c6 <_usb_load_calib+0x5e>
		pad_trim = 6;
    a8c2:	2306      	movs	r3, #6
    a8c4:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    a8c6:	68fb      	ldr	r3, [r7, #12]
    a8c8:	b29b      	uxth	r3, r3
    a8ca:	019b      	lsls	r3, r3, #6
    a8cc:	b29b      	uxth	r3, r3
    a8ce:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    a8d2:	b29a      	uxth	r2, r3
    a8d4:	68bb      	ldr	r3, [r7, #8]
    a8d6:	b29b      	uxth	r3, r3
    a8d8:	f003 031f 	and.w	r3, r3, #31
    a8dc:	b29b      	uxth	r3, r3
    a8de:	4313      	orrs	r3, r2
    a8e0:	b29a      	uxth	r2, r3
    a8e2:	687b      	ldr	r3, [r7, #4]
    a8e4:	b29b      	uxth	r3, r3
    a8e6:	031b      	lsls	r3, r3, #12
    a8e8:	b29b      	uxth	r3, r3
    a8ea:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    a8ee:	b29b      	uxth	r3, r3
    a8f0:	4313      	orrs	r3, r2
    a8f2:	b29a      	uxth	r2, r3
    a8f4:	683b      	ldr	r3, [r7, #0]
    a8f6:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    a8f8:	683a      	ldr	r2, [r7, #0]
    a8fa:	78d3      	ldrb	r3, [r2, #3]
    a8fc:	f043 0303 	orr.w	r3, r3, #3
    a900:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    a902:	683a      	ldr	r2, [r7, #0]
    a904:	78d3      	ldrb	r3, [r2, #3]
    a906:	f043 030c 	orr.w	r3, r3, #12
    a90a:	70d3      	strb	r3, [r2, #3]
}
    a90c:	bf00      	nop
    a90e:	3714      	adds	r7, #20
    a910:	46bd      	mov	sp, r7
    a912:	f85d 7b04 	ldr.w	r7, [sp], #4
    a916:	4770      	bx	lr
    a918:	00800084 	.word	0x00800084

0000a91c <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    a91c:	b580      	push	{r7, lr}
    a91e:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    a920:	bf00      	nop
    a922:	2203      	movs	r2, #3
    a924:	2100      	movs	r1, #0
    a926:	4804      	ldr	r0, [pc, #16]	; (a938 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    a928:	4b04      	ldr	r3, [pc, #16]	; (a93c <_usb_d_dev_wait_dpll_rdy+0x20>)
    a92a:	4798      	blx	r3
    a92c:	4603      	mov	r3, r0
    a92e:	2b03      	cmp	r3, #3
    a930:	d1f7      	bne.n	a922 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    a932:	bf00      	nop
    a934:	bd80      	pop	{r7, pc}
    a936:	bf00      	nop
    a938:	40001000 	.word	0x40001000
    a93c:	0000a351 	.word	0x0000a351

0000a940 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    a940:	b580      	push	{r7, lr}
    a942:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    a944:	480e      	ldr	r0, [pc, #56]	; (a980 <_usb_d_dev_wait_dfll_rdy+0x40>)
    a946:	4b0f      	ldr	r3, [pc, #60]	; (a984 <_usb_d_dev_wait_dfll_rdy+0x44>)
    a948:	4798      	blx	r3
    a94a:	4603      	mov	r3, r0
    a94c:	2b00      	cmp	r3, #0
    a94e:	d00a      	beq.n	a966 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    a950:	bf00      	nop
    a952:	f44f 6110 	mov.w	r1, #2304	; 0x900
    a956:	480a      	ldr	r0, [pc, #40]	; (a980 <_usb_d_dev_wait_dfll_rdy+0x40>)
    a958:	4b0b      	ldr	r3, [pc, #44]	; (a988 <_usb_d_dev_wait_dfll_rdy+0x48>)
    a95a:	4798      	blx	r3
    a95c:	4603      	mov	r3, r0
    a95e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    a962:	d1f6      	bne.n	a952 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    a964:	e009      	b.n	a97a <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    a966:	bf00      	nop
    a968:	f44f 7180 	mov.w	r1, #256	; 0x100
    a96c:	4804      	ldr	r0, [pc, #16]	; (a980 <_usb_d_dev_wait_dfll_rdy+0x40>)
    a96e:	4b06      	ldr	r3, [pc, #24]	; (a988 <_usb_d_dev_wait_dfll_rdy+0x48>)
    a970:	4798      	blx	r3
    a972:	4603      	mov	r3, r0
    a974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a978:	d1f6      	bne.n	a968 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    a97a:	bf00      	nop
    a97c:	bd80      	pop	{r7, pc}
    a97e:	bf00      	nop
    a980:	40001000 	.word	0x40001000
    a984:	0000a3af 	.word	0x0000a3af
    a988:	0000a389 	.word	0x0000a389

0000a98c <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    a98c:	b580      	push	{r7, lr}
    a98e:	b082      	sub	sp, #8
    a990:	af00      	add	r7, sp, #0
    a992:	4603      	mov	r3, r0
    a994:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    a996:	79fb      	ldrb	r3, [r7, #7]
    a998:	2b00      	cmp	r3, #0
    a99a:	d102      	bne.n	a9a2 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    a99c:	4b05      	ldr	r3, [pc, #20]	; (a9b4 <_usb_d_dev_wait_clk_rdy+0x28>)
    a99e:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    a9a0:	e004      	b.n	a9ac <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    a9a2:	79fb      	ldrb	r3, [r7, #7]
    a9a4:	2b01      	cmp	r3, #1
    a9a6:	d101      	bne.n	a9ac <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    a9a8:	4b03      	ldr	r3, [pc, #12]	; (a9b8 <_usb_d_dev_wait_clk_rdy+0x2c>)
    a9aa:	4798      	blx	r3
}
    a9ac:	bf00      	nop
    a9ae:	3708      	adds	r7, #8
    a9b0:	46bd      	mov	sp, r7
    a9b2:	bd80      	pop	{r7, pc}
    a9b4:	0000a941 	.word	0x0000a941
    a9b8:	0000a91d 	.word	0x0000a91d

0000a9bc <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    a9bc:	b580      	push	{r7, lr}
    a9be:	b082      	sub	sp, #8
    a9c0:	af00      	add	r7, sp, #0
    a9c2:	4603      	mov	r3, r0
    a9c4:	6039      	str	r1, [r7, #0]
    a9c6:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    a9c8:	683b      	ldr	r3, [r7, #0]
    a9ca:	b2da      	uxtb	r2, r3
    a9cc:	79fb      	ldrb	r3, [r7, #7]
    a9ce:	4619      	mov	r1, r3
    a9d0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a9d4:	4b02      	ldr	r3, [pc, #8]	; (a9e0 <_usbd_ep_int_ack+0x24>)
    a9d6:	4798      	blx	r3
}
    a9d8:	bf00      	nop
    a9da:	3708      	adds	r7, #8
    a9dc:	46bd      	mov	sp, r7
    a9de:	bd80      	pop	{r7, pc}
    a9e0:	0000a495 	.word	0x0000a495

0000a9e4 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    a9e4:	b580      	push	{r7, lr}
    a9e6:	b082      	sub	sp, #8
    a9e8:	af00      	add	r7, sp, #0
    a9ea:	4603      	mov	r3, r0
    a9ec:	6039      	str	r1, [r7, #0]
    a9ee:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    a9f0:	683b      	ldr	r3, [r7, #0]
    a9f2:	b2da      	uxtb	r2, r3
    a9f4:	79fb      	ldrb	r3, [r7, #7]
    a9f6:	4619      	mov	r1, r3
    a9f8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a9fc:	4b02      	ldr	r3, [pc, #8]	; (aa08 <_usbd_ep_int_en+0x24>)
    a9fe:	4798      	blx	r3
}
    aa00:	bf00      	nop
    aa02:	3708      	adds	r7, #8
    aa04:	46bd      	mov	sp, r7
    aa06:	bd80      	pop	{r7, pc}
    aa08:	0000a569 	.word	0x0000a569

0000aa0c <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    aa0c:	b580      	push	{r7, lr}
    aa0e:	b082      	sub	sp, #8
    aa10:	af00      	add	r7, sp, #0
    aa12:	4603      	mov	r3, r0
    aa14:	6039      	str	r1, [r7, #0]
    aa16:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    aa18:	683b      	ldr	r3, [r7, #0]
    aa1a:	b2da      	uxtb	r2, r3
    aa1c:	79fb      	ldrb	r3, [r7, #7]
    aa1e:	4619      	mov	r1, r3
    aa20:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aa24:	4b02      	ldr	r3, [pc, #8]	; (aa30 <_usbd_ep_int_dis+0x24>)
    aa26:	4798      	blx	r3
}
    aa28:	bf00      	nop
    aa2a:	3708      	adds	r7, #8
    aa2c:	46bd      	mov	sp, r7
    aa2e:	bd80      	pop	{r7, pc}
    aa30:	0000a595 	.word	0x0000a595

0000aa34 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    aa34:	b580      	push	{r7, lr}
    aa36:	b082      	sub	sp, #8
    aa38:	af00      	add	r7, sp, #0
    aa3a:	4603      	mov	r3, r0
    aa3c:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    aa3e:	79fb      	ldrb	r3, [r7, #7]
    aa40:	4619      	mov	r1, r3
    aa42:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aa46:	4b06      	ldr	r3, [pc, #24]	; (aa60 <_usbd_ep_is_ctrl+0x2c>)
    aa48:	4798      	blx	r3
    aa4a:	4603      	mov	r3, r0
    aa4c:	2b11      	cmp	r3, #17
    aa4e:	bf0c      	ite	eq
    aa50:	2301      	moveq	r3, #1
    aa52:	2300      	movne	r3, #0
    aa54:	b2db      	uxtb	r3, r3
}
    aa56:	4618      	mov	r0, r3
    aa58:	3708      	adds	r7, #8
    aa5a:	46bd      	mov	sp, r7
    aa5c:	bd80      	pop	{r7, pc}
    aa5e:	bf00      	nop
    aa60:	0000a64f 	.word	0x0000a64f

0000aa64 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    aa64:	b580      	push	{r7, lr}
    aa66:	b082      	sub	sp, #8
    aa68:	af00      	add	r7, sp, #0
    aa6a:	4603      	mov	r3, r0
    aa6c:	71fb      	strb	r3, [r7, #7]
    aa6e:	460b      	mov	r3, r1
    aa70:	71bb      	strb	r3, [r7, #6]
    aa72:	4613      	mov	r3, r2
    aa74:	717b      	strb	r3, [r7, #5]
	if (st) {
    aa76:	797b      	ldrb	r3, [r7, #5]
    aa78:	2b00      	cmp	r3, #0
    aa7a:	d00b      	beq.n	aa94 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    aa7c:	79bb      	ldrb	r3, [r7, #6]
    aa7e:	2210      	movs	r2, #16
    aa80:	fa02 f303 	lsl.w	r3, r2, r3
    aa84:	b2da      	uxtb	r2, r3
    aa86:	79fb      	ldrb	r3, [r7, #7]
    aa88:	4619      	mov	r1, r3
    aa8a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aa8e:	4b09      	ldr	r3, [pc, #36]	; (aab4 <_usbd_ep_set_stall+0x50>)
    aa90:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    aa92:	e00a      	b.n	aaaa <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    aa94:	79bb      	ldrb	r3, [r7, #6]
    aa96:	2210      	movs	r2, #16
    aa98:	fa02 f303 	lsl.w	r3, r2, r3
    aa9c:	b2da      	uxtb	r2, r3
    aa9e:	79fb      	ldrb	r3, [r7, #7]
    aaa0:	4619      	mov	r1, r3
    aaa2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aaa6:	4b04      	ldr	r3, [pc, #16]	; (aab8 <_usbd_ep_set_stall+0x54>)
    aaa8:	4798      	blx	r3
}
    aaaa:	bf00      	nop
    aaac:	3708      	adds	r7, #8
    aaae:	46bd      	mov	sp, r7
    aab0:	bd80      	pop	{r7, pc}
    aab2:	bf00      	nop
    aab4:	0000a4c1 	.word	0x0000a4c1
    aab8:	0000a515 	.word	0x0000a515

0000aabc <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    aabc:	b580      	push	{r7, lr}
    aabe:	b084      	sub	sp, #16
    aac0:	af00      	add	r7, sp, #0
    aac2:	4603      	mov	r3, r0
    aac4:	460a      	mov	r2, r1
    aac6:	71fb      	strb	r3, [r7, #7]
    aac8:	4613      	mov	r3, r2
    aaca:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    aacc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aad0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    aad2:	79fb      	ldrb	r3, [r7, #7]
    aad4:	4619      	mov	r1, r3
    aad6:	68f8      	ldr	r0, [r7, #12]
    aad8:	4b08      	ldr	r3, [pc, #32]	; (aafc <_usbd_ep_is_stalled+0x40>)
    aada:	4798      	blx	r3
    aadc:	4603      	mov	r3, r0
    aade:	4619      	mov	r1, r3
    aae0:	79bb      	ldrb	r3, [r7, #6]
    aae2:	2210      	movs	r2, #16
    aae4:	fa02 f303 	lsl.w	r3, r2, r3
    aae8:	400b      	ands	r3, r1
    aaea:	2b00      	cmp	r3, #0
    aaec:	bf14      	ite	ne
    aaee:	2301      	movne	r3, #1
    aaf0:	2300      	moveq	r3, #0
    aaf2:	b2db      	uxtb	r3, r3
}
    aaf4:	4618      	mov	r0, r3
    aaf6:	3710      	adds	r7, #16
    aaf8:	46bd      	mov	sp, r7
    aafa:	bd80      	pop	{r7, pc}
    aafc:	0000a4ed 	.word	0x0000a4ed

0000ab00 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    ab00:	b580      	push	{r7, lr}
    ab02:	b084      	sub	sp, #16
    ab04:	af00      	add	r7, sp, #0
    ab06:	4603      	mov	r3, r0
    ab08:	460a      	mov	r2, r1
    ab0a:	71fb      	strb	r3, [r7, #7]
    ab0c:	4613      	mov	r3, r2
    ab0e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    ab10:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ab14:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    ab16:	79fb      	ldrb	r3, [r7, #7]
    ab18:	4619      	mov	r1, r3
    ab1a:	68f8      	ldr	r0, [r7, #12]
    ab1c:	4b08      	ldr	r3, [pc, #32]	; (ab40 <_usbd_ep_is_stall_sent+0x40>)
    ab1e:	4798      	blx	r3
    ab20:	4603      	mov	r3, r0
    ab22:	4619      	mov	r1, r3
    ab24:	79bb      	ldrb	r3, [r7, #6]
    ab26:	2220      	movs	r2, #32
    ab28:	fa02 f303 	lsl.w	r3, r2, r3
    ab2c:	400b      	ands	r3, r1
    ab2e:	2b00      	cmp	r3, #0
    ab30:	bf14      	ite	ne
    ab32:	2301      	movne	r3, #1
    ab34:	2300      	moveq	r3, #0
    ab36:	b2db      	uxtb	r3, r3
}
    ab38:	4618      	mov	r0, r3
    ab3a:	3710      	adds	r7, #16
    ab3c:	46bd      	mov	sp, r7
    ab3e:	bd80      	pop	{r7, pc}
    ab40:	0000a46d 	.word	0x0000a46d

0000ab44 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    ab44:	b580      	push	{r7, lr}
    ab46:	b082      	sub	sp, #8
    ab48:	af00      	add	r7, sp, #0
    ab4a:	4603      	mov	r3, r0
    ab4c:	460a      	mov	r2, r1
    ab4e:	71fb      	strb	r3, [r7, #7]
    ab50:	4613      	mov	r3, r2
    ab52:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    ab54:	79bb      	ldrb	r3, [r7, #6]
    ab56:	2220      	movs	r2, #32
    ab58:	409a      	lsls	r2, r3
    ab5a:	79fb      	ldrb	r3, [r7, #7]
    ab5c:	4611      	mov	r1, r2
    ab5e:	4618      	mov	r0, r3
    ab60:	4b02      	ldr	r3, [pc, #8]	; (ab6c <_usbd_ep_ack_stall+0x28>)
    ab62:	4798      	blx	r3
}
    ab64:	bf00      	nop
    ab66:	3708      	adds	r7, #8
    ab68:	46bd      	mov	sp, r7
    ab6a:	bd80      	pop	{r7, pc}
    ab6c:	0000a9bd 	.word	0x0000a9bd

0000ab70 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    ab70:	b580      	push	{r7, lr}
    ab72:	b082      	sub	sp, #8
    ab74:	af00      	add	r7, sp, #0
    ab76:	4603      	mov	r3, r0
    ab78:	71fb      	strb	r3, [r7, #7]
    ab7a:	460b      	mov	r3, r1
    ab7c:	71bb      	strb	r3, [r7, #6]
    ab7e:	4613      	mov	r3, r2
    ab80:	717b      	strb	r3, [r7, #5]
	if (en) {
    ab82:	797b      	ldrb	r3, [r7, #5]
    ab84:	2b00      	cmp	r3, #0
    ab86:	d008      	beq.n	ab9a <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    ab88:	79bb      	ldrb	r3, [r7, #6]
    ab8a:	2220      	movs	r2, #32
    ab8c:	409a      	lsls	r2, r3
    ab8e:	79fb      	ldrb	r3, [r7, #7]
    ab90:	4611      	mov	r1, r2
    ab92:	4618      	mov	r0, r3
    ab94:	4b07      	ldr	r3, [pc, #28]	; (abb4 <_usbd_ep_int_stall_en+0x44>)
    ab96:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    ab98:	e007      	b.n	abaa <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    ab9a:	79bb      	ldrb	r3, [r7, #6]
    ab9c:	2220      	movs	r2, #32
    ab9e:	409a      	lsls	r2, r3
    aba0:	79fb      	ldrb	r3, [r7, #7]
    aba2:	4611      	mov	r1, r2
    aba4:	4618      	mov	r0, r3
    aba6:	4b04      	ldr	r3, [pc, #16]	; (abb8 <_usbd_ep_int_stall_en+0x48>)
    aba8:	4798      	blx	r3
}
    abaa:	bf00      	nop
    abac:	3708      	adds	r7, #8
    abae:	46bd      	mov	sp, r7
    abb0:	bd80      	pop	{r7, pc}
    abb2:	bf00      	nop
    abb4:	0000a9e5 	.word	0x0000a9e5
    abb8:	0000aa0d 	.word	0x0000aa0d

0000abbc <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    abbc:	b580      	push	{r7, lr}
    abbe:	b082      	sub	sp, #8
    abc0:	af00      	add	r7, sp, #0
    abc2:	4603      	mov	r3, r0
    abc4:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    abc6:	79fb      	ldrb	r3, [r7, #7]
    abc8:	4619      	mov	r1, r3
    abca:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    abce:	4b03      	ldr	r3, [pc, #12]	; (abdc <_usbd_ep_stop_setup+0x20>)
    abd0:	4798      	blx	r3
}
    abd2:	bf00      	nop
    abd4:	3708      	adds	r7, #8
    abd6:	46bd      	mov	sp, r7
    abd8:	bd80      	pop	{r7, pc}
    abda:	bf00      	nop
    abdc:	0000a541 	.word	0x0000a541

0000abe0 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    abe0:	b580      	push	{r7, lr}
    abe2:	b082      	sub	sp, #8
    abe4:	af00      	add	r7, sp, #0
    abe6:	4603      	mov	r3, r0
    abe8:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    abea:	79fb      	ldrb	r3, [r7, #7]
    abec:	2210      	movs	r2, #16
    abee:	4619      	mov	r1, r3
    abf0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    abf4:	4b05      	ldr	r3, [pc, #20]	; (ac0c <_usbd_ep_is_setup+0x2c>)
    abf6:	4798      	blx	r3
    abf8:	4603      	mov	r3, r0
    abfa:	2b00      	cmp	r3, #0
    abfc:	bf14      	ite	ne
    abfe:	2301      	movne	r3, #1
    ac00:	2300      	moveq	r3, #0
    ac02:	b2db      	uxtb	r3, r3
}
    ac04:	4618      	mov	r0, r3
    ac06:	3708      	adds	r7, #8
    ac08:	46bd      	mov	sp, r7
    ac0a:	bd80      	pop	{r7, pc}
    ac0c:	0000a437 	.word	0x0000a437

0000ac10 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    ac10:	b580      	push	{r7, lr}
    ac12:	b082      	sub	sp, #8
    ac14:	af00      	add	r7, sp, #0
    ac16:	4603      	mov	r3, r0
    ac18:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    ac1a:	79fb      	ldrb	r3, [r7, #7]
    ac1c:	2110      	movs	r1, #16
    ac1e:	4618      	mov	r0, r3
    ac20:	4b02      	ldr	r3, [pc, #8]	; (ac2c <_usbd_ep_ack_setup+0x1c>)
    ac22:	4798      	blx	r3
}
    ac24:	bf00      	nop
    ac26:	3708      	adds	r7, #8
    ac28:	46bd      	mov	sp, r7
    ac2a:	bd80      	pop	{r7, pc}
    ac2c:	0000a9bd 	.word	0x0000a9bd

0000ac30 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    ac30:	b580      	push	{r7, lr}
    ac32:	b082      	sub	sp, #8
    ac34:	af00      	add	r7, sp, #0
    ac36:	4603      	mov	r3, r0
    ac38:	71fb      	strb	r3, [r7, #7]
    ac3a:	460b      	mov	r3, r1
    ac3c:	71bb      	strb	r3, [r7, #6]
    ac3e:	4613      	mov	r3, r2
    ac40:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    ac42:	797b      	ldrb	r3, [r7, #5]
    ac44:	2b00      	cmp	r3, #0
    ac46:	d00b      	beq.n	ac60 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    ac48:	79bb      	ldrb	r3, [r7, #6]
    ac4a:	2201      	movs	r2, #1
    ac4c:	fa02 f303 	lsl.w	r3, r2, r3
    ac50:	b2da      	uxtb	r2, r3
    ac52:	79fb      	ldrb	r3, [r7, #7]
    ac54:	4619      	mov	r1, r3
    ac56:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ac5a:	4b09      	ldr	r3, [pc, #36]	; (ac80 <_usbd_ep_set_toggle+0x50>)
    ac5c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    ac5e:	e00a      	b.n	ac76 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    ac60:	79bb      	ldrb	r3, [r7, #6]
    ac62:	2201      	movs	r2, #1
    ac64:	fa02 f303 	lsl.w	r3, r2, r3
    ac68:	b2da      	uxtb	r2, r3
    ac6a:	79fb      	ldrb	r3, [r7, #7]
    ac6c:	4619      	mov	r1, r3
    ac6e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ac72:	4b04      	ldr	r3, [pc, #16]	; (ac84 <_usbd_ep_set_toggle+0x54>)
    ac74:	4798      	blx	r3
}
    ac76:	bf00      	nop
    ac78:	3708      	adds	r7, #8
    ac7a:	46bd      	mov	sp, r7
    ac7c:	bd80      	pop	{r7, pc}
    ac7e:	bf00      	nop
    ac80:	0000a4c1 	.word	0x0000a4c1
    ac84:	0000a515 	.word	0x0000a515

0000ac88 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    ac88:	b580      	push	{r7, lr}
    ac8a:	b082      	sub	sp, #8
    ac8c:	af00      	add	r7, sp, #0
    ac8e:	4603      	mov	r3, r0
    ac90:	460a      	mov	r2, r1
    ac92:	71fb      	strb	r3, [r7, #7]
    ac94:	4613      	mov	r3, r2
    ac96:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    ac98:	79bb      	ldrb	r3, [r7, #6]
    ac9a:	2201      	movs	r2, #1
    ac9c:	409a      	lsls	r2, r3
    ac9e:	79fb      	ldrb	r3, [r7, #7]
    aca0:	4611      	mov	r1, r2
    aca2:	4618      	mov	r0, r3
    aca4:	4b02      	ldr	r3, [pc, #8]	; (acb0 <_usbd_ep_ack_io_cpt+0x28>)
    aca6:	4798      	blx	r3
}
    aca8:	bf00      	nop
    acaa:	3708      	adds	r7, #8
    acac:	46bd      	mov	sp, r7
    acae:	bd80      	pop	{r7, pc}
    acb0:	0000a9bd 	.word	0x0000a9bd

0000acb4 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    acb4:	b480      	push	{r7}
    acb6:	b085      	sub	sp, #20
    acb8:	af00      	add	r7, sp, #0
    acba:	4603      	mov	r3, r0
    acbc:	603a      	str	r2, [r7, #0]
    acbe:	71fb      	strb	r3, [r7, #7]
    acc0:	460b      	mov	r3, r1
    acc2:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    acc4:	79fa      	ldrb	r2, [r7, #7]
    acc6:	79bb      	ldrb	r3, [r7, #6]
    acc8:	0052      	lsls	r2, r2, #1
    acca:	4413      	add	r3, r2
    accc:	011b      	lsls	r3, r3, #4
    acce:	4a06      	ldr	r2, [pc, #24]	; (ace8 <_usbd_ep_set_buf+0x34>)
    acd0:	4413      	add	r3, r2
    acd2:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    acd4:	68fb      	ldr	r3, [r7, #12]
    acd6:	683a      	ldr	r2, [r7, #0]
    acd8:	601a      	str	r2, [r3, #0]
}
    acda:	bf00      	nop
    acdc:	3714      	adds	r7, #20
    acde:	46bd      	mov	sp, r7
    ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
    ace4:	4770      	bx	lr
    ace6:	bf00      	nop
    ace8:	20002674 	.word	0x20002674

0000acec <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    acec:	b480      	push	{r7}
    acee:	b085      	sub	sp, #20
    acf0:	af00      	add	r7, sp, #0
    acf2:	4603      	mov	r3, r0
    acf4:	71fb      	strb	r3, [r7, #7]
    acf6:	460b      	mov	r3, r1
    acf8:	71bb      	strb	r3, [r7, #6]
    acfa:	4613      	mov	r3, r2
    acfc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    acfe:	79fa      	ldrb	r2, [r7, #7]
    ad00:	79bb      	ldrb	r3, [r7, #6]
    ad02:	0052      	lsls	r2, r2, #1
    ad04:	4413      	add	r3, r2
    ad06:	011b      	lsls	r3, r3, #4
    ad08:	4a08      	ldr	r2, [pc, #32]	; (ad2c <_usbd_ep_set_in_count+0x40>)
    ad0a:	4413      	add	r3, r2
    ad0c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    ad0e:	88bb      	ldrh	r3, [r7, #4]
    ad10:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ad14:	b299      	uxth	r1, r3
    ad16:	68fa      	ldr	r2, [r7, #12]
    ad18:	6853      	ldr	r3, [r2, #4]
    ad1a:	f361 339b 	bfi	r3, r1, #14, #14
    ad1e:	6053      	str	r3, [r2, #4]
}
    ad20:	bf00      	nop
    ad22:	3714      	adds	r7, #20
    ad24:	46bd      	mov	sp, r7
    ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad2a:	4770      	bx	lr
    ad2c:	20002674 	.word	0x20002674

0000ad30 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    ad30:	b480      	push	{r7}
    ad32:	b085      	sub	sp, #20
    ad34:	af00      	add	r7, sp, #0
    ad36:	4603      	mov	r3, r0
    ad38:	71fb      	strb	r3, [r7, #7]
    ad3a:	460b      	mov	r3, r1
    ad3c:	71bb      	strb	r3, [r7, #6]
    ad3e:	4613      	mov	r3, r2
    ad40:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ad42:	79fa      	ldrb	r2, [r7, #7]
    ad44:	79bb      	ldrb	r3, [r7, #6]
    ad46:	0052      	lsls	r2, r2, #1
    ad48:	4413      	add	r3, r2
    ad4a:	011b      	lsls	r3, r3, #4
    ad4c:	4a08      	ldr	r2, [pc, #32]	; (ad70 <_usbd_ep_set_in_size+0x40>)
    ad4e:	4413      	add	r3, r2
    ad50:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    ad52:	88bb      	ldrh	r3, [r7, #4]
    ad54:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ad58:	b299      	uxth	r1, r3
    ad5a:	68fa      	ldr	r2, [r7, #12]
    ad5c:	6853      	ldr	r3, [r2, #4]
    ad5e:	f361 030d 	bfi	r3, r1, #0, #14
    ad62:	6053      	str	r3, [r2, #4]
}
    ad64:	bf00      	nop
    ad66:	3714      	adds	r7, #20
    ad68:	46bd      	mov	sp, r7
    ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad6e:	4770      	bx	lr
    ad70:	20002674 	.word	0x20002674

0000ad74 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    ad74:	b480      	push	{r7}
    ad76:	b085      	sub	sp, #20
    ad78:	af00      	add	r7, sp, #0
    ad7a:	4603      	mov	r3, r0
    ad7c:	71fb      	strb	r3, [r7, #7]
    ad7e:	460b      	mov	r3, r1
    ad80:	71bb      	strb	r3, [r7, #6]
    ad82:	4613      	mov	r3, r2
    ad84:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ad86:	79fa      	ldrb	r2, [r7, #7]
    ad88:	79bb      	ldrb	r3, [r7, #6]
    ad8a:	0052      	lsls	r2, r2, #1
    ad8c:	4413      	add	r3, r2
    ad8e:	011b      	lsls	r3, r3, #4
    ad90:	4a08      	ldr	r2, [pc, #32]	; (adb4 <_usbd_ep_set_out_count+0x40>)
    ad92:	4413      	add	r3, r2
    ad94:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    ad96:	88bb      	ldrh	r3, [r7, #4]
    ad98:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ad9c:	b299      	uxth	r1, r3
    ad9e:	68fa      	ldr	r2, [r7, #12]
    ada0:	6853      	ldr	r3, [r2, #4]
    ada2:	f361 030d 	bfi	r3, r1, #0, #14
    ada6:	6053      	str	r3, [r2, #4]
}
    ada8:	bf00      	nop
    adaa:	3714      	adds	r7, #20
    adac:	46bd      	mov	sp, r7
    adae:	f85d 7b04 	ldr.w	r7, [sp], #4
    adb2:	4770      	bx	lr
    adb4:	20002674 	.word	0x20002674

0000adb8 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    adb8:	b480      	push	{r7}
    adba:	b085      	sub	sp, #20
    adbc:	af00      	add	r7, sp, #0
    adbe:	4603      	mov	r3, r0
    adc0:	71fb      	strb	r3, [r7, #7]
    adc2:	460b      	mov	r3, r1
    adc4:	71bb      	strb	r3, [r7, #6]
    adc6:	4613      	mov	r3, r2
    adc8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    adca:	79fa      	ldrb	r2, [r7, #7]
    adcc:	79bb      	ldrb	r3, [r7, #6]
    adce:	0052      	lsls	r2, r2, #1
    add0:	4413      	add	r3, r2
    add2:	011b      	lsls	r3, r3, #4
    add4:	4a08      	ldr	r2, [pc, #32]	; (adf8 <_usbd_ep_set_out_size+0x40>)
    add6:	4413      	add	r3, r2
    add8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    adda:	88bb      	ldrh	r3, [r7, #4]
    addc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    ade0:	b299      	uxth	r1, r3
    ade2:	68fa      	ldr	r2, [r7, #12]
    ade4:	6853      	ldr	r3, [r2, #4]
    ade6:	f361 339b 	bfi	r3, r1, #14, #14
    adea:	6053      	str	r3, [r2, #4]
}
    adec:	bf00      	nop
    adee:	3714      	adds	r7, #20
    adf0:	46bd      	mov	sp, r7
    adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    adf6:	4770      	bx	lr
    adf8:	20002674 	.word	0x20002674

0000adfc <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    adfc:	b580      	push	{r7, lr}
    adfe:	b084      	sub	sp, #16
    ae00:	af00      	add	r7, sp, #0
    ae02:	60ba      	str	r2, [r7, #8]
    ae04:	607b      	str	r3, [r7, #4]
    ae06:	4603      	mov	r3, r0
    ae08:	73fb      	strb	r3, [r7, #15]
    ae0a:	460b      	mov	r3, r1
    ae0c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    ae0e:	68bb      	ldr	r3, [r7, #8]
    ae10:	b29a      	uxth	r2, r3
    ae12:	7bb9      	ldrb	r1, [r7, #14]
    ae14:	7bfb      	ldrb	r3, [r7, #15]
    ae16:	4618      	mov	r0, r3
    ae18:	4b06      	ldr	r3, [pc, #24]	; (ae34 <_usbd_ep_set_in_trans+0x38>)
    ae1a:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    ae1c:	687b      	ldr	r3, [r7, #4]
    ae1e:	b29a      	uxth	r2, r3
    ae20:	7bb9      	ldrb	r1, [r7, #14]
    ae22:	7bfb      	ldrb	r3, [r7, #15]
    ae24:	4618      	mov	r0, r3
    ae26:	4b04      	ldr	r3, [pc, #16]	; (ae38 <_usbd_ep_set_in_trans+0x3c>)
    ae28:	4798      	blx	r3
}
    ae2a:	bf00      	nop
    ae2c:	3710      	adds	r7, #16
    ae2e:	46bd      	mov	sp, r7
    ae30:	bd80      	pop	{r7, pc}
    ae32:	bf00      	nop
    ae34:	0000ad31 	.word	0x0000ad31
    ae38:	0000aced 	.word	0x0000aced

0000ae3c <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    ae3c:	b580      	push	{r7, lr}
    ae3e:	b084      	sub	sp, #16
    ae40:	af00      	add	r7, sp, #0
    ae42:	60ba      	str	r2, [r7, #8]
    ae44:	607b      	str	r3, [r7, #4]
    ae46:	4603      	mov	r3, r0
    ae48:	73fb      	strb	r3, [r7, #15]
    ae4a:	460b      	mov	r3, r1
    ae4c:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    ae4e:	68bb      	ldr	r3, [r7, #8]
    ae50:	b29a      	uxth	r2, r3
    ae52:	7bb9      	ldrb	r1, [r7, #14]
    ae54:	7bfb      	ldrb	r3, [r7, #15]
    ae56:	4618      	mov	r0, r3
    ae58:	4b06      	ldr	r3, [pc, #24]	; (ae74 <_usbd_ep_set_out_trans+0x38>)
    ae5a:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    ae5c:	687b      	ldr	r3, [r7, #4]
    ae5e:	b29a      	uxth	r2, r3
    ae60:	7bb9      	ldrb	r1, [r7, #14]
    ae62:	7bfb      	ldrb	r3, [r7, #15]
    ae64:	4618      	mov	r0, r3
    ae66:	4b04      	ldr	r3, [pc, #16]	; (ae78 <_usbd_ep_set_out_trans+0x3c>)
    ae68:	4798      	blx	r3
}
    ae6a:	bf00      	nop
    ae6c:	3710      	adds	r7, #16
    ae6e:	46bd      	mov	sp, r7
    ae70:	bd80      	pop	{r7, pc}
    ae72:	bf00      	nop
    ae74:	0000adb9 	.word	0x0000adb9
    ae78:	0000ad75 	.word	0x0000ad75

0000ae7c <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    ae7c:	b480      	push	{r7}
    ae7e:	b085      	sub	sp, #20
    ae80:	af00      	add	r7, sp, #0
    ae82:	4603      	mov	r3, r0
    ae84:	460a      	mov	r2, r1
    ae86:	71fb      	strb	r3, [r7, #7]
    ae88:	4613      	mov	r3, r2
    ae8a:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    ae8c:	79fa      	ldrb	r2, [r7, #7]
    ae8e:	79bb      	ldrb	r3, [r7, #6]
    ae90:	0052      	lsls	r2, r2, #1
    ae92:	4413      	add	r3, r2
    ae94:	011b      	lsls	r3, r3, #4
    ae96:	4a06      	ldr	r2, [pc, #24]	; (aeb0 <_usbd_ep_clear_bank_status+0x34>)
    ae98:	4413      	add	r3, r2
    ae9a:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    ae9c:	68fb      	ldr	r3, [r7, #12]
    ae9e:	2200      	movs	r2, #0
    aea0:	729a      	strb	r2, [r3, #10]
}
    aea2:	bf00      	nop
    aea4:	3714      	adds	r7, #20
    aea6:	46bd      	mov	sp, r7
    aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
    aeac:	4770      	bx	lr
    aeae:	bf00      	nop
    aeb0:	20002674 	.word	0x20002674

0000aeb4 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    aeb4:	b580      	push	{r7, lr}
    aeb6:	b082      	sub	sp, #8
    aeb8:	af00      	add	r7, sp, #0
    aeba:	4603      	mov	r3, r0
    aebc:	71fb      	strb	r3, [r7, #7]
    aebe:	460b      	mov	r3, r1
    aec0:	71bb      	strb	r3, [r7, #6]
    aec2:	4613      	mov	r3, r2
    aec4:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    aec6:	797b      	ldrb	r3, [r7, #5]
    aec8:	2b00      	cmp	r3, #0
    aeca:	d00b      	beq.n	aee4 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    aecc:	79bb      	ldrb	r3, [r7, #6]
    aece:	2240      	movs	r2, #64	; 0x40
    aed0:	fa02 f303 	lsl.w	r3, r2, r3
    aed4:	b2da      	uxtb	r2, r3
    aed6:	79fb      	ldrb	r3, [r7, #7]
    aed8:	4619      	mov	r1, r3
    aeda:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aede:	4b09      	ldr	r3, [pc, #36]	; (af04 <_usbd_ep_set_in_rdy+0x50>)
    aee0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    aee2:	e00a      	b.n	aefa <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    aee4:	79bb      	ldrb	r3, [r7, #6]
    aee6:	2240      	movs	r2, #64	; 0x40
    aee8:	fa02 f303 	lsl.w	r3, r2, r3
    aeec:	b2da      	uxtb	r2, r3
    aeee:	79fb      	ldrb	r3, [r7, #7]
    aef0:	4619      	mov	r1, r3
    aef2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aef6:	4b04      	ldr	r3, [pc, #16]	; (af08 <_usbd_ep_set_in_rdy+0x54>)
    aef8:	4798      	blx	r3
}
    aefa:	bf00      	nop
    aefc:	3708      	adds	r7, #8
    aefe:	46bd      	mov	sp, r7
    af00:	bd80      	pop	{r7, pc}
    af02:	bf00      	nop
    af04:	0000a4c1 	.word	0x0000a4c1
    af08:	0000a515 	.word	0x0000a515

0000af0c <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    af0c:	b580      	push	{r7, lr}
    af0e:	b082      	sub	sp, #8
    af10:	af00      	add	r7, sp, #0
    af12:	4603      	mov	r3, r0
    af14:	71fb      	strb	r3, [r7, #7]
    af16:	460b      	mov	r3, r1
    af18:	71bb      	strb	r3, [r7, #6]
    af1a:	4613      	mov	r3, r2
    af1c:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    af1e:	797b      	ldrb	r3, [r7, #5]
    af20:	2b00      	cmp	r3, #0
    af22:	d00b      	beq.n	af3c <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    af24:	79bb      	ldrb	r3, [r7, #6]
    af26:	2240      	movs	r2, #64	; 0x40
    af28:	fa02 f303 	lsl.w	r3, r2, r3
    af2c:	b2da      	uxtb	r2, r3
    af2e:	79fb      	ldrb	r3, [r7, #7]
    af30:	4619      	mov	r1, r3
    af32:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af36:	4b09      	ldr	r3, [pc, #36]	; (af5c <_usbd_ep_set_out_rdy+0x50>)
    af38:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    af3a:	e00a      	b.n	af52 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    af3c:	79bb      	ldrb	r3, [r7, #6]
    af3e:	2240      	movs	r2, #64	; 0x40
    af40:	fa02 f303 	lsl.w	r3, r2, r3
    af44:	b2da      	uxtb	r2, r3
    af46:	79fb      	ldrb	r3, [r7, #7]
    af48:	4619      	mov	r1, r3
    af4a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    af4e:	4b04      	ldr	r3, [pc, #16]	; (af60 <_usbd_ep_set_out_rdy+0x54>)
    af50:	4798      	blx	r3
}
    af52:	bf00      	nop
    af54:	3708      	adds	r7, #8
    af56:	46bd      	mov	sp, r7
    af58:	bd80      	pop	{r7, pc}
    af5a:	bf00      	nop
    af5c:	0000a515 	.word	0x0000a515
    af60:	0000a4c1 	.word	0x0000a4c1

0000af64 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    af64:	b480      	push	{r7}
    af66:	b083      	sub	sp, #12
    af68:	af00      	add	r7, sp, #0
    af6a:	4603      	mov	r3, r0
    af6c:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    af6e:	88fb      	ldrh	r3, [r7, #6]
    af70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    af74:	d820      	bhi.n	afb8 <_usbd_ep_pcksize_size+0x54>
    af76:	88fb      	ldrh	r3, [r7, #6]
    af78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    af7c:	d81a      	bhi.n	afb4 <_usbd_ep_pcksize_size+0x50>
    af7e:	88fb      	ldrh	r3, [r7, #6]
    af80:	2b80      	cmp	r3, #128	; 0x80
    af82:	d815      	bhi.n	afb0 <_usbd_ep_pcksize_size+0x4c>
    af84:	88fb      	ldrh	r3, [r7, #6]
    af86:	2b40      	cmp	r3, #64	; 0x40
    af88:	d810      	bhi.n	afac <_usbd_ep_pcksize_size+0x48>
    af8a:	88fb      	ldrh	r3, [r7, #6]
    af8c:	2b20      	cmp	r3, #32
    af8e:	d80b      	bhi.n	afa8 <_usbd_ep_pcksize_size+0x44>
    af90:	88fb      	ldrh	r3, [r7, #6]
    af92:	2b10      	cmp	r3, #16
    af94:	d806      	bhi.n	afa4 <_usbd_ep_pcksize_size+0x40>
    af96:	88fb      	ldrh	r3, [r7, #6]
    af98:	2b08      	cmp	r3, #8
    af9a:	bf8c      	ite	hi
    af9c:	2301      	movhi	r3, #1
    af9e:	2300      	movls	r3, #0
    afa0:	b2db      	uxtb	r3, r3
    afa2:	e00a      	b.n	afba <_usbd_ep_pcksize_size+0x56>
    afa4:	2302      	movs	r3, #2
    afa6:	e008      	b.n	afba <_usbd_ep_pcksize_size+0x56>
    afa8:	2303      	movs	r3, #3
    afaa:	e006      	b.n	afba <_usbd_ep_pcksize_size+0x56>
    afac:	2304      	movs	r3, #4
    afae:	e004      	b.n	afba <_usbd_ep_pcksize_size+0x56>
    afb0:	2305      	movs	r3, #5
    afb2:	e002      	b.n	afba <_usbd_ep_pcksize_size+0x56>
    afb4:	2306      	movs	r3, #6
    afb6:	e000      	b.n	afba <_usbd_ep_pcksize_size+0x56>
    afb8:	2307      	movs	r3, #7
}
    afba:	4618      	mov	r0, r3
    afbc:	370c      	adds	r7, #12
    afbe:	46bd      	mov	sp, r7
    afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    afc4:	4770      	bx	lr
	...

0000afc8 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    afc8:	b480      	push	{r7}
    afca:	b085      	sub	sp, #20
    afcc:	af00      	add	r7, sp, #0
    afce:	4603      	mov	r3, r0
    afd0:	460a      	mov	r2, r1
    afd2:	71fb      	strb	r3, [r7, #7]
    afd4:	4613      	mov	r3, r2
    afd6:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    afd8:	79fb      	ldrb	r3, [r7, #7]
    afda:	2b00      	cmp	r3, #0
    afdc:	d008      	beq.n	aff0 <_usb_d_dev_ept+0x28>
    afde:	79bb      	ldrb	r3, [r7, #6]
    afe0:	2b00      	cmp	r3, #0
    afe2:	d003      	beq.n	afec <_usb_d_dev_ept+0x24>
    afe4:	79fb      	ldrb	r3, [r7, #7]
    afe6:	3304      	adds	r3, #4
    afe8:	b2db      	uxtb	r3, r3
    afea:	e002      	b.n	aff2 <_usb_d_dev_ept+0x2a>
    afec:	79fb      	ldrb	r3, [r7, #7]
    afee:	e000      	b.n	aff2 <_usb_d_dev_ept+0x2a>
    aff0:	2300      	movs	r3, #0
    aff2:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    aff4:	7bfa      	ldrb	r2, [r7, #15]
    aff6:	4613      	mov	r3, r2
    aff8:	009b      	lsls	r3, r3, #2
    affa:	4413      	add	r3, r2
    affc:	009b      	lsls	r3, r3, #2
    affe:	3310      	adds	r3, #16
    b000:	4a04      	ldr	r2, [pc, #16]	; (b014 <_usb_d_dev_ept+0x4c>)
    b002:	4413      	add	r3, r2
    b004:	3304      	adds	r3, #4
}
    b006:	4618      	mov	r0, r3
    b008:	3714      	adds	r7, #20
    b00a:	46bd      	mov	sp, r7
    b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b010:	4770      	bx	lr
    b012:	bf00      	nop
    b014:	200025ac 	.word	0x200025ac

0000b018 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    b018:	b580      	push	{r7, lr}
    b01a:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    b01c:	2104      	movs	r1, #4
    b01e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b022:	4b03      	ldr	r3, [pc, #12]	; (b030 <_usb_d_dev_sof+0x18>)
    b024:	4798      	blx	r3
	dev_inst.callbacks.sof();
    b026:	4b03      	ldr	r3, [pc, #12]	; (b034 <_usb_d_dev_sof+0x1c>)
    b028:	681b      	ldr	r3, [r3, #0]
    b02a:	4798      	blx	r3
}
    b02c:	bf00      	nop
    b02e:	bd80      	pop	{r7, pc}
    b030:	0000a68f 	.word	0x0000a68f
    b034:	200025ac 	.word	0x200025ac

0000b038 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    b038:	b580      	push	{r7, lr}
    b03a:	b084      	sub	sp, #16
    b03c:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    b03e:	2300      	movs	r3, #0
    b040:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b042:	f240 2101 	movw	r1, #513	; 0x201
    b046:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b04a:	4b1a      	ldr	r3, [pc, #104]	; (b0b4 <_usb_d_dev_lpmsusp+0x7c>)
    b04c:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b04e:	f240 2101 	movw	r1, #513	; 0x201
    b052:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b056:	4b18      	ldr	r3, [pc, #96]	; (b0b8 <_usb_d_dev_lpmsusp+0x80>)
    b058:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b05a:	2170      	movs	r1, #112	; 0x70
    b05c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b060:	4b16      	ldr	r3, [pc, #88]	; (b0bc <_usb_d_dev_lpmsusp+0x84>)
    b062:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    b064:	2300      	movs	r3, #0
    b066:	73fb      	strb	r3, [r7, #15]
    b068:	e018      	b.n	b09c <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    b06a:	7bfb      	ldrb	r3, [r7, #15]
    b06c:	015b      	lsls	r3, r3, #5
    b06e:	4a14      	ldr	r2, [pc, #80]	; (b0c0 <_usb_d_dev_lpmsusp+0x88>)
    b070:	4413      	add	r3, r2
    b072:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    b074:	687b      	ldr	r3, [r7, #4]
    b076:	891b      	ldrh	r3, [r3, #8]
    b078:	f3c3 0303 	ubfx	r3, r3, #0, #4
    b07c:	b2db      	uxtb	r3, r3
    b07e:	2b03      	cmp	r3, #3
    b080:	d109      	bne.n	b096 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    b082:	687b      	ldr	r3, [r7, #4]
    b084:	891b      	ldrh	r3, [r3, #8]
    b086:	f3c3 130a 	ubfx	r3, r3, #4, #11
    b08a:	b29b      	uxth	r3, r3
    b08c:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    b08e:	687b      	ldr	r3, [r7, #4]
    b090:	2200      	movs	r2, #0
    b092:	811a      	strh	r2, [r3, #8]
			break;
    b094:	e005      	b.n	b0a2 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    b096:	7bfb      	ldrb	r3, [r7, #15]
    b098:	3301      	adds	r3, #1
    b09a:	73fb      	strb	r3, [r7, #15]
    b09c:	7bfb      	ldrb	r3, [r7, #15]
    b09e:	2b03      	cmp	r3, #3
    b0a0:	d9e3      	bls.n	b06a <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    b0a2:	4b08      	ldr	r3, [pc, #32]	; (b0c4 <_usb_d_dev_lpmsusp+0x8c>)
    b0a4:	685b      	ldr	r3, [r3, #4]
    b0a6:	68b9      	ldr	r1, [r7, #8]
    b0a8:	2003      	movs	r0, #3
    b0aa:	4798      	blx	r3
}
    b0ac:	bf00      	nop
    b0ae:	3710      	adds	r7, #16
    b0b0:	46bd      	mov	sp, r7
    b0b2:	bd80      	pop	{r7, pc}
    b0b4:	0000a68f 	.word	0x0000a68f
    b0b8:	0000a6e5 	.word	0x0000a6e5
    b0bc:	0000a6ad 	.word	0x0000a6ad
    b0c0:	20002674 	.word	0x20002674
    b0c4:	200025ac 	.word	0x200025ac

0000b0c8 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    b0c8:	b580      	push	{r7, lr}
    b0ca:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    b0cc:	2180      	movs	r1, #128	; 0x80
    b0ce:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b0d2:	4b04      	ldr	r3, [pc, #16]	; (b0e4 <_usb_d_dev_ramerr+0x1c>)
    b0d4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    b0d6:	4b04      	ldr	r3, [pc, #16]	; (b0e8 <_usb_d_dev_ramerr+0x20>)
    b0d8:	685b      	ldr	r3, [r3, #4]
    b0da:	2100      	movs	r1, #0
    b0dc:	2005      	movs	r0, #5
    b0de:	4798      	blx	r3
}
    b0e0:	bf00      	nop
    b0e2:	bd80      	pop	{r7, pc}
    b0e4:	0000a68f 	.word	0x0000a68f
    b0e8:	200025ac 	.word	0x200025ac

0000b0ec <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    b0ec:	b580      	push	{r7, lr}
    b0ee:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b0f0:	2170      	movs	r1, #112	; 0x70
    b0f2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b0f6:	4b0b      	ldr	r3, [pc, #44]	; (b124 <_usb_d_dev_wakeup+0x38>)
    b0f8:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b0fa:	2170      	movs	r1, #112	; 0x70
    b0fc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b100:	4b09      	ldr	r3, [pc, #36]	; (b128 <_usb_d_dev_wakeup+0x3c>)
    b102:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b104:	f240 2101 	movw	r1, #513	; 0x201
    b108:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b10c:	4b07      	ldr	r3, [pc, #28]	; (b12c <_usb_d_dev_wakeup+0x40>)
    b10e:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    b110:	2000      	movs	r0, #0
    b112:	4b07      	ldr	r3, [pc, #28]	; (b130 <_usb_d_dev_wakeup+0x44>)
    b114:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    b116:	4b07      	ldr	r3, [pc, #28]	; (b134 <_usb_d_dev_wakeup+0x48>)
    b118:	685b      	ldr	r3, [r3, #4]
    b11a:	2100      	movs	r1, #0
    b11c:	2002      	movs	r0, #2
    b11e:	4798      	blx	r3
}
    b120:	bf00      	nop
    b122:	bd80      	pop	{r7, pc}
    b124:	0000a68f 	.word	0x0000a68f
    b128:	0000a6e5 	.word	0x0000a6e5
    b12c:	0000a6ad 	.word	0x0000a6ad
    b130:	0000a98d 	.word	0x0000a98d
    b134:	200025ac 	.word	0x200025ac

0000b138 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    b138:	b580      	push	{r7, lr}
    b13a:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    b13c:	2200      	movs	r2, #0
    b13e:	2100      	movs	r1, #0
    b140:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b144:	4b0d      	ldr	r3, [pc, #52]	; (b17c <_usb_d_dev_reset+0x44>)
    b146:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    b148:	2108      	movs	r1, #8
    b14a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b14e:	4b0c      	ldr	r3, [pc, #48]	; (b180 <_usb_d_dev_reset+0x48>)
    b150:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b152:	2170      	movs	r1, #112	; 0x70
    b154:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b158:	4b0a      	ldr	r3, [pc, #40]	; (b184 <_usb_d_dev_reset+0x4c>)
    b15a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b15c:	f240 2101 	movw	r1, #513	; 0x201
    b160:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b164:	4b08      	ldr	r3, [pc, #32]	; (b188 <_usb_d_dev_reset+0x50>)
    b166:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    b168:	4b08      	ldr	r3, [pc, #32]	; (b18c <_usb_d_dev_reset+0x54>)
    b16a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    b16c:	4b08      	ldr	r3, [pc, #32]	; (b190 <_usb_d_dev_reset+0x58>)
    b16e:	685b      	ldr	r3, [r3, #4]
    b170:	2100      	movs	r1, #0
    b172:	2001      	movs	r0, #1
    b174:	4798      	blx	r3
}
    b176:	bf00      	nop
    b178:	bd80      	pop	{r7, pc}
    b17a:	bf00      	nop
    b17c:	0000a625 	.word	0x0000a625
    b180:	0000a68f 	.word	0x0000a68f
    b184:	0000a6e5 	.word	0x0000a6e5
    b188:	0000a6ad 	.word	0x0000a6ad
    b18c:	0000bcf5 	.word	0x0000bcf5
    b190:	200025ac 	.word	0x200025ac

0000b194 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    b194:	b580      	push	{r7, lr}
    b196:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b198:	f240 2101 	movw	r1, #513	; 0x201
    b19c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b1a0:	4b09      	ldr	r3, [pc, #36]	; (b1c8 <_usb_d_dev_suspend+0x34>)
    b1a2:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    b1a4:	f240 2101 	movw	r1, #513	; 0x201
    b1a8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b1ac:	4b07      	ldr	r3, [pc, #28]	; (b1cc <_usb_d_dev_suspend+0x38>)
    b1ae:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    b1b0:	2170      	movs	r1, #112	; 0x70
    b1b2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b1b6:	4b06      	ldr	r3, [pc, #24]	; (b1d0 <_usb_d_dev_suspend+0x3c>)
    b1b8:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    b1ba:	4b06      	ldr	r3, [pc, #24]	; (b1d4 <_usb_d_dev_suspend+0x40>)
    b1bc:	685b      	ldr	r3, [r3, #4]
    b1be:	2100      	movs	r1, #0
    b1c0:	2004      	movs	r0, #4
    b1c2:	4798      	blx	r3
}
    b1c4:	bf00      	nop
    b1c6:	bd80      	pop	{r7, pc}
    b1c8:	0000a68f 	.word	0x0000a68f
    b1cc:	0000a6e5 	.word	0x0000a6e5
    b1d0:	0000a6ad 	.word	0x0000a6ad
    b1d4:	200025ac 	.word	0x200025ac

0000b1d8 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    b1d8:	b580      	push	{r7, lr}
    b1da:	b082      	sub	sp, #8
    b1dc:	af00      	add	r7, sp, #0
	bool     rc    = true;
    b1de:	2301      	movs	r3, #1
    b1e0:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    b1e2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b1e6:	4b22      	ldr	r3, [pc, #136]	; (b270 <_usb_d_dev_handle_nep+0x98>)
    b1e8:	4798      	blx	r3
    b1ea:	4603      	mov	r3, r0
    b1ec:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    b1ee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b1f2:	4b20      	ldr	r3, [pc, #128]	; (b274 <_usb_d_dev_handle_nep+0x9c>)
    b1f4:	4798      	blx	r3
    b1f6:	4603      	mov	r3, r0
    b1f8:	461a      	mov	r2, r3
    b1fa:	88bb      	ldrh	r3, [r7, #4]
    b1fc:	4013      	ands	r3, r2
    b1fe:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    b200:	88bb      	ldrh	r3, [r7, #4]
    b202:	f003 0304 	and.w	r3, r3, #4
    b206:	2b00      	cmp	r3, #0
    b208:	d003      	beq.n	b212 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    b20a:	4b1b      	ldr	r3, [pc, #108]	; (b278 <_usb_d_dev_handle_nep+0xa0>)
    b20c:	4798      	blx	r3
		return true;
    b20e:	2301      	movs	r3, #1
    b210:	e02a      	b.n	b268 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    b212:	88bb      	ldrh	r3, [r7, #4]
    b214:	f403 7300 	and.w	r3, r3, #512	; 0x200
    b218:	2b00      	cmp	r3, #0
    b21a:	d002      	beq.n	b222 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    b21c:	4b17      	ldr	r3, [pc, #92]	; (b27c <_usb_d_dev_handle_nep+0xa4>)
    b21e:	4798      	blx	r3
    b220:	e021      	b.n	b266 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    b222:	88bb      	ldrh	r3, [r7, #4]
    b224:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b228:	2b00      	cmp	r3, #0
    b22a:	d002      	beq.n	b232 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    b22c:	4b14      	ldr	r3, [pc, #80]	; (b280 <_usb_d_dev_handle_nep+0xa8>)
    b22e:	4798      	blx	r3
    b230:	e019      	b.n	b266 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    b232:	88bb      	ldrh	r3, [r7, #4]
    b234:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b238:	2b00      	cmp	r3, #0
    b23a:	d002      	beq.n	b242 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    b23c:	4b11      	ldr	r3, [pc, #68]	; (b284 <_usb_d_dev_handle_nep+0xac>)
    b23e:	4798      	blx	r3
    b240:	e011      	b.n	b266 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    b242:	88bb      	ldrh	r3, [r7, #4]
    b244:	f003 0308 	and.w	r3, r3, #8
    b248:	2b00      	cmp	r3, #0
    b24a:	d002      	beq.n	b252 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    b24c:	4b0e      	ldr	r3, [pc, #56]	; (b288 <_usb_d_dev_handle_nep+0xb0>)
    b24e:	4798      	blx	r3
    b250:	e009      	b.n	b266 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    b252:	88bb      	ldrh	r3, [r7, #4]
    b254:	f003 0301 	and.w	r3, r3, #1
    b258:	2b00      	cmp	r3, #0
    b25a:	d002      	beq.n	b262 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    b25c:	4b0b      	ldr	r3, [pc, #44]	; (b28c <_usb_d_dev_handle_nep+0xb4>)
    b25e:	4798      	blx	r3
    b260:	e001      	b.n	b266 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    b262:	2300      	movs	r3, #0
    b264:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    b266:	79fb      	ldrb	r3, [r7, #7]
}
    b268:	4618      	mov	r0, r3
    b26a:	3708      	adds	r7, #8
    b26c:	46bd      	mov	sp, r7
    b26e:	bd80      	pop	{r7, pc}
    b270:	0000a675 	.word	0x0000a675
    b274:	0000a6cb 	.word	0x0000a6cb
    b278:	0000b019 	.word	0x0000b019
    b27c:	0000b039 	.word	0x0000b039
    b280:	0000b0c9 	.word	0x0000b0c9
    b284:	0000b0ed 	.word	0x0000b0ed
    b288:	0000b139 	.word	0x0000b139
    b28c:	0000b195 	.word	0x0000b195

0000b290 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    b290:	b590      	push	{r4, r7, lr}
    b292:	b089      	sub	sp, #36	; 0x24
    b294:	af00      	add	r7, sp, #0
    b296:	6078      	str	r0, [r7, #4]
    b298:	460b      	mov	r3, r1
    b29a:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    b29c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b2a0:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    b2a2:	687b      	ldr	r3, [r7, #4]
    b2a4:	7c9b      	ldrb	r3, [r3, #18]
    b2a6:	f003 030f 	and.w	r3, r3, #15
    b2aa:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    b2ac:	7dfb      	ldrb	r3, [r7, #23]
    b2ae:	015b      	lsls	r3, r3, #5
    b2b0:	4a73      	ldr	r2, [pc, #460]	; (b480 <_usb_d_dev_in_next+0x1f0>)
    b2b2:	4413      	add	r3, r2
    b2b4:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    b2b6:	78fb      	ldrb	r3, [r7, #3]
    b2b8:	2b00      	cmp	r3, #0
    b2ba:	d006      	beq.n	b2ca <_usb_d_dev_in_next+0x3a>
    b2bc:	693b      	ldr	r3, [r7, #16]
    b2be:	3310      	adds	r3, #16
    b2c0:	685b      	ldr	r3, [r3, #4]
    b2c2:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b2c6:	b29b      	uxth	r3, r3
    b2c8:	e000      	b.n	b2cc <_usb_d_dev_in_next+0x3c>
    b2ca:	2300      	movs	r3, #0
    b2cc:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    b2ce:	687b      	ldr	r3, [r7, #4]
    b2d0:	8a1b      	ldrh	r3, [r3, #16]
    b2d2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b2d6:	4293      	cmp	r3, r2
    b2d8:	d103      	bne.n	b2e2 <_usb_d_dev_in_next+0x52>
    b2da:	687b      	ldr	r3, [r7, #4]
    b2dc:	8a1b      	ldrh	r3, [r3, #16]
    b2de:	b21b      	sxth	r3, r3
    b2e0:	e004      	b.n	b2ec <_usb_d_dev_in_next+0x5c>
    b2e2:	687b      	ldr	r3, [r7, #4]
    b2e4:	8a1b      	ldrh	r3, [r3, #16]
    b2e6:	3b01      	subs	r3, #1
    b2e8:	b29b      	uxth	r3, r3
    b2ea:	b21b      	sxth	r3, r3
    b2ec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    b2f0:	4013      	ands	r3, r2
    b2f2:	b21b      	sxth	r3, r3
    b2f4:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    b2f6:	2300      	movs	r3, #0
    b2f8:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    b2fa:	687b      	ldr	r3, [r7, #4]
    b2fc:	7cdb      	ldrb	r3, [r3, #19]
    b2fe:	f003 0307 	and.w	r3, r3, #7
    b302:	b2db      	uxtb	r3, r3
    b304:	2b01      	cmp	r3, #1
    b306:	bf0c      	ite	eq
    b308:	2301      	moveq	r3, #1
    b30a:	2300      	movne	r3, #0
    b30c:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    b30e:	78fb      	ldrb	r3, [r7, #3]
    b310:	2b00      	cmp	r3, #0
    b312:	d004      	beq.n	b31e <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    b314:	7dfb      	ldrb	r3, [r7, #23]
    b316:	2101      	movs	r1, #1
    b318:	4618      	mov	r0, r3
    b31a:	4b5a      	ldr	r3, [pc, #360]	; (b484 <_usb_d_dev_in_next+0x1f4>)
    b31c:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    b31e:	687b      	ldr	r3, [r7, #4]
    b320:	689a      	ldr	r2, [r3, #8]
    b322:	89fb      	ldrh	r3, [r7, #14]
    b324:	441a      	add	r2, r3
    b326:	687b      	ldr	r3, [r7, #4]
    b328:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    b32a:	687b      	ldr	r3, [r7, #4]
    b32c:	689a      	ldr	r2, [r3, #8]
    b32e:	687b      	ldr	r3, [r7, #4]
    b330:	685b      	ldr	r3, [r3, #4]
    b332:	429a      	cmp	r2, r3
    b334:	d243      	bcs.n	b3be <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    b336:	687b      	ldr	r3, [r7, #4]
    b338:	685b      	ldr	r3, [r3, #4]
    b33a:	b29a      	uxth	r2, r3
    b33c:	687b      	ldr	r3, [r7, #4]
    b33e:	689b      	ldr	r3, [r3, #8]
    b340:	b29b      	uxth	r3, r3
    b342:	1ad3      	subs	r3, r2, r3
    b344:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    b346:	687b      	ldr	r3, [r7, #4]
    b348:	7cdb      	ldrb	r3, [r3, #19]
    b34a:	f003 0320 	and.w	r3, r3, #32
    b34e:	b2db      	uxtb	r3, r3
    b350:	2b00      	cmp	r3, #0
    b352:	d01b      	beq.n	b38c <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    b354:	687b      	ldr	r3, [r7, #4]
    b356:	8a1b      	ldrh	r3, [r3, #16]
    b358:	8bfa      	ldrh	r2, [r7, #30]
    b35a:	429a      	cmp	r2, r3
    b35c:	d902      	bls.n	b364 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    b35e:	687b      	ldr	r3, [r7, #4]
    b360:	8a1b      	ldrh	r3, [r3, #16]
    b362:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    b364:	687b      	ldr	r3, [r7, #4]
    b366:	68d8      	ldr	r0, [r3, #12]
    b368:	687b      	ldr	r3, [r7, #4]
    b36a:	681a      	ldr	r2, [r3, #0]
    b36c:	687b      	ldr	r3, [r7, #4]
    b36e:	689b      	ldr	r3, [r3, #8]
    b370:	4413      	add	r3, r2
    b372:	8bfa      	ldrh	r2, [r7, #30]
    b374:	4619      	mov	r1, r3
    b376:	4b44      	ldr	r3, [pc, #272]	; (b488 <_usb_d_dev_in_next+0x1f8>)
    b378:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    b37a:	687b      	ldr	r3, [r7, #4]
    b37c:	68db      	ldr	r3, [r3, #12]
    b37e:	461a      	mov	r2, r3
    b380:	7dfb      	ldrb	r3, [r7, #23]
    b382:	2101      	movs	r1, #1
    b384:	4618      	mov	r0, r3
    b386:	4b41      	ldr	r3, [pc, #260]	; (b48c <_usb_d_dev_in_next+0x1fc>)
    b388:	4798      	blx	r3
    b38a:	e011      	b.n	b3b0 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    b38c:	8bfb      	ldrh	r3, [r7, #30]
    b38e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    b392:	d902      	bls.n	b39a <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    b394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    b398:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    b39a:	687b      	ldr	r3, [r7, #4]
    b39c:	681a      	ldr	r2, [r3, #0]
    b39e:	687b      	ldr	r3, [r7, #4]
    b3a0:	689b      	ldr	r3, [r3, #8]
    b3a2:	4413      	add	r3, r2
    b3a4:	461a      	mov	r2, r3
    b3a6:	7dfb      	ldrb	r3, [r7, #23]
    b3a8:	2101      	movs	r1, #1
    b3aa:	4618      	mov	r0, r3
    b3ac:	4b37      	ldr	r3, [pc, #220]	; (b48c <_usb_d_dev_in_next+0x1fc>)
    b3ae:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    b3b0:	8bfa      	ldrh	r2, [r7, #30]
    b3b2:	7df8      	ldrb	r0, [r7, #23]
    b3b4:	2300      	movs	r3, #0
    b3b6:	2101      	movs	r1, #1
    b3b8:	4c35      	ldr	r4, [pc, #212]	; (b490 <_usb_d_dev_in_next+0x200>)
    b3ba:	47a0      	blx	r4
		goto _in_tx_exec;
    b3bc:	e041      	b.n	b442 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    b3be:	687b      	ldr	r3, [r7, #4]
    b3c0:	7cdb      	ldrb	r3, [r3, #19]
    b3c2:	f003 0310 	and.w	r3, r3, #16
    b3c6:	b2db      	uxtb	r3, r3
    b3c8:	2b00      	cmp	r3, #0
    b3ca:	d00b      	beq.n	b3e4 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    b3cc:	687a      	ldr	r2, [r7, #4]
    b3ce:	7cd3      	ldrb	r3, [r2, #19]
    b3d0:	f36f 1304 	bfc	r3, #4, #1
    b3d4:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    b3d6:	7df8      	ldrb	r0, [r7, #23]
    b3d8:	2300      	movs	r3, #0
    b3da:	2200      	movs	r2, #0
    b3dc:	2101      	movs	r1, #1
    b3de:	4c2c      	ldr	r4, [pc, #176]	; (b490 <_usb_d_dev_in_next+0x200>)
    b3e0:	47a0      	blx	r4
		goto _in_tx_exec;
    b3e2:	e02e      	b.n	b442 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    b3e4:	7afb      	ldrb	r3, [r7, #11]
    b3e6:	2b00      	cmp	r3, #0
    b3e8:	d006      	beq.n	b3f8 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    b3ea:	7dfb      	ldrb	r3, [r7, #23]
    b3ec:	224b      	movs	r2, #75	; 0x4b
    b3ee:	4619      	mov	r1, r3
    b3f0:	69b8      	ldr	r0, [r7, #24]
    b3f2:	4b28      	ldr	r3, [pc, #160]	; (b494 <_usb_d_dev_in_next+0x204>)
    b3f4:	4798      	blx	r3
    b3f6:	e005      	b.n	b404 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    b3f8:	7dfb      	ldrb	r3, [r7, #23]
    b3fa:	224a      	movs	r2, #74	; 0x4a
    b3fc:	4619      	mov	r1, r3
    b3fe:	69b8      	ldr	r0, [r7, #24]
    b400:	4b24      	ldr	r3, [pc, #144]	; (b494 <_usb_d_dev_in_next+0x204>)
    b402:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    b404:	687b      	ldr	r3, [r7, #4]
    b406:	8a1b      	ldrh	r3, [r3, #16]
    b408:	89ba      	ldrh	r2, [r7, #12]
    b40a:	429a      	cmp	r2, r3
    b40c:	d114      	bne.n	b438 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    b40e:	687a      	ldr	r2, [r7, #4]
    b410:	7cd3      	ldrb	r3, [r2, #19]
    b412:	f36f 1386 	bfc	r3, #6, #1
    b416:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    b418:	4b1f      	ldr	r3, [pc, #124]	; (b498 <_usb_d_dev_in_next+0x208>)
    b41a:	68db      	ldr	r3, [r3, #12]
    b41c:	687a      	ldr	r2, [r7, #4]
    b41e:	7c90      	ldrb	r0, [r2, #18]
    b420:	687a      	ldr	r2, [r7, #4]
    b422:	6892      	ldr	r2, [r2, #8]
    b424:	4611      	mov	r1, r2
    b426:	4798      	blx	r3
    b428:	4603      	mov	r3, r0
    b42a:	2b00      	cmp	r3, #0
    b42c:	d124      	bne.n	b478 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    b42e:	687a      	ldr	r2, [r7, #4]
    b430:	7cd3      	ldrb	r3, [r2, #19]
    b432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b436:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    b438:	2100      	movs	r1, #0
    b43a:	6878      	ldr	r0, [r7, #4]
    b43c:	4b17      	ldr	r3, [pc, #92]	; (b49c <_usb_d_dev_in_next+0x20c>)
    b43e:	4798      	blx	r3
	return;
    b440:	e01b      	b.n	b47a <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    b442:	78fb      	ldrb	r3, [r7, #3]
    b444:	f083 0301 	eor.w	r3, r3, #1
    b448:	b2db      	uxtb	r3, r3
    b44a:	2b00      	cmp	r3, #0
    b44c:	d00d      	beq.n	b46a <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    b44e:	7afb      	ldrb	r3, [r7, #11]
    b450:	2b00      	cmp	r3, #0
    b452:	d002      	beq.n	b45a <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    b454:	234e      	movs	r3, #78	; 0x4e
    b456:	777b      	strb	r3, [r7, #29]
    b458:	e001      	b.n	b45e <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    b45a:	234a      	movs	r3, #74	; 0x4a
    b45c:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    b45e:	7f7a      	ldrb	r2, [r7, #29]
    b460:	7dfb      	ldrb	r3, [r7, #23]
    b462:	4619      	mov	r1, r3
    b464:	69b8      	ldr	r0, [r7, #24]
    b466:	4b0e      	ldr	r3, [pc, #56]	; (b4a0 <_usb_d_dev_in_next+0x210>)
    b468:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    b46a:	7dfb      	ldrb	r3, [r7, #23]
    b46c:	2201      	movs	r2, #1
    b46e:	2101      	movs	r1, #1
    b470:	4618      	mov	r0, r3
    b472:	4b0c      	ldr	r3, [pc, #48]	; (b4a4 <_usb_d_dev_in_next+0x214>)
    b474:	4798      	blx	r3
    b476:	e000      	b.n	b47a <_usb_d_dev_in_next+0x1ea>
			return;
    b478:	bf00      	nop
}
    b47a:	3724      	adds	r7, #36	; 0x24
    b47c:	46bd      	mov	sp, r7
    b47e:	bd90      	pop	{r4, r7, pc}
    b480:	20002674 	.word	0x20002674
    b484:	0000ac89 	.word	0x0000ac89
    b488:	0001ab91 	.word	0x0001ab91
    b48c:	0000acb5 	.word	0x0000acb5
    b490:	0000adfd 	.word	0x0000adfd
    b494:	0000a595 	.word	0x0000a595
    b498:	200025ac 	.word	0x200025ac
    b49c:	0000c5b9 	.word	0x0000c5b9
    b4a0:	0000a569 	.word	0x0000a569
    b4a4:	0000aeb5 	.word	0x0000aeb5

0000b4a8 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    b4a8:	b590      	push	{r4, r7, lr}
    b4aa:	b08b      	sub	sp, #44	; 0x2c
    b4ac:	af00      	add	r7, sp, #0
    b4ae:	6078      	str	r0, [r7, #4]
    b4b0:	460b      	mov	r3, r1
    b4b2:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    b4b4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b4b8:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    b4ba:	687b      	ldr	r3, [r7, #4]
    b4bc:	7c9b      	ldrb	r3, [r3, #18]
    b4be:	f003 030f 	and.w	r3, r3, #15
    b4c2:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    b4c4:	7ffb      	ldrb	r3, [r7, #31]
    b4c6:	015b      	lsls	r3, r3, #5
    b4c8:	4a94      	ldr	r2, [pc, #592]	; (b71c <_usb_d_dev_out_next+0x274>)
    b4ca:	4413      	add	r3, r2
    b4cc:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    b4ce:	78fb      	ldrb	r3, [r7, #3]
    b4d0:	2b00      	cmp	r3, #0
    b4d2:	d005      	beq.n	b4e0 <_usb_d_dev_out_next+0x38>
    b4d4:	69bb      	ldr	r3, [r7, #24]
    b4d6:	685b      	ldr	r3, [r3, #4]
    b4d8:	f3c3 338d 	ubfx	r3, r3, #14, #14
    b4dc:	b29b      	uxth	r3, r3
    b4de:	e000      	b.n	b4e2 <_usb_d_dev_out_next+0x3a>
    b4e0:	2300      	movs	r3, #0
    b4e2:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    b4e4:	78fb      	ldrb	r3, [r7, #3]
    b4e6:	2b00      	cmp	r3, #0
    b4e8:	d005      	beq.n	b4f6 <_usb_d_dev_out_next+0x4e>
    b4ea:	69bb      	ldr	r3, [r7, #24]
    b4ec:	685b      	ldr	r3, [r3, #4]
    b4ee:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b4f2:	b29b      	uxth	r3, r3
    b4f4:	e000      	b.n	b4f8 <_usb_d_dev_out_next+0x50>
    b4f6:	2300      	movs	r3, #0
    b4f8:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b4fa:	687b      	ldr	r3, [r7, #4]
    b4fc:	8a1b      	ldrh	r3, [r3, #16]
    b4fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b502:	4293      	cmp	r3, r2
    b504:	d004      	beq.n	b510 <_usb_d_dev_out_next+0x68>
    b506:	687b      	ldr	r3, [r7, #4]
    b508:	8a1b      	ldrh	r3, [r3, #16]
    b50a:	3b01      	subs	r3, #1
    b50c:	b29b      	uxth	r3, r3
    b50e:	e001      	b.n	b514 <_usb_d_dev_out_next+0x6c>
    b510:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b514:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    b516:	8aba      	ldrh	r2, [r7, #20]
    b518:	8a7b      	ldrh	r3, [r7, #18]
    b51a:	4013      	ands	r3, r2
    b51c:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b51e:	687b      	ldr	r3, [r7, #4]
    b520:	7cdb      	ldrb	r3, [r3, #19]
    b522:	f003 0307 	and.w	r3, r3, #7
    b526:	b2db      	uxtb	r3, r3
    b528:	2b01      	cmp	r3, #1
    b52a:	bf0c      	ite	eq
    b52c:	2301      	moveq	r3, #1
    b52e:	2300      	movne	r3, #0
    b530:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    b532:	78fb      	ldrb	r3, [r7, #3]
    b534:	2b00      	cmp	r3, #0
    b536:	d004      	beq.n	b542 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    b538:	7ffb      	ldrb	r3, [r7, #31]
    b53a:	2100      	movs	r1, #0
    b53c:	4618      	mov	r0, r3
    b53e:	4b78      	ldr	r3, [pc, #480]	; (b720 <_usb_d_dev_out_next+0x278>)
    b540:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    b542:	687b      	ldr	r3, [r7, #4]
    b544:	7cdb      	ldrb	r3, [r3, #19]
    b546:	f003 0320 	and.w	r3, r3, #32
    b54a:	b2db      	uxtb	r3, r3
    b54c:	2b00      	cmp	r3, #0
    b54e:	d01c      	beq.n	b58a <_usb_d_dev_out_next+0xe2>
    b550:	687b      	ldr	r3, [r7, #4]
    b552:	685b      	ldr	r3, [r3, #4]
    b554:	2b00      	cmp	r3, #0
    b556:	d018      	beq.n	b58a <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    b558:	687b      	ldr	r3, [r7, #4]
    b55a:	685b      	ldr	r3, [r3, #4]
    b55c:	b29a      	uxth	r2, r3
    b55e:	687b      	ldr	r3, [r7, #4]
    b560:	689b      	ldr	r3, [r3, #8]
    b562:	b29b      	uxth	r3, r3
    b564:	1ad3      	subs	r3, r2, r3
    b566:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    b568:	687b      	ldr	r3, [r7, #4]
    b56a:	681a      	ldr	r2, [r3, #0]
    b56c:	687b      	ldr	r3, [r7, #4]
    b56e:	689b      	ldr	r3, [r3, #8]
    b570:	18d0      	adds	r0, r2, r3
    b572:	687b      	ldr	r3, [r7, #4]
    b574:	68d9      	ldr	r1, [r3, #12]
    b576:	89ba      	ldrh	r2, [r7, #12]
    b578:	8a3b      	ldrh	r3, [r7, #16]
    b57a:	429a      	cmp	r2, r3
    b57c:	d901      	bls.n	b582 <_usb_d_dev_out_next+0xda>
    b57e:	8a3b      	ldrh	r3, [r7, #16]
    b580:	e000      	b.n	b584 <_usb_d_dev_out_next+0xdc>
    b582:	89bb      	ldrh	r3, [r7, #12]
    b584:	461a      	mov	r2, r3
    b586:	4b67      	ldr	r3, [pc, #412]	; (b724 <_usb_d_dev_out_next+0x27c>)
    b588:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    b58a:	687b      	ldr	r3, [r7, #4]
    b58c:	685b      	ldr	r3, [r3, #4]
    b58e:	2b00      	cmp	r3, #0
    b590:	d121      	bne.n	b5d6 <_usb_d_dev_out_next+0x12e>
    b592:	687b      	ldr	r3, [r7, #4]
    b594:	7cdb      	ldrb	r3, [r3, #19]
    b596:	f003 0310 	and.w	r3, r3, #16
    b59a:	b2db      	uxtb	r3, r3
    b59c:	2b00      	cmp	r3, #0
    b59e:	d01a      	beq.n	b5d6 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    b5a0:	687a      	ldr	r2, [r7, #4]
    b5a2:	7cd3      	ldrb	r3, [r2, #19]
    b5a4:	f36f 1304 	bfc	r3, #4, #1
    b5a8:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    b5aa:	687a      	ldr	r2, [r7, #4]
    b5ac:	7cd3      	ldrb	r3, [r2, #19]
    b5ae:	f043 0320 	orr.w	r3, r3, #32
    b5b2:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b5b4:	687b      	ldr	r3, [r7, #4]
    b5b6:	68db      	ldr	r3, [r3, #12]
    b5b8:	461a      	mov	r2, r3
    b5ba:	7ffb      	ldrb	r3, [r7, #31]
    b5bc:	2100      	movs	r1, #0
    b5be:	4618      	mov	r0, r3
    b5c0:	4b59      	ldr	r3, [pc, #356]	; (b728 <_usb_d_dev_out_next+0x280>)
    b5c2:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    b5c4:	687b      	ldr	r3, [r7, #4]
    b5c6:	8a1b      	ldrh	r3, [r3, #16]
    b5c8:	461a      	mov	r2, r3
    b5ca:	7ff8      	ldrb	r0, [r7, #31]
    b5cc:	2300      	movs	r3, #0
    b5ce:	2100      	movs	r1, #0
    b5d0:	4c56      	ldr	r4, [pc, #344]	; (b72c <_usb_d_dev_out_next+0x284>)
    b5d2:	47a0      	blx	r4
		goto _out_rx_exec;
    b5d4:	e090      	b.n	b6f8 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    b5d6:	78fb      	ldrb	r3, [r7, #3]
    b5d8:	2b00      	cmp	r3, #0
    b5da:	d010      	beq.n	b5fe <_usb_d_dev_out_next+0x156>
    b5dc:	687b      	ldr	r3, [r7, #4]
    b5de:	8a1b      	ldrh	r3, [r3, #16]
    b5e0:	8a3a      	ldrh	r2, [r7, #16]
    b5e2:	429a      	cmp	r2, r3
    b5e4:	d20b      	bcs.n	b5fe <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    b5e6:	687a      	ldr	r2, [r7, #4]
    b5e8:	7cd3      	ldrb	r3, [r2, #19]
    b5ea:	f36f 1304 	bfc	r3, #4, #1
    b5ee:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    b5f0:	687b      	ldr	r3, [r7, #4]
    b5f2:	689a      	ldr	r2, [r3, #8]
    b5f4:	8abb      	ldrh	r3, [r7, #20]
    b5f6:	441a      	add	r2, r3
    b5f8:	687b      	ldr	r3, [r7, #4]
    b5fa:	609a      	str	r2, [r3, #8]
    b5fc:	e05c      	b.n	b6b8 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    b5fe:	687b      	ldr	r3, [r7, #4]
    b600:	689a      	ldr	r2, [r3, #8]
    b602:	8afb      	ldrh	r3, [r7, #22]
    b604:	441a      	add	r2, r3
    b606:	687b      	ldr	r3, [r7, #4]
    b608:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    b60a:	687b      	ldr	r3, [r7, #4]
    b60c:	689a      	ldr	r2, [r3, #8]
    b60e:	687b      	ldr	r3, [r7, #4]
    b610:	685b      	ldr	r3, [r3, #4]
    b612:	429a      	cmp	r2, r3
    b614:	d250      	bcs.n	b6b8 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    b616:	687b      	ldr	r3, [r7, #4]
    b618:	685b      	ldr	r3, [r3, #4]
    b61a:	b29a      	uxth	r2, r3
    b61c:	687b      	ldr	r3, [r7, #4]
    b61e:	689b      	ldr	r3, [r3, #8]
    b620:	b29b      	uxth	r3, r3
    b622:	1ad3      	subs	r3, r2, r3
    b624:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    b626:	687b      	ldr	r3, [r7, #4]
    b628:	7cdb      	ldrb	r3, [r3, #19]
    b62a:	f003 0320 	and.w	r3, r3, #32
    b62e:	b2db      	uxtb	r3, r3
    b630:	2b00      	cmp	r3, #0
    b632:	d010      	beq.n	b656 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    b634:	687b      	ldr	r3, [r7, #4]
    b636:	8a1b      	ldrh	r3, [r3, #16]
    b638:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b63a:	429a      	cmp	r2, r3
    b63c:	d902      	bls.n	b644 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    b63e:	687b      	ldr	r3, [r7, #4]
    b640:	8a1b      	ldrh	r3, [r3, #16]
    b642:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b644:	687b      	ldr	r3, [r7, #4]
    b646:	68db      	ldr	r3, [r3, #12]
    b648:	461a      	mov	r2, r3
    b64a:	7ffb      	ldrb	r3, [r7, #31]
    b64c:	2100      	movs	r1, #0
    b64e:	4618      	mov	r0, r3
    b650:	4b35      	ldr	r3, [pc, #212]	; (b728 <_usb_d_dev_out_next+0x280>)
    b652:	4798      	blx	r3
    b654:	e029      	b.n	b6aa <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    b656:	687b      	ldr	r3, [r7, #4]
    b658:	8a1b      	ldrh	r3, [r3, #16]
    b65a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b65c:	429a      	cmp	r2, r3
    b65e:	d90f      	bls.n	b680 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    b660:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    b662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    b666:	d903      	bls.n	b670 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    b668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    b66c:	84fb      	strh	r3, [r7, #38]	; 0x26
    b66e:	e011      	b.n	b694 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    b670:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b672:	8a7b      	ldrh	r3, [r7, #18]
    b674:	4013      	ands	r3, r2
    b676:	b29b      	uxth	r3, r3
    b678:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b67a:	1ad3      	subs	r3, r2, r3
    b67c:	84fb      	strh	r3, [r7, #38]	; 0x26
    b67e:	e009      	b.n	b694 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    b680:	687b      	ldr	r3, [r7, #4]
    b682:	8a1b      	ldrh	r3, [r3, #16]
    b684:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b686:	429a      	cmp	r2, r3
    b688:	d204      	bcs.n	b694 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    b68a:	687a      	ldr	r2, [r7, #4]
    b68c:	7cd3      	ldrb	r3, [r2, #19]
    b68e:	f043 0320 	orr.w	r3, r3, #32
    b692:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    b694:	687b      	ldr	r3, [r7, #4]
    b696:	681a      	ldr	r2, [r3, #0]
    b698:	687b      	ldr	r3, [r7, #4]
    b69a:	689b      	ldr	r3, [r3, #8]
    b69c:	4413      	add	r3, r2
    b69e:	461a      	mov	r2, r3
    b6a0:	7ffb      	ldrb	r3, [r7, #31]
    b6a2:	2100      	movs	r1, #0
    b6a4:	4618      	mov	r0, r3
    b6a6:	4b20      	ldr	r3, [pc, #128]	; (b728 <_usb_d_dev_out_next+0x280>)
    b6a8:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    b6aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    b6ac:	7ff8      	ldrb	r0, [r7, #31]
    b6ae:	2300      	movs	r3, #0
    b6b0:	2100      	movs	r1, #0
    b6b2:	4c1e      	ldr	r4, [pc, #120]	; (b72c <_usb_d_dev_out_next+0x284>)
    b6b4:	47a0      	blx	r4
			goto _out_rx_exec;
    b6b6:	e01f      	b.n	b6f8 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    b6b8:	7bfb      	ldrb	r3, [r7, #15]
    b6ba:	2b00      	cmp	r3, #0
    b6bc:	d006      	beq.n	b6cc <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    b6be:	7ffb      	ldrb	r3, [r7, #31]
    b6c0:	222d      	movs	r2, #45	; 0x2d
    b6c2:	4619      	mov	r1, r3
    b6c4:	6a38      	ldr	r0, [r7, #32]
    b6c6:	4b1a      	ldr	r3, [pc, #104]	; (b730 <_usb_d_dev_out_next+0x288>)
    b6c8:	4798      	blx	r3
    b6ca:	e005      	b.n	b6d8 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    b6cc:	7ffb      	ldrb	r3, [r7, #31]
    b6ce:	2225      	movs	r2, #37	; 0x25
    b6d0:	4619      	mov	r1, r3
    b6d2:	6a38      	ldr	r0, [r7, #32]
    b6d4:	4b16      	ldr	r3, [pc, #88]	; (b730 <_usb_d_dev_out_next+0x288>)
    b6d6:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    b6d8:	7ffb      	ldrb	r3, [r7, #31]
    b6da:	2b00      	cmp	r3, #0
    b6dc:	d107      	bne.n	b6ee <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b6de:	687b      	ldr	r3, [r7, #4]
    b6e0:	68db      	ldr	r3, [r3, #12]
    b6e2:	461a      	mov	r2, r3
    b6e4:	7ffb      	ldrb	r3, [r7, #31]
    b6e6:	2100      	movs	r1, #0
    b6e8:	4618      	mov	r0, r3
    b6ea:	4b0f      	ldr	r3, [pc, #60]	; (b728 <_usb_d_dev_out_next+0x280>)
    b6ec:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    b6ee:	2100      	movs	r1, #0
    b6f0:	6878      	ldr	r0, [r7, #4]
    b6f2:	4b10      	ldr	r3, [pc, #64]	; (b734 <_usb_d_dev_out_next+0x28c>)
    b6f4:	4798      	blx	r3
	return;
    b6f6:	e031      	b.n	b75c <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    b6f8:	78fb      	ldrb	r3, [r7, #3]
    b6fa:	f083 0301 	eor.w	r3, r3, #1
    b6fe:	b2db      	uxtb	r3, r3
    b700:	2b00      	cmp	r3, #0
    b702:	d025      	beq.n	b750 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    b704:	7bfb      	ldrb	r3, [r7, #15]
    b706:	2b00      	cmp	r3, #0
    b708:	d018      	beq.n	b73c <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    b70a:	7ffb      	ldrb	r3, [r7, #31]
    b70c:	2101      	movs	r1, #1
    b70e:	4618      	mov	r0, r3
    b710:	4b09      	ldr	r3, [pc, #36]	; (b738 <_usb_d_dev_out_next+0x290>)
    b712:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    b714:	232d      	movs	r3, #45	; 0x2d
    b716:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    b71a:	e012      	b.n	b742 <_usb_d_dev_out_next+0x29a>
    b71c:	20002674 	.word	0x20002674
    b720:	0000ac89 	.word	0x0000ac89
    b724:	0001ab91 	.word	0x0001ab91
    b728:	0000acb5 	.word	0x0000acb5
    b72c:	0000ae3d 	.word	0x0000ae3d
    b730:	0000a595 	.word	0x0000a595
    b734:	0000c5b9 	.word	0x0000c5b9
    b738:	0000ae7d 	.word	0x0000ae7d
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    b73c:	2325      	movs	r3, #37	; 0x25
    b73e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    b742:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    b746:	7ffb      	ldrb	r3, [r7, #31]
    b748:	4619      	mov	r1, r3
    b74a:	6a38      	ldr	r0, [r7, #32]
    b74c:	4b05      	ldr	r3, [pc, #20]	; (b764 <_usb_d_dev_out_next+0x2bc>)
    b74e:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    b750:	7ffb      	ldrb	r3, [r7, #31]
    b752:	2201      	movs	r2, #1
    b754:	2100      	movs	r1, #0
    b756:	4618      	mov	r0, r3
    b758:	4b03      	ldr	r3, [pc, #12]	; (b768 <_usb_d_dev_out_next+0x2c0>)
    b75a:	4798      	blx	r3
}
    b75c:	372c      	adds	r7, #44	; 0x2c
    b75e:	46bd      	mov	sp, r7
    b760:	bd90      	pop	{r4, r7, pc}
    b762:	bf00      	nop
    b764:	0000a569 	.word	0x0000a569
    b768:	0000af0d 	.word	0x0000af0d

0000b76c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    b76c:	b580      	push	{r7, lr}
    b76e:	b084      	sub	sp, #16
    b770:	af00      	add	r7, sp, #0
    b772:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    b774:	687b      	ldr	r3, [r7, #4]
    b776:	7c9b      	ldrb	r3, [r3, #18]
    b778:	f003 030f 	and.w	r3, r3, #15
    b77c:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b77e:	687b      	ldr	r3, [r7, #4]
    b780:	7cdb      	ldrb	r3, [r3, #19]
    b782:	f003 0307 	and.w	r3, r3, #7
    b786:	b2db      	uxtb	r3, r3
    b788:	2b01      	cmp	r3, #1
    b78a:	bf0c      	ite	eq
    b78c:	2301      	moveq	r3, #1
    b78e:	2300      	movne	r3, #0
    b790:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    b792:	7bbb      	ldrb	r3, [r7, #14]
    b794:	f083 0301 	eor.w	r3, r3, #1
    b798:	b2db      	uxtb	r3, r3
    b79a:	2b00      	cmp	r3, #0
    b79c:	d008      	beq.n	b7b0 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    b79e:	7bfb      	ldrb	r3, [r7, #15]
    b7a0:	4618      	mov	r0, r3
    b7a2:	4b20      	ldr	r3, [pc, #128]	; (b824 <_usb_d_dev_handle_setup+0xb8>)
    b7a4:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    b7a6:	7bfb      	ldrb	r3, [r7, #15]
    b7a8:	4618      	mov	r0, r3
    b7aa:	4b1f      	ldr	r3, [pc, #124]	; (b828 <_usb_d_dev_handle_setup+0xbc>)
    b7ac:	4798      	blx	r3
		return;
    b7ae:	e036      	b.n	b81e <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    b7b0:	687b      	ldr	r3, [r7, #4]
    b7b2:	7cdb      	ldrb	r3, [r3, #19]
    b7b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b7b8:	b2db      	uxtb	r3, r3
    b7ba:	2b00      	cmp	r3, #0
    b7bc:	d010      	beq.n	b7e0 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    b7be:	687a      	ldr	r2, [r7, #4]
    b7c0:	7cd3      	ldrb	r3, [r2, #19]
    b7c2:	f36f 1386 	bfc	r3, #6, #1
    b7c6:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b7c8:	7bfb      	ldrb	r3, [r7, #15]
    b7ca:	2200      	movs	r2, #0
    b7cc:	2101      	movs	r1, #1
    b7ce:	4618      	mov	r0, r3
    b7d0:	4b16      	ldr	r3, [pc, #88]	; (b82c <_usb_d_dev_handle_setup+0xc0>)
    b7d2:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    b7d4:	7bfb      	ldrb	r3, [r7, #15]
    b7d6:	2200      	movs	r2, #0
    b7d8:	2100      	movs	r1, #0
    b7da:	4618      	mov	r0, r3
    b7dc:	4b14      	ldr	r3, [pc, #80]	; (b830 <_usb_d_dev_handle_setup+0xc4>)
    b7de:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    b7e0:	687a      	ldr	r2, [r7, #4]
    b7e2:	7cd3      	ldrb	r3, [r2, #19]
    b7e4:	f36f 03c3 	bfc	r3, #3, #1
    b7e8:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    b7ea:	7bfb      	ldrb	r3, [r7, #15]
    b7ec:	2100      	movs	r1, #0
    b7ee:	4618      	mov	r0, r3
    b7f0:	4b10      	ldr	r3, [pc, #64]	; (b834 <_usb_d_dev_handle_setup+0xc8>)
    b7f2:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    b7f4:	7bfb      	ldrb	r3, [r7, #15]
    b7f6:	2101      	movs	r1, #1
    b7f8:	4618      	mov	r0, r3
    b7fa:	4b0e      	ldr	r3, [pc, #56]	; (b834 <_usb_d_dev_handle_setup+0xc8>)
    b7fc:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    b7fe:	7bfb      	ldrb	r3, [r7, #15]
    b800:	216f      	movs	r1, #111	; 0x6f
    b802:	4618      	mov	r0, r3
    b804:	4b0c      	ldr	r3, [pc, #48]	; (b838 <_usb_d_dev_handle_setup+0xcc>)
    b806:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    b808:	7bfb      	ldrb	r3, [r7, #15]
    b80a:	216f      	movs	r1, #111	; 0x6f
    b80c:	4618      	mov	r0, r3
    b80e:	4b0b      	ldr	r3, [pc, #44]	; (b83c <_usb_d_dev_handle_setup+0xd0>)
    b810:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    b812:	4b0b      	ldr	r3, [pc, #44]	; (b840 <_usb_d_dev_handle_setup+0xd4>)
    b814:	689b      	ldr	r3, [r3, #8]
    b816:	687a      	ldr	r2, [r7, #4]
    b818:	7c92      	ldrb	r2, [r2, #18]
    b81a:	4610      	mov	r0, r2
    b81c:	4798      	blx	r3
}
    b81e:	3710      	adds	r7, #16
    b820:	46bd      	mov	sp, r7
    b822:	bd80      	pop	{r7, pc}
    b824:	0000ac11 	.word	0x0000ac11
    b828:	0000abbd 	.word	0x0000abbd
    b82c:	0000aeb5 	.word	0x0000aeb5
    b830:	0000af0d 	.word	0x0000af0d
    b834:	0000ae7d 	.word	0x0000ae7d
    b838:	0000a9bd 	.word	0x0000a9bd
    b83c:	0000aa0d 	.word	0x0000aa0d
    b840:	200025ac 	.word	0x200025ac

0000b844 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    b844:	b580      	push	{r7, lr}
    b846:	b084      	sub	sp, #16
    b848:	af00      	add	r7, sp, #0
    b84a:	6078      	str	r0, [r7, #4]
    b84c:	460b      	mov	r3, r1
    b84e:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b850:	687b      	ldr	r3, [r7, #4]
    b852:	7c9b      	ldrb	r3, [r3, #18]
    b854:	f003 030f 	and.w	r3, r3, #15
    b858:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    b85a:	78f9      	ldrb	r1, [r7, #3]
    b85c:	7bfb      	ldrb	r3, [r7, #15]
    b85e:	2200      	movs	r2, #0
    b860:	4618      	mov	r0, r3
    b862:	4b07      	ldr	r3, [pc, #28]	; (b880 <_usb_d_dev_handle_stall+0x3c>)
    b864:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    b866:	4b07      	ldr	r3, [pc, #28]	; (b884 <_usb_d_dev_handle_stall+0x40>)
    b868:	691b      	ldr	r3, [r3, #16]
    b86a:	687a      	ldr	r2, [r7, #4]
    b86c:	7c90      	ldrb	r0, [r2, #18]
    b86e:	687a      	ldr	r2, [r7, #4]
    b870:	6892      	ldr	r2, [r2, #8]
    b872:	2101      	movs	r1, #1
    b874:	4798      	blx	r3
}
    b876:	bf00      	nop
    b878:	3710      	adds	r7, #16
    b87a:	46bd      	mov	sp, r7
    b87c:	bd80      	pop	{r7, pc}
    b87e:	bf00      	nop
    b880:	0000ab71 	.word	0x0000ab71
    b884:	200025ac 	.word	0x200025ac

0000b888 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    b888:	b580      	push	{r7, lr}
    b88a:	b088      	sub	sp, #32
    b88c:	af00      	add	r7, sp, #0
    b88e:	6078      	str	r0, [r7, #4]
    b890:	460b      	mov	r3, r1
    b892:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    b894:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    b898:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    b89a:	687b      	ldr	r3, [r7, #4]
    b89c:	7c9b      	ldrb	r3, [r3, #18]
    b89e:	f003 030f 	and.w	r3, r3, #15
    b8a2:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    b8a4:	4b61      	ldr	r3, [pc, #388]	; (ba2c <_usb_d_dev_handle_trfail+0x1a4>)
    b8a6:	881b      	ldrh	r3, [r3, #0]
    b8a8:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    b8aa:	7efb      	ldrb	r3, [r7, #27]
    b8ac:	015b      	lsls	r3, r3, #5
    b8ae:	4a60      	ldr	r2, [pc, #384]	; (ba30 <_usb_d_dev_handle_trfail+0x1a8>)
    b8b0:	4413      	add	r3, r2
    b8b2:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    b8b4:	78fb      	ldrb	r3, [r7, #3]
    b8b6:	2b00      	cmp	r3, #0
    b8b8:	d006      	beq.n	b8c8 <_usb_d_dev_handle_trfail+0x40>
    b8ba:	7efb      	ldrb	r3, [r7, #27]
    b8bc:	4619      	mov	r1, r3
    b8be:	69f8      	ldr	r0, [r7, #28]
    b8c0:	4b5c      	ldr	r3, [pc, #368]	; (ba34 <_usb_d_dev_handle_trfail+0x1ac>)
    b8c2:	4798      	blx	r3
    b8c4:	4603      	mov	r3, r0
    b8c6:	e005      	b.n	b8d4 <_usb_d_dev_handle_trfail+0x4c>
    b8c8:	7efb      	ldrb	r3, [r7, #27]
    b8ca:	4619      	mov	r1, r3
    b8cc:	69f8      	ldr	r0, [r7, #28]
    b8ce:	4b5a      	ldr	r3, [pc, #360]	; (ba38 <_usb_d_dev_handle_trfail+0x1b0>)
    b8d0:	4798      	blx	r3
    b8d2:	4603      	mov	r3, r0
    b8d4:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b8d6:	687b      	ldr	r3, [r7, #4]
    b8d8:	7cdb      	ldrb	r3, [r3, #19]
    b8da:	f003 0307 	and.w	r3, r3, #7
    b8de:	b2db      	uxtb	r3, r3
    b8e0:	2b01      	cmp	r3, #1
    b8e2:	bf0c      	ite	eq
    b8e4:	2301      	moveq	r3, #1
    b8e6:	2300      	movne	r3, #0
    b8e8:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    b8ea:	78fb      	ldrb	r3, [r7, #3]
    b8ec:	011b      	lsls	r3, r3, #4
    b8ee:	697a      	ldr	r2, [r7, #20]
    b8f0:	4413      	add	r3, r2
    b8f2:	7a9b      	ldrb	r3, [r3, #10]
    b8f4:	b2db      	uxtb	r3, r3
    b8f6:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    b8f8:	7cfb      	ldrb	r3, [r7, #19]
    b8fa:	2b02      	cmp	r3, #2
    b8fc:	d12f      	bne.n	b95e <_usb_d_dev_handle_trfail+0xd6>
    b8fe:	7b3b      	ldrb	r3, [r7, #12]
    b900:	f003 0301 	and.w	r3, r3, #1
    b904:	b2db      	uxtb	r3, r3
    b906:	2b00      	cmp	r3, #0
    b908:	d029      	beq.n	b95e <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    b90a:	78fb      	ldrb	r3, [r7, #3]
    b90c:	011b      	lsls	r3, r3, #4
    b90e:	697a      	ldr	r2, [r7, #20]
    b910:	441a      	add	r2, r3
    b912:	7a93      	ldrb	r3, [r2, #10]
    b914:	f36f 0300 	bfc	r3, #0, #1
    b918:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b91a:	78fb      	ldrb	r3, [r7, #3]
    b91c:	f107 0220 	add.w	r2, r7, #32
    b920:	4413      	add	r3, r2
    b922:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b926:	7efb      	ldrb	r3, [r7, #27]
    b928:	4619      	mov	r1, r3
    b92a:	69f8      	ldr	r0, [r7, #28]
    b92c:	4b43      	ldr	r3, [pc, #268]	; (ba3c <_usb_d_dev_handle_trfail+0x1b4>)
    b92e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b930:	78fb      	ldrb	r3, [r7, #3]
    b932:	f107 0220 	add.w	r2, r7, #32
    b936:	4413      	add	r3, r2
    b938:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b93c:	7efb      	ldrb	r3, [r7, #27]
    b93e:	4619      	mov	r1, r3
    b940:	69f8      	ldr	r0, [r7, #28]
    b942:	4b3f      	ldr	r3, [pc, #252]	; (ba40 <_usb_d_dev_handle_trfail+0x1b8>)
    b944:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    b946:	78fb      	ldrb	r3, [r7, #3]
    b948:	2b00      	cmp	r3, #0
    b94a:	bf14      	ite	ne
    b94c:	2301      	movne	r3, #1
    b94e:	2300      	moveq	r3, #0
    b950:	b2db      	uxtb	r3, r3
    b952:	2204      	movs	r2, #4
    b954:	4619      	mov	r1, r3
    b956:	6878      	ldr	r0, [r7, #4]
    b958:	4b3a      	ldr	r3, [pc, #232]	; (ba44 <_usb_d_dev_handle_trfail+0x1bc>)
    b95a:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    b95c:	e062      	b.n	ba24 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    b95e:	7b3b      	ldrb	r3, [r7, #12]
    b960:	f003 0302 	and.w	r3, r3, #2
    b964:	b2db      	uxtb	r3, r3
    b966:	2b00      	cmp	r3, #0
    b968:	d040      	beq.n	b9ec <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    b96a:	78fb      	ldrb	r3, [r7, #3]
    b96c:	011b      	lsls	r3, r3, #4
    b96e:	697a      	ldr	r2, [r7, #20]
    b970:	441a      	add	r2, r3
    b972:	7a93      	ldrb	r3, [r2, #10]
    b974:	f36f 0341 	bfc	r3, #1, #1
    b978:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b97a:	78fb      	ldrb	r3, [r7, #3]
    b97c:	f107 0220 	add.w	r2, r7, #32
    b980:	4413      	add	r3, r2
    b982:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b986:	7efb      	ldrb	r3, [r7, #27]
    b988:	4619      	mov	r1, r3
    b98a:	69f8      	ldr	r0, [r7, #28]
    b98c:	4b2b      	ldr	r3, [pc, #172]	; (ba3c <_usb_d_dev_handle_trfail+0x1b4>)
    b98e:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    b990:	78fb      	ldrb	r3, [r7, #3]
    b992:	f107 0220 	add.w	r2, r7, #32
    b996:	4413      	add	r3, r2
    b998:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    b99c:	7efb      	ldrb	r3, [r7, #27]
    b99e:	4619      	mov	r1, r3
    b9a0:	69f8      	ldr	r0, [r7, #28]
    b9a2:	4b27      	ldr	r3, [pc, #156]	; (ba40 <_usb_d_dev_handle_trfail+0x1b8>)
    b9a4:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    b9a6:	7cbb      	ldrb	r3, [r7, #18]
    b9a8:	2b00      	cmp	r3, #0
    b9aa:	d03b      	beq.n	ba24 <_usb_d_dev_handle_trfail+0x19c>
    b9ac:	687b      	ldr	r3, [r7, #4]
    b9ae:	7cdb      	ldrb	r3, [r3, #19]
    b9b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b9b4:	b2db      	uxtb	r3, r3
    b9b6:	2b00      	cmp	r3, #0
    b9b8:	d034      	beq.n	ba24 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    b9ba:	687b      	ldr	r3, [r7, #4]
    b9bc:	7cdb      	ldrb	r3, [r3, #19]
    b9be:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    b9c2:	b2db      	uxtb	r3, r3
    b9c4:	461a      	mov	r2, r3
    b9c6:	78fb      	ldrb	r3, [r7, #3]
    b9c8:	4293      	cmp	r3, r2
    b9ca:	d02b      	beq.n	ba24 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    b9cc:	687b      	ldr	r3, [r7, #4]
    b9ce:	7cdb      	ldrb	r3, [r3, #19]
    b9d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    b9d4:	b2db      	uxtb	r3, r3
    b9d6:	2b00      	cmp	r3, #0
    b9d8:	bf14      	ite	ne
    b9da:	2301      	movne	r3, #1
    b9dc:	2300      	moveq	r3, #0
    b9de:	b2db      	uxtb	r3, r3
    b9e0:	2200      	movs	r2, #0
    b9e2:	4619      	mov	r1, r3
    b9e4:	6878      	ldr	r0, [r7, #4]
    b9e6:	4b17      	ldr	r3, [pc, #92]	; (ba44 <_usb_d_dev_handle_trfail+0x1bc>)
    b9e8:	4798      	blx	r3
}
    b9ea:	e01b      	b.n	ba24 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    b9ec:	78fa      	ldrb	r2, [r7, #3]
    b9ee:	7efb      	ldrb	r3, [r7, #27]
    b9f0:	4611      	mov	r1, r2
    b9f2:	4618      	mov	r0, r3
    b9f4:	4b14      	ldr	r3, [pc, #80]	; (ba48 <_usb_d_dev_handle_trfail+0x1c0>)
    b9f6:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    b9f8:	78fb      	ldrb	r3, [r7, #3]
    b9fa:	f107 0220 	add.w	r2, r7, #32
    b9fe:	4413      	add	r3, r2
    ba00:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ba04:	7efb      	ldrb	r3, [r7, #27]
    ba06:	4619      	mov	r1, r3
    ba08:	69f8      	ldr	r0, [r7, #28]
    ba0a:	4b0c      	ldr	r3, [pc, #48]	; (ba3c <_usb_d_dev_handle_trfail+0x1b4>)
    ba0c:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    ba0e:	78fb      	ldrb	r3, [r7, #3]
    ba10:	f107 0220 	add.w	r2, r7, #32
    ba14:	4413      	add	r3, r2
    ba16:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    ba1a:	7efb      	ldrb	r3, [r7, #27]
    ba1c:	4619      	mov	r1, r3
    ba1e:	69f8      	ldr	r0, [r7, #28]
    ba20:	4b07      	ldr	r3, [pc, #28]	; (ba40 <_usb_d_dev_handle_trfail+0x1b8>)
    ba22:	4798      	blx	r3
}
    ba24:	bf00      	nop
    ba26:	3720      	adds	r7, #32
    ba28:	46bd      	mov	sp, r7
    ba2a:	bd80      	pop	{r7, pc}
    ba2c:	0001b4b8 	.word	0x0001b4b8
    ba30:	20002674 	.word	0x20002674
    ba34:	0000a5f1 	.word	0x0000a5f1
    ba38:	0000a5c1 	.word	0x0000a5c1
    ba3c:	0000a495 	.word	0x0000a495
    ba40:	0000a595 	.word	0x0000a595
    ba44:	0000c601 	.word	0x0000c601
    ba48:	0000ae7d 	.word	0x0000ae7d

0000ba4c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    ba4c:	b580      	push	{r7, lr}
    ba4e:	b082      	sub	sp, #8
    ba50:	af00      	add	r7, sp, #0
    ba52:	6078      	str	r0, [r7, #4]
    ba54:	460b      	mov	r3, r1
    ba56:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    ba58:	78fb      	ldrb	r3, [r7, #3]
    ba5a:	f003 0310 	and.w	r3, r3, #16
    ba5e:	2b00      	cmp	r3, #0
    ba60:	d003      	beq.n	ba6a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    ba62:	6878      	ldr	r0, [r7, #4]
    ba64:	4b0c      	ldr	r3, [pc, #48]	; (ba98 <_usb_d_dev_trans_setup_isr+0x4c>)
    ba66:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    ba68:	e012      	b.n	ba90 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    ba6a:	78fb      	ldrb	r3, [r7, #3]
    ba6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ba70:	2b00      	cmp	r3, #0
    ba72:	d004      	beq.n	ba7e <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    ba74:	2101      	movs	r1, #1
    ba76:	6878      	ldr	r0, [r7, #4]
    ba78:	4b08      	ldr	r3, [pc, #32]	; (ba9c <_usb_d_dev_trans_setup_isr+0x50>)
    ba7a:	4798      	blx	r3
}
    ba7c:	e008      	b.n	ba90 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    ba7e:	78fb      	ldrb	r3, [r7, #3]
    ba80:	f003 0320 	and.w	r3, r3, #32
    ba84:	2b00      	cmp	r3, #0
    ba86:	d003      	beq.n	ba90 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    ba88:	2100      	movs	r1, #0
    ba8a:	6878      	ldr	r0, [r7, #4]
    ba8c:	4b03      	ldr	r3, [pc, #12]	; (ba9c <_usb_d_dev_trans_setup_isr+0x50>)
    ba8e:	4798      	blx	r3
}
    ba90:	bf00      	nop
    ba92:	3708      	adds	r7, #8
    ba94:	46bd      	mov	sp, r7
    ba96:	bd80      	pop	{r7, pc}
    ba98:	0000b76d 	.word	0x0000b76d
    ba9c:	0000b845 	.word	0x0000b845

0000baa0 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    baa0:	b580      	push	{r7, lr}
    baa2:	b082      	sub	sp, #8
    baa4:	af00      	add	r7, sp, #0
    baa6:	6078      	str	r0, [r7, #4]
    baa8:	460b      	mov	r3, r1
    baaa:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    baac:	78fb      	ldrb	r3, [r7, #3]
    baae:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bab2:	2b00      	cmp	r3, #0
    bab4:	d004      	beq.n	bac0 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    bab6:	2101      	movs	r1, #1
    bab8:	6878      	ldr	r0, [r7, #4]
    baba:	4b1a      	ldr	r3, [pc, #104]	; (bb24 <_usb_d_dev_trans_in_isr+0x84>)
    babc:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    babe:	e02c      	b.n	bb1a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    bac0:	78fb      	ldrb	r3, [r7, #3]
    bac2:	f003 0308 	and.w	r3, r3, #8
    bac6:	2b00      	cmp	r3, #0
    bac8:	d004      	beq.n	bad4 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    baca:	2101      	movs	r1, #1
    bacc:	6878      	ldr	r0, [r7, #4]
    bace:	4b16      	ldr	r3, [pc, #88]	; (bb28 <_usb_d_dev_trans_in_isr+0x88>)
    bad0:	4798      	blx	r3
}
    bad2:	e022      	b.n	bb1a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    bad4:	78fb      	ldrb	r3, [r7, #3]
    bad6:	f003 0302 	and.w	r3, r3, #2
    bada:	2b00      	cmp	r3, #0
    badc:	d004      	beq.n	bae8 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    bade:	2101      	movs	r1, #1
    bae0:	6878      	ldr	r0, [r7, #4]
    bae2:	4b12      	ldr	r3, [pc, #72]	; (bb2c <_usb_d_dev_trans_in_isr+0x8c>)
    bae4:	4798      	blx	r3
}
    bae6:	e018      	b.n	bb1a <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    bae8:	687b      	ldr	r3, [r7, #4]
    baea:	7cdb      	ldrb	r3, [r3, #19]
    baec:	f003 0307 	and.w	r3, r3, #7
    baf0:	b2db      	uxtb	r3, r3
    baf2:	2b01      	cmp	r3, #1
    baf4:	d111      	bne.n	bb1a <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    baf6:	78fb      	ldrb	r3, [r7, #3]
    baf8:	f003 0304 	and.w	r3, r3, #4
    bafc:	2b00      	cmp	r3, #0
    bafe:	d004      	beq.n	bb0a <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    bb00:	2100      	movs	r1, #0
    bb02:	6878      	ldr	r0, [r7, #4]
    bb04:	4b08      	ldr	r3, [pc, #32]	; (bb28 <_usb_d_dev_trans_in_isr+0x88>)
    bb06:	4798      	blx	r3
}
    bb08:	e007      	b.n	bb1a <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    bb0a:	78fb      	ldrb	r3, [r7, #3]
    bb0c:	f003 0310 	and.w	r3, r3, #16
    bb10:	2b00      	cmp	r3, #0
    bb12:	d002      	beq.n	bb1a <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    bb14:	6878      	ldr	r0, [r7, #4]
    bb16:	4b06      	ldr	r3, [pc, #24]	; (bb30 <_usb_d_dev_trans_in_isr+0x90>)
    bb18:	4798      	blx	r3
}
    bb1a:	bf00      	nop
    bb1c:	3708      	adds	r7, #8
    bb1e:	46bd      	mov	sp, r7
    bb20:	bd80      	pop	{r7, pc}
    bb22:	bf00      	nop
    bb24:	0000b845 	.word	0x0000b845
    bb28:	0000b889 	.word	0x0000b889
    bb2c:	0000b291 	.word	0x0000b291
    bb30:	0000b76d 	.word	0x0000b76d

0000bb34 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    bb34:	b580      	push	{r7, lr}
    bb36:	b082      	sub	sp, #8
    bb38:	af00      	add	r7, sp, #0
    bb3a:	6078      	str	r0, [r7, #4]
    bb3c:	460b      	mov	r3, r1
    bb3e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    bb40:	78fb      	ldrb	r3, [r7, #3]
    bb42:	f003 0320 	and.w	r3, r3, #32
    bb46:	2b00      	cmp	r3, #0
    bb48:	d004      	beq.n	bb54 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    bb4a:	2100      	movs	r1, #0
    bb4c:	6878      	ldr	r0, [r7, #4]
    bb4e:	4b1a      	ldr	r3, [pc, #104]	; (bbb8 <_usb_d_dev_trans_out_isr+0x84>)
    bb50:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    bb52:	e02c      	b.n	bbae <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    bb54:	78fb      	ldrb	r3, [r7, #3]
    bb56:	f003 0304 	and.w	r3, r3, #4
    bb5a:	2b00      	cmp	r3, #0
    bb5c:	d004      	beq.n	bb68 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    bb5e:	2100      	movs	r1, #0
    bb60:	6878      	ldr	r0, [r7, #4]
    bb62:	4b16      	ldr	r3, [pc, #88]	; (bbbc <_usb_d_dev_trans_out_isr+0x88>)
    bb64:	4798      	blx	r3
}
    bb66:	e022      	b.n	bbae <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    bb68:	78fb      	ldrb	r3, [r7, #3]
    bb6a:	f003 0301 	and.w	r3, r3, #1
    bb6e:	2b00      	cmp	r3, #0
    bb70:	d004      	beq.n	bb7c <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    bb72:	2101      	movs	r1, #1
    bb74:	6878      	ldr	r0, [r7, #4]
    bb76:	4b12      	ldr	r3, [pc, #72]	; (bbc0 <_usb_d_dev_trans_out_isr+0x8c>)
    bb78:	4798      	blx	r3
}
    bb7a:	e018      	b.n	bbae <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    bb7c:	687b      	ldr	r3, [r7, #4]
    bb7e:	7cdb      	ldrb	r3, [r3, #19]
    bb80:	f003 0307 	and.w	r3, r3, #7
    bb84:	b2db      	uxtb	r3, r3
    bb86:	2b01      	cmp	r3, #1
    bb88:	d111      	bne.n	bbae <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    bb8a:	78fb      	ldrb	r3, [r7, #3]
    bb8c:	f003 0308 	and.w	r3, r3, #8
    bb90:	2b00      	cmp	r3, #0
    bb92:	d004      	beq.n	bb9e <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    bb94:	2101      	movs	r1, #1
    bb96:	6878      	ldr	r0, [r7, #4]
    bb98:	4b08      	ldr	r3, [pc, #32]	; (bbbc <_usb_d_dev_trans_out_isr+0x88>)
    bb9a:	4798      	blx	r3
}
    bb9c:	e007      	b.n	bbae <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    bb9e:	78fb      	ldrb	r3, [r7, #3]
    bba0:	f003 0310 	and.w	r3, r3, #16
    bba4:	2b00      	cmp	r3, #0
    bba6:	d002      	beq.n	bbae <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    bba8:	6878      	ldr	r0, [r7, #4]
    bbaa:	4b06      	ldr	r3, [pc, #24]	; (bbc4 <_usb_d_dev_trans_out_isr+0x90>)
    bbac:	4798      	blx	r3
}
    bbae:	bf00      	nop
    bbb0:	3708      	adds	r7, #8
    bbb2:	46bd      	mov	sp, r7
    bbb4:	bd80      	pop	{r7, pc}
    bbb6:	bf00      	nop
    bbb8:	0000b845 	.word	0x0000b845
    bbbc:	0000b889 	.word	0x0000b889
    bbc0:	0000b4a9 	.word	0x0000b4a9
    bbc4:	0000b76d 	.word	0x0000b76d

0000bbc8 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    bbc8:	b580      	push	{r7, lr}
    bbca:	b084      	sub	sp, #16
    bbcc:	af00      	add	r7, sp, #0
    bbce:	6078      	str	r0, [r7, #4]
    bbd0:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    bbd2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bbd6:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    bbd8:	683b      	ldr	r3, [r7, #0]
    bbda:	7c9b      	ldrb	r3, [r3, #18]
    bbdc:	f003 030f 	and.w	r3, r3, #15
    bbe0:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    bbe2:	7afb      	ldrb	r3, [r7, #11]
    bbe4:	2201      	movs	r2, #1
    bbe6:	409a      	lsls	r2, r3
    bbe8:	687b      	ldr	r3, [r7, #4]
    bbea:	4013      	ands	r3, r2
    bbec:	2b00      	cmp	r3, #0
    bbee:	d03d      	beq.n	bc6c <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    bbf0:	7afb      	ldrb	r3, [r7, #11]
    bbf2:	68fa      	ldr	r2, [r7, #12]
    bbf4:	3308      	adds	r3, #8
    bbf6:	015b      	lsls	r3, r3, #5
    bbf8:	4413      	add	r3, r2
    bbfa:	3307      	adds	r3, #7
    bbfc:	781b      	ldrb	r3, [r3, #0]
    bbfe:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    bc00:	7afb      	ldrb	r3, [r7, #11]
    bc02:	68fa      	ldr	r2, [r7, #12]
    bc04:	015b      	lsls	r3, r3, #5
    bc06:	4413      	add	r3, r2
    bc08:	f203 1309 	addw	r3, r3, #265	; 0x109
    bc0c:	781b      	ldrb	r3, [r3, #0]
    bc0e:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    bc10:	7aba      	ldrb	r2, [r7, #10]
    bc12:	7a7b      	ldrb	r3, [r7, #9]
    bc14:	4013      	ands	r3, r2
    bc16:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    bc18:	7abb      	ldrb	r3, [r7, #10]
    bc1a:	2b00      	cmp	r3, #0
    bc1c:	d027      	beq.n	bc6e <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    bc1e:	683b      	ldr	r3, [r7, #0]
    bc20:	7cdb      	ldrb	r3, [r3, #19]
    bc22:	f003 0307 	and.w	r3, r3, #7
    bc26:	b2db      	uxtb	r3, r3
    bc28:	2b01      	cmp	r3, #1
    bc2a:	d10c      	bne.n	bc46 <_usb_d_dev_handle_eps+0x7e>
    bc2c:	683b      	ldr	r3, [r7, #0]
    bc2e:	7cdb      	ldrb	r3, [r3, #19]
    bc30:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bc34:	b2db      	uxtb	r3, r3
    bc36:	2b00      	cmp	r3, #0
    bc38:	d105      	bne.n	bc46 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    bc3a:	7abb      	ldrb	r3, [r7, #10]
    bc3c:	4619      	mov	r1, r3
    bc3e:	6838      	ldr	r0, [r7, #0]
    bc40:	4b0c      	ldr	r3, [pc, #48]	; (bc74 <_usb_d_dev_handle_eps+0xac>)
    bc42:	4798      	blx	r3
    bc44:	e013      	b.n	bc6e <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    bc46:	683b      	ldr	r3, [r7, #0]
    bc48:	7cdb      	ldrb	r3, [r3, #19]
    bc4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    bc4e:	b2db      	uxtb	r3, r3
    bc50:	2b00      	cmp	r3, #0
    bc52:	d005      	beq.n	bc60 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    bc54:	7abb      	ldrb	r3, [r7, #10]
    bc56:	4619      	mov	r1, r3
    bc58:	6838      	ldr	r0, [r7, #0]
    bc5a:	4b07      	ldr	r3, [pc, #28]	; (bc78 <_usb_d_dev_handle_eps+0xb0>)
    bc5c:	4798      	blx	r3
    bc5e:	e006      	b.n	bc6e <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    bc60:	7abb      	ldrb	r3, [r7, #10]
    bc62:	4619      	mov	r1, r3
    bc64:	6838      	ldr	r0, [r7, #0]
    bc66:	4b05      	ldr	r3, [pc, #20]	; (bc7c <_usb_d_dev_handle_eps+0xb4>)
    bc68:	4798      	blx	r3
    bc6a:	e000      	b.n	bc6e <_usb_d_dev_handle_eps+0xa6>
		return;
    bc6c:	bf00      	nop
		}
	}
}
    bc6e:	3710      	adds	r7, #16
    bc70:	46bd      	mov	sp, r7
    bc72:	bd80      	pop	{r7, pc}
    bc74:	0000ba4d 	.word	0x0000ba4d
    bc78:	0000baa1 	.word	0x0000baa1
    bc7c:	0000bb35 	.word	0x0000bb35

0000bc80 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    bc80:	b580      	push	{r7, lr}
    bc82:	b084      	sub	sp, #16
    bc84:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    bc86:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bc8a:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    bc8c:	68bb      	ldr	r3, [r7, #8]
    bc8e:	8c1b      	ldrh	r3, [r3, #32]
    bc90:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    bc92:	88fb      	ldrh	r3, [r7, #6]
    bc94:	2b00      	cmp	r3, #0
    bc96:	d104      	bne.n	bca2 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    bc98:	4b13      	ldr	r3, [pc, #76]	; (bce8 <_usb_d_dev_handler+0x68>)
    bc9a:	4798      	blx	r3
    bc9c:	4603      	mov	r3, r0
    bc9e:	2b00      	cmp	r3, #0
    bca0:	d11e      	bne.n	bce0 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    bca2:	2300      	movs	r3, #0
    bca4:	73fb      	strb	r3, [r7, #15]
    bca6:	e017      	b.n	bcd8 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    bca8:	7bfa      	ldrb	r2, [r7, #15]
    bcaa:	4613      	mov	r3, r2
    bcac:	009b      	lsls	r3, r3, #2
    bcae:	4413      	add	r3, r2
    bcb0:	009b      	lsls	r3, r3, #2
    bcb2:	3310      	adds	r3, #16
    bcb4:	4a0d      	ldr	r2, [pc, #52]	; (bcec <_usb_d_dev_handler+0x6c>)
    bcb6:	4413      	add	r3, r2
    bcb8:	3304      	adds	r3, #4
    bcba:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    bcbc:	683b      	ldr	r3, [r7, #0]
    bcbe:	7c9b      	ldrb	r3, [r3, #18]
    bcc0:	2bff      	cmp	r3, #255	; 0xff
    bcc2:	d005      	beq.n	bcd0 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    bcc4:	88fb      	ldrh	r3, [r7, #6]
    bcc6:	6839      	ldr	r1, [r7, #0]
    bcc8:	4618      	mov	r0, r3
    bcca:	4b09      	ldr	r3, [pc, #36]	; (bcf0 <_usb_d_dev_handler+0x70>)
    bccc:	4798      	blx	r3
    bcce:	e000      	b.n	bcd2 <_usb_d_dev_handler+0x52>
			continue;
    bcd0:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    bcd2:	7bfb      	ldrb	r3, [r7, #15]
    bcd4:	3301      	adds	r3, #1
    bcd6:	73fb      	strb	r3, [r7, #15]
    bcd8:	7bfb      	ldrb	r3, [r7, #15]
    bcda:	2b08      	cmp	r3, #8
    bcdc:	d9e4      	bls.n	bca8 <_usb_d_dev_handler+0x28>
    bcde:	e000      	b.n	bce2 <_usb_d_dev_handler+0x62>
			return;
    bce0:	bf00      	nop
	}
}
    bce2:	3710      	adds	r7, #16
    bce4:	46bd      	mov	sp, r7
    bce6:	bd80      	pop	{r7, pc}
    bce8:	0000b1d9 	.word	0x0000b1d9
    bcec:	200025ac 	.word	0x200025ac
    bcf0:	0000bbc9 	.word	0x0000bbc9

0000bcf4 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    bcf4:	b580      	push	{r7, lr}
    bcf6:	b082      	sub	sp, #8
    bcf8:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    bcfa:	2300      	movs	r3, #0
    bcfc:	71fb      	strb	r3, [r7, #7]
    bcfe:	e023      	b.n	bd48 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    bd00:	79fa      	ldrb	r2, [r7, #7]
    bd02:	4613      	mov	r3, r2
    bd04:	009b      	lsls	r3, r3, #2
    bd06:	4413      	add	r3, r2
    bd08:	009b      	lsls	r3, r3, #2
    bd0a:	3310      	adds	r3, #16
    bd0c:	4a14      	ldr	r2, [pc, #80]	; (bd60 <_usb_d_dev_reset_epts+0x6c>)
    bd0e:	4413      	add	r3, r2
    bd10:	3304      	adds	r3, #4
    bd12:	2103      	movs	r1, #3
    bd14:	4618      	mov	r0, r3
    bd16:	4b13      	ldr	r3, [pc, #76]	; (bd64 <_usb_d_dev_reset_epts+0x70>)
    bd18:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    bd1a:	79fa      	ldrb	r2, [r7, #7]
    bd1c:	4910      	ldr	r1, [pc, #64]	; (bd60 <_usb_d_dev_reset_epts+0x6c>)
    bd1e:	4613      	mov	r3, r2
    bd20:	009b      	lsls	r3, r3, #2
    bd22:	4413      	add	r3, r2
    bd24:	009b      	lsls	r3, r3, #2
    bd26:	440b      	add	r3, r1
    bd28:	3326      	adds	r3, #38	; 0x26
    bd2a:	22ff      	movs	r2, #255	; 0xff
    bd2c:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    bd2e:	79fa      	ldrb	r2, [r7, #7]
    bd30:	490b      	ldr	r1, [pc, #44]	; (bd60 <_usb_d_dev_reset_epts+0x6c>)
    bd32:	4613      	mov	r3, r2
    bd34:	009b      	lsls	r3, r3, #2
    bd36:	4413      	add	r3, r2
    bd38:	009b      	lsls	r3, r3, #2
    bd3a:	440b      	add	r3, r1
    bd3c:	3327      	adds	r3, #39	; 0x27
    bd3e:	2200      	movs	r2, #0
    bd40:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    bd42:	79fb      	ldrb	r3, [r7, #7]
    bd44:	3301      	adds	r3, #1
    bd46:	71fb      	strb	r3, [r7, #7]
    bd48:	79fb      	ldrb	r3, [r7, #7]
    bd4a:	2b08      	cmp	r3, #8
    bd4c:	d9d8      	bls.n	bd00 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    bd4e:	22a0      	movs	r2, #160	; 0xa0
    bd50:	2100      	movs	r1, #0
    bd52:	4805      	ldr	r0, [pc, #20]	; (bd68 <_usb_d_dev_reset_epts+0x74>)
    bd54:	4b05      	ldr	r3, [pc, #20]	; (bd6c <_usb_d_dev_reset_epts+0x78>)
    bd56:	4798      	blx	r3
}
    bd58:	bf00      	nop
    bd5a:	3708      	adds	r7, #8
    bd5c:	46bd      	mov	sp, r7
    bd5e:	bd80      	pop	{r7, pc}
    bd60:	200025ac 	.word	0x200025ac
    bd64:	0000c5b9 	.word	0x0000c5b9
    bd68:	20002674 	.word	0x20002674
    bd6c:	0001acc5 	.word	0x0001acc5

0000bd70 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    bd70:	b580      	push	{r7, lr}
    bd72:	b084      	sub	sp, #16
    bd74:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    bd76:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bd7a:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    bd7c:	2301      	movs	r3, #1
    bd7e:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    bd80:	2304      	movs	r3, #4
    bd82:	713b      	strb	r3, [r7, #4]
    bd84:	2300      	movs	r3, #0
    bd86:	717b      	strb	r3, [r7, #5]
    bd88:	2300      	movs	r3, #0
    bd8a:	71bb      	strb	r3, [r7, #6]
    bd8c:	2300      	movs	r3, #0
    bd8e:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    bd90:	2101      	movs	r1, #1
    bd92:	68f8      	ldr	r0, [r7, #12]
    bd94:	4b26      	ldr	r3, [pc, #152]	; (be30 <_usb_d_dev_init+0xc0>)
    bd96:	4798      	blx	r3
    bd98:	4603      	mov	r3, r0
    bd9a:	f083 0301 	eor.w	r3, r3, #1
    bd9e:	b2db      	uxtb	r3, r3
    bda0:	2b00      	cmp	r3, #0
    bda2:	d011      	beq.n	bdc8 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    bda4:	2102      	movs	r1, #2
    bda6:	68f8      	ldr	r0, [r7, #12]
    bda8:	4b22      	ldr	r3, [pc, #136]	; (be34 <_usb_d_dev_init+0xc4>)
    bdaa:	4798      	blx	r3
    bdac:	4603      	mov	r3, r0
    bdae:	2b00      	cmp	r3, #0
    bdb0:	d006      	beq.n	bdc0 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    bdb2:	68f8      	ldr	r0, [r7, #12]
    bdb4:	4b20      	ldr	r3, [pc, #128]	; (be38 <_usb_d_dev_init+0xc8>)
    bdb6:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    bdb8:	2102      	movs	r1, #2
    bdba:	68f8      	ldr	r0, [r7, #12]
    bdbc:	4b1f      	ldr	r3, [pc, #124]	; (be3c <_usb_d_dev_init+0xcc>)
    bdbe:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    bdc0:	2101      	movs	r1, #1
    bdc2:	68f8      	ldr	r0, [r7, #12]
    bdc4:	4b1e      	ldr	r3, [pc, #120]	; (be40 <_usb_d_dev_init+0xd0>)
    bdc6:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    bdc8:	2101      	movs	r1, #1
    bdca:	68f8      	ldr	r0, [r7, #12]
    bdcc:	4b1b      	ldr	r3, [pc, #108]	; (be3c <_usb_d_dev_init+0xcc>)
    bdce:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    bdd0:	4b1c      	ldr	r3, [pc, #112]	; (be44 <_usb_d_dev_init+0xd4>)
    bdd2:	4a1d      	ldr	r2, [pc, #116]	; (be48 <_usb_d_dev_init+0xd8>)
    bdd4:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    bdd6:	4b1b      	ldr	r3, [pc, #108]	; (be44 <_usb_d_dev_init+0xd4>)
    bdd8:	4a1b      	ldr	r2, [pc, #108]	; (be48 <_usb_d_dev_init+0xd8>)
    bdda:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    bddc:	4b19      	ldr	r3, [pc, #100]	; (be44 <_usb_d_dev_init+0xd4>)
    bdde:	4a1a      	ldr	r2, [pc, #104]	; (be48 <_usb_d_dev_init+0xd8>)
    bde0:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    bde2:	4b18      	ldr	r3, [pc, #96]	; (be44 <_usb_d_dev_init+0xd4>)
    bde4:	4a18      	ldr	r2, [pc, #96]	; (be48 <_usb_d_dev_init+0xd8>)
    bde6:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    bde8:	4b16      	ldr	r3, [pc, #88]	; (be44 <_usb_d_dev_init+0xd4>)
    bdea:	4a17      	ldr	r2, [pc, #92]	; (be48 <_usb_d_dev_init+0xd8>)
    bdec:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    bdee:	4b17      	ldr	r3, [pc, #92]	; (be4c <_usb_d_dev_init+0xdc>)
    bdf0:	4798      	blx	r3

	_usb_load_calib();
    bdf2:	4b17      	ldr	r3, [pc, #92]	; (be50 <_usb_d_dev_init+0xe0>)
    bdf4:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    bdf6:	2104      	movs	r1, #4
    bdf8:	68f8      	ldr	r0, [r7, #12]
    bdfa:	4b11      	ldr	r3, [pc, #68]	; (be40 <_usb_d_dev_init+0xd0>)
    bdfc:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    bdfe:	4b15      	ldr	r3, [pc, #84]	; (be54 <_usb_d_dev_init+0xe4>)
    be00:	4619      	mov	r1, r3
    be02:	68f8      	ldr	r0, [r7, #12]
    be04:	4b14      	ldr	r3, [pc, #80]	; (be58 <_usb_d_dev_init+0xe8>)
    be06:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    be08:	7afb      	ldrb	r3, [r7, #11]
    be0a:	f107 0210 	add.w	r2, r7, #16
    be0e:	4413      	add	r3, r2
    be10:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    be14:	f043 0301 	orr.w	r3, r3, #1
    be18:	b2db      	uxtb	r3, r3
    be1a:	b29b      	uxth	r3, r3
    be1c:	4619      	mov	r1, r3
    be1e:	68f8      	ldr	r0, [r7, #12]
    be20:	4b0e      	ldr	r3, [pc, #56]	; (be5c <_usb_d_dev_init+0xec>)
    be22:	4798      	blx	r3

	return ERR_NONE;
    be24:	2300      	movs	r3, #0
}
    be26:	4618      	mov	r0, r3
    be28:	3710      	adds	r7, #16
    be2a:	46bd      	mov	sp, r7
    be2c:	bd80      	pop	{r7, pc}
    be2e:	bf00      	nop
    be30:	0000a409 	.word	0x0000a409
    be34:	0000a759 	.word	0x0000a759
    be38:	0000a72d 	.word	0x0000a72d
    be3c:	0000a3df 	.word	0x0000a3df
    be40:	0000a789 	.word	0x0000a789
    be44:	200025ac 	.word	0x200025ac
    be48:	0000a851 	.word	0x0000a851
    be4c:	0000bcf5 	.word	0x0000bcf5
    be50:	0000a869 	.word	0x0000a869
    be54:	20002674 	.word	0x20002674
    be58:	0000a835 	.word	0x0000a835
    be5c:	0000a7f9 	.word	0x0000a7f9

0000be60 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    be60:	b580      	push	{r7, lr}
    be62:	b082      	sub	sp, #8
    be64:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    be66:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    be6a:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    be6c:	2103      	movs	r1, #3
    be6e:	6878      	ldr	r0, [r7, #4]
    be70:	4b17      	ldr	r3, [pc, #92]	; (bed0 <_usb_d_dev_enable+0x70>)
    be72:	4798      	blx	r3
    be74:	4603      	mov	r3, r0
    be76:	2b00      	cmp	r3, #0
    be78:	d002      	beq.n	be80 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    be7a:	f06f 0310 	mvn.w	r3, #16
    be7e:	e023      	b.n	bec8 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    be80:	6878      	ldr	r0, [r7, #4]
    be82:	4b14      	ldr	r3, [pc, #80]	; (bed4 <_usb_d_dev_enable+0x74>)
    be84:	4798      	blx	r3
    be86:	4603      	mov	r3, r0
    be88:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    be8a:	78fb      	ldrb	r3, [r7, #3]
    be8c:	f003 0302 	and.w	r3, r3, #2
    be90:	2b00      	cmp	r3, #0
    be92:	d107      	bne.n	bea4 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    be94:	78fb      	ldrb	r3, [r7, #3]
    be96:	f043 0302 	orr.w	r3, r3, #2
    be9a:	b2db      	uxtb	r3, r3
    be9c:	4619      	mov	r1, r3
    be9e:	6878      	ldr	r0, [r7, #4]
    bea0:	4b0d      	ldr	r3, [pc, #52]	; (bed8 <_usb_d_dev_enable+0x78>)
    bea2:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    bea4:	2050      	movs	r0, #80	; 0x50
    bea6:	4b0d      	ldr	r3, [pc, #52]	; (bedc <_usb_d_dev_enable+0x7c>)
    bea8:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    beaa:	2051      	movs	r0, #81	; 0x51
    beac:	4b0b      	ldr	r3, [pc, #44]	; (bedc <_usb_d_dev_enable+0x7c>)
    beae:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    beb0:	2052      	movs	r0, #82	; 0x52
    beb2:	4b0a      	ldr	r3, [pc, #40]	; (bedc <_usb_d_dev_enable+0x7c>)
    beb4:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    beb6:	2053      	movs	r0, #83	; 0x53
    beb8:	4b08      	ldr	r3, [pc, #32]	; (bedc <_usb_d_dev_enable+0x7c>)
    beba:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    bebc:	f240 218d 	movw	r1, #653	; 0x28d
    bec0:	6878      	ldr	r0, [r7, #4]
    bec2:	4b07      	ldr	r3, [pc, #28]	; (bee0 <_usb_d_dev_enable+0x80>)
    bec4:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    bec6:	2300      	movs	r3, #0
}
    bec8:	4618      	mov	r0, r3
    beca:	3708      	adds	r7, #8
    becc:	46bd      	mov	sp, r7
    bece:	bd80      	pop	{r7, pc}
    bed0:	0000a703 	.word	0x0000a703
    bed4:	0000a7b1 	.word	0x0000a7b1
    bed8:	0000a789 	.word	0x0000a789
    bedc:	0000a315 	.word	0x0000a315
    bee0:	0000a6ad 	.word	0x0000a6ad

0000bee4 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    bee4:	b580      	push	{r7, lr}
    bee6:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    bee8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    beec:	4b01      	ldr	r3, [pc, #4]	; (bef4 <_usb_d_dev_attach+0x10>)
    beee:	4798      	blx	r3
}
    bef0:	bf00      	nop
    bef2:	bd80      	pop	{r7, pc}
    bef4:	0000a7d5 	.word	0x0000a7d5

0000bef8 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    bef8:	b580      	push	{r7, lr}
    befa:	b082      	sub	sp, #8
    befc:	af00      	add	r7, sp, #0
    befe:	4603      	mov	r3, r0
    bf00:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    bf02:	79fb      	ldrb	r3, [r7, #7]
    bf04:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bf08:	b2db      	uxtb	r3, r3
    bf0a:	4619      	mov	r1, r3
    bf0c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    bf10:	4b02      	ldr	r3, [pc, #8]	; (bf1c <_usb_d_dev_set_address+0x24>)
    bf12:	4798      	blx	r3
}
    bf14:	bf00      	nop
    bf16:	3708      	adds	r7, #8
    bf18:	46bd      	mov	sp, r7
    bf1a:	bd80      	pop	{r7, pc}
    bf1c:	0000a817 	.word	0x0000a817

0000bf20 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    bf20:	b590      	push	{r4, r7, lr}
    bf22:	b085      	sub	sp, #20
    bf24:	af00      	add	r7, sp, #0
    bf26:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    bf28:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    bf2c:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    bf2e:	687b      	ldr	r3, [r7, #4]
    bf30:	7c9b      	ldrb	r3, [r3, #18]
    bf32:	f003 030f 	and.w	r3, r3, #15
    bf36:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    bf38:	687b      	ldr	r3, [r7, #4]
    bf3a:	68db      	ldr	r3, [r3, #12]
    bf3c:	461a      	mov	r2, r3
    bf3e:	7afb      	ldrb	r3, [r7, #11]
    bf40:	2100      	movs	r1, #0
    bf42:	4618      	mov	r0, r3
    bf44:	4b0f      	ldr	r3, [pc, #60]	; (bf84 <_usb_d_dev_trans_setup+0x64>)
    bf46:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    bf48:	687b      	ldr	r3, [r7, #4]
    bf4a:	8a1b      	ldrh	r3, [r3, #16]
    bf4c:	461a      	mov	r2, r3
    bf4e:	7af8      	ldrb	r0, [r7, #11]
    bf50:	2300      	movs	r3, #0
    bf52:	2100      	movs	r1, #0
    bf54:	4c0c      	ldr	r4, [pc, #48]	; (bf88 <_usb_d_dev_trans_setup+0x68>)
    bf56:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    bf58:	7afb      	ldrb	r3, [r7, #11]
    bf5a:	22b0      	movs	r2, #176	; 0xb0
    bf5c:	4619      	mov	r1, r3
    bf5e:	68f8      	ldr	r0, [r7, #12]
    bf60:	4b0a      	ldr	r3, [pc, #40]	; (bf8c <_usb_d_dev_trans_setup+0x6c>)
    bf62:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    bf64:	7afb      	ldrb	r3, [r7, #11]
    bf66:	2200      	movs	r2, #0
    bf68:	2100      	movs	r1, #0
    bf6a:	4618      	mov	r0, r3
    bf6c:	4b08      	ldr	r3, [pc, #32]	; (bf90 <_usb_d_dev_trans_setup+0x70>)
    bf6e:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    bf70:	7afb      	ldrb	r3, [r7, #11]
    bf72:	2210      	movs	r2, #16
    bf74:	4619      	mov	r1, r3
    bf76:	68f8      	ldr	r0, [r7, #12]
    bf78:	4b06      	ldr	r3, [pc, #24]	; (bf94 <_usb_d_dev_trans_setup+0x74>)
    bf7a:	4798      	blx	r3
}
    bf7c:	bf00      	nop
    bf7e:	3714      	adds	r7, #20
    bf80:	46bd      	mov	sp, r7
    bf82:	bd90      	pop	{r4, r7, pc}
    bf84:	0000acb5 	.word	0x0000acb5
    bf88:	0000ae3d 	.word	0x0000ae3d
    bf8c:	0000a515 	.word	0x0000a515
    bf90:	0000af0d 	.word	0x0000af0d
    bf94:	0000a569 	.word	0x0000a569

0000bf98 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    bf98:	b580      	push	{r7, lr}
    bf9a:	b088      	sub	sp, #32
    bf9c:	af00      	add	r7, sp, #0
    bf9e:	4603      	mov	r3, r0
    bfa0:	71fb      	strb	r3, [r7, #7]
    bfa2:	460b      	mov	r3, r1
    bfa4:	71bb      	strb	r3, [r7, #6]
    bfa6:	4613      	mov	r3, r2
    bfa8:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    bfaa:	79fb      	ldrb	r3, [r7, #7]
    bfac:	f003 030f 	and.w	r3, r3, #15
    bfb0:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    bfb2:	79fb      	ldrb	r3, [r7, #7]
    bfb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bfb8:	2b00      	cmp	r3, #0
    bfba:	bf14      	ite	ne
    bfbc:	2301      	movne	r3, #1
    bfbe:	2300      	moveq	r3, #0
    bfc0:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    bfc2:	7fba      	ldrb	r2, [r7, #30]
    bfc4:	7ffb      	ldrb	r3, [r7, #31]
    bfc6:	4611      	mov	r1, r2
    bfc8:	4618      	mov	r0, r3
    bfca:	4b3e      	ldr	r3, [pc, #248]	; (c0c4 <_usb_d_dev_ep_init+0x12c>)
    bfcc:	4798      	blx	r3
    bfce:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    bfd0:	79bb      	ldrb	r3, [r7, #6]
    bfd2:	f003 0303 	and.w	r3, r3, #3
    bfd6:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    bfd8:	7ffa      	ldrb	r2, [r7, #31]
    bfda:	4613      	mov	r3, r2
    bfdc:	005b      	lsls	r3, r3, #1
    bfde:	4413      	add	r3, r2
    bfe0:	009b      	lsls	r3, r3, #2
    bfe2:	4a39      	ldr	r2, [pc, #228]	; (c0c8 <_usb_d_dev_ep_init+0x130>)
    bfe4:	4413      	add	r3, r2
    bfe6:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    bfe8:	7ffb      	ldrb	r3, [r7, #31]
    bfea:	2b04      	cmp	r3, #4
    bfec:	d902      	bls.n	bff4 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    bfee:	f06f 0311 	mvn.w	r3, #17
    bff2:	e063      	b.n	c0bc <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    bff4:	69bb      	ldr	r3, [r7, #24]
    bff6:	7c9b      	ldrb	r3, [r3, #18]
    bff8:	2bff      	cmp	r3, #255	; 0xff
    bffa:	d002      	beq.n	c002 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    bffc:	f06f 0313 	mvn.w	r3, #19
    c000:	e05c      	b.n	c0bc <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    c002:	7dfb      	ldrb	r3, [r7, #23]
    c004:	2b00      	cmp	r3, #0
    c006:	d11f      	bne.n	c048 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    c008:	7fbb      	ldrb	r3, [r7, #30]
    c00a:	2b00      	cmp	r3, #0
    c00c:	bf14      	ite	ne
    c00e:	2301      	movne	r3, #1
    c010:	2300      	moveq	r3, #0
    c012:	b2db      	uxtb	r3, r3
    c014:	f083 0301 	eor.w	r3, r3, #1
    c018:	b2db      	uxtb	r3, r3
    c01a:	f003 0301 	and.w	r3, r3, #1
    c01e:	b2da      	uxtb	r2, r3
    c020:	7ffb      	ldrb	r3, [r7, #31]
    c022:	4611      	mov	r1, r2
    c024:	4618      	mov	r0, r3
    c026:	4b27      	ldr	r3, [pc, #156]	; (c0c4 <_usb_d_dev_ep_init+0x12c>)
    c028:	4798      	blx	r3
    c02a:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    c02c:	68fb      	ldr	r3, [r7, #12]
    c02e:	7c9b      	ldrb	r3, [r3, #18]
    c030:	2bff      	cmp	r3, #255	; 0xff
    c032:	d002      	beq.n	c03a <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    c034:	f06f 0313 	mvn.w	r3, #19
    c038:	e040      	b.n	c0bc <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    c03a:	693b      	ldr	r3, [r7, #16]
    c03c:	681b      	ldr	r3, [r3, #0]
    c03e:	2b00      	cmp	r3, #0
    c040:	d102      	bne.n	c048 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    c042:	f06f 0312 	mvn.w	r3, #18
    c046:	e039      	b.n	c0bc <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    c048:	7fbb      	ldrb	r3, [r7, #30]
    c04a:	2b00      	cmp	r3, #0
    c04c:	d007      	beq.n	c05e <_usb_d_dev_ep_init+0xc6>
    c04e:	693b      	ldr	r3, [r7, #16]
    c050:	685b      	ldr	r3, [r3, #4]
    c052:	2b00      	cmp	r3, #0
    c054:	bf14      	ite	ne
    c056:	2301      	movne	r3, #1
    c058:	2300      	moveq	r3, #0
    c05a:	b2db      	uxtb	r3, r3
    c05c:	e006      	b.n	c06c <_usb_d_dev_ep_init+0xd4>
    c05e:	693b      	ldr	r3, [r7, #16]
    c060:	681b      	ldr	r3, [r3, #0]
    c062:	2b00      	cmp	r3, #0
    c064:	bf14      	ite	ne
    c066:	2301      	movne	r3, #1
    c068:	2300      	moveq	r3, #0
    c06a:	b2db      	uxtb	r3, r3
    c06c:	2b00      	cmp	r3, #0
    c06e:	d00f      	beq.n	c090 <_usb_d_dev_ep_init+0xf8>
    c070:	7fbb      	ldrb	r3, [r7, #30]
    c072:	2b00      	cmp	r3, #0
    c074:	d003      	beq.n	c07e <_usb_d_dev_ep_init+0xe6>
    c076:	693b      	ldr	r3, [r7, #16]
    c078:	895b      	ldrh	r3, [r3, #10]
    c07a:	461a      	mov	r2, r3
    c07c:	e002      	b.n	c084 <_usb_d_dev_ep_init+0xec>
    c07e:	693b      	ldr	r3, [r7, #16]
    c080:	891b      	ldrh	r3, [r3, #8]
    c082:	461a      	mov	r2, r3
    c084:	88bb      	ldrh	r3, [r7, #4]
    c086:	429a      	cmp	r2, r3
    c088:	da02      	bge.n	c090 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    c08a:	f06f 0312 	mvn.w	r3, #18
    c08e:	e015      	b.n	c0bc <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    c090:	7fbb      	ldrb	r3, [r7, #30]
    c092:	2b00      	cmp	r3, #0
    c094:	d002      	beq.n	c09c <_usb_d_dev_ep_init+0x104>
    c096:	693b      	ldr	r3, [r7, #16]
    c098:	685b      	ldr	r3, [r3, #4]
    c09a:	e001      	b.n	c0a0 <_usb_d_dev_ep_init+0x108>
    c09c:	693b      	ldr	r3, [r7, #16]
    c09e:	681b      	ldr	r3, [r3, #0]
    c0a0:	69ba      	ldr	r2, [r7, #24]
    c0a2:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    c0a4:	69bb      	ldr	r3, [r7, #24]
    c0a6:	88ba      	ldrh	r2, [r7, #4]
    c0a8:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    c0aa:	7dfb      	ldrb	r3, [r7, #23]
    c0ac:	3301      	adds	r3, #1
    c0ae:	b2da      	uxtb	r2, r3
    c0b0:	69bb      	ldr	r3, [r7, #24]
    c0b2:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    c0b4:	69bb      	ldr	r3, [r7, #24]
    c0b6:	79fa      	ldrb	r2, [r7, #7]
    c0b8:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    c0ba:	2300      	movs	r3, #0
}
    c0bc:	4618      	mov	r0, r3
    c0be:	3720      	adds	r7, #32
    c0c0:	46bd      	mov	sp, r7
    c0c2:	bd80      	pop	{r7, pc}
    c0c4:	0000afc9 	.word	0x0000afc9
    c0c8:	0001b47c 	.word	0x0001b47c

0000c0cc <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    c0cc:	b580      	push	{r7, lr}
    c0ce:	b086      	sub	sp, #24
    c0d0:	af00      	add	r7, sp, #0
    c0d2:	4603      	mov	r3, r0
    c0d4:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    c0d6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c0da:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    c0dc:	79fb      	ldrb	r3, [r7, #7]
    c0de:	f003 030f 	and.w	r3, r3, #15
    c0e2:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    c0e4:	79fb      	ldrb	r3, [r7, #7]
    c0e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c0ea:	2b00      	cmp	r3, #0
    c0ec:	bf14      	ite	ne
    c0ee:	2301      	movne	r3, #1
    c0f0:	2300      	moveq	r3, #0
    c0f2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c0f4:	7cba      	ldrb	r2, [r7, #18]
    c0f6:	7cfb      	ldrb	r3, [r7, #19]
    c0f8:	4611      	mov	r1, r2
    c0fa:	4618      	mov	r0, r3
    c0fc:	4b2a      	ldr	r3, [pc, #168]	; (c1a8 <_usb_d_dev_ep_deinit+0xdc>)
    c0fe:	4798      	blx	r3
    c100:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    c102:	7cfb      	ldrb	r3, [r7, #19]
    c104:	2b04      	cmp	r3, #4
    c106:	d84a      	bhi.n	c19e <_usb_d_dev_ep_deinit+0xd2>
    c108:	68fb      	ldr	r3, [r7, #12]
    c10a:	7c9b      	ldrb	r3, [r3, #18]
    c10c:	2bff      	cmp	r3, #255	; 0xff
    c10e:	d046      	beq.n	c19e <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    c110:	7cbb      	ldrb	r3, [r7, #18]
    c112:	2203      	movs	r2, #3
    c114:	4619      	mov	r1, r3
    c116:	68f8      	ldr	r0, [r7, #12]
    c118:	4b24      	ldr	r3, [pc, #144]	; (c1ac <_usb_d_dev_ep_deinit+0xe0>)
    c11a:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    c11c:	68fb      	ldr	r3, [r7, #12]
    c11e:	7cdb      	ldrb	r3, [r3, #19]
    c120:	f003 0307 	and.w	r3, r3, #7
    c124:	b2db      	uxtb	r3, r3
    c126:	2b01      	cmp	r3, #1
    c128:	d107      	bne.n	c13a <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    c12a:	79fb      	ldrb	r3, [r7, #7]
    c12c:	697a      	ldr	r2, [r7, #20]
    c12e:	3308      	adds	r3, #8
    c130:	015b      	lsls	r3, r3, #5
    c132:	4413      	add	r3, r2
    c134:	2200      	movs	r2, #0
    c136:	701a      	strb	r2, [r3, #0]
    c138:	e02a      	b.n	c190 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    c13a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c13e:	2b00      	cmp	r3, #0
    c140:	da15      	bge.n	c16e <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    c142:	79fb      	ldrb	r3, [r7, #7]
    c144:	f003 030f 	and.w	r3, r3, #15
    c148:	79fa      	ldrb	r2, [r7, #7]
    c14a:	f002 020f 	and.w	r2, r2, #15
    c14e:	6979      	ldr	r1, [r7, #20]
    c150:	3208      	adds	r2, #8
    c152:	0152      	lsls	r2, r2, #5
    c154:	440a      	add	r2, r1
    c156:	7812      	ldrb	r2, [r2, #0]
    c158:	b2d2      	uxtb	r2, r2
    c15a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    c15e:	b2d1      	uxtb	r1, r2
    c160:	697a      	ldr	r2, [r7, #20]
    c162:	3308      	adds	r3, #8
    c164:	015b      	lsls	r3, r3, #5
    c166:	4413      	add	r3, r2
    c168:	460a      	mov	r2, r1
    c16a:	701a      	strb	r2, [r3, #0]
    c16c:	e010      	b.n	c190 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    c16e:	79fb      	ldrb	r3, [r7, #7]
    c170:	79fa      	ldrb	r2, [r7, #7]
    c172:	6979      	ldr	r1, [r7, #20]
    c174:	3208      	adds	r2, #8
    c176:	0152      	lsls	r2, r2, #5
    c178:	440a      	add	r2, r1
    c17a:	7812      	ldrb	r2, [r2, #0]
    c17c:	b2d2      	uxtb	r2, r2
    c17e:	f022 0207 	bic.w	r2, r2, #7
    c182:	b2d1      	uxtb	r1, r2
    c184:	697a      	ldr	r2, [r7, #20]
    c186:	3308      	adds	r3, #8
    c188:	015b      	lsls	r3, r3, #5
    c18a:	4413      	add	r3, r2
    c18c:	460a      	mov	r2, r1
    c18e:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    c190:	68fb      	ldr	r3, [r7, #12]
    c192:	2200      	movs	r2, #0
    c194:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    c196:	68fb      	ldr	r3, [r7, #12]
    c198:	22ff      	movs	r2, #255	; 0xff
    c19a:	749a      	strb	r2, [r3, #18]
    c19c:	e000      	b.n	c1a0 <_usb_d_dev_ep_deinit+0xd4>
		return;
    c19e:	bf00      	nop
}
    c1a0:	3718      	adds	r7, #24
    c1a2:	46bd      	mov	sp, r7
    c1a4:	bd80      	pop	{r7, pc}
    c1a6:	bf00      	nop
    c1a8:	0000afc9 	.word	0x0000afc9
    c1ac:	0000c601 	.word	0x0000c601

0000c1b0 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    c1b0:	b5b0      	push	{r4, r5, r7, lr}
    c1b2:	b088      	sub	sp, #32
    c1b4:	af00      	add	r7, sp, #0
    c1b6:	4603      	mov	r3, r0
    c1b8:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    c1ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c1be:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    c1c0:	79fb      	ldrb	r3, [r7, #7]
    c1c2:	f003 030f 	and.w	r3, r3, #15
    c1c6:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    c1c8:	79fb      	ldrb	r3, [r7, #7]
    c1ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c1ce:	2b00      	cmp	r3, #0
    c1d0:	bf14      	ite	ne
    c1d2:	2301      	movne	r3, #1
    c1d4:	2300      	moveq	r3, #0
    c1d6:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    c1d8:	7eba      	ldrb	r2, [r7, #26]
    c1da:	7efb      	ldrb	r3, [r7, #27]
    c1dc:	4611      	mov	r1, r2
    c1de:	4618      	mov	r0, r3
    c1e0:	4b70      	ldr	r3, [pc, #448]	; (c3a4 <_usb_d_dev_ep_enable+0x1f4>)
    c1e2:	4798      	blx	r3
    c1e4:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    c1e6:	7efb      	ldrb	r3, [r7, #27]
    c1e8:	4619      	mov	r1, r3
    c1ea:	69f8      	ldr	r0, [r7, #28]
    c1ec:	4b6e      	ldr	r3, [pc, #440]	; (c3a8 <_usb_d_dev_ep_enable+0x1f8>)
    c1ee:	4798      	blx	r3
    c1f0:	4603      	mov	r3, r0
    c1f2:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    c1f4:	7efb      	ldrb	r3, [r7, #27]
    c1f6:	2b04      	cmp	r3, #4
    c1f8:	d803      	bhi.n	c202 <_usb_d_dev_ep_enable+0x52>
    c1fa:	697b      	ldr	r3, [r7, #20]
    c1fc:	7c9b      	ldrb	r3, [r3, #18]
    c1fe:	2bff      	cmp	r3, #255	; 0xff
    c200:	d102      	bne.n	c208 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    c202:	f06f 0311 	mvn.w	r3, #17
    c206:	e0c8      	b.n	c39a <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    c208:	7efb      	ldrb	r3, [r7, #27]
    c20a:	015b      	lsls	r3, r3, #5
    c20c:	4a67      	ldr	r2, [pc, #412]	; (c3ac <_usb_d_dev_ep_enable+0x1fc>)
    c20e:	4413      	add	r3, r2
    c210:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    c212:	697b      	ldr	r3, [r7, #20]
    c214:	7cdb      	ldrb	r3, [r3, #19]
    c216:	f003 0307 	and.w	r3, r3, #7
    c21a:	b2db      	uxtb	r3, r3
    c21c:	2b01      	cmp	r3, #1
    c21e:	d14b      	bne.n	c2b8 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    c220:	7cfb      	ldrb	r3, [r7, #19]
    c222:	f003 0377 	and.w	r3, r3, #119	; 0x77
    c226:	2b00      	cmp	r3, #0
    c228:	d002      	beq.n	c230 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    c22a:	f06f 0313 	mvn.w	r3, #19
    c22e:	e0b4      	b.n	c39a <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    c230:	7efb      	ldrb	r3, [r7, #27]
    c232:	2211      	movs	r2, #17
    c234:	4619      	mov	r1, r3
    c236:	69f8      	ldr	r0, [r7, #28]
    c238:	4b5d      	ldr	r3, [pc, #372]	; (c3b0 <_usb_d_dev_ep_enable+0x200>)
    c23a:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c23c:	697b      	ldr	r3, [r7, #20]
    c23e:	8a1b      	ldrh	r3, [r3, #16]
    c240:	039b      	lsls	r3, r3, #14
    c242:	4c5c      	ldr	r4, [pc, #368]	; (c3b4 <_usb_d_dev_ep_enable+0x204>)
    c244:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c246:	697b      	ldr	r3, [r7, #20]
    c248:	8a1b      	ldrh	r3, [r3, #16]
    c24a:	4618      	mov	r0, r3
    c24c:	4b5a      	ldr	r3, [pc, #360]	; (c3b8 <_usb_d_dev_ep_enable+0x208>)
    c24e:	4798      	blx	r3
    c250:	4603      	mov	r3, r0
    c252:	071b      	lsls	r3, r3, #28
    c254:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c258:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c25c:	68fb      	ldr	r3, [r7, #12]
    c25e:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    c260:	68fb      	ldr	r3, [r7, #12]
    c262:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c266:	697b      	ldr	r3, [r7, #20]
    c268:	8a1b      	ldrh	r3, [r3, #16]
    c26a:	f3c3 050d 	ubfx	r5, r3, #0, #14
    c26e:	697b      	ldr	r3, [r7, #20]
    c270:	8a1b      	ldrh	r3, [r3, #16]
    c272:	4618      	mov	r0, r3
    c274:	4b50      	ldr	r3, [pc, #320]	; (c3b8 <_usb_d_dev_ep_enable+0x208>)
    c276:	4798      	blx	r3
    c278:	4603      	mov	r3, r0
    c27a:	071b      	lsls	r3, r3, #28
    c27c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c280:	432b      	orrs	r3, r5
    c282:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c284:	7efb      	ldrb	r3, [r7, #27]
    c286:	2200      	movs	r2, #0
    c288:	2100      	movs	r1, #0
    c28a:	4618      	mov	r0, r3
    c28c:	4b4b      	ldr	r3, [pc, #300]	; (c3bc <_usb_d_dev_ep_enable+0x20c>)
    c28e:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    c290:	7efb      	ldrb	r3, [r7, #27]
    c292:	2200      	movs	r2, #0
    c294:	2101      	movs	r1, #1
    c296:	4618      	mov	r0, r3
    c298:	4b49      	ldr	r3, [pc, #292]	; (c3c0 <_usb_d_dev_ep_enable+0x210>)
    c29a:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    c29c:	7efb      	ldrb	r3, [r7, #27]
    c29e:	2100      	movs	r1, #0
    c2a0:	4618      	mov	r0, r3
    c2a2:	4b48      	ldr	r3, [pc, #288]	; (c3c4 <_usb_d_dev_ep_enable+0x214>)
    c2a4:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    c2a6:	7efb      	ldrb	r3, [r7, #27]
    c2a8:	2101      	movs	r1, #1
    c2aa:	4618      	mov	r0, r3
    c2ac:	4b45      	ldr	r3, [pc, #276]	; (c3c4 <_usb_d_dev_ep_enable+0x214>)
    c2ae:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    c2b0:	6978      	ldr	r0, [r7, #20]
    c2b2:	4b45      	ldr	r3, [pc, #276]	; (c3c8 <_usb_d_dev_ep_enable+0x218>)
    c2b4:	4798      	blx	r3
    c2b6:	e06f      	b.n	c398 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    c2b8:	7ebb      	ldrb	r3, [r7, #26]
    c2ba:	2b00      	cmp	r3, #0
    c2bc:	d038      	beq.n	c330 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    c2be:	7cfb      	ldrb	r3, [r7, #19]
    c2c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c2c4:	2b00      	cmp	r3, #0
    c2c6:	d002      	beq.n	c2ce <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    c2c8:	f06f 0313 	mvn.w	r3, #19
    c2cc:	e065      	b.n	c39a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    c2ce:	697b      	ldr	r3, [r7, #20]
    c2d0:	7cdb      	ldrb	r3, [r3, #19]
    c2d2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c2d6:	b2db      	uxtb	r3, r3
    c2d8:	011b      	lsls	r3, r3, #4
    c2da:	b2db      	uxtb	r3, r3
    c2dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c2e0:	b2da      	uxtb	r2, r3
    c2e2:	7cfb      	ldrb	r3, [r7, #19]
    c2e4:	4313      	orrs	r3, r2
    c2e6:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    c2e8:	7cfa      	ldrb	r2, [r7, #19]
    c2ea:	7efb      	ldrb	r3, [r7, #27]
    c2ec:	4619      	mov	r1, r3
    c2ee:	69f8      	ldr	r0, [r7, #28]
    c2f0:	4b2f      	ldr	r3, [pc, #188]	; (c3b0 <_usb_d_dev_ep_enable+0x200>)
    c2f2:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    c2f4:	68fb      	ldr	r3, [r7, #12]
    c2f6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c2fa:	697b      	ldr	r3, [r7, #20]
    c2fc:	8a1b      	ldrh	r3, [r3, #16]
    c2fe:	f3c3 050d 	ubfx	r5, r3, #0, #14
    c302:	697b      	ldr	r3, [r7, #20]
    c304:	8a1b      	ldrh	r3, [r3, #16]
    c306:	4618      	mov	r0, r3
    c308:	4b2b      	ldr	r3, [pc, #172]	; (c3b8 <_usb_d_dev_ep_enable+0x208>)
    c30a:	4798      	blx	r3
    c30c:	4603      	mov	r3, r0
    c30e:	071b      	lsls	r3, r3, #28
    c310:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c314:	432b      	orrs	r3, r5
    c316:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    c318:	7efb      	ldrb	r3, [r7, #27]
    c31a:	2200      	movs	r2, #0
    c31c:	2101      	movs	r1, #1
    c31e:	4618      	mov	r0, r3
    c320:	4b27      	ldr	r3, [pc, #156]	; (c3c0 <_usb_d_dev_ep_enable+0x210>)
    c322:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    c324:	7efb      	ldrb	r3, [r7, #27]
    c326:	2101      	movs	r1, #1
    c328:	4618      	mov	r0, r3
    c32a:	4b26      	ldr	r3, [pc, #152]	; (c3c4 <_usb_d_dev_ep_enable+0x214>)
    c32c:	4798      	blx	r3
    c32e:	e033      	b.n	c398 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    c330:	7cfb      	ldrb	r3, [r7, #19]
    c332:	f003 0307 	and.w	r3, r3, #7
    c336:	2b00      	cmp	r3, #0
    c338:	d002      	beq.n	c340 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    c33a:	f06f 0313 	mvn.w	r3, #19
    c33e:	e02c      	b.n	c39a <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    c340:	697b      	ldr	r3, [r7, #20]
    c342:	7cdb      	ldrb	r3, [r3, #19]
    c344:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c348:	b2db      	uxtb	r3, r3
    c34a:	461a      	mov	r2, r3
    c34c:	7cfb      	ldrb	r3, [r7, #19]
    c34e:	4313      	orrs	r3, r2
    c350:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    c352:	7cfa      	ldrb	r2, [r7, #19]
    c354:	7efb      	ldrb	r3, [r7, #27]
    c356:	4619      	mov	r1, r3
    c358:	69f8      	ldr	r0, [r7, #28]
    c35a:	4b15      	ldr	r3, [pc, #84]	; (c3b0 <_usb_d_dev_ep_enable+0x200>)
    c35c:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c35e:	697b      	ldr	r3, [r7, #20]
    c360:	8a1b      	ldrh	r3, [r3, #16]
    c362:	039b      	lsls	r3, r3, #14
    c364:	4c13      	ldr	r4, [pc, #76]	; (c3b4 <_usb_d_dev_ep_enable+0x204>)
    c366:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c368:	697b      	ldr	r3, [r7, #20]
    c36a:	8a1b      	ldrh	r3, [r3, #16]
    c36c:	4618      	mov	r0, r3
    c36e:	4b12      	ldr	r3, [pc, #72]	; (c3b8 <_usb_d_dev_ep_enable+0x208>)
    c370:	4798      	blx	r3
    c372:	4603      	mov	r3, r0
    c374:	071b      	lsls	r3, r3, #28
    c376:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    c37a:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c37e:	68fb      	ldr	r3, [r7, #12]
    c380:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c382:	7efb      	ldrb	r3, [r7, #27]
    c384:	2200      	movs	r2, #0
    c386:	2100      	movs	r1, #0
    c388:	4618      	mov	r0, r3
    c38a:	4b0c      	ldr	r3, [pc, #48]	; (c3bc <_usb_d_dev_ep_enable+0x20c>)
    c38c:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    c38e:	7efb      	ldrb	r3, [r7, #27]
    c390:	2100      	movs	r1, #0
    c392:	4618      	mov	r0, r3
    c394:	4b0b      	ldr	r3, [pc, #44]	; (c3c4 <_usb_d_dev_ep_enable+0x214>)
    c396:	4798      	blx	r3
	}

	return USB_OK;
    c398:	2300      	movs	r3, #0
}
    c39a:	4618      	mov	r0, r3
    c39c:	3720      	adds	r7, #32
    c39e:	46bd      	mov	sp, r7
    c3a0:	bdb0      	pop	{r4, r5, r7, pc}
    c3a2:	bf00      	nop
    c3a4:	0000afc9 	.word	0x0000afc9
    c3a8:	0000a64f 	.word	0x0000a64f
    c3ac:	20002674 	.word	0x20002674
    c3b0:	0000a625 	.word	0x0000a625
    c3b4:	0fffc000 	.word	0x0fffc000
    c3b8:	0000af65 	.word	0x0000af65
    c3bc:	0000af0d 	.word	0x0000af0d
    c3c0:	0000aeb5 	.word	0x0000aeb5
    c3c4:	0000ae7d 	.word	0x0000ae7d
    c3c8:	0000bf21 	.word	0x0000bf21

0000c3cc <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    c3cc:	b580      	push	{r7, lr}
    c3ce:	b084      	sub	sp, #16
    c3d0:	af00      	add	r7, sp, #0
    c3d2:	6078      	str	r0, [r7, #4]
    c3d4:	460b      	mov	r3, r1
    c3d6:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c3d8:	687b      	ldr	r3, [r7, #4]
    c3da:	7c9b      	ldrb	r3, [r3, #18]
    c3dc:	f003 030f 	and.w	r3, r3, #15
    c3e0:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    c3e2:	78fa      	ldrb	r2, [r7, #3]
    c3e4:	7bfb      	ldrb	r3, [r7, #15]
    c3e6:	4611      	mov	r1, r2
    c3e8:	4618      	mov	r0, r3
    c3ea:	4b03      	ldr	r3, [pc, #12]	; (c3f8 <_usb_d_dev_ep_stall_get+0x2c>)
    c3ec:	4798      	blx	r3
    c3ee:	4603      	mov	r3, r0
}
    c3f0:	4618      	mov	r0, r3
    c3f2:	3710      	adds	r7, #16
    c3f4:	46bd      	mov	sp, r7
    c3f6:	bd80      	pop	{r7, pc}
    c3f8:	0000aabd 	.word	0x0000aabd

0000c3fc <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    c3fc:	b580      	push	{r7, lr}
    c3fe:	b084      	sub	sp, #16
    c400:	af00      	add	r7, sp, #0
    c402:	6078      	str	r0, [r7, #4]
    c404:	460b      	mov	r3, r1
    c406:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c408:	687b      	ldr	r3, [r7, #4]
    c40a:	7c9b      	ldrb	r3, [r3, #18]
    c40c:	f003 030f 	and.w	r3, r3, #15
    c410:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    c412:	78f9      	ldrb	r1, [r7, #3]
    c414:	7bfb      	ldrb	r3, [r7, #15]
    c416:	2201      	movs	r2, #1
    c418:	4618      	mov	r0, r3
    c41a:	4b0a      	ldr	r3, [pc, #40]	; (c444 <_usb_d_dev_ep_stall_set+0x48>)
    c41c:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    c41e:	78fb      	ldrb	r3, [r7, #3]
    c420:	2220      	movs	r2, #32
    c422:	409a      	lsls	r2, r3
    c424:	7bfb      	ldrb	r3, [r7, #15]
    c426:	4611      	mov	r1, r2
    c428:	4618      	mov	r0, r3
    c42a:	4b07      	ldr	r3, [pc, #28]	; (c448 <_usb_d_dev_ep_stall_set+0x4c>)
    c42c:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    c42e:	687a      	ldr	r2, [r7, #4]
    c430:	7cd3      	ldrb	r3, [r2, #19]
    c432:	f043 0308 	orr.w	r3, r3, #8
    c436:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    c438:	2300      	movs	r3, #0
}
    c43a:	4618      	mov	r0, r3
    c43c:	3710      	adds	r7, #16
    c43e:	46bd      	mov	sp, r7
    c440:	bd80      	pop	{r7, pc}
    c442:	bf00      	nop
    c444:	0000aa65 	.word	0x0000aa65
    c448:	0000a9e5 	.word	0x0000a9e5

0000c44c <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    c44c:	b580      	push	{r7, lr}
    c44e:	b084      	sub	sp, #16
    c450:	af00      	add	r7, sp, #0
    c452:	6078      	str	r0, [r7, #4]
    c454:	460b      	mov	r3, r1
    c456:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    c458:	687b      	ldr	r3, [r7, #4]
    c45a:	7c9b      	ldrb	r3, [r3, #18]
    c45c:	f003 030f 	and.w	r3, r3, #15
    c460:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    c462:	78fa      	ldrb	r2, [r7, #3]
    c464:	7bfb      	ldrb	r3, [r7, #15]
    c466:	4611      	mov	r1, r2
    c468:	4618      	mov	r0, r3
    c46a:	4b28      	ldr	r3, [pc, #160]	; (c50c <_usb_d_dev_ep_stall_clr+0xc0>)
    c46c:	4798      	blx	r3
    c46e:	4603      	mov	r3, r0
    c470:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    c472:	7bbb      	ldrb	r3, [r7, #14]
    c474:	f083 0301 	eor.w	r3, r3, #1
    c478:	b2db      	uxtb	r3, r3
    c47a:	2b00      	cmp	r3, #0
    c47c:	d001      	beq.n	c482 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    c47e:	2300      	movs	r3, #0
    c480:	e040      	b.n	c504 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    c482:	78f9      	ldrb	r1, [r7, #3]
    c484:	7bfb      	ldrb	r3, [r7, #15]
    c486:	2200      	movs	r2, #0
    c488:	4618      	mov	r0, r3
    c48a:	4b21      	ldr	r3, [pc, #132]	; (c510 <_usb_d_dev_ep_stall_clr+0xc4>)
    c48c:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    c48e:	78fb      	ldrb	r3, [r7, #3]
    c490:	2220      	movs	r2, #32
    c492:	409a      	lsls	r2, r3
    c494:	7bfb      	ldrb	r3, [r7, #15]
    c496:	4611      	mov	r1, r2
    c498:	4618      	mov	r0, r3
    c49a:	4b1e      	ldr	r3, [pc, #120]	; (c514 <_usb_d_dev_ep_stall_clr+0xc8>)
    c49c:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    c49e:	78fa      	ldrb	r2, [r7, #3]
    c4a0:	7bfb      	ldrb	r3, [r7, #15]
    c4a2:	4611      	mov	r1, r2
    c4a4:	4618      	mov	r0, r3
    c4a6:	4b1c      	ldr	r3, [pc, #112]	; (c518 <_usb_d_dev_ep_stall_clr+0xcc>)
    c4a8:	4798      	blx	r3
    c4aa:	4603      	mov	r3, r0
    c4ac:	2b00      	cmp	r3, #0
    c4ae:	d00b      	beq.n	c4c8 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    c4b0:	78fa      	ldrb	r2, [r7, #3]
    c4b2:	7bfb      	ldrb	r3, [r7, #15]
    c4b4:	4611      	mov	r1, r2
    c4b6:	4618      	mov	r0, r3
    c4b8:	4b18      	ldr	r3, [pc, #96]	; (c51c <_usb_d_dev_ep_stall_clr+0xd0>)
    c4ba:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    c4bc:	78f9      	ldrb	r1, [r7, #3]
    c4be:	7bfb      	ldrb	r3, [r7, #15]
    c4c0:	2200      	movs	r2, #0
    c4c2:	4618      	mov	r0, r3
    c4c4:	4b16      	ldr	r3, [pc, #88]	; (c520 <_usb_d_dev_ep_stall_clr+0xd4>)
    c4c6:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    c4c8:	687b      	ldr	r3, [r7, #4]
    c4ca:	7cdb      	ldrb	r3, [r3, #19]
    c4cc:	f003 0307 	and.w	r3, r3, #7
    c4d0:	b2db      	uxtb	r3, r3
    c4d2:	2b01      	cmp	r3, #1
    c4d4:	d110      	bne.n	c4f8 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    c4d6:	7bfb      	ldrb	r3, [r7, #15]
    c4d8:	4619      	mov	r1, r3
    c4da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    c4de:	4b11      	ldr	r3, [pc, #68]	; (c524 <_usb_d_dev_ep_stall_clr+0xd8>)
    c4e0:	4798      	blx	r3
    c4e2:	4603      	mov	r3, r0
    c4e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
    c4e8:	2b00      	cmp	r3, #0
    c4ea:	d10a      	bne.n	c502 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    c4ec:	687a      	ldr	r2, [r7, #4]
    c4ee:	7cd3      	ldrb	r3, [r2, #19]
    c4f0:	f36f 03c3 	bfc	r3, #3, #1
    c4f4:	74d3      	strb	r3, [r2, #19]
    c4f6:	e004      	b.n	c502 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    c4f8:	687a      	ldr	r2, [r7, #4]
    c4fa:	7cd3      	ldrb	r3, [r2, #19]
    c4fc:	f36f 03c3 	bfc	r3, #3, #1
    c500:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    c502:	2300      	movs	r3, #0
}
    c504:	4618      	mov	r0, r3
    c506:	3710      	adds	r7, #16
    c508:	46bd      	mov	sp, r7
    c50a:	bd80      	pop	{r7, pc}
    c50c:	0000aabd 	.word	0x0000aabd
    c510:	0000aa65 	.word	0x0000aa65
    c514:	0000aa0d 	.word	0x0000aa0d
    c518:	0000ab01 	.word	0x0000ab01
    c51c:	0000ab45 	.word	0x0000ab45
    c520:	0000ac31 	.word	0x0000ac31
    c524:	0000a4ed 	.word	0x0000a4ed

0000c528 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    c528:	b580      	push	{r7, lr}
    c52a:	b086      	sub	sp, #24
    c52c:	af00      	add	r7, sp, #0
    c52e:	4603      	mov	r3, r0
    c530:	460a      	mov	r2, r1
    c532:	71fb      	strb	r3, [r7, #7]
    c534:	4613      	mov	r3, r2
    c536:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    c538:	79fb      	ldrb	r3, [r7, #7]
    c53a:	f003 030f 	and.w	r3, r3, #15
    c53e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    c540:	79fb      	ldrb	r3, [r7, #7]
    c542:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c546:	2b00      	cmp	r3, #0
    c548:	bf14      	ite	ne
    c54a:	2301      	movne	r3, #1
    c54c:	2300      	moveq	r3, #0
    c54e:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c550:	7cba      	ldrb	r2, [r7, #18]
    c552:	7cfb      	ldrb	r3, [r7, #19]
    c554:	4611      	mov	r1, r2
    c556:	4618      	mov	r0, r3
    c558:	4b13      	ldr	r3, [pc, #76]	; (c5a8 <_usb_d_dev_ep_stall+0x80>)
    c55a:	4798      	blx	r3
    c55c:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    c55e:	7cfb      	ldrb	r3, [r7, #19]
    c560:	2b04      	cmp	r3, #4
    c562:	d902      	bls.n	c56a <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    c564:	f06f 0311 	mvn.w	r3, #17
    c568:	e01a      	b.n	c5a0 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    c56a:	79bb      	ldrb	r3, [r7, #6]
    c56c:	2b01      	cmp	r3, #1
    c56e:	d106      	bne.n	c57e <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    c570:	7cbb      	ldrb	r3, [r7, #18]
    c572:	4619      	mov	r1, r3
    c574:	68f8      	ldr	r0, [r7, #12]
    c576:	4b0d      	ldr	r3, [pc, #52]	; (c5ac <_usb_d_dev_ep_stall+0x84>)
    c578:	4798      	blx	r3
    c57a:	6178      	str	r0, [r7, #20]
    c57c:	e00f      	b.n	c59e <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    c57e:	79bb      	ldrb	r3, [r7, #6]
    c580:	2b00      	cmp	r3, #0
    c582:	d106      	bne.n	c592 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    c584:	7cbb      	ldrb	r3, [r7, #18]
    c586:	4619      	mov	r1, r3
    c588:	68f8      	ldr	r0, [r7, #12]
    c58a:	4b09      	ldr	r3, [pc, #36]	; (c5b0 <_usb_d_dev_ep_stall+0x88>)
    c58c:	4798      	blx	r3
    c58e:	6178      	str	r0, [r7, #20]
    c590:	e005      	b.n	c59e <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    c592:	7cbb      	ldrb	r3, [r7, #18]
    c594:	4619      	mov	r1, r3
    c596:	68f8      	ldr	r0, [r7, #12]
    c598:	4b06      	ldr	r3, [pc, #24]	; (c5b4 <_usb_d_dev_ep_stall+0x8c>)
    c59a:	4798      	blx	r3
    c59c:	6178      	str	r0, [r7, #20]
	}
	return rc;
    c59e:	697b      	ldr	r3, [r7, #20]
}
    c5a0:	4618      	mov	r0, r3
    c5a2:	3718      	adds	r7, #24
    c5a4:	46bd      	mov	sp, r7
    c5a6:	bd80      	pop	{r7, pc}
    c5a8:	0000afc9 	.word	0x0000afc9
    c5ac:	0000c3fd 	.word	0x0000c3fd
    c5b0:	0000c44d 	.word	0x0000c44d
    c5b4:	0000c3cd 	.word	0x0000c3cd

0000c5b8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    c5b8:	b580      	push	{r7, lr}
    c5ba:	b082      	sub	sp, #8
    c5bc:	af00      	add	r7, sp, #0
    c5be:	6078      	str	r0, [r7, #4]
    c5c0:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c5c2:	687b      	ldr	r3, [r7, #4]
    c5c4:	7c9b      	ldrb	r3, [r3, #18]
    c5c6:	2bff      	cmp	r3, #255	; 0xff
    c5c8:	d014      	beq.n	c5f4 <_usb_d_dev_trans_done+0x3c>
    c5ca:	687b      	ldr	r3, [r7, #4]
    c5cc:	7cdb      	ldrb	r3, [r3, #19]
    c5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c5d2:	b2db      	uxtb	r3, r3
    c5d4:	2b00      	cmp	r3, #0
    c5d6:	d00d      	beq.n	c5f4 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    c5d8:	687a      	ldr	r2, [r7, #4]
    c5da:	7cd3      	ldrb	r3, [r2, #19]
    c5dc:	f36f 1386 	bfc	r3, #6, #1
    c5e0:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    c5e2:	4b06      	ldr	r3, [pc, #24]	; (c5fc <_usb_d_dev_trans_done+0x44>)
    c5e4:	691b      	ldr	r3, [r3, #16]
    c5e6:	687a      	ldr	r2, [r7, #4]
    c5e8:	7c90      	ldrb	r0, [r2, #18]
    c5ea:	687a      	ldr	r2, [r7, #4]
    c5ec:	6892      	ldr	r2, [r2, #8]
    c5ee:	6839      	ldr	r1, [r7, #0]
    c5f0:	4798      	blx	r3
    c5f2:	e000      	b.n	c5f6 <_usb_d_dev_trans_done+0x3e>
		return;
    c5f4:	bf00      	nop
}
    c5f6:	3708      	adds	r7, #8
    c5f8:	46bd      	mov	sp, r7
    c5fa:	bd80      	pop	{r7, pc}
    c5fc:	200025ac 	.word	0x200025ac

0000c600 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    c600:	b580      	push	{r7, lr}
    c602:	b086      	sub	sp, #24
    c604:	af00      	add	r7, sp, #0
    c606:	60f8      	str	r0, [r7, #12]
    c608:	460b      	mov	r3, r1
    c60a:	607a      	str	r2, [r7, #4]
    c60c:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c60e:	68fb      	ldr	r3, [r7, #12]
    c610:	7c9b      	ldrb	r3, [r3, #18]
    c612:	f003 030f 	and.w	r3, r3, #15
    c616:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    c618:	4b1f      	ldr	r3, [pc, #124]	; (c698 <_usb_d_dev_trans_stop+0x98>)
    c61a:	881b      	ldrh	r3, [r3, #0]
    c61c:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c61e:	68fb      	ldr	r3, [r7, #12]
    c620:	7c9b      	ldrb	r3, [r3, #18]
    c622:	2bff      	cmp	r3, #255	; 0xff
    c624:	d033      	beq.n	c68e <_usb_d_dev_trans_stop+0x8e>
    c626:	68fb      	ldr	r3, [r7, #12]
    c628:	7cdb      	ldrb	r3, [r3, #19]
    c62a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c62e:	b2db      	uxtb	r3, r3
    c630:	2b00      	cmp	r3, #0
    c632:	d02c      	beq.n	c68e <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    c634:	7afb      	ldrb	r3, [r7, #11]
    c636:	2b00      	cmp	r3, #0
    c638:	d006      	beq.n	c648 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    c63a:	7dfb      	ldrb	r3, [r7, #23]
    c63c:	2200      	movs	r2, #0
    c63e:	2101      	movs	r1, #1
    c640:	4618      	mov	r0, r3
    c642:	4b16      	ldr	r3, [pc, #88]	; (c69c <_usb_d_dev_trans_stop+0x9c>)
    c644:	4798      	blx	r3
    c646:	e005      	b.n	c654 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    c648:	7dfb      	ldrb	r3, [r7, #23]
    c64a:	2200      	movs	r2, #0
    c64c:	2100      	movs	r1, #0
    c64e:	4618      	mov	r0, r3
    c650:	4b13      	ldr	r3, [pc, #76]	; (c6a0 <_usb_d_dev_trans_stop+0xa0>)
    c652:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    c654:	7afb      	ldrb	r3, [r7, #11]
    c656:	f107 0218 	add.w	r2, r7, #24
    c65a:	4413      	add	r3, r2
    c65c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    c660:	461a      	mov	r2, r3
    c662:	7dfb      	ldrb	r3, [r7, #23]
    c664:	4611      	mov	r1, r2
    c666:	4618      	mov	r0, r3
    c668:	4b0e      	ldr	r3, [pc, #56]	; (c6a4 <_usb_d_dev_trans_stop+0xa4>)
    c66a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    c66c:	7afb      	ldrb	r3, [r7, #11]
    c66e:	f107 0218 	add.w	r2, r7, #24
    c672:	4413      	add	r3, r2
    c674:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    c678:	461a      	mov	r2, r3
    c67a:	7dfb      	ldrb	r3, [r7, #23]
    c67c:	4611      	mov	r1, r2
    c67e:	4618      	mov	r0, r3
    c680:	4b09      	ldr	r3, [pc, #36]	; (c6a8 <_usb_d_dev_trans_stop+0xa8>)
    c682:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    c684:	6879      	ldr	r1, [r7, #4]
    c686:	68f8      	ldr	r0, [r7, #12]
    c688:	4b08      	ldr	r3, [pc, #32]	; (c6ac <_usb_d_dev_trans_stop+0xac>)
    c68a:	4798      	blx	r3
    c68c:	e000      	b.n	c690 <_usb_d_dev_trans_stop+0x90>
		return;
    c68e:	bf00      	nop
}
    c690:	3718      	adds	r7, #24
    c692:	46bd      	mov	sp, r7
    c694:	bd80      	pop	{r7, pc}
    c696:	bf00      	nop
    c698:	0001b4bc 	.word	0x0001b4bc
    c69c:	0000aeb5 	.word	0x0000aeb5
    c6a0:	0000af0d 	.word	0x0000af0d
    c6a4:	0000a9bd 	.word	0x0000a9bd
    c6a8:	0000aa0d 	.word	0x0000aa0d
    c6ac:	0000c5b9 	.word	0x0000c5b9

0000c6b0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    c6b0:	b580      	push	{r7, lr}
    c6b2:	b086      	sub	sp, #24
    c6b4:	af00      	add	r7, sp, #0
    c6b6:	4603      	mov	r3, r0
    c6b8:	6039      	str	r1, [r7, #0]
    c6ba:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    c6bc:	79fb      	ldrb	r3, [r7, #7]
    c6be:	f003 030f 	and.w	r3, r3, #15
    c6c2:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    c6c4:	7dfb      	ldrb	r3, [r7, #23]
    c6c6:	015b      	lsls	r3, r3, #5
    c6c8:	4a1e      	ldr	r2, [pc, #120]	; (c744 <_usb_d_dev_ep_read_req+0x94>)
    c6ca:	4413      	add	r3, r2
    c6cc:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    c6ce:	693b      	ldr	r3, [r7, #16]
    c6d0:	681b      	ldr	r3, [r3, #0]
    c6d2:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    c6d4:	693b      	ldr	r3, [r7, #16]
    c6d6:	685b      	ldr	r3, [r3, #4]
    c6d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c6dc:	b29b      	uxth	r3, r3
    c6de:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    c6e0:	7dfb      	ldrb	r3, [r7, #23]
    c6e2:	2b04      	cmp	r3, #4
    c6e4:	d802      	bhi.n	c6ec <_usb_d_dev_ep_read_req+0x3c>
    c6e6:	683b      	ldr	r3, [r7, #0]
    c6e8:	2b00      	cmp	r3, #0
    c6ea:	d102      	bne.n	c6f2 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    c6ec:	f06f 0311 	mvn.w	r3, #17
    c6f0:	e023      	b.n	c73a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    c6f2:	7dfb      	ldrb	r3, [r7, #23]
    c6f4:	4618      	mov	r0, r3
    c6f6:	4b14      	ldr	r3, [pc, #80]	; (c748 <_usb_d_dev_ep_read_req+0x98>)
    c6f8:	4798      	blx	r3
    c6fa:	4603      	mov	r3, r0
    c6fc:	f083 0301 	eor.w	r3, r3, #1
    c700:	b2db      	uxtb	r3, r3
    c702:	2b00      	cmp	r3, #0
    c704:	d002      	beq.n	c70c <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    c706:	f06f 0312 	mvn.w	r3, #18
    c70a:	e016      	b.n	c73a <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    c70c:	7dfb      	ldrb	r3, [r7, #23]
    c70e:	4618      	mov	r0, r3
    c710:	4b0e      	ldr	r3, [pc, #56]	; (c74c <_usb_d_dev_ep_read_req+0x9c>)
    c712:	4798      	blx	r3
    c714:	4603      	mov	r3, r0
    c716:	f083 0301 	eor.w	r3, r3, #1
    c71a:	b2db      	uxtb	r3, r3
    c71c:	2b00      	cmp	r3, #0
    c71e:	d001      	beq.n	c724 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    c720:	2300      	movs	r3, #0
    c722:	e00a      	b.n	c73a <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    c724:	68fb      	ldr	r3, [r7, #12]
    c726:	2208      	movs	r2, #8
    c728:	4619      	mov	r1, r3
    c72a:	6838      	ldr	r0, [r7, #0]
    c72c:	4b08      	ldr	r3, [pc, #32]	; (c750 <_usb_d_dev_ep_read_req+0xa0>)
    c72e:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    c730:	7dfb      	ldrb	r3, [r7, #23]
    c732:	4618      	mov	r0, r3
    c734:	4b07      	ldr	r3, [pc, #28]	; (c754 <_usb_d_dev_ep_read_req+0xa4>)
    c736:	4798      	blx	r3

	return bytes;
    c738:	897b      	ldrh	r3, [r7, #10]
}
    c73a:	4618      	mov	r0, r3
    c73c:	3718      	adds	r7, #24
    c73e:	46bd      	mov	sp, r7
    c740:	bd80      	pop	{r7, pc}
    c742:	bf00      	nop
    c744:	20002674 	.word	0x20002674
    c748:	0000aa35 	.word	0x0000aa35
    c74c:	0000abe1 	.word	0x0000abe1
    c750:	0001ab91 	.word	0x0001ab91
    c754:	0000ac11 	.word	0x0000ac11

0000c758 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    c758:	b580      	push	{r7, lr}
    c75a:	b086      	sub	sp, #24
    c75c:	af00      	add	r7, sp, #0
    c75e:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    c760:	687b      	ldr	r3, [r7, #4]
    c762:	7a1b      	ldrb	r3, [r3, #8]
    c764:	f003 030f 	and.w	r3, r3, #15
    c768:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    c76a:	687b      	ldr	r3, [r7, #4]
    c76c:	7a1b      	ldrb	r3, [r3, #8]
    c76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c772:	2b00      	cmp	r3, #0
    c774:	bf14      	ite	ne
    c776:	2301      	movne	r3, #1
    c778:	2300      	moveq	r3, #0
    c77a:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c77c:	7d7a      	ldrb	r2, [r7, #21]
    c77e:	7dbb      	ldrb	r3, [r7, #22]
    c780:	4611      	mov	r1, r2
    c782:	4618      	mov	r0, r3
    c784:	4b5f      	ldr	r3, [pc, #380]	; (c904 <_usb_d_dev_ep_trans+0x1ac>)
    c786:	4798      	blx	r3
    c788:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c78a:	693b      	ldr	r3, [r7, #16]
    c78c:	8a1b      	ldrh	r3, [r3, #16]
    c78e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    c792:	4293      	cmp	r3, r2
    c794:	d004      	beq.n	c7a0 <_usb_d_dev_ep_trans+0x48>
    c796:	693b      	ldr	r3, [r7, #16]
    c798:	8a1b      	ldrh	r3, [r3, #16]
    c79a:	3b01      	subs	r3, #1
    c79c:	b29b      	uxth	r3, r3
    c79e:	e001      	b.n	c7a4 <_usb_d_dev_ep_trans+0x4c>
    c7a0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c7a4:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    c7a6:	687b      	ldr	r3, [r7, #4]
    c7a8:	685a      	ldr	r2, [r3, #4]
    c7aa:	89fb      	ldrh	r3, [r7, #14]
    c7ac:	4013      	ands	r3, r2
    c7ae:	2b00      	cmp	r3, #0
    c7b0:	bf14      	ite	ne
    c7b2:	2301      	movne	r3, #1
    c7b4:	2300      	moveq	r3, #0
    c7b6:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    c7b8:	2300      	movs	r3, #0
    c7ba:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    c7bc:	7dbb      	ldrb	r3, [r7, #22]
    c7be:	2b04      	cmp	r3, #4
    c7c0:	d902      	bls.n	c7c8 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    c7c2:	f06f 0311 	mvn.w	r3, #17
    c7c6:	e098      	b.n	c8fa <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    c7c8:	687b      	ldr	r3, [r7, #4]
    c7ca:	681b      	ldr	r3, [r3, #0]
    c7cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    c7d0:	d31a      	bcc.n	c808 <_usb_d_dev_ep_trans+0xb0>
    c7d2:	687b      	ldr	r3, [r7, #4]
    c7d4:	681b      	ldr	r3, [r3, #0]
    c7d6:	461a      	mov	r2, r3
    c7d8:	687b      	ldr	r3, [r7, #4]
    c7da:	685b      	ldr	r3, [r3, #4]
    c7dc:	4413      	add	r3, r2
    c7de:	4a4a      	ldr	r2, [pc, #296]	; (c908 <_usb_d_dev_ep_trans+0x1b0>)
    c7e0:	4293      	cmp	r3, r2
    c7e2:	d811      	bhi.n	c808 <_usb_d_dev_ep_trans+0xb0>
    c7e4:	687b      	ldr	r3, [r7, #4]
    c7e6:	681b      	ldr	r3, [r3, #0]
    c7e8:	f003 0303 	and.w	r3, r3, #3
    c7ec:	2b00      	cmp	r3, #0
    c7ee:	d10b      	bne.n	c808 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    c7f0:	7d7b      	ldrb	r3, [r7, #21]
    c7f2:	f083 0301 	eor.w	r3, r3, #1
    c7f6:	b2db      	uxtb	r3, r3
    c7f8:	2b00      	cmp	r3, #0
    c7fa:	d00e      	beq.n	c81a <_usb_d_dev_ep_trans+0xc2>
    c7fc:	687b      	ldr	r3, [r7, #4]
    c7fe:	685b      	ldr	r3, [r3, #4]
    c800:	693a      	ldr	r2, [r7, #16]
    c802:	8a12      	ldrh	r2, [r2, #16]
    c804:	4293      	cmp	r3, r2
    c806:	d208      	bcs.n	c81a <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    c808:	693b      	ldr	r3, [r7, #16]
    c80a:	68db      	ldr	r3, [r3, #12]
    c80c:	2b00      	cmp	r3, #0
    c80e:	d102      	bne.n	c816 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    c810:	f06f 0312 	mvn.w	r3, #18
    c814:	e071      	b.n	c8fa <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    c816:	2301      	movs	r3, #1
    c818:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    c81a:	7d7b      	ldrb	r3, [r7, #21]
    c81c:	f083 0301 	eor.w	r3, r3, #1
    c820:	b2db      	uxtb	r3, r3
    c822:	2b00      	cmp	r3, #0
    c824:	d009      	beq.n	c83a <_usb_d_dev_ep_trans+0xe2>
    c826:	7b7b      	ldrb	r3, [r7, #13]
    c828:	2b00      	cmp	r3, #0
    c82a:	d006      	beq.n	c83a <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    c82c:	693b      	ldr	r3, [r7, #16]
    c82e:	68db      	ldr	r3, [r3, #12]
    c830:	2b00      	cmp	r3, #0
    c832:	d102      	bne.n	c83a <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    c834:	f06f 0311 	mvn.w	r3, #17
    c838:	e05f      	b.n	c8fa <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    c83a:	693b      	ldr	r3, [r7, #16]
    c83c:	7cdb      	ldrb	r3, [r3, #19]
    c83e:	f003 0308 	and.w	r3, r3, #8
    c842:	b2db      	uxtb	r3, r3
    c844:	2b00      	cmp	r3, #0
    c846:	d001      	beq.n	c84c <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    c848:	2302      	movs	r3, #2
    c84a:	e056      	b.n	c8fa <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    c84c:	f107 0308 	add.w	r3, r7, #8
    c850:	4618      	mov	r0, r3
    c852:	4b2e      	ldr	r3, [pc, #184]	; (c90c <_usb_d_dev_ep_trans+0x1b4>)
    c854:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    c856:	693b      	ldr	r3, [r7, #16]
    c858:	7cdb      	ldrb	r3, [r3, #19]
    c85a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c85e:	b2db      	uxtb	r3, r3
    c860:	2b00      	cmp	r3, #0
    c862:	d006      	beq.n	c872 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    c864:	f107 0308 	add.w	r3, r7, #8
    c868:	4618      	mov	r0, r3
    c86a:	4b29      	ldr	r3, [pc, #164]	; (c910 <_usb_d_dev_ep_trans+0x1b8>)
    c86c:	4798      	blx	r3
		return USB_BUSY;
    c86e:	2301      	movs	r3, #1
    c870:	e043      	b.n	c8fa <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    c872:	693a      	ldr	r2, [r7, #16]
    c874:	7cd3      	ldrb	r3, [r2, #19]
    c876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c87a:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    c87c:	f107 0308 	add.w	r3, r7, #8
    c880:	4618      	mov	r0, r3
    c882:	4b23      	ldr	r3, [pc, #140]	; (c910 <_usb_d_dev_ep_trans+0x1b8>)
    c884:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    c886:	687b      	ldr	r3, [r7, #4]
    c888:	681a      	ldr	r2, [r3, #0]
    c88a:	693b      	ldr	r3, [r7, #16]
    c88c:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    c88e:	687b      	ldr	r3, [r7, #4]
    c890:	685a      	ldr	r2, [r3, #4]
    c892:	693b      	ldr	r3, [r7, #16]
    c894:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    c896:	693b      	ldr	r3, [r7, #16]
    c898:	2200      	movs	r2, #0
    c89a:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    c89c:	693a      	ldr	r2, [r7, #16]
    c89e:	7cd3      	ldrb	r3, [r2, #19]
    c8a0:	7d79      	ldrb	r1, [r7, #21]
    c8a2:	f361 13c7 	bfi	r3, r1, #7, #1
    c8a6:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    c8a8:	693a      	ldr	r2, [r7, #16]
    c8aa:	7cd3      	ldrb	r3, [r2, #19]
    c8ac:	7df9      	ldrb	r1, [r7, #23]
    c8ae:	f361 1345 	bfi	r3, r1, #5, #1
    c8b2:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    c8b4:	687b      	ldr	r3, [r7, #4]
    c8b6:	7a5b      	ldrb	r3, [r3, #9]
    c8b8:	2b00      	cmp	r3, #0
    c8ba:	d007      	beq.n	c8cc <_usb_d_dev_ep_trans+0x174>
    c8bc:	7b7b      	ldrb	r3, [r7, #13]
    c8be:	f083 0301 	eor.w	r3, r3, #1
    c8c2:	b2db      	uxtb	r3, r3
    c8c4:	2b00      	cmp	r3, #0
    c8c6:	d001      	beq.n	c8cc <_usb_d_dev_ep_trans+0x174>
    c8c8:	2301      	movs	r3, #1
    c8ca:	e000      	b.n	c8ce <_usb_d_dev_ep_trans+0x176>
    c8cc:	2300      	movs	r3, #0
    c8ce:	b2db      	uxtb	r3, r3
    c8d0:	f003 0301 	and.w	r3, r3, #1
    c8d4:	b2d9      	uxtb	r1, r3
    c8d6:	693a      	ldr	r2, [r7, #16]
    c8d8:	7cd3      	ldrb	r3, [r2, #19]
    c8da:	f361 1304 	bfi	r3, r1, #4, #1
    c8de:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    c8e0:	7d7b      	ldrb	r3, [r7, #21]
    c8e2:	2b00      	cmp	r3, #0
    c8e4:	d004      	beq.n	c8f0 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    c8e6:	2100      	movs	r1, #0
    c8e8:	6938      	ldr	r0, [r7, #16]
    c8ea:	4b0a      	ldr	r3, [pc, #40]	; (c914 <_usb_d_dev_ep_trans+0x1bc>)
    c8ec:	4798      	blx	r3
    c8ee:	e003      	b.n	c8f8 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    c8f0:	2100      	movs	r1, #0
    c8f2:	6938      	ldr	r0, [r7, #16]
    c8f4:	4b08      	ldr	r3, [pc, #32]	; (c918 <_usb_d_dev_ep_trans+0x1c0>)
    c8f6:	4798      	blx	r3
	}

	return ERR_NONE;
    c8f8:	2300      	movs	r3, #0
}
    c8fa:	4618      	mov	r0, r3
    c8fc:	3718      	adds	r7, #24
    c8fe:	46bd      	mov	sp, r7
    c900:	bd80      	pop	{r7, pc}
    c902:	bf00      	nop
    c904:	0000afc9 	.word	0x0000afc9
    c908:	20041fff 	.word	0x20041fff
    c90c:	0000d125 	.word	0x0000d125
    c910:	0000d14b 	.word	0x0000d14b
    c914:	0000b291 	.word	0x0000b291
    c918:	0000b4a9 	.word	0x0000b4a9

0000c91c <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    c91c:	b580      	push	{r7, lr}
    c91e:	b084      	sub	sp, #16
    c920:	af00      	add	r7, sp, #0
    c922:	4603      	mov	r3, r0
    c924:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    c926:	79fb      	ldrb	r3, [r7, #7]
    c928:	f003 030f 	and.w	r3, r3, #15
    c92c:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    c92e:	79fb      	ldrb	r3, [r7, #7]
    c930:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c934:	2b00      	cmp	r3, #0
    c936:	bf14      	ite	ne
    c938:	2301      	movne	r3, #1
    c93a:	2300      	moveq	r3, #0
    c93c:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c93e:	7bba      	ldrb	r2, [r7, #14]
    c940:	7bfb      	ldrb	r3, [r7, #15]
    c942:	4611      	mov	r1, r2
    c944:	4618      	mov	r0, r3
    c946:	4b08      	ldr	r3, [pc, #32]	; (c968 <_usb_d_dev_ep_abort+0x4c>)
    c948:	4798      	blx	r3
    c94a:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    c94c:	7bfb      	ldrb	r3, [r7, #15]
    c94e:	2b04      	cmp	r3, #4
    c950:	d806      	bhi.n	c960 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    c952:	7bbb      	ldrb	r3, [r7, #14]
    c954:	2202      	movs	r2, #2
    c956:	4619      	mov	r1, r3
    c958:	68b8      	ldr	r0, [r7, #8]
    c95a:	4b04      	ldr	r3, [pc, #16]	; (c96c <_usb_d_dev_ep_abort+0x50>)
    c95c:	4798      	blx	r3
    c95e:	e000      	b.n	c962 <_usb_d_dev_ep_abort+0x46>
		return;
    c960:	bf00      	nop
}
    c962:	3710      	adds	r7, #16
    c964:	46bd      	mov	sp, r7
    c966:	bd80      	pop	{r7, pc}
    c968:	0000afc9 	.word	0x0000afc9
    c96c:	0000c601 	.word	0x0000c601

0000c970 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    c970:	b480      	push	{r7}
    c972:	b085      	sub	sp, #20
    c974:	af00      	add	r7, sp, #0
    c976:	4603      	mov	r3, r0
    c978:	6039      	str	r1, [r7, #0]
    c97a:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    c97c:	683b      	ldr	r3, [r7, #0]
    c97e:	2b00      	cmp	r3, #0
    c980:	d001      	beq.n	c986 <_usb_d_dev_register_callback+0x16>
    c982:	683b      	ldr	r3, [r7, #0]
    c984:	e000      	b.n	c988 <_usb_d_dev_register_callback+0x18>
    c986:	4b0a      	ldr	r3, [pc, #40]	; (c9b0 <_usb_d_dev_register_callback+0x40>)
    c988:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    c98a:	79fb      	ldrb	r3, [r7, #7]
    c98c:	2b01      	cmp	r3, #1
    c98e:	d103      	bne.n	c998 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    c990:	4a08      	ldr	r2, [pc, #32]	; (c9b4 <_usb_d_dev_register_callback+0x44>)
    c992:	68fb      	ldr	r3, [r7, #12]
    c994:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    c996:	e005      	b.n	c9a4 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    c998:	79fb      	ldrb	r3, [r7, #7]
    c99a:	2b00      	cmp	r3, #0
    c99c:	d102      	bne.n	c9a4 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    c99e:	4a05      	ldr	r2, [pc, #20]	; (c9b4 <_usb_d_dev_register_callback+0x44>)
    c9a0:	68fb      	ldr	r3, [r7, #12]
    c9a2:	6013      	str	r3, [r2, #0]
}
    c9a4:	bf00      	nop
    c9a6:	3714      	adds	r7, #20
    c9a8:	46bd      	mov	sp, r7
    c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9ae:	4770      	bx	lr
    c9b0:	0000a851 	.word	0x0000a851
    c9b4:	200025ac 	.word	0x200025ac

0000c9b8 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    c9b8:	b480      	push	{r7}
    c9ba:	b085      	sub	sp, #20
    c9bc:	af00      	add	r7, sp, #0
    c9be:	4603      	mov	r3, r0
    c9c0:	6039      	str	r1, [r7, #0]
    c9c2:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    c9c4:	683b      	ldr	r3, [r7, #0]
    c9c6:	2b00      	cmp	r3, #0
    c9c8:	d001      	beq.n	c9ce <_usb_d_dev_register_ep_callback+0x16>
    c9ca:	683b      	ldr	r3, [r7, #0]
    c9cc:	e000      	b.n	c9d0 <_usb_d_dev_register_ep_callback+0x18>
    c9ce:	4b0e      	ldr	r3, [pc, #56]	; (ca08 <_usb_d_dev_register_ep_callback+0x50>)
    c9d0:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    c9d2:	79fb      	ldrb	r3, [r7, #7]
    c9d4:	2b00      	cmp	r3, #0
    c9d6:	d103      	bne.n	c9e0 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    c9d8:	4a0c      	ldr	r2, [pc, #48]	; (ca0c <_usb_d_dev_register_ep_callback+0x54>)
    c9da:	68fb      	ldr	r3, [r7, #12]
    c9dc:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    c9de:	e00c      	b.n	c9fa <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    c9e0:	79fb      	ldrb	r3, [r7, #7]
    c9e2:	2b01      	cmp	r3, #1
    c9e4:	d103      	bne.n	c9ee <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    c9e6:	4a09      	ldr	r2, [pc, #36]	; (ca0c <_usb_d_dev_register_ep_callback+0x54>)
    c9e8:	68fb      	ldr	r3, [r7, #12]
    c9ea:	60d3      	str	r3, [r2, #12]
}
    c9ec:	e005      	b.n	c9fa <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    c9ee:	79fb      	ldrb	r3, [r7, #7]
    c9f0:	2b02      	cmp	r3, #2
    c9f2:	d102      	bne.n	c9fa <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    c9f4:	4a05      	ldr	r2, [pc, #20]	; (ca0c <_usb_d_dev_register_ep_callback+0x54>)
    c9f6:	68fb      	ldr	r3, [r7, #12]
    c9f8:	6113      	str	r3, [r2, #16]
}
    c9fa:	bf00      	nop
    c9fc:	3714      	adds	r7, #20
    c9fe:	46bd      	mov	sp, r7
    ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca04:	4770      	bx	lr
    ca06:	bf00      	nop
    ca08:	0000a851 	.word	0x0000a851
    ca0c:	200025ac 	.word	0x200025ac

0000ca10 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    ca10:	b580      	push	{r7, lr}
    ca12:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ca14:	4b01      	ldr	r3, [pc, #4]	; (ca1c <USB_0_Handler+0xc>)
    ca16:	4798      	blx	r3
}
    ca18:	bf00      	nop
    ca1a:	bd80      	pop	{r7, pc}
    ca1c:	0000bc81 	.word	0x0000bc81

0000ca20 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    ca20:	b580      	push	{r7, lr}
    ca22:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ca24:	4b01      	ldr	r3, [pc, #4]	; (ca2c <USB_1_Handler+0xc>)
    ca26:	4798      	blx	r3
}
    ca28:	bf00      	nop
    ca2a:	bd80      	pop	{r7, pc}
    ca2c:	0000bc81 	.word	0x0000bc81

0000ca30 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    ca30:	b580      	push	{r7, lr}
    ca32:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ca34:	4b01      	ldr	r3, [pc, #4]	; (ca3c <USB_2_Handler+0xc>)
    ca36:	4798      	blx	r3
}
    ca38:	bf00      	nop
    ca3a:	bd80      	pop	{r7, pc}
    ca3c:	0000bc81 	.word	0x0000bc81

0000ca40 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    ca40:	b580      	push	{r7, lr}
    ca42:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    ca44:	4b01      	ldr	r3, [pc, #4]	; (ca4c <USB_3_Handler+0xc>)
    ca46:	4798      	blx	r3
}
    ca48:	bf00      	nop
    ca4a:	bd80      	pop	{r7, pc}
    ca4c:	0000bc81 	.word	0x0000bc81

0000ca50 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    ca50:	b480      	push	{r7}
    ca52:	b083      	sub	sp, #12
    ca54:	af00      	add	r7, sp, #0
    ca56:	6078      	str	r0, [r7, #4]
    ca58:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    ca5a:	bf00      	nop
    ca5c:	687b      	ldr	r3, [r7, #4]
    ca5e:	689a      	ldr	r2, [r3, #8]
    ca60:	683b      	ldr	r3, [r7, #0]
    ca62:	4013      	ands	r3, r2
    ca64:	2b00      	cmp	r3, #0
    ca66:	d1f9      	bne.n	ca5c <hri_wdt_wait_for_sync+0xc>
	};
}
    ca68:	bf00      	nop
    ca6a:	370c      	adds	r7, #12
    ca6c:	46bd      	mov	sp, r7
    ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca72:	4770      	bx	lr

0000ca74 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    ca74:	b580      	push	{r7, lr}
    ca76:	b084      	sub	sp, #16
    ca78:	af00      	add	r7, sp, #0
    ca7a:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    ca7c:	210e      	movs	r1, #14
    ca7e:	6878      	ldr	r0, [r7, #4]
    ca80:	4b0a      	ldr	r3, [pc, #40]	; (caac <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    ca82:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ca84:	687b      	ldr	r3, [r7, #4]
    ca86:	781b      	ldrb	r3, [r3, #0]
    ca88:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    ca8a:	7bfb      	ldrb	r3, [r7, #15]
    ca8c:	085b      	lsrs	r3, r3, #1
    ca8e:	b2db      	uxtb	r3, r3
    ca90:	f003 0301 	and.w	r3, r3, #1
    ca94:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    ca96:	7bfb      	ldrb	r3, [r7, #15]
    ca98:	2b00      	cmp	r3, #0
    ca9a:	bf14      	ite	ne
    ca9c:	2301      	movne	r3, #1
    ca9e:	2300      	moveq	r3, #0
    caa0:	b2db      	uxtb	r3, r3
}
    caa2:	4618      	mov	r0, r3
    caa4:	3710      	adds	r7, #16
    caa6:	46bd      	mov	sp, r7
    caa8:	bd80      	pop	{r7, pc}
    caaa:	bf00      	nop
    caac:	0000ca51 	.word	0x0000ca51

0000cab0 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    cab0:	b580      	push	{r7, lr}
    cab2:	b082      	sub	sp, #8
    cab4:	af00      	add	r7, sp, #0
    cab6:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    cab8:	687b      	ldr	r3, [r7, #4]
    caba:	781b      	ldrb	r3, [r3, #0]
    cabc:	b2db      	uxtb	r3, r3
    cabe:	f023 0304 	bic.w	r3, r3, #4
    cac2:	b2da      	uxtb	r2, r3
    cac4:	687b      	ldr	r3, [r7, #4]
    cac6:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    cac8:	210e      	movs	r1, #14
    caca:	6878      	ldr	r0, [r7, #4]
    cacc:	4b02      	ldr	r3, [pc, #8]	; (cad8 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    cace:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    cad0:	bf00      	nop
    cad2:	3708      	adds	r7, #8
    cad4:	46bd      	mov	sp, r7
    cad6:	bd80      	pop	{r7, pc}
    cad8:	0000ca51 	.word	0x0000ca51

0000cadc <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    cadc:	b580      	push	{r7, lr}
    cade:	b084      	sub	sp, #16
    cae0:	af00      	add	r7, sp, #0
    cae2:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    cae4:	210e      	movs	r1, #14
    cae6:	6878      	ldr	r0, [r7, #4]
    cae8:	4b08      	ldr	r3, [pc, #32]	; (cb0c <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    caea:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    caec:	687b      	ldr	r3, [r7, #4]
    caee:	781b      	ldrb	r3, [r3, #0]
    caf0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    caf2:	7bfb      	ldrb	r3, [r7, #15]
    caf4:	09db      	lsrs	r3, r3, #7
    caf6:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    caf8:	7bfb      	ldrb	r3, [r7, #15]
    cafa:	2b00      	cmp	r3, #0
    cafc:	bf14      	ite	ne
    cafe:	2301      	movne	r3, #1
    cb00:	2300      	moveq	r3, #0
    cb02:	b2db      	uxtb	r3, r3
}
    cb04:	4618      	mov	r0, r3
    cb06:	3710      	adds	r7, #16
    cb08:	46bd      	mov	sp, r7
    cb0a:	bd80      	pop	{r7, pc}
    cb0c:	0000ca51 	.word	0x0000ca51

0000cb10 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    cb10:	b480      	push	{r7}
    cb12:	b085      	sub	sp, #20
    cb14:	af00      	add	r7, sp, #0
    cb16:	6078      	str	r0, [r7, #4]
    cb18:	460b      	mov	r3, r1
    cb1a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    cb1c:	687b      	ldr	r3, [r7, #4]
    cb1e:	785b      	ldrb	r3, [r3, #1]
    cb20:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    cb22:	7bfb      	ldrb	r3, [r7, #15]
    cb24:	f023 030f 	bic.w	r3, r3, #15
    cb28:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    cb2a:	78fb      	ldrb	r3, [r7, #3]
    cb2c:	f003 030f 	and.w	r3, r3, #15
    cb30:	b2da      	uxtb	r2, r3
    cb32:	7bfb      	ldrb	r3, [r7, #15]
    cb34:	4313      	orrs	r3, r2
    cb36:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    cb38:	687b      	ldr	r3, [r7, #4]
    cb3a:	7bfa      	ldrb	r2, [r7, #15]
    cb3c:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    cb3e:	bf00      	nop
    cb40:	3714      	adds	r7, #20
    cb42:	46bd      	mov	sp, r7
    cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb48:	4770      	bx	lr
	...

0000cb4c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    cb4c:	b580      	push	{r7, lr}
    cb4e:	b082      	sub	sp, #8
    cb50:	af00      	add	r7, sp, #0
    cb52:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    cb54:	687b      	ldr	r3, [r7, #4]
    cb56:	2b00      	cmp	r3, #0
    cb58:	d005      	beq.n	cb66 <_wdt_init+0x1a>
    cb5a:	687b      	ldr	r3, [r7, #4]
    cb5c:	681b      	ldr	r3, [r3, #0]
    cb5e:	2b00      	cmp	r3, #0
    cb60:	d001      	beq.n	cb66 <_wdt_init+0x1a>
    cb62:	2301      	movs	r3, #1
    cb64:	e000      	b.n	cb68 <_wdt_init+0x1c>
    cb66:	2300      	movs	r3, #0
    cb68:	f003 0301 	and.w	r3, r3, #1
    cb6c:	b2db      	uxtb	r3, r3
    cb6e:	2250      	movs	r2, #80	; 0x50
    cb70:	4913      	ldr	r1, [pc, #76]	; (cbc0 <_wdt_init+0x74>)
    cb72:	4618      	mov	r0, r3
    cb74:	4b13      	ldr	r3, [pc, #76]	; (cbc4 <_wdt_init+0x78>)
    cb76:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    cb78:	687b      	ldr	r3, [r7, #4]
    cb7a:	681b      	ldr	r3, [r3, #0]
    cb7c:	4618      	mov	r0, r3
    cb7e:	4b12      	ldr	r3, [pc, #72]	; (cbc8 <_wdt_init+0x7c>)
    cb80:	4798      	blx	r3
    cb82:	4603      	mov	r3, r0
    cb84:	2b00      	cmp	r3, #0
    cb86:	d107      	bne.n	cb98 <_wdt_init+0x4c>
    cb88:	687b      	ldr	r3, [r7, #4]
    cb8a:	681b      	ldr	r3, [r3, #0]
    cb8c:	4618      	mov	r0, r3
    cb8e:	4b0f      	ldr	r3, [pc, #60]	; (cbcc <_wdt_init+0x80>)
    cb90:	4798      	blx	r3
    cb92:	4603      	mov	r3, r0
    cb94:	2b00      	cmp	r3, #0
    cb96:	d002      	beq.n	cb9e <_wdt_init+0x52>
		return ERR_DENIED;
    cb98:	f06f 0310 	mvn.w	r3, #16
    cb9c:	e00b      	b.n	cbb6 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    cb9e:	687b      	ldr	r3, [r7, #4]
    cba0:	681b      	ldr	r3, [r3, #0]
    cba2:	4618      	mov	r0, r3
    cba4:	4b0a      	ldr	r3, [pc, #40]	; (cbd0 <_wdt_init+0x84>)
    cba6:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    cba8:	687b      	ldr	r3, [r7, #4]
    cbaa:	681b      	ldr	r3, [r3, #0]
    cbac:	210b      	movs	r1, #11
    cbae:	4618      	mov	r0, r3
    cbb0:	4b08      	ldr	r3, [pc, #32]	; (cbd4 <_wdt_init+0x88>)
    cbb2:	4798      	blx	r3
	}

	return ERR_NONE;
    cbb4:	2300      	movs	r3, #0
}
    cbb6:	4618      	mov	r0, r3
    cbb8:	3708      	adds	r7, #8
    cbba:	46bd      	mov	sp, r7
    cbbc:	bd80      	pop	{r7, pc}
    cbbe:	bf00      	nop
    cbc0:	0001b4c0 	.word	0x0001b4c0
    cbc4:	00004cdd 	.word	0x00004cdd
    cbc8:	0000cadd 	.word	0x0000cadd
    cbcc:	0000ca75 	.word	0x0000ca75
    cbd0:	0000cab1 	.word	0x0000cab1
    cbd4:	0000cb11 	.word	0x0000cb11

0000cbd8 <hri_port_set_DIR_reg>:
{
    cbd8:	b480      	push	{r7}
    cbda:	b085      	sub	sp, #20
    cbdc:	af00      	add	r7, sp, #0
    cbde:	60f8      	str	r0, [r7, #12]
    cbe0:	460b      	mov	r3, r1
    cbe2:	607a      	str	r2, [r7, #4]
    cbe4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    cbe6:	7afb      	ldrb	r3, [r7, #11]
    cbe8:	68fa      	ldr	r2, [r7, #12]
    cbea:	01db      	lsls	r3, r3, #7
    cbec:	4413      	add	r3, r2
    cbee:	3308      	adds	r3, #8
    cbf0:	687a      	ldr	r2, [r7, #4]
    cbf2:	601a      	str	r2, [r3, #0]
}
    cbf4:	bf00      	nop
    cbf6:	3714      	adds	r7, #20
    cbf8:	46bd      	mov	sp, r7
    cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbfe:	4770      	bx	lr

0000cc00 <hri_port_clear_DIR_reg>:
{
    cc00:	b480      	push	{r7}
    cc02:	b085      	sub	sp, #20
    cc04:	af00      	add	r7, sp, #0
    cc06:	60f8      	str	r0, [r7, #12]
    cc08:	460b      	mov	r3, r1
    cc0a:	607a      	str	r2, [r7, #4]
    cc0c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    cc0e:	7afb      	ldrb	r3, [r7, #11]
    cc10:	68fa      	ldr	r2, [r7, #12]
    cc12:	01db      	lsls	r3, r3, #7
    cc14:	4413      	add	r3, r2
    cc16:	3304      	adds	r3, #4
    cc18:	687a      	ldr	r2, [r7, #4]
    cc1a:	601a      	str	r2, [r3, #0]
}
    cc1c:	bf00      	nop
    cc1e:	3714      	adds	r7, #20
    cc20:	46bd      	mov	sp, r7
    cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc26:	4770      	bx	lr

0000cc28 <hri_port_set_OUT_reg>:
{
    cc28:	b480      	push	{r7}
    cc2a:	b085      	sub	sp, #20
    cc2c:	af00      	add	r7, sp, #0
    cc2e:	60f8      	str	r0, [r7, #12]
    cc30:	460b      	mov	r3, r1
    cc32:	607a      	str	r2, [r7, #4]
    cc34:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    cc36:	7afb      	ldrb	r3, [r7, #11]
    cc38:	68fa      	ldr	r2, [r7, #12]
    cc3a:	01db      	lsls	r3, r3, #7
    cc3c:	4413      	add	r3, r2
    cc3e:	3318      	adds	r3, #24
    cc40:	687a      	ldr	r2, [r7, #4]
    cc42:	601a      	str	r2, [r3, #0]
}
    cc44:	bf00      	nop
    cc46:	3714      	adds	r7, #20
    cc48:	46bd      	mov	sp, r7
    cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc4e:	4770      	bx	lr

0000cc50 <hri_port_clear_OUT_reg>:
{
    cc50:	b480      	push	{r7}
    cc52:	b085      	sub	sp, #20
    cc54:	af00      	add	r7, sp, #0
    cc56:	60f8      	str	r0, [r7, #12]
    cc58:	460b      	mov	r3, r1
    cc5a:	607a      	str	r2, [r7, #4]
    cc5c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    cc5e:	7afb      	ldrb	r3, [r7, #11]
    cc60:	68fa      	ldr	r2, [r7, #12]
    cc62:	01db      	lsls	r3, r3, #7
    cc64:	4413      	add	r3, r2
    cc66:	3314      	adds	r3, #20
    cc68:	687a      	ldr	r2, [r7, #4]
    cc6a:	601a      	str	r2, [r3, #0]
}
    cc6c:	bf00      	nop
    cc6e:	3714      	adds	r7, #20
    cc70:	46bd      	mov	sp, r7
    cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc76:	4770      	bx	lr

0000cc78 <hri_port_write_PMUX_PMUXE_bf>:
{
    cc78:	b480      	push	{r7}
    cc7a:	b085      	sub	sp, #20
    cc7c:	af00      	add	r7, sp, #0
    cc7e:	6078      	str	r0, [r7, #4]
    cc80:	4608      	mov	r0, r1
    cc82:	4611      	mov	r1, r2
    cc84:	461a      	mov	r2, r3
    cc86:	4603      	mov	r3, r0
    cc88:	70fb      	strb	r3, [r7, #3]
    cc8a:	460b      	mov	r3, r1
    cc8c:	70bb      	strb	r3, [r7, #2]
    cc8e:	4613      	mov	r3, r2
    cc90:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    cc92:	78fa      	ldrb	r2, [r7, #3]
    cc94:	78bb      	ldrb	r3, [r7, #2]
    cc96:	6879      	ldr	r1, [r7, #4]
    cc98:	01d2      	lsls	r2, r2, #7
    cc9a:	440a      	add	r2, r1
    cc9c:	4413      	add	r3, r2
    cc9e:	3330      	adds	r3, #48	; 0x30
    cca0:	781b      	ldrb	r3, [r3, #0]
    cca2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    cca4:	7bfb      	ldrb	r3, [r7, #15]
    cca6:	f023 030f 	bic.w	r3, r3, #15
    ccaa:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    ccac:	787b      	ldrb	r3, [r7, #1]
    ccae:	f003 030f 	and.w	r3, r3, #15
    ccb2:	b2da      	uxtb	r2, r3
    ccb4:	7bfb      	ldrb	r3, [r7, #15]
    ccb6:	4313      	orrs	r3, r2
    ccb8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ccba:	78fa      	ldrb	r2, [r7, #3]
    ccbc:	78bb      	ldrb	r3, [r7, #2]
    ccbe:	6879      	ldr	r1, [r7, #4]
    ccc0:	01d2      	lsls	r2, r2, #7
    ccc2:	440a      	add	r2, r1
    ccc4:	4413      	add	r3, r2
    ccc6:	3330      	adds	r3, #48	; 0x30
    ccc8:	7bfa      	ldrb	r2, [r7, #15]
    ccca:	701a      	strb	r2, [r3, #0]
}
    cccc:	bf00      	nop
    ccce:	3714      	adds	r7, #20
    ccd0:	46bd      	mov	sp, r7
    ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    ccd6:	4770      	bx	lr

0000ccd8 <hri_port_write_PMUX_PMUXO_bf>:
{
    ccd8:	b480      	push	{r7}
    ccda:	b085      	sub	sp, #20
    ccdc:	af00      	add	r7, sp, #0
    ccde:	6078      	str	r0, [r7, #4]
    cce0:	4608      	mov	r0, r1
    cce2:	4611      	mov	r1, r2
    cce4:	461a      	mov	r2, r3
    cce6:	4603      	mov	r3, r0
    cce8:	70fb      	strb	r3, [r7, #3]
    ccea:	460b      	mov	r3, r1
    ccec:	70bb      	strb	r3, [r7, #2]
    ccee:	4613      	mov	r3, r2
    ccf0:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ccf2:	78fa      	ldrb	r2, [r7, #3]
    ccf4:	78bb      	ldrb	r3, [r7, #2]
    ccf6:	6879      	ldr	r1, [r7, #4]
    ccf8:	01d2      	lsls	r2, r2, #7
    ccfa:	440a      	add	r2, r1
    ccfc:	4413      	add	r3, r2
    ccfe:	3330      	adds	r3, #48	; 0x30
    cd00:	781b      	ldrb	r3, [r3, #0]
    cd02:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    cd04:	7bfb      	ldrb	r3, [r7, #15]
    cd06:	f003 030f 	and.w	r3, r3, #15
    cd0a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    cd0c:	787b      	ldrb	r3, [r7, #1]
    cd0e:	011b      	lsls	r3, r3, #4
    cd10:	b2da      	uxtb	r2, r3
    cd12:	7bfb      	ldrb	r3, [r7, #15]
    cd14:	4313      	orrs	r3, r2
    cd16:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    cd18:	78fa      	ldrb	r2, [r7, #3]
    cd1a:	78bb      	ldrb	r3, [r7, #2]
    cd1c:	6879      	ldr	r1, [r7, #4]
    cd1e:	01d2      	lsls	r2, r2, #7
    cd20:	440a      	add	r2, r1
    cd22:	4413      	add	r3, r2
    cd24:	3330      	adds	r3, #48	; 0x30
    cd26:	7bfa      	ldrb	r2, [r7, #15]
    cd28:	701a      	strb	r2, [r3, #0]
}
    cd2a:	bf00      	nop
    cd2c:	3714      	adds	r7, #20
    cd2e:	46bd      	mov	sp, r7
    cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd34:	4770      	bx	lr

0000cd36 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    cd36:	b480      	push	{r7}
    cd38:	b085      	sub	sp, #20
    cd3a:	af00      	add	r7, sp, #0
    cd3c:	6078      	str	r0, [r7, #4]
    cd3e:	4608      	mov	r0, r1
    cd40:	4611      	mov	r1, r2
    cd42:	461a      	mov	r2, r3
    cd44:	4603      	mov	r3, r0
    cd46:	70fb      	strb	r3, [r7, #3]
    cd48:	460b      	mov	r3, r1
    cd4a:	70bb      	strb	r3, [r7, #2]
    cd4c:	4613      	mov	r3, r2
    cd4e:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    cd50:	78fa      	ldrb	r2, [r7, #3]
    cd52:	78bb      	ldrb	r3, [r7, #2]
    cd54:	6879      	ldr	r1, [r7, #4]
    cd56:	01d2      	lsls	r2, r2, #7
    cd58:	440a      	add	r2, r1
    cd5a:	4413      	add	r3, r2
    cd5c:	3340      	adds	r3, #64	; 0x40
    cd5e:	781b      	ldrb	r3, [r3, #0]
    cd60:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    cd62:	7bfb      	ldrb	r3, [r7, #15]
    cd64:	f023 0301 	bic.w	r3, r3, #1
    cd68:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    cd6a:	787a      	ldrb	r2, [r7, #1]
    cd6c:	7bfb      	ldrb	r3, [r7, #15]
    cd6e:	4313      	orrs	r3, r2
    cd70:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    cd72:	78fa      	ldrb	r2, [r7, #3]
    cd74:	78bb      	ldrb	r3, [r7, #2]
    cd76:	6879      	ldr	r1, [r7, #4]
    cd78:	01d2      	lsls	r2, r2, #7
    cd7a:	440a      	add	r2, r1
    cd7c:	4413      	add	r3, r2
    cd7e:	3340      	adds	r3, #64	; 0x40
    cd80:	7bfa      	ldrb	r2, [r7, #15]
    cd82:	701a      	strb	r2, [r3, #0]
}
    cd84:	bf00      	nop
    cd86:	3714      	adds	r7, #20
    cd88:	46bd      	mov	sp, r7
    cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd8e:	4770      	bx	lr

0000cd90 <hri_port_write_WRCONFIG_reg>:
{
    cd90:	b480      	push	{r7}
    cd92:	b085      	sub	sp, #20
    cd94:	af00      	add	r7, sp, #0
    cd96:	60f8      	str	r0, [r7, #12]
    cd98:	460b      	mov	r3, r1
    cd9a:	607a      	str	r2, [r7, #4]
    cd9c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    cd9e:	7afb      	ldrb	r3, [r7, #11]
    cda0:	68fa      	ldr	r2, [r7, #12]
    cda2:	01db      	lsls	r3, r3, #7
    cda4:	4413      	add	r3, r2
    cda6:	3328      	adds	r3, #40	; 0x28
    cda8:	687a      	ldr	r2, [r7, #4]
    cdaa:	601a      	str	r2, [r3, #0]
}
    cdac:	bf00      	nop
    cdae:	3714      	adds	r7, #20
    cdb0:	46bd      	mov	sp, r7
    cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    cdb6:	4770      	bx	lr

0000cdb8 <_gpio_set_direction>:
{
    cdb8:	b580      	push	{r7, lr}
    cdba:	b082      	sub	sp, #8
    cdbc:	af00      	add	r7, sp, #0
    cdbe:	4603      	mov	r3, r0
    cdc0:	6039      	str	r1, [r7, #0]
    cdc2:	71fb      	strb	r3, [r7, #7]
    cdc4:	4613      	mov	r3, r2
    cdc6:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    cdc8:	79bb      	ldrb	r3, [r7, #6]
    cdca:	2b01      	cmp	r3, #1
    cdcc:	d01c      	beq.n	ce08 <_gpio_set_direction+0x50>
    cdce:	2b02      	cmp	r3, #2
    cdd0:	d037      	beq.n	ce42 <_gpio_set_direction+0x8a>
    cdd2:	2b00      	cmp	r3, #0
    cdd4:	d14e      	bne.n	ce74 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    cdd6:	79fb      	ldrb	r3, [r7, #7]
    cdd8:	683a      	ldr	r2, [r7, #0]
    cdda:	4619      	mov	r1, r3
    cddc:	482a      	ldr	r0, [pc, #168]	; (ce88 <_gpio_set_direction+0xd0>)
    cdde:	4b2b      	ldr	r3, [pc, #172]	; (ce8c <_gpio_set_direction+0xd4>)
    cde0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    cde2:	683b      	ldr	r3, [r7, #0]
    cde4:	b29b      	uxth	r3, r3
    cde6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    cdea:	79fb      	ldrb	r3, [r7, #7]
    cdec:	4619      	mov	r1, r3
    cdee:	4826      	ldr	r0, [pc, #152]	; (ce88 <_gpio_set_direction+0xd0>)
    cdf0:	4b27      	ldr	r3, [pc, #156]	; (ce90 <_gpio_set_direction+0xd8>)
    cdf2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    cdf4:	683b      	ldr	r3, [r7, #0]
    cdf6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    cdf8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    cdfc:	79fb      	ldrb	r3, [r7, #7]
    cdfe:	4619      	mov	r1, r3
    ce00:	4821      	ldr	r0, [pc, #132]	; (ce88 <_gpio_set_direction+0xd0>)
    ce02:	4b23      	ldr	r3, [pc, #140]	; (ce90 <_gpio_set_direction+0xd8>)
    ce04:	4798      	blx	r3
		break;
    ce06:	e03a      	b.n	ce7e <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    ce08:	79fb      	ldrb	r3, [r7, #7]
    ce0a:	683a      	ldr	r2, [r7, #0]
    ce0c:	4619      	mov	r1, r3
    ce0e:	481e      	ldr	r0, [pc, #120]	; (ce88 <_gpio_set_direction+0xd0>)
    ce10:	4b1e      	ldr	r3, [pc, #120]	; (ce8c <_gpio_set_direction+0xd4>)
    ce12:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    ce14:	683b      	ldr	r3, [r7, #0]
    ce16:	b29b      	uxth	r3, r3
    ce18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    ce1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ce20:	79f9      	ldrb	r1, [r7, #7]
    ce22:	461a      	mov	r2, r3
    ce24:	4818      	ldr	r0, [pc, #96]	; (ce88 <_gpio_set_direction+0xd0>)
    ce26:	4b1a      	ldr	r3, [pc, #104]	; (ce90 <_gpio_set_direction+0xd8>)
    ce28:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    ce2a:	683b      	ldr	r3, [r7, #0]
    ce2c:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    ce2e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    ce32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ce36:	79f9      	ldrb	r1, [r7, #7]
    ce38:	461a      	mov	r2, r3
    ce3a:	4813      	ldr	r0, [pc, #76]	; (ce88 <_gpio_set_direction+0xd0>)
    ce3c:	4b14      	ldr	r3, [pc, #80]	; (ce90 <_gpio_set_direction+0xd8>)
    ce3e:	4798      	blx	r3
		break;
    ce40:	e01d      	b.n	ce7e <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    ce42:	79fb      	ldrb	r3, [r7, #7]
    ce44:	683a      	ldr	r2, [r7, #0]
    ce46:	4619      	mov	r1, r3
    ce48:	480f      	ldr	r0, [pc, #60]	; (ce88 <_gpio_set_direction+0xd0>)
    ce4a:	4b12      	ldr	r3, [pc, #72]	; (ce94 <_gpio_set_direction+0xdc>)
    ce4c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    ce4e:	683b      	ldr	r3, [r7, #0]
    ce50:	b29b      	uxth	r3, r3
    ce52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    ce56:	79fb      	ldrb	r3, [r7, #7]
    ce58:	4619      	mov	r1, r3
    ce5a:	480b      	ldr	r0, [pc, #44]	; (ce88 <_gpio_set_direction+0xd0>)
    ce5c:	4b0c      	ldr	r3, [pc, #48]	; (ce90 <_gpio_set_direction+0xd8>)
    ce5e:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    ce60:	683b      	ldr	r3, [r7, #0]
    ce62:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    ce64:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    ce68:	79fb      	ldrb	r3, [r7, #7]
    ce6a:	4619      	mov	r1, r3
    ce6c:	4806      	ldr	r0, [pc, #24]	; (ce88 <_gpio_set_direction+0xd0>)
    ce6e:	4b08      	ldr	r3, [pc, #32]	; (ce90 <_gpio_set_direction+0xd8>)
    ce70:	4798      	blx	r3
		break;
    ce72:	e004      	b.n	ce7e <_gpio_set_direction+0xc6>
		ASSERT(false);
    ce74:	2246      	movs	r2, #70	; 0x46
    ce76:	4908      	ldr	r1, [pc, #32]	; (ce98 <_gpio_set_direction+0xe0>)
    ce78:	2000      	movs	r0, #0
    ce7a:	4b08      	ldr	r3, [pc, #32]	; (ce9c <_gpio_set_direction+0xe4>)
    ce7c:	4798      	blx	r3
}
    ce7e:	bf00      	nop
    ce80:	3708      	adds	r7, #8
    ce82:	46bd      	mov	sp, r7
    ce84:	bd80      	pop	{r7, pc}
    ce86:	bf00      	nop
    ce88:	41008000 	.word	0x41008000
    ce8c:	0000cc01 	.word	0x0000cc01
    ce90:	0000cd91 	.word	0x0000cd91
    ce94:	0000cbd9 	.word	0x0000cbd9
    ce98:	0001b4d8 	.word	0x0001b4d8
    ce9c:	00004cdd 	.word	0x00004cdd

0000cea0 <_gpio_set_level>:
{
    cea0:	b580      	push	{r7, lr}
    cea2:	b082      	sub	sp, #8
    cea4:	af00      	add	r7, sp, #0
    cea6:	4603      	mov	r3, r0
    cea8:	6039      	str	r1, [r7, #0]
    ceaa:	71fb      	strb	r3, [r7, #7]
    ceac:	4613      	mov	r3, r2
    ceae:	71bb      	strb	r3, [r7, #6]
	if (level) {
    ceb0:	79bb      	ldrb	r3, [r7, #6]
    ceb2:	2b00      	cmp	r3, #0
    ceb4:	d006      	beq.n	cec4 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    ceb6:	79fb      	ldrb	r3, [r7, #7]
    ceb8:	683a      	ldr	r2, [r7, #0]
    ceba:	4619      	mov	r1, r3
    cebc:	4806      	ldr	r0, [pc, #24]	; (ced8 <_gpio_set_level+0x38>)
    cebe:	4b07      	ldr	r3, [pc, #28]	; (cedc <_gpio_set_level+0x3c>)
    cec0:	4798      	blx	r3
}
    cec2:	e005      	b.n	ced0 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    cec4:	79fb      	ldrb	r3, [r7, #7]
    cec6:	683a      	ldr	r2, [r7, #0]
    cec8:	4619      	mov	r1, r3
    ceca:	4803      	ldr	r0, [pc, #12]	; (ced8 <_gpio_set_level+0x38>)
    cecc:	4b04      	ldr	r3, [pc, #16]	; (cee0 <_gpio_set_level+0x40>)
    cece:	4798      	blx	r3
}
    ced0:	bf00      	nop
    ced2:	3708      	adds	r7, #8
    ced4:	46bd      	mov	sp, r7
    ced6:	bd80      	pop	{r7, pc}
    ced8:	41008000 	.word	0x41008000
    cedc:	0000cc29 	.word	0x0000cc29
    cee0:	0000cc51 	.word	0x0000cc51

0000cee4 <_gpio_set_pin_function>:
{
    cee4:	b590      	push	{r4, r7, lr}
    cee6:	b085      	sub	sp, #20
    cee8:	af00      	add	r7, sp, #0
    ceea:	6078      	str	r0, [r7, #4]
    ceec:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    ceee:	687b      	ldr	r3, [r7, #4]
    cef0:	095b      	lsrs	r3, r3, #5
    cef2:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    cef4:	687b      	ldr	r3, [r7, #4]
    cef6:	b2db      	uxtb	r3, r3
    cef8:	f003 031f 	and.w	r3, r3, #31
    cefc:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    cefe:	683b      	ldr	r3, [r7, #0]
    cf00:	f1b3 3fff 	cmp.w	r3, #4294967295
    cf04:	d106      	bne.n	cf14 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    cf06:	7bba      	ldrb	r2, [r7, #14]
    cf08:	7bf9      	ldrb	r1, [r7, #15]
    cf0a:	2300      	movs	r3, #0
    cf0c:	4812      	ldr	r0, [pc, #72]	; (cf58 <_gpio_set_pin_function+0x74>)
    cf0e:	4c13      	ldr	r4, [pc, #76]	; (cf5c <_gpio_set_pin_function+0x78>)
    cf10:	47a0      	blx	r4
}
    cf12:	e01d      	b.n	cf50 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    cf14:	7bba      	ldrb	r2, [r7, #14]
    cf16:	7bf9      	ldrb	r1, [r7, #15]
    cf18:	2301      	movs	r3, #1
    cf1a:	480f      	ldr	r0, [pc, #60]	; (cf58 <_gpio_set_pin_function+0x74>)
    cf1c:	4c0f      	ldr	r4, [pc, #60]	; (cf5c <_gpio_set_pin_function+0x78>)
    cf1e:	47a0      	blx	r4
		if (pin & 1) {
    cf20:	7bbb      	ldrb	r3, [r7, #14]
    cf22:	f003 0301 	and.w	r3, r3, #1
    cf26:	2b00      	cmp	r3, #0
    cf28:	d009      	beq.n	cf3e <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    cf2a:	7bbb      	ldrb	r3, [r7, #14]
    cf2c:	085b      	lsrs	r3, r3, #1
    cf2e:	b2da      	uxtb	r2, r3
    cf30:	683b      	ldr	r3, [r7, #0]
    cf32:	b2db      	uxtb	r3, r3
    cf34:	7bf9      	ldrb	r1, [r7, #15]
    cf36:	4808      	ldr	r0, [pc, #32]	; (cf58 <_gpio_set_pin_function+0x74>)
    cf38:	4c09      	ldr	r4, [pc, #36]	; (cf60 <_gpio_set_pin_function+0x7c>)
    cf3a:	47a0      	blx	r4
}
    cf3c:	e008      	b.n	cf50 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    cf3e:	7bbb      	ldrb	r3, [r7, #14]
    cf40:	085b      	lsrs	r3, r3, #1
    cf42:	b2da      	uxtb	r2, r3
    cf44:	683b      	ldr	r3, [r7, #0]
    cf46:	b2db      	uxtb	r3, r3
    cf48:	7bf9      	ldrb	r1, [r7, #15]
    cf4a:	4803      	ldr	r0, [pc, #12]	; (cf58 <_gpio_set_pin_function+0x74>)
    cf4c:	4c05      	ldr	r4, [pc, #20]	; (cf64 <_gpio_set_pin_function+0x80>)
    cf4e:	47a0      	blx	r4
}
    cf50:	bf00      	nop
    cf52:	3714      	adds	r7, #20
    cf54:	46bd      	mov	sp, r7
    cf56:	bd90      	pop	{r4, r7, pc}
    cf58:	41008000 	.word	0x41008000
    cf5c:	0000cd37 	.word	0x0000cd37
    cf60:	0000ccd9 	.word	0x0000ccd9
    cf64:	0000cc79 	.word	0x0000cc79

0000cf68 <gpio_set_pin_function>:
{
    cf68:	b580      	push	{r7, lr}
    cf6a:	b082      	sub	sp, #8
    cf6c:	af00      	add	r7, sp, #0
    cf6e:	6078      	str	r0, [r7, #4]
    cf70:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    cf72:	6839      	ldr	r1, [r7, #0]
    cf74:	6878      	ldr	r0, [r7, #4]
    cf76:	4b03      	ldr	r3, [pc, #12]	; (cf84 <gpio_set_pin_function+0x1c>)
    cf78:	4798      	blx	r3
}
    cf7a:	bf00      	nop
    cf7c:	3708      	adds	r7, #8
    cf7e:	46bd      	mov	sp, r7
    cf80:	bd80      	pop	{r7, pc}
    cf82:	bf00      	nop
    cf84:	0000cee5 	.word	0x0000cee5

0000cf88 <gpio_set_pin_direction>:
{
    cf88:	b580      	push	{r7, lr}
    cf8a:	b082      	sub	sp, #8
    cf8c:	af00      	add	r7, sp, #0
    cf8e:	4603      	mov	r3, r0
    cf90:	460a      	mov	r2, r1
    cf92:	71fb      	strb	r3, [r7, #7]
    cf94:	4613      	mov	r3, r2
    cf96:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    cf98:	79fb      	ldrb	r3, [r7, #7]
    cf9a:	095b      	lsrs	r3, r3, #5
    cf9c:	b2d8      	uxtb	r0, r3
    cf9e:	79fb      	ldrb	r3, [r7, #7]
    cfa0:	f003 031f 	and.w	r3, r3, #31
    cfa4:	2201      	movs	r2, #1
    cfa6:	fa02 f303 	lsl.w	r3, r2, r3
    cfaa:	79ba      	ldrb	r2, [r7, #6]
    cfac:	4619      	mov	r1, r3
    cfae:	4b03      	ldr	r3, [pc, #12]	; (cfbc <gpio_set_pin_direction+0x34>)
    cfb0:	4798      	blx	r3
}
    cfb2:	bf00      	nop
    cfb4:	3708      	adds	r7, #8
    cfb6:	46bd      	mov	sp, r7
    cfb8:	bd80      	pop	{r7, pc}
    cfba:	bf00      	nop
    cfbc:	0000cdb9 	.word	0x0000cdb9

0000cfc0 <gpio_set_pin_level>:
{
    cfc0:	b580      	push	{r7, lr}
    cfc2:	b082      	sub	sp, #8
    cfc4:	af00      	add	r7, sp, #0
    cfc6:	4603      	mov	r3, r0
    cfc8:	460a      	mov	r2, r1
    cfca:	71fb      	strb	r3, [r7, #7]
    cfcc:	4613      	mov	r3, r2
    cfce:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    cfd0:	79fb      	ldrb	r3, [r7, #7]
    cfd2:	095b      	lsrs	r3, r3, #5
    cfd4:	b2d8      	uxtb	r0, r3
    cfd6:	79fb      	ldrb	r3, [r7, #7]
    cfd8:	f003 031f 	and.w	r3, r3, #31
    cfdc:	2201      	movs	r2, #1
    cfde:	fa02 f303 	lsl.w	r3, r2, r3
    cfe2:	79ba      	ldrb	r2, [r7, #6]
    cfe4:	4619      	mov	r1, r3
    cfe6:	4b03      	ldr	r3, [pc, #12]	; (cff4 <gpio_set_pin_level+0x34>)
    cfe8:	4798      	blx	r3
}
    cfea:	bf00      	nop
    cfec:	3708      	adds	r7, #8
    cfee:	46bd      	mov	sp, r7
    cff0:	bd80      	pop	{r7, pc}
    cff2:	bf00      	nop
    cff4:	0000cea1 	.word	0x0000cea1

0000cff8 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    cff8:	b580      	push	{r7, lr}
    cffa:	b082      	sub	sp, #8
    cffc:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    cffe:	2100      	movs	r1, #0
    d000:	2008      	movs	r0, #8
    d002:	4b24      	ldr	r3, [pc, #144]	; (d094 <QSPI_N25Q256_exit_xip+0x9c>)
    d004:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    d006:	2100      	movs	r1, #0
    d008:	202b      	movs	r0, #43	; 0x2b
    d00a:	4b22      	ldr	r3, [pc, #136]	; (d094 <QSPI_N25Q256_exit_xip+0x9c>)
    d00c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    d00e:	2100      	movs	r1, #0
    d010:	202a      	movs	r0, #42	; 0x2a
    d012:	4b20      	ldr	r3, [pc, #128]	; (d094 <QSPI_N25Q256_exit_xip+0x9c>)
    d014:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    d016:	2102      	movs	r1, #2
    d018:	2008      	movs	r0, #8
    d01a:	4b1f      	ldr	r3, [pc, #124]	; (d098 <QSPI_N25Q256_exit_xip+0xa0>)
    d01c:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    d01e:	2102      	movs	r1, #2
    d020:	202b      	movs	r0, #43	; 0x2b
    d022:	4b1d      	ldr	r3, [pc, #116]	; (d098 <QSPI_N25Q256_exit_xip+0xa0>)
    d024:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    d026:	2102      	movs	r1, #2
    d028:	202a      	movs	r0, #42	; 0x2a
    d02a:	4b1b      	ldr	r3, [pc, #108]	; (d098 <QSPI_N25Q256_exit_xip+0xa0>)
    d02c:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    d02e:	2101      	movs	r1, #1
    d030:	2008      	movs	r0, #8
    d032:	4b1a      	ldr	r3, [pc, #104]	; (d09c <QSPI_N25Q256_exit_xip+0xa4>)
    d034:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    d036:	2100      	movs	r1, #0
    d038:	202b      	movs	r0, #43	; 0x2b
    d03a:	4b18      	ldr	r3, [pc, #96]	; (d09c <QSPI_N25Q256_exit_xip+0xa4>)
    d03c:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    d03e:	2100      	movs	r1, #0
    d040:	202a      	movs	r0, #42	; 0x2a
    d042:	4b16      	ldr	r3, [pc, #88]	; (d09c <QSPI_N25Q256_exit_xip+0xa4>)
    d044:	4798      	blx	r3

	delay_us(1);
    d046:	2001      	movs	r0, #1
    d048:	4b15      	ldr	r3, [pc, #84]	; (d0a0 <QSPI_N25Q256_exit_xip+0xa8>)
    d04a:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    d04c:	2300      	movs	r3, #0
    d04e:	607b      	str	r3, [r7, #4]
    d050:	e010      	b.n	d074 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    d052:	2101      	movs	r1, #1
    d054:	202a      	movs	r0, #42	; 0x2a
    d056:	4b11      	ldr	r3, [pc, #68]	; (d09c <QSPI_N25Q256_exit_xip+0xa4>)
    d058:	4798      	blx	r3
		delay_us(1);
    d05a:	2001      	movs	r0, #1
    d05c:	4b10      	ldr	r3, [pc, #64]	; (d0a0 <QSPI_N25Q256_exit_xip+0xa8>)
    d05e:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    d060:	2100      	movs	r1, #0
    d062:	202a      	movs	r0, #42	; 0x2a
    d064:	4b0d      	ldr	r3, [pc, #52]	; (d09c <QSPI_N25Q256_exit_xip+0xa4>)
    d066:	4798      	blx	r3
		delay_us(1);
    d068:	2001      	movs	r0, #1
    d06a:	4b0d      	ldr	r3, [pc, #52]	; (d0a0 <QSPI_N25Q256_exit_xip+0xa8>)
    d06c:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    d06e:	687b      	ldr	r3, [r7, #4]
    d070:	3301      	adds	r3, #1
    d072:	607b      	str	r3, [r7, #4]
    d074:	687b      	ldr	r3, [r7, #4]
    d076:	2b06      	cmp	r3, #6
    d078:	ddeb      	ble.n	d052 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    d07a:	2101      	movs	r1, #1
    d07c:	202b      	movs	r0, #43	; 0x2b
    d07e:	4b07      	ldr	r3, [pc, #28]	; (d09c <QSPI_N25Q256_exit_xip+0xa4>)
    d080:	4798      	blx	r3
	delay_us(1);
    d082:	2001      	movs	r0, #1
    d084:	4b06      	ldr	r3, [pc, #24]	; (d0a0 <QSPI_N25Q256_exit_xip+0xa8>)
    d086:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    d088:	4b06      	ldr	r3, [pc, #24]	; (d0a4 <QSPI_N25Q256_exit_xip+0xac>)
    d08a:	4798      	blx	r3
}
    d08c:	bf00      	nop
    d08e:	3708      	adds	r7, #8
    d090:	46bd      	mov	sp, r7
    d092:	bd80      	pop	{r7, pc}
    d094:	0000cf69 	.word	0x0000cf69
    d098:	0000cf89 	.word	0x0000cf89
    d09c:	0000cfc1 	.word	0x0000cfc1
    d0a0:	0000364d 	.word	0x0000364d
    d0a4:	00002311 	.word	0x00002311

0000d0a8 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    d0a8:	b598      	push	{r3, r4, r7, lr}
    d0aa:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    d0ac:	4806      	ldr	r0, [pc, #24]	; (d0c8 <spi_nor_flash_init+0x20>)
    d0ae:	4b07      	ldr	r3, [pc, #28]	; (d0cc <spi_nor_flash_init+0x24>)
    d0b0:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    d0b2:	2300      	movs	r3, #0
    d0b4:	4a06      	ldr	r2, [pc, #24]	; (d0d0 <spi_nor_flash_init+0x28>)
    d0b6:	4904      	ldr	r1, [pc, #16]	; (d0c8 <spi_nor_flash_init+0x20>)
    d0b8:	4806      	ldr	r0, [pc, #24]	; (d0d4 <spi_nor_flash_init+0x2c>)
    d0ba:	4c07      	ldr	r4, [pc, #28]	; (d0d8 <spi_nor_flash_init+0x30>)
    d0bc:	47a0      	blx	r4
    d0be:	4602      	mov	r2, r0
    d0c0:	4b06      	ldr	r3, [pc, #24]	; (d0dc <spi_nor_flash_init+0x34>)
    d0c2:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    d0c4:	bf00      	nop
    d0c6:	bd98      	pop	{r3, r4, r7, pc}
    d0c8:	2000dfb8 	.word	0x2000dfb8
    d0cc:	00003b85 	.word	0x00003b85
    d0d0:	0000cff9 	.word	0x0000cff9
    d0d4:	20002714 	.word	0x20002714
    d0d8:	0000d515 	.word	0x0000d515
    d0dc:	2000e1b8 	.word	0x2000e1b8

0000d0e0 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    d0e0:	b580      	push	{r7, lr}
    d0e2:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    d0e4:	4805      	ldr	r0, [pc, #20]	; (d0fc <cdc_device_acm_init+0x1c>)
    d0e6:	4b06      	ldr	r3, [pc, #24]	; (d100 <cdc_device_acm_init+0x20>)
    d0e8:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    d0ea:	4b06      	ldr	r3, [pc, #24]	; (d104 <cdc_device_acm_init+0x24>)
    d0ec:	4798      	blx	r3

	usbdc_start(single_desc);
    d0ee:	4806      	ldr	r0, [pc, #24]	; (d108 <cdc_device_acm_init+0x28>)
    d0f0:	4b06      	ldr	r3, [pc, #24]	; (d10c <cdc_device_acm_init+0x2c>)
    d0f2:	4798      	blx	r3
	usbdc_attach();
    d0f4:	4b06      	ldr	r3, [pc, #24]	; (d110 <cdc_device_acm_init+0x30>)
    d0f6:	4798      	blx	r3
}
    d0f8:	bf00      	nop
    d0fa:	bd80      	pop	{r7, pc}
    d0fc:	20002764 	.word	0x20002764
    d100:	0000ec3d 	.word	0x0000ec3d
    d104:	0000deb5 	.word	0x0000deb5
    d108:	20000200 	.word	0x20000200
    d10c:	0000ecd9 	.word	0x0000ecd9
    d110:	0000ed29 	.word	0x0000ed29

0000d114 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    d114:	b580      	push	{r7, lr}
    d116:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    d118:	4b01      	ldr	r3, [pc, #4]	; (d120 <usb_init+0xc>)
    d11a:	4798      	blx	r3
}
    d11c:	bf00      	nop
    d11e:	bd80      	pop	{r7, pc}
    d120:	0000d0e1 	.word	0x0000d0e1

0000d124 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    d124:	b480      	push	{r7}
    d126:	b085      	sub	sp, #20
    d128:	af00      	add	r7, sp, #0
    d12a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d12c:	f3ef 8310 	mrs	r3, PRIMASK
    d130:	60fb      	str	r3, [r7, #12]
  return(result);
    d132:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    d134:	687b      	ldr	r3, [r7, #4]
    d136:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    d138:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    d13a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    d13e:	bf00      	nop
    d140:	3714      	adds	r7, #20
    d142:	46bd      	mov	sp, r7
    d144:	f85d 7b04 	ldr.w	r7, [sp], #4
    d148:	4770      	bx	lr

0000d14a <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    d14a:	b480      	push	{r7}
    d14c:	b085      	sub	sp, #20
    d14e:	af00      	add	r7, sp, #0
    d150:	6078      	str	r0, [r7, #4]
    d152:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    d156:	687b      	ldr	r3, [r7, #4]
    d158:	681b      	ldr	r3, [r3, #0]
    d15a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    d15c:	68fb      	ldr	r3, [r7, #12]
    d15e:	f383 8810 	msr	PRIMASK, r3
}
    d162:	bf00      	nop
    d164:	3714      	adds	r7, #20
    d166:	46bd      	mov	sp, r7
    d168:	f85d 7b04 	ldr.w	r7, [sp], #4
    d16c:	4770      	bx	lr
	...

0000d170 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    d170:	b580      	push	{r7, lr}
    d172:	b08c      	sub	sp, #48	; 0x30
    d174:	af00      	add	r7, sp, #0
    d176:	6078      	str	r0, [r7, #4]
    d178:	460b      	mov	r3, r1
    d17a:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d17c:	687b      	ldr	r3, [r7, #4]
    d17e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d180:	687b      	ldr	r3, [r7, #4]
    d182:	681b      	ldr	r3, [r3, #0]
    d184:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    d186:	f107 030c 	add.w	r3, r7, #12
    d18a:	2200      	movs	r2, #0
    d18c:	601a      	str	r2, [r3, #0]
    d18e:	605a      	str	r2, [r3, #4]
    d190:	609a      	str	r2, [r3, #8]
    d192:	60da      	str	r2, [r3, #12]
    d194:	611a      	str	r2, [r3, #16]
    d196:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d19a:	7b1b      	ldrb	r3, [r3, #12]
    d19c:	2b00      	cmp	r3, #0
    d19e:	d001      	beq.n	d1a4 <n25q256a_xip_confirm+0x34>
    d1a0:	2206      	movs	r2, #6
    d1a2:	e000      	b.n	d1a6 <n25q256a_xip_confirm+0x36>
    d1a4:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    d1a6:	7b3b      	ldrb	r3, [r7, #12]
    d1a8:	f362 0302 	bfi	r3, r2, #0, #3
    d1ac:	733b      	strb	r3, [r7, #12]
    d1ae:	7b3b      	ldrb	r3, [r7, #12]
    d1b0:	f043 0310 	orr.w	r3, r3, #16
    d1b4:	733b      	strb	r3, [r7, #12]
    d1b6:	7b3b      	ldrb	r3, [r7, #12]
    d1b8:	f043 0320 	orr.w	r3, r3, #32
    d1bc:	733b      	strb	r3, [r7, #12]
    d1be:	7b3b      	ldrb	r3, [r7, #12]
    d1c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d1c4:	733b      	strb	r3, [r7, #12]
    d1c6:	7b3b      	ldrb	r3, [r7, #12]
    d1c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d1cc:	733b      	strb	r3, [r7, #12]
    d1ce:	7b7b      	ldrb	r3, [r7, #13]
    d1d0:	f043 0303 	orr.w	r3, r3, #3
    d1d4:	737b      	strb	r3, [r7, #13]
    d1d6:	7b7b      	ldrb	r3, [r7, #13]
    d1d8:	2201      	movs	r2, #1
    d1da:	f362 1305 	bfi	r3, r2, #4, #2
    d1de:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    d1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d1e2:	7b1b      	ldrb	r3, [r3, #12]
    d1e4:	2b00      	cmp	r3, #0
    d1e6:	d001      	beq.n	d1ec <n25q256a_xip_confirm+0x7c>
    d1e8:	2208      	movs	r2, #8
    d1ea:	e000      	b.n	d1ee <n25q256a_xip_confirm+0x7e>
    d1ec:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    d1ee:	7bbb      	ldrb	r3, [r7, #14]
    d1f0:	f362 0304 	bfi	r3, r2, #0, #5
    d1f4:	73bb      	strb	r3, [r7, #14]
    d1f6:	230b      	movs	r3, #11
    d1f8:	743b      	strb	r3, [r7, #16]
    d1fa:	78fb      	ldrb	r3, [r7, #3]
    d1fc:	2b00      	cmp	r3, #0
    d1fe:	d001      	beq.n	d204 <n25q256a_xip_confirm+0x94>
    d200:	2300      	movs	r3, #0
    d202:	e000      	b.n	d206 <n25q256a_xip_confirm+0x96>
    d204:	23ff      	movs	r3, #255	; 0xff
    d206:	747b      	strb	r3, [r7, #17]
    d208:	2301      	movs	r3, #1
    d20a:	61bb      	str	r3, [r7, #24]
    d20c:	f107 0327 	add.w	r3, r7, #39	; 0x27
    d210:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    d212:	f107 030c 	add.w	r3, r7, #12
    d216:	4619      	mov	r1, r3
    d218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d21a:	4b07      	ldr	r3, [pc, #28]	; (d238 <n25q256a_xip_confirm+0xc8>)
    d21c:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    d21e:	78fb      	ldrb	r3, [r7, #3]
    d220:	2b00      	cmp	r3, #0
    d222:	d001      	beq.n	d228 <n25q256a_xip_confirm+0xb8>
    d224:	2202      	movs	r2, #2
    d226:	e000      	b.n	d22a <n25q256a_xip_confirm+0xba>
    d228:	2201      	movs	r2, #1
    d22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d22c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    d22e:	2300      	movs	r3, #0
}
    d230:	4618      	mov	r0, r3
    d232:	3730      	adds	r7, #48	; 0x30
    d234:	46bd      	mov	sp, r7
    d236:	bd80      	pop	{r7, pc}
    d238:	00003bfd 	.word	0x00003bfd

0000d23c <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    d23c:	b580      	push	{r7, lr}
    d23e:	b08c      	sub	sp, #48	; 0x30
    d240:	af00      	add	r7, sp, #0
    d242:	6078      	str	r0, [r7, #4]
    d244:	460b      	mov	r3, r1
    d246:	70fb      	strb	r3, [r7, #3]
    d248:	4613      	mov	r3, r2
    d24a:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    d24c:	2300      	movs	r3, #0
    d24e:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    d250:	687b      	ldr	r3, [r7, #4]
    d252:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    d254:	687b      	ldr	r3, [r7, #4]
    d256:	681b      	ldr	r3, [r3, #0]
    d258:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    d25a:	f107 030c 	add.w	r3, r7, #12
    d25e:	2200      	movs	r2, #0
    d260:	601a      	str	r2, [r3, #0]
    d262:	605a      	str	r2, [r3, #4]
    d264:	609a      	str	r2, [r3, #8]
    d266:	60da      	str	r2, [r3, #12]
    d268:	611a      	str	r2, [r3, #16]
    d26a:	615a      	str	r2, [r3, #20]
    d26c:	78fb      	ldrb	r3, [r7, #3]
    d26e:	f003 0307 	and.w	r3, r3, #7
    d272:	b2da      	uxtb	r2, r3
    d274:	7b3b      	ldrb	r3, [r7, #12]
    d276:	f362 0302 	bfi	r3, r2, #0, #3
    d27a:	733b      	strb	r3, [r7, #12]
    d27c:	7b3b      	ldrb	r3, [r7, #12]
    d27e:	f043 0310 	orr.w	r3, r3, #16
    d282:	733b      	strb	r3, [r7, #12]
    d284:	7b3b      	ldrb	r3, [r7, #12]
    d286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d28a:	733b      	strb	r3, [r7, #12]
    d28c:	78bb      	ldrb	r3, [r7, #2]
    d28e:	743b      	strb	r3, [r7, #16]
    d290:	2301      	movs	r3, #1
    d292:	61bb      	str	r3, [r7, #24]
    d294:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d298:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    d29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d29c:	7b5b      	ldrb	r3, [r3, #13]
    d29e:	2b00      	cmp	r3, #0
    d2a0:	d003      	beq.n	d2aa <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    d2a2:	2100      	movs	r1, #0
    d2a4:	6878      	ldr	r0, [r7, #4]
    d2a6:	4b0a      	ldr	r3, [pc, #40]	; (d2d0 <n25q256a_read_reg+0x94>)
    d2a8:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    d2aa:	f107 030c 	add.w	r3, r7, #12
    d2ae:	4619      	mov	r1, r3
    d2b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d2b2:	4b08      	ldr	r3, [pc, #32]	; (d2d4 <n25q256a_read_reg+0x98>)
    d2b4:	4798      	blx	r3
	if (n25q->xip_mode) {
    d2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2b8:	7b5b      	ldrb	r3, [r3, #13]
    d2ba:	2b00      	cmp	r3, #0
    d2bc:	d003      	beq.n	d2c6 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    d2be:	2101      	movs	r1, #1
    d2c0:	6878      	ldr	r0, [r7, #4]
    d2c2:	4b03      	ldr	r3, [pc, #12]	; (d2d0 <n25q256a_read_reg+0x94>)
    d2c4:	4798      	blx	r3
	}
	return status;
    d2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    d2c8:	4618      	mov	r0, r3
    d2ca:	3730      	adds	r7, #48	; 0x30
    d2cc:	46bd      	mov	sp, r7
    d2ce:	bd80      	pop	{r7, pc}
    d2d0:	0000d171 	.word	0x0000d171
    d2d4:	00003bfd 	.word	0x00003bfd

0000d2d8 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    d2d8:	b580      	push	{r7, lr}
    d2da:	b08c      	sub	sp, #48	; 0x30
    d2dc:	af00      	add	r7, sp, #0
    d2de:	60f8      	str	r0, [r7, #12]
    d2e0:	607b      	str	r3, [r7, #4]
    d2e2:	460b      	mov	r3, r1
    d2e4:	72fb      	strb	r3, [r7, #11]
    d2e6:	4613      	mov	r3, r2
    d2e8:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d2ea:	68fb      	ldr	r3, [r7, #12]
    d2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d2ee:	68fb      	ldr	r3, [r7, #12]
    d2f0:	681b      	ldr	r3, [r3, #0]
    d2f2:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    d2f4:	f107 0310 	add.w	r3, r7, #16
    d2f8:	2200      	movs	r2, #0
    d2fa:	601a      	str	r2, [r3, #0]
    d2fc:	605a      	str	r2, [r3, #4]
    d2fe:	609a      	str	r2, [r3, #8]
    d300:	60da      	str	r2, [r3, #12]
    d302:	611a      	str	r2, [r3, #16]
    d304:	615a      	str	r2, [r3, #20]
    d306:	7afb      	ldrb	r3, [r7, #11]
    d308:	f003 0307 	and.w	r3, r3, #7
    d30c:	b2da      	uxtb	r2, r3
    d30e:	7c3b      	ldrb	r3, [r7, #16]
    d310:	f362 0302 	bfi	r3, r2, #0, #3
    d314:	743b      	strb	r3, [r7, #16]
    d316:	7c3b      	ldrb	r3, [r7, #16]
    d318:	f043 0310 	orr.w	r3, r3, #16
    d31c:	743b      	strb	r3, [r7, #16]
    d31e:	7c3b      	ldrb	r3, [r7, #16]
    d320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d324:	743b      	strb	r3, [r7, #16]
    d326:	7c7b      	ldrb	r3, [r7, #17]
    d328:	2202      	movs	r2, #2
    d32a:	f362 1305 	bfi	r3, r2, #4, #2
    d32e:	747b      	strb	r3, [r7, #17]
    d330:	7abb      	ldrb	r3, [r7, #10]
    d332:	753b      	strb	r3, [r7, #20]
    d334:	2301      	movs	r3, #1
    d336:	61fb      	str	r3, [r7, #28]
    d338:	1d3b      	adds	r3, r7, #4
    d33a:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    d33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d33e:	7b5b      	ldrb	r3, [r3, #13]
    d340:	2b00      	cmp	r3, #0
    d342:	d003      	beq.n	d34c <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    d344:	2100      	movs	r1, #0
    d346:	68f8      	ldr	r0, [r7, #12]
    d348:	4b09      	ldr	r3, [pc, #36]	; (d370 <n25q256a_write_reg+0x98>)
    d34a:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    d34c:	f107 0310 	add.w	r3, r7, #16
    d350:	4619      	mov	r1, r3
    d352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d354:	4b07      	ldr	r3, [pc, #28]	; (d374 <n25q256a_write_reg+0x9c>)
    d356:	4798      	blx	r3
	if (n25q->xip_mode) {
    d358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d35a:	7b5b      	ldrb	r3, [r3, #13]
    d35c:	2b00      	cmp	r3, #0
    d35e:	d003      	beq.n	d368 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    d360:	2101      	movs	r1, #1
    d362:	68f8      	ldr	r0, [r7, #12]
    d364:	4b02      	ldr	r3, [pc, #8]	; (d370 <n25q256a_write_reg+0x98>)
    d366:	4798      	blx	r3
	}
}
    d368:	bf00      	nop
    d36a:	3730      	adds	r7, #48	; 0x30
    d36c:	46bd      	mov	sp, r7
    d36e:	bd80      	pop	{r7, pc}
    d370:	0000d171 	.word	0x0000d171
    d374:	00003bfd 	.word	0x00003bfd

0000d378 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    d378:	b580      	push	{r7, lr}
    d37a:	b090      	sub	sp, #64	; 0x40
    d37c:	af00      	add	r7, sp, #0
    d37e:	6078      	str	r0, [r7, #4]
    d380:	460b      	mov	r3, r1
    d382:	70fb      	strb	r3, [r7, #3]
    d384:	4613      	mov	r3, r2
    d386:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d388:	687b      	ldr	r3, [r7, #4]
    d38a:	681b      	ldr	r3, [r3, #0]
    d38c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    d38e:	78bb      	ldrb	r3, [r7, #2]
    d390:	2b00      	cmp	r3, #0
    d392:	d001      	beq.n	d398 <n25q256a_write_enable+0x20>
    d394:	2306      	movs	r3, #6
    d396:	e000      	b.n	d39a <n25q256a_write_enable+0x22>
    d398:	2304      	movs	r3, #4
    d39a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    d39e:	f107 0320 	add.w	r3, r7, #32
    d3a2:	2200      	movs	r2, #0
    d3a4:	601a      	str	r2, [r3, #0]
    d3a6:	605a      	str	r2, [r3, #4]
    d3a8:	609a      	str	r2, [r3, #8]
    d3aa:	60da      	str	r2, [r3, #12]
    d3ac:	611a      	str	r2, [r3, #16]
    d3ae:	615a      	str	r2, [r3, #20]
    d3b0:	78fb      	ldrb	r3, [r7, #3]
    d3b2:	f003 0307 	and.w	r3, r3, #7
    d3b6:	b2da      	uxtb	r2, r3
    d3b8:	f897 3020 	ldrb.w	r3, [r7, #32]
    d3bc:	f362 0302 	bfi	r3, r2, #0, #3
    d3c0:	f887 3020 	strb.w	r3, [r7, #32]
    d3c4:	f897 3020 	ldrb.w	r3, [r7, #32]
    d3c8:	f043 0310 	orr.w	r3, r3, #16
    d3cc:	f887 3020 	strb.w	r3, [r7, #32]
    d3d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    d3d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    d3d8:	f107 0308 	add.w	r3, r7, #8
    d3dc:	2200      	movs	r2, #0
    d3de:	601a      	str	r2, [r3, #0]
    d3e0:	605a      	str	r2, [r3, #4]
    d3e2:	609a      	str	r2, [r3, #8]
    d3e4:	60da      	str	r2, [r3, #12]
    d3e6:	611a      	str	r2, [r3, #16]
    d3e8:	615a      	str	r2, [r3, #20]
    d3ea:	78fb      	ldrb	r3, [r7, #3]
    d3ec:	f003 0307 	and.w	r3, r3, #7
    d3f0:	b2da      	uxtb	r2, r3
    d3f2:	7a3b      	ldrb	r3, [r7, #8]
    d3f4:	f362 0302 	bfi	r3, r2, #0, #3
    d3f8:	723b      	strb	r3, [r7, #8]
    d3fa:	7a3b      	ldrb	r3, [r7, #8]
    d3fc:	f043 0310 	orr.w	r3, r3, #16
    d400:	723b      	strb	r3, [r7, #8]
    d402:	7a3b      	ldrb	r3, [r7, #8]
    d404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d408:	723b      	strb	r3, [r7, #8]
    d40a:	2305      	movs	r3, #5
    d40c:	733b      	strb	r3, [r7, #12]
    d40e:	2301      	movs	r3, #1
    d410:	617b      	str	r3, [r7, #20]
    d412:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    d416:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    d418:	f107 0320 	add.w	r3, r7, #32
    d41c:	4619      	mov	r1, r3
    d41e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    d420:	4b08      	ldr	r3, [pc, #32]	; (d444 <n25q256a_write_enable+0xcc>)
    d422:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    d424:	f107 0308 	add.w	r3, r7, #8
    d428:	4619      	mov	r1, r3
    d42a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    d42c:	4b05      	ldr	r3, [pc, #20]	; (d444 <n25q256a_write_enable+0xcc>)
    d42e:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    d430:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    d434:	f003 0302 	and.w	r3, r3, #2
    d438:	2b00      	cmp	r3, #0
    d43a:	d0ed      	beq.n	d418 <n25q256a_write_enable+0xa0>
}
    d43c:	bf00      	nop
    d43e:	3740      	adds	r7, #64	; 0x40
    d440:	46bd      	mov	sp, r7
    d442:	bd80      	pop	{r7, pc}
    d444:	00003bfd 	.word	0x00003bfd

0000d448 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    d448:	b590      	push	{r4, r7, lr}
    d44a:	b087      	sub	sp, #28
    d44c:	af00      	add	r7, sp, #0
    d44e:	6078      	str	r0, [r7, #4]
    d450:	460b      	mov	r3, r1
    d452:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    d454:	687b      	ldr	r3, [r7, #4]
    d456:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d458:	68fb      	ldr	r3, [r7, #12]
    d45a:	7b1b      	ldrb	r3, [r3, #12]
    d45c:	2b00      	cmp	r3, #0
    d45e:	d001      	beq.n	d464 <n25q256a_switch_mode+0x1c>
    d460:	2306      	movs	r3, #6
    d462:	e000      	b.n	d466 <n25q256a_switch_mode+0x1e>
    d464:	2300      	movs	r3, #0
    d466:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    d468:	7afb      	ldrb	r3, [r7, #11]
    d46a:	2265      	movs	r2, #101	; 0x65
    d46c:	4619      	mov	r1, r3
    d46e:	6878      	ldr	r0, [r7, #4]
    d470:	4b25      	ldr	r3, [pc, #148]	; (d508 <n25q256a_switch_mode+0xc0>)
    d472:	4798      	blx	r3
    d474:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    d476:	2300      	movs	r3, #0
    d478:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    d47a:	68fb      	ldr	r3, [r7, #12]
    d47c:	7b1b      	ldrb	r3, [r3, #12]
    d47e:	78fa      	ldrb	r2, [r7, #3]
    d480:	429a      	cmp	r2, r3
    d482:	d03d      	beq.n	d500 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    d484:	78fb      	ldrb	r3, [r7, #3]
    d486:	2b00      	cmp	r3, #0
    d488:	d00b      	beq.n	d4a2 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    d48a:	697b      	ldr	r3, [r7, #20]
    d48c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d490:	2b00      	cmp	r3, #0
    d492:	d011      	beq.n	d4b8 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    d494:	697b      	ldr	r3, [r7, #20]
    d496:	f003 031f 	and.w	r3, r3, #31
    d49a:	617b      	str	r3, [r7, #20]
			modify = 1;
    d49c:	2301      	movs	r3, #1
    d49e:	74fb      	strb	r3, [r7, #19]
    d4a0:	e00a      	b.n	d4b8 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    d4a2:	697b      	ldr	r3, [r7, #20]
    d4a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d4a8:	2b00      	cmp	r3, #0
    d4aa:	d105      	bne.n	d4b8 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    d4ac:	697b      	ldr	r3, [r7, #20]
    d4ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    d4b2:	617b      	str	r3, [r7, #20]
			modify = 1;
    d4b4:	2301      	movs	r3, #1
    d4b6:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    d4b8:	7cfb      	ldrb	r3, [r7, #19]
    d4ba:	2b00      	cmp	r3, #0
    d4bc:	d021      	beq.n	d502 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    d4be:	68fb      	ldr	r3, [r7, #12]
    d4c0:	78fa      	ldrb	r2, [r7, #3]
    d4c2:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    d4c4:	7afb      	ldrb	r3, [r7, #11]
    d4c6:	2201      	movs	r2, #1
    d4c8:	4619      	mov	r1, r3
    d4ca:	6878      	ldr	r0, [r7, #4]
    d4cc:	4b0f      	ldr	r3, [pc, #60]	; (d50c <n25q256a_switch_mode+0xc4>)
    d4ce:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    d4d0:	7af9      	ldrb	r1, [r7, #11]
    d4d2:	697b      	ldr	r3, [r7, #20]
    d4d4:	2261      	movs	r2, #97	; 0x61
    d4d6:	6878      	ldr	r0, [r7, #4]
    d4d8:	4c0d      	ldr	r4, [pc, #52]	; (d510 <n25q256a_switch_mode+0xc8>)
    d4da:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d4dc:	78fb      	ldrb	r3, [r7, #3]
    d4de:	2b00      	cmp	r3, #0
    d4e0:	d001      	beq.n	d4e6 <n25q256a_switch_mode+0x9e>
    d4e2:	2306      	movs	r3, #6
    d4e4:	e000      	b.n	d4e8 <n25q256a_switch_mode+0xa0>
    d4e6:	2300      	movs	r3, #0
    d4e8:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    d4ea:	7afb      	ldrb	r3, [r7, #11]
    d4ec:	2265      	movs	r2, #101	; 0x65
    d4ee:	4619      	mov	r1, r3
    d4f0:	6878      	ldr	r0, [r7, #4]
    d4f2:	4b05      	ldr	r3, [pc, #20]	; (d508 <n25q256a_switch_mode+0xc0>)
    d4f4:	4798      	blx	r3
    d4f6:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    d4f8:	68fb      	ldr	r3, [r7, #12]
    d4fa:	78fa      	ldrb	r2, [r7, #3]
    d4fc:	731a      	strb	r2, [r3, #12]
    d4fe:	e000      	b.n	d502 <n25q256a_switch_mode+0xba>
		return;
    d500:	bf00      	nop
	}
}
    d502:	371c      	adds	r7, #28
    d504:	46bd      	mov	sp, r7
    d506:	bd90      	pop	{r4, r7, pc}
    d508:	0000d23d 	.word	0x0000d23d
    d50c:	0000d379 	.word	0x0000d379
    d510:	0000d2d9 	.word	0x0000d2d9

0000d514 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    d514:	b580      	push	{r7, lr}
    d516:	b086      	sub	sp, #24
    d518:	af00      	add	r7, sp, #0
    d51a:	60f8      	str	r0, [r7, #12]
    d51c:	60b9      	str	r1, [r7, #8]
    d51e:	607a      	str	r2, [r7, #4]
    d520:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    d522:	68fb      	ldr	r3, [r7, #12]
    d524:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    d526:	4a0c      	ldr	r2, [pc, #48]	; (d558 <n25q256a_construct+0x44>)
    d528:	68b9      	ldr	r1, [r7, #8]
    d52a:	68f8      	ldr	r0, [r7, #12]
    d52c:	4b0b      	ldr	r3, [pc, #44]	; (d55c <n25q256a_construct+0x48>)
    d52e:	4798      	blx	r3
	n25q->quad_mode    = 0;
    d530:	697b      	ldr	r3, [r7, #20]
    d532:	2200      	movs	r2, #0
    d534:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    d536:	697b      	ldr	r3, [r7, #20]
    d538:	2200      	movs	r2, #0
    d53a:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    d53c:	697b      	ldr	r3, [r7, #20]
    d53e:	687a      	ldr	r2, [r7, #4]
    d540:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    d542:	78fb      	ldrb	r3, [r7, #3]
    d544:	4619      	mov	r1, r3
    d546:	68f8      	ldr	r0, [r7, #12]
    d548:	4b05      	ldr	r3, [pc, #20]	; (d560 <n25q256a_construct+0x4c>)
    d54a:	4798      	blx	r3
	return me;
    d54c:	68fb      	ldr	r3, [r7, #12]
}
    d54e:	4618      	mov	r0, r3
    d550:	3718      	adds	r7, #24
    d552:	46bd      	mov	sp, r7
    d554:	bd80      	pop	{r7, pc}
    d556:	bf00      	nop
    d558:	0001b4f4 	.word	0x0001b4f4
    d55c:	0000d9f1 	.word	0x0000d9f1
    d560:	0000d449 	.word	0x0000d449

0000d564 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    d564:	b580      	push	{r7, lr}
    d566:	b08c      	sub	sp, #48	; 0x30
    d568:	af00      	add	r7, sp, #0
    d56a:	60f8      	str	r0, [r7, #12]
    d56c:	60b9      	str	r1, [r7, #8]
    d56e:	607a      	str	r2, [r7, #4]
    d570:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d572:	68fb      	ldr	r3, [r7, #12]
    d574:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d576:	68fb      	ldr	r3, [r7, #12]
    d578:	681b      	ldr	r3, [r3, #0]
    d57a:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    d57c:	f107 0310 	add.w	r3, r7, #16
    d580:	2200      	movs	r2, #0
    d582:	601a      	str	r2, [r3, #0]
    d584:	605a      	str	r2, [r3, #4]
    d586:	609a      	str	r2, [r3, #8]
    d588:	60da      	str	r2, [r3, #12]
    d58a:	611a      	str	r2, [r3, #16]
    d58c:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d590:	7b1b      	ldrb	r3, [r3, #12]
    d592:	2b00      	cmp	r3, #0
    d594:	d001      	beq.n	d59a <n25q256a_read+0x36>
    d596:	2206      	movs	r2, #6
    d598:	e000      	b.n	d59c <n25q256a_read+0x38>
    d59a:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    d59c:	7c3b      	ldrb	r3, [r7, #16]
    d59e:	f362 0302 	bfi	r3, r2, #0, #3
    d5a2:	743b      	strb	r3, [r7, #16]
    d5a4:	7c3b      	ldrb	r3, [r7, #16]
    d5a6:	f043 0310 	orr.w	r3, r3, #16
    d5aa:	743b      	strb	r3, [r7, #16]
    d5ac:	7c3b      	ldrb	r3, [r7, #16]
    d5ae:	f043 0320 	orr.w	r3, r3, #32
    d5b2:	743b      	strb	r3, [r7, #16]
    d5b4:	7c3b      	ldrb	r3, [r7, #16]
    d5b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d5ba:	743b      	strb	r3, [r7, #16]
    d5bc:	7c7b      	ldrb	r3, [r7, #17]
    d5be:	2201      	movs	r2, #1
    d5c0:	f362 1305 	bfi	r3, r2, #4, #2
    d5c4:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    d5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d5c8:	7b1b      	ldrb	r3, [r3, #12]
    d5ca:	2b00      	cmp	r3, #0
    d5cc:	d001      	beq.n	d5d2 <n25q256a_read+0x6e>
    d5ce:	220a      	movs	r2, #10
    d5d0:	e000      	b.n	d5d4 <n25q256a_read+0x70>
    d5d2:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    d5d4:	7cbb      	ldrb	r3, [r7, #18]
    d5d6:	f362 0304 	bfi	r3, r2, #0, #5
    d5da:	74bb      	strb	r3, [r7, #18]
    d5dc:	230b      	movs	r3, #11
    d5de:	753b      	strb	r3, [r7, #20]
    d5e0:	687b      	ldr	r3, [r7, #4]
    d5e2:	61bb      	str	r3, [r7, #24]
    d5e4:	683b      	ldr	r3, [r7, #0]
    d5e6:	61fb      	str	r3, [r7, #28]
    d5e8:	68bb      	ldr	r3, [r7, #8]
    d5ea:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    d5ec:	f107 0310 	add.w	r3, r7, #16
    d5f0:	4619      	mov	r1, r3
    d5f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d5f4:	4b03      	ldr	r3, [pc, #12]	; (d604 <n25q256a_read+0xa0>)
    d5f6:	4798      	blx	r3
	return ERR_NONE;
    d5f8:	2300      	movs	r3, #0
}
    d5fa:	4618      	mov	r0, r3
    d5fc:	3730      	adds	r7, #48	; 0x30
    d5fe:	46bd      	mov	sp, r7
    d600:	bd80      	pop	{r7, pc}
    d602:	bf00      	nop
    d604:	00003bfd 	.word	0x00003bfd

0000d608 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    d608:	b580      	push	{r7, lr}
    d60a:	b08c      	sub	sp, #48	; 0x30
    d60c:	af00      	add	r7, sp, #0
    d60e:	60f8      	str	r0, [r7, #12]
    d610:	60b9      	str	r1, [r7, #8]
    d612:	607a      	str	r2, [r7, #4]
    d614:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d616:	68fb      	ldr	r3, [r7, #12]
    d618:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d61a:	68fb      	ldr	r3, [r7, #12]
    d61c:	681b      	ldr	r3, [r3, #0]
    d61e:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    d620:	f107 0310 	add.w	r3, r7, #16
    d624:	2200      	movs	r2, #0
    d626:	601a      	str	r2, [r3, #0]
    d628:	605a      	str	r2, [r3, #4]
    d62a:	609a      	str	r2, [r3, #8]
    d62c:	60da      	str	r2, [r3, #12]
    d62e:	611a      	str	r2, [r3, #16]
    d630:	615a      	str	r2, [r3, #20]
    d632:	7c3b      	ldrb	r3, [r7, #16]
    d634:	f043 0310 	orr.w	r3, r3, #16
    d638:	743b      	strb	r3, [r7, #16]
    d63a:	7c3b      	ldrb	r3, [r7, #16]
    d63c:	f043 0320 	orr.w	r3, r3, #32
    d640:	743b      	strb	r3, [r7, #16]
    d642:	7c3b      	ldrb	r3, [r7, #16]
    d644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d648:	743b      	strb	r3, [r7, #16]
    d64a:	7c7b      	ldrb	r3, [r7, #17]
    d64c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    d650:	747b      	strb	r3, [r7, #17]
    d652:	2302      	movs	r3, #2
    d654:	753b      	strb	r3, [r7, #20]
    d656:	687b      	ldr	r3, [r7, #4]
    d658:	61bb      	str	r3, [r7, #24]
    d65a:	683b      	ldr	r3, [r7, #0]
    d65c:	61fb      	str	r3, [r7, #28]
    d65e:	68bb      	ldr	r3, [r7, #8]
    d660:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d664:	7b1b      	ldrb	r3, [r3, #12]
    d666:	2b00      	cmp	r3, #0
    d668:	d001      	beq.n	d66e <n25q256a_write+0x66>
    d66a:	2206      	movs	r2, #6
    d66c:	e000      	b.n	d670 <n25q256a_write+0x68>
    d66e:	2200      	movs	r2, #0
    d670:	7c3b      	ldrb	r3, [r7, #16]
    d672:	f362 0302 	bfi	r3, r2, #0, #3
    d676:	743b      	strb	r3, [r7, #16]
	while (length) {
    d678:	e035      	b.n	d6e6 <n25q256a_write+0xde>
		cmd.address = address;
    d67a:	687b      	ldr	r3, [r7, #4]
    d67c:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    d67e:	683b      	ldr	r3, [r7, #0]
    d680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    d684:	d802      	bhi.n	d68c <n25q256a_write+0x84>
			cmd.buf_len = length;
    d686:	683b      	ldr	r3, [r7, #0]
    d688:	61fb      	str	r3, [r7, #28]
    d68a:	e002      	b.n	d692 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    d68c:	f44f 7380 	mov.w	r3, #256	; 0x100
    d690:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d692:	7c3b      	ldrb	r3, [r7, #16]
    d694:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d698:	b2db      	uxtb	r3, r3
    d69a:	2201      	movs	r2, #1
    d69c:	4619      	mov	r1, r3
    d69e:	68f8      	ldr	r0, [r7, #12]
    d6a0:	4b19      	ldr	r3, [pc, #100]	; (d708 <n25q256a_write+0x100>)
    d6a2:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    d6a4:	f107 0310 	add.w	r3, r7, #16
    d6a8:	4619      	mov	r1, r3
    d6aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d6ac:	4b17      	ldr	r3, [pc, #92]	; (d70c <n25q256a_write+0x104>)
    d6ae:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d6b0:	bf00      	nop
    d6b2:	7c3b      	ldrb	r3, [r7, #16]
    d6b4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d6b8:	b2db      	uxtb	r3, r3
    d6ba:	2270      	movs	r2, #112	; 0x70
    d6bc:	4619      	mov	r1, r3
    d6be:	68f8      	ldr	r0, [r7, #12]
    d6c0:	4b13      	ldr	r3, [pc, #76]	; (d710 <n25q256a_write+0x108>)
    d6c2:	4798      	blx	r3
    d6c4:	4603      	mov	r3, r0
    d6c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d6ca:	2b00      	cmp	r3, #0
    d6cc:	d0f1      	beq.n	d6b2 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    d6ce:	6a3a      	ldr	r2, [r7, #32]
    d6d0:	69fb      	ldr	r3, [r7, #28]
    d6d2:	4413      	add	r3, r2
    d6d4:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    d6d6:	69fb      	ldr	r3, [r7, #28]
    d6d8:	683a      	ldr	r2, [r7, #0]
    d6da:	1ad3      	subs	r3, r2, r3
    d6dc:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    d6de:	69fb      	ldr	r3, [r7, #28]
    d6e0:	687a      	ldr	r2, [r7, #4]
    d6e2:	4413      	add	r3, r2
    d6e4:	607b      	str	r3, [r7, #4]
	while (length) {
    d6e6:	683b      	ldr	r3, [r7, #0]
    d6e8:	2b00      	cmp	r3, #0
    d6ea:	d1c6      	bne.n	d67a <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    d6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d6ee:	7b5b      	ldrb	r3, [r3, #13]
    d6f0:	2b00      	cmp	r3, #0
    d6f2:	d003      	beq.n	d6fc <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    d6f4:	2101      	movs	r1, #1
    d6f6:	68f8      	ldr	r0, [r7, #12]
    d6f8:	4b06      	ldr	r3, [pc, #24]	; (d714 <n25q256a_write+0x10c>)
    d6fa:	4798      	blx	r3
	}
	return ERR_NONE;
    d6fc:	2300      	movs	r3, #0
}
    d6fe:	4618      	mov	r0, r3
    d700:	3730      	adds	r7, #48	; 0x30
    d702:	46bd      	mov	sp, r7
    d704:	bd80      	pop	{r7, pc}
    d706:	bf00      	nop
    d708:	0000d379 	.word	0x0000d379
    d70c:	00003bfd 	.word	0x00003bfd
    d710:	0000d23d 	.word	0x0000d23d
    d714:	0000d171 	.word	0x0000d171

0000d718 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    d718:	b580      	push	{r7, lr}
    d71a:	b090      	sub	sp, #64	; 0x40
    d71c:	af00      	add	r7, sp, #0
    d71e:	60f8      	str	r0, [r7, #12]
    d720:	60b9      	str	r1, [r7, #8]
    d722:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d724:	68fb      	ldr	r3, [r7, #12]
    d726:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d728:	68fb      	ldr	r3, [r7, #12]
    d72a:	681b      	ldr	r3, [r3, #0]
    d72c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    d72e:	f107 0314 	add.w	r3, r7, #20
    d732:	2200      	movs	r2, #0
    d734:	601a      	str	r2, [r3, #0]
    d736:	605a      	str	r2, [r3, #4]
    d738:	609a      	str	r2, [r3, #8]
    d73a:	60da      	str	r2, [r3, #12]
    d73c:	611a      	str	r2, [r3, #16]
    d73e:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    d740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d742:	7b1b      	ldrb	r3, [r3, #12]
    d744:	2b00      	cmp	r3, #0
    d746:	d001      	beq.n	d74c <n25q256a_erase+0x34>
    d748:	2206      	movs	r2, #6
    d74a:	e000      	b.n	d74e <n25q256a_erase+0x36>
    d74c:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    d74e:	7d3b      	ldrb	r3, [r7, #20]
    d750:	f362 0302 	bfi	r3, r2, #0, #3
    d754:	753b      	strb	r3, [r7, #20]
    d756:	7d3b      	ldrb	r3, [r7, #20]
    d758:	f043 0310 	orr.w	r3, r3, #16
    d75c:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    d75e:	687b      	ldr	r3, [r7, #4]
    d760:	4a56      	ldr	r2, [pc, #344]	; (d8bc <n25q256a_erase+0x1a4>)
    d762:	4293      	cmp	r3, r2
    d764:	bf94      	ite	ls
    d766:	2301      	movls	r3, #1
    d768:	2300      	movhi	r3, #0
    d76a:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    d76c:	7d3b      	ldrb	r3, [r7, #20]
    d76e:	f362 1345 	bfi	r3, r2, #5, #1
    d772:	753b      	strb	r3, [r7, #20]
    d774:	7d7b      	ldrb	r3, [r7, #21]
    d776:	2202      	movs	r2, #2
    d778:	f362 1305 	bfi	r3, r2, #4, #2
    d77c:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    d77e:	68bb      	ldr	r3, [r7, #8]
    d780:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    d782:	687b      	ldr	r3, [r7, #4]
    d784:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    d786:	2300      	movs	r3, #0
    d788:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    d78a:	687b      	ldr	r3, [r7, #4]
    d78c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    d790:	2b00      	cmp	r3, #0
    d792:	d104      	bne.n	d79e <n25q256a_erase+0x86>
    d794:	68bb      	ldr	r3, [r7, #8]
    d796:	f3c3 030b 	ubfx	r3, r3, #0, #12
    d79a:	2b00      	cmp	r3, #0
    d79c:	d002      	beq.n	d7a4 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    d79e:	f06f 030c 	mvn.w	r3, #12
    d7a2:	e087      	b.n	d8b4 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    d7a4:	687b      	ldr	r3, [r7, #4]
    d7a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    d7aa:	d368      	bcc.n	d87e <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    d7ac:	23c7      	movs	r3, #199	; 0xc7
    d7ae:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d7b0:	7d3b      	ldrb	r3, [r7, #20]
    d7b2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d7b6:	b2db      	uxtb	r3, r3
    d7b8:	2201      	movs	r2, #1
    d7ba:	4619      	mov	r1, r3
    d7bc:	68f8      	ldr	r0, [r7, #12]
    d7be:	4b40      	ldr	r3, [pc, #256]	; (d8c0 <n25q256a_erase+0x1a8>)
    d7c0:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    d7c2:	f107 0314 	add.w	r3, r7, #20
    d7c6:	4619      	mov	r1, r3
    d7c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d7ca:	4b3e      	ldr	r3, [pc, #248]	; (d8c4 <n25q256a_erase+0x1ac>)
    d7cc:	4798      	blx	r3
    d7ce:	e059      	b.n	d884 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    d7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d7d2:	b29b      	uxth	r3, r3
    d7d4:	2b00      	cmp	r3, #0
    d7d6:	d11f      	bne.n	d818 <n25q256a_erase+0x100>
    d7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d7da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    d7de:	d31b      	bcc.n	d818 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    d7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d7e2:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    d7e4:	23d8      	movs	r3, #216	; 0xd8
    d7e6:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d7e8:	7d3b      	ldrb	r3, [r7, #20]
    d7ea:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d7ee:	b2db      	uxtb	r3, r3
    d7f0:	2201      	movs	r2, #1
    d7f2:	4619      	mov	r1, r3
    d7f4:	68f8      	ldr	r0, [r7, #12]
    d7f6:	4b32      	ldr	r3, [pc, #200]	; (d8c0 <n25q256a_erase+0x1a8>)
    d7f8:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    d7fa:	f107 0314 	add.w	r3, r7, #20
    d7fe:	4619      	mov	r1, r3
    d800:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d802:	4b30      	ldr	r3, [pc, #192]	; (d8c4 <n25q256a_erase+0x1ac>)
    d804:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    d806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d808:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d80c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    d80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d810:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    d814:	63bb      	str	r3, [r7, #56]	; 0x38
    d816:	e023      	b.n	d860 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    d818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d81a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d81e:	d31b      	bcc.n	d858 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    d820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d822:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    d824:	2320      	movs	r3, #32
    d826:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    d828:	7d3b      	ldrb	r3, [r7, #20]
    d82a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d82e:	b2db      	uxtb	r3, r3
    d830:	2201      	movs	r2, #1
    d832:	4619      	mov	r1, r3
    d834:	68f8      	ldr	r0, [r7, #12]
    d836:	4b22      	ldr	r3, [pc, #136]	; (d8c0 <n25q256a_erase+0x1a8>)
    d838:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    d83a:	f107 0314 	add.w	r3, r7, #20
    d83e:	4619      	mov	r1, r3
    d840:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d842:	4b20      	ldr	r3, [pc, #128]	; (d8c4 <n25q256a_erase+0x1ac>)
    d844:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    d846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    d84c:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    d84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d850:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    d854:	63bb      	str	r3, [r7, #56]	; 0x38
    d856:	e003      	b.n	d860 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    d858:	f06f 030c 	mvn.w	r3, #12
    d85c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    d85e:	e011      	b.n	d884 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d860:	bf00      	nop
    d862:	7d3b      	ldrb	r3, [r7, #20]
    d864:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d868:	b2db      	uxtb	r3, r3
    d86a:	2270      	movs	r2, #112	; 0x70
    d86c:	4619      	mov	r1, r3
    d86e:	68f8      	ldr	r0, [r7, #12]
    d870:	4b15      	ldr	r3, [pc, #84]	; (d8c8 <n25q256a_erase+0x1b0>)
    d872:	4798      	blx	r3
    d874:	4603      	mov	r3, r0
    d876:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d87a:	2b00      	cmp	r3, #0
    d87c:	d0f1      	beq.n	d862 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    d87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d880:	2b00      	cmp	r3, #0
    d882:	d1a5      	bne.n	d7d0 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d884:	bf00      	nop
    d886:	7d3b      	ldrb	r3, [r7, #20]
    d888:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d88c:	b2db      	uxtb	r3, r3
    d88e:	2270      	movs	r2, #112	; 0x70
    d890:	4619      	mov	r1, r3
    d892:	68f8      	ldr	r0, [r7, #12]
    d894:	4b0c      	ldr	r3, [pc, #48]	; (d8c8 <n25q256a_erase+0x1b0>)
    d896:	4798      	blx	r3
    d898:	4603      	mov	r3, r0
    d89a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d89e:	2b00      	cmp	r3, #0
    d8a0:	d0f1      	beq.n	d886 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    d8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d8a4:	7b5b      	ldrb	r3, [r3, #13]
    d8a6:	2b00      	cmp	r3, #0
    d8a8:	d003      	beq.n	d8b2 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    d8aa:	2101      	movs	r1, #1
    d8ac:	68f8      	ldr	r0, [r7, #12]
    d8ae:	4b07      	ldr	r3, [pc, #28]	; (d8cc <n25q256a_erase+0x1b4>)
    d8b0:	4798      	blx	r3
	}
	return rc;
    d8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    d8b4:	4618      	mov	r0, r3
    d8b6:	3740      	adds	r7, #64	; 0x40
    d8b8:	46bd      	mov	sp, r7
    d8ba:	bd80      	pop	{r7, pc}
    d8bc:	001fffff 	.word	0x001fffff
    d8c0:	0000d379 	.word	0x0000d379
    d8c4:	00003bfd 	.word	0x00003bfd
    d8c8:	0000d23d 	.word	0x0000d23d
    d8cc:	0000d171 	.word	0x0000d171

0000d8d0 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    d8d0:	b590      	push	{r4, r7, lr}
    d8d2:	b085      	sub	sp, #20
    d8d4:	af00      	add	r7, sp, #0
    d8d6:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    d8d8:	687b      	ldr	r3, [r7, #4]
    d8da:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d8dc:	68fb      	ldr	r3, [r7, #12]
    d8de:	7b1b      	ldrb	r3, [r3, #12]
    d8e0:	2b00      	cmp	r3, #0
    d8e2:	d001      	beq.n	d8e8 <n25q256a_enable_xip+0x18>
    d8e4:	2306      	movs	r3, #6
    d8e6:	e000      	b.n	d8ea <n25q256a_enable_xip+0x1a>
    d8e8:	2300      	movs	r3, #0
    d8ea:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    d8ec:	68fb      	ldr	r3, [r7, #12]
    d8ee:	7b5b      	ldrb	r3, [r3, #13]
    d8f0:	2b00      	cmp	r3, #0
    d8f2:	d129      	bne.n	d948 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    d8f4:	7afb      	ldrb	r3, [r7, #11]
    d8f6:	2285      	movs	r2, #133	; 0x85
    d8f8:	4619      	mov	r1, r3
    d8fa:	6878      	ldr	r0, [r7, #4]
    d8fc:	4b15      	ldr	r3, [pc, #84]	; (d954 <n25q256a_enable_xip+0x84>)
    d8fe:	4798      	blx	r3
    d900:	4603      	mov	r3, r0
    d902:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    d904:	7abb      	ldrb	r3, [r7, #10]
    d906:	f003 0308 	and.w	r3, r3, #8
    d90a:	2b00      	cmp	r3, #0
    d90c:	d015      	beq.n	d93a <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    d90e:	7abb      	ldrb	r3, [r7, #10]
    d910:	f023 0308 	bic.w	r3, r3, #8
    d914:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    d916:	7abb      	ldrb	r3, [r7, #10]
    d918:	7af9      	ldrb	r1, [r7, #11]
    d91a:	2281      	movs	r2, #129	; 0x81
    d91c:	6878      	ldr	r0, [r7, #4]
    d91e:	4c0e      	ldr	r4, [pc, #56]	; (d958 <n25q256a_enable_xip+0x88>)
    d920:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    d922:	bf00      	nop
    d924:	7afb      	ldrb	r3, [r7, #11]
    d926:	2270      	movs	r2, #112	; 0x70
    d928:	4619      	mov	r1, r3
    d92a:	6878      	ldr	r0, [r7, #4]
    d92c:	4b09      	ldr	r3, [pc, #36]	; (d954 <n25q256a_enable_xip+0x84>)
    d92e:	4798      	blx	r3
    d930:	4603      	mov	r3, r0
    d932:	f003 0380 	and.w	r3, r3, #128	; 0x80
    d936:	2b00      	cmp	r3, #0
    d938:	d0f4      	beq.n	d924 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    d93a:	68fb      	ldr	r3, [r7, #12]
    d93c:	2201      	movs	r2, #1
    d93e:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    d940:	2101      	movs	r1, #1
    d942:	6878      	ldr	r0, [r7, #4]
    d944:	4b05      	ldr	r3, [pc, #20]	; (d95c <n25q256a_enable_xip+0x8c>)
    d946:	4798      	blx	r3
	}
	return ERR_NONE;
    d948:	2300      	movs	r3, #0
}
    d94a:	4618      	mov	r0, r3
    d94c:	3714      	adds	r7, #20
    d94e:	46bd      	mov	sp, r7
    d950:	bd90      	pop	{r4, r7, pc}
    d952:	bf00      	nop
    d954:	0000d23d 	.word	0x0000d23d
    d958:	0000d2d9 	.word	0x0000d2d9
    d95c:	0000d171 	.word	0x0000d171

0000d960 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    d960:	b580      	push	{r7, lr}
    d962:	b086      	sub	sp, #24
    d964:	af00      	add	r7, sp, #0
    d966:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    d968:	687b      	ldr	r3, [r7, #4]
    d96a:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    d96c:	687b      	ldr	r3, [r7, #4]
    d96e:	681b      	ldr	r3, [r3, #0]
    d970:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    d972:	697b      	ldr	r3, [r7, #20]
    d974:	7b1b      	ldrb	r3, [r3, #12]
    d976:	2b00      	cmp	r3, #0
    d978:	d001      	beq.n	d97e <n25q256a_disable_xip+0x1e>
    d97a:	2306      	movs	r3, #6
    d97c:	e000      	b.n	d980 <n25q256a_disable_xip+0x20>
    d97e:	2300      	movs	r3, #0
    d980:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    d982:	2100      	movs	r1, #0
    d984:	6878      	ldr	r0, [r7, #4]
    d986:	4b15      	ldr	r3, [pc, #84]	; (d9dc <n25q256a_disable_xip+0x7c>)
    d988:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    d98a:	7bfb      	ldrb	r3, [r7, #15]
    d98c:	2285      	movs	r2, #133	; 0x85
    d98e:	4619      	mov	r1, r3
    d990:	6878      	ldr	r0, [r7, #4]
    d992:	4b13      	ldr	r3, [pc, #76]	; (d9e0 <n25q256a_disable_xip+0x80>)
    d994:	4798      	blx	r3
    d996:	4603      	mov	r3, r0
    d998:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    d99a:	7bbb      	ldrb	r3, [r7, #14]
    d99c:	f003 0308 	and.w	r3, r3, #8
    d9a0:	2b00      	cmp	r3, #0
    d9a2:	d113      	bne.n	d9cc <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    d9a4:	697b      	ldr	r3, [r7, #20]
    d9a6:	689b      	ldr	r3, [r3, #8]
    d9a8:	2b00      	cmp	r3, #0
    d9aa:	d00f      	beq.n	d9cc <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    d9ac:	693b      	ldr	r3, [r7, #16]
    d9ae:	681b      	ldr	r3, [r3, #0]
    d9b0:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    d9b2:	6938      	ldr	r0, [r7, #16]
    d9b4:	4b0b      	ldr	r3, [pc, #44]	; (d9e4 <n25q256a_disable_xip+0x84>)
    d9b6:	4798      	blx	r3
			n25q->pin_exit_xip();
    d9b8:	697b      	ldr	r3, [r7, #20]
    d9ba:	689b      	ldr	r3, [r3, #8]
    d9bc:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    d9be:	68b9      	ldr	r1, [r7, #8]
    d9c0:	6938      	ldr	r0, [r7, #16]
    d9c2:	4b09      	ldr	r3, [pc, #36]	; (d9e8 <n25q256a_disable_xip+0x88>)
    d9c4:	4798      	blx	r3
			qspi_sync_enable(descr);
    d9c6:	6938      	ldr	r0, [r7, #16]
    d9c8:	4b08      	ldr	r3, [pc, #32]	; (d9ec <n25q256a_disable_xip+0x8c>)
    d9ca:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    d9cc:	697b      	ldr	r3, [r7, #20]
    d9ce:	2200      	movs	r2, #0
    d9d0:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    d9d2:	2300      	movs	r3, #0
}
    d9d4:	4618      	mov	r0, r3
    d9d6:	3718      	adds	r7, #24
    d9d8:	46bd      	mov	sp, r7
    d9da:	bd80      	pop	{r7, pc}
    d9dc:	0000d171 	.word	0x0000d171
    d9e0:	0000d23d 	.word	0x0000d23d
    d9e4:	00003bc1 	.word	0x00003bc1
    d9e8:	00003b39 	.word	0x00003b39
    d9ec:	00003b85 	.word	0x00003b85

0000d9f0 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    d9f0:	b480      	push	{r7}
    d9f2:	b085      	sub	sp, #20
    d9f4:	af00      	add	r7, sp, #0
    d9f6:	60f8      	str	r0, [r7, #12]
    d9f8:	60b9      	str	r1, [r7, #8]
    d9fa:	607a      	str	r2, [r7, #4]
	me->io        = io;
    d9fc:	68fb      	ldr	r3, [r7, #12]
    d9fe:	68ba      	ldr	r2, [r7, #8]
    da00:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    da02:	68fb      	ldr	r3, [r7, #12]
    da04:	687a      	ldr	r2, [r7, #4]
    da06:	605a      	str	r2, [r3, #4]

	return me;
    da08:	68fb      	ldr	r3, [r7, #12]
}
    da0a:	4618      	mov	r0, r3
    da0c:	3714      	adds	r7, #20
    da0e:	46bd      	mov	sp, r7
    da10:	f85d 7b04 	ldr.w	r7, [sp], #4
    da14:	4770      	bx	lr

0000da16 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    da16:	b480      	push	{r7}
    da18:	b083      	sub	sp, #12
    da1a:	af00      	add	r7, sp, #0
    da1c:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    da1e:	687b      	ldr	r3, [r7, #4]
    da20:	781b      	ldrb	r3, [r3, #0]
    da22:	b29a      	uxth	r2, r3
    da24:	687b      	ldr	r3, [r7, #4]
    da26:	3301      	adds	r3, #1
    da28:	781b      	ldrb	r3, [r3, #0]
    da2a:	b29b      	uxth	r3, r3
    da2c:	021b      	lsls	r3, r3, #8
    da2e:	b29b      	uxth	r3, r3
    da30:	4413      	add	r3, r2
    da32:	b29b      	uxth	r3, r3
}
    da34:	4618      	mov	r0, r3
    da36:	370c      	adds	r7, #12
    da38:	46bd      	mov	sp, r7
    da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    da3e:	4770      	bx	lr

0000da40 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    da40:	b480      	push	{r7}
    da42:	b083      	sub	sp, #12
    da44:	af00      	add	r7, sp, #0
    da46:	6078      	str	r0, [r7, #4]
	return desc[0];
    da48:	687b      	ldr	r3, [r7, #4]
    da4a:	781b      	ldrb	r3, [r3, #0]
}
    da4c:	4618      	mov	r0, r3
    da4e:	370c      	adds	r7, #12
    da50:	46bd      	mov	sp, r7
    da52:	f85d 7b04 	ldr.w	r7, [sp], #4
    da56:	4770      	bx	lr

0000da58 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    da58:	b580      	push	{r7, lr}
    da5a:	b082      	sub	sp, #8
    da5c:	af00      	add	r7, sp, #0
    da5e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    da60:	6878      	ldr	r0, [r7, #4]
    da62:	4b05      	ldr	r3, [pc, #20]	; (da78 <usb_desc_next+0x20>)
    da64:	4798      	blx	r3
    da66:	4603      	mov	r3, r0
    da68:	461a      	mov	r2, r3
    da6a:	687b      	ldr	r3, [r7, #4]
    da6c:	4413      	add	r3, r2
}
    da6e:	4618      	mov	r0, r3
    da70:	3708      	adds	r7, #8
    da72:	46bd      	mov	sp, r7
    da74:	bd80      	pop	{r7, pc}
    da76:	bf00      	nop
    da78:	0000da41 	.word	0x0000da41

0000da7c <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    da7c:	b580      	push	{r7, lr}
    da7e:	b08c      	sub	sp, #48	; 0x30
    da80:	af00      	add	r7, sp, #0
    da82:	6078      	str	r0, [r7, #4]
    da84:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    da86:	687b      	ldr	r3, [r7, #4]
    da88:	689b      	ldr	r3, [r3, #8]
    da8a:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    da8c:	683b      	ldr	r3, [r7, #0]
    da8e:	681b      	ldr	r3, [r3, #0]
    da90:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    da92:	2300      	movs	r3, #0
    da94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    da98:	e08f      	b.n	dbba <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    da9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    da9c:	2b00      	cmp	r3, #0
    da9e:	d102      	bne.n	daa6 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    daa0:	f06f 0309 	mvn.w	r3, #9
    daa4:	e092      	b.n	dbcc <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    daa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    daa8:	789b      	ldrb	r3, [r3, #2]
    daaa:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    daac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    daae:	795b      	ldrb	r3, [r3, #5]
    dab0:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    dab2:	7c7b      	ldrb	r3, [r7, #17]
    dab4:	2b02      	cmp	r3, #2
    dab6:	d002      	beq.n	dabe <cdcdf_acm_enable+0x42>
    dab8:	7c7b      	ldrb	r3, [r7, #17]
    daba:	2b0a      	cmp	r3, #10
    dabc:	d121      	bne.n	db02 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    dabe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    dac2:	6a3a      	ldr	r2, [r7, #32]
    dac4:	5cd2      	ldrb	r2, [r2, r3]
    dac6:	7bbb      	ldrb	r3, [r7, #14]
    dac8:	429a      	cmp	r2, r3
    daca:	d102      	bne.n	dad2 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    dacc:	f06f 0311 	mvn.w	r3, #17
    dad0:	e07c      	b.n	dbcc <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    dad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    dad6:	6a3a      	ldr	r2, [r7, #32]
    dad8:	5cd3      	ldrb	r3, [r2, r3]
    dada:	2bff      	cmp	r3, #255	; 0xff
    dadc:	d002      	beq.n	dae4 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    dade:	f06f 031b 	mvn.w	r3, #27
    dae2:	e073      	b.n	dbcc <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    dae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    dae8:	7bb9      	ldrb	r1, [r7, #14]
    daea:	6a3a      	ldr	r2, [r7, #32]
    daec:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    daee:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    daf0:	683b      	ldr	r3, [r7, #0]
    daf2:	685b      	ldr	r3, [r3, #4]
    daf4:	2205      	movs	r2, #5
    daf6:	4619      	mov	r1, r3
    daf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    dafa:	4b36      	ldr	r3, [pc, #216]	; (dbd4 <cdcdf_acm_enable+0x158>)
    dafc:	4798      	blx	r3
    dafe:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    db00:	e047      	b.n	db92 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    db02:	f06f 0309 	mvn.w	r3, #9
    db06:	e061      	b.n	dbcc <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    db08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    db0a:	789b      	ldrb	r3, [r3, #2]
    db0c:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    db0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    db10:	78db      	ldrb	r3, [r3, #3]
    db12:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    db14:	6abb      	ldr	r3, [r7, #40]	; 0x28
    db16:	3304      	adds	r3, #4
    db18:	4618      	mov	r0, r3
    db1a:	4b2f      	ldr	r3, [pc, #188]	; (dbd8 <cdcdf_acm_enable+0x15c>)
    db1c:	4798      	blx	r3
    db1e:	4603      	mov	r3, r0
    db20:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    db22:	7ebb      	ldrb	r3, [r7, #26]
    db24:	7ef9      	ldrb	r1, [r7, #27]
    db26:	8bba      	ldrh	r2, [r7, #28]
    db28:	4618      	mov	r0, r3
    db2a:	4b2c      	ldr	r3, [pc, #176]	; (dbdc <cdcdf_acm_enable+0x160>)
    db2c:	4798      	blx	r3
    db2e:	4603      	mov	r3, r0
    db30:	2b00      	cmp	r3, #0
    db32:	d002      	beq.n	db3a <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    db34:	f06f 0313 	mvn.w	r3, #19
    db38:	e048      	b.n	dbcc <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    db3a:	7ebb      	ldrb	r3, [r7, #26]
    db3c:	b25b      	sxtb	r3, r3
    db3e:	2b00      	cmp	r3, #0
    db40:	da0f      	bge.n	db62 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    db42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    db46:	7eb9      	ldrb	r1, [r7, #26]
    db48:	6a3a      	ldr	r2, [r7, #32]
    db4a:	4413      	add	r3, r2
    db4c:	460a      	mov	r2, r1
    db4e:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    db50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    db54:	6a3a      	ldr	r2, [r7, #32]
    db56:	4413      	add	r3, r2
    db58:	789b      	ldrb	r3, [r3, #2]
    db5a:	4618      	mov	r0, r3
    db5c:	4b20      	ldr	r3, [pc, #128]	; (dbe0 <cdcdf_acm_enable+0x164>)
    db5e:	4798      	blx	r3
    db60:	e007      	b.n	db72 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    db62:	7eba      	ldrb	r2, [r7, #26]
    db64:	6a3b      	ldr	r3, [r7, #32]
    db66:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    db68:	6a3b      	ldr	r3, [r7, #32]
    db6a:	791b      	ldrb	r3, [r3, #4]
    db6c:	4618      	mov	r0, r3
    db6e:	4b1c      	ldr	r3, [pc, #112]	; (dbe0 <cdcdf_acm_enable+0x164>)
    db70:	4798      	blx	r3
			}
			desc->sod = ep;
    db72:	683b      	ldr	r3, [r7, #0]
    db74:	6aba      	ldr	r2, [r7, #40]	; 0x28
    db76:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    db78:	683b      	ldr	r3, [r7, #0]
    db7a:	681b      	ldr	r3, [r3, #0]
    db7c:	4618      	mov	r0, r3
    db7e:	4b19      	ldr	r3, [pc, #100]	; (dbe4 <cdcdf_acm_enable+0x168>)
    db80:	4798      	blx	r3
    db82:	4602      	mov	r2, r0
    db84:	683b      	ldr	r3, [r7, #0]
    db86:	685b      	ldr	r3, [r3, #4]
    db88:	4619      	mov	r1, r3
    db8a:	4610      	mov	r0, r2
    db8c:	4b16      	ldr	r3, [pc, #88]	; (dbe8 <cdcdf_acm_enable+0x16c>)
    db8e:	4798      	blx	r3
    db90:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    db92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    db94:	2b00      	cmp	r3, #0
    db96:	d1b7      	bne.n	db08 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    db98:	683b      	ldr	r3, [r7, #0]
    db9a:	681b      	ldr	r3, [r3, #0]
    db9c:	4618      	mov	r0, r3
    db9e:	4b11      	ldr	r3, [pc, #68]	; (dbe4 <cdcdf_acm_enable+0x168>)
    dba0:	4798      	blx	r3
    dba2:	683b      	ldr	r3, [r7, #0]
    dba4:	685b      	ldr	r3, [r3, #4]
    dba6:	2204      	movs	r2, #4
    dba8:	4619      	mov	r1, r3
    dbaa:	4b0a      	ldr	r3, [pc, #40]	; (dbd4 <cdcdf_acm_enable+0x158>)
    dbac:	4798      	blx	r3
    dbae:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    dbb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    dbb4:	3301      	adds	r3, #1
    dbb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    dbba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    dbbe:	2b01      	cmp	r3, #1
    dbc0:	f67f af6b 	bls.w	da9a <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    dbc4:	4b09      	ldr	r3, [pc, #36]	; (dbec <cdcdf_acm_enable+0x170>)
    dbc6:	2201      	movs	r2, #1
    dbc8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    dbca:	2300      	movs	r3, #0
}
    dbcc:	4618      	mov	r0, r3
    dbce:	3730      	adds	r7, #48	; 0x30
    dbd0:	46bd      	mov	sp, r7
    dbd2:	bd80      	pop	{r7, pc}
    dbd4:	0000ee3d 	.word	0x0000ee3d
    dbd8:	0000da17 	.word	0x0000da17
    dbdc:	00004871 	.word	0x00004871
    dbe0:	0000495d 	.word	0x0000495d
    dbe4:	0000da59 	.word	0x0000da59
    dbe8:	0000ee99 	.word	0x0000ee99
    dbec:	200027b0 	.word	0x200027b0

0000dbf0 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    dbf0:	b580      	push	{r7, lr}
    dbf2:	b088      	sub	sp, #32
    dbf4:	af00      	add	r7, sp, #0
    dbf6:	6078      	str	r0, [r7, #4]
    dbf8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    dbfa:	687b      	ldr	r3, [r7, #4]
    dbfc:	689b      	ldr	r3, [r3, #8]
    dbfe:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    dc00:	683b      	ldr	r3, [r7, #0]
    dc02:	2b00      	cmp	r3, #0
    dc04:	d00c      	beq.n	dc20 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    dc06:	683b      	ldr	r3, [r7, #0]
    dc08:	681b      	ldr	r3, [r3, #0]
    dc0a:	795b      	ldrb	r3, [r3, #5]
    dc0c:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    dc0e:	7c7b      	ldrb	r3, [r7, #17]
    dc10:	2b02      	cmp	r3, #2
    dc12:	d005      	beq.n	dc20 <cdcdf_acm_disable+0x30>
    dc14:	7c7b      	ldrb	r3, [r7, #17]
    dc16:	2b0a      	cmp	r3, #10
    dc18:	d002      	beq.n	dc20 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    dc1a:	f06f 0309 	mvn.w	r3, #9
    dc1e:	e035      	b.n	dc8c <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    dc20:	2300      	movs	r3, #0
    dc22:	77fb      	strb	r3, [r7, #31]
    dc24:	e01f      	b.n	dc66 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    dc26:	7ffb      	ldrb	r3, [r7, #31]
    dc28:	69ba      	ldr	r2, [r7, #24]
    dc2a:	5cd3      	ldrb	r3, [r2, r3]
    dc2c:	2bff      	cmp	r3, #255	; 0xff
    dc2e:	d016      	beq.n	dc5e <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    dc30:	7ffb      	ldrb	r3, [r7, #31]
    dc32:	69ba      	ldr	r2, [r7, #24]
    dc34:	21ff      	movs	r1, #255	; 0xff
    dc36:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    dc38:	7ffb      	ldrb	r3, [r7, #31]
    dc3a:	69ba      	ldr	r2, [r7, #24]
    dc3c:	4413      	add	r3, r2
    dc3e:	789b      	ldrb	r3, [r3, #2]
    dc40:	2bff      	cmp	r3, #255	; 0xff
    dc42:	d00d      	beq.n	dc60 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    dc44:	7ffb      	ldrb	r3, [r7, #31]
    dc46:	69ba      	ldr	r2, [r7, #24]
    dc48:	4413      	add	r3, r2
    dc4a:	789b      	ldrb	r3, [r3, #2]
    dc4c:	4618      	mov	r0, r3
    dc4e:	4b11      	ldr	r3, [pc, #68]	; (dc94 <cdcdf_acm_disable+0xa4>)
    dc50:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    dc52:	7ffb      	ldrb	r3, [r7, #31]
    dc54:	69ba      	ldr	r2, [r7, #24]
    dc56:	4413      	add	r3, r2
    dc58:	22ff      	movs	r2, #255	; 0xff
    dc5a:	709a      	strb	r2, [r3, #2]
    dc5c:	e000      	b.n	dc60 <cdcdf_acm_disable+0x70>
			continue;
    dc5e:	bf00      	nop
	for (i = 0; i < 2; i++) {
    dc60:	7ffb      	ldrb	r3, [r7, #31]
    dc62:	3301      	adds	r3, #1
    dc64:	77fb      	strb	r3, [r7, #31]
    dc66:	7ffb      	ldrb	r3, [r7, #31]
    dc68:	2b01      	cmp	r3, #1
    dc6a:	d9dc      	bls.n	dc26 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    dc6c:	69bb      	ldr	r3, [r7, #24]
    dc6e:	791b      	ldrb	r3, [r3, #4]
    dc70:	2bff      	cmp	r3, #255	; 0xff
    dc72:	d007      	beq.n	dc84 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    dc74:	69bb      	ldr	r3, [r7, #24]
    dc76:	791b      	ldrb	r3, [r3, #4]
    dc78:	4618      	mov	r0, r3
    dc7a:	4b06      	ldr	r3, [pc, #24]	; (dc94 <cdcdf_acm_disable+0xa4>)
    dc7c:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    dc7e:	69bb      	ldr	r3, [r7, #24]
    dc80:	22ff      	movs	r2, #255	; 0xff
    dc82:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    dc84:	4b04      	ldr	r3, [pc, #16]	; (dc98 <cdcdf_acm_disable+0xa8>)
    dc86:	2200      	movs	r2, #0
    dc88:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    dc8a:	2300      	movs	r3, #0
}
    dc8c:	4618      	mov	r0, r3
    dc8e:	3720      	adds	r7, #32
    dc90:	46bd      	mov	sp, r7
    dc92:	bd80      	pop	{r7, pc}
    dc94:	0000490d 	.word	0x0000490d
    dc98:	200027b0 	.word	0x200027b0

0000dc9c <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    dc9c:	b580      	push	{r7, lr}
    dc9e:	b084      	sub	sp, #16
    dca0:	af00      	add	r7, sp, #0
    dca2:	60f8      	str	r0, [r7, #12]
    dca4:	460b      	mov	r3, r1
    dca6:	607a      	str	r2, [r7, #4]
    dca8:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    dcaa:	7afb      	ldrb	r3, [r7, #11]
    dcac:	2b01      	cmp	r3, #1
    dcae:	d009      	beq.n	dcc4 <cdcdf_acm_ctrl+0x28>
    dcb0:	2b02      	cmp	r3, #2
    dcb2:	d00d      	beq.n	dcd0 <cdcdf_acm_ctrl+0x34>
    dcb4:	2b00      	cmp	r3, #0
    dcb6:	d10e      	bne.n	dcd6 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    dcb8:	6879      	ldr	r1, [r7, #4]
    dcba:	68f8      	ldr	r0, [r7, #12]
    dcbc:	4b09      	ldr	r3, [pc, #36]	; (dce4 <cdcdf_acm_ctrl+0x48>)
    dcbe:	4798      	blx	r3
    dcc0:	4603      	mov	r3, r0
    dcc2:	e00a      	b.n	dcda <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    dcc4:	6879      	ldr	r1, [r7, #4]
    dcc6:	68f8      	ldr	r0, [r7, #12]
    dcc8:	4b07      	ldr	r3, [pc, #28]	; (dce8 <cdcdf_acm_ctrl+0x4c>)
    dcca:	4798      	blx	r3
    dccc:	4603      	mov	r3, r0
    dcce:	e004      	b.n	dcda <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    dcd0:	f06f 031a 	mvn.w	r3, #26
    dcd4:	e001      	b.n	dcda <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    dcd6:	f06f 030c 	mvn.w	r3, #12
	}
}
    dcda:	4618      	mov	r0, r3
    dcdc:	3710      	adds	r7, #16
    dcde:	46bd      	mov	sp, r7
    dce0:	bd80      	pop	{r7, pc}
    dce2:	bf00      	nop
    dce4:	0000da7d 	.word	0x0000da7d
    dce8:	0000dbf1 	.word	0x0000dbf1

0000dcec <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    dcec:	b590      	push	{r4, r7, lr}
    dcee:	b087      	sub	sp, #28
    dcf0:	af00      	add	r7, sp, #0
    dcf2:	4603      	mov	r3, r0
    dcf4:	6039      	str	r1, [r7, #0]
    dcf6:	71fb      	strb	r3, [r7, #7]
    dcf8:	4613      	mov	r3, r2
    dcfa:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    dcfc:	683b      	ldr	r3, [r7, #0]
    dcfe:	799a      	ldrb	r2, [r3, #6]
    dd00:	79db      	ldrb	r3, [r3, #7]
    dd02:	021b      	lsls	r3, r3, #8
    dd04:	4313      	orrs	r3, r2
    dd06:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    dd08:	4b2b      	ldr	r3, [pc, #172]	; (ddb8 <cdcdf_acm_set_req+0xcc>)
    dd0a:	4798      	blx	r3
    dd0c:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    dd0e:	683b      	ldr	r3, [r7, #0]
    dd10:	785b      	ldrb	r3, [r3, #1]
    dd12:	2b20      	cmp	r3, #32
    dd14:	d002      	beq.n	dd1c <cdcdf_acm_set_req+0x30>
    dd16:	2b22      	cmp	r3, #34	; 0x22
    dd18:	d034      	beq.n	dd84 <cdcdf_acm_set_req+0x98>
    dd1a:	e046      	b.n	ddaa <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    dd1c:	8afb      	ldrh	r3, [r7, #22]
    dd1e:	2b07      	cmp	r3, #7
    dd20:	d002      	beq.n	dd28 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    dd22:	f04f 33ff 	mov.w	r3, #4294967295
    dd26:	e042      	b.n	ddae <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    dd28:	79bb      	ldrb	r3, [r7, #6]
    dd2a:	2b00      	cmp	r3, #0
    dd2c:	d107      	bne.n	dd3e <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    dd2e:	8afa      	ldrh	r2, [r7, #22]
    dd30:	79f8      	ldrb	r0, [r7, #7]
    dd32:	2300      	movs	r3, #0
    dd34:	6939      	ldr	r1, [r7, #16]
    dd36:	4c21      	ldr	r4, [pc, #132]	; (ddbc <cdcdf_acm_set_req+0xd0>)
    dd38:	47a0      	blx	r4
    dd3a:	4603      	mov	r3, r0
    dd3c:	e037      	b.n	ddae <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    dd3e:	693a      	ldr	r2, [r7, #16]
    dd40:	f107 0308 	add.w	r3, r7, #8
    dd44:	6810      	ldr	r0, [r2, #0]
    dd46:	6018      	str	r0, [r3, #0]
    dd48:	8891      	ldrh	r1, [r2, #4]
    dd4a:	7992      	ldrb	r2, [r2, #6]
    dd4c:	8099      	strh	r1, [r3, #4]
    dd4e:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    dd50:	4b1b      	ldr	r3, [pc, #108]	; (ddc0 <cdcdf_acm_set_req+0xd4>)
    dd52:	681b      	ldr	r3, [r3, #0]
    dd54:	2b00      	cmp	r3, #0
    dd56:	d008      	beq.n	dd6a <cdcdf_acm_set_req+0x7e>
    dd58:	4b19      	ldr	r3, [pc, #100]	; (ddc0 <cdcdf_acm_set_req+0xd4>)
    dd5a:	681b      	ldr	r3, [r3, #0]
    dd5c:	f107 0208 	add.w	r2, r7, #8
    dd60:	4610      	mov	r0, r2
    dd62:	4798      	blx	r3
    dd64:	4603      	mov	r3, r0
    dd66:	2b00      	cmp	r3, #0
    dd68:	d00a      	beq.n	dd80 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    dd6a:	4b16      	ldr	r3, [pc, #88]	; (ddc4 <cdcdf_acm_set_req+0xd8>)
    dd6c:	f107 0208 	add.w	r2, r7, #8
    dd70:	e892 0003 	ldmia.w	r2, {r0, r1}
    dd74:	6018      	str	r0, [r3, #0]
    dd76:	3304      	adds	r3, #4
    dd78:	8019      	strh	r1, [r3, #0]
    dd7a:	3302      	adds	r3, #2
    dd7c:	0c0a      	lsrs	r2, r1, #16
    dd7e:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    dd80:	2300      	movs	r3, #0
    dd82:	e014      	b.n	ddae <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    dd84:	2300      	movs	r3, #0
    dd86:	2200      	movs	r2, #0
    dd88:	2100      	movs	r1, #0
    dd8a:	2000      	movs	r0, #0
    dd8c:	4c0b      	ldr	r4, [pc, #44]	; (ddbc <cdcdf_acm_set_req+0xd0>)
    dd8e:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    dd90:	4b0d      	ldr	r3, [pc, #52]	; (ddc8 <cdcdf_acm_set_req+0xdc>)
    dd92:	681b      	ldr	r3, [r3, #0]
    dd94:	2b00      	cmp	r3, #0
    dd96:	d006      	beq.n	dda6 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    dd98:	4b0b      	ldr	r3, [pc, #44]	; (ddc8 <cdcdf_acm_set_req+0xdc>)
    dd9a:	681b      	ldr	r3, [r3, #0]
    dd9c:	683a      	ldr	r2, [r7, #0]
    dd9e:	8852      	ldrh	r2, [r2, #2]
    dda0:	b292      	uxth	r2, r2
    dda2:	4610      	mov	r0, r2
    dda4:	4798      	blx	r3
		}
		return ERR_NONE;
    dda6:	2300      	movs	r3, #0
    dda8:	e001      	b.n	ddae <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    ddaa:	f06f 030c 	mvn.w	r3, #12
	}
}
    ddae:	4618      	mov	r0, r3
    ddb0:	371c      	adds	r7, #28
    ddb2:	46bd      	mov	sp, r7
    ddb4:	bd90      	pop	{r4, r7, pc}
    ddb6:	bf00      	nop
    ddb8:	0000ed39 	.word	0x0000ed39
    ddbc:	0000ebad 	.word	0x0000ebad
    ddc0:	200027c4 	.word	0x200027c4
    ddc4:	200027b8 	.word	0x200027b8
    ddc8:	200027c0 	.word	0x200027c0

0000ddcc <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ddcc:	b590      	push	{r4, r7, lr}
    ddce:	b085      	sub	sp, #20
    ddd0:	af00      	add	r7, sp, #0
    ddd2:	4603      	mov	r3, r0
    ddd4:	6039      	str	r1, [r7, #0]
    ddd6:	71fb      	strb	r3, [r7, #7]
    ddd8:	4613      	mov	r3, r2
    ddda:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    dddc:	683b      	ldr	r3, [r7, #0]
    ddde:	799a      	ldrb	r2, [r3, #6]
    dde0:	79db      	ldrb	r3, [r3, #7]
    dde2:	021b      	lsls	r3, r3, #8
    dde4:	4313      	orrs	r3, r2
    dde6:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    dde8:	79bb      	ldrb	r3, [r7, #6]
    ddea:	2b01      	cmp	r3, #1
    ddec:	d101      	bne.n	ddf2 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    ddee:	2300      	movs	r3, #0
    ddf0:	e013      	b.n	de1a <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    ddf2:	683b      	ldr	r3, [r7, #0]
    ddf4:	785b      	ldrb	r3, [r3, #1]
    ddf6:	2b21      	cmp	r3, #33	; 0x21
    ddf8:	d10d      	bne.n	de16 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    ddfa:	89fb      	ldrh	r3, [r7, #14]
    ddfc:	2b07      	cmp	r3, #7
    ddfe:	d002      	beq.n	de06 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    de00:	f04f 33ff 	mov.w	r3, #4294967295
    de04:	e009      	b.n	de1a <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    de06:	89fa      	ldrh	r2, [r7, #14]
    de08:	79f8      	ldrb	r0, [r7, #7]
    de0a:	2300      	movs	r3, #0
    de0c:	4905      	ldr	r1, [pc, #20]	; (de24 <cdcdf_acm_get_req+0x58>)
    de0e:	4c06      	ldr	r4, [pc, #24]	; (de28 <cdcdf_acm_get_req+0x5c>)
    de10:	47a0      	blx	r4
    de12:	4603      	mov	r3, r0
    de14:	e001      	b.n	de1a <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    de16:	f06f 030c 	mvn.w	r3, #12
	}
}
    de1a:	4618      	mov	r0, r3
    de1c:	3714      	adds	r7, #20
    de1e:	46bd      	mov	sp, r7
    de20:	bd90      	pop	{r4, r7, pc}
    de22:	bf00      	nop
    de24:	200027b8 	.word	0x200027b8
    de28:	0000ebad 	.word	0x0000ebad

0000de2c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    de2c:	b580      	push	{r7, lr}
    de2e:	b082      	sub	sp, #8
    de30:	af00      	add	r7, sp, #0
    de32:	4603      	mov	r3, r0
    de34:	6039      	str	r1, [r7, #0]
    de36:	71fb      	strb	r3, [r7, #7]
    de38:	4613      	mov	r3, r2
    de3a:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    de3c:	683b      	ldr	r3, [r7, #0]
    de3e:	781b      	ldrb	r3, [r3, #0]
    de40:	095b      	lsrs	r3, r3, #5
    de42:	b2db      	uxtb	r3, r3
    de44:	f003 0303 	and.w	r3, r3, #3
    de48:	2b01      	cmp	r3, #1
    de4a:	d002      	beq.n	de52 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    de4c:	f06f 0309 	mvn.w	r3, #9
    de50:	e026      	b.n	dea0 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    de52:	683b      	ldr	r3, [r7, #0]
    de54:	889b      	ldrh	r3, [r3, #4]
    de56:	b29a      	uxth	r2, r3
    de58:	4b13      	ldr	r3, [pc, #76]	; (dea8 <cdcdf_acm_req+0x7c>)
    de5a:	781b      	ldrb	r3, [r3, #0]
    de5c:	b29b      	uxth	r3, r3
    de5e:	429a      	cmp	r2, r3
    de60:	d007      	beq.n	de72 <cdcdf_acm_req+0x46>
    de62:	683b      	ldr	r3, [r7, #0]
    de64:	889b      	ldrh	r3, [r3, #4]
    de66:	b29a      	uxth	r2, r3
    de68:	4b0f      	ldr	r3, [pc, #60]	; (dea8 <cdcdf_acm_req+0x7c>)
    de6a:	785b      	ldrb	r3, [r3, #1]
    de6c:	b29b      	uxth	r3, r3
    de6e:	429a      	cmp	r2, r3
    de70:	d114      	bne.n	de9c <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    de72:	683b      	ldr	r3, [r7, #0]
    de74:	781b      	ldrb	r3, [r3, #0]
    de76:	b25b      	sxtb	r3, r3
    de78:	2b00      	cmp	r3, #0
    de7a:	da07      	bge.n	de8c <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    de7c:	79ba      	ldrb	r2, [r7, #6]
    de7e:	79fb      	ldrb	r3, [r7, #7]
    de80:	6839      	ldr	r1, [r7, #0]
    de82:	4618      	mov	r0, r3
    de84:	4b09      	ldr	r3, [pc, #36]	; (deac <cdcdf_acm_req+0x80>)
    de86:	4798      	blx	r3
    de88:	4603      	mov	r3, r0
    de8a:	e009      	b.n	dea0 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    de8c:	79ba      	ldrb	r2, [r7, #6]
    de8e:	79fb      	ldrb	r3, [r7, #7]
    de90:	6839      	ldr	r1, [r7, #0]
    de92:	4618      	mov	r0, r3
    de94:	4b06      	ldr	r3, [pc, #24]	; (deb0 <cdcdf_acm_req+0x84>)
    de96:	4798      	blx	r3
    de98:	4603      	mov	r3, r0
    de9a:	e001      	b.n	dea0 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    de9c:	f06f 0309 	mvn.w	r3, #9
	}
}
    dea0:	4618      	mov	r0, r3
    dea2:	3708      	adds	r7, #8
    dea4:	46bd      	mov	sp, r7
    dea6:	bd80      	pop	{r7, pc}
    dea8:	200027b0 	.word	0x200027b0
    deac:	0000ddcd 	.word	0x0000ddcd
    deb0:	0000dced 	.word	0x0000dced

0000deb4 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    deb4:	b580      	push	{r7, lr}
    deb6:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    deb8:	4b0b      	ldr	r3, [pc, #44]	; (dee8 <cdcdf_acm_init+0x34>)
    deba:	4798      	blx	r3
    debc:	4603      	mov	r3, r0
    debe:	2b01      	cmp	r3, #1
    dec0:	d902      	bls.n	dec8 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    dec2:	f06f 0310 	mvn.w	r3, #16
    dec6:	e00d      	b.n	dee4 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    dec8:	4b08      	ldr	r3, [pc, #32]	; (deec <cdcdf_acm_init+0x38>)
    deca:	4a09      	ldr	r2, [pc, #36]	; (def0 <cdcdf_acm_init+0x3c>)
    decc:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    dece:	4b07      	ldr	r3, [pc, #28]	; (deec <cdcdf_acm_init+0x38>)
    ded0:	4a08      	ldr	r2, [pc, #32]	; (def4 <cdcdf_acm_init+0x40>)
    ded2:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    ded4:	4805      	ldr	r0, [pc, #20]	; (deec <cdcdf_acm_init+0x38>)
    ded6:	4b08      	ldr	r3, [pc, #32]	; (def8 <cdcdf_acm_init+0x44>)
    ded8:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    deda:	4908      	ldr	r1, [pc, #32]	; (defc <cdcdf_acm_init+0x48>)
    dedc:	2001      	movs	r0, #1
    dede:	4b08      	ldr	r3, [pc, #32]	; (df00 <cdcdf_acm_init+0x4c>)
    dee0:	4798      	blx	r3
	return ERR_NONE;
    dee2:	2300      	movs	r3, #0
}
    dee4:	4618      	mov	r0, r3
    dee6:	bd80      	pop	{r7, pc}
    dee8:	0000ed51 	.word	0x0000ed51
    deec:	200027a4 	.word	0x200027a4
    def0:	0000dc9d 	.word	0x0000dc9d
    def4:	200027b0 	.word	0x200027b0
    def8:	0000ecb9 	.word	0x0000ecb9
    defc:	20000208 	.word	0x20000208
    df00:	0000ebe9 	.word	0x0000ebe9

0000df04 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    df04:	b590      	push	{r4, r7, lr}
    df06:	b083      	sub	sp, #12
    df08:	af00      	add	r7, sp, #0
    df0a:	6078      	str	r0, [r7, #4]
    df0c:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    df0e:	4b0b      	ldr	r3, [pc, #44]	; (df3c <cdcdf_acm_read+0x38>)
    df10:	4798      	blx	r3
    df12:	4603      	mov	r3, r0
    df14:	f083 0301 	eor.w	r3, r3, #1
    df18:	b2db      	uxtb	r3, r3
    df1a:	2b00      	cmp	r3, #0
    df1c:	d002      	beq.n	df24 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    df1e:	f06f 0310 	mvn.w	r3, #16
    df22:	e007      	b.n	df34 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    df24:	4b06      	ldr	r3, [pc, #24]	; (df40 <cdcdf_acm_read+0x3c>)
    df26:	7918      	ldrb	r0, [r3, #4]
    df28:	2300      	movs	r3, #0
    df2a:	683a      	ldr	r2, [r7, #0]
    df2c:	6879      	ldr	r1, [r7, #4]
    df2e:	4c05      	ldr	r4, [pc, #20]	; (df44 <cdcdf_acm_read+0x40>)
    df30:	47a0      	blx	r4
    df32:	4603      	mov	r3, r0
}
    df34:	4618      	mov	r0, r3
    df36:	370c      	adds	r7, #12
    df38:	46bd      	mov	sp, r7
    df3a:	bd90      	pop	{r4, r7, pc}
    df3c:	0000e029 	.word	0x0000e029
    df40:	200027b0 	.word	0x200027b0
    df44:	0000ebad 	.word	0x0000ebad

0000df48 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    df48:	b590      	push	{r4, r7, lr}
    df4a:	b083      	sub	sp, #12
    df4c:	af00      	add	r7, sp, #0
    df4e:	6078      	str	r0, [r7, #4]
    df50:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    df52:	4b0b      	ldr	r3, [pc, #44]	; (df80 <cdcdf_acm_write+0x38>)
    df54:	4798      	blx	r3
    df56:	4603      	mov	r3, r0
    df58:	f083 0301 	eor.w	r3, r3, #1
    df5c:	b2db      	uxtb	r3, r3
    df5e:	2b00      	cmp	r3, #0
    df60:	d002      	beq.n	df68 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    df62:	f06f 0310 	mvn.w	r3, #16
    df66:	e007      	b.n	df78 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    df68:	4b06      	ldr	r3, [pc, #24]	; (df84 <cdcdf_acm_write+0x3c>)
    df6a:	78d8      	ldrb	r0, [r3, #3]
    df6c:	2301      	movs	r3, #1
    df6e:	683a      	ldr	r2, [r7, #0]
    df70:	6879      	ldr	r1, [r7, #4]
    df72:	4c05      	ldr	r4, [pc, #20]	; (df88 <cdcdf_acm_write+0x40>)
    df74:	47a0      	blx	r4
    df76:	4603      	mov	r3, r0
}
    df78:	4618      	mov	r0, r3
    df7a:	370c      	adds	r7, #12
    df7c:	46bd      	mov	sp, r7
    df7e:	bd90      	pop	{r4, r7, pc}
    df80:	0000e029 	.word	0x0000e029
    df84:	200027b0 	.word	0x200027b0
    df88:	0000ebad 	.word	0x0000ebad

0000df8c <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    df8c:	b580      	push	{r7, lr}
    df8e:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    df90:	4b05      	ldr	r3, [pc, #20]	; (dfa8 <cdcdf_acm_stop_xfer+0x1c>)
    df92:	78db      	ldrb	r3, [r3, #3]
    df94:	4618      	mov	r0, r3
    df96:	4b05      	ldr	r3, [pc, #20]	; (dfac <cdcdf_acm_stop_xfer+0x20>)
    df98:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    df9a:	4b03      	ldr	r3, [pc, #12]	; (dfa8 <cdcdf_acm_stop_xfer+0x1c>)
    df9c:	791b      	ldrb	r3, [r3, #4]
    df9e:	4618      	mov	r0, r3
    dfa0:	4b02      	ldr	r3, [pc, #8]	; (dfac <cdcdf_acm_stop_xfer+0x20>)
    dfa2:	4798      	blx	r3
}
    dfa4:	bf00      	nop
    dfa6:	bd80      	pop	{r7, pc}
    dfa8:	200027b0 	.word	0x200027b0
    dfac:	00004b35 	.word	0x00004b35

0000dfb0 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    dfb0:	b580      	push	{r7, lr}
    dfb2:	b082      	sub	sp, #8
    dfb4:	af00      	add	r7, sp, #0
    dfb6:	4603      	mov	r3, r0
    dfb8:	6039      	str	r1, [r7, #0]
    dfba:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    dfbc:	79fb      	ldrb	r3, [r7, #7]
    dfbe:	2b03      	cmp	r3, #3
    dfc0:	d822      	bhi.n	e008 <cdcdf_acm_register_callback+0x58>
    dfc2:	a201      	add	r2, pc, #4	; (adr r2, dfc8 <cdcdf_acm_register_callback+0x18>)
    dfc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    dfc8:	0000dfd9 	.word	0x0000dfd9
    dfcc:	0000dfe9 	.word	0x0000dfe9
    dfd0:	0000dff9 	.word	0x0000dff9
    dfd4:	0000e001 	.word	0x0000e001
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    dfd8:	4b0f      	ldr	r3, [pc, #60]	; (e018 <cdcdf_acm_register_callback+0x68>)
    dfda:	791b      	ldrb	r3, [r3, #4]
    dfdc:	683a      	ldr	r2, [r7, #0]
    dfde:	2102      	movs	r1, #2
    dfe0:	4618      	mov	r0, r3
    dfe2:	4b0e      	ldr	r3, [pc, #56]	; (e01c <cdcdf_acm_register_callback+0x6c>)
    dfe4:	4798      	blx	r3
		break;
    dfe6:	e012      	b.n	e00e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    dfe8:	4b0b      	ldr	r3, [pc, #44]	; (e018 <cdcdf_acm_register_callback+0x68>)
    dfea:	78db      	ldrb	r3, [r3, #3]
    dfec:	683a      	ldr	r2, [r7, #0]
    dfee:	2102      	movs	r1, #2
    dff0:	4618      	mov	r0, r3
    dff2:	4b0a      	ldr	r3, [pc, #40]	; (e01c <cdcdf_acm_register_callback+0x6c>)
    dff4:	4798      	blx	r3
		break;
    dff6:	e00a      	b.n	e00e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    dff8:	4a09      	ldr	r2, [pc, #36]	; (e020 <cdcdf_acm_register_callback+0x70>)
    dffa:	683b      	ldr	r3, [r7, #0]
    dffc:	6013      	str	r3, [r2, #0]
		break;
    dffe:	e006      	b.n	e00e <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    e000:	4a08      	ldr	r2, [pc, #32]	; (e024 <cdcdf_acm_register_callback+0x74>)
    e002:	683b      	ldr	r3, [r7, #0]
    e004:	6013      	str	r3, [r2, #0]
		break;
    e006:	e002      	b.n	e00e <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    e008:	f06f 030c 	mvn.w	r3, #12
    e00c:	e000      	b.n	e010 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    e00e:	2300      	movs	r3, #0
}
    e010:	4618      	mov	r0, r3
    e012:	3708      	adds	r7, #8
    e014:	46bd      	mov	sp, r7
    e016:	bd80      	pop	{r7, pc}
    e018:	200027b0 	.word	0x200027b0
    e01c:	00004c61 	.word	0x00004c61
    e020:	200027c4 	.word	0x200027c4
    e024:	200027c0 	.word	0x200027c0

0000e028 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    e028:	b480      	push	{r7}
    e02a:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    e02c:	4b03      	ldr	r3, [pc, #12]	; (e03c <cdcdf_acm_is_enabled+0x14>)
    e02e:	795b      	ldrb	r3, [r3, #5]
}
    e030:	4618      	mov	r0, r3
    e032:	46bd      	mov	sp, r7
    e034:	f85d 7b04 	ldr.w	r7, [sp], #4
    e038:	4770      	bx	lr
    e03a:	bf00      	nop
    e03c:	200027b0 	.word	0x200027b0

0000e040 <usb_get_u16>:
{
    e040:	b480      	push	{r7}
    e042:	b083      	sub	sp, #12
    e044:	af00      	add	r7, sp, #0
    e046:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    e048:	687b      	ldr	r3, [r7, #4]
    e04a:	781b      	ldrb	r3, [r3, #0]
    e04c:	b29a      	uxth	r2, r3
    e04e:	687b      	ldr	r3, [r7, #4]
    e050:	3301      	adds	r3, #1
    e052:	781b      	ldrb	r3, [r3, #0]
    e054:	b29b      	uxth	r3, r3
    e056:	021b      	lsls	r3, r3, #8
    e058:	b29b      	uxth	r3, r3
    e05a:	4413      	add	r3, r2
    e05c:	b29b      	uxth	r3, r3
}
    e05e:	4618      	mov	r0, r3
    e060:	370c      	adds	r7, #12
    e062:	46bd      	mov	sp, r7
    e064:	f85d 7b04 	ldr.w	r7, [sp], #4
    e068:	4770      	bx	lr

0000e06a <usb_desc_len>:
{
    e06a:	b480      	push	{r7}
    e06c:	b083      	sub	sp, #12
    e06e:	af00      	add	r7, sp, #0
    e070:	6078      	str	r0, [r7, #4]
	return desc[0];
    e072:	687b      	ldr	r3, [r7, #4]
    e074:	781b      	ldrb	r3, [r3, #0]
}
    e076:	4618      	mov	r0, r3
    e078:	370c      	adds	r7, #12
    e07a:	46bd      	mov	sp, r7
    e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e080:	4770      	bx	lr
	...

0000e084 <usb_desc_next>:
{
    e084:	b580      	push	{r7, lr}
    e086:	b082      	sub	sp, #8
    e088:	af00      	add	r7, sp, #0
    e08a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    e08c:	6878      	ldr	r0, [r7, #4]
    e08e:	4b05      	ldr	r3, [pc, #20]	; (e0a4 <usb_desc_next+0x20>)
    e090:	4798      	blx	r3
    e092:	4603      	mov	r3, r0
    e094:	461a      	mov	r2, r3
    e096:	687b      	ldr	r3, [r7, #4]
    e098:	4413      	add	r3, r2
}
    e09a:	4618      	mov	r0, r3
    e09c:	3708      	adds	r7, #8
    e09e:	46bd      	mov	sp, r7
    e0a0:	bd80      	pop	{r7, pc}
    e0a2:	bf00      	nop
    e0a4:	0000e06b 	.word	0x0000e06b

0000e0a8 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    e0a8:	b580      	push	{r7, lr}
    e0aa:	b082      	sub	sp, #8
    e0ac:	af00      	add	r7, sp, #0
    e0ae:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    e0b0:	687b      	ldr	r3, [r7, #4]
    e0b2:	3302      	adds	r3, #2
    e0b4:	4618      	mov	r0, r3
    e0b6:	4b03      	ldr	r3, [pc, #12]	; (e0c4 <usb_cfg_desc_total_len+0x1c>)
    e0b8:	4798      	blx	r3
    e0ba:	4603      	mov	r3, r0
}
    e0bc:	4618      	mov	r0, r3
    e0be:	3708      	adds	r7, #8
    e0c0:	46bd      	mov	sp, r7
    e0c2:	bd80      	pop	{r7, pc}
    e0c4:	0000e041 	.word	0x0000e041

0000e0c8 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    e0c8:	b590      	push	{r4, r7, lr}
    e0ca:	b085      	sub	sp, #20
    e0cc:	af00      	add	r7, sp, #0
    e0ce:	4603      	mov	r3, r0
    e0d0:	6039      	str	r1, [r7, #0]
    e0d2:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    e0d4:	2300      	movs	r3, #0
    e0d6:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    e0d8:	683b      	ldr	r3, [r7, #0]
    e0da:	799a      	ldrb	r2, [r3, #6]
    e0dc:	79db      	ldrb	r3, [r3, #7]
    e0de:	021b      	lsls	r3, r3, #8
    e0e0:	4313      	orrs	r3, r2
    e0e2:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    e0e4:	897b      	ldrh	r3, [r7, #10]
    e0e6:	2b12      	cmp	r3, #18
    e0e8:	d901      	bls.n	e0ee <usbdc_get_dev_desc+0x26>
		length = 0x12;
    e0ea:	2312      	movs	r3, #18
    e0ec:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    e0ee:	68fb      	ldr	r3, [r7, #12]
    e0f0:	2b00      	cmp	r3, #0
    e0f2:	d10a      	bne.n	e10a <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    e0f4:	4b0f      	ldr	r3, [pc, #60]	; (e134 <usbdc_get_dev_desc+0x6c>)
    e0f6:	681b      	ldr	r3, [r3, #0]
    e0f8:	6818      	ldr	r0, [r3, #0]
    e0fa:	4b0e      	ldr	r3, [pc, #56]	; (e134 <usbdc_get_dev_desc+0x6c>)
    e0fc:	681b      	ldr	r3, [r3, #0]
    e0fe:	685b      	ldr	r3, [r3, #4]
    e100:	2201      	movs	r2, #1
    e102:	4619      	mov	r1, r3
    e104:	4b0c      	ldr	r3, [pc, #48]	; (e138 <usbdc_get_dev_desc+0x70>)
    e106:	4798      	blx	r3
    e108:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    e10a:	68fb      	ldr	r3, [r7, #12]
    e10c:	2b00      	cmp	r3, #0
    e10e:	d101      	bne.n	e114 <usbdc_get_dev_desc+0x4c>
		return false;
    e110:	2300      	movs	r3, #0
    e112:	e00b      	b.n	e12c <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    e114:	897a      	ldrh	r2, [r7, #10]
    e116:	79f8      	ldrb	r0, [r7, #7]
    e118:	2300      	movs	r3, #0
    e11a:	68f9      	ldr	r1, [r7, #12]
    e11c:	4c07      	ldr	r4, [pc, #28]	; (e13c <usbdc_get_dev_desc+0x74>)
    e11e:	47a0      	blx	r4
    e120:	4603      	mov	r3, r0
    e122:	2b00      	cmp	r3, #0
    e124:	d001      	beq.n	e12a <usbdc_get_dev_desc+0x62>
		return false;
    e126:	2300      	movs	r3, #0
    e128:	e000      	b.n	e12c <usbdc_get_dev_desc+0x64>
	}
	return true;
    e12a:	2301      	movs	r3, #1
}
    e12c:	4618      	mov	r0, r3
    e12e:	3714      	adds	r7, #20
    e130:	46bd      	mov	sp, r7
    e132:	bd90      	pop	{r4, r7, pc}
    e134:	200027c8 	.word	0x200027c8
    e138:	0000ee3d 	.word	0x0000ee3d
    e13c:	0000ebad 	.word	0x0000ebad

0000e140 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    e140:	b590      	push	{r4, r7, lr}
    e142:	b087      	sub	sp, #28
    e144:	af00      	add	r7, sp, #0
    e146:	4603      	mov	r3, r0
    e148:	6039      	str	r1, [r7, #0]
    e14a:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    e14c:	2300      	movs	r3, #0
    e14e:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    e150:	683b      	ldr	r3, [r7, #0]
    e152:	799a      	ldrb	r2, [r3, #6]
    e154:	79db      	ldrb	r3, [r3, #7]
    e156:	021b      	lsls	r3, r3, #8
    e158:	4313      	orrs	r3, r2
    e15a:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    e15c:	683b      	ldr	r3, [r7, #0]
    e15e:	885b      	ldrh	r3, [r3, #2]
    e160:	b29b      	uxth	r3, r3
    e162:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    e164:	8a7a      	ldrh	r2, [r7, #18]
    e166:	4b1e      	ldr	r3, [pc, #120]	; (e1e0 <usbdc_get_cfg_desc+0xa0>)
    e168:	7f1b      	ldrb	r3, [r3, #28]
    e16a:	3b01      	subs	r3, #1
    e16c:	4013      	ands	r3, r2
    e16e:	2b00      	cmp	r3, #0
    e170:	bf0c      	ite	eq
    e172:	2301      	moveq	r3, #1
    e174:	2300      	movne	r3, #0
    e176:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    e178:	697b      	ldr	r3, [r7, #20]
    e17a:	2b00      	cmp	r3, #0
    e17c:	d10c      	bne.n	e198 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    e17e:	4b18      	ldr	r3, [pc, #96]	; (e1e0 <usbdc_get_cfg_desc+0xa0>)
    e180:	681b      	ldr	r3, [r3, #0]
    e182:	6818      	ldr	r0, [r3, #0]
    e184:	4b16      	ldr	r3, [pc, #88]	; (e1e0 <usbdc_get_cfg_desc+0xa0>)
    e186:	681b      	ldr	r3, [r3, #0]
    e188:	6859      	ldr	r1, [r3, #4]
    e18a:	7c3b      	ldrb	r3, [r7, #16]
    e18c:	3301      	adds	r3, #1
    e18e:	b2db      	uxtb	r3, r3
    e190:	461a      	mov	r2, r3
    e192:	4b14      	ldr	r3, [pc, #80]	; (e1e4 <usbdc_get_cfg_desc+0xa4>)
    e194:	4798      	blx	r3
    e196:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    e198:	697b      	ldr	r3, [r7, #20]
    e19a:	2b00      	cmp	r3, #0
    e19c:	d101      	bne.n	e1a2 <usbdc_get_cfg_desc+0x62>
		return false;
    e19e:	2300      	movs	r3, #0
    e1a0:	e019      	b.n	e1d6 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    e1a2:	6978      	ldr	r0, [r7, #20]
    e1a4:	4b10      	ldr	r3, [pc, #64]	; (e1e8 <usbdc_get_cfg_desc+0xa8>)
    e1a6:	4798      	blx	r3
    e1a8:	4603      	mov	r3, r0
    e1aa:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    e1ac:	8a7a      	ldrh	r2, [r7, #18]
    e1ae:	89fb      	ldrh	r3, [r7, #14]
    e1b0:	429a      	cmp	r2, r3
    e1b2:	d802      	bhi.n	e1ba <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    e1b4:	2300      	movs	r3, #0
    e1b6:	747b      	strb	r3, [r7, #17]
    e1b8:	e001      	b.n	e1be <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    e1ba:	89fb      	ldrh	r3, [r7, #14]
    e1bc:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    e1be:	8a7a      	ldrh	r2, [r7, #18]
    e1c0:	7c7b      	ldrb	r3, [r7, #17]
    e1c2:	79f8      	ldrb	r0, [r7, #7]
    e1c4:	6979      	ldr	r1, [r7, #20]
    e1c6:	4c09      	ldr	r4, [pc, #36]	; (e1ec <usbdc_get_cfg_desc+0xac>)
    e1c8:	47a0      	blx	r4
    e1ca:	4603      	mov	r3, r0
    e1cc:	2b00      	cmp	r3, #0
    e1ce:	d001      	beq.n	e1d4 <usbdc_get_cfg_desc+0x94>
		return false;
    e1d0:	2300      	movs	r3, #0
    e1d2:	e000      	b.n	e1d6 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    e1d4:	2301      	movs	r3, #1
}
    e1d6:	4618      	mov	r0, r3
    e1d8:	371c      	adds	r7, #28
    e1da:	46bd      	mov	sp, r7
    e1dc:	bd90      	pop	{r4, r7, pc}
    e1de:	bf00      	nop
    e1e0:	200027c8 	.word	0x200027c8
    e1e4:	0000eefd 	.word	0x0000eefd
    e1e8:	0000e0a9 	.word	0x0000e0a9
    e1ec:	0000ebad 	.word	0x0000ebad

0000e1f0 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    e1f0:	b590      	push	{r4, r7, lr}
    e1f2:	b085      	sub	sp, #20
    e1f4:	af00      	add	r7, sp, #0
    e1f6:	4603      	mov	r3, r0
    e1f8:	6039      	str	r1, [r7, #0]
    e1fa:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    e1fc:	683b      	ldr	r3, [r7, #0]
    e1fe:	799a      	ldrb	r2, [r3, #6]
    e200:	79db      	ldrb	r3, [r3, #7]
    e202:	021b      	lsls	r3, r3, #8
    e204:	4313      	orrs	r3, r2
    e206:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    e208:	683b      	ldr	r3, [r7, #0]
    e20a:	885b      	ldrh	r3, [r3, #2]
    e20c:	b29b      	uxth	r3, r3
    e20e:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    e210:	89fa      	ldrh	r2, [r7, #14]
    e212:	4b1a      	ldr	r3, [pc, #104]	; (e27c <usbdc_get_str_desc+0x8c>)
    e214:	7f1b      	ldrb	r3, [r3, #28]
    e216:	3b01      	subs	r3, #1
    e218:	4013      	ands	r3, r2
    e21a:	2b00      	cmp	r3, #0
    e21c:	bf0c      	ite	eq
    e21e:	2301      	moveq	r3, #1
    e220:	2300      	movne	r3, #0
    e222:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    e224:	4b15      	ldr	r3, [pc, #84]	; (e27c <usbdc_get_str_desc+0x8c>)
    e226:	681b      	ldr	r3, [r3, #0]
    e228:	6818      	ldr	r0, [r3, #0]
    e22a:	4b14      	ldr	r3, [pc, #80]	; (e27c <usbdc_get_str_desc+0x8c>)
    e22c:	681b      	ldr	r3, [r3, #0]
    e22e:	685b      	ldr	r3, [r3, #4]
    e230:	7b3a      	ldrb	r2, [r7, #12]
    e232:	4619      	mov	r1, r3
    e234:	4b12      	ldr	r3, [pc, #72]	; (e280 <usbdc_get_str_desc+0x90>)
    e236:	4798      	blx	r3
    e238:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    e23a:	68bb      	ldr	r3, [r7, #8]
    e23c:	2b00      	cmp	r3, #0
    e23e:	d101      	bne.n	e244 <usbdc_get_str_desc+0x54>
		return false;
    e240:	2300      	movs	r3, #0
    e242:	e017      	b.n	e274 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    e244:	68bb      	ldr	r3, [r7, #8]
    e246:	781b      	ldrb	r3, [r3, #0]
    e248:	b29b      	uxth	r3, r3
    e24a:	89fa      	ldrh	r2, [r7, #14]
    e24c:	429a      	cmp	r2, r3
    e24e:	d802      	bhi.n	e256 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    e250:	2300      	movs	r3, #0
    e252:	737b      	strb	r3, [r7, #13]
    e254:	e002      	b.n	e25c <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    e256:	68bb      	ldr	r3, [r7, #8]
    e258:	781b      	ldrb	r3, [r3, #0]
    e25a:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    e25c:	89fa      	ldrh	r2, [r7, #14]
    e25e:	7b7b      	ldrb	r3, [r7, #13]
    e260:	79f8      	ldrb	r0, [r7, #7]
    e262:	68b9      	ldr	r1, [r7, #8]
    e264:	4c07      	ldr	r4, [pc, #28]	; (e284 <usbdc_get_str_desc+0x94>)
    e266:	47a0      	blx	r4
    e268:	4603      	mov	r3, r0
    e26a:	2b00      	cmp	r3, #0
    e26c:	d001      	beq.n	e272 <usbdc_get_str_desc+0x82>
		return false;
    e26e:	2300      	movs	r3, #0
    e270:	e000      	b.n	e274 <usbdc_get_str_desc+0x84>
	}
	return true;
    e272:	2301      	movs	r3, #1
}
    e274:	4618      	mov	r0, r3
    e276:	3714      	adds	r7, #20
    e278:	46bd      	mov	sp, r7
    e27a:	bd90      	pop	{r4, r7, pc}
    e27c:	200027c8 	.word	0x200027c8
    e280:	0000ef75 	.word	0x0000ef75
    e284:	0000ebad 	.word	0x0000ebad

0000e288 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    e288:	b580      	push	{r7, lr}
    e28a:	b084      	sub	sp, #16
    e28c:	af00      	add	r7, sp, #0
    e28e:	4603      	mov	r3, r0
    e290:	6039      	str	r1, [r7, #0]
    e292:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    e294:	683b      	ldr	r3, [r7, #0]
    e296:	885b      	ldrh	r3, [r3, #2]
    e298:	b29b      	uxth	r3, r3
    e29a:	0a1b      	lsrs	r3, r3, #8
    e29c:	b29b      	uxth	r3, r3
    e29e:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    e2a0:	7bfb      	ldrb	r3, [r7, #15]
    e2a2:	2b02      	cmp	r3, #2
    e2a4:	d00d      	beq.n	e2c2 <usbdc_get_desc_req+0x3a>
    e2a6:	2b03      	cmp	r3, #3
    e2a8:	d012      	beq.n	e2d0 <usbdc_get_desc_req+0x48>
    e2aa:	2b01      	cmp	r3, #1
    e2ac:	d002      	beq.n	e2b4 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    e2ae:	bf00      	nop
	}
	return false;
    e2b0:	2300      	movs	r3, #0
    e2b2:	e013      	b.n	e2dc <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    e2b4:	79fb      	ldrb	r3, [r7, #7]
    e2b6:	6839      	ldr	r1, [r7, #0]
    e2b8:	4618      	mov	r0, r3
    e2ba:	4b0a      	ldr	r3, [pc, #40]	; (e2e4 <usbdc_get_desc_req+0x5c>)
    e2bc:	4798      	blx	r3
    e2be:	4603      	mov	r3, r0
    e2c0:	e00c      	b.n	e2dc <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    e2c2:	79fb      	ldrb	r3, [r7, #7]
    e2c4:	6839      	ldr	r1, [r7, #0]
    e2c6:	4618      	mov	r0, r3
    e2c8:	4b07      	ldr	r3, [pc, #28]	; (e2e8 <usbdc_get_desc_req+0x60>)
    e2ca:	4798      	blx	r3
    e2cc:	4603      	mov	r3, r0
    e2ce:	e005      	b.n	e2dc <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    e2d0:	79fb      	ldrb	r3, [r7, #7]
    e2d2:	6839      	ldr	r1, [r7, #0]
    e2d4:	4618      	mov	r0, r3
    e2d6:	4b05      	ldr	r3, [pc, #20]	; (e2ec <usbdc_get_desc_req+0x64>)
    e2d8:	4798      	blx	r3
    e2da:	4603      	mov	r3, r0
}
    e2dc:	4618      	mov	r0, r3
    e2de:	3710      	adds	r7, #16
    e2e0:	46bd      	mov	sp, r7
    e2e2:	bd80      	pop	{r7, pc}
    e2e4:	0000e0c9 	.word	0x0000e0c9
    e2e8:	0000e141 	.word	0x0000e141
    e2ec:	0000e1f1 	.word	0x0000e1f1

0000e2f0 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    e2f0:	b590      	push	{r4, r7, lr}
    e2f2:	b085      	sub	sp, #20
    e2f4:	af00      	add	r7, sp, #0
    e2f6:	4603      	mov	r3, r0
    e2f8:	6039      	str	r1, [r7, #0]
    e2fa:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e2fc:	683b      	ldr	r3, [r7, #0]
    e2fe:	781b      	ldrb	r3, [r3, #0]
    e300:	f003 031f 	and.w	r3, r3, #31
    e304:	2b00      	cmp	r3, #0
    e306:	db1b      	blt.n	e340 <usbdc_get_status_req+0x50>
    e308:	2b01      	cmp	r3, #1
    e30a:	dd02      	ble.n	e312 <usbdc_get_status_req+0x22>
    e30c:	2b02      	cmp	r3, #2
    e30e:	d003      	beq.n	e318 <usbdc_get_status_req+0x28>
    e310:	e016      	b.n	e340 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    e312:	2300      	movs	r3, #0
    e314:	60fb      	str	r3, [r7, #12]
		break;
    e316:	e015      	b.n	e344 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    e318:	683b      	ldr	r3, [r7, #0]
    e31a:	889b      	ldrh	r3, [r3, #4]
    e31c:	b29b      	uxth	r3, r3
    e31e:	b2db      	uxtb	r3, r3
    e320:	2102      	movs	r1, #2
    e322:	4618      	mov	r0, r3
    e324:	4b0f      	ldr	r3, [pc, #60]	; (e364 <usbdc_get_status_req+0x74>)
    e326:	4798      	blx	r3
    e328:	4603      	mov	r3, r0
    e32a:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    e32c:	68fb      	ldr	r3, [r7, #12]
    e32e:	2b00      	cmp	r3, #0
    e330:	da01      	bge.n	e336 <usbdc_get_status_req+0x46>
			return false;
    e332:	2300      	movs	r3, #0
    e334:	e012      	b.n	e35c <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    e336:	68fb      	ldr	r3, [r7, #12]
    e338:	f003 0301 	and.w	r3, r3, #1
    e33c:	60fb      	str	r3, [r7, #12]
		break;
    e33e:	e001      	b.n	e344 <usbdc_get_status_req+0x54>
	default:
		return false;
    e340:	2300      	movs	r3, #0
    e342:	e00b      	b.n	e35c <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    e344:	4b08      	ldr	r3, [pc, #32]	; (e368 <usbdc_get_status_req+0x78>)
    e346:	695b      	ldr	r3, [r3, #20]
    e348:	89ba      	ldrh	r2, [r7, #12]
    e34a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    e34c:	4b06      	ldr	r3, [pc, #24]	; (e368 <usbdc_get_status_req+0x78>)
    e34e:	6959      	ldr	r1, [r3, #20]
    e350:	79f8      	ldrb	r0, [r7, #7]
    e352:	2300      	movs	r3, #0
    e354:	2202      	movs	r2, #2
    e356:	4c05      	ldr	r4, [pc, #20]	; (e36c <usbdc_get_status_req+0x7c>)
    e358:	47a0      	blx	r4
	return true;
    e35a:	2301      	movs	r3, #1
}
    e35c:	4618      	mov	r0, r3
    e35e:	3714      	adds	r7, #20
    e360:	46bd      	mov	sp, r7
    e362:	bd90      	pop	{r4, r7, pc}
    e364:	00004c0d 	.word	0x00004c0d
    e368:	200027c8 	.word	0x200027c8
    e36c:	0000ebad 	.word	0x0000ebad

0000e370 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    e370:	b590      	push	{r4, r7, lr}
    e372:	b085      	sub	sp, #20
    e374:	af00      	add	r7, sp, #0
    e376:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    e378:	4b1f      	ldr	r3, [pc, #124]	; (e3f8 <usbdc_get_interface+0x88>)
    e37a:	691b      	ldr	r3, [r3, #16]
    e37c:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    e37e:	4b1e      	ldr	r3, [pc, #120]	; (e3f8 <usbdc_get_interface+0x88>)
    e380:	7f5b      	ldrb	r3, [r3, #29]
    e382:	461a      	mov	r2, r3
    e384:	687b      	ldr	r3, [r7, #4]
    e386:	889b      	ldrh	r3, [r3, #4]
    e388:	b29b      	uxth	r3, r3
    e38a:	fa42 f303 	asr.w	r3, r2, r3
    e38e:	f003 0301 	and.w	r3, r3, #1
    e392:	2b00      	cmp	r3, #0
    e394:	d128      	bne.n	e3e8 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    e396:	4b18      	ldr	r3, [pc, #96]	; (e3f8 <usbdc_get_interface+0x88>)
    e398:	695b      	ldr	r3, [r3, #20]
    e39a:	2200      	movs	r2, #0
    e39c:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    e39e:	4b16      	ldr	r3, [pc, #88]	; (e3f8 <usbdc_get_interface+0x88>)
    e3a0:	6959      	ldr	r1, [r3, #20]
    e3a2:	2300      	movs	r3, #0
    e3a4:	2201      	movs	r2, #1
    e3a6:	2000      	movs	r0, #0
    e3a8:	4c14      	ldr	r4, [pc, #80]	; (e3fc <usbdc_get_interface+0x8c>)
    e3aa:	47a0      	blx	r4
		return true;
    e3ac:	2301      	movs	r3, #1
    e3ae:	e01f      	b.n	e3f0 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    e3b0:	68fb      	ldr	r3, [r7, #12]
    e3b2:	685b      	ldr	r3, [r3, #4]
    e3b4:	687a      	ldr	r2, [r7, #4]
    e3b6:	2102      	movs	r1, #2
    e3b8:	68f8      	ldr	r0, [r7, #12]
    e3ba:	4798      	blx	r3
    e3bc:	60b8      	str	r0, [r7, #8]
    e3be:	68bb      	ldr	r3, [r7, #8]
    e3c0:	2b00      	cmp	r3, #0
    e3c2:	da03      	bge.n	e3cc <usbdc_get_interface+0x5c>
			func = func->next;
    e3c4:	68fb      	ldr	r3, [r7, #12]
    e3c6:	681b      	ldr	r3, [r3, #0]
    e3c8:	60fb      	str	r3, [r7, #12]
    e3ca:	e00d      	b.n	e3e8 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    e3cc:	4b0a      	ldr	r3, [pc, #40]	; (e3f8 <usbdc_get_interface+0x88>)
    e3ce:	695b      	ldr	r3, [r3, #20]
    e3d0:	68ba      	ldr	r2, [r7, #8]
    e3d2:	b2d2      	uxtb	r2, r2
    e3d4:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    e3d6:	4b08      	ldr	r3, [pc, #32]	; (e3f8 <usbdc_get_interface+0x88>)
    e3d8:	6959      	ldr	r1, [r3, #20]
    e3da:	2300      	movs	r3, #0
    e3dc:	2201      	movs	r2, #1
    e3de:	2000      	movs	r0, #0
    e3e0:	4c06      	ldr	r4, [pc, #24]	; (e3fc <usbdc_get_interface+0x8c>)
    e3e2:	47a0      	blx	r4
			return true;
    e3e4:	2301      	movs	r3, #1
    e3e6:	e003      	b.n	e3f0 <usbdc_get_interface+0x80>
	while (NULL != func) {
    e3e8:	68fb      	ldr	r3, [r7, #12]
    e3ea:	2b00      	cmp	r3, #0
    e3ec:	d1e0      	bne.n	e3b0 <usbdc_get_interface+0x40>
		}
	}
	return false;
    e3ee:	2300      	movs	r3, #0
}
    e3f0:	4618      	mov	r0, r3
    e3f2:	3714      	adds	r7, #20
    e3f4:	46bd      	mov	sp, r7
    e3f6:	bd90      	pop	{r4, r7, pc}
    e3f8:	200027c8 	.word	0x200027c8
    e3fc:	0000ebad 	.word	0x0000ebad

0000e400 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    e400:	b590      	push	{r4, r7, lr}
    e402:	b083      	sub	sp, #12
    e404:	af00      	add	r7, sp, #0
    e406:	4603      	mov	r3, r0
    e408:	6039      	str	r1, [r7, #0]
    e40a:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    e40c:	683b      	ldr	r3, [r7, #0]
    e40e:	785b      	ldrb	r3, [r3, #1]
    e410:	2b0a      	cmp	r3, #10
    e412:	d83a      	bhi.n	e48a <usbdc_get_req+0x8a>
    e414:	a201      	add	r2, pc, #4	; (adr r2, e41c <usbdc_get_req+0x1c>)
    e416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e41a:	bf00      	nop
    e41c:	0000e473 	.word	0x0000e473
    e420:	0000e48b 	.word	0x0000e48b
    e424:	0000e48b 	.word	0x0000e48b
    e428:	0000e48b 	.word	0x0000e48b
    e42c:	0000e48b 	.word	0x0000e48b
    e430:	0000e48b 	.word	0x0000e48b
    e434:	0000e449 	.word	0x0000e449
    e438:	0000e48b 	.word	0x0000e48b
    e43c:	0000e457 	.word	0x0000e457
    e440:	0000e48b 	.word	0x0000e48b
    e444:	0000e481 	.word	0x0000e481
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    e448:	79fb      	ldrb	r3, [r7, #7]
    e44a:	6839      	ldr	r1, [r7, #0]
    e44c:	4618      	mov	r0, r3
    e44e:	4b11      	ldr	r3, [pc, #68]	; (e494 <usbdc_get_req+0x94>)
    e450:	4798      	blx	r3
    e452:	4603      	mov	r3, r0
    e454:	e01a      	b.n	e48c <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    e456:	4b10      	ldr	r3, [pc, #64]	; (e498 <usbdc_get_req+0x98>)
    e458:	695b      	ldr	r3, [r3, #20]
    e45a:	4a0f      	ldr	r2, [pc, #60]	; (e498 <usbdc_get_req+0x98>)
    e45c:	7ed2      	ldrb	r2, [r2, #27]
    e45e:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    e460:	4b0d      	ldr	r3, [pc, #52]	; (e498 <usbdc_get_req+0x98>)
    e462:	6959      	ldr	r1, [r3, #20]
    e464:	79f8      	ldrb	r0, [r7, #7]
    e466:	2300      	movs	r3, #0
    e468:	2201      	movs	r2, #1
    e46a:	4c0c      	ldr	r4, [pc, #48]	; (e49c <usbdc_get_req+0x9c>)
    e46c:	47a0      	blx	r4
		return true;
    e46e:	2301      	movs	r3, #1
    e470:	e00c      	b.n	e48c <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    e472:	79fb      	ldrb	r3, [r7, #7]
    e474:	6839      	ldr	r1, [r7, #0]
    e476:	4618      	mov	r0, r3
    e478:	4b09      	ldr	r3, [pc, #36]	; (e4a0 <usbdc_get_req+0xa0>)
    e47a:	4798      	blx	r3
    e47c:	4603      	mov	r3, r0
    e47e:	e005      	b.n	e48c <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    e480:	6838      	ldr	r0, [r7, #0]
    e482:	4b08      	ldr	r3, [pc, #32]	; (e4a4 <usbdc_get_req+0xa4>)
    e484:	4798      	blx	r3
    e486:	4603      	mov	r3, r0
    e488:	e000      	b.n	e48c <usbdc_get_req+0x8c>
	default:
		return false;
    e48a:	2300      	movs	r3, #0
	}
}
    e48c:	4618      	mov	r0, r3
    e48e:	370c      	adds	r7, #12
    e490:	46bd      	mov	sp, r7
    e492:	bd90      	pop	{r4, r7, pc}
    e494:	0000e289 	.word	0x0000e289
    e498:	200027c8 	.word	0x200027c8
    e49c:	0000ebad 	.word	0x0000ebad
    e4a0:	0000e2f1 	.word	0x0000e2f1
    e4a4:	0000e371 	.word	0x0000e371

0000e4a8 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    e4a8:	b590      	push	{r4, r7, lr}
    e4aa:	b083      	sub	sp, #12
    e4ac:	af00      	add	r7, sp, #0
    e4ae:	4603      	mov	r3, r0
    e4b0:	6039      	str	r1, [r7, #0]
    e4b2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e4b4:	683b      	ldr	r3, [r7, #0]
    e4b6:	781b      	ldrb	r3, [r3, #0]
    e4b8:	f003 031f 	and.w	r3, r3, #31
    e4bc:	2b02      	cmp	r3, #2
    e4be:	d116      	bne.n	e4ee <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    e4c0:	683b      	ldr	r3, [r7, #0]
    e4c2:	88db      	ldrh	r3, [r3, #6]
    e4c4:	b29b      	uxth	r3, r3
    e4c6:	2b00      	cmp	r3, #0
    e4c8:	d001      	beq.n	e4ce <usbdc_clear_ftr_req+0x26>
			return false;
    e4ca:	2300      	movs	r3, #0
    e4cc:	e010      	b.n	e4f0 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    e4ce:	683b      	ldr	r3, [r7, #0]
    e4d0:	889b      	ldrh	r3, [r3, #4]
    e4d2:	b29b      	uxth	r3, r3
    e4d4:	b2db      	uxtb	r3, r3
    e4d6:	2100      	movs	r1, #0
    e4d8:	4618      	mov	r0, r3
    e4da:	4b07      	ldr	r3, [pc, #28]	; (e4f8 <usbdc_clear_ftr_req+0x50>)
    e4dc:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    e4de:	79f8      	ldrb	r0, [r7, #7]
    e4e0:	2301      	movs	r3, #1
    e4e2:	2200      	movs	r2, #0
    e4e4:	2100      	movs	r1, #0
    e4e6:	4c05      	ldr	r4, [pc, #20]	; (e4fc <usbdc_clear_ftr_req+0x54>)
    e4e8:	47a0      	blx	r4
		return true;
    e4ea:	2301      	movs	r3, #1
    e4ec:	e000      	b.n	e4f0 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    e4ee:	2300      	movs	r3, #0
	}
}
    e4f0:	4618      	mov	r0, r3
    e4f2:	370c      	adds	r7, #12
    e4f4:	46bd      	mov	sp, r7
    e4f6:	bd90      	pop	{r4, r7, pc}
    e4f8:	00004c0d 	.word	0x00004c0d
    e4fc:	0000ebad 	.word	0x0000ebad

0000e500 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    e500:	b590      	push	{r4, r7, lr}
    e502:	b083      	sub	sp, #12
    e504:	af00      	add	r7, sp, #0
    e506:	4603      	mov	r3, r0
    e508:	6039      	str	r1, [r7, #0]
    e50a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    e50c:	683b      	ldr	r3, [r7, #0]
    e50e:	781b      	ldrb	r3, [r3, #0]
    e510:	f003 031f 	and.w	r3, r3, #31
    e514:	2b02      	cmp	r3, #2
    e516:	d116      	bne.n	e546 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    e518:	683b      	ldr	r3, [r7, #0]
    e51a:	88db      	ldrh	r3, [r3, #6]
    e51c:	b29b      	uxth	r3, r3
    e51e:	2b00      	cmp	r3, #0
    e520:	d001      	beq.n	e526 <usbdc_set_ftr_req+0x26>
			return false;
    e522:	2300      	movs	r3, #0
    e524:	e010      	b.n	e548 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    e526:	683b      	ldr	r3, [r7, #0]
    e528:	889b      	ldrh	r3, [r3, #4]
    e52a:	b29b      	uxth	r3, r3
    e52c:	b2db      	uxtb	r3, r3
    e52e:	2101      	movs	r1, #1
    e530:	4618      	mov	r0, r3
    e532:	4b07      	ldr	r3, [pc, #28]	; (e550 <usbdc_set_ftr_req+0x50>)
    e534:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    e536:	79f8      	ldrb	r0, [r7, #7]
    e538:	2301      	movs	r3, #1
    e53a:	2200      	movs	r2, #0
    e53c:	2100      	movs	r1, #0
    e53e:	4c05      	ldr	r4, [pc, #20]	; (e554 <usbdc_set_ftr_req+0x54>)
    e540:	47a0      	blx	r4
		return true;
    e542:	2301      	movs	r3, #1
    e544:	e000      	b.n	e548 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    e546:	2300      	movs	r3, #0
	}
}
    e548:	4618      	mov	r0, r3
    e54a:	370c      	adds	r7, #12
    e54c:	46bd      	mov	sp, r7
    e54e:	bd90      	pop	{r4, r7, pc}
    e550:	00004c0d 	.word	0x00004c0d
    e554:	0000ebad 	.word	0x0000ebad

0000e558 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    e558:	b580      	push	{r7, lr}
    e55a:	b082      	sub	sp, #8
    e55c:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    e55e:	4b0a      	ldr	r3, [pc, #40]	; (e588 <usbdc_unconfig+0x30>)
    e560:	691b      	ldr	r3, [r3, #16]
    e562:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    e564:	e008      	b.n	e578 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    e566:	687b      	ldr	r3, [r7, #4]
    e568:	685b      	ldr	r3, [r3, #4]
    e56a:	2200      	movs	r2, #0
    e56c:	2101      	movs	r1, #1
    e56e:	6878      	ldr	r0, [r7, #4]
    e570:	4798      	blx	r3
		func = func->next;
    e572:	687b      	ldr	r3, [r7, #4]
    e574:	681b      	ldr	r3, [r3, #0]
    e576:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    e578:	687b      	ldr	r3, [r7, #4]
    e57a:	2b00      	cmp	r3, #0
    e57c:	d1f3      	bne.n	e566 <usbdc_unconfig+0xe>
	}
}
    e57e:	bf00      	nop
    e580:	3708      	adds	r7, #8
    e582:	46bd      	mov	sp, r7
    e584:	bd80      	pop	{r7, pc}
    e586:	bf00      	nop
    e588:	200027c8 	.word	0x200027c8

0000e58c <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    e58c:	b580      	push	{r7, lr}
    e58e:	b088      	sub	sp, #32
    e590:	af00      	add	r7, sp, #0
    e592:	4603      	mov	r3, r0
    e594:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    e596:	2300      	movs	r3, #0
    e598:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    e59a:	23ff      	movs	r3, #255	; 0xff
    e59c:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    e59e:	79fb      	ldrb	r3, [r7, #7]
    e5a0:	2b00      	cmp	r3, #0
    e5a2:	d103      	bne.n	e5ac <usbdc_set_config+0x20>
		usbdc_unconfig();
    e5a4:	4b2e      	ldr	r3, [pc, #184]	; (e660 <usbdc_set_config+0xd4>)
    e5a6:	4798      	blx	r3
		return true;
    e5a8:	2301      	movs	r3, #1
    e5aa:	e055      	b.n	e658 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    e5ac:	69bb      	ldr	r3, [r7, #24]
    e5ae:	2b00      	cmp	r3, #0
    e5b0:	d10a      	bne.n	e5c8 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    e5b2:	4b2c      	ldr	r3, [pc, #176]	; (e664 <usbdc_set_config+0xd8>)
    e5b4:	681b      	ldr	r3, [r3, #0]
    e5b6:	6818      	ldr	r0, [r3, #0]
    e5b8:	4b2a      	ldr	r3, [pc, #168]	; (e664 <usbdc_set_config+0xd8>)
    e5ba:	681b      	ldr	r3, [r3, #0]
    e5bc:	685b      	ldr	r3, [r3, #4]
    e5be:	79fa      	ldrb	r2, [r7, #7]
    e5c0:	4619      	mov	r1, r3
    e5c2:	4b29      	ldr	r3, [pc, #164]	; (e668 <usbdc_set_config+0xdc>)
    e5c4:	4798      	blx	r3
    e5c6:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    e5c8:	69bb      	ldr	r3, [r7, #24]
    e5ca:	2b00      	cmp	r3, #0
    e5cc:	d101      	bne.n	e5d2 <usbdc_set_config+0x46>
		return false;
    e5ce:	2300      	movs	r3, #0
    e5d0:	e042      	b.n	e658 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    e5d2:	69b8      	ldr	r0, [r7, #24]
    e5d4:	4b25      	ldr	r3, [pc, #148]	; (e66c <usbdc_set_config+0xe0>)
    e5d6:	4798      	blx	r3
    e5d8:	4603      	mov	r3, r0
    e5da:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    e5dc:	8abb      	ldrh	r3, [r7, #20]
    e5de:	69ba      	ldr	r2, [r7, #24]
    e5e0:	4413      	add	r3, r2
    e5e2:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    e5e4:	693b      	ldr	r3, [r7, #16]
    e5e6:	2204      	movs	r2, #4
    e5e8:	4619      	mov	r1, r3
    e5ea:	69b8      	ldr	r0, [r7, #24]
    e5ec:	4b20      	ldr	r3, [pc, #128]	; (e670 <usbdc_set_config+0xe4>)
    e5ee:	4798      	blx	r3
    e5f0:	4603      	mov	r3, r0
    e5f2:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    e5f4:	e02c      	b.n	e650 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    e5f6:	68fb      	ldr	r3, [r7, #12]
    e5f8:	3302      	adds	r3, #2
    e5fa:	781b      	ldrb	r3, [r3, #0]
    e5fc:	7dfa      	ldrb	r2, [r7, #23]
    e5fe:	429a      	cmp	r2, r3
    e600:	d018      	beq.n	e634 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    e602:	68fb      	ldr	r3, [r7, #12]
    e604:	789b      	ldrb	r3, [r3, #2]
    e606:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    e608:	4b16      	ldr	r3, [pc, #88]	; (e664 <usbdc_set_config+0xd8>)
    e60a:	691b      	ldr	r3, [r3, #16]
    e60c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    e60e:	e00c      	b.n	e62a <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    e610:	69fb      	ldr	r3, [r7, #28]
    e612:	685b      	ldr	r3, [r3, #4]
    e614:	f107 020c 	add.w	r2, r7, #12
    e618:	2100      	movs	r1, #0
    e61a:	69f8      	ldr	r0, [r7, #28]
    e61c:	4798      	blx	r3
    e61e:	4603      	mov	r3, r0
    e620:	2b00      	cmp	r3, #0
    e622:	d006      	beq.n	e632 <usbdc_set_config+0xa6>
					func = func->next;
    e624:	69fb      	ldr	r3, [r7, #28]
    e626:	681b      	ldr	r3, [r3, #0]
    e628:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    e62a:	69fb      	ldr	r3, [r7, #28]
    e62c:	2b00      	cmp	r3, #0
    e62e:	d1ef      	bne.n	e610 <usbdc_set_config+0x84>
    e630:	e000      	b.n	e634 <usbdc_set_config+0xa8>
				} else {
					break;
    e632:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    e634:	68fb      	ldr	r3, [r7, #12]
    e636:	4618      	mov	r0, r3
    e638:	4b0e      	ldr	r3, [pc, #56]	; (e674 <usbdc_set_config+0xe8>)
    e63a:	4798      	blx	r3
    e63c:	4603      	mov	r3, r0
    e63e:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    e640:	68fb      	ldr	r3, [r7, #12]
    e642:	6939      	ldr	r1, [r7, #16]
    e644:	2204      	movs	r2, #4
    e646:	4618      	mov	r0, r3
    e648:	4b09      	ldr	r3, [pc, #36]	; (e670 <usbdc_set_config+0xe4>)
    e64a:	4798      	blx	r3
    e64c:	4603      	mov	r3, r0
    e64e:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    e650:	68fb      	ldr	r3, [r7, #12]
    e652:	2b00      	cmp	r3, #0
    e654:	d1cf      	bne.n	e5f6 <usbdc_set_config+0x6a>
	}
	return true;
    e656:	2301      	movs	r3, #1
}
    e658:	4618      	mov	r0, r3
    e65a:	3720      	adds	r7, #32
    e65c:	46bd      	mov	sp, r7
    e65e:	bd80      	pop	{r7, pc}
    e660:	0000e559 	.word	0x0000e559
    e664:	200027c8 	.word	0x200027c8
    e668:	0000eefd 	.word	0x0000eefd
    e66c:	0000e0a9 	.word	0x0000e0a9
    e670:	0000ee3d 	.word	0x0000ee3d
    e674:	0000e085 	.word	0x0000e085

0000e678 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    e678:	b580      	push	{r7, lr}
    e67a:	b082      	sub	sp, #8
    e67c:	af00      	add	r7, sp, #0
    e67e:	4603      	mov	r3, r0
    e680:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    e682:	79fb      	ldrb	r3, [r7, #7]
    e684:	4618      	mov	r0, r3
    e686:	4b03      	ldr	r3, [pc, #12]	; (e694 <usbdc_set_address+0x1c>)
    e688:	4798      	blx	r3
}
    e68a:	bf00      	nop
    e68c:	3708      	adds	r7, #8
    e68e:	46bd      	mov	sp, r7
    e690:	bd80      	pop	{r7, pc}
    e692:	bf00      	nop
    e694:	00004829 	.word	0x00004829

0000e698 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    e698:	b590      	push	{r4, r7, lr}
    e69a:	b087      	sub	sp, #28
    e69c:	af00      	add	r7, sp, #0
    e69e:	4603      	mov	r3, r0
    e6a0:	460a      	mov	r2, r1
    e6a2:	80fb      	strh	r3, [r7, #6]
    e6a4:	4613      	mov	r3, r2
    e6a6:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    e6a8:	2300      	movs	r3, #0
    e6aa:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    e6ac:	693b      	ldr	r3, [r7, #16]
    e6ae:	2b00      	cmp	r3, #0
    e6b0:	d10b      	bne.n	e6ca <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    e6b2:	4b43      	ldr	r3, [pc, #268]	; (e7c0 <usbdc_set_interface+0x128>)
    e6b4:	681b      	ldr	r3, [r3, #0]
    e6b6:	6818      	ldr	r0, [r3, #0]
    e6b8:	4b41      	ldr	r3, [pc, #260]	; (e7c0 <usbdc_set_interface+0x128>)
    e6ba:	681b      	ldr	r3, [r3, #0]
    e6bc:	6859      	ldr	r1, [r3, #4]
    e6be:	4b40      	ldr	r3, [pc, #256]	; (e7c0 <usbdc_set_interface+0x128>)
    e6c0:	7edb      	ldrb	r3, [r3, #27]
    e6c2:	461a      	mov	r2, r3
    e6c4:	4b3f      	ldr	r3, [pc, #252]	; (e7c4 <usbdc_set_interface+0x12c>)
    e6c6:	4798      	blx	r3
    e6c8:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    e6ca:	693b      	ldr	r3, [r7, #16]
    e6cc:	2b00      	cmp	r3, #0
    e6ce:	d101      	bne.n	e6d4 <usbdc_set_interface+0x3c>
		return false;
    e6d0:	2300      	movs	r3, #0
    e6d2:	e071      	b.n	e7b8 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    e6d4:	693b      	ldr	r3, [r7, #16]
    e6d6:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    e6d8:	6938      	ldr	r0, [r7, #16]
    e6da:	4b3b      	ldr	r3, [pc, #236]	; (e7c8 <usbdc_set_interface+0x130>)
    e6dc:	4798      	blx	r3
    e6de:	4603      	mov	r3, r0
    e6e0:	461a      	mov	r2, r3
    e6e2:	693b      	ldr	r3, [r7, #16]
    e6e4:	4413      	add	r3, r2
    e6e6:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    e6e8:	68bb      	ldr	r3, [r7, #8]
    e6ea:	68f9      	ldr	r1, [r7, #12]
    e6ec:	2204      	movs	r2, #4
    e6ee:	4618      	mov	r0, r3
    e6f0:	4b36      	ldr	r3, [pc, #216]	; (e7cc <usbdc_set_interface+0x134>)
    e6f2:	4798      	blx	r3
    e6f4:	6138      	str	r0, [r7, #16]
    e6f6:	693b      	ldr	r3, [r7, #16]
    e6f8:	2b00      	cmp	r3, #0
    e6fa:	d113      	bne.n	e724 <usbdc_set_interface+0x8c>
		return false;
    e6fc:	2300      	movs	r3, #0
    e6fe:	e05b      	b.n	e7b8 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    e700:	68bb      	ldr	r3, [r7, #8]
    e702:	4618      	mov	r0, r3
    e704:	4b32      	ldr	r3, [pc, #200]	; (e7d0 <usbdc_set_interface+0x138>)
    e706:	4798      	blx	r3
    e708:	4603      	mov	r3, r0
    e70a:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    e70c:	68bb      	ldr	r3, [r7, #8]
    e70e:	68f9      	ldr	r1, [r7, #12]
    e710:	2204      	movs	r2, #4
    e712:	4618      	mov	r0, r3
    e714:	4b2d      	ldr	r3, [pc, #180]	; (e7cc <usbdc_set_interface+0x134>)
    e716:	4798      	blx	r3
    e718:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    e71a:	693b      	ldr	r3, [r7, #16]
    e71c:	2b00      	cmp	r3, #0
    e71e:	d101      	bne.n	e724 <usbdc_set_interface+0x8c>
			return false;
    e720:	2300      	movs	r3, #0
    e722:	e049      	b.n	e7b8 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    e724:	693b      	ldr	r3, [r7, #16]
    e726:	3302      	adds	r3, #2
    e728:	781b      	ldrb	r3, [r3, #0]
    e72a:	b29b      	uxth	r3, r3
    e72c:	88ba      	ldrh	r2, [r7, #4]
    e72e:	429a      	cmp	r2, r3
    e730:	d1e6      	bne.n	e700 <usbdc_set_interface+0x68>
    e732:	693b      	ldr	r3, [r7, #16]
    e734:	3303      	adds	r3, #3
    e736:	781b      	ldrb	r3, [r3, #0]
    e738:	b29b      	uxth	r3, r3
    e73a:	88fa      	ldrh	r2, [r7, #6]
    e73c:	429a      	cmp	r2, r3
    e73e:	d1df      	bne.n	e700 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    e740:	693b      	ldr	r3, [r7, #16]
    e742:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    e744:	4b1e      	ldr	r3, [pc, #120]	; (e7c0 <usbdc_set_interface+0x128>)
    e746:	691b      	ldr	r3, [r3, #16]
    e748:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    e74a:	e031      	b.n	e7b0 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    e74c:	697b      	ldr	r3, [r7, #20]
    e74e:	685b      	ldr	r3, [r3, #4]
    e750:	f107 0208 	add.w	r2, r7, #8
    e754:	2101      	movs	r1, #1
    e756:	6978      	ldr	r0, [r7, #20]
    e758:	4798      	blx	r3
    e75a:	4603      	mov	r3, r0
    e75c:	2b00      	cmp	r3, #0
    e75e:	d003      	beq.n	e768 <usbdc_set_interface+0xd0>
			func = func->next;
    e760:	697b      	ldr	r3, [r7, #20]
    e762:	681b      	ldr	r3, [r3, #0]
    e764:	617b      	str	r3, [r7, #20]
    e766:	e023      	b.n	e7b0 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    e768:	697b      	ldr	r3, [r7, #20]
    e76a:	685b      	ldr	r3, [r3, #4]
    e76c:	f107 0208 	add.w	r2, r7, #8
    e770:	2100      	movs	r1, #0
    e772:	6978      	ldr	r0, [r7, #20]
    e774:	4798      	blx	r3
    e776:	4603      	mov	r3, r0
    e778:	2b00      	cmp	r3, #0
    e77a:	d117      	bne.n	e7ac <usbdc_set_interface+0x114>
			if (alt_set) {
    e77c:	88fb      	ldrh	r3, [r7, #6]
    e77e:	2b00      	cmp	r3, #0
    e780:	d00c      	beq.n	e79c <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    e782:	4b0f      	ldr	r3, [pc, #60]	; (e7c0 <usbdc_set_interface+0x128>)
    e784:	7f5b      	ldrb	r3, [r3, #29]
    e786:	b25a      	sxtb	r2, r3
    e788:	88bb      	ldrh	r3, [r7, #4]
    e78a:	2101      	movs	r1, #1
    e78c:	fa01 f303 	lsl.w	r3, r1, r3
    e790:	b25b      	sxtb	r3, r3
    e792:	4313      	orrs	r3, r2
    e794:	b25b      	sxtb	r3, r3
    e796:	b2da      	uxtb	r2, r3
    e798:	4b09      	ldr	r3, [pc, #36]	; (e7c0 <usbdc_set_interface+0x128>)
    e79a:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    e79c:	2300      	movs	r3, #0
    e79e:	2200      	movs	r2, #0
    e7a0:	2100      	movs	r1, #0
    e7a2:	2000      	movs	r0, #0
    e7a4:	4c0b      	ldr	r4, [pc, #44]	; (e7d4 <usbdc_set_interface+0x13c>)
    e7a6:	47a0      	blx	r4
			return true;
    e7a8:	2301      	movs	r3, #1
    e7aa:	e005      	b.n	e7b8 <usbdc_set_interface+0x120>
		} else {
			return false;
    e7ac:	2300      	movs	r3, #0
    e7ae:	e003      	b.n	e7b8 <usbdc_set_interface+0x120>
	while (NULL != func) {
    e7b0:	697b      	ldr	r3, [r7, #20]
    e7b2:	2b00      	cmp	r3, #0
    e7b4:	d1ca      	bne.n	e74c <usbdc_set_interface+0xb4>
		}
	}

	return false;
    e7b6:	2300      	movs	r3, #0
}
    e7b8:	4618      	mov	r0, r3
    e7ba:	371c      	adds	r7, #28
    e7bc:	46bd      	mov	sp, r7
    e7be:	bd90      	pop	{r4, r7, pc}
    e7c0:	200027c8 	.word	0x200027c8
    e7c4:	0000eefd 	.word	0x0000eefd
    e7c8:	0000e0a9 	.word	0x0000e0a9
    e7cc:	0000ee3d 	.word	0x0000ee3d
    e7d0:	0000e085 	.word	0x0000e085
    e7d4:	0000ebad 	.word	0x0000ebad

0000e7d8 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    e7d8:	b590      	push	{r4, r7, lr}
    e7da:	b083      	sub	sp, #12
    e7dc:	af00      	add	r7, sp, #0
    e7de:	4603      	mov	r3, r0
    e7e0:	6039      	str	r1, [r7, #0]
    e7e2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    e7e4:	683b      	ldr	r3, [r7, #0]
    e7e6:	785b      	ldrb	r3, [r3, #1]
    e7e8:	3b01      	subs	r3, #1
    e7ea:	2b0a      	cmp	r3, #10
    e7ec:	d85b      	bhi.n	e8a6 <usbdc_set_req+0xce>
    e7ee:	a201      	add	r2, pc, #4	; (adr r2, e7f4 <usbdc_set_req+0x1c>)
    e7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e7f4:	0000e873 	.word	0x0000e873
    e7f8:	0000e8a7 	.word	0x0000e8a7
    e7fc:	0000e881 	.word	0x0000e881
    e800:	0000e8a7 	.word	0x0000e8a7
    e804:	0000e821 	.word	0x0000e821
    e808:	0000e8a7 	.word	0x0000e8a7
    e80c:	0000e8a7 	.word	0x0000e8a7
    e810:	0000e8a7 	.word	0x0000e8a7
    e814:	0000e83b 	.word	0x0000e83b
    e818:	0000e8a7 	.word	0x0000e8a7
    e81c:	0000e88f 	.word	0x0000e88f
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    e820:	79f8      	ldrb	r0, [r7, #7]
    e822:	2301      	movs	r3, #1
    e824:	2200      	movs	r2, #0
    e826:	2100      	movs	r1, #0
    e828:	4c21      	ldr	r4, [pc, #132]	; (e8b0 <usbdc_set_req+0xd8>)
    e82a:	47a0      	blx	r4
    e82c:	4603      	mov	r3, r0
    e82e:	2b00      	cmp	r3, #0
    e830:	bf0c      	ite	eq
    e832:	2301      	moveq	r3, #1
    e834:	2300      	movne	r3, #0
    e836:	b2db      	uxtb	r3, r3
    e838:	e036      	b.n	e8a8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    e83a:	683b      	ldr	r3, [r7, #0]
    e83c:	885b      	ldrh	r3, [r3, #2]
    e83e:	b29b      	uxth	r3, r3
    e840:	b2db      	uxtb	r3, r3
    e842:	4618      	mov	r0, r3
    e844:	4b1b      	ldr	r3, [pc, #108]	; (e8b4 <usbdc_set_req+0xdc>)
    e846:	4798      	blx	r3
    e848:	4603      	mov	r3, r0
    e84a:	f083 0301 	eor.w	r3, r3, #1
    e84e:	b2db      	uxtb	r3, r3
    e850:	2b00      	cmp	r3, #0
    e852:	d001      	beq.n	e858 <usbdc_set_req+0x80>
			return false;
    e854:	2300      	movs	r3, #0
    e856:	e027      	b.n	e8a8 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    e858:	79f8      	ldrb	r0, [r7, #7]
    e85a:	2301      	movs	r3, #1
    e85c:	2200      	movs	r2, #0
    e85e:	2100      	movs	r1, #0
    e860:	4c13      	ldr	r4, [pc, #76]	; (e8b0 <usbdc_set_req+0xd8>)
    e862:	47a0      	blx	r4
    e864:	4603      	mov	r3, r0
    e866:	2b00      	cmp	r3, #0
    e868:	bf0c      	ite	eq
    e86a:	2301      	moveq	r3, #1
    e86c:	2300      	movne	r3, #0
    e86e:	b2db      	uxtb	r3, r3
    e870:	e01a      	b.n	e8a8 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    e872:	79fb      	ldrb	r3, [r7, #7]
    e874:	6839      	ldr	r1, [r7, #0]
    e876:	4618      	mov	r0, r3
    e878:	4b0f      	ldr	r3, [pc, #60]	; (e8b8 <usbdc_set_req+0xe0>)
    e87a:	4798      	blx	r3
    e87c:	4603      	mov	r3, r0
    e87e:	e013      	b.n	e8a8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    e880:	79fb      	ldrb	r3, [r7, #7]
    e882:	6839      	ldr	r1, [r7, #0]
    e884:	4618      	mov	r0, r3
    e886:	4b0d      	ldr	r3, [pc, #52]	; (e8bc <usbdc_set_req+0xe4>)
    e888:	4798      	blx	r3
    e88a:	4603      	mov	r3, r0
    e88c:	e00c      	b.n	e8a8 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    e88e:	683b      	ldr	r3, [r7, #0]
    e890:	885b      	ldrh	r3, [r3, #2]
    e892:	b29a      	uxth	r2, r3
    e894:	683b      	ldr	r3, [r7, #0]
    e896:	889b      	ldrh	r3, [r3, #4]
    e898:	b29b      	uxth	r3, r3
    e89a:	4619      	mov	r1, r3
    e89c:	4610      	mov	r0, r2
    e89e:	4b08      	ldr	r3, [pc, #32]	; (e8c0 <usbdc_set_req+0xe8>)
    e8a0:	4798      	blx	r3
    e8a2:	4603      	mov	r3, r0
    e8a4:	e000      	b.n	e8a8 <usbdc_set_req+0xd0>
	default:
		return false;
    e8a6:	2300      	movs	r3, #0
	}
}
    e8a8:	4618      	mov	r0, r3
    e8aa:	370c      	adds	r7, #12
    e8ac:	46bd      	mov	sp, r7
    e8ae:	bd90      	pop	{r4, r7, pc}
    e8b0:	0000ebad 	.word	0x0000ebad
    e8b4:	0000e58d 	.word	0x0000e58d
    e8b8:	0000e4a9 	.word	0x0000e4a9
    e8bc:	0000e501 	.word	0x0000e501
    e8c0:	0000e699 	.word	0x0000e699

0000e8c4 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    e8c4:	b580      	push	{r7, lr}
    e8c6:	b082      	sub	sp, #8
    e8c8:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    e8ca:	4b0a      	ldr	r3, [pc, #40]	; (e8f4 <usbdc_sof_notify+0x30>)
    e8cc:	685b      	ldr	r3, [r3, #4]
    e8ce:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    e8d0:	e009      	b.n	e8e6 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    e8d2:	687b      	ldr	r3, [r7, #4]
    e8d4:	685b      	ldr	r3, [r3, #4]
    e8d6:	2b00      	cmp	r3, #0
    e8d8:	d002      	beq.n	e8e0 <usbdc_sof_notify+0x1c>
			sof->cb();
    e8da:	687b      	ldr	r3, [r7, #4]
    e8dc:	685b      	ldr	r3, [r3, #4]
    e8de:	4798      	blx	r3
		}
		sof = sof->next;
    e8e0:	687b      	ldr	r3, [r7, #4]
    e8e2:	681b      	ldr	r3, [r3, #0]
    e8e4:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    e8e6:	687b      	ldr	r3, [r7, #4]
    e8e8:	2b00      	cmp	r3, #0
    e8ea:	d1f2      	bne.n	e8d2 <usbdc_sof_notify+0xe>
	}
}
    e8ec:	bf00      	nop
    e8ee:	3708      	adds	r7, #8
    e8f0:	46bd      	mov	sp, r7
    e8f2:	bd80      	pop	{r7, pc}
    e8f4:	200027c8 	.word	0x200027c8

0000e8f8 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    e8f8:	b580      	push	{r7, lr}
    e8fa:	b084      	sub	sp, #16
    e8fc:	af00      	add	r7, sp, #0
    e8fe:	4603      	mov	r3, r0
    e900:	6039      	str	r1, [r7, #0]
    e902:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    e904:	4b0b      	ldr	r3, [pc, #44]	; (e934 <usbdc_change_notify+0x3c>)
    e906:	68db      	ldr	r3, [r3, #12]
    e908:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    e90a:	e00c      	b.n	e926 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    e90c:	68fb      	ldr	r3, [r7, #12]
    e90e:	685b      	ldr	r3, [r3, #4]
    e910:	2b00      	cmp	r3, #0
    e912:	d005      	beq.n	e920 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    e914:	68fb      	ldr	r3, [r7, #12]
    e916:	685b      	ldr	r3, [r3, #4]
    e918:	79fa      	ldrb	r2, [r7, #7]
    e91a:	6839      	ldr	r1, [r7, #0]
    e91c:	4610      	mov	r0, r2
    e91e:	4798      	blx	r3
		}
		cg = cg->next;
    e920:	68fb      	ldr	r3, [r7, #12]
    e922:	681b      	ldr	r3, [r3, #0]
    e924:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    e926:	68fb      	ldr	r3, [r7, #12]
    e928:	2b00      	cmp	r3, #0
    e92a:	d1ef      	bne.n	e90c <usbdc_change_notify+0x14>
	}
}
    e92c:	bf00      	nop
    e92e:	3710      	adds	r7, #16
    e930:	46bd      	mov	sp, r7
    e932:	bd80      	pop	{r7, pc}
    e934:	200027c8 	.word	0x200027c8

0000e938 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e938:	b580      	push	{r7, lr}
    e93a:	b084      	sub	sp, #16
    e93c:	af00      	add	r7, sp, #0
    e93e:	4603      	mov	r3, r0
    e940:	6039      	str	r1, [r7, #0]
    e942:	71fb      	strb	r3, [r7, #7]
    e944:	4613      	mov	r3, r2
    e946:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    e948:	4b12      	ldr	r3, [pc, #72]	; (e994 <usbdc_request_handler+0x5c>)
    e94a:	689b      	ldr	r3, [r3, #8]
    e94c:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    e94e:	e019      	b.n	e984 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    e950:	68fb      	ldr	r3, [r7, #12]
    e952:	685b      	ldr	r3, [r3, #4]
    e954:	2b00      	cmp	r3, #0
    e956:	d012      	beq.n	e97e <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    e958:	68fb      	ldr	r3, [r7, #12]
    e95a:	685b      	ldr	r3, [r3, #4]
    e95c:	79ba      	ldrb	r2, [r7, #6]
    e95e:	79f8      	ldrb	r0, [r7, #7]
    e960:	6839      	ldr	r1, [r7, #0]
    e962:	4798      	blx	r3
    e964:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    e966:	68bb      	ldr	r3, [r7, #8]
    e968:	2b00      	cmp	r3, #0
    e96a:	d101      	bne.n	e970 <usbdc_request_handler+0x38>
				return true;
    e96c:	2301      	movs	r3, #1
    e96e:	e00d      	b.n	e98c <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    e970:	68bb      	ldr	r3, [r7, #8]
    e972:	f113 0f0a 	cmn.w	r3, #10
    e976:	d002      	beq.n	e97e <usbdc_request_handler+0x46>
				return -1;
    e978:	f04f 33ff 	mov.w	r3, #4294967295
    e97c:	e006      	b.n	e98c <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    e97e:	68fb      	ldr	r3, [r7, #12]
    e980:	681b      	ldr	r3, [r3, #0]
    e982:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    e984:	68fb      	ldr	r3, [r7, #12]
    e986:	2b00      	cmp	r3, #0
    e988:	d1e2      	bne.n	e950 <usbdc_request_handler+0x18>
	}
	return false;
    e98a:	2300      	movs	r3, #0
}
    e98c:	4618      	mov	r0, r3
    e98e:	3710      	adds	r7, #16
    e990:	46bd      	mov	sp, r7
    e992:	bd80      	pop	{r7, pc}
    e994:	200027c8 	.word	0x200027c8

0000e998 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    e998:	b580      	push	{r7, lr}
    e99a:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    e99c:	4b01      	ldr	r3, [pc, #4]	; (e9a4 <usbd_sof_cb+0xc>)
    e99e:	4798      	blx	r3
}
    e9a0:	bf00      	nop
    e9a2:	bd80      	pop	{r7, pc}
    e9a4:	0000e8c5 	.word	0x0000e8c5

0000e9a8 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    e9a8:	b580      	push	{r7, lr}
    e9aa:	b082      	sub	sp, #8
    e9ac:	af00      	add	r7, sp, #0
    e9ae:	4603      	mov	r3, r0
    e9b0:	6039      	str	r1, [r7, #0]
    e9b2:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    e9b4:	79fb      	ldrb	r3, [r7, #7]
    e9b6:	2200      	movs	r2, #0
    e9b8:	6839      	ldr	r1, [r7, #0]
    e9ba:	4618      	mov	r0, r3
    e9bc:	4b14      	ldr	r3, [pc, #80]	; (ea10 <usbdc_cb_ctl_req+0x68>)
    e9be:	4798      	blx	r3
    e9c0:	4603      	mov	r3, r0
    e9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
    e9c6:	d00b      	beq.n	e9e0 <usbdc_cb_ctl_req+0x38>
    e9c8:	2b01      	cmp	r3, #1
    e9ca:	d007      	beq.n	e9dc <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    e9cc:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    e9ce:	683b      	ldr	r3, [r7, #0]
    e9d0:	781b      	ldrb	r3, [r3, #0]
    e9d2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e9d6:	2b00      	cmp	r3, #0
    e9d8:	d007      	beq.n	e9ea <usbdc_cb_ctl_req+0x42>
    e9da:	e003      	b.n	e9e4 <usbdc_cb_ctl_req+0x3c>
		return true;
    e9dc:	2301      	movs	r3, #1
    e9de:	e013      	b.n	ea08 <usbdc_cb_ctl_req+0x60>
		return false;
    e9e0:	2300      	movs	r3, #0
    e9e2:	e011      	b.n	ea08 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    e9e4:	2b80      	cmp	r3, #128	; 0x80
    e9e6:	d007      	beq.n	e9f8 <usbdc_cb_ctl_req+0x50>
    e9e8:	e00d      	b.n	ea06 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    e9ea:	79fb      	ldrb	r3, [r7, #7]
    e9ec:	6839      	ldr	r1, [r7, #0]
    e9ee:	4618      	mov	r0, r3
    e9f0:	4b08      	ldr	r3, [pc, #32]	; (ea14 <usbdc_cb_ctl_req+0x6c>)
    e9f2:	4798      	blx	r3
    e9f4:	4603      	mov	r3, r0
    e9f6:	e007      	b.n	ea08 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    e9f8:	79fb      	ldrb	r3, [r7, #7]
    e9fa:	6839      	ldr	r1, [r7, #0]
    e9fc:	4618      	mov	r0, r3
    e9fe:	4b06      	ldr	r3, [pc, #24]	; (ea18 <usbdc_cb_ctl_req+0x70>)
    ea00:	4798      	blx	r3
    ea02:	4603      	mov	r3, r0
    ea04:	e000      	b.n	ea08 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    ea06:	2300      	movs	r3, #0
	}
}
    ea08:	4618      	mov	r0, r3
    ea0a:	3708      	adds	r7, #8
    ea0c:	46bd      	mov	sp, r7
    ea0e:	bd80      	pop	{r7, pc}
    ea10:	0000e939 	.word	0x0000e939
    ea14:	0000e7d9 	.word	0x0000e7d9
    ea18:	0000e401 	.word	0x0000e401

0000ea1c <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    ea1c:	b580      	push	{r7, lr}
    ea1e:	b082      	sub	sp, #8
    ea20:	af00      	add	r7, sp, #0
    ea22:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    ea24:	687b      	ldr	r3, [r7, #4]
    ea26:	781b      	ldrb	r3, [r3, #0]
    ea28:	2b00      	cmp	r3, #0
    ea2a:	d135      	bne.n	ea98 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    ea2c:	687b      	ldr	r3, [r7, #4]
    ea2e:	785b      	ldrb	r3, [r3, #1]
    ea30:	2b05      	cmp	r3, #5
    ea32:	d019      	beq.n	ea68 <usbdc_ctrl_status_end+0x4c>
    ea34:	2b09      	cmp	r3, #9
    ea36:	d000      	beq.n	ea3a <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    ea38:	e02f      	b.n	ea9a <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    ea3a:	687b      	ldr	r3, [r7, #4]
    ea3c:	885b      	ldrh	r3, [r3, #2]
    ea3e:	b29b      	uxth	r3, r3
    ea40:	b2da      	uxtb	r2, r3
    ea42:	4b17      	ldr	r3, [pc, #92]	; (eaa0 <usbdc_ctrl_status_end+0x84>)
    ea44:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    ea46:	687b      	ldr	r3, [r7, #4]
    ea48:	885b      	ldrh	r3, [r3, #2]
    ea4a:	b29b      	uxth	r3, r3
    ea4c:	2b00      	cmp	r3, #0
    ea4e:	d001      	beq.n	ea54 <usbdc_ctrl_status_end+0x38>
    ea50:	2204      	movs	r2, #4
    ea52:	e000      	b.n	ea56 <usbdc_ctrl_status_end+0x3a>
    ea54:	2203      	movs	r2, #3
    ea56:	4b12      	ldr	r3, [pc, #72]	; (eaa0 <usbdc_ctrl_status_end+0x84>)
    ea58:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ea5a:	4b11      	ldr	r3, [pc, #68]	; (eaa0 <usbdc_ctrl_status_end+0x84>)
    ea5c:	7e9b      	ldrb	r3, [r3, #26]
    ea5e:	4619      	mov	r1, r3
    ea60:	2001      	movs	r0, #1
    ea62:	4b10      	ldr	r3, [pc, #64]	; (eaa4 <usbdc_ctrl_status_end+0x88>)
    ea64:	4798      	blx	r3
		break;
    ea66:	e018      	b.n	ea9a <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    ea68:	687b      	ldr	r3, [r7, #4]
    ea6a:	885b      	ldrh	r3, [r3, #2]
    ea6c:	b29b      	uxth	r3, r3
    ea6e:	b2db      	uxtb	r3, r3
    ea70:	4618      	mov	r0, r3
    ea72:	4b0d      	ldr	r3, [pc, #52]	; (eaa8 <usbdc_ctrl_status_end+0x8c>)
    ea74:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    ea76:	687b      	ldr	r3, [r7, #4]
    ea78:	885b      	ldrh	r3, [r3, #2]
    ea7a:	b29b      	uxth	r3, r3
    ea7c:	2b00      	cmp	r3, #0
    ea7e:	d001      	beq.n	ea84 <usbdc_ctrl_status_end+0x68>
    ea80:	2203      	movs	r2, #3
    ea82:	e000      	b.n	ea86 <usbdc_ctrl_status_end+0x6a>
    ea84:	2202      	movs	r2, #2
    ea86:	4b06      	ldr	r3, [pc, #24]	; (eaa0 <usbdc_ctrl_status_end+0x84>)
    ea88:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ea8a:	4b05      	ldr	r3, [pc, #20]	; (eaa0 <usbdc_ctrl_status_end+0x84>)
    ea8c:	7e9b      	ldrb	r3, [r3, #26]
    ea8e:	4619      	mov	r1, r3
    ea90:	2001      	movs	r0, #1
    ea92:	4b04      	ldr	r3, [pc, #16]	; (eaa4 <usbdc_ctrl_status_end+0x88>)
    ea94:	4798      	blx	r3
		break;
    ea96:	e000      	b.n	ea9a <usbdc_ctrl_status_end+0x7e>
		return;
    ea98:	bf00      	nop
	}
}
    ea9a:	3708      	adds	r7, #8
    ea9c:	46bd      	mov	sp, r7
    ea9e:	bd80      	pop	{r7, pc}
    eaa0:	200027c8 	.word	0x200027c8
    eaa4:	0000e8f9 	.word	0x0000e8f9
    eaa8:	0000e679 	.word	0x0000e679

0000eaac <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    eaac:	b580      	push	{r7, lr}
    eaae:	b082      	sub	sp, #8
    eab0:	af00      	add	r7, sp, #0
    eab2:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    eab4:	2201      	movs	r2, #1
    eab6:	6879      	ldr	r1, [r7, #4]
    eab8:	2000      	movs	r0, #0
    eaba:	4b03      	ldr	r3, [pc, #12]	; (eac8 <usbdc_ctrl_data_end+0x1c>)
    eabc:	4798      	blx	r3
	return false;
    eabe:	2300      	movs	r3, #0
}
    eac0:	4618      	mov	r0, r3
    eac2:	3708      	adds	r7, #8
    eac4:	46bd      	mov	sp, r7
    eac6:	bd80      	pop	{r7, pc}
    eac8:	0000e939 	.word	0x0000e939

0000eacc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    eacc:	b580      	push	{r7, lr}
    eace:	b082      	sub	sp, #8
    ead0:	af00      	add	r7, sp, #0
    ead2:	4603      	mov	r3, r0
    ead4:	603a      	str	r2, [r7, #0]
    ead6:	71fb      	strb	r3, [r7, #7]
    ead8:	460b      	mov	r3, r1
    eada:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    eadc:	79bb      	ldrb	r3, [r7, #6]
    eade:	2b00      	cmp	r3, #0
    eae0:	d002      	beq.n	eae8 <usbdc_cb_ctl_done+0x1c>
    eae2:	2b01      	cmp	r3, #1
    eae4:	d004      	beq.n	eaf0 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    eae6:	e008      	b.n	eafa <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    eae8:	6838      	ldr	r0, [r7, #0]
    eaea:	4b06      	ldr	r3, [pc, #24]	; (eb04 <usbdc_cb_ctl_done+0x38>)
    eaec:	4798      	blx	r3
		break;
    eaee:	e004      	b.n	eafa <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    eaf0:	6838      	ldr	r0, [r7, #0]
    eaf2:	4b05      	ldr	r3, [pc, #20]	; (eb08 <usbdc_cb_ctl_done+0x3c>)
    eaf4:	4798      	blx	r3
    eaf6:	4603      	mov	r3, r0
    eaf8:	e000      	b.n	eafc <usbdc_cb_ctl_done+0x30>
	}
	return false;
    eafa:	2300      	movs	r3, #0
}
    eafc:	4618      	mov	r0, r3
    eafe:	3708      	adds	r7, #8
    eb00:	46bd      	mov	sp, r7
    eb02:	bd80      	pop	{r7, pc}
    eb04:	0000ea1d 	.word	0x0000ea1d
    eb08:	0000eaad 	.word	0x0000eaad

0000eb0c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    eb0c:	b580      	push	{r7, lr}
    eb0e:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    eb10:	4b10      	ldr	r3, [pc, #64]	; (eb54 <usbdc_reset+0x48>)
    eb12:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    eb14:	4b10      	ldr	r3, [pc, #64]	; (eb58 <usbdc_reset+0x4c>)
    eb16:	2202      	movs	r2, #2
    eb18:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    eb1a:	4b0f      	ldr	r3, [pc, #60]	; (eb58 <usbdc_reset+0x4c>)
    eb1c:	2200      	movs	r2, #0
    eb1e:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    eb20:	4b0d      	ldr	r3, [pc, #52]	; (eb58 <usbdc_reset+0x4c>)
    eb22:	2200      	movs	r2, #0
    eb24:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    eb26:	2000      	movs	r0, #0
    eb28:	4b0c      	ldr	r3, [pc, #48]	; (eb5c <usbdc_reset+0x50>)
    eb2a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    eb2c:	4b0a      	ldr	r3, [pc, #40]	; (eb58 <usbdc_reset+0x4c>)
    eb2e:	7f1b      	ldrb	r3, [r3, #28]
    eb30:	4618      	mov	r0, r3
    eb32:	4b0b      	ldr	r3, [pc, #44]	; (eb60 <usbdc_reset+0x54>)
    eb34:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    eb36:	4a0b      	ldr	r2, [pc, #44]	; (eb64 <usbdc_reset+0x58>)
    eb38:	2100      	movs	r1, #0
    eb3a:	2000      	movs	r0, #0
    eb3c:	4b0a      	ldr	r3, [pc, #40]	; (eb68 <usbdc_reset+0x5c>)
    eb3e:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    eb40:	4a0a      	ldr	r2, [pc, #40]	; (eb6c <usbdc_reset+0x60>)
    eb42:	2102      	movs	r1, #2
    eb44:	2000      	movs	r0, #0
    eb46:	4b08      	ldr	r3, [pc, #32]	; (eb68 <usbdc_reset+0x5c>)
    eb48:	4798      	blx	r3
	usb_d_ep_enable(0);
    eb4a:	2000      	movs	r0, #0
    eb4c:	4b08      	ldr	r3, [pc, #32]	; (eb70 <usbdc_reset+0x64>)
    eb4e:	4798      	blx	r3
}
    eb50:	bf00      	nop
    eb52:	bd80      	pop	{r7, pc}
    eb54:	0000e559 	.word	0x0000e559
    eb58:	200027c8 	.word	0x200027c8
    eb5c:	0000490d 	.word	0x0000490d
    eb60:	00004849 	.word	0x00004849
    eb64:	0000e9a9 	.word	0x0000e9a9
    eb68:	00004c61 	.word	0x00004c61
    eb6c:	0000eacd 	.word	0x0000eacd
    eb70:	0000495d 	.word	0x0000495d

0000eb74 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    eb74:	b580      	push	{r7, lr}
    eb76:	b082      	sub	sp, #8
    eb78:	af00      	add	r7, sp, #0
    eb7a:	4603      	mov	r3, r0
    eb7c:	6039      	str	r1, [r7, #0]
    eb7e:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    eb80:	79fb      	ldrb	r3, [r7, #7]
    eb82:	2b00      	cmp	r3, #0
    eb84:	d002      	beq.n	eb8c <usbd_event_cb+0x18>
    eb86:	2b01      	cmp	r3, #1
    eb88:	d005      	beq.n	eb96 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    eb8a:	e007      	b.n	eb9c <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    eb8c:	6839      	ldr	r1, [r7, #0]
    eb8e:	2000      	movs	r0, #0
    eb90:	4b04      	ldr	r3, [pc, #16]	; (eba4 <usbd_event_cb+0x30>)
    eb92:	4798      	blx	r3
		break;
    eb94:	e002      	b.n	eb9c <usbd_event_cb+0x28>
		usbdc_reset();
    eb96:	4b04      	ldr	r3, [pc, #16]	; (eba8 <usbd_event_cb+0x34>)
    eb98:	4798      	blx	r3
		break;
    eb9a:	bf00      	nop
	}
}
    eb9c:	bf00      	nop
    eb9e:	3708      	adds	r7, #8
    eba0:	46bd      	mov	sp, r7
    eba2:	bd80      	pop	{r7, pc}
    eba4:	0000e8f9 	.word	0x0000e8f9
    eba8:	0000eb0d 	.word	0x0000eb0d

0000ebac <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    ebac:	b580      	push	{r7, lr}
    ebae:	b088      	sub	sp, #32
    ebb0:	af00      	add	r7, sp, #0
    ebb2:	60b9      	str	r1, [r7, #8]
    ebb4:	607a      	str	r2, [r7, #4]
    ebb6:	461a      	mov	r2, r3
    ebb8:	4603      	mov	r3, r0
    ebba:	73fb      	strb	r3, [r7, #15]
    ebbc:	4613      	mov	r3, r2
    ebbe:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    ebc0:	68bb      	ldr	r3, [r7, #8]
    ebc2:	617b      	str	r3, [r7, #20]
    ebc4:	687b      	ldr	r3, [r7, #4]
    ebc6:	61bb      	str	r3, [r7, #24]
    ebc8:	7bfb      	ldrb	r3, [r7, #15]
    ebca:	773b      	strb	r3, [r7, #28]
    ebcc:	7bbb      	ldrb	r3, [r7, #14]
    ebce:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    ebd0:	f107 0314 	add.w	r3, r7, #20
    ebd4:	4618      	mov	r0, r3
    ebd6:	4b03      	ldr	r3, [pc, #12]	; (ebe4 <usbdc_xfer+0x38>)
    ebd8:	4798      	blx	r3
    ebda:	4603      	mov	r3, r0
}
    ebdc:	4618      	mov	r0, r3
    ebde:	3720      	adds	r7, #32
    ebe0:	46bd      	mov	sp, r7
    ebe2:	bd80      	pop	{r7, pc}
    ebe4:	000049cd 	.word	0x000049cd

0000ebe8 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    ebe8:	b580      	push	{r7, lr}
    ebea:	b082      	sub	sp, #8
    ebec:	af00      	add	r7, sp, #0
    ebee:	4603      	mov	r3, r0
    ebf0:	6039      	str	r1, [r7, #0]
    ebf2:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    ebf4:	79fb      	ldrb	r3, [r7, #7]
    ebf6:	2b01      	cmp	r3, #1
    ebf8:	d009      	beq.n	ec0e <usbdc_register_handler+0x26>
    ebfa:	2b02      	cmp	r3, #2
    ebfc:	d00c      	beq.n	ec18 <usbdc_register_handler+0x30>
    ebfe:	2b00      	cmp	r3, #0
    ec00:	d000      	beq.n	ec04 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    ec02:	e00e      	b.n	ec22 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    ec04:	6839      	ldr	r1, [r7, #0]
    ec06:	4809      	ldr	r0, [pc, #36]	; (ec2c <usbdc_register_handler+0x44>)
    ec08:	4b09      	ldr	r3, [pc, #36]	; (ec30 <usbdc_register_handler+0x48>)
    ec0a:	4798      	blx	r3
		break;
    ec0c:	e009      	b.n	ec22 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    ec0e:	6839      	ldr	r1, [r7, #0]
    ec10:	4808      	ldr	r0, [pc, #32]	; (ec34 <usbdc_register_handler+0x4c>)
    ec12:	4b07      	ldr	r3, [pc, #28]	; (ec30 <usbdc_register_handler+0x48>)
    ec14:	4798      	blx	r3
		break;
    ec16:	e004      	b.n	ec22 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    ec18:	6839      	ldr	r1, [r7, #0]
    ec1a:	4807      	ldr	r0, [pc, #28]	; (ec38 <usbdc_register_handler+0x50>)
    ec1c:	4b04      	ldr	r3, [pc, #16]	; (ec30 <usbdc_register_handler+0x48>)
    ec1e:	4798      	blx	r3
		break;
    ec20:	bf00      	nop
	}
}
    ec22:	bf00      	nop
    ec24:	3708      	adds	r7, #8
    ec26:	46bd      	mov	sp, r7
    ec28:	bd80      	pop	{r7, pc}
    ec2a:	bf00      	nop
    ec2c:	200027cc 	.word	0x200027cc
    ec30:	00004db9 	.word	0x00004db9
    ec34:	200027d0 	.word	0x200027d0
    ec38:	200027d4 	.word	0x200027d4

0000ec3c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    ec3c:	b580      	push	{r7, lr}
    ec3e:	b084      	sub	sp, #16
    ec40:	af00      	add	r7, sp, #0
    ec42:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    ec44:	687b      	ldr	r3, [r7, #4]
    ec46:	2b00      	cmp	r3, #0
    ec48:	bf14      	ite	ne
    ec4a:	2301      	movne	r3, #1
    ec4c:	2300      	moveq	r3, #0
    ec4e:	b2db      	uxtb	r3, r3
    ec50:	f240 3255 	movw	r2, #853	; 0x355
    ec54:	4910      	ldr	r1, [pc, #64]	; (ec98 <usbdc_init+0x5c>)
    ec56:	4618      	mov	r0, r3
    ec58:	4b10      	ldr	r3, [pc, #64]	; (ec9c <usbdc_init+0x60>)
    ec5a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    ec5c:	4b10      	ldr	r3, [pc, #64]	; (eca0 <usbdc_init+0x64>)
    ec5e:	4798      	blx	r3
    ec60:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    ec62:	68fb      	ldr	r3, [r7, #12]
    ec64:	2b00      	cmp	r3, #0
    ec66:	da01      	bge.n	ec6c <usbdc_init+0x30>
		return rc;
    ec68:	68fb      	ldr	r3, [r7, #12]
    ec6a:	e010      	b.n	ec8e <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    ec6c:	2220      	movs	r2, #32
    ec6e:	2100      	movs	r1, #0
    ec70:	480c      	ldr	r0, [pc, #48]	; (eca4 <usbdc_init+0x68>)
    ec72:	4b0d      	ldr	r3, [pc, #52]	; (eca8 <usbdc_init+0x6c>)
    ec74:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    ec76:	4a0b      	ldr	r2, [pc, #44]	; (eca4 <usbdc_init+0x68>)
    ec78:	687b      	ldr	r3, [r7, #4]
    ec7a:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    ec7c:	490b      	ldr	r1, [pc, #44]	; (ecac <usbdc_init+0x70>)
    ec7e:	2000      	movs	r0, #0
    ec80:	4b0b      	ldr	r3, [pc, #44]	; (ecb0 <usbdc_init+0x74>)
    ec82:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    ec84:	490b      	ldr	r1, [pc, #44]	; (ecb4 <usbdc_init+0x78>)
    ec86:	2001      	movs	r0, #1
    ec88:	4b09      	ldr	r3, [pc, #36]	; (ecb0 <usbdc_init+0x74>)
    ec8a:	4798      	blx	r3

	return 0;
    ec8c:	2300      	movs	r3, #0
}
    ec8e:	4618      	mov	r0, r3
    ec90:	3710      	adds	r7, #16
    ec92:	46bd      	mov	sp, r7
    ec94:	bd80      	pop	{r7, pc}
    ec96:	bf00      	nop
    ec98:	0001b508 	.word	0x0001b508
    ec9c:	00004cdd 	.word	0x00004cdd
    eca0:	00004735 	.word	0x00004735
    eca4:	200027c8 	.word	0x200027c8
    eca8:	0001acc5 	.word	0x0001acc5
    ecac:	0000e999 	.word	0x0000e999
    ecb0:	000047e1 	.word	0x000047e1
    ecb4:	0000eb75 	.word	0x0000eb75

0000ecb8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    ecb8:	b580      	push	{r7, lr}
    ecba:	b082      	sub	sp, #8
    ecbc:	af00      	add	r7, sp, #0
    ecbe:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    ecc0:	6879      	ldr	r1, [r7, #4]
    ecc2:	4803      	ldr	r0, [pc, #12]	; (ecd0 <usbdc_register_function+0x18>)
    ecc4:	4b03      	ldr	r3, [pc, #12]	; (ecd4 <usbdc_register_function+0x1c>)
    ecc6:	4798      	blx	r3
}
    ecc8:	bf00      	nop
    ecca:	3708      	adds	r7, #8
    eccc:	46bd      	mov	sp, r7
    ecce:	bd80      	pop	{r7, pc}
    ecd0:	200027d8 	.word	0x200027d8
    ecd4:	00004db9 	.word	0x00004db9

0000ecd8 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    ecd8:	b580      	push	{r7, lr}
    ecda:	b082      	sub	sp, #8
    ecdc:	af00      	add	r7, sp, #0
    ecde:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    ece0:	4b0f      	ldr	r3, [pc, #60]	; (ed20 <usbdc_start+0x48>)
    ece2:	7e9b      	ldrb	r3, [r3, #26]
    ece4:	2b00      	cmp	r3, #0
    ece6:	d002      	beq.n	ecee <usbdc_start+0x16>
		return ERR_BUSY;
    ece8:	f06f 0303 	mvn.w	r3, #3
    ecec:	e013      	b.n	ed16 <usbdc_start+0x3e>
	}

	if (desces) {
    ecee:	687b      	ldr	r3, [r7, #4]
    ecf0:	2b00      	cmp	r3, #0
    ecf2:	d00e      	beq.n	ed12 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    ecf4:	4a0a      	ldr	r2, [pc, #40]	; (ed20 <usbdc_start+0x48>)
    ecf6:	687b      	ldr	r3, [r7, #4]
    ecf8:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    ecfa:	687b      	ldr	r3, [r7, #4]
    ecfc:	681b      	ldr	r3, [r3, #0]
    ecfe:	79da      	ldrb	r2, [r3, #7]
    ed00:	4b07      	ldr	r3, [pc, #28]	; (ed20 <usbdc_start+0x48>)
    ed02:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    ed04:	4b06      	ldr	r3, [pc, #24]	; (ed20 <usbdc_start+0x48>)
    ed06:	2201      	movs	r2, #1
    ed08:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    ed0a:	4b06      	ldr	r3, [pc, #24]	; (ed24 <usbdc_start+0x4c>)
    ed0c:	4798      	blx	r3
	return ERR_NONE;
    ed0e:	2300      	movs	r3, #0
    ed10:	e001      	b.n	ed16 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    ed12:	f06f 0308 	mvn.w	r3, #8
}
    ed16:	4618      	mov	r0, r3
    ed18:	3708      	adds	r7, #8
    ed1a:	46bd      	mov	sp, r7
    ed1c:	bd80      	pop	{r7, pc}
    ed1e:	bf00      	nop
    ed20:	200027c8 	.word	0x200027c8
    ed24:	00004805 	.word	0x00004805

0000ed28 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    ed28:	b580      	push	{r7, lr}
    ed2a:	af00      	add	r7, sp, #0
	usb_d_attach();
    ed2c:	4b01      	ldr	r3, [pc, #4]	; (ed34 <usbdc_attach+0xc>)
    ed2e:	4798      	blx	r3
}
    ed30:	bf00      	nop
    ed32:	bd80      	pop	{r7, pc}
    ed34:	00004819 	.word	0x00004819

0000ed38 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    ed38:	b480      	push	{r7}
    ed3a:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    ed3c:	4b03      	ldr	r3, [pc, #12]	; (ed4c <usbdc_get_ctrl_buffer+0x14>)
    ed3e:	695b      	ldr	r3, [r3, #20]
}
    ed40:	4618      	mov	r0, r3
    ed42:	46bd      	mov	sp, r7
    ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
    ed48:	4770      	bx	lr
    ed4a:	bf00      	nop
    ed4c:	200027c8 	.word	0x200027c8

0000ed50 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    ed50:	b480      	push	{r7}
    ed52:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    ed54:	4b07      	ldr	r3, [pc, #28]	; (ed74 <usbdc_get_state+0x24>)
    ed56:	7e9b      	ldrb	r3, [r3, #26]
    ed58:	f003 0310 	and.w	r3, r3, #16
    ed5c:	2b00      	cmp	r3, #0
    ed5e:	d001      	beq.n	ed64 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    ed60:	2310      	movs	r3, #16
    ed62:	e001      	b.n	ed68 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    ed64:	4b03      	ldr	r3, [pc, #12]	; (ed74 <usbdc_get_state+0x24>)
    ed66:	7e9b      	ldrb	r3, [r3, #26]
}
    ed68:	4618      	mov	r0, r3
    ed6a:	46bd      	mov	sp, r7
    ed6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ed70:	4770      	bx	lr
    ed72:	bf00      	nop
    ed74:	200027c8 	.word	0x200027c8

0000ed78 <usb_get_u16>:
{
    ed78:	b480      	push	{r7}
    ed7a:	b083      	sub	sp, #12
    ed7c:	af00      	add	r7, sp, #0
    ed7e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    ed80:	687b      	ldr	r3, [r7, #4]
    ed82:	781b      	ldrb	r3, [r3, #0]
    ed84:	b29a      	uxth	r2, r3
    ed86:	687b      	ldr	r3, [r7, #4]
    ed88:	3301      	adds	r3, #1
    ed8a:	781b      	ldrb	r3, [r3, #0]
    ed8c:	b29b      	uxth	r3, r3
    ed8e:	021b      	lsls	r3, r3, #8
    ed90:	b29b      	uxth	r3, r3
    ed92:	4413      	add	r3, r2
    ed94:	b29b      	uxth	r3, r3
}
    ed96:	4618      	mov	r0, r3
    ed98:	370c      	adds	r7, #12
    ed9a:	46bd      	mov	sp, r7
    ed9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    eda0:	4770      	bx	lr

0000eda2 <usb_desc_len>:
{
    eda2:	b480      	push	{r7}
    eda4:	b083      	sub	sp, #12
    eda6:	af00      	add	r7, sp, #0
    eda8:	6078      	str	r0, [r7, #4]
	return desc[0];
    edaa:	687b      	ldr	r3, [r7, #4]
    edac:	781b      	ldrb	r3, [r3, #0]
}
    edae:	4618      	mov	r0, r3
    edb0:	370c      	adds	r7, #12
    edb2:	46bd      	mov	sp, r7
    edb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    edb8:	4770      	bx	lr

0000edba <usb_desc_type>:
{
    edba:	b480      	push	{r7}
    edbc:	b083      	sub	sp, #12
    edbe:	af00      	add	r7, sp, #0
    edc0:	6078      	str	r0, [r7, #4]
	return desc[1];
    edc2:	687b      	ldr	r3, [r7, #4]
    edc4:	3301      	adds	r3, #1
    edc6:	781b      	ldrb	r3, [r3, #0]
}
    edc8:	4618      	mov	r0, r3
    edca:	370c      	adds	r7, #12
    edcc:	46bd      	mov	sp, r7
    edce:	f85d 7b04 	ldr.w	r7, [sp], #4
    edd2:	4770      	bx	lr

0000edd4 <usb_desc_next>:
{
    edd4:	b580      	push	{r7, lr}
    edd6:	b082      	sub	sp, #8
    edd8:	af00      	add	r7, sp, #0
    edda:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    eddc:	6878      	ldr	r0, [r7, #4]
    edde:	4b05      	ldr	r3, [pc, #20]	; (edf4 <usb_desc_next+0x20>)
    ede0:	4798      	blx	r3
    ede2:	4603      	mov	r3, r0
    ede4:	461a      	mov	r2, r3
    ede6:	687b      	ldr	r3, [r7, #4]
    ede8:	4413      	add	r3, r2
}
    edea:	4618      	mov	r0, r3
    edec:	3708      	adds	r7, #8
    edee:	46bd      	mov	sp, r7
    edf0:	bd80      	pop	{r7, pc}
    edf2:	bf00      	nop
    edf4:	0000eda3 	.word	0x0000eda3

0000edf8 <usb_cfg_desc_total_len>:
{
    edf8:	b580      	push	{r7, lr}
    edfa:	b082      	sub	sp, #8
    edfc:	af00      	add	r7, sp, #0
    edfe:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    ee00:	687b      	ldr	r3, [r7, #4]
    ee02:	3302      	adds	r3, #2
    ee04:	4618      	mov	r0, r3
    ee06:	4b03      	ldr	r3, [pc, #12]	; (ee14 <usb_cfg_desc_total_len+0x1c>)
    ee08:	4798      	blx	r3
    ee0a:	4603      	mov	r3, r0
}
    ee0c:	4618      	mov	r0, r3
    ee0e:	3708      	adds	r7, #8
    ee10:	46bd      	mov	sp, r7
    ee12:	bd80      	pop	{r7, pc}
    ee14:	0000ed79 	.word	0x0000ed79

0000ee18 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    ee18:	b580      	push	{r7, lr}
    ee1a:	b082      	sub	sp, #8
    ee1c:	af00      	add	r7, sp, #0
    ee1e:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    ee20:	6878      	ldr	r0, [r7, #4]
    ee22:	4b05      	ldr	r3, [pc, #20]	; (ee38 <usb_cfg_desc_next+0x20>)
    ee24:	4798      	blx	r3
    ee26:	4603      	mov	r3, r0
    ee28:	461a      	mov	r2, r3
    ee2a:	687b      	ldr	r3, [r7, #4]
    ee2c:	4413      	add	r3, r2
}
    ee2e:	4618      	mov	r0, r3
    ee30:	3708      	adds	r7, #8
    ee32:	46bd      	mov	sp, r7
    ee34:	bd80      	pop	{r7, pc}
    ee36:	bf00      	nop
    ee38:	0000edf9 	.word	0x0000edf9

0000ee3c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    ee3c:	b580      	push	{r7, lr}
    ee3e:	b084      	sub	sp, #16
    ee40:	af00      	add	r7, sp, #0
    ee42:	60f8      	str	r0, [r7, #12]
    ee44:	60b9      	str	r1, [r7, #8]
    ee46:	4613      	mov	r3, r2
    ee48:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    ee4a:	e015      	b.n	ee78 <usb_find_desc+0x3c>
		_desc_len_check();
    ee4c:	68f8      	ldr	r0, [r7, #12]
    ee4e:	4b0f      	ldr	r3, [pc, #60]	; (ee8c <usb_find_desc+0x50>)
    ee50:	4798      	blx	r3
    ee52:	4603      	mov	r3, r0
    ee54:	2b01      	cmp	r3, #1
    ee56:	d801      	bhi.n	ee5c <usb_find_desc+0x20>
    ee58:	2300      	movs	r3, #0
    ee5a:	e012      	b.n	ee82 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    ee5c:	68f8      	ldr	r0, [r7, #12]
    ee5e:	4b0c      	ldr	r3, [pc, #48]	; (ee90 <usb_find_desc+0x54>)
    ee60:	4798      	blx	r3
    ee62:	4603      	mov	r3, r0
    ee64:	461a      	mov	r2, r3
    ee66:	79fb      	ldrb	r3, [r7, #7]
    ee68:	4293      	cmp	r3, r2
    ee6a:	d101      	bne.n	ee70 <usb_find_desc+0x34>
			return desc;
    ee6c:	68fb      	ldr	r3, [r7, #12]
    ee6e:	e008      	b.n	ee82 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    ee70:	68f8      	ldr	r0, [r7, #12]
    ee72:	4b08      	ldr	r3, [pc, #32]	; (ee94 <usb_find_desc+0x58>)
    ee74:	4798      	blx	r3
    ee76:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    ee78:	68fa      	ldr	r2, [r7, #12]
    ee7a:	68bb      	ldr	r3, [r7, #8]
    ee7c:	429a      	cmp	r2, r3
    ee7e:	d3e5      	bcc.n	ee4c <usb_find_desc+0x10>
	}
	return NULL;
    ee80:	2300      	movs	r3, #0
}
    ee82:	4618      	mov	r0, r3
    ee84:	3710      	adds	r7, #16
    ee86:	46bd      	mov	sp, r7
    ee88:	bd80      	pop	{r7, pc}
    ee8a:	bf00      	nop
    ee8c:	0000eda3 	.word	0x0000eda3
    ee90:	0000edbb 	.word	0x0000edbb
    ee94:	0000edd5 	.word	0x0000edd5

0000ee98 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    ee98:	b580      	push	{r7, lr}
    ee9a:	b082      	sub	sp, #8
    ee9c:	af00      	add	r7, sp, #0
    ee9e:	6078      	str	r0, [r7, #4]
    eea0:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    eea2:	e019      	b.n	eed8 <usb_find_ep_desc+0x40>
		_desc_len_check();
    eea4:	6878      	ldr	r0, [r7, #4]
    eea6:	4b12      	ldr	r3, [pc, #72]	; (eef0 <usb_find_ep_desc+0x58>)
    eea8:	4798      	blx	r3
    eeaa:	4603      	mov	r3, r0
    eeac:	2b01      	cmp	r3, #1
    eeae:	d801      	bhi.n	eeb4 <usb_find_ep_desc+0x1c>
    eeb0:	2300      	movs	r3, #0
    eeb2:	e018      	b.n	eee6 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    eeb4:	6878      	ldr	r0, [r7, #4]
    eeb6:	4b0f      	ldr	r3, [pc, #60]	; (eef4 <usb_find_ep_desc+0x5c>)
    eeb8:	4798      	blx	r3
    eeba:	4603      	mov	r3, r0
    eebc:	2b04      	cmp	r3, #4
    eebe:	d010      	beq.n	eee2 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    eec0:	6878      	ldr	r0, [r7, #4]
    eec2:	4b0c      	ldr	r3, [pc, #48]	; (eef4 <usb_find_ep_desc+0x5c>)
    eec4:	4798      	blx	r3
    eec6:	4603      	mov	r3, r0
    eec8:	2b05      	cmp	r3, #5
    eeca:	d101      	bne.n	eed0 <usb_find_ep_desc+0x38>
			return desc;
    eecc:	687b      	ldr	r3, [r7, #4]
    eece:	e00a      	b.n	eee6 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    eed0:	6878      	ldr	r0, [r7, #4]
    eed2:	4b09      	ldr	r3, [pc, #36]	; (eef8 <usb_find_ep_desc+0x60>)
    eed4:	4798      	blx	r3
    eed6:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    eed8:	687a      	ldr	r2, [r7, #4]
    eeda:	683b      	ldr	r3, [r7, #0]
    eedc:	429a      	cmp	r2, r3
    eede:	d3e1      	bcc.n	eea4 <usb_find_ep_desc+0xc>
    eee0:	e000      	b.n	eee4 <usb_find_ep_desc+0x4c>
			break;
    eee2:	bf00      	nop
	}
	return NULL;
    eee4:	2300      	movs	r3, #0
}
    eee6:	4618      	mov	r0, r3
    eee8:	3708      	adds	r7, #8
    eeea:	46bd      	mov	sp, r7
    eeec:	bd80      	pop	{r7, pc}
    eeee:	bf00      	nop
    eef0:	0000eda3 	.word	0x0000eda3
    eef4:	0000edbb 	.word	0x0000edbb
    eef8:	0000edd5 	.word	0x0000edd5

0000eefc <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    eefc:	b580      	push	{r7, lr}
    eefe:	b084      	sub	sp, #16
    ef00:	af00      	add	r7, sp, #0
    ef02:	60f8      	str	r0, [r7, #12]
    ef04:	60b9      	str	r1, [r7, #8]
    ef06:	4613      	mov	r3, r2
    ef08:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    ef0a:	2202      	movs	r2, #2
    ef0c:	68b9      	ldr	r1, [r7, #8]
    ef0e:	68f8      	ldr	r0, [r7, #12]
    ef10:	4b15      	ldr	r3, [pc, #84]	; (ef68 <usb_find_cfg_desc+0x6c>)
    ef12:	4798      	blx	r3
    ef14:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    ef16:	68fb      	ldr	r3, [r7, #12]
    ef18:	2b00      	cmp	r3, #0
    ef1a:	d11a      	bne.n	ef52 <usb_find_cfg_desc+0x56>
		return NULL;
    ef1c:	2300      	movs	r3, #0
    ef1e:	e01f      	b.n	ef60 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    ef20:	68f8      	ldr	r0, [r7, #12]
    ef22:	4b12      	ldr	r3, [pc, #72]	; (ef6c <usb_find_cfg_desc+0x70>)
    ef24:	4798      	blx	r3
    ef26:	4603      	mov	r3, r0
    ef28:	2b01      	cmp	r3, #1
    ef2a:	d801      	bhi.n	ef30 <usb_find_cfg_desc+0x34>
    ef2c:	2300      	movs	r3, #0
    ef2e:	e017      	b.n	ef60 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    ef30:	68fb      	ldr	r3, [r7, #12]
    ef32:	3301      	adds	r3, #1
    ef34:	781b      	ldrb	r3, [r3, #0]
    ef36:	2b02      	cmp	r3, #2
    ef38:	d110      	bne.n	ef5c <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    ef3a:	68fb      	ldr	r3, [r7, #12]
    ef3c:	3305      	adds	r3, #5
    ef3e:	781b      	ldrb	r3, [r3, #0]
    ef40:	79fa      	ldrb	r2, [r7, #7]
    ef42:	429a      	cmp	r2, r3
    ef44:	d101      	bne.n	ef4a <usb_find_cfg_desc+0x4e>
			return desc;
    ef46:	68fb      	ldr	r3, [r7, #12]
    ef48:	e00a      	b.n	ef60 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    ef4a:	68f8      	ldr	r0, [r7, #12]
    ef4c:	4b08      	ldr	r3, [pc, #32]	; (ef70 <usb_find_cfg_desc+0x74>)
    ef4e:	4798      	blx	r3
    ef50:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    ef52:	68fa      	ldr	r2, [r7, #12]
    ef54:	68bb      	ldr	r3, [r7, #8]
    ef56:	429a      	cmp	r2, r3
    ef58:	d3e2      	bcc.n	ef20 <usb_find_cfg_desc+0x24>
    ef5a:	e000      	b.n	ef5e <usb_find_cfg_desc+0x62>
			break;
    ef5c:	bf00      	nop
	}
	return NULL;
    ef5e:	2300      	movs	r3, #0
}
    ef60:	4618      	mov	r0, r3
    ef62:	3710      	adds	r7, #16
    ef64:	46bd      	mov	sp, r7
    ef66:	bd80      	pop	{r7, pc}
    ef68:	0000ee3d 	.word	0x0000ee3d
    ef6c:	0000eda3 	.word	0x0000eda3
    ef70:	0000ee19 	.word	0x0000ee19

0000ef74 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    ef74:	b580      	push	{r7, lr}
    ef76:	b086      	sub	sp, #24
    ef78:	af00      	add	r7, sp, #0
    ef7a:	60f8      	str	r0, [r7, #12]
    ef7c:	60b9      	str	r1, [r7, #8]
    ef7e:	4613      	mov	r3, r2
    ef80:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    ef82:	2300      	movs	r3, #0
    ef84:	75fb      	strb	r3, [r7, #23]
    ef86:	e020      	b.n	efca <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    ef88:	2203      	movs	r2, #3
    ef8a:	68b9      	ldr	r1, [r7, #8]
    ef8c:	68f8      	ldr	r0, [r7, #12]
    ef8e:	4b13      	ldr	r3, [pc, #76]	; (efdc <usb_find_str_desc+0x68>)
    ef90:	4798      	blx	r3
    ef92:	60f8      	str	r0, [r7, #12]
		if (desc) {
    ef94:	68fb      	ldr	r3, [r7, #12]
    ef96:	2b00      	cmp	r3, #0
    ef98:	d015      	beq.n	efc6 <usb_find_str_desc+0x52>
			_desc_len_check();
    ef9a:	68f8      	ldr	r0, [r7, #12]
    ef9c:	4b10      	ldr	r3, [pc, #64]	; (efe0 <usb_find_str_desc+0x6c>)
    ef9e:	4798      	blx	r3
    efa0:	4603      	mov	r3, r0
    efa2:	2b01      	cmp	r3, #1
    efa4:	d801      	bhi.n	efaa <usb_find_str_desc+0x36>
    efa6:	2300      	movs	r3, #0
    efa8:	e014      	b.n	efd4 <usb_find_str_desc+0x60>
			if (i == str_index) {
    efaa:	7dfa      	ldrb	r2, [r7, #23]
    efac:	79fb      	ldrb	r3, [r7, #7]
    efae:	429a      	cmp	r2, r3
    efb0:	d101      	bne.n	efb6 <usb_find_str_desc+0x42>
				return desc;
    efb2:	68fb      	ldr	r3, [r7, #12]
    efb4:	e00e      	b.n	efd4 <usb_find_str_desc+0x60>
			}
			i++;
    efb6:	7dfb      	ldrb	r3, [r7, #23]
    efb8:	3301      	adds	r3, #1
    efba:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    efbc:	68f8      	ldr	r0, [r7, #12]
    efbe:	4b09      	ldr	r3, [pc, #36]	; (efe4 <usb_find_str_desc+0x70>)
    efc0:	4798      	blx	r3
    efc2:	60f8      	str	r0, [r7, #12]
    efc4:	e001      	b.n	efca <usb_find_str_desc+0x56>
		} else {
			return NULL;
    efc6:	2300      	movs	r3, #0
    efc8:	e004      	b.n	efd4 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    efca:	68fa      	ldr	r2, [r7, #12]
    efcc:	68bb      	ldr	r3, [r7, #8]
    efce:	429a      	cmp	r2, r3
    efd0:	d3da      	bcc.n	ef88 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    efd2:	2300      	movs	r3, #0
}
    efd4:	4618      	mov	r0, r3
    efd6:	3718      	adds	r7, #24
    efd8:	46bd      	mov	sp, r7
    efda:	bd80      	pop	{r7, pc}
    efdc:	0000ee3d 	.word	0x0000ee3d
    efe0:	0000eda3 	.word	0x0000eda3
    efe4:	0000edd5 	.word	0x0000edd5

0000efe8 <_ZN28Compressor_CANOpen_Interface15GetCurrentSpeedEv>:
	bool	InitCANOpen(void);
	int	Comporesor_Process(void);
	void	Periodic_Task(void);
	bool	Set_CAN_Enable(bool *st);
	void	Set_Motor_Speed(uint16_t sp);
	uint16_t GetCurrentSpeed(void){return current_speed;};
    efe8:	b480      	push	{r7}
    efea:	b083      	sub	sp, #12
    efec:	af00      	add	r7, sp, #0
    efee:	6078      	str	r0, [r7, #4]
    eff0:	687b      	ldr	r3, [r7, #4]
    eff2:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
    eff6:	4618      	mov	r0, r3
    eff8:	370c      	adds	r7, #12
    effa:	46bd      	mov	sp, r7
    effc:	bc80      	pop	{r7}
    effe:	4770      	bx	lr

0000f000 <_ZN20Compresor_ControllerC1Ev>:
#include "Compresor_Controller.h"
#include "CO_Driver_Class.h"
static uint8_t local_data_array[COMPRESSOR_CONTROLLER_DATA_SIZE];

// default constructor
Compresor_Controller::Compresor_Controller()
    f000:	b580      	push	{r7, lr}
    f002:	b082      	sub	sp, #8
    f004:	af00      	add	r7, sp, #0
    f006:	6078      	str	r0, [r7, #4]
    f008:	687b      	ldr	r3, [r7, #4]
    f00a:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
    f00e:	4618      	mov	r0, r3
    f010:	4b06      	ldr	r3, [pc, #24]	; (f02c <_ZN20Compresor_ControllerC1Ev+0x2c>)
    f012:	4798      	blx	r3
    f014:	687b      	ldr	r3, [r7, #4]
    f016:	4618      	mov	r0, r3
    f018:	4b05      	ldr	r3, [pc, #20]	; (f030 <_ZN20Compresor_ControllerC1Ev+0x30>)
    f01a:	4798      	blx	r3
    f01c:	4a05      	ldr	r2, [pc, #20]	; (f034 <_ZN20Compresor_ControllerC1Ev+0x34>)
    f01e:	687b      	ldr	r3, [r7, #4]
    f020:	601a      	str	r2, [r3, #0]
{
} //Compresor_Controller
    f022:	687b      	ldr	r3, [r7, #4]
    f024:	4618      	mov	r0, r3
    f026:	3708      	adds	r7, #8
    f028:	46bd      	mov	sp, r7
    f02a:	bd80      	pop	{r7, pc}
    f02c:	0000f375 	.word	0x0000f375
    f030:	0000f64d 	.word	0x0000f64d
    f034:	0001b528 	.word	0x0001b528

0000f038 <_ZN20Compresor_ControllerD1Ev>:

// default destructor
Compresor_Controller::~Compresor_Controller()
    f038:	b580      	push	{r7, lr}
    f03a:	b082      	sub	sp, #8
    f03c:	af00      	add	r7, sp, #0
    f03e:	6078      	str	r0, [r7, #4]
    f040:	4a08      	ldr	r2, [pc, #32]	; (f064 <_ZN20Compresor_ControllerD1Ev+0x2c>)
    f042:	687b      	ldr	r3, [r7, #4]
    f044:	601a      	str	r2, [r3, #0]
    f046:	687b      	ldr	r3, [r7, #4]
    f048:	4618      	mov	r0, r3
    f04a:	4b07      	ldr	r3, [pc, #28]	; (f068 <_ZN20Compresor_ControllerD1Ev+0x30>)
    f04c:	4798      	blx	r3
    f04e:	687b      	ldr	r3, [r7, #4]
    f050:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
    f054:	4618      	mov	r0, r3
    f056:	4b05      	ldr	r3, [pc, #20]	; (f06c <_ZN20Compresor_ControllerD1Ev+0x34>)
    f058:	4798      	blx	r3
{
} //~Compresor_Controller
    f05a:	687b      	ldr	r3, [r7, #4]
    f05c:	4618      	mov	r0, r3
    f05e:	3708      	adds	r7, #8
    f060:	46bd      	mov	sp, r7
    f062:	bd80      	pop	{r7, pc}
    f064:	0001b528 	.word	0x0001b528
    f068:	0000f689 	.word	0x0000f689
    f06c:	0000f399 	.word	0x0000f399

0000f070 <_ZN20Compresor_Controller4InitEv>:

bool Compresor_Controller::Init(void){
    f070:	b590      	push	{r4, r7, lr}
    f072:	b083      	sub	sp, #12
    f074:	af00      	add	r7, sp, #0
    f076:	6078      	str	r0, [r7, #4]
	data_array=local_data_array;
    f078:	687b      	ldr	r3, [r7, #4]
    f07a:	4a1e      	ldr	r2, [pc, #120]	; (f0f4 <_ZN20Compresor_Controller4InitEv+0x84>)
    f07c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	isOK=InitExpander();
    f080:	687b      	ldr	r3, [r7, #4]
    f082:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
    f086:	4618      	mov	r0, r3
    f088:	4b1b      	ldr	r3, [pc, #108]	; (f0f8 <_ZN20Compresor_Controller4InitEv+0x88>)
    f08a:	4798      	blx	r3
    f08c:	4603      	mov	r3, r0
    f08e:	461a      	mov	r2, r3
    f090:	687b      	ldr	r3, [r7, #4]
    f092:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	if (isOK)
    f096:	687b      	ldr	r3, [r7, #4]
    f098:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
    f09c:	b2db      	uxtb	r3, r3
    f09e:	2b00      	cmp	r3, #0
    f0a0:	d01f      	beq.n	f0e2 <_ZN20Compresor_Controller4InitEv+0x72>
	{
		if (InitCANOpen())
    f0a2:	687b      	ldr	r3, [r7, #4]
    f0a4:	4618      	mov	r0, r3
    f0a6:	4b15      	ldr	r3, [pc, #84]	; (f0fc <_ZN20Compresor_Controller4InitEv+0x8c>)
    f0a8:	4798      	blx	r3
    f0aa:	4603      	mov	r3, r0
    f0ac:	2b00      	cmp	r3, #0
    f0ae:	d018      	beq.n	f0e2 <_ZN20Compresor_Controller4InitEv+0x72>
		{
			canopen_driver->canopen_ready=true;
    f0b0:	4b13      	ldr	r3, [pc, #76]	; (f100 <_ZN20Compresor_Controller4InitEv+0x90>)
    f0b2:	681b      	ldr	r3, [r3, #0]
    f0b4:	2201      	movs	r2, #1
    f0b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			Set_CAN_Enable(IsEnabledPointer());
    f0ba:	687c      	ldr	r4, [r7, #4]
    f0bc:	687b      	ldr	r3, [r7, #4]
    f0be:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
    f0c2:	4618      	mov	r0, r3
    f0c4:	4b0f      	ldr	r3, [pc, #60]	; (f104 <_ZN20Compresor_Controller4InitEv+0x94>)
    f0c6:	4798      	blx	r3
    f0c8:	4603      	mov	r3, r0
    f0ca:	4619      	mov	r1, r3
    f0cc:	4620      	mov	r0, r4
    f0ce:	4b0e      	ldr	r3, [pc, #56]	; (f108 <_ZN20Compresor_Controller4InitEv+0x98>)
    f0d0:	4798      	blx	r3
			Set_Slave_ID(CCU_CANOPEN_NODE);
    f0d2:	2103      	movs	r1, #3
    f0d4:	6878      	ldr	r0, [r7, #4]
    f0d6:	4b0d      	ldr	r3, [pc, #52]	; (f10c <_ZN20Compresor_Controller4InitEv+0x9c>)
    f0d8:	4798      	blx	r3
			isOK=true;
    f0da:	687b      	ldr	r3, [r7, #4]
    f0dc:	2201      	movs	r2, #1
    f0de:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		}
	} 
	else
	{
	}
	return isOK;
    f0e2:	687b      	ldr	r3, [r7, #4]
    f0e4:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
    f0e8:	b2db      	uxtb	r3, r3
}
    f0ea:	4618      	mov	r0, r3
    f0ec:	370c      	adds	r7, #12
    f0ee:	46bd      	mov	sp, r7
    f0f0:	bd90      	pop	{r4, r7, pc}
    f0f2:	bf00      	nop
    f0f4:	20002900 	.word	0x20002900
    f0f8:	0000f3ad 	.word	0x0000f3ad
    f0fc:	0000f6b1 	.word	0x0000f6b1
    f100:	2000da5c 	.word	0x2000da5c
    f104:	0000f50d 	.word	0x0000f50d
    f108:	0000f8c5 	.word	0x0000f8c5
    f10c:	0000f111 	.word	0x0000f111

0000f110 <_ZN20Compresor_Controller12Set_Slave_IDEh>:
uint8_t Compresor_Controller::Set_Slave_ID (uint8_t sn){
    f110:	b580      	push	{r7, lr}
    f112:	b082      	sub	sp, #8
    f114:	af00      	add	r7, sp, #0
    f116:	6078      	str	r0, [r7, #4]
    f118:	460b      	mov	r3, r1
    f11a:	70fb      	strb	r3, [r7, #3]
	return	canopen_driver->Set_Slave_Node(sn);
    f11c:	4b05      	ldr	r3, [pc, #20]	; (f134 <_ZN20Compresor_Controller12Set_Slave_IDEh+0x24>)
    f11e:	681b      	ldr	r3, [r3, #0]
    f120:	78fa      	ldrb	r2, [r7, #3]
    f122:	4611      	mov	r1, r2
    f124:	4618      	mov	r0, r3
    f126:	4b04      	ldr	r3, [pc, #16]	; (f138 <_ZN20Compresor_Controller12Set_Slave_IDEh+0x28>)
    f128:	4798      	blx	r3
    f12a:	4603      	mov	r3, r0
}
    f12c:	4618      	mov	r0, r3
    f12e:	3708      	adds	r7, #8
    f130:	46bd      	mov	sp, r7
    f132:	bd80      	pop	{r7, pc}
    f134:	2000da5c 	.word	0x2000da5c
    f138:	00015b8f 	.word	0x00015b8f

0000f13c <_ZN20Compresor_Controller19GetCompressorStatusEPh>:
void Compresor_Controller::GetCompressorStatus(uint8_t *arr){
    f13c:	b590      	push	{r4, r7, lr}
    f13e:	b083      	sub	sp, #12
    f140:	af00      	add	r7, sp, #0
    f142:	6078      	str	r0, [r7, #4]
    f144:	6039      	str	r1, [r7, #0]
	data_array[0]=ReadStatus();
    f146:	687b      	ldr	r3, [r7, #4]
    f148:	f8d3 41d0 	ldr.w	r4, [r3, #464]	; 0x1d0
    f14c:	687b      	ldr	r3, [r7, #4]
    f14e:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
    f152:	4618      	mov	r0, r3
    f154:	4b2d      	ldr	r3, [pc, #180]	; (f20c <_ZN20Compresor_Controller19GetCompressorStatusEPh+0xd0>)
    f156:	4798      	blx	r3
    f158:	4603      	mov	r3, r0
    f15a:	7023      	strb	r3, [r4, #0]
	current_speed=GetCurrentSpeed();
    f15c:	687b      	ldr	r3, [r7, #4]
    f15e:	4618      	mov	r0, r3
    f160:	4b2b      	ldr	r3, [pc, #172]	; (f210 <_ZN20Compresor_Controller19GetCompressorStatusEPh+0xd4>)
    f162:	4798      	blx	r3
    f164:	4603      	mov	r3, r0
    f166:	461a      	mov	r2, r3
    f168:	687b      	ldr	r3, [r7, #4]
    f16a:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
	memcpy(&data_array[1],&current_speed,2);
    f16e:	687b      	ldr	r3, [r7, #4]
    f170:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
    f174:	3301      	adds	r3, #1
    f176:	687a      	ldr	r2, [r7, #4]
    f178:	f502 72e6 	add.w	r2, r2, #460	; 0x1cc
    f17c:	8812      	ldrh	r2, [r2, #0]
    f17e:	b292      	uxth	r2, r2
    f180:	801a      	strh	r2, [r3, #0]
	data_array[3]=ReadPressureLimits();
    f182:	687b      	ldr	r3, [r7, #4]
    f184:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
    f188:	1cdc      	adds	r4, r3, #3
    f18a:	687b      	ldr	r3, [r7, #4]
    f18c:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
    f190:	4618      	mov	r0, r3
    f192:	4b20      	ldr	r3, [pc, #128]	; (f214 <_ZN20Compresor_Controller19GetCompressorStatusEPh+0xd8>)
    f194:	4798      	blx	r3
    f196:	4603      	mov	r3, r0
    f198:	7023      	strb	r3, [r4, #0]
	memcpy(&data_array[4],(void*)canopen_driver->error_flags_array,2);
    f19a:	687b      	ldr	r3, [r7, #4]
    f19c:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
    f1a0:	3304      	adds	r3, #4
    f1a2:	4a1d      	ldr	r2, [pc, #116]	; (f218 <_ZN20Compresor_Controller19GetCompressorStatusEPh+0xdc>)
    f1a4:	6812      	ldr	r2, [r2, #0]
    f1a6:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    f1aa:	8812      	ldrh	r2, [r2, #0]
    f1ac:	b292      	uxth	r2, r2
    f1ae:	801a      	strh	r2, [r3, #0]
	memcpy(&data_array[6],(void*)&canopen_driver->current_IQFilt,2);
    f1b0:	687b      	ldr	r3, [r7, #4]
    f1b2:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
    f1b6:	3306      	adds	r3, #6
    f1b8:	4a17      	ldr	r2, [pc, #92]	; (f218 <_ZN20Compresor_Controller19GetCompressorStatusEPh+0xdc>)
    f1ba:	6812      	ldr	r2, [r2, #0]
    f1bc:	3298      	adds	r2, #152	; 0x98
    f1be:	8812      	ldrh	r2, [r2, #0]
    f1c0:	b292      	uxth	r2, r2
    f1c2:	801a      	strh	r2, [r3, #0]
	memcpy(&data_array[8],(void*)&canopen_driver->current_IDFilt,2);
    f1c4:	687b      	ldr	r3, [r7, #4]
    f1c6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
    f1ca:	3308      	adds	r3, #8
    f1cc:	4a12      	ldr	r2, [pc, #72]	; (f218 <_ZN20Compresor_Controller19GetCompressorStatusEPh+0xdc>)
    f1ce:	6812      	ldr	r2, [r2, #0]
    f1d0:	329a      	adds	r2, #154	; 0x9a
    f1d2:	8812      	ldrh	r2, [r2, #0]
    f1d4:	b292      	uxth	r2, r2
    f1d6:	801a      	strh	r2, [r3, #0]
	memcpy(&data_array[10],(void*)canopen_driver->compressor_temperatures,6);
    f1d8:	687b      	ldr	r3, [r7, #4]
    f1da:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
    f1de:	f103 000a 	add.w	r0, r3, #10
    f1e2:	4b0d      	ldr	r3, [pc, #52]	; (f218 <_ZN20Compresor_Controller19GetCompressorStatusEPh+0xdc>)
    f1e4:	681b      	ldr	r3, [r3, #0]
    f1e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
    f1ea:	2206      	movs	r2, #6
    f1ec:	4619      	mov	r1, r3
    f1ee:	4b0b      	ldr	r3, [pc, #44]	; (f21c <_ZN20Compresor_Controller19GetCompressorStatusEPh+0xe0>)
    f1f0:	4798      	blx	r3
	memcpy(arr,data_array,16);
    f1f2:	687b      	ldr	r3, [r7, #4]
    f1f4:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
    f1f8:	2210      	movs	r2, #16
    f1fa:	4619      	mov	r1, r3
    f1fc:	6838      	ldr	r0, [r7, #0]
    f1fe:	4b07      	ldr	r3, [pc, #28]	; (f21c <_ZN20Compresor_Controller19GetCompressorStatusEPh+0xe0>)
    f200:	4798      	blx	r3
}
    f202:	bf00      	nop
    f204:	370c      	adds	r7, #12
    f206:	46bd      	mov	sp, r7
    f208:	bd90      	pop	{r4, r7, pc}
    f20a:	bf00      	nop
    f20c:	0000f455 	.word	0x0000f455
    f210:	0000efe9 	.word	0x0000efe9
    f214:	0000f479 	.word	0x0000f479
    f218:	2000da5c 	.word	0x2000da5c
    f21c:	0001ab91 	.word	0x0001ab91

0000f220 <_Z41__static_initialization_and_destruction_0ii>:
    f220:	b580      	push	{r7, lr}
    f222:	b082      	sub	sp, #8
    f224:	af00      	add	r7, sp, #0
    f226:	6078      	str	r0, [r7, #4]
    f228:	6039      	str	r1, [r7, #0]
    f22a:	687b      	ldr	r3, [r7, #4]
    f22c:	2b01      	cmp	r3, #1
    f22e:	d15d      	bne.n	f2ec <_Z41__static_initialization_and_destruction_0ii+0xcc>
    f230:	683b      	ldr	r3, [r7, #0]
    f232:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f236:	4293      	cmp	r3, r2
    f238:	d158      	bne.n	f2ec <_Z41__static_initialization_and_destruction_0ii+0xcc>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    f23a:	492e      	ldr	r1, [pc, #184]	; (f2f4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    f23c:	482e      	ldr	r0, [pc, #184]	; (f2f8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f23e:	4b2f      	ldr	r3, [pc, #188]	; (f2fc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f240:	4798      	blx	r3
    f242:	4a2f      	ldr	r2, [pc, #188]	; (f300 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f244:	492f      	ldr	r1, [pc, #188]	; (f304 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f246:	482c      	ldr	r0, [pc, #176]	; (f2f8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f248:	4b2f      	ldr	r3, [pc, #188]	; (f308 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f24a:	4798      	blx	r3
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f24c:	492f      	ldr	r1, [pc, #188]	; (f30c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f24e:	4830      	ldr	r0, [pc, #192]	; (f310 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f250:	4b30      	ldr	r3, [pc, #192]	; (f314 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f252:	4798      	blx	r3
    f254:	4a2a      	ldr	r2, [pc, #168]	; (f300 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f256:	4930      	ldr	r1, [pc, #192]	; (f318 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f258:	482d      	ldr	r0, [pc, #180]	; (f310 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f25a:	4b2b      	ldr	r3, [pc, #172]	; (f308 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f25c:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f25e:	492f      	ldr	r1, [pc, #188]	; (f31c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f260:	482f      	ldr	r0, [pc, #188]	; (f320 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f262:	4b2c      	ldr	r3, [pc, #176]	; (f314 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f264:	4798      	blx	r3
    f266:	4a26      	ldr	r2, [pc, #152]	; (f300 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f268:	492b      	ldr	r1, [pc, #172]	; (f318 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f26a:	482d      	ldr	r0, [pc, #180]	; (f320 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f26c:	4b26      	ldr	r3, [pc, #152]	; (f308 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f26e:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f270:	492c      	ldr	r1, [pc, #176]	; (f324 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f272:	482d      	ldr	r0, [pc, #180]	; (f328 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f274:	4b27      	ldr	r3, [pc, #156]	; (f314 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f276:	4798      	blx	r3
    f278:	4a21      	ldr	r2, [pc, #132]	; (f300 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f27a:	4927      	ldr	r1, [pc, #156]	; (f318 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f27c:	482a      	ldr	r0, [pc, #168]	; (f328 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f27e:	4b22      	ldr	r3, [pc, #136]	; (f308 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f280:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f282:	492a      	ldr	r1, [pc, #168]	; (f32c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f284:	482a      	ldr	r0, [pc, #168]	; (f330 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f286:	4b23      	ldr	r3, [pc, #140]	; (f314 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f288:	4798      	blx	r3
    f28a:	4a1d      	ldr	r2, [pc, #116]	; (f300 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f28c:	4922      	ldr	r1, [pc, #136]	; (f318 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f28e:	4828      	ldr	r0, [pc, #160]	; (f330 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f290:	4b1d      	ldr	r3, [pc, #116]	; (f308 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f292:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f294:	4927      	ldr	r1, [pc, #156]	; (f334 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f296:	4828      	ldr	r0, [pc, #160]	; (f338 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f298:	4b1e      	ldr	r3, [pc, #120]	; (f314 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f29a:	4798      	blx	r3
    f29c:	4a18      	ldr	r2, [pc, #96]	; (f300 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f29e:	491e      	ldr	r1, [pc, #120]	; (f318 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f2a0:	4825      	ldr	r0, [pc, #148]	; (f338 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f2a2:	4b19      	ldr	r3, [pc, #100]	; (f308 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f2a4:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f2a6:	4925      	ldr	r1, [pc, #148]	; (f33c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    f2a8:	4825      	ldr	r0, [pc, #148]	; (f340 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    f2aa:	4b1a      	ldr	r3, [pc, #104]	; (f314 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f2ac:	4798      	blx	r3
    f2ae:	4a14      	ldr	r2, [pc, #80]	; (f300 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f2b0:	4919      	ldr	r1, [pc, #100]	; (f318 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f2b2:	4823      	ldr	r0, [pc, #140]	; (f340 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    f2b4:	4b14      	ldr	r3, [pc, #80]	; (f308 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f2b6:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f2b8:	4922      	ldr	r1, [pc, #136]	; (f344 <_Z41__static_initialization_and_destruction_0ii+0x124>)
    f2ba:	4823      	ldr	r0, [pc, #140]	; (f348 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    f2bc:	4b15      	ldr	r3, [pc, #84]	; (f314 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f2be:	4798      	blx	r3
    f2c0:	4a0f      	ldr	r2, [pc, #60]	; (f300 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f2c2:	4915      	ldr	r1, [pc, #84]	; (f318 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f2c4:	4820      	ldr	r0, [pc, #128]	; (f348 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    f2c6:	4b10      	ldr	r3, [pc, #64]	; (f308 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f2c8:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    f2ca:	4920      	ldr	r1, [pc, #128]	; (f34c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    f2cc:	4820      	ldr	r0, [pc, #128]	; (f350 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    f2ce:	4b11      	ldr	r3, [pc, #68]	; (f314 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f2d0:	4798      	blx	r3
    f2d2:	4a0b      	ldr	r2, [pc, #44]	; (f300 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f2d4:	4910      	ldr	r1, [pc, #64]	; (f318 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f2d6:	481e      	ldr	r0, [pc, #120]	; (f350 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    f2d8:	4b0b      	ldr	r3, [pc, #44]	; (f308 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f2da:	4798      	blx	r3
    f2dc:	481d      	ldr	r0, [pc, #116]	; (f354 <_Z41__static_initialization_and_destruction_0ii+0x134>)
    f2de:	4b1e      	ldr	r3, [pc, #120]	; (f358 <_Z41__static_initialization_and_destruction_0ii+0x138>)
    f2e0:	4798      	blx	r3
    f2e2:	4a07      	ldr	r2, [pc, #28]	; (f300 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f2e4:	491d      	ldr	r1, [pc, #116]	; (f35c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
    f2e6:	481b      	ldr	r0, [pc, #108]	; (f354 <_Z41__static_initialization_and_destruction_0ii+0x134>)
    f2e8:	4b07      	ldr	r3, [pc, #28]	; (f308 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f2ea:	4798      	blx	r3
    f2ec:	bf00      	nop
    f2ee:	3708      	adds	r7, #8
    f2f0:	46bd      	mov	sp, r7
    f2f2:	bd80      	pop	{r7, pc}
    f2f4:	2000e058 	.word	0x2000e058
    f2f8:	200027e8 	.word	0x200027e8
    f2fc:	0000fc6d 	.word	0x0000fc6d
    f300:	20000000 	.word	0x20000000
    f304:	0000fc89 	.word	0x0000fc89
    f308:	0001a611 	.word	0x0001a611
    f30c:	2000df28 	.word	0x2000df28
    f310:	20002800 	.word	0x20002800
    f314:	00010441 	.word	0x00010441
    f318:	00010479 	.word	0x00010479
    f31c:	2000dfbc 	.word	0x2000dfbc
    f320:	20002820 	.word	0x20002820
    f324:	2000e0e0 	.word	0x2000e0e0
    f328:	20002840 	.word	0x20002840
    f32c:	2000dfdc 	.word	0x2000dfdc
    f330:	20002860 	.word	0x20002860
    f334:	2000e0a0 	.word	0x2000e0a0
    f338:	20002880 	.word	0x20002880
    f33c:	2000e0c0 	.word	0x2000e0c0
    f340:	200028a0 	.word	0x200028a0
    f344:	2000df98 	.word	0x2000df98
    f348:	200028c0 	.word	0x200028c0
    f34c:	2000e038 	.word	0x2000e038
    f350:	200028e0 	.word	0x200028e0
    f354:	20002918 	.word	0x20002918
    f358:	0000f001 	.word	0x0000f001
    f35c:	0000f039 	.word	0x0000f039

0000f360 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev>:
    f360:	b580      	push	{r7, lr}
    f362:	af00      	add	r7, sp, #0
    f364:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f368:	2001      	movs	r0, #1
    f36a:	4b01      	ldr	r3, [pc, #4]	; (f370 <_GLOBAL__sub_I__ZN20Compresor_ControllerC2Ev+0x10>)
    f36c:	4798      	blx	r3
    f36e:	bd80      	pop	{r7, pc}
    f370:	0000f221 	.word	0x0000f221

0000f374 <_ZN23Compresor_I2C_InterfaceC1Ev>:
#include "Compresor_I2C_Interface.h"

//static	MCP23008_Class expandersCompresorStatic;
static	MCP23008_Class local_expanders_compressor[2];
// default constructor
Compresor_I2C_Interface::Compresor_I2C_Interface()
    f374:	b480      	push	{r7}
    f376:	b083      	sub	sp, #12
    f378:	af00      	add	r7, sp, #0
    f37a:	6078      	str	r0, [r7, #4]
{
	i2c=&i2cSharedStatic;
    f37c:	687b      	ldr	r3, [r7, #4]
    f37e:	4a05      	ldr	r2, [pc, #20]	; (f394 <_ZN23Compresor_I2C_InterfaceC1Ev+0x20>)
    f380:	609a      	str	r2, [r3, #8]
	isOK=false;
    f382:	687b      	ldr	r3, [r7, #4]
    f384:	2200      	movs	r2, #0
    f386:	731a      	strb	r2, [r3, #12]
} //Compresor_I2C_Interface
    f388:	687b      	ldr	r3, [r7, #4]
    f38a:	4618      	mov	r0, r3
    f38c:	370c      	adds	r7, #12
    f38e:	46bd      	mov	sp, r7
    f390:	bc80      	pop	{r7}
    f392:	4770      	bx	lr
    f394:	20002aec 	.word	0x20002aec

0000f398 <_ZN23Compresor_I2C_InterfaceD1Ev>:

// default destructor
Compresor_I2C_Interface::~Compresor_I2C_Interface()
    f398:	b480      	push	{r7}
    f39a:	b083      	sub	sp, #12
    f39c:	af00      	add	r7, sp, #0
    f39e:	6078      	str	r0, [r7, #4]
{
} //~Compresor_I2C_Interface
    f3a0:	687b      	ldr	r3, [r7, #4]
    f3a2:	4618      	mov	r0, r3
    f3a4:	370c      	adds	r7, #12
    f3a6:	46bd      	mov	sp, r7
    f3a8:	bc80      	pop	{r7}
    f3aa:	4770      	bx	lr

0000f3ac <_ZN23Compresor_I2C_Interface12InitExpanderEv>:

bool Compresor_I2C_Interface::InitExpander(void){
    f3ac:	b580      	push	{r7, lr}
    f3ae:	b082      	sub	sp, #8
    f3b0:	af00      	add	r7, sp, #0
    f3b2:	6078      	str	r0, [r7, #4]
	if (i2c->initiated)
    f3b4:	687b      	ldr	r3, [r7, #4]
    f3b6:	689b      	ldr	r3, [r3, #8]
    f3b8:	7a1b      	ldrb	r3, [r3, #8]
    f3ba:	b2db      	uxtb	r3, r3
    f3bc:	2b00      	cmp	r3, #0
    f3be:	d104      	bne.n	f3ca <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x1e>
	{
	} 
	else
	{
		
		i2c->Init();
    f3c0:	687b      	ldr	r3, [r7, #4]
    f3c2:	689b      	ldr	r3, [r3, #8]
    f3c4:	4618      	mov	r0, r3
    f3c6:	4b1c      	ldr	r3, [pc, #112]	; (f438 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x8c>)
    f3c8:	4798      	blx	r3
	}
	if (i2c->isOK)
    f3ca:	687b      	ldr	r3, [r7, #4]
    f3cc:	689b      	ldr	r3, [r3, #8]
    f3ce:	7a5b      	ldrb	r3, [r3, #9]
    f3d0:	b2db      	uxtb	r3, r3
    f3d2:	2b00      	cmp	r3, #0
    f3d4:	d028      	beq.n	f428 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x7c>
	{
		expander[0]=&local_expanders_compressor[0];
    f3d6:	687b      	ldr	r3, [r7, #4]
    f3d8:	4a18      	ldr	r2, [pc, #96]	; (f43c <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x90>)
    f3da:	611a      	str	r2, [r3, #16]
		expander[0]->Init(COMPRESOR_MCP23008_ADDRESS,i2c);
    f3dc:	687b      	ldr	r3, [r7, #4]
    f3de:	6918      	ldr	r0, [r3, #16]
    f3e0:	687b      	ldr	r3, [r7, #4]
    f3e2:	689b      	ldr	r3, [r3, #8]
    f3e4:	461a      	mov	r2, r3
    f3e6:	2125      	movs	r1, #37	; 0x25
    f3e8:	4b15      	ldr	r3, [pc, #84]	; (f440 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x94>)
    f3ea:	4798      	blx	r3
		expander[0]->SetPortInput(0xf0);
    f3ec:	687b      	ldr	r3, [r7, #4]
    f3ee:	691b      	ldr	r3, [r3, #16]
    f3f0:	21f0      	movs	r1, #240	; 0xf0
    f3f2:	4618      	mov	r0, r3
    f3f4:	4b13      	ldr	r3, [pc, #76]	; (f444 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x98>)
    f3f6:	4798      	blx	r3
				expander[1]=&local_expanders_compressor[1];
    f3f8:	687b      	ldr	r3, [r7, #4]
    f3fa:	4a13      	ldr	r2, [pc, #76]	; (f448 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x9c>)
    f3fc:	615a      	str	r2, [r3, #20]
				expander[1]->Init(COMPRESOR_MCP23008_ADDRESS+1,i2c);
    f3fe:	687b      	ldr	r3, [r7, #4]
    f400:	6958      	ldr	r0, [r3, #20]
    f402:	687b      	ldr	r3, [r7, #4]
    f404:	689b      	ldr	r3, [r3, #8]
    f406:	461a      	mov	r2, r3
    f408:	2126      	movs	r1, #38	; 0x26
    f40a:	4b0d      	ldr	r3, [pc, #52]	; (f440 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x94>)
    f40c:	4798      	blx	r3
				expander[1]->SetPortInput();
    f40e:	687b      	ldr	r3, [r7, #4]
    f410:	695b      	ldr	r3, [r3, #20]
    f412:	4618      	mov	r0, r3
    f414:	4b0d      	ldr	r3, [pc, #52]	; (f44c <_ZN23Compresor_I2C_Interface12InitExpanderEv+0xa0>)
    f416:	4798      	blx	r3
	//	expander->SetPortOutput();
		isOK=SelfTest();
    f418:	6878      	ldr	r0, [r7, #4]
    f41a:	4b0d      	ldr	r3, [pc, #52]	; (f450 <_ZN23Compresor_I2C_Interface12InitExpanderEv+0xa4>)
    f41c:	4798      	blx	r3
    f41e:	4603      	mov	r3, r0
    f420:	461a      	mov	r2, r3
    f422:	687b      	ldr	r3, [r7, #4]
    f424:	731a      	strb	r2, [r3, #12]
    f426:	e000      	b.n	f42a <_ZN23Compresor_I2C_Interface12InitExpanderEv+0x7e>
	}
	else
	{
		asm("nop");
    f428:	bf00      	nop
	}
	//isOK=i2c->isOK;
		return isOK;
    f42a:	687b      	ldr	r3, [r7, #4]
    f42c:	7b1b      	ldrb	r3, [r3, #12]
}
    f42e:	4618      	mov	r0, r3
    f430:	3708      	adds	r7, #8
    f432:	46bd      	mov	sp, r7
    f434:	bd80      	pop	{r7, pc}
    f436:	bf00      	nop
    f438:	0000fc9d 	.word	0x0000fc9d
    f43c:	20002b04 	.word	0x20002b04
    f440:	0000fe51 	.word	0x0000fe51
    f444:	00010039 	.word	0x00010039
    f448:	20002b20 	.word	0x20002b20
    f44c:	0000fff5 	.word	0x0000fff5
    f450:	0000f549 	.word	0x0000f549

0000f454 <_ZN23Compresor_I2C_Interface10ReadStatusEv>:

uint8_t	Compresor_I2C_Interface::ReadStatus(void){
    f454:	b580      	push	{r7, lr}
    f456:	b084      	sub	sp, #16
    f458:	af00      	add	r7, sp, #0
    f45a:	6078      	str	r0, [r7, #4]
	uint8_t r=expander[0]->ReadGPIORegister();
    f45c:	687b      	ldr	r3, [r7, #4]
    f45e:	691b      	ldr	r3, [r3, #16]
    f460:	4618      	mov	r0, r3
    f462:	4b04      	ldr	r3, [pc, #16]	; (f474 <_ZN23Compresor_I2C_Interface10ReadStatusEv+0x20>)
    f464:	4798      	blx	r3
    f466:	4603      	mov	r3, r0
    f468:	73fb      	strb	r3, [r7, #15]
	
	return r;
    f46a:	7bfb      	ldrb	r3, [r7, #15]
	
}
    f46c:	4618      	mov	r0, r3
    f46e:	3710      	adds	r7, #16
    f470:	46bd      	mov	sp, r7
    f472:	bd80      	pop	{r7, pc}
    f474:	0000ff35 	.word	0x0000ff35

0000f478 <_ZN23Compresor_I2C_Interface18ReadPressureLimitsEv>:
uint8_t	Compresor_I2C_Interface::ReadPressureLimits(void){
    f478:	b580      	push	{r7, lr}
    f47a:	b084      	sub	sp, #16
    f47c:	af00      	add	r7, sp, #0
    f47e:	6078      	str	r0, [r7, #4]
	uint8_t r=expander[1]->ReadGPIORegister();
    f480:	687b      	ldr	r3, [r7, #4]
    f482:	695b      	ldr	r3, [r3, #20]
    f484:	4618      	mov	r0, r3
    f486:	4b04      	ldr	r3, [pc, #16]	; (f498 <_ZN23Compresor_I2C_Interface18ReadPressureLimitsEv+0x20>)
    f488:	4798      	blx	r3
    f48a:	4603      	mov	r3, r0
    f48c:	73fb      	strb	r3, [r7, #15]
	
	return r;
    f48e:	7bfb      	ldrb	r3, [r7, #15]
	
}
    f490:	4618      	mov	r0, r3
    f492:	3710      	adds	r7, #16
    f494:	46bd      	mov	sp, r7
    f496:	bd80      	pop	{r7, pc}
    f498:	0000ff35 	.word	0x0000ff35

0000f49c <_ZN23Compresor_I2C_Interface9SetEnableEb>:
uint8_t	Compresor_I2C_Interface::SetEnable(bool state){
    f49c:	b580      	push	{r7, lr}
    f49e:	b082      	sub	sp, #8
    f4a0:	af00      	add	r7, sp, #0
    f4a2:	6078      	str	r0, [r7, #4]
    f4a4:	460b      	mov	r3, r1
    f4a6:	70fb      	strb	r3, [r7, #3]

	enabled=expander[0]->WriteDigit(0,state);
    f4a8:	687b      	ldr	r3, [r7, #4]
    f4aa:	691b      	ldr	r3, [r3, #16]
    f4ac:	78fa      	ldrb	r2, [r7, #3]
    f4ae:	2100      	movs	r1, #0
    f4b0:	4618      	mov	r0, r3
    f4b2:	4b06      	ldr	r3, [pc, #24]	; (f4cc <_ZN23Compresor_I2C_Interface9SetEnableEb+0x30>)
    f4b4:	4798      	blx	r3
    f4b6:	4603      	mov	r3, r0
    f4b8:	461a      	mov	r2, r3
    f4ba:	687b      	ldr	r3, [r7, #4]
    f4bc:	735a      	strb	r2, [r3, #13]
	return uint8_t(enabled);
    f4be:	687b      	ldr	r3, [r7, #4]
    f4c0:	7b5b      	ldrb	r3, [r3, #13]
}
    f4c2:	4618      	mov	r0, r3
    f4c4:	3708      	adds	r7, #8
    f4c6:	46bd      	mov	sp, r7
    f4c8:	bd80      	pop	{r7, pc}
    f4ca:	bf00      	nop
    f4cc:	000101ed 	.word	0x000101ed

0000f4d0 <_ZN23Compresor_I2C_Interface9IsEnabledEv>:

	enabled=expander[0]->WriteDigit(2,!state);
	return uint8_t(enabled);
}

bool Compresor_I2C_Interface::IsEnabled(void){
    f4d0:	b580      	push	{r7, lr}
    f4d2:	b084      	sub	sp, #16
    f4d4:	af00      	add	r7, sp, #0
    f4d6:	6078      	str	r0, [r7, #4]

	uint8_t value=expander[0]->ReadGPIORegister();
    f4d8:	687b      	ldr	r3, [r7, #4]
    f4da:	691b      	ldr	r3, [r3, #16]
    f4dc:	4618      	mov	r0, r3
    f4de:	4b0a      	ldr	r3, [pc, #40]	; (f508 <_ZN23Compresor_I2C_Interface9IsEnabledEv+0x38>)
    f4e0:	4798      	blx	r3
    f4e2:	4603      	mov	r3, r0
    f4e4:	73fb      	strb	r3, [r7, #15]
	enabled=(value&0x01);
    f4e6:	7bfb      	ldrb	r3, [r7, #15]
    f4e8:	f003 0301 	and.w	r3, r3, #1
    f4ec:	2b00      	cmp	r3, #0
    f4ee:	bf14      	ite	ne
    f4f0:	2301      	movne	r3, #1
    f4f2:	2300      	moveq	r3, #0
    f4f4:	b2da      	uxtb	r2, r3
    f4f6:	687b      	ldr	r3, [r7, #4]
    f4f8:	735a      	strb	r2, [r3, #13]
	return enabled;
    f4fa:	687b      	ldr	r3, [r7, #4]
    f4fc:	7b5b      	ldrb	r3, [r3, #13]
}
    f4fe:	4618      	mov	r0, r3
    f500:	3710      	adds	r7, #16
    f502:	46bd      	mov	sp, r7
    f504:	bd80      	pop	{r7, pc}
    f506:	bf00      	nop
    f508:	0000ff35 	.word	0x0000ff35

0000f50c <_ZN23Compresor_I2C_Interface16IsEnabledPointerEv>:
bool* Compresor_I2C_Interface::IsEnabledPointer(void){
    f50c:	b580      	push	{r7, lr}
    f50e:	b084      	sub	sp, #16
    f510:	af00      	add	r7, sp, #0
    f512:	6078      	str	r0, [r7, #4]

	uint8_t value=expander[0]->ReadGPIORegister();
    f514:	687b      	ldr	r3, [r7, #4]
    f516:	691b      	ldr	r3, [r3, #16]
    f518:	4618      	mov	r0, r3
    f51a:	4b0a      	ldr	r3, [pc, #40]	; (f544 <_ZN23Compresor_I2C_Interface16IsEnabledPointerEv+0x38>)
    f51c:	4798      	blx	r3
    f51e:	4603      	mov	r3, r0
    f520:	73fb      	strb	r3, [r7, #15]
	enabled=(value&0x01);
    f522:	7bfb      	ldrb	r3, [r7, #15]
    f524:	f003 0301 	and.w	r3, r3, #1
    f528:	2b00      	cmp	r3, #0
    f52a:	bf14      	ite	ne
    f52c:	2301      	movne	r3, #1
    f52e:	2300      	moveq	r3, #0
    f530:	b2da      	uxtb	r2, r3
    f532:	687b      	ldr	r3, [r7, #4]
    f534:	735a      	strb	r2, [r3, #13]
	return &enabled;
    f536:	687b      	ldr	r3, [r7, #4]
    f538:	330d      	adds	r3, #13
}
    f53a:	4618      	mov	r0, r3
    f53c:	3710      	adds	r7, #16
    f53e:	46bd      	mov	sp, r7
    f540:	bd80      	pop	{r7, pc}
    f542:	bf00      	nop
    f544:	0000ff35 	.word	0x0000ff35

0000f548 <_ZN23Compresor_I2C_Interface8SelfTestEv>:

bool Compresor_I2C_Interface::SelfTest(void){
    f548:	b480      	push	{r7}
    f54a:	b085      	sub	sp, #20
    f54c:	af00      	add	r7, sp, #0
    f54e:	6078      	str	r0, [r7, #4]
	bool result=true;
    f550:	2301      	movs	r3, #1
    f552:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 4; i++)
    f554:	2300      	movs	r3, #0
    f556:	73fb      	strb	r3, [r7, #15]
    f558:	7bfb      	ldrb	r3, [r7, #15]
    f55a:	2b03      	cmp	r3, #3
    f55c:	dc03      	bgt.n	f566 <_ZN23Compresor_I2C_Interface8SelfTestEv+0x1e>
    f55e:	7bfb      	ldrb	r3, [r7, #15]
    f560:	3301      	adds	r3, #1
    f562:	73fb      	strb	r3, [r7, #15]
    f564:	e7f8      	b.n	f558 <_ZN23Compresor_I2C_Interface8SelfTestEv+0x10>
		
		
	}
	

	return result;
    f566:	7bbb      	ldrb	r3, [r7, #14]
    f568:	4618      	mov	r0, r3
    f56a:	3714      	adds	r7, #20
    f56c:	46bd      	mov	sp, r7
    f56e:	bc80      	pop	{r7}
    f570:	4770      	bx	lr
	...

0000f574 <__tcf_0>:
static	MCP23008_Class local_expanders_compressor[2];
    f574:	b590      	push	{r4, r7, lr}
    f576:	b083      	sub	sp, #12
    f578:	af00      	add	r7, sp, #0
    f57a:	6078      	str	r0, [r7, #4]
    f57c:	4c05      	ldr	r4, [pc, #20]	; (f594 <__tcf_0+0x20>)
    f57e:	4b06      	ldr	r3, [pc, #24]	; (f598 <__tcf_0+0x24>)
    f580:	429c      	cmp	r4, r3
    f582:	d004      	beq.n	f58e <__tcf_0+0x1a>
    f584:	3c1c      	subs	r4, #28
    f586:	4620      	mov	r0, r4
    f588:	4b04      	ldr	r3, [pc, #16]	; (f59c <__tcf_0+0x28>)
    f58a:	4798      	blx	r3
    f58c:	e7f7      	b.n	f57e <__tcf_0+0xa>
    f58e:	370c      	adds	r7, #12
    f590:	46bd      	mov	sp, r7
    f592:	bd90      	pop	{r4, r7, pc}
    f594:	20002b3c 	.word	0x20002b3c
    f598:	20002b04 	.word	0x20002b04
    f59c:	0000fe3d 	.word	0x0000fe3d

0000f5a0 <_Z41__static_initialization_and_destruction_0ii>:
    f5a0:	b5b0      	push	{r4, r5, r7, lr}
    f5a2:	b082      	sub	sp, #8
    f5a4:	af00      	add	r7, sp, #0
    f5a6:	6078      	str	r0, [r7, #4]
    f5a8:	6039      	str	r1, [r7, #0]
    f5aa:	687b      	ldr	r3, [r7, #4]
    f5ac:	2b01      	cmp	r3, #1
    f5ae:	d11d      	bne.n	f5ec <_Z41__static_initialization_and_destruction_0ii+0x4c>
    f5b0:	683b      	ldr	r3, [r7, #0]
    f5b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f5b6:	4293      	cmp	r3, r2
    f5b8:	d118      	bne.n	f5ec <_Z41__static_initialization_and_destruction_0ii+0x4c>
    f5ba:	490e      	ldr	r1, [pc, #56]	; (f5f4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
    f5bc:	480e      	ldr	r0, [pc, #56]	; (f5f8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f5be:	4b0f      	ldr	r3, [pc, #60]	; (f5fc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    f5c0:	4798      	blx	r3
    f5c2:	4a0f      	ldr	r2, [pc, #60]	; (f600 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    f5c4:	490f      	ldr	r1, [pc, #60]	; (f604 <_Z41__static_initialization_and_destruction_0ii+0x64>)
    f5c6:	480c      	ldr	r0, [pc, #48]	; (f5f8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    f5c8:	4b0f      	ldr	r3, [pc, #60]	; (f608 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    f5ca:	4798      	blx	r3
static	MCP23008_Class local_expanders_compressor[2];
    f5cc:	4b0f      	ldr	r3, [pc, #60]	; (f60c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
    f5ce:	2401      	movs	r4, #1
    f5d0:	461d      	mov	r5, r3
    f5d2:	2c00      	cmp	r4, #0
    f5d4:	db05      	blt.n	f5e2 <_Z41__static_initialization_and_destruction_0ii+0x42>
    f5d6:	4628      	mov	r0, r5
    f5d8:	4b0d      	ldr	r3, [pc, #52]	; (f610 <_Z41__static_initialization_and_destruction_0ii+0x70>)
    f5da:	4798      	blx	r3
    f5dc:	351c      	adds	r5, #28
    f5de:	3c01      	subs	r4, #1
    f5e0:	e7f7      	b.n	f5d2 <_Z41__static_initialization_and_destruction_0ii+0x32>
    f5e2:	4a07      	ldr	r2, [pc, #28]	; (f600 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    f5e4:	490b      	ldr	r1, [pc, #44]	; (f614 <_Z41__static_initialization_and_destruction_0ii+0x74>)
    f5e6:	2000      	movs	r0, #0
    f5e8:	4b07      	ldr	r3, [pc, #28]	; (f608 <_Z41__static_initialization_and_destruction_0ii+0x68>)
    f5ea:	4798      	blx	r3
    f5ec:	bf00      	nop
    f5ee:	3708      	adds	r7, #8
    f5f0:	46bd      	mov	sp, r7
    f5f2:	bdb0      	pop	{r4, r5, r7, pc}
    f5f4:	2000e058 	.word	0x2000e058
    f5f8:	20002aec 	.word	0x20002aec
    f5fc:	0000fc6d 	.word	0x0000fc6d
    f600:	20000000 	.word	0x20000000
    f604:	0000fc89 	.word	0x0000fc89
    f608:	0001a611 	.word	0x0001a611
    f60c:	20002b04 	.word	0x20002b04
    f610:	0000fe29 	.word	0x0000fe29
    f614:	0000f575 	.word	0x0000f575

0000f618 <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev>:
    f618:	b580      	push	{r7, lr}
    f61a:	af00      	add	r7, sp, #0
    f61c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f620:	2001      	movs	r0, #1
    f622:	4b01      	ldr	r3, [pc, #4]	; (f628 <_GLOBAL__sub_I__ZN23Compresor_I2C_InterfaceC2Ev+0x10>)
    f624:	4798      	blx	r3
    f626:	bd80      	pop	{r7, pc}
    f628:	0000f5a1 	.word	0x0000f5a1

0000f62c <_ZL20CANOpen_Sync_TimeoutPK10timer_task>:
static	uint8_t local_tx_data[8];
static bool syncCANOpenTimeoutStatic=false;
static uint16_t local_speed;

static void CANOpen_Sync_Timeout(const struct timer_task *const timer_task)
{
    f62c:	b480      	push	{r7}
    f62e:	b083      	sub	sp, #12
    f630:	af00      	add	r7, sp, #0
    f632:	6078      	str	r0, [r7, #4]
	syncCANOpenTimeoutStatic=true;
    f634:	4b04      	ldr	r3, [pc, #16]	; (f648 <_ZL20CANOpen_Sync_TimeoutPK10timer_task+0x1c>)
    f636:	2201      	movs	r2, #1
    f638:	701a      	strb	r2, [r3, #0]
	asm("nop" );
    f63a:	bf00      	nop
}
    f63c:	bf00      	nop
    f63e:	370c      	adds	r7, #12
    f640:	46bd      	mov	sp, r7
    f642:	bc80      	pop	{r7}
    f644:	4770      	bx	lr
    f646:	bf00      	nop
    f648:	20002de4 	.word	0x20002de4

0000f64c <_ZN28Compressor_CANOpen_InterfaceC1Ev>:

// default constructor
Compressor_CANOpen_Interface::Compressor_CANOpen_Interface()
    f64c:	b580      	push	{r7, lr}
    f64e:	b082      	sub	sp, #8
    f650:	af00      	add	r7, sp, #0
    f652:	6078      	str	r0, [r7, #4]
    f654:	687b      	ldr	r3, [r7, #4]
    f656:	4618      	mov	r0, r3
    f658:	4b08      	ldr	r3, [pc, #32]	; (f67c <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x30>)
    f65a:	4798      	blx	r3
    f65c:	4a08      	ldr	r2, [pc, #32]	; (f680 <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x34>)
    f65e:	687b      	ldr	r3, [r7, #4]
    f660:	601a      	str	r2, [r3, #0]
{
	syncCANOpenTimeout=&syncCANOpenTimeoutStatic;
    f662:	687b      	ldr	r3, [r7, #4]
    f664:	4a07      	ldr	r2, [pc, #28]	; (f684 <_ZN28Compressor_CANOpen_InterfaceC1Ev+0x38>)
    f666:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	timeDifference_ms=CCU_PROCESS_TIME_DIFFERENCE;
    f66a:	687b      	ldr	r3, [r7, #4]
    f66c:	2201      	movs	r2, #1
    f66e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
} //Compressor_Can_Interface
    f672:	687b      	ldr	r3, [r7, #4]
    f674:	4618      	mov	r0, r3
    f676:	3708      	adds	r7, #8
    f678:	46bd      	mov	sp, r7
    f67a:	bd80      	pop	{r7, pc}
    f67c:	00014c85 	.word	0x00014c85
    f680:	0001b534 	.word	0x0001b534
    f684:	20002de4 	.word	0x20002de4

0000f688 <_ZN28Compressor_CANOpen_InterfaceD1Ev>:

// default destructor
Compressor_CANOpen_Interface::~Compressor_CANOpen_Interface()
    f688:	b580      	push	{r7, lr}
    f68a:	b082      	sub	sp, #8
    f68c:	af00      	add	r7, sp, #0
    f68e:	6078      	str	r0, [r7, #4]
    f690:	4a05      	ldr	r2, [pc, #20]	; (f6a8 <_ZN28Compressor_CANOpen_InterfaceD1Ev+0x20>)
    f692:	687b      	ldr	r3, [r7, #4]
    f694:	601a      	str	r2, [r3, #0]
    f696:	687b      	ldr	r3, [r7, #4]
    f698:	4618      	mov	r0, r3
    f69a:	4b04      	ldr	r3, [pc, #16]	; (f6ac <_ZN28Compressor_CANOpen_InterfaceD1Ev+0x24>)
    f69c:	4798      	blx	r3
{
} //~Compressor_Can_Interface
    f69e:	687b      	ldr	r3, [r7, #4]
    f6a0:	4618      	mov	r0, r3
    f6a2:	3708      	adds	r7, #8
    f6a4:	46bd      	mov	sp, r7
    f6a6:	bd80      	pop	{r7, pc}
    f6a8:	0001b534 	.word	0x0001b534
    f6ac:	00014cf5 	.word	0x00014cf5

0000f6b0 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv>:

bool	Compressor_CANOpen_Interface::InitCANOpen(void){
    f6b0:	b580      	push	{r7, lr}
    f6b2:	b082      	sub	sp, #8
    f6b4:	af00      	add	r7, sp, #0
    f6b6:	6078      	str	r0, [r7, #4]
	tx_can_buffer=local_tx_data;
    f6b8:	687b      	ldr	r3, [r7, #4]
    f6ba:	4a1e      	ldr	r2, [pc, #120]	; (f734 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x84>)
    f6bc:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	speed=&local_speed;
    f6c0:	687b      	ldr	r3, [r7, #4]
    f6c2:	4a1d      	ldr	r2, [pc, #116]	; (f738 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x88>)
    f6c4:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	syncCANOpenTimeout=&syncCANOpenTimeoutStatic;
    f6c8:	687b      	ldr	r3, [r7, #4]
    f6ca:	4a1c      	ldr	r2, [pc, #112]	; (f73c <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x8c>)
    f6cc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	timeDifference_ms=CCU_PROCESS_TIME_DIFFERENCE;
    f6d0:	687b      	ldr	r3, [r7, #4]
    f6d2:	2201      	movs	r2, #1
    f6d4:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	cano=&canoStatic;
    f6d8:	687b      	ldr	r3, [r7, #4]
    f6da:	4a19      	ldr	r2, [pc, #100]	; (f740 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x90>)
    f6dc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	int_result=cano->Init_CO_CLASS(NMT_MASTER_NODE);
    f6e0:	687b      	ldr	r3, [r7, #4]
    f6e2:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
    f6e6:	2101      	movs	r1, #1
    f6e8:	4618      	mov	r0, r3
    f6ea:	4b16      	ldr	r3, [pc, #88]	; (f744 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x94>)
    f6ec:	4798      	blx	r3
    f6ee:	4602      	mov	r2, r0
    f6f0:	687b      	ldr	r3, [r7, #4]
    f6f2:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	if (int_result==0)
    f6f6:	687b      	ldr	r3, [r7, #4]
    f6f8:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
    f6fc:	2b00      	cmp	r3, #0
    f6fe:	d10b      	bne.n	f718 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x68>
	{
	//	cano->SetInitialMode();
		boolResult=	cano->StartNMTService(CCU_CANOPEN_NODE);
    f700:	687b      	ldr	r3, [r7, #4]
    f702:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
    f706:	2103      	movs	r1, #3
    f708:	4618      	mov	r0, r3
    f70a:	4b0f      	ldr	r3, [pc, #60]	; (f748 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x98>)
    f70c:	4798      	blx	r3
    f70e:	4603      	mov	r3, r0
    f710:	461a      	mov	r2, r3
    f712:	687b      	ldr	r3, [r7, #4]
    f714:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	else
	{
		
	}
	
	canoTimer.Start_oneShot_task(FUNC_PTR(CANOpen_Sync_Timeout),1000);
    f718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f71c:	490b      	ldr	r1, [pc, #44]	; (f74c <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0x9c>)
    f71e:	480c      	ldr	r0, [pc, #48]	; (f750 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0xa0>)
    f720:	4b0c      	ldr	r3, [pc, #48]	; (f754 <_ZN28Compressor_CANOpen_Interface11InitCANOpenEv+0xa4>)
    f722:	4798      	blx	r3
	
	return boolResult;
    f724:	687b      	ldr	r3, [r7, #4]
    f726:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
	
}
    f72a:	4618      	mov	r0, r3
    f72c:	3708      	adds	r7, #8
    f72e:	46bd      	mov	sp, r7
    f730:	bd80      	pop	{r7, pc}
    f732:	bf00      	nop
    f734:	20002ddc 	.word	0x20002ddc
    f738:	20002de6 	.word	0x20002de6
    f73c:	20002de4 	.word	0x20002de4
    f740:	20002c54 	.word	0x20002c54
    f744:	00014d1d 	.word	0x00014d1d
    f748:	00014de1 	.word	0x00014de1
    f74c:	0000f62d 	.word	0x0000f62d
    f750:	20002c34 	.word	0x20002c34
    f754:	00010715 	.word	0x00010715

0000f758 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv>:
	

		return (int)reset;
}

void Compressor_CANOpen_Interface::Periodic_Task(void){
    f758:	b580      	push	{r7, lr}
    f75a:	b082      	sub	sp, #8
    f75c:	af00      	add	r7, sp, #0
    f75e:	6078      	str	r0, [r7, #4]
	
	if (syncCANOpenTimeoutStatic)
    f760:	4b37      	ldr	r3, [pc, #220]	; (f840 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xe8>)
    f762:	781b      	ldrb	r3, [r3, #0]
    f764:	2b00      	cmp	r3, #0
    f766:	d066      	beq.n	f836 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xde>
	{
		//Comporesor_Process();
		if ( cano->ptrCO->CANmodule[0]->CANnormal)
    f768:	687b      	ldr	r3, [r7, #4]
    f76a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
    f76e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    f772:	681b      	ldr	r3, [r3, #0]
    f774:	7d1b      	ldrb	r3, [r3, #20]
    f776:	b2db      	uxtb	r3, r3
    f778:	2b00      	cmp	r3, #0
    f77a:	bf14      	ite	ne
    f77c:	2301      	movne	r3, #1
    f77e:	2300      	moveq	r3, #0
    f780:	b2db      	uxtb	r3, r3
    f782:	2b00      	cmp	r3, #0
    f784:	d04f      	beq.n	f826 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xce>
		{
				syncWas=cano->Send_SYNC_Signal();
    f786:	687b      	ldr	r3, [r7, #4]
    f788:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
    f78c:	330c      	adds	r3, #12
    f78e:	4618      	mov	r0, r3
    f790:	4b2c      	ldr	r3, [pc, #176]	; (f844 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xec>)
    f792:	4798      	blx	r3
    f794:	4603      	mov	r3, r0
    f796:	461a      	mov	r2, r3
    f798:	687b      	ldr	r3, [r7, #4]
    f79a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
				if (syncWas==0)
    f79e:	687b      	ldr	r3, [r7, #4]
    f7a0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
    f7a4:	2b00      	cmp	r3, #0
    f7a6:	d107      	bne.n	f7b8 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x60>
				{
					//cano->Pass_Temperature_To_voltage();
					memcpy((void*)&current_speed,(void*)CO_OD_RAM.voltage,2);
    f7a8:	687b      	ldr	r3, [r7, #4]
    f7aa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
    f7ae:	4a26      	ldr	r2, [pc, #152]	; (f848 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf0>)
    f7b0:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
    f7b4:	801a      	strh	r2, [r3, #0]
    f7b6:	e006      	b.n	f7c6 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x6e>
				//	current_speed=(uint16_t)(CO_OD_RAM.voltage)
				} 
				else
				{
					memcpy((void*)&current_speed,(void*)CO_OD_RAM.voltage,2);
    f7b8:	687b      	ldr	r3, [r7, #4]
    f7ba:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
    f7be:	4a22      	ldr	r2, [pc, #136]	; (f848 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf0>)
    f7c0:	f8b2 204e 	ldrh.w	r2, [r2, #78]	; 0x4e
    f7c4:	801a      	strh	r2, [r3, #0]
				}
				is_enabled=ccu.IsEnabled();
    f7c6:	4821      	ldr	r0, [pc, #132]	; (f84c <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf4>)
    f7c8:	4b21      	ldr	r3, [pc, #132]	; (f850 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xf8>)
    f7ca:	4798      	blx	r3
    f7cc:	4603      	mov	r3, r0
    f7ce:	461a      	mov	r2, r3
    f7d0:	687b      	ldr	r3, [r7, #4]
    f7d2:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
				if ((is_enabled))
    f7d6:	687b      	ldr	r3, [r7, #4]
    f7d8:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
    f7dc:	2b00      	cmp	r3, #0
    f7de:	d00b      	beq.n	f7f8 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xa0>
				{
					Convert_Uint16_Array(*speed,tx_can_buffer);
    f7e0:	687b      	ldr	r3, [r7, #4]
    f7e2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
    f7e6:	8819      	ldrh	r1, [r3, #0]
    f7e8:	687b      	ldr	r3, [r7, #4]
    f7ea:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    f7ee:	461a      	mov	r2, r3
    f7f0:	6878      	ldr	r0, [r7, #4]
    f7f2:	4b18      	ldr	r3, [pc, #96]	; (f854 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xfc>)
    f7f4:	4798      	blx	r3
    f7f6:	e00a      	b.n	f80e <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xb6>
					
				}else{
					
					Convert_Uint16_Array(*speed,tx_can_buffer);
    f7f8:	687b      	ldr	r3, [r7, #4]
    f7fa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
    f7fe:	8819      	ldrh	r1, [r3, #0]
    f800:	687b      	ldr	r3, [r7, #4]
    f802:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    f806:	461a      	mov	r2, r3
    f808:	6878      	ldr	r0, [r7, #4]
    f80a:	4b12      	ldr	r3, [pc, #72]	; (f854 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xfc>)
    f80c:	4798      	blx	r3
				}
				cano->Send_Simple_Run_Command(tx_can_buffer,CCU_CANOPEN_NODE);
    f80e:	687b      	ldr	r3, [r7, #4]
    f810:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
    f814:	f103 0014 	add.w	r0, r3, #20
    f818:	687b      	ldr	r3, [r7, #4]
    f81a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
    f81e:	2203      	movs	r2, #3
    f820:	4619      	mov	r1, r3
    f822:	4b0d      	ldr	r3, [pc, #52]	; (f858 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x100>)
    f824:	4798      	blx	r3
			//	cano->CAN_Polling_Tx();
		} 
		else
		{
		}
			syncCANOpenTimeoutStatic=false;
    f826:	4b06      	ldr	r3, [pc, #24]	; (f840 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0xe8>)
    f828:	2200      	movs	r2, #0
    f82a:	701a      	strb	r2, [r3, #0]
			canoTimer.Start_oneShot_task(FUNC_PTR(CANOpen_Sync_Timeout),100);
    f82c:	2264      	movs	r2, #100	; 0x64
    f82e:	490b      	ldr	r1, [pc, #44]	; (f85c <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x104>)
    f830:	480b      	ldr	r0, [pc, #44]	; (f860 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x108>)
    f832:	4b0c      	ldr	r3, [pc, #48]	; (f864 <_ZN28Compressor_CANOpen_Interface13Periodic_TaskEv+0x10c>)
    f834:	4798      	blx	r3
	} 
	else
	{
	}

}
    f836:	bf00      	nop
    f838:	3708      	adds	r7, #8
    f83a:	46bd      	mov	sp, r7
    f83c:	bd80      	pop	{r7, pc}
    f83e:	bf00      	nop
    f840:	20002de4 	.word	0x20002de4
    f844:	00018415 	.word	0x00018415
    f848:	20000220 	.word	0x20000220
    f84c:	20002ac8 	.word	0x20002ac8
    f850:	0000f4d1 	.word	0x0000f4d1
    f854:	0000f869 	.word	0x0000f869
    f858:	0001770d 	.word	0x0001770d
    f85c:	0000f62d 	.word	0x0000f62d
    f860:	20002c34 	.word	0x20002c34
    f864:	00010715 	.word	0x00010715

0000f868 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh>:

void	Compressor_CANOpen_Interface::Convert_Uint16_Array(uint16_t sp, uint8_t * arr){
    f868:	b480      	push	{r7}
    f86a:	b087      	sub	sp, #28
    f86c:	af00      	add	r7, sp, #0
    f86e:	60f8      	str	r0, [r7, #12]
    f870:	460b      	mov	r3, r1
    f872:	607a      	str	r2, [r7, #4]
    f874:	817b      	strh	r3, [r7, #10]
	for (uint8_t i = 0; i < 8; i++)
    f876:	2300      	movs	r3, #0
    f878:	75fb      	strb	r3, [r7, #23]
    f87a:	7dfb      	ldrb	r3, [r7, #23]
    f87c:	2b07      	cmp	r3, #7
    f87e:	dc18      	bgt.n	f8b2 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x4a>
	{
		if (i<2)
    f880:	7dfb      	ldrb	r3, [r7, #23]
    f882:	2b01      	cmp	r3, #1
    f884:	dc0d      	bgt.n	f8a2 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x3a>
		{
			local_tx_data[i]=(uint8_t)(((*speed)>>8*i)&0x00ff);
    f886:	7dfb      	ldrb	r3, [r7, #23]
    f888:	68fa      	ldr	r2, [r7, #12]
    f88a:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
    f88e:	8812      	ldrh	r2, [r2, #0]
    f890:	4611      	mov	r1, r2
    f892:	7dfa      	ldrb	r2, [r7, #23]
    f894:	00d2      	lsls	r2, r2, #3
    f896:	fa41 f202 	asr.w	r2, r1, r2
    f89a:	b2d1      	uxtb	r1, r2
    f89c:	4a08      	ldr	r2, [pc, #32]	; (f8c0 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x58>)
    f89e:	54d1      	strb	r1, [r2, r3]
    f8a0:	e003      	b.n	f8aa <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x42>
		}else{
			local_tx_data[i]=0;
    f8a2:	7dfb      	ldrb	r3, [r7, #23]
    f8a4:	4a06      	ldr	r2, [pc, #24]	; (f8c0 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x58>)
    f8a6:	2100      	movs	r1, #0
    f8a8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8; i++)
    f8aa:	7dfb      	ldrb	r3, [r7, #23]
    f8ac:	3301      	adds	r3, #1
    f8ae:	75fb      	strb	r3, [r7, #23]
    f8b0:	e7e3      	b.n	f87a <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x12>
		}
		
	}
	arr=local_tx_data;
    f8b2:	4b03      	ldr	r3, [pc, #12]	; (f8c0 <_ZN28Compressor_CANOpen_Interface20Convert_Uint16_ArrayEtPh+0x58>)
    f8b4:	607b      	str	r3, [r7, #4]
}
    f8b6:	bf00      	nop
    f8b8:	371c      	adds	r7, #28
    f8ba:	46bd      	mov	sp, r7
    f8bc:	bc80      	pop	{r7}
    f8be:	4770      	bx	lr
    f8c0:	20002ddc 	.word	0x20002ddc

0000f8c4 <_ZN28Compressor_CANOpen_Interface14Set_CAN_EnableEPb>:

bool Compressor_CANOpen_Interface::Set_CAN_Enable(bool *st){
    f8c4:	b480      	push	{r7}
    f8c6:	b083      	sub	sp, #12
    f8c8:	af00      	add	r7, sp, #0
    f8ca:	6078      	str	r0, [r7, #4]
    f8cc:	6039      	str	r1, [r7, #0]
	enable=st;
    f8ce:	687b      	ldr	r3, [r7, #4]
    f8d0:	683a      	ldr	r2, [r7, #0]
    f8d2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	return  *enable;
    f8d6:	687b      	ldr	r3, [r7, #4]
    f8d8:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
    f8dc:	781b      	ldrb	r3, [r3, #0]
}
    f8de:	4618      	mov	r0, r3
    f8e0:	370c      	adds	r7, #12
    f8e2:	46bd      	mov	sp, r7
    f8e4:	bc80      	pop	{r7}
    f8e6:	4770      	bx	lr

0000f8e8 <_ZN28Compressor_CANOpen_Interface15Set_Motor_SpeedEt>:

void	Compressor_CANOpen_Interface::Set_Motor_Speed(uint16_t sp){
    f8e8:	b480      	push	{r7}
    f8ea:	b083      	sub	sp, #12
    f8ec:	af00      	add	r7, sp, #0
    f8ee:	6078      	str	r0, [r7, #4]
    f8f0:	460b      	mov	r3, r1
    f8f2:	807b      	strh	r3, [r7, #2]
	if (sp>7000)
    f8f4:	887b      	ldrh	r3, [r7, #2]
    f8f6:	f641 3258 	movw	r2, #7000	; 0x1b58
    f8fa:	4293      	cmp	r3, r2
    f8fc:	dd06      	ble.n	f90c <_ZN28Compressor_CANOpen_Interface15Set_Motor_SpeedEt+0x24>
	{
		*speed=7000;
    f8fe:	687b      	ldr	r3, [r7, #4]
    f900:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
    f904:	f641 3258 	movw	r2, #7000	; 0x1b58
    f908:	801a      	strh	r2, [r3, #0]
	{
		*speed=sp;
	}
	
	
}
    f90a:	e004      	b.n	f916 <_ZN28Compressor_CANOpen_Interface15Set_Motor_SpeedEt+0x2e>
		*speed=sp;
    f90c:	687b      	ldr	r3, [r7, #4]
    f90e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
    f912:	887a      	ldrh	r2, [r7, #2]
    f914:	801a      	strh	r2, [r3, #0]
}
    f916:	bf00      	nop
    f918:	370c      	adds	r7, #12
    f91a:	46bd      	mov	sp, r7
    f91c:	bc80      	pop	{r7}
    f91e:	4770      	bx	lr

0000f920 <_Z41__static_initialization_and_destruction_0ii>:
    f920:	b580      	push	{r7, lr}
    f922:	b082      	sub	sp, #8
    f924:	af00      	add	r7, sp, #0
    f926:	6078      	str	r0, [r7, #4]
    f928:	6039      	str	r1, [r7, #0]
    f92a:	687b      	ldr	r3, [r7, #4]
    f92c:	2b01      	cmp	r3, #1
    f92e:	d15e      	bne.n	f9ee <_Z41__static_initialization_and_destruction_0ii+0xce>
    f930:	683b      	ldr	r3, [r7, #0]
    f932:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f936:	4293      	cmp	r3, r2
    f938:	d159      	bne.n	f9ee <_Z41__static_initialization_and_destruction_0ii+0xce>
    f93a:	492f      	ldr	r1, [pc, #188]	; (f9f8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    f93c:	482f      	ldr	r0, [pc, #188]	; (f9fc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f93e:	4b30      	ldr	r3, [pc, #192]	; (fa00 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    f940:	4798      	blx	r3
    f942:	4a30      	ldr	r2, [pc, #192]	; (fa04 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f944:	4930      	ldr	r1, [pc, #192]	; (fa08 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    f946:	482d      	ldr	r0, [pc, #180]	; (f9fc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    f948:	4b30      	ldr	r3, [pc, #192]	; (fa0c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f94a:	4798      	blx	r3
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    f94c:	4930      	ldr	r1, [pc, #192]	; (fa10 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    f94e:	4831      	ldr	r0, [pc, #196]	; (fa14 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f950:	4b31      	ldr	r3, [pc, #196]	; (fa18 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f952:	4798      	blx	r3
    f954:	4a2b      	ldr	r2, [pc, #172]	; (fa04 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f956:	4931      	ldr	r1, [pc, #196]	; (fa1c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f958:	482e      	ldr	r0, [pc, #184]	; (fa14 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    f95a:	4b2c      	ldr	r3, [pc, #176]	; (fa0c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f95c:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    f95e:	4930      	ldr	r1, [pc, #192]	; (fa20 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    f960:	4830      	ldr	r0, [pc, #192]	; (fa24 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f962:	4b2d      	ldr	r3, [pc, #180]	; (fa18 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f964:	4798      	blx	r3
    f966:	4a27      	ldr	r2, [pc, #156]	; (fa04 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f968:	492c      	ldr	r1, [pc, #176]	; (fa1c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f96a:	482e      	ldr	r0, [pc, #184]	; (fa24 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    f96c:	4b27      	ldr	r3, [pc, #156]	; (fa0c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f96e:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    f970:	492d      	ldr	r1, [pc, #180]	; (fa28 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    f972:	482e      	ldr	r0, [pc, #184]	; (fa2c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f974:	4b28      	ldr	r3, [pc, #160]	; (fa18 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f976:	4798      	blx	r3
    f978:	4a22      	ldr	r2, [pc, #136]	; (fa04 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f97a:	4928      	ldr	r1, [pc, #160]	; (fa1c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f97c:	482b      	ldr	r0, [pc, #172]	; (fa2c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    f97e:	4b23      	ldr	r3, [pc, #140]	; (fa0c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f980:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    f982:	492b      	ldr	r1, [pc, #172]	; (fa30 <_Z41__static_initialization_and_destruction_0ii+0x110>)
    f984:	482b      	ldr	r0, [pc, #172]	; (fa34 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f986:	4b24      	ldr	r3, [pc, #144]	; (fa18 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f988:	4798      	blx	r3
    f98a:	4a1e      	ldr	r2, [pc, #120]	; (fa04 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f98c:	4923      	ldr	r1, [pc, #140]	; (fa1c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f98e:	4829      	ldr	r0, [pc, #164]	; (fa34 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    f990:	4b1e      	ldr	r3, [pc, #120]	; (fa0c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f992:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    f994:	4928      	ldr	r1, [pc, #160]	; (fa38 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    f996:	4829      	ldr	r0, [pc, #164]	; (fa3c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    f998:	4b1f      	ldr	r3, [pc, #124]	; (fa18 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f99a:	4798      	blx	r3
    f99c:	4a19      	ldr	r2, [pc, #100]	; (fa04 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f99e:	491f      	ldr	r1, [pc, #124]	; (fa1c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f9a0:	4826      	ldr	r0, [pc, #152]	; (fa3c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    f9a2:	4b1a      	ldr	r3, [pc, #104]	; (fa0c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f9a4:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    f9a6:	4926      	ldr	r1, [pc, #152]	; (fa40 <_Z41__static_initialization_and_destruction_0ii+0x120>)
    f9a8:	4826      	ldr	r0, [pc, #152]	; (fa44 <_Z41__static_initialization_and_destruction_0ii+0x124>)
    f9aa:	4b1b      	ldr	r3, [pc, #108]	; (fa18 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f9ac:	4798      	blx	r3
    f9ae:	4a15      	ldr	r2, [pc, #84]	; (fa04 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f9b0:	491a      	ldr	r1, [pc, #104]	; (fa1c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f9b2:	4824      	ldr	r0, [pc, #144]	; (fa44 <_Z41__static_initialization_and_destruction_0ii+0x124>)
    f9b4:	4b15      	ldr	r3, [pc, #84]	; (fa0c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f9b6:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    f9b8:	4923      	ldr	r1, [pc, #140]	; (fa48 <_Z41__static_initialization_and_destruction_0ii+0x128>)
    f9ba:	4824      	ldr	r0, [pc, #144]	; (fa4c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    f9bc:	4b16      	ldr	r3, [pc, #88]	; (fa18 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f9be:	4798      	blx	r3
    f9c0:	4a10      	ldr	r2, [pc, #64]	; (fa04 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f9c2:	4916      	ldr	r1, [pc, #88]	; (fa1c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f9c4:	4821      	ldr	r0, [pc, #132]	; (fa4c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
    f9c6:	4b11      	ldr	r3, [pc, #68]	; (fa0c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f9c8:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    f9ca:	4921      	ldr	r1, [pc, #132]	; (fa50 <_Z41__static_initialization_and_destruction_0ii+0x130>)
    f9cc:	4821      	ldr	r0, [pc, #132]	; (fa54 <_Z41__static_initialization_and_destruction_0ii+0x134>)
    f9ce:	4b12      	ldr	r3, [pc, #72]	; (fa18 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    f9d0:	4798      	blx	r3
    f9d2:	4a0c      	ldr	r2, [pc, #48]	; (fa04 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f9d4:	4911      	ldr	r1, [pc, #68]	; (fa1c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    f9d6:	481f      	ldr	r0, [pc, #124]	; (fa54 <_Z41__static_initialization_and_destruction_0ii+0x134>)
    f9d8:	4b0c      	ldr	r3, [pc, #48]	; (fa0c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f9da:	4798      	blx	r3
static	CANOpen_Class canoStatic(&CAN_CCU);
    f9dc:	491e      	ldr	r1, [pc, #120]	; (fa58 <_Z41__static_initialization_and_destruction_0ii+0x138>)
    f9de:	481f      	ldr	r0, [pc, #124]	; (fa5c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
    f9e0:	4b1f      	ldr	r3, [pc, #124]	; (fa60 <_Z41__static_initialization_and_destruction_0ii+0x140>)
    f9e2:	4798      	blx	r3
    f9e4:	4a07      	ldr	r2, [pc, #28]	; (fa04 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    f9e6:	491f      	ldr	r1, [pc, #124]	; (fa64 <_Z41__static_initialization_and_destruction_0ii+0x144>)
    f9e8:	481c      	ldr	r0, [pc, #112]	; (fa5c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
    f9ea:	4b08      	ldr	r3, [pc, #32]	; (fa0c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    f9ec:	4798      	blx	r3
}
    f9ee:	bf00      	nop
    f9f0:	3708      	adds	r7, #8
    f9f2:	46bd      	mov	sp, r7
    f9f4:	bd80      	pop	{r7, pc}
    f9f6:	bf00      	nop
    f9f8:	2000e058 	.word	0x2000e058
    f9fc:	20002b3c 	.word	0x20002b3c
    fa00:	0000fc6d 	.word	0x0000fc6d
    fa04:	20000000 	.word	0x20000000
    fa08:	0000fc89 	.word	0x0000fc89
    fa0c:	0001a611 	.word	0x0001a611
    fa10:	2000df28 	.word	0x2000df28
    fa14:	20002b54 	.word	0x20002b54
    fa18:	00010441 	.word	0x00010441
    fa1c:	00010479 	.word	0x00010479
    fa20:	2000dfbc 	.word	0x2000dfbc
    fa24:	20002b74 	.word	0x20002b74
    fa28:	2000e0e0 	.word	0x2000e0e0
    fa2c:	20002b94 	.word	0x20002b94
    fa30:	2000dfdc 	.word	0x2000dfdc
    fa34:	20002bb4 	.word	0x20002bb4
    fa38:	2000e0a0 	.word	0x2000e0a0
    fa3c:	20002bd4 	.word	0x20002bd4
    fa40:	2000e0c0 	.word	0x2000e0c0
    fa44:	20002bf4 	.word	0x20002bf4
    fa48:	2000df98 	.word	0x2000df98
    fa4c:	20002c14 	.word	0x20002c14
    fa50:	2000e038 	.word	0x2000e038
    fa54:	20002c34 	.word	0x20002c34
    fa58:	2000e078 	.word	0x2000e078
    fa5c:	20002c54 	.word	0x20002c54
    fa60:	00014cb9 	.word	0x00014cb9
    fa64:	00014cf5 	.word	0x00014cf5

0000fa68 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev>:
    fa68:	b580      	push	{r7, lr}
    fa6a:	af00      	add	r7, sp, #0
    fa6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fa70:	2001      	movs	r0, #1
    fa72:	4b01      	ldr	r3, [pc, #4]	; (fa78 <_GLOBAL__sub_I__ZN28Compressor_CANOpen_InterfaceC2Ev+0x10>)
    fa74:	4798      	blx	r3
    fa76:	bd80      	pop	{r7, pc}
    fa78:	0000f921 	.word	0x0000f921

0000fa7c <_ZN15HEATERS_HANDLERD1Ev>:
HEATERS_HANDLER::HEATERS_HANDLER()
{
} //HEATERS_HANDLER

// default destructor
HEATERS_HANDLER::~HEATERS_HANDLER()
    fa7c:	b510      	push	{r4, lr}
    fa7e:	4604      	mov	r4, r0
    fa80:	4b01      	ldr	r3, [pc, #4]	; (fa88 <_ZN15HEATERS_HANDLERD1Ev+0xc>)
    fa82:	4798      	blx	r3
{
} //~HEATERS_HANDLER
    fa84:	4620      	mov	r0, r4
    fa86:	bd10      	pop	{r4, pc}
    fa88:	00014029 	.word	0x00014029

0000fa8c <_ZL20Heater_2_Has_Changedv>:
{
    fa8c:	b510      	push	{r4, lr}
	heaters.module[0]->ReadGPIOs(local_gpios_buffer);
    fa8e:	4c06      	ldr	r4, [pc, #24]	; (faa8 <_ZL20Heater_2_Has_Changedv+0x1c>)
    fa90:	4621      	mov	r1, r4
    fa92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fa94:	4b05      	ldr	r3, [pc, #20]	; (faac <_ZL20Heater_2_Has_Changedv+0x20>)
    fa96:	4798      	blx	r3
	logger.SaveEventGPIOValue("Heater 2 , gpios : ",local_gpios_buffer,SINGLE_HEATER_EXPANDERS);
    fa98:	2302      	movs	r3, #2
    fa9a:	4622      	mov	r2, r4
    fa9c:	4904      	ldr	r1, [pc, #16]	; (fab0 <_ZL20Heater_2_Has_Changedv+0x24>)
    fa9e:	4805      	ldr	r0, [pc, #20]	; (fab4 <_ZL20Heater_2_Has_Changedv+0x28>)
    faa0:	4c05      	ldr	r4, [pc, #20]	; (fab8 <_ZL20Heater_2_Has_Changedv+0x2c>)
    faa2:	47a0      	blx	r4
    faa4:	bd10      	pop	{r4, pc}
    faa6:	bf00      	nop
    faa8:	20002de8 	.word	0x20002de8
    faac:	000141d9 	.word	0x000141d9
    fab0:	0001b538 	.word	0x0001b538
    fab4:	20003a68 	.word	0x20003a68
    fab8:	00011d65 	.word	0x00011d65

0000fabc <_ZL20Heater_1_Has_Changedv>:
{
    fabc:	b510      	push	{r4, lr}
	heaters.module[0]->ReadGPIOs(local_gpios_buffer);
    fabe:	4c06      	ldr	r4, [pc, #24]	; (fad8 <_ZL20Heater_1_Has_Changedv+0x1c>)
    fac0:	4621      	mov	r1, r4
    fac2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fac4:	4b05      	ldr	r3, [pc, #20]	; (fadc <_ZL20Heater_1_Has_Changedv+0x20>)
    fac6:	4798      	blx	r3
	logger.SaveEventGPIOValue("Heater 1 , gpios : ",local_gpios_buffer,SINGLE_HEATER_EXPANDERS);
    fac8:	2302      	movs	r3, #2
    faca:	4622      	mov	r2, r4
    facc:	4904      	ldr	r1, [pc, #16]	; (fae0 <_ZL20Heater_1_Has_Changedv+0x24>)
    face:	4805      	ldr	r0, [pc, #20]	; (fae4 <_ZL20Heater_1_Has_Changedv+0x28>)
    fad0:	4c05      	ldr	r4, [pc, #20]	; (fae8 <_ZL20Heater_1_Has_Changedv+0x2c>)
    fad2:	47a0      	blx	r4
    fad4:	bd10      	pop	{r4, pc}
    fad6:	bf00      	nop
    fad8:	20002de8 	.word	0x20002de8
    fadc:	000141d9 	.word	0x000141d9
    fae0:	0001b54c 	.word	0x0001b54c
    fae4:	20003a68 	.word	0x20003a68
    fae8:	00011d65 	.word	0x00011d65

0000faec <__tcf_1>:
static	MCP23008_Class local_heater_expanders[NUMBER_OF_HEATERS*SINGLE_HEATER_EXPANDERS];
    faec:	b570      	push	{r4, r5, r6, lr}
    faee:	4c05      	ldr	r4, [pc, #20]	; (fb04 <__tcf_1+0x18>)
    faf0:	4e05      	ldr	r6, [pc, #20]	; (fb08 <__tcf_1+0x1c>)
    faf2:	f1a4 0570 	sub.w	r5, r4, #112	; 0x70
    faf6:	3c1c      	subs	r4, #28
    faf8:	4620      	mov	r0, r4
    fafa:	47b0      	blx	r6
    fafc:	42ac      	cmp	r4, r5
    fafe:	d1fa      	bne.n	faf6 <__tcf_1+0xa>
    fb00:	bd70      	pop	{r4, r5, r6, pc}
    fb02:	bf00      	nop
    fb04:	20002e94 	.word	0x20002e94
    fb08:	0000fe3d 	.word	0x0000fe3d

0000fb0c <__tcf_0>:
static SingleHeater_Class	local_heaters[NUMBER_OF_HEATERS];
    fb0c:	b510      	push	{r4, lr}
    fb0e:	4803      	ldr	r0, [pc, #12]	; (fb1c <__tcf_0+0x10>)
    fb10:	4c03      	ldr	r4, [pc, #12]	; (fb20 <__tcf_0+0x14>)
    fb12:	47a0      	blx	r4
    fb14:	4803      	ldr	r0, [pc, #12]	; (fb24 <__tcf_0+0x18>)
    fb16:	47a0      	blx	r4
    fb18:	bd10      	pop	{r4, pc}
    fb1a:	bf00      	nop
    fb1c:	20002eb8 	.word	0x20002eb8
    fb20:	00014029 	.word	0x00014029
    fb24:	20002e94 	.word	0x20002e94

0000fb28 <_ZN15HEATERS_HANDLER4InitEv>:

bool HEATERS_HANDLER::Init(void){
    fb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb2a:	4604      	mov	r4, r0

	//InitHeaterExpanders();

	heater_expanders=local_heater_expanders;
    fb2c:	4b1b      	ldr	r3, [pc, #108]	; (fb9c <_ZN15HEATERS_HANDLER4InitEv+0x74>)
    fb2e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    fb32:	6302      	str	r2, [r0, #48]	; 0x30
	for (uint8_t i = 0; i < NUMBER_OF_HEATERS; i++)
	{
		module[i]=&local_heaters[i];
    fb34:	33ac      	adds	r3, #172	; 0xac
    fb36:	6243      	str	r3, [r0, #36]	; 0x24
		while (!module[i]->Init(i,heater_expanders))
    fb38:	4d19      	ldr	r5, [pc, #100]	; (fba0 <_ZN15HEATERS_HANDLER4InitEv+0x78>)
		{
			delay_ms(200);
    fb3a:	4f1a      	ldr	r7, [pc, #104]	; (fba4 <_ZN15HEATERS_HANDLER4InitEv+0x7c>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    fb3c:	4e1a      	ldr	r6, [pc, #104]	; (fba8 <_ZN15HEATERS_HANDLER4InitEv+0x80>)
		while (!module[i]->Init(i,heater_expanders))
    fb3e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    fb40:	2100      	movs	r1, #0
    fb42:	6a60      	ldr	r0, [r4, #36]	; 0x24
    fb44:	47a8      	blx	r5
    fb46:	b930      	cbnz	r0, fb56 <_ZN15HEATERS_HANDLER4InitEv+0x2e>
			delay_ms(200);
    fb48:	20c8      	movs	r0, #200	; 0xc8
    fb4a:	47b8      	blx	r7
    fb4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    fb50:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
    fb54:	e7f3      	b.n	fb3e <_ZN15HEATERS_HANDLER4InitEv+0x16>
		module[i]=&local_heaters[i];
    fb56:	4b15      	ldr	r3, [pc, #84]	; (fbac <_ZN15HEATERS_HANDLER4InitEv+0x84>)
    fb58:	62a3      	str	r3, [r4, #40]	; 0x28
		while (!module[i]->Init(i,heater_expanders))
    fb5a:	4d11      	ldr	r5, [pc, #68]	; (fba0 <_ZN15HEATERS_HANDLER4InitEv+0x78>)
			delay_ms(200);
    fb5c:	4f11      	ldr	r7, [pc, #68]	; (fba4 <_ZN15HEATERS_HANDLER4InitEv+0x7c>)
    fb5e:	4e12      	ldr	r6, [pc, #72]	; (fba8 <_ZN15HEATERS_HANDLER4InitEv+0x80>)
		while (!module[i]->Init(i,heater_expanders))
    fb60:	6b22      	ldr	r2, [r4, #48]	; 0x30
    fb62:	2101      	movs	r1, #1
    fb64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fb66:	47a8      	blx	r5
    fb68:	b930      	cbnz	r0, fb78 <_ZN15HEATERS_HANDLER4InitEv+0x50>
			delay_ms(200);
    fb6a:	20c8      	movs	r0, #200	; 0xc8
    fb6c:	47b8      	blx	r7
    fb6e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    fb72:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
    fb76:	e7f3      	b.n	fb60 <_ZN15HEATERS_HANDLER4InitEv+0x38>
			gpio_toggle_pin_level(LED0);
			
		}
		
	}
	ext_irq_register(PIN_PA03, Heater_1_Has_Changed);
    fb78:	490d      	ldr	r1, [pc, #52]	; (fbb0 <_ZN15HEATERS_HANDLER4InitEv+0x88>)
    fb7a:	2003      	movs	r0, #3
    fb7c:	4d0d      	ldr	r5, [pc, #52]	; (fbb4 <_ZN15HEATERS_HANDLER4InitEv+0x8c>)
    fb7e:	47a8      	blx	r5
	ext_irq_register(PIN_PA03, Heater_2_Has_Changed);
    fb80:	490d      	ldr	r1, [pc, #52]	; (fbb8 <_ZN15HEATERS_HANDLER4InitEv+0x90>)
    fb82:	2003      	movs	r0, #3
    fb84:	47a8      	blx	r5
	
	isOK=(module[0]->isOK)&(module[1]->isOK);
    fb86:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fb88:	781a      	ldrb	r2, [r3, #0]
    fb8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fb8c:	781b      	ldrb	r3, [r3, #0]
    fb8e:	4013      	ands	r3, r2
    fb90:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	return	isOK;
    fb94:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
	
}
    fb98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fb9a:	bf00      	nop
    fb9c:	20002de8 	.word	0x20002de8
    fba0:	0001403d 	.word	0x0001403d
    fba4:	00003681 	.word	0x00003681
    fba8:	41008000 	.word	0x41008000
    fbac:	20002eb8 	.word	0x20002eb8
    fbb0:	0000fabd 	.word	0x0000fabd
    fbb4:	00003715 	.word	0x00003715
    fbb8:	0000fa8d 	.word	0x0000fa8d

0000fbbc <_ZN15HEATERS_HANDLER12ReadAllGPIOsEPh>:
			heater_expanders=&local_heater_expanders[2*i+j];
		}
	}
}

void	HEATERS_HANDLER::ReadAllGPIOs(uint8_t *buffer){
    fbbc:	b570      	push	{r4, r5, r6, lr}
    fbbe:	4605      	mov	r5, r0
    fbc0:	460e      	mov	r6, r1
	for (uint8_t i = 0; i < 2; i++)
	{
	//	heater_data_array[i]=local_heater_expanders[i].ReadGPIORegister();
		module[i]->ReadGPIOs(&buffer[i*2]);
    fbc2:	6a40      	ldr	r0, [r0, #36]	; 0x24
    fbc4:	4c02      	ldr	r4, [pc, #8]	; (fbd0 <_ZN15HEATERS_HANDLER12ReadAllGPIOsEPh+0x14>)
    fbc6:	47a0      	blx	r4
    fbc8:	1cb1      	adds	r1, r6, #2
    fbca:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    fbcc:	47a0      	blx	r4
    fbce:	bd70      	pop	{r4, r5, r6, pc}
    fbd0:	000141d9 	.word	0x000141d9

0000fbd4 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev>:
		//heater_data_array=buffer;
	}
	
}
    fbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    fbd6:	4c19      	ldr	r4, [pc, #100]	; (fc3c <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x68>)
    fbd8:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
    fbdc:	4918      	ldr	r1, [pc, #96]	; (fc40 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x6c>)
    fbde:	4628      	mov	r0, r5
    fbe0:	4b18      	ldr	r3, [pc, #96]	; (fc44 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x70>)
    fbe2:	4798      	blx	r3
    fbe4:	4e18      	ldr	r6, [pc, #96]	; (fc48 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x74>)
    fbe6:	4632      	mov	r2, r6
    fbe8:	4918      	ldr	r1, [pc, #96]	; (fc4c <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x78>)
    fbea:	4628      	mov	r0, r5
    fbec:	4d18      	ldr	r5, [pc, #96]	; (fc50 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x7c>)
    fbee:	47a8      	blx	r5
static SingleHeater_Class	local_heaters[NUMBER_OF_HEATERS];
    fbf0:	f104 00ac 	add.w	r0, r4, #172	; 0xac
    fbf4:	4f17      	ldr	r7, [pc, #92]	; (fc54 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x80>)
    fbf6:	47b8      	blx	r7
    fbf8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    fbfc:	47b8      	blx	r7
    fbfe:	4632      	mov	r2, r6
    fc00:	4915      	ldr	r1, [pc, #84]	; (fc58 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x84>)
    fc02:	2000      	movs	r0, #0
    fc04:	47a8      	blx	r5
static	MCP23008_Class local_heater_expanders[NUMBER_OF_HEATERS*SINGLE_HEATER_EXPANDERS];
    fc06:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    fc0a:	4f14      	ldr	r7, [pc, #80]	; (fc5c <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x88>)
    fc0c:	47b8      	blx	r7
    fc0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
    fc12:	47b8      	blx	r7
    fc14:	f104 0074 	add.w	r0, r4, #116	; 0x74
    fc18:	47b8      	blx	r7
    fc1a:	f104 0090 	add.w	r0, r4, #144	; 0x90
    fc1e:	47b8      	blx	r7
    fc20:	4632      	mov	r2, r6
    fc22:	490f      	ldr	r1, [pc, #60]	; (fc60 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x8c>)
    fc24:	2000      	movs	r0, #0
    fc26:	47a8      	blx	r5
HEATERS_HANDLER::HEATERS_HANDLER()
    fc28:	3404      	adds	r4, #4
    fc2a:	4620      	mov	r0, r4
    fc2c:	4b0d      	ldr	r3, [pc, #52]	; (fc64 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x90>)
    fc2e:	4798      	blx	r3
    fc30:	4632      	mov	r2, r6
    fc32:	490d      	ldr	r1, [pc, #52]	; (fc68 <_GLOBAL__sub_I__ZN15HEATERS_HANDLERC2Ev+0x94>)
    fc34:	4620      	mov	r0, r4
    fc36:	47a8      	blx	r5
    fc38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fc3a:	bf00      	nop
    fc3c:	20002de8 	.word	0x20002de8
    fc40:	2000e058 	.word	0x2000e058
    fc44:	0000fc6d 	.word	0x0000fc6d
    fc48:	20000000 	.word	0x20000000
    fc4c:	0000fc89 	.word	0x0000fc89
    fc50:	0001a611 	.word	0x0001a611
    fc54:	00013ff9 	.word	0x00013ff9
    fc58:	0000fb0d 	.word	0x0000fb0d
    fc5c:	0000fe29 	.word	0x0000fe29
    fc60:	0000faed 	.word	0x0000faed
    fc64:	00013ff9 	.word	0x00013ff9
    fc68:	0000fa7d 	.word	0x0000fa7d

0000fc6c <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    fc6c:	b480      	push	{r7}
    fc6e:	b083      	sub	sp, #12
    fc70:	af00      	add	r7, sp, #0
    fc72:	6078      	str	r0, [r7, #4]
    fc74:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    fc76:	687b      	ldr	r3, [r7, #4]
    fc78:	683a      	ldr	r2, [r7, #0]
    fc7a:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    fc7c:	687b      	ldr	r3, [r7, #4]
    fc7e:	4618      	mov	r0, r3
    fc80:	370c      	adds	r7, #12
    fc82:	46bd      	mov	sp, r7
    fc84:	bc80      	pop	{r7}
    fc86:	4770      	bx	lr

0000fc88 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    fc88:	b480      	push	{r7}
    fc8a:	b083      	sub	sp, #12
    fc8c:	af00      	add	r7, sp, #0
    fc8e:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    fc90:	687b      	ldr	r3, [r7, #4]
    fc92:	4618      	mov	r0, r3
    fc94:	370c      	adds	r7, #12
    fc96:	46bd      	mov	sp, r7
    fc98:	bc80      	pop	{r7}
    fc9a:	4770      	bx	lr

0000fc9c <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    fc9c:	b580      	push	{r7, lr}
    fc9e:	b082      	sub	sp, #8
    fca0:	af00      	add	r7, sp, #0
    fca2:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    fca4:	687b      	ldr	r3, [r7, #4]
    fca6:	4a23      	ldr	r2, [pc, #140]	; (fd34 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    fca8:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    fcaa:	687b      	ldr	r3, [r7, #4]
    fcac:	4a21      	ldr	r2, [pc, #132]	; (fd34 <_ZN14I2C_Sync_Class4InitEv+0x98>)
    fcae:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    fcb0:	687b      	ldr	r3, [r7, #4]
    fcb2:	691a      	ldr	r2, [r3, #16]
    fcb4:	687b      	ldr	r3, [r7, #4]
    fcb6:	330c      	adds	r3, #12
    fcb8:	4619      	mov	r1, r3
    fcba:	4610      	mov	r0, r2
    fcbc:	4b1e      	ldr	r3, [pc, #120]	; (fd38 <_ZN14I2C_Sync_Class4InitEv+0x9c>)
    fcbe:	4798      	blx	r3
	enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    fcc0:	687b      	ldr	r3, [r7, #4]
    fcc2:	691b      	ldr	r3, [r3, #16]
    fcc4:	4618      	mov	r0, r3
    fcc6:	4b1d      	ldr	r3, [pc, #116]	; (fd3c <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    fcc8:	4798      	blx	r3
    fcca:	4603      	mov	r3, r0
    fccc:	b2da      	uxtb	r2, r3
    fcce:	687b      	ldr	r3, [r7, #4]
    fcd0:	751a      	strb	r2, [r3, #20]
	isOK=enabled==0;
    fcd2:	687b      	ldr	r3, [r7, #4]
    fcd4:	7d1b      	ldrb	r3, [r3, #20]
    fcd6:	2b00      	cmp	r3, #0
    fcd8:	bf0c      	ite	eq
    fcda:	2301      	moveq	r3, #1
    fcdc:	2300      	movne	r3, #0
    fcde:	b2da      	uxtb	r2, r3
    fce0:	687b      	ldr	r3, [r7, #4]
    fce2:	725a      	strb	r2, [r3, #9]
	if (isOK)
    fce4:	687b      	ldr	r3, [r7, #4]
    fce6:	7a5b      	ldrb	r3, [r3, #9]
    fce8:	b2db      	uxtb	r3, r3
    fcea:	2b00      	cmp	r3, #0
    fcec:	d116      	bne.n	fd1c <_ZN14I2C_Sync_Class4InitEv+0x80>
	{
		
	} 
	else
	{
		i2c_m_sync_disable(ptrI2CDescr);
    fcee:	687b      	ldr	r3, [r7, #4]
    fcf0:	691b      	ldr	r3, [r3, #16]
    fcf2:	4618      	mov	r0, r3
    fcf4:	4b12      	ldr	r3, [pc, #72]	; (fd40 <_ZN14I2C_Sync_Class4InitEv+0xa4>)
    fcf6:	4798      	blx	r3
		enabled=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    fcf8:	687b      	ldr	r3, [r7, #4]
    fcfa:	691b      	ldr	r3, [r3, #16]
    fcfc:	4618      	mov	r0, r3
    fcfe:	4b0f      	ldr	r3, [pc, #60]	; (fd3c <_ZN14I2C_Sync_Class4InitEv+0xa0>)
    fd00:	4798      	blx	r3
    fd02:	4603      	mov	r3, r0
    fd04:	b2da      	uxtb	r2, r3
    fd06:	687b      	ldr	r3, [r7, #4]
    fd08:	751a      	strb	r2, [r3, #20]
		isOK=enabled==0;
    fd0a:	687b      	ldr	r3, [r7, #4]
    fd0c:	7d1b      	ldrb	r3, [r3, #20]
    fd0e:	2b00      	cmp	r3, #0
    fd10:	bf0c      	ite	eq
    fd12:	2301      	moveq	r3, #1
    fd14:	2300      	movne	r3, #0
    fd16:	b2da      	uxtb	r2, r3
    fd18:	687b      	ldr	r3, [r7, #4]
    fd1a:	725a      	strb	r2, [r3, #9]
	}
	
	initiated=isOK;
    fd1c:	687b      	ldr	r3, [r7, #4]
    fd1e:	7a5b      	ldrb	r3, [r3, #9]
    fd20:	b2da      	uxtb	r2, r3
    fd22:	687b      	ldr	r3, [r7, #4]
    fd24:	721a      	strb	r2, [r3, #8]
	return isOK;
    fd26:	687b      	ldr	r3, [r7, #4]
    fd28:	7a5b      	ldrb	r3, [r3, #9]
    fd2a:	b2db      	uxtb	r3, r3
	
}
    fd2c:	4618      	mov	r0, r3
    fd2e:	3708      	adds	r7, #8
    fd30:	46bd      	mov	sp, r7
    fd32:	bd80      	pop	{r7, pc}
    fd34:	20002f0c 	.word	0x20002f0c
    fd38:	00003a6b 	.word	0x00003a6b
    fd3c:	000039f1 	.word	0x000039f1
    fd40:	00003a11 	.word	0x00003a11

0000fd44 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    fd44:	b580      	push	{r7, lr}
    fd46:	b082      	sub	sp, #8
    fd48:	af00      	add	r7, sp, #0
    fd4a:	6078      	str	r0, [r7, #4]
    fd4c:	460b      	mov	r3, r1
    fd4e:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    fd50:	687b      	ldr	r3, [r7, #4]
    fd52:	691b      	ldr	r3, [r3, #16]
    fd54:	78fa      	ldrb	r2, [r7, #3]
    fd56:	b211      	sxth	r1, r2
    fd58:	f44f 6200 	mov.w	r2, #2048	; 0x800
    fd5c:	4618      	mov	r0, r3
    fd5e:	4b03      	ldr	r3, [pc, #12]	; (fd6c <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    fd60:	4798      	blx	r3
    fd62:	4603      	mov	r3, r0
}
    fd64:	4618      	mov	r0, r3
    fd66:	3708      	adds	r7, #8
    fd68:	46bd      	mov	sp, r7
    fd6a:	bd80      	pop	{r7, pc}
    fd6c:	00003a31 	.word	0x00003a31

0000fd70 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    fd70:	b580      	push	{r7, lr}
    fd72:	b086      	sub	sp, #24
    fd74:	af00      	add	r7, sp, #0
    fd76:	60f8      	str	r0, [r7, #12]
    fd78:	60b9      	str	r1, [r7, #8]
    fd7a:	4613      	mov	r3, r2
    fd7c:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    fd7e:	68fb      	ldr	r3, [r7, #12]
    fd80:	68db      	ldr	r3, [r3, #12]
    fd82:	88fa      	ldrh	r2, [r7, #6]
    fd84:	68b9      	ldr	r1, [r7, #8]
    fd86:	4618      	mov	r0, r3
    fd88:	4b03      	ldr	r3, [pc, #12]	; (fd98 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    fd8a:	4798      	blx	r3
    fd8c:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    fd8e:	697b      	ldr	r3, [r7, #20]
}
    fd90:	4618      	mov	r0, r3
    fd92:	3718      	adds	r7, #24
    fd94:	46bd      	mov	sp, r7
    fd96:	bd80      	pop	{r7, pc}
    fd98:	00018469 	.word	0x00018469

0000fd9c <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    fd9c:	b580      	push	{r7, lr}
    fd9e:	b086      	sub	sp, #24
    fda0:	af00      	add	r7, sp, #0
    fda2:	60f8      	str	r0, [r7, #12]
    fda4:	60b9      	str	r1, [r7, #8]
    fda6:	4613      	mov	r3, r2
    fda8:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    fdaa:	68fb      	ldr	r3, [r7, #12]
    fdac:	68db      	ldr	r3, [r3, #12]
    fdae:	88fa      	ldrh	r2, [r7, #6]
    fdb0:	68b9      	ldr	r1, [r7, #8]
    fdb2:	4618      	mov	r0, r3
    fdb4:	4b03      	ldr	r3, [pc, #12]	; (fdc4 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    fdb6:	4798      	blx	r3
    fdb8:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    fdba:	697b      	ldr	r3, [r7, #20]
}
    fdbc:	4618      	mov	r0, r3
    fdbe:	3718      	adds	r7, #24
    fdc0:	46bd      	mov	sp, r7
    fdc2:	bd80      	pop	{r7, pc}
    fdc4:	000184b9 	.word	0x000184b9

0000fdc8 <_Z41__static_initialization_and_destruction_0ii>:
	__enable_irq();
}
void	I2C_Sync_Class::Irq_Disable(void){
	__DMB();
	__disable_irq();
}
    fdc8:	b580      	push	{r7, lr}
    fdca:	b082      	sub	sp, #8
    fdcc:	af00      	add	r7, sp, #0
    fdce:	6078      	str	r0, [r7, #4]
    fdd0:	6039      	str	r1, [r7, #0]
    fdd2:	687b      	ldr	r3, [r7, #4]
    fdd4:	2b01      	cmp	r3, #1
    fdd6:	d10d      	bne.n	fdf4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    fdd8:	683b      	ldr	r3, [r7, #0]
    fdda:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fdde:	4293      	cmp	r3, r2
    fde0:	d108      	bne.n	fdf4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
    fde2:	4906      	ldr	r1, [pc, #24]	; (fdfc <_Z41__static_initialization_and_destruction_0ii+0x34>)
    fde4:	4806      	ldr	r0, [pc, #24]	; (fe00 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    fde6:	4b07      	ldr	r3, [pc, #28]	; (fe04 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    fde8:	4798      	blx	r3
    fdea:	4a07      	ldr	r2, [pc, #28]	; (fe08 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    fdec:	4907      	ldr	r1, [pc, #28]	; (fe0c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    fdee:	4804      	ldr	r0, [pc, #16]	; (fe00 <_Z41__static_initialization_and_destruction_0ii+0x38>)
    fdf0:	4b07      	ldr	r3, [pc, #28]	; (fe10 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    fdf2:	4798      	blx	r3
    fdf4:	bf00      	nop
    fdf6:	3708      	adds	r7, #8
    fdf8:	46bd      	mov	sp, r7
    fdfa:	bd80      	pop	{r7, pc}
    fdfc:	2000e058 	.word	0x2000e058
    fe00:	20002ef4 	.word	0x20002ef4
    fe04:	0000fc6d 	.word	0x0000fc6d
    fe08:	20000000 	.word	0x20000000
    fe0c:	0000fc89 	.word	0x0000fc89
    fe10:	0001a611 	.word	0x0001a611

0000fe14 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev>:
    fe14:	b580      	push	{r7, lr}
    fe16:	af00      	add	r7, sp, #0
    fe18:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fe1c:	2001      	movs	r0, #1
    fe1e:	4b01      	ldr	r3, [pc, #4]	; (fe24 <_GLOBAL__sub_I__ZN14I2C_Sync_ClassC2Ev+0x10>)
    fe20:	4798      	blx	r3
    fe22:	bd80      	pop	{r7, pc}
    fe24:	0000fdc9 	.word	0x0000fdc9

0000fe28 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
    fe28:	b480      	push	{r7}
    fe2a:	b083      	sub	sp, #12
    fe2c:	af00      	add	r7, sp, #0
    fe2e:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
    fe30:	687b      	ldr	r3, [r7, #4]
    fe32:	4618      	mov	r0, r3
    fe34:	370c      	adds	r7, #12
    fe36:	46bd      	mov	sp, r7
    fe38:	bc80      	pop	{r7}
    fe3a:	4770      	bx	lr

0000fe3c <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
    fe3c:	b480      	push	{r7}
    fe3e:	b083      	sub	sp, #12
    fe40:	af00      	add	r7, sp, #0
    fe42:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
    fe44:	687b      	ldr	r3, [r7, #4]
    fe46:	4618      	mov	r0, r3
    fe48:	370c      	adds	r7, #12
    fe4a:	46bd      	mov	sp, r7
    fe4c:	bc80      	pop	{r7}
    fe4e:	4770      	bx	lr

0000fe50 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
    fe50:	b480      	push	{r7}
    fe52:	b085      	sub	sp, #20
    fe54:	af00      	add	r7, sp, #0
    fe56:	60f8      	str	r0, [r7, #12]
    fe58:	460b      	mov	r3, r1
    fe5a:	607a      	str	r2, [r7, #4]
    fe5c:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
    fe5e:	687b      	ldr	r3, [r7, #4]
    fe60:	681a      	ldr	r2, [r3, #0]
    fe62:	68fb      	ldr	r3, [r7, #12]
    fe64:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
    fe66:	687b      	ldr	r3, [r7, #4]
    fe68:	685a      	ldr	r2, [r3, #4]
    fe6a:	68fb      	ldr	r3, [r7, #12]
    fe6c:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
    fe6e:	68fb      	ldr	r3, [r7, #12]
    fe70:	7afa      	ldrb	r2, [r7, #11]
    fe72:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
    fe74:	68fb      	ldr	r3, [r7, #12]
    fe76:	687a      	ldr	r2, [r7, #4]
    fe78:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
    fe7a:	68fb      	ldr	r3, [r7, #12]
    fe7c:	68db      	ldr	r3, [r3, #12]
    fe7e:	7a5b      	ldrb	r3, [r3, #9]
    fe80:	b2da      	uxtb	r2, r3
    fe82:	68fb      	ldr	r3, [r7, #12]
    fe84:	719a      	strb	r2, [r3, #6]
	return isOK;
    fe86:	68fb      	ldr	r3, [r7, #12]
    fe88:	799b      	ldrb	r3, [r3, #6]
    fe8a:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
    fe8c:	4618      	mov	r0, r3
    fe8e:	3714      	adds	r7, #20
    fe90:	46bd      	mov	sp, r7
    fe92:	bc80      	pop	{r7}
    fe94:	4770      	bx	lr

0000fe96 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
    fe96:	b480      	push	{r7}
    fe98:	b083      	sub	sp, #12
    fe9a:	af00      	add	r7, sp, #0
    fe9c:	6078      	str	r0, [r7, #4]
    fe9e:	460b      	mov	r3, r1
    fea0:	70fb      	strb	r3, [r7, #3]
    return pin%8;
    fea2:	78fb      	ldrb	r3, [r7, #3]
    fea4:	f003 0307 	and.w	r3, r3, #7
    fea8:	b2db      	uxtb	r3, r3
}
    feaa:	4618      	mov	r0, r3
    feac:	370c      	adds	r7, #12
    feae:	46bd      	mov	sp, r7
    feb0:	bc80      	pop	{r7}
    feb2:	4770      	bx	lr

0000feb4 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
    feb4:	b480      	push	{r7}
    feb6:	b083      	sub	sp, #12
    feb8:	af00      	add	r7, sp, #0
    feba:	6078      	str	r0, [r7, #4]
    febc:	4608      	mov	r0, r1
    febe:	4611      	mov	r1, r2
    fec0:	461a      	mov	r2, r3
    fec2:	4603      	mov	r3, r0
    fec4:	70fb      	strb	r3, [r7, #3]
    fec6:	460b      	mov	r3, r1
    fec8:	70bb      	strb	r3, [r7, #2]
    feca:	4613      	mov	r3, r2
    fecc:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
    fece:	78fb      	ldrb	r3, [r7, #3]
    fed0:	2b07      	cmp	r3, #7
    fed2:	dc01      	bgt.n	fed8 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
    fed4:	78bb      	ldrb	r3, [r7, #2]
    fed6:	e000      	b.n	feda <_ZN14MCP23008_Class9regForPinEhhh+0x26>
    fed8:	787b      	ldrb	r3, [r7, #1]
}
    feda:	4618      	mov	r0, r3
    fedc:	370c      	adds	r7, #12
    fede:	46bd      	mov	sp, r7
    fee0:	bc80      	pop	{r7}
    fee2:	4770      	bx	lr

0000fee4 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
    fee4:	b580      	push	{r7, lr}
    fee6:	b082      	sub	sp, #8
    fee8:	af00      	add	r7, sp, #0
    feea:	6078      	str	r0, [r7, #4]
    feec:	460b      	mov	r3, r1
    feee:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
    fef0:	687b      	ldr	r3, [r7, #4]
    fef2:	68da      	ldr	r2, [r3, #12]
    fef4:	687b      	ldr	r3, [r7, #4]
    fef6:	7a1b      	ldrb	r3, [r3, #8]
    fef8:	4619      	mov	r1, r3
    fefa:	4610      	mov	r0, r2
    fefc:	4b0a      	ldr	r3, [pc, #40]	; (ff28 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
    fefe:	4798      	blx	r3
	i2cClass->Write(&addr,1);
    ff00:	687b      	ldr	r3, [r7, #4]
    ff02:	68db      	ldr	r3, [r3, #12]
    ff04:	1cf9      	adds	r1, r7, #3
    ff06:	2201      	movs	r2, #1
    ff08:	4618      	mov	r0, r3
    ff0a:	4b08      	ldr	r3, [pc, #32]	; (ff2c <_ZN14MCP23008_Class12readRegisterEh+0x48>)
    ff0c:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
    ff0e:	687b      	ldr	r3, [r7, #4]
    ff10:	68db      	ldr	r3, [r3, #12]
    ff12:	6879      	ldr	r1, [r7, #4]
    ff14:	2201      	movs	r2, #1
    ff16:	4618      	mov	r0, r3
    ff18:	4b05      	ldr	r3, [pc, #20]	; (ff30 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
    ff1a:	4798      	blx	r3

	return registerValue;
    ff1c:	687b      	ldr	r3, [r7, #4]
    ff1e:	781b      	ldrb	r3, [r3, #0]
}
    ff20:	4618      	mov	r0, r3
    ff22:	3708      	adds	r7, #8
    ff24:	46bd      	mov	sp, r7
    ff26:	bd80      	pop	{r7, pc}
    ff28:	0000fd45 	.word	0x0000fd45
    ff2c:	0000fd71 	.word	0x0000fd71
    ff30:	0000fd9d 	.word	0x0000fd9d

0000ff34 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
    ff34:	b580      	push	{r7, lr}
    ff36:	b084      	sub	sp, #16
    ff38:	af00      	add	r7, sp, #0
    ff3a:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    ff3c:	687b      	ldr	r3, [r7, #4]
    ff3e:	68da      	ldr	r2, [r3, #12]
    ff40:	687b      	ldr	r3, [r7, #4]
    ff42:	7a1b      	ldrb	r3, [r3, #8]
    ff44:	4619      	mov	r1, r3
    ff46:	4610      	mov	r0, r2
    ff48:	4b06      	ldr	r3, [pc, #24]	; (ff64 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
    ff4a:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
    ff4c:	2109      	movs	r1, #9
    ff4e:	6878      	ldr	r0, [r7, #4]
    ff50:	4b05      	ldr	r3, [pc, #20]	; (ff68 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
    ff52:	4798      	blx	r3
    ff54:	4603      	mov	r3, r0
    ff56:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
    ff58:	7bfb      	ldrb	r3, [r7, #15]
}
    ff5a:	4618      	mov	r0, r3
    ff5c:	3710      	adds	r7, #16
    ff5e:	46bd      	mov	sp, r7
    ff60:	bd80      	pop	{r7, pc}
    ff62:	bf00      	nop
    ff64:	0000fd45 	.word	0x0000fd45
    ff68:	0000fee5 	.word	0x0000fee5

0000ff6c <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
    ff6c:	b580      	push	{r7, lr}
    ff6e:	b084      	sub	sp, #16
    ff70:	af00      	add	r7, sp, #0
    ff72:	6078      	str	r0, [r7, #4]
    ff74:	460b      	mov	r3, r1
    ff76:	70fb      	strb	r3, [r7, #3]
    ff78:	4613      	mov	r3, r2
    ff7a:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
    ff7c:	687b      	ldr	r3, [r7, #4]
    ff7e:	68da      	ldr	r2, [r3, #12]
    ff80:	687b      	ldr	r3, [r7, #4]
    ff82:	7a1b      	ldrb	r3, [r3, #8]
    ff84:	4619      	mov	r1, r3
    ff86:	4610      	mov	r0, r2
    ff88:	4b09      	ldr	r3, [pc, #36]	; (ffb0 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
    ff8a:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
    ff8c:	78fb      	ldrb	r3, [r7, #3]
    ff8e:	733b      	strb	r3, [r7, #12]
	array[1]=value;
    ff90:	78bb      	ldrb	r3, [r7, #2]
    ff92:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
    ff94:	687b      	ldr	r3, [r7, #4]
    ff96:	68db      	ldr	r3, [r3, #12]
    ff98:	f107 010c 	add.w	r1, r7, #12
    ff9c:	2202      	movs	r2, #2
    ff9e:	4618      	mov	r0, r3
    ffa0:	4b04      	ldr	r3, [pc, #16]	; (ffb4 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
    ffa2:	4798      	blx	r3
    ffa4:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
    ffa6:	4618      	mov	r0, r3
    ffa8:	3710      	adds	r7, #16
    ffaa:	46bd      	mov	sp, r7
    ffac:	bd80      	pop	{r7, pc}
    ffae:	bf00      	nop
    ffb0:	0000fd45 	.word	0x0000fd45
    ffb4:	0000fd71 	.word	0x0000fd71

0000ffb8 <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
    ffb8:	b580      	push	{r7, lr}
    ffba:	b082      	sub	sp, #8
    ffbc:	af00      	add	r7, sp, #0
    ffbe:	6078      	str	r0, [r7, #4]
    ffc0:	460b      	mov	r3, r1
    ffc2:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
    ffc4:	687b      	ldr	r3, [r7, #4]
    ffc6:	68da      	ldr	r2, [r3, #12]
    ffc8:	687b      	ldr	r3, [r7, #4]
    ffca:	7a1b      	ldrb	r3, [r3, #8]
    ffcc:	4619      	mov	r1, r3
    ffce:	4610      	mov	r0, r2
    ffd0:	4b06      	ldr	r3, [pc, #24]	; (ffec <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
    ffd2:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
    ffd4:	78fb      	ldrb	r3, [r7, #3]
    ffd6:	461a      	mov	r2, r3
    ffd8:	2109      	movs	r1, #9
    ffda:	6878      	ldr	r0, [r7, #4]
    ffdc:	4b04      	ldr	r3, [pc, #16]	; (fff0 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
    ffde:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
    ffe0:	78fb      	ldrb	r3, [r7, #3]
}
    ffe2:	4618      	mov	r0, r3
    ffe4:	3708      	adds	r7, #8
    ffe6:	46bd      	mov	sp, r7
    ffe8:	bd80      	pop	{r7, pc}
    ffea:	bf00      	nop
    ffec:	0000fd45 	.word	0x0000fd45
    fff0:	0000ff6d 	.word	0x0000ff6d

0000fff4 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
    fff4:	b580      	push	{r7, lr}
    fff6:	b084      	sub	sp, #16
    fff8:	af00      	add	r7, sp, #0
    fffa:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
    fffc:	2300      	movs	r3, #0
    fffe:	73fb      	strb	r3, [r7, #15]
   10000:	7bfb      	ldrb	r3, [r7, #15]
   10002:	2b07      	cmp	r3, #7
   10004:	dc0f      	bgt.n	10026 <STACK_SIZE+0x26>
	{
		pinMode(i,MCP23008_INPUT);
   10006:	7bfb      	ldrb	r3, [r7, #15]
   10008:	2201      	movs	r2, #1
   1000a:	4619      	mov	r1, r3
   1000c:	6878      	ldr	r0, [r7, #4]
   1000e:	4b08      	ldr	r3, [pc, #32]	; (10030 <STACK_SIZE+0x30>)
   10010:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
   10012:	7bfb      	ldrb	r3, [r7, #15]
   10014:	2201      	movs	r2, #1
   10016:	4619      	mov	r1, r3
   10018:	6878      	ldr	r0, [r7, #4]
   1001a:	4b06      	ldr	r3, [pc, #24]	; (10034 <STACK_SIZE+0x34>)
   1001c:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   1001e:	7bfb      	ldrb	r3, [r7, #15]
   10020:	3301      	adds	r3, #1
   10022:	73fb      	strb	r3, [r7, #15]
   10024:	e7ec      	b.n	10000 <STACK_SIZE>
	}
}
   10026:	bf00      	nop
   10028:	3710      	adds	r7, #16
   1002a:	46bd      	mov	sp, r7
   1002c:	bd80      	pop	{r7, pc}
   1002e:	bf00      	nop
   10030:	000101b5 	.word	0x000101b5
   10034:	00010299 	.word	0x00010299

00010038 <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
   10038:	b580      	push	{r7, lr}
   1003a:	b084      	sub	sp, #16
   1003c:	af00      	add	r7, sp, #0
   1003e:	6078      	str	r0, [r7, #4]
   10040:	460b      	mov	r3, r1
   10042:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
   10044:	78fb      	ldrb	r3, [r7, #3]
   10046:	2b00      	cmp	r3, #0
   10048:	dd23      	ble.n	10092 <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
   1004a:	2300      	movs	r3, #0
   1004c:	73fb      	strb	r3, [r7, #15]
   1004e:	7bfb      	ldrb	r3, [r7, #15]
   10050:	2b07      	cmp	r3, #7
   10052:	dc21      	bgt.n	10098 <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
   10054:	78fa      	ldrb	r2, [r7, #3]
   10056:	7bfb      	ldrb	r3, [r7, #15]
   10058:	fa42 f303 	asr.w	r3, r2, r3
   1005c:	f003 0301 	and.w	r3, r3, #1
   10060:	2b00      	cmp	r3, #0
   10062:	d00c      	beq.n	1007e <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
   10064:	7bfb      	ldrb	r3, [r7, #15]
   10066:	2201      	movs	r2, #1
   10068:	4619      	mov	r1, r3
   1006a:	6878      	ldr	r0, [r7, #4]
   1006c:	4b0c      	ldr	r3, [pc, #48]	; (100a0 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   1006e:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
   10070:	7bfb      	ldrb	r3, [r7, #15]
   10072:	2201      	movs	r2, #1
   10074:	4619      	mov	r1, r3
   10076:	6878      	ldr	r0, [r7, #4]
   10078:	4b0a      	ldr	r3, [pc, #40]	; (100a4 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
   1007a:	4798      	blx	r3
   1007c:	e005      	b.n	1008a <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
   1007e:	7bfb      	ldrb	r3, [r7, #15]
   10080:	2200      	movs	r2, #0
   10082:	4619      	mov	r1, r3
   10084:	6878      	ldr	r0, [r7, #4]
   10086:	4b06      	ldr	r3, [pc, #24]	; (100a0 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   10088:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
   1008a:	7bfb      	ldrb	r3, [r7, #15]
   1008c:	3301      	adds	r3, #1
   1008e:	73fb      	strb	r3, [r7, #15]
   10090:	e7dd      	b.n	1004e <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
   10092:	6878      	ldr	r0, [r7, #4]
   10094:	4b04      	ldr	r3, [pc, #16]	; (100a8 <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
   10096:	4798      	blx	r3
	}
	
}
   10098:	bf00      	nop
   1009a:	3710      	adds	r7, #16
   1009c:	46bd      	mov	sp, r7
   1009e:	bd80      	pop	{r7, pc}
   100a0:	000101b5 	.word	0x000101b5
   100a4:	00010299 	.word	0x00010299
   100a8:	000100ad 	.word	0x000100ad

000100ac <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
   100ac:	b580      	push	{r7, lr}
   100ae:	b084      	sub	sp, #16
   100b0:	af00      	add	r7, sp, #0
   100b2:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   100b4:	2300      	movs	r3, #0
   100b6:	73fb      	strb	r3, [r7, #15]
   100b8:	7bfb      	ldrb	r3, [r7, #15]
   100ba:	2b07      	cmp	r3, #7
   100bc:	dc09      	bgt.n	100d2 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
   100be:	7bfb      	ldrb	r3, [r7, #15]
   100c0:	2200      	movs	r2, #0
   100c2:	4619      	mov	r1, r3
   100c4:	6878      	ldr	r0, [r7, #4]
   100c6:	4b05      	ldr	r3, [pc, #20]	; (100dc <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
   100c8:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   100ca:	7bfb      	ldrb	r3, [r7, #15]
   100cc:	3301      	adds	r3, #1
   100ce:	73fb      	strb	r3, [r7, #15]
   100d0:	e7f2      	b.n	100b8 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
   100d2:	bf00      	nop
   100d4:	3710      	adds	r7, #16
   100d6:	46bd      	mov	sp, r7
   100d8:	bd80      	pop	{r7, pc}
   100da:	bf00      	nop
   100dc:	000101b5 	.word	0x000101b5

000100e0 <_ZN14MCP23008_Class13SetPortOutputEh>:
void	MCP23008_Class::SetPortOutput(uint8_t out){
   100e0:	b580      	push	{r7, lr}
   100e2:	b084      	sub	sp, #16
   100e4:	af00      	add	r7, sp, #0
   100e6:	6078      	str	r0, [r7, #4]
   100e8:	460b      	mov	r3, r1
   100ea:	70fb      	strb	r3, [r7, #3]
	
	for (uint8_t i=0;i<8;i++)
   100ec:	2300      	movs	r3, #0
   100ee:	73fb      	strb	r3, [r7, #15]
   100f0:	7bfb      	ldrb	r3, [r7, #15]
   100f2:	2b07      	cmp	r3, #7
   100f4:	dc11      	bgt.n	1011a <_ZN14MCP23008_Class13SetPortOutputEh+0x3a>
	{
		if (out&(0x01<<i))
   100f6:	78fa      	ldrb	r2, [r7, #3]
   100f8:	7bfb      	ldrb	r3, [r7, #15]
   100fa:	fa42 f303 	asr.w	r3, r2, r3
   100fe:	f003 0301 	and.w	r3, r3, #1
   10102:	2b00      	cmp	r3, #0
   10104:	d005      	beq.n	10112 <_ZN14MCP23008_Class13SetPortOutputEh+0x32>
		{
			pinMode(i,MCP23008_OUTPUT);
   10106:	7bfb      	ldrb	r3, [r7, #15]
   10108:	2200      	movs	r2, #0
   1010a:	4619      	mov	r1, r3
   1010c:	6878      	ldr	r0, [r7, #4]
   1010e:	4b05      	ldr	r3, [pc, #20]	; (10124 <_ZN14MCP23008_Class13SetPortOutputEh+0x44>)
   10110:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   10112:	7bfb      	ldrb	r3, [r7, #15]
   10114:	3301      	adds	r3, #1
   10116:	73fb      	strb	r3, [r7, #15]
   10118:	e7ea      	b.n	100f0 <_ZN14MCP23008_Class13SetPortOutputEh+0x10>
		}
		
	}
}
   1011a:	bf00      	nop
   1011c:	3710      	adds	r7, #16
   1011e:	46bd      	mov	sp, r7
   10120:	bd80      	pop	{r7, pc}
   10122:	bf00      	nop
   10124:	000101b5 	.word	0x000101b5

00010128 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   10128:	b580      	push	{r7, lr}
   1012a:	b084      	sub	sp, #16
   1012c:	af00      	add	r7, sp, #0
   1012e:	6078      	str	r0, [r7, #4]
   10130:	4608      	mov	r0, r1
   10132:	4611      	mov	r1, r2
   10134:	461a      	mov	r2, r3
   10136:	4603      	mov	r3, r0
   10138:	70fb      	strb	r3, [r7, #3]
   1013a:	460b      	mov	r3, r1
   1013c:	70bb      	strb	r3, [r7, #2]
   1013e:	4613      	mov	r3, r2
   10140:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
   10142:	787b      	ldrb	r3, [r7, #1]
   10144:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   10146:	78fb      	ldrb	r3, [r7, #3]
   10148:	4619      	mov	r1, r3
   1014a:	6878      	ldr	r0, [r7, #4]
   1014c:	4b16      	ldr	r3, [pc, #88]	; (101a8 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
   1014e:	4798      	blx	r3
   10150:	4603      	mov	r3, r0
   10152:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
   10154:	7bfb      	ldrb	r3, [r7, #15]
   10156:	4619      	mov	r1, r3
   10158:	6878      	ldr	r0, [r7, #4]
   1015a:	4b14      	ldr	r3, [pc, #80]	; (101ac <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
   1015c:	4798      	blx	r3
   1015e:	4603      	mov	r3, r0
   10160:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   10162:	78bb      	ldrb	r3, [r7, #2]
   10164:	2b00      	cmp	r3, #0
   10166:	d009      	beq.n	1017c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
   10168:	7bba      	ldrb	r2, [r7, #14]
   1016a:	7b7b      	ldrb	r3, [r7, #13]
   1016c:	4619      	mov	r1, r3
   1016e:	2301      	movs	r3, #1
   10170:	408b      	lsls	r3, r1
   10172:	b2db      	uxtb	r3, r3
   10174:	4313      	orrs	r3, r2
   10176:	b2db      	uxtb	r3, r3
   10178:	73bb      	strb	r3, [r7, #14]
   1017a:	e00a      	b.n	10192 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
   1017c:	7bba      	ldrb	r2, [r7, #14]
   1017e:	7b7b      	ldrb	r3, [r7, #13]
   10180:	4619      	mov	r1, r3
   10182:	2301      	movs	r3, #1
   10184:	408b      	lsls	r3, r1
   10186:	b2db      	uxtb	r3, r3
   10188:	43db      	mvns	r3, r3
   1018a:	b2db      	uxtb	r3, r3
   1018c:	4013      	ands	r3, r2
   1018e:	b2db      	uxtb	r3, r3
   10190:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
   10192:	7bba      	ldrb	r2, [r7, #14]
   10194:	7bfb      	ldrb	r3, [r7, #15]
   10196:	4619      	mov	r1, r3
   10198:	6878      	ldr	r0, [r7, #4]
   1019a:	4b05      	ldr	r3, [pc, #20]	; (101b0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
   1019c:	4798      	blx	r3
}
   1019e:	bf00      	nop
   101a0:	3710      	adds	r7, #16
   101a2:	46bd      	mov	sp, r7
   101a4:	bd80      	pop	{r7, pc}
   101a6:	bf00      	nop
   101a8:	0000fe97 	.word	0x0000fe97
   101ac:	0000fee5 	.word	0x0000fee5
   101b0:	0000ff6d 	.word	0x0000ff6d

000101b4 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
   101b4:	b590      	push	{r4, r7, lr}
   101b6:	b085      	sub	sp, #20
   101b8:	af02      	add	r7, sp, #8
   101ba:	6078      	str	r0, [r7, #4]
   101bc:	460b      	mov	r3, r1
   101be:	70fb      	strb	r3, [r7, #3]
   101c0:	4613      	mov	r3, r2
   101c2:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
   101c4:	78bb      	ldrb	r3, [r7, #2]
   101c6:	2b01      	cmp	r3, #1
   101c8:	bf0c      	ite	eq
   101ca:	2301      	moveq	r3, #1
   101cc:	2300      	movne	r3, #0
   101ce:	b2db      	uxtb	r3, r3
   101d0:	461a      	mov	r2, r3
   101d2:	78f9      	ldrb	r1, [r7, #3]
   101d4:	2300      	movs	r3, #0
   101d6:	9300      	str	r3, [sp, #0]
   101d8:	2300      	movs	r3, #0
   101da:	6878      	ldr	r0, [r7, #4]
   101dc:	4c02      	ldr	r4, [pc, #8]	; (101e8 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
   101de:	47a0      	blx	r4
}
   101e0:	bf00      	nop
   101e2:	370c      	adds	r7, #12
   101e4:	46bd      	mov	sp, r7
   101e6:	bd90      	pop	{r4, r7, pc}
   101e8:	00010129 	.word	0x00010129

000101ec <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
   101ec:	b590      	push	{r4, r7, lr}
   101ee:	b085      	sub	sp, #20
   101f0:	af00      	add	r7, sp, #0
   101f2:	6078      	str	r0, [r7, #4]
   101f4:	460b      	mov	r3, r1
   101f6:	70fb      	strb	r3, [r7, #3]
   101f8:	4613      	mov	r3, r2
   101fa:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
   101fc:	78fb      	ldrb	r3, [r7, #3]
   101fe:	4619      	mov	r1, r3
   10200:	6878      	ldr	r0, [r7, #4]
   10202:	4b21      	ldr	r3, [pc, #132]	; (10288 <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
   10204:	4798      	blx	r3
   10206:	4603      	mov	r3, r0
   10208:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
   1020a:	78f9      	ldrb	r1, [r7, #3]
   1020c:	230a      	movs	r3, #10
   1020e:	220a      	movs	r2, #10
   10210:	6878      	ldr	r0, [r7, #4]
   10212:	4c1e      	ldr	r4, [pc, #120]	; (1028c <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   10214:	47a0      	blx	r4
   10216:	4603      	mov	r3, r0
   10218:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
   1021a:	7bfb      	ldrb	r3, [r7, #15]
   1021c:	4619      	mov	r1, r3
   1021e:	6878      	ldr	r0, [r7, #4]
   10220:	4b1b      	ldr	r3, [pc, #108]	; (10290 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
   10222:	4798      	blx	r3
   10224:	4603      	mov	r3, r0
   10226:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
   10228:	78bb      	ldrb	r3, [r7, #2]
   1022a:	2b00      	cmp	r3, #0
   1022c:	d009      	beq.n	10242 <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
   1022e:	7bba      	ldrb	r2, [r7, #14]
   10230:	7b7b      	ldrb	r3, [r7, #13]
   10232:	4619      	mov	r1, r3
   10234:	2301      	movs	r3, #1
   10236:	408b      	lsls	r3, r1
   10238:	b2db      	uxtb	r3, r3
   1023a:	4313      	orrs	r3, r2
   1023c:	b2db      	uxtb	r3, r3
   1023e:	73bb      	strb	r3, [r7, #14]
   10240:	e00a      	b.n	10258 <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
   10242:	7bba      	ldrb	r2, [r7, #14]
   10244:	7b7b      	ldrb	r3, [r7, #13]
   10246:	4619      	mov	r1, r3
   10248:	2301      	movs	r3, #1
   1024a:	408b      	lsls	r3, r1
   1024c:	b2db      	uxtb	r3, r3
   1024e:	43db      	mvns	r3, r3
   10250:	b2db      	uxtb	r3, r3
   10252:	4013      	ands	r3, r2
   10254:	b2db      	uxtb	r3, r3
   10256:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
   10258:	78f9      	ldrb	r1, [r7, #3]
   1025a:	2309      	movs	r3, #9
   1025c:	2209      	movs	r2, #9
   1025e:	6878      	ldr	r0, [r7, #4]
   10260:	4c0a      	ldr	r4, [pc, #40]	; (1028c <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   10262:	47a0      	blx	r4
   10264:	4603      	mov	r3, r0
   10266:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
   10268:	7bba      	ldrb	r2, [r7, #14]
   1026a:	7bfb      	ldrb	r3, [r7, #15]
   1026c:	4619      	mov	r1, r3
   1026e:	6878      	ldr	r0, [r7, #4]
   10270:	4b08      	ldr	r3, [pc, #32]	; (10294 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
   10272:	4798      	blx	r3
   10274:	4603      	mov	r3, r0
   10276:	2b00      	cmp	r3, #0
   10278:	bf0c      	ite	eq
   1027a:	2301      	moveq	r3, #1
   1027c:	2300      	movne	r3, #0
   1027e:	b2db      	uxtb	r3, r3
}
   10280:	4618      	mov	r0, r3
   10282:	3714      	adds	r7, #20
   10284:	46bd      	mov	sp, r7
   10286:	bd90      	pop	{r4, r7, pc}
   10288:	0000fe97 	.word	0x0000fe97
   1028c:	0000feb5 	.word	0x0000feb5
   10290:	0000fee5 	.word	0x0000fee5
   10294:	0000ff6d 	.word	0x0000ff6d

00010298 <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
   10298:	b590      	push	{r4, r7, lr}
   1029a:	b085      	sub	sp, #20
   1029c:	af02      	add	r7, sp, #8
   1029e:	6078      	str	r0, [r7, #4]
   102a0:	460b      	mov	r3, r1
   102a2:	70fb      	strb	r3, [r7, #3]
   102a4:	4613      	mov	r3, r2
   102a6:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
   102a8:	78ba      	ldrb	r2, [r7, #2]
   102aa:	78f9      	ldrb	r1, [r7, #3]
   102ac:	2306      	movs	r3, #6
   102ae:	9300      	str	r3, [sp, #0]
   102b0:	2306      	movs	r3, #6
   102b2:	6878      	ldr	r0, [r7, #4]
   102b4:	4c02      	ldr	r4, [pc, #8]	; (102c0 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
   102b6:	47a0      	blx	r4
}
   102b8:	bf00      	nop
   102ba:	370c      	adds	r7, #12
   102bc:	46bd      	mov	sp, r7
   102be:	bd90      	pop	{r4, r7, pc}
   102c0:	00010129 	.word	0x00010129

000102c4 <_ZN14MCP23008_Class26setupConfigurationRegisterEhhh>:
 * polarity will set LOW or HIGH on interrupt.
 * Default values after Power On Reset are: (false, false, LOW)
 * If you are connecting the INTA/B pin to arduino 2/3, you should configure the interupt handling as FALLING with
 * the default configuration.
 */
void MCP23008_Class::setupConfigurationRegister(uint8_t mirroring, uint8_t openDrain, uint8_t polarity){
   102c4:	b580      	push	{r7, lr}
   102c6:	b084      	sub	sp, #16
   102c8:	af00      	add	r7, sp, #0
   102ca:	6078      	str	r0, [r7, #4]
   102cc:	4608      	mov	r0, r1
   102ce:	4611      	mov	r1, r2
   102d0:	461a      	mov	r2, r3
   102d2:	4603      	mov	r3, r0
   102d4:	70fb      	strb	r3, [r7, #3]
   102d6:	460b      	mov	r3, r1
   102d8:	70bb      	strb	r3, [r7, #2]
   102da:	4613      	mov	r3, r2
   102dc:	707b      	strb	r3, [r7, #1]
	// configure the port A
	uint8_t ioconfValue=readRegister(MCP23008_IOCONA);
   102de:	2105      	movs	r1, #5
   102e0:	6878      	ldr	r0, [r7, #4]
   102e2:	4b15      	ldr	r3, [pc, #84]	; (10338 <_ZN14MCP23008_Class26setupConfigurationRegisterEhhh+0x74>)
   102e4:	4798      	blx	r3
   102e6:	4603      	mov	r3, r0
   102e8:	73fb      	strb	r3, [r7, #15]
//	bitWrite(ioconfValue,6,mirroring);
	bitWrite(ioconfValue,2,openDrain);
   102ea:	78bb      	ldrb	r3, [r7, #2]
   102ec:	2b00      	cmp	r3, #0
   102ee:	d005      	beq.n	102fc <_ZN14MCP23008_Class26setupConfigurationRegisterEhhh+0x38>
   102f0:	7bfb      	ldrb	r3, [r7, #15]
   102f2:	f043 0304 	orr.w	r3, r3, #4
   102f6:	b2db      	uxtb	r3, r3
   102f8:	73fb      	strb	r3, [r7, #15]
   102fa:	e004      	b.n	10306 <_ZN14MCP23008_Class26setupConfigurationRegisterEhhh+0x42>
   102fc:	7bfb      	ldrb	r3, [r7, #15]
   102fe:	f023 0304 	bic.w	r3, r3, #4
   10302:	b2db      	uxtb	r3, r3
   10304:	73fb      	strb	r3, [r7, #15]
	bitWrite(ioconfValue,1,polarity);
   10306:	787b      	ldrb	r3, [r7, #1]
   10308:	2b00      	cmp	r3, #0
   1030a:	d005      	beq.n	10318 <_ZN14MCP23008_Class26setupConfigurationRegisterEhhh+0x54>
   1030c:	7bfb      	ldrb	r3, [r7, #15]
   1030e:	f043 0302 	orr.w	r3, r3, #2
   10312:	b2db      	uxtb	r3, r3
   10314:	73fb      	strb	r3, [r7, #15]
   10316:	e004      	b.n	10322 <_ZN14MCP23008_Class26setupConfigurationRegisterEhhh+0x5e>
   10318:	7bfb      	ldrb	r3, [r7, #15]
   1031a:	f023 0302 	bic.w	r3, r3, #2
   1031e:	b2db      	uxtb	r3, r3
   10320:	73fb      	strb	r3, [r7, #15]
	writeRegister(MCP23008_IOCONA,ioconfValue);
   10322:	7bfb      	ldrb	r3, [r7, #15]
   10324:	461a      	mov	r2, r3
   10326:	2105      	movs	r1, #5
   10328:	6878      	ldr	r0, [r7, #4]
   1032a:	4b04      	ldr	r3, [pc, #16]	; (1033c <_ZN14MCP23008_Class26setupConfigurationRegisterEhhh+0x78>)
   1032c:	4798      	blx	r3


}
   1032e:	bf00      	nop
   10330:	3710      	adds	r7, #16
   10332:	46bd      	mov	sp, r7
   10334:	bd80      	pop	{r7, pc}
   10336:	bf00      	nop
   10338:	0000fee5 	.word	0x0000fee5
   1033c:	0000ff6d 	.word	0x0000ff6d

00010340 <_ZN14MCP23008_Class17setupInterruptPinEhh>:
 *
 * Note that the interrupt condition finishes when you read the information about the port / value
 * that caused the interrupt or you read the port itself. Check the datasheet can be confusing.
 *
 */
void MCP23008_Class::setupInterruptPin(uint8_t pin, uint8_t mode) {
   10340:	b590      	push	{r4, r7, lr}
   10342:	b085      	sub	sp, #20
   10344:	af02      	add	r7, sp, #8
   10346:	6078      	str	r0, [r7, #4]
   10348:	460b      	mov	r3, r1
   1034a:	70fb      	strb	r3, [r7, #3]
   1034c:	4613      	mov	r3, r2
   1034e:	70bb      	strb	r3, [r7, #2]

	// set the pin interrupt control (0 means change, 1 means compare against given value);
	updateRegisterBit(pin,mode!=MCP23008_CHANGE,MCP23008_INTCONA,MCP23008_INTCONA);
   10350:	78bb      	ldrb	r3, [r7, #2]
   10352:	2b02      	cmp	r3, #2
   10354:	bf14      	ite	ne
   10356:	2301      	movne	r3, #1
   10358:	2300      	moveq	r3, #0
   1035a:	b2db      	uxtb	r3, r3
   1035c:	461a      	mov	r2, r3
   1035e:	78f9      	ldrb	r1, [r7, #3]
   10360:	2304      	movs	r3, #4
   10362:	9300      	str	r3, [sp, #0]
   10364:	2304      	movs	r3, #4
   10366:	6878      	ldr	r0, [r7, #4]
   10368:	4c06      	ldr	r4, [pc, #24]	; (10384 <_ZN14MCP23008_Class17setupInterruptPinEhh+0x44>)
   1036a:	47a0      	blx	r4
	// In a RISING interrupt the default value is 0, interrupt is triggered when the pin goes to 1.
	// In a FALLING interrupt the default value is 1, interrupt is triggered when pin goes to 0.
//	updateRegisterBit(pin,(mode==MCP23008_FALLING),MCP23008_DEFVALA,MCP23008_DEFVALA);

	// enable the pin for interrupt
	updateRegisterBit(pin,MCP23008_HIGH,MCP23008_GPINTENA,MCP23008_GPINTENA);
   1036c:	78f9      	ldrb	r1, [r7, #3]
   1036e:	2302      	movs	r3, #2
   10370:	9300      	str	r3, [sp, #0]
   10372:	2302      	movs	r3, #2
   10374:	2201      	movs	r2, #1
   10376:	6878      	ldr	r0, [r7, #4]
   10378:	4c02      	ldr	r4, [pc, #8]	; (10384 <_ZN14MCP23008_Class17setupInterruptPinEhh+0x44>)
   1037a:	47a0      	blx	r4

}
   1037c:	bf00      	nop
   1037e:	370c      	adds	r7, #12
   10380:	46bd      	mov	sp, r7
   10382:	bd90      	pop	{r4, r7, pc}
   10384:	00010129 	.word	0x00010129

00010388 <_ZN14MCP23008_Class22SetChangeInterruptPinsEh>:
	for (uint8_t ii = 0; ii <MCP23008_NUMBER_PINS ; ii++)
	{
		setupInterruptPin(ii,MCP23008_CHANGE);
	}
}
void MCP23008_Class::SetChangeInterruptPins(uint8_t mask){
   10388:	b590      	push	{r4, r7, lr}
   1038a:	b085      	sub	sp, #20
   1038c:	af00      	add	r7, sp, #0
   1038e:	6078      	str	r0, [r7, #4]
   10390:	460b      	mov	r3, r1
   10392:	70fb      	strb	r3, [r7, #3]
	
	for (uint8_t ii = 0; ii <MCP23008_NUMBER_PINS ; ii++)
   10394:	2300      	movs	r3, #0
   10396:	73fb      	strb	r3, [r7, #15]
   10398:	7bfb      	ldrb	r3, [r7, #15]
   1039a:	2b07      	cmp	r3, #7
   1039c:	dc11      	bgt.n	103c2 <_ZN14MCP23008_Class22SetChangeInterruptPinsEh+0x3a>
	{
		if (mask&(0x01<<ii))
   1039e:	78fa      	ldrb	r2, [r7, #3]
   103a0:	7bfb      	ldrb	r3, [r7, #15]
   103a2:	fa42 f303 	asr.w	r3, r2, r3
   103a6:	f003 0301 	and.w	r3, r3, #1
   103aa:	2b00      	cmp	r3, #0
   103ac:	d005      	beq.n	103ba <_ZN14MCP23008_Class22SetChangeInterruptPinsEh+0x32>
		{
			setupInterruptPin(ii,MCP23008_CHANGE);
   103ae:	7bfb      	ldrb	r3, [r7, #15]
   103b0:	2202      	movs	r2, #2
   103b2:	4619      	mov	r1, r3
   103b4:	6878      	ldr	r0, [r7, #4]
   103b6:	4b08      	ldr	r3, [pc, #32]	; (103d8 <_ZN14MCP23008_Class22SetChangeInterruptPinsEh+0x50>)
   103b8:	4798      	blx	r3
	for (uint8_t ii = 0; ii <MCP23008_NUMBER_PINS ; ii++)
   103ba:	7bfb      	ldrb	r3, [r7, #15]
   103bc:	3301      	adds	r3, #1
   103be:	73fb      	strb	r3, [r7, #15]
   103c0:	e7ea      	b.n	10398 <_ZN14MCP23008_Class22SetChangeInterruptPinsEh+0x10>
		}
		
	}
	setupConfigurationRegister(false,false,MCP23008_HIGH);
   103c2:	2301      	movs	r3, #1
   103c4:	2200      	movs	r2, #0
   103c6:	2100      	movs	r1, #0
   103c8:	6878      	ldr	r0, [r7, #4]
   103ca:	4c04      	ldr	r4, [pc, #16]	; (103dc <_ZN14MCP23008_Class22SetChangeInterruptPinsEh+0x54>)
   103cc:	47a0      	blx	r4
}
   103ce:	bf00      	nop
   103d0:	3714      	adds	r7, #20
   103d2:	46bd      	mov	sp, r7
   103d4:	bd90      	pop	{r4, r7, pc}
   103d6:	bf00      	nop
   103d8:	00010341 	.word	0x00010341
   103dc:	000102c5 	.word	0x000102c5

000103e0 <_Z41__static_initialization_and_destruction_0ii>:
	return MCP23008_INT_ERR;
}
bool	MCP23008_Class::SelfTest(void){

	return isOK;
   103e0:	b580      	push	{r7, lr}
   103e2:	b082      	sub	sp, #8
   103e4:	af00      	add	r7, sp, #0
   103e6:	6078      	str	r0, [r7, #4]
   103e8:	6039      	str	r1, [r7, #0]
   103ea:	687b      	ldr	r3, [r7, #4]
   103ec:	2b01      	cmp	r3, #1
   103ee:	d10d      	bne.n	1040c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   103f0:	683b      	ldr	r3, [r7, #0]
   103f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   103f6:	4293      	cmp	r3, r2
   103f8:	d108      	bne.n	1040c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   103fa:	4906      	ldr	r1, [pc, #24]	; (10414 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   103fc:	4806      	ldr	r0, [pc, #24]	; (10418 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   103fe:	4b07      	ldr	r3, [pc, #28]	; (1041c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   10400:	4798      	blx	r3
   10402:	4a07      	ldr	r2, [pc, #28]	; (10420 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   10404:	4907      	ldr	r1, [pc, #28]	; (10424 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   10406:	4804      	ldr	r0, [pc, #16]	; (10418 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   10408:	4b07      	ldr	r3, [pc, #28]	; (10428 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1040a:	4798      	blx	r3
   1040c:	bf00      	nop
   1040e:	3708      	adds	r7, #8
   10410:	46bd      	mov	sp, r7
   10412:	bd80      	pop	{r7, pc}
   10414:	2000e058 	.word	0x2000e058
   10418:	20002f8c 	.word	0x20002f8c
   1041c:	0000fc6d 	.word	0x0000fc6d
   10420:	20000000 	.word	0x20000000
   10424:	0000fc89 	.word	0x0000fc89
   10428:	0001a611 	.word	0x0001a611

0001042c <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev>:
   1042c:	b580      	push	{r7, lr}
   1042e:	af00      	add	r7, sp, #0
   10430:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10434:	2001      	movs	r0, #1
   10436:	4b01      	ldr	r3, [pc, #4]	; (1043c <_GLOBAL__sub_I__ZN14MCP23008_ClassC2Ev+0x10>)
   10438:	4798      	blx	r3
   1043a:	bd80      	pop	{r7, pc}
   1043c:	000103e1 	.word	0x000103e1

00010440 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
   10440:	b480      	push	{r7}
   10442:	b083      	sub	sp, #12
   10444:	af00      	add	r7, sp, #0
   10446:	6078      	str	r0, [r7, #4]
   10448:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
   1044a:	687b      	ldr	r3, [r7, #4]
   1044c:	683a      	ldr	r2, [r7, #0]
   1044e:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
   10450:	687b      	ldr	r3, [r7, #4]
   10452:	68db      	ldr	r3, [r3, #12]
   10454:	2200      	movs	r2, #0
   10456:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
   10458:	4a06      	ldr	r2, [pc, #24]	; (10474 <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
   1045a:	687b      	ldr	r3, [r7, #4]
   1045c:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
   1045e:	687b      	ldr	r3, [r7, #4]
   10460:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10464:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
   10466:	687b      	ldr	r3, [r7, #4]
   10468:	4618      	mov	r0, r3
   1046a:	370c      	adds	r7, #12
   1046c:	46bd      	mov	sp, r7
   1046e:	bc80      	pop	{r7}
   10470:	4770      	bx	lr
   10472:	bf00      	nop
   10474:	200030a4 	.word	0x200030a4

00010478 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
   10478:	b480      	push	{r7}
   1047a:	b083      	sub	sp, #12
   1047c:	af00      	add	r7, sp, #0
   1047e:	6078      	str	r0, [r7, #4]
{
	timeout=0;
   10480:	687b      	ldr	r3, [r7, #4]
   10482:	2200      	movs	r2, #0
   10484:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
   10486:	687b      	ldr	r3, [r7, #4]
   10488:	4618      	mov	r0, r3
   1048a:	370c      	adds	r7, #12
   1048c:	46bd      	mov	sp, r7
   1048e:	bc80      	pop	{r7}
   10490:	4770      	bx	lr
	...

00010494 <_ZL9InitArrayv>:


static void InitArray(){
   10494:	b480      	push	{r7}
   10496:	b083      	sub	sp, #12
   10498:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
   1049a:	2301      	movs	r3, #1
   1049c:	607b      	str	r3, [r7, #4]
   1049e:	687b      	ldr	r3, [r7, #4]
   104a0:	2b1f      	cmp	r3, #31
   104a2:	dc34      	bgt.n	1050e <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
   104a4:	491e      	ldr	r1, [pc, #120]	; (10520 <_ZL9InitArrayv+0x8c>)
   104a6:	687a      	ldr	r2, [r7, #4]
   104a8:	4613      	mov	r3, r2
   104aa:	009b      	lsls	r3, r3, #2
   104ac:	4413      	add	r3, r2
   104ae:	009b      	lsls	r3, r3, #2
   104b0:	440b      	add	r3, r1
   104b2:	2200      	movs	r2, #0
   104b4:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
   104b6:	491a      	ldr	r1, [pc, #104]	; (10520 <_ZL9InitArrayv+0x8c>)
   104b8:	687a      	ldr	r2, [r7, #4]
   104ba:	4613      	mov	r3, r2
   104bc:	009b      	lsls	r3, r3, #2
   104be:	4413      	add	r3, r2
   104c0:	009b      	lsls	r3, r3, #2
   104c2:	440b      	add	r3, r1
   104c4:	330c      	adds	r3, #12
   104c6:	2200      	movs	r2, #0
   104c8:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
   104ca:	687b      	ldr	r3, [r7, #4]
   104cc:	1e5a      	subs	r2, r3, #1
   104ce:	6879      	ldr	r1, [r7, #4]
   104d0:	460b      	mov	r3, r1
   104d2:	009b      	lsls	r3, r3, #2
   104d4:	440b      	add	r3, r1
   104d6:	009b      	lsls	r3, r3, #2
   104d8:	4911      	ldr	r1, [pc, #68]	; (10520 <_ZL9InitArrayv+0x8c>)
   104da:	4419      	add	r1, r3
   104dc:	4810      	ldr	r0, [pc, #64]	; (10520 <_ZL9InitArrayv+0x8c>)
   104de:	4613      	mov	r3, r2
   104e0:	009b      	lsls	r3, r3, #2
   104e2:	4413      	add	r3, r2
   104e4:	009b      	lsls	r3, r3, #2
   104e6:	4403      	add	r3, r0
   104e8:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
   104ea:	4a0e      	ldr	r2, [pc, #56]	; (10524 <_ZL9InitArrayv+0x90>)
   104ec:	687b      	ldr	r3, [r7, #4]
   104ee:	2100      	movs	r1, #0
   104f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
   104f4:	687b      	ldr	r3, [r7, #4]
   104f6:	3b01      	subs	r3, #1
   104f8:	687a      	ldr	r2, [r7, #4]
   104fa:	0092      	lsls	r2, r2, #2
   104fc:	4909      	ldr	r1, [pc, #36]	; (10524 <_ZL9InitArrayv+0x90>)
   104fe:	440a      	add	r2, r1
   10500:	4908      	ldr	r1, [pc, #32]	; (10524 <_ZL9InitArrayv+0x90>)
   10502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
   10506:	687b      	ldr	r3, [r7, #4]
   10508:	3301      	adds	r3, #1
   1050a:	607b      	str	r3, [r7, #4]
   1050c:	e7c7      	b.n	1049e <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
   1050e:	4b06      	ldr	r3, [pc, #24]	; (10528 <_ZL9InitArrayv+0x94>)
   10510:	2201      	movs	r2, #1
   10512:	701a      	strb	r2, [r3, #0]
		
}
   10514:	bf00      	nop
   10516:	370c      	adds	r7, #12
   10518:	46bd      	mov	sp, r7
   1051a:	bc80      	pop	{r7}
   1051c:	4770      	bx	lr
   1051e:	bf00      	nop
   10520:	200030a8 	.word	0x200030a8
   10524:	20003328 	.word	0x20003328
   10528:	200033a8 	.word	0x200033a8

0001052c <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
   1052c:	b580      	push	{r7, lr}
   1052e:	b082      	sub	sp, #8
   10530:	af00      	add	r7, sp, #0
   10532:	6078      	str	r0, [r7, #4]
	ticks=0;
   10534:	687b      	ldr	r3, [r7, #4]
   10536:	2200      	movs	r2, #0
   10538:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
   1053a:	4b0d      	ldr	r3, [pc, #52]	; (10570 <_ZN11Timer_Class4InitEv+0x44>)
   1053c:	781b      	ldrb	r3, [r3, #0]
   1053e:	f083 0301 	eor.w	r3, r3, #1
   10542:	b2db      	uxtb	r3, r3
   10544:	2b00      	cmp	r3, #0
   10546:	d001      	beq.n	1054c <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
   10548:	4b0a      	ldr	r3, [pc, #40]	; (10574 <_ZN11Timer_Class4InitEv+0x48>)
   1054a:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
   1054c:	6878      	ldr	r0, [r7, #4]
   1054e:	4b0a      	ldr	r3, [pc, #40]	; (10578 <_ZN11Timer_Class4InitEv+0x4c>)
   10550:	4798      	blx	r3
   10552:	4603      	mov	r3, r0
   10554:	2b00      	cmp	r3, #0
   10556:	bf0c      	ite	eq
   10558:	2301      	moveq	r3, #1
   1055a:	2300      	movne	r3, #0
   1055c:	b2da      	uxtb	r2, r3
   1055e:	687b      	ldr	r3, [r7, #4]
   10560:	709a      	strb	r2, [r3, #2]
	return isOK;
   10562:	687b      	ldr	r3, [r7, #4]
   10564:	789b      	ldrb	r3, [r3, #2]
   10566:	b2db      	uxtb	r3, r3
}
   10568:	4618      	mov	r0, r3
   1056a:	3708      	adds	r7, #8
   1056c:	46bd      	mov	sp, r7
   1056e:	bd80      	pop	{r7, pc}
   10570:	200033a8 	.word	0x200033a8
   10574:	00010495 	.word	0x00010495
   10578:	0001057d 	.word	0x0001057d

0001057c <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
   1057c:	b580      	push	{r7, lr}
   1057e:	b084      	sub	sp, #16
   10580:	af00      	add	r7, sp, #0
   10582:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
   10584:	687b      	ldr	r3, [r7, #4]
   10586:	68db      	ldr	r3, [r3, #12]
   10588:	4618      	mov	r0, r3
   1058a:	4b04      	ldr	r3, [pc, #16]	; (1059c <_ZN11Timer_Class5StartEv+0x20>)
   1058c:	4798      	blx	r3
   1058e:	60f8      	str	r0, [r7, #12]
	return status;
   10590:	68fb      	ldr	r3, [r7, #12]
	
}
   10592:	4618      	mov	r0, r3
   10594:	3710      	adds	r7, #16
   10596:	46bd      	mov	sp, r7
   10598:	bd80      	pop	{r7, pc}
   1059a:	bf00      	nop
   1059c:	00003f45 	.word	0x00003f45

000105a0 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
   105a0:	b580      	push	{r7, lr}
   105a2:	b084      	sub	sp, #16
   105a4:	af00      	add	r7, sp, #0
   105a6:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
   105a8:	687b      	ldr	r3, [r7, #4]
   105aa:	68db      	ldr	r3, [r3, #12]
   105ac:	4618      	mov	r0, r3
   105ae:	4b05      	ldr	r3, [pc, #20]	; (105c4 <_ZN11Timer_Class4StopEv+0x24>)
   105b0:	4798      	blx	r3
   105b2:	60f8      	str	r0, [r7, #12]
	timeout=0;
   105b4:	687b      	ldr	r3, [r7, #4]
   105b6:	2200      	movs	r2, #0
   105b8:	705a      	strb	r2, [r3, #1]
	return status;
   105ba:	68fb      	ldr	r3, [r7, #12]
}
   105bc:	4618      	mov	r0, r3
   105be:	3710      	adds	r7, #16
   105c0:	46bd      	mov	sp, r7
   105c2:	bd80      	pop	{r7, pc}
   105c4:	00003fad 	.word	0x00003fad

000105c8 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
   105c8:	b580      	push	{r7, lr}
   105ca:	b086      	sub	sp, #24
   105cc:	af00      	add	r7, sp, #0
   105ce:	60f8      	str	r0, [r7, #12]
   105d0:	60b9      	str	r1, [r7, #8]
   105d2:	607a      	str	r2, [r7, #4]
   105d4:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
   105d6:	68b9      	ldr	r1, [r7, #8]
   105d8:	68f8      	ldr	r0, [r7, #12]
   105da:	4b0e      	ldr	r3, [pc, #56]	; (10614 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
   105dc:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
   105de:	68fb      	ldr	r3, [r7, #12]
   105e0:	699b      	ldr	r3, [r3, #24]
   105e2:	687a      	ldr	r2, [r7, #4]
   105e4:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
   105e6:	68fb      	ldr	r3, [r7, #12]
   105e8:	699b      	ldr	r3, [r3, #24]
   105ea:	68ba      	ldr	r2, [r7, #8]
   105ec:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
   105ee:	68fb      	ldr	r3, [r7, #12]
   105f0:	699b      	ldr	r3, [r3, #24]
   105f2:	78fa      	ldrb	r2, [r7, #3]
   105f4:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
   105f6:	68fb      	ldr	r3, [r7, #12]
   105f8:	68da      	ldr	r2, [r3, #12]
   105fa:	68fb      	ldr	r3, [r7, #12]
   105fc:	699b      	ldr	r3, [r3, #24]
   105fe:	4619      	mov	r1, r3
   10600:	4610      	mov	r0, r2
   10602:	4b05      	ldr	r3, [pc, #20]	; (10618 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
   10604:	4798      	blx	r3
   10606:	6178      	str	r0, [r7, #20]
	
	return status;
   10608:	697b      	ldr	r3, [r7, #20]
}
   1060a:	4618      	mov	r0, r3
   1060c:	3718      	adds	r7, #24
   1060e:	46bd      	mov	sp, r7
   10610:	bd80      	pop	{r7, pc}
   10612:	bf00      	nop
   10614:	000107d1 	.word	0x000107d1
   10618:	00004019 	.word	0x00004019

0001061c <_ZN11Timer_Class19Start_periodic_taskEPFvvEm>:
int32_t Timer_Class::Start_periodic_task(FUNC_PTR func,uint32_t interval){
   1061c:	b580      	push	{r7, lr}
   1061e:	b086      	sub	sp, #24
   10620:	af00      	add	r7, sp, #0
   10622:	60f8      	str	r0, [r7, #12]
   10624:	60b9      	str	r1, [r7, #8]
   10626:	607a      	str	r2, [r7, #4]
		int32_t	status;
	 Add_periodic_task(func,interval);
   10628:	687a      	ldr	r2, [r7, #4]
   1062a:	68b9      	ldr	r1, [r7, #8]
   1062c:	68f8      	ldr	r0, [r7, #12]
   1062e:	4b0c      	ldr	r3, [pc, #48]	; (10660 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x44>)
   10630:	4798      	blx	r3
	 	if (timer_descr->func->is_timer_started(&timer_descr->device))
   10632:	68fb      	ldr	r3, [r7, #12]
   10634:	68db      	ldr	r3, [r3, #12]
   10636:	681b      	ldr	r3, [r3, #0]
   10638:	699b      	ldr	r3, [r3, #24]
   1063a:	68fa      	ldr	r2, [r7, #12]
   1063c:	68d2      	ldr	r2, [r2, #12]
   1063e:	3204      	adds	r2, #4
   10640:	4610      	mov	r0, r2
   10642:	4798      	blx	r3
   10644:	4603      	mov	r3, r0
   10646:	2b00      	cmp	r3, #0
   10648:	d105      	bne.n	10656 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x3a>
	 	{
		 	}else{
		 	status=timer_start(timer_descr);
   1064a:	68fb      	ldr	r3, [r7, #12]
   1064c:	68db      	ldr	r3, [r3, #12]
   1064e:	4618      	mov	r0, r3
   10650:	4b04      	ldr	r3, [pc, #16]	; (10664 <_ZN11Timer_Class19Start_periodic_taskEPFvvEm+0x48>)
   10652:	4798      	blx	r3
   10654:	6178      	str	r0, [r7, #20]
	 	}
	 return status;
   10656:	697b      	ldr	r3, [r7, #20]
}
   10658:	4618      	mov	r0, r3
   1065a:	3718      	adds	r7, #24
   1065c:	46bd      	mov	sp, r7
   1065e:	bd80      	pop	{r7, pc}
   10660:	00010669 	.word	0x00010669
   10664:	00003f45 	.word	0x00003f45

00010668 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		status=timer_start(timer_descr);
	}
	return status;
}

int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
   10668:	b590      	push	{r4, r7, lr}
   1066a:	b087      	sub	sp, #28
   1066c:	af00      	add	r7, sp, #0
   1066e:	60f8      	str	r0, [r7, #12]
   10670:	60b9      	str	r1, [r7, #8]
   10672:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
   10674:	2301      	movs	r3, #1
   10676:	687a      	ldr	r2, [r7, #4]
   10678:	68b9      	ldr	r1, [r7, #8]
   1067a:	68f8      	ldr	r0, [r7, #12]
   1067c:	4c03      	ldr	r4, [pc, #12]	; (1068c <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
   1067e:	47a0      	blx	r4
   10680:	6178      	str	r0, [r7, #20]
		return status;
   10682:	697b      	ldr	r3, [r7, #20]
}
   10684:	4618      	mov	r0, r3
   10686:	371c      	adds	r7, #28
   10688:	46bd      	mov	sp, r7
   1068a:	bd90      	pop	{r4, r7, pc}
   1068c:	000105c9 	.word	0x000105c9

00010690 <_ZN11Timer_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	Timer_Class::Remove_task(void){
   10690:	b580      	push	{r7, lr}
   10692:	b082      	sub	sp, #8
   10694:	af00      	add	r7, sp, #0
   10696:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
   10698:	687b      	ldr	r3, [r7, #4]
   1069a:	68da      	ldr	r2, [r3, #12]
   1069c:	687b      	ldr	r3, [r7, #4]
   1069e:	699b      	ldr	r3, [r3, #24]
   106a0:	4619      	mov	r1, r3
   106a2:	4610      	mov	r0, r2
   106a4:	4b04      	ldr	r3, [pc, #16]	; (106b8 <_ZN11Timer_Class11Remove_taskEv+0x28>)
   106a6:	4798      	blx	r3
	task->cb=NULL;
   106a8:	687b      	ldr	r3, [r7, #4]
   106aa:	699b      	ldr	r3, [r3, #24]
   106ac:	2200      	movs	r2, #0
   106ae:	60da      	str	r2, [r3, #12]
}
   106b0:	bf00      	nop
   106b2:	3708      	adds	r7, #8
   106b4:	46bd      	mov	sp, r7
   106b6:	bd80      	pop	{r7, pc}
   106b8:	0000411d 	.word	0x0000411d

000106bc <_ZN11Timer_Class11Remove_taskEPFvvE>:

void	Timer_Class::Remove_task(FUNC_PTR func){
   106bc:	b580      	push	{r7, lr}
   106be:	b082      	sub	sp, #8
   106c0:	af00      	add	r7, sp, #0
   106c2:	6078      	str	r0, [r7, #4]
   106c4:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
   106c6:	6839      	ldr	r1, [r7, #0]
   106c8:	6878      	ldr	r0, [r7, #4]
   106ca:	4b0f      	ldr	r3, [pc, #60]	; (10708 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
   106cc:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
   106ce:	687b      	ldr	r3, [r7, #4]
   106d0:	68db      	ldr	r3, [r3, #12]
   106d2:	f103 0218 	add.w	r2, r3, #24
   106d6:	687b      	ldr	r3, [r7, #4]
   106d8:	699b      	ldr	r3, [r3, #24]
   106da:	4619      	mov	r1, r3
   106dc:	4610      	mov	r0, r2
   106de:	4b0b      	ldr	r3, [pc, #44]	; (1070c <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
   106e0:	4798      	blx	r3
   106e2:	4603      	mov	r3, r0
   106e4:	2b00      	cmp	r3, #0
   106e6:	d007      	beq.n	106f8 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
   106e8:	687b      	ldr	r3, [r7, #4]
   106ea:	68da      	ldr	r2, [r3, #12]
   106ec:	687b      	ldr	r3, [r7, #4]
   106ee:	699b      	ldr	r3, [r3, #24]
   106f0:	4619      	mov	r1, r3
   106f2:	4610      	mov	r0, r2
   106f4:	4b06      	ldr	r3, [pc, #24]	; (10710 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
   106f6:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
   106f8:	687b      	ldr	r3, [r7, #4]
   106fa:	699b      	ldr	r3, [r3, #24]
   106fc:	2200      	movs	r2, #0
   106fe:	60da      	str	r2, [r3, #12]
}
   10700:	bf00      	nop
   10702:	3708      	adds	r7, #8
   10704:	46bd      	mov	sp, r7
   10706:	bd80      	pop	{r7, pc}
   10708:	00010851 	.word	0x00010851
   1070c:	00004d05 	.word	0x00004d05
   10710:	0000411d 	.word	0x0000411d

00010714 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
   10714:	b590      	push	{r4, r7, lr}
   10716:	b087      	sub	sp, #28
   10718:	af00      	add	r7, sp, #0
   1071a:	60f8      	str	r0, [r7, #12]
   1071c:	60b9      	str	r1, [r7, #8]
   1071e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
   10720:	2300      	movs	r3, #0
   10722:	687a      	ldr	r2, [r7, #4]
   10724:	68b9      	ldr	r1, [r7, #8]
   10726:	68f8      	ldr	r0, [r7, #12]
   10728:	4c0c      	ldr	r4, [pc, #48]	; (1075c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
   1072a:	47a0      	blx	r4
   1072c:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
   1072e:	68fb      	ldr	r3, [r7, #12]
   10730:	68db      	ldr	r3, [r3, #12]
   10732:	681b      	ldr	r3, [r3, #0]
   10734:	699b      	ldr	r3, [r3, #24]
   10736:	68fa      	ldr	r2, [r7, #12]
   10738:	68d2      	ldr	r2, [r2, #12]
   1073a:	3204      	adds	r2, #4
   1073c:	4610      	mov	r0, r2
   1073e:	4798      	blx	r3
   10740:	4603      	mov	r3, r0
   10742:	2b00      	cmp	r3, #0
   10744:	d105      	bne.n	10752 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
   10746:	68fb      	ldr	r3, [r7, #12]
   10748:	68db      	ldr	r3, [r3, #12]
   1074a:	4618      	mov	r0, r3
   1074c:	4b04      	ldr	r3, [pc, #16]	; (10760 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
   1074e:	4798      	blx	r3
   10750:	6178      	str	r0, [r7, #20]
	}
	
	return status;
   10752:	697b      	ldr	r3, [r7, #20]
}
   10754:	4618      	mov	r0, r3
   10756:	371c      	adds	r7, #28
   10758:	46bd      	mov	sp, r7
   1075a:	bd90      	pop	{r4, r7, pc}
   1075c:	000105c9 	.word	0x000105c9
   10760:	00003f45 	.word	0x00003f45

00010764 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
   10764:	b480      	push	{r7}
   10766:	b085      	sub	sp, #20
   10768:	af00      	add	r7, sp, #0
   1076a:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   1076c:	2300      	movs	r3, #0
   1076e:	73fb      	strb	r3, [r7, #15]
   10770:	7bfb      	ldrb	r3, [r7, #15]
   10772:	2b1f      	cmp	r3, #31
   10774:	dc23      	bgt.n	107be <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
   10776:	687b      	ldr	r3, [r7, #4]
   10778:	7f1a      	ldrb	r2, [r3, #28]
   1077a:	7bfb      	ldrb	r3, [r7, #15]
   1077c:	4413      	add	r3, r2
   1077e:	b2db      	uxtb	r3, r3
   10780:	f003 031f 	and.w	r3, r3, #31
   10784:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
   10786:	7bba      	ldrb	r2, [r7, #14]
   10788:	4910      	ldr	r1, [pc, #64]	; (107cc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   1078a:	4613      	mov	r3, r2
   1078c:	009b      	lsls	r3, r3, #2
   1078e:	4413      	add	r3, r2
   10790:	009b      	lsls	r3, r3, #2
   10792:	440b      	add	r3, r1
   10794:	330c      	adds	r3, #12
   10796:	681b      	ldr	r3, [r3, #0]
   10798:	2b00      	cmp	r3, #0
   1079a:	d10c      	bne.n	107b6 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
   1079c:	7bba      	ldrb	r2, [r7, #14]
   1079e:	4613      	mov	r3, r2
   107a0:	009b      	lsls	r3, r3, #2
   107a2:	4413      	add	r3, r2
   107a4:	009b      	lsls	r3, r3, #2
   107a6:	4a09      	ldr	r2, [pc, #36]	; (107cc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   107a8:	441a      	add	r2, r3
   107aa:	687b      	ldr	r3, [r7, #4]
   107ac:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
   107ae:	687b      	ldr	r3, [r7, #4]
   107b0:	7bba      	ldrb	r2, [r7, #14]
   107b2:	771a      	strb	r2, [r3, #28]
			return;
   107b4:	e006      	b.n	107c4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   107b6:	7bfb      	ldrb	r3, [r7, #15]
   107b8:	3301      	adds	r3, #1
   107ba:	73fb      	strb	r3, [r7, #15]
   107bc:	e7d8      	b.n	10770 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
   107be:	687b      	ldr	r3, [r7, #4]
   107c0:	4a02      	ldr	r2, [pc, #8]	; (107cc <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
   107c2:	619a      	str	r2, [r3, #24]

}
   107c4:	3714      	adds	r7, #20
   107c6:	46bd      	mov	sp, r7
   107c8:	bc80      	pop	{r7}
   107ca:	4770      	bx	lr
   107cc:	200030a8 	.word	0x200030a8

000107d0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
   107d0:	b580      	push	{r7, lr}
   107d2:	b084      	sub	sp, #16
   107d4:	af00      	add	r7, sp, #0
   107d6:	6078      	str	r0, [r7, #4]
   107d8:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   107da:	2300      	movs	r3, #0
   107dc:	73fb      	strb	r3, [r7, #15]
   107de:	7bfb      	ldrb	r3, [r7, #15]
   107e0:	2b1f      	cmp	r3, #31
   107e2:	dc28      	bgt.n	10836 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
   107e4:	687b      	ldr	r3, [r7, #4]
   107e6:	7f1a      	ldrb	r2, [r3, #28]
   107e8:	7bfb      	ldrb	r3, [r7, #15]
   107ea:	4413      	add	r3, r2
   107ec:	b2db      	uxtb	r3, r3
   107ee:	f003 031f 	and.w	r3, r3, #31
   107f2:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
   107f4:	7bba      	ldrb	r2, [r7, #14]
   107f6:	4913      	ldr	r1, [pc, #76]	; (10844 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
   107f8:	4613      	mov	r3, r2
   107fa:	009b      	lsls	r3, r3, #2
   107fc:	4413      	add	r3, r2
   107fe:	009b      	lsls	r3, r3, #2
   10800:	440b      	add	r3, r1
   10802:	330c      	adds	r3, #12
   10804:	681a      	ldr	r2, [r3, #0]
   10806:	683b      	ldr	r3, [r7, #0]
   10808:	429a      	cmp	r2, r3
   1080a:	d110      	bne.n	1082e <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
   1080c:	6839      	ldr	r1, [r7, #0]
   1080e:	6878      	ldr	r0, [r7, #4]
   10810:	4b0d      	ldr	r3, [pc, #52]	; (10848 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
   10812:	4798      	blx	r3
			task=&taskArray[j];
   10814:	7bba      	ldrb	r2, [r7, #14]
   10816:	4613      	mov	r3, r2
   10818:	009b      	lsls	r3, r3, #2
   1081a:	4413      	add	r3, r2
   1081c:	009b      	lsls	r3, r3, #2
   1081e:	4a09      	ldr	r2, [pc, #36]	; (10844 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
   10820:	441a      	add	r2, r3
   10822:	687b      	ldr	r3, [r7, #4]
   10824:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
   10826:	687b      	ldr	r3, [r7, #4]
   10828:	7bba      	ldrb	r2, [r7, #14]
   1082a:	771a      	strb	r2, [r3, #28]
			return;
   1082c:	e006      	b.n	1083c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   1082e:	7bfb      	ldrb	r3, [r7, #15]
   10830:	3301      	adds	r3, #1
   10832:	73fb      	strb	r3, [r7, #15]
   10834:	e7d3      	b.n	107de <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
   10836:	6878      	ldr	r0, [r7, #4]
   10838:	4b04      	ldr	r3, [pc, #16]	; (1084c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
   1083a:	4798      	blx	r3
	//task=&taskArray[0];

}
   1083c:	3710      	adds	r7, #16
   1083e:	46bd      	mov	sp, r7
   10840:	bd80      	pop	{r7, pc}
   10842:	bf00      	nop
   10844:	200030a8 	.word	0x200030a8
   10848:	000106bd 	.word	0x000106bd
   1084c:	00010765 	.word	0x00010765

00010850 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
   10850:	b480      	push	{r7}
   10852:	b085      	sub	sp, #20
   10854:	af00      	add	r7, sp, #0
   10856:	6078      	str	r0, [r7, #4]
   10858:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   1085a:	2300      	movs	r3, #0
   1085c:	73fb      	strb	r3, [r7, #15]
   1085e:	7bfb      	ldrb	r3, [r7, #15]
   10860:	2b1f      	cmp	r3, #31
   10862:	dc19      	bgt.n	10898 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
   10864:	7bfa      	ldrb	r2, [r7, #15]
   10866:	490f      	ldr	r1, [pc, #60]	; (108a4 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   10868:	4613      	mov	r3, r2
   1086a:	009b      	lsls	r3, r3, #2
   1086c:	4413      	add	r3, r2
   1086e:	009b      	lsls	r3, r3, #2
   10870:	440b      	add	r3, r1
   10872:	330c      	adds	r3, #12
   10874:	681a      	ldr	r2, [r3, #0]
   10876:	683b      	ldr	r3, [r7, #0]
   10878:	429a      	cmp	r2, r3
   1087a:	d109      	bne.n	10890 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
   1087c:	7bfa      	ldrb	r2, [r7, #15]
   1087e:	4613      	mov	r3, r2
   10880:	009b      	lsls	r3, r3, #2
   10882:	4413      	add	r3, r2
   10884:	009b      	lsls	r3, r3, #2
   10886:	4a07      	ldr	r2, [pc, #28]	; (108a4 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
   10888:	441a      	add	r2, r3
   1088a:	687b      	ldr	r3, [r7, #4]
   1088c:	619a      	str	r2, [r3, #24]
			return;
   1088e:	e004      	b.n	1089a <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
   10890:	7bfb      	ldrb	r3, [r7, #15]
   10892:	3301      	adds	r3, #1
   10894:	73fb      	strb	r3, [r7, #15]
   10896:	e7e2      	b.n	1085e <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
   10898:	bf00      	nop
}
   1089a:	3714      	adds	r7, #20
   1089c:	46bd      	mov	sp, r7
   1089e:	bc80      	pop	{r7}
   108a0:	4770      	bx	lr
   108a2:	bf00      	nop
   108a4:	200030a8 	.word	0x200030a8

000108a8 <_Z41__static_initialization_and_destruction_0ii>:
   108a8:	b580      	push	{r7, lr}
   108aa:	b082      	sub	sp, #8
   108ac:	af00      	add	r7, sp, #0
   108ae:	6078      	str	r0, [r7, #4]
   108b0:	6039      	str	r1, [r7, #0]
   108b2:	687b      	ldr	r3, [r7, #4]
   108b4:	2b01      	cmp	r3, #1
   108b6:	d14c      	bne.n	10952 <_Z41__static_initialization_and_destruction_0ii+0xaa>
   108b8:	683b      	ldr	r3, [r7, #0]
   108ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
   108be:	4293      	cmp	r3, r2
   108c0:	d147      	bne.n	10952 <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   108c2:	4926      	ldr	r1, [pc, #152]	; (1095c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   108c4:	4826      	ldr	r0, [pc, #152]	; (10960 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   108c6:	4b27      	ldr	r3, [pc, #156]	; (10964 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   108c8:	4798      	blx	r3
   108ca:	4a27      	ldr	r2, [pc, #156]	; (10968 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   108cc:	4927      	ldr	r1, [pc, #156]	; (1096c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   108ce:	4824      	ldr	r0, [pc, #144]	; (10960 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   108d0:	4b27      	ldr	r3, [pc, #156]	; (10970 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   108d2:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   108d4:	4927      	ldr	r1, [pc, #156]	; (10974 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   108d6:	4828      	ldr	r0, [pc, #160]	; (10978 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   108d8:	4b22      	ldr	r3, [pc, #136]	; (10964 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   108da:	4798      	blx	r3
   108dc:	4a22      	ldr	r2, [pc, #136]	; (10968 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   108de:	4923      	ldr	r1, [pc, #140]	; (1096c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   108e0:	4825      	ldr	r0, [pc, #148]	; (10978 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   108e2:	4b23      	ldr	r3, [pc, #140]	; (10970 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   108e4:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   108e6:	4925      	ldr	r1, [pc, #148]	; (1097c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   108e8:	4825      	ldr	r0, [pc, #148]	; (10980 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   108ea:	4b1e      	ldr	r3, [pc, #120]	; (10964 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   108ec:	4798      	blx	r3
   108ee:	4a1e      	ldr	r2, [pc, #120]	; (10968 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   108f0:	491e      	ldr	r1, [pc, #120]	; (1096c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   108f2:	4823      	ldr	r0, [pc, #140]	; (10980 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   108f4:	4b1e      	ldr	r3, [pc, #120]	; (10970 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   108f6:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   108f8:	4922      	ldr	r1, [pc, #136]	; (10984 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   108fa:	4823      	ldr	r0, [pc, #140]	; (10988 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   108fc:	4b19      	ldr	r3, [pc, #100]	; (10964 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   108fe:	4798      	blx	r3
   10900:	4a19      	ldr	r2, [pc, #100]	; (10968 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   10902:	491a      	ldr	r1, [pc, #104]	; (1096c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   10904:	4820      	ldr	r0, [pc, #128]	; (10988 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   10906:	4b1a      	ldr	r3, [pc, #104]	; (10970 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   10908:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   1090a:	4920      	ldr	r1, [pc, #128]	; (1098c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   1090c:	4820      	ldr	r0, [pc, #128]	; (10990 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   1090e:	4b15      	ldr	r3, [pc, #84]	; (10964 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   10910:	4798      	blx	r3
   10912:	4a15      	ldr	r2, [pc, #84]	; (10968 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   10914:	4915      	ldr	r1, [pc, #84]	; (1096c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   10916:	481e      	ldr	r0, [pc, #120]	; (10990 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   10918:	4b15      	ldr	r3, [pc, #84]	; (10970 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1091a:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1091c:	491d      	ldr	r1, [pc, #116]	; (10994 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   1091e:	481e      	ldr	r0, [pc, #120]	; (10998 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10920:	4b10      	ldr	r3, [pc, #64]	; (10964 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   10922:	4798      	blx	r3
   10924:	4a10      	ldr	r2, [pc, #64]	; (10968 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   10926:	4911      	ldr	r1, [pc, #68]	; (1096c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   10928:	481b      	ldr	r0, [pc, #108]	; (10998 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1092a:	4b11      	ldr	r3, [pc, #68]	; (10970 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1092c:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   1092e:	491b      	ldr	r1, [pc, #108]	; (1099c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   10930:	481b      	ldr	r0, [pc, #108]	; (109a0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10932:	4b0c      	ldr	r3, [pc, #48]	; (10964 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   10934:	4798      	blx	r3
   10936:	4a0c      	ldr	r2, [pc, #48]	; (10968 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   10938:	490c      	ldr	r1, [pc, #48]	; (1096c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1093a:	4819      	ldr	r0, [pc, #100]	; (109a0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   1093c:	4b0c      	ldr	r3, [pc, #48]	; (10970 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1093e:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   10940:	4918      	ldr	r1, [pc, #96]	; (109a4 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   10942:	4819      	ldr	r0, [pc, #100]	; (109a8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   10944:	4b07      	ldr	r3, [pc, #28]	; (10964 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   10946:	4798      	blx	r3
   10948:	4a07      	ldr	r2, [pc, #28]	; (10968 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1094a:	4908      	ldr	r1, [pc, #32]	; (1096c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1094c:	4816      	ldr	r0, [pc, #88]	; (109a8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   1094e:	4b08      	ldr	r3, [pc, #32]	; (10970 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   10950:	4798      	blx	r3
   10952:	bf00      	nop
   10954:	3708      	adds	r7, #8
   10956:	46bd      	mov	sp, r7
   10958:	bd80      	pop	{r7, pc}
   1095a:	bf00      	nop
   1095c:	2000df28 	.word	0x2000df28
   10960:	20002fa4 	.word	0x20002fa4
   10964:	00010441 	.word	0x00010441
   10968:	20000000 	.word	0x20000000
   1096c:	00010479 	.word	0x00010479
   10970:	0001a611 	.word	0x0001a611
   10974:	2000dfbc 	.word	0x2000dfbc
   10978:	20002fc4 	.word	0x20002fc4
   1097c:	2000e0e0 	.word	0x2000e0e0
   10980:	20002fe4 	.word	0x20002fe4
   10984:	2000dfdc 	.word	0x2000dfdc
   10988:	20003004 	.word	0x20003004
   1098c:	2000e0a0 	.word	0x2000e0a0
   10990:	20003024 	.word	0x20003024
   10994:	2000e0c0 	.word	0x2000e0c0
   10998:	20003044 	.word	0x20003044
   1099c:	2000df98 	.word	0x2000df98
   109a0:	20003064 	.word	0x20003064
   109a4:	2000e038 	.word	0x2000e038
   109a8:	20003084 	.word	0x20003084

000109ac <_GLOBAL__sub_I_ptrTimerClass>:
   109ac:	b580      	push	{r7, lr}
   109ae:	af00      	add	r7, sp, #0
   109b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   109b4:	2001      	movs	r0, #1
   109b6:	4b01      	ldr	r3, [pc, #4]	; (109bc <_GLOBAL__sub_I_ptrTimerClass+0x10>)
   109b8:	4798      	blx	r3
   109ba:	bd80      	pop	{r7, pc}
   109bc:	000108a9 	.word	0x000108a9

000109c0 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   109c0:	b480      	push	{r7}
   109c2:	b083      	sub	sp, #12
   109c4:	af00      	add	r7, sp, #0
   109c6:	6078      	str	r0, [r7, #4]
   109c8:	4a05      	ldr	r2, [pc, #20]	; (109e0 <_ZN5PrintC1Ev+0x20>)
   109ca:	687b      	ldr	r3, [r7, #4]
   109cc:	601a      	str	r2, [r3, #0]
   109ce:	687b      	ldr	r3, [r7, #4]
   109d0:	2200      	movs	r2, #0
   109d2:	605a      	str	r2, [r3, #4]
   109d4:	687b      	ldr	r3, [r7, #4]
   109d6:	4618      	mov	r0, r3
   109d8:	370c      	adds	r7, #12
   109da:	46bd      	mov	sp, r7
   109dc:	bc80      	pop	{r7}
   109de:	4770      	bx	lr
   109e0:	0001b5d4 	.word	0x0001b5d4

000109e4 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   109e4:	b480      	push	{r7}
   109e6:	b083      	sub	sp, #12
   109e8:	af00      	add	r7, sp, #0
   109ea:	6078      	str	r0, [r7, #4]
   109ec:	2300      	movs	r3, #0
   109ee:	4618      	mov	r0, r3
   109f0:	370c      	adds	r7, #12
   109f2:	46bd      	mov	sp, r7
   109f4:	bc80      	pop	{r7}
   109f6:	4770      	bx	lr

000109f8 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
   109f8:	b480      	push	{r7}
   109fa:	b083      	sub	sp, #12
   109fc:	af00      	add	r7, sp, #0
   109fe:	6078      	str	r0, [r7, #4]
   10a00:	bf00      	nop
   10a02:	370c      	adds	r7, #12
   10a04:	46bd      	mov	sp, r7
   10a06:	bc80      	pop	{r7}
   10a08:	4770      	bx	lr
	...

00010a0c <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
   10a0c:	b580      	push	{r7, lr}
   10a0e:	b082      	sub	sp, #8
   10a10:	af00      	add	r7, sp, #0
   10a12:	6078      	str	r0, [r7, #4]
   10a14:	687b      	ldr	r3, [r7, #4]
   10a16:	4618      	mov	r0, r3
   10a18:	4b06      	ldr	r3, [pc, #24]	; (10a34 <_ZN6StreamC1Ev+0x28>)
   10a1a:	4798      	blx	r3
   10a1c:	4a06      	ldr	r2, [pc, #24]	; (10a38 <_ZN6StreamC1Ev+0x2c>)
   10a1e:	687b      	ldr	r3, [r7, #4]
   10a20:	601a      	str	r2, [r3, #0]
   10a22:	687b      	ldr	r3, [r7, #4]
   10a24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10a28:	609a      	str	r2, [r3, #8]
   10a2a:	687b      	ldr	r3, [r7, #4]
   10a2c:	4618      	mov	r0, r3
   10a2e:	3708      	adds	r7, #8
   10a30:	46bd      	mov	sp, r7
   10a32:	bd80      	pop	{r7, pc}
   10a34:	000109c1 	.word	0x000109c1
   10a38:	0001b598 	.word	0x0001b598

00010a3c <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
   10a3c:	b480      	push	{r7}
   10a3e:	b083      	sub	sp, #12
   10a40:	af00      	add	r7, sp, #0
   10a42:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
   10a44:	4b06      	ldr	r3, [pc, #24]	; (10a60 <_ZL10USBTimeoutPK10timer_task+0x24>)
   10a46:	681b      	ldr	r3, [r3, #0]
   10a48:	2201      	movs	r2, #1
   10a4a:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
   10a4c:	4b04      	ldr	r3, [pc, #16]	; (10a60 <_ZL10USBTimeoutPK10timer_task+0x24>)
   10a4e:	681b      	ldr	r3, [r3, #0]
   10a50:	2200      	movs	r2, #0
   10a52:	741a      	strb	r2, [r3, #16]
	
}
   10a54:	bf00      	nop
   10a56:	370c      	adds	r7, #12
   10a58:	46bd      	mov	sp, r7
   10a5a:	bc80      	pop	{r7}
   10a5c:	4770      	bx	lr
   10a5e:	bf00      	nop
   10a60:	200034ac 	.word	0x200034ac

00010a64 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   10a64:	b480      	push	{r7}
   10a66:	b083      	sub	sp, #12
   10a68:	af00      	add	r7, sp, #0
   10a6a:	4603      	mov	r3, r0
   10a6c:	603a      	str	r2, [r7, #0]
   10a6e:	71fb      	strb	r3, [r7, #7]
   10a70:	460b      	mov	r3, r1
   10a72:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
   10a74:	4b08      	ldr	r3, [pc, #32]	; (10a98 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   10a76:	681b      	ldr	r3, [r3, #0]
   10a78:	2201      	movs	r2, #1
   10a7a:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
   10a7c:	4b06      	ldr	r3, [pc, #24]	; (10a98 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   10a7e:	681b      	ldr	r3, [r3, #0]
   10a80:	2201      	movs	r2, #1
   10a82:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   10a84:	4b04      	ldr	r3, [pc, #16]	; (10a98 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
   10a86:	681b      	ldr	r3, [r3, #0]
   10a88:	2201      	movs	r2, #1
   10a8a:	741a      	strb	r2, [r3, #16]


	return false;
   10a8c:	2300      	movs	r3, #0
}
   10a8e:	4618      	mov	r0, r3
   10a90:	370c      	adds	r7, #12
   10a92:	46bd      	mov	sp, r7
   10a94:	bc80      	pop	{r7}
   10a96:	4770      	bx	lr
   10a98:	200034ac 	.word	0x200034ac

00010a9c <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
   10a9c:	b480      	push	{r7}
   10a9e:	b083      	sub	sp, #12
   10aa0:	af00      	add	r7, sp, #0
   10aa2:	4603      	mov	r3, r0
   10aa4:	603a      	str	r2, [r7, #0]
   10aa6:	71fb      	strb	r3, [r7, #7]
   10aa8:	460b      	mov	r3, r1
   10aaa:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
   10aac:	4b08      	ldr	r3, [pc, #32]	; (10ad0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   10aae:	681b      	ldr	r3, [r3, #0]
   10ab0:	2201      	movs	r2, #1
   10ab2:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
   10ab4:	4b06      	ldr	r3, [pc, #24]	; (10ad0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   10ab6:	681b      	ldr	r3, [r3, #0]
   10ab8:	2201      	movs	r2, #1
   10aba:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
   10abc:	4b04      	ldr	r3, [pc, #16]	; (10ad0 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
   10abe:	681b      	ldr	r3, [r3, #0]
   10ac0:	2201      	movs	r2, #1
   10ac2:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
   10ac4:	2300      	movs	r3, #0
}
   10ac6:	4618      	mov	r0, r3
   10ac8:	370c      	adds	r7, #12
   10aca:	46bd      	mov	sp, r7
   10acc:	bc80      	pop	{r7}
   10ace:	4770      	bx	lr
   10ad0:	200034ac 	.word	0x200034ac

00010ad4 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
   10ad4:	b580      	push	{r7, lr}
   10ad6:	b082      	sub	sp, #8
   10ad8:	af00      	add	r7, sp, #0
   10ada:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
   10adc:	793b      	ldrb	r3, [r7, #4]
   10ade:	f003 0301 	and.w	r3, r3, #1
   10ae2:	b2db      	uxtb	r3, r3
   10ae4:	2b00      	cmp	r3, #0
   10ae6:	d013      	beq.n	10b10 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
   10ae8:	490c      	ldr	r1, [pc, #48]	; (10b1c <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
   10aea:	2000      	movs	r0, #0
   10aec:	4b0c      	ldr	r3, [pc, #48]	; (10b20 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   10aee:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
   10af0:	490c      	ldr	r1, [pc, #48]	; (10b24 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
   10af2:	2001      	movs	r0, #1
   10af4:	4b0a      	ldr	r3, [pc, #40]	; (10b20 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
   10af6:	4798      	blx	r3
		ptrCDCClass->txReady=true;
   10af8:	4b0b      	ldr	r3, [pc, #44]	; (10b28 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   10afa:	681b      	ldr	r3, [r3, #0]
   10afc:	2201      	movs	r2, #1
   10afe:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
   10b00:	4b09      	ldr	r3, [pc, #36]	; (10b28 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   10b02:	681b      	ldr	r3, [r3, #0]
   10b04:	2201      	movs	r2, #1
   10b06:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
   10b08:	4b07      	ldr	r3, [pc, #28]	; (10b28 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
   10b0a:	681b      	ldr	r3, [r3, #0]
   10b0c:	2201      	movs	r2, #1
   10b0e:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
   10b10:	2300      	movs	r3, #0
}
   10b12:	4618      	mov	r0, r3
   10b14:	3708      	adds	r7, #8
   10b16:	46bd      	mov	sp, r7
   10b18:	bd80      	pop	{r7, pc}
   10b1a:	bf00      	nop
   10b1c:	00010a65 	.word	0x00010a65
   10b20:	0000dfb1 	.word	0x0000dfb1
   10b24:	00010a9d 	.word	0x00010a9d
   10b28:	200034ac 	.word	0x200034ac

00010b2c <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
   10b2c:	b580      	push	{r7, lr}
   10b2e:	b082      	sub	sp, #8
   10b30:	af00      	add	r7, sp, #0
   10b32:	6078      	str	r0, [r7, #4]
   10b34:	687b      	ldr	r3, [r7, #4]
   10b36:	4618      	mov	r0, r3
   10b38:	4b0a      	ldr	r3, [pc, #40]	; (10b64 <_ZN9CDC_ClassC1Ev+0x38>)
   10b3a:	4798      	blx	r3
   10b3c:	687b      	ldr	r3, [r7, #4]
   10b3e:	3310      	adds	r3, #16
   10b40:	4618      	mov	r0, r3
   10b42:	4b09      	ldr	r3, [pc, #36]	; (10b68 <_ZN9CDC_ClassC1Ev+0x3c>)
   10b44:	4798      	blx	r3
   10b46:	4a09      	ldr	r2, [pc, #36]	; (10b6c <_ZN9CDC_ClassC1Ev+0x40>)
   10b48:	687b      	ldr	r3, [r7, #4]
   10b4a:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
   10b4c:	687b      	ldr	r3, [r7, #4]
   10b4e:	f04f 32ff 	mov.w	r2, #4294967295
   10b52:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
   10b54:	4a06      	ldr	r2, [pc, #24]	; (10b70 <_ZN9CDC_ClassC1Ev+0x44>)
   10b56:	687b      	ldr	r3, [r7, #4]
   10b58:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
   10b5a:	687b      	ldr	r3, [r7, #4]
   10b5c:	4618      	mov	r0, r3
   10b5e:	3708      	adds	r7, #8
   10b60:	46bd      	mov	sp, r7
   10b62:	bd80      	pop	{r7, pc}
   10b64:	00010a0d 	.word	0x00010a0d
   10b68:	00011249 	.word	0x00011249
   10b6c:	0001b568 	.word	0x0001b568
   10b70:	200034ac 	.word	0x200034ac

00010b74 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
   10b74:	b580      	push	{r7, lr}
   10b76:	b082      	sub	sp, #8
   10b78:	af00      	add	r7, sp, #0
   10b7a:	6078      	str	r0, [r7, #4]
   10b7c:	4a06      	ldr	r2, [pc, #24]	; (10b98 <_ZN9CDC_ClassD1Ev+0x24>)
   10b7e:	687b      	ldr	r3, [r7, #4]
   10b80:	601a      	str	r2, [r3, #0]
   10b82:	687b      	ldr	r3, [r7, #4]
   10b84:	3310      	adds	r3, #16
   10b86:	4618      	mov	r0, r3
   10b88:	4b04      	ldr	r3, [pc, #16]	; (10b9c <_ZN9CDC_ClassD1Ev+0x28>)
   10b8a:	4798      	blx	r3
{
} //~CDC_Class
   10b8c:	687b      	ldr	r3, [r7, #4]
   10b8e:	4618      	mov	r0, r3
   10b90:	3708      	adds	r7, #8
   10b92:	46bd      	mov	sp, r7
   10b94:	bd80      	pop	{r7, pc}
   10b96:	bf00      	nop
   10b98:	0001b568 	.word	0x0001b568
   10b9c:	00011269 	.word	0x00011269

00010ba0 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
   10ba0:	b580      	push	{r7, lr}
   10ba2:	b082      	sub	sp, #8
   10ba4:	af00      	add	r7, sp, #0
   10ba6:	6078      	str	r0, [r7, #4]
	
	OnInit();
   10ba8:	687b      	ldr	r3, [r7, #4]
   10baa:	3310      	adds	r3, #16
   10bac:	4618      	mov	r0, r3
   10bae:	4b09      	ldr	r3, [pc, #36]	; (10bd4 <_ZN9CDC_Class4InitEv+0x34>)
   10bb0:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
   10bb2:	4909      	ldr	r1, [pc, #36]	; (10bd8 <_ZN9CDC_Class4InitEv+0x38>)
   10bb4:	2003      	movs	r0, #3
   10bb6:	4b09      	ldr	r3, [pc, #36]	; (10bdc <_ZN9CDC_Class4InitEv+0x3c>)
   10bb8:	4798      	blx	r3
	delay_ms(100);
   10bba:	2064      	movs	r0, #100	; 0x64
   10bbc:	4b08      	ldr	r3, [pc, #32]	; (10be0 <_ZN9CDC_Class4InitEv+0x40>)
   10bbe:	4798      	blx	r3
		
	if (connected)
   10bc0:	687b      	ldr	r3, [r7, #4]
   10bc2:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
   10bc4:	2064      	movs	r0, #100	; 0x64
   10bc6:	4b06      	ldr	r3, [pc, #24]	; (10be0 <_ZN9CDC_Class4InitEv+0x40>)
   10bc8:	4798      	blx	r3

	

}
   10bca:	bf00      	nop
   10bcc:	3708      	adds	r7, #8
   10bce:	46bd      	mov	sp, r7
   10bd0:	bd80      	pop	{r7, pc}
   10bd2:	bf00      	nop
   10bd4:	0001127d 	.word	0x0001127d
   10bd8:	00010ad5 	.word	0x00010ad5
   10bdc:	0000dfb1 	.word	0x0000dfb1
   10be0:	00003681 	.word	0x00003681

00010be4 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
   10be4:	b580      	push	{r7, lr}
   10be6:	b082      	sub	sp, #8
   10be8:	af00      	add	r7, sp, #0
   10bea:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
   10bec:	4b03      	ldr	r3, [pc, #12]	; (10bfc <_ZN9CDC_Class9IsEnabledEv+0x18>)
   10bee:	4798      	blx	r3
   10bf0:	4603      	mov	r3, r0
	
}
   10bf2:	4618      	mov	r0, r3
   10bf4:	3708      	adds	r7, #8
   10bf6:	46bd      	mov	sp, r7
   10bf8:	bd80      	pop	{r7, pc}
   10bfa:	bf00      	nop
   10bfc:	0000e029 	.word	0x0000e029

00010c00 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
   10c00:	b580      	push	{r7, lr}
   10c02:	b084      	sub	sp, #16
   10c04:	af00      	add	r7, sp, #0
   10c06:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
   10c08:	687b      	ldr	r3, [r7, #4]
   10c0a:	699b      	ldr	r3, [r3, #24]
   10c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
   10c10:	bf14      	ite	ne
   10c12:	2301      	movne	r3, #1
   10c14:	2300      	moveq	r3, #0
   10c16:	b2db      	uxtb	r3, r3
   10c18:	2b00      	cmp	r3, #0
   10c1a:	d002      	beq.n	10c22 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
   10c1c:	687b      	ldr	r3, [r7, #4]
   10c1e:	699b      	ldr	r3, [r3, #24]
   10c20:	e011      	b.n	10c46 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
   10c22:	687b      	ldr	r3, [r7, #4]
   10c24:	681b      	ldr	r3, [r3, #0]
   10c26:	331c      	adds	r3, #28
   10c28:	681b      	ldr	r3, [r3, #0]
   10c2a:	f107 010f 	add.w	r1, r7, #15
   10c2e:	2201      	movs	r2, #1
   10c30:	6878      	ldr	r0, [r7, #4]
   10c32:	4798      	blx	r3
   10c34:	4602      	mov	r2, r0
   10c36:	687b      	ldr	r3, [r7, #4]
   10c38:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
   10c3a:	7bfb      	ldrb	r3, [r7, #15]
   10c3c:	461a      	mov	r2, r3
   10c3e:	687b      	ldr	r3, [r7, #4]
   10c40:	619a      	str	r2, [r3, #24]
	return _serialPeek;
   10c42:	687b      	ldr	r3, [r7, #4]
   10c44:	699b      	ldr	r3, [r3, #24]
}
   10c46:	4618      	mov	r0, r3
   10c48:	3710      	adds	r7, #16
   10c4a:	46bd      	mov	sp, r7
   10c4c:	bd80      	pop	{r7, pc}
	...

00010c50 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
   10c50:	b580      	push	{r7, lr}
   10c52:	b086      	sub	sp, #24
   10c54:	af00      	add	r7, sp, #0
   10c56:	60f8      	str	r0, [r7, #12]
   10c58:	60b9      	str	r1, [r7, #8]
   10c5a:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
   10c5c:	68fb      	ldr	r3, [r7, #12]
   10c5e:	7c1b      	ldrb	r3, [r3, #16]
   10c60:	b2db      	uxtb	r3, r3
   10c62:	2b00      	cmp	r3, #0
   10c64:	d02e      	beq.n	10cc4 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   10c66:	687a      	ldr	r2, [r7, #4]
   10c68:	4613      	mov	r3, r2
   10c6a:	009b      	lsls	r3, r3, #2
   10c6c:	4413      	add	r3, r2
   10c6e:	005b      	lsls	r3, r3, #1
   10c70:	461a      	mov	r2, r3
   10c72:	4918      	ldr	r1, [pc, #96]	; (10cd4 <_ZN9CDC_Class8readDataEPvl+0x84>)
   10c74:	4818      	ldr	r0, [pc, #96]	; (10cd8 <_ZN9CDC_Class8readDataEPvl+0x88>)
   10c76:	4b19      	ldr	r3, [pc, #100]	; (10cdc <_ZN9CDC_Class8readDataEPvl+0x8c>)
   10c78:	4798      	blx	r3
		rxReady=false;
   10c7a:	68fb      	ldr	r3, [r7, #12]
   10c7c:	2200      	movs	r2, #0
   10c7e:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
   10c80:	687b      	ldr	r3, [r7, #4]
   10c82:	4619      	mov	r1, r3
   10c84:	68b8      	ldr	r0, [r7, #8]
   10c86:	4b16      	ldr	r3, [pc, #88]	; (10ce0 <_ZN9CDC_Class8readDataEPvl+0x90>)
   10c88:	4798      	blx	r3
   10c8a:	4603      	mov	r3, r0
   10c8c:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
   10c8e:	68fb      	ldr	r3, [r7, #12]
   10c90:	7d5b      	ldrb	r3, [r3, #21]
   10c92:	b2db      	uxtb	r3, r3
   10c94:	f083 0301 	eor.w	r3, r3, #1
   10c98:	b2db      	uxtb	r3, r3
   10c9a:	2b00      	cmp	r3, #0
   10c9c:	d006      	beq.n	10cac <_ZN9CDC_Class8readDataEPvl+0x5c>
   10c9e:	68fb      	ldr	r3, [r7, #12]
   10ca0:	7c1b      	ldrb	r3, [r3, #16]
   10ca2:	b2db      	uxtb	r3, r3
   10ca4:	2b00      	cmp	r3, #0
   10ca6:	d001      	beq.n	10cac <_ZN9CDC_Class8readDataEPvl+0x5c>
   10ca8:	2301      	movs	r3, #1
   10caa:	e000      	b.n	10cae <_ZN9CDC_Class8readDataEPvl+0x5e>
   10cac:	2300      	movs	r3, #0
   10cae:	2b00      	cmp	r3, #0
   10cb0:	d000      	beq.n	10cb4 <_ZN9CDC_Class8readDataEPvl+0x64>
   10cb2:	e7ec      	b.n	10c8e <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
   10cb4:	4808      	ldr	r0, [pc, #32]	; (10cd8 <_ZN9CDC_Class8readDataEPvl+0x88>)
   10cb6:	4b0b      	ldr	r3, [pc, #44]	; (10ce4 <_ZN9CDC_Class8readDataEPvl+0x94>)
   10cb8:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   10cba:	4906      	ldr	r1, [pc, #24]	; (10cd4 <_ZN9CDC_Class8readDataEPvl+0x84>)
   10cbc:	4806      	ldr	r0, [pc, #24]	; (10cd8 <_ZN9CDC_Class8readDataEPvl+0x88>)
   10cbe:	4b0a      	ldr	r3, [pc, #40]	; (10ce8 <_ZN9CDC_Class8readDataEPvl+0x98>)
   10cc0:	4798      	blx	r3
   10cc2:	e001      	b.n	10cc8 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
   10cc4:	2300      	movs	r3, #0
   10cc6:	75fb      	strb	r3, [r7, #23]
	}

	return r;
   10cc8:	7dfb      	ldrb	r3, [r7, #23]
}
   10cca:	4618      	mov	r0, r3
   10ccc:	3718      	adds	r7, #24
   10cce:	46bd      	mov	sp, r7
   10cd0:	bd80      	pop	{r7, pc}
   10cd2:	bf00      	nop
   10cd4:	00010a3d 	.word	0x00010a3d
   10cd8:	2000344c 	.word	0x2000344c
   10cdc:	00010715 	.word	0x00010715
   10ce0:	0000df05 	.word	0x0000df05
   10ce4:	000105a1 	.word	0x000105a1
   10ce8:	000106bd 	.word	0x000106bd

00010cec <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
   10cec:	b580      	push	{r7, lr}
   10cee:	b086      	sub	sp, #24
   10cf0:	af00      	add	r7, sp, #0
   10cf2:	60f8      	str	r0, [r7, #12]
   10cf4:	60b9      	str	r1, [r7, #8]
   10cf6:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
   10cf8:	68fb      	ldr	r3, [r7, #12]
   10cfa:	2200      	movs	r2, #0
   10cfc:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
   10cfe:	687b      	ldr	r3, [r7, #4]
   10d00:	4619      	mov	r1, r3
   10d02:	68b8      	ldr	r0, [r7, #8]
   10d04:	4b04      	ldr	r3, [pc, #16]	; (10d18 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
   10d06:	4798      	blx	r3
   10d08:	4603      	mov	r3, r0
   10d0a:	617b      	str	r3, [r7, #20]
	return r;
   10d0c:	697b      	ldr	r3, [r7, #20]
}
   10d0e:	4618      	mov	r0, r3
   10d10:	3718      	adds	r7, #24
   10d12:	46bd      	mov	sp, r7
   10d14:	bd80      	pop	{r7, pc}
   10d16:	bf00      	nop
   10d18:	0000df05 	.word	0x0000df05

00010d1c <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
   10d1c:	b580      	push	{r7, lr}
   10d1e:	b084      	sub	sp, #16
   10d20:	af00      	add	r7, sp, #0
   10d22:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
   10d24:	687b      	ldr	r3, [r7, #4]
   10d26:	2200      	movs	r2, #0
   10d28:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
   10d2a:	f107 030f 	add.w	r3, r7, #15
   10d2e:	2101      	movs	r1, #1
   10d30:	4618      	mov	r0, r3
   10d32:	4b08      	ldr	r3, [pc, #32]	; (10d54 <_ZN9CDC_Class4readEv+0x38>)
   10d34:	4798      	blx	r3
	while(!rxReady);
   10d36:	687b      	ldr	r3, [r7, #4]
   10d38:	7d5b      	ldrb	r3, [r3, #21]
   10d3a:	b2db      	uxtb	r3, r3
   10d3c:	f083 0301 	eor.w	r3, r3, #1
   10d40:	b2db      	uxtb	r3, r3
   10d42:	2b00      	cmp	r3, #0
   10d44:	d000      	beq.n	10d48 <_ZN9CDC_Class4readEv+0x2c>
   10d46:	e7f6      	b.n	10d36 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
   10d48:	7bfb      	ldrb	r3, [r7, #15]
}
   10d4a:	4618      	mov	r0, r3
   10d4c:	3710      	adds	r7, #16
   10d4e:	46bd      	mov	sp, r7
   10d50:	bd80      	pop	{r7, pc}
   10d52:	bf00      	nop
   10d54:	0000df05 	.word	0x0000df05

00010d58 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
   10d58:	b580      	push	{r7, lr}
   10d5a:	b082      	sub	sp, #8
   10d5c:	af00      	add	r7, sp, #0
   10d5e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
   10d60:	687b      	ldr	r3, [r7, #4]
   10d62:	331c      	adds	r3, #28
   10d64:	2140      	movs	r1, #64	; 0x40
   10d66:	4618      	mov	r0, r3
   10d68:	4b02      	ldr	r3, [pc, #8]	; (10d74 <_ZN9CDC_Class5flushEv+0x1c>)
   10d6a:	4798      	blx	r3
}
   10d6c:	bf00      	nop
   10d6e:	3708      	adds	r7, #8
   10d70:	46bd      	mov	sp, r7
   10d72:	bd80      	pop	{r7, pc}
   10d74:	0000df49 	.word	0x0000df49

00010d78 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
   10d78:	b580      	push	{r7, lr}
   10d7a:	b082      	sub	sp, #8
   10d7c:	af00      	add	r7, sp, #0
   10d7e:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
   10d80:	4b02      	ldr	r3, [pc, #8]	; (10d8c <_ZN9CDC_Class5clearEv+0x14>)
   10d82:	4798      	blx	r3
}
   10d84:	bf00      	nop
   10d86:	3708      	adds	r7, #8
   10d88:	46bd      	mov	sp, r7
   10d8a:	bd80      	pop	{r7, pc}
   10d8c:	0000df8d 	.word	0x0000df8d

00010d90 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
   10d90:	b580      	push	{r7, lr}
   10d92:	b082      	sub	sp, #8
   10d94:	af00      	add	r7, sp, #0
   10d96:	6078      	str	r0, [r7, #4]
   10d98:	460b      	mov	r3, r1
   10d9a:	70fb      	strb	r3, [r7, #3]
	if (connected){
   10d9c:	687b      	ldr	r3, [r7, #4]
   10d9e:	7c1b      	ldrb	r3, [r3, #16]
   10da0:	b2db      	uxtb	r3, r3
   10da2:	2b00      	cmp	r3, #0
   10da4:	d012      	beq.n	10dcc <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
   10da6:	687b      	ldr	r3, [r7, #4]
   10da8:	7d1b      	ldrb	r3, [r3, #20]
   10daa:	b2db      	uxtb	r3, r3
   10dac:	f083 0301 	eor.w	r3, r3, #1
   10db0:	b2db      	uxtb	r3, r3
   10db2:	2b00      	cmp	r3, #0
   10db4:	d000      	beq.n	10db8 <_ZN9CDC_Class5writeEh+0x28>
   10db6:	e7f6      	b.n	10da6 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
   10db8:	687b      	ldr	r3, [r7, #4]
   10dba:	681b      	ldr	r3, [r3, #0]
   10dbc:	3324      	adds	r3, #36	; 0x24
   10dbe:	681b      	ldr	r3, [r3, #0]
   10dc0:	1cf9      	adds	r1, r7, #3
   10dc2:	2201      	movs	r2, #1
   10dc4:	6878      	ldr	r0, [r7, #4]
   10dc6:	4798      	blx	r3
   10dc8:	4603      	mov	r3, r0
   10dca:	e000      	b.n	10dce <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
   10dcc:	2300      	movs	r3, #0
	}
		
}
   10dce:	4618      	mov	r0, r3
   10dd0:	3708      	adds	r7, #8
   10dd2:	46bd      	mov	sp, r7
   10dd4:	bd80      	pop	{r7, pc}
	...

00010dd8 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
   10dd8:	b580      	push	{r7, lr}
   10dda:	b086      	sub	sp, #24
   10ddc:	af00      	add	r7, sp, #0
   10dde:	60f8      	str	r0, [r7, #12]
   10de0:	60b9      	str	r1, [r7, #8]
   10de2:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
   10de4:	68fb      	ldr	r3, [r7, #12]
   10de6:	7c1b      	ldrb	r3, [r3, #16]
   10de8:	b2db      	uxtb	r3, r3
   10dea:	2b00      	cmp	r3, #0
   10dec:	d02f      	beq.n	10e4e <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   10dee:	687a      	ldr	r2, [r7, #4]
   10df0:	4613      	mov	r3, r2
   10df2:	009b      	lsls	r3, r3, #2
   10df4:	4413      	add	r3, r2
   10df6:	005b      	lsls	r3, r3, #1
   10df8:	461a      	mov	r2, r3
   10dfa:	4917      	ldr	r1, [pc, #92]	; (10e58 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   10dfc:	4817      	ldr	r0, [pc, #92]	; (10e5c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   10dfe:	4b18      	ldr	r3, [pc, #96]	; (10e60 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
   10e00:	4798      	blx	r3
		txReady=false;
   10e02:	68fb      	ldr	r3, [r7, #12]
   10e04:	2200      	movs	r2, #0
   10e06:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   10e08:	687b      	ldr	r3, [r7, #4]
   10e0a:	4619      	mov	r1, r3
   10e0c:	68b8      	ldr	r0, [r7, #8]
   10e0e:	4b15      	ldr	r3, [pc, #84]	; (10e64 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
   10e10:	4798      	blx	r3
   10e12:	4603      	mov	r3, r0
   10e14:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
   10e16:	68fb      	ldr	r3, [r7, #12]
   10e18:	7d1b      	ldrb	r3, [r3, #20]
   10e1a:	b2db      	uxtb	r3, r3
   10e1c:	f083 0301 	eor.w	r3, r3, #1
   10e20:	b2db      	uxtb	r3, r3
   10e22:	2b00      	cmp	r3, #0
   10e24:	d006      	beq.n	10e34 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   10e26:	68fb      	ldr	r3, [r7, #12]
   10e28:	7c1b      	ldrb	r3, [r3, #16]
   10e2a:	b2db      	uxtb	r3, r3
   10e2c:	2b00      	cmp	r3, #0
   10e2e:	d001      	beq.n	10e34 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
   10e30:	2301      	movs	r3, #1
   10e32:	e000      	b.n	10e36 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
   10e34:	2300      	movs	r3, #0
   10e36:	2b00      	cmp	r3, #0
   10e38:	d000      	beq.n	10e3c <_ZN9CDC_Class9writeDataEPKvl+0x64>
   10e3a:	e7ec      	b.n	10e16 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
   10e3c:	4807      	ldr	r0, [pc, #28]	; (10e5c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   10e3e:	4b0a      	ldr	r3, [pc, #40]	; (10e68 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
   10e40:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   10e42:	4905      	ldr	r1, [pc, #20]	; (10e58 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
   10e44:	4805      	ldr	r0, [pc, #20]	; (10e5c <_ZN9CDC_Class9writeDataEPKvl+0x84>)
   10e46:	4b09      	ldr	r3, [pc, #36]	; (10e6c <_ZN9CDC_Class9writeDataEPKvl+0x94>)
   10e48:	4798      	blx	r3
		return r;
   10e4a:	697b      	ldr	r3, [r7, #20]
   10e4c:	e000      	b.n	10e50 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
   10e4e:	2300      	movs	r3, #0
	}
	

}
   10e50:	4618      	mov	r0, r3
   10e52:	3718      	adds	r7, #24
   10e54:	46bd      	mov	sp, r7
   10e56:	bd80      	pop	{r7, pc}
   10e58:	00010a3d 	.word	0x00010a3d
   10e5c:	2000344c 	.word	0x2000344c
   10e60:	00010715 	.word	0x00010715
   10e64:	0000df49 	.word	0x0000df49
   10e68:	000105a1 	.word	0x000105a1
   10e6c:	000106bd 	.word	0x000106bd

00010e70 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
   10e70:	b580      	push	{r7, lr}
   10e72:	b086      	sub	sp, #24
   10e74:	af00      	add	r7, sp, #0
   10e76:	60f8      	str	r0, [r7, #12]
   10e78:	60b9      	str	r1, [r7, #8]
   10e7a:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
   10e7c:	68fb      	ldr	r3, [r7, #12]
   10e7e:	2200      	movs	r2, #0
   10e80:	751a      	strb	r2, [r3, #20]

 	if (connected){
   10e82:	68fb      	ldr	r3, [r7, #12]
   10e84:	7c1b      	ldrb	r3, [r3, #16]
   10e86:	b2db      	uxtb	r3, r3
   10e88:	2b00      	cmp	r3, #0
   10e8a:	d02a      	beq.n	10ee2 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
   10e8c:	687a      	ldr	r2, [r7, #4]
   10e8e:	4613      	mov	r3, r2
   10e90:	009b      	lsls	r3, r3, #2
   10e92:	4413      	add	r3, r2
   10e94:	005b      	lsls	r3, r3, #1
   10e96:	461a      	mov	r2, r3
   10e98:	4915      	ldr	r1, [pc, #84]	; (10ef0 <_ZN9CDC_Class5writeEPKhj+0x80>)
   10e9a:	4816      	ldr	r0, [pc, #88]	; (10ef4 <_ZN9CDC_Class5writeEPKhj+0x84>)
   10e9c:	4b16      	ldr	r3, [pc, #88]	; (10ef8 <_ZN9CDC_Class5writeEPKhj+0x88>)
   10e9e:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
   10ea0:	6879      	ldr	r1, [r7, #4]
   10ea2:	68b8      	ldr	r0, [r7, #8]
   10ea4:	4b15      	ldr	r3, [pc, #84]	; (10efc <_ZN9CDC_Class5writeEPKhj+0x8c>)
   10ea6:	4798      	blx	r3
   10ea8:	4603      	mov	r3, r0
   10eaa:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
   10eac:	68fb      	ldr	r3, [r7, #12]
   10eae:	7d1b      	ldrb	r3, [r3, #20]
   10eb0:	b2db      	uxtb	r3, r3
   10eb2:	f083 0301 	eor.w	r3, r3, #1
   10eb6:	b2db      	uxtb	r3, r3
   10eb8:	2b00      	cmp	r3, #0
   10eba:	d006      	beq.n	10eca <_ZN9CDC_Class5writeEPKhj+0x5a>
   10ebc:	68fb      	ldr	r3, [r7, #12]
   10ebe:	7c1b      	ldrb	r3, [r3, #16]
   10ec0:	b2db      	uxtb	r3, r3
   10ec2:	2b00      	cmp	r3, #0
   10ec4:	d001      	beq.n	10eca <_ZN9CDC_Class5writeEPKhj+0x5a>
   10ec6:	2301      	movs	r3, #1
   10ec8:	e000      	b.n	10ecc <_ZN9CDC_Class5writeEPKhj+0x5c>
   10eca:	2300      	movs	r3, #0
   10ecc:	2b00      	cmp	r3, #0
   10ece:	d000      	beq.n	10ed2 <_ZN9CDC_Class5writeEPKhj+0x62>
   10ed0:	e7ec      	b.n	10eac <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
   10ed2:	4808      	ldr	r0, [pc, #32]	; (10ef4 <_ZN9CDC_Class5writeEPKhj+0x84>)
   10ed4:	4b0a      	ldr	r3, [pc, #40]	; (10f00 <_ZN9CDC_Class5writeEPKhj+0x90>)
   10ed6:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
   10ed8:	4905      	ldr	r1, [pc, #20]	; (10ef0 <_ZN9CDC_Class5writeEPKhj+0x80>)
   10eda:	4806      	ldr	r0, [pc, #24]	; (10ef4 <_ZN9CDC_Class5writeEPKhj+0x84>)
   10edc:	4b09      	ldr	r3, [pc, #36]	; (10f04 <_ZN9CDC_Class5writeEPKhj+0x94>)
   10ede:	4798      	blx	r3
   10ee0:	e001      	b.n	10ee6 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
   10ee2:	2300      	movs	r3, #0
   10ee4:	617b      	str	r3, [r7, #20]
	 }
	return r;		
   10ee6:	697b      	ldr	r3, [r7, #20]
}
   10ee8:	4618      	mov	r0, r3
   10eea:	3718      	adds	r7, #24
   10eec:	46bd      	mov	sp, r7
   10eee:	bd80      	pop	{r7, pc}
   10ef0:	00010a3d 	.word	0x00010a3d
   10ef4:	2000344c 	.word	0x2000344c
   10ef8:	00010715 	.word	0x00010715
   10efc:	0000df49 	.word	0x0000df49
   10f00:	000105a1 	.word	0x000105a1
   10f04:	000106bd 	.word	0x000106bd

00010f08 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
   10f08:	b480      	push	{r7}
   10f0a:	b083      	sub	sp, #12
   10f0c:	af00      	add	r7, sp, #0
   10f0e:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
   10f10:	687b      	ldr	r3, [r7, #4]
   10f12:	7d5b      	ldrb	r3, [r3, #21]
   10f14:	b2db      	uxtb	r3, r3
   10f16:	2b00      	cmp	r3, #0
   10f18:	d006      	beq.n	10f28 <_ZN9CDC_Class9availableEv+0x20>
   10f1a:	687b      	ldr	r3, [r7, #4]
   10f1c:	7d1b      	ldrb	r3, [r3, #20]
   10f1e:	b2db      	uxtb	r3, r3
   10f20:	2b00      	cmp	r3, #0
   10f22:	d001      	beq.n	10f28 <_ZN9CDC_Class9availableEv+0x20>
   10f24:	2301      	movs	r3, #1
   10f26:	e000      	b.n	10f2a <_ZN9CDC_Class9availableEv+0x22>
   10f28:	2300      	movs	r3, #0
   10f2a:	2b00      	cmp	r3, #0
   10f2c:	d001      	beq.n	10f32 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
   10f2e:	2301      	movs	r3, #1
   10f30:	e000      	b.n	10f34 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
   10f32:	2300      	movs	r3, #0
	}
	
}
   10f34:	4618      	mov	r0, r3
   10f36:	370c      	adds	r7, #12
   10f38:	46bd      	mov	sp, r7
   10f3a:	bc80      	pop	{r7}
   10f3c:	4770      	bx	lr
	...

00010f40 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
   10f40:	b580      	push	{r7, lr}
   10f42:	b082      	sub	sp, #8
   10f44:	af00      	add	r7, sp, #0
   10f46:	6078      	str	r0, [r7, #4]
   10f48:	6039      	str	r1, [r7, #0]
   10f4a:	687b      	ldr	r3, [r7, #4]
   10f4c:	2b01      	cmp	r3, #1
   10f4e:	d154      	bne.n	10ffa <_Z41__static_initialization_and_destruction_0ii+0xba>
   10f50:	683b      	ldr	r3, [r7, #0]
   10f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10f56:	4293      	cmp	r3, r2
   10f58:	d14f      	bne.n	10ffa <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   10f5a:	492a      	ldr	r1, [pc, #168]	; (11004 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   10f5c:	482a      	ldr	r0, [pc, #168]	; (11008 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   10f5e:	4b2b      	ldr	r3, [pc, #172]	; (1100c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10f60:	4798      	blx	r3
   10f62:	4a2b      	ldr	r2, [pc, #172]	; (11010 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10f64:	492b      	ldr	r1, [pc, #172]	; (11014 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10f66:	4828      	ldr	r0, [pc, #160]	; (11008 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   10f68:	4b2b      	ldr	r3, [pc, #172]	; (11018 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10f6a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   10f6c:	492b      	ldr	r1, [pc, #172]	; (1101c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   10f6e:	482c      	ldr	r0, [pc, #176]	; (11020 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   10f70:	4b26      	ldr	r3, [pc, #152]	; (1100c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10f72:	4798      	blx	r3
   10f74:	4a26      	ldr	r2, [pc, #152]	; (11010 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10f76:	4927      	ldr	r1, [pc, #156]	; (11014 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10f78:	4829      	ldr	r0, [pc, #164]	; (11020 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   10f7a:	4b27      	ldr	r3, [pc, #156]	; (11018 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10f7c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   10f7e:	4929      	ldr	r1, [pc, #164]	; (11024 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   10f80:	4829      	ldr	r0, [pc, #164]	; (11028 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   10f82:	4b22      	ldr	r3, [pc, #136]	; (1100c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10f84:	4798      	blx	r3
   10f86:	4a22      	ldr	r2, [pc, #136]	; (11010 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10f88:	4922      	ldr	r1, [pc, #136]	; (11014 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10f8a:	4827      	ldr	r0, [pc, #156]	; (11028 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   10f8c:	4b22      	ldr	r3, [pc, #136]	; (11018 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10f8e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   10f90:	4926      	ldr	r1, [pc, #152]	; (1102c <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10f92:	4827      	ldr	r0, [pc, #156]	; (11030 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10f94:	4b1d      	ldr	r3, [pc, #116]	; (1100c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10f96:	4798      	blx	r3
   10f98:	4a1d      	ldr	r2, [pc, #116]	; (11010 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10f9a:	491e      	ldr	r1, [pc, #120]	; (11014 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10f9c:	4824      	ldr	r0, [pc, #144]	; (11030 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10f9e:	4b1e      	ldr	r3, [pc, #120]	; (11018 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10fa0:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   10fa2:	4924      	ldr	r1, [pc, #144]	; (11034 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   10fa4:	4824      	ldr	r0, [pc, #144]	; (11038 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10fa6:	4b19      	ldr	r3, [pc, #100]	; (1100c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10fa8:	4798      	blx	r3
   10faa:	4a19      	ldr	r2, [pc, #100]	; (11010 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10fac:	4919      	ldr	r1, [pc, #100]	; (11014 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10fae:	4822      	ldr	r0, [pc, #136]	; (11038 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10fb0:	4b19      	ldr	r3, [pc, #100]	; (11018 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10fb2:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   10fb4:	4921      	ldr	r1, [pc, #132]	; (1103c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   10fb6:	4822      	ldr	r0, [pc, #136]	; (11040 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   10fb8:	4b14      	ldr	r3, [pc, #80]	; (1100c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10fba:	4798      	blx	r3
   10fbc:	4a14      	ldr	r2, [pc, #80]	; (11010 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10fbe:	4915      	ldr	r1, [pc, #84]	; (11014 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10fc0:	481f      	ldr	r0, [pc, #124]	; (11040 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   10fc2:	4b15      	ldr	r3, [pc, #84]	; (11018 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10fc4:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   10fc6:	491f      	ldr	r1, [pc, #124]	; (11044 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10fc8:	481f      	ldr	r0, [pc, #124]	; (11048 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10fca:	4b10      	ldr	r3, [pc, #64]	; (1100c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10fcc:	4798      	blx	r3
   10fce:	4a10      	ldr	r2, [pc, #64]	; (11010 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10fd0:	4910      	ldr	r1, [pc, #64]	; (11014 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10fd2:	481d      	ldr	r0, [pc, #116]	; (11048 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10fd4:	4b10      	ldr	r3, [pc, #64]	; (11018 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10fd6:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   10fd8:	491c      	ldr	r1, [pc, #112]	; (1104c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10fda:	481d      	ldr	r0, [pc, #116]	; (11050 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10fdc:	4b0b      	ldr	r3, [pc, #44]	; (1100c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   10fde:	4798      	blx	r3
   10fe0:	4a0b      	ldr	r2, [pc, #44]	; (11010 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10fe2:	490c      	ldr	r1, [pc, #48]	; (11014 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   10fe4:	481a      	ldr	r0, [pc, #104]	; (11050 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10fe6:	4b0c      	ldr	r3, [pc, #48]	; (11018 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10fe8:	4798      	blx	r3
   10fea:	481a      	ldr	r0, [pc, #104]	; (11054 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   10fec:	4b1a      	ldr	r3, [pc, #104]	; (11058 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10fee:	4798      	blx	r3
   10ff0:	4a07      	ldr	r2, [pc, #28]	; (11010 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   10ff2:	491a      	ldr	r1, [pc, #104]	; (1105c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   10ff4:	4817      	ldr	r0, [pc, #92]	; (11054 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   10ff6:	4b08      	ldr	r3, [pc, #32]	; (11018 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   10ff8:	4798      	blx	r3
   10ffa:	bf00      	nop
   10ffc:	3708      	adds	r7, #8
   10ffe:	46bd      	mov	sp, r7
   11000:	bd80      	pop	{r7, pc}
   11002:	bf00      	nop
   11004:	2000df28 	.word	0x2000df28
   11008:	200033ac 	.word	0x200033ac
   1100c:	00010441 	.word	0x00010441
   11010:	20000000 	.word	0x20000000
   11014:	00010479 	.word	0x00010479
   11018:	0001a611 	.word	0x0001a611
   1101c:	2000dfbc 	.word	0x2000dfbc
   11020:	200033cc 	.word	0x200033cc
   11024:	2000e0e0 	.word	0x2000e0e0
   11028:	200033ec 	.word	0x200033ec
   1102c:	2000dfdc 	.word	0x2000dfdc
   11030:	2000340c 	.word	0x2000340c
   11034:	2000e0a0 	.word	0x2000e0a0
   11038:	2000342c 	.word	0x2000342c
   1103c:	2000e0c0 	.word	0x2000e0c0
   11040:	2000344c 	.word	0x2000344c
   11044:	2000df98 	.word	0x2000df98
   11048:	2000346c 	.word	0x2000346c
   1104c:	2000e038 	.word	0x2000e038
   11050:	2000348c 	.word	0x2000348c
   11054:	200034b0 	.word	0x200034b0
   11058:	00010b2d 	.word	0x00010b2d
   1105c:	00010b75 	.word	0x00010b75

00011060 <_GLOBAL__sub_I_ptrCDCClass>:
   11060:	b580      	push	{r7, lr}
   11062:	af00      	add	r7, sp, #0
   11064:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11068:	2001      	movs	r0, #1
   1106a:	4b01      	ldr	r3, [pc, #4]	; (11070 <_GLOBAL__sub_I_ptrCDCClass+0x10>)
   1106c:	4798      	blx	r3
   1106e:	bd80      	pop	{r7, pc}
   11070:	00010f41 	.word	0x00010f41

00011074 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   11074:	b580      	push	{r7, lr}
   11076:	b086      	sub	sp, #24
   11078:	af00      	add	r7, sp, #0
   1107a:	60f8      	str	r0, [r7, #12]
   1107c:	60b9      	str	r1, [r7, #8]
   1107e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
   11080:	2300      	movs	r3, #0
   11082:	617b      	str	r3, [r7, #20]
  while (size--) {
   11084:	687b      	ldr	r3, [r7, #4]
   11086:	1e5a      	subs	r2, r3, #1
   11088:	607a      	str	r2, [r7, #4]
   1108a:	2b00      	cmp	r3, #0
   1108c:	bf14      	ite	ne
   1108e:	2301      	movne	r3, #1
   11090:	2300      	moveq	r3, #0
   11092:	b2db      	uxtb	r3, r3
   11094:	2b00      	cmp	r3, #0
   11096:	d016      	beq.n	110c6 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
   11098:	68fb      	ldr	r3, [r7, #12]
   1109a:	681b      	ldr	r3, [r3, #0]
   1109c:	681a      	ldr	r2, [r3, #0]
   1109e:	68bb      	ldr	r3, [r7, #8]
   110a0:	1c59      	adds	r1, r3, #1
   110a2:	60b9      	str	r1, [r7, #8]
   110a4:	781b      	ldrb	r3, [r3, #0]
   110a6:	4619      	mov	r1, r3
   110a8:	68f8      	ldr	r0, [r7, #12]
   110aa:	4790      	blx	r2
   110ac:	4603      	mov	r3, r0
   110ae:	2b00      	cmp	r3, #0
   110b0:	bf14      	ite	ne
   110b2:	2301      	movne	r3, #1
   110b4:	2300      	moveq	r3, #0
   110b6:	b2db      	uxtb	r3, r3
   110b8:	2b00      	cmp	r3, #0
   110ba:	d003      	beq.n	110c4 <_ZN5Print5writeEPKhj+0x50>
   110bc:	697b      	ldr	r3, [r7, #20]
   110be:	3301      	adds	r3, #1
   110c0:	617b      	str	r3, [r7, #20]
  while (size--) {
   110c2:	e7df      	b.n	11084 <_ZN5Print5writeEPKhj+0x10>
    else break;
   110c4:	bf00      	nop
  }
  return n;
   110c6:	697b      	ldr	r3, [r7, #20]
}
   110c8:	4618      	mov	r0, r3
   110ca:	3718      	adds	r7, #24
   110cc:	46bd      	mov	sp, r7
   110ce:	bd80      	pop	{r7, pc}

000110d0 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
   110d0:	b480      	push	{r7}
   110d2:	b083      	sub	sp, #12
   110d4:	af00      	add	r7, sp, #0
   110d6:	6078      	str	r0, [r7, #4]
   110d8:	460b      	mov	r3, r1
   110da:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   110dc:	78fb      	ldrb	r3, [r7, #3]
   110de:	687a      	ldr	r2, [r7, #4]
   110e0:	01db      	lsls	r3, r3, #7
   110e2:	4413      	add	r3, r2
   110e4:	681b      	ldr	r3, [r3, #0]
}
   110e6:	4618      	mov	r0, r3
   110e8:	370c      	adds	r7, #12
   110ea:	46bd      	mov	sp, r7
   110ec:	bc80      	pop	{r7}
   110ee:	4770      	bx	lr

000110f0 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
   110f0:	b480      	push	{r7}
   110f2:	b083      	sub	sp, #12
   110f4:	af00      	add	r7, sp, #0
   110f6:	6078      	str	r0, [r7, #4]
   110f8:	460b      	mov	r3, r1
   110fa:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   110fc:	78fb      	ldrb	r3, [r7, #3]
   110fe:	687a      	ldr	r2, [r7, #4]
   11100:	01db      	lsls	r3, r3, #7
   11102:	4413      	add	r3, r2
   11104:	3310      	adds	r3, #16
   11106:	681b      	ldr	r3, [r3, #0]
}
   11108:	4618      	mov	r0, r3
   1110a:	370c      	adds	r7, #12
   1110c:	46bd      	mov	sp, r7
   1110e:	bc80      	pop	{r7}
   11110:	4770      	bx	lr

00011112 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
   11112:	b480      	push	{r7}
   11114:	b083      	sub	sp, #12
   11116:	af00      	add	r7, sp, #0
   11118:	6078      	str	r0, [r7, #4]
   1111a:	460b      	mov	r3, r1
   1111c:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   1111e:	78fb      	ldrb	r3, [r7, #3]
   11120:	687a      	ldr	r2, [r7, #4]
   11122:	01db      	lsls	r3, r3, #7
   11124:	4413      	add	r3, r2
   11126:	3320      	adds	r3, #32
   11128:	681b      	ldr	r3, [r3, #0]
}
   1112a:	4618      	mov	r0, r3
   1112c:	370c      	adds	r7, #12
   1112e:	46bd      	mov	sp, r7
   11130:	bc80      	pop	{r7}
   11132:	4770      	bx	lr

00011134 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
   11134:	b580      	push	{r7, lr}
   11136:	b086      	sub	sp, #24
   11138:	af00      	add	r7, sp, #0
   1113a:	4603      	mov	r3, r0
   1113c:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
   1113e:	f107 030c 	add.w	r3, r7, #12
   11142:	4618      	mov	r0, r3
   11144:	4b13      	ldr	r3, [pc, #76]	; (11194 <_gpio_get_level+0x60>)
   11146:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   11148:	79fb      	ldrb	r3, [r7, #7]
   1114a:	4619      	mov	r1, r3
   1114c:	4812      	ldr	r0, [pc, #72]	; (11198 <_gpio_get_level+0x64>)
   1114e:	4b13      	ldr	r3, [pc, #76]	; (1119c <_gpio_get_level+0x68>)
   11150:	4798      	blx	r3
   11152:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   11154:	79fb      	ldrb	r3, [r7, #7]
   11156:	4619      	mov	r1, r3
   11158:	480f      	ldr	r0, [pc, #60]	; (11198 <_gpio_get_level+0x64>)
   1115a:	4b11      	ldr	r3, [pc, #68]	; (111a0 <_gpio_get_level+0x6c>)
   1115c:	4798      	blx	r3
   1115e:	4602      	mov	r2, r0
   11160:	697b      	ldr	r3, [r7, #20]
   11162:	43db      	mvns	r3, r3
   11164:	4013      	ands	r3, r2
   11166:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   11168:	79fb      	ldrb	r3, [r7, #7]
   1116a:	4619      	mov	r1, r3
   1116c:	480a      	ldr	r0, [pc, #40]	; (11198 <_gpio_get_level+0x64>)
   1116e:	4b0d      	ldr	r3, [pc, #52]	; (111a4 <_gpio_get_level+0x70>)
   11170:	4798      	blx	r3
   11172:	4602      	mov	r2, r0
   11174:	697b      	ldr	r3, [r7, #20]
   11176:	4013      	ands	r3, r2
   11178:	693a      	ldr	r2, [r7, #16]
   1117a:	4313      	orrs	r3, r2
   1117c:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
   1117e:	f107 030c 	add.w	r3, r7, #12
   11182:	4618      	mov	r0, r3
   11184:	4b08      	ldr	r3, [pc, #32]	; (111a8 <_gpio_get_level+0x74>)
   11186:	4798      	blx	r3

	return tmp;
   11188:	693b      	ldr	r3, [r7, #16]
}
   1118a:	4618      	mov	r0, r3
   1118c:	3718      	adds	r7, #24
   1118e:	46bd      	mov	sp, r7
   11190:	bd80      	pop	{r7, pc}
   11192:	bf00      	nop
   11194:	0000d125 	.word	0x0000d125
   11198:	41008000 	.word	0x41008000
   1119c:	000110d1 	.word	0x000110d1
   111a0:	00011113 	.word	0x00011113
   111a4:	000110f1 	.word	0x000110f1
   111a8:	0000d14b 	.word	0x0000d14b

000111ac <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   111ac:	b580      	push	{r7, lr}
   111ae:	b082      	sub	sp, #8
   111b0:	af00      	add	r7, sp, #0
   111b2:	4603      	mov	r3, r0
   111b4:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   111b6:	79fb      	ldrb	r3, [r7, #7]
   111b8:	115b      	asrs	r3, r3, #5
   111ba:	b2db      	uxtb	r3, r3
   111bc:	4618      	mov	r0, r3
   111be:	4b09      	ldr	r3, [pc, #36]	; (111e4 <gpio_get_pin_level+0x38>)
   111c0:	4798      	blx	r3
   111c2:	4601      	mov	r1, r0
   111c4:	79fb      	ldrb	r3, [r7, #7]
   111c6:	f003 031f 	and.w	r3, r3, #31
   111ca:	2201      	movs	r2, #1
   111cc:	fa02 f303 	lsl.w	r3, r2, r3
   111d0:	400b      	ands	r3, r1
   111d2:	2b00      	cmp	r3, #0
   111d4:	bf14      	ite	ne
   111d6:	2301      	movne	r3, #1
   111d8:	2300      	moveq	r3, #0
   111da:	b2db      	uxtb	r3, r3
}
   111dc:	4618      	mov	r0, r3
   111de:	3708      	adds	r7, #8
   111e0:	46bd      	mov	sp, r7
   111e2:	bd80      	pop	{r7, pc}
   111e4:	00011135 	.word	0x00011135

000111e8 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
   111e8:	b480      	push	{r7}
   111ea:	b083      	sub	sp, #12
   111ec:	af00      	add	r7, sp, #0
   111ee:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
   111f0:	4b06      	ldr	r3, [pc, #24]	; (1120c <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   111f2:	681b      	ldr	r3, [r3, #0]
   111f4:	2201      	movs	r2, #1
   111f6:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
   111f8:	4b04      	ldr	r3, [pc, #16]	; (1120c <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
   111fa:	681b      	ldr	r3, [r3, #0]
   111fc:	2200      	movs	r2, #0
   111fe:	705a      	strb	r2, [r3, #1]
}
   11200:	bf00      	nop
   11202:	370c      	adds	r7, #12
   11204:	46bd      	mov	sp, r7
   11206:	bc80      	pop	{r7}
   11208:	4770      	bx	lr
   1120a:	bf00      	nop
   1120c:	20003610 	.word	0x20003610

00011210 <_ZL10USBPluggedv>:

static void USBPlugged(void){
   11210:	b580      	push	{r7, lr}
   11212:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
   11214:	2040      	movs	r0, #64	; 0x40
   11216:	4b0a      	ldr	r3, [pc, #40]	; (11240 <_ZL10USBPluggedv+0x30>)
   11218:	4798      	blx	r3
   1121a:	4603      	mov	r3, r0
   1121c:	2b00      	cmp	r3, #0
   1121e:	d004      	beq.n	1122a <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
   11220:	4b08      	ldr	r3, [pc, #32]	; (11244 <_ZL10USBPluggedv+0x34>)
   11222:	681b      	ldr	r3, [r3, #0]
   11224:	2201      	movs	r2, #1
   11226:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
   11228:	e007      	b.n	1123a <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
   1122a:	4b06      	ldr	r3, [pc, #24]	; (11244 <_ZL10USBPluggedv+0x34>)
   1122c:	681b      	ldr	r3, [r3, #0]
   1122e:	2200      	movs	r2, #0
   11230:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
   11232:	4b04      	ldr	r3, [pc, #16]	; (11244 <_ZL10USBPluggedv+0x34>)
   11234:	681b      	ldr	r3, [r3, #0]
   11236:	2200      	movs	r2, #0
   11238:	701a      	strb	r2, [r3, #0]
}
   1123a:	bf00      	nop
   1123c:	bd80      	pop	{r7, pc}
   1123e:	bf00      	nop
   11240:	000111ad 	.word	0x000111ad
   11244:	20003610 	.word	0x20003610

00011248 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
   11248:	b480      	push	{r7}
   1124a:	b083      	sub	sp, #12
   1124c:	af00      	add	r7, sp, #0
   1124e:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
   11250:	4a04      	ldr	r2, [pc, #16]	; (11264 <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
   11252:	687b      	ldr	r3, [r7, #4]
   11254:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
   11256:	687b      	ldr	r3, [r7, #4]
   11258:	4618      	mov	r0, r3
   1125a:	370c      	adds	r7, #12
   1125c:	46bd      	mov	sp, r7
   1125e:	bc80      	pop	{r7}
   11260:	4770      	bx	lr
   11262:	bf00      	nop
   11264:	20003610 	.word	0x20003610

00011268 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
   11268:	b480      	push	{r7}
   1126a:	b083      	sub	sp, #12
   1126c:	af00      	add	r7, sp, #0
   1126e:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
   11270:	687b      	ldr	r3, [r7, #4]
   11272:	4618      	mov	r0, r3
   11274:	370c      	adds	r7, #12
   11276:	46bd      	mov	sp, r7
   11278:	bc80      	pop	{r7}
   1127a:	4770      	bx	lr

0001127c <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
   1127c:	b580      	push	{r7, lr}
   1127e:	b082      	sub	sp, #8
   11280:	af00      	add	r7, sp, #0
   11282:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
   11284:	491e      	ldr	r1, [pc, #120]	; (11300 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
   11286:	2040      	movs	r0, #64	; 0x40
   11288:	4b1e      	ldr	r3, [pc, #120]	; (11304 <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
   1128a:	4798      	blx	r3
		if (usbTerminalTimer.Init())
   1128c:	481e      	ldr	r0, [pc, #120]	; (11308 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   1128e:	4b1f      	ldr	r3, [pc, #124]	; (1130c <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
   11290:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
   11292:	2040      	movs	r0, #64	; 0x40
   11294:	4b1e      	ldr	r3, [pc, #120]	; (11310 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
   11296:	4798      	blx	r3
   11298:	4603      	mov	r3, r0
   1129a:	461a      	mov	r2, r3
   1129c:	687b      	ldr	r3, [r7, #4]
   1129e:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
   112a0:	687b      	ldr	r3, [r7, #4]
   112a2:	78db      	ldrb	r3, [r3, #3]
   112a4:	2b00      	cmp	r3, #0
   112a6:	d021      	beq.n	112ec <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
   112a8:	687b      	ldr	r3, [r7, #4]
   112aa:	2200      	movs	r2, #0
   112ac:	709a      	strb	r2, [r3, #2]
			plugged=true;
   112ae:	687b      	ldr	r3, [r7, #4]
   112b0:	2201      	movs	r2, #1
   112b2:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
   112b4:	f44f 7216 	mov.w	r2, #600	; 0x258
   112b8:	4916      	ldr	r1, [pc, #88]	; (11314 <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
   112ba:	4813      	ldr	r0, [pc, #76]	; (11308 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   112bc:	4b16      	ldr	r3, [pc, #88]	; (11318 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
   112be:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
   112c0:	4816      	ldr	r0, [pc, #88]	; (1131c <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
   112c2:	4b17      	ldr	r3, [pc, #92]	; (11320 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
   112c4:	4798      	blx	r3
   112c6:	4603      	mov	r3, r0
   112c8:	f083 0301 	eor.w	r3, r3, #1
   112cc:	b2db      	uxtb	r3, r3
   112ce:	2b00      	cmp	r3, #0
   112d0:	d008      	beq.n	112e4 <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
   112d2:	687b      	ldr	r3, [r7, #4]
   112d4:	789b      	ldrb	r3, [r3, #2]
   112d6:	b2db      	uxtb	r3, r3
   112d8:	2b00      	cmp	r3, #0
   112da:	d0f1      	beq.n	112c0 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
   112dc:	687b      	ldr	r3, [r7, #4]
   112de:	2200      	movs	r2, #0
   112e0:	701a      	strb	r2, [r3, #0]
					return;
   112e2:	e009      	b.n	112f8 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
   112e4:	4808      	ldr	r0, [pc, #32]	; (11308 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
   112e6:	4b0f      	ldr	r3, [pc, #60]	; (11324 <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
   112e8:	4798      	blx	r3
   112ea:	e005      	b.n	112f8 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
   112ec:	687b      	ldr	r3, [r7, #4]
   112ee:	2200      	movs	r2, #0
   112f0:	701a      	strb	r2, [r3, #0]
			plugged=false;
   112f2:	687b      	ldr	r3, [r7, #4]
   112f4:	2200      	movs	r2, #0
   112f6:	705a      	strb	r2, [r3, #1]
		}
		
}
   112f8:	3708      	adds	r7, #8
   112fa:	46bd      	mov	sp, r7
   112fc:	bd80      	pop	{r7, pc}
   112fe:	bf00      	nop
   11300:	00011211 	.word	0x00011211
   11304:	00003715 	.word	0x00003715
   11308:	200035b0 	.word	0x200035b0
   1130c:	0001052d 	.word	0x0001052d
   11310:	000111ad 	.word	0x000111ad
   11314:	000111e9 	.word	0x000111e9
   11318:	00010715 	.word	0x00010715
   1131c:	200034b0 	.word	0x200034b0
   11320:	00010be5 	.word	0x00010be5
   11324:	000105a1 	.word	0x000105a1

00011328 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
   11328:	b580      	push	{r7, lr}
   1132a:	b082      	sub	sp, #8
   1132c:	af00      	add	r7, sp, #0
   1132e:	6078      	str	r0, [r7, #4]
   11330:	6039      	str	r1, [r7, #0]
   11332:	687b      	ldr	r3, [r7, #4]
   11334:	2b01      	cmp	r3, #1
   11336:	d14c      	bne.n	113d2 <_Z41__static_initialization_and_destruction_0ii+0xaa>
   11338:	683b      	ldr	r3, [r7, #0]
   1133a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1133e:	4293      	cmp	r3, r2
   11340:	d147      	bne.n	113d2 <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   11342:	4926      	ldr	r1, [pc, #152]	; (113dc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   11344:	4826      	ldr	r0, [pc, #152]	; (113e0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   11346:	4b27      	ldr	r3, [pc, #156]	; (113e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11348:	4798      	blx	r3
   1134a:	4a27      	ldr	r2, [pc, #156]	; (113e8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1134c:	4927      	ldr	r1, [pc, #156]	; (113ec <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1134e:	4824      	ldr	r0, [pc, #144]	; (113e0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   11350:	4b27      	ldr	r3, [pc, #156]	; (113f0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11352:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   11354:	4927      	ldr	r1, [pc, #156]	; (113f4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   11356:	4828      	ldr	r0, [pc, #160]	; (113f8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   11358:	4b22      	ldr	r3, [pc, #136]	; (113e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1135a:	4798      	blx	r3
   1135c:	4a22      	ldr	r2, [pc, #136]	; (113e8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1135e:	4923      	ldr	r1, [pc, #140]	; (113ec <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11360:	4825      	ldr	r0, [pc, #148]	; (113f8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   11362:	4b23      	ldr	r3, [pc, #140]	; (113f0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11364:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   11366:	4925      	ldr	r1, [pc, #148]	; (113fc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   11368:	4825      	ldr	r0, [pc, #148]	; (11400 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   1136a:	4b1e      	ldr	r3, [pc, #120]	; (113e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1136c:	4798      	blx	r3
   1136e:	4a1e      	ldr	r2, [pc, #120]	; (113e8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11370:	491e      	ldr	r1, [pc, #120]	; (113ec <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11372:	4823      	ldr	r0, [pc, #140]	; (11400 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   11374:	4b1e      	ldr	r3, [pc, #120]	; (113f0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11376:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   11378:	4922      	ldr	r1, [pc, #136]	; (11404 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   1137a:	4823      	ldr	r0, [pc, #140]	; (11408 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   1137c:	4b19      	ldr	r3, [pc, #100]	; (113e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1137e:	4798      	blx	r3
   11380:	4a19      	ldr	r2, [pc, #100]	; (113e8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11382:	491a      	ldr	r1, [pc, #104]	; (113ec <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11384:	4820      	ldr	r0, [pc, #128]	; (11408 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   11386:	4b1a      	ldr	r3, [pc, #104]	; (113f0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   11388:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   1138a:	4920      	ldr	r1, [pc, #128]	; (1140c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   1138c:	4820      	ldr	r0, [pc, #128]	; (11410 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   1138e:	4b15      	ldr	r3, [pc, #84]	; (113e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   11390:	4798      	blx	r3
   11392:	4a15      	ldr	r2, [pc, #84]	; (113e8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   11394:	4915      	ldr	r1, [pc, #84]	; (113ec <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   11396:	481e      	ldr	r0, [pc, #120]	; (11410 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   11398:	4b15      	ldr	r3, [pc, #84]	; (113f0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1139a:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1139c:	491d      	ldr	r1, [pc, #116]	; (11414 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   1139e:	481e      	ldr	r0, [pc, #120]	; (11418 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   113a0:	4b10      	ldr	r3, [pc, #64]	; (113e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   113a2:	4798      	blx	r3
   113a4:	4a10      	ldr	r2, [pc, #64]	; (113e8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   113a6:	4911      	ldr	r1, [pc, #68]	; (113ec <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   113a8:	481b      	ldr	r0, [pc, #108]	; (11418 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   113aa:	4b11      	ldr	r3, [pc, #68]	; (113f0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   113ac:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   113ae:	491b      	ldr	r1, [pc, #108]	; (1141c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   113b0:	481b      	ldr	r0, [pc, #108]	; (11420 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   113b2:	4b0c      	ldr	r3, [pc, #48]	; (113e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   113b4:	4798      	blx	r3
   113b6:	4a0c      	ldr	r2, [pc, #48]	; (113e8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   113b8:	490c      	ldr	r1, [pc, #48]	; (113ec <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   113ba:	4819      	ldr	r0, [pc, #100]	; (11420 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   113bc:	4b0c      	ldr	r3, [pc, #48]	; (113f0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   113be:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   113c0:	4918      	ldr	r1, [pc, #96]	; (11424 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   113c2:	4819      	ldr	r0, [pc, #100]	; (11428 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   113c4:	4b07      	ldr	r3, [pc, #28]	; (113e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   113c6:	4798      	blx	r3
   113c8:	4a07      	ldr	r2, [pc, #28]	; (113e8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   113ca:	4908      	ldr	r1, [pc, #32]	; (113ec <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   113cc:	4816      	ldr	r0, [pc, #88]	; (11428 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   113ce:	4b08      	ldr	r3, [pc, #32]	; (113f0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   113d0:	4798      	blx	r3
   113d2:	bf00      	nop
   113d4:	3708      	adds	r7, #8
   113d6:	46bd      	mov	sp, r7
   113d8:	bd80      	pop	{r7, pc}
   113da:	bf00      	nop
   113dc:	2000df28 	.word	0x2000df28
   113e0:	20003510 	.word	0x20003510
   113e4:	00010441 	.word	0x00010441
   113e8:	20000000 	.word	0x20000000
   113ec:	00010479 	.word	0x00010479
   113f0:	0001a611 	.word	0x0001a611
   113f4:	2000dfbc 	.word	0x2000dfbc
   113f8:	20003530 	.word	0x20003530
   113fc:	2000e0e0 	.word	0x2000e0e0
   11400:	20003550 	.word	0x20003550
   11404:	2000dfdc 	.word	0x2000dfdc
   11408:	20003570 	.word	0x20003570
   1140c:	2000e0a0 	.word	0x2000e0a0
   11410:	20003590 	.word	0x20003590
   11414:	2000e0c0 	.word	0x2000e0c0
   11418:	200035b0 	.word	0x200035b0
   1141c:	2000df98 	.word	0x2000df98
   11420:	200035d0 	.word	0x200035d0
   11424:	2000e038 	.word	0x2000e038
   11428:	200035f0 	.word	0x200035f0

0001142c <_GLOBAL__sub_I_ptrSerialTerminalClass>:
   1142c:	b580      	push	{r7, lr}
   1142e:	af00      	add	r7, sp, #0
   11430:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11434:	2001      	movs	r0, #1
   11436:	4b01      	ldr	r3, [pc, #4]	; (1143c <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
   11438:	4798      	blx	r3
   1143a:	bd80      	pop	{r7, pc}
   1143c:	00011329 	.word	0x00011329

00011440 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
   11440:	b480      	push	{r7}
   11442:	b083      	sub	sp, #12
   11444:	af00      	add	r7, sp, #0
   11446:	6078      	str	r0, [r7, #4]
    return (void *)0;
   11448:	2300      	movs	r3, #0
	}
   1144a:	4618      	mov	r0, r3
   1144c:	370c      	adds	r7, #12
   1144e:	46bd      	mov	sp, r7
   11450:	bc80      	pop	{r7}
   11452:	4770      	bx	lr

00011454 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
   11454:	b480      	push	{r7}
   11456:	af00      	add	r7, sp, #0
		}
   11458:	bf00      	nop
   1145a:	46bd      	mov	sp, r7
   1145c:	bc80      	pop	{r7}
   1145e:	4770      	bx	lr

00011460 <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
   11460:	4770      	bx	lr

00011462 <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
   11462:	4770      	bx	lr

00011464 <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
	return isOK;
	
	
}

uint8_t CondesatorFan_Class::InitExpanderArray(MCP23008_Class** expandersArray){
   11464:	1f0b      	subs	r3, r1, #4
   11466:	300c      	adds	r0, #12
   11468:	3118      	adds	r1, #24
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
		{
			expanders[i]=expandersArray[i];
   1146a:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1146e:	f840 2b04 	str.w	r2, [r0], #4
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   11472:	428b      	cmp	r3, r1
   11474:	d1f9      	bne.n	1146a <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
		}
		return 0;
}
   11476:	2000      	movs	r0, #0
   11478:	4770      	bx	lr
	...

0001147c <_ZN19CondesatorFan_Class10ReadStatusEv>:
	


uint8_t	CondesatorFan_Class::ReadStatus(void){
   1147c:	b510      	push	{r4, lr}
   1147e:	4604      	mov	r4, r0
	uint8_t r=expanders[0]->ReadGPIORegister();
   11480:	68c0      	ldr	r0, [r0, #12]
   11482:	4b0a      	ldr	r3, [pc, #40]	; (114ac <_ZN19CondesatorFan_Class10ReadStatusEv+0x30>)
   11484:	4798      	blx	r3
	
	
	condesatorStatus.niAlcCdsFanExtFault=r&(0x01<<(4));
   11486:	f3c0 1200 	ubfx	r2, r0, #4, #1
   1148a:	78e3      	ldrb	r3, [r4, #3]
   1148c:	f362 0382 	bfi	r3, r2, #2, #1
	condesatorStatus.niAlcCdsFanEnableFault=r&(0x02<<(4));
   11490:	f3c0 1240 	ubfx	r2, r0, #5, #1
   11494:	f362 0341 	bfi	r3, r2, #1, #1
	condesatorStatus.niAlcCdsFanPwmFault=r&(0x04<<(4));
   11498:	f3c0 1280 	ubfx	r2, r0, #6, #1
   1149c:	f362 0300 	bfi	r3, r2, #0, #1
   114a0:	70e3      	strb	r3, [r4, #3]
	faults=r&(0x07<<(4));
   114a2:	f000 0070 	and.w	r0, r0, #112	; 0x70
   114a6:	7120      	strb	r0, [r4, #4]
	return faults;
}
   114a8:	bd10      	pop	{r4, pc}
   114aa:	bf00      	nop
   114ac:	0000ff35 	.word	0x0000ff35

000114b0 <_ZN19CondesatorFan_Class9SetEnableEb>:
uint8_t	CondesatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(2,true);
	return uint8_t(enabled);
}
uint8_t	CondesatorFan_Class::SetEnable(bool state){
   114b0:	b510      	push	{r4, lr}
   114b2:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(0,!state);
   114b4:	f081 0201 	eor.w	r2, r1, #1
   114b8:	2100      	movs	r1, #0
   114ba:	68c0      	ldr	r0, [r0, #12]
   114bc:	4b01      	ldr	r3, [pc, #4]	; (114c4 <_ZN19CondesatorFan_Class9SetEnableEb+0x14>)
   114be:	4798      	blx	r3
   114c0:	7060      	strb	r0, [r4, #1]
	
	return uint8_t(enabled);
}
   114c2:	bd10      	pop	{r4, pc}
   114c4:	000101ed 	.word	0x000101ed

000114c8 <_ZN19CondesatorFan_Class6SetPWMEh>:
	enabled=(value&0x01);
	return enabled;
}


uint8_t	CondesatorFan_Class::SetPWM(uint8_t pwm){
   114c8:	b510      	push	{r4, lr}
   114ca:	4604      	mov	r4, r0
	pwmValue= expanders[6]->WriteGPIORegister(pwm);
   114cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
   114ce:	4b02      	ldr	r3, [pc, #8]	; (114d8 <_ZN19CondesatorFan_Class6SetPWMEh+0x10>)
   114d0:	4798      	blx	r3
   114d2:	7160      	strb	r0, [r4, #5]
	return pwmValue;
}
   114d4:	bd10      	pop	{r4, pc}
   114d6:	bf00      	nop
   114d8:	0000ffb9 	.word	0x0000ffb9

000114dc <_ZN19CondesatorFan_Class8SelfTestEv>:

bool CondesatorFan_Class::SelfTest(void){
   114dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   114e0:	4605      	mov	r5, r0
		bool result;
		SetEnable(false);
   114e2:	2100      	movs	r1, #0
   114e4:	4c0f      	ldr	r4, [pc, #60]	; (11524 <_ZN19CondesatorFan_Class8SelfTestEv+0x48>)
   114e6:	47a0      	blx	r4
		SetPWM(0xff);
   114e8:	21ff      	movs	r1, #255	; 0xff
   114ea:	4628      	mov	r0, r5
   114ec:	4b0e      	ldr	r3, [pc, #56]	; (11528 <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
   114ee:	4798      	blx	r3
		SetEnable(true);
   114f0:	2101      	movs	r1, #1
   114f2:	4628      	mov	r0, r5
   114f4:	47a0      	blx	r4
   114f6:	24ff      	movs	r4, #255	; 0xff
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
		{
			SetPWM(i);
   114f8:	4f0b      	ldr	r7, [pc, #44]	; (11528 <_ZN19CondesatorFan_Class8SelfTestEv+0x4c>)
			delay_us(10);
   114fa:	f04f 080a 	mov.w	r8, #10
   114fe:	4e0b      	ldr	r6, [pc, #44]	; (1152c <_ZN19CondesatorFan_Class8SelfTestEv+0x50>)
			SetPWM(i);
   11500:	4621      	mov	r1, r4
   11502:	4628      	mov	r0, r5
   11504:	47b8      	blx	r7
			delay_us(10);
   11506:	4640      	mov	r0, r8
   11508:	47b0      	blx	r6
		for (uint8_t i = 0xff; i >CONDESATOR_MINIMUN_FLOW_AIR ; i--)
   1150a:	3c01      	subs	r4, #1
   1150c:	b2e4      	uxtb	r4, r4
   1150e:	2c10      	cmp	r4, #16
   11510:	d1f6      	bne.n	11500 <_ZN19CondesatorFan_Class8SelfTestEv+0x24>
		}

		ReadStatus();
   11512:	4628      	mov	r0, r5
   11514:	4b06      	ldr	r3, [pc, #24]	; (11530 <_ZN19CondesatorFan_Class8SelfTestEv+0x54>)
   11516:	4798      	blx	r3
// 		delay_ms(6*1000);
// 		SetEnable(false);
		result=condesatorStatus.niAlcCdsFanExtFault;
   11518:	78e8      	ldrb	r0, [r5, #3]
		return result;
   1151a:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1151e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11522:	bf00      	nop
   11524:	000114b1 	.word	0x000114b1
   11528:	000114c9 	.word	0x000114c9
   1152c:	0000364d 	.word	0x0000364d
   11530:	0001147d 	.word	0x0001147d

00011534 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class>:
bool CondesatorFan_Class::InitCondesator(I2C_Sync_Class* i2cClass,MCP23008_Class** expanderArray){
   11534:	b510      	push	{r4, lr}
   11536:	4604      	mov	r4, r0
	i2c=i2cClass;
   11538:	6081      	str	r1, [r0, #8]
	if (i2c->isOK)
   1153a:	7a4b      	ldrb	r3, [r1, #9]
   1153c:	b90b      	cbnz	r3, 11542 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
}
   1153e:	78a0      	ldrb	r0, [r4, #2]
   11540:	bd10      	pop	{r4, pc}
		InitExpanderArray(expanderArray);
   11542:	4611      	mov	r1, r2
   11544:	4b04      	ldr	r3, [pc, #16]	; (11558 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x24>)
   11546:	4798      	blx	r3
		expanders[EVAPORATOR_AND_CONDESATOR_EXPANDERS-1]->SetPortOutput();
   11548:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1154a:	4b04      	ldr	r3, [pc, #16]	; (1155c <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x28>)
   1154c:	4798      	blx	r3
		isOK=SelfTest();
   1154e:	4620      	mov	r0, r4
   11550:	4b03      	ldr	r3, [pc, #12]	; (11560 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x2c>)
   11552:	4798      	blx	r3
   11554:	70a0      	strb	r0, [r4, #2]
   11556:	e7f2      	b.n	1153e <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xa>
   11558:	00011465 	.word	0x00011465
   1155c:	000100ad 	.word	0x000100ad
   11560:	000114dd 	.word	0x000114dd

00011564 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev>:
   11564:	b510      	push	{r4, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   11566:	4c05      	ldr	r4, [pc, #20]	; (1157c <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x18>)
   11568:	4905      	ldr	r1, [pc, #20]	; (11580 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x1c>)
   1156a:	4620      	mov	r0, r4
   1156c:	4b05      	ldr	r3, [pc, #20]	; (11584 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x20>)
   1156e:	4798      	blx	r3
   11570:	4a05      	ldr	r2, [pc, #20]	; (11588 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x24>)
   11572:	4906      	ldr	r1, [pc, #24]	; (1158c <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x28>)
   11574:	4620      	mov	r0, r4
   11576:	4b06      	ldr	r3, [pc, #24]	; (11590 <_GLOBAL__sub_I__ZN19CondesatorFan_ClassC2Ev+0x2c>)
   11578:	4798      	blx	r3
   1157a:	bd10      	pop	{r4, pc}
   1157c:	20003614 	.word	0x20003614
   11580:	2000e058 	.word	0x2000e058
   11584:	0000fc6d 	.word	0x0000fc6d
   11588:	20000000 	.word	0x20000000
   1158c:	0000fc89 	.word	0x0000fc89
   11590:	0001a611 	.word	0x0001a611

00011594 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:
	somethingChanged=false;
	
} //EvaporatorAndCondesatorFans_Class

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
   11594:	b510      	push	{r4, lr}
   11596:	4604      	mov	r4, r0
   11598:	302c      	adds	r0, #44	; 0x2c
   1159a:	4b03      	ldr	r3, [pc, #12]	; (115a8 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
   1159c:	4798      	blx	r3
   1159e:	4620      	mov	r0, r4
   115a0:	4b02      	ldr	r3, [pc, #8]	; (115ac <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
   115a2:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
   115a4:	4620      	mov	r0, r4
   115a6:	bd10      	pop	{r4, pc}
   115a8:	00011463 	.word	0x00011463
   115ac:	000117f9 	.word	0x000117f9

000115b0 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
   115b0:	b570      	push	{r4, r5, r6, lr}
   115b2:	4c05      	ldr	r4, [pc, #20]	; (115c8 <__tcf_1+0x18>)
   115b4:	4e05      	ldr	r6, [pc, #20]	; (115cc <__tcf_1+0x1c>)
   115b6:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
   115ba:	3c1c      	subs	r4, #28
   115bc:	4620      	mov	r0, r4
   115be:	47b0      	blx	r6
   115c0:	42ac      	cmp	r4, r5
   115c2:	d1fa      	bne.n	115ba <__tcf_1+0xa>
   115c4:	bd70      	pop	{r4, r5, r6, pc}
   115c6:	bf00      	nop
   115c8:	200036f0 	.word	0x200036f0
   115cc:	0000fe3d 	.word	0x0000fe3d

000115d0 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
   115d0:	b510      	push	{r4, lr}
   115d2:	4803      	ldr	r0, [pc, #12]	; (115e0 <__tcf_0+0x10>)
   115d4:	4c03      	ldr	r4, [pc, #12]	; (115e4 <__tcf_0+0x14>)
   115d6:	47a0      	blx	r4
   115d8:	4803      	ldr	r0, [pc, #12]	; (115e8 <__tcf_0+0x18>)
   115da:	47a0      	blx	r4
   115dc:	bd10      	pop	{r4, pc}
   115de:	bf00      	nop
   115e0:	2000371c 	.word	0x2000371c
   115e4:	000117f9 	.word	0x000117f9
   115e8:	200036f0 	.word	0x200036f0

000115ec <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
   115ec:	b510      	push	{r4, lr}
   115ee:	4604      	mov	r4, r0
   115f0:	4b0d      	ldr	r3, [pc, #52]	; (11628 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
   115f2:	4798      	blx	r3
   115f4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   115f8:	4b0c      	ldr	r3, [pc, #48]	; (1162c <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
   115fa:	4798      	blx	r3
	i2c=&i2cFansStatic;
   115fc:	4b0c      	ldr	r3, [pc, #48]	; (11630 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
   115fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
   11602:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
   11606:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
   1160a:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
   1160c:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
   11610:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
   11612:	f503 729a 	add.w	r2, r3, #308	; 0x134
   11616:	6662      	str	r2, [r4, #100]	; 0x64
	ptrFansClass=this;
   11618:	f8c3 4160 	str.w	r4, [r3, #352]	; 0x160
	somethingChanged=false;
   1161c:	2300      	movs	r3, #0
   1161e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
} //EvaporatorAndCondesatorFans_Class
   11622:	4620      	mov	r0, r4
   11624:	bd10      	pop	{r4, pc}
   11626:	bf00      	nop
   11628:	000117e1 	.word	0x000117e1
   1162c:	00011461 	.word	0x00011461
   11630:	2000362c 	.word	0x2000362c

00011634 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv>:
	}
	isOK=i2c->isOK;
	return isOK;
	
}
uint8_t EvaporatorAndCondesatorFans_Class::InitExpanderArray(void){
   11634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11638:	4606      	mov	r6, r0
   1163a:	4c0c      	ldr	r4, [pc, #48]	; (1166c <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x38>)
   1163c:	f100 0768 	add.w	r7, r0, #104	; 0x68
	
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   11640:	2500      	movs	r5, #0
	{
		expanders[i]=&expandersStatic[i];
		currentExpander=expanders[i];
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
   11642:	f8df 802c 	ldr.w	r8, [pc, #44]	; 11670 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x3c>
		expanders[i]=&expandersStatic[i];
   11646:	f847 4b04 	str.w	r4, [r7], #4
		currentExpander=expanders[i];
   1164a:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
   1164e:	f045 0120 	orr.w	r1, r5, #32
   11652:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   11656:	b2c9      	uxtb	r1, r1
   11658:	4620      	mov	r0, r4
   1165a:	47c0      	blx	r8
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   1165c:	3501      	adds	r5, #1
   1165e:	341c      	adds	r4, #28
   11660:	2d07      	cmp	r5, #7
   11662:	d1f0      	bne.n	11646 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x12>
	}
	return 0;
}
   11664:	2000      	movs	r0, #0
   11666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1166a:	bf00      	nop
   1166c:	2000362c 	.word	0x2000362c
   11670:	0000fe51 	.word	0x0000fe51

00011674 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv>:
bool	EvaporatorAndCondesatorFans_Class::Init(void){
   11674:	b570      	push	{r4, r5, r6, lr}
   11676:	4604      	mov	r4, r0
	i2c->Init();
   11678:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   1167c:	4b17      	ldr	r3, [pc, #92]	; (116dc <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x68>)
   1167e:	4798      	blx	r3
	if (i2c->isOK)
   11680:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   11684:	7a5b      	ldrb	r3, [r3, #9]
   11686:	b943      	cbnz	r3, 1169a <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x26>
	isOK=i2c->isOK;
   11688:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1168c:	7a5b      	ldrb	r3, [r3, #9]
   1168e:	b2db      	uxtb	r3, r3
   11690:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	return isOK;
   11694:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
}
   11698:	bd70      	pop	{r4, r5, r6, pc}
		InitExpanderArray();
   1169a:	4620      	mov	r0, r4
   1169c:	4b10      	ldr	r3, [pc, #64]	; (116e0 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x6c>)
   1169e:	4798      	blx	r3
		evaporator[0]->InitEvaporator(0,i2c,expanders);
   116a0:	f104 0568 	add.w	r5, r4, #104	; 0x68
   116a4:	462b      	mov	r3, r5
   116a6:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   116aa:	2100      	movs	r1, #0
   116ac:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   116ae:	4e0d      	ldr	r6, [pc, #52]	; (116e4 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x70>)
   116b0:	47b0      	blx	r6
		evaporator[1]->InitEvaporator(1,i2c,expanders);
   116b2:	462b      	mov	r3, r5
   116b4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   116b8:	2101      	movs	r1, #1
   116ba:	6e20      	ldr	r0, [r4, #96]	; 0x60
   116bc:	47b0      	blx	r6
		condesator->InitCondesator(i2c,expanders);
   116be:	462a      	mov	r2, r5
   116c0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   116c4:	6e60      	ldr	r0, [r4, #100]	; 0x64
   116c6:	4b08      	ldr	r3, [pc, #32]	; (116e8 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x74>)
   116c8:	4798      	blx	r3
		isOK=(evaporator[0]->isOK)&(evaporator[1]->isOK);
   116ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   116cc:	6e22      	ldr	r2, [r4, #96]	; 0x60
   116ce:	791b      	ldrb	r3, [r3, #4]
   116d0:	7912      	ldrb	r2, [r2, #4]
   116d2:	4013      	ands	r3, r2
   116d4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   116d8:	e7d6      	b.n	11688 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x14>
   116da:	bf00      	nop
   116dc:	0000fc9d 	.word	0x0000fc9d
   116e0:	00011635 	.word	0x00011635
   116e4:	00011905 	.word	0x00011905
   116e8:	00011535 	.word	0x00011535

000116ec <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh>:
void EvaporatorAndCondesatorFans_Class::GetGPIOSValues(uint8_t * gpios){
   116ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   116ee:	f100 0468 	add.w	r4, r0, #104	; 0x68
   116f2:	1e4d      	subs	r5, r1, #1
   116f4:	f100 0684 	add.w	r6, r0, #132	; 0x84
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
	{
		gpios[i]=expanders[i]->ReadGPIORegister();
   116f8:	4f04      	ldr	r7, [pc, #16]	; (1170c <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0x20>)
   116fa:	f854 0b04 	ldr.w	r0, [r4], #4
   116fe:	47b8      	blx	r7
   11700:	f805 0f01 	strb.w	r0, [r5, #1]!
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
   11704:	42b4      	cmp	r4, r6
   11706:	d1f8      	bne.n	116fa <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0xe>
	}
	

}
   11708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1170a:	bf00      	nop
   1170c:	0000ff35 	.word	0x0000ff35

00011710 <_GLOBAL__sub_I_ptrFansClass>:

EvaporatorAndCondesatorFans_Class  fans;
   11710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11714:	4c22      	ldr	r4, [pc, #136]	; (117a0 <_GLOBAL__sub_I_ptrFansClass+0x90>)
   11716:	f504 75b2 	add.w	r5, r4, #356	; 0x164
   1171a:	4922      	ldr	r1, [pc, #136]	; (117a4 <_GLOBAL__sub_I_ptrFansClass+0x94>)
   1171c:	4628      	mov	r0, r5
   1171e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 117d4 <_GLOBAL__sub_I_ptrFansClass+0xc4>
   11722:	47c8      	blx	r9
   11724:	4f20      	ldr	r7, [pc, #128]	; (117a8 <_GLOBAL__sub_I_ptrFansClass+0x98>)
   11726:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 117d8 <_GLOBAL__sub_I_ptrFansClass+0xc8>
   1172a:	463a      	mov	r2, r7
   1172c:	4641      	mov	r1, r8
   1172e:	4628      	mov	r0, r5
   11730:	4e1e      	ldr	r6, [pc, #120]	; (117ac <_GLOBAL__sub_I_ptrFansClass+0x9c>)
   11732:	47b0      	blx	r6
static I2C_Sync_Class	i2cFansStatic(&I2C_FANS);
   11734:	f504 758e 	add.w	r5, r4, #284	; 0x11c
   11738:	491d      	ldr	r1, [pc, #116]	; (117b0 <_GLOBAL__sub_I_ptrFansClass+0xa0>)
   1173a:	4628      	mov	r0, r5
   1173c:	47c8      	blx	r9
   1173e:	463a      	mov	r2, r7
   11740:	4641      	mov	r1, r8
   11742:	4628      	mov	r0, r5
   11744:	47b0      	blx	r6
static EvaporatorFan_Class	evaporatorFan[2];
   11746:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
   1174a:	4628      	mov	r0, r5
   1174c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 117dc <_GLOBAL__sub_I_ptrFansClass+0xcc>
   11750:	47c0      	blx	r8
   11752:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   11756:	47c0      	blx	r8
   11758:	463a      	mov	r2, r7
   1175a:	4916      	ldr	r1, [pc, #88]	; (117b4 <_GLOBAL__sub_I_ptrFansClass+0xa4>)
   1175c:	2000      	movs	r0, #0
   1175e:	47b0      	blx	r6
static CondesatorFan_Class	condesatorFan;
   11760:	f504 789a 	add.w	r8, r4, #308	; 0x134
   11764:	4640      	mov	r0, r8
   11766:	4b14      	ldr	r3, [pc, #80]	; (117b8 <_GLOBAL__sub_I_ptrFansClass+0xa8>)
   11768:	4798      	blx	r3
   1176a:	463a      	mov	r2, r7
   1176c:	4913      	ldr	r1, [pc, #76]	; (117bc <_GLOBAL__sub_I_ptrFansClass+0xac>)
   1176e:	4640      	mov	r0, r8
   11770:	47b0      	blx	r6
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
   11772:	4e13      	ldr	r6, [pc, #76]	; (117c0 <_GLOBAL__sub_I_ptrFansClass+0xb0>)
   11774:	4620      	mov	r0, r4
   11776:	47b0      	blx	r6
   11778:	341c      	adds	r4, #28
   1177a:	42a5      	cmp	r5, r4
   1177c:	d1fa      	bne.n	11774 <_GLOBAL__sub_I_ptrFansClass+0x64>
   1177e:	4e0a      	ldr	r6, [pc, #40]	; (117a8 <_GLOBAL__sub_I_ptrFansClass+0x98>)
   11780:	4632      	mov	r2, r6
   11782:	4910      	ldr	r1, [pc, #64]	; (117c4 <_GLOBAL__sub_I_ptrFansClass+0xb4>)
   11784:	2000      	movs	r0, #0
   11786:	4c09      	ldr	r4, [pc, #36]	; (117ac <_GLOBAL__sub_I_ptrFansClass+0x9c>)
   11788:	47a0      	blx	r4
EvaporatorAndCondesatorFans_Class  fans;
   1178a:	4d0f      	ldr	r5, [pc, #60]	; (117c8 <_GLOBAL__sub_I_ptrFansClass+0xb8>)
   1178c:	4628      	mov	r0, r5
   1178e:	4b0f      	ldr	r3, [pc, #60]	; (117cc <_GLOBAL__sub_I_ptrFansClass+0xbc>)
   11790:	4798      	blx	r3
   11792:	4632      	mov	r2, r6
   11794:	490e      	ldr	r1, [pc, #56]	; (117d0 <_GLOBAL__sub_I_ptrFansClass+0xc0>)
   11796:	4628      	mov	r0, r5
   11798:	47a0      	blx	r4
   1179a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1179e:	bf00      	nop
   117a0:	2000362c 	.word	0x2000362c
   117a4:	2000e058 	.word	0x2000e058
   117a8:	20000000 	.word	0x20000000
   117ac:	0001a611 	.word	0x0001a611
   117b0:	2000df78 	.word	0x2000df78
   117b4:	000115d1 	.word	0x000115d1
   117b8:	00011461 	.word	0x00011461
   117bc:	00011463 	.word	0x00011463
   117c0:	0000fe29 	.word	0x0000fe29
   117c4:	000115b1 	.word	0x000115b1
   117c8:	200037a8 	.word	0x200037a8
   117cc:	000115ed 	.word	0x000115ed
   117d0:	00011595 	.word	0x00011595
   117d4:	0000fc6d 	.word	0x0000fc6d
   117d8:	0000fc89 	.word	0x0000fc89
   117dc:	000117e1 	.word	0x000117e1

000117e0 <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
   117e0:	b510      	push	{r4, lr}
   117e2:	4604      	mov	r4, r0
   117e4:	4b02      	ldr	r3, [pc, #8]	; (117f0 <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
   117e6:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
   117e8:	4b02      	ldr	r3, [pc, #8]	; (117f4 <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
   117ea:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
   117ec:	4620      	mov	r0, r4
   117ee:	bd10      	pop	{r4, pc}
   117f0:	0001199d 	.word	0x0001199d
   117f4:	20003834 	.word	0x20003834

000117f8 <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
   117f8:	b510      	push	{r4, lr}
   117fa:	4604      	mov	r4, r0
   117fc:	4b01      	ldr	r3, [pc, #4]	; (11804 <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
   117fe:	4798      	blx	r3
{
} //~EvaporatorFan_Class
   11800:	4620      	mov	r0, r4
   11802:	bd10      	pop	{r4, pc}
   11804:	0001199f 	.word	0x0001199f

00011808 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
		}
		return isOK;
	
	
}
uint8_t EvaporatorFan_Class::InitExpanderArray(MCP23008_Class** expanArray){
   11808:	1f0b      	subs	r3, r1, #4
   1180a:	300c      	adds	r0, #12
   1180c:	3114      	adds	r1, #20
	
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
			{
				expanders[i]=expanArray[i];
   1180e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   11812:	f840 2b04 	str.w	r2, [r0], #4
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
   11816:	428b      	cmp	r3, r1
   11818:	d1f9      	bne.n	1180e <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
			}
			return 0;
}
   1181a:	2000      	movs	r0, #0
   1181c:	4770      	bx	lr
	...

00011820 <_ZN19EvaporatorFan_Class10ReadStatusEv>:

uint8_t	EvaporatorFan_Class::ReadStatus(void){
   11820:	b538      	push	{r3, r4, r5, lr}
   11822:	4604      	mov	r4, r0
	uint8_t r=expanders[1]->ReadGPIORegister();
   11824:	6900      	ldr	r0, [r0, #16]
   11826:	4b10      	ldr	r3, [pc, #64]	; (11868 <_ZN19EvaporatorFan_Class10ReadStatusEv+0x48>)
   11828:	4798      	blx	r3
	
	
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanExtFault=r&(0x01<<(4*fanNumber));
   1182a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1182e:	0099      	lsls	r1, r3, #2
   11830:	fa40 f501 	asr.w	r5, r0, r1
   11834:	5ce2      	ldrb	r2, [r4, r3]
   11836:	f365 0282 	bfi	r2, r5, #2, #1
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanEnableFault=r&(0x02<<(4*fanNumber));
   1183a:	2502      	movs	r5, #2
   1183c:	408d      	lsls	r5, r1
   1183e:	4205      	tst	r5, r0
   11840:	bf14      	ite	ne
   11842:	2501      	movne	r5, #1
   11844:	2500      	moveq	r5, #0
   11846:	f365 0241 	bfi	r2, r5, #1, #1
	evaporatorFansStatus.inputs[fanNumber].iAlcEvaFanPwmFault=r&(0x04<<(4*fanNumber));
   1184a:	2504      	movs	r5, #4
   1184c:	408d      	lsls	r5, r1
   1184e:	4205      	tst	r5, r0
   11850:	bf14      	ite	ne
   11852:	2501      	movne	r5, #1
   11854:	2500      	moveq	r5, #0
   11856:	f365 0200 	bfi	r2, r5, #0, #1
   1185a:	54e2      	strb	r2, [r4, r3]
	faults=r&(0x07<<(4*fanNumber));
   1185c:	2307      	movs	r3, #7
   1185e:	408b      	lsls	r3, r1
   11860:	4018      	ands	r0, r3
   11862:	b2c0      	uxtb	r0, r0
   11864:	7160      	strb	r0, [r4, #5]
	return faults;
		
}
   11866:	bd38      	pop	{r3, r4, r5, pc}
   11868:	0000ff35 	.word	0x0000ff35

0001186c <_ZN19EvaporatorFan_Class9SetEnableEb>:
uint8_t	EvaporatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,true);
	return uint8_t(enabled);
}
uint8_t	EvaporatorFan_Class::SetEnable(bool state){
   1186c:	b510      	push	{r4, lr}
   1186e:	4604      	mov	r4, r0
	uint8_t fanCorrrection=fanNumber==1?2:1;
   11870:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   11874:	2b01      	cmp	r3, #1
	enabled=expanders[0]->WriteDigit(fanCorrrection,!state);
   11876:	f081 0201 	eor.w	r2, r1, #1
   1187a:	bf0c      	ite	eq
   1187c:	2102      	moveq	r1, #2
   1187e:	2101      	movne	r1, #1
   11880:	68c0      	ldr	r0, [r0, #12]
   11882:	4b02      	ldr	r3, [pc, #8]	; (1188c <_ZN19EvaporatorFan_Class9SetEnableEb+0x20>)
   11884:	4798      	blx	r3
   11886:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
   11888:	bd10      	pop	{r4, pc}
   1188a:	bf00      	nop
   1188c:	000101ed 	.word	0x000101ed

00011890 <_ZN19EvaporatorFan_Class6SetPWMEh>:
uint8_t	EvaporatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,false)?false:true;
	return uint8_t(enabled);
}

uint8_t	EvaporatorFan_Class::SetPWM(uint8_t pwm){
   11890:	b510      	push	{r4, lr}
   11892:	4604      	mov	r4, r0
	pwmValue= expanders[4+fanNumber]->WriteGPIORegister(pwm);
   11894:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   11898:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1189c:	69d8      	ldr	r0, [r3, #28]
   1189e:	4b02      	ldr	r3, [pc, #8]	; (118a8 <_ZN19EvaporatorFan_Class6SetPWMEh+0x18>)
   118a0:	4798      	blx	r3
   118a2:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	
	return pwmValue;
}
   118a6:	bd10      	pop	{r4, pc}
   118a8:	0000ffb9 	.word	0x0000ffb9

000118ac <_ZN19EvaporatorFan_Class8SelfTestEv>:
	uint8_t value=expanders[0]->ReadGPIORegister();
	enabled=!(value&fanCorrrection);
	return enabled;
}

bool EvaporatorFan_Class::SelfTest(void){
   118ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   118b0:	4605      	mov	r5, r0
	bool result;
	SetEnable(false);
   118b2:	2100      	movs	r1, #0
   118b4:	4c0f      	ldr	r4, [pc, #60]	; (118f4 <_ZN19EvaporatorFan_Class8SelfTestEv+0x48>)
   118b6:	47a0      	blx	r4
	SetPWM(0xff);
   118b8:	21ff      	movs	r1, #255	; 0xff
   118ba:	4628      	mov	r0, r5
   118bc:	4b0e      	ldr	r3, [pc, #56]	; (118f8 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
   118be:	4798      	blx	r3
	SetEnable(true);
   118c0:	2101      	movs	r1, #1
   118c2:	4628      	mov	r0, r5
   118c4:	47a0      	blx	r4
   118c6:	24ff      	movs	r4, #255	; 0xff
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
	{
		SetPWM(i);
   118c8:	4f0b      	ldr	r7, [pc, #44]	; (118f8 <_ZN19EvaporatorFan_Class8SelfTestEv+0x4c>)
		delay_us(10);
   118ca:	f04f 080a 	mov.w	r8, #10
   118ce:	4e0b      	ldr	r6, [pc, #44]	; (118fc <_ZN19EvaporatorFan_Class8SelfTestEv+0x50>)
		SetPWM(i);
   118d0:	4621      	mov	r1, r4
   118d2:	4628      	mov	r0, r5
   118d4:	47b8      	blx	r7
		delay_us(10);
   118d6:	4640      	mov	r0, r8
   118d8:	47b0      	blx	r6
	for (uint8_t i = 0xff; i >EVAPORATOR_MINIMUN_FLOW_AIR ; i--)
   118da:	3c01      	subs	r4, #1
   118dc:	b2e4      	uxtb	r4, r4
   118de:	2c0c      	cmp	r4, #12
   118e0:	d1f6      	bne.n	118d0 <_ZN19EvaporatorFan_Class8SelfTestEv+0x24>
	}

	ReadStatus();
   118e2:	4628      	mov	r0, r5
   118e4:	4b06      	ldr	r3, [pc, #24]	; (11900 <_ZN19EvaporatorFan_Class8SelfTestEv+0x54>)
   118e6:	4798      	blx	r3
	result=evaporatorFansStatus.inputs->niAlcEvaFanExtFault;
   118e8:	7828      	ldrb	r0, [r5, #0]
	return result;
}
   118ea:	f3c0 0080 	ubfx	r0, r0, #2, #1
   118ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   118f2:	bf00      	nop
   118f4:	0001186d 	.word	0x0001186d
   118f8:	00011891 	.word	0x00011891
   118fc:	0000364d 	.word	0x0000364d
   11900:	00011821 	.word	0x00011821

00011904 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class>:
bool EvaporatorFan_Class::InitEvaporator(uint8_t number, I2C_Sync_Class* i2cClass,MCP23008_Class** expandersArray){
   11904:	b510      	push	{r4, lr}
   11906:	4604      	mov	r4, r0
	i2c=i2cClass;
   11908:	6082      	str	r2, [r0, #8]
	fanNumber=number;
   1190a:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
		if (i2c->isOK)
   1190e:	7a52      	ldrb	r2, [r2, #9]
   11910:	b90a      	cbnz	r2, 11916 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x12>
}
   11912:	7920      	ldrb	r0, [r4, #4]
   11914:	bd10      	pop	{r4, pc}
			InitExpanderArray(expandersArray);
   11916:	4619      	mov	r1, r3
   11918:	4b0e      	ldr	r3, [pc, #56]	; (11954 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x50>)
   1191a:	4798      	blx	r3
			if (fanNumber==0)
   1191c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   11920:	b15b      	cbz	r3, 1193a <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x36>
			expanders[4+fanNumber]->SetPortOutput();
   11922:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   11926:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1192a:	69d8      	ldr	r0, [r3, #28]
   1192c:	4b0a      	ldr	r3, [pc, #40]	; (11958 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x54>)
   1192e:	4798      	blx	r3
			isOK=SelfTest();
   11930:	4620      	mov	r0, r4
   11932:	4b0a      	ldr	r3, [pc, #40]	; (1195c <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x58>)
   11934:	4798      	blx	r3
   11936:	7120      	strb	r0, [r4, #4]
   11938:	e7eb      	b.n	11912 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
				expanders[0]->SetPortInput(0x70);
   1193a:	2170      	movs	r1, #112	; 0x70
   1193c:	68e0      	ldr	r0, [r4, #12]
   1193e:	4b08      	ldr	r3, [pc, #32]	; (11960 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x5c>)
   11940:	4798      	blx	r3
				expanders[0]->SetPortOutput(0x07);
   11942:	2107      	movs	r1, #7
   11944:	68e0      	ldr	r0, [r4, #12]
   11946:	4b07      	ldr	r3, [pc, #28]	; (11964 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x60>)
   11948:	4798      	blx	r3
				expanders[1]->SetPortInput();
   1194a:	6920      	ldr	r0, [r4, #16]
   1194c:	4b06      	ldr	r3, [pc, #24]	; (11968 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x64>)
   1194e:	4798      	blx	r3
   11950:	e7e7      	b.n	11922 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x1e>
   11952:	bf00      	nop
   11954:	00011809 	.word	0x00011809
   11958:	000100ad 	.word	0x000100ad
   1195c:	000118ad 	.word	0x000118ad
   11960:	00010039 	.word	0x00010039
   11964:	000100e1 	.word	0x000100e1
   11968:	0000fff5 	.word	0x0000fff5

0001196c <_GLOBAL__sub_I_ptrEvaFanClass>:
}
   1196c:	b510      	push	{r4, lr}
   1196e:	4c05      	ldr	r4, [pc, #20]	; (11984 <_GLOBAL__sub_I_ptrEvaFanClass+0x18>)
   11970:	4905      	ldr	r1, [pc, #20]	; (11988 <_GLOBAL__sub_I_ptrEvaFanClass+0x1c>)
   11972:	4620      	mov	r0, r4
   11974:	4b05      	ldr	r3, [pc, #20]	; (1198c <_GLOBAL__sub_I_ptrEvaFanClass+0x20>)
   11976:	4798      	blx	r3
   11978:	4a05      	ldr	r2, [pc, #20]	; (11990 <_GLOBAL__sub_I_ptrEvaFanClass+0x24>)
   1197a:	4906      	ldr	r1, [pc, #24]	; (11994 <_GLOBAL__sub_I_ptrEvaFanClass+0x28>)
   1197c:	4620      	mov	r0, r4
   1197e:	4b06      	ldr	r3, [pc, #24]	; (11998 <_GLOBAL__sub_I_ptrEvaFanClass+0x2c>)
   11980:	4798      	blx	r3
   11982:	bd10      	pop	{r4, pc}
   11984:	20003838 	.word	0x20003838
   11988:	2000e058 	.word	0x2000e058
   1198c:	0000fc6d 	.word	0x0000fc6d
   11990:	20000000 	.word	0x20000000
   11994:	0000fc89 	.word	0x0000fc89
   11998:	0001a611 	.word	0x0001a611

0001199c <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
   1199c:	4770      	bx	lr

0001199e <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
   1199e:	4770      	bx	lr

000119a0 <_ZN18Event_Logger_ClassD1Ev>:
	info_text=local_info_text;
	
} //Event_Logger_Class

// default destructor
Event_Logger_Class::~Event_Logger_Class()
   119a0:	b510      	push	{r4, lr}
   119a2:	4604      	mov	r4, r0
   119a4:	4b06      	ldr	r3, [pc, #24]	; (119c0 <_ZN18Event_Logger_ClassD1Ev+0x20>)
   119a6:	f840 3bb4 	str.w	r3, [r0], #180
   119aa:	4b06      	ldr	r3, [pc, #24]	; (119c4 <_ZN18Event_Logger_ClassD1Ev+0x24>)
   119ac:	4798      	blx	r3
   119ae:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   119b2:	4b05      	ldr	r3, [pc, #20]	; (119c8 <_ZN18Event_Logger_ClassD1Ev+0x28>)
   119b4:	4798      	blx	r3
   119b6:	4620      	mov	r0, r4
   119b8:	4b04      	ldr	r3, [pc, #16]	; (119cc <_ZN18Event_Logger_ClassD1Ev+0x2c>)
   119ba:	4798      	blx	r3
{
} //~Event_Logger_Class
   119bc:	4620      	mov	r0, r4
   119be:	bd10      	pop	{r4, pc}
   119c0:	0001b5ec 	.word	0x0001b5ec
   119c4:	00011fa1 	.word	0x00011fa1
   119c8:	00011f07 	.word	0x00011f07
   119cc:	00019ef5 	.word	0x00019ef5

000119d0 <_ZN18Event_Logger_ClassC1Ev>:
Event_Logger_Class::Event_Logger_Class()
   119d0:	b510      	push	{r4, lr}
   119d2:	4604      	mov	r4, r0
   119d4:	4b11      	ldr	r3, [pc, #68]	; (11a1c <_ZN18Event_Logger_ClassC1Ev+0x4c>)
   119d6:	4798      	blx	r3
   119d8:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   119dc:	4b10      	ldr	r3, [pc, #64]	; (11a20 <_ZN18Event_Logger_ClassC1Ev+0x50>)
   119de:	4798      	blx	r3
   119e0:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   119e4:	4b0f      	ldr	r3, [pc, #60]	; (11a24 <_ZN18Event_Logger_ClassC1Ev+0x54>)
   119e6:	4798      	blx	r3
   119e8:	4b0f      	ldr	r3, [pc, #60]	; (11a28 <_ZN18Event_Logger_ClassC1Ev+0x58>)
   119ea:	6023      	str	r3, [r4, #0]
#ifndef __EVENT_LOGGER_STRUCT_H__
#define __EVENT_LOGGER_STRUCT_H__
#include "compiler.h"
#define  DESCRIPTION_LENGHT_TEXT	64-12-1
#define END__OF_ENTRY			0x0a
struct __attribute__((__packed__))  Event_Log_Entry
   119ec:	230a      	movs	r3, #10
   119ee:	f884 36fb 	strb.w	r3, [r4, #1787]	; 0x6fb
	cal=&staticClock;
   119f2:	4b0e      	ldr	r3, [pc, #56]	; (11a2c <_ZN18Event_Logger_ClassC1Ev+0x5c>)
   119f4:	f8c4 35f8 	str.w	r3, [r4, #1528]	; 0x5f8
	logger_text=(char*)text_buffer_local;
   119f8:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
   119fc:	f8c4 270c 	str.w	r2, [r4, #1804]	; 0x70c
	logger_module=(char*)module_buffer_local;
   11a00:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
   11a04:	f8c4 2710 	str.w	r2, [r4, #1808]	; 0x710
	logger_number=(char*)number_buffer_local;
   11a08:	f503 7388 	add.w	r3, r3, #272	; 0x110
   11a0c:	f8c4 3714 	str.w	r3, [r4, #1812]	; 0x714
	info_text=local_info_text;
   11a10:	4b07      	ldr	r3, [pc, #28]	; (11a30 <_ZN18Event_Logger_ClassC1Ev+0x60>)
   11a12:	f8c4 3718 	str.w	r3, [r4, #1816]	; 0x718
} //Event_Logger_Class
   11a16:	4620      	mov	r0, r4
   11a18:	bd10      	pop	{r4, pc}
   11a1a:	bf00      	nop
   11a1c:	00019e85 	.word	0x00019e85
   11a20:	00011f05 	.word	0x00011f05
   11a24:	00011f49 	.word	0x00011f49
   11a28:	0001b5ec 	.word	0x0001b5ec
   11a2c:	20003850 	.word	0x20003850
   11a30:	20000210 	.word	0x20000210

00011a34 <_ZN18Event_Logger_Class16MakeNullDateTimeEv>:
	SetStackValue(stackLocalArray);
	memset(event_buffer_arrray,0,QSPI_ERBLK);
}

void Event_Logger_Class::MakeNullDateTime(void){
	nullDateTime.date.year  = 0x0;
   11a34:	2300      	movs	r3, #0
   11a36:	f8a0 3612 	strh.w	r3, [r0, #1554]	; 0x612
	nullDateTime.date.month = 0x0;
   11a3a:	f880 3611 	strb.w	r3, [r0, #1553]	; 0x611
	nullDateTime.date.day   = 0x0;
   11a3e:	f880 3610 	strb.w	r3, [r0, #1552]	; 0x610

	nullDateTime.time.hour = 0x0;
   11a42:	f880 360e 	strb.w	r3, [r0, #1550]	; 0x60e
	nullDateTime.time.min  = 0x0;
   11a46:	f880 360d 	strb.w	r3, [r0, #1549]	; 0x60d
	nullDateTime.time.sec  = 0x0;
   11a4a:	f880 360c 	strb.w	r3, [r0, #1548]	; 0x60c
   11a4e:	4770      	bx	lr

00011a50 <_ZN18Event_Logger_Class4InitEv>:
bool Event_Logger_Class::Init(void){
   11a50:	b538      	push	{r3, r4, r5, lr}
   11a52:	4604      	mov	r4, r0
	MakeNullDateTime();
   11a54:	4b0c      	ldr	r3, [pc, #48]	; (11a88 <_ZN18Event_Logger_Class4InitEv+0x38>)
   11a56:	4798      	blx	r3
	cal->Init(nullDateTime);
   11a58:	f204 630c 	addw	r3, r4, #1548	; 0x60c
   11a5c:	e893 0006 	ldmia.w	r3, {r1, r2}
   11a60:	f8d4 05f8 	ldr.w	r0, [r4, #1528]	; 0x5f8
   11a64:	4b09      	ldr	r3, [pc, #36]	; (11a8c <_ZN18Event_Logger_Class4InitEv+0x3c>)
   11a66:	4798      	blx	r3
	stackLocalArray=0;
   11a68:	2500      	movs	r5, #0
   11a6a:	f8c4 5700 	str.w	r5, [r4, #1792]	; 0x700
	SetStackValue(stackLocalArray);
   11a6e:	4629      	mov	r1, r5
   11a70:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   11a74:	4b06      	ldr	r3, [pc, #24]	; (11a90 <_ZN18Event_Logger_Class4InitEv+0x40>)
   11a76:	4798      	blx	r3
	memset(event_buffer_arrray,0,QSPI_ERBLK);
   11a78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   11a7c:	4629      	mov	r1, r5
   11a7e:	f8d4 05f0 	ldr.w	r0, [r4, #1520]	; 0x5f0
   11a82:	4b04      	ldr	r3, [pc, #16]	; (11a94 <_ZN18Event_Logger_Class4InitEv+0x44>)
   11a84:	4798      	blx	r3
}
   11a86:	bd38      	pop	{r3, r4, r5, pc}
   11a88:	00011a35 	.word	0x00011a35
   11a8c:	00019f1d 	.word	0x00019f1d
   11a90:	00011fb1 	.word	0x00011fb1
   11a94:	0001acc5 	.word	0x0001acc5

00011a98 <_ZN18Event_Logger_Class9SaveEventEPh>:
}

void Event_Logger_Class::SaveEvent(uint8_t* text){
   11a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a9c:	4604      	mov	r4, r0
   11a9e:	460d      	mov	r5, r1
	
	cal->GetDateTime(&currentDateTime);
   11aa0:	f8d0 05f8 	ldr.w	r0, [r0, #1528]	; 0x5f8
   11aa4:	f204 6604 	addw	r6, r4, #1540	; 0x604
   11aa8:	6803      	ldr	r3, [r0, #0]
   11aaa:	681b      	ldr	r3, [r3, #0]
   11aac:	4631      	mov	r1, r6
   11aae:	4798      	blx	r3
	
	memcpy(&entry.code,info_text,8);
   11ab0:	f504 67d8 	add.w	r7, r4, #1728	; 0x6c0
   11ab4:	f8d4 3718 	ldr.w	r3, [r4, #1816]	; 0x718
   11ab8:	681a      	ldr	r2, [r3, #0]
   11aba:	685b      	ldr	r3, [r3, #4]
   11abc:	f8c4 26c0 	str.w	r2, [r4, #1728]	; 0x6c0
   11ac0:	607b      	str	r3, [r7, #4]
	semiColonPosition=FindSemiColon(text);
   11ac2:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
   11ac6:	4629      	mov	r1, r5
   11ac8:	4640      	mov	r0, r8
   11aca:	4b32      	ldr	r3, [pc, #200]	; (11b94 <_ZN18Event_Logger_Class9SaveEventEPh+0xfc>)
   11acc:	4798      	blx	r3
   11ace:	f884 06fc 	strb.w	r0, [r4, #1788]	; 0x6fc
	if (semiColonPosition>0)
   11ad2:	b130      	cbz	r0, 11ae2 <_ZN18Event_Logger_Class9SaveEventEPh+0x4a>
	{
		if (semiColonPosition<8)
   11ad4:	2807      	cmp	r0, #7
   11ad6:	dc2d      	bgt.n	11b34 <_ZN18Event_Logger_Class9SaveEventEPh+0x9c>
		{
				memcpy(&entry.code,text,(uint32_t)semiColonPosition);
   11ad8:	4602      	mov	r2, r0
   11ada:	4629      	mov	r1, r5
   11adc:	4638      	mov	r0, r7
   11ade:	4b2e      	ldr	r3, [pc, #184]	; (11b98 <_ZN18Event_Logger_Class9SaveEventEPh+0x100>)
   11ae0:	4798      	blx	r3
		

	

	
	text_length=(uint8_t)strlen((char*)text);
   11ae2:	4628      	mov	r0, r5
   11ae4:	4b2d      	ldr	r3, [pc, #180]	; (11b9c <_ZN18Event_Logger_Class9SaveEventEPh+0x104>)
   11ae6:	4798      	blx	r3
   11ae8:	f884 071c 	strb.w	r0, [r4, #1820]	; 0x71c
   11aec:	b2c2      	uxtb	r2, r0
	if (text_length>DESCRIPTION_LENGHT_TEXT)
   11aee:	2a33      	cmp	r2, #51	; 0x33
   11af0:	dd26      	ble.n	11b40 <_ZN18Event_Logger_Class9SaveEventEPh+0xa8>
	{
		ChopStringDescription(text);
   11af2:	4629      	mov	r1, r5
   11af4:	4640      	mov	r0, r8
   11af6:	4b2a      	ldr	r3, [pc, #168]	; (11ba0 <_ZN18Event_Logger_Class9SaveEventEPh+0x108>)
   11af8:	4798      	blx	r3
		memcpy(&entry.description,&text[semiColonPosition],DESCRIPTION_LENGHT_TEXT);
   11afa:	f894 16fc 	ldrb.w	r1, [r4, #1788]	; 0x6fc
   11afe:	4429      	add	r1, r5
   11b00:	f504 63d9 	add.w	r3, r4, #1736	; 0x6c8
   11b04:	f101 0230 	add.w	r2, r1, #48	; 0x30
   11b08:	f8d1 e000 	ldr.w	lr, [r1]
   11b0c:	684f      	ldr	r7, [r1, #4]
   11b0e:	688d      	ldr	r5, [r1, #8]
   11b10:	68c8      	ldr	r0, [r1, #12]
   11b12:	f8c3 e000 	str.w	lr, [r3]
   11b16:	605f      	str	r7, [r3, #4]
   11b18:	609d      	str	r5, [r3, #8]
   11b1a:	60d8      	str	r0, [r3, #12]
   11b1c:	3110      	adds	r1, #16
   11b1e:	3310      	adds	r3, #16
   11b20:	4291      	cmp	r1, r2
   11b22:	d1f1      	bne.n	11b08 <_ZN18Event_Logger_Class9SaveEventEPh+0x70>
   11b24:	8808      	ldrh	r0, [r1, #0]
   11b26:	788a      	ldrb	r2, [r1, #2]
   11b28:	8018      	strh	r0, [r3, #0]
   11b2a:	709a      	strb	r2, [r3, #2]
		text_length=DESCRIPTION_LENGHT_TEXT;
   11b2c:	2333      	movs	r3, #51	; 0x33
   11b2e:	f884 371c 	strb.w	r3, [r4, #1820]	; 0x71c
   11b32:	e012      	b.n	11b5a <_ZN18Event_Logger_Class9SaveEventEPh+0xc2>
				memcpy(&entry.code,text,8);
   11b34:	682a      	ldr	r2, [r5, #0]
   11b36:	686b      	ldr	r3, [r5, #4]
   11b38:	f8c4 26c0 	str.w	r2, [r4, #1728]	; 0x6c0
   11b3c:	607b      	str	r3, [r7, #4]
   11b3e:	e7d0      	b.n	11ae2 <_ZN18Event_Logger_Class9SaveEventEPh+0x4a>
	} 
	else
	{
		memcpy(&entry.description,&text[semiColonPosition],(uint32_t)text_length);
   11b40:	f894 16fc 	ldrb.w	r1, [r4, #1788]	; 0x6fc
   11b44:	4429      	add	r1, r5
   11b46:	f504 60d9 	add.w	r0, r4, #1736	; 0x6c8
   11b4a:	4b13      	ldr	r3, [pc, #76]	; (11b98 <_ZN18Event_Logger_Class9SaveEventEPh+0x100>)
   11b4c:	4798      	blx	r3
		entry.description[text_length]=END__OF_ENTRY;
   11b4e:	f894 371c 	ldrb.w	r3, [r4, #1820]	; 0x71c
   11b52:	4423      	add	r3, r4
   11b54:	220a      	movs	r2, #10
   11b56:	f883 26c8 	strb.w	r2, [r3, #1736]	; 0x6c8
	}
	
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
   11b5a:	f8d4 05f8 	ldr.w	r0, [r4, #1528]	; 0x5f8
   11b5e:	6803      	ldr	r3, [r0, #0]
   11b60:	685b      	ldr	r3, [r3, #4]
   11b62:	4631      	mov	r1, r6
   11b64:	4798      	blx	r3
   11b66:	f8c4 0704 	str.w	r0, [r4, #1796]	; 0x704
	if (currentTimestamp>0)
   11b6a:	b978      	cbnz	r0, 11b8c <_ZN18Event_Logger_Class9SaveEventEPh+0xf4>
	{
		entry.timestamp=currentTimestamp;
	} 
	else
	{
		entry.timestamp=0xffffffff;
   11b6c:	f04f 33ff 	mov.w	r3, #4294967295
   11b70:	f8c4 36bc 	str.w	r3, [r4, #1724]	; 0x6bc
	}
	
	StackEventEntry(&entry,text_length+1);
   11b74:	f894 271c 	ldrb.w	r2, [r4, #1820]	; 0x71c
   11b78:	3201      	adds	r2, #1
   11b7a:	b2d2      	uxtb	r2, r2
   11b7c:	f204 61bc 	addw	r1, r4, #1724	; 0x6bc
   11b80:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   11b84:	4b07      	ldr	r3, [pc, #28]	; (11ba4 <_ZN18Event_Logger_Class9SaveEventEPh+0x10c>)
   11b86:	4798      	blx	r3
   11b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		entry.timestamp=currentTimestamp;
   11b8c:	f8c4 06bc 	str.w	r0, [r4, #1724]	; 0x6bc
   11b90:	e7f0      	b.n	11b74 <_ZN18Event_Logger_Class9SaveEventEPh+0xdc>
   11b92:	bf00      	nop
   11b94:	00011f29 	.word	0x00011f29
   11b98:	0001ab91 	.word	0x0001ab91
   11b9c:	0001aec1 	.word	0x0001aec1
   11ba0:	00011f09 	.word	0x00011f09
   11ba4:	00011fd9 	.word	0x00011fd9

00011ba8 <_ZN18Event_Logger_Class16SaveInstationLogEv>:
	

}

void Event_Logger_Class::SaveInstationLog(void){
   11ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11bac:	b086      	sub	sp, #24
   11bae:	4604      	mov	r4, r0
	
	uint8_t text[]="Initialization Finished";
   11bb0:	466d      	mov	r5, sp
   11bb2:	4e30      	ldr	r6, [pc, #192]	; (11c74 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xcc>)
   11bb4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   11bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11bb8:	e896 0003 	ldmia.w	r6, {r0, r1}
   11bbc:	e885 0003 	stmia.w	r5, {r0, r1}
	
	cal->GetDateTime(&currentDateTime);
   11bc0:	f8d4 05f8 	ldr.w	r0, [r4, #1528]	; 0x5f8
   11bc4:	f204 6804 	addw	r8, r4, #1540	; 0x604
   11bc8:	6803      	ldr	r3, [r0, #0]
   11bca:	681b      	ldr	r3, [r3, #0]
   11bcc:	4641      	mov	r1, r8
   11bce:	4798      	blx	r3
	
	memcpy(&entry.code,info_text,8);
   11bd0:	f8d4 3718 	ldr.w	r3, [r4, #1816]	; 0x718
   11bd4:	681a      	ldr	r2, [r3, #0]
   11bd6:	685b      	ldr	r3, [r3, #4]
   11bd8:	f8c4 26c0 	str.w	r2, [r4, #1728]	; 0x6c0
   11bdc:	f8c4 36c4 	str.w	r3, [r4, #1732]	; 0x6c4

	text_length=(uint8_t)strlen((char*)text);
   11be0:	4668      	mov	r0, sp
   11be2:	4b25      	ldr	r3, [pc, #148]	; (11c78 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xd0>)
   11be4:	4798      	blx	r3
   11be6:	f884 071c 	strb.w	r0, [r4, #1820]	; 0x71c
   11bea:	b2c2      	uxtb	r2, r0
	if (text_length>DESCRIPTION_LENGHT_TEXT)
   11bec:	2a33      	cmp	r2, #51	; 0x33
   11bee:	dd1b      	ble.n	11c28 <_ZN18Event_Logger_Class16SaveInstationLogEv+0x80>
	{
		ChopStringDescription(text);
   11bf0:	4669      	mov	r1, sp
   11bf2:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   11bf6:	4b21      	ldr	r3, [pc, #132]	; (11c7c <_ZN18Event_Logger_Class16SaveInstationLogEv+0xd4>)
   11bf8:	4798      	blx	r3
		memcpy(&entry.description,text,DESCRIPTION_LENGHT_TEXT);
   11bfa:	466d      	mov	r5, sp
   11bfc:	f504 66d9 	add.w	r6, r4, #1736	; 0x6c8
   11c00:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
   11c04:	462f      	mov	r7, r5
   11c06:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   11c08:	6030      	str	r0, [r6, #0]
   11c0a:	6071      	str	r1, [r6, #4]
   11c0c:	60b2      	str	r2, [r6, #8]
   11c0e:	60f3      	str	r3, [r6, #12]
   11c10:	463d      	mov	r5, r7
   11c12:	3610      	adds	r6, #16
   11c14:	4577      	cmp	r7, lr
   11c16:	d1f5      	bne.n	11c04 <_ZN18Event_Logger_Class16SaveInstationLogEv+0x5c>
   11c18:	883a      	ldrh	r2, [r7, #0]
   11c1a:	78bb      	ldrb	r3, [r7, #2]
   11c1c:	8032      	strh	r2, [r6, #0]
   11c1e:	70b3      	strb	r3, [r6, #2]
		text_length=DESCRIPTION_LENGHT_TEXT;
   11c20:	2333      	movs	r3, #51	; 0x33
   11c22:	f884 371c 	strb.w	r3, [r4, #1820]	; 0x71c
   11c26:	e00a      	b.n	11c3e <_ZN18Event_Logger_Class16SaveInstationLogEv+0x96>
	}
	else
	{
		memcpy(&entry.description,text,(uint32_t)text_length);
   11c28:	4669      	mov	r1, sp
   11c2a:	f504 60d9 	add.w	r0, r4, #1736	; 0x6c8
   11c2e:	4b14      	ldr	r3, [pc, #80]	; (11c80 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xd8>)
   11c30:	4798      	blx	r3
		entry.description[text_length]=END__OF_ENTRY;
   11c32:	f894 371c 	ldrb.w	r3, [r4, #1820]	; 0x71c
   11c36:	4423      	add	r3, r4
   11c38:	220a      	movs	r2, #10
   11c3a:	f883 26c8 	strb.w	r2, [r3, #1736]	; 0x6c8
	}
	
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
   11c3e:	f8d4 05f8 	ldr.w	r0, [r4, #1528]	; 0x5f8
   11c42:	6803      	ldr	r3, [r0, #0]
   11c44:	685b      	ldr	r3, [r3, #4]
   11c46:	4641      	mov	r1, r8
   11c48:	4798      	blx	r3
   11c4a:	f8c4 0704 	str.w	r0, [r4, #1796]	; 0x704
	if (currentTimestamp>0)
   11c4e:	b968      	cbnz	r0, 11c6c <_ZN18Event_Logger_Class16SaveInstationLogEv+0xc4>
	{
		entry.timestamp=currentTimestamp;
	}
	else
	{
		entry.timestamp=0xffffffff;
   11c50:	f04f 33ff 	mov.w	r3, #4294967295
   11c54:	f8c4 36bc 	str.w	r3, [r4, #1724]	; 0x6bc
	}
	
	StackEventEntry(&entry,0xff);
   11c58:	22ff      	movs	r2, #255	; 0xff
   11c5a:	f204 61bc 	addw	r1, r4, #1724	; 0x6bc
   11c5e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   11c62:	4b08      	ldr	r3, [pc, #32]	; (11c84 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xdc>)
   11c64:	4798      	blx	r3
	

}
   11c66:	b006      	add	sp, #24
   11c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		entry.timestamp=currentTimestamp;
   11c6c:	f8c4 06bc 	str.w	r0, [r4, #1724]	; 0x6bc
   11c70:	e7f2      	b.n	11c58 <_ZN18Event_Logger_Class16SaveInstationLogEv+0xb0>
   11c72:	bf00      	nop
   11c74:	0001b5f4 	.word	0x0001b5f4
   11c78:	0001aec1 	.word	0x0001aec1
   11c7c:	00011f09 	.word	0x00011f09
   11c80:	0001ab91 	.word	0x0001ab91
   11c84:	00011fd9 	.word	0x00011fd9

00011c88 <_ZN18Event_Logger_Class19GetCurrentTimeStampEv>:

uint32_t Event_Logger_Class::GetCurrentTimeStamp(void){
   11c88:	b538      	push	{r3, r4, r5, lr}
   11c8a:	4604      	mov	r4, r0
	cal->GetDateTime(&currentDateTime);
   11c8c:	f8d0 05f8 	ldr.w	r0, [r0, #1528]	; 0x5f8
   11c90:	f204 6504 	addw	r5, r4, #1540	; 0x604
   11c94:	6803      	ldr	r3, [r0, #0]
   11c96:	681b      	ldr	r3, [r3, #0]
   11c98:	4629      	mov	r1, r5
   11c9a:	4798      	blx	r3
	currentTimestamp= cal->convert_datetime_to_timestamp(&currentDateTime);
   11c9c:	f8d4 05f8 	ldr.w	r0, [r4, #1528]	; 0x5f8
   11ca0:	6803      	ldr	r3, [r0, #0]
   11ca2:	685b      	ldr	r3, [r3, #4]
   11ca4:	4629      	mov	r1, r5
   11ca6:	4798      	blx	r3
   11ca8:	f8c4 0704 	str.w	r0, [r4, #1796]	; 0x704
	return currentTimestamp;
}
   11cac:	bd38      	pop	{r3, r4, r5, pc}
	...

00011cb0 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh>:

void Event_Logger_Class::SaveEventIndexResult(char *text,uint8_t index, uint8_t result){
   11cb0:	b570      	push	{r4, r5, r6, lr}
   11cb2:	4604      	mov	r4, r0
   11cb4:	460d      	mov	r5, r1
   11cb6:	4610      	mov	r0, r2
	task_result	=(TaskResult)result;
   11cb8:	f884 3708 	strb.w	r3, [r4, #1800]	; 0x708

	itoa(index,logger_number,10);
   11cbc:	220a      	movs	r2, #10
   11cbe:	f8d4 1714 	ldr.w	r1, [r4, #1812]	; 0x714
   11cc2:	4b20      	ldr	r3, [pc, #128]	; (11d44 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x94>)
   11cc4:	4798      	blx	r3
	strcpy(logger_text,text);
   11cc6:	4629      	mov	r1, r5
   11cc8:	f8d4 070c 	ldr.w	r0, [r4, #1804]	; 0x70c
   11ccc:	4b1e      	ldr	r3, [pc, #120]	; (11d48 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x98>)
   11cce:	4798      	blx	r3
	logger_module=strcat(logger_text,logger_number);
   11cd0:	f8d4 1714 	ldr.w	r1, [r4, #1812]	; 0x714
   11cd4:	f8d4 070c 	ldr.w	r0, [r4, #1804]	; 0x70c
   11cd8:	4b1c      	ldr	r3, [pc, #112]	; (11d4c <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x9c>)
   11cda:	4798      	blx	r3
   11cdc:	4605      	mov	r5, r0
   11cde:	f8c4 0710 	str.w	r0, [r4, #1808]	; 0x710
	switch (task_result)
   11ce2:	f894 3708 	ldrb.w	r3, [r4, #1800]	; 0x708
   11ce6:	b173      	cbz	r3, 11d06 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x56>
   11ce8:	2b01      	cmp	r3, #1
   11cea:	d01e      	beq.n	11d2a <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x7a>
		case FAILLED :
			logger_module=strcat(logger_module," FAILLED");
		
		break;
		default:
			logger_module=strcat(logger_module," UNKNOWN");
   11cec:	4b18      	ldr	r3, [pc, #96]	; (11d50 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa0>)
   11cee:	4798      	blx	r3
   11cf0:	4606      	mov	r6, r0
   11cf2:	182a      	adds	r2, r5, r0
   11cf4:	4b17      	ldr	r3, [pc, #92]	; (11d54 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa4>)
   11cf6:	cb03      	ldmia	r3!, {r0, r1}
   11cf8:	51a8      	str	r0, [r5, r6]
   11cfa:	6051      	str	r1, [r2, #4]
   11cfc:	781b      	ldrb	r3, [r3, #0]
   11cfe:	7213      	strb	r3, [r2, #8]
   11d00:	f8c4 5710 	str.w	r5, [r4, #1808]	; 0x710
		/* Your code here */
		break;
   11d04:	e00b      	b.n	11d1e <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x6e>
			logger_module=strcat(logger_module," SUCCESS");
   11d06:	4b12      	ldr	r3, [pc, #72]	; (11d50 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa0>)
   11d08:	4798      	blx	r3
   11d0a:	4606      	mov	r6, r0
   11d0c:	182a      	adds	r2, r5, r0
   11d0e:	4b12      	ldr	r3, [pc, #72]	; (11d58 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa8>)
   11d10:	cb03      	ldmia	r3!, {r0, r1}
   11d12:	51a8      	str	r0, [r5, r6]
   11d14:	6051      	str	r1, [r2, #4]
   11d16:	781b      	ldrb	r3, [r3, #0]
   11d18:	7213      	strb	r3, [r2, #8]
   11d1a:	f8c4 5710 	str.w	r5, [r4, #1808]	; 0x710
	SaveEventIndexResult(text,index,(uint8_t)(!rb));
}

void Event_Logger_Class::SaveEvent(char const * text){
	
	SaveEvent((uint8_t*)text);
   11d1e:	f8d4 1710 	ldr.w	r1, [r4, #1808]	; 0x710
   11d22:	4620      	mov	r0, r4
   11d24:	4b0d      	ldr	r3, [pc, #52]	; (11d5c <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xac>)
   11d26:	4798      	blx	r3
   11d28:	bd70      	pop	{r4, r5, r6, pc}
			logger_module=strcat(logger_module," FAILLED");
   11d2a:	4b09      	ldr	r3, [pc, #36]	; (11d50 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xa0>)
   11d2c:	4798      	blx	r3
   11d2e:	4606      	mov	r6, r0
   11d30:	182a      	adds	r2, r5, r0
   11d32:	4b0b      	ldr	r3, [pc, #44]	; (11d60 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0xb0>)
   11d34:	cb03      	ldmia	r3!, {r0, r1}
   11d36:	51a8      	str	r0, [r5, r6]
   11d38:	6051      	str	r1, [r2, #4]
   11d3a:	781b      	ldrb	r3, [r3, #0]
   11d3c:	7213      	strb	r3, [r2, #8]
   11d3e:	f8c4 5710 	str.w	r5, [r4, #1808]	; 0x710
		break;
   11d42:	e7ec      	b.n	11d1e <_ZN18Event_Logger_Class20SaveEventIndexResultEPchh+0x6e>
   11d44:	00018509 	.word	0x00018509
   11d48:	0001ade1 	.word	0x0001ade1
   11d4c:	0001ada1 	.word	0x0001ada1
   11d50:	0001aec1 	.word	0x0001aec1
   11d54:	0001b624 	.word	0x0001b624
   11d58:	0001b60c 	.word	0x0001b60c
   11d5c:	00011a99 	.word	0x00011a99
   11d60:	0001b618 	.word	0x0001b618

00011d64 <_ZN18Event_Logger_Class18SaveEventGPIOValueEPcPhh>:
void Event_Logger_Class::SaveEventGPIOValue(char *text,uint8_t *gpio_array,uint8_t size){
   11d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11d68:	4605      	mov	r5, r0
   11d6a:	468a      	mov	sl, r1
   11d6c:	4617      	mov	r7, r2
	logger_number="0x12345678";
   11d6e:	4a15      	ldr	r2, [pc, #84]	; (11dc4 <_ZN18Event_Logger_Class18SaveEventGPIOValueEPcPhh+0x60>)
   11d70:	f8c0 2714 	str.w	r2, [r0, #1812]	; 0x714
	for (uint8_t i = 0; i < size; i++)
   11d74:	b19b      	cbz	r3, 11d9e <_ZN18Event_Logger_Class18SaveEventGPIOValueEPcPhh+0x3a>
   11d76:	461e      	mov	r6, r3
   11d78:	2100      	movs	r1, #0
   11d7a:	460c      	mov	r4, r1
		utoa(gpio_array[i],&logger_number[2*(i+1)],16);
   11d7c:	f04f 0910 	mov.w	r9, #16
   11d80:	f8df 8050 	ldr.w	r8, [pc, #80]	; 11dd4 <_ZN18Event_Logger_Class18SaveEventGPIOValueEPcPhh+0x70>
   11d84:	3101      	adds	r1, #1
   11d86:	f8d5 3714 	ldr.w	r3, [r5, #1812]	; 0x714
   11d8a:	464a      	mov	r2, r9
   11d8c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   11d90:	5d38      	ldrb	r0, [r7, r4]
   11d92:	47c0      	blx	r8
	for (uint8_t i = 0; i < size; i++)
   11d94:	3401      	adds	r4, #1
   11d96:	b2e4      	uxtb	r4, r4
   11d98:	4621      	mov	r1, r4
   11d9a:	42b4      	cmp	r4, r6
   11d9c:	dbf2      	blt.n	11d84 <_ZN18Event_Logger_Class18SaveEventGPIOValueEPcPhh+0x20>
	strcpy(logger_text,text);
   11d9e:	4651      	mov	r1, sl
   11da0:	f8d5 070c 	ldr.w	r0, [r5, #1804]	; 0x70c
   11da4:	4b08      	ldr	r3, [pc, #32]	; (11dc8 <_ZN18Event_Logger_Class18SaveEventGPIOValueEPcPhh+0x64>)
   11da6:	4798      	blx	r3
	logger_module=strcat(logger_text,logger_number);
   11da8:	f8d5 1714 	ldr.w	r1, [r5, #1812]	; 0x714
   11dac:	f8d5 070c 	ldr.w	r0, [r5, #1804]	; 0x70c
   11db0:	4b06      	ldr	r3, [pc, #24]	; (11dcc <_ZN18Event_Logger_Class18SaveEventGPIOValueEPcPhh+0x68>)
   11db2:	4798      	blx	r3
   11db4:	4601      	mov	r1, r0
   11db6:	f8c5 0710 	str.w	r0, [r5, #1808]	; 0x710
	SaveEvent((uint8_t*)text);
   11dba:	4628      	mov	r0, r5
   11dbc:	4b04      	ldr	r3, [pc, #16]	; (11dd0 <_ZN18Event_Logger_Class18SaveEventGPIOValueEPcPhh+0x6c>)
   11dbe:	4798      	blx	r3
   11dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11dc4:	0001b648 	.word	0x0001b648
   11dc8:	0001ade1 	.word	0x0001ade1
   11dcc:	0001ada1 	.word	0x0001ada1
   11dd0:	00011a99 	.word	0x00011a99
   11dd4:	00018619 	.word	0x00018619

00011dd8 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchb>:
void Event_Logger_Class::SaveEventIndexResult(char *text,uint8_t index, bool rb){
   11dd8:	b510      	push	{r4, lr}
	SaveEventIndexResult(text,index,(uint8_t)(!rb));
   11dda:	f083 0301 	eor.w	r3, r3, #1
   11dde:	4c01      	ldr	r4, [pc, #4]	; (11de4 <_ZN18Event_Logger_Class20SaveEventIndexResultEPchb+0xc>)
   11de0:	47a0      	blx	r4
   11de2:	bd10      	pop	{r4, pc}
   11de4:	00011cb1 	.word	0x00011cb1

00011de8 <_ZN18Event_Logger_Class9SaveEventEPKc>:
void Event_Logger_Class::SaveEvent(char const * text){
   11de8:	b508      	push	{r3, lr}
	SaveEvent((uint8_t*)text);
   11dea:	4b01      	ldr	r3, [pc, #4]	; (11df0 <_ZN18Event_Logger_Class9SaveEventEPKc+0x8>)
   11dec:	4798      	blx	r3
   11dee:	bd08      	pop	{r3, pc}
   11df0:	00011a99 	.word	0x00011a99

00011df4 <_GLOBAL__sub_I_local_info_text>:
}

 Event_Logger_Class	logger;
   11df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   11df8:	4c30      	ldr	r4, [pc, #192]	; (11ebc <_GLOBAL__sub_I_local_info_text+0xc8>)
   11dfa:	f504 758c 	add.w	r5, r4, #280	; 0x118
   11dfe:	4930      	ldr	r1, [pc, #192]	; (11ec0 <_GLOBAL__sub_I_local_info_text+0xcc>)
   11e00:	4628      	mov	r0, r5
   11e02:	4f30      	ldr	r7, [pc, #192]	; (11ec4 <_GLOBAL__sub_I_local_info_text+0xd0>)
   11e04:	47b8      	blx	r7
   11e06:	4e30      	ldr	r6, [pc, #192]	; (11ec8 <_GLOBAL__sub_I_local_info_text+0xd4>)
   11e08:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 11f00 <_GLOBAL__sub_I_local_info_text+0x10c>
   11e0c:	4632      	mov	r2, r6
   11e0e:	4641      	mov	r1, r8
   11e10:	4628      	mov	r0, r5
   11e12:	4d2e      	ldr	r5, [pc, #184]	; (11ecc <_GLOBAL__sub_I_local_info_text+0xd8>)
   11e14:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   11e16:	f504 799c 	add.w	r9, r4, #312	; 0x138
   11e1a:	492d      	ldr	r1, [pc, #180]	; (11ed0 <_GLOBAL__sub_I_local_info_text+0xdc>)
   11e1c:	4648      	mov	r0, r9
   11e1e:	47b8      	blx	r7
   11e20:	4632      	mov	r2, r6
   11e22:	4641      	mov	r1, r8
   11e24:	4648      	mov	r0, r9
   11e26:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   11e28:	f504 79ac 	add.w	r9, r4, #344	; 0x158
   11e2c:	4929      	ldr	r1, [pc, #164]	; (11ed4 <_GLOBAL__sub_I_local_info_text+0xe0>)
   11e2e:	4648      	mov	r0, r9
   11e30:	47b8      	blx	r7
   11e32:	4632      	mov	r2, r6
   11e34:	4641      	mov	r1, r8
   11e36:	4648      	mov	r0, r9
   11e38:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   11e3a:	f504 79bc 	add.w	r9, r4, #376	; 0x178
   11e3e:	4926      	ldr	r1, [pc, #152]	; (11ed8 <_GLOBAL__sub_I_local_info_text+0xe4>)
   11e40:	4648      	mov	r0, r9
   11e42:	47b8      	blx	r7
   11e44:	4632      	mov	r2, r6
   11e46:	4641      	mov	r1, r8
   11e48:	4648      	mov	r0, r9
   11e4a:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   11e4c:	f504 79cc 	add.w	r9, r4, #408	; 0x198
   11e50:	4922      	ldr	r1, [pc, #136]	; (11edc <_GLOBAL__sub_I_local_info_text+0xe8>)
   11e52:	4648      	mov	r0, r9
   11e54:	47b8      	blx	r7
   11e56:	4632      	mov	r2, r6
   11e58:	4641      	mov	r1, r8
   11e5a:	4648      	mov	r0, r9
   11e5c:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   11e5e:	f504 79dc 	add.w	r9, r4, #440	; 0x1b8
   11e62:	491f      	ldr	r1, [pc, #124]	; (11ee0 <_GLOBAL__sub_I_local_info_text+0xec>)
   11e64:	4648      	mov	r0, r9
   11e66:	47b8      	blx	r7
   11e68:	4632      	mov	r2, r6
   11e6a:	4641      	mov	r1, r8
   11e6c:	4648      	mov	r0, r9
   11e6e:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   11e70:	f504 79ec 	add.w	r9, r4, #472	; 0x1d8
   11e74:	491b      	ldr	r1, [pc, #108]	; (11ee4 <_GLOBAL__sub_I_local_info_text+0xf0>)
   11e76:	4648      	mov	r0, r9
   11e78:	47b8      	blx	r7
   11e7a:	4632      	mov	r2, r6
   11e7c:	4641      	mov	r1, r8
   11e7e:	4648      	mov	r0, r9
   11e80:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   11e82:	f504 79fc 	add.w	r9, r4, #504	; 0x1f8
   11e86:	4918      	ldr	r1, [pc, #96]	; (11ee8 <_GLOBAL__sub_I_local_info_text+0xf4>)
   11e88:	4648      	mov	r0, r9
   11e8a:	47b8      	blx	r7
   11e8c:	4632      	mov	r2, r6
   11e8e:	4641      	mov	r1, r8
   11e90:	4648      	mov	r0, r9
   11e92:	47a8      	blx	r5
static Calendar_Class	staticClock(&DATETIME_CLOCK);
   11e94:	4915      	ldr	r1, [pc, #84]	; (11eec <_GLOBAL__sub_I_local_info_text+0xf8>)
   11e96:	4620      	mov	r0, r4
   11e98:	4b15      	ldr	r3, [pc, #84]	; (11ef0 <_GLOBAL__sub_I_local_info_text+0xfc>)
   11e9a:	4798      	blx	r3
   11e9c:	4632      	mov	r2, r6
   11e9e:	4915      	ldr	r1, [pc, #84]	; (11ef4 <_GLOBAL__sub_I_local_info_text+0x100>)
   11ea0:	4620      	mov	r0, r4
   11ea2:	47a8      	blx	r5
 Event_Logger_Class	logger;
   11ea4:	f504 7406 	add.w	r4, r4, #536	; 0x218
   11ea8:	4620      	mov	r0, r4
   11eaa:	4b13      	ldr	r3, [pc, #76]	; (11ef8 <_GLOBAL__sub_I_local_info_text+0x104>)
   11eac:	4798      	blx	r3
   11eae:	4632      	mov	r2, r6
   11eb0:	4912      	ldr	r1, [pc, #72]	; (11efc <_GLOBAL__sub_I_local_info_text+0x108>)
   11eb2:	4620      	mov	r0, r4
   11eb4:	47a8      	blx	r5
   11eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11eba:	bf00      	nop
   11ebc:	20003850 	.word	0x20003850
   11ec0:	2000df28 	.word	0x2000df28
   11ec4:	00010441 	.word	0x00010441
   11ec8:	20000000 	.word	0x20000000
   11ecc:	0001a611 	.word	0x0001a611
   11ed0:	2000dfbc 	.word	0x2000dfbc
   11ed4:	2000e0e0 	.word	0x2000e0e0
   11ed8:	2000dfdc 	.word	0x2000dfdc
   11edc:	2000e0a0 	.word	0x2000e0a0
   11ee0:	2000e0c0 	.word	0x2000e0c0
   11ee4:	2000df98 	.word	0x2000df98
   11ee8:	2000e038 	.word	0x2000e038
   11eec:	2000e100 	.word	0x2000e100
   11ef0:	00019eb9 	.word	0x00019eb9
   11ef4:	00019ef5 	.word	0x00019ef5
   11ef8:	000119d1 	.word	0x000119d1
   11efc:	000119a1 	.word	0x000119a1
   11f00:	00010479 	.word	0x00010479

00011f04 <_ZN19Event_Logger_StructC1Ev>:
#include "string.h"

// default constructor
Event_Logger_Struct::Event_Logger_Struct()
{
} //Event_Logger_Struct
   11f04:	4770      	bx	lr

00011f06 <_ZN19Event_Logger_StructD1Ev>:

// default destructor
Event_Logger_Struct::~Event_Logger_Struct()
{
} //~Event_Logger_Struct
   11f06:	4770      	bx	lr

00011f08 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh>:

void	Event_Logger_Struct::ChopStringDescription(uint8_t* str){
   11f08:	b538      	push	{r3, r4, r5, lr}
   11f0a:	4605      	mov	r5, r0
   11f0c:	460c      	mov	r4, r1
	//RemoveSpaces((char *)str);
	sizeText=strlen((char *)str);
   11f0e:	4608      	mov	r0, r1
   11f10:	4b04      	ldr	r3, [pc, #16]	; (11f24 <_ZN19Event_Logger_Struct21ChopStringDescriptionEPh+0x1c>)
   11f12:	4798      	blx	r3
   11f14:	7028      	strb	r0, [r5, #0]
	if (sizeText>44)
   11f16:	b2c0      	uxtb	r0, r0
   11f18:	282c      	cmp	r0, #44	; 0x2c
	{
		str[44]=END__OF_ENTRY;
   11f1a:	bfc4      	itt	gt
   11f1c:	230a      	movgt	r3, #10
   11f1e:	f884 302c 	strbgt.w	r3, [r4, #44]	; 0x2c
   11f22:	bd38      	pop	{r3, r4, r5, pc}
   11f24:	0001aec1 	.word	0x0001aec1

00011f28 <_ZN19Event_Logger_Struct13FindSemiColonEPh>:
uint8_t Event_Logger_Struct::FindSemiColon(uint8_t *str)
{
	
	// Traverse the given string. If current character
	// is not space, then place it at index 'count++'
	for (uint8_t i = 0; str[i]; i++){
   11f28:	7808      	ldrb	r0, [r1, #0]
   11f2a:	b148      	cbz	r0, 11f40 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x18>
		if (str[i] == ':'){
   11f2c:	283a      	cmp	r0, #58	; 0x3a
   11f2e:	d009      	beq.n	11f44 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1c>
   11f30:	2300      	movs	r3, #0
	for (uint8_t i = 0; str[i]; i++){
   11f32:	3301      	adds	r3, #1
   11f34:	b2db      	uxtb	r3, r3
   11f36:	5cc8      	ldrb	r0, [r1, r3]
   11f38:	b118      	cbz	r0, 11f42 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0x1a>
		if (str[i] == ':'){
   11f3a:	283a      	cmp	r0, #58	; 0x3a
   11f3c:	d1f9      	bne.n	11f32 <_ZN19Event_Logger_Struct13FindSemiColonEPh+0xa>
	for (uint8_t i = 0; str[i]; i++){
   11f3e:	4618      	mov	r0, r3
			return i;
		}
	}
	
	return 0;
}
   11f40:	4770      	bx	lr
   11f42:	4770      	bx	lr
	for (uint8_t i = 0; str[i]; i++){
   11f44:	2000      	movs	r0, #0
   11f46:	4770      	bx	lr

00011f48 <_ZN15DataLoger_ClassC1Ev>:

static uint8_t staticEventLogs[QSPI_ERBLK];
static uint32_t local_memory_event_stack;

// default constructor
DataLoger_Class::DataLoger_Class()
   11f48:	b510      	push	{r4, lr}
   11f4a:	4604      	mov	r4, r0
   11f4c:	4b0f      	ldr	r3, [pc, #60]	; (11f8c <_ZN15DataLoger_ClassC1Ev+0x44>)
   11f4e:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   11f50:	f44f 7200 	mov.w	r2, #512	; 0x200
   11f54:	2100      	movs	r1, #0
   11f56:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
   11f5a:	4b0d      	ldr	r3, [pc, #52]	; (11f90 <_ZN15DataLoger_ClassC1Ev+0x48>)
   11f5c:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   11f5e:	2300      	movs	r3, #0
   11f60:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
  _iTail = 0;
   11f64:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
   11f68:	230a      	movs	r3, #10
   11f6a:	f884 3533 	strb.w	r3, [r4, #1331]	; 0x533
{
	stackPointer=&staticEventLogs[0];
   11f6e:	4a09      	ldr	r2, [pc, #36]	; (11f94 <_ZN15DataLoger_ClassC1Ev+0x4c>)
   11f70:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
	logger.memory_event_stack=&local_memory_event_stack;
   11f74:	4b08      	ldr	r3, [pc, #32]	; (11f98 <_ZN15DataLoger_ClassC1Ev+0x50>)
   11f76:	4909      	ldr	r1, [pc, #36]	; (11f9c <_ZN15DataLoger_ClassC1Ev+0x54>)
   11f78:	f8c3 15ec 	str.w	r1, [r3, #1516]	; 0x5ec
	logger.event_buffer_arrray=staticEventLogs;
   11f7c:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	logger.event_buffer_arrray_stack=&stackValue;
   11f80:	f504 629e 	add.w	r2, r4, #1264	; 0x4f0
   11f84:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	
} //DataLoger_Class
   11f88:	4620      	mov	r0, r4
   11f8a:	bd10      	pop	{r4, pc}
   11f8c:	00019a39 	.word	0x00019a39
   11f90:	0001acc5 	.word	0x0001acc5
   11f94:	20004188 	.word	0x20004188
   11f98:	20003a68 	.word	0x20003a68
   11f9c:	20005188 	.word	0x20005188

00011fa0 <_ZN15DataLoger_ClassD1Ev>:

// default destructor
DataLoger_Class::~DataLoger_Class()
   11fa0:	b510      	push	{r4, lr}
   11fa2:	4604      	mov	r4, r0
   11fa4:	4b01      	ldr	r3, [pc, #4]	; (11fac <_ZN15DataLoger_ClassD1Ev+0xc>)
   11fa6:	4798      	blx	r3
{
} //~DataLoger_Class
   11fa8:	4620      	mov	r0, r4
   11faa:	bd10      	pop	{r4, pc}
   11fac:	00019a75 	.word	0x00019a75

00011fb0 <_ZN15DataLoger_Class13SetStackValueEm>:
	return 0;
}

void	DataLoger_Class::SetStackValue(uint32_t stk){
	
	if (stk==0)
   11fb0:	460b      	mov	r3, r1
   11fb2:	b911      	cbnz	r1, 11fba <_ZN15DataLoger_Class13SetStackValueEm+0xa>
	{
		stackPointer=&staticEventLogs[stk];
   11fb4:	4a02      	ldr	r2, [pc, #8]	; (11fc0 <_ZN15DataLoger_Class13SetStackValueEm+0x10>)
   11fb6:	f8c0 2534 	str.w	r2, [r0, #1332]	; 0x534
	} 
	else
	{
	}
	stackValue=stk;
   11fba:	f8c0 34f0 	str.w	r3, [r0, #1264]	; 0x4f0
   11fbe:	4770      	bx	lr
   11fc0:	20004188 	.word	0x20004188

00011fc4 <_ZN15DataLoger_Class11IsStackFullEv>:
	
	return stackValue;
}

bool	DataLoger_Class::IsStackFull(void){
	if (stackValue+(sizeof(Event_Log_Entry))>QSPI_ERBLK)
   11fc4:	f8d0 04f0 	ldr.w	r0, [r0, #1264]	; 0x4f0
   11fc8:	3040      	adds	r0, #64	; 0x40
	} 
	else
	{
		return false;
	}
   11fca:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   11fce:	bf94      	ite	ls
   11fd0:	2000      	movls	r0, #0
   11fd2:	2001      	movhi	r0, #1
   11fd4:	4770      	bx	lr
	...

00011fd8 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh>:
uint32_t DataLoger_Class::StackEventEntry(Event_Log_Entry *ent, uint8_t len){
   11fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11fda:	b087      	sub	sp, #28
   11fdc:	4604      	mov	r4, r0
   11fde:	460e      	mov	r6, r1
	if (len==0xff)
   11fe0:	2aff      	cmp	r2, #255	; 0xff
   11fe2:	d018      	beq.n	12016 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x3e>
   11fe4:	4615      	mov	r5, r2
		if (IsStackFull())
   11fe6:	4b29      	ldr	r3, [pc, #164]	; (1208c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb4>)
   11fe8:	4798      	blx	r3
   11fea:	2800      	cmp	r0, #0
   11fec:	d13b      	bne.n	12066 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x8e>
		memcpy(&stackPointer[stackValue],ent,12+len);
   11fee:	f8d4 0534 	ldr.w	r0, [r4, #1332]	; 0x534
   11ff2:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   11ff6:	f105 020c 	add.w	r2, r5, #12
   11ffa:	4631      	mov	r1, r6
   11ffc:	4418      	add	r0, r3
   11ffe:	4b24      	ldr	r3, [pc, #144]	; (12090 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb8>)
   12000:	4798      	blx	r3
		stackValue+=12+len;
   12002:	f8d4 24f0 	ldr.w	r2, [r4, #1264]	; 0x4f0
   12006:	320c      	adds	r2, #12
   12008:	442a      	add	r2, r5
   1200a:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
}
   1200e:	f8d4 04f0 	ldr.w	r0, [r4, #1264]	; 0x4f0
   12012:	b007      	add	sp, #28
   12014:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint8_t text[]="Initialization Finished";
   12016:	466d      	mov	r5, sp
   12018:	4f1e      	ldr	r7, [pc, #120]	; (12094 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xbc>)
   1201a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1201c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1201e:	e897 0003 	ldmia.w	r7, {r0, r1}
   12022:	e885 0003 	stmia.w	r5, {r0, r1}
		length=(uint8_t)strlen((char*)text);
   12026:	4668      	mov	r0, sp
   12028:	4b1b      	ldr	r3, [pc, #108]	; (12098 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc0>)
   1202a:	4798      	blx	r3
			memcpy(&stackPointer[stackValue],ent,12+length+1);
   1202c:	f8d4 5534 	ldr.w	r5, [r4, #1332]	; 0x534
   12030:	f8d4 34f0 	ldr.w	r3, [r4, #1264]	; 0x4f0
   12034:	b2c2      	uxtb	r2, r0
   12036:	320d      	adds	r2, #13
   12038:	4631      	mov	r1, r6
   1203a:	18e8      	adds	r0, r5, r3
   1203c:	4b14      	ldr	r3, [pc, #80]	; (12090 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xb8>)
   1203e:	4798      	blx	r3
			local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
   12040:	4d16      	ldr	r5, [pc, #88]	; (1209c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc4>)
   12042:	4629      	mov	r1, r5
   12044:	4816      	ldr	r0, [pc, #88]	; (120a0 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc8>)
   12046:	4b17      	ldr	r3, [pc, #92]	; (120a4 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xcc>)
   12048:	4798      	blx	r3
   1204a:	4b17      	ldr	r3, [pc, #92]	; (120a8 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd0>)
   1204c:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
   12050:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
	stackValue=stk;
   12054:	2100      	movs	r1, #0
   12056:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
			memset(staticEventLogs,0,QSPI_ERBLK);
   1205a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1205e:	4628      	mov	r0, r5
   12060:	4b12      	ldr	r3, [pc, #72]	; (120ac <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd4>)
   12062:	4798      	blx	r3
   12064:	e7d3      	b.n	1200e <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x36>
			local_memory_event_stack=memory.SaveEventLog(staticEventLogs);
   12066:	4f0d      	ldr	r7, [pc, #52]	; (1209c <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc4>)
   12068:	4639      	mov	r1, r7
   1206a:	480d      	ldr	r0, [pc, #52]	; (120a0 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xc8>)
   1206c:	4b0d      	ldr	r3, [pc, #52]	; (120a4 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xcc>)
   1206e:	4798      	blx	r3
   12070:	4b0d      	ldr	r3, [pc, #52]	; (120a8 <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd0>)
   12072:	f843 0cf8 	str.w	r0, [r3, #-248]
		stackPointer=&staticEventLogs[stk];
   12076:	f8c4 7534 	str.w	r7, [r4, #1332]	; 0x534
	stackValue=stk;
   1207a:	2100      	movs	r1, #0
   1207c:	f8c4 14f0 	str.w	r1, [r4, #1264]	; 0x4f0
			memset(staticEventLogs,0,QSPI_ERBLK);
   12080:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   12084:	4638      	mov	r0, r7
   12086:	4b09      	ldr	r3, [pc, #36]	; (120ac <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0xd4>)
   12088:	4798      	blx	r3
   1208a:	e7b0      	b.n	11fee <_ZN15DataLoger_Class15StackEventEntryEP15Event_Log_Entryh+0x16>
   1208c:	00011fc5 	.word	0x00011fc5
   12090:	0001ab91 	.word	0x0001ab91
   12094:	0001b5f4 	.word	0x0001b5f4
   12098:	0001aec1 	.word	0x0001aec1
   1209c:	20004188 	.word	0x20004188
   120a0:	20006ae8 	.word	0x20006ae8
   120a4:	00014611 	.word	0x00014611
   120a8:	20005280 	.word	0x20005280
   120ac:	0001acc5 	.word	0x0001acc5

000120b0 <_ZN29Dual_Flapper_Valve_ControllerD1Ev>:
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
{
} //Dual_Flapper_Valve_Controller

// default destructor
Dual_Flapper_Valve_Controller::~Dual_Flapper_Valve_Controller()
   120b0:	b510      	push	{r4, lr}
   120b2:	4604      	mov	r4, r0
   120b4:	4b01      	ldr	r3, [pc, #4]	; (120bc <_ZN29Dual_Flapper_Valve_ControllerD1Ev+0xc>)
   120b6:	4798      	blx	r3
{
} //~Dual_Flapper_Valve_Controller
   120b8:	4620      	mov	r0, r4
   120ba:	bd10      	pop	{r4, pc}
   120bc:	000125a9 	.word	0x000125a9

000120c0 <__tcf_0>:
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
   120c0:	b538      	push	{r3, r4, r5, lr}
   120c2:	4d04      	ldr	r5, [pc, #16]	; (120d4 <__tcf_0+0x14>)
   120c4:	f105 00dc 	add.w	r0, r5, #220	; 0xdc
   120c8:	4c03      	ldr	r4, [pc, #12]	; (120d8 <__tcf_0+0x18>)
   120ca:	47a0      	blx	r4
   120cc:	4628      	mov	r0, r5
   120ce:	47a0      	blx	r4
   120d0:	bd38      	pop	{r3, r4, r5, pc}
   120d2:	bf00      	nop
   120d4:	2000518c 	.word	0x2000518c
   120d8:	000125a9 	.word	0x000125a9

000120dc <_ZN29Dual_Flapper_Valve_Controller4InitEv>:

bool Dual_Flapper_Valve_Controller::Init(){
   120dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   120de:	4604      	mov	r4, r0
	for (uint8_t i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
	{
		valve[i]=&staticFVController[i];
   120e0:	4d17      	ldr	r5, [pc, #92]	; (12140 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x64>)
   120e2:	f8c0 50e4 	str.w	r5, [r0, #228]	; 0xe4
		valve[i]->InitController(i);
   120e6:	2100      	movs	r1, #0
   120e8:	4628      	mov	r0, r5
   120ea:	4f16      	ldr	r7, [pc, #88]	; (12144 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x68>)
   120ec:	47b8      	blx	r7
		valve[i]->SetPartner(valve[1-i]);
   120ee:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
   120f2:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   120f6:	4e14      	ldr	r6, [pc, #80]	; (12148 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x6c>)
   120f8:	47b0      	blx	r6
		valve[i]=&staticFVController[i];
   120fa:	f105 00dc 	add.w	r0, r5, #220	; 0xdc
   120fe:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
		valve[i]->InitController(i);
   12102:	2101      	movs	r1, #1
   12104:	47b8      	blx	r7
		valve[i]->SetPartner(valve[1-i]);
   12106:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1210a:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
   1210e:	47b0      	blx	r6
	
	}
	for (uint8_t i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
	{
		
		valve[i]->SetPartner(valve[1-i]);
   12110:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
   12114:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   12118:	47b0      	blx	r6
   1211a:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1211e:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
   12122:	47b0      	blx	r6
		
	}
	valve1=valve[0]; 
   12124:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
   12128:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
	valve2=valve[1]; 
   1212c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   12130:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	return (valve1->isOK)|(valve2->isOK);
   12134:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
   12138:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
}
   1213c:	4310      	orrs	r0, r2
   1213e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12140:	2000518c 	.word	0x2000518c
   12144:	000125c9 	.word	0x000125c9
   12148:	000129d3 	.word	0x000129d3

0001214c <_ZN29Dual_Flapper_Valve_Controller12IsStandAloneEv>:
		boolResult=	!valve1->dataStruct.controlOutputs.iAlcFvStandAloneOut;
	}
	return boolResult;
}

bool Dual_Flapper_Valve_Controller::IsStandAlone(void){
   1214c:	b570      	push	{r4, r5, r6, lr}
   1214e:	4605      	mov	r5, r0
	is_stand_alone=valve1->IsStandAloneMode()|valve2->IsStandAloneMode();
   12150:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   12154:	4e05      	ldr	r6, [pc, #20]	; (1216c <_ZN29Dual_Flapper_Valve_Controller12IsStandAloneEv+0x20>)
   12156:	47b0      	blx	r6
   12158:	4604      	mov	r4, r0
   1215a:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
   1215e:	47b0      	blx	r6
   12160:	4320      	orrs	r0, r4
   12162:	b2c0      	uxtb	r0, r0
   12164:	f885 00ec 	strb.w	r0, [r5, #236]	; 0xec
	return is_stand_alone;
}
   12168:	bd70      	pop	{r4, r5, r6, pc}
   1216a:	bf00      	nop
   1216c:	00012989 	.word	0x00012989

00012170 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev>:

Dual_Flapper_Valve_Controller flapper;
   12170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   12172:	4c10      	ldr	r4, [pc, #64]	; (121b4 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x44>)
   12174:	f504 75dc 	add.w	r5, r4, #440	; 0x1b8
   12178:	490f      	ldr	r1, [pc, #60]	; (121b8 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x48>)
   1217a:	4628      	mov	r0, r5
   1217c:	4b0f      	ldr	r3, [pc, #60]	; (121bc <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x4c>)
   1217e:	4798      	blx	r3
   12180:	4e0f      	ldr	r6, [pc, #60]	; (121c0 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x50>)
   12182:	4632      	mov	r2, r6
   12184:	490f      	ldr	r1, [pc, #60]	; (121c4 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x54>)
   12186:	4628      	mov	r0, r5
   12188:	4d0f      	ldr	r5, [pc, #60]	; (121c8 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x58>)
   1218a:	47a8      	blx	r5
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
   1218c:	4620      	mov	r0, r4
   1218e:	4f0f      	ldr	r7, [pc, #60]	; (121cc <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x5c>)
   12190:	47b8      	blx	r7
   12192:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
   12196:	47b8      	blx	r7
   12198:	4632      	mov	r2, r6
   1219a:	490d      	ldr	r1, [pc, #52]	; (121d0 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x60>)
   1219c:	2000      	movs	r0, #0
   1219e:	47a8      	blx	r5
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
   121a0:	f504 74e8 	add.w	r4, r4, #464	; 0x1d0
   121a4:	4620      	mov	r0, r4
   121a6:	4b0b      	ldr	r3, [pc, #44]	; (121d4 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x64>)
   121a8:	4798      	blx	r3
Dual_Flapper_Valve_Controller flapper;
   121aa:	4632      	mov	r2, r6
   121ac:	490a      	ldr	r1, [pc, #40]	; (121d8 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x68>)
   121ae:	4620      	mov	r0, r4
   121b0:	47a8      	blx	r5
   121b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   121b4:	2000518c 	.word	0x2000518c
   121b8:	2000e058 	.word	0x2000e058
   121bc:	0000fc6d 	.word	0x0000fc6d
   121c0:	20000000 	.word	0x20000000
   121c4:	0000fc89 	.word	0x0000fc89
   121c8:	0001a611 	.word	0x0001a611
   121cc:	00012515 	.word	0x00012515
   121d0:	000120c1 	.word	0x000120c1
   121d4:	00012515 	.word	0x00012515
   121d8:	000120b1 	.word	0x000120b1

000121dc <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
   121dc:	b480      	push	{r7}
   121de:	b083      	sub	sp, #12
   121e0:	af00      	add	r7, sp, #0
   121e2:	6078      	str	r0, [r7, #4]
   121e4:	460b      	mov	r3, r1
   121e6:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
   121e8:	78fb      	ldrb	r3, [r7, #3]
   121ea:	687a      	ldr	r2, [r7, #4]
   121ec:	01db      	lsls	r3, r3, #7
   121ee:	4413      	add	r3, r2
   121f0:	681b      	ldr	r3, [r3, #0]
}
   121f2:	4618      	mov	r0, r3
   121f4:	370c      	adds	r7, #12
   121f6:	46bd      	mov	sp, r7
   121f8:	bc80      	pop	{r7}
   121fa:	4770      	bx	lr

000121fc <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   121fc:	b480      	push	{r7}
   121fe:	b085      	sub	sp, #20
   12200:	af00      	add	r7, sp, #0
   12202:	60f8      	str	r0, [r7, #12]
   12204:	460b      	mov	r3, r1
   12206:	607a      	str	r2, [r7, #4]
   12208:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   1220a:	7afb      	ldrb	r3, [r7, #11]
   1220c:	68fa      	ldr	r2, [r7, #12]
   1220e:	01db      	lsls	r3, r3, #7
   12210:	4413      	add	r3, r2
   12212:	3318      	adds	r3, #24
   12214:	687a      	ldr	r2, [r7, #4]
   12216:	601a      	str	r2, [r3, #0]
}
   12218:	bf00      	nop
   1221a:	3714      	adds	r7, #20
   1221c:	46bd      	mov	sp, r7
   1221e:	bc80      	pop	{r7}
   12220:	4770      	bx	lr

00012222 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
   12222:	b480      	push	{r7}
   12224:	b083      	sub	sp, #12
   12226:	af00      	add	r7, sp, #0
   12228:	6078      	str	r0, [r7, #4]
   1222a:	460b      	mov	r3, r1
   1222c:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
   1222e:	78fb      	ldrb	r3, [r7, #3]
   12230:	687a      	ldr	r2, [r7, #4]
   12232:	01db      	lsls	r3, r3, #7
   12234:	4413      	add	r3, r2
   12236:	3310      	adds	r3, #16
   12238:	681b      	ldr	r3, [r3, #0]
}
   1223a:	4618      	mov	r0, r3
   1223c:	370c      	adds	r7, #12
   1223e:	46bd      	mov	sp, r7
   12240:	bc80      	pop	{r7}
   12242:	4770      	bx	lr

00012244 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   12244:	b480      	push	{r7}
   12246:	b085      	sub	sp, #20
   12248:	af00      	add	r7, sp, #0
   1224a:	60f8      	str	r0, [r7, #12]
   1224c:	460b      	mov	r3, r1
   1224e:	607a      	str	r2, [r7, #4]
   12250:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   12252:	7afb      	ldrb	r3, [r7, #11]
   12254:	68fa      	ldr	r2, [r7, #12]
   12256:	01db      	lsls	r3, r3, #7
   12258:	4413      	add	r3, r2
   1225a:	3314      	adds	r3, #20
   1225c:	687a      	ldr	r2, [r7, #4]
   1225e:	601a      	str	r2, [r3, #0]
}
   12260:	bf00      	nop
   12262:	3714      	adds	r7, #20
   12264:	46bd      	mov	sp, r7
   12266:	bc80      	pop	{r7}
   12268:	4770      	bx	lr

0001226a <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
   1226a:	b480      	push	{r7}
   1226c:	b085      	sub	sp, #20
   1226e:	af00      	add	r7, sp, #0
   12270:	60f8      	str	r0, [r7, #12]
   12272:	460b      	mov	r3, r1
   12274:	607a      	str	r2, [r7, #4]
   12276:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
   12278:	7afb      	ldrb	r3, [r7, #11]
   1227a:	68fa      	ldr	r2, [r7, #12]
   1227c:	01db      	lsls	r3, r3, #7
   1227e:	4413      	add	r3, r2
   12280:	331c      	adds	r3, #28
   12282:	687a      	ldr	r2, [r7, #4]
   12284:	601a      	str	r2, [r3, #0]
}
   12286:	bf00      	nop
   12288:	3714      	adds	r7, #20
   1228a:	46bd      	mov	sp, r7
   1228c:	bc80      	pop	{r7}
   1228e:	4770      	bx	lr

00012290 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
   12290:	b480      	push	{r7}
   12292:	b083      	sub	sp, #12
   12294:	af00      	add	r7, sp, #0
   12296:	6078      	str	r0, [r7, #4]
   12298:	460b      	mov	r3, r1
   1229a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
   1229c:	78fb      	ldrb	r3, [r7, #3]
   1229e:	687a      	ldr	r2, [r7, #4]
   122a0:	01db      	lsls	r3, r3, #7
   122a2:	4413      	add	r3, r2
   122a4:	3320      	adds	r3, #32
   122a6:	681b      	ldr	r3, [r3, #0]
}
   122a8:	4618      	mov	r0, r3
   122aa:	370c      	adds	r7, #12
   122ac:	46bd      	mov	sp, r7
   122ae:	bc80      	pop	{r7}
   122b0:	4770      	bx	lr
	...

000122b4 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
   122b4:	b580      	push	{r7, lr}
   122b6:	b082      	sub	sp, #8
   122b8:	af00      	add	r7, sp, #0
   122ba:	4603      	mov	r3, r0
   122bc:	6039      	str	r1, [r7, #0]
   122be:	71fb      	strb	r3, [r7, #7]
   122c0:	4613      	mov	r3, r2
   122c2:	71bb      	strb	r3, [r7, #6]
	if (level) {
   122c4:	79bb      	ldrb	r3, [r7, #6]
   122c6:	2b00      	cmp	r3, #0
   122c8:	d006      	beq.n	122d8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   122ca:	79fb      	ldrb	r3, [r7, #7]
   122cc:	683a      	ldr	r2, [r7, #0]
   122ce:	4619      	mov	r1, r3
   122d0:	4806      	ldr	r0, [pc, #24]	; (122ec <_gpio_set_level+0x38>)
   122d2:	4b07      	ldr	r3, [pc, #28]	; (122f0 <_gpio_set_level+0x3c>)
   122d4:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
   122d6:	e005      	b.n	122e4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   122d8:	79fb      	ldrb	r3, [r7, #7]
   122da:	683a      	ldr	r2, [r7, #0]
   122dc:	4619      	mov	r1, r3
   122de:	4803      	ldr	r0, [pc, #12]	; (122ec <_gpio_set_level+0x38>)
   122e0:	4b04      	ldr	r3, [pc, #16]	; (122f4 <_gpio_set_level+0x40>)
   122e2:	4798      	blx	r3
}
   122e4:	bf00      	nop
   122e6:	3708      	adds	r7, #8
   122e8:	46bd      	mov	sp, r7
   122ea:	bd80      	pop	{r7, pc}
   122ec:	41008000 	.word	0x41008000
   122f0:	000121fd 	.word	0x000121fd
   122f4:	00012245 	.word	0x00012245

000122f8 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
   122f8:	b580      	push	{r7, lr}
   122fa:	b082      	sub	sp, #8
   122fc:	af00      	add	r7, sp, #0
   122fe:	4603      	mov	r3, r0
   12300:	6039      	str	r1, [r7, #0]
   12302:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
   12304:	79fb      	ldrb	r3, [r7, #7]
   12306:	683a      	ldr	r2, [r7, #0]
   12308:	4619      	mov	r1, r3
   1230a:	4803      	ldr	r0, [pc, #12]	; (12318 <_gpio_toggle_level+0x20>)
   1230c:	4b03      	ldr	r3, [pc, #12]	; (1231c <_gpio_toggle_level+0x24>)
   1230e:	4798      	blx	r3
}
   12310:	bf00      	nop
   12312:	3708      	adds	r7, #8
   12314:	46bd      	mov	sp, r7
   12316:	bd80      	pop	{r7, pc}
   12318:	41008000 	.word	0x41008000
   1231c:	0001226b 	.word	0x0001226b

00012320 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
   12320:	b580      	push	{r7, lr}
   12322:	b086      	sub	sp, #24
   12324:	af00      	add	r7, sp, #0
   12326:	4603      	mov	r3, r0
   12328:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
   1232a:	f107 030c 	add.w	r3, r7, #12
   1232e:	4618      	mov	r0, r3
   12330:	4b13      	ldr	r3, [pc, #76]	; (12380 <_gpio_get_level+0x60>)
   12332:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
   12334:	79fb      	ldrb	r3, [r7, #7]
   12336:	4619      	mov	r1, r3
   12338:	4812      	ldr	r0, [pc, #72]	; (12384 <_gpio_get_level+0x64>)
   1233a:	4b13      	ldr	r3, [pc, #76]	; (12388 <_gpio_get_level+0x68>)
   1233c:	4798      	blx	r3
   1233e:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
   12340:	79fb      	ldrb	r3, [r7, #7]
   12342:	4619      	mov	r1, r3
   12344:	480f      	ldr	r0, [pc, #60]	; (12384 <_gpio_get_level+0x64>)
   12346:	4b11      	ldr	r3, [pc, #68]	; (1238c <_gpio_get_level+0x6c>)
   12348:	4798      	blx	r3
   1234a:	4602      	mov	r2, r0
   1234c:	697b      	ldr	r3, [r7, #20]
   1234e:	43db      	mvns	r3, r3
   12350:	4013      	ands	r3, r2
   12352:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
   12354:	79fb      	ldrb	r3, [r7, #7]
   12356:	4619      	mov	r1, r3
   12358:	480a      	ldr	r0, [pc, #40]	; (12384 <_gpio_get_level+0x64>)
   1235a:	4b0d      	ldr	r3, [pc, #52]	; (12390 <_gpio_get_level+0x70>)
   1235c:	4798      	blx	r3
   1235e:	4602      	mov	r2, r0
   12360:	697b      	ldr	r3, [r7, #20]
   12362:	4013      	ands	r3, r2
   12364:	693a      	ldr	r2, [r7, #16]
   12366:	4313      	orrs	r3, r2
   12368:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
   1236a:	f107 030c 	add.w	r3, r7, #12
   1236e:	4618      	mov	r0, r3
   12370:	4b08      	ldr	r3, [pc, #32]	; (12394 <_gpio_get_level+0x74>)
   12372:	4798      	blx	r3

	return tmp;
   12374:	693b      	ldr	r3, [r7, #16]
}
   12376:	4618      	mov	r0, r3
   12378:	3718      	adds	r7, #24
   1237a:	46bd      	mov	sp, r7
   1237c:	bd80      	pop	{r7, pc}
   1237e:	bf00      	nop
   12380:	0000d125 	.word	0x0000d125
   12384:	41008000 	.word	0x41008000
   12388:	000121dd 	.word	0x000121dd
   1238c:	00012291 	.word	0x00012291
   12390:	00012223 	.word	0x00012223
   12394:	0000d14b 	.word	0x0000d14b

00012398 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
   12398:	b580      	push	{r7, lr}
   1239a:	b082      	sub	sp, #8
   1239c:	af00      	add	r7, sp, #0
   1239e:	4603      	mov	r3, r0
   123a0:	460a      	mov	r2, r1
   123a2:	71fb      	strb	r3, [r7, #7]
   123a4:	4613      	mov	r3, r2
   123a6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   123a8:	79fb      	ldrb	r3, [r7, #7]
   123aa:	115b      	asrs	r3, r3, #5
   123ac:	b2d8      	uxtb	r0, r3
   123ae:	79fb      	ldrb	r3, [r7, #7]
   123b0:	f003 031f 	and.w	r3, r3, #31
   123b4:	2201      	movs	r2, #1
   123b6:	fa02 f303 	lsl.w	r3, r2, r3
   123ba:	79ba      	ldrb	r2, [r7, #6]
   123bc:	4619      	mov	r1, r3
   123be:	4b03      	ldr	r3, [pc, #12]	; (123cc <gpio_set_pin_level+0x34>)
   123c0:	4798      	blx	r3
}
   123c2:	bf00      	nop
   123c4:	3708      	adds	r7, #8
   123c6:	46bd      	mov	sp, r7
   123c8:	bd80      	pop	{r7, pc}
   123ca:	bf00      	nop
   123cc:	000122b5 	.word	0x000122b5

000123d0 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
   123d0:	b580      	push	{r7, lr}
   123d2:	b082      	sub	sp, #8
   123d4:	af00      	add	r7, sp, #0
   123d6:	4603      	mov	r3, r0
   123d8:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
   123da:	79fb      	ldrb	r3, [r7, #7]
   123dc:	115b      	asrs	r3, r3, #5
   123de:	b2d8      	uxtb	r0, r3
   123e0:	79fb      	ldrb	r3, [r7, #7]
   123e2:	f003 031f 	and.w	r3, r3, #31
   123e6:	2201      	movs	r2, #1
   123e8:	fa02 f303 	lsl.w	r3, r2, r3
   123ec:	4619      	mov	r1, r3
   123ee:	4b03      	ldr	r3, [pc, #12]	; (123fc <gpio_toggle_pin_level+0x2c>)
   123f0:	4798      	blx	r3
}
   123f2:	bf00      	nop
   123f4:	3708      	adds	r7, #8
   123f6:	46bd      	mov	sp, r7
   123f8:	bd80      	pop	{r7, pc}
   123fa:	bf00      	nop
   123fc:	000122f9 	.word	0x000122f9

00012400 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
   12400:	b580      	push	{r7, lr}
   12402:	b082      	sub	sp, #8
   12404:	af00      	add	r7, sp, #0
   12406:	4603      	mov	r3, r0
   12408:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
   1240a:	79fb      	ldrb	r3, [r7, #7]
   1240c:	115b      	asrs	r3, r3, #5
   1240e:	b2db      	uxtb	r3, r3
   12410:	4618      	mov	r0, r3
   12412:	4b09      	ldr	r3, [pc, #36]	; (12438 <gpio_get_pin_level+0x38>)
   12414:	4798      	blx	r3
   12416:	4601      	mov	r1, r0
   12418:	79fb      	ldrb	r3, [r7, #7]
   1241a:	f003 031f 	and.w	r3, r3, #31
   1241e:	2201      	movs	r2, #1
   12420:	fa02 f303 	lsl.w	r3, r2, r3
   12424:	400b      	ands	r3, r1
   12426:	2b00      	cmp	r3, #0
   12428:	bf14      	ite	ne
   1242a:	2301      	movne	r3, #1
   1242c:	2300      	moveq	r3, #0
   1242e:	b2db      	uxtb	r3, r3
}
   12430:	4618      	mov	r0, r3
   12432:	3708      	adds	r7, #8
   12434:	46bd      	mov	sp, r7
   12436:	bd80      	pop	{r7, pc}
   12438:	00012321 	.word	0x00012321

0001243c <_ZL30TimeoutFlapperValve1ControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController[FLAPPER_VALVE_QUANTITY];

static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];

static void TimeoutFlapperValve1Controller(const struct timer_task *const timer_task)
{
   1243c:	b480      	push	{r7}
   1243e:	b083      	sub	sp, #12
   12440:	af00      	add	r7, sp, #0
   12442:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[0]->timeoutFlapperValveController=true;
   12444:	4b07      	ldr	r3, [pc, #28]	; (12464 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
   12446:	681b      	ldr	r3, [r3, #0]
   12448:	2201      	movs	r2, #1
   1244a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController[0]->unLockTimeout=true;
   1244e:	4b05      	ldr	r3, [pc, #20]	; (12464 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
   12450:	681b      	ldr	r3, [r3, #0]
   12452:	2201      	movs	r2, #1
   12454:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	
}
   12458:	bf00      	nop
   1245a:	370c      	adds	r7, #12
   1245c:	46bd      	mov	sp, r7
   1245e:	bc80      	pop	{r7}
   12460:	4770      	bx	lr
   12462:	bf00      	nop
   12464:	20005584 	.word	0x20005584

00012468 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task>:
static void TimeoutFlapperValve2Controller(const struct timer_task *const timer_task)
{
   12468:	b480      	push	{r7}
   1246a:	b083      	sub	sp, #12
   1246c:	af00      	add	r7, sp, #0
   1246e:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[1]->timeoutFlapperValveController=true;
   12470:	4b07      	ldr	r3, [pc, #28]	; (12490 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
   12472:	685b      	ldr	r3, [r3, #4]
   12474:	2201      	movs	r2, #1
   12476:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->unLockTimeout=true;
   1247a:	4b05      	ldr	r3, [pc, #20]	; (12490 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
   1247c:	685b      	ldr	r3, [r3, #4]
   1247e:	2201      	movs	r2, #1
   12480:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	
}
   12484:	bf00      	nop
   12486:	370c      	adds	r7, #12
   12488:	46bd      	mov	sp, r7
   1248a:	bc80      	pop	{r7}
   1248c:	4770      	bx	lr
   1248e:	bf00      	nop
   12490:	20005584 	.word	0x20005584

00012494 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task>:
static void TimeoutFlapperValve1FullyClossed(const struct timer_task *const timer_task)
{
   12494:	b480      	push	{r7}
   12496:	b083      	sub	sp, #12
   12498:	af00      	add	r7, sp, #0
   1249a:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[0]->fullClosedTimeout=true;
   1249c:	4b04      	ldr	r3, [pc, #16]	; (124b0 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task+0x1c>)
   1249e:	681b      	ldr	r3, [r3, #0]
   124a0:	2201      	movs	r2, #1
   124a2:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	
}
   124a6:	bf00      	nop
   124a8:	370c      	adds	r7, #12
   124aa:	46bd      	mov	sp, r7
   124ac:	bc80      	pop	{r7}
   124ae:	4770      	bx	lr
   124b0:	20005584 	.word	0x20005584

000124b4 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task>:
static void TimeoutFlapperValve2FullyClossed(const struct timer_task *const timer_task)
{
   124b4:	b480      	push	{r7}
   124b6:	b083      	sub	sp, #12
   124b8:	af00      	add	r7, sp, #0
   124ba:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->fullClosedTimeout=true;
   124bc:	4b04      	ldr	r3, [pc, #16]	; (124d0 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task+0x1c>)
   124be:	685b      	ldr	r3, [r3, #4]
   124c0:	2201      	movs	r2, #1
   124c2:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	
}
   124c6:	bf00      	nop
   124c8:	370c      	adds	r7, #12
   124ca:	46bd      	mov	sp, r7
   124cc:	bc80      	pop	{r7}
   124ce:	4770      	bx	lr
   124d0:	20005584 	.word	0x20005584

000124d4 <_ZL18ResetValve1TimeoutPK10timer_task>:

static void ResetValve1Timeout(const struct timer_task *const timer_task)
{
   124d4:	b480      	push	{r7}
   124d6:	b083      	sub	sp, #12
   124d8:	af00      	add	r7, sp, #0
   124da:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[0]->resetTimeout=true;
   124dc:	4b04      	ldr	r3, [pc, #16]	; (124f0 <_ZL18ResetValve1TimeoutPK10timer_task+0x1c>)
   124de:	681b      	ldr	r3, [r3, #0]
   124e0:	2201      	movs	r2, #1
   124e2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
   124e6:	bf00      	nop
   124e8:	370c      	adds	r7, #12
   124ea:	46bd      	mov	sp, r7
   124ec:	bc80      	pop	{r7}
   124ee:	4770      	bx	lr
   124f0:	20005584 	.word	0x20005584

000124f4 <_ZL18ResetValve2TimeoutPK10timer_task>:
static void ResetValve2Timeout(const struct timer_task *const timer_task)
{
   124f4:	b480      	push	{r7}
   124f6:	b083      	sub	sp, #12
   124f8:	af00      	add	r7, sp, #0
   124fa:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[1]->resetTimeout=true;
   124fc:	4b04      	ldr	r3, [pc, #16]	; (12510 <_ZL18ResetValve2TimeoutPK10timer_task+0x1c>)
   124fe:	685b      	ldr	r3, [r3, #4]
   12500:	2201      	movs	r2, #1
   12502:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
   12506:	bf00      	nop
   12508:	370c      	adds	r7, #12
   1250a:	46bd      	mov	sp, r7
   1250c:	bc80      	pop	{r7}
   1250e:	4770      	bx	lr
   12510:	20005584 	.word	0x20005584

00012514 <_ZN22FlapperValveControllerC1Ev>:


// default constructor
FlapperValveController::FlapperValveController()
   12514:	b580      	push	{r7, lr}
   12516:	b082      	sub	sp, #8
   12518:	af00      	add	r7, sp, #0
   1251a:	6078      	str	r0, [r7, #4]
   1251c:	687b      	ldr	r3, [r7, #4]
   1251e:	4618      	mov	r0, r3
   12520:	4b1f      	ldr	r3, [pc, #124]	; (125a0 <_ZN22FlapperValveControllerC1Ev+0x8c>)
   12522:	4798      	blx	r3
{
	singlefv=&fvStatic[0];
   12524:	687b      	ldr	r3, [r7, #4]
   12526:	4a1f      	ldr	r2, [pc, #124]	; (125a4 <_ZN22FlapperValveControllerC1Ev+0x90>)
   12528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
//	ptrFlapperValveController=this;
	doPeriodicTask=false;
   1252c:	687b      	ldr	r3, [r7, #4]
   1252e:	2200      	movs	r2, #0
   12530:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	isControlling=false;
   12534:	687b      	ldr	r3, [r7, #4]
   12536:	2200      	movs	r2, #0
   12538:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	gotSetpoint=false;
   1253c:	687b      	ldr	r3, [r7, #4]
   1253e:	2200      	movs	r2, #0
   12540:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	controllerEnabled=false;
   12544:	687b      	ldr	r3, [r7, #4]
   12546:	2200      	movs	r2, #0
   12548:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	closing=false;
   1254c:	687b      	ldr	r3, [r7, #4]
   1254e:	2200      	movs	r2, #0
   12550:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUM_AIR;
   12554:	687b      	ldr	r3, [r7, #4]
   12556:	22da      	movs	r2, #218	; 0xda
   12558:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	NBC_Mode=false;
   1255c:	687b      	ldr	r3, [r7, #4]
   1255e:	2200      	movs	r2, #0
   12560:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	NBC_Activated=false;
   12564:	687b      	ldr	r3, [r7, #4]
   12566:	2200      	movs	r2, #0
   12568:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	standAloneActivated=false;
   1256c:	687b      	ldr	r3, [r7, #4]
   1256e:	2200      	movs	r2, #0
   12570:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	standAloneMode=false;
   12574:	687b      	ldr	r3, [r7, #4]
   12576:	2200      	movs	r2, #0
   12578:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	resetTimeout=false;
   1257c:	687b      	ldr	r3, [r7, #4]
   1257e:	2200      	movs	r2, #0
   12580:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	standAloneReturning=false;
   12584:	687b      	ldr	r3, [r7, #4]
   12586:	2200      	movs	r2, #0
   12588:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	partner=NULL;
   1258c:	687b      	ldr	r3, [r7, #4]
   1258e:	2200      	movs	r2, #0
   12590:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	
	
} //FlapperValveController
   12594:	687b      	ldr	r3, [r7, #4]
   12596:	4618      	mov	r0, r3
   12598:	3708      	adds	r7, #8
   1259a:	46bd      	mov	sp, r7
   1259c:	bd80      	pop	{r7, pc}
   1259e:	bf00      	nop
   125a0:	00013909 	.word	0x00013909
   125a4:	2000558c 	.word	0x2000558c

000125a8 <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
   125a8:	b580      	push	{r7, lr}
   125aa:	b082      	sub	sp, #8
   125ac:	af00      	add	r7, sp, #0
   125ae:	6078      	str	r0, [r7, #4]
   125b0:	687b      	ldr	r3, [r7, #4]
   125b2:	4618      	mov	r0, r3
   125b4:	4b03      	ldr	r3, [pc, #12]	; (125c4 <_ZN22FlapperValveControllerD1Ev+0x1c>)
   125b6:	4798      	blx	r3
{
} //~FlapperValveController
   125b8:	687b      	ldr	r3, [r7, #4]
   125ba:	4618      	mov	r0, r3
   125bc:	3708      	adds	r7, #8
   125be:	46bd      	mov	sp, r7
   125c0:	bd80      	pop	{r7, pc}
   125c2:	bf00      	nop
   125c4:	00013955 	.word	0x00013955

000125c8 <_ZN22FlapperValveController14InitControllerEh>:
	{
		isOK=Selftest();
	}
	return	isOK;	
}
bool FlapperValveController::InitController(uint8_t valve_id){
   125c8:	b590      	push	{r4, r7, lr}
   125ca:	b083      	sub	sp, #12
   125cc:	af00      	add	r7, sp, #0
   125ce:	6078      	str	r0, [r7, #4]
   125d0:	460b      	mov	r3, r1
   125d2:	70fb      	strb	r3, [r7, #3]
	ptrFlapperValveController[valve_id]=this;
   125d4:	78fb      	ldrb	r3, [r7, #3]
   125d6:	4921      	ldr	r1, [pc, #132]	; (1265c <_ZN22FlapperValveController14InitControllerEh+0x94>)
   125d8:	687a      	ldr	r2, [r7, #4]
   125da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		valve_ID=valve_id;
   125de:	687b      	ldr	r3, [r7, #4]
   125e0:	78fa      	ldrb	r2, [r7, #3]
   125e2:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
		singlefv=&fvStatic[valve_id];
   125e6:	78fa      	ldrb	r2, [r7, #3]
   125e8:	4613      	mov	r3, r2
   125ea:	011b      	lsls	r3, r3, #4
   125ec:	1a9b      	subs	r3, r3, r2
   125ee:	00db      	lsls	r3, r3, #3
   125f0:	4a1b      	ldr	r2, [pc, #108]	; (12660 <_ZN22FlapperValveController14InitControllerEh+0x98>)
   125f2:	441a      	add	r2, r3
   125f4:	687b      	ldr	r3, [r7, #4]
   125f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		positions[valve_id]=position_array_static[valve_id];
   125fa:	78fb      	ldrb	r3, [r7, #3]
   125fc:	78fa      	ldrb	r2, [r7, #3]
   125fe:	0112      	lsls	r2, r2, #4
   12600:	4918      	ldr	r1, [pc, #96]	; (12664 <_ZN22FlapperValveController14InitControllerEh+0x9c>)
   12602:	440a      	add	r2, r1
   12604:	6879      	ldr	r1, [r7, #4]
   12606:	3332      	adds	r3, #50	; 0x32
   12608:	009b      	lsls	r3, r3, #2
   1260a:	440b      	add	r3, r1
   1260c:	605a      	str	r2, [r3, #4]
		if (singlefv->Init(valve_id))
   1260e:	687b      	ldr	r3, [r7, #4]
   12610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12614:	78fa      	ldrb	r2, [r7, #3]
   12616:	4611      	mov	r1, r2
   12618:	4618      	mov	r0, r3
   1261a:	4b13      	ldr	r3, [pc, #76]	; (12668 <_ZN22FlapperValveController14InitControllerEh+0xa0>)
   1261c:	4798      	blx	r3
   1261e:	4603      	mov	r3, r0
   12620:	2b00      	cmp	r3, #0
   12622:	d012      	beq.n	1264a <_ZN22FlapperValveController14InitControllerEh+0x82>
		{
			isOK=Selftest();
   12624:	6878      	ldr	r0, [r7, #4]
   12626:	4b11      	ldr	r3, [pc, #68]	; (1266c <_ZN22FlapperValveController14InitControllerEh+0xa4>)
   12628:	4798      	blx	r3
   1262a:	4603      	mov	r3, r0
   1262c:	461a      	mov	r2, r3
   1262e:	687b      	ldr	r3, [r7, #4]
   12630:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			logger.SaveEventIndexResult("Flapper Valve ",valve_id+1,isOK);
   12634:	78fb      	ldrb	r3, [r7, #3]
   12636:	3301      	adds	r3, #1
   12638:	b2da      	uxtb	r2, r3
   1263a:	687b      	ldr	r3, [r7, #4]
   1263c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   12640:	b2db      	uxtb	r3, r3
   12642:	490b      	ldr	r1, [pc, #44]	; (12670 <_ZN22FlapperValveController14InitControllerEh+0xa8>)
   12644:	480b      	ldr	r0, [pc, #44]	; (12674 <_ZN22FlapperValveController14InitControllerEh+0xac>)
   12646:	4c0c      	ldr	r4, [pc, #48]	; (12678 <_ZN22FlapperValveController14InitControllerEh+0xb0>)
   12648:	47a0      	blx	r4
		}
		return	isOK;
   1264a:	687b      	ldr	r3, [r7, #4]
   1264c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   12650:	b2db      	uxtb	r3, r3
}
   12652:	4618      	mov	r0, r3
   12654:	370c      	adds	r7, #12
   12656:	46bd      	mov	sp, r7
   12658:	bd90      	pop	{r4, r7, pc}
   1265a:	bf00      	nop
   1265c:	20005584 	.word	0x20005584
   12660:	2000558c 	.word	0x2000558c
   12664:	20005564 	.word	0x20005564
   12668:	00013a39 	.word	0x00013a39
   1266c:	00013541 	.word	0x00013541
   12670:	0001b654 	.word	0x0001b654
   12674:	20003a68 	.word	0x20003a68
   12678:	00011dd9 	.word	0x00011dd9

0001267c <_ZN22FlapperValveController18CalculateDirectionEh>:
bool FlapperValveController::IsEnabled(){
	return	singlefv->controlOutputs.niAlcFvMotorEnable==true;
}


bool	FlapperValveController::CalculateDirection(uint8_t sp){
   1267c:	b480      	push	{r7}
   1267e:	b083      	sub	sp, #12
   12680:	af00      	add	r7, sp, #0
   12682:	6078      	str	r0, [r7, #4]
   12684:	460b      	mov	r3, r1
   12686:	70fb      	strb	r3, [r7, #3]
	lastDirection=direction;
   12688:	687b      	ldr	r3, [r7, #4]
   1268a:	f893 20b3 	ldrb.w	r2, [r3, #179]	; 0xb3
   1268e:	687b      	ldr	r3, [r7, #4]
   12690:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	direction=currentPosition>sp;
   12694:	687b      	ldr	r3, [r7, #4]
   12696:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   1269a:	461a      	mov	r2, r3
   1269c:	78fb      	ldrb	r3, [r7, #3]
   1269e:	429a      	cmp	r2, r3
   126a0:	bfcc      	ite	gt
   126a2:	2301      	movgt	r3, #1
   126a4:	2300      	movle	r3, #0
   126a6:	b2da      	uxtb	r2, r3
   126a8:	687b      	ldr	r3, [r7, #4]
   126aa:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	return direction;
   126ae:	687b      	ldr	r3, [r7, #4]
   126b0:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	
}
   126b4:	4618      	mov	r0, r3
   126b6:	370c      	adds	r7, #12
   126b8:	46bd      	mov	sp, r7
   126ba:	bc80      	pop	{r7}
   126bc:	4770      	bx	lr
	...

000126c0 <_ZN22FlapperValveController18CalculateDirectionEv>:

bool	FlapperValveController::CalculateDirection(){
   126c0:	b580      	push	{r7, lr}
   126c2:	b082      	sub	sp, #8
   126c4:	af00      	add	r7, sp, #0
   126c6:	6078      	str	r0, [r7, #4]

	//floatSetpoint=(float)setpoint;
	return CalculateDirection(setpoint);
   126c8:	687b      	ldr	r3, [r7, #4]
   126ca:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   126ce:	4619      	mov	r1, r3
   126d0:	6878      	ldr	r0, [r7, #4]
   126d2:	4b03      	ldr	r3, [pc, #12]	; (126e0 <_ZN22FlapperValveController18CalculateDirectionEv+0x20>)
   126d4:	4798      	blx	r3
   126d6:	4603      	mov	r3, r0
	
}
   126d8:	4618      	mov	r0, r3
   126da:	3708      	adds	r7, #8
   126dc:	46bd      	mov	sp, r7
   126de:	bd80      	pop	{r7, pc}
   126e0:	0001267d 	.word	0x0001267d

000126e4 <_ZN22FlapperValveController22StartMovingOnDirectionEv>:
bool	FlapperValveController::StatusHadChanged(){
	return	singlefv->fv1StatusChanged;
}

uint8_t FlapperValveController::StartMovingOnDirection(){
   126e4:	b590      	push	{r4, r7, lr}
   126e6:	b083      	sub	sp, #12
   126e8:	af00      	add	r7, sp, #0
   126ea:	6078      	str	r0, [r7, #4]

	lastPosition=currentPosition;
   126ec:	687b      	ldr	r3, [r7, #4]
   126ee:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
   126f2:	687b      	ldr	r3, [r7, #4]
   126f4:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
//	floatLastPosition=(float)lastPosition;
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
   126f8:	687b      	ldr	r3, [r7, #4]
   126fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   126fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   12702:	2b00      	cmp	r3, #0
   12704:	d009      	beq.n	1271a <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x36>
	{
		singlefv->SetEnable(false);
   12706:	687b      	ldr	r3, [r7, #4]
   12708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1270c:	2100      	movs	r1, #0
   1270e:	4618      	mov	r0, r3
   12710:	4b0b      	ldr	r3, [pc, #44]	; (12740 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x5c>)
   12712:	4798      	blx	r3
		delay_ms(10);
   12714:	200a      	movs	r0, #10
   12716:	4b0b      	ldr	r3, [pc, #44]	; (12744 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x60>)
   12718:	4798      	blx	r3
	} 
	else
	{
	}
	singlefv->SetDirection(CalculateDirection());
   1271a:	687b      	ldr	r3, [r7, #4]
   1271c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
   12720:	6878      	ldr	r0, [r7, #4]
   12722:	4b09      	ldr	r3, [pc, #36]	; (12748 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x64>)
   12724:	4798      	blx	r3
   12726:	4603      	mov	r3, r0
   12728:	4619      	mov	r1, r3
   1272a:	4620      	mov	r0, r4
   1272c:	4b07      	ldr	r3, [pc, #28]	; (1274c <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x68>)
   1272e:	4798      	blx	r3
	StartMotor();
   12730:	6878      	ldr	r0, [r7, #4]
   12732:	4b07      	ldr	r3, [pc, #28]	; (12750 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x6c>)
   12734:	4798      	blx	r3
	return 0;
   12736:	2300      	movs	r3, #0
}
   12738:	4618      	mov	r0, r3
   1273a:	370c      	adds	r7, #12
   1273c:	46bd      	mov	sp, r7
   1273e:	bd90      	pop	{r4, r7, pc}
   12740:	00013b99 	.word	0x00013b99
   12744:	00003681 	.word	0x00003681
   12748:	000126c1 	.word	0x000126c1
   1274c:	00013c19 	.word	0x00013c19
   12750:	00013141 	.word	0x00013141

00012754 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv>:

bool FlapperValveController::ControlMovement_AND_NBC(void){
   12754:	b580      	push	{r7, lr}
   12756:	b082      	sub	sp, #8
   12758:	af00      	add	r7, sp, #0
   1275a:	6078      	str	r0, [r7, #4]

	if (IsNBCMode())
   1275c:	6878      	ldr	r0, [r7, #4]
   1275e:	4b13      	ldr	r3, [pc, #76]	; (127ac <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x58>)
   12760:	4798      	blx	r3
   12762:	4603      	mov	r3, r0
   12764:	2b00      	cmp	r3, #0
   12766:	d003      	beq.n	12770 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x1c>
	{
		CommandNBC_Mode();
   12768:	6878      	ldr	r0, [r7, #4]
   1276a:	4b11      	ldr	r3, [pc, #68]	; (127b0 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x5c>)
   1276c:	4798      	blx	r3
   1276e:	e013      	b.n	12798 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
	} 
	else
	{
		if (NBC_Activated)
   12770:	687b      	ldr	r3, [r7, #4]
   12772:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   12776:	2b00      	cmp	r3, #0
   12778:	d00b      	beq.n	12792 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x3e>
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
   1277a:	687b      	ldr	r3, [r7, #4]
   1277c:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
   12780:	4619      	mov	r1, r3
   12782:	6878      	ldr	r0, [r7, #4]
   12784:	4b0b      	ldr	r3, [pc, #44]	; (127b4 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x60>)
   12786:	4798      	blx	r3
			NBC_Activated=false;
   12788:	687b      	ldr	r3, [r7, #4]
   1278a:	2200      	movs	r2, #0
   1278c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   12790:	e002      	b.n	12798 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
		} 
		else
		{
			ControlMovement();
   12792:	6878      	ldr	r0, [r7, #4]
   12794:	4b08      	ldr	r3, [pc, #32]	; (127b8 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x64>)
   12796:	4798      	blx	r3
		}
		
	}
	return !NBC_Mode;
   12798:	687b      	ldr	r3, [r7, #4]
   1279a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   1279e:	f083 0301 	eor.w	r3, r3, #1
   127a2:	b2db      	uxtb	r3, r3
}
   127a4:	4618      	mov	r0, r3
   127a6:	3708      	adds	r7, #8
   127a8:	46bd      	mov	sp, r7
   127aa:	bd80      	pop	{r7, pc}
   127ac:	00012ec5 	.word	0x00012ec5
   127b0:	00012e65 	.word	0x00012e65
   127b4:	000131d9 	.word	0x000131d9
   127b8:	00012acd 	.word	0x00012acd

000127bc <_ZN22FlapperValveController17IsInvalidPositionEv>:

bool FlapperValveController::IsInvalidPosition(){
   127bc:	b590      	push	{r4, r7, lr}
   127be:	b085      	sub	sp, #20
   127c0:	af00      	add	r7, sp, #0
   127c2:	6078      	str	r0, [r7, #4]
	bool result=false;
   127c4:	2300      	movs	r3, #0
   127c6:	73fb      	strb	r3, [r7, #15]
	memory.ReadParameters(parameters);
   127c8:	687b      	ldr	r3, [r7, #4]
   127ca:	33c7      	adds	r3, #199	; 0xc7
   127cc:	4619      	mov	r1, r3
   127ce:	4817      	ldr	r0, [pc, #92]	; (1282c <_ZN22FlapperValveController17IsInvalidPositionEv+0x70>)
   127d0:	4b17      	ldr	r3, [pc, #92]	; (12830 <_ZN22FlapperValveController17IsInvalidPositionEv+0x74>)
   127d2:	4798      	blx	r3
	UpdateFlapperValveData();
   127d4:	6878      	ldr	r0, [r7, #4]
   127d6:	4b17      	ldr	r3, [pc, #92]	; (12834 <_ZN22FlapperValveController17IsInvalidPositionEv+0x78>)
   127d8:	4798      	blx	r3
	if ((!standAloneReturning)&(!IsNBCMode()))
   127da:	687b      	ldr	r3, [r7, #4]
   127dc:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
   127e0:	f083 0301 	eor.w	r3, r3, #1
   127e4:	b2db      	uxtb	r3, r3
   127e6:	461c      	mov	r4, r3
   127e8:	6878      	ldr	r0, [r7, #4]
   127ea:	4b13      	ldr	r3, [pc, #76]	; (12838 <_ZN22FlapperValveController17IsInvalidPositionEv+0x7c>)
   127ec:	4798      	blx	r3
   127ee:	4603      	mov	r3, r0
   127f0:	f083 0301 	eor.w	r3, r3, #1
   127f4:	b2db      	uxtb	r3, r3
   127f6:	4023      	ands	r3, r4
   127f8:	2b00      	cmp	r3, #0
   127fa:	bf14      	ite	ne
   127fc:	2301      	movne	r3, #1
   127fe:	2300      	moveq	r3, #0
   12800:	b2db      	uxtb	r3, r3
   12802:	2b00      	cmp	r3, #0
   12804:	d00d      	beq.n	12822 <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
	{
		if (currentPosition>currentMaximum)
   12806:	687b      	ldr	r3, [r7, #4]
   12808:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   1280c:	461a      	mov	r2, r3
   1280e:	687b      	ldr	r3, [r7, #4]
   12810:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
   12814:	429a      	cmp	r2, r3
   12816:	dd02      	ble.n	1281e <_ZN22FlapperValveController17IsInvalidPositionEv+0x62>
		{
			result=true;
   12818:	2301      	movs	r3, #1
   1281a:	73fb      	strb	r3, [r7, #15]
   1281c:	e001      	b.n	12822 <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
		}
		else
		{
			result=false;
   1281e:	2300      	movs	r3, #0
   12820:	73fb      	strb	r3, [r7, #15]
		}
	}

	return result;
   12822:	7bfb      	ldrb	r3, [r7, #15]
}
   12824:	4618      	mov	r0, r3
   12826:	3714      	adds	r7, #20
   12828:	46bd      	mov	sp, r7
   1282a:	bd90      	pop	{r4, r7, pc}
   1282c:	20006ae8 	.word	0x20006ae8
   12830:	00014489 	.word	0x00014489
   12834:	000133d5 	.word	0x000133d5
   12838:	00012ec5 	.word	0x00012ec5

0001283c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv>:

bool FlapperValveController::Control_NBC_StandAlone_Reset(void){
   1283c:	b580      	push	{r7, lr}
   1283e:	b082      	sub	sp, #8
   12840:	af00      	add	r7, sp, #0
   12842:	6078      	str	r0, [r7, #4]
	
	if ((IsInvalidPosition()&(!flapperValveIsMoving)))
   12844:	6878      	ldr	r0, [r7, #4]
   12846:	4b1c      	ldr	r3, [pc, #112]	; (128b8 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x7c>)
   12848:	4798      	blx	r3
   1284a:	4603      	mov	r3, r0
   1284c:	461a      	mov	r2, r3
   1284e:	687b      	ldr	r3, [r7, #4]
   12850:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   12854:	b2db      	uxtb	r3, r3
   12856:	f083 0301 	eor.w	r3, r3, #1
   1285a:	b2db      	uxtb	r3, r3
   1285c:	4013      	ands	r3, r2
   1285e:	2b00      	cmp	r3, #0
   12860:	bf14      	ite	ne
   12862:	2301      	movne	r3, #1
   12864:	2300      	moveq	r3, #0
   12866:	b2db      	uxtb	r3, r3
   12868:	2b00      	cmp	r3, #0
   1286a:	d003      	beq.n	12874 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x38>
	{
		ResetValvePosition();
   1286c:	6878      	ldr	r0, [r7, #4]
   1286e:	4b13      	ldr	r3, [pc, #76]	; (128bc <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x80>)
   12870:	4798      	blx	r3
   12872:	e019      	b.n	128a8 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x6c>
	} 
	else
	{
		if (dataStruct.controlOutputs.iAlcFvFailsToMove)
   12874:	687b      	ldr	r3, [r7, #4]
   12876:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   1287a:	2b00      	cmp	r3, #0
   1287c:	d011      	beq.n	128a2 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x66>
		{
			singlefv->ClearMoveFault(false);
   1287e:	687b      	ldr	r3, [r7, #4]
   12880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12884:	2100      	movs	r1, #0
   12886:	4618      	mov	r0, r3
   12888:	4b0d      	ldr	r3, [pc, #52]	; (128c0 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x84>)
   1288a:	4798      	blx	r3
			delay_us(10);
   1288c:	200a      	movs	r0, #10
   1288e:	4b0d      	ldr	r3, [pc, #52]	; (128c4 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x88>)
   12890:	4798      	blx	r3
			singlefv->ClearMoveFault(true);
   12892:	687b      	ldr	r3, [r7, #4]
   12894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12898:	2101      	movs	r1, #1
   1289a:	4618      	mov	r0, r3
   1289c:	4b08      	ldr	r3, [pc, #32]	; (128c0 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x84>)
   1289e:	4798      	blx	r3
   128a0:	e002      	b.n	128a8 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x6c>
		} 
		else
		{
			Control_NBC_StandAlone();
   128a2:	6878      	ldr	r0, [r7, #4]
   128a4:	4b08      	ldr	r3, [pc, #32]	; (128c8 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x8c>)
   128a6:	4798      	blx	r3
		}

		
	}
	return resetTimeout;
   128a8:	687b      	ldr	r3, [r7, #4]
   128aa:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
   128ae:	b2db      	uxtb	r3, r3
}
   128b0:	4618      	mov	r0, r3
   128b2:	3708      	adds	r7, #8
   128b4:	46bd      	mov	sp, r7
   128b6:	bd80      	pop	{r7, pc}
   128b8:	000127bd 	.word	0x000127bd
   128bc:	00012c9d 	.word	0x00012c9d
   128c0:	00013c91 	.word	0x00013c91
   128c4:	0000364d 	.word	0x0000364d
   128c8:	000128cd 	.word	0x000128cd

000128cc <_ZN22FlapperValveController22Control_NBC_StandAloneEv>:

bool FlapperValveController::Control_NBC_StandAlone(void){
   128cc:	b580      	push	{r7, lr}
   128ce:	b082      	sub	sp, #8
   128d0:	af00      	add	r7, sp, #0
   128d2:	6078      	str	r0, [r7, #4]

	if (IsStandAloneMode())
   128d4:	6878      	ldr	r0, [r7, #4]
   128d6:	4b29      	ldr	r3, [pc, #164]	; (1297c <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb0>)
   128d8:	4798      	blx	r3
   128da:	4603      	mov	r3, r0
   128dc:	2b00      	cmp	r3, #0
   128de:	d031      	beq.n	12944 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x78>
	{	

			standAloneMode=true;
   128e0:	687b      	ldr	r3, [r7, #4]
   128e2:	2201      	movs	r2, #1
   128e4:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
			if (standAloneActivated)
   128e8:	687b      	ldr	r3, [r7, #4]
   128ea:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   128ee:	2b00      	cmp	r3, #0
   128f0:	d003      	beq.n	128fa <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x2e>
			{
				ControlMovement_AND_NBC();
   128f2:	6878      	ldr	r0, [r7, #4]
   128f4:	4b22      	ldr	r3, [pc, #136]	; (12980 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
   128f6:	4798      	blx	r3
   128f8:	e038      	b.n	1296c <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
			}
			else
			{
				
				if ((currentPosition>0xff-parameters.flapperValveStandAloneMinimumPosition))
   128fa:	687b      	ldr	r3, [r7, #4]
   128fc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   12900:	461a      	mov	r2, r3
   12902:	687b      	ldr	r3, [r7, #4]
   12904:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   12908:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
   1290c:	429a      	cmp	r2, r3
   1290e:	dd0c      	ble.n	1292a <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x5e>
				{
					StartControlling(0xff-parameters.flapperValveStandAloneMinimumPosition);
   12910:	687b      	ldr	r3, [r7, #4]
   12912:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   12916:	43db      	mvns	r3, r3
   12918:	b2db      	uxtb	r3, r3
   1291a:	4619      	mov	r1, r3
   1291c:	6878      	ldr	r0, [r7, #4]
   1291e:	4b19      	ldr	r3, [pc, #100]	; (12984 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb8>)
   12920:	4798      	blx	r3
					standAloneReturning=true;
   12922:	687b      	ldr	r3, [r7, #4]
   12924:	2201      	movs	r2, #1
   12926:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				}
				else
				{
					
				}
				currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
   1292a:	687b      	ldr	r3, [r7, #4]
   1292c:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   12930:	43db      	mvns	r3, r3
   12932:	b2da      	uxtb	r2, r3
   12934:	687b      	ldr	r3, [r7, #4]
   12936:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				standAloneActivated=true;
   1293a:	687b      	ldr	r3, [r7, #4]
   1293c:	2201      	movs	r2, #1
   1293e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
   12942:	e013      	b.n	1296c <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
		
		
	} 
	else
	{
		standAloneMode=false;
   12944:	687b      	ldr	r3, [r7, #4]
   12946:	2200      	movs	r2, #0
   12948:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (standAloneActivated)
   1294c:	687b      	ldr	r3, [r7, #4]
   1294e:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   12952:	2b00      	cmp	r3, #0
   12954:	d007      	beq.n	12966 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x9a>
		{
		//	StartControlling(parameters.flapperValveMinimumPosition);
			standAloneActivated=false;
   12956:	687b      	ldr	r3, [r7, #4]
   12958:	2200      	movs	r2, #0
   1295a:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			standAloneReturning=false;
   1295e:	687b      	ldr	r3, [r7, #4]
   12960:	2200      	movs	r2, #0
   12962:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		} 
		else
		{
		
		}
			ControlMovement_AND_NBC();
   12966:	6878      	ldr	r0, [r7, #4]
   12968:	4b05      	ldr	r3, [pc, #20]	; (12980 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
   1296a:	4798      	blx	r3
		
	}
	return standAloneMode;
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
}
   12972:	4618      	mov	r0, r3
   12974:	3708      	adds	r7, #8
   12976:	46bd      	mov	sp, r7
   12978:	bd80      	pop	{r7, pc}
   1297a:	bf00      	nop
   1297c:	00012989 	.word	0x00012989
   12980:	00012755 	.word	0x00012755
   12984:	000131d9 	.word	0x000131d9

00012988 <_ZN22FlapperValveController16IsStandAloneModeEv>:

bool	FlapperValveController::IsStandAloneMode(){
   12988:	b480      	push	{r7}
   1298a:	b085      	sub	sp, #20
   1298c:	af00      	add	r7, sp, #0
   1298e:	6078      	str	r0, [r7, #4]
	
	bool result=false;
   12990:	2300      	movs	r3, #0
   12992:	73fb      	strb	r3, [r7, #15]
	if (partner!=NULL)
   12994:	687b      	ldr	r3, [r7, #4]
   12996:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   1299a:	2b00      	cmp	r3, #0
   1299c:	d011      	beq.n	129c2 <_ZN22FlapperValveController16IsStandAloneModeEv+0x3a>
	{
		if (partner->isOK)
   1299e:	687b      	ldr	r3, [r7, #4]
   129a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   129a4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   129a8:	b2db      	uxtb	r3, r3
   129aa:	2b00      	cmp	r3, #0
   129ac:	d006      	beq.n	129bc <_ZN22FlapperValveController16IsStandAloneModeEv+0x34>
		{
			result=partner->dataStruct.controlOutputs.iAlcFvStandAloneOut;
   129ae:	687b      	ldr	r3, [r7, #4]
   129b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   129b4:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
   129b8:	73fb      	strb	r3, [r7, #15]
   129ba:	e004      	b.n	129c6 <_ZN22FlapperValveController16IsStandAloneModeEv+0x3e>
		}
		else
		{
			result=true;
   129bc:	2301      	movs	r3, #1
   129be:	73fb      	strb	r3, [r7, #15]
   129c0:	e001      	b.n	129c6 <_ZN22FlapperValveController16IsStandAloneModeEv+0x3e>
		}
	} 
	else
	{
		result=true;
   129c2:	2301      	movs	r3, #1
   129c4:	73fb      	strb	r3, [r7, #15]
	}
	


	return result;
   129c6:	7bfb      	ldrb	r3, [r7, #15]
}
   129c8:	4618      	mov	r0, r3
   129ca:	3714      	adds	r7, #20
   129cc:	46bd      	mov	sp, r7
   129ce:	bc80      	pop	{r7}
   129d0:	4770      	bx	lr

000129d2 <_ZN22FlapperValveController10SetPartnerEPS_>:



void FlapperValveController::SetPartner(FlapperValveController *part){
   129d2:	b480      	push	{r7}
   129d4:	b083      	sub	sp, #12
   129d6:	af00      	add	r7, sp, #0
   129d8:	6078      	str	r0, [r7, #4]
   129da:	6039      	str	r1, [r7, #0]
	partner=part;
   129dc:	687b      	ldr	r3, [r7, #4]
   129de:	683a      	ldr	r2, [r7, #0]
   129e0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
   129e4:	bf00      	nop
   129e6:	370c      	adds	r7, #12
   129e8:	46bd      	mov	sp, r7
   129ea:	bc80      	pop	{r7}
   129ec:	4770      	bx	lr
	...

000129f0 <_ZN22FlapperValveController14CheckIsClosingEv>:
bool FlapperValveController::CheckIsClosing(void){
   129f0:	b580      	push	{r7, lr}
   129f2:	b082      	sub	sp, #8
   129f4:	af00      	add	r7, sp, #0
   129f6:	6078      	str	r0, [r7, #4]
		if ((((setpoint<6)&(currentPosition<6))|((setpoint>250)&(currentPosition>245)))&((!closing)&(flapperValveIsMoving)))
   129f8:	687b      	ldr	r3, [r7, #4]
   129fa:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   129fe:	2b05      	cmp	r3, #5
   12a00:	bfd4      	ite	le
   12a02:	2301      	movle	r3, #1
   12a04:	2300      	movgt	r3, #0
   12a06:	b2da      	uxtb	r2, r3
   12a08:	687b      	ldr	r3, [r7, #4]
   12a0a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   12a0e:	2b05      	cmp	r3, #5
   12a10:	bfd4      	ite	le
   12a12:	2301      	movle	r3, #1
   12a14:	2300      	movgt	r3, #0
   12a16:	b2db      	uxtb	r3, r3
   12a18:	4013      	ands	r3, r2
   12a1a:	b2da      	uxtb	r2, r3
   12a1c:	687b      	ldr	r3, [r7, #4]
   12a1e:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   12a22:	2bfa      	cmp	r3, #250	; 0xfa
   12a24:	bfcc      	ite	gt
   12a26:	2301      	movgt	r3, #1
   12a28:	2300      	movle	r3, #0
   12a2a:	b2d9      	uxtb	r1, r3
   12a2c:	687b      	ldr	r3, [r7, #4]
   12a2e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   12a32:	2bf5      	cmp	r3, #245	; 0xf5
   12a34:	bfcc      	ite	gt
   12a36:	2301      	movgt	r3, #1
   12a38:	2300      	movle	r3, #0
   12a3a:	b2db      	uxtb	r3, r3
   12a3c:	400b      	ands	r3, r1
   12a3e:	b2db      	uxtb	r3, r3
   12a40:	4313      	orrs	r3, r2
   12a42:	b2db      	uxtb	r3, r3
   12a44:	461a      	mov	r2, r3
   12a46:	687b      	ldr	r3, [r7, #4]
   12a48:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   12a4c:	f083 0301 	eor.w	r3, r3, #1
   12a50:	b2db      	uxtb	r3, r3
   12a52:	4619      	mov	r1, r3
   12a54:	687b      	ldr	r3, [r7, #4]
   12a56:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   12a5a:	b2db      	uxtb	r3, r3
   12a5c:	400b      	ands	r3, r1
   12a5e:	4013      	ands	r3, r2
   12a60:	2b00      	cmp	r3, #0
   12a62:	bf14      	ite	ne
   12a64:	2301      	movne	r3, #1
   12a66:	2300      	moveq	r3, #0
   12a68:	b2db      	uxtb	r3, r3
   12a6a:	2b00      	cmp	r3, #0
   12a6c:	d01f      	beq.n	12aae <_ZN22FlapperValveController14CheckIsClosingEv+0xbe>
		{
			if (valve_ID==0)
   12a6e:	687b      	ldr	r3, [r7, #4]
   12a70:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   12a74:	2b00      	cmp	r3, #0
   12a76:	d105      	bne.n	12a84 <_ZN22FlapperValveController14CheckIsClosingEv+0x94>
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
   12a78:	22c8      	movs	r2, #200	; 0xc8
   12a7a:	4910      	ldr	r1, [pc, #64]	; (12abc <_ZN22FlapperValveController14CheckIsClosingEv+0xcc>)
   12a7c:	4810      	ldr	r0, [pc, #64]	; (12ac0 <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
   12a7e:	4b11      	ldr	r3, [pc, #68]	; (12ac4 <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
   12a80:	4798      	blx	r3
   12a82:	e004      	b.n	12a8e <_ZN22FlapperValveController14CheckIsClosingEv+0x9e>
			} 
			else
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
   12a84:	22c8      	movs	r2, #200	; 0xc8
   12a86:	4910      	ldr	r1, [pc, #64]	; (12ac8 <_ZN22FlapperValveController14CheckIsClosingEv+0xd8>)
   12a88:	480d      	ldr	r0, [pc, #52]	; (12ac0 <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
   12a8a:	4b0e      	ldr	r3, [pc, #56]	; (12ac4 <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
   12a8c:	4798      	blx	r3
			}
		
			fullClosedTimeout=false;
   12a8e:	687b      	ldr	r3, [r7, #4]
   12a90:	2200      	movs	r2, #0
   12a92:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			gotSetpoint=false;
   12a96:	687b      	ldr	r3, [r7, #4]
   12a98:	2200      	movs	r2, #0
   12a9a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
			closing=true;
   12a9e:	687b      	ldr	r3, [r7, #4]
   12aa0:	2201      	movs	r2, #1
   12aa2:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
			unLockTimeout=true;
   12aa6:	687b      	ldr	r3, [r7, #4]
   12aa8:	2201      	movs	r2, #1
   12aaa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		}
		return closing;
   12aae:	687b      	ldr	r3, [r7, #4]
   12ab0:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
	
}
   12ab4:	4618      	mov	r0, r3
   12ab6:	3708      	adds	r7, #8
   12ab8:	46bd      	mov	sp, r7
   12aba:	bd80      	pop	{r7, pc}
   12abc:	00012495 	.word	0x00012495
   12ac0:	200054a4 	.word	0x200054a4
   12ac4:	00010715 	.word	0x00010715
   12ac8:	000124b5 	.word	0x000124b5

00012acc <_ZN22FlapperValveController15ControlMovementEv>:

uint8_t FlapperValveController::ControlMovement(){
   12acc:	b590      	push	{r4, r7, lr}
   12ace:	b083      	sub	sp, #12
   12ad0:	af00      	add	r7, sp, #0
   12ad2:	6078      	str	r0, [r7, #4]
	if (isControlling)
   12ad4:	687b      	ldr	r3, [r7, #4]
   12ad6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
   12ada:	2b00      	cmp	r3, #0
   12adc:	f000 80c9 	beq.w	12c72 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
	{	
		if (((dataStruct.inputStatus.limit[0]|dataStruct.inputStatus.limit[1])&(closing))&(unLockTimeout))
   12ae0:	687b      	ldr	r3, [r7, #4]
   12ae2:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
   12ae6:	687b      	ldr	r3, [r7, #4]
   12ae8:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
   12aec:	4313      	orrs	r3, r2
   12aee:	b2db      	uxtb	r3, r3
   12af0:	461a      	mov	r2, r3
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   12af8:	4013      	ands	r3, r2
   12afa:	687a      	ldr	r2, [r7, #4]
   12afc:	f892 2099 	ldrb.w	r2, [r2, #153]	; 0x99
   12b00:	b2d2      	uxtb	r2, r2
   12b02:	4013      	ands	r3, r2
   12b04:	2b00      	cmp	r3, #0
   12b06:	bf14      	ite	ne
   12b08:	2301      	movne	r3, #1
   12b0a:	2300      	moveq	r3, #0
   12b0c:	b2db      	uxtb	r3, r3
   12b0e:	2b00      	cmp	r3, #0
   12b10:	d003      	beq.n	12b1a <_ZN22FlapperValveController15ControlMovementEv+0x4e>
		{
				StopValveAtLimit();
   12b12:	6878      	ldr	r0, [r7, #4]
   12b14:	4b59      	ldr	r3, [pc, #356]	; (12c7c <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
   12b16:	4798      	blx	r3
   12b18:	e0ab      	b.n	12c72 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>

		} 
		else
		{
			
			CheckIsClosing();
   12b1a:	6878      	ldr	r0, [r7, #4]
   12b1c:	4b58      	ldr	r3, [pc, #352]	; (12c80 <_ZN22FlapperValveController15ControlMovementEv+0x1b4>)
   12b1e:	4798      	blx	r3
			if ((abs(currentPosition-setpoint)>tolerance)|(closing))
   12b20:	687b      	ldr	r3, [r7, #4]
   12b22:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   12b26:	461a      	mov	r2, r3
   12b28:	687b      	ldr	r3, [r7, #4]
   12b2a:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   12b2e:	1ad3      	subs	r3, r2, r3
   12b30:	2b00      	cmp	r3, #0
   12b32:	bfb8      	it	lt
   12b34:	425b      	neglt	r3, r3
   12b36:	687a      	ldr	r2, [r7, #4]
   12b38:	f892 20a0 	ldrb.w	r2, [r2, #160]	; 0xa0
   12b3c:	4293      	cmp	r3, r2
   12b3e:	bfcc      	ite	gt
   12b40:	2301      	movgt	r3, #1
   12b42:	2300      	movle	r3, #0
   12b44:	b2db      	uxtb	r3, r3
   12b46:	461a      	mov	r2, r3
   12b48:	687b      	ldr	r3, [r7, #4]
   12b4a:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   12b4e:	4313      	orrs	r3, r2
   12b50:	2b00      	cmp	r3, #0
   12b52:	d078      	beq.n	12c46 <_ZN22FlapperValveController15ControlMovementEv+0x17a>
			{
				if (IsFlapperMoving())
   12b54:	6878      	ldr	r0, [r7, #4]
   12b56:	4b4b      	ldr	r3, [pc, #300]	; (12c84 <_ZN22FlapperValveController15ControlMovementEv+0x1b8>)
   12b58:	4798      	blx	r3
   12b5a:	4603      	mov	r3, r0
   12b5c:	2b00      	cmp	r3, #0
   12b5e:	d04a      	beq.n	12bf6 <_ZN22FlapperValveController15ControlMovementEv+0x12a>
				{
					if (closing)
   12b60:	687b      	ldr	r3, [r7, #4]
   12b62:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   12b66:	2b00      	cmp	r3, #0
   12b68:	d00e      	beq.n	12b88 <_ZN22FlapperValveController15ControlMovementEv+0xbc>
					{
						if (keepControlling)
   12b6a:	687b      	ldr	r3, [r7, #4]
   12b6c:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
   12b70:	2b00      	cmp	r3, #0
   12b72:	d053      	beq.n	12c1c <_ZN22FlapperValveController15ControlMovementEv+0x150>
						{
							if (fullClosedTimeout)
   12b74:	687b      	ldr	r3, [r7, #4]
   12b76:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   12b7a:	b2db      	uxtb	r3, r3
   12b7c:	2b00      	cmp	r3, #0
   12b7e:	d04d      	beq.n	12c1c <_ZN22FlapperValveController15ControlMovementEv+0x150>
							{
								StopValveAtLimit();
   12b80:	6878      	ldr	r0, [r7, #4]
   12b82:	4b3e      	ldr	r3, [pc, #248]	; (12c7c <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
   12b84:	4798      	blx	r3
   12b86:	e049      	b.n	12c1c <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
					} 
					else
					{
						
						if (lastDirection!=CalculateDirection())
   12b88:	687b      	ldr	r3, [r7, #4]
   12b8a:	f893 40b4 	ldrb.w	r4, [r3, #180]	; 0xb4
   12b8e:	6878      	ldr	r0, [r7, #4]
   12b90:	4b3d      	ldr	r3, [pc, #244]	; (12c88 <_ZN22FlapperValveController15ControlMovementEv+0x1bc>)
   12b92:	4798      	blx	r3
   12b94:	4603      	mov	r3, r0
   12b96:	429c      	cmp	r4, r3
   12b98:	bf14      	ite	ne
   12b9a:	2301      	movne	r3, #1
   12b9c:	2300      	moveq	r3, #0
   12b9e:	b2db      	uxtb	r3, r3
   12ba0:	2b00      	cmp	r3, #0
   12ba2:	d00a      	beq.n	12bba <_ZN22FlapperValveController15ControlMovementEv+0xee>
						{
							StopMotor();
   12ba4:	6878      	ldr	r0, [r7, #4]
   12ba6:	4b39      	ldr	r3, [pc, #228]	; (12c8c <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
   12ba8:	4798      	blx	r3
							RemoveTimeoutTask();
   12baa:	6878      	ldr	r0, [r7, #4]
   12bac:	4b38      	ldr	r3, [pc, #224]	; (12c90 <_ZN22FlapperValveController15ControlMovementEv+0x1c4>)
   12bae:	4798      	blx	r3
							keepControlling=true;
   12bb0:	687b      	ldr	r3, [r7, #4]
   12bb2:	2201      	movs	r2, #1
   12bb4:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
   12bb8:	e030      	b.n	12c1c <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							if (timeoutFlapperValveController)
   12bba:	687b      	ldr	r3, [r7, #4]
   12bbc:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   12bc0:	b2db      	uxtb	r3, r3
   12bc2:	2b00      	cmp	r3, #0
   12bc4:	d003      	beq.n	12bce <_ZN22FlapperValveController15ControlMovementEv+0x102>
							{
								StopMotor();
   12bc6:	6878      	ldr	r0, [r7, #4]
   12bc8:	4b30      	ldr	r3, [pc, #192]	; (12c8c <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
   12bca:	4798      	blx	r3
   12bcc:	e026      	b.n	12c1c <_ZN22FlapperValveController15ControlMovementEv+0x150>
								
							}
							else
							{
								if (keepControlling)
   12bce:	687b      	ldr	r3, [r7, #4]
   12bd0:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
   12bd4:	2b00      	cmp	r3, #0
   12bd6:	d021      	beq.n	12c1c <_ZN22FlapperValveController15ControlMovementEv+0x150>
								{
									if (timeoutKeepControlling)
   12bd8:	687b      	ldr	r3, [r7, #4]
   12bda:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   12bde:	b2db      	uxtb	r3, r3
   12be0:	2b00      	cmp	r3, #0
   12be2:	d003      	beq.n	12bec <_ZN22FlapperValveController15ControlMovementEv+0x120>
									{
										StopMotor();
   12be4:	6878      	ldr	r0, [r7, #4]
   12be6:	4b29      	ldr	r3, [pc, #164]	; (12c8c <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
   12be8:	4798      	blx	r3
   12bea:	e017      	b.n	12c1c <_ZN22FlapperValveController15ControlMovementEv+0x150>
									}
									else
									{
										KeepControlling();
   12bec:	2100      	movs	r1, #0
   12bee:	6878      	ldr	r0, [r7, #4]
   12bf0:	4b28      	ldr	r3, [pc, #160]	; (12c94 <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
   12bf2:	4798      	blx	r3
   12bf4:	e012      	b.n	12c1c <_ZN22FlapperValveController15ControlMovementEv+0x150>
					}
					
				}
				else
				{
					if (keepControlling)
   12bf6:	687b      	ldr	r3, [r7, #4]
   12bf8:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
   12bfc:	2b00      	cmp	r3, #0
   12bfe:	d00d      	beq.n	12c1c <_ZN22FlapperValveController15ControlMovementEv+0x150>
					{
						if (timeoutKeepControlling)
   12c00:	687b      	ldr	r3, [r7, #4]
   12c02:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
   12c06:	b2db      	uxtb	r3, r3
   12c08:	2b00      	cmp	r3, #0
   12c0a:	d003      	beq.n	12c14 <_ZN22FlapperValveController15ControlMovementEv+0x148>
						{
							StopValveinBetween();
   12c0c:	6878      	ldr	r0, [r7, #4]
   12c0e:	4b22      	ldr	r3, [pc, #136]	; (12c98 <_ZN22FlapperValveController15ControlMovementEv+0x1cc>)
   12c10:	4798      	blx	r3
   12c12:	e003      	b.n	12c1c <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							KeepControlling();
   12c14:	2100      	movs	r1, #0
   12c16:	6878      	ldr	r0, [r7, #4]
   12c18:	4b1e      	ldr	r3, [pc, #120]	; (12c94 <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
   12c1a:	4798      	blx	r3
						
					}
					
				}
				
				if ((abs(currentPosition-setpoint)>tolerance))
   12c1c:	687b      	ldr	r3, [r7, #4]
   12c1e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   12c22:	461a      	mov	r2, r3
   12c24:	687b      	ldr	r3, [r7, #4]
   12c26:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   12c2a:	1ad3      	subs	r3, r2, r3
   12c2c:	2b00      	cmp	r3, #0
   12c2e:	bfb8      	it	lt
   12c30:	425b      	neglt	r3, r3
   12c32:	687a      	ldr	r2, [r7, #4]
   12c34:	f892 20a0 	ldrb.w	r2, [r2, #160]	; 0xa0
   12c38:	4293      	cmp	r3, r2
   12c3a:	dd1a      	ble.n	12c72 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				{
					gotSetpoint=false;
   12c3c:	687b      	ldr	r3, [r7, #4]
   12c3e:	2200      	movs	r2, #0
   12c40:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
   12c44:	e015      	b.n	12c72 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				
				
			}
			else
			{
				if (closing)
   12c46:	687b      	ldr	r3, [r7, #4]
   12c48:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   12c4c:	2b00      	cmp	r3, #0
   12c4e:	d009      	beq.n	12c64 <_ZN22FlapperValveController15ControlMovementEv+0x198>
				{
					if (fullClosedTimeout)
   12c50:	687b      	ldr	r3, [r7, #4]
   12c52:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   12c56:	b2db      	uxtb	r3, r3
   12c58:	2b00      	cmp	r3, #0
   12c5a:	d00a      	beq.n	12c72 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
						StopValveAtLimit();
   12c5c:	6878      	ldr	r0, [r7, #4]
   12c5e:	4b07      	ldr	r3, [pc, #28]	; (12c7c <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
   12c60:	4798      	blx	r3
   12c62:	e006      	b.n	12c72 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
					}
				} 
				else
				{
					StopValveinBetween();
   12c64:	6878      	ldr	r0, [r7, #4]
   12c66:	4b0c      	ldr	r3, [pc, #48]	; (12c98 <_ZN22FlapperValveController15ControlMovementEv+0x1cc>)
   12c68:	4798      	blx	r3
					gotSetpoint=true;
   12c6a:	687b      	ldr	r3, [r7, #4]
   12c6c:	2201      	movs	r2, #1
   12c6e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
		
	} 
	else
	{
	}
	return 0;
   12c72:	2300      	movs	r3, #0
	
}
   12c74:	4618      	mov	r0, r3
   12c76:	370c      	adds	r7, #12
   12c78:	46bd      	mov	sp, r7
   12c7a:	bd90      	pop	{r4, r7, pc}
   12c7c:	00012fe1 	.word	0x00012fe1
   12c80:	000129f1 	.word	0x000129f1
   12c84:	00012f39 	.word	0x00012f39
   12c88:	000126c1 	.word	0x000126c1
   12c8c:	00012f0d 	.word	0x00012f0d
   12c90:	00013721 	.word	0x00013721
   12c94:	0001339d 	.word	0x0001339d
   12c98:	00013079 	.word	0x00013079

00012c9c <_ZN22FlapperValveController18ResetValvePositionEv>:
void FlapperValveController::ResetValvePosition(void){
   12c9c:	b580      	push	{r7, lr}
   12c9e:	b084      	sub	sp, #16
   12ca0:	af00      	add	r7, sp, #0
   12ca2:	6078      	str	r0, [r7, #4]
	uint8_t localSetpoint,localPosition;
	bool pinLevel=gpio_get_pin_level(LED0);
   12ca4:	2052      	movs	r0, #82	; 0x52
   12ca6:	4b60      	ldr	r3, [pc, #384]	; (12e28 <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
   12ca8:	4798      	blx	r3
   12caa:	4603      	mov	r3, r0
   12cac:	73fb      	strb	r3, [r7, #15]
	if (IsInvalidPosition())
   12cae:	6878      	ldr	r0, [r7, #4]
   12cb0:	4b5e      	ldr	r3, [pc, #376]	; (12e2c <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
   12cb2:	4798      	blx	r3
   12cb4:	4603      	mov	r3, r0
   12cb6:	2b00      	cmp	r3, #0
   12cb8:	f000 80b2 	beq.w	12e20 <_ZN22FlapperValveController18ResetValvePositionEv+0x184>
	{
		
		localSetpoint=currentMaximum;
   12cbc:	687b      	ldr	r3, [r7, #4]
   12cbe:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
   12cc2:	73bb      	strb	r3, [r7, #14]
		
		singlefv->SetEnable(false);
   12cc4:	687b      	ldr	r3, [r7, #4]
   12cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12cca:	2100      	movs	r1, #0
   12ccc:	4618      	mov	r0, r3
   12cce:	4b58      	ldr	r3, [pc, #352]	; (12e30 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
   12cd0:	4798      	blx	r3
		singlefv->SetInvalidPosition(false);
   12cd2:	687b      	ldr	r3, [r7, #4]
   12cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12cd8:	2100      	movs	r1, #0
   12cda:	4618      	mov	r0, r3
   12cdc:	4b55      	ldr	r3, [pc, #340]	; (12e34 <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
   12cde:	4798      	blx	r3
		singlefv->ClearMoveFault(false);
   12ce0:	687b      	ldr	r3, [r7, #4]
   12ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12ce6:	2100      	movs	r1, #0
   12ce8:	4618      	mov	r0, r3
   12cea:	4b53      	ldr	r3, [pc, #332]	; (12e38 <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
   12cec:	4798      	blx	r3
		delay_ms(100);
   12cee:	2064      	movs	r0, #100	; 0x64
   12cf0:	4b52      	ldr	r3, [pc, #328]	; (12e3c <_ZN22FlapperValveController18ResetValvePositionEv+0x1a0>)
   12cf2:	4798      	blx	r3
		if (singlefv->ReadActualPosition()>localSetpoint)
   12cf4:	687b      	ldr	r3, [r7, #4]
   12cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12cfa:	4618      	mov	r0, r3
   12cfc:	4b50      	ldr	r3, [pc, #320]	; (12e40 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
   12cfe:	4798      	blx	r3
   12d00:	4603      	mov	r3, r0
   12d02:	461a      	mov	r2, r3
   12d04:	7bbb      	ldrb	r3, [r7, #14]
   12d06:	429a      	cmp	r2, r3
   12d08:	bfcc      	ite	gt
   12d0a:	2301      	movgt	r3, #1
   12d0c:	2300      	movle	r3, #0
   12d0e:	b2db      	uxtb	r3, r3
   12d10:	2b00      	cmp	r3, #0
   12d12:	d007      	beq.n	12d24 <_ZN22FlapperValveController18ResetValvePositionEv+0x88>
		{
			singlefv->SetDirection(true);
   12d14:	687b      	ldr	r3, [r7, #4]
   12d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12d1a:	2101      	movs	r1, #1
   12d1c:	4618      	mov	r0, r3
   12d1e:	4b49      	ldr	r3, [pc, #292]	; (12e44 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a8>)
   12d20:	4798      	blx	r3
   12d22:	e006      	b.n	12d32 <_ZN22FlapperValveController18ResetValvePositionEv+0x96>
		}
		else
		{
			singlefv->SetDirection(false);
   12d24:	687b      	ldr	r3, [r7, #4]
   12d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12d2a:	2100      	movs	r1, #0
   12d2c:	4618      	mov	r0, r3
   12d2e:	4b45      	ldr	r3, [pc, #276]	; (12e44 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a8>)
   12d30:	4798      	blx	r3
		}
		singlefv->SetInvalidPosition(true);
   12d32:	687b      	ldr	r3, [r7, #4]
   12d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12d38:	2101      	movs	r1, #1
   12d3a:	4618      	mov	r0, r3
   12d3c:	4b3d      	ldr	r3, [pc, #244]	; (12e34 <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
   12d3e:	4798      	blx	r3
		singlefv->ClearMoveFault(true);
   12d40:	687b      	ldr	r3, [r7, #4]
   12d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12d46:	2101      	movs	r1, #1
   12d48:	4618      	mov	r0, r3
   12d4a:	4b3b      	ldr	r3, [pc, #236]	; (12e38 <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
   12d4c:	4798      	blx	r3
		singlefv->WriteSetpoint(localSetpoint);
   12d4e:	687b      	ldr	r3, [r7, #4]
   12d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12d54:	7bba      	ldrb	r2, [r7, #14]
   12d56:	4611      	mov	r1, r2
   12d58:	4618      	mov	r0, r3
   12d5a:	4b3b      	ldr	r3, [pc, #236]	; (12e48 <_ZN22FlapperValveController18ResetValvePositionEv+0x1ac>)
   12d5c:	4798      	blx	r3
		

		currentPosition=singlefv->ReadActualPosition();
   12d5e:	687b      	ldr	r3, [r7, #4]
   12d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12d64:	4618      	mov	r0, r3
   12d66:	4b36      	ldr	r3, [pc, #216]	; (12e40 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
   12d68:	4798      	blx	r3
   12d6a:	4603      	mov	r3, r0
   12d6c:	461a      	mov	r2, r3
   12d6e:	687b      	ldr	r3, [r7, #4]
   12d70:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		
		resetTimeout=false;
   12d74:	687b      	ldr	r3, [r7, #4]
   12d76:	2200      	movs	r2, #0
   12d78:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		if (valve_ID==0)
   12d7c:	687b      	ldr	r3, [r7, #4]
   12d7e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   12d82:	2b00      	cmp	r3, #0
   12d84:	d106      	bne.n	12d94 <_ZN22FlapperValveController18ResetValvePositionEv+0xf8>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve1Timeout),1000);
   12d86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12d8a:	4930      	ldr	r1, [pc, #192]	; (12e4c <_ZN22FlapperValveController18ResetValvePositionEv+0x1b0>)
   12d8c:	4830      	ldr	r0, [pc, #192]	; (12e50 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b4>)
   12d8e:	4b31      	ldr	r3, [pc, #196]	; (12e54 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b8>)
   12d90:	4798      	blx	r3
   12d92:	e005      	b.n	12da0 <_ZN22FlapperValveController18ResetValvePositionEv+0x104>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve2Timeout),1000);
   12d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12d98:	492f      	ldr	r1, [pc, #188]	; (12e58 <_ZN22FlapperValveController18ResetValvePositionEv+0x1bc>)
   12d9a:	482d      	ldr	r0, [pc, #180]	; (12e50 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b4>)
   12d9c:	4b2d      	ldr	r3, [pc, #180]	; (12e54 <_ZN22FlapperValveController18ResetValvePositionEv+0x1b8>)
   12d9e:	4798      	blx	r3
		}
	
		
		singlefv->SetEnable(true);
   12da0:	687b      	ldr	r3, [r7, #4]
   12da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12da6:	2101      	movs	r1, #1
   12da8:	4618      	mov	r0, r3
   12daa:	4b21      	ldr	r3, [pc, #132]	; (12e30 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
   12dac:	4798      	blx	r3
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
   12dae:	687b      	ldr	r3, [r7, #4]
   12db0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   12db4:	461a      	mov	r2, r3
   12db6:	7bbb      	ldrb	r3, [r7, #14]
   12db8:	1ad3      	subs	r3, r2, r3
   12dba:	2b00      	cmp	r3, #0
   12dbc:	bfb8      	it	lt
   12dbe:	425b      	neglt	r3, r3
   12dc0:	2b06      	cmp	r3, #6
   12dc2:	bfcc      	ite	gt
   12dc4:	2301      	movgt	r3, #1
   12dc6:	2300      	movle	r3, #0
   12dc8:	b2db      	uxtb	r3, r3
   12dca:	461a      	mov	r2, r3
   12dcc:	687b      	ldr	r3, [r7, #4]
   12dce:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
   12dd2:	b2db      	uxtb	r3, r3
   12dd4:	f083 0301 	eor.w	r3, r3, #1
   12dd8:	b2db      	uxtb	r3, r3
   12dda:	4013      	ands	r3, r2
   12ddc:	2b00      	cmp	r3, #0
   12dde:	bf14      	ite	ne
   12de0:	2301      	movne	r3, #1
   12de2:	2300      	moveq	r3, #0
   12de4:	b2db      	uxtb	r3, r3
   12de6:	2b00      	cmp	r3, #0
   12de8:	d00e      	beq.n	12e08 <_ZN22FlapperValveController18ResetValvePositionEv+0x16c>

		{
			gpio_toggle_pin_level(LED0);
   12dea:	2052      	movs	r0, #82	; 0x52
   12dec:	4b1b      	ldr	r3, [pc, #108]	; (12e5c <_ZN22FlapperValveController18ResetValvePositionEv+0x1c0>)
   12dee:	4798      	blx	r3
			currentPosition=singlefv->ReadActualPosition();
   12df0:	687b      	ldr	r3, [r7, #4]
   12df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12df6:	4618      	mov	r0, r3
   12df8:	4b11      	ldr	r3, [pc, #68]	; (12e40 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
   12dfa:	4798      	blx	r3
   12dfc:	4603      	mov	r3, r0
   12dfe:	461a      	mov	r2, r3
   12e00:	687b      	ldr	r3, [r7, #4]
   12e02:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
   12e06:	e7d2      	b.n	12dae <_ZN22FlapperValveController18ResetValvePositionEv+0x112>

		}
		singlefv->SetEnable(false);
   12e08:	687b      	ldr	r3, [r7, #4]
   12e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12e0e:	2100      	movs	r1, #0
   12e10:	4618      	mov	r0, r3
   12e12:	4b07      	ldr	r3, [pc, #28]	; (12e30 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
   12e14:	4798      	blx	r3
		gpio_set_pin_level(LED0,pinLevel);
   12e16:	7bfb      	ldrb	r3, [r7, #15]
   12e18:	4619      	mov	r1, r3
   12e1a:	2052      	movs	r0, #82	; 0x52
   12e1c:	4b10      	ldr	r3, [pc, #64]	; (12e60 <_ZN22FlapperValveController18ResetValvePositionEv+0x1c4>)
   12e1e:	4798      	blx	r3
	} 
	else
	{
	}
}
   12e20:	bf00      	nop
   12e22:	3710      	adds	r7, #16
   12e24:	46bd      	mov	sp, r7
   12e26:	bd80      	pop	{r7, pc}
   12e28:	00012401 	.word	0x00012401
   12e2c:	000127bd 	.word	0x000127bd
   12e30:	00013b99 	.word	0x00013b99
   12e34:	00013d09 	.word	0x00013d09
   12e38:	00013c91 	.word	0x00013c91
   12e3c:	00003681 	.word	0x00003681
   12e40:	00013db9 	.word	0x00013db9
   12e44:	00013c19 	.word	0x00013c19
   12e48:	00013d81 	.word	0x00013d81
   12e4c:	000124d5 	.word	0x000124d5
   12e50:	200054a4 	.word	0x200054a4
   12e54:	00010715 	.word	0x00010715
   12e58:	000124f5 	.word	0x000124f5
   12e5c:	000123d1 	.word	0x000123d1
   12e60:	00012399 	.word	0x00012399

00012e64 <_ZN22FlapperValveController15CommandNBC_ModeEv>:

uint8_t FlapperValveController::CommandNBC_Mode(void){
   12e64:	b580      	push	{r7, lr}
   12e66:	b082      	sub	sp, #8
   12e68:	af00      	add	r7, sp, #0
   12e6a:	6078      	str	r0, [r7, #4]
	if (NBC_Activated)
   12e6c:	687b      	ldr	r3, [r7, #4]
   12e6e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   12e72:	2b00      	cmp	r3, #0
   12e74:	d014      	beq.n	12ea0 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x3c>
	{
		if (NBC_Mode)
   12e76:	687b      	ldr	r3, [r7, #4]
   12e78:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   12e7c:	2b00      	cmp	r3, #0
   12e7e:	d003      	beq.n	12e88 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x24>
		{
			ControlMovement();
   12e80:	6878      	ldr	r0, [r7, #4]
   12e82:	4b0e      	ldr	r3, [pc, #56]	; (12ebc <_ZN22FlapperValveController15CommandNBC_ModeEv+0x58>)
   12e84:	4798      	blx	r3
   12e86:	e013      	b.n	12eb0 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
		else
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
   12e88:	687b      	ldr	r3, [r7, #4]
   12e8a:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
   12e8e:	4619      	mov	r1, r3
   12e90:	6878      	ldr	r0, [r7, #4]
   12e92:	4b0b      	ldr	r3, [pc, #44]	; (12ec0 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
   12e94:	4798      	blx	r3
			NBC_Activated=false;
   12e96:	687b      	ldr	r3, [r7, #4]
   12e98:	2200      	movs	r2, #0
   12e9a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   12e9e:	e007      	b.n	12eb0 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
	} 
	else
	{
			StartControlling(255);
   12ea0:	21ff      	movs	r1, #255	; 0xff
   12ea2:	6878      	ldr	r0, [r7, #4]
   12ea4:	4b06      	ldr	r3, [pc, #24]	; (12ec0 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
   12ea6:	4798      	blx	r3
			NBC_Activated=true;
   12ea8:	687b      	ldr	r3, [r7, #4]
   12eaa:	2201      	movs	r2, #1
   12eac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	}

	return 0;
   12eb0:	2300      	movs	r3, #0
	
}
   12eb2:	4618      	mov	r0, r3
   12eb4:	3708      	adds	r7, #8
   12eb6:	46bd      	mov	sp, r7
   12eb8:	bd80      	pop	{r7, pc}
   12eba:	bf00      	nop
   12ebc:	00012acd 	.word	0x00012acd
   12ec0:	000131d9 	.word	0x000131d9

00012ec4 <_ZN22FlapperValveController9IsNBCModeEv>:

bool FlapperValveController::IsNBCMode(){
   12ec4:	b480      	push	{r7}
   12ec6:	b083      	sub	sp, #12
   12ec8:	af00      	add	r7, sp, #0
   12eca:	6078      	str	r0, [r7, #4]
	NBC_Mode=((dataStruct.inputStatus.cabin[0]&dataStruct.inputStatus.cabin[1])|NBC_Remote);
   12ecc:	687b      	ldr	r3, [r7, #4]
   12ece:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
   12ed2:	461a      	mov	r2, r3
   12ed4:	687b      	ldr	r3, [r7, #4]
   12ed6:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
   12eda:	4013      	ands	r3, r2
   12edc:	687a      	ldr	r2, [r7, #4]
   12ede:	f892 20bd 	ldrb.w	r2, [r2, #189]	; 0xbd
   12ee2:	4313      	orrs	r3, r2
   12ee4:	2b00      	cmp	r3, #0
   12ee6:	bf14      	ite	ne
   12ee8:	2301      	movne	r3, #1
   12eea:	2300      	moveq	r3, #0
   12eec:	b2da      	uxtb	r2, r3
   12eee:	687b      	ldr	r3, [r7, #4]
   12ef0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	currentMaximum=255;
   12ef4:	687b      	ldr	r3, [r7, #4]
   12ef6:	22ff      	movs	r2, #255	; 0xff
   12ef8:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	return NBC_Mode;
   12efc:	687b      	ldr	r3, [r7, #4]
   12efe:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
}
   12f02:	4618      	mov	r0, r3
   12f04:	370c      	adds	r7, #12
   12f06:	46bd      	mov	sp, r7
   12f08:	bc80      	pop	{r7}
   12f0a:	4770      	bx	lr

00012f0c <_ZN22FlapperValveController9StopMotorEv>:
	}
	return NBC_Remote;
}


uint8_t	FlapperValveController::StopMotor(){
   12f0c:	b580      	push	{r7, lr}
   12f0e:	b082      	sub	sp, #8
   12f10:	af00      	add	r7, sp, #0
   12f12:	6078      	str	r0, [r7, #4]
	singlefv->SetEnable(false);
   12f14:	687b      	ldr	r3, [r7, #4]
   12f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   12f1a:	2100      	movs	r1, #0
   12f1c:	4618      	mov	r0, r3
   12f1e:	4b05      	ldr	r3, [pc, #20]	; (12f34 <_ZN22FlapperValveController9StopMotorEv+0x28>)
   12f20:	4798      	blx	r3
	flapperValveIsMoving=false;
   12f22:	687b      	ldr	r3, [r7, #4]
   12f24:	2200      	movs	r2, #0
   12f26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	
	return 0;
   12f2a:	2300      	movs	r3, #0
}
   12f2c:	4618      	mov	r0, r3
   12f2e:	3708      	adds	r7, #8
   12f30:	46bd      	mov	sp, r7
   12f32:	bd80      	pop	{r7, pc}
   12f34:	00013b99 	.word	0x00013b99

00012f38 <_ZN22FlapperValveController15IsFlapperMovingEv>:

bool FlapperValveController::IsFlapperMoving(void){
   12f38:	b480      	push	{r7}
   12f3a:	b085      	sub	sp, #20
   12f3c:	af00      	add	r7, sp, #0
   12f3e:	6078      	str	r0, [r7, #4]
	bool_result=true;
   12f40:	687b      	ldr	r3, [r7, #4]
   12f42:	2201      	movs	r2, #1
   12f44:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	if (flapperValveIsMoving)
   12f48:	687b      	ldr	r3, [r7, #4]
   12f4a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   12f4e:	b2db      	uxtb	r3, r3
   12f50:	2b00      	cmp	r3, #0
   12f52:	d03c      	beq.n	12fce <_ZN22FlapperValveController15IsFlapperMovingEv+0x96>
	{
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   12f54:	2300      	movs	r3, #0
   12f56:	73fb      	strb	r3, [r7, #15]
   12f58:	7bfb      	ldrb	r3, [r7, #15]
   12f5a:	2b0e      	cmp	r3, #14
   12f5c:	dc26      	bgt.n	12fac <_ZN22FlapperValveController15IsFlapperMovingEv+0x74>
		{
			if (positions[valve_ID][i]==positions[valve_ID][i+1])
   12f5e:	687b      	ldr	r3, [r7, #4]
   12f60:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   12f64:	687a      	ldr	r2, [r7, #4]
   12f66:	3332      	adds	r3, #50	; 0x32
   12f68:	009b      	lsls	r3, r3, #2
   12f6a:	4413      	add	r3, r2
   12f6c:	685a      	ldr	r2, [r3, #4]
   12f6e:	7bfb      	ldrb	r3, [r7, #15]
   12f70:	4413      	add	r3, r2
   12f72:	781a      	ldrb	r2, [r3, #0]
   12f74:	687b      	ldr	r3, [r7, #4]
   12f76:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   12f7a:	6879      	ldr	r1, [r7, #4]
   12f7c:	3332      	adds	r3, #50	; 0x32
   12f7e:	009b      	lsls	r3, r3, #2
   12f80:	440b      	add	r3, r1
   12f82:	6859      	ldr	r1, [r3, #4]
   12f84:	7bfb      	ldrb	r3, [r7, #15]
   12f86:	3301      	adds	r3, #1
   12f88:	440b      	add	r3, r1
   12f8a:	781b      	ldrb	r3, [r3, #0]
   12f8c:	429a      	cmp	r2, r3
   12f8e:	d104      	bne.n	12f9a <_ZN22FlapperValveController15IsFlapperMovingEv+0x62>
			{
				bool_result=false;
   12f90:	687b      	ldr	r3, [r7, #4]
   12f92:	2200      	movs	r2, #0
   12f94:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
   12f98:	e004      	b.n	12fa4 <_ZN22FlapperValveController15IsFlapperMovingEv+0x6c>
			}
			else
			{
				bool_result=true;
   12f9a:	687b      	ldr	r3, [r7, #4]
   12f9c:	2201      	movs	r2, #1
   12f9e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
				break;
   12fa2:	e003      	b.n	12fac <_ZN22FlapperValveController15IsFlapperMovingEv+0x74>
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   12fa4:	7bfb      	ldrb	r3, [r7, #15]
   12fa6:	3301      	adds	r3, #1
   12fa8:	73fb      	strb	r3, [r7, #15]
   12faa:	e7d5      	b.n	12f58 <_ZN22FlapperValveController15IsFlapperMovingEv+0x20>
			}
			
		}
		flapperValveIsMoving&=bool_result;
   12fac:	687b      	ldr	r3, [r7, #4]
   12fae:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   12fb2:	b2db      	uxtb	r3, r3
   12fb4:	461a      	mov	r2, r3
   12fb6:	687b      	ldr	r3, [r7, #4]
   12fb8:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   12fbc:	4013      	ands	r3, r2
   12fbe:	2b00      	cmp	r3, #0
   12fc0:	bf14      	ite	ne
   12fc2:	2301      	movne	r3, #1
   12fc4:	2300      	moveq	r3, #0
   12fc6:	b2da      	uxtb	r2, r3
   12fc8:	687b      	ldr	r3, [r7, #4]
   12fca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	} 
	else
	{
	}
	return flapperValveIsMoving;
   12fce:	687b      	ldr	r3, [r7, #4]
   12fd0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   12fd4:	b2db      	uxtb	r3, r3
	
}
   12fd6:	4618      	mov	r0, r3
   12fd8:	3714      	adds	r7, #20
   12fda:	46bd      	mov	sp, r7
   12fdc:	bc80      	pop	{r7}
   12fde:	4770      	bx	lr

00012fe0 <_ZN22FlapperValveController16StopValveAtLimitEv>:

void	FlapperValveController::StopValveAtLimit(void){
   12fe0:	b580      	push	{r7, lr}
   12fe2:	b082      	sub	sp, #8
   12fe4:	af00      	add	r7, sp, #0
   12fe6:	6078      	str	r0, [r7, #4]
		if (closing)
   12fe8:	687b      	ldr	r3, [r7, #4]
   12fea:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
   12fee:	2b00      	cmp	r3, #0
   12ff0:	d003      	beq.n	12ffa <_ZN22FlapperValveController16StopValveAtLimitEv+0x1a>
		{
			closing=false;
   12ff2:	687b      	ldr	r3, [r7, #4]
   12ff4:	2200      	movs	r2, #0
   12ff6:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
		}
	
		StopMotor();
   12ffa:	6878      	ldr	r0, [r7, #4]
   12ffc:	4b17      	ldr	r3, [pc, #92]	; (1305c <_ZN22FlapperValveController16StopValveAtLimitEv+0x7c>)
   12ffe:	4798      	blx	r3
		if (valve_ID==0)
   13000:	687b      	ldr	r3, [r7, #4]
   13002:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   13006:	2b00      	cmp	r3, #0
   13008:	d108      	bne.n	1301c <_ZN22FlapperValveController16StopValveAtLimitEv+0x3c>
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
   1300a:	4915      	ldr	r1, [pc, #84]	; (13060 <_ZN22FlapperValveController16StopValveAtLimitEv+0x80>)
   1300c:	4815      	ldr	r0, [pc, #84]	; (13064 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   1300e:	4b16      	ldr	r3, [pc, #88]	; (13068 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   13010:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed));
   13012:	4916      	ldr	r1, [pc, #88]	; (1306c <_ZN22FlapperValveController16StopValveAtLimitEv+0x8c>)
   13014:	4813      	ldr	r0, [pc, #76]	; (13064 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   13016:	4b14      	ldr	r3, [pc, #80]	; (13068 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   13018:	4798      	blx	r3
   1301a:	e007      	b.n	1302c <_ZN22FlapperValveController16StopValveAtLimitEv+0x4c>
		} 
		else
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
   1301c:	4914      	ldr	r1, [pc, #80]	; (13070 <_ZN22FlapperValveController16StopValveAtLimitEv+0x90>)
   1301e:	4811      	ldr	r0, [pc, #68]	; (13064 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   13020:	4b11      	ldr	r3, [pc, #68]	; (13068 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   13022:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed));
   13024:	4913      	ldr	r1, [pc, #76]	; (13074 <_ZN22FlapperValveController16StopValveAtLimitEv+0x94>)
   13026:	480f      	ldr	r0, [pc, #60]	; (13064 <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
   13028:	4b0f      	ldr	r3, [pc, #60]	; (13068 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
   1302a:	4798      	blx	r3
		}
	
		timeoutFlapperValveController=false;
   1302c:	687b      	ldr	r3, [r7, #4]
   1302e:	2200      	movs	r2, #0
   13030:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		timeoutKeepControlling=false;
   13034:	687b      	ldr	r3, [r7, #4]
   13036:	2200      	movs	r2, #0
   13038:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		unLockTimeout=false;
   1303c:	687b      	ldr	r3, [r7, #4]
   1303e:	2200      	movs	r2, #0
   13040:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		paused=false;
   13044:	687b      	ldr	r3, [r7, #4]
   13046:	2200      	movs	r2, #0
   13048:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		keepControlling=false;
   1304c:	687b      	ldr	r3, [r7, #4]
   1304e:	2200      	movs	r2, #0
   13050:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
}
   13054:	bf00      	nop
   13056:	3708      	adds	r7, #8
   13058:	46bd      	mov	sp, r7
   1305a:	bd80      	pop	{r7, pc}
   1305c:	00012f0d 	.word	0x00012f0d
   13060:	0001243d 	.word	0x0001243d
   13064:	200054a4 	.word	0x200054a4
   13068:	000106bd 	.word	0x000106bd
   1306c:	00012495 	.word	0x00012495
   13070:	00012469 	.word	0x00012469
   13074:	000124b5 	.word	0x000124b5

00013078 <_ZN22FlapperValveController18StopValveinBetweenEv>:

void FlapperValveController::StopValveinBetween(void){
   13078:	b580      	push	{r7, lr}
   1307a:	b082      	sub	sp, #8
   1307c:	af00      	add	r7, sp, #0
   1307e:	6078      	str	r0, [r7, #4]
		StopMotor();
   13080:	6878      	ldr	r0, [r7, #4]
   13082:	4b0c      	ldr	r3, [pc, #48]	; (130b4 <_ZN22FlapperValveController18StopValveinBetweenEv+0x3c>)
   13084:	4798      	blx	r3
		RemoveTimeoutTask();
   13086:	6878      	ldr	r0, [r7, #4]
   13088:	4b0b      	ldr	r3, [pc, #44]	; (130b8 <_ZN22FlapperValveController18StopValveinBetweenEv+0x40>)
   1308a:	4798      	blx	r3
		timeoutFlapperValveController=false;
   1308c:	687b      	ldr	r3, [r7, #4]
   1308e:	2200      	movs	r2, #0
   13090:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		paused=false;
   13094:	687b      	ldr	r3, [r7, #4]
   13096:	2200      	movs	r2, #0
   13098:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		timeoutKeepControlling=false;
   1309c:	687b      	ldr	r3, [r7, #4]
   1309e:	2200      	movs	r2, #0
   130a0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		keepControlling=true;
   130a4:	687b      	ldr	r3, [r7, #4]
   130a6:	2201      	movs	r2, #1
   130a8:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
}
   130ac:	bf00      	nop
   130ae:	3708      	adds	r7, #8
   130b0:	46bd      	mov	sp, r7
   130b2:	bd80      	pop	{r7, pc}
   130b4:	00012f0d 	.word	0x00012f0d
   130b8:	00013721 	.word	0x00013721

000130bc <_ZN22FlapperValveController16CorrectToleranceEh>:



uint8_t	FlapperValveController::CorrectTolerance(uint8_t sp){
   130bc:	b580      	push	{r7, lr}
   130be:	b084      	sub	sp, #16
   130c0:	af00      	add	r7, sp, #0
   130c2:	6078      	str	r0, [r7, #4]
   130c4:	460b      	mov	r3, r1
   130c6:	70fb      	strb	r3, [r7, #3]
	float floatTolerance=FLAPPER_VALVE_CONTROL_LIMIT*((abs(127-sp)-128))/256;
   130c8:	78fb      	ldrb	r3, [r7, #3]
   130ca:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
   130ce:	2b00      	cmp	r3, #0
   130d0:	dd0c      	ble.n	130ec <_ZN22FlapperValveController16CorrectToleranceEh+0x30>
   130d2:	78fb      	ldrb	r3, [r7, #3]
   130d4:	43db      	mvns	r3, r3
   130d6:	009b      	lsls	r3, r3, #2
   130d8:	2b00      	cmp	r3, #0
   130da:	da00      	bge.n	130de <_ZN22FlapperValveController16CorrectToleranceEh+0x22>
   130dc:	33ff      	adds	r3, #255	; 0xff
   130de:	121b      	asrs	r3, r3, #8
   130e0:	461a      	mov	r2, r3
   130e2:	4b15      	ldr	r3, [pc, #84]	; (13138 <_ZN22FlapperValveController16CorrectToleranceEh+0x7c>)
   130e4:	4610      	mov	r0, r2
   130e6:	4798      	blx	r3
   130e8:	4603      	mov	r3, r0
   130ea:	e00b      	b.n	13104 <_ZN22FlapperValveController16CorrectToleranceEh+0x48>
   130ec:	78fb      	ldrb	r3, [r7, #3]
   130ee:	3bff      	subs	r3, #255	; 0xff
   130f0:	009b      	lsls	r3, r3, #2
   130f2:	2b00      	cmp	r3, #0
   130f4:	da00      	bge.n	130f8 <_ZN22FlapperValveController16CorrectToleranceEh+0x3c>
   130f6:	33ff      	adds	r3, #255	; 0xff
   130f8:	121b      	asrs	r3, r3, #8
   130fa:	461a      	mov	r2, r3
   130fc:	4b0e      	ldr	r3, [pc, #56]	; (13138 <_ZN22FlapperValveController16CorrectToleranceEh+0x7c>)
   130fe:	4610      	mov	r0, r2
   13100:	4798      	blx	r3
   13102:	4603      	mov	r3, r0
   13104:	60fb      	str	r3, [r7, #12]
	tolerance=(uint8_t)floatTolerance;
   13106:	4b0d      	ldr	r3, [pc, #52]	; (1313c <_ZN22FlapperValveController16CorrectToleranceEh+0x80>)
   13108:	68f8      	ldr	r0, [r7, #12]
   1310a:	4798      	blx	r3
   1310c:	4603      	mov	r3, r0
   1310e:	b2da      	uxtb	r2, r3
   13110:	687b      	ldr	r3, [r7, #4]
   13112:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	if (tolerance<1)
   13116:	687b      	ldr	r3, [r7, #4]
   13118:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   1311c:	2b00      	cmp	r3, #0
   1311e:	dc03      	bgt.n	13128 <_ZN22FlapperValveController16CorrectToleranceEh+0x6c>
	{
		tolerance=0x01;
   13120:	687b      	ldr	r3, [r7, #4]
   13122:	2201      	movs	r2, #1
   13124:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	}
	return tolerance;
   13128:	687b      	ldr	r3, [r7, #4]
   1312a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
}
   1312e:	4618      	mov	r0, r3
   13130:	3710      	adds	r7, #16
   13132:	46bd      	mov	sp, r7
   13134:	bd80      	pop	{r7, pc}
   13136:	bf00      	nop
   13138:	0001a791 	.word	0x0001a791
   1313c:	0001aad9 	.word	0x0001aad9

00013140 <_ZN22FlapperValveController10StartMotorEv>:
uint8_t	FlapperValveController::StartMotor(){
   13140:	b580      	push	{r7, lr}
   13142:	b082      	sub	sp, #8
   13144:	af00      	add	r7, sp, #0
   13146:	6078      	str	r0, [r7, #4]
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
   13148:	687b      	ldr	r3, [r7, #4]
   1314a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1314e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
   13152:	2b00      	cmp	r3, #0
   13154:	d009      	beq.n	1316a <_ZN22FlapperValveController10StartMotorEv+0x2a>
	{
		singlefv->SetEnable(false);
   13156:	687b      	ldr	r3, [r7, #4]
   13158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1315c:	2100      	movs	r1, #0
   1315e:	4618      	mov	r0, r3
   13160:	4b0a      	ldr	r3, [pc, #40]	; (1318c <_ZN22FlapperValveController10StartMotorEv+0x4c>)
   13162:	4798      	blx	r3
		delay_ms(10);
   13164:	200a      	movs	r0, #10
   13166:	4b0a      	ldr	r3, [pc, #40]	; (13190 <_ZN22FlapperValveController10StartMotorEv+0x50>)
   13168:	4798      	blx	r3
	}
	
		
	singlefv->SetEnable(true);
   1316a:	687b      	ldr	r3, [r7, #4]
   1316c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13170:	2101      	movs	r1, #1
   13172:	4618      	mov	r0, r3
   13174:	4b05      	ldr	r3, [pc, #20]	; (1318c <_ZN22FlapperValveController10StartMotorEv+0x4c>)
   13176:	4798      	blx	r3
	flapperValveIsMoving=true;
   13178:	687b      	ldr	r3, [r7, #4]
   1317a:	2201      	movs	r2, #1
   1317c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	return 0;
   13180:	2300      	movs	r3, #0
}
   13182:	4618      	mov	r0, r3
   13184:	3708      	adds	r7, #8
   13186:	46bd      	mov	sp, r7
   13188:	bd80      	pop	{r7, pc}
   1318a:	bf00      	nop
   1318c:	00013b99 	.word	0x00013b99
   13190:	00003681 	.word	0x00003681

00013194 <_ZN22FlapperValveController15StopControllingEv>:
uint8_t FlapperValveController::StopControlling(void){
   13194:	b580      	push	{r7, lr}
   13196:	b082      	sub	sp, #8
   13198:	af00      	add	r7, sp, #0
   1319a:	6078      	str	r0, [r7, #4]
	StopMotor();
   1319c:	6878      	ldr	r0, [r7, #4]
   1319e:	4b0d      	ldr	r3, [pc, #52]	; (131d4 <_ZN22FlapperValveController15StopControllingEv+0x40>)
   131a0:	4798      	blx	r3
	timeoutKeepControlling=false;
   131a2:	687b      	ldr	r3, [r7, #4]
   131a4:	2200      	movs	r2, #0
   131a6:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	timeoutFlapperValveController=false;
   131aa:	687b      	ldr	r3, [r7, #4]
   131ac:	2200      	movs	r2, #0
   131ae:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	isControlling=false;
   131b2:	687b      	ldr	r3, [r7, #4]
   131b4:	2200      	movs	r2, #0
   131b6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	keepControlling=false;
   131ba:	687b      	ldr	r3, [r7, #4]
   131bc:	2200      	movs	r2, #0
   131be:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	controllerEnabled=false;
   131c2:	687b      	ldr	r3, [r7, #4]
   131c4:	2200      	movs	r2, #0
   131c6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	return 0;
   131ca:	2300      	movs	r3, #0
}
   131cc:	4618      	mov	r0, r3
   131ce:	3708      	adds	r7, #8
   131d0:	46bd      	mov	sp, r7
   131d2:	bd80      	pop	{r7, pc}
   131d4:	00012f0d 	.word	0x00012f0d

000131d8 <_ZN22FlapperValveController16StartControllingEh>:

uint8_t	FlapperValveController::StartControlling(uint8_t sp){
   131d8:	b580      	push	{r7, lr}
   131da:	b082      	sub	sp, #8
   131dc:	af00      	add	r7, sp, #0
   131de:	6078      	str	r0, [r7, #4]
   131e0:	460b      	mov	r3, r1
   131e2:	70fb      	strb	r3, [r7, #3]
		setpoint=VerifySetpoint(sp);
   131e4:	78fb      	ldrb	r3, [r7, #3]
   131e6:	4619      	mov	r1, r3
   131e8:	6878      	ldr	r0, [r7, #4]
   131ea:	4b2b      	ldr	r3, [pc, #172]	; (13298 <_ZN22FlapperValveController16StartControllingEh+0xc0>)
   131ec:	4798      	blx	r3
   131ee:	4603      	mov	r3, r0
   131f0:	461a      	mov	r2, r3
   131f2:	687b      	ldr	r3, [r7, #4]
   131f4:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		CorrectTolerance(setpoint);
   131f8:	687b      	ldr	r3, [r7, #4]
   131fa:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   131fe:	4619      	mov	r1, r3
   13200:	6878      	ldr	r0, [r7, #4]
   13202:	4b26      	ldr	r3, [pc, #152]	; (1329c <_ZN22FlapperValveController16StartControllingEh+0xc4>)
   13204:	4798      	blx	r3
		floatSetpoint=(float)setpoint;
   13206:	687b      	ldr	r3, [r7, #4]
   13208:	f893 209f 	ldrb.w	r2, [r3, #159]	; 0x9f
   1320c:	4b24      	ldr	r3, [pc, #144]	; (132a0 <_ZN22FlapperValveController16StartControllingEh+0xc8>)
   1320e:	4610      	mov	r0, r2
   13210:	4798      	blx	r3
   13212:	4602      	mov	r2, r0
   13214:	687b      	ldr	r3, [r7, #4]
   13216:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		timeoutFlapperValveController=false;
   1321a:	687b      	ldr	r3, [r7, #4]
   1321c:	2200      	movs	r2, #0
   1321e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		timeoutKeepControlling=false;
   13222:	687b      	ldr	r3, [r7, #4]
   13224:	2200      	movs	r2, #0
   13226:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		keepControlling=false;
   1322a:	687b      	ldr	r3, [r7, #4]
   1322c:	2200      	movs	r2, #0
   1322e:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
		controllerEnabled=true;
   13232:	687b      	ldr	r3, [r7, #4]
   13234:	2201      	movs	r2, #1
   13236:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		unLockTimeout=false;
   1323a:	687b      	ldr	r3, [r7, #4]
   1323c:	2200      	movs	r2, #0
   1323e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		if (valve_ID==0)
   13242:	687b      	ldr	r3, [r7, #4]
   13244:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   13248:	2b00      	cmp	r3, #0
   1324a:	d106      	bne.n	1325a <_ZN22FlapperValveController16StartControllingEh+0x82>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
   1324c:	f242 7210 	movw	r2, #10000	; 0x2710
   13250:	4914      	ldr	r1, [pc, #80]	; (132a4 <_ZN22FlapperValveController16StartControllingEh+0xcc>)
   13252:	4815      	ldr	r0, [pc, #84]	; (132a8 <_ZN22FlapperValveController16StartControllingEh+0xd0>)
   13254:	4b15      	ldr	r3, [pc, #84]	; (132ac <_ZN22FlapperValveController16StartControllingEh+0xd4>)
   13256:	4798      	blx	r3
   13258:	e005      	b.n	13266 <_ZN22FlapperValveController16StartControllingEh+0x8e>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
   1325a:	f242 7210 	movw	r2, #10000	; 0x2710
   1325e:	4914      	ldr	r1, [pc, #80]	; (132b0 <_ZN22FlapperValveController16StartControllingEh+0xd8>)
   13260:	4811      	ldr	r0, [pc, #68]	; (132a8 <_ZN22FlapperValveController16StartControllingEh+0xd0>)
   13262:	4b12      	ldr	r3, [pc, #72]	; (132ac <_ZN22FlapperValveController16StartControllingEh+0xd4>)
   13264:	4798      	blx	r3
		}
		
		isControlling=true;
   13266:	687b      	ldr	r3, [r7, #4]
   13268:	2201      	movs	r2, #1
   1326a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
		StartMovingOnDirection();
   1326e:	6878      	ldr	r0, [r7, #4]
   13270:	4b10      	ldr	r3, [pc, #64]	; (132b4 <_ZN22FlapperValveController16StartControllingEh+0xdc>)
   13272:	4798      	blx	r3
	//	while(!gotSetpoint&(!doPeriodicTask)){
			ControlMovement();
   13274:	6878      	ldr	r0, [r7, #4]
   13276:	4b10      	ldr	r3, [pc, #64]	; (132b8 <_ZN22FlapperValveController16StartControllingEh+0xe0>)
   13278:	4798      	blx	r3
	//	}	
		if (doPeriodicTask)
   1327a:	687b      	ldr	r3, [r7, #4]
   1327c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   13280:	b2db      	uxtb	r3, r3
   13282:	2b00      	cmp	r3, #0
   13284:	d003      	beq.n	1328e <_ZN22FlapperValveController16StartControllingEh+0xb6>
		{
			paused=true;
   13286:	687b      	ldr	r3, [r7, #4]
   13288:	2201      	movs	r2, #1
   1328a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		return 0;
   1328e:	2300      	movs	r3, #0
	
}
   13290:	4618      	mov	r0, r3
   13292:	3708      	adds	r7, #8
   13294:	46bd      	mov	sp, r7
   13296:	bd80      	pop	{r7, pc}
   13298:	000132bd 	.word	0x000132bd
   1329c:	000130bd 	.word	0x000130bd
   132a0:	0001a789 	.word	0x0001a789
   132a4:	0001243d 	.word	0x0001243d
   132a8:	200054a4 	.word	0x200054a4
   132ac:	00010715 	.word	0x00010715
   132b0:	00012469 	.word	0x00012469
   132b4:	000126e5 	.word	0x000126e5
   132b8:	00012acd 	.word	0x00012acd

000132bc <_ZN22FlapperValveController14VerifySetpointEh>:
uint8_t FlapperValveController::VerifySetpoint(uint8_t sp){
   132bc:	b580      	push	{r7, lr}
   132be:	b082      	sub	sp, #8
   132c0:	af00      	add	r7, sp, #0
   132c2:	6078      	str	r0, [r7, #4]
   132c4:	460b      	mov	r3, r1
   132c6:	70fb      	strb	r3, [r7, #3]
	
	if (IsNBCMode())
   132c8:	6878      	ldr	r0, [r7, #4]
   132ca:	4b2a      	ldr	r3, [pc, #168]	; (13374 <_ZN22FlapperValveController14VerifySetpointEh+0xb8>)
   132cc:	4798      	blx	r3
   132ce:	4603      	mov	r3, r0
   132d0:	2b00      	cmp	r3, #0
   132d2:	d004      	beq.n	132de <_ZN22FlapperValveController14VerifySetpointEh+0x22>
	{
		setpoint=sp;
   132d4:	687b      	ldr	r3, [r7, #4]
   132d6:	78fa      	ldrb	r2, [r7, #3]
   132d8:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
   132dc:	e043      	b.n	13366 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
	} 
	else
	{
		if (standAloneActivated)
   132de:	687b      	ldr	r3, [r7, #4]
   132e0:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   132e4:	2b00      	cmp	r3, #0
   132e6:	d01f      	beq.n	13328 <_ZN22FlapperValveController14VerifySetpointEh+0x6c>
		{
			standAlonePosition=0xff-parameters.flapperValveStandAloneMinimumPosition;
   132e8:	687b      	ldr	r3, [r7, #4]
   132ea:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   132ee:	43db      	mvns	r3, r3
   132f0:	b2da      	uxtb	r2, r3
   132f2:	687b      	ldr	r3, [r7, #4]
   132f4:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
			if (sp>(standAlonePosition))
   132f8:	78fb      	ldrb	r3, [r7, #3]
   132fa:	687a      	ldr	r2, [r7, #4]
   132fc:	f892 20c5 	ldrb.w	r2, [r2, #197]	; 0xc5
   13300:	4293      	cmp	r3, r2
   13302:	dd0c      	ble.n	1331e <_ZN22FlapperValveController14VerifySetpointEh+0x62>
			{
				setpoint=standAlonePosition;
   13304:	687b      	ldr	r3, [r7, #4]
   13306:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
   1330a:	687b      	ldr	r3, [r7, #4]
   1330c:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
				currentMaximum=standAlonePosition;
   13310:	687b      	ldr	r3, [r7, #4]
   13312:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
   13316:	687b      	ldr	r3, [r7, #4]
   13318:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
   1331c:	e023      	b.n	13366 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
   1331e:	687b      	ldr	r3, [r7, #4]
   13320:	78fa      	ldrb	r2, [r7, #3]
   13322:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
   13326:	e01e      	b.n	13366 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
		}
		else
		{
			maximumPosition=0xff-parameters.flapperValveMinimumPosition;
   13328:	687b      	ldr	r3, [r7, #4]
   1332a:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
   1332e:	43db      	mvns	r3, r3
   13330:	b2da      	uxtb	r2, r3
   13332:	687b      	ldr	r3, [r7, #4]
   13334:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			if (sp>maximumPosition)
   13338:	78fb      	ldrb	r3, [r7, #3]
   1333a:	687a      	ldr	r2, [r7, #4]
   1333c:	f892 20c4 	ldrb.w	r2, [r2, #196]	; 0xc4
   13340:	4293      	cmp	r3, r2
   13342:	dd0c      	ble.n	1335e <_ZN22FlapperValveController14VerifySetpointEh+0xa2>
			{
				setpoint=maximumPosition;
   13344:	687b      	ldr	r3, [r7, #4]
   13346:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
   1334a:	687b      	ldr	r3, [r7, #4]
   1334c:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
				currentMaximum=maximumPosition;
   13350:	687b      	ldr	r3, [r7, #4]
   13352:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
   13356:	687b      	ldr	r3, [r7, #4]
   13358:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
   1335c:	e003      	b.n	13366 <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
   1335e:	687b      	ldr	r3, [r7, #4]
   13360:	78fa      	ldrb	r2, [r7, #3]
   13362:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
			}
		}
	}
	
	return setpoint;
   13366:	687b      	ldr	r3, [r7, #4]
   13368:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
	
}
   1336c:	4618      	mov	r0, r3
   1336e:	3708      	adds	r7, #8
   13370:	46bd      	mov	sp, r7
   13372:	bd80      	pop	{r7, pc}
   13374:	00012ec5 	.word	0x00012ec5

00013378 <_ZN22FlapperValveController16StartControllingEv>:
	currentPosition=singlefv->ReadActualPosition();
	//floatCurrentPosition=(float)currentPosition;
	return currentPosition;
}
	
uint8_t	FlapperValveController::StartControlling(void){
   13378:	b580      	push	{r7, lr}
   1337a:	b082      	sub	sp, #8
   1337c:	af00      	add	r7, sp, #0
   1337e:	6078      	str	r0, [r7, #4]
	return	StartControlling(currentPosition);
   13380:	687b      	ldr	r3, [r7, #4]
   13382:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   13386:	4619      	mov	r1, r3
   13388:	6878      	ldr	r0, [r7, #4]
   1338a:	4b03      	ldr	r3, [pc, #12]	; (13398 <_ZN22FlapperValveController16StartControllingEv+0x20>)
   1338c:	4798      	blx	r3
   1338e:	4603      	mov	r3, r0
	
}
   13390:	4618      	mov	r0, r3
   13392:	3708      	adds	r7, #8
   13394:	46bd      	mov	sp, r7
   13396:	bd80      	pop	{r7, pc}
   13398:	000131d9 	.word	0x000131d9

0001339c <_ZN22FlapperValveController15KeepControllingEh>:
uint8_t	FlapperValveController::KeepControlling(uint8_t restart){
   1339c:	b580      	push	{r7, lr}
   1339e:	b082      	sub	sp, #8
   133a0:	af00      	add	r7, sp, #0
   133a2:	6078      	str	r0, [r7, #4]
   133a4:	460b      	mov	r3, r1
   133a6:	70fb      	strb	r3, [r7, #3]

	//setpoint=lastPosition;

		timeoutKeepControlling=false;
   133a8:	687b      	ldr	r3, [r7, #4]
   133aa:	2200      	movs	r2, #0
   133ac:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	//	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT/2);
		isControlling=true;
   133b0:	687b      	ldr	r3, [r7, #4]
   133b2:	2201      	movs	r2, #1
   133b4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
		StartMovingOnDirection();
   133b8:	6878      	ldr	r0, [r7, #4]
   133ba:	4b05      	ldr	r3, [pc, #20]	; (133d0 <_ZN22FlapperValveController15KeepControllingEh+0x34>)
   133bc:	4798      	blx	r3
		keepControlling=false;
   133be:	687b      	ldr	r3, [r7, #4]
   133c0:	2200      	movs	r2, #0
   133c2:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2

	return 0;
   133c6:	2300      	movs	r3, #0
	
}
   133c8:	4618      	mov	r0, r3
   133ca:	3708      	adds	r7, #8
   133cc:	46bd      	mov	sp, r7
   133ce:	bd80      	pop	{r7, pc}
   133d0:	000126e5 	.word	0x000126e5

000133d4 <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

void	FlapperValveController::UpdateFlapperValveData(void){
   133d4:	b590      	push	{r4, r7, lr}
   133d6:	b085      	sub	sp, #20
   133d8:	af00      	add	r7, sp, #0
   133da:	60f8      	str	r0, [r7, #12]
	currentPosition=singlefv->ReadActualPosition();
   133dc:	68fb      	ldr	r3, [r7, #12]
   133de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   133e2:	4618      	mov	r0, r3
   133e4:	4b36      	ldr	r3, [pc, #216]	; (134c0 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xec>)
   133e6:	4798      	blx	r3
   133e8:	4603      	mov	r3, r0
   133ea:	461a      	mov	r2, r3
   133ec:	68fb      	ldr	r3, [r7, #12]
   133ee:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	//dataStruct.controllerStatus.position=currentPosition;
	dataStruct.actualPosition=currentPosition;
   133f2:	68fb      	ldr	r3, [r7, #12]
   133f4:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
   133f8:	68fb      	ldr	r3, [r7, #12]
   133fa:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	dataStruct.setPointPosition=setpoint;
   133fe:	68fb      	ldr	r3, [r7, #12]
   13400:	f893 209f 	ldrb.w	r2, [r3, #159]	; 0x9f
   13404:	68fb      	ldr	r3, [r7, #12]
   13406:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	dataStruct.inputStatus=singlefv->ReadStatusInputs();
   1340a:	68fb      	ldr	r3, [r7, #12]
   1340c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   13410:	68fc      	ldr	r4, [r7, #12]
   13412:	463b      	mov	r3, r7
   13414:	4611      	mov	r1, r2
   13416:	4618      	mov	r0, r3
   13418:	4b2a      	ldr	r3, [pc, #168]	; (134c4 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf0>)
   1341a:	4798      	blx	r3
   1341c:	f104 0384 	add.w	r3, r4, #132	; 0x84
   13420:	463a      	mov	r2, r7
   13422:	6810      	ldr	r0, [r2, #0]
   13424:	6018      	str	r0, [r3, #0]
   13426:	8892      	ldrh	r2, [r2, #4]
   13428:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=singlefv->ReadControlStatus();
   1342a:	68fb      	ldr	r3, [r7, #12]
   1342c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   13430:	68fc      	ldr	r4, [r7, #12]
   13432:	463b      	mov	r3, r7
   13434:	4611      	mov	r1, r2
   13436:	4618      	mov	r0, r3
   13438:	4b23      	ldr	r3, [pc, #140]	; (134c8 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf4>)
   1343a:	4798      	blx	r3
   1343c:	f104 038a 	add.w	r3, r4, #138	; 0x8a
   13440:	463a      	mov	r2, r7
   13442:	6811      	ldr	r1, [r2, #0]
   13444:	6852      	ldr	r2, [r2, #4]
   13446:	6019      	str	r1, [r3, #0]
   13448:	605a      	str	r2, [r3, #4]
	
	dataStruct.controllerStatus.isMoving=flapperValveIsMoving;
   1344a:	68fb      	ldr	r3, [r7, #12]
   1344c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   13450:	b2da      	uxtb	r2, r3
   13452:	68fb      	ldr	r3, [r7, #12]
   13454:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	dataStruct.controllerStatus.isControlling=isControlling;
   13458:	68fb      	ldr	r3, [r7, #12]
   1345a:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
   1345e:	68fb      	ldr	r3, [r7, #12]
   13460:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
   13464:	68fb      	ldr	r3, [r7, #12]
   13466:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
   1346a:	68fb      	ldr	r3, [r7, #12]
   1346c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	dataStruct.controllerStatus.is_flapper_OK=isOK;
   13470:	68fb      	ldr	r3, [r7, #12]
   13472:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   13476:	b2da      	uxtb	r2, r3
   13478:	68fb      	ldr	r3, [r7, #12]
   1347a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	
	if (standAloneActivated)
   1347e:	68fb      	ldr	r3, [r7, #12]
   13480:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
   13484:	2b00      	cmp	r3, #0
   13486:	d008      	beq.n	1349a <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xc6>
	{
		currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
   13488:	68fb      	ldr	r3, [r7, #12]
   1348a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
   1348e:	43db      	mvns	r3, r3
   13490:	b2da      	uxtb	r2, r3
   13492:	68fb      	ldr	r3, [r7, #12]
   13494:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
   13498:	e007      	b.n	134aa <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd6>
	} 
	else
	{
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
   1349a:	68fb      	ldr	r3, [r7, #12]
   1349c:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
   134a0:	43db      	mvns	r3, r3
   134a2:	b2da      	uxtb	r2, r3
   134a4:	68fb      	ldr	r3, [r7, #12]
   134a6:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
	}
	FillPositionsFIFO(currentPosition);
   134aa:	68fb      	ldr	r3, [r7, #12]
   134ac:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
   134b0:	4619      	mov	r1, r3
   134b2:	68f8      	ldr	r0, [r7, #12]
   134b4:	4b05      	ldr	r3, [pc, #20]	; (134cc <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xf8>)
   134b6:	4798      	blx	r3
}
   134b8:	bf00      	nop
   134ba:	3714      	adds	r7, #20
   134bc:	46bd      	mov	sp, r7
   134be:	bd90      	pop	{r4, r7, pc}
   134c0:	00013db9 	.word	0x00013db9
   134c4:	00013b3d 	.word	0x00013b3d
   134c8:	00013ae5 	.word	0x00013ae5
   134cc:	000134d1 	.word	0x000134d1

000134d0 <_ZN22FlapperValveController17FillPositionsFIFOEh>:
void FlapperValveController::FillPositionsFIFO(uint8_t cp){
   134d0:	b480      	push	{r7}
   134d2:	b085      	sub	sp, #20
   134d4:	af00      	add	r7, sp, #0
   134d6:	6078      	str	r0, [r7, #4]
   134d8:	460b      	mov	r3, r1
   134da:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   134dc:	2300      	movs	r3, #0
   134de:	73fb      	strb	r3, [r7, #15]
   134e0:	7bfb      	ldrb	r3, [r7, #15]
   134e2:	2b0e      	cmp	r3, #14
   134e4:	dc1d      	bgt.n	13522 <_ZN22FlapperValveController17FillPositionsFIFOEh+0x52>
	{
		positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-1-i]=positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-2-i];
   134e6:	687b      	ldr	r3, [r7, #4]
   134e8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   134ec:	687a      	ldr	r2, [r7, #4]
   134ee:	3332      	adds	r3, #50	; 0x32
   134f0:	009b      	lsls	r3, r3, #2
   134f2:	4413      	add	r3, r2
   134f4:	685b      	ldr	r3, [r3, #4]
   134f6:	7bfa      	ldrb	r2, [r7, #15]
   134f8:	f1c2 020f 	rsb	r2, r2, #15
   134fc:	441a      	add	r2, r3
   134fe:	687b      	ldr	r3, [r7, #4]
   13500:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   13504:	6879      	ldr	r1, [r7, #4]
   13506:	3332      	adds	r3, #50	; 0x32
   13508:	009b      	lsls	r3, r3, #2
   1350a:	440b      	add	r3, r1
   1350c:	685b      	ldr	r3, [r3, #4]
   1350e:	7bf9      	ldrb	r1, [r7, #15]
   13510:	f1c1 010e 	rsb	r1, r1, #14
   13514:	440b      	add	r3, r1
   13516:	781b      	ldrb	r3, [r3, #0]
   13518:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   1351a:	7bfb      	ldrb	r3, [r7, #15]
   1351c:	3301      	adds	r3, #1
   1351e:	73fb      	strb	r3, [r7, #15]
   13520:	e7de      	b.n	134e0 <_ZN22FlapperValveController17FillPositionsFIFOEh+0x10>
	}
	positions[valve_ID][0]=cp;
   13522:	687b      	ldr	r3, [r7, #4]
   13524:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   13528:	687a      	ldr	r2, [r7, #4]
   1352a:	3332      	adds	r3, #50	; 0x32
   1352c:	009b      	lsls	r3, r3, #2
   1352e:	4413      	add	r3, r2
   13530:	685b      	ldr	r3, [r3, #4]
   13532:	78fa      	ldrb	r2, [r7, #3]
   13534:	701a      	strb	r2, [r3, #0]
}
   13536:	bf00      	nop
   13538:	3714      	adds	r7, #20
   1353a:	46bd      	mov	sp, r7
   1353c:	bc80      	pop	{r7}
   1353e:	4770      	bx	lr

00013540 <_ZN22FlapperValveController8SelftestEv>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
	return singlefv->ReadActualPosition();
}

bool	FlapperValveController::Selftest(void){
   13540:	b580      	push	{r7, lr}
   13542:	b084      	sub	sp, #16
   13544:	af00      	add	r7, sp, #0
   13546:	6078      	str	r0, [r7, #4]
		uint8_t localSetpoint=180;
   13548:	23b4      	movs	r3, #180	; 0xb4
   1354a:	73fb      	strb	r3, [r7, #15]
		parameters=defaultParameters;
   1354c:	687b      	ldr	r3, [r7, #4]
   1354e:	4a66      	ldr	r2, [pc, #408]	; (136e8 <_ZN22FlapperValveController8SelftestEv+0x1a8>)
   13550:	33c7      	adds	r3, #199	; 0xc7
   13552:	8812      	ldrh	r2, [r2, #0]
   13554:	801a      	strh	r2, [r3, #0]
		uint8_t localPosition;
		bool must_be_tested=true;
   13556:	2301      	movs	r3, #1
   13558:	737b      	strb	r3, [r7, #13]
	UpdateFlapperValveData();
   1355a:	6878      	ldr	r0, [r7, #4]
   1355c:	4b63      	ldr	r3, [pc, #396]	; (136ec <_ZN22FlapperValveController8SelftestEv+0x1ac>)
   1355e:	4798      	blx	r3
	singlefv->SetEnable(false);
   13560:	687b      	ldr	r3, [r7, #4]
   13562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13566:	2100      	movs	r1, #0
   13568:	4618      	mov	r0, r3
   1356a:	4b61      	ldr	r3, [pc, #388]	; (136f0 <_ZN22FlapperValveController8SelftestEv+0x1b0>)
   1356c:	4798      	blx	r3
	singlefv->SetInvalidPosition(false);
   1356e:	687b      	ldr	r3, [r7, #4]
   13570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13574:	2100      	movs	r1, #0
   13576:	4618      	mov	r0, r3
   13578:	4b5e      	ldr	r3, [pc, #376]	; (136f4 <_ZN22FlapperValveController8SelftestEv+0x1b4>)
   1357a:	4798      	blx	r3
	singlefv->ClearMoveFault(false);
   1357c:	687b      	ldr	r3, [r7, #4]
   1357e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13582:	2100      	movs	r1, #0
   13584:	4618      	mov	r0, r3
   13586:	4b5c      	ldr	r3, [pc, #368]	; (136f8 <_ZN22FlapperValveController8SelftestEv+0x1b8>)
   13588:	4798      	blx	r3
	delay_ms(10);
   1358a:	200a      	movs	r0, #10
   1358c:	4b5b      	ldr	r3, [pc, #364]	; (136fc <_ZN22FlapperValveController8SelftestEv+0x1bc>)
   1358e:	4798      	blx	r3
	singlefv->ClearMoveFault(true);
   13590:	687b      	ldr	r3, [r7, #4]
   13592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   13596:	2101      	movs	r1, #1
   13598:	4618      	mov	r0, r3
   1359a:	4b57      	ldr	r3, [pc, #348]	; (136f8 <_ZN22FlapperValveController8SelftestEv+0x1b8>)
   1359c:	4798      	blx	r3
	singlefv->WriteSetpoint(localSetpoint);
   1359e:	687b      	ldr	r3, [r7, #4]
   135a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   135a4:	7bfa      	ldrb	r2, [r7, #15]
   135a6:	4611      	mov	r1, r2
   135a8:	4618      	mov	r0, r3
   135aa:	4b55      	ldr	r3, [pc, #340]	; (13700 <_ZN22FlapperValveController8SelftestEv+0x1c0>)
   135ac:	4798      	blx	r3
	singlefv->SetDirection(false);
   135ae:	687b      	ldr	r3, [r7, #4]
   135b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   135b4:	2100      	movs	r1, #0
   135b6:	4618      	mov	r0, r3
   135b8:	4b52      	ldr	r3, [pc, #328]	; (13704 <_ZN22FlapperValveController8SelftestEv+0x1c4>)
   135ba:	4798      	blx	r3

	
		if (valve_ID==0)
   135bc:	687b      	ldr	r3, [r7, #4]
   135be:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   135c2:	2b00      	cmp	r3, #0
   135c4:	d106      	bne.n	135d4 <_ZN22FlapperValveController8SelftestEv+0x94>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
   135c6:	f242 7210 	movw	r2, #10000	; 0x2710
   135ca:	494f      	ldr	r1, [pc, #316]	; (13708 <_ZN22FlapperValveController8SelftestEv+0x1c8>)
   135cc:	484f      	ldr	r0, [pc, #316]	; (1370c <_ZN22FlapperValveController8SelftestEv+0x1cc>)
   135ce:	4b50      	ldr	r3, [pc, #320]	; (13710 <_ZN22FlapperValveController8SelftestEv+0x1d0>)
   135d0:	4798      	blx	r3
   135d2:	e005      	b.n	135e0 <_ZN22FlapperValveController8SelftestEv+0xa0>
		}
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
   135d4:	f242 7210 	movw	r2, #10000	; 0x2710
   135d8:	494e      	ldr	r1, [pc, #312]	; (13714 <_ZN22FlapperValveController8SelftestEv+0x1d4>)
   135da:	484c      	ldr	r0, [pc, #304]	; (1370c <_ZN22FlapperValveController8SelftestEv+0x1cc>)
   135dc:	4b4c      	ldr	r3, [pc, #304]	; (13710 <_ZN22FlapperValveController8SelftestEv+0x1d0>)
   135de:	4798      	blx	r3
		}
	

	localPosition=singlefv->ReadActualPosition();
   135e0:	687b      	ldr	r3, [r7, #4]
   135e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   135e6:	4618      	mov	r0, r3
   135e8:	4b4b      	ldr	r3, [pc, #300]	; (13718 <_ZN22FlapperValveController8SelftestEv+0x1d8>)
   135ea:	4798      	blx	r3
   135ec:	4603      	mov	r3, r0
   135ee:	73bb      	strb	r3, [r7, #14]
		
	
	if ((abs(localPosition-localSetpoint)<(12+1)))
   135f0:	7bba      	ldrb	r2, [r7, #14]
   135f2:	7bfb      	ldrb	r3, [r7, #15]
   135f4:	1ad3      	subs	r3, r2, r3
   135f6:	2b00      	cmp	r3, #0
   135f8:	bfb8      	it	lt
   135fa:	425b      	neglt	r3, r3
   135fc:	2b0c      	cmp	r3, #12
   135fe:	dc0f      	bgt.n	13620 <_ZN22FlapperValveController8SelftestEv+0xe0>
	{
		if (valve_ID==0)
   13600:	687b      	ldr	r3, [r7, #4]
   13602:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   13606:	2b00      	cmp	r3, #0
   13608:	d105      	bne.n	13616 <_ZN22FlapperValveController8SelftestEv+0xd6>
		{
			localSetpoint-=64;
   1360a:	7bfb      	ldrb	r3, [r7, #15]
   1360c:	3b40      	subs	r3, #64	; 0x40
   1360e:	73fb      	strb	r3, [r7, #15]
			must_be_tested=true;
   13610:	2301      	movs	r3, #1
   13612:	737b      	strb	r3, [r7, #13]
   13614:	e00d      	b.n	13632 <_ZN22FlapperValveController8SelftestEv+0xf2>
		} 
		else
		{
			localSetpoint=localPosition;
   13616:	7bbb      	ldrb	r3, [r7, #14]
   13618:	73fb      	strb	r3, [r7, #15]
			must_be_tested=false;
   1361a:	2300      	movs	r3, #0
   1361c:	737b      	strb	r3, [r7, #13]
   1361e:	e008      	b.n	13632 <_ZN22FlapperValveController8SelftestEv+0xf2>
		}
		
	}else{
		if (valve_ID==1)
   13620:	687b      	ldr	r3, [r7, #4]
   13622:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   13626:	2b01      	cmp	r3, #1
   13628:	d103      	bne.n	13632 <_ZN22FlapperValveController8SelftestEv+0xf2>
		{
			localSetpoint=localPosition;
   1362a:	7bbb      	ldrb	r3, [r7, #14]
   1362c:	73fb      	strb	r3, [r7, #15]
			must_be_tested=false;
   1362e:	2300      	movs	r3, #0
   13630:	737b      	strb	r3, [r7, #13]
		} 
		else
		{
		}
	}
	timeoutFlapperValveController=false;
   13632:	687b      	ldr	r3, [r7, #4]
   13634:	2200      	movs	r2, #0
   13636:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	if (must_be_tested)
   1363a:	7b7b      	ldrb	r3, [r7, #13]
   1363c:	2b00      	cmp	r3, #0
   1363e:	d047      	beq.n	136d0 <_ZN22FlapperValveController8SelftestEv+0x190>
	{
		if (localPosition>localSetpoint)
   13640:	7bba      	ldrb	r2, [r7, #14]
   13642:	7bfb      	ldrb	r3, [r7, #15]
   13644:	429a      	cmp	r2, r3
   13646:	dd07      	ble.n	13658 <_ZN22FlapperValveController8SelftestEv+0x118>
		{
			singlefv->SetDirection(true);
   13648:	687b      	ldr	r3, [r7, #4]
   1364a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1364e:	2101      	movs	r1, #1
   13650:	4618      	mov	r0, r3
   13652:	4b2c      	ldr	r3, [pc, #176]	; (13704 <_ZN22FlapperValveController8SelftestEv+0x1c4>)
   13654:	4798      	blx	r3
   13656:	e006      	b.n	13666 <_ZN22FlapperValveController8SelftestEv+0x126>
		}
		else
		{
			singlefv->SetDirection(false);
   13658:	687b      	ldr	r3, [r7, #4]
   1365a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1365e:	2100      	movs	r1, #0
   13660:	4618      	mov	r0, r3
   13662:	4b28      	ldr	r3, [pc, #160]	; (13704 <_ZN22FlapperValveController8SelftestEv+0x1c4>)
   13664:	4798      	blx	r3
		}
		
		singlefv->SetEnable(true);
   13666:	687b      	ldr	r3, [r7, #4]
   13668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1366c:	2101      	movs	r1, #1
   1366e:	4618      	mov	r0, r3
   13670:	4b1f      	ldr	r3, [pc, #124]	; (136f0 <_ZN22FlapperValveController8SelftestEv+0x1b0>)
   13672:	4798      	blx	r3
		while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
   13674:	7bba      	ldrb	r2, [r7, #14]
   13676:	7bfb      	ldrb	r3, [r7, #15]
   13678:	1ad3      	subs	r3, r2, r3
   1367a:	2b00      	cmp	r3, #0
   1367c:	bfb8      	it	lt
   1367e:	425b      	neglt	r3, r3
   13680:	2b0c      	cmp	r3, #12
   13682:	bfcc      	ite	gt
   13684:	2301      	movgt	r3, #1
   13686:	2300      	movle	r3, #0
   13688:	b2db      	uxtb	r3, r3
   1368a:	461a      	mov	r2, r3
   1368c:	687b      	ldr	r3, [r7, #4]
   1368e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   13692:	b2db      	uxtb	r3, r3
   13694:	f083 0301 	eor.w	r3, r3, #1
   13698:	b2db      	uxtb	r3, r3
   1369a:	4013      	ands	r3, r2
   1369c:	2b00      	cmp	r3, #0
   1369e:	bf14      	ite	ne
   136a0:	2301      	movne	r3, #1
   136a2:	2300      	moveq	r3, #0
   136a4:	b2db      	uxtb	r3, r3
   136a6:	2b00      	cmp	r3, #0
   136a8:	d008      	beq.n	136bc <_ZN22FlapperValveController8SelftestEv+0x17c>

		{

			localPosition=singlefv->ReadActualPosition();
   136aa:	687b      	ldr	r3, [r7, #4]
   136ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   136b0:	4618      	mov	r0, r3
   136b2:	4b19      	ldr	r3, [pc, #100]	; (13718 <_ZN22FlapperValveController8SelftestEv+0x1d8>)
   136b4:	4798      	blx	r3
   136b6:	4603      	mov	r3, r0
   136b8:	73bb      	strb	r3, [r7, #14]
		while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
   136ba:	e7db      	b.n	13674 <_ZN22FlapperValveController8SelftestEv+0x134>

		}
		RemoveTimeoutTask();
   136bc:	6878      	ldr	r0, [r7, #4]
   136be:	4b17      	ldr	r3, [pc, #92]	; (1371c <_ZN22FlapperValveController8SelftestEv+0x1dc>)
   136c0:	4798      	blx	r3

		singlefv->SetEnable(false);
   136c2:	687b      	ldr	r3, [r7, #4]
   136c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   136c8:	2100      	movs	r1, #0
   136ca:	4618      	mov	r0, r3
   136cc:	4b08      	ldr	r3, [pc, #32]	; (136f0 <_ZN22FlapperValveController8SelftestEv+0x1b0>)
   136ce:	4798      	blx	r3
	} 
	else
	{
	}
	
	return !timeoutFlapperValveController;
   136d0:	687b      	ldr	r3, [r7, #4]
   136d2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
   136d6:	b2db      	uxtb	r3, r3
   136d8:	f083 0301 	eor.w	r3, r3, #1
   136dc:	b2db      	uxtb	r3, r3
}
   136de:	4618      	mov	r0, r3
   136e0:	3710      	adds	r7, #16
   136e2:	46bd      	mov	sp, r7
   136e4:	bd80      	pop	{r7, pc}
   136e6:	bf00      	nop
   136e8:	0001c1f4 	.word	0x0001c1f4
   136ec:	000133d5 	.word	0x000133d5
   136f0:	00013b99 	.word	0x00013b99
   136f4:	00013d09 	.word	0x00013d09
   136f8:	00013c91 	.word	0x00013c91
   136fc:	00003681 	.word	0x00003681
   13700:	00013d81 	.word	0x00013d81
   13704:	00013c19 	.word	0x00013c19
   13708:	0001243d 	.word	0x0001243d
   1370c:	200054a4 	.word	0x200054a4
   13710:	00010715 	.word	0x00010715
   13714:	00012469 	.word	0x00012469
   13718:	00013db9 	.word	0x00013db9
   1371c:	00013721 	.word	0x00013721

00013720 <_ZN22FlapperValveController17RemoveTimeoutTaskEv>:


void	FlapperValveController::RemoveTimeoutTask(void){
   13720:	b580      	push	{r7, lr}
   13722:	b082      	sub	sp, #8
   13724:	af00      	add	r7, sp, #0
   13726:	6078      	str	r0, [r7, #4]
	if (valve_ID==0)
   13728:	687b      	ldr	r3, [r7, #4]
   1372a:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
   1372e:	2b00      	cmp	r3, #0
   13730:	d104      	bne.n	1373c <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x1c>
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
   13732:	4906      	ldr	r1, [pc, #24]	; (1374c <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x2c>)
   13734:	4806      	ldr	r0, [pc, #24]	; (13750 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
   13736:	4b07      	ldr	r3, [pc, #28]	; (13754 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
   13738:	4798      	blx	r3
	}
	else
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
	}
}
   1373a:	e003      	b.n	13744 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x24>
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
   1373c:	4906      	ldr	r1, [pc, #24]	; (13758 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x38>)
   1373e:	4804      	ldr	r0, [pc, #16]	; (13750 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
   13740:	4b04      	ldr	r3, [pc, #16]	; (13754 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
   13742:	4798      	blx	r3
}
   13744:	bf00      	nop
   13746:	3708      	adds	r7, #8
   13748:	46bd      	mov	sp, r7
   1374a:	bd80      	pop	{r7, pc}
   1374c:	0001243d 	.word	0x0001243d
   13750:	200054a4 	.word	0x200054a4
   13754:	000106bd 	.word	0x000106bd
   13758:	00012469 	.word	0x00012469

0001375c <__tcf_0>:
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
   1375c:	b590      	push	{r4, r7, lr}
   1375e:	b083      	sub	sp, #12
   13760:	af00      	add	r7, sp, #0
   13762:	6078      	str	r0, [r7, #4]
   13764:	4c05      	ldr	r4, [pc, #20]	; (1377c <__tcf_0+0x20>)
   13766:	4b06      	ldr	r3, [pc, #24]	; (13780 <__tcf_0+0x24>)
   13768:	429c      	cmp	r4, r3
   1376a:	d004      	beq.n	13776 <__tcf_0+0x1a>
   1376c:	3c78      	subs	r4, #120	; 0x78
   1376e:	4620      	mov	r0, r4
   13770:	4b04      	ldr	r3, [pc, #16]	; (13784 <__tcf_0+0x28>)
   13772:	4798      	blx	r3
   13774:	e7f7      	b.n	13766 <__tcf_0+0xa>
   13776:	370c      	adds	r7, #12
   13778:	46bd      	mov	sp, r7
   1377a:	bd90      	pop	{r4, r7, pc}
   1377c:	2000567c 	.word	0x2000567c
   13780:	2000558c 	.word	0x2000558c
   13784:	00013955 	.word	0x00013955

00013788 <_Z41__static_initialization_and_destruction_0ii>:

   13788:	b5b0      	push	{r4, r5, r7, lr}
   1378a:	b082      	sub	sp, #8
   1378c:	af00      	add	r7, sp, #0
   1378e:	6078      	str	r0, [r7, #4]
   13790:	6039      	str	r1, [r7, #0]
   13792:	687b      	ldr	r3, [r7, #4]
   13794:	2b01      	cmp	r3, #1
   13796:	d16d      	bne.n	13874 <_Z41__static_initialization_and_destruction_0ii+0xec>
   13798:	683b      	ldr	r3, [r7, #0]
   1379a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1379e:	4293      	cmp	r3, r2
   137a0:	d168      	bne.n	13874 <_Z41__static_initialization_and_destruction_0ii+0xec>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   137a2:	4936      	ldr	r1, [pc, #216]	; (1387c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   137a4:	4836      	ldr	r0, [pc, #216]	; (13880 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   137a6:	4b37      	ldr	r3, [pc, #220]	; (13884 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   137a8:	4798      	blx	r3
   137aa:	4a37      	ldr	r2, [pc, #220]	; (13888 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   137ac:	4937      	ldr	r1, [pc, #220]	; (1388c <_Z41__static_initialization_and_destruction_0ii+0x104>)
   137ae:	4834      	ldr	r0, [pc, #208]	; (13880 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   137b0:	4b37      	ldr	r3, [pc, #220]	; (13890 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   137b2:	4798      	blx	r3
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   137b4:	4937      	ldr	r1, [pc, #220]	; (13894 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   137b6:	4838      	ldr	r0, [pc, #224]	; (13898 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   137b8:	4b38      	ldr	r3, [pc, #224]	; (1389c <_Z41__static_initialization_and_destruction_0ii+0x114>)
   137ba:	4798      	blx	r3
   137bc:	4a32      	ldr	r2, [pc, #200]	; (13888 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   137be:	4938      	ldr	r1, [pc, #224]	; (138a0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   137c0:	4835      	ldr	r0, [pc, #212]	; (13898 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   137c2:	4b33      	ldr	r3, [pc, #204]	; (13890 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   137c4:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   137c6:	4937      	ldr	r1, [pc, #220]	; (138a4 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   137c8:	4837      	ldr	r0, [pc, #220]	; (138a8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   137ca:	4b34      	ldr	r3, [pc, #208]	; (1389c <_Z41__static_initialization_and_destruction_0ii+0x114>)
   137cc:	4798      	blx	r3
   137ce:	4a2e      	ldr	r2, [pc, #184]	; (13888 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   137d0:	4933      	ldr	r1, [pc, #204]	; (138a0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   137d2:	4835      	ldr	r0, [pc, #212]	; (138a8 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   137d4:	4b2e      	ldr	r3, [pc, #184]	; (13890 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   137d6:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   137d8:	4934      	ldr	r1, [pc, #208]	; (138ac <_Z41__static_initialization_and_destruction_0ii+0x124>)
   137da:	4835      	ldr	r0, [pc, #212]	; (138b0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   137dc:	4b2f      	ldr	r3, [pc, #188]	; (1389c <_Z41__static_initialization_and_destruction_0ii+0x114>)
   137de:	4798      	blx	r3
   137e0:	4a29      	ldr	r2, [pc, #164]	; (13888 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   137e2:	492f      	ldr	r1, [pc, #188]	; (138a0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   137e4:	4832      	ldr	r0, [pc, #200]	; (138b0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   137e6:	4b2a      	ldr	r3, [pc, #168]	; (13890 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   137e8:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   137ea:	4932      	ldr	r1, [pc, #200]	; (138b4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   137ec:	4832      	ldr	r0, [pc, #200]	; (138b8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   137ee:	4b2b      	ldr	r3, [pc, #172]	; (1389c <_Z41__static_initialization_and_destruction_0ii+0x114>)
   137f0:	4798      	blx	r3
   137f2:	4a25      	ldr	r2, [pc, #148]	; (13888 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   137f4:	492a      	ldr	r1, [pc, #168]	; (138a0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   137f6:	4830      	ldr	r0, [pc, #192]	; (138b8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   137f8:	4b25      	ldr	r3, [pc, #148]	; (13890 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   137fa:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   137fc:	492f      	ldr	r1, [pc, #188]	; (138bc <_Z41__static_initialization_and_destruction_0ii+0x134>)
   137fe:	4830      	ldr	r0, [pc, #192]	; (138c0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   13800:	4b26      	ldr	r3, [pc, #152]	; (1389c <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13802:	4798      	blx	r3
   13804:	4a20      	ldr	r2, [pc, #128]	; (13888 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13806:	4926      	ldr	r1, [pc, #152]	; (138a0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13808:	482d      	ldr	r0, [pc, #180]	; (138c0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   1380a:	4b21      	ldr	r3, [pc, #132]	; (13890 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   1380c:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   1380e:	492d      	ldr	r1, [pc, #180]	; (138c4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
   13810:	482d      	ldr	r0, [pc, #180]	; (138c8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   13812:	4b22      	ldr	r3, [pc, #136]	; (1389c <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13814:	4798      	blx	r3
   13816:	4a1c      	ldr	r2, [pc, #112]	; (13888 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   13818:	4921      	ldr	r1, [pc, #132]	; (138a0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   1381a:	482b      	ldr	r0, [pc, #172]	; (138c8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   1381c:	4b1c      	ldr	r3, [pc, #112]	; (13890 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   1381e:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   13820:	492a      	ldr	r1, [pc, #168]	; (138cc <_Z41__static_initialization_and_destruction_0ii+0x144>)
   13822:	482b      	ldr	r0, [pc, #172]	; (138d0 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   13824:	4b1d      	ldr	r3, [pc, #116]	; (1389c <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13826:	4798      	blx	r3
   13828:	4a17      	ldr	r2, [pc, #92]	; (13888 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   1382a:	491d      	ldr	r1, [pc, #116]	; (138a0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   1382c:	4828      	ldr	r0, [pc, #160]	; (138d0 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   1382e:	4b18      	ldr	r3, [pc, #96]	; (13890 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13830:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   13832:	4928      	ldr	r1, [pc, #160]	; (138d4 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
   13834:	4828      	ldr	r0, [pc, #160]	; (138d8 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   13836:	4b19      	ldr	r3, [pc, #100]	; (1389c <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13838:	4798      	blx	r3
   1383a:	4a13      	ldr	r2, [pc, #76]	; (13888 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   1383c:	4918      	ldr	r1, [pc, #96]	; (138a0 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   1383e:	4826      	ldr	r0, [pc, #152]	; (138d8 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   13840:	4b13      	ldr	r3, [pc, #76]	; (13890 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13842:	4798      	blx	r3
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
   13844:	4b25      	ldr	r3, [pc, #148]	; (138dc <_Z41__static_initialization_and_destruction_0ii+0x154>)
   13846:	2401      	movs	r4, #1
   13848:	461d      	mov	r5, r3
   1384a:	2c00      	cmp	r4, #0
   1384c:	db05      	blt.n	1385a <_Z41__static_initialization_and_destruction_0ii+0xd2>
   1384e:	4628      	mov	r0, r5
   13850:	4b23      	ldr	r3, [pc, #140]	; (138e0 <_Z41__static_initialization_and_destruction_0ii+0x158>)
   13852:	4798      	blx	r3
   13854:	3578      	adds	r5, #120	; 0x78
   13856:	3c01      	subs	r4, #1
   13858:	e7f7      	b.n	1384a <_Z41__static_initialization_and_destruction_0ii+0xc2>
   1385a:	4a0b      	ldr	r2, [pc, #44]	; (13888 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   1385c:	4921      	ldr	r1, [pc, #132]	; (138e4 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
   1385e:	2000      	movs	r0, #0
   13860:	4b0b      	ldr	r3, [pc, #44]	; (13890 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13862:	4798      	blx	r3
   13864:	4820      	ldr	r0, [pc, #128]	; (138e8 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   13866:	4b21      	ldr	r3, [pc, #132]	; (138ec <_Z41__static_initialization_and_destruction_0ii+0x164>)
   13868:	4798      	blx	r3
   1386a:	4a07      	ldr	r2, [pc, #28]	; (13888 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   1386c:	4920      	ldr	r1, [pc, #128]	; (138f0 <_Z41__static_initialization_and_destruction_0ii+0x168>)
   1386e:	481e      	ldr	r0, [pc, #120]	; (138e8 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   13870:	4b07      	ldr	r3, [pc, #28]	; (13890 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   13872:	4798      	blx	r3
   13874:	bf00      	nop
   13876:	3708      	adds	r7, #8
   13878:	46bd      	mov	sp, r7
   1387a:	bdb0      	pop	{r4, r5, r7, pc}
   1387c:	2000e058 	.word	0x2000e058
   13880:	2000544c 	.word	0x2000544c
   13884:	0000fc6d 	.word	0x0000fc6d
   13888:	20000000 	.word	0x20000000
   1388c:	0000fc89 	.word	0x0000fc89
   13890:	0001a611 	.word	0x0001a611
   13894:	2000df28 	.word	0x2000df28
   13898:	20005464 	.word	0x20005464
   1389c:	00010441 	.word	0x00010441
   138a0:	00010479 	.word	0x00010479
   138a4:	2000dfbc 	.word	0x2000dfbc
   138a8:	20005484 	.word	0x20005484
   138ac:	2000e0e0 	.word	0x2000e0e0
   138b0:	200054a4 	.word	0x200054a4
   138b4:	2000dfdc 	.word	0x2000dfdc
   138b8:	200054c4 	.word	0x200054c4
   138bc:	2000e0a0 	.word	0x2000e0a0
   138c0:	200054e4 	.word	0x200054e4
   138c4:	2000e0c0 	.word	0x2000e0c0
   138c8:	20005504 	.word	0x20005504
   138cc:	2000df98 	.word	0x2000df98
   138d0:	20005524 	.word	0x20005524
   138d4:	2000e038 	.word	0x2000e038
   138d8:	20005544 	.word	0x20005544
   138dc:	2000558c 	.word	0x2000558c
   138e0:	00013909 	.word	0x00013909
   138e4:	0001375d 	.word	0x0001375d
   138e8:	2000567c 	.word	0x2000567c
   138ec:	00012515 	.word	0x00012515
   138f0:	000125a9 	.word	0x000125a9

000138f4 <_GLOBAL__sub_I_ptrFlapperValveController>:
   138f4:	b580      	push	{r7, lr}
   138f6:	af00      	add	r7, sp, #0
   138f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   138fc:	2001      	movs	r0, #1
   138fe:	4b01      	ldr	r3, [pc, #4]	; (13904 <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
   13900:	4798      	blx	r3
   13902:	bd80      	pop	{r7, pc}
   13904:	00013789 	.word	0x00013789

00013908 <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
   13908:	b580      	push	{r7, lr}
   1390a:	b082      	sub	sp, #8
   1390c:	af00      	add	r7, sp, #0
   1390e:	6078      	str	r0, [r7, #4]
   13910:	687b      	ldr	r3, [r7, #4]
   13912:	4618      	mov	r0, r3
   13914:	4b0c      	ldr	r3, [pc, #48]	; (13948 <_ZN24SingleFlapperValve_ClassC1Ev+0x40>)
   13916:	4798      	blx	r3
{
	valveID=0;
   13918:	687b      	ldr	r3, [r7, #4]
   1391a:	2200      	movs	r2, #0
   1391c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	i2c=&i2cStatic;
   13920:	687b      	ldr	r3, [r7, #4]
   13922:	4a0a      	ldr	r2, [pc, #40]	; (1394c <_ZN24SingleFlapperValve_ClassC1Ev+0x44>)
   13924:	64da      	str	r2, [r3, #76]	; 0x4c
	fv1StatusChanged=false;
   13926:	687b      	ldr	r3, [r7, #4]
   13928:	2200      	movs	r2, #0
   1392a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	ptrSingleFlapperValveClass=this;
   1392e:	4a08      	ldr	r2, [pc, #32]	; (13950 <_ZN24SingleFlapperValve_ClassC1Ev+0x48>)
   13930:	687b      	ldr	r3, [r7, #4]
   13932:	6013      	str	r3, [r2, #0]
	isOK=false;
   13934:	687b      	ldr	r3, [r7, #4]
   13936:	2200      	movs	r2, #0
   13938:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
} //FlapperValve_Class
   1393c:	687b      	ldr	r3, [r7, #4]
   1393e:	4618      	mov	r0, r3
   13940:	3708      	adds	r7, #8
   13942:	46bd      	mov	sp, r7
   13944:	bd80      	pop	{r7, pc}
   13946:	bf00      	nop
   13948:	000186f5 	.word	0x000186f5
   1394c:	20005874 	.word	0x20005874
   13950:	20005870 	.word	0x20005870

00013954 <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
   13954:	b580      	push	{r7, lr}
   13956:	b082      	sub	sp, #8
   13958:	af00      	add	r7, sp, #0
   1395a:	6078      	str	r0, [r7, #4]
   1395c:	687b      	ldr	r3, [r7, #4]
   1395e:	4618      	mov	r0, r3
   13960:	4b03      	ldr	r3, [pc, #12]	; (13970 <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
   13962:	4798      	blx	r3
{
} //~FlapperValve_Class
   13964:	687b      	ldr	r3, [r7, #4]
   13966:	4618      	mov	r0, r3
   13968:	3708      	adds	r7, #8
   1396a:	46bd      	mov	sp, r7
   1396c:	bd80      	pop	{r7, pc}
   1396e:	bf00      	nop
   13970:	00018709 	.word	0x00018709

00013974 <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
   13974:	b580      	push	{r7, lr}
   13976:	b082      	sub	sp, #8
   13978:	af00      	add	r7, sp, #0
   1397a:	6078      	str	r0, [r7, #4]
	if (i2c->initiated)
   1397c:	687b      	ldr	r3, [r7, #4]
   1397e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   13980:	7a1b      	ldrb	r3, [r3, #8]
   13982:	b2db      	uxtb	r3, r3
   13984:	2b00      	cmp	r3, #0
   13986:	d113      	bne.n	139b0 <_ZN24SingleFlapperValve_Class4InitEv+0x3c>
	{
	} 
	else
	{
		i2c->Init();
   13988:	687b      	ldr	r3, [r7, #4]
   1398a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1398c:	4618      	mov	r0, r3
   1398e:	4b21      	ldr	r3, [pc, #132]	; (13a14 <_ZN24SingleFlapperValve_Class4InitEv+0xa0>)
   13990:	4798      	blx	r3
		if (i2c->isOK)
   13992:	687b      	ldr	r3, [r7, #4]
   13994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   13996:	7a5b      	ldrb	r3, [r3, #9]
   13998:	b2db      	uxtb	r3, r3
   1399a:	2b00      	cmp	r3, #0
   1399c:	d004      	beq.n	139a8 <_ZN24SingleFlapperValve_Class4InitEv+0x34>
		{
			logger.SaveEvent("I2C Flapper Valve Success");
   1399e:	491e      	ldr	r1, [pc, #120]	; (13a18 <_ZN24SingleFlapperValve_Class4InitEv+0xa4>)
   139a0:	481e      	ldr	r0, [pc, #120]	; (13a1c <_ZN24SingleFlapperValve_Class4InitEv+0xa8>)
   139a2:	4b1f      	ldr	r3, [pc, #124]	; (13a20 <_ZN24SingleFlapperValve_Class4InitEv+0xac>)
   139a4:	4798      	blx	r3
   139a6:	e003      	b.n	139b0 <_ZN24SingleFlapperValve_Class4InitEv+0x3c>
		} 
		else
		{
			logger.SaveEvent("I2C Flapper Valve Failed");
   139a8:	491e      	ldr	r1, [pc, #120]	; (13a24 <_ZN24SingleFlapperValve_Class4InitEv+0xb0>)
   139aa:	481c      	ldr	r0, [pc, #112]	; (13a1c <_ZN24SingleFlapperValve_Class4InitEv+0xa8>)
   139ac:	4b1c      	ldr	r3, [pc, #112]	; (13a20 <_ZN24SingleFlapperValve_Class4InitEv+0xac>)
   139ae:	4798      	blx	r3
		}
	}
		

		if (i2c->isOK)
   139b0:	687b      	ldr	r3, [r7, #4]
   139b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   139b4:	7a5b      	ldrb	r3, [r3, #9]
   139b6:	b2db      	uxtb	r3, r3
   139b8:	2b00      	cmp	r3, #0
   139ba:	d01b      	beq.n	139f4 <_ZN24SingleFlapperValve_Class4InitEv+0x80>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
   139bc:	687b      	ldr	r3, [r7, #4]
   139be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
   139c2:	4619      	mov	r1, r3
   139c4:	6878      	ldr	r0, [r7, #4]
   139c6:	4b18      	ldr	r3, [pc, #96]	; (13a28 <_ZN24SingleFlapperValve_Class4InitEv+0xb4>)
   139c8:	4798      	blx	r3
			expanders[0]->SetPortInput();
   139ca:	687b      	ldr	r3, [r7, #4]
   139cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   139ce:	4618      	mov	r0, r3
   139d0:	4b16      	ldr	r3, [pc, #88]	; (13a2c <_ZN24SingleFlapperValve_Class4InitEv+0xb8>)
   139d2:	4798      	blx	r3
			expanders[1]->SetPortInput(0x82);
   139d4:	687b      	ldr	r3, [r7, #4]
   139d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   139d8:	2182      	movs	r1, #130	; 0x82
   139da:	4618      	mov	r0, r3
   139dc:	4b14      	ldr	r3, [pc, #80]	; (13a30 <_ZN24SingleFlapperValve_Class4InitEv+0xbc>)
   139de:	4798      	blx	r3
			expanders[2]->SetPortOutput();
   139e0:	687b      	ldr	r3, [r7, #4]
   139e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   139e4:	4618      	mov	r0, r3
   139e6:	4b13      	ldr	r3, [pc, #76]	; (13a34 <_ZN24SingleFlapperValve_Class4InitEv+0xc0>)
   139e8:	4798      	blx	r3
			expanders[3]->SetPortInput();
   139ea:	687b      	ldr	r3, [r7, #4]
   139ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   139ee:	4618      	mov	r0, r3
   139f0:	4b0e      	ldr	r3, [pc, #56]	; (13a2c <_ZN24SingleFlapperValve_Class4InitEv+0xb8>)
   139f2:	4798      	blx	r3
			
							
		}else{
			
		}
		isOK=i2c->isOK;
   139f4:	687b      	ldr	r3, [r7, #4]
   139f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   139f8:	7a5b      	ldrb	r3, [r3, #9]
   139fa:	b2da      	uxtb	r2, r3
   139fc:	687b      	ldr	r3, [r7, #4]
   139fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		
		return isOK;
   13a02:	687b      	ldr	r3, [r7, #4]
   13a04:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   13a08:	b2db      	uxtb	r3, r3


}
   13a0a:	4618      	mov	r0, r3
   13a0c:	3708      	adds	r7, #8
   13a0e:	46bd      	mov	sp, r7
   13a10:	bd80      	pop	{r7, pc}
   13a12:	bf00      	nop
   13a14:	0000fc9d 	.word	0x0000fc9d
   13a18:	0001b664 	.word	0x0001b664
   13a1c:	20003a68 	.word	0x20003a68
   13a20:	00011de9 	.word	0x00011de9
   13a24:	0001b680 	.word	0x0001b680
   13a28:	00013a61 	.word	0x00013a61
   13a2c:	0000fff5 	.word	0x0000fff5
   13a30:	00010039 	.word	0x00010039
   13a34:	000100ad 	.word	0x000100ad

00013a38 <_ZN24SingleFlapperValve_Class4InitEh>:

bool	SingleFlapperValve_Class::Init(uint8_t valve_id){
   13a38:	b580      	push	{r7, lr}
   13a3a:	b082      	sub	sp, #8
   13a3c:	af00      	add	r7, sp, #0
   13a3e:	6078      	str	r0, [r7, #4]
   13a40:	460b      	mov	r3, r1
   13a42:	70fb      	strb	r3, [r7, #3]
	valveID=valve_id;
   13a44:	687b      	ldr	r3, [r7, #4]
   13a46:	78fa      	ldrb	r2, [r7, #3]
   13a48:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	return Init();
   13a4c:	6878      	ldr	r0, [r7, #4]
   13a4e:	4b03      	ldr	r3, [pc, #12]	; (13a5c <_ZN24SingleFlapperValve_Class4InitEh+0x24>)
   13a50:	4798      	blx	r3
   13a52:	4603      	mov	r3, r0
}
   13a54:	4618      	mov	r0, r3
   13a56:	3708      	adds	r7, #8
   13a58:	46bd      	mov	sp, r7
   13a5a:	bd80      	pop	{r7, pc}
   13a5c:	00013975 	.word	0x00013975

00013a60 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
   13a60:	b580      	push	{r7, lr}
   13a62:	b084      	sub	sp, #16
   13a64:	af00      	add	r7, sp, #0
   13a66:	6078      	str	r0, [r7, #4]
   13a68:	460b      	mov	r3, r1
   13a6a:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   13a6c:	2300      	movs	r3, #0
   13a6e:	60fb      	str	r3, [r7, #12]
   13a70:	68fb      	ldr	r3, [r7, #12]
   13a72:	2b03      	cmp	r3, #3
   13a74:	dc2d      	bgt.n	13ad2 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x72>
	{
		currentExpander=&(expandersStatic[valveID][i]);
   13a76:	687b      	ldr	r3, [r7, #4]
   13a78:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
   13a7c:	4619      	mov	r1, r3
   13a7e:	68fb      	ldr	r3, [r7, #12]
   13a80:	461a      	mov	r2, r3
   13a82:	00d2      	lsls	r2, r2, #3
   13a84:	1ad2      	subs	r2, r2, r3
   13a86:	0093      	lsls	r3, r2, #2
   13a88:	461a      	mov	r2, r3
   13a8a:	460b      	mov	r3, r1
   13a8c:	00db      	lsls	r3, r3, #3
   13a8e:	1a5b      	subs	r3, r3, r1
   13a90:	011b      	lsls	r3, r3, #4
   13a92:	4413      	add	r3, r2
   13a94:	4a11      	ldr	r2, [pc, #68]	; (13adc <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x7c>)
   13a96:	441a      	add	r2, r3
   13a98:	687b      	ldr	r3, [r7, #4]
   13a9a:	669a      	str	r2, [r3, #104]	; 0x68
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
   13a9c:	687b      	ldr	r3, [r7, #4]
   13a9e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   13aa0:	68fb      	ldr	r3, [r7, #12]
   13aa2:	b2da      	uxtb	r2, r3
   13aa4:	78fb      	ldrb	r3, [r7, #3]
   13aa6:	009b      	lsls	r3, r3, #2
   13aa8:	b2db      	uxtb	r3, r3
   13aaa:	4413      	add	r3, r2
   13aac:	b2db      	uxtb	r3, r3
   13aae:	3320      	adds	r3, #32
   13ab0:	b2d9      	uxtb	r1, r3
   13ab2:	687b      	ldr	r3, [r7, #4]
   13ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   13ab6:	461a      	mov	r2, r3
   13ab8:	4b09      	ldr	r3, [pc, #36]	; (13ae0 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x80>)
   13aba:	4798      	blx	r3
		expanders[i]=currentExpander;
   13abc:	687b      	ldr	r3, [r7, #4]
   13abe:	6e99      	ldr	r1, [r3, #104]	; 0x68
   13ac0:	687b      	ldr	r3, [r7, #4]
   13ac2:	68fa      	ldr	r2, [r7, #12]
   13ac4:	3216      	adds	r2, #22
   13ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   13aca:	68fb      	ldr	r3, [r7, #12]
   13acc:	3301      	adds	r3, #1
   13ace:	60fb      	str	r3, [r7, #12]
   13ad0:	e7ce      	b.n	13a70 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
   13ad2:	2300      	movs	r3, #0
}
   13ad4:	4618      	mov	r0, r3
   13ad6:	3710      	adds	r7, #16
   13ad8:	46bd      	mov	sp, r7
   13ada:	bd80      	pop	{r7, pc}
   13adc:	2000588c 	.word	0x2000588c
   13ae0:	0000fe51 	.word	0x0000fe51

00013ae4 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
   13ae4:	b590      	push	{r4, r7, lr}
   13ae6:	b085      	sub	sp, #20
   13ae8:	af00      	add	r7, sp, #0
   13aea:	60f8      	str	r0, [r7, #12]
   13aec:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
   13aee:	68bb      	ldr	r3, [r7, #8]
   13af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13af2:	4618      	mov	r0, r3
   13af4:	4b0f      	ldr	r3, [pc, #60]	; (13b34 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x50>)
   13af6:	4798      	blx	r3
   13af8:	4603      	mov	r3, r0
   13afa:	461a      	mov	r2, r3
   13afc:	68bb      	ldr	r3, [r7, #8]
   13afe:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	controlOutputs=FillControlOutputs(value);
   13b02:	68b9      	ldr	r1, [r7, #8]
   13b04:	68bb      	ldr	r3, [r7, #8]
   13b06:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
   13b0a:	68bc      	ldr	r4, [r7, #8]
   13b0c:	463b      	mov	r3, r7
   13b0e:	4618      	mov	r0, r3
   13b10:	4b09      	ldr	r3, [pc, #36]	; (13b38 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
   13b12:	4798      	blx	r3
   13b14:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   13b18:	463a      	mov	r2, r7
   13b1a:	6810      	ldr	r0, [r2, #0]
   13b1c:	6851      	ldr	r1, [r2, #4]
   13b1e:	c303      	stmia	r3!, {r0, r1}
	return controlOutputs;
   13b20:	68fa      	ldr	r2, [r7, #12]
   13b22:	68bb      	ldr	r3, [r7, #8]
   13b24:	333c      	adds	r3, #60	; 0x3c
   13b26:	cb03      	ldmia	r3!, {r0, r1}
   13b28:	6010      	str	r0, [r2, #0]
   13b2a:	6051      	str	r1, [r2, #4]
}
   13b2c:	68f8      	ldr	r0, [r7, #12]
   13b2e:	3714      	adds	r7, #20
   13b30:	46bd      	mov	sp, r7
   13b32:	bd90      	pop	{r4, r7, pc}
   13b34:	0000ff35 	.word	0x0000ff35
   13b38:	00018805 	.word	0x00018805

00013b3c <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
   13b3c:	b590      	push	{r4, r7, lr}
   13b3e:	b085      	sub	sp, #20
   13b40:	af00      	add	r7, sp, #0
   13b42:	60f8      	str	r0, [r7, #12]
   13b44:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
   13b46:	68bb      	ldr	r3, [r7, #8]
   13b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   13b4a:	4618      	mov	r0, r3
   13b4c:	4b10      	ldr	r3, [pc, #64]	; (13b90 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
   13b4e:	4798      	blx	r3
   13b50:	4603      	mov	r3, r0
   13b52:	461a      	mov	r2, r3
   13b54:	68bb      	ldr	r3, [r7, #8]
   13b56:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	statusInputs=FillInputStatus(value);
   13b5a:	68b9      	ldr	r1, [r7, #8]
   13b5c:	68bb      	ldr	r3, [r7, #8]
   13b5e:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
   13b62:	68bc      	ldr	r4, [r7, #8]
   13b64:	463b      	mov	r3, r7
   13b66:	4618      	mov	r0, r3
   13b68:	4b0a      	ldr	r3, [pc, #40]	; (13b94 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
   13b6a:	4798      	blx	r3
   13b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   13b70:	463a      	mov	r2, r7
   13b72:	6810      	ldr	r0, [r2, #0]
   13b74:	6018      	str	r0, [r3, #0]
   13b76:	8892      	ldrh	r2, [r2, #4]
   13b78:	809a      	strh	r2, [r3, #4]
	return statusInputs;
   13b7a:	68fa      	ldr	r2, [r7, #12]
   13b7c:	68bb      	ldr	r3, [r7, #8]
   13b7e:	3344      	adds	r3, #68	; 0x44
   13b80:	6818      	ldr	r0, [r3, #0]
   13b82:	6010      	str	r0, [r2, #0]
   13b84:	889b      	ldrh	r3, [r3, #4]
   13b86:	8093      	strh	r3, [r2, #4]
}
   13b88:	68f8      	ldr	r0, [r7, #12]
   13b8a:	3714      	adds	r7, #20
   13b8c:	46bd      	mov	sp, r7
   13b8e:	bd90      	pop	{r4, r7, pc}
   13b90:	0000ff35 	.word	0x0000ff35
   13b94:	000187b1 	.word	0x000187b1

00013b98 <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
   13b98:	b580      	push	{r7, lr}
   13b9a:	b082      	sub	sp, #8
   13b9c:	af00      	add	r7, sp, #0
   13b9e:	6078      	str	r0, [r7, #4]
   13ba0:	460b      	mov	r3, r1
   13ba2:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   13ba4:	687b      	ldr	r3, [r7, #4]
   13ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13ba8:	4618      	mov	r0, r3
   13baa:	4b19      	ldr	r3, [pc, #100]	; (13c10 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
   13bac:	4798      	blx	r3
   13bae:	4603      	mov	r3, r0
   13bb0:	461a      	mov	r2, r3
   13bb2:	687b      	ldr	r3, [r7, #4]
   13bb4:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x01:value&0xfe;
   13bb8:	78fb      	ldrb	r3, [r7, #3]
   13bba:	2b00      	cmp	r3, #0
   13bbc:	d006      	beq.n	13bcc <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
   13bbe:	687b      	ldr	r3, [r7, #4]
   13bc0:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13bc4:	f043 0301 	orr.w	r3, r3, #1
   13bc8:	b2db      	uxtb	r3, r3
   13bca:	e005      	b.n	13bd8 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
   13bcc:	687b      	ldr	r3, [r7, #4]
   13bce:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13bd2:	f023 0301 	bic.w	r3, r3, #1
   13bd6:	b2db      	uxtb	r3, r3
   13bd8:	687a      	ldr	r2, [r7, #4]
   13bda:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	controlOutputs.niAlcFvMotorEnable=b;
   13bde:	687b      	ldr	r3, [r7, #4]
   13be0:	78fa      	ldrb	r2, [r7, #3]
   13be2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	value=expanders[1]->WriteGPIORegister(value);
   13be6:	687b      	ldr	r3, [r7, #4]
   13be8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   13bea:	687b      	ldr	r3, [r7, #4]
   13bec:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13bf0:	4619      	mov	r1, r3
   13bf2:	4610      	mov	r0, r2
   13bf4:	4b07      	ldr	r3, [pc, #28]	; (13c14 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
   13bf6:	4798      	blx	r3
   13bf8:	4603      	mov	r3, r0
   13bfa:	461a      	mov	r2, r3
   13bfc:	687b      	ldr	r3, [r7, #4]
   13bfe:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   13c02:	687b      	ldr	r3, [r7, #4]
   13c04:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   13c08:	4618      	mov	r0, r3
   13c0a:	3708      	adds	r7, #8
   13c0c:	46bd      	mov	sp, r7
   13c0e:	bd80      	pop	{r7, pc}
   13c10:	0000ff35 	.word	0x0000ff35
   13c14:	0000ffb9 	.word	0x0000ffb9

00013c18 <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
   13c18:	b580      	push	{r7, lr}
   13c1a:	b082      	sub	sp, #8
   13c1c:	af00      	add	r7, sp, #0
   13c1e:	6078      	str	r0, [r7, #4]
   13c20:	460b      	mov	r3, r1
   13c22:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   13c24:	687b      	ldr	r3, [r7, #4]
   13c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13c28:	4618      	mov	r0, r3
   13c2a:	4b17      	ldr	r3, [pc, #92]	; (13c88 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x70>)
   13c2c:	4798      	blx	r3
   13c2e:	4603      	mov	r3, r0
   13c30:	461a      	mov	r2, r3
   13c32:	687b      	ldr	r3, [r7, #4]
   13c34:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x20:value&0xdf;
   13c38:	78fb      	ldrb	r3, [r7, #3]
   13c3a:	2b00      	cmp	r3, #0
   13c3c:	d006      	beq.n	13c4c <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
   13c3e:	687b      	ldr	r3, [r7, #4]
   13c40:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13c44:	f043 0320 	orr.w	r3, r3, #32
   13c48:	b2db      	uxtb	r3, r3
   13c4a:	e005      	b.n	13c58 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x40>
   13c4c:	687b      	ldr	r3, [r7, #4]
   13c4e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13c52:	f023 0320 	bic.w	r3, r3, #32
   13c56:	b2db      	uxtb	r3, r3
   13c58:	687a      	ldr	r2, [r7, #4]
   13c5a:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
   13c5e:	687b      	ldr	r3, [r7, #4]
   13c60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   13c62:	687b      	ldr	r3, [r7, #4]
   13c64:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13c68:	4619      	mov	r1, r3
   13c6a:	4610      	mov	r0, r2
   13c6c:	4b07      	ldr	r3, [pc, #28]	; (13c8c <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x74>)
   13c6e:	4798      	blx	r3
   13c70:	4603      	mov	r3, r0
   13c72:	461a      	mov	r2, r3
   13c74:	687b      	ldr	r3, [r7, #4]
   13c76:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   13c7a:	687b      	ldr	r3, [r7, #4]
   13c7c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   13c80:	4618      	mov	r0, r3
   13c82:	3708      	adds	r7, #8
   13c84:	46bd      	mov	sp, r7
   13c86:	bd80      	pop	{r7, pc}
   13c88:	0000ff35 	.word	0x0000ff35
   13c8c:	0000ffb9 	.word	0x0000ffb9

00013c90 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
   13c90:	b580      	push	{r7, lr}
   13c92:	b082      	sub	sp, #8
   13c94:	af00      	add	r7, sp, #0
   13c96:	6078      	str	r0, [r7, #4]
   13c98:	460b      	mov	r3, r1
   13c9a:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   13c9c:	687b      	ldr	r3, [r7, #4]
   13c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13ca0:	4618      	mov	r0, r3
   13ca2:	4b17      	ldr	r3, [pc, #92]	; (13d00 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
   13ca4:	4798      	blx	r3
   13ca6:	4603      	mov	r3, r0
   13ca8:	461a      	mov	r2, r3
   13caa:	687b      	ldr	r3, [r7, #4]
   13cac:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x40:value&0xbf;
   13cb0:	78fb      	ldrb	r3, [r7, #3]
   13cb2:	2b00      	cmp	r3, #0
   13cb4:	d006      	beq.n	13cc4 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
   13cb6:	687b      	ldr	r3, [r7, #4]
   13cb8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13cc0:	b2db      	uxtb	r3, r3
   13cc2:	e005      	b.n	13cd0 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
   13cc4:	687b      	ldr	r3, [r7, #4]
   13cc6:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   13cce:	b2db      	uxtb	r3, r3
   13cd0:	687a      	ldr	r2, [r7, #4]
   13cd2:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
   13cd6:	687b      	ldr	r3, [r7, #4]
   13cd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   13cda:	687b      	ldr	r3, [r7, #4]
   13cdc:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13ce0:	4619      	mov	r1, r3
   13ce2:	4610      	mov	r0, r2
   13ce4:	4b07      	ldr	r3, [pc, #28]	; (13d04 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
   13ce6:	4798      	blx	r3
   13ce8:	4603      	mov	r3, r0
   13cea:	461a      	mov	r2, r3
   13cec:	687b      	ldr	r3, [r7, #4]
   13cee:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   13cf2:	687b      	ldr	r3, [r7, #4]
   13cf4:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   13cf8:	4618      	mov	r0, r3
   13cfa:	3708      	adds	r7, #8
   13cfc:	46bd      	mov	sp, r7
   13cfe:	bd80      	pop	{r7, pc}
   13d00:	0000ff35 	.word	0x0000ff35
   13d04:	0000ffb9 	.word	0x0000ffb9

00013d08 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb>:

uint8_t SingleFlapperValve_Class::SetInvalidPosition(bool b){
   13d08:	b580      	push	{r7, lr}
   13d0a:	b082      	sub	sp, #8
   13d0c:	af00      	add	r7, sp, #0
   13d0e:	6078      	str	r0, [r7, #4]
   13d10:	460b      	mov	r3, r1
   13d12:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   13d14:	687b      	ldr	r3, [r7, #4]
   13d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13d18:	4618      	mov	r0, r3
   13d1a:	4b17      	ldr	r3, [pc, #92]	; (13d78 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x70>)
   13d1c:	4798      	blx	r3
   13d1e:	4603      	mov	r3, r0
   13d20:	461a      	mov	r2, r3
   13d22:	687b      	ldr	r3, [r7, #4]
   13d24:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	value=b?value|0x04:value&0xfb;
   13d28:	78fb      	ldrb	r3, [r7, #3]
   13d2a:	2b00      	cmp	r3, #0
   13d2c:	d006      	beq.n	13d3c <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x34>
   13d2e:	687b      	ldr	r3, [r7, #4]
   13d30:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13d34:	f043 0304 	orr.w	r3, r3, #4
   13d38:	b2db      	uxtb	r3, r3
   13d3a:	e005      	b.n	13d48 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x40>
   13d3c:	687b      	ldr	r3, [r7, #4]
   13d3e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13d42:	f023 0304 	bic.w	r3, r3, #4
   13d46:	b2db      	uxtb	r3, r3
   13d48:	687a      	ldr	r2, [r7, #4]
   13d4a:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
	value=expanders[1]->WriteGPIORegister(value);
   13d4e:	687b      	ldr	r3, [r7, #4]
   13d50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   13d52:	687b      	ldr	r3, [r7, #4]
   13d54:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   13d58:	4619      	mov	r1, r3
   13d5a:	4610      	mov	r0, r2
   13d5c:	4b07      	ldr	r3, [pc, #28]	; (13d7c <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x74>)
   13d5e:	4798      	blx	r3
   13d60:	4603      	mov	r3, r0
   13d62:	461a      	mov	r2, r3
   13d64:	687b      	ldr	r3, [r7, #4]
   13d66:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	return value;
   13d6a:	687b      	ldr	r3, [r7, #4]
   13d6c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
}
   13d70:	4618      	mov	r0, r3
   13d72:	3708      	adds	r7, #8
   13d74:	46bd      	mov	sp, r7
   13d76:	bd80      	pop	{r7, pc}
   13d78:	0000ff35 	.word	0x0000ff35
   13d7c:	0000ffb9 	.word	0x0000ffb9

00013d80 <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
   13d80:	b580      	push	{r7, lr}
   13d82:	b082      	sub	sp, #8
   13d84:	af00      	add	r7, sp, #0
   13d86:	6078      	str	r0, [r7, #4]
   13d88:	460b      	mov	r3, r1
   13d8a:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
   13d8c:	687b      	ldr	r3, [r7, #4]
   13d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   13d90:	78fa      	ldrb	r2, [r7, #3]
   13d92:	4611      	mov	r1, r2
   13d94:	4618      	mov	r0, r3
   13d96:	4b07      	ldr	r3, [pc, #28]	; (13db4 <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
   13d98:	4798      	blx	r3
   13d9a:	4603      	mov	r3, r0
   13d9c:	461a      	mov	r2, r3
   13d9e:	687b      	ldr	r3, [r7, #4]
   13da0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
   13da4:	687b      	ldr	r3, [r7, #4]
   13da6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
}
   13daa:	4618      	mov	r0, r3
   13dac:	3708      	adds	r7, #8
   13dae:	46bd      	mov	sp, r7
   13db0:	bd80      	pop	{r7, pc}
   13db2:	bf00      	nop
   13db4:	0000ffb9 	.word	0x0000ffb9

00013db8 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
	return setpointPosition;
}
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
   13db8:	b580      	push	{r7, lr}
   13dba:	b082      	sub	sp, #8
   13dbc:	af00      	add	r7, sp, #0
   13dbe:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
   13dc0:	687b      	ldr	r3, [r7, #4]
   13dc2:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
   13dc6:	687b      	ldr	r3, [r7, #4]
   13dc8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
   13dcc:	687b      	ldr	r3, [r7, #4]
   13dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   13dd0:	4618      	mov	r0, r3
   13dd2:	4b18      	ldr	r3, [pc, #96]	; (13e34 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x7c>)
   13dd4:	4798      	blx	r3
   13dd6:	4603      	mov	r3, r0
   13dd8:	461a      	mov	r2, r3
   13dda:	687b      	ldr	r3, [r7, #4]
   13ddc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR)
   13de0:	687b      	ldr	r3, [r7, #4]
   13de2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   13de6:	2bda      	cmp	r3, #218	; 0xda
   13de8:	dd04      	ble.n	13df4 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x3c>
	{
		statusFlapperValve=NBC_MODE;
   13dea:	687b      	ldr	r3, [r7, #4]
   13dec:	2203      	movs	r2, #3
   13dee:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   13df2:	e017      	b.n	13e24 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/2)
   13df4:	687b      	ldr	r3, [r7, #4]
   13df6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   13dfa:	2b6d      	cmp	r3, #109	; 0x6d
   13dfc:	dd04      	ble.n	13e08 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x50>
	{
		statusFlapperValve=RECYCLE_MODE;
   13dfe:	687b      	ldr	r3, [r7, #4]
   13e00:	2202      	movs	r2, #2
   13e02:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   13e06:	e00d      	b.n	13e24 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/4)
   13e08:	687b      	ldr	r3, [r7, #4]
   13e0a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
   13e0e:	2b36      	cmp	r3, #54	; 0x36
   13e10:	dd04      	ble.n	13e1c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x64>
	{
		statusFlapperValve=INTERM_MODE;
   13e12:	687b      	ldr	r3, [r7, #4]
   13e14:	2201      	movs	r2, #1
   13e16:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   13e1a:	e003      	b.n	13e24 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	} 
	else
	{
		statusFlapperValve=FRESHAIR_MODE;
   13e1c:	687b      	ldr	r3, [r7, #4]
   13e1e:	2200      	movs	r2, #0
   13e20:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	}
	return actualPosition;
   13e24:	687b      	ldr	r3, [r7, #4]
   13e26:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
}
   13e2a:	4618      	mov	r0, r3
   13e2c:	3708      	adds	r7, #8
   13e2e:	46bd      	mov	sp, r7
   13e30:	bd80      	pop	{r7, pc}
   13e32:	bf00      	nop
   13e34:	0000ff35 	.word	0x0000ff35

00013e38 <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
   13e38:	b590      	push	{r4, r7, lr}
   13e3a:	b083      	sub	sp, #12
   13e3c:	af00      	add	r7, sp, #0
   13e3e:	6078      	str	r0, [r7, #4]
   13e40:	4c05      	ldr	r4, [pc, #20]	; (13e58 <__tcf_0+0x20>)
   13e42:	4b06      	ldr	r3, [pc, #24]	; (13e5c <__tcf_0+0x24>)
   13e44:	429c      	cmp	r4, r3
   13e46:	d004      	beq.n	13e52 <__tcf_0+0x1a>
   13e48:	3c1c      	subs	r4, #28
   13e4a:	4620      	mov	r0, r4
   13e4c:	4b04      	ldr	r3, [pc, #16]	; (13e60 <__tcf_0+0x28>)
   13e4e:	4798      	blx	r3
   13e50:	e7f7      	b.n	13e42 <__tcf_0+0xa>
   13e52:	370c      	adds	r7, #12
   13e54:	46bd      	mov	sp, r7
   13e56:	bd90      	pop	{r4, r7, pc}
   13e58:	2000596c 	.word	0x2000596c
   13e5c:	2000588c 	.word	0x2000588c
   13e60:	0000fe3d 	.word	0x0000fe3d

00013e64 <_Z41__static_initialization_and_destruction_0ii>:
	return true;
}

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}
   13e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13e68:	b082      	sub	sp, #8
   13e6a:	af00      	add	r7, sp, #0
   13e6c:	6078      	str	r0, [r7, #4]
   13e6e:	6039      	str	r1, [r7, #0]
   13e70:	687b      	ldr	r3, [r7, #4]
   13e72:	2b01      	cmp	r3, #1
   13e74:	d177      	bne.n	13f66 <_Z41__static_initialization_and_destruction_0ii+0x102>
   13e76:	683b      	ldr	r3, [r7, #0]
   13e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13e7c:	4293      	cmp	r3, r2
   13e7e:	d172      	bne.n	13f66 <_Z41__static_initialization_and_destruction_0ii+0x102>
   13e80:	493b      	ldr	r1, [pc, #236]	; (13f70 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   13e82:	483c      	ldr	r0, [pc, #240]	; (13f74 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   13e84:	4b3c      	ldr	r3, [pc, #240]	; (13f78 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13e86:	4798      	blx	r3
   13e88:	4a3c      	ldr	r2, [pc, #240]	; (13f7c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13e8a:	493d      	ldr	r1, [pc, #244]	; (13f80 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   13e8c:	4839      	ldr	r0, [pc, #228]	; (13f74 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   13e8e:	4b3d      	ldr	r3, [pc, #244]	; (13f84 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13e90:	4798      	blx	r3
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   13e92:	493d      	ldr	r1, [pc, #244]	; (13f88 <_Z41__static_initialization_and_destruction_0ii+0x124>)
   13e94:	483d      	ldr	r0, [pc, #244]	; (13f8c <_Z41__static_initialization_and_destruction_0ii+0x128>)
   13e96:	4b3e      	ldr	r3, [pc, #248]	; (13f90 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13e98:	4798      	blx	r3
   13e9a:	4a38      	ldr	r2, [pc, #224]	; (13f7c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13e9c:	493d      	ldr	r1, [pc, #244]	; (13f94 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13e9e:	483b      	ldr	r0, [pc, #236]	; (13f8c <_Z41__static_initialization_and_destruction_0ii+0x128>)
   13ea0:	4b38      	ldr	r3, [pc, #224]	; (13f84 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13ea2:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   13ea4:	493c      	ldr	r1, [pc, #240]	; (13f98 <_Z41__static_initialization_and_destruction_0ii+0x134>)
   13ea6:	483d      	ldr	r0, [pc, #244]	; (13f9c <_Z41__static_initialization_and_destruction_0ii+0x138>)
   13ea8:	4b39      	ldr	r3, [pc, #228]	; (13f90 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13eaa:	4798      	blx	r3
   13eac:	4a33      	ldr	r2, [pc, #204]	; (13f7c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13eae:	4939      	ldr	r1, [pc, #228]	; (13f94 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13eb0:	483a      	ldr	r0, [pc, #232]	; (13f9c <_Z41__static_initialization_and_destruction_0ii+0x138>)
   13eb2:	4b34      	ldr	r3, [pc, #208]	; (13f84 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13eb4:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   13eb6:	493a      	ldr	r1, [pc, #232]	; (13fa0 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
   13eb8:	483a      	ldr	r0, [pc, #232]	; (13fa4 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   13eba:	4b35      	ldr	r3, [pc, #212]	; (13f90 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13ebc:	4798      	blx	r3
   13ebe:	4a2f      	ldr	r2, [pc, #188]	; (13f7c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13ec0:	4934      	ldr	r1, [pc, #208]	; (13f94 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13ec2:	4838      	ldr	r0, [pc, #224]	; (13fa4 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   13ec4:	4b2f      	ldr	r3, [pc, #188]	; (13f84 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13ec6:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   13ec8:	4937      	ldr	r1, [pc, #220]	; (13fa8 <_Z41__static_initialization_and_destruction_0ii+0x144>)
   13eca:	4838      	ldr	r0, [pc, #224]	; (13fac <_Z41__static_initialization_and_destruction_0ii+0x148>)
   13ecc:	4b30      	ldr	r3, [pc, #192]	; (13f90 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13ece:	4798      	blx	r3
   13ed0:	4a2a      	ldr	r2, [pc, #168]	; (13f7c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13ed2:	4930      	ldr	r1, [pc, #192]	; (13f94 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13ed4:	4835      	ldr	r0, [pc, #212]	; (13fac <_Z41__static_initialization_and_destruction_0ii+0x148>)
   13ed6:	4b2b      	ldr	r3, [pc, #172]	; (13f84 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13ed8:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   13eda:	4935      	ldr	r1, [pc, #212]	; (13fb0 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
   13edc:	4835      	ldr	r0, [pc, #212]	; (13fb4 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   13ede:	4b2c      	ldr	r3, [pc, #176]	; (13f90 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13ee0:	4798      	blx	r3
   13ee2:	4a26      	ldr	r2, [pc, #152]	; (13f7c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13ee4:	492b      	ldr	r1, [pc, #172]	; (13f94 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13ee6:	4833      	ldr	r0, [pc, #204]	; (13fb4 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   13ee8:	4b26      	ldr	r3, [pc, #152]	; (13f84 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13eea:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   13eec:	4932      	ldr	r1, [pc, #200]	; (13fb8 <_Z41__static_initialization_and_destruction_0ii+0x154>)
   13eee:	4833      	ldr	r0, [pc, #204]	; (13fbc <_Z41__static_initialization_and_destruction_0ii+0x158>)
   13ef0:	4b27      	ldr	r3, [pc, #156]	; (13f90 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13ef2:	4798      	blx	r3
   13ef4:	4a21      	ldr	r2, [pc, #132]	; (13f7c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13ef6:	4927      	ldr	r1, [pc, #156]	; (13f94 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13ef8:	4830      	ldr	r0, [pc, #192]	; (13fbc <_Z41__static_initialization_and_destruction_0ii+0x158>)
   13efa:	4b22      	ldr	r3, [pc, #136]	; (13f84 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13efc:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   13efe:	4930      	ldr	r1, [pc, #192]	; (13fc0 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
   13f00:	4830      	ldr	r0, [pc, #192]	; (13fc4 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   13f02:	4b23      	ldr	r3, [pc, #140]	; (13f90 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13f04:	4798      	blx	r3
   13f06:	4a1d      	ldr	r2, [pc, #116]	; (13f7c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13f08:	4922      	ldr	r1, [pc, #136]	; (13f94 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13f0a:	482e      	ldr	r0, [pc, #184]	; (13fc4 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   13f0c:	4b1d      	ldr	r3, [pc, #116]	; (13f84 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13f0e:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   13f10:	492d      	ldr	r1, [pc, #180]	; (13fc8 <_Z41__static_initialization_and_destruction_0ii+0x164>)
   13f12:	482e      	ldr	r0, [pc, #184]	; (13fcc <_Z41__static_initialization_and_destruction_0ii+0x168>)
   13f14:	4b1e      	ldr	r3, [pc, #120]	; (13f90 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   13f16:	4798      	blx	r3
   13f18:	4a18      	ldr	r2, [pc, #96]	; (13f7c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13f1a:	491e      	ldr	r1, [pc, #120]	; (13f94 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   13f1c:	482b      	ldr	r0, [pc, #172]	; (13fcc <_Z41__static_initialization_and_destruction_0ii+0x168>)
   13f1e:	4b19      	ldr	r3, [pc, #100]	; (13f84 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13f20:	4798      	blx	r3
static I2C_Sync_Class		i2cStatic(&I2C_FLAPPER_VALVE);
   13f22:	492b      	ldr	r1, [pc, #172]	; (13fd0 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
   13f24:	482b      	ldr	r0, [pc, #172]	; (13fd4 <_Z41__static_initialization_and_destruction_0ii+0x170>)
   13f26:	4b14      	ldr	r3, [pc, #80]	; (13f78 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   13f28:	4798      	blx	r3
   13f2a:	4a14      	ldr	r2, [pc, #80]	; (13f7c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13f2c:	4914      	ldr	r1, [pc, #80]	; (13f80 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   13f2e:	4829      	ldr	r0, [pc, #164]	; (13fd4 <_Z41__static_initialization_and_destruction_0ii+0x170>)
   13f30:	4b14      	ldr	r3, [pc, #80]	; (13f84 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13f32:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
   13f34:	4b28      	ldr	r3, [pc, #160]	; (13fd8 <_Z41__static_initialization_and_destruction_0ii+0x174>)
   13f36:	2401      	movs	r4, #1
   13f38:	461e      	mov	r6, r3
   13f3a:	2c00      	cmp	r4, #0
   13f3c:	db0e      	blt.n	13f5c <_Z41__static_initialization_and_destruction_0ii+0xf8>
   13f3e:	4633      	mov	r3, r6
   13f40:	2503      	movs	r5, #3
   13f42:	4698      	mov	r8, r3
   13f44:	2d00      	cmp	r5, #0
   13f46:	db06      	blt.n	13f56 <_Z41__static_initialization_and_destruction_0ii+0xf2>
   13f48:	4640      	mov	r0, r8
   13f4a:	4b24      	ldr	r3, [pc, #144]	; (13fdc <_Z41__static_initialization_and_destruction_0ii+0x178>)
   13f4c:	4798      	blx	r3
   13f4e:	f108 081c 	add.w	r8, r8, #28
   13f52:	3d01      	subs	r5, #1
   13f54:	e7f6      	b.n	13f44 <_Z41__static_initialization_and_destruction_0ii+0xe0>
   13f56:	3670      	adds	r6, #112	; 0x70
   13f58:	3c01      	subs	r4, #1
   13f5a:	e7ee      	b.n	13f3a <_Z41__static_initialization_and_destruction_0ii+0xd6>
   13f5c:	4a07      	ldr	r2, [pc, #28]	; (13f7c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   13f5e:	4920      	ldr	r1, [pc, #128]	; (13fe0 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
   13f60:	2000      	movs	r0, #0
   13f62:	4b08      	ldr	r3, [pc, #32]	; (13f84 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   13f64:	4798      	blx	r3
}
   13f66:	bf00      	nop
   13f68:	3708      	adds	r7, #8
   13f6a:	46bd      	mov	sp, r7
   13f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f70:	2000e058 	.word	0x2000e058
   13f74:	20005758 	.word	0x20005758
   13f78:	0000fc6d 	.word	0x0000fc6d
   13f7c:	20000000 	.word	0x20000000
   13f80:	0000fc89 	.word	0x0000fc89
   13f84:	0001a611 	.word	0x0001a611
   13f88:	2000df28 	.word	0x2000df28
   13f8c:	20005770 	.word	0x20005770
   13f90:	00010441 	.word	0x00010441
   13f94:	00010479 	.word	0x00010479
   13f98:	2000dfbc 	.word	0x2000dfbc
   13f9c:	20005790 	.word	0x20005790
   13fa0:	2000e0e0 	.word	0x2000e0e0
   13fa4:	200057b0 	.word	0x200057b0
   13fa8:	2000dfdc 	.word	0x2000dfdc
   13fac:	200057d0 	.word	0x200057d0
   13fb0:	2000e0a0 	.word	0x2000e0a0
   13fb4:	200057f0 	.word	0x200057f0
   13fb8:	2000e0c0 	.word	0x2000e0c0
   13fbc:	20005810 	.word	0x20005810
   13fc0:	2000df98 	.word	0x2000df98
   13fc4:	20005830 	.word	0x20005830
   13fc8:	2000e038 	.word	0x2000e038
   13fcc:	20005850 	.word	0x20005850
   13fd0:	2000dffc 	.word	0x2000dffc
   13fd4:	20005874 	.word	0x20005874
   13fd8:	2000588c 	.word	0x2000588c
   13fdc:	0000fe29 	.word	0x0000fe29
   13fe0:	00013e39 	.word	0x00013e39

00013fe4 <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
   13fe4:	b580      	push	{r7, lr}
   13fe6:	af00      	add	r7, sp, #0
   13fe8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13fec:	2001      	movs	r0, #1
   13fee:	4b01      	ldr	r3, [pc, #4]	; (13ff4 <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
   13ff0:	4798      	blx	r3
   13ff2:	bd80      	pop	{r7, pc}
   13ff4:	00013e65 	.word	0x00013e65

00013ff8 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
   13ff8:	b480      	push	{r7}
   13ffa:	b083      	sub	sp, #12
   13ffc:	af00      	add	r7, sp, #0
   13ffe:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
   14000:	4a07      	ldr	r2, [pc, #28]	; (14020 <_ZN18SingleHeater_ClassC1Ev+0x28>)
   14002:	687b      	ldr	r3, [r7, #4]
   14004:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
   14006:	687b      	ldr	r3, [r7, #4]
   14008:	4a06      	ldr	r2, [pc, #24]	; (14024 <_ZN18SingleHeater_ClassC1Ev+0x2c>)
   1400a:	619a      	str	r2, [r3, #24]
	heaterStatusChanged=false;
   1400c:	687b      	ldr	r3, [r7, #4]
   1400e:	2200      	movs	r2, #0
   14010:	705a      	strb	r2, [r3, #1]
} //SingleHeater_Class
   14012:	687b      	ldr	r3, [r7, #4]
   14014:	4618      	mov	r0, r3
   14016:	370c      	adds	r7, #12
   14018:	46bd      	mov	sp, r7
   1401a:	bc80      	pop	{r7}
   1401c:	4770      	bx	lr
   1401e:	bf00      	nop
   14020:	20005984 	.word	0x20005984
   14024:	2000596c 	.word	0x2000596c

00014028 <_ZN18SingleHeater_ClassD1Ev>:
	heaterStatusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
   14028:	b480      	push	{r7}
   1402a:	b083      	sub	sp, #12
   1402c:	af00      	add	r7, sp, #0
   1402e:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
   14030:	687b      	ldr	r3, [r7, #4]
   14032:	4618      	mov	r0, r3
   14034:	370c      	adds	r7, #12
   14036:	46bd      	mov	sp, r7
   14038:	bc80      	pop	{r7}
   1403a:	4770      	bx	lr

0001403c <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class>:
			asm("nop");
		}
		isOK=i2c->isOK;
		return isOK;
}
bool SingleHeater_Class::Init(uint8_t id,MCP23008_Class *heater_expanders){
   1403c:	b580      	push	{r7, lr}
   1403e:	b084      	sub	sp, #16
   14040:	af00      	add	r7, sp, #0
   14042:	60f8      	str	r0, [r7, #12]
   14044:	460b      	mov	r3, r1
   14046:	607a      	str	r2, [r7, #4]
   14048:	72fb      	strb	r3, [r7, #11]
	heater_id=id;
   1404a:	68fb      	ldr	r3, [r7, #12]
   1404c:	7afa      	ldrb	r2, [r7, #11]
   1404e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	if (i2c->initiated)
   14052:	68fb      	ldr	r3, [r7, #12]
   14054:	699b      	ldr	r3, [r3, #24]
   14056:	7a1b      	ldrb	r3, [r3, #8]
   14058:	b2db      	uxtb	r3, r3
   1405a:	2b00      	cmp	r3, #0
   1405c:	d104      	bne.n	14068 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x2c>
	{
		
	} 
	else{
		i2c->Init();
   1405e:	68fb      	ldr	r3, [r7, #12]
   14060:	699b      	ldr	r3, [r3, #24]
   14062:	4618      	mov	r0, r3
   14064:	4b18      	ldr	r3, [pc, #96]	; (140c8 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x8c>)
   14066:	4798      	blx	r3
	}
	
	if (i2c->isOK)
   14068:	68fb      	ldr	r3, [r7, #12]
   1406a:	699b      	ldr	r3, [r3, #24]
   1406c:	7a5b      	ldrb	r3, [r3, #9]
   1406e:	b2db      	uxtb	r3, r3
   14070:	2b00      	cmp	r3, #0
   14072:	d01b      	beq.n	140ac <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x70>
	{
		
		//ext_irq_register(PIN_PA03,FUNC_PTR(HeaterStatusChanged));
		InitExpanderArray(heater_expanders);
   14074:	6879      	ldr	r1, [r7, #4]
   14076:	68f8      	ldr	r0, [r7, #12]
   14078:	4b14      	ldr	r3, [pc, #80]	; (140cc <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x90>)
   1407a:	4798      	blx	r3
		expanders[0]->SetPortInput();
   1407c:	68fb      	ldr	r3, [r7, #12]
   1407e:	68db      	ldr	r3, [r3, #12]
   14080:	4618      	mov	r0, r3
   14082:	4b13      	ldr	r3, [pc, #76]	; (140d0 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x94>)
   14084:	4798      	blx	r3
		expanders[0]->SetChangeInterruptPins(0x1f);
   14086:	68fb      	ldr	r3, [r7, #12]
   14088:	68db      	ldr	r3, [r3, #12]
   1408a:	211f      	movs	r1, #31
   1408c:	4618      	mov	r0, r3
   1408e:	4b11      	ldr	r3, [pc, #68]	; (140d4 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x98>)
   14090:	4798      	blx	r3
		expanders[1]->SetPortOutput();
   14092:	68fb      	ldr	r3, [r7, #12]
   14094:	691b      	ldr	r3, [r3, #16]
   14096:	4618      	mov	r0, r3
   14098:	4b0f      	ldr	r3, [pc, #60]	; (140d8 <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x9c>)
   1409a:	4798      	blx	r3
		isOK=SelfTest();
   1409c:	68f8      	ldr	r0, [r7, #12]
   1409e:	4b0f      	ldr	r3, [pc, #60]	; (140dc <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0xa0>)
   140a0:	4798      	blx	r3
   140a2:	4603      	mov	r3, r0
   140a4:	461a      	mov	r2, r3
   140a6:	68fb      	ldr	r3, [r7, #12]
   140a8:	701a      	strb	r2, [r3, #0]
   140aa:	e000      	b.n	140ae <_ZN18SingleHeater_Class4InitEhP14MCP23008_Class+0x72>
	}
	else
	{
		asm("nop");
   140ac:	bf00      	nop
	}
	isOK=i2c->isOK;
   140ae:	68fb      	ldr	r3, [r7, #12]
   140b0:	699b      	ldr	r3, [r3, #24]
   140b2:	7a5b      	ldrb	r3, [r3, #9]
   140b4:	b2da      	uxtb	r2, r3
   140b6:	68fb      	ldr	r3, [r7, #12]
   140b8:	701a      	strb	r2, [r3, #0]
	return isOK;
   140ba:	68fb      	ldr	r3, [r7, #12]
   140bc:	781b      	ldrb	r3, [r3, #0]
   140be:	b2db      	uxtb	r3, r3
}
   140c0:	4618      	mov	r0, r3
   140c2:	3710      	adds	r7, #16
   140c4:	46bd      	mov	sp, r7
   140c6:	bd80      	pop	{r7, pc}
   140c8:	0000fc9d 	.word	0x0000fc9d
   140cc:	000140e1 	.word	0x000140e1
   140d0:	0000fff5 	.word	0x0000fff5
   140d4:	00010389 	.word	0x00010389
   140d8:	000100ad 	.word	0x000100ad
   140dc:	000142e5 	.word	0x000142e5

000140e0 <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class>:
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
	}
	
}

uint8_t SingleHeater_Class::InitExpanderArray(MCP23008_Class *heater_expanders){
   140e0:	b580      	push	{r7, lr}
   140e2:	b084      	sub	sp, #16
   140e4:	af00      	add	r7, sp, #0
   140e6:	6078      	str	r0, [r7, #4]
   140e8:	6039      	str	r1, [r7, #0]
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
   140ea:	2300      	movs	r3, #0
   140ec:	60fb      	str	r3, [r7, #12]
   140ee:	68fb      	ldr	r3, [r7, #12]
   140f0:	2b01      	cmp	r3, #1
   140f2:	dc34      	bgt.n	1415e <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class+0x7e>
	{
		expanders[i]=&heater_expanders[2*heater_id+i];
   140f4:	687b      	ldr	r3, [r7, #4]
   140f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   140fa:	005a      	lsls	r2, r3, #1
   140fc:	68fb      	ldr	r3, [r7, #12]
   140fe:	4413      	add	r3, r2
   14100:	461a      	mov	r2, r3
   14102:	4613      	mov	r3, r2
   14104:	00db      	lsls	r3, r3, #3
   14106:	1a9b      	subs	r3, r3, r2
   14108:	009b      	lsls	r3, r3, #2
   1410a:	461a      	mov	r2, r3
   1410c:	683b      	ldr	r3, [r7, #0]
   1410e:	441a      	add	r2, r3
   14110:	6879      	ldr	r1, [r7, #4]
   14112:	68fb      	ldr	r3, [r7, #12]
   14114:	3302      	adds	r3, #2
   14116:	009b      	lsls	r3, r3, #2
   14118:	440b      	add	r3, r1
   1411a:	605a      	str	r2, [r3, #4]
		currentExpander=(expanders[i]);
   1411c:	687a      	ldr	r2, [r7, #4]
   1411e:	68fb      	ldr	r3, [r7, #12]
   14120:	3302      	adds	r3, #2
   14122:	009b      	lsls	r3, r3, #2
   14124:	4413      	add	r3, r2
   14126:	685a      	ldr	r2, [r3, #4]
   14128:	687b      	ldr	r3, [r7, #4]
   1412a:	615a      	str	r2, [r3, #20]
		currentExpander->Init(i|MCP23008_ADDRESS|(2*heater_id),i2c);
   1412c:	687b      	ldr	r3, [r7, #4]
   1412e:	6958      	ldr	r0, [r3, #20]
   14130:	68fb      	ldr	r3, [r7, #12]
   14132:	b2da      	uxtb	r2, r3
   14134:	687b      	ldr	r3, [r7, #4]
   14136:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   1413a:	005b      	lsls	r3, r3, #1
   1413c:	b2db      	uxtb	r3, r3
   1413e:	4313      	orrs	r3, r2
   14140:	b2db      	uxtb	r3, r3
   14142:	f043 0320 	orr.w	r3, r3, #32
   14146:	b2db      	uxtb	r3, r3
   14148:	b25b      	sxtb	r3, r3
   1414a:	b2d9      	uxtb	r1, r3
   1414c:	687b      	ldr	r3, [r7, #4]
   1414e:	699b      	ldr	r3, [r3, #24]
   14150:	461a      	mov	r2, r3
   14152:	4b05      	ldr	r3, [pc, #20]	; (14168 <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class+0x88>)
   14154:	4798      	blx	r3
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
   14156:	68fb      	ldr	r3, [r7, #12]
   14158:	3301      	adds	r3, #1
   1415a:	60fb      	str	r3, [r7, #12]
   1415c:	e7c7      	b.n	140ee <_ZN18SingleHeater_Class17InitExpanderArrayEP14MCP23008_Class+0xe>
	}
	
}
   1415e:	bf00      	nop
   14160:	4618      	mov	r0, r3
   14162:	3710      	adds	r7, #16
   14164:	46bd      	mov	sp, r7
   14166:	bd80      	pop	{r7, pc}
   14168:	0000fe51 	.word	0x0000fe51

0001416c <_ZN18SingleHeater_Class10ReadStatusEv>:

uint8_t	SingleHeater_Class::ReadStatus(void){
   1416c:	b580      	push	{r7, lr}
   1416e:	b084      	sub	sp, #16
   14170:	af00      	add	r7, sp, #0
   14172:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
   14174:	687b      	ldr	r3, [r7, #4]
   14176:	68db      	ldr	r3, [r3, #12]
   14178:	4618      	mov	r0, r3
   1417a:	4b16      	ldr	r3, [pc, #88]	; (141d4 <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
   1417c:	4798      	blx	r3
   1417e:	4603      	mov	r3, r0
   14180:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
   14182:	7bbb      	ldrb	r3, [r7, #14]
   14184:	f003 0301 	and.w	r3, r3, #1
   14188:	2b00      	cmp	r3, #0
   1418a:	bf14      	ite	ne
   1418c:	2301      	movne	r3, #1
   1418e:	2300      	moveq	r3, #0
   14190:	b2da      	uxtb	r2, r3
   14192:	687b      	ldr	r3, [r7, #4]
   14194:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
   14196:	2300      	movs	r3, #0
   14198:	73fb      	strb	r3, [r7, #15]
   1419a:	7bfb      	ldrb	r3, [r7, #15]
   1419c:	2b03      	cmp	r3, #3
   1419e:	dc14      	bgt.n	141ca <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
   141a0:	7bfb      	ldrb	r3, [r7, #15]
   141a2:	7bb9      	ldrb	r1, [r7, #14]
   141a4:	7bfa      	ldrb	r2, [r7, #15]
   141a6:	3201      	adds	r2, #1
   141a8:	fa41 f202 	asr.w	r2, r1, r2
   141ac:	f002 0201 	and.w	r2, r2, #1
   141b0:	2a00      	cmp	r2, #0
   141b2:	bf14      	ite	ne
   141b4:	2201      	movne	r2, #1
   141b6:	2200      	moveq	r2, #0
   141b8:	b2d1      	uxtb	r1, r2
   141ba:	687a      	ldr	r2, [r7, #4]
   141bc:	4413      	add	r3, r2
   141be:	460a      	mov	r2, r1
   141c0:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
   141c2:	7bfb      	ldrb	r3, [r7, #15]
   141c4:	3301      	adds	r3, #1
   141c6:	73fb      	strb	r3, [r7, #15]
   141c8:	e7e7      	b.n	1419a <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
   141ca:	7bbb      	ldrb	r3, [r7, #14]
}
   141cc:	4618      	mov	r0, r3
   141ce:	3710      	adds	r7, #16
   141d0:	46bd      	mov	sp, r7
   141d2:	bd80      	pop	{r7, pc}
   141d4:	0000ff35 	.word	0x0000ff35

000141d8 <_ZN18SingleHeater_Class9ReadGPIOsEPh>:
void	SingleHeater_Class::ReadGPIOs(uint8_t *buffer){
   141d8:	b590      	push	{r4, r7, lr}
   141da:	b085      	sub	sp, #20
   141dc:	af00      	add	r7, sp, #0
   141de:	6078      	str	r0, [r7, #4]
   141e0:	6039      	str	r1, [r7, #0]

	for (uint8_t i = 0; i < 2; i++)
   141e2:	2300      	movs	r3, #0
   141e4:	73fb      	strb	r3, [r7, #15]
   141e6:	7bfb      	ldrb	r3, [r7, #15]
   141e8:	2b01      	cmp	r3, #1
   141ea:	dc11      	bgt.n	14210 <_ZN18SingleHeater_Class9ReadGPIOsEPh+0x38>
	{
		buffer[i]=expanders[i]->ReadGPIORegister();
   141ec:	7bfb      	ldrb	r3, [r7, #15]
   141ee:	683a      	ldr	r2, [r7, #0]
   141f0:	18d4      	adds	r4, r2, r3
   141f2:	7bfb      	ldrb	r3, [r7, #15]
   141f4:	687a      	ldr	r2, [r7, #4]
   141f6:	3302      	adds	r3, #2
   141f8:	009b      	lsls	r3, r3, #2
   141fa:	4413      	add	r3, r2
   141fc:	685b      	ldr	r3, [r3, #4]
   141fe:	4618      	mov	r0, r3
   14200:	4b05      	ldr	r3, [pc, #20]	; (14218 <_ZN18SingleHeater_Class9ReadGPIOsEPh+0x40>)
   14202:	4798      	blx	r3
   14204:	4603      	mov	r3, r0
   14206:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < 2; i++)
   14208:	7bfb      	ldrb	r3, [r7, #15]
   1420a:	3301      	adds	r3, #1
   1420c:	73fb      	strb	r3, [r7, #15]
   1420e:	e7ea      	b.n	141e6 <_ZN18SingleHeater_Class9ReadGPIOsEPh+0xe>
		
	}
	
}
   14210:	bf00      	nop
   14212:	3714      	adds	r7, #20
   14214:	46bd      	mov	sp, r7
   14216:	bd90      	pop	{r4, r7, pc}
   14218:	0000ff35 	.word	0x0000ff35

0001421c <_ZN18SingleHeater_Class11EnableIndexEh>:
	{
		enables[i]=!(r&(0x01<<i));
	}
	return r;
}
uint8_t	SingleHeater_Class::EnableIndex(uint8_t indexHeater){
   1421c:	b580      	push	{r7, lr}
   1421e:	b082      	sub	sp, #8
   14220:	af00      	add	r7, sp, #0
   14222:	6078      	str	r0, [r7, #4]
   14224:	460b      	mov	r3, r1
   14226:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,false);
   14228:	687b      	ldr	r3, [r7, #4]
   1422a:	691b      	ldr	r3, [r3, #16]
   1422c:	78f9      	ldrb	r1, [r7, #3]
   1422e:	2200      	movs	r2, #0
   14230:	4618      	mov	r0, r3
   14232:	4b06      	ldr	r3, [pc, #24]	; (1424c <_ZN18SingleHeater_Class11EnableIndexEh+0x30>)
   14234:	4798      	blx	r3
   14236:	4603      	mov	r3, r0
   14238:	461a      	mov	r2, r3
   1423a:	687b      	ldr	r3, [r7, #4]
   1423c:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   1423e:	687b      	ldr	r3, [r7, #4]
   14240:	7adb      	ldrb	r3, [r3, #11]
}
   14242:	4618      	mov	r0, r3
   14244:	3708      	adds	r7, #8
   14246:	46bd      	mov	sp, r7
   14248:	bd80      	pop	{r7, pc}
   1424a:	bf00      	nop
   1424c:	000101ed 	.word	0x000101ed

00014250 <_ZN18SingleHeater_Class8SetRelayEhb>:
uint8_t	SingleHeater_Class::SetRelay(uint8_t indexHeater, bool state){
   14250:	b590      	push	{r4, r7, lr}
   14252:	b083      	sub	sp, #12
   14254:	af00      	add	r7, sp, #0
   14256:	6078      	str	r0, [r7, #4]
   14258:	460b      	mov	r3, r1
   1425a:	70fb      	strb	r3, [r7, #3]
   1425c:	4613      	mov	r3, r2
   1425e:	70bb      	strb	r3, [r7, #2]
	enabled=expanders[1]->WriteDigit(indexHeater,!state);
   14260:	687b      	ldr	r3, [r7, #4]
   14262:	6918      	ldr	r0, [r3, #16]
   14264:	78bb      	ldrb	r3, [r7, #2]
   14266:	f083 0301 	eor.w	r3, r3, #1
   1426a:	b2da      	uxtb	r2, r3
   1426c:	78fb      	ldrb	r3, [r7, #3]
   1426e:	4619      	mov	r1, r3
   14270:	4b09      	ldr	r3, [pc, #36]	; (14298 <_ZN18SingleHeater_Class8SetRelayEhb+0x48>)
   14272:	4798      	blx	r3
   14274:	4603      	mov	r3, r0
   14276:	461a      	mov	r2, r3
   14278:	687b      	ldr	r3, [r7, #4]
   1427a:	72da      	strb	r2, [r3, #11]
	logger.SaveEventIndexResult("Heater ",indexHeater+1,state);
   1427c:	78fb      	ldrb	r3, [r7, #3]
   1427e:	3301      	adds	r3, #1
   14280:	b2da      	uxtb	r2, r3
   14282:	78bb      	ldrb	r3, [r7, #2]
   14284:	4905      	ldr	r1, [pc, #20]	; (1429c <_ZN18SingleHeater_Class8SetRelayEhb+0x4c>)
   14286:	4806      	ldr	r0, [pc, #24]	; (142a0 <_ZN18SingleHeater_Class8SetRelayEhb+0x50>)
   14288:	4c06      	ldr	r4, [pc, #24]	; (142a4 <_ZN18SingleHeater_Class8SetRelayEhb+0x54>)
   1428a:	47a0      	blx	r4
	return uint8_t(enabled);
   1428c:	687b      	ldr	r3, [r7, #4]
   1428e:	7adb      	ldrb	r3, [r3, #11]
}
   14290:	4618      	mov	r0, r3
   14292:	370c      	adds	r7, #12
   14294:	46bd      	mov	sp, r7
   14296:	bd90      	pop	{r4, r7, pc}
   14298:	000101ed 	.word	0x000101ed
   1429c:	0001b69c 	.word	0x0001b69c
   142a0:	20003a68 	.word	0x20003a68
   142a4:	00011dd9 	.word	0x00011dd9

000142a8 <_ZN18SingleHeater_Class12DisableIndexEh>:
	{
		DisableIndex(i);
	}
}

uint8_t	SingleHeater_Class::DisableIndex(uint8_t indexHeater){
   142a8:	b580      	push	{r7, lr}
   142aa:	b082      	sub	sp, #8
   142ac:	af00      	add	r7, sp, #0
   142ae:	6078      	str	r0, [r7, #4]
   142b0:	460b      	mov	r3, r1
   142b2:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,true)?false:true;
   142b4:	687b      	ldr	r3, [r7, #4]
   142b6:	691b      	ldr	r3, [r3, #16]
   142b8:	78f9      	ldrb	r1, [r7, #3]
   142ba:	2201      	movs	r2, #1
   142bc:	4618      	mov	r0, r3
   142be:	4b08      	ldr	r3, [pc, #32]	; (142e0 <_ZN18SingleHeater_Class12DisableIndexEh+0x38>)
   142c0:	4798      	blx	r3
   142c2:	4603      	mov	r3, r0
   142c4:	2b00      	cmp	r3, #0
   142c6:	d001      	beq.n	142cc <_ZN18SingleHeater_Class12DisableIndexEh+0x24>
   142c8:	2200      	movs	r2, #0
   142ca:	e000      	b.n	142ce <_ZN18SingleHeater_Class12DisableIndexEh+0x26>
   142cc:	2201      	movs	r2, #1
   142ce:	687b      	ldr	r3, [r7, #4]
   142d0:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   142d2:	687b      	ldr	r3, [r7, #4]
   142d4:	7adb      	ldrb	r3, [r3, #11]
}
   142d6:	4618      	mov	r0, r3
   142d8:	3708      	adds	r7, #8
   142da:	46bd      	mov	sp, r7
   142dc:	bd80      	pop	{r7, pc}
   142de:	bf00      	nop
   142e0:	000101ed 	.word	0x000101ed

000142e4 <_ZN18SingleHeater_Class8SelfTestEv>:
	}
	return powerLevel;
}


bool SingleHeater_Class::SelfTest(void){
   142e4:	b580      	push	{r7, lr}
   142e6:	b084      	sub	sp, #16
   142e8:	af00      	add	r7, sp, #0
   142ea:	6078      	str	r0, [r7, #4]
	bool result;
	for (uint8_t i = 0; i < 4; i++)
   142ec:	2300      	movs	r3, #0
   142ee:	73bb      	strb	r3, [r7, #14]
   142f0:	7bbb      	ldrb	r3, [r7, #14]
   142f2:	2b03      	cmp	r3, #3
   142f4:	dc1f      	bgt.n	14336 <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	{
		EnableIndex(i);
   142f6:	7bbb      	ldrb	r3, [r7, #14]
   142f8:	4619      	mov	r1, r3
   142fa:	6878      	ldr	r0, [r7, #4]
   142fc:	4b10      	ldr	r3, [pc, #64]	; (14340 <_ZN18SingleHeater_Class8SelfTestEv+0x5c>)
   142fe:	4798      	blx	r3
		delay_ms(50);
   14300:	2032      	movs	r0, #50	; 0x32
   14302:	4b10      	ldr	r3, [pc, #64]	; (14344 <_ZN18SingleHeater_Class8SelfTestEv+0x60>)
   14304:	4798      	blx	r3
		DisableIndex(i);
   14306:	7bbb      	ldrb	r3, [r7, #14]
   14308:	4619      	mov	r1, r3
   1430a:	6878      	ldr	r0, [r7, #4]
   1430c:	4b0e      	ldr	r3, [pc, #56]	; (14348 <_ZN18SingleHeater_Class8SelfTestEv+0x64>)
   1430e:	4798      	blx	r3
		ReadStatus();
   14310:	6878      	ldr	r0, [r7, #4]
   14312:	4b0e      	ldr	r3, [pc, #56]	; (1434c <_ZN18SingleHeater_Class8SelfTestEv+0x68>)
   14314:	4798      	blx	r3
		if (heaterGPIO.inputs.niAlcHeaterRelayFault[i])
   14316:	7bbb      	ldrb	r3, [r7, #14]
   14318:	687a      	ldr	r2, [r7, #4]
   1431a:	4413      	add	r3, r2
   1431c:	78db      	ldrb	r3, [r3, #3]
   1431e:	2b00      	cmp	r3, #0
   14320:	d002      	beq.n	14328 <_ZN18SingleHeater_Class8SelfTestEv+0x44>
		{
			result=true;
   14322:	2301      	movs	r3, #1
   14324:	73fb      	strb	r3, [r7, #15]
   14326:	e002      	b.n	1432e <_ZN18SingleHeater_Class8SelfTestEv+0x4a>
		} 
		else
		{
			result=false;
   14328:	2300      	movs	r3, #0
   1432a:	73fb      	strb	r3, [r7, #15]
			break;
   1432c:	e003      	b.n	14336 <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	for (uint8_t i = 0; i < 4; i++)
   1432e:	7bbb      	ldrb	r3, [r7, #14]
   14330:	3301      	adds	r3, #1
   14332:	73bb      	strb	r3, [r7, #14]
   14334:	e7dc      	b.n	142f0 <_ZN18SingleHeater_Class8SelfTestEv+0xc>
		}
			
			
	}
	
	return result;
   14336:	7bfb      	ldrb	r3, [r7, #15]
}
   14338:	4618      	mov	r0, r3
   1433a:	3710      	adds	r7, #16
   1433c:	46bd      	mov	sp, r7
   1433e:	bd80      	pop	{r7, pc}
   14340:	0001421d 	.word	0x0001421d
   14344:	00003681 	.word	0x00003681
   14348:	000142a9 	.word	0x000142a9
   1434c:	0001416d 	.word	0x0001416d

00014350 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   14350:	b590      	push	{r4, r7, lr}
   14352:	b083      	sub	sp, #12
   14354:	af00      	add	r7, sp, #0
   14356:	6078      	str	r0, [r7, #4]
   14358:	4c05      	ldr	r4, [pc, #20]	; (14370 <__tcf_0+0x20>)
   1435a:	4b06      	ldr	r3, [pc, #24]	; (14374 <__tcf_0+0x24>)
   1435c:	429c      	cmp	r4, r3
   1435e:	d004      	beq.n	1436a <__tcf_0+0x1a>
   14360:	3c1c      	subs	r4, #28
   14362:	4620      	mov	r0, r4
   14364:	4b04      	ldr	r3, [pc, #16]	; (14378 <__tcf_0+0x28>)
   14366:	4798      	blx	r3
   14368:	e7f7      	b.n	1435a <__tcf_0+0xa>
   1436a:	370c      	adds	r7, #12
   1436c:	46bd      	mov	sp, r7
   1436e:	bd90      	pop	{r4, r7, pc}
   14370:	200059c0 	.word	0x200059c0
   14374:	20005988 	.word	0x20005988
   14378:	0000fe3d 	.word	0x0000fe3d

0001437c <_Z41__static_initialization_and_destruction_0ii>:

   1437c:	b5b0      	push	{r4, r5, r7, lr}
   1437e:	b082      	sub	sp, #8
   14380:	af00      	add	r7, sp, #0
   14382:	6078      	str	r0, [r7, #4]
   14384:	6039      	str	r1, [r7, #0]
   14386:	687b      	ldr	r3, [r7, #4]
   14388:	2b01      	cmp	r3, #1
   1438a:	d125      	bne.n	143d8 <_Z41__static_initialization_and_destruction_0ii+0x5c>
   1438c:	683b      	ldr	r3, [r7, #0]
   1438e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14392:	4293      	cmp	r3, r2
   14394:	d120      	bne.n	143d8 <_Z41__static_initialization_and_destruction_0ii+0x5c>
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   14396:	4912      	ldr	r1, [pc, #72]	; (143e0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   14398:	4812      	ldr	r0, [pc, #72]	; (143e4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   1439a:	4b13      	ldr	r3, [pc, #76]	; (143e8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   1439c:	4798      	blx	r3
   1439e:	4a13      	ldr	r2, [pc, #76]	; (143ec <_Z41__static_initialization_and_destruction_0ii+0x70>)
   143a0:	4913      	ldr	r1, [pc, #76]	; (143f0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   143a2:	4810      	ldr	r0, [pc, #64]	; (143e4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   143a4:	4b13      	ldr	r3, [pc, #76]	; (143f4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   143a6:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   143a8:	4b13      	ldr	r3, [pc, #76]	; (143f8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   143aa:	2401      	movs	r4, #1
   143ac:	461d      	mov	r5, r3
   143ae:	2c00      	cmp	r4, #0
   143b0:	db05      	blt.n	143be <_Z41__static_initialization_and_destruction_0ii+0x42>
   143b2:	4628      	mov	r0, r5
   143b4:	4b11      	ldr	r3, [pc, #68]	; (143fc <_Z41__static_initialization_and_destruction_0ii+0x80>)
   143b6:	4798      	blx	r3
   143b8:	351c      	adds	r5, #28
   143ba:	3c01      	subs	r4, #1
   143bc:	e7f7      	b.n	143ae <_Z41__static_initialization_and_destruction_0ii+0x32>
   143be:	4a0b      	ldr	r2, [pc, #44]	; (143ec <_Z41__static_initialization_and_destruction_0ii+0x70>)
   143c0:	490f      	ldr	r1, [pc, #60]	; (14400 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   143c2:	2000      	movs	r0, #0
   143c4:	4b0b      	ldr	r3, [pc, #44]	; (143f4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   143c6:	4798      	blx	r3
   143c8:	480e      	ldr	r0, [pc, #56]	; (14404 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   143ca:	4b0f      	ldr	r3, [pc, #60]	; (14408 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   143cc:	4798      	blx	r3
   143ce:	4a07      	ldr	r2, [pc, #28]	; (143ec <_Z41__static_initialization_and_destruction_0ii+0x70>)
   143d0:	490e      	ldr	r1, [pc, #56]	; (1440c <_Z41__static_initialization_and_destruction_0ii+0x90>)
   143d2:	480c      	ldr	r0, [pc, #48]	; (14404 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   143d4:	4b07      	ldr	r3, [pc, #28]	; (143f4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   143d6:	4798      	blx	r3
   143d8:	bf00      	nop
   143da:	3708      	adds	r7, #8
   143dc:	46bd      	mov	sp, r7
   143de:	bdb0      	pop	{r4, r5, r7, pc}
   143e0:	2000e058 	.word	0x2000e058
   143e4:	2000596c 	.word	0x2000596c
   143e8:	0000fc6d 	.word	0x0000fc6d
   143ec:	20000000 	.word	0x20000000
   143f0:	0000fc89 	.word	0x0000fc89
   143f4:	0001a611 	.word	0x0001a611
   143f8:	20005988 	.word	0x20005988
   143fc:	0000fe29 	.word	0x0000fe29
   14400:	00014351 	.word	0x00014351
   14404:	200059c0 	.word	0x200059c0
   14408:	00013ff9 	.word	0x00013ff9
   1440c:	00014029 	.word	0x00014029

00014410 <_GLOBAL__sub_I_ptrSingleHeaterClass>:
   14410:	b580      	push	{r7, lr}
   14412:	af00      	add	r7, sp, #0
   14414:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14418:	2001      	movs	r0, #1
   1441a:	4b01      	ldr	r3, [pc, #4]	; (14420 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
   1441c:	4798      	blx	r3
   1441e:	bd80      	pop	{r7, pc}
   14420:	0001437d 	.word	0x0001437d

00014424 <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
   14424:	4770      	bx	lr

00014426 <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
   14426:	4770      	bx	lr

00014428 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
	uint32_t	r=ReadParameters(up,add);
	return	r;
}
uint32_t	FlashHandler_Class::ReadEventLogSector(uint32_t add, uint8_t *buffer){
   14428:	b570      	push	{r4, r5, r6, lr}
   1442a:	4604      	mov	r4, r0
	if (add>(uint32_t)&flashMap->EventsLogStateSector)
   1442c:	4b0d      	ldr	r3, [pc, #52]	; (14464 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x3c>)
   1442e:	681b      	ldr	r3, [r3, #0]
   14430:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   14434:	428b      	cmp	r3, r1
   14436:	d305      	bcc.n	14444 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x1c>
		qspiFlash.WaitOnBusy();
		
	} 
	else
	{
		read_result=1;
   14438:	2301      	movs	r3, #1
   1443a:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	}

	return	read_result;
}
   1443e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   14442:	bd70      	pop	{r4, r5, r6, pc}
   14444:	4610      	mov	r0, r2
		read_result=qspiFlash.ReadAddress(buffer,add,QSPI_ERBLK);
   14446:	4d08      	ldr	r5, [pc, #32]	; (14468 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x40>)
   14448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1444c:	460a      	mov	r2, r1
   1444e:	4601      	mov	r1, r0
   14450:	4628      	mov	r0, r5
   14452:	4e06      	ldr	r6, [pc, #24]	; (1446c <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x44>)
   14454:	47b0      	blx	r6
   14456:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		qspiFlash.WaitOnBusy();
   1445a:	4628      	mov	r0, r5
   1445c:	4b04      	ldr	r3, [pc, #16]	; (14470 <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x48>)
   1445e:	4798      	blx	r3
   14460:	e7ed      	b.n	1443e <_ZN18FlashHandler_Class18ReadEventLogSectorEmPh+0x16>
   14462:	bf00      	nop
   14464:	200059e4 	.word	0x200059e4
   14468:	2000dc40 	.word	0x2000dc40
   1446c:	00019b59 	.word	0x00019b59
   14470:	00019c09 	.word	0x00019c09

00014474 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm>:
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	r;
}

uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){
   14474:	b510      	push	{r4, lr}

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
   14476:	2302      	movs	r3, #2
   14478:	4801      	ldr	r0, [pc, #4]	; (14480 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0xc>)
   1447a:	4c02      	ldr	r4, [pc, #8]	; (14484 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0x10>)
   1447c:	47a0      	blx	r4
	return	r;
}
   1447e:	bd10      	pop	{r4, pc}
   14480:	2000dc40 	.word	0x2000dc40
   14484:	00019b59 	.word	0x00019b59

00014488 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
   14488:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
   1448a:	4b03      	ldr	r3, [pc, #12]	; (14498 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x10>)
   1448c:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadParameters(up,add);
   1448e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   14492:	4b02      	ldr	r3, [pc, #8]	; (1449c <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x14>)
   14494:	4798      	blx	r3
}
   14496:	bd08      	pop	{r3, pc}
   14498:	200059e4 	.word	0x200059e4
   1449c:	00014475 	.word	0x00014475

000144a0 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
   144a0:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
   144a2:	2302      	movs	r3, #2
   144a4:	4801      	ldr	r0, [pc, #4]	; (144ac <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
   144a6:	4c02      	ldr	r4, [pc, #8]	; (144b0 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
   144a8:	47a0      	blx	r4
	return	w;
}
   144aa:	bd10      	pop	{r4, pc}
   144ac:	2000dc40 	.word	0x2000dc40
   144b0:	00019b25 	.word	0x00019b25

000144b4 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
   144b4:	b500      	push	{lr}
   144b6:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
   144b8:	4b07      	ldr	r3, [pc, #28]	; (144d8 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
   144ba:	881b      	ldrh	r3, [r3, #0]
   144bc:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
   144c0:	4b06      	ldr	r3, [pc, #24]	; (144dc <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
   144c2:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
   144c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   144c8:	3202      	adds	r2, #2
   144ca:	a901      	add	r1, sp, #4
   144cc:	4b04      	ldr	r3, [pc, #16]	; (144e0 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
   144ce:	4798      	blx	r3
	return	w;
}
   144d0:	b003      	add	sp, #12
   144d2:	f85d fb04 	ldr.w	pc, [sp], #4
   144d6:	bf00      	nop
   144d8:	0001c1f4 	.word	0x0001c1f4
   144dc:	200059e4 	.word	0x200059e4
   144e0:	000144a1 	.word	0x000144a1

000144e4 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
   144e4:	b510      	push	{r4, lr}
   144e6:	4604      	mov	r4, r0
   144e8:	30c0      	adds	r0, #192	; 0xc0
   144ea:	4b03      	ldr	r3, [pc, #12]	; (144f8 <_ZN17MemoryFlash_ClassD1Ev+0x14>)
   144ec:	4798      	blx	r3
   144ee:	4620      	mov	r0, r4
   144f0:	4b02      	ldr	r3, [pc, #8]	; (144fc <_ZN17MemoryFlash_ClassD1Ev+0x18>)
   144f2:	4798      	blx	r3
{
} //~MemoryManagment_Class
   144f4:	4620      	mov	r0, r4
   144f6:	bd10      	pop	{r4, pc}
   144f8:	00014783 	.word	0x00014783
   144fc:	00014427 	.word	0x00014427

00014500 <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
   14500:	b538      	push	{r3, r4, r5, lr}
   14502:	4604      	mov	r4, r0
   14504:	4b14      	ldr	r3, [pc, #80]	; (14558 <_ZN17MemoryFlash_ClassC1Ev+0x58>)
   14506:	4798      	blx	r3
   14508:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1450c:	4b13      	ldr	r3, [pc, #76]	; (1455c <_ZN17MemoryFlash_ClassC1Ev+0x5c>)
   1450e:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   14510:	f44f 7500 	mov.w	r5, #512	; 0x200
   14514:	462a      	mov	r2, r5
   14516:	2100      	movs	r1, #0
   14518:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   1451c:	4b10      	ldr	r3, [pc, #64]	; (14560 <_ZN17MemoryFlash_ClassC1Ev+0x60>)
   1451e:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   14520:	2300      	movs	r3, #0
   14522:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
  _iTail = 0;
   14526:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
   1452a:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
	_currentAddress=0;
   1452e:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
	head=512;
   14532:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
	tail=0;
   14536:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
	flashBuffer=&flashBufferStatic[0];
   1453a:	490a      	ldr	r1, [pc, #40]	; (14564 <_ZN17MemoryFlash_ClassC1Ev+0x64>)
   1453c:	f246 3214 	movw	r2, #25364	; 0x6314
   14540:	50a1      	str	r1, [r4, r2]
	stackpointerEventloger=(uint32_t)&flashMap->EventsLogStateSector;
   14542:	4a09      	ldr	r2, [pc, #36]	; (14568 <_ZN17MemoryFlash_ClassC1Ev+0x68>)
   14544:	6812      	ldr	r2, [r2, #0]
   14546:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
   1454a:	f246 3118 	movw	r1, #25368	; 0x6318
   1454e:	5062      	str	r2, [r4, r1]
	initiated=false;
   14550:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
} //MemoryManagment_Class
   14554:	4620      	mov	r0, r4
   14556:	bd38      	pop	{r3, r4, r5, pc}
   14558:	00014425 	.word	0x00014425
   1455c:	00014781 	.word	0x00014781
   14560:	0001acc5 	.word	0x0001acc5
   14564:	200059e8 	.word	0x200059e8
   14568:	200059e4 	.word	0x200059e4

0001456c <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
   1456c:	b510      	push	{r4, lr}
   1456e:	4604      	mov	r4, r0
		if (qspiFlash.Init())
   14570:	480a      	ldr	r0, [pc, #40]	; (1459c <_ZN17MemoryFlash_Class4InitEm+0x30>)
   14572:	4b0b      	ldr	r3, [pc, #44]	; (145a0 <_ZN17MemoryFlash_Class4InitEm+0x34>)
   14574:	4798      	blx	r3
   14576:	b948      	cbnz	r0, 1458c <_ZN17MemoryFlash_Class4InitEm+0x20>
			initiated=true;
			//usb<<"Flash Memory SelfTest PASSED"<<NEWLINE;
		} 
		else
		{
			logger.SaveEvent("Flash Memory SelfTest FAILED");
   14578:	490a      	ldr	r1, [pc, #40]	; (145a4 <_ZN17MemoryFlash_Class4InitEm+0x38>)
   1457a:	480b      	ldr	r0, [pc, #44]	; (145a8 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
   1457c:	4b0b      	ldr	r3, [pc, #44]	; (145ac <_ZN17MemoryFlash_Class4InitEm+0x40>)
   1457e:	4798      	blx	r3
			initiated=false;
   14580:	2300      	movs	r3, #0
   14582:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
			//usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return initiated;
}
   14586:	f894 02e0 	ldrb.w	r0, [r4, #736]	; 0x2e0
   1458a:	bd10      	pop	{r4, pc}
			logger.SaveEvent("Flash Memory SelfTest PASSED");
   1458c:	4908      	ldr	r1, [pc, #32]	; (145b0 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   1458e:	4806      	ldr	r0, [pc, #24]	; (145a8 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
   14590:	4b06      	ldr	r3, [pc, #24]	; (145ac <_ZN17MemoryFlash_Class4InitEm+0x40>)
   14592:	4798      	blx	r3
			initiated=true;
   14594:	2301      	movs	r3, #1
   14596:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
   1459a:	e7f4      	b.n	14586 <_ZN17MemoryFlash_Class4InitEm+0x1a>
   1459c:	2000dc40 	.word	0x2000dc40
   145a0:	00019a89 	.word	0x00019a89
   145a4:	0001b6c4 	.word	0x0001b6c4
   145a8:	20003a68 	.word	0x20003a68
   145ac:	00011de9 	.word	0x00011de9
   145b0:	0001b6a4 	.word	0x0001b6a4

000145b4 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters>:
		  return	w;
	 }

	 return	r;
 }
 uint32_t	MemoryFlash_Class::SaveParameters(UserParameters& up){
   145b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   145b6:	460f      	mov	r7, r1
	  uint32_t	add=(uint32_t)&flashMap->parametersSector;
   145b8:	4b10      	ldr	r3, [pc, #64]	; (145fc <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x48>)
   145ba:	681c      	ldr	r4, [r3, #0]
   145bc:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	  ParametersSector	*pss=(ParametersSector*)&flashBuffer[0];
   145c0:	f246 3314 	movw	r3, #25364	; 0x6314
   145c4:	58c5      	ldr	r5, [r0, r3]
	  uint32_t r=qspiFlash.ReadAddress((uint8_t*)pss,add,QSPI_ERBLK);
   145c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   145ca:	4622      	mov	r2, r4
   145cc:	4629      	mov	r1, r5
   145ce:	480c      	ldr	r0, [pc, #48]	; (14600 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   145d0:	4e0c      	ldr	r6, [pc, #48]	; (14604 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x50>)
   145d2:	47b0      	blx	r6
	  if (r==0)
   145d4:	4603      	mov	r3, r0
   145d6:	b108      	cbz	r0, 145dc <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x28>
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
		  return	w;
	  }

	  return	r;
  }
   145d8:	4618      	mov	r0, r3
   145da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  memcpy((void*)&(pss->parameters),(void*)&up,sizeof(UserParameters));
   145dc:	883b      	ldrh	r3, [r7, #0]
   145de:	802b      	strh	r3, [r5, #0]
		  qspiFlash.Erase(add);
   145e0:	4e07      	ldr	r6, [pc, #28]	; (14600 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   145e2:	4621      	mov	r1, r4
   145e4:	4630      	mov	r0, r6
   145e6:	4b08      	ldr	r3, [pc, #32]	; (14608 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x54>)
   145e8:	4798      	blx	r3
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
   145ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   145ee:	4622      	mov	r2, r4
   145f0:	4629      	mov	r1, r5
   145f2:	4630      	mov	r0, r6
   145f4:	4c05      	ldr	r4, [pc, #20]	; (1460c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x58>)
   145f6:	47a0      	blx	r4
   145f8:	4603      	mov	r3, r0
		  return	w;
   145fa:	e7ed      	b.n	145d8 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x24>
   145fc:	200059e4 	.word	0x200059e4
   14600:	2000dc40 	.word	0x2000dc40
   14604:	00019b59 	.word	0x00019b59
   14608:	00019af5 	.word	0x00019af5
   1460c:	00019b25 	.word	0x00019b25

00014610 <_ZN17MemoryFlash_Class12SaveEventLogEPh>:
 uint32_t	MemoryFlash_Class::SaveEventLog(uint8_t *evl){
   14610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14614:	4604      	mov	r4, r0
   14616:	4688      	mov	r8, r1
	  
	
		   if ((stackpointerEventloger+QSPI_ERBLK)>N25Q_FLASH_SIZE)
   14618:	f246 3318 	movw	r3, #25368	; 0x6318
   1461c:	58c3      	ldr	r3, [r0, r3]
   1461e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   14622:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
   14626:	d906      	bls.n	14636 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x26>
		   {
			   uint32_t	addRef=(uint32_t)&flashMap->EventsLogStateSector;
   14628:	4b14      	ldr	r3, [pc, #80]	; (1467c <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
   1462a:	681b      	ldr	r3, [r3, #0]
   1462c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
			   stackpointerEventloger=addRef;
   14630:	f246 3218 	movw	r2, #25368	; 0x6318
   14634:	5083      	str	r3, [r0, r2]
		   else
		   {
			   
		   }
	
		  stackpointerEventloger+=QSPI_ERBLK;
   14636:	f246 3618 	movw	r6, #25368	; 0x6318
   1463a:	59a1      	ldr	r1, [r4, r6]
   1463c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
   14640:	51a1      	str	r1, [r4, r6]
		  qspiFlash.Erase(stackpointerEventloger);
   14642:	4d0f      	ldr	r5, [pc, #60]	; (14680 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x70>)
   14644:	4628      	mov	r0, r5
   14646:	4b0f      	ldr	r3, [pc, #60]	; (14684 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x74>)
   14648:	4798      	blx	r3
		  qspiFlash.WaitOnBusy();
   1464a:	4628      	mov	r0, r5
   1464c:	4f0e      	ldr	r7, [pc, #56]	; (14688 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x78>)
   1464e:	47b8      	blx	r7
		   uint32_t w=qspiFlash.WriteAddress(evl, stackpointerEventloger,QSPI_ERBLK);
   14650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   14654:	59a2      	ldr	r2, [r4, r6]
   14656:	4641      	mov	r1, r8
   14658:	4628      	mov	r0, r5
   1465a:	4e0c      	ldr	r6, [pc, #48]	; (1468c <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x7c>)
   1465c:	47b0      	blx	r6
   1465e:	4606      	mov	r6, r0
		    qspiFlash.WaitOnBusy();
   14660:	4628      	mov	r0, r5
   14662:	47b8      	blx	r7
		   if (w==0)
   14664:	b12e      	cbz	r6, 14672 <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x62>
		   {
			   return stackpointerEventloger;
		   } 
		   else
		   {
			   return (uint32_t)&flashMap->EventsLogStateSector+QSPI_ERBLK;
   14666:	4b05      	ldr	r3, [pc, #20]	; (1467c <_ZN17MemoryFlash_Class12SaveEventLogEPh+0x6c>)
   14668:	6818      	ldr	r0, [r3, #0]
   1466a:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
		   }
		   return	w;

	 
   }
   1466e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			   return stackpointerEventloger;
   14672:	f246 3318 	movw	r3, #25368	; 0x6318
   14676:	58e0      	ldr	r0, [r4, r3]
   14678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1467c:	200059e4 	.word	0x200059e4
   14680:	2000dc40 	.word	0x2000dc40
   14684:	00019af5 	.word	0x00019af5
   14688:	00019c09 	.word	0x00019c09
   1468c:	00019b25 	.word	0x00019b25

00014690 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
   14690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   14694:	4c2b      	ldr	r4, [pc, #172]	; (14744 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb4>)
   14696:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
   1469a:	492b      	ldr	r1, [pc, #172]	; (14748 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb8>)
   1469c:	4628      	mov	r0, r5
   1469e:	4f2b      	ldr	r7, [pc, #172]	; (1474c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xbc>)
   146a0:	47b8      	blx	r7
   146a2:	4e2b      	ldr	r6, [pc, #172]	; (14750 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc0>)
   146a4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 1477c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xec>
   146a8:	4632      	mov	r2, r6
   146aa:	4641      	mov	r1, r8
   146ac:	4628      	mov	r0, r5
   146ae:	4d29      	ldr	r5, [pc, #164]	; (14754 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc4>)
   146b0:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   146b2:	f1a4 09d8 	sub.w	r9, r4, #216	; 0xd8
   146b6:	4928      	ldr	r1, [pc, #160]	; (14758 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc8>)
   146b8:	4648      	mov	r0, r9
   146ba:	47b8      	blx	r7
   146bc:	4632      	mov	r2, r6
   146be:	4641      	mov	r1, r8
   146c0:	4648      	mov	r0, r9
   146c2:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   146c4:	f1a4 09b8 	sub.w	r9, r4, #184	; 0xb8
   146c8:	4924      	ldr	r1, [pc, #144]	; (1475c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xcc>)
   146ca:	4648      	mov	r0, r9
   146cc:	47b8      	blx	r7
   146ce:	4632      	mov	r2, r6
   146d0:	4641      	mov	r1, r8
   146d2:	4648      	mov	r0, r9
   146d4:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   146d6:	f1a4 0998 	sub.w	r9, r4, #152	; 0x98
   146da:	4921      	ldr	r1, [pc, #132]	; (14760 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd0>)
   146dc:	4648      	mov	r0, r9
   146de:	47b8      	blx	r7
   146e0:	4632      	mov	r2, r6
   146e2:	4641      	mov	r1, r8
   146e4:	4648      	mov	r0, r9
   146e6:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   146e8:	f1a4 0978 	sub.w	r9, r4, #120	; 0x78
   146ec:	491d      	ldr	r1, [pc, #116]	; (14764 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd4>)
   146ee:	4648      	mov	r0, r9
   146f0:	47b8      	blx	r7
   146f2:	4632      	mov	r2, r6
   146f4:	4641      	mov	r1, r8
   146f6:	4648      	mov	r0, r9
   146f8:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   146fa:	f1a4 0958 	sub.w	r9, r4, #88	; 0x58
   146fe:	491a      	ldr	r1, [pc, #104]	; (14768 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd8>)
   14700:	4648      	mov	r0, r9
   14702:	47b8      	blx	r7
   14704:	4632      	mov	r2, r6
   14706:	4641      	mov	r1, r8
   14708:	4648      	mov	r0, r9
   1470a:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   1470c:	f1a4 0938 	sub.w	r9, r4, #56	; 0x38
   14710:	4916      	ldr	r1, [pc, #88]	; (1476c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xdc>)
   14712:	4648      	mov	r0, r9
   14714:	47b8      	blx	r7
   14716:	4632      	mov	r2, r6
   14718:	4641      	mov	r1, r8
   1471a:	4648      	mov	r0, r9
   1471c:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   1471e:	f1a4 0918 	sub.w	r9, r4, #24
   14722:	4913      	ldr	r1, [pc, #76]	; (14770 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe0>)
   14724:	4648      	mov	r0, r9
   14726:	47b8      	blx	r7
   14728:	4632      	mov	r2, r6
   1472a:	4641      	mov	r1, r8
   1472c:	4648      	mov	r0, r9
   1472e:	47a8      	blx	r5
   14730:	3408      	adds	r4, #8
   14732:	4620      	mov	r0, r4
   14734:	4b0f      	ldr	r3, [pc, #60]	; (14774 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe4>)
   14736:	4798      	blx	r3
   14738:	4632      	mov	r2, r6
   1473a:	490f      	ldr	r1, [pc, #60]	; (14778 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe8>)
   1473c:	4620      	mov	r0, r4
   1473e:	47a8      	blx	r5
   14740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14744:	20006ae0 	.word	0x20006ae0
   14748:	2000df28 	.word	0x2000df28
   1474c:	00010441 	.word	0x00010441
   14750:	20000000 	.word	0x20000000
   14754:	0001a611 	.word	0x0001a611
   14758:	2000dfbc 	.word	0x2000dfbc
   1475c:	2000e0e0 	.word	0x2000e0e0
   14760:	2000dfdc 	.word	0x2000dfdc
   14764:	2000e0a0 	.word	0x2000e0a0
   14768:	2000e0c0 	.word	0x2000e0c0
   1476c:	2000df98 	.word	0x2000df98
   14770:	2000e038 	.word	0x2000e038
   14774:	00014501 	.word	0x00014501
   14778:	000144e5 	.word	0x000144e5
   1477c:	00010479 	.word	0x00010479

00014780 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
   14780:	4770      	bx	lr

00014782 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
   14782:	4770      	bx	lr

00014784 <_ZN12Scavenge_FanD1Ev>:
} //Scavenge_Fan

// default destructor
Scavenge_Fan::~Scavenge_Fan()
{
} //~Scavenge_Fan
   14784:	4770      	bx	lr
	...

00014788 <_ZN12Scavenge_Fan10ReadStatusEv>:
	{
	}
	return isOK;
}

uint8_t	Scavenge_Fan::ReadStatus(void){
   14788:	b510      	push	{r4, lr}
   1478a:	4604      	mov	r4, r0
	uint8_t r=expander->ReadGPIORegister();
   1478c:	6880      	ldr	r0, [r0, #8]
   1478e:	4b06      	ldr	r3, [pc, #24]	; (147a8 <_ZN12Scavenge_Fan10ReadStatusEv+0x20>)
   14790:	4798      	blx	r3
	
	
	scavengeData.tempFault=r&(0x01<<(7));
   14792:	f3c0 12c0 	ubfx	r2, r0, #7, #1
   14796:	70e2      	strb	r2, [r4, #3]
	scavengeData.SPDFault=r&(0x01<<(6));
   14798:	f3c0 1280 	ubfx	r2, r0, #6, #1
   1479c:	7122      	strb	r2, [r4, #4]
	scavengeData.relayFault=r&(0x01<<(4));
   1479e:	f3c0 1300 	ubfx	r3, r0, #4, #1
   147a2:	7163      	strb	r3, [r4, #5]
	return r;
	
}
   147a4:	bd10      	pop	{r4, pc}
   147a6:	bf00      	nop
   147a8:	0000ff35 	.word	0x0000ff35

000147ac <_ZN12Scavenge_Fan9SetEnableEb>:
uint8_t	Scavenge_Fan::SetEnable(bool state){
   147ac:	b510      	push	{r4, lr}
   147ae:	4604      	mov	r4, r0

	enabled=expander->WriteDigit(1,!state);
   147b0:	f081 0201 	eor.w	r2, r1, #1
   147b4:	2101      	movs	r1, #1
   147b6:	6880      	ldr	r0, [r0, #8]
   147b8:	4b01      	ldr	r3, [pc, #4]	; (147c0 <_ZN12Scavenge_Fan9SetEnableEb+0x14>)
   147ba:	4798      	blx	r3
   147bc:	7060      	strb	r0, [r4, #1]
	return uint8_t(enabled);
}
   147be:	bd10      	pop	{r4, pc}
   147c0:	000101ed 	.word	0x000101ed

000147c4 <_ZN12Scavenge_Fan8SelfTestEv>:

	uint8_t value=expander->ReadGPIORegister();
	enabled=!(value&0x02);
	return enabled;
}
bool Scavenge_Fan::SelfTest(){
   147c4:	b510      	push	{r4, lr}
   147c6:	4604      	mov	r4, r0
	if ((ReadStatus()&0xd0)<0xd)
   147c8:	4b05      	ldr	r3, [pc, #20]	; (147e0 <_ZN12Scavenge_Fan8SelfTestEv+0x1c>)
   147ca:	4798      	blx	r3
   147cc:	f000 00d0 	and.w	r0, r0, #208	; 0xd0
   147d0:	280c      	cmp	r0, #12
	{
		bool_result=false;
   147d2:	bfd4      	ite	le
   147d4:	2300      	movle	r3, #0
	} 
	else
	{
		bool_result=true;
   147d6:	2301      	movgt	r3, #1
   147d8:	7423      	strb	r3, [r4, #16]
	}
	return bool_result;
}
   147da:	7c20      	ldrb	r0, [r4, #16]
   147dc:	bd10      	pop	{r4, pc}
   147de:	bf00      	nop
   147e0:	00014789 	.word	0x00014789

000147e4 <_ZN12Scavenge_Fan4InitEv>:
bool Scavenge_Fan::Init(void){
   147e4:	b510      	push	{r4, lr}
   147e6:	4604      	mov	r4, r0
	i2c=&i2cSharedStatic;
   147e8:	4a0d      	ldr	r2, [pc, #52]	; (14820 <_ZN12Scavenge_Fan4InitEv+0x3c>)
   147ea:	60c2      	str	r2, [r0, #12]
	expander=&local_expander;
   147ec:	f102 0018 	add.w	r0, r2, #24
   147f0:	60a0      	str	r0, [r4, #8]
	expander->Init(MCP23008_SCAVENGE_ADDRESS,i2c);
   147f2:	2124      	movs	r1, #36	; 0x24
   147f4:	4b0b      	ldr	r3, [pc, #44]	; (14824 <_ZN12Scavenge_Fan4InitEv+0x40>)
   147f6:	4798      	blx	r3
	if (i2c->initiated)
   147f8:	68e0      	ldr	r0, [r4, #12]
   147fa:	7a03      	ldrb	r3, [r0, #8]
   147fc:	b123      	cbz	r3, 14808 <_ZN12Scavenge_Fan4InitEv+0x24>
	if (i2c->isOK)
   147fe:	68e3      	ldr	r3, [r4, #12]
   14800:	7a5b      	ldrb	r3, [r3, #9]
   14802:	b923      	cbnz	r3, 1480e <_ZN12Scavenge_Fan4InitEv+0x2a>
}
   14804:	78a0      	ldrb	r0, [r4, #2]
   14806:	bd10      	pop	{r4, pc}
		i2c->Init();
   14808:	4b07      	ldr	r3, [pc, #28]	; (14828 <_ZN12Scavenge_Fan4InitEv+0x44>)
   1480a:	4798      	blx	r3
   1480c:	e7f7      	b.n	147fe <_ZN12Scavenge_Fan4InitEv+0x1a>
		expander->SetPortInput(0xf0);
   1480e:	21f0      	movs	r1, #240	; 0xf0
   14810:	68a0      	ldr	r0, [r4, #8]
   14812:	4b06      	ldr	r3, [pc, #24]	; (1482c <_ZN12Scavenge_Fan4InitEv+0x48>)
   14814:	4798      	blx	r3
		isOK=SelfTest();
   14816:	4620      	mov	r0, r4
   14818:	4b05      	ldr	r3, [pc, #20]	; (14830 <_ZN12Scavenge_Fan4InitEv+0x4c>)
   1481a:	4798      	blx	r3
   1481c:	70a0      	strb	r0, [r4, #2]
   1481e:	e7f1      	b.n	14804 <_ZN12Scavenge_Fan4InitEv+0x20>
   14820:	2000ce04 	.word	0x2000ce04
   14824:	0000fe51 	.word	0x0000fe51
   14828:	0000fc9d 	.word	0x0000fc9d
   1482c:	00010039 	.word	0x00010039
   14830:	000147c5 	.word	0x000147c5

00014834 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev>:
   14834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	I2C_Sync_Class& operator=( const I2C_Sync_Class &c );
	void	Irq_Disable(void);
	void	Irq_Enable(void);

}; //I2C_Sync_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   14836:	4c0e      	ldr	r4, [pc, #56]	; (14870 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x3c>)
   14838:	490e      	ldr	r1, [pc, #56]	; (14874 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x40>)
   1483a:	4620      	mov	r0, r4
   1483c:	4b0e      	ldr	r3, [pc, #56]	; (14878 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x44>)
   1483e:	4798      	blx	r3
   14840:	4e0e      	ldr	r6, [pc, #56]	; (1487c <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x48>)
   14842:	4632      	mov	r2, r6
   14844:	490e      	ldr	r1, [pc, #56]	; (14880 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x4c>)
   14846:	4620      	mov	r0, r4
   14848:	4d0e      	ldr	r5, [pc, #56]	; (14884 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x50>)
   1484a:	47a8      	blx	r5
static MCP23008_Class local_expander;
   1484c:	f104 0718 	add.w	r7, r4, #24
   14850:	4638      	mov	r0, r7
   14852:	4b0d      	ldr	r3, [pc, #52]	; (14888 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x54>)
   14854:	4798      	blx	r3
   14856:	4632      	mov	r2, r6
   14858:	490c      	ldr	r1, [pc, #48]	; (1488c <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x58>)
   1485a:	4638      	mov	r0, r7
   1485c:	47a8      	blx	r5
	isOK=false;
   1485e:	2300      	movs	r3, #0
   14860:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   14864:	4632      	mov	r2, r6
   14866:	490a      	ldr	r1, [pc, #40]	; (14890 <_GLOBAL__sub_I__ZN12Scavenge_FanC2Ev+0x5c>)
   14868:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1486c:	47a8      	blx	r5
   1486e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14870:	2000ce04 	.word	0x2000ce04
   14874:	2000e058 	.word	0x2000e058
   14878:	0000fc6d 	.word	0x0000fc6d
   1487c:	20000000 	.word	0x20000000
   14880:	0000fc89 	.word	0x0000fc89
   14884:	0001a611 	.word	0x0001a611
   14888:	0000fe29 	.word	0x0000fe29
   1488c:	0000fe3d 	.word	0x0000fe3d
   14890:	00014785 	.word	0x00014785

00014894 <_ZL17ConversionTimeoutPK10timer_task>:
	temperatures.converterReady[2]=true;
	temperatures.SetModuleReady(2);
	temperatures.converterTimeout=false;
}
static void	ConversionTimeout(const struct timer_task *const timer_task){
	temperatures.converterTimeout=true;
   14894:	2201      	movs	r2, #1
   14896:	4b02      	ldr	r3, [pc, #8]	; (148a0 <_ZL17ConversionTimeoutPK10timer_task+0xc>)
   14898:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	asm("nop");
   1489c:	bf00      	nop
   1489e:	4770      	bx	lr
   148a0:	2000ce4c 	.word	0x2000ce4c

000148a4 <_ZN24TemperatureSensors_ClassD1Ev>:
		SPIA=SPI_LTC;
		
} //TemperatureSensors_Class

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   148a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   148a6:	4607      	mov	r7, r0
   148a8:	f110 05a8 	adds.w	r5, r0, #168	; 0xa8
   148ac:	d007      	beq.n	148be <_ZN24TemperatureSensors_ClassD1Ev+0x1a>
   148ae:	f500 74f0 	add.w	r4, r0, #480	; 0x1e0
   148b2:	4e05      	ldr	r6, [pc, #20]	; (148c8 <_ZN24TemperatureSensors_ClassD1Ev+0x24>)
   148b4:	3c68      	subs	r4, #104	; 0x68
   148b6:	4620      	mov	r0, r4
   148b8:	47b0      	blx	r6
   148ba:	42a5      	cmp	r5, r4
   148bc:	d1fa      	bne.n	148b4 <_ZN24TemperatureSensors_ClassD1Ev+0x10>
   148be:	4638      	mov	r0, r7
   148c0:	4b02      	ldr	r3, [pc, #8]	; (148cc <_ZN24TemperatureSensors_ClassD1Ev+0x28>)
   148c2:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   148c4:	4638      	mov	r0, r7
   148c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   148c8:	00018905 	.word	0x00018905
   148cc:	00018905 	.word	0x00018905

000148d0 <_ZL15Converter1Readyv>:
	temperatures.converterReady[0]=true;
   148d0:	4b05      	ldr	r3, [pc, #20]	; (148e8 <_ZL15Converter1Readyv+0x18>)
   148d2:	2201      	movs	r2, #1
   148d4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
bool	TemperatureSensors_Class::IsOneConversionFinished(){
	return converterReady[0]|converterReady[1]|converterReady[2];
}
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
	module[m].ready=true;
   148d8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return module[m].ready;
   148dc:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	temperatures.converterTimeout=false;
   148e0:	2200      	movs	r2, #0
   148e2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   148e6:	4770      	bx	lr
   148e8:	2000ce4c 	.word	0x2000ce4c

000148ec <_ZL15Converter2Readyv>:
	temperatures.converterReady[1]=true;
   148ec:	4b05      	ldr	r3, [pc, #20]	; (14904 <_ZL15Converter2Readyv+0x18>)
   148ee:	2201      	movs	r2, #1
   148f0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	module[m].ready=true;
   148f4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	return module[m].ready;
   148f8:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
	temperatures.converterTimeout=false;
   148fc:	2200      	movs	r2, #0
   148fe:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   14902:	4770      	bx	lr
   14904:	2000ce4c 	.word	0x2000ce4c

00014908 <_ZL15Converter3Readyv>:
	temperatures.converterReady[2]=true;
   14908:	4b05      	ldr	r3, [pc, #20]	; (14920 <_ZL15Converter3Readyv+0x18>)
   1490a:	2201      	movs	r2, #1
   1490c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	module[m].ready=true;
   14910:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	return module[m].ready;
   14914:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
	temperatures.converterTimeout=false;
   14918:	2200      	movs	r2, #0
   1491a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   1491e:	4770      	bx	lr
   14920:	2000ce4c 	.word	0x2000ce4c

00014924 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
   14924:	b570      	push	{r4, r5, r6, lr}
   14926:	4604      	mov	r4, r0
   14928:	460e      	mov	r6, r1
   1492a:	4b0b      	ldr	r3, [pc, #44]	; (14958 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x34>)
   1492c:	4798      	blx	r3
   1492e:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   14932:	4d0a      	ldr	r5, [pc, #40]	; (1495c <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x38>)
   14934:	47a8      	blx	r5
   14936:	f504 7088 	add.w	r0, r4, #272	; 0x110
   1493a:	47a8      	blx	r5
   1493c:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   14940:	47a8      	blx	r5
		spiLite=&ltSPI;
   14942:	4b07      	ldr	r3, [pc, #28]	; (14960 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x3c>)
   14944:	f503 7201 	add.w	r2, r3, #516	; 0x204
   14948:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
		ptrTemperaturesClass=this;
   1494c:	f8c3 4218 	str.w	r4, [r3, #536]	; 0x218
		SPIA=SPI_LTC;
   14950:	f8c4 61ec 	str.w	r6, [r4, #492]	; 0x1ec
} //TemperatureSensors_Class
   14954:	4620      	mov	r0, r4
   14956:	bd70      	pop	{r4, r5, r6, pc}
   14958:	000188f1 	.word	0x000188f1
   1495c:	000188f1 	.word	0x000188f1
   14960:	2000ce4c 	.word	0x2000ce4c

00014964 <_ZN24TemperatureSensors_Class11InitModulesEv>:
bool TemperatureSensors_Class::InitModules(void){
   14964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14968:	4605      	mov	r5, r0
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2; csPins[2]=CS_TEMP3;
   1496a:	233d      	movs	r3, #61	; 0x3d
   1496c:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
   14970:	231b      	movs	r3, #27
   14972:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
   14976:	2327      	movs	r3, #39	; 0x27
   14978:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
   1497c:	f500 77f0 	add.w	r7, r0, #480	; 0x1e0
   14980:	f100 06a8 	add.w	r6, r0, #168	; 0xa8
   14984:	2400      	movs	r4, #0
		module[ii].Init(csPins[ii],spiLite);
   14986:	f8df b038 	ldr.w	fp, [pc, #56]	; 149c0 <_ZN24TemperatureSensors_Class11InitModulesEv+0x5c>
		logger.SaveEventIndexResult("Module ",ii,(uint8_t)(!isOK));
   1498a:	f8df a038 	ldr.w	sl, [pc, #56]	; 149c4 <_ZN24TemperatureSensors_Class11InitModulesEv+0x60>
   1498e:	f8df 9038 	ldr.w	r9, [pc, #56]	; 149c8 <_ZN24TemperatureSensors_Class11InitModulesEv+0x64>
		module[ii].Init(csPins[ii],spiLite);
   14992:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   14996:	f857 1b04 	ldr.w	r1, [r7], #4
   1499a:	4630      	mov	r0, r6
   1499c:	47d8      	blx	fp
		logger.SaveEventIndexResult("Module ",ii,(uint8_t)(!isOK));
   1499e:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
   149a2:	f083 0301 	eor.w	r3, r3, #1
   149a6:	b2e2      	uxtb	r2, r4
   149a8:	4651      	mov	r1, sl
   149aa:	4648      	mov	r0, r9
   149ac:	f8df 801c 	ldr.w	r8, [pc, #28]	; 149cc <_ZN24TemperatureSensors_Class11InitModulesEv+0x68>
   149b0:	47c0      	blx	r8
   149b2:	3401      	adds	r4, #1
   149b4:	3668      	adds	r6, #104	; 0x68
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   149b6:	2c03      	cmp	r4, #3
   149b8:	d1eb      	bne.n	14992 <_ZN24TemperatureSensors_Class11InitModulesEv+0x2e>
}
   149ba:	2001      	movs	r0, #1
   149bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149c0:	00018919 	.word	0x00018919
   149c4:	0001b6e4 	.word	0x0001b6e4
   149c8:	20003a68 	.word	0x20003a68
   149cc:	00011cb1 	.word	0x00011cb1

000149d0 <_ZN24TemperatureSensors_Class4InitEv>:
bool	TemperatureSensors_Class::Init(void){
   149d0:	b538      	push	{r3, r4, r5, lr}
   149d2:	4604      	mov	r4, r0
	spiLite->set_descriptor(SPIA);
   149d4:	f8d0 11ec 	ldr.w	r1, [r0, #492]	; 0x1ec
   149d8:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   149dc:	4b1d      	ldr	r3, [pc, #116]	; (14a54 <_ZN24TemperatureSensors_Class4InitEv+0x84>)
   149de:	4798      	blx	r3
	spiLite->init();
   149e0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   149e4:	4b1c      	ldr	r3, [pc, #112]	; (14a58 <_ZN24TemperatureSensors_Class4InitEv+0x88>)
   149e6:	4798      	blx	r3
	if (spiLite->ready)
   149e8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   149ec:	781b      	ldrb	r3, [r3, #0]
   149ee:	bb63      	cbnz	r3, 14a4a <_ZN24TemperatureSensors_Class4InitEv+0x7a>
		logger.SaveEvent("SPI Temperatures Failed");
   149f0:	491a      	ldr	r1, [pc, #104]	; (14a5c <_ZN24TemperatureSensors_Class4InitEv+0x8c>)
   149f2:	481b      	ldr	r0, [pc, #108]	; (14a60 <_ZN24TemperatureSensors_Class4InitEv+0x90>)
   149f4:	4b1b      	ldr	r3, [pc, #108]	; (14a64 <_ZN24TemperatureSensors_Class4InitEv+0x94>)
   149f6:	4798      	blx	r3
	ptrTemperaturesClass=this;
   149f8:	4b1b      	ldr	r3, [pc, #108]	; (14a68 <_ZN24TemperatureSensors_Class4InitEv+0x98>)
   149fa:	f8c3 4218 	str.w	r4, [r3, #536]	; 0x218
	ext_irq_register(PIN_PB08, Converter1Ready);
   149fe:	491b      	ldr	r1, [pc, #108]	; (14a6c <_ZN24TemperatureSensors_Class4InitEv+0x9c>)
   14a00:	2028      	movs	r0, #40	; 0x28
   14a02:	4d1b      	ldr	r5, [pc, #108]	; (14a70 <_ZN24TemperatureSensors_Class4InitEv+0xa0>)
   14a04:	47a8      	blx	r5
	ext_irq_register(PIN_PB09, Converter2Ready);
   14a06:	491b      	ldr	r1, [pc, #108]	; (14a74 <_ZN24TemperatureSensors_Class4InitEv+0xa4>)
   14a08:	2029      	movs	r0, #41	; 0x29
   14a0a:	47a8      	blx	r5
	ext_irq_register(PIN_PB01, Converter3Ready);
   14a0c:	491a      	ldr	r1, [pc, #104]	; (14a78 <_ZN24TemperatureSensors_Class4InitEv+0xa8>)
   14a0e:	2021      	movs	r0, #33	; 0x21
   14a10:	47a8      	blx	r5
	InitModules();
   14a12:	4620      	mov	r0, r4
   14a14:	4b19      	ldr	r3, [pc, #100]	; (14a7c <_ZN24TemperatureSensors_Class4InitEv+0xac>)
   14a16:	4798      	blx	r3
	converterReady[0]=true;converterReady[1]=true;converterReady[3]=true;
   14a18:	2301      	movs	r3, #1
   14a1a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
   14a1e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   14a22:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	currentModule=0; currentChannelIndex=0;
   14a26:	2300      	movs	r3, #0
   14a28:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
   14a2c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
   14a30:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   14a34:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
   14a38:	4013      	ands	r3, r2
   14a3a:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   14a3e:	4013      	ands	r3, r2
	isOK=(module[0].isOK)&(module[1].isOK)&(module[2].isOK);
   14a40:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	return isOK;
   14a44:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
}
   14a48:	bd38      	pop	{r3, r4, r5, pc}
		logger.SaveEvent("SPI Temperatures Started");
   14a4a:	490d      	ldr	r1, [pc, #52]	; (14a80 <_ZN24TemperatureSensors_Class4InitEv+0xb0>)
   14a4c:	4804      	ldr	r0, [pc, #16]	; (14a60 <_ZN24TemperatureSensors_Class4InitEv+0x90>)
   14a4e:	4b05      	ldr	r3, [pc, #20]	; (14a64 <_ZN24TemperatureSensors_Class4InitEv+0x94>)
   14a50:	4798      	blx	r3
   14a52:	e7d1      	b.n	149f8 <_ZN24TemperatureSensors_Class4InitEv+0x28>
   14a54:	00019225 	.word	0x00019225
   14a58:	000191c9 	.word	0x000191c9
   14a5c:	0001b708 	.word	0x0001b708
   14a60:	20003a68 	.word	0x20003a68
   14a64:	00011de9 	.word	0x00011de9
   14a68:	2000ce4c 	.word	0x2000ce4c
   14a6c:	000148d1 	.word	0x000148d1
   14a70:	00003715 	.word	0x00003715
   14a74:	000148ed 	.word	0x000148ed
   14a78:	00014909 	.word	0x00014909
   14a7c:	00014965 	.word	0x00014965
   14a80:	0001b6ec 	.word	0x0001b6ec

00014a84 <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
   14a84:	b510      	push	{r4, lr}
   14a86:	4604      	mov	r4, r0
	converterTimeout=false;
   14a88:	2200      	movs	r2, #0
   14a8a:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	converterReady[currentModule]=false;
   14a8e:	f890 31ff 	ldrb.w	r3, [r0, #511]	; 0x1ff
   14a92:	4403      	add	r3, r0
   14a94:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   14a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14a9c:	4907      	ldr	r1, [pc, #28]	; (14abc <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x38>)
   14a9e:	4808      	ldr	r0, [pc, #32]	; (14ac0 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x3c>)
   14aa0:	4b08      	ldr	r3, [pc, #32]	; (14ac4 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x40>)
   14aa2:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
   14aa4:	f894 01ff 	ldrb.w	r0, [r4, #511]	; 0x1ff
   14aa8:	2368      	movs	r3, #104	; 0x68
   14aaa:	fb03 4000 	mla	r0, r3, r0, r4
   14aae:	f894 1200 	ldrb.w	r1, [r4, #512]	; 0x200
   14ab2:	30a8      	adds	r0, #168	; 0xa8
   14ab4:	4b04      	ldr	r3, [pc, #16]	; (14ac8 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x44>)
   14ab6:	4798      	blx	r3
   14ab8:	bd10      	pop	{r4, pc}
   14aba:	bf00      	nop
   14abc:	00014895 	.word	0x00014895
   14ac0:	2000d068 	.word	0x2000d068
   14ac4:	00010715 	.word	0x00010715
   14ac8:	00018a0d 	.word	0x00018a0d

00014acc <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
   14acc:	b538      	push	{r3, r4, r5, lr}
   14ace:	4604      	mov	r4, r0
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
   14ad0:	491e      	ldr	r1, [pc, #120]	; (14b4c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x80>)
   14ad2:	481f      	ldr	r0, [pc, #124]	; (14b50 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x84>)
   14ad4:	4b1f      	ldr	r3, [pc, #124]	; (14b54 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x88>)
   14ad6:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
   14ad8:	f894 01ff 	ldrb.w	r0, [r4, #511]	; 0x1ff
   14adc:	2568      	movs	r5, #104	; 0x68
   14ade:	fb05 4000 	mla	r0, r5, r0, r4
   14ae2:	f894 1200 	ldrb.w	r1, [r4, #512]	; 0x200
   14ae6:	30a8      	adds	r0, #168	; 0xa8
   14ae8:	4b1b      	ldr	r3, [pc, #108]	; (14b58 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>)
   14aea:	4798      	blx	r3
   14aec:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	faultData=module[currentModule].fault_data;
   14af0:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
   14af4:	fb05 4502 	mla	r5, r5, r2, r4
   14af8:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
   14afc:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (faultData==VALID_TEMPERATURE)
   14b00:	2b01      	cmp	r3, #1
   14b02:	d00d      	beq.n	14b20 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x54>
			lastValue=-999;
   14b04:	4b15      	ldr	r3, [pc, #84]	; (14b5c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x90>)
   14b06:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	currentChannelIndex++;
   14b0a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
   14b0e:	3301      	adds	r3, #1
   14b10:	b2db      	uxtb	r3, r3
	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
   14b12:	2b04      	cmp	r3, #4
   14b14:	d00c      	beq.n	14b30 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x64>
	currentChannelIndex++;
   14b16:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
}
   14b1a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   14b1e:	bd38      	pop	{r3, r4, r5, pc}
			values[currentModule][currentChannelIndex]=lastValue;
   14b20:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
   14b24:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   14b28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   14b2c:	66d8      	str	r0, [r3, #108]	; 0x6c
   14b2e:	e7ec      	b.n	14b0a <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x3e>
		currentChannelIndex=0;
   14b30:	2300      	movs	r3, #0
   14b32:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
		currentModule++;
   14b36:	3201      	adds	r2, #1
   14b38:	b2d2      	uxtb	r2, r2
		if (currentModule==NUMBER_LTC2983_MODULES)
   14b3a:	2a03      	cmp	r2, #3
		currentModule++;
   14b3c:	bf12      	itee	ne
   14b3e:	f884 21ff 	strbne.w	r2, [r4, #511]	; 0x1ff
			currentModule=0;
   14b42:	2300      	moveq	r3, #0
   14b44:	f884 31ff 	strbeq.w	r3, [r4, #511]	; 0x1ff
   14b48:	e7e7      	b.n	14b1a <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x4e>
   14b4a:	bf00      	nop
   14b4c:	00014895 	.word	0x00014895
   14b50:	2000d068 	.word	0x2000d068
   14b54:	000106bd 	.word	0x000106bd
   14b58:	00018b15 	.word	0x00018b15
   14b5c:	c479c000 	.word	0xc479c000

00014b60 <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
	return converterReady[0]&converterReady[1]&converterReady[2];
   14b60:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
   14b64:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   14b68:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   14b6c:	4013      	ands	r3, r2
}
   14b6e:	4018      	ands	r0, r3
   14b70:	4770      	bx	lr
	...

00014b74 <_GLOBAL__sub_I_ptrTemperaturesClass>:
}

TemperatureSensors_Class temperatures(&SPI_TEMP);
   14b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   14b78:	4c30      	ldr	r4, [pc, #192]	; (14c3c <_GLOBAL__sub_I_ptrTemperaturesClass+0xc8>)
   14b7a:	f504 7507 	add.w	r5, r4, #540	; 0x21c
   14b7e:	4930      	ldr	r1, [pc, #192]	; (14c40 <_GLOBAL__sub_I_ptrTemperaturesClass+0xcc>)
   14b80:	4628      	mov	r0, r5
   14b82:	4f30      	ldr	r7, [pc, #192]	; (14c44 <_GLOBAL__sub_I_ptrTemperaturesClass+0xd0>)
   14b84:	47b8      	blx	r7
   14b86:	4e30      	ldr	r6, [pc, #192]	; (14c48 <_GLOBAL__sub_I_ptrTemperaturesClass+0xd4>)
   14b88:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 14c80 <_GLOBAL__sub_I_ptrTemperaturesClass+0x10c>
   14b8c:	4632      	mov	r2, r6
   14b8e:	4641      	mov	r1, r8
   14b90:	4628      	mov	r0, r5
   14b92:	4d2e      	ldr	r5, [pc, #184]	; (14c4c <_GLOBAL__sub_I_ptrTemperaturesClass+0xd8>)
   14b94:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   14b96:	f504 790f 	add.w	r9, r4, #572	; 0x23c
   14b9a:	492d      	ldr	r1, [pc, #180]	; (14c50 <_GLOBAL__sub_I_ptrTemperaturesClass+0xdc>)
   14b9c:	4648      	mov	r0, r9
   14b9e:	47b8      	blx	r7
   14ba0:	4632      	mov	r2, r6
   14ba2:	4641      	mov	r1, r8
   14ba4:	4648      	mov	r0, r9
   14ba6:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   14ba8:	f504 7917 	add.w	r9, r4, #604	; 0x25c
   14bac:	4929      	ldr	r1, [pc, #164]	; (14c54 <_GLOBAL__sub_I_ptrTemperaturesClass+0xe0>)
   14bae:	4648      	mov	r0, r9
   14bb0:	47b8      	blx	r7
   14bb2:	4632      	mov	r2, r6
   14bb4:	4641      	mov	r1, r8
   14bb6:	4648      	mov	r0, r9
   14bb8:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   14bba:	f504 791f 	add.w	r9, r4, #636	; 0x27c
   14bbe:	4926      	ldr	r1, [pc, #152]	; (14c58 <_GLOBAL__sub_I_ptrTemperaturesClass+0xe4>)
   14bc0:	4648      	mov	r0, r9
   14bc2:	47b8      	blx	r7
   14bc4:	4632      	mov	r2, r6
   14bc6:	4641      	mov	r1, r8
   14bc8:	4648      	mov	r0, r9
   14bca:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   14bcc:	f504 7927 	add.w	r9, r4, #668	; 0x29c
   14bd0:	4922      	ldr	r1, [pc, #136]	; (14c5c <_GLOBAL__sub_I_ptrTemperaturesClass+0xe8>)
   14bd2:	4648      	mov	r0, r9
   14bd4:	47b8      	blx	r7
   14bd6:	4632      	mov	r2, r6
   14bd8:	4641      	mov	r1, r8
   14bda:	4648      	mov	r0, r9
   14bdc:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   14bde:	f504 792f 	add.w	r9, r4, #700	; 0x2bc
   14be2:	491f      	ldr	r1, [pc, #124]	; (14c60 <_GLOBAL__sub_I_ptrTemperaturesClass+0xec>)
   14be4:	4648      	mov	r0, r9
   14be6:	47b8      	blx	r7
   14be8:	4632      	mov	r2, r6
   14bea:	4641      	mov	r1, r8
   14bec:	4648      	mov	r0, r9
   14bee:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   14bf0:	f504 7937 	add.w	r9, r4, #732	; 0x2dc
   14bf4:	491b      	ldr	r1, [pc, #108]	; (14c64 <_GLOBAL__sub_I_ptrTemperaturesClass+0xf0>)
   14bf6:	4648      	mov	r0, r9
   14bf8:	47b8      	blx	r7
   14bfa:	4632      	mov	r2, r6
   14bfc:	4641      	mov	r1, r8
   14bfe:	4648      	mov	r0, r9
   14c00:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   14c02:	f504 793f 	add.w	r9, r4, #764	; 0x2fc
   14c06:	4918      	ldr	r1, [pc, #96]	; (14c68 <_GLOBAL__sub_I_ptrTemperaturesClass+0xf4>)
   14c08:	4648      	mov	r0, r9
   14c0a:	47b8      	blx	r7
   14c0c:	4632      	mov	r2, r6
   14c0e:	4641      	mov	r1, r8
   14c10:	4648      	mov	r0, r9
   14c12:	47a8      	blx	r5
static LT_SPI	ltSPI;
   14c14:	f504 7701 	add.w	r7, r4, #516	; 0x204
   14c18:	4638      	mov	r0, r7
   14c1a:	4b14      	ldr	r3, [pc, #80]	; (14c6c <_GLOBAL__sub_I_ptrTemperaturesClass+0xf8>)
   14c1c:	4798      	blx	r3
   14c1e:	4632      	mov	r2, r6
   14c20:	4913      	ldr	r1, [pc, #76]	; (14c70 <_GLOBAL__sub_I_ptrTemperaturesClass+0xfc>)
   14c22:	4638      	mov	r0, r7
   14c24:	47a8      	blx	r5
TemperatureSensors_Class temperatures(&SPI_TEMP);
   14c26:	4913      	ldr	r1, [pc, #76]	; (14c74 <_GLOBAL__sub_I_ptrTemperaturesClass+0x100>)
   14c28:	4620      	mov	r0, r4
   14c2a:	4b13      	ldr	r3, [pc, #76]	; (14c78 <_GLOBAL__sub_I_ptrTemperaturesClass+0x104>)
   14c2c:	4798      	blx	r3
   14c2e:	4632      	mov	r2, r6
   14c30:	4912      	ldr	r1, [pc, #72]	; (14c7c <_GLOBAL__sub_I_ptrTemperaturesClass+0x108>)
   14c32:	4620      	mov	r0, r4
   14c34:	47a8      	blx	r5
   14c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14c3a:	bf00      	nop
   14c3c:	2000ce4c 	.word	0x2000ce4c
   14c40:	2000df28 	.word	0x2000df28
   14c44:	00010441 	.word	0x00010441
   14c48:	20000000 	.word	0x20000000
   14c4c:	0001a611 	.word	0x0001a611
   14c50:	2000dfbc 	.word	0x2000dfbc
   14c54:	2000e0e0 	.word	0x2000e0e0
   14c58:	2000dfdc 	.word	0x2000dfdc
   14c5c:	2000e0a0 	.word	0x2000e0a0
   14c60:	2000e0c0 	.word	0x2000e0c0
   14c64:	2000df98 	.word	0x2000df98
   14c68:	2000e038 	.word	0x2000e038
   14c6c:	0001918d 	.word	0x0001918d
   14c70:	000191b5 	.word	0x000191b5
   14c74:	2000df60 	.word	0x2000df60
   14c78:	00014925 	.word	0x00014925
   14c7c:	000148a5 	.word	0x000148a5
   14c80:	00010479 	.word	0x00010479

00014c84 <_ZN13CANOpen_ClassC1Ev>:
#include "CO_Class.h"

CANOpen_Class	*ptrCANOpenClass;

// default constructor
CANOpen_Class::CANOpen_Class()
   14c84:	b580      	push	{r7, lr}
   14c86:	b082      	sub	sp, #8
   14c88:	af00      	add	r7, sp, #0
   14c8a:	6078      	str	r0, [r7, #4]
   14c8c:	687b      	ldr	r3, [r7, #4]
   14c8e:	4618      	mov	r0, r3
   14c90:	4b06      	ldr	r3, [pc, #24]	; (14cac <_ZN13CANOpen_ClassC1Ev+0x28>)
   14c92:	4798      	blx	r3
   14c94:	4a06      	ldr	r2, [pc, #24]	; (14cb0 <_ZN13CANOpen_ClassC1Ev+0x2c>)
   14c96:	687b      	ldr	r3, [r7, #4]
   14c98:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
   14c9a:	4a06      	ldr	r2, [pc, #24]	; (14cb4 <_ZN13CANOpen_ClassC1Ev+0x30>)
   14c9c:	687b      	ldr	r3, [r7, #4]
   14c9e:	6013      	str	r3, [r2, #0]
} //CANOpen_Class
   14ca0:	687b      	ldr	r3, [r7, #4]
   14ca2:	4618      	mov	r0, r3
   14ca4:	3708      	adds	r7, #8
   14ca6:	46bd      	mov	sp, r7
   14ca8:	bd80      	pop	{r7, pc}
   14caa:	bf00      	nop
   14cac:	00014e39 	.word	0x00014e39
   14cb0:	0001b728 	.word	0x0001b728
   14cb4:	2000d168 	.word	0x2000d168

00014cb8 <_ZN13CANOpen_ClassC1EP20can_async_descriptor>:

CANOpen_Class::CANOpen_Class(can_async_descriptor  *descr)
   14cb8:	b580      	push	{r7, lr}
   14cba:	b082      	sub	sp, #8
   14cbc:	af00      	add	r7, sp, #0
   14cbe:	6078      	str	r0, [r7, #4]
   14cc0:	6039      	str	r1, [r7, #0]
   14cc2:	687b      	ldr	r3, [r7, #4]
   14cc4:	4618      	mov	r0, r3
   14cc6:	4b08      	ldr	r3, [pc, #32]	; (14ce8 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x30>)
   14cc8:	4798      	blx	r3
   14cca:	4a08      	ldr	r2, [pc, #32]	; (14cec <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x34>)
   14ccc:	687b      	ldr	r3, [r7, #4]
   14cce:	601a      	str	r2, [r3, #0]
{
	ptrCANOpenClass=this;
   14cd0:	4a07      	ldr	r2, [pc, #28]	; (14cf0 <_ZN13CANOpen_ClassC1EP20can_async_descriptor+0x38>)
   14cd2:	687b      	ldr	r3, [r7, #4]
   14cd4:	6013      	str	r3, [r2, #0]
	canDescr=descr;
   14cd6:	687b      	ldr	r3, [r7, #4]
   14cd8:	683a      	ldr	r2, [r7, #0]
   14cda:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
} //CANOpen_Class
   14cde:	687b      	ldr	r3, [r7, #4]
   14ce0:	4618      	mov	r0, r3
   14ce2:	3708      	adds	r7, #8
   14ce4:	46bd      	mov	sp, r7
   14ce6:	bd80      	pop	{r7, pc}
   14ce8:	00014e39 	.word	0x00014e39
   14cec:	0001b728 	.word	0x0001b728
   14cf0:	2000d168 	.word	0x2000d168

00014cf4 <_ZN13CANOpen_ClassD1Ev>:

// default destructor
CANOpen_Class::~CANOpen_Class()
   14cf4:	b580      	push	{r7, lr}
   14cf6:	b082      	sub	sp, #8
   14cf8:	af00      	add	r7, sp, #0
   14cfa:	6078      	str	r0, [r7, #4]
   14cfc:	4a05      	ldr	r2, [pc, #20]	; (14d14 <_ZN13CANOpen_ClassD1Ev+0x20>)
   14cfe:	687b      	ldr	r3, [r7, #4]
   14d00:	601a      	str	r2, [r3, #0]
   14d02:	687b      	ldr	r3, [r7, #4]
   14d04:	4618      	mov	r0, r3
   14d06:	4b04      	ldr	r3, [pc, #16]	; (14d18 <_ZN13CANOpen_ClassD1Ev+0x24>)
   14d08:	4798      	blx	r3
{
} //~CANOpen_Class
   14d0a:	687b      	ldr	r3, [r7, #4]
   14d0c:	4618      	mov	r0, r3
   14d0e:	3708      	adds	r7, #8
   14d10:	46bd      	mov	sp, r7
   14d12:	bd80      	pop	{r7, pc}
   14d14:	0001b728 	.word	0x0001b728
   14d18:	00014e99 	.word	0x00014e99

00014d1c <_ZN13CANOpen_Class13Init_CO_CLASSEh>:

int	CANOpen_Class::Init_CO_CLASS(uint8_t node){
   14d1c:	b590      	push	{r4, r7, lr}
   14d1e:	b083      	sub	sp, #12
   14d20:	af00      	add	r7, sp, #0
   14d22:	6078      	str	r0, [r7, #4]
   14d24:	460b      	mov	r3, r1
   14d26:	70fb      	strb	r3, [r7, #3]
	coNode=node;
   14d28:	687b      	ldr	r3, [r7, #4]
   14d2a:	78fa      	ldrb	r2, [r7, #3]
   14d2c:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	if (node==1)
	{
			//RedefineMacros();
	}
	//can.SetDescriptor(canDescr);
	err=CO_init(canDescr,node,1000);
   14d30:	6878      	ldr	r0, [r7, #4]
   14d32:	687b      	ldr	r3, [r7, #4]
   14d34:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
   14d38:	78fa      	ldrb	r2, [r7, #3]
   14d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   14d3e:	4c17      	ldr	r4, [pc, #92]	; (14d9c <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x80>)
   14d40:	47a0      	blx	r4
   14d42:	4603      	mov	r3, r0
   14d44:	461a      	mov	r2, r3
   14d46:	687b      	ldr	r3, [r7, #4]
   14d48:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185
	
	if (err==0)
   14d4c:	687b      	ldr	r3, [r7, #4]
   14d4e:	f993 3185 	ldrsb.w	r3, [r3, #389]	; 0x185
   14d52:	2b00      	cmp	r3, #0
   14d54:	d116      	bne.n	14d84 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x68>
	{
		canopen_driver->canopen_ready=true;
   14d56:	4b12      	ldr	r3, [pc, #72]	; (14da0 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x84>)
   14d58:	681b      	ldr	r3, [r3, #0]
   14d5a:	2201      	movs	r2, #1
   14d5c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		err=(CO_ReturnError_t)SetInitialMode();
   14d60:	6878      	ldr	r0, [r7, #4]
   14d62:	4b10      	ldr	r3, [pc, #64]	; (14da4 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x88>)
   14d64:	4798      	blx	r3
   14d66:	4603      	mov	r3, r0
   14d68:	b25a      	sxtb	r2, r3
   14d6a:	687b      	ldr	r3, [r7, #4]
   14d6c:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185
		if (node==1)
   14d70:	78fb      	ldrb	r3, [r7, #3]
   14d72:	2b01      	cmp	r3, #1
   14d74:	d10a      	bne.n	14d8c <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x70>
		{
			CO_sendNMTcommand(1,0);
   14d76:	687b      	ldr	r3, [r7, #4]
   14d78:	2200      	movs	r2, #0
   14d7a:	2101      	movs	r1, #1
   14d7c:	4618      	mov	r0, r3
   14d7e:	4b0a      	ldr	r3, [pc, #40]	; (14da8 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x8c>)
   14d80:	4798      	blx	r3
   14d82:	e003      	b.n	14d8c <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x70>
		}
			

		
	}else{
		return	(int)err;
   14d84:	687b      	ldr	r3, [r7, #4]
   14d86:	f993 3185 	ldrsb.w	r3, [r3, #389]	; 0x185
   14d8a:	e002      	b.n	14d92 <_ZN13CANOpen_Class13Init_CO_CLASSEh+0x76>
	}
	return	(int)err;
   14d8c:	687b      	ldr	r3, [r7, #4]
   14d8e:	f993 3185 	ldrsb.w	r3, [r3, #389]	; 0x185
}
   14d92:	4618      	mov	r0, r3
   14d94:	370c      	adds	r7, #12
   14d96:	46bd      	mov	sp, r7
   14d98:	bd90      	pop	{r4, r7, pc}
   14d9a:	bf00      	nop
   14d9c:	00014fa9 	.word	0x00014fa9
   14da0:	2000da5c 	.word	0x2000da5c
   14da4:	00014dad 	.word	0x00014dad
   14da8:	00014ed1 	.word	0x00014ed1

00014dac <_ZN13CANOpen_Class14SetInitialModeEv>:

int	CANOpen_Class::SetInitialMode(void){
   14dac:	b580      	push	{r7, lr}
   14dae:	b082      	sub	sp, #8
   14db0:	af00      	add	r7, sp, #0
   14db2:	6078      	str	r0, [r7, #4]
	/* CAN module address, NodeID, Bitrate */
	/* We do not use CAN registers directly, so address here is a pointer to the CAN_HandleTypeDef object. */
	
	
	/* start CAN */
	err=CO_CANsetNormalMode();
   14db4:	687b      	ldr	r3, [r7, #4]
   14db6:	4618      	mov	r0, r3
   14db8:	4b08      	ldr	r3, [pc, #32]	; (14ddc <_ZN13CANOpen_Class14SetInitialModeEv+0x30>)
   14dba:	4798      	blx	r3
   14dbc:	4603      	mov	r3, r0
   14dbe:	461a      	mov	r2, r3
   14dc0:	687b      	ldr	r3, [r7, #4]
   14dc2:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185
	//err=CO_CANsetNormalMode(CO->CANmodule[0]);

	reset = CO_RESET_NOT;
   14dc6:	687b      	ldr	r3, [r7, #4]
   14dc8:	2200      	movs	r2, #0
   14dca:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
	return	(int)err;
   14dce:	687b      	ldr	r3, [r7, #4]
   14dd0:	f993 3185 	ldrsb.w	r3, [r3, #389]	; 0x185
}
   14dd4:	4618      	mov	r0, r3
   14dd6:	3708      	adds	r7, #8
   14dd8:	46bd      	mov	sp, r7
   14dda:	bd80      	pop	{r7, pc}
   14ddc:	000159d1 	.word	0x000159d1

00014de0 <_ZN13CANOpen_Class15StartNMTServiceEh>:
		operational=(ptrCO->HBcons->monitoredNodes[2].NMTstate==5);
//0	}
	return	operational;
}

bool	CANOpen_Class::StartNMTService(uint8_t nodeId){
   14de0:	b580      	push	{r7, lr}
   14de2:	b084      	sub	sp, #16
   14de4:	af00      	add	r7, sp, #0
   14de6:	6078      	str	r0, [r7, #4]
   14de8:	460b      	mov	r3, r1
   14dea:	70fb      	strb	r3, [r7, #3]
	bool localOperational=false;
   14dec:	2300      	movs	r3, #0
   14dee:	73fb      	strb	r3, [r7, #15]
// 	while ((!localOperational))
// 	{
		CO_sendNMTcommand(1,nodeId);
   14df0:	687b      	ldr	r3, [r7, #4]
   14df2:	78fa      	ldrb	r2, [r7, #3]
   14df4:	2101      	movs	r1, #1
   14df6:	4618      	mov	r0, r3
   14df8:	4b0d      	ldr	r3, [pc, #52]	; (14e30 <_ZN13CANOpen_Class15StartNMTServiceEh+0x50>)
   14dfa:	4798      	blx	r3
		delay_ms(100);
   14dfc:	2064      	movs	r0, #100	; 0x64
   14dfe:	4b0d      	ldr	r3, [pc, #52]	; (14e34 <_ZN13CANOpen_Class15StartNMTServiceEh+0x54>)
   14e00:	4798      	blx	r3
		localOperational=(ptrCO->HBcons->monitoredNodes[nodeId].NMTstate==5);
   14e02:	687b      	ldr	r3, [r7, #4]
   14e04:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   14e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   14e0a:	689a      	ldr	r2, [r3, #8]
   14e0c:	78fb      	ldrb	r3, [r7, #3]
   14e0e:	011b      	lsls	r3, r3, #4
   14e10:	4413      	add	r3, r2
   14e12:	781b      	ldrb	r3, [r3, #0]
   14e14:	2b05      	cmp	r3, #5
   14e16:	bf0c      	ite	eq
   14e18:	2301      	moveq	r3, #1
   14e1a:	2300      	movne	r3, #0
   14e1c:	73fb      	strb	r3, [r7, #15]
		slaveIsOperational=localOperational;
   14e1e:	687b      	ldr	r3, [r7, #4]
   14e20:	7bfa      	ldrb	r2, [r7, #15]
   14e22:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
//	}
	return	localOperational;
   14e26:	7bfb      	ldrb	r3, [r7, #15]
}
   14e28:	4618      	mov	r0, r3
   14e2a:	3710      	adds	r7, #16
   14e2c:	46bd      	mov	sp, r7
   14e2e:	bd80      	pop	{r7, pc}
   14e30:	00014ed1 	.word	0x00014ed1
   14e34:	00003681 	.word	0x00003681

00014e38 <_ZN8CO_ClassC1Ev>:
		static	int32_t             *CO_traceValueBuffers[CO_NO_TRACE];
	#endif
#endif

// default constructor
CO_Class::CO_Class()
   14e38:	b580      	push	{r7, lr}
   14e3a:	b082      	sub	sp, #8
   14e3c:	af00      	add	r7, sp, #0
   14e3e:	6078      	str	r0, [r7, #4]
   14e40:	687b      	ldr	r3, [r7, #4]
   14e42:	4618      	mov	r0, r3
   14e44:	4b10      	ldr	r3, [pc, #64]	; (14e88 <_ZN8CO_ClassC1Ev+0x50>)
   14e46:	4798      	blx	r3
   14e48:	687b      	ldr	r3, [r7, #4]
   14e4a:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
   14e4e:	4618      	mov	r0, r3
   14e50:	4b0e      	ldr	r3, [pc, #56]	; (14e8c <_ZN8CO_ClassC1Ev+0x54>)
   14e52:	4798      	blx	r3
   14e54:	4a0e      	ldr	r2, [pc, #56]	; (14e90 <_ZN8CO_ClassC1Ev+0x58>)
   14e56:	687b      	ldr	r3, [r7, #4]
   14e58:	601a      	str	r2, [r3, #0]
{
	ptrCO = CO;
   14e5a:	4b0e      	ldr	r3, [pc, #56]	; (14e94 <_ZN8CO_ClassC1Ev+0x5c>)
   14e5c:	681a      	ldr	r2, [r3, #0]
   14e5e:	687b      	ldr	r3, [r7, #4]
   14e60:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	coCanDescr=NULL;
   14e64:	687b      	ldr	r3, [r7, #4]
   14e66:	2200      	movs	r2, #0
   14e68:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	CO_memoryUsed=sizeof(COO);
   14e6c:	687b      	ldr	r3, [r7, #4]
   14e6e:	223c      	movs	r2, #60	; 0x3c
   14e70:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	timer_next=NULL;
   14e74:	687b      	ldr	r3, [r7, #4]
   14e76:	2200      	movs	r2, #0
   14e78:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
} //CO_Class
   14e7c:	687b      	ldr	r3, [r7, #4]
   14e7e:	4618      	mov	r0, r3
   14e80:	3708      	adds	r7, #8
   14e82:	46bd      	mov	sp, r7
   14e84:	bd80      	pop	{r7, pc}
   14e86:	bf00      	nop
   14e88:	00015831 	.word	0x00015831
   14e8c:	000168cd 	.word	0x000168cd
   14e90:	0001b734 	.word	0x0001b734
   14e94:	2000d1a8 	.word	0x2000d1a8

00014e98 <_ZN8CO_ClassD1Ev>:

// default destructor
CO_Class::~CO_Class()
   14e98:	b580      	push	{r7, lr}
   14e9a:	b082      	sub	sp, #8
   14e9c:	af00      	add	r7, sp, #0
   14e9e:	6078      	str	r0, [r7, #4]
   14ea0:	4a08      	ldr	r2, [pc, #32]	; (14ec4 <_ZN8CO_ClassD1Ev+0x2c>)
   14ea2:	687b      	ldr	r3, [r7, #4]
   14ea4:	601a      	str	r2, [r3, #0]
   14ea6:	687b      	ldr	r3, [r7, #4]
   14ea8:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
   14eac:	4618      	mov	r0, r3
   14eae:	4b06      	ldr	r3, [pc, #24]	; (14ec8 <_ZN8CO_ClassD1Ev+0x30>)
   14eb0:	4798      	blx	r3
   14eb2:	687b      	ldr	r3, [r7, #4]
   14eb4:	4618      	mov	r0, r3
   14eb6:	4b05      	ldr	r3, [pc, #20]	; (14ecc <_ZN8CO_ClassD1Ev+0x34>)
   14eb8:	4798      	blx	r3
{
} //~CO_Class
   14eba:	687b      	ldr	r3, [r7, #4]
   14ebc:	4618      	mov	r0, r3
   14ebe:	3708      	adds	r7, #8
   14ec0:	46bd      	mov	sp, r7
   14ec2:	bd80      	pop	{r7, pc}
   14ec4:	0001b734 	.word	0x0001b734
   14ec8:	000168e1 	.word	0x000168e1
   14ecc:	000158c1 	.word	0x000158c1

00014ed0 <_ZN8CO_Class17CO_sendNMTcommandEhh>:



uint8_t CO_Class::CO_sendNMTcommand( uint8_t command, uint8_t nodeID){
   14ed0:	b580      	push	{r7, lr}
   14ed2:	b082      	sub	sp, #8
   14ed4:	af00      	add	r7, sp, #0
   14ed6:	6078      	str	r0, [r7, #4]
   14ed8:	460b      	mov	r3, r1
   14eda:	70fb      	strb	r3, [r7, #3]
   14edc:	4613      	mov	r3, r2
   14ede:	70bb      	strb	r3, [r7, #2]
	if(NMTM_txBuff == 0){
   14ee0:	687b      	ldr	r3, [r7, #4]
   14ee2:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
   14ee6:	2b00      	cmp	r3, #0
   14ee8:	d101      	bne.n	14eee <_ZN8CO_Class17CO_sendNMTcommandEhh+0x1e>
		/* error, CO_CANtxBufferInit() was not called for this buffer. */
		return CO_ERROR_TX_UNCONFIGURED; /* -11 */
   14eea:	23f5      	movs	r3, #245	; 0xf5
   14eec:	e053      	b.n	14f96 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xc6>
	}
	NMTM_txBuff->data[0] = command;
   14eee:	687b      	ldr	r3, [r7, #4]
   14ef0:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
   14ef4:	78fa      	ldrb	r2, [r7, #3]
   14ef6:	715a      	strb	r2, [r3, #5]
	NMTM_txBuff->data[1] = nodeID;
   14ef8:	687b      	ldr	r3, [r7, #4]
   14efa:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
   14efe:	78ba      	ldrb	r2, [r7, #2]
   14f00:	719a      	strb	r2, [r3, #6]

	/* Apply NMT command also to this node, if set so. */
	if(nodeID == 0 || nodeID == CO->NMT->nodeId){
   14f02:	78bb      	ldrb	r3, [r7, #2]
   14f04:	2b00      	cmp	r3, #0
   14f06:	d006      	beq.n	14f16 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x46>
   14f08:	4b25      	ldr	r3, [pc, #148]	; (14fa0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14f0a:	681b      	ldr	r3, [r3, #0]
   14f0c:	691b      	ldr	r3, [r3, #16]
   14f0e:	7a9b      	ldrb	r3, [r3, #10]
   14f10:	78ba      	ldrb	r2, [r7, #2]
   14f12:	429a      	cmp	r2, r3
   14f14:	d135      	bne.n	14f82 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
		switch(command){
   14f16:	78fb      	ldrb	r3, [r7, #3]
   14f18:	2b80      	cmp	r3, #128	; 0x80
   14f1a:	d01f      	beq.n	14f5c <_ZN8CO_Class17CO_sendNMTcommandEhh+0x8c>
   14f1c:	2b80      	cmp	r3, #128	; 0x80
   14f1e:	dc04      	bgt.n	14f2a <_ZN8CO_Class17CO_sendNMTcommandEhh+0x5a>
   14f20:	2b01      	cmp	r3, #1
   14f22:	d007      	beq.n	14f34 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x64>
   14f24:	2b02      	cmp	r3, #2
   14f26:	d013      	beq.n	14f50 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x80>
   14f28:	e02b      	b.n	14f82 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
   14f2a:	2b81      	cmp	r3, #129	; 0x81
   14f2c:	d01c      	beq.n	14f68 <_ZN8CO_Class17CO_sendNMTcommandEhh+0x98>
   14f2e:	2b82      	cmp	r3, #130	; 0x82
   14f30:	d020      	beq.n	14f74 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xa4>
   14f32:	e026      	b.n	14f82 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_OPERATIONAL:
			if((*CO->NMT->emPr->errorRegister) == 0) {
   14f34:	4b1a      	ldr	r3, [pc, #104]	; (14fa0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14f36:	681b      	ldr	r3, [r3, #0]
   14f38:	691b      	ldr	r3, [r3, #16]
   14f3a:	695b      	ldr	r3, [r3, #20]
   14f3c:	681b      	ldr	r3, [r3, #0]
   14f3e:	781b      	ldrb	r3, [r3, #0]
   14f40:	2b00      	cmp	r3, #0
   14f42:	d11d      	bne.n	14f80 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
				CO->NMT->operatingState = CO_NMT_OPERATIONAL;
   14f44:	4b16      	ldr	r3, [pc, #88]	; (14fa0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14f46:	681b      	ldr	r3, [r3, #0]
   14f48:	691b      	ldr	r3, [r3, #16]
   14f4a:	2205      	movs	r2, #5
   14f4c:	701a      	strb	r2, [r3, #0]
			}
			break;
   14f4e:	e017      	b.n	14f80 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb0>
			case CO_NMT_ENTER_STOPPED:
			CO->NMT->operatingState = CO_NMT_STOPPED;
   14f50:	4b13      	ldr	r3, [pc, #76]	; (14fa0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14f52:	681b      	ldr	r3, [r3, #0]
   14f54:	691b      	ldr	r3, [r3, #16]
   14f56:	2204      	movs	r2, #4
   14f58:	701a      	strb	r2, [r3, #0]
			break;
   14f5a:	e012      	b.n	14f82 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_ENTER_PRE_OPERATIONAL:
			CO->NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
   14f5c:	4b10      	ldr	r3, [pc, #64]	; (14fa0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14f5e:	681b      	ldr	r3, [r3, #0]
   14f60:	691b      	ldr	r3, [r3, #16]
   14f62:	227f      	movs	r2, #127	; 0x7f
   14f64:	701a      	strb	r2, [r3, #0]
			break;
   14f66:	e00c      	b.n	14f82 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_NODE:
			CO->NMT->resetCommand = CO_RESET_APP;
   14f68:	4b0d      	ldr	r3, [pc, #52]	; (14fa0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14f6a:	681b      	ldr	r3, [r3, #0]
   14f6c:	691b      	ldr	r3, [r3, #16]
   14f6e:	2202      	movs	r2, #2
   14f70:	725a      	strb	r2, [r3, #9]
			break;
   14f72:	e006      	b.n	14f82 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			case CO_NMT_RESET_COMMUNICATION:
			CO->NMT->resetCommand = CO_RESET_COMM;
   14f74:	4b0a      	ldr	r3, [pc, #40]	; (14fa0 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd0>)
   14f76:	681b      	ldr	r3, [r3, #0]
   14f78:	691b      	ldr	r3, [r3, #16]
   14f7a:	2201      	movs	r2, #1
   14f7c:	725a      	strb	r2, [r3, #9]
			break;
   14f7e:	e000      	b.n	14f82 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xb2>
			break;
   14f80:	bf00      	nop
		}
	}

	return CAN_Send( NMTM_txBuff); /* 0 = success */
   14f82:	687a      	ldr	r2, [r7, #4]
   14f84:	687b      	ldr	r3, [r7, #4]
   14f86:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
   14f8a:	4619      	mov	r1, r3
   14f8c:	4610      	mov	r0, r2
   14f8e:	4b05      	ldr	r3, [pc, #20]	; (14fa4 <_ZN8CO_Class17CO_sendNMTcommandEhh+0xd4>)
   14f90:	4798      	blx	r3
   14f92:	4603      	mov	r3, r0
   14f94:	b2db      	uxtb	r3, r3
}
   14f96:	4618      	mov	r0, r3
   14f98:	3708      	adds	r7, #8
   14f9a:	46bd      	mov	sp, r7
   14f9c:	bd80      	pop	{r7, pc}
   14f9e:	bf00      	nop
   14fa0:	2000d1a8 	.word	0x2000d1a8
   14fa4:	00015d61 	.word	0x00015d61

00014fa8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm>:
/******************************************************************************/
CO_ReturnError_t CO_Class::CO_init(
can_async_descriptor   *CANbaseAddress,
uint8_t                 nodeId,
uint32_t                bitRate)
{
   14fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14faa:	b099      	sub	sp, #100	; 0x64
   14fac:	af0c      	add	r7, sp, #48	; 0x30
   14fae:	61f8      	str	r0, [r7, #28]
   14fb0:	61b9      	str	r1, [r7, #24]
   14fb2:	613b      	str	r3, [r7, #16]
   14fb4:	4613      	mov	r3, r2
   14fb6:	75fb      	strb	r3, [r7, #23]
	coCanDescr=CANbaseAddress;
   14fb8:	69fb      	ldr	r3, [r7, #28]
   14fba:	69ba      	ldr	r2, [r7, #24]
   14fbc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	coNode=nodeId;
   14fc0:	69fb      	ldr	r3, [r7, #28]
   14fc2:	7dfa      	ldrb	r2, [r7, #23]
   14fc4:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
	#endif


	/* Initialize CANopen object */
	#ifdef CO_USE_GLOBALS
		CO = &COO;
   14fc8:	4ba3      	ldr	r3, [pc, #652]	; (15258 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14fca:	4aa4      	ldr	r2, [pc, #656]	; (1525c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b4>)
   14fcc:	601a      	str	r2, [r3, #0]

		CO->CANmodule[0]                    = &COO_CANmodule;
   14fce:	4ba2      	ldr	r3, [pc, #648]	; (15258 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14fd0:	681b      	ldr	r3, [r3, #0]
   14fd2:	4aa3      	ldr	r2, [pc, #652]	; (15260 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b8>)
   14fd4:	601a      	str	r2, [r3, #0]
		CO_CANmodule_rxArray0               = &COO_CANmodule_rxArray0[0];
   14fd6:	4ba3      	ldr	r3, [pc, #652]	; (15264 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
   14fd8:	4aa3      	ldr	r2, [pc, #652]	; (15268 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c0>)
   14fda:	601a      	str	r2, [r3, #0]
		CO_CANmodule_txArray0               = &COO_CANmodule_txArray0[0];
   14fdc:	4ba3      	ldr	r3, [pc, #652]	; (1526c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
   14fde:	4aa4      	ldr	r2, [pc, #656]	; (15270 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c8>)
   14fe0:	601a      	str	r2, [r3, #0]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
   14fe2:	69fb      	ldr	r3, [r7, #28]
   14fe4:	2200      	movs	r2, #0
   14fe6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   14fea:	69fb      	ldr	r3, [r7, #28]
   14fec:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   14ff0:	2b00      	cmp	r3, #0
   14ff2:	d118      	bne.n	15026 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x7e>
			CO->SDO[i]                      = &COO_SDO[i];
   14ff4:	4b98      	ldr	r3, [pc, #608]	; (15258 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   14ff6:	6819      	ldr	r1, [r3, #0]
   14ff8:	69fb      	ldr	r3, [r7, #28]
   14ffa:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
   14ffe:	69fb      	ldr	r3, [r7, #28]
   15000:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   15004:	4613      	mov	r3, r2
   15006:	011b      	lsls	r3, r3, #4
   15008:	4413      	add	r3, r2
   1500a:	00db      	lsls	r3, r3, #3
   1500c:	4a99      	ldr	r2, [pc, #612]	; (15274 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2cc>)
   1500e:	441a      	add	r2, r3
   15010:	0083      	lsls	r3, r0, #2
   15012:	440b      	add	r3, r1
   15014:	605a      	str	r2, [r3, #4]
		for(i=0; i<CO_NO_SDO_SERVER; i++){
   15016:	69fb      	ldr	r3, [r7, #28]
   15018:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   1501c:	1c5a      	adds	r2, r3, #1
   1501e:	69fb      	ldr	r3, [r7, #28]
   15020:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   15024:	e7e1      	b.n	14fea <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x42>
		}

		CO_SDO_ODExtensions                 = &COO_SDO_ODExtensions[0];
   15026:	4b94      	ldr	r3, [pc, #592]	; (15278 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
   15028:	4a94      	ldr	r2, [pc, #592]	; (1527c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d4>)
   1502a:	601a      	str	r2, [r3, #0]
		CO->em                              = &COO_EM;
   1502c:	4b8a      	ldr	r3, [pc, #552]	; (15258 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   1502e:	681b      	ldr	r3, [r3, #0]
   15030:	4a93      	ldr	r2, [pc, #588]	; (15280 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d8>)
   15032:	609a      	str	r2, [r3, #8]
		CO->emPr                            = &COO_EMpr;
   15034:	4b88      	ldr	r3, [pc, #544]	; (15258 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   15036:	681b      	ldr	r3, [r3, #0]
   15038:	4a92      	ldr	r2, [pc, #584]	; (15284 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2dc>)
   1503a:	60da      	str	r2, [r3, #12]
		CO->NMT                             = &COO_NMT;
   1503c:	4b86      	ldr	r3, [pc, #536]	; (15258 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   1503e:	681b      	ldr	r3, [r3, #0]
   15040:	4a91      	ldr	r2, [pc, #580]	; (15288 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e0>)
   15042:	611a      	str	r2, [r3, #16]
		CO->SYNC                            = &COO_SYNC;
   15044:	4b84      	ldr	r3, [pc, #528]	; (15258 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   15046:	681b      	ldr	r3, [r3, #0]
   15048:	4a90      	ldr	r2, [pc, #576]	; (1528c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e4>)
   1504a:	615a      	str	r2, [r3, #20]
		for(i=0; i<CO_NO_RPDO; i++){
   1504c:	69fb      	ldr	r3, [r7, #28]
   1504e:	2200      	movs	r2, #0
   15050:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   15054:	69fb      	ldr	r3, [r7, #28]
   15056:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   1505a:	2b03      	cmp	r3, #3
   1505c:	d818      	bhi.n	15090 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xe8>
			CO->RPDO[i]                     = &COO_RPDO[i];
   1505e:	4b7e      	ldr	r3, [pc, #504]	; (15258 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   15060:	6819      	ldr	r1, [r3, #0]
   15062:	69fb      	ldr	r3, [r7, #28]
   15064:	f8d3 0168 	ldr.w	r0, [r3, #360]	; 0x168
   15068:	69fb      	ldr	r3, [r7, #28]
   1506a:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   1506e:	4613      	mov	r3, r2
   15070:	005b      	lsls	r3, r3, #1
   15072:	4413      	add	r3, r2
   15074:	015b      	lsls	r3, r3, #5
   15076:	4a86      	ldr	r2, [pc, #536]	; (15290 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2e8>)
   15078:	441a      	add	r2, r3
   1507a:	1d83      	adds	r3, r0, #6
   1507c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i=0; i<CO_NO_RPDO; i++){
   15080:	69fb      	ldr	r3, [r7, #28]
   15082:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   15086:	1c5a      	adds	r2, r3, #1
   15088:	69fb      	ldr	r3, [r7, #28]
   1508a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   1508e:	e7e1      	b.n	15054 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xac>
		}
		for(i=0; i<CO_NO_TPDO; i++){
   15090:	69fb      	ldr	r3, [r7, #28]
   15092:	2200      	movs	r2, #0
   15094:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   15098:	69fb      	ldr	r3, [r7, #28]
   1509a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   1509e:	2b03      	cmp	r3, #3
   150a0:	d817      	bhi.n	150d2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x12a>
			CO->TPDO[i]                     = &COO_TPDO[i];
   150a2:	4b6d      	ldr	r3, [pc, #436]	; (15258 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   150a4:	681b      	ldr	r3, [r3, #0]
   150a6:	69fa      	ldr	r2, [r7, #28]
   150a8:	f8d2 2168 	ldr.w	r2, [r2, #360]	; 0x168
   150ac:	69f9      	ldr	r1, [r7, #28]
   150ae:	f8d1 1168 	ldr.w	r1, [r1, #360]	; 0x168
   150b2:	2058      	movs	r0, #88	; 0x58
   150b4:	fb00 f101 	mul.w	r1, r0, r1
   150b8:	4876      	ldr	r0, [pc, #472]	; (15294 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2ec>)
   150ba:	4401      	add	r1, r0
   150bc:	320a      	adds	r2, #10
   150be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(i=0; i<CO_NO_TPDO; i++){
   150c2:	69fb      	ldr	r3, [r7, #28]
   150c4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   150c8:	1c5a      	adds	r2, r3, #1
   150ca:	69fb      	ldr	r3, [r7, #28]
   150cc:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   150d0:	e7e2      	b.n	15098 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0xf0>
		}
		
		CO->HBcons                          = &COO_HBcons;
   150d2:	4b61      	ldr	r3, [pc, #388]	; (15258 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   150d4:	681b      	ldr	r3, [r3, #0]
   150d6:	4a70      	ldr	r2, [pc, #448]	; (15298 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f0>)
   150d8:	639a      	str	r2, [r3, #56]	; 0x38
		CO_HBcons_monitoredNodes            = &COO_HBcons_monitoredNodes[0];
   150da:	4b70      	ldr	r3, [pc, #448]	; (1529c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f4>)
   150dc:	4a70      	ldr	r2, [pc, #448]	; (152a0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2f8>)
   150de:	601a      	str	r2, [r3, #0]

	if(errCnt != 0) return CO_ERROR_OUT_OF_MEMORY;
	#endif


	CO->CANmodule[0]->CANnormal = false;
   150e0:	4b5d      	ldr	r3, [pc, #372]	; (15258 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   150e2:	681b      	ldr	r3, [r3, #0]
   150e4:	681b      	ldr	r3, [r3, #0]
   150e6:	2200      	movs	r2, #0
   150e8:	751a      	strb	r2, [r3, #20]
	CO_CANsetConfigurationMode(coCanDescr);
   150ea:	69fa      	ldr	r2, [r7, #28]
   150ec:	69fb      	ldr	r3, [r7, #28]
   150ee:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   150f2:	4619      	mov	r1, r3
   150f4:	4610      	mov	r0, r2
   150f6:	4b6b      	ldr	r3, [pc, #428]	; (152a4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2fc>)
   150f8:	4798      	blx	r3

	/* Verify CANopen Node-ID */
	if(nodeId<1 || nodeId>127)
   150fa:	7dfb      	ldrb	r3, [r7, #23]
   150fc:	2b00      	cmp	r3, #0
   150fe:	dd02      	ble.n	15106 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x15e>
   15100:	7dfb      	ldrb	r3, [r7, #23]
   15102:	2b7f      	cmp	r3, #127	; 0x7f
   15104:	dd05      	ble.n	15112 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x16a>
	{
		CO_delete();
   15106:	69f8      	ldr	r0, [r7, #28]
   15108:	4b67      	ldr	r3, [pc, #412]	; (152a8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
   1510a:	4798      	blx	r3
		return CO_ERROR_PARAMETERS;
   1510c:	f06f 030b 	mvn.w	r3, #11
   15110:	e2fc      	b.n	1570c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	}


	err = CANmodule_init(
   15112:	69f8      	ldr	r0, [r7, #28]
   15114:	4b50      	ldr	r3, [pc, #320]	; (15258 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   15116:	681b      	ldr	r3, [r3, #0]
   15118:	6819      	ldr	r1, [r3, #0]
   1511a:	69fb      	ldr	r3, [r7, #28]
   1511c:	f8d3 415c 	ldr.w	r4, [r3, #348]	; 0x15c
   15120:	4b50      	ldr	r3, [pc, #320]	; (15264 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2bc>)
   15122:	681d      	ldr	r5, [r3, #0]
   15124:	4b51      	ldr	r3, [pc, #324]	; (1526c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2c4>)
   15126:	681b      	ldr	r3, [r3, #0]
   15128:	693a      	ldr	r2, [r7, #16]
   1512a:	9203      	str	r2, [sp, #12]
   1512c:	2209      	movs	r2, #9
   1512e:	9202      	str	r2, [sp, #8]
   15130:	9301      	str	r3, [sp, #4]
   15132:	230b      	movs	r3, #11
   15134:	9300      	str	r3, [sp, #0]
   15136:	462b      	mov	r3, r5
   15138:	4622      	mov	r2, r4
   1513a:	4c5c      	ldr	r4, [pc, #368]	; (152ac <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x304>)
   1513c:	47a0      	blx	r4
   1513e:	4603      	mov	r3, r0
   15140:	461a      	mov	r2, r3
   15142:	69fb      	ldr	r3, [r7, #28]
   15144:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
	CO_RXCAN_NO_MSGS,
	CO_CANmodule_txArray0,
	CO_TXCAN_NO_MSGS,
	bitRate);

	if(err){CO_delete(); return err;}
   15148:	69fb      	ldr	r3, [r7, #28]
   1514a:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   1514e:	2b00      	cmp	r3, #0
   15150:	d006      	beq.n	15160 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1b8>
   15152:	69f8      	ldr	r0, [r7, #28]
   15154:	4b54      	ldr	r3, [pc, #336]	; (152a8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x300>)
   15156:	4798      	blx	r3
   15158:	69fb      	ldr	r3, [r7, #28]
   1515a:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   1515e:	e2d5      	b.n	1570c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>

	for (i=0; i<CO_NO_SDO_SERVER; i++)
   15160:	69fb      	ldr	r3, [r7, #28]
   15162:	2200      	movs	r2, #0
   15164:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   15168:	69fb      	ldr	r3, [r7, #28]
   1516a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   1516e:	2b00      	cmp	r3, #0
   15170:	f040 80a4 	bne.w	152bc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x314>
	{
		uint32_t COB_IDClientToServer;
		uint32_t COB_IDServerToClient;
		if(i==0){
   15174:	69fb      	ldr	r3, [r7, #28]
   15176:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   1517a:	2b00      	cmp	r3, #0
   1517c:	d108      	bne.n	15190 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1e8>
			/*Default SDO server must be located at first index*/
			COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
   1517e:	7dfb      	ldrb	r3, [r7, #23]
   15180:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
   15184:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = CO_CAN_ID_TSDO + nodeId;
   15186:	7dfb      	ldrb	r3, [r7, #23]
   15188:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
   1518c:	62bb      	str	r3, [r7, #40]	; 0x28
   1518e:	e017      	b.n	151c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x218>
			}else{
			COB_IDClientToServer = OD_SDOServerParameter[i].COB_IDClientToServer;
   15190:	69fb      	ldr	r3, [r7, #28]
   15192:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   15196:	4946      	ldr	r1, [pc, #280]	; (152b0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
   15198:	4613      	mov	r3, r2
   1519a:	005b      	lsls	r3, r3, #1
   1519c:	4413      	add	r3, r2
   1519e:	009b      	lsls	r3, r3, #2
   151a0:	440b      	add	r3, r1
   151a2:	3364      	adds	r3, #100	; 0x64
   151a4:	681b      	ldr	r3, [r3, #0]
   151a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			COB_IDServerToClient = OD_SDOServerParameter[i].COB_IDServerToClient;
   151a8:	69fb      	ldr	r3, [r7, #28]
   151aa:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   151ae:	4940      	ldr	r1, [pc, #256]	; (152b0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x308>)
   151b0:	4613      	mov	r3, r2
   151b2:	005b      	lsls	r3, r3, #1
   151b4:	4413      	add	r3, r2
   151b6:	009b      	lsls	r3, r3, #2
   151b8:	440b      	add	r3, r1
   151ba:	3368      	adds	r3, #104	; 0x68
   151bc:	681b      	ldr	r3, [r3, #0]
   151be:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		err = CO_SDO_init(
   151c0:	69fb      	ldr	r3, [r7, #28]
   151c2:	f103 0e04 	add.w	lr, r3, #4
   151c6:	4b24      	ldr	r3, [pc, #144]	; (15258 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   151c8:	681a      	ldr	r2, [r3, #0]
			CO->SDO[i],
   151ca:	69fb      	ldr	r3, [r7, #28]
   151cc:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
		err = CO_SDO_init(
   151d0:	009b      	lsls	r3, r3, #2
   151d2:	4413      	add	r3, r2
   151d4:	685b      	ldr	r3, [r3, #4]
   151d6:	60fb      	str	r3, [r7, #12]
			COB_IDClientToServer,
			COB_IDServerToClient,
			OD_H1200_SDO_SERVER_PARAM+i,
   151d8:	69fb      	ldr	r3, [r7, #28]
   151da:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
		err = CO_SDO_init(
   151de:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
			i==0 ? 0 : CO->SDO[0],
   151e2:	69fb      	ldr	r3, [r7, #28]
   151e4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
		err = CO_SDO_init(
   151e8:	2b00      	cmp	r3, #0
   151ea:	d003      	beq.n	151f4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24c>
			i==0 ? 0 : CO->SDO[0],
   151ec:	4b1a      	ldr	r3, [pc, #104]	; (15258 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   151ee:	681b      	ldr	r3, [r3, #0]
		err = CO_SDO_init(
   151f0:	685b      	ldr	r3, [r3, #4]
   151f2:	e000      	b.n	151f6 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x24e>
   151f4:	2300      	movs	r3, #0
   151f6:	4920      	ldr	r1, [pc, #128]	; (15278 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2d0>)
   151f8:	6809      	ldr	r1, [r1, #0]
   151fa:	4817      	ldr	r0, [pc, #92]	; (15258 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   151fc:	6800      	ldr	r0, [r0, #0]
   151fe:	6800      	ldr	r0, [r0, #0]
			&CO_ObjDict[0],
			CO_OD_NoOfElements,
			CO_SDO_ODExtensions,
			nodeId,
			CO->CANmodule[0],
			CO_RXCAN_SDO_SRV+i,
   15200:	69fc      	ldr	r4, [r7, #28]
   15202:	f8d4 4168 	ldr.w	r4, [r4, #360]	; 0x168
		err = CO_SDO_init(
   15206:	3406      	adds	r4, #6
   15208:	4d13      	ldr	r5, [pc, #76]	; (15258 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x2b0>)
   1520a:	682d      	ldr	r5, [r5, #0]
   1520c:	682d      	ldr	r5, [r5, #0]
			CO->CANmodule[0],
			CO_TXCAN_SDO_SRV+i);
   1520e:	69fe      	ldr	r6, [r7, #28]
   15210:	f8d6 6168 	ldr.w	r6, [r6, #360]	; 0x168
		err = CO_SDO_init(
   15214:	3607      	adds	r6, #7
   15216:	9609      	str	r6, [sp, #36]	; 0x24
   15218:	9508      	str	r5, [sp, #32]
   1521a:	9407      	str	r4, [sp, #28]
   1521c:	9006      	str	r0, [sp, #24]
   1521e:	7df8      	ldrb	r0, [r7, #23]
   15220:	9005      	str	r0, [sp, #20]
   15222:	9104      	str	r1, [sp, #16]
   15224:	2137      	movs	r1, #55	; 0x37
   15226:	9103      	str	r1, [sp, #12]
   15228:	4922      	ldr	r1, [pc, #136]	; (152b4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x30c>)
   1522a:	9102      	str	r1, [sp, #8]
   1522c:	9301      	str	r3, [sp, #4]
   1522e:	9200      	str	r2, [sp, #0]
   15230:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15234:	68f9      	ldr	r1, [r7, #12]
   15236:	4670      	mov	r0, lr
   15238:	4c1f      	ldr	r4, [pc, #124]	; (152b8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x310>)
   1523a:	47a0      	blx	r4
   1523c:	4603      	mov	r3, r0
   1523e:	461a      	mov	r2, r3
   15240:	69fb      	ldr	r3, [r7, #28]
   15242:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
	for (i=0; i<CO_NO_SDO_SERVER; i++)
   15246:	69fb      	ldr	r3, [r7, #28]
   15248:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   1524c:	1c5a      	adds	r2, r3, #1
   1524e:	69fb      	ldr	r3, [r7, #28]
   15250:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   15254:	e788      	b.n	15168 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x1c0>
   15256:	bf00      	nop
   15258:	2000d1a8 	.word	0x2000d1a8
   1525c:	2000d16c 	.word	0x2000d16c
   15260:	2000d1bc 	.word	0x2000d1bc
   15264:	2000d1ac 	.word	0x2000d1ac
   15268:	2000d1e0 	.word	0x2000d1e0
   1526c:	2000d1b0 	.word	0x2000d1b0
   15270:	2000d290 	.word	0x2000d290
   15274:	2000d320 	.word	0x2000d320
   15278:	2000d1b4 	.word	0x2000d1b4
   1527c:	2000d3a8 	.word	0x2000d3a8
   15280:	2000d63c 	.word	0x2000d63c
   15284:	2000d6a8 	.word	0x2000d6a8
   15288:	2000d6c4 	.word	0x2000d6c4
   1528c:	2000d6e8 	.word	0x2000d6e8
   15290:	2000d724 	.word	0x2000d724
   15294:	2000d8a4 	.word	0x2000d8a4
   15298:	2000da04 	.word	0x2000da04
   1529c:	2000d1b8 	.word	0x2000d1b8
   152a0:	2000da1c 	.word	0x2000da1c
   152a4:	000159b5 	.word	0x000159b5
   152a8:	00015739 	.word	0x00015739
   152ac:	00015a19 	.word	0x00015a19
   152b0:	2000039c 	.word	0x2000039c
   152b4:	0001bd5c 	.word	0x0001bd5c
   152b8:	00017aa9 	.word	0x00017aa9
	}

	if(err){CO_delete(); return err;}
   152bc:	69fb      	ldr	r3, [r7, #28]
   152be:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   152c2:	2b00      	cmp	r3, #0
   152c4:	d006      	beq.n	152d4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x32c>
   152c6:	69f8      	ldr	r0, [r7, #28]
   152c8:	4b7c      	ldr	r3, [pc, #496]	; (154bc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
   152ca:	4798      	blx	r3
   152cc:	69fb      	ldr	r3, [r7, #28]
   152ce:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   152d2:	e21b      	b.n	1570c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	err = EM_Init(
   152d4:	69fb      	ldr	r3, [r7, #28]
   152d6:	1d18      	adds	r0, r3, #4
   152d8:	4b79      	ldr	r3, [pc, #484]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   152da:	681b      	ldr	r3, [r3, #0]
   152dc:	6899      	ldr	r1, [r3, #8]
   152de:	4b78      	ldr	r3, [pc, #480]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   152e0:	681b      	ldr	r3, [r3, #0]
   152e2:	68dc      	ldr	r4, [r3, #12]
   152e4:	4b76      	ldr	r3, [pc, #472]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   152e6:	681b      	ldr	r3, [r3, #0]
   152e8:	685d      	ldr	r5, [r3, #4]
   152ea:	4b75      	ldr	r3, [pc, #468]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   152ec:	681b      	ldr	r3, [r3, #0]
   152ee:	681b      	ldr	r3, [r3, #0]
			&OD_errorRegister,
			&OD_preDefinedErrorField[0],
			ODL_preDefinedErrorField_arrayLength,
			CO->CANmodule[0],
			CO_TXCAN_EMERG,
			CO_CAN_ID_EMERGENCY + (uint32_t)nodeId);
   152f0:	7dfa      	ldrb	r2, [r7, #23]
	err = EM_Init(
   152f2:	3280      	adds	r2, #128	; 0x80
   152f4:	9207      	str	r2, [sp, #28]
   152f6:	2202      	movs	r2, #2
   152f8:	9206      	str	r2, [sp, #24]
   152fa:	9305      	str	r3, [sp, #20]
   152fc:	2308      	movs	r3, #8
   152fe:	9304      	str	r3, [sp, #16]
   15300:	4b70      	ldr	r3, [pc, #448]	; (154c4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x51c>)
   15302:	9303      	str	r3, [sp, #12]
   15304:	4b70      	ldr	r3, [pc, #448]	; (154c8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x520>)
   15306:	9302      	str	r3, [sp, #8]
   15308:	230a      	movs	r3, #10
   1530a:	9301      	str	r3, [sp, #4]
   1530c:	4b6f      	ldr	r3, [pc, #444]	; (154cc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x524>)
   1530e:	9300      	str	r3, [sp, #0]
   15310:	462b      	mov	r3, r5
   15312:	4622      	mov	r2, r4
   15314:	4c6e      	ldr	r4, [pc, #440]	; (154d0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x528>)
   15316:	47a0      	blx	r4
   15318:	4603      	mov	r3, r0
   1531a:	461a      	mov	r2, r3
   1531c:	69fb      	ldr	r3, [r7, #28]
   1531e:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c

	if(err){CO_delete(); return err;}
   15322:	69fb      	ldr	r3, [r7, #28]
   15324:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   15328:	2b00      	cmp	r3, #0
   1532a:	d006      	beq.n	1533a <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x392>
   1532c:	69f8      	ldr	r0, [r7, #28]
   1532e:	4b63      	ldr	r3, [pc, #396]	; (154bc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
   15330:	4798      	blx	r3
   15332:	69fb      	ldr	r3, [r7, #28]
   15334:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   15338:	e1e8      	b.n	1570c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	err = NMT_Init(
   1533a:	4b61      	ldr	r3, [pc, #388]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   1533c:	681b      	ldr	r3, [r3, #0]
   1533e:	6918      	ldr	r0, [r3, #16]
   15340:	4b5f      	ldr	r3, [pc, #380]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   15342:	681b      	ldr	r3, [r3, #0]
   15344:	68dc      	ldr	r4, [r3, #12]
   15346:	4b5e      	ldr	r3, [pc, #376]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   15348:	681b      	ldr	r3, [r3, #0]
   1534a:	681b      	ldr	r3, [r3, #0]
   1534c:	4a5c      	ldr	r2, [pc, #368]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   1534e:	6812      	ldr	r2, [r2, #0]
   15350:	6812      	ldr	r2, [r2, #0]
	CO->CANmodule[0],
	CO_RXCAN_NMT,
	CO_CAN_ID_NMT_SERVICE,
	CO->CANmodule[0],
	CO_TXCAN_HB,
	CO_CAN_ID_HEARTBEAT + nodeId);
   15352:	7df9      	ldrb	r1, [r7, #23]
   15354:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
	err = NMT_Init(
   15358:	7dfd      	ldrb	r5, [r7, #23]
   1535a:	9106      	str	r1, [sp, #24]
   1535c:	2108      	movs	r1, #8
   1535e:	9105      	str	r1, [sp, #20]
   15360:	9204      	str	r2, [sp, #16]
   15362:	2200      	movs	r2, #0
   15364:	9203      	str	r2, [sp, #12]
   15366:	2200      	movs	r2, #0
   15368:	9202      	str	r2, [sp, #8]
   1536a:	9301      	str	r3, [sp, #4]
   1536c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   15370:	9300      	str	r3, [sp, #0]
   15372:	462b      	mov	r3, r5
   15374:	4622      	mov	r2, r4
   15376:	4601      	mov	r1, r0
   15378:	69f8      	ldr	r0, [r7, #28]
   1537a:	4c56      	ldr	r4, [pc, #344]	; (154d4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x52c>)
   1537c:	47a0      	blx	r4
   1537e:	4603      	mov	r3, r0
   15380:	461a      	mov	r2, r3
   15382:	69fb      	ldr	r3, [r7, #28]
   15384:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c

	if(err){CO_delete(); return err;}
   15388:	69fb      	ldr	r3, [r7, #28]
   1538a:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   1538e:	2b00      	cmp	r3, #0
   15390:	d006      	beq.n	153a0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x3f8>
   15392:	69f8      	ldr	r0, [r7, #28]
   15394:	4b49      	ldr	r3, [pc, #292]	; (154bc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
   15396:	4798      	blx	r3
   15398:	69fb      	ldr	r3, [r7, #28]
   1539a:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   1539e:	e1b5      	b.n	1570c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>


	if (nodeId==1)
   153a0:	7dfb      	ldrb	r3, [r7, #23]
   153a2:	2b01      	cmp	r3, #1
   153a4:	d10d      	bne.n	153c2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x41a>
	{
			NMTM_txBuff = CAN_Tx_BufferInit(/* return pointer to 8-byte CAN data buffer, which should be populated */
   153a6:	69f8      	ldr	r0, [r7, #28]
   153a8:	2300      	movs	r3, #0
   153aa:	9301      	str	r3, [sp, #4]
   153ac:	2302      	movs	r3, #2
   153ae:	9300      	str	r3, [sp, #0]
   153b0:	2300      	movs	r3, #0
   153b2:	2200      	movs	r2, #0
   153b4:	2100      	movs	r1, #0
   153b6:	4c48      	ldr	r4, [pc, #288]	; (154d8 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x530>)
   153b8:	47a0      	blx	r4
   153ba:	4602      	mov	r2, r0
   153bc:	69fb      	ldr	r3, [r7, #28]
   153be:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

	}else{

	}
       
	err = SYNC_Init(
   153c2:	69fb      	ldr	r3, [r7, #28]
   153c4:	f103 060c 	add.w	r6, r3, #12
   153c8:	4b3d      	ldr	r3, [pc, #244]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   153ca:	681b      	ldr	r3, [r3, #0]
   153cc:	695b      	ldr	r3, [r3, #20]
   153ce:	60fb      	str	r3, [r7, #12]
   153d0:	4b3b      	ldr	r3, [pc, #236]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   153d2:	681b      	ldr	r3, [r3, #0]
   153d4:	689a      	ldr	r2, [r3, #8]
   153d6:	60ba      	str	r2, [r7, #8]
   153d8:	4b39      	ldr	r3, [pc, #228]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   153da:	681b      	ldr	r3, [r3, #0]
   153dc:	6858      	ldr	r0, [r3, #4]
   153de:	6078      	str	r0, [r7, #4]
	CO->SYNC,
	CO->em,
	CO->SDO[0],
	&CO->NMT->operatingState,
   153e0:	4b37      	ldr	r3, [pc, #220]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   153e2:	681b      	ldr	r3, [r3, #0]
   153e4:	691b      	ldr	r3, [r3, #16]
	err = SYNC_Init(
   153e6:	603b      	str	r3, [r7, #0]
   153e8:	4b3c      	ldr	r3, [pc, #240]	; (154dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
   153ea:	689b      	ldr	r3, [r3, #8]
   153ec:	4a3b      	ldr	r2, [pc, #236]	; (154dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
   153ee:	68d2      	ldr	r2, [r2, #12]
   153f0:	493a      	ldr	r1, [pc, #232]	; (154dc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x534>)
   153f2:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
   153f6:	4832      	ldr	r0, [pc, #200]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   153f8:	6800      	ldr	r0, [r0, #0]
   153fa:	6800      	ldr	r0, [r0, #0]
   153fc:	4c30      	ldr	r4, [pc, #192]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   153fe:	6824      	ldr	r4, [r4, #0]
   15400:	6824      	ldr	r4, [r4, #0]
   15402:	2501      	movs	r5, #1
   15404:	9507      	str	r5, [sp, #28]
   15406:	9406      	str	r4, [sp, #24]
   15408:	2401      	movs	r4, #1
   1540a:	9405      	str	r4, [sp, #20]
   1540c:	9004      	str	r0, [sp, #16]
   1540e:	9103      	str	r1, [sp, #12]
   15410:	9202      	str	r2, [sp, #8]
   15412:	9301      	str	r3, [sp, #4]
   15414:	683c      	ldr	r4, [r7, #0]
   15416:	9400      	str	r4, [sp, #0]
   15418:	687b      	ldr	r3, [r7, #4]
   1541a:	68ba      	ldr	r2, [r7, #8]
   1541c:	68f9      	ldr	r1, [r7, #12]
   1541e:	4630      	mov	r0, r6
   15420:	4c2f      	ldr	r4, [pc, #188]	; (154e0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x538>)
   15422:	47a0      	blx	r4
   15424:	4603      	mov	r3, r0
   15426:	461a      	mov	r2, r3
   15428:	69fb      	ldr	r3, [r7, #28]
   1542a:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
	CO->CANmodule[0],
	CO_RXCAN_SYNC,
	CO->CANmodule[0],
	CO_TXCAN_SYNC);

	if(err){CO_delete(); return err;}
   1542e:	69fb      	ldr	r3, [r7, #28]
   15430:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   15434:	2b00      	cmp	r3, #0
   15436:	d006      	beq.n	15446 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x49e>
   15438:	69f8      	ldr	r0, [r7, #28]
   1543a:	4b20      	ldr	r3, [pc, #128]	; (154bc <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x514>)
   1543c:	4798      	blx	r3
   1543e:	69fb      	ldr	r3, [r7, #28]
   15440:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   15444:	e162      	b.n	1570c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>





	for(i=0; i<CO_NO_RPDO; i++){
   15446:	69fb      	ldr	r3, [r7, #28]
   15448:	2200      	movs	r2, #0
   1544a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   1544e:	69fb      	ldr	r3, [r7, #28]
   15450:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   15454:	2b03      	cmp	r3, #3
   15456:	f200 8097 	bhi.w	15588 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5e0>
		CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
   1545a:	4b19      	ldr	r3, [pc, #100]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   1545c:	681b      	ldr	r3, [r3, #0]
   1545e:	681b      	ldr	r3, [r3, #0]
   15460:	627b      	str	r3, [r7, #36]	; 0x24
		CANdevRxIdx = CO_RXCAN_RPDO + i;
   15462:	69fb      	ldr	r3, [r7, #28]
   15464:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   15468:	1c9a      	adds	r2, r3, #2
   1546a:	69fb      	ldr	r3, [r7, #28]
   1546c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

		err = CO_RPDO_init(
   15470:	69fb      	ldr	r3, [r7, #28]
   15472:	f103 0e14 	add.w	lr, r3, #20
   15476:	4b12      	ldr	r3, [pc, #72]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   15478:	681b      	ldr	r3, [r3, #0]
		CO->RPDO[i],
   1547a:	69fa      	ldr	r2, [r7, #28]
   1547c:	f8d2 2168 	ldr.w	r2, [r2, #360]	; 0x168
		err = CO_RPDO_init(
   15480:	3206      	adds	r2, #6
   15482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15486:	60fb      	str	r3, [r7, #12]
   15488:	4b0d      	ldr	r3, [pc, #52]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   1548a:	681b      	ldr	r3, [r3, #0]
   1548c:	689b      	ldr	r3, [r3, #8]
   1548e:	60bb      	str	r3, [r7, #8]
   15490:	4b0b      	ldr	r3, [pc, #44]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   15492:	681b      	ldr	r3, [r3, #0]
   15494:	685b      	ldr	r3, [r3, #4]
   15496:	607b      	str	r3, [r7, #4]
   15498:	4b09      	ldr	r3, [pc, #36]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   1549a:	681b      	ldr	r3, [r3, #0]
   1549c:	6958      	ldr	r0, [r3, #20]
		CO->em,
		CO->SDO[0],
		CO->SYNC,
		&CO->NMT->operatingState,
   1549e:	4b08      	ldr	r3, [pc, #32]	; (154c0 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x518>)
   154a0:	681b      	ldr	r3, [r3, #0]
   154a2:	691b      	ldr	r3, [r3, #16]
		err = CO_RPDO_init(
   154a4:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
   154a6:	69fb      	ldr	r3, [r7, #28]
   154a8:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
		err = CO_RPDO_init(
   154ac:	2b03      	cmp	r3, #3
   154ae:	d819      	bhi.n	154e4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x53c>
		((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
   154b0:	69fb      	ldr	r3, [r7, #28]
   154b2:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
		err = CO_RPDO_init(
   154b6:	3302      	adds	r3, #2
   154b8:	021a      	lsls	r2, r3, #8
   154ba:	e014      	b.n	154e6 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x53e>
   154bc:	00015739 	.word	0x00015739
   154c0:	2000d1a8 	.word	0x2000d1a8
   154c4:	2000022c 	.word	0x2000022c
   154c8:	20000224 	.word	0x20000224
   154cc:	20000254 	.word	0x20000254
   154d0:	00016169 	.word	0x00016169
   154d4:	000167bd 	.word	0x000167bd
   154d8:	00015cb5 	.word	0x00015cb5
   154dc:	2000039c 	.word	0x2000039c
   154e0:	00018279 	.word	0x00018279
   154e4:	2200      	movs	r2, #0
		0,
		(CO_RPDOCommPar_t*) &OD_RPDOCommunicationParameter[i],
   154e6:	69fb      	ldr	r3, [r7, #28]
   154e8:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
   154ec:	460b      	mov	r3, r1
   154ee:	005b      	lsls	r3, r3, #1
   154f0:	440b      	add	r3, r1
   154f2:	009b      	lsls	r3, r3, #2
   154f4:	3368      	adds	r3, #104	; 0x68
   154f6:	4987      	ldr	r1, [pc, #540]	; (15714 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
   154f8:	440b      	add	r3, r1
   154fa:	1d1c      	adds	r4, r3, #4
		(CO_RPDOMapPar_t*) &OD_RPDOMappingParameter[i],
   154fc:	69fb      	ldr	r3, [r7, #28]
   154fe:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
   15502:	460b      	mov	r3, r1
   15504:	00db      	lsls	r3, r3, #3
   15506:	440b      	add	r3, r1
   15508:	009b      	lsls	r3, r3, #2
   1550a:	3398      	adds	r3, #152	; 0x98
   1550c:	4981      	ldr	r1, [pc, #516]	; (15714 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
   1550e:	440b      	add	r3, r1
   15510:	3304      	adds	r3, #4
		OD_H1400_RXPDO_1_PARAM+i,
   15512:	69f9      	ldr	r1, [r7, #28]
   15514:	f8d1 1168 	ldr.w	r1, [r1, #360]	; 0x168
		err = CO_RPDO_init(
   15518:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
		OD_H1600_RXPDO_1_MAPPING+i,
   1551c:	69fd      	ldr	r5, [r7, #28]
   1551e:	f8d5 5168 	ldr.w	r5, [r5, #360]	; 0x168
		err = CO_RPDO_init(
   15522:	f505 55b0 	add.w	r5, r5, #5632	; 0x1600
   15526:	69fe      	ldr	r6, [r7, #28]
   15528:	f8d6 6160 	ldr.w	r6, [r6, #352]	; 0x160
   1552c:	960a      	str	r6, [sp, #40]	; 0x28
   1552e:	6a7e      	ldr	r6, [r7, #36]	; 0x24
   15530:	9609      	str	r6, [sp, #36]	; 0x24
   15532:	9508      	str	r5, [sp, #32]
   15534:	9107      	str	r1, [sp, #28]
   15536:	9306      	str	r3, [sp, #24]
   15538:	9405      	str	r4, [sp, #20]
   1553a:	2300      	movs	r3, #0
   1553c:	9304      	str	r3, [sp, #16]
   1553e:	9203      	str	r2, [sp, #12]
   15540:	7dfb      	ldrb	r3, [r7, #23]
   15542:	9302      	str	r3, [sp, #8]
   15544:	683b      	ldr	r3, [r7, #0]
   15546:	9301      	str	r3, [sp, #4]
   15548:	9000      	str	r0, [sp, #0]
   1554a:	687b      	ldr	r3, [r7, #4]
   1554c:	68ba      	ldr	r2, [r7, #8]
   1554e:	68f9      	ldr	r1, [r7, #12]
   15550:	4670      	mov	r0, lr
   15552:	4c71      	ldr	r4, [pc, #452]	; (15718 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x770>)
   15554:	47a0      	blx	r4
   15556:	4603      	mov	r3, r0
   15558:	461a      	mov	r2, r3
   1555a:	69fb      	ldr	r3, [r7, #28]
   1555c:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
		CANdevRx,
		CANdevRxIdx);

		if(err){CO_delete(); return err;}
   15560:	69fb      	ldr	r3, [r7, #28]
   15562:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   15566:	2b00      	cmp	r3, #0
   15568:	d006      	beq.n	15578 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5d0>
   1556a:	69f8      	ldr	r0, [r7, #28]
   1556c:	4b6b      	ldr	r3, [pc, #428]	; (1571c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
   1556e:	4798      	blx	r3
   15570:	69fb      	ldr	r3, [r7, #28]
   15572:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   15576:	e0c9      	b.n	1570c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	for(i=0; i<CO_NO_RPDO; i++){
   15578:	69fb      	ldr	r3, [r7, #28]
   1557a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   1557e:	1c5a      	adds	r2, r3, #1
   15580:	69fb      	ldr	r3, [r7, #28]
   15582:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   15586:	e762      	b.n	1544e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x4a6>
	}


	for(i=0; i<CO_NO_TPDO; i++){
   15588:	69fb      	ldr	r3, [r7, #28]
   1558a:	2200      	movs	r2, #0
   1558c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   15590:	69fb      	ldr	r3, [r7, #28]
   15592:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   15596:	2b03      	cmp	r3, #3
   15598:	d879      	bhi.n	1568e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6e6>
		err = CO_TPDO_init(
   1559a:	69fb      	ldr	r3, [r7, #28]
   1559c:	f103 0e14 	add.w	lr, r3, #20
   155a0:	4b5f      	ldr	r3, [pc, #380]	; (15720 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   155a2:	681b      	ldr	r3, [r3, #0]
		CO->TPDO[i],
   155a4:	69fa      	ldr	r2, [r7, #28]
   155a6:	f8d2 2168 	ldr.w	r2, [r2, #360]	; 0x168
		err = CO_TPDO_init(
   155aa:	320a      	adds	r2, #10
   155ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   155b0:	60fb      	str	r3, [r7, #12]
   155b2:	4b5b      	ldr	r3, [pc, #364]	; (15720 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   155b4:	681b      	ldr	r3, [r3, #0]
   155b6:	689b      	ldr	r3, [r3, #8]
   155b8:	60bb      	str	r3, [r7, #8]
   155ba:	4b59      	ldr	r3, [pc, #356]	; (15720 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   155bc:	681b      	ldr	r3, [r3, #0]
   155be:	685b      	ldr	r3, [r3, #4]
   155c0:	607b      	str	r3, [r7, #4]
		CO->em,
		CO->SDO[0],
		&CO->NMT->operatingState,
   155c2:	4b57      	ldr	r3, [pc, #348]	; (15720 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   155c4:	681b      	ldr	r3, [r3, #0]
   155c6:	691b      	ldr	r3, [r3, #16]
		err = CO_TPDO_init(
   155c8:	603b      	str	r3, [r7, #0]
		nodeId,
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
   155ca:	69fb      	ldr	r3, [r7, #28]
   155cc:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
		err = CO_TPDO_init(
   155d0:	2b03      	cmp	r3, #3
   155d2:	d806      	bhi.n	155e2 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x63a>
		((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
   155d4:	69fb      	ldr	r3, [r7, #28]
   155d6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   155da:	021b      	lsls	r3, r3, #8
		err = CO_TPDO_init(
   155dc:	f503 72c0 	add.w	r2, r3, #384	; 0x180
   155e0:	e000      	b.n	155e4 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x63c>
   155e2:	2200      	movs	r2, #0
		0,
		(CO_TPDOCommPar_t*) &OD_TPDOCommunicationParameter[i],
   155e4:	69fb      	ldr	r3, [r7, #28]
   155e6:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
   155ea:	460b      	mov	r3, r1
   155ec:	00db      	lsls	r3, r3, #3
   155ee:	1a5b      	subs	r3, r3, r1
   155f0:	009b      	lsls	r3, r3, #2
   155f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
   155f6:	4947      	ldr	r1, [pc, #284]	; (15714 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
   155f8:	440b      	add	r3, r1
   155fa:	1d18      	adds	r0, r3, #4
		(CO_TPDOMapPar_t*) &OD_TPDOMappingParameter[i],
   155fc:	69fb      	ldr	r3, [r7, #28]
   155fe:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
   15602:	460b      	mov	r3, r1
   15604:	00db      	lsls	r3, r3, #3
   15606:	440b      	add	r3, r1
   15608:	009b      	lsls	r3, r3, #2
   1560a:	f503 73cc 	add.w	r3, r3, #408	; 0x198
   1560e:	4941      	ldr	r1, [pc, #260]	; (15714 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x76c>)
   15610:	440b      	add	r3, r1
   15612:	3304      	adds	r3, #4
		OD_H1800_TXPDO_1_PARAM+i,
   15614:	69f9      	ldr	r1, [r7, #28]
   15616:	f8d1 1168 	ldr.w	r1, [r1, #360]	; 0x168
		err = CO_TPDO_init(
   1561a:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
		OD_H1A00_TXPDO_1_MAPPING+i,
   1561e:	69fc      	ldr	r4, [r7, #28]
   15620:	f8d4 4168 	ldr.w	r4, [r4, #360]	; 0x168
		err = CO_TPDO_init(
   15624:	f504 54d0 	add.w	r4, r4, #6656	; 0x1a00
   15628:	4d3d      	ldr	r5, [pc, #244]	; (15720 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   1562a:	682d      	ldr	r5, [r5, #0]
   1562c:	682d      	ldr	r5, [r5, #0]
		CO->CANmodule[0],
		CO_TXCAN_TPDO+i);
   1562e:	69fe      	ldr	r6, [r7, #28]
   15630:	f8d6 6168 	ldr.w	r6, [r6, #360]	; 0x168
		err = CO_TPDO_init(
   15634:	3603      	adds	r6, #3
   15636:	9609      	str	r6, [sp, #36]	; 0x24
   15638:	9508      	str	r5, [sp, #32]
   1563a:	9407      	str	r4, [sp, #28]
   1563c:	9106      	str	r1, [sp, #24]
   1563e:	9305      	str	r3, [sp, #20]
   15640:	9004      	str	r0, [sp, #16]
   15642:	2300      	movs	r3, #0
   15644:	9303      	str	r3, [sp, #12]
   15646:	9202      	str	r2, [sp, #8]
   15648:	7dfb      	ldrb	r3, [r7, #23]
   1564a:	9301      	str	r3, [sp, #4]
   1564c:	683b      	ldr	r3, [r7, #0]
   1564e:	9300      	str	r3, [sp, #0]
   15650:	687b      	ldr	r3, [r7, #4]
   15652:	68ba      	ldr	r2, [r7, #8]
   15654:	68f9      	ldr	r1, [r7, #12]
   15656:	4670      	mov	r0, lr
   15658:	4c32      	ldr	r4, [pc, #200]	; (15724 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x77c>)
   1565a:	47a0      	blx	r4
   1565c:	4603      	mov	r3, r0
   1565e:	461a      	mov	r2, r3
   15660:	69fb      	ldr	r3, [r7, #28]
   15662:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
		if(err){CO_delete(); return err;}
   15666:	69fb      	ldr	r3, [r7, #28]
   15668:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   1566c:	2b00      	cmp	r3, #0
   1566e:	d006      	beq.n	1567e <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x6d6>
   15670:	69f8      	ldr	r0, [r7, #28]
   15672:	4b2a      	ldr	r3, [pc, #168]	; (1571c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
   15674:	4798      	blx	r3
   15676:	69fb      	ldr	r3, [r7, #28]
   15678:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   1567c:	e046      	b.n	1570c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
	for(i=0; i<CO_NO_TPDO; i++){
   1567e:	69fb      	ldr	r3, [r7, #28]
   15680:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
   15684:	1c5a      	adds	r2, r3, #1
   15686:	69fb      	ldr	r3, [r7, #28]
   15688:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
   1568c:	e780      	b.n	15590 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x5e8>
	}

	HB_SetNode(coNode);
   1568e:	69fb      	ldr	r3, [r7, #28]
   15690:	f103 0220 	add.w	r2, r3, #32
   15694:	69fb      	ldr	r3, [r7, #28]
   15696:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
   1569a:	4619      	mov	r1, r3
   1569c:	4610      	mov	r0, r2
   1569e:	4b22      	ldr	r3, [pc, #136]	; (15728 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x780>)
   156a0:	4798      	blx	r3
	err = CO_HBconsumer_init(
   156a2:	69fb      	ldr	r3, [r7, #28]
   156a4:	f103 0020 	add.w	r0, r3, #32
   156a8:	4b1d      	ldr	r3, [pc, #116]	; (15720 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   156aa:	681b      	ldr	r3, [r3, #0]
   156ac:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   156ae:	4b1c      	ldr	r3, [pc, #112]	; (15720 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   156b0:	681b      	ldr	r3, [r3, #0]
   156b2:	689d      	ldr	r5, [r3, #8]
   156b4:	4b1a      	ldr	r3, [pc, #104]	; (15720 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   156b6:	681b      	ldr	r3, [r3, #0]
   156b8:	685e      	ldr	r6, [r3, #4]
   156ba:	4b1c      	ldr	r3, [pc, #112]	; (1572c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x784>)
   156bc:	681b      	ldr	r3, [r3, #0]
   156be:	4a18      	ldr	r2, [pc, #96]	; (15720 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   156c0:	6812      	ldr	r2, [r2, #0]
   156c2:	6812      	ldr	r2, [r2, #0]
   156c4:	2107      	movs	r1, #7
   156c6:	9104      	str	r1, [sp, #16]
   156c8:	9203      	str	r2, [sp, #12]
   156ca:	2204      	movs	r2, #4
   156cc:	9202      	str	r2, [sp, #8]
   156ce:	9301      	str	r3, [sp, #4]
   156d0:	4b17      	ldr	r3, [pc, #92]	; (15730 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x788>)
   156d2:	9300      	str	r3, [sp, #0]
   156d4:	4633      	mov	r3, r6
   156d6:	462a      	mov	r2, r5
   156d8:	4621      	mov	r1, r4
   156da:	4c16      	ldr	r4, [pc, #88]	; (15734 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x78c>)
   156dc:	47a0      	blx	r4
   156de:	4603      	mov	r3, r0
   156e0:	461a      	mov	r2, r3
   156e2:	69fb      	ldr	r3, [r7, #28]
   156e4:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
	CO_HBcons_monitoredNodes,
	CO_NO_HB_CONS,
	CO->CANmodule[0],
	CO_RXCAN_CONS_HB);

	if(err){CO_delete(); return err;}
   156e8:	69fb      	ldr	r3, [r7, #28]
   156ea:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   156ee:	2b00      	cmp	r3, #0
   156f0:	d006      	beq.n	15700 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x758>
   156f2:	69f8      	ldr	r0, [r7, #28]
   156f4:	4b09      	ldr	r3, [pc, #36]	; (1571c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x774>)
   156f6:	4798      	blx	r3
   156f8:	69fb      	ldr	r3, [r7, #28]
   156fa:	f993 316c 	ldrsb.w	r3, [r3, #364]	; 0x16c
   156fe:	e005      	b.n	1570c <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x764>
		OD_INDEX_TRACE_CONFIG + i,
		OD_INDEX_TRACE + i);
	}
	#endif

	ptrCO=CO;
   15700:	4b07      	ldr	r3, [pc, #28]	; (15720 <_ZN8CO_Class7CO_initEP20can_async_descriptorhm+0x778>)
   15702:	681a      	ldr	r2, [r3, #0]
   15704:	69fb      	ldr	r3, [r7, #28]
   15706:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	return CO_ERROR_NO;
   1570a:	2300      	movs	r3, #0
}
   1570c:	4618      	mov	r0, r3
   1570e:	3734      	adds	r7, #52	; 0x34
   15710:	46bd      	mov	sp, r7
   15712:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15714:	2000039c 	.word	0x2000039c
   15718:	000174a1 	.word	0x000174a1
   1571c:	00015739 	.word	0x00015739
   15720:	2000d1a8 	.word	0x2000d1a8
   15724:	000175a9 	.word	0x000175a9
   15728:	000166c5 	.word	0x000166c5
   1572c:	2000d1b8 	.word	0x2000d1b8
   15730:	200003cc 	.word	0x200003cc
   15734:	000165f5 	.word	0x000165f5

00015738 <_ZN8CO_Class9CO_deleteEv>:


/******************************************************************************/
void CO_Class::CO_delete(void){
   15738:	b580      	push	{r7, lr}
   1573a:	b082      	sub	sp, #8
   1573c:	af00      	add	r7, sp, #0
   1573e:	6078      	str	r0, [r7, #4]
	#ifndef CO_USE_GLOBALS
	uint32_t i;
	#endif

	CO_CANsetConfigurationMode(coCanDescr);
   15740:	687a      	ldr	r2, [r7, #4]
   15742:	687b      	ldr	r3, [r7, #4]
   15744:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   15748:	4619      	mov	r1, r3
   1574a:	4610      	mov	r0, r2
   1574c:	4b04      	ldr	r3, [pc, #16]	; (15760 <_ZN8CO_Class9CO_deleteEv+0x28>)
   1574e:	4798      	blx	r3
	CANmodule_Disable();
   15750:	687b      	ldr	r3, [r7, #4]
   15752:	4618      	mov	r0, r3
   15754:	4b03      	ldr	r3, [pc, #12]	; (15764 <_ZN8CO_Class9CO_deleteEv+0x2c>)
   15756:	4798      	blx	r3
		free(CO_CANmodule_txArray0);
		free(CO_CANmodule_rxArray0);
		free(CO->CANmodule[0]);
		CO = NULL;
	#endif
}
   15758:	bf00      	nop
   1575a:	3708      	adds	r7, #8
   1575c:	46bd      	mov	sp, r7
   1575e:	bd80      	pop	{r7, pc}
   15760:	000159b5 	.word	0x000159b5
   15764:	00015b7d 	.word	0x00015b7d

00015768 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
   15768:	b480      	push	{r7}
   1576a:	b083      	sub	sp, #12
   1576c:	af00      	add	r7, sp, #0
   1576e:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
   15770:	687b      	ldr	r3, [r7, #4]
   15772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
   15774:	4618      	mov	r0, r3
   15776:	370c      	adds	r7, #12
   15778:	46bd      	mov	sp, r7
   1577a:	bc80      	pop	{r7}
   1577c:	4770      	bx	lr
	...

00015780 <_ZL14CO_rx_callbackP20can_async_descriptor>:
static uint8_t		local_error_flags_array[2];
static uint16_t	local_compressor_temperatures[3];


static void CO_rx_callback(struct can_async_descriptor *const descr)
{
   15780:	b580      	push	{r7, lr}
   15782:	b082      	sub	sp, #8
   15784:	af00      	add	r7, sp, #0
   15786:	6078      	str	r0, [r7, #4]
	canopen_driver->receivedCOMsg.data=canopen_driver->co_rx_buffer_64;
   15788:	4b12      	ldr	r3, [pc, #72]	; (157d4 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   1578a:	681b      	ldr	r3, [r3, #0]
   1578c:	4a11      	ldr	r2, [pc, #68]	; (157d4 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   1578e:	6812      	ldr	r2, [r2, #0]
   15790:	3230      	adds	r2, #48	; 0x30
   15792:	679a      	str	r2, [r3, #120]	; 0x78
	can_async_read(descr, &(canopen_driver->receivedCOMsg));
   15794:	4b0f      	ldr	r3, [pc, #60]	; (157d4 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   15796:	681b      	ldr	r3, [r3, #0]
   15798:	3370      	adds	r3, #112	; 0x70
   1579a:	4619      	mov	r1, r3
   1579c:	6878      	ldr	r0, [r7, #4]
   1579e:	4b0e      	ldr	r3, [pc, #56]	; (157d8 <_ZL14CO_rx_callbackP20can_async_descriptor+0x58>)
   157a0:	4798      	blx	r3
	if (canopen_driver->canopen_ready)
   157a2:	4b0c      	ldr	r3, [pc, #48]	; (157d4 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   157a4:	681b      	ldr	r3, [r3, #0]
   157a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   157aa:	b2db      	uxtb	r3, r3
   157ac:	2b00      	cmp	r3, #0
   157ae:	d007      	beq.n	157c0 <_ZL14CO_rx_callbackP20can_async_descriptor+0x40>
	{
		canopen_driver->ProcessInterrupt_Rx();
   157b0:	4b08      	ldr	r3, [pc, #32]	; (157d4 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   157b2:	681b      	ldr	r3, [r3, #0]
   157b4:	681b      	ldr	r3, [r3, #0]
   157b6:	681b      	ldr	r3, [r3, #0]
   157b8:	4a06      	ldr	r2, [pc, #24]	; (157d4 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   157ba:	6812      	ldr	r2, [r2, #0]
   157bc:	4610      	mov	r0, r2
   157be:	4798      	blx	r3
	}
	
	canopen_driver->receivedRxCOCallback=true;
   157c0:	4b04      	ldr	r3, [pc, #16]	; (157d4 <_ZL14CO_rx_callbackP20can_async_descriptor+0x54>)
   157c2:	681b      	ldr	r3, [r3, #0]
   157c4:	2201      	movs	r2, #1
   157c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
// 	if(ptrCODriver->RxFifo_Callback_CanModule_p != NULL)
// 	{
// 		ProcessInterrupt_Rx();
// 	
}
   157ca:	bf00      	nop
   157cc:	3708      	adds	r7, #8
   157ce:	46bd      	mov	sp, r7
   157d0:	bd80      	pop	{r7, pc}
   157d2:	bf00      	nop
   157d4:	2000da5c 	.word	0x2000da5c
   157d8:	0000342d 	.word	0x0000342d

000157dc <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor>:

static void CO_IRQ_Error_Callback(struct can_async_descriptor *const descr)
{
   157dc:	b590      	push	{r4, r7, lr}
   157de:	b083      	sub	sp, #12
   157e0:	af00      	add	r7, sp, #0
   157e2:	6078      	str	r0, [r7, #4]

	canopen_driver->HalCanErrorCode= hri_can_read_IR_reg(descr->dev.hw);
   157e4:	4b08      	ldr	r3, [pc, #32]	; (15808 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
   157e6:	681c      	ldr	r4, [r3, #0]
   157e8:	687b      	ldr	r3, [r7, #4]
   157ea:	681b      	ldr	r3, [r3, #0]
   157ec:	4618      	mov	r0, r3
   157ee:	4b07      	ldr	r3, [pc, #28]	; (1580c <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x30>)
   157f0:	4798      	blx	r3
   157f2:	4603      	mov	r3, r0
   157f4:	62a3      	str	r3, [r4, #40]	; 0x28
	canopen_driver->receivedIntCOCallback=true;
   157f6:	4b04      	ldr	r3, [pc, #16]	; (15808 <_ZL21CO_IRQ_Error_CallbackP20can_async_descriptor+0x2c>)
   157f8:	681b      	ldr	r3, [r3, #0]
   157fa:	2201      	movs	r2, #1
   157fc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   15800:	bf00      	nop
   15802:	370c      	adds	r7, #12
   15804:	46bd      	mov	sp, r7
   15806:	bd90      	pop	{r4, r7, pc}
   15808:	2000da5c 	.word	0x2000da5c
   1580c:	00015769 	.word	0x00015769

00015810 <_ZL14CO_tx_callbackP20can_async_descriptor>:


static void CO_tx_callback(struct can_async_descriptor *const descr)
{
   15810:	b480      	push	{r7}
   15812:	b083      	sub	sp, #12
   15814:	af00      	add	r7, sp, #0
   15816:	6078      	str	r0, [r7, #4]
	(void)descr;
	canopen_driver->receivedtxCOCallback=true;
   15818:	4b04      	ldr	r3, [pc, #16]	; (1582c <_ZL14CO_tx_callbackP20can_async_descriptor+0x1c>)
   1581a:	681b      	ldr	r3, [r3, #0]
   1581c:	2201      	movs	r2, #1
   1581e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	
}
   15822:	bf00      	nop
   15824:	370c      	adds	r7, #12
   15826:	46bd      	mov	sp, r7
   15828:	bc80      	pop	{r7}
   1582a:	4770      	bx	lr
   1582c:	2000da5c 	.word	0x2000da5c

00015830 <_ZN15CO_Driver_ClassC1Ev>:

// default constructor
CO_Driver_Class::CO_Driver_Class()
   15830:	b580      	push	{r7, lr}
   15832:	b082      	sub	sp, #8
   15834:	af00      	add	r7, sp, #0
   15836:	6078      	str	r0, [r7, #4]
   15838:	687b      	ldr	r3, [r7, #4]
   1583a:	3304      	adds	r3, #4
   1583c:	4618      	mov	r0, r3
   1583e:	4b17      	ldr	r3, [pc, #92]	; (1589c <_ZN15CO_Driver_ClassC1Ev+0x6c>)
   15840:	4798      	blx	r3
   15842:	6878      	ldr	r0, [r7, #4]
   15844:	4b16      	ldr	r3, [pc, #88]	; (158a0 <_ZN15CO_Driver_ClassC1Ev+0x70>)
   15846:	4798      	blx	r3
   15848:	687b      	ldr	r3, [r7, #4]
   1584a:	330c      	adds	r3, #12
   1584c:	4618      	mov	r0, r3
   1584e:	4b15      	ldr	r3, [pc, #84]	; (158a4 <_ZN15CO_Driver_ClassC1Ev+0x74>)
   15850:	4798      	blx	r3
   15852:	687b      	ldr	r3, [r7, #4]
   15854:	3314      	adds	r3, #20
   15856:	4618      	mov	r0, r3
   15858:	4b13      	ldr	r3, [pc, #76]	; (158a8 <_ZN15CO_Driver_ClassC1Ev+0x78>)
   1585a:	4798      	blx	r3
   1585c:	687b      	ldr	r3, [r7, #4]
   1585e:	3320      	adds	r3, #32
   15860:	4618      	mov	r0, r3
   15862:	4b12      	ldr	r3, [pc, #72]	; (158ac <_ZN15CO_Driver_ClassC1Ev+0x7c>)
   15864:	4798      	blx	r3
   15866:	4a12      	ldr	r2, [pc, #72]	; (158b0 <_ZN15CO_Driver_ClassC1Ev+0x80>)
   15868:	687b      	ldr	r3, [r7, #4]
   1586a:	601a      	str	r2, [r3, #0]
{
	RxFifo_Callback_CanModule_p = NULL;
   1586c:	687b      	ldr	r3, [r7, #4]
   1586e:	2200      	movs	r2, #0
   15870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	canopen_driver=this;
   15874:	4a0f      	ldr	r2, [pc, #60]	; (158b4 <_ZN15CO_Driver_ClassC1Ev+0x84>)
   15876:	687b      	ldr	r3, [r7, #4]
   15878:	6013      	str	r3, [r2, #0]
	canopen_ready=false;
   1587a:	687b      	ldr	r3, [r7, #4]
   1587c:	2200      	movs	r2, #0
   1587e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	status_flags=&local_status_flags;
   15882:	687b      	ldr	r3, [r7, #4]
   15884:	4a0c      	ldr	r2, [pc, #48]	; (158b8 <_ZN15CO_Driver_ClassC1Ev+0x88>)
   15886:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	error_flags_array=local_error_flags_array;
   1588a:	687b      	ldr	r3, [r7, #4]
   1588c:	4a0b      	ldr	r2, [pc, #44]	; (158bc <_ZN15CO_Driver_ClassC1Ev+0x8c>)
   1588e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
} //CO_Driver_Class
   15892:	687b      	ldr	r3, [r7, #4]
   15894:	4618      	mov	r0, r3
   15896:	3708      	adds	r7, #8
   15898:	46bd      	mov	sp, r7
   1589a:	bd80      	pop	{r7, pc}
   1589c:	0001603d 	.word	0x0001603d
   158a0:	00016793 	.word	0x00016793
   158a4:	00017fa1 	.word	0x00017fa1
   158a8:	000168f5 	.word	0x000168f5
   158ac:	000165c1 	.word	0x000165c1
   158b0:	0001b740 	.word	0x0001b740
   158b4:	2000da5c 	.word	0x2000da5c
   158b8:	2000da60 	.word	0x2000da60
   158bc:	2000da68 	.word	0x2000da68

000158c0 <_ZN15CO_Driver_ClassD1Ev>:

CO_Driver_Class::~CO_Driver_Class()
   158c0:	b580      	push	{r7, lr}
   158c2:	b082      	sub	sp, #8
   158c4:	af00      	add	r7, sp, #0
   158c6:	6078      	str	r0, [r7, #4]
   158c8:	4a0f      	ldr	r2, [pc, #60]	; (15908 <_ZN15CO_Driver_ClassD1Ev+0x48>)
   158ca:	687b      	ldr	r3, [r7, #4]
   158cc:	601a      	str	r2, [r3, #0]
   158ce:	687b      	ldr	r3, [r7, #4]
   158d0:	3320      	adds	r3, #32
   158d2:	4618      	mov	r0, r3
   158d4:	4b0d      	ldr	r3, [pc, #52]	; (1590c <_ZN15CO_Driver_ClassD1Ev+0x4c>)
   158d6:	4798      	blx	r3
   158d8:	687b      	ldr	r3, [r7, #4]
   158da:	3314      	adds	r3, #20
   158dc:	4618      	mov	r0, r3
   158de:	4b0c      	ldr	r3, [pc, #48]	; (15910 <_ZN15CO_Driver_ClassD1Ev+0x50>)
   158e0:	4798      	blx	r3
   158e2:	687b      	ldr	r3, [r7, #4]
   158e4:	330c      	adds	r3, #12
   158e6:	4618      	mov	r0, r3
   158e8:	4b0a      	ldr	r3, [pc, #40]	; (15914 <_ZN15CO_Driver_ClassD1Ev+0x54>)
   158ea:	4798      	blx	r3
   158ec:	6878      	ldr	r0, [r7, #4]
   158ee:	4b0a      	ldr	r3, [pc, #40]	; (15918 <_ZN15CO_Driver_ClassD1Ev+0x58>)
   158f0:	4798      	blx	r3
   158f2:	687b      	ldr	r3, [r7, #4]
   158f4:	3304      	adds	r3, #4
   158f6:	4618      	mov	r0, r3
   158f8:	4b08      	ldr	r3, [pc, #32]	; (1591c <_ZN15CO_Driver_ClassD1Ev+0x5c>)
   158fa:	4798      	blx	r3
{
// default destructor
} //~CO_Driver_Class
   158fc:	687b      	ldr	r3, [r7, #4]
   158fe:	4618      	mov	r0, r3
   15900:	3708      	adds	r7, #8
   15902:	46bd      	mov	sp, r7
   15904:	bd80      	pop	{r7, pc}
   15906:	bf00      	nop
   15908:	0001b740 	.word	0x0001b740
   1590c:	000165e1 	.word	0x000165e1
   15910:	00016909 	.word	0x00016909
   15914:	00017fb5 	.word	0x00017fb5
   15918:	000167a7 	.word	0x000167a7
   1591c:	00016065 	.word	0x00016065

00015920 <_ZN15CO_Driver_Class16PrepareTxMessageEP11can_messageP10CO_CANtx_t>:
 * \param [in]	buffer ponyer to CO_CANtx_t with CANopen configuration data
 *
 * \ingroup CO_driver
 ******************************************************************************/
void CO_Driver_Class::PrepareTxMessage(struct can_message *msgHeader, CO_CANtx_t *buffer)
{
   15920:	b480      	push	{r7}
   15922:	b085      	sub	sp, #20
   15924:	af00      	add	r7, sp, #0
   15926:	60f8      	str	r0, [r7, #12]
   15928:	60b9      	str	r1, [r7, #8]
   1592a:	607a      	str	r2, [r7, #4]
	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;
	msgHeader->id=0;
   1592c:	68bb      	ldr	r3, [r7, #8]
   1592e:	2200      	movs	r2, #0
   15930:	601a      	str	r2, [r3, #0]
	//TxHeader->IDE = 0;
	msgHeader->fmt=CAN_FMT_STDID;
   15932:	68bb      	ldr	r3, [r7, #8]
   15934:	2200      	movs	r2, #0
   15936:	735a      	strb	r2, [r3, #13]
	
	//TxHeader->DLC = buffer->DLC;
	msgHeader->len=buffer->DLC;
   15938:	687b      	ldr	r3, [r7, #4]
   1593a:	791a      	ldrb	r2, [r3, #4]
   1593c:	68bb      	ldr	r3, [r7, #8]
   1593e:	731a      	strb	r2, [r3, #12]
	
	//TxHeader->StdId = ( buffer->ident >> 2 );
	msgHeader->id=( buffer->ident >> 2 );
   15940:	687b      	ldr	r3, [r7, #4]
   15942:	681b      	ldr	r3, [r3, #0]
   15944:	089a      	lsrs	r2, r3, #2
   15946:	68bb      	ldr	r3, [r7, #8]
   15948:	601a      	str	r2, [r3, #0]
	
	//TxHeader->RTR = ( buffer->ident & 0x2 );
	msgHeader->type=(can_type)( buffer->ident & 0x2 );
   1594a:	687b      	ldr	r3, [r7, #4]
   1594c:	681b      	ldr	r3, [r3, #0]
   1594e:	b2db      	uxtb	r3, r3
   15950:	f003 0302 	and.w	r3, r3, #2
   15954:	b2da      	uxtb	r2, r3
   15956:	68bb      	ldr	r3, [r7, #8]
   15958:	711a      	strb	r2, [r3, #4]
	msgHeader->data=buffer->data;
   1595a:	687b      	ldr	r3, [r7, #4]
   1595c:	1d5a      	adds	r2, r3, #5
   1595e:	68bb      	ldr	r3, [r7, #8]
   15960:	609a      	str	r2, [r3, #8]
}
   15962:	bf00      	nop
   15964:	3714      	adds	r7, #20
   15966:	46bd      	mov	sp, r7
   15968:	bc80      	pop	{r7}
   1596a:	4770      	bx	lr

0001596c <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t>:

void CO_Driver_Class::ConvertCANMsg2CORxMsg(can_message& msgHeader, CO_CANrxMsg_t *rxMsg)
{
   1596c:	b590      	push	{r4, r7, lr}
   1596e:	b085      	sub	sp, #20
   15970:	af00      	add	r7, sp, #0
   15972:	60f8      	str	r0, [r7, #12]
   15974:	60b9      	str	r1, [r7, #8]
   15976:	607a      	str	r2, [r7, #4]
	rxMsg->RxHeader=msgHeader;
   15978:	687a      	ldr	r2, [r7, #4]
   1597a:	68bb      	ldr	r3, [r7, #8]
   1597c:	4614      	mov	r4, r2
   1597e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   15980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	rxMsg->DLC=msgHeader.len;
   15984:	68bb      	ldr	r3, [r7, #8]
   15986:	7b1a      	ldrb	r2, [r3, #12]
   15988:	687b      	ldr	r3, [r7, #4]
   1598a:	751a      	strb	r2, [r3, #20]
	rxMsg->ident=msgHeader.id;
   1598c:	68bb      	ldr	r3, [r7, #8]
   1598e:	681a      	ldr	r2, [r3, #0]
   15990:	687b      	ldr	r3, [r7, #4]
   15992:	611a      	str	r2, [r3, #16]
	memcpy(&rxMsg->data[0],msgHeader.data,msgHeader.len);
   15994:	687b      	ldr	r3, [r7, #4]
   15996:	f103 0015 	add.w	r0, r3, #21
   1599a:	68bb      	ldr	r3, [r7, #8]
   1599c:	6899      	ldr	r1, [r3, #8]
   1599e:	68bb      	ldr	r3, [r7, #8]
   159a0:	7b1b      	ldrb	r3, [r3, #12]
   159a2:	461a      	mov	r2, r3
   159a4:	4b02      	ldr	r3, [pc, #8]	; (159b0 <_ZN15CO_Driver_Class21ConvertCANMsg2CORxMsgER11can_messageP13CO_CANrxMsg_t+0x44>)
   159a6:	4798      	blx	r3

	/* Map buffer data to the HAL CAN tx header data*/
	//TxHeader->ExtId = 0u;

}
   159a8:	bf00      	nop
   159aa:	3714      	adds	r7, #20
   159ac:	46bd      	mov	sp, r7
   159ae:	bd90      	pop	{r4, r7, pc}
   159b0:	0001ab91 	.word	0x0001ab91

000159b4 <_ZN15CO_Driver_Class26CO_CANsetConfigurationModeEP20can_async_descriptor>:
	{
		;//TODO add assert here
	}
}

void CO_Driver_Class::CO_CANsetConfigurationMode(can_async_descriptor *descr){
   159b4:	b480      	push	{r7}
   159b6:	b083      	sub	sp, #12
   159b8:	af00      	add	r7, sp, #0
   159ba:	6078      	str	r0, [r7, #4]
   159bc:	6039      	str	r1, [r7, #0]
	
	canDescr=descr;
   159be:	687b      	ldr	r3, [r7, #4]
   159c0:	683a      	ldr	r2, [r7, #0]
   159c2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	/* Put CAN module in configuration mode */
	/* HAL is responsible for that */
}
   159c6:	bf00      	nop
   159c8:	370c      	adds	r7, #12
   159ca:	46bd      	mov	sp, r7
   159cc:	bc80      	pop	{r7}
   159ce:	4770      	bx	lr

000159d0 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CO_CANsetNormalMode(void){
   159d0:	b580      	push	{r7, lr}
   159d2:	b084      	sub	sp, #16
   159d4:	af00      	add	r7, sp, #0
   159d6:	6078      	str	r0, [r7, #4]
	/* Put CAN module in normal mode */
	int32_t		error_CAN_hal;
	Error = CO_ERROR_NO;
   159d8:	687b      	ldr	r3, [r7, #4]
   159da:	2200      	movs	r2, #0
   159dc:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	error_CAN_hal=can_async_enable(CAN_Module->CANBaseDescriptor);
   159e0:	687b      	ldr	r3, [r7, #4]
   159e2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   159e6:	681b      	ldr	r3, [r3, #0]
   159e8:	4618      	mov	r0, r3
   159ea:	4b0a      	ldr	r3, [pc, #40]	; (15a14 <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x44>)
   159ec:	4798      	blx	r3
   159ee:	60f8      	str	r0, [r7, #12]
	//    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
	//    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
	//    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);

	if (error_CAN_hal != CO_ERROR_NO)
   159f0:	68fb      	ldr	r3, [r7, #12]
   159f2:	2b00      	cmp	r3, #0
   159f4:	d002      	beq.n	159fc <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x2c>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
   159f6:	f06f 030e 	mvn.w	r3, #14
   159fa:	e007      	b.n	15a0c <_ZN15CO_Driver_Class19CO_CANsetNormalModeEv+0x3c>
	}
	CAN_Module->CANnormal = true;
   159fc:	687b      	ldr	r3, [r7, #4]
   159fe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15a02:	2201      	movs	r2, #1
   15a04:	751a      	strb	r2, [r3, #20]
	return Error;
   15a06:	687b      	ldr	r3, [r7, #4]
   15a08:	f993 30b4 	ldrsb.w	r3, [r3, #180]	; 0xb4
}
   15a0c:	4618      	mov	r0, r3
   15a0e:	3710      	adds	r7, #16
   15a10:	46bd      	mov	sp, r7
   15a12:	bd80      	pop	{r7, pc}
   15a14:	000033f1 	.word	0x000033f1

00015a18 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm>:
		CO_CANrx_t              rxArray[],
		uint32_t                rxSize,
		CO_CANtx_t              txArray[],
		uint32_t                txSize,
		uint32_t                CANbitRate)
{
   15a18:	b580      	push	{r7, lr}
   15a1a:	b086      	sub	sp, #24
   15a1c:	af00      	add	r7, sp, #0
   15a1e:	60f8      	str	r0, [r7, #12]
   15a20:	60b9      	str	r1, [r7, #8]
   15a22:	607a      	str	r2, [r7, #4]
   15a24:	603b      	str	r3, [r7, #0]
	canDescr=HALCanObject;
   15a26:	68fb      	ldr	r3, [r7, #12]
   15a28:	687a      	ldr	r2, [r7, #4]
   15a2a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	
	int32_t		error_CAN_hal;

	/* verify arguments */
	if(CANmodule==NULL || rxArray==NULL || txArray==NULL)
   15a2e:	68bb      	ldr	r3, [r7, #8]
   15a30:	2b00      	cmp	r3, #0
   15a32:	d005      	beq.n	15a40 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
   15a34:	683b      	ldr	r3, [r7, #0]
   15a36:	2b00      	cmp	r3, #0
   15a38:	d002      	beq.n	15a40 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x28>
   15a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15a3c:	2b00      	cmp	r3, #0
   15a3e:	d102      	bne.n	15a46 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x2e>
	{
		return CO_ERROR_ILLEGAL_ARGUMENT;
   15a40:	f04f 33ff 	mov.w	r3, #4294967295
   15a44:	e089      	b.n	15b5a <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x142>
	else
	{
		;//do nothing
	}

	RxFifo_Callback_CanModule_p = CANmodule;
   15a46:	68fb      	ldr	r3, [r7, #12]
   15a48:	68ba      	ldr	r2, [r7, #8]
   15a4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Configure object variables */
	CANmodule->CANBaseDescriptor = (can_async_descriptor*)HALCanObject;
   15a4e:	68bb      	ldr	r3, [r7, #8]
   15a50:	687a      	ldr	r2, [r7, #4]
   15a52:	601a      	str	r2, [r3, #0]
	CANmodule->rxArray = rxArray;
   15a54:	68bb      	ldr	r3, [r7, #8]
   15a56:	683a      	ldr	r2, [r7, #0]
   15a58:	605a      	str	r2, [r3, #4]
	CANmodule->rxSize = rxSize;
   15a5a:	68bb      	ldr	r3, [r7, #8]
   15a5c:	6a3a      	ldr	r2, [r7, #32]
   15a5e:	609a      	str	r2, [r3, #8]
	CANmodule->txArray = txArray;
   15a60:	68bb      	ldr	r3, [r7, #8]
   15a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15a64:	60da      	str	r2, [r3, #12]
	CANmodule->txSize = txSize;
   15a66:	68bb      	ldr	r3, [r7, #8]
   15a68:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15a6a:	611a      	str	r2, [r3, #16]
	CANmodule->CANnormal = false;
   15a6c:	68bb      	ldr	r3, [r7, #8]
   15a6e:	2200      	movs	r2, #0
   15a70:	751a      	strb	r2, [r3, #20]
	CANmodule->useCANrxFilters = false;
   15a72:	68bb      	ldr	r3, [r7, #8]
   15a74:	2200      	movs	r2, #0
   15a76:	755a      	strb	r2, [r3, #21]
	CANmodule->bufferInhibitFlag = false;
   15a78:	68bb      	ldr	r3, [r7, #8]
   15a7a:	2200      	movs	r2, #0
   15a7c:	759a      	strb	r2, [r3, #22]
	CANmodule->firstCANtxMessage = true;
   15a7e:	68bb      	ldr	r3, [r7, #8]
   15a80:	2201      	movs	r2, #1
   15a82:	75da      	strb	r2, [r3, #23]
	CANmodule->CANtxCount = 0U;
   15a84:	68bb      	ldr	r3, [r7, #8]
   15a86:	2200      	movs	r2, #0
   15a88:	619a      	str	r2, [r3, #24]
	CANmodule->errOld = 0U;
   15a8a:	68bb      	ldr	r3, [r7, #8]
   15a8c:	2200      	movs	r2, #0
   15a8e:	61da      	str	r2, [r3, #28]
	CANmodule->em = NULL;
   15a90:	68bb      	ldr	r3, [r7, #8]
   15a92:	2200      	movs	r2, #0
   15a94:	621a      	str	r2, [r3, #32]

	for(i=0U; i<rxSize; i++)
   15a96:	68fb      	ldr	r3, [r7, #12]
   15a98:	2200      	movs	r2, #0
   15a9a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
   15a9e:	68fb      	ldr	r3, [r7, #12]
   15aa0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   15aa4:	6a3b      	ldr	r3, [r7, #32]
   15aa6:	429a      	cmp	r2, r3
   15aa8:	d217      	bcs.n	15ada <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xc2>
	{
		rxArray[i].ident = 0U;
   15aaa:	68fb      	ldr	r3, [r7, #12]
   15aac:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   15ab0:	011b      	lsls	r3, r3, #4
   15ab2:	683a      	ldr	r2, [r7, #0]
   15ab4:	4413      	add	r3, r2
   15ab6:	2200      	movs	r2, #0
   15ab8:	601a      	str	r2, [r3, #0]
		rxArray[i].pFunct = NULL;
   15aba:	68fb      	ldr	r3, [r7, #12]
   15abc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   15ac0:	011b      	lsls	r3, r3, #4
   15ac2:	683a      	ldr	r2, [r7, #0]
   15ac4:	4413      	add	r3, r2
   15ac6:	2200      	movs	r2, #0
   15ac8:	60da      	str	r2, [r3, #12]
	for(i=0U; i<rxSize; i++)
   15aca:	68fb      	ldr	r3, [r7, #12]
   15acc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   15ad0:	1c5a      	adds	r2, r3, #1
   15ad2:	68fb      	ldr	r3, [r7, #12]
   15ad4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
   15ad8:	e7e1      	b.n	15a9e <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x86>
	}

	for(i=0U; i<txSize; i++)
   15ada:	68fb      	ldr	r3, [r7, #12]
   15adc:	2200      	movs	r2, #0
   15ade:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
   15ae2:	68fb      	ldr	r3, [r7, #12]
   15ae4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   15ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15aea:	429a      	cmp	r2, r3
   15aec:	d20f      	bcs.n	15b0e <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xf6>
	{
		txArray[i].bufferFull = false;
   15aee:	68fb      	ldr	r3, [r7, #12]
   15af0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   15af4:	011b      	lsls	r3, r3, #4
   15af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15af8:	4413      	add	r3, r2
   15afa:	2200      	movs	r2, #0
   15afc:	735a      	strb	r2, [r3, #13]
	for(i=0U; i<txSize; i++)
   15afe:	68fb      	ldr	r3, [r7, #12]
   15b00:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   15b04:	1c5a      	adds	r2, r3, #1
   15b06:	68fb      	ldr	r3, [r7, #12]
   15b08:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
   15b0c:	e7e9      	b.n	15ae2 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0xca>
	}


	CANmodule_Disable();
   15b0e:	68f8      	ldr	r0, [r7, #12]
   15b10:	4b14      	ldr	r3, [pc, #80]	; (15b64 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x14c>)
   15b12:	4798      	blx	r3
	
	can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
   15b14:	68fb      	ldr	r3, [r7, #12]
   15b16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   15b1a:	4a13      	ldr	r2, [pc, #76]	; (15b68 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x150>)
   15b1c:	2100      	movs	r1, #0
   15b1e:	4618      	mov	r0, r3
   15b20:	4b12      	ldr	r3, [pc, #72]	; (15b6c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x154>)
   15b22:	4798      	blx	r3
	can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
   15b24:	68fb      	ldr	r3, [r7, #12]
   15b26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   15b2a:	4a11      	ldr	r2, [pc, #68]	; (15b70 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x158>)
   15b2c:	2102      	movs	r1, #2
   15b2e:	4618      	mov	r0, r3
   15b30:	4b0e      	ldr	r3, [pc, #56]	; (15b6c <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x154>)
   15b32:	4798      	blx	r3
	error_CAN_hal=can_async_enable(HALCanObject);
   15b34:	6878      	ldr	r0, [r7, #4]
   15b36:	4b0f      	ldr	r3, [pc, #60]	; (15b74 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x15c>)
   15b38:	4798      	blx	r3
   15b3a:	6178      	str	r0, [r7, #20]
	if (error_CAN_hal != CO_ERROR_NO)
   15b3c:	697b      	ldr	r3, [r7, #20]
   15b3e:	2b00      	cmp	r3, #0
   15b40:	d002      	beq.n	15b48 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x130>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
   15b42:	f06f 030e 	mvn.w	r3, #14
   15b46:	e008      	b.n	15b5a <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x142>
	}
	CAN_Module=CANmodule;
   15b48:	68fb      	ldr	r3, [r7, #12]
   15b4a:	68ba      	ldr	r2, [r7, #8]
   15b4c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	compressor_temperatures=local_compressor_temperatures;
   15b50:	68fb      	ldr	r3, [r7, #12]
   15b52:	4a09      	ldr	r2, [pc, #36]	; (15b78 <_ZN15CO_Driver_Class14CANmodule_initEP14CO_CANmodule_tP20can_async_descriptorP10CO_CANrx_tmP10CO_CANtx_tmm+0x160>)
   15b54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	return CO_ERROR_NO;
   15b58:	2300      	movs	r3, #0
}
   15b5a:	4618      	mov	r0, r3
   15b5c:	3718      	adds	r7, #24
   15b5e:	46bd      	mov	sp, r7
   15b60:	bd80      	pop	{r7, pc}
   15b62:	bf00      	nop
   15b64:	00015b7d 	.word	0x00015b7d
   15b68:	00015781 	.word	0x00015781
   15b6c:	000034c5 	.word	0x000034c5
   15b70:	000157dd 	.word	0x000157dd
   15b74:	000033f1 	.word	0x000033f1
   15b78:	2000da6c 	.word	0x2000da6c

00015b7c <_ZN15CO_Driver_Class17CANmodule_DisableEv>:


/******************************************************************************/
void CO_Driver_Class::CANmodule_Disable(void){
   15b7c:	b480      	push	{r7}
   15b7e:	b083      	sub	sp, #12
   15b80:	af00      	add	r7, sp, #0
   15b82:	6078      	str	r0, [r7, #4]
	HAL_CAN_Stop(CANmodule->CANbaseAddress);
	*/
	//can_async_register_callback(canDescr, CAN_ASYNC_RX_CB, (FUNC_PTR)CO_rx_callback);
	//can_async_register_callback(canDescr, CAN_ASYNC_IRQ_CB, (FUNC_PTR)CO_IRQ_Error_Callback);
	//can_async_disable(CAN_Module->CANBaseDescriptor);
}
   15b84:	bf00      	nop
   15b86:	370c      	adds	r7, #12
   15b88:	46bd      	mov	sp, r7
   15b8a:	bc80      	pop	{r7}
   15b8c:	4770      	bx	lr

00015b8e <_ZN15CO_Driver_Class14Set_Slave_NodeEh>:
uint8_t CO_Driver_Class::Set_Slave_Node(uint8_t sn){
   15b8e:	b480      	push	{r7}
   15b90:	b083      	sub	sp, #12
   15b92:	af00      	add	r7, sp, #0
   15b94:	6078      	str	r0, [r7, #4]
   15b96:	460b      	mov	r3, r1
   15b98:	70fb      	strb	r3, [r7, #3]
	slave_node=sn;
   15b9a:	687b      	ldr	r3, [r7, #4]
   15b9c:	78fa      	ldrb	r2, [r7, #3]
   15b9e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	return slave_node;
   15ba2:	687b      	ldr	r3, [r7, #4]
   15ba4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
}
   15ba8:	4618      	mov	r0, r3
   15baa:	370c      	adds	r7, #12
   15bac:	46bd      	mov	sp, r7
   15bae:	bc80      	pop	{r7}
   15bb0:	4770      	bx	lr
	...

00015bb4 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE>:
		uint32_t                ident,
		uint32_t                mask,
		bool_t                  rtr,
		void                   *object,
		void                  (*pFunct)(void *object, const CO_CANrxMsg_t *message))
{
   15bb4:	b590      	push	{r4, r7, lr}
   15bb6:	b087      	sub	sp, #28
   15bb8:	af00      	add	r7, sp, #0
   15bba:	60f8      	str	r0, [r7, #12]
   15bbc:	60b9      	str	r1, [r7, #8]
   15bbe:	607a      	str	r2, [r7, #4]
   15bc0:	603b      	str	r3, [r7, #0]
	ret = CO_ERROR_NO;
   15bc2:	68fb      	ldr	r3, [r7, #12]
   15bc4:	2200      	movs	r2, #0
   15bc6:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

	if((CAN_Module!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CAN_Module->rxSize)){
   15bca:	68fb      	ldr	r3, [r7, #12]
   15bcc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15bd0:	2b00      	cmp	r3, #0
   15bd2:	d060      	beq.n	15c96 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
   15bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15bd6:	2b00      	cmp	r3, #0
   15bd8:	d05d      	beq.n	15c96 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
   15bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15bdc:	2b00      	cmp	r3, #0
   15bde:	d05a      	beq.n	15c96 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
   15be0:	68fb      	ldr	r3, [r7, #12]
   15be2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15be6:	689a      	ldr	r2, [r3, #8]
   15be8:	68bb      	ldr	r3, [r7, #8]
   15bea:	429a      	cmp	r2, r3
   15bec:	d953      	bls.n	15c96 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xe2>
		/* buffer, which will be configured */
		CO_CANrx_t *buffer = &CAN_Module->rxArray[index];
   15bee:	68fb      	ldr	r3, [r7, #12]
   15bf0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15bf4:	685a      	ldr	r2, [r3, #4]
   15bf6:	68bb      	ldr	r3, [r7, #8]
   15bf8:	011b      	lsls	r3, r3, #4
   15bfa:	4413      	add	r3, r2
   15bfc:	617b      	str	r3, [r7, #20]

		/* Configure object variables */
		buffer->object = object;
   15bfe:	697b      	ldr	r3, [r7, #20]
   15c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15c02:	609a      	str	r2, [r3, #8]
		buffer->pFunct = pFunct;
   15c04:	697b      	ldr	r3, [r7, #20]
   15c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   15c08:	60da      	str	r2, [r3, #12]

		/* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
		buffer->ident = (ident & 0x07FF) << 2;
   15c0a:	687b      	ldr	r3, [r7, #4]
   15c0c:	009a      	lsls	r2, r3, #2
   15c0e:	f641 73fc 	movw	r3, #8188	; 0x1ffc
   15c12:	4013      	ands	r3, r2
   15c14:	697a      	ldr	r2, [r7, #20]
   15c16:	6013      	str	r3, [r2, #0]
		if (rtr)
   15c18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   15c1c:	2b00      	cmp	r3, #0
   15c1e:	d005      	beq.n	15c2c <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0x78>
		{
			buffer->ident |= 0x02;
   15c20:	697b      	ldr	r3, [r7, #20]
   15c22:	681b      	ldr	r3, [r3, #0]
   15c24:	f043 0202 	orr.w	r2, r3, #2
   15c28:	697b      	ldr	r3, [r7, #20]
   15c2a:	601a      	str	r2, [r3, #0]
		}
		buffer->mask = (mask & 0x07FF) << 2;
   15c2c:	683b      	ldr	r3, [r7, #0]
   15c2e:	009a      	lsls	r2, r3, #2
   15c30:	f641 73fc 	movw	r3, #8188	; 0x1ffc
   15c34:	4013      	ands	r3, r2
   15c36:	697a      	ldr	r2, [r7, #20]
   15c38:	6053      	str	r3, [r2, #4]
		buffer->mask |= 0x02;
   15c3a:	697b      	ldr	r3, [r7, #20]
   15c3c:	685b      	ldr	r3, [r3, #4]
   15c3e:	f043 0202 	orr.w	r2, r3, #2
   15c42:	697b      	ldr	r3, [r7, #20]
   15c44:	605a      	str	r2, [r3, #4]

		/* Set CAN hardware module filter and mask. */
		if(CAN_Module->useCANrxFilters)
   15c46:	68fb      	ldr	r3, [r7, #12]
   15c48:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15c4c:	7d5b      	ldrb	r3, [r3, #21]
   15c4e:	b2db      	uxtb	r3, r3
   15c50:	2b00      	cmp	r3, #0
   15c52:	bf14      	ite	ne
   15c54:	2301      	movne	r3, #1
   15c56:	2300      	moveq	r3, #0
   15c58:	b2db      	uxtb	r3, r3
   15c5a:	2b00      	cmp	r3, #0
   15c5c:	d120      	bne.n	15ca0 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
		else
		{
			/*no hardware filters*/
			//CAN_FilterTypeDef FilterConfig;
		
			CO_Filter.id   = buffer->ident;
   15c5e:	697b      	ldr	r3, [r7, #20]
   15c60:	681a      	ldr	r2, [r3, #0]
   15c62:	68fb      	ldr	r3, [r7, #12]
   15c64:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			CO_Filter.mask = buffer->mask;
   15c68:	697b      	ldr	r3, [r7, #20]
   15c6a:	685a      	ldr	r2, [r3, #4]
   15c6c:	68fb      	ldr	r3, [r7, #12]
   15c6e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
			ret= (CO_ReturnError_t)can_async_set_filter(CAN_Module->CANBaseDescriptor,(uint8_t)index, CAN_FMT_STDID, &CO_Filter);
   15c72:	68fb      	ldr	r3, [r7, #12]
   15c74:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15c78:	6818      	ldr	r0, [r3, #0]
   15c7a:	68bb      	ldr	r3, [r7, #8]
   15c7c:	b2d9      	uxtb	r1, r3
   15c7e:	68fb      	ldr	r3, [r7, #12]
   15c80:	f503 739c 	add.w	r3, r3, #312	; 0x138
   15c84:	2200      	movs	r2, #0
   15c86:	4c0a      	ldr	r4, [pc, #40]	; (15cb0 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xfc>)
   15c88:	47a0      	blx	r4
   15c8a:	4603      	mov	r3, r0
   15c8c:	b25a      	sxtb	r2, r3
   15c8e:	68fb      	ldr	r3, [r7, #12]
   15c90:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
		}
   15c94:	e004      	b.n	15ca0 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xec>
	}
	else
	{
		ret = CO_ERROR_ILLEGAL_ARGUMENT;
   15c96:	68fb      	ldr	r3, [r7, #12]
   15c98:	22ff      	movs	r2, #255	; 0xff
   15c9a:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
   15c9e:	e000      	b.n	15ca2 <_ZN15CO_Driver_Class17CAN_Rx_BufferInitEmmmhPvPFvS0_PK13CO_CANrxMsg_tE+0xee>
		}
   15ca0:	bf00      	nop
	}
	return ret;
   15ca2:	68fb      	ldr	r3, [r7, #12]
   15ca4:	f993 30b5 	ldrsb.w	r3, [r3, #181]	; 0xb5
}
   15ca8:	4618      	mov	r0, r3
   15caa:	371c      	adds	r7, #28
   15cac:	46bd      	mov	sp, r7
   15cae:	bd90      	pop	{r4, r7, pc}
   15cb0:	00003541 	.word	0x00003541

00015cb4 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh>:
		uint32_t                index,
		uint32_t                ident,
		bool_t                  rtr,
		uint8_t                 noOfBytes,
		bool_t                  syncFlag)
{
   15cb4:	b480      	push	{r7}
   15cb6:	b085      	sub	sp, #20
   15cb8:	af00      	add	r7, sp, #0
   15cba:	60f8      	str	r0, [r7, #12]
   15cbc:	60b9      	str	r1, [r7, #8]
   15cbe:	607a      	str	r2, [r7, #4]
   15cc0:	70fb      	strb	r3, [r7, #3]
	buffer = NULL;
   15cc2:	68fb      	ldr	r3, [r7, #12]
   15cc4:	2200      	movs	r2, #0
   15cc6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	if((CAN_Module != NULL) && (index < CAN_Module->txSize)){
   15cca:	68fb      	ldr	r3, [r7, #12]
   15ccc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15cd0:	2b00      	cmp	r3, #0
   15cd2:	d03c      	beq.n	15d4e <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
   15cd4:	68fb      	ldr	r3, [r7, #12]
   15cd6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15cda:	691a      	ldr	r2, [r3, #16]
   15cdc:	68bb      	ldr	r3, [r7, #8]
   15cde:	429a      	cmp	r2, r3
   15ce0:	d935      	bls.n	15d4e <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x9a>
		/* get specific buffer */
		buffer = &CAN_Module->txArray[index];
   15ce2:	68fb      	ldr	r3, [r7, #12]
   15ce4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15ce8:	68da      	ldr	r2, [r3, #12]
   15cea:	68bb      	ldr	r3, [r7, #8]
   15cec:	011b      	lsls	r3, r3, #4
   15cee:	441a      	add	r2, r3
   15cf0:	68fb      	ldr	r3, [r7, #12]
   15cf2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

		/* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.*/

		buffer->ident &= 0x7FF;
   15cf6:	68fb      	ldr	r3, [r7, #12]
   15cf8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   15cfc:	68fa      	ldr	r2, [r7, #12]
   15cfe:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
   15d02:	6812      	ldr	r2, [r2, #0]
   15d04:	f3c2 020a 	ubfx	r2, r2, #0, #11
   15d08:	601a      	str	r2, [r3, #0]
		buffer->ident = ident << 2;
   15d0a:	68fb      	ldr	r3, [r7, #12]
   15d0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   15d10:	687a      	ldr	r2, [r7, #4]
   15d12:	0092      	lsls	r2, r2, #2
   15d14:	601a      	str	r2, [r3, #0]
		if (rtr) buffer->ident |= 0x02;
   15d16:	78fb      	ldrb	r3, [r7, #3]
   15d18:	2b00      	cmp	r3, #0
   15d1a:	d009      	beq.n	15d30 <_ZN15CO_Driver_Class17CAN_Tx_BufferInitEmmhhh+0x7c>
   15d1c:	68fb      	ldr	r3, [r7, #12]
   15d1e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   15d22:	68fa      	ldr	r2, [r7, #12]
   15d24:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
   15d28:	6812      	ldr	r2, [r2, #0]
   15d2a:	f042 0202 	orr.w	r2, r2, #2
   15d2e:	601a      	str	r2, [r3, #0]

		buffer->DLC = noOfBytes;
   15d30:	68fb      	ldr	r3, [r7, #12]
   15d32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   15d36:	7e3a      	ldrb	r2, [r7, #24]
   15d38:	711a      	strb	r2, [r3, #4]
		buffer->bufferFull = false;
   15d3a:	68fb      	ldr	r3, [r7, #12]
   15d3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   15d40:	2200      	movs	r2, #0
   15d42:	735a      	strb	r2, [r3, #13]
		buffer->syncFlag = syncFlag;
   15d44:	68fb      	ldr	r3, [r7, #12]
   15d46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   15d4a:	7f3a      	ldrb	r2, [r7, #28]
   15d4c:	739a      	strb	r2, [r3, #14]
	}

	return buffer;
   15d4e:	68fb      	ldr	r3, [r7, #12]
   15d50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
}
   15d54:	4618      	mov	r0, r3
   15d56:	3714      	adds	r7, #20
   15d58:	46bd      	mov	sp, r7
   15d5a:	bc80      	pop	{r7}
   15d5c:	4770      	bx	lr
	...

00015d60 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t>:

/******************************************************************************/
CO_ReturnError_t CO_Driver_Class::CAN_Send(CO_CANtx_t *buffer)
{
   15d60:	b590      	push	{r4, r7, lr}
   15d62:	b089      	sub	sp, #36	; 0x24
   15d64:	af02      	add	r7, sp, #8
   15d66:	6078      	str	r0, [r7, #4]
   15d68:	6039      	str	r1, [r7, #0]
	err = CO_ERROR_NO;
   15d6a:	687b      	ldr	r3, [r7, #4]
   15d6c:	2200      	movs	r2, #0
   15d6e:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6

	if(buffer->bufferFull){
   15d72:	683b      	ldr	r3, [r7, #0]
   15d74:	7b5b      	ldrb	r3, [r3, #13]
   15d76:	b2db      	uxtb	r3, r3
   15d78:	2b00      	cmp	r3, #0
   15d7a:	bf14      	ite	ne
   15d7c:	2301      	movne	r3, #1
   15d7e:	2300      	moveq	r3, #0
   15d80:	b2db      	uxtb	r3, r3
   15d82:	2b00      	cmp	r3, #0
   15d84:	d01d      	beq.n	15dc2 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x62>
		if(!CAN_Module->firstCANtxMessage){
   15d86:	687b      	ldr	r3, [r7, #4]
   15d88:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15d8c:	7ddb      	ldrb	r3, [r3, #23]
   15d8e:	b2db      	uxtb	r3, r3
   15d90:	2b00      	cmp	r3, #0
   15d92:	bf0c      	ite	eq
   15d94:	2301      	moveq	r3, #1
   15d96:	2300      	movne	r3, #0
   15d98:	b2db      	uxtb	r3, r3
   15d9a:	2b00      	cmp	r3, #0
   15d9c:	d00d      	beq.n	15dba <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x5a>
			/* don't set error, if bootup message is still on buffers */
			EM_ErrorReport((CO_EM_t*)CAN_Module->em, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, buffer->ident);
   15d9e:	687b      	ldr	r3, [r7, #4]
   15da0:	1d18      	adds	r0, r3, #4
   15da2:	687b      	ldr	r3, [r7, #4]
   15da4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15da8:	6a19      	ldr	r1, [r3, #32]
   15daa:	683b      	ldr	r3, [r7, #0]
   15dac:	681b      	ldr	r3, [r3, #0]
   15dae:	9300      	str	r3, [sp, #0]
   15db0:	f248 1310 	movw	r3, #33040	; 0x8110
   15db4:	2214      	movs	r2, #20
   15db6:	4c35      	ldr	r4, [pc, #212]	; (15e8c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x12c>)
   15db8:	47a0      	blx	r4
		}
		err = CO_ERROR_TX_OVERFLOW;
   15dba:	687b      	ldr	r3, [r7, #4]
   15dbc:	22f7      	movs	r2, #247	; 0xf7
   15dbe:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
	}

	

	PrepareTxMessage(&msgHeader, buffer);
   15dc2:	687b      	ldr	r3, [r7, #4]
   15dc4:	3384      	adds	r3, #132	; 0x84
   15dc6:	683a      	ldr	r2, [r7, #0]
   15dc8:	4619      	mov	r1, r3
   15dca:	6878      	ldr	r0, [r7, #4]
   15dcc:	4b30      	ldr	r3, [pc, #192]	; (15e90 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x130>)
   15dce:	4798      	blx	r3

	if ((CAN_Module->CANtxCount == 0) ) {
   15dd0:	687b      	ldr	r3, [r7, #4]
   15dd2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15dd6:	699b      	ldr	r3, [r3, #24]
   15dd8:	2b00      	cmp	r3, #0
   15dda:	bf0c      	ite	eq
   15ddc:	2301      	moveq	r3, #1
   15dde:	2300      	movne	r3, #0
   15de0:	b2db      	uxtb	r3, r3
   15de2:	2b00      	cmp	r3, #0
   15de4:	d041      	beq.n	15e6a <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x10a>
	//	((uint32_t)hri_can_read_TXFQS_TFFL_bf(canHandler->dev.hw) > 0 )) {
		CAN_Module->bufferInhibitFlag = buffer->syncFlag;
   15de6:	687b      	ldr	r3, [r7, #4]
   15de8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15dec:	683a      	ldr	r2, [r7, #0]
   15dee:	7b92      	ldrb	r2, [r2, #14]
   15df0:	b2d2      	uxtb	r2, r2
   15df2:	759a      	strb	r2, [r3, #22]
		
		can_async_register_callback(CAN_Module->CANBaseDescriptor, CAN_ASYNC_TX_CB, (FUNC_PTR)CO_tx_callback);
   15df4:	687b      	ldr	r3, [r7, #4]
   15df6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15dfa:	681b      	ldr	r3, [r3, #0]
   15dfc:	4a25      	ldr	r2, [pc, #148]	; (15e94 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x134>)
   15dfe:	2101      	movs	r1, #1
   15e00:	4618      	mov	r0, r3
   15e02:	4b25      	ldr	r3, [pc, #148]	; (15e98 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x138>)
   15e04:	4798      	blx	r3
		can_async_enable(CAN_Module->CANBaseDescriptor);
   15e06:	687b      	ldr	r3, [r7, #4]
   15e08:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15e0c:	681b      	ldr	r3, [r3, #0]
   15e0e:	4618      	mov	r0, r3
   15e10:	4b22      	ldr	r3, [pc, #136]	; (15e9c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x13c>)
   15e12:	4798      	blx	r3
		receivedtxCOCallback=false;
   15e14:	687b      	ldr	r3, [r7, #4]
   15e16:	2200      	movs	r2, #0
   15e18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   15e1c:	f3ef 8310 	mrs	r3, PRIMASK
   15e20:	60fb      	str	r3, [r7, #12]
  return(result);
   15e22:	68fb      	ldr	r3, [r7, #12]
		CO_LOCK_CAN_SEND();
   15e24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
   15e26:	b672      	cpsid	i
		HalCanErrorCode=can_async_write(CAN_Module->CANBaseDescriptor, &msgHeader);
   15e28:	687b      	ldr	r3, [r7, #4]
   15e2a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15e2e:	681a      	ldr	r2, [r3, #0]
   15e30:	687b      	ldr	r3, [r7, #4]
   15e32:	3384      	adds	r3, #132	; 0x84
   15e34:	4619      	mov	r1, r3
   15e36:	4610      	mov	r0, r2
   15e38:	4b19      	ldr	r3, [pc, #100]	; (15ea0 <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x140>)
   15e3a:	4798      	blx	r3
   15e3c:	4603      	mov	r3, r0
   15e3e:	461a      	mov	r2, r3
   15e40:	687b      	ldr	r3, [r7, #4]
   15e42:	629a      	str	r2, [r3, #40]	; 0x28
   15e44:	697b      	ldr	r3, [r7, #20]
   15e46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   15e48:	693b      	ldr	r3, [r7, #16]
   15e4a:	f383 8810 	msr	PRIMASK, r3
		CO_UNLOCK_CAN_SEND();
		if(HalCanErrorCode != CO_ERROR_NO)
   15e4e:	687b      	ldr	r3, [r7, #4]
   15e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15e52:	2b00      	cmp	r3, #0
   15e54:	bf14      	ite	ne
   15e56:	2301      	movne	r3, #1
   15e58:	2300      	moveq	r3, #0
   15e5a:	b2db      	uxtb	r3, r3
   15e5c:	2b00      	cmp	r3, #0
   15e5e:	d00d      	beq.n	15e7c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
		{
			err = CO_ERROR_HAL;
   15e60:	687b      	ldr	r3, [r7, #4]
   15e62:	22f1      	movs	r2, #241	; 0xf1
   15e64:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
   15e68:	e008      	b.n	15e7c <_ZN15CO_Driver_Class8CAN_SendEP10CO_CANtx_t+0x11c>
			//CANmodule->CANtxCount++;
		}
	}	/* if no buffer is free, message will be sent in the task */
	else
	{
		buffer->bufferFull = true;
   15e6a:	683b      	ldr	r3, [r7, #0]
   15e6c:	2201      	movs	r2, #1
   15e6e:	735a      	strb	r2, [r3, #13]
		CAN_Module->CANtxCount++;
   15e70:	687b      	ldr	r3, [r7, #4]
   15e72:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15e76:	699a      	ldr	r2, [r3, #24]
   15e78:	3201      	adds	r2, #1
   15e7a:	619a      	str	r2, [r3, #24]
	}
	

	return err;
   15e7c:	687b      	ldr	r3, [r7, #4]
   15e7e:	f993 30b6 	ldrsb.w	r3, [r3, #182]	; 0xb6
}
   15e82:	4618      	mov	r0, r3
   15e84:	371c      	adds	r7, #28
   15e86:	46bd      	mov	sp, r7
   15e88:	bd90      	pop	{r4, r7, pc}
   15e8a:	bf00      	nop
   15e8c:	000162b1 	.word	0x000162b1
   15e90:	00015921 	.word	0x00015921
   15e94:	00015811 	.word	0x00015811
   15e98:	000034c5 	.word	0x000034c5
   15e9c:	000033f1 	.word	0x000033f1
   15ea0:	00003479 	.word	0x00003479

00015ea4 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv>:
}

/*Interrupt handlers*/
/******************************************************************************/
void CO_Driver_Class::ProcessInterrupt_Rx(void)
{
   15ea4:	b580      	push	{r7, lr}
   15ea6:	b084      	sub	sp, #16
   15ea8:	af00      	add	r7, sp, #0
   15eaa:	6078      	str	r0, [r7, #4]

	msgMatched = false;
   15eac:	687b      	ldr	r3, [r7, #4]
   15eae:	2200      	movs	r2, #0
   15eb0:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

	ConvertCANMsg2CORxMsg(receivedCOMsg,&CANmessage);
   15eb4:	687b      	ldr	r3, [r7, #4]
   15eb6:	f103 0170 	add.w	r1, r3, #112	; 0x70
   15eba:	687b      	ldr	r3, [r7, #4]
   15ebc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   15ec0:	461a      	mov	r2, r3
   15ec2:	6878      	ldr	r0, [r7, #4]
   15ec4:	4b5b      	ldr	r3, [pc, #364]	; (16034 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x190>)
   15ec6:	4798      	blx	r3
	MsgBuff=CAN_Module->rxArray;
   15ec8:	687b      	ldr	r3, [r7, #4]
   15eca:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15ece:	685a      	ldr	r2, [r3, #4]
   15ed0:	687b      	ldr	r3, [r7, #4]
   15ed2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	/* Search rxArray form CANmodule for the same CAN-ID. */
	uint32_t msgCO = (((uint32_t)(CANmessage.ident << 2)) | (uint32_t)(msg.type));
   15ed6:	687b      	ldr	r3, [r7, #4]
   15ed8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   15edc:	009b      	lsls	r3, r3, #2
   15ede:	687a      	ldr	r2, [r7, #4]
   15ee0:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
   15ee4:	4313      	orrs	r3, r2
   15ee6:	60fb      	str	r3, [r7, #12]
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
   15ee8:	687b      	ldr	r3, [r7, #4]
   15eea:	2200      	movs	r2, #0
   15eec:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   15ef0:	687b      	ldr	r3, [r7, #4]
   15ef2:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
   15ef6:	687b      	ldr	r3, [r7, #4]
   15ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   15efc:	689b      	ldr	r3, [r3, #8]
   15efe:	429a      	cmp	r2, r3
   15f00:	d221      	bcs.n	15f46 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xa2>
	{
		
		if (((msgCO ^ MsgBuff->ident) & MsgBuff->mask) == 0)
   15f02:	687b      	ldr	r3, [r7, #4]
   15f04:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   15f08:	681a      	ldr	r2, [r3, #0]
   15f0a:	68fb      	ldr	r3, [r7, #12]
   15f0c:	405a      	eors	r2, r3
   15f0e:	687b      	ldr	r3, [r7, #4]
   15f10:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   15f14:	685b      	ldr	r3, [r3, #4]
   15f16:	4013      	ands	r3, r2
   15f18:	2b00      	cmp	r3, #0
   15f1a:	d104      	bne.n	15f26 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x82>
		{
			msgMatched = true;
   15f1c:	687b      	ldr	r3, [r7, #4]
   15f1e:	2201      	movs	r2, #1
   15f20:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			break;
   15f24:	e00f      	b.n	15f46 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xa2>
		}
		MsgBuff++;
   15f26:	687b      	ldr	r3, [r7, #4]
   15f28:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   15f2c:	f103 0210 	add.w	r2, r3, #16
   15f30:	687b      	ldr	r3, [r7, #4]
   15f32:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	for (index = 0; index < RxFifo_Callback_CanModule_p->rxSize; index++)
   15f36:	687b      	ldr	r3, [r7, #4]
   15f38:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
   15f3c:	1c5a      	adds	r2, r3, #1
   15f3e:	687b      	ldr	r3, [r7, #4]
   15f40:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   15f44:	e7d4      	b.n	15ef0 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x4c>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
   15f46:	687b      	ldr	r3, [r7, #4]
   15f48:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
   15f4c:	2b00      	cmp	r3, #0
   15f4e:	d018      	beq.n	15f82 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xde>
   15f50:	687b      	ldr	r3, [r7, #4]
   15f52:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   15f56:	2b00      	cmp	r3, #0
   15f58:	d013      	beq.n	15f82 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xde>
   15f5a:	687b      	ldr	r3, [r7, #4]
   15f5c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   15f60:	68db      	ldr	r3, [r3, #12]
   15f62:	2b00      	cmp	r3, #0
   15f64:	d00d      	beq.n	15f82 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0xde>
	{
			//printf("  %X", CANmessage.ident);
			MsgBuff->pFunct(MsgBuff->object, &CANmessage);
   15f66:	687b      	ldr	r3, [r7, #4]
   15f68:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   15f6c:	68db      	ldr	r3, [r3, #12]
   15f6e:	687a      	ldr	r2, [r7, #4]
   15f70:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
   15f74:	6890      	ldr	r0, [r2, #8]
   15f76:	687a      	ldr	r2, [r7, #4]
   15f78:	f502 7286 	add.w	r2, r2, #268	; 0x10c
   15f7c:	4611      	mov	r1, r2
   15f7e:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
   15f80:	e054      	b.n	1602c <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x188>
		if (CANmessage.ident==(CO_CAN_ID_TPDO_1+CCU_CANOPEN_NODE))
   15f82:	687b      	ldr	r3, [r7, #4]
   15f84:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   15f88:	f240 1283 	movw	r2, #387	; 0x183
   15f8c:	4293      	cmp	r3, r2
   15f8e:	d111      	bne.n	15fb4 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x110>
			memcpy((void*)CO_OD_RAM.voltage,(void*)&CANmessage.data[6],2);
   15f90:	687b      	ldr	r3, [r7, #4]
   15f92:	f203 1327 	addw	r3, r3, #295	; 0x127
   15f96:	881b      	ldrh	r3, [r3, #0]
   15f98:	b29a      	uxth	r2, r3
   15f9a:	4b27      	ldr	r3, [pc, #156]	; (16038 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x194>)
   15f9c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			memcpy(error_flags_array,(void*)&CANmessage.data[4],2);
   15fa0:	687b      	ldr	r3, [r7, #4]
   15fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   15fa6:	687a      	ldr	r2, [r7, #4]
   15fa8:	f202 1225 	addw	r2, r2, #293	; 0x125
   15fac:	8812      	ldrh	r2, [r2, #0]
   15fae:	b292      	uxth	r2, r2
   15fb0:	801a      	strh	r2, [r3, #0]
}
   15fb2:	e03b      	b.n	1602c <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x188>
			if (CANmessage.ident==(CO_CAN_ID_TPDO_2+CCU_CANOPEN_NODE)){
   15fb4:	687b      	ldr	r3, [r7, #4]
   15fb6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   15fba:	f240 2283 	movw	r2, #643	; 0x283
   15fbe:	4293      	cmp	r3, r2
   15fc0:	d110      	bne.n	15fe4 <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x140>
				memcpy((void*)&current_IQFilt,(void*)&CANmessage.data[0],2);
   15fc2:	687b      	ldr	r3, [r7, #4]
   15fc4:	3398      	adds	r3, #152	; 0x98
   15fc6:	687a      	ldr	r2, [r7, #4]
   15fc8:	f202 1221 	addw	r2, r2, #289	; 0x121
   15fcc:	8812      	ldrh	r2, [r2, #0]
   15fce:	b292      	uxth	r2, r2
   15fd0:	801a      	strh	r2, [r3, #0]
				memcpy((void*)&current_IDFilt,(void*)&CANmessage.data[2],2);
   15fd2:	687b      	ldr	r3, [r7, #4]
   15fd4:	339a      	adds	r3, #154	; 0x9a
   15fd6:	687a      	ldr	r2, [r7, #4]
   15fd8:	f202 1223 	addw	r2, r2, #291	; 0x123
   15fdc:	8812      	ldrh	r2, [r2, #0]
   15fde:	b292      	uxth	r2, r2
   15fe0:	801a      	strh	r2, [r3, #0]
}
   15fe2:	e023      	b.n	1602c <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x188>
				if (CANmessage.ident==(CO_CAN_ID_TPDO_4+CCU_CANOPEN_NODE)){
   15fe4:	687b      	ldr	r3, [r7, #4]
   15fe6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   15fea:	f240 4283 	movw	r2, #1155	; 0x483
   15fee:	4293      	cmp	r3, r2
   15ff0:	d11c      	bne.n	1602c <_ZN15CO_Driver_Class19ProcessInterrupt_RxEv+0x188>
						memcpy((void*)&compressor_temperatures[0],(void*)&CANmessage.data[0],2);
   15ff2:	687b      	ldr	r3, [r7, #4]
   15ff4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   15ff8:	687a      	ldr	r2, [r7, #4]
   15ffa:	f202 1221 	addw	r2, r2, #289	; 0x121
   15ffe:	8812      	ldrh	r2, [r2, #0]
   16000:	b292      	uxth	r2, r2
   16002:	801a      	strh	r2, [r3, #0]
						memcpy((void*)&compressor_temperatures[1],(void*)&CANmessage.data[4],2);
   16004:	687b      	ldr	r3, [r7, #4]
   16006:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1600a:	3302      	adds	r3, #2
   1600c:	687a      	ldr	r2, [r7, #4]
   1600e:	f202 1225 	addw	r2, r2, #293	; 0x125
   16012:	8812      	ldrh	r2, [r2, #0]
   16014:	b292      	uxth	r2, r2
   16016:	801a      	strh	r2, [r3, #0]
						memcpy((void*)&compressor_temperatures[2],(void*)&CANmessage.data[6],2);
   16018:	687b      	ldr	r3, [r7, #4]
   1601a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1601e:	3304      	adds	r3, #4
   16020:	687a      	ldr	r2, [r7, #4]
   16022:	f202 1227 	addw	r2, r2, #295	; 0x127
   16026:	8812      	ldrh	r2, [r2, #0]
   16028:	b292      	uxth	r2, r2
   1602a:	801a      	strh	r2, [r3, #0]
}
   1602c:	bf00      	nop
   1602e:	3710      	adds	r7, #16
   16030:	46bd      	mov	sp, r7
   16032:	bd80      	pop	{r7, pc}
   16034:	0001596d 	.word	0x0001596d
   16038:	20000220 	.word	0x20000220

0001603c <_ZN18CO_Emergency_ClassC1Ev>:
#include "CO_Driver_Class.h"

CO_Emergency_Class	*ptrCOEMClass;

// default constructor
CO_Emergency_Class::CO_Emergency_Class()
   1603c:	b580      	push	{r7, lr}
   1603e:	b082      	sub	sp, #8
   16040:	af00      	add	r7, sp, #0
   16042:	6078      	str	r0, [r7, #4]
   16044:	6878      	ldr	r0, [r7, #4]
   16046:	4b05      	ldr	r3, [pc, #20]	; (1605c <_ZN18CO_Emergency_ClassC1Ev+0x20>)
   16048:	4798      	blx	r3
{
	ptrCOEMClass=this;
   1604a:	4a05      	ldr	r2, [pc, #20]	; (16060 <_ZN18CO_Emergency_ClassC1Ev+0x24>)
   1604c:	687b      	ldr	r3, [r7, #4]
   1604e:	6013      	str	r3, [r2, #0]
} //CO_Emergency_Class
   16050:	687b      	ldr	r3, [r7, #4]
   16052:	4618      	mov	r0, r3
   16054:	3708      	adds	r7, #8
   16056:	46bd      	mov	sp, r7
   16058:	bd80      	pop	{r7, pc}
   1605a:	bf00      	nop
   1605c:	00017779 	.word	0x00017779
   16060:	2000da74 	.word	0x2000da74

00016064 <_ZN18CO_Emergency_ClassD1Ev>:

// default destructor
CO_Emergency_Class::~CO_Emergency_Class()
   16064:	b580      	push	{r7, lr}
   16066:	b082      	sub	sp, #8
   16068:	af00      	add	r7, sp, #0
   1606a:	6078      	str	r0, [r7, #4]
   1606c:	6878      	ldr	r0, [r7, #4]
   1606e:	4b03      	ldr	r3, [pc, #12]	; (1607c <_ZN18CO_Emergency_ClassD1Ev+0x18>)
   16070:	4798      	blx	r3
{
} //~CO_Emergency_Class
   16072:	687b      	ldr	r3, [r7, #4]
   16074:	4618      	mov	r0, r3
   16076:	3708      	adds	r7, #8
   16078:	46bd      	mov	sp, r7
   1607a:	bd80      	pop	{r7, pc}
   1607c:	000177a1 	.word	0x000177a1

00016080 <_ZL11CO_ODF_1003P12CO_ODF_arg_t>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static   CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
   16080:	b480      	push	{r7}
   16082:	b087      	sub	sp, #28
   16084:	af00      	add	r7, sp, #0
   16086:	6078      	str	r0, [r7, #4]
    
    uint8_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   16088:	2300      	movs	r3, #0
   1608a:	617b      	str	r3, [r7, #20]

    CO_EMpr_t *emPr = (CO_EMpr_t*) ODF_arg->object;
   1608c:	687b      	ldr	r3, [r7, #4]
   1608e:	681b      	ldr	r3, [r3, #0]
   16090:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
   16092:	687b      	ldr	r3, [r7, #4]
   16094:	685b      	ldr	r3, [r3, #4]
   16096:	781b      	ldrb	r3, [r3, #0]
   16098:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
   1609a:	687b      	ldr	r3, [r7, #4]
   1609c:	7f5b      	ldrb	r3, [r3, #29]
   1609e:	2b00      	cmp	r3, #0
   160a0:	d017      	beq.n	160d2 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x52>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
   160a2:	693b      	ldr	r3, [r7, #16]
   160a4:	7a5b      	ldrb	r3, [r3, #9]
   160a6:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
   160a8:	687b      	ldr	r3, [r7, #4]
   160aa:	7f1b      	ldrb	r3, [r3, #28]
   160ac:	2b00      	cmp	r3, #0
   160ae:	d104      	bne.n	160ba <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x3a>
            ODF_arg->data[0] = noOfErrors;
   160b0:	687b      	ldr	r3, [r7, #4]
   160b2:	685b      	ldr	r3, [r3, #4]
   160b4:	7bba      	ldrb	r2, [r7, #14]
   160b6:	701a      	strb	r2, [r3, #0]
   160b8:	e01b      	b.n	160f2 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else if(ODF_arg->subIndex > noOfErrors){
   160ba:	687b      	ldr	r3, [r7, #4]
   160bc:	7f1b      	ldrb	r3, [r3, #28]
   160be:	461a      	mov	r2, r3
   160c0:	7bbb      	ldrb	r3, [r7, #14]
   160c2:	429a      	cmp	r2, r3
   160c4:	dd02      	ble.n	160cc <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_NO_DATA;
   160c6:	4b0e      	ldr	r3, [pc, #56]	; (16100 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x80>)
   160c8:	617b      	str	r3, [r7, #20]
   160ca:	e012      	b.n	160f2 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
        else{
            ret = CO_SDO_AB_NONE;
   160cc:	2300      	movs	r3, #0
   160ce:	617b      	str	r3, [r7, #20]
   160d0:	e00f      	b.n	160f2 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
   160d2:	687b      	ldr	r3, [r7, #4]
   160d4:	7f1b      	ldrb	r3, [r3, #28]
   160d6:	2b00      	cmp	r3, #0
   160d8:	d109      	bne.n	160ee <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x6e>
            if(value == 0U){
   160da:	7bfb      	ldrb	r3, [r7, #15]
   160dc:	2b00      	cmp	r3, #0
   160de:	d103      	bne.n	160e8 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x68>
                emPr->preDefErrNoOfErrors = 0U;
   160e0:	693b      	ldr	r3, [r7, #16]
   160e2:	2200      	movs	r2, #0
   160e4:	725a      	strb	r2, [r3, #9]
   160e6:	e004      	b.n	160f2 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
   160e8:	4b06      	ldr	r3, [pc, #24]	; (16104 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x84>)
   160ea:	617b      	str	r3, [r7, #20]
   160ec:	e001      	b.n	160f2 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x72>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
   160ee:	4b06      	ldr	r3, [pc, #24]	; (16108 <_ZL11CO_ODF_1003P12CO_ODF_arg_t+0x88>)
   160f0:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
   160f2:	697b      	ldr	r3, [r7, #20]
}
   160f4:	4618      	mov	r0, r3
   160f6:	371c      	adds	r7, #28
   160f8:	46bd      	mov	sp, r7
   160fa:	bc80      	pop	{r7}
   160fc:	4770      	bx	lr
   160fe:	bf00      	nop
   16100:	08000024 	.word	0x08000024
   16104:	06090030 	.word	0x06090030
   16108:	06010002 	.word	0x06010002

0001610c <_ZL11CO_ODF_1014P12CO_ODF_arg_t>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */

static  CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
   1610c:	b580      	push	{r7, lr}
   1610e:	b086      	sub	sp, #24
   16110:	af00      	add	r7, sp, #0
   16112:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   16114:	2300      	movs	r3, #0
   16116:	617b      	str	r3, [r7, #20]
    nodeId = (uint8_t*) ODF_arg->object;
   16118:	687b      	ldr	r3, [r7, #4]
   1611a:	681b      	ldr	r3, [r3, #0]
   1611c:	613b      	str	r3, [r7, #16]
    value =ptrCOEMClass->CO_getUint32(ODF_arg->data);
   1611e:	4b0f      	ldr	r3, [pc, #60]	; (1615c <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x50>)
   16120:	681a      	ldr	r2, [r3, #0]
   16122:	687b      	ldr	r3, [r7, #4]
   16124:	685b      	ldr	r3, [r3, #4]
   16126:	4619      	mov	r1, r3
   16128:	4610      	mov	r0, r2
   1612a:	4b0d      	ldr	r3, [pc, #52]	; (16160 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x54>)
   1612c:	4798      	blx	r3
   1612e:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
   16130:	687b      	ldr	r3, [r7, #4]
   16132:	7f5b      	ldrb	r3, [r3, #29]
   16134:	2b00      	cmp	r3, #0
   16136:	d00b      	beq.n	16150 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x44>
        ptrCOEMClass->CO_setUint32(ODF_arg->data, value + *nodeId);
   16138:	4b08      	ldr	r3, [pc, #32]	; (1615c <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x50>)
   1613a:	6818      	ldr	r0, [r3, #0]
   1613c:	687b      	ldr	r3, [r7, #4]
   1613e:	6859      	ldr	r1, [r3, #4]
   16140:	693b      	ldr	r3, [r7, #16]
   16142:	781b      	ldrb	r3, [r3, #0]
   16144:	461a      	mov	r2, r3
   16146:	68fb      	ldr	r3, [r7, #12]
   16148:	4413      	add	r3, r2
   1614a:	461a      	mov	r2, r3
   1614c:	4b05      	ldr	r3, [pc, #20]	; (16164 <_ZL11CO_ODF_1014P12CO_ODF_arg_t+0x58>)
   1614e:	4798      	blx	r3
    }

    return ret;
   16150:	697b      	ldr	r3, [r7, #20]
}
   16152:	4618      	mov	r0, r3
   16154:	3718      	adds	r7, #24
   16156:	46bd      	mov	sp, r7
   16158:	bd80      	pop	{r7, pc}
   1615a:	bf00      	nop
   1615c:	2000da74 	.word	0x2000da74
   16160:	000177f9 	.word	0x000177f9
   16164:	0001782d 	.word	0x0001782d

00016168 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm>:
        uint32_t               *preDefErr,
        uint8_t                 preDefErrSize,
        CO_CANmodule_t         *CANdev,
        uint32_t                CANdevTxIdx,
        uint32_t                CANidTxEM)
{
   16168:	b590      	push	{r4, r7, lr}
   1616a:	b089      	sub	sp, #36	; 0x24
   1616c:	af02      	add	r7, sp, #8
   1616e:	60f8      	str	r0, [r7, #12]
   16170:	60b9      	str	r1, [r7, #8]
   16172:	607a      	str	r2, [r7, #4]
   16174:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL ||
   16176:	68bb      	ldr	r3, [r7, #8]
   16178:	2b00      	cmp	r3, #0
   1617a:	d015      	beq.n	161a8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   1617c:	687b      	ldr	r3, [r7, #4]
   1617e:	2b00      	cmp	r3, #0
   16180:	d012      	beq.n	161a8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   16182:	683b      	ldr	r3, [r7, #0]
   16184:	2b00      	cmp	r3, #0
   16186:	d00f      	beq.n	161a8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   16188:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1618a:	2b00      	cmp	r3, #0
   1618c:	d00c      	beq.n	161a8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   1618e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   16192:	2b05      	cmp	r3, #5
   16194:	d908      	bls.n	161a8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
        errorStatusBitsSize<6U || errorRegister==NULL || preDefErr==NULL || CANdev==NULL){
   16196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16198:	2b00      	cmp	r3, #0
   1619a:	d005      	beq.n	161a8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   1619c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1619e:	2b00      	cmp	r3, #0
   161a0:	d002      	beq.n	161a8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x40>
   161a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   161a4:	2b00      	cmp	r3, #0
   161a6:	d102      	bne.n	161ae <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x46>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   161a8:	f04f 33ff 	mov.w	r3, #4294967295
   161ac:	e072      	b.n	16294 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x12c>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
   161ae:	68bb      	ldr	r3, [r7, #8]
   161b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   161b2:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
   161b4:	68bb      	ldr	r3, [r7, #8]
   161b6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   161ba:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
   161bc:	68bb      	ldr	r3, [r7, #8]
   161be:	3305      	adds	r3, #5
   161c0:	f103 0250 	add.w	r2, r3, #80	; 0x50
   161c4:	68bb      	ldr	r3, [r7, #8]
   161c6:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
   161c8:	68bb      	ldr	r3, [r7, #8]
   161ca:	1d5a      	adds	r2, r3, #5
   161cc:	68bb      	ldr	r3, [r7, #8]
   161ce:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
   161d0:	68bb      	ldr	r3, [r7, #8]
   161d2:	1d5a      	adds	r2, r3, #5
   161d4:	68bb      	ldr	r3, [r7, #8]
   161d6:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
   161d8:	68bb      	ldr	r3, [r7, #8]
   161da:	2200      	movs	r2, #0
   161dc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
   161e0:	68bb      	ldr	r3, [r7, #8]
   161e2:	2200      	movs	r2, #0
   161e4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    em->handler            = NULL;
   161e8:	68bb      	ldr	r3, [r7, #8]
   161ea:	2200      	movs	r2, #0
   161ec:	669a      	str	r2, [r3, #104]	; 0x68
    emPr->em                    = em;
   161ee:	687b      	ldr	r3, [r7, #4]
   161f0:	68ba      	ldr	r2, [r7, #8]
   161f2:	611a      	str	r2, [r3, #16]
    emPr->errorRegister         = errorRegister;
   161f4:	687b      	ldr	r3, [r7, #4]
   161f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   161f8:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
   161fa:	687b      	ldr	r3, [r7, #4]
   161fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   161fe:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
   16200:	687b      	ldr	r3, [r7, #4]
   16202:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
   16206:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
   16208:	687b      	ldr	r3, [r7, #4]
   1620a:	2200      	movs	r2, #0
   1620c:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
   1620e:	687b      	ldr	r3, [r7, #4]
   16210:	2200      	movs	r2, #0
   16212:	60da      	str	r2, [r3, #12]
 
    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
   16214:	2300      	movs	r3, #0
   16216:	75fb      	strb	r3, [r7, #23]
   16218:	7dfa      	ldrb	r2, [r7, #23]
   1621a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1621e:	429a      	cmp	r2, r3
   16220:	da09      	bge.n	16236 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xce>
        em->errorStatusBits[i] = 0U;
   16222:	68bb      	ldr	r3, [r7, #8]
   16224:	681a      	ldr	r2, [r3, #0]
   16226:	7dfb      	ldrb	r3, [r7, #23]
   16228:	4413      	add	r3, r2
   1622a:	2200      	movs	r2, #0
   1622c:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
   1622e:	7dfb      	ldrb	r3, [r7, #23]
   16230:	3301      	adds	r3, #1
   16232:	75fb      	strb	r3, [r7, #23]
   16234:	e7f0      	b.n	16218 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0xb0>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure( OD_H1003_PREDEF_ERR_FIELD,CO_ODF_1003, (void*)emPr, 0, 0U);
   16236:	2300      	movs	r3, #0
   16238:	9301      	str	r3, [sp, #4]
   1623a:	2300      	movs	r3, #0
   1623c:	9300      	str	r3, [sp, #0]
   1623e:	687b      	ldr	r3, [r7, #4]
   16240:	4a16      	ldr	r2, [pc, #88]	; (1629c <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x134>)
   16242:	f241 0103 	movw	r1, #4099	; 0x1003
   16246:	68f8      	ldr	r0, [r7, #12]
   16248:	4c15      	ldr	r4, [pc, #84]	; (162a0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
   1624a:	47a0      	blx	r4
    CO_OD_configure( OD_H1014_COBID_EMERGENCY,CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
   1624c:	683b      	ldr	r3, [r7, #0]
   1624e:	f103 0268 	add.w	r2, r3, #104	; 0x68
   16252:	2300      	movs	r3, #0
   16254:	9301      	str	r3, [sp, #4]
   16256:	2300      	movs	r3, #0
   16258:	9300      	str	r3, [sp, #0]
   1625a:	4613      	mov	r3, r2
   1625c:	4a11      	ldr	r2, [pc, #68]	; (162a4 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x13c>)
   1625e:	f241 0114 	movw	r1, #4116	; 0x1014
   16262:	68f8      	ldr	r0, [r7, #12]
   16264:	4c0e      	ldr	r4, [pc, #56]	; (162a0 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x138>)
   16266:	47a0      	blx	r4

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdev;
   16268:	687b      	ldr	r3, [r7, #4]
   1626a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1626c:	615a      	str	r2, [r3, #20]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
   1626e:	687b      	ldr	r3, [r7, #4]
   16270:	695b      	ldr	r3, [r3, #20]
   16272:	68ba      	ldr	r2, [r7, #8]
   16274:	621a      	str	r2, [r3, #32]
    emPr->CANtxBuff =canopen_driver->CAN_Tx_BufferInit(
   16276:	4b0c      	ldr	r3, [pc, #48]	; (162a8 <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x140>)
   16278:	6818      	ldr	r0, [r3, #0]
   1627a:	2300      	movs	r3, #0
   1627c:	9301      	str	r3, [sp, #4]
   1627e:	2308      	movs	r3, #8
   16280:	9300      	str	r3, [sp, #0]
   16282:	2300      	movs	r3, #0
   16284:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   16286:	6c39      	ldr	r1, [r7, #64]	; 0x40
   16288:	4c08      	ldr	r4, [pc, #32]	; (162ac <_ZN18CO_Emergency_Class7EM_InitEP7CO_EM_tP9CO_EMpr_tP8CO_SDO_tPhhS6_PmhP14CO_CANmodule_tmm+0x144>)
   1628a:	47a0      	blx	r4
   1628c:	4602      	mov	r2, r0
   1628e:	687b      	ldr	r3, [r7, #4]
   16290:	619a      	str	r2, [r3, #24]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
   16292:	2300      	movs	r3, #0
}
   16294:	4618      	mov	r0, r3
   16296:	371c      	adds	r7, #28
   16298:	46bd      	mov	sp, r7
   1629a:	bd90      	pop	{r4, r7, pc}
   1629c:	00016081 	.word	0x00016081
   162a0:	00017c4d 	.word	0x00017c4d
   162a4:	0001610d 	.word	0x0001610d
   162a8:	2000da5c 	.word	0x2000da5c
   162ac:	00015cb5 	.word	0x00015cb5

000162b0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm>:
    return;
}


/******************************************************************************/
void CO_Emergency_Class::EM_ErrorReport(CO_EM_t *em, const uint8_t errorBit, const uint32_t errorCode, const uint32_t infoCode){
   162b0:	b590      	push	{r4, r7, lr}
   162b2:	b08d      	sub	sp, #52	; 0x34
   162b4:	af00      	add	r7, sp, #0
   162b6:	60f8      	str	r0, [r7, #12]
   162b8:	60b9      	str	r1, [r7, #8]
   162ba:	603b      	str	r3, [r7, #0]
   162bc:	4613      	mov	r3, r2
   162be:	71fb      	strb	r3, [r7, #7]
    uint8_t index = errorBit >> 3;
   162c0:	79fb      	ldrb	r3, [r7, #7]
   162c2:	10db      	asrs	r3, r3, #3
   162c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
   162c8:	79fb      	ldrb	r3, [r7, #7]
   162ca:	f003 0307 	and.w	r3, r3, #7
   162ce:	2201      	movs	r2, #1
   162d0:	fa02 f303 	lsl.w	r3, r2, r3
   162d4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
   162d8:	2300      	movs	r3, #0
   162da:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
   162dc:	2301      	movs	r3, #1
   162de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
   162e2:	68bb      	ldr	r3, [r7, #8]
   162e4:	2b00      	cmp	r3, #0
   162e6:	d103      	bne.n	162f0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x40>
        sendEmergency = false;
   162e8:	2300      	movs	r3, #0
   162ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   162ee:	e01e      	b.n	1632e <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else if(index >= em->errorStatusBitsSize){
   162f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   162f4:	68ba      	ldr	r2, [r7, #8]
   162f6:	7912      	ldrb	r2, [r2, #4]
   162f8:	4293      	cmp	r3, r2
   162fa:	db07      	blt.n	1630c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x5c>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
   162fc:	68bb      	ldr	r3, [r7, #8]
   162fe:	79fa      	ldrb	r2, [r7, #7]
   16300:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
   16304:	2300      	movs	r3, #0
   16306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   1630a:	e010      	b.n	1632e <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
   1630c:	68bb      	ldr	r3, [r7, #8]
   1630e:	681a      	ldr	r2, [r3, #0]
   16310:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   16314:	4413      	add	r3, r2
   16316:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
   16318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1631a:	781a      	ldrb	r2, [r3, #0]
   1631c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   16320:	4013      	ands	r3, r2
   16322:	b2db      	uxtb	r3, r3
   16324:	2b00      	cmp	r3, #0
   16326:	d002      	beq.n	1632e <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x7e>
            sendEmergency = false;
   16328:	2300      	movs	r3, #0
   1632a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
   1632e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   16332:	2b00      	cmp	r3, #0
   16334:	d05c      	beq.n	163f0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
        /* set error bit */
        if(errorBit){
   16336:	79fb      	ldrb	r3, [r7, #7]
   16338:	2b00      	cmp	r3, #0
   1633a:	d007      	beq.n	1634c <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x9c>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
   1633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1633e:	781a      	ldrb	r2, [r3, #0]
   16340:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   16344:	4313      	orrs	r3, r2
   16346:	b2da      	uxtb	r2, r3
   16348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1634a:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
   1634c:	68bb      	ldr	r3, [r7, #8]
   1634e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   16352:	2b00      	cmp	r3, #0
   16354:	d004      	beq.n	16360 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0xb0>
            em->bufFull = 2;
   16356:	68bb      	ldr	r3, [r7, #8]
   16358:	2202      	movs	r2, #2
   1635a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->handler != NULL) {
                em->handler();
            }
        }
    }
}
   1635e:	e047      	b.n	163f0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
            CO_memcpySwap2(&bufCopy[0], &errorCode);
   16360:	463a      	mov	r2, r7
   16362:	f107 0318 	add.w	r3, r7, #24
   16366:	4619      	mov	r1, r3
   16368:	68f8      	ldr	r0, [r7, #12]
   1636a:	4b23      	ldr	r3, [pc, #140]	; (163f8 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x148>)
   1636c:	4798      	blx	r3
            bufCopy[2] = 0; /* error register will be set later */
   1636e:	2300      	movs	r3, #0
   16370:	76bb      	strb	r3, [r7, #26]
            bufCopy[3] = errorBit;
   16372:	79fb      	ldrb	r3, [r7, #7]
   16374:	76fb      	strb	r3, [r7, #27]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
   16376:	f107 0318 	add.w	r3, r7, #24
   1637a:	3304      	adds	r3, #4
   1637c:	f107 0240 	add.w	r2, r7, #64	; 0x40
   16380:	4619      	mov	r1, r3
   16382:	68f8      	ldr	r0, [r7, #12]
   16384:	4b1d      	ldr	r3, [pc, #116]	; (163fc <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x14c>)
   16386:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   16388:	f3ef 8310 	mrs	r3, PRIMASK
   1638c:	617b      	str	r3, [r7, #20]
  return(result);
   1638e:	697b      	ldr	r3, [r7, #20]
            CO_LOCK_EMCY();
   16390:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
   16392:	b672      	cpsid	i
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
   16394:	68bb      	ldr	r3, [r7, #8]
   16396:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
   16398:	f107 0218 	add.w	r2, r7, #24
   1639c:	2308      	movs	r3, #8
   1639e:	68f8      	ldr	r0, [r7, #12]
   163a0:	4c17      	ldr	r4, [pc, #92]	; (16400 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x150>)
   163a2:	47a0      	blx	r4
            em->bufWritePtr += 8;
   163a4:	68bb      	ldr	r3, [r7, #8]
   163a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   163a8:	f103 0208 	add.w	r2, r3, #8
   163ac:	68bb      	ldr	r3, [r7, #8]
   163ae:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
   163b0:	68bb      	ldr	r3, [r7, #8]
   163b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   163b4:	68bb      	ldr	r3, [r7, #8]
   163b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   163b8:	429a      	cmp	r2, r3
   163ba:	d103      	bne.n	163c4 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x114>
   163bc:	68bb      	ldr	r3, [r7, #8]
   163be:	1d5a      	adds	r2, r3, #5
   163c0:	68bb      	ldr	r3, [r7, #8]
   163c2:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
   163c4:	68bb      	ldr	r3, [r7, #8]
   163c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   163c8:	68bb      	ldr	r3, [r7, #8]
   163ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   163cc:	429a      	cmp	r2, r3
   163ce:	d103      	bne.n	163d8 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x128>
   163d0:	68bb      	ldr	r3, [r7, #8]
   163d2:	2201      	movs	r2, #1
   163d4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
   163d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   163da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   163dc:	6a3b      	ldr	r3, [r7, #32]
   163de:	f383 8810 	msr	PRIMASK, r3
            if(em->handler != NULL) {
   163e2:	68bb      	ldr	r3, [r7, #8]
   163e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   163e6:	2b00      	cmp	r3, #0
   163e8:	d002      	beq.n	163f0 <_ZN18CO_Emergency_Class14EM_ErrorReportEP7CO_EM_thmm+0x140>
                em->handler();
   163ea:	68bb      	ldr	r3, [r7, #8]
   163ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   163ee:	4798      	blx	r3
}
   163f0:	bf00      	nop
   163f2:	3734      	adds	r7, #52	; 0x34
   163f4:	46bd      	mov	sp, r7
   163f6:	bd90      	pop	{r4, r7, pc}
   163f8:	00017865 	.word	0x00017865
   163fc:	00017895 	.word	0x00017895
   16400:	000177bd 	.word	0x000177bd

00016404 <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t>:
#include "string.h"

CO_HB_Consumer_Class	*ptrHBConsumerClass;
CO_HBconsNode_t         *ptrMonitoredNodes;

static void CO_HBcons_receive(void *object,const CO_CANrxMsg_t *msg){
   16404:	b480      	push	{r7}
   16406:	b085      	sub	sp, #20
   16408:	af00      	add	r7, sp, #0
   1640a:	6078      	str	r0, [r7, #4]
   1640c:	6039      	str	r1, [r7, #0]
	CO_HBconsNode_t *HBconsNode;

	HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
   1640e:	687b      	ldr	r3, [r7, #4]
   16410:	60fb      	str	r3, [r7, #12]

	/* verify message length */
	if(msg->DLC == 1){
   16412:	683b      	ldr	r3, [r7, #0]
   16414:	7d1b      	ldrb	r3, [r3, #20]
   16416:	2b01      	cmp	r3, #1
   16418:	d106      	bne.n	16428 <_ZL17CO_HBcons_receivePvPK13CO_CANrxMsg_t+0x24>
		/* copy data and set 'new message' flag. */
		HBconsNode->NMTstate = msg->data[0];
   1641a:	683b      	ldr	r3, [r7, #0]
   1641c:	7d5a      	ldrb	r2, [r3, #21]
   1641e:	68fb      	ldr	r3, [r7, #12]
   16420:	701a      	strb	r2, [r3, #0]
		HBconsNode->CANrxNew = true;
   16422:	68fb      	ldr	r3, [r7, #12]
   16424:	2201      	movs	r2, #1
   16426:	731a      	strb	r2, [r3, #12]
	}
	
	
	
}
   16428:	bf00      	nop
   1642a:	3714      	adds	r7, #20
   1642c:	46bd      	mov	sp, r7
   1642e:	bc80      	pop	{r7}
   16430:	4770      	bx	lr
	...

00016434 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm>:
static void CO_HBcons_monitoredNodeConfig(
CO_HBconsumer_t        *HBcons,
uint8_t                 idx,
uint32_t                HBconsTime)
{
   16434:	b590      	push	{r4, r7, lr}
   16436:	b08d      	sub	sp, #52	; 0x34
   16438:	af04      	add	r7, sp, #16
   1643a:	60f8      	str	r0, [r7, #12]
   1643c:	460b      	mov	r3, r1
   1643e:	607a      	str	r2, [r7, #4]
   16440:	72fb      	strb	r3, [r7, #11]
	uint32_t COB_ID;
	uint32_t NodeID;
	CO_HBconsNode_t *monitoredNode;

	if(idx >= HBcons->numberOfMonitoredNodes) return;
   16442:	7afb      	ldrb	r3, [r7, #11]
   16444:	461a      	mov	r2, r3
   16446:	68fb      	ldr	r3, [r7, #12]
   16448:	7b1b      	ldrb	r3, [r3, #12]
   1644a:	429a      	cmp	r2, r3
   1644c:	da37      	bge.n	164be <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8a>

//	NodeID = (uint32_t)((HBconsTime>>16)&0xFF);
	NodeID = (uint32_t)(idx);
   1644e:	7afb      	ldrb	r3, [r7, #11]
   16450:	61bb      	str	r3, [r7, #24]
	monitoredNode = &HBcons->monitoredNodes[idx];
   16452:	68fb      	ldr	r3, [r7, #12]
   16454:	689a      	ldr	r2, [r3, #8]
   16456:	7afb      	ldrb	r3, [r7, #11]
   16458:	011b      	lsls	r3, r3, #4
   1645a:	4413      	add	r3, r2
   1645c:	617b      	str	r3, [r7, #20]
	monitoredNode->time = (uint32_t)HBconsTime;
   1645e:	697b      	ldr	r3, [r7, #20]
   16460:	687a      	ldr	r2, [r7, #4]
   16462:	609a      	str	r2, [r3, #8]
	monitoredNode->NMTstate = 0;
   16464:	697b      	ldr	r3, [r7, #20]
   16466:	2200      	movs	r2, #0
   16468:	701a      	strb	r2, [r3, #0]
	monitoredNode->monStarted = false;
   1646a:	697b      	ldr	r3, [r7, #20]
   1646c:	2200      	movs	r2, #0
   1646e:	705a      	strb	r2, [r3, #1]
//	COB_ID = (uint32_t)idx + 0x700;
	// 	/* is channel used */
	if(NodeID && monitoredNode->time){
   16470:	69bb      	ldr	r3, [r7, #24]
   16472:	2b00      	cmp	r3, #0
   16474:	d008      	beq.n	16488 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x54>
   16476:	697b      	ldr	r3, [r7, #20]
   16478:	689b      	ldr	r3, [r3, #8]
   1647a:	2b00      	cmp	r3, #0
   1647c:	d004      	beq.n	16488 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x54>
		COB_ID = NodeID + 0x700;
   1647e:	69bb      	ldr	r3, [r7, #24]
   16480:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
   16484:	61fb      	str	r3, [r7, #28]
   16486:	e004      	b.n	16492 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x5e>
	}
	else{
		COB_ID = 0;
   16488:	2300      	movs	r3, #0
   1648a:	61fb      	str	r3, [r7, #28]
		monitoredNode->time = 0;
   1648c:	697b      	ldr	r3, [r7, #20]
   1648e:	2200      	movs	r2, #0
   16490:	609a      	str	r2, [r3, #8]
	}

	/* configure Heartbeat consumer CAN reception */
	canopen_driver->CAN_Rx_BufferInit(
   16492:	4b0d      	ldr	r3, [pc, #52]	; (164c8 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x94>)
   16494:	6818      	ldr	r0, [r3, #0]
	HBcons->CANdevRxIdxStart + idx,
   16496:	68fb      	ldr	r3, [r7, #12]
   16498:	695b      	ldr	r3, [r3, #20]
	canopen_driver->CAN_Rx_BufferInit(
   1649a:	7afa      	ldrb	r2, [r7, #11]
   1649c:	1899      	adds	r1, r3, r2
	COB_ID,
	0x7FF,
	0,
	(void*)&HBcons->monitoredNodes[idx],
   1649e:	68fb      	ldr	r3, [r7, #12]
   164a0:	689a      	ldr	r2, [r3, #8]
   164a2:	7afb      	ldrb	r3, [r7, #11]
   164a4:	011b      	lsls	r3, r3, #4
   164a6:	4413      	add	r3, r2
	CO_HBcons_receive);
   164a8:	4a08      	ldr	r2, [pc, #32]	; (164cc <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x98>)
   164aa:	9202      	str	r2, [sp, #8]
   164ac:	9301      	str	r3, [sp, #4]
   164ae:	2300      	movs	r3, #0
   164b0:	9300      	str	r3, [sp, #0]
   164b2:	f240 73ff 	movw	r3, #2047	; 0x7ff
   164b6:	69fa      	ldr	r2, [r7, #28]
   164b8:	4c05      	ldr	r4, [pc, #20]	; (164d0 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x9c>)
   164ba:	47a0      	blx	r4
   164bc:	e000      	b.n	164c0 <_ZL29CO_HBcons_monitoredNodeConfigP15CO_HBconsumer_thm+0x8c>
	if(idx >= HBcons->numberOfMonitoredNodes) return;
   164be:	bf00      	nop
}
   164c0:	3724      	adds	r7, #36	; 0x24
   164c2:	46bd      	mov	sp, r7
   164c4:	bd90      	pop	{r4, r7, pc}
   164c6:	bf00      	nop
   164c8:	2000da5c 	.word	0x2000da5c
   164cc:	00016405 	.word	0x00016405
   164d0:	00015bb5 	.word	0x00015bb5

000164d4 <_ZL11CO_ODF_1016P12CO_ODF_arg_t>:
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg){
   164d4:	b580      	push	{r7, lr}
   164d6:	b08c      	sub	sp, #48	; 0x30
   164d8:	af00      	add	r7, sp, #0
   164da:	6078      	str	r0, [r7, #4]
	CO_HBconsumer_t *HBcons;
	uint32_t value;
	CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   164dc:	2300      	movs	r3, #0
   164de:	62fb      	str	r3, [r7, #44]	; 0x2c

	HBcons = (CO_HBconsumer_t*) ODF_arg->object;
   164e0:	687b      	ldr	r3, [r7, #4]
   164e2:	681b      	ldr	r3, [r3, #0]
   164e4:	627b      	str	r3, [r7, #36]	; 0x24
	value =canopen_driver->CO_getUint32(ODF_arg->data);
   164e6:	4b32      	ldr	r3, [pc, #200]	; (165b0 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xdc>)
   164e8:	681b      	ldr	r3, [r3, #0]
   164ea:	1d1a      	adds	r2, r3, #4
   164ec:	687b      	ldr	r3, [r7, #4]
   164ee:	685b      	ldr	r3, [r3, #4]
   164f0:	4619      	mov	r1, r3
   164f2:	4610      	mov	r0, r2
   164f4:	4b2f      	ldr	r3, [pc, #188]	; (165b4 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe0>)
   164f6:	4798      	blx	r3
   164f8:	6238      	str	r0, [r7, #32]

	if(!ODF_arg->reading){
   164fa:	687b      	ldr	r3, [r7, #4]
   164fc:	7f5b      	ldrb	r3, [r3, #29]
   164fe:	2b00      	cmp	r3, #0
   16500:	d150      	bne.n	165a4 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
		uint8_t NodeID;
		uint32_t HBconsTime;

		NodeID = (value >> 16U) & 0xFFU;
   16502:	6a3b      	ldr	r3, [r7, #32]
   16504:	0c1b      	lsrs	r3, r3, #16
   16506:	77fb      	strb	r3, [r7, #31]
		HBconsTime = value & 0xFFFFU;
   16508:	6a3b      	ldr	r3, [r7, #32]
   1650a:	b29b      	uxth	r3, r3
   1650c:	61bb      	str	r3, [r7, #24]

		if((value & 0xFF800000U) != 0){
   1650e:	6a3b      	ldr	r3, [r7, #32]
   16510:	0ddb      	lsrs	r3, r3, #23
   16512:	05db      	lsls	r3, r3, #23
   16514:	2b00      	cmp	r3, #0
   16516:	d002      	beq.n	1651e <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x4a>
			ret = CO_SDO_AB_PRAM_INCOMPAT;
   16518:	4b27      	ldr	r3, [pc, #156]	; (165b8 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
   1651a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1651c:	e036      	b.n	1658c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
		}
		else if((HBconsTime != 0) && (NodeID != 0)){
   1651e:	69bb      	ldr	r3, [r7, #24]
   16520:	2b00      	cmp	r3, #0
   16522:	d02f      	beq.n	16584 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
   16524:	7ffb      	ldrb	r3, [r7, #31]
   16526:	2b00      	cmp	r3, #0
   16528:	d02c      	beq.n	16584 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb0>
			uint8_t i;
			/* there must not be more entries with same index and time different than zero */
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
   1652a:	2300      	movs	r3, #0
   1652c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   16530:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   16534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16536:	7b12      	ldrb	r2, [r2, #12]
   16538:	4293      	cmp	r3, r2
   1653a:	da26      	bge.n	1658a <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb6>
				uint32_t objectCopy = HBcons->HBconsTime[i];
   1653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1653e:	685a      	ldr	r2, [r3, #4]
   16540:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   16544:	009b      	lsls	r3, r3, #2
   16546:	4413      	add	r3, r2
   16548:	681b      	ldr	r3, [r3, #0]
   1654a:	617b      	str	r3, [r7, #20]
				uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
   1654c:	697b      	ldr	r3, [r7, #20]
   1654e:	0c1b      	lsrs	r3, r3, #16
   16550:	74fb      	strb	r3, [r7, #19]
				uint32_t HBconsTimeObj = objectCopy & 0xFFFFU;
   16552:	697b      	ldr	r3, [r7, #20]
   16554:	b29b      	uxth	r3, r3
   16556:	60fb      	str	r3, [r7, #12]
				if(((ODF_arg->subIndex-1U) != i) && (HBconsTimeObj != 0) && (NodeID == NodeIDObj)){
   16558:	687b      	ldr	r3, [r7, #4]
   1655a:	7f1b      	ldrb	r3, [r3, #28]
   1655c:	1e5a      	subs	r2, r3, #1
   1655e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   16562:	429a      	cmp	r2, r3
   16564:	d008      	beq.n	16578 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
   16566:	68fb      	ldr	r3, [r7, #12]
   16568:	2b00      	cmp	r3, #0
   1656a:	d005      	beq.n	16578 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
   1656c:	7ffa      	ldrb	r2, [r7, #31]
   1656e:	7cfb      	ldrb	r3, [r7, #19]
   16570:	429a      	cmp	r2, r3
   16572:	d101      	bne.n	16578 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xa4>
					ret = CO_SDO_AB_PRAM_INCOMPAT;
   16574:	4b10      	ldr	r3, [pc, #64]	; (165b8 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe4>)
   16576:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
   16578:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1657c:	3301      	adds	r3, #1
   1657e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   16582:	e7d5      	b.n	16530 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0x5c>
				}
			}
		}
		else{
			ret = CO_SDO_AB_NONE;
   16584:	2300      	movs	r3, #0
   16586:	62fb      	str	r3, [r7, #44]	; 0x2c
   16588:	e000      	b.n	1658c <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xb8>
			}
   1658a:	bf00      	nop
		}

		/* Configure */
		if(ret == CO_SDO_AB_NONE){
   1658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1658e:	2b00      	cmp	r3, #0
   16590:	d108      	bne.n	165a4 <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xd0>
			CO_HBcons_monitoredNodeConfig(HBcons, ODF_arg->subIndex-1U, value);
   16592:	687b      	ldr	r3, [r7, #4]
   16594:	7f1b      	ldrb	r3, [r3, #28]
   16596:	3b01      	subs	r3, #1
   16598:	b2db      	uxtb	r3, r3
   1659a:	6a3a      	ldr	r2, [r7, #32]
   1659c:	4619      	mov	r1, r3
   1659e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   165a0:	4b06      	ldr	r3, [pc, #24]	; (165bc <_ZL11CO_ODF_1016P12CO_ODF_arg_t+0xe8>)
   165a2:	4798      	blx	r3
		}
	}

	return ret;
   165a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   165a6:	4618      	mov	r0, r3
   165a8:	3730      	adds	r7, #48	; 0x30
   165aa:	46bd      	mov	sp, r7
   165ac:	bd80      	pop	{r7, pc}
   165ae:	bf00      	nop
   165b0:	2000da5c 	.word	0x2000da5c
   165b4:	000177f9 	.word	0x000177f9
   165b8:	06040043 	.word	0x06040043
   165bc:	00016435 	.word	0x00016435

000165c0 <_ZN20CO_HB_Consumer_ClassC1Ev>:


// default constructor
CO_HB_Consumer_Class::CO_HB_Consumer_Class()
   165c0:	b480      	push	{r7}
   165c2:	b083      	sub	sp, #12
   165c4:	af00      	add	r7, sp, #0
   165c6:	6078      	str	r0, [r7, #4]
{
	ptrHBConsumerClass=this;
   165c8:	4a04      	ldr	r2, [pc, #16]	; (165dc <_ZN20CO_HB_Consumer_ClassC1Ev+0x1c>)
   165ca:	687b      	ldr	r3, [r7, #4]
   165cc:	6013      	str	r3, [r2, #0]
} //CO_HB_Consumer_Class
   165ce:	687b      	ldr	r3, [r7, #4]
   165d0:	4618      	mov	r0, r3
   165d2:	370c      	adds	r7, #12
   165d4:	46bd      	mov	sp, r7
   165d6:	bc80      	pop	{r7}
   165d8:	4770      	bx	lr
   165da:	bf00      	nop
   165dc:	2000da78 	.word	0x2000da78

000165e0 <_ZN20CO_HB_Consumer_ClassD1Ev>:

// default destructor
CO_HB_Consumer_Class::~CO_HB_Consumer_Class()
   165e0:	b480      	push	{r7}
   165e2:	b083      	sub	sp, #12
   165e4:	af00      	add	r7, sp, #0
   165e6:	6078      	str	r0, [r7, #4]
{
} //~CO_HB_Consumer_Class
   165e8:	687b      	ldr	r3, [r7, #4]
   165ea:	4618      	mov	r0, r3
   165ec:	370c      	adds	r7, #12
   165ee:	46bd      	mov	sp, r7
   165f0:	bc80      	pop	{r7}
   165f2:	4770      	bx	lr

000165f4 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm>:
const uint32_t          HBconsTime[],
CO_HBconsNode_t         monitoredNodes[],
uint8_t                 numberOfMonitoredNodes,
CO_CANmodule_t         *CANdevRx,
uint32_t                CANdevRxIdxStart)
{
   165f4:	b590      	push	{r4, r7, lr}
   165f6:	b089      	sub	sp, #36	; 0x24
   165f8:	af02      	add	r7, sp, #8
   165fa:	60f8      	str	r0, [r7, #12]
   165fc:	60b9      	str	r1, [r7, #8]
   165fe:	607a      	str	r2, [r7, #4]
   16600:	603b      	str	r3, [r7, #0]
	uint8_t i;
	ptrMonitoredNodes=monitoredNodes;
   16602:	4a2b      	ldr	r2, [pc, #172]	; (166b0 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xbc>)
   16604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16606:	6013      	str	r3, [r2, #0]
	/* verify arguments */
	if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
   16608:	68bb      	ldr	r3, [r7, #8]
   1660a:	2b00      	cmp	r3, #0
   1660c:	d00e      	beq.n	1662c <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
   1660e:	687b      	ldr	r3, [r7, #4]
   16610:	2b00      	cmp	r3, #0
   16612:	d00b      	beq.n	1662c <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
   16614:	683b      	ldr	r3, [r7, #0]
   16616:	2b00      	cmp	r3, #0
   16618:	d008      	beq.n	1662c <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
   1661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1661c:	2b00      	cmp	r3, #0
   1661e:	d005      	beq.n	1662c <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
   16620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16622:	2b00      	cmp	r3, #0
   16624:	d002      	beq.n	1662c <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x38>
	monitoredNodes==NULL || CANdevRx==NULL){
   16626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16628:	2b00      	cmp	r3, #0
   1662a:	d102      	bne.n	16632 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x3e>
		return CO_ERROR_ILLEGAL_ARGUMENT;
   1662c:	f04f 33ff 	mov.w	r3, #4294967295
   16630:	e039      	b.n	166a6 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xb2>
	}

	/* Configure object variables */
	HBcons->em = em;
   16632:	68bb      	ldr	r3, [r7, #8]
   16634:	687a      	ldr	r2, [r7, #4]
   16636:	601a      	str	r2, [r3, #0]
	HBcons->HBconsTime = HBconsTime;
   16638:	68bb      	ldr	r3, [r7, #8]
   1663a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1663c:	605a      	str	r2, [r3, #4]
	HBcons->monitoredNodes = monitoredNodes;
   1663e:	68bb      	ldr	r3, [r7, #8]
   16640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16642:	609a      	str	r2, [r3, #8]
	HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
   16644:	68bb      	ldr	r3, [r7, #8]
   16646:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
   1664a:	731a      	strb	r2, [r3, #12]
	HBcons->allMonitoredOperational = 0;
   1664c:	68bb      	ldr	r3, [r7, #8]
   1664e:	2200      	movs	r2, #0
   16650:	735a      	strb	r2, [r3, #13]
	HBcons->CANdevRx = CANdevRx;
   16652:	68bb      	ldr	r3, [r7, #8]
   16654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16656:	611a      	str	r2, [r3, #16]
	HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
   16658:	68bb      	ldr	r3, [r7, #8]
   1665a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1665c:	615a      	str	r2, [r3, #20]

	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
   1665e:	2300      	movs	r3, #0
   16660:	75fb      	strb	r3, [r7, #23]
   16662:	7dfb      	ldrb	r3, [r7, #23]
   16664:	68ba      	ldr	r2, [r7, #8]
   16666:	7b12      	ldrb	r2, [r2, #12]
   16668:	4293      	cmp	r3, r2
   1666a:	da0e      	bge.n	1668a <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x96>

			CO_HBcons_monitoredNodeConfig(HBcons, i, HBcons->HBconsTime[i]);
   1666c:	68bb      	ldr	r3, [r7, #8]
   1666e:	685a      	ldr	r2, [r3, #4]
   16670:	7dfb      	ldrb	r3, [r7, #23]
   16672:	009b      	lsls	r3, r3, #2
   16674:	4413      	add	r3, r2
   16676:	681a      	ldr	r2, [r3, #0]
   16678:	7dfb      	ldrb	r3, [r7, #23]
   1667a:	4619      	mov	r1, r3
   1667c:	68b8      	ldr	r0, [r7, #8]
   1667e:	4b0d      	ldr	r3, [pc, #52]	; (166b4 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc0>)
   16680:	4798      	blx	r3
	for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
   16682:	7dfb      	ldrb	r3, [r7, #23]
   16684:	3301      	adds	r3, #1
   16686:	75fb      	strb	r3, [r7, #23]
   16688:	e7eb      	b.n	16662 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0x6e>
		
	}
	

	/* Configure Object dictionary entry at index 0x1016 */
	canopen_driver->CO_OD_configure( OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
   1668a:	4b0b      	ldr	r3, [pc, #44]	; (166b8 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc4>)
   1668c:	681b      	ldr	r3, [r3, #0]
   1668e:	1d18      	adds	r0, r3, #4
   16690:	2300      	movs	r3, #0
   16692:	9301      	str	r3, [sp, #4]
   16694:	2300      	movs	r3, #0
   16696:	9300      	str	r3, [sp, #0]
   16698:	68bb      	ldr	r3, [r7, #8]
   1669a:	4a08      	ldr	r2, [pc, #32]	; (166bc <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xc8>)
   1669c:	f241 0116 	movw	r1, #4118	; 0x1016
   166a0:	4c07      	ldr	r4, [pc, #28]	; (166c0 <_ZN20CO_HB_Consumer_Class18CO_HBconsumer_initEP15CO_HBconsumer_tP7CO_EM_tP8CO_SDO_tPKmP15CO_HBconsNode_thP14CO_CANmodule_tm+0xcc>)
   166a2:	47a0      	blx	r4

	return CO_ERROR_NO;
   166a4:	2300      	movs	r3, #0
}
   166a6:	4618      	mov	r0, r3
   166a8:	371c      	adds	r7, #28
   166aa:	46bd      	mov	sp, r7
   166ac:	bd90      	pop	{r4, r7, pc}
   166ae:	bf00      	nop
   166b0:	2000da7c 	.word	0x2000da7c
   166b4:	00016435 	.word	0x00016435
   166b8:	2000da5c 	.word	0x2000da5c
   166bc:	000164d5 	.word	0x000164d5
   166c0:	00017c4d 	.word	0x00017c4d

000166c4 <_ZN20CO_HB_Consumer_Class10HB_SetNodeEh>:
		AllMonitoredOperationalCopy = 0;
	}
	HBcons->allMonitoredOperational = AllMonitoredOperationalCopy;
}

void	CO_HB_Consumer_Class::HB_SetNode(uint8_t nd){
   166c4:	b480      	push	{r7}
   166c6:	b083      	sub	sp, #12
   166c8:	af00      	add	r7, sp, #0
   166ca:	6078      	str	r0, [r7, #4]
   166cc:	460b      	mov	r3, r1
   166ce:	70fb      	strb	r3, [r7, #3]
	coNode=nd;
   166d0:	687b      	ldr	r3, [r7, #4]
   166d2:	78fa      	ldrb	r2, [r7, #3]
   166d4:	711a      	strb	r2, [r3, #4]
}
   166d6:	bf00      	nop
   166d8:	370c      	adds	r7, #12
   166da:	46bd      	mov	sp, r7
   166dc:	bc80      	pop	{r7}
   166de:	4770      	bx	lr

000166e0 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t>:
#include "CO_Driver_Class.h"

 CO_NMT_t               *NMT;


static void CO_NMT_receive(void *object, const CO_CANrxMsg_t *msg){
   166e0:	b580      	push	{r7, lr}
   166e2:	b084      	sub	sp, #16
   166e4:	af00      	add	r7, sp, #0
   166e6:	6078      	str	r0, [r7, #4]
   166e8:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
   166ea:	687b      	ldr	r3, [r7, #4]
   166ec:	60fb      	str	r3, [r7, #12]

    nodeId = msg->data[1];
   166ee:	683b      	ldr	r3, [r7, #0]
   166f0:	7d9b      	ldrb	r3, [r3, #22]
   166f2:	72fb      	strb	r3, [r7, #11]

    if((msg->DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
   166f4:	683b      	ldr	r3, [r7, #0]
   166f6:	7d1b      	ldrb	r3, [r3, #20]
   166f8:	2b02      	cmp	r3, #2
   166fa:	d146      	bne.n	1678a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
   166fc:	7afb      	ldrb	r3, [r7, #11]
   166fe:	2b00      	cmp	r3, #0
   16700:	d004      	beq.n	1670c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x2c>
   16702:	68fb      	ldr	r3, [r7, #12]
   16704:	7a9b      	ldrb	r3, [r3, #10]
   16706:	7afa      	ldrb	r2, [r7, #11]
   16708:	429a      	cmp	r2, r3
   1670a:	d13e      	bne.n	1678a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
        uint8_t command = msg->data[0];
   1670c:	683b      	ldr	r3, [r7, #0]
   1670e:	7d5b      	ldrb	r3, [r3, #21]
   16710:	72bb      	strb	r3, [r7, #10]
        uint8_t currentOperatingState = NMT->operatingState;
   16712:	68fb      	ldr	r3, [r7, #12]
   16714:	781b      	ldrb	r3, [r3, #0]
   16716:	727b      	strb	r3, [r7, #9]

        switch(command){
   16718:	7abb      	ldrb	r3, [r7, #10]
   1671a:	2b80      	cmp	r3, #128	; 0x80
   1671c:	d019      	beq.n	16752 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x72>
   1671e:	2b80      	cmp	r3, #128	; 0x80
   16720:	dc04      	bgt.n	1672c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x4c>
   16722:	2b01      	cmp	r3, #1
   16724:	d007      	beq.n	16736 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x56>
   16726:	2b02      	cmp	r3, #2
   16728:	d00f      	beq.n	1674a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x6a>
   1672a:	e01f      	b.n	1676c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
   1672c:	2b81      	cmp	r3, #129	; 0x81
   1672e:	d014      	beq.n	1675a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x7a>
   16730:	2b82      	cmp	r3, #130	; 0x82
   16732:	d016      	beq.n	16762 <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x82>
   16734:	e01a      	b.n	1676c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_OPERATIONAL:
                if((*NMT->emPr->errorRegister) == 0U){
   16736:	68fb      	ldr	r3, [r7, #12]
   16738:	695b      	ldr	r3, [r3, #20]
   1673a:	681b      	ldr	r3, [r3, #0]
   1673c:	781b      	ldrb	r3, [r3, #0]
   1673e:	2b00      	cmp	r3, #0
   16740:	d113      	bne.n	1676a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
   16742:	68fb      	ldr	r3, [r7, #12]
   16744:	2205      	movs	r2, #5
   16746:	701a      	strb	r2, [r3, #0]
                }
                break;
   16748:	e00f      	b.n	1676a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8a>
            case CO_NMT_ENTER_STOPPED:
                NMT->operatingState = CO_NMT_STOPPED;
   1674a:	68fb      	ldr	r3, [r7, #12]
   1674c:	2204      	movs	r2, #4
   1674e:	701a      	strb	r2, [r3, #0]
                break;
   16750:	e00c      	b.n	1676c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_ENTER_PRE_OPERATIONAL:
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
   16752:	68fb      	ldr	r3, [r7, #12]
   16754:	227f      	movs	r2, #127	; 0x7f
   16756:	701a      	strb	r2, [r3, #0]
                break;
   16758:	e008      	b.n	1676c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_NODE:
                NMT->resetCommand = CO_RESET_APP;
   1675a:	68fb      	ldr	r3, [r7, #12]
   1675c:	2202      	movs	r2, #2
   1675e:	725a      	strb	r2, [r3, #9]
                break;
   16760:	e004      	b.n	1676c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
   16762:	68fb      	ldr	r3, [r7, #12]
   16764:	2201      	movs	r2, #1
   16766:	725a      	strb	r2, [r3, #9]
                break;
   16768:	e000      	b.n	1676c <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0x8c>
                break;
   1676a:	bf00      	nop
        }

        if(NMT->ptrState!=NULL && currentOperatingState!=NMT->operatingState){
   1676c:	68fb      	ldr	r3, [r7, #12]
   1676e:	69db      	ldr	r3, [r3, #28]
   16770:	2b00      	cmp	r3, #0
   16772:	d00a      	beq.n	1678a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
   16774:	68fb      	ldr	r3, [r7, #12]
   16776:	781b      	ldrb	r3, [r3, #0]
   16778:	7a7a      	ldrb	r2, [r7, #9]
   1677a:	429a      	cmp	r2, r3
   1677c:	d005      	beq.n	1678a <_ZL14CO_NMT_receivePvPK13CO_CANrxMsg_t+0xaa>
            NMT->ptrState((CO_NMT_internalState_t)NMT->operatingState);
   1677e:	68fb      	ldr	r3, [r7, #12]
   16780:	69db      	ldr	r3, [r3, #28]
   16782:	68fa      	ldr	r2, [r7, #12]
   16784:	7812      	ldrb	r2, [r2, #0]
   16786:	4610      	mov	r0, r2
   16788:	4798      	blx	r3
        }
    }
}
   1678a:	bf00      	nop
   1678c:	3710      	adds	r7, #16
   1678e:	46bd      	mov	sp, r7
   16790:	bd80      	pop	{r7, pc}

00016792 <_ZN22CO_NMT_Heartbeat_ClassC1Ev>:
// default constructor
CO_NMT_Heartbeat_Class::CO_NMT_Heartbeat_Class()
   16792:	b480      	push	{r7}
   16794:	b083      	sub	sp, #12
   16796:	af00      	add	r7, sp, #0
   16798:	6078      	str	r0, [r7, #4]
{
} //CO_NMT_Heartbeat
   1679a:	687b      	ldr	r3, [r7, #4]
   1679c:	4618      	mov	r0, r3
   1679e:	370c      	adds	r7, #12
   167a0:	46bd      	mov	sp, r7
   167a2:	bc80      	pop	{r7}
   167a4:	4770      	bx	lr

000167a6 <_ZN22CO_NMT_Heartbeat_ClassD1Ev>:

// default destructor
CO_NMT_Heartbeat_Class::~CO_NMT_Heartbeat_Class()
   167a6:	b480      	push	{r7}
   167a8:	b083      	sub	sp, #12
   167aa:	af00      	add	r7, sp, #0
   167ac:	6078      	str	r0, [r7, #4]
{
} //~CO_NMT_Heartbeat
   167ae:	687b      	ldr	r3, [r7, #4]
   167b0:	4618      	mov	r0, r3
   167b2:	370c      	adds	r7, #12
   167b4:	46bd      	mov	sp, r7
   167b6:	bc80      	pop	{r7}
   167b8:	4770      	bx	lr
	...

000167bc <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm>:
        uint32_t                NMT_rxIdx,
        uint32_t                CANidRxNMT,
        CO_CANmodule_t         *HB_CANdev,
        uint32_t                HB_txIdx,
        uint32_t                CANidTxHB)
{
   167bc:	b5b0      	push	{r4, r5, r7, lr}
   167be:	b088      	sub	sp, #32
   167c0:	af04      	add	r7, sp, #16
   167c2:	60f8      	str	r0, [r7, #12]
   167c4:	60b9      	str	r1, [r7, #8]
   167c6:	607a      	str	r2, [r7, #4]
   167c8:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if(NMT_Init==NULL || emPr==NULL || NMT_CANdev==NULL || HB_CANdev==NULL){
   167ca:	68bb      	ldr	r3, [r7, #8]
   167cc:	2b00      	cmp	r3, #0
   167ce:	d008      	beq.n	167e2 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
   167d0:	687b      	ldr	r3, [r7, #4]
   167d2:	2b00      	cmp	r3, #0
   167d4:	d005      	beq.n	167e2 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
   167d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   167d8:	2b00      	cmp	r3, #0
   167da:	d002      	beq.n	167e2 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x26>
   167dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   167de:	2b00      	cmp	r3, #0
   167e0:	d102      	bne.n	167e8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   167e2:	f04f 33ff 	mov.w	r3, #4294967295
   167e6:	e062      	b.n	168ae <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xf2>
    }else{
		NMT=NMT_Init;
   167e8:	4a33      	ldr	r2, [pc, #204]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   167ea:	68bb      	ldr	r3, [r7, #8]
   167ec:	6013      	str	r3, [r2, #0]
	}

    /* blinking bytes */
    NMT->LEDflickering          = 0;
   167ee:	4b32      	ldr	r3, [pc, #200]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   167f0:	681b      	ldr	r3, [r3, #0]
   167f2:	2200      	movs	r2, #0
   167f4:	705a      	strb	r2, [r3, #1]
    NMT->LEDblinking            = 0;
   167f6:	4b30      	ldr	r3, [pc, #192]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   167f8:	681b      	ldr	r3, [r3, #0]
   167fa:	2200      	movs	r2, #0
   167fc:	709a      	strb	r2, [r3, #2]
    NMT->LEDsingleFlash         = 0;
   167fe:	4b2e      	ldr	r3, [pc, #184]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16800:	681b      	ldr	r3, [r3, #0]
   16802:	2200      	movs	r2, #0
   16804:	70da      	strb	r2, [r3, #3]
    NMT->LEDdoubleFlash         = 0;
   16806:	4b2c      	ldr	r3, [pc, #176]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16808:	681b      	ldr	r3, [r3, #0]
   1680a:	2200      	movs	r2, #0
   1680c:	711a      	strb	r2, [r3, #4]
    NMT->LEDtripleFlash         = 0;
   1680e:	4b2a      	ldr	r3, [pc, #168]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16810:	681b      	ldr	r3, [r3, #0]
   16812:	2200      	movs	r2, #0
   16814:	715a      	strb	r2, [r3, #5]
    NMT->LEDquadrupleFlash      = 0;
   16816:	4b28      	ldr	r3, [pc, #160]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16818:	681b      	ldr	r3, [r3, #0]
   1681a:	2200      	movs	r2, #0
   1681c:	719a      	strb	r2, [r3, #6]

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
   1681e:	4b26      	ldr	r3, [pc, #152]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16820:	681b      	ldr	r3, [r3, #0]
   16822:	2200      	movs	r2, #0
   16824:	701a      	strb	r2, [r3, #0]
    NMT->LEDgreenRun            = -1;
   16826:	4b24      	ldr	r3, [pc, #144]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16828:	681b      	ldr	r3, [r3, #0]
   1682a:	22ff      	movs	r2, #255	; 0xff
   1682c:	71da      	strb	r2, [r3, #7]
    NMT->LEDredError            = 1;
   1682e:	4b22      	ldr	r3, [pc, #136]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16830:	681b      	ldr	r3, [r3, #0]
   16832:	2201      	movs	r2, #1
   16834:	721a      	strb	r2, [r3, #8]
    NMT->nodeId                 = nodeId;
   16836:	4b20      	ldr	r3, [pc, #128]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16838:	681b      	ldr	r3, [r3, #0]
   1683a:	78fa      	ldrb	r2, [r7, #3]
   1683c:	729a      	strb	r2, [r3, #10]
    NMT->firstHBTime            = firstHBTime;
   1683e:	4b1e      	ldr	r3, [pc, #120]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16840:	681b      	ldr	r3, [r3, #0]
   16842:	6a3a      	ldr	r2, [r7, #32]
   16844:	611a      	str	r2, [r3, #16]
    NMT->resetCommand           = 0;
   16846:	4b1c      	ldr	r3, [pc, #112]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16848:	681b      	ldr	r3, [r3, #0]
   1684a:	2200      	movs	r2, #0
   1684c:	725a      	strb	r2, [r3, #9]
    NMT->HBproducerTimer        = 0xFFFF;
   1684e:	4b1a      	ldr	r3, [pc, #104]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16850:	681b      	ldr	r3, [r3, #0]
   16852:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16856:	60da      	str	r2, [r3, #12]
    NMT->emPr                   = emPr;
   16858:	4b17      	ldr	r3, [pc, #92]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   1685a:	681b      	ldr	r3, [r3, #0]
   1685c:	687a      	ldr	r2, [r7, #4]
   1685e:	615a      	str	r2, [r3, #20]
    NMT->ptrState             = NULL;
   16860:	4b15      	ldr	r3, [pc, #84]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16862:	681b      	ldr	r3, [r3, #0]
   16864:	2200      	movs	r2, #0
   16866:	61da      	str	r2, [r3, #28]

    /* configure NMT CAN reception */
   canopen_driver->CAN_Rx_BufferInit(
   16868:	4b14      	ldr	r3, [pc, #80]	; (168bc <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
   1686a:	6818      	ldr	r0, [r3, #0]
   1686c:	4b12      	ldr	r3, [pc, #72]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   1686e:	681b      	ldr	r3, [r3, #0]
            NMT_rxIdx,          /* rx buffer index */
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message */
   16870:	4a13      	ldr	r2, [pc, #76]	; (168c0 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x104>)
   16872:	9202      	str	r2, [sp, #8]
   16874:	9301      	str	r3, [sp, #4]
   16876:	2300      	movs	r3, #0
   16878:	9300      	str	r3, [sp, #0]
   1687a:	f240 73ff 	movw	r3, #2047	; 0x7ff
   1687e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   16882:	4c10      	ldr	r4, [pc, #64]	; (168c4 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x108>)
   16884:	47a0      	blx	r4

    /* configure HB CAN transmission */
    NMT->HB_CANdev = HB_CANdev;
   16886:	4b0c      	ldr	r3, [pc, #48]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16888:	681b      	ldr	r3, [r3, #0]
   1688a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1688c:	619a      	str	r2, [r3, #24]
    NMT->HB_TXbuff =canopen_driver->CAN_Tx_BufferInit(
   1688e:	4b0a      	ldr	r3, [pc, #40]	; (168b8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0xfc>)
   16890:	681c      	ldr	r4, [r3, #0]
   16892:	4b0a      	ldr	r3, [pc, #40]	; (168bc <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x100>)
   16894:	6818      	ldr	r0, [r3, #0]
   16896:	2300      	movs	r3, #0
   16898:	9301      	str	r3, [sp, #4]
   1689a:	2301      	movs	r3, #1
   1689c:	9300      	str	r3, [sp, #0]
   1689e:	2300      	movs	r3, #0
   168a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   168a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
   168a4:	4d08      	ldr	r5, [pc, #32]	; (168c8 <_ZN22CO_NMT_Heartbeat_Class8NMT_InitEP8CO_NMT_tP9CO_EMpr_thmP14CO_CANmodule_tmmS5_mm+0x10c>)
   168a6:	47a8      	blx	r5
   168a8:	4603      	mov	r3, r0
   168aa:	6223      	str	r3, [r4, #32]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
   168ac:	2300      	movs	r3, #0
}
   168ae:	4618      	mov	r0, r3
   168b0:	3710      	adds	r7, #16
   168b2:	46bd      	mov	sp, r7
   168b4:	bdb0      	pop	{r4, r5, r7, pc}
   168b6:	bf00      	nop
   168b8:	2000da80 	.word	0x2000da80
   168bc:	2000da5c 	.word	0x2000da5c
   168c0:	000166e1 	.word	0x000166e1
   168c4:	00015bb5 	.word	0x00015bb5
   168c8:	00015cb5 	.word	0x00015cb5

000168cc <_ZN11CO_OD_ClassC1Ev>:
{0x6401, 0x0C, 0xB6,  2, (void*)&CO_OD_RAM.readAnalogueInput16Bit[0]},
{0x6411, 0x08, 0xBE,  2, (void*)&CO_OD_RAM.writeAnalogueOutput16Bit[0]},
};

// default constructor
CO_OD_Class::CO_OD_Class()
   168cc:	b480      	push	{r7}
   168ce:	b083      	sub	sp, #12
   168d0:	af00      	add	r7, sp, #0
   168d2:	6078      	str	r0, [r7, #4]
{
} //CO_OD
   168d4:	687b      	ldr	r3, [r7, #4]
   168d6:	4618      	mov	r0, r3
   168d8:	370c      	adds	r7, #12
   168da:	46bd      	mov	sp, r7
   168dc:	bc80      	pop	{r7}
   168de:	4770      	bx	lr

000168e0 <_ZN11CO_OD_ClassD1Ev>:

// default destructor
CO_OD_Class::~CO_OD_Class()
   168e0:	b480      	push	{r7}
   168e2:	b083      	sub	sp, #12
   168e4:	af00      	add	r7, sp, #0
   168e6:	6078      	str	r0, [r7, #4]
{
} //~CO_OD
   168e8:	687b      	ldr	r3, [r7, #4]
   168ea:	4618      	mov	r0, r3
   168ec:	370c      	adds	r7, #12
   168ee:	46bd      	mov	sp, r7
   168f0:	bc80      	pop	{r7}
   168f2:	4770      	bx	lr

000168f4 <_ZN12CO_PDO_ClassC1Ev>:
#include "string.h"

static CO_CANtx_t local_tx_buffer;
static CO_CANtx_t local_rx_buffer;
// default constructor
CO_PDO_Class::CO_PDO_Class()
   168f4:	b480      	push	{r7}
   168f6:	b083      	sub	sp, #12
   168f8:	af00      	add	r7, sp, #0
   168fa:	6078      	str	r0, [r7, #4]
{
} //CO_PDO_Class
   168fc:	687b      	ldr	r3, [r7, #4]
   168fe:	4618      	mov	r0, r3
   16900:	370c      	adds	r7, #12
   16902:	46bd      	mov	sp, r7
   16904:	bc80      	pop	{r7}
   16906:	4770      	bx	lr

00016908 <_ZN12CO_PDO_ClassD1Ev>:

// default destructor
CO_PDO_Class::~CO_PDO_Class()
   16908:	b480      	push	{r7}
   1690a:	b083      	sub	sp, #12
   1690c:	af00      	add	r7, sp, #0
   1690e:	6078      	str	r0, [r7, #4]
{
} //~CO_PDO_Class
   16910:	687b      	ldr	r3, [r7, #4]
   16912:	4618      	mov	r0, r3
   16914:	370c      	adds	r7, #12
   16916:	46bd      	mov	sp, r7
   16918:	bc80      	pop	{r7}
   1691a:	4770      	bx	lr

0001691c <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, const CO_CANrxMsg_t *msg){
   1691c:	b580      	push	{r7, lr}
   1691e:	b084      	sub	sp, #16
   16920:	af00      	add	r7, sp, #0
   16922:	6078      	str	r0, [r7, #4]
   16924:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
   16926:	687b      	ldr	r3, [r7, #4]
   16928:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
   1692a:	68fb      	ldr	r3, [r7, #12]
   1692c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   16930:	2b00      	cmp	r3, #0
   16932:	d076      	beq.n	16a22 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
   16934:	68fb      	ldr	r3, [r7, #12]
   16936:	695b      	ldr	r3, [r3, #20]
   16938:	781b      	ldrb	r3, [r3, #0]
    if( (RPDO->valid) &&
   1693a:	2b05      	cmp	r3, #5
   1693c:	d171      	bne.n	16a22 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
        (msg->DLC >= RPDO->dataLength))
   1693e:	683b      	ldr	r3, [r7, #0]
   16940:	7d1b      	ldrb	r3, [r3, #20]
   16942:	461a      	mov	r2, r3
   16944:	68fb      	ldr	r3, [r7, #12]
   16946:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
   1694a:	429a      	cmp	r2, r3
   1694c:	db69      	blt.n	16a22 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x106>
    {
        if(RPDO->synchronous && RPDO->SYNC->CANrxToggle) {
   1694e:	68fb      	ldr	r3, [r7, #12]
   16950:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   16954:	2b00      	cmp	r3, #0
   16956:	d031      	beq.n	169bc <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa0>
   16958:	68fb      	ldr	r3, [r7, #12]
   1695a:	689b      	ldr	r3, [r3, #8]
   1695c:	7edb      	ldrb	r3, [r3, #27]
   1695e:	2b00      	cmp	r3, #0
   16960:	d02c      	beq.n	169bc <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xa0>
            /* copy data into second buffer and set 'new message' flag */
            RPDO->CANrxData[1][0] = msg->data[0];
   16962:	683b      	ldr	r3, [r7, #0]
   16964:	7d5a      	ldrb	r2, [r3, #21]
   16966:	68fb      	ldr	r3, [r7, #12]
   16968:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            RPDO->CANrxData[1][1] = msg->data[1];
   1696c:	683b      	ldr	r3, [r7, #0]
   1696e:	7d9a      	ldrb	r2, [r3, #22]
   16970:	68fb      	ldr	r3, [r7, #12]
   16972:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            RPDO->CANrxData[1][2] = msg->data[2];
   16976:	683b      	ldr	r3, [r7, #0]
   16978:	7dda      	ldrb	r2, [r3, #23]
   1697a:	68fb      	ldr	r3, [r7, #12]
   1697c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            RPDO->CANrxData[1][3] = msg->data[3];
   16980:	683b      	ldr	r3, [r7, #0]
   16982:	7e1a      	ldrb	r2, [r3, #24]
   16984:	68fb      	ldr	r3, [r7, #12]
   16986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            RPDO->CANrxData[1][4] = msg->data[4];
   1698a:	683b      	ldr	r3, [r7, #0]
   1698c:	7e5a      	ldrb	r2, [r3, #25]
   1698e:	68fb      	ldr	r3, [r7, #12]
   16990:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            RPDO->CANrxData[1][5] = msg->data[5];
   16994:	683b      	ldr	r3, [r7, #0]
   16996:	7e9a      	ldrb	r2, [r3, #26]
   16998:	68fb      	ldr	r3, [r7, #12]
   1699a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            RPDO->CANrxData[1][6] = msg->data[6];
   1699e:	683b      	ldr	r3, [r7, #0]
   169a0:	7eda      	ldrb	r2, [r3, #27]
   169a2:	68fb      	ldr	r3, [r7, #12]
   169a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            RPDO->CANrxData[1][7] = msg->data[7];
   169a8:	683b      	ldr	r3, [r7, #0]
   169aa:	7f1a      	ldrb	r2, [r3, #28]
   169ac:	68fb      	ldr	r3, [r7, #12]
   169ae:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

            RPDO->CANrxNew[1] = true;
   169b2:	68fb      	ldr	r3, [r7, #12]
   169b4:	2201      	movs	r2, #1
   169b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   169ba:	e02b      	b.n	16a14 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0xf8>
        }
        else {
            /* copy data into default buffer and set 'new message' flag */
            RPDO->CANrxData[0][0] = msg->data[0];
   169bc:	683b      	ldr	r3, [r7, #0]
   169be:	7d5a      	ldrb	r2, [r3, #21]
   169c0:	68fb      	ldr	r3, [r7, #12]
   169c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            RPDO->CANrxData[0][1] = msg->data[1];
   169c6:	683b      	ldr	r3, [r7, #0]
   169c8:	7d9a      	ldrb	r2, [r3, #22]
   169ca:	68fb      	ldr	r3, [r7, #12]
   169cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            RPDO->CANrxData[0][2] = msg->data[2];
   169d0:	683b      	ldr	r3, [r7, #0]
   169d2:	7dda      	ldrb	r2, [r3, #23]
   169d4:	68fb      	ldr	r3, [r7, #12]
   169d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            RPDO->CANrxData[0][3] = msg->data[3];
   169da:	683b      	ldr	r3, [r7, #0]
   169dc:	7e1a      	ldrb	r2, [r3, #24]
   169de:	68fb      	ldr	r3, [r7, #12]
   169e0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            RPDO->CANrxData[0][4] = msg->data[4];
   169e4:	683b      	ldr	r3, [r7, #0]
   169e6:	7e5a      	ldrb	r2, [r3, #25]
   169e8:	68fb      	ldr	r3, [r7, #12]
   169ea:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            RPDO->CANrxData[0][5] = msg->data[5];
   169ee:	683b      	ldr	r3, [r7, #0]
   169f0:	7e9a      	ldrb	r2, [r3, #26]
   169f2:	68fb      	ldr	r3, [r7, #12]
   169f4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
            RPDO->CANrxData[0][6] = msg->data[6];
   169f8:	683b      	ldr	r3, [r7, #0]
   169fa:	7eda      	ldrb	r2, [r3, #27]
   169fc:	68fb      	ldr	r3, [r7, #12]
   169fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            RPDO->CANrxData[0][7] = msg->data[7];
   16a02:	683b      	ldr	r3, [r7, #0]
   16a04:	7f1a      	ldrb	r2, [r3, #28]
   16a06:	68fb      	ldr	r3, [r7, #12]
   16a08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

            RPDO->CANrxNew[0] = true;
   16a0c:	68fb      	ldr	r3, [r7, #12]
   16a0e:	2201      	movs	r2, #1
   16a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        }
		memcpy(&local_rx_buffer.data[0],(void *)(&msg->data[0]),8);
   16a14:	683b      	ldr	r3, [r7, #0]
   16a16:	3315      	adds	r3, #21
   16a18:	2208      	movs	r2, #8
   16a1a:	4619      	mov	r1, r3
   16a1c:	4803      	ldr	r0, [pc, #12]	; (16a2c <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x110>)
   16a1e:	4b04      	ldr	r3, [pc, #16]	; (16a30 <_ZL14CO_PDO_receivePvPK13CO_CANrxMsg_t+0x114>)
   16a20:	4798      	blx	r3
    }
}
   16a22:	bf00      	nop
   16a24:	3710      	adds	r7, #16
   16a26:	46bd      	mov	sp, r7
   16a28:	bd80      	pop	{r7, pc}
   16a2a:	bf00      	nop
   16a2c:	2000da99 	.word	0x2000da99
   16a30:	0001ab91 	.word	0x0001ab91

00016a34 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
   16a34:	b590      	push	{r4, r7, lr}
   16a36:	b089      	sub	sp, #36	; 0x24
   16a38:	af04      	add	r7, sp, #16
   16a3a:	6078      	str	r0, [r7, #4]
   16a3c:	6039      	str	r1, [r7, #0]
    uint32_t ID;
    CO_ReturnError_t r;

    ID = (uint32_t)COB_IDUsedByRPDO;
   16a3e:	683b      	ldr	r3, [r7, #0]
   16a40:	60fb      	str	r3, [r7, #12]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
   16a42:	683a      	ldr	r2, [r7, #0]
   16a44:	4b2d      	ldr	r3, [pc, #180]	; (16afc <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xc8>)
   16a46:	4013      	ands	r3, r2
   16a48:	2b00      	cmp	r3, #0
   16a4a:	d123      	bne.n	16a94 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
   16a4c:	687b      	ldr	r3, [r7, #4]
   16a4e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   16a52:	2b00      	cmp	r3, #0
   16a54:	d01e      	beq.n	16a94 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
   16a56:	68fb      	ldr	r3, [r7, #12]
   16a58:	2b00      	cmp	r3, #0
   16a5a:	d01b      	beq.n	16a94 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x60>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
   16a5c:	687b      	ldr	r3, [r7, #4]
   16a5e:	69da      	ldr	r2, [r3, #28]
   16a60:	68fb      	ldr	r3, [r7, #12]
   16a62:	429a      	cmp	r2, r3
   16a64:	d105      	bne.n	16a72 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x3e>
   16a66:	687b      	ldr	r3, [r7, #4]
   16a68:	7e1b      	ldrb	r3, [r3, #24]
   16a6a:	461a      	mov	r2, r3
   16a6c:	68fb      	ldr	r3, [r7, #12]
   16a6e:	4413      	add	r3, r2
   16a70:	60fb      	str	r3, [r7, #12]
        RPDO->valid = true;
   16a72:	687b      	ldr	r3, [r7, #4]
   16a74:	2201      	movs	r2, #1
   16a76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
   16a7a:	687b      	ldr	r3, [r7, #4]
   16a7c:	68db      	ldr	r3, [r3, #12]
   16a7e:	7a1b      	ldrb	r3, [r3, #8]
   16a80:	2bf0      	cmp	r3, #240	; 0xf0
   16a82:	bfd4      	ite	le
   16a84:	2301      	movle	r3, #1
   16a86:	2300      	movgt	r3, #0
   16a88:	b2db      	uxtb	r3, r3
   16a8a:	461a      	mov	r2, r3
   16a8c:	687b      	ldr	r3, [r7, #4]
   16a8e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   16a92:	e00d      	b.n	16ab0 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0x7c>
    }
    else{
        ID = 0;
   16a94:	2300      	movs	r3, #0
   16a96:	60fb      	str	r3, [r7, #12]
        RPDO->valid = false;
   16a98:	687b      	ldr	r3, [r7, #4]
   16a9a:	2200      	movs	r2, #0
   16a9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   16aa0:	687b      	ldr	r3, [r7, #4]
   16aa2:	2200      	movs	r2, #0
   16aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   16aa8:	687b      	ldr	r3, [r7, #4]
   16aaa:	2200      	movs	r2, #0
   16aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    r = canopen_driver->CAN_Rx_BufferInit(
   16ab0:	4b13      	ldr	r3, [pc, #76]	; (16b00 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xcc>)
   16ab2:	6818      	ldr	r0, [r3, #0]
   16ab4:	687b      	ldr	r3, [r7, #4]
   16ab6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
            RPDO->CANdevRxIdx,      /* rx buffer index */
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
   16ab8:	4b12      	ldr	r3, [pc, #72]	; (16b04 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd0>)
   16aba:	9302      	str	r3, [sp, #8]
   16abc:	687b      	ldr	r3, [r7, #4]
   16abe:	9301      	str	r3, [sp, #4]
   16ac0:	2300      	movs	r3, #0
   16ac2:	9300      	str	r3, [sp, #0]
   16ac4:	f240 73ff 	movw	r3, #2047	; 0x7ff
   16ac8:	68fa      	ldr	r2, [r7, #12]
   16aca:	4c0f      	ldr	r4, [pc, #60]	; (16b08 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xd4>)
   16acc:	47a0      	blx	r4
   16ace:	4603      	mov	r3, r0
   16ad0:	72fb      	strb	r3, [r7, #11]
    if(r != CO_ERROR_NO){
   16ad2:	f997 300b 	ldrsb.w	r3, [r7, #11]
   16ad6:	2b00      	cmp	r3, #0
   16ad8:	d00b      	beq.n	16af2 <_ZL16CO_RPDOconfigComP9CO_RPDO_tm+0xbe>
        RPDO->valid = false;
   16ada:	687b      	ldr	r3, [r7, #4]
   16adc:	2200      	movs	r2, #0
   16ade:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   16ae2:	687b      	ldr	r3, [r7, #4]
   16ae4:	2200      	movs	r2, #0
   16ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   16aea:	687b      	ldr	r3, [r7, #4]
   16aec:	2200      	movs	r2, #0
   16aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
}
   16af2:	bf00      	nop
   16af4:	3714      	adds	r7, #20
   16af6:	46bd      	mov	sp, r7
   16af8:	bd90      	pop	{r4, r7, pc}
   16afa:	bf00      	nop
   16afc:	bffff800 	.word	0xbffff800
   16b00:	2000da5c 	.word	0x2000da5c
   16b04:	0001691d 	.word	0x0001691d
   16b08:	00015bb5 	.word	0x00015bb5

00016b0c <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
   16b0c:	b590      	push	{r4, r7, lr}
   16b0e:	b089      	sub	sp, #36	; 0x24
   16b10:	af02      	add	r7, sp, #8
   16b12:	60f8      	str	r0, [r7, #12]
   16b14:	60b9      	str	r1, [r7, #8]
   16b16:	4613      	mov	r3, r2
   16b18:	71fb      	strb	r3, [r7, #7]
    uint32_t ID;

    ID = (uint32_t)COB_IDUsedByTPDO;
   16b1a:	68bb      	ldr	r3, [r7, #8]
   16b1c:	617b      	str	r3, [r7, #20]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
   16b1e:	68ba      	ldr	r2, [r7, #8]
   16b20:	4b1c      	ldr	r3, [pc, #112]	; (16b94 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x88>)
   16b22:	4013      	ands	r3, r2
   16b24:	2b00      	cmp	r3, #0
   16b26:	d115      	bne.n	16b54 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
   16b28:	68fb      	ldr	r3, [r7, #12]
   16b2a:	7f9b      	ldrb	r3, [r3, #30]
   16b2c:	2b00      	cmp	r3, #0
   16b2e:	d011      	beq.n	16b54 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
   16b30:	697b      	ldr	r3, [r7, #20]
   16b32:	2b00      	cmp	r3, #0
   16b34:	d00e      	beq.n	16b54 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
   16b36:	68fb      	ldr	r3, [r7, #12]
   16b38:	699a      	ldr	r2, [r3, #24]
   16b3a:	697b      	ldr	r3, [r7, #20]
   16b3c:	429a      	cmp	r2, r3
   16b3e:	d105      	bne.n	16b4c <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x40>
   16b40:	68fb      	ldr	r3, [r7, #12]
   16b42:	7d1b      	ldrb	r3, [r3, #20]
   16b44:	461a      	mov	r2, r3
   16b46:	697b      	ldr	r3, [r7, #20]
   16b48:	4413      	add	r3, r2
   16b4a:	617b      	str	r3, [r7, #20]
        TPDO->valid = true;
   16b4c:	68fb      	ldr	r3, [r7, #12]
   16b4e:	2201      	movs	r2, #1
   16b50:	775a      	strb	r2, [r3, #29]
   16b52:	e004      	b.n	16b5e <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x52>
    }
    else{
        ID = 0;
   16b54:	2300      	movs	r3, #0
   16b56:	617b      	str	r3, [r7, #20]
        TPDO->valid = false;
   16b58:	68fb      	ldr	r3, [r7, #12]
   16b5a:	2200      	movs	r2, #0
   16b5c:	775a      	strb	r2, [r3, #29]
    }

    TPDO->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
   16b5e:	4b0e      	ldr	r3, [pc, #56]	; (16b98 <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x8c>)
   16b60:	6818      	ldr	r0, [r3, #0]
   16b62:	68fb      	ldr	r3, [r7, #12]
   16b64:	6d59      	ldr	r1, [r3, #84]	; 0x54
   16b66:	68fb      	ldr	r3, [r7, #12]
   16b68:	7f9b      	ldrb	r3, [r3, #30]
   16b6a:	79fa      	ldrb	r2, [r7, #7]
   16b6c:	9201      	str	r2, [sp, #4]
   16b6e:	9300      	str	r3, [sp, #0]
   16b70:	2300      	movs	r3, #0
   16b72:	697a      	ldr	r2, [r7, #20]
   16b74:	4c09      	ldr	r4, [pc, #36]	; (16b9c <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x90>)
   16b76:	47a0      	blx	r4
   16b78:	4602      	mov	r2, r0
   16b7a:	68fb      	ldr	r3, [r7, #12]
   16b7c:	651a      	str	r2, [r3, #80]	; 0x50
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
   16b7e:	68fb      	ldr	r3, [r7, #12]
   16b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   16b82:	2b00      	cmp	r3, #0
   16b84:	d102      	bne.n	16b8c <_ZL16CO_TPDOconfigComP9CO_TPDO_tmh+0x80>
        TPDO->valid = false;
   16b86:	68fb      	ldr	r3, [r7, #12]
   16b88:	2200      	movs	r2, #0
   16b8a:	775a      	strb	r2, [r3, #29]
    }
}
   16b8c:	bf00      	nop
   16b8e:	371c      	adds	r7, #28
   16b90:	46bd      	mov	sp, r7
   16b92:	bd90      	pop	{r4, r7, pc}
   16b94:	bffff800 	.word	0xbffff800
   16b98:	2000da5c 	.word	0x2000da5c
   16b9c:	00015cb5 	.word	0x00015cb5

00016ba0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
   16ba0:	b580      	push	{r7, lr}
   16ba2:	b08a      	sub	sp, #40	; 0x28
   16ba4:	af00      	add	r7, sp, #0
   16ba6:	60f8      	str	r0, [r7, #12]
   16ba8:	60b9      	str	r1, [r7, #8]
   16baa:	603b      	str	r3, [r7, #0]
   16bac:	4613      	mov	r3, r2
   16bae:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint32_t)(map>>16);
   16bb0:	68bb      	ldr	r3, [r7, #8]
   16bb2:	0c1b      	lsrs	r3, r3, #16
   16bb4:	61fb      	str	r3, [r7, #28]
    subIndex = (uint8_t)(map>>8);
   16bb6:	68bb      	ldr	r3, [r7, #8]
   16bb8:	0a1b      	lsrs	r3, r3, #8
   16bba:	76fb      	strb	r3, [r7, #27]
    dataLen = (uint8_t) map;   /* data length in bits */
   16bbc:	68bb      	ldr	r3, [r7, #8]
   16bbe:	76bb      	strb	r3, [r7, #26]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   16bc0:	7ebb      	ldrb	r3, [r7, #26]
   16bc2:	f003 0307 	and.w	r3, r3, #7
   16bc6:	2b00      	cmp	r3, #0
   16bc8:	d001      	beq.n	16bce <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x2e>
   16bca:	4b6b      	ldr	r3, [pc, #428]	; (16d78 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   16bcc:	e0cf      	b.n	16d6e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    dataLen >>= 3;    /* new data length is in bytes */
   16bce:	7ebb      	ldrb	r3, [r7, #26]
   16bd0:	10db      	asrs	r3, r3, #3
   16bd2:	76bb      	strb	r3, [r7, #26]
    *pLength += dataLen;
   16bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16bd6:	781a      	ldrb	r2, [r3, #0]
   16bd8:	7ebb      	ldrb	r3, [r7, #26]
   16bda:	4413      	add	r3, r2
   16bdc:	b2da      	uxtb	r2, r3
   16bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16be0:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
   16be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16be4:	781b      	ldrb	r3, [r3, #0]
   16be6:	2b08      	cmp	r3, #8
   16be8:	dd01      	ble.n	16bee <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x4e>
   16bea:	4b64      	ldr	r3, [pc, #400]	; (16d7c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1dc>)
   16bec:	e0bf      	b.n	16d6e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
   16bee:	69fb      	ldr	r3, [r7, #28]
   16bf0:	2b07      	cmp	r3, #7
   16bf2:	d832      	bhi.n	16c5a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
   16bf4:	7efb      	ldrb	r3, [r7, #27]
   16bf6:	2b00      	cmp	r3, #0
   16bf8:	d12f      	bne.n	16c5a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xba>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
   16bfa:	2304      	movs	r3, #4
   16bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(index<2) dummySize = 0;
   16c00:	69fb      	ldr	r3, [r7, #28]
   16c02:	2b01      	cmp	r3, #1
   16c04:	d803      	bhi.n	16c0e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x6e>
   16c06:	2300      	movs	r3, #0
   16c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   16c0c:	e012      	b.n	16c34 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==2 || index==5) dummySize = 1;
   16c0e:	69fb      	ldr	r3, [r7, #28]
   16c10:	2b02      	cmp	r3, #2
   16c12:	d002      	beq.n	16c1a <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x7a>
   16c14:	69fb      	ldr	r3, [r7, #28]
   16c16:	2b05      	cmp	r3, #5
   16c18:	d103      	bne.n	16c22 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x82>
   16c1a:	2301      	movs	r3, #1
   16c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   16c20:	e008      	b.n	16c34 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
        else if(index==3 || index==6) dummySize = 2;
   16c22:	69fb      	ldr	r3, [r7, #28]
   16c24:	2b03      	cmp	r3, #3
   16c26:	d002      	beq.n	16c2e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x8e>
   16c28:	69fb      	ldr	r3, [r7, #28]
   16c2a:	2b06      	cmp	r3, #6
   16c2c:	d102      	bne.n	16c34 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x94>
   16c2e:	2302      	movs	r3, #2
   16c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   16c34:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   16c38:	7ebb      	ldrb	r3, [r7, #26]
   16c3a:	429a      	cmp	r2, r3
   16c3c:	da01      	bge.n	16c42 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xa2>
   16c3e:	4b4e      	ldr	r3, [pc, #312]	; (16d78 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   16c40:	e095      	b.n	16d6e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
   16c42:	79fb      	ldrb	r3, [r7, #7]
   16c44:	2b00      	cmp	r3, #0
   16c46:	d103      	bne.n	16c50 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb0>
   16c48:	683b      	ldr	r3, [r7, #0]
   16c4a:	4a4d      	ldr	r2, [pc, #308]	; (16d80 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e0>)
   16c4c:	601a      	str	r2, [r3, #0]
   16c4e:	e002      	b.n	16c56 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xb6>
        else         *ppData = (uint8_t*) &dummyTX;
   16c50:	683b      	ldr	r3, [r7, #0]
   16c52:	4a4c      	ldr	r2, [pc, #304]	; (16d84 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e4>)
   16c54:	601a      	str	r2, [r3, #0]

        return 0;
   16c56:	2300      	movs	r3, #0
   16c58:	e089      	b.n	16d6e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    }

    /* find object in Object Dictionary */
    entryNo = canopen_driver->CO_OD_find( index);
   16c5a:	4b4b      	ldr	r3, [pc, #300]	; (16d88 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
   16c5c:	681b      	ldr	r3, [r3, #0]
   16c5e:	3304      	adds	r3, #4
   16c60:	69f9      	ldr	r1, [r7, #28]
   16c62:	4618      	mov	r0, r3
   16c64:	4b49      	ldr	r3, [pc, #292]	; (16d8c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ec>)
   16c66:	4798      	blx	r3
   16c68:	6178      	str	r0, [r7, #20]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
   16c6a:	697b      	ldr	r3, [r7, #20]
   16c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16c70:	4293      	cmp	r3, r2
   16c72:	d00b      	beq.n	16c8c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xec>
   16c74:	7ef9      	ldrb	r1, [r7, #27]
   16c76:	68fb      	ldr	r3, [r7, #12]
   16c78:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   16c7a:	697a      	ldr	r2, [r7, #20]
   16c7c:	4613      	mov	r3, r2
   16c7e:	009b      	lsls	r3, r3, #2
   16c80:	4413      	add	r3, r2
   16c82:	009b      	lsls	r3, r3, #2
   16c84:	4403      	add	r3, r0
   16c86:	791b      	ldrb	r3, [r3, #4]
   16c88:	4299      	cmp	r1, r3
   16c8a:	dd01      	ble.n	16c90 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0xf0>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
   16c8c:	4b40      	ldr	r3, [pc, #256]	; (16d90 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f0>)
   16c8e:	e06e      	b.n	16d6e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    attr = canopen_driver->CO_OD_getAttribute( entryNo, subIndex);
   16c90:	4b3d      	ldr	r3, [pc, #244]	; (16d88 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
   16c92:	681b      	ldr	r3, [r3, #0]
   16c94:	3304      	adds	r3, #4
   16c96:	7efa      	ldrb	r2, [r7, #27]
   16c98:	6979      	ldr	r1, [r7, #20]
   16c9a:	4618      	mov	r0, r3
   16c9c:	4b3d      	ldr	r3, [pc, #244]	; (16d94 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f4>)
   16c9e:	4798      	blx	r3
   16ca0:	4603      	mov	r3, r0
   16ca2:	74fb      	strb	r3, [r7, #19]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   16ca4:	79fb      	ldrb	r3, [r7, #7]
   16ca6:	2b00      	cmp	r3, #0
   16ca8:	d10b      	bne.n	16cc2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
   16caa:	7cfb      	ldrb	r3, [r7, #19]
   16cac:	f003 0310 	and.w	r3, r3, #16
   16cb0:	2b00      	cmp	r3, #0
   16cb2:	d004      	beq.n	16cbe <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x11e>
   16cb4:	7cfb      	ldrb	r3, [r7, #19]
   16cb6:	f003 0308 	and.w	r3, r3, #8
   16cba:	2b00      	cmp	r3, #0
   16cbc:	d101      	bne.n	16cc2 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x122>
   16cbe:	4b2e      	ldr	r3, [pc, #184]	; (16d78 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   16cc0:	e055      	b.n	16d6e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   16cc2:	79fb      	ldrb	r3, [r7, #7]
   16cc4:	2b00      	cmp	r3, #0
   16cc6:	d00b      	beq.n	16ce0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
   16cc8:	7cfb      	ldrb	r3, [r7, #19]
   16cca:	f003 0320 	and.w	r3, r3, #32
   16cce:	2b00      	cmp	r3, #0
   16cd0:	d004      	beq.n	16cdc <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x13c>
   16cd2:	7cfb      	ldrb	r3, [r7, #19]
   16cd4:	f003 0304 	and.w	r3, r3, #4
   16cd8:	2b00      	cmp	r3, #0
   16cda:	d101      	bne.n	16ce0 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x140>
   16cdc:	4b26      	ldr	r3, [pc, #152]	; (16d78 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   16cde:	e046      	b.n	16d6e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* is size of variable big enough for map */
    objectLen = canopen_driver->CO_OD_getLength( entryNo, subIndex);
   16ce0:	4b29      	ldr	r3, [pc, #164]	; (16d88 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
   16ce2:	681b      	ldr	r3, [r3, #0]
   16ce4:	3304      	adds	r3, #4
   16ce6:	7efa      	ldrb	r2, [r7, #27]
   16ce8:	6979      	ldr	r1, [r7, #20]
   16cea:	4618      	mov	r0, r3
   16cec:	4b2a      	ldr	r3, [pc, #168]	; (16d98 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1f8>)
   16cee:	4798      	blx	r3
   16cf0:	4603      	mov	r3, r0
   16cf2:	74bb      	strb	r3, [r7, #18]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
   16cf4:	7cba      	ldrb	r2, [r7, #18]
   16cf6:	7ebb      	ldrb	r3, [r7, #26]
   16cf8:	429a      	cmp	r2, r3
   16cfa:	da01      	bge.n	16d00 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x160>
   16cfc:	4b1e      	ldr	r3, [pc, #120]	; (16d78 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1d8>)
   16cfe:	e036      	b.n	16d6e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1ce>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
   16d00:	f997 3013 	ldrsb.w	r3, [r7, #19]
   16d04:	2b00      	cmp	r3, #0
   16d06:	da01      	bge.n	16d0c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16c>
   16d08:	2201      	movs	r2, #1
   16d0a:	e000      	b.n	16d0e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x16e>
   16d0c:	2200      	movs	r2, #0
   16d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16d10:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) (canopen_driver->CO_OD_getDataPointer( entryNo, subIndex));
   16d12:	4b1d      	ldr	r3, [pc, #116]	; (16d88 <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1e8>)
   16d14:	681b      	ldr	r3, [r3, #0]
   16d16:	3304      	adds	r3, #4
   16d18:	7efa      	ldrb	r2, [r7, #27]
   16d1a:	6979      	ldr	r1, [r7, #20]
   16d1c:	4618      	mov	r0, r3
   16d1e:	4b1f      	ldr	r3, [pc, #124]	; (16d9c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1fc>)
   16d20:	4798      	blx	r3
   16d22:	4602      	mov	r2, r0
   16d24:	683b      	ldr	r3, [r7, #0]
   16d26:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
   16d28:	7cfb      	ldrb	r3, [r7, #19]
   16d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16d2e:	2b00      	cmp	r3, #0
   16d30:	d01c      	beq.n	16d6c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
        uint32_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
   16d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16d34:	781b      	ldrb	r3, [r3, #0]
   16d36:	461a      	mov	r2, r3
   16d38:	7ebb      	ldrb	r3, [r7, #26]
   16d3a:	1ad3      	subs	r3, r2, r3
   16d3c:	623b      	str	r3, [r7, #32]
   16d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16d40:	781b      	ldrb	r3, [r3, #0]
   16d42:	461a      	mov	r2, r3
   16d44:	6a3b      	ldr	r3, [r7, #32]
   16d46:	429a      	cmp	r2, r3
   16d48:	d910      	bls.n	16d6c <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x1cc>
            *pSendIfCOSFlags |= 1<<i;
   16d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16d4c:	781b      	ldrb	r3, [r3, #0]
   16d4e:	b25a      	sxtb	r2, r3
   16d50:	2101      	movs	r1, #1
   16d52:	6a3b      	ldr	r3, [r7, #32]
   16d54:	fa01 f303 	lsl.w	r3, r1, r3
   16d58:	b25b      	sxtb	r3, r3
   16d5a:	4313      	orrs	r3, r2
   16d5c:	b25b      	sxtb	r3, r3
   16d5e:	b2da      	uxtb	r2, r3
   16d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16d62:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
   16d64:	6a3b      	ldr	r3, [r7, #32]
   16d66:	3301      	adds	r3, #1
   16d68:	623b      	str	r3, [r7, #32]
   16d6a:	e7e8      	b.n	16d3e <_ZL13CO_PDOfindMapP8CO_SDO_tmhPPhS1_S1_S1_+0x19e>
        }
    }

    return 0;
   16d6c:	2300      	movs	r3, #0
}
   16d6e:	4618      	mov	r0, r3
   16d70:	3728      	adds	r7, #40	; 0x28
   16d72:	46bd      	mov	sp, r7
   16d74:	bd80      	pop	{r7, pc}
   16d76:	bf00      	nop
   16d78:	06040041 	.word	0x06040041
   16d7c:	06040042 	.word	0x06040042
   16d80:	2000daa8 	.word	0x2000daa8
   16d84:	2000daa4 	.word	0x2000daa4
   16d88:	2000da5c 	.word	0x2000da5c
   16d8c:	00017d09 	.word	0x00017d09
   16d90:	06020000 	.word	0x06020000
   16d94:	00017e5d 	.word	0x00017e5d
   16d98:	00017db5 	.word	0x00017db5
   16d9c:	00017f0d 	.word	0x00017f0d

00016da0 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
   16da0:	b590      	push	{r4, r7, lr}
   16da2:	b091      	sub	sp, #68	; 0x44
   16da4:	af04      	add	r7, sp, #16
   16da6:	6078      	str	r0, [r7, #4]
   16da8:	460b      	mov	r3, r1
   16daa:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
   16dac:	2300      	movs	r3, #0
   16dae:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
   16db0:	2300      	movs	r3, #0
   16db2:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
   16db4:	687b      	ldr	r3, [r7, #4]
   16db6:	691b      	ldr	r3, [r3, #16]
   16db8:	3304      	adds	r3, #4
   16dba:	627b      	str	r3, [r7, #36]	; 0x24

    for(i=noOfMappedObjects; i>0; i--){
   16dbc:	78fb      	ldrb	r3, [r7, #3]
   16dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   16dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16dc2:	2b00      	cmp	r3, #0
   16dc4:	d045      	beq.n	16e52 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        uint32_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
   16dc6:	2300      	movs	r3, #0
   16dc8:	73fb      	strb	r3, [r7, #15]
        uint8_t prevLength = length;
   16dca:	7dfb      	ldrb	r3, [r7, #23]
   16dcc:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
   16dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16dd0:	1d1a      	adds	r2, r3, #4
   16dd2:	627a      	str	r2, [r7, #36]	; 0x24
   16dd4:	681b      	ldr	r3, [r3, #0]
   16dd6:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
   16dd8:	687b      	ldr	r3, [r7, #4]
   16dda:	6858      	ldr	r0, [r3, #4]
                map,
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
   16ddc:	f107 0210 	add.w	r2, r7, #16
   16de0:	f107 030e 	add.w	r3, r7, #14
   16de4:	9302      	str	r3, [sp, #8]
   16de6:	f107 030f 	add.w	r3, r7, #15
   16dea:	9301      	str	r3, [sp, #4]
   16dec:	f107 0317 	add.w	r3, r7, #23
   16df0:	9300      	str	r3, [sp, #0]
   16df2:	4613      	mov	r3, r2
   16df4:	2200      	movs	r2, #0
   16df6:	69b9      	ldr	r1, [r7, #24]
   16df8:	4c1a      	ldr	r4, [pc, #104]	; (16e64 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc4>)
   16dfa:	47a0      	blx	r4
   16dfc:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
   16dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16e00:	2b00      	cmp	r3, #0
   16e02:	d00e      	beq.n	16e22 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x82>
            length = 0;
   16e04:	2300      	movs	r3, #0
   16e06:	75fb      	strb	r3, [r7, #23]
           canopen_driver->EM_ErrorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
   16e08:	4b17      	ldr	r3, [pc, #92]	; (16e68 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xc8>)
   16e0a:	681b      	ldr	r3, [r3, #0]
   16e0c:	1d18      	adds	r0, r3, #4
   16e0e:	687b      	ldr	r3, [r7, #4]
   16e10:	6819      	ldr	r1, [r3, #0]
   16e12:	69bb      	ldr	r3, [r7, #24]
   16e14:	9300      	str	r3, [sp, #0]
   16e16:	f44f 4302 	mov.w	r3, #33280	; 0x8200
   16e1a:	221a      	movs	r2, #26
   16e1c:	4c13      	ldr	r4, [pc, #76]	; (16e6c <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xcc>)
   16e1e:	47a0      	blx	r4
   16e20:	e017      	b.n	16e52 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xb2>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
   16e22:	7ffb      	ldrb	r3, [r7, #31]
   16e24:	623b      	str	r3, [r7, #32]
   16e26:	7dfb      	ldrb	r3, [r7, #23]
   16e28:	461a      	mov	r2, r3
   16e2a:	6a3b      	ldr	r3, [r7, #32]
   16e2c:	429a      	cmp	r2, r3
   16e2e:	d90c      	bls.n	16e4a <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0xaa>
            RPDO->mapPointer[j] = pData++;
   16e30:	693a      	ldr	r2, [r7, #16]
   16e32:	1c53      	adds	r3, r2, #1
   16e34:	613b      	str	r3, [r7, #16]
   16e36:	6879      	ldr	r1, [r7, #4]
   16e38:	6a3b      	ldr	r3, [r7, #32]
   16e3a:	3308      	adds	r3, #8
   16e3c:	009b      	lsls	r3, r3, #2
   16e3e:	440b      	add	r3, r1
   16e40:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
   16e42:	6a3b      	ldr	r3, [r7, #32]
   16e44:	3301      	adds	r3, #1
   16e46:	623b      	str	r3, [r7, #32]
   16e48:	e7ed      	b.n	16e26 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x86>
    for(i=noOfMappedObjects; i>0; i--){
   16e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16e4c:	3b01      	subs	r3, #1
   16e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   16e50:	e7b6      	b.n	16dc0 <_ZL16CO_RPDOconfigMapP9CO_RPDO_th+0x20>
        }
#endif

    }

    RPDO->dataLength = length;
   16e52:	7dfa      	ldrb	r2, [r7, #23]
   16e54:	687b      	ldr	r3, [r7, #4]
   16e56:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    return ret;
   16e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
   16e5c:	4618      	mov	r0, r3
   16e5e:	3734      	adds	r7, #52	; 0x34
   16e60:	46bd      	mov	sp, r7
   16e62:	bd90      	pop	{r4, r7, pc}
   16e64:	00016ba1 	.word	0x00016ba1
   16e68:	2000da5c 	.word	0x2000da5c
   16e6c:	000162b1 	.word	0x000162b1

00016e70 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
   16e70:	b590      	push	{r4, r7, lr}
   16e72:	b091      	sub	sp, #68	; 0x44
   16e74:	af04      	add	r7, sp, #16
   16e76:	6078      	str	r0, [r7, #4]
   16e78:	460b      	mov	r3, r1
   16e7a:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint8_t length = 0;
   16e7c:	2300      	movs	r3, #0
   16e7e:	75fb      	strb	r3, [r7, #23]
    uint32_t ret = 0;
   16e80:	2300      	movs	r3, #0
   16e82:	62bb      	str	r3, [r7, #40]	; 0x28
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
   16e84:	687b      	ldr	r3, [r7, #4]
   16e86:	68db      	ldr	r3, [r3, #12]
   16e88:	3304      	adds	r3, #4
   16e8a:	627b      	str	r3, [r7, #36]	; 0x24

    TPDO->sendIfCOSFlags = 0;
   16e8c:	687b      	ldr	r3, [r7, #4]
   16e8e:	2200      	movs	r2, #0
   16e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    for(i=noOfMappedObjects; i>0; i--){
   16e94:	78fb      	ldrb	r3, [r7, #3]
   16e96:	62fb      	str	r3, [r7, #44]	; 0x2c
   16e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16e9a:	2b00      	cmp	r3, #0
   16e9c:	d042      	beq.n	16f24 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        uint32_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
   16e9e:	7dfb      	ldrb	r3, [r7, #23]
   16ea0:	77fb      	strb	r3, [r7, #31]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
   16ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16ea4:	1d1a      	adds	r2, r3, #4
   16ea6:	627a      	str	r2, [r7, #36]	; 0x24
   16ea8:	681b      	ldr	r3, [r3, #0]
   16eaa:	61bb      	str	r3, [r7, #24]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
   16eac:	687b      	ldr	r3, [r7, #4]
   16eae:	6858      	ldr	r0, [r3, #4]
   16eb0:	687b      	ldr	r3, [r7, #4]
   16eb2:	3340      	adds	r3, #64	; 0x40
                map,
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
   16eb4:	f107 0110 	add.w	r1, r7, #16
   16eb8:	f107 020f 	add.w	r2, r7, #15
   16ebc:	9202      	str	r2, [sp, #8]
   16ebe:	9301      	str	r3, [sp, #4]
   16ec0:	f107 0317 	add.w	r3, r7, #23
   16ec4:	9300      	str	r3, [sp, #0]
   16ec6:	460b      	mov	r3, r1
   16ec8:	2201      	movs	r2, #1
   16eca:	69b9      	ldr	r1, [r7, #24]
   16ecc:	4c19      	ldr	r4, [pc, #100]	; (16f34 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc4>)
   16ece:	47a0      	blx	r4
   16ed0:	62b8      	str	r0, [r7, #40]	; 0x28
        if(ret){
   16ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16ed4:	2b00      	cmp	r3, #0
   16ed6:	d00e      	beq.n	16ef6 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x86>
            length = 0;
   16ed8:	2300      	movs	r3, #0
   16eda:	75fb      	strb	r3, [r7, #23]
            canopen_driver->EM_ErrorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
   16edc:	4b16      	ldr	r3, [pc, #88]	; (16f38 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xc8>)
   16ede:	681b      	ldr	r3, [r3, #0]
   16ee0:	1d18      	adds	r0, r3, #4
   16ee2:	687b      	ldr	r3, [r7, #4]
   16ee4:	6819      	ldr	r1, [r3, #0]
   16ee6:	69bb      	ldr	r3, [r7, #24]
   16ee8:	9300      	str	r3, [sp, #0]
   16eea:	f44f 4302 	mov.w	r3, #33280	; 0x8200
   16eee:	221a      	movs	r2, #26
   16ef0:	4c12      	ldr	r4, [pc, #72]	; (16f3c <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xcc>)
   16ef2:	47a0      	blx	r4
   16ef4:	e016      	b.n	16f24 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xb4>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
   16ef6:	7ffb      	ldrb	r3, [r7, #31]
   16ef8:	623b      	str	r3, [r7, #32]
   16efa:	7dfb      	ldrb	r3, [r7, #23]
   16efc:	461a      	mov	r2, r3
   16efe:	6a3b      	ldr	r3, [r7, #32]
   16f00:	429a      	cmp	r2, r3
   16f02:	d90b      	bls.n	16f1c <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0xac>
            TPDO->mapPointer[j] = pData++;
   16f04:	693b      	ldr	r3, [r7, #16]
   16f06:	1c5a      	adds	r2, r3, #1
   16f08:	613a      	str	r2, [r7, #16]
   16f0a:	687a      	ldr	r2, [r7, #4]
   16f0c:	6a39      	ldr	r1, [r7, #32]
   16f0e:	3108      	adds	r1, #8
   16f10:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        for(j=prevLength; j<length; j++){
   16f14:	6a3b      	ldr	r3, [r7, #32]
   16f16:	3301      	adds	r3, #1
   16f18:	623b      	str	r3, [r7, #32]
   16f1a:	e7ee      	b.n	16efa <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x8a>
    for(i=noOfMappedObjects; i>0; i--){
   16f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f1e:	3b01      	subs	r3, #1
   16f20:	62fb      	str	r3, [r7, #44]	; 0x2c
   16f22:	e7b9      	b.n	16e98 <_ZL16CO_TPDOconfigMapP9CO_TPDO_th+0x28>
        }
#endif

    }

    TPDO->dataLength = length;
   16f24:	7dfa      	ldrb	r2, [r7, #23]
   16f26:	687b      	ldr	r3, [r7, #4]
   16f28:	779a      	strb	r2, [r3, #30]

    return ret;
   16f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
   16f2c:	4618      	mov	r0, r3
   16f2e:	3734      	adds	r7, #52	; 0x34
   16f30:	46bd      	mov	sp, r7
   16f32:	bd90      	pop	{r4, r7, pc}
   16f34:	00016ba1 	.word	0x00016ba1
   16f38:	2000da5c 	.word	0x2000da5c
   16f3c:	000162b1 	.word	0x000162b1

00016f40 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
   16f40:	b580      	push	{r7, lr}
   16f42:	b088      	sub	sp, #32
   16f44:	af00      	add	r7, sp, #0
   16f46:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
   16f48:	687b      	ldr	r3, [r7, #4]
   16f4a:	681b      	ldr	r3, [r3, #0]
   16f4c:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
   16f4e:	687b      	ldr	r3, [r7, #4]
   16f50:	7f5b      	ldrb	r3, [r3, #29]
   16f52:	2b00      	cmp	r3, #0
   16f54:	d025      	beq.n	16fa2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x62>
        if(ODF_arg->subIndex == 1){
   16f56:	687b      	ldr	r3, [r7, #4]
   16f58:	7f1b      	ldrb	r3, [r3, #28]
   16f5a:	2b01      	cmp	r3, #1
   16f5c:	d11f      	bne.n	16f9e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
            uint32_t *value = (uint32_t*) ODF_arg->data;
   16f5e:	687b      	ldr	r3, [r7, #4]
   16f60:	685b      	ldr	r3, [r3, #4]
   16f62:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
   16f64:	69bb      	ldr	r3, [r7, #24]
   16f66:	681b      	ldr	r3, [r3, #0]
   16f68:	b29a      	uxth	r2, r3
   16f6a:	69fb      	ldr	r3, [r7, #28]
   16f6c:	69db      	ldr	r3, [r3, #28]
   16f6e:	429a      	cmp	r2, r3
   16f70:	d10a      	bne.n	16f88 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
   16f72:	69fb      	ldr	r3, [r7, #28]
   16f74:	69db      	ldr	r3, [r3, #28]
   16f76:	2b00      	cmp	r3, #0
   16f78:	d006      	beq.n	16f88 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x48>
                *value += RPDO->nodeId;
   16f7a:	69bb      	ldr	r3, [r7, #24]
   16f7c:	681b      	ldr	r3, [r3, #0]
   16f7e:	69fa      	ldr	r2, [r7, #28]
   16f80:	7e12      	ldrb	r2, [r2, #24]
   16f82:	441a      	add	r2, r3
   16f84:	69bb      	ldr	r3, [r7, #24]
   16f86:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) *value |= 0x80000000L;
   16f88:	69fb      	ldr	r3, [r7, #28]
   16f8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   16f8e:	2b00      	cmp	r3, #0
   16f90:	d105      	bne.n	16f9e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x5e>
   16f92:	69bb      	ldr	r3, [r7, #24]
   16f94:	681b      	ldr	r3, [r3, #0]
   16f96:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
   16f9a:	69bb      	ldr	r3, [r7, #24]
   16f9c:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
   16f9e:	2300      	movs	r3, #0
   16fa0:	e07f      	b.n	170a2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
   16fa2:	69fb      	ldr	r3, [r7, #28]
   16fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
   16fa8:	f003 0304 	and.w	r3, r3, #4
   16fac:	2b00      	cmp	r3, #0
   16fae:	d001      	beq.n	16fb4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
   16fb0:	4b3e      	ldr	r3, [pc, #248]	; (170ac <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x16c>)
   16fb2:	e076      	b.n	170a2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
   16fb4:	69fb      	ldr	r3, [r7, #28]
   16fb6:	695b      	ldr	r3, [r3, #20]
   16fb8:	781b      	ldrb	r3, [r3, #0]
   16fba:	2b05      	cmp	r3, #5
   16fbc:	d108      	bne.n	16fd0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
   16fbe:	69fb      	ldr	r3, [r7, #28]
   16fc0:	f893 3020 	ldrb.w	r3, [r3, #32]
   16fc4:	f003 0301 	and.w	r3, r3, #1
   16fc8:	2b00      	cmp	r3, #0
   16fca:	d001      	beq.n	16fd0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x90>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
   16fcc:	4b38      	ldr	r3, [pc, #224]	; (170b0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x170>)
   16fce:	e068      	b.n	170a2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
   16fd0:	687b      	ldr	r3, [r7, #4]
   16fd2:	7f1b      	ldrb	r3, [r3, #28]
   16fd4:	2b01      	cmp	r3, #1
   16fd6:	d139      	bne.n	1704c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x10c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
   16fd8:	687b      	ldr	r3, [r7, #4]
   16fda:	685b      	ldr	r3, [r3, #4]
   16fdc:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
   16fde:	697b      	ldr	r3, [r7, #20]
   16fe0:	681a      	ldr	r2, [r3, #0]
   16fe2:	4b34      	ldr	r3, [pc, #208]	; (170b4 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x174>)
   16fe4:	4013      	ands	r3, r2
   16fe6:	2b00      	cmp	r3, #0
   16fe8:	d001      	beq.n	16fee <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xae>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   16fea:	4b33      	ldr	r3, [pc, #204]	; (170b8 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
   16fec:	e059      	b.n	170a2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
   16fee:	697b      	ldr	r3, [r7, #20]
   16ff0:	681b      	ldr	r3, [r3, #0]
   16ff2:	b29a      	uxth	r2, r3
   16ff4:	69fb      	ldr	r3, [r7, #28]
   16ff6:	69db      	ldr	r3, [r3, #28]
   16ff8:	69f9      	ldr	r1, [r7, #28]
   16ffa:	7e09      	ldrb	r1, [r1, #24]
   16ffc:	440b      	add	r3, r1
   16ffe:	429a      	cmp	r2, r3
   17000:	d10c      	bne.n	1701c <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xdc>
            *value &= 0xC0000000L;
   17002:	697b      	ldr	r3, [r7, #20]
   17004:	681b      	ldr	r3, [r3, #0]
   17006:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
   1700a:	697b      	ldr	r3, [r7, #20]
   1700c:	601a      	str	r2, [r3, #0]
            *value += RPDO->defaultCOB_ID;
   1700e:	697b      	ldr	r3, [r7, #20]
   17010:	681a      	ldr	r2, [r3, #0]
   17012:	69fb      	ldr	r3, [r7, #28]
   17014:	69db      	ldr	r3, [r3, #28]
   17016:	441a      	add	r2, r3
   17018:	697b      	ldr	r3, [r7, #20]
   1701a:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((*value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
   1701c:	69fb      	ldr	r3, [r7, #28]
   1701e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   17022:	2b00      	cmp	r3, #0
   17024:	d00b      	beq.n	1703e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
   17026:	697b      	ldr	r3, [r7, #20]
   17028:	681a      	ldr	r2, [r3, #0]
   1702a:	69fb      	ldr	r3, [r7, #28]
   1702c:	68db      	ldr	r3, [r3, #12]
   1702e:	685b      	ldr	r3, [r3, #4]
   17030:	4053      	eors	r3, r2
   17032:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   17036:	2b00      	cmp	r3, #0
   17038:	d001      	beq.n	1703e <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0xfe>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   1703a:	4b1f      	ldr	r3, [pc, #124]	; (170b8 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
   1703c:	e031      	b.n	170a2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        /* configure RPDO */
       CO_RPDOconfigCom(RPDO, *value);
   1703e:	697b      	ldr	r3, [r7, #20]
   17040:	681b      	ldr	r3, [r3, #0]
   17042:	4619      	mov	r1, r3
   17044:	69f8      	ldr	r0, [r7, #28]
   17046:	4b1d      	ldr	r3, [pc, #116]	; (170bc <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x17c>)
   17048:	4798      	blx	r3
   1704a:	e029      	b.n	170a0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
   1704c:	687b      	ldr	r3, [r7, #4]
   1704e:	7f1b      	ldrb	r3, [r3, #28]
   17050:	2b02      	cmp	r3, #2
   17052:	d125      	bne.n	170a0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   17054:	687b      	ldr	r3, [r7, #4]
   17056:	685b      	ldr	r3, [r3, #4]
   17058:	613b      	str	r3, [r7, #16]
        bool_t synchronousPrev = RPDO->synchronous;
   1705a:	69fb      	ldr	r3, [r7, #28]
   1705c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   17060:	73fb      	strb	r3, [r7, #15]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
   17062:	693b      	ldr	r3, [r7, #16]
   17064:	781b      	ldrb	r3, [r3, #0]
   17066:	2bf0      	cmp	r3, #240	; 0xf0
   17068:	dd05      	ble.n	17076 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
   1706a:	693b      	ldr	r3, [r7, #16]
   1706c:	781b      	ldrb	r3, [r3, #0]
   1706e:	2bfd      	cmp	r3, #253	; 0xfd
   17070:	dc01      	bgt.n	17076 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x136>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   17072:	4b11      	ldr	r3, [pc, #68]	; (170b8 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x178>)
   17074:	e015      	b.n	170a2 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x162>

        RPDO->synchronous = (*value <= 240) ? true : false;
   17076:	693b      	ldr	r3, [r7, #16]
   17078:	781b      	ldrb	r3, [r3, #0]
   1707a:	2bf0      	cmp	r3, #240	; 0xf0
   1707c:	bfd4      	ite	le
   1707e:	2301      	movle	r3, #1
   17080:	2300      	movgt	r3, #0
   17082:	b2db      	uxtb	r3, r3
   17084:	461a      	mov	r2, r3
   17086:	69fb      	ldr	r3, [r7, #28]
   17088:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
   1708c:	69fb      	ldr	r3, [r7, #28]
   1708e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   17092:	7bfa      	ldrb	r2, [r7, #15]
   17094:	429a      	cmp	r2, r3
   17096:	d003      	beq.n	170a0 <_ZL14CO_ODF_RPDOcomP12CO_ODF_arg_t+0x160>
            RPDO->CANrxNew[1] = false;
   17098:	69fb      	ldr	r3, [r7, #28]
   1709a:	2200      	movs	r2, #0
   1709c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
    }

    return CO_SDO_AB_NONE;
   170a0:	2300      	movs	r3, #0
}
   170a2:	4618      	mov	r0, r3
   170a4:	3720      	adds	r7, #32
   170a6:	46bd      	mov	sp, r7
   170a8:	bd80      	pop	{r7, pc}
   170aa:	bf00      	nop
   170ac:	06010002 	.word	0x06010002
   170b0:	08000022 	.word	0x08000022
   170b4:	3fff8000 	.word	0x3fff8000
   170b8:	06090030 	.word	0x06090030
   170bc:	00016a35 	.word	0x00016a35

000170c0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
   170c0:	b580      	push	{r7, lr}
   170c2:	b088      	sub	sp, #32
   170c4:	af00      	add	r7, sp, #0
   170c6:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
   170c8:	687b      	ldr	r3, [r7, #4]
   170ca:	681b      	ldr	r3, [r3, #0]
   170cc:	61fb      	str	r3, [r7, #28]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
   170ce:	687b      	ldr	r3, [r7, #4]
   170d0:	7f1b      	ldrb	r3, [r3, #28]
   170d2:	2b04      	cmp	r3, #4
   170d4:	d101      	bne.n	170da <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1a>
   170d6:	4b6d      	ldr	r3, [pc, #436]	; (1728c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1cc>)
   170d8:	e0d4      	b.n	17284 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
   170da:	687b      	ldr	r3, [r7, #4]
   170dc:	7f5b      	ldrb	r3, [r3, #29]
   170de:	2b00      	cmp	r3, #0
   170e0:	d024      	beq.n	1712c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x6c>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
   170e2:	687b      	ldr	r3, [r7, #4]
   170e4:	7f1b      	ldrb	r3, [r3, #28]
   170e6:	2b01      	cmp	r3, #1
   170e8:	d11e      	bne.n	17128 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
            uint32_t *value = (uint32_t*) ODF_arg->data;
   170ea:	687b      	ldr	r3, [r7, #4]
   170ec:	685b      	ldr	r3, [r3, #4]
   170ee:	61bb      	str	r3, [r7, #24]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
   170f0:	69bb      	ldr	r3, [r7, #24]
   170f2:	681b      	ldr	r3, [r3, #0]
   170f4:	b29a      	uxth	r2, r3
   170f6:	69fb      	ldr	r3, [r7, #28]
   170f8:	699b      	ldr	r3, [r3, #24]
   170fa:	429a      	cmp	r2, r3
   170fc:	d10a      	bne.n	17114 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
   170fe:	69fb      	ldr	r3, [r7, #28]
   17100:	699b      	ldr	r3, [r3, #24]
   17102:	2b00      	cmp	r3, #0
   17104:	d006      	beq.n	17114 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x54>
                *value += TPDO->nodeId;
   17106:	69bb      	ldr	r3, [r7, #24]
   17108:	681b      	ldr	r3, [r3, #0]
   1710a:	69fa      	ldr	r2, [r7, #28]
   1710c:	7d12      	ldrb	r2, [r2, #20]
   1710e:	441a      	add	r2, r3
   17110:	69bb      	ldr	r3, [r7, #24]
   17112:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) *value |= 0x80000000L;
   17114:	69fb      	ldr	r3, [r7, #28]
   17116:	7f5b      	ldrb	r3, [r3, #29]
   17118:	2b00      	cmp	r3, #0
   1711a:	d105      	bne.n	17128 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x68>
   1711c:	69bb      	ldr	r3, [r7, #24]
   1711e:	681b      	ldr	r3, [r3, #0]
   17120:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
   17124:	69bb      	ldr	r3, [r7, #24]
   17126:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
   17128:	2300      	movs	r3, #0
   1712a:	e0ab      	b.n	17284 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
   1712c:	69fb      	ldr	r3, [r7, #28]
   1712e:	7f1b      	ldrb	r3, [r3, #28]
   17130:	f003 0304 	and.w	r3, r3, #4
   17134:	2b00      	cmp	r3, #0
   17136:	d001      	beq.n	1713c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x7c>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
   17138:	4b55      	ldr	r3, [pc, #340]	; (17290 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d0>)
   1713a:	e0a3      	b.n	17284 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
   1713c:	69fb      	ldr	r3, [r7, #28]
   1713e:	691b      	ldr	r3, [r3, #16]
   17140:	781b      	ldrb	r3, [r3, #0]
   17142:	2b05      	cmp	r3, #5
   17144:	d107      	bne.n	17156 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
   17146:	69fb      	ldr	r3, [r7, #28]
   17148:	7f1b      	ldrb	r3, [r3, #28]
   1714a:	f003 0301 	and.w	r3, r3, #1
   1714e:	2b00      	cmp	r3, #0
   17150:	d001      	beq.n	17156 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
   17152:	4b50      	ldr	r3, [pc, #320]	; (17294 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d4>)
   17154:	e096      	b.n	17284 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
   17156:	687b      	ldr	r3, [r7, #4]
   17158:	7f1b      	ldrb	r3, [r3, #28]
   1715a:	2b01      	cmp	r3, #1
   1715c:	d140      	bne.n	171e0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x120>
        uint32_t *value = (uint32_t*) ODF_arg->data;
   1715e:	687b      	ldr	r3, [r7, #4]
   17160:	685b      	ldr	r3, [r3, #4]
   17162:	617b      	str	r3, [r7, #20]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
   17164:	697b      	ldr	r3, [r7, #20]
   17166:	681a      	ldr	r2, [r3, #0]
   17168:	4b4b      	ldr	r3, [pc, #300]	; (17298 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1d8>)
   1716a:	4013      	ands	r3, r2
   1716c:	2b00      	cmp	r3, #0
   1716e:	d001      	beq.n	17174 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xb4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   17170:	4b4a      	ldr	r3, [pc, #296]	; (1729c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   17172:	e087      	b.n	17284 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
   17174:	697b      	ldr	r3, [r7, #20]
   17176:	681b      	ldr	r3, [r3, #0]
   17178:	b29a      	uxth	r2, r3
   1717a:	69fb      	ldr	r3, [r7, #28]
   1717c:	699b      	ldr	r3, [r3, #24]
   1717e:	69f9      	ldr	r1, [r7, #28]
   17180:	7d09      	ldrb	r1, [r1, #20]
   17182:	440b      	add	r3, r1
   17184:	429a      	cmp	r2, r3
   17186:	d10c      	bne.n	171a2 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0xe2>
            *value &= 0xC0000000L;
   17188:	697b      	ldr	r3, [r7, #20]
   1718a:	681b      	ldr	r3, [r3, #0]
   1718c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
   17190:	697b      	ldr	r3, [r7, #20]
   17192:	601a      	str	r2, [r3, #0]
            *value += TPDO->defaultCOB_ID;
   17194:	697b      	ldr	r3, [r7, #20]
   17196:	681a      	ldr	r2, [r3, #0]
   17198:	69fb      	ldr	r3, [r7, #28]
   1719a:	699b      	ldr	r3, [r3, #24]
   1719c:	441a      	add	r2, r3
   1719e:	697b      	ldr	r3, [r7, #20]
   171a0:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((*value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
   171a2:	69fb      	ldr	r3, [r7, #28]
   171a4:	7f5b      	ldrb	r3, [r3, #29]
   171a6:	2b00      	cmp	r3, #0
   171a8:	d00b      	beq.n	171c2 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
   171aa:	697b      	ldr	r3, [r7, #20]
   171ac:	681a      	ldr	r2, [r3, #0]
   171ae:	69fb      	ldr	r3, [r7, #28]
   171b0:	689b      	ldr	r3, [r3, #8]
   171b2:	685b      	ldr	r3, [r3, #4]
   171b4:	4053      	eors	r3, r2
   171b6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   171ba:	2b00      	cmp	r3, #0
   171bc:	d001      	beq.n	171c2 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x102>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   171be:	4b37      	ldr	r3, [pc, #220]	; (1729c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   171c0:	e060      	b.n	17284 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, *value, TPDO->CANtxBuff->syncFlag);
   171c2:	697b      	ldr	r3, [r7, #20]
   171c4:	6819      	ldr	r1, [r3, #0]
   171c6:	69fb      	ldr	r3, [r7, #28]
   171c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   171ca:	7b9b      	ldrb	r3, [r3, #14]
   171cc:	b2db      	uxtb	r3, r3
   171ce:	461a      	mov	r2, r3
   171d0:	69f8      	ldr	r0, [r7, #28]
   171d2:	4b33      	ldr	r3, [pc, #204]	; (172a0 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1e0>)
   171d4:	4798      	blx	r3
        TPDO->syncCounter = 255;
   171d6:	69fb      	ldr	r3, [r7, #28]
   171d8:	22ff      	movs	r2, #255	; 0xff
   171da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   171de:	e050      	b.n	17282 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
   171e0:	687b      	ldr	r3, [r7, #4]
   171e2:	7f1b      	ldrb	r3, [r3, #28]
   171e4:	2b02      	cmp	r3, #2
   171e6:	d11b      	bne.n	17220 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x160>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   171e8:	687b      	ldr	r3, [r7, #4]
   171ea:	685b      	ldr	r3, [r3, #4]
   171ec:	613b      	str	r3, [r7, #16]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
   171ee:	693b      	ldr	r3, [r7, #16]
   171f0:	781b      	ldrb	r3, [r3, #0]
   171f2:	2bf0      	cmp	r3, #240	; 0xf0
   171f4:	dd05      	ble.n	17202 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
   171f6:	693b      	ldr	r3, [r7, #16]
   171f8:	781b      	ldrb	r3, [r3, #0]
   171fa:	2bfd      	cmp	r3, #253	; 0xfd
   171fc:	dc01      	bgt.n	17202 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x142>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   171fe:	4b27      	ldr	r3, [pc, #156]	; (1729c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   17200:	e040      	b.n	17284 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
   17202:	69fb      	ldr	r3, [r7, #28]
   17204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   17206:	693a      	ldr	r2, [r7, #16]
   17208:	7812      	ldrb	r2, [r2, #0]
   1720a:	2af0      	cmp	r2, #240	; 0xf0
   1720c:	dc01      	bgt.n	17212 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x152>
   1720e:	2201      	movs	r2, #1
   17210:	e000      	b.n	17214 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x154>
   17212:	2200      	movs	r2, #0
   17214:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
   17216:	69fb      	ldr	r3, [r7, #28]
   17218:	22ff      	movs	r2, #255	; 0xff
   1721a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   1721e:	e030      	b.n	17282 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
   17220:	687b      	ldr	r3, [r7, #4]
   17222:	7f1b      	ldrb	r3, [r3, #28]
   17224:	2b03      	cmp	r3, #3
   17226:	d109      	bne.n	1723c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x17c>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
   17228:	69fb      	ldr	r3, [r7, #28]
   1722a:	7f5b      	ldrb	r3, [r3, #29]
   1722c:	2b00      	cmp	r3, #0
   1722e:	d001      	beq.n	17234 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x174>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   17230:	4b1a      	ldr	r3, [pc, #104]	; (1729c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   17232:	e027      	b.n	17284 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        TPDO->inhibitTimer = 0;
   17234:	69fb      	ldr	r3, [r7, #28]
   17236:	2200      	movs	r2, #0
   17238:	645a      	str	r2, [r3, #68]	; 0x44
   1723a:	e022      	b.n	17282 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
   1723c:	687b      	ldr	r3, [r7, #4]
   1723e:	7f1b      	ldrb	r3, [r3, #28]
   17240:	2b05      	cmp	r3, #5
   17242:	d10b      	bne.n	1725c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x19c>
        uint32_t *value = (uint32_t*) ODF_arg->data;
   17244:	687b      	ldr	r3, [r7, #4]
   17246:	685b      	ldr	r3, [r3, #4]
   17248:	60bb      	str	r3, [r7, #8]

        TPDO->eventTimer = ((uint32_t) *value) * 1000;
   1724a:	68bb      	ldr	r3, [r7, #8]
   1724c:	681b      	ldr	r3, [r3, #0]
   1724e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17252:	fb02 f203 	mul.w	r2, r2, r3
   17256:	69fb      	ldr	r3, [r7, #28]
   17258:	649a      	str	r2, [r3, #72]	; 0x48
   1725a:	e012      	b.n	17282 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
   1725c:	687b      	ldr	r3, [r7, #4]
   1725e:	7f1b      	ldrb	r3, [r3, #28]
   17260:	2b06      	cmp	r3, #6
   17262:	d10e      	bne.n	17282 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   17264:	687b      	ldr	r3, [r7, #4]
   17266:	685b      	ldr	r3, [r3, #4]
   17268:	60fb      	str	r3, [r7, #12]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
   1726a:	69fb      	ldr	r3, [r7, #28]
   1726c:	7f5b      	ldrb	r3, [r3, #29]
   1726e:	2b00      	cmp	r3, #0
   17270:	d001      	beq.n	17276 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1b6>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   17272:	4b0a      	ldr	r3, [pc, #40]	; (1729c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   17274:	e006      	b.n	17284 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>

        /* values from 240...255 are not valid */
        if(*value > 240)
   17276:	68fb      	ldr	r3, [r7, #12]
   17278:	781b      	ldrb	r3, [r3, #0]
   1727a:	2bf0      	cmp	r3, #240	; 0xf0
   1727c:	dd01      	ble.n	17282 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c2>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
   1727e:	4b07      	ldr	r3, [pc, #28]	; (1729c <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1dc>)
   17280:	e000      	b.n	17284 <_ZL14CO_ODF_TPDOcomP12CO_ODF_arg_t+0x1c4>
    }

    return CO_SDO_AB_NONE;
   17282:	2300      	movs	r3, #0
}
   17284:	4618      	mov	r0, r3
   17286:	3720      	adds	r7, #32
   17288:	46bd      	mov	sp, r7
   1728a:	bd80      	pop	{r7, pc}
   1728c:	06090011 	.word	0x06090011
   17290:	06010002 	.word	0x06010002
   17294:	08000022 	.word	0x08000022
   17298:	3fff8000 	.word	0x3fff8000
   1729c:	06090030 	.word	0x06090030
   172a0:	00016b0d 	.word	0x00016b0d

000172a4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
   172a4:	b590      	push	{r4, r7, lr}
   172a6:	b08d      	sub	sp, #52	; 0x34
   172a8:	af04      	add	r7, sp, #16
   172aa:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
   172ac:	687b      	ldr	r3, [r7, #4]
   172ae:	681b      	ldr	r3, [r3, #0]
   172b0:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
   172b2:	687b      	ldr	r3, [r7, #4]
   172b4:	7f5b      	ldrb	r3, [r3, #29]
   172b6:	2b00      	cmp	r3, #0
   172b8:	d010      	beq.n	172dc <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x38>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   172ba:	687b      	ldr	r3, [r7, #4]
   172bc:	685b      	ldr	r3, [r3, #4]
   172be:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
   172c0:	687b      	ldr	r3, [r7, #4]
   172c2:	7f1b      	ldrb	r3, [r3, #28]
   172c4:	2b00      	cmp	r3, #0
   172c6:	d107      	bne.n	172d8 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
   172c8:	69fb      	ldr	r3, [r7, #28]
   172ca:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   172ce:	2b00      	cmp	r3, #0
   172d0:	d102      	bne.n	172d8 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x34>
   172d2:	69bb      	ldr	r3, [r7, #24]
   172d4:	2200      	movs	r2, #0
   172d6:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
   172d8:	2300      	movs	r3, #0
   172da:	e054      	b.n	17386 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
   172dc:	69fb      	ldr	r3, [r7, #28]
   172de:	f893 3020 	ldrb.w	r3, [r3, #32]
   172e2:	f003 0308 	and.w	r3, r3, #8
   172e6:	2b00      	cmp	r3, #0
   172e8:	d001      	beq.n	172ee <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x4a>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
   172ea:	4b29      	ldr	r3, [pc, #164]	; (17390 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xec>)
   172ec:	e04b      	b.n	17386 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
   172ee:	69fb      	ldr	r3, [r7, #28]
   172f0:	695b      	ldr	r3, [r3, #20]
   172f2:	781b      	ldrb	r3, [r3, #0]
   172f4:	2b05      	cmp	r3, #5
   172f6:	d108      	bne.n	1730a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
   172f8:	69fb      	ldr	r3, [r7, #28]
   172fa:	f893 3020 	ldrb.w	r3, [r3, #32]
   172fe:	f003 0302 	and.w	r3, r3, #2
   17302:	2b00      	cmp	r3, #0
   17304:	d001      	beq.n	1730a <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x66>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
   17306:	4b23      	ldr	r3, [pc, #140]	; (17394 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf0>)
   17308:	e03d      	b.n	17386 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    if(RPDO->valid)
   1730a:	69fb      	ldr	r3, [r7, #28]
   1730c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   17310:	2b00      	cmp	r3, #0
   17312:	d001      	beq.n	17318 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x74>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
   17314:	4b20      	ldr	r3, [pc, #128]	; (17398 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
   17316:	e036      	b.n	17386 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
   17318:	687b      	ldr	r3, [r7, #4]
   1731a:	7f1b      	ldrb	r3, [r3, #28]
   1731c:	2b00      	cmp	r3, #0
   1731e:	d110      	bne.n	17342 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x9e>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   17320:	687b      	ldr	r3, [r7, #4]
   17322:	685b      	ldr	r3, [r3, #4]
   17324:	617b      	str	r3, [r7, #20]

        if(*value > 8)
   17326:	697b      	ldr	r3, [r7, #20]
   17328:	781b      	ldrb	r3, [r3, #0]
   1732a:	2b08      	cmp	r3, #8
   1732c:	dd01      	ble.n	17332 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x8e>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
   1732e:	4b1b      	ldr	r3, [pc, #108]	; (1739c <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf8>)
   17330:	e029      	b.n	17386 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_RPDOconfigMap(RPDO, *value);
   17332:	697b      	ldr	r3, [r7, #20]
   17334:	781b      	ldrb	r3, [r3, #0]
   17336:	4619      	mov	r1, r3
   17338:	69f8      	ldr	r0, [r7, #28]
   1733a:	4b19      	ldr	r3, [pc, #100]	; (173a0 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xfc>)
   1733c:	4798      	blx	r3
   1733e:	4603      	mov	r3, r0
   17340:	e021      	b.n	17386 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
   17342:	687b      	ldr	r3, [r7, #4]
   17344:	685b      	ldr	r3, [r3, #4]
   17346:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
   17348:	2300      	movs	r3, #0
   1734a:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
   1734c:	2300      	movs	r3, #0
   1734e:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
   17350:	69fb      	ldr	r3, [r7, #28]
   17352:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   17356:	2b00      	cmp	r3, #0
   17358:	d001      	beq.n	1735e <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xba>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
   1735a:	4b0f      	ldr	r3, [pc, #60]	; (17398 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xf4>)
   1735c:	e013      	b.n	17386 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0xe2>

        /* verify if mapping is correct */
        return  (CO_SDO_abortCode_t)CO_PDOfindMap(
   1735e:	69fb      	ldr	r3, [r7, #28]
   17360:	6858      	ldr	r0, [r3, #4]
   17362:	693b      	ldr	r3, [r7, #16]
   17364:	6819      	ldr	r1, [r3, #0]
               *value,
                0,
               &pData,
               &length,
               &dummy,
               &MBvar);
   17366:	f107 020c 	add.w	r2, r7, #12
   1736a:	f107 0309 	add.w	r3, r7, #9
   1736e:	9302      	str	r3, [sp, #8]
   17370:	f107 030a 	add.w	r3, r7, #10
   17374:	9301      	str	r3, [sp, #4]
   17376:	f107 030b 	add.w	r3, r7, #11
   1737a:	9300      	str	r3, [sp, #0]
   1737c:	4613      	mov	r3, r2
   1737e:	2200      	movs	r2, #0
   17380:	4c08      	ldr	r4, [pc, #32]	; (173a4 <_ZL14CO_ODF_RPDOmapP12CO_ODF_arg_t+0x100>)
   17382:	47a0      	blx	r4
   17384:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
   17386:	4618      	mov	r0, r3
   17388:	3724      	adds	r7, #36	; 0x24
   1738a:	46bd      	mov	sp, r7
   1738c:	bd90      	pop	{r4, r7, pc}
   1738e:	bf00      	nop
   17390:	06010002 	.word	0x06010002
   17394:	08000022 	.word	0x08000022
   17398:	06010000 	.word	0x06010000
   1739c:	06040042 	.word	0x06040042
   173a0:	00016da1 	.word	0x00016da1
   173a4:	00016ba1 	.word	0x00016ba1

000173a8 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
   173a8:	b590      	push	{r4, r7, lr}
   173aa:	b08d      	sub	sp, #52	; 0x34
   173ac:	af04      	add	r7, sp, #16
   173ae:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
   173b0:	687b      	ldr	r3, [r7, #4]
   173b2:	681b      	ldr	r3, [r3, #0]
   173b4:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
   173b6:	687b      	ldr	r3, [r7, #4]
   173b8:	7f5b      	ldrb	r3, [r3, #29]
   173ba:	2b00      	cmp	r3, #0
   173bc:	d00f      	beq.n	173de <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   173be:	687b      	ldr	r3, [r7, #4]
   173c0:	685b      	ldr	r3, [r3, #4]
   173c2:	61bb      	str	r3, [r7, #24]

        if(ODF_arg->subIndex == 0){
   173c4:	687b      	ldr	r3, [r7, #4]
   173c6:	7f1b      	ldrb	r3, [r3, #28]
   173c8:	2b00      	cmp	r3, #0
   173ca:	d106      	bne.n	173da <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
   173cc:	69fb      	ldr	r3, [r7, #28]
   173ce:	7f9b      	ldrb	r3, [r3, #30]
   173d0:	2b00      	cmp	r3, #0
   173d2:	d102      	bne.n	173da <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x32>
   173d4:	69bb      	ldr	r3, [r7, #24]
   173d6:	2200      	movs	r2, #0
   173d8:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
   173da:	2300      	movs	r3, #0
   173dc:	e050      	b.n	17480 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
   173de:	69fb      	ldr	r3, [r7, #28]
   173e0:	7f1b      	ldrb	r3, [r3, #28]
   173e2:	f003 0308 	and.w	r3, r3, #8
   173e6:	2b00      	cmp	r3, #0
   173e8:	d001      	beq.n	173ee <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
   173ea:	4b27      	ldr	r3, [pc, #156]	; (17488 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe0>)
   173ec:	e048      	b.n	17480 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
   173ee:	69fb      	ldr	r3, [r7, #28]
   173f0:	691b      	ldr	r3, [r3, #16]
   173f2:	781b      	ldrb	r3, [r3, #0]
   173f4:	2b05      	cmp	r3, #5
   173f6:	d107      	bne.n	17408 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
   173f8:	69fb      	ldr	r3, [r7, #28]
   173fa:	7f1b      	ldrb	r3, [r3, #28]
   173fc:	f003 0302 	and.w	r3, r3, #2
   17400:	2b00      	cmp	r3, #0
   17402:	d001      	beq.n	17408 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
   17404:	4b21      	ldr	r3, [pc, #132]	; (1748c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe4>)
   17406:	e03b      	b.n	17480 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    if(TPDO->valid)
   17408:	69fb      	ldr	r3, [r7, #28]
   1740a:	7f5b      	ldrb	r3, [r3, #29]
   1740c:	2b00      	cmp	r3, #0
   1740e:	d001      	beq.n	17414 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
   17410:	4b1f      	ldr	r3, [pc, #124]	; (17490 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
   17412:	e035      	b.n	17480 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
   17414:	687b      	ldr	r3, [r7, #4]
   17416:	7f1b      	ldrb	r3, [r3, #28]
   17418:	2b00      	cmp	r3, #0
   1741a:	d110      	bne.n	1743e <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
   1741c:	687b      	ldr	r3, [r7, #4]
   1741e:	685b      	ldr	r3, [r3, #4]
   17420:	617b      	str	r3, [r7, #20]

        if(*value > 8)
   17422:	697b      	ldr	r3, [r7, #20]
   17424:	781b      	ldrb	r3, [r3, #0]
   17426:	2b08      	cmp	r3, #8
   17428:	dd01      	ble.n	1742e <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
   1742a:	4b1a      	ldr	r3, [pc, #104]	; (17494 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xec>)
   1742c:	e028      	b.n	17480 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* configure mapping */
        return (CO_SDO_abortCode_t)CO_TPDOconfigMap(TPDO, *value);
   1742e:	697b      	ldr	r3, [r7, #20]
   17430:	781b      	ldrb	r3, [r3, #0]
   17432:	4619      	mov	r1, r3
   17434:	69f8      	ldr	r0, [r7, #28]
   17436:	4b18      	ldr	r3, [pc, #96]	; (17498 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf0>)
   17438:	4798      	blx	r3
   1743a:	4603      	mov	r3, r0
   1743c:	e020      	b.n	17480 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
   1743e:	687b      	ldr	r3, [r7, #4]
   17440:	685b      	ldr	r3, [r3, #4]
   17442:	613b      	str	r3, [r7, #16]
        uint8_t* pData;
        uint8_t length = 0;
   17444:	2300      	movs	r3, #0
   17446:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
   17448:	2300      	movs	r3, #0
   1744a:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
   1744c:	69fb      	ldr	r3, [r7, #28]
   1744e:	7f9b      	ldrb	r3, [r3, #30]
   17450:	2b00      	cmp	r3, #0
   17452:	d001      	beq.n	17458 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
   17454:	4b0e      	ldr	r3, [pc, #56]	; (17490 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xe8>)
   17456:	e013      	b.n	17480 <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xd8>

        /* verify if mapping is correct */
        return (CO_SDO_abortCode_t)CO_PDOfindMap(
   17458:	69fb      	ldr	r3, [r7, #28]
   1745a:	6858      	ldr	r0, [r3, #4]
   1745c:	693b      	ldr	r3, [r7, #16]
   1745e:	6819      	ldr	r1, [r3, #0]
               *value,
                1,
               &pData,
               &length,
               &dummy,
               &MBvar);
   17460:	f107 020c 	add.w	r2, r7, #12
   17464:	f107 0309 	add.w	r3, r7, #9
   17468:	9302      	str	r3, [sp, #8]
   1746a:	f107 030a 	add.w	r3, r7, #10
   1746e:	9301      	str	r3, [sp, #4]
   17470:	f107 030b 	add.w	r3, r7, #11
   17474:	9300      	str	r3, [sp, #0]
   17476:	4613      	mov	r3, r2
   17478:	2201      	movs	r2, #1
   1747a:	4c08      	ldr	r4, [pc, #32]	; (1749c <_ZL14CO_ODF_TPDOmapP12CO_ODF_arg_t+0xf4>)
   1747c:	47a0      	blx	r4
   1747e:	4603      	mov	r3, r0
    }

    return CO_SDO_AB_NONE;
}
   17480:	4618      	mov	r0, r3
   17482:	3724      	adds	r7, #36	; 0x24
   17484:	46bd      	mov	sp, r7
   17486:	bd90      	pop	{r4, r7, pc}
   17488:	06010002 	.word	0x06010002
   1748c:	08000022 	.word	0x08000022
   17490:	06010000 	.word	0x06010000
   17494:	06040042 	.word	0x06040042
   17498:	00016e71 	.word	0x00016e71
   1749c:	00016ba1 	.word	0x00016ba1

000174a0 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint32_t                idx_RPDOCommPar,
        uint32_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx)
{
   174a0:	b590      	push	{r4, r7, lr}
   174a2:	b087      	sub	sp, #28
   174a4:	af02      	add	r7, sp, #8
   174a6:	60f8      	str	r0, [r7, #12]
   174a8:	60b9      	str	r1, [r7, #8]
   174aa:	607a      	str	r2, [r7, #4]
   174ac:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || SYNC==NULL || operatingState==NULL ||
   174ae:	68bb      	ldr	r3, [r7, #8]
   174b0:	2b00      	cmp	r3, #0
   174b2:	d014      	beq.n	174de <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   174b4:	687b      	ldr	r3, [r7, #4]
   174b6:	2b00      	cmp	r3, #0
   174b8:	d011      	beq.n	174de <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   174ba:	683b      	ldr	r3, [r7, #0]
   174bc:	2b00      	cmp	r3, #0
   174be:	d00e      	beq.n	174de <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   174c0:	6a3b      	ldr	r3, [r7, #32]
   174c2:	2b00      	cmp	r3, #0
   174c4:	d00b      	beq.n	174de <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   174c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   174c8:	2b00      	cmp	r3, #0
   174ca:	d008      	beq.n	174de <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   174cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   174ce:	2b00      	cmp	r3, #0
   174d0:	d005      	beq.n	174de <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
   174d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   174d4:	2b00      	cmp	r3, #0
   174d6:	d002      	beq.n	174de <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
   174d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   174da:	2b00      	cmp	r3, #0
   174dc:	d102      	bne.n	174e4 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x44>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   174de:	f04f 33ff 	mov.w	r3, #4294967295
   174e2:	e050      	b.n	17586 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xe6>
    }

    /* Configure object variables */
    RPDO->em = em;
   174e4:	68bb      	ldr	r3, [r7, #8]
   174e6:	687a      	ldr	r2, [r7, #4]
   174e8:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
   174ea:	68bb      	ldr	r3, [r7, #8]
   174ec:	683a      	ldr	r2, [r7, #0]
   174ee:	605a      	str	r2, [r3, #4]
    RPDO->SYNC = SYNC;
   174f0:	68bb      	ldr	r3, [r7, #8]
   174f2:	6a3a      	ldr	r2, [r7, #32]
   174f4:	609a      	str	r2, [r3, #8]
    RPDO->RPDOCommPar = RPDOCommPar;
   174f6:	68bb      	ldr	r3, [r7, #8]
   174f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   174fa:	60da      	str	r2, [r3, #12]
    RPDO->RPDOMapPar = RPDOMapPar;
   174fc:	68bb      	ldr	r3, [r7, #8]
   174fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
   17500:	611a      	str	r2, [r3, #16]
    RPDO->operatingState = operatingState;
   17502:	68bb      	ldr	r3, [r7, #8]
   17504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17506:	615a      	str	r2, [r3, #20]
    RPDO->nodeId = nodeId;
   17508:	68bb      	ldr	r3, [r7, #8]
   1750a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   1750e:	761a      	strb	r2, [r3, #24]
    RPDO->defaultCOB_ID = defaultCOB_ID;
   17510:	68bb      	ldr	r3, [r7, #8]
   17512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   17514:	61da      	str	r2, [r3, #28]
    RPDO->restrictionFlags = restrictionFlags;
   17516:	68bb      	ldr	r3, [r7, #8]
   17518:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
   1751c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    canopen_driver->CO_OD_configure( idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
   17520:	4b1b      	ldr	r3, [pc, #108]	; (17590 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
   17522:	681b      	ldr	r3, [r3, #0]
   17524:	1d18      	adds	r0, r3, #4
   17526:	2300      	movs	r3, #0
   17528:	9301      	str	r3, [sp, #4]
   1752a:	2300      	movs	r3, #0
   1752c:	9300      	str	r3, [sp, #0]
   1752e:	68bb      	ldr	r3, [r7, #8]
   17530:	4a18      	ldr	r2, [pc, #96]	; (17594 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf4>)
   17532:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   17534:	4c18      	ldr	r4, [pc, #96]	; (17598 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
   17536:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
   17538:	4b15      	ldr	r3, [pc, #84]	; (17590 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf0>)
   1753a:	681b      	ldr	r3, [r3, #0]
   1753c:	1d18      	adds	r0, r3, #4
   1753e:	2300      	movs	r3, #0
   17540:	9301      	str	r3, [sp, #4]
   17542:	2300      	movs	r3, #0
   17544:	9300      	str	r3, [sp, #0]
   17546:	68bb      	ldr	r3, [r7, #8]
   17548:	4a14      	ldr	r2, [pc, #80]	; (1759c <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xfc>)
   1754a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1754c:	4c12      	ldr	r4, [pc, #72]	; (17598 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>)
   1754e:	47a0      	blx	r4

    /* configure communication and mapping */
    RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
   17550:	68bb      	ldr	r3, [r7, #8]
   17552:	2200      	movs	r2, #0
   17554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   17558:	68bb      	ldr	r3, [r7, #8]
   1755a:	2200      	movs	r2, #0
   1755c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    RPDO->CANdevRx = CANdevRx;
   17560:	68bb      	ldr	r3, [r7, #8]
   17562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   17564:	659a      	str	r2, [r3, #88]	; 0x58
    RPDO->CANdevRxIdx = CANdevRxIdx;
   17566:	68bb      	ldr	r3, [r7, #8]
   17568:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1756a:	65da      	str	r2, [r3, #92]	; 0x5c

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
   1756c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1756e:	781b      	ldrb	r3, [r3, #0]
   17570:	4619      	mov	r1, r3
   17572:	68b8      	ldr	r0, [r7, #8]
   17574:	4b0a      	ldr	r3, [pc, #40]	; (175a0 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x100>)
   17576:	4798      	blx	r3
   CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
   17578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1757a:	685b      	ldr	r3, [r3, #4]
   1757c:	4619      	mov	r1, r3
   1757e:	68b8      	ldr	r0, [r7, #8]
   17580:	4b08      	ldr	r3, [pc, #32]	; (175a4 <_ZN12CO_PDO_Class12CO_RPDO_initEP9CO_RPDO_tP7CO_EM_tP8CO_SDO_tP9CO_SYNC_tPhhmhPK16CO_RPDOCommPar_tPK15CO_RPDOMapPar_tmmP14CO_CANmodule_tm+0x104>)
   17582:	4798      	blx	r3

    return CO_ERROR_NO;
   17584:	2300      	movs	r3, #0
}
   17586:	4618      	mov	r0, r3
   17588:	3714      	adds	r7, #20
   1758a:	46bd      	mov	sp, r7
   1758c:	bd90      	pop	{r4, r7, pc}
   1758e:	bf00      	nop
   17590:	2000da5c 	.word	0x2000da5c
   17594:	00016f41 	.word	0x00016f41
   17598:	00017c4d 	.word	0x00017c4d
   1759c:	000172a5 	.word	0x000172a5
   175a0:	00016da1 	.word	0x00016da1
   175a4:	00016a35 	.word	0x00016a35

000175a8 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint32_t                idx_TPDOCommPar,
        uint32_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   175a8:	b590      	push	{r4, r7, lr}
   175aa:	b087      	sub	sp, #28
   175ac:	af02      	add	r7, sp, #8
   175ae:	60f8      	str	r0, [r7, #12]
   175b0:	60b9      	str	r1, [r7, #8]
   175b2:	607a      	str	r2, [r7, #4]
   175b4:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
   175b6:	68bb      	ldr	r3, [r7, #8]
   175b8:	2b00      	cmp	r3, #0
   175ba:	d011      	beq.n	175e0 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   175bc:	687b      	ldr	r3, [r7, #4]
   175be:	2b00      	cmp	r3, #0
   175c0:	d00e      	beq.n	175e0 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   175c2:	683b      	ldr	r3, [r7, #0]
   175c4:	2b00      	cmp	r3, #0
   175c6:	d00b      	beq.n	175e0 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   175c8:	6a3b      	ldr	r3, [r7, #32]
   175ca:	2b00      	cmp	r3, #0
   175cc:	d008      	beq.n	175e0 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   175ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   175d0:	2b00      	cmp	r3, #0
   175d2:	d005      	beq.n	175e0 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
   175d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   175d6:	2b00      	cmp	r3, #0
   175d8:	d002      	beq.n	175e0 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x38>
   175da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   175dc:	2b00      	cmp	r3, #0
   175de:	d102      	bne.n	175e6 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   175e0:	f04f 33ff 	mov.w	r3, #4294967295
   175e4:	e07e      	b.n	176e4 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x13c>
    }

    /* Configure object variables */
    TPDO->em = em;
   175e6:	68bb      	ldr	r3, [r7, #8]
   175e8:	687a      	ldr	r2, [r7, #4]
   175ea:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
   175ec:	68bb      	ldr	r3, [r7, #8]
   175ee:	683a      	ldr	r2, [r7, #0]
   175f0:	605a      	str	r2, [r3, #4]
    TPDO->TPDOCommPar = TPDOCommPar;
   175f2:	68bb      	ldr	r3, [r7, #8]
   175f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   175f6:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
   175f8:	68bb      	ldr	r3, [r7, #8]
   175fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   175fc:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
   175fe:	68bb      	ldr	r3, [r7, #8]
   17600:	6a3a      	ldr	r2, [r7, #32]
   17602:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
   17604:	68bb      	ldr	r3, [r7, #8]
   17606:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
   1760a:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
   1760c:	68bb      	ldr	r3, [r7, #8]
   1760e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17610:	619a      	str	r2, [r3, #24]
    TPDO->restrictionFlags = restrictionFlags;
   17612:	68bb      	ldr	r3, [r7, #8]
   17614:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   17618:	771a      	strb	r2, [r3, #28]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    canopen_driver->CO_OD_configure( idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
   1761a:	4b34      	ldr	r3, [pc, #208]	; (176ec <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x144>)
   1761c:	681b      	ldr	r3, [r3, #0]
   1761e:	1d18      	adds	r0, r3, #4
   17620:	2300      	movs	r3, #0
   17622:	9301      	str	r3, [sp, #4]
   17624:	2300      	movs	r3, #0
   17626:	9300      	str	r3, [sp, #0]
   17628:	68bb      	ldr	r3, [r7, #8]
   1762a:	4a31      	ldr	r2, [pc, #196]	; (176f0 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x148>)
   1762c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1762e:	4c31      	ldr	r4, [pc, #196]	; (176f4 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x14c>)
   17630:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
   17632:	4b2e      	ldr	r3, [pc, #184]	; (176ec <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x144>)
   17634:	681b      	ldr	r3, [r3, #0]
   17636:	1d18      	adds	r0, r3, #4
   17638:	2300      	movs	r3, #0
   1763a:	9301      	str	r3, [sp, #4]
   1763c:	2300      	movs	r3, #0
   1763e:	9300      	str	r3, [sp, #0]
   17640:	68bb      	ldr	r3, [r7, #8]
   17642:	4a2d      	ldr	r2, [pc, #180]	; (176f8 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x150>)
   17644:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   17646:	4c2b      	ldr	r4, [pc, #172]	; (176f4 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x14c>)
   17648:	47a0      	blx	r4

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
   1764a:	68bb      	ldr	r3, [r7, #8]
   1764c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1764e:	64da      	str	r2, [r3, #76]	; 0x4c
    TPDO->CANdevTxIdx = CANdevTxIdx;
   17650:	68bb      	ldr	r3, [r7, #8]
   17652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   17654:	655a      	str	r2, [r3, #84]	; 0x54
    TPDO->syncCounter = 255;
   17656:	68bb      	ldr	r3, [r7, #8]
   17658:	22ff      	movs	r2, #255	; 0xff
   1765a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TPDO->inhibitTimer = 0;
   1765e:	68bb      	ldr	r3, [r7, #8]
   17660:	2200      	movs	r2, #0
   17662:	645a      	str	r2, [r3, #68]	; 0x44
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
   17664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17666:	695b      	ldr	r3, [r3, #20]
   17668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1766c:	fb02 f203 	mul.w	r2, r2, r3
   17670:	68bb      	ldr	r3, [r7, #8]
   17672:	649a      	str	r2, [r3, #72]	; 0x48
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
   17674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17676:	7a1b      	ldrb	r3, [r3, #8]
   17678:	2bfd      	cmp	r3, #253	; 0xfd
   1767a:	dd02      	ble.n	17682 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xda>
   1767c:	68bb      	ldr	r3, [r7, #8]
   1767e:	2201      	movs	r2, #1
   17680:	77da      	strb	r2, [r3, #31]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
   17682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17684:	781b      	ldrb	r3, [r3, #0]
   17686:	4619      	mov	r1, r3
   17688:	68b8      	ldr	r0, [r7, #8]
   1768a:	4b1c      	ldr	r3, [pc, #112]	; (176fc <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x154>)
   1768c:	4798      	blx	r3
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
   1768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17690:	6859      	ldr	r1, [r3, #4]
   17692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17694:	7a1b      	ldrb	r3, [r3, #8]
   17696:	2bf0      	cmp	r3, #240	; 0xf0
   17698:	dc01      	bgt.n	1769e <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf6>
   1769a:	2301      	movs	r3, #1
   1769c:	e000      	b.n	176a0 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0xf8>
   1769e:	2300      	movs	r3, #0
   176a0:	461a      	mov	r2, r3
   176a2:	68b8      	ldr	r0, [r7, #8]
   176a4:	4b16      	ldr	r3, [pc, #88]	; (17700 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x158>)
   176a6:	4798      	blx	r3

    if((TPDOCommPar->transmissionType>240 &&
   176a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   176aa:	7a1b      	ldrb	r3, [r3, #8]
   176ac:	2bf0      	cmp	r3, #240	; 0xf0
   176ae:	dd03      	ble.n	176b8 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x110>
         TPDOCommPar->transmissionType<254) ||
   176b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   176b2:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
   176b4:	2bfd      	cmp	r3, #253	; 0xfd
   176b6:	dd03      	ble.n	176c0 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x118>
         TPDOCommPar->SYNCStartValue>240){
   176b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   176ba:	7e1b      	ldrb	r3, [r3, #24]
         TPDOCommPar->transmissionType<254) ||
   176bc:	2bf0      	cmp	r3, #240	; 0xf0
   176be:	dd02      	ble.n	176c6 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x11e>
            TPDO->valid = false;
   176c0:	68bb      	ldr	r3, [r7, #8]
   176c2:	2200      	movs	r2, #0
   176c4:	775a      	strb	r2, [r3, #29]
    }
	node_ID=nodeId; 
   176c6:	68fb      	ldr	r3, [r7, #12]
   176c8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
   176cc:	721a      	strb	r2, [r3, #8]
	memcpy(&local_tx_buffer,TPDO->CANtxBuff,sizeof(CO_CANtx_t));
   176ce:	68bb      	ldr	r3, [r7, #8]
   176d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   176d2:	2210      	movs	r2, #16
   176d4:	4619      	mov	r1, r3
   176d6:	480b      	ldr	r0, [pc, #44]	; (17704 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x15c>)
   176d8:	4b0b      	ldr	r3, [pc, #44]	; (17708 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x160>)
   176da:	4798      	blx	r3
	tx_buffer=&local_tx_buffer;
   176dc:	68fb      	ldr	r3, [r7, #12]
   176de:	4a09      	ldr	r2, [pc, #36]	; (17704 <_ZN12CO_PDO_Class12CO_TPDO_initEP9CO_TPDO_tP7CO_EM_tP8CO_SDO_tPhhmhPK16CO_TPDOCommPar_tPK15CO_TPDOMapPar_tmmP14CO_CANmodule_tm+0x15c>)
   176e0:	601a      	str	r2, [r3, #0]
    return CO_ERROR_NO;
   176e2:	2300      	movs	r3, #0
}
   176e4:	4618      	mov	r0, r3
   176e6:	3714      	adds	r7, #20
   176e8:	46bd      	mov	sp, r7
   176ea:	bd90      	pop	{r4, r7, pc}
   176ec:	2000da5c 	.word	0x2000da5c
   176f0:	000170c1 	.word	0x000170c1
   176f4:	00017c4d 	.word	0x00017c4d
   176f8:	000173a9 	.word	0x000173a9
   176fc:	00016e71 	.word	0x00016e71
   17700:	00016b0d 	.word	0x00016b0d
   17704:	2000da84 	.word	0x2000da84
   17708:	0001ab91 	.word	0x0001ab91

0001770c <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh>:


    return   canopen_driver->CAN_Send( TPDO->CANtxBuff);
}

uint32_t CO_PDO_Class::Send_Simple_Run_Command(uint8_t *data,uint8_t node){
   1770c:	b580      	push	{r7, lr}
   1770e:	b086      	sub	sp, #24
   17710:	af00      	add	r7, sp, #0
   17712:	60f8      	str	r0, [r7, #12]
   17714:	60b9      	str	r1, [r7, #8]
   17716:	4613      	mov	r3, r2
   17718:	71fb      	strb	r3, [r7, #7]
	tx_buffer->ident=(CO_CAN_ID_RPDO_1+node)<<2;
   1771a:	68fb      	ldr	r3, [r7, #12]
   1771c:	681b      	ldr	r3, [r3, #0]
   1771e:	79fa      	ldrb	r2, [r7, #7]
   17720:	f502 7200 	add.w	r2, r2, #512	; 0x200
   17724:	0092      	lsls	r2, r2, #2
   17726:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++)
   17728:	2300      	movs	r3, #0
   1772a:	75fb      	strb	r3, [r7, #23]
   1772c:	7dfb      	ldrb	r3, [r7, #23]
   1772e:	2b07      	cmp	r3, #7
   17730:	dc0d      	bgt.n	1774e <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x42>
	{
		tx_buffer->data[i]=data[i];
   17732:	68fb      	ldr	r3, [r7, #12]
   17734:	681a      	ldr	r2, [r3, #0]
   17736:	7dfb      	ldrb	r3, [r7, #23]
   17738:	7df9      	ldrb	r1, [r7, #23]
   1773a:	68b8      	ldr	r0, [r7, #8]
   1773c:	4401      	add	r1, r0
   1773e:	7809      	ldrb	r1, [r1, #0]
   17740:	4413      	add	r3, r2
   17742:	460a      	mov	r2, r1
   17744:	715a      	strb	r2, [r3, #5]
	for (uint8_t i = 0; i < 8; i++)
   17746:	7dfb      	ldrb	r3, [r7, #23]
   17748:	3301      	adds	r3, #1
   1774a:	75fb      	strb	r3, [r7, #23]
   1774c:	e7ee      	b.n	1772c <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x20>
	}
	tx_buffer->DLC=4;
   1774e:	68fb      	ldr	r3, [r7, #12]
   17750:	681b      	ldr	r3, [r3, #0]
   17752:	2204      	movs	r2, #4
   17754:	711a      	strb	r2, [r3, #4]
	 return   canopen_driver->CAN_Send(tx_buffer);
   17756:	4b06      	ldr	r3, [pc, #24]	; (17770 <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x64>)
   17758:	681a      	ldr	r2, [r3, #0]
   1775a:	68fb      	ldr	r3, [r7, #12]
   1775c:	681b      	ldr	r3, [r3, #0]
   1775e:	4619      	mov	r1, r3
   17760:	4610      	mov	r0, r2
   17762:	4b04      	ldr	r3, [pc, #16]	; (17774 <_ZN12CO_PDO_Class23Send_Simple_Run_CommandEPhh+0x68>)
   17764:	4798      	blx	r3
   17766:	4603      	mov	r3, r0
}
   17768:	4618      	mov	r0, r3
   1776a:	3718      	adds	r7, #24
   1776c:	46bd      	mov	sp, r7
   1776e:	bd80      	pop	{r7, pc}
   17770:	2000da5c 	.word	0x2000da5c
   17774:	00015d61 	.word	0x00015d61

00017778 <_ZN12CO_SDO_ClassC1Ev>:

CO_SDO_Class	*ptrCOSDOClass;
CO_SDO_t *SDO;

// default constructor
CO_SDO_Class::CO_SDO_Class()
   17778:	b580      	push	{r7, lr}
   1777a:	b082      	sub	sp, #8
   1777c:	af00      	add	r7, sp, #0
   1777e:	6078      	str	r0, [r7, #4]
   17780:	6878      	ldr	r0, [r7, #4]
   17782:	4b05      	ldr	r3, [pc, #20]	; (17798 <_ZN12CO_SDO_ClassC1Ev+0x20>)
   17784:	4798      	blx	r3
{
	ptrCOSDOClass=this;
   17786:	4a05      	ldr	r2, [pc, #20]	; (1779c <_ZN12CO_SDO_ClassC1Ev+0x24>)
   17788:	687b      	ldr	r3, [r7, #4]
   1778a:	6013      	str	r3, [r2, #0]
} //CO_SDO_Class
   1778c:	687b      	ldr	r3, [r7, #4]
   1778e:	4618      	mov	r0, r3
   17790:	3708      	adds	r7, #8
   17792:	46bd      	mov	sp, r7
   17794:	bd80      	pop	{r7, pc}
   17796:	bf00      	nop
   17798:	00018441 	.word	0x00018441
   1779c:	2000daac 	.word	0x2000daac

000177a0 <_ZN12CO_SDO_ClassD1Ev>:

// default destructor
CO_SDO_Class::~CO_SDO_Class()
   177a0:	b580      	push	{r7, lr}
   177a2:	b082      	sub	sp, #8
   177a4:	af00      	add	r7, sp, #0
   177a6:	6078      	str	r0, [r7, #4]
   177a8:	6878      	ldr	r0, [r7, #4]
   177aa:	4b03      	ldr	r3, [pc, #12]	; (177b8 <_ZN12CO_SDO_ClassD1Ev+0x18>)
   177ac:	4798      	blx	r3
{
} //~CO_SDO_Class
   177ae:	687b      	ldr	r3, [r7, #4]
   177b0:	4618      	mov	r0, r3
   177b2:	3708      	adds	r7, #8
   177b4:	46bd      	mov	sp, r7
   177b6:	bd80      	pop	{r7, pc}
   177b8:	00018455 	.word	0x00018455

000177bc <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm>:

void CO_SDO_Class::CO_memcpy(uint8_t dest[], const uint8_t src[], const uint32_t size){
   177bc:	b480      	push	{r7}
   177be:	b087      	sub	sp, #28
   177c0:	af00      	add	r7, sp, #0
   177c2:	60f8      	str	r0, [r7, #12]
   177c4:	60b9      	str	r1, [r7, #8]
   177c6:	607a      	str	r2, [r7, #4]
   177c8:	603b      	str	r3, [r7, #0]
    uint32_t i;
    for(i = 0; i < size; i++){
   177ca:	2300      	movs	r3, #0
   177cc:	617b      	str	r3, [r7, #20]
   177ce:	697a      	ldr	r2, [r7, #20]
   177d0:	683b      	ldr	r3, [r7, #0]
   177d2:	429a      	cmp	r2, r3
   177d4:	d20b      	bcs.n	177ee <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x32>
        dest[i] = src[i];
   177d6:	68ba      	ldr	r2, [r7, #8]
   177d8:	697b      	ldr	r3, [r7, #20]
   177da:	4413      	add	r3, r2
   177dc:	6879      	ldr	r1, [r7, #4]
   177de:	697a      	ldr	r2, [r7, #20]
   177e0:	440a      	add	r2, r1
   177e2:	7812      	ldrb	r2, [r2, #0]
   177e4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < size; i++){
   177e6:	697b      	ldr	r3, [r7, #20]
   177e8:	3301      	adds	r3, #1
   177ea:	617b      	str	r3, [r7, #20]
   177ec:	e7ef      	b.n	177ce <_ZN12CO_SDO_Class9CO_memcpyEPhPKhm+0x12>
    }
}
   177ee:	bf00      	nop
   177f0:	371c      	adds	r7, #28
   177f2:	46bd      	mov	sp, r7
   177f4:	bc80      	pop	{r7}
   177f6:	4770      	bx	lr

000177f8 <_ZN12CO_SDO_Class12CO_getUint32EPKh>:
    b.u8[0] = data[0];
    b.u8[1] = data[1];
    return b.u16[0];
}

uint32_t CO_SDO_Class::CO_getUint32(const uint8_t data[]){
   177f8:	b480      	push	{r7}
   177fa:	b087      	sub	sp, #28
   177fc:	af00      	add	r7, sp, #0
   177fe:	6078      	str	r0, [r7, #4]
   17800:	6039      	str	r1, [r7, #0]
    CO_bytes_t b;
    b.u8[0] = data[0];
   17802:	683b      	ldr	r3, [r7, #0]
   17804:	781b      	ldrb	r3, [r3, #0]
   17806:	723b      	strb	r3, [r7, #8]
    b.u8[1] = data[1];
   17808:	683b      	ldr	r3, [r7, #0]
   1780a:	3301      	adds	r3, #1
   1780c:	781b      	ldrb	r3, [r3, #0]
   1780e:	727b      	strb	r3, [r7, #9]
    b.u8[2] = data[2];
   17810:	683b      	ldr	r3, [r7, #0]
   17812:	3302      	adds	r3, #2
   17814:	781b      	ldrb	r3, [r3, #0]
   17816:	72bb      	strb	r3, [r7, #10]
    b.u8[3] = data[3];
   17818:	683b      	ldr	r3, [r7, #0]
   1781a:	3303      	adds	r3, #3
   1781c:	781b      	ldrb	r3, [r3, #0]
   1781e:	72fb      	strb	r3, [r7, #11]
    return b.u32[0];
   17820:	68bb      	ldr	r3, [r7, #8]
}
   17822:	4618      	mov	r0, r3
   17824:	371c      	adds	r7, #28
   17826:	46bd      	mov	sp, r7
   17828:	bc80      	pop	{r7}
   1782a:	4770      	bx	lr

0001782c <_ZN12CO_SDO_Class12CO_setUint32EPhm>:
    b.u16[0] = value;
    data[0] = b.u8[0];
    data[1] = b.u8[1];
}

void CO_SDO_Class::CO_setUint32(uint8_t data[], const uint32_t value){
   1782c:	b480      	push	{r7}
   1782e:	b089      	sub	sp, #36	; 0x24
   17830:	af00      	add	r7, sp, #0
   17832:	60f8      	str	r0, [r7, #12]
   17834:	60b9      	str	r1, [r7, #8]
   17836:	607a      	str	r2, [r7, #4]
    CO_bytes_t b;
    b.u32[0] = value;
   17838:	687b      	ldr	r3, [r7, #4]
   1783a:	613b      	str	r3, [r7, #16]
    data[0] = b.u8[0];
   1783c:	7c3a      	ldrb	r2, [r7, #16]
   1783e:	68bb      	ldr	r3, [r7, #8]
   17840:	701a      	strb	r2, [r3, #0]
    data[1] = b.u8[1];
   17842:	68bb      	ldr	r3, [r7, #8]
   17844:	3301      	adds	r3, #1
   17846:	7c7a      	ldrb	r2, [r7, #17]
   17848:	701a      	strb	r2, [r3, #0]
    data[2] = b.u8[2];
   1784a:	68bb      	ldr	r3, [r7, #8]
   1784c:	3302      	adds	r3, #2
   1784e:	7cba      	ldrb	r2, [r7, #18]
   17850:	701a      	strb	r2, [r3, #0]
    data[3] = b.u8[3];
   17852:	68bb      	ldr	r3, [r7, #8]
   17854:	3303      	adds	r3, #3
   17856:	7cfa      	ldrb	r2, [r7, #19]
   17858:	701a      	strb	r2, [r3, #0]
}
   1785a:	bf00      	nop
   1785c:	3724      	adds	r7, #36	; 0x24
   1785e:	46bd      	mov	sp, r7
   17860:	bc80      	pop	{r7}
   17862:	4770      	bx	lr

00017864 <_ZN12CO_SDO_Class14CO_memcpySwap2EPvPKv>:

#ifdef CO_LITTLE_ENDIAN
void CO_SDO_Class::CO_memcpySwap2(void* dest, const void* src){
   17864:	b480      	push	{r7}
   17866:	b087      	sub	sp, #28
   17868:	af00      	add	r7, sp, #0
   1786a:	60f8      	str	r0, [r7, #12]
   1786c:	60b9      	str	r1, [r7, #8]
   1786e:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
   17870:	68bb      	ldr	r3, [r7, #8]
   17872:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
   17874:	687b      	ldr	r3, [r7, #4]
   17876:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
   17878:	693b      	ldr	r3, [r7, #16]
   1787a:	781a      	ldrb	r2, [r3, #0]
   1787c:	697b      	ldr	r3, [r7, #20]
   1787e:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
   17880:	697b      	ldr	r3, [r7, #20]
   17882:	3301      	adds	r3, #1
   17884:	693a      	ldr	r2, [r7, #16]
   17886:	7852      	ldrb	r2, [r2, #1]
   17888:	701a      	strb	r2, [r3, #0]
}
   1788a:	bf00      	nop
   1788c:	371c      	adds	r7, #28
   1788e:	46bd      	mov	sp, r7
   17890:	bc80      	pop	{r7}
   17892:	4770      	bx	lr

00017894 <_ZN12CO_SDO_Class14CO_memcpySwap4EPvPKv>:
void CO_SDO_Class::CO_memcpySwap4(void* dest, const void* src){
   17894:	b480      	push	{r7}
   17896:	b087      	sub	sp, #28
   17898:	af00      	add	r7, sp, #0
   1789a:	60f8      	str	r0, [r7, #12]
   1789c:	60b9      	str	r1, [r7, #8]
   1789e:	607a      	str	r2, [r7, #4]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
   178a0:	68bb      	ldr	r3, [r7, #8]
   178a2:	617b      	str	r3, [r7, #20]
    csrc = (char *) src;
   178a4:	687b      	ldr	r3, [r7, #4]
   178a6:	613b      	str	r3, [r7, #16]
    cdest[0] = csrc[0];
   178a8:	693b      	ldr	r3, [r7, #16]
   178aa:	781a      	ldrb	r2, [r3, #0]
   178ac:	697b      	ldr	r3, [r7, #20]
   178ae:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
   178b0:	697b      	ldr	r3, [r7, #20]
   178b2:	3301      	adds	r3, #1
   178b4:	693a      	ldr	r2, [r7, #16]
   178b6:	7852      	ldrb	r2, [r2, #1]
   178b8:	701a      	strb	r2, [r3, #0]
    cdest[2] = csrc[2];
   178ba:	697b      	ldr	r3, [r7, #20]
   178bc:	3302      	adds	r3, #2
   178be:	693a      	ldr	r2, [r7, #16]
   178c0:	7892      	ldrb	r2, [r2, #2]
   178c2:	701a      	strb	r2, [r3, #0]
    cdest[3] = csrc[3];
   178c4:	697b      	ldr	r3, [r7, #20]
   178c6:	3303      	adds	r3, #3
   178c8:	693a      	ldr	r2, [r7, #16]
   178ca:	78d2      	ldrb	r2, [r2, #3]
   178cc:	701a      	strb	r2, [r3, #0]
}
   178ce:	bf00      	nop
   178d0:	371c      	adds	r7, #28
   178d2:	46bd      	mov	sp, r7
   178d4:	bc80      	pop	{r7}
   178d6:	4770      	bx	lr

000178d8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */

static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg){
   178d8:	b580      	push	{r7, lr}
   178da:	b086      	sub	sp, #24
   178dc:	af00      	add	r7, sp, #0
   178de:	6078      	str	r0, [r7, #4]
   178e0:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;
	
    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
   178e2:	687b      	ldr	r3, [r7, #4]
   178e4:	613b      	str	r3, [r7, #16]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((msg->DLC == 8U) && (!SDO->CANrxNew)){
   178e6:	683b      	ldr	r3, [r7, #0]
   178e8:	7d1b      	ldrb	r3, [r3, #20]
   178ea:	2b08      	cmp	r3, #8
   178ec:	f040 80a4 	bne.w	17a38 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
   178f0:	693b      	ldr	r3, [r7, #16]
   178f2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   178f6:	2b00      	cmp	r3, #0
   178f8:	f040 809e 	bne.w	17a38 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
   178fc:	693b      	ldr	r3, [r7, #16]
   178fe:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   17902:	2b15      	cmp	r3, #21
   17904:	d024      	beq.n	17950 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x78>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = msg->data[0];
   17906:	683b      	ldr	r3, [r7, #0]
   17908:	7d5a      	ldrb	r2, [r3, #21]
   1790a:	693b      	ldr	r3, [r7, #16]
   1790c:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = msg->data[1];
   1790e:	683b      	ldr	r3, [r7, #0]
   17910:	7d9a      	ldrb	r2, [r3, #22]
   17912:	693b      	ldr	r3, [r7, #16]
   17914:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = msg->data[2];
   17916:	683b      	ldr	r3, [r7, #0]
   17918:	7dda      	ldrb	r2, [r3, #23]
   1791a:	693b      	ldr	r3, [r7, #16]
   1791c:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = msg->data[3];
   1791e:	683b      	ldr	r3, [r7, #0]
   17920:	7e1a      	ldrb	r2, [r3, #24]
   17922:	693b      	ldr	r3, [r7, #16]
   17924:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = msg->data[4];
   17926:	683b      	ldr	r3, [r7, #0]
   17928:	7e5a      	ldrb	r2, [r3, #25]
   1792a:	693b      	ldr	r3, [r7, #16]
   1792c:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = msg->data[5];
   1792e:	683b      	ldr	r3, [r7, #0]
   17930:	7e9a      	ldrb	r2, [r3, #26]
   17932:	693b      	ldr	r3, [r7, #16]
   17934:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = msg->data[6];
   17936:	683b      	ldr	r3, [r7, #0]
   17938:	7eda      	ldrb	r2, [r3, #27]
   1793a:	693b      	ldr	r3, [r7, #16]
   1793c:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = msg->data[7];
   1793e:	683b      	ldr	r3, [r7, #0]
   17940:	7f1a      	ldrb	r2, [r3, #28]
   17942:	693b      	ldr	r3, [r7, #16]
   17944:	71da      	strb	r2, [r3, #7]

            SDO->CANrxNew = true;
   17946:	693b      	ldr	r3, [r7, #16]
   17948:	2201      	movs	r2, #1
   1794a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   1794e:	e067      	b.n	17a20 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = msg->data[0];
   17950:	683b      	ldr	r3, [r7, #0]
   17952:	7d5a      	ldrb	r2, [r3, #21]
   17954:	693b      	ldr	r3, [r7, #16]
   17956:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
   17958:	693b      	ldr	r3, [r7, #16]
   1795a:	781b      	ldrb	r3, [r3, #0]
   1795c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17960:	73fb      	strb	r3, [r7, #15]
            SDO->timeoutTimer = 0;
   17962:	693b      	ldr	r3, [r7, #16]
   17964:	2200      	movs	r2, #0
   17966:	66da      	str	r2, [r3, #108]	; 0x6c

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
   17968:	7bfa      	ldrb	r2, [r7, #15]
   1796a:	693b      	ldr	r3, [r7, #16]
   1796c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   17970:	3301      	adds	r3, #1
   17972:	429a      	cmp	r2, r3
   17974:	d141      	bne.n	179fa <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x122>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
   17976:	693b      	ldr	r3, [r7, #16]
   17978:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   1797c:	3301      	adds	r3, #1
   1797e:	b2da      	uxtb	r2, r3
   17980:	693b      	ldr	r3, [r7, #16]
   17982:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

                /* copy data */
                for(i=1; i<8; i++) {
   17986:	2301      	movs	r3, #1
   17988:	75fb      	strb	r3, [r7, #23]
   1798a:	7dfb      	ldrb	r3, [r7, #23]
   1798c:	2b07      	cmp	r3, #7
   1798e:	dc1d      	bgt.n	179cc <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = msg->data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
   17990:	693b      	ldr	r3, [r7, #16]
   17992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   17994:	693b      	ldr	r3, [r7, #16]
   17996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   17998:	1c58      	adds	r0, r3, #1
   1799a:	6939      	ldr	r1, [r7, #16]
   1799c:	6388      	str	r0, [r1, #56]	; 0x38
   1799e:	4413      	add	r3, r2
   179a0:	7dfa      	ldrb	r2, [r7, #23]
   179a2:	6839      	ldr	r1, [r7, #0]
   179a4:	440a      	add	r2, r1
   179a6:	7d52      	ldrb	r2, [r2, #21]
   179a8:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
   179aa:	693b      	ldr	r3, [r7, #16]
   179ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   179ae:	2b1f      	cmp	r3, #31
   179b0:	d908      	bls.n	179c4 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xec>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   179b2:	693b      	ldr	r3, [r7, #16]
   179b4:	2216      	movs	r2, #22
   179b6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                        SDO->CANrxNew = true;
   179ba:	693b      	ldr	r3, [r7, #16]
   179bc:	2201      	movs	r2, #1
   179be:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
                        break;
   179c2:	e003      	b.n	179cc <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xf4>
                for(i=1; i<8; i++) {
   179c4:	7dfb      	ldrb	r3, [r7, #23]
   179c6:	3301      	adds	r3, #1
   179c8:	75fb      	strb	r3, [r7, #23]
   179ca:	e7de      	b.n	1798a <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0xb2>
                    }
                }

                /* break reception if last segment or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
   179cc:	693b      	ldr	r3, [r7, #16]
   179ce:	781b      	ldrb	r3, [r3, #0]
   179d0:	b25b      	sxtb	r3, r3
   179d2:	2b00      	cmp	r3, #0
   179d4:	db08      	blt.n	179e8 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x110>
   179d6:	693b      	ldr	r3, [r7, #16]
   179d8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   179dc:	461a      	mov	r2, r3
   179de:	693b      	ldr	r3, [r7, #16]
   179e0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   179e4:	429a      	cmp	r2, r3
   179e6:	db1b      	blt.n	17a20 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                    SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   179e8:	693b      	ldr	r3, [r7, #16]
   179ea:	2216      	movs	r2, #22
   179ec:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                    SDO->CANrxNew = true;
   179f0:	693b      	ldr	r3, [r7, #16]
   179f2:	2201      	movs	r2, #1
   179f4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
   179f8:	e012      	b.n	17a20 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
   179fa:	693b      	ldr	r3, [r7, #16]
   179fc:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   17a00:	7bfa      	ldrb	r2, [r7, #15]
   17a02:	429a      	cmp	r2, r3
   17a04:	d00c      	beq.n	17a20 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
   17a06:	693b      	ldr	r3, [r7, #16]
   17a08:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   17a0c:	2b00      	cmp	r3, #0
   17a0e:	d007      	beq.n	17a20 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x148>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is totally wrong, break reception. */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
   17a10:	693b      	ldr	r3, [r7, #16]
   17a12:	2216      	movs	r2, #22
   17a14:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                SDO->CANrxNew = true;
   17a18:	693b      	ldr	r3, [r7, #16]
   17a1a:	2201      	movs	r2, #1
   17a1c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            }
        }

        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(SDO->CANrxNew && SDO->ptrFunctSignal != NULL) {
   17a20:	693b      	ldr	r3, [r7, #16]
   17a22:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
   17a26:	2b00      	cmp	r3, #0
   17a28:	d006      	beq.n	17a38 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
   17a2a:	693b      	ldr	r3, [r7, #16]
   17a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   17a2e:	2b00      	cmp	r3, #0
   17a30:	d002      	beq.n	17a38 <_ZL14CO_SDO_receivePvPK13CO_CANrxMsg_t+0x160>
            SDO->ptrFunctSignal();
   17a32:	693b      	ldr	r3, [r7, #16]
   17a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   17a36:	4798      	blx	r3
        }
    }
}
   17a38:	bf00      	nop
   17a3a:	3718      	adds	r7, #24
   17a3c:	46bd      	mov	sp, r7
   17a3e:	bd80      	pop	{r7, pc}

00017a40 <_ZL11CO_ODF_1200P12CO_ODF_arg_t>:
 * Function for accessing _SDO server parameter_ for default SDO (index 0x1200)
 * from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
 static CO_SDO_abortCode_t  CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
   17a40:	b580      	push	{r7, lr}
   17a42:	b086      	sub	sp, #24
   17a44:	af00      	add	r7, sp, #0
   17a46:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   17a48:	2300      	movs	r3, #0
   17a4a:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
   17a4c:	687b      	ldr	r3, [r7, #4]
   17a4e:	681b      	ldr	r3, [r3, #0]
   17a50:	613b      	str	r3, [r7, #16]
    value = canopen_driver->CO_getUint32(ODF_arg->data);
   17a52:	4b12      	ldr	r3, [pc, #72]	; (17a9c <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
   17a54:	681b      	ldr	r3, [r3, #0]
   17a56:	1d1a      	adds	r2, r3, #4
   17a58:	687b      	ldr	r3, [r7, #4]
   17a5a:	685b      	ldr	r3, [r3, #4]
   17a5c:	4619      	mov	r1, r3
   17a5e:	4610      	mov	r0, r2
   17a60:	4b0f      	ldr	r3, [pc, #60]	; (17aa0 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x60>)
   17a62:	4798      	blx	r3
   17a64:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
   17a66:	687b      	ldr	r3, [r7, #4]
   17a68:	7f5b      	ldrb	r3, [r3, #29]
   17a6a:	2b00      	cmp	r3, #0
   17a6c:	d010      	beq.n	17a90 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
   17a6e:	687b      	ldr	r3, [r7, #4]
   17a70:	7f1b      	ldrb	r3, [r3, #28]
   17a72:	2b00      	cmp	r3, #0
   17a74:	d00c      	beq.n	17a90 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x50>
        canopen_driver->CO_setUint32(ODF_arg->data, value + *nodeId);
   17a76:	4b09      	ldr	r3, [pc, #36]	; (17a9c <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x5c>)
   17a78:	681b      	ldr	r3, [r3, #0]
   17a7a:	1d18      	adds	r0, r3, #4
   17a7c:	687b      	ldr	r3, [r7, #4]
   17a7e:	6859      	ldr	r1, [r3, #4]
   17a80:	693b      	ldr	r3, [r7, #16]
   17a82:	781b      	ldrb	r3, [r3, #0]
   17a84:	461a      	mov	r2, r3
   17a86:	68fb      	ldr	r3, [r7, #12]
   17a88:	4413      	add	r3, r2
   17a8a:	461a      	mov	r2, r3
   17a8c:	4b05      	ldr	r3, [pc, #20]	; (17aa4 <_ZL11CO_ODF_1200P12CO_ODF_arg_t+0x64>)
   17a8e:	4798      	blx	r3
    }

    return ret;
   17a90:	697b      	ldr	r3, [r7, #20]
}
   17a92:	4618      	mov	r0, r3
   17a94:	3718      	adds	r7, #24
   17a96:	46bd      	mov	sp, r7
   17a98:	bd80      	pop	{r7, pc}
   17a9a:	bf00      	nop
   17a9c:	2000da5c 	.word	0x2000da5c
   17aa0:	000177f9 	.word	0x000177f9
   17aa4:	0001782d 	.word	0x0001782d

00017aa8 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m>:
        uint8_t                 nodeId,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   17aa8:	b5b0      	push	{r4, r5, r7, lr}
   17aaa:	b08a      	sub	sp, #40	; 0x28
   17aac:	af04      	add	r7, sp, #16
   17aae:	60f8      	str	r0, [r7, #12]
   17ab0:	60b9      	str	r1, [r7, #8]
   17ab2:	607a      	str	r2, [r7, #4]
   17ab4:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(SDO_init==NULL || CANdevRx==NULL || CANdevTx==NULL){
   17ab6:	68bb      	ldr	r3, [r7, #8]
   17ab8:	2b00      	cmp	r3, #0
   17aba:	d005      	beq.n	17ac8 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
   17abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17abe:	2b00      	cmp	r3, #0
   17ac0:	d002      	beq.n	17ac8 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x20>
   17ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17ac4:	2b00      	cmp	r3, #0
   17ac6:	d102      	bne.n	17ace <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   17ac8:	f04f 33ff 	mov.w	r3, #4294967295
   17acc:	e0ac      	b.n	17c28 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x180>
    }else{
		SDO=SDO_init;
   17ace:	4a58      	ldr	r2, [pc, #352]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17ad0:	68bb      	ldr	r3, [r7, #8]
   17ad2:	6013      	str	r3, [r2, #0]
	}
	
    /* configure own object dictionary */
    if(parentSDO == NULL){
   17ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17ad6:	2b00      	cmp	r3, #0
   17ad8:	d13b      	bne.n	17b52 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xaa>
        uint32_t i;

        SDO->ownOD = true;
   17ada:	4b55      	ldr	r3, [pc, #340]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17adc:	681b      	ldr	r3, [r3, #0]
   17ade:	2201      	movs	r2, #1
   17ae0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = OD;
   17ae4:	4b52      	ldr	r3, [pc, #328]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17ae6:	681b      	ldr	r3, [r3, #0]
   17ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   17aea:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = ODSize;
   17aec:	4b50      	ldr	r3, [pc, #320]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17aee:	681b      	ldr	r3, [r3, #0]
   17af0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   17af2:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = ODExtensions;
   17af4:	4b4e      	ldr	r3, [pc, #312]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17af6:	681b      	ldr	r3, [r3, #0]
   17af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   17afa:	635a      	str	r2, [r3, #52]	; 0x34

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
   17afc:	2300      	movs	r3, #0
   17afe:	617b      	str	r3, [r7, #20]
   17b00:	697a      	ldr	r2, [r7, #20]
   17b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17b04:	429a      	cmp	r2, r3
   17b06:	d238      	bcs.n	17b7a <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0xd2>
            SDO->ODExtensions[i].pODFunc = NULL;
   17b08:	4b49      	ldr	r3, [pc, #292]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17b0a:	681b      	ldr	r3, [r3, #0]
   17b0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   17b0e:	697a      	ldr	r2, [r7, #20]
   17b10:	4613      	mov	r3, r2
   17b12:	005b      	lsls	r3, r3, #1
   17b14:	4413      	add	r3, r2
   17b16:	009b      	lsls	r3, r3, #2
   17b18:	440b      	add	r3, r1
   17b1a:	2200      	movs	r2, #0
   17b1c:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
   17b1e:	4b44      	ldr	r3, [pc, #272]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17b20:	681b      	ldr	r3, [r3, #0]
   17b22:	6b59      	ldr	r1, [r3, #52]	; 0x34
   17b24:	697a      	ldr	r2, [r7, #20]
   17b26:	4613      	mov	r3, r2
   17b28:	005b      	lsls	r3, r3, #1
   17b2a:	4413      	add	r3, r2
   17b2c:	009b      	lsls	r3, r3, #2
   17b2e:	440b      	add	r3, r1
   17b30:	2200      	movs	r2, #0
   17b32:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
   17b34:	4b3e      	ldr	r3, [pc, #248]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17b36:	681b      	ldr	r3, [r3, #0]
   17b38:	6b59      	ldr	r1, [r3, #52]	; 0x34
   17b3a:	697a      	ldr	r2, [r7, #20]
   17b3c:	4613      	mov	r3, r2
   17b3e:	005b      	lsls	r3, r3, #1
   17b40:	4413      	add	r3, r2
   17b42:	009b      	lsls	r3, r3, #2
   17b44:	440b      	add	r3, r1
   17b46:	2200      	movs	r2, #0
   17b48:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
   17b4a:	697b      	ldr	r3, [r7, #20]
   17b4c:	3301      	adds	r3, #1
   17b4e:	617b      	str	r3, [r7, #20]
   17b50:	e7d6      	b.n	17b00 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x58>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
   17b52:	4b37      	ldr	r3, [pc, #220]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17b54:	681b      	ldr	r3, [r3, #0]
   17b56:	2200      	movs	r2, #0
   17b58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = parentSDO->OD;
   17b5c:	4b34      	ldr	r3, [pc, #208]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17b5e:	681b      	ldr	r3, [r3, #0]
   17b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   17b62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   17b64:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = parentSDO->ODSize;
   17b66:	4b32      	ldr	r3, [pc, #200]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17b68:	681b      	ldr	r3, [r3, #0]
   17b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   17b6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
   17b6e:	631a      	str	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = parentSDO->ODExtensions;
   17b70:	4b2f      	ldr	r3, [pc, #188]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17b72:	681b      	ldr	r3, [r3, #0]
   17b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   17b76:	6b52      	ldr	r2, [r2, #52]	; 0x34
   17b78:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
   17b7a:	4b2d      	ldr	r3, [pc, #180]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17b7c:	681b      	ldr	r3, [r3, #0]
   17b7e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
   17b82:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    SDO->state = CO_SDO_ST_IDLE;
   17b86:	4b2a      	ldr	r3, [pc, #168]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17b88:	681b      	ldr	r3, [r3, #0]
   17b8a:	2200      	movs	r2, #0
   17b8c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    SDO->CANrxNew = false;
   17b90:	4b27      	ldr	r3, [pc, #156]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17b92:	681b      	ldr	r3, [r3, #0]
   17b94:	2200      	movs	r2, #0
   17b96:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    SDO->ptrFunctSignal = NULL;
   17b9a:	4b25      	ldr	r3, [pc, #148]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17b9c:	681b      	ldr	r3, [r3, #0]
   17b9e:	2200      	movs	r2, #0
   17ba0:	67da      	str	r2, [r3, #124]	; 0x7c


    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
   17ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17ba4:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
   17ba8:	d10f      	bne.n	17bca <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x122>
        canopen_driver->CO_OD_configure( ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
   17baa:	4b22      	ldr	r3, [pc, #136]	; (17c34 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   17bac:	681b      	ldr	r3, [r3, #0]
   17bae:	1d18      	adds	r0, r3, #4
   17bb0:	4b1f      	ldr	r3, [pc, #124]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17bb2:	681b      	ldr	r3, [r3, #0]
   17bb4:	f103 0268 	add.w	r2, r3, #104	; 0x68
   17bb8:	2300      	movs	r3, #0
   17bba:	9301      	str	r3, [sp, #4]
   17bbc:	2300      	movs	r3, #0
   17bbe:	9300      	str	r3, [sp, #0]
   17bc0:	4613      	mov	r3, r2
   17bc2:	4a1d      	ldr	r2, [pc, #116]	; (17c38 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x190>)
   17bc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   17bc6:	4c1d      	ldr	r4, [pc, #116]	; (17c3c <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x194>)
   17bc8:	47a0      	blx	r4
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
   17bca:	687b      	ldr	r3, [r7, #4]
   17bcc:	2b00      	cmp	r3, #0
   17bce:	db02      	blt.n	17bd6 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x12e>
   17bd0:	683b      	ldr	r3, [r7, #0]
   17bd2:	2b00      	cmp	r3, #0
   17bd4:	da03      	bge.n	17bde <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x136>
        // SDO is invalid
        COB_IDClientToServer = 0;
   17bd6:	2300      	movs	r3, #0
   17bd8:	607b      	str	r3, [r7, #4]
        COB_IDServerToClient = 0;
   17bda:	2300      	movs	r3, #0
   17bdc:	603b      	str	r3, [r7, #0]
    }
    /* configure SDO server CAN reception */
  canopen_driver->CAN_Rx_BufferInit(
   17bde:	4b15      	ldr	r3, [pc, #84]	; (17c34 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   17be0:	6818      	ldr	r0, [r3, #0]
   17be2:	4b13      	ldr	r3, [pc, #76]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17be4:	681b      	ldr	r3, [r3, #0]
            CANdevRxIdx,            /* rx buffer index */
            COB_IDClientToServer,   /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process received message */
   17be6:	4a16      	ldr	r2, [pc, #88]	; (17c40 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x198>)
   17be8:	9202      	str	r2, [sp, #8]
   17bea:	9301      	str	r3, [sp, #4]
   17bec:	2300      	movs	r3, #0
   17bee:	9300      	str	r3, [sp, #0]
   17bf0:	f240 73ff 	movw	r3, #2047	; 0x7ff
   17bf4:	687a      	ldr	r2, [r7, #4]
   17bf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
   17bf8:	4c12      	ldr	r4, [pc, #72]	; (17c44 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x19c>)
   17bfa:	47a0      	blx	r4
	//printf("Config_SDO_recieve");
    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
   17bfc:	4b0c      	ldr	r3, [pc, #48]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17bfe:	681b      	ldr	r3, [r3, #0]
   17c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
   17c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    SDO->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
   17c06:	4b0a      	ldr	r3, [pc, #40]	; (17c30 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x188>)
   17c08:	681c      	ldr	r4, [r3, #0]
   17c0a:	4b0a      	ldr	r3, [pc, #40]	; (17c34 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x18c>)
   17c0c:	6818      	ldr	r0, [r3, #0]
   17c0e:	2300      	movs	r3, #0
   17c10:	9301      	str	r3, [sp, #4]
   17c12:	2308      	movs	r3, #8
   17c14:	9300      	str	r3, [sp, #0]
   17c16:	2300      	movs	r3, #0
   17c18:	683a      	ldr	r2, [r7, #0]
   17c1a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   17c1c:	4d0a      	ldr	r5, [pc, #40]	; (17c48 <_ZN12CO_SDO_Class11CO_SDO_initEP8CO_SDO_tmmmS1_PK13CO_OD_entry_tmP17CO_OD_extension_thP14CO_CANmodule_tmS8_m+0x1a0>)
   17c1e:	47a8      	blx	r5
   17c20:	4603      	mov	r3, r0
   17c22:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */
	
    return CO_ERROR_NO;
   17c26:	2300      	movs	r3, #0
}
   17c28:	4618      	mov	r0, r3
   17c2a:	3718      	adds	r7, #24
   17c2c:	46bd      	mov	sp, r7
   17c2e:	bdb0      	pop	{r4, r5, r7, pc}
   17c30:	2000dab0 	.word	0x2000dab0
   17c34:	2000da5c 	.word	0x2000da5c
   17c38:	00017a41 	.word	0x00017a41
   17c3c:	00017c4d 	.word	0x00017c4d
   17c40:	000178d9 	.word	0x000178d9
   17c44:	00015bb5 	.word	0x00015bb5
   17c48:	00015cb5 	.word	0x00015cb5

00017c4c <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh>:
        uint32_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
   17c4c:	b580      	push	{r7, lr}
   17c4e:	b088      	sub	sp, #32
   17c50:	af00      	add	r7, sp, #0
   17c52:	60f8      	str	r0, [r7, #12]
   17c54:	60b9      	str	r1, [r7, #8]
   17c56:	607a      	str	r2, [r7, #4]
   17c58:	603b      	str	r3, [r7, #0]
    uint32_t entryNo;

    entryNo = canopen_driver->CO_OD_find(index);
   17c5a:	4b28      	ldr	r3, [pc, #160]	; (17cfc <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb0>)
   17c5c:	681b      	ldr	r3, [r3, #0]
   17c5e:	3304      	adds	r3, #4
   17c60:	68b9      	ldr	r1, [r7, #8]
   17c62:	4618      	mov	r0, r3
   17c64:	4b26      	ldr	r3, [pc, #152]	; (17d00 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb4>)
   17c66:	4798      	blx	r3
   17c68:	61b8      	str	r0, [r7, #24]
    if(entryNo < 0xFFFFU){
   17c6a:	69bb      	ldr	r3, [r7, #24]
   17c6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   17c70:	4293      	cmp	r3, r2
   17c72:	d83e      	bhi.n	17cf2 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
   17c74:	4b23      	ldr	r3, [pc, #140]	; (17d04 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb8>)
   17c76:	681b      	ldr	r3, [r3, #0]
   17c78:	6b59      	ldr	r1, [r3, #52]	; 0x34
   17c7a:	69ba      	ldr	r2, [r7, #24]
   17c7c:	4613      	mov	r3, r2
   17c7e:	005b      	lsls	r3, r3, #1
   17c80:	4413      	add	r3, r2
   17c82:	009b      	lsls	r3, r3, #2
   17c84:	440b      	add	r3, r1
   17c86:	617b      	str	r3, [r7, #20]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
   17c88:	4b1e      	ldr	r3, [pc, #120]	; (17d04 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xb8>)
   17c8a:	681b      	ldr	r3, [r3, #0]
   17c8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   17c8e:	69ba      	ldr	r2, [r7, #24]
   17c90:	4613      	mov	r3, r2
   17c92:	009b      	lsls	r3, r3, #2
   17c94:	4413      	add	r3, r2
   17c96:	009b      	lsls	r3, r3, #2
   17c98:	440b      	add	r3, r1
   17c9a:	791b      	ldrb	r3, [r3, #4]
   17c9c:	74fb      	strb	r3, [r7, #19]

        ext->pODFunc = pODFunc;
   17c9e:	697b      	ldr	r3, [r7, #20]
   17ca0:	687a      	ldr	r2, [r7, #4]
   17ca2:	601a      	str	r2, [r3, #0]
        ext->object = object;
   17ca4:	697b      	ldr	r3, [r7, #20]
   17ca6:	683a      	ldr	r2, [r7, #0]
   17ca8:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
   17caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17cac:	2b00      	cmp	r3, #0
   17cae:	d01b      	beq.n	17ce8 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
   17cb0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   17cb4:	2b00      	cmp	r3, #0
   17cb6:	d017      	beq.n	17ce8 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
   17cb8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   17cbc:	7cfb      	ldrb	r3, [r7, #19]
   17cbe:	429a      	cmp	r2, r3
   17cc0:	d112      	bne.n	17ce8 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x9c>
            uint32_t i;
            ext->flags = flags;
   17cc2:	697b      	ldr	r3, [r7, #20]
   17cc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17cc6:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
   17cc8:	2300      	movs	r3, #0
   17cca:	61fb      	str	r3, [r7, #28]
   17ccc:	7cfa      	ldrb	r2, [r7, #19]
   17cce:	69fb      	ldr	r3, [r7, #28]
   17cd0:	429a      	cmp	r2, r3
   17cd2:	d30d      	bcc.n	17cf0 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa4>
                ext->flags[i] = 0U;
   17cd4:	697b      	ldr	r3, [r7, #20]
   17cd6:	689a      	ldr	r2, [r3, #8]
   17cd8:	69fb      	ldr	r3, [r7, #28]
   17cda:	4413      	add	r3, r2
   17cdc:	2200      	movs	r2, #0
   17cde:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
   17ce0:	69fb      	ldr	r3, [r7, #28]
   17ce2:	3301      	adds	r3, #1
   17ce4:	61fb      	str	r3, [r7, #28]
   17ce6:	e7f1      	b.n	17ccc <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0x80>
            }
        }
        else{
            ext->flags = NULL;
   17ce8:	697b      	ldr	r3, [r7, #20]
   17cea:	2200      	movs	r2, #0
   17cec:	609a      	str	r2, [r3, #8]
        }
    }
}
   17cee:	e000      	b.n	17cf2 <_ZN12CO_SDO_Class15CO_OD_configureEmPF18CO_SDO_abortCode_tP12CO_ODF_arg_tEPvPhh+0xa6>
            }
   17cf0:	bf00      	nop
}
   17cf2:	bf00      	nop
   17cf4:	3720      	adds	r7, #32
   17cf6:	46bd      	mov	sp, r7
   17cf8:	bd80      	pop	{r7, pc}
   17cfa:	bf00      	nop
   17cfc:	2000da5c 	.word	0x2000da5c
   17d00:	00017d09 	.word	0x00017d09
   17d04:	2000dab0 	.word	0x2000dab0

00017d08 <_ZN12CO_SDO_Class10CO_OD_findEm>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_find( uint32_t index){
   17d08:	b480      	push	{r7}
   17d0a:	b087      	sub	sp, #28
   17d0c:	af00      	add	r7, sp, #0
   17d0e:	6078      	str	r0, [r7, #4]
   17d10:	6039      	str	r1, [r7, #0]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint32_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
   17d12:	2300      	movs	r3, #0
   17d14:	617b      	str	r3, [r7, #20]
    max = SDO->ODSize - 1U;
   17d16:	4b26      	ldr	r3, [pc, #152]	; (17db0 <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
   17d18:	681b      	ldr	r3, [r3, #0]
   17d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17d1c:	3b01      	subs	r3, #1
   17d1e:	613b      	str	r3, [r7, #16]
    while(min < max){
   17d20:	697a      	ldr	r2, [r7, #20]
   17d22:	693b      	ldr	r3, [r7, #16]
   17d24:	429a      	cmp	r2, r3
   17d26:	d227      	bcs.n	17d78 <_ZN12CO_SDO_Class10CO_OD_findEm+0x70>
        cur = (min + max) / 2;
   17d28:	697a      	ldr	r2, [r7, #20]
   17d2a:	693b      	ldr	r3, [r7, #16]
   17d2c:	4413      	add	r3, r2
   17d2e:	085b      	lsrs	r3, r3, #1
   17d30:	60fb      	str	r3, [r7, #12]
        object = &SDO->OD[cur];
   17d32:	4b1f      	ldr	r3, [pc, #124]	; (17db0 <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
   17d34:	681b      	ldr	r3, [r3, #0]
   17d36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   17d38:	68fa      	ldr	r2, [r7, #12]
   17d3a:	4613      	mov	r3, r2
   17d3c:	009b      	lsls	r3, r3, #2
   17d3e:	4413      	add	r3, r2
   17d40:	009b      	lsls	r3, r3, #2
   17d42:	440b      	add	r3, r1
   17d44:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
   17d46:	68bb      	ldr	r3, [r7, #8]
   17d48:	681a      	ldr	r2, [r3, #0]
   17d4a:	683b      	ldr	r3, [r7, #0]
   17d4c:	429a      	cmp	r2, r3
   17d4e:	d101      	bne.n	17d54 <_ZN12CO_SDO_Class10CO_OD_findEm+0x4c>
            return cur;
   17d50:	68fb      	ldr	r3, [r7, #12]
   17d52:	e028      	b.n	17da6 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
        if(index < object->index){
   17d54:	68bb      	ldr	r3, [r7, #8]
   17d56:	681a      	ldr	r2, [r3, #0]
   17d58:	683b      	ldr	r3, [r7, #0]
   17d5a:	429a      	cmp	r2, r3
   17d5c:	d908      	bls.n	17d70 <_ZN12CO_SDO_Class10CO_OD_findEm+0x68>
            max = cur;
   17d5e:	68fb      	ldr	r3, [r7, #12]
   17d60:	613b      	str	r3, [r7, #16]
            if(max) max--;
   17d62:	693b      	ldr	r3, [r7, #16]
   17d64:	2b00      	cmp	r3, #0
   17d66:	d0db      	beq.n	17d20 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
   17d68:	693b      	ldr	r3, [r7, #16]
   17d6a:	3b01      	subs	r3, #1
   17d6c:	613b      	str	r3, [r7, #16]
   17d6e:	e7d7      	b.n	17d20 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
        }
        else
            min = cur + 1U;
   17d70:	68fb      	ldr	r3, [r7, #12]
   17d72:	3301      	adds	r3, #1
   17d74:	617b      	str	r3, [r7, #20]
    while(min < max){
   17d76:	e7d3      	b.n	17d20 <_ZN12CO_SDO_Class10CO_OD_findEm+0x18>
    }

    if(min == max){
   17d78:	697a      	ldr	r2, [r7, #20]
   17d7a:	693b      	ldr	r3, [r7, #16]
   17d7c:	429a      	cmp	r2, r3
   17d7e:	d110      	bne.n	17da2 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
        object = &SDO->OD[min];
   17d80:	4b0b      	ldr	r3, [pc, #44]	; (17db0 <_ZN12CO_SDO_Class10CO_OD_findEm+0xa8>)
   17d82:	681b      	ldr	r3, [r3, #0]
   17d84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   17d86:	697a      	ldr	r2, [r7, #20]
   17d88:	4613      	mov	r3, r2
   17d8a:	009b      	lsls	r3, r3, #2
   17d8c:	4413      	add	r3, r2
   17d8e:	009b      	lsls	r3, r3, #2
   17d90:	440b      	add	r3, r1
   17d92:	60bb      	str	r3, [r7, #8]
        /* Is object matched */
        if(index == object->index){
   17d94:	68bb      	ldr	r3, [r7, #8]
   17d96:	681a      	ldr	r2, [r3, #0]
   17d98:	683b      	ldr	r3, [r7, #0]
   17d9a:	429a      	cmp	r2, r3
   17d9c:	d101      	bne.n	17da2 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9a>
            return min;
   17d9e:	697b      	ldr	r3, [r7, #20]
   17da0:	e001      	b.n	17da6 <_ZN12CO_SDO_Class10CO_OD_findEm+0x9e>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
   17da2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
   17da6:	4618      	mov	r0, r3
   17da8:	371c      	adds	r7, #28
   17daa:	46bd      	mov	sp, r7
   17dac:	bc80      	pop	{r7}
   17dae:	4770      	bx	lr
   17db0:	2000dab0 	.word	0x2000dab0

00017db4 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getLength(uint32_t entryNo, uint8_t subIndex){
   17db4:	b480      	push	{r7}
   17db6:	b087      	sub	sp, #28
   17db8:	af00      	add	r7, sp, #0
   17dba:	60f8      	str	r0, [r7, #12]
   17dbc:	60b9      	str	r1, [r7, #8]
   17dbe:	4613      	mov	r3, r2
   17dc0:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   17dc2:	4b25      	ldr	r3, [pc, #148]	; (17e58 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0xa4>)
   17dc4:	681b      	ldr	r3, [r3, #0]
   17dc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   17dc8:	68ba      	ldr	r2, [r7, #8]
   17dca:	4613      	mov	r3, r2
   17dcc:	009b      	lsls	r3, r3, #2
   17dce:	4413      	add	r3, r2
   17dd0:	009b      	lsls	r3, r3, #2
   17dd2:	440b      	add	r3, r1
   17dd4:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   17dd6:	68bb      	ldr	r3, [r7, #8]
   17dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17ddc:	4293      	cmp	r3, r2
   17dde:	d101      	bne.n	17de4 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x30>
        return 0U;
   17de0:	2300      	movs	r3, #0
   17de2:	e034      	b.n	17e4e <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
   17de4:	697b      	ldr	r3, [r7, #20]
   17de6:	791b      	ldrb	r3, [r3, #4]
   17de8:	2b00      	cmp	r3, #0
   17dea:	d108      	bne.n	17dfe <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x4a>
        if(object->pData == 0){ /* data type is domain */
   17dec:	697b      	ldr	r3, [r7, #20]
   17dee:	691b      	ldr	r3, [r3, #16]
   17df0:	2b00      	cmp	r3, #0
   17df2:	d101      	bne.n	17df8 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x44>
            return CO_SDO_BUFFER_SIZE;
   17df4:	2320      	movs	r3, #32
   17df6:	e02a      	b.n	17e4e <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
   17df8:	697b      	ldr	r3, [r7, #20]
   17dfa:	68db      	ldr	r3, [r3, #12]
   17dfc:	e027      	b.n	17e4e <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
   17dfe:	697b      	ldr	r3, [r7, #20]
   17e00:	689b      	ldr	r3, [r3, #8]
   17e02:	2b00      	cmp	r3, #0
   17e04:	d00d      	beq.n	17e22 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x6e>
        if(subIndex == 0U){
   17e06:	79fb      	ldrb	r3, [r7, #7]
   17e08:	2b00      	cmp	r3, #0
   17e0a:	d101      	bne.n	17e10 <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x5c>
            return 1U;
   17e0c:	2301      	movs	r3, #1
   17e0e:	e01e      	b.n	17e4e <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else if(object->pData == 0){
   17e10:	697b      	ldr	r3, [r7, #20]
   17e12:	691b      	ldr	r3, [r3, #16]
   17e14:	2b00      	cmp	r3, #0
   17e16:	d101      	bne.n	17e1c <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x68>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
   17e18:	2320      	movs	r3, #32
   17e1a:	e018      	b.n	17e4e <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return object->length;
   17e1c:	697b      	ldr	r3, [r7, #20]
   17e1e:	68db      	ldr	r3, [r3, #12]
   17e20:	e015      	b.n	17e4e <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
   17e22:	697b      	ldr	r3, [r7, #20]
   17e24:	6919      	ldr	r1, [r3, #16]
   17e26:	79fa      	ldrb	r2, [r7, #7]
   17e28:	4613      	mov	r3, r2
   17e2a:	005b      	lsls	r3, r3, #1
   17e2c:	4413      	add	r3, r2
   17e2e:	009b      	lsls	r3, r3, #2
   17e30:	440b      	add	r3, r1
   17e32:	681b      	ldr	r3, [r3, #0]
   17e34:	2b00      	cmp	r3, #0
   17e36:	d101      	bne.n	17e3c <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x88>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
   17e38:	2320      	movs	r3, #32
   17e3a:	e008      	b.n	17e4e <_ZN12CO_SDO_Class15CO_OD_getLengthEmh+0x9a>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
   17e3c:	697b      	ldr	r3, [r7, #20]
   17e3e:	6919      	ldr	r1, [r3, #16]
   17e40:	79fa      	ldrb	r2, [r7, #7]
   17e42:	4613      	mov	r3, r2
   17e44:	005b      	lsls	r3, r3, #1
   17e46:	4413      	add	r3, r2
   17e48:	009b      	lsls	r3, r3, #2
   17e4a:	440b      	add	r3, r1
   17e4c:	689b      	ldr	r3, [r3, #8]
        }
    }
}
   17e4e:	4618      	mov	r0, r3
   17e50:	371c      	adds	r7, #28
   17e52:	46bd      	mov	sp, r7
   17e54:	bc80      	pop	{r7}
   17e56:	4770      	bx	lr
   17e58:	2000dab0 	.word	0x2000dab0

00017e5c <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh>:


/******************************************************************************/
uint32_t CO_SDO_Class::CO_OD_getAttribute(uint32_t entryNo, uint8_t subIndex){
   17e5c:	b480      	push	{r7}
   17e5e:	b089      	sub	sp, #36	; 0x24
   17e60:	af00      	add	r7, sp, #0
   17e62:	60f8      	str	r0, [r7, #12]
   17e64:	60b9      	str	r1, [r7, #8]
   17e66:	4613      	mov	r3, r2
   17e68:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   17e6a:	4b27      	ldr	r3, [pc, #156]	; (17f08 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xac>)
   17e6c:	681b      	ldr	r3, [r3, #0]
   17e6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   17e70:	68ba      	ldr	r2, [r7, #8]
   17e72:	4613      	mov	r3, r2
   17e74:	009b      	lsls	r3, r3, #2
   17e76:	4413      	add	r3, r2
   17e78:	009b      	lsls	r3, r3, #2
   17e7a:	440b      	add	r3, r1
   17e7c:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   17e7e:	68bb      	ldr	r3, [r7, #8]
   17e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17e84:	4293      	cmp	r3, r2
   17e86:	d101      	bne.n	17e8c <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x30>
        return 0U;
   17e88:	2300      	movs	r3, #0
   17e8a:	e037      	b.n	17efc <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
   17e8c:	697b      	ldr	r3, [r7, #20]
   17e8e:	791b      	ldrb	r3, [r3, #4]
   17e90:	2b00      	cmp	r3, #0
   17e92:	d102      	bne.n	17e9a <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x3e>
        return object->attribute;
   17e94:	697b      	ldr	r3, [r7, #20]
   17e96:	689b      	ldr	r3, [r3, #8]
   17e98:	e030      	b.n	17efc <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else if(object->attribute != 0U){/* Object type is Array */
   17e9a:	697b      	ldr	r3, [r7, #20]
   17e9c:	689b      	ldr	r3, [r3, #8]
   17e9e:	2b00      	cmp	r3, #0
   17ea0:	d023      	beq.n	17eea <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8e>
        bool_t exception_1003 = false;
   17ea2:	2300      	movs	r3, #0
   17ea4:	77fb      	strb	r3, [r7, #31]
        uint32_t attr = object->attribute;
   17ea6:	697b      	ldr	r3, [r7, #20]
   17ea8:	689b      	ldr	r3, [r3, #8]
   17eaa:	61bb      	str	r3, [r7, #24]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
   17eac:	697b      	ldr	r3, [r7, #20]
   17eae:	681b      	ldr	r3, [r3, #0]
   17eb0:	f241 0203 	movw	r2, #4099	; 0x1003
   17eb4:	4293      	cmp	r3, r2
   17eb6:	d108      	bne.n	17eca <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
   17eb8:	79fb      	ldrb	r3, [r7, #7]
   17eba:	2b00      	cmp	r3, #0
   17ebc:	d105      	bne.n	17eca <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x6e>
            exception_1003 = true;
   17ebe:	2301      	movs	r3, #1
   17ec0:	77fb      	strb	r3, [r7, #31]
            attr |= CO_ODA_WRITEABLE;
   17ec2:	69bb      	ldr	r3, [r7, #24]
   17ec4:	f043 0308 	orr.w	r3, r3, #8
   17ec8:	61bb      	str	r3, [r7, #24]
        }

        if(subIndex == 0U  && exception_1003 == false){
   17eca:	79fb      	ldrb	r3, [r7, #7]
   17ecc:	2b00      	cmp	r3, #0
   17ece:	d10a      	bne.n	17ee6 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
   17ed0:	7ffb      	ldrb	r3, [r7, #31]
   17ed2:	2b00      	cmp	r3, #0
   17ed4:	d107      	bne.n	17ee6 <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0x8a>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
   17ed6:	69bb      	ldr	r3, [r7, #24]
   17ed8:	f023 0318 	bic.w	r3, r3, #24
   17edc:	61bb      	str	r3, [r7, #24]
            attr |= CO_ODA_READABLE;
   17ede:	69bb      	ldr	r3, [r7, #24]
   17ee0:	f043 0304 	orr.w	r3, r3, #4
   17ee4:	61bb      	str	r3, [r7, #24]
        }
        return attr;
   17ee6:	69bb      	ldr	r3, [r7, #24]
   17ee8:	e008      	b.n	17efc <_ZN12CO_SDO_Class18CO_OD_getAttributeEmh+0xa0>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
   17eea:	697b      	ldr	r3, [r7, #20]
   17eec:	6919      	ldr	r1, [r3, #16]
   17eee:	79fa      	ldrb	r2, [r7, #7]
   17ef0:	4613      	mov	r3, r2
   17ef2:	005b      	lsls	r3, r3, #1
   17ef4:	4413      	add	r3, r2
   17ef6:	009b      	lsls	r3, r3, #2
   17ef8:	440b      	add	r3, r1
   17efa:	685b      	ldr	r3, [r3, #4]
    }
}
   17efc:	4618      	mov	r0, r3
   17efe:	3724      	adds	r7, #36	; 0x24
   17f00:	46bd      	mov	sp, r7
   17f02:	bc80      	pop	{r7}
   17f04:	4770      	bx	lr
   17f06:	bf00      	nop
   17f08:	2000dab0 	.word	0x2000dab0

00017f0c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh>:


/******************************************************************************/
void* CO_SDO_Class::CO_OD_getDataPointer( uint32_t entryNo, uint8_t subIndex){
   17f0c:	b480      	push	{r7}
   17f0e:	b087      	sub	sp, #28
   17f10:	af00      	add	r7, sp, #0
   17f12:	60f8      	str	r0, [r7, #12]
   17f14:	60b9      	str	r1, [r7, #8]
   17f16:	4613      	mov	r3, r2
   17f18:	71fb      	strb	r3, [r7, #7]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
   17f1a:	4b20      	ldr	r3, [pc, #128]	; (17f9c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x90>)
   17f1c:	681b      	ldr	r3, [r3, #0]
   17f1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   17f20:	68ba      	ldr	r2, [r7, #8]
   17f22:	4613      	mov	r3, r2
   17f24:	009b      	lsls	r3, r3, #2
   17f26:	4413      	add	r3, r2
   17f28:	009b      	lsls	r3, r3, #2
   17f2a:	440b      	add	r3, r1
   17f2c:	617b      	str	r3, [r7, #20]

    if(entryNo == 0xFFFFU){
   17f2e:	68bb      	ldr	r3, [r7, #8]
   17f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17f34:	4293      	cmp	r3, r2
   17f36:	d101      	bne.n	17f3c <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x30>
        return 0;
   17f38:	2300      	movs	r3, #0
   17f3a:	e02a      	b.n	17f92 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
   17f3c:	697b      	ldr	r3, [r7, #20]
   17f3e:	791b      	ldrb	r3, [r3, #4]
   17f40:	2b00      	cmp	r3, #0
   17f42:	d102      	bne.n	17f4a <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x3e>
        return object->pData;
   17f44:	697b      	ldr	r3, [r7, #20]
   17f46:	691b      	ldr	r3, [r3, #16]
   17f48:	e023      	b.n	17f92 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
    }
    else if(object->attribute != 0U){/* Object type is Array */
   17f4a:	697b      	ldr	r3, [r7, #20]
   17f4c:	689b      	ldr	r3, [r3, #8]
   17f4e:	2b00      	cmp	r3, #0
   17f50:	d016      	beq.n	17f80 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x74>
        if(subIndex==0){
   17f52:	79fb      	ldrb	r3, [r7, #7]
   17f54:	2b00      	cmp	r3, #0
   17f56:	d102      	bne.n	17f5e <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x52>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
   17f58:	697b      	ldr	r3, [r7, #20]
   17f5a:	3304      	adds	r3, #4
   17f5c:	e019      	b.n	17f92 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else if(object->pData == 0){
   17f5e:	697b      	ldr	r3, [r7, #20]
   17f60:	691b      	ldr	r3, [r3, #16]
   17f62:	2b00      	cmp	r3, #0
   17f64:	d101      	bne.n	17f6a <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x5e>
            /* data type is domain */
            return 0;
   17f66:	2300      	movs	r3, #0
   17f68:	e013      	b.n	17f92 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
   17f6a:	697b      	ldr	r3, [r7, #20]
   17f6c:	691a      	ldr	r2, [r3, #16]
   17f6e:	79fb      	ldrb	r3, [r7, #7]
   17f70:	3b01      	subs	r3, #1
   17f72:	4619      	mov	r1, r3
   17f74:	697b      	ldr	r3, [r7, #20]
   17f76:	68db      	ldr	r3, [r3, #12]
   17f78:	fb03 f301 	mul.w	r3, r3, r1
   17f7c:	4413      	add	r3, r2
   17f7e:	e008      	b.n	17f92 <_ZN12CO_SDO_Class20CO_OD_getDataPointerEmh+0x86>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
   17f80:	697b      	ldr	r3, [r7, #20]
   17f82:	6919      	ldr	r1, [r3, #16]
   17f84:	79fa      	ldrb	r2, [r7, #7]
   17f86:	4613      	mov	r3, r2
   17f88:	005b      	lsls	r3, r3, #1
   17f8a:	4413      	add	r3, r2
   17f8c:	009b      	lsls	r3, r3, #2
   17f8e:	440b      	add	r3, r1
   17f90:	681b      	ldr	r3, [r3, #0]
    }
}
   17f92:	4618      	mov	r0, r3
   17f94:	371c      	adds	r7, #28
   17f96:	46bd      	mov	sp, r7
   17f98:	bc80      	pop	{r7}
   17f9a:	4770      	bx	lr
   17f9c:	2000dab0 	.word	0x2000dab0

00017fa0 <_ZN13CO_SYNC_ClassC1Ev>:
#include "string.h"

static CO_CANtx_t local_sync_tx_buffer;

// default constructor
CO_SYNC_Class::CO_SYNC_Class()
   17fa0:	b480      	push	{r7}
   17fa2:	b083      	sub	sp, #12
   17fa4:	af00      	add	r7, sp, #0
   17fa6:	6078      	str	r0, [r7, #4]
{
} //CO_SYNC_Class
   17fa8:	687b      	ldr	r3, [r7, #4]
   17faa:	4618      	mov	r0, r3
   17fac:	370c      	adds	r7, #12
   17fae:	46bd      	mov	sp, r7
   17fb0:	bc80      	pop	{r7}
   17fb2:	4770      	bx	lr

00017fb4 <_ZN13CO_SYNC_ClassD1Ev>:

// default destructor
CO_SYNC_Class::~CO_SYNC_Class()
   17fb4:	b480      	push	{r7}
   17fb6:	b083      	sub	sp, #12
   17fb8:	af00      	add	r7, sp, #0
   17fba:	6078      	str	r0, [r7, #4]
{
} //~CO_SYNC_Class
   17fbc:	687b      	ldr	r3, [r7, #4]
   17fbe:	4618      	mov	r0, r3
   17fc0:	370c      	adds	r7, #12
   17fc2:	46bd      	mov	sp, r7
   17fc4:	bc80      	pop	{r7}
   17fc6:	4770      	bx	lr

00017fc8 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, const CO_CANrxMsg_t *msg){
   17fc8:	b480      	push	{r7}
   17fca:	b085      	sub	sp, #20
   17fcc:	af00      	add	r7, sp, #0
   17fce:	6078      	str	r0, [r7, #4]
   17fd0:	6039      	str	r1, [r7, #0]
	
    CO_SYNC_t *SYNC;
    uint8_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
   17fd2:	687b      	ldr	r3, [r7, #4]
   17fd4:	60fb      	str	r3, [r7, #12]
    operState = *SYNC->operatingState;
   17fd6:	68fb      	ldr	r3, [r7, #12]
   17fd8:	685b      	ldr	r3, [r3, #4]
   17fda:	781b      	ldrb	r3, [r3, #0]
   17fdc:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
   17fde:	7afb      	ldrb	r3, [r7, #11]
   17fe0:	2b05      	cmp	r3, #5
   17fe2:	d002      	beq.n	17fea <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x22>
   17fe4:	7afb      	ldrb	r3, [r7, #11]
   17fe6:	2b7f      	cmp	r3, #127	; 0x7f
   17fe8:	d132      	bne.n	18050 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
        if(SYNC->counterOverflowValue == 0){
   17fea:	68fb      	ldr	r3, [r7, #12]
   17fec:	7e1b      	ldrb	r3, [r3, #24]
   17fee:	2b00      	cmp	r3, #0
   17ff0:	d10e      	bne.n	18010 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x48>
            if(msg->DLC == 0U){
   17ff2:	683b      	ldr	r3, [r7, #0]
   17ff4:	7d1b      	ldrb	r3, [r3, #20]
   17ff6:	2b00      	cmp	r3, #0
   17ff8:	d103      	bne.n	18002 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x3a>
                SYNC->CANrxNew = true;
   17ffa:	68fb      	ldr	r3, [r7, #12]
   17ffc:	2201      	movs	r2, #1
   17ffe:	769a      	strb	r2, [r3, #26]
   18000:	e018      	b.n	18034 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0100U;
   18002:	683b      	ldr	r3, [r7, #0]
   18004:	7d1b      	ldrb	r3, [r3, #20]
   18006:	f443 7280 	orr.w	r2, r3, #256	; 0x100
   1800a:	68fb      	ldr	r3, [r7, #12]
   1800c:	625a      	str	r2, [r3, #36]	; 0x24
   1800e:	e011      	b.n	18034 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
        }
        else{
            if(msg->DLC == 1U){
   18010:	683b      	ldr	r3, [r7, #0]
   18012:	7d1b      	ldrb	r3, [r3, #20]
   18014:	2b01      	cmp	r3, #1
   18016:	d107      	bne.n	18028 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x60>
                SYNC->counter = msg->data[0];
   18018:	683b      	ldr	r3, [r7, #0]
   1801a:	7d5a      	ldrb	r2, [r3, #21]
   1801c:	68fb      	ldr	r3, [r7, #12]
   1801e:	771a      	strb	r2, [r3, #28]
                SYNC->CANrxNew = true;
   18020:	68fb      	ldr	r3, [r7, #12]
   18022:	2201      	movs	r2, #1
   18024:	769a      	strb	r2, [r3, #26]
   18026:	e005      	b.n	18034 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x6c>
            }
            else{
                SYNC->receiveError = (uint32_t)msg->DLC | 0x0200U;
   18028:	683b      	ldr	r3, [r7, #0]
   1802a:	7d1b      	ldrb	r3, [r3, #20]
   1802c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
   18030:	68fb      	ldr	r3, [r7, #12]
   18032:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
        if(SYNC->CANrxNew) {
   18034:	68fb      	ldr	r3, [r7, #12]
   18036:	7e9b      	ldrb	r3, [r3, #26]
   18038:	2b00      	cmp	r3, #0
   1803a:	d009      	beq.n	18050 <_ZL15CO_SYNC_receivePvPK13CO_CANrxMsg_t+0x88>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
   1803c:	68fb      	ldr	r3, [r7, #12]
   1803e:	7edb      	ldrb	r3, [r3, #27]
   18040:	2b00      	cmp	r3, #0
   18042:	bf0c      	ite	eq
   18044:	2301      	moveq	r3, #1
   18046:	2300      	movne	r3, #0
   18048:	b2db      	uxtb	r3, r3
   1804a:	461a      	mov	r2, r3
   1804c:	68fb      	ldr	r3, [r7, #12]
   1804e:	76da      	strb	r2, [r3, #27]
        }
    }
}
   18050:	bf00      	nop
   18052:	3714      	adds	r7, #20
   18054:	46bd      	mov	sp, r7
   18056:	bc80      	pop	{r7}
   18058:	4770      	bx	lr
	...

0001805c <_ZL11CO_ODF_1005P12CO_ODF_arg_t>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
   1805c:	b590      	push	{r4, r7, lr}
   1805e:	b08b      	sub	sp, #44	; 0x2c
   18060:	af04      	add	r7, sp, #16
   18062:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   18064:	2300      	movs	r3, #0
   18066:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   18068:	687b      	ldr	r3, [r7, #4]
   1806a:	681b      	ldr	r3, [r3, #0]
   1806c:	60fb      	str	r3, [r7, #12]
    value =canopen_driver->CO_getUint32(ODF_arg->data);
   1806e:	4b35      	ldr	r3, [pc, #212]	; (18144 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   18070:	681b      	ldr	r3, [r3, #0]
   18072:	1d1a      	adds	r2, r3, #4
   18074:	687b      	ldr	r3, [r7, #4]
   18076:	685b      	ldr	r3, [r3, #4]
   18078:	4619      	mov	r1, r3
   1807a:	4610      	mov	r0, r2
   1807c:	4b32      	ldr	r3, [pc, #200]	; (18148 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xec>)
   1807e:	4798      	blx	r3
   18080:	60b8      	str	r0, [r7, #8]

    if(!ODF_arg->reading){
   18082:	687b      	ldr	r3, [r7, #4]
   18084:	7f5b      	ldrb	r3, [r3, #29]
   18086:	2b00      	cmp	r3, #0
   18088:	d157      	bne.n	1813a <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
        uint8_t configureSyncProducer = 0;
   1808a:	2300      	movs	r3, #0
   1808c:	74fb      	strb	r3, [r7, #19]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
   1808e:	68bb      	ldr	r3, [r7, #8]
   18090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
   18094:	2b00      	cmp	r3, #0
   18096:	d002      	beq.n	1809e <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x42>
            ret = CO_SDO_AB_INVALID_VALUE;
   18098:	4b2c      	ldr	r3, [pc, #176]	; (1814c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf0>)
   1809a:	617b      	str	r3, [r7, #20]
   1809c:	e00d      	b.n	180ba <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
   1809e:	68bb      	ldr	r3, [r7, #8]
   180a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
   180a4:	2b00      	cmp	r3, #0
   180a6:	d008      	beq.n	180ba <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
   180a8:	68fb      	ldr	r3, [r7, #12]
   180aa:	7a1b      	ldrb	r3, [r3, #8]
   180ac:	2b00      	cmp	r3, #0
   180ae:	d002      	beq.n	180b6 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5a>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
   180b0:	4b27      	ldr	r3, [pc, #156]	; (18150 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf4>)
   180b2:	617b      	str	r3, [r7, #20]
   180b4:	e001      	b.n	180ba <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x5e>
                }
                else{
                    configureSyncProducer = 1;
   180b6:	2301      	movs	r3, #1
   180b8:	74fb      	strb	r3, [r7, #19]
                }
            }
        }

        /* configure sync producer and consumer */
        if(ret == CO_SDO_AB_NONE){
   180ba:	697b      	ldr	r3, [r7, #20]
   180bc:	2b00      	cmp	r3, #0
   180be:	d13c      	bne.n	1813a <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xde>
            SYNC->COB_ID = (uint32_t)(value & 0x7FFU);
   180c0:	68bb      	ldr	r3, [r7, #8]
   180c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
   180c6:	68fb      	ldr	r3, [r7, #12]
   180c8:	60da      	str	r2, [r3, #12]

            if(configureSyncProducer){
   180ca:	7cfb      	ldrb	r3, [r7, #19]
   180cc:	2b00      	cmp	r3, #0
   180ce:	d021      	beq.n	18114 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xb8>
                uint8_t len = 0U;
   180d0:	2300      	movs	r3, #0
   180d2:	74bb      	strb	r3, [r7, #18]
                if(SYNC->counterOverflowValue != 0U){
   180d4:	68fb      	ldr	r3, [r7, #12]
   180d6:	7e1b      	ldrb	r3, [r3, #24]
   180d8:	2b00      	cmp	r3, #0
   180da:	d007      	beq.n	180ec <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x90>
                    len = 1U;
   180dc:	2301      	movs	r3, #1
   180de:	74bb      	strb	r3, [r7, #18]
                    SYNC->counter = 0U;
   180e0:	68fb      	ldr	r3, [r7, #12]
   180e2:	2200      	movs	r2, #0
   180e4:	771a      	strb	r2, [r3, #28]
                    SYNC->timer = 0U;
   180e6:	68fb      	ldr	r3, [r7, #12]
   180e8:	2200      	movs	r2, #0
   180ea:	621a      	str	r2, [r3, #32]
                }
                SYNC->CANtxBuff = canopen_driver->CAN_Tx_BufferInit(
   180ec:	4b15      	ldr	r3, [pc, #84]	; (18144 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   180ee:	6818      	ldr	r0, [r3, #0]
   180f0:	68fb      	ldr	r3, [r7, #12]
   180f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
   180f4:	68fb      	ldr	r3, [r7, #12]
   180f6:	68da      	ldr	r2, [r3, #12]
   180f8:	2300      	movs	r3, #0
   180fa:	9301      	str	r3, [sp, #4]
   180fc:	7cbb      	ldrb	r3, [r7, #18]
   180fe:	9300      	str	r3, [sp, #0]
   18100:	2300      	movs	r3, #0
   18102:	4c14      	ldr	r4, [pc, #80]	; (18154 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xf8>)
   18104:	47a0      	blx	r4
   18106:	4602      	mov	r2, r0
   18108:	68fb      	ldr	r3, [r7, #12]
   1810a:	635a      	str	r2, [r3, #52]	; 0x34
                        SYNC->CANdevTxIdx,      /* index of specific buffer inside CAN module */
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */
                SYNC->isProducer = true;
   1810c:	68fb      	ldr	r3, [r7, #12]
   1810e:	2201      	movs	r2, #1
   18110:	721a      	strb	r2, [r3, #8]
   18112:	e002      	b.n	1811a <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xbe>
            }
            else{
                SYNC->isProducer = false;
   18114:	68fb      	ldr	r3, [r7, #12]
   18116:	2200      	movs	r2, #0
   18118:	721a      	strb	r2, [r3, #8]
            }

            canopen_driver->CAN_Rx_BufferInit(
   1811a:	4b0a      	ldr	r3, [pc, #40]	; (18144 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xe8>)
   1811c:	6818      	ldr	r0, [r3, #0]
   1811e:	68fb      	ldr	r3, [r7, #12]
   18120:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   18122:	68fb      	ldr	r3, [r7, #12]
   18124:	68da      	ldr	r2, [r3, #12]
                    SYNC->CANdevRxIdx,      /* rx buffer index */
                    SYNC->COB_ID,           /* CAN identifier */
                    0x7FF,                  /* mask */
                    0,                      /* rtr */
                    (void*)SYNC,            /* object passed to receive function */
                    CO_SYNC_receive);       /* this function will process received message */
   18126:	4b0c      	ldr	r3, [pc, #48]	; (18158 <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0xfc>)
   18128:	9302      	str	r3, [sp, #8]
   1812a:	68fb      	ldr	r3, [r7, #12]
   1812c:	9301      	str	r3, [sp, #4]
   1812e:	2300      	movs	r3, #0
   18130:	9300      	str	r3, [sp, #0]
   18132:	f240 73ff 	movw	r3, #2047	; 0x7ff
   18136:	4c09      	ldr	r4, [pc, #36]	; (1815c <_ZL11CO_ODF_1005P12CO_ODF_arg_t+0x100>)
   18138:	47a0      	blx	r4
        }
    }

    return ret;
   1813a:	697b      	ldr	r3, [r7, #20]
}
   1813c:	4618      	mov	r0, r3
   1813e:	371c      	adds	r7, #28
   18140:	46bd      	mov	sp, r7
   18142:	bd90      	pop	{r4, r7, pc}
   18144:	2000da5c 	.word	0x2000da5c
   18148:	000177f9 	.word	0x000177f9
   1814c:	06090030 	.word	0x06090030
   18150:	08000022 	.word	0x08000022
   18154:	00015cb5 	.word	0x00015cb5
   18158:	00017fc9 	.word	0x00017fc9
   1815c:	00015bb5 	.word	0x00015bb5

00018160 <_ZL11CO_ODF_1006P12CO_ODF_arg_t>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
   18160:	b580      	push	{r7, lr}
   18162:	b086      	sub	sp, #24
   18164:	af00      	add	r7, sp, #0
   18166:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   18168:	2300      	movs	r3, #0
   1816a:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   1816c:	687b      	ldr	r3, [r7, #4]
   1816e:	681b      	ldr	r3, [r3, #0]
   18170:	613b      	str	r3, [r7, #16]
    value = canopen_driver->CO_getUint32(ODF_arg->data);
   18172:	4b19      	ldr	r3, [pc, #100]	; (181d8 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x78>)
   18174:	681b      	ldr	r3, [r3, #0]
   18176:	1d1a      	adds	r2, r3, #4
   18178:	687b      	ldr	r3, [r7, #4]
   1817a:	685b      	ldr	r3, [r3, #4]
   1817c:	4619      	mov	r1, r3
   1817e:	4610      	mov	r0, r2
   18180:	4b16      	ldr	r3, [pc, #88]	; (181dc <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x7c>)
   18182:	4798      	blx	r3
   18184:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
   18186:	687b      	ldr	r3, [r7, #4]
   18188:	7f5b      	ldrb	r3, [r3, #29]
   1818a:	2b00      	cmp	r3, #0
   1818c:	d11f      	bne.n	181ce <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x6e>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
   1818e:	693b      	ldr	r3, [r7, #16]
   18190:	691b      	ldr	r3, [r3, #16]
   18192:	2b00      	cmp	r3, #0
   18194:	d105      	bne.n	181a2 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
   18196:	68fb      	ldr	r3, [r7, #12]
   18198:	2b00      	cmp	r3, #0
   1819a:	d002      	beq.n	181a2 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x42>
            SYNC->counter = 0;
   1819c:	693b      	ldr	r3, [r7, #16]
   1819e:	2200      	movs	r2, #0
   181a0:	771a      	strb	r2, [r3, #28]
        }

        SYNC->periodTime = value;
   181a2:	693b      	ldr	r3, [r7, #16]
   181a4:	68fa      	ldr	r2, [r7, #12]
   181a6:	611a      	str	r2, [r3, #16]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
   181a8:	68fb      	ldr	r3, [r7, #12]
   181aa:	085a      	lsrs	r2, r3, #1
   181ac:	4613      	mov	r3, r2
   181ae:	005b      	lsls	r3, r3, #1
   181b0:	441a      	add	r2, r3
   181b2:	693b      	ldr	r3, [r7, #16]
   181b4:	615a      	str	r2, [r3, #20]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
   181b6:	693b      	ldr	r3, [r7, #16]
   181b8:	695a      	ldr	r2, [r3, #20]
   181ba:	68fb      	ldr	r3, [r7, #12]
   181bc:	429a      	cmp	r2, r3
   181be:	d203      	bcs.n	181c8 <_ZL11CO_ODF_1006P12CO_ODF_arg_t+0x68>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
   181c0:	693b      	ldr	r3, [r7, #16]
   181c2:	f04f 32ff 	mov.w	r2, #4294967295
   181c6:	615a      	str	r2, [r3, #20]
        }

        SYNC->timer = 0;
   181c8:	693b      	ldr	r3, [r7, #16]
   181ca:	2200      	movs	r2, #0
   181cc:	621a      	str	r2, [r3, #32]
    }

    return ret;
   181ce:	697b      	ldr	r3, [r7, #20]
}
   181d0:	4618      	mov	r0, r3
   181d2:	3718      	adds	r7, #24
   181d4:	46bd      	mov	sp, r7
   181d6:	bd80      	pop	{r7, pc}
   181d8:	2000da5c 	.word	0x2000da5c
   181dc:	000177f9 	.word	0x000177f9

000181e0 <_ZL11CO_ODF_1019P12CO_ODF_arg_t>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
   181e0:	b590      	push	{r4, r7, lr}
   181e2:	b089      	sub	sp, #36	; 0x24
   181e4:	af02      	add	r7, sp, #8
   181e6:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
   181e8:	2300      	movs	r3, #0
   181ea:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
   181ec:	687b      	ldr	r3, [r7, #4]
   181ee:	681b      	ldr	r3, [r3, #0]
   181f0:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
   181f2:	687b      	ldr	r3, [r7, #4]
   181f4:	685b      	ldr	r3, [r3, #4]
   181f6:	781b      	ldrb	r3, [r3, #0]
   181f8:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
   181fa:	687b      	ldr	r3, [r7, #4]
   181fc:	7f5b      	ldrb	r3, [r3, #29]
   181fe:	2b00      	cmp	r3, #0
   18200:	d12c      	bne.n	1825c <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        uint8_t len = 0U;
   18202:	2300      	movs	r3, #0
   18204:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
   18206:	68fb      	ldr	r3, [r7, #12]
   18208:	691b      	ldr	r3, [r3, #16]
   1820a:	2b00      	cmp	r3, #0
   1820c:	d002      	beq.n	18214 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
   1820e:	4b16      	ldr	r3, [pc, #88]	; (18268 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x88>)
   18210:	617b      	str	r3, [r7, #20]
   18212:	e023      	b.n	1825c <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else if((value == 1) || (value > 240 && value <= 255)){
   18214:	7afb      	ldrb	r3, [r7, #11]
   18216:	2b01      	cmp	r3, #1
   18218:	d005      	beq.n	18226 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x46>
   1821a:	7afb      	ldrb	r3, [r7, #11]
   1821c:	2bf0      	cmp	r3, #240	; 0xf0
   1821e:	dd05      	ble.n	1822c <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
   18220:	7afb      	ldrb	r3, [r7, #11]
   18222:	2bff      	cmp	r3, #255	; 0xff
   18224:	dc02      	bgt.n	1822c <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x4c>
            ret = CO_SDO_AB_INVALID_VALUE;
   18226:	4b11      	ldr	r3, [pc, #68]	; (1826c <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x8c>)
   18228:	617b      	str	r3, [r7, #20]
   1822a:	e017      	b.n	1825c <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x7c>
        }
        else{
            SYNC->counterOverflowValue = value;
   1822c:	68fb      	ldr	r3, [r7, #12]
   1822e:	7afa      	ldrb	r2, [r7, #11]
   18230:	761a      	strb	r2, [r3, #24]
            if(value != 0){
   18232:	7afb      	ldrb	r3, [r7, #11]
   18234:	2b00      	cmp	r3, #0
   18236:	d001      	beq.n	1823c <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x5c>
                len = 1U;
   18238:	2301      	movs	r3, #1
   1823a:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff =canopen_driver->CAN_Tx_BufferInit(
   1823c:	4b0c      	ldr	r3, [pc, #48]	; (18270 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x90>)
   1823e:	6818      	ldr	r0, [r3, #0]
   18240:	68fb      	ldr	r3, [r7, #12]
   18242:	6b99      	ldr	r1, [r3, #56]	; 0x38
   18244:	68fb      	ldr	r3, [r7, #12]
   18246:	68da      	ldr	r2, [r3, #12]
   18248:	2300      	movs	r3, #0
   1824a:	9301      	str	r3, [sp, #4]
   1824c:	7cfb      	ldrb	r3, [r7, #19]
   1824e:	9300      	str	r3, [sp, #0]
   18250:	2300      	movs	r3, #0
   18252:	4c08      	ldr	r4, [pc, #32]	; (18274 <_ZL11CO_ODF_1019P12CO_ODF_arg_t+0x94>)
   18254:	47a0      	blx	r4
   18256:	4602      	mov	r2, r0
   18258:	68fb      	ldr	r3, [r7, #12]
   1825a:	635a      	str	r2, [r3, #52]	; 0x34
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */
        }
    }

    return ret;
   1825c:	697b      	ldr	r3, [r7, #20]
}
   1825e:	4618      	mov	r0, r3
   18260:	371c      	adds	r7, #28
   18262:	46bd      	mov	sp, r7
   18264:	bd90      	pop	{r4, r7, pc}
   18266:	bf00      	nop
   18268:	08000022 	.word	0x08000022
   1826c:	06090030 	.word	0x06090030
   18270:	2000da5c 	.word	0x2000da5c
   18274:	00015cb5 	.word	0x00015cb5

00018278 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint32_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint32_t                CANdevTxIdx)
{
   18278:	b590      	push	{r4, r7, lr}
   1827a:	b08b      	sub	sp, #44	; 0x2c
   1827c:	af04      	add	r7, sp, #16
   1827e:	60f8      	str	r0, [r7, #12]
   18280:	60b9      	str	r1, [r7, #8]
   18282:	607a      	str	r2, [r7, #4]
   18284:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
   18286:	2300      	movs	r3, #0
   18288:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
   1828a:	68bb      	ldr	r3, [r7, #8]
   1828c:	2b00      	cmp	r3, #0
   1828e:	d00e      	beq.n	182ae <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   18290:	687b      	ldr	r3, [r7, #4]
   18292:	2b00      	cmp	r3, #0
   18294:	d00b      	beq.n	182ae <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   18296:	683b      	ldr	r3, [r7, #0]
   18298:	2b00      	cmp	r3, #0
   1829a:	d008      	beq.n	182ae <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   1829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1829e:	2b00      	cmp	r3, #0
   182a0:	d005      	beq.n	182ae <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
   182a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   182a4:	2b00      	cmp	r3, #0
   182a6:	d002      	beq.n	182ae <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x36>
        CANdevRx==NULL || CANdevTx==NULL){
   182a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   182aa:	2b00      	cmp	r3, #0
   182ac:	d102      	bne.n	182b4 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
   182ae:	f04f 33ff 	mov.w	r3, #4294967295
   182b2:	e097      	b.n	183e4 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x16c>

    /* Configure object variables */
	#ifdef MASTER
	 SYNC->isProducer =  true;
	#else
	 SYNC->isProducer =  false;
   182b4:	68bb      	ldr	r3, [r7, #8]
   182b6:	2200      	movs	r2, #0
   182b8:	721a      	strb	r2, [r3, #8]
	#endif
 
	// SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
   182ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   182bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
   182c0:	68bb      	ldr	r3, [r7, #8]
   182c2:	60da      	str	r2, [r3, #12]

    SYNC->periodTime = communicationCyclePeriod;
   182c4:	68bb      	ldr	r3, [r7, #8]
   182c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   182c8:	611a      	str	r2, [r3, #16]
  //  SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
	  SYNC->periodTimeoutTime = communicationCyclePeriod / 1 * 3;
   182ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   182cc:	4613      	mov	r3, r2
   182ce:	005b      	lsls	r3, r3, #1
   182d0:	441a      	add	r2, r3
   182d2:	68bb      	ldr	r3, [r7, #8]
   182d4:	615a      	str	r2, [r3, #20]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
   182d6:	68bb      	ldr	r3, [r7, #8]
   182d8:	695a      	ldr	r2, [r3, #20]
   182da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   182dc:	429a      	cmp	r2, r3
   182de:	d203      	bcs.n	182e8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x70>
   182e0:	68bb      	ldr	r3, [r7, #8]
   182e2:	f04f 32ff 	mov.w	r2, #4294967295
   182e6:	615a      	str	r2, [r3, #20]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
   182e8:	68bb      	ldr	r3, [r7, #8]
   182ea:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
   182ee:	761a      	strb	r2, [r3, #24]
    if(synchronousCounterOverflowValue) len = 1;
   182f0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   182f4:	2b00      	cmp	r3, #0
   182f6:	d001      	beq.n	182fc <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x84>
   182f8:	2301      	movs	r3, #1
   182fa:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
   182fc:	68bb      	ldr	r3, [r7, #8]
   182fe:	2201      	movs	r2, #1
   18300:	765a      	strb	r2, [r3, #25]

    SYNC->CANrxNew = false;
   18302:	68bb      	ldr	r3, [r7, #8]
   18304:	2200      	movs	r2, #0
   18306:	769a      	strb	r2, [r3, #26]
    SYNC->CANrxToggle = false;
   18308:	68bb      	ldr	r3, [r7, #8]
   1830a:	2200      	movs	r2, #0
   1830c:	76da      	strb	r2, [r3, #27]
    SYNC->timer = 0;
   1830e:	68bb      	ldr	r3, [r7, #8]
   18310:	2200      	movs	r2, #0
   18312:	621a      	str	r2, [r3, #32]
    SYNC->counter = 0;
   18314:	68bb      	ldr	r3, [r7, #8]
   18316:	2200      	movs	r2, #0
   18318:	771a      	strb	r2, [r3, #28]
    SYNC->receiveError = 0U;
   1831a:	68bb      	ldr	r3, [r7, #8]
   1831c:	2200      	movs	r2, #0
   1831e:	625a      	str	r2, [r3, #36]	; 0x24

    SYNC->em = em;
   18320:	68bb      	ldr	r3, [r7, #8]
   18322:	687a      	ldr	r2, [r7, #4]
   18324:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
   18326:	68bb      	ldr	r3, [r7, #8]
   18328:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1832a:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
   1832c:	68bb      	ldr	r3, [r7, #8]
   1832e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   18330:	629a      	str	r2, [r3, #40]	; 0x28
    SYNC->CANdevRxIdx = CANdevRxIdx;
   18332:	68bb      	ldr	r3, [r7, #8]
   18334:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   18336:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    canopen_driver->CO_OD_configure( OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
   18338:	4b2c      	ldr	r3, [pc, #176]	; (183ec <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   1833a:	681b      	ldr	r3, [r3, #0]
   1833c:	1d18      	adds	r0, r3, #4
   1833e:	2300      	movs	r3, #0
   18340:	9301      	str	r3, [sp, #4]
   18342:	2300      	movs	r3, #0
   18344:	9300      	str	r3, [sp, #0]
   18346:	68bb      	ldr	r3, [r7, #8]
   18348:	4a29      	ldr	r2, [pc, #164]	; (183f0 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x178>)
   1834a:	f241 0105 	movw	r1, #4101	; 0x1005
   1834e:	4c29      	ldr	r4, [pc, #164]	; (183f4 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   18350:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
   18352:	4b26      	ldr	r3, [pc, #152]	; (183ec <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   18354:	681b      	ldr	r3, [r3, #0]
   18356:	1d18      	adds	r0, r3, #4
   18358:	2300      	movs	r3, #0
   1835a:	9301      	str	r3, [sp, #4]
   1835c:	2300      	movs	r3, #0
   1835e:	9300      	str	r3, [sp, #0]
   18360:	68bb      	ldr	r3, [r7, #8]
   18362:	4a25      	ldr	r2, [pc, #148]	; (183f8 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x180>)
   18364:	f241 0106 	movw	r1, #4102	; 0x1006
   18368:	4c22      	ldr	r4, [pc, #136]	; (183f4 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   1836a:	47a0      	blx	r4
    canopen_driver->CO_OD_configure( OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
   1836c:	4b1f      	ldr	r3, [pc, #124]	; (183ec <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   1836e:	681b      	ldr	r3, [r3, #0]
   18370:	1d18      	adds	r0, r3, #4
   18372:	2300      	movs	r3, #0
   18374:	9301      	str	r3, [sp, #4]
   18376:	2300      	movs	r3, #0
   18378:	9300      	str	r3, [sp, #0]
   1837a:	68bb      	ldr	r3, [r7, #8]
   1837c:	4a1f      	ldr	r2, [pc, #124]	; (183fc <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x184>)
   1837e:	f241 0119 	movw	r1, #4121	; 0x1019
   18382:	4c1c      	ldr	r4, [pc, #112]	; (183f4 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x17c>)
   18384:	47a0      	blx	r4

    /* configure SYNC CAN reception */
    canopen_driver->CAN_Rx_BufferInit(
   18386:	4b19      	ldr	r3, [pc, #100]	; (183ec <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   18388:	6818      	ldr	r0, [r3, #0]
   1838a:	68bb      	ldr	r3, [r7, #8]
   1838c:	68da      	ldr	r2, [r3, #12]
            CANdevRxIdx,            /* rx buffer index */
            SYNC->COB_ID,           /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */
   1838e:	4b1c      	ldr	r3, [pc, #112]	; (18400 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x188>)
   18390:	9302      	str	r3, [sp, #8]
   18392:	68bb      	ldr	r3, [r7, #8]
   18394:	9301      	str	r3, [sp, #4]
   18396:	2300      	movs	r3, #0
   18398:	9300      	str	r3, [sp, #0]
   1839a:	f240 73ff 	movw	r3, #2047	; 0x7ff
   1839e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   183a0:	4c18      	ldr	r4, [pc, #96]	; (18404 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x18c>)
   183a2:	47a0      	blx	r4

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
   183a4:	68bb      	ldr	r3, [r7, #8]
   183a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   183a8:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevTxIdx = CANdevTxIdx;
   183aa:	68bb      	ldr	r3, [r7, #8]
   183ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   183ae:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->CANtxBuff =  canopen_driver->CAN_Tx_BufferInit(
   183b0:	4b0e      	ldr	r3, [pc, #56]	; (183ec <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x174>)
   183b2:	6818      	ldr	r0, [r3, #0]
   183b4:	68bb      	ldr	r3, [r7, #8]
   183b6:	68da      	ldr	r2, [r3, #12]
   183b8:	2300      	movs	r3, #0
   183ba:	9301      	str	r3, [sp, #4]
   183bc:	7dfb      	ldrb	r3, [r7, #23]
   183be:	9300      	str	r3, [sp, #0]
   183c0:	2300      	movs	r3, #0
   183c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
   183c4:	4c10      	ldr	r4, [pc, #64]	; (18408 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x190>)
   183c6:	47a0      	blx	r4
   183c8:	4602      	mov	r2, r0
   183ca:	68bb      	ldr	r3, [r7, #8]
   183cc:	635a      	str	r2, [r3, #52]	; 0x34
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */
			
	memcpy(&local_sync_tx_buffer,SYNC->CANtxBuff,sizeof(CO_CANtx_t));
   183ce:	68bb      	ldr	r3, [r7, #8]
   183d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   183d2:	2210      	movs	r2, #16
   183d4:	4619      	mov	r1, r3
   183d6:	480d      	ldr	r0, [pc, #52]	; (1840c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x194>)
   183d8:	4b0d      	ldr	r3, [pc, #52]	; (18410 <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x198>)
   183da:	4798      	blx	r3
		tx_buffer=&local_sync_tx_buffer;    
   183dc:	68fb      	ldr	r3, [r7, #12]
   183de:	4a0b      	ldr	r2, [pc, #44]	; (1840c <_ZN13CO_SYNC_Class9SYNC_InitEP9CO_SYNC_tP7CO_EM_tP8CO_SDO_tPhmmhP14CO_CANmodule_tmS8_m+0x194>)
   183e0:	601a      	str	r2, [r3, #0]
    return CO_ERROR_NO;
   183e2:	2300      	movs	r3, #0
}
   183e4:	4618      	mov	r0, r3
   183e6:	371c      	adds	r7, #28
   183e8:	46bd      	mov	sp, r7
   183ea:	bd90      	pop	{r4, r7, pc}
   183ec:	2000da5c 	.word	0x2000da5c
   183f0:	0001805d 	.word	0x0001805d
   183f4:	00017c4d 	.word	0x00017c4d
   183f8:	00018161 	.word	0x00018161
   183fc:	000181e1 	.word	0x000181e1
   18400:	00017fc9 	.word	0x00017fc9
   18404:	00015bb5 	.word	0x00015bb5
   18408:	00015cb5 	.word	0x00015cb5
   1840c:	2000dab4 	.word	0x2000dab4
   18410:	0001ab91 	.word	0x0001ab91

00018414 <_ZN13CO_SYNC_Class16Send_SYNC_SignalEv>:
    }

    return ret;
}

uint8_t CO_SYNC_Class::Send_SYNC_Signal(void){
   18414:	b580      	push	{r7, lr}
   18416:	b082      	sub	sp, #8
   18418:	af00      	add	r7, sp, #0
   1841a:	6078      	str	r0, [r7, #4]
	return 	(uint8_t)canopen_driver->CAN_Send(tx_buffer);
   1841c:	4b06      	ldr	r3, [pc, #24]	; (18438 <_ZN13CO_SYNC_Class16Send_SYNC_SignalEv+0x24>)
   1841e:	681a      	ldr	r2, [r3, #0]
   18420:	687b      	ldr	r3, [r7, #4]
   18422:	681b      	ldr	r3, [r3, #0]
   18424:	4619      	mov	r1, r3
   18426:	4610      	mov	r0, r2
   18428:	4b04      	ldr	r3, [pc, #16]	; (1843c <_ZN13CO_SYNC_Class16Send_SYNC_SignalEv+0x28>)
   1842a:	4798      	blx	r3
   1842c:	4603      	mov	r3, r0
   1842e:	b2db      	uxtb	r3, r3
}
   18430:	4618      	mov	r0, r3
   18432:	3708      	adds	r7, #8
   18434:	46bd      	mov	sp, r7
   18436:	bd80      	pop	{r7, pc}
   18438:	2000da5c 	.word	0x2000da5c
   1843c:	00015d61 	.word	0x00015d61

00018440 <_ZN14CO_CRC16_ClassC1Ev>:
	0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U
};


// default constructor
CO_CRC16_Class::CO_CRC16_Class()
   18440:	b480      	push	{r7}
   18442:	b083      	sub	sp, #12
   18444:	af00      	add	r7, sp, #0
   18446:	6078      	str	r0, [r7, #4]
{
} //CO_CRC16_Class
   18448:	687b      	ldr	r3, [r7, #4]
   1844a:	4618      	mov	r0, r3
   1844c:	370c      	adds	r7, #12
   1844e:	46bd      	mov	sp, r7
   18450:	bc80      	pop	{r7}
   18452:	4770      	bx	lr

00018454 <_ZN14CO_CRC16_ClassD1Ev>:

// default destructor
CO_CRC16_Class::~CO_CRC16_Class()
   18454:	b480      	push	{r7}
   18456:	b083      	sub	sp, #12
   18458:	af00      	add	r7, sp, #0
   1845a:	6078      	str	r0, [r7, #4]
{
} //~CO_CRC16_Class
   1845c:	687b      	ldr	r3, [r7, #4]
   1845e:	4618      	mov	r0, r3
   18460:	370c      	adds	r7, #12
   18462:	46bd      	mov	sp, r7
   18464:	bc80      	pop	{r7}
   18466:	4770      	bx	lr

00018468 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   18468:	b580      	push	{r7, lr}
   1846a:	b084      	sub	sp, #16
   1846c:	af00      	add	r7, sp, #0
   1846e:	60f8      	str	r0, [r7, #12]
   18470:	60b9      	str	r1, [r7, #8]
   18472:	4613      	mov	r3, r2
   18474:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   18476:	68fb      	ldr	r3, [r7, #12]
   18478:	2b00      	cmp	r3, #0
   1847a:	d004      	beq.n	18486 <io_write+0x1e>
   1847c:	68bb      	ldr	r3, [r7, #8]
   1847e:	2b00      	cmp	r3, #0
   18480:	d001      	beq.n	18486 <io_write+0x1e>
   18482:	2301      	movs	r3, #1
   18484:	e000      	b.n	18488 <io_write+0x20>
   18486:	2300      	movs	r3, #0
   18488:	f003 0301 	and.w	r3, r3, #1
   1848c:	b2db      	uxtb	r3, r3
   1848e:	2234      	movs	r2, #52	; 0x34
   18490:	4907      	ldr	r1, [pc, #28]	; (184b0 <io_write+0x48>)
   18492:	4618      	mov	r0, r3
   18494:	4b07      	ldr	r3, [pc, #28]	; (184b4 <io_write+0x4c>)
   18496:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   18498:	68fb      	ldr	r3, [r7, #12]
   1849a:	681b      	ldr	r3, [r3, #0]
   1849c:	88fa      	ldrh	r2, [r7, #6]
   1849e:	68b9      	ldr	r1, [r7, #8]
   184a0:	68f8      	ldr	r0, [r7, #12]
   184a2:	4798      	blx	r3
   184a4:	4603      	mov	r3, r0
}
   184a6:	4618      	mov	r0, r3
   184a8:	3710      	adds	r7, #16
   184aa:	46bd      	mov	sp, r7
   184ac:	bd80      	pop	{r7, pc}
   184ae:	bf00      	nop
   184b0:	0001c1a8 	.word	0x0001c1a8
   184b4:	00004cdd 	.word	0x00004cdd

000184b8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   184b8:	b580      	push	{r7, lr}
   184ba:	b084      	sub	sp, #16
   184bc:	af00      	add	r7, sp, #0
   184be:	60f8      	str	r0, [r7, #12]
   184c0:	60b9      	str	r1, [r7, #8]
   184c2:	4613      	mov	r3, r2
   184c4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   184c6:	68fb      	ldr	r3, [r7, #12]
   184c8:	2b00      	cmp	r3, #0
   184ca:	d004      	beq.n	184d6 <io_read+0x1e>
   184cc:	68bb      	ldr	r3, [r7, #8]
   184ce:	2b00      	cmp	r3, #0
   184d0:	d001      	beq.n	184d6 <io_read+0x1e>
   184d2:	2301      	movs	r3, #1
   184d4:	e000      	b.n	184d8 <io_read+0x20>
   184d6:	2300      	movs	r3, #0
   184d8:	f003 0301 	and.w	r3, r3, #1
   184dc:	b2db      	uxtb	r3, r3
   184de:	223d      	movs	r2, #61	; 0x3d
   184e0:	4907      	ldr	r1, [pc, #28]	; (18500 <io_read+0x48>)
   184e2:	4618      	mov	r0, r3
   184e4:	4b07      	ldr	r3, [pc, #28]	; (18504 <io_read+0x4c>)
   184e6:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   184e8:	68fb      	ldr	r3, [r7, #12]
   184ea:	685b      	ldr	r3, [r3, #4]
   184ec:	88fa      	ldrh	r2, [r7, #6]
   184ee:	68b9      	ldr	r1, [r7, #8]
   184f0:	68f8      	ldr	r0, [r7, #12]
   184f2:	4798      	blx	r3
   184f4:	4603      	mov	r3, r0
}
   184f6:	4618      	mov	r0, r3
   184f8:	3710      	adds	r7, #16
   184fa:	46bd      	mov	sp, r7
   184fc:	bd80      	pop	{r7, pc}
   184fe:	bf00      	nop
   18500:	0001c1a8 	.word	0x0001c1a8
   18504:	00004cdd 	.word	0x00004cdd

00018508 <itoa>:
#ifdef __cplusplus
extern "C" {
#endif

extern char* itoa(int value, char*string, int radix)
        {
   18508:	b580      	push	{r7, lr}
   1850a:	b084      	sub	sp, #16
   1850c:	af00      	add	r7, sp, #0
   1850e:	60f8      	str	r0, [r7, #12]
   18510:	60b9      	str	r1, [r7, #8]
   18512:	607a      	str	r2, [r7, #4]
            return ltoa(value, string, radix);
   18514:	687a      	ldr	r2, [r7, #4]
   18516:	68b9      	ldr	r1, [r7, #8]
   18518:	68f8      	ldr	r0, [r7, #12]
   1851a:	4b03      	ldr	r3, [pc, #12]	; (18528 <itoa+0x20>)
   1851c:	4798      	blx	r3
   1851e:	4603      	mov	r3, r0
        }
   18520:	4618      	mov	r0, r3
   18522:	3710      	adds	r7, #16
   18524:	46bd      	mov	sp, r7
   18526:	bd80      	pop	{r7, pc}
   18528:	0001852d 	.word	0x0001852d

0001852c <ltoa>:

        extern char* ltoa(long value, char*string, int radix)
        {
   1852c:	b480      	push	{r7}
   1852e:	b093      	sub	sp, #76	; 0x4c
   18530:	af00      	add	r7, sp, #0
   18532:	60f8      	str	r0, [r7, #12]
   18534:	60b9      	str	r1, [r7, #8]
   18536:	607a      	str	r2, [r7, #4]
            char tmp[33];
            char* tp = tmp;
   18538:	f107 0310 	add.w	r3, r7, #16
   1853c:	647b      	str	r3, [r7, #68]	; 0x44
            long i;
            unsigned long v;
            int sign;
            char* sp;

            if (string == NULL)
   1853e:	68bb      	ldr	r3, [r7, #8]
   18540:	2b00      	cmp	r3, #0
   18542:	d101      	bne.n	18548 <ltoa+0x1c>
            {
                return 0;
   18544:	2300      	movs	r3, #0
   18546:	e061      	b.n	1860c <ltoa+0xe0>
            }

            if (radix > 36 || radix <= 1)
   18548:	687b      	ldr	r3, [r7, #4]
   1854a:	2b24      	cmp	r3, #36	; 0x24
   1854c:	dc02      	bgt.n	18554 <ltoa+0x28>
   1854e:	687b      	ldr	r3, [r7, #4]
   18550:	2b01      	cmp	r3, #1
   18552:	dc01      	bgt.n	18558 <ltoa+0x2c>
            {
                return 0;
   18554:	2300      	movs	r3, #0
   18556:	e059      	b.n	1860c <ltoa+0xe0>
            }

            sign = (radix == 10 && value < 0);
   18558:	687b      	ldr	r3, [r7, #4]
   1855a:	2b0a      	cmp	r3, #10
   1855c:	d104      	bne.n	18568 <ltoa+0x3c>
   1855e:	68fb      	ldr	r3, [r7, #12]
   18560:	2b00      	cmp	r3, #0
   18562:	da01      	bge.n	18568 <ltoa+0x3c>
   18564:	2301      	movs	r3, #1
   18566:	e000      	b.n	1856a <ltoa+0x3e>
   18568:	2300      	movs	r3, #0
   1856a:	63bb      	str	r3, [r7, #56]	; 0x38
            if (sign)
   1856c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1856e:	2b00      	cmp	r3, #0
   18570:	d003      	beq.n	1857a <ltoa+0x4e>
            {
                v = -value;
   18572:	68fb      	ldr	r3, [r7, #12]
   18574:	425b      	negs	r3, r3
   18576:	643b      	str	r3, [r7, #64]	; 0x40
   18578:	e023      	b.n	185c2 <ltoa+0x96>
            }
            else
            {
                v = (unsigned long)value;
   1857a:	68fb      	ldr	r3, [r7, #12]
   1857c:	643b      	str	r3, [r7, #64]	; 0x40
            }

            while (v || tp == tmp)
   1857e:	e020      	b.n	185c2 <ltoa+0x96>
            {
                i = v % radix;
   18580:	687a      	ldr	r2, [r7, #4]
   18582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18584:	fbb3 f1f2 	udiv	r1, r3, r2
   18588:	fb02 f201 	mul.w	r2, r2, r1
   1858c:	1a9b      	subs	r3, r3, r2
   1858e:	637b      	str	r3, [r7, #52]	; 0x34
                v = v / radix;
   18590:	687b      	ldr	r3, [r7, #4]
   18592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   18594:	fbb2 f3f3 	udiv	r3, r2, r3
   18598:	643b      	str	r3, [r7, #64]	; 0x40
                if (i < 10)
   1859a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1859c:	2b09      	cmp	r3, #9
   1859e:	dc08      	bgt.n	185b2 <ltoa+0x86>
                    *tp++ = i + '0';
   185a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   185a2:	1c5a      	adds	r2, r3, #1
   185a4:	647a      	str	r2, [r7, #68]	; 0x44
   185a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   185a8:	b2d2      	uxtb	r2, r2
   185aa:	3230      	adds	r2, #48	; 0x30
   185ac:	b2d2      	uxtb	r2, r2
   185ae:	701a      	strb	r2, [r3, #0]
   185b0:	e007      	b.n	185c2 <ltoa+0x96>
                else
                    *tp++ = i + 'a' - 10;
   185b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   185b4:	1c5a      	adds	r2, r3, #1
   185b6:	647a      	str	r2, [r7, #68]	; 0x44
   185b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   185ba:	b2d2      	uxtb	r2, r2
   185bc:	3257      	adds	r2, #87	; 0x57
   185be:	b2d2      	uxtb	r2, r2
   185c0:	701a      	strb	r2, [r3, #0]
            while (v || tp == tmp)
   185c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   185c4:	2b00      	cmp	r3, #0
   185c6:	d1db      	bne.n	18580 <ltoa+0x54>
   185c8:	f107 0310 	add.w	r3, r7, #16
   185cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   185ce:	429a      	cmp	r2, r3
   185d0:	d0d6      	beq.n	18580 <ltoa+0x54>
            }

            sp = string;
   185d2:	68bb      	ldr	r3, [r7, #8]
   185d4:	63fb      	str	r3, [r7, #60]	; 0x3c

            if (sign)
   185d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   185d8:	2b00      	cmp	r3, #0
   185da:	d00e      	beq.n	185fa <ltoa+0xce>
                *sp++ = '-';
   185dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   185de:	1c5a      	adds	r2, r3, #1
   185e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   185e2:	222d      	movs	r2, #45	; 0x2d
   185e4:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
   185e6:	e008      	b.n	185fa <ltoa+0xce>
                *sp++ = *--tp;
   185e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   185ea:	1c5a      	adds	r2, r3, #1
   185ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   185ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   185f0:	3a01      	subs	r2, #1
   185f2:	647a      	str	r2, [r7, #68]	; 0x44
   185f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   185f6:	7812      	ldrb	r2, [r2, #0]
   185f8:	701a      	strb	r2, [r3, #0]
            while (tp > tmp)
   185fa:	f107 0310 	add.w	r3, r7, #16
   185fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   18600:	429a      	cmp	r2, r3
   18602:	d8f1      	bhi.n	185e8 <ltoa+0xbc>
            *sp = 0;
   18604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18606:	2200      	movs	r2, #0
   18608:	701a      	strb	r2, [r3, #0]

            return string;
   1860a:	68bb      	ldr	r3, [r7, #8]
        }
   1860c:	4618      	mov	r0, r3
   1860e:	374c      	adds	r7, #76	; 0x4c
   18610:	46bd      	mov	sp, r7
   18612:	bc80      	pop	{r7}
   18614:	4770      	bx	lr
	...

00018618 <utoa>:

        extern char* utoa(unsigned value, char*string, int radix)
        {
   18618:	b580      	push	{r7, lr}
   1861a:	b084      	sub	sp, #16
   1861c:	af00      	add	r7, sp, #0
   1861e:	60f8      	str	r0, [r7, #12]
   18620:	60b9      	str	r1, [r7, #8]
   18622:	607a      	str	r2, [r7, #4]
            return ultoa(value, string, radix);
   18624:	687a      	ldr	r2, [r7, #4]
   18626:	68b9      	ldr	r1, [r7, #8]
   18628:	68f8      	ldr	r0, [r7, #12]
   1862a:	4b03      	ldr	r3, [pc, #12]	; (18638 <utoa+0x20>)
   1862c:	4798      	blx	r3
   1862e:	4603      	mov	r3, r0
        }
   18630:	4618      	mov	r0, r3
   18632:	3710      	adds	r7, #16
   18634:	46bd      	mov	sp, r7
   18636:	bd80      	pop	{r7, pc}
   18638:	0001863d 	.word	0x0001863d

0001863c <ultoa>:

        extern char* ultoa(unsigned long value, char*string, int radix)
        {
   1863c:	b480      	push	{r7}
   1863e:	b093      	sub	sp, #76	; 0x4c
   18640:	af00      	add	r7, sp, #0
   18642:	60f8      	str	r0, [r7, #12]
   18644:	60b9      	str	r1, [r7, #8]
   18646:	607a      	str	r2, [r7, #4]
            char tmp[33];
            char* tp = tmp;
   18648:	f107 0314 	add.w	r3, r7, #20
   1864c:	647b      	str	r3, [r7, #68]	; 0x44
            long i;
            unsigned long v = value;
   1864e:	68fb      	ldr	r3, [r7, #12]
   18650:	643b      	str	r3, [r7, #64]	; 0x40
            char* sp;

            if (string == NULL)
   18652:	68bb      	ldr	r3, [r7, #8]
   18654:	2b00      	cmp	r3, #0
   18656:	d101      	bne.n	1865c <ultoa+0x20>
            {
                return 0;
   18658:	2300      	movs	r3, #0
   1865a:	e046      	b.n	186ea <ultoa+0xae>
            }

            if (radix > 36 || radix <= 1)
   1865c:	687b      	ldr	r3, [r7, #4]
   1865e:	2b24      	cmp	r3, #36	; 0x24
   18660:	dc02      	bgt.n	18668 <ultoa+0x2c>
   18662:	687b      	ldr	r3, [r7, #4]
   18664:	2b01      	cmp	r3, #1
   18666:	dc22      	bgt.n	186ae <ultoa+0x72>
            {
                return 0;
   18668:	2300      	movs	r3, #0
   1866a:	e03e      	b.n	186ea <ultoa+0xae>
            }

            while (v || tp == tmp)
            {
                i = v % radix;
   1866c:	687a      	ldr	r2, [r7, #4]
   1866e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18670:	fbb3 f1f2 	udiv	r1, r3, r2
   18674:	fb02 f201 	mul.w	r2, r2, r1
   18678:	1a9b      	subs	r3, r3, r2
   1867a:	63bb      	str	r3, [r7, #56]	; 0x38
                v = v / radix;
   1867c:	687b      	ldr	r3, [r7, #4]
   1867e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   18680:	fbb2 f3f3 	udiv	r3, r2, r3
   18684:	643b      	str	r3, [r7, #64]	; 0x40
                if (i < 10)
   18686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18688:	2b09      	cmp	r3, #9
   1868a:	dc08      	bgt.n	1869e <ultoa+0x62>
                    *tp++ = i + '0';
   1868c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1868e:	1c5a      	adds	r2, r3, #1
   18690:	647a      	str	r2, [r7, #68]	; 0x44
   18692:	6bba      	ldr	r2, [r7, #56]	; 0x38
   18694:	b2d2      	uxtb	r2, r2
   18696:	3230      	adds	r2, #48	; 0x30
   18698:	b2d2      	uxtb	r2, r2
   1869a:	701a      	strb	r2, [r3, #0]
   1869c:	e007      	b.n	186ae <ultoa+0x72>
                else
                    *tp++ = i + 'a' - 10;
   1869e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   186a0:	1c5a      	adds	r2, r3, #1
   186a2:	647a      	str	r2, [r7, #68]	; 0x44
   186a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   186a6:	b2d2      	uxtb	r2, r2
   186a8:	3257      	adds	r2, #87	; 0x57
   186aa:	b2d2      	uxtb	r2, r2
   186ac:	701a      	strb	r2, [r3, #0]
            while (v || tp == tmp)
   186ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   186b0:	2b00      	cmp	r3, #0
   186b2:	d1db      	bne.n	1866c <ultoa+0x30>
   186b4:	f107 0314 	add.w	r3, r7, #20
   186b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   186ba:	429a      	cmp	r2, r3
   186bc:	d0d6      	beq.n	1866c <ultoa+0x30>
            }

            sp = string;
   186be:	68bb      	ldr	r3, [r7, #8]
   186c0:	63fb      	str	r3, [r7, #60]	; 0x3c


            while (tp > &tmp[0]){
   186c2:	e009      	b.n	186d8 <ultoa+0x9c>
                *sp++ = *--tp;
   186c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   186c6:	1c5a      	adds	r2, r3, #1
   186c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   186ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   186cc:	3a01      	subs	r2, #1
   186ce:	647a      	str	r2, [r7, #68]	; 0x44
   186d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   186d2:	7812      	ldrb	r2, [r2, #0]
   186d4:	701a      	strb	r2, [r3, #0]
				asm("nop");
   186d6:	bf00      	nop
            while (tp > &tmp[0]){
   186d8:	f107 0314 	add.w	r3, r7, #20
   186dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   186de:	429a      	cmp	r2, r3
   186e0:	d8f0      	bhi.n	186c4 <ultoa+0x88>
			}
            *sp = 0;
   186e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   186e4:	2200      	movs	r2, #0
   186e6:	701a      	strb	r2, [r3, #0]

            return string;
   186e8:	68bb      	ldr	r3, [r7, #8]
        }
   186ea:	4618      	mov	r0, r3
   186ec:	374c      	adds	r7, #76	; 0x4c
   186ee:	46bd      	mov	sp, r7
   186f0:	bc80      	pop	{r7}
   186f2:	4770      	bx	lr

000186f4 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
   186f4:	b480      	push	{r7}
   186f6:	b083      	sub	sp, #12
   186f8:	af00      	add	r7, sp, #0
   186fa:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
   186fc:	687b      	ldr	r3, [r7, #4]
   186fe:	4618      	mov	r0, r3
   18700:	370c      	adds	r7, #12
   18702:	46bd      	mov	sp, r7
   18704:	bc80      	pop	{r7}
   18706:	4770      	bx	lr

00018708 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
   18708:	b480      	push	{r7}
   1870a:	b083      	sub	sp, #12
   1870c:	af00      	add	r7, sp, #0
   1870e:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
   18710:	687b      	ldr	r3, [r7, #4]
   18712:	4618      	mov	r0, r3
   18714:	370c      	adds	r7, #12
   18716:	46bd      	mov	sp, r7
   18718:	bc80      	pop	{r7}
   1871a:	4770      	bx	lr

0001871c <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
   1871c:	b480      	push	{r7}
   1871e:	b085      	sub	sp, #20
   18720:	af00      	add	r7, sp, #0
   18722:	6078      	str	r0, [r7, #4]
   18724:	460b      	mov	r3, r1
   18726:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
   18728:	2300      	movs	r3, #0
   1872a:	73fb      	strb	r3, [r7, #15]
   1872c:	7bfb      	ldrb	r3, [r7, #15]
   1872e:	2b01      	cmp	r3, #1
   18730:	dc13      	bgt.n	1875a <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
   18732:	7bfb      	ldrb	r3, [r7, #15]
   18734:	78f9      	ldrb	r1, [r7, #3]
   18736:	7bfa      	ldrb	r2, [r7, #15]
   18738:	2080      	movs	r0, #128	; 0x80
   1873a:	fa40 f202 	asr.w	r2, r0, r2
   1873e:	400a      	ands	r2, r1
   18740:	2a00      	cmp	r2, #0
   18742:	bfcc      	ite	gt
   18744:	2201      	movgt	r2, #1
   18746:	2200      	movle	r2, #0
   18748:	b2d1      	uxtb	r1, r2
   1874a:	687a      	ldr	r2, [r7, #4]
   1874c:	4413      	add	r3, r2
   1874e:	460a      	mov	r2, r1
   18750:	755a      	strb	r2, [r3, #21]
	for (uint8_t ii = 0; ii < 2; ii++)
   18752:	7bfb      	ldrb	r3, [r7, #15]
   18754:	3301      	adds	r3, #1
   18756:	73fb      	strb	r3, [r7, #15]
   18758:	e7e8      	b.n	1872c <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
   1875a:	bf00      	nop
   1875c:	3714      	adds	r7, #20
   1875e:	46bd      	mov	sp, r7
   18760:	bc80      	pop	{r7}
   18762:	4770      	bx	lr

00018764 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
   18764:	b480      	push	{r7}
   18766:	b085      	sub	sp, #20
   18768:	af00      	add	r7, sp, #0
   1876a:	6078      	str	r0, [r7, #4]
   1876c:	460b      	mov	r3, r1
   1876e:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
   18770:	2300      	movs	r3, #0
   18772:	73fb      	strb	r3, [r7, #15]
   18774:	7bfb      	ldrb	r3, [r7, #15]
   18776:	2b02      	cmp	r3, #2
   18778:	dc15      	bgt.n	187a6 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
   1877a:	7bfb      	ldrb	r3, [r7, #15]
   1877c:	f1c3 0302 	rsb	r3, r3, #2
   18780:	78f9      	ldrb	r1, [r7, #3]
   18782:	7bfa      	ldrb	r2, [r7, #15]
   18784:	2020      	movs	r0, #32
   18786:	fa40 f202 	asr.w	r2, r0, r2
   1878a:	400a      	ands	r2, r1
   1878c:	2a00      	cmp	r2, #0
   1878e:	bfcc      	ite	gt
   18790:	2201      	movgt	r2, #1
   18792:	2200      	movle	r2, #0
   18794:	b2d1      	uxtb	r1, r2
   18796:	687a      	ldr	r2, [r7, #4]
   18798:	4413      	add	r3, r2
   1879a:	460a      	mov	r2, r1
   1879c:	75da      	strb	r2, [r3, #23]
	for (uint8_t ii = 0; ii < 3; ii++)
   1879e:	7bfb      	ldrb	r3, [r7, #15]
   187a0:	3301      	adds	r3, #1
   187a2:	73fb      	strb	r3, [r7, #15]
   187a4:	e7e6      	b.n	18774 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
   187a6:	bf00      	nop
   187a8:	3714      	adds	r7, #20
   187aa:	46bd      	mov	sp, r7
   187ac:	bc80      	pop	{r7}
   187ae:	4770      	bx	lr

000187b0 <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
   187b0:	b580      	push	{r7, lr}
   187b2:	b084      	sub	sp, #16
   187b4:	af00      	add	r7, sp, #0
   187b6:	60f8      	str	r0, [r7, #12]
   187b8:	60b9      	str	r1, [r7, #8]
   187ba:	4613      	mov	r3, r2
   187bc:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
   187be:	79fb      	ldrb	r3, [r7, #7]
   187c0:	4619      	mov	r1, r3
   187c2:	68b8      	ldr	r0, [r7, #8]
   187c4:	4b0d      	ldr	r3, [pc, #52]	; (187fc <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
   187c6:	4798      	blx	r3
	FillLimitSwitch(v);
   187c8:	79fb      	ldrb	r3, [r7, #7]
   187ca:	4619      	mov	r1, r3
   187cc:	68b8      	ldr	r0, [r7, #8]
   187ce:	4b0c      	ldr	r3, [pc, #48]	; (18800 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
   187d0:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
   187d2:	79fb      	ldrb	r3, [r7, #7]
   187d4:	f003 0301 	and.w	r3, r3, #1
   187d8:	2b00      	cmp	r3, #0
   187da:	bfcc      	ite	gt
   187dc:	2301      	movgt	r3, #1
   187de:	2300      	movle	r3, #0
   187e0:	b2da      	uxtb	r2, r3
   187e2:	68bb      	ldr	r3, [r7, #8]
   187e4:	769a      	strb	r2, [r3, #26]
	return controlStatus;
   187e6:	68fa      	ldr	r2, [r7, #12]
   187e8:	68bb      	ldr	r3, [r7, #8]
   187ea:	3315      	adds	r3, #21
   187ec:	6819      	ldr	r1, [r3, #0]
   187ee:	6011      	str	r1, [r2, #0]
   187f0:	889b      	ldrh	r3, [r3, #4]
   187f2:	8093      	strh	r3, [r2, #4]
}
   187f4:	68f8      	ldr	r0, [r7, #12]
   187f6:	3710      	adds	r7, #16
   187f8:	46bd      	mov	sp, r7
   187fa:	bd80      	pop	{r7, pc}
   187fc:	0001871d 	.word	0x0001871d
   18800:	00018765 	.word	0x00018765

00018804 <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
   18804:	b480      	push	{r7}
   18806:	b085      	sub	sp, #20
   18808:	af00      	add	r7, sp, #0
   1880a:	60f8      	str	r0, [r7, #12]
   1880c:	60b9      	str	r1, [r7, #8]
   1880e:	4613      	mov	r3, r2
   18810:	71fb      	strb	r3, [r7, #7]
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
	} 
	else
	{
		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
   18812:	79fb      	ldrb	r3, [r7, #7]
   18814:	f003 0380 	and.w	r3, r3, #128	; 0x80
   18818:	2b00      	cmp	r3, #0
   1881a:	bfcc      	ite	gt
   1881c:	2301      	movgt	r3, #1
   1881e:	2300      	movle	r3, #0
   18820:	b2da      	uxtb	r2, r3
   18822:	68bb      	ldr	r3, [r7, #8]
   18824:	76da      	strb	r2, [r3, #27]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
   18826:	79fb      	ldrb	r3, [r7, #7]
   18828:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1882c:	2b00      	cmp	r3, #0
   1882e:	bfcc      	ite	gt
   18830:	2301      	movgt	r3, #1
   18832:	2300      	movle	r3, #0
   18834:	b2da      	uxtb	r2, r3
   18836:	68bb      	ldr	r3, [r7, #8]
   18838:	771a      	strb	r2, [r3, #28]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
   1883a:	79fb      	ldrb	r3, [r7, #7]
   1883c:	f003 0320 	and.w	r3, r3, #32
   18840:	2b00      	cmp	r3, #0
   18842:	bfcc      	ite	gt
   18844:	2301      	movgt	r3, #1
   18846:	2300      	movle	r3, #0
   18848:	b2da      	uxtb	r2, r3
   1884a:	68bb      	ldr	r3, [r7, #8]
   1884c:	779a      	strb	r2, [r3, #30]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
   1884e:	79fb      	ldrb	r3, [r7, #7]
   18850:	f003 0310 	and.w	r3, r3, #16
   18854:	2b00      	cmp	r3, #0
   18856:	bfcc      	ite	gt
   18858:	2301      	movgt	r3, #1
   1885a:	2300      	movle	r3, #0
   1885c:	b2da      	uxtb	r2, r3
   1885e:	68bb      	ldr	r3, [r7, #8]
   18860:	775a      	strb	r2, [r3, #29]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
   18862:	79fb      	ldrb	r3, [r7, #7]
   18864:	f003 0308 	and.w	r3, r3, #8
   18868:	2b00      	cmp	r3, #0
   1886a:	bfcc      	ite	gt
   1886c:	2301      	movgt	r3, #1
   1886e:	2300      	movle	r3, #0
   18870:	b2da      	uxtb	r2, r3
   18872:	68bb      	ldr	r3, [r7, #8]
   18874:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
   18876:	79fb      	ldrb	r3, [r7, #7]
   18878:	f003 0304 	and.w	r3, r3, #4
   1887c:	2b00      	cmp	r3, #0
   1887e:	bfcc      	ite	gt
   18880:	2301      	movgt	r3, #1
   18882:	2300      	movle	r3, #0
   18884:	b2da      	uxtb	r2, r3
   18886:	68bb      	ldr	r3, [r7, #8]
   18888:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
   1888c:	79fb      	ldrb	r3, [r7, #7]
   1888e:	f003 0302 	and.w	r3, r3, #2
   18892:	2b00      	cmp	r3, #0
   18894:	bfcc      	ite	gt
   18896:	2301      	movgt	r3, #1
   18898:	2300      	movle	r3, #0
   1889a:	b2da      	uxtb	r2, r3
   1889c:	68bb      	ldr	r3, [r7, #8]
   1889e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
   188a2:	79fb      	ldrb	r3, [r7, #7]
   188a4:	f003 0301 	and.w	r3, r3, #1
   188a8:	2b00      	cmp	r3, #0
   188aa:	bfcc      	ite	gt
   188ac:	2301      	movgt	r3, #1
   188ae:	2300      	movle	r3, #0
   188b0:	b2da      	uxtb	r2, r3
   188b2:	68bb      	ldr	r3, [r7, #8]
   188b4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	return controlOutputs;
   188b8:	68fa      	ldr	r2, [r7, #12]
   188ba:	68bb      	ldr	r3, [r7, #8]
   188bc:	331b      	adds	r3, #27
   188be:	6819      	ldr	r1, [r3, #0]
   188c0:	685b      	ldr	r3, [r3, #4]
   188c2:	6011      	str	r1, [r2, #0]
   188c4:	6053      	str	r3, [r2, #4]
   188c6:	68f8      	ldr	r0, [r7, #12]
   188c8:	3714      	adds	r7, #20
   188ca:	46bd      	mov	sp, r7
   188cc:	bc80      	pop	{r7}
   188ce:	4770      	bx	lr

000188d0 <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
   188d0:	b480      	push	{r7}
   188d2:	b083      	sub	sp, #12
   188d4:	af00      	add	r7, sp, #0
   188d6:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
   188d8:	4b04      	ldr	r3, [pc, #16]	; (188ec <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
   188da:	681b      	ldr	r3, [r3, #0]
   188dc:	2201      	movs	r2, #1
   188de:	709a      	strb	r2, [r3, #2]
	asm("nop");
   188e0:	bf00      	nop
}
   188e2:	bf00      	nop
   188e4:	370c      	adds	r7, #12
   188e6:	46bd      	mov	sp, r7
   188e8:	bc80      	pop	{r7}
   188ea:	4770      	bx	lr
   188ec:	2000dbc4 	.word	0x2000dbc4

000188f0 <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   188f0:	b480      	push	{r7}
   188f2:	b083      	sub	sp, #12
   188f4:	af00      	add	r7, sp, #0
   188f6:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   188f8:	687b      	ldr	r3, [r7, #4]
   188fa:	4618      	mov	r0, r3
   188fc:	370c      	adds	r7, #12
   188fe:	46bd      	mov	sp, r7
   18900:	bc80      	pop	{r7}
   18902:	4770      	bx	lr

00018904 <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   18904:	b480      	push	{r7}
   18906:	b083      	sub	sp, #12
   18908:	af00      	add	r7, sp, #0
   1890a:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   1890c:	687b      	ldr	r3, [r7, #4]
   1890e:	4618      	mov	r0, r3
   18910:	370c      	adds	r7, #12
   18912:	46bd      	mov	sp, r7
   18914:	bc80      	pop	{r7}
   18916:	4770      	bx	lr

00018918 <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
   18918:	b580      	push	{r7, lr}
   1891a:	b084      	sub	sp, #16
   1891c:	af00      	add	r7, sp, #0
   1891e:	60f8      	str	r0, [r7, #12]
   18920:	60b9      	str	r1, [r7, #8]
   18922:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
   18924:	4a1c      	ldr	r2, [pc, #112]	; (18998 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
   18926:	68fb      	ldr	r3, [r7, #12]
   18928:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
   1892a:	68fb      	ldr	r3, [r7, #12]
   1892c:	68ba      	ldr	r2, [r7, #8]
   1892e:	659a      	str	r2, [r3, #88]	; 0x58
	spiLT=spiLite;
   18930:	68fb      	ldr	r3, [r7, #12]
   18932:	687a      	ldr	r2, [r7, #4]
   18934:	621a      	str	r2, [r3, #32]
	rx=spiLT->rxLiteBuffer;
   18936:	68fb      	ldr	r3, [r7, #12]
   18938:	6a1b      	ldr	r3, [r3, #32]
   1893a:	68da      	ldr	r2, [r3, #12]
   1893c:	68fb      	ldr	r3, [r7, #12]
   1893e:	62da      	str	r2, [r3, #44]	; 0x2c
	tx=spiLT->txLiteBuffer;
   18940:	68fb      	ldr	r3, [r7, #12]
   18942:	6a1b      	ldr	r3, [r3, #32]
   18944:	689a      	ldr	r2, [r3, #8]
   18946:	68fb      	ldr	r3, [r7, #12]
   18948:	629a      	str	r2, [r3, #40]	; 0x28
	auxTimer=&hvacTimer;
   1894a:	68fb      	ldr	r3, [r7, #12]
   1894c:	4a13      	ldr	r2, [pc, #76]	; (1899c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
   1894e:	631a      	str	r2, [r3, #48]	; 0x30
	activeChannels[0]=4;
   18950:	68fb      	ldr	r3, [r7, #12]
   18952:	2204      	movs	r2, #4
   18954:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=9;
   18956:	68fb      	ldr	r3, [r7, #12]
   18958:	2209      	movs	r2, #9
   1895a:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=14;
   1895c:	68fb      	ldr	r3, [r7, #12]
   1895e:	220e      	movs	r2, #14
   18960:	715a      	strb	r2, [r3, #5]
	activeChannels[3]=19;
   18962:	68fb      	ldr	r3, [r7, #12]
   18964:	2213      	movs	r2, #19
   18966:	719a      	strb	r2, [r3, #6]
	delay_ms(200);
   18968:	20c8      	movs	r0, #200	; 0xc8
   1896a:	4b0d      	ldr	r3, [pc, #52]	; (189a0 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
   1896c:	4798      	blx	r3
	temperatureTimer.Init();
   1896e:	480d      	ldr	r0, [pc, #52]	; (189a4 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
   18970:	4b0d      	ldr	r3, [pc, #52]	; (189a8 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
   18972:	4798      	blx	r3
	configure_channels();
   18974:	68f8      	ldr	r0, [r7, #12]
   18976:	4b0d      	ldr	r3, [pc, #52]	; (189ac <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
   18978:	4798      	blx	r3
	configure_global_parameters();
   1897a:	68f8      	ldr	r0, [r7, #12]
   1897c:	4b0c      	ldr	r3, [pc, #48]	; (189b0 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x98>)
   1897e:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
   18980:	68fb      	ldr	r3, [r7, #12]
   18982:	2201      	movs	r2, #1
   18984:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
   18986:	68f8      	ldr	r0, [r7, #12]
   18988:	4b0a      	ldr	r3, [pc, #40]	; (189b4 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x9c>)
   1898a:	4798      	blx	r3
   1898c:	4603      	mov	r3, r0
}
   1898e:	4618      	mov	r0, r3
   18990:	3710      	adds	r7, #16
   18992:	46bd      	mov	sp, r7
   18994:	bd80      	pop	{r7, pc}
   18996:	bf00      	nop
   18998:	2000dbc4 	.word	0x2000dbc4
   1899c:	2000db04 	.word	0x2000db04
   189a0:	00003681 	.word	0x00003681
   189a4:	2000dac4 	.word	0x2000dac4
   189a8:	0001052d 	.word	0x0001052d
   189ac:	00018dc1 	.word	0x00018dc1
   189b0:	00018e79 	.word	0x00018e79
   189b4:	00018eb1 	.word	0x00018eb1

000189b8 <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
   189b8:	b590      	push	{r4, r7, lr}
   189ba:	b089      	sub	sp, #36	; 0x24
   189bc:	af02      	add	r7, sp, #8
   189be:	60f8      	str	r0, [r7, #12]
   189c0:	60b9      	str	r1, [r7, #8]
   189c2:	603b      	str	r3, [r7, #0]
   189c4:	4613      	mov	r3, r2
   189c6:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
   189c8:	79fb      	ldrb	r3, [r7, #7]
   189ca:	461a      	mov	r2, r3
   189cc:	f44f 7100 	mov.w	r1, #512	; 0x200
   189d0:	68f8      	ldr	r0, [r7, #12]
   189d2:	4b0b      	ldr	r3, [pc, #44]	; (18a00 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
   189d4:	4798      	blx	r3
   189d6:	4603      	mov	r3, r0
   189d8:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
   189da:	8afa      	ldrh	r2, [r7, #22]
   189dc:	683b      	ldr	r3, [r7, #0]
   189de:	9300      	str	r3, [sp, #0]
   189e0:	4613      	mov	r3, r2
   189e2:	2202      	movs	r2, #2
   189e4:	68b9      	ldr	r1, [r7, #8]
   189e6:	68f8      	ldr	r0, [r7, #12]
   189e8:	4c06      	ldr	r4, [pc, #24]	; (18a04 <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
   189ea:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
   189ec:	8afb      	ldrh	r3, [r7, #22]
   189ee:	79fa      	ldrb	r2, [r7, #7]
   189f0:	68b9      	ldr	r1, [r7, #8]
   189f2:	68f8      	ldr	r0, [r7, #12]
   189f4:	4c04      	ldr	r4, [pc, #16]	; (18a08 <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
   189f6:	47a0      	blx	r4
}
   189f8:	bf00      	nop
   189fa:	371c      	adds	r7, #28
   189fc:	46bd      	mov	sp, r7
   189fe:	bd90      	pop	{r4, r7, pc}
   18a00:	00018d95 	.word	0x00018d95
   18a04:	00018c55 	.word	0x00018c55
   18a08:	00018a59 	.word	0x00018a59

00018a0c <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
   18a0c:	b590      	push	{r4, r7, lr}
   18a0e:	b087      	sub	sp, #28
   18a10:	af02      	add	r7, sp, #8
   18a12:	6078      	str	r0, [r7, #4]
   18a14:	460b      	mov	r3, r1
   18a16:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
   18a18:	78fb      	ldrb	r3, [r7, #3]
   18a1a:	687a      	ldr	r2, [r7, #4]
   18a1c:	4413      	add	r3, r2
   18a1e:	78db      	ldrb	r3, [r3, #3]
   18a20:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
   18a22:	687b      	ldr	r3, [r7, #4]
   18a24:	2200      	movs	r2, #0
   18a26:	705a      	strb	r2, [r3, #1]
	ready=false;
   18a28:	687b      	ldr	r3, [r7, #4]
   18a2a:	2200      	movs	r2, #0
   18a2c:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
   18a2e:	687b      	ldr	r3, [r7, #4]
   18a30:	6d99      	ldr	r1, [r3, #88]	; 0x58
   18a32:	7bfb      	ldrb	r3, [r7, #15]
   18a34:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18a38:	b2db      	uxtb	r3, r3
   18a3a:	9300      	str	r3, [sp, #0]
   18a3c:	2300      	movs	r3, #0
   18a3e:	2202      	movs	r2, #2
   18a40:	6878      	ldr	r0, [r7, #4]
   18a42:	4c04      	ldr	r4, [pc, #16]	; (18a54 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
   18a44:	47a0      	blx	r4
	channelOnProcess=channel_number;
   18a46:	687b      	ldr	r3, [r7, #4]
   18a48:	7bfa      	ldrb	r2, [r7, #15]
   18a4a:	721a      	strb	r2, [r3, #8]
	//wait_for_process_to_finish(chip_select);
}
   18a4c:	bf00      	nop
   18a4e:	3714      	adds	r7, #20
   18a50:	46bd      	mov	sp, r7
   18a52:	bd90      	pop	{r4, r7, pc}
   18a54:	00018d25 	.word	0x00018d25

00018a58 <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
   18a58:	b590      	push	{r4, r7, lr}
   18a5a:	b089      	sub	sp, #36	; 0x24
   18a5c:	af02      	add	r7, sp, #8
   18a5e:	60f8      	str	r0, [r7, #12]
   18a60:	60b9      	str	r1, [r7, #8]
   18a62:	4611      	mov	r1, r2
   18a64:	461a      	mov	r2, r3
   18a66:	460b      	mov	r3, r1
   18a68:	71fb      	strb	r3, [r7, #7]
   18a6a:	4613      	mov	r3, r2
   18a6c:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
   18a6e:	88ba      	ldrh	r2, [r7, #4]
   18a70:	2300      	movs	r3, #0
   18a72:	9300      	str	r3, [sp, #0]
   18a74:	4613      	mov	r3, r2
   18a76:	2203      	movs	r2, #3
   18a78:	68b9      	ldr	r1, [r7, #8]
   18a7a:	68f8      	ldr	r0, [r7, #12]
   18a7c:	4c03      	ldr	r4, [pc, #12]	; (18a8c <_ZN13LTC2983_Class20print_config_channelEmht+0x34>)
   18a7e:	47a0      	blx	r4
   18a80:	6178      	str	r0, [r7, #20]
	// 24 LSB's are conversion result
	
// 	usb<<"register value: ";
// 	usb.println(raw_data,HEX);
	
}
   18a82:	bf00      	nop
   18a84:	371c      	adds	r7, #28
   18a86:	46bd      	mov	sp, r7
   18a88:	bd90      	pop	{r4, r7, pc}
   18a8a:	bf00      	nop
   18a8c:	00018c55 	.word	0x00018c55

00018a90 <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
   18a90:	b590      	push	{r4, r7, lr}
   18a92:	b085      	sub	sp, #20
   18a94:	af02      	add	r7, sp, #8
   18a96:	6078      	str	r0, [r7, #4]
   18a98:	460b      	mov	r3, r1
   18a9a:	70fb      	strb	r3, [r7, #3]
   18a9c:	4613      	mov	r3, r2
   18a9e:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
   18aa0:	78fb      	ldrb	r3, [r7, #3]
   18aa2:	461a      	mov	r2, r3
   18aa4:	2110      	movs	r1, #16
   18aa6:	6878      	ldr	r0, [r7, #4]
   18aa8:	4b17      	ldr	r3, [pc, #92]	; (18b08 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
   18aaa:	4798      	blx	r3
   18aac:	4603      	mov	r3, r0
   18aae:	461a      	mov	r2, r3
   18ab0:	687b      	ldr	r3, [r7, #4]
   18ab2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
   18ab6:	687b      	ldr	r3, [r7, #4]
   18ab8:	6d99      	ldr	r1, [r3, #88]	; 0x58
   18aba:	687b      	ldr	r3, [r7, #4]
   18abc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   18ac0:	2300      	movs	r3, #0
   18ac2:	9300      	str	r3, [sp, #0]
   18ac4:	4613      	mov	r3, r2
   18ac6:	2203      	movs	r2, #3
   18ac8:	6878      	ldr	r0, [r7, #4]
   18aca:	4c10      	ldr	r4, [pc, #64]	; (18b0c <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
   18acc:	47a0      	blx	r4
   18ace:	4602      	mov	r2, r0
   18ad0:	687b      	ldr	r3, [r7, #4]
   18ad2:	655a      	str	r2, [r3, #84]	; 0x54


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
   18ad4:	687b      	ldr	r3, [r7, #4]
   18ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   18ad8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   18adc:	687b      	ldr	r3, [r7, #4]
   18ade:	651a      	str	r2, [r3, #80]	; 0x50
	ConvertResult(raw_conversion_result, channel_number, channel_output);
   18ae0:	687b      	ldr	r3, [r7, #4]
   18ae2:	6d19      	ldr	r1, [r3, #80]	; 0x50
   18ae4:	78bb      	ldrb	r3, [r7, #2]
   18ae6:	78fa      	ldrb	r2, [r7, #3]
   18ae8:	6878      	ldr	r0, [r7, #4]
   18aea:	4c09      	ldr	r4, [pc, #36]	; (18b10 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
   18aec:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
   18aee:	687b      	ldr	r3, [r7, #4]
   18af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   18af2:	0e1b      	lsrs	r3, r3, #24
   18af4:	b2da      	uxtb	r2, r3
   18af6:	687b      	ldr	r3, [r7, #4]
   18af8:	71da      	strb	r2, [r3, #7]
	return scaled_result;
   18afa:	687b      	ldr	r3, [r7, #4]
   18afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
   18afe:	4618      	mov	r0, r3
   18b00:	370c      	adds	r7, #12
   18b02:	46bd      	mov	sp, r7
   18b04:	bd90      	pop	{r4, r7, pc}
   18b06:	bf00      	nop
   18b08:	00018d95 	.word	0x00018d95
   18b0c:	00018c55 	.word	0x00018c55
   18b10:	00018b69 	.word	0x00018b69

00018b14 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
   18b14:	b580      	push	{r7, lr}
   18b16:	b082      	sub	sp, #8
   18b18:	af00      	add	r7, sp, #0
   18b1a:	6078      	str	r0, [r7, #4]
   18b1c:	460b      	mov	r3, r1
   18b1e:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
   18b20:	78fb      	ldrb	r3, [r7, #3]
   18b22:	687a      	ldr	r2, [r7, #4]
   18b24:	4413      	add	r3, r2
   18b26:	78db      	ldrb	r3, [r3, #3]
   18b28:	4619      	mov	r1, r3
   18b2a:	6878      	ldr	r0, [r7, #4]
   18b2c:	4b03      	ldr	r3, [pc, #12]	; (18b3c <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
   18b2e:	4798      	blx	r3
   18b30:	4603      	mov	r3, r0
}
   18b32:	4618      	mov	r0, r3
   18b34:	3708      	adds	r7, #8
   18b36:	46bd      	mov	sp, r7
   18b38:	bd80      	pop	{r7, pc}
   18b3a:	bf00      	nop
   18b3c:	00018b41 	.word	0x00018b41

00018b40 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
   18b40:	b580      	push	{r7, lr}
   18b42:	b082      	sub	sp, #8
   18b44:	af00      	add	r7, sp, #0
   18b46:	6078      	str	r0, [r7, #4]
   18b48:	460b      	mov	r3, r1
   18b4a:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
   18b4c:	78fb      	ldrb	r3, [r7, #3]
   18b4e:	2202      	movs	r2, #2
   18b50:	4619      	mov	r1, r3
   18b52:	6878      	ldr	r0, [r7, #4]
   18b54:	4b03      	ldr	r3, [pc, #12]	; (18b64 <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
   18b56:	4798      	blx	r3
   18b58:	4603      	mov	r3, r0
}
   18b5a:	4618      	mov	r0, r3
   18b5c:	3708      	adds	r7, #8
   18b5e:	46bd      	mov	sp, r7
   18b60:	bd80      	pop	{r7, pc}
   18b62:	bf00      	nop
   18b64:	00018a91 	.word	0x00018a91

00018b68 <_ZN13LTC2983_Class13ConvertResultEmhh>:
// 		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
   18b68:	b580      	push	{r7, lr}
   18b6a:	b084      	sub	sp, #16
   18b6c:	af00      	add	r7, sp, #0
   18b6e:	60f8      	str	r0, [r7, #12]
   18b70:	60b9      	str	r1, [r7, #8]
   18b72:	4611      	mov	r1, r2
   18b74:	461a      	mov	r2, r3
   18b76:	460b      	mov	r3, r1
   18b78:	71fb      	strb	r3, [r7, #7]
   18b7a:	4613      	mov	r3, r2
   18b7c:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
   18b7e:	68ba      	ldr	r2, [r7, #8]
   18b80:	68fb      	ldr	r3, [r7, #12]
   18b82:	661a      	str	r2, [r3, #96]	; 0x60
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
   18b84:	68fb      	ldr	r3, [r7, #12]
   18b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   18b88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   18b8c:	2b00      	cmp	r3, #0
   18b8e:	d006      	beq.n	18b9e <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
   18b90:	68fb      	ldr	r3, [r7, #12]
   18b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   18b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   18b98:	461a      	mov	r2, r3
   18b9a:	68fb      	ldr	r3, [r7, #12]
   18b9c:	661a      	str	r2, [r3, #96]	; 0x60

	// Translate and print result
	if (channel_output == TEMPERATURE)
   18b9e:	79bb      	ldrb	r3, [r7, #6]
   18ba0:	2b02      	cmp	r3, #2
   18ba2:	d11d      	bne.n	18be0 <_ZN13LTC2983_Class13ConvertResultEmhh+0x78>
	{
		scaled_result= float(signed_data) / 1024;
   18ba4:	68fb      	ldr	r3, [r7, #12]
   18ba6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   18ba8:	4b18      	ldr	r3, [pc, #96]	; (18c0c <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   18baa:	4610      	mov	r0, r2
   18bac:	4798      	blx	r3
   18bae:	4602      	mov	r2, r0
   18bb0:	4b17      	ldr	r3, [pc, #92]	; (18c10 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   18bb2:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
   18bb6:	4610      	mov	r0, r2
   18bb8:	4798      	blx	r3
   18bba:	4603      	mov	r3, r0
   18bbc:	461a      	mov	r2, r3
   18bbe:	68fb      	ldr	r3, [r7, #12]
   18bc0:	65da      	str	r2, [r3, #92]	; 0x5c
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
   18bc2:	79fb      	ldrb	r3, [r7, #7]
   18bc4:	4619      	mov	r1, r3
   18bc6:	68f8      	ldr	r0, [r7, #12]
   18bc8:	4b12      	ldr	r3, [pc, #72]	; (18c14 <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
   18bca:	4798      	blx	r3
   18bcc:	4603      	mov	r3, r0
   18bce:	4618      	mov	r0, r3
   18bd0:	68fb      	ldr	r3, [r7, #12]
   18bd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   18bd4:	68f9      	ldr	r1, [r7, #12]
   18bd6:	1c83      	adds	r3, r0, #2
   18bd8:	009b      	lsls	r3, r3, #2
   18bda:	440b      	add	r3, r1
   18bdc:	605a      	str	r2, [r3, #4]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
   18bde:	e011      	b.n	18c04 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
	else if (channel_output == VOLTAGE)
   18be0:	79bb      	ldrb	r3, [r7, #6]
   18be2:	2b01      	cmp	r3, #1
   18be4:	d10e      	bne.n	18c04 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
		scaled_result = float(signed_data) / 2097152;
   18be6:	68fb      	ldr	r3, [r7, #12]
   18be8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   18bea:	4b08      	ldr	r3, [pc, #32]	; (18c0c <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   18bec:	4610      	mov	r0, r2
   18bee:	4798      	blx	r3
   18bf0:	4602      	mov	r2, r0
   18bf2:	4b07      	ldr	r3, [pc, #28]	; (18c10 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   18bf4:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
   18bf8:	4610      	mov	r0, r2
   18bfa:	4798      	blx	r3
   18bfc:	4603      	mov	r3, r0
   18bfe:	461a      	mov	r2, r3
   18c00:	68fb      	ldr	r3, [r7, #12]
   18c02:	65da      	str	r2, [r3, #92]	; 0x5c
}
   18c04:	bf00      	nop
   18c06:	3710      	adds	r7, #16
   18c08:	46bd      	mov	sp, r7
   18c0a:	bd80      	pop	{r7, pc}
   18c0c:	0001a791 	.word	0x0001a791
   18c10:	0001a9a1 	.word	0x0001a9a1
   18c14:	00018c19 	.word	0x00018c19

00018c18 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
   18c18:	b480      	push	{r7}
   18c1a:	b085      	sub	sp, #20
   18c1c:	af00      	add	r7, sp, #0
   18c1e:	6078      	str	r0, [r7, #4]
   18c20:	460b      	mov	r3, r1
   18c22:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   18c24:	2300      	movs	r3, #0
   18c26:	73fb      	strb	r3, [r7, #15]
   18c28:	7bfb      	ldrb	r3, [r7, #15]
   18c2a:	2b03      	cmp	r3, #3
   18c2c:	dc0c      	bgt.n	18c48 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
   18c2e:	7bfb      	ldrb	r3, [r7, #15]
   18c30:	687a      	ldr	r2, [r7, #4]
   18c32:	4413      	add	r3, r2
   18c34:	78db      	ldrb	r3, [r3, #3]
   18c36:	78fa      	ldrb	r2, [r7, #3]
   18c38:	429a      	cmp	r2, r3
   18c3a:	d101      	bne.n	18c40 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
   18c3c:	7bfb      	ldrb	r3, [r7, #15]
   18c3e:	e004      	b.n	18c4a <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   18c40:	7bfb      	ldrb	r3, [r7, #15]
   18c42:	3301      	adds	r3, #1
   18c44:	73fb      	strb	r3, [r7, #15]
   18c46:	e7ef      	b.n	18c28 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
   18c48:	2300      	movs	r3, #0
}
   18c4a:	4618      	mov	r0, r3
   18c4c:	3714      	adds	r7, #20
   18c4e:	46bd      	mov	sp, r7
   18c50:	bc80      	pop	{r7}
   18c52:	4770      	bx	lr

00018c54 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   18c54:	b590      	push	{r4, r7, lr}
   18c56:	b089      	sub	sp, #36	; 0x24
   18c58:	af02      	add	r7, sp, #8
   18c5a:	60f8      	str	r0, [r7, #12]
   18c5c:	60b9      	str	r1, [r7, #8]
   18c5e:	4611      	mov	r1, r2
   18c60:	461a      	mov	r2, r3
   18c62:	460b      	mov	r3, r1
   18c64:	71fb      	strb	r3, [r7, #7]
   18c66:	4613      	mov	r3, r2
   18c68:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   18c6a:	2300      	movs	r3, #0
   18c6c:	75fb      	strb	r3, [r7, #23]
   18c6e:	7dfb      	ldrb	r3, [r7, #23]
   18c70:	2b06      	cmp	r3, #6
   18c72:	dc09      	bgt.n	18c88 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
   18c74:	68fb      	ldr	r3, [r7, #12]
   18c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18c78:	7dfb      	ldrb	r3, [r7, #23]
   18c7a:	4413      	add	r3, r2
   18c7c:	2200      	movs	r2, #0
   18c7e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   18c80:	7dfb      	ldrb	r3, [r7, #23]
   18c82:	3301      	adds	r3, #1
   18c84:	75fb      	strb	r3, [r7, #23]
   18c86:	e7f2      	b.n	18c6e <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
   18c88:	68fb      	ldr	r3, [r7, #12]
   18c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18c8c:	79fa      	ldrb	r2, [r7, #7]
   18c8e:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
   18c90:	68fb      	ldr	r3, [r7, #12]
   18c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18c94:	3301      	adds	r3, #1
   18c96:	88ba      	ldrh	r2, [r7, #4]
   18c98:	1212      	asrs	r2, r2, #8
   18c9a:	b2d2      	uxtb	r2, r2
   18c9c:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
   18c9e:	68fb      	ldr	r3, [r7, #12]
   18ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18ca2:	3302      	adds	r3, #2
   18ca4:	88ba      	ldrh	r2, [r7, #4]
   18ca6:	b2d2      	uxtb	r2, r2
   18ca8:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
   18caa:	68fb      	ldr	r3, [r7, #12]
   18cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18cae:	3303      	adds	r3, #3
   18cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18cb2:	0e12      	lsrs	r2, r2, #24
   18cb4:	b2d2      	uxtb	r2, r2
   18cb6:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
   18cb8:	68fb      	ldr	r3, [r7, #12]
   18cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18cbc:	3304      	adds	r3, #4
   18cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18cc0:	0c12      	lsrs	r2, r2, #16
   18cc2:	b2d2      	uxtb	r2, r2
   18cc4:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
   18cc6:	68fb      	ldr	r3, [r7, #12]
   18cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18cca:	3305      	adds	r3, #5
   18ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18cce:	0a12      	lsrs	r2, r2, #8
   18cd0:	b2d2      	uxtb	r2, r2
   18cd2:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
   18cd4:	68fb      	ldr	r3, [r7, #12]
   18cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18cd8:	3306      	adds	r3, #6
   18cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18cdc:	b2d2      	uxtb	r2, r2
   18cde:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
   18ce0:	68fb      	ldr	r3, [r7, #12]
   18ce2:	6a18      	ldr	r0, [r3, #32]
   18ce4:	68fb      	ldr	r3, [r7, #12]
   18ce6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18ce8:	f107 0110 	add.w	r1, r7, #16
   18cec:	2307      	movs	r3, #7
   18cee:	9300      	str	r3, [sp, #0]
   18cf0:	460b      	mov	r3, r1
   18cf2:	68b9      	ldr	r1, [r7, #8]
   18cf4:	4c0a      	ldr	r4, [pc, #40]	; (18d20 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
   18cf6:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
   18cf8:	7c3b      	ldrb	r3, [r7, #16]
   18cfa:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
   18cfc:	7c7b      	ldrb	r3, [r7, #17]
   18cfe:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
   18d00:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
   18d02:	7cbb      	ldrb	r3, [r7, #18]
   18d04:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
   18d06:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
   18d08:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
   18d0a:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
   18d0c:	68fb      	ldr	r3, [r7, #12]
   18d0e:	625a      	str	r2, [r3, #36]	; 0x24
	asm("nop");
   18d10:	bf00      	nop
	return output_data;
   18d12:	68fb      	ldr	r3, [r7, #12]
   18d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   18d16:	4618      	mov	r0, r3
   18d18:	371c      	adds	r7, #28
   18d1a:	46bd      	mov	sp, r7
   18d1c:	bd90      	pop	{r4, r7, pc}
   18d1e:	bf00      	nop
   18d20:	00019249 	.word	0x00019249

00018d24 <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
   18d24:	b590      	push	{r4, r7, lr}
   18d26:	b087      	sub	sp, #28
   18d28:	af02      	add	r7, sp, #8
   18d2a:	60f8      	str	r0, [r7, #12]
   18d2c:	60b9      	str	r1, [r7, #8]
   18d2e:	4611      	mov	r1, r2
   18d30:	461a      	mov	r2, r3
   18d32:	460b      	mov	r3, r1
   18d34:	71fb      	strb	r3, [r7, #7]
   18d36:	4613      	mov	r3, r2
   18d38:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
   18d3a:	68fb      	ldr	r3, [r7, #12]
   18d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18d3e:	79fa      	ldrb	r2, [r7, #7]
   18d40:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
   18d42:	68fb      	ldr	r3, [r7, #12]
   18d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18d46:	3301      	adds	r3, #1
   18d48:	88ba      	ldrh	r2, [r7, #4]
   18d4a:	1212      	asrs	r2, r2, #8
   18d4c:	b2d2      	uxtb	r2, r2
   18d4e:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
   18d50:	68fb      	ldr	r3, [r7, #12]
   18d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18d54:	3302      	adds	r3, #2
   18d56:	88ba      	ldrh	r2, [r7, #4]
   18d58:	b2d2      	uxtb	r2, r2
   18d5a:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
   18d5c:	68fb      	ldr	r3, [r7, #12]
   18d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18d60:	3303      	adds	r3, #3
   18d62:	f897 2020 	ldrb.w	r2, [r7, #32]
   18d66:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
   18d68:	68fb      	ldr	r3, [r7, #12]
   18d6a:	6a18      	ldr	r0, [r3, #32]
   18d6c:	68fb      	ldr	r3, [r7, #12]
   18d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18d70:	68fb      	ldr	r3, [r7, #12]
   18d72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   18d74:	2304      	movs	r3, #4
   18d76:	9300      	str	r3, [sp, #0]
   18d78:	460b      	mov	r3, r1
   18d7a:	68b9      	ldr	r1, [r7, #8]
   18d7c:	4c04      	ldr	r4, [pc, #16]	; (18d90 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
   18d7e:	47a0      	blx	r4
	return rx[0];
   18d80:	68fb      	ldr	r3, [r7, #12]
   18d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18d84:	781b      	ldrb	r3, [r3, #0]
}
   18d86:	4618      	mov	r0, r3
   18d88:	3714      	adds	r7, #20
   18d8a:	46bd      	mov	sp, r7
   18d8c:	bd90      	pop	{r4, r7, pc}
   18d8e:	bf00      	nop
   18d90:	00019249 	.word	0x00019249

00018d94 <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   18d94:	b480      	push	{r7}
   18d96:	b083      	sub	sp, #12
   18d98:	af00      	add	r7, sp, #0
   18d9a:	6078      	str	r0, [r7, #4]
   18d9c:	460b      	mov	r3, r1
   18d9e:	807b      	strh	r3, [r7, #2]
   18da0:	4613      	mov	r3, r2
   18da2:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   18da4:	787b      	ldrb	r3, [r7, #1]
   18da6:	3b01      	subs	r3, #1
   18da8:	b29b      	uxth	r3, r3
   18daa:	009b      	lsls	r3, r3, #2
   18dac:	b29a      	uxth	r2, r3
   18dae:	887b      	ldrh	r3, [r7, #2]
   18db0:	4413      	add	r3, r2
   18db2:	b29b      	uxth	r3, r3
}
   18db4:	4618      	mov	r0, r3
   18db6:	370c      	adds	r7, #12
   18db8:	46bd      	mov	sp, r7
   18dba:	bc80      	pop	{r7}
   18dbc:	4770      	bx	lr
	...

00018dc0 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
   18dc0:	b590      	push	{r4, r7, lr}
   18dc2:	b085      	sub	sp, #20
   18dc4:	af00      	add	r7, sp, #0
   18dc6:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	
	  // ----- Channel 2: Assign Sense Resistor -----
	  channel_assignment_data =
   18dc8:	4b25      	ldr	r3, [pc, #148]	; (18e60 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   18dca:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 2, channel_assignment_data);
   18dcc:	687b      	ldr	r3, [r7, #4]
   18dce:	6d99      	ldr	r1, [r3, #88]	; 0x58
   18dd0:	68fb      	ldr	r3, [r7, #12]
   18dd2:	2202      	movs	r2, #2
   18dd4:	6878      	ldr	r0, [r7, #4]
   18dd6:	4c23      	ldr	r4, [pc, #140]	; (18e64 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   18dd8:	47a0      	blx	r4
	  // ----- Channel 4: Assign RTD PT-100 -----
	  channel_assignment_data =
   18dda:	4b23      	ldr	r3, [pc, #140]	; (18e68 <_ZN13LTC2983_Class18configure_channelsEv+0xa8>)
   18ddc:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__2 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 4, channel_assignment_data);
   18dde:	687b      	ldr	r3, [r7, #4]
   18de0:	6d99      	ldr	r1, [r3, #88]	; 0x58
   18de2:	68fb      	ldr	r3, [r7, #12]
   18de4:	2204      	movs	r2, #4
   18de6:	6878      	ldr	r0, [r7, #4]
   18de8:	4c1e      	ldr	r4, [pc, #120]	; (18e64 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   18dea:	47a0      	blx	r4
	  // ----- Channel 7: Assign Sense Resistor -----
	  channel_assignment_data =
   18dec:	4b1c      	ldr	r3, [pc, #112]	; (18e60 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   18dee:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 7, channel_assignment_data);
   18df0:	687b      	ldr	r3, [r7, #4]
   18df2:	6d99      	ldr	r1, [r3, #88]	; 0x58
   18df4:	68fb      	ldr	r3, [r7, #12]
   18df6:	2207      	movs	r2, #7
   18df8:	6878      	ldr	r0, [r7, #4]
   18dfa:	4c1a      	ldr	r4, [pc, #104]	; (18e64 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   18dfc:	47a0      	blx	r4
	  // ----- Channel 9: Assign RTD PT-100 -----
	  channel_assignment_data =
   18dfe:	4b1b      	ldr	r3, [pc, #108]	; (18e6c <_ZN13LTC2983_Class18configure_channelsEv+0xac>)
   18e00:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__7 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 9, channel_assignment_data);
   18e02:	687b      	ldr	r3, [r7, #4]
   18e04:	6d99      	ldr	r1, [r3, #88]	; 0x58
   18e06:	68fb      	ldr	r3, [r7, #12]
   18e08:	2209      	movs	r2, #9
   18e0a:	6878      	ldr	r0, [r7, #4]
   18e0c:	4c15      	ldr	r4, [pc, #84]	; (18e64 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   18e0e:	47a0      	blx	r4
	  // ----- Channel 12: Assign Sense Resistor -----
	  channel_assignment_data =
   18e10:	4b13      	ldr	r3, [pc, #76]	; (18e60 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   18e12:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 12, channel_assignment_data);
   18e14:	687b      	ldr	r3, [r7, #4]
   18e16:	6d99      	ldr	r1, [r3, #88]	; 0x58
   18e18:	68fb      	ldr	r3, [r7, #12]
   18e1a:	220c      	movs	r2, #12
   18e1c:	6878      	ldr	r0, [r7, #4]
   18e1e:	4c11      	ldr	r4, [pc, #68]	; (18e64 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   18e20:	47a0      	blx	r4
	  // ----- Channel 14: Assign RTD PT-100 -----
	  channel_assignment_data =
   18e22:	4b13      	ldr	r3, [pc, #76]	; (18e70 <_ZN13LTC2983_Class18configure_channelsEv+0xb0>)
   18e24:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__12 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 14, channel_assignment_data);
   18e26:	687b      	ldr	r3, [r7, #4]
   18e28:	6d99      	ldr	r1, [r3, #88]	; 0x58
   18e2a:	68fb      	ldr	r3, [r7, #12]
   18e2c:	220e      	movs	r2, #14
   18e2e:	6878      	ldr	r0, [r7, #4]
   18e30:	4c0c      	ldr	r4, [pc, #48]	; (18e64 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   18e32:	47a0      	blx	r4
	  // ----- Channel 17: Assign Sense Resistor -----
	  channel_assignment_data =
   18e34:	4b0a      	ldr	r3, [pc, #40]	; (18e60 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   18e36:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 17, channel_assignment_data);
   18e38:	687b      	ldr	r3, [r7, #4]
   18e3a:	6d99      	ldr	r1, [r3, #88]	; 0x58
   18e3c:	68fb      	ldr	r3, [r7, #12]
   18e3e:	2211      	movs	r2, #17
   18e40:	6878      	ldr	r0, [r7, #4]
   18e42:	4c08      	ldr	r4, [pc, #32]	; (18e64 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   18e44:	47a0      	blx	r4
	  // ----- Channel 19: Assign RTD PT-100 -----
	  channel_assignment_data =
   18e46:	4b0b      	ldr	r3, [pc, #44]	; (18e74 <_ZN13LTC2983_Class18configure_channelsEv+0xb4>)
   18e48:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__17 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 19, channel_assignment_data);
   18e4a:	687b      	ldr	r3, [r7, #4]
   18e4c:	6d99      	ldr	r1, [r3, #88]	; 0x58
   18e4e:	68fb      	ldr	r3, [r7, #12]
   18e50:	2213      	movs	r2, #19
   18e52:	6878      	ldr	r0, [r7, #4]
   18e54:	4c03      	ldr	r4, [pc, #12]	; (18e64 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   18e56:	47a0      	blx	r4

}
   18e58:	bf00      	nop
   18e5a:	3714      	adds	r7, #20
   18e5c:	46bd      	mov	sp, r7
   18e5e:	bd90      	pop	{r4, r7, pc}
   18e60:	e89c4000 	.word	0xe89c4000
   18e64:	000189b9 	.word	0x000189b9
   18e68:	60a91000 	.word	0x60a91000
   18e6c:	61e91000 	.word	0x61e91000
   18e70:	63291000 	.word	0x63291000
   18e74:	64691000 	.word	0x64691000

00018e78 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
   18e78:	b590      	push	{r4, r7, lr}
   18e7a:	b085      	sub	sp, #20
   18e7c:	af02      	add	r7, sp, #8
   18e7e:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
   18e80:	687b      	ldr	r3, [r7, #4]
   18e82:	6d99      	ldr	r1, [r3, #88]	; 0x58
	REJECTION__50_60_HZ);
   18e84:	2300      	movs	r3, #0
   18e86:	9300      	str	r3, [sp, #0]
   18e88:	23f0      	movs	r3, #240	; 0xf0
   18e8a:	2202      	movs	r2, #2
   18e8c:	6878      	ldr	r0, [r7, #4]
   18e8e:	4c07      	ldr	r4, [pc, #28]	; (18eac <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   18e90:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
   18e92:	687b      	ldr	r3, [r7, #4]
   18e94:	6d99      	ldr	r1, [r3, #88]	; 0x58
   18e96:	2300      	movs	r3, #0
   18e98:	9300      	str	r3, [sp, #0]
   18e9a:	23ff      	movs	r3, #255	; 0xff
   18e9c:	2202      	movs	r2, #2
   18e9e:	6878      	ldr	r0, [r7, #4]
   18ea0:	4c02      	ldr	r4, [pc, #8]	; (18eac <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   18ea2:	47a0      	blx	r4
}
   18ea4:	bf00      	nop
   18ea6:	370c      	adds	r7, #12
   18ea8:	46bd      	mov	sp, r7
   18eaa:	bd90      	pop	{r4, r7, pc}
   18eac:	00018d25 	.word	0x00018d25

00018eb0 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
   18eb0:	b580      	push	{r7, lr}
   18eb2:	b082      	sub	sp, #8
   18eb4:	af00      	add	r7, sp, #0
   18eb6:	6078      	str	r0, [r7, #4]
	process_finished = 0;
   18eb8:	687b      	ldr	r3, [r7, #4]
   18eba:	2200      	movs	r2, #0
   18ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	meassureTimeout=false;
   18ec0:	687b      	ldr	r3, [r7, #4]
   18ec2:	2200      	movs	r2, #0
   18ec4:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
   18ec6:	4a31      	ldr	r2, [pc, #196]	; (18f8c <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
   18ec8:	687b      	ldr	r3, [r7, #4]
   18eca:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   18ecc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18ed0:	492f      	ldr	r1, [pc, #188]	; (18f90 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   18ed2:	4830      	ldr	r0, [pc, #192]	; (18f94 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   18ed4:	4b30      	ldr	r3, [pc, #192]	; (18f98 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
   18ed6:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   18ed8:	687b      	ldr	r3, [r7, #4]
   18eda:	79db      	ldrb	r3, [r3, #7]
   18edc:	2b01      	cmp	r3, #1
   18ede:	d009      	beq.n	18ef4 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   18ee0:	687b      	ldr	r3, [r7, #4]
   18ee2:	789b      	ldrb	r3, [r3, #2]
   18ee4:	b2db      	uxtb	r3, r3
   18ee6:	f083 0301 	eor.w	r3, r3, #1
   18eea:	b2db      	uxtb	r3, r3
   18eec:	2b00      	cmp	r3, #0
   18eee:	d001      	beq.n	18ef4 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   18ef0:	2301      	movs	r3, #1
   18ef2:	e000      	b.n	18ef6 <_ZN13LTC2983_Class8SelfTestEv+0x46>
   18ef4:	2300      	movs	r3, #0
   18ef6:	2b00      	cmp	r3, #0
   18ef8:	d034      	beq.n	18f64 <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
   18efa:	2100      	movs	r1, #0
   18efc:	6878      	ldr	r0, [r7, #4]
   18efe:	4b27      	ldr	r3, [pc, #156]	; (18f9c <_ZN13LTC2983_Class8SelfTestEv+0xec>)
   18f00:	4798      	blx	r3
		delay_ms(1);
   18f02:	2001      	movs	r0, #1
   18f04:	4b26      	ldr	r3, [pc, #152]	; (18fa0 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   18f06:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
   18f08:	687b      	ldr	r3, [r7, #4]
   18f0a:	781b      	ldrb	r3, [r3, #0]
   18f0c:	b2db      	uxtb	r3, r3
   18f0e:	f083 0301 	eor.w	r3, r3, #1
   18f12:	b2db      	uxtb	r3, r3
   18f14:	2b00      	cmp	r3, #0
   18f16:	d009      	beq.n	18f2c <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   18f18:	687b      	ldr	r3, [r7, #4]
   18f1a:	789b      	ldrb	r3, [r3, #2]
   18f1c:	b2db      	uxtb	r3, r3
   18f1e:	f083 0301 	eor.w	r3, r3, #1
   18f22:	b2db      	uxtb	r3, r3
   18f24:	2b00      	cmp	r3, #0
   18f26:	d001      	beq.n	18f2c <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   18f28:	2301      	movs	r3, #1
   18f2a:	e000      	b.n	18f2e <_ZN13LTC2983_Class8SelfTestEv+0x7e>
   18f2c:	2300      	movs	r3, #0
   18f2e:	2b00      	cmp	r3, #0
   18f30:	d000      	beq.n	18f34 <_ZN13LTC2983_Class8SelfTestEv+0x84>
   18f32:	e7e9      	b.n	18f08 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
   18f34:	687b      	ldr	r3, [r7, #4]
   18f36:	789b      	ldrb	r3, [r3, #2]
   18f38:	b2db      	uxtb	r3, r3
   18f3a:	f083 0301 	eor.w	r3, r3, #1
   18f3e:	b2db      	uxtb	r3, r3
   18f40:	2b00      	cmp	r3, #0
   18f42:	d0c9      	beq.n	18ed8 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
   18f44:	687b      	ldr	r3, [r7, #4]
   18f46:	781b      	ldrb	r3, [r3, #0]
   18f48:	b2db      	uxtb	r3, r3
   18f4a:	2b00      	cmp	r3, #0
   18f4c:	d006      	beq.n	18f5c <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
   18f4e:	687b      	ldr	r3, [r7, #4]
   18f50:	78db      	ldrb	r3, [r3, #3]
   18f52:	4619      	mov	r1, r3
   18f54:	6878      	ldr	r0, [r7, #4]
   18f56:	4b13      	ldr	r3, [pc, #76]	; (18fa4 <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
   18f58:	4798      	blx	r3
   18f5a:	e7bd      	b.n	18ed8 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
   18f5c:	2001      	movs	r0, #1
   18f5e:	4b10      	ldr	r3, [pc, #64]	; (18fa0 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   18f60:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   18f62:	e7b9      	b.n	18ed8 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
   18f64:	490a      	ldr	r1, [pc, #40]	; (18f90 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   18f66:	480b      	ldr	r0, [pc, #44]	; (18f94 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   18f68:	4b0f      	ldr	r3, [pc, #60]	; (18fa8 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
   18f6a:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
   18f6c:	687b      	ldr	r3, [r7, #4]
   18f6e:	79db      	ldrb	r3, [r3, #7]
   18f70:	2b01      	cmp	r3, #1
   18f72:	bf0c      	ite	eq
   18f74:	2301      	moveq	r3, #1
   18f76:	2300      	movne	r3, #0
   18f78:	b2da      	uxtb	r2, r3
   18f7a:	687b      	ldr	r3, [r7, #4]
   18f7c:	771a      	strb	r2, [r3, #28]
	return	isOK;
   18f7e:	687b      	ldr	r3, [r7, #4]
   18f80:	7f1b      	ldrb	r3, [r3, #28]
	}
   18f82:	4618      	mov	r0, r3
   18f84:	3708      	adds	r7, #8
   18f86:	46bd      	mov	sp, r7
   18f88:	bd80      	pop	{r7, pc}
   18f8a:	bf00      	nop
   18f8c:	2000dbc4 	.word	0x2000dbc4
   18f90:	000188d1 	.word	0x000188d1
   18f94:	2000dac4 	.word	0x2000dac4
   18f98:	00010715 	.word	0x00010715
   18f9c:	00018a0d 	.word	0x00018a0d
   18fa0:	00003681 	.word	0x00003681
   18fa4:	00018b41 	.word	0x00018b41
   18fa8:	000106bd 	.word	0x000106bd

00018fac <_Z41__static_initialization_and_destruction_0ii>:
   18fac:	b580      	push	{r7, lr}
   18fae:	b082      	sub	sp, #8
   18fb0:	af00      	add	r7, sp, #0
   18fb2:	6078      	str	r0, [r7, #4]
   18fb4:	6039      	str	r1, [r7, #0]
   18fb6:	687b      	ldr	r3, [r7, #4]
   18fb8:	2b01      	cmp	r3, #1
   18fba:	d14c      	bne.n	19056 <_Z41__static_initialization_and_destruction_0ii+0xaa>
   18fbc:	683b      	ldr	r3, [r7, #0]
   18fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18fc2:	4293      	cmp	r3, r2
   18fc4:	d147      	bne.n	19056 <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   18fc6:	4926      	ldr	r1, [pc, #152]	; (19060 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   18fc8:	4826      	ldr	r0, [pc, #152]	; (19064 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   18fca:	4b27      	ldr	r3, [pc, #156]	; (19068 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   18fcc:	4798      	blx	r3
   18fce:	4a27      	ldr	r2, [pc, #156]	; (1906c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   18fd0:	4927      	ldr	r1, [pc, #156]	; (19070 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   18fd2:	4824      	ldr	r0, [pc, #144]	; (19064 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   18fd4:	4b27      	ldr	r3, [pc, #156]	; (19074 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   18fd6:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   18fd8:	4927      	ldr	r1, [pc, #156]	; (19078 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   18fda:	4828      	ldr	r0, [pc, #160]	; (1907c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   18fdc:	4b22      	ldr	r3, [pc, #136]	; (19068 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   18fde:	4798      	blx	r3
   18fe0:	4a22      	ldr	r2, [pc, #136]	; (1906c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   18fe2:	4923      	ldr	r1, [pc, #140]	; (19070 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   18fe4:	4825      	ldr	r0, [pc, #148]	; (1907c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   18fe6:	4b23      	ldr	r3, [pc, #140]	; (19074 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   18fe8:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   18fea:	4925      	ldr	r1, [pc, #148]	; (19080 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   18fec:	4825      	ldr	r0, [pc, #148]	; (19084 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   18fee:	4b1e      	ldr	r3, [pc, #120]	; (19068 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   18ff0:	4798      	blx	r3
   18ff2:	4a1e      	ldr	r2, [pc, #120]	; (1906c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   18ff4:	491e      	ldr	r1, [pc, #120]	; (19070 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   18ff6:	4823      	ldr	r0, [pc, #140]	; (19084 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   18ff8:	4b1e      	ldr	r3, [pc, #120]	; (19074 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   18ffa:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   18ffc:	4922      	ldr	r1, [pc, #136]	; (19088 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   18ffe:	4823      	ldr	r0, [pc, #140]	; (1908c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   19000:	4b19      	ldr	r3, [pc, #100]	; (19068 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   19002:	4798      	blx	r3
   19004:	4a19      	ldr	r2, [pc, #100]	; (1906c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   19006:	491a      	ldr	r1, [pc, #104]	; (19070 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   19008:	4820      	ldr	r0, [pc, #128]	; (1908c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   1900a:	4b1a      	ldr	r3, [pc, #104]	; (19074 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1900c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   1900e:	4920      	ldr	r1, [pc, #128]	; (19090 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   19010:	4820      	ldr	r0, [pc, #128]	; (19094 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   19012:	4b15      	ldr	r3, [pc, #84]	; (19068 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   19014:	4798      	blx	r3
   19016:	4a15      	ldr	r2, [pc, #84]	; (1906c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   19018:	4915      	ldr	r1, [pc, #84]	; (19070 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1901a:	481e      	ldr	r0, [pc, #120]	; (19094 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   1901c:	4b15      	ldr	r3, [pc, #84]	; (19074 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1901e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   19020:	491d      	ldr	r1, [pc, #116]	; (19098 <_Z41__static_initialization_and_destruction_0ii+0xec>)
   19022:	481e      	ldr	r0, [pc, #120]	; (1909c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   19024:	4b10      	ldr	r3, [pc, #64]	; (19068 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   19026:	4798      	blx	r3
   19028:	4a10      	ldr	r2, [pc, #64]	; (1906c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1902a:	4911      	ldr	r1, [pc, #68]	; (19070 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1902c:	481b      	ldr	r0, [pc, #108]	; (1909c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1902e:	4b11      	ldr	r3, [pc, #68]	; (19074 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   19030:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   19032:	491b      	ldr	r1, [pc, #108]	; (190a0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   19034:	481b      	ldr	r0, [pc, #108]	; (190a4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   19036:	4b0c      	ldr	r3, [pc, #48]	; (19068 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   19038:	4798      	blx	r3
   1903a:	4a0c      	ldr	r2, [pc, #48]	; (1906c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1903c:	490c      	ldr	r1, [pc, #48]	; (19070 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1903e:	4819      	ldr	r0, [pc, #100]	; (190a4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   19040:	4b0c      	ldr	r3, [pc, #48]	; (19074 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   19042:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   19044:	4918      	ldr	r1, [pc, #96]	; (190a8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   19046:	4819      	ldr	r0, [pc, #100]	; (190ac <_Z41__static_initialization_and_destruction_0ii+0x100>)
   19048:	4b07      	ldr	r3, [pc, #28]	; (19068 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1904a:	4798      	blx	r3
   1904c:	4a07      	ldr	r2, [pc, #28]	; (1906c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1904e:	4908      	ldr	r1, [pc, #32]	; (19070 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   19050:	4816      	ldr	r0, [pc, #88]	; (190ac <_Z41__static_initialization_and_destruction_0ii+0x100>)
   19052:	4b08      	ldr	r3, [pc, #32]	; (19074 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   19054:	4798      	blx	r3
   19056:	bf00      	nop
   19058:	3708      	adds	r7, #8
   1905a:	46bd      	mov	sp, r7
   1905c:	bd80      	pop	{r7, pc}
   1905e:	bf00      	nop
   19060:	2000df28 	.word	0x2000df28
   19064:	2000dac4 	.word	0x2000dac4
   19068:	00010441 	.word	0x00010441
   1906c:	20000000 	.word	0x20000000
   19070:	00010479 	.word	0x00010479
   19074:	0001a611 	.word	0x0001a611
   19078:	2000dfbc 	.word	0x2000dfbc
   1907c:	2000dae4 	.word	0x2000dae4
   19080:	2000e0e0 	.word	0x2000e0e0
   19084:	2000db04 	.word	0x2000db04
   19088:	2000dfdc 	.word	0x2000dfdc
   1908c:	2000db24 	.word	0x2000db24
   19090:	2000e0a0 	.word	0x2000e0a0
   19094:	2000db44 	.word	0x2000db44
   19098:	2000e0c0 	.word	0x2000e0c0
   1909c:	2000db64 	.word	0x2000db64
   190a0:	2000df98 	.word	0x2000df98
   190a4:	2000db84 	.word	0x2000db84
   190a8:	2000e038 	.word	0x2000e038
   190ac:	2000dba4 	.word	0x2000dba4

000190b0 <_GLOBAL__sub_I_ptrLTCClass>:
   190b0:	b580      	push	{r7, lr}
   190b2:	af00      	add	r7, sp, #0
   190b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   190b8:	2001      	movs	r0, #1
   190ba:	4b01      	ldr	r3, [pc, #4]	; (190c0 <_GLOBAL__sub_I_ptrLTCClass+0x10>)
   190bc:	4798      	blx	r3
   190be:	bd80      	pop	{r7, pc}
   190c0:	00018fad 	.word	0x00018fad

000190c4 <hri_port_set_OUT_reg>:
{
   190c4:	b480      	push	{r7}
   190c6:	b085      	sub	sp, #20
   190c8:	af00      	add	r7, sp, #0
   190ca:	60f8      	str	r0, [r7, #12]
   190cc:	460b      	mov	r3, r1
   190ce:	607a      	str	r2, [r7, #4]
   190d0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   190d2:	7afb      	ldrb	r3, [r7, #11]
   190d4:	68fa      	ldr	r2, [r7, #12]
   190d6:	01db      	lsls	r3, r3, #7
   190d8:	4413      	add	r3, r2
   190da:	3318      	adds	r3, #24
   190dc:	687a      	ldr	r2, [r7, #4]
   190de:	601a      	str	r2, [r3, #0]
}
   190e0:	bf00      	nop
   190e2:	3714      	adds	r7, #20
   190e4:	46bd      	mov	sp, r7
   190e6:	bc80      	pop	{r7}
   190e8:	4770      	bx	lr

000190ea <hri_port_clear_OUT_reg>:
{
   190ea:	b480      	push	{r7}
   190ec:	b085      	sub	sp, #20
   190ee:	af00      	add	r7, sp, #0
   190f0:	60f8      	str	r0, [r7, #12]
   190f2:	460b      	mov	r3, r1
   190f4:	607a      	str	r2, [r7, #4]
   190f6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   190f8:	7afb      	ldrb	r3, [r7, #11]
   190fa:	68fa      	ldr	r2, [r7, #12]
   190fc:	01db      	lsls	r3, r3, #7
   190fe:	4413      	add	r3, r2
   19100:	3314      	adds	r3, #20
   19102:	687a      	ldr	r2, [r7, #4]
   19104:	601a      	str	r2, [r3, #0]
}
   19106:	bf00      	nop
   19108:	3714      	adds	r7, #20
   1910a:	46bd      	mov	sp, r7
   1910c:	bc80      	pop	{r7}
   1910e:	4770      	bx	lr

00019110 <_gpio_set_level>:
{
   19110:	b580      	push	{r7, lr}
   19112:	b082      	sub	sp, #8
   19114:	af00      	add	r7, sp, #0
   19116:	4603      	mov	r3, r0
   19118:	6039      	str	r1, [r7, #0]
   1911a:	71fb      	strb	r3, [r7, #7]
   1911c:	4613      	mov	r3, r2
   1911e:	71bb      	strb	r3, [r7, #6]
	if (level) {
   19120:	79bb      	ldrb	r3, [r7, #6]
   19122:	2b00      	cmp	r3, #0
   19124:	d006      	beq.n	19134 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   19126:	79fb      	ldrb	r3, [r7, #7]
   19128:	683a      	ldr	r2, [r7, #0]
   1912a:	4619      	mov	r1, r3
   1912c:	4806      	ldr	r0, [pc, #24]	; (19148 <_gpio_set_level+0x38>)
   1912e:	4b07      	ldr	r3, [pc, #28]	; (1914c <_gpio_set_level+0x3c>)
   19130:	4798      	blx	r3
}
   19132:	e005      	b.n	19140 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   19134:	79fb      	ldrb	r3, [r7, #7]
   19136:	683a      	ldr	r2, [r7, #0]
   19138:	4619      	mov	r1, r3
   1913a:	4803      	ldr	r0, [pc, #12]	; (19148 <_gpio_set_level+0x38>)
   1913c:	4b04      	ldr	r3, [pc, #16]	; (19150 <_gpio_set_level+0x40>)
   1913e:	4798      	blx	r3
}
   19140:	bf00      	nop
   19142:	3708      	adds	r7, #8
   19144:	46bd      	mov	sp, r7
   19146:	bd80      	pop	{r7, pc}
   19148:	41008000 	.word	0x41008000
   1914c:	000190c5 	.word	0x000190c5
   19150:	000190eb 	.word	0x000190eb

00019154 <gpio_set_pin_level>:
{
   19154:	b580      	push	{r7, lr}
   19156:	b082      	sub	sp, #8
   19158:	af00      	add	r7, sp, #0
   1915a:	4603      	mov	r3, r0
   1915c:	460a      	mov	r2, r1
   1915e:	71fb      	strb	r3, [r7, #7]
   19160:	4613      	mov	r3, r2
   19162:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   19164:	79fb      	ldrb	r3, [r7, #7]
   19166:	115b      	asrs	r3, r3, #5
   19168:	b2d8      	uxtb	r0, r3
   1916a:	79fb      	ldrb	r3, [r7, #7]
   1916c:	f003 031f 	and.w	r3, r3, #31
   19170:	2201      	movs	r2, #1
   19172:	fa02 f303 	lsl.w	r3, r2, r3
   19176:	79ba      	ldrb	r2, [r7, #6]
   19178:	4619      	mov	r1, r3
   1917a:	4b03      	ldr	r3, [pc, #12]	; (19188 <gpio_set_pin_level+0x34>)
   1917c:	4798      	blx	r3
}
   1917e:	bf00      	nop
   19180:	3708      	adds	r7, #8
   19182:	46bd      	mov	sp, r7
   19184:	bd80      	pop	{r7, pc}
   19186:	bf00      	nop
   19188:	00019111 	.word	0x00019111

0001918c <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
   1918c:	b480      	push	{r7}
   1918e:	b083      	sub	sp, #12
   19190:	af00      	add	r7, sp, #0
   19192:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   19194:	4a05      	ldr	r2, [pc, #20]	; (191ac <_ZN6LT_SPIC1Ev+0x20>)
   19196:	687b      	ldr	r3, [r7, #4]
   19198:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
   1919a:	687b      	ldr	r3, [r7, #4]
   1919c:	4a04      	ldr	r2, [pc, #16]	; (191b0 <_ZN6LT_SPIC1Ev+0x24>)
   1919e:	605a      	str	r2, [r3, #4]
} //LT_SPI
   191a0:	687b      	ldr	r3, [r7, #4]
   191a2:	4618      	mov	r0, r3
   191a4:	370c      	adds	r7, #12
   191a6:	46bd      	mov	sp, r7
   191a8:	bc80      	pop	{r7}
   191aa:	4770      	bx	lr
   191ac:	2000dbc8 	.word	0x2000dbc8
   191b0:	2000dbcc 	.word	0x2000dbcc

000191b4 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   191b4:	b480      	push	{r7}
   191b6:	b083      	sub	sp, #12
   191b8:	af00      	add	r7, sp, #0
   191ba:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   191bc:	687b      	ldr	r3, [r7, #4]
   191be:	4618      	mov	r0, r3
   191c0:	370c      	adds	r7, #12
   191c2:	46bd      	mov	sp, r7
   191c4:	bc80      	pop	{r7}
   191c6:	4770      	bx	lr

000191c8 <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
   191c8:	b580      	push	{r7, lr}
   191ca:	b082      	sub	sp, #8
   191cc:	af00      	add	r7, sp, #0
   191ce:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
   191d0:	687b      	ldr	r3, [r7, #4]
   191d2:	685a      	ldr	r2, [r3, #4]
   191d4:	687b      	ldr	r3, [r7, #4]
   191d6:	691b      	ldr	r3, [r3, #16]
   191d8:	4619      	mov	r1, r3
   191da:	4610      	mov	r0, r2
   191dc:	4b0e      	ldr	r3, [pc, #56]	; (19218 <_ZN6LT_SPI4initEv+0x50>)
   191de:	4798      	blx	r3
	spiTemp->init();
   191e0:	687b      	ldr	r3, [r7, #4]
   191e2:	685b      	ldr	r3, [r3, #4]
   191e4:	4618      	mov	r0, r3
   191e6:	4b0d      	ldr	r3, [pc, #52]	; (1921c <_ZN6LT_SPI4initEv+0x54>)
   191e8:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
   191ea:	687b      	ldr	r3, [r7, #4]
   191ec:	685b      	ldr	r3, [r3, #4]
   191ee:	685a      	ldr	r2, [r3, #4]
   191f0:	687b      	ldr	r3, [r7, #4]
   191f2:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
   191f4:	687b      	ldr	r3, [r7, #4]
   191f6:	685b      	ldr	r3, [r3, #4]
   191f8:	689a      	ldr	r2, [r3, #8]
   191fa:	687b      	ldr	r3, [r7, #4]
   191fc:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
   191fe:	687b      	ldr	r3, [r7, #4]
   19200:	685b      	ldr	r3, [r3, #4]
   19202:	4618      	mov	r0, r3
   19204:	4b06      	ldr	r3, [pc, #24]	; (19220 <_ZN6LT_SPI4initEv+0x58>)
   19206:	4798      	blx	r3
	ready=true;
   19208:	687b      	ldr	r3, [r7, #4]
   1920a:	2201      	movs	r2, #1
   1920c:	701a      	strb	r2, [r3, #0]
}
   1920e:	bf00      	nop
   19210:	3708      	adds	r7, #8
   19212:	46bd      	mov	sp, r7
   19214:	bd80      	pop	{r7, pc}
   19216:	bf00      	nop
   19218:	00019471 	.word	0x00019471
   1921c:	00019429 	.word	0x00019429
   19220:	00019495 	.word	0x00019495

00019224 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
   19224:	b480      	push	{r7}
   19226:	b083      	sub	sp, #12
   19228:	af00      	add	r7, sp, #0
   1922a:	6078      	str	r0, [r7, #4]
   1922c:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
   1922e:	687b      	ldr	r3, [r7, #4]
   19230:	683a      	ldr	r2, [r7, #0]
   19232:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
   19234:	4a03      	ldr	r2, [pc, #12]	; (19244 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
   19236:	687b      	ldr	r3, [r7, #4]
   19238:	6013      	str	r3, [r2, #0]
}
   1923a:	bf00      	nop
   1923c:	370c      	adds	r7, #12
   1923e:	46bd      	mov	sp, r7
   19240:	bc80      	pop	{r7}
   19242:	4770      	bx	lr
   19244:	2000dbc8 	.word	0x2000dbc8

00019248 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   19248:	b580      	push	{r7, lr}
   1924a:	b086      	sub	sp, #24
   1924c:	af00      	add	r7, sp, #0
   1924e:	60f8      	str	r0, [r7, #12]
   19250:	60b9      	str	r1, [r7, #8]
   19252:	607a      	str	r2, [r7, #4]
   19254:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
   19256:	687b      	ldr	r3, [r7, #4]
   19258:	781b      	ldrb	r3, [r3, #0]
   1925a:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
   1925c:	68b9      	ldr	r1, [r7, #8]
   1925e:	68f8      	ldr	r0, [r7, #12]
   19260:	4b25      	ldr	r3, [pc, #148]	; (192f8 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
   19262:	4798      	blx	r3
	
	switch(rOrw){
   19264:	7dfb      	ldrb	r3, [r7, #23]
   19266:	2b02      	cmp	r3, #2
   19268:	d002      	beq.n	19270 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
   1926a:	2b03      	cmp	r3, #3
   1926c:	d009      	beq.n	19282 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
   1926e:	e028      	b.n	192c2 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
   19270:	68fb      	ldr	r3, [r7, #12]
   19272:	685b      	ldr	r3, [r3, #4]
   19274:	f897 2020 	ldrb.w	r2, [r7, #32]
   19278:	6879      	ldr	r1, [r7, #4]
   1927a:	4618      	mov	r0, r3
   1927c:	4b1f      	ldr	r3, [pc, #124]	; (192fc <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   1927e:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
   19280:	e031      	b.n	192e6 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
   19282:	68fb      	ldr	r3, [r7, #12]
   19284:	685b      	ldr	r3, [r3, #4]
   19286:	2203      	movs	r2, #3
   19288:	6879      	ldr	r1, [r7, #4]
   1928a:	4618      	mov	r0, r3
   1928c:	4b1b      	ldr	r3, [pc, #108]	; (192fc <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   1928e:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
   19290:	f897 3020 	ldrb.w	r3, [r7, #32]
   19294:	2b04      	cmp	r3, #4
   19296:	dd0b      	ble.n	192b0 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
   19298:	68fb      	ldr	r3, [r7, #12]
   1929a:	6858      	ldr	r0, [r3, #4]
   1929c:	f897 3020 	ldrb.w	r3, [r7, #32]
   192a0:	3b03      	subs	r3, #3
   192a2:	461a      	mov	r2, r3
   192a4:	6839      	ldr	r1, [r7, #0]
   192a6:	4b16      	ldr	r3, [pc, #88]	; (19300 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   192a8:	4798      	blx	r3
					asm("nop");
   192aa:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
   192ac:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
   192ae:	e01a      	b.n	192e6 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
   192b0:	68fb      	ldr	r3, [r7, #12]
   192b2:	685b      	ldr	r3, [r3, #4]
   192b4:	2201      	movs	r2, #1
   192b6:	6839      	ldr	r1, [r7, #0]
   192b8:	4618      	mov	r0, r3
   192ba:	4b11      	ldr	r3, [pc, #68]	; (19300 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   192bc:	4798      	blx	r3
				asm("nop");
   192be:	bf00      	nop
			break;
   192c0:	e011      	b.n	192e6 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
   192c2:	68fb      	ldr	r3, [r7, #12]
   192c4:	685b      	ldr	r3, [r3, #4]
   192c6:	f897 2020 	ldrb.w	r2, [r7, #32]
   192ca:	6879      	ldr	r1, [r7, #4]
   192cc:	4618      	mov	r0, r3
   192ce:	4b0b      	ldr	r3, [pc, #44]	; (192fc <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   192d0:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
   192d2:	68fb      	ldr	r3, [r7, #12]
   192d4:	6858      	ldr	r0, [r3, #4]
   192d6:	f897 3020 	ldrb.w	r3, [r7, #32]
   192da:	3b03      	subs	r3, #3
   192dc:	461a      	mov	r2, r3
   192de:	6839      	ldr	r1, [r7, #0]
   192e0:	4b07      	ldr	r3, [pc, #28]	; (19300 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   192e2:	4798      	blx	r3
			break;
   192e4:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
   192e6:	68b9      	ldr	r1, [r7, #8]
   192e8:	68f8      	ldr	r0, [r7, #12]
   192ea:	4b06      	ldr	r3, [pc, #24]	; (19304 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
   192ec:	4798      	blx	r3
	asm("nop");
   192ee:	bf00      	nop
	
}
   192f0:	bf00      	nop
   192f2:	3718      	adds	r7, #24
   192f4:	46bd      	mov	sp, r7
   192f6:	bd80      	pop	{r7, pc}
   192f8:	00019309 	.word	0x00019309
   192fc:	000194d1 	.word	0x000194d1
   19300:	00019515 	.word	0x00019515
   19304:	00019351 	.word	0x00019351

00019308 <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
   19308:	b580      	push	{r7, lr}
   1930a:	b082      	sub	sp, #8
   1930c:	af00      	add	r7, sp, #0
   1930e:	6078      	str	r0, [r7, #4]
   19310:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   19312:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   19316:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
   19318:	683b      	ldr	r3, [r7, #0]
   1931a:	b2db      	uxtb	r3, r3
   1931c:	2100      	movs	r1, #0
   1931e:	4618      	mov	r0, r3
   19320:	4b08      	ldr	r3, [pc, #32]	; (19344 <_ZN6LT_SPI4OpenEm+0x3c>)
   19322:	4798      	blx	r3
	 delay_us(10);
   19324:	200a      	movs	r0, #10
   19326:	4b08      	ldr	r3, [pc, #32]	; (19348 <_ZN6LT_SPI4OpenEm+0x40>)
   19328:	4798      	blx	r3
	spiTemp->Enable();
   1932a:	687b      	ldr	r3, [r7, #4]
   1932c:	685b      	ldr	r3, [r3, #4]
   1932e:	4618      	mov	r0, r3
   19330:	4b06      	ldr	r3, [pc, #24]	; (1934c <_ZN6LT_SPI4OpenEm+0x44>)
   19332:	4798      	blx	r3
	 delay_us(10);
   19334:	200a      	movs	r0, #10
   19336:	4b04      	ldr	r3, [pc, #16]	; (19348 <_ZN6LT_SPI4OpenEm+0x40>)
   19338:	4798      	blx	r3
 }
   1933a:	bf00      	nop
   1933c:	3708      	adds	r7, #8
   1933e:	46bd      	mov	sp, r7
   19340:	bd80      	pop	{r7, pc}
   19342:	bf00      	nop
   19344:	00019155 	.word	0x00019155
   19348:	0000364d 	.word	0x0000364d
   1934c:	00019495 	.word	0x00019495

00019350 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
   19350:	b580      	push	{r7, lr}
   19352:	b082      	sub	sp, #8
   19354:	af00      	add	r7, sp, #0
   19356:	6078      	str	r0, [r7, #4]
   19358:	6039      	str	r1, [r7, #0]

	  delay_us(10);
   1935a:	200a      	movs	r0, #10
   1935c:	4b0b      	ldr	r3, [pc, #44]	; (1938c <_ZN6LT_SPI5CloseEm+0x3c>)
   1935e:	4798      	blx	r3
	 spiTemp->Disable();
   19360:	687b      	ldr	r3, [r7, #4]
   19362:	685b      	ldr	r3, [r3, #4]
   19364:	4618      	mov	r0, r3
   19366:	4b0a      	ldr	r3, [pc, #40]	; (19390 <_ZN6LT_SPI5CloseEm+0x40>)
   19368:	4798      	blx	r3
	delay_us(10);
   1936a:	200a      	movs	r0, #10
   1936c:	4b07      	ldr	r3, [pc, #28]	; (1938c <_ZN6LT_SPI5CloseEm+0x3c>)
   1936e:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
   19370:	683b      	ldr	r3, [r7, #0]
   19372:	b2db      	uxtb	r3, r3
   19374:	2101      	movs	r1, #1
   19376:	4618      	mov	r0, r3
   19378:	4b06      	ldr	r3, [pc, #24]	; (19394 <_ZN6LT_SPI5CloseEm+0x44>)
   1937a:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
   1937c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   19380:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
   19382:	bf00      	nop
   19384:	3708      	adds	r7, #8
   19386:	46bd      	mov	sp, r7
   19388:	bd80      	pop	{r7, pc}
   1938a:	bf00      	nop
   1938c:	0000364d 	.word	0x0000364d
   19390:	00019559 	.word	0x00019559
   19394:	00019155 	.word	0x00019155

00019398 <_Z41__static_initialization_and_destruction_0ii>:
   19398:	b580      	push	{r7, lr}
   1939a:	b082      	sub	sp, #8
   1939c:	af00      	add	r7, sp, #0
   1939e:	6078      	str	r0, [r7, #4]
   193a0:	6039      	str	r1, [r7, #0]
   193a2:	687b      	ldr	r3, [r7, #4]
   193a4:	2b01      	cmp	r3, #1
   193a6:	d10c      	bne.n	193c2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   193a8:	683b      	ldr	r3, [r7, #0]
   193aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   193ae:	4293      	cmp	r3, r2
   193b0:	d107      	bne.n	193c2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
   193b2:	4806      	ldr	r0, [pc, #24]	; (193cc <_Z41__static_initialization_and_destruction_0ii+0x34>)
   193b4:	4b06      	ldr	r3, [pc, #24]	; (193d0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   193b6:	4798      	blx	r3
   193b8:	4a06      	ldr	r2, [pc, #24]	; (193d4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   193ba:	4907      	ldr	r1, [pc, #28]	; (193d8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   193bc:	4803      	ldr	r0, [pc, #12]	; (193cc <_Z41__static_initialization_and_destruction_0ii+0x34>)
   193be:	4b07      	ldr	r3, [pc, #28]	; (193dc <_Z41__static_initialization_and_destruction_0ii+0x44>)
   193c0:	4798      	blx	r3
   193c2:	bf00      	nop
   193c4:	3708      	adds	r7, #8
   193c6:	46bd      	mov	sp, r7
   193c8:	bd80      	pop	{r7, pc}
   193ca:	bf00      	nop
   193cc:	2000dbcc 	.word	0x2000dbcc
   193d0:	000193f5 	.word	0x000193f5
   193d4:	20000000 	.word	0x20000000
   193d8:	00019415 	.word	0x00019415
   193dc:	0001a611 	.word	0x0001a611

000193e0 <_GLOBAL__sub_I_ptrLTSPIClass>:
   193e0:	b580      	push	{r7, lr}
   193e2:	af00      	add	r7, sp, #0
   193e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   193e8:	2001      	movs	r0, #1
   193ea:	4b01      	ldr	r3, [pc, #4]	; (193f0 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   193ec:	4798      	blx	r3
   193ee:	bd80      	pop	{r7, pc}
   193f0:	00019399 	.word	0x00019399

000193f4 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   193f4:	b480      	push	{r7}
   193f6:	b083      	sub	sp, #12
   193f8:	af00      	add	r7, sp, #0
   193fa:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   193fc:	4a04      	ldr	r2, [pc, #16]	; (19410 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   193fe:	687b      	ldr	r3, [r7, #4]
   19400:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   19402:	687b      	ldr	r3, [r7, #4]
   19404:	4618      	mov	r0, r3
   19406:	370c      	adds	r7, #12
   19408:	46bd      	mov	sp, r7
   1940a:	bc80      	pop	{r7}
   1940c:	4770      	bx	lr
   1940e:	bf00      	nop
   19410:	2000dbe8 	.word	0x2000dbe8

00019414 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   19414:	b480      	push	{r7}
   19416:	b083      	sub	sp, #12
   19418:	af00      	add	r7, sp, #0
   1941a:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   1941c:	687b      	ldr	r3, [r7, #4]
   1941e:	4618      	mov	r0, r3
   19420:	370c      	adds	r7, #12
   19422:	46bd      	mov	sp, r7
   19424:	bc80      	pop	{r7}
   19426:	4770      	bx	lr

00019428 <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   19428:	b580      	push	{r7, lr}
   1942a:	b082      	sub	sp, #8
   1942c:	af00      	add	r7, sp, #0
   1942e:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   19430:	687b      	ldr	r3, [r7, #4]
   19432:	68da      	ldr	r2, [r3, #12]
   19434:	687b      	ldr	r3, [r7, #4]
   19436:	3310      	adds	r3, #16
   19438:	4619      	mov	r1, r3
   1943a:	4610      	mov	r0, r2
   1943c:	4b09      	ldr	r3, [pc, #36]	; (19464 <_ZN13SPI_Syn_Class4initEv+0x3c>)
   1943e:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   19440:	687b      	ldr	r3, [r7, #4]
   19442:	68db      	ldr	r3, [r3, #12]
   19444:	4618      	mov	r0, r3
   19446:	4b08      	ldr	r3, [pc, #32]	; (19468 <_ZN13SPI_Syn_Class4initEv+0x40>)
   19448:	4798      	blx	r3
		txBuffer=txStaticBuffer;
   1944a:	687b      	ldr	r3, [r7, #4]
   1944c:	4a07      	ldr	r2, [pc, #28]	; (1946c <_ZN13SPI_Syn_Class4initEv+0x44>)
   1944e:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
   19450:	687b      	ldr	r3, [r7, #4]
   19452:	4a06      	ldr	r2, [pc, #24]	; (1946c <_ZN13SPI_Syn_Class4initEv+0x44>)
   19454:	609a      	str	r2, [r3, #8]
	ready=true;
   19456:	687b      	ldr	r3, [r7, #4]
   19458:	2201      	movs	r2, #1
   1945a:	701a      	strb	r2, [r3, #0]
	
}
   1945c:	bf00      	nop
   1945e:	3708      	adds	r7, #8
   19460:	46bd      	mov	sp, r7
   19462:	bd80      	pop	{r7, pc}
   19464:	00003e55 	.word	0x00003e55
   19468:	00003cc9 	.word	0x00003cc9
   1946c:	2000dbec 	.word	0x2000dbec

00019470 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   19470:	b480      	push	{r7}
   19472:	b083      	sub	sp, #12
   19474:	af00      	add	r7, sp, #0
   19476:	6078      	str	r0, [r7, #4]
   19478:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   1947a:	4a05      	ldr	r2, [pc, #20]	; (19490 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   1947c:	687b      	ldr	r3, [r7, #4]
   1947e:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   19480:	687b      	ldr	r3, [r7, #4]
   19482:	683a      	ldr	r2, [r7, #0]
   19484:	60da      	str	r2, [r3, #12]
}
   19486:	bf00      	nop
   19488:	370c      	adds	r7, #12
   1948a:	46bd      	mov	sp, r7
   1948c:	bc80      	pop	{r7}
   1948e:	4770      	bx	lr
   19490:	2000dbe8 	.word	0x2000dbe8

00019494 <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
   19494:	b580      	push	{r7, lr}
   19496:	b082      	sub	sp, #8
   19498:	af00      	add	r7, sp, #0
   1949a:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   1949c:	687b      	ldr	r3, [r7, #4]
   1949e:	68da      	ldr	r2, [r3, #12]
   194a0:	687b      	ldr	r3, [r7, #4]
   194a2:	3310      	adds	r3, #16
   194a4:	4619      	mov	r1, r3
   194a6:	4610      	mov	r0, r2
   194a8:	4b07      	ldr	r3, [pc, #28]	; (194c8 <_ZN13SPI_Syn_Class6EnableEv+0x34>)
   194aa:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   194ac:	687b      	ldr	r3, [r7, #4]
   194ae:	68db      	ldr	r3, [r3, #12]
   194b0:	4618      	mov	r0, r3
   194b2:	4b06      	ldr	r3, [pc, #24]	; (194cc <_ZN13SPI_Syn_Class6EnableEv+0x38>)
   194b4:	4798      	blx	r3
	ready=true;
   194b6:	687b      	ldr	r3, [r7, #4]
   194b8:	2201      	movs	r2, #1
   194ba:	701a      	strb	r2, [r3, #0]
	return 0;
   194bc:	2300      	movs	r3, #0
}
   194be:	4618      	mov	r0, r3
   194c0:	3708      	adds	r7, #8
   194c2:	46bd      	mov	sp, r7
   194c4:	bd80      	pop	{r7, pc}
   194c6:	bf00      	nop
   194c8:	00003e55 	.word	0x00003e55
   194cc:	00003cc9 	.word	0x00003cc9

000194d0 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
   194d0:	b580      	push	{r7, lr}
   194d2:	b086      	sub	sp, #24
   194d4:	af00      	add	r7, sp, #0
   194d6:	60f8      	str	r0, [r7, #12]
   194d8:	60b9      	str	r1, [r7, #8]
   194da:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   194dc:	68fb      	ldr	r3, [r7, #12]
   194de:	2201      	movs	r2, #1
   194e0:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
   194e2:	68fb      	ldr	r3, [r7, #12]
   194e4:	691b      	ldr	r3, [r3, #16]
   194e6:	687a      	ldr	r2, [r7, #4]
   194e8:	b292      	uxth	r2, r2
   194ea:	68b9      	ldr	r1, [r7, #8]
   194ec:	4618      	mov	r0, r3
   194ee:	4b08      	ldr	r3, [pc, #32]	; (19510 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
   194f0:	4798      	blx	r3
   194f2:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   194f4:	697b      	ldr	r3, [r7, #20]
   194f6:	2b00      	cmp	r3, #0
   194f8:	bf14      	ite	ne
   194fa:	2301      	movne	r3, #1
   194fc:	2300      	moveq	r3, #0
   194fe:	b2da      	uxtb	r2, r3
   19500:	68fb      	ldr	r3, [r7, #12]
   19502:	761a      	strb	r2, [r3, #24]
	 return w;
   19504:	697b      	ldr	r3, [r7, #20]
	
}
   19506:	4618      	mov	r0, r3
   19508:	3718      	adds	r7, #24
   1950a:	46bd      	mov	sp, r7
   1950c:	bd80      	pop	{r7, pc}
   1950e:	bf00      	nop
   19510:	00018469 	.word	0x00018469

00019514 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
   19514:	b580      	push	{r7, lr}
   19516:	b086      	sub	sp, #24
   19518:	af00      	add	r7, sp, #0
   1951a:	60f8      	str	r0, [r7, #12]
   1951c:	60b9      	str	r1, [r7, #8]
   1951e:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   19520:	68fb      	ldr	r3, [r7, #12]
   19522:	2201      	movs	r2, #1
   19524:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
   19526:	68fb      	ldr	r3, [r7, #12]
   19528:	691b      	ldr	r3, [r3, #16]
   1952a:	687a      	ldr	r2, [r7, #4]
   1952c:	b292      	uxth	r2, r2
   1952e:	68b9      	ldr	r1, [r7, #8]
   19530:	4618      	mov	r0, r3
   19532:	4b08      	ldr	r3, [pc, #32]	; (19554 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
   19534:	4798      	blx	r3
   19536:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   19538:	697b      	ldr	r3, [r7, #20]
   1953a:	2b00      	cmp	r3, #0
   1953c:	bf14      	ite	ne
   1953e:	2301      	movne	r3, #1
   19540:	2300      	moveq	r3, #0
   19542:	b2da      	uxtb	r2, r3
   19544:	68fb      	ldr	r3, [r7, #12]
   19546:	765a      	strb	r2, [r3, #25]
	return  r;
   19548:	697b      	ldr	r3, [r7, #20]
}
   1954a:	4618      	mov	r0, r3
   1954c:	3718      	adds	r7, #24
   1954e:	46bd      	mov	sp, r7
   19550:	bd80      	pop	{r7, pc}
   19552:	bf00      	nop
   19554:	000184b9 	.word	0x000184b9

00019558 <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
   19558:	b580      	push	{r7, lr}
   1955a:	b082      	sub	sp, #8
   1955c:	af00      	add	r7, sp, #0
   1955e:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   19560:	687b      	ldr	r3, [r7, #4]
   19562:	68db      	ldr	r3, [r3, #12]
   19564:	4618      	mov	r0, r3
   19566:	4b03      	ldr	r3, [pc, #12]	; (19574 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
   19568:	4798      	blx	r3
	
}
   1956a:	bf00      	nop
   1956c:	3708      	adds	r7, #8
   1956e:	46bd      	mov	sp, r7
   19570:	bd80      	pop	{r7, pc}
   19572:	bf00      	nop
   19574:	00003d05 	.word	0x00003d05

00019578 <hri_port_set_DIR_reg>:
{
   19578:	b480      	push	{r7}
   1957a:	b085      	sub	sp, #20
   1957c:	af00      	add	r7, sp, #0
   1957e:	60f8      	str	r0, [r7, #12]
   19580:	460b      	mov	r3, r1
   19582:	607a      	str	r2, [r7, #4]
   19584:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   19586:	7afb      	ldrb	r3, [r7, #11]
   19588:	68fa      	ldr	r2, [r7, #12]
   1958a:	01db      	lsls	r3, r3, #7
   1958c:	4413      	add	r3, r2
   1958e:	3308      	adds	r3, #8
   19590:	687a      	ldr	r2, [r7, #4]
   19592:	601a      	str	r2, [r3, #0]
}
   19594:	bf00      	nop
   19596:	3714      	adds	r7, #20
   19598:	46bd      	mov	sp, r7
   1959a:	bc80      	pop	{r7}
   1959c:	4770      	bx	lr

0001959e <hri_port_clear_DIR_reg>:
{
   1959e:	b480      	push	{r7}
   195a0:	b085      	sub	sp, #20
   195a2:	af00      	add	r7, sp, #0
   195a4:	60f8      	str	r0, [r7, #12]
   195a6:	460b      	mov	r3, r1
   195a8:	607a      	str	r2, [r7, #4]
   195aa:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   195ac:	7afb      	ldrb	r3, [r7, #11]
   195ae:	68fa      	ldr	r2, [r7, #12]
   195b0:	01db      	lsls	r3, r3, #7
   195b2:	4413      	add	r3, r2
   195b4:	3304      	adds	r3, #4
   195b6:	687a      	ldr	r2, [r7, #4]
   195b8:	601a      	str	r2, [r3, #0]
}
   195ba:	bf00      	nop
   195bc:	3714      	adds	r7, #20
   195be:	46bd      	mov	sp, r7
   195c0:	bc80      	pop	{r7}
   195c2:	4770      	bx	lr

000195c4 <hri_port_set_OUT_reg>:
{
   195c4:	b480      	push	{r7}
   195c6:	b085      	sub	sp, #20
   195c8:	af00      	add	r7, sp, #0
   195ca:	60f8      	str	r0, [r7, #12]
   195cc:	460b      	mov	r3, r1
   195ce:	607a      	str	r2, [r7, #4]
   195d0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   195d2:	7afb      	ldrb	r3, [r7, #11]
   195d4:	68fa      	ldr	r2, [r7, #12]
   195d6:	01db      	lsls	r3, r3, #7
   195d8:	4413      	add	r3, r2
   195da:	3318      	adds	r3, #24
   195dc:	687a      	ldr	r2, [r7, #4]
   195de:	601a      	str	r2, [r3, #0]
}
   195e0:	bf00      	nop
   195e2:	3714      	adds	r7, #20
   195e4:	46bd      	mov	sp, r7
   195e6:	bc80      	pop	{r7}
   195e8:	4770      	bx	lr

000195ea <hri_port_clear_OUT_reg>:
{
   195ea:	b480      	push	{r7}
   195ec:	b085      	sub	sp, #20
   195ee:	af00      	add	r7, sp, #0
   195f0:	60f8      	str	r0, [r7, #12]
   195f2:	460b      	mov	r3, r1
   195f4:	607a      	str	r2, [r7, #4]
   195f6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   195f8:	7afb      	ldrb	r3, [r7, #11]
   195fa:	68fa      	ldr	r2, [r7, #12]
   195fc:	01db      	lsls	r3, r3, #7
   195fe:	4413      	add	r3, r2
   19600:	3314      	adds	r3, #20
   19602:	687a      	ldr	r2, [r7, #4]
   19604:	601a      	str	r2, [r3, #0]
}
   19606:	bf00      	nop
   19608:	3714      	adds	r7, #20
   1960a:	46bd      	mov	sp, r7
   1960c:	bc80      	pop	{r7}
   1960e:	4770      	bx	lr

00019610 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   19610:	b480      	push	{r7}
   19612:	b085      	sub	sp, #20
   19614:	af00      	add	r7, sp, #0
   19616:	6078      	str	r0, [r7, #4]
   19618:	4608      	mov	r0, r1
   1961a:	4611      	mov	r1, r2
   1961c:	461a      	mov	r2, r3
   1961e:	4603      	mov	r3, r0
   19620:	70fb      	strb	r3, [r7, #3]
   19622:	460b      	mov	r3, r1
   19624:	70bb      	strb	r3, [r7, #2]
   19626:	4613      	mov	r3, r2
   19628:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   1962a:	78fa      	ldrb	r2, [r7, #3]
   1962c:	78bb      	ldrb	r3, [r7, #2]
   1962e:	6879      	ldr	r1, [r7, #4]
   19630:	01d2      	lsls	r2, r2, #7
   19632:	440a      	add	r2, r1
   19634:	4413      	add	r3, r2
   19636:	3330      	adds	r3, #48	; 0x30
   19638:	781b      	ldrb	r3, [r3, #0]
   1963a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   1963c:	7bfb      	ldrb	r3, [r7, #15]
   1963e:	f023 030f 	bic.w	r3, r3, #15
   19642:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   19644:	787b      	ldrb	r3, [r7, #1]
   19646:	f003 030f 	and.w	r3, r3, #15
   1964a:	b2da      	uxtb	r2, r3
   1964c:	7bfb      	ldrb	r3, [r7, #15]
   1964e:	4313      	orrs	r3, r2
   19650:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   19652:	78fa      	ldrb	r2, [r7, #3]
   19654:	78bb      	ldrb	r3, [r7, #2]
   19656:	6879      	ldr	r1, [r7, #4]
   19658:	01d2      	lsls	r2, r2, #7
   1965a:	440a      	add	r2, r1
   1965c:	4413      	add	r3, r2
   1965e:	3330      	adds	r3, #48	; 0x30
   19660:	7bfa      	ldrb	r2, [r7, #15]
   19662:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   19664:	bf00      	nop
   19666:	3714      	adds	r7, #20
   19668:	46bd      	mov	sp, r7
   1966a:	bc80      	pop	{r7}
   1966c:	4770      	bx	lr

0001966e <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   1966e:	b480      	push	{r7}
   19670:	b085      	sub	sp, #20
   19672:	af00      	add	r7, sp, #0
   19674:	6078      	str	r0, [r7, #4]
   19676:	4608      	mov	r0, r1
   19678:	4611      	mov	r1, r2
   1967a:	461a      	mov	r2, r3
   1967c:	4603      	mov	r3, r0
   1967e:	70fb      	strb	r3, [r7, #3]
   19680:	460b      	mov	r3, r1
   19682:	70bb      	strb	r3, [r7, #2]
   19684:	4613      	mov	r3, r2
   19686:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   19688:	78fa      	ldrb	r2, [r7, #3]
   1968a:	78bb      	ldrb	r3, [r7, #2]
   1968c:	6879      	ldr	r1, [r7, #4]
   1968e:	01d2      	lsls	r2, r2, #7
   19690:	440a      	add	r2, r1
   19692:	4413      	add	r3, r2
   19694:	3330      	adds	r3, #48	; 0x30
   19696:	781b      	ldrb	r3, [r3, #0]
   19698:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   1969a:	7bfb      	ldrb	r3, [r7, #15]
   1969c:	f003 030f 	and.w	r3, r3, #15
   196a0:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   196a2:	787b      	ldrb	r3, [r7, #1]
   196a4:	011b      	lsls	r3, r3, #4
   196a6:	b2da      	uxtb	r2, r3
   196a8:	7bfb      	ldrb	r3, [r7, #15]
   196aa:	4313      	orrs	r3, r2
   196ac:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   196ae:	78fa      	ldrb	r2, [r7, #3]
   196b0:	78bb      	ldrb	r3, [r7, #2]
   196b2:	6879      	ldr	r1, [r7, #4]
   196b4:	01d2      	lsls	r2, r2, #7
   196b6:	440a      	add	r2, r1
   196b8:	4413      	add	r3, r2
   196ba:	3330      	adds	r3, #48	; 0x30
   196bc:	7bfa      	ldrb	r2, [r7, #15]
   196be:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   196c0:	bf00      	nop
   196c2:	3714      	adds	r7, #20
   196c4:	46bd      	mov	sp, r7
   196c6:	bc80      	pop	{r7}
   196c8:	4770      	bx	lr

000196ca <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   196ca:	b480      	push	{r7}
   196cc:	b085      	sub	sp, #20
   196ce:	af00      	add	r7, sp, #0
   196d0:	6078      	str	r0, [r7, #4]
   196d2:	4608      	mov	r0, r1
   196d4:	4611      	mov	r1, r2
   196d6:	461a      	mov	r2, r3
   196d8:	4603      	mov	r3, r0
   196da:	70fb      	strb	r3, [r7, #3]
   196dc:	460b      	mov	r3, r1
   196de:	70bb      	strb	r3, [r7, #2]
   196e0:	4613      	mov	r3, r2
   196e2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   196e4:	78fa      	ldrb	r2, [r7, #3]
   196e6:	78bb      	ldrb	r3, [r7, #2]
   196e8:	6879      	ldr	r1, [r7, #4]
   196ea:	01d2      	lsls	r2, r2, #7
   196ec:	440a      	add	r2, r1
   196ee:	4413      	add	r3, r2
   196f0:	3340      	adds	r3, #64	; 0x40
   196f2:	781b      	ldrb	r3, [r3, #0]
   196f4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   196f6:	7bfb      	ldrb	r3, [r7, #15]
   196f8:	f023 0301 	bic.w	r3, r3, #1
   196fc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   196fe:	787a      	ldrb	r2, [r7, #1]
   19700:	7bfb      	ldrb	r3, [r7, #15]
   19702:	4313      	orrs	r3, r2
   19704:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   19706:	78fa      	ldrb	r2, [r7, #3]
   19708:	78bb      	ldrb	r3, [r7, #2]
   1970a:	6879      	ldr	r1, [r7, #4]
   1970c:	01d2      	lsls	r2, r2, #7
   1970e:	440a      	add	r2, r1
   19710:	4413      	add	r3, r2
   19712:	3340      	adds	r3, #64	; 0x40
   19714:	7bfa      	ldrb	r2, [r7, #15]
   19716:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   19718:	bf00      	nop
   1971a:	3714      	adds	r7, #20
   1971c:	46bd      	mov	sp, r7
   1971e:	bc80      	pop	{r7}
   19720:	4770      	bx	lr

00019722 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   19722:	b480      	push	{r7}
   19724:	b085      	sub	sp, #20
   19726:	af00      	add	r7, sp, #0
   19728:	60f8      	str	r0, [r7, #12]
   1972a:	460b      	mov	r3, r1
   1972c:	607a      	str	r2, [r7, #4]
   1972e:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   19730:	7afb      	ldrb	r3, [r7, #11]
   19732:	68fa      	ldr	r2, [r7, #12]
   19734:	01db      	lsls	r3, r3, #7
   19736:	4413      	add	r3, r2
   19738:	3328      	adds	r3, #40	; 0x28
   1973a:	687a      	ldr	r2, [r7, #4]
   1973c:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   1973e:	bf00      	nop
   19740:	3714      	adds	r7, #20
   19742:	46bd      	mov	sp, r7
   19744:	bc80      	pop	{r7}
   19746:	4770      	bx	lr

00019748 <_gpio_set_direction>:
{
   19748:	b580      	push	{r7, lr}
   1974a:	b082      	sub	sp, #8
   1974c:	af00      	add	r7, sp, #0
   1974e:	4603      	mov	r3, r0
   19750:	6039      	str	r1, [r7, #0]
   19752:	71fb      	strb	r3, [r7, #7]
   19754:	4613      	mov	r3, r2
   19756:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   19758:	79bb      	ldrb	r3, [r7, #6]
   1975a:	2b01      	cmp	r3, #1
   1975c:	d01c      	beq.n	19798 <_gpio_set_direction+0x50>
   1975e:	2b02      	cmp	r3, #2
   19760:	d037      	beq.n	197d2 <_gpio_set_direction+0x8a>
   19762:	2b00      	cmp	r3, #0
   19764:	d14e      	bne.n	19804 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   19766:	79fb      	ldrb	r3, [r7, #7]
   19768:	683a      	ldr	r2, [r7, #0]
   1976a:	4619      	mov	r1, r3
   1976c:	482a      	ldr	r0, [pc, #168]	; (19818 <_gpio_set_direction+0xd0>)
   1976e:	4b2b      	ldr	r3, [pc, #172]	; (1981c <_gpio_set_direction+0xd4>)
   19770:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   19772:	683b      	ldr	r3, [r7, #0]
   19774:	b29b      	uxth	r3, r3
   19776:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   1977a:	79fb      	ldrb	r3, [r7, #7]
   1977c:	4619      	mov	r1, r3
   1977e:	4826      	ldr	r0, [pc, #152]	; (19818 <_gpio_set_direction+0xd0>)
   19780:	4b27      	ldr	r3, [pc, #156]	; (19820 <_gpio_set_direction+0xd8>)
   19782:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   19784:	683b      	ldr	r3, [r7, #0]
   19786:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   19788:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   1978c:	79fb      	ldrb	r3, [r7, #7]
   1978e:	4619      	mov	r1, r3
   19790:	4821      	ldr	r0, [pc, #132]	; (19818 <_gpio_set_direction+0xd0>)
   19792:	4b23      	ldr	r3, [pc, #140]	; (19820 <_gpio_set_direction+0xd8>)
   19794:	4798      	blx	r3
		break;
   19796:	e03a      	b.n	1980e <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   19798:	79fb      	ldrb	r3, [r7, #7]
   1979a:	683a      	ldr	r2, [r7, #0]
   1979c:	4619      	mov	r1, r3
   1979e:	481e      	ldr	r0, [pc, #120]	; (19818 <_gpio_set_direction+0xd0>)
   197a0:	4b1e      	ldr	r3, [pc, #120]	; (1981c <_gpio_set_direction+0xd4>)
   197a2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   197a4:	683b      	ldr	r3, [r7, #0]
   197a6:	b29b      	uxth	r3, r3
   197a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   197ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   197b0:	79f9      	ldrb	r1, [r7, #7]
   197b2:	461a      	mov	r2, r3
   197b4:	4818      	ldr	r0, [pc, #96]	; (19818 <_gpio_set_direction+0xd0>)
   197b6:	4b1a      	ldr	r3, [pc, #104]	; (19820 <_gpio_set_direction+0xd8>)
   197b8:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   197ba:	683b      	ldr	r3, [r7, #0]
   197bc:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   197be:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   197c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   197c6:	79f9      	ldrb	r1, [r7, #7]
   197c8:	461a      	mov	r2, r3
   197ca:	4813      	ldr	r0, [pc, #76]	; (19818 <_gpio_set_direction+0xd0>)
   197cc:	4b14      	ldr	r3, [pc, #80]	; (19820 <_gpio_set_direction+0xd8>)
   197ce:	4798      	blx	r3
		break;
   197d0:	e01d      	b.n	1980e <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   197d2:	79fb      	ldrb	r3, [r7, #7]
   197d4:	683a      	ldr	r2, [r7, #0]
   197d6:	4619      	mov	r1, r3
   197d8:	480f      	ldr	r0, [pc, #60]	; (19818 <_gpio_set_direction+0xd0>)
   197da:	4b12      	ldr	r3, [pc, #72]	; (19824 <_gpio_set_direction+0xdc>)
   197dc:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   197de:	683b      	ldr	r3, [r7, #0]
   197e0:	b29b      	uxth	r3, r3
   197e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   197e6:	79fb      	ldrb	r3, [r7, #7]
   197e8:	4619      	mov	r1, r3
   197ea:	480b      	ldr	r0, [pc, #44]	; (19818 <_gpio_set_direction+0xd0>)
   197ec:	4b0c      	ldr	r3, [pc, #48]	; (19820 <_gpio_set_direction+0xd8>)
   197ee:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   197f0:	683b      	ldr	r3, [r7, #0]
   197f2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   197f4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   197f8:	79fb      	ldrb	r3, [r7, #7]
   197fa:	4619      	mov	r1, r3
   197fc:	4806      	ldr	r0, [pc, #24]	; (19818 <_gpio_set_direction+0xd0>)
   197fe:	4b08      	ldr	r3, [pc, #32]	; (19820 <_gpio_set_direction+0xd8>)
   19800:	4798      	blx	r3
		break;
   19802:	e004      	b.n	1980e <_gpio_set_direction+0xc6>
		ASSERT(false);
   19804:	2246      	movs	r2, #70	; 0x46
   19806:	4908      	ldr	r1, [pc, #32]	; (19828 <_gpio_set_direction+0xe0>)
   19808:	2000      	movs	r0, #0
   1980a:	4b08      	ldr	r3, [pc, #32]	; (1982c <_gpio_set_direction+0xe4>)
   1980c:	4798      	blx	r3
}
   1980e:	bf00      	nop
   19810:	3708      	adds	r7, #8
   19812:	46bd      	mov	sp, r7
   19814:	bd80      	pop	{r7, pc}
   19816:	bf00      	nop
   19818:	41008000 	.word	0x41008000
   1981c:	0001959f 	.word	0x0001959f
   19820:	00019723 	.word	0x00019723
   19824:	00019579 	.word	0x00019579
   19828:	0001c1bc 	.word	0x0001c1bc
   1982c:	00004cdd 	.word	0x00004cdd

00019830 <_gpio_set_level>:
{
   19830:	b580      	push	{r7, lr}
   19832:	b082      	sub	sp, #8
   19834:	af00      	add	r7, sp, #0
   19836:	4603      	mov	r3, r0
   19838:	6039      	str	r1, [r7, #0]
   1983a:	71fb      	strb	r3, [r7, #7]
   1983c:	4613      	mov	r3, r2
   1983e:	71bb      	strb	r3, [r7, #6]
	if (level) {
   19840:	79bb      	ldrb	r3, [r7, #6]
   19842:	2b00      	cmp	r3, #0
   19844:	d006      	beq.n	19854 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   19846:	79fb      	ldrb	r3, [r7, #7]
   19848:	683a      	ldr	r2, [r7, #0]
   1984a:	4619      	mov	r1, r3
   1984c:	4806      	ldr	r0, [pc, #24]	; (19868 <_gpio_set_level+0x38>)
   1984e:	4b07      	ldr	r3, [pc, #28]	; (1986c <_gpio_set_level+0x3c>)
   19850:	4798      	blx	r3
}
   19852:	e005      	b.n	19860 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   19854:	79fb      	ldrb	r3, [r7, #7]
   19856:	683a      	ldr	r2, [r7, #0]
   19858:	4619      	mov	r1, r3
   1985a:	4803      	ldr	r0, [pc, #12]	; (19868 <_gpio_set_level+0x38>)
   1985c:	4b04      	ldr	r3, [pc, #16]	; (19870 <_gpio_set_level+0x40>)
   1985e:	4798      	blx	r3
}
   19860:	bf00      	nop
   19862:	3708      	adds	r7, #8
   19864:	46bd      	mov	sp, r7
   19866:	bd80      	pop	{r7, pc}
   19868:	41008000 	.word	0x41008000
   1986c:	000195c5 	.word	0x000195c5
   19870:	000195eb 	.word	0x000195eb

00019874 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   19874:	b590      	push	{r4, r7, lr}
   19876:	b085      	sub	sp, #20
   19878:	af00      	add	r7, sp, #0
   1987a:	6078      	str	r0, [r7, #4]
   1987c:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   1987e:	687b      	ldr	r3, [r7, #4]
   19880:	095b      	lsrs	r3, r3, #5
   19882:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   19884:	687b      	ldr	r3, [r7, #4]
   19886:	b2db      	uxtb	r3, r3
   19888:	f003 031f 	and.w	r3, r3, #31
   1988c:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   1988e:	683b      	ldr	r3, [r7, #0]
   19890:	f1b3 3fff 	cmp.w	r3, #4294967295
   19894:	d106      	bne.n	198a4 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   19896:	7bba      	ldrb	r2, [r7, #14]
   19898:	7bf9      	ldrb	r1, [r7, #15]
   1989a:	2300      	movs	r3, #0
   1989c:	4812      	ldr	r0, [pc, #72]	; (198e8 <_gpio_set_pin_function+0x74>)
   1989e:	4c13      	ldr	r4, [pc, #76]	; (198ec <_gpio_set_pin_function+0x78>)
   198a0:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   198a2:	e01d      	b.n	198e0 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   198a4:	7bba      	ldrb	r2, [r7, #14]
   198a6:	7bf9      	ldrb	r1, [r7, #15]
   198a8:	2301      	movs	r3, #1
   198aa:	480f      	ldr	r0, [pc, #60]	; (198e8 <_gpio_set_pin_function+0x74>)
   198ac:	4c0f      	ldr	r4, [pc, #60]	; (198ec <_gpio_set_pin_function+0x78>)
   198ae:	47a0      	blx	r4
		if (pin & 1) {
   198b0:	7bbb      	ldrb	r3, [r7, #14]
   198b2:	f003 0301 	and.w	r3, r3, #1
   198b6:	2b00      	cmp	r3, #0
   198b8:	d009      	beq.n	198ce <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   198ba:	7bbb      	ldrb	r3, [r7, #14]
   198bc:	105b      	asrs	r3, r3, #1
   198be:	b2da      	uxtb	r2, r3
   198c0:	683b      	ldr	r3, [r7, #0]
   198c2:	b2db      	uxtb	r3, r3
   198c4:	7bf9      	ldrb	r1, [r7, #15]
   198c6:	4808      	ldr	r0, [pc, #32]	; (198e8 <_gpio_set_pin_function+0x74>)
   198c8:	4c09      	ldr	r4, [pc, #36]	; (198f0 <_gpio_set_pin_function+0x7c>)
   198ca:	47a0      	blx	r4
}
   198cc:	e008      	b.n	198e0 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   198ce:	7bbb      	ldrb	r3, [r7, #14]
   198d0:	105b      	asrs	r3, r3, #1
   198d2:	b2da      	uxtb	r2, r3
   198d4:	683b      	ldr	r3, [r7, #0]
   198d6:	b2db      	uxtb	r3, r3
   198d8:	7bf9      	ldrb	r1, [r7, #15]
   198da:	4803      	ldr	r0, [pc, #12]	; (198e8 <_gpio_set_pin_function+0x74>)
   198dc:	4c05      	ldr	r4, [pc, #20]	; (198f4 <_gpio_set_pin_function+0x80>)
   198de:	47a0      	blx	r4
}
   198e0:	bf00      	nop
   198e2:	3714      	adds	r7, #20
   198e4:	46bd      	mov	sp, r7
   198e6:	bd90      	pop	{r4, r7, pc}
   198e8:	41008000 	.word	0x41008000
   198ec:	000196cb 	.word	0x000196cb
   198f0:	0001966f 	.word	0x0001966f
   198f4:	00019611 	.word	0x00019611

000198f8 <gpio_set_pin_function>:
{
   198f8:	b580      	push	{r7, lr}
   198fa:	b082      	sub	sp, #8
   198fc:	af00      	add	r7, sp, #0
   198fe:	6078      	str	r0, [r7, #4]
   19900:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   19902:	6839      	ldr	r1, [r7, #0]
   19904:	6878      	ldr	r0, [r7, #4]
   19906:	4b03      	ldr	r3, [pc, #12]	; (19914 <gpio_set_pin_function+0x1c>)
   19908:	4798      	blx	r3
}
   1990a:	bf00      	nop
   1990c:	3708      	adds	r7, #8
   1990e:	46bd      	mov	sp, r7
   19910:	bd80      	pop	{r7, pc}
   19912:	bf00      	nop
   19914:	00019875 	.word	0x00019875

00019918 <gpio_set_pin_direction>:
{
   19918:	b580      	push	{r7, lr}
   1991a:	b082      	sub	sp, #8
   1991c:	af00      	add	r7, sp, #0
   1991e:	4603      	mov	r3, r0
   19920:	460a      	mov	r2, r1
   19922:	71fb      	strb	r3, [r7, #7]
   19924:	4613      	mov	r3, r2
   19926:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   19928:	79fb      	ldrb	r3, [r7, #7]
   1992a:	115b      	asrs	r3, r3, #5
   1992c:	b2d8      	uxtb	r0, r3
   1992e:	79fb      	ldrb	r3, [r7, #7]
   19930:	f003 031f 	and.w	r3, r3, #31
   19934:	2201      	movs	r2, #1
   19936:	fa02 f303 	lsl.w	r3, r2, r3
   1993a:	79ba      	ldrb	r2, [r7, #6]
   1993c:	4619      	mov	r1, r3
   1993e:	4b03      	ldr	r3, [pc, #12]	; (1994c <gpio_set_pin_direction+0x34>)
   19940:	4798      	blx	r3
}
   19942:	bf00      	nop
   19944:	3708      	adds	r7, #8
   19946:	46bd      	mov	sp, r7
   19948:	bd80      	pop	{r7, pc}
   1994a:	bf00      	nop
   1994c:	00019749 	.word	0x00019749

00019950 <gpio_set_pin_level>:
{
   19950:	b580      	push	{r7, lr}
   19952:	b082      	sub	sp, #8
   19954:	af00      	add	r7, sp, #0
   19956:	4603      	mov	r3, r0
   19958:	460a      	mov	r2, r1
   1995a:	71fb      	strb	r3, [r7, #7]
   1995c:	4613      	mov	r3, r2
   1995e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   19960:	79fb      	ldrb	r3, [r7, #7]
   19962:	115b      	asrs	r3, r3, #5
   19964:	b2d8      	uxtb	r0, r3
   19966:	79fb      	ldrb	r3, [r7, #7]
   19968:	f003 031f 	and.w	r3, r3, #31
   1996c:	2201      	movs	r2, #1
   1996e:	fa02 f303 	lsl.w	r3, r2, r3
   19972:	79ba      	ldrb	r2, [r7, #6]
   19974:	4619      	mov	r1, r3
   19976:	4b03      	ldr	r3, [pc, #12]	; (19984 <gpio_set_pin_level+0x34>)
   19978:	4798      	blx	r3
}
   1997a:	bf00      	nop
   1997c:	3708      	adds	r7, #8
   1997e:	46bd      	mov	sp, r7
   19980:	bd80      	pop	{r7, pc}
   19982:	bf00      	nop
   19984:	00019831 	.word	0x00019831

00019988 <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   19988:	b580      	push	{r7, lr}
   1998a:	b082      	sub	sp, #8
   1998c:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   1998e:	2100      	movs	r1, #0
   19990:	2008      	movs	r0, #8
   19992:	4b24      	ldr	r3, [pc, #144]	; (19a24 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   19994:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   19996:	2100      	movs	r1, #0
   19998:	202b      	movs	r0, #43	; 0x2b
   1999a:	4b22      	ldr	r3, [pc, #136]	; (19a24 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   1999c:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   1999e:	2100      	movs	r1, #0
   199a0:	202a      	movs	r0, #42	; 0x2a
   199a2:	4b20      	ldr	r3, [pc, #128]	; (19a24 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   199a4:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   199a6:	2102      	movs	r1, #2
   199a8:	2008      	movs	r0, #8
   199aa:	4b1f      	ldr	r3, [pc, #124]	; (19a28 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   199ac:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   199ae:	2102      	movs	r1, #2
   199b0:	202b      	movs	r0, #43	; 0x2b
   199b2:	4b1d      	ldr	r3, [pc, #116]	; (19a28 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   199b4:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   199b6:	2102      	movs	r1, #2
   199b8:	202a      	movs	r0, #42	; 0x2a
   199ba:	4b1b      	ldr	r3, [pc, #108]	; (19a28 <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   199bc:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   199be:	2101      	movs	r1, #1
   199c0:	2008      	movs	r0, #8
   199c2:	4b1a      	ldr	r3, [pc, #104]	; (19a2c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   199c4:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   199c6:	2100      	movs	r1, #0
   199c8:	202b      	movs	r0, #43	; 0x2b
   199ca:	4b18      	ldr	r3, [pc, #96]	; (19a2c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   199cc:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   199ce:	2100      	movs	r1, #0
   199d0:	202a      	movs	r0, #42	; 0x2a
   199d2:	4b16      	ldr	r3, [pc, #88]	; (19a2c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   199d4:	4798      	blx	r3

	delay_us(1);
   199d6:	2001      	movs	r0, #1
   199d8:	4b15      	ldr	r3, [pc, #84]	; (19a30 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   199da:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   199dc:	2300      	movs	r3, #0
   199de:	607b      	str	r3, [r7, #4]
   199e0:	687b      	ldr	r3, [r7, #4]
   199e2:	2b06      	cmp	r3, #6
   199e4:	dc11      	bgt.n	19a0a <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   199e6:	2101      	movs	r1, #1
   199e8:	202a      	movs	r0, #42	; 0x2a
   199ea:	4b10      	ldr	r3, [pc, #64]	; (19a2c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   199ec:	4798      	blx	r3
		delay_us(1);
   199ee:	2001      	movs	r0, #1
   199f0:	4b0f      	ldr	r3, [pc, #60]	; (19a30 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   199f2:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   199f4:	2100      	movs	r1, #0
   199f6:	202a      	movs	r0, #42	; 0x2a
   199f8:	4b0c      	ldr	r3, [pc, #48]	; (19a2c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   199fa:	4798      	blx	r3
		delay_us(1);
   199fc:	2001      	movs	r0, #1
   199fe:	4b0c      	ldr	r3, [pc, #48]	; (19a30 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   19a00:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   19a02:	687b      	ldr	r3, [r7, #4]
   19a04:	3301      	adds	r3, #1
   19a06:	607b      	str	r3, [r7, #4]
   19a08:	e7ea      	b.n	199e0 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   19a0a:	2101      	movs	r1, #1
   19a0c:	202b      	movs	r0, #43	; 0x2b
   19a0e:	4b07      	ldr	r3, [pc, #28]	; (19a2c <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   19a10:	4798      	blx	r3
	delay_us(1);
   19a12:	2001      	movs	r0, #1
   19a14:	4b06      	ldr	r3, [pc, #24]	; (19a30 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   19a16:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   19a18:	4b06      	ldr	r3, [pc, #24]	; (19a34 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   19a1a:	4798      	blx	r3
}
   19a1c:	bf00      	nop
   19a1e:	3708      	adds	r7, #8
   19a20:	46bd      	mov	sp, r7
   19a22:	bd80      	pop	{r7, pc}
   19a24:	000198f9 	.word	0x000198f9
   19a28:	00019919 	.word	0x00019919
   19a2c:	00019951 	.word	0x00019951
   19a30:	0000364d 	.word	0x0000364d
   19a34:	00002311 	.word	0x00002311

00019a38 <_ZN13N25Q256_ClassC1Ev>:

// default constructor
N25Q256_Class::N25Q256_Class()
   19a38:	b480      	push	{r7}
   19a3a:	b083      	sub	sp, #12
   19a3c:	af00      	add	r7, sp, #0
   19a3e:	6078      	str	r0, [r7, #4]
{

} //N25Q256_Class
   19a40:	687b      	ldr	r3, [r7, #4]
   19a42:	4618      	mov	r0, r3
   19a44:	370c      	adds	r7, #12
   19a46:	46bd      	mov	sp, r7
   19a48:	bc80      	pop	{r7}
   19a4a:	4770      	bx	lr

00019a4c <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   19a4c:	b480      	push	{r7}
   19a4e:	b083      	sub	sp, #12
   19a50:	af00      	add	r7, sp, #0
   19a52:	6078      	str	r0, [r7, #4]
   19a54:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   19a56:	687b      	ldr	r3, [r7, #4]
   19a58:	683a      	ldr	r2, [r7, #0]
   19a5a:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   19a5c:	687b      	ldr	r3, [r7, #4]
   19a5e:	4a04      	ldr	r2, [pc, #16]	; (19a70 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   19a60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   19a64:	687b      	ldr	r3, [r7, #4]
   19a66:	4618      	mov	r0, r3
   19a68:	370c      	adds	r7, #12
   19a6a:	46bd      	mov	sp, r7
   19a6c:	bc80      	pop	{r7}
   19a6e:	4770      	bx	lr
   19a70:	001fff00 	.word	0x001fff00

00019a74 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   19a74:	b480      	push	{r7}
   19a76:	b083      	sub	sp, #12
   19a78:	af00      	add	r7, sp, #0
   19a7a:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   19a7c:	687b      	ldr	r3, [r7, #4]
   19a7e:	4618      	mov	r0, r3
   19a80:	370c      	adds	r7, #12
   19a82:	46bd      	mov	sp, r7
   19a84:	bc80      	pop	{r7}
   19a86:	4770      	bx	lr

00019a88 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   19a88:	b580      	push	{r7, lr}
   19a8a:	b082      	sub	sp, #8
   19a8c:	af00      	add	r7, sp, #0
   19a8e:	6078      	str	r0, [r7, #4]
	xferDone=false;
   19a90:	687b      	ldr	r3, [r7, #4]
   19a92:	2200      	movs	r2, #0
   19a94:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   19a96:	6878      	ldr	r0, [r7, #4]
   19a98:	4b04      	ldr	r3, [pc, #16]	; (19aac <_ZN13N25Q256_Class4InitEv+0x24>)
   19a9a:	4798      	blx	r3
	return SelfTest();
   19a9c:	6878      	ldr	r0, [r7, #4]
   19a9e:	4b04      	ldr	r3, [pc, #16]	; (19ab0 <_ZN13N25Q256_Class4InitEv+0x28>)
   19aa0:	4798      	blx	r3
   19aa2:	4603      	mov	r3, r0
}
   19aa4:	4618      	mov	r0, r3
   19aa6:	3708      	adds	r7, #8
   19aa8:	46bd      	mov	sp, r7
   19aaa:	bd80      	pop	{r7, pc}
   19aac:	00019ab5 	.word	0x00019ab5
   19ab0:	00019c51 	.word	0x00019c51

00019ab4 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   19ab4:	b590      	push	{r4, r7, lr}
   19ab6:	b083      	sub	sp, #12
   19ab8:	af00      	add	r7, sp, #0
   19aba:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   19abc:	687b      	ldr	r3, [r7, #4]
   19abe:	685b      	ldr	r3, [r3, #4]
   19ac0:	4618      	mov	r0, r3
   19ac2:	4b08      	ldr	r3, [pc, #32]	; (19ae4 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   19ac4:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   19ac6:	687b      	ldr	r3, [r7, #4]
   19ac8:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   19aca:	2300      	movs	r3, #0
   19acc:	4a06      	ldr	r2, [pc, #24]	; (19ae8 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   19ace:	4807      	ldr	r0, [pc, #28]	; (19aec <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   19ad0:	4c07      	ldr	r4, [pc, #28]	; (19af0 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   19ad2:	47a0      	blx	r4
   19ad4:	4602      	mov	r2, r0
   19ad6:	687b      	ldr	r3, [r7, #4]
   19ad8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   19adc:	bf00      	nop
   19ade:	370c      	adds	r7, #12
   19ae0:	46bd      	mov	sp, r7
   19ae2:	bd90      	pop	{r4, r7, pc}
   19ae4:	00003b85 	.word	0x00003b85
   19ae8:	00019989 	.word	0x00019989
   19aec:	2000dc30 	.word	0x2000dc30
   19af0:	0000d515 	.word	0x0000d515

00019af4 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   19af4:	b580      	push	{r7, lr}
   19af6:	b084      	sub	sp, #16
   19af8:	af00      	add	r7, sp, #0
   19afa:	6078      	str	r0, [r7, #4]
   19afc:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   19afe:	687b      	ldr	r3, [r7, #4]
   19b00:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   19b04:	685b      	ldr	r3, [r3, #4]
   19b06:	689b      	ldr	r3, [r3, #8]
   19b08:	687a      	ldr	r2, [r7, #4]
   19b0a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   19b0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   19b12:	6839      	ldr	r1, [r7, #0]
   19b14:	4798      	blx	r3
   19b16:	4603      	mov	r3, r0
   19b18:	60fb      	str	r3, [r7, #12]
	return	e;
   19b1a:	68fb      	ldr	r3, [r7, #12]
}
   19b1c:	4618      	mov	r0, r3
   19b1e:	3710      	adds	r7, #16
   19b20:	46bd      	mov	sp, r7
   19b22:	bd80      	pop	{r7, pc}

00019b24 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   19b24:	b590      	push	{r4, r7, lr}
   19b26:	b087      	sub	sp, #28
   19b28:	af00      	add	r7, sp, #0
   19b2a:	60f8      	str	r0, [r7, #12]
   19b2c:	60b9      	str	r1, [r7, #8]
   19b2e:	607a      	str	r2, [r7, #4]
   19b30:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   19b32:	68fb      	ldr	r3, [r7, #12]
   19b34:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   19b38:	685b      	ldr	r3, [r3, #4]
   19b3a:	685c      	ldr	r4, [r3, #4]
   19b3c:	68fb      	ldr	r3, [r7, #12]
   19b3e:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   19b42:	683b      	ldr	r3, [r7, #0]
   19b44:	687a      	ldr	r2, [r7, #4]
   19b46:	68b9      	ldr	r1, [r7, #8]
   19b48:	47a0      	blx	r4
   19b4a:	4603      	mov	r3, r0
   19b4c:	617b      	str	r3, [r7, #20]
	return	w;
   19b4e:	697b      	ldr	r3, [r7, #20]
}
   19b50:	4618      	mov	r0, r3
   19b52:	371c      	adds	r7, #28
   19b54:	46bd      	mov	sp, r7
   19b56:	bd90      	pop	{r4, r7, pc}

00019b58 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   19b58:	b590      	push	{r4, r7, lr}
   19b5a:	b087      	sub	sp, #28
   19b5c:	af00      	add	r7, sp, #0
   19b5e:	60f8      	str	r0, [r7, #12]
   19b60:	60b9      	str	r1, [r7, #8]
   19b62:	607a      	str	r2, [r7, #4]
   19b64:	603b      	str	r3, [r7, #0]
	xferDone=false;
   19b66:	68fb      	ldr	r3, [r7, #12]
   19b68:	2200      	movs	r2, #0
   19b6a:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   19b6c:	68fb      	ldr	r3, [r7, #12]
   19b6e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   19b72:	685b      	ldr	r3, [r3, #4]
   19b74:	681c      	ldr	r4, [r3, #0]
   19b76:	68fb      	ldr	r3, [r7, #12]
   19b78:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   19b7c:	683b      	ldr	r3, [r7, #0]
   19b7e:	687a      	ldr	r2, [r7, #4]
   19b80:	68b9      	ldr	r1, [r7, #8]
   19b82:	47a0      	blx	r4
   19b84:	4603      	mov	r3, r0
   19b86:	617b      	str	r3, [r7, #20]
	return	r;
   19b88:	697b      	ldr	r3, [r7, #20]
}
   19b8a:	4618      	mov	r0, r3
   19b8c:	371c      	adds	r7, #28
   19b8e:	46bd      	mov	sp, r7
   19b90:	bd90      	pop	{r4, r7, pc}
	...

00019b94 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   19b94:	b580      	push	{r7, lr}
   19b96:	b082      	sub	sp, #8
   19b98:	af00      	add	r7, sp, #0
   19b9a:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   19b9c:	687a      	ldr	r2, [r7, #4]
   19b9e:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   19ba2:	f043 0310 	orr.w	r3, r3, #16
   19ba6:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   19baa:	687a      	ldr	r2, [r7, #4]
   19bac:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   19bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19bb4:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   19bb8:	687a      	ldr	r2, [r7, #4]
   19bba:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   19bbe:	f36f 1305 	bfc	r3, #4, #2
   19bc2:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   19bc6:	687b      	ldr	r3, [r7, #4]
   19bc8:	2205      	movs	r2, #5
   19bca:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   19bce:	687b      	ldr	r3, [r7, #4]
   19bd0:	2201      	movs	r2, #1
   19bd2:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   19bd6:	687b      	ldr	r3, [r7, #4]
   19bd8:	f203 2212 	addw	r2, r3, #530	; 0x212
   19bdc:	687b      	ldr	r3, [r7, #4]
   19bde:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   19be2:	687b      	ldr	r3, [r7, #4]
   19be4:	685a      	ldr	r2, [r3, #4]
   19be6:	687b      	ldr	r3, [r7, #4]
   19be8:	f503 7305 	add.w	r3, r3, #532	; 0x214
   19bec:	4619      	mov	r1, r3
   19bee:	4610      	mov	r0, r2
   19bf0:	4b04      	ldr	r3, [pc, #16]	; (19c04 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   19bf2:	4798      	blx	r3
		return status;
   19bf4:	687b      	ldr	r3, [r7, #4]
   19bf6:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   19bfa:	4618      	mov	r0, r3
   19bfc:	3708      	adds	r7, #8
   19bfe:	46bd      	mov	sp, r7
   19c00:	bd80      	pop	{r7, pc}
   19c02:	bf00      	nop
   19c04:	00003bfd 	.word	0x00003bfd

00019c08 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   19c08:	b580      	push	{r7, lr}
   19c0a:	b082      	sub	sp, #8
   19c0c:	af00      	add	r7, sp, #0
   19c0e:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   19c10:	6878      	ldr	r0, [r7, #4]
   19c12:	4b0e      	ldr	r3, [pc, #56]	; (19c4c <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   19c14:	4798      	blx	r3
   19c16:	4603      	mov	r3, r0
   19c18:	461a      	mov	r2, r3
   19c1a:	687b      	ldr	r3, [r7, #4]
   19c1c:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   19c20:	687b      	ldr	r3, [r7, #4]
   19c22:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   19c26:	f003 0301 	and.w	r3, r3, #1
   19c2a:	2b00      	cmp	r3, #0
   19c2c:	d000      	beq.n	19c30 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   19c2e:	e7ef      	b.n	19c10 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   19c30:	687b      	ldr	r3, [r7, #4]
   19c32:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   19c36:	f003 0301 	and.w	r3, r3, #1
   19c3a:	2b00      	cmp	r3, #0
   19c3c:	bf0c      	ite	eq
   19c3e:	2301      	moveq	r3, #1
   19c40:	2300      	movne	r3, #0
   19c42:	b2db      	uxtb	r3, r3
}
   19c44:	4618      	mov	r0, r3
   19c46:	3708      	adds	r7, #8
   19c48:	46bd      	mov	sp, r7
   19c4a:	bd80      	pop	{r7, pc}
   19c4c:	00019b95 	.word	0x00019b95

00019c50 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   19c50:	b590      	push	{r4, r7, lr}
   19c52:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   19c56:	b085      	sub	sp, #20
   19c58:	af00      	add	r7, sp, #0
   19c5a:	f107 0310 	add.w	r3, r7, #16
   19c5e:	3b0c      	subs	r3, #12
   19c60:	6018      	str	r0, [r3, #0]
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	currentAddress=20*QSPI_ERBLK;
   19c62:	f107 0310 	add.w	r3, r7, #16
   19c66:	3b0c      	subs	r3, #12
   19c68:	681b      	ldr	r3, [r3, #0]
   19c6a:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   19c6e:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	for (uint32_t i = 0; i <QSPI_ERBLK ; i++) {
   19c72:	2300      	movs	r3, #0
   19c74:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   19c78:	f102 020c 	add.w	r2, r2, #12
   19c7c:	6013      	str	r3, [r2, #0]
   19c7e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   19c82:	f103 030c 	add.w	r3, r3, #12
   19c86:	681b      	ldr	r3, [r3, #0]
   19c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   19c8c:	d22f      	bcs.n	19cee <_ZN13N25Q256_Class8SelfTestEv+0x9e>
		testTXBuffer[i] = (uint8_t)rand();
   19c8e:	4b60      	ldr	r3, [pc, #384]	; (19e10 <_ZN13N25Q256_Class8SelfTestEv+0x1c0>)
   19c90:	4798      	blx	r3
   19c92:	4603      	mov	r3, r0
   19c94:	b2d9      	uxtb	r1, r3
   19c96:	f107 0310 	add.w	r3, r7, #16
   19c9a:	3b08      	subs	r3, #8
   19c9c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   19ca0:	f102 020c 	add.w	r2, r2, #12
   19ca4:	6812      	ldr	r2, [r2, #0]
   19ca6:	4413      	add	r3, r2
   19ca8:	460a      	mov	r2, r1
   19caa:	701a      	strb	r2, [r3, #0]
		testRXBuffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
   19cac:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   19cb0:	f103 030c 	add.w	r3, r3, #12
   19cb4:	681b      	ldr	r3, [r3, #0]
   19cb6:	b2db      	uxtb	r3, r3
   19cb8:	425b      	negs	r3, r3
   19cba:	b2d9      	uxtb	r1, r3
   19cbc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   19cc0:	f103 0310 	add.w	r3, r3, #16
   19cc4:	3b08      	subs	r3, #8
   19cc6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   19cca:	f102 020c 	add.w	r2, r2, #12
   19cce:	6812      	ldr	r2, [r2, #0]
   19cd0:	4413      	add	r3, r2
   19cd2:	460a      	mov	r2, r1
   19cd4:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i <QSPI_ERBLK ; i++) {
   19cd6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   19cda:	f103 030c 	add.w	r3, r3, #12
   19cde:	681b      	ldr	r3, [r3, #0]
   19ce0:	3301      	adds	r3, #1
   19ce2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   19ce6:	f102 020c 	add.w	r2, r2, #12
   19cea:	6013      	str	r3, [r2, #0]
   19cec:	e7c7      	b.n	19c7e <_ZN13N25Q256_Class8SelfTestEv+0x2e>
	}

	//ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
	//WaitOnBusy();
	Erase(currentAddress);
   19cee:	f107 0310 	add.w	r3, r7, #16
   19cf2:	3b0c      	subs	r3, #12
   19cf4:	681b      	ldr	r3, [r3, #0]
   19cf6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   19cfa:	f107 0310 	add.w	r3, r7, #16
   19cfe:	3b0c      	subs	r3, #12
   19d00:	4611      	mov	r1, r2
   19d02:	6818      	ldr	r0, [r3, #0]
   19d04:	4b43      	ldr	r3, [pc, #268]	; (19e14 <_ZN13N25Q256_Class8SelfTestEv+0x1c4>)
   19d06:	4798      	blx	r3
	WaitOnBusy();
   19d08:	f107 0310 	add.w	r3, r7, #16
   19d0c:	3b0c      	subs	r3, #12
   19d0e:	6818      	ldr	r0, [r3, #0]
   19d10:	4b41      	ldr	r3, [pc, #260]	; (19e18 <_ZN13N25Q256_Class8SelfTestEv+0x1c8>)
   19d12:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   19d14:	f107 0310 	add.w	r3, r7, #16
   19d18:	3b0c      	subs	r3, #12
   19d1a:	681b      	ldr	r3, [r3, #0]
   19d1c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   19d20:	f107 0110 	add.w	r1, r7, #16
   19d24:	3908      	subs	r1, #8
   19d26:	f107 0010 	add.w	r0, r7, #16
   19d2a:	380c      	subs	r0, #12
   19d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   19d30:	6800      	ldr	r0, [r0, #0]
   19d32:	4c3a      	ldr	r4, [pc, #232]	; (19e1c <_ZN13N25Q256_Class8SelfTestEv+0x1cc>)
   19d34:	47a0      	blx	r4
	WaitOnBusy();
   19d36:	f107 0310 	add.w	r3, r7, #16
   19d3a:	3b0c      	subs	r3, #12
   19d3c:	6818      	ldr	r0, [r3, #0]
   19d3e:	4b36      	ldr	r3, [pc, #216]	; (19e18 <_ZN13N25Q256_Class8SelfTestEv+0x1c8>)
   19d40:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   19d42:	f107 0310 	add.w	r3, r7, #16
   19d46:	3b0c      	subs	r3, #12
   19d48:	681b      	ldr	r3, [r3, #0]
   19d4a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   19d4e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   19d52:	f101 0110 	add.w	r1, r1, #16
   19d56:	3908      	subs	r1, #8
   19d58:	f107 0010 	add.w	r0, r7, #16
   19d5c:	380c      	subs	r0, #12
   19d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   19d62:	6800      	ldr	r0, [r0, #0]
   19d64:	4c2e      	ldr	r4, [pc, #184]	; (19e20 <_ZN13N25Q256_Class8SelfTestEv+0x1d0>)
   19d66:	47a0      	blx	r4
	WaitOnBusy();
   19d68:	f107 0310 	add.w	r3, r7, #16
   19d6c:	3b0c      	subs	r3, #12
   19d6e:	6818      	ldr	r0, [r3, #0]
   19d70:	4b29      	ldr	r3, [pc, #164]	; (19e18 <_ZN13N25Q256_Class8SelfTestEv+0x1c8>)
   19d72:	4798      	blx	r3
	isOK	 = true;
   19d74:	f107 0310 	add.w	r3, r7, #16
   19d78:	3b0c      	subs	r3, #12
   19d7a:	681b      	ldr	r3, [r3, #0]
   19d7c:	2201      	movs	r2, #1
   19d7e:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   19d82:	2300      	movs	r3, #0
   19d84:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   19d88:	f102 0208 	add.w	r2, r2, #8
   19d8c:	6013      	str	r3, [r2, #0]
   19d8e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   19d92:	f103 0308 	add.w	r3, r3, #8
   19d96:	681b      	ldr	r3, [r3, #0]
   19d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   19d9c:	da2b      	bge.n	19df6 <_ZN13N25Q256_Class8SelfTestEv+0x1a6>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   19d9e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   19da2:	f103 0310 	add.w	r3, r3, #16
   19da6:	3b08      	subs	r3, #8
   19da8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   19dac:	f102 0208 	add.w	r2, r2, #8
   19db0:	6812      	ldr	r2, [r2, #0]
   19db2:	4413      	add	r3, r2
   19db4:	781a      	ldrb	r2, [r3, #0]
   19db6:	f107 0310 	add.w	r3, r7, #16
   19dba:	3b08      	subs	r3, #8
   19dbc:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   19dc0:	f101 0108 	add.w	r1, r1, #8
   19dc4:	6809      	ldr	r1, [r1, #0]
   19dc6:	440b      	add	r3, r1
   19dc8:	781b      	ldrb	r3, [r3, #0]
   19dca:	429a      	cmp	r2, r3
   19dcc:	d007      	beq.n	19dde <_ZN13N25Q256_Class8SelfTestEv+0x18e>
			isOK = false;
   19dce:	f107 0310 	add.w	r3, r7, #16
   19dd2:	3b0c      	subs	r3, #12
   19dd4:	681b      	ldr	r3, [r3, #0]
   19dd6:	2200      	movs	r2, #0
   19dd8:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   19ddc:	e00b      	b.n	19df6 <_ZN13N25Q256_Class8SelfTestEv+0x1a6>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   19dde:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   19de2:	f103 0308 	add.w	r3, r3, #8
   19de6:	681b      	ldr	r3, [r3, #0]
   19de8:	3301      	adds	r3, #1
   19dea:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   19dee:	f102 0208 	add.w	r2, r2, #8
   19df2:	6013      	str	r3, [r2, #0]
   19df4:	e7cb      	b.n	19d8e <_ZN13N25Q256_Class8SelfTestEv+0x13e>
		}
					
	}
	return	isOK;
   19df6:	f107 0310 	add.w	r3, r7, #16
   19dfa:	3b0c      	subs	r3, #12
   19dfc:	681b      	ldr	r3, [r3, #0]
   19dfe:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   19e02:	4618      	mov	r0, r3
   19e04:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   19e08:	3714      	adds	r7, #20
   19e0a:	46bd      	mov	sp, r7
   19e0c:	bd90      	pop	{r4, r7, pc}
   19e0e:	bf00      	nop
   19e10:	0001ad61 	.word	0x0001ad61
   19e14:	00019af5 	.word	0x00019af5
   19e18:	00019c09 	.word	0x00019c09
   19e1c:	00019b25 	.word	0x00019b25
   19e20:	00019b59 	.word	0x00019b59

00019e24 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   19e24:	b580      	push	{r7, lr}
   19e26:	b082      	sub	sp, #8
   19e28:	af00      	add	r7, sp, #0
   19e2a:	6078      	str	r0, [r7, #4]
   19e2c:	6039      	str	r1, [r7, #0]
   19e2e:	687b      	ldr	r3, [r7, #4]
   19e30:	2b01      	cmp	r3, #1
   19e32:	d10d      	bne.n	19e50 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   19e34:	683b      	ldr	r3, [r7, #0]
   19e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19e3a:	4293      	cmp	r3, r2
   19e3c:	d108      	bne.n	19e50 <_Z41__static_initialization_and_destruction_0ii+0x2c>
   19e3e:	4906      	ldr	r1, [pc, #24]	; (19e58 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   19e40:	4806      	ldr	r0, [pc, #24]	; (19e5c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   19e42:	4b07      	ldr	r3, [pc, #28]	; (19e60 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   19e44:	4798      	blx	r3
   19e46:	4a07      	ldr	r2, [pc, #28]	; (19e64 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   19e48:	4907      	ldr	r1, [pc, #28]	; (19e68 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   19e4a:	4804      	ldr	r0, [pc, #16]	; (19e5c <_Z41__static_initialization_and_destruction_0ii+0x38>)
   19e4c:	4b07      	ldr	r3, [pc, #28]	; (19e6c <_Z41__static_initialization_and_destruction_0ii+0x48>)
   19e4e:	4798      	blx	r3
   19e50:	bf00      	nop
   19e52:	3708      	adds	r7, #8
   19e54:	46bd      	mov	sp, r7
   19e56:	bd80      	pop	{r7, pc}
   19e58:	2000dfb8 	.word	0x2000dfb8
   19e5c:	2000dc40 	.word	0x2000dc40
   19e60:	00019a4d 	.word	0x00019a4d
   19e64:	20000000 	.word	0x20000000
   19e68:	00019a75 	.word	0x00019a75
   19e6c:	0001a611 	.word	0x0001a611

00019e70 <_GLOBAL__sub_I_ptrN25Q256Class>:
   19e70:	b580      	push	{r7, lr}
   19e72:	af00      	add	r7, sp, #0
   19e74:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19e78:	2001      	movs	r0, #1
   19e7a:	4b01      	ldr	r3, [pc, #4]	; (19e80 <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   19e7c:	4798      	blx	r3
   19e7e:	bd80      	pop	{r7, pc}
   19e80:	00019e25 	.word	0x00019e25

00019e84 <_ZN14Calendar_ClassC1Ev>:
	ptrCalendarClass->enlapsedTime=true;
	/* alarm expired */
}

// default constructor
Calendar_Class::Calendar_Class()
   19e84:	b580      	push	{r7, lr}
   19e86:	b082      	sub	sp, #8
   19e88:	af00      	add	r7, sp, #0
   19e8a:	6078      	str	r0, [r7, #4]
   19e8c:	687b      	ldr	r3, [r7, #4]
   19e8e:	4618      	mov	r0, r3
   19e90:	4b06      	ldr	r3, [pc, #24]	; (19eac <_ZN14Calendar_ClassC1Ev+0x28>)
   19e92:	4798      	blx	r3
   19e94:	4a06      	ldr	r2, [pc, #24]	; (19eb0 <_ZN14Calendar_ClassC1Ev+0x2c>)
   19e96:	687b      	ldr	r3, [r7, #4]
   19e98:	601a      	str	r2, [r3, #0]
{
	ptrCalendarClass=this;
   19e9a:	4a06      	ldr	r2, [pc, #24]	; (19eb4 <_ZN14Calendar_ClassC1Ev+0x30>)
   19e9c:	687b      	ldr	r3, [r7, #4]
   19e9e:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   19ea0:	687b      	ldr	r3, [r7, #4]
   19ea2:	4618      	mov	r0, r3
   19ea4:	3708      	adds	r7, #8
   19ea6:	46bd      	mov	sp, r7
   19ea8:	bd80      	pop	{r7, pc}
   19eaa:	bf00      	nop
   19eac:	0001a5d1 	.word	0x0001a5d1
   19eb0:	0001c214 	.word	0x0001c214
   19eb4:	2000de70 	.word	0x2000de70

00019eb8 <_ZN14Calendar_ClassC1EP19calendar_descriptor>:

// default constructor
Calendar_Class::Calendar_Class(calendar_descriptor *d)
   19eb8:	b580      	push	{r7, lr}
   19eba:	b082      	sub	sp, #8
   19ebc:	af00      	add	r7, sp, #0
   19ebe:	6078      	str	r0, [r7, #4]
   19ec0:	6039      	str	r1, [r7, #0]
   19ec2:	687b      	ldr	r3, [r7, #4]
   19ec4:	4618      	mov	r0, r3
   19ec6:	4b08      	ldr	r3, [pc, #32]	; (19ee8 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x30>)
   19ec8:	4798      	blx	r3
   19eca:	4a08      	ldr	r2, [pc, #32]	; (19eec <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x34>)
   19ecc:	687b      	ldr	r3, [r7, #4]
   19ece:	601a      	str	r2, [r3, #0]
{
	ptrCalendar=d;
   19ed0:	687b      	ldr	r3, [r7, #4]
   19ed2:	683a      	ldr	r2, [r7, #0]
   19ed4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ptrCalendarClass=this;
   19ed8:	4a05      	ldr	r2, [pc, #20]	; (19ef0 <_ZN14Calendar_ClassC1EP19calendar_descriptor+0x38>)
   19eda:	687b      	ldr	r3, [r7, #4]
   19edc:	6013      	str	r3, [r2, #0]
	//ptrMemory=&memory;
} //Calendar_Class
   19ede:	687b      	ldr	r3, [r7, #4]
   19ee0:	4618      	mov	r0, r3
   19ee2:	3708      	adds	r7, #8
   19ee4:	46bd      	mov	sp, r7
   19ee6:	bd80      	pop	{r7, pc}
   19ee8:	0001a5d1 	.word	0x0001a5d1
   19eec:	0001c214 	.word	0x0001c214
   19ef0:	2000de70 	.word	0x2000de70

00019ef4 <_ZN14Calendar_ClassD1Ev>:

// default destructor
Calendar_Class::~Calendar_Class()
   19ef4:	b580      	push	{r7, lr}
   19ef6:	b082      	sub	sp, #8
   19ef8:	af00      	add	r7, sp, #0
   19efa:	6078      	str	r0, [r7, #4]
   19efc:	4a05      	ldr	r2, [pc, #20]	; (19f14 <_ZN14Calendar_ClassD1Ev+0x20>)
   19efe:	687b      	ldr	r3, [r7, #4]
   19f00:	601a      	str	r2, [r3, #0]
   19f02:	687b      	ldr	r3, [r7, #4]
   19f04:	4618      	mov	r0, r3
   19f06:	4b04      	ldr	r3, [pc, #16]	; (19f18 <_ZN14Calendar_ClassD1Ev+0x24>)
   19f08:	4798      	blx	r3
{
} //~Calendar_Class
   19f0a:	687b      	ldr	r3, [r7, #4]
   19f0c:	4618      	mov	r0, r3
   19f0e:	3708      	adds	r7, #8
   19f10:	46bd      	mov	sp, r7
   19f12:	bd80      	pop	{r7, pc}
   19f14:	0001c214 	.word	0x0001c214
   19f18:	0001a5f1 	.word	0x0001a5f1

00019f1c <_ZN14Calendar_Class4InitE18calendar_date_time>:
	SaveCurrentDateTime();
	
}


bool	Calendar_Class::Init(calendar_date_time dt_memory){
   19f1c:	b580      	push	{r7, lr}
   19f1e:	b084      	sub	sp, #16
   19f20:	af00      	add	r7, sp, #0
   19f22:	60f8      	str	r0, [r7, #12]
   19f24:	1d3b      	adds	r3, r7, #4
   19f26:	e883 0006 	stmia.w	r3, {r1, r2}

	calendar_enable(ptrCalendar);
   19f2a:	68fb      	ldr	r3, [r7, #12]
   19f2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   19f30:	4618      	mov	r0, r3
   19f32:	4b4c      	ldr	r3, [pc, #304]	; (1a064 <_ZN14Calendar_Class4InitE18calendar_date_time+0x148>)
   19f34:	4798      	blx	r3
	
	InitReferenceDates();
   19f36:	68f8      	ldr	r0, [r7, #12]
   19f38:	4b4b      	ldr	r3, [pc, #300]	; (1a068 <_ZN14Calendar_Class4InitE18calendar_date_time+0x14c>)
   19f3a:	4798      	blx	r3
	lastDateTime=dt_memory;
   19f3c:	68fb      	ldr	r3, [r7, #12]
   19f3e:	3360      	adds	r3, #96	; 0x60
   19f40:	1d3a      	adds	r2, r7, #4
   19f42:	e892 0003 	ldmia.w	r2, {r0, r1}
   19f46:	e883 0003 	stmia.w	r3, {r0, r1}
	//memory.ReadAddress((uint8_t*)handler,CALENDER_ADDRESS,QSPI_BUFFER_SIZE);
	lastTimestamp=convert_datetime_to_timestamp(&lastDateTime);
   19f4a:	68fb      	ldr	r3, [r7, #12]
   19f4c:	681b      	ldr	r3, [r3, #0]
   19f4e:	3304      	adds	r3, #4
   19f50:	681b      	ldr	r3, [r3, #0]
   19f52:	68fa      	ldr	r2, [r7, #12]
   19f54:	3260      	adds	r2, #96	; 0x60
   19f56:	4611      	mov	r1, r2
   19f58:	68f8      	ldr	r0, [r7, #12]
   19f5a:	4798      	blx	r3
   19f5c:	4602      	mov	r2, r0
   19f5e:	68fb      	ldr	r3, [r7, #12]
   19f60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	maxTimestamp=convert_datetime_to_timestamp(&maxDateTime);
   19f64:	68fb      	ldr	r3, [r7, #12]
   19f66:	681b      	ldr	r3, [r3, #0]
   19f68:	3304      	adds	r3, #4
   19f6a:	681b      	ldr	r3, [r3, #0]
   19f6c:	68fa      	ldr	r2, [r7, #12]
   19f6e:	326c      	adds	r2, #108	; 0x6c
   19f70:	4611      	mov	r1, r2
   19f72:	68f8      	ldr	r0, [r7, #12]
   19f74:	4798      	blx	r3
   19f76:	4602      	mov	r2, r0
   19f78:	68fb      	ldr	r3, [r7, #12]
   19f7a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	erasedTimestamp=convert_datetime_to_timestamp(&erasedDateTime);
   19f7e:	68fb      	ldr	r3, [r7, #12]
   19f80:	681b      	ldr	r3, [r3, #0]
   19f82:	3304      	adds	r3, #4
   19f84:	681b      	ldr	r3, [r3, #0]
   19f86:	68fa      	ldr	r2, [r7, #12]
   19f88:	327c      	adds	r2, #124	; 0x7c
   19f8a:	4611      	mov	r1, r2
   19f8c:	68f8      	ldr	r0, [r7, #12]
   19f8e:	4798      	blx	r3
   19f90:	4602      	mov	r2, r0
   19f92:	68fb      	ldr	r3, [r7, #12]
   19f94:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	nullTimestamp=convert_datetime_to_timestamp(&nullDateTime);
   19f98:	68fb      	ldr	r3, [r7, #12]
   19f9a:	681b      	ldr	r3, [r3, #0]
   19f9c:	3304      	adds	r3, #4
   19f9e:	681b      	ldr	r3, [r3, #0]
   19fa0:	68fa      	ldr	r2, [r7, #12]
   19fa2:	3284      	adds	r2, #132	; 0x84
   19fa4:	4611      	mov	r1, r2
   19fa6:	68f8      	ldr	r0, [r7, #12]
   19fa8:	4798      	blx	r3
   19faa:	4602      	mov	r2, r0
   19fac:	68fb      	ldr	r3, [r7, #12]
   19fae:	669a      	str	r2, [r3, #104]	; 0x68
	SetCompilationDateTime();
   19fb0:	68f8      	ldr	r0, [r7, #12]
   19fb2:	4b2e      	ldr	r3, [pc, #184]	; (1a06c <_ZN14Calendar_Class4InitE18calendar_date_time+0x150>)
   19fb4:	4798      	blx	r3
	compilationTimestamp=convert_datetime_to_timestamp(&compilationDateTime);
   19fb6:	68fb      	ldr	r3, [r7, #12]
   19fb8:	681b      	ldr	r3, [r3, #0]
   19fba:	3304      	adds	r3, #4
   19fbc:	681b      	ldr	r3, [r3, #0]
   19fbe:	68fa      	ldr	r2, [r7, #12]
   19fc0:	3274      	adds	r2, #116	; 0x74
   19fc2:	4611      	mov	r1, r2
   19fc4:	68f8      	ldr	r0, [r7, #12]
   19fc6:	4798      	blx	r3
   19fc8:	4602      	mov	r2, r0
   19fca:	68fb      	ldr	r3, [r7, #12]
   19fcc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	if ((lastTimestamp>maxTimestamp)||(lastTimestamp==erasedTimestamp)||(lastTimestamp==nullTimestamp))
   19fd0:	68fb      	ldr	r3, [r7, #12]
   19fd2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   19fd6:	68fb      	ldr	r3, [r7, #12]
   19fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   19fdc:	429a      	cmp	r2, r3
   19fde:	d80e      	bhi.n	19ffe <_ZN14Calendar_Class4InitE18calendar_date_time+0xe2>
   19fe0:	68fb      	ldr	r3, [r7, #12]
   19fe2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   19fe6:	68fb      	ldr	r3, [r7, #12]
   19fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   19fec:	429a      	cmp	r2, r3
   19fee:	d006      	beq.n	19ffe <_ZN14Calendar_Class4InitE18calendar_date_time+0xe2>
   19ff0:	68fb      	ldr	r3, [r7, #12]
   19ff2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   19ff6:	68fb      	ldr	r3, [r7, #12]
   19ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   19ffa:	429a      	cmp	r2, r3
   19ffc:	d106      	bne.n	1a00c <_ZN14Calendar_Class4InitE18calendar_date_time+0xf0>
	{
		SetDateTime(&compilationDateTime);
   19ffe:	68fb      	ldr	r3, [r7, #12]
   1a000:	3374      	adds	r3, #116	; 0x74
   1a002:	4619      	mov	r1, r3
   1a004:	68f8      	ldr	r0, [r7, #12]
   1a006:	4b1a      	ldr	r3, [pc, #104]	; (1a070 <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
   1a008:	4798      	blx	r3
   1a00a:	e022      	b.n	1a052 <_ZN14Calendar_Class4InitE18calendar_date_time+0x136>
	}
	else
	{
		if (lastTimestamp<compilationTimestamp)
   1a00c:	68fb      	ldr	r3, [r7, #12]
   1a00e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1a012:	68fb      	ldr	r3, [r7, #12]
   1a014:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1a018:	429a      	cmp	r2, r3
   1a01a:	d206      	bcs.n	1a02a <_ZN14Calendar_Class4InitE18calendar_date_time+0x10e>
		{
			SetDateTime(&compilationDateTime);
   1a01c:	68fb      	ldr	r3, [r7, #12]
   1a01e:	3374      	adds	r3, #116	; 0x74
   1a020:	4619      	mov	r1, r3
   1a022:	68f8      	ldr	r0, [r7, #12]
   1a024:	4b12      	ldr	r3, [pc, #72]	; (1a070 <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
   1a026:	4798      	blx	r3
   1a028:	e013      	b.n	1a052 <_ZN14Calendar_Class4InitE18calendar_date_time+0x136>
		}
		else
		{
			if (lastTimestamp==nullTimestamp)
   1a02a:	68fb      	ldr	r3, [r7, #12]
   1a02c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1a030:	68fb      	ldr	r3, [r7, #12]
   1a032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1a034:	429a      	cmp	r2, r3
   1a036:	d106      	bne.n	1a046 <_ZN14Calendar_Class4InitE18calendar_date_time+0x12a>
			{
				SetDateTime(&compilationDateTime);
   1a038:	68fb      	ldr	r3, [r7, #12]
   1a03a:	3374      	adds	r3, #116	; 0x74
   1a03c:	4619      	mov	r1, r3
   1a03e:	68f8      	ldr	r0, [r7, #12]
   1a040:	4b0b      	ldr	r3, [pc, #44]	; (1a070 <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
   1a042:	4798      	blx	r3
   1a044:	e005      	b.n	1a052 <_ZN14Calendar_Class4InitE18calendar_date_time+0x136>
			}
			else
			{
				SetDateTime(&lastDateTime);
   1a046:	68fb      	ldr	r3, [r7, #12]
   1a048:	3360      	adds	r3, #96	; 0x60
   1a04a:	4619      	mov	r1, r3
   1a04c:	68f8      	ldr	r0, [r7, #12]
   1a04e:	4b08      	ldr	r3, [pc, #32]	; (1a070 <_ZN14Calendar_Class4InitE18calendar_date_time+0x154>)
   1a050:	4798      	blx	r3
			}
			
		}
	}
	enlapsedTime=false;
   1a052:	68fb      	ldr	r3, [r7, #12]
   1a054:	2200      	movs	r2, #0
   1a056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	
	return true;
   1a05a:	2301      	movs	r3, #1
}
   1a05c:	4618      	mov	r0, r3
   1a05e:	3710      	adds	r7, #16
   1a060:	46bd      	mov	sp, r7
   1a062:	bd80      	pop	{r7, pc}
   1a064:	000031d9 	.word	0x000031d9
   1a068:	0001a075 	.word	0x0001a075
   1a06c:	0001a11d 	.word	0x0001a11d
   1a070:	0001a321 	.word	0x0001a321

0001a074 <_ZN14Calendar_Class18InitReferenceDatesEv>:
	calendar_set_alarm(ptrCalendar, &alarm, alarm_calendar);
}

	
	
void	Calendar_Class::InitReferenceDates(void){
   1a074:	b480      	push	{r7}
   1a076:	b083      	sub	sp, #12
   1a078:	af00      	add	r7, sp, #0
   1a07a:	6078      	str	r0, [r7, #4]
	

		maxDateTime.date.year  = 2050;
   1a07c:	687b      	ldr	r3, [r7, #4]
   1a07e:	f640 0202 	movw	r2, #2050	; 0x802
   1a082:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
		maxDateTime.date.month = 12;
   1a086:	687b      	ldr	r3, [r7, #4]
   1a088:	220c      	movs	r2, #12
   1a08a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		maxDateTime.date.day   = 31;
   1a08e:	687b      	ldr	r3, [r7, #4]
   1a090:	221f      	movs	r2, #31
   1a092:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

		maxDateTime.time.hour = 12;
   1a096:	687b      	ldr	r3, [r7, #4]
   1a098:	220c      	movs	r2, #12
   1a09a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		maxDateTime.time.min  = 59;
   1a09e:	687b      	ldr	r3, [r7, #4]
   1a0a0:	223b      	movs	r2, #59	; 0x3b
   1a0a2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		maxDateTime.time.sec  = 59;
   1a0a6:	687b      	ldr	r3, [r7, #4]
   1a0a8:	223b      	movs	r2, #59	; 0x3b
   1a0aa:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		
		erasedDateTime.date.year  =0xffff;
   1a0ae:	687b      	ldr	r3, [r7, #4]
   1a0b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a0b4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		erasedDateTime.date.month = 0xff;
   1a0b8:	687b      	ldr	r3, [r7, #4]
   1a0ba:	22ff      	movs	r2, #255	; 0xff
   1a0bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		erasedDateTime.date.day   = 0xff;
   1a0c0:	687b      	ldr	r3, [r7, #4]
   1a0c2:	22ff      	movs	r2, #255	; 0xff
   1a0c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		erasedDateTime.time.hour = 0xff;
   1a0c8:	687b      	ldr	r3, [r7, #4]
   1a0ca:	22ff      	movs	r2, #255	; 0xff
   1a0cc:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		erasedDateTime.time.min  = 0xff;
   1a0d0:	687b      	ldr	r3, [r7, #4]
   1a0d2:	22ff      	movs	r2, #255	; 0xff
   1a0d4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		erasedDateTime.time.sec  = 0xff;
   1a0d8:	687b      	ldr	r3, [r7, #4]
   1a0da:	22ff      	movs	r2, #255	; 0xff
   1a0dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		
		nullDateTime.date.year  = 0x0;
   1a0e0:	687b      	ldr	r3, [r7, #4]
   1a0e2:	2200      	movs	r2, #0
   1a0e4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		nullDateTime.date.month = 0x0;
   1a0e8:	687b      	ldr	r3, [r7, #4]
   1a0ea:	2200      	movs	r2, #0
   1a0ec:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		nullDateTime.date.day   = 0x0;
   1a0f0:	687b      	ldr	r3, [r7, #4]
   1a0f2:	2200      	movs	r2, #0
   1a0f4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

		nullDateTime.time.hour = 0x0;
   1a0f8:	687b      	ldr	r3, [r7, #4]
   1a0fa:	2200      	movs	r2, #0
   1a0fc:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		nullDateTime.time.min  = 0x0;
   1a100:	687b      	ldr	r3, [r7, #4]
   1a102:	2200      	movs	r2, #0
   1a104:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		nullDateTime.time.sec  = 0x0;
   1a108:	687b      	ldr	r3, [r7, #4]
   1a10a:	2200      	movs	r2, #0
   1a10c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}
   1a110:	bf00      	nop
   1a112:	370c      	adds	r7, #12
   1a114:	46bd      	mov	sp, r7
   1a116:	bc80      	pop	{r7}
   1a118:	4770      	bx	lr
	...

0001a11c <_ZN14Calendar_Class22SetCompilationDateTimeEv>:
	
void	Calendar_Class::SetCompilationDateTime(void){
   1a11c:	b480      	push	{r7}
   1a11e:	b083      	sub	sp, #12
   1a120:	af00      	add	r7, sp, #0
   1a122:	6078      	str	r0, [r7, #4]
		

		compilationDateTime.date.year  =((((__DATE__ [7]-'0')*10+(__DATE__[8]-'0'))*10+(__DATE__ [9]-'0'))*10+(__DATE__ [10]-'0')) ;
   1a124:	2332      	movs	r3, #50	; 0x32
   1a126:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1a12a:	4613      	mov	r3, r2
   1a12c:	009b      	lsls	r3, r3, #2
   1a12e:	4413      	add	r3, r2
   1a130:	005b      	lsls	r3, r3, #1
   1a132:	461a      	mov	r2, r3
   1a134:	2330      	movs	r3, #48	; 0x30
   1a136:	3b30      	subs	r3, #48	; 0x30
   1a138:	441a      	add	r2, r3
   1a13a:	4613      	mov	r3, r2
   1a13c:	009b      	lsls	r3, r3, #2
   1a13e:	4413      	add	r3, r2
   1a140:	005b      	lsls	r3, r3, #1
   1a142:	461a      	mov	r2, r3
   1a144:	2332      	movs	r3, #50	; 0x32
   1a146:	3b30      	subs	r3, #48	; 0x30
   1a148:	4413      	add	r3, r2
   1a14a:	b29b      	uxth	r3, r3
   1a14c:	461a      	mov	r2, r3
   1a14e:	0092      	lsls	r2, r2, #2
   1a150:	4413      	add	r3, r2
   1a152:	005b      	lsls	r3, r3, #1
   1a154:	b29a      	uxth	r2, r3
   1a156:	2331      	movs	r3, #49	; 0x31
   1a158:	b29b      	uxth	r3, r3
   1a15a:	4413      	add	r3, r2
   1a15c:	b29b      	uxth	r3, r3
   1a15e:	3b30      	subs	r3, #48	; 0x30
   1a160:	b29a      	uxth	r2, r3
   1a162:	687b      	ldr	r3, [r7, #4]
   1a164:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   1a168:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'y' ? 4                               \
                                : __DATE__ [2] == 'l' ? 6                               \
                                : __DATE__ [2] == 'g' ? 7                               \
                                : __DATE__ [2] == 'p' ? 8                               \
                                : __DATE__ [2] == 't' ? 9                               \
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a16a:	2b6e      	cmp	r3, #110	; 0x6e
   1a16c:	d106      	bne.n	1a17c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x60>
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   1a16e:	2365      	movs	r3, #101	; 0x65
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a170:	2b61      	cmp	r3, #97	; 0x61
   1a172:	d101      	bne.n	1a178 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x5c>
   1a174:	2301      	movs	r3, #1
   1a176:	e02f      	b.n	1a1d8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1a178:	2306      	movs	r3, #6
   1a17a:	e02d      	b.n	1a1d8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'b' ? 1                               \
   1a17c:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a17e:	2b62      	cmp	r3, #98	; 0x62
   1a180:	d029      	beq.n	1a1d6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xba>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   1a182:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a184:	2b72      	cmp	r3, #114	; 0x72
   1a186:	d106      	bne.n	1a196 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x7a>
                                : __DATE__ [2] == 'r' ? (__DATE__ [0] == 'M' ?  2 : 3)  \
   1a188:	2346      	movs	r3, #70	; 0x46
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a18a:	2b4d      	cmp	r3, #77	; 0x4d
   1a18c:	d101      	bne.n	1a192 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x76>
   1a18e:	2303      	movs	r3, #3
   1a190:	e022      	b.n	1a1d8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1a192:	2304      	movs	r3, #4
   1a194:	e020      	b.n	1a1d8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
                                : __DATE__ [2] == 'y' ? 4                               \
   1a196:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a198:	2b79      	cmp	r3, #121	; 0x79
   1a19a:	d01a      	beq.n	1a1d2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb6>
                                : __DATE__ [2] == 'l' ? 6                               \
   1a19c:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a19e:	2b6c      	cmp	r3, #108	; 0x6c
   1a1a0:	d015      	beq.n	1a1ce <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xb2>
                                : __DATE__ [2] == 'g' ? 7                               \
   1a1a2:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a1a4:	2b67      	cmp	r3, #103	; 0x67
   1a1a6:	d010      	beq.n	1a1ca <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xae>
                                : __DATE__ [2] == 'p' ? 8                               \
   1a1a8:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a1aa:	2b70      	cmp	r3, #112	; 0x70
   1a1ac:	d00b      	beq.n	1a1c6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xaa>
                                : __DATE__ [2] == 't' ? 9                               \
   1a1ae:	2362      	movs	r3, #98	; 0x62
                                : __DATE__ [2] == 'v' ? 10 : 11) +1);
   1a1b0:	2b74      	cmp	r3, #116	; 0x74
   1a1b2:	d006      	beq.n	1a1c2 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa6>
   1a1b4:	2362      	movs	r3, #98	; 0x62
   1a1b6:	2b76      	cmp	r3, #118	; 0x76
   1a1b8:	d101      	bne.n	1a1be <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xa2>
   1a1ba:	230b      	movs	r3, #11
   1a1bc:	e00c      	b.n	1a1d8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1a1be:	230c      	movs	r3, #12
   1a1c0:	e00a      	b.n	1a1d8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1a1c2:	230a      	movs	r3, #10
   1a1c4:	e008      	b.n	1a1d8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1a1c6:	2309      	movs	r3, #9
   1a1c8:	e006      	b.n	1a1d8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1a1ca:	2308      	movs	r3, #8
   1a1cc:	e004      	b.n	1a1d8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1a1ce:	2307      	movs	r3, #7
   1a1d0:	e002      	b.n	1a1d8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1a1d2:	2305      	movs	r3, #5
   1a1d4:	e000      	b.n	1a1d8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xbc>
   1a1d6:	2302      	movs	r3, #2
		compilationDateTime.date.month = ((  __DATE__ [2] == 'n' ? (__DATE__ [1] == 'a' ? 0 : 5)   \
   1a1d8:	687a      	ldr	r2, [r7, #4]
   1a1da:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
		compilationDateTime.date.day   = ((__DATE__ [4]==' ' ? 0 : __DATE__  [4]-'0')*10+(__DATE__[5]-'0'));
   1a1de:	2320      	movs	r3, #32
   1a1e0:	2b20      	cmp	r3, #32
   1a1e2:	d008      	beq.n	1a1f6 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xda>
   1a1e4:	2320      	movs	r3, #32
   1a1e6:	3b30      	subs	r3, #48	; 0x30
   1a1e8:	b2db      	uxtb	r3, r3
   1a1ea:	461a      	mov	r2, r3
   1a1ec:	0092      	lsls	r2, r2, #2
   1a1ee:	4413      	add	r3, r2
   1a1f0:	005b      	lsls	r3, r3, #1
   1a1f2:	b2db      	uxtb	r3, r3
   1a1f4:	e000      	b.n	1a1f8 <_ZN14Calendar_Class22SetCompilationDateTimeEv+0xdc>
   1a1f6:	2300      	movs	r3, #0
   1a1f8:	2238      	movs	r2, #56	; 0x38
   1a1fa:	4413      	add	r3, r2
   1a1fc:	b2db      	uxtb	r3, r3
   1a1fe:	3b30      	subs	r3, #48	; 0x30
   1a200:	b2da      	uxtb	r2, r3
   1a202:	687b      	ldr	r3, [r7, #4]
   1a204:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

		compilationDateTime.time.hour = (((__TIME__[0]-'0')*10) + (__TIME__[1]-'0'));
   1a208:	2331      	movs	r3, #49	; 0x31
   1a20a:	3b30      	subs	r3, #48	; 0x30
   1a20c:	b2db      	uxtb	r3, r3
   1a20e:	461a      	mov	r2, r3
   1a210:	0092      	lsls	r2, r2, #2
   1a212:	4413      	add	r3, r2
   1a214:	005b      	lsls	r3, r3, #1
   1a216:	b2db      	uxtb	r3, r3
   1a218:	2230      	movs	r2, #48	; 0x30
   1a21a:	4413      	add	r3, r2
   1a21c:	b2db      	uxtb	r3, r3
   1a21e:	3b30      	subs	r3, #48	; 0x30
   1a220:	b2da      	uxtb	r2, r3
   1a222:	687b      	ldr	r3, [r7, #4]
   1a224:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		compilationDateTime.time.min  = (((__TIME__[3]-'0')*10) + (__TIME__[4]-'0'));
   1a228:	2331      	movs	r3, #49	; 0x31
   1a22a:	3b30      	subs	r3, #48	; 0x30
   1a22c:	b2db      	uxtb	r3, r3
   1a22e:	461a      	mov	r2, r3
   1a230:	0092      	lsls	r2, r2, #2
   1a232:	4413      	add	r3, r2
   1a234:	005b      	lsls	r3, r3, #1
   1a236:	b2db      	uxtb	r3, r3
   1a238:	2236      	movs	r2, #54	; 0x36
   1a23a:	4413      	add	r3, r2
   1a23c:	b2db      	uxtb	r3, r3
   1a23e:	3b30      	subs	r3, #48	; 0x30
   1a240:	b2da      	uxtb	r2, r3
   1a242:	687b      	ldr	r3, [r7, #4]
   1a244:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		compilationDateTime.time.sec  = (((__TIME__[6]-'0')*10) + (__TIME__[7]-'0'));
   1a248:	2330      	movs	r3, #48	; 0x30
   1a24a:	3b30      	subs	r3, #48	; 0x30
   1a24c:	b2db      	uxtb	r3, r3
   1a24e:	461a      	mov	r2, r3
   1a250:	0092      	lsls	r2, r2, #2
   1a252:	4413      	add	r3, r2
   1a254:	005b      	lsls	r3, r3, #1
   1a256:	b2db      	uxtb	r3, r3
   1a258:	2233      	movs	r2, #51	; 0x33
   1a25a:	4413      	add	r3, r2
   1a25c:	b2db      	uxtb	r3, r3
   1a25e:	3b30      	subs	r3, #48	; 0x30
   1a260:	b2da      	uxtb	r2, r3
   1a262:	687b      	ldr	r3, [r7, #4]
   1a264:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		compiled_time=__TIME__;
   1a268:	687b      	ldr	r3, [r7, #4]
   1a26a:	4a04      	ldr	r2, [pc, #16]	; (1a27c <_ZN14Calendar_Class22SetCompilationDateTimeEv+0x160>)
   1a26c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	}
   1a270:	bf00      	nop
   1a272:	370c      	adds	r7, #12
   1a274:	46bd      	mov	sp, r7
   1a276:	bc80      	pop	{r7}
   1a278:	4770      	bx	lr
   1a27a:	bf00      	nop
   1a27c:	0001c200 	.word	0x0001c200

0001a280 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time>:
	return (uint32_t)result;
}
uint32_t	Calendar_Class::GetDateTime(void){
	return (uint32_t)calendar_get_date_time(ptrCalendar,&dateTime);
}
uint32_t	Calendar_Class::GetDateTime(calendar_date_time *cdt){
   1a280:	b580      	push	{r7, lr}
   1a282:	b082      	sub	sp, #8
   1a284:	af00      	add	r7, sp, #0
   1a286:	6078      	str	r0, [r7, #4]
   1a288:	6039      	str	r1, [r7, #0]
	
	return (uint32_t)calendar_get_date_time(ptrCalendar,cdt);
   1a28a:	687b      	ldr	r3, [r7, #4]
   1a28c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1a290:	6839      	ldr	r1, [r7, #0]
   1a292:	4618      	mov	r0, r3
   1a294:	4b03      	ldr	r3, [pc, #12]	; (1a2a4 <_ZN14Calendar_Class11GetDateTimeEP18calendar_date_time+0x24>)
   1a296:	4798      	blx	r3
   1a298:	4603      	mov	r3, r0
}
   1a29a:	4618      	mov	r0, r3
   1a29c:	3708      	adds	r7, #8
   1a29e:	46bd      	mov	sp, r7
   1a2a0:	bd80      	pop	{r7, pc}
   1a2a2:	bf00      	nop
   1a2a4:	00003329 	.word	0x00003329

0001a2a8 <_ZN14Calendar_Class9leap_yearEt>:

bool Calendar_Class::leap_year(uint16_t year)
{
   1a2a8:	b480      	push	{r7}
   1a2aa:	b083      	sub	sp, #12
   1a2ac:	af00      	add	r7, sp, #0
   1a2ae:	6078      	str	r0, [r7, #4]
   1a2b0:	460b      	mov	r3, r1
   1a2b2:	807b      	strh	r3, [r7, #2]
	if (year & 3) {
   1a2b4:	887b      	ldrh	r3, [r7, #2]
   1a2b6:	f003 0303 	and.w	r3, r3, #3
   1a2ba:	2b00      	cmp	r3, #0
   1a2bc:	d001      	beq.n	1a2c2 <_ZN14Calendar_Class9leap_yearEt+0x1a>
		return false;
   1a2be:	2300      	movs	r3, #0
   1a2c0:	e000      	b.n	1a2c4 <_ZN14Calendar_Class9leap_yearEt+0x1c>
	} else {
		return true;
   1a2c2:	2301      	movs	r3, #1
	}
}
   1a2c4:	4618      	mov	r0, r3
   1a2c6:	370c      	adds	r7, #12
   1a2c8:	46bd      	mov	sp, r7
   1a2ca:	bc80      	pop	{r7}
   1a2cc:	4770      	bx	lr
	...

0001a2d0 <_ZN14Calendar_Class7SetTimeEP13calendar_time>:

uint32_t	Calendar_Class::SetTime(calendar_time *p_calendar_time){
   1a2d0:	b580      	push	{r7, lr}
   1a2d2:	b082      	sub	sp, #8
   1a2d4:	af00      	add	r7, sp, #0
   1a2d6:	6078      	str	r0, [r7, #4]
   1a2d8:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_time(ptrCalendar,p_calendar_time);
   1a2da:	687b      	ldr	r3, [r7, #4]
   1a2dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1a2e0:	6839      	ldr	r1, [r7, #0]
   1a2e2:	4618      	mov	r0, r3
   1a2e4:	4b03      	ldr	r3, [pc, #12]	; (1a2f4 <_ZN14Calendar_Class7SetTimeEP13calendar_time+0x24>)
   1a2e6:	4798      	blx	r3
   1a2e8:	4603      	mov	r3, r0
}
   1a2ea:	4618      	mov	r0, r3
   1a2ec:	3708      	adds	r7, #8
   1a2ee:	46bd      	mov	sp, r7
   1a2f0:	bd80      	pop	{r7, pc}
   1a2f2:	bf00      	nop
   1a2f4:	00003219 	.word	0x00003219

0001a2f8 <_ZN14Calendar_Class7SetDateEP13calendar_date>:
uint32_t	Calendar_Class::SetDate(calendar_date *p_calendar_date){
   1a2f8:	b580      	push	{r7, lr}
   1a2fa:	b082      	sub	sp, #8
   1a2fc:	af00      	add	r7, sp, #0
   1a2fe:	6078      	str	r0, [r7, #4]
   1a300:	6039      	str	r1, [r7, #0]
	return	(uint32_t)calendar_set_date(ptrCalendar,p_calendar_date);
   1a302:	687b      	ldr	r3, [r7, #4]
   1a304:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1a308:	6839      	ldr	r1, [r7, #0]
   1a30a:	4618      	mov	r0, r3
   1a30c:	4b03      	ldr	r3, [pc, #12]	; (1a31c <_ZN14Calendar_Class7SetDateEP13calendar_date+0x24>)
   1a30e:	4798      	blx	r3
   1a310:	4603      	mov	r3, r0
}
   1a312:	4618      	mov	r0, r3
   1a314:	3708      	adds	r7, #8
   1a316:	46bd      	mov	sp, r7
   1a318:	bd80      	pop	{r7, pc}
   1a31a:	bf00      	nop
   1a31c:	000032a1 	.word	0x000032a1

0001a320 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time>:


uint32_t	Calendar_Class::SetDateTime(calendar_date_time *cdt){
   1a320:	b580      	push	{r7, lr}
   1a322:	b084      	sub	sp, #16
   1a324:	af00      	add	r7, sp, #0
   1a326:	6078      	str	r0, [r7, #4]
   1a328:	6039      	str	r1, [r7, #0]
	calendar_date	cd=cdt->date;
   1a32a:	683a      	ldr	r2, [r7, #0]
   1a32c:	f107 030c 	add.w	r3, r7, #12
   1a330:	3204      	adds	r2, #4
   1a332:	6810      	ldr	r0, [r2, #0]
   1a334:	6018      	str	r0, [r3, #0]
	SetDate(&cd);
   1a336:	f107 030c 	add.w	r3, r7, #12
   1a33a:	4619      	mov	r1, r3
   1a33c:	6878      	ldr	r0, [r7, #4]
   1a33e:	4b0a      	ldr	r3, [pc, #40]	; (1a368 <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x48>)
   1a340:	4798      	blx	r3
	//GetDateTime();
	calendar_time ct=cdt->time;
   1a342:	683a      	ldr	r2, [r7, #0]
   1a344:	f107 0308 	add.w	r3, r7, #8
   1a348:	8811      	ldrh	r1, [r2, #0]
   1a34a:	7892      	ldrb	r2, [r2, #2]
   1a34c:	8019      	strh	r1, [r3, #0]
   1a34e:	709a      	strb	r2, [r3, #2]
	return SetTime(&ct);
   1a350:	f107 0308 	add.w	r3, r7, #8
   1a354:	4619      	mov	r1, r3
   1a356:	6878      	ldr	r0, [r7, #4]
   1a358:	4b04      	ldr	r3, [pc, #16]	; (1a36c <_ZN14Calendar_Class11SetDateTimeEP18calendar_date_time+0x4c>)
   1a35a:	4798      	blx	r3
   1a35c:	4603      	mov	r3, r0
			
}
   1a35e:	4618      	mov	r0, r3
   1a360:	3710      	adds	r7, #16
   1a362:	46bd      	mov	sp, r7
   1a364:	bd80      	pop	{r7, pc}
   1a366:	bf00      	nop
   1a368:	0001a2f9 	.word	0x0001a2f9
   1a36c:	0001a2d1 	.word	0x0001a2d1

0001a370 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time>:


uint32_t Calendar_Class::convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
   1a370:	b580      	push	{r7, lr}
   1a372:	b086      	sub	sp, #24
   1a374:	af00      	add	r7, sp, #0
   1a376:	6078      	str	r0, [r7, #4]
   1a378:	6039      	str	r1, [r7, #0]
	uint32_t tmp = 0;
   1a37a:	2300      	movs	r3, #0
   1a37c:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
   1a37e:	2300      	movs	r3, #0
   1a380:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - ptrCalendar->base_year;
   1a382:	683b      	ldr	r3, [r7, #0]
   1a384:	88db      	ldrh	r3, [r3, #6]
   1a386:	b2da      	uxtb	r2, r3
   1a388:	687b      	ldr	r3, [r7, #4]
   1a38a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1a38e:	699b      	ldr	r3, [r3, #24]
   1a390:	b2db      	uxtb	r3, r3
   1a392:	1ad3      	subs	r3, r2, r3
   1a394:	73fb      	strb	r3, [r7, #15]
	month   = dt->date.month;
   1a396:	683b      	ldr	r3, [r7, #0]
   1a398:	795b      	ldrb	r3, [r3, #5]
   1a39a:	73bb      	strb	r3, [r7, #14]
	day     = dt->date.day;
   1a39c:	683b      	ldr	r3, [r7, #0]
   1a39e:	791b      	ldrb	r3, [r3, #4]
   1a3a0:	737b      	strb	r3, [r7, #13]
	hour    = dt->time.hour;
   1a3a2:	683b      	ldr	r3, [r7, #0]
   1a3a4:	789b      	ldrb	r3, [r3, #2]
   1a3a6:	733b      	strb	r3, [r7, #12]
	minutes = dt->time.min;
   1a3a8:	683b      	ldr	r3, [r7, #0]
   1a3aa:	785b      	ldrb	r3, [r3, #1]
   1a3ac:	72fb      	strb	r3, [r7, #11]
	seconds = dt->time.sec;
   1a3ae:	683b      	ldr	r3, [r7, #0]
   1a3b0:	781b      	ldrb	r3, [r3, #0]
   1a3b2:	72bb      	strb	r3, [r7, #10]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
   1a3b4:	2300      	movs	r3, #0
   1a3b6:	613b      	str	r3, [r7, #16]
   1a3b8:	7bfa      	ldrb	r2, [r7, #15]
   1a3ba:	693b      	ldr	r3, [r7, #16]
   1a3bc:	429a      	cmp	r2, r3
   1a3be:	d91e      	bls.n	1a3fe <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x8e>
		if (leap_year(ptrCalendar->base_year + i)) {
   1a3c0:	687b      	ldr	r3, [r7, #4]
   1a3c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1a3c6:	699b      	ldr	r3, [r3, #24]
   1a3c8:	b29a      	uxth	r2, r3
   1a3ca:	693b      	ldr	r3, [r7, #16]
   1a3cc:	b29b      	uxth	r3, r3
   1a3ce:	4413      	add	r3, r2
   1a3d0:	b29b      	uxth	r3, r3
   1a3d2:	4619      	mov	r1, r3
   1a3d4:	6878      	ldr	r0, [r7, #4]
   1a3d6:	4b27      	ldr	r3, [pc, #156]	; (1a474 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x104>)
   1a3d8:	4798      	blx	r3
   1a3da:	4603      	mov	r3, r0
   1a3dc:	2b00      	cmp	r3, #0
   1a3de:	d006      	beq.n	1a3ee <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x7e>
			tmp += SECS_IN_LEAP_YEAR;
   1a3e0:	697b      	ldr	r3, [r7, #20]
   1a3e2:	f103 73f1 	add.w	r3, r3, #31588352	; 0x1e20000
   1a3e6:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
   1a3ea:	617b      	str	r3, [r7, #20]
   1a3ec:	e003      	b.n	1a3f6 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x86>
			} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
   1a3ee:	697a      	ldr	r2, [r7, #20]
   1a3f0:	4b21      	ldr	r3, [pc, #132]	; (1a478 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x108>)
   1a3f2:	4413      	add	r3, r2
   1a3f4:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
   1a3f6:	693b      	ldr	r3, [r7, #16]
   1a3f8:	3301      	adds	r3, #1
   1a3fa:	613b      	str	r3, [r7, #16]
   1a3fc:	e7dc      	b.n	1a3b8 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x48>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
   1a3fe:	2301      	movs	r3, #1
   1a400:	613b      	str	r3, [r7, #16]
   1a402:	7bba      	ldrb	r2, [r7, #14]
   1a404:	693b      	ldr	r3, [r7, #16]
   1a406:	429a      	cmp	r2, r3
   1a408:	d910      	bls.n	1a42c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0xbc>
		tmp += get_secs_in_month(dt->date.year, i);
   1a40a:	683b      	ldr	r3, [r7, #0]
   1a40c:	88db      	ldrh	r3, [r3, #6]
   1a40e:	4619      	mov	r1, r3
   1a410:	693b      	ldr	r3, [r7, #16]
   1a412:	b2db      	uxtb	r3, r3
   1a414:	461a      	mov	r2, r3
   1a416:	6878      	ldr	r0, [r7, #4]
   1a418:	4b18      	ldr	r3, [pc, #96]	; (1a47c <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x10c>)
   1a41a:	4798      	blx	r3
   1a41c:	4602      	mov	r2, r0
   1a41e:	697b      	ldr	r3, [r7, #20]
   1a420:	4413      	add	r3, r2
   1a422:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
   1a424:	693b      	ldr	r3, [r7, #16]
   1a426:	3301      	adds	r3, #1
   1a428:	613b      	str	r3, [r7, #16]
   1a42a:	e7ea      	b.n	1a402 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x92>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
   1a42c:	7b7b      	ldrb	r3, [r7, #13]
   1a42e:	3b01      	subs	r3, #1
   1a430:	4a13      	ldr	r2, [pc, #76]	; (1a480 <_ZN14Calendar_Class29convert_datetime_to_timestampEP18calendar_date_time+0x110>)
   1a432:	fb02 f303 	mul.w	r3, r2, r3
   1a436:	461a      	mov	r2, r3
   1a438:	697b      	ldr	r3, [r7, #20]
   1a43a:	4413      	add	r3, r2
   1a43c:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
   1a43e:	7b3b      	ldrb	r3, [r7, #12]
   1a440:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   1a444:	fb02 f303 	mul.w	r3, r2, r3
   1a448:	461a      	mov	r2, r3
   1a44a:	697b      	ldr	r3, [r7, #20]
   1a44c:	4413      	add	r3, r2
   1a44e:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
   1a450:	7afa      	ldrb	r2, [r7, #11]
   1a452:	4613      	mov	r3, r2
   1a454:	011b      	lsls	r3, r3, #4
   1a456:	1a9b      	subs	r3, r3, r2
   1a458:	009b      	lsls	r3, r3, #2
   1a45a:	461a      	mov	r2, r3
   1a45c:	697b      	ldr	r3, [r7, #20]
   1a45e:	4413      	add	r3, r2
   1a460:	617b      	str	r3, [r7, #20]
	tmp += seconds;
   1a462:	7abb      	ldrb	r3, [r7, #10]
   1a464:	697a      	ldr	r2, [r7, #20]
   1a466:	4413      	add	r3, r2
   1a468:	617b      	str	r3, [r7, #20]

	return tmp;
   1a46a:	697b      	ldr	r3, [r7, #20]
}
   1a46c:	4618      	mov	r0, r3
   1a46e:	3718      	adds	r7, #24
   1a470:	46bd      	mov	sp, r7
   1a472:	bd80      	pop	{r7, pc}
   1a474:	0001a2a9 	.word	0x0001a2a9
   1a478:	01e13380 	.word	0x01e13380
   1a47c:	0001a485 	.word	0x0001a485
   1a480:	00015180 	.word	0x00015180

0001a484 <_ZN14Calendar_Class17get_secs_in_monthEmh>:

uint32_t Calendar_Class::get_secs_in_month(uint32_t year, uint8_t month)
{
   1a484:	b580      	push	{r7, lr}
   1a486:	b086      	sub	sp, #24
   1a488:	af00      	add	r7, sp, #0
   1a48a:	60f8      	str	r0, [r7, #12]
   1a48c:	60b9      	str	r1, [r7, #8]
   1a48e:	4613      	mov	r3, r2
   1a490:	71fb      	strb	r3, [r7, #7]
	uint32_t sec_in_month = 0;
   1a492:	2300      	movs	r3, #0
   1a494:	617b      	str	r3, [r7, #20]

	if (leap_year(year)) {
   1a496:	68bb      	ldr	r3, [r7, #8]
   1a498:	b29b      	uxth	r3, r3
   1a49a:	4619      	mov	r1, r3
   1a49c:	68f8      	ldr	r0, [r7, #12]
   1a49e:	4b2f      	ldr	r3, [pc, #188]	; (1a55c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xd8>)
   1a4a0:	4798      	blx	r3
   1a4a2:	4603      	mov	r3, r0
   1a4a4:	2b00      	cmp	r3, #0
   1a4a6:	d028      	beq.n	1a4fa <_ZN14Calendar_Class17get_secs_in_monthEmh+0x76>
		switch (month) {
   1a4a8:	79fb      	ldrb	r3, [r7, #7]
   1a4aa:	3b01      	subs	r3, #1
   1a4ac:	2b0b      	cmp	r3, #11
   1a4ae:	d84c      	bhi.n	1a54a <_ZN14Calendar_Class17get_secs_in_monthEmh+0xc6>
   1a4b0:	a201      	add	r2, pc, #4	; (adr r2, 1a4b8 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x34>)
   1a4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a4b6:	bf00      	nop
   1a4b8:	0001a4e9 	.word	0x0001a4e9
   1a4bc:	0001a4ef 	.word	0x0001a4ef
   1a4c0:	0001a4e9 	.word	0x0001a4e9
   1a4c4:	0001a4f5 	.word	0x0001a4f5
   1a4c8:	0001a4e9 	.word	0x0001a4e9
   1a4cc:	0001a4f5 	.word	0x0001a4f5
   1a4d0:	0001a4e9 	.word	0x0001a4e9
   1a4d4:	0001a4e9 	.word	0x0001a4e9
   1a4d8:	0001a4f5 	.word	0x0001a4f5
   1a4dc:	0001a4e9 	.word	0x0001a4e9
   1a4e0:	0001a4f5 	.word	0x0001a4f5
   1a4e4:	0001a4e9 	.word	0x0001a4e9
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   1a4e8:	4b1d      	ldr	r3, [pc, #116]	; (1a560 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   1a4ea:	617b      	str	r3, [r7, #20]
			break;
   1a4ec:	e030      	b.n	1a550 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_29DAYS;
   1a4ee:	4b1d      	ldr	r3, [pc, #116]	; (1a564 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe0>)
   1a4f0:	617b      	str	r3, [r7, #20]
			break;
   1a4f2:	e02d      	b.n	1a550 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   1a4f4:	4b1c      	ldr	r3, [pc, #112]	; (1a568 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   1a4f6:	617b      	str	r3, [r7, #20]
			break;
   1a4f8:	e02a      	b.n	1a550 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
		}
		} else {
		switch (month) {
   1a4fa:	79fb      	ldrb	r3, [r7, #7]
   1a4fc:	3b01      	subs	r3, #1
   1a4fe:	2b0b      	cmp	r3, #11
   1a500:	d825      	bhi.n	1a54e <_ZN14Calendar_Class17get_secs_in_monthEmh+0xca>
   1a502:	a201      	add	r2, pc, #4	; (adr r2, 1a508 <_ZN14Calendar_Class17get_secs_in_monthEmh+0x84>)
   1a504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a508:	0001a539 	.word	0x0001a539
   1a50c:	0001a53f 	.word	0x0001a53f
   1a510:	0001a539 	.word	0x0001a539
   1a514:	0001a545 	.word	0x0001a545
   1a518:	0001a539 	.word	0x0001a539
   1a51c:	0001a545 	.word	0x0001a545
   1a520:	0001a539 	.word	0x0001a539
   1a524:	0001a539 	.word	0x0001a539
   1a528:	0001a545 	.word	0x0001a545
   1a52c:	0001a539 	.word	0x0001a539
   1a530:	0001a545 	.word	0x0001a545
   1a534:	0001a539 	.word	0x0001a539
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
			sec_in_month = SECS_IN_31DAYS;
   1a538:	4b09      	ldr	r3, [pc, #36]	; (1a560 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xdc>)
   1a53a:	617b      	str	r3, [r7, #20]
			break;
   1a53c:	e008      	b.n	1a550 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 2:
			sec_in_month = SECS_IN_28DAYS;
   1a53e:	4b0b      	ldr	r3, [pc, #44]	; (1a56c <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe8>)
   1a540:	617b      	str	r3, [r7, #20]
			break;
   1a542:	e005      	b.n	1a550 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			case 4:
			case 6:
			case 9:
			case 11:
			sec_in_month = SECS_IN_30DAYS;
   1a544:	4b08      	ldr	r3, [pc, #32]	; (1a568 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xe4>)
   1a546:	617b      	str	r3, [r7, #20]
			break;
   1a548:	e002      	b.n	1a550 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			break;
   1a54a:	bf00      	nop
   1a54c:	e000      	b.n	1a550 <_ZN14Calendar_Class17get_secs_in_monthEmh+0xcc>
			default:
			break;
   1a54e:	bf00      	nop
		}
	}

	return sec_in_month;
   1a550:	697b      	ldr	r3, [r7, #20]
}
   1a552:	4618      	mov	r0, r3
   1a554:	3718      	adds	r7, #24
   1a556:	46bd      	mov	sp, r7
   1a558:	bd80      	pop	{r7, pc}
   1a55a:	bf00      	nop
   1a55c:	0001a2a9 	.word	0x0001a2a9
   1a560:	0028de80 	.word	0x0028de80
   1a564:	00263b80 	.word	0x00263b80
   1a568:	00278d00 	.word	0x00278d00
   1a56c:	0024ea00 	.word	0x0024ea00

0001a570 <_Z41__static_initialization_and_destruction_0ii>:
	dt->time.sec   = tmp;

	return ERR_NONE;
}

   1a570:	b580      	push	{r7, lr}
   1a572:	b082      	sub	sp, #8
   1a574:	af00      	add	r7, sp, #0
   1a576:	6078      	str	r0, [r7, #4]
   1a578:	6039      	str	r1, [r7, #0]
   1a57a:	687b      	ldr	r3, [r7, #4]
   1a57c:	2b01      	cmp	r3, #1
   1a57e:	d10d      	bne.n	1a59c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1a580:	683b      	ldr	r3, [r7, #0]
   1a582:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a586:	4293      	cmp	r3, r2
   1a588:	d108      	bne.n	1a59c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1a58a:	4906      	ldr	r1, [pc, #24]	; (1a5a4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1a58c:	4806      	ldr	r0, [pc, #24]	; (1a5a8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1a58e:	4b07      	ldr	r3, [pc, #28]	; (1a5ac <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1a590:	4798      	blx	r3
   1a592:	4a07      	ldr	r2, [pc, #28]	; (1a5b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   1a594:	4907      	ldr	r1, [pc, #28]	; (1a5b4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   1a596:	4804      	ldr	r0, [pc, #16]	; (1a5a8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1a598:	4b07      	ldr	r3, [pc, #28]	; (1a5b8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1a59a:	4798      	blx	r3
   1a59c:	bf00      	nop
   1a59e:	3708      	adds	r7, #8
   1a5a0:	46bd      	mov	sp, r7
   1a5a2:	bd80      	pop	{r7, pc}
   1a5a4:	2000e100 	.word	0x2000e100
   1a5a8:	2000de78 	.word	0x2000de78
   1a5ac:	00019eb9 	.word	0x00019eb9
   1a5b0:	20000000 	.word	0x20000000
   1a5b4:	00019ef5 	.word	0x00019ef5
   1a5b8:	0001a611 	.word	0x0001a611

0001a5bc <_GLOBAL__sub_I_ptrCalendarClass>:
   1a5bc:	b580      	push	{r7, lr}
   1a5be:	af00      	add	r7, sp, #0
   1a5c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a5c4:	2001      	movs	r0, #1
   1a5c6:	4b01      	ldr	r3, [pc, #4]	; (1a5cc <_GLOBAL__sub_I_ptrCalendarClass+0x10>)
   1a5c8:	4798      	blx	r3
   1a5ca:	bd80      	pop	{r7, pc}
   1a5cc:	0001a571 	.word	0x0001a571

0001a5d0 <_ZN17DateTimeLog_ClassC1Ev>:
#include "math.h"
#include "time.h"
//#include "AT24MAC_Class.h"
#include "Calendar_Class.h"

DateTimeLog_Class::DateTimeLog_Class()
   1a5d0:	b480      	push	{r7}
   1a5d2:	b083      	sub	sp, #12
   1a5d4:	af00      	add	r7, sp, #0
   1a5d6:	6078      	str	r0, [r7, #4]
   1a5d8:	4a04      	ldr	r2, [pc, #16]	; (1a5ec <_ZN17DateTimeLog_ClassC1Ev+0x1c>)
   1a5da:	687b      	ldr	r3, [r7, #4]
   1a5dc:	601a      	str	r2, [r3, #0]
{
} //~D
   1a5de:	687b      	ldr	r3, [r7, #4]
   1a5e0:	4618      	mov	r0, r3
   1a5e2:	370c      	adds	r7, #12
   1a5e4:	46bd      	mov	sp, r7
   1a5e6:	bc80      	pop	{r7}
   1a5e8:	4770      	bx	lr
   1a5ea:	bf00      	nop
   1a5ec:	0001c224 	.word	0x0001c224

0001a5f0 <_ZN17DateTimeLog_ClassD1Ev>:
// default destructor
DateTimeLog_Class::~DateTimeLog_Class()
   1a5f0:	b480      	push	{r7}
   1a5f2:	b083      	sub	sp, #12
   1a5f4:	af00      	add	r7, sp, #0
   1a5f6:	6078      	str	r0, [r7, #4]
   1a5f8:	4a04      	ldr	r2, [pc, #16]	; (1a60c <_ZN17DateTimeLog_ClassD1Ev+0x1c>)
   1a5fa:	687b      	ldr	r3, [r7, #4]
   1a5fc:	601a      	str	r2, [r3, #0]
{
} //~DateTimeLog_Class
   1a5fe:	687b      	ldr	r3, [r7, #4]
   1a600:	4618      	mov	r0, r3
   1a602:	370c      	adds	r7, #12
   1a604:	46bd      	mov	sp, r7
   1a606:	bc80      	pop	{r7}
   1a608:	4770      	bx	lr
   1a60a:	bf00      	nop
   1a60c:	0001c224 	.word	0x0001c224

0001a610 <__aeabi_atexit>:
   1a610:	460b      	mov	r3, r1
   1a612:	4601      	mov	r1, r0
   1a614:	4618      	mov	r0, r3
   1a616:	f000 ba7f 	b.w	1ab18 <__cxa_atexit>
   1a61a:	bf00      	nop

0001a61c <__aeabi_frsub>:
   1a61c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1a620:	e002      	b.n	1a628 <__addsf3>
   1a622:	bf00      	nop

0001a624 <__aeabi_fsub>:
   1a624:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001a628 <__addsf3>:
   1a628:	0042      	lsls	r2, r0, #1
   1a62a:	bf1f      	itttt	ne
   1a62c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1a630:	ea92 0f03 	teqne	r2, r3
   1a634:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1a638:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1a63c:	d06a      	beq.n	1a714 <__addsf3+0xec>
   1a63e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1a642:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1a646:	bfc1      	itttt	gt
   1a648:	18d2      	addgt	r2, r2, r3
   1a64a:	4041      	eorgt	r1, r0
   1a64c:	4048      	eorgt	r0, r1
   1a64e:	4041      	eorgt	r1, r0
   1a650:	bfb8      	it	lt
   1a652:	425b      	neglt	r3, r3
   1a654:	2b19      	cmp	r3, #25
   1a656:	bf88      	it	hi
   1a658:	4770      	bxhi	lr
   1a65a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1a65e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a662:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a666:	bf18      	it	ne
   1a668:	4240      	negne	r0, r0
   1a66a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1a66e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1a672:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1a676:	bf18      	it	ne
   1a678:	4249      	negne	r1, r1
   1a67a:	ea92 0f03 	teq	r2, r3
   1a67e:	d03f      	beq.n	1a700 <__addsf3+0xd8>
   1a680:	f1a2 0201 	sub.w	r2, r2, #1
   1a684:	fa41 fc03 	asr.w	ip, r1, r3
   1a688:	eb10 000c 	adds.w	r0, r0, ip
   1a68c:	f1c3 0320 	rsb	r3, r3, #32
   1a690:	fa01 f103 	lsl.w	r1, r1, r3
   1a694:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1a698:	d502      	bpl.n	1a6a0 <__addsf3+0x78>
   1a69a:	4249      	negs	r1, r1
   1a69c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1a6a0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1a6a4:	d313      	bcc.n	1a6ce <__addsf3+0xa6>
   1a6a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1a6aa:	d306      	bcc.n	1a6ba <__addsf3+0x92>
   1a6ac:	0840      	lsrs	r0, r0, #1
   1a6ae:	ea4f 0131 	mov.w	r1, r1, rrx
   1a6b2:	f102 0201 	add.w	r2, r2, #1
   1a6b6:	2afe      	cmp	r2, #254	; 0xfe
   1a6b8:	d251      	bcs.n	1a75e <__addsf3+0x136>
   1a6ba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1a6be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1a6c2:	bf08      	it	eq
   1a6c4:	f020 0001 	biceq.w	r0, r0, #1
   1a6c8:	ea40 0003 	orr.w	r0, r0, r3
   1a6cc:	4770      	bx	lr
   1a6ce:	0049      	lsls	r1, r1, #1
   1a6d0:	eb40 0000 	adc.w	r0, r0, r0
   1a6d4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1a6d8:	f1a2 0201 	sub.w	r2, r2, #1
   1a6dc:	d1ed      	bne.n	1a6ba <__addsf3+0x92>
   1a6de:	fab0 fc80 	clz	ip, r0
   1a6e2:	f1ac 0c08 	sub.w	ip, ip, #8
   1a6e6:	ebb2 020c 	subs.w	r2, r2, ip
   1a6ea:	fa00 f00c 	lsl.w	r0, r0, ip
   1a6ee:	bfaa      	itet	ge
   1a6f0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1a6f4:	4252      	neglt	r2, r2
   1a6f6:	4318      	orrge	r0, r3
   1a6f8:	bfbc      	itt	lt
   1a6fa:	40d0      	lsrlt	r0, r2
   1a6fc:	4318      	orrlt	r0, r3
   1a6fe:	4770      	bx	lr
   1a700:	f092 0f00 	teq	r2, #0
   1a704:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1a708:	bf06      	itte	eq
   1a70a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1a70e:	3201      	addeq	r2, #1
   1a710:	3b01      	subne	r3, #1
   1a712:	e7b5      	b.n	1a680 <__addsf3+0x58>
   1a714:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1a718:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1a71c:	bf18      	it	ne
   1a71e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1a722:	d021      	beq.n	1a768 <__addsf3+0x140>
   1a724:	ea92 0f03 	teq	r2, r3
   1a728:	d004      	beq.n	1a734 <__addsf3+0x10c>
   1a72a:	f092 0f00 	teq	r2, #0
   1a72e:	bf08      	it	eq
   1a730:	4608      	moveq	r0, r1
   1a732:	4770      	bx	lr
   1a734:	ea90 0f01 	teq	r0, r1
   1a738:	bf1c      	itt	ne
   1a73a:	2000      	movne	r0, #0
   1a73c:	4770      	bxne	lr
   1a73e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1a742:	d104      	bne.n	1a74e <__addsf3+0x126>
   1a744:	0040      	lsls	r0, r0, #1
   1a746:	bf28      	it	cs
   1a748:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1a74c:	4770      	bx	lr
   1a74e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1a752:	bf3c      	itt	cc
   1a754:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1a758:	4770      	bxcc	lr
   1a75a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1a75e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1a762:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a766:	4770      	bx	lr
   1a768:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1a76c:	bf16      	itet	ne
   1a76e:	4608      	movne	r0, r1
   1a770:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1a774:	4601      	movne	r1, r0
   1a776:	0242      	lsls	r2, r0, #9
   1a778:	bf06      	itte	eq
   1a77a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1a77e:	ea90 0f01 	teqeq	r0, r1
   1a782:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1a786:	4770      	bx	lr

0001a788 <__aeabi_ui2f>:
   1a788:	f04f 0300 	mov.w	r3, #0
   1a78c:	e004      	b.n	1a798 <__aeabi_i2f+0x8>
   1a78e:	bf00      	nop

0001a790 <__aeabi_i2f>:
   1a790:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1a794:	bf48      	it	mi
   1a796:	4240      	negmi	r0, r0
   1a798:	ea5f 0c00 	movs.w	ip, r0
   1a79c:	bf08      	it	eq
   1a79e:	4770      	bxeq	lr
   1a7a0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1a7a4:	4601      	mov	r1, r0
   1a7a6:	f04f 0000 	mov.w	r0, #0
   1a7aa:	e01c      	b.n	1a7e6 <__aeabi_l2f+0x2a>

0001a7ac <__aeabi_ul2f>:
   1a7ac:	ea50 0201 	orrs.w	r2, r0, r1
   1a7b0:	bf08      	it	eq
   1a7b2:	4770      	bxeq	lr
   1a7b4:	f04f 0300 	mov.w	r3, #0
   1a7b8:	e00a      	b.n	1a7d0 <__aeabi_l2f+0x14>
   1a7ba:	bf00      	nop

0001a7bc <__aeabi_l2f>:
   1a7bc:	ea50 0201 	orrs.w	r2, r0, r1
   1a7c0:	bf08      	it	eq
   1a7c2:	4770      	bxeq	lr
   1a7c4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1a7c8:	d502      	bpl.n	1a7d0 <__aeabi_l2f+0x14>
   1a7ca:	4240      	negs	r0, r0
   1a7cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a7d0:	ea5f 0c01 	movs.w	ip, r1
   1a7d4:	bf02      	ittt	eq
   1a7d6:	4684      	moveq	ip, r0
   1a7d8:	4601      	moveq	r1, r0
   1a7da:	2000      	moveq	r0, #0
   1a7dc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1a7e0:	bf08      	it	eq
   1a7e2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1a7e6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1a7ea:	fabc f28c 	clz	r2, ip
   1a7ee:	3a08      	subs	r2, #8
   1a7f0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1a7f4:	db10      	blt.n	1a818 <__aeabi_l2f+0x5c>
   1a7f6:	fa01 fc02 	lsl.w	ip, r1, r2
   1a7fa:	4463      	add	r3, ip
   1a7fc:	fa00 fc02 	lsl.w	ip, r0, r2
   1a800:	f1c2 0220 	rsb	r2, r2, #32
   1a804:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1a808:	fa20 f202 	lsr.w	r2, r0, r2
   1a80c:	eb43 0002 	adc.w	r0, r3, r2
   1a810:	bf08      	it	eq
   1a812:	f020 0001 	biceq.w	r0, r0, #1
   1a816:	4770      	bx	lr
   1a818:	f102 0220 	add.w	r2, r2, #32
   1a81c:	fa01 fc02 	lsl.w	ip, r1, r2
   1a820:	f1c2 0220 	rsb	r2, r2, #32
   1a824:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1a828:	fa21 f202 	lsr.w	r2, r1, r2
   1a82c:	eb43 0002 	adc.w	r0, r3, r2
   1a830:	bf08      	it	eq
   1a832:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1a836:	4770      	bx	lr

0001a838 <__aeabi_fmul>:
   1a838:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1a83c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1a840:	bf1e      	ittt	ne
   1a842:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1a846:	ea92 0f0c 	teqne	r2, ip
   1a84a:	ea93 0f0c 	teqne	r3, ip
   1a84e:	d06f      	beq.n	1a930 <__aeabi_fmul+0xf8>
   1a850:	441a      	add	r2, r3
   1a852:	ea80 0c01 	eor.w	ip, r0, r1
   1a856:	0240      	lsls	r0, r0, #9
   1a858:	bf18      	it	ne
   1a85a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1a85e:	d01e      	beq.n	1a89e <__aeabi_fmul+0x66>
   1a860:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1a864:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1a868:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1a86c:	fba0 3101 	umull	r3, r1, r0, r1
   1a870:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1a874:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1a878:	bf3e      	ittt	cc
   1a87a:	0049      	lslcc	r1, r1, #1
   1a87c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   1a880:	005b      	lslcc	r3, r3, #1
   1a882:	ea40 0001 	orr.w	r0, r0, r1
   1a886:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1a88a:	2afd      	cmp	r2, #253	; 0xfd
   1a88c:	d81d      	bhi.n	1a8ca <__aeabi_fmul+0x92>
   1a88e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1a892:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1a896:	bf08      	it	eq
   1a898:	f020 0001 	biceq.w	r0, r0, #1
   1a89c:	4770      	bx	lr
   1a89e:	f090 0f00 	teq	r0, #0
   1a8a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1a8a6:	bf08      	it	eq
   1a8a8:	0249      	lsleq	r1, r1, #9
   1a8aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1a8ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1a8b2:	3a7f      	subs	r2, #127	; 0x7f
   1a8b4:	bfc2      	ittt	gt
   1a8b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1a8ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1a8be:	4770      	bxgt	lr
   1a8c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a8c4:	f04f 0300 	mov.w	r3, #0
   1a8c8:	3a01      	subs	r2, #1
   1a8ca:	dc5d      	bgt.n	1a988 <__aeabi_fmul+0x150>
   1a8cc:	f112 0f19 	cmn.w	r2, #25
   1a8d0:	bfdc      	itt	le
   1a8d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1a8d6:	4770      	bxle	lr
   1a8d8:	f1c2 0200 	rsb	r2, r2, #0
   1a8dc:	0041      	lsls	r1, r0, #1
   1a8de:	fa21 f102 	lsr.w	r1, r1, r2
   1a8e2:	f1c2 0220 	rsb	r2, r2, #32
   1a8e6:	fa00 fc02 	lsl.w	ip, r0, r2
   1a8ea:	ea5f 0031 	movs.w	r0, r1, rrx
   1a8ee:	f140 0000 	adc.w	r0, r0, #0
   1a8f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1a8f6:	bf08      	it	eq
   1a8f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1a8fc:	4770      	bx	lr
   1a8fe:	f092 0f00 	teq	r2, #0
   1a902:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1a906:	bf02      	ittt	eq
   1a908:	0040      	lsleq	r0, r0, #1
   1a90a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1a90e:	3a01      	subeq	r2, #1
   1a910:	d0f9      	beq.n	1a906 <__aeabi_fmul+0xce>
   1a912:	ea40 000c 	orr.w	r0, r0, ip
   1a916:	f093 0f00 	teq	r3, #0
   1a91a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1a91e:	bf02      	ittt	eq
   1a920:	0049      	lsleq	r1, r1, #1
   1a922:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1a926:	3b01      	subeq	r3, #1
   1a928:	d0f9      	beq.n	1a91e <__aeabi_fmul+0xe6>
   1a92a:	ea41 010c 	orr.w	r1, r1, ip
   1a92e:	e78f      	b.n	1a850 <__aeabi_fmul+0x18>
   1a930:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1a934:	ea92 0f0c 	teq	r2, ip
   1a938:	bf18      	it	ne
   1a93a:	ea93 0f0c 	teqne	r3, ip
   1a93e:	d00a      	beq.n	1a956 <__aeabi_fmul+0x11e>
   1a940:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1a944:	bf18      	it	ne
   1a946:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1a94a:	d1d8      	bne.n	1a8fe <__aeabi_fmul+0xc6>
   1a94c:	ea80 0001 	eor.w	r0, r0, r1
   1a950:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1a954:	4770      	bx	lr
   1a956:	f090 0f00 	teq	r0, #0
   1a95a:	bf17      	itett	ne
   1a95c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1a960:	4608      	moveq	r0, r1
   1a962:	f091 0f00 	teqne	r1, #0
   1a966:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1a96a:	d014      	beq.n	1a996 <__aeabi_fmul+0x15e>
   1a96c:	ea92 0f0c 	teq	r2, ip
   1a970:	d101      	bne.n	1a976 <__aeabi_fmul+0x13e>
   1a972:	0242      	lsls	r2, r0, #9
   1a974:	d10f      	bne.n	1a996 <__aeabi_fmul+0x15e>
   1a976:	ea93 0f0c 	teq	r3, ip
   1a97a:	d103      	bne.n	1a984 <__aeabi_fmul+0x14c>
   1a97c:	024b      	lsls	r3, r1, #9
   1a97e:	bf18      	it	ne
   1a980:	4608      	movne	r0, r1
   1a982:	d108      	bne.n	1a996 <__aeabi_fmul+0x15e>
   1a984:	ea80 0001 	eor.w	r0, r0, r1
   1a988:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1a98c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1a990:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1a994:	4770      	bx	lr
   1a996:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1a99a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1a99e:	4770      	bx	lr

0001a9a0 <__aeabi_fdiv>:
   1a9a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1a9a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1a9a8:	bf1e      	ittt	ne
   1a9aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1a9ae:	ea92 0f0c 	teqne	r2, ip
   1a9b2:	ea93 0f0c 	teqne	r3, ip
   1a9b6:	d069      	beq.n	1aa8c <__aeabi_fdiv+0xec>
   1a9b8:	eba2 0203 	sub.w	r2, r2, r3
   1a9bc:	ea80 0c01 	eor.w	ip, r0, r1
   1a9c0:	0249      	lsls	r1, r1, #9
   1a9c2:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1a9c6:	d037      	beq.n	1aa38 <__aeabi_fdiv+0x98>
   1a9c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1a9cc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1a9d0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1a9d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1a9d8:	428b      	cmp	r3, r1
   1a9da:	bf38      	it	cc
   1a9dc:	005b      	lslcc	r3, r3, #1
   1a9de:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1a9e2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1a9e6:	428b      	cmp	r3, r1
   1a9e8:	bf24      	itt	cs
   1a9ea:	1a5b      	subcs	r3, r3, r1
   1a9ec:	ea40 000c 	orrcs.w	r0, r0, ip
   1a9f0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1a9f4:	bf24      	itt	cs
   1a9f6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1a9fa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1a9fe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1aa02:	bf24      	itt	cs
   1aa04:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1aa08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1aa0c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1aa10:	bf24      	itt	cs
   1aa12:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1aa16:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1aa1a:	011b      	lsls	r3, r3, #4
   1aa1c:	bf18      	it	ne
   1aa1e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1aa22:	d1e0      	bne.n	1a9e6 <__aeabi_fdiv+0x46>
   1aa24:	2afd      	cmp	r2, #253	; 0xfd
   1aa26:	f63f af50 	bhi.w	1a8ca <__aeabi_fmul+0x92>
   1aa2a:	428b      	cmp	r3, r1
   1aa2c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1aa30:	bf08      	it	eq
   1aa32:	f020 0001 	biceq.w	r0, r0, #1
   1aa36:	4770      	bx	lr
   1aa38:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1aa3c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1aa40:	327f      	adds	r2, #127	; 0x7f
   1aa42:	bfc2      	ittt	gt
   1aa44:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1aa48:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1aa4c:	4770      	bxgt	lr
   1aa4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1aa52:	f04f 0300 	mov.w	r3, #0
   1aa56:	3a01      	subs	r2, #1
   1aa58:	e737      	b.n	1a8ca <__aeabi_fmul+0x92>
   1aa5a:	f092 0f00 	teq	r2, #0
   1aa5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1aa62:	bf02      	ittt	eq
   1aa64:	0040      	lsleq	r0, r0, #1
   1aa66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1aa6a:	3a01      	subeq	r2, #1
   1aa6c:	d0f9      	beq.n	1aa62 <__aeabi_fdiv+0xc2>
   1aa6e:	ea40 000c 	orr.w	r0, r0, ip
   1aa72:	f093 0f00 	teq	r3, #0
   1aa76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1aa7a:	bf02      	ittt	eq
   1aa7c:	0049      	lsleq	r1, r1, #1
   1aa7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1aa82:	3b01      	subeq	r3, #1
   1aa84:	d0f9      	beq.n	1aa7a <__aeabi_fdiv+0xda>
   1aa86:	ea41 010c 	orr.w	r1, r1, ip
   1aa8a:	e795      	b.n	1a9b8 <__aeabi_fdiv+0x18>
   1aa8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1aa90:	ea92 0f0c 	teq	r2, ip
   1aa94:	d108      	bne.n	1aaa8 <__aeabi_fdiv+0x108>
   1aa96:	0242      	lsls	r2, r0, #9
   1aa98:	f47f af7d 	bne.w	1a996 <__aeabi_fmul+0x15e>
   1aa9c:	ea93 0f0c 	teq	r3, ip
   1aaa0:	f47f af70 	bne.w	1a984 <__aeabi_fmul+0x14c>
   1aaa4:	4608      	mov	r0, r1
   1aaa6:	e776      	b.n	1a996 <__aeabi_fmul+0x15e>
   1aaa8:	ea93 0f0c 	teq	r3, ip
   1aaac:	d104      	bne.n	1aab8 <__aeabi_fdiv+0x118>
   1aaae:	024b      	lsls	r3, r1, #9
   1aab0:	f43f af4c 	beq.w	1a94c <__aeabi_fmul+0x114>
   1aab4:	4608      	mov	r0, r1
   1aab6:	e76e      	b.n	1a996 <__aeabi_fmul+0x15e>
   1aab8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1aabc:	bf18      	it	ne
   1aabe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1aac2:	d1ca      	bne.n	1aa5a <__aeabi_fdiv+0xba>
   1aac4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1aac8:	f47f af5c 	bne.w	1a984 <__aeabi_fmul+0x14c>
   1aacc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1aad0:	f47f af3c 	bne.w	1a94c <__aeabi_fmul+0x114>
   1aad4:	e75f      	b.n	1a996 <__aeabi_fmul+0x15e>
   1aad6:	bf00      	nop

0001aad8 <__aeabi_f2uiz>:
   1aad8:	0042      	lsls	r2, r0, #1
   1aada:	d20e      	bcs.n	1aafa <__aeabi_f2uiz+0x22>
   1aadc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1aae0:	d30b      	bcc.n	1aafa <__aeabi_f2uiz+0x22>
   1aae2:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1aae6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1aaea:	d409      	bmi.n	1ab00 <__aeabi_f2uiz+0x28>
   1aaec:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1aaf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1aaf4:	fa23 f002 	lsr.w	r0, r3, r2
   1aaf8:	4770      	bx	lr
   1aafa:	f04f 0000 	mov.w	r0, #0
   1aafe:	4770      	bx	lr
   1ab00:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1ab04:	d101      	bne.n	1ab0a <__aeabi_f2uiz+0x32>
   1ab06:	0242      	lsls	r2, r0, #9
   1ab08:	d102      	bne.n	1ab10 <__aeabi_f2uiz+0x38>
   1ab0a:	f04f 30ff 	mov.w	r0, #4294967295
   1ab0e:	4770      	bx	lr
   1ab10:	f04f 0000 	mov.w	r0, #0
   1ab14:	4770      	bx	lr
   1ab16:	bf00      	nop

0001ab18 <__cxa_atexit>:
   1ab18:	4613      	mov	r3, r2
   1ab1a:	460a      	mov	r2, r1
   1ab1c:	4601      	mov	r1, r0
   1ab1e:	2002      	movs	r0, #2
   1ab20:	f000 ba3c 	b.w	1af9c <__register_exitproc>

0001ab24 <ffs>:
   1ab24:	b140      	cbz	r0, 1ab38 <ffs+0x14>
   1ab26:	2300      	movs	r3, #0
   1ab28:	fa40 f103 	asr.w	r1, r0, r3
   1ab2c:	1c5a      	adds	r2, r3, #1
   1ab2e:	07c9      	lsls	r1, r1, #31
   1ab30:	4613      	mov	r3, r2
   1ab32:	d5f9      	bpl.n	1ab28 <ffs+0x4>
   1ab34:	4610      	mov	r0, r2
   1ab36:	4770      	bx	lr
   1ab38:	4602      	mov	r2, r0
   1ab3a:	4610      	mov	r0, r2
   1ab3c:	4770      	bx	lr
   1ab3e:	bf00      	nop

0001ab40 <__libc_init_array>:
   1ab40:	b570      	push	{r4, r5, r6, lr}
   1ab42:	4e0f      	ldr	r6, [pc, #60]	; (1ab80 <__libc_init_array+0x40>)
   1ab44:	4d0f      	ldr	r5, [pc, #60]	; (1ab84 <__libc_init_array+0x44>)
   1ab46:	1b76      	subs	r6, r6, r5
   1ab48:	10b6      	asrs	r6, r6, #2
   1ab4a:	bf18      	it	ne
   1ab4c:	2400      	movne	r4, #0
   1ab4e:	d005      	beq.n	1ab5c <__libc_init_array+0x1c>
   1ab50:	3401      	adds	r4, #1
   1ab52:	f855 3b04 	ldr.w	r3, [r5], #4
   1ab56:	4798      	blx	r3
   1ab58:	42a6      	cmp	r6, r4
   1ab5a:	d1f9      	bne.n	1ab50 <__libc_init_array+0x10>
   1ab5c:	4e0a      	ldr	r6, [pc, #40]	; (1ab88 <__libc_init_array+0x48>)
   1ab5e:	4d0b      	ldr	r5, [pc, #44]	; (1ab8c <__libc_init_array+0x4c>)
   1ab60:	1b76      	subs	r6, r6, r5
   1ab62:	f001 fb65 	bl	1c230 <_init>
   1ab66:	10b6      	asrs	r6, r6, #2
   1ab68:	bf18      	it	ne
   1ab6a:	2400      	movne	r4, #0
   1ab6c:	d006      	beq.n	1ab7c <__libc_init_array+0x3c>
   1ab6e:	3401      	adds	r4, #1
   1ab70:	f855 3b04 	ldr.w	r3, [r5], #4
   1ab74:	4798      	blx	r3
   1ab76:	42a6      	cmp	r6, r4
   1ab78:	d1f9      	bne.n	1ab6e <__libc_init_array+0x2e>
   1ab7a:	bd70      	pop	{r4, r5, r6, pc}
   1ab7c:	bd70      	pop	{r4, r5, r6, pc}
   1ab7e:	bf00      	nop
   1ab80:	0001c23c 	.word	0x0001c23c
   1ab84:	0001c23c 	.word	0x0001c23c
   1ab88:	0001c2b0 	.word	0x0001c2b0
   1ab8c:	0001c23c 	.word	0x0001c23c

0001ab90 <memcpy>:
   1ab90:	4684      	mov	ip, r0
   1ab92:	ea41 0300 	orr.w	r3, r1, r0
   1ab96:	f013 0303 	ands.w	r3, r3, #3
   1ab9a:	d16d      	bne.n	1ac78 <memcpy+0xe8>
   1ab9c:	3a40      	subs	r2, #64	; 0x40
   1ab9e:	d341      	bcc.n	1ac24 <memcpy+0x94>
   1aba0:	f851 3b04 	ldr.w	r3, [r1], #4
   1aba4:	f840 3b04 	str.w	r3, [r0], #4
   1aba8:	f851 3b04 	ldr.w	r3, [r1], #4
   1abac:	f840 3b04 	str.w	r3, [r0], #4
   1abb0:	f851 3b04 	ldr.w	r3, [r1], #4
   1abb4:	f840 3b04 	str.w	r3, [r0], #4
   1abb8:	f851 3b04 	ldr.w	r3, [r1], #4
   1abbc:	f840 3b04 	str.w	r3, [r0], #4
   1abc0:	f851 3b04 	ldr.w	r3, [r1], #4
   1abc4:	f840 3b04 	str.w	r3, [r0], #4
   1abc8:	f851 3b04 	ldr.w	r3, [r1], #4
   1abcc:	f840 3b04 	str.w	r3, [r0], #4
   1abd0:	f851 3b04 	ldr.w	r3, [r1], #4
   1abd4:	f840 3b04 	str.w	r3, [r0], #4
   1abd8:	f851 3b04 	ldr.w	r3, [r1], #4
   1abdc:	f840 3b04 	str.w	r3, [r0], #4
   1abe0:	f851 3b04 	ldr.w	r3, [r1], #4
   1abe4:	f840 3b04 	str.w	r3, [r0], #4
   1abe8:	f851 3b04 	ldr.w	r3, [r1], #4
   1abec:	f840 3b04 	str.w	r3, [r0], #4
   1abf0:	f851 3b04 	ldr.w	r3, [r1], #4
   1abf4:	f840 3b04 	str.w	r3, [r0], #4
   1abf8:	f851 3b04 	ldr.w	r3, [r1], #4
   1abfc:	f840 3b04 	str.w	r3, [r0], #4
   1ac00:	f851 3b04 	ldr.w	r3, [r1], #4
   1ac04:	f840 3b04 	str.w	r3, [r0], #4
   1ac08:	f851 3b04 	ldr.w	r3, [r1], #4
   1ac0c:	f840 3b04 	str.w	r3, [r0], #4
   1ac10:	f851 3b04 	ldr.w	r3, [r1], #4
   1ac14:	f840 3b04 	str.w	r3, [r0], #4
   1ac18:	f851 3b04 	ldr.w	r3, [r1], #4
   1ac1c:	f840 3b04 	str.w	r3, [r0], #4
   1ac20:	3a40      	subs	r2, #64	; 0x40
   1ac22:	d2bd      	bcs.n	1aba0 <memcpy+0x10>
   1ac24:	3230      	adds	r2, #48	; 0x30
   1ac26:	d311      	bcc.n	1ac4c <memcpy+0xbc>
   1ac28:	f851 3b04 	ldr.w	r3, [r1], #4
   1ac2c:	f840 3b04 	str.w	r3, [r0], #4
   1ac30:	f851 3b04 	ldr.w	r3, [r1], #4
   1ac34:	f840 3b04 	str.w	r3, [r0], #4
   1ac38:	f851 3b04 	ldr.w	r3, [r1], #4
   1ac3c:	f840 3b04 	str.w	r3, [r0], #4
   1ac40:	f851 3b04 	ldr.w	r3, [r1], #4
   1ac44:	f840 3b04 	str.w	r3, [r0], #4
   1ac48:	3a10      	subs	r2, #16
   1ac4a:	d2ed      	bcs.n	1ac28 <memcpy+0x98>
   1ac4c:	320c      	adds	r2, #12
   1ac4e:	d305      	bcc.n	1ac5c <memcpy+0xcc>
   1ac50:	f851 3b04 	ldr.w	r3, [r1], #4
   1ac54:	f840 3b04 	str.w	r3, [r0], #4
   1ac58:	3a04      	subs	r2, #4
   1ac5a:	d2f9      	bcs.n	1ac50 <memcpy+0xc0>
   1ac5c:	3204      	adds	r2, #4
   1ac5e:	d008      	beq.n	1ac72 <memcpy+0xe2>
   1ac60:	07d2      	lsls	r2, r2, #31
   1ac62:	bf1c      	itt	ne
   1ac64:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1ac68:	f800 3b01 	strbne.w	r3, [r0], #1
   1ac6c:	d301      	bcc.n	1ac72 <memcpy+0xe2>
   1ac6e:	880b      	ldrh	r3, [r1, #0]
   1ac70:	8003      	strh	r3, [r0, #0]
   1ac72:	4660      	mov	r0, ip
   1ac74:	4770      	bx	lr
   1ac76:	bf00      	nop
   1ac78:	2a08      	cmp	r2, #8
   1ac7a:	d313      	bcc.n	1aca4 <memcpy+0x114>
   1ac7c:	078b      	lsls	r3, r1, #30
   1ac7e:	d08d      	beq.n	1ab9c <memcpy+0xc>
   1ac80:	f010 0303 	ands.w	r3, r0, #3
   1ac84:	d08a      	beq.n	1ab9c <memcpy+0xc>
   1ac86:	f1c3 0304 	rsb	r3, r3, #4
   1ac8a:	1ad2      	subs	r2, r2, r3
   1ac8c:	07db      	lsls	r3, r3, #31
   1ac8e:	bf1c      	itt	ne
   1ac90:	f811 3b01 	ldrbne.w	r3, [r1], #1
   1ac94:	f800 3b01 	strbne.w	r3, [r0], #1
   1ac98:	d380      	bcc.n	1ab9c <memcpy+0xc>
   1ac9a:	f831 3b02 	ldrh.w	r3, [r1], #2
   1ac9e:	f820 3b02 	strh.w	r3, [r0], #2
   1aca2:	e77b      	b.n	1ab9c <memcpy+0xc>
   1aca4:	3a04      	subs	r2, #4
   1aca6:	d3d9      	bcc.n	1ac5c <memcpy+0xcc>
   1aca8:	3a01      	subs	r2, #1
   1acaa:	f811 3b01 	ldrb.w	r3, [r1], #1
   1acae:	f800 3b01 	strb.w	r3, [r0], #1
   1acb2:	d2f9      	bcs.n	1aca8 <memcpy+0x118>
   1acb4:	780b      	ldrb	r3, [r1, #0]
   1acb6:	7003      	strb	r3, [r0, #0]
   1acb8:	784b      	ldrb	r3, [r1, #1]
   1acba:	7043      	strb	r3, [r0, #1]
   1acbc:	788b      	ldrb	r3, [r1, #2]
   1acbe:	7083      	strb	r3, [r0, #2]
   1acc0:	4660      	mov	r0, ip
   1acc2:	4770      	bx	lr

0001acc4 <memset>:
   1acc4:	b470      	push	{r4, r5, r6}
   1acc6:	0786      	lsls	r6, r0, #30
   1acc8:	d046      	beq.n	1ad58 <memset+0x94>
   1acca:	1e54      	subs	r4, r2, #1
   1accc:	2a00      	cmp	r2, #0
   1acce:	d041      	beq.n	1ad54 <memset+0x90>
   1acd0:	b2ca      	uxtb	r2, r1
   1acd2:	4603      	mov	r3, r0
   1acd4:	e002      	b.n	1acdc <memset+0x18>
   1acd6:	f114 34ff 	adds.w	r4, r4, #4294967295
   1acda:	d33b      	bcc.n	1ad54 <memset+0x90>
   1acdc:	f803 2b01 	strb.w	r2, [r3], #1
   1ace0:	079d      	lsls	r5, r3, #30
   1ace2:	d1f8      	bne.n	1acd6 <memset+0x12>
   1ace4:	2c03      	cmp	r4, #3
   1ace6:	d92e      	bls.n	1ad46 <memset+0x82>
   1ace8:	b2cd      	uxtb	r5, r1
   1acea:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1acee:	2c0f      	cmp	r4, #15
   1acf0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1acf4:	d919      	bls.n	1ad2a <memset+0x66>
   1acf6:	f103 0210 	add.w	r2, r3, #16
   1acfa:	4626      	mov	r6, r4
   1acfc:	3e10      	subs	r6, #16
   1acfe:	2e0f      	cmp	r6, #15
   1ad00:	f842 5c10 	str.w	r5, [r2, #-16]
   1ad04:	f842 5c0c 	str.w	r5, [r2, #-12]
   1ad08:	f842 5c08 	str.w	r5, [r2, #-8]
   1ad0c:	f842 5c04 	str.w	r5, [r2, #-4]
   1ad10:	f102 0210 	add.w	r2, r2, #16
   1ad14:	d8f2      	bhi.n	1acfc <memset+0x38>
   1ad16:	f1a4 0210 	sub.w	r2, r4, #16
   1ad1a:	f022 020f 	bic.w	r2, r2, #15
   1ad1e:	f004 040f 	and.w	r4, r4, #15
   1ad22:	3210      	adds	r2, #16
   1ad24:	2c03      	cmp	r4, #3
   1ad26:	4413      	add	r3, r2
   1ad28:	d90d      	bls.n	1ad46 <memset+0x82>
   1ad2a:	461e      	mov	r6, r3
   1ad2c:	4622      	mov	r2, r4
   1ad2e:	3a04      	subs	r2, #4
   1ad30:	2a03      	cmp	r2, #3
   1ad32:	f846 5b04 	str.w	r5, [r6], #4
   1ad36:	d8fa      	bhi.n	1ad2e <memset+0x6a>
   1ad38:	1f22      	subs	r2, r4, #4
   1ad3a:	f022 0203 	bic.w	r2, r2, #3
   1ad3e:	3204      	adds	r2, #4
   1ad40:	4413      	add	r3, r2
   1ad42:	f004 0403 	and.w	r4, r4, #3
   1ad46:	b12c      	cbz	r4, 1ad54 <memset+0x90>
   1ad48:	b2c9      	uxtb	r1, r1
   1ad4a:	441c      	add	r4, r3
   1ad4c:	f803 1b01 	strb.w	r1, [r3], #1
   1ad50:	429c      	cmp	r4, r3
   1ad52:	d1fb      	bne.n	1ad4c <memset+0x88>
   1ad54:	bc70      	pop	{r4, r5, r6}
   1ad56:	4770      	bx	lr
   1ad58:	4614      	mov	r4, r2
   1ad5a:	4603      	mov	r3, r0
   1ad5c:	e7c2      	b.n	1ace4 <memset+0x20>
   1ad5e:	bf00      	nop

0001ad60 <rand>:
   1ad60:	b410      	push	{r4}
   1ad62:	4b0c      	ldr	r3, [pc, #48]	; (1ad94 <rand+0x34>)
   1ad64:	480c      	ldr	r0, [pc, #48]	; (1ad98 <rand+0x38>)
   1ad66:	6819      	ldr	r1, [r3, #0]
   1ad68:	4c0c      	ldr	r4, [pc, #48]	; (1ad9c <rand+0x3c>)
   1ad6a:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   1ad6e:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   1ad72:	fb00 f002 	mul.w	r0, r0, r2
   1ad76:	fb04 0003 	mla	r0, r4, r3, r0
   1ad7a:	fba2 2304 	umull	r2, r3, r2, r4
   1ad7e:	4403      	add	r3, r0
   1ad80:	3201      	adds	r2, #1
   1ad82:	f143 0300 	adc.w	r3, r3, #0
   1ad86:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   1ad8a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1ad8e:	bc10      	pop	{r4}
   1ad90:	4770      	bx	lr
   1ad92:	bf00      	nop
   1ad94:	20000614 	.word	0x20000614
   1ad98:	5851f42d 	.word	0x5851f42d
   1ad9c:	4c957f2d 	.word	0x4c957f2d

0001ada0 <strcat>:
   1ada0:	0783      	lsls	r3, r0, #30
   1ada2:	b510      	push	{r4, lr}
   1ada4:	4604      	mov	r4, r0
   1ada6:	d110      	bne.n	1adca <strcat+0x2a>
   1ada8:	6802      	ldr	r2, [r0, #0]
   1adaa:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1adae:	ea23 0302 	bic.w	r3, r3, r2
   1adb2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1adb6:	d108      	bne.n	1adca <strcat+0x2a>
   1adb8:	f850 2f04 	ldr.w	r2, [r0, #4]!
   1adbc:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1adc0:	ea23 0302 	bic.w	r3, r3, r2
   1adc4:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1adc8:	d0f6      	beq.n	1adb8 <strcat+0x18>
   1adca:	7803      	ldrb	r3, [r0, #0]
   1adcc:	b11b      	cbz	r3, 1add6 <strcat+0x36>
   1adce:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1add2:	2b00      	cmp	r3, #0
   1add4:	d1fb      	bne.n	1adce <strcat+0x2e>
   1add6:	f000 f803 	bl	1ade0 <strcpy>
   1adda:	4620      	mov	r0, r4
   1addc:	bd10      	pop	{r4, pc}
   1adde:	bf00      	nop

0001ade0 <strcpy>:
   1ade0:	ea80 0201 	eor.w	r2, r0, r1
   1ade4:	4684      	mov	ip, r0
   1ade6:	f012 0f03 	tst.w	r2, #3
   1adea:	d14f      	bne.n	1ae8c <strcpy+0xac>
   1adec:	f011 0f03 	tst.w	r1, #3
   1adf0:	d132      	bne.n	1ae58 <strcpy+0x78>
   1adf2:	f84d 4d04 	str.w	r4, [sp, #-4]!
   1adf6:	f011 0f04 	tst.w	r1, #4
   1adfa:	f851 3b04 	ldr.w	r3, [r1], #4
   1adfe:	d00b      	beq.n	1ae18 <strcpy+0x38>
   1ae00:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1ae04:	439a      	bics	r2, r3
   1ae06:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1ae0a:	bf04      	itt	eq
   1ae0c:	f84c 3b04 	streq.w	r3, [ip], #4
   1ae10:	f851 3b04 	ldreq.w	r3, [r1], #4
   1ae14:	d116      	bne.n	1ae44 <strcpy+0x64>
   1ae16:	bf00      	nop
   1ae18:	f851 4b04 	ldr.w	r4, [r1], #4
   1ae1c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1ae20:	439a      	bics	r2, r3
   1ae22:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1ae26:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1ae2a:	d10b      	bne.n	1ae44 <strcpy+0x64>
   1ae2c:	f84c 3b04 	str.w	r3, [ip], #4
   1ae30:	43a2      	bics	r2, r4
   1ae32:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1ae36:	bf04      	itt	eq
   1ae38:	f851 3b04 	ldreq.w	r3, [r1], #4
   1ae3c:	f84c 4b04 	streq.w	r4, [ip], #4
   1ae40:	d0ea      	beq.n	1ae18 <strcpy+0x38>
   1ae42:	4623      	mov	r3, r4
   1ae44:	f80c 3b01 	strb.w	r3, [ip], #1
   1ae48:	f013 0fff 	tst.w	r3, #255	; 0xff
   1ae4c:	ea4f 2333 	mov.w	r3, r3, ror #8
   1ae50:	d1f8      	bne.n	1ae44 <strcpy+0x64>
   1ae52:	f85d 4b04 	ldr.w	r4, [sp], #4
   1ae56:	4770      	bx	lr
   1ae58:	f011 0f01 	tst.w	r1, #1
   1ae5c:	d006      	beq.n	1ae6c <strcpy+0x8c>
   1ae5e:	f811 2b01 	ldrb.w	r2, [r1], #1
   1ae62:	f80c 2b01 	strb.w	r2, [ip], #1
   1ae66:	2a00      	cmp	r2, #0
   1ae68:	bf08      	it	eq
   1ae6a:	4770      	bxeq	lr
   1ae6c:	f011 0f02 	tst.w	r1, #2
   1ae70:	d0bf      	beq.n	1adf2 <strcpy+0x12>
   1ae72:	f831 2b02 	ldrh.w	r2, [r1], #2
   1ae76:	f012 0fff 	tst.w	r2, #255	; 0xff
   1ae7a:	bf16      	itet	ne
   1ae7c:	f82c 2b02 	strhne.w	r2, [ip], #2
   1ae80:	f88c 2000 	strbeq.w	r2, [ip]
   1ae84:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   1ae88:	d1b3      	bne.n	1adf2 <strcpy+0x12>
   1ae8a:	4770      	bx	lr
   1ae8c:	f811 2b01 	ldrb.w	r2, [r1], #1
   1ae90:	f80c 2b01 	strb.w	r2, [ip], #1
   1ae94:	2a00      	cmp	r2, #0
   1ae96:	d1f9      	bne.n	1ae8c <strcpy+0xac>
   1ae98:	4770      	bx	lr
   1ae9a:	bf00      	nop
	...

0001aec0 <strlen>:
   1aec0:	f890 f000 	pld	[r0]
   1aec4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   1aec8:	f020 0107 	bic.w	r1, r0, #7
   1aecc:	f06f 0c00 	mvn.w	ip, #0
   1aed0:	f010 0407 	ands.w	r4, r0, #7
   1aed4:	f891 f020 	pld	[r1, #32]
   1aed8:	f040 8049 	bne.w	1af6e <strlen+0xae>
   1aedc:	f04f 0400 	mov.w	r4, #0
   1aee0:	f06f 0007 	mvn.w	r0, #7
   1aee4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1aee8:	f891 f040 	pld	[r1, #64]	; 0x40
   1aeec:	f100 0008 	add.w	r0, r0, #8
   1aef0:	fa82 f24c 	uadd8	r2, r2, ip
   1aef4:	faa4 f28c 	sel	r2, r4, ip
   1aef8:	fa83 f34c 	uadd8	r3, r3, ip
   1aefc:	faa2 f38c 	sel	r3, r2, ip
   1af00:	bb4b      	cbnz	r3, 1af56 <strlen+0x96>
   1af02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1af06:	fa82 f24c 	uadd8	r2, r2, ip
   1af0a:	f100 0008 	add.w	r0, r0, #8
   1af0e:	faa4 f28c 	sel	r2, r4, ip
   1af12:	fa83 f34c 	uadd8	r3, r3, ip
   1af16:	faa2 f38c 	sel	r3, r2, ip
   1af1a:	b9e3      	cbnz	r3, 1af56 <strlen+0x96>
   1af1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1af20:	fa82 f24c 	uadd8	r2, r2, ip
   1af24:	f100 0008 	add.w	r0, r0, #8
   1af28:	faa4 f28c 	sel	r2, r4, ip
   1af2c:	fa83 f34c 	uadd8	r3, r3, ip
   1af30:	faa2 f38c 	sel	r3, r2, ip
   1af34:	b97b      	cbnz	r3, 1af56 <strlen+0x96>
   1af36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1af3a:	f101 0120 	add.w	r1, r1, #32
   1af3e:	fa82 f24c 	uadd8	r2, r2, ip
   1af42:	f100 0008 	add.w	r0, r0, #8
   1af46:	faa4 f28c 	sel	r2, r4, ip
   1af4a:	fa83 f34c 	uadd8	r3, r3, ip
   1af4e:	faa2 f38c 	sel	r3, r2, ip
   1af52:	2b00      	cmp	r3, #0
   1af54:	d0c6      	beq.n	1aee4 <strlen+0x24>
   1af56:	2a00      	cmp	r2, #0
   1af58:	bf04      	itt	eq
   1af5a:	3004      	addeq	r0, #4
   1af5c:	461a      	moveq	r2, r3
   1af5e:	ba12      	rev	r2, r2
   1af60:	fab2 f282 	clz	r2, r2
   1af64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   1af68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1af6c:	4770      	bx	lr
   1af6e:	e9d1 2300 	ldrd	r2, r3, [r1]
   1af72:	f004 0503 	and.w	r5, r4, #3
   1af76:	f1c4 0000 	rsb	r0, r4, #0
   1af7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1af7e:	f014 0f04 	tst.w	r4, #4
   1af82:	f891 f040 	pld	[r1, #64]	; 0x40
   1af86:	fa0c f505 	lsl.w	r5, ip, r5
   1af8a:	ea62 0205 	orn	r2, r2, r5
   1af8e:	bf1c      	itt	ne
   1af90:	ea63 0305 	ornne	r3, r3, r5
   1af94:	4662      	movne	r2, ip
   1af96:	f04f 0400 	mov.w	r4, #0
   1af9a:	e7a9      	b.n	1aef0 <strlen+0x30>

0001af9c <__register_exitproc>:
   1af9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1afa0:	4d2c      	ldr	r5, [pc, #176]	; (1b054 <__register_exitproc+0xb8>)
   1afa2:	4606      	mov	r6, r0
   1afa4:	6828      	ldr	r0, [r5, #0]
   1afa6:	4698      	mov	r8, r3
   1afa8:	460f      	mov	r7, r1
   1afaa:	4691      	mov	r9, r2
   1afac:	f000 f882 	bl	1b0b4 <__retarget_lock_acquire_recursive>
   1afb0:	4b29      	ldr	r3, [pc, #164]	; (1b058 <__register_exitproc+0xbc>)
   1afb2:	681c      	ldr	r4, [r3, #0]
   1afb4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1afb8:	2b00      	cmp	r3, #0
   1afba:	d03e      	beq.n	1b03a <__register_exitproc+0x9e>
   1afbc:	685a      	ldr	r2, [r3, #4]
   1afbe:	2a1f      	cmp	r2, #31
   1afc0:	dc1c      	bgt.n	1affc <__register_exitproc+0x60>
   1afc2:	f102 0e01 	add.w	lr, r2, #1
   1afc6:	b176      	cbz	r6, 1afe6 <__register_exitproc+0x4a>
   1afc8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1afcc:	2401      	movs	r4, #1
   1afce:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   1afd2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   1afd6:	4094      	lsls	r4, r2
   1afd8:	4320      	orrs	r0, r4
   1afda:	2e02      	cmp	r6, #2
   1afdc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   1afe0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   1afe4:	d023      	beq.n	1b02e <__register_exitproc+0x92>
   1afe6:	3202      	adds	r2, #2
   1afe8:	f8c3 e004 	str.w	lr, [r3, #4]
   1afec:	6828      	ldr	r0, [r5, #0]
   1afee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1aff2:	f000 f861 	bl	1b0b8 <__retarget_lock_release_recursive>
   1aff6:	2000      	movs	r0, #0
   1aff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1affc:	4b17      	ldr	r3, [pc, #92]	; (1b05c <__register_exitproc+0xc0>)
   1affe:	b30b      	cbz	r3, 1b044 <__register_exitproc+0xa8>
   1b000:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1b004:	f7f6 fa1c 	bl	11440 <malloc>
   1b008:	4603      	mov	r3, r0
   1b00a:	b1d8      	cbz	r0, 1b044 <__register_exitproc+0xa8>
   1b00c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   1b010:	6002      	str	r2, [r0, #0]
   1b012:	2100      	movs	r1, #0
   1b014:	6041      	str	r1, [r0, #4]
   1b016:	460a      	mov	r2, r1
   1b018:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1b01c:	f04f 0e01 	mov.w	lr, #1
   1b020:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   1b024:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   1b028:	2e00      	cmp	r6, #0
   1b02a:	d0dc      	beq.n	1afe6 <__register_exitproc+0x4a>
   1b02c:	e7cc      	b.n	1afc8 <__register_exitproc+0x2c>
   1b02e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   1b032:	430c      	orrs	r4, r1
   1b034:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   1b038:	e7d5      	b.n	1afe6 <__register_exitproc+0x4a>
   1b03a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1b03e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1b042:	e7bb      	b.n	1afbc <__register_exitproc+0x20>
   1b044:	6828      	ldr	r0, [r5, #0]
   1b046:	f000 f837 	bl	1b0b8 <__retarget_lock_release_recursive>
   1b04a:	f04f 30ff 	mov.w	r0, #4294967295
   1b04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b052:	bf00      	nop
   1b054:	20000a40 	.word	0x20000a40
   1b058:	0001c22c 	.word	0x0001c22c
   1b05c:	00011441 	.word	0x00011441

0001b060 <register_fini>:
   1b060:	4b02      	ldr	r3, [pc, #8]	; (1b06c <register_fini+0xc>)
   1b062:	b113      	cbz	r3, 1b06a <register_fini+0xa>
   1b064:	4802      	ldr	r0, [pc, #8]	; (1b070 <register_fini+0x10>)
   1b066:	f000 b805 	b.w	1b074 <atexit>
   1b06a:	4770      	bx	lr
   1b06c:	00000000 	.word	0x00000000
   1b070:	0001b081 	.word	0x0001b081

0001b074 <atexit>:
   1b074:	2300      	movs	r3, #0
   1b076:	4601      	mov	r1, r0
   1b078:	461a      	mov	r2, r3
   1b07a:	4618      	mov	r0, r3
   1b07c:	f7ff bf8e 	b.w	1af9c <__register_exitproc>

0001b080 <__libc_fini_array>:
   1b080:	b538      	push	{r3, r4, r5, lr}
   1b082:	4c0a      	ldr	r4, [pc, #40]	; (1b0ac <__libc_fini_array+0x2c>)
   1b084:	4d0a      	ldr	r5, [pc, #40]	; (1b0b0 <__libc_fini_array+0x30>)
   1b086:	1b64      	subs	r4, r4, r5
   1b088:	10a4      	asrs	r4, r4, #2
   1b08a:	d00a      	beq.n	1b0a2 <__libc_fini_array+0x22>
   1b08c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   1b090:	3b01      	subs	r3, #1
   1b092:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1b096:	3c01      	subs	r4, #1
   1b098:	f855 3904 	ldr.w	r3, [r5], #-4
   1b09c:	4798      	blx	r3
   1b09e:	2c00      	cmp	r4, #0
   1b0a0:	d1f9      	bne.n	1b096 <__libc_fini_array+0x16>
   1b0a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b0a6:	f001 b903 	b.w	1c2b0 <_fini>
   1b0aa:	bf00      	nop
   1b0ac:	0001c2c0 	.word	0x0001c2c0
   1b0b0:	0001c2bc 	.word	0x0001c2bc

0001b0b4 <__retarget_lock_acquire_recursive>:
   1b0b4:	4770      	bx	lr
   1b0b6:	bf00      	nop

0001b0b8 <__retarget_lock_release_recursive>:
   1b0b8:	4770      	bx	lr
   1b0ba:	bf00      	nop
   1b0bc:	6f666e49 	.word	0x6f666e49
   1b0c0:	6d654d3a 	.word	0x6d654d3a
   1b0c4:	2079726f 	.word	0x2079726f
   1b0c8:	72617453 	.word	0x72617453
   1b0cc:	00646574 	.word	0x00646574
   1b0d0:	6e6e7552 	.word	0x6e6e7552
   1b0d4:	20676e69 	.word	0x20676e69
   1b0d8:	6b696c20 	.word	0x6b696c20
   1b0dc:	72632065 	.word	0x72632065
   1b0e0:	21797a61 	.word	0x21797a61
   1b0e4:	203a2121 	.word	0x203a2121
   1b0e8:	00000000 	.word	0x00000000

0001b0ec <_ZTC16Maintenance_Tool0_16Commands_Handler>:
   1b0ec:	00000190 00000000 00000000              ............

0001b0f8 <_ZTT16Maintenance_Tool>:
   1b0f8:	0001b10c 0001b0f8                       ........

0001b100 <_ZTV16Maintenance_Tool>:
   1b100:	00000190 00000000 00000000 682f2e2e     ............../h
   1b110:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   1b120:	7361625f 00682e65 682f2e2e 692f6c61     _base.h.../hal/i
   1b130:	756c636e 682f6564 775f6c61 682e7464     nclude/hal_wdt.h
   1b140:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
   1b150:	635f6c61 6e656c61 2e726164 00000063     al_calendar.c...
   1b160:	682f2e2e 732f6c61 682f6372 635f6c61     ../hal/src/hal_c
   1b170:	615f6e61 636e7973 0000632e 682f2e2e     an_async.c..../h
   1b180:	732f6c61 682f6372 635f6c61 735f6372     al/src/hal_crc_s
   1b190:	2e636e79 00000063 682f2e2e 732f6c61     ync.c...../hal/s
   1b1a0:	682f6372 695f6c61 6d5f6332 6e79735f     rc/hal_i2c_m_syn
   1b1b0:	00632e63 682f2e2e 732f6c61 682f6372     c.c.../hal/src/h
   1b1c0:	705f6c61 632e6d77 00000000 682f2e2e     al_pwm.c....../h
   1b1d0:	732f6c61 682f6372 715f6c61 5f697073     al/src/hal_qspi_
   1b1e0:	636e7973 0000632e 682f2e2e 732f6c61     sync.c..../hal/s
   1b1f0:	682f6372 735f6c61 6d5f6970 6e79735f     rc/hal_spi_m_syn
   1b200:	00632e63 682f2e2e 732f6c61 682f6372     c.c.../hal/src/h
   1b210:	745f6c61 72656d69 0000632e 682f2e2e     al_timer.c..../h
   1b220:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
   1b230:	6c5f736c 2e747369 00000063 03020100     ls_list.c.......
   1b240:	07060504 14100c08 40302018              ......... 0@

0001b24c <_map>:
   1b24c:	00000000 00000040 00000001 00000021     ....@.......!...
   1b25c:	00000003 00000003 00000004 00000004     ................
   1b26c:	00000005 00000005 00000006 00000056     ............V...
   1b27c:	00000007 00000057 00000008 00000028     ....W.......(...
   1b28c:	00000009 00000029 0000000a 0000004a     ....).......J...
   1b29c:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
   1b2ac:	632e6369 00000000                       ic.c....

0001b2b4 <user_mux_confs>:
   1b2b4:	00020100 00000000 00000000 00000000     ................
	...

0001b2f8 <channel_confs>:
   1b2f8:	0660065f 00000000 00000000 00000000     _.`.............
	...

0001b338 <interrupt_cfg>:
	...
   1b3b8:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   1b3c8:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
   1b3d8:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   1b3e8:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   1b3f8:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
   1b408:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
   1b418:	43000400 43000800 43000c00              ...C...C...C

0001b424 <sercomspi_regs>:
   1b424:	0020000c 00020000 00000000 01ff0001     .. .............
   1b434:	30000c04 02000000 00000000 ff001700     ...0............
   1b444:	00000601 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   1b454:	63745f6c 0000632e 40003800 40003c00     l_tc.c...8.@.<.@
   1b464:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1b474:	43001400 43001800                       ...C...C

0001b47c <_usb_ep_cfgs>:
   1b47c:	2000236c 00000000 00000040 200023ac     l#. ....@....#. 
   1b48c:	200023ec 00400040 2000242c 2000246c     .#. @.@.,$. l$. 
   1b49c:	00400040 200024ac 200024ec 00400040     @.@..$. .$. @.@.
   1b4ac:	2000252c 2000256c 00400040 00000804     ,%. l%. @.@.....
   1b4bc:	00004a25 682f2e2e 772f6c70 682f7464     %J..../hpl/wdt/h
   1b4cc:	775f6c70 632e7464 00000000 682f2e2e     pl_wdt.c....../h
   1b4dc:	702f6c70 2f74726f 5f6c7068 6f697067     pl/port/hpl_gpio
   1b4ec:	7361625f 00682e65                       _base.h.

0001b4f4 <n25q256a_interface>:
   1b4f4:	0000d565 0000d609 0000d719 0000d8d1     e...............
   1b504:	0000d961 752f2e2e 642f6273 63697665     a...../usb/devic
   1b514:	73752f65 2e636462 00000063              e/usbdc.c...

0001b520 <_ZTV20Compresor_Controller>:
	...
   1b528:	00015ea5                                .^..

0001b52c <_ZTV28Compressor_CANOpen_Interface>:
	...
   1b534:	00015ea5 74616548 32207265 67202c20     .^..Heater 2 , g
   1b544:	736f6970 00203a20 74616548 31207265     pios : .Heater 1
   1b554:	67202c20 736f6970 00203a20               , gpios : .

0001b560 <_ZTV9CDC_Class>:
	...
   1b568:	00010d91 00010e71 000109e5 00010d59     ....q.......Y...
   1b578:	00010f09 00010d1d 00010c01 00010c51     ............Q...
   1b588:	00010d79 00010dd9                       y.......

0001b590 <_ZTV6Stream>:
	...
   1b598:	00011455 00011075 000109e5 000109f9     U...u...........
   1b5a8:	00011455 00011455 00011455 2e257830     U...U...U...0x%.
   1b5b8:	00005838 00000a0d 006e616e 00666e69     8X......nan.inf.
   1b5c8:	0066766f                                ovf.

0001b5cc <_ZTV5Print>:
	...
   1b5d4:	00011455 00011075 000109e5 000109f9     U...u...........

0001b5e4 <_ZTV18Event_Logger_Class>:
	...
   1b5ec:	0001a281 0001a371 74696e49 696c6169     ....q...Initiali
   1b5fc:	6974617a 46206e6f 73696e69 00646568     zation Finished.
   1b60c:	43555320 53534543 00000000 49414620      SUCCESS.... FAI
   1b61c:	44454c4c 00000000 4b4e5520 4e574f4e     LLED.... UNKNOWN
   1b62c:	00000000 616e4520 64656c62 00000000     .... Enabled....
   1b63c:	73694420 656c6261 00000064 32317830      Disabled...0x12
   1b64c:	36353433 00003837 70616c46 20726570     345678..Flapper 
   1b65c:	766c6156 00002065 20433249 70616c46     Valve ..I2C Flap
   1b66c:	20726570 766c6156 75532065 73656363     per Valve Succes
   1b67c:	00000073 20433249 70616c46 20726570     s...I2C Flapper 
   1b68c:	766c6156 61462065 64656c69 00000000     Valve Failed....
   1b69c:	74616548 00207265 73616c46 654d2068     Heater .Flash Me
   1b6ac:	79726f6d 6c655320 73655466 41502074     mory SelfTest PA
   1b6bc:	44455353 00000000 73616c46 654d2068     SSED....Flash Me
   1b6cc:	79726f6d 6c655320 73655466 41462074     mory SelfTest FA
   1b6dc:	44454c49 00000000 75646f4d 0020656c     ILED....Module .
   1b6ec:	20495053 706d6554 74617265 73657275     SPI Temperatures
   1b6fc:	61745320 64657472 00000000 20495053      Started....SPI 
   1b70c:	706d6554 74617265 73657275 69614620     Temperatures Fai
   1b71c:	0064656c                                led.

0001b720 <_ZTV13CANOpen_Class>:
	...
   1b728:	00015ea5                                .^..

0001b72c <_ZTV8CO_Class>:
	...
   1b734:	00015ea5                                .^..

0001b738 <_ZTV15CO_Driver_Class>:
	...
   1b740:	00015ea5                                .^..

0001b744 <_ZL13OD_record1018>:
   1b744:	200003e0 00000005 00000001 200003e4     ... ........... 
   1b754:	00000085 00000004 200003e8 00000085     ........... ....
   1b764:	00000004 200003ec 00000085 00000004     ....... ........
   1b774:	200003f0 00000085 00000004              ... ........

0001b780 <_ZL13OD_record1200>:
   1b780:	200003fc 00000005 00000001 20000400     ... ........... 
   1b790:	00000085 00000004 20000404 00000085     ........... ....
   1b7a0:	00000004                                ....

0001b7a4 <_ZL13OD_record1400>:
   1b7a4:	20000408 00000005 00000001 2000040c     ... ........... 
   1b7b4:	0000008d 00000004 20000410 0000000d     ........... ....
   1b7c4:	00000001                                ....

0001b7c8 <_ZL13OD_record1401>:
   1b7c8:	20000414 00000005 00000001 20000418     ... ........... 
   1b7d8:	0000008d 00000004 2000041c 0000000d     ........... ....
   1b7e8:	00000001                                ....

0001b7ec <_ZL13OD_record1402>:
   1b7ec:	20000420 00000005 00000001 20000424      .. ........$.. 
   1b7fc:	0000008d 00000004 20000428 0000000d     ........(.. ....
   1b80c:	00000001                                ....

0001b810 <_ZL13OD_record1403>:
   1b810:	2000042c 00000005 00000001 20000430     ,.. ........0.. 
   1b820:	0000008d 00000004 20000434 0000000d     ........4.. ....
   1b830:	00000001                                ....

0001b834 <_ZL13OD_record1600>:
   1b834:	20000438 0000000d 00000001 2000043c     8.. ........<.. 
   1b844:	0000008d 00000004 20000440 0000008d     ........@.. ....
   1b854:	00000004 20000444 0000008d 00000004     ....D.. ........
   1b864:	20000448 0000008d 00000004 2000044c     H.. ........L.. 
   1b874:	0000008d 00000004 20000450 0000008d     ........P.. ....
   1b884:	00000004 20000454 0000008d 00000004     ....T.. ........
   1b894:	20000458 0000008d 00000004              X.. ........

0001b8a0 <_ZL13OD_record1601>:
   1b8a0:	2000045c 0000000d 00000001 20000460     \.. ........`.. 
   1b8b0:	0000008d 00000004 20000464 0000008d     ........d.. ....
   1b8c0:	00000004 20000468 0000008d 00000004     ....h.. ........
   1b8d0:	2000046c 0000008d 00000004 20000470     l.. ........p.. 
   1b8e0:	0000008d 00000004 20000474 0000008d     ........t.. ....
   1b8f0:	00000004 20000478 0000008d 00000004     ....x.. ........
   1b900:	2000047c 0000008d 00000004              |.. ........

0001b90c <_ZL13OD_record1602>:
   1b90c:	20000480 0000000d 00000001 20000484     ... ........... 
   1b91c:	0000008d 00000004 20000488 0000008d     ........... ....
   1b92c:	00000004 2000048c 0000008d 00000004     ....... ........
   1b93c:	20000490 0000008d 00000004 20000494     ... ........... 
   1b94c:	0000008d 00000004 20000498 0000008d     ........... ....
   1b95c:	00000004 2000049c 0000008d 00000004     ....... ........
   1b96c:	200004a0 0000008d 00000004              ... ........

0001b978 <_ZL13OD_record1603>:
   1b978:	200004a4 0000000d 00000001 200004a8     ... ........... 
   1b988:	0000008d 00000004 200004ac 0000008d     ........... ....
   1b998:	00000004 200004b0 0000008d 00000004     ....... ........
   1b9a8:	200004b4 0000008d 00000004 200004b8     ... ........... 
   1b9b8:	0000008d 00000004 200004bc 0000008d     ........... ....
   1b9c8:	00000004 200004c0 0000008d 00000004     ....... ........
   1b9d8:	200004c4 0000008d 00000004              ... ........

0001b9e4 <_ZL13OD_record1800>:
   1b9e4:	200004c8 00000005 00000001 200004cc     ... ........... 
   1b9f4:	0000008d 00000004 200004d0 0000000d     ........... ....
   1ba04:	00000001 200004d4 0000008d 00000002     ....... ........
   1ba14:	200004d8 0000000d 00000001 200004dc     ... ........... 
   1ba24:	0000008d 00000002 200004e0 0000000d     ........... ....
   1ba34:	00000001                                ....

0001ba38 <_ZL13OD_record1801>:
   1ba38:	200004e4 00000005 00000001 200004e8     ... ........... 
   1ba48:	0000008d 00000004 200004ec 0000000d     ........... ....
   1ba58:	00000001 200004f0 0000008d 00000002     ....... ........
   1ba68:	200004f4 0000000d 00000001 200004f8     ... ........... 
   1ba78:	0000008d 00000002 200004fc 0000000d     ........... ....
   1ba88:	00000001                                ....

0001ba8c <_ZL13OD_record1802>:
   1ba8c:	20000500 00000005 00000001 20000504     ... ........... 
   1ba9c:	0000008d 00000004 20000508 0000000d     ........... ....
   1baac:	00000001 2000050c 0000008d 00000002     ....... ........
   1babc:	20000510 0000000d 00000001 20000514     ... ........... 
   1bacc:	0000008d 00000002 20000518 0000000d     ........... ....
   1badc:	00000001                                ....

0001bae0 <_ZL13OD_record1803>:
   1bae0:	2000051c 00000005 00000001 20000520     ... ........ .. 
   1baf0:	0000008d 00000004 20000524 0000000d     ........$.. ....
   1bb00:	00000001 20000528 0000008d 00000002     ....(.. ........
   1bb10:	2000052c 0000000d 00000001 20000530     ,.. ........0.. 
   1bb20:	0000008d 00000002 20000534 0000000d     ........4.. ....
   1bb30:	00000001                                ....

0001bb34 <_ZL13OD_record1A00>:
   1bb34:	20000538 0000000d 00000001 2000053c     8.. ........<.. 
   1bb44:	0000008d 00000004 20000540 0000008d     ........@.. ....
   1bb54:	00000004 20000544 0000008d 00000004     ....D.. ........
   1bb64:	20000548 0000008d 00000004 2000054c     H.. ........L.. 
   1bb74:	0000008d 00000004 20000550 0000008d     ........P.. ....
   1bb84:	00000004 20000554 0000008d 00000004     ....T.. ........
   1bb94:	20000558 0000008d 00000004              X.. ........

0001bba0 <_ZL13OD_record1A01>:
   1bba0:	2000055c 0000000d 00000001 20000560     \.. ........`.. 
   1bbb0:	0000008d 00000004 20000564 0000008d     ........d.. ....
   1bbc0:	00000004 20000568 0000008d 00000004     ....h.. ........
   1bbd0:	2000056c 0000008d 00000004 20000570     l.. ........p.. 
   1bbe0:	0000008d 00000004 20000574 0000008d     ........t.. ....
   1bbf0:	00000004 20000578 0000008d 00000004     ....x.. ........
   1bc00:	2000057c 0000008d 00000004              |.. ........

0001bc0c <_ZL13OD_record1A02>:
   1bc0c:	20000580 0000000d 00000001 20000584     ... ........... 
   1bc1c:	0000008d 00000004 20000588 0000008d     ........... ....
   1bc2c:	00000004 2000058c 0000008d 00000004     ....... ........
   1bc3c:	20000590 0000008d 00000004 20000594     ... ........... 
   1bc4c:	0000008d 00000004 20000598 0000008d     ........... ....
   1bc5c:	00000004 2000059c 0000008d 00000004     ....... ........
   1bc6c:	200005a0 0000008d 00000004              ... ........

0001bc78 <_ZL13OD_record1A03>:
   1bc78:	200005a4 0000000d 00000001 200005a8     ... ........... 
   1bc88:	0000008d 00000004 200005ac 0000008d     ........... ....
   1bc98:	00000004 200005b0 0000008d 00000004     ....... ........
   1bca8:	200005b4 0000008d 00000004 200005b8     ... ........... 
   1bcb8:	0000008d 00000004 200005bc 0000008d     ........... ....
   1bcc8:	00000004 200005c0 0000008d 00000004     ....... ........
   1bcd8:	200005c4 0000008d 00000004              ... ........

0001bce4 <_ZL13OD_record2120>:
   1bce4:	200002b0 00000006 00000001 200002b8     ... ........... 
   1bcf4:	000000be 00000008 200002c0 000000be     ........... ....
   1bd04:	00000008 200002c8 000000be 00000004     ....... ........
   1bd14:	200002d0 000000be 00000008 00000000     ... ............
   1bd24:	0000000e 00000000                       ........

0001bd2c <_ZL13OD_record2130>:
   1bd2c:	200002e0 00000006 00000001 200002e1     ... ........... 
   1bd3c:	00000006 0000001e 20000300 0000008e     ........... ....
   1bd4c:	00000008 20000308 000000be 00000004     ....... ........

0001bd5c <CO_ObjDict>:
   1bd5c:	00001000 00000000 00000085 00000004     ................
   1bd6c:	200003a0 00001001 00000000 00000036     ... ........6...
   1bd7c:	00000001 20000224 00001002 00000000     ....$.. ........
   1bd8c:	000000b6 00000004 20000228 00001003     ........(.. ....
   1bd9c:	00000008 0000008e 00000004 2000022c     ............,.. 
   1bdac:	00001005 00000000 0000008d 00000004     ................
   1bdbc:	200003a4 00001006 00000000 0000008d     ... ............
   1bdcc:	00000004 200003a8 00001007 00000000     ....... ........
   1bddc:	0000008d 00000004 200003ac 00001008     ........... ....
   1bdec:	00000000 00000005 0000000b 200003b0     ............... 
   1bdfc:	00001009 00000000 00000005 00000004     ................
   1be0c:	200003bb 0000100a 00000000 00000005     ... ............
   1be1c:	00000004 200003bf 00001010 00000001     ....... ........
   1be2c:	0000008e 00000004 2000024c 00001011     ........L.. ....
   1be3c:	00000001 0000008e 00000004 20000250     ............P.. 
   1be4c:	00001014 00000000 00000085 00000004     ................
   1be5c:	200003c4 00001015 00000000 0000008d     ... ............
   1be6c:	00000002 200003c8 00001016 00000004     ....... ........
   1be7c:	0000008d 00000004 200003cc 00001017     ........... ....
   1be8c:	00000000 0000008d 00000002 200003dc     ............... 
   1be9c:	00001018 00000004 00000000 00000000     ................
   1beac:	0001b744 00001019 00000000 0000000d     D...............
   1bebc:	00000001 200003f4 00001029 00000006     ....... ).......
   1becc:	0000000d 00000001 200003f5 00001200     ........... ....
   1bedc:	00000002 00000000 00000000 0001b780     ................
   1beec:	00001400 00000002 00000000 00000000     ................
   1befc:	0001b7a4 00001401 00000002 00000000     ................
   1bf0c:	00000000 0001b7c8 00001402 00000002     ................
	...
   1bf24:	0001b7ec 00001403 00000002 00000000     ................
   1bf34:	00000000 0001b810 00001600 00000008     ................
	...
   1bf4c:	0001b834 00001601 00000008 00000000     4...............
   1bf5c:	00000000 0001b8a0 00001602 00000008     ................
	...
   1bf74:	0001b90c 00001603 00000008 00000000     ................
   1bf84:	00000000 0001b978 00001800 00000006     ....x...........
	...
   1bf9c:	0001b9e4 00001801 00000006 00000000     ................
   1bfac:	00000000 0001ba38 00001802 00000006     ....8...........
	...
   1bfc4:	0001ba8c 00001803 00000006 00000000     ................
   1bfd4:	00000000 0001bae0 00001a00 00000008     ................
	...
   1bfec:	0001bb34 00001a01 00000008 00000000     4...............
   1bffc:	00000000 0001bba0 00001a02 00000008     ................
	...
   1c014:	0001bc0c 00001a03 00000008 00000000     ................
   1c024:	00000000 0001bc78 00001f80 00000000     ....x...........
   1c034:	0000008d 00000004 200005c8 00002100     ........... .!..
   1c044:	00000000 00000036 0000000a 20000254     ....6.......T.. 
   1c054:	00002101 00000000 0000000d 00000001     .!..............
   1c064:	200005cc 00002102 00000000 0000008d     ... .!..........
   1c074:	00000002 200005ce 00002103 00000000     ....... .!......
   1c084:	0000008e 00000002 2000025e 00002104     ........^.. .!..
   1c094:	00000000 00000086 00000002 20000260     ............`.. 
   1c0a4:	00002106 00000000 00000087 00000004     .!..............
   1c0b4:	20000354 00002107 00000005 000000be     T.. .!..........
   1c0c4:	00000002 20000262 00002108 00000001     ....b.. .!......
   1c0d4:	000000fd 00000008 2000026c 00002109     ........l.. .!..
   1c0e4:	00000001 000000fd 00000008 2000026e     ............n.. 
   1c0f4:	00002110 00000010 000000fe 00000004     .!..............
   1c104:	20000270 00002111 00000010 000000fd     p.. .!..........
   1c114:	00000004 200005d0 00002112 00000010     ....... .!......
   1c124:	000000ff 00000004 20000358 00002120     ........X..  !..
   1c134:	00000005 0000007d 00000008 0001bce4     ....}...........
   1c144:	00002130 00000003 00000000 00000000     0!..............
   1c154:	0001bd2c 00006000 00000008 00000076     ,....`......v...
   1c164:	00000001 20000310 00006200 00000008     ....... .b......
   1c174:	0000003e 00000001 20000318 00006401     >.......... .d..
   1c184:	0000000c 000000b6 00000002 20000320     ............ .. 
   1c194:	00006411 00000008 000000be 00000002     .d..............
   1c1a4:	20000338 682f2e2e 732f6c61 682f6372     8.. ../hal/src/h
   1c1b4:	695f6c61 00632e6f 2e2f2e2e 2e2e2f2e     al_io.c.../../..
   1c1c4:	554c412f 6972445f 2f726576 5f554c41     /ALU_Driver/ALU_
   1c1d4:	76697244 682f7265 702f6c70 2f74726f     Driver/hpl/port/
   1c1e4:	5f6c7068 6f697067 7361625f 00682e65     hpl_gpio_base.h.

0001c1f4 <defaultParameters>:
   1c1f4:	00004020                                 @..

0001c1f8 <defaultPreferences>:
   1c1f8:	000000fa 00000032 313a3031 33303a36     ....2...10:16:03
   1c208:	00000000                                ....

0001c20c <_ZTV14Calendar_Class>:
	...
   1c214:	0001a281 0001a371                       ....q...

0001c21c <_ZTV17DateTimeLog_Class>:
	...
   1c224:	00011455 00011455                       U...U...

0001c22c <_global_impure_ptr>:
   1c22c:	20000618                                ... 

0001c230 <_init>:
   1c230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c232:	bf00      	nop
   1c234:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1c236:	bc08      	pop	{r3}
   1c238:	469e      	mov	lr, r3
   1c23a:	4770      	bx	lr

0001c23c <__init_array_start>:
   1c23c:	0001b061 	.word	0x0001b061

0001c240 <__frame_dummy_init_array_entry>:
   1c240:	00000289 000006e9 00000f9d 00001311     ................
   1c250:	0000f361 0000f619 0000fa69 0000fbd5     a.......i.......
   1c260:	0000fe15 0001042d 000109ad 00011061     ....-.......a...
   1c270:	0001142d 00011565 00011711 0001196d     -...e.......m...
   1c280:	00011df5 00012171 000138f5 00013fe5     ....q!...8...?..
   1c290:	00014411 00014691 00014835 00014b75     .D...F..5H..uK..
   1c2a0:	000190b1 000193e1 00019e71 0001a5bd     ........q.......

0001c2b0 <_fini>:
   1c2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c2b2:	bf00      	nop
   1c2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1c2b6:	bc08      	pop	{r3}
   1c2b8:	469e      	mov	lr, r3
   1c2ba:	4770      	bx	lr

0001c2bc <__fini_array_start>:
   1c2bc:	00000265 	.word	0x00000265
