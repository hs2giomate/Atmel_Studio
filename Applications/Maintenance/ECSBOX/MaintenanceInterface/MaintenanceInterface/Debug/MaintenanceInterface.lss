
MaintenanceInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013950  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00013950  00013950  00023950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000060c  20000000  00013958  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003060c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003060c  2**0
                  CONTENTS
  5 .bss          00007a48  2000060c  00013f64  0003060c  2**2
                  ALLOC
  6 .stack        00010004  20008054  0001b9ac  0003060c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003060c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003063a  2**0
                  CONTENTS, READONLY
  9 .debug_info   000a09fa  00000000  00000000  00030693  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000dcd0  00000000  00000000  000d108d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00021a85  00000000  00000000  000ded5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003b30  00000000  00000000  001007e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003708  00000000  00000000  00104312  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00059a1e  00000000  00000000  00107a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004d41e  00000000  00000000  00161438  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00147390  00000000  00000000  001ae856  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000f078  00000000  00000000  002f5be8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 80 01 20 49 04 00 00 45 04 00 00 45 04 00 00     X.. I...E...E...
      10:	45 04 00 00 45 04 00 00 45 04 00 00 00 00 00 00     E...E...E.......
	...
      2c:	45 04 00 00 45 04 00 00 00 00 00 00 45 04 00 00     E...E.......E...
      3c:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
      4c:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
      5c:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
      6c:	ed 62 00 00 09 51 00 00 19 51 00 00 45 04 00 00     .b...Q...Q..E...
      7c:	29 51 00 00 39 51 00 00 49 51 00 00 59 51 00 00     )Q..9Q..IQ..YQ..
      8c:	69 51 00 00 79 51 00 00 89 51 00 00 45 04 00 00     iQ..yQ...Q..E...
      9c:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
      ac:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
      bc:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
      cc:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
      dc:	45 04 00 00 45 04 00 00 45 04 00 00 00 00 00 00     E...E...E.......
	...
      f4:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     104:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     114:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     124:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     134:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     144:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     154:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     164:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     174:	45 04 00 00 45 04 00 00 4d 45 00 00 cd b2 00 00     E...E...ME......
     184:	dd b2 00 00 ed b2 00 00 fd b2 00 00 45 04 00 00     ............E...
     194:	29 7d 00 00 45 04 00 00 45 04 00 00 45 04 00 00     )}..E...E...E...
     1a4:	45 04 00 00 45 04 00 00 45 04 00 00 45 7d 00 00     E...E...E...E}..
     1b4:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     1c4:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     1d4:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     1e4:	45 04 00 00 45 04 00 00 c9 89 00 00 45 04 00 00     E...E.......E...
     1f4:	e5 89 00 00 45 04 00 00 01 8a 00 00 1d 8a 00 00     ....E...........
     204:	39 8a 00 00 55 8a 00 00 45 04 00 00 45 04 00 00     9...U...E...E...
     214:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     224:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     234:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     244:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...
     254:	45 04 00 00 45 04 00 00 45 04 00 00 45 04 00 00     E...E...E...E...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000060c 	.word	0x2000060c
     280:	00000000 	.word	0x00000000
     284:	00013958 	.word	0x00013958

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00013958 	.word	0x00013958
     2c4:	20000610 	.word	0x20000610
     2c8:	00013958 	.word	0x00013958
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN16Commands_HandlerC2Ev>:
#include "string.h"
#include "EvaporatorAndCondesatorFans_Class.h"
#include "CDC_Class.h"

// default constructor
Commands_Handler::Commands_Handler()
     2d0:	680a      	ldr	r2, [r1, #0]
     2d2:	6002      	str	r2, [r0, #0]
    kGAINCommandSetNSDData,             //!< Editing NSD data
    kGAINCommandSetNSDDataBlock,        //!< Editing NSD data in data blocks (see NSD communication: Data blockes are tranmitted to GNC)
    kGAINCommandSetView,                 //!< Enables simplified view or standard view (only 932/933)
	kGAINNumberOfCommands
	};
 struct __attribute__((__packed__)) HVACMessageHeader
     2d4:	2264      	movs	r2, #100	; 0x64
     2d6:	7102      	strb	r2, [r0, #4]
     2d8:	2263      	movs	r2, #99	; 0x63
     2da:	7142      	strb	r2, [r0, #5]
     2dc:	2262      	movs	r2, #98	; 0x62
     2de:	7182      	strb	r2, [r0, #6]
     2e0:	2261      	movs	r2, #97	; 0x61
     2e2:	71c2      	strb	r2, [r0, #7]
     2e4:	2200      	movs	r2, #0
     2e6:	7242      	strb	r2, [r0, #9]
{
	
} //Commands_Handler
     2e8:	4770      	bx	lr

000002ea <_ZN16Commands_HandlerD2Ev>:

// default destructor
Commands_Handler::~Commands_Handler()
     2ea:	680b      	ldr	r3, [r1, #0]
     2ec:	6003      	str	r3, [r0, #0]
{
} //~Commands_Handler
     2ee:	4770      	bx	lr

000002f0 <_ZN16Commands_Handler18InitCommandHandlerEPh>:

void Commands_Handler::InitCommandHandler(uint8_t * buffer){
	usbMessageBuffer=buffer;
     2f0:	60c1      	str	r1, [r0, #12]
     2f2:	4770      	bx	lr

000002f4 <_ZN16Commands_Handler13SetEnableFan1Eh>:
	}
	return SetEnableFan1(data);
	
}

uint8_t Commands_Handler::SetEnableFan1(uint8_t data){
     2f4:	b510      	push	{r4, lr}
     2f6:	460c      	mov	r4, r1
	if ((data&(0x01))>0)
     2f8:	f011 0f01 	tst.w	r1, #1
	{
		fans.evaporator[0]->SetEnable(true);
     2fc:	bf14      	ite	ne
     2fe:	2101      	movne	r1, #1
	}
	else
	{
		fans.evaporator[0]->SetEnable(false);
     300:	2100      	moveq	r1, #0
     302:	4b03      	ldr	r3, [pc, #12]	; (310 <_ZN16Commands_Handler13SetEnableFan1Eh+0x1c>)
     304:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     306:	4b03      	ldr	r3, [pc, #12]	; (314 <_ZN16Commands_Handler13SetEnableFan1Eh+0x20>)
     308:	4798      	blx	r3
	}
	return data;
}
     30a:	4620      	mov	r0, r4
     30c:	bd10      	pop	{r4, pc}
     30e:	bf00      	nop
     310:	20001200 	.word	0x20001200
     314:	0000ec89 	.word	0x0000ec89

00000318 <_ZN16Commands_Handler13SetEnableFan2Eh>:
uint8_t	Commands_Handler::SetEnableFan2(uint8_t data){
     318:	b538      	push	{r3, r4, r5, lr}
     31a:	4605      	mov	r5, r0
     31c:	460c      	mov	r4, r1
	if ((data&(0x02))>0){
     31e:	f011 0f02 	tst.w	r1, #2
		fans.evaporator[1]->SetEnable(true);
     322:	bf14      	ite	ne
     324:	2101      	movne	r1, #1
		fans.evaporator[1]->SetEnable(false);
     326:	2100      	moveq	r1, #0
     328:	4b04      	ldr	r3, [pc, #16]	; (33c <_ZN16Commands_Handler13SetEnableFan2Eh+0x24>)
     32a:	6e18      	ldr	r0, [r3, #96]	; 0x60
     32c:	4b04      	ldr	r3, [pc, #16]	; (340 <_ZN16Commands_Handler13SetEnableFan2Eh+0x28>)
     32e:	4798      	blx	r3
	return SetEnableFan1(data);
     330:	4621      	mov	r1, r4
     332:	4628      	mov	r0, r5
     334:	4b03      	ldr	r3, [pc, #12]	; (344 <_ZN16Commands_Handler13SetEnableFan2Eh+0x2c>)
     336:	4798      	blx	r3
}
     338:	bd38      	pop	{r3, r4, r5, pc}
     33a:	bf00      	nop
     33c:	20001200 	.word	0x20001200
     340:	0000ec89 	.word	0x0000ec89
     344:	000002f5 	.word	0x000002f5

00000348 <_ZN16Commands_Handler19SetEnableCondesatorEh>:
uint8_t Commands_Handler::SetEnableCondesator(uint8_t data){
     348:	b538      	push	{r3, r4, r5, lr}
     34a:	4605      	mov	r5, r0
     34c:	460c      	mov	r4, r1
	if ((data&(0x04))>0)
     34e:	f011 0f04 	tst.w	r1, #4
		fans.condesator->SetEnable(true);
     352:	bf14      	ite	ne
     354:	2101      	movne	r1, #1
		fans.condesator->SetEnable(false);
     356:	2100      	moveq	r1, #0
     358:	4b04      	ldr	r3, [pc, #16]	; (36c <_ZN16Commands_Handler19SetEnableCondesatorEh+0x24>)
     35a:	6e58      	ldr	r0, [r3, #100]	; 0x64
     35c:	4b04      	ldr	r3, [pc, #16]	; (370 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x28>)
     35e:	4798      	blx	r3
	return SetEnableFan2(data);
     360:	4621      	mov	r1, r4
     362:	4628      	mov	r0, r5
     364:	4b03      	ldr	r3, [pc, #12]	; (374 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x2c>)
     366:	4798      	blx	r3
}
     368:	bd38      	pop	{r3, r4, r5, pc}
     36a:	bf00      	nop
     36c:	20001200 	.word	0x20001200
     370:	0000e94d 	.word	0x0000e94d
     374:	00000319 	.word	0x00000319

00000378 <_ZN16Commands_Handler20CommandSetEnableFansEv>:
bool Commands_Handler::CommandSetEnableFans(void){
     378:	b510      	push	{r4, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     37a:	68c3      	ldr	r3, [r0, #12]
     37c:	6819      	ldr	r1, [r3, #0]
     37e:	6041      	str	r1, [r0, #4]
     380:	8899      	ldrh	r1, [r3, #4]
     382:	799b      	ldrb	r3, [r3, #6]
     384:	8101      	strh	r1, [r0, #8]
     386:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandSetEnableFans);
     388:	7a43      	ldrb	r3, [r0, #9]
     38a:	2b4b      	cmp	r3, #75	; 0x4b
     38c:	bf0c      	ite	eq
     38e:	2401      	moveq	r4, #1
     390:	2400      	movne	r4, #0
	if (result){
     392:	d001      	beq.n	398 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x20>
}
     394:	4620      	mov	r0, r4
     396:	bd10      	pop	{r4, pc}
		SetEnableCondesator(data);
     398:	7a81      	ldrb	r1, [r0, #10]
     39a:	4b01      	ldr	r3, [pc, #4]	; (3a0 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x28>)
     39c:	4798      	blx	r3
     39e:	e7f9      	b.n	394 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x1c>
     3a0:	00000349 	.word	0x00000349

000003a4 <_ZN16Commands_Handler17CommandSetPWMFansEv>:

bool Commands_Handler::CommandSetPWMFans(void){
     3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     3a6:	68c3      	ldr	r3, [r0, #12]
     3a8:	6819      	ldr	r1, [r3, #0]
     3aa:	6041      	str	r1, [r0, #4]
     3ac:	8899      	ldrh	r1, [r3, #4]
     3ae:	799b      	ldrb	r3, [r3, #6]
     3b0:	8101      	strh	r1, [r0, #8]
     3b2:	7283      	strb	r3, [r0, #10]
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(singleTaskMessage.header.task == 	kHVACCommandSetPWMFans);
     3b4:	7a43      	ldrb	r3, [r0, #9]
     3b6:	2b4c      	cmp	r3, #76	; 0x4c
     3b8:	bf0c      	ite	eq
     3ba:	2401      	moveq	r4, #1
     3bc:	2400      	movne	r4, #0
	if (result){
     3be:	d001      	beq.n	3c4 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x20>
		}else{

	}
	
	return result;
}
     3c0:	4620      	mov	r0, r4
     3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data=singleTaskMessage.description;
     3c4:	7a85      	ldrb	r5, [r0, #10]
		if (data>0)
     3c6:	2d00      	cmp	r5, #0
     3c8:	d0fa      	beq.n	3c0 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x1c>
			fans.evaporator[0]->SetPWM(data);
     3ca:	4e06      	ldr	r6, [pc, #24]	; (3e4 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x40>)
     3cc:	4629      	mov	r1, r5
     3ce:	6df0      	ldr	r0, [r6, #92]	; 0x5c
     3d0:	4f05      	ldr	r7, [pc, #20]	; (3e8 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x44>)
     3d2:	47b8      	blx	r7
			fans.evaporator[1]->SetPWM(data);
     3d4:	4629      	mov	r1, r5
     3d6:	6e30      	ldr	r0, [r6, #96]	; 0x60
     3d8:	47b8      	blx	r7
			fans.condesator->SetPWM(data);
     3da:	4629      	mov	r1, r5
     3dc:	6e70      	ldr	r0, [r6, #100]	; 0x64
     3de:	4b03      	ldr	r3, [pc, #12]	; (3ec <_ZN16Commands_Handler17CommandSetPWMFansEv+0x48>)
     3e0:	4798      	blx	r3
     3e2:	e7ed      	b.n	3c0 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x1c>
     3e4:	20001200 	.word	0x20001200
     3e8:	0000ecad 	.word	0x0000ecad
     3ec:	0000e965 	.word	0x0000e965

000003f0 <_ZN16Commands_Handler17CommandFansStatusEv>:
bool Commands_Handler::CommandFansStatus(){
     3f0:	b530      	push	{r4, r5, lr}
     3f2:	b083      	sub	sp, #12
	uint8_t gpios[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
	SingleTaskMessage	singleTask;
	memcpy(&singleTask,usbMessageBuffer,sizeof(SingleTaskMessage));
     3f4:	68c3      	ldr	r3, [r0, #12]
     3f6:	795b      	ldrb	r3, [r3, #5]
	bool	result(singleTask.header.task == kHVACCommandRedStatusFans);
     3f8:	2b51      	cmp	r3, #81	; 0x51
     3fa:	bf0c      	ite	eq
     3fc:	2501      	moveq	r5, #1
     3fe:	2500      	movne	r5, #0
	if (result){
     400:	d002      	beq.n	408 <_ZN16Commands_Handler17CommandFansStatusEv+0x18>

		
	}
	
	return result;
     402:	4628      	mov	r0, r5
     404:	b003      	add	sp, #12
     406:	bd30      	pop	{r4, r5, pc}
     408:	4604      	mov	r4, r0
		fans.GetGPIOSValues(gpios);
     40a:	4669      	mov	r1, sp
     40c:	4808      	ldr	r0, [pc, #32]	; (430 <_ZN16Commands_Handler17CommandFansStatusEv+0x40>)
     40e:	4b09      	ldr	r3, [pc, #36]	; (434 <_ZN16Commands_Handler17CommandFansStatusEv+0x44>)
     410:	4798      	blx	r3
		CreateFullBufferMessage(usbMessageBuffer,gpios);
     412:	6823      	ldr	r3, [r4, #0]
     414:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     418:	466a      	mov	r2, sp
     41a:	68e1      	ldr	r1, [r4, #12]
     41c:	4420      	add	r0, r4
     41e:	4b06      	ldr	r3, [pc, #24]	; (438 <_ZN16Commands_Handler17CommandFansStatusEv+0x48>)
     420:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     422:	2240      	movs	r2, #64	; 0x40
     424:	68e1      	ldr	r1, [r4, #12]
     426:	4805      	ldr	r0, [pc, #20]	; (43c <_ZN16Commands_Handler17CommandFansStatusEv+0x4c>)
     428:	4b05      	ldr	r3, [pc, #20]	; (440 <_ZN16Commands_Handler17CommandFansStatusEv+0x50>)
     42a:	4798      	blx	r3
     42c:	e7e9      	b.n	402 <_ZN16Commands_Handler17CommandFansStatusEv+0x12>
     42e:	bf00      	nop
     430:	20001200 	.word	0x20001200
     434:	0000eb2d 	.word	0x0000eb2d
     438:	000007c1 	.word	0x000007c1
     43c:	20000fa8 	.word	0x20000fa8
     440:	0000e105 	.word	0x0000e105

00000444 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     444:	e7fe      	b.n	444 <Dummy_Handler>
	...

00000448 <Reset_Handler>:
{
     448:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     44a:	4b17      	ldr	r3, [pc, #92]	; (4a8 <Reset_Handler+0x60>)
     44c:	4a17      	ldr	r2, [pc, #92]	; (4ac <Reset_Handler+0x64>)
     44e:	429a      	cmp	r2, r3
     450:	d010      	beq.n	474 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     452:	4b17      	ldr	r3, [pc, #92]	; (4b0 <Reset_Handler+0x68>)
     454:	4a14      	ldr	r2, [pc, #80]	; (4a8 <Reset_Handler+0x60>)
     456:	429a      	cmp	r2, r3
     458:	d20c      	bcs.n	474 <Reset_Handler+0x2c>
     45a:	3b01      	subs	r3, #1
     45c:	1a9b      	subs	r3, r3, r2
     45e:	f023 0303 	bic.w	r3, r3, #3
     462:	3304      	adds	r3, #4
     464:	4413      	add	r3, r2
     466:	4911      	ldr	r1, [pc, #68]	; (4ac <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     468:	f851 0b04 	ldr.w	r0, [r1], #4
     46c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     470:	429a      	cmp	r2, r3
     472:	d1f9      	bne.n	468 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     474:	4b0f      	ldr	r3, [pc, #60]	; (4b4 <Reset_Handler+0x6c>)
     476:	4a10      	ldr	r2, [pc, #64]	; (4b8 <Reset_Handler+0x70>)
     478:	429a      	cmp	r2, r3
     47a:	d20a      	bcs.n	492 <Reset_Handler+0x4a>
     47c:	3b01      	subs	r3, #1
     47e:	1a9b      	subs	r3, r3, r2
     480:	f023 0303 	bic.w	r3, r3, #3
     484:	3304      	adds	r3, #4
     486:	4413      	add	r3, r2
                *pDest++ = 0;
     488:	2100      	movs	r1, #0
     48a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     48e:	4293      	cmp	r3, r2
     490:	d1fb      	bne.n	48a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     492:	4a0a      	ldr	r2, [pc, #40]	; (4bc <Reset_Handler+0x74>)
     494:	4b0a      	ldr	r3, [pc, #40]	; (4c0 <Reset_Handler+0x78>)
     496:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     49a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     49c:	4b09      	ldr	r3, [pc, #36]	; (4c4 <Reset_Handler+0x7c>)
     49e:	4798      	blx	r3
        main();
     4a0:	4b09      	ldr	r3, [pc, #36]	; (4c8 <Reset_Handler+0x80>)
     4a2:	4798      	blx	r3
     4a4:	e7fe      	b.n	4a4 <Reset_Handler+0x5c>
     4a6:	bf00      	nop
     4a8:	20000000 	.word	0x20000000
     4ac:	00013958 	.word	0x00013958
     4b0:	2000060c 	.word	0x2000060c
     4b4:	20008054 	.word	0x20008054
     4b8:	2000060c 	.word	0x2000060c
     4bc:	e000ed00 	.word	0xe000ed00
     4c0:	00000000 	.word	0x00000000
     4c4:	00012f71 	.word	0x00012f71
     4c8:	000004e5 	.word	0x000004e5

000004cc <_ZL15FirmwareIsAlivePK10timer_task>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4cc:	2280      	movs	r2, #128	; 0x80
     4ce:	4b03      	ldr	r3, [pc, #12]	; (4dc <_ZL15FirmwareIsAlivePK10timer_task+0x10>)
     4d0:	619a      	str	r2, [r3, #24]
bool localtimeout=false;
uint32_t	errorCounter=0;
static void FirmwareIsAlive(const struct timer_task *const timer_task)
{
	gpio_set_pin_level(iAlcFwIsAlive,true);
	localtimeout=true;
     4d2:	2201      	movs	r2, #1
     4d4:	4b02      	ldr	r3, [pc, #8]	; (4e0 <_ZL15FirmwareIsAlivePK10timer_task+0x14>)
     4d6:	701a      	strb	r2, [r3, #0]
     4d8:	4770      	bx	lr
     4da:	bf00      	nop
     4dc:	41008000 	.word	0x41008000
     4e0:	20000628 	.word	0x20000628

000004e4 <main>:




int main(void)		
{
     4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool gotNewTemperature=false;
	atmel_start_init();
     4e8:	4b85      	ldr	r3, [pc, #532]	; (700 <main+0x21c>)
     4ea:	4798      	blx	r3
	usb.Init();
     4ec:	4885      	ldr	r0, [pc, #532]	; (704 <main+0x220>)
     4ee:	4b86      	ldr	r3, [pc, #536]	; (708 <main+0x224>)
     4f0:	4798      	blx	r3
	//StartLivePulse();
	delay_ms(200);
     4f2:	20c8      	movs	r0, #200	; 0xc8
     4f4:	4b85      	ldr	r3, [pc, #532]	; (70c <main+0x228>)
     4f6:	4798      	blx	r3
	bool isOK=temperatures.Init();
     4f8:	4885      	ldr	r0, [pc, #532]	; (710 <main+0x22c>)
     4fa:	4b86      	ldr	r3, [pc, #536]	; (714 <main+0x230>)
     4fc:	4798      	blx	r3
	if (isOK)
     4fe:	b110      	cbz	r0, 506 <main+0x22>
	{
		temperatures.StartOneConversion();
     500:	4883      	ldr	r0, [pc, #524]	; (710 <main+0x22c>)
     502:	4b85      	ldr	r3, [pc, #532]	; (718 <main+0x234>)
     504:	4798      	blx	r3
     506:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     50a:	4b84      	ldr	r3, [pc, #528]	; (71c <main+0x238>)
     50c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	gpio_set_pin_level(LED0,true);
	while (!fvc.InitController())
     510:	4e83      	ldr	r6, [pc, #524]	; (720 <main+0x23c>)
     512:	4d84      	ldr	r5, [pc, #528]	; (724 <main+0x240>)
	{
		delay_ms(200);
     514:	4c7d      	ldr	r4, [pc, #500]	; (70c <main+0x228>)
	while (!fvc.InitController())
     516:	4630      	mov	r0, r6
     518:	47a8      	blx	r5
     51a:	b938      	cbnz	r0, 52c <main+0x48>
		delay_ms(200);
     51c:	20c8      	movs	r0, #200	; 0xc8
     51e:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     520:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     524:	4b7d      	ldr	r3, [pc, #500]	; (71c <main+0x238>)
     526:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     52a:	e7f4      	b.n	516 <main+0x32>
		gpio_toggle_pin_level(LED0);
	}
	while(!fans.Init()){
     52c:	4e7e      	ldr	r6, [pc, #504]	; (728 <main+0x244>)
     52e:	4d7f      	ldr	r5, [pc, #508]	; (72c <main+0x248>)
		delay_ms(200);
     530:	4c76      	ldr	r4, [pc, #472]	; (70c <main+0x228>)
	while(!fans.Init()){
     532:	4630      	mov	r0, r6
     534:	47a8      	blx	r5
     536:	b938      	cbnz	r0, 548 <main+0x64>
		delay_ms(200);
     538:	20c8      	movs	r0, #200	; 0xc8
     53a:	47a0      	blx	r4
     53c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     540:	4b76      	ldr	r3, [pc, #472]	; (71c <main+0x238>)
     542:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     546:	e7f4      	b.n	532 <main+0x4e>
		gpio_toggle_pin_level(LED0);
		
	}
	fans.condesator->SetEnable(false);
     548:	4c77      	ldr	r4, [pc, #476]	; (728 <main+0x244>)
     54a:	2100      	movs	r1, #0
     54c:	6e60      	ldr	r0, [r4, #100]	; 0x64
     54e:	4b78      	ldr	r3, [pc, #480]	; (730 <main+0x24c>)
     550:	4798      	blx	r3
	fans.evaporator[0]->SetEnable(false);
     552:	2100      	movs	r1, #0
     554:	6de0      	ldr	r0, [r4, #92]	; 0x5c
     556:	4d77      	ldr	r5, [pc, #476]	; (734 <main+0x250>)
     558:	47a8      	blx	r5
	fans.evaporator[1]->SetEnable(false);
     55a:	2100      	movs	r1, #0
     55c:	6e20      	ldr	r0, [r4, #96]	; 0x60
     55e:	47a8      	blx	r5
	
	while(!heater.Init()){
     560:	4e75      	ldr	r6, [pc, #468]	; (738 <main+0x254>)
     562:	4d76      	ldr	r5, [pc, #472]	; (73c <main+0x258>)
		delay_ms(200);
     564:	4c69      	ldr	r4, [pc, #420]	; (70c <main+0x228>)
	while(!heater.Init()){
     566:	4630      	mov	r0, r6
     568:	47a8      	blx	r5
     56a:	b938      	cbnz	r0, 57c <main+0x98>
		delay_ms(200);
     56c:	20c8      	movs	r0, #200	; 0xc8
     56e:	47a0      	blx	r4
     570:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     574:	4b69      	ldr	r3, [pc, #420]	; (71c <main+0x238>)
     576:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     57a:	e7f4      	b.n	566 <main+0x82>
		gpio_toggle_pin_level(LED0);
	}
	heater.DisableIndex(0);
     57c:	4d6e      	ldr	r5, [pc, #440]	; (738 <main+0x254>)
     57e:	2100      	movs	r1, #0
     580:	4628      	mov	r0, r5
     582:	4c6f      	ldr	r4, [pc, #444]	; (740 <main+0x25c>)
     584:	47a0      	blx	r4
	heater.DisableIndex(1);
     586:	2101      	movs	r1, #1
     588:	4628      	mov	r0, r5
     58a:	47a0      	blx	r4
	heater.DisableIndex(2);
     58c:	2102      	movs	r1, #2
     58e:	4628      	mov	r0, r5
     590:	47a0      	blx	r4
	heater.DisableIndex(3);
     592:	2103      	movs	r1, #3
     594:	4628      	mov	r0, r5
     596:	47a0      	blx	r4
	//hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareIsAlive),2500);
	uint8_t localSetpoint=210;
	uint8_t localPosition;

	
	toolApp.Init();
     598:	486a      	ldr	r0, [pc, #424]	; (744 <main+0x260>)
     59a:	4b6b      	ldr	r3, [pc, #428]	; (748 <main+0x264>)
     59c:	4798      	blx	r3
	memory.Init();
     59e:	4c6b      	ldr	r4, [pc, #428]	; (74c <main+0x268>)
     5a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     5a4:	4620      	mov	r0, r4
     5a6:	4b6a      	ldr	r3, [pc, #424]	; (750 <main+0x26c>)
     5a8:	4798      	blx	r3
	memory.WriteDefaultParameters();
     5aa:	4620      	mov	r0, r4
     5ac:	4b69      	ldr	r3, [pc, #420]	; (754 <main+0x270>)
     5ae:	4798      	blx	r3

	fvc.UpdateFlapperValveData();
     5b0:	4c5b      	ldr	r4, [pc, #364]	; (720 <main+0x23c>)
     5b2:	4620      	mov	r0, r4
     5b4:	4b68      	ldr	r3, [pc, #416]	; (758 <main+0x274>)
     5b6:	4798      	blx	r3
	fvc.fv->SetEnable(false);
     5b8:	2100      	movs	r1, #0
     5ba:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
     5bc:	4b67      	ldr	r3, [pc, #412]	; (75c <main+0x278>)
     5be:	4798      	blx	r3
	fvc.fv->SetInvalidPosition(false);
     5c0:	2100      	movs	r1, #0
     5c2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
     5c4:	4d66      	ldr	r5, [pc, #408]	; (760 <main+0x27c>)
     5c6:	47a8      	blx	r5
	fvc.fv->ClearMoveFault(false);
     5c8:	2100      	movs	r1, #0
     5ca:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
     5cc:	4b65      	ldr	r3, [pc, #404]	; (764 <main+0x280>)
     5ce:	4798      	blx	r3
	delay_ms(100);
     5d0:	2064      	movs	r0, #100	; 0x64
     5d2:	4b4e      	ldr	r3, [pc, #312]	; (70c <main+0x228>)
     5d4:	4798      	blx	r3
	fvc.fv->SetInvalidPosition(true);
     5d6:	2101      	movs	r1, #1
     5d8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
     5da:	47a8      	blx	r5
	if (fvc.dataStruct.controlOutputs.niAlcFvMotorEnable)
     5dc:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
     5e0:	b11b      	cbz	r3, 5ea <main+0x106>
	{
		fvc.fv->SetEnable(false);
     5e2:	2100      	movs	r1, #0
     5e4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
     5e6:	4b5d      	ldr	r3, [pc, #372]	; (75c <main+0x278>)
     5e8:	4798      	blx	r3
	}
	
	fvc.fv->ClearMoveFault(true);
     5ea:	4c4d      	ldr	r4, [pc, #308]	; (720 <main+0x23c>)
     5ec:	2101      	movs	r1, #1
     5ee:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
     5f0:	4b5c      	ldr	r3, [pc, #368]	; (764 <main+0x280>)
     5f2:	4798      	blx	r3
	fvc.fv->WriteSetpoint(localSetpoint);
     5f4:	21d2      	movs	r1, #210	; 0xd2
     5f6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
     5f8:	4b5b      	ldr	r3, [pc, #364]	; (768 <main+0x284>)
     5fa:	4798      	blx	r3
	fvc.fv->SetDirection(false);
     5fc:	2100      	movs	r1, #0
     5fe:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
     600:	4b5a      	ldr	r3, [pc, #360]	; (76c <main+0x288>)
     602:	4798      	blx	r3
	if (fvc.fv->ReadActualPosition()>localSetpoint)
     604:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
     606:	4b5a      	ldr	r3, [pc, #360]	; (770 <main+0x28c>)
     608:	4798      	blx	r3
     60a:	28d2      	cmp	r0, #210	; 0xd2
	{
		fvc.fv->SetDirection(true);
     60c:	bfc7      	ittee	gt
     60e:	2101      	movgt	r1, #1
     610:	4623      	movgt	r3, r4
	} 
	else
	{
		fvc.fv->SetDirection(false);
     612:	2100      	movle	r1, #0
     614:	4b42      	ldrle	r3, [pc, #264]	; (720 <main+0x23c>)
     616:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
     618:	4b54      	ldr	r3, [pc, #336]	; (76c <main+0x288>)
     61a:	4798      	blx	r3
	}
		hvacTimer.Start_oneShot_task(FUNC_PTR(FirmwareIsAlive),5000);
     61c:	f241 3288 	movw	r2, #5000	; 0x1388
     620:	4954      	ldr	r1, [pc, #336]	; (774 <main+0x290>)
     622:	4855      	ldr	r0, [pc, #340]	; (778 <main+0x294>)
     624:	4b55      	ldr	r3, [pc, #340]	; (77c <main+0x298>)
     626:	4798      	blx	r3
			fvc.fv->SetEnable(true);
     628:	4c3d      	ldr	r4, [pc, #244]	; (720 <main+0x23c>)
     62a:	2101      	movs	r1, #1
     62c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
     62e:	4b4b      	ldr	r3, [pc, #300]	; (75c <main+0x278>)
     630:	4798      	blx	r3

	localPosition=fvc.fv->ReadActualPosition();
     632:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
     634:	4b4e      	ldr	r3, [pc, #312]	; (770 <main+0x28c>)
     636:	4798      	blx	r3

	while ((abs(localPosition-localSetpoint)>6)&(!localtimeout))
     638:	f1a0 03d2 	sub.w	r3, r0, #210	; 0xd2
     63c:	2b00      	cmp	r3, #0
     63e:	bfb8      	it	lt
     640:	425b      	neglt	r3, r3
     642:	2b06      	cmp	r3, #6
     644:	dd12      	ble.n	66c <main+0x188>
     646:	4b4e      	ldr	r3, [pc, #312]	; (780 <main+0x29c>)
     648:	781b      	ldrb	r3, [r3, #0]
     64a:	2b01      	cmp	r3, #1
     64c:	d00e      	beq.n	66c <main+0x188>

	{

		localPosition=fvc.fv->ReadActualPosition();
     64e:	4626      	mov	r6, r4
     650:	4d47      	ldr	r5, [pc, #284]	; (770 <main+0x28c>)
	while ((abs(localPosition-localSetpoint)>6)&(!localtimeout))
     652:	4c4b      	ldr	r4, [pc, #300]	; (780 <main+0x29c>)
		localPosition=fvc.fv->ReadActualPosition();
     654:	6ff0      	ldr	r0, [r6, #124]	; 0x7c
     656:	47a8      	blx	r5
	while ((abs(localPosition-localSetpoint)>6)&(!localtimeout))
     658:	f1a0 03d2 	sub.w	r3, r0, #210	; 0xd2
     65c:	2b00      	cmp	r3, #0
     65e:	bfb8      	it	lt
     660:	425b      	neglt	r3, r3
     662:	2b06      	cmp	r3, #6
     664:	dd02      	ble.n	66c <main+0x188>
     666:	7823      	ldrb	r3, [r4, #0]
     668:	2b01      	cmp	r3, #1
     66a:	d1f3      	bne.n	654 <main+0x170>

	}
	fvc.fv->SetEnable(false);
     66c:	2100      	movs	r1, #0
     66e:	4b2c      	ldr	r3, [pc, #176]	; (720 <main+0x23c>)
     670:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
     672:	4b3a      	ldr	r3, [pc, #232]	; (75c <main+0x278>)
     674:	4798      	blx	r3
			toolApp.handleCommunication();			
			
		}
		else
		{
			toolApp.setConnected(false);
     676:	f8df 8124 	ldr.w	r8, [pc, #292]	; 79c <main+0x2b8>
		} 
		else
		{
			fvc.Control_NBC_StandAlone_Reset();
		}
		if (temperatures.IsConversionFinished())
     67a:	4e25      	ldr	r6, [pc, #148]	; (710 <main+0x22c>)
     67c:	e037      	b.n	6ee <main+0x20a>
			toolApp.setConnected(false);
     67e:	2100      	movs	r1, #0
     680:	4628      	mov	r0, r5
     682:	47c0      	blx	r8
     684:	e010      	b.n	6a8 <main+0x1c4>
				fvc.InitController();
     686:	4826      	ldr	r0, [pc, #152]	; (720 <main+0x23c>)
     688:	4b26      	ldr	r3, [pc, #152]	; (724 <main+0x240>)
     68a:	4798      	blx	r3
				errorCounter=0;
     68c:	2200      	movs	r2, #0
     68e:	4b3c      	ldr	r3, [pc, #240]	; (780 <main+0x29c>)
     690:	605a      	str	r2, [r3, #4]
		if (temperatures.IsConversionFinished())
     692:	4630      	mov	r0, r6
     694:	4b3b      	ldr	r3, [pc, #236]	; (784 <main+0x2a0>)
     696:	4798      	blx	r3
     698:	b9f0      	cbnz	r0, 6d8 <main+0x1f4>
		if (toolApp.IsAppConnected())
     69a:	4628      	mov	r0, r5
     69c:	47b8      	blx	r7
     69e:	2800      	cmp	r0, #0
     6a0:	d0ed      	beq.n	67e <main+0x19a>
			toolApp.handleCommunication();			
     6a2:	4628      	mov	r0, r5
     6a4:	4b38      	ldr	r3, [pc, #224]	; (788 <main+0x2a4>)
     6a6:	4798      	blx	r3
		if ((fvc.IsInvalidPosition())&(!fvc.flapperValveIsMoving))
     6a8:	4c1d      	ldr	r4, [pc, #116]	; (720 <main+0x23c>)
     6aa:	4620      	mov	r0, r4
     6ac:	4b37      	ldr	r3, [pc, #220]	; (78c <main+0x2a8>)
     6ae:	4798      	blx	r3
     6b0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
     6b4:	2b01      	cmp	r3, #1
     6b6:	d00b      	beq.n	6d0 <main+0x1ec>
     6b8:	b150      	cbz	r0, 6d0 <main+0x1ec>
			if (errorCounter<10)
     6ba:	4b31      	ldr	r3, [pc, #196]	; (780 <main+0x29c>)
     6bc:	685b      	ldr	r3, [r3, #4]
     6be:	2b09      	cmp	r3, #9
     6c0:	d8e1      	bhi.n	686 <main+0x1a2>
				errorCounter++;
     6c2:	3301      	adds	r3, #1
     6c4:	4a2e      	ldr	r2, [pc, #184]	; (780 <main+0x29c>)
     6c6:	6053      	str	r3, [r2, #4]
				fvc.Control_NBC_StandAlone_Reset();
     6c8:	4620      	mov	r0, r4
     6ca:	4b31      	ldr	r3, [pc, #196]	; (790 <main+0x2ac>)
     6cc:	4798      	blx	r3
     6ce:	e7e0      	b.n	692 <main+0x1ae>
			fvc.Control_NBC_StandAlone_Reset();
     6d0:	4813      	ldr	r0, [pc, #76]	; (720 <main+0x23c>)
     6d2:	4b2f      	ldr	r3, [pc, #188]	; (790 <main+0x2ac>)
     6d4:	4798      	blx	r3
     6d6:	e7dc      	b.n	692 <main+0x1ae>
		{
			
			temperatures.GetConversionResult();
     6d8:	4630      	mov	r0, r6
     6da:	4b2e      	ldr	r3, [pc, #184]	; (794 <main+0x2b0>)
     6dc:	4798      	blx	r3
			if (temperatures.faultData==VALID_TEMPERATURE)
     6de:	f896 309c 	ldrb.w	r3, [r6, #156]	; 0x9c
     6e2:	2b01      	cmp	r3, #1
     6e4:	d006      	beq.n	6f4 <main+0x210>
					gotNewTemperature=true;
					
				}
				
			}
			temperatures.StartOneConversion();
     6e6:	4630      	mov	r0, r6
     6e8:	4b0b      	ldr	r3, [pc, #44]	; (718 <main+0x234>)
     6ea:	4798      	blx	r3
			asm("nop");
     6ec:	bf00      	nop
		if (toolApp.IsAppConnected())
     6ee:	4d15      	ldr	r5, [pc, #84]	; (744 <main+0x260>)
     6f0:	4f29      	ldr	r7, [pc, #164]	; (798 <main+0x2b4>)
     6f2:	e7d2      	b.n	69a <main+0x1b6>
				currentTemperature=temperatures.lastValue;
     6f4:	f8d6 20a0 	ldr.w	r2, [r6, #160]	; 0xa0
     6f8:	4b21      	ldr	r3, [pc, #132]	; (780 <main+0x29c>)
     6fa:	609a      	str	r2, [r3, #8]
     6fc:	e7f3      	b.n	6e6 <main+0x202>
     6fe:	bf00      	nop
     700:	0000107d 	.word	0x0000107d
     704:	20000fa8 	.word	0x20000fa8
     708:	0000de35 	.word	0x0000de35
     70c:	000027c9 	.word	0x000027c9
     710:	20007898 	.word	0x20007898
     714:	00010bf5 	.word	0x00010bf5
     718:	00010c71 	.word	0x00010c71
     71c:	41008000 	.word	0x41008000
     720:	20001308 	.word	0x20001308
     724:	0000f0dd 	.word	0x0000f0dd
     728:	20001200 	.word	0x20001200
     72c:	0000eab5 	.word	0x0000eab5
     730:	0000e94d 	.word	0x0000e94d
     734:	0000ec89 	.word	0x0000ec89
     738:	200014a4 	.word	0x200014a4
     73c:	00010579 	.word	0x00010579
     740:	00010799 	.word	0x00010799
     744:	20000678 	.word	0x20000678
     748:	00000b81 	.word	0x00000b81
     74c:	200024c8 	.word	0x200024c8
     750:	000109fd 	.word	0x000109fd
     754:	00010959 	.word	0x00010959
     758:	0000fcb9 	.word	0x0000fcb9
     75c:	000101f1 	.word	0x000101f1
     760:	00010361 	.word	0x00010361
     764:	000102e9 	.word	0x000102e9
     768:	000103d9 	.word	0x000103d9
     76c:	00010271 	.word	0x00010271
     770:	00010411 	.word	0x00010411
     774:	000004cd 	.word	0x000004cd
     778:	20000f50 	.word	0x20000f50
     77c:	0000da85 	.word	0x0000da85
     780:	20000628 	.word	0x20000628
     784:	00010d4d 	.word	0x00010d4d
     788:	00000fa5 	.word	0x00000fa5
     78c:	0000f265 	.word	0x0000f265
     790:	0000f2e5 	.word	0x0000f2e5
     794:	00010cb9 	.word	0x00010cb9
     798:	0000090d 	.word	0x0000090d
     79c:	000008dd 	.word	0x000008dd

000007a0 <_ZN22MaintenanceDataHandlerC1Ev>:
     7a0:	2264      	movs	r2, #100	; 0x64
     7a2:	7002      	strb	r2, [r0, #0]
     7a4:	2263      	movs	r2, #99	; 0x63
     7a6:	7042      	strb	r2, [r0, #1]
     7a8:	2262      	movs	r2, #98	; 0x62
     7aa:	7082      	strb	r2, [r0, #2]
     7ac:	2261      	movs	r2, #97	; 0x61
     7ae:	70c2      	strb	r2, [r0, #3]
     7b0:	2200      	movs	r2, #0
     7b2:	7142      	strb	r2, [r0, #5]
#include "string.h"

// default constructor
MaintenanceDataHandler::MaintenanceDataHandler()
{
	sizeFullBufferMessage=FULL_MESSAGE_SIZE;
     7b4:	223a      	movs	r2, #58	; 0x3a
     7b6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} //MaintenanceDataHandler
     7ba:	4770      	bx	lr

000007bc <_ZN22MaintenanceDataHandlerD1Ev>:

// default destructor
MaintenanceDataHandler::~MaintenanceDataHandler()
{
} //~MaintenanceDataHandler
     7bc:	4770      	bx	lr
	...

000007c0 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_>:

uint8_t MaintenanceDataHandler::CreateFullBufferMessage(uint8_t *localBuff,  uint8_t *data){
     7c0:	b570      	push	{r4, r5, r6, lr}
     7c2:	4605      	mov	r5, r0
     7c4:	460c      	mov	r4, r1
     7c6:	4611      	mov	r1, r2
	
	memcpy((void*)fullBufferMessage.content,(void*)data,sizeFullBufferMessage);
     7c8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
     7cc:	3006      	adds	r0, #6
     7ce:	4b09      	ldr	r3, [pc, #36]	; (7f4 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x34>)
     7d0:	4798      	blx	r3
	memcpy((void*)localBuff,(void *)&fullBufferMessage,MAINTENANCE_TOOL_BUFFER_SIZE);
     7d2:	462b      	mov	r3, r5
     7d4:	4621      	mov	r1, r4
     7d6:	3540      	adds	r5, #64	; 0x40
     7d8:	681e      	ldr	r6, [r3, #0]
     7da:	685c      	ldr	r4, [r3, #4]
     7dc:	6898      	ldr	r0, [r3, #8]
     7de:	68da      	ldr	r2, [r3, #12]
     7e0:	600e      	str	r6, [r1, #0]
     7e2:	604c      	str	r4, [r1, #4]
     7e4:	6088      	str	r0, [r1, #8]
     7e6:	60ca      	str	r2, [r1, #12]
     7e8:	3310      	adds	r3, #16
     7ea:	3110      	adds	r1, #16
     7ec:	42ab      	cmp	r3, r5
     7ee:	d1f3      	bne.n	7d8 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x18>
	return 0;
}
     7f0:	2000      	movs	r0, #0
     7f2:	bd70      	pop	{r4, r5, r6, pc}
     7f4:	00012fc1 	.word	0x00012fc1

000007f8 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
     7f8:	4b02      	ldr	r3, [pc, #8]	; (804 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
     7fa:	681a      	ldr	r2, [r3, #0]
     7fc:	6913      	ldr	r3, [r2, #16]
     7fe:	3301      	adds	r3, #1
     800:	6113      	str	r3, [r2, #16]
     802:	4770      	bx	lr
     804:	20000634 	.word	0x20000634

00000808 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
     808:	4b02      	ldr	r3, [pc, #8]	; (814 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
     80a:	681b      	ldr	r3, [r3, #0]
     80c:	2200      	movs	r2, #0
     80e:	751a      	strb	r2, [r3, #20]
     810:	4770      	bx	lr
     812:	bf00      	nop
     814:	20000634 	.word	0x20000634

00000818 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	localBuffer=staticBuffer;
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
     818:	b538      	push	{r3, r4, r5, lr}
     81a:	4604      	mov	r4, r0
     81c:	4b0a      	ldr	r3, [pc, #40]	; (848 <_ZN16Maintenance_ToolD1Ev+0x30>)
     81e:	6003      	str	r3, [r0, #0]
{
	ticks=0;
     820:	2300      	movs	r3, #0
     822:	6103      	str	r3, [r0, #16]
	interfaceTimer.Stop();
     824:	4d09      	ldr	r5, [pc, #36]	; (84c <_ZN16Maintenance_ToolD1Ev+0x34>)
     826:	4628      	mov	r0, r5
     828:	4b09      	ldr	r3, [pc, #36]	; (850 <_ZN16Maintenance_ToolD1Ev+0x38>)
     82a:	4798      	blx	r3
	interfaceTimer.Remove_task();
     82c:	4628      	mov	r0, r5
     82e:	4b09      	ldr	r3, [pc, #36]	; (854 <_ZN16Maintenance_ToolD1Ev+0x3c>)
     830:	4798      	blx	r3
Maintenance_Tool::~Maintenance_Tool()
     832:	4909      	ldr	r1, [pc, #36]	; (858 <_ZN16Maintenance_ToolD1Ev+0x40>)
     834:	4620      	mov	r0, r4
     836:	4b09      	ldr	r3, [pc, #36]	; (85c <_ZN16Maintenance_ToolD1Ev+0x44>)
     838:	4798      	blx	r3
     83a:	f504 7080 	add.w	r0, r4, #256	; 0x100
     83e:	4b08      	ldr	r3, [pc, #32]	; (860 <_ZN16Maintenance_ToolD1Ev+0x48>)
     840:	4798      	blx	r3
	
} //~Maintenance_Tool
     842:	4620      	mov	r0, r4
     844:	bd38      	pop	{r3, r4, r5, pc}
     846:	bf00      	nop
     848:	000133dc 	.word	0x000133dc
     84c:	20001080 	.word	0x20001080
     850:	0000e621 	.word	0x0000e621
     854:	0000e739 	.word	0x0000e739
     858:	000133cc 	.word	0x000133cc
     85c:	000002eb 	.word	0x000002eb
     860:	000007bd 	.word	0x000007bd

00000864 <_ZN16Maintenance_ToolC1Ev>:
Maintenance_Tool::Maintenance_Tool()
     864:	b538      	push	{r3, r4, r5, lr}
     866:	4604      	mov	r4, r0
     868:	f500 7080 	add.w	r0, r0, #256	; 0x100
     86c:	4b16      	ldr	r3, [pc, #88]	; (8c8 <_ZN16Maintenance_ToolC1Ev+0x64>)
     86e:	4798      	blx	r3
     870:	4916      	ldr	r1, [pc, #88]	; (8cc <_ZN16Maintenance_ToolC1Ev+0x68>)
     872:	4620      	mov	r0, r4
     874:	4b16      	ldr	r3, [pc, #88]	; (8d0 <_ZN16Maintenance_ToolC1Ev+0x6c>)
     876:	4798      	blx	r3
     878:	4b16      	ldr	r3, [pc, #88]	; (8d4 <_ZN16Maintenance_ToolC1Ev+0x70>)
     87a:	6023      	str	r3, [r4, #0]
     87c:	2300      	movs	r3, #0
     87e:	2564      	movs	r5, #100	; 0x64
     880:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
     884:	2063      	movs	r0, #99	; 0x63
     886:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
     88a:	2162      	movs	r1, #98	; 0x62
     88c:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
     890:	2261      	movs	r2, #97	; 0x61
     892:	f884 206b 	strb.w	r2, [r4, #107]	; 0x6b
     896:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
     89a:	f884 50f2 	strb.w	r5, [r4, #242]	; 0xf2
     89e:	f884 00f3 	strb.w	r0, [r4, #243]	; 0xf3
     8a2:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
     8a6:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
     8aa:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
	ptrMaintenanceTool=this;
     8ae:	4a0a      	ldr	r2, [pc, #40]	; (8d8 <_ZN16Maintenance_ToolC1Ev+0x74>)
     8b0:	f842 4b04 	str.w	r4, [r2], #4
	maintenanceIsConnected = false;
     8b4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	nextMaintenanceSyncTime = 0;
     8b8:	61a3      	str	r3, [r4, #24]
	nextMaintenanceUsageTimerSyncTime = 0;
     8ba:	61e3      	str	r3, [r4, #28]
	ticks=0;
     8bc:	6123      	str	r3, [r4, #16]
	localBuffer=staticBuffer;
     8be:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc
} //Maintenance_Tool
     8c2:	4620      	mov	r0, r4
     8c4:	bd38      	pop	{r3, r4, r5, pc}
     8c6:	bf00      	nop
     8c8:	000007a1 	.word	0x000007a1
     8cc:	000133cc 	.word	0x000133cc
     8d0:	000002d1 	.word	0x000002d1
     8d4:	000133dc 	.word	0x000133dc
     8d8:	20000634 	.word	0x20000634

000008dc <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
     8dc:	b508      	push	{r3, lr}
		maintenanceIsConnected = isConnected;
     8de:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
		if (isConnected)
     8e2:	b919      	cbnz	r1, 8ec <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
     8e4:	4805      	ldr	r0, [pc, #20]	; (8fc <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     8e6:	4b06      	ldr	r3, [pc, #24]	; (900 <_ZN16Maintenance_Tool12setConnectedEb+0x24>)
     8e8:	4798      	blx	r3
     8ea:	bd08      	pop	{r3, pc}
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
     8ec:	f64e 2260 	movw	r2, #60000	; 0xea60
     8f0:	4904      	ldr	r1, [pc, #16]	; (904 <_ZN16Maintenance_Tool12setConnectedEb+0x28>)
     8f2:	4802      	ldr	r0, [pc, #8]	; (8fc <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     8f4:	4b04      	ldr	r3, [pc, #16]	; (908 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
     8f6:	4798      	blx	r3
     8f8:	bd08      	pop	{r3, pc}
     8fa:	bf00      	nop
     8fc:	20001080 	.word	0x20001080
     900:	0000e621 	.word	0x0000e621
     904:	00000809 	.word	0x00000809
     908:	0000e701 	.word	0x0000e701

0000090c <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
     90c:	b510      	push	{r4, lr}
     90e:	4604      	mov	r4, r0
	result=false;
     910:	2300      	movs	r3, #0
     912:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
	magic=0;
     916:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
	if (gotAccess==true)
     91a:	f890 30cd 	ldrb.w	r3, [r0, #205]	; 0xcd
     91e:	b12b      	cbz	r3, 92c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
     920:	2301      	movs	r3, #1
     922:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
	return	result;
     926:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
}
     92a:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
     92c:	4b16      	ldr	r3, [pc, #88]	; (988 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     92e:	7d5b      	ldrb	r3, [r3, #21]
     930:	b1b3      	cbz	r3, 960 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x54>
				magic|= localBuffer[i];
     932:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
     936:	1e41      	subs	r1, r0, #1
     938:	3003      	adds	r0, #3
				magic=magic<<8;
     93a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
     93e:	021b      	lsls	r3, r3, #8
     940:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
				magic|= localBuffer[i];
     944:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     948:	4313      	orrs	r3, r2
     94a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
			for (int i = 0; i < 4; i++)
     94e:	4281      	cmp	r1, r0
     950:	d1f3      	bne.n	93a <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2e>
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
     952:	4a0e      	ldr	r2, [pc, #56]	; (98c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
     954:	ea83 0102 	eor.w	r1, r3, r2
     958:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
			if (xorResult==0)
     95c:	4293      	cmp	r3, r2
     95e:	d006      	beq.n	96e <_ZN16Maintenance_Tool14IsAppConnectedEv+0x62>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     960:	2240      	movs	r2, #64	; 0x40
     962:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
     966:	4808      	ldr	r0, [pc, #32]	; (988 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     968:	4b09      	ldr	r3, [pc, #36]	; (990 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
     96a:	4798      	blx	r3
     96c:	e7db      	b.n	926 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
     96e:	2101      	movs	r1, #1
     970:	f884 10cd 	strb.w	r1, [r4, #205]	; 0xcd
				result=true;
     974:	f884 10cc 	strb.w	r1, [r4, #204]	; 0xcc
				is_MTPC_Beaming=true;
     978:	7521      	strb	r1, [r4, #20]
				setConnected(true);
     97a:	4620      	mov	r0, r4
     97c:	4b05      	ldr	r3, [pc, #20]	; (994 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x88>)
     97e:	4798      	blx	r3
				return	result;
     980:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
     984:	bd10      	pop	{r4, pc}
     986:	bf00      	nop
     988:	20000fa8 	.word	0x20000fa8
     98c:	61626364 	.word	0x61626364
     990:	0000df81 	.word	0x0000df81
     994:	000008dd 	.word	0x000008dd

00000998 <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
     998:	b410      	push	{r4}
     99a:	4604      	mov	r4, r0
     99c:	2300      	movs	r3, #0
	uint8_t i;
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
     99e:	4619      	mov	r1, r3
     9a0:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
     9a4:	54d1      	strb	r1, [r2, r3]
     9a6:	1c58      	adds	r0, r3, #1
     9a8:	b2c0      	uxtb	r0, r0
     9aa:	3301      	adds	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
     9ac:	2b40      	cmp	r3, #64	; 0x40
     9ae:	d1f7      	bne.n	9a0 <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
	}
	return	i;
}
     9b0:	bc10      	pop	{r4}
     9b2:	4770      	bx	lr

000009b4 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
     9b4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
     9b8:	b92b      	cbnz	r3, 9c6 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x12>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
     9ba:	6183      	str	r3, [r0, #24]
		maintenanceIsConnected = true;
     9bc:	2301      	movs	r3, #1
     9be:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
		bSendNotifications = true;
     9c2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
     9c6:	f890 00cc 	ldrb.w	r0, [r0, #204]	; 0xcc
     9ca:	4770      	bx	lr

000009cc <_ZN16Maintenance_Tool22CommandWriteParametersEv>:
	}
	
	return result;
}

bool Maintenance_Tool::CommandWriteParameters(void)	{
     9cc:	b508      	push	{r3, lr}
	uint32_t	w,r;
		int n=sizeof(HVACMessageHeader);
		HVACMessageHeader hm;
	
	bool	result(header.task == kGAINCommandWriteParameters);
	if (result){
     9ce:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
     9d2:	2b47      	cmp	r3, #71	; 0x47
     9d4:	d001      	beq.n	9da <_ZN16Maintenance_Tool22CommandWriteParametersEv+0xe>
	bool	result(header.task == kGAINCommandWriteParameters);
     9d6:	2000      	movs	r0, #0
	}else{

	}
	
	return result;
}
     9d8:	bd08      	pop	{r3, pc}
		memcpy((uint8_t*)&parameters,&localBuffer[n],sizeof(UserParameters));
     9da:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
     9de:	88db      	ldrh	r3, [r3, #6]
     9e0:	4601      	mov	r1, r0
     9e2:	f821 3fd4 	strh.w	r3, [r1, #212]!
		r=memory.SaveParameters(parameters);
     9e6:	4803      	ldr	r0, [pc, #12]	; (9f4 <_ZN16Maintenance_Tool22CommandWriteParametersEv+0x28>)
     9e8:	4b03      	ldr	r3, [pc, #12]	; (9f8 <_ZN16Maintenance_Tool22CommandWriteParametersEv+0x2c>)
     9ea:	4798      	blx	r3
			result=(bool)(r==0);
     9ec:	fab0 f080 	clz	r0, r0
     9f0:	0940      	lsrs	r0, r0, #5
     9f2:	bd08      	pop	{r3, pc}
     9f4:	200024c8 	.word	0x200024c8
     9f8:	00010a49 	.word	0x00010a49

000009fc <_ZN16Maintenance_Tool17CommandSetHeatersEv>:

bool Maintenance_Tool::CommandSetHeaters(void)	{
     9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	bool powerOn;
	
		memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     a00:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
     a04:	6819      	ldr	r1, [r3, #0]
     a06:	f8c0 10f2 	str.w	r1, [r0, #242]	; 0xf2
     a0a:	8899      	ldrh	r1, [r3, #4]
     a0c:	799b      	ldrb	r3, [r3, #6]
     a0e:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
     a12:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
		
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetHeaters);
     a16:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
     a1a:	2b49      	cmp	r3, #73	; 0x49
     a1c:	bf0c      	ite	eq
     a1e:	f04f 0801 	moveq.w	r8, #1
     a22:	f04f 0800 	movne.w	r8, #0
	if (result){
     a26:	d002      	beq.n	a2e <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x32>
			}
		}
	}
	
	return result;
}
     a28:	4640      	mov	r0, r8
     a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		lastEnableHeaters=enableHeaters;
     a2e:	f890 20f1 	ldrb.w	r2, [r0, #241]	; 0xf1
     a32:	f880 20f0 	strb.w	r2, [r0, #240]	; 0xf0
		enableHeaters=singleTaskMessage.description;
     a36:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
     a3a:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
		if (enableHeaters!=lastEnableHeaters)
     a3e:	429a      	cmp	r2, r3
     a40:	d0f2      	beq.n	a28 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
     a42:	4605      	mov	r5, r0
     a44:	2400      	movs	r4, #0
				heater.SetRelay(i,powerOn);
     a46:	4f07      	ldr	r7, [pc, #28]	; (a64 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x68>)
     a48:	4e07      	ldr	r6, [pc, #28]	; (a68 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x6c>)
				powerOn=enableHeaters&(0x01<<i);
     a4a:	f895 20f1 	ldrb.w	r2, [r5, #241]	; 0xf1
     a4e:	4122      	asrs	r2, r4
				heater.SetRelay(i,powerOn);
     a50:	f002 0201 	and.w	r2, r2, #1
     a54:	b2e1      	uxtb	r1, r4
     a56:	4638      	mov	r0, r7
     a58:	47b0      	blx	r6
     a5a:	3401      	adds	r4, #1
			for (uint8_t i = 0; i < 4; i++)
     a5c:	2c04      	cmp	r4, #4
     a5e:	d1f4      	bne.n	a4a <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x4e>
     a60:	e7e2      	b.n	a28 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
     a62:	bf00      	nop
     a64:	200014a4 	.word	0x200014a4
     a68:	0001075d 	.word	0x0001075d

00000a6c <_ZN16Maintenance_Tool22CommandSetFlapperValveEv>:


	

bool Maintenance_Tool::CommandSetFlapperValve(void){
     a6c:	b510      	push	{r4, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     a6e:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
     a72:	6819      	ldr	r1, [r3, #0]
     a74:	f8c0 10f2 	str.w	r1, [r0, #242]	; 0xf2
     a78:	8899      	ldrh	r1, [r3, #4]
     a7a:	799b      	ldrb	r3, [r3, #6]
     a7c:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
     a80:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandFlapperValve);
     a84:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
     a88:	2b4f      	cmp	r3, #79	; 0x4f
     a8a:	bf0c      	ite	eq
     a8c:	2401      	moveq	r4, #1
     a8e:	2400      	movne	r4, #0
	if (result){
     a90:	d001      	beq.n	a96 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x2a>
	}else{

	}
	
	return result;
}
     a92:	4620      	mov	r0, r4
     a94:	bd10      	pop	{r4, pc}
		if ((data&(0x01))>0)
     a96:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
     a9a:	f013 0f01 	tst.w	r3, #1
			fvc.StartControlling();
     a9e:	4803      	ldr	r0, [pc, #12]	; (aac <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x40>)
     aa0:	bf14      	ite	ne
     aa2:	4b03      	ldrne	r3, [pc, #12]	; (ab0 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x44>)
			fvc.StopControlling();
     aa4:	4b03      	ldreq	r3, [pc, #12]	; (ab4 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x48>)
     aa6:	4798      	blx	r3
     aa8:	e7f3      	b.n	a92 <_ZN16Maintenance_Tool22CommandSetFlapperValveEv+0x26>
     aaa:	bf00      	nop
     aac:	20001308 	.word	0x20001308
     ab0:	0000fc5d 	.word	0x0000fc5d
     ab4:	0000fa95 	.word	0x0000fa95

00000ab8 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv>:


bool Maintenance_Tool::CommandSetFlapperPosition(void){
     ab8:	b510      	push	{r4, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     aba:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
     abe:	6819      	ldr	r1, [r3, #0]
     ac0:	f8c0 10f2 	str.w	r1, [r0, #242]	; 0xf2
     ac4:	8899      	ldrh	r1, [r3, #4]
     ac6:	799b      	ldrb	r3, [r3, #6]
     ac8:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
     acc:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACWriteSetpointFlapperValve);
     ad0:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
     ad4:	2b50      	cmp	r3, #80	; 0x50
     ad6:	bf0c      	ite	eq
     ad8:	2401      	moveq	r4, #1
     ada:	2400      	movne	r4, #0
	if (result){
     adc:	d001      	beq.n	ae2 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x2a>
		}else{

	}
	
	return result;
}
     ade:	4620      	mov	r0, r4
     ae0:	bd10      	pop	{r4, pc}
		if (fvc.controllerEnabled)
     ae2:	4b07      	ldr	r3, [pc, #28]	; (b00 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x48>)
     ae4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
     ae8:	b923      	cbnz	r3, af4 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x3c>
		fvc.doPeriodicTask=false;
     aea:	2200      	movs	r2, #0
     aec:	4b04      	ldr	r3, [pc, #16]	; (b00 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x48>)
     aee:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
     af2:	e7f4      	b.n	ade <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x26>
			fvc.StartControlling(data);
     af4:	f890 10f8 	ldrb.w	r1, [r0, #248]	; 0xf8
     af8:	4801      	ldr	r0, [pc, #4]	; (b00 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x48>)
     afa:	4b02      	ldr	r3, [pc, #8]	; (b04 <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x4c>)
     afc:	4798      	blx	r3
     afe:	e7f4      	b.n	aea <_ZN16Maintenance_Tool25CommandSetFlapperPositionEv+0x32>
     b00:	20001308 	.word	0x20001308
     b04:	0000fad9 	.word	0x0000fad9

00000b08 <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
     b08:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
     b0a:	0855      	lsrs	r5, r2, #1
     b0c:	d007      	beq.n	b1e <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
     b0e:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
     b10:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
     b14:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
     b16:	3401      	adds	r4, #1
     b18:	b2a4      	uxth	r4, r4
     b1a:	42ac      	cmp	r4, r5
     b1c:	dbf8      	blt.n	b10 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
     b1e:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
     b22:	bf1d      	ittte	ne
     b24:	189b      	addne	r3, r3, r2
     b26:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
     b2a:	4048      	eorne	r0, r1
     b2c:	4608      	moveq	r0, r1

	return checksum;
	}
     b2e:	bc30      	pop	{r4, r5}
     b30:	4770      	bx	lr
	...

00000b34 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
     b34:	b538      	push	{r3, r4, r5, lr}
     b36:	4604      	mov	r4, r0
	checksum=0;
     b38:	2500      	movs	r5, #0
     b3a:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
	checksum = calculateChecksum(0, sizeof(header), &header);
     b3e:	460b      	mov	r3, r1
     b40:	2206      	movs	r2, #6
     b42:	4629      	mov	r1, r5
     b44:	4d02      	ldr	r5, [pc, #8]	; (b50 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
     b46:	47a8      	blx	r5
     b48:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
	}
     b4c:	bd38      	pop	{r3, r4, r5, pc}
     b4e:	bf00      	nop
     b50:	00000b09 	.word	0x00000b09

00000b54 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
{
	uint8_t i;
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
     b54:	4b06      	ldr	r3, [pc, #24]	; (b70 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x1c>)
     b56:	681b      	ldr	r3, [r3, #0]
     b58:	600b      	str	r3, [r1, #0]
     b5a:	4b06      	ldr	r3, [pc, #24]	; (b74 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x20>)
     b5c:	681b      	ldr	r3, [r3, #0]
     b5e:	604b      	str	r3, [r1, #4]
     b60:	4b05      	ldr	r3, [pc, #20]	; (b78 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x24>)
     b62:	681b      	ldr	r3, [r3, #0]
     b64:	608b      	str	r3, [r1, #8]
     b66:	4b05      	ldr	r3, [pc, #20]	; (b7c <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
     b68:	681b      	ldr	r3, [r3, #0]
     b6a:	60cb      	str	r3, [r1, #12]
     b6c:	4770      	bx	lr
     b6e:	bf00      	nop
     b70:	41002018 	.word	0x41002018
     b74:	4100201c 	.word	0x4100201c
     b78:	41002020 	.word	0x41002020
     b7c:	41002024 	.word	0x41002024

00000b80 <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
     b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b82:	4604      	mov	r4, r0
	ticks=0;
     b84:	2600      	movs	r6, #0
     b86:	6106      	str	r6, [r0, #16]
	interfaceTimer.Init();
     b88:	4d13      	ldr	r5, [pc, #76]	; (bd8 <_ZN16Maintenance_Tool4InitEv+0x58>)
     b8a:	4628      	mov	r0, r5
     b8c:	4b13      	ldr	r3, [pc, #76]	; (bdc <_ZN16Maintenance_Tool4InitEv+0x5c>)
     b8e:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
     b90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     b94:	4912      	ldr	r1, [pc, #72]	; (be0 <_ZN16Maintenance_Tool4InitEv+0x60>)
     b96:	4628      	mov	r0, r5
     b98:	4b12      	ldr	r3, [pc, #72]	; (be4 <_ZN16Maintenance_Tool4InitEv+0x64>)
     b9a:	4798      	blx	r3
	InitCommandHandler(localBuffer);
     b9c:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
     ba0:	4620      	mov	r0, r4
     ba2:	4b11      	ldr	r3, [pc, #68]	; (be8 <_ZN16Maintenance_Tool4InitEv+0x68>)
     ba4:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
     ba6:	f104 05d7 	add.w	r5, r4, #215	; 0xd7
     baa:	4629      	mov	r1, r5
     bac:	4620      	mov	r0, r4
     bae:	4b0f      	ldr	r3, [pc, #60]	; (bec <_ZN16Maintenance_Tool4InitEv+0x6c>)
     bb0:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
     bb2:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
     bb6:	f8d4 70d7 	ldr.w	r7, [r4, #215]	; 0xd7
     bba:	f8d4 00db 	ldr.w	r0, [r4, #219]	; 0xdb
     bbe:	f8d4 10df 	ldr.w	r1, [r4, #223]	; 0xdf
     bc2:	f8d4 20e3 	ldr.w	r2, [r4, #227]	; 0xe3
     bc6:	601f      	str	r7, [r3, #0]
     bc8:	6058      	str	r0, [r3, #4]
     bca:	6099      	str	r1, [r3, #8]
     bcc:	60da      	str	r2, [r3, #12]
	gotAccess=false;
     bce:	f884 60cd 	strb.w	r6, [r4, #205]	; 0xcd
}
     bd2:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
     bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bd8:	20001080 	.word	0x20001080
     bdc:	0000e5c5 	.word	0x0000e5c5
     be0:	000007f9 	.word	0x000007f9
     be4:	0000e6b1 	.word	0x0000e6b1
     be8:	000002f1 	.word	0x000002f1
     bec:	00000b55 	.word	0x00000b55

00000bf0 <_GLOBAL__sub_I_ptrMaintenanceTool>:
	}

}
     bf0:	b510      	push	{r4, lr}
     bf2:	4c05      	ldr	r4, [pc, #20]	; (c08 <_GLOBAL__sub_I_ptrMaintenanceTool+0x18>)
     bf4:	4620      	mov	r0, r4
     bf6:	4b05      	ldr	r3, [pc, #20]	; (c0c <_GLOBAL__sub_I_ptrMaintenanceTool+0x1c>)
     bf8:	4798      	blx	r3
     bfa:	4a05      	ldr	r2, [pc, #20]	; (c10 <_GLOBAL__sub_I_ptrMaintenanceTool+0x20>)
     bfc:	4905      	ldr	r1, [pc, #20]	; (c14 <_GLOBAL__sub_I_ptrMaintenanceTool+0x24>)
     bfe:	4620      	mov	r0, r4
     c00:	4b05      	ldr	r3, [pc, #20]	; (c18 <_GLOBAL__sub_I_ptrMaintenanceTool+0x28>)
     c02:	4798      	blx	r3
     c04:	bd10      	pop	{r4, pc}
     c06:	bf00      	nop
     c08:	20000678 	.word	0x20000678
     c0c:	00000865 	.word	0x00000865
     c10:	20000000 	.word	0x20000000
     c14:	00000819 	.word	0x00000819
     c18:	00012a41 	.word	0x00012a41

00000c1c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
     c1c:	b538      	push	{r3, r4, r5, lr}
     c1e:	4605      	mov	r5, r0
     c20:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
     c22:	4b05      	ldr	r3, [pc, #20]	; (c38 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
     c24:	4798      	blx	r3
     c26:	f8a5 00d0 	strh.w	r0, [r5, #208]	; 0xd0
	usb.writeData(&header, sizeof(header));
     c2a:	2206      	movs	r2, #6
     c2c:	4621      	mov	r1, r4
     c2e:	4803      	ldr	r0, [pc, #12]	; (c3c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
     c30:	4b03      	ldr	r3, [pc, #12]	; (c40 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
     c32:	4798      	blx	r3
     c34:	bd38      	pop	{r3, r4, r5, pc}
     c36:	bf00      	nop
     c38:	00000b35 	.word	0x00000b35
     c3c:	20000fa8 	.word	0x20000fa8
     c40:	0000e06d 	.word	0x0000e06d

00000c44 <_ZN16Maintenance_Tool21CommandReadParametersEv>:
bool Maintenance_Tool::CommandReadParameters(){
     c44:	b538      	push	{r3, r4, r5, lr}
	 	bool	result(header.task == kGAINCommandReadParameters);
     c46:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
     c4a:	2b48      	cmp	r3, #72	; 0x48
     c4c:	bf0c      	ite	eq
     c4e:	2501      	moveq	r5, #1
     c50:	2500      	movne	r5, #0
		if (result){
     c52:	d001      	beq.n	c58 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x14>
}
     c54:	4628      	mov	r0, r5
     c56:	bd38      	pop	{r3, r4, r5, pc}
     c58:	4604      	mov	r4, r0
			r=memory.ReadParameters(parameters);
     c5a:	f100 01d4 	add.w	r1, r0, #212	; 0xd4
     c5e:	4812      	ldr	r0, [pc, #72]	; (ca8 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x64>)
     c60:	4b12      	ldr	r3, [pc, #72]	; (cac <_ZN16Maintenance_Tool21CommandReadParametersEv+0x68>)
     c62:	4798      	blx	r3
			 memcpy(localBuffer,(void*)&hm,n);
     c64:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
     c68:	4a11      	ldr	r2, [pc, #68]	; (cb0 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x6c>)
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	2200      	movs	r2, #0
     c6e:	711a      	strb	r2, [r3, #4]
     c70:	715a      	strb	r2, [r3, #5]
			memcpy((uint8_t*)&localBuffer[n],(void*)&parameters,sizeof(UserParameters));
     c72:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
     c76:	f8b4 20d4 	ldrh.w	r2, [r4, #212]	; 0xd4
     c7a:	80da      	strh	r2, [r3, #6]
			if (fvc.dataStruct.controlOutputs.iAlcFvStandAloneOut)
     c7c:	4b0d      	ldr	r3, [pc, #52]	; (cb4 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x70>)
     c7e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
     c82:	b15b      	cbz	r3, c9c <_ZN16Maintenance_Tool21CommandReadParametersEv+0x58>
				localBuffer[n+sizeof(UserParameters)]=parameters.flapperValveStandAloneMinimumPosition;
     c84:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
     c88:	f894 20d5 	ldrb.w	r2, [r4, #213]	; 0xd5
     c8c:	721a      	strb	r2, [r3, #8]
			w=usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     c8e:	2240      	movs	r2, #64	; 0x40
     c90:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
     c94:	4808      	ldr	r0, [pc, #32]	; (cb8 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x74>)
     c96:	4b09      	ldr	r3, [pc, #36]	; (cbc <_ZN16Maintenance_Tool21CommandReadParametersEv+0x78>)
     c98:	4798      	blx	r3
     c9a:	e7db      	b.n	c54 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x10>
				localBuffer[n+sizeof(UserParameters)]=parameters.flapperValveMinimumPosition;
     c9c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
     ca0:	f894 20d4 	ldrb.w	r2, [r4, #212]	; 0xd4
     ca4:	721a      	strb	r2, [r3, #8]
     ca6:	e7f2      	b.n	c8e <_ZN16Maintenance_Tool21CommandReadParametersEv+0x4a>
     ca8:	200024c8 	.word	0x200024c8
     cac:	0001092d 	.word	0x0001092d
     cb0:	61626364 	.word	0x61626364
     cb4:	20001308 	.word	0x20001308
     cb8:	20000fa8 	.word	0x20000fa8
     cbc:	0000e105 	.word	0x0000e105

00000cc0 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv>:
bool Maintenance_Tool::CommandReadHeaterStatus(){
     cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool	result(header.task == kHVACCommandReadHeaterStatus);
     cc2:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
     cc6:	2b4a      	cmp	r3, #74	; 0x4a
     cc8:	bf0c      	ite	eq
     cca:	2501      	moveq	r5, #1
     ccc:	2500      	movne	r5, #0
	if (result){
     cce:	d001      	beq.n	cd4 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x14>
}
     cd0:	4628      	mov	r0, r5
     cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cd4:	4604      	mov	r4, r0
			singleTask.description=heater.ReadStatus();
     cd6:	4e14      	ldr	r6, [pc, #80]	; (d28 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x68>)
     cd8:	4630      	mov	r0, r6
     cda:	4b14      	ldr	r3, [pc, #80]	; (d2c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x6c>)
     cdc:	4798      	blx	r3
     cde:	4607      	mov	r7, r0
			memcpy(localBuffer,(void*)&singleTask,n);
     ce0:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
     ce4:	4a12      	ldr	r2, [pc, #72]	; (d30 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x70>)
     ce6:	601a      	str	r2, [r3, #0]
     ce8:	2200      	movs	r2, #0
     cea:	711a      	strb	r2, [r3, #4]
     cec:	224a      	movs	r2, #74	; 0x4a
     cee:	715a      	strb	r2, [r3, #5]
     cf0:	7198      	strb	r0, [r3, #6]
			heatersEnabled=heater.ReadEnableGIPO();
     cf2:	4630      	mov	r0, r6
     cf4:	4b0f      	ldr	r3, [pc, #60]	; (d34 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x74>)
     cf6:	4798      	blx	r3
			localBuffer[n]=heatersEnabled;
     cf8:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
     cfc:	71d8      	strb	r0, [r3, #7]
			if (!heater.heaterStatusChanged)
     cfe:	7873      	ldrb	r3, [r6, #1]
     d00:	b15b      	cbz	r3, d1a <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x5a>
			singleTaskMessage=singleTask;
     d02:	4b0b      	ldr	r3, [pc, #44]	; (d30 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x70>)
     d04:	f8c4 30f2 	str.w	r3, [r4, #242]	; 0xf2
     d08:	2200      	movs	r2, #0
     d0a:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
     d0e:	234a      	movs	r3, #74	; 0x4a
     d10:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
     d14:	f884 70f8 	strb.w	r7, [r4, #248]	; 0xf8
     d18:	e7da      	b.n	cd0 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x10>
				usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     d1a:	2240      	movs	r2, #64	; 0x40
     d1c:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
     d20:	4805      	ldr	r0, [pc, #20]	; (d38 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x78>)
     d22:	4b06      	ldr	r3, [pc, #24]	; (d3c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x7c>)
     d24:	4798      	blx	r3
     d26:	e7ec      	b.n	d02 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x42>
     d28:	200014a4 	.word	0x200014a4
     d2c:	00010661 	.word	0x00010661
     d30:	61626364 	.word	0x61626364
     d34:	000106cd 	.word	0x000106cd
     d38:	20000fa8 	.word	0x20000fa8
     d3c:	0000e105 	.word	0x0000e105

00000d40 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv>:
bool Maintenance_Tool::CommandReadFlapperData(){
     d40:	b570      	push	{r4, r5, r6, lr}
	bool	result(header.task == kHVACReadPositionFlapperValve);
     d42:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
     d46:	2b4e      	cmp	r3, #78	; 0x4e
     d48:	bf0c      	ite	eq
     d4a:	2501      	moveq	r5, #1
     d4c:	2500      	movne	r5, #0
	if (result){
     d4e:	d001      	beq.n	d54 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x14>
}
     d50:	4628      	mov	r0, r5
     d52:	bd70      	pop	{r4, r5, r6, pc}
     d54:	4604      	mov	r4, r0
		fvc.UpdateFlapperValveData();
     d56:	4e0f      	ldr	r6, [pc, #60]	; (d94 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x54>)
     d58:	4630      	mov	r0, r6
     d5a:	4b0f      	ldr	r3, [pc, #60]	; (d98 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x58>)
     d5c:	4798      	blx	r3
		CreateFullBufferMessage(localBuffer,(uint8_t*)&fvc.dataStruct);
     d5e:	6823      	ldr	r3, [r4, #0]
     d60:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     d64:	f106 0280 	add.w	r2, r6, #128	; 0x80
     d68:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
     d6c:	4420      	add	r0, r4
     d6e:	4b0b      	ldr	r3, [pc, #44]	; (d9c <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x5c>)
     d70:	4798      	blx	r3
			usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     d72:	2240      	movs	r2, #64	; 0x40
     d74:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
     d78:	4809      	ldr	r0, [pc, #36]	; (da0 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x60>)
     d7a:	4b0a      	ldr	r3, [pc, #40]	; (da4 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x64>)
     d7c:	4798      	blx	r3
		singleTaskMessage=singleTask;
     d7e:	4b0a      	ldr	r3, [pc, #40]	; (da8 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x68>)
     d80:	f8c4 30f2 	str.w	r3, [r4, #242]	; 0xf2
     d84:	2300      	movs	r3, #0
     d86:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
     d8a:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
     d8e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
     d92:	e7dd      	b.n	d50 <_ZN16Maintenance_Tool22CommandReadFlapperDataEv+0x10>
     d94:	20001308 	.word	0x20001308
     d98:	0000fcb9 	.word	0x0000fcb9
     d9c:	000007c1 	.word	0x000007c1
     da0:	20000fa8 	.word	0x20000fa8
     da4:	0000e105 	.word	0x0000e105
     da8:	61626364 	.word	0x61626364

00000dac <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv>:
bool Maintenance_Tool::CommandReadTemmperatures(){
     dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool	result(header.task == kHVACCommandReadTemperatures);
     db0:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
     db4:	2b4d      	cmp	r3, #77	; 0x4d
     db6:	bf0c      	ite	eq
     db8:	2501      	moveq	r5, #1
     dba:	2500      	movne	r5, #0
	if (result){
     dbc:	d002      	beq.n	dc4 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x18>
}
     dbe:	4628      	mov	r0, r5
     dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		singleTask.description=temperatures.faultData;
     dc4:	4b18      	ldr	r3, [pc, #96]	; (e28 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
     dc6:	f893 809c 	ldrb.w	r8, [r3, #156]	; 0x9c
		memcpy(localBuffer,(void*)&singleTask,n);
     dca:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
     dce:	4a17      	ldr	r2, [pc, #92]	; (e2c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
     dd0:	601a      	str	r2, [r3, #0]
     dd2:	2200      	movs	r2, #0
     dd4:	711a      	strb	r2, [r3, #4]
     dd6:	224d      	movs	r2, #77	; 0x4d
     dd8:	715a      	strb	r2, [r3, #5]
     dda:	f883 8006 	strb.w	r8, [r3, #6]
     dde:	2307      	movs	r3, #7
     de0:	4911      	ldr	r1, [pc, #68]	; (e28 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
     de2:	f103 0261 	add.w	r2, r3, #97	; 0x61
     de6:	440a      	add	r2, r1
     de8:	f103 0710 	add.w	r7, r3, #16
				memcpy(&localBuffer[n+4*((4*i)+j)],(void*)&temperatures.values[i][j],4);
     dec:	f852 4f04 	ldr.w	r4, [r2, #4]!
     df0:	f8d0 60fc 	ldr.w	r6, [r0, #252]	; 0xfc
     df4:	50f4      	str	r4, [r6, r3]
     df6:	3304      	adds	r3, #4
			for (int j = 0; j < 4; j++)
     df8:	42bb      	cmp	r3, r7
     dfa:	d1f7      	bne.n	dec <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x40>
		for (int i = 0; i < 3; i++)
     dfc:	2b37      	cmp	r3, #55	; 0x37
     dfe:	d1f0      	bne.n	de2 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x36>
     e00:	4604      	mov	r4, r0
		usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     e02:	2240      	movs	r2, #64	; 0x40
     e04:	f8d0 10fc 	ldr.w	r1, [r0, #252]	; 0xfc
     e08:	4809      	ldr	r0, [pc, #36]	; (e30 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x84>)
     e0a:	4b0a      	ldr	r3, [pc, #40]	; (e34 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x88>)
     e0c:	4798      	blx	r3
		singleTaskMessage=singleTask;
     e0e:	4b07      	ldr	r3, [pc, #28]	; (e2c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
     e10:	f8c4 30f2 	str.w	r3, [r4, #242]	; 0xf2
     e14:	2200      	movs	r2, #0
     e16:	f884 20f6 	strb.w	r2, [r4, #246]	; 0xf6
     e1a:	234d      	movs	r3, #77	; 0x4d
     e1c:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
     e20:	f884 80f8 	strb.w	r8, [r4, #248]	; 0xf8
     e24:	e7cb      	b.n	dbe <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x12>
     e26:	bf00      	nop
     e28:	20007898 	.word	0x20007898
     e2c:	61626364 	.word	0x61626364
     e30:	20000fa8 	.word	0x20000fa8
     e34:	0000e105 	.word	0x0000e105

00000e38 <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
     e38:	b570      	push	{r4, r5, r6, lr}
     e3a:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
     e3c:	f100 0568 	add.w	r5, r0, #104	; 0x68
     e40:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
     e44:	681a      	ldr	r2, [r3, #0]
     e46:	6682      	str	r2, [r0, #104]	; 0x68
     e48:	889b      	ldrh	r3, [r3, #4]
     e4a:	80ab      	strh	r3, [r5, #4]
	&& (header.task<kGAINNumberOfCommands))
     e4c:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
     e50:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
     e52:	b2db      	uxtb	r3, r3
     e54:	2b16      	cmp	r3, #22
     e56:	d817      	bhi.n	e88 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x50>
		gotTask=true;
     e58:	2301      	movs	r3, #1
     e5a:	f880 30cf 	strb.w	r3, [r0, #207]	; 0xcf
		result=gotTask;
     e5e:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
		switch (header.task)
     e62:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
     e66:	3b41      	subs	r3, #65	; 0x41
     e68:	2b16      	cmp	r3, #22
     e6a:	d878      	bhi.n	f5e <_ZN16Maintenance_Tool14handleHVACTaskEv+0x126>
     e6c:	e8df f003 	tbb	[pc, r3]
     e70:	2c1c261f 	.word	0x2c1c261f
     e74:	3b351c1c 	.word	0x3b351c1c
     e78:	534d4741 	.word	0x534d4741
     e7c:	716b655f 	.word	0x716b655f
     e80:	1c1c1c59 	.word	0x1c1c1c59
     e84:	7777      	.short	0x7777
     e86:	1c          	.byte	0x1c
     e87:	00          	.byte	0x00
		gotTask=false;
     e88:	2300      	movs	r3, #0
     e8a:	f880 30cf 	strb.w	r3, [r0, #207]	; 0xcf
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
     e8e:	4e36      	ldr	r6, [pc, #216]	; (f68 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x130>)
     e90:	2240      	movs	r2, #64	; 0x40
     e92:	f100 01fc 	add.w	r1, r0, #252	; 0xfc
     e96:	4630      	mov	r0, r6
     e98:	4b34      	ldr	r3, [pc, #208]	; (f6c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x134>)
     e9a:	4798      	blx	r3
		result=usb.rxReady;
     e9c:	7d73      	ldrb	r3, [r6, #21]
     e9e:	b2db      	uxtb	r3, r3
     ea0:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	if (result)
     ea4:	2b00      	cmp	r3, #0
     ea6:	d1dc      	bne.n	e62 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2a>
	}
     ea8:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
     eac:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
     eae:	4629      	mov	r1, r5
     eb0:	4620      	mov	r0, r4
     eb2:	4b2f      	ldr	r3, [pc, #188]	; (f70 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x138>)
     eb4:	4798      	blx	r3
     eb6:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     eba:	e7f5      	b.n	ea8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
	maintenanceIsConnected = false;
     ebc:	2300      	movs	r3, #0
     ebe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	bSendNotifications = false;
     ec2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
				break;
     ec6:	e7ef      	b.n	ea8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				notifyGAINCommandReceived( header, result);
     ec8:	2201      	movs	r2, #1
     eca:	4629      	mov	r1, r5
     ecc:	4620      	mov	r0, r4
     ece:	4b29      	ldr	r3, [pc, #164]	; (f74 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x13c>)
     ed0:	4798      	blx	r3
				result = handleGAINCommandReset(header);
     ed2:	2301      	movs	r3, #1
     ed4:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
				break;
     ed8:	e7e6      	b.n	ea8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandWriteParameters();
     eda:	4620      	mov	r0, r4
     edc:	4b26      	ldr	r3, [pc, #152]	; (f78 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x140>)
     ede:	4798      	blx	r3
     ee0:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     ee4:	e7e0      	b.n	ea8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandReadParameters();
     ee6:	4620      	mov	r0, r4
     ee8:	4b24      	ldr	r3, [pc, #144]	; (f7c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x144>)
     eea:	4798      	blx	r3
     eec:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     ef0:	e7da      	b.n	ea8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetHeaters();
     ef2:	4620      	mov	r0, r4
     ef4:	4b22      	ldr	r3, [pc, #136]	; (f80 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x148>)
     ef6:	4798      	blx	r3
     ef8:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     efc:	e7d4      	b.n	ea8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandReadHeaterStatus();
     efe:	4620      	mov	r0, r4
     f00:	4b20      	ldr	r3, [pc, #128]	; (f84 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x14c>)
     f02:	4798      	blx	r3
     f04:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     f08:	e7ce      	b.n	ea8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetEnableFans();
     f0a:	4620      	mov	r0, r4
     f0c:	4b1e      	ldr	r3, [pc, #120]	; (f88 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x150>)
     f0e:	4798      	blx	r3
     f10:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     f14:	e7c8      	b.n	ea8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetPWMFans();
     f16:	4620      	mov	r0, r4
     f18:	4b1c      	ldr	r3, [pc, #112]	; (f8c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x154>)
     f1a:	4798      	blx	r3
     f1c:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     f20:	e7c2      	b.n	ea8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandFansStatus();
     f22:	4620      	mov	r0, r4
     f24:	4b1a      	ldr	r3, [pc, #104]	; (f90 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x158>)
     f26:	4798      	blx	r3
     f28:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     f2c:	e7bc      	b.n	ea8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandReadTemmperatures();
     f2e:	4620      	mov	r0, r4
     f30:	4b18      	ldr	r3, [pc, #96]	; (f94 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x15c>)
     f32:	4798      	blx	r3
     f34:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     f38:	e7b6      	b.n	ea8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandReadFlapperData();
     f3a:	4620      	mov	r0, r4
     f3c:	4b16      	ldr	r3, [pc, #88]	; (f98 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x160>)
     f3e:	4798      	blx	r3
     f40:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     f44:	e7b0      	b.n	ea8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetFlapperValve();
     f46:	4620      	mov	r0, r4
     f48:	4b14      	ldr	r3, [pc, #80]	; (f9c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x164>)
     f4a:	4798      	blx	r3
     f4c:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     f50:	e7aa      	b.n	ea8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = CommandSetFlapperPosition();
     f52:	4620      	mov	r0, r4
     f54:	4b12      	ldr	r3, [pc, #72]	; (fa0 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x168>)
     f56:	4798      	blx	r3
     f58:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
     f5c:	e7a4      	b.n	ea8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
				result = false;
     f5e:	2300      	movs	r3, #0
     f60:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
				break;
     f64:	e7a0      	b.n	ea8 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x70>
     f66:	bf00      	nop
     f68:	20000fa8 	.word	0x20000fa8
     f6c:	0000df81 	.word	0x0000df81
     f70:	000009b5 	.word	0x000009b5
     f74:	00000c1d 	.word	0x00000c1d
     f78:	000009cd 	.word	0x000009cd
     f7c:	00000c45 	.word	0x00000c45
     f80:	000009fd 	.word	0x000009fd
     f84:	00000cc1 	.word	0x00000cc1
     f88:	00000379 	.word	0x00000379
     f8c:	000003a5 	.word	0x000003a5
     f90:	000003f1 	.word	0x000003f1
     f94:	00000dad 	.word	0x00000dad
     f98:	00000d41 	.word	0x00000d41
     f9c:	00000a6d 	.word	0x00000a6d
     fa0:	00000ab9 	.word	0x00000ab9

00000fa4 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
     fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fa6:	4604      	mov	r4, r0
	result=false;
     fa8:	2300      	movs	r3, #0
     faa:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
	if (gotAccess)
     fae:	f890 30cd 	ldrb.w	r3, [r0, #205]	; 0xcd
     fb2:	2b00      	cmp	r3, #0
     fb4:	d04c      	beq.n	1050 <_ZN16Maintenance_Tool19handleCommunicationEv+0xac>
		if (usb.rxReady)
     fb6:	4b28      	ldr	r3, [pc, #160]	; (1058 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     fb8:	7d5b      	ldrb	r3, [r3, #21]
     fba:	b95b      	cbnz	r3, fd4 <_ZN16Maintenance_Tool19handleCommunicationEv+0x30>
			gotCommand=false;
     fbc:	2300      	movs	r3, #0
     fbe:	f880 30ce 	strb.w	r3, [r0, #206]	; 0xce
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     fc2:	2240      	movs	r2, #64	; 0x40
     fc4:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
     fc8:	4823      	ldr	r0, [pc, #140]	; (1058 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb4>)
     fca:	4b24      	ldr	r3, [pc, #144]	; (105c <_ZN16Maintenance_Tool19handleCommunicationEv+0xb8>)
     fcc:	4798      	blx	r3
	}
     fce:	f894 00cc 	ldrb.w	r0, [r4, #204]	; 0xcc
     fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeMessage);
     fd4:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
     fd8:	681a      	ldr	r2, [r3, #0]
     fda:	6682      	str	r2, [r0, #104]	; 0x68
     fdc:	889b      	ldrh	r3, [r3, #4]
     fde:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
			switch (input){
     fe2:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
     fe6:	2b3d      	cmp	r3, #61	; 0x3d
     fe8:	d017      	beq.n	101a <_ZN16Maintenance_Tool19handleCommunicationEv+0x76>
     fea:	2b3e      	cmp	r3, #62	; 0x3e
     fec:	d010      	beq.n	1010 <_ZN16Maintenance_Tool19handleCommunicationEv+0x6c>
     fee:	2b3c      	cmp	r3, #60	; 0x3c
     ff0:	d003      	beq.n	ffa <_ZN16Maintenance_Tool19handleCommunicationEv+0x56>
					gotCommand=false;
     ff2:	2300      	movs	r3, #0
     ff4:	f880 30ce 	strb.w	r3, [r0, #206]	; 0xce
				break;
     ff8:	e006      	b.n	1008 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
					gotCommand=true;
     ffa:	2301      	movs	r3, #1
     ffc:	f880 30ce 	strb.w	r3, [r0, #206]	; 0xce
					result = handleHVACTask();
    1000:	4b17      	ldr	r3, [pc, #92]	; (1060 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    1002:	4798      	blx	r3
    1004:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
			ClearLocalBuffer();
    1008:	4620      	mov	r0, r4
    100a:	4b16      	ldr	r3, [pc, #88]	; (1064 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
    100c:	4798      	blx	r3
    100e:	e7d8      	b.n	fc2 <_ZN16Maintenance_Tool19handleCommunicationEv+0x1e>
					result = handleHVACTask();
    1010:	4b13      	ldr	r3, [pc, #76]	; (1060 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    1012:	4798      	blx	r3
    1014:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
				break;
    1018:	e7f6      	b.n	1008 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
					is_MTPC_Beaming=true;
    101a:	2501      	movs	r5, #1
    101c:	7505      	strb	r5, [r0, #20]
					interfaceTimer.Stop();
    101e:	4e12      	ldr	r6, [pc, #72]	; (1068 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
    1020:	4630      	mov	r0, r6
    1022:	4b12      	ldr	r3, [pc, #72]	; (106c <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
    1024:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
    1026:	4f12      	ldr	r7, [pc, #72]	; (1070 <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
    1028:	4639      	mov	r1, r7
    102a:	4630      	mov	r0, r6
    102c:	4b11      	ldr	r3, [pc, #68]	; (1074 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
    102e:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
    1030:	f242 7210 	movw	r2, #10000	; 0x2710
    1034:	4639      	mov	r1, r7
    1036:	4630      	mov	r0, r6
    1038:	4b0f      	ldr	r3, [pc, #60]	; (1078 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
    103a:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
    103c:	2300      	movs	r3, #0
    103e:	61a3      	str	r3, [r4, #24]
					maintenanceIsConnected = true;
    1040:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
					bSendNotifications = true;
    1044:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
					result=is_MTPC_Beaming;
    1048:	7d23      	ldrb	r3, [r4, #20]
    104a:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
				break;
    104e:	e7db      	b.n	1008 <_ZN16Maintenance_Tool19handleCommunicationEv+0x64>
		gotCommand=false;
    1050:	2300      	movs	r3, #0
    1052:	f880 30ce 	strb.w	r3, [r0, #206]	; 0xce
    1056:	e7ba      	b.n	fce <_ZN16Maintenance_Tool19handleCommunicationEv+0x2a>
    1058:	20000fa8 	.word	0x20000fa8
    105c:	0000df81 	.word	0x0000df81
    1060:	00000e39 	.word	0x00000e39
    1064:	00000999 	.word	0x00000999
    1068:	20001080 	.word	0x20001080
    106c:	0000e621 	.word	0x0000e621
    1070:	00000809 	.word	0x00000809
    1074:	0000e765 	.word	0x0000e765
    1078:	0000e701 	.word	0x0000e701

0000107c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    107c:	b580      	push	{r7, lr}
    107e:	af00      	add	r7, sp, #0
	system_init();
    1080:	4b03      	ldr	r3, [pc, #12]	; (1090 <atmel_start_init+0x14>)
    1082:	4798      	blx	r3
	usb_init();
    1084:	4b03      	ldr	r3, [pc, #12]	; (1094 <atmel_start_init+0x18>)
    1086:	4798      	blx	r3
	spi_nor_flash_init();
    1088:	4b03      	ldr	r3, [pc, #12]	; (1098 <atmel_start_init+0x1c>)
    108a:	4798      	blx	r3
}
    108c:	bf00      	nop
    108e:	bd80      	pop	{r7, pc}
    1090:	00002405 	.word	0x00002405
    1094:	0000b9d1 	.word	0x0000b9d1
    1098:	0000b965 	.word	0x0000b965

0000109c <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    109c:	b480      	push	{r7}
    109e:	b085      	sub	sp, #20
    10a0:	af00      	add	r7, sp, #0
    10a2:	60f8      	str	r0, [r7, #12]
    10a4:	460b      	mov	r3, r1
    10a6:	607a      	str	r2, [r7, #4]
    10a8:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    10aa:	7afa      	ldrb	r2, [r7, #11]
    10ac:	68fb      	ldr	r3, [r7, #12]
    10ae:	3220      	adds	r2, #32
    10b0:	6879      	ldr	r1, [r7, #4]
    10b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    10b6:	bf00      	nop
    10b8:	3714      	adds	r7, #20
    10ba:	46bd      	mov	sp, r7
    10bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    10c0:	4770      	bx	lr

000010c2 <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    10c2:	b480      	push	{r7}
    10c4:	b083      	sub	sp, #12
    10c6:	af00      	add	r7, sp, #0
    10c8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    10ca:	687b      	ldr	r3, [r7, #4]
    10cc:	691b      	ldr	r3, [r3, #16]
    10ce:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    10d2:	687b      	ldr	r3, [r7, #4]
    10d4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10d6:	bf00      	nop
    10d8:	370c      	adds	r7, #12
    10da:	46bd      	mov	sp, r7
    10dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    10e0:	4770      	bx	lr

000010e2 <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    10e2:	b480      	push	{r7}
    10e4:	b083      	sub	sp, #12
    10e6:	af00      	add	r7, sp, #0
    10e8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    10ea:	687b      	ldr	r3, [r7, #4]
    10ec:	691b      	ldr	r3, [r3, #16]
    10ee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    10f2:	687b      	ldr	r3, [r7, #4]
    10f4:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    10f6:	bf00      	nop
    10f8:	370c      	adds	r7, #12
    10fa:	46bd      	mov	sp, r7
    10fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1100:	4770      	bx	lr

00001102 <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    1102:	b480      	push	{r7}
    1104:	b083      	sub	sp, #12
    1106:	af00      	add	r7, sp, #0
    1108:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    110a:	687b      	ldr	r3, [r7, #4]
    110c:	691b      	ldr	r3, [r3, #16]
    110e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    1112:	687b      	ldr	r3, [r7, #4]
    1114:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1116:	bf00      	nop
    1118:	370c      	adds	r7, #12
    111a:	46bd      	mov	sp, r7
    111c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1120:	4770      	bx	lr

00001122 <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    1122:	b480      	push	{r7}
    1124:	b083      	sub	sp, #12
    1126:	af00      	add	r7, sp, #0
    1128:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    112a:	687b      	ldr	r3, [r7, #4]
    112c:	691b      	ldr	r3, [r3, #16]
    112e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    1132:	687b      	ldr	r3, [r7, #4]
    1134:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1136:	bf00      	nop
    1138:	370c      	adds	r7, #12
    113a:	46bd      	mov	sp, r7
    113c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1140:	4770      	bx	lr

00001142 <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    1142:	b480      	push	{r7}
    1144:	b083      	sub	sp, #12
    1146:	af00      	add	r7, sp, #0
    1148:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    114a:	687b      	ldr	r3, [r7, #4]
    114c:	695b      	ldr	r3, [r3, #20]
    114e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    1152:	687b      	ldr	r3, [r7, #4]
    1154:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1156:	bf00      	nop
    1158:	370c      	adds	r7, #12
    115a:	46bd      	mov	sp, r7
    115c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1160:	4770      	bx	lr

00001162 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    1162:	b480      	push	{r7}
    1164:	b083      	sub	sp, #12
    1166:	af00      	add	r7, sp, #0
    1168:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    116a:	687b      	ldr	r3, [r7, #4]
    116c:	695b      	ldr	r3, [r3, #20]
    116e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    1172:	687b      	ldr	r3, [r7, #4]
    1174:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1176:	bf00      	nop
    1178:	370c      	adds	r7, #12
    117a:	46bd      	mov	sp, r7
    117c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1180:	4770      	bx	lr

00001182 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    1182:	b480      	push	{r7}
    1184:	b083      	sub	sp, #12
    1186:	af00      	add	r7, sp, #0
    1188:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    118a:	687b      	ldr	r3, [r7, #4]
    118c:	695b      	ldr	r3, [r3, #20]
    118e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    1192:	687b      	ldr	r3, [r7, #4]
    1194:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1196:	bf00      	nop
    1198:	370c      	adds	r7, #12
    119a:	46bd      	mov	sp, r7
    119c:	f85d 7b04 	ldr.w	r7, [sp], #4
    11a0:	4770      	bx	lr

000011a2 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    11a2:	b480      	push	{r7}
    11a4:	b083      	sub	sp, #12
    11a6:	af00      	add	r7, sp, #0
    11a8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    11aa:	687b      	ldr	r3, [r7, #4]
    11ac:	695b      	ldr	r3, [r3, #20]
    11ae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    11b2:	687b      	ldr	r3, [r7, #4]
    11b4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    11b6:	bf00      	nop
    11b8:	370c      	adds	r7, #12
    11ba:	46bd      	mov	sp, r7
    11bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    11c0:	4770      	bx	lr

000011c2 <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    11c2:	b480      	push	{r7}
    11c4:	b083      	sub	sp, #12
    11c6:	af00      	add	r7, sp, #0
    11c8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    11ca:	687b      	ldr	r3, [r7, #4]
    11cc:	695b      	ldr	r3, [r3, #20]
    11ce:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    11d2:	687b      	ldr	r3, [r7, #4]
    11d4:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    11d6:	bf00      	nop
    11d8:	370c      	adds	r7, #12
    11da:	46bd      	mov	sp, r7
    11dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    11e0:	4770      	bx	lr

000011e2 <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    11e2:	b480      	push	{r7}
    11e4:	b083      	sub	sp, #12
    11e6:	af00      	add	r7, sp, #0
    11e8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    11ea:	687b      	ldr	r3, [r7, #4]
    11ec:	699b      	ldr	r3, [r3, #24]
    11ee:	f043 0201 	orr.w	r2, r3, #1
    11f2:	687b      	ldr	r3, [r7, #4]
    11f4:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    11f6:	bf00      	nop
    11f8:	370c      	adds	r7, #12
    11fa:	46bd      	mov	sp, r7
    11fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1200:	4770      	bx	lr

00001202 <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    1202:	b480      	push	{r7}
    1204:	b083      	sub	sp, #12
    1206:	af00      	add	r7, sp, #0
    1208:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    120a:	687b      	ldr	r3, [r7, #4]
    120c:	699b      	ldr	r3, [r3, #24]
    120e:	f043 0202 	orr.w	r2, r3, #2
    1212:	687b      	ldr	r3, [r7, #4]
    1214:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1216:	bf00      	nop
    1218:	370c      	adds	r7, #12
    121a:	46bd      	mov	sp, r7
    121c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1220:	4770      	bx	lr

00001222 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    1222:	b480      	push	{r7}
    1224:	b083      	sub	sp, #12
    1226:	af00      	add	r7, sp, #0
    1228:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    122a:	687b      	ldr	r3, [r7, #4]
    122c:	699b      	ldr	r3, [r3, #24]
    122e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    1232:	687b      	ldr	r3, [r7, #4]
    1234:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1236:	bf00      	nop
    1238:	370c      	adds	r7, #12
    123a:	46bd      	mov	sp, r7
    123c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1240:	4770      	bx	lr

00001242 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    1242:	b480      	push	{r7}
    1244:	b083      	sub	sp, #12
    1246:	af00      	add	r7, sp, #0
    1248:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    124a:	687b      	ldr	r3, [r7, #4]
    124c:	699b      	ldr	r3, [r3, #24]
    124e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    1252:	687b      	ldr	r3, [r7, #4]
    1254:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1256:	bf00      	nop
    1258:	370c      	adds	r7, #12
    125a:	46bd      	mov	sp, r7
    125c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1260:	4770      	bx	lr

00001262 <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    1262:	b480      	push	{r7}
    1264:	b083      	sub	sp, #12
    1266:	af00      	add	r7, sp, #0
    1268:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    126a:	687b      	ldr	r3, [r7, #4]
    126c:	699b      	ldr	r3, [r3, #24]
    126e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    1272:	687b      	ldr	r3, [r7, #4]
    1274:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1276:	bf00      	nop
    1278:	370c      	adds	r7, #12
    127a:	46bd      	mov	sp, r7
    127c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1280:	4770      	bx	lr

00001282 <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    1282:	b480      	push	{r7}
    1284:	b083      	sub	sp, #12
    1286:	af00      	add	r7, sp, #0
    1288:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    128a:	687b      	ldr	r3, [r7, #4]
    128c:	699b      	ldr	r3, [r3, #24]
    128e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    1292:	687b      	ldr	r3, [r7, #4]
    1294:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1296:	bf00      	nop
    1298:	370c      	adds	r7, #12
    129a:	46bd      	mov	sp, r7
    129c:	f85d 7b04 	ldr.w	r7, [sp], #4
    12a0:	4770      	bx	lr

000012a2 <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    12a2:	b480      	push	{r7}
    12a4:	b083      	sub	sp, #12
    12a6:	af00      	add	r7, sp, #0
    12a8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	69db      	ldr	r3, [r3, #28]
    12ae:	f043 0220 	orr.w	r2, r3, #32
    12b2:	687b      	ldr	r3, [r7, #4]
    12b4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    12b6:	bf00      	nop
    12b8:	370c      	adds	r7, #12
    12ba:	46bd      	mov	sp, r7
    12bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    12c0:	4770      	bx	lr

000012c2 <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    12c2:	b480      	push	{r7}
    12c4:	b083      	sub	sp, #12
    12c6:	af00      	add	r7, sp, #0
    12c8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    12ca:	687b      	ldr	r3, [r7, #4]
    12cc:	69db      	ldr	r3, [r3, #28]
    12ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    12d2:	687b      	ldr	r3, [r7, #4]
    12d4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    12d6:	bf00      	nop
    12d8:	370c      	adds	r7, #12
    12da:	46bd      	mov	sp, r7
    12dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    12e0:	4770      	bx	lr

000012e2 <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    12e2:	b480      	push	{r7}
    12e4:	b083      	sub	sp, #12
    12e6:	af00      	add	r7, sp, #0
    12e8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    12ea:	687b      	ldr	r3, [r7, #4]
    12ec:	69db      	ldr	r3, [r3, #28]
    12ee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    12f2:	687b      	ldr	r3, [r7, #4]
    12f4:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    12f6:	bf00      	nop
    12f8:	370c      	adds	r7, #12
    12fa:	46bd      	mov	sp, r7
    12fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1300:	4770      	bx	lr

00001302 <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    1302:	b480      	push	{r7}
    1304:	b083      	sub	sp, #12
    1306:	af00      	add	r7, sp, #0
    1308:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    130a:	687b      	ldr	r3, [r7, #4]
    130c:	6a1b      	ldr	r3, [r3, #32]
    130e:	f043 0201 	orr.w	r2, r3, #1
    1312:	687b      	ldr	r3, [r7, #4]
    1314:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1316:	bf00      	nop
    1318:	370c      	adds	r7, #12
    131a:	46bd      	mov	sp, r7
    131c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1320:	4770      	bx	lr

00001322 <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    1322:	b480      	push	{r7}
    1324:	b083      	sub	sp, #12
    1326:	af00      	add	r7, sp, #0
    1328:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    132a:	687b      	ldr	r3, [r7, #4]
    132c:	6a1b      	ldr	r3, [r3, #32]
    132e:	f043 0202 	orr.w	r2, r3, #2
    1332:	687b      	ldr	r3, [r7, #4]
    1334:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1336:	bf00      	nop
    1338:	370c      	adds	r7, #12
    133a:	46bd      	mov	sp, r7
    133c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1340:	4770      	bx	lr

00001342 <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    1342:	b480      	push	{r7}
    1344:	b083      	sub	sp, #12
    1346:	af00      	add	r7, sp, #0
    1348:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    134a:	687b      	ldr	r3, [r7, #4]
    134c:	6a1b      	ldr	r3, [r3, #32]
    134e:	f043 0204 	orr.w	r2, r3, #4
    1352:	687b      	ldr	r3, [r7, #4]
    1354:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1356:	bf00      	nop
    1358:	370c      	adds	r7, #12
    135a:	46bd      	mov	sp, r7
    135c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1360:	4770      	bx	lr

00001362 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    1362:	b480      	push	{r7}
    1364:	b083      	sub	sp, #12
    1366:	af00      	add	r7, sp, #0
    1368:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    136a:	687b      	ldr	r3, [r7, #4]
    136c:	6a1b      	ldr	r3, [r3, #32]
    136e:	f043 0208 	orr.w	r2, r3, #8
    1372:	687b      	ldr	r3, [r7, #4]
    1374:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1376:	bf00      	nop
    1378:	370c      	adds	r7, #12
    137a:	46bd      	mov	sp, r7
    137c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1380:	4770      	bx	lr

00001382 <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    1382:	b480      	push	{r7}
    1384:	b083      	sub	sp, #12
    1386:	af00      	add	r7, sp, #0
    1388:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    138a:	687b      	ldr	r3, [r7, #4]
    138c:	6a1b      	ldr	r3, [r3, #32]
    138e:	f043 0220 	orr.w	r2, r3, #32
    1392:	687b      	ldr	r3, [r7, #4]
    1394:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    1396:	bf00      	nop
    1398:	370c      	adds	r7, #12
    139a:	46bd      	mov	sp, r7
    139c:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a0:	4770      	bx	lr

000013a2 <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    13a2:	b480      	push	{r7}
    13a4:	b083      	sub	sp, #12
    13a6:	af00      	add	r7, sp, #0
    13a8:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    13aa:	687b      	ldr	r3, [r7, #4]
    13ac:	6a1b      	ldr	r3, [r3, #32]
    13ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    13b2:	687b      	ldr	r3, [r7, #4]
    13b4:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    13b6:	bf00      	nop
    13b8:	370c      	adds	r7, #12
    13ba:	46bd      	mov	sp, r7
    13bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c0:	4770      	bx	lr

000013c2 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    13c2:	b480      	push	{r7}
    13c4:	b085      	sub	sp, #20
    13c6:	af00      	add	r7, sp, #0
    13c8:	60f8      	str	r0, [r7, #12]
    13ca:	460b      	mov	r3, r1
    13cc:	607a      	str	r2, [r7, #4]
    13ce:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    13d0:	7afb      	ldrb	r3, [r7, #11]
    13d2:	68fa      	ldr	r2, [r7, #12]
    13d4:	01db      	lsls	r3, r3, #7
    13d6:	4413      	add	r3, r2
    13d8:	3308      	adds	r3, #8
    13da:	687a      	ldr	r2, [r7, #4]
    13dc:	601a      	str	r2, [r3, #0]
}
    13de:	bf00      	nop
    13e0:	3714      	adds	r7, #20
    13e2:	46bd      	mov	sp, r7
    13e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    13e8:	4770      	bx	lr

000013ea <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    13ea:	b480      	push	{r7}
    13ec:	b085      	sub	sp, #20
    13ee:	af00      	add	r7, sp, #0
    13f0:	60f8      	str	r0, [r7, #12]
    13f2:	460b      	mov	r3, r1
    13f4:	607a      	str	r2, [r7, #4]
    13f6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    13f8:	7afb      	ldrb	r3, [r7, #11]
    13fa:	68fa      	ldr	r2, [r7, #12]
    13fc:	01db      	lsls	r3, r3, #7
    13fe:	4413      	add	r3, r2
    1400:	3304      	adds	r3, #4
    1402:	687a      	ldr	r2, [r7, #4]
    1404:	601a      	str	r2, [r3, #0]
}
    1406:	bf00      	nop
    1408:	3714      	adds	r7, #20
    140a:	46bd      	mov	sp, r7
    140c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1410:	4770      	bx	lr

00001412 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1412:	b480      	push	{r7}
    1414:	b085      	sub	sp, #20
    1416:	af00      	add	r7, sp, #0
    1418:	60f8      	str	r0, [r7, #12]
    141a:	460b      	mov	r3, r1
    141c:	607a      	str	r2, [r7, #4]
    141e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1420:	7afb      	ldrb	r3, [r7, #11]
    1422:	68fa      	ldr	r2, [r7, #12]
    1424:	01db      	lsls	r3, r3, #7
    1426:	4413      	add	r3, r2
    1428:	3318      	adds	r3, #24
    142a:	687a      	ldr	r2, [r7, #4]
    142c:	601a      	str	r2, [r3, #0]
}
    142e:	bf00      	nop
    1430:	3714      	adds	r7, #20
    1432:	46bd      	mov	sp, r7
    1434:	f85d 7b04 	ldr.w	r7, [sp], #4
    1438:	4770      	bx	lr

0000143a <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    143a:	b480      	push	{r7}
    143c:	b085      	sub	sp, #20
    143e:	af00      	add	r7, sp, #0
    1440:	60f8      	str	r0, [r7, #12]
    1442:	460b      	mov	r3, r1
    1444:	607a      	str	r2, [r7, #4]
    1446:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1448:	7afb      	ldrb	r3, [r7, #11]
    144a:	68fa      	ldr	r2, [r7, #12]
    144c:	01db      	lsls	r3, r3, #7
    144e:	4413      	add	r3, r2
    1450:	3314      	adds	r3, #20
    1452:	687a      	ldr	r2, [r7, #4]
    1454:	601a      	str	r2, [r3, #0]
}
    1456:	bf00      	nop
    1458:	3714      	adds	r7, #20
    145a:	46bd      	mov	sp, r7
    145c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1460:	4770      	bx	lr

00001462 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    1462:	b480      	push	{r7}
    1464:	b085      	sub	sp, #20
    1466:	af00      	add	r7, sp, #0
    1468:	6078      	str	r0, [r7, #4]
    146a:	4608      	mov	r0, r1
    146c:	4611      	mov	r1, r2
    146e:	461a      	mov	r2, r3
    1470:	4603      	mov	r3, r0
    1472:	70fb      	strb	r3, [r7, #3]
    1474:	460b      	mov	r3, r1
    1476:	70bb      	strb	r3, [r7, #2]
    1478:	4613      	mov	r3, r2
    147a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    147c:	78fa      	ldrb	r2, [r7, #3]
    147e:	78bb      	ldrb	r3, [r7, #2]
    1480:	6879      	ldr	r1, [r7, #4]
    1482:	01d2      	lsls	r2, r2, #7
    1484:	440a      	add	r2, r1
    1486:	4413      	add	r3, r2
    1488:	3330      	adds	r3, #48	; 0x30
    148a:	781b      	ldrb	r3, [r3, #0]
    148c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    148e:	7bfb      	ldrb	r3, [r7, #15]
    1490:	f023 030f 	bic.w	r3, r3, #15
    1494:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    1496:	787b      	ldrb	r3, [r7, #1]
    1498:	f003 030f 	and.w	r3, r3, #15
    149c:	b2da      	uxtb	r2, r3
    149e:	7bfb      	ldrb	r3, [r7, #15]
    14a0:	4313      	orrs	r3, r2
    14a2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    14a4:	78fa      	ldrb	r2, [r7, #3]
    14a6:	78bb      	ldrb	r3, [r7, #2]
    14a8:	6879      	ldr	r1, [r7, #4]
    14aa:	01d2      	lsls	r2, r2, #7
    14ac:	440a      	add	r2, r1
    14ae:	4413      	add	r3, r2
    14b0:	3330      	adds	r3, #48	; 0x30
    14b2:	7bfa      	ldrb	r2, [r7, #15]
    14b4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    14b6:	bf00      	nop
    14b8:	3714      	adds	r7, #20
    14ba:	46bd      	mov	sp, r7
    14bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    14c0:	4770      	bx	lr

000014c2 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    14c2:	b480      	push	{r7}
    14c4:	b085      	sub	sp, #20
    14c6:	af00      	add	r7, sp, #0
    14c8:	6078      	str	r0, [r7, #4]
    14ca:	4608      	mov	r0, r1
    14cc:	4611      	mov	r1, r2
    14ce:	461a      	mov	r2, r3
    14d0:	4603      	mov	r3, r0
    14d2:	70fb      	strb	r3, [r7, #3]
    14d4:	460b      	mov	r3, r1
    14d6:	70bb      	strb	r3, [r7, #2]
    14d8:	4613      	mov	r3, r2
    14da:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    14dc:	78fa      	ldrb	r2, [r7, #3]
    14de:	78bb      	ldrb	r3, [r7, #2]
    14e0:	6879      	ldr	r1, [r7, #4]
    14e2:	01d2      	lsls	r2, r2, #7
    14e4:	440a      	add	r2, r1
    14e6:	4413      	add	r3, r2
    14e8:	3330      	adds	r3, #48	; 0x30
    14ea:	781b      	ldrb	r3, [r3, #0]
    14ec:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    14ee:	7bfb      	ldrb	r3, [r7, #15]
    14f0:	f003 030f 	and.w	r3, r3, #15
    14f4:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    14f6:	787b      	ldrb	r3, [r7, #1]
    14f8:	011b      	lsls	r3, r3, #4
    14fa:	b2da      	uxtb	r2, r3
    14fc:	7bfb      	ldrb	r3, [r7, #15]
    14fe:	4313      	orrs	r3, r2
    1500:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1502:	78fa      	ldrb	r2, [r7, #3]
    1504:	78bb      	ldrb	r3, [r7, #2]
    1506:	6879      	ldr	r1, [r7, #4]
    1508:	01d2      	lsls	r2, r2, #7
    150a:	440a      	add	r2, r1
    150c:	4413      	add	r3, r2
    150e:	3330      	adds	r3, #48	; 0x30
    1510:	7bfa      	ldrb	r2, [r7, #15]
    1512:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1514:	bf00      	nop
    1516:	3714      	adds	r7, #20
    1518:	46bd      	mov	sp, r7
    151a:	f85d 7b04 	ldr.w	r7, [sp], #4
    151e:	4770      	bx	lr

00001520 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    1520:	b480      	push	{r7}
    1522:	b085      	sub	sp, #20
    1524:	af00      	add	r7, sp, #0
    1526:	6078      	str	r0, [r7, #4]
    1528:	4608      	mov	r0, r1
    152a:	4611      	mov	r1, r2
    152c:	461a      	mov	r2, r3
    152e:	4603      	mov	r3, r0
    1530:	70fb      	strb	r3, [r7, #3]
    1532:	460b      	mov	r3, r1
    1534:	70bb      	strb	r3, [r7, #2]
    1536:	4613      	mov	r3, r2
    1538:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    153a:	78fa      	ldrb	r2, [r7, #3]
    153c:	78bb      	ldrb	r3, [r7, #2]
    153e:	6879      	ldr	r1, [r7, #4]
    1540:	01d2      	lsls	r2, r2, #7
    1542:	440a      	add	r2, r1
    1544:	4413      	add	r3, r2
    1546:	3340      	adds	r3, #64	; 0x40
    1548:	781b      	ldrb	r3, [r3, #0]
    154a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    154c:	7bfb      	ldrb	r3, [r7, #15]
    154e:	f023 0301 	bic.w	r3, r3, #1
    1552:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1554:	787a      	ldrb	r2, [r7, #1]
    1556:	7bfb      	ldrb	r3, [r7, #15]
    1558:	4313      	orrs	r3, r2
    155a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    155c:	78fa      	ldrb	r2, [r7, #3]
    155e:	78bb      	ldrb	r3, [r7, #2]
    1560:	6879      	ldr	r1, [r7, #4]
    1562:	01d2      	lsls	r2, r2, #7
    1564:	440a      	add	r2, r1
    1566:	4413      	add	r3, r2
    1568:	3340      	adds	r3, #64	; 0x40
    156a:	7bfa      	ldrb	r2, [r7, #15]
    156c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    156e:	bf00      	nop
    1570:	3714      	adds	r7, #20
    1572:	46bd      	mov	sp, r7
    1574:	f85d 7b04 	ldr.w	r7, [sp], #4
    1578:	4770      	bx	lr

0000157a <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    157a:	b490      	push	{r4, r7}
    157c:	b082      	sub	sp, #8
    157e:	af00      	add	r7, sp, #0
    1580:	6078      	str	r0, [r7, #4]
    1582:	460b      	mov	r3, r1
    1584:	70fb      	strb	r3, [r7, #3]
    1586:	4613      	mov	r3, r2
    1588:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    158a:	78fa      	ldrb	r2, [r7, #3]
    158c:	78bb      	ldrb	r3, [r7, #2]
    158e:	78f8      	ldrb	r0, [r7, #3]
    1590:	78b9      	ldrb	r1, [r7, #2]
    1592:	687c      	ldr	r4, [r7, #4]
    1594:	01c0      	lsls	r0, r0, #7
    1596:	4420      	add	r0, r4
    1598:	4401      	add	r1, r0
    159a:	3140      	adds	r1, #64	; 0x40
    159c:	7809      	ldrb	r1, [r1, #0]
    159e:	b2c9      	uxtb	r1, r1
    15a0:	f041 0104 	orr.w	r1, r1, #4
    15a4:	b2c8      	uxtb	r0, r1
    15a6:	6879      	ldr	r1, [r7, #4]
    15a8:	01d2      	lsls	r2, r2, #7
    15aa:	440a      	add	r2, r1
    15ac:	4413      	add	r3, r2
    15ae:	3340      	adds	r3, #64	; 0x40
    15b0:	4602      	mov	r2, r0
    15b2:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    15b4:	bf00      	nop
    15b6:	3708      	adds	r7, #8
    15b8:	46bd      	mov	sp, r7
    15ba:	bc90      	pop	{r4, r7}
    15bc:	4770      	bx	lr

000015be <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    15be:	b490      	push	{r4, r7}
    15c0:	b082      	sub	sp, #8
    15c2:	af00      	add	r7, sp, #0
    15c4:	6078      	str	r0, [r7, #4]
    15c6:	460b      	mov	r3, r1
    15c8:	70fb      	strb	r3, [r7, #3]
    15ca:	4613      	mov	r3, r2
    15cc:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    15ce:	78fa      	ldrb	r2, [r7, #3]
    15d0:	78bb      	ldrb	r3, [r7, #2]
    15d2:	78f8      	ldrb	r0, [r7, #3]
    15d4:	78b9      	ldrb	r1, [r7, #2]
    15d6:	687c      	ldr	r4, [r7, #4]
    15d8:	01c0      	lsls	r0, r0, #7
    15da:	4420      	add	r0, r4
    15dc:	4401      	add	r1, r0
    15de:	3140      	adds	r1, #64	; 0x40
    15e0:	7809      	ldrb	r1, [r1, #0]
    15e2:	b2c9      	uxtb	r1, r1
    15e4:	f021 0104 	bic.w	r1, r1, #4
    15e8:	b2c8      	uxtb	r0, r1
    15ea:	6879      	ldr	r1, [r7, #4]
    15ec:	01d2      	lsls	r2, r2, #7
    15ee:	440a      	add	r2, r1
    15f0:	4413      	add	r3, r2
    15f2:	3340      	adds	r3, #64	; 0x40
    15f4:	4602      	mov	r2, r0
    15f6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    15f8:	bf00      	nop
    15fa:	3708      	adds	r7, #8
    15fc:	46bd      	mov	sp, r7
    15fe:	bc90      	pop	{r4, r7}
    1600:	4770      	bx	lr

00001602 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    1602:	b480      	push	{r7}
    1604:	b085      	sub	sp, #20
    1606:	af00      	add	r7, sp, #0
    1608:	60f8      	str	r0, [r7, #12]
    160a:	460b      	mov	r3, r1
    160c:	607a      	str	r2, [r7, #4]
    160e:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1610:	7afb      	ldrb	r3, [r7, #11]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	01db      	lsls	r3, r3, #7
    1616:	4413      	add	r3, r2
    1618:	3328      	adds	r3, #40	; 0x28
    161a:	687a      	ldr	r2, [r7, #4]
    161c:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    161e:	bf00      	nop
    1620:	3714      	adds	r7, #20
    1622:	46bd      	mov	sp, r7
    1624:	f85d 7b04 	ldr.w	r7, [sp], #4
    1628:	4770      	bx	lr
	...

0000162c <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    162c:	b580      	push	{r7, lr}
    162e:	b082      	sub	sp, #8
    1630:	af00      	add	r7, sp, #0
    1632:	4603      	mov	r3, r0
    1634:	6039      	str	r1, [r7, #0]
    1636:	71fb      	strb	r3, [r7, #7]
    1638:	4613      	mov	r3, r2
    163a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    163c:	79bb      	ldrb	r3, [r7, #6]
    163e:	2b01      	cmp	r3, #1
    1640:	d01c      	beq.n	167c <_gpio_set_direction+0x50>
    1642:	2b02      	cmp	r3, #2
    1644:	d037      	beq.n	16b6 <_gpio_set_direction+0x8a>
    1646:	2b00      	cmp	r3, #0
    1648:	d14e      	bne.n	16e8 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    164a:	79fb      	ldrb	r3, [r7, #7]
    164c:	683a      	ldr	r2, [r7, #0]
    164e:	4619      	mov	r1, r3
    1650:	482a      	ldr	r0, [pc, #168]	; (16fc <_gpio_set_direction+0xd0>)
    1652:	4b2b      	ldr	r3, [pc, #172]	; (1700 <_gpio_set_direction+0xd4>)
    1654:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1656:	683b      	ldr	r3, [r7, #0]
    1658:	b29b      	uxth	r3, r3
    165a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    165e:	79fb      	ldrb	r3, [r7, #7]
    1660:	4619      	mov	r1, r3
    1662:	4826      	ldr	r0, [pc, #152]	; (16fc <_gpio_set_direction+0xd0>)
    1664:	4b27      	ldr	r3, [pc, #156]	; (1704 <_gpio_set_direction+0xd8>)
    1666:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1668:	683b      	ldr	r3, [r7, #0]
    166a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    166c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1670:	79fb      	ldrb	r3, [r7, #7]
    1672:	4619      	mov	r1, r3
    1674:	4821      	ldr	r0, [pc, #132]	; (16fc <_gpio_set_direction+0xd0>)
    1676:	4b23      	ldr	r3, [pc, #140]	; (1704 <_gpio_set_direction+0xd8>)
    1678:	4798      	blx	r3
		break;
    167a:	e03a      	b.n	16f2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    167c:	79fb      	ldrb	r3, [r7, #7]
    167e:	683a      	ldr	r2, [r7, #0]
    1680:	4619      	mov	r1, r3
    1682:	481e      	ldr	r0, [pc, #120]	; (16fc <_gpio_set_direction+0xd0>)
    1684:	4b1e      	ldr	r3, [pc, #120]	; (1700 <_gpio_set_direction+0xd4>)
    1686:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1688:	683b      	ldr	r3, [r7, #0]
    168a:	b29b      	uxth	r3, r3
    168c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    1690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1694:	79f9      	ldrb	r1, [r7, #7]
    1696:	461a      	mov	r2, r3
    1698:	4818      	ldr	r0, [pc, #96]	; (16fc <_gpio_set_direction+0xd0>)
    169a:	4b1a      	ldr	r3, [pc, #104]	; (1704 <_gpio_set_direction+0xd8>)
    169c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    169e:	683b      	ldr	r3, [r7, #0]
    16a0:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    16a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    16a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    16aa:	79f9      	ldrb	r1, [r7, #7]
    16ac:	461a      	mov	r2, r3
    16ae:	4813      	ldr	r0, [pc, #76]	; (16fc <_gpio_set_direction+0xd0>)
    16b0:	4b14      	ldr	r3, [pc, #80]	; (1704 <_gpio_set_direction+0xd8>)
    16b2:	4798      	blx	r3
		break;
    16b4:	e01d      	b.n	16f2 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    16b6:	79fb      	ldrb	r3, [r7, #7]
    16b8:	683a      	ldr	r2, [r7, #0]
    16ba:	4619      	mov	r1, r3
    16bc:	480f      	ldr	r0, [pc, #60]	; (16fc <_gpio_set_direction+0xd0>)
    16be:	4b12      	ldr	r3, [pc, #72]	; (1708 <_gpio_set_direction+0xdc>)
    16c0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    16c2:	683b      	ldr	r3, [r7, #0]
    16c4:	b29b      	uxth	r3, r3
    16c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    16ca:	79fb      	ldrb	r3, [r7, #7]
    16cc:	4619      	mov	r1, r3
    16ce:	480b      	ldr	r0, [pc, #44]	; (16fc <_gpio_set_direction+0xd0>)
    16d0:	4b0c      	ldr	r3, [pc, #48]	; (1704 <_gpio_set_direction+0xd8>)
    16d2:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    16d4:	683b      	ldr	r3, [r7, #0]
    16d6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    16d8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    16dc:	79fb      	ldrb	r3, [r7, #7]
    16de:	4619      	mov	r1, r3
    16e0:	4806      	ldr	r0, [pc, #24]	; (16fc <_gpio_set_direction+0xd0>)
    16e2:	4b08      	ldr	r3, [pc, #32]	; (1704 <_gpio_set_direction+0xd8>)
    16e4:	4798      	blx	r3
		break;
    16e6:	e004      	b.n	16f2 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    16e8:	2246      	movs	r2, #70	; 0x46
    16ea:	4908      	ldr	r1, [pc, #32]	; (170c <_gpio_set_direction+0xe0>)
    16ec:	2000      	movs	r0, #0
    16ee:	4b08      	ldr	r3, [pc, #32]	; (1710 <_gpio_set_direction+0xe4>)
    16f0:	4798      	blx	r3
	}
}
    16f2:	bf00      	nop
    16f4:	3708      	adds	r7, #8
    16f6:	46bd      	mov	sp, r7
    16f8:	bd80      	pop	{r7, pc}
    16fa:	bf00      	nop
    16fc:	41008000 	.word	0x41008000
    1700:	000013eb 	.word	0x000013eb
    1704:	00001603 	.word	0x00001603
    1708:	000013c3 	.word	0x000013c3
    170c:	000133dc 	.word	0x000133dc
    1710:	00003e05 	.word	0x00003e05

00001714 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    1714:	b580      	push	{r7, lr}
    1716:	b082      	sub	sp, #8
    1718:	af00      	add	r7, sp, #0
    171a:	4603      	mov	r3, r0
    171c:	6039      	str	r1, [r7, #0]
    171e:	71fb      	strb	r3, [r7, #7]
    1720:	4613      	mov	r3, r2
    1722:	71bb      	strb	r3, [r7, #6]
	if (level) {
    1724:	79bb      	ldrb	r3, [r7, #6]
    1726:	2b00      	cmp	r3, #0
    1728:	d006      	beq.n	1738 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    172a:	79fb      	ldrb	r3, [r7, #7]
    172c:	683a      	ldr	r2, [r7, #0]
    172e:	4619      	mov	r1, r3
    1730:	4806      	ldr	r0, [pc, #24]	; (174c <_gpio_set_level+0x38>)
    1732:	4b07      	ldr	r3, [pc, #28]	; (1750 <_gpio_set_level+0x3c>)
    1734:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    1736:	e005      	b.n	1744 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1738:	79fb      	ldrb	r3, [r7, #7]
    173a:	683a      	ldr	r2, [r7, #0]
    173c:	4619      	mov	r1, r3
    173e:	4803      	ldr	r0, [pc, #12]	; (174c <_gpio_set_level+0x38>)
    1740:	4b04      	ldr	r3, [pc, #16]	; (1754 <_gpio_set_level+0x40>)
    1742:	4798      	blx	r3
}
    1744:	bf00      	nop
    1746:	3708      	adds	r7, #8
    1748:	46bd      	mov	sp, r7
    174a:	bd80      	pop	{r7, pc}
    174c:	41008000 	.word	0x41008000
    1750:	00001413 	.word	0x00001413
    1754:	0000143b 	.word	0x0000143b

00001758 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    1758:	b580      	push	{r7, lr}
    175a:	b082      	sub	sp, #8
    175c:	af00      	add	r7, sp, #0
    175e:	4603      	mov	r3, r0
    1760:	71fb      	strb	r3, [r7, #7]
    1762:	460b      	mov	r3, r1
    1764:	71bb      	strb	r3, [r7, #6]
    1766:	4613      	mov	r3, r2
    1768:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    176a:	797b      	ldrb	r3, [r7, #5]
    176c:	2b01      	cmp	r3, #1
    176e:	d00a      	beq.n	1786 <_gpio_set_pin_pull_mode+0x2e>
    1770:	2b02      	cmp	r3, #2
    1772:	d01f      	beq.n	17b4 <_gpio_set_pin_pull_mode+0x5c>
    1774:	2b00      	cmp	r3, #0
    1776:	d134      	bne.n	17e2 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1778:	79ba      	ldrb	r2, [r7, #6]
    177a:	79fb      	ldrb	r3, [r7, #7]
    177c:	4619      	mov	r1, r3
    177e:	481e      	ldr	r0, [pc, #120]	; (17f8 <_gpio_set_pin_pull_mode+0xa0>)
    1780:	4b1e      	ldr	r3, [pc, #120]	; (17fc <_gpio_set_pin_pull_mode+0xa4>)
    1782:	4798      	blx	r3
		break;
    1784:	e033      	b.n	17ee <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1786:	79bb      	ldrb	r3, [r7, #6]
    1788:	2201      	movs	r2, #1
    178a:	409a      	lsls	r2, r3
    178c:	79fb      	ldrb	r3, [r7, #7]
    178e:	4619      	mov	r1, r3
    1790:	4819      	ldr	r0, [pc, #100]	; (17f8 <_gpio_set_pin_pull_mode+0xa0>)
    1792:	4b1b      	ldr	r3, [pc, #108]	; (1800 <_gpio_set_pin_pull_mode+0xa8>)
    1794:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    1796:	79ba      	ldrb	r2, [r7, #6]
    1798:	79fb      	ldrb	r3, [r7, #7]
    179a:	4619      	mov	r1, r3
    179c:	4816      	ldr	r0, [pc, #88]	; (17f8 <_gpio_set_pin_pull_mode+0xa0>)
    179e:	4b19      	ldr	r3, [pc, #100]	; (1804 <_gpio_set_pin_pull_mode+0xac>)
    17a0:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    17a2:	79bb      	ldrb	r3, [r7, #6]
    17a4:	2201      	movs	r2, #1
    17a6:	409a      	lsls	r2, r3
    17a8:	79fb      	ldrb	r3, [r7, #7]
    17aa:	4619      	mov	r1, r3
    17ac:	4812      	ldr	r0, [pc, #72]	; (17f8 <_gpio_set_pin_pull_mode+0xa0>)
    17ae:	4b16      	ldr	r3, [pc, #88]	; (1808 <_gpio_set_pin_pull_mode+0xb0>)
    17b0:	4798      	blx	r3
		break;
    17b2:	e01c      	b.n	17ee <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    17b4:	79bb      	ldrb	r3, [r7, #6]
    17b6:	2201      	movs	r2, #1
    17b8:	409a      	lsls	r2, r3
    17ba:	79fb      	ldrb	r3, [r7, #7]
    17bc:	4619      	mov	r1, r3
    17be:	480e      	ldr	r0, [pc, #56]	; (17f8 <_gpio_set_pin_pull_mode+0xa0>)
    17c0:	4b0f      	ldr	r3, [pc, #60]	; (1800 <_gpio_set_pin_pull_mode+0xa8>)
    17c2:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    17c4:	79ba      	ldrb	r2, [r7, #6]
    17c6:	79fb      	ldrb	r3, [r7, #7]
    17c8:	4619      	mov	r1, r3
    17ca:	480b      	ldr	r0, [pc, #44]	; (17f8 <_gpio_set_pin_pull_mode+0xa0>)
    17cc:	4b0d      	ldr	r3, [pc, #52]	; (1804 <_gpio_set_pin_pull_mode+0xac>)
    17ce:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    17d0:	79bb      	ldrb	r3, [r7, #6]
    17d2:	2201      	movs	r2, #1
    17d4:	409a      	lsls	r2, r3
    17d6:	79fb      	ldrb	r3, [r7, #7]
    17d8:	4619      	mov	r1, r3
    17da:	4807      	ldr	r0, [pc, #28]	; (17f8 <_gpio_set_pin_pull_mode+0xa0>)
    17dc:	4b0b      	ldr	r3, [pc, #44]	; (180c <_gpio_set_pin_pull_mode+0xb4>)
    17de:	4798      	blx	r3
		break;
    17e0:	e005      	b.n	17ee <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    17e2:	2289      	movs	r2, #137	; 0x89
    17e4:	490a      	ldr	r1, [pc, #40]	; (1810 <_gpio_set_pin_pull_mode+0xb8>)
    17e6:	2000      	movs	r0, #0
    17e8:	4b0a      	ldr	r3, [pc, #40]	; (1814 <_gpio_set_pin_pull_mode+0xbc>)
    17ea:	4798      	blx	r3
		break;
    17ec:	bf00      	nop
	}
}
    17ee:	bf00      	nop
    17f0:	3708      	adds	r7, #8
    17f2:	46bd      	mov	sp, r7
    17f4:	bd80      	pop	{r7, pc}
    17f6:	bf00      	nop
    17f8:	41008000 	.word	0x41008000
    17fc:	000015bf 	.word	0x000015bf
    1800:	000013eb 	.word	0x000013eb
    1804:	0000157b 	.word	0x0000157b
    1808:	00001413 	.word	0x00001413
    180c:	0000143b 	.word	0x0000143b
    1810:	000133dc 	.word	0x000133dc
    1814:	00003e05 	.word	0x00003e05

00001818 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1818:	b590      	push	{r4, r7, lr}
    181a:	b085      	sub	sp, #20
    181c:	af00      	add	r7, sp, #0
    181e:	6078      	str	r0, [r7, #4]
    1820:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1822:	687b      	ldr	r3, [r7, #4]
    1824:	095b      	lsrs	r3, r3, #5
    1826:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    1828:	687b      	ldr	r3, [r7, #4]
    182a:	b2db      	uxtb	r3, r3
    182c:	f003 031f 	and.w	r3, r3, #31
    1830:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1832:	683b      	ldr	r3, [r7, #0]
    1834:	f1b3 3fff 	cmp.w	r3, #4294967295
    1838:	d106      	bne.n	1848 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    183a:	7bba      	ldrb	r2, [r7, #14]
    183c:	7bf9      	ldrb	r1, [r7, #15]
    183e:	2300      	movs	r3, #0
    1840:	4812      	ldr	r0, [pc, #72]	; (188c <_gpio_set_pin_function+0x74>)
    1842:	4c13      	ldr	r4, [pc, #76]	; (1890 <_gpio_set_pin_function+0x78>)
    1844:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    1846:	e01d      	b.n	1884 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1848:	7bba      	ldrb	r2, [r7, #14]
    184a:	7bf9      	ldrb	r1, [r7, #15]
    184c:	2301      	movs	r3, #1
    184e:	480f      	ldr	r0, [pc, #60]	; (188c <_gpio_set_pin_function+0x74>)
    1850:	4c0f      	ldr	r4, [pc, #60]	; (1890 <_gpio_set_pin_function+0x78>)
    1852:	47a0      	blx	r4
		if (pin & 1) {
    1854:	7bbb      	ldrb	r3, [r7, #14]
    1856:	f003 0301 	and.w	r3, r3, #1
    185a:	2b00      	cmp	r3, #0
    185c:	d009      	beq.n	1872 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    185e:	7bbb      	ldrb	r3, [r7, #14]
    1860:	085b      	lsrs	r3, r3, #1
    1862:	b2da      	uxtb	r2, r3
    1864:	683b      	ldr	r3, [r7, #0]
    1866:	b2db      	uxtb	r3, r3
    1868:	7bf9      	ldrb	r1, [r7, #15]
    186a:	4808      	ldr	r0, [pc, #32]	; (188c <_gpio_set_pin_function+0x74>)
    186c:	4c09      	ldr	r4, [pc, #36]	; (1894 <_gpio_set_pin_function+0x7c>)
    186e:	47a0      	blx	r4
}
    1870:	e008      	b.n	1884 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    1872:	7bbb      	ldrb	r3, [r7, #14]
    1874:	085b      	lsrs	r3, r3, #1
    1876:	b2da      	uxtb	r2, r3
    1878:	683b      	ldr	r3, [r7, #0]
    187a:	b2db      	uxtb	r3, r3
    187c:	7bf9      	ldrb	r1, [r7, #15]
    187e:	4803      	ldr	r0, [pc, #12]	; (188c <_gpio_set_pin_function+0x74>)
    1880:	4c05      	ldr	r4, [pc, #20]	; (1898 <_gpio_set_pin_function+0x80>)
    1882:	47a0      	blx	r4
}
    1884:	bf00      	nop
    1886:	3714      	adds	r7, #20
    1888:	46bd      	mov	sp, r7
    188a:	bd90      	pop	{r4, r7, pc}
    188c:	41008000 	.word	0x41008000
    1890:	00001521 	.word	0x00001521
    1894:	000014c3 	.word	0x000014c3
    1898:	00001463 	.word	0x00001463

0000189c <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    189c:	b580      	push	{r7, lr}
    189e:	b082      	sub	sp, #8
    18a0:	af00      	add	r7, sp, #0
    18a2:	4603      	mov	r3, r0
    18a4:	460a      	mov	r2, r1
    18a6:	71fb      	strb	r3, [r7, #7]
    18a8:	4613      	mov	r3, r2
    18aa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    18ac:	79fb      	ldrb	r3, [r7, #7]
    18ae:	095b      	lsrs	r3, r3, #5
    18b0:	b2d8      	uxtb	r0, r3
    18b2:	79fb      	ldrb	r3, [r7, #7]
    18b4:	f003 031f 	and.w	r3, r3, #31
    18b8:	b2db      	uxtb	r3, r3
    18ba:	79ba      	ldrb	r2, [r7, #6]
    18bc:	4619      	mov	r1, r3
    18be:	4b03      	ldr	r3, [pc, #12]	; (18cc <gpio_set_pin_pull_mode+0x30>)
    18c0:	4798      	blx	r3
}
    18c2:	bf00      	nop
    18c4:	3708      	adds	r7, #8
    18c6:	46bd      	mov	sp, r7
    18c8:	bd80      	pop	{r7, pc}
    18ca:	bf00      	nop
    18cc:	00001759 	.word	0x00001759

000018d0 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    18d0:	b580      	push	{r7, lr}
    18d2:	b082      	sub	sp, #8
    18d4:	af00      	add	r7, sp, #0
    18d6:	6078      	str	r0, [r7, #4]
    18d8:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    18da:	6839      	ldr	r1, [r7, #0]
    18dc:	6878      	ldr	r0, [r7, #4]
    18de:	4b03      	ldr	r3, [pc, #12]	; (18ec <gpio_set_pin_function+0x1c>)
    18e0:	4798      	blx	r3
}
    18e2:	bf00      	nop
    18e4:	3708      	adds	r7, #8
    18e6:	46bd      	mov	sp, r7
    18e8:	bd80      	pop	{r7, pc}
    18ea:	bf00      	nop
    18ec:	00001819 	.word	0x00001819

000018f0 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    18f0:	b580      	push	{r7, lr}
    18f2:	b082      	sub	sp, #8
    18f4:	af00      	add	r7, sp, #0
    18f6:	4603      	mov	r3, r0
    18f8:	460a      	mov	r2, r1
    18fa:	71fb      	strb	r3, [r7, #7]
    18fc:	4613      	mov	r3, r2
    18fe:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1900:	79fb      	ldrb	r3, [r7, #7]
    1902:	095b      	lsrs	r3, r3, #5
    1904:	b2d8      	uxtb	r0, r3
    1906:	79fb      	ldrb	r3, [r7, #7]
    1908:	f003 031f 	and.w	r3, r3, #31
    190c:	2201      	movs	r2, #1
    190e:	fa02 f303 	lsl.w	r3, r2, r3
    1912:	79ba      	ldrb	r2, [r7, #6]
    1914:	4619      	mov	r1, r3
    1916:	4b03      	ldr	r3, [pc, #12]	; (1924 <gpio_set_pin_direction+0x34>)
    1918:	4798      	blx	r3
}
    191a:	bf00      	nop
    191c:	3708      	adds	r7, #8
    191e:	46bd      	mov	sp, r7
    1920:	bd80      	pop	{r7, pc}
    1922:	bf00      	nop
    1924:	0000162d 	.word	0x0000162d

00001928 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1928:	b580      	push	{r7, lr}
    192a:	b082      	sub	sp, #8
    192c:	af00      	add	r7, sp, #0
    192e:	4603      	mov	r3, r0
    1930:	460a      	mov	r2, r1
    1932:	71fb      	strb	r3, [r7, #7]
    1934:	4613      	mov	r3, r2
    1936:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1938:	79fb      	ldrb	r3, [r7, #7]
    193a:	095b      	lsrs	r3, r3, #5
    193c:	b2d8      	uxtb	r0, r3
    193e:	79fb      	ldrb	r3, [r7, #7]
    1940:	f003 031f 	and.w	r3, r3, #31
    1944:	2201      	movs	r2, #1
    1946:	fa02 f303 	lsl.w	r3, r2, r3
    194a:	79ba      	ldrb	r2, [r7, #6]
    194c:	4619      	mov	r1, r3
    194e:	4b03      	ldr	r3, [pc, #12]	; (195c <gpio_set_pin_level+0x34>)
    1950:	4798      	blx	r3
}
    1952:	bf00      	nop
    1954:	3708      	adds	r7, #8
    1956:	46bd      	mov	sp, r7
    1958:	bd80      	pop	{r7, pc}
    195a:	bf00      	nop
    195c:	00001715 	.word	0x00001715

00001960 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    1960:	b580      	push	{r7, lr}
    1962:	af00      	add	r7, sp, #0
	_init_chip();
    1964:	4b01      	ldr	r3, [pc, #4]	; (196c <init_mcu+0xc>)
    1966:	4798      	blx	r3
}
    1968:	bf00      	nop
    196a:	bd80      	pop	{r7, pc}
    196c:	00004a15 	.word	0x00004a15

00001970 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    1970:	b580      	push	{r7, lr}
    1972:	b082      	sub	sp, #8
    1974:	af00      	add	r7, sp, #0
    1976:	6078      	str	r0, [r7, #4]
    1978:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    197a:	687b      	ldr	r3, [r7, #4]
    197c:	2b00      	cmp	r3, #0
    197e:	d004      	beq.n	198a <wdt_init+0x1a>
    1980:	683b      	ldr	r3, [r7, #0]
    1982:	2b00      	cmp	r3, #0
    1984:	d001      	beq.n	198a <wdt_init+0x1a>
    1986:	2301      	movs	r3, #1
    1988:	e000      	b.n	198c <wdt_init+0x1c>
    198a:	2300      	movs	r3, #0
    198c:	f003 0301 	and.w	r3, r3, #1
    1990:	b2db      	uxtb	r3, r3
    1992:	2248      	movs	r2, #72	; 0x48
    1994:	4907      	ldr	r1, [pc, #28]	; (19b4 <wdt_init+0x44>)
    1996:	4618      	mov	r0, r3
    1998:	4b07      	ldr	r3, [pc, #28]	; (19b8 <wdt_init+0x48>)
    199a:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    199c:	687b      	ldr	r3, [r7, #4]
    199e:	683a      	ldr	r2, [r7, #0]
    19a0:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    19a2:	687b      	ldr	r3, [r7, #4]
    19a4:	4618      	mov	r0, r3
    19a6:	4b05      	ldr	r3, [pc, #20]	; (19bc <wdt_init+0x4c>)
    19a8:	4798      	blx	r3
    19aa:	4603      	mov	r3, r0
}
    19ac:	4618      	mov	r0, r3
    19ae:	3708      	adds	r7, #8
    19b0:	46bd      	mov	sp, r7
    19b2:	bd80      	pop	{r7, pc}
    19b4:	000133f8 	.word	0x000133f8
    19b8:	00003e05 	.word	0x00003e05
    19bc:	0000b409 	.word	0x0000b409

000019c0 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    19c0:	b580      	push	{r7, lr}
    19c2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    19c4:	4804      	ldr	r0, [pc, #16]	; (19d8 <CRC_CALC_init+0x18>)
    19c6:	4b05      	ldr	r3, [pc, #20]	; (19dc <CRC_CALC_init+0x1c>)
    19c8:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    19ca:	4905      	ldr	r1, [pc, #20]	; (19e0 <CRC_CALC_init+0x20>)
    19cc:	4805      	ldr	r0, [pc, #20]	; (19e4 <CRC_CALC_init+0x24>)
    19ce:	4b06      	ldr	r3, [pc, #24]	; (19e8 <CRC_CALC_init+0x28>)
    19d0:	4798      	blx	r3
}
    19d2:	bf00      	nop
    19d4:	bd80      	pop	{r7, pc}
    19d6:	bf00      	nop
    19d8:	40000800 	.word	0x40000800
    19dc:	00001203 	.word	0x00001203
    19e0:	41002000 	.word	0x41002000
    19e4:	20007f98 	.word	0x20007f98
    19e8:	00002749 	.word	0x00002749

000019ec <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    19ec:	b580      	push	{r7, lr}
    19ee:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    19f0:	2244      	movs	r2, #68	; 0x44
    19f2:	2104      	movs	r1, #4
    19f4:	483f      	ldr	r0, [pc, #252]	; (1af4 <EXTERNAL_IRQ_0_init+0x108>)
    19f6:	4b40      	ldr	r3, [pc, #256]	; (1af8 <EXTERNAL_IRQ_0_init+0x10c>)
    19f8:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    19fa:	4840      	ldr	r0, [pc, #256]	; (1afc <EXTERNAL_IRQ_0_init+0x110>)
    19fc:	4b40      	ldr	r3, [pc, #256]	; (1b00 <EXTERNAL_IRQ_0_init+0x114>)
    19fe:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1a00:	2101      	movs	r1, #1
    1a02:	2040      	movs	r0, #64	; 0x40
    1a04:	4b3f      	ldr	r3, [pc, #252]	; (1b04 <EXTERNAL_IRQ_0_init+0x118>)
    1a06:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1a08:	2100      	movs	r1, #0
    1a0a:	2040      	movs	r0, #64	; 0x40
    1a0c:	4b3e      	ldr	r3, [pc, #248]	; (1b08 <EXTERNAL_IRQ_0_init+0x11c>)
    1a0e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1a10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    1a14:	2040      	movs	r0, #64	; 0x40
    1a16:	4b3d      	ldr	r3, [pc, #244]	; (1b0c <EXTERNAL_IRQ_0_init+0x120>)
    1a18:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    1a1a:	2101      	movs	r1, #1
    1a1c:	2021      	movs	r0, #33	; 0x21
    1a1e:	4b39      	ldr	r3, [pc, #228]	; (1b04 <EXTERNAL_IRQ_0_init+0x118>)
    1a20:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    1a22:	2100      	movs	r1, #0
    1a24:	2021      	movs	r0, #33	; 0x21
    1a26:	4b38      	ldr	r3, [pc, #224]	; (1b08 <EXTERNAL_IRQ_0_init+0x11c>)
    1a28:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    1a2a:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    1a2e:	2021      	movs	r0, #33	; 0x21
    1a30:	4b36      	ldr	r3, [pc, #216]	; (1b0c <EXTERNAL_IRQ_0_init+0x120>)
    1a32:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    1a34:	2101      	movs	r1, #1
    1a36:	2003      	movs	r0, #3
    1a38:	4b32      	ldr	r3, [pc, #200]	; (1b04 <EXTERNAL_IRQ_0_init+0x118>)
    1a3a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    1a3c:	2102      	movs	r1, #2
    1a3e:	2003      	movs	r0, #3
    1a40:	4b31      	ldr	r3, [pc, #196]	; (1b08 <EXTERNAL_IRQ_0_init+0x11c>)
    1a42:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    1a44:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    1a48:	2003      	movs	r0, #3
    1a4a:	4b30      	ldr	r3, [pc, #192]	; (1b0c <EXTERNAL_IRQ_0_init+0x120>)
    1a4c:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    1a4e:	2101      	movs	r1, #1
    1a50:	2004      	movs	r0, #4
    1a52:	4b2c      	ldr	r3, [pc, #176]	; (1b04 <EXTERNAL_IRQ_0_init+0x118>)
    1a54:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    1a56:	2102      	movs	r1, #2
    1a58:	2004      	movs	r0, #4
    1a5a:	4b2b      	ldr	r3, [pc, #172]	; (1b08 <EXTERNAL_IRQ_0_init+0x11c>)
    1a5c:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    1a5e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1a62:	2004      	movs	r0, #4
    1a64:	4b29      	ldr	r3, [pc, #164]	; (1b0c <EXTERNAL_IRQ_0_init+0x120>)
    1a66:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    1a68:	2101      	movs	r1, #1
    1a6a:	2005      	movs	r0, #5
    1a6c:	4b25      	ldr	r3, [pc, #148]	; (1b04 <EXTERNAL_IRQ_0_init+0x118>)
    1a6e:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    1a70:	2102      	movs	r1, #2
    1a72:	2005      	movs	r0, #5
    1a74:	4b24      	ldr	r3, [pc, #144]	; (1b08 <EXTERNAL_IRQ_0_init+0x11c>)
    1a76:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    1a78:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1a7c:	2005      	movs	r0, #5
    1a7e:	4b23      	ldr	r3, [pc, #140]	; (1b0c <EXTERNAL_IRQ_0_init+0x120>)
    1a80:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    1a82:	2101      	movs	r1, #1
    1a84:	2056      	movs	r0, #86	; 0x56
    1a86:	4b1f      	ldr	r3, [pc, #124]	; (1b04 <EXTERNAL_IRQ_0_init+0x118>)
    1a88:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    1a8a:	2102      	movs	r1, #2
    1a8c:	2056      	movs	r0, #86	; 0x56
    1a8e:	4b1e      	ldr	r3, [pc, #120]	; (1b08 <EXTERNAL_IRQ_0_init+0x11c>)
    1a90:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    1a92:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    1a96:	2056      	movs	r0, #86	; 0x56
    1a98:	4b1c      	ldr	r3, [pc, #112]	; (1b0c <EXTERNAL_IRQ_0_init+0x120>)
    1a9a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1a9c:	2101      	movs	r1, #1
    1a9e:	2057      	movs	r0, #87	; 0x57
    1aa0:	4b18      	ldr	r3, [pc, #96]	; (1b04 <EXTERNAL_IRQ_0_init+0x118>)
    1aa2:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1aa4:	2102      	movs	r1, #2
    1aa6:	2057      	movs	r0, #87	; 0x57
    1aa8:	4b17      	ldr	r3, [pc, #92]	; (1b08 <EXTERNAL_IRQ_0_init+0x11c>)
    1aaa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1aac:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1ab0:	2057      	movs	r0, #87	; 0x57
    1ab2:	4b16      	ldr	r3, [pc, #88]	; (1b0c <EXTERNAL_IRQ_0_init+0x120>)
    1ab4:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    1ab6:	2101      	movs	r1, #1
    1ab8:	2028      	movs	r0, #40	; 0x28
    1aba:	4b12      	ldr	r3, [pc, #72]	; (1b04 <EXTERNAL_IRQ_0_init+0x118>)
    1abc:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    1abe:	2100      	movs	r1, #0
    1ac0:	2028      	movs	r0, #40	; 0x28
    1ac2:	4b11      	ldr	r3, [pc, #68]	; (1b08 <EXTERNAL_IRQ_0_init+0x11c>)
    1ac4:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    1ac6:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1aca:	2028      	movs	r0, #40	; 0x28
    1acc:	4b0f      	ldr	r3, [pc, #60]	; (1b0c <EXTERNAL_IRQ_0_init+0x120>)
    1ace:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1ad0:	2101      	movs	r1, #1
    1ad2:	2029      	movs	r0, #41	; 0x29
    1ad4:	4b0b      	ldr	r3, [pc, #44]	; (1b04 <EXTERNAL_IRQ_0_init+0x118>)
    1ad6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1ad8:	2100      	movs	r1, #0
    1ada:	2029      	movs	r0, #41	; 0x29
    1adc:	4b0a      	ldr	r3, [pc, #40]	; (1b08 <EXTERNAL_IRQ_0_init+0x11c>)
    1ade:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1ae0:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1ae4:	2029      	movs	r0, #41	; 0x29
    1ae6:	4b09      	ldr	r3, [pc, #36]	; (1b0c <EXTERNAL_IRQ_0_init+0x120>)
    1ae8:	4798      	blx	r3

	ext_irq_init();
    1aea:	4b09      	ldr	r3, [pc, #36]	; (1b10 <EXTERNAL_IRQ_0_init+0x124>)
    1aec:	4798      	blx	r3
}
    1aee:	bf00      	nop
    1af0:	bd80      	pop	{r7, pc}
    1af2:	bf00      	nop
    1af4:	40001c00 	.word	0x40001c00
    1af8:	0000109d 	.word	0x0000109d
    1afc:	40000800 	.word	0x40000800
    1b00:	00001183 	.word	0x00001183
    1b04:	000018f1 	.word	0x000018f1
    1b08:	0000189d 	.word	0x0000189d
    1b0c:	000018d1 	.word	0x000018d1
    1b10:	00002811 	.word	0x00002811

00001b14 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1b14:	b580      	push	{r7, lr}
    1b16:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b18:	2244      	movs	r2, #68	; 0x44
    1b1a:	210b      	movs	r1, #11
    1b1c:	4807      	ldr	r0, [pc, #28]	; (1b3c <EVENT_SYSTEM_0_init+0x28>)
    1b1e:	4b08      	ldr	r3, [pc, #32]	; (1b40 <EVENT_SYSTEM_0_init+0x2c>)
    1b20:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1b22:	2244      	movs	r2, #68	; 0x44
    1b24:	210c      	movs	r1, #12
    1b26:	4805      	ldr	r0, [pc, #20]	; (1b3c <EVENT_SYSTEM_0_init+0x28>)
    1b28:	4b05      	ldr	r3, [pc, #20]	; (1b40 <EVENT_SYSTEM_0_init+0x2c>)
    1b2a:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1b2c:	4805      	ldr	r0, [pc, #20]	; (1b44 <EVENT_SYSTEM_0_init+0x30>)
    1b2e:	4b06      	ldr	r3, [pc, #24]	; (1b48 <EVENT_SYSTEM_0_init+0x34>)
    1b30:	4798      	blx	r3

	event_system_init();
    1b32:	4b06      	ldr	r3, [pc, #24]	; (1b4c <EVENT_SYSTEM_0_init+0x38>)
    1b34:	4798      	blx	r3
}
    1b36:	bf00      	nop
    1b38:	bd80      	pop	{r7, pc}
    1b3a:	bf00      	nop
    1b3c:	40001c00 	.word	0x40001c00
    1b40:	0000109d 	.word	0x0000109d
    1b44:	40000800 	.word	0x40000800
    1b48:	00001223 	.word	0x00001223
    1b4c:	000027fd 	.word	0x000027fd

00001b50 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1b50:	b580      	push	{r7, lr}
    1b52:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    1b54:	2101      	movs	r1, #1
    1b56:	202b      	movs	r0, #43	; 0x2b
    1b58:	4b2b      	ldr	r3, [pc, #172]	; (1c08 <QSPI_N25Q256_PORT_init+0xb8>)
    1b5a:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1b5c:	2100      	movs	r1, #0
    1b5e:	202b      	movs	r0, #43	; 0x2b
    1b60:	4b2a      	ldr	r3, [pc, #168]	; (1c0c <QSPI_N25Q256_PORT_init+0xbc>)
    1b62:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1b64:	492a      	ldr	r1, [pc, #168]	; (1c10 <QSPI_N25Q256_PORT_init+0xc0>)
    1b66:	202b      	movs	r0, #43	; 0x2b
    1b68:	4b2a      	ldr	r3, [pc, #168]	; (1c14 <QSPI_N25Q256_PORT_init+0xc4>)
    1b6a:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1b6c:	2102      	movs	r1, #2
    1b6e:	2008      	movs	r0, #8
    1b70:	4b25      	ldr	r3, [pc, #148]	; (1c08 <QSPI_N25Q256_PORT_init+0xb8>)
    1b72:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1b74:	2100      	movs	r1, #0
    1b76:	2008      	movs	r0, #8
    1b78:	4b27      	ldr	r3, [pc, #156]	; (1c18 <QSPI_N25Q256_PORT_init+0xc8>)
    1b7a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1b7c:	2100      	movs	r1, #0
    1b7e:	2008      	movs	r0, #8
    1b80:	4b22      	ldr	r3, [pc, #136]	; (1c0c <QSPI_N25Q256_PORT_init+0xbc>)
    1b82:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1b84:	4925      	ldr	r1, [pc, #148]	; (1c1c <QSPI_N25Q256_PORT_init+0xcc>)
    1b86:	2008      	movs	r0, #8
    1b88:	4b22      	ldr	r3, [pc, #136]	; (1c14 <QSPI_N25Q256_PORT_init+0xc4>)
    1b8a:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1b8c:	2102      	movs	r1, #2
    1b8e:	2009      	movs	r0, #9
    1b90:	4b1d      	ldr	r3, [pc, #116]	; (1c08 <QSPI_N25Q256_PORT_init+0xb8>)
    1b92:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1b94:	2100      	movs	r1, #0
    1b96:	2009      	movs	r0, #9
    1b98:	4b1f      	ldr	r3, [pc, #124]	; (1c18 <QSPI_N25Q256_PORT_init+0xc8>)
    1b9a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1b9c:	2100      	movs	r1, #0
    1b9e:	2009      	movs	r0, #9
    1ba0:	4b1a      	ldr	r3, [pc, #104]	; (1c0c <QSPI_N25Q256_PORT_init+0xbc>)
    1ba2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1ba4:	491e      	ldr	r1, [pc, #120]	; (1c20 <QSPI_N25Q256_PORT_init+0xd0>)
    1ba6:	2009      	movs	r0, #9
    1ba8:	4b1a      	ldr	r3, [pc, #104]	; (1c14 <QSPI_N25Q256_PORT_init+0xc4>)
    1baa:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1bac:	2102      	movs	r1, #2
    1bae:	200a      	movs	r0, #10
    1bb0:	4b15      	ldr	r3, [pc, #84]	; (1c08 <QSPI_N25Q256_PORT_init+0xb8>)
    1bb2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1bb4:	2100      	movs	r1, #0
    1bb6:	200a      	movs	r0, #10
    1bb8:	4b17      	ldr	r3, [pc, #92]	; (1c18 <QSPI_N25Q256_PORT_init+0xc8>)
    1bba:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1bbc:	2100      	movs	r1, #0
    1bbe:	200a      	movs	r0, #10
    1bc0:	4b12      	ldr	r3, [pc, #72]	; (1c0c <QSPI_N25Q256_PORT_init+0xbc>)
    1bc2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1bc4:	4917      	ldr	r1, [pc, #92]	; (1c24 <QSPI_N25Q256_PORT_init+0xd4>)
    1bc6:	200a      	movs	r0, #10
    1bc8:	4b12      	ldr	r3, [pc, #72]	; (1c14 <QSPI_N25Q256_PORT_init+0xc4>)
    1bca:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1bcc:	2102      	movs	r1, #2
    1bce:	200b      	movs	r0, #11
    1bd0:	4b0d      	ldr	r3, [pc, #52]	; (1c08 <QSPI_N25Q256_PORT_init+0xb8>)
    1bd2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1bd4:	2100      	movs	r1, #0
    1bd6:	200b      	movs	r0, #11
    1bd8:	4b0f      	ldr	r3, [pc, #60]	; (1c18 <QSPI_N25Q256_PORT_init+0xc8>)
    1bda:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1bdc:	2100      	movs	r1, #0
    1bde:	200b      	movs	r0, #11
    1be0:	4b0a      	ldr	r3, [pc, #40]	; (1c0c <QSPI_N25Q256_PORT_init+0xbc>)
    1be2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1be4:	4910      	ldr	r1, [pc, #64]	; (1c28 <QSPI_N25Q256_PORT_init+0xd8>)
    1be6:	200b      	movs	r0, #11
    1be8:	4b0a      	ldr	r3, [pc, #40]	; (1c14 <QSPI_N25Q256_PORT_init+0xc4>)
    1bea:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1bec:	2101      	movs	r1, #1
    1bee:	202a      	movs	r0, #42	; 0x2a
    1bf0:	4b05      	ldr	r3, [pc, #20]	; (1c08 <QSPI_N25Q256_PORT_init+0xb8>)
    1bf2:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1bf4:	2100      	movs	r1, #0
    1bf6:	202a      	movs	r0, #42	; 0x2a
    1bf8:	4b04      	ldr	r3, [pc, #16]	; (1c0c <QSPI_N25Q256_PORT_init+0xbc>)
    1bfa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1bfc:	490b      	ldr	r1, [pc, #44]	; (1c2c <QSPI_N25Q256_PORT_init+0xdc>)
    1bfe:	202a      	movs	r0, #42	; 0x2a
    1c00:	4b04      	ldr	r3, [pc, #16]	; (1c14 <QSPI_N25Q256_PORT_init+0xc4>)
    1c02:	4798      	blx	r3
}
    1c04:	bf00      	nop
    1c06:	bd80      	pop	{r7, pc}
    1c08:	000018f1 	.word	0x000018f1
    1c0c:	0000189d 	.word	0x0000189d
    1c10:	002b0007 	.word	0x002b0007
    1c14:	000018d1 	.word	0x000018d1
    1c18:	00001929 	.word	0x00001929
    1c1c:	00080007 	.word	0x00080007
    1c20:	00090007 	.word	0x00090007
    1c24:	000a0007 	.word	0x000a0007
    1c28:	000b0007 	.word	0x000b0007
    1c2c:	002a0007 	.word	0x002a0007

00001c30 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1c30:	b580      	push	{r7, lr}
    1c32:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1c34:	4805      	ldr	r0, [pc, #20]	; (1c4c <QSPI_N25Q256_CLOCK_init+0x1c>)
    1c36:	4b06      	ldr	r3, [pc, #24]	; (1c50 <QSPI_N25Q256_CLOCK_init+0x20>)
    1c38:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1c3a:	4804      	ldr	r0, [pc, #16]	; (1c4c <QSPI_N25Q256_CLOCK_init+0x1c>)
    1c3c:	4b05      	ldr	r3, [pc, #20]	; (1c54 <QSPI_N25Q256_CLOCK_init+0x24>)
    1c3e:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1c40:	4802      	ldr	r0, [pc, #8]	; (1c4c <QSPI_N25Q256_CLOCK_init+0x1c>)
    1c42:	4b05      	ldr	r3, [pc, #20]	; (1c58 <QSPI_N25Q256_CLOCK_init+0x28>)
    1c44:	4798      	blx	r3
}
    1c46:	bf00      	nop
    1c48:	bd80      	pop	{r7, pc}
    1c4a:	bf00      	nop
    1c4c:	40000800 	.word	0x40000800
    1c50:	000010e3 	.word	0x000010e3
    1c54:	00001123 	.word	0x00001123
    1c58:	000012e3 	.word	0x000012e3

00001c5c <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1c5c:	b580      	push	{r7, lr}
    1c5e:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1c60:	4b04      	ldr	r3, [pc, #16]	; (1c74 <QSPI_N25Q256_init+0x18>)
    1c62:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1c64:	4904      	ldr	r1, [pc, #16]	; (1c78 <QSPI_N25Q256_init+0x1c>)
    1c66:	4805      	ldr	r0, [pc, #20]	; (1c7c <QSPI_N25Q256_init+0x20>)
    1c68:	4b05      	ldr	r3, [pc, #20]	; (1c80 <QSPI_N25Q256_init+0x24>)
    1c6a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1c6c:	4b05      	ldr	r3, [pc, #20]	; (1c84 <QSPI_N25Q256_init+0x28>)
    1c6e:	4798      	blx	r3
}
    1c70:	bf00      	nop
    1c72:	bd80      	pop	{r7, pc}
    1c74:	00001c31 	.word	0x00001c31
    1c78:	42003400 	.word	0x42003400
    1c7c:	20007e4c 	.word	0x20007e4c
    1c80:	00002c61 	.word	0x00002c61
    1c84:	00001b51 	.word	0x00001b51

00001c88 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1c88:	b580      	push	{r7, lr}
    1c8a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1c8c:	4802      	ldr	r0, [pc, #8]	; (1c98 <DATETIME_CLOCK_CLOCK_init+0x10>)
    1c8e:	4b03      	ldr	r3, [pc, #12]	; (1c9c <DATETIME_CLOCK_CLOCK_init+0x14>)
    1c90:	4798      	blx	r3
}
    1c92:	bf00      	nop
    1c94:	bd80      	pop	{r7, pc}
    1c96:	bf00      	nop
    1c98:	40000800 	.word	0x40000800
    1c9c:	00001163 	.word	0x00001163

00001ca0 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1ca0:	b580      	push	{r7, lr}
    1ca2:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1ca4:	4b03      	ldr	r3, [pc, #12]	; (1cb4 <DATETIME_CLOCK_init+0x14>)
    1ca6:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1ca8:	4903      	ldr	r1, [pc, #12]	; (1cb8 <DATETIME_CLOCK_init+0x18>)
    1caa:	4804      	ldr	r0, [pc, #16]	; (1cbc <DATETIME_CLOCK_init+0x1c>)
    1cac:	4b04      	ldr	r3, [pc, #16]	; (1cc0 <DATETIME_CLOCK_init+0x20>)
    1cae:	4798      	blx	r3
}
    1cb0:	bf00      	nop
    1cb2:	bd80      	pop	{r7, pc}
    1cb4:	00001c89 	.word	0x00001c89
    1cb8:	40002400 	.word	0x40002400
    1cbc:	20007f74 	.word	0x20007f74
    1cc0:	000025ed 	.word	0x000025ed

00001cc4 <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    1cc4:	b580      	push	{r7, lr}
    1cc6:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1cc8:	2101      	movs	r1, #1
    1cca:	2010      	movs	r0, #16
    1ccc:	4b07      	ldr	r3, [pc, #28]	; (1cec <I2C_HEATERS_PORT_init+0x28>)
    1cce:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1cd0:	4907      	ldr	r1, [pc, #28]	; (1cf0 <I2C_HEATERS_PORT_init+0x2c>)
    1cd2:	2010      	movs	r0, #16
    1cd4:	4b07      	ldr	r3, [pc, #28]	; (1cf4 <I2C_HEATERS_PORT_init+0x30>)
    1cd6:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1cd8:	2101      	movs	r1, #1
    1cda:	2011      	movs	r0, #17
    1cdc:	4b03      	ldr	r3, [pc, #12]	; (1cec <I2C_HEATERS_PORT_init+0x28>)
    1cde:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1ce0:	4905      	ldr	r1, [pc, #20]	; (1cf8 <I2C_HEATERS_PORT_init+0x34>)
    1ce2:	2011      	movs	r0, #17
    1ce4:	4b03      	ldr	r3, [pc, #12]	; (1cf4 <I2C_HEATERS_PORT_init+0x30>)
    1ce6:	4798      	blx	r3
}
    1ce8:	bf00      	nop
    1cea:	bd80      	pop	{r7, pc}
    1cec:	0000189d 	.word	0x0000189d
    1cf0:	00100002 	.word	0x00100002
    1cf4:	000018d1 	.word	0x000018d1
    1cf8:	00110002 	.word	0x00110002

00001cfc <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    1cfc:	b580      	push	{r7, lr}
    1cfe:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d00:	2242      	movs	r2, #66	; 0x42
    1d02:	2108      	movs	r1, #8
    1d04:	4806      	ldr	r0, [pc, #24]	; (1d20 <I2C_HEATERS_CLOCK_init+0x24>)
    1d06:	4b07      	ldr	r3, [pc, #28]	; (1d24 <I2C_HEATERS_CLOCK_init+0x28>)
    1d08:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d0a:	224a      	movs	r2, #74	; 0x4a
    1d0c:	2103      	movs	r1, #3
    1d0e:	4804      	ldr	r0, [pc, #16]	; (1d20 <I2C_HEATERS_CLOCK_init+0x24>)
    1d10:	4b04      	ldr	r3, [pc, #16]	; (1d24 <I2C_HEATERS_CLOCK_init+0x28>)
    1d12:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1d14:	4804      	ldr	r0, [pc, #16]	; (1d28 <I2C_HEATERS_CLOCK_init+0x2c>)
    1d16:	4b05      	ldr	r3, [pc, #20]	; (1d2c <I2C_HEATERS_CLOCK_init+0x30>)
    1d18:	4798      	blx	r3
}
    1d1a:	bf00      	nop
    1d1c:	bd80      	pop	{r7, pc}
    1d1e:	bf00      	nop
    1d20:	40001c00 	.word	0x40001c00
    1d24:	0000109d 	.word	0x0000109d
    1d28:	40000800 	.word	0x40000800
    1d2c:	000011a3 	.word	0x000011a3

00001d30 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    1d30:	b580      	push	{r7, lr}
    1d32:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    1d34:	4b04      	ldr	r3, [pc, #16]	; (1d48 <I2C_HEATERS_init+0x18>)
    1d36:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    1d38:	4904      	ldr	r1, [pc, #16]	; (1d4c <I2C_HEATERS_init+0x1c>)
    1d3a:	4805      	ldr	r0, [pc, #20]	; (1d50 <I2C_HEATERS_init+0x20>)
    1d3c:	4b05      	ldr	r3, [pc, #20]	; (1d54 <I2C_HEATERS_init+0x24>)
    1d3e:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    1d40:	4b05      	ldr	r3, [pc, #20]	; (1d58 <I2C_HEATERS_init+0x28>)
    1d42:	4798      	blx	r3
}
    1d44:	bf00      	nop
    1d46:	bd80      	pop	{r7, pc}
    1d48:	00001cfd 	.word	0x00001cfd
    1d4c:	40003400 	.word	0x40003400
    1d50:	20007ecc 	.word	0x20007ecc
    1d54:	00002ad9 	.word	0x00002ad9
    1d58:	00001cc5 	.word	0x00001cc5

00001d5c <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1d5c:	b580      	push	{r7, lr}
    1d5e:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1d60:	2100      	movs	r1, #0
    1d62:	203b      	movs	r0, #59	; 0x3b
    1d64:	4b11      	ldr	r3, [pc, #68]	; (1dac <SPI_TEMP_PORT_init+0x50>)
    1d66:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1d68:	2102      	movs	r1, #2
    1d6a:	203b      	movs	r0, #59	; 0x3b
    1d6c:	4b10      	ldr	r3, [pc, #64]	; (1db0 <SPI_TEMP_PORT_init+0x54>)
    1d6e:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1d70:	4910      	ldr	r1, [pc, #64]	; (1db4 <SPI_TEMP_PORT_init+0x58>)
    1d72:	203b      	movs	r0, #59	; 0x3b
    1d74:	4b10      	ldr	r3, [pc, #64]	; (1db8 <SPI_TEMP_PORT_init+0x5c>)
    1d76:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1d78:	2100      	movs	r1, #0
    1d7a:	203a      	movs	r0, #58	; 0x3a
    1d7c:	4b0b      	ldr	r3, [pc, #44]	; (1dac <SPI_TEMP_PORT_init+0x50>)
    1d7e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1d80:	2102      	movs	r1, #2
    1d82:	203a      	movs	r0, #58	; 0x3a
    1d84:	4b0a      	ldr	r3, [pc, #40]	; (1db0 <SPI_TEMP_PORT_init+0x54>)
    1d86:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1d88:	490c      	ldr	r1, [pc, #48]	; (1dbc <SPI_TEMP_PORT_init+0x60>)
    1d8a:	203a      	movs	r0, #58	; 0x3a
    1d8c:	4b0a      	ldr	r3, [pc, #40]	; (1db8 <SPI_TEMP_PORT_init+0x5c>)
    1d8e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1d90:	2101      	movs	r1, #1
    1d92:	203c      	movs	r0, #60	; 0x3c
    1d94:	4b06      	ldr	r3, [pc, #24]	; (1db0 <SPI_TEMP_PORT_init+0x54>)
    1d96:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1d98:	2100      	movs	r1, #0
    1d9a:	203c      	movs	r0, #60	; 0x3c
    1d9c:	4b08      	ldr	r3, [pc, #32]	; (1dc0 <SPI_TEMP_PORT_init+0x64>)
    1d9e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1da0:	4908      	ldr	r1, [pc, #32]	; (1dc4 <SPI_TEMP_PORT_init+0x68>)
    1da2:	203c      	movs	r0, #60	; 0x3c
    1da4:	4b04      	ldr	r3, [pc, #16]	; (1db8 <SPI_TEMP_PORT_init+0x5c>)
    1da6:	4798      	blx	r3
}
    1da8:	bf00      	nop
    1daa:	bd80      	pop	{r7, pc}
    1dac:	00001929 	.word	0x00001929
    1db0:	000018f1 	.word	0x000018f1
    1db4:	003b0003 	.word	0x003b0003
    1db8:	000018d1 	.word	0x000018d1
    1dbc:	003a0003 	.word	0x003a0003
    1dc0:	0000189d 	.word	0x0000189d
    1dc4:	003c0003 	.word	0x003c0003

00001dc8 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1dc8:	b580      	push	{r7, lr}
    1dca:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1dcc:	2245      	movs	r2, #69	; 0x45
    1dce:	2122      	movs	r1, #34	; 0x22
    1dd0:	4806      	ldr	r0, [pc, #24]	; (1dec <SPI_TEMP_CLOCK_init+0x24>)
    1dd2:	4b07      	ldr	r3, [pc, #28]	; (1df0 <SPI_TEMP_CLOCK_init+0x28>)
    1dd4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1dd6:	224a      	movs	r2, #74	; 0x4a
    1dd8:	2103      	movs	r1, #3
    1dda:	4804      	ldr	r0, [pc, #16]	; (1dec <SPI_TEMP_CLOCK_init+0x24>)
    1ddc:	4b04      	ldr	r3, [pc, #16]	; (1df0 <SPI_TEMP_CLOCK_init+0x28>)
    1dde:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1de0:	4804      	ldr	r0, [pc, #16]	; (1df4 <SPI_TEMP_CLOCK_init+0x2c>)
    1de2:	4b05      	ldr	r3, [pc, #20]	; (1df8 <SPI_TEMP_CLOCK_init+0x30>)
    1de4:	4798      	blx	r3
}
    1de6:	bf00      	nop
    1de8:	bd80      	pop	{r7, pc}
    1dea:	bf00      	nop
    1dec:	40001c00 	.word	0x40001c00
    1df0:	0000109d 	.word	0x0000109d
    1df4:	40000800 	.word	0x40000800
    1df8:	00001303 	.word	0x00001303

00001dfc <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1dfc:	b580      	push	{r7, lr}
    1dfe:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1e00:	4b05      	ldr	r3, [pc, #20]	; (1e18 <SPI_TEMP_init+0x1c>)
    1e02:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1e04:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    1e08:	4804      	ldr	r0, [pc, #16]	; (1e1c <SPI_TEMP_init+0x20>)
    1e0a:	4b05      	ldr	r3, [pc, #20]	; (1e20 <SPI_TEMP_init+0x24>)
    1e0c:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    1e0e:	4b05      	ldr	r3, [pc, #20]	; (1e24 <SPI_TEMP_init+0x28>)
    1e10:	4798      	blx	r3
}
    1e12:	bf00      	nop
    1e14:	bd80      	pop	{r7, pc}
    1e16:	bf00      	nop
    1e18:	00001dc9 	.word	0x00001dc9
    1e1c:	20007df4 	.word	0x20007df4
    1e20:	00002d71 	.word	0x00002d71
    1e24:	00001d5d 	.word	0x00001d5d

00001e28 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    1e28:	b580      	push	{r7, lr}
    1e2a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    1e2c:	2100      	movs	r1, #0
    1e2e:	2017      	movs	r0, #23
    1e30:	4b07      	ldr	r3, [pc, #28]	; (1e50 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    1e32:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    1e34:	4907      	ldr	r1, [pc, #28]	; (1e54 <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    1e36:	2017      	movs	r0, #23
    1e38:	4b07      	ldr	r3, [pc, #28]	; (1e58 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    1e3a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    1e3c:	2100      	movs	r1, #0
    1e3e:	2016      	movs	r0, #22
    1e40:	4b03      	ldr	r3, [pc, #12]	; (1e50 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    1e42:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    1e44:	4905      	ldr	r1, [pc, #20]	; (1e5c <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    1e46:	2016      	movs	r0, #22
    1e48:	4b03      	ldr	r3, [pc, #12]	; (1e58 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    1e4a:	4798      	blx	r3
}
    1e4c:	bf00      	nop
    1e4e:	bd80      	pop	{r7, pc}
    1e50:	0000189d 	.word	0x0000189d
    1e54:	00170003 	.word	0x00170003
    1e58:	000018d1 	.word	0x000018d1
    1e5c:	00160003 	.word	0x00160003

00001e60 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    1e60:	b580      	push	{r7, lr}
    1e62:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e64:	2244      	movs	r2, #68	; 0x44
    1e66:	2123      	movs	r1, #35	; 0x23
    1e68:	4806      	ldr	r0, [pc, #24]	; (1e84 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    1e6a:	4b07      	ldr	r3, [pc, #28]	; (1e88 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    1e6c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1e6e:	224a      	movs	r2, #74	; 0x4a
    1e70:	2103      	movs	r1, #3
    1e72:	4804      	ldr	r0, [pc, #16]	; (1e84 <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    1e74:	4b04      	ldr	r3, [pc, #16]	; (1e88 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    1e76:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    1e78:	4804      	ldr	r0, [pc, #16]	; (1e8c <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    1e7a:	4b05      	ldr	r3, [pc, #20]	; (1e90 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    1e7c:	4798      	blx	r3
}
    1e7e:	bf00      	nop
    1e80:	bd80      	pop	{r7, pc}
    1e82:	bf00      	nop
    1e84:	40001c00 	.word	0x40001c00
    1e88:	0000109d 	.word	0x0000109d
    1e8c:	40000800 	.word	0x40000800
    1e90:	00001323 	.word	0x00001323

00001e94 <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    1e94:	b580      	push	{r7, lr}
    1e96:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    1e98:	4b04      	ldr	r3, [pc, #16]	; (1eac <I2C_FLAPPER_VALVE_init+0x18>)
    1e9a:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    1e9c:	4904      	ldr	r1, [pc, #16]	; (1eb0 <I2C_FLAPPER_VALVE_init+0x1c>)
    1e9e:	4805      	ldr	r0, [pc, #20]	; (1eb4 <I2C_FLAPPER_VALVE_init+0x20>)
    1ea0:	4b05      	ldr	r3, [pc, #20]	; (1eb8 <I2C_FLAPPER_VALVE_init+0x24>)
    1ea2:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    1ea4:	4b05      	ldr	r3, [pc, #20]	; (1ebc <I2C_FLAPPER_VALVE_init+0x28>)
    1ea6:	4798      	blx	r3
}
    1ea8:	bf00      	nop
    1eaa:	bd80      	pop	{r7, pc}
    1eac:	00001e61 	.word	0x00001e61
    1eb0:	43000400 	.word	0x43000400
    1eb4:	20007e90 	.word	0x20007e90
    1eb8:	00002ad9 	.word	0x00002ad9
    1ebc:	00001e29 	.word	0x00001e29

00001ec0 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    1ec0:	b580      	push	{r7, lr}
    1ec2:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    1ec4:	2100      	movs	r1, #0
    1ec6:	2044      	movs	r0, #68	; 0x44
    1ec8:	4b11      	ldr	r3, [pc, #68]	; (1f10 <SPI_HI3593_PORT_init+0x50>)
    1eca:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    1ecc:	2102      	movs	r1, #2
    1ece:	2044      	movs	r0, #68	; 0x44
    1ed0:	4b10      	ldr	r3, [pc, #64]	; (1f14 <SPI_HI3593_PORT_init+0x54>)
    1ed2:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    1ed4:	4910      	ldr	r1, [pc, #64]	; (1f18 <SPI_HI3593_PORT_init+0x58>)
    1ed6:	2044      	movs	r0, #68	; 0x44
    1ed8:	4b10      	ldr	r3, [pc, #64]	; (1f1c <SPI_HI3593_PORT_init+0x5c>)
    1eda:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    1edc:	2100      	movs	r1, #0
    1ede:	2045      	movs	r0, #69	; 0x45
    1ee0:	4b0b      	ldr	r3, [pc, #44]	; (1f10 <SPI_HI3593_PORT_init+0x50>)
    1ee2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    1ee4:	2102      	movs	r1, #2
    1ee6:	2045      	movs	r0, #69	; 0x45
    1ee8:	4b0a      	ldr	r3, [pc, #40]	; (1f14 <SPI_HI3593_PORT_init+0x54>)
    1eea:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    1eec:	490c      	ldr	r1, [pc, #48]	; (1f20 <SPI_HI3593_PORT_init+0x60>)
    1eee:	2045      	movs	r0, #69	; 0x45
    1ef0:	4b0a      	ldr	r3, [pc, #40]	; (1f1c <SPI_HI3593_PORT_init+0x5c>)
    1ef2:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    1ef4:	2101      	movs	r1, #1
    1ef6:	2047      	movs	r0, #71	; 0x47
    1ef8:	4b06      	ldr	r3, [pc, #24]	; (1f14 <SPI_HI3593_PORT_init+0x54>)
    1efa:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    1efc:	2100      	movs	r1, #0
    1efe:	2047      	movs	r0, #71	; 0x47
    1f00:	4b08      	ldr	r3, [pc, #32]	; (1f24 <SPI_HI3593_PORT_init+0x64>)
    1f02:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    1f04:	4908      	ldr	r1, [pc, #32]	; (1f28 <SPI_HI3593_PORT_init+0x68>)
    1f06:	2047      	movs	r0, #71	; 0x47
    1f08:	4b04      	ldr	r3, [pc, #16]	; (1f1c <SPI_HI3593_PORT_init+0x5c>)
    1f0a:	4798      	blx	r3
}
    1f0c:	bf00      	nop
    1f0e:	bd80      	pop	{r7, pc}
    1f10:	00001929 	.word	0x00001929
    1f14:	000018f1 	.word	0x000018f1
    1f18:	00440002 	.word	0x00440002
    1f1c:	000018d1 	.word	0x000018d1
    1f20:	00450002 	.word	0x00450002
    1f24:	0000189d 	.word	0x0000189d
    1f28:	00470002 	.word	0x00470002

00001f2c <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    1f2c:	b580      	push	{r7, lr}
    1f2e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f30:	2242      	movs	r2, #66	; 0x42
    1f32:	2124      	movs	r1, #36	; 0x24
    1f34:	4806      	ldr	r0, [pc, #24]	; (1f50 <SPI_HI3593_CLOCK_init+0x24>)
    1f36:	4b07      	ldr	r3, [pc, #28]	; (1f54 <SPI_HI3593_CLOCK_init+0x28>)
    1f38:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f3a:	224a      	movs	r2, #74	; 0x4a
    1f3c:	2103      	movs	r1, #3
    1f3e:	4804      	ldr	r0, [pc, #16]	; (1f50 <SPI_HI3593_CLOCK_init+0x24>)
    1f40:	4b04      	ldr	r3, [pc, #16]	; (1f54 <SPI_HI3593_CLOCK_init+0x28>)
    1f42:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    1f44:	4804      	ldr	r0, [pc, #16]	; (1f58 <SPI_HI3593_CLOCK_init+0x2c>)
    1f46:	4b05      	ldr	r3, [pc, #20]	; (1f5c <SPI_HI3593_CLOCK_init+0x30>)
    1f48:	4798      	blx	r3
}
    1f4a:	bf00      	nop
    1f4c:	bd80      	pop	{r7, pc}
    1f4e:	bf00      	nop
    1f50:	40001c00 	.word	0x40001c00
    1f54:	0000109d 	.word	0x0000109d
    1f58:	40000800 	.word	0x40000800
    1f5c:	00001343 	.word	0x00001343

00001f60 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    1f60:	b580      	push	{r7, lr}
    1f62:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    1f64:	4b04      	ldr	r3, [pc, #16]	; (1f78 <SPI_HI3593_init+0x18>)
    1f66:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    1f68:	4904      	ldr	r1, [pc, #16]	; (1f7c <SPI_HI3593_init+0x1c>)
    1f6a:	4805      	ldr	r0, [pc, #20]	; (1f80 <SPI_HI3593_init+0x20>)
    1f6c:	4b05      	ldr	r3, [pc, #20]	; (1f84 <SPI_HI3593_init+0x24>)
    1f6e:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    1f70:	4b05      	ldr	r3, [pc, #20]	; (1f88 <SPI_HI3593_init+0x28>)
    1f72:	4798      	blx	r3
}
    1f74:	bf00      	nop
    1f76:	bd80      	pop	{r7, pc}
    1f78:	00001f2d 	.word	0x00001f2d
    1f7c:	43000800 	.word	0x43000800
    1f80:	20007ddc 	.word	0x20007ddc
    1f84:	00002d71 	.word	0x00002d71
    1f88:	00001ec1 	.word	0x00001ec1

00001f8c <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    1f8c:	b580      	push	{r7, lr}
    1f8e:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    1f90:	2100      	movs	r1, #0
    1f92:	2068      	movs	r0, #104	; 0x68
    1f94:	4b07      	ldr	r3, [pc, #28]	; (1fb4 <I2C_FANS_PORT_init+0x28>)
    1f96:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    1f98:	4907      	ldr	r1, [pc, #28]	; (1fb8 <I2C_FANS_PORT_init+0x2c>)
    1f9a:	2068      	movs	r0, #104	; 0x68
    1f9c:	4b07      	ldr	r3, [pc, #28]	; (1fbc <I2C_FANS_PORT_init+0x30>)
    1f9e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    1fa0:	2100      	movs	r1, #0
    1fa2:	2069      	movs	r0, #105	; 0x69
    1fa4:	4b03      	ldr	r3, [pc, #12]	; (1fb4 <I2C_FANS_PORT_init+0x28>)
    1fa6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    1fa8:	4905      	ldr	r1, [pc, #20]	; (1fc0 <I2C_FANS_PORT_init+0x34>)
    1faa:	2069      	movs	r0, #105	; 0x69
    1fac:	4b03      	ldr	r3, [pc, #12]	; (1fbc <I2C_FANS_PORT_init+0x30>)
    1fae:	4798      	blx	r3
}
    1fb0:	bf00      	nop
    1fb2:	bd80      	pop	{r7, pc}
    1fb4:	0000189d 	.word	0x0000189d
    1fb8:	00680002 	.word	0x00680002
    1fbc:	000018d1 	.word	0x000018d1
    1fc0:	00690002 	.word	0x00690002

00001fc4 <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    1fc4:	b580      	push	{r7, lr}
    1fc6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1fc8:	2244      	movs	r2, #68	; 0x44
    1fca:	2125      	movs	r1, #37	; 0x25
    1fcc:	4806      	ldr	r0, [pc, #24]	; (1fe8 <I2C_FANS_CLOCK_init+0x24>)
    1fce:	4b07      	ldr	r3, [pc, #28]	; (1fec <I2C_FANS_CLOCK_init+0x28>)
    1fd0:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1fd2:	224a      	movs	r2, #74	; 0x4a
    1fd4:	2103      	movs	r1, #3
    1fd6:	4804      	ldr	r0, [pc, #16]	; (1fe8 <I2C_FANS_CLOCK_init+0x24>)
    1fd8:	4b04      	ldr	r3, [pc, #16]	; (1fec <I2C_FANS_CLOCK_init+0x28>)
    1fda:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    1fdc:	4804      	ldr	r0, [pc, #16]	; (1ff0 <I2C_FANS_CLOCK_init+0x2c>)
    1fde:	4b05      	ldr	r3, [pc, #20]	; (1ff4 <I2C_FANS_CLOCK_init+0x30>)
    1fe0:	4798      	blx	r3
}
    1fe2:	bf00      	nop
    1fe4:	bd80      	pop	{r7, pc}
    1fe6:	bf00      	nop
    1fe8:	40001c00 	.word	0x40001c00
    1fec:	0000109d 	.word	0x0000109d
    1ff0:	40000800 	.word	0x40000800
    1ff4:	00001363 	.word	0x00001363

00001ff8 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    1ff8:	b580      	push	{r7, lr}
    1ffa:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    1ffc:	4b04      	ldr	r3, [pc, #16]	; (2010 <I2C_FANS_init+0x18>)
    1ffe:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    2000:	4904      	ldr	r1, [pc, #16]	; (2014 <I2C_FANS_init+0x1c>)
    2002:	4805      	ldr	r0, [pc, #20]	; (2018 <I2C_FANS_init+0x20>)
    2004:	4b05      	ldr	r3, [pc, #20]	; (201c <I2C_FANS_init+0x24>)
    2006:	4798      	blx	r3
	I2C_FANS_PORT_init();
    2008:	4b05      	ldr	r3, [pc, #20]	; (2020 <I2C_FANS_init+0x28>)
    200a:	4798      	blx	r3
}
    200c:	bf00      	nop
    200e:	bd80      	pop	{r7, pc}
    2010:	00001fc5 	.word	0x00001fc5
    2014:	43000c00 	.word	0x43000c00
    2018:	20007e0c 	.word	0x20007e0c
    201c:	00002ad9 	.word	0x00002ad9
    2020:	00001f8d 	.word	0x00001f8d

00002024 <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    2024:	b580      	push	{r7, lr}
    2026:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    2028:	4808      	ldr	r0, [pc, #32]	; (204c <TIMER_USB_init+0x28>)
    202a:	4b09      	ldr	r3, [pc, #36]	; (2050 <TIMER_USB_init+0x2c>)
    202c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    202e:	2243      	movs	r2, #67	; 0x43
    2030:	2109      	movs	r1, #9
    2032:	4808      	ldr	r0, [pc, #32]	; (2054 <TIMER_USB_init+0x30>)
    2034:	4b08      	ldr	r3, [pc, #32]	; (2058 <TIMER_USB_init+0x34>)
    2036:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    2038:	4b08      	ldr	r3, [pc, #32]	; (205c <TIMER_USB_init+0x38>)
    203a:	4798      	blx	r3
    203c:	4603      	mov	r3, r0
    203e:	461a      	mov	r2, r3
    2040:	4907      	ldr	r1, [pc, #28]	; (2060 <TIMER_USB_init+0x3c>)
    2042:	4808      	ldr	r0, [pc, #32]	; (2064 <TIMER_USB_init+0x40>)
    2044:	4b08      	ldr	r3, [pc, #32]	; (2068 <TIMER_USB_init+0x44>)
    2046:	4798      	blx	r3
}
    2048:	bf00      	nop
    204a:	bd80      	pop	{r7, pc}
    204c:	40000800 	.word	0x40000800
    2050:	000011c3 	.word	0x000011c3
    2054:	40001c00 	.word	0x40001c00
    2058:	0000109d 	.word	0x0000109d
    205c:	000088a1 	.word	0x000088a1
    2060:	40003800 	.word	0x40003800
    2064:	20007f34 	.word	0x20007f34
    2068:	00003001 	.word	0x00003001

0000206c <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    206c:	b580      	push	{r7, lr}
    206e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    2070:	4808      	ldr	r0, [pc, #32]	; (2094 <TIMER_ARINC_init+0x28>)
    2072:	4b09      	ldr	r3, [pc, #36]	; (2098 <TIMER_ARINC_init+0x2c>)
    2074:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2076:	2244      	movs	r2, #68	; 0x44
    2078:	211a      	movs	r1, #26
    207a:	4808      	ldr	r0, [pc, #32]	; (209c <TIMER_ARINC_init+0x30>)
    207c:	4b08      	ldr	r3, [pc, #32]	; (20a0 <TIMER_ARINC_init+0x34>)
    207e:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    2080:	4b08      	ldr	r3, [pc, #32]	; (20a4 <TIMER_ARINC_init+0x38>)
    2082:	4798      	blx	r3
    2084:	4603      	mov	r3, r0
    2086:	461a      	mov	r2, r3
    2088:	4907      	ldr	r1, [pc, #28]	; (20a8 <TIMER_ARINC_init+0x3c>)
    208a:	4808      	ldr	r0, [pc, #32]	; (20ac <TIMER_ARINC_init+0x40>)
    208c:	4b08      	ldr	r3, [pc, #32]	; (20b0 <TIMER_ARINC_init+0x44>)
    208e:	4798      	blx	r3
}
    2090:	bf00      	nop
    2092:	bd80      	pop	{r7, pc}
    2094:	40000800 	.word	0x40000800
    2098:	00001283 	.word	0x00001283
    209c:	40001c00 	.word	0x40001c00
    20a0:	0000109d 	.word	0x0000109d
    20a4:	000088a1 	.word	0x000088a1
    20a8:	4101a000 	.word	0x4101a000
    20ac:	20007f14 	.word	0x20007f14
    20b0:	00003001 	.word	0x00003001

000020b4 <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    20b4:	b580      	push	{r7, lr}
    20b6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    20b8:	4808      	ldr	r0, [pc, #32]	; (20dc <TIMER_MAINTENANCE_init+0x28>)
    20ba:	4b09      	ldr	r3, [pc, #36]	; (20e0 <TIMER_MAINTENANCE_init+0x2c>)
    20bc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    20be:	2246      	movs	r2, #70	; 0x46
    20c0:	211e      	movs	r1, #30
    20c2:	4808      	ldr	r0, [pc, #32]	; (20e4 <TIMER_MAINTENANCE_init+0x30>)
    20c4:	4b08      	ldr	r3, [pc, #32]	; (20e8 <TIMER_MAINTENANCE_init+0x34>)
    20c6:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    20c8:	4b08      	ldr	r3, [pc, #32]	; (20ec <TIMER_MAINTENANCE_init+0x38>)
    20ca:	4798      	blx	r3
    20cc:	4603      	mov	r3, r0
    20ce:	461a      	mov	r2, r3
    20d0:	4907      	ldr	r1, [pc, #28]	; (20f0 <TIMER_MAINTENANCE_init+0x3c>)
    20d2:	4808      	ldr	r0, [pc, #32]	; (20f4 <TIMER_MAINTENANCE_init+0x40>)
    20d4:	4b08      	ldr	r3, [pc, #32]	; (20f8 <TIMER_MAINTENANCE_init+0x44>)
    20d6:	4798      	blx	r3
}
    20d8:	bf00      	nop
    20da:	bd80      	pop	{r7, pc}
    20dc:	40000800 	.word	0x40000800
    20e0:	000012a3 	.word	0x000012a3
    20e4:	40001c00 	.word	0x40001c00
    20e8:	0000109d 	.word	0x0000109d
    20ec:	000088a1 	.word	0x000088a1
    20f0:	42001400 	.word	0x42001400
    20f4:	20007e2c 	.word	0x20007e2c
    20f8:	00003001 	.word	0x00003001

000020fc <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    20fc:	b580      	push	{r7, lr}
    20fe:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    2100:	4808      	ldr	r0, [pc, #32]	; (2124 <TIMER_INTERFACE_init+0x28>)
    2102:	4b09      	ldr	r3, [pc, #36]	; (2128 <TIMER_INTERFACE_init+0x2c>)
    2104:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2106:	2246      	movs	r2, #70	; 0x46
    2108:	211e      	movs	r1, #30
    210a:	4808      	ldr	r0, [pc, #32]	; (212c <TIMER_INTERFACE_init+0x30>)
    210c:	4b08      	ldr	r3, [pc, #32]	; (2130 <TIMER_INTERFACE_init+0x34>)
    210e:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    2110:	4b08      	ldr	r3, [pc, #32]	; (2134 <TIMER_INTERFACE_init+0x38>)
    2112:	4798      	blx	r3
    2114:	4603      	mov	r3, r0
    2116:	461a      	mov	r2, r3
    2118:	4907      	ldr	r1, [pc, #28]	; (2138 <TIMER_INTERFACE_init+0x3c>)
    211a:	4808      	ldr	r0, [pc, #32]	; (213c <TIMER_INTERFACE_init+0x40>)
    211c:	4b08      	ldr	r3, [pc, #32]	; (2140 <TIMER_INTERFACE_init+0x44>)
    211e:	4798      	blx	r3
}
    2120:	bf00      	nop
    2122:	bd80      	pop	{r7, pc}
    2124:	40000800 	.word	0x40000800
    2128:	000012c3 	.word	0x000012c3
    212c:	40001c00 	.word	0x40001c00
    2130:	0000109d 	.word	0x0000109d
    2134:	000088a1 	.word	0x000088a1
    2138:	42001800 	.word	0x42001800
    213c:	20007e70 	.word	0x20007e70
    2140:	00003001 	.word	0x00003001

00002144 <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    2144:	b580      	push	{r7, lr}
    2146:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    2148:	4808      	ldr	r0, [pc, #32]	; (216c <TIMER_EVENT_init+0x28>)
    214a:	4b09      	ldr	r3, [pc, #36]	; (2170 <TIMER_EVENT_init+0x2c>)
    214c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    214e:	2246      	movs	r2, #70	; 0x46
    2150:	2127      	movs	r1, #39	; 0x27
    2152:	4808      	ldr	r0, [pc, #32]	; (2174 <TIMER_EVENT_init+0x30>)
    2154:	4b08      	ldr	r3, [pc, #32]	; (2178 <TIMER_EVENT_init+0x34>)
    2156:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    2158:	4b08      	ldr	r3, [pc, #32]	; (217c <TIMER_EVENT_init+0x38>)
    215a:	4798      	blx	r3
    215c:	4603      	mov	r3, r0
    215e:	461a      	mov	r2, r3
    2160:	4907      	ldr	r1, [pc, #28]	; (2180 <TIMER_EVENT_init+0x3c>)
    2162:	4808      	ldr	r0, [pc, #32]	; (2184 <TIMER_EVENT_init+0x40>)
    2164:	4b08      	ldr	r3, [pc, #32]	; (2188 <TIMER_EVENT_init+0x44>)
    2166:	4798      	blx	r3
}
    2168:	bf00      	nop
    216a:	bd80      	pop	{r7, pc}
    216c:	40000800 	.word	0x40000800
    2170:	00001383 	.word	0x00001383
    2174:	40001c00 	.word	0x40001c00
    2178:	0000109d 	.word	0x0000109d
    217c:	000088a1 	.word	0x000088a1
    2180:	43001400 	.word	0x43001400
    2184:	20007e50 	.word	0x20007e50
    2188:	00003001 	.word	0x00003001

0000218c <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    218c:	b480      	push	{r7}
    218e:	af00      	add	r7, sp, #0
}
    2190:	bf00      	nop
    2192:	46bd      	mov	sp, r7
    2194:	f85d 7b04 	ldr.w	r7, [sp], #4
    2198:	4770      	bx	lr
	...

0000219c <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    219c:	b580      	push	{r7, lr}
    219e:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    21a0:	4804      	ldr	r0, [pc, #16]	; (21b4 <LIVE_PULSE_CLOCK_init+0x18>)
    21a2:	4b05      	ldr	r3, [pc, #20]	; (21b8 <LIVE_PULSE_CLOCK_init+0x1c>)
    21a4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    21a6:	2240      	movs	r2, #64	; 0x40
    21a8:	2127      	movs	r1, #39	; 0x27
    21aa:	4804      	ldr	r0, [pc, #16]	; (21bc <LIVE_PULSE_CLOCK_init+0x20>)
    21ac:	4b04      	ldr	r3, [pc, #16]	; (21c0 <LIVE_PULSE_CLOCK_init+0x24>)
    21ae:	4798      	blx	r3
}
    21b0:	bf00      	nop
    21b2:	bd80      	pop	{r7, pc}
    21b4:	40000800 	.word	0x40000800
    21b8:	000013a3 	.word	0x000013a3
    21bc:	40001c00 	.word	0x40001c00
    21c0:	0000109d 	.word	0x0000109d

000021c4 <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    21c4:	b580      	push	{r7, lr}
    21c6:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    21c8:	4b06      	ldr	r3, [pc, #24]	; (21e4 <LIVE_PULSE_init+0x20>)
    21ca:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    21cc:	4b06      	ldr	r3, [pc, #24]	; (21e8 <LIVE_PULSE_init+0x24>)
    21ce:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    21d0:	4b06      	ldr	r3, [pc, #24]	; (21ec <LIVE_PULSE_init+0x28>)
    21d2:	4798      	blx	r3
    21d4:	4603      	mov	r3, r0
    21d6:	461a      	mov	r2, r3
    21d8:	4905      	ldr	r1, [pc, #20]	; (21f0 <LIVE_PULSE_init+0x2c>)
    21da:	4806      	ldr	r0, [pc, #24]	; (21f4 <LIVE_PULSE_init+0x30>)
    21dc:	4b06      	ldr	r3, [pc, #24]	; (21f8 <LIVE_PULSE_init+0x34>)
    21de:	4798      	blx	r3
}
    21e0:	bf00      	nop
    21e2:	bd80      	pop	{r7, pc}
    21e4:	0000219d 	.word	0x0000219d
    21e8:	0000218d 	.word	0x0000218d
    21ec:	000088b5 	.word	0x000088b5
    21f0:	43001800 	.word	0x43001800
    21f4:	20007eb0 	.word	0x20007eb0
    21f8:	00002bb5 	.word	0x00002bb5

000021fc <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    21fc:	b580      	push	{r7, lr}
    21fe:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    2200:	4804      	ldr	r0, [pc, #16]	; (2214 <TIMER_HVAC_CLOCK_init+0x18>)
    2202:	4b05      	ldr	r3, [pc, #20]	; (2218 <TIMER_HVAC_CLOCK_init+0x1c>)
    2204:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2206:	2244      	movs	r2, #68	; 0x44
    2208:	2119      	movs	r1, #25
    220a:	4804      	ldr	r0, [pc, #16]	; (221c <TIMER_HVAC_CLOCK_init+0x20>)
    220c:	4b04      	ldr	r3, [pc, #16]	; (2220 <TIMER_HVAC_CLOCK_init+0x24>)
    220e:	4798      	blx	r3
}
    2210:	bf00      	nop
    2212:	bd80      	pop	{r7, pc}
    2214:	40000800 	.word	0x40000800
    2218:	00001243 	.word	0x00001243
    221c:	40001c00 	.word	0x40001c00
    2220:	0000109d 	.word	0x0000109d

00002224 <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    2224:	b580      	push	{r7, lr}
    2226:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    2228:	4b05      	ldr	r3, [pc, #20]	; (2240 <TIMER_HVAC_init+0x1c>)
    222a:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    222c:	4b05      	ldr	r3, [pc, #20]	; (2244 <TIMER_HVAC_init+0x20>)
    222e:	4798      	blx	r3
    2230:	4603      	mov	r3, r0
    2232:	461a      	mov	r2, r3
    2234:	4904      	ldr	r1, [pc, #16]	; (2248 <TIMER_HVAC_init+0x24>)
    2236:	4805      	ldr	r0, [pc, #20]	; (224c <TIMER_HVAC_init+0x28>)
    2238:	4b05      	ldr	r3, [pc, #20]	; (2250 <TIMER_HVAC_init+0x2c>)
    223a:	4798      	blx	r3
}
    223c:	bf00      	nop
    223e:	bd80      	pop	{r7, pc}
    2240:	000021fd 	.word	0x000021fd
    2244:	00007ca1 	.word	0x00007ca1
    2248:	41016000 	.word	0x41016000
    224c:	20007f54 	.word	0x20007f54
    2250:	00003001 	.word	0x00003001

00002254 <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    2254:	b580      	push	{r7, lr}
    2256:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    2258:	4804      	ldr	r0, [pc, #16]	; (226c <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    225a:	4b05      	ldr	r3, [pc, #20]	; (2270 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    225c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    225e:	2244      	movs	r2, #68	; 0x44
    2260:	2119      	movs	r1, #25
    2262:	4804      	ldr	r0, [pc, #16]	; (2274 <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    2264:	4b04      	ldr	r3, [pc, #16]	; (2278 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    2266:	4798      	blx	r3
}
    2268:	bf00      	nop
    226a:	bd80      	pop	{r7, pc}
    226c:	40000800 	.word	0x40000800
    2270:	00001263 	.word	0x00001263
    2274:	40001c00 	.word	0x40001c00
    2278:	0000109d 	.word	0x0000109d

0000227c <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    227c:	b580      	push	{r7, lr}
    227e:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    2280:	4b05      	ldr	r3, [pc, #20]	; (2298 <TIMER_TEMPERATURES_init+0x1c>)
    2282:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    2284:	4b05      	ldr	r3, [pc, #20]	; (229c <TIMER_TEMPERATURES_init+0x20>)
    2286:	4798      	blx	r3
    2288:	4603      	mov	r3, r0
    228a:	461a      	mov	r2, r3
    228c:	4904      	ldr	r1, [pc, #16]	; (22a0 <TIMER_TEMPERATURES_init+0x24>)
    228e:	4805      	ldr	r0, [pc, #20]	; (22a4 <TIMER_TEMPERATURES_init+0x28>)
    2290:	4b05      	ldr	r3, [pc, #20]	; (22a8 <TIMER_TEMPERATURES_init+0x2c>)
    2292:	4798      	blx	r3
}
    2294:	bf00      	nop
    2296:	bd80      	pop	{r7, pc}
    2298:	00002255 	.word	0x00002255
    229c:	00007ca1 	.word	0x00007ca1
    22a0:	41018000 	.word	0x41018000
    22a4:	20007dbc 	.word	0x20007dbc
    22a8:	00003001 	.word	0x00003001

000022ac <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    22ac:	b580      	push	{r7, lr}
    22ae:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    22b0:	2102      	movs	r1, #2
    22b2:	2018      	movs	r0, #24
    22b4:	4b0f      	ldr	r3, [pc, #60]	; (22f4 <CDCUSB_PORT_init+0x48>)
    22b6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    22b8:	2100      	movs	r1, #0
    22ba:	2018      	movs	r0, #24
    22bc:	4b0e      	ldr	r3, [pc, #56]	; (22f8 <CDCUSB_PORT_init+0x4c>)
    22be:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    22c0:	2100      	movs	r1, #0
    22c2:	2018      	movs	r0, #24
    22c4:	4b0d      	ldr	r3, [pc, #52]	; (22fc <CDCUSB_PORT_init+0x50>)
    22c6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    22c8:	490d      	ldr	r1, [pc, #52]	; (2300 <CDCUSB_PORT_init+0x54>)
    22ca:	2018      	movs	r0, #24
    22cc:	4b0d      	ldr	r3, [pc, #52]	; (2304 <CDCUSB_PORT_init+0x58>)
    22ce:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    22d0:	2102      	movs	r1, #2
    22d2:	2019      	movs	r0, #25
    22d4:	4b07      	ldr	r3, [pc, #28]	; (22f4 <CDCUSB_PORT_init+0x48>)
    22d6:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    22d8:	2100      	movs	r1, #0
    22da:	2019      	movs	r0, #25
    22dc:	4b06      	ldr	r3, [pc, #24]	; (22f8 <CDCUSB_PORT_init+0x4c>)
    22de:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    22e0:	2100      	movs	r1, #0
    22e2:	2019      	movs	r0, #25
    22e4:	4b05      	ldr	r3, [pc, #20]	; (22fc <CDCUSB_PORT_init+0x50>)
    22e6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    22e8:	4907      	ldr	r1, [pc, #28]	; (2308 <CDCUSB_PORT_init+0x5c>)
    22ea:	2019      	movs	r0, #25
    22ec:	4b05      	ldr	r3, [pc, #20]	; (2304 <CDCUSB_PORT_init+0x58>)
    22ee:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    22f0:	bf00      	nop
    22f2:	bd80      	pop	{r7, pc}
    22f4:	000018f1 	.word	0x000018f1
    22f8:	00001929 	.word	0x00001929
    22fc:	0000189d 	.word	0x0000189d
    2300:	00180007 	.word	0x00180007
    2304:	000018d1 	.word	0x000018d1
    2308:	00190007 	.word	0x00190007

0000230c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    230c:	b580      	push	{r7, lr}
    230e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    2310:	2242      	movs	r2, #66	; 0x42
    2312:	210a      	movs	r1, #10
    2314:	4805      	ldr	r0, [pc, #20]	; (232c <CDCUSB_CLOCK_init+0x20>)
    2316:	4b06      	ldr	r3, [pc, #24]	; (2330 <CDCUSB_CLOCK_init+0x24>)
    2318:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    231a:	4806      	ldr	r0, [pc, #24]	; (2334 <CDCUSB_CLOCK_init+0x28>)
    231c:	4b06      	ldr	r3, [pc, #24]	; (2338 <CDCUSB_CLOCK_init+0x2c>)
    231e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    2320:	4804      	ldr	r0, [pc, #16]	; (2334 <CDCUSB_CLOCK_init+0x28>)
    2322:	4b06      	ldr	r3, [pc, #24]	; (233c <CDCUSB_CLOCK_init+0x30>)
    2324:	4798      	blx	r3
}
    2326:	bf00      	nop
    2328:	bd80      	pop	{r7, pc}
    232a:	bf00      	nop
    232c:	40001c00 	.word	0x40001c00
    2330:	0000109d 	.word	0x0000109d
    2334:	40000800 	.word	0x40000800
    2338:	000010c3 	.word	0x000010c3
    233c:	000011e3 	.word	0x000011e3

00002340 <CDCUSB_init>:

void CDCUSB_init(void)
{
    2340:	b580      	push	{r7, lr}
    2342:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    2344:	4b03      	ldr	r3, [pc, #12]	; (2354 <CDCUSB_init+0x14>)
    2346:	4798      	blx	r3
	usb_d_init();
    2348:	4b03      	ldr	r3, [pc, #12]	; (2358 <CDCUSB_init+0x18>)
    234a:	4798      	blx	r3
	CDCUSB_PORT_init();
    234c:	4b03      	ldr	r3, [pc, #12]	; (235c <CDCUSB_init+0x1c>)
    234e:	4798      	blx	r3
}
    2350:	bf00      	nop
    2352:	bd80      	pop	{r7, pc}
    2354:	0000230d 	.word	0x0000230d
    2358:	0000385d 	.word	0x0000385d
    235c:	000022ad 	.word	0x000022ad

00002360 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    2360:	b580      	push	{r7, lr}
    2362:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    2364:	4802      	ldr	r0, [pc, #8]	; (2370 <WATCHDOG_CLOCK_init+0x10>)
    2366:	4b03      	ldr	r3, [pc, #12]	; (2374 <WATCHDOG_CLOCK_init+0x14>)
    2368:	4798      	blx	r3
}
    236a:	bf00      	nop
    236c:	bd80      	pop	{r7, pc}
    236e:	bf00      	nop
    2370:	40000800 	.word	0x40000800
    2374:	00001143 	.word	0x00001143

00002378 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    2378:	b580      	push	{r7, lr}
    237a:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    237c:	4b03      	ldr	r3, [pc, #12]	; (238c <WATCHDOG_init+0x14>)
    237e:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    2380:	4903      	ldr	r1, [pc, #12]	; (2390 <WATCHDOG_init+0x18>)
    2382:	4804      	ldr	r0, [pc, #16]	; (2394 <WATCHDOG_init+0x1c>)
    2384:	4b04      	ldr	r3, [pc, #16]	; (2398 <WATCHDOG_init+0x20>)
    2386:	4798      	blx	r3
}
    2388:	bf00      	nop
    238a:	bd80      	pop	{r7, pc}
    238c:	00002361 	.word	0x00002361
    2390:	40002000 	.word	0x40002000
    2394:	20007f94 	.word	0x20007f94
    2398:	00001971 	.word	0x00001971

0000239c <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    239c:	b580      	push	{r7, lr}
    239e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    23a0:	4904      	ldr	r1, [pc, #16]	; (23b4 <CAN_CCU_PORT_init+0x18>)
    23a2:	202d      	movs	r0, #45	; 0x2d
    23a4:	4b04      	ldr	r3, [pc, #16]	; (23b8 <CAN_CCU_PORT_init+0x1c>)
    23a6:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    23a8:	4904      	ldr	r1, [pc, #16]	; (23bc <CAN_CCU_PORT_init+0x20>)
    23aa:	202c      	movs	r0, #44	; 0x2c
    23ac:	4b02      	ldr	r3, [pc, #8]	; (23b8 <CAN_CCU_PORT_init+0x1c>)
    23ae:	4798      	blx	r3
}
    23b0:	bf00      	nop
    23b2:	bd80      	pop	{r7, pc}
    23b4:	002d0007 	.word	0x002d0007
    23b8:	000018d1 	.word	0x000018d1
    23bc:	002c0007 	.word	0x002c0007

000023c0 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    23c0:	b580      	push	{r7, lr}
    23c2:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    23c4:	4807      	ldr	r0, [pc, #28]	; (23e4 <CAN_CCU_init+0x24>)
    23c6:	4b08      	ldr	r3, [pc, #32]	; (23e8 <CAN_CCU_init+0x28>)
    23c8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    23ca:	2243      	movs	r2, #67	; 0x43
    23cc:	211c      	movs	r1, #28
    23ce:	4807      	ldr	r0, [pc, #28]	; (23ec <CAN_CCU_init+0x2c>)
    23d0:	4b07      	ldr	r3, [pc, #28]	; (23f0 <CAN_CCU_init+0x30>)
    23d2:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    23d4:	4907      	ldr	r1, [pc, #28]	; (23f4 <CAN_CCU_init+0x34>)
    23d6:	4808      	ldr	r0, [pc, #32]	; (23f8 <CAN_CCU_init+0x38>)
    23d8:	4b08      	ldr	r3, [pc, #32]	; (23fc <CAN_CCU_init+0x3c>)
    23da:	4798      	blx	r3
	CAN_CCU_PORT_init();
    23dc:	4b08      	ldr	r3, [pc, #32]	; (2400 <CAN_CCU_init+0x40>)
    23de:	4798      	blx	r3
}
    23e0:	bf00      	nop
    23e2:	bd80      	pop	{r7, pc}
    23e4:	40000800 	.word	0x40000800
    23e8:	00001103 	.word	0x00001103
    23ec:	40001c00 	.word	0x40001c00
    23f0:	0000109d 	.word	0x0000109d
    23f4:	42000400 	.word	0x42000400
    23f8:	20007eec 	.word	0x20007eec
    23fc:	0000265d 	.word	0x0000265d
    2400:	0000239d 	.word	0x0000239d

00002404 <system_init>:

void system_init(void)
{
    2404:	b580      	push	{r7, lr}
    2406:	af00      	add	r7, sp, #0
	init_mcu();
    2408:	4b5e      	ldr	r3, [pc, #376]	; (2584 <system_init+0x180>)
    240a:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    240c:	2100      	movs	r1, #0
    240e:	2007      	movs	r0, #7
    2410:	4b5d      	ldr	r3, [pc, #372]	; (2588 <system_init+0x184>)
    2412:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    2414:	2102      	movs	r1, #2
    2416:	2007      	movs	r0, #7
    2418:	4b5c      	ldr	r3, [pc, #368]	; (258c <system_init+0x188>)
    241a:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    241c:	f04f 31ff 	mov.w	r1, #4294967295
    2420:	2007      	movs	r0, #7
    2422:	4b5b      	ldr	r3, [pc, #364]	; (2590 <system_init+0x18c>)
    2424:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    2426:	2101      	movs	r1, #1
    2428:	200f      	movs	r0, #15
    242a:	4b57      	ldr	r3, [pc, #348]	; (2588 <system_init+0x184>)
    242c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    242e:	2102      	movs	r1, #2
    2430:	200f      	movs	r0, #15
    2432:	4b56      	ldr	r3, [pc, #344]	; (258c <system_init+0x188>)
    2434:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    2436:	f04f 31ff 	mov.w	r1, #4294967295
    243a:	200f      	movs	r0, #15
    243c:	4b54      	ldr	r3, [pc, #336]	; (2590 <system_init+0x18c>)
    243e:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    2440:	2101      	movs	r1, #1
    2442:	2013      	movs	r0, #19
    2444:	4b50      	ldr	r3, [pc, #320]	; (2588 <system_init+0x184>)
    2446:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    2448:	2102      	movs	r1, #2
    244a:	2013      	movs	r0, #19
    244c:	4b4f      	ldr	r3, [pc, #316]	; (258c <system_init+0x188>)
    244e:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    2450:	f04f 31ff 	mov.w	r1, #4294967295
    2454:	2013      	movs	r0, #19
    2456:	4b4e      	ldr	r3, [pc, #312]	; (2590 <system_init+0x18c>)
    2458:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    245a:	2101      	movs	r1, #1
    245c:	201b      	movs	r0, #27
    245e:	4b4a      	ldr	r3, [pc, #296]	; (2588 <system_init+0x184>)
    2460:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    2462:	2102      	movs	r1, #2
    2464:	201b      	movs	r0, #27
    2466:	4b49      	ldr	r3, [pc, #292]	; (258c <system_init+0x188>)
    2468:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    246a:	f04f 31ff 	mov.w	r1, #4294967295
    246e:	201b      	movs	r0, #27
    2470:	4b47      	ldr	r3, [pc, #284]	; (2590 <system_init+0x18c>)
    2472:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    2474:	2101      	movs	r1, #1
    2476:	2027      	movs	r0, #39	; 0x27
    2478:	4b43      	ldr	r3, [pc, #268]	; (2588 <system_init+0x184>)
    247a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    247c:	2102      	movs	r1, #2
    247e:	2027      	movs	r0, #39	; 0x27
    2480:	4b42      	ldr	r3, [pc, #264]	; (258c <system_init+0x188>)
    2482:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    2484:	f04f 31ff 	mov.w	r1, #4294967295
    2488:	2027      	movs	r0, #39	; 0x27
    248a:	4b41      	ldr	r3, [pc, #260]	; (2590 <system_init+0x18c>)
    248c:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    248e:	2101      	movs	r1, #1
    2490:	203d      	movs	r0, #61	; 0x3d
    2492:	4b3d      	ldr	r3, [pc, #244]	; (2588 <system_init+0x184>)
    2494:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    2496:	2102      	movs	r1, #2
    2498:	203d      	movs	r0, #61	; 0x3d
    249a:	4b3c      	ldr	r3, [pc, #240]	; (258c <system_init+0x188>)
    249c:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    249e:	f04f 31ff 	mov.w	r1, #4294967295
    24a2:	203d      	movs	r0, #61	; 0x3d
    24a4:	4b3a      	ldr	r3, [pc, #232]	; (2590 <system_init+0x18c>)
    24a6:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    24a8:	2101      	movs	r1, #1
    24aa:	203f      	movs	r0, #63	; 0x3f
    24ac:	4b37      	ldr	r3, [pc, #220]	; (258c <system_init+0x188>)
    24ae:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    24b0:	2101      	movs	r1, #1
    24b2:	203f      	movs	r0, #63	; 0x3f
    24b4:	4b37      	ldr	r3, [pc, #220]	; (2594 <system_init+0x190>)
    24b6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    24b8:	f04f 31ff 	mov.w	r1, #4294967295
    24bc:	203f      	movs	r0, #63	; 0x3f
    24be:	4b34      	ldr	r3, [pc, #208]	; (2590 <system_init+0x18c>)
    24c0:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    24c2:	2100      	movs	r1, #0
    24c4:	204d      	movs	r0, #77	; 0x4d
    24c6:	4b30      	ldr	r3, [pc, #192]	; (2588 <system_init+0x184>)
    24c8:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    24ca:	2102      	movs	r1, #2
    24cc:	204d      	movs	r0, #77	; 0x4d
    24ce:	4b2f      	ldr	r3, [pc, #188]	; (258c <system_init+0x188>)
    24d0:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    24d2:	f04f 31ff 	mov.w	r1, #4294967295
    24d6:	204d      	movs	r0, #77	; 0x4d
    24d8:	4b2d      	ldr	r3, [pc, #180]	; (2590 <system_init+0x18c>)
    24da:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    24dc:	2101      	movs	r1, #1
    24de:	204e      	movs	r0, #78	; 0x4e
    24e0:	4b29      	ldr	r3, [pc, #164]	; (2588 <system_init+0x184>)
    24e2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    24e4:	2102      	movs	r1, #2
    24e6:	204e      	movs	r0, #78	; 0x4e
    24e8:	4b28      	ldr	r3, [pc, #160]	; (258c <system_init+0x188>)
    24ea:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    24ec:	f04f 31ff 	mov.w	r1, #4294967295
    24f0:	204e      	movs	r0, #78	; 0x4e
    24f2:	4b27      	ldr	r3, [pc, #156]	; (2590 <system_init+0x18c>)
    24f4:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    24f6:	2100      	movs	r1, #0
    24f8:	204f      	movs	r0, #79	; 0x4f
    24fa:	4b23      	ldr	r3, [pc, #140]	; (2588 <system_init+0x184>)
    24fc:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    24fe:	2102      	movs	r1, #2
    2500:	204f      	movs	r0, #79	; 0x4f
    2502:	4b22      	ldr	r3, [pc, #136]	; (258c <system_init+0x188>)
    2504:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    2506:	f04f 31ff 	mov.w	r1, #4294967295
    250a:	204f      	movs	r0, #79	; 0x4f
    250c:	4b20      	ldr	r3, [pc, #128]	; (2590 <system_init+0x18c>)
    250e:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    2510:	2100      	movs	r1, #0
    2512:	2052      	movs	r0, #82	; 0x52
    2514:	4b1c      	ldr	r3, [pc, #112]	; (2588 <system_init+0x184>)
    2516:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    2518:	2102      	movs	r1, #2
    251a:	2052      	movs	r0, #82	; 0x52
    251c:	4b1b      	ldr	r3, [pc, #108]	; (258c <system_init+0x188>)
    251e:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    2520:	f04f 31ff 	mov.w	r1, #4294967295
    2524:	2052      	movs	r0, #82	; 0x52
    2526:	4b1a      	ldr	r3, [pc, #104]	; (2590 <system_init+0x18c>)
    2528:	4798      	blx	r3

	CRC_CALC_init();
    252a:	4b1b      	ldr	r3, [pc, #108]	; (2598 <system_init+0x194>)
    252c:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    252e:	4b1b      	ldr	r3, [pc, #108]	; (259c <system_init+0x198>)
    2530:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    2532:	4b1b      	ldr	r3, [pc, #108]	; (25a0 <system_init+0x19c>)
    2534:	4798      	blx	r3

	QSPI_N25Q256_init();
    2536:	4b1b      	ldr	r3, [pc, #108]	; (25a4 <system_init+0x1a0>)
    2538:	4798      	blx	r3

	DATETIME_CLOCK_init();
    253a:	4b1b      	ldr	r3, [pc, #108]	; (25a8 <system_init+0x1a4>)
    253c:	4798      	blx	r3

	I2C_HEATERS_init();
    253e:	4b1b      	ldr	r3, [pc, #108]	; (25ac <system_init+0x1a8>)
    2540:	4798      	blx	r3

	SPI_TEMP_init();
    2542:	4b1b      	ldr	r3, [pc, #108]	; (25b0 <system_init+0x1ac>)
    2544:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    2546:	4b1b      	ldr	r3, [pc, #108]	; (25b4 <system_init+0x1b0>)
    2548:	4798      	blx	r3

	SPI_HI3593_init();
    254a:	4b1b      	ldr	r3, [pc, #108]	; (25b8 <system_init+0x1b4>)
    254c:	4798      	blx	r3

	I2C_FANS_init();
    254e:	4b1b      	ldr	r3, [pc, #108]	; (25bc <system_init+0x1b8>)
    2550:	4798      	blx	r3

	TIMER_USB_init();
    2552:	4b1b      	ldr	r3, [pc, #108]	; (25c0 <system_init+0x1bc>)
    2554:	4798      	blx	r3
	TIMER_ARINC_init();
    2556:	4b1b      	ldr	r3, [pc, #108]	; (25c4 <system_init+0x1c0>)
    2558:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    255a:	4b1b      	ldr	r3, [pc, #108]	; (25c8 <system_init+0x1c4>)
    255c:	4798      	blx	r3
	TIMER_INTERFACE_init();
    255e:	4b1b      	ldr	r3, [pc, #108]	; (25cc <system_init+0x1c8>)
    2560:	4798      	blx	r3
	TIMER_EVENT_init();
    2562:	4b1b      	ldr	r3, [pc, #108]	; (25d0 <system_init+0x1cc>)
    2564:	4798      	blx	r3
	LIVE_PULSE_init();
    2566:	4b1b      	ldr	r3, [pc, #108]	; (25d4 <system_init+0x1d0>)
    2568:	4798      	blx	r3

	TIMER_HVAC_init();
    256a:	4b1b      	ldr	r3, [pc, #108]	; (25d8 <system_init+0x1d4>)
    256c:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    256e:	4b1b      	ldr	r3, [pc, #108]	; (25dc <system_init+0x1d8>)
    2570:	4798      	blx	r3

	CDCUSB_init();
    2572:	4b1b      	ldr	r3, [pc, #108]	; (25e0 <system_init+0x1dc>)
    2574:	4798      	blx	r3

	WATCHDOG_init();
    2576:	4b1b      	ldr	r3, [pc, #108]	; (25e4 <system_init+0x1e0>)
    2578:	4798      	blx	r3
	CAN_CCU_init();
    257a:	4b1b      	ldr	r3, [pc, #108]	; (25e8 <system_init+0x1e4>)
    257c:	4798      	blx	r3
}
    257e:	bf00      	nop
    2580:	bd80      	pop	{r7, pc}
    2582:	bf00      	nop
    2584:	00001961 	.word	0x00001961
    2588:	00001929 	.word	0x00001929
    258c:	000018f1 	.word	0x000018f1
    2590:	000018d1 	.word	0x000018d1
    2594:	0000189d 	.word	0x0000189d
    2598:	000019c1 	.word	0x000019c1
    259c:	000019ed 	.word	0x000019ed
    25a0:	00001b15 	.word	0x00001b15
    25a4:	00001c5d 	.word	0x00001c5d
    25a8:	00001ca1 	.word	0x00001ca1
    25ac:	00001d31 	.word	0x00001d31
    25b0:	00001dfd 	.word	0x00001dfd
    25b4:	00001e95 	.word	0x00001e95
    25b8:	00001f61 	.word	0x00001f61
    25bc:	00001ff9 	.word	0x00001ff9
    25c0:	00002025 	.word	0x00002025
    25c4:	0000206d 	.word	0x0000206d
    25c8:	000020b5 	.word	0x000020b5
    25cc:	000020fd 	.word	0x000020fd
    25d0:	00002145 	.word	0x00002145
    25d4:	000021c5 	.word	0x000021c5
    25d8:	00002225 	.word	0x00002225
    25dc:	0000227d 	.word	0x0000227d
    25e0:	00002341 	.word	0x00002341
    25e4:	00002379 	.word	0x00002379
    25e8:	000023c1 	.word	0x000023c1

000025ec <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    25ec:	b580      	push	{r7, lr}
    25ee:	b084      	sub	sp, #16
    25f0:	af00      	add	r7, sp, #0
    25f2:	6078      	str	r0, [r7, #4]
    25f4:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    25f6:	2300      	movs	r3, #0
    25f8:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    25fa:	687b      	ldr	r3, [r7, #4]
    25fc:	2b00      	cmp	r3, #0
    25fe:	bf14      	ite	ne
    2600:	2301      	movne	r3, #1
    2602:	2300      	moveq	r3, #0
    2604:	b2db      	uxtb	r3, r3
    2606:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    260a:	4911      	ldr	r1, [pc, #68]	; (2650 <calendar_init+0x64>)
    260c:	4618      	mov	r0, r3
    260e:	4b11      	ldr	r3, [pc, #68]	; (2654 <calendar_init+0x68>)
    2610:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    2612:	687b      	ldr	r3, [r7, #4]
    2614:	681a      	ldr	r2, [r3, #0]
    2616:	683b      	ldr	r3, [r7, #0]
    2618:	429a      	cmp	r2, r3
    261a:	d101      	bne.n	2620 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    261c:	2300      	movs	r3, #0
    261e:	e013      	b.n	2648 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    2620:	687b      	ldr	r3, [r7, #4]
    2622:	681b      	ldr	r3, [r3, #0]
    2624:	2b00      	cmp	r3, #0
    2626:	d002      	beq.n	262e <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    2628:	f06f 0311 	mvn.w	r3, #17
    262c:	e00c      	b.n	2648 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    262e:	687b      	ldr	r3, [r7, #4]
    2630:	683a      	ldr	r2, [r7, #0]
    2632:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    2634:	687b      	ldr	r3, [r7, #4]
    2636:	4618      	mov	r0, r3
    2638:	4b07      	ldr	r3, [pc, #28]	; (2658 <calendar_init+0x6c>)
    263a:	4798      	blx	r3
    263c:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    263e:	687b      	ldr	r3, [r7, #4]
    2640:	f240 72b2 	movw	r2, #1970	; 0x7b2
    2644:	619a      	str	r2, [r3, #24]

	return ret;
    2646:	68fb      	ldr	r3, [r7, #12]
}
    2648:	4618      	mov	r0, r3
    264a:	3710      	adds	r7, #16
    264c:	46bd      	mov	sp, r7
    264e:	bd80      	pop	{r7, pc}
    2650:	00013414 	.word	0x00013414
    2654:	00003e05 	.word	0x00003e05
    2658:	000061b1 	.word	0x000061b1

0000265c <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    265c:	b580      	push	{r7, lr}
    265e:	b084      	sub	sp, #16
    2660:	af00      	add	r7, sp, #0
    2662:	6078      	str	r0, [r7, #4]
    2664:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    2666:	687b      	ldr	r3, [r7, #4]
    2668:	2b00      	cmp	r3, #0
    266a:	d004      	beq.n	2676 <can_async_init+0x1a>
    266c:	683b      	ldr	r3, [r7, #0]
    266e:	2b00      	cmp	r3, #0
    2670:	d001      	beq.n	2676 <can_async_init+0x1a>
    2672:	2301      	movs	r3, #1
    2674:	e000      	b.n	2678 <can_async_init+0x1c>
    2676:	2300      	movs	r3, #0
    2678:	f003 0301 	and.w	r3, r3, #1
    267c:	b2db      	uxtb	r3, r3
    267e:	2241      	movs	r2, #65	; 0x41
    2680:	490e      	ldr	r1, [pc, #56]	; (26bc <can_async_init+0x60>)
    2682:	4618      	mov	r0, r3
    2684:	4b0e      	ldr	r3, [pc, #56]	; (26c0 <can_async_init+0x64>)
    2686:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    2688:	687b      	ldr	r3, [r7, #4]
    268a:	6839      	ldr	r1, [r7, #0]
    268c:	4618      	mov	r0, r3
    268e:	4b0d      	ldr	r3, [pc, #52]	; (26c4 <can_async_init+0x68>)
    2690:	4798      	blx	r3
    2692:	60f8      	str	r0, [r7, #12]
	if (rc) {
    2694:	68fb      	ldr	r3, [r7, #12]
    2696:	2b00      	cmp	r3, #0
    2698:	d001      	beq.n	269e <can_async_init+0x42>
		return rc;
    269a:	68fb      	ldr	r3, [r7, #12]
    269c:	e009      	b.n	26b2 <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    269e:	687b      	ldr	r3, [r7, #4]
    26a0:	4a09      	ldr	r2, [pc, #36]	; (26c8 <can_async_init+0x6c>)
    26a2:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    26a4:	687b      	ldr	r3, [r7, #4]
    26a6:	4a09      	ldr	r2, [pc, #36]	; (26cc <can_async_init+0x70>)
    26a8:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    26aa:	687b      	ldr	r3, [r7, #4]
    26ac:	4a08      	ldr	r2, [pc, #32]	; (26d0 <can_async_init+0x74>)
    26ae:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    26b0:	2300      	movs	r3, #0
}
    26b2:	4618      	mov	r0, r3
    26b4:	3710      	adds	r7, #16
    26b6:	46bd      	mov	sp, r7
    26b8:	bd80      	pop	{r7, pc}
    26ba:	bf00      	nop
    26bc:	00013430 	.word	0x00013430
    26c0:	00003e05 	.word	0x00003e05
    26c4:	00004361 	.word	0x00004361
    26c8:	000026d5 	.word	0x000026d5
    26cc:	000026f9 	.word	0x000026f9
    26d0:	0000271d 	.word	0x0000271d

000026d4 <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    26d4:	b580      	push	{r7, lr}
    26d6:	b084      	sub	sp, #16
    26d8:	af00      	add	r7, sp, #0
    26da:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    26dc:	687b      	ldr	r3, [r7, #4]
    26de:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    26e0:	68fb      	ldr	r3, [r7, #12]
    26e2:	69db      	ldr	r3, [r3, #28]
    26e4:	2b00      	cmp	r3, #0
    26e6:	d003      	beq.n	26f0 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    26e8:	68fb      	ldr	r3, [r7, #12]
    26ea:	69db      	ldr	r3, [r3, #28]
    26ec:	68f8      	ldr	r0, [r7, #12]
    26ee:	4798      	blx	r3
	}
}
    26f0:	bf00      	nop
    26f2:	3710      	adds	r7, #16
    26f4:	46bd      	mov	sp, r7
    26f6:	bd80      	pop	{r7, pc}

000026f8 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    26f8:	b580      	push	{r7, lr}
    26fa:	b084      	sub	sp, #16
    26fc:	af00      	add	r7, sp, #0
    26fe:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    2704:	68fb      	ldr	r3, [r7, #12]
    2706:	6a1b      	ldr	r3, [r3, #32]
    2708:	2b00      	cmp	r3, #0
    270a:	d003      	beq.n	2714 <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    270c:	68fb      	ldr	r3, [r7, #12]
    270e:	6a1b      	ldr	r3, [r3, #32]
    2710:	68f8      	ldr	r0, [r7, #12]
    2712:	4798      	blx	r3
	}
}
    2714:	bf00      	nop
    2716:	3710      	adds	r7, #16
    2718:	46bd      	mov	sp, r7
    271a:	bd80      	pop	{r7, pc}

0000271c <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    271c:	b580      	push	{r7, lr}
    271e:	b084      	sub	sp, #16
    2720:	af00      	add	r7, sp, #0
    2722:	6078      	str	r0, [r7, #4]
    2724:	460b      	mov	r3, r1
    2726:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2728:	687b      	ldr	r3, [r7, #4]
    272a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    272c:	68fb      	ldr	r3, [r7, #12]
    272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2730:	2b00      	cmp	r3, #0
    2732:	d005      	beq.n	2740 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    2734:	68fb      	ldr	r3, [r7, #12]
    2736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2738:	78fa      	ldrb	r2, [r7, #3]
    273a:	4611      	mov	r1, r2
    273c:	68f8      	ldr	r0, [r7, #12]
    273e:	4798      	blx	r3
	}
}
    2740:	bf00      	nop
    2742:	3710      	adds	r7, #16
    2744:	46bd      	mov	sp, r7
    2746:	bd80      	pop	{r7, pc}

00002748 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    2748:	b580      	push	{r7, lr}
    274a:	b082      	sub	sp, #8
    274c:	af00      	add	r7, sp, #0
    274e:	6078      	str	r0, [r7, #4]
    2750:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    2752:	687b      	ldr	r3, [r7, #4]
    2754:	2b00      	cmp	r3, #0
    2756:	d004      	beq.n	2762 <crc_sync_init+0x1a>
    2758:	683b      	ldr	r3, [r7, #0]
    275a:	2b00      	cmp	r3, #0
    275c:	d001      	beq.n	2762 <crc_sync_init+0x1a>
    275e:	2301      	movs	r3, #1
    2760:	e000      	b.n	2764 <crc_sync_init+0x1c>
    2762:	2300      	movs	r3, #0
    2764:	f003 0301 	and.w	r3, r3, #1
    2768:	b2db      	uxtb	r3, r3
    276a:	222b      	movs	r2, #43	; 0x2b
    276c:	4906      	ldr	r1, [pc, #24]	; (2788 <crc_sync_init+0x40>)
    276e:	4618      	mov	r0, r3
    2770:	4b06      	ldr	r3, [pc, #24]	; (278c <crc_sync_init+0x44>)
    2772:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    2774:	687b      	ldr	r3, [r7, #4]
    2776:	6839      	ldr	r1, [r7, #0]
    2778:	4618      	mov	r0, r3
    277a:	4b05      	ldr	r3, [pc, #20]	; (2790 <crc_sync_init+0x48>)
    277c:	4798      	blx	r3
    277e:	4603      	mov	r3, r0
}
    2780:	4618      	mov	r0, r3
    2782:	3708      	adds	r7, #8
    2784:	46bd      	mov	sp, r7
    2786:	bd80      	pop	{r7, pc}
    2788:	0001344c 	.word	0x0001344c
    278c:	00003e05 	.word	0x00003e05
    2790:	00004a69 	.word	0x00004a69

00002794 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    2794:	b590      	push	{r4, r7, lr}
    2796:	b083      	sub	sp, #12
    2798:	af00      	add	r7, sp, #0
    279a:	4603      	mov	r3, r0
    279c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    279e:	4b07      	ldr	r3, [pc, #28]	; (27bc <delay_us+0x28>)
    27a0:	681c      	ldr	r4, [r3, #0]
    27a2:	88fb      	ldrh	r3, [r7, #6]
    27a4:	4618      	mov	r0, r3
    27a6:	4b06      	ldr	r3, [pc, #24]	; (27c0 <delay_us+0x2c>)
    27a8:	4798      	blx	r3
    27aa:	4603      	mov	r3, r0
    27ac:	4619      	mov	r1, r3
    27ae:	4620      	mov	r0, r4
    27b0:	4b04      	ldr	r3, [pc, #16]	; (27c4 <delay_us+0x30>)
    27b2:	4798      	blx	r3
}
    27b4:	bf00      	nop
    27b6:	370c      	adds	r7, #12
    27b8:	46bd      	mov	sp, r7
    27ba:	bd90      	pop	{r4, r7, pc}
    27bc:	200007bc 	.word	0x200007bc
    27c0:	000047b9 	.word	0x000047b9
    27c4:	00004951 	.word	0x00004951

000027c8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    27c8:	b590      	push	{r4, r7, lr}
    27ca:	b083      	sub	sp, #12
    27cc:	af00      	add	r7, sp, #0
    27ce:	4603      	mov	r3, r0
    27d0:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    27d2:	4b07      	ldr	r3, [pc, #28]	; (27f0 <delay_ms+0x28>)
    27d4:	681c      	ldr	r4, [r3, #0]
    27d6:	88fb      	ldrh	r3, [r7, #6]
    27d8:	4618      	mov	r0, r3
    27da:	4b06      	ldr	r3, [pc, #24]	; (27f4 <delay_ms+0x2c>)
    27dc:	4798      	blx	r3
    27de:	4603      	mov	r3, r0
    27e0:	4619      	mov	r1, r3
    27e2:	4620      	mov	r0, r4
    27e4:	4b04      	ldr	r3, [pc, #16]	; (27f8 <delay_ms+0x30>)
    27e6:	4798      	blx	r3
}
    27e8:	bf00      	nop
    27ea:	370c      	adds	r7, #12
    27ec:	46bd      	mov	sp, r7
    27ee:	bd90      	pop	{r4, r7, pc}
    27f0:	200007bc 	.word	0x200007bc
    27f4:	00004925 	.word	0x00004925
    27f8:	00004951 	.word	0x00004951

000027fc <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    27fc:	b580      	push	{r7, lr}
    27fe:	af00      	add	r7, sp, #0
	return _event_system_init();
    2800:	4b02      	ldr	r3, [pc, #8]	; (280c <event_system_init+0x10>)
    2802:	4798      	blx	r3
    2804:	4603      	mov	r3, r0
}
    2806:	4618      	mov	r0, r3
    2808:	bd80      	pop	{r7, pc}
    280a:	bf00      	nop
    280c:	00005225 	.word	0x00005225

00002810 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2810:	b580      	push	{r7, lr}
    2812:	b082      	sub	sp, #8
    2814:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2816:	2300      	movs	r3, #0
    2818:	80fb      	strh	r3, [r7, #6]
    281a:	e00e      	b.n	283a <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    281c:	88fb      	ldrh	r3, [r7, #6]
    281e:	4a0c      	ldr	r2, [pc, #48]	; (2850 <ext_irq_init+0x40>)
    2820:	00db      	lsls	r3, r3, #3
    2822:	4413      	add	r3, r2
    2824:	f04f 32ff 	mov.w	r2, #4294967295
    2828:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    282a:	88fb      	ldrh	r3, [r7, #6]
    282c:	4a08      	ldr	r2, [pc, #32]	; (2850 <ext_irq_init+0x40>)
    282e:	2100      	movs	r1, #0
    2830:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2834:	88fb      	ldrh	r3, [r7, #6]
    2836:	3301      	adds	r3, #1
    2838:	80fb      	strh	r3, [r7, #6]
    283a:	88fb      	ldrh	r3, [r7, #6]
    283c:	2b08      	cmp	r3, #8
    283e:	d9ed      	bls.n	281c <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    2840:	4804      	ldr	r0, [pc, #16]	; (2854 <ext_irq_init+0x44>)
    2842:	4b05      	ldr	r3, [pc, #20]	; (2858 <ext_irq_init+0x48>)
    2844:	4798      	blx	r3
    2846:	4603      	mov	r3, r0
}
    2848:	4618      	mov	r0, r3
    284a:	3708      	adds	r7, #8
    284c:	46bd      	mov	sp, r7
    284e:	bd80      	pop	{r7, pc}
    2850:	200007c0 	.word	0x200007c0
    2854:	000029b5 	.word	0x000029b5
    2858:	00004da9 	.word	0x00004da9

0000285c <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    285c:	b580      	push	{r7, lr}
    285e:	b086      	sub	sp, #24
    2860:	af00      	add	r7, sp, #0
    2862:	6078      	str	r0, [r7, #4]
    2864:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    2866:	2300      	movs	r3, #0
    2868:	75fb      	strb	r3, [r7, #23]
    286a:	2300      	movs	r3, #0
    286c:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    286e:	2300      	movs	r3, #0
    2870:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    2872:	e012      	b.n	289a <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    2874:	7dfb      	ldrb	r3, [r7, #23]
    2876:	4a4d      	ldr	r2, [pc, #308]	; (29ac <ext_irq_register+0x150>)
    2878:	00db      	lsls	r3, r3, #3
    287a:	4413      	add	r3, r2
    287c:	685a      	ldr	r2, [r3, #4]
    287e:	687b      	ldr	r3, [r7, #4]
    2880:	429a      	cmp	r2, r3
    2882:	d107      	bne.n	2894 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    2884:	7dfb      	ldrb	r3, [r7, #23]
    2886:	4949      	ldr	r1, [pc, #292]	; (29ac <ext_irq_register+0x150>)
    2888:	683a      	ldr	r2, [r7, #0]
    288a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    288e:	2301      	movs	r3, #1
    2890:	757b      	strb	r3, [r7, #21]
			break;
    2892:	e005      	b.n	28a0 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2894:	7dfb      	ldrb	r3, [r7, #23]
    2896:	3301      	adds	r3, #1
    2898:	75fb      	strb	r3, [r7, #23]
    289a:	7dfb      	ldrb	r3, [r7, #23]
    289c:	2b08      	cmp	r3, #8
    289e:	d9e9      	bls.n	2874 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    28a0:	683b      	ldr	r3, [r7, #0]
    28a2:	2b00      	cmp	r3, #0
    28a4:	d10e      	bne.n	28c4 <ext_irq_register+0x68>
		if (!found) {
    28a6:	7d7b      	ldrb	r3, [r7, #21]
    28a8:	f083 0301 	eor.w	r3, r3, #1
    28ac:	b2db      	uxtb	r3, r3
    28ae:	2b00      	cmp	r3, #0
    28b0:	d002      	beq.n	28b8 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    28b2:	f06f 030c 	mvn.w	r3, #12
    28b6:	e074      	b.n	29a2 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    28b8:	2100      	movs	r1, #0
    28ba:	6878      	ldr	r0, [r7, #4]
    28bc:	4b3c      	ldr	r3, [pc, #240]	; (29b0 <ext_irq_register+0x154>)
    28be:	4798      	blx	r3
    28c0:	4603      	mov	r3, r0
    28c2:	e06e      	b.n	29a2 <ext_irq_register+0x146>
	}

	if (!found) {
    28c4:	7d7b      	ldrb	r3, [r7, #21]
    28c6:	f083 0301 	eor.w	r3, r3, #1
    28ca:	b2db      	uxtb	r3, r3
    28cc:	2b00      	cmp	r3, #0
    28ce:	d05a      	beq.n	2986 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    28d0:	2300      	movs	r3, #0
    28d2:	75fb      	strb	r3, [r7, #23]
    28d4:	e016      	b.n	2904 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    28d6:	7dfb      	ldrb	r3, [r7, #23]
    28d8:	4a34      	ldr	r2, [pc, #208]	; (29ac <ext_irq_register+0x150>)
    28da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    28de:	2b00      	cmp	r3, #0
    28e0:	d10d      	bne.n	28fe <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    28e2:	7dfb      	ldrb	r3, [r7, #23]
    28e4:	4931      	ldr	r1, [pc, #196]	; (29ac <ext_irq_register+0x150>)
    28e6:	683a      	ldr	r2, [r7, #0]
    28e8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    28ec:	7dfb      	ldrb	r3, [r7, #23]
    28ee:	4a2f      	ldr	r2, [pc, #188]	; (29ac <ext_irq_register+0x150>)
    28f0:	00db      	lsls	r3, r3, #3
    28f2:	4413      	add	r3, r2
    28f4:	687a      	ldr	r2, [r7, #4]
    28f6:	605a      	str	r2, [r3, #4]
				found           = true;
    28f8:	2301      	movs	r3, #1
    28fa:	757b      	strb	r3, [r7, #21]
				break;
    28fc:	e005      	b.n	290a <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    28fe:	7dfb      	ldrb	r3, [r7, #23]
    2900:	3301      	adds	r3, #1
    2902:	75fb      	strb	r3, [r7, #23]
    2904:	7dfb      	ldrb	r3, [r7, #23]
    2906:	2b08      	cmp	r3, #8
    2908:	d9e5      	bls.n	28d6 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    290a:	e036      	b.n	297a <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    290c:	7dfb      	ldrb	r3, [r7, #23]
    290e:	4a27      	ldr	r2, [pc, #156]	; (29ac <ext_irq_register+0x150>)
    2910:	00db      	lsls	r3, r3, #3
    2912:	4413      	add	r3, r2
    2914:	685a      	ldr	r2, [r3, #4]
    2916:	7dbb      	ldrb	r3, [r7, #22]
    2918:	4924      	ldr	r1, [pc, #144]	; (29ac <ext_irq_register+0x150>)
    291a:	00db      	lsls	r3, r3, #3
    291c:	440b      	add	r3, r1
    291e:	685b      	ldr	r3, [r3, #4]
    2920:	429a      	cmp	r2, r3
    2922:	d227      	bcs.n	2974 <ext_irq_register+0x118>
    2924:	7dbb      	ldrb	r3, [r7, #22]
    2926:	4a21      	ldr	r2, [pc, #132]	; (29ac <ext_irq_register+0x150>)
    2928:	00db      	lsls	r3, r3, #3
    292a:	4413      	add	r3, r2
    292c:	685b      	ldr	r3, [r3, #4]
    292e:	f1b3 3fff 	cmp.w	r3, #4294967295
    2932:	d01f      	beq.n	2974 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    2934:	7dbb      	ldrb	r3, [r7, #22]
    2936:	491d      	ldr	r1, [pc, #116]	; (29ac <ext_irq_register+0x150>)
    2938:	f107 020c 	add.w	r2, r7, #12
    293c:	00db      	lsls	r3, r3, #3
    293e:	440b      	add	r3, r1
    2940:	e893 0003 	ldmia.w	r3, {r0, r1}
    2944:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    2948:	7dbb      	ldrb	r3, [r7, #22]
    294a:	7dfa      	ldrb	r2, [r7, #23]
    294c:	4817      	ldr	r0, [pc, #92]	; (29ac <ext_irq_register+0x150>)
    294e:	4917      	ldr	r1, [pc, #92]	; (29ac <ext_irq_register+0x150>)
    2950:	00db      	lsls	r3, r3, #3
    2952:	4403      	add	r3, r0
    2954:	00d2      	lsls	r2, r2, #3
    2956:	440a      	add	r2, r1
    2958:	e892 0003 	ldmia.w	r2, {r0, r1}
    295c:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    2960:	7dfb      	ldrb	r3, [r7, #23]
    2962:	4a12      	ldr	r2, [pc, #72]	; (29ac <ext_irq_register+0x150>)
    2964:	00db      	lsls	r3, r3, #3
    2966:	4413      	add	r3, r2
    2968:	f107 020c 	add.w	r2, r7, #12
    296c:	e892 0003 	ldmia.w	r2, {r0, r1}
    2970:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2974:	7dbb      	ldrb	r3, [r7, #22]
    2976:	3301      	adds	r3, #1
    2978:	75bb      	strb	r3, [r7, #22]
    297a:	7dbb      	ldrb	r3, [r7, #22]
    297c:	2b08      	cmp	r3, #8
    297e:	d802      	bhi.n	2986 <ext_irq_register+0x12a>
    2980:	7dfb      	ldrb	r3, [r7, #23]
    2982:	2b08      	cmp	r3, #8
    2984:	d9c2      	bls.n	290c <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    2986:	7d7b      	ldrb	r3, [r7, #21]
    2988:	f083 0301 	eor.w	r3, r3, #1
    298c:	b2db      	uxtb	r3, r3
    298e:	2b00      	cmp	r3, #0
    2990:	d002      	beq.n	2998 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    2992:	f06f 030c 	mvn.w	r3, #12
    2996:	e004      	b.n	29a2 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    2998:	2101      	movs	r1, #1
    299a:	6878      	ldr	r0, [r7, #4]
    299c:	4b04      	ldr	r3, [pc, #16]	; (29b0 <ext_irq_register+0x154>)
    299e:	4798      	blx	r3
    29a0:	4603      	mov	r3, r0
}
    29a2:	4618      	mov	r0, r3
    29a4:	3718      	adds	r7, #24
    29a6:	46bd      	mov	sp, r7
    29a8:	bd80      	pop	{r7, pc}
    29aa:	bf00      	nop
    29ac:	200007c0 	.word	0x200007c0
    29b0:	00004f3d 	.word	0x00004f3d

000029b4 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    29b4:	b580      	push	{r7, lr}
    29b6:	b084      	sub	sp, #16
    29b8:	af00      	add	r7, sp, #0
    29ba:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    29bc:	2300      	movs	r3, #0
    29be:	73fb      	strb	r3, [r7, #15]
    29c0:	2309      	movs	r3, #9
    29c2:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    29c4:	e02a      	b.n	2a1c <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    29c6:	7bba      	ldrb	r2, [r7, #14]
    29c8:	7bfb      	ldrb	r3, [r7, #15]
    29ca:	4413      	add	r3, r2
    29cc:	105b      	asrs	r3, r3, #1
    29ce:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    29d0:	7b7b      	ldrb	r3, [r7, #13]
    29d2:	2b08      	cmp	r3, #8
    29d4:	d827      	bhi.n	2a26 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    29d6:	7b7b      	ldrb	r3, [r7, #13]
    29d8:	4a16      	ldr	r2, [pc, #88]	; (2a34 <process_ext_irq+0x80>)
    29da:	00db      	lsls	r3, r3, #3
    29dc:	4413      	add	r3, r2
    29de:	685a      	ldr	r2, [r3, #4]
    29e0:	687b      	ldr	r3, [r7, #4]
    29e2:	429a      	cmp	r2, r3
    29e4:	d10b      	bne.n	29fe <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    29e6:	7b7b      	ldrb	r3, [r7, #13]
    29e8:	4a12      	ldr	r2, [pc, #72]	; (2a34 <process_ext_irq+0x80>)
    29ea:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    29ee:	2b00      	cmp	r3, #0
    29f0:	d01b      	beq.n	2a2a <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    29f2:	7b7b      	ldrb	r3, [r7, #13]
    29f4:	4a0f      	ldr	r2, [pc, #60]	; (2a34 <process_ext_irq+0x80>)
    29f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    29fa:	4798      	blx	r3
			}
			return;
    29fc:	e015      	b.n	2a2a <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    29fe:	7b7b      	ldrb	r3, [r7, #13]
    2a00:	4a0c      	ldr	r2, [pc, #48]	; (2a34 <process_ext_irq+0x80>)
    2a02:	00db      	lsls	r3, r3, #3
    2a04:	4413      	add	r3, r2
    2a06:	685a      	ldr	r2, [r3, #4]
    2a08:	687b      	ldr	r3, [r7, #4]
    2a0a:	429a      	cmp	r2, r3
    2a0c:	d203      	bcs.n	2a16 <process_ext_irq+0x62>
			lower = middle + 1;
    2a0e:	7b7b      	ldrb	r3, [r7, #13]
    2a10:	3301      	adds	r3, #1
    2a12:	73fb      	strb	r3, [r7, #15]
    2a14:	e002      	b.n	2a1c <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    2a16:	7b7b      	ldrb	r3, [r7, #13]
    2a18:	3b01      	subs	r3, #1
    2a1a:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    2a1c:	7bba      	ldrb	r2, [r7, #14]
    2a1e:	7bfb      	ldrb	r3, [r7, #15]
    2a20:	429a      	cmp	r2, r3
    2a22:	d2d0      	bcs.n	29c6 <process_ext_irq+0x12>
    2a24:	e002      	b.n	2a2c <process_ext_irq+0x78>
			return;
    2a26:	bf00      	nop
    2a28:	e000      	b.n	2a2c <process_ext_irq+0x78>
			return;
    2a2a:	bf00      	nop
		}
	}
}
    2a2c:	3710      	adds	r7, #16
    2a2e:	46bd      	mov	sp, r7
    2a30:	bd80      	pop	{r7, pc}
    2a32:	bf00      	nop
    2a34:	200007c0 	.word	0x200007c0

00002a38 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	b08a      	sub	sp, #40	; 0x28
    2a3c:	af00      	add	r7, sp, #0
    2a3e:	60f8      	str	r0, [r7, #12]
    2a40:	60b9      	str	r1, [r7, #8]
    2a42:	4613      	mov	r3, r2
    2a44:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2a46:	68fb      	ldr	r3, [r7, #12]
    2a48:	3b14      	subs	r3, #20
    2a4a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a4e:	8b9b      	ldrh	r3, [r3, #28]
    2a50:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2a52:	88fb      	ldrh	r3, [r7, #6]
    2a54:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    2a56:	f248 0301 	movw	r3, #32769	; 0x8001
    2a5a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2a5c:	68bb      	ldr	r3, [r7, #8]
    2a5e:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a62:	f107 0214 	add.w	r2, r7, #20
    2a66:	4611      	mov	r1, r2
    2a68:	4618      	mov	r0, r3
    2a6a:	4b06      	ldr	r3, [pc, #24]	; (2a84 <i2c_m_sync_read+0x4c>)
    2a6c:	4798      	blx	r3
    2a6e:	6238      	str	r0, [r7, #32]

	if (ret) {
    2a70:	6a3b      	ldr	r3, [r7, #32]
    2a72:	2b00      	cmp	r3, #0
    2a74:	d001      	beq.n	2a7a <i2c_m_sync_read+0x42>
		return ret;
    2a76:	6a3b      	ldr	r3, [r7, #32]
    2a78:	e000      	b.n	2a7c <i2c_m_sync_read+0x44>
	}

	return n;
    2a7a:	88fb      	ldrh	r3, [r7, #6]
}
    2a7c:	4618      	mov	r0, r3
    2a7e:	3728      	adds	r7, #40	; 0x28
    2a80:	46bd      	mov	sp, r7
    2a82:	bd80      	pop	{r7, pc}
    2a84:	00006e39 	.word	0x00006e39

00002a88 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    2a88:	b580      	push	{r7, lr}
    2a8a:	b08a      	sub	sp, #40	; 0x28
    2a8c:	af00      	add	r7, sp, #0
    2a8e:	60f8      	str	r0, [r7, #12]
    2a90:	60b9      	str	r1, [r7, #8]
    2a92:	4613      	mov	r3, r2
    2a94:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2a96:	68fb      	ldr	r3, [r7, #12]
    2a98:	3b14      	subs	r3, #20
    2a9a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a9e:	8b9b      	ldrh	r3, [r3, #28]
    2aa0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2aa2:	88fb      	ldrh	r3, [r7, #6]
    2aa4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2aaa:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2aac:	68bb      	ldr	r3, [r7, #8]
    2aae:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ab2:	f107 0214 	add.w	r2, r7, #20
    2ab6:	4611      	mov	r1, r2
    2ab8:	4618      	mov	r0, r3
    2aba:	4b06      	ldr	r3, [pc, #24]	; (2ad4 <i2c_m_sync_write+0x4c>)
    2abc:	4798      	blx	r3
    2abe:	6238      	str	r0, [r7, #32]

	if (ret) {
    2ac0:	6a3b      	ldr	r3, [r7, #32]
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	d001      	beq.n	2aca <i2c_m_sync_write+0x42>
		return ret;
    2ac6:	6a3b      	ldr	r3, [r7, #32]
    2ac8:	e000      	b.n	2acc <i2c_m_sync_write+0x44>
	}

	return n;
    2aca:	88fb      	ldrh	r3, [r7, #6]
}
    2acc:	4618      	mov	r0, r3
    2ace:	3728      	adds	r7, #40	; 0x28
    2ad0:	46bd      	mov	sp, r7
    2ad2:	bd80      	pop	{r7, pc}
    2ad4:	00006e39 	.word	0x00006e39

00002ad8 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2ad8:	b580      	push	{r7, lr}
    2ada:	b084      	sub	sp, #16
    2adc:	af00      	add	r7, sp, #0
    2ade:	6078      	str	r0, [r7, #4]
    2ae0:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2ae2:	687b      	ldr	r3, [r7, #4]
    2ae4:	2b00      	cmp	r3, #0
    2ae6:	bf14      	ite	ne
    2ae8:	2301      	movne	r3, #1
    2aea:	2300      	moveq	r3, #0
    2aec:	b2db      	uxtb	r3, r3
    2aee:	225e      	movs	r2, #94	; 0x5e
    2af0:	490c      	ldr	r1, [pc, #48]	; (2b24 <i2c_m_sync_init+0x4c>)
    2af2:	4618      	mov	r0, r3
    2af4:	4b0c      	ldr	r3, [pc, #48]	; (2b28 <i2c_m_sync_init+0x50>)
    2af6:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2af8:	687b      	ldr	r3, [r7, #4]
    2afa:	6839      	ldr	r1, [r7, #0]
    2afc:	4618      	mov	r0, r3
    2afe:	4b0b      	ldr	r3, [pc, #44]	; (2b2c <i2c_m_sync_init+0x54>)
    2b00:	4798      	blx	r3
    2b02:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2b04:	68fb      	ldr	r3, [r7, #12]
    2b06:	2b00      	cmp	r3, #0
    2b08:	d001      	beq.n	2b0e <i2c_m_sync_init+0x36>
		return init_status;
    2b0a:	68fb      	ldr	r3, [r7, #12]
    2b0c:	e006      	b.n	2b1c <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2b0e:	687b      	ldr	r3, [r7, #4]
    2b10:	4a07      	ldr	r2, [pc, #28]	; (2b30 <i2c_m_sync_init+0x58>)
    2b12:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    2b14:	687b      	ldr	r3, [r7, #4]
    2b16:	4a07      	ldr	r2, [pc, #28]	; (2b34 <i2c_m_sync_init+0x5c>)
    2b18:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2b1a:	2300      	movs	r3, #0
}
    2b1c:	4618      	mov	r0, r3
    2b1e:	3710      	adds	r7, #16
    2b20:	46bd      	mov	sp, r7
    2b22:	bd80      	pop	{r7, pc}
    2b24:	00013468 	.word	0x00013468
    2b28:	00003e05 	.word	0x00003e05
    2b2c:	00006c35 	.word	0x00006c35
    2b30:	00002a39 	.word	0x00002a39
    2b34:	00002a89 	.word	0x00002a89

00002b38 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    2b38:	b580      	push	{r7, lr}
    2b3a:	b082      	sub	sp, #8
    2b3c:	af00      	add	r7, sp, #0
    2b3e:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    2b40:	687b      	ldr	r3, [r7, #4]
    2b42:	4618      	mov	r0, r3
    2b44:	4b03      	ldr	r3, [pc, #12]	; (2b54 <i2c_m_sync_enable+0x1c>)
    2b46:	4798      	blx	r3
    2b48:	4603      	mov	r3, r0
}
    2b4a:	4618      	mov	r0, r3
    2b4c:	3708      	adds	r7, #8
    2b4e:	46bd      	mov	sp, r7
    2b50:	bd80      	pop	{r7, pc}
    2b52:	bf00      	nop
    2b54:	00006c7d 	.word	0x00006c7d

00002b58 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    2b58:	b480      	push	{r7}
    2b5a:	b085      	sub	sp, #20
    2b5c:	af00      	add	r7, sp, #0
    2b5e:	60f8      	str	r0, [r7, #12]
    2b60:	460b      	mov	r3, r1
    2b62:	607a      	str	r2, [r7, #4]
    2b64:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    2b66:	897b      	ldrh	r3, [r7, #10]
    2b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2b6c:	b21a      	sxth	r2, r3
    2b6e:	687b      	ldr	r3, [r7, #4]
    2b70:	b21b      	sxth	r3, r3
    2b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2b76:	b21b      	sxth	r3, r3
    2b78:	4313      	orrs	r3, r2
    2b7a:	b21b      	sxth	r3, r3
    2b7c:	b29a      	uxth	r2, r3
    2b7e:	68fb      	ldr	r3, [r7, #12]
    2b80:	839a      	strh	r2, [r3, #28]
    2b82:	68fb      	ldr	r3, [r7, #12]
    2b84:	8b9b      	ldrh	r3, [r3, #28]
}
    2b86:	4618      	mov	r0, r3
    2b88:	3714      	adds	r7, #20
    2b8a:	46bd      	mov	sp, r7
    2b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b90:	4770      	bx	lr

00002b92 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    2b92:	b480      	push	{r7}
    2b94:	b083      	sub	sp, #12
    2b96:	af00      	add	r7, sp, #0
    2b98:	6078      	str	r0, [r7, #4]
    2b9a:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    2b9c:	687b      	ldr	r3, [r7, #4]
    2b9e:	f103 0214 	add.w	r2, r3, #20
    2ba2:	683b      	ldr	r3, [r7, #0]
    2ba4:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2ba6:	2300      	movs	r3, #0
}
    2ba8:	4618      	mov	r0, r3
    2baa:	370c      	adds	r7, #12
    2bac:	46bd      	mov	sp, r7
    2bae:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bb2:	4770      	bx	lr

00002bb4 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2bb4:	b580      	push	{r7, lr}
    2bb6:	b084      	sub	sp, #16
    2bb8:	af00      	add	r7, sp, #0
    2bba:	60f8      	str	r0, [r7, #12]
    2bbc:	60b9      	str	r1, [r7, #8]
    2bbe:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2bc0:	68fb      	ldr	r3, [r7, #12]
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	d004      	beq.n	2bd0 <pwm_init+0x1c>
    2bc6:	68bb      	ldr	r3, [r7, #8]
    2bc8:	2b00      	cmp	r3, #0
    2bca:	d001      	beq.n	2bd0 <pwm_init+0x1c>
    2bcc:	2301      	movs	r3, #1
    2bce:	e000      	b.n	2bd2 <pwm_init+0x1e>
    2bd0:	2300      	movs	r3, #0
    2bd2:	f003 0301 	and.w	r3, r3, #1
    2bd6:	b2db      	uxtb	r3, r3
    2bd8:	2233      	movs	r2, #51	; 0x33
    2bda:	490a      	ldr	r1, [pc, #40]	; (2c04 <pwm_init+0x50>)
    2bdc:	4618      	mov	r0, r3
    2bde:	4b0a      	ldr	r3, [pc, #40]	; (2c08 <pwm_init+0x54>)
    2be0:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2be2:	68fb      	ldr	r3, [r7, #12]
    2be4:	68b9      	ldr	r1, [r7, #8]
    2be6:	4618      	mov	r0, r3
    2be8:	4b08      	ldr	r3, [pc, #32]	; (2c0c <pwm_init+0x58>)
    2bea:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2bec:	68fb      	ldr	r3, [r7, #12]
    2bee:	4a08      	ldr	r2, [pc, #32]	; (2c10 <pwm_init+0x5c>)
    2bf0:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2bf2:	68fb      	ldr	r3, [r7, #12]
    2bf4:	4a07      	ldr	r2, [pc, #28]	; (2c14 <pwm_init+0x60>)
    2bf6:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2bf8:	2300      	movs	r3, #0
}
    2bfa:	4618      	mov	r0, r3
    2bfc:	3710      	adds	r7, #16
    2bfe:	46bd      	mov	sp, r7
    2c00:	bd80      	pop	{r7, pc}
    2c02:	bf00      	nop
    2c04:	00013484 	.word	0x00013484
    2c08:	00003e05 	.word	0x00003e05
    2c0c:	000084d1 	.word	0x000084d1
    2c10:	00002c19 	.word	0x00002c19
    2c14:	00002c3d 	.word	0x00002c3d

00002c18 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2c18:	b580      	push	{r7, lr}
    2c1a:	b084      	sub	sp, #16
    2c1c:	af00      	add	r7, sp, #0
    2c1e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2c20:	687b      	ldr	r3, [r7, #4]
    2c22:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2c24:	68fb      	ldr	r3, [r7, #12]
    2c26:	695b      	ldr	r3, [r3, #20]
    2c28:	2b00      	cmp	r3, #0
    2c2a:	d003      	beq.n	2c34 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2c2c:	68fb      	ldr	r3, [r7, #12]
    2c2e:	695b      	ldr	r3, [r3, #20]
    2c30:	68f8      	ldr	r0, [r7, #12]
    2c32:	4798      	blx	r3
	}
}
    2c34:	bf00      	nop
    2c36:	3710      	adds	r7, #16
    2c38:	46bd      	mov	sp, r7
    2c3a:	bd80      	pop	{r7, pc}

00002c3c <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2c3c:	b580      	push	{r7, lr}
    2c3e:	b084      	sub	sp, #16
    2c40:	af00      	add	r7, sp, #0
    2c42:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2c44:	687b      	ldr	r3, [r7, #4]
    2c46:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2c48:	68fb      	ldr	r3, [r7, #12]
    2c4a:	699b      	ldr	r3, [r3, #24]
    2c4c:	2b00      	cmp	r3, #0
    2c4e:	d003      	beq.n	2c58 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2c50:	68fb      	ldr	r3, [r7, #12]
    2c52:	699b      	ldr	r3, [r3, #24]
    2c54:	68f8      	ldr	r0, [r7, #12]
    2c56:	4798      	blx	r3
	}
}
    2c58:	bf00      	nop
    2c5a:	3710      	adds	r7, #16
    2c5c:	46bd      	mov	sp, r7
    2c5e:	bd80      	pop	{r7, pc}

00002c60 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2c60:	b580      	push	{r7, lr}
    2c62:	b082      	sub	sp, #8
    2c64:	af00      	add	r7, sp, #0
    2c66:	6078      	str	r0, [r7, #4]
    2c68:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2c6a:	687b      	ldr	r3, [r7, #4]
    2c6c:	2b00      	cmp	r3, #0
    2c6e:	d004      	beq.n	2c7a <qspi_sync_init+0x1a>
    2c70:	683b      	ldr	r3, [r7, #0]
    2c72:	2b00      	cmp	r3, #0
    2c74:	d001      	beq.n	2c7a <qspi_sync_init+0x1a>
    2c76:	2301      	movs	r3, #1
    2c78:	e000      	b.n	2c7c <qspi_sync_init+0x1c>
    2c7a:	2300      	movs	r3, #0
    2c7c:	f003 0301 	and.w	r3, r3, #1
    2c80:	b2db      	uxtb	r3, r3
    2c82:	2231      	movs	r2, #49	; 0x31
    2c84:	4906      	ldr	r1, [pc, #24]	; (2ca0 <qspi_sync_init+0x40>)
    2c86:	4618      	mov	r0, r3
    2c88:	4b06      	ldr	r3, [pc, #24]	; (2ca4 <qspi_sync_init+0x44>)
    2c8a:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2c8c:	687b      	ldr	r3, [r7, #4]
    2c8e:	6839      	ldr	r1, [r7, #0]
    2c90:	4618      	mov	r0, r3
    2c92:	4b05      	ldr	r3, [pc, #20]	; (2ca8 <qspi_sync_init+0x48>)
    2c94:	4798      	blx	r3
    2c96:	4603      	mov	r3, r0
}
    2c98:	4618      	mov	r0, r3
    2c9a:	3708      	adds	r7, #8
    2c9c:	46bd      	mov	sp, r7
    2c9e:	bd80      	pop	{r7, pc}
    2ca0:	0001349c 	.word	0x0001349c
    2ca4:	00003e05 	.word	0x00003e05
    2ca8:	00005ded 	.word	0x00005ded

00002cac <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2cac:	b580      	push	{r7, lr}
    2cae:	b082      	sub	sp, #8
    2cb0:	af00      	add	r7, sp, #0
    2cb2:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2cb4:	687b      	ldr	r3, [r7, #4]
    2cb6:	2b00      	cmp	r3, #0
    2cb8:	bf14      	ite	ne
    2cba:	2301      	movne	r3, #1
    2cbc:	2300      	moveq	r3, #0
    2cbe:	b2db      	uxtb	r3, r3
    2cc0:	223f      	movs	r2, #63	; 0x3f
    2cc2:	4906      	ldr	r1, [pc, #24]	; (2cdc <qspi_sync_enable+0x30>)
    2cc4:	4618      	mov	r0, r3
    2cc6:	4b06      	ldr	r3, [pc, #24]	; (2ce0 <qspi_sync_enable+0x34>)
    2cc8:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2cca:	687b      	ldr	r3, [r7, #4]
    2ccc:	4618      	mov	r0, r3
    2cce:	4b05      	ldr	r3, [pc, #20]	; (2ce4 <qspi_sync_enable+0x38>)
    2cd0:	4798      	blx	r3
    2cd2:	4603      	mov	r3, r0
}
    2cd4:	4618      	mov	r0, r3
    2cd6:	3708      	adds	r7, #8
    2cd8:	46bd      	mov	sp, r7
    2cda:	bd80      	pop	{r7, pc}
    2cdc:	0001349c 	.word	0x0001349c
    2ce0:	00003e05 	.word	0x00003e05
    2ce4:	00005e61 	.word	0x00005e61

00002ce8 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2ce8:	b580      	push	{r7, lr}
    2cea:	b082      	sub	sp, #8
    2cec:	af00      	add	r7, sp, #0
    2cee:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	bf14      	ite	ne
    2cf6:	2301      	movne	r3, #1
    2cf8:	2300      	moveq	r3, #0
    2cfa:	b2db      	uxtb	r3, r3
    2cfc:	2246      	movs	r2, #70	; 0x46
    2cfe:	4906      	ldr	r1, [pc, #24]	; (2d18 <qspi_sync_disable+0x30>)
    2d00:	4618      	mov	r0, r3
    2d02:	4b06      	ldr	r3, [pc, #24]	; (2d1c <qspi_sync_disable+0x34>)
    2d04:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2d06:	687b      	ldr	r3, [r7, #4]
    2d08:	4618      	mov	r0, r3
    2d0a:	4b05      	ldr	r3, [pc, #20]	; (2d20 <qspi_sync_disable+0x38>)
    2d0c:	4798      	blx	r3
    2d0e:	4603      	mov	r3, r0
}
    2d10:	4618      	mov	r0, r3
    2d12:	3708      	adds	r7, #8
    2d14:	46bd      	mov	sp, r7
    2d16:	bd80      	pop	{r7, pc}
    2d18:	0001349c 	.word	0x0001349c
    2d1c:	00003e05 	.word	0x00003e05
    2d20:	00005e85 	.word	0x00005e85

00002d24 <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2d24:	b580      	push	{r7, lr}
    2d26:	b082      	sub	sp, #8
    2d28:	af00      	add	r7, sp, #0
    2d2a:	6078      	str	r0, [r7, #4]
    2d2c:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2d2e:	687b      	ldr	r3, [r7, #4]
    2d30:	2b00      	cmp	r3, #0
    2d32:	d004      	beq.n	2d3e <qspi_sync_serial_run_command+0x1a>
    2d34:	683b      	ldr	r3, [r7, #0]
    2d36:	2b00      	cmp	r3, #0
    2d38:	d001      	beq.n	2d3e <qspi_sync_serial_run_command+0x1a>
    2d3a:	2301      	movs	r3, #1
    2d3c:	e000      	b.n	2d40 <qspi_sync_serial_run_command+0x1c>
    2d3e:	2300      	movs	r3, #0
    2d40:	f003 0301 	and.w	r3, r3, #1
    2d44:	b2db      	uxtb	r3, r3
    2d46:	224d      	movs	r2, #77	; 0x4d
    2d48:	4906      	ldr	r1, [pc, #24]	; (2d64 <qspi_sync_serial_run_command+0x40>)
    2d4a:	4618      	mov	r0, r3
    2d4c:	4b06      	ldr	r3, [pc, #24]	; (2d68 <qspi_sync_serial_run_command+0x44>)
    2d4e:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2d50:	687b      	ldr	r3, [r7, #4]
    2d52:	6839      	ldr	r1, [r7, #0]
    2d54:	4618      	mov	r0, r3
    2d56:	4b05      	ldr	r3, [pc, #20]	; (2d6c <qspi_sync_serial_run_command+0x48>)
    2d58:	4798      	blx	r3
    2d5a:	4603      	mov	r3, r0
}
    2d5c:	4618      	mov	r0, r3
    2d5e:	3708      	adds	r7, #8
    2d60:	46bd      	mov	sp, r7
    2d62:	bd80      	pop	{r7, pc}
    2d64:	0001349c 	.word	0x0001349c
    2d68:	00003e05 	.word	0x00003e05
    2d6c:	00005fd1 	.word	0x00005fd1

00002d70 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2d70:	b580      	push	{r7, lr}
    2d72:	b084      	sub	sp, #16
    2d74:	af00      	add	r7, sp, #0
    2d76:	6078      	str	r0, [r7, #4]
    2d78:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2d7a:	2300      	movs	r3, #0
    2d7c:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2d7e:	687b      	ldr	r3, [r7, #4]
    2d80:	2b00      	cmp	r3, #0
    2d82:	d004      	beq.n	2d8e <spi_m_sync_init+0x1e>
    2d84:	683b      	ldr	r3, [r7, #0]
    2d86:	2b00      	cmp	r3, #0
    2d88:	d001      	beq.n	2d8e <spi_m_sync_init+0x1e>
    2d8a:	2301      	movs	r3, #1
    2d8c:	e000      	b.n	2d90 <spi_m_sync_init+0x20>
    2d8e:	2300      	movs	r3, #0
    2d90:	f003 0301 	and.w	r3, r3, #1
    2d94:	b2db      	uxtb	r3, r3
    2d96:	2240      	movs	r2, #64	; 0x40
    2d98:	4910      	ldr	r1, [pc, #64]	; (2ddc <spi_m_sync_init+0x6c>)
    2d9a:	4618      	mov	r0, r3
    2d9c:	4b10      	ldr	r3, [pc, #64]	; (2de0 <spi_m_sync_init+0x70>)
    2d9e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2da0:	687b      	ldr	r3, [r7, #4]
    2da2:	683a      	ldr	r2, [r7, #0]
    2da4:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2da6:	687b      	ldr	r3, [r7, #4]
    2da8:	3304      	adds	r3, #4
    2daa:	6839      	ldr	r1, [r7, #0]
    2dac:	4618      	mov	r0, r3
    2dae:	4b0d      	ldr	r3, [pc, #52]	; (2de4 <spi_m_sync_init+0x74>)
    2db0:	4798      	blx	r3
    2db2:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    2db4:	68fb      	ldr	r3, [r7, #12]
    2db6:	2b00      	cmp	r3, #0
    2db8:	da01      	bge.n	2dbe <spi_m_sync_init+0x4e>
		return rc;
    2dba:	68fb      	ldr	r3, [r7, #12]
    2dbc:	e00a      	b.n	2dd4 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2dbe:	687b      	ldr	r3, [r7, #4]
    2dc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2dc4:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    2dc6:	687b      	ldr	r3, [r7, #4]
    2dc8:	4a07      	ldr	r2, [pc, #28]	; (2de8 <spi_m_sync_init+0x78>)
    2dca:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    2dcc:	687b      	ldr	r3, [r7, #4]
    2dce:	4a07      	ldr	r2, [pc, #28]	; (2dec <spi_m_sync_init+0x7c>)
    2dd0:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2dd2:	2300      	movs	r3, #0
}
    2dd4:	4618      	mov	r0, r3
    2dd6:	3710      	adds	r7, #16
    2dd8:	46bd      	mov	sp, r7
    2dda:	bd80      	pop	{r7, pc}
    2ddc:	000134b8 	.word	0x000134b8
    2de0:	00003e05 	.word	0x00003e05
    2de4:	00007335 	.word	0x00007335
    2de8:	00002e69 	.word	0x00002e69
    2dec:	00002ec1 	.word	0x00002ec1

00002df0 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    2df0:	b580      	push	{r7, lr}
    2df2:	b082      	sub	sp, #8
    2df4:	af00      	add	r7, sp, #0
    2df6:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2df8:	687b      	ldr	r3, [r7, #4]
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	bf14      	ite	ne
    2dfe:	2301      	movne	r3, #1
    2e00:	2300      	moveq	r3, #0
    2e02:	b2db      	uxtb	r3, r3
    2e04:	2257      	movs	r2, #87	; 0x57
    2e06:	4906      	ldr	r1, [pc, #24]	; (2e20 <spi_m_sync_enable+0x30>)
    2e08:	4618      	mov	r0, r3
    2e0a:	4b06      	ldr	r3, [pc, #24]	; (2e24 <spi_m_sync_enable+0x34>)
    2e0c:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    2e0e:	687b      	ldr	r3, [r7, #4]
    2e10:	3304      	adds	r3, #4
    2e12:	4618      	mov	r0, r3
    2e14:	4b04      	ldr	r3, [pc, #16]	; (2e28 <spi_m_sync_enable+0x38>)
    2e16:	4798      	blx	r3
}
    2e18:	bf00      	nop
    2e1a:	3708      	adds	r7, #8
    2e1c:	46bd      	mov	sp, r7
    2e1e:	bd80      	pop	{r7, pc}
    2e20:	000134b8 	.word	0x000134b8
    2e24:	00003e05 	.word	0x00003e05
    2e28:	00007441 	.word	0x00007441

00002e2c <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    2e2c:	b580      	push	{r7, lr}
    2e2e:	b082      	sub	sp, #8
    2e30:	af00      	add	r7, sp, #0
    2e32:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    2e34:	687b      	ldr	r3, [r7, #4]
    2e36:	2b00      	cmp	r3, #0
    2e38:	bf14      	ite	ne
    2e3a:	2301      	movne	r3, #1
    2e3c:	2300      	moveq	r3, #0
    2e3e:	b2db      	uxtb	r3, r3
    2e40:	225d      	movs	r2, #93	; 0x5d
    2e42:	4906      	ldr	r1, [pc, #24]	; (2e5c <spi_m_sync_disable+0x30>)
    2e44:	4618      	mov	r0, r3
    2e46:	4b06      	ldr	r3, [pc, #24]	; (2e60 <spi_m_sync_disable+0x34>)
    2e48:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    2e4a:	687b      	ldr	r3, [r7, #4]
    2e4c:	3304      	adds	r3, #4
    2e4e:	4618      	mov	r0, r3
    2e50:	4b04      	ldr	r3, [pc, #16]	; (2e64 <spi_m_sync_disable+0x38>)
    2e52:	4798      	blx	r3
}
    2e54:	bf00      	nop
    2e56:	3708      	adds	r7, #8
    2e58:	46bd      	mov	sp, r7
    2e5a:	bd80      	pop	{r7, pc}
    2e5c:	000134b8 	.word	0x000134b8
    2e60:	00003e05 	.word	0x00003e05
    2e64:	00007491 	.word	0x00007491

00002e68 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    2e68:	b580      	push	{r7, lr}
    2e6a:	b088      	sub	sp, #32
    2e6c:	af00      	add	r7, sp, #0
    2e6e:	60f8      	str	r0, [r7, #12]
    2e70:	60b9      	str	r1, [r7, #8]
    2e72:	4613      	mov	r3, r2
    2e74:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2e76:	68fb      	ldr	r3, [r7, #12]
    2e78:	2b00      	cmp	r3, #0
    2e7a:	bf14      	ite	ne
    2e7c:	2301      	movne	r3, #1
    2e7e:	2300      	moveq	r3, #0
    2e80:	b2db      	uxtb	r3, r3
    2e82:	2287      	movs	r2, #135	; 0x87
    2e84:	490b      	ldr	r1, [pc, #44]	; (2eb4 <_spi_m_sync_io_read+0x4c>)
    2e86:	4618      	mov	r0, r3
    2e88:	4b0b      	ldr	r3, [pc, #44]	; (2eb8 <_spi_m_sync_io_read+0x50>)
    2e8a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2e8c:	68fb      	ldr	r3, [r7, #12]
    2e8e:	3b0c      	subs	r3, #12
    2e90:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    2e92:	68bb      	ldr	r3, [r7, #8]
    2e94:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    2e96:	2300      	movs	r3, #0
    2e98:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2e9a:	88fb      	ldrh	r3, [r7, #6]
    2e9c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2e9e:	f107 0310 	add.w	r3, r7, #16
    2ea2:	4619      	mov	r1, r3
    2ea4:	69f8      	ldr	r0, [r7, #28]
    2ea6:	4b05      	ldr	r3, [pc, #20]	; (2ebc <_spi_m_sync_io_read+0x54>)
    2ea8:	4798      	blx	r3
    2eaa:	4603      	mov	r3, r0
}
    2eac:	4618      	mov	r0, r3
    2eae:	3720      	adds	r7, #32
    2eb0:	46bd      	mov	sp, r7
    2eb2:	bd80      	pop	{r7, pc}
    2eb4:	000134b8 	.word	0x000134b8
    2eb8:	00003e05 	.word	0x00003e05
    2ebc:	00002f19 	.word	0x00002f19

00002ec0 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    2ec0:	b580      	push	{r7, lr}
    2ec2:	b088      	sub	sp, #32
    2ec4:	af00      	add	r7, sp, #0
    2ec6:	60f8      	str	r0, [r7, #12]
    2ec8:	60b9      	str	r1, [r7, #8]
    2eca:	4613      	mov	r3, r2
    2ecc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    2ece:	68fb      	ldr	r3, [r7, #12]
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	bf14      	ite	ne
    2ed4:	2301      	movne	r3, #1
    2ed6:	2300      	moveq	r3, #0
    2ed8:	b2db      	uxtb	r3, r3
    2eda:	22a3      	movs	r2, #163	; 0xa3
    2edc:	490b      	ldr	r1, [pc, #44]	; (2f0c <_spi_m_sync_io_write+0x4c>)
    2ede:	4618      	mov	r0, r3
    2ee0:	4b0b      	ldr	r3, [pc, #44]	; (2f10 <_spi_m_sync_io_write+0x50>)
    2ee2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2ee4:	68fb      	ldr	r3, [r7, #12]
    2ee6:	3b0c      	subs	r3, #12
    2ee8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    2eea:	2300      	movs	r3, #0
    2eec:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    2eee:	68bb      	ldr	r3, [r7, #8]
    2ef0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    2ef2:	88fb      	ldrh	r3, [r7, #6]
    2ef4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    2ef6:	f107 0310 	add.w	r3, r7, #16
    2efa:	4619      	mov	r1, r3
    2efc:	69f8      	ldr	r0, [r7, #28]
    2efe:	4b05      	ldr	r3, [pc, #20]	; (2f14 <_spi_m_sync_io_write+0x54>)
    2f00:	4798      	blx	r3
    2f02:	4603      	mov	r3, r0
}
    2f04:	4618      	mov	r0, r3
    2f06:	3720      	adds	r7, #32
    2f08:	46bd      	mov	sp, r7
    2f0a:	bd80      	pop	{r7, pc}
    2f0c:	000134b8 	.word	0x000134b8
    2f10:	00003e05 	.word	0x00003e05
    2f14:	00002f19 	.word	0x00002f19

00002f18 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2f18:	b580      	push	{r7, lr}
    2f1a:	b086      	sub	sp, #24
    2f1c:	af00      	add	r7, sp, #0
    2f1e:	6078      	str	r0, [r7, #4]
    2f20:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2f22:	687b      	ldr	r3, [r7, #4]
    2f24:	2b00      	cmp	r3, #0
    2f26:	d004      	beq.n	2f32 <spi_m_sync_transfer+0x1a>
    2f28:	683b      	ldr	r3, [r7, #0]
    2f2a:	2b00      	cmp	r3, #0
    2f2c:	d001      	beq.n	2f32 <spi_m_sync_transfer+0x1a>
    2f2e:	2301      	movs	r3, #1
    2f30:	e000      	b.n	2f34 <spi_m_sync_transfer+0x1c>
    2f32:	2300      	movs	r3, #0
    2f34:	f003 0301 	and.w	r3, r3, #1
    2f38:	b2db      	uxtb	r3, r3
    2f3a:	22b3      	movs	r2, #179	; 0xb3
    2f3c:	490c      	ldr	r1, [pc, #48]	; (2f70 <spi_m_sync_transfer+0x58>)
    2f3e:	4618      	mov	r0, r3
    2f40:	4b0c      	ldr	r3, [pc, #48]	; (2f74 <spi_m_sync_transfer+0x5c>)
    2f42:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2f44:	683b      	ldr	r3, [r7, #0]
    2f46:	681b      	ldr	r3, [r3, #0]
    2f48:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2f4a:	683b      	ldr	r3, [r7, #0]
    2f4c:	685b      	ldr	r3, [r3, #4]
    2f4e:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    2f50:	683b      	ldr	r3, [r7, #0]
    2f52:	689b      	ldr	r3, [r3, #8]
    2f54:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2f56:	687b      	ldr	r3, [r7, #4]
    2f58:	3304      	adds	r3, #4
    2f5a:	f107 020c 	add.w	r2, r7, #12
    2f5e:	4611      	mov	r1, r2
    2f60:	4618      	mov	r0, r3
    2f62:	4b05      	ldr	r3, [pc, #20]	; (2f78 <spi_m_sync_transfer+0x60>)
    2f64:	4798      	blx	r3
    2f66:	4603      	mov	r3, r0
}
    2f68:	4618      	mov	r0, r3
    2f6a:	3718      	adds	r7, #24
    2f6c:	46bd      	mov	sp, r7
    2f6e:	bd80      	pop	{r7, pc}
    2f70:	000134b8 	.word	0x000134b8
    2f74:	00003e05 	.word	0x00003e05
    2f78:	00007635 	.word	0x00007635

00002f7c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    2f7c:	b580      	push	{r7, lr}
    2f7e:	b082      	sub	sp, #8
    2f80:	af00      	add	r7, sp, #0
    2f82:	6078      	str	r0, [r7, #4]
    2f84:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    2f86:	687b      	ldr	r3, [r7, #4]
    2f88:	2b00      	cmp	r3, #0
    2f8a:	d004      	beq.n	2f96 <spi_m_sync_get_io_descriptor+0x1a>
    2f8c:	683b      	ldr	r3, [r7, #0]
    2f8e:	2b00      	cmp	r3, #0
    2f90:	d001      	beq.n	2f96 <spi_m_sync_get_io_descriptor+0x1a>
    2f92:	2301      	movs	r3, #1
    2f94:	e000      	b.n	2f98 <spi_m_sync_get_io_descriptor+0x1c>
    2f96:	2300      	movs	r3, #0
    2f98:	f003 0301 	and.w	r3, r3, #1
    2f9c:	b2db      	uxtb	r3, r3
    2f9e:	22bd      	movs	r2, #189	; 0xbd
    2fa0:	4906      	ldr	r1, [pc, #24]	; (2fbc <spi_m_sync_get_io_descriptor+0x40>)
    2fa2:	4618      	mov	r0, r3
    2fa4:	4b06      	ldr	r3, [pc, #24]	; (2fc0 <spi_m_sync_get_io_descriptor+0x44>)
    2fa6:	4798      	blx	r3
	*io = &spi->io;
    2fa8:	687b      	ldr	r3, [r7, #4]
    2faa:	f103 020c 	add.w	r2, r3, #12
    2fae:	683b      	ldr	r3, [r7, #0]
    2fb0:	601a      	str	r2, [r3, #0]
	return 0;
    2fb2:	2300      	movs	r3, #0
}
    2fb4:	4618      	mov	r0, r3
    2fb6:	3708      	adds	r7, #8
    2fb8:	46bd      	mov	sp, r7
    2fba:	bd80      	pop	{r7, pc}
    2fbc:	000134b8 	.word	0x000134b8
    2fc0:	00003e05 	.word	0x00003e05

00002fc4 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    2fc4:	b480      	push	{r7}
    2fc6:	b083      	sub	sp, #12
    2fc8:	af00      	add	r7, sp, #0
    2fca:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    2fcc:	687b      	ldr	r3, [r7, #4]
    2fce:	681b      	ldr	r3, [r3, #0]
}
    2fd0:	4618      	mov	r0, r3
    2fd2:	370c      	adds	r7, #12
    2fd4:	46bd      	mov	sp, r7
    2fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fda:	4770      	bx	lr

00002fdc <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    2fdc:	b480      	push	{r7}
    2fde:	b083      	sub	sp, #12
    2fe0:	af00      	add	r7, sp, #0
    2fe2:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    2fe4:	687b      	ldr	r3, [r7, #4]
    2fe6:	2b00      	cmp	r3, #0
    2fe8:	d002      	beq.n	2ff0 <list_get_next_element+0x14>
    2fea:	687b      	ldr	r3, [r7, #4]
    2fec:	681b      	ldr	r3, [r3, #0]
    2fee:	e000      	b.n	2ff2 <list_get_next_element+0x16>
    2ff0:	2300      	movs	r3, #0
}
    2ff2:	4618      	mov	r0, r3
    2ff4:	370c      	adds	r7, #12
    2ff6:	46bd      	mov	sp, r7
    2ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ffc:	4770      	bx	lr
	...

00003000 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    3000:	b580      	push	{r7, lr}
    3002:	b084      	sub	sp, #16
    3004:	af00      	add	r7, sp, #0
    3006:	60f8      	str	r0, [r7, #12]
    3008:	60b9      	str	r1, [r7, #8]
    300a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    300c:	68fb      	ldr	r3, [r7, #12]
    300e:	2b00      	cmp	r3, #0
    3010:	d007      	beq.n	3022 <timer_init+0x22>
    3012:	68bb      	ldr	r3, [r7, #8]
    3014:	2b00      	cmp	r3, #0
    3016:	d004      	beq.n	3022 <timer_init+0x22>
    3018:	687b      	ldr	r3, [r7, #4]
    301a:	2b00      	cmp	r3, #0
    301c:	d001      	beq.n	3022 <timer_init+0x22>
    301e:	2301      	movs	r3, #1
    3020:	e000      	b.n	3024 <timer_init+0x24>
    3022:	2300      	movs	r3, #0
    3024:	f003 0301 	and.w	r3, r3, #1
    3028:	b2db      	uxtb	r3, r3
    302a:	223b      	movs	r2, #59	; 0x3b
    302c:	490c      	ldr	r1, [pc, #48]	; (3060 <timer_init+0x60>)
    302e:	4618      	mov	r0, r3
    3030:	4b0c      	ldr	r3, [pc, #48]	; (3064 <timer_init+0x64>)
    3032:	4798      	blx	r3
	descr->func = func;
    3034:	68fb      	ldr	r3, [r7, #12]
    3036:	687a      	ldr	r2, [r7, #4]
    3038:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    303a:	68fb      	ldr	r3, [r7, #12]
    303c:	681b      	ldr	r3, [r3, #0]
    303e:	681b      	ldr	r3, [r3, #0]
    3040:	68fa      	ldr	r2, [r7, #12]
    3042:	3204      	adds	r2, #4
    3044:	68b9      	ldr	r1, [r7, #8]
    3046:	4610      	mov	r0, r2
    3048:	4798      	blx	r3
	descr->time                           = 0;
    304a:	68fb      	ldr	r3, [r7, #12]
    304c:	2200      	movs	r2, #0
    304e:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    3050:	68fb      	ldr	r3, [r7, #12]
    3052:	4a05      	ldr	r2, [pc, #20]	; (3068 <timer_init+0x68>)
    3054:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    3056:	2300      	movs	r3, #0
}
    3058:	4618      	mov	r0, r3
    305a:	3710      	adds	r7, #16
    305c:	46bd      	mov	sp, r7
    305e:	bd80      	pop	{r7, pc}
    3060:	000134d4 	.word	0x000134d4
    3064:	00003e05 	.word	0x00003e05
    3068:	000033f1 	.word	0x000033f1

0000306c <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    306c:	b580      	push	{r7, lr}
    306e:	b082      	sub	sp, #8
    3070:	af00      	add	r7, sp, #0
    3072:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3074:	687b      	ldr	r3, [r7, #4]
    3076:	2b00      	cmp	r3, #0
    3078:	d005      	beq.n	3086 <timer_start+0x1a>
    307a:	687b      	ldr	r3, [r7, #4]
    307c:	681b      	ldr	r3, [r3, #0]
    307e:	2b00      	cmp	r3, #0
    3080:	d001      	beq.n	3086 <timer_start+0x1a>
    3082:	2301      	movs	r3, #1
    3084:	e000      	b.n	3088 <timer_start+0x1c>
    3086:	2300      	movs	r3, #0
    3088:	f003 0301 	and.w	r3, r3, #1
    308c:	b2db      	uxtb	r3, r3
    308e:	2254      	movs	r2, #84	; 0x54
    3090:	490e      	ldr	r1, [pc, #56]	; (30cc <timer_start+0x60>)
    3092:	4618      	mov	r0, r3
    3094:	4b0e      	ldr	r3, [pc, #56]	; (30d0 <timer_start+0x64>)
    3096:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    3098:	687b      	ldr	r3, [r7, #4]
    309a:	681b      	ldr	r3, [r3, #0]
    309c:	699b      	ldr	r3, [r3, #24]
    309e:	687a      	ldr	r2, [r7, #4]
    30a0:	3204      	adds	r2, #4
    30a2:	4610      	mov	r0, r2
    30a4:	4798      	blx	r3
    30a6:	4603      	mov	r3, r0
    30a8:	2b00      	cmp	r3, #0
    30aa:	d002      	beq.n	30b2 <timer_start+0x46>
		return ERR_DENIED;
    30ac:	f06f 0310 	mvn.w	r3, #16
    30b0:	e007      	b.n	30c2 <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    30b2:	687b      	ldr	r3, [r7, #4]
    30b4:	681b      	ldr	r3, [r3, #0]
    30b6:	689b      	ldr	r3, [r3, #8]
    30b8:	687a      	ldr	r2, [r7, #4]
    30ba:	3204      	adds	r2, #4
    30bc:	4610      	mov	r0, r2
    30be:	4798      	blx	r3

	return ERR_NONE;
    30c0:	2300      	movs	r3, #0
}
    30c2:	4618      	mov	r0, r3
    30c4:	3708      	adds	r7, #8
    30c6:	46bd      	mov	sp, r7
    30c8:	bd80      	pop	{r7, pc}
    30ca:	bf00      	nop
    30cc:	000134d4 	.word	0x000134d4
    30d0:	00003e05 	.word	0x00003e05

000030d4 <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    30d4:	b580      	push	{r7, lr}
    30d6:	b082      	sub	sp, #8
    30d8:	af00      	add	r7, sp, #0
    30da:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    30dc:	687b      	ldr	r3, [r7, #4]
    30de:	2b00      	cmp	r3, #0
    30e0:	d005      	beq.n	30ee <timer_stop+0x1a>
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	681b      	ldr	r3, [r3, #0]
    30e6:	2b00      	cmp	r3, #0
    30e8:	d001      	beq.n	30ee <timer_stop+0x1a>
    30ea:	2301      	movs	r3, #1
    30ec:	e000      	b.n	30f0 <timer_stop+0x1c>
    30ee:	2300      	movs	r3, #0
    30f0:	f003 0301 	and.w	r3, r3, #1
    30f4:	b2db      	uxtb	r3, r3
    30f6:	2262      	movs	r2, #98	; 0x62
    30f8:	490f      	ldr	r1, [pc, #60]	; (3138 <timer_stop+0x64>)
    30fa:	4618      	mov	r0, r3
    30fc:	4b0f      	ldr	r3, [pc, #60]	; (313c <timer_stop+0x68>)
    30fe:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    3100:	687b      	ldr	r3, [r7, #4]
    3102:	681b      	ldr	r3, [r3, #0]
    3104:	699b      	ldr	r3, [r3, #24]
    3106:	687a      	ldr	r2, [r7, #4]
    3108:	3204      	adds	r2, #4
    310a:	4610      	mov	r0, r2
    310c:	4798      	blx	r3
    310e:	4603      	mov	r3, r0
    3110:	f083 0301 	eor.w	r3, r3, #1
    3114:	b2db      	uxtb	r3, r3
    3116:	2b00      	cmp	r3, #0
    3118:	d002      	beq.n	3120 <timer_stop+0x4c>
		return ERR_DENIED;
    311a:	f06f 0310 	mvn.w	r3, #16
    311e:	e007      	b.n	3130 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    3120:	687b      	ldr	r3, [r7, #4]
    3122:	681b      	ldr	r3, [r3, #0]
    3124:	68db      	ldr	r3, [r3, #12]
    3126:	687a      	ldr	r2, [r7, #4]
    3128:	3204      	adds	r2, #4
    312a:	4610      	mov	r0, r2
    312c:	4798      	blx	r3

	return ERR_NONE;
    312e:	2300      	movs	r3, #0
}
    3130:	4618      	mov	r0, r3
    3132:	3708      	adds	r7, #8
    3134:	46bd      	mov	sp, r7
    3136:	bd80      	pop	{r7, pc}
    3138:	000134d4 	.word	0x000134d4
    313c:	00003e05 	.word	0x00003e05

00003140 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    3140:	b580      	push	{r7, lr}
    3142:	b084      	sub	sp, #16
    3144:	af00      	add	r7, sp, #0
    3146:	6078      	str	r0, [r7, #4]
    3148:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    314a:	687b      	ldr	r3, [r7, #4]
    314c:	2b00      	cmp	r3, #0
    314e:	d008      	beq.n	3162 <timer_add_task+0x22>
    3150:	683b      	ldr	r3, [r7, #0]
    3152:	2b00      	cmp	r3, #0
    3154:	d005      	beq.n	3162 <timer_add_task+0x22>
    3156:	687b      	ldr	r3, [r7, #4]
    3158:	681b      	ldr	r3, [r3, #0]
    315a:	2b00      	cmp	r3, #0
    315c:	d001      	beq.n	3162 <timer_add_task+0x22>
    315e:	2301      	movs	r3, #1
    3160:	e000      	b.n	3164 <timer_add_task+0x24>
    3162:	2300      	movs	r3, #0
    3164:	f003 0301 	and.w	r3, r3, #1
    3168:	b2db      	uxtb	r3, r3
    316a:	227b      	movs	r2, #123	; 0x7b
    316c:	492f      	ldr	r1, [pc, #188]	; (322c <timer_add_task+0xec>)
    316e:	4618      	mov	r0, r3
    3170:	4b2f      	ldr	r3, [pc, #188]	; (3230 <timer_add_task+0xf0>)
    3172:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3174:	687b      	ldr	r3, [r7, #4]
    3176:	7f1b      	ldrb	r3, [r3, #28]
    3178:	b2db      	uxtb	r3, r3
    317a:	f043 0301 	orr.w	r3, r3, #1
    317e:	b2da      	uxtb	r2, r3
    3180:	687b      	ldr	r3, [r7, #4]
    3182:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    3184:	687b      	ldr	r3, [r7, #4]
    3186:	3318      	adds	r3, #24
    3188:	6839      	ldr	r1, [r7, #0]
    318a:	4618      	mov	r0, r3
    318c:	4b29      	ldr	r3, [pc, #164]	; (3234 <timer_add_task+0xf4>)
    318e:	4798      	blx	r3
    3190:	4603      	mov	r3, r0
    3192:	2b00      	cmp	r3, #0
    3194:	d00f      	beq.n	31b6 <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3196:	687b      	ldr	r3, [r7, #4]
    3198:	7f1b      	ldrb	r3, [r3, #28]
    319a:	b2db      	uxtb	r3, r3
    319c:	f023 0301 	bic.w	r3, r3, #1
    31a0:	b2da      	uxtb	r2, r3
    31a2:	687b      	ldr	r3, [r7, #4]
    31a4:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    31a6:	2280      	movs	r2, #128	; 0x80
    31a8:	4920      	ldr	r1, [pc, #128]	; (322c <timer_add_task+0xec>)
    31aa:	2000      	movs	r0, #0
    31ac:	4b20      	ldr	r3, [pc, #128]	; (3230 <timer_add_task+0xf0>)
    31ae:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    31b0:	f06f 0311 	mvn.w	r3, #17
    31b4:	e035      	b.n	3222 <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    31b6:	687b      	ldr	r3, [r7, #4]
    31b8:	695a      	ldr	r2, [r3, #20]
    31ba:	683b      	ldr	r3, [r7, #0]
    31bc:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    31be:	687b      	ldr	r3, [r7, #4]
    31c0:	f103 0018 	add.w	r0, r3, #24
    31c4:	687b      	ldr	r3, [r7, #4]
    31c6:	695b      	ldr	r3, [r3, #20]
    31c8:	461a      	mov	r2, r3
    31ca:	6839      	ldr	r1, [r7, #0]
    31cc:	4b1a      	ldr	r3, [pc, #104]	; (3238 <timer_add_task+0xf8>)
    31ce:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	7f1b      	ldrb	r3, [r3, #28]
    31d4:	b2db      	uxtb	r3, r3
    31d6:	f023 0301 	bic.w	r3, r3, #1
    31da:	b2da      	uxtb	r2, r3
    31dc:	687b      	ldr	r3, [r7, #4]
    31de:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    31e0:	687b      	ldr	r3, [r7, #4]
    31e2:	7f1b      	ldrb	r3, [r3, #28]
    31e4:	b2db      	uxtb	r3, r3
    31e6:	f003 0302 	and.w	r3, r3, #2
    31ea:	2b00      	cmp	r3, #0
    31ec:	d018      	beq.n	3220 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    31ee:	f107 030c 	add.w	r3, r7, #12
    31f2:	4618      	mov	r0, r3
    31f4:	4b11      	ldr	r3, [pc, #68]	; (323c <timer_add_task+0xfc>)
    31f6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    31f8:	687b      	ldr	r3, [r7, #4]
    31fa:	7f1b      	ldrb	r3, [r3, #28]
    31fc:	b2db      	uxtb	r3, r3
    31fe:	f023 0302 	bic.w	r3, r3, #2
    3202:	b2da      	uxtb	r2, r3
    3204:	687b      	ldr	r3, [r7, #4]
    3206:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    3208:	687b      	ldr	r3, [r7, #4]
    320a:	681b      	ldr	r3, [r3, #0]
    320c:	69db      	ldr	r3, [r3, #28]
    320e:	687a      	ldr	r2, [r7, #4]
    3210:	3204      	adds	r2, #4
    3212:	4610      	mov	r0, r2
    3214:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    3216:	f107 030c 	add.w	r3, r7, #12
    321a:	4618      	mov	r0, r3
    321c:	4b08      	ldr	r3, [pc, #32]	; (3240 <timer_add_task+0x100>)
    321e:	4798      	blx	r3
	}

	return ERR_NONE;
    3220:	2300      	movs	r3, #0
}
    3222:	4618      	mov	r0, r3
    3224:	3710      	adds	r7, #16
    3226:	46bd      	mov	sp, r7
    3228:	bd80      	pop	{r7, pc}
    322a:	bf00      	nop
    322c:	000134d4 	.word	0x000134d4
    3230:	00003e05 	.word	0x00003e05
    3234:	00003e2d 	.word	0x00003e2d
    3238:	00003341 	.word	0x00003341
    323c:	0000b9e1 	.word	0x0000b9e1
    3240:	0000ba07 	.word	0x0000ba07

00003244 <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    3244:	b580      	push	{r7, lr}
    3246:	b084      	sub	sp, #16
    3248:	af00      	add	r7, sp, #0
    324a:	6078      	str	r0, [r7, #4]
    324c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    324e:	687b      	ldr	r3, [r7, #4]
    3250:	2b00      	cmp	r3, #0
    3252:	d008      	beq.n	3266 <timer_remove_task+0x22>
    3254:	683b      	ldr	r3, [r7, #0]
    3256:	2b00      	cmp	r3, #0
    3258:	d005      	beq.n	3266 <timer_remove_task+0x22>
    325a:	687b      	ldr	r3, [r7, #4]
    325c:	681b      	ldr	r3, [r3, #0]
    325e:	2b00      	cmp	r3, #0
    3260:	d001      	beq.n	3266 <timer_remove_task+0x22>
    3262:	2301      	movs	r3, #1
    3264:	e000      	b.n	3268 <timer_remove_task+0x24>
    3266:	2300      	movs	r3, #0
    3268:	f003 0301 	and.w	r3, r3, #1
    326c:	b2db      	uxtb	r3, r3
    326e:	2296      	movs	r2, #150	; 0x96
    3270:	492d      	ldr	r1, [pc, #180]	; (3328 <timer_remove_task+0xe4>)
    3272:	4618      	mov	r0, r3
    3274:	4b2d      	ldr	r3, [pc, #180]	; (332c <timer_remove_task+0xe8>)
    3276:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    3278:	687b      	ldr	r3, [r7, #4]
    327a:	7f1b      	ldrb	r3, [r3, #28]
    327c:	b2db      	uxtb	r3, r3
    327e:	f043 0301 	orr.w	r3, r3, #1
    3282:	b2da      	uxtb	r2, r3
    3284:	687b      	ldr	r3, [r7, #4]
    3286:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    3288:	687b      	ldr	r3, [r7, #4]
    328a:	3318      	adds	r3, #24
    328c:	6839      	ldr	r1, [r7, #0]
    328e:	4618      	mov	r0, r3
    3290:	4b27      	ldr	r3, [pc, #156]	; (3330 <timer_remove_task+0xec>)
    3292:	4798      	blx	r3
    3294:	4603      	mov	r3, r0
    3296:	f083 0301 	eor.w	r3, r3, #1
    329a:	b2db      	uxtb	r3, r3
    329c:	2b00      	cmp	r3, #0
    329e:	d00f      	beq.n	32c0 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    32a0:	687b      	ldr	r3, [r7, #4]
    32a2:	7f1b      	ldrb	r3, [r3, #28]
    32a4:	b2db      	uxtb	r3, r3
    32a6:	f023 0301 	bic.w	r3, r3, #1
    32aa:	b2da      	uxtb	r2, r3
    32ac:	687b      	ldr	r3, [r7, #4]
    32ae:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    32b0:	229b      	movs	r2, #155	; 0x9b
    32b2:	491d      	ldr	r1, [pc, #116]	; (3328 <timer_remove_task+0xe4>)
    32b4:	2000      	movs	r0, #0
    32b6:	4b1d      	ldr	r3, [pc, #116]	; (332c <timer_remove_task+0xe8>)
    32b8:	4798      	blx	r3
		return ERR_NOT_FOUND;
    32ba:	f06f 0309 	mvn.w	r3, #9
    32be:	e02e      	b.n	331e <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    32c0:	687b      	ldr	r3, [r7, #4]
    32c2:	3318      	adds	r3, #24
    32c4:	6839      	ldr	r1, [r7, #0]
    32c6:	4618      	mov	r0, r3
    32c8:	4b1a      	ldr	r3, [pc, #104]	; (3334 <timer_remove_task+0xf0>)
    32ca:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    32cc:	687b      	ldr	r3, [r7, #4]
    32ce:	7f1b      	ldrb	r3, [r3, #28]
    32d0:	b2db      	uxtb	r3, r3
    32d2:	f023 0301 	bic.w	r3, r3, #1
    32d6:	b2da      	uxtb	r2, r3
    32d8:	687b      	ldr	r3, [r7, #4]
    32da:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    32dc:	687b      	ldr	r3, [r7, #4]
    32de:	7f1b      	ldrb	r3, [r3, #28]
    32e0:	b2db      	uxtb	r3, r3
    32e2:	f003 0302 	and.w	r3, r3, #2
    32e6:	2b00      	cmp	r3, #0
    32e8:	d018      	beq.n	331c <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    32ea:	f107 030c 	add.w	r3, r7, #12
    32ee:	4618      	mov	r0, r3
    32f0:	4b11      	ldr	r3, [pc, #68]	; (3338 <timer_remove_task+0xf4>)
    32f2:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    32f4:	687b      	ldr	r3, [r7, #4]
    32f6:	7f1b      	ldrb	r3, [r3, #28]
    32f8:	b2db      	uxtb	r3, r3
    32fa:	f023 0302 	bic.w	r3, r3, #2
    32fe:	b2da      	uxtb	r2, r3
    3300:	687b      	ldr	r3, [r7, #4]
    3302:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    3304:	687b      	ldr	r3, [r7, #4]
    3306:	681b      	ldr	r3, [r3, #0]
    3308:	69db      	ldr	r3, [r3, #28]
    330a:	687a      	ldr	r2, [r7, #4]
    330c:	3204      	adds	r2, #4
    330e:	4610      	mov	r0, r2
    3310:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    3312:	f107 030c 	add.w	r3, r7, #12
    3316:	4618      	mov	r0, r3
    3318:	4b08      	ldr	r3, [pc, #32]	; (333c <timer_remove_task+0xf8>)
    331a:	4798      	blx	r3
	}

	return ERR_NONE;
    331c:	2300      	movs	r3, #0
}
    331e:	4618      	mov	r0, r3
    3320:	3710      	adds	r7, #16
    3322:	46bd      	mov	sp, r7
    3324:	bd80      	pop	{r7, pc}
    3326:	bf00      	nop
    3328:	000134d4 	.word	0x000134d4
    332c:	00003e05 	.word	0x00003e05
    3330:	00003e2d 	.word	0x00003e2d
    3334:	00003f8f 	.word	0x00003f8f
    3338:	0000b9e1 	.word	0x0000b9e1
    333c:	0000ba07 	.word	0x0000ba07

00003340 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    3340:	b580      	push	{r7, lr}
    3342:	b088      	sub	sp, #32
    3344:	af00      	add	r7, sp, #0
    3346:	60f8      	str	r0, [r7, #12]
    3348:	60b9      	str	r1, [r7, #8]
    334a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    334c:	2300      	movs	r3, #0
    334e:	61bb      	str	r3, [r7, #24]
    3350:	68f8      	ldr	r0, [r7, #12]
    3352:	4b23      	ldr	r3, [pc, #140]	; (33e0 <timer_add_timer_task+0xa0>)
    3354:	4798      	blx	r3
    3356:	6138      	str	r0, [r7, #16]

	if (!head) {
    3358:	693b      	ldr	r3, [r7, #16]
    335a:	2b00      	cmp	r3, #0
    335c:	d104      	bne.n	3368 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    335e:	68b9      	ldr	r1, [r7, #8]
    3360:	68f8      	ldr	r0, [r7, #12]
    3362:	4b20      	ldr	r3, [pc, #128]	; (33e4 <timer_add_timer_task+0xa4>)
    3364:	4798      	blx	r3
		return;
    3366:	e037      	b.n	33d8 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3368:	693b      	ldr	r3, [r7, #16]
    336a:	61fb      	str	r3, [r7, #28]
    336c:	e022      	b.n	33b4 <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    336e:	69fb      	ldr	r3, [r7, #28]
    3370:	685a      	ldr	r2, [r3, #4]
    3372:	687b      	ldr	r3, [r7, #4]
    3374:	429a      	cmp	r2, r3
    3376:	d808      	bhi.n	338a <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    3378:	69fb      	ldr	r3, [r7, #28]
    337a:	689a      	ldr	r2, [r3, #8]
    337c:	69fb      	ldr	r3, [r7, #28]
    337e:	6859      	ldr	r1, [r3, #4]
    3380:	687b      	ldr	r3, [r7, #4]
    3382:	1acb      	subs	r3, r1, r3
    3384:	4413      	add	r3, r2
    3386:	617b      	str	r3, [r7, #20]
    3388:	e009      	b.n	339e <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    338a:	69fb      	ldr	r3, [r7, #28]
    338c:	689a      	ldr	r2, [r3, #8]
    338e:	69fb      	ldr	r3, [r7, #28]
    3390:	685b      	ldr	r3, [r3, #4]
    3392:	441a      	add	r2, r3
    3394:	687b      	ldr	r3, [r7, #4]
    3396:	425b      	negs	r3, r3
    3398:	4413      	add	r3, r2
    339a:	3301      	adds	r3, #1
    339c:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    339e:	68bb      	ldr	r3, [r7, #8]
    33a0:	689a      	ldr	r2, [r3, #8]
    33a2:	697b      	ldr	r3, [r7, #20]
    33a4:	429a      	cmp	r2, r3
    33a6:	d909      	bls.n	33bc <timer_add_timer_task+0x7c>
			break;
		prev = it;
    33a8:	69fb      	ldr	r3, [r7, #28]
    33aa:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    33ac:	69f8      	ldr	r0, [r7, #28]
    33ae:	4b0e      	ldr	r3, [pc, #56]	; (33e8 <timer_add_timer_task+0xa8>)
    33b0:	4798      	blx	r3
    33b2:	61f8      	str	r0, [r7, #28]
    33b4:	69fb      	ldr	r3, [r7, #28]
    33b6:	2b00      	cmp	r3, #0
    33b8:	d1d9      	bne.n	336e <timer_add_timer_task+0x2e>
    33ba:	e000      	b.n	33be <timer_add_timer_task+0x7e>
			break;
    33bc:	bf00      	nop
	}

	if (it == head) {
    33be:	69fa      	ldr	r2, [r7, #28]
    33c0:	693b      	ldr	r3, [r7, #16]
    33c2:	429a      	cmp	r2, r3
    33c4:	d104      	bne.n	33d0 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    33c6:	68b9      	ldr	r1, [r7, #8]
    33c8:	68f8      	ldr	r0, [r7, #12]
    33ca:	4b06      	ldr	r3, [pc, #24]	; (33e4 <timer_add_timer_task+0xa4>)
    33cc:	4798      	blx	r3
    33ce:	e003      	b.n	33d8 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    33d0:	68b9      	ldr	r1, [r7, #8]
    33d2:	69b8      	ldr	r0, [r7, #24]
    33d4:	4b05      	ldr	r3, [pc, #20]	; (33ec <timer_add_timer_task+0xac>)
    33d6:	4798      	blx	r3
	}
}
    33d8:	3720      	adds	r7, #32
    33da:	46bd      	mov	sp, r7
    33dc:	bd80      	pop	{r7, pc}
    33de:	bf00      	nop
    33e0:	00002fc5 	.word	0x00002fc5
    33e4:	00003e65 	.word	0x00003e65
    33e8:	00002fdd 	.word	0x00002fdd
    33ec:	00003ebd 	.word	0x00003ebd

000033f0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    33f0:	b580      	push	{r7, lr}
    33f2:	b086      	sub	sp, #24
    33f4:	af00      	add	r7, sp, #0
    33f6:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    33f8:	687b      	ldr	r3, [r7, #4]
    33fa:	3b04      	subs	r3, #4
    33fc:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    33fe:	693b      	ldr	r3, [r7, #16]
    3400:	3318      	adds	r3, #24
    3402:	4618      	mov	r0, r3
    3404:	4b27      	ldr	r3, [pc, #156]	; (34a4 <timer_process_counted+0xb4>)
    3406:	4798      	blx	r3
    3408:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    340a:	693b      	ldr	r3, [r7, #16]
    340c:	695b      	ldr	r3, [r3, #20]
    340e:	1c5a      	adds	r2, r3, #1
    3410:	693b      	ldr	r3, [r7, #16]
    3412:	615a      	str	r2, [r3, #20]
    3414:	693b      	ldr	r3, [r7, #16]
    3416:	695b      	ldr	r3, [r3, #20]
    3418:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    341a:	693b      	ldr	r3, [r7, #16]
    341c:	7f1b      	ldrb	r3, [r3, #28]
    341e:	b2db      	uxtb	r3, r3
    3420:	f003 0301 	and.w	r3, r3, #1
    3424:	2b00      	cmp	r3, #0
    3426:	d106      	bne.n	3436 <timer_process_counted+0x46>
    3428:	693b      	ldr	r3, [r7, #16]
    342a:	7f1b      	ldrb	r3, [r3, #28]
    342c:	b2db      	uxtb	r3, r3
    342e:	f003 0302 	and.w	r3, r3, #2
    3432:	2b00      	cmp	r3, #0
    3434:	d027      	beq.n	3486 <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    3436:	693b      	ldr	r3, [r7, #16]
    3438:	7f1b      	ldrb	r3, [r3, #28]
    343a:	b2db      	uxtb	r3, r3
    343c:	f043 0302 	orr.w	r3, r3, #2
    3440:	b2da      	uxtb	r2, r3
    3442:	693b      	ldr	r3, [r7, #16]
    3444:	771a      	strb	r2, [r3, #28]
		return;
    3446:	e029      	b.n	349c <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    3448:	697b      	ldr	r3, [r7, #20]
    344a:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    344c:	693b      	ldr	r3, [r7, #16]
    344e:	3318      	adds	r3, #24
    3450:	4618      	mov	r0, r3
    3452:	4b15      	ldr	r3, [pc, #84]	; (34a8 <timer_process_counted+0xb8>)
    3454:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    3456:	68bb      	ldr	r3, [r7, #8]
    3458:	7c1b      	ldrb	r3, [r3, #16]
    345a:	2b01      	cmp	r3, #1
    345c:	d109      	bne.n	3472 <timer_process_counted+0x82>
			tmp->time_label = time;
    345e:	68bb      	ldr	r3, [r7, #8]
    3460:	68fa      	ldr	r2, [r7, #12]
    3462:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    3464:	693b      	ldr	r3, [r7, #16]
    3466:	3318      	adds	r3, #24
    3468:	68fa      	ldr	r2, [r7, #12]
    346a:	68b9      	ldr	r1, [r7, #8]
    346c:	4618      	mov	r0, r3
    346e:	4b0f      	ldr	r3, [pc, #60]	; (34ac <timer_process_counted+0xbc>)
    3470:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    3472:	693b      	ldr	r3, [r7, #16]
    3474:	3318      	adds	r3, #24
    3476:	4618      	mov	r0, r3
    3478:	4b0a      	ldr	r3, [pc, #40]	; (34a4 <timer_process_counted+0xb4>)
    347a:	4798      	blx	r3
    347c:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    347e:	68bb      	ldr	r3, [r7, #8]
    3480:	68db      	ldr	r3, [r3, #12]
    3482:	68b8      	ldr	r0, [r7, #8]
    3484:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    3486:	697b      	ldr	r3, [r7, #20]
    3488:	2b00      	cmp	r3, #0
    348a:	d007      	beq.n	349c <timer_process_counted+0xac>
    348c:	697b      	ldr	r3, [r7, #20]
    348e:	685b      	ldr	r3, [r3, #4]
    3490:	68fa      	ldr	r2, [r7, #12]
    3492:	1ad2      	subs	r2, r2, r3
    3494:	697b      	ldr	r3, [r7, #20]
    3496:	689b      	ldr	r3, [r3, #8]
    3498:	429a      	cmp	r2, r3
    349a:	d2d5      	bcs.n	3448 <timer_process_counted+0x58>
	}
}
    349c:	3718      	adds	r7, #24
    349e:	46bd      	mov	sp, r7
    34a0:	bd80      	pop	{r7, pc}
    34a2:	bf00      	nop
    34a4:	00002fc5 	.word	0x00002fc5
    34a8:	00003f5d 	.word	0x00003f5d
    34ac:	00003341 	.word	0x00003341

000034b0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    34b0:	b480      	push	{r7}
    34b2:	b085      	sub	sp, #20
    34b4:	af00      	add	r7, sp, #0
    34b6:	4603      	mov	r3, r0
    34b8:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    34ba:	2300      	movs	r3, #0
    34bc:	73fb      	strb	r3, [r7, #15]
    34be:	e029      	b.n	3514 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    34c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    34c4:	4a19      	ldr	r2, [pc, #100]	; (352c <_usb_d_find_ep+0x7c>)
    34c6:	015b      	lsls	r3, r3, #5
    34c8:	4413      	add	r3, r2
    34ca:	3301      	adds	r3, #1
    34cc:	781b      	ldrb	r3, [r3, #0]
    34ce:	79fa      	ldrb	r2, [r7, #7]
    34d0:	429a      	cmp	r2, r3
    34d2:	d102      	bne.n	34da <_usb_d_find_ep+0x2a>
			return i;
    34d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    34d8:	e022      	b.n	3520 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    34da:	f997 300f 	ldrsb.w	r3, [r7, #15]
    34de:	4a13      	ldr	r2, [pc, #76]	; (352c <_usb_d_find_ep+0x7c>)
    34e0:	015b      	lsls	r3, r3, #5
    34e2:	4413      	add	r3, r2
    34e4:	781b      	ldrb	r3, [r3, #0]
    34e6:	2b00      	cmp	r3, #0
    34e8:	d10e      	bne.n	3508 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    34ea:	79fb      	ldrb	r3, [r7, #7]
    34ec:	f003 030f 	and.w	r3, r3, #15
    34f0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    34f4:	490d      	ldr	r1, [pc, #52]	; (352c <_usb_d_find_ep+0x7c>)
    34f6:	0152      	lsls	r2, r2, #5
    34f8:	440a      	add	r2, r1
    34fa:	3201      	adds	r2, #1
    34fc:	7812      	ldrb	r2, [r2, #0]
    34fe:	4293      	cmp	r3, r2
    3500:	d102      	bne.n	3508 <_usb_d_find_ep+0x58>
			return i;
    3502:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3506:	e00b      	b.n	3520 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3508:	f997 300f 	ldrsb.w	r3, [r7, #15]
    350c:	b2db      	uxtb	r3, r3
    350e:	3301      	adds	r3, #1
    3510:	b2db      	uxtb	r3, r3
    3512:	73fb      	strb	r3, [r7, #15]
    3514:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3518:	2b03      	cmp	r3, #3
    351a:	ddd1      	ble.n	34c0 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    351c:	f04f 33ff 	mov.w	r3, #4294967295
}
    3520:	4618      	mov	r0, r3
    3522:	3714      	adds	r7, #20
    3524:	46bd      	mov	sp, r7
    3526:	f85d 7b04 	ldr.w	r7, [sp], #4
    352a:	4770      	bx	lr
    352c:	20000808 	.word	0x20000808

00003530 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    3530:	b580      	push	{r7, lr}
    3532:	b088      	sub	sp, #32
    3534:	af00      	add	r7, sp, #0
    3536:	60ba      	str	r2, [r7, #8]
    3538:	607b      	str	r3, [r7, #4]
    353a:	4603      	mov	r3, r0
    353c:	73fb      	strb	r3, [r7, #15]
    353e:	460b      	mov	r3, r1
    3540:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    3542:	68bb      	ldr	r3, [r7, #8]
    3544:	617b      	str	r3, [r7, #20]
    3546:	687b      	ldr	r3, [r7, #4]
    3548:	61bb      	str	r3, [r7, #24]
    354a:	7bbb      	ldrb	r3, [r7, #14]
    354c:	2b00      	cmp	r3, #0
    354e:	d004      	beq.n	355a <_usb_d_trans+0x2a>
    3550:	7bfb      	ldrb	r3, [r7, #15]
    3552:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3556:	b2db      	uxtb	r3, r3
    3558:	e003      	b.n	3562 <_usb_d_trans+0x32>
    355a:	7bfb      	ldrb	r3, [r7, #15]
    355c:	f003 030f 	and.w	r3, r3, #15
    3560:	b2db      	uxtb	r3, r3
    3562:	773b      	strb	r3, [r7, #28]
    3564:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3568:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    356a:	f107 0314 	add.w	r3, r7, #20
    356e:	4618      	mov	r0, r3
    3570:	4b03      	ldr	r3, [pc, #12]	; (3580 <_usb_d_trans+0x50>)
    3572:	4798      	blx	r3
    3574:	4603      	mov	r3, r0
}
    3576:	4618      	mov	r0, r3
    3578:	3720      	adds	r7, #32
    357a:	46bd      	mov	sp, r7
    357c:	bd80      	pop	{r7, pc}
    357e:	bf00      	nop
    3580:	0000b015 	.word	0x0000b015

00003584 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    3584:	b480      	push	{r7}
    3586:	b085      	sub	sp, #20
    3588:	af00      	add	r7, sp, #0
    358a:	60f8      	str	r0, [r7, #12]
    358c:	60b9      	str	r1, [r7, #8]
    358e:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    3590:	2300      	movs	r3, #0
}
    3592:	4618      	mov	r0, r3
    3594:	3714      	adds	r7, #20
    3596:	46bd      	mov	sp, r7
    3598:	f85d 7b04 	ldr.w	r7, [sp], #4
    359c:	4770      	bx	lr
	...

000035a0 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    35a0:	b580      	push	{r7, lr}
    35a2:	b086      	sub	sp, #24
    35a4:	af00      	add	r7, sp, #0
    35a6:	4603      	mov	r3, r0
    35a8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    35aa:	79fb      	ldrb	r3, [r7, #7]
    35ac:	4618      	mov	r0, r3
    35ae:	4b2a      	ldr	r3, [pc, #168]	; (3658 <usb_d_cb_trans_setup+0xb8>)
    35b0:	4798      	blx	r3
    35b2:	4603      	mov	r3, r0
    35b4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    35b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    35ba:	015b      	lsls	r3, r3, #5
    35bc:	4a27      	ldr	r2, [pc, #156]	; (365c <usb_d_cb_trans_setup+0xbc>)
    35be:	4413      	add	r3, r2
    35c0:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    35c2:	693b      	ldr	r3, [r7, #16]
    35c4:	330c      	adds	r3, #12
    35c6:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    35c8:	79fb      	ldrb	r3, [r7, #7]
    35ca:	68f9      	ldr	r1, [r7, #12]
    35cc:	4618      	mov	r0, r3
    35ce:	4b24      	ldr	r3, [pc, #144]	; (3660 <usb_d_cb_trans_setup+0xc0>)
    35d0:	4798      	blx	r3
    35d2:	4603      	mov	r3, r0
    35d4:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    35d6:	7afb      	ldrb	r3, [r7, #11]
    35d8:	2b08      	cmp	r3, #8
    35da:	d00d      	beq.n	35f8 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    35dc:	79fb      	ldrb	r3, [r7, #7]
    35de:	2101      	movs	r1, #1
    35e0:	4618      	mov	r0, r3
    35e2:	4b20      	ldr	r3, [pc, #128]	; (3664 <usb_d_cb_trans_setup+0xc4>)
    35e4:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    35e6:	79fb      	ldrb	r3, [r7, #7]
    35e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    35ec:	b2db      	uxtb	r3, r3
    35ee:	2101      	movs	r1, #1
    35f0:	4618      	mov	r0, r3
    35f2:	4b1c      	ldr	r3, [pc, #112]	; (3664 <usb_d_cb_trans_setup+0xc4>)
    35f4:	4798      	blx	r3
		return;
    35f6:	e02b      	b.n	3650 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    35f8:	79fb      	ldrb	r3, [r7, #7]
    35fa:	2100      	movs	r1, #0
    35fc:	4618      	mov	r0, r3
    35fe:	4b19      	ldr	r3, [pc, #100]	; (3664 <usb_d_cb_trans_setup+0xc4>)
    3600:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    3602:	79fb      	ldrb	r3, [r7, #7]
    3604:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3608:	b2db      	uxtb	r3, r3
    360a:	2100      	movs	r1, #0
    360c:	4618      	mov	r0, r3
    360e:	4b15      	ldr	r3, [pc, #84]	; (3664 <usb_d_cb_trans_setup+0xc4>)
    3610:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    3612:	693b      	ldr	r3, [r7, #16]
    3614:	2201      	movs	r2, #1
    3616:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    3618:	693b      	ldr	r3, [r7, #16]
    361a:	695b      	ldr	r3, [r3, #20]
    361c:	79fa      	ldrb	r2, [r7, #7]
    361e:	68f9      	ldr	r1, [r7, #12]
    3620:	4610      	mov	r0, r2
    3622:	4798      	blx	r3
    3624:	4603      	mov	r3, r0
    3626:	f083 0301 	eor.w	r3, r3, #1
    362a:	b2db      	uxtb	r3, r3
    362c:	2b00      	cmp	r3, #0
    362e:	d00f      	beq.n	3650 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    3630:	693b      	ldr	r3, [r7, #16]
    3632:	2205      	movs	r2, #5
    3634:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3636:	79fb      	ldrb	r3, [r7, #7]
    3638:	2101      	movs	r1, #1
    363a:	4618      	mov	r0, r3
    363c:	4b09      	ldr	r3, [pc, #36]	; (3664 <usb_d_cb_trans_setup+0xc4>)
    363e:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3640:	79fb      	ldrb	r3, [r7, #7]
    3642:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3646:	b2db      	uxtb	r3, r3
    3648:	2101      	movs	r1, #1
    364a:	4618      	mov	r0, r3
    364c:	4b05      	ldr	r3, [pc, #20]	; (3664 <usb_d_cb_trans_setup+0xc4>)
    364e:	4798      	blx	r3
	}
}
    3650:	3718      	adds	r7, #24
    3652:	46bd      	mov	sp, r7
    3654:	bd80      	pop	{r7, pc}
    3656:	bf00      	nop
    3658:	000034b1 	.word	0x000034b1
    365c:	20000808 	.word	0x20000808
    3660:	0000af6d 	.word	0x0000af6d
    3664:	0000ade5 	.word	0x0000ade5

00003668 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    3668:	b580      	push	{r7, lr}
    366a:	b084      	sub	sp, #16
    366c:	af00      	add	r7, sp, #0
    366e:	4603      	mov	r3, r0
    3670:	6039      	str	r1, [r7, #0]
    3672:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3674:	79fb      	ldrb	r3, [r7, #7]
    3676:	4618      	mov	r0, r3
    3678:	4b0d      	ldr	r3, [pc, #52]	; (36b0 <usb_d_cb_trans_more+0x48>)
    367a:	4798      	blx	r3
    367c:	4603      	mov	r3, r0
    367e:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3680:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3684:	015b      	lsls	r3, r3, #5
    3686:	4a0b      	ldr	r2, [pc, #44]	; (36b4 <usb_d_cb_trans_more+0x4c>)
    3688:	4413      	add	r3, r2
    368a:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    368c:	68bb      	ldr	r3, [r7, #8]
    368e:	789b      	ldrb	r3, [r3, #2]
    3690:	2b03      	cmp	r3, #3
    3692:	d107      	bne.n	36a4 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    3694:	68bb      	ldr	r3, [r7, #8]
    3696:	699b      	ldr	r3, [r3, #24]
    3698:	79fa      	ldrb	r2, [r7, #7]
    369a:	6839      	ldr	r1, [r7, #0]
    369c:	4610      	mov	r0, r2
    369e:	4798      	blx	r3
    36a0:	4603      	mov	r3, r0
    36a2:	e000      	b.n	36a6 <usb_d_cb_trans_more+0x3e>
	}
	return false;
    36a4:	2300      	movs	r3, #0
}
    36a6:	4618      	mov	r0, r3
    36a8:	3710      	adds	r7, #16
    36aa:	46bd      	mov	sp, r7
    36ac:	bd80      	pop	{r7, pc}
    36ae:	bf00      	nop
    36b0:	000034b1 	.word	0x000034b1
    36b4:	20000808 	.word	0x20000808

000036b8 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    36b8:	b590      	push	{r4, r7, lr}
    36ba:	b087      	sub	sp, #28
    36bc:	af02      	add	r7, sp, #8
    36be:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    36c0:	687b      	ldr	r3, [r7, #4]
    36c2:	789b      	ldrb	r3, [r3, #2]
    36c4:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    36c6:	687b      	ldr	r3, [r7, #4]
    36c8:	7b1b      	ldrb	r3, [r3, #12]
    36ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    36ce:	2b00      	cmp	r3, #0
    36d0:	bf14      	ite	ne
    36d2:	2301      	movne	r3, #1
    36d4:	2300      	moveq	r3, #0
    36d6:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    36d8:	7bfb      	ldrb	r3, [r7, #15]
    36da:	2b03      	cmp	r3, #3
    36dc:	d13a      	bne.n	3754 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    36de:	687b      	ldr	r3, [r7, #4]
    36e0:	69db      	ldr	r3, [r3, #28]
    36e2:	687a      	ldr	r2, [r7, #4]
    36e4:	7850      	ldrb	r0, [r2, #1]
    36e6:	687a      	ldr	r2, [r7, #4]
    36e8:	320c      	adds	r2, #12
    36ea:	2101      	movs	r1, #1
    36ec:	4798      	blx	r3
    36ee:	4603      	mov	r3, r0
    36f0:	737b      	strb	r3, [r7, #13]
		if (err) {
    36f2:	7b7b      	ldrb	r3, [r7, #13]
    36f4:	2b00      	cmp	r3, #0
    36f6:	d015      	beq.n	3724 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    36f8:	687b      	ldr	r3, [r7, #4]
    36fa:	2205      	movs	r2, #5
    36fc:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    36fe:	687b      	ldr	r3, [r7, #4]
    3700:	2202      	movs	r2, #2
    3702:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    3704:	7bbb      	ldrb	r3, [r7, #14]
    3706:	2b00      	cmp	r3, #0
    3708:	d002      	beq.n	3710 <usb_d_ctrl_trans_done+0x58>
    370a:	687b      	ldr	r3, [r7, #4]
    370c:	785b      	ldrb	r3, [r3, #1]
    370e:	e004      	b.n	371a <usb_d_ctrl_trans_done+0x62>
    3710:	687b      	ldr	r3, [r7, #4]
    3712:	785b      	ldrb	r3, [r3, #1]
    3714:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3718:	b2db      	uxtb	r3, r3
    371a:	2101      	movs	r1, #1
    371c:	4618      	mov	r0, r3
    371e:	4b15      	ldr	r3, [pc, #84]	; (3774 <usb_d_ctrl_trans_done+0xbc>)
    3720:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    3722:	e022      	b.n	376a <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3724:	687b      	ldr	r3, [r7, #4]
    3726:	2204      	movs	r2, #4
    3728:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    372a:	687b      	ldr	r3, [r7, #4]
    372c:	7858      	ldrb	r0, [r3, #1]
    372e:	7bbb      	ldrb	r3, [r7, #14]
    3730:	2b00      	cmp	r3, #0
    3732:	bf14      	ite	ne
    3734:	2301      	movne	r3, #1
    3736:	2300      	moveq	r3, #0
    3738:	b2db      	uxtb	r3, r3
    373a:	f083 0301 	eor.w	r3, r3, #1
    373e:	b2db      	uxtb	r3, r3
    3740:	f003 0301 	and.w	r3, r3, #1
    3744:	b2d9      	uxtb	r1, r3
    3746:	2301      	movs	r3, #1
    3748:	9300      	str	r3, [sp, #0]
    374a:	2300      	movs	r3, #0
    374c:	2200      	movs	r2, #0
    374e:	4c0a      	ldr	r4, [pc, #40]	; (3778 <usb_d_ctrl_trans_done+0xc0>)
    3750:	47a0      	blx	r4
}
    3752:	e00a      	b.n	376a <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    3754:	687b      	ldr	r3, [r7, #4]
    3756:	69db      	ldr	r3, [r3, #28]
    3758:	687a      	ldr	r2, [r7, #4]
    375a:	7850      	ldrb	r0, [r2, #1]
    375c:	687a      	ldr	r2, [r7, #4]
    375e:	320c      	adds	r2, #12
    3760:	2100      	movs	r1, #0
    3762:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3764:	687b      	ldr	r3, [r7, #4]
    3766:	2202      	movs	r2, #2
    3768:	709a      	strb	r2, [r3, #2]
}
    376a:	bf00      	nop
    376c:	3714      	adds	r7, #20
    376e:	46bd      	mov	sp, r7
    3770:	bd90      	pop	{r4, r7, pc}
    3772:	bf00      	nop
    3774:	0000ade5 	.word	0x0000ade5
    3778:	00003531 	.word	0x00003531

0000377c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    377c:	b580      	push	{r7, lr}
    377e:	b086      	sub	sp, #24
    3780:	af00      	add	r7, sp, #0
    3782:	4603      	mov	r3, r0
    3784:	60b9      	str	r1, [r7, #8]
    3786:	607a      	str	r2, [r7, #4]
    3788:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    378a:	7bfb      	ldrb	r3, [r7, #15]
    378c:	4618      	mov	r0, r3
    378e:	4b2f      	ldr	r3, [pc, #188]	; (384c <_usb_d_cb_trans_done+0xd0>)
    3790:	4798      	blx	r3
    3792:	4603      	mov	r3, r0
    3794:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3796:	f997 3017 	ldrsb.w	r3, [r7, #23]
    379a:	015b      	lsls	r3, r3, #5
    379c:	4a2c      	ldr	r2, [pc, #176]	; (3850 <_usb_d_cb_trans_done+0xd4>)
    379e:	4413      	add	r3, r2
    37a0:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    37a2:	68bb      	ldr	r3, [r7, #8]
    37a4:	2b00      	cmp	r3, #0
    37a6:	d10e      	bne.n	37c6 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    37a8:	693b      	ldr	r3, [r7, #16]
    37aa:	2200      	movs	r2, #0
    37ac:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    37ae:	693b      	ldr	r3, [r7, #16]
    37b0:	781b      	ldrb	r3, [r3, #0]
    37b2:	2b00      	cmp	r3, #0
    37b4:	d103      	bne.n	37be <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    37b6:	6938      	ldr	r0, [r7, #16]
    37b8:	4b26      	ldr	r3, [pc, #152]	; (3854 <_usb_d_cb_trans_done+0xd8>)
    37ba:	4798      	blx	r3
			return;
    37bc:	e043      	b.n	3846 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    37be:	693b      	ldr	r3, [r7, #16]
    37c0:	2201      	movs	r2, #1
    37c2:	709a      	strb	r2, [r3, #2]
    37c4:	e038      	b.n	3838 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    37c6:	68bb      	ldr	r3, [r7, #8]
    37c8:	2b01      	cmp	r3, #1
    37ca:	d113      	bne.n	37f4 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    37cc:	693b      	ldr	r3, [r7, #16]
    37ce:	2202      	movs	r2, #2
    37d0:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    37d2:	693b      	ldr	r3, [r7, #16]
    37d4:	781b      	ldrb	r3, [r3, #0]
    37d6:	2b00      	cmp	r3, #0
    37d8:	d108      	bne.n	37ec <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    37da:	693b      	ldr	r3, [r7, #16]
    37dc:	2202      	movs	r2, #2
    37de:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    37e0:	7bfb      	ldrb	r3, [r7, #15]
    37e2:	2100      	movs	r1, #0
    37e4:	4618      	mov	r0, r3
    37e6:	4b1c      	ldr	r3, [pc, #112]	; (3858 <_usb_d_cb_trans_done+0xdc>)
    37e8:	4798      	blx	r3
    37ea:	e025      	b.n	3838 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    37ec:	693b      	ldr	r3, [r7, #16]
    37ee:	2205      	movs	r2, #5
    37f0:	709a      	strb	r2, [r3, #2]
    37f2:	e021      	b.n	3838 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    37f4:	68bb      	ldr	r3, [r7, #8]
    37f6:	2b02      	cmp	r3, #2
    37f8:	d10e      	bne.n	3818 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    37fa:	693b      	ldr	r3, [r7, #16]
    37fc:	2204      	movs	r2, #4
    37fe:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3800:	693b      	ldr	r3, [r7, #16]
    3802:	781b      	ldrb	r3, [r3, #0]
    3804:	2b00      	cmp	r3, #0
    3806:	d103      	bne.n	3810 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3808:	693b      	ldr	r3, [r7, #16]
    380a:	2202      	movs	r2, #2
    380c:	709a      	strb	r2, [r3, #2]
			return;
    380e:	e01a      	b.n	3846 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3810:	693b      	ldr	r3, [r7, #16]
    3812:	2201      	movs	r2, #1
    3814:	709a      	strb	r2, [r3, #2]
    3816:	e00f      	b.n	3838 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3818:	68bb      	ldr	r3, [r7, #8]
    381a:	2b03      	cmp	r3, #3
    381c:	d106      	bne.n	382c <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    381e:	693b      	ldr	r3, [r7, #16]
    3820:	2200      	movs	r2, #0
    3822:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3824:	693b      	ldr	r3, [r7, #16]
    3826:	2205      	movs	r2, #5
    3828:	70da      	strb	r2, [r3, #3]
    382a:	e005      	b.n	3838 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    382c:	693b      	ldr	r3, [r7, #16]
    382e:	2206      	movs	r2, #6
    3830:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    3832:	693b      	ldr	r3, [r7, #16]
    3834:	2206      	movs	r2, #6
    3836:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3838:	693b      	ldr	r3, [r7, #16]
    383a:	69db      	ldr	r3, [r3, #28]
    383c:	693a      	ldr	r2, [r7, #16]
    383e:	78d1      	ldrb	r1, [r2, #3]
    3840:	687a      	ldr	r2, [r7, #4]
    3842:	7bf8      	ldrb	r0, [r7, #15]
    3844:	4798      	blx	r3
}
    3846:	3718      	adds	r7, #24
    3848:	46bd      	mov	sp, r7
    384a:	bd80      	pop	{r7, pc}
    384c:	000034b1 	.word	0x000034b1
    3850:	20000808 	.word	0x20000808
    3854:	000036b9 	.word	0x000036b9
    3858:	0000ade5 	.word	0x0000ade5

0000385c <usb_d_init>:

int32_t usb_d_init(void)
{
    385c:	b580      	push	{r7, lr}
    385e:	b082      	sub	sp, #8
    3860:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    3862:	4b21      	ldr	r3, [pc, #132]	; (38e8 <usb_d_init+0x8c>)
    3864:	4798      	blx	r3
    3866:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3868:	683b      	ldr	r3, [r7, #0]
    386a:	2b00      	cmp	r3, #0
    386c:	da01      	bge.n	3872 <usb_d_init+0x16>
		return rc;
    386e:	683b      	ldr	r3, [r7, #0]
    3870:	e036      	b.n	38e0 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    3872:	2280      	movs	r2, #128	; 0x80
    3874:	2100      	movs	r1, #0
    3876:	481d      	ldr	r0, [pc, #116]	; (38ec <usb_d_init+0x90>)
    3878:	4b1d      	ldr	r3, [pc, #116]	; (38f0 <usb_d_init+0x94>)
    387a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    387c:	2300      	movs	r3, #0
    387e:	71fb      	strb	r3, [r7, #7]
    3880:	e01e      	b.n	38c0 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    3882:	79fb      	ldrb	r3, [r7, #7]
    3884:	4a19      	ldr	r2, [pc, #100]	; (38ec <usb_d_init+0x90>)
    3886:	015b      	lsls	r3, r3, #5
    3888:	4413      	add	r3, r2
    388a:	3301      	adds	r3, #1
    388c:	22ff      	movs	r2, #255	; 0xff
    388e:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3890:	79fb      	ldrb	r3, [r7, #7]
    3892:	4a16      	ldr	r2, [pc, #88]	; (38ec <usb_d_init+0x90>)
    3894:	015b      	lsls	r3, r3, #5
    3896:	4413      	add	r3, r2
    3898:	3314      	adds	r3, #20
    389a:	4a16      	ldr	r2, [pc, #88]	; (38f4 <usb_d_init+0x98>)
    389c:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    389e:	79fb      	ldrb	r3, [r7, #7]
    38a0:	4a12      	ldr	r2, [pc, #72]	; (38ec <usb_d_init+0x90>)
    38a2:	015b      	lsls	r3, r3, #5
    38a4:	4413      	add	r3, r2
    38a6:	3318      	adds	r3, #24
    38a8:	4a12      	ldr	r2, [pc, #72]	; (38f4 <usb_d_init+0x98>)
    38aa:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    38ac:	79fb      	ldrb	r3, [r7, #7]
    38ae:	4a0f      	ldr	r2, [pc, #60]	; (38ec <usb_d_init+0x90>)
    38b0:	015b      	lsls	r3, r3, #5
    38b2:	4413      	add	r3, r2
    38b4:	331c      	adds	r3, #28
    38b6:	4a0f      	ldr	r2, [pc, #60]	; (38f4 <usb_d_init+0x98>)
    38b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    38ba:	79fb      	ldrb	r3, [r7, #7]
    38bc:	3301      	adds	r3, #1
    38be:	71fb      	strb	r3, [r7, #7]
    38c0:	79fb      	ldrb	r3, [r7, #7]
    38c2:	2b03      	cmp	r3, #3
    38c4:	d9dd      	bls.n	3882 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    38c6:	490c      	ldr	r1, [pc, #48]	; (38f8 <usb_d_init+0x9c>)
    38c8:	2000      	movs	r0, #0
    38ca:	4b0c      	ldr	r3, [pc, #48]	; (38fc <usb_d_init+0xa0>)
    38cc:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    38ce:	490c      	ldr	r1, [pc, #48]	; (3900 <usb_d_init+0xa4>)
    38d0:	2001      	movs	r0, #1
    38d2:	4b0a      	ldr	r3, [pc, #40]	; (38fc <usb_d_init+0xa0>)
    38d4:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    38d6:	490b      	ldr	r1, [pc, #44]	; (3904 <usb_d_init+0xa8>)
    38d8:	2002      	movs	r0, #2
    38da:	4b08      	ldr	r3, [pc, #32]	; (38fc <usb_d_init+0xa0>)
    38dc:	4798      	blx	r3
	return ERR_NONE;
    38de:	2300      	movs	r3, #0
}
    38e0:	4618      	mov	r0, r3
    38e2:	3708      	adds	r7, #8
    38e4:	46bd      	mov	sp, r7
    38e6:	bd80      	pop	{r7, pc}
    38e8:	0000a62d 	.word	0x0000a62d
    38ec:	20000808 	.word	0x20000808
    38f0:	000130f5 	.word	0x000130f5
    38f4:	00003585 	.word	0x00003585
    38f8:	000035a1 	.word	0x000035a1
    38fc:	0000b275 	.word	0x0000b275
    3900:	00003669 	.word	0x00003669
    3904:	0000377d 	.word	0x0000377d

00003908 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3908:	b580      	push	{r7, lr}
    390a:	b082      	sub	sp, #8
    390c:	af00      	add	r7, sp, #0
    390e:	4603      	mov	r3, r0
    3910:	6039      	str	r1, [r7, #0]
    3912:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3914:	79fb      	ldrb	r3, [r7, #7]
    3916:	6839      	ldr	r1, [r7, #0]
    3918:	4618      	mov	r0, r3
    391a:	4b03      	ldr	r3, [pc, #12]	; (3928 <usb_d_register_callback+0x20>)
    391c:	4798      	blx	r3
}
    391e:	bf00      	nop
    3920:	3708      	adds	r7, #8
    3922:	46bd      	mov	sp, r7
    3924:	bd80      	pop	{r7, pc}
    3926:	bf00      	nop
    3928:	0000b22d 	.word	0x0000b22d

0000392c <usb_d_enable>:

int32_t usb_d_enable(void)
{
    392c:	b580      	push	{r7, lr}
    392e:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3930:	4b02      	ldr	r3, [pc, #8]	; (393c <usb_d_enable+0x10>)
    3932:	4798      	blx	r3
    3934:	4603      	mov	r3, r0
}
    3936:	4618      	mov	r0, r3
    3938:	bd80      	pop	{r7, pc}
    393a:	bf00      	nop
    393c:	0000a71d 	.word	0x0000a71d

00003940 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3940:	b580      	push	{r7, lr}
    3942:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3944:	4b01      	ldr	r3, [pc, #4]	; (394c <usb_d_attach+0xc>)
    3946:	4798      	blx	r3
}
    3948:	bf00      	nop
    394a:	bd80      	pop	{r7, pc}
    394c:	0000a7a1 	.word	0x0000a7a1

00003950 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3950:	b580      	push	{r7, lr}
    3952:	b082      	sub	sp, #8
    3954:	af00      	add	r7, sp, #0
    3956:	4603      	mov	r3, r0
    3958:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    395a:	79fb      	ldrb	r3, [r7, #7]
    395c:	4618      	mov	r0, r3
    395e:	4b03      	ldr	r3, [pc, #12]	; (396c <usb_d_set_address+0x1c>)
    3960:	4798      	blx	r3
}
    3962:	bf00      	nop
    3964:	3708      	adds	r7, #8
    3966:	46bd      	mov	sp, r7
    3968:	bd80      	pop	{r7, pc}
    396a:	bf00      	nop
    396c:	0000a7b5 	.word	0x0000a7b5

00003970 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3970:	b580      	push	{r7, lr}
    3972:	b082      	sub	sp, #8
    3974:	af00      	add	r7, sp, #0
    3976:	4603      	mov	r3, r0
    3978:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    397a:	79fb      	ldrb	r3, [r7, #7]
    397c:	b29b      	uxth	r3, r3
    397e:	461a      	mov	r2, r3
    3980:	2100      	movs	r1, #0
    3982:	2000      	movs	r0, #0
    3984:	4b03      	ldr	r3, [pc, #12]	; (3994 <usb_d_ep0_init+0x24>)
    3986:	4798      	blx	r3
    3988:	4603      	mov	r3, r0
}
    398a:	4618      	mov	r0, r3
    398c:	3708      	adds	r7, #8
    398e:	46bd      	mov	sp, r7
    3990:	bd80      	pop	{r7, pc}
    3992:	bf00      	nop
    3994:	00003999 	.word	0x00003999

00003998 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3998:	b580      	push	{r7, lr}
    399a:	b086      	sub	sp, #24
    399c:	af00      	add	r7, sp, #0
    399e:	4603      	mov	r3, r0
    39a0:	71fb      	strb	r3, [r7, #7]
    39a2:	460b      	mov	r3, r1
    39a4:	71bb      	strb	r3, [r7, #6]
    39a6:	4613      	mov	r3, r2
    39a8:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    39aa:	79fb      	ldrb	r3, [r7, #7]
    39ac:	4618      	mov	r0, r3
    39ae:	4b1e      	ldr	r3, [pc, #120]	; (3a28 <usb_d_ep_init+0x90>)
    39b0:	4798      	blx	r3
    39b2:	4603      	mov	r3, r0
    39b4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    39b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    39ba:	015b      	lsls	r3, r3, #5
    39bc:	4a1b      	ldr	r2, [pc, #108]	; (3a2c <usb_d_ep_init+0x94>)
    39be:	4413      	add	r3, r2
    39c0:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    39c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    39c6:	2b00      	cmp	r3, #0
    39c8:	db02      	blt.n	39d0 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    39ca:	f06f 0313 	mvn.w	r3, #19
    39ce:	e027      	b.n	3a20 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    39d0:	20ff      	movs	r0, #255	; 0xff
    39d2:	4b15      	ldr	r3, [pc, #84]	; (3a28 <usb_d_ep_init+0x90>)
    39d4:	4798      	blx	r3
    39d6:	4603      	mov	r3, r0
    39d8:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    39da:	f997 3017 	ldrsb.w	r3, [r7, #23]
    39de:	2b00      	cmp	r3, #0
    39e0:	da02      	bge.n	39e8 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    39e2:	f06f 0314 	mvn.w	r3, #20
    39e6:	e01b      	b.n	3a20 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    39e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
    39ec:	015b      	lsls	r3, r3, #5
    39ee:	4a0f      	ldr	r2, [pc, #60]	; (3a2c <usb_d_ep_init+0x94>)
    39f0:	4413      	add	r3, r2
    39f2:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    39f4:	88ba      	ldrh	r2, [r7, #4]
    39f6:	79b9      	ldrb	r1, [r7, #6]
    39f8:	79fb      	ldrb	r3, [r7, #7]
    39fa:	4618      	mov	r0, r3
    39fc:	4b0c      	ldr	r3, [pc, #48]	; (3a30 <usb_d_ep_init+0x98>)
    39fe:	4798      	blx	r3
    3a00:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3a02:	68fb      	ldr	r3, [r7, #12]
    3a04:	2b00      	cmp	r3, #0
    3a06:	da01      	bge.n	3a0c <usb_d_ep_init+0x74>
		return rc;
    3a08:	68fb      	ldr	r3, [r7, #12]
    3a0a:	e009      	b.n	3a20 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3a0c:	693b      	ldr	r3, [r7, #16]
    3a0e:	79fa      	ldrb	r2, [r7, #7]
    3a10:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    3a12:	79bb      	ldrb	r3, [r7, #6]
    3a14:	f003 0303 	and.w	r3, r3, #3
    3a18:	b2da      	uxtb	r2, r3
    3a1a:	693b      	ldr	r3, [r7, #16]
    3a1c:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    3a1e:	2300      	movs	r3, #0
}
    3a20:	4618      	mov	r0, r3
    3a22:	3718      	adds	r7, #24
    3a24:	46bd      	mov	sp, r7
    3a26:	bd80      	pop	{r7, pc}
    3a28:	000034b1 	.word	0x000034b1
    3a2c:	20000808 	.word	0x20000808
    3a30:	0000a855 	.word	0x0000a855

00003a34 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3a34:	b580      	push	{r7, lr}
    3a36:	b084      	sub	sp, #16
    3a38:	af00      	add	r7, sp, #0
    3a3a:	4603      	mov	r3, r0
    3a3c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3a3e:	79fb      	ldrb	r3, [r7, #7]
    3a40:	4618      	mov	r0, r3
    3a42:	4b0d      	ldr	r3, [pc, #52]	; (3a78 <usb_d_ep_deinit+0x44>)
    3a44:	4798      	blx	r3
    3a46:	4603      	mov	r3, r0
    3a48:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3a4e:	015b      	lsls	r3, r3, #5
    3a50:	4a0a      	ldr	r2, [pc, #40]	; (3a7c <usb_d_ep_deinit+0x48>)
    3a52:	4413      	add	r3, r2
    3a54:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	db07      	blt.n	3a6e <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    3a5e:	79fb      	ldrb	r3, [r7, #7]
    3a60:	4618      	mov	r0, r3
    3a62:	4b07      	ldr	r3, [pc, #28]	; (3a80 <usb_d_ep_deinit+0x4c>)
    3a64:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3a66:	68bb      	ldr	r3, [r7, #8]
    3a68:	22ff      	movs	r2, #255	; 0xff
    3a6a:	705a      	strb	r2, [r3, #1]
    3a6c:	e000      	b.n	3a70 <usb_d_ep_deinit+0x3c>
		return;
    3a6e:	bf00      	nop
}
    3a70:	3710      	adds	r7, #16
    3a72:	46bd      	mov	sp, r7
    3a74:	bd80      	pop	{r7, pc}
    3a76:	bf00      	nop
    3a78:	000034b1 	.word	0x000034b1
    3a7c:	20000808 	.word	0x20000808
    3a80:	0000a989 	.word	0x0000a989

00003a84 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3a84:	b580      	push	{r7, lr}
    3a86:	b086      	sub	sp, #24
    3a88:	af00      	add	r7, sp, #0
    3a8a:	4603      	mov	r3, r0
    3a8c:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3a8e:	79fb      	ldrb	r3, [r7, #7]
    3a90:	4618      	mov	r0, r3
    3a92:	4b15      	ldr	r3, [pc, #84]	; (3ae8 <usb_d_ep_enable+0x64>)
    3a94:	4798      	blx	r3
    3a96:	4603      	mov	r3, r0
    3a98:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3a9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3a9e:	015b      	lsls	r3, r3, #5
    3aa0:	4a12      	ldr	r2, [pc, #72]	; (3aec <usb_d_ep_enable+0x68>)
    3aa2:	4413      	add	r3, r2
    3aa4:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3aa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3aaa:	2b00      	cmp	r3, #0
    3aac:	da02      	bge.n	3ab4 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    3aae:	f06f 0311 	mvn.w	r3, #17
    3ab2:	e014      	b.n	3ade <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3ab4:	693b      	ldr	r3, [r7, #16]
    3ab6:	781b      	ldrb	r3, [r3, #0]
    3ab8:	2b00      	cmp	r3, #0
    3aba:	d101      	bne.n	3ac0 <usb_d_ep_enable+0x3c>
    3abc:	2202      	movs	r2, #2
    3abe:	e000      	b.n	3ac2 <usb_d_ep_enable+0x3e>
    3ac0:	2201      	movs	r2, #1
    3ac2:	693b      	ldr	r3, [r7, #16]
    3ac4:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3ac6:	79fb      	ldrb	r3, [r7, #7]
    3ac8:	4618      	mov	r0, r3
    3aca:	4b09      	ldr	r3, [pc, #36]	; (3af0 <usb_d_ep_enable+0x6c>)
    3acc:	4798      	blx	r3
    3ace:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3ad0:	68fb      	ldr	r3, [r7, #12]
    3ad2:	2b00      	cmp	r3, #0
    3ad4:	da02      	bge.n	3adc <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3ad6:	693b      	ldr	r3, [r7, #16]
    3ad8:	2200      	movs	r2, #0
    3ada:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3adc:	68fb      	ldr	r3, [r7, #12]
}
    3ade:	4618      	mov	r0, r3
    3ae0:	3718      	adds	r7, #24
    3ae2:	46bd      	mov	sp, r7
    3ae4:	bd80      	pop	{r7, pc}
    3ae6:	bf00      	nop
    3ae8:	000034b1 	.word	0x000034b1
    3aec:	20000808 	.word	0x20000808
    3af0:	0000aa6d 	.word	0x0000aa6d

00003af4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3af4:	b590      	push	{r4, r7, lr}
    3af6:	b08d      	sub	sp, #52	; 0x34
    3af8:	af02      	add	r7, sp, #8
    3afa:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3afc:	687b      	ldr	r3, [r7, #4]
    3afe:	7a1b      	ldrb	r3, [r3, #8]
    3b00:	4618      	mov	r0, r3
    3b02:	4b51      	ldr	r3, [pc, #324]	; (3c48 <usb_d_ep_transfer+0x154>)
    3b04:	4798      	blx	r3
    3b06:	4603      	mov	r3, r0
    3b08:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3b0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3b0e:	015b      	lsls	r3, r3, #5
    3b10:	4a4e      	ldr	r2, [pc, #312]	; (3c4c <usb_d_ep_transfer+0x158>)
    3b12:	4413      	add	r3, r2
    3b14:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3b16:	687b      	ldr	r3, [r7, #4]
    3b18:	7a1b      	ldrb	r3, [r3, #8]
    3b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3b1e:	2b00      	cmp	r3, #0
    3b20:	bf14      	ite	ne
    3b22:	2301      	movne	r3, #1
    3b24:	2300      	moveq	r3, #0
    3b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3b2a:	687b      	ldr	r3, [r7, #4]
    3b2c:	7a5b      	ldrb	r3, [r3, #9]
    3b2e:	2b00      	cmp	r3, #0
    3b30:	bf14      	ite	ne
    3b32:	2301      	movne	r3, #1
    3b34:	2300      	moveq	r3, #0
    3b36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3b3a:	687b      	ldr	r3, [r7, #4]
    3b3c:	685b      	ldr	r3, [r3, #4]
    3b3e:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3b40:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3b44:	2b00      	cmp	r3, #0
    3b46:	da02      	bge.n	3b4e <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3b48:	f06f 0311 	mvn.w	r3, #17
    3b4c:	e077      	b.n	3c3e <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    3b4e:	f107 0308 	add.w	r3, r7, #8
    3b52:	4618      	mov	r0, r3
    3b54:	4b3e      	ldr	r3, [pc, #248]	; (3c50 <usb_d_ep_transfer+0x15c>)
    3b56:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3b58:	69bb      	ldr	r3, [r7, #24]
    3b5a:	789b      	ldrb	r3, [r3, #2]
    3b5c:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    3b5e:	7bfb      	ldrb	r3, [r7, #15]
    3b60:	b2db      	uxtb	r3, r3
    3b62:	2b01      	cmp	r3, #1
    3b64:	d10c      	bne.n	3b80 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3b66:	69bb      	ldr	r3, [r7, #24]
    3b68:	2203      	movs	r2, #3
    3b6a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3b6c:	f107 0308 	add.w	r3, r7, #8
    3b70:	4618      	mov	r0, r3
    3b72:	4b38      	ldr	r3, [pc, #224]	; (3c54 <usb_d_ep_transfer+0x160>)
    3b74:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3b76:	69bb      	ldr	r3, [r7, #24]
    3b78:	781b      	ldrb	r3, [r3, #0]
    3b7a:	2b00      	cmp	r3, #0
    3b7c:	d151      	bne.n	3c22 <usb_d_ep_transfer+0x12e>
    3b7e:	e017      	b.n	3bb0 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3b80:	f107 0308 	add.w	r3, r7, #8
    3b84:	4618      	mov	r0, r3
    3b86:	4b33      	ldr	r3, [pc, #204]	; (3c54 <usb_d_ep_transfer+0x160>)
    3b88:	4798      	blx	r3
		switch (state) {
    3b8a:	7bfb      	ldrb	r3, [r7, #15]
    3b8c:	b2db      	uxtb	r3, r3
    3b8e:	2b05      	cmp	r3, #5
    3b90:	d004      	beq.n	3b9c <usb_d_ep_transfer+0xa8>
    3b92:	2b06      	cmp	r3, #6
    3b94:	d004      	beq.n	3ba0 <usb_d_ep_transfer+0xac>
    3b96:	2b00      	cmp	r3, #0
    3b98:	d005      	beq.n	3ba6 <usb_d_ep_transfer+0xb2>
    3b9a:	e007      	b.n	3bac <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3b9c:	2302      	movs	r3, #2
    3b9e:	e04e      	b.n	3c3e <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3ba0:	f06f 030f 	mvn.w	r3, #15
    3ba4:	e04b      	b.n	3c3e <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3ba6:	f06f 0312 	mvn.w	r3, #18
    3baa:	e048      	b.n	3c3e <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3bac:	2301      	movs	r3, #1
    3bae:	e046      	b.n	3c3e <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3bb0:	69bb      	ldr	r3, [r7, #24]
    3bb2:	7c9b      	ldrb	r3, [r3, #18]
    3bb4:	b29a      	uxth	r2, r3
    3bb6:	69bb      	ldr	r3, [r7, #24]
    3bb8:	7cdb      	ldrb	r3, [r3, #19]
    3bba:	b29b      	uxth	r3, r3
    3bbc:	021b      	lsls	r3, r3, #8
    3bbe:	b29b      	uxth	r3, r3
    3bc0:	4413      	add	r3, r2
    3bc2:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    3bc4:	8afb      	ldrh	r3, [r7, #22]
    3bc6:	2b00      	cmp	r3, #0
    3bc8:	d10b      	bne.n	3be2 <usb_d_ep_transfer+0xee>
			dir                 = true;
    3bca:	2301      	movs	r3, #1
    3bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3bd0:	2300      	movs	r3, #0
    3bd2:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    3bd4:	2301      	movs	r3, #1
    3bd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3bda:	69bb      	ldr	r3, [r7, #24]
    3bdc:	2204      	movs	r2, #4
    3bde:	709a      	strb	r2, [r3, #2]
    3be0:	e01f      	b.n	3c22 <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    3be2:	69bb      	ldr	r3, [r7, #24]
    3be4:	7b1b      	ldrb	r3, [r3, #12]
    3be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3bea:	2b00      	cmp	r3, #0
    3bec:	bf14      	ite	ne
    3bee:	2301      	movne	r3, #1
    3bf0:	2300      	moveq	r3, #0
    3bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3bf6:	8afa      	ldrh	r2, [r7, #22]
    3bf8:	6a3b      	ldr	r3, [r7, #32]
    3bfa:	429a      	cmp	r2, r3
    3bfc:	d201      	bcs.n	3c02 <usb_d_ep_transfer+0x10e>
				len = req_len;
    3bfe:	8afb      	ldrh	r3, [r7, #22]
    3c00:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    3c02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3c06:	2b00      	cmp	r3, #0
    3c08:	d008      	beq.n	3c1c <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3c0a:	8afa      	ldrh	r2, [r7, #22]
    3c0c:	6a3b      	ldr	r3, [r7, #32]
    3c0e:	429a      	cmp	r2, r3
    3c10:	bf8c      	ite	hi
    3c12:	2301      	movhi	r3, #1
    3c14:	2300      	movls	r3, #0
    3c16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3c1a:	e002      	b.n	3c22 <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3c1c:	2300      	movs	r3, #0
    3c1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3c22:	687b      	ldr	r3, [r7, #4]
    3c24:	7a18      	ldrb	r0, [r3, #8]
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	681a      	ldr	r2, [r3, #0]
    3c2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3c2e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    3c32:	9300      	str	r3, [sp, #0]
    3c34:	6a3b      	ldr	r3, [r7, #32]
    3c36:	4c08      	ldr	r4, [pc, #32]	; (3c58 <usb_d_ep_transfer+0x164>)
    3c38:	47a0      	blx	r4
    3c3a:	6138      	str	r0, [r7, #16]
	return rc;
    3c3c:	693b      	ldr	r3, [r7, #16]
}
    3c3e:	4618      	mov	r0, r3
    3c40:	372c      	adds	r7, #44	; 0x2c
    3c42:	46bd      	mov	sp, r7
    3c44:	bd90      	pop	{r4, r7, pc}
    3c46:	bf00      	nop
    3c48:	000034b1 	.word	0x000034b1
    3c4c:	20000808 	.word	0x20000808
    3c50:	0000b9e1 	.word	0x0000b9e1
    3c54:	0000ba07 	.word	0x0000ba07
    3c58:	00003531 	.word	0x00003531

00003c5c <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3c5c:	b580      	push	{r7, lr}
    3c5e:	b084      	sub	sp, #16
    3c60:	af00      	add	r7, sp, #0
    3c62:	4603      	mov	r3, r0
    3c64:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3c66:	79fb      	ldrb	r3, [r7, #7]
    3c68:	4618      	mov	r0, r3
    3c6a:	4b0e      	ldr	r3, [pc, #56]	; (3ca4 <usb_d_ep_abort+0x48>)
    3c6c:	4798      	blx	r3
    3c6e:	4603      	mov	r3, r0
    3c70:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3c76:	015b      	lsls	r3, r3, #5
    3c78:	4a0b      	ldr	r2, [pc, #44]	; (3ca8 <usb_d_ep_abort+0x4c>)
    3c7a:	4413      	add	r3, r2
    3c7c:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3c82:	2b00      	cmp	r3, #0
    3c84:	db0a      	blt.n	3c9c <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3c86:	79fb      	ldrb	r3, [r7, #7]
    3c88:	4618      	mov	r0, r3
    3c8a:	4b08      	ldr	r3, [pc, #32]	; (3cac <usb_d_ep_abort+0x50>)
    3c8c:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3c8e:	68bb      	ldr	r3, [r7, #8]
    3c90:	2201      	movs	r2, #1
    3c92:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3c94:	68bb      	ldr	r3, [r7, #8]
    3c96:	2204      	movs	r2, #4
    3c98:	70da      	strb	r2, [r3, #3]
    3c9a:	e000      	b.n	3c9e <usb_d_ep_abort+0x42>
		return;
    3c9c:	bf00      	nop
}
    3c9e:	3710      	adds	r7, #16
    3ca0:	46bd      	mov	sp, r7
    3ca2:	bd80      	pop	{r7, pc}
    3ca4:	000034b1 	.word	0x000034b1
    3ca8:	20000808 	.word	0x20000808
    3cac:	0000b1d9 	.word	0x0000b1d9

00003cb0 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3cb0:	b580      	push	{r7, lr}
    3cb2:	b086      	sub	sp, #24
    3cb4:	af00      	add	r7, sp, #0
    3cb6:	4603      	mov	r3, r0
    3cb8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3cba:	79fb      	ldrb	r3, [r7, #7]
    3cbc:	4618      	mov	r0, r3
    3cbe:	4b1a      	ldr	r3, [pc, #104]	; (3d28 <_usb_d_ep_halt_clr+0x78>)
    3cc0:	4798      	blx	r3
    3cc2:	4603      	mov	r3, r0
    3cc4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3cca:	015b      	lsls	r3, r3, #5
    3ccc:	4a17      	ldr	r2, [pc, #92]	; (3d2c <_usb_d_ep_halt_clr+0x7c>)
    3cce:	4413      	add	r3, r2
    3cd0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3cd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	da02      	bge.n	3ce0 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3cda:	f06f 0311 	mvn.w	r3, #17
    3cde:	e01f      	b.n	3d20 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3ce0:	79fb      	ldrb	r3, [r7, #7]
    3ce2:	2102      	movs	r1, #2
    3ce4:	4618      	mov	r0, r3
    3ce6:	4b12      	ldr	r3, [pc, #72]	; (3d30 <_usb_d_ep_halt_clr+0x80>)
    3ce8:	4798      	blx	r3
    3cea:	4603      	mov	r3, r0
    3cec:	2b00      	cmp	r3, #0
    3cee:	d016      	beq.n	3d1e <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3cf0:	79fb      	ldrb	r3, [r7, #7]
    3cf2:	2100      	movs	r1, #0
    3cf4:	4618      	mov	r0, r3
    3cf6:	4b0e      	ldr	r3, [pc, #56]	; (3d30 <_usb_d_ep_halt_clr+0x80>)
    3cf8:	4798      	blx	r3
    3cfa:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3cfc:	68fb      	ldr	r3, [r7, #12]
    3cfe:	2b00      	cmp	r3, #0
    3d00:	da01      	bge.n	3d06 <_usb_d_ep_halt_clr+0x56>
			return rc;
    3d02:	68fb      	ldr	r3, [r7, #12]
    3d04:	e00c      	b.n	3d20 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3d06:	693b      	ldr	r3, [r7, #16]
    3d08:	2201      	movs	r2, #1
    3d0a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3d0c:	693b      	ldr	r3, [r7, #16]
    3d0e:	2203      	movs	r2, #3
    3d10:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    3d12:	693b      	ldr	r3, [r7, #16]
    3d14:	69db      	ldr	r3, [r3, #28]
    3d16:	79f8      	ldrb	r0, [r7, #7]
    3d18:	2200      	movs	r2, #0
    3d1a:	2103      	movs	r1, #3
    3d1c:	4798      	blx	r3
	}
	return ERR_NONE;
    3d1e:	2300      	movs	r3, #0
}
    3d20:	4618      	mov	r0, r3
    3d22:	3718      	adds	r7, #24
    3d24:	46bd      	mov	sp, r7
    3d26:	bd80      	pop	{r7, pc}
    3d28:	000034b1 	.word	0x000034b1
    3d2c:	20000808 	.word	0x20000808
    3d30:	0000ade5 	.word	0x0000ade5

00003d34 <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3d34:	b580      	push	{r7, lr}
    3d36:	b082      	sub	sp, #8
    3d38:	af00      	add	r7, sp, #0
    3d3a:	4603      	mov	r3, r0
    3d3c:	460a      	mov	r2, r1
    3d3e:	71fb      	strb	r3, [r7, #7]
    3d40:	4613      	mov	r3, r2
    3d42:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3d44:	79bb      	ldrb	r3, [r7, #6]
    3d46:	2b00      	cmp	r3, #0
    3d48:	d105      	bne.n	3d56 <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3d4a:	79fb      	ldrb	r3, [r7, #7]
    3d4c:	4618      	mov	r0, r3
    3d4e:	4b0c      	ldr	r3, [pc, #48]	; (3d80 <usb_d_ep_halt+0x4c>)
    3d50:	4798      	blx	r3
    3d52:	4603      	mov	r3, r0
    3d54:	e00f      	b.n	3d76 <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3d56:	79bb      	ldrb	r3, [r7, #6]
    3d58:	2b01      	cmp	r3, #1
    3d5a:	d106      	bne.n	3d6a <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3d5c:	79fb      	ldrb	r3, [r7, #7]
    3d5e:	2101      	movs	r1, #1
    3d60:	4618      	mov	r0, r3
    3d62:	4b08      	ldr	r3, [pc, #32]	; (3d84 <usb_d_ep_halt+0x50>)
    3d64:	4798      	blx	r3
    3d66:	4603      	mov	r3, r0
    3d68:	e005      	b.n	3d76 <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3d6a:	79fb      	ldrb	r3, [r7, #7]
    3d6c:	2102      	movs	r1, #2
    3d6e:	4618      	mov	r0, r3
    3d70:	4b04      	ldr	r3, [pc, #16]	; (3d84 <usb_d_ep_halt+0x50>)
    3d72:	4798      	blx	r3
    3d74:	4603      	mov	r3, r0
	}
}
    3d76:	4618      	mov	r0, r3
    3d78:	3708      	adds	r7, #8
    3d7a:	46bd      	mov	sp, r7
    3d7c:	bd80      	pop	{r7, pc}
    3d7e:	bf00      	nop
    3d80:	00003cb1 	.word	0x00003cb1
    3d84:	0000ade5 	.word	0x0000ade5

00003d88 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3d88:	b580      	push	{r7, lr}
    3d8a:	b086      	sub	sp, #24
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	4603      	mov	r3, r0
    3d90:	603a      	str	r2, [r7, #0]
    3d92:	71fb      	strb	r3, [r7, #7]
    3d94:	460b      	mov	r3, r1
    3d96:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3d98:	79fb      	ldrb	r3, [r7, #7]
    3d9a:	4618      	mov	r0, r3
    3d9c:	4b16      	ldr	r3, [pc, #88]	; (3df8 <usb_d_ep_register_callback+0x70>)
    3d9e:	4798      	blx	r3
    3da0:	4603      	mov	r3, r0
    3da2:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3da4:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3da8:	015b      	lsls	r3, r3, #5
    3daa:	4a14      	ldr	r2, [pc, #80]	; (3dfc <usb_d_ep_register_callback+0x74>)
    3dac:	4413      	add	r3, r2
    3dae:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    3db0:	683b      	ldr	r3, [r7, #0]
    3db2:	2b00      	cmp	r3, #0
    3db4:	d001      	beq.n	3dba <usb_d_ep_register_callback+0x32>
    3db6:	683b      	ldr	r3, [r7, #0]
    3db8:	e000      	b.n	3dbc <usb_d_ep_register_callback+0x34>
    3dba:	4b11      	ldr	r3, [pc, #68]	; (3e00 <usb_d_ep_register_callback+0x78>)
    3dbc:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    3dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3dc2:	2b00      	cmp	r3, #0
    3dc4:	db13      	blt.n	3dee <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    3dc6:	79bb      	ldrb	r3, [r7, #6]
    3dc8:	2b01      	cmp	r3, #1
    3dca:	d008      	beq.n	3dde <usb_d_ep_register_callback+0x56>
    3dcc:	2b02      	cmp	r3, #2
    3dce:	d00a      	beq.n	3de6 <usb_d_ep_register_callback+0x5e>
    3dd0:	2b00      	cmp	r3, #0
    3dd2:	d000      	beq.n	3dd6 <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    3dd4:	e00c      	b.n	3df0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    3dd6:	693b      	ldr	r3, [r7, #16]
    3dd8:	68fa      	ldr	r2, [r7, #12]
    3dda:	615a      	str	r2, [r3, #20]
		break;
    3ddc:	e008      	b.n	3df0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    3dde:	693b      	ldr	r3, [r7, #16]
    3de0:	68fa      	ldr	r2, [r7, #12]
    3de2:	619a      	str	r2, [r3, #24]
		break;
    3de4:	e004      	b.n	3df0 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    3de6:	693b      	ldr	r3, [r7, #16]
    3de8:	68fa      	ldr	r2, [r7, #12]
    3dea:	61da      	str	r2, [r3, #28]
		break;
    3dec:	e000      	b.n	3df0 <usb_d_ep_register_callback+0x68>
		return;
    3dee:	bf00      	nop
	}
}
    3df0:	3718      	adds	r7, #24
    3df2:	46bd      	mov	sp, r7
    3df4:	bd80      	pop	{r7, pc}
    3df6:	bf00      	nop
    3df8:	000034b1 	.word	0x000034b1
    3dfc:	20000808 	.word	0x20000808
    3e00:	00003585 	.word	0x00003585

00003e04 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    3e04:	b480      	push	{r7}
    3e06:	b085      	sub	sp, #20
    3e08:	af00      	add	r7, sp, #0
    3e0a:	4603      	mov	r3, r0
    3e0c:	60b9      	str	r1, [r7, #8]
    3e0e:	607a      	str	r2, [r7, #4]
    3e10:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    3e12:	7bfb      	ldrb	r3, [r7, #15]
    3e14:	f083 0301 	eor.w	r3, r3, #1
    3e18:	b2db      	uxtb	r3, r3
    3e1a:	2b00      	cmp	r3, #0
    3e1c:	d000      	beq.n	3e20 <assert+0x1c>
		__asm("BKPT #0");
    3e1e:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    3e20:	bf00      	nop
    3e22:	3714      	adds	r7, #20
    3e24:	46bd      	mov	sp, r7
    3e26:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e2a:	4770      	bx	lr

00003e2c <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    3e2c:	b480      	push	{r7}
    3e2e:	b085      	sub	sp, #20
    3e30:	af00      	add	r7, sp, #0
    3e32:	6078      	str	r0, [r7, #4]
    3e34:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3e36:	687b      	ldr	r3, [r7, #4]
    3e38:	681b      	ldr	r3, [r3, #0]
    3e3a:	60fb      	str	r3, [r7, #12]
    3e3c:	e008      	b.n	3e50 <is_list_element+0x24>
		if (it == element) {
    3e3e:	68fa      	ldr	r2, [r7, #12]
    3e40:	683b      	ldr	r3, [r7, #0]
    3e42:	429a      	cmp	r2, r3
    3e44:	d101      	bne.n	3e4a <is_list_element+0x1e>
			return true;
    3e46:	2301      	movs	r3, #1
    3e48:	e006      	b.n	3e58 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    3e4a:	68fb      	ldr	r3, [r7, #12]
    3e4c:	681b      	ldr	r3, [r3, #0]
    3e4e:	60fb      	str	r3, [r7, #12]
    3e50:	68fb      	ldr	r3, [r7, #12]
    3e52:	2b00      	cmp	r3, #0
    3e54:	d1f3      	bne.n	3e3e <is_list_element+0x12>
		}
	}

	return false;
    3e56:	2300      	movs	r3, #0
}
    3e58:	4618      	mov	r0, r3
    3e5a:	3714      	adds	r7, #20
    3e5c:	46bd      	mov	sp, r7
    3e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e62:	4770      	bx	lr

00003e64 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3e64:	b580      	push	{r7, lr}
    3e66:	b082      	sub	sp, #8
    3e68:	af00      	add	r7, sp, #0
    3e6a:	6078      	str	r0, [r7, #4]
    3e6c:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    3e6e:	6839      	ldr	r1, [r7, #0]
    3e70:	6878      	ldr	r0, [r7, #4]
    3e72:	4b0f      	ldr	r3, [pc, #60]	; (3eb0 <list_insert_as_head+0x4c>)
    3e74:	4798      	blx	r3
    3e76:	4603      	mov	r3, r0
    3e78:	2b00      	cmp	r3, #0
    3e7a:	bf14      	ite	ne
    3e7c:	2301      	movne	r3, #1
    3e7e:	2300      	moveq	r3, #0
    3e80:	b2db      	uxtb	r3, r3
    3e82:	f083 0301 	eor.w	r3, r3, #1
    3e86:	b2db      	uxtb	r3, r3
    3e88:	f003 0301 	and.w	r3, r3, #1
    3e8c:	b2db      	uxtb	r3, r3
    3e8e:	2239      	movs	r2, #57	; 0x39
    3e90:	4908      	ldr	r1, [pc, #32]	; (3eb4 <list_insert_as_head+0x50>)
    3e92:	4618      	mov	r0, r3
    3e94:	4b08      	ldr	r3, [pc, #32]	; (3eb8 <list_insert_as_head+0x54>)
    3e96:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3e98:	687b      	ldr	r3, [r7, #4]
    3e9a:	681a      	ldr	r2, [r3, #0]
    3e9c:	683b      	ldr	r3, [r7, #0]
    3e9e:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    3ea0:	687b      	ldr	r3, [r7, #4]
    3ea2:	683a      	ldr	r2, [r7, #0]
    3ea4:	601a      	str	r2, [r3, #0]
}
    3ea6:	bf00      	nop
    3ea8:	3708      	adds	r7, #8
    3eaa:	46bd      	mov	sp, r7
    3eac:	bd80      	pop	{r7, pc}
    3eae:	bf00      	nop
    3eb0:	00003e2d 	.word	0x00003e2d
    3eb4:	000134ec 	.word	0x000134ec
    3eb8:	00003e05 	.word	0x00003e05

00003ebc <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    3ebc:	b480      	push	{r7}
    3ebe:	b083      	sub	sp, #12
    3ec0:	af00      	add	r7, sp, #0
    3ec2:	6078      	str	r0, [r7, #4]
    3ec4:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    3ec6:	687b      	ldr	r3, [r7, #4]
    3ec8:	681a      	ldr	r2, [r3, #0]
    3eca:	683b      	ldr	r3, [r7, #0]
    3ecc:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3ece:	687b      	ldr	r3, [r7, #4]
    3ed0:	683a      	ldr	r2, [r7, #0]
    3ed2:	601a      	str	r2, [r3, #0]
}
    3ed4:	bf00      	nop
    3ed6:	370c      	adds	r7, #12
    3ed8:	46bd      	mov	sp, r7
    3eda:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ede:	4770      	bx	lr

00003ee0 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    3ee0:	b580      	push	{r7, lr}
    3ee2:	b084      	sub	sp, #16
    3ee4:	af00      	add	r7, sp, #0
    3ee6:	6078      	str	r0, [r7, #4]
    3ee8:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    3eea:	687b      	ldr	r3, [r7, #4]
    3eec:	681b      	ldr	r3, [r3, #0]
    3eee:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    3ef0:	6839      	ldr	r1, [r7, #0]
    3ef2:	6878      	ldr	r0, [r7, #4]
    3ef4:	4b16      	ldr	r3, [pc, #88]	; (3f50 <list_insert_at_end+0x70>)
    3ef6:	4798      	blx	r3
    3ef8:	4603      	mov	r3, r0
    3efa:	2b00      	cmp	r3, #0
    3efc:	bf14      	ite	ne
    3efe:	2301      	movne	r3, #1
    3f00:	2300      	moveq	r3, #0
    3f02:	b2db      	uxtb	r3, r3
    3f04:	f083 0301 	eor.w	r3, r3, #1
    3f08:	b2db      	uxtb	r3, r3
    3f0a:	f003 0301 	and.w	r3, r3, #1
    3f0e:	b2db      	uxtb	r3, r3
    3f10:	224f      	movs	r2, #79	; 0x4f
    3f12:	4910      	ldr	r1, [pc, #64]	; (3f54 <list_insert_at_end+0x74>)
    3f14:	4618      	mov	r0, r3
    3f16:	4b10      	ldr	r3, [pc, #64]	; (3f58 <list_insert_at_end+0x78>)
    3f18:	4798      	blx	r3

	if (!list->head) {
    3f1a:	687b      	ldr	r3, [r7, #4]
    3f1c:	681b      	ldr	r3, [r3, #0]
    3f1e:	2b00      	cmp	r3, #0
    3f20:	d109      	bne.n	3f36 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    3f22:	687b      	ldr	r3, [r7, #4]
    3f24:	683a      	ldr	r2, [r7, #0]
    3f26:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    3f28:	683b      	ldr	r3, [r7, #0]
    3f2a:	2200      	movs	r2, #0
    3f2c:	601a      	str	r2, [r3, #0]
		return;
    3f2e:	e00c      	b.n	3f4a <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    3f30:	68fb      	ldr	r3, [r7, #12]
    3f32:	681b      	ldr	r3, [r3, #0]
    3f34:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    3f36:	68fb      	ldr	r3, [r7, #12]
    3f38:	681b      	ldr	r3, [r3, #0]
    3f3a:	2b00      	cmp	r3, #0
    3f3c:	d1f8      	bne.n	3f30 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    3f3e:	68fb      	ldr	r3, [r7, #12]
    3f40:	683a      	ldr	r2, [r7, #0]
    3f42:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    3f44:	683b      	ldr	r3, [r7, #0]
    3f46:	2200      	movs	r2, #0
    3f48:	601a      	str	r2, [r3, #0]
}
    3f4a:	3710      	adds	r7, #16
    3f4c:	46bd      	mov	sp, r7
    3f4e:	bd80      	pop	{r7, pc}
    3f50:	00003e2d 	.word	0x00003e2d
    3f54:	000134ec 	.word	0x000134ec
    3f58:	00003e05 	.word	0x00003e05

00003f5c <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    3f5c:	b480      	push	{r7}
    3f5e:	b085      	sub	sp, #20
    3f60:	af00      	add	r7, sp, #0
    3f62:	6078      	str	r0, [r7, #4]
	if (list->head) {
    3f64:	687b      	ldr	r3, [r7, #4]
    3f66:	681b      	ldr	r3, [r3, #0]
    3f68:	2b00      	cmp	r3, #0
    3f6a:	d009      	beq.n	3f80 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    3f6c:	687b      	ldr	r3, [r7, #4]
    3f6e:	681b      	ldr	r3, [r3, #0]
    3f70:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    3f72:	687b      	ldr	r3, [r7, #4]
    3f74:	681b      	ldr	r3, [r3, #0]
    3f76:	681a      	ldr	r2, [r3, #0]
    3f78:	687b      	ldr	r3, [r7, #4]
    3f7a:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    3f7c:	68fb      	ldr	r3, [r7, #12]
    3f7e:	e000      	b.n	3f82 <list_remove_head+0x26>
	}

	return NULL;
    3f80:	2300      	movs	r3, #0
}
    3f82:	4618      	mov	r0, r3
    3f84:	3714      	adds	r7, #20
    3f86:	46bd      	mov	sp, r7
    3f88:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f8c:	4770      	bx	lr

00003f8e <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    3f8e:	b480      	push	{r7}
    3f90:	b085      	sub	sp, #20
    3f92:	af00      	add	r7, sp, #0
    3f94:	6078      	str	r0, [r7, #4]
    3f96:	6039      	str	r1, [r7, #0]
	if (!element) {
    3f98:	683b      	ldr	r3, [r7, #0]
    3f9a:	2b00      	cmp	r3, #0
    3f9c:	d101      	bne.n	3fa2 <list_delete_element+0x14>
		return false;
    3f9e:	2300      	movs	r3, #0
    3fa0:	e024      	b.n	3fec <list_delete_element+0x5e>
	}

	if (list->head == element) {
    3fa2:	687b      	ldr	r3, [r7, #4]
    3fa4:	681a      	ldr	r2, [r3, #0]
    3fa6:	683b      	ldr	r3, [r7, #0]
    3fa8:	429a      	cmp	r2, r3
    3faa:	d106      	bne.n	3fba <list_delete_element+0x2c>
		list->head = list->head->next;
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	681b      	ldr	r3, [r3, #0]
    3fb0:	681a      	ldr	r2, [r3, #0]
    3fb2:	687b      	ldr	r3, [r7, #4]
    3fb4:	601a      	str	r2, [r3, #0]
		return true;
    3fb6:	2301      	movs	r3, #1
    3fb8:	e018      	b.n	3fec <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    3fba:	687b      	ldr	r3, [r7, #4]
    3fbc:	681b      	ldr	r3, [r3, #0]
    3fbe:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    3fc0:	e002      	b.n	3fc8 <list_delete_element+0x3a>
			it = it->next;
    3fc2:	68fb      	ldr	r3, [r7, #12]
    3fc4:	681b      	ldr	r3, [r3, #0]
    3fc6:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    3fc8:	68fb      	ldr	r3, [r7, #12]
    3fca:	2b00      	cmp	r3, #0
    3fcc:	d004      	beq.n	3fd8 <list_delete_element+0x4a>
    3fce:	68fb      	ldr	r3, [r7, #12]
    3fd0:	681a      	ldr	r2, [r3, #0]
    3fd2:	683b      	ldr	r3, [r7, #0]
    3fd4:	429a      	cmp	r2, r3
    3fd6:	d1f4      	bne.n	3fc2 <list_delete_element+0x34>
		}
		if (it) {
    3fd8:	68fb      	ldr	r3, [r7, #12]
    3fda:	2b00      	cmp	r3, #0
    3fdc:	d005      	beq.n	3fea <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    3fde:	683b      	ldr	r3, [r7, #0]
    3fe0:	681a      	ldr	r2, [r3, #0]
    3fe2:	68fb      	ldr	r3, [r7, #12]
    3fe4:	601a      	str	r2, [r3, #0]
			return true;
    3fe6:	2301      	movs	r3, #1
    3fe8:	e000      	b.n	3fec <list_delete_element+0x5e>
		}
	}

	return false;
    3fea:	2300      	movs	r3, #0
}
    3fec:	4618      	mov	r0, r3
    3fee:	3714      	adds	r7, #20
    3ff0:	46bd      	mov	sp, r7
    3ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ff6:	4770      	bx	lr

00003ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3ff8:	b480      	push	{r7}
    3ffa:	b083      	sub	sp, #12
    3ffc:	af00      	add	r7, sp, #0
    3ffe:	4603      	mov	r3, r0
    4000:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4006:	2b00      	cmp	r3, #0
    4008:	db0b      	blt.n	4022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    400a:	4909      	ldr	r1, [pc, #36]	; (4030 <__NVIC_EnableIRQ+0x38>)
    400c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4010:	095b      	lsrs	r3, r3, #5
    4012:	88fa      	ldrh	r2, [r7, #6]
    4014:	f002 021f 	and.w	r2, r2, #31
    4018:	2001      	movs	r0, #1
    401a:	fa00 f202 	lsl.w	r2, r0, r2
    401e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4022:	bf00      	nop
    4024:	370c      	adds	r7, #12
    4026:	46bd      	mov	sp, r7
    4028:	f85d 7b04 	ldr.w	r7, [sp], #4
    402c:	4770      	bx	lr
    402e:	bf00      	nop
    4030:	e000e100 	.word	0xe000e100

00004034 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    4034:	b480      	push	{r7}
    4036:	b083      	sub	sp, #12
    4038:	af00      	add	r7, sp, #0
    403a:	4603      	mov	r3, r0
    403c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    403e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4042:	2b00      	cmp	r3, #0
    4044:	db10      	blt.n	4068 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4046:	490b      	ldr	r1, [pc, #44]	; (4074 <__NVIC_DisableIRQ+0x40>)
    4048:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    404c:	095b      	lsrs	r3, r3, #5
    404e:	88fa      	ldrh	r2, [r7, #6]
    4050:	f002 021f 	and.w	r2, r2, #31
    4054:	2001      	movs	r0, #1
    4056:	fa00 f202 	lsl.w	r2, r0, r2
    405a:	3320      	adds	r3, #32
    405c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4060:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4064:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    4068:	bf00      	nop
    406a:	370c      	adds	r7, #12
    406c:	46bd      	mov	sp, r7
    406e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4072:	4770      	bx	lr
    4074:	e000e100 	.word	0xe000e100

00004078 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    4078:	b480      	push	{r7}
    407a:	b083      	sub	sp, #12
    407c:	af00      	add	r7, sp, #0
    407e:	4603      	mov	r3, r0
    4080:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4086:	2b00      	cmp	r3, #0
    4088:	db0c      	blt.n	40a4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    408a:	4909      	ldr	r1, [pc, #36]	; (40b0 <__NVIC_ClearPendingIRQ+0x38>)
    408c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4090:	095b      	lsrs	r3, r3, #5
    4092:	88fa      	ldrh	r2, [r7, #6]
    4094:	f002 021f 	and.w	r2, r2, #31
    4098:	2001      	movs	r0, #1
    409a:	fa00 f202 	lsl.w	r2, r0, r2
    409e:	3360      	adds	r3, #96	; 0x60
    40a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    40a4:	bf00      	nop
    40a6:	370c      	adds	r7, #12
    40a8:	46bd      	mov	sp, r7
    40aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    40ae:	4770      	bx	lr
    40b0:	e000e100 	.word	0xe000e100

000040b4 <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    40b4:	b480      	push	{r7}
    40b6:	b083      	sub	sp, #12
    40b8:	af00      	add	r7, sp, #0
    40ba:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    40bc:	687b      	ldr	r3, [r7, #4]
    40be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    40c0:	095b      	lsrs	r3, r3, #5
    40c2:	f003 0301 	and.w	r3, r3, #1
    40c6:	2b00      	cmp	r3, #0
    40c8:	bf14      	ite	ne
    40ca:	2301      	movne	r3, #1
    40cc:	2300      	moveq	r3, #0
    40ce:	b2db      	uxtb	r3, r3
}
    40d0:	4618      	mov	r0, r3
    40d2:	370c      	adds	r7, #12
    40d4:	46bd      	mov	sp, r7
    40d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    40da:	4770      	bx	lr

000040dc <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    40dc:	b480      	push	{r7}
    40de:	b083      	sub	sp, #12
    40e0:	af00      	add	r7, sp, #0
    40e2:	6078      	str	r0, [r7, #4]
    40e4:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    40e6:	687b      	ldr	r3, [r7, #4]
    40e8:	683a      	ldr	r2, [r7, #0]
    40ea:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    40ec:	bf00      	nop
    40ee:	370c      	adds	r7, #12
    40f0:	46bd      	mov	sp, r7
    40f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    40f6:	4770      	bx	lr

000040f8 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    40f8:	b480      	push	{r7}
    40fa:	b083      	sub	sp, #12
    40fc:	af00      	add	r7, sp, #0
    40fe:	6078      	str	r0, [r7, #4]
    4100:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    4102:	687b      	ldr	r3, [r7, #4]
    4104:	683a      	ldr	r2, [r7, #0]
    4106:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4108:	bf00      	nop
    410a:	370c      	adds	r7, #12
    410c:	46bd      	mov	sp, r7
    410e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4112:	4770      	bx	lr

00004114 <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    4114:	b480      	push	{r7}
    4116:	b083      	sub	sp, #12
    4118:	af00      	add	r7, sp, #0
    411a:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    411c:	687b      	ldr	r3, [r7, #4]
    411e:	699b      	ldr	r3, [r3, #24]
    4120:	f043 0201 	orr.w	r2, r3, #1
    4124:	687b      	ldr	r3, [r7, #4]
    4126:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4128:	bf00      	nop
    412a:	370c      	adds	r7, #12
    412c:	46bd      	mov	sp, r7
    412e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4132:	4770      	bx	lr

00004134 <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    4134:	b480      	push	{r7}
    4136:	b085      	sub	sp, #20
    4138:	af00      	add	r7, sp, #0
    413a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    413c:	687b      	ldr	r3, [r7, #4]
    413e:	699b      	ldr	r3, [r3, #24]
    4140:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    4142:	68fb      	ldr	r3, [r7, #12]
    4144:	f003 0301 	and.w	r3, r3, #1
    4148:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    414a:	68fb      	ldr	r3, [r7, #12]
    414c:	2b00      	cmp	r3, #0
    414e:	bf14      	ite	ne
    4150:	2301      	movne	r3, #1
    4152:	2300      	moveq	r3, #0
    4154:	b2db      	uxtb	r3, r3
}
    4156:	4618      	mov	r0, r3
    4158:	3714      	adds	r7, #20
    415a:	46bd      	mov	sp, r7
    415c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4160:	4770      	bx	lr

00004162 <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    4162:	b480      	push	{r7}
    4164:	b083      	sub	sp, #12
    4166:	af00      	add	r7, sp, #0
    4168:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    416a:	687b      	ldr	r3, [r7, #4]
    416c:	699b      	ldr	r3, [r3, #24]
    416e:	f023 0201 	bic.w	r2, r3, #1
    4172:	687b      	ldr	r3, [r7, #4]
    4174:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4176:	bf00      	nop
    4178:	370c      	adds	r7, #12
    417a:	46bd      	mov	sp, r7
    417c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4180:	4770      	bx	lr

00004182 <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    4182:	b480      	push	{r7}
    4184:	b083      	sub	sp, #12
    4186:	af00      	add	r7, sp, #0
    4188:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    418a:	687b      	ldr	r3, [r7, #4]
    418c:	699b      	ldr	r3, [r3, #24]
    418e:	f043 0202 	orr.w	r2, r3, #2
    4192:	687b      	ldr	r3, [r7, #4]
    4194:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4196:	bf00      	nop
    4198:	370c      	adds	r7, #12
    419a:	46bd      	mov	sp, r7
    419c:	f85d 7b04 	ldr.w	r7, [sp], #4
    41a0:	4770      	bx	lr

000041a2 <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    41a2:	b480      	push	{r7}
    41a4:	b083      	sub	sp, #12
    41a6:	af00      	add	r7, sp, #0
    41a8:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    41aa:	687b      	ldr	r3, [r7, #4]
    41ac:	699b      	ldr	r3, [r3, #24]
    41ae:	f023 0202 	bic.w	r2, r3, #2
    41b2:	687b      	ldr	r3, [r7, #4]
    41b4:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    41b6:	bf00      	nop
    41b8:	370c      	adds	r7, #12
    41ba:	46bd      	mov	sp, r7
    41bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    41c0:	4770      	bx	lr

000041c2 <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    41c2:	b480      	push	{r7}
    41c4:	b083      	sub	sp, #12
    41c6:	af00      	add	r7, sp, #0
    41c8:	6078      	str	r0, [r7, #4]
    41ca:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    41cc:	687b      	ldr	r3, [r7, #4]
    41ce:	699a      	ldr	r2, [r3, #24]
    41d0:	683b      	ldr	r3, [r7, #0]
    41d2:	431a      	orrs	r2, r3
    41d4:	687b      	ldr	r3, [r7, #4]
    41d6:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    41d8:	bf00      	nop
    41da:	370c      	adds	r7, #12
    41dc:	46bd      	mov	sp, r7
    41de:	f85d 7b04 	ldr.w	r7, [sp], #4
    41e2:	4770      	bx	lr

000041e4 <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    41e4:	b480      	push	{r7}
    41e6:	b083      	sub	sp, #12
    41e8:	af00      	add	r7, sp, #0
    41ea:	6078      	str	r0, [r7, #4]
    41ec:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    41ee:	687b      	ldr	r3, [r7, #4]
    41f0:	683a      	ldr	r2, [r7, #0]
    41f2:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    41f4:	bf00      	nop
    41f6:	370c      	adds	r7, #12
    41f8:	46bd      	mov	sp, r7
    41fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    41fe:	4770      	bx	lr

00004200 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    4200:	b480      	push	{r7}
    4202:	b083      	sub	sp, #12
    4204:	af00      	add	r7, sp, #0
    4206:	6078      	str	r0, [r7, #4]
    4208:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    420a:	687b      	ldr	r3, [r7, #4]
    420c:	683a      	ldr	r2, [r7, #0]
    420e:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    4210:	bf00      	nop
    4212:	370c      	adds	r7, #12
    4214:	46bd      	mov	sp, r7
    4216:	f85d 7b04 	ldr.w	r7, [sp], #4
    421a:	4770      	bx	lr

0000421c <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    421c:	b480      	push	{r7}
    421e:	b083      	sub	sp, #12
    4220:	af00      	add	r7, sp, #0
    4222:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    4224:	687b      	ldr	r3, [r7, #4]
    4226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    4228:	4618      	mov	r0, r3
    422a:	370c      	adds	r7, #12
    422c:	46bd      	mov	sp, r7
    422e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4232:	4770      	bx	lr

00004234 <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    4234:	b480      	push	{r7}
    4236:	b083      	sub	sp, #12
    4238:	af00      	add	r7, sp, #0
    423a:	6078      	str	r0, [r7, #4]
    423c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    423e:	687b      	ldr	r3, [r7, #4]
    4240:	683a      	ldr	r2, [r7, #0]
    4242:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    4244:	bf00      	nop
    4246:	370c      	adds	r7, #12
    4248:	46bd      	mov	sp, r7
    424a:	f85d 7b04 	ldr.w	r7, [sp], #4
    424e:	4770      	bx	lr

00004250 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    4250:	b480      	push	{r7}
    4252:	b083      	sub	sp, #12
    4254:	af00      	add	r7, sp, #0
    4256:	6078      	str	r0, [r7, #4]
    4258:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    425a:	687b      	ldr	r3, [r7, #4]
    425c:	683a      	ldr	r2, [r7, #0]
    425e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    4262:	bf00      	nop
    4264:	370c      	adds	r7, #12
    4266:	46bd      	mov	sp, r7
    4268:	f85d 7b04 	ldr.w	r7, [sp], #4
    426c:	4770      	bx	lr

0000426e <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    426e:	b480      	push	{r7}
    4270:	b083      	sub	sp, #12
    4272:	af00      	add	r7, sp, #0
    4274:	6078      	str	r0, [r7, #4]
    4276:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    4278:	687b      	ldr	r3, [r7, #4]
    427a:	683a      	ldr	r2, [r7, #0]
    427c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    4280:	bf00      	nop
    4282:	370c      	adds	r7, #12
    4284:	46bd      	mov	sp, r7
    4286:	f85d 7b04 	ldr.w	r7, [sp], #4
    428a:	4770      	bx	lr

0000428c <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    428c:	b480      	push	{r7}
    428e:	b083      	sub	sp, #12
    4290:	af00      	add	r7, sp, #0
    4292:	6078      	str	r0, [r7, #4]
    4294:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    4296:	687b      	ldr	r3, [r7, #4]
    4298:	683a      	ldr	r2, [r7, #0]
    429a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    429e:	bf00      	nop
    42a0:	370c      	adds	r7, #12
    42a2:	46bd      	mov	sp, r7
    42a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    42a8:	4770      	bx	lr

000042aa <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    42aa:	b480      	push	{r7}
    42ac:	b083      	sub	sp, #12
    42ae:	af00      	add	r7, sp, #0
    42b0:	6078      	str	r0, [r7, #4]
    42b2:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    42b4:	687b      	ldr	r3, [r7, #4]
    42b6:	683a      	ldr	r2, [r7, #0]
    42b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    42bc:	bf00      	nop
    42be:	370c      	adds	r7, #12
    42c0:	46bd      	mov	sp, r7
    42c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    42c6:	4770      	bx	lr

000042c8 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    42c8:	b480      	push	{r7}
    42ca:	b083      	sub	sp, #12
    42cc:	af00      	add	r7, sp, #0
    42ce:	6078      	str	r0, [r7, #4]
    42d0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    42d2:	687b      	ldr	r3, [r7, #4]
    42d4:	683a      	ldr	r2, [r7, #0]
    42d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    42da:	bf00      	nop
    42dc:	370c      	adds	r7, #12
    42de:	46bd      	mov	sp, r7
    42e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    42e4:	4770      	bx	lr

000042e6 <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    42e6:	b480      	push	{r7}
    42e8:	b083      	sub	sp, #12
    42ea:	af00      	add	r7, sp, #0
    42ec:	6078      	str	r0, [r7, #4]
    42ee:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    42f0:	687b      	ldr	r3, [r7, #4]
    42f2:	683a      	ldr	r2, [r7, #0]
    42f4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    42f8:	bf00      	nop
    42fa:	370c      	adds	r7, #12
    42fc:	46bd      	mov	sp, r7
    42fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4302:	4770      	bx	lr

00004304 <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    4304:	b480      	push	{r7}
    4306:	b083      	sub	sp, #12
    4308:	af00      	add	r7, sp, #0
    430a:	6078      	str	r0, [r7, #4]
    430c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    430e:	687b      	ldr	r3, [r7, #4]
    4310:	683a      	ldr	r2, [r7, #0]
    4312:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4316:	bf00      	nop
    4318:	370c      	adds	r7, #12
    431a:	46bd      	mov	sp, r7
    431c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4320:	4770      	bx	lr

00004322 <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    4322:	b480      	push	{r7}
    4324:	b083      	sub	sp, #12
    4326:	af00      	add	r7, sp, #0
    4328:	6078      	str	r0, [r7, #4]
    432a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    432c:	687b      	ldr	r3, [r7, #4]
    432e:	683a      	ldr	r2, [r7, #0]
    4330:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    4334:	bf00      	nop
    4336:	370c      	adds	r7, #12
    4338:	46bd      	mov	sp, r7
    433a:	f85d 7b04 	ldr.w	r7, [sp], #4
    433e:	4770      	bx	lr

00004340 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    4340:	b480      	push	{r7}
    4342:	b083      	sub	sp, #12
    4344:	af00      	add	r7, sp, #0
    4346:	6078      	str	r0, [r7, #4]
    4348:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    434a:	687b      	ldr	r3, [r7, #4]
    434c:	683a      	ldr	r2, [r7, #0]
    434e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4352:	bf00      	nop
    4354:	370c      	adds	r7, #12
    4356:	46bd      	mov	sp, r7
    4358:	f85d 7b04 	ldr.w	r7, [sp], #4
    435c:	4770      	bx	lr
	...

00004360 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    4360:	b580      	push	{r7, lr}
    4362:	b082      	sub	sp, #8
    4364:	af00      	add	r7, sp, #0
    4366:	6078      	str	r0, [r7, #4]
    4368:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    436a:	687b      	ldr	r3, [r7, #4]
    436c:	683a      	ldr	r2, [r7, #0]
    436e:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    4370:	687b      	ldr	r3, [r7, #4]
    4372:	681b      	ldr	r3, [r3, #0]
    4374:	4618      	mov	r0, r3
    4376:	4b55      	ldr	r3, [pc, #340]	; (44cc <_can_async_init+0x16c>)
    4378:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    437a:	bf00      	nop
    437c:	687b      	ldr	r3, [r7, #4]
    437e:	681b      	ldr	r3, [r3, #0]
    4380:	4618      	mov	r0, r3
    4382:	4b53      	ldr	r3, [pc, #332]	; (44d0 <_can_async_init+0x170>)
    4384:	4798      	blx	r3
    4386:	4603      	mov	r3, r0
    4388:	f083 0301 	eor.w	r3, r3, #1
    438c:	b2db      	uxtb	r3, r3
    438e:	2b00      	cmp	r3, #0
    4390:	d1f4      	bne.n	437c <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    4392:	687b      	ldr	r3, [r7, #4]
    4394:	681b      	ldr	r3, [r3, #0]
    4396:	4618      	mov	r0, r3
    4398:	4b4e      	ldr	r3, [pc, #312]	; (44d4 <_can_async_init+0x174>)
    439a:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    439c:	683b      	ldr	r3, [r7, #0]
    439e:	4a4e      	ldr	r2, [pc, #312]	; (44d8 <_can_async_init+0x178>)
    43a0:	4293      	cmp	r3, r2
    43a2:	d17a      	bne.n	449a <_can_async_init+0x13a>
		_can1_dev    = dev;
    43a4:	4a4d      	ldr	r2, [pc, #308]	; (44dc <_can_async_init+0x17c>)
    43a6:	687b      	ldr	r3, [r7, #4]
    43a8:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    43aa:	687b      	ldr	r3, [r7, #4]
    43ac:	4a4c      	ldr	r2, [pc, #304]	; (44e0 <_can_async_init+0x180>)
    43ae:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    43b0:	687b      	ldr	r3, [r7, #4]
    43b2:	681b      	ldr	r3, [r3, #0]
    43b4:	f44f 7140 	mov.w	r1, #768	; 0x300
    43b8:	4618      	mov	r0, r3
    43ba:	4b4a      	ldr	r3, [pc, #296]	; (44e4 <_can_async_init+0x184>)
    43bc:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    43be:	687b      	ldr	r3, [r7, #4]
    43c0:	681b      	ldr	r3, [r3, #0]
    43c2:	2102      	movs	r1, #2
    43c4:	4618      	mov	r0, r3
    43c6:	4b48      	ldr	r3, [pc, #288]	; (44e8 <_can_async_init+0x188>)
    43c8:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    43ca:	687b      	ldr	r3, [r7, #4]
    43cc:	681b      	ldr	r3, [r3, #0]
    43ce:	4947      	ldr	r1, [pc, #284]	; (44ec <_can_async_init+0x18c>)
    43d0:	4618      	mov	r0, r3
    43d2:	4b47      	ldr	r3, [pc, #284]	; (44f0 <_can_async_init+0x190>)
    43d4:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    43d6:	687b      	ldr	r3, [r7, #4]
    43d8:	681b      	ldr	r3, [r3, #0]
    43da:	4946      	ldr	r1, [pc, #280]	; (44f4 <_can_async_init+0x194>)
    43dc:	4618      	mov	r0, r3
    43de:	4b46      	ldr	r3, [pc, #280]	; (44f8 <_can_async_init+0x198>)
    43e0:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    43e2:	687b      	ldr	r3, [r7, #4]
    43e4:	681a      	ldr	r2, [r3, #0]
    43e6:	4b45      	ldr	r3, [pc, #276]	; (44fc <_can_async_init+0x19c>)
    43e8:	b29b      	uxth	r3, r3
    43ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    43ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    43f2:	4619      	mov	r1, r3
    43f4:	4610      	mov	r0, r2
    43f6:	4b42      	ldr	r3, [pc, #264]	; (4500 <_can_async_init+0x1a0>)
    43f8:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    43fa:	687b      	ldr	r3, [r7, #4]
    43fc:	681b      	ldr	r3, [r3, #0]
    43fe:	2107      	movs	r1, #7
    4400:	4618      	mov	r0, r3
    4402:	4b40      	ldr	r3, [pc, #256]	; (4504 <_can_async_init+0x1a4>)
    4404:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	681b      	ldr	r3, [r3, #0]
    440a:	2107      	movs	r1, #7
    440c:	4618      	mov	r0, r3
    440e:	4b3e      	ldr	r3, [pc, #248]	; (4508 <_can_async_init+0x1a8>)
    4410:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    4412:	687b      	ldr	r3, [r7, #4]
    4414:	681a      	ldr	r2, [r3, #0]
    4416:	4b3d      	ldr	r3, [pc, #244]	; (450c <_can_async_init+0x1ac>)
    4418:	b29b      	uxth	r3, r3
    441a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    441e:	4619      	mov	r1, r3
    4420:	4610      	mov	r0, r2
    4422:	4b3b      	ldr	r3, [pc, #236]	; (4510 <_can_async_init+0x1b0>)
    4424:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    4426:	687b      	ldr	r3, [r7, #4]
    4428:	681a      	ldr	r2, [r3, #0]
    442a:	4b3a      	ldr	r3, [pc, #232]	; (4514 <_can_async_init+0x1b4>)
    442c:	b29b      	uxth	r3, r3
    442e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4432:	4619      	mov	r1, r3
    4434:	4610      	mov	r0, r2
    4436:	4b38      	ldr	r3, [pc, #224]	; (4518 <_can_async_init+0x1b8>)
    4438:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    443a:	687b      	ldr	r3, [r7, #4]
    443c:	681b      	ldr	r3, [r3, #0]
    443e:	2108      	movs	r1, #8
    4440:	4618      	mov	r0, r3
    4442:	4b36      	ldr	r3, [pc, #216]	; (451c <_can_async_init+0x1bc>)
    4444:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    4446:	687b      	ldr	r3, [r7, #4]
    4448:	681a      	ldr	r2, [r3, #0]
    444a:	4b35      	ldr	r3, [pc, #212]	; (4520 <_can_async_init+0x1c0>)
    444c:	b29b      	uxth	r3, r3
    444e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    4452:	4619      	mov	r1, r3
    4454:	4610      	mov	r0, r2
    4456:	4b33      	ldr	r3, [pc, #204]	; (4524 <_can_async_init+0x1c4>)
    4458:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    445a:	687b      	ldr	r3, [r7, #4]
    445c:	681a      	ldr	r2, [r3, #0]
    445e:	4b32      	ldr	r3, [pc, #200]	; (4528 <_can_async_init+0x1c8>)
    4460:	b29b      	uxth	r3, r3
    4462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    4466:	4619      	mov	r1, r3
    4468:	4610      	mov	r0, r2
    446a:	4b30      	ldr	r3, [pc, #192]	; (452c <_can_async_init+0x1cc>)
    446c:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    446e:	687b      	ldr	r3, [r7, #4]
    4470:	681b      	ldr	r3, [r3, #0]
    4472:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    4476:	4618      	mov	r0, r3
    4478:	4b2d      	ldr	r3, [pc, #180]	; (4530 <_can_async_init+0x1d0>)
    447a:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    447c:	204f      	movs	r0, #79	; 0x4f
    447e:	4b2d      	ldr	r3, [pc, #180]	; (4534 <_can_async_init+0x1d4>)
    4480:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    4482:	204f      	movs	r0, #79	; 0x4f
    4484:	4b2c      	ldr	r3, [pc, #176]	; (4538 <_can_async_init+0x1d8>)
    4486:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    4488:	204f      	movs	r0, #79	; 0x4f
    448a:	4b2c      	ldr	r3, [pc, #176]	; (453c <_can_async_init+0x1dc>)
    448c:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    448e:	687b      	ldr	r3, [r7, #4]
    4490:	681b      	ldr	r3, [r3, #0]
    4492:	2101      	movs	r1, #1
    4494:	4618      	mov	r0, r3
    4496:	4b2a      	ldr	r3, [pc, #168]	; (4540 <_can_async_init+0x1e0>)
    4498:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    449a:	687b      	ldr	r3, [r7, #4]
    449c:	681b      	ldr	r3, [r3, #0]
    449e:	4618      	mov	r0, r3
    44a0:	4b28      	ldr	r3, [pc, #160]	; (4544 <_can_async_init+0x1e4>)
    44a2:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    44a4:	687b      	ldr	r3, [r7, #4]
    44a6:	681b      	ldr	r3, [r3, #0]
    44a8:	4618      	mov	r0, r3
    44aa:	4b27      	ldr	r3, [pc, #156]	; (4548 <_can_async_init+0x1e8>)
    44ac:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    44ae:	bf00      	nop
    44b0:	687b      	ldr	r3, [r7, #4]
    44b2:	681b      	ldr	r3, [r3, #0]
    44b4:	4618      	mov	r0, r3
    44b6:	4b06      	ldr	r3, [pc, #24]	; (44d0 <_can_async_init+0x170>)
    44b8:	4798      	blx	r3
    44ba:	4603      	mov	r3, r0
    44bc:	2b00      	cmp	r3, #0
    44be:	d1f7      	bne.n	44b0 <_can_async_init+0x150>
	};

	return ERR_NONE;
    44c0:	2300      	movs	r3, #0
}
    44c2:	4618      	mov	r0, r3
    44c4:	3708      	adds	r7, #8
    44c6:	46bd      	mov	sp, r7
    44c8:	bd80      	pop	{r7, pc}
    44ca:	bf00      	nop
    44cc:	00004115 	.word	0x00004115
    44d0:	00004135 	.word	0x00004135
    44d4:	00004183 	.word	0x00004183
    44d8:	42000400 	.word	0x42000400
    44dc:	20000928 	.word	0x20000928
    44e0:	20000004 	.word	0x20000004
    44e4:	000041c3 	.word	0x000041c3
    44e8:	000040dd 	.word	0x000040dd
    44ec:	00010c01 	.word	0x00010c01
    44f0:	000041e5 	.word	0x000041e5
    44f4:	00010c10 	.word	0x00010c10
    44f8:	000040f9 	.word	0x000040f9
    44fc:	20007fe4 	.word	0x20007fe4
    4500:	000042c9 	.word	0x000042c9
    4504:	000042e7 	.word	0x000042e7
    4508:	00004323 	.word	0x00004323
    450c:	20007f9c 	.word	0x20007f9c
    4510:	00004305 	.word	0x00004305
    4514:	20000888 	.word	0x20000888
    4518:	00004341 	.word	0x00004341
    451c:	00004251 	.word	0x00004251
    4520:	20000898 	.word	0x20000898
    4524:	0000426f 	.word	0x0000426f
    4528:	20000918 	.word	0x20000918
    452c:	0000428d 	.word	0x0000428d
    4530:	000042ab 	.word	0x000042ab
    4534:	00004035 	.word	0x00004035
    4538:	00004079 	.word	0x00004079
    453c:	00003ff9 	.word	0x00003ff9
    4540:	00004235 	.word	0x00004235
    4544:	000041a3 	.word	0x000041a3
    4548:	00004163 	.word	0x00004163

0000454c <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    454c:	b590      	push	{r4, r7, lr}
    454e:	b083      	sub	sp, #12
    4550:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    4552:	4b2c      	ldr	r3, [pc, #176]	; (4604 <CAN1_Handler+0xb8>)
    4554:	681b      	ldr	r3, [r3, #0]
    4556:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    4558:	687b      	ldr	r3, [r7, #4]
    455a:	681b      	ldr	r3, [r3, #0]
    455c:	4618      	mov	r0, r3
    455e:	4b2a      	ldr	r3, [pc, #168]	; (4608 <CAN1_Handler+0xbc>)
    4560:	4798      	blx	r3
    4562:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    4564:	683b      	ldr	r3, [r7, #0]
    4566:	f003 0301 	and.w	r3, r3, #1
    456a:	2b00      	cmp	r3, #0
    456c:	d003      	beq.n	4576 <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    456e:	687b      	ldr	r3, [r7, #4]
    4570:	689b      	ldr	r3, [r3, #8]
    4572:	6878      	ldr	r0, [r7, #4]
    4574:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    4576:	683b      	ldr	r3, [r7, #0]
    4578:	f403 7300 	and.w	r3, r3, #512	; 0x200
    457c:	2b00      	cmp	r3, #0
    457e:	d003      	beq.n	4588 <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    4580:	687b      	ldr	r3, [r7, #4]
    4582:	685b      	ldr	r3, [r3, #4]
    4584:	6878      	ldr	r0, [r7, #4]
    4586:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    4588:	683b      	ldr	r3, [r7, #0]
    458a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    458e:	2b00      	cmp	r3, #0
    4590:	d004      	beq.n	459c <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    4592:	687b      	ldr	r3, [r7, #4]
    4594:	68db      	ldr	r3, [r3, #12]
    4596:	2103      	movs	r1, #3
    4598:	6878      	ldr	r0, [r7, #4]
    459a:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    459c:	683b      	ldr	r3, [r7, #0]
    459e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    45a2:	2b00      	cmp	r3, #0
    45a4:	d004      	beq.n	45b0 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    45a6:	687b      	ldr	r3, [r7, #4]
    45a8:	68db      	ldr	r3, [r3, #12]
    45aa:	2100      	movs	r1, #0
    45ac:	6878      	ldr	r0, [r7, #4]
    45ae:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    45b0:	683b      	ldr	r3, [r7, #0]
    45b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    45b6:	2b00      	cmp	r3, #0
    45b8:	d00f      	beq.n	45da <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    45ba:	687b      	ldr	r3, [r7, #4]
    45bc:	68dc      	ldr	r4, [r3, #12]
    45be:	687b      	ldr	r3, [r7, #4]
    45c0:	681b      	ldr	r3, [r3, #0]
    45c2:	4618      	mov	r0, r3
    45c4:	4b11      	ldr	r3, [pc, #68]	; (460c <CAN1_Handler+0xc0>)
    45c6:	4798      	blx	r3
    45c8:	4603      	mov	r3, r0
    45ca:	2b00      	cmp	r3, #0
    45cc:	d001      	beq.n	45d2 <CAN1_Handler+0x86>
    45ce:	2302      	movs	r3, #2
    45d0:	e000      	b.n	45d4 <CAN1_Handler+0x88>
    45d2:	2301      	movs	r3, #1
    45d4:	4619      	mov	r1, r3
    45d6:	6878      	ldr	r0, [r7, #4]
    45d8:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    45da:	683b      	ldr	r3, [r7, #0]
    45dc:	f003 0308 	and.w	r3, r3, #8
    45e0:	2b00      	cmp	r3, #0
    45e2:	d004      	beq.n	45ee <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    45e4:	687b      	ldr	r3, [r7, #4]
    45e6:	68db      	ldr	r3, [r3, #12]
    45e8:	2104      	movs	r1, #4
    45ea:	6878      	ldr	r0, [r7, #4]
    45ec:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    45ee:	687b      	ldr	r3, [r7, #4]
    45f0:	681b      	ldr	r3, [r3, #0]
    45f2:	6839      	ldr	r1, [r7, #0]
    45f4:	4618      	mov	r0, r3
    45f6:	4b06      	ldr	r3, [pc, #24]	; (4610 <CAN1_Handler+0xc4>)
    45f8:	4798      	blx	r3
}
    45fa:	bf00      	nop
    45fc:	370c      	adds	r7, #12
    45fe:	46bd      	mov	sp, r7
    4600:	bd90      	pop	{r4, r7, pc}
    4602:	bf00      	nop
    4604:	20000928 	.word	0x20000928
    4608:	0000421d 	.word	0x0000421d
    460c:	000040b5 	.word	0x000040b5
    4610:	00004201 	.word	0x00004201

00004614 <__NVIC_SetPendingIRQ>:
{
    4614:	b480      	push	{r7}
    4616:	b083      	sub	sp, #12
    4618:	af00      	add	r7, sp, #0
    461a:	4603      	mov	r3, r0
    461c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    461e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4622:	2b00      	cmp	r3, #0
    4624:	db0c      	blt.n	4640 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4626:	4909      	ldr	r1, [pc, #36]	; (464c <__NVIC_SetPendingIRQ+0x38>)
    4628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    462c:	095b      	lsrs	r3, r3, #5
    462e:	88fa      	ldrh	r2, [r7, #6]
    4630:	f002 021f 	and.w	r2, r2, #31
    4634:	2001      	movs	r0, #1
    4636:	fa00 f202 	lsl.w	r2, r0, r2
    463a:	3340      	adds	r3, #64	; 0x40
    463c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4640:	bf00      	nop
    4642:	370c      	adds	r7, #12
    4644:	46bd      	mov	sp, r7
    4646:	f85d 7b04 	ldr.w	r7, [sp], #4
    464a:	4770      	bx	lr
    464c:	e000e100 	.word	0xe000e100

00004650 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    4650:	b580      	push	{r7, lr}
    4652:	b082      	sub	sp, #8
    4654:	af00      	add	r7, sp, #0
    4656:	4603      	mov	r3, r0
    4658:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    465a:	79fb      	ldrb	r3, [r7, #7]
    465c:	b21b      	sxth	r3, r3
    465e:	4618      	mov	r0, r3
    4660:	4b02      	ldr	r3, [pc, #8]	; (466c <_irq_set+0x1c>)
    4662:	4798      	blx	r3
}
    4664:	bf00      	nop
    4666:	3708      	adds	r7, #8
    4668:	46bd      	mov	sp, r7
    466a:	bd80      	pop	{r7, pc}
    466c:	00004615 	.word	0x00004615

00004670 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    4670:	b480      	push	{r7}
    4672:	b083      	sub	sp, #12
    4674:	af00      	add	r7, sp, #0
    4676:	4603      	mov	r3, r0
    4678:	6039      	str	r1, [r7, #0]
    467a:	80fb      	strh	r3, [r7, #6]
    467c:	4613      	mov	r3, r2
    467e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4680:	797b      	ldrb	r3, [r7, #5]
    4682:	3b04      	subs	r3, #4
    4684:	2b05      	cmp	r3, #5
    4686:	d86b      	bhi.n	4760 <_get_cycles_for_us_internal+0xf0>
    4688:	a201      	add	r2, pc, #4	; (adr r2, 4690 <_get_cycles_for_us_internal+0x20>)
    468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    468e:	bf00      	nop
    4690:	0000473f 	.word	0x0000473f
    4694:	0000471f 	.word	0x0000471f
    4698:	00004701 	.word	0x00004701
    469c:	000046e3 	.word	0x000046e3
    46a0:	000046c5 	.word	0x000046c5
    46a4:	000046a9 	.word	0x000046a9
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    46a8:	88fb      	ldrh	r3, [r7, #6]
    46aa:	683a      	ldr	r2, [r7, #0]
    46ac:	4935      	ldr	r1, [pc, #212]	; (4784 <_get_cycles_for_us_internal+0x114>)
    46ae:	fba1 1202 	umull	r1, r2, r1, r2
    46b2:	0c92      	lsrs	r2, r2, #18
    46b4:	fb02 f303 	mul.w	r3, r2, r3
    46b8:	3302      	adds	r3, #2
    46ba:	4a33      	ldr	r2, [pc, #204]	; (4788 <_get_cycles_for_us_internal+0x118>)
    46bc:	fba2 2303 	umull	r2, r3, r2, r3
    46c0:	085b      	lsrs	r3, r3, #1
    46c2:	e059      	b.n	4778 <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    46c4:	88fb      	ldrh	r3, [r7, #6]
    46c6:	683a      	ldr	r2, [r7, #0]
    46c8:	0952      	lsrs	r2, r2, #5
    46ca:	4930      	ldr	r1, [pc, #192]	; (478c <_get_cycles_for_us_internal+0x11c>)
    46cc:	fba1 1202 	umull	r1, r2, r1, r2
    46d0:	09d2      	lsrs	r2, r2, #7
    46d2:	fb02 f303 	mul.w	r3, r2, r3
    46d6:	331d      	adds	r3, #29
    46d8:	4a2d      	ldr	r2, [pc, #180]	; (4790 <_get_cycles_for_us_internal+0x120>)
    46da:	fba2 2303 	umull	r2, r3, r2, r3
    46de:	091b      	lsrs	r3, r3, #4
    46e0:	e04a      	b.n	4778 <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    46e2:	88fb      	ldrh	r3, [r7, #6]
    46e4:	683a      	ldr	r2, [r7, #0]
    46e6:	492b      	ldr	r1, [pc, #172]	; (4794 <_get_cycles_for_us_internal+0x124>)
    46e8:	fba1 1202 	umull	r1, r2, r1, r2
    46ec:	0b52      	lsrs	r2, r2, #13
    46ee:	fb02 f303 	mul.w	r3, r2, r3
    46f2:	f203 132b 	addw	r3, r3, #299	; 0x12b
    46f6:	4a28      	ldr	r2, [pc, #160]	; (4798 <_get_cycles_for_us_internal+0x128>)
    46f8:	fba2 2303 	umull	r2, r3, r2, r3
    46fc:	095b      	lsrs	r3, r3, #5
    46fe:	e03b      	b.n	4778 <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    4700:	88fb      	ldrh	r3, [r7, #6]
    4702:	683a      	ldr	r2, [r7, #0]
    4704:	4925      	ldr	r1, [pc, #148]	; (479c <_get_cycles_for_us_internal+0x12c>)
    4706:	fba1 1202 	umull	r1, r2, r1, r2
    470a:	0992      	lsrs	r2, r2, #6
    470c:	fb02 f303 	mul.w	r3, r2, r3
    4710:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4714:	4a22      	ldr	r2, [pc, #136]	; (47a0 <_get_cycles_for_us_internal+0x130>)
    4716:	fba2 2303 	umull	r2, r3, r2, r3
    471a:	099b      	lsrs	r3, r3, #6
    471c:	e02c      	b.n	4778 <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    471e:	88fb      	ldrh	r3, [r7, #6]
    4720:	683a      	ldr	r2, [r7, #0]
    4722:	4920      	ldr	r1, [pc, #128]	; (47a4 <_get_cycles_for_us_internal+0x134>)
    4724:	fba1 1202 	umull	r1, r2, r1, r2
    4728:	0952      	lsrs	r2, r2, #5
    472a:	fb02 f303 	mul.w	r3, r2, r3
    472e:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    4732:	332f      	adds	r3, #47	; 0x2f
    4734:	4a1c      	ldr	r2, [pc, #112]	; (47a8 <_get_cycles_for_us_internal+0x138>)
    4736:	fba2 2303 	umull	r2, r3, r2, r3
    473a:	0b5b      	lsrs	r3, r3, #13
    473c:	e01c      	b.n	4778 <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    473e:	88fb      	ldrh	r3, [r7, #6]
    4740:	683a      	ldr	r2, [r7, #0]
    4742:	491a      	ldr	r1, [pc, #104]	; (47ac <_get_cycles_for_us_internal+0x13c>)
    4744:	fba1 1202 	umull	r1, r2, r1, r2
    4748:	08d2      	lsrs	r2, r2, #3
    474a:	fb02 f303 	mul.w	r3, r2, r3
    474e:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    4752:	f203 33df 	addw	r3, r3, #991	; 0x3df
    4756:	4a16      	ldr	r2, [pc, #88]	; (47b0 <_get_cycles_for_us_internal+0x140>)
    4758:	fba2 2303 	umull	r2, r3, r2, r3
    475c:	0c5b      	lsrs	r3, r3, #17
    475e:	e00b      	b.n	4778 <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    4760:	88fb      	ldrh	r3, [r7, #6]
    4762:	683a      	ldr	r2, [r7, #0]
    4764:	fb02 f303 	mul.w	r3, r2, r3
    4768:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    476c:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    4770:	4a10      	ldr	r2, [pc, #64]	; (47b4 <_get_cycles_for_us_internal+0x144>)
    4772:	fba2 2303 	umull	r2, r3, r2, r3
    4776:	0c9b      	lsrs	r3, r3, #18
	}
}
    4778:	4618      	mov	r0, r3
    477a:	370c      	adds	r7, #12
    477c:	46bd      	mov	sp, r7
    477e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4782:	4770      	bx	lr
    4784:	431bde83 	.word	0x431bde83
    4788:	aaaaaaab 	.word	0xaaaaaaab
    478c:	0a7c5ac5 	.word	0x0a7c5ac5
    4790:	88888889 	.word	0x88888889
    4794:	d1b71759 	.word	0xd1b71759
    4798:	1b4e81b5 	.word	0x1b4e81b5
    479c:	10624dd3 	.word	0x10624dd3
    47a0:	057619f1 	.word	0x057619f1
    47a4:	51eb851f 	.word	0x51eb851f
    47a8:	45e7b273 	.word	0x45e7b273
    47ac:	cccccccd 	.word	0xcccccccd
    47b0:	6fd91d85 	.word	0x6fd91d85
    47b4:	165e9f81 	.word	0x165e9f81

000047b8 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    47b8:	b580      	push	{r7, lr}
    47ba:	b082      	sub	sp, #8
    47bc:	af00      	add	r7, sp, #0
    47be:	4603      	mov	r3, r0
    47c0:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    47c2:	88fb      	ldrh	r3, [r7, #6]
    47c4:	2209      	movs	r2, #9
    47c6:	4904      	ldr	r1, [pc, #16]	; (47d8 <_get_cycles_for_us+0x20>)
    47c8:	4618      	mov	r0, r3
    47ca:	4b04      	ldr	r3, [pc, #16]	; (47dc <_get_cycles_for_us+0x24>)
    47cc:	4798      	blx	r3
    47ce:	4603      	mov	r3, r0
}
    47d0:	4618      	mov	r0, r3
    47d2:	3708      	adds	r7, #8
    47d4:	46bd      	mov	sp, r7
    47d6:	bd80      	pop	{r7, pc}
    47d8:	07270e00 	.word	0x07270e00
    47dc:	00004671 	.word	0x00004671

000047e0 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    47e0:	b480      	push	{r7}
    47e2:	b083      	sub	sp, #12
    47e4:	af00      	add	r7, sp, #0
    47e6:	4603      	mov	r3, r0
    47e8:	6039      	str	r1, [r7, #0]
    47ea:	80fb      	strh	r3, [r7, #6]
    47ec:	4613      	mov	r3, r2
    47ee:	717b      	strb	r3, [r7, #5]
	switch (power) {
    47f0:	797b      	ldrb	r3, [r7, #5]
    47f2:	3b04      	subs	r3, #4
    47f4:	2b05      	cmp	r3, #5
    47f6:	d870      	bhi.n	48da <_get_cycles_for_ms_internal+0xfa>
    47f8:	a201      	add	r2, pc, #4	; (adr r2, 4800 <_get_cycles_for_ms_internal+0x20>)
    47fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    47fe:	bf00      	nop
    4800:	000048bd 	.word	0x000048bd
    4804:	000048a1 	.word	0x000048a1
    4808:	00004885 	.word	0x00004885
    480c:	00004861 	.word	0x00004861
    4810:	0000483d 	.word	0x0000483d
    4814:	00004819 	.word	0x00004819
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    4818:	88fb      	ldrh	r3, [r7, #6]
    481a:	683a      	ldr	r2, [r7, #0]
    481c:	4937      	ldr	r1, [pc, #220]	; (48fc <_get_cycles_for_ms_internal+0x11c>)
    481e:	fba1 1202 	umull	r1, r2, r1, r2
    4822:	0c92      	lsrs	r2, r2, #18
    4824:	fb02 f303 	mul.w	r3, r2, r3
    4828:	3302      	adds	r3, #2
    482a:	4a35      	ldr	r2, [pc, #212]	; (4900 <_get_cycles_for_ms_internal+0x120>)
    482c:	fba2 2303 	umull	r2, r3, r2, r3
    4830:	085b      	lsrs	r3, r3, #1
    4832:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4836:	fb02 f303 	mul.w	r3, r2, r3
    483a:	e058      	b.n	48ee <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    483c:	88fb      	ldrh	r3, [r7, #6]
    483e:	683a      	ldr	r2, [r7, #0]
    4840:	0952      	lsrs	r2, r2, #5
    4842:	4930      	ldr	r1, [pc, #192]	; (4904 <_get_cycles_for_ms_internal+0x124>)
    4844:	fba1 1202 	umull	r1, r2, r1, r2
    4848:	09d2      	lsrs	r2, r2, #7
    484a:	fb02 f303 	mul.w	r3, r2, r3
    484e:	3302      	adds	r3, #2
    4850:	4a2b      	ldr	r2, [pc, #172]	; (4900 <_get_cycles_for_ms_internal+0x120>)
    4852:	fba2 2303 	umull	r2, r3, r2, r3
    4856:	085b      	lsrs	r3, r3, #1
    4858:	2264      	movs	r2, #100	; 0x64
    485a:	fb02 f303 	mul.w	r3, r2, r3
    485e:	e046      	b.n	48ee <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    4860:	88fb      	ldrh	r3, [r7, #6]
    4862:	683a      	ldr	r2, [r7, #0]
    4864:	4928      	ldr	r1, [pc, #160]	; (4908 <_get_cycles_for_ms_internal+0x128>)
    4866:	fba1 1202 	umull	r1, r2, r1, r2
    486a:	0b52      	lsrs	r2, r2, #13
    486c:	fb02 f303 	mul.w	r3, r2, r3
    4870:	3302      	adds	r3, #2
    4872:	4a23      	ldr	r2, [pc, #140]	; (4900 <_get_cycles_for_ms_internal+0x120>)
    4874:	fba2 2303 	umull	r2, r3, r2, r3
    4878:	085a      	lsrs	r2, r3, #1
    487a:	4613      	mov	r3, r2
    487c:	009b      	lsls	r3, r3, #2
    487e:	4413      	add	r3, r2
    4880:	005b      	lsls	r3, r3, #1
    4882:	e034      	b.n	48ee <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    4884:	88fb      	ldrh	r3, [r7, #6]
    4886:	683a      	ldr	r2, [r7, #0]
    4888:	4920      	ldr	r1, [pc, #128]	; (490c <_get_cycles_for_ms_internal+0x12c>)
    488a:	fba1 1202 	umull	r1, r2, r1, r2
    488e:	0992      	lsrs	r2, r2, #6
    4890:	fb02 f303 	mul.w	r3, r2, r3
    4894:	3302      	adds	r3, #2
    4896:	4a1a      	ldr	r2, [pc, #104]	; (4900 <_get_cycles_for_ms_internal+0x120>)
    4898:	fba2 2303 	umull	r2, r3, r2, r3
    489c:	085b      	lsrs	r3, r3, #1
    489e:	e026      	b.n	48ee <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    48a0:	88fb      	ldrh	r3, [r7, #6]
    48a2:	683a      	ldr	r2, [r7, #0]
    48a4:	491a      	ldr	r1, [pc, #104]	; (4910 <_get_cycles_for_ms_internal+0x130>)
    48a6:	fba1 1202 	umull	r1, r2, r1, r2
    48aa:	0952      	lsrs	r2, r2, #5
    48ac:	fb02 f303 	mul.w	r3, r2, r3
    48b0:	331d      	adds	r3, #29
    48b2:	4a18      	ldr	r2, [pc, #96]	; (4914 <_get_cycles_for_ms_internal+0x134>)
    48b4:	fba2 2303 	umull	r2, r3, r2, r3
    48b8:	091b      	lsrs	r3, r3, #4
    48ba:	e018      	b.n	48ee <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    48bc:	88fb      	ldrh	r3, [r7, #6]
    48be:	683a      	ldr	r2, [r7, #0]
    48c0:	4915      	ldr	r1, [pc, #84]	; (4918 <_get_cycles_for_ms_internal+0x138>)
    48c2:	fba1 1202 	umull	r1, r2, r1, r2
    48c6:	08d2      	lsrs	r2, r2, #3
    48c8:	fb02 f303 	mul.w	r3, r2, r3
    48cc:	f203 132b 	addw	r3, r3, #299	; 0x12b
    48d0:	4a12      	ldr	r2, [pc, #72]	; (491c <_get_cycles_for_ms_internal+0x13c>)
    48d2:	fba2 2303 	umull	r2, r3, r2, r3
    48d6:	095b      	lsrs	r3, r3, #5
    48d8:	e009      	b.n	48ee <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    48da:	88fb      	ldrh	r3, [r7, #6]
    48dc:	683a      	ldr	r2, [r7, #0]
    48de:	fb02 f303 	mul.w	r3, r2, r3
    48e2:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    48e6:	4a0e      	ldr	r2, [pc, #56]	; (4920 <_get_cycles_for_ms_internal+0x140>)
    48e8:	fba2 2303 	umull	r2, r3, r2, r3
    48ec:	099b      	lsrs	r3, r3, #6
	}
}
    48ee:	4618      	mov	r0, r3
    48f0:	370c      	adds	r7, #12
    48f2:	46bd      	mov	sp, r7
    48f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    48f8:	4770      	bx	lr
    48fa:	bf00      	nop
    48fc:	431bde83 	.word	0x431bde83
    4900:	aaaaaaab 	.word	0xaaaaaaab
    4904:	0a7c5ac5 	.word	0x0a7c5ac5
    4908:	d1b71759 	.word	0xd1b71759
    490c:	10624dd3 	.word	0x10624dd3
    4910:	51eb851f 	.word	0x51eb851f
    4914:	88888889 	.word	0x88888889
    4918:	cccccccd 	.word	0xcccccccd
    491c:	1b4e81b5 	.word	0x1b4e81b5
    4920:	057619f1 	.word	0x057619f1

00004924 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4924:	b580      	push	{r7, lr}
    4926:	b082      	sub	sp, #8
    4928:	af00      	add	r7, sp, #0
    492a:	4603      	mov	r3, r0
    492c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    492e:	88fb      	ldrh	r3, [r7, #6]
    4930:	2209      	movs	r2, #9
    4932:	4904      	ldr	r1, [pc, #16]	; (4944 <_get_cycles_for_ms+0x20>)
    4934:	4618      	mov	r0, r3
    4936:	4b04      	ldr	r3, [pc, #16]	; (4948 <_get_cycles_for_ms+0x24>)
    4938:	4798      	blx	r3
    493a:	4603      	mov	r3, r0
}
    493c:	4618      	mov	r0, r3
    493e:	3708      	adds	r7, #8
    4940:	46bd      	mov	sp, r7
    4942:	bd80      	pop	{r7, pc}
    4944:	07270e00 	.word	0x07270e00
    4948:	000047e1 	.word	0x000047e1
    494c:	00000000 	.word	0x00000000

00004950 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4950:	b480      	push	{r7}
    4952:	b083      	sub	sp, #12
    4954:	af00      	add	r7, sp, #0
    4956:	6078      	str	r0, [r7, #4]
    4958:	6039      	str	r1, [r7, #0]
    495a:	bf00      	nop
    495c:	f3af 8000 	nop.w

00004960 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4960:	3901      	subs	r1, #1
    4962:	d8fd      	bhi.n	4960 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    4964:	bf00      	nop
    4966:	370c      	adds	r7, #12
    4968:	46bd      	mov	sp, r7
    496a:	f85d 7b04 	ldr.w	r7, [sp], #4
    496e:	4770      	bx	lr

00004970 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4970:	b480      	push	{r7}
    4972:	b083      	sub	sp, #12
    4974:	af00      	add	r7, sp, #0
    4976:	6078      	str	r0, [r7, #4]
    4978:	460b      	mov	r3, r1
    497a:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    497c:	687b      	ldr	r3, [r7, #4]
    497e:	881b      	ldrh	r3, [r3, #0]
    4980:	b29a      	uxth	r2, r3
    4982:	887b      	ldrh	r3, [r7, #2]
    4984:	021b      	lsls	r3, r3, #8
    4986:	b29b      	uxth	r3, r3
    4988:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    498c:	b29b      	uxth	r3, r3
    498e:	4313      	orrs	r3, r2
    4990:	b29a      	uxth	r2, r3
    4992:	687b      	ldr	r3, [r7, #4]
    4994:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    4996:	bf00      	nop
    4998:	370c      	adds	r7, #12
    499a:	46bd      	mov	sp, r7
    499c:	f85d 7b04 	ldr.w	r7, [sp], #4
    49a0:	4770      	bx	lr

000049a2 <hri_port_set_EVCTRL_reg>:
{
    49a2:	b480      	push	{r7}
    49a4:	b085      	sub	sp, #20
    49a6:	af00      	add	r7, sp, #0
    49a8:	60f8      	str	r0, [r7, #12]
    49aa:	460b      	mov	r3, r1
    49ac:	607a      	str	r2, [r7, #4]
    49ae:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    49b0:	7afb      	ldrb	r3, [r7, #11]
    49b2:	7afa      	ldrb	r2, [r7, #11]
    49b4:	68f9      	ldr	r1, [r7, #12]
    49b6:	01d2      	lsls	r2, r2, #7
    49b8:	440a      	add	r2, r1
    49ba:	322c      	adds	r2, #44	; 0x2c
    49bc:	6811      	ldr	r1, [r2, #0]
    49be:	687a      	ldr	r2, [r7, #4]
    49c0:	430a      	orrs	r2, r1
    49c2:	68f9      	ldr	r1, [r7, #12]
    49c4:	01db      	lsls	r3, r3, #7
    49c6:	440b      	add	r3, r1
    49c8:	332c      	adds	r3, #44	; 0x2c
    49ca:	601a      	str	r2, [r3, #0]
}
    49cc:	bf00      	nop
    49ce:	3714      	adds	r7, #20
    49d0:	46bd      	mov	sp, r7
    49d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    49d6:	4770      	bx	lr

000049d8 <_port_event_init>:

static inline void _port_event_init()
{
    49d8:	b580      	push	{r7, lr}
    49da:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    49dc:	2200      	movs	r2, #0
    49de:	2100      	movs	r1, #0
    49e0:	480a      	ldr	r0, [pc, #40]	; (4a0c <_port_event_init+0x34>)
    49e2:	4b0b      	ldr	r3, [pc, #44]	; (4a10 <_port_event_init+0x38>)
    49e4:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    49e6:	2200      	movs	r2, #0
    49e8:	2101      	movs	r1, #1
    49ea:	4808      	ldr	r0, [pc, #32]	; (4a0c <_port_event_init+0x34>)
    49ec:	4b08      	ldr	r3, [pc, #32]	; (4a10 <_port_event_init+0x38>)
    49ee:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    49f0:	f64e 72ef 	movw	r2, #61423	; 0xefef
    49f4:	2102      	movs	r1, #2
    49f6:	4805      	ldr	r0, [pc, #20]	; (4a0c <_port_event_init+0x34>)
    49f8:	4b05      	ldr	r3, [pc, #20]	; (4a10 <_port_event_init+0x38>)
    49fa:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    49fc:	2200      	movs	r2, #0
    49fe:	2103      	movs	r1, #3
    4a00:	4802      	ldr	r0, [pc, #8]	; (4a0c <_port_event_init+0x34>)
    4a02:	4b03      	ldr	r3, [pc, #12]	; (4a10 <_port_event_init+0x38>)
    4a04:	4798      	blx	r3
}
    4a06:	bf00      	nop
    4a08:	bd80      	pop	{r7, pc}
    4a0a:	bf00      	nop
    4a0c:	41008000 	.word	0x41008000
    4a10:	000049a3 	.word	0x000049a3

00004a14 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4a14:	b580      	push	{r7, lr}
    4a16:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4a18:	2104      	movs	r1, #4
    4a1a:	480b      	ldr	r0, [pc, #44]	; (4a48 <_init_chip+0x34>)
    4a1c:	4b0b      	ldr	r3, [pc, #44]	; (4a4c <_init_chip+0x38>)
    4a1e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4a20:	4b0b      	ldr	r3, [pc, #44]	; (4a50 <_init_chip+0x3c>)
    4a22:	4798      	blx	r3
	_oscctrl_init_sources();
    4a24:	4b0b      	ldr	r3, [pc, #44]	; (4a54 <_init_chip+0x40>)
    4a26:	4798      	blx	r3
	_mclk_init();
    4a28:	4b0b      	ldr	r3, [pc, #44]	; (4a58 <_init_chip+0x44>)
    4a2a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4a2c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4a30:	4b0a      	ldr	r3, [pc, #40]	; (4a5c <_init_chip+0x48>)
    4a32:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4a34:	4b0a      	ldr	r3, [pc, #40]	; (4a60 <_init_chip+0x4c>)
    4a36:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4a38:	f640 30df 	movw	r0, #3039	; 0xbdf
    4a3c:	4b07      	ldr	r3, [pc, #28]	; (4a5c <_init_chip+0x48>)
    4a3e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4a40:	4b08      	ldr	r3, [pc, #32]	; (4a64 <_init_chip+0x50>)
    4a42:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4a44:	bf00      	nop
    4a46:	bd80      	pop	{r7, pc}
    4a48:	41004000 	.word	0x41004000
    4a4c:	00004971 	.word	0x00004971
    4a50:	00005525 	.word	0x00005525
    4a54:	000059ed 	.word	0x000059ed
    4a58:	00005445 	.word	0x00005445
    4a5c:	00005305 	.word	0x00005305
    4a60:	00005a2d 	.word	0x00005a2d
    4a64:	000049d9 	.word	0x000049d9

00004a68 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4a68:	b480      	push	{r7}
    4a6a:	b083      	sub	sp, #12
    4a6c:	af00      	add	r7, sp, #0
    4a6e:	6078      	str	r0, [r7, #4]
    4a70:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4a72:	687b      	ldr	r3, [r7, #4]
    4a74:	683a      	ldr	r2, [r7, #0]
    4a76:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4a78:	2300      	movs	r3, #0
}
    4a7a:	4618      	mov	r0, r3
    4a7c:	370c      	adds	r7, #12
    4a7e:	46bd      	mov	sp, r7
    4a80:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a84:	4770      	bx	lr
	...

00004a88 <__NVIC_EnableIRQ>:
{
    4a88:	b480      	push	{r7}
    4a8a:	b083      	sub	sp, #12
    4a8c:	af00      	add	r7, sp, #0
    4a8e:	4603      	mov	r3, r0
    4a90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4a96:	2b00      	cmp	r3, #0
    4a98:	db0b      	blt.n	4ab2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4a9a:	4909      	ldr	r1, [pc, #36]	; (4ac0 <__NVIC_EnableIRQ+0x38>)
    4a9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4aa0:	095b      	lsrs	r3, r3, #5
    4aa2:	88fa      	ldrh	r2, [r7, #6]
    4aa4:	f002 021f 	and.w	r2, r2, #31
    4aa8:	2001      	movs	r0, #1
    4aaa:	fa00 f202 	lsl.w	r2, r0, r2
    4aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4ab2:	bf00      	nop
    4ab4:	370c      	adds	r7, #12
    4ab6:	46bd      	mov	sp, r7
    4ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4abc:	4770      	bx	lr
    4abe:	bf00      	nop
    4ac0:	e000e100 	.word	0xe000e100

00004ac4 <__NVIC_DisableIRQ>:
{
    4ac4:	b480      	push	{r7}
    4ac6:	b083      	sub	sp, #12
    4ac8:	af00      	add	r7, sp, #0
    4aca:	4603      	mov	r3, r0
    4acc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4ad2:	2b00      	cmp	r3, #0
    4ad4:	db10      	blt.n	4af8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4ad6:	490b      	ldr	r1, [pc, #44]	; (4b04 <__NVIC_DisableIRQ+0x40>)
    4ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4adc:	095b      	lsrs	r3, r3, #5
    4ade:	88fa      	ldrh	r2, [r7, #6]
    4ae0:	f002 021f 	and.w	r2, r2, #31
    4ae4:	2001      	movs	r0, #1
    4ae6:	fa00 f202 	lsl.w	r2, r0, r2
    4aea:	3320      	adds	r3, #32
    4aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4af0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4af4:	f3bf 8f6f 	isb	sy
}
    4af8:	bf00      	nop
    4afa:	370c      	adds	r7, #12
    4afc:	46bd      	mov	sp, r7
    4afe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b02:	4770      	bx	lr
    4b04:	e000e100 	.word	0xe000e100

00004b08 <__NVIC_ClearPendingIRQ>:
{
    4b08:	b480      	push	{r7}
    4b0a:	b083      	sub	sp, #12
    4b0c:	af00      	add	r7, sp, #0
    4b0e:	4603      	mov	r3, r0
    4b10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4b16:	2b00      	cmp	r3, #0
    4b18:	db0c      	blt.n	4b34 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4b1a:	4909      	ldr	r1, [pc, #36]	; (4b40 <__NVIC_ClearPendingIRQ+0x38>)
    4b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4b20:	095b      	lsrs	r3, r3, #5
    4b22:	88fa      	ldrh	r2, [r7, #6]
    4b24:	f002 021f 	and.w	r2, r2, #31
    4b28:	2001      	movs	r0, #1
    4b2a:	fa00 f202 	lsl.w	r2, r0, r2
    4b2e:	3360      	adds	r3, #96	; 0x60
    4b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4b34:	bf00      	nop
    4b36:	370c      	adds	r7, #12
    4b38:	46bd      	mov	sp, r7
    4b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b3e:	4770      	bx	lr
    4b40:	e000e100 	.word	0xe000e100

00004b44 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4b44:	b480      	push	{r7}
    4b46:	b083      	sub	sp, #12
    4b48:	af00      	add	r7, sp, #0
    4b4a:	6078      	str	r0, [r7, #4]
    4b4c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4b4e:	bf00      	nop
    4b50:	687b      	ldr	r3, [r7, #4]
    4b52:	685a      	ldr	r2, [r3, #4]
    4b54:	683b      	ldr	r3, [r7, #0]
    4b56:	4013      	ands	r3, r2
    4b58:	2b00      	cmp	r3, #0
    4b5a:	d1f9      	bne.n	4b50 <hri_eic_wait_for_sync+0xc>
	};
}
    4b5c:	bf00      	nop
    4b5e:	370c      	adds	r7, #12
    4b60:	46bd      	mov	sp, r7
    4b62:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b66:	4770      	bx	lr

00004b68 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4b68:	b480      	push	{r7}
    4b6a:	b083      	sub	sp, #12
    4b6c:	af00      	add	r7, sp, #0
    4b6e:	6078      	str	r0, [r7, #4]
    4b70:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4b72:	687b      	ldr	r3, [r7, #4]
    4b74:	685a      	ldr	r2, [r3, #4]
    4b76:	683b      	ldr	r3, [r7, #0]
    4b78:	4013      	ands	r3, r2
    4b7a:	2b00      	cmp	r3, #0
    4b7c:	bf14      	ite	ne
    4b7e:	2301      	movne	r3, #1
    4b80:	2300      	moveq	r3, #0
    4b82:	b2db      	uxtb	r3, r3
}
    4b84:	4618      	mov	r0, r3
    4b86:	370c      	adds	r7, #12
    4b88:	46bd      	mov	sp, r7
    4b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b8e:	4770      	bx	lr

00004b90 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4b90:	b480      	push	{r7}
    4b92:	b083      	sub	sp, #12
    4b94:	af00      	add	r7, sp, #0
    4b96:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4b98:	687b      	ldr	r3, [r7, #4]
    4b9a:	695b      	ldr	r3, [r3, #20]
}
    4b9c:	4618      	mov	r0, r3
    4b9e:	370c      	adds	r7, #12
    4ba0:	46bd      	mov	sp, r7
    4ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ba6:	4770      	bx	lr

00004ba8 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4ba8:	b480      	push	{r7}
    4baa:	b083      	sub	sp, #12
    4bac:	af00      	add	r7, sp, #0
    4bae:	6078      	str	r0, [r7, #4]
    4bb0:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4bb2:	687b      	ldr	r3, [r7, #4]
    4bb4:	683a      	ldr	r2, [r7, #0]
    4bb6:	615a      	str	r2, [r3, #20]
}
    4bb8:	bf00      	nop
    4bba:	370c      	adds	r7, #12
    4bbc:	46bd      	mov	sp, r7
    4bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bc2:	4770      	bx	lr

00004bc4 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4bc4:	b480      	push	{r7}
    4bc6:	b083      	sub	sp, #12
    4bc8:	af00      	add	r7, sp, #0
    4bca:	6078      	str	r0, [r7, #4]
    4bcc:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4bce:	687b      	ldr	r3, [r7, #4]
    4bd0:	683a      	ldr	r2, [r7, #0]
    4bd2:	611a      	str	r2, [r3, #16]
}
    4bd4:	bf00      	nop
    4bd6:	370c      	adds	r7, #12
    4bd8:	46bd      	mov	sp, r7
    4bda:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bde:	4770      	bx	lr

00004be0 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4be0:	b480      	push	{r7}
    4be2:	b083      	sub	sp, #12
    4be4:	af00      	add	r7, sp, #0
    4be6:	6078      	str	r0, [r7, #4]
    4be8:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4bea:	687b      	ldr	r3, [r7, #4]
    4bec:	683a      	ldr	r2, [r7, #0]
    4bee:	60da      	str	r2, [r3, #12]
}
    4bf0:	bf00      	nop
    4bf2:	370c      	adds	r7, #12
    4bf4:	46bd      	mov	sp, r7
    4bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bfa:	4770      	bx	lr

00004bfc <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4bfc:	b580      	push	{r7, lr}
    4bfe:	b082      	sub	sp, #8
    4c00:	af00      	add	r7, sp, #0
    4c02:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4c04:	687b      	ldr	r3, [r7, #4]
    4c06:	781b      	ldrb	r3, [r3, #0]
    4c08:	b2db      	uxtb	r3, r3
    4c0a:	f043 0302 	orr.w	r3, r3, #2
    4c0e:	b2da      	uxtb	r2, r3
    4c10:	687b      	ldr	r3, [r7, #4]
    4c12:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4c14:	2103      	movs	r1, #3
    4c16:	6878      	ldr	r0, [r7, #4]
    4c18:	4b02      	ldr	r3, [pc, #8]	; (4c24 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4c1a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4c1c:	bf00      	nop
    4c1e:	3708      	adds	r7, #8
    4c20:	46bd      	mov	sp, r7
    4c22:	bd80      	pop	{r7, pc}
    4c24:	00004b45 	.word	0x00004b45

00004c28 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4c28:	b580      	push	{r7, lr}
    4c2a:	b082      	sub	sp, #8
    4c2c:	af00      	add	r7, sp, #0
    4c2e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4c30:	687b      	ldr	r3, [r7, #4]
    4c32:	781b      	ldrb	r3, [r3, #0]
    4c34:	b2db      	uxtb	r3, r3
    4c36:	f023 0302 	bic.w	r3, r3, #2
    4c3a:	b2da      	uxtb	r2, r3
    4c3c:	687b      	ldr	r3, [r7, #4]
    4c3e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4c40:	2103      	movs	r1, #3
    4c42:	6878      	ldr	r0, [r7, #4]
    4c44:	4b02      	ldr	r3, [pc, #8]	; (4c50 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4c46:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4c48:	bf00      	nop
    4c4a:	3708      	adds	r7, #8
    4c4c:	46bd      	mov	sp, r7
    4c4e:	bd80      	pop	{r7, pc}
    4c50:	00004b45 	.word	0x00004b45

00004c54 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4c54:	b580      	push	{r7, lr}
    4c56:	b084      	sub	sp, #16
    4c58:	af00      	add	r7, sp, #0
    4c5a:	6078      	str	r0, [r7, #4]
    4c5c:	460b      	mov	r3, r1
    4c5e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4c60:	687b      	ldr	r3, [r7, #4]
    4c62:	781b      	ldrb	r3, [r3, #0]
    4c64:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4c66:	7bfb      	ldrb	r3, [r7, #15]
    4c68:	f023 0310 	bic.w	r3, r3, #16
    4c6c:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4c6e:	78fb      	ldrb	r3, [r7, #3]
    4c70:	011b      	lsls	r3, r3, #4
    4c72:	b25a      	sxtb	r2, r3
    4c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4c78:	4313      	orrs	r3, r2
    4c7a:	b25b      	sxtb	r3, r3
    4c7c:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4c7e:	687b      	ldr	r3, [r7, #4]
    4c80:	7bfa      	ldrb	r2, [r7, #15]
    4c82:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4c84:	2103      	movs	r1, #3
    4c86:	6878      	ldr	r0, [r7, #4]
    4c88:	4b02      	ldr	r3, [pc, #8]	; (4c94 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4c8a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4c8c:	bf00      	nop
    4c8e:	3710      	adds	r7, #16
    4c90:	46bd      	mov	sp, r7
    4c92:	bd80      	pop	{r7, pc}
    4c94:	00004b45 	.word	0x00004b45

00004c98 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4c98:	b580      	push	{r7, lr}
    4c9a:	b084      	sub	sp, #16
    4c9c:	af00      	add	r7, sp, #0
    4c9e:	6078      	str	r0, [r7, #4]
    4ca0:	460b      	mov	r3, r1
    4ca2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4ca4:	2103      	movs	r1, #3
    4ca6:	6878      	ldr	r0, [r7, #4]
    4ca8:	4b06      	ldr	r3, [pc, #24]	; (4cc4 <hri_eic_get_CTRLA_reg+0x2c>)
    4caa:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4cac:	687b      	ldr	r3, [r7, #4]
    4cae:	781b      	ldrb	r3, [r3, #0]
    4cb0:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4cb2:	7bfa      	ldrb	r2, [r7, #15]
    4cb4:	78fb      	ldrb	r3, [r7, #3]
    4cb6:	4013      	ands	r3, r2
    4cb8:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4cba:	7bfb      	ldrb	r3, [r7, #15]
}
    4cbc:	4618      	mov	r0, r3
    4cbe:	3710      	adds	r7, #16
    4cc0:	46bd      	mov	sp, r7
    4cc2:	bd80      	pop	{r7, pc}
    4cc4:	00004b45 	.word	0x00004b45

00004cc8 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4cc8:	b580      	push	{r7, lr}
    4cca:	b082      	sub	sp, #8
    4ccc:	af00      	add	r7, sp, #0
    4cce:	6078      	str	r0, [r7, #4]
    4cd0:	460b      	mov	r3, r1
    4cd2:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4cd4:	687b      	ldr	r3, [r7, #4]
    4cd6:	78fa      	ldrb	r2, [r7, #3]
    4cd8:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4cda:	2103      	movs	r1, #3
    4cdc:	6878      	ldr	r0, [r7, #4]
    4cde:	4b03      	ldr	r3, [pc, #12]	; (4cec <hri_eic_write_CTRLA_reg+0x24>)
    4ce0:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4ce2:	bf00      	nop
    4ce4:	3708      	adds	r7, #8
    4ce6:	46bd      	mov	sp, r7
    4ce8:	bd80      	pop	{r7, pc}
    4cea:	bf00      	nop
    4cec:	00004b45 	.word	0x00004b45

00004cf0 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4cf0:	b480      	push	{r7}
    4cf2:	b083      	sub	sp, #12
    4cf4:	af00      	add	r7, sp, #0
    4cf6:	6078      	str	r0, [r7, #4]
    4cf8:	460b      	mov	r3, r1
    4cfa:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4cfc:	687b      	ldr	r3, [r7, #4]
    4cfe:	78fa      	ldrb	r2, [r7, #3]
    4d00:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4d02:	bf00      	nop
    4d04:	370c      	adds	r7, #12
    4d06:	46bd      	mov	sp, r7
    4d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d0c:	4770      	bx	lr

00004d0e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    4d0e:	b480      	push	{r7}
    4d10:	b083      	sub	sp, #12
    4d12:	af00      	add	r7, sp, #0
    4d14:	6078      	str	r0, [r7, #4]
    4d16:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4d18:	687b      	ldr	r3, [r7, #4]
    4d1a:	683a      	ldr	r2, [r7, #0]
    4d1c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4d1e:	bf00      	nop
    4d20:	370c      	adds	r7, #12
    4d22:	46bd      	mov	sp, r7
    4d24:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d28:	4770      	bx	lr

00004d2a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    4d2a:	b480      	push	{r7}
    4d2c:	b083      	sub	sp, #12
    4d2e:	af00      	add	r7, sp, #0
    4d30:	6078      	str	r0, [r7, #4]
    4d32:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4d34:	687b      	ldr	r3, [r7, #4]
    4d36:	683a      	ldr	r2, [r7, #0]
    4d38:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4d3a:	bf00      	nop
    4d3c:	370c      	adds	r7, #12
    4d3e:	46bd      	mov	sp, r7
    4d40:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d44:	4770      	bx	lr

00004d46 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4d46:	b480      	push	{r7}
    4d48:	b085      	sub	sp, #20
    4d4a:	af00      	add	r7, sp, #0
    4d4c:	60f8      	str	r0, [r7, #12]
    4d4e:	460b      	mov	r3, r1
    4d50:	607a      	str	r2, [r7, #4]
    4d52:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4d54:	7afb      	ldrb	r3, [r7, #11]
    4d56:	68fa      	ldr	r2, [r7, #12]
    4d58:	3306      	adds	r3, #6
    4d5a:	009b      	lsls	r3, r3, #2
    4d5c:	4413      	add	r3, r2
    4d5e:	687a      	ldr	r2, [r7, #4]
    4d60:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4d62:	bf00      	nop
    4d64:	3714      	adds	r7, #20
    4d66:	46bd      	mov	sp, r7
    4d68:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d6c:	4770      	bx	lr

00004d6e <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4d6e:	b480      	push	{r7}
    4d70:	b083      	sub	sp, #12
    4d72:	af00      	add	r7, sp, #0
    4d74:	6078      	str	r0, [r7, #4]
    4d76:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4d78:	687b      	ldr	r3, [r7, #4]
    4d7a:	683a      	ldr	r2, [r7, #0]
    4d7c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4d7e:	bf00      	nop
    4d80:	370c      	adds	r7, #12
    4d82:	46bd      	mov	sp, r7
    4d84:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d88:	4770      	bx	lr

00004d8a <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4d8a:	b480      	push	{r7}
    4d8c:	b083      	sub	sp, #12
    4d8e:	af00      	add	r7, sp, #0
    4d90:	6078      	str	r0, [r7, #4]
    4d92:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4d94:	687b      	ldr	r3, [r7, #4]
    4d96:	683a      	ldr	r2, [r7, #0]
    4d98:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4d9a:	bf00      	nop
    4d9c:	370c      	adds	r7, #12
    4d9e:	46bd      	mov	sp, r7
    4da0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4da4:	4770      	bx	lr
	...

00004da8 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4da8:	b580      	push	{r7, lr}
    4daa:	b082      	sub	sp, #8
    4dac:	af00      	add	r7, sp, #0
    4dae:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    4db0:	2101      	movs	r1, #1
    4db2:	484f      	ldr	r0, [pc, #316]	; (4ef0 <_ext_irq_init+0x148>)
    4db4:	4b4f      	ldr	r3, [pc, #316]	; (4ef4 <_ext_irq_init+0x14c>)
    4db6:	4798      	blx	r3
    4db8:	4603      	mov	r3, r0
    4dba:	f083 0301 	eor.w	r3, r3, #1
    4dbe:	b2db      	uxtb	r3, r3
    4dc0:	2b00      	cmp	r3, #0
    4dc2:	d011      	beq.n	4de8 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    4dc4:	2102      	movs	r1, #2
    4dc6:	484a      	ldr	r0, [pc, #296]	; (4ef0 <_ext_irq_init+0x148>)
    4dc8:	4b4b      	ldr	r3, [pc, #300]	; (4ef8 <_ext_irq_init+0x150>)
    4dca:	4798      	blx	r3
    4dcc:	4603      	mov	r3, r0
    4dce:	2b00      	cmp	r3, #0
    4dd0:	d006      	beq.n	4de0 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    4dd2:	4847      	ldr	r0, [pc, #284]	; (4ef0 <_ext_irq_init+0x148>)
    4dd4:	4b49      	ldr	r3, [pc, #292]	; (4efc <_ext_irq_init+0x154>)
    4dd6:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    4dd8:	2102      	movs	r1, #2
    4dda:	4845      	ldr	r0, [pc, #276]	; (4ef0 <_ext_irq_init+0x148>)
    4ddc:	4b48      	ldr	r3, [pc, #288]	; (4f00 <_ext_irq_init+0x158>)
    4dde:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    4de0:	2101      	movs	r1, #1
    4de2:	4843      	ldr	r0, [pc, #268]	; (4ef0 <_ext_irq_init+0x148>)
    4de4:	4b47      	ldr	r3, [pc, #284]	; (4f04 <_ext_irq_init+0x15c>)
    4de6:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    4de8:	2101      	movs	r1, #1
    4dea:	4841      	ldr	r0, [pc, #260]	; (4ef0 <_ext_irq_init+0x148>)
    4dec:	4b44      	ldr	r3, [pc, #272]	; (4f00 <_ext_irq_init+0x158>)
    4dee:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    4df0:	2100      	movs	r1, #0
    4df2:	483f      	ldr	r0, [pc, #252]	; (4ef0 <_ext_irq_init+0x148>)
    4df4:	4b44      	ldr	r3, [pc, #272]	; (4f08 <_ext_irq_init+0x160>)
    4df6:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    4df8:	2100      	movs	r1, #0
    4dfa:	483d      	ldr	r0, [pc, #244]	; (4ef0 <_ext_irq_init+0x148>)
    4dfc:	4b43      	ldr	r3, [pc, #268]	; (4f0c <_ext_irq_init+0x164>)
    4dfe:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    4e00:	2100      	movs	r1, #0
    4e02:	483b      	ldr	r0, [pc, #236]	; (4ef0 <_ext_irq_init+0x148>)
    4e04:	4b42      	ldr	r3, [pc, #264]	; (4f10 <_ext_irq_init+0x168>)
    4e06:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    4e08:	f240 31bb 	movw	r1, #955	; 0x3bb
    4e0c:	4838      	ldr	r0, [pc, #224]	; (4ef0 <_ext_irq_init+0x148>)
    4e0e:	4b41      	ldr	r3, [pc, #260]	; (4f14 <_ext_irq_init+0x16c>)
    4e10:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    4e12:	f240 313b 	movw	r1, #827	; 0x33b
    4e16:	4836      	ldr	r0, [pc, #216]	; (4ef0 <_ext_irq_init+0x148>)
    4e18:	4b3f      	ldr	r3, [pc, #252]	; (4f18 <_ext_irq_init+0x170>)
    4e1a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    4e1c:	2100      	movs	r1, #0
    4e1e:	4834      	ldr	r0, [pc, #208]	; (4ef0 <_ext_irq_init+0x148>)
    4e20:	4b3e      	ldr	r3, [pc, #248]	; (4f1c <_ext_irq_init+0x174>)
    4e22:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4e24:	4a3e      	ldr	r2, [pc, #248]	; (4f20 <_ext_irq_init+0x178>)
    4e26:	2100      	movs	r1, #0
    4e28:	4831      	ldr	r0, [pc, #196]	; (4ef0 <_ext_irq_init+0x148>)
    4e2a:	4b3e      	ldr	r3, [pc, #248]	; (4f24 <_ext_irq_init+0x17c>)
    4e2c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    4e2e:	2211      	movs	r2, #17
    4e30:	2101      	movs	r1, #1
    4e32:	482f      	ldr	r0, [pc, #188]	; (4ef0 <_ext_irq_init+0x148>)
    4e34:	4b3b      	ldr	r3, [pc, #236]	; (4f24 <_ext_irq_init+0x17c>)
    4e36:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    4e38:	482d      	ldr	r0, [pc, #180]	; (4ef0 <_ext_irq_init+0x148>)
    4e3a:	4b3b      	ldr	r3, [pc, #236]	; (4f28 <_ext_irq_init+0x180>)
    4e3c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    4e3e:	200c      	movs	r0, #12
    4e40:	4b3a      	ldr	r3, [pc, #232]	; (4f2c <_ext_irq_init+0x184>)
    4e42:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    4e44:	200c      	movs	r0, #12
    4e46:	4b3a      	ldr	r3, [pc, #232]	; (4f30 <_ext_irq_init+0x188>)
    4e48:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    4e4a:	200c      	movs	r0, #12
    4e4c:	4b39      	ldr	r3, [pc, #228]	; (4f34 <_ext_irq_init+0x18c>)
    4e4e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    4e50:	200d      	movs	r0, #13
    4e52:	4b36      	ldr	r3, [pc, #216]	; (4f2c <_ext_irq_init+0x184>)
    4e54:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    4e56:	200d      	movs	r0, #13
    4e58:	4b35      	ldr	r3, [pc, #212]	; (4f30 <_ext_irq_init+0x188>)
    4e5a:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    4e5c:	200d      	movs	r0, #13
    4e5e:	4b35      	ldr	r3, [pc, #212]	; (4f34 <_ext_irq_init+0x18c>)
    4e60:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    4e62:	200f      	movs	r0, #15
    4e64:	4b31      	ldr	r3, [pc, #196]	; (4f2c <_ext_irq_init+0x184>)
    4e66:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    4e68:	200f      	movs	r0, #15
    4e6a:	4b31      	ldr	r3, [pc, #196]	; (4f30 <_ext_irq_init+0x188>)
    4e6c:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    4e6e:	200f      	movs	r0, #15
    4e70:	4b30      	ldr	r3, [pc, #192]	; (4f34 <_ext_irq_init+0x18c>)
    4e72:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    4e74:	2010      	movs	r0, #16
    4e76:	4b2d      	ldr	r3, [pc, #180]	; (4f2c <_ext_irq_init+0x184>)
    4e78:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    4e7a:	2010      	movs	r0, #16
    4e7c:	4b2c      	ldr	r3, [pc, #176]	; (4f30 <_ext_irq_init+0x188>)
    4e7e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    4e80:	2010      	movs	r0, #16
    4e82:	4b2c      	ldr	r3, [pc, #176]	; (4f34 <_ext_irq_init+0x18c>)
    4e84:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    4e86:	2011      	movs	r0, #17
    4e88:	4b28      	ldr	r3, [pc, #160]	; (4f2c <_ext_irq_init+0x184>)
    4e8a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    4e8c:	2011      	movs	r0, #17
    4e8e:	4b28      	ldr	r3, [pc, #160]	; (4f30 <_ext_irq_init+0x188>)
    4e90:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    4e92:	2011      	movs	r0, #17
    4e94:	4b27      	ldr	r3, [pc, #156]	; (4f34 <_ext_irq_init+0x18c>)
    4e96:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    4e98:	2012      	movs	r0, #18
    4e9a:	4b24      	ldr	r3, [pc, #144]	; (4f2c <_ext_irq_init+0x184>)
    4e9c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    4e9e:	2012      	movs	r0, #18
    4ea0:	4b23      	ldr	r3, [pc, #140]	; (4f30 <_ext_irq_init+0x188>)
    4ea2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    4ea4:	2012      	movs	r0, #18
    4ea6:	4b23      	ldr	r3, [pc, #140]	; (4f34 <_ext_irq_init+0x18c>)
    4ea8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    4eaa:	2013      	movs	r0, #19
    4eac:	4b1f      	ldr	r3, [pc, #124]	; (4f2c <_ext_irq_init+0x184>)
    4eae:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    4eb0:	2013      	movs	r0, #19
    4eb2:	4b1f      	ldr	r3, [pc, #124]	; (4f30 <_ext_irq_init+0x188>)
    4eb4:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    4eb6:	2013      	movs	r0, #19
    4eb8:	4b1e      	ldr	r3, [pc, #120]	; (4f34 <_ext_irq_init+0x18c>)
    4eba:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    4ebc:	2014      	movs	r0, #20
    4ebe:	4b1b      	ldr	r3, [pc, #108]	; (4f2c <_ext_irq_init+0x184>)
    4ec0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    4ec2:	2014      	movs	r0, #20
    4ec4:	4b1a      	ldr	r3, [pc, #104]	; (4f30 <_ext_irq_init+0x188>)
    4ec6:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    4ec8:	2014      	movs	r0, #20
    4eca:	4b1a      	ldr	r3, [pc, #104]	; (4f34 <_ext_irq_init+0x18c>)
    4ecc:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    4ece:	2015      	movs	r0, #21
    4ed0:	4b16      	ldr	r3, [pc, #88]	; (4f2c <_ext_irq_init+0x184>)
    4ed2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    4ed4:	2015      	movs	r0, #21
    4ed6:	4b16      	ldr	r3, [pc, #88]	; (4f30 <_ext_irq_init+0x188>)
    4ed8:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    4eda:	2015      	movs	r0, #21
    4edc:	4b15      	ldr	r3, [pc, #84]	; (4f34 <_ext_irq_init+0x18c>)
    4ede:	4798      	blx	r3

	callback = cb;
    4ee0:	4a15      	ldr	r2, [pc, #84]	; (4f38 <_ext_irq_init+0x190>)
    4ee2:	687b      	ldr	r3, [r7, #4]
    4ee4:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    4ee6:	2300      	movs	r3, #0
}
    4ee8:	4618      	mov	r0, r3
    4eea:	3708      	adds	r7, #8
    4eec:	46bd      	mov	sp, r7
    4eee:	bd80      	pop	{r7, pc}
    4ef0:	40002800 	.word	0x40002800
    4ef4:	00004b69 	.word	0x00004b69
    4ef8:	00004c99 	.word	0x00004c99
    4efc:	00004c29 	.word	0x00004c29
    4f00:	00004b45 	.word	0x00004b45
    4f04:	00004cc9 	.word	0x00004cc9
    4f08:	00004c55 	.word	0x00004c55
    4f0c:	00004cf1 	.word	0x00004cf1
    4f10:	00004d0f 	.word	0x00004d0f
    4f14:	00004d2b 	.word	0x00004d2b
    4f18:	00004d6f 	.word	0x00004d6f
    4f1c:	00004d8b 	.word	0x00004d8b
    4f20:	90999013 	.word	0x90999013
    4f24:	00004d47 	.word	0x00004d47
    4f28:	00004bfd 	.word	0x00004bfd
    4f2c:	00004ac5 	.word	0x00004ac5
    4f30:	00004b09 	.word	0x00004b09
    4f34:	00004a89 	.word	0x00004a89
    4f38:	2000092c 	.word	0x2000092c

00004f3c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    4f3c:	b580      	push	{r7, lr}
    4f3e:	b084      	sub	sp, #16
    4f40:	af00      	add	r7, sp, #0
    4f42:	6078      	str	r0, [r7, #4]
    4f44:	460b      	mov	r3, r1
    4f46:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    4f48:	23ff      	movs	r3, #255	; 0xff
    4f4a:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    4f4c:	2300      	movs	r3, #0
    4f4e:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    4f50:	e010      	b.n	4f74 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    4f52:	7bbb      	ldrb	r3, [r7, #14]
    4f54:	4a1c      	ldr	r2, [pc, #112]	; (4fc8 <_ext_irq_enable+0x8c>)
    4f56:	00db      	lsls	r3, r3, #3
    4f58:	4413      	add	r3, r2
    4f5a:	685a      	ldr	r2, [r3, #4]
    4f5c:	687b      	ldr	r3, [r7, #4]
    4f5e:	429a      	cmp	r2, r3
    4f60:	d105      	bne.n	4f6e <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    4f62:	7bbb      	ldrb	r3, [r7, #14]
    4f64:	4a18      	ldr	r2, [pc, #96]	; (4fc8 <_ext_irq_enable+0x8c>)
    4f66:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    4f6a:	73fb      	strb	r3, [r7, #15]
			break;
    4f6c:	e005      	b.n	4f7a <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    4f6e:	7bbb      	ldrb	r3, [r7, #14]
    4f70:	3301      	adds	r3, #1
    4f72:	73bb      	strb	r3, [r7, #14]
    4f74:	7bbb      	ldrb	r3, [r7, #14]
    4f76:	2b08      	cmp	r3, #8
    4f78:	d9eb      	bls.n	4f52 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    4f7a:	7bfb      	ldrb	r3, [r7, #15]
    4f7c:	2bff      	cmp	r3, #255	; 0xff
    4f7e:	d102      	bne.n	4f86 <_ext_irq_enable+0x4a>
		return -1;
    4f80:	f04f 33ff 	mov.w	r3, #4294967295
    4f84:	e01c      	b.n	4fc0 <_ext_irq_enable+0x84>
	}

	if (enable) {
    4f86:	78fb      	ldrb	r3, [r7, #3]
    4f88:	2b00      	cmp	r3, #0
    4f8a:	d008      	beq.n	4f9e <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    4f8c:	7bfb      	ldrb	r3, [r7, #15]
    4f8e:	2201      	movs	r2, #1
    4f90:	fa02 f303 	lsl.w	r3, r2, r3
    4f94:	4619      	mov	r1, r3
    4f96:	480d      	ldr	r0, [pc, #52]	; (4fcc <_ext_irq_enable+0x90>)
    4f98:	4b0d      	ldr	r3, [pc, #52]	; (4fd0 <_ext_irq_enable+0x94>)
    4f9a:	4798      	blx	r3
    4f9c:	e00f      	b.n	4fbe <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    4f9e:	7bfb      	ldrb	r3, [r7, #15]
    4fa0:	2201      	movs	r2, #1
    4fa2:	fa02 f303 	lsl.w	r3, r2, r3
    4fa6:	4619      	mov	r1, r3
    4fa8:	4808      	ldr	r0, [pc, #32]	; (4fcc <_ext_irq_enable+0x90>)
    4faa:	4b0a      	ldr	r3, [pc, #40]	; (4fd4 <_ext_irq_enable+0x98>)
    4fac:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    4fae:	7bfb      	ldrb	r3, [r7, #15]
    4fb0:	2201      	movs	r2, #1
    4fb2:	fa02 f303 	lsl.w	r3, r2, r3
    4fb6:	4619      	mov	r1, r3
    4fb8:	4804      	ldr	r0, [pc, #16]	; (4fcc <_ext_irq_enable+0x90>)
    4fba:	4b07      	ldr	r3, [pc, #28]	; (4fd8 <_ext_irq_enable+0x9c>)
    4fbc:	4798      	blx	r3
	}

	return ERR_NONE;
    4fbe:	2300      	movs	r3, #0
}
    4fc0:	4618      	mov	r0, r3
    4fc2:	3710      	adds	r7, #16
    4fc4:	46bd      	mov	sp, r7
    4fc6:	bd80      	pop	{r7, pc}
    4fc8:	0001350c 	.word	0x0001350c
    4fcc:	40002800 	.word	0x40002800
    4fd0:	00004bc5 	.word	0x00004bc5
    4fd4:	00004be1 	.word	0x00004be1
    4fd8:	00004ba9 	.word	0x00004ba9

00004fdc <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    4fdc:	b580      	push	{r7, lr}
    4fde:	b084      	sub	sp, #16
    4fe0:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    4fe2:	4841      	ldr	r0, [pc, #260]	; (50e8 <_ext_irq_handler+0x10c>)
    4fe4:	4b41      	ldr	r3, [pc, #260]	; (50ec <_ext_irq_handler+0x110>)
    4fe6:	4798      	blx	r3
    4fe8:	4603      	mov	r3, r0
    4fea:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    4fec:	f04f 33ff 	mov.w	r3, #4294967295
    4ff0:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    4ff2:	683b      	ldr	r3, [r7, #0]
    4ff4:	4619      	mov	r1, r3
    4ff6:	483c      	ldr	r0, [pc, #240]	; (50e8 <_ext_irq_handler+0x10c>)
    4ff8:	4b3d      	ldr	r3, [pc, #244]	; (50f0 <_ext_irq_handler+0x114>)
    4ffa:	4798      	blx	r3

	ASSERT(callback);
    4ffc:	4b3d      	ldr	r3, [pc, #244]	; (50f4 <_ext_irq_handler+0x118>)
    4ffe:	681b      	ldr	r3, [r3, #0]
    5000:	2b00      	cmp	r3, #0
    5002:	bf14      	ite	ne
    5004:	2301      	movne	r3, #1
    5006:	2300      	moveq	r3, #0
    5008:	b2db      	uxtb	r3, r3
    500a:	f44f 7284 	mov.w	r2, #264	; 0x108
    500e:	493a      	ldr	r1, [pc, #232]	; (50f8 <_ext_irq_handler+0x11c>)
    5010:	4618      	mov	r0, r3
    5012:	4b3a      	ldr	r3, [pc, #232]	; (50fc <_ext_irq_handler+0x120>)
    5014:	4798      	blx	r3

	while (flags) {
    5016:	e060      	b.n	50da <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    5018:	683b      	ldr	r3, [r7, #0]
    501a:	4618      	mov	r0, r3
    501c:	4b38      	ldr	r3, [pc, #224]	; (5100 <_ext_irq_handler+0x124>)
    501e:	4798      	blx	r3
    5020:	4603      	mov	r3, r0
    5022:	b2db      	uxtb	r3, r3
    5024:	3b01      	subs	r3, #1
    5026:	b2db      	uxtb	r3, r3
    5028:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    502a:	e047      	b.n	50bc <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    502c:	2300      	movs	r3, #0
    502e:	71fb      	strb	r3, [r7, #7]
    5030:	2309      	movs	r3, #9
    5032:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    5034:	e024      	b.n	5080 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    5036:	79ba      	ldrb	r2, [r7, #6]
    5038:	79fb      	ldrb	r3, [r7, #7]
    503a:	4413      	add	r3, r2
    503c:	105b      	asrs	r3, r3, #1
    503e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    5040:	797b      	ldrb	r3, [r7, #5]
    5042:	4a30      	ldr	r2, [pc, #192]	; (5104 <_ext_irq_handler+0x128>)
    5044:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5048:	461a      	mov	r2, r3
    504a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    504e:	429a      	cmp	r2, r3
    5050:	d106      	bne.n	5060 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    5052:	797b      	ldrb	r3, [r7, #5]
    5054:	4a2b      	ldr	r2, [pc, #172]	; (5104 <_ext_irq_handler+0x128>)
    5056:	00db      	lsls	r3, r3, #3
    5058:	4413      	add	r3, r2
    505a:	685b      	ldr	r3, [r3, #4]
    505c:	60bb      	str	r3, [r7, #8]
					break;
    505e:	e013      	b.n	5088 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    5060:	797b      	ldrb	r3, [r7, #5]
    5062:	4a28      	ldr	r2, [pc, #160]	; (5104 <_ext_irq_handler+0x128>)
    5064:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5068:	461a      	mov	r2, r3
    506a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    506e:	429a      	cmp	r2, r3
    5070:	da03      	bge.n	507a <_ext_irq_handler+0x9e>
					lower = middle + 1;
    5072:	797b      	ldrb	r3, [r7, #5]
    5074:	3301      	adds	r3, #1
    5076:	71fb      	strb	r3, [r7, #7]
    5078:	e002      	b.n	5080 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    507a:	797b      	ldrb	r3, [r7, #5]
    507c:	3b01      	subs	r3, #1
    507e:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    5080:	79ba      	ldrb	r2, [r7, #6]
    5082:	79fb      	ldrb	r3, [r7, #7]
    5084:	429a      	cmp	r2, r3
    5086:	d2d6      	bcs.n	5036 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    5088:	68bb      	ldr	r3, [r7, #8]
    508a:	f1b3 3fff 	cmp.w	r3, #4294967295
    508e:	d003      	beq.n	5098 <_ext_irq_handler+0xbc>
				callback(pin);
    5090:	4b18      	ldr	r3, [pc, #96]	; (50f4 <_ext_irq_handler+0x118>)
    5092:	681b      	ldr	r3, [r3, #0]
    5094:	68b8      	ldr	r0, [r7, #8]
    5096:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    5098:	f997 300f 	ldrsb.w	r3, [r7, #15]
    509c:	2201      	movs	r2, #1
    509e:	fa02 f303 	lsl.w	r3, r2, r3
    50a2:	43da      	mvns	r2, r3
    50a4:	683b      	ldr	r3, [r7, #0]
    50a6:	4013      	ands	r3, r2
    50a8:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    50aa:	683b      	ldr	r3, [r7, #0]
    50ac:	4618      	mov	r0, r3
    50ae:	4b14      	ldr	r3, [pc, #80]	; (5100 <_ext_irq_handler+0x124>)
    50b0:	4798      	blx	r3
    50b2:	4603      	mov	r3, r0
    50b4:	b2db      	uxtb	r3, r3
    50b6:	3b01      	subs	r3, #1
    50b8:	b2db      	uxtb	r3, r3
    50ba:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    50bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
    50c0:	f1b3 3fff 	cmp.w	r3, #4294967295
    50c4:	d1b2      	bne.n	502c <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    50c6:	4808      	ldr	r0, [pc, #32]	; (50e8 <_ext_irq_handler+0x10c>)
    50c8:	4b08      	ldr	r3, [pc, #32]	; (50ec <_ext_irq_handler+0x110>)
    50ca:	4798      	blx	r3
    50cc:	4603      	mov	r3, r0
    50ce:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    50d0:	683b      	ldr	r3, [r7, #0]
    50d2:	4619      	mov	r1, r3
    50d4:	4804      	ldr	r0, [pc, #16]	; (50e8 <_ext_irq_handler+0x10c>)
    50d6:	4b06      	ldr	r3, [pc, #24]	; (50f0 <_ext_irq_handler+0x114>)
    50d8:	4798      	blx	r3
	while (flags) {
    50da:	683b      	ldr	r3, [r7, #0]
    50dc:	2b00      	cmp	r3, #0
    50de:	d19b      	bne.n	5018 <_ext_irq_handler+0x3c>
	}
}
    50e0:	bf00      	nop
    50e2:	3710      	adds	r7, #16
    50e4:	46bd      	mov	sp, r7
    50e6:	bd80      	pop	{r7, pc}
    50e8:	40002800 	.word	0x40002800
    50ec:	00004b91 	.word	0x00004b91
    50f0:	00004ba9 	.word	0x00004ba9
    50f4:	2000092c 	.word	0x2000092c
    50f8:	00013554 	.word	0x00013554
    50fc:	00003e05 	.word	0x00003e05
    5100:	00012f55 	.word	0x00012f55
    5104:	0001350c 	.word	0x0001350c

00005108 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    5108:	b580      	push	{r7, lr}
    510a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    510c:	4b01      	ldr	r3, [pc, #4]	; (5114 <EIC_0_Handler+0xc>)
    510e:	4798      	blx	r3
} /**
    5110:	bf00      	nop
    5112:	bd80      	pop	{r7, pc}
    5114:	00004fdd 	.word	0x00004fdd

00005118 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    5118:	b580      	push	{r7, lr}
    511a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    511c:	4b01      	ldr	r3, [pc, #4]	; (5124 <EIC_1_Handler+0xc>)
    511e:	4798      	blx	r3
} /**
    5120:	bf00      	nop
    5122:	bd80      	pop	{r7, pc}
    5124:	00004fdd 	.word	0x00004fdd

00005128 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    5128:	b580      	push	{r7, lr}
    512a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    512c:	4b01      	ldr	r3, [pc, #4]	; (5134 <EIC_3_Handler+0xc>)
    512e:	4798      	blx	r3
} /**
    5130:	bf00      	nop
    5132:	bd80      	pop	{r7, pc}
    5134:	00004fdd 	.word	0x00004fdd

00005138 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    5138:	b580      	push	{r7, lr}
    513a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    513c:	4b01      	ldr	r3, [pc, #4]	; (5144 <EIC_4_Handler+0xc>)
    513e:	4798      	blx	r3
} /**
    5140:	bf00      	nop
    5142:	bd80      	pop	{r7, pc}
    5144:	00004fdd 	.word	0x00004fdd

00005148 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    5148:	b580      	push	{r7, lr}
    514a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    514c:	4b01      	ldr	r3, [pc, #4]	; (5154 <EIC_5_Handler+0xc>)
    514e:	4798      	blx	r3
} /**
    5150:	bf00      	nop
    5152:	bd80      	pop	{r7, pc}
    5154:	00004fdd 	.word	0x00004fdd

00005158 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    5158:	b580      	push	{r7, lr}
    515a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    515c:	4b01      	ldr	r3, [pc, #4]	; (5164 <EIC_6_Handler+0xc>)
    515e:	4798      	blx	r3
} /**
    5160:	bf00      	nop
    5162:	bd80      	pop	{r7, pc}
    5164:	00004fdd 	.word	0x00004fdd

00005168 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    5168:	b580      	push	{r7, lr}
    516a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    516c:	4b01      	ldr	r3, [pc, #4]	; (5174 <EIC_7_Handler+0xc>)
    516e:	4798      	blx	r3
} /**
    5170:	bf00      	nop
    5172:	bd80      	pop	{r7, pc}
    5174:	00004fdd 	.word	0x00004fdd

00005178 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    5178:	b580      	push	{r7, lr}
    517a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    517c:	4b01      	ldr	r3, [pc, #4]	; (5184 <EIC_8_Handler+0xc>)
    517e:	4798      	blx	r3
} /**
    5180:	bf00      	nop
    5182:	bd80      	pop	{r7, pc}
    5184:	00004fdd 	.word	0x00004fdd

00005188 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    5188:	b580      	push	{r7, lr}
    518a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    518c:	4b01      	ldr	r3, [pc, #4]	; (5194 <EIC_9_Handler+0xc>)
    518e:	4798      	blx	r3
}
    5190:	bf00      	nop
    5192:	bd80      	pop	{r7, pc}
    5194:	00004fdd 	.word	0x00004fdd

00005198 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    5198:	b480      	push	{r7}
    519a:	b085      	sub	sp, #20
    519c:	af00      	add	r7, sp, #0
    519e:	60f8      	str	r0, [r7, #12]
    51a0:	460b      	mov	r3, r1
    51a2:	607a      	str	r2, [r7, #4]
    51a4:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    51a6:	7afa      	ldrb	r2, [r7, #11]
    51a8:	68fb      	ldr	r3, [r7, #12]
    51aa:	3248      	adds	r2, #72	; 0x48
    51ac:	6879      	ldr	r1, [r7, #4]
    51ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    51b2:	bf00      	nop
    51b4:	3714      	adds	r7, #20
    51b6:	46bd      	mov	sp, r7
    51b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    51bc:	4770      	bx	lr

000051be <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    51be:	b480      	push	{r7}
    51c0:	b083      	sub	sp, #12
    51c2:	af00      	add	r7, sp, #0
    51c4:	6078      	str	r0, [r7, #4]
    51c6:	460b      	mov	r3, r1
    51c8:	70fb      	strb	r3, [r7, #3]
    51ca:	4613      	mov	r3, r2
    51cc:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    51ce:	78fb      	ldrb	r3, [r7, #3]
    51d0:	687a      	ldr	r2, [r7, #4]
    51d2:	3304      	adds	r3, #4
    51d4:	00db      	lsls	r3, r3, #3
    51d6:	4413      	add	r3, r2
    51d8:	78ba      	ldrb	r2, [r7, #2]
    51da:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    51dc:	78fb      	ldrb	r3, [r7, #3]
    51de:	78ba      	ldrb	r2, [r7, #2]
    51e0:	43d2      	mvns	r2, r2
    51e2:	b2d1      	uxtb	r1, r2
    51e4:	687a      	ldr	r2, [r7, #4]
    51e6:	3304      	adds	r3, #4
    51e8:	00db      	lsls	r3, r3, #3
    51ea:	4413      	add	r3, r2
    51ec:	460a      	mov	r2, r1
    51ee:	711a      	strb	r2, [r3, #4]
}
    51f0:	bf00      	nop
    51f2:	370c      	adds	r7, #12
    51f4:	46bd      	mov	sp, r7
    51f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    51fa:	4770      	bx	lr

000051fc <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    51fc:	b480      	push	{r7}
    51fe:	b085      	sub	sp, #20
    5200:	af00      	add	r7, sp, #0
    5202:	60f8      	str	r0, [r7, #12]
    5204:	460b      	mov	r3, r1
    5206:	607a      	str	r2, [r7, #4]
    5208:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    520a:	7afa      	ldrb	r2, [r7, #11]
    520c:	68fb      	ldr	r3, [r7, #12]
    520e:	3204      	adds	r2, #4
    5210:	6879      	ldr	r1, [r7, #4]
    5212:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    5216:	bf00      	nop
    5218:	3714      	adds	r7, #20
    521a:	46bd      	mov	sp, r7
    521c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5220:	4770      	bx	lr
	...

00005224 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    5224:	b580      	push	{r7, lr}
    5226:	b082      	sub	sp, #8
    5228:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    522a:	2300      	movs	r3, #0
    522c:	71fb      	strb	r3, [r7, #7]
    522e:	e00b      	b.n	5248 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5230:	79fb      	ldrb	r3, [r7, #7]
    5232:	4a18      	ldr	r2, [pc, #96]	; (5294 <_event_system_init+0x70>)
    5234:	5cd3      	ldrb	r3, [r2, r3]
    5236:	461a      	mov	r2, r3
    5238:	79fb      	ldrb	r3, [r7, #7]
    523a:	4619      	mov	r1, r3
    523c:	4816      	ldr	r0, [pc, #88]	; (5298 <_event_system_init+0x74>)
    523e:	4b17      	ldr	r3, [pc, #92]	; (529c <_event_system_init+0x78>)
    5240:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    5242:	79fb      	ldrb	r3, [r7, #7]
    5244:	3301      	adds	r3, #1
    5246:	71fb      	strb	r3, [r7, #7]
    5248:	79fb      	ldrb	r3, [r7, #7]
    524a:	2b42      	cmp	r3, #66	; 0x42
    524c:	d9f0      	bls.n	5230 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    524e:	2300      	movs	r3, #0
    5250:	71fb      	strb	r3, [r7, #7]
    5252:	e016      	b.n	5282 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    5254:	79fb      	ldrb	r3, [r7, #7]
    5256:	4a12      	ldr	r2, [pc, #72]	; (52a0 <_event_system_init+0x7c>)
    5258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    525c:	461a      	mov	r2, r3
    525e:	79fb      	ldrb	r3, [r7, #7]
    5260:	4619      	mov	r1, r3
    5262:	480d      	ldr	r0, [pc, #52]	; (5298 <_event_system_init+0x74>)
    5264:	4b0f      	ldr	r3, [pc, #60]	; (52a4 <_event_system_init+0x80>)
    5266:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    5268:	79fb      	ldrb	r3, [r7, #7]
    526a:	4a0f      	ldr	r2, [pc, #60]	; (52a8 <_event_system_init+0x84>)
    526c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5270:	b2da      	uxtb	r2, r3
    5272:	79fb      	ldrb	r3, [r7, #7]
    5274:	4619      	mov	r1, r3
    5276:	4808      	ldr	r0, [pc, #32]	; (5298 <_event_system_init+0x74>)
    5278:	4b0c      	ldr	r3, [pc, #48]	; (52ac <_event_system_init+0x88>)
    527a:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    527c:	79fb      	ldrb	r3, [r7, #7]
    527e:	3301      	adds	r3, #1
    5280:	71fb      	strb	r3, [r7, #7]
    5282:	79fb      	ldrb	r3, [r7, #7]
    5284:	2b1f      	cmp	r3, #31
    5286:	d9e5      	bls.n	5254 <_event_system_init+0x30>
	}

	return ERR_NONE;
    5288:	2300      	movs	r3, #0
}
    528a:	4618      	mov	r0, r3
    528c:	3708      	adds	r7, #8
    528e:	46bd      	mov	sp, r7
    5290:	bd80      	pop	{r7, pc}
    5292:	bf00      	nop
    5294:	0001356c 	.word	0x0001356c
    5298:	4100e000 	.word	0x4100e000
    529c:	00005199 	.word	0x00005199
    52a0:	000135b0 	.word	0x000135b0
    52a4:	000051fd 	.word	0x000051fd
    52a8:	000135f0 	.word	0x000135f0
    52ac:	000051bf 	.word	0x000051bf

000052b0 <hri_gclk_wait_for_sync>:
{
    52b0:	b480      	push	{r7}
    52b2:	b083      	sub	sp, #12
    52b4:	af00      	add	r7, sp, #0
    52b6:	6078      	str	r0, [r7, #4]
    52b8:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    52ba:	bf00      	nop
    52bc:	687b      	ldr	r3, [r7, #4]
    52be:	685a      	ldr	r2, [r3, #4]
    52c0:	683b      	ldr	r3, [r7, #0]
    52c2:	4013      	ands	r3, r2
    52c4:	2b00      	cmp	r3, #0
    52c6:	d1f9      	bne.n	52bc <hri_gclk_wait_for_sync+0xc>
}
    52c8:	bf00      	nop
    52ca:	370c      	adds	r7, #12
    52cc:	46bd      	mov	sp, r7
    52ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    52d2:	4770      	bx	lr

000052d4 <hri_gclk_write_GENCTRL_reg>:
{
    52d4:	b580      	push	{r7, lr}
    52d6:	b084      	sub	sp, #16
    52d8:	af00      	add	r7, sp, #0
    52da:	60f8      	str	r0, [r7, #12]
    52dc:	460b      	mov	r3, r1
    52de:	607a      	str	r2, [r7, #4]
    52e0:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    52e2:	7afa      	ldrb	r2, [r7, #11]
    52e4:	68fb      	ldr	r3, [r7, #12]
    52e6:	3208      	adds	r2, #8
    52e8:	6879      	ldr	r1, [r7, #4]
    52ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    52ee:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    52f2:	68f8      	ldr	r0, [r7, #12]
    52f4:	4b02      	ldr	r3, [pc, #8]	; (5300 <hri_gclk_write_GENCTRL_reg+0x2c>)
    52f6:	4798      	blx	r3
}
    52f8:	bf00      	nop
    52fa:	3710      	adds	r7, #16
    52fc:	46bd      	mov	sp, r7
    52fe:	bd80      	pop	{r7, pc}
    5300:	000052b1 	.word	0x000052b1

00005304 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    5304:	b580      	push	{r7, lr}
    5306:	b082      	sub	sp, #8
    5308:	af00      	add	r7, sp, #0
    530a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    530c:	687b      	ldr	r3, [r7, #4]
    530e:	f003 0301 	and.w	r3, r3, #1
    5312:	2b00      	cmp	r3, #0
    5314:	d004      	beq.n	5320 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    5316:	4a36      	ldr	r2, [pc, #216]	; (53f0 <_gclk_init_generators_by_fref+0xec>)
    5318:	2100      	movs	r1, #0
    531a:	4836      	ldr	r0, [pc, #216]	; (53f4 <_gclk_init_generators_by_fref+0xf0>)
    531c:	4b36      	ldr	r3, [pc, #216]	; (53f8 <_gclk_init_generators_by_fref+0xf4>)
    531e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    5320:	687b      	ldr	r3, [r7, #4]
    5322:	f003 0302 	and.w	r3, r3, #2
    5326:	2b00      	cmp	r3, #0
    5328:	d004      	beq.n	5334 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    532a:	4a34      	ldr	r2, [pc, #208]	; (53fc <_gclk_init_generators_by_fref+0xf8>)
    532c:	2101      	movs	r1, #1
    532e:	4831      	ldr	r0, [pc, #196]	; (53f4 <_gclk_init_generators_by_fref+0xf0>)
    5330:	4b31      	ldr	r3, [pc, #196]	; (53f8 <_gclk_init_generators_by_fref+0xf4>)
    5332:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    5334:	687b      	ldr	r3, [r7, #4]
    5336:	f003 0304 	and.w	r3, r3, #4
    533a:	2b00      	cmp	r3, #0
    533c:	d004      	beq.n	5348 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    533e:	4a30      	ldr	r2, [pc, #192]	; (5400 <_gclk_init_generators_by_fref+0xfc>)
    5340:	2102      	movs	r1, #2
    5342:	482c      	ldr	r0, [pc, #176]	; (53f4 <_gclk_init_generators_by_fref+0xf0>)
    5344:	4b2c      	ldr	r3, [pc, #176]	; (53f8 <_gclk_init_generators_by_fref+0xf4>)
    5346:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5348:	687b      	ldr	r3, [r7, #4]
    534a:	f003 0308 	and.w	r3, r3, #8
    534e:	2b00      	cmp	r3, #0
    5350:	d004      	beq.n	535c <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    5352:	4a2c      	ldr	r2, [pc, #176]	; (5404 <_gclk_init_generators_by_fref+0x100>)
    5354:	2103      	movs	r1, #3
    5356:	4827      	ldr	r0, [pc, #156]	; (53f4 <_gclk_init_generators_by_fref+0xf0>)
    5358:	4b27      	ldr	r3, [pc, #156]	; (53f8 <_gclk_init_generators_by_fref+0xf4>)
    535a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    535c:	687b      	ldr	r3, [r7, #4]
    535e:	f003 0310 	and.w	r3, r3, #16
    5362:	2b00      	cmp	r3, #0
    5364:	d004      	beq.n	5370 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    5366:	4a28      	ldr	r2, [pc, #160]	; (5408 <_gclk_init_generators_by_fref+0x104>)
    5368:	2104      	movs	r1, #4
    536a:	4822      	ldr	r0, [pc, #136]	; (53f4 <_gclk_init_generators_by_fref+0xf0>)
    536c:	4b22      	ldr	r3, [pc, #136]	; (53f8 <_gclk_init_generators_by_fref+0xf4>)
    536e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    5370:	687b      	ldr	r3, [r7, #4]
    5372:	f003 0320 	and.w	r3, r3, #32
    5376:	2b00      	cmp	r3, #0
    5378:	d004      	beq.n	5384 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    537a:	4a24      	ldr	r2, [pc, #144]	; (540c <_gclk_init_generators_by_fref+0x108>)
    537c:	2105      	movs	r1, #5
    537e:	481d      	ldr	r0, [pc, #116]	; (53f4 <_gclk_init_generators_by_fref+0xf0>)
    5380:	4b1d      	ldr	r3, [pc, #116]	; (53f8 <_gclk_init_generators_by_fref+0xf4>)
    5382:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    5384:	687b      	ldr	r3, [r7, #4]
    5386:	f003 0340 	and.w	r3, r3, #64	; 0x40
    538a:	2b00      	cmp	r3, #0
    538c:	d004      	beq.n	5398 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    538e:	4a20      	ldr	r2, [pc, #128]	; (5410 <_gclk_init_generators_by_fref+0x10c>)
    5390:	2106      	movs	r1, #6
    5392:	4818      	ldr	r0, [pc, #96]	; (53f4 <_gclk_init_generators_by_fref+0xf0>)
    5394:	4b18      	ldr	r3, [pc, #96]	; (53f8 <_gclk_init_generators_by_fref+0xf4>)
    5396:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    5398:	687b      	ldr	r3, [r7, #4]
    539a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    539e:	2b00      	cmp	r3, #0
    53a0:	d004      	beq.n	53ac <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    53a2:	4a1c      	ldr	r2, [pc, #112]	; (5414 <_gclk_init_generators_by_fref+0x110>)
    53a4:	2107      	movs	r1, #7
    53a6:	4813      	ldr	r0, [pc, #76]	; (53f4 <_gclk_init_generators_by_fref+0xf0>)
    53a8:	4b13      	ldr	r3, [pc, #76]	; (53f8 <_gclk_init_generators_by_fref+0xf4>)
    53aa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    53ac:	687b      	ldr	r3, [r7, #4]
    53ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
    53b2:	2b00      	cmp	r3, #0
    53b4:	d004      	beq.n	53c0 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    53b6:	4a18      	ldr	r2, [pc, #96]	; (5418 <_gclk_init_generators_by_fref+0x114>)
    53b8:	2108      	movs	r1, #8
    53ba:	480e      	ldr	r0, [pc, #56]	; (53f4 <_gclk_init_generators_by_fref+0xf0>)
    53bc:	4b0e      	ldr	r3, [pc, #56]	; (53f8 <_gclk_init_generators_by_fref+0xf4>)
    53be:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    53c0:	687b      	ldr	r3, [r7, #4]
    53c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    53c6:	2b00      	cmp	r3, #0
    53c8:	d004      	beq.n	53d4 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    53ca:	4a14      	ldr	r2, [pc, #80]	; (541c <_gclk_init_generators_by_fref+0x118>)
    53cc:	210a      	movs	r1, #10
    53ce:	4809      	ldr	r0, [pc, #36]	; (53f4 <_gclk_init_generators_by_fref+0xf0>)
    53d0:	4b09      	ldr	r3, [pc, #36]	; (53f8 <_gclk_init_generators_by_fref+0xf4>)
    53d2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    53d4:	687b      	ldr	r3, [r7, #4]
    53d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    53da:	2b00      	cmp	r3, #0
    53dc:	d004      	beq.n	53e8 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    53de:	4a10      	ldr	r2, [pc, #64]	; (5420 <_gclk_init_generators_by_fref+0x11c>)
    53e0:	210b      	movs	r1, #11
    53e2:	4804      	ldr	r0, [pc, #16]	; (53f4 <_gclk_init_generators_by_fref+0xf0>)
    53e4:	4b04      	ldr	r3, [pc, #16]	; (53f8 <_gclk_init_generators_by_fref+0xf4>)
    53e6:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    53e8:	bf00      	nop
    53ea:	3708      	adds	r7, #8
    53ec:	46bd      	mov	sp, r7
    53ee:	bd80      	pop	{r7, pc}
    53f0:	00010107 	.word	0x00010107
    53f4:	40001c00 	.word	0x40001c00
    53f8:	000052d5 	.word	0x000052d5
    53fc:	00010907 	.word	0x00010907
    5400:	00010906 	.word	0x00010906
    5404:	00020908 	.word	0x00020908
    5408:	00010901 	.word	0x00010901
    540c:	00062901 	.word	0x00062901
    5410:	000c2901 	.word	0x000c2901
    5414:	00082908 	.word	0x00082908
    5418:	00032901 	.word	0x00032901
    541c:	00010905 	.word	0x00010905
    5420:	00041905 	.word	0x00041905

00005424 <hri_mclk_write_CPUDIV_reg>:
{
    5424:	b480      	push	{r7}
    5426:	b083      	sub	sp, #12
    5428:	af00      	add	r7, sp, #0
    542a:	6078      	str	r0, [r7, #4]
    542c:	460b      	mov	r3, r1
    542e:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    5430:	687b      	ldr	r3, [r7, #4]
    5432:	78fa      	ldrb	r2, [r7, #3]
    5434:	715a      	strb	r2, [r3, #5]
}
    5436:	bf00      	nop
    5438:	370c      	adds	r7, #12
    543a:	46bd      	mov	sp, r7
    543c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5440:	4770      	bx	lr
	...

00005444 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    5444:	b580      	push	{r7, lr}
    5446:	b082      	sub	sp, #8
    5448:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    544a:	4b05      	ldr	r3, [pc, #20]	; (5460 <_mclk_init+0x1c>)
    544c:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    544e:	2101      	movs	r1, #1
    5450:	6878      	ldr	r0, [r7, #4]
    5452:	4b04      	ldr	r3, [pc, #16]	; (5464 <_mclk_init+0x20>)
    5454:	4798      	blx	r3
}
    5456:	bf00      	nop
    5458:	3708      	adds	r7, #8
    545a:	46bd      	mov	sp, r7
    545c:	bd80      	pop	{r7, pc}
    545e:	bf00      	nop
    5460:	40000800 	.word	0x40000800
    5464:	00005425 	.word	0x00005425

00005468 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    5468:	b480      	push	{r7}
    546a:	b083      	sub	sp, #12
    546c:	af00      	add	r7, sp, #0
    546e:	6078      	str	r0, [r7, #4]
    5470:	460b      	mov	r3, r1
    5472:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    5474:	687b      	ldr	r3, [r7, #4]
    5476:	78fa      	ldrb	r2, [r7, #3]
    5478:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    547a:	bf00      	nop
    547c:	370c      	adds	r7, #12
    547e:	46bd      	mov	sp, r7
    5480:	f85d 7b04 	ldr.w	r7, [sp], #4
    5484:	4770      	bx	lr

00005486 <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    5486:	b480      	push	{r7}
    5488:	b083      	sub	sp, #12
    548a:	af00      	add	r7, sp, #0
    548c:	6078      	str	r0, [r7, #4]
    548e:	460b      	mov	r3, r1
    5490:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    5492:	687b      	ldr	r3, [r7, #4]
    5494:	887a      	ldrh	r2, [r7, #2]
    5496:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5498:	bf00      	nop
    549a:	370c      	adds	r7, #12
    549c:	46bd      	mov	sp, r7
    549e:	f85d 7b04 	ldr.w	r7, [sp], #4
    54a2:	4770      	bx	lr

000054a4 <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    54a4:	b480      	push	{r7}
    54a6:	b083      	sub	sp, #12
    54a8:	af00      	add	r7, sp, #0
    54aa:	6078      	str	r0, [r7, #4]
    54ac:	460b      	mov	r3, r1
    54ae:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    54b0:	687b      	ldr	r3, [r7, #4]
    54b2:	78fa      	ldrb	r2, [r7, #3]
    54b4:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    54b6:	bf00      	nop
    54b8:	370c      	adds	r7, #12
    54ba:	46bd      	mov	sp, r7
    54bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    54c0:	4770      	bx	lr

000054c2 <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    54c2:	b480      	push	{r7}
    54c4:	b083      	sub	sp, #12
    54c6:	af00      	add	r7, sp, #0
    54c8:	6078      	str	r0, [r7, #4]
    54ca:	460b      	mov	r3, r1
    54cc:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    54ce:	687b      	ldr	r3, [r7, #4]
    54d0:	78fa      	ldrb	r2, [r7, #3]
    54d2:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    54d4:	bf00      	nop
    54d6:	370c      	adds	r7, #12
    54d8:	46bd      	mov	sp, r7
    54da:	f85d 7b04 	ldr.w	r7, [sp], #4
    54de:	4770      	bx	lr

000054e0 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    54e0:	b480      	push	{r7}
    54e2:	b085      	sub	sp, #20
    54e4:	af00      	add	r7, sp, #0
    54e6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    54e8:	687b      	ldr	r3, [r7, #4]
    54ea:	69db      	ldr	r3, [r3, #28]
    54ec:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    54ee:	68fb      	ldr	r3, [r7, #12]
    54f0:	0a1b      	lsrs	r3, r3, #8
    54f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    54f6:	60fb      	str	r3, [r7, #12]
	return tmp;
    54f8:	68fb      	ldr	r3, [r7, #12]
}
    54fa:	4618      	mov	r0, r3
    54fc:	3714      	adds	r7, #20
    54fe:	46bd      	mov	sp, r7
    5500:	f85d 7b04 	ldr.w	r7, [sp], #4
    5504:	4770      	bx	lr

00005506 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    5506:	b480      	push	{r7}
    5508:	b083      	sub	sp, #12
    550a:	af00      	add	r7, sp, #0
    550c:	6078      	str	r0, [r7, #4]
    550e:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    5510:	687b      	ldr	r3, [r7, #4]
    5512:	683a      	ldr	r2, [r7, #0]
    5514:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5516:	bf00      	nop
    5518:	370c      	adds	r7, #12
    551a:	46bd      	mov	sp, r7
    551c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5520:	4770      	bx	lr
	...

00005524 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    5524:	b580      	push	{r7, lr}
    5526:	b082      	sub	sp, #8
    5528:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    552a:	4b13      	ldr	r3, [pc, #76]	; (5578 <_osc32kctrl_init_sources+0x54>)
    552c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    552e:	2300      	movs	r3, #0
    5530:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    5532:	f242 018e 	movw	r1, #8334	; 0x208e
    5536:	6878      	ldr	r0, [r7, #4]
    5538:	4b10      	ldr	r3, [pc, #64]	; (557c <_osc32kctrl_init_sources+0x58>)
    553a:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    553c:	2100      	movs	r1, #0
    553e:	6878      	ldr	r0, [r7, #4]
    5540:	4b0f      	ldr	r3, [pc, #60]	; (5580 <_osc32kctrl_init_sources+0x5c>)
    5542:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    5544:	2100      	movs	r1, #0
    5546:	6878      	ldr	r0, [r7, #4]
    5548:	4b0e      	ldr	r3, [pc, #56]	; (5584 <_osc32kctrl_init_sources+0x60>)
    554a:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    554c:	6878      	ldr	r0, [r7, #4]
    554e:	4b0e      	ldr	r3, [pc, #56]	; (5588 <_osc32kctrl_init_sources+0x64>)
    5550:	4798      	blx	r3
    5552:	4603      	mov	r3, r0
    5554:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    5556:	887b      	ldrh	r3, [r7, #2]
    5558:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    555a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    555e:	4619      	mov	r1, r3
    5560:	6878      	ldr	r0, [r7, #4]
    5562:	4b0a      	ldr	r3, [pc, #40]	; (558c <_osc32kctrl_init_sources+0x68>)
    5564:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    5566:	2100      	movs	r1, #0
    5568:	6878      	ldr	r0, [r7, #4]
    556a:	4b09      	ldr	r3, [pc, #36]	; (5590 <_osc32kctrl_init_sources+0x6c>)
    556c:	4798      	blx	r3
	(void)calib;
}
    556e:	bf00      	nop
    5570:	3708      	adds	r7, #8
    5572:	46bd      	mov	sp, r7
    5574:	bd80      	pop	{r7, pc}
    5576:	bf00      	nop
    5578:	40001400 	.word	0x40001400
    557c:	00005487 	.word	0x00005487
    5580:	000054a5 	.word	0x000054a5
    5584:	000054c3 	.word	0x000054c3
    5588:	000054e1 	.word	0x000054e1
    558c:	00005507 	.word	0x00005507
    5590:	00005469 	.word	0x00005469

00005594 <hri_gclk_wait_for_sync>:
{
    5594:	b480      	push	{r7}
    5596:	b083      	sub	sp, #12
    5598:	af00      	add	r7, sp, #0
    559a:	6078      	str	r0, [r7, #4]
    559c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    559e:	bf00      	nop
    55a0:	687b      	ldr	r3, [r7, #4]
    55a2:	685a      	ldr	r2, [r3, #4]
    55a4:	683b      	ldr	r3, [r7, #0]
    55a6:	4013      	ands	r3, r2
    55a8:	2b00      	cmp	r3, #0
    55aa:	d1f9      	bne.n	55a0 <hri_gclk_wait_for_sync+0xc>
}
    55ac:	bf00      	nop
    55ae:	370c      	adds	r7, #12
    55b0:	46bd      	mov	sp, r7
    55b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    55b6:	4770      	bx	lr

000055b8 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    55b8:	b480      	push	{r7}
    55ba:	b083      	sub	sp, #12
    55bc:	af00      	add	r7, sp, #0
    55be:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    55c0:	687b      	ldr	r3, [r7, #4]
    55c2:	685b      	ldr	r3, [r3, #4]
    55c4:	089b      	lsrs	r3, r3, #2
    55c6:	f003 0301 	and.w	r3, r3, #1
    55ca:	2b00      	cmp	r3, #0
    55cc:	bf14      	ite	ne
    55ce:	2301      	movne	r3, #1
    55d0:	2300      	moveq	r3, #0
    55d2:	b2db      	uxtb	r3, r3
}
    55d4:	4618      	mov	r0, r3
    55d6:	370c      	adds	r7, #12
    55d8:	46bd      	mov	sp, r7
    55da:	f85d 7b04 	ldr.w	r7, [sp], #4
    55de:	4770      	bx	lr

000055e0 <hri_gclk_read_SYNCBUSY_reg>:
{
    55e0:	b480      	push	{r7}
    55e2:	b083      	sub	sp, #12
    55e4:	af00      	add	r7, sp, #0
    55e6:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    55e8:	687b      	ldr	r3, [r7, #4]
    55ea:	685b      	ldr	r3, [r3, #4]
}
    55ec:	4618      	mov	r0, r3
    55ee:	370c      	adds	r7, #12
    55f0:	46bd      	mov	sp, r7
    55f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    55f6:	4770      	bx	lr

000055f8 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    55f8:	b580      	push	{r7, lr}
    55fa:	b086      	sub	sp, #24
    55fc:	af00      	add	r7, sp, #0
    55fe:	60f8      	str	r0, [r7, #12]
    5600:	460b      	mov	r3, r1
    5602:	607a      	str	r2, [r7, #4]
    5604:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    5606:	7afa      	ldrb	r2, [r7, #11]
    5608:	68fb      	ldr	r3, [r7, #12]
    560a:	3208      	adds	r2, #8
    560c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5610:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    5612:	697b      	ldr	r3, [r7, #20]
    5614:	f023 030f 	bic.w	r3, r3, #15
    5618:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    561a:	687b      	ldr	r3, [r7, #4]
    561c:	f003 030f 	and.w	r3, r3, #15
    5620:	697a      	ldr	r2, [r7, #20]
    5622:	4313      	orrs	r3, r2
    5624:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    5626:	7afa      	ldrb	r2, [r7, #11]
    5628:	68fb      	ldr	r3, [r7, #12]
    562a:	3208      	adds	r2, #8
    562c:	6979      	ldr	r1, [r7, #20]
    562e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    5632:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    5636:	68f8      	ldr	r0, [r7, #12]
    5638:	4b02      	ldr	r3, [pc, #8]	; (5644 <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    563a:	4798      	blx	r3
}
    563c:	bf00      	nop
    563e:	3718      	adds	r7, #24
    5640:	46bd      	mov	sp, r7
    5642:	bd80      	pop	{r7, pc}
    5644:	00005595 	.word	0x00005595

00005648 <hri_gclk_write_PCHCTRL_reg>:
{
    5648:	b480      	push	{r7}
    564a:	b085      	sub	sp, #20
    564c:	af00      	add	r7, sp, #0
    564e:	60f8      	str	r0, [r7, #12]
    5650:	460b      	mov	r3, r1
    5652:	607a      	str	r2, [r7, #4]
    5654:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    5656:	7afa      	ldrb	r2, [r7, #11]
    5658:	68fb      	ldr	r3, [r7, #12]
    565a:	3220      	adds	r2, #32
    565c:	6879      	ldr	r1, [r7, #4]
    565e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5662:	bf00      	nop
    5664:	3714      	adds	r7, #20
    5666:	46bd      	mov	sp, r7
    5668:	f85d 7b04 	ldr.w	r7, [sp], #4
    566c:	4770      	bx	lr

0000566e <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    566e:	b480      	push	{r7}
    5670:	b085      	sub	sp, #20
    5672:	af00      	add	r7, sp, #0
    5674:	60f8      	str	r0, [r7, #12]
    5676:	460b      	mov	r3, r1
    5678:	607a      	str	r2, [r7, #4]
    567a:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    567c:	bf00      	nop
    567e:	7afa      	ldrb	r2, [r7, #11]
    5680:	68f9      	ldr	r1, [r7, #12]
    5682:	4613      	mov	r3, r2
    5684:	009b      	lsls	r3, r3, #2
    5686:	4413      	add	r3, r2
    5688:	009b      	lsls	r3, r3, #2
    568a:	440b      	add	r3, r1
    568c:	333c      	adds	r3, #60	; 0x3c
    568e:	681a      	ldr	r2, [r3, #0]
    5690:	687b      	ldr	r3, [r7, #4]
    5692:	4013      	ands	r3, r2
    5694:	2b00      	cmp	r3, #0
    5696:	d1f2      	bne.n	567e <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5698:	bf00      	nop
    569a:	3714      	adds	r7, #20
    569c:	46bd      	mov	sp, r7
    569e:	f85d 7b04 	ldr.w	r7, [sp], #4
    56a2:	4770      	bx	lr

000056a4 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    56a4:	b480      	push	{r7}
    56a6:	b083      	sub	sp, #12
    56a8:	af00      	add	r7, sp, #0
    56aa:	6078      	str	r0, [r7, #4]
    56ac:	460b      	mov	r3, r1
    56ae:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    56b0:	78fa      	ldrb	r2, [r7, #3]
    56b2:	6879      	ldr	r1, [r7, #4]
    56b4:	4613      	mov	r3, r2
    56b6:	009b      	lsls	r3, r3, #2
    56b8:	4413      	add	r3, r2
    56ba:	009b      	lsls	r3, r3, #2
    56bc:	440b      	add	r3, r1
    56be:	3340      	adds	r3, #64	; 0x40
    56c0:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    56c2:	f003 0301 	and.w	r3, r3, #1
    56c6:	2b00      	cmp	r3, #0
    56c8:	bf14      	ite	ne
    56ca:	2301      	movne	r3, #1
    56cc:	2300      	moveq	r3, #0
    56ce:	b2db      	uxtb	r3, r3
}
    56d0:	4618      	mov	r0, r3
    56d2:	370c      	adds	r7, #12
    56d4:	46bd      	mov	sp, r7
    56d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    56da:	4770      	bx	lr

000056dc <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    56dc:	b480      	push	{r7}
    56de:	b083      	sub	sp, #12
    56e0:	af00      	add	r7, sp, #0
    56e2:	6078      	str	r0, [r7, #4]
    56e4:	460b      	mov	r3, r1
    56e6:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    56e8:	78fa      	ldrb	r2, [r7, #3]
    56ea:	6879      	ldr	r1, [r7, #4]
    56ec:	4613      	mov	r3, r2
    56ee:	009b      	lsls	r3, r3, #2
    56f0:	4413      	add	r3, r2
    56f2:	009b      	lsls	r3, r3, #2
    56f4:	440b      	add	r3, r1
    56f6:	3340      	adds	r3, #64	; 0x40
    56f8:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    56fa:	085b      	lsrs	r3, r3, #1
    56fc:	f003 0301 	and.w	r3, r3, #1
    5700:	2b00      	cmp	r3, #0
    5702:	bf14      	ite	ne
    5704:	2301      	movne	r3, #1
    5706:	2300      	moveq	r3, #0
    5708:	b2db      	uxtb	r3, r3
}
    570a:	4618      	mov	r0, r3
    570c:	370c      	adds	r7, #12
    570e:	46bd      	mov	sp, r7
    5710:	f85d 7b04 	ldr.w	r7, [sp], #4
    5714:	4770      	bx	lr
	...

00005718 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5718:	b580      	push	{r7, lr}
    571a:	b082      	sub	sp, #8
    571c:	af00      	add	r7, sp, #0
    571e:	6078      	str	r0, [r7, #4]
    5720:	460b      	mov	r3, r1
    5722:	70fb      	strb	r3, [r7, #3]
    5724:	4613      	mov	r3, r2
    5726:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5728:	78fa      	ldrb	r2, [r7, #3]
    572a:	6879      	ldr	r1, [r7, #4]
    572c:	4613      	mov	r3, r2
    572e:	009b      	lsls	r3, r3, #2
    5730:	4413      	add	r3, r2
    5732:	009b      	lsls	r3, r3, #2
    5734:	440b      	add	r3, r1
    5736:	3330      	adds	r3, #48	; 0x30
    5738:	78ba      	ldrb	r2, [r7, #2]
    573a:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    573c:	78fb      	ldrb	r3, [r7, #3]
    573e:	2202      	movs	r2, #2
    5740:	4619      	mov	r1, r3
    5742:	6878      	ldr	r0, [r7, #4]
    5744:	4b02      	ldr	r3, [pc, #8]	; (5750 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    5746:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5748:	bf00      	nop
    574a:	3708      	adds	r7, #8
    574c:	46bd      	mov	sp, r7
    574e:	bd80      	pop	{r7, pc}
    5750:	0000566f 	.word	0x0000566f

00005754 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    5754:	b580      	push	{r7, lr}
    5756:	b084      	sub	sp, #16
    5758:	af00      	add	r7, sp, #0
    575a:	60f8      	str	r0, [r7, #12]
    575c:	460b      	mov	r3, r1
    575e:	607a      	str	r2, [r7, #4]
    5760:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    5762:	7afa      	ldrb	r2, [r7, #11]
    5764:	68f9      	ldr	r1, [r7, #12]
    5766:	4613      	mov	r3, r2
    5768:	009b      	lsls	r3, r3, #2
    576a:	4413      	add	r3, r2
    576c:	009b      	lsls	r3, r3, #2
    576e:	440b      	add	r3, r1
    5770:	3334      	adds	r3, #52	; 0x34
    5772:	687a      	ldr	r2, [r7, #4]
    5774:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    5776:	7afb      	ldrb	r3, [r7, #11]
    5778:	2206      	movs	r2, #6
    577a:	4619      	mov	r1, r3
    577c:	68f8      	ldr	r0, [r7, #12]
    577e:	4b03      	ldr	r3, [pc, #12]	; (578c <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    5780:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5782:	bf00      	nop
    5784:	3710      	adds	r7, #16
    5786:	46bd      	mov	sp, r7
    5788:	bd80      	pop	{r7, pc}
    578a:	bf00      	nop
    578c:	0000566f 	.word	0x0000566f

00005790 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    5790:	b480      	push	{r7}
    5792:	b085      	sub	sp, #20
    5794:	af00      	add	r7, sp, #0
    5796:	60f8      	str	r0, [r7, #12]
    5798:	460b      	mov	r3, r1
    579a:	607a      	str	r2, [r7, #4]
    579c:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    579e:	7afa      	ldrb	r2, [r7, #11]
    57a0:	68f9      	ldr	r1, [r7, #12]
    57a2:	4613      	mov	r3, r2
    57a4:	009b      	lsls	r3, r3, #2
    57a6:	4413      	add	r3, r2
    57a8:	009b      	lsls	r3, r3, #2
    57aa:	440b      	add	r3, r1
    57ac:	3338      	adds	r3, #56	; 0x38
    57ae:	687a      	ldr	r2, [r7, #4]
    57b0:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    57b2:	bf00      	nop
    57b4:	3714      	adds	r7, #20
    57b6:	46bd      	mov	sp, r7
    57b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    57bc:	4770      	bx	lr

000057be <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    57be:	b480      	push	{r7}
    57c0:	b083      	sub	sp, #12
    57c2:	af00      	add	r7, sp, #0
    57c4:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    57c6:	687b      	ldr	r3, [r7, #4]
    57c8:	691b      	ldr	r3, [r3, #16]
    57ca:	085b      	lsrs	r3, r3, #1
    57cc:	f003 0301 	and.w	r3, r3, #1
    57d0:	2b00      	cmp	r3, #0
    57d2:	bf14      	ite	ne
    57d4:	2301      	movne	r3, #1
    57d6:	2300      	moveq	r3, #0
    57d8:	b2db      	uxtb	r3, r3
}
    57da:	4618      	mov	r0, r3
    57dc:	370c      	adds	r7, #12
    57de:	46bd      	mov	sp, r7
    57e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    57e4:	4770      	bx	lr

000057e6 <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    57e6:	b480      	push	{r7}
    57e8:	b083      	sub	sp, #12
    57ea:	af00      	add	r7, sp, #0
    57ec:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    57ee:	687b      	ldr	r3, [r7, #4]
    57f0:	691b      	ldr	r3, [r3, #16]
    57f2:	0a1b      	lsrs	r3, r3, #8
    57f4:	f003 0301 	and.w	r3, r3, #1
    57f8:	2b00      	cmp	r3, #0
    57fa:	bf14      	ite	ne
    57fc:	2301      	movne	r3, #1
    57fe:	2300      	moveq	r3, #0
    5800:	b2db      	uxtb	r3, r3
}
    5802:	4618      	mov	r0, r3
    5804:	370c      	adds	r7, #12
    5806:	46bd      	mov	sp, r7
    5808:	f85d 7b04 	ldr.w	r7, [sp], #4
    580c:	4770      	bx	lr

0000580e <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    580e:	b480      	push	{r7}
    5810:	b085      	sub	sp, #20
    5812:	af00      	add	r7, sp, #0
    5814:	6078      	str	r0, [r7, #4]
    5816:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5818:	687b      	ldr	r3, [r7, #4]
    581a:	691b      	ldr	r3, [r3, #16]
    581c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    581e:	68fa      	ldr	r2, [r7, #12]
    5820:	683b      	ldr	r3, [r7, #0]
    5822:	4013      	ands	r3, r2
    5824:	60fb      	str	r3, [r7, #12]
	return tmp;
    5826:	68fb      	ldr	r3, [r7, #12]
}
    5828:	4618      	mov	r0, r3
    582a:	3714      	adds	r7, #20
    582c:	46bd      	mov	sp, r7
    582e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5832:	4770      	bx	lr

00005834 <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    5834:	b480      	push	{r7}
    5836:	b085      	sub	sp, #20
    5838:	af00      	add	r7, sp, #0
    583a:	60f8      	str	r0, [r7, #12]
    583c:	460b      	mov	r3, r1
    583e:	607a      	str	r2, [r7, #4]
    5840:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    5842:	7afb      	ldrb	r3, [r7, #11]
    5844:	68fa      	ldr	r2, [r7, #12]
    5846:	3304      	adds	r3, #4
    5848:	009b      	lsls	r3, r3, #2
    584a:	4413      	add	r3, r2
    584c:	687a      	ldr	r2, [r7, #4]
    584e:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5850:	bf00      	nop
    5852:	3714      	adds	r7, #20
    5854:	46bd      	mov	sp, r7
    5856:	f85d 7b04 	ldr.w	r7, [sp], #4
    585a:	4770      	bx	lr

0000585c <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    585c:	b480      	push	{r7}
    585e:	b083      	sub	sp, #12
    5860:	af00      	add	r7, sp, #0
    5862:	6078      	str	r0, [r7, #4]
    5864:	460b      	mov	r3, r1
    5866:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5868:	687b      	ldr	r3, [r7, #4]
    586a:	78fa      	ldrb	r2, [r7, #3]
    586c:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    586e:	bf00      	nop
    5870:	370c      	adds	r7, #12
    5872:	46bd      	mov	sp, r7
    5874:	f85d 7b04 	ldr.w	r7, [sp], #4
    5878:	4770      	bx	lr

0000587a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    587a:	b480      	push	{r7}
    587c:	b085      	sub	sp, #20
    587e:	af00      	add	r7, sp, #0
    5880:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5882:	687b      	ldr	r3, [r7, #4]
    5884:	f893 3020 	ldrb.w	r3, [r3, #32]
    5888:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    588a:	7bfb      	ldrb	r3, [r7, #15]
    588c:	f003 0301 	and.w	r3, r3, #1
    5890:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5892:	7bfb      	ldrb	r3, [r7, #15]
    5894:	2b00      	cmp	r3, #0
    5896:	bf14      	ite	ne
    5898:	2301      	movne	r3, #1
    589a:	2300      	moveq	r3, #0
    589c:	b2db      	uxtb	r3, r3
}
    589e:	4618      	mov	r0, r3
    58a0:	3714      	adds	r7, #20
    58a2:	46bd      	mov	sp, r7
    58a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    58a8:	4770      	bx	lr

000058aa <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    58aa:	b480      	push	{r7}
    58ac:	b083      	sub	sp, #12
    58ae:	af00      	add	r7, sp, #0
    58b0:	6078      	str	r0, [r7, #4]
    58b2:	460b      	mov	r3, r1
    58b4:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    58b6:	687b      	ldr	r3, [r7, #4]
    58b8:	78fa      	ldrb	r2, [r7, #3]
    58ba:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    58be:	bf00      	nop
    58c0:	370c      	adds	r7, #12
    58c2:	46bd      	mov	sp, r7
    58c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    58c8:	4770      	bx	lr

000058ca <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    58ca:	b480      	push	{r7}
    58cc:	b083      	sub	sp, #12
    58ce:	af00      	add	r7, sp, #0
    58d0:	6078      	str	r0, [r7, #4]
    58d2:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    58d4:	687b      	ldr	r3, [r7, #4]
    58d6:	683a      	ldr	r2, [r7, #0]
    58d8:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    58da:	bf00      	nop
    58dc:	370c      	adds	r7, #12
    58de:	46bd      	mov	sp, r7
    58e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    58e4:	4770      	bx	lr

000058e6 <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    58e6:	b480      	push	{r7}
    58e8:	b083      	sub	sp, #12
    58ea:	af00      	add	r7, sp, #0
    58ec:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    58ee:	687b      	ldr	r3, [r7, #4]
    58f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    58f2:	4618      	mov	r0, r3
    58f4:	370c      	adds	r7, #12
    58f6:	46bd      	mov	sp, r7
    58f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    58fc:	4770      	bx	lr

000058fe <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    58fe:	b480      	push	{r7}
    5900:	b083      	sub	sp, #12
    5902:	af00      	add	r7, sp, #0
    5904:	6078      	str	r0, [r7, #4]
    5906:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5908:	687b      	ldr	r3, [r7, #4]
    590a:	683a      	ldr	r2, [r7, #0]
    590c:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    590e:	bf00      	nop
    5910:	370c      	adds	r7, #12
    5912:	46bd      	mov	sp, r7
    5914:	f85d 7b04 	ldr.w	r7, [sp], #4
    5918:	4770      	bx	lr

0000591a <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    591a:	b480      	push	{r7}
    591c:	b085      	sub	sp, #20
    591e:	af00      	add	r7, sp, #0
    5920:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5922:	687b      	ldr	r3, [r7, #4]
    5924:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5928:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    592a:	7bfb      	ldrb	r3, [r7, #15]
    592c:	085b      	lsrs	r3, r3, #1
    592e:	b2db      	uxtb	r3, r3
    5930:	f003 0301 	and.w	r3, r3, #1
    5934:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5936:	7bfb      	ldrb	r3, [r7, #15]
    5938:	2b00      	cmp	r3, #0
    593a:	bf14      	ite	ne
    593c:	2301      	movne	r3, #1
    593e:	2300      	moveq	r3, #0
    5940:	b2db      	uxtb	r3, r3
}
    5942:	4618      	mov	r0, r3
    5944:	3714      	adds	r7, #20
    5946:	46bd      	mov	sp, r7
    5948:	f85d 7b04 	ldr.w	r7, [sp], #4
    594c:	4770      	bx	lr

0000594e <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    594e:	b480      	push	{r7}
    5950:	b085      	sub	sp, #20
    5952:	af00      	add	r7, sp, #0
    5954:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5956:	687b      	ldr	r3, [r7, #4]
    5958:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    595c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    595e:	7bfb      	ldrb	r3, [r7, #15]
    5960:	089b      	lsrs	r3, r3, #2
    5962:	b2db      	uxtb	r3, r3
    5964:	f003 0301 	and.w	r3, r3, #1
    5968:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    596a:	7bfb      	ldrb	r3, [r7, #15]
    596c:	2b00      	cmp	r3, #0
    596e:	bf14      	ite	ne
    5970:	2301      	movne	r3, #1
    5972:	2300      	moveq	r3, #0
    5974:	b2db      	uxtb	r3, r3
}
    5976:	4618      	mov	r0, r3
    5978:	3714      	adds	r7, #20
    597a:	46bd      	mov	sp, r7
    597c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5980:	4770      	bx	lr

00005982 <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    5982:	b480      	push	{r7}
    5984:	b085      	sub	sp, #20
    5986:	af00      	add	r7, sp, #0
    5988:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    598a:	687b      	ldr	r3, [r7, #4]
    598c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5990:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    5992:	7bfb      	ldrb	r3, [r7, #15]
    5994:	08db      	lsrs	r3, r3, #3
    5996:	b2db      	uxtb	r3, r3
    5998:	f003 0301 	and.w	r3, r3, #1
    599c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    599e:	7bfb      	ldrb	r3, [r7, #15]
    59a0:	2b00      	cmp	r3, #0
    59a2:	bf14      	ite	ne
    59a4:	2301      	movne	r3, #1
    59a6:	2300      	moveq	r3, #0
    59a8:	b2db      	uxtb	r3, r3
}
    59aa:	4618      	mov	r0, r3
    59ac:	3714      	adds	r7, #20
    59ae:	46bd      	mov	sp, r7
    59b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    59b4:	4770      	bx	lr

000059b6 <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    59b6:	b480      	push	{r7}
    59b8:	b085      	sub	sp, #20
    59ba:	af00      	add	r7, sp, #0
    59bc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    59be:	687b      	ldr	r3, [r7, #4]
    59c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    59c4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    59c6:	7bfb      	ldrb	r3, [r7, #15]
    59c8:	091b      	lsrs	r3, r3, #4
    59ca:	b2db      	uxtb	r3, r3
    59cc:	f003 0301 	and.w	r3, r3, #1
    59d0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    59d2:	7bfb      	ldrb	r3, [r7, #15]
    59d4:	2b00      	cmp	r3, #0
    59d6:	bf14      	ite	ne
    59d8:	2301      	movne	r3, #1
    59da:	2300      	moveq	r3, #0
    59dc:	b2db      	uxtb	r3, r3
}
    59de:	4618      	mov	r0, r3
    59e0:	3714      	adds	r7, #20
    59e2:	46bd      	mov	sp, r7
    59e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    59e8:	4770      	bx	lr
	...

000059ec <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    59ec:	b580      	push	{r7, lr}
    59ee:	b082      	sub	sp, #8
    59f0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    59f2:	4b0a      	ldr	r3, [pc, #40]	; (5a1c <_oscctrl_init_sources+0x30>)
    59f4:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    59f6:	4a0a      	ldr	r2, [pc, #40]	; (5a20 <_oscctrl_init_sources+0x34>)
    59f8:	2101      	movs	r1, #1
    59fa:	6878      	ldr	r0, [r7, #4]
    59fc:	4b09      	ldr	r3, [pc, #36]	; (5a24 <_oscctrl_init_sources+0x38>)
    59fe:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5a00:	bf00      	nop
    5a02:	6878      	ldr	r0, [r7, #4]
    5a04:	4b08      	ldr	r3, [pc, #32]	; (5a28 <_oscctrl_init_sources+0x3c>)
    5a06:	4798      	blx	r3
    5a08:	4603      	mov	r3, r0
    5a0a:	f083 0301 	eor.w	r3, r3, #1
    5a0e:	b2db      	uxtb	r3, r3
    5a10:	2b00      	cmp	r3, #0
    5a12:	d1f6      	bne.n	5a02 <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    5a14:	bf00      	nop
    5a16:	3708      	adds	r7, #8
    5a18:	46bd      	mov	sp, r7
    5a1a:	bd80      	pop	{r7, pc}
    5a1c:	40001000 	.word	0x40001000
    5a20:	03002646 	.word	0x03002646
    5a24:	00005835 	.word	0x00005835
    5a28:	000057bf 	.word	0x000057bf

00005a2c <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    5a2c:	b580      	push	{r7, lr}
    5a2e:	b084      	sub	sp, #16
    5a30:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5a32:	4b6b      	ldr	r3, [pc, #428]	; (5be0 <_oscctrl_init_referenced_generators+0x1b4>)
    5a34:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    5a36:	2204      	movs	r2, #4
    5a38:	2100      	movs	r1, #0
    5a3a:	486a      	ldr	r0, [pc, #424]	; (5be4 <_oscctrl_init_referenced_generators+0x1b8>)
    5a3c:	4b6a      	ldr	r3, [pc, #424]	; (5be8 <_oscctrl_init_referenced_generators+0x1bc>)
    5a3e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5a40:	bf00      	nop
    5a42:	4868      	ldr	r0, [pc, #416]	; (5be4 <_oscctrl_init_referenced_generators+0x1b8>)
    5a44:	4b69      	ldr	r3, [pc, #420]	; (5bec <_oscctrl_init_referenced_generators+0x1c0>)
    5a46:	4798      	blx	r3
    5a48:	4603      	mov	r3, r0
    5a4a:	2b00      	cmp	r3, #0
    5a4c:	d1f9      	bne.n	5a42 <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    5a4e:	2100      	movs	r1, #0
    5a50:	68f8      	ldr	r0, [r7, #12]
    5a52:	4b67      	ldr	r3, [pc, #412]	; (5bf0 <_oscctrl_init_referenced_generators+0x1c4>)
    5a54:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    5a56:	4967      	ldr	r1, [pc, #412]	; (5bf4 <_oscctrl_init_referenced_generators+0x1c8>)
    5a58:	68f8      	ldr	r0, [r7, #12]
    5a5a:	4b67      	ldr	r3, [pc, #412]	; (5bf8 <_oscctrl_init_referenced_generators+0x1cc>)
    5a5c:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5a5e:	bf00      	nop
    5a60:	68f8      	ldr	r0, [r7, #12]
    5a62:	4b66      	ldr	r3, [pc, #408]	; (5bfc <_oscctrl_init_referenced_generators+0x1d0>)
    5a64:	4798      	blx	r3
    5a66:	4603      	mov	r3, r0
    5a68:	2b00      	cmp	r3, #0
    5a6a:	d1f9      	bne.n	5a60 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    5a6c:	2100      	movs	r1, #0
    5a6e:	68f8      	ldr	r0, [r7, #12]
    5a70:	4b63      	ldr	r3, [pc, #396]	; (5c00 <_oscctrl_init_referenced_generators+0x1d4>)
    5a72:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5a74:	bf00      	nop
    5a76:	68f8      	ldr	r0, [r7, #12]
    5a78:	4b62      	ldr	r3, [pc, #392]	; (5c04 <_oscctrl_init_referenced_generators+0x1d8>)
    5a7a:	4798      	blx	r3
    5a7c:	4603      	mov	r3, r0
    5a7e:	2b00      	cmp	r3, #0
    5a80:	d1f9      	bne.n	5a76 <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    5a82:	2302      	movs	r3, #2
    5a84:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    5a86:	7afb      	ldrb	r3, [r7, #11]
    5a88:	4619      	mov	r1, r3
    5a8a:	68f8      	ldr	r0, [r7, #12]
    5a8c:	4b58      	ldr	r3, [pc, #352]	; (5bf0 <_oscctrl_init_referenced_generators+0x1c4>)
    5a8e:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5a90:	bf00      	nop
    5a92:	68f8      	ldr	r0, [r7, #12]
    5a94:	4b5c      	ldr	r3, [pc, #368]	; (5c08 <_oscctrl_init_referenced_generators+0x1dc>)
    5a96:	4798      	blx	r3
    5a98:	4603      	mov	r3, r0
    5a9a:	2b00      	cmp	r3, #0
    5a9c:	d1f9      	bne.n	5a92 <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5a9e:	68f8      	ldr	r0, [r7, #12]
    5aa0:	4b5a      	ldr	r3, [pc, #360]	; (5c0c <_oscctrl_init_referenced_generators+0x1e0>)
    5aa2:	4798      	blx	r3
    5aa4:	4603      	mov	r3, r0
    5aa6:	4619      	mov	r1, r3
    5aa8:	68f8      	ldr	r0, [r7, #12]
    5aaa:	4b59      	ldr	r3, [pc, #356]	; (5c10 <_oscctrl_init_referenced_generators+0x1e4>)
    5aac:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5aae:	bf00      	nop
    5ab0:	68f8      	ldr	r0, [r7, #12]
    5ab2:	4b58      	ldr	r3, [pc, #352]	; (5c14 <_oscctrl_init_referenced_generators+0x1e8>)
    5ab4:	4798      	blx	r3
    5ab6:	4603      	mov	r3, r0
    5ab8:	2b00      	cmp	r3, #0
    5aba:	d1f9      	bne.n	5ab0 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5abc:	2319      	movs	r3, #25
    5abe:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5ac0:	7afb      	ldrb	r3, [r7, #11]
    5ac2:	4619      	mov	r1, r3
    5ac4:	68f8      	ldr	r0, [r7, #12]
    5ac6:	4b4e      	ldr	r3, [pc, #312]	; (5c00 <_oscctrl_init_referenced_generators+0x1d4>)
    5ac8:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5aca:	bf00      	nop
    5acc:	68f8      	ldr	r0, [r7, #12]
    5ace:	4b4d      	ldr	r3, [pc, #308]	; (5c04 <_oscctrl_init_referenced_generators+0x1d8>)
    5ad0:	4798      	blx	r3
    5ad2:	4603      	mov	r3, r0
    5ad4:	2b00      	cmp	r3, #0
    5ad6:	d1f9      	bne.n	5acc <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5ad8:	2245      	movs	r2, #69	; 0x45
    5ada:	2101      	movs	r1, #1
    5adc:	4841      	ldr	r0, [pc, #260]	; (5be4 <_oscctrl_init_referenced_generators+0x1b8>)
    5ade:	4b4e      	ldr	r3, [pc, #312]	; (5c18 <_oscctrl_init_referenced_generators+0x1ec>)
    5ae0:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5ae2:	223b      	movs	r2, #59	; 0x3b
    5ae4:	2100      	movs	r1, #0
    5ae6:	68f8      	ldr	r0, [r7, #12]
    5ae8:	4b4c      	ldr	r3, [pc, #304]	; (5c1c <_oscctrl_init_referenced_generators+0x1f0>)
    5aea:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5aec:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5af0:	2100      	movs	r1, #0
    5af2:	68f8      	ldr	r0, [r7, #12]
    5af4:	4b4a      	ldr	r3, [pc, #296]	; (5c20 <_oscctrl_init_referenced_generators+0x1f4>)
    5af6:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5af8:	2242      	movs	r2, #66	; 0x42
    5afa:	2100      	movs	r1, #0
    5afc:	68f8      	ldr	r0, [r7, #12]
    5afe:	4b49      	ldr	r3, [pc, #292]	; (5c24 <_oscctrl_init_referenced_generators+0x1f8>)
    5b00:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5b02:	4a49      	ldr	r2, [pc, #292]	; (5c28 <_oscctrl_init_referenced_generators+0x1fc>)
    5b04:	2101      	movs	r1, #1
    5b06:	68f8      	ldr	r0, [r7, #12]
    5b08:	4b44      	ldr	r3, [pc, #272]	; (5c1c <_oscctrl_init_referenced_generators+0x1f0>)
    5b0a:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5b0c:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5b10:	2101      	movs	r1, #1
    5b12:	68f8      	ldr	r0, [r7, #12]
    5b14:	4b42      	ldr	r3, [pc, #264]	; (5c20 <_oscctrl_init_referenced_generators+0x1f4>)
    5b16:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5b18:	2202      	movs	r2, #2
    5b1a:	2101      	movs	r1, #1
    5b1c:	68f8      	ldr	r0, [r7, #12]
    5b1e:	4b41      	ldr	r3, [pc, #260]	; (5c24 <_oscctrl_init_referenced_generators+0x1f8>)
    5b20:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    5b22:	68f8      	ldr	r0, [r7, #12]
    5b24:	4b41      	ldr	r3, [pc, #260]	; (5c2c <_oscctrl_init_referenced_generators+0x200>)
    5b26:	4798      	blx	r3
    5b28:	4603      	mov	r3, r0
    5b2a:	2b00      	cmp	r3, #0
    5b2c:	d00c      	beq.n	5b48 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    5b2e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    5b32:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5b34:	bf00      	nop
    5b36:	6879      	ldr	r1, [r7, #4]
    5b38:	68f8      	ldr	r0, [r7, #12]
    5b3a:	4b3d      	ldr	r3, [pc, #244]	; (5c30 <_oscctrl_init_referenced_generators+0x204>)
    5b3c:	4798      	blx	r3
    5b3e:	4602      	mov	r2, r0
    5b40:	687b      	ldr	r3, [r7, #4]
    5b42:	429a      	cmp	r2, r3
    5b44:	d1f7      	bne.n	5b36 <_oscctrl_init_referenced_generators+0x10a>
    5b46:	e009      	b.n	5b5c <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5b48:	bf00      	nop
    5b4a:	68f8      	ldr	r0, [r7, #12]
    5b4c:	4b39      	ldr	r3, [pc, #228]	; (5c34 <_oscctrl_init_referenced_generators+0x208>)
    5b4e:	4798      	blx	r3
    5b50:	4603      	mov	r3, r0
    5b52:	f083 0301 	eor.w	r3, r3, #1
    5b56:	b2db      	uxtb	r3, r3
    5b58:	2b00      	cmp	r3, #0
    5b5a:	d1f6      	bne.n	5b4a <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5b5c:	bf00      	nop
    5b5e:	2100      	movs	r1, #0
    5b60:	68f8      	ldr	r0, [r7, #12]
    5b62:	4b35      	ldr	r3, [pc, #212]	; (5c38 <_oscctrl_init_referenced_generators+0x20c>)
    5b64:	4798      	blx	r3
    5b66:	4603      	mov	r3, r0
    5b68:	f083 0301 	eor.w	r3, r3, #1
    5b6c:	b2db      	uxtb	r3, r3
    5b6e:	2b00      	cmp	r3, #0
    5b70:	d009      	beq.n	5b86 <_oscctrl_init_referenced_generators+0x15a>
    5b72:	2100      	movs	r1, #0
    5b74:	68f8      	ldr	r0, [r7, #12]
    5b76:	4b31      	ldr	r3, [pc, #196]	; (5c3c <_oscctrl_init_referenced_generators+0x210>)
    5b78:	4798      	blx	r3
    5b7a:	4603      	mov	r3, r0
    5b7c:	f083 0301 	eor.w	r3, r3, #1
    5b80:	b2db      	uxtb	r3, r3
    5b82:	2b00      	cmp	r3, #0
    5b84:	d1eb      	bne.n	5b5e <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5b86:	bf00      	nop
    5b88:	2101      	movs	r1, #1
    5b8a:	68f8      	ldr	r0, [r7, #12]
    5b8c:	4b2a      	ldr	r3, [pc, #168]	; (5c38 <_oscctrl_init_referenced_generators+0x20c>)
    5b8e:	4798      	blx	r3
    5b90:	4603      	mov	r3, r0
    5b92:	f083 0301 	eor.w	r3, r3, #1
    5b96:	b2db      	uxtb	r3, r3
    5b98:	2b00      	cmp	r3, #0
    5b9a:	d009      	beq.n	5bb0 <_oscctrl_init_referenced_generators+0x184>
    5b9c:	2101      	movs	r1, #1
    5b9e:	68f8      	ldr	r0, [r7, #12]
    5ba0:	4b26      	ldr	r3, [pc, #152]	; (5c3c <_oscctrl_init_referenced_generators+0x210>)
    5ba2:	4798      	blx	r3
    5ba4:	4603      	mov	r3, r0
    5ba6:	f083 0301 	eor.w	r3, r3, #1
    5baa:	b2db      	uxtb	r3, r3
    5bac:	2b00      	cmp	r3, #0
    5bae:	d1eb      	bne.n	5b88 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5bb0:	bf00      	nop
    5bb2:	480c      	ldr	r0, [pc, #48]	; (5be4 <_oscctrl_init_referenced_generators+0x1b8>)
    5bb4:	4b22      	ldr	r3, [pc, #136]	; (5c40 <_oscctrl_init_referenced_generators+0x214>)
    5bb6:	4798      	blx	r3
    5bb8:	4603      	mov	r3, r0
    5bba:	2b00      	cmp	r3, #0
    5bbc:	d1f9      	bne.n	5bb2 <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5bbe:	2207      	movs	r2, #7
    5bc0:	2100      	movs	r1, #0
    5bc2:	4808      	ldr	r0, [pc, #32]	; (5be4 <_oscctrl_init_referenced_generators+0x1b8>)
    5bc4:	4b08      	ldr	r3, [pc, #32]	; (5be8 <_oscctrl_init_referenced_generators+0x1bc>)
    5bc6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5bc8:	bf00      	nop
    5bca:	4806      	ldr	r0, [pc, #24]	; (5be4 <_oscctrl_init_referenced_generators+0x1b8>)
    5bcc:	4b07      	ldr	r3, [pc, #28]	; (5bec <_oscctrl_init_referenced_generators+0x1c0>)
    5bce:	4798      	blx	r3
    5bd0:	4603      	mov	r3, r0
    5bd2:	2b00      	cmp	r3, #0
    5bd4:	d1f9      	bne.n	5bca <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5bd6:	bf00      	nop
    5bd8:	3710      	adds	r7, #16
    5bda:	46bd      	mov	sp, r7
    5bdc:	bd80      	pop	{r7, pc}
    5bde:	bf00      	nop
    5be0:	40001000 	.word	0x40001000
    5be4:	40001c00 	.word	0x40001c00
    5be8:	000055f9 	.word	0x000055f9
    5bec:	000055b9 	.word	0x000055b9
    5bf0:	0000585d 	.word	0x0000585d
    5bf4:	0401bb80 	.word	0x0401bb80
    5bf8:	000058ff 	.word	0x000058ff
    5bfc:	000059b7 	.word	0x000059b7
    5c00:	000058ab 	.word	0x000058ab
    5c04:	0000594f 	.word	0x0000594f
    5c08:	0000591b 	.word	0x0000591b
    5c0c:	000058e7 	.word	0x000058e7
    5c10:	000058cb 	.word	0x000058cb
    5c14:	00005983 	.word	0x00005983
    5c18:	00005649 	.word	0x00005649
    5c1c:	00005755 	.word	0x00005755
    5c20:	00005791 	.word	0x00005791
    5c24:	00005719 	.word	0x00005719
    5c28:	000407a0 	.word	0x000407a0
    5c2c:	0000587b 	.word	0x0000587b
    5c30:	0000580f 	.word	0x0000580f
    5c34:	000057e7 	.word	0x000057e7
    5c38:	000056a5 	.word	0x000056a5
    5c3c:	000056dd 	.word	0x000056dd
    5c40:	000055e1 	.word	0x000055e1

00005c44 <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5c44:	b480      	push	{r7}
    5c46:	b083      	sub	sp, #12
    5c48:	af00      	add	r7, sp, #0
    5c4a:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5c4c:	687b      	ldr	r3, [r7, #4]
    5c4e:	69db      	ldr	r3, [r3, #28]
    5c50:	0a9b      	lsrs	r3, r3, #10
    5c52:	f003 0301 	and.w	r3, r3, #1
    5c56:	2b00      	cmp	r3, #0
    5c58:	bf14      	ite	ne
    5c5a:	2301      	movne	r3, #1
    5c5c:	2300      	moveq	r3, #0
    5c5e:	b2db      	uxtb	r3, r3
}
    5c60:	4618      	mov	r0, r3
    5c62:	370c      	adds	r7, #12
    5c64:	46bd      	mov	sp, r7
    5c66:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c6a:	4770      	bx	lr

00005c6c <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5c6c:	b480      	push	{r7}
    5c6e:	b083      	sub	sp, #12
    5c70:	af00      	add	r7, sp, #0
    5c72:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5c74:	687b      	ldr	r3, [r7, #4]
    5c76:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5c7a:	61da      	str	r2, [r3, #28]
}
    5c7c:	bf00      	nop
    5c7e:	370c      	adds	r7, #12
    5c80:	46bd      	mov	sp, r7
    5c82:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c86:	4770      	bx	lr

00005c88 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5c88:	b480      	push	{r7}
    5c8a:	b083      	sub	sp, #12
    5c8c:	af00      	add	r7, sp, #0
    5c8e:	6078      	str	r0, [r7, #4]
    5c90:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    5c92:	687b      	ldr	r3, [r7, #4]
    5c94:	683a      	ldr	r2, [r7, #0]
    5c96:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5c98:	bf00      	nop
    5c9a:	370c      	adds	r7, #12
    5c9c:	46bd      	mov	sp, r7
    5c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ca2:	4770      	bx	lr

00005ca4 <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5ca4:	b480      	push	{r7}
    5ca6:	b083      	sub	sp, #12
    5ca8:	af00      	add	r7, sp, #0
    5caa:	6078      	str	r0, [r7, #4]
    5cac:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5cae:	687b      	ldr	r3, [r7, #4]
    5cb0:	683a      	ldr	r2, [r7, #0]
    5cb2:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5cb4:	bf00      	nop
    5cb6:	370c      	adds	r7, #12
    5cb8:	46bd      	mov	sp, r7
    5cba:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cbe:	4770      	bx	lr

00005cc0 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5cc0:	b480      	push	{r7}
    5cc2:	b083      	sub	sp, #12
    5cc4:	af00      	add	r7, sp, #0
    5cc6:	6078      	str	r0, [r7, #4]
    5cc8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5cca:	687b      	ldr	r3, [r7, #4]
    5ccc:	683a      	ldr	r2, [r7, #0]
    5cce:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5cd0:	bf00      	nop
    5cd2:	370c      	adds	r7, #12
    5cd4:	46bd      	mov	sp, r7
    5cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cda:	4770      	bx	lr

00005cdc <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5cdc:	b480      	push	{r7}
    5cde:	b083      	sub	sp, #12
    5ce0:	af00      	add	r7, sp, #0
    5ce2:	6078      	str	r0, [r7, #4]
    5ce4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5ce6:	687b      	ldr	r3, [r7, #4]
    5ce8:	683a      	ldr	r2, [r7, #0]
    5cea:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5cec:	bf00      	nop
    5cee:	370c      	adds	r7, #12
    5cf0:	46bd      	mov	sp, r7
    5cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cf6:	4770      	bx	lr

00005cf8 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5cf8:	b480      	push	{r7}
    5cfa:	b085      	sub	sp, #20
    5cfc:	af00      	add	r7, sp, #0
    5cfe:	6078      	str	r0, [r7, #4]
    5d00:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5d02:	687b      	ldr	r3, [r7, #4]
    5d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5d06:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5d08:	68fb      	ldr	r3, [r7, #12]
    5d0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5d0e:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5d10:	683b      	ldr	r3, [r7, #0]
    5d12:	b2db      	uxtb	r3, r3
    5d14:	68fa      	ldr	r2, [r7, #12]
    5d16:	4313      	orrs	r3, r2
    5d18:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5d1a:	687b      	ldr	r3, [r7, #4]
    5d1c:	68fa      	ldr	r2, [r7, #12]
    5d1e:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5d20:	bf00      	nop
    5d22:	3714      	adds	r7, #20
    5d24:	46bd      	mov	sp, r7
    5d26:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d2a:	4770      	bx	lr

00005d2c <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5d2c:	b480      	push	{r7}
    5d2e:	b085      	sub	sp, #20
    5d30:	af00      	add	r7, sp, #0
    5d32:	6078      	str	r0, [r7, #4]
    5d34:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5d36:	687b      	ldr	r3, [r7, #4]
    5d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5d3a:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5d3c:	68fb      	ldr	r3, [r7, #12]
    5d3e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    5d42:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5d44:	683b      	ldr	r3, [r7, #0]
    5d46:	041b      	lsls	r3, r3, #16
    5d48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5d4c:	68fa      	ldr	r2, [r7, #12]
    5d4e:	4313      	orrs	r3, r2
    5d50:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5d52:	687b      	ldr	r3, [r7, #4]
    5d54:	68fa      	ldr	r2, [r7, #12]
    5d56:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5d58:	bf00      	nop
    5d5a:	3714      	adds	r7, #20
    5d5c:	46bd      	mov	sp, r7
    5d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d62:	4770      	bx	lr

00005d64 <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    5d64:	b480      	push	{r7}
    5d66:	b083      	sub	sp, #12
    5d68:	af00      	add	r7, sp, #0
    5d6a:	6078      	str	r0, [r7, #4]
    5d6c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5d6e:	687b      	ldr	r3, [r7, #4]
    5d70:	683a      	ldr	r2, [r7, #0]
    5d72:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5d74:	bf00      	nop
    5d76:	370c      	adds	r7, #12
    5d78:	46bd      	mov	sp, r7
    5d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d7e:	4770      	bx	lr

00005d80 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5d80:	b480      	push	{r7}
    5d82:	b083      	sub	sp, #12
    5d84:	af00      	add	r7, sp, #0
    5d86:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5d88:	687b      	ldr	r3, [r7, #4]
    5d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5d8c:	4618      	mov	r0, r3
    5d8e:	370c      	adds	r7, #12
    5d90:	46bd      	mov	sp, r7
    5d92:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d96:	4770      	bx	lr

00005d98 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    5d98:	b480      	push	{r7}
    5d9a:	b085      	sub	sp, #20
    5d9c:	af00      	add	r7, sp, #0
    5d9e:	60f8      	str	r0, [r7, #12]
    5da0:	60b9      	str	r1, [r7, #8]
    5da2:	607a      	str	r2, [r7, #4]
	while (count--) {
    5da4:	e007      	b.n	5db6 <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    5da6:	68fb      	ldr	r3, [r7, #12]
    5da8:	1c5a      	adds	r2, r3, #1
    5daa:	60fa      	str	r2, [r7, #12]
    5dac:	68ba      	ldr	r2, [r7, #8]
    5dae:	1c51      	adds	r1, r2, #1
    5db0:	60b9      	str	r1, [r7, #8]
    5db2:	7812      	ldrb	r2, [r2, #0]
    5db4:	701a      	strb	r2, [r3, #0]
	while (count--) {
    5db6:	687b      	ldr	r3, [r7, #4]
    5db8:	1e5a      	subs	r2, r3, #1
    5dba:	607a      	str	r2, [r7, #4]
    5dbc:	2b00      	cmp	r3, #0
    5dbe:	d1f2      	bne.n	5da6 <_qspi_memcpy+0xe>
	}
}
    5dc0:	bf00      	nop
    5dc2:	3714      	adds	r7, #20
    5dc4:	46bd      	mov	sp, r7
    5dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dca:	4770      	bx	lr

00005dcc <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    5dcc:	b580      	push	{r7, lr}
    5dce:	b082      	sub	sp, #8
    5dd0:	af00      	add	r7, sp, #0
    5dd2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    5dd4:	4903      	ldr	r1, [pc, #12]	; (5de4 <_qspi_end_transfer+0x18>)
    5dd6:	6878      	ldr	r0, [r7, #4]
    5dd8:	4b03      	ldr	r3, [pc, #12]	; (5de8 <_qspi_end_transfer+0x1c>)
    5dda:	4798      	blx	r3
}
    5ddc:	bf00      	nop
    5dde:	3708      	adds	r7, #8
    5de0:	46bd      	mov	sp, r7
    5de2:	bd80      	pop	{r7, pc}
    5de4:	01000002 	.word	0x01000002
    5de8:	00005c89 	.word	0x00005c89

00005dec <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    5dec:	b580      	push	{r7, lr}
    5dee:	b082      	sub	sp, #8
    5df0:	af00      	add	r7, sp, #0
    5df2:	6078      	str	r0, [r7, #4]
    5df4:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    5df6:	687b      	ldr	r3, [r7, #4]
    5df8:	2b00      	cmp	r3, #0
    5dfa:	d004      	beq.n	5e06 <_qspi_sync_init+0x1a>
    5dfc:	683b      	ldr	r3, [r7, #0]
    5dfe:	2b00      	cmp	r3, #0
    5e00:	d001      	beq.n	5e06 <_qspi_sync_init+0x1a>
    5e02:	2301      	movs	r3, #1
    5e04:	e000      	b.n	5e08 <_qspi_sync_init+0x1c>
    5e06:	2300      	movs	r3, #0
    5e08:	f003 0301 	and.w	r3, r3, #1
    5e0c:	b2db      	uxtb	r3, r3
    5e0e:	2240      	movs	r2, #64	; 0x40
    5e10:	490c      	ldr	r1, [pc, #48]	; (5e44 <_qspi_sync_init+0x58>)
    5e12:	4618      	mov	r0, r3
    5e14:	4b0c      	ldr	r3, [pc, #48]	; (5e48 <_qspi_sync_init+0x5c>)
    5e16:	4798      	blx	r3
	dev->prvt = hw;
    5e18:	687b      	ldr	r3, [r7, #4]
    5e1a:	683a      	ldr	r2, [r7, #0]
    5e1c:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    5e1e:	687b      	ldr	r3, [r7, #4]
    5e20:	681b      	ldr	r3, [r3, #0]
    5e22:	2101      	movs	r1, #1
    5e24:	4618      	mov	r0, r3
    5e26:	4b09      	ldr	r3, [pc, #36]	; (5e4c <_qspi_sync_init+0x60>)
    5e28:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    5e2a:	4909      	ldr	r1, [pc, #36]	; (5e50 <_qspi_sync_init+0x64>)
    5e2c:	6838      	ldr	r0, [r7, #0]
    5e2e:	4b09      	ldr	r3, [pc, #36]	; (5e54 <_qspi_sync_init+0x68>)
    5e30:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    5e32:	4909      	ldr	r1, [pc, #36]	; (5e58 <_qspi_sync_init+0x6c>)
    5e34:	6838      	ldr	r0, [r7, #0]
    5e36:	4b09      	ldr	r3, [pc, #36]	; (5e5c <_qspi_sync_init+0x70>)
    5e38:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    5e3a:	2300      	movs	r3, #0
}
    5e3c:	4618      	mov	r0, r3
    5e3e:	3708      	adds	r7, #8
    5e40:	46bd      	mov	sp, r7
    5e42:	bd80      	pop	{r7, pc}
    5e44:	00013670 	.word	0x00013670
    5e48:	00003e05 	.word	0x00003e05
    5e4c:	00005c89 	.word	0x00005c89
    5e50:	06000011 	.word	0x06000011
    5e54:	00005ca5 	.word	0x00005ca5
    5e58:	00241300 	.word	0x00241300
    5e5c:	00005cc1 	.word	0x00005cc1

00005e60 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    5e60:	b580      	push	{r7, lr}
    5e62:	b082      	sub	sp, #8
    5e64:	af00      	add	r7, sp, #0
    5e66:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    5e68:	687b      	ldr	r3, [r7, #4]
    5e6a:	681b      	ldr	r3, [r3, #0]
    5e6c:	2102      	movs	r1, #2
    5e6e:	4618      	mov	r0, r3
    5e70:	4b03      	ldr	r3, [pc, #12]	; (5e80 <_qspi_sync_enable+0x20>)
    5e72:	4798      	blx	r3
	return ERR_NONE;
    5e74:	2300      	movs	r3, #0
}
    5e76:	4618      	mov	r0, r3
    5e78:	3708      	adds	r7, #8
    5e7a:	46bd      	mov	sp, r7
    5e7c:	bd80      	pop	{r7, pc}
    5e7e:	bf00      	nop
    5e80:	00005c89 	.word	0x00005c89

00005e84 <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    5e84:	b580      	push	{r7, lr}
    5e86:	b082      	sub	sp, #8
    5e88:	af00      	add	r7, sp, #0
    5e8a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    5e8c:	687b      	ldr	r3, [r7, #4]
    5e8e:	681b      	ldr	r3, [r3, #0]
    5e90:	2100      	movs	r1, #0
    5e92:	4618      	mov	r0, r3
    5e94:	4b03      	ldr	r3, [pc, #12]	; (5ea4 <_qspi_sync_disable+0x20>)
    5e96:	4798      	blx	r3
	return ERR_NONE;
    5e98:	2300      	movs	r3, #0
}
    5e9a:	4618      	mov	r0, r3
    5e9c:	3708      	adds	r7, #8
    5e9e:	46bd      	mov	sp, r7
    5ea0:	bd80      	pop	{r7, pc}
    5ea2:	bf00      	nop
    5ea4:	00005c89 	.word	0x00005c89

00005ea8 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5ea8:	b580      	push	{r7, lr}
    5eaa:	b084      	sub	sp, #16
    5eac:	af00      	add	r7, sp, #0
    5eae:	6078      	str	r0, [r7, #4]
    5eb0:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    5eb2:	687b      	ldr	r3, [r7, #4]
    5eb4:	681b      	ldr	r3, [r3, #0]
    5eb6:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    5eb8:	683b      	ldr	r3, [r7, #0]
    5eba:	781b      	ldrb	r3, [r3, #0]
    5ebc:	f003 0320 	and.w	r3, r3, #32
    5ec0:	b2db      	uxtb	r3, r3
    5ec2:	2b00      	cmp	r3, #0
    5ec4:	d005      	beq.n	5ed2 <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    5ec6:	683b      	ldr	r3, [r7, #0]
    5ec8:	689b      	ldr	r3, [r3, #8]
    5eca:	4619      	mov	r1, r3
    5ecc:	68f8      	ldr	r0, [r7, #12]
    5ece:	4b13      	ldr	r3, [pc, #76]	; (5f1c <_qspi_sync_command_set_ifr+0x74>)
    5ed0:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    5ed2:	683b      	ldr	r3, [r7, #0]
    5ed4:	781b      	ldrb	r3, [r3, #0]
    5ed6:	f003 0310 	and.w	r3, r3, #16
    5eda:	b2db      	uxtb	r3, r3
    5edc:	2b00      	cmp	r3, #0
    5ede:	d005      	beq.n	5eec <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    5ee0:	683b      	ldr	r3, [r7, #0]
    5ee2:	791b      	ldrb	r3, [r3, #4]
    5ee4:	4619      	mov	r1, r3
    5ee6:	68f8      	ldr	r0, [r7, #12]
    5ee8:	4b0d      	ldr	r3, [pc, #52]	; (5f20 <_qspi_sync_command_set_ifr+0x78>)
    5eea:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    5eec:	683b      	ldr	r3, [r7, #0]
    5eee:	781b      	ldrb	r3, [r3, #0]
    5ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5ef4:	b2db      	uxtb	r3, r3
    5ef6:	2b00      	cmp	r3, #0
    5ef8:	d005      	beq.n	5f06 <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    5efa:	683b      	ldr	r3, [r7, #0]
    5efc:	795b      	ldrb	r3, [r3, #5]
    5efe:	4619      	mov	r1, r3
    5f00:	68f8      	ldr	r0, [r7, #12]
    5f02:	4b08      	ldr	r3, [pc, #32]	; (5f24 <_qspi_sync_command_set_ifr+0x7c>)
    5f04:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    5f06:	683b      	ldr	r3, [r7, #0]
    5f08:	681b      	ldr	r3, [r3, #0]
    5f0a:	4619      	mov	r1, r3
    5f0c:	68f8      	ldr	r0, [r7, #12]
    5f0e:	4b06      	ldr	r3, [pc, #24]	; (5f28 <_qspi_sync_command_set_ifr+0x80>)
    5f10:	4798      	blx	r3
}
    5f12:	bf00      	nop
    5f14:	3710      	adds	r7, #16
    5f16:	46bd      	mov	sp, r7
    5f18:	bd80      	pop	{r7, pc}
    5f1a:	bf00      	nop
    5f1c:	00005cdd 	.word	0x00005cdd
    5f20:	00005cf9 	.word	0x00005cf9
    5f24:	00005d2d 	.word	0x00005d2d
    5f28:	00005d65 	.word	0x00005d65

00005f2c <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5f2c:	b580      	push	{r7, lr}
    5f2e:	b084      	sub	sp, #16
    5f30:	af00      	add	r7, sp, #0
    5f32:	6078      	str	r0, [r7, #4]
    5f34:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    5f36:	687b      	ldr	r3, [r7, #4]
    5f38:	681b      	ldr	r3, [r3, #0]
    5f3a:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    5f3c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5f40:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    5f42:	683b      	ldr	r3, [r7, #0]
    5f44:	781b      	ldrb	r3, [r3, #0]
    5f46:	f003 0320 	and.w	r3, r3, #32
    5f4a:	b2db      	uxtb	r3, r3
    5f4c:	2b00      	cmp	r3, #0
    5f4e:	d004      	beq.n	5f5a <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    5f50:	683b      	ldr	r3, [r7, #0]
    5f52:	689b      	ldr	r3, [r3, #8]
    5f54:	68fa      	ldr	r2, [r7, #12]
    5f56:	4413      	add	r3, r2
    5f58:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    5f5a:	68b8      	ldr	r0, [r7, #8]
    5f5c:	4b18      	ldr	r3, [pc, #96]	; (5fc0 <_qspi_sync_run_transfer+0x94>)
    5f5e:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    5f60:	683b      	ldr	r3, [r7, #0]
    5f62:	691b      	ldr	r3, [r3, #16]
    5f64:	2b00      	cmp	r3, #0
    5f66:	d103      	bne.n	5f70 <_qspi_sync_run_transfer+0x44>
    5f68:	683b      	ldr	r3, [r7, #0]
    5f6a:	695b      	ldr	r3, [r3, #20]
    5f6c:	2b00      	cmp	r3, #0
    5f6e:	d001      	beq.n	5f74 <_qspi_sync_run_transfer+0x48>
    5f70:	2301      	movs	r3, #1
    5f72:	e000      	b.n	5f76 <_qspi_sync_run_transfer+0x4a>
    5f74:	2300      	movs	r3, #0
    5f76:	f003 0301 	and.w	r3, r3, #1
    5f7a:	b2db      	uxtb	r3, r3
    5f7c:	2282      	movs	r2, #130	; 0x82
    5f7e:	4911      	ldr	r1, [pc, #68]	; (5fc4 <_qspi_sync_run_transfer+0x98>)
    5f80:	4618      	mov	r0, r3
    5f82:	4b11      	ldr	r3, [pc, #68]	; (5fc8 <_qspi_sync_run_transfer+0x9c>)
    5f84:	4798      	blx	r3

	if (cmd->tx_buf) {
    5f86:	683b      	ldr	r3, [r7, #0]
    5f88:	691b      	ldr	r3, [r3, #16]
    5f8a:	2b00      	cmp	r3, #0
    5f8c:	d008      	beq.n	5fa0 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    5f8e:	683b      	ldr	r3, [r7, #0]
    5f90:	6919      	ldr	r1, [r3, #16]
    5f92:	683b      	ldr	r3, [r7, #0]
    5f94:	68db      	ldr	r3, [r3, #12]
    5f96:	461a      	mov	r2, r3
    5f98:	68f8      	ldr	r0, [r7, #12]
    5f9a:	4b0c      	ldr	r3, [pc, #48]	; (5fcc <_qspi_sync_run_transfer+0xa0>)
    5f9c:	4798      	blx	r3
    5f9e:	e007      	b.n	5fb0 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    5fa0:	683b      	ldr	r3, [r7, #0]
    5fa2:	6958      	ldr	r0, [r3, #20]
    5fa4:	683b      	ldr	r3, [r7, #0]
    5fa6:	68db      	ldr	r3, [r3, #12]
    5fa8:	461a      	mov	r2, r3
    5faa:	68f9      	ldr	r1, [r7, #12]
    5fac:	4b07      	ldr	r3, [pc, #28]	; (5fcc <_qspi_sync_run_transfer+0xa0>)
    5fae:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    5fb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5fb4:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    5fb8:	bf00      	nop
    5fba:	3710      	adds	r7, #16
    5fbc:	46bd      	mov	sp, r7
    5fbe:	bd80      	pop	{r7, pc}
    5fc0:	00005d81 	.word	0x00005d81
    5fc4:	00013670 	.word	0x00013670
    5fc8:	00003e05 	.word	0x00003e05
    5fcc:	00005d99 	.word	0x00005d99

00005fd0 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    5fd0:	b580      	push	{r7, lr}
    5fd2:	b082      	sub	sp, #8
    5fd4:	af00      	add	r7, sp, #0
    5fd6:	6078      	str	r0, [r7, #4]
    5fd8:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    5fda:	6839      	ldr	r1, [r7, #0]
    5fdc:	6878      	ldr	r0, [r7, #4]
    5fde:	4b14      	ldr	r3, [pc, #80]	; (6030 <_qspi_sync_serial_run_command+0x60>)
    5fe0:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    5fe2:	683b      	ldr	r3, [r7, #0]
    5fe4:	781b      	ldrb	r3, [r3, #0]
    5fe6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5fea:	b2db      	uxtb	r3, r3
    5fec:	2b00      	cmp	r3, #0
    5fee:	d003      	beq.n	5ff8 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    5ff0:	6839      	ldr	r1, [r7, #0]
    5ff2:	6878      	ldr	r0, [r7, #4]
    5ff4:	4b0f      	ldr	r3, [pc, #60]	; (6034 <_qspi_sync_serial_run_command+0x64>)
    5ff6:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    5ff8:	687b      	ldr	r3, [r7, #4]
    5ffa:	681b      	ldr	r3, [r3, #0]
    5ffc:	4618      	mov	r0, r3
    5ffe:	4b0e      	ldr	r3, [pc, #56]	; (6038 <_qspi_sync_serial_run_command+0x68>)
    6000:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    6002:	bf00      	nop
    6004:	687b      	ldr	r3, [r7, #4]
    6006:	681b      	ldr	r3, [r3, #0]
    6008:	4618      	mov	r0, r3
    600a:	4b0c      	ldr	r3, [pc, #48]	; (603c <_qspi_sync_serial_run_command+0x6c>)
    600c:	4798      	blx	r3
    600e:	4603      	mov	r3, r0
    6010:	f083 0301 	eor.w	r3, r3, #1
    6014:	b2db      	uxtb	r3, r3
    6016:	2b00      	cmp	r3, #0
    6018:	d1f4      	bne.n	6004 <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    601a:	687b      	ldr	r3, [r7, #4]
    601c:	681b      	ldr	r3, [r3, #0]
    601e:	4618      	mov	r0, r3
    6020:	4b07      	ldr	r3, [pc, #28]	; (6040 <_qspi_sync_serial_run_command+0x70>)
    6022:	4798      	blx	r3
	return ERR_NONE;
    6024:	2300      	movs	r3, #0
}
    6026:	4618      	mov	r0, r3
    6028:	3708      	adds	r7, #8
    602a:	46bd      	mov	sp, r7
    602c:	bd80      	pop	{r7, pc}
    602e:	bf00      	nop
    6030:	00005ea9 	.word	0x00005ea9
    6034:	00005f2d 	.word	0x00005f2d
    6038:	00005dcd 	.word	0x00005dcd
    603c:	00005c45 	.word	0x00005c45
    6040:	00005c6d 	.word	0x00005c6d

00006044 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    6044:	b480      	push	{r7}
    6046:	b083      	sub	sp, #12
    6048:	af00      	add	r7, sp, #0
    604a:	6078      	str	r0, [r7, #4]
    604c:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    604e:	bf00      	nop
    6050:	687b      	ldr	r3, [r7, #4]
    6052:	691a      	ldr	r2, [r3, #16]
    6054:	683b      	ldr	r3, [r7, #0]
    6056:	4013      	ands	r3, r2
    6058:	2b00      	cmp	r3, #0
    605a:	d1f9      	bne.n	6050 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    605c:	bf00      	nop
    605e:	370c      	adds	r7, #12
    6060:	46bd      	mov	sp, r7
    6062:	f85d 7b04 	ldr.w	r7, [sp], #4
    6066:	4770      	bx	lr

00006068 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    6068:	b480      	push	{r7}
    606a:	b083      	sub	sp, #12
    606c:	af00      	add	r7, sp, #0
    606e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    6070:	687b      	ldr	r3, [r7, #4]
    6072:	f44f 7280 	mov.w	r2, #256	; 0x100
    6076:	819a      	strh	r2, [r3, #12]
}
    6078:	bf00      	nop
    607a:	370c      	adds	r7, #12
    607c:	46bd      	mov	sp, r7
    607e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6082:	4770      	bx	lr

00006084 <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    6084:	b480      	push	{r7}
    6086:	b083      	sub	sp, #12
    6088:	af00      	add	r7, sp, #0
    608a:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    608c:	687b      	ldr	r3, [r7, #4]
    608e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6092:	819a      	strh	r2, [r3, #12]
}
    6094:	bf00      	nop
    6096:	370c      	adds	r7, #12
    6098:	46bd      	mov	sp, r7
    609a:	f85d 7b04 	ldr.w	r7, [sp], #4
    609e:	4770      	bx	lr

000060a0 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    60a0:	b480      	push	{r7}
    60a2:	b083      	sub	sp, #12
    60a4:	af00      	add	r7, sp, #0
    60a6:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    60a8:	687b      	ldr	r3, [r7, #4]
    60aa:	899b      	ldrh	r3, [r3, #12]
    60ac:	b29b      	uxth	r3, r3
}
    60ae:	4618      	mov	r0, r3
    60b0:	370c      	adds	r7, #12
    60b2:	46bd      	mov	sp, r7
    60b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    60b8:	4770      	bx	lr

000060ba <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    60ba:	b480      	push	{r7}
    60bc:	b083      	sub	sp, #12
    60be:	af00      	add	r7, sp, #0
    60c0:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    60c2:	687b      	ldr	r3, [r7, #4]
    60c4:	895b      	ldrh	r3, [r3, #10]
    60c6:	b29b      	uxth	r3, r3
}
    60c8:	4618      	mov	r0, r3
    60ca:	370c      	adds	r7, #12
    60cc:	46bd      	mov	sp, r7
    60ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    60d2:	4770      	bx	lr

000060d4 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    60d4:	b580      	push	{r7, lr}
    60d6:	b082      	sub	sp, #8
    60d8:	af00      	add	r7, sp, #0
    60da:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    60dc:	687b      	ldr	r3, [r7, #4]
    60de:	881b      	ldrh	r3, [r3, #0]
    60e0:	b29b      	uxth	r3, r3
    60e2:	f043 0301 	orr.w	r3, r3, #1
    60e6:	b29a      	uxth	r2, r3
    60e8:	687b      	ldr	r3, [r7, #4]
    60ea:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    60ec:	2101      	movs	r1, #1
    60ee:	6878      	ldr	r0, [r7, #4]
    60f0:	4b02      	ldr	r3, [pc, #8]	; (60fc <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    60f2:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    60f4:	bf00      	nop
    60f6:	3708      	adds	r7, #8
    60f8:	46bd      	mov	sp, r7
    60fa:	bd80      	pop	{r7, pc}
    60fc:	00006045 	.word	0x00006045

00006100 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6100:	b580      	push	{r7, lr}
    6102:	b084      	sub	sp, #16
    6104:	af00      	add	r7, sp, #0
    6106:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6108:	f248 0103 	movw	r1, #32771	; 0x8003
    610c:	6878      	ldr	r0, [r7, #4]
    610e:	4b0a      	ldr	r3, [pc, #40]	; (6138 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    6110:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    6112:	687b      	ldr	r3, [r7, #4]
    6114:	881b      	ldrh	r3, [r3, #0]
    6116:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    6118:	89fb      	ldrh	r3, [r7, #14]
    611a:	085b      	lsrs	r3, r3, #1
    611c:	b29b      	uxth	r3, r3
    611e:	f003 0301 	and.w	r3, r3, #1
    6122:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    6124:	89fb      	ldrh	r3, [r7, #14]
    6126:	2b00      	cmp	r3, #0
    6128:	bf14      	ite	ne
    612a:	2301      	movne	r3, #1
    612c:	2300      	moveq	r3, #0
    612e:	b2db      	uxtb	r3, r3
}
    6130:	4618      	mov	r0, r3
    6132:	3710      	adds	r7, #16
    6134:	46bd      	mov	sp, r7
    6136:	bd80      	pop	{r7, pc}
    6138:	00006045 	.word	0x00006045

0000613c <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    613c:	b580      	push	{r7, lr}
    613e:	b082      	sub	sp, #8
    6140:	af00      	add	r7, sp, #0
    6142:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    6144:	687b      	ldr	r3, [r7, #4]
    6146:	881b      	ldrh	r3, [r3, #0]
    6148:	b29b      	uxth	r3, r3
    614a:	f023 0302 	bic.w	r3, r3, #2
    614e:	b29a      	uxth	r2, r3
    6150:	687b      	ldr	r3, [r7, #4]
    6152:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6154:	f248 0103 	movw	r1, #32771	; 0x8003
    6158:	6878      	ldr	r0, [r7, #4]
    615a:	4b03      	ldr	r3, [pc, #12]	; (6168 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    615c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    615e:	bf00      	nop
    6160:	3708      	adds	r7, #8
    6162:	46bd      	mov	sp, r7
    6164:	bd80      	pop	{r7, pc}
    6166:	bf00      	nop
    6168:	00006045 	.word	0x00006045

0000616c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    616c:	b580      	push	{r7, lr}
    616e:	b082      	sub	sp, #8
    6170:	af00      	add	r7, sp, #0
    6172:	6078      	str	r0, [r7, #4]
    6174:	460b      	mov	r3, r1
    6176:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    6178:	687b      	ldr	r3, [r7, #4]
    617a:	887a      	ldrh	r2, [r7, #2]
    617c:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    617e:	f248 0103 	movw	r1, #32771	; 0x8003
    6182:	6878      	ldr	r0, [r7, #4]
    6184:	4b02      	ldr	r3, [pc, #8]	; (6190 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    6186:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    6188:	bf00      	nop
    618a:	3708      	adds	r7, #8
    618c:	46bd      	mov	sp, r7
    618e:	bd80      	pop	{r7, pc}
    6190:	00006045 	.word	0x00006045

00006194 <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    6194:	b480      	push	{r7}
    6196:	b083      	sub	sp, #12
    6198:	af00      	add	r7, sp, #0
    619a:	6078      	str	r0, [r7, #4]
    619c:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    619e:	687b      	ldr	r3, [r7, #4]
    61a0:	683a      	ldr	r2, [r7, #0]
    61a2:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    61a4:	bf00      	nop
    61a6:	370c      	adds	r7, #12
    61a8:	46bd      	mov	sp, r7
    61aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    61ae:	4770      	bx	lr

000061b0 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    61b0:	b580      	push	{r7, lr}
    61b2:	b082      	sub	sp, #8
    61b4:	af00      	add	r7, sp, #0
    61b6:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    61b8:	687b      	ldr	r3, [r7, #4]
    61ba:	2b00      	cmp	r3, #0
    61bc:	d005      	beq.n	61ca <_calendar_init+0x1a>
    61be:	687b      	ldr	r3, [r7, #4]
    61c0:	681b      	ldr	r3, [r3, #0]
    61c2:	2b00      	cmp	r3, #0
    61c4:	d001      	beq.n	61ca <_calendar_init+0x1a>
    61c6:	2301      	movs	r3, #1
    61c8:	e000      	b.n	61cc <_calendar_init+0x1c>
    61ca:	2300      	movs	r3, #0
    61cc:	f003 0301 	and.w	r3, r3, #1
    61d0:	b2db      	uxtb	r3, r3
    61d2:	222f      	movs	r2, #47	; 0x2f
    61d4:	491b      	ldr	r1, [pc, #108]	; (6244 <_calendar_init+0x94>)
    61d6:	4618      	mov	r0, r3
    61d8:	4b1b      	ldr	r3, [pc, #108]	; (6248 <_calendar_init+0x98>)
    61da:	4798      	blx	r3

	_rtc_dev = dev;
    61dc:	4a1b      	ldr	r2, [pc, #108]	; (624c <_calendar_init+0x9c>)
    61de:	687b      	ldr	r3, [r7, #4]
    61e0:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    61e2:	687b      	ldr	r3, [r7, #4]
    61e4:	681b      	ldr	r3, [r3, #0]
    61e6:	4618      	mov	r0, r3
    61e8:	4b19      	ldr	r3, [pc, #100]	; (6250 <_calendar_init+0xa0>)
    61ea:	4798      	blx	r3
    61ec:	4603      	mov	r3, r0
    61ee:	2b00      	cmp	r3, #0
    61f0:	d00a      	beq.n	6208 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    61f2:	687b      	ldr	r3, [r7, #4]
    61f4:	681b      	ldr	r3, [r3, #0]
    61f6:	4618      	mov	r0, r3
    61f8:	4b16      	ldr	r3, [pc, #88]	; (6254 <_calendar_init+0xa4>)
    61fa:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    61fc:	687b      	ldr	r3, [r7, #4]
    61fe:	681b      	ldr	r3, [r3, #0]
    6200:	2102      	movs	r1, #2
    6202:	4618      	mov	r0, r3
    6204:	4b14      	ldr	r3, [pc, #80]	; (6258 <_calendar_init+0xa8>)
    6206:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    6208:	687b      	ldr	r3, [r7, #4]
    620a:	681b      	ldr	r3, [r3, #0]
    620c:	4618      	mov	r0, r3
    620e:	4b13      	ldr	r3, [pc, #76]	; (625c <_calendar_init+0xac>)
    6210:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    6212:	687b      	ldr	r3, [r7, #4]
    6214:	681b      	ldr	r3, [r3, #0]
    6216:	2101      	movs	r1, #1
    6218:	4618      	mov	r0, r3
    621a:	4b0f      	ldr	r3, [pc, #60]	; (6258 <_calendar_init+0xa8>)
    621c:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    621e:	687b      	ldr	r3, [r7, #4]
    6220:	681b      	ldr	r3, [r3, #0]
    6222:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    6226:	4618      	mov	r0, r3
    6228:	4b0d      	ldr	r3, [pc, #52]	; (6260 <_calendar_init+0xb0>)
    622a:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    622c:	687b      	ldr	r3, [r7, #4]
    622e:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    6230:	2100      	movs	r1, #0
    6232:	4618      	mov	r0, r3
    6234:	4b0b      	ldr	r3, [pc, #44]	; (6264 <_calendar_init+0xb4>)
    6236:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    6238:	2300      	movs	r3, #0
}
    623a:	4618      	mov	r0, r3
    623c:	3708      	adds	r7, #8
    623e:	46bd      	mov	sp, r7
    6240:	bd80      	pop	{r7, pc}
    6242:	bf00      	nop
    6244:	00013688 	.word	0x00013688
    6248:	00003e05 	.word	0x00003e05
    624c:	20000930 	.word	0x20000930
    6250:	00006101 	.word	0x00006101
    6254:	0000613d 	.word	0x0000613d
    6258:	00006045 	.word	0x00006045
    625c:	000060d5 	.word	0x000060d5
    6260:	0000616d 	.word	0x0000616d
    6264:	00006195 	.word	0x00006195

00006268 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    6268:	b580      	push	{r7, lr}
    626a:	b084      	sub	sp, #16
    626c:	af00      	add	r7, sp, #0
    626e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    6270:	687b      	ldr	r3, [r7, #4]
    6272:	681b      	ldr	r3, [r3, #0]
    6274:	4618      	mov	r0, r3
    6276:	4b19      	ldr	r3, [pc, #100]	; (62dc <_rtc_interrupt_handler+0x74>)
    6278:	4798      	blx	r3
    627a:	4603      	mov	r3, r0
    627c:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    627e:	687b      	ldr	r3, [r7, #4]
    6280:	681b      	ldr	r3, [r3, #0]
    6282:	4618      	mov	r0, r3
    6284:	4b16      	ldr	r3, [pc, #88]	; (62e0 <_rtc_interrupt_handler+0x78>)
    6286:	4798      	blx	r3
    6288:	4603      	mov	r3, r0
    628a:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    628c:	89fa      	ldrh	r2, [r7, #14]
    628e:	89bb      	ldrh	r3, [r7, #12]
    6290:	4013      	ands	r3, r2
    6292:	b29b      	uxth	r3, r3
    6294:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6298:	2b00      	cmp	r3, #0
    629a:	d009      	beq.n	62b0 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    629c:	687b      	ldr	r3, [r7, #4]
    629e:	685b      	ldr	r3, [r3, #4]
    62a0:	6878      	ldr	r0, [r7, #4]
    62a2:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    62a4:	687b      	ldr	r3, [r7, #4]
    62a6:	681b      	ldr	r3, [r3, #0]
    62a8:	4618      	mov	r0, r3
    62aa:	4b0e      	ldr	r3, [pc, #56]	; (62e4 <_rtc_interrupt_handler+0x7c>)
    62ac:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    62ae:	e010      	b.n	62d2 <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    62b0:	89fa      	ldrh	r2, [r7, #14]
    62b2:	89bb      	ldrh	r3, [r7, #12]
    62b4:	4013      	ands	r3, r2
    62b6:	b29b      	uxth	r3, r3
    62b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    62bc:	2b00      	cmp	r3, #0
    62be:	d008      	beq.n	62d2 <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    62c0:	687b      	ldr	r3, [r7, #4]
    62c2:	689b      	ldr	r3, [r3, #8]
    62c4:	6878      	ldr	r0, [r7, #4]
    62c6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    62c8:	687b      	ldr	r3, [r7, #4]
    62ca:	681b      	ldr	r3, [r3, #0]
    62cc:	4618      	mov	r0, r3
    62ce:	4b06      	ldr	r3, [pc, #24]	; (62e8 <_rtc_interrupt_handler+0x80>)
    62d0:	4798      	blx	r3
}
    62d2:	bf00      	nop
    62d4:	3710      	adds	r7, #16
    62d6:	46bd      	mov	sp, r7
    62d8:	bd80      	pop	{r7, pc}
    62da:	bf00      	nop
    62dc:	000060a1 	.word	0x000060a1
    62e0:	000060bb 	.word	0x000060bb
    62e4:	00006069 	.word	0x00006069
    62e8:	00006085 	.word	0x00006085

000062ec <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    62ec:	b580      	push	{r7, lr}
    62ee:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    62f0:	4b03      	ldr	r3, [pc, #12]	; (6300 <RTC_Handler+0x14>)
    62f2:	681b      	ldr	r3, [r3, #0]
    62f4:	4618      	mov	r0, r3
    62f6:	4b03      	ldr	r3, [pc, #12]	; (6304 <RTC_Handler+0x18>)
    62f8:	4798      	blx	r3
}
    62fa:	bf00      	nop
    62fc:	bd80      	pop	{r7, pc}
    62fe:	bf00      	nop
    6300:	20000930 	.word	0x20000930
    6304:	00006269 	.word	0x00006269

00006308 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6308:	b480      	push	{r7}
    630a:	b083      	sub	sp, #12
    630c:	af00      	add	r7, sp, #0
    630e:	6078      	str	r0, [r7, #4]
    6310:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    6312:	bf00      	nop
    6314:	687b      	ldr	r3, [r7, #4]
    6316:	69da      	ldr	r2, [r3, #28]
    6318:	683b      	ldr	r3, [r7, #0]
    631a:	4013      	ands	r3, r2
    631c:	2b00      	cmp	r3, #0
    631e:	d1f9      	bne.n	6314 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    6320:	bf00      	nop
    6322:	370c      	adds	r7, #12
    6324:	46bd      	mov	sp, r7
    6326:	f85d 7b04 	ldr.w	r7, [sp], #4
    632a:	4770      	bx	lr

0000632c <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    632c:	b480      	push	{r7}
    632e:	b083      	sub	sp, #12
    6330:	af00      	add	r7, sp, #0
    6332:	6078      	str	r0, [r7, #4]
    6334:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    6336:	687b      	ldr	r3, [r7, #4]
    6338:	69da      	ldr	r2, [r3, #28]
    633a:	683b      	ldr	r3, [r7, #0]
    633c:	4013      	ands	r3, r2
    633e:	2b00      	cmp	r3, #0
    6340:	bf14      	ite	ne
    6342:	2301      	movne	r3, #1
    6344:	2300      	moveq	r3, #0
    6346:	b2db      	uxtb	r3, r3
}
    6348:	4618      	mov	r0, r3
    634a:	370c      	adds	r7, #12
    634c:	46bd      	mov	sp, r7
    634e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6352:	4770      	bx	lr

00006354 <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6354:	b480      	push	{r7}
    6356:	b083      	sub	sp, #12
    6358:	af00      	add	r7, sp, #0
    635a:	6078      	str	r0, [r7, #4]
    635c:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    635e:	bf00      	nop
    6360:	687b      	ldr	r3, [r7, #4]
    6362:	69da      	ldr	r2, [r3, #28]
    6364:	683b      	ldr	r3, [r7, #0]
    6366:	4013      	ands	r3, r2
    6368:	2b00      	cmp	r3, #0
    636a:	d1f9      	bne.n	6360 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    636c:	bf00      	nop
    636e:	370c      	adds	r7, #12
    6370:	46bd      	mov	sp, r7
    6372:	f85d 7b04 	ldr.w	r7, [sp], #4
    6376:	4770      	bx	lr

00006378 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    6378:	b480      	push	{r7}
    637a:	b083      	sub	sp, #12
    637c:	af00      	add	r7, sp, #0
    637e:	6078      	str	r0, [r7, #4]
    6380:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    6382:	687b      	ldr	r3, [r7, #4]
    6384:	69da      	ldr	r2, [r3, #28]
    6386:	683b      	ldr	r3, [r7, #0]
    6388:	4013      	ands	r3, r2
    638a:	2b00      	cmp	r3, #0
    638c:	bf14      	ite	ne
    638e:	2301      	movne	r3, #1
    6390:	2300      	moveq	r3, #0
    6392:	b2db      	uxtb	r3, r3
}
    6394:	4618      	mov	r0, r3
    6396:	370c      	adds	r7, #12
    6398:	46bd      	mov	sp, r7
    639a:	f85d 7b04 	ldr.w	r7, [sp], #4
    639e:	4770      	bx	lr

000063a0 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    63a0:	b480      	push	{r7}
    63a2:	b083      	sub	sp, #12
    63a4:	af00      	add	r7, sp, #0
    63a6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    63a8:	687b      	ldr	r3, [r7, #4]
    63aa:	2201      	movs	r2, #1
    63ac:	761a      	strb	r2, [r3, #24]
}
    63ae:	bf00      	nop
    63b0:	370c      	adds	r7, #12
    63b2:	46bd      	mov	sp, r7
    63b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    63b8:	4770      	bx	lr

000063ba <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    63ba:	b480      	push	{r7}
    63bc:	b083      	sub	sp, #12
    63be:	af00      	add	r7, sp, #0
    63c0:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    63c2:	687b      	ldr	r3, [r7, #4]
    63c4:	2202      	movs	r2, #2
    63c6:	761a      	strb	r2, [r3, #24]
}
    63c8:	bf00      	nop
    63ca:	370c      	adds	r7, #12
    63cc:	46bd      	mov	sp, r7
    63ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    63d2:	4770      	bx	lr

000063d4 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    63d4:	b480      	push	{r7}
    63d6:	b083      	sub	sp, #12
    63d8:	af00      	add	r7, sp, #0
    63da:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    63dc:	687b      	ldr	r3, [r7, #4]
    63de:	7e1b      	ldrb	r3, [r3, #24]
    63e0:	b2db      	uxtb	r3, r3
}
    63e2:	4618      	mov	r0, r3
    63e4:	370c      	adds	r7, #12
    63e6:	46bd      	mov	sp, r7
    63e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    63ec:	4770      	bx	lr

000063ee <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    63ee:	b480      	push	{r7}
    63f0:	b085      	sub	sp, #20
    63f2:	af00      	add	r7, sp, #0
    63f4:	6078      	str	r0, [r7, #4]
    63f6:	460b      	mov	r3, r1
    63f8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    63fa:	687b      	ldr	r3, [r7, #4]
    63fc:	7e1b      	ldrb	r3, [r3, #24]
    63fe:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    6400:	7bfa      	ldrb	r2, [r7, #15]
    6402:	78fb      	ldrb	r3, [r7, #3]
    6404:	4013      	ands	r3, r2
    6406:	73fb      	strb	r3, [r7, #15]
	return tmp;
    6408:	7bfb      	ldrb	r3, [r7, #15]
}
    640a:	4618      	mov	r0, r3
    640c:	3714      	adds	r7, #20
    640e:	46bd      	mov	sp, r7
    6410:	f85d 7b04 	ldr.w	r7, [sp], #4
    6414:	4770      	bx	lr

00006416 <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    6416:	b480      	push	{r7}
    6418:	b083      	sub	sp, #12
    641a:	af00      	add	r7, sp, #0
    641c:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    641e:	687b      	ldr	r3, [r7, #4]
    6420:	7e1b      	ldrb	r3, [r3, #24]
    6422:	b2db      	uxtb	r3, r3
}
    6424:	4618      	mov	r0, r3
    6426:	370c      	adds	r7, #12
    6428:	46bd      	mov	sp, r7
    642a:	f85d 7b04 	ldr.w	r7, [sp], #4
    642e:	4770      	bx	lr

00006430 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    6430:	b480      	push	{r7}
    6432:	b083      	sub	sp, #12
    6434:	af00      	add	r7, sp, #0
    6436:	6078      	str	r0, [r7, #4]
    6438:	460b      	mov	r3, r1
    643a:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    643c:	687b      	ldr	r3, [r7, #4]
    643e:	78fa      	ldrb	r2, [r7, #3]
    6440:	761a      	strb	r2, [r3, #24]
}
    6442:	bf00      	nop
    6444:	370c      	adds	r7, #12
    6446:	46bd      	mov	sp, r7
    6448:	f85d 7b04 	ldr.w	r7, [sp], #4
    644c:	4770      	bx	lr
	...

00006450 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6450:	b580      	push	{r7, lr}
    6452:	b082      	sub	sp, #8
    6454:	af00      	add	r7, sp, #0
    6456:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    6458:	687b      	ldr	r3, [r7, #4]
    645a:	681b      	ldr	r3, [r3, #0]
    645c:	f043 0202 	orr.w	r2, r3, #2
    6460:	687b      	ldr	r3, [r7, #4]
    6462:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6464:	2103      	movs	r1, #3
    6466:	6878      	ldr	r0, [r7, #4]
    6468:	4b02      	ldr	r3, [pc, #8]	; (6474 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    646a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    646c:	bf00      	nop
    646e:	3708      	adds	r7, #8
    6470:	46bd      	mov	sp, r7
    6472:	bd80      	pop	{r7, pc}
    6474:	00006309 	.word	0x00006309

00006478 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6478:	b580      	push	{r7, lr}
    647a:	b082      	sub	sp, #8
    647c:	af00      	add	r7, sp, #0
    647e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    6480:	687b      	ldr	r3, [r7, #4]
    6482:	681b      	ldr	r3, [r3, #0]
    6484:	f023 0202 	bic.w	r2, r3, #2
    6488:	687b      	ldr	r3, [r7, #4]
    648a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    648c:	2103      	movs	r1, #3
    648e:	6878      	ldr	r0, [r7, #4]
    6490:	4b02      	ldr	r3, [pc, #8]	; (649c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    6492:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6494:	bf00      	nop
    6496:	3708      	adds	r7, #8
    6498:	46bd      	mov	sp, r7
    649a:	bd80      	pop	{r7, pc}
    649c:	00006309 	.word	0x00006309

000064a0 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    64a0:	b480      	push	{r7}
    64a2:	b085      	sub	sp, #20
    64a4:	af00      	add	r7, sp, #0
    64a6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    64a8:	687b      	ldr	r3, [r7, #4]
    64aa:	681b      	ldr	r3, [r3, #0]
    64ac:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    64ae:	68fb      	ldr	r3, [r7, #12]
    64b0:	0edb      	lsrs	r3, r3, #27
    64b2:	f003 0301 	and.w	r3, r3, #1
    64b6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    64b8:	68fb      	ldr	r3, [r7, #12]
    64ba:	2b00      	cmp	r3, #0
    64bc:	bf14      	ite	ne
    64be:	2301      	movne	r3, #1
    64c0:	2300      	moveq	r3, #0
    64c2:	b2db      	uxtb	r3, r3
}
    64c4:	4618      	mov	r0, r3
    64c6:	3714      	adds	r7, #20
    64c8:	46bd      	mov	sp, r7
    64ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    64ce:	4770      	bx	lr

000064d0 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    64d0:	b580      	push	{r7, lr}
    64d2:	b084      	sub	sp, #16
    64d4:	af00      	add	r7, sp, #0
    64d6:	6078      	str	r0, [r7, #4]
    64d8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    64da:	2103      	movs	r1, #3
    64dc:	6878      	ldr	r0, [r7, #4]
    64de:	4b07      	ldr	r3, [pc, #28]	; (64fc <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    64e0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    64e2:	687b      	ldr	r3, [r7, #4]
    64e4:	681b      	ldr	r3, [r3, #0]
    64e6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    64e8:	68fa      	ldr	r2, [r7, #12]
    64ea:	683b      	ldr	r3, [r7, #0]
    64ec:	4013      	ands	r3, r2
    64ee:	60fb      	str	r3, [r7, #12]
	return tmp;
    64f0:	68fb      	ldr	r3, [r7, #12]
}
    64f2:	4618      	mov	r0, r3
    64f4:	3710      	adds	r7, #16
    64f6:	46bd      	mov	sp, r7
    64f8:	bd80      	pop	{r7, pc}
    64fa:	bf00      	nop
    64fc:	00006309 	.word	0x00006309

00006500 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    6500:	b580      	push	{r7, lr}
    6502:	b082      	sub	sp, #8
    6504:	af00      	add	r7, sp, #0
    6506:	6078      	str	r0, [r7, #4]
    6508:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    650a:	687b      	ldr	r3, [r7, #4]
    650c:	683a      	ldr	r2, [r7, #0]
    650e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6510:	2103      	movs	r1, #3
    6512:	6878      	ldr	r0, [r7, #4]
    6514:	4b02      	ldr	r3, [pc, #8]	; (6520 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    6516:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6518:	bf00      	nop
    651a:	3708      	adds	r7, #8
    651c:	46bd      	mov	sp, r7
    651e:	bd80      	pop	{r7, pc}
    6520:	00006309 	.word	0x00006309

00006524 <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    6524:	b580      	push	{r7, lr}
    6526:	b082      	sub	sp, #8
    6528:	af00      	add	r7, sp, #0
    652a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    652c:	687b      	ldr	r3, [r7, #4]
    652e:	681b      	ldr	r3, [r3, #0]
    6530:	f043 0202 	orr.w	r2, r3, #2
    6534:	687b      	ldr	r3, [r7, #4]
    6536:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6538:	2103      	movs	r1, #3
    653a:	6878      	ldr	r0, [r7, #4]
    653c:	4b02      	ldr	r3, [pc, #8]	; (6548 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    653e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6540:	bf00      	nop
    6542:	3708      	adds	r7, #8
    6544:	46bd      	mov	sp, r7
    6546:	bd80      	pop	{r7, pc}
    6548:	00006355 	.word	0x00006355

0000654c <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    654c:	b580      	push	{r7, lr}
    654e:	b084      	sub	sp, #16
    6550:	af00      	add	r7, sp, #0
    6552:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6554:	2103      	movs	r1, #3
    6556:	6878      	ldr	r0, [r7, #4]
    6558:	4b09      	ldr	r3, [pc, #36]	; (6580 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    655a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    655c:	687b      	ldr	r3, [r7, #4]
    655e:	681b      	ldr	r3, [r3, #0]
    6560:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    6562:	68fb      	ldr	r3, [r7, #12]
    6564:	085b      	lsrs	r3, r3, #1
    6566:	f003 0301 	and.w	r3, r3, #1
    656a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    656c:	68fb      	ldr	r3, [r7, #12]
    656e:	2b00      	cmp	r3, #0
    6570:	bf14      	ite	ne
    6572:	2301      	movne	r3, #1
    6574:	2300      	moveq	r3, #0
    6576:	b2db      	uxtb	r3, r3
}
    6578:	4618      	mov	r0, r3
    657a:	3710      	adds	r7, #16
    657c:	46bd      	mov	sp, r7
    657e:	bd80      	pop	{r7, pc}
    6580:	00006355 	.word	0x00006355

00006584 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    6584:	b580      	push	{r7, lr}
    6586:	b082      	sub	sp, #8
    6588:	af00      	add	r7, sp, #0
    658a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    658c:	687b      	ldr	r3, [r7, #4]
    658e:	681b      	ldr	r3, [r3, #0]
    6590:	f023 0202 	bic.w	r2, r3, #2
    6594:	687b      	ldr	r3, [r7, #4]
    6596:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6598:	2103      	movs	r1, #3
    659a:	6878      	ldr	r0, [r7, #4]
    659c:	4b02      	ldr	r3, [pc, #8]	; (65a8 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    659e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    65a0:	bf00      	nop
    65a2:	3708      	adds	r7, #8
    65a4:	46bd      	mov	sp, r7
    65a6:	bd80      	pop	{r7, pc}
    65a8:	00006355 	.word	0x00006355

000065ac <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    65ac:	b580      	push	{r7, lr}
    65ae:	b084      	sub	sp, #16
    65b0:	af00      	add	r7, sp, #0
    65b2:	6078      	str	r0, [r7, #4]
    65b4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    65b6:	2103      	movs	r1, #3
    65b8:	6878      	ldr	r0, [r7, #4]
    65ba:	4b07      	ldr	r3, [pc, #28]	; (65d8 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    65bc:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    65be:	687b      	ldr	r3, [r7, #4]
    65c0:	681b      	ldr	r3, [r3, #0]
    65c2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    65c4:	68fa      	ldr	r2, [r7, #12]
    65c6:	683b      	ldr	r3, [r7, #0]
    65c8:	4013      	ands	r3, r2
    65ca:	60fb      	str	r3, [r7, #12]
	return tmp;
    65cc:	68fb      	ldr	r3, [r7, #12]
}
    65ce:	4618      	mov	r0, r3
    65d0:	3710      	adds	r7, #16
    65d2:	46bd      	mov	sp, r7
    65d4:	bd80      	pop	{r7, pc}
    65d6:	bf00      	nop
    65d8:	00006355 	.word	0x00006355

000065dc <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    65dc:	b580      	push	{r7, lr}
    65de:	b082      	sub	sp, #8
    65e0:	af00      	add	r7, sp, #0
    65e2:	6078      	str	r0, [r7, #4]
    65e4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    65e6:	687b      	ldr	r3, [r7, #4]
    65e8:	683a      	ldr	r2, [r7, #0]
    65ea:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    65ec:	2103      	movs	r1, #3
    65ee:	6878      	ldr	r0, [r7, #4]
    65f0:	4b02      	ldr	r3, [pc, #8]	; (65fc <hri_sercomspi_write_CTRLA_reg+0x20>)
    65f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    65f4:	bf00      	nop
    65f6:	3708      	adds	r7, #8
    65f8:	46bd      	mov	sp, r7
    65fa:	bd80      	pop	{r7, pc}
    65fc:	00006355 	.word	0x00006355

00006600 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6600:	b580      	push	{r7, lr}
    6602:	b082      	sub	sp, #8
    6604:	af00      	add	r7, sp, #0
    6606:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6608:	687b      	ldr	r3, [r7, #4]
    660a:	685b      	ldr	r3, [r3, #4]
    660c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6610:	687b      	ldr	r3, [r7, #4]
    6612:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6614:	2104      	movs	r1, #4
    6616:	6878      	ldr	r0, [r7, #4]
    6618:	4b02      	ldr	r3, [pc, #8]	; (6624 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    661a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    661c:	bf00      	nop
    661e:	3708      	adds	r7, #8
    6620:	46bd      	mov	sp, r7
    6622:	bd80      	pop	{r7, pc}
    6624:	00006309 	.word	0x00006309

00006628 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    6628:	b580      	push	{r7, lr}
    662a:	b082      	sub	sp, #8
    662c:	af00      	add	r7, sp, #0
    662e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6630:	687b      	ldr	r3, [r7, #4]
    6632:	685b      	ldr	r3, [r3, #4]
    6634:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    6638:	687b      	ldr	r3, [r7, #4]
    663a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    663c:	2104      	movs	r1, #4
    663e:	6878      	ldr	r0, [r7, #4]
    6640:	4b02      	ldr	r3, [pc, #8]	; (664c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    6642:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6644:	bf00      	nop
    6646:	3708      	adds	r7, #8
    6648:	46bd      	mov	sp, r7
    664a:	bd80      	pop	{r7, pc}
    664c:	00006309 	.word	0x00006309

00006650 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    6650:	b580      	push	{r7, lr}
    6652:	b082      	sub	sp, #8
    6654:	af00      	add	r7, sp, #0
    6656:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6658:	687b      	ldr	r3, [r7, #4]
    665a:	685b      	ldr	r3, [r3, #4]
    665c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    6660:	687b      	ldr	r3, [r7, #4]
    6662:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6664:	2104      	movs	r1, #4
    6666:	6878      	ldr	r0, [r7, #4]
    6668:	4b02      	ldr	r3, [pc, #8]	; (6674 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    666a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    666c:	bf00      	nop
    666e:	3708      	adds	r7, #8
    6670:	46bd      	mov	sp, r7
    6672:	bd80      	pop	{r7, pc}
    6674:	00006309 	.word	0x00006309

00006678 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    6678:	b580      	push	{r7, lr}
    667a:	b082      	sub	sp, #8
    667c:	af00      	add	r7, sp, #0
    667e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6680:	687b      	ldr	r3, [r7, #4]
    6682:	685b      	ldr	r3, [r3, #4]
    6684:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    6688:	687b      	ldr	r3, [r7, #4]
    668a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    668c:	2104      	movs	r1, #4
    668e:	6878      	ldr	r0, [r7, #4]
    6690:	4b02      	ldr	r3, [pc, #8]	; (669c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    6692:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6694:	bf00      	nop
    6696:	3708      	adds	r7, #8
    6698:	46bd      	mov	sp, r7
    669a:	bd80      	pop	{r7, pc}
    669c:	00006309 	.word	0x00006309

000066a0 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    66a0:	b580      	push	{r7, lr}
    66a2:	b082      	sub	sp, #8
    66a4:	af00      	add	r7, sp, #0
    66a6:	6078      	str	r0, [r7, #4]
    66a8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    66aa:	687b      	ldr	r3, [r7, #4]
    66ac:	685a      	ldr	r2, [r3, #4]
    66ae:	683b      	ldr	r3, [r7, #0]
    66b0:	041b      	lsls	r3, r3, #16
    66b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    66b6:	431a      	orrs	r2, r3
    66b8:	687b      	ldr	r3, [r7, #4]
    66ba:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    66bc:	2104      	movs	r1, #4
    66be:	6878      	ldr	r0, [r7, #4]
    66c0:	4b02      	ldr	r3, [pc, #8]	; (66cc <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    66c2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66c4:	bf00      	nop
    66c6:	3708      	adds	r7, #8
    66c8:	46bd      	mov	sp, r7
    66ca:	bd80      	pop	{r7, pc}
    66cc:	00006309 	.word	0x00006309

000066d0 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    66d0:	b580      	push	{r7, lr}
    66d2:	b082      	sub	sp, #8
    66d4:	af00      	add	r7, sp, #0
    66d6:	6078      	str	r0, [r7, #4]
    66d8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    66da:	687b      	ldr	r3, [r7, #4]
    66dc:	683a      	ldr	r2, [r7, #0]
    66de:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    66e0:	2104      	movs	r1, #4
    66e2:	6878      	ldr	r0, [r7, #4]
    66e4:	4b02      	ldr	r3, [pc, #8]	; (66f0 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    66e6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66e8:	bf00      	nop
    66ea:	3708      	adds	r7, #8
    66ec:	46bd      	mov	sp, r7
    66ee:	bd80      	pop	{r7, pc}
    66f0:	00006309 	.word	0x00006309

000066f4 <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    66f4:	b580      	push	{r7, lr}
    66f6:	b082      	sub	sp, #8
    66f8:	af00      	add	r7, sp, #0
    66fa:	6078      	str	r0, [r7, #4]
    66fc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    66fe:	687b      	ldr	r3, [r7, #4]
    6700:	683a      	ldr	r2, [r7, #0]
    6702:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    6704:	2117      	movs	r1, #23
    6706:	6878      	ldr	r0, [r7, #4]
    6708:	4b02      	ldr	r3, [pc, #8]	; (6714 <hri_sercomspi_write_CTRLB_reg+0x20>)
    670a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    670c:	bf00      	nop
    670e:	3708      	adds	r7, #8
    6710:	46bd      	mov	sp, r7
    6712:	bd80      	pop	{r7, pc}
    6714:	00006355 	.word	0x00006355

00006718 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6718:	b480      	push	{r7}
    671a:	b083      	sub	sp, #12
    671c:	af00      	add	r7, sp, #0
    671e:	6078      	str	r0, [r7, #4]
    6720:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    6722:	687b      	ldr	r3, [r7, #4]
    6724:	683a      	ldr	r2, [r7, #0]
    6726:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6728:	bf00      	nop
    672a:	370c      	adds	r7, #12
    672c:	46bd      	mov	sp, r7
    672e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6732:	4770      	bx	lr

00006734 <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    6734:	b480      	push	{r7}
    6736:	b083      	sub	sp, #12
    6738:	af00      	add	r7, sp, #0
    673a:	6078      	str	r0, [r7, #4]
    673c:	460b      	mov	r3, r1
    673e:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    6740:	687b      	ldr	r3, [r7, #4]
    6742:	78fa      	ldrb	r2, [r7, #3]
    6744:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6746:	bf00      	nop
    6748:	370c      	adds	r7, #12
    674a:	46bd      	mov	sp, r7
    674c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6750:	4770      	bx	lr
	...

00006754 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    6754:	b580      	push	{r7, lr}
    6756:	b084      	sub	sp, #16
    6758:	af00      	add	r7, sp, #0
    675a:	6078      	str	r0, [r7, #4]
    675c:	460b      	mov	r3, r1
    675e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    6760:	687b      	ldr	r3, [r7, #4]
    6762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6764:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    6766:	68fb      	ldr	r3, [r7, #12]
    6768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    676c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    676e:	78fb      	ldrb	r3, [r7, #3]
    6770:	039b      	lsls	r3, r3, #14
    6772:	461a      	mov	r2, r3
    6774:	68fb      	ldr	r3, [r7, #12]
    6776:	4313      	orrs	r3, r2
    6778:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    677a:	687b      	ldr	r3, [r7, #4]
    677c:	68fa      	ldr	r2, [r7, #12]
    677e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6780:	2104      	movs	r1, #4
    6782:	6878      	ldr	r0, [r7, #4]
    6784:	4b02      	ldr	r3, [pc, #8]	; (6790 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    6786:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6788:	bf00      	nop
    678a:	3710      	adds	r7, #16
    678c:	46bd      	mov	sp, r7
    678e:	bd80      	pop	{r7, pc}
    6790:	00006309 	.word	0x00006309

00006794 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    6794:	b580      	push	{r7, lr}
    6796:	b082      	sub	sp, #8
    6798:	af00      	add	r7, sp, #0
    679a:	6078      	str	r0, [r7, #4]
    679c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    679e:	687b      	ldr	r3, [r7, #4]
    67a0:	683a      	ldr	r2, [r7, #0]
    67a2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    67a4:	2104      	movs	r1, #4
    67a6:	6878      	ldr	r0, [r7, #4]
    67a8:	4b02      	ldr	r3, [pc, #8]	; (67b4 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    67aa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    67ac:	bf00      	nop
    67ae:	3708      	adds	r7, #8
    67b0:	46bd      	mov	sp, r7
    67b2:	bd80      	pop	{r7, pc}
    67b4:	00006309 	.word	0x00006309

000067b8 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    67b8:	b580      	push	{r7, lr}
    67ba:	b082      	sub	sp, #8
    67bc:	af00      	add	r7, sp, #0
    67be:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    67c0:	2104      	movs	r1, #4
    67c2:	6878      	ldr	r0, [r7, #4]
    67c4:	4b03      	ldr	r3, [pc, #12]	; (67d4 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    67c6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    67c8:	687b      	ldr	r3, [r7, #4]
    67ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    67cc:	4618      	mov	r0, r3
    67ce:	3708      	adds	r7, #8
    67d0:	46bd      	mov	sp, r7
    67d2:	bd80      	pop	{r7, pc}
    67d4:	00006309 	.word	0x00006309

000067d8 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    67d8:	b480      	push	{r7}
    67da:	b083      	sub	sp, #12
    67dc:	af00      	add	r7, sp, #0
    67de:	6078      	str	r0, [r7, #4]
    67e0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    67e2:	687b      	ldr	r3, [r7, #4]
    67e4:	683a      	ldr	r2, [r7, #0]
    67e6:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    67e8:	bf00      	nop
    67ea:	370c      	adds	r7, #12
    67ec:	46bd      	mov	sp, r7
    67ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    67f2:	4770      	bx	lr

000067f4 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    67f4:	b580      	push	{r7, lr}
    67f6:	b082      	sub	sp, #8
    67f8:	af00      	add	r7, sp, #0
    67fa:	6078      	str	r0, [r7, #4]
    67fc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    67fe:	687b      	ldr	r3, [r7, #4]
    6800:	683a      	ldr	r2, [r7, #0]
    6802:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6804:	2104      	movs	r1, #4
    6806:	6878      	ldr	r0, [r7, #4]
    6808:	4b02      	ldr	r3, [pc, #8]	; (6814 <hri_sercomi2cm_write_DATA_reg+0x20>)
    680a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    680c:	bf00      	nop
    680e:	3708      	adds	r7, #8
    6810:	46bd      	mov	sp, r7
    6812:	bd80      	pop	{r7, pc}
    6814:	00006309 	.word	0x00006309

00006818 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6818:	b580      	push	{r7, lr}
    681a:	b082      	sub	sp, #8
    681c:	af00      	add	r7, sp, #0
    681e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6820:	2104      	movs	r1, #4
    6822:	6878      	ldr	r0, [r7, #4]
    6824:	4b03      	ldr	r3, [pc, #12]	; (6834 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    6826:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6828:	687b      	ldr	r3, [r7, #4]
    682a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    682c:	4618      	mov	r0, r3
    682e:	3708      	adds	r7, #8
    6830:	46bd      	mov	sp, r7
    6832:	bd80      	pop	{r7, pc}
    6834:	00006309 	.word	0x00006309

00006838 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6838:	b480      	push	{r7}
    683a:	b083      	sub	sp, #12
    683c:	af00      	add	r7, sp, #0
    683e:	6078      	str	r0, [r7, #4]
    6840:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    6842:	687b      	ldr	r3, [r7, #4]
    6844:	683a      	ldr	r2, [r7, #0]
    6846:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6848:	bf00      	nop
    684a:	370c      	adds	r7, #12
    684c:	46bd      	mov	sp, r7
    684e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6852:	4770      	bx	lr

00006854 <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    6854:	b480      	push	{r7}
    6856:	b083      	sub	sp, #12
    6858:	af00      	add	r7, sp, #0
    685a:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    685c:	687b      	ldr	r3, [r7, #4]
    685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6860:	4618      	mov	r0, r3
    6862:	370c      	adds	r7, #12
    6864:	46bd      	mov	sp, r7
    6866:	f85d 7b04 	ldr.w	r7, [sp], #4
    686a:	4770      	bx	lr

0000686c <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    686c:	b480      	push	{r7}
    686e:	b083      	sub	sp, #12
    6870:	af00      	add	r7, sp, #0
    6872:	6078      	str	r0, [r7, #4]
    6874:	460b      	mov	r3, r1
    6876:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6878:	687b      	ldr	r3, [r7, #4]
    687a:	78fa      	ldrb	r2, [r7, #3]
    687c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6880:	bf00      	nop
    6882:	370c      	adds	r7, #12
    6884:	46bd      	mov	sp, r7
    6886:	f85d 7b04 	ldr.w	r7, [sp], #4
    688a:	4770      	bx	lr

0000688c <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    688c:	b480      	push	{r7}
    688e:	b083      	sub	sp, #12
    6890:	af00      	add	r7, sp, #0
    6892:	6078      	str	r0, [r7, #4]
    6894:	460b      	mov	r3, r1
    6896:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6898:	687b      	ldr	r3, [r7, #4]
    689a:	887a      	ldrh	r2, [r7, #2]
    689c:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    689e:	bf00      	nop
    68a0:	370c      	adds	r7, #12
    68a2:	46bd      	mov	sp, r7
    68a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    68a8:	4770      	bx	lr
	...

000068ac <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    68ac:	b580      	push	{r7, lr}
    68ae:	b082      	sub	sp, #8
    68b0:	af00      	add	r7, sp, #0
    68b2:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    68b4:	2104      	movs	r1, #4
    68b6:	6878      	ldr	r0, [r7, #4]
    68b8:	4b06      	ldr	r3, [pc, #24]	; (68d4 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    68ba:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    68bc:	687b      	ldr	r3, [r7, #4]
    68be:	8b5b      	ldrh	r3, [r3, #26]
    68c0:	b29b      	uxth	r3, r3
    68c2:	091b      	lsrs	r3, r3, #4
    68c4:	b29b      	uxth	r3, r3
    68c6:	f003 0303 	and.w	r3, r3, #3
    68ca:	b29b      	uxth	r3, r3
}
    68cc:	4618      	mov	r0, r3
    68ce:	3708      	adds	r7, #8
    68d0:	46bd      	mov	sp, r7
    68d2:	bd80      	pop	{r7, pc}
    68d4:	00006309 	.word	0x00006309

000068d8 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    68d8:	b580      	push	{r7, lr}
    68da:	b082      	sub	sp, #8
    68dc:	af00      	add	r7, sp, #0
    68de:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    68e0:	2104      	movs	r1, #4
    68e2:	6878      	ldr	r0, [r7, #4]
    68e4:	4b04      	ldr	r3, [pc, #16]	; (68f8 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    68e6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    68e8:	687b      	ldr	r3, [r7, #4]
    68ea:	8b5b      	ldrh	r3, [r3, #26]
    68ec:	b29b      	uxth	r3, r3
}
    68ee:	4618      	mov	r0, r3
    68f0:	3708      	adds	r7, #8
    68f2:	46bd      	mov	sp, r7
    68f4:	bd80      	pop	{r7, pc}
    68f6:	bf00      	nop
    68f8:	00006309 	.word	0x00006309

000068fc <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    68fc:	b580      	push	{r7, lr}
    68fe:	b082      	sub	sp, #8
    6900:	af00      	add	r7, sp, #0
    6902:	6078      	str	r0, [r7, #4]
    6904:	460b      	mov	r3, r1
    6906:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    6908:	687b      	ldr	r3, [r7, #4]
    690a:	887a      	ldrh	r2, [r7, #2]
    690c:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    690e:	2104      	movs	r1, #4
    6910:	6878      	ldr	r0, [r7, #4]
    6912:	4b03      	ldr	r3, [pc, #12]	; (6920 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    6914:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6916:	bf00      	nop
    6918:	3708      	adds	r7, #8
    691a:	46bd      	mov	sp, r7
    691c:	bd80      	pop	{r7, pc}
    691e:	bf00      	nop
    6920:	00006309 	.word	0x00006309

00006924 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6924:	b4b0      	push	{r4, r5, r7}
    6926:	b08d      	sub	sp, #52	; 0x34
    6928:	af00      	add	r7, sp, #0
    692a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    692c:	4b13      	ldr	r3, [pc, #76]	; (697c <_sercom_get_hardware_index+0x58>)
    692e:	f107 040c 	add.w	r4, r7, #12
    6932:	461d      	mov	r5, r3
    6934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6938:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    693c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6940:	2300      	movs	r3, #0
    6942:	62fb      	str	r3, [r7, #44]	; 0x2c
    6944:	e010      	b.n	6968 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6948:	009b      	lsls	r3, r3, #2
    694a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    694e:	4413      	add	r3, r2
    6950:	f853 3c24 	ldr.w	r3, [r3, #-36]
    6954:	461a      	mov	r2, r3
    6956:	687b      	ldr	r3, [r7, #4]
    6958:	429a      	cmp	r2, r3
    695a:	d102      	bne.n	6962 <_sercom_get_hardware_index+0x3e>
			return i;
    695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    695e:	b2db      	uxtb	r3, r3
    6960:	e006      	b.n	6970 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6964:	3301      	adds	r3, #1
    6966:	62fb      	str	r3, [r7, #44]	; 0x2c
    6968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    696a:	2b07      	cmp	r3, #7
    696c:	d9eb      	bls.n	6946 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    696e:	2300      	movs	r3, #0
}
    6970:	4618      	mov	r0, r3
    6972:	3734      	adds	r7, #52	; 0x34
    6974:	46bd      	mov	sp, r7
    6976:	bcb0      	pop	{r4, r5, r7}
    6978:	4770      	bx	lr
    697a:	bf00      	nop
    697c:	000136bc 	.word	0x000136bc

00006980 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6980:	b580      	push	{r7, lr}
    6982:	b084      	sub	sp, #16
    6984:	af00      	add	r7, sp, #0
    6986:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6988:	6878      	ldr	r0, [r7, #4]
    698a:	4b13      	ldr	r3, [pc, #76]	; (69d8 <_get_i2cm_index+0x58>)
    698c:	4798      	blx	r3
    698e:	4603      	mov	r3, r0
    6990:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6992:	2300      	movs	r3, #0
    6994:	73fb      	strb	r3, [r7, #15]
    6996:	e010      	b.n	69ba <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6998:	7bfa      	ldrb	r2, [r7, #15]
    699a:	4910      	ldr	r1, [pc, #64]	; (69dc <_get_i2cm_index+0x5c>)
    699c:	4613      	mov	r3, r2
    699e:	005b      	lsls	r3, r3, #1
    69a0:	4413      	add	r3, r2
    69a2:	00db      	lsls	r3, r3, #3
    69a4:	440b      	add	r3, r1
    69a6:	781b      	ldrb	r3, [r3, #0]
    69a8:	7bba      	ldrb	r2, [r7, #14]
    69aa:	429a      	cmp	r2, r3
    69ac:	d102      	bne.n	69b4 <_get_i2cm_index+0x34>
			return i;
    69ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
    69b2:	e00d      	b.n	69d0 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    69b4:	7bfb      	ldrb	r3, [r7, #15]
    69b6:	3301      	adds	r3, #1
    69b8:	73fb      	strb	r3, [r7, #15]
    69ba:	7bfb      	ldrb	r3, [r7, #15]
    69bc:	2b02      	cmp	r3, #2
    69be:	d9eb      	bls.n	6998 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    69c0:	f240 32a6 	movw	r2, #934	; 0x3a6
    69c4:	4906      	ldr	r1, [pc, #24]	; (69e0 <_get_i2cm_index+0x60>)
    69c6:	2000      	movs	r0, #0
    69c8:	4b06      	ldr	r3, [pc, #24]	; (69e4 <_get_i2cm_index+0x64>)
    69ca:	4798      	blx	r3
	return -1;
    69cc:	f04f 33ff 	mov.w	r3, #4294967295
}
    69d0:	4618      	mov	r0, r3
    69d2:	3710      	adds	r7, #16
    69d4:	46bd      	mov	sp, r7
    69d6:	bd80      	pop	{r7, pc}
    69d8:	00006925 	.word	0x00006925
    69dc:	20000018 	.word	0x20000018
    69e0:	000136a0 	.word	0x000136a0
    69e4:	00003e05 	.word	0x00003e05

000069e8 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    69e8:	b580      	push	{r7, lr}
    69ea:	b082      	sub	sp, #8
    69ec:	af00      	add	r7, sp, #0
    69ee:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    69f0:	2103      	movs	r1, #3
    69f2:	6878      	ldr	r0, [r7, #4]
    69f4:	4b02      	ldr	r3, [pc, #8]	; (6a00 <_sercom_i2c_send_stop+0x18>)
    69f6:	4798      	blx	r3
}
    69f8:	bf00      	nop
    69fa:	3708      	adds	r7, #8
    69fc:	46bd      	mov	sp, r7
    69fe:	bd80      	pop	{r7, pc}
    6a00:	000066a1 	.word	0x000066a1

00006a04 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6a04:	b590      	push	{r4, r7, lr}
    6a06:	b087      	sub	sp, #28
    6a08:	af00      	add	r7, sp, #0
    6a0a:	60f8      	str	r0, [r7, #12]
    6a0c:	60b9      	str	r1, [r7, #8]
    6a0e:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6a10:	68f8      	ldr	r0, [r7, #12]
    6a12:	4b7d      	ldr	r3, [pc, #500]	; (6c08 <_sercom_i2c_sync_analyse_flags+0x204>)
    6a14:	4798      	blx	r3
    6a16:	4603      	mov	r3, r0
    6a18:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    6a1a:	68f8      	ldr	r0, [r7, #12]
    6a1c:	4b7b      	ldr	r3, [pc, #492]	; (6c0c <_sercom_i2c_sync_analyse_flags+0x208>)
    6a1e:	4798      	blx	r3
    6a20:	4603      	mov	r3, r0
    6a22:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6a24:	68bb      	ldr	r3, [r7, #8]
    6a26:	f003 0301 	and.w	r3, r3, #1
    6a2a:	2b00      	cmp	r3, #0
    6a2c:	f000 8095 	beq.w	6b5a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6a30:	8a7b      	ldrh	r3, [r7, #18]
    6a32:	f003 0302 	and.w	r3, r3, #2
    6a36:	2b00      	cmp	r3, #0
    6a38:	d01d      	beq.n	6a76 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    6a3a:	68f8      	ldr	r0, [r7, #12]
    6a3c:	4b74      	ldr	r3, [pc, #464]	; (6c10 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6a3e:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6a40:	687b      	ldr	r3, [r7, #4]
    6a42:	885b      	ldrh	r3, [r3, #2]
    6a44:	b29b      	uxth	r3, r3
    6a46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6a4a:	b29a      	uxth	r2, r3
    6a4c:	687b      	ldr	r3, [r7, #4]
    6a4e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6a50:	687b      	ldr	r3, [r7, #4]
    6a52:	885b      	ldrh	r3, [r3, #2]
    6a54:	b29b      	uxth	r3, r3
    6a56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6a5a:	b29a      	uxth	r2, r3
    6a5c:	687b      	ldr	r3, [r7, #4]
    6a5e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6a60:	8a7b      	ldrh	r3, [r7, #18]
    6a62:	f003 0301 	and.w	r3, r3, #1
    6a66:	2b00      	cmp	r3, #0
    6a68:	d002      	beq.n	6a70 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    6a6a:	f06f 0304 	mvn.w	r3, #4
    6a6e:	e0c6      	b.n	6bfe <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6a70:	f06f 0303 	mvn.w	r3, #3
    6a74:	e0c3      	b.n	6bfe <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6a76:	8a7b      	ldrh	r3, [r7, #18]
    6a78:	f003 0304 	and.w	r3, r3, #4
    6a7c:	2b00      	cmp	r3, #0
    6a7e:	d01f      	beq.n	6ac0 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6a80:	687b      	ldr	r3, [r7, #4]
    6a82:	685b      	ldr	r3, [r3, #4]
    6a84:	2b00      	cmp	r3, #0
    6a86:	dd07      	ble.n	6a98 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6a88:	687b      	ldr	r3, [r7, #4]
    6a8a:	885b      	ldrh	r3, [r3, #2]
    6a8c:	b29b      	uxth	r3, r3
    6a8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6a92:	b29a      	uxth	r2, r3
    6a94:	687b      	ldr	r3, [r7, #4]
    6a96:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6a98:	687b      	ldr	r3, [r7, #4]
    6a9a:	885b      	ldrh	r3, [r3, #2]
    6a9c:	b29b      	uxth	r3, r3
    6a9e:	b21b      	sxth	r3, r3
    6aa0:	2b00      	cmp	r3, #0
    6aa2:	da02      	bge.n	6aaa <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6aa4:	68f8      	ldr	r0, [r7, #12]
    6aa6:	4b5b      	ldr	r3, [pc, #364]	; (6c14 <_sercom_i2c_sync_analyse_flags+0x210>)
    6aa8:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6aaa:	687b      	ldr	r3, [r7, #4]
    6aac:	885b      	ldrh	r3, [r3, #2]
    6aae:	b29b      	uxth	r3, r3
    6ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6ab4:	b29a      	uxth	r2, r3
    6ab6:	687b      	ldr	r3, [r7, #4]
    6ab8:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6aba:	f06f 0301 	mvn.w	r3, #1
    6abe:	e09e      	b.n	6bfe <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6ac0:	687b      	ldr	r3, [r7, #4]
    6ac2:	885b      	ldrh	r3, [r3, #2]
    6ac4:	b29b      	uxth	r3, r3
    6ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6aca:	2b00      	cmp	r3, #0
    6acc:	d01c      	beq.n	6b08 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6ace:	687b      	ldr	r3, [r7, #4]
    6ad0:	881b      	ldrh	r3, [r3, #0]
    6ad2:	121b      	asrs	r3, r3, #8
    6ad4:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6ad6:	f003 0406 	and.w	r4, r3, #6
    6ada:	68f8      	ldr	r0, [r7, #12]
    6adc:	4b4e      	ldr	r3, [pc, #312]	; (6c18 <_sercom_i2c_sync_analyse_flags+0x214>)
    6ade:	4798      	blx	r3
    6ae0:	4603      	mov	r3, r0
    6ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6ae6:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6ae8:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6aec:	4619      	mov	r1, r3
    6aee:	68f8      	ldr	r0, [r7, #12]
    6af0:	4b4a      	ldr	r3, [pc, #296]	; (6c1c <_sercom_i2c_sync_analyse_flags+0x218>)
    6af2:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6af4:	687b      	ldr	r3, [r7, #4]
    6af6:	885b      	ldrh	r3, [r3, #2]
    6af8:	b29b      	uxth	r3, r3
    6afa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6afe:	b29a      	uxth	r2, r3
    6b00:	687b      	ldr	r3, [r7, #4]
    6b02:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6b04:	2300      	movs	r3, #0
    6b06:	e07a      	b.n	6bfe <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6b08:	687b      	ldr	r3, [r7, #4]
    6b0a:	685b      	ldr	r3, [r3, #4]
    6b0c:	2b00      	cmp	r3, #0
    6b0e:	d111      	bne.n	6b34 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6b10:	687b      	ldr	r3, [r7, #4]
    6b12:	885b      	ldrh	r3, [r3, #2]
    6b14:	b29b      	uxth	r3, r3
    6b16:	b21b      	sxth	r3, r3
    6b18:	2b00      	cmp	r3, #0
    6b1a:	da02      	bge.n	6b22 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6b1c:	68f8      	ldr	r0, [r7, #12]
    6b1e:	4b3d      	ldr	r3, [pc, #244]	; (6c14 <_sercom_i2c_sync_analyse_flags+0x210>)
    6b20:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6b22:	687b      	ldr	r3, [r7, #4]
    6b24:	885b      	ldrh	r3, [r3, #2]
    6b26:	b29b      	uxth	r3, r3
    6b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6b2c:	b29a      	uxth	r2, r3
    6b2e:	687b      	ldr	r3, [r7, #4]
    6b30:	805a      	strh	r2, [r3, #2]
    6b32:	e010      	b.n	6b56 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6b34:	687b      	ldr	r3, [r7, #4]
    6b36:	689b      	ldr	r3, [r3, #8]
    6b38:	781b      	ldrb	r3, [r3, #0]
    6b3a:	4619      	mov	r1, r3
    6b3c:	68f8      	ldr	r0, [r7, #12]
    6b3e:	4b38      	ldr	r3, [pc, #224]	; (6c20 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6b40:	4798      	blx	r3
				msg->buffer++;
    6b42:	687b      	ldr	r3, [r7, #4]
    6b44:	689b      	ldr	r3, [r3, #8]
    6b46:	1c5a      	adds	r2, r3, #1
    6b48:	687b      	ldr	r3, [r7, #4]
    6b4a:	609a      	str	r2, [r3, #8]
				msg->len--;
    6b4c:	687b      	ldr	r3, [r7, #4]
    6b4e:	685b      	ldr	r3, [r3, #4]
    6b50:	1e5a      	subs	r2, r3, #1
    6b52:	687b      	ldr	r3, [r7, #4]
    6b54:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    6b56:	2300      	movs	r3, #0
    6b58:	e051      	b.n	6bfe <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6b5a:	68bb      	ldr	r3, [r7, #8]
    6b5c:	f003 0302 	and.w	r3, r3, #2
    6b60:	2b00      	cmp	r3, #0
    6b62:	d04b      	beq.n	6bfc <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6b64:	687b      	ldr	r3, [r7, #4]
    6b66:	685b      	ldr	r3, [r3, #4]
    6b68:	2b00      	cmp	r3, #0
    6b6a:	d041      	beq.n	6bf0 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6b6c:	8a7b      	ldrh	r3, [r7, #18]
    6b6e:	f003 0304 	and.w	r3, r3, #4
    6b72:	2b00      	cmp	r3, #0
    6b74:	d13c      	bne.n	6bf0 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6b76:	687b      	ldr	r3, [r7, #4]
    6b78:	685b      	ldr	r3, [r3, #4]
    6b7a:	1e5a      	subs	r2, r3, #1
    6b7c:	687b      	ldr	r3, [r7, #4]
    6b7e:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6b80:	687b      	ldr	r3, [r7, #4]
    6b82:	685b      	ldr	r3, [r3, #4]
    6b84:	2b00      	cmp	r3, #0
    6b86:	d102      	bne.n	6b8e <_sercom_i2c_sync_analyse_flags+0x18a>
    6b88:	697b      	ldr	r3, [r7, #20]
    6b8a:	2b00      	cmp	r3, #0
    6b8c:	d006      	beq.n	6b9c <_sercom_i2c_sync_analyse_flags+0x198>
    6b8e:	687b      	ldr	r3, [r7, #4]
    6b90:	685b      	ldr	r3, [r3, #4]
    6b92:	2b01      	cmp	r3, #1
    6b94:	d105      	bne.n	6ba2 <_sercom_i2c_sync_analyse_flags+0x19e>
    6b96:	697b      	ldr	r3, [r7, #20]
    6b98:	2b00      	cmp	r3, #0
    6b9a:	d002      	beq.n	6ba2 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6b9c:	68f8      	ldr	r0, [r7, #12]
    6b9e:	4b21      	ldr	r3, [pc, #132]	; (6c24 <_sercom_i2c_sync_analyse_flags+0x220>)
    6ba0:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6ba2:	687b      	ldr	r3, [r7, #4]
    6ba4:	685b      	ldr	r3, [r3, #4]
    6ba6:	2b00      	cmp	r3, #0
    6ba8:	d113      	bne.n	6bd2 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6baa:	687b      	ldr	r3, [r7, #4]
    6bac:	885b      	ldrh	r3, [r3, #2]
    6bae:	b29b      	uxth	r3, r3
    6bb0:	b21b      	sxth	r3, r3
    6bb2:	2b00      	cmp	r3, #0
    6bb4:	da05      	bge.n	6bc2 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6bb6:	68f8      	ldr	r0, [r7, #12]
    6bb8:	4b1b      	ldr	r3, [pc, #108]	; (6c28 <_sercom_i2c_sync_analyse_flags+0x224>)
    6bba:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6bbc:	68f8      	ldr	r0, [r7, #12]
    6bbe:	4b15      	ldr	r3, [pc, #84]	; (6c14 <_sercom_i2c_sync_analyse_flags+0x210>)
    6bc0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6bc2:	687b      	ldr	r3, [r7, #4]
    6bc4:	885b      	ldrh	r3, [r3, #2]
    6bc6:	b29b      	uxth	r3, r3
    6bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6bcc:	b29a      	uxth	r2, r3
    6bce:	687b      	ldr	r3, [r7, #4]
    6bd0:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6bd2:	687b      	ldr	r3, [r7, #4]
    6bd4:	689c      	ldr	r4, [r3, #8]
    6bd6:	1c62      	adds	r2, r4, #1
    6bd8:	687b      	ldr	r3, [r7, #4]
    6bda:	609a      	str	r2, [r3, #8]
    6bdc:	68f8      	ldr	r0, [r7, #12]
    6bde:	4b13      	ldr	r3, [pc, #76]	; (6c2c <_sercom_i2c_sync_analyse_flags+0x228>)
    6be0:	4798      	blx	r3
    6be2:	4603      	mov	r3, r0
    6be4:	b2db      	uxtb	r3, r3
    6be6:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6be8:	68f8      	ldr	r0, [r7, #12]
    6bea:	4b11      	ldr	r3, [pc, #68]	; (6c30 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6bec:	4798      	blx	r3
    6bee:	e005      	b.n	6bfc <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6bf0:	68f8      	ldr	r0, [r7, #12]
    6bf2:	4b0f      	ldr	r3, [pc, #60]	; (6c30 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6bf4:	4798      	blx	r3
			return I2C_NACK;
    6bf6:	f06f 0301 	mvn.w	r3, #1
    6bfa:	e000      	b.n	6bfe <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6bfc:	2300      	movs	r3, #0
}
    6bfe:	4618      	mov	r0, r3
    6c00:	371c      	adds	r7, #28
    6c02:	46bd      	mov	sp, r7
    6c04:	bd90      	pop	{r4, r7, pc}
    6c06:	bf00      	nop
    6c08:	000064a1 	.word	0x000064a1
    6c0c:	000068d9 	.word	0x000068d9
    6c10:	000063a1 	.word	0x000063a1
    6c14:	000069e9 	.word	0x000069e9
    6c18:	000067b9 	.word	0x000067b9
    6c1c:	00006795 	.word	0x00006795
    6c20:	000067f5 	.word	0x000067f5
    6c24:	00006651 	.word	0x00006651
    6c28:	00006629 	.word	0x00006629
    6c2c:	00006819 	.word	0x00006819
    6c30:	000063bb 	.word	0x000063bb

00006c34 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6c34:	b580      	push	{r7, lr}
    6c36:	b082      	sub	sp, #8
    6c38:	af00      	add	r7, sp, #0
    6c3a:	6078      	str	r0, [r7, #4]
    6c3c:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    6c3e:	687b      	ldr	r3, [r7, #4]
    6c40:	2b00      	cmp	r3, #0
    6c42:	bf14      	ite	ne
    6c44:	2301      	movne	r3, #1
    6c46:	2300      	moveq	r3, #0
    6c48:	b2db      	uxtb	r3, r3
    6c4a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    6c4e:	4908      	ldr	r1, [pc, #32]	; (6c70 <_i2c_m_sync_init+0x3c>)
    6c50:	4618      	mov	r0, r3
    6c52:	4b08      	ldr	r3, [pc, #32]	; (6c74 <_i2c_m_sync_init+0x40>)
    6c54:	4798      	blx	r3

	i2c_dev->hw = hw;
    6c56:	687b      	ldr	r3, [r7, #4]
    6c58:	683a      	ldr	r2, [r7, #0]
    6c5a:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6c5c:	687b      	ldr	r3, [r7, #4]
    6c5e:	6839      	ldr	r1, [r7, #0]
    6c60:	4618      	mov	r0, r3
    6c62:	4b05      	ldr	r3, [pc, #20]	; (6c78 <_i2c_m_sync_init+0x44>)
    6c64:	4798      	blx	r3
    6c66:	4603      	mov	r3, r0
}
    6c68:	4618      	mov	r0, r3
    6c6a:	3708      	adds	r7, #8
    6c6c:	46bd      	mov	sp, r7
    6c6e:	bd80      	pop	{r7, pc}
    6c70:	000136a0 	.word	0x000136a0
    6c74:	00003e05 	.word	0x00003e05
    6c78:	00006ff1 	.word	0x00006ff1

00006c7c <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    6c7c:	b580      	push	{r7, lr}
    6c7e:	b082      	sub	sp, #8
    6c80:	af00      	add	r7, sp, #0
    6c82:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    6c84:	687b      	ldr	r3, [r7, #4]
    6c86:	2b00      	cmp	r3, #0
    6c88:	bf14      	ite	ne
    6c8a:	2301      	movne	r3, #1
    6c8c:	2300      	moveq	r3, #0
    6c8e:	b2db      	uxtb	r3, r3
    6c90:	f240 5235 	movw	r2, #1333	; 0x535
    6c94:	4906      	ldr	r1, [pc, #24]	; (6cb0 <_i2c_m_sync_enable+0x34>)
    6c96:	4618      	mov	r0, r3
    6c98:	4b06      	ldr	r3, [pc, #24]	; (6cb4 <_i2c_m_sync_enable+0x38>)
    6c9a:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    6c9c:	687b      	ldr	r3, [r7, #4]
    6c9e:	691b      	ldr	r3, [r3, #16]
    6ca0:	4618      	mov	r0, r3
    6ca2:	4b05      	ldr	r3, [pc, #20]	; (6cb8 <_i2c_m_sync_enable+0x3c>)
    6ca4:	4798      	blx	r3
    6ca6:	4603      	mov	r3, r0
}
    6ca8:	4618      	mov	r0, r3
    6caa:	3708      	adds	r7, #8
    6cac:	46bd      	mov	sp, r7
    6cae:	bd80      	pop	{r7, pc}
    6cb0:	000136a0 	.word	0x000136a0
    6cb4:	00003e05 	.word	0x00003e05
    6cb8:	00006f65 	.word	0x00006f65

00006cbc <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    6cbc:	b580      	push	{r7, lr}
    6cbe:	b084      	sub	sp, #16
    6cc0:	af00      	add	r7, sp, #0
    6cc2:	6078      	str	r0, [r7, #4]
    6cc4:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    6cc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6cca:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6ccc:	687b      	ldr	r3, [r7, #4]
    6cce:	691b      	ldr	r3, [r3, #16]
    6cd0:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6cd2:	68b8      	ldr	r0, [r7, #8]
    6cd4:	4b0f      	ldr	r3, [pc, #60]	; (6d14 <_sercom_i2c_sync_wait_bus+0x58>)
    6cd6:	4798      	blx	r3
    6cd8:	4603      	mov	r3, r0
    6cda:	461a      	mov	r2, r3
    6cdc:	683b      	ldr	r3, [r7, #0]
    6cde:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    6ce0:	68fb      	ldr	r3, [r7, #12]
    6ce2:	1e5a      	subs	r2, r3, #1
    6ce4:	60fa      	str	r2, [r7, #12]
    6ce6:	2b00      	cmp	r3, #0
    6ce8:	d102      	bne.n	6cf0 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    6cea:	f06f 0304 	mvn.w	r3, #4
    6cee:	e00c      	b.n	6d0a <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    6cf0:	683b      	ldr	r3, [r7, #0]
    6cf2:	681b      	ldr	r3, [r3, #0]
    6cf4:	f003 0301 	and.w	r3, r3, #1
    6cf8:	2b00      	cmp	r3, #0
    6cfa:	d105      	bne.n	6d08 <_sercom_i2c_sync_wait_bus+0x4c>
    6cfc:	683b      	ldr	r3, [r7, #0]
    6cfe:	681b      	ldr	r3, [r3, #0]
    6d00:	f003 0302 	and.w	r3, r3, #2
    6d04:	2b00      	cmp	r3, #0
    6d06:	d0e4      	beq.n	6cd2 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    6d08:	2300      	movs	r3, #0
}
    6d0a:	4618      	mov	r0, r3
    6d0c:	3710      	adds	r7, #16
    6d0e:	46bd      	mov	sp, r7
    6d10:	bd80      	pop	{r7, pc}
    6d12:	bf00      	nop
    6d14:	000063d5 	.word	0x000063d5

00006d18 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    6d18:	b590      	push	{r4, r7, lr}
    6d1a:	b087      	sub	sp, #28
    6d1c:	af00      	add	r7, sp, #0
    6d1e:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6d20:	687b      	ldr	r3, [r7, #4]
    6d22:	691b      	ldr	r3, [r3, #16]
    6d24:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6d26:	687b      	ldr	r3, [r7, #4]
    6d28:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6d2a:	6978      	ldr	r0, [r7, #20]
    6d2c:	4b39      	ldr	r3, [pc, #228]	; (6e14 <_sercom_i2c_sync_send_address+0xfc>)
    6d2e:	4798      	blx	r3
    6d30:	4603      	mov	r3, r0
    6d32:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    6d34:	687b      	ldr	r3, [r7, #4]
    6d36:	2b00      	cmp	r3, #0
    6d38:	bf14      	ite	ne
    6d3a:	2301      	movne	r3, #1
    6d3c:	2300      	moveq	r3, #0
    6d3e:	b2db      	uxtb	r3, r3
    6d40:	f240 52a5 	movw	r2, #1445	; 0x5a5
    6d44:	4934      	ldr	r1, [pc, #208]	; (6e18 <_sercom_i2c_sync_send_address+0x100>)
    6d46:	4618      	mov	r0, r3
    6d48:	4b34      	ldr	r3, [pc, #208]	; (6e1c <_sercom_i2c_sync_send_address+0x104>)
    6d4a:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6d4c:	693b      	ldr	r3, [r7, #16]
    6d4e:	685b      	ldr	r3, [r3, #4]
    6d50:	2b01      	cmp	r3, #1
    6d52:	d106      	bne.n	6d62 <_sercom_i2c_sync_send_address+0x4a>
    6d54:	68fb      	ldr	r3, [r7, #12]
    6d56:	2b00      	cmp	r3, #0
    6d58:	d003      	beq.n	6d62 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6d5a:	6978      	ldr	r0, [r7, #20]
    6d5c:	4b30      	ldr	r3, [pc, #192]	; (6e20 <_sercom_i2c_sync_send_address+0x108>)
    6d5e:	4798      	blx	r3
    6d60:	e002      	b.n	6d68 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6d62:	6978      	ldr	r0, [r7, #20]
    6d64:	4b2f      	ldr	r3, [pc, #188]	; (6e24 <_sercom_i2c_sync_send_address+0x10c>)
    6d66:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6d68:	693b      	ldr	r3, [r7, #16]
    6d6a:	881b      	ldrh	r3, [r3, #0]
    6d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6d70:	2b00      	cmp	r3, #0
    6d72:	d022      	beq.n	6dba <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6d74:	693b      	ldr	r3, [r7, #16]
    6d76:	885b      	ldrh	r3, [r3, #2]
    6d78:	b29b      	uxth	r3, r3
    6d7a:	f003 0301 	and.w	r3, r3, #1
    6d7e:	2b00      	cmp	r3, #0
    6d80:	d007      	beq.n	6d92 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6d82:	693b      	ldr	r3, [r7, #16]
    6d84:	885b      	ldrh	r3, [r3, #2]
    6d86:	b29b      	uxth	r3, r3
    6d88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6d8c:	b29a      	uxth	r2, r3
    6d8e:	693b      	ldr	r3, [r7, #16]
    6d90:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6d92:	693b      	ldr	r3, [r7, #16]
    6d94:	881b      	ldrh	r3, [r3, #0]
    6d96:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6d98:	f240 74fe 	movw	r4, #2046	; 0x7fe
    6d9c:	401c      	ands	r4, r3
    6d9e:	6978      	ldr	r0, [r7, #20]
    6da0:	4b21      	ldr	r3, [pc, #132]	; (6e28 <_sercom_i2c_sync_send_address+0x110>)
    6da2:	4798      	blx	r3
    6da4:	4603      	mov	r3, r0
    6da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6daa:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    6dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6db0:	4619      	mov	r1, r3
    6db2:	6978      	ldr	r0, [r7, #20]
    6db4:	4b1d      	ldr	r3, [pc, #116]	; (6e2c <_sercom_i2c_sync_send_address+0x114>)
    6db6:	4798      	blx	r3
    6db8:	e01a      	b.n	6df0 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    6dba:	693b      	ldr	r3, [r7, #16]
    6dbc:	881b      	ldrh	r3, [r3, #0]
    6dbe:	005b      	lsls	r3, r3, #1
    6dc0:	b2db      	uxtb	r3, r3
    6dc2:	693a      	ldr	r2, [r7, #16]
    6dc4:	8852      	ldrh	r2, [r2, #2]
    6dc6:	b292      	uxth	r2, r2
    6dc8:	f002 0201 	and.w	r2, r2, #1
    6dcc:	2a00      	cmp	r2, #0
    6dce:	bf14      	ite	ne
    6dd0:	2201      	movne	r2, #1
    6dd2:	2200      	moveq	r2, #0
    6dd4:	b2d2      	uxtb	r2, r2
    6dd6:	4313      	orrs	r3, r2
    6dd8:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6dda:	6978      	ldr	r0, [r7, #20]
    6ddc:	4b12      	ldr	r3, [pc, #72]	; (6e28 <_sercom_i2c_sync_send_address+0x110>)
    6dde:	4798      	blx	r3
    6de0:	4603      	mov	r3, r0
    6de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    6de6:	4323      	orrs	r3, r4
    6de8:	4619      	mov	r1, r3
    6dea:	6978      	ldr	r0, [r7, #20]
    6dec:	4b0f      	ldr	r3, [pc, #60]	; (6e2c <_sercom_i2c_sync_send_address+0x114>)
    6dee:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6df0:	f107 0308 	add.w	r3, r7, #8
    6df4:	4619      	mov	r1, r3
    6df6:	6878      	ldr	r0, [r7, #4]
    6df8:	4b0d      	ldr	r3, [pc, #52]	; (6e30 <_sercom_i2c_sync_send_address+0x118>)
    6dfa:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    6dfc:	68bb      	ldr	r3, [r7, #8]
    6dfe:	693a      	ldr	r2, [r7, #16]
    6e00:	4619      	mov	r1, r3
    6e02:	6978      	ldr	r0, [r7, #20]
    6e04:	4b0b      	ldr	r3, [pc, #44]	; (6e34 <_sercom_i2c_sync_send_address+0x11c>)
    6e06:	4798      	blx	r3
    6e08:	4603      	mov	r3, r0
}
    6e0a:	4618      	mov	r0, r3
    6e0c:	371c      	adds	r7, #28
    6e0e:	46bd      	mov	sp, r7
    6e10:	bd90      	pop	{r4, r7, pc}
    6e12:	bf00      	nop
    6e14:	000064a1 	.word	0x000064a1
    6e18:	000136a0 	.word	0x000136a0
    6e1c:	00003e05 	.word	0x00003e05
    6e20:	00006651 	.word	0x00006651
    6e24:	00006679 	.word	0x00006679
    6e28:	000067b9 	.word	0x000067b9
    6e2c:	00006795 	.word	0x00006795
    6e30:	00006cbd 	.word	0x00006cbd
    6e34:	00006a05 	.word	0x00006a05

00006e38 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    6e38:	b580      	push	{r7, lr}
    6e3a:	b086      	sub	sp, #24
    6e3c:	af00      	add	r7, sp, #0
    6e3e:	6078      	str	r0, [r7, #4]
    6e40:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    6e42:	687b      	ldr	r3, [r7, #4]
    6e44:	691b      	ldr	r3, [r3, #16]
    6e46:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    6e48:	687b      	ldr	r3, [r7, #4]
    6e4a:	2b00      	cmp	r3, #0
    6e4c:	bf14      	ite	ne
    6e4e:	2301      	movne	r3, #1
    6e50:	2300      	moveq	r3, #0
    6e52:	b2db      	uxtb	r3, r3
    6e54:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    6e58:	493b      	ldr	r1, [pc, #236]	; (6f48 <_i2c_m_sync_transfer+0x110>)
    6e5a:	4618      	mov	r0, r3
    6e5c:	4b3b      	ldr	r3, [pc, #236]	; (6f4c <_i2c_m_sync_transfer+0x114>)
    6e5e:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    6e60:	687b      	ldr	r3, [r7, #4]
    6e62:	691b      	ldr	r3, [r3, #16]
    6e64:	2b00      	cmp	r3, #0
    6e66:	bf14      	ite	ne
    6e68:	2301      	movne	r3, #1
    6e6a:	2300      	moveq	r3, #0
    6e6c:	b2db      	uxtb	r3, r3
    6e6e:	f240 52d1 	movw	r2, #1489	; 0x5d1
    6e72:	4935      	ldr	r1, [pc, #212]	; (6f48 <_i2c_m_sync_transfer+0x110>)
    6e74:	4618      	mov	r0, r3
    6e76:	4b35      	ldr	r3, [pc, #212]	; (6f4c <_i2c_m_sync_transfer+0x114>)
    6e78:	4798      	blx	r3
	ASSERT(msg);
    6e7a:	683b      	ldr	r3, [r7, #0]
    6e7c:	2b00      	cmp	r3, #0
    6e7e:	bf14      	ite	ne
    6e80:	2301      	movne	r3, #1
    6e82:	2300      	moveq	r3, #0
    6e84:	b2db      	uxtb	r3, r3
    6e86:	f240 52d2 	movw	r2, #1490	; 0x5d2
    6e8a:	492f      	ldr	r1, [pc, #188]	; (6f48 <_i2c_m_sync_transfer+0x110>)
    6e8c:	4618      	mov	r0, r3
    6e8e:	4b2f      	ldr	r3, [pc, #188]	; (6f4c <_i2c_m_sync_transfer+0x114>)
    6e90:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6e92:	687b      	ldr	r3, [r7, #4]
    6e94:	885b      	ldrh	r3, [r3, #2]
    6e96:	b29b      	uxth	r3, r3
    6e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6e9c:	2b00      	cmp	r3, #0
    6e9e:	d002      	beq.n	6ea6 <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    6ea0:	f06f 0305 	mvn.w	r3, #5
    6ea4:	e04c      	b.n	6f40 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    6ea6:	683b      	ldr	r3, [r7, #0]
    6ea8:	885b      	ldrh	r3, [r3, #2]
    6eaa:	b29b      	uxth	r3, r3
    6eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6eb0:	b29a      	uxth	r2, r3
    6eb2:	683b      	ldr	r3, [r7, #0]
    6eb4:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    6eb6:	687b      	ldr	r3, [r7, #4]
    6eb8:	683a      	ldr	r2, [r7, #0]
    6eba:	ca07      	ldmia	r2, {r0, r1, r2}
    6ebc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    6ec0:	6938      	ldr	r0, [r7, #16]
    6ec2:	4b23      	ldr	r3, [pc, #140]	; (6f50 <_i2c_m_sync_transfer+0x118>)
    6ec4:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    6ec6:	6878      	ldr	r0, [r7, #4]
    6ec8:	4b22      	ldr	r3, [pc, #136]	; (6f54 <_i2c_m_sync_transfer+0x11c>)
    6eca:	4798      	blx	r3
    6ecc:	6178      	str	r0, [r7, #20]

	if (ret) {
    6ece:	697b      	ldr	r3, [r7, #20]
    6ed0:	2b00      	cmp	r3, #0
    6ed2:	d02d      	beq.n	6f30 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6ed4:	687b      	ldr	r3, [r7, #4]
    6ed6:	885b      	ldrh	r3, [r3, #2]
    6ed8:	b29b      	uxth	r3, r3
    6eda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6ede:	b29a      	uxth	r2, r3
    6ee0:	687b      	ldr	r3, [r7, #4]
    6ee2:	805a      	strh	r2, [r3, #2]

		return ret;
    6ee4:	697b      	ldr	r3, [r7, #20]
    6ee6:	e02b      	b.n	6f40 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    6ee8:	f107 030c 	add.w	r3, r7, #12
    6eec:	4619      	mov	r1, r3
    6eee:	6878      	ldr	r0, [r7, #4]
    6ef0:	4b19      	ldr	r3, [pc, #100]	; (6f58 <_i2c_m_sync_transfer+0x120>)
    6ef2:	4798      	blx	r3
    6ef4:	6178      	str	r0, [r7, #20]

		if (ret) {
    6ef6:	697b      	ldr	r3, [r7, #20]
    6ef8:	2b00      	cmp	r3, #0
    6efa:	d012      	beq.n	6f22 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    6efc:	683b      	ldr	r3, [r7, #0]
    6efe:	885b      	ldrh	r3, [r3, #2]
    6f00:	b29b      	uxth	r3, r3
    6f02:	b21b      	sxth	r3, r3
    6f04:	2b00      	cmp	r3, #0
    6f06:	da02      	bge.n	6f0e <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    6f08:	6938      	ldr	r0, [r7, #16]
    6f0a:	4b14      	ldr	r3, [pc, #80]	; (6f5c <_i2c_m_sync_transfer+0x124>)
    6f0c:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    6f0e:	687b      	ldr	r3, [r7, #4]
    6f10:	885b      	ldrh	r3, [r3, #2]
    6f12:	b29b      	uxth	r3, r3
    6f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6f18:	b29a      	uxth	r2, r3
    6f1a:	687b      	ldr	r3, [r7, #4]
    6f1c:	805a      	strh	r2, [r3, #2]

			return ret;
    6f1e:	697b      	ldr	r3, [r7, #20]
    6f20:	e00e      	b.n	6f40 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    6f22:	68fb      	ldr	r3, [r7, #12]
    6f24:	687a      	ldr	r2, [r7, #4]
    6f26:	4619      	mov	r1, r3
    6f28:	6938      	ldr	r0, [r7, #16]
    6f2a:	4b0d      	ldr	r3, [pc, #52]	; (6f60 <_i2c_m_sync_transfer+0x128>)
    6f2c:	4798      	blx	r3
    6f2e:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    6f30:	687b      	ldr	r3, [r7, #4]
    6f32:	885b      	ldrh	r3, [r3, #2]
    6f34:	b29b      	uxth	r3, r3
    6f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6f3a:	2b00      	cmp	r3, #0
    6f3c:	d1d4      	bne.n	6ee8 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    6f3e:	697b      	ldr	r3, [r7, #20]
}
    6f40:	4618      	mov	r0, r3
    6f42:	3718      	adds	r7, #24
    6f44:	46bd      	mov	sp, r7
    6f46:	bd80      	pop	{r7, pc}
    6f48:	000136a0 	.word	0x000136a0
    6f4c:	00003e05 	.word	0x00003e05
    6f50:	00006601 	.word	0x00006601
    6f54:	00006d19 	.word	0x00006d19
    6f58:	00006cbd 	.word	0x00006cbd
    6f5c:	000069e9 	.word	0x000069e9
    6f60:	00006a05 	.word	0x00006a05

00006f64 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    6f64:	b580      	push	{r7, lr}
    6f66:	b084      	sub	sp, #16
    6f68:	af00      	add	r7, sp, #0
    6f6a:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    6f6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6f70:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    6f72:	2304      	movs	r3, #4
    6f74:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    6f76:	687b      	ldr	r3, [r7, #4]
    6f78:	2b00      	cmp	r3, #0
    6f7a:	bf14      	ite	ne
    6f7c:	2301      	movne	r3, #1
    6f7e:	2300      	moveq	r3, #0
    6f80:	b2db      	uxtb	r3, r3
    6f82:	f240 6205 	movw	r2, #1541	; 0x605
    6f86:	4915      	ldr	r1, [pc, #84]	; (6fdc <_i2c_m_enable_implementation+0x78>)
    6f88:	4618      	mov	r0, r3
    6f8a:	4b15      	ldr	r3, [pc, #84]	; (6fe0 <_i2c_m_enable_implementation+0x7c>)
    6f8c:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    6f8e:	6878      	ldr	r0, [r7, #4]
    6f90:	4b14      	ldr	r3, [pc, #80]	; (6fe4 <_i2c_m_enable_implementation+0x80>)
    6f92:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6f94:	e016      	b.n	6fc4 <_i2c_m_enable_implementation+0x60>
		timeout--;
    6f96:	68fb      	ldr	r3, [r7, #12]
    6f98:	3b01      	subs	r3, #1
    6f9a:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    6f9c:	68fb      	ldr	r3, [r7, #12]
    6f9e:	2b00      	cmp	r3, #0
    6fa0:	dc10      	bgt.n	6fc4 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    6fa2:	68bb      	ldr	r3, [r7, #8]
    6fa4:	3b01      	subs	r3, #1
    6fa6:	60bb      	str	r3, [r7, #8]
    6fa8:	68bb      	ldr	r3, [r7, #8]
    6faa:	2b00      	cmp	r3, #0
    6fac:	d007      	beq.n	6fbe <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    6fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6fb2:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    6fb4:	2110      	movs	r1, #16
    6fb6:	6878      	ldr	r0, [r7, #4]
    6fb8:	4b0b      	ldr	r3, [pc, #44]	; (6fe8 <_i2c_m_enable_implementation+0x84>)
    6fba:	4798      	blx	r3
    6fbc:	e002      	b.n	6fc4 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    6fbe:	f06f 0305 	mvn.w	r3, #5
    6fc2:	e006      	b.n	6fd2 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    6fc4:	6878      	ldr	r0, [r7, #4]
    6fc6:	4b09      	ldr	r3, [pc, #36]	; (6fec <_i2c_m_enable_implementation+0x88>)
    6fc8:	4798      	blx	r3
    6fca:	4603      	mov	r3, r0
    6fcc:	2b01      	cmp	r3, #1
    6fce:	d1e2      	bne.n	6f96 <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    6fd0:	2300      	movs	r3, #0
}
    6fd2:	4618      	mov	r0, r3
    6fd4:	3710      	adds	r7, #16
    6fd6:	46bd      	mov	sp, r7
    6fd8:	bd80      	pop	{r7, pc}
    6fda:	bf00      	nop
    6fdc:	000136a0 	.word	0x000136a0
    6fe0:	00003e05 	.word	0x00003e05
    6fe4:	00006451 	.word	0x00006451
    6fe8:	000068fd 	.word	0x000068fd
    6fec:	000068ad 	.word	0x000068ad

00006ff0 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    6ff0:	b580      	push	{r7, lr}
    6ff2:	b084      	sub	sp, #16
    6ff4:	af00      	add	r7, sp, #0
    6ff6:	6078      	str	r0, [r7, #4]
    6ff8:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    6ffa:	6838      	ldr	r0, [r7, #0]
    6ffc:	4b42      	ldr	r3, [pc, #264]	; (7108 <_i2c_m_sync_init_impl+0x118>)
    6ffe:	4798      	blx	r3
    7000:	4603      	mov	r3, r0
    7002:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    7004:	2101      	movs	r1, #1
    7006:	6838      	ldr	r0, [r7, #0]
    7008:	4b40      	ldr	r3, [pc, #256]	; (710c <_i2c_m_sync_init_impl+0x11c>)
    700a:	4798      	blx	r3
    700c:	4603      	mov	r3, r0
    700e:	f083 0301 	eor.w	r3, r3, #1
    7012:	b2db      	uxtb	r3, r3
    7014:	2b00      	cmp	r3, #0
    7016:	d020      	beq.n	705a <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    7018:	7bfa      	ldrb	r2, [r7, #15]
    701a:	493d      	ldr	r1, [pc, #244]	; (7110 <_i2c_m_sync_init_impl+0x120>)
    701c:	4613      	mov	r3, r2
    701e:	005b      	lsls	r3, r3, #1
    7020:	4413      	add	r3, r2
    7022:	00db      	lsls	r3, r3, #3
    7024:	440b      	add	r3, r1
    7026:	3304      	adds	r3, #4
    7028:	681b      	ldr	r3, [r3, #0]
    702a:	f003 031c 	and.w	r3, r3, #28
    702e:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    7030:	2102      	movs	r1, #2
    7032:	6838      	ldr	r0, [r7, #0]
    7034:	4b37      	ldr	r3, [pc, #220]	; (7114 <_i2c_m_sync_init_impl+0x124>)
    7036:	4798      	blx	r3
    7038:	4603      	mov	r3, r0
    703a:	2b00      	cmp	r3, #0
    703c:	d006      	beq.n	704c <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    703e:	6838      	ldr	r0, [r7, #0]
    7040:	4b35      	ldr	r3, [pc, #212]	; (7118 <_i2c_m_sync_init_impl+0x128>)
    7042:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    7044:	2102      	movs	r1, #2
    7046:	6838      	ldr	r0, [r7, #0]
    7048:	4b34      	ldr	r3, [pc, #208]	; (711c <_i2c_m_sync_init_impl+0x12c>)
    704a:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    704c:	68bb      	ldr	r3, [r7, #8]
    704e:	f043 0301 	orr.w	r3, r3, #1
    7052:	4619      	mov	r1, r3
    7054:	6838      	ldr	r0, [r7, #0]
    7056:	4b32      	ldr	r3, [pc, #200]	; (7120 <_i2c_m_sync_init_impl+0x130>)
    7058:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    705a:	2101      	movs	r1, #1
    705c:	6838      	ldr	r0, [r7, #0]
    705e:	4b2f      	ldr	r3, [pc, #188]	; (711c <_i2c_m_sync_init_impl+0x12c>)
    7060:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    7062:	7bfa      	ldrb	r2, [r7, #15]
    7064:	492a      	ldr	r1, [pc, #168]	; (7110 <_i2c_m_sync_init_impl+0x120>)
    7066:	4613      	mov	r3, r2
    7068:	005b      	lsls	r3, r3, #1
    706a:	4413      	add	r3, r2
    706c:	00db      	lsls	r3, r3, #3
    706e:	440b      	add	r3, r1
    7070:	3304      	adds	r3, #4
    7072:	681b      	ldr	r3, [r3, #0]
    7074:	4619      	mov	r1, r3
    7076:	6838      	ldr	r0, [r7, #0]
    7078:	4b29      	ldr	r3, [pc, #164]	; (7120 <_i2c_m_sync_init_impl+0x130>)
    707a:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    707c:	7bfa      	ldrb	r2, [r7, #15]
    707e:	4924      	ldr	r1, [pc, #144]	; (7110 <_i2c_m_sync_init_impl+0x120>)
    7080:	4613      	mov	r3, r2
    7082:	005b      	lsls	r3, r3, #1
    7084:	4413      	add	r3, r2
    7086:	00db      	lsls	r3, r3, #3
    7088:	440b      	add	r3, r1
    708a:	3308      	adds	r3, #8
    708c:	681b      	ldr	r3, [r3, #0]
    708e:	4619      	mov	r1, r3
    7090:	6838      	ldr	r0, [r7, #0]
    7092:	4b24      	ldr	r3, [pc, #144]	; (7124 <_i2c_m_sync_init_impl+0x134>)
    7094:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    7096:	7bfa      	ldrb	r2, [r7, #15]
    7098:	491d      	ldr	r1, [pc, #116]	; (7110 <_i2c_m_sync_init_impl+0x120>)
    709a:	4613      	mov	r3, r2
    709c:	005b      	lsls	r3, r3, #1
    709e:	4413      	add	r3, r2
    70a0:	00db      	lsls	r3, r3, #3
    70a2:	440b      	add	r3, r1
    70a4:	330c      	adds	r3, #12
    70a6:	681b      	ldr	r3, [r3, #0]
    70a8:	4619      	mov	r1, r3
    70aa:	6838      	ldr	r0, [r7, #0]
    70ac:	4b1e      	ldr	r3, [pc, #120]	; (7128 <_i2c_m_sync_init_impl+0x138>)
    70ae:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    70b0:	7bfa      	ldrb	r2, [r7, #15]
    70b2:	4917      	ldr	r1, [pc, #92]	; (7110 <_i2c_m_sync_init_impl+0x120>)
    70b4:	4613      	mov	r3, r2
    70b6:	005b      	lsls	r3, r3, #1
    70b8:	4413      	add	r3, r2
    70ba:	00db      	lsls	r3, r3, #3
    70bc:	440b      	add	r3, r1
    70be:	3304      	adds	r3, #4
    70c0:	681b      	ldr	r3, [r3, #0]
    70c2:	0e1b      	lsrs	r3, r3, #24
    70c4:	b29b      	uxth	r3, r3
    70c6:	f003 0303 	and.w	r3, r3, #3
    70ca:	b29a      	uxth	r2, r3
    70cc:	687b      	ldr	r3, [r7, #4]
    70ce:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    70d0:	687b      	ldr	r3, [r7, #4]
    70d2:	899b      	ldrh	r3, [r3, #12]
    70d4:	2b01      	cmp	r3, #1
    70d6:	bf8c      	ite	hi
    70d8:	2301      	movhi	r3, #1
    70da:	2300      	movls	r3, #0
    70dc:	b2db      	uxtb	r3, r3
    70de:	4619      	mov	r1, r3
    70e0:	6838      	ldr	r0, [r7, #0]
    70e2:	4b12      	ldr	r3, [pc, #72]	; (712c <_i2c_m_sync_init_impl+0x13c>)
    70e4:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    70e6:	7bfa      	ldrb	r2, [r7, #15]
    70e8:	4909      	ldr	r1, [pc, #36]	; (7110 <_i2c_m_sync_init_impl+0x120>)
    70ea:	4613      	mov	r3, r2
    70ec:	005b      	lsls	r3, r3, #1
    70ee:	4413      	add	r3, r2
    70f0:	00db      	lsls	r3, r3, #3
    70f2:	440b      	add	r3, r1
    70f4:	3312      	adds	r3, #18
    70f6:	881a      	ldrh	r2, [r3, #0]
    70f8:	687b      	ldr	r3, [r7, #4]
    70fa:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    70fc:	2300      	movs	r3, #0
}
    70fe:	4618      	mov	r0, r3
    7100:	3710      	adds	r7, #16
    7102:	46bd      	mov	sp, r7
    7104:	bd80      	pop	{r7, pc}
    7106:	bf00      	nop
    7108:	00006981 	.word	0x00006981
    710c:	0000632d 	.word	0x0000632d
    7110:	20000018 	.word	0x20000018
    7114:	000064d1 	.word	0x000064d1
    7118:	00006479 	.word	0x00006479
    711c:	00006309 	.word	0x00006309
    7120:	00006501 	.word	0x00006501
    7124:	000066d1 	.word	0x000066d1
    7128:	00006719 	.word	0x00006719
    712c:	00006755 	.word	0x00006755

00007130 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    7130:	b580      	push	{r7, lr}
    7132:	b082      	sub	sp, #8
    7134:	af00      	add	r7, sp, #0
    7136:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7138:	2101      	movs	r1, #1
    713a:	6878      	ldr	r0, [r7, #4]
    713c:	4b07      	ldr	r3, [pc, #28]	; (715c <_spi_sync_enable+0x2c>)
    713e:	4798      	blx	r3
    7140:	4603      	mov	r3, r0
    7142:	2b00      	cmp	r3, #0
    7144:	d002      	beq.n	714c <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    7146:	f06f 0303 	mvn.w	r3, #3
    714a:	e003      	b.n	7154 <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    714c:	6878      	ldr	r0, [r7, #4]
    714e:	4b04      	ldr	r3, [pc, #16]	; (7160 <_spi_sync_enable+0x30>)
    7150:	4798      	blx	r3

	return ERR_NONE;
    7152:	2300      	movs	r3, #0
}
    7154:	4618      	mov	r0, r3
    7156:	3708      	adds	r7, #8
    7158:	46bd      	mov	sp, r7
    715a:	bd80      	pop	{r7, pc}
    715c:	00006379 	.word	0x00006379
    7160:	00006525 	.word	0x00006525

00007164 <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    7164:	b580      	push	{r7, lr}
    7166:	b082      	sub	sp, #8
    7168:	af00      	add	r7, sp, #0
    716a:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    716c:	2101      	movs	r1, #1
    716e:	6878      	ldr	r0, [r7, #4]
    7170:	4b07      	ldr	r3, [pc, #28]	; (7190 <_spi_sync_disable+0x2c>)
    7172:	4798      	blx	r3
    7174:	4603      	mov	r3, r0
    7176:	2b00      	cmp	r3, #0
    7178:	d002      	beq.n	7180 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    717a:	f06f 0303 	mvn.w	r3, #3
    717e:	e003      	b.n	7188 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    7180:	6878      	ldr	r0, [r7, #4]
    7182:	4b04      	ldr	r3, [pc, #16]	; (7194 <_spi_sync_disable+0x30>)
    7184:	4798      	blx	r3

	return ERR_NONE;
    7186:	2300      	movs	r3, #0
}
    7188:	4618      	mov	r0, r3
    718a:	3708      	adds	r7, #8
    718c:	46bd      	mov	sp, r7
    718e:	bd80      	pop	{r7, pc}
    7190:	00006379 	.word	0x00006379
    7194:	00006585 	.word	0x00006585

00007198 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7198:	b580      	push	{r7, lr}
    719a:	b082      	sub	sp, #8
    719c:	af00      	add	r7, sp, #0
    719e:	6078      	str	r0, [r7, #4]
    71a0:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    71a2:	687b      	ldr	r3, [r7, #4]
    71a4:	2b00      	cmp	r3, #0
    71a6:	d004      	beq.n	71b2 <_spi_load_regs_master+0x1a>
    71a8:	683b      	ldr	r3, [r7, #0]
    71aa:	2b00      	cmp	r3, #0
    71ac:	d001      	beq.n	71b2 <_spi_load_regs_master+0x1a>
    71ae:	2301      	movs	r3, #1
    71b0:	e000      	b.n	71b4 <_spi_load_regs_master+0x1c>
    71b2:	2300      	movs	r3, #0
    71b4:	f003 0301 	and.w	r3, r3, #1
    71b8:	b2db      	uxtb	r3, r3
    71ba:	f640 1209 	movw	r2, #2313	; 0x909
    71be:	4915      	ldr	r1, [pc, #84]	; (7214 <_spi_load_regs_master+0x7c>)
    71c0:	4618      	mov	r0, r3
    71c2:	4b15      	ldr	r3, [pc, #84]	; (7218 <_spi_load_regs_master+0x80>)
    71c4:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    71c6:	683b      	ldr	r3, [r7, #0]
    71c8:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    71ca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    71ce:	f023 0301 	bic.w	r3, r3, #1
    71d2:	4619      	mov	r1, r3
    71d4:	6878      	ldr	r0, [r7, #4]
    71d6:	4b11      	ldr	r3, [pc, #68]	; (721c <_spi_load_regs_master+0x84>)
    71d8:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    71da:	683b      	ldr	r3, [r7, #0]
    71dc:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    71de:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    71e2:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    71e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    71ea:	4619      	mov	r1, r3
    71ec:	6878      	ldr	r0, [r7, #4]
    71ee:	4b0c      	ldr	r3, [pc, #48]	; (7220 <_spi_load_regs_master+0x88>)
    71f0:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    71f2:	683b      	ldr	r3, [r7, #0]
    71f4:	7b1b      	ldrb	r3, [r3, #12]
    71f6:	4619      	mov	r1, r3
    71f8:	6878      	ldr	r0, [r7, #4]
    71fa:	4b0a      	ldr	r3, [pc, #40]	; (7224 <_spi_load_regs_master+0x8c>)
    71fc:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    71fe:	683b      	ldr	r3, [r7, #0]
    7200:	7b5b      	ldrb	r3, [r3, #13]
    7202:	4619      	mov	r1, r3
    7204:	6878      	ldr	r0, [r7, #4]
    7206:	4b08      	ldr	r3, [pc, #32]	; (7228 <_spi_load_regs_master+0x90>)
    7208:	4798      	blx	r3
}
    720a:	bf00      	nop
    720c:	3708      	adds	r7, #8
    720e:	46bd      	mov	sp, r7
    7210:	bd80      	pop	{r7, pc}
    7212:	bf00      	nop
    7214:	000136a0 	.word	0x000136a0
    7218:	00003e05 	.word	0x00003e05
    721c:	000065dd 	.word	0x000065dd
    7220:	000066f5 	.word	0x000066f5
    7224:	00006735 	.word	0x00006735
    7228:	0000686d 	.word	0x0000686d

0000722c <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    722c:	b580      	push	{r7, lr}
    722e:	b082      	sub	sp, #8
    7230:	af00      	add	r7, sp, #0
    7232:	6078      	str	r0, [r7, #4]
    7234:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    7236:	687b      	ldr	r3, [r7, #4]
    7238:	2b00      	cmp	r3, #0
    723a:	d004      	beq.n	7246 <_spi_load_regs_slave+0x1a>
    723c:	683b      	ldr	r3, [r7, #0]
    723e:	2b00      	cmp	r3, #0
    7240:	d001      	beq.n	7246 <_spi_load_regs_slave+0x1a>
    7242:	2301      	movs	r3, #1
    7244:	e000      	b.n	7248 <_spi_load_regs_slave+0x1c>
    7246:	2300      	movs	r3, #0
    7248:	f003 0301 	and.w	r3, r3, #1
    724c:	b2db      	uxtb	r3, r3
    724e:	f640 121d 	movw	r2, #2333	; 0x91d
    7252:	491a      	ldr	r1, [pc, #104]	; (72bc <_spi_load_regs_slave+0x90>)
    7254:	4618      	mov	r0, r3
    7256:	4b1a      	ldr	r3, [pc, #104]	; (72c0 <_spi_load_regs_slave+0x94>)
    7258:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    725a:	683b      	ldr	r3, [r7, #0]
    725c:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    725e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7262:	f023 0301 	bic.w	r3, r3, #1
    7266:	4619      	mov	r1, r3
    7268:	6878      	ldr	r0, [r7, #4]
    726a:	4b16      	ldr	r3, [pc, #88]	; (72c4 <_spi_load_regs_slave+0x98>)
    726c:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    726e:	683b      	ldr	r3, [r7, #0]
    7270:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    7272:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    7276:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    727a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    727e:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    7282:	4619      	mov	r1, r3
    7284:	6878      	ldr	r0, [r7, #4]
    7286:	4b10      	ldr	r3, [pc, #64]	; (72c8 <_spi_load_regs_slave+0x9c>)
    7288:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    728a:	683b      	ldr	r3, [r7, #0]
    728c:	689b      	ldr	r3, [r3, #8]
    728e:	4619      	mov	r1, r3
    7290:	6878      	ldr	r0, [r7, #4]
    7292:	4b0e      	ldr	r3, [pc, #56]	; (72cc <_spi_load_regs_slave+0xa0>)
    7294:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7296:	683b      	ldr	r3, [r7, #0]
    7298:	7b5b      	ldrb	r3, [r3, #13]
    729a:	4619      	mov	r1, r3
    729c:	6878      	ldr	r0, [r7, #4]
    729e:	4b0c      	ldr	r3, [pc, #48]	; (72d0 <_spi_load_regs_slave+0xa4>)
    72a0:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    72a2:	bf00      	nop
    72a4:	f04f 31ff 	mov.w	r1, #4294967295
    72a8:	6878      	ldr	r0, [r7, #4]
    72aa:	4b0a      	ldr	r3, [pc, #40]	; (72d4 <_spi_load_regs_slave+0xa8>)
    72ac:	4798      	blx	r3
    72ae:	4603      	mov	r3, r0
    72b0:	2b00      	cmp	r3, #0
    72b2:	d1f7      	bne.n	72a4 <_spi_load_regs_slave+0x78>
		;
}
    72b4:	bf00      	nop
    72b6:	3708      	adds	r7, #8
    72b8:	46bd      	mov	sp, r7
    72ba:	bd80      	pop	{r7, pc}
    72bc:	000136a0 	.word	0x000136a0
    72c0:	00003e05 	.word	0x00003e05
    72c4:	000065dd 	.word	0x000065dd
    72c8:	000066f5 	.word	0x000066f5
    72cc:	000067d9 	.word	0x000067d9
    72d0:	0000686d 	.word	0x0000686d
    72d4:	00006379 	.word	0x00006379

000072d8 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    72d8:	b580      	push	{r7, lr}
    72da:	b084      	sub	sp, #16
    72dc:	af00      	add	r7, sp, #0
    72de:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    72e0:	687b      	ldr	r3, [r7, #4]
    72e2:	4618      	mov	r0, r3
    72e4:	4b11      	ldr	r3, [pc, #68]	; (732c <_spi_get_regs+0x54>)
    72e6:	4798      	blx	r3
    72e8:	4603      	mov	r3, r0
    72ea:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    72ec:	2300      	movs	r3, #0
    72ee:	73fb      	strb	r3, [r7, #15]
    72f0:	e014      	b.n	731c <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    72f2:	7bfa      	ldrb	r2, [r7, #15]
    72f4:	490e      	ldr	r1, [pc, #56]	; (7330 <_spi_get_regs+0x58>)
    72f6:	4613      	mov	r3, r2
    72f8:	011b      	lsls	r3, r3, #4
    72fa:	4413      	add	r3, r2
    72fc:	440b      	add	r3, r1
    72fe:	3310      	adds	r3, #16
    7300:	781b      	ldrb	r3, [r3, #0]
    7302:	7bba      	ldrb	r2, [r7, #14]
    7304:	429a      	cmp	r2, r3
    7306:	d106      	bne.n	7316 <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    7308:	7bfa      	ldrb	r2, [r7, #15]
    730a:	4613      	mov	r3, r2
    730c:	011b      	lsls	r3, r3, #4
    730e:	4413      	add	r3, r2
    7310:	4a07      	ldr	r2, [pc, #28]	; (7330 <_spi_get_regs+0x58>)
    7312:	4413      	add	r3, r2
    7314:	e006      	b.n	7324 <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7316:	7bfb      	ldrb	r3, [r7, #15]
    7318:	3301      	adds	r3, #1
    731a:	73fb      	strb	r3, [r7, #15]
    731c:	7bfb      	ldrb	r3, [r7, #15]
    731e:	2b01      	cmp	r3, #1
    7320:	d9e7      	bls.n	72f2 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    7322:	2300      	movs	r3, #0
}
    7324:	4618      	mov	r0, r3
    7326:	3710      	adds	r7, #16
    7328:	46bd      	mov	sp, r7
    732a:	bd80      	pop	{r7, pc}
    732c:	00006925 	.word	0x00006925
    7330:	000136dc 	.word	0x000136dc

00007334 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    7334:	b580      	push	{r7, lr}
    7336:	b084      	sub	sp, #16
    7338:	af00      	add	r7, sp, #0
    733a:	6078      	str	r0, [r7, #4]
    733c:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    733e:	683b      	ldr	r3, [r7, #0]
    7340:	4618      	mov	r0, r3
    7342:	4b35      	ldr	r3, [pc, #212]	; (7418 <_spi_m_sync_init+0xe4>)
    7344:	4798      	blx	r3
    7346:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    7348:	687b      	ldr	r3, [r7, #4]
    734a:	2b00      	cmp	r3, #0
    734c:	d004      	beq.n	7358 <_spi_m_sync_init+0x24>
    734e:	683b      	ldr	r3, [r7, #0]
    7350:	2b00      	cmp	r3, #0
    7352:	d001      	beq.n	7358 <_spi_m_sync_init+0x24>
    7354:	2301      	movs	r3, #1
    7356:	e000      	b.n	735a <_spi_m_sync_init+0x26>
    7358:	2300      	movs	r3, #0
    735a:	f003 0301 	and.w	r3, r3, #1
    735e:	b2db      	uxtb	r3, r3
    7360:	f640 123f 	movw	r2, #2367	; 0x93f
    7364:	492d      	ldr	r1, [pc, #180]	; (741c <_spi_m_sync_init+0xe8>)
    7366:	4618      	mov	r0, r3
    7368:	4b2d      	ldr	r3, [pc, #180]	; (7420 <_spi_m_sync_init+0xec>)
    736a:	4798      	blx	r3

	if (regs == NULL) {
    736c:	68fb      	ldr	r3, [r7, #12]
    736e:	2b00      	cmp	r3, #0
    7370:	d102      	bne.n	7378 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    7372:	f06f 030c 	mvn.w	r3, #12
    7376:	e04a      	b.n	740e <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    7378:	2101      	movs	r1, #1
    737a:	6838      	ldr	r0, [r7, #0]
    737c:	4b29      	ldr	r3, [pc, #164]	; (7424 <_spi_m_sync_init+0xf0>)
    737e:	4798      	blx	r3
    7380:	4603      	mov	r3, r0
    7382:	f083 0301 	eor.w	r3, r3, #1
    7386:	b2db      	uxtb	r3, r3
    7388:	2b00      	cmp	r3, #0
    738a:	d019      	beq.n	73c0 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    738c:	68fb      	ldr	r3, [r7, #12]
    738e:	681b      	ldr	r3, [r3, #0]
    7390:	f003 031c 	and.w	r3, r3, #28
    7394:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    7396:	2102      	movs	r1, #2
    7398:	6838      	ldr	r0, [r7, #0]
    739a:	4b23      	ldr	r3, [pc, #140]	; (7428 <_spi_m_sync_init+0xf4>)
    739c:	4798      	blx	r3
    739e:	4603      	mov	r3, r0
    73a0:	2b00      	cmp	r3, #0
    73a2:	d006      	beq.n	73b2 <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    73a4:	6838      	ldr	r0, [r7, #0]
    73a6:	4b21      	ldr	r3, [pc, #132]	; (742c <_spi_m_sync_init+0xf8>)
    73a8:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    73aa:	2102      	movs	r1, #2
    73ac:	6838      	ldr	r0, [r7, #0]
    73ae:	4b20      	ldr	r3, [pc, #128]	; (7430 <_spi_m_sync_init+0xfc>)
    73b0:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    73b2:	68bb      	ldr	r3, [r7, #8]
    73b4:	f043 0301 	orr.w	r3, r3, #1
    73b8:	4619      	mov	r1, r3
    73ba:	6838      	ldr	r0, [r7, #0]
    73bc:	4b1d      	ldr	r3, [pc, #116]	; (7434 <_spi_m_sync_init+0x100>)
    73be:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    73c0:	2101      	movs	r1, #1
    73c2:	6838      	ldr	r0, [r7, #0]
    73c4:	4b1a      	ldr	r3, [pc, #104]	; (7430 <_spi_m_sync_init+0xfc>)
    73c6:	4798      	blx	r3

	dev->prvt = hw;
    73c8:	687b      	ldr	r3, [r7, #4]
    73ca:	683a      	ldr	r2, [r7, #0]
    73cc:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    73ce:	68fb      	ldr	r3, [r7, #12]
    73d0:	681b      	ldr	r3, [r3, #0]
    73d2:	f003 031c 	and.w	r3, r3, #28
    73d6:	2b08      	cmp	r3, #8
    73d8:	d104      	bne.n	73e4 <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    73da:	68f9      	ldr	r1, [r7, #12]
    73dc:	6838      	ldr	r0, [r7, #0]
    73de:	4b16      	ldr	r3, [pc, #88]	; (7438 <_spi_m_sync_init+0x104>)
    73e0:	4798      	blx	r3
    73e2:	e003      	b.n	73ec <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    73e4:	68f9      	ldr	r1, [r7, #12]
    73e6:	6838      	ldr	r0, [r7, #0]
    73e8:	4b14      	ldr	r3, [pc, #80]	; (743c <_spi_m_sync_init+0x108>)
    73ea:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    73ec:	68fb      	ldr	r3, [r7, #12]
    73ee:	685b      	ldr	r3, [r3, #4]
    73f0:	f003 0307 	and.w	r3, r3, #7
    73f4:	2b00      	cmp	r3, #0
    73f6:	d101      	bne.n	73fc <_spi_m_sync_init+0xc8>
    73f8:	2201      	movs	r2, #1
    73fa:	e000      	b.n	73fe <_spi_m_sync_init+0xca>
    73fc:	2202      	movs	r2, #2
    73fe:	687b      	ldr	r3, [r7, #4]
    7400:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    7402:	68fb      	ldr	r3, [r7, #12]
    7404:	89db      	ldrh	r3, [r3, #14]
    7406:	b29a      	uxth	r2, r3
    7408:	687b      	ldr	r3, [r7, #4]
    740a:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    740c:	2300      	movs	r3, #0
}
    740e:	4618      	mov	r0, r3
    7410:	3710      	adds	r7, #16
    7412:	46bd      	mov	sp, r7
    7414:	bd80      	pop	{r7, pc}
    7416:	bf00      	nop
    7418:	000072d9 	.word	0x000072d9
    741c:	000136a0 	.word	0x000136a0
    7420:	00003e05 	.word	0x00003e05
    7424:	00006379 	.word	0x00006379
    7428:	000065ad 	.word	0x000065ad
    742c:	00006585 	.word	0x00006585
    7430:	00006355 	.word	0x00006355
    7434:	000065dd 	.word	0x000065dd
    7438:	0000722d 	.word	0x0000722d
    743c:	00007199 	.word	0x00007199

00007440 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    7440:	b580      	push	{r7, lr}
    7442:	b082      	sub	sp, #8
    7444:	af00      	add	r7, sp, #0
    7446:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7448:	687b      	ldr	r3, [r7, #4]
    744a:	2b00      	cmp	r3, #0
    744c:	d005      	beq.n	745a <_spi_m_sync_enable+0x1a>
    744e:	687b      	ldr	r3, [r7, #4]
    7450:	681b      	ldr	r3, [r3, #0]
    7452:	2b00      	cmp	r3, #0
    7454:	d001      	beq.n	745a <_spi_m_sync_enable+0x1a>
    7456:	2301      	movs	r3, #1
    7458:	e000      	b.n	745c <_spi_m_sync_enable+0x1c>
    745a:	2300      	movs	r3, #0
    745c:	f003 0301 	and.w	r3, r3, #1
    7460:	b2db      	uxtb	r3, r3
    7462:	f640 129e 	movw	r2, #2462	; 0x99e
    7466:	4907      	ldr	r1, [pc, #28]	; (7484 <_spi_m_sync_enable+0x44>)
    7468:	4618      	mov	r0, r3
    746a:	4b07      	ldr	r3, [pc, #28]	; (7488 <_spi_m_sync_enable+0x48>)
    746c:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    746e:	687b      	ldr	r3, [r7, #4]
    7470:	681b      	ldr	r3, [r3, #0]
    7472:	4618      	mov	r0, r3
    7474:	4b05      	ldr	r3, [pc, #20]	; (748c <_spi_m_sync_enable+0x4c>)
    7476:	4798      	blx	r3
    7478:	4603      	mov	r3, r0
}
    747a:	4618      	mov	r0, r3
    747c:	3708      	adds	r7, #8
    747e:	46bd      	mov	sp, r7
    7480:	bd80      	pop	{r7, pc}
    7482:	bf00      	nop
    7484:	000136a0 	.word	0x000136a0
    7488:	00003e05 	.word	0x00003e05
    748c:	00007131 	.word	0x00007131

00007490 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    7490:	b580      	push	{r7, lr}
    7492:	b082      	sub	sp, #8
    7494:	af00      	add	r7, sp, #0
    7496:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7498:	687b      	ldr	r3, [r7, #4]
    749a:	2b00      	cmp	r3, #0
    749c:	d005      	beq.n	74aa <_spi_m_sync_disable+0x1a>
    749e:	687b      	ldr	r3, [r7, #4]
    74a0:	681b      	ldr	r3, [r3, #0]
    74a2:	2b00      	cmp	r3, #0
    74a4:	d001      	beq.n	74aa <_spi_m_sync_disable+0x1a>
    74a6:	2301      	movs	r3, #1
    74a8:	e000      	b.n	74ac <_spi_m_sync_disable+0x1c>
    74aa:	2300      	movs	r3, #0
    74ac:	f003 0301 	and.w	r3, r3, #1
    74b0:	b2db      	uxtb	r3, r3
    74b2:	f640 12ba 	movw	r2, #2490	; 0x9ba
    74b6:	4907      	ldr	r1, [pc, #28]	; (74d4 <_spi_m_sync_disable+0x44>)
    74b8:	4618      	mov	r0, r3
    74ba:	4b07      	ldr	r3, [pc, #28]	; (74d8 <_spi_m_sync_disable+0x48>)
    74bc:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    74be:	687b      	ldr	r3, [r7, #4]
    74c0:	681b      	ldr	r3, [r3, #0]
    74c2:	4618      	mov	r0, r3
    74c4:	4b05      	ldr	r3, [pc, #20]	; (74dc <_spi_m_sync_disable+0x4c>)
    74c6:	4798      	blx	r3
    74c8:	4603      	mov	r3, r0
}
    74ca:	4618      	mov	r0, r3
    74cc:	3708      	adds	r7, #8
    74ce:	46bd      	mov	sp, r7
    74d0:	bd80      	pop	{r7, pc}
    74d2:	bf00      	nop
    74d4:	000136a0 	.word	0x000136a0
    74d8:	00003e05 	.word	0x00003e05
    74dc:	00007165 	.word	0x00007165

000074e0 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    74e0:	b580      	push	{r7, lr}
    74e2:	b082      	sub	sp, #8
    74e4:	af00      	add	r7, sp, #0
    74e6:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    74e8:	bf00      	nop
    74ea:	2103      	movs	r1, #3
    74ec:	6878      	ldr	r0, [r7, #4]
    74ee:	4b06      	ldr	r3, [pc, #24]	; (7508 <_spi_wait_bus_idle+0x28>)
    74f0:	4798      	blx	r3
    74f2:	4603      	mov	r3, r0
    74f4:	2b00      	cmp	r3, #0
    74f6:	d0f8      	beq.n	74ea <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    74f8:	2103      	movs	r1, #3
    74fa:	6878      	ldr	r0, [r7, #4]
    74fc:	4b03      	ldr	r3, [pc, #12]	; (750c <_spi_wait_bus_idle+0x2c>)
    74fe:	4798      	blx	r3
}
    7500:	bf00      	nop
    7502:	3708      	adds	r7, #8
    7504:	46bd      	mov	sp, r7
    7506:	bd80      	pop	{r7, pc}
    7508:	000063ef 	.word	0x000063ef
    750c:	00006431 	.word	0x00006431

00007510 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    7510:	b580      	push	{r7, lr}
    7512:	b086      	sub	sp, #24
    7514:	af00      	add	r7, sp, #0
    7516:	60f8      	str	r0, [r7, #12]
    7518:	60b9      	str	r1, [r7, #8]
    751a:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    751c:	68bb      	ldr	r3, [r7, #8]
    751e:	f003 0304 	and.w	r3, r3, #4
    7522:	2b00      	cmp	r3, #0
    7524:	d101      	bne.n	752a <_spi_rx_check_and_receive+0x1a>
		return false;
    7526:	2300      	movs	r3, #0
    7528:	e022      	b.n	7570 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    752a:	68f8      	ldr	r0, [r7, #12]
    752c:	4b12      	ldr	r3, [pc, #72]	; (7578 <_spi_rx_check_and_receive+0x68>)
    752e:	4798      	blx	r3
    7530:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    7532:	687b      	ldr	r3, [r7, #4]
    7534:	685b      	ldr	r3, [r3, #4]
    7536:	2b00      	cmp	r3, #0
    7538:	d014      	beq.n	7564 <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    753a:	687b      	ldr	r3, [r7, #4]
    753c:	685b      	ldr	r3, [r3, #4]
    753e:	1c59      	adds	r1, r3, #1
    7540:	687a      	ldr	r2, [r7, #4]
    7542:	6051      	str	r1, [r2, #4]
    7544:	697a      	ldr	r2, [r7, #20]
    7546:	b2d2      	uxtb	r2, r2
    7548:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    754a:	687b      	ldr	r3, [r7, #4]
    754c:	7c1b      	ldrb	r3, [r3, #16]
    754e:	2b01      	cmp	r3, #1
    7550:	d908      	bls.n	7564 <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    7552:	687b      	ldr	r3, [r7, #4]
    7554:	685b      	ldr	r3, [r3, #4]
    7556:	1c59      	adds	r1, r3, #1
    7558:	687a      	ldr	r2, [r7, #4]
    755a:	6051      	str	r1, [r2, #4]
    755c:	697a      	ldr	r2, [r7, #20]
    755e:	0a12      	lsrs	r2, r2, #8
    7560:	b2d2      	uxtb	r2, r2
    7562:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    7564:	687b      	ldr	r3, [r7, #4]
    7566:	68db      	ldr	r3, [r3, #12]
    7568:	1c5a      	adds	r2, r3, #1
    756a:	687b      	ldr	r3, [r7, #4]
    756c:	60da      	str	r2, [r3, #12]

	return true;
    756e:	2301      	movs	r3, #1
}
    7570:	4618      	mov	r0, r3
    7572:	3718      	adds	r7, #24
    7574:	46bd      	mov	sp, r7
    7576:	bd80      	pop	{r7, pc}
    7578:	00006855 	.word	0x00006855

0000757c <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    757c:	b580      	push	{r7, lr}
    757e:	b086      	sub	sp, #24
    7580:	af00      	add	r7, sp, #0
    7582:	60f8      	str	r0, [r7, #12]
    7584:	60b9      	str	r1, [r7, #8]
    7586:	607a      	str	r2, [r7, #4]
    7588:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    758a:	68bb      	ldr	r3, [r7, #8]
    758c:	f003 0301 	and.w	r3, r3, #1
    7590:	2b00      	cmp	r3, #0
    7592:	d028      	beq.n	75e6 <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    7594:	687b      	ldr	r3, [r7, #4]
    7596:	681b      	ldr	r3, [r3, #0]
    7598:	2b00      	cmp	r3, #0
    759a:	d018      	beq.n	75ce <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    759c:	687b      	ldr	r3, [r7, #4]
    759e:	681b      	ldr	r3, [r3, #0]
    75a0:	1c59      	adds	r1, r3, #1
    75a2:	687a      	ldr	r2, [r7, #4]
    75a4:	6011      	str	r1, [r2, #0]
    75a6:	781b      	ldrb	r3, [r3, #0]
    75a8:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    75aa:	687b      	ldr	r3, [r7, #4]
    75ac:	7c1b      	ldrb	r3, [r3, #16]
    75ae:	2b01      	cmp	r3, #1
    75b0:	d90f      	bls.n	75d2 <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    75b2:	687b      	ldr	r3, [r7, #4]
    75b4:	681b      	ldr	r3, [r3, #0]
    75b6:	781b      	ldrb	r3, [r3, #0]
    75b8:	021b      	lsls	r3, r3, #8
    75ba:	461a      	mov	r2, r3
    75bc:	697b      	ldr	r3, [r7, #20]
    75be:	4313      	orrs	r3, r2
    75c0:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    75c2:	687b      	ldr	r3, [r7, #4]
    75c4:	681b      	ldr	r3, [r3, #0]
    75c6:	1c5a      	adds	r2, r3, #1
    75c8:	687b      	ldr	r3, [r7, #4]
    75ca:	601a      	str	r2, [r3, #0]
    75cc:	e001      	b.n	75d2 <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    75ce:	887b      	ldrh	r3, [r7, #2]
    75d0:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    75d2:	687b      	ldr	r3, [r7, #4]
    75d4:	689b      	ldr	r3, [r3, #8]
    75d6:	1c5a      	adds	r2, r3, #1
    75d8:	687b      	ldr	r3, [r7, #4]
    75da:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    75dc:	6979      	ldr	r1, [r7, #20]
    75de:	68f8      	ldr	r0, [r7, #12]
    75e0:	4b03      	ldr	r3, [pc, #12]	; (75f0 <_spi_tx_check_and_send+0x74>)
    75e2:	4798      	blx	r3
    75e4:	e000      	b.n	75e8 <_spi_tx_check_and_send+0x6c>
		return;
    75e6:	bf00      	nop
}
    75e8:	3718      	adds	r7, #24
    75ea:	46bd      	mov	sp, r7
    75ec:	bd80      	pop	{r7, pc}
    75ee:	bf00      	nop
    75f0:	00006839 	.word	0x00006839

000075f4 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    75f4:	b580      	push	{r7, lr}
    75f6:	b082      	sub	sp, #8
    75f8:	af00      	add	r7, sp, #0
    75fa:	6078      	str	r0, [r7, #4]
    75fc:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    75fe:	687b      	ldr	r3, [r7, #4]
    7600:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7604:	2b00      	cmp	r3, #0
    7606:	d00b      	beq.n	7620 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    7608:	f64f 71ff 	movw	r1, #65535	; 0xffff
    760c:	6838      	ldr	r0, [r7, #0]
    760e:	4b07      	ldr	r3, [pc, #28]	; (762c <_spi_err_check+0x38>)
    7610:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    7612:	2180      	movs	r1, #128	; 0x80
    7614:	6838      	ldr	r0, [r7, #0]
    7616:	4b06      	ldr	r3, [pc, #24]	; (7630 <_spi_err_check+0x3c>)
    7618:	4798      	blx	r3
		return ERR_OVERFLOW;
    761a:	f06f 0312 	mvn.w	r3, #18
    761e:	e000      	b.n	7622 <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    7620:	2300      	movs	r3, #0
}
    7622:	4618      	mov	r0, r3
    7624:	3708      	adds	r7, #8
    7626:	46bd      	mov	sp, r7
    7628:	bd80      	pop	{r7, pc}
    762a:	bf00      	nop
    762c:	0000688d 	.word	0x0000688d
    7630:	00006431 	.word	0x00006431

00007634 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    7634:	b590      	push	{r4, r7, lr}
    7636:	b08b      	sub	sp, #44	; 0x2c
    7638:	af00      	add	r7, sp, #0
    763a:	6078      	str	r0, [r7, #4]
    763c:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    763e:	687b      	ldr	r3, [r7, #4]
    7640:	681b      	ldr	r3, [r3, #0]
    7642:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    7644:	2300      	movs	r3, #0
    7646:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    7648:	683b      	ldr	r3, [r7, #0]
    764a:	681b      	ldr	r3, [r3, #0]
    764c:	60bb      	str	r3, [r7, #8]
    764e:	683b      	ldr	r3, [r7, #0]
    7650:	685b      	ldr	r3, [r3, #4]
    7652:	60fb      	str	r3, [r7, #12]
    7654:	2300      	movs	r3, #0
    7656:	613b      	str	r3, [r7, #16]
    7658:	2300      	movs	r3, #0
    765a:	617b      	str	r3, [r7, #20]
    765c:	687b      	ldr	r3, [r7, #4]
    765e:	791b      	ldrb	r3, [r3, #4]
    7660:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    7662:	687b      	ldr	r3, [r7, #4]
    7664:	2b00      	cmp	r3, #0
    7666:	d004      	beq.n	7672 <_spi_m_sync_trans+0x3e>
    7668:	6a3b      	ldr	r3, [r7, #32]
    766a:	2b00      	cmp	r3, #0
    766c:	d001      	beq.n	7672 <_spi_m_sync_trans+0x3e>
    766e:	2301      	movs	r3, #1
    7670:	e000      	b.n	7674 <_spi_m_sync_trans+0x40>
    7672:	2300      	movs	r3, #0
    7674:	f003 0301 	and.w	r3, r3, #1
    7678:	b2db      	uxtb	r3, r3
    767a:	f640 22a3 	movw	r2, #2723	; 0xaa3
    767e:	492b      	ldr	r1, [pc, #172]	; (772c <_spi_m_sync_trans+0xf8>)
    7680:	4618      	mov	r0, r3
    7682:	4b2b      	ldr	r3, [pc, #172]	; (7730 <_spi_m_sync_trans+0xfc>)
    7684:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    7686:	2107      	movs	r1, #7
    7688:	6a38      	ldr	r0, [r7, #32]
    768a:	4b2a      	ldr	r3, [pc, #168]	; (7734 <_spi_m_sync_trans+0x100>)
    768c:	4798      	blx	r3
    768e:	4603      	mov	r3, r0
    7690:	2b00      	cmp	r3, #0
    7692:	d002      	beq.n	769a <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    7694:	f06f 0303 	mvn.w	r3, #3
    7698:	e043      	b.n	7722 <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    769a:	6a38      	ldr	r0, [r7, #32]
    769c:	4b26      	ldr	r3, [pc, #152]	; (7738 <_spi_m_sync_trans+0x104>)
    769e:	4798      	blx	r3
    76a0:	4603      	mov	r3, r0
    76a2:	f083 0301 	eor.w	r3, r3, #1
    76a6:	b2db      	uxtb	r3, r3
    76a8:	2b00      	cmp	r3, #0
    76aa:	d002      	beq.n	76b2 <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    76ac:	f06f 0313 	mvn.w	r3, #19
    76b0:	e037      	b.n	7722 <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    76b2:	6a38      	ldr	r0, [r7, #32]
    76b4:	4b21      	ldr	r3, [pc, #132]	; (773c <_spi_m_sync_trans+0x108>)
    76b6:	4798      	blx	r3
    76b8:	4603      	mov	r3, r0
    76ba:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    76bc:	f107 0308 	add.w	r3, r7, #8
    76c0:	461a      	mov	r2, r3
    76c2:	69f9      	ldr	r1, [r7, #28]
    76c4:	6a38      	ldr	r0, [r7, #32]
    76c6:	4b1e      	ldr	r3, [pc, #120]	; (7740 <_spi_m_sync_trans+0x10c>)
    76c8:	4798      	blx	r3
    76ca:	4603      	mov	r3, r0
    76cc:	f083 0301 	eor.w	r3, r3, #1
    76d0:	b2db      	uxtb	r3, r3
    76d2:	2b00      	cmp	r3, #0
    76d4:	d00b      	beq.n	76ee <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    76d6:	697a      	ldr	r2, [r7, #20]
    76d8:	693b      	ldr	r3, [r7, #16]
    76da:	429a      	cmp	r2, r3
    76dc:	d307      	bcc.n	76ee <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    76de:	687b      	ldr	r3, [r7, #4]
    76e0:	88db      	ldrh	r3, [r3, #6]
    76e2:	f107 0208 	add.w	r2, r7, #8
    76e6:	69f9      	ldr	r1, [r7, #28]
    76e8:	6a38      	ldr	r0, [r7, #32]
    76ea:	4c16      	ldr	r4, [pc, #88]	; (7744 <_spi_m_sync_trans+0x110>)
    76ec:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    76ee:	6a39      	ldr	r1, [r7, #32]
    76f0:	69f8      	ldr	r0, [r7, #28]
    76f2:	4b15      	ldr	r3, [pc, #84]	; (7748 <_spi_m_sync_trans+0x114>)
    76f4:	4798      	blx	r3
    76f6:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    76f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    76fa:	2b00      	cmp	r3, #0
    76fc:	db0c      	blt.n	7718 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    76fe:	693a      	ldr	r2, [r7, #16]
    7700:	683b      	ldr	r3, [r7, #0]
    7702:	689b      	ldr	r3, [r3, #8]
    7704:	429a      	cmp	r2, r3
    7706:	d3d4      	bcc.n	76b2 <_spi_m_sync_trans+0x7e>
    7708:	697a      	ldr	r2, [r7, #20]
    770a:	683b      	ldr	r3, [r7, #0]
    770c:	689b      	ldr	r3, [r3, #8]
    770e:	429a      	cmp	r2, r3
    7710:	d3cf      	bcc.n	76b2 <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    7712:	693b      	ldr	r3, [r7, #16]
    7714:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    7716:	e000      	b.n	771a <_spi_m_sync_trans+0xe6>
			break;
    7718:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    771a:	6a38      	ldr	r0, [r7, #32]
    771c:	4b0b      	ldr	r3, [pc, #44]	; (774c <_spi_m_sync_trans+0x118>)
    771e:	4798      	blx	r3

	return rc;
    7720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7722:	4618      	mov	r0, r3
    7724:	372c      	adds	r7, #44	; 0x2c
    7726:	46bd      	mov	sp, r7
    7728:	bd90      	pop	{r4, r7, pc}
    772a:	bf00      	nop
    772c:	000136a0 	.word	0x000136a0
    7730:	00003e05 	.word	0x00003e05
    7734:	00006379 	.word	0x00006379
    7738:	0000654d 	.word	0x0000654d
    773c:	00006417 	.word	0x00006417
    7740:	00007511 	.word	0x00007511
    7744:	0000757d 	.word	0x0000757d
    7748:	000075f5 	.word	0x000075f5
    774c:	000074e1 	.word	0x000074e1

00007750 <__NVIC_EnableIRQ>:
{
    7750:	b480      	push	{r7}
    7752:	b083      	sub	sp, #12
    7754:	af00      	add	r7, sp, #0
    7756:	4603      	mov	r3, r0
    7758:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    775a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    775e:	2b00      	cmp	r3, #0
    7760:	db0b      	blt.n	777a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7762:	4909      	ldr	r1, [pc, #36]	; (7788 <__NVIC_EnableIRQ+0x38>)
    7764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7768:	095b      	lsrs	r3, r3, #5
    776a:	88fa      	ldrh	r2, [r7, #6]
    776c:	f002 021f 	and.w	r2, r2, #31
    7770:	2001      	movs	r0, #1
    7772:	fa00 f202 	lsl.w	r2, r0, r2
    7776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    777a:	bf00      	nop
    777c:	370c      	adds	r7, #12
    777e:	46bd      	mov	sp, r7
    7780:	f85d 7b04 	ldr.w	r7, [sp], #4
    7784:	4770      	bx	lr
    7786:	bf00      	nop
    7788:	e000e100 	.word	0xe000e100

0000778c <__NVIC_DisableIRQ>:
{
    778c:	b480      	push	{r7}
    778e:	b083      	sub	sp, #12
    7790:	af00      	add	r7, sp, #0
    7792:	4603      	mov	r3, r0
    7794:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    779a:	2b00      	cmp	r3, #0
    779c:	db10      	blt.n	77c0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    779e:	490b      	ldr	r1, [pc, #44]	; (77cc <__NVIC_DisableIRQ+0x40>)
    77a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    77a4:	095b      	lsrs	r3, r3, #5
    77a6:	88fa      	ldrh	r2, [r7, #6]
    77a8:	f002 021f 	and.w	r2, r2, #31
    77ac:	2001      	movs	r0, #1
    77ae:	fa00 f202 	lsl.w	r2, r0, r2
    77b2:	3320      	adds	r3, #32
    77b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    77b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    77bc:	f3bf 8f6f 	isb	sy
}
    77c0:	bf00      	nop
    77c2:	370c      	adds	r7, #12
    77c4:	46bd      	mov	sp, r7
    77c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    77ca:	4770      	bx	lr
    77cc:	e000e100 	.word	0xe000e100

000077d0 <__NVIC_ClearPendingIRQ>:
{
    77d0:	b480      	push	{r7}
    77d2:	b083      	sub	sp, #12
    77d4:	af00      	add	r7, sp, #0
    77d6:	4603      	mov	r3, r0
    77d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    77da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    77de:	2b00      	cmp	r3, #0
    77e0:	db0c      	blt.n	77fc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    77e2:	4909      	ldr	r1, [pc, #36]	; (7808 <__NVIC_ClearPendingIRQ+0x38>)
    77e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    77e8:	095b      	lsrs	r3, r3, #5
    77ea:	88fa      	ldrh	r2, [r7, #6]
    77ec:	f002 021f 	and.w	r2, r2, #31
    77f0:	2001      	movs	r0, #1
    77f2:	fa00 f202 	lsl.w	r2, r0, r2
    77f6:	3360      	adds	r3, #96	; 0x60
    77f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    77fc:	bf00      	nop
    77fe:	370c      	adds	r7, #12
    7800:	46bd      	mov	sp, r7
    7802:	f85d 7b04 	ldr.w	r7, [sp], #4
    7806:	4770      	bx	lr
    7808:	e000e100 	.word	0xe000e100

0000780c <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    780c:	b480      	push	{r7}
    780e:	b083      	sub	sp, #12
    7810:	af00      	add	r7, sp, #0
    7812:	6078      	str	r0, [r7, #4]
    7814:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7816:	bf00      	nop
    7818:	687b      	ldr	r3, [r7, #4]
    781a:	689a      	ldr	r2, [r3, #8]
    781c:	683b      	ldr	r3, [r7, #0]
    781e:	4013      	ands	r3, r2
    7820:	2b00      	cmp	r3, #0
    7822:	d1f9      	bne.n	7818 <hri_tcc_wait_for_sync+0xc>
	};
}
    7824:	bf00      	nop
    7826:	370c      	adds	r7, #12
    7828:	46bd      	mov	sp, r7
    782a:	f85d 7b04 	ldr.w	r7, [sp], #4
    782e:	4770      	bx	lr

00007830 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7830:	b480      	push	{r7}
    7832:	b083      	sub	sp, #12
    7834:	af00      	add	r7, sp, #0
    7836:	6078      	str	r0, [r7, #4]
    7838:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    783a:	687b      	ldr	r3, [r7, #4]
    783c:	689a      	ldr	r2, [r3, #8]
    783e:	683b      	ldr	r3, [r7, #0]
    7840:	4013      	ands	r3, r2
    7842:	2b00      	cmp	r3, #0
    7844:	bf14      	ite	ne
    7846:	2301      	movne	r3, #1
    7848:	2300      	moveq	r3, #0
    784a:	b2db      	uxtb	r3, r3
}
    784c:	4618      	mov	r0, r3
    784e:	370c      	adds	r7, #12
    7850:	46bd      	mov	sp, r7
    7852:	f85d 7b04 	ldr.w	r7, [sp], #4
    7856:	4770      	bx	lr

00007858 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7858:	b480      	push	{r7}
    785a:	b083      	sub	sp, #12
    785c:	af00      	add	r7, sp, #0
    785e:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7860:	687b      	ldr	r3, [r7, #4]
    7862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7864:	f003 0301 	and.w	r3, r3, #1
    7868:	2b00      	cmp	r3, #0
    786a:	bf14      	ite	ne
    786c:	2301      	movne	r3, #1
    786e:	2300      	moveq	r3, #0
    7870:	b2db      	uxtb	r3, r3
}
    7872:	4618      	mov	r0, r3
    7874:	370c      	adds	r7, #12
    7876:	46bd      	mov	sp, r7
    7878:	f85d 7b04 	ldr.w	r7, [sp], #4
    787c:	4770      	bx	lr

0000787e <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    787e:	b480      	push	{r7}
    7880:	b083      	sub	sp, #12
    7882:	af00      	add	r7, sp, #0
    7884:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7886:	687b      	ldr	r3, [r7, #4]
    7888:	2201      	movs	r2, #1
    788a:	62da      	str	r2, [r3, #44]	; 0x2c
}
    788c:	bf00      	nop
    788e:	370c      	adds	r7, #12
    7890:	46bd      	mov	sp, r7
    7892:	f85d 7b04 	ldr.w	r7, [sp], #4
    7896:	4770      	bx	lr

00007898 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7898:	b480      	push	{r7}
    789a:	b083      	sub	sp, #12
    789c:	af00      	add	r7, sp, #0
    789e:	6078      	str	r0, [r7, #4]
    78a0:	460b      	mov	r3, r1
    78a2:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    78a4:	687b      	ldr	r3, [r7, #4]
    78a6:	78fa      	ldrb	r2, [r7, #3]
    78a8:	715a      	strb	r2, [r3, #5]
}
    78aa:	bf00      	nop
    78ac:	370c      	adds	r7, #12
    78ae:	46bd      	mov	sp, r7
    78b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    78b4:	4770      	bx	lr

000078b6 <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    78b6:	b480      	push	{r7}
    78b8:	b083      	sub	sp, #12
    78ba:	af00      	add	r7, sp, #0
    78bc:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    78be:	687b      	ldr	r3, [r7, #4]
    78c0:	2201      	movs	r2, #1
    78c2:	629a      	str	r2, [r3, #40]	; 0x28
}
    78c4:	bf00      	nop
    78c6:	370c      	adds	r7, #12
    78c8:	46bd      	mov	sp, r7
    78ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    78ce:	4770      	bx	lr

000078d0 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    78d0:	b580      	push	{r7, lr}
    78d2:	b082      	sub	sp, #8
    78d4:	af00      	add	r7, sp, #0
    78d6:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    78d8:	687b      	ldr	r3, [r7, #4]
    78da:	681b      	ldr	r3, [r3, #0]
    78dc:	f043 0201 	orr.w	r2, r3, #1
    78e0:	687b      	ldr	r3, [r7, #4]
    78e2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    78e4:	2101      	movs	r1, #1
    78e6:	6878      	ldr	r0, [r7, #4]
    78e8:	4b02      	ldr	r3, [pc, #8]	; (78f4 <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    78ea:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    78ec:	bf00      	nop
    78ee:	3708      	adds	r7, #8
    78f0:	46bd      	mov	sp, r7
    78f2:	bd80      	pop	{r7, pc}
    78f4:	0000780d 	.word	0x0000780d

000078f8 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    78f8:	b580      	push	{r7, lr}
    78fa:	b082      	sub	sp, #8
    78fc:	af00      	add	r7, sp, #0
    78fe:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7900:	687b      	ldr	r3, [r7, #4]
    7902:	681b      	ldr	r3, [r3, #0]
    7904:	f043 0202 	orr.w	r2, r3, #2
    7908:	687b      	ldr	r3, [r7, #4]
    790a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    790c:	2103      	movs	r1, #3
    790e:	6878      	ldr	r0, [r7, #4]
    7910:	4b02      	ldr	r3, [pc, #8]	; (791c <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    7912:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7914:	bf00      	nop
    7916:	3708      	adds	r7, #8
    7918:	46bd      	mov	sp, r7
    791a:	bd80      	pop	{r7, pc}
    791c:	0000780d 	.word	0x0000780d

00007920 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7920:	b580      	push	{r7, lr}
    7922:	b084      	sub	sp, #16
    7924:	af00      	add	r7, sp, #0
    7926:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7928:	2103      	movs	r1, #3
    792a:	6878      	ldr	r0, [r7, #4]
    792c:	4b09      	ldr	r3, [pc, #36]	; (7954 <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    792e:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7930:	687b      	ldr	r3, [r7, #4]
    7932:	681b      	ldr	r3, [r3, #0]
    7934:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    7936:	68fb      	ldr	r3, [r7, #12]
    7938:	085b      	lsrs	r3, r3, #1
    793a:	f003 0301 	and.w	r3, r3, #1
    793e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7940:	68fb      	ldr	r3, [r7, #12]
    7942:	2b00      	cmp	r3, #0
    7944:	bf14      	ite	ne
    7946:	2301      	movne	r3, #1
    7948:	2300      	moveq	r3, #0
    794a:	b2db      	uxtb	r3, r3
}
    794c:	4618      	mov	r0, r3
    794e:	3710      	adds	r7, #16
    7950:	46bd      	mov	sp, r7
    7952:	bd80      	pop	{r7, pc}
    7954:	0000780d 	.word	0x0000780d

00007958 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7958:	b580      	push	{r7, lr}
    795a:	b082      	sub	sp, #8
    795c:	af00      	add	r7, sp, #0
    795e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7960:	687b      	ldr	r3, [r7, #4]
    7962:	681b      	ldr	r3, [r3, #0]
    7964:	f023 0202 	bic.w	r2, r3, #2
    7968:	687b      	ldr	r3, [r7, #4]
    796a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    796c:	2103      	movs	r1, #3
    796e:	6878      	ldr	r0, [r7, #4]
    7970:	4b02      	ldr	r3, [pc, #8]	; (797c <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7972:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7974:	bf00      	nop
    7976:	3708      	adds	r7, #8
    7978:	46bd      	mov	sp, r7
    797a:	bd80      	pop	{r7, pc}
    797c:	0000780d 	.word	0x0000780d

00007980 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7980:	b580      	push	{r7, lr}
    7982:	b084      	sub	sp, #16
    7984:	af00      	add	r7, sp, #0
    7986:	6078      	str	r0, [r7, #4]
    7988:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    798a:	2103      	movs	r1, #3
    798c:	6878      	ldr	r0, [r7, #4]
    798e:	4b07      	ldr	r3, [pc, #28]	; (79ac <hri_tcc_get_CTRLA_reg+0x2c>)
    7990:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7992:	687b      	ldr	r3, [r7, #4]
    7994:	681b      	ldr	r3, [r3, #0]
    7996:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7998:	68fa      	ldr	r2, [r7, #12]
    799a:	683b      	ldr	r3, [r7, #0]
    799c:	4013      	ands	r3, r2
    799e:	60fb      	str	r3, [r7, #12]
	return tmp;
    79a0:	68fb      	ldr	r3, [r7, #12]
}
    79a2:	4618      	mov	r0, r3
    79a4:	3710      	adds	r7, #16
    79a6:	46bd      	mov	sp, r7
    79a8:	bd80      	pop	{r7, pc}
    79aa:	bf00      	nop
    79ac:	0000780d 	.word	0x0000780d

000079b0 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    79b0:	b580      	push	{r7, lr}
    79b2:	b082      	sub	sp, #8
    79b4:	af00      	add	r7, sp, #0
    79b6:	6078      	str	r0, [r7, #4]
    79b8:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    79ba:	687b      	ldr	r3, [r7, #4]
    79bc:	683a      	ldr	r2, [r7, #0]
    79be:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    79c0:	2103      	movs	r1, #3
    79c2:	6878      	ldr	r0, [r7, #4]
    79c4:	4b02      	ldr	r3, [pc, #8]	; (79d0 <hri_tcc_write_CTRLA_reg+0x20>)
    79c6:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    79c8:	bf00      	nop
    79ca:	3708      	adds	r7, #8
    79cc:	46bd      	mov	sp, r7
    79ce:	bd80      	pop	{r7, pc}
    79d0:	0000780d 	.word	0x0000780d

000079d4 <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    79d4:	b480      	push	{r7}
    79d6:	b083      	sub	sp, #12
    79d8:	af00      	add	r7, sp, #0
    79da:	6078      	str	r0, [r7, #4]
    79dc:	460b      	mov	r3, r1
    79de:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    79e0:	687b      	ldr	r3, [r7, #4]
    79e2:	78fa      	ldrb	r2, [r7, #3]
    79e4:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    79e6:	bf00      	nop
    79e8:	370c      	adds	r7, #12
    79ea:	46bd      	mov	sp, r7
    79ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    79f0:	4770      	bx	lr

000079f2 <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    79f2:	b480      	push	{r7}
    79f4:	b083      	sub	sp, #12
    79f6:	af00      	add	r7, sp, #0
    79f8:	6078      	str	r0, [r7, #4]
    79fa:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    79fc:	687b      	ldr	r3, [r7, #4]
    79fe:	683a      	ldr	r2, [r7, #0]
    7a00:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7a02:	bf00      	nop
    7a04:	370c      	adds	r7, #12
    7a06:	46bd      	mov	sp, r7
    7a08:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a0c:	4770      	bx	lr
	...

00007a10 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    7a10:	b580      	push	{r7, lr}
    7a12:	b082      	sub	sp, #8
    7a14:	af00      	add	r7, sp, #0
    7a16:	6078      	str	r0, [r7, #4]
    7a18:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    7a1a:	687b      	ldr	r3, [r7, #4]
    7a1c:	683a      	ldr	r2, [r7, #0]
    7a1e:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7a20:	2180      	movs	r1, #128	; 0x80
    7a22:	6878      	ldr	r0, [r7, #4]
    7a24:	4b02      	ldr	r3, [pc, #8]	; (7a30 <hri_tcc_write_PER_reg+0x20>)
    7a26:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7a28:	bf00      	nop
    7a2a:	3708      	adds	r7, #8
    7a2c:	46bd      	mov	sp, r7
    7a2e:	bd80      	pop	{r7, pc}
    7a30:	0000780d 	.word	0x0000780d

00007a34 <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7a34:	b580      	push	{r7, lr}
    7a36:	b082      	sub	sp, #8
    7a38:	af00      	add	r7, sp, #0
    7a3a:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7a3c:	2180      	movs	r1, #128	; 0x80
    7a3e:	6878      	ldr	r0, [r7, #4]
    7a40:	4b03      	ldr	r3, [pc, #12]	; (7a50 <hri_tcc_read_PER_reg+0x1c>)
    7a42:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7a44:	687b      	ldr	r3, [r7, #4]
    7a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7a48:	4618      	mov	r0, r3
    7a4a:	3708      	adds	r7, #8
    7a4c:	46bd      	mov	sp, r7
    7a4e:	bd80      	pop	{r7, pc}
    7a50:	0000780d 	.word	0x0000780d

00007a54 <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7a54:	b480      	push	{r7}
    7a56:	b083      	sub	sp, #12
    7a58:	af00      	add	r7, sp, #0
    7a5a:	6078      	str	r0, [r7, #4]
    7a5c:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    7a5e:	687b      	ldr	r3, [r7, #4]
    7a60:	4a09      	ldr	r2, [pc, #36]	; (7a88 <_tcc_init_irq_param+0x34>)
    7a62:	4293      	cmp	r3, r2
    7a64:	d102      	bne.n	7a6c <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    7a66:	4a09      	ldr	r2, [pc, #36]	; (7a8c <_tcc_init_irq_param+0x38>)
    7a68:	683b      	ldr	r3, [r7, #0]
    7a6a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7a6c:	687b      	ldr	r3, [r7, #4]
    7a6e:	4a08      	ldr	r2, [pc, #32]	; (7a90 <_tcc_init_irq_param+0x3c>)
    7a70:	4293      	cmp	r3, r2
    7a72:	d102      	bne.n	7a7a <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7a74:	4a07      	ldr	r2, [pc, #28]	; (7a94 <_tcc_init_irq_param+0x40>)
    7a76:	683b      	ldr	r3, [r7, #0]
    7a78:	6013      	str	r3, [r2, #0]
	}
}
    7a7a:	bf00      	nop
    7a7c:	370c      	adds	r7, #12
    7a7e:	46bd      	mov	sp, r7
    7a80:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a84:	4770      	bx	lr
    7a86:	bf00      	nop
    7a88:	41016000 	.word	0x41016000
    7a8c:	20000934 	.word	0x20000934
    7a90:	41018000 	.word	0x41018000
    7a94:	20000938 	.word	0x20000938

00007a98 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7a98:	b580      	push	{r7, lr}
    7a9a:	b084      	sub	sp, #16
    7a9c:	af00      	add	r7, sp, #0
    7a9e:	6078      	str	r0, [r7, #4]
    7aa0:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7aa2:	6838      	ldr	r0, [r7, #0]
    7aa4:	4b33      	ldr	r3, [pc, #204]	; (7b74 <_tcc_timer_init+0xdc>)
    7aa6:	4798      	blx	r3
    7aa8:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    7aaa:	68fb      	ldr	r3, [r7, #12]
    7aac:	2b00      	cmp	r3, #0
    7aae:	d102      	bne.n	7ab6 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    7ab0:	f06f 0309 	mvn.w	r3, #9
    7ab4:	e05a      	b.n	7b6c <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    7ab6:	687b      	ldr	r3, [r7, #4]
    7ab8:	683a      	ldr	r2, [r7, #0]
    7aba:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7abc:	2101      	movs	r1, #1
    7abe:	6838      	ldr	r0, [r7, #0]
    7ac0:	4b2d      	ldr	r3, [pc, #180]	; (7b78 <_tcc_timer_init+0xe0>)
    7ac2:	4798      	blx	r3
    7ac4:	4603      	mov	r3, r0
    7ac6:	f083 0301 	eor.w	r3, r3, #1
    7aca:	b2db      	uxtb	r3, r3
    7acc:	2b00      	cmp	r3, #0
    7ace:	d011      	beq.n	7af4 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    7ad0:	2102      	movs	r1, #2
    7ad2:	6838      	ldr	r0, [r7, #0]
    7ad4:	4b29      	ldr	r3, [pc, #164]	; (7b7c <_tcc_timer_init+0xe4>)
    7ad6:	4798      	blx	r3
    7ad8:	4603      	mov	r3, r0
    7ada:	2b00      	cmp	r3, #0
    7adc:	d006      	beq.n	7aec <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7ade:	6838      	ldr	r0, [r7, #0]
    7ae0:	4b27      	ldr	r3, [pc, #156]	; (7b80 <_tcc_timer_init+0xe8>)
    7ae2:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    7ae4:	2102      	movs	r1, #2
    7ae6:	6838      	ldr	r0, [r7, #0]
    7ae8:	4b26      	ldr	r3, [pc, #152]	; (7b84 <_tcc_timer_init+0xec>)
    7aea:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    7aec:	2101      	movs	r1, #1
    7aee:	6838      	ldr	r0, [r7, #0]
    7af0:	4b25      	ldr	r3, [pc, #148]	; (7b88 <_tcc_timer_init+0xf0>)
    7af2:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7af4:	2101      	movs	r1, #1
    7af6:	6838      	ldr	r0, [r7, #0]
    7af8:	4b22      	ldr	r3, [pc, #136]	; (7b84 <_tcc_timer_init+0xec>)
    7afa:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    7afc:	68fb      	ldr	r3, [r7, #12]
    7afe:	689b      	ldr	r3, [r3, #8]
    7b00:	4619      	mov	r1, r3
    7b02:	6838      	ldr	r0, [r7, #0]
    7b04:	4b20      	ldr	r3, [pc, #128]	; (7b88 <_tcc_timer_init+0xf0>)
    7b06:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    7b08:	68fb      	ldr	r3, [r7, #12]
    7b0a:	7b1b      	ldrb	r3, [r3, #12]
    7b0c:	4619      	mov	r1, r3
    7b0e:	6838      	ldr	r0, [r7, #0]
    7b10:	4b1e      	ldr	r3, [pc, #120]	; (7b8c <_tcc_timer_init+0xf4>)
    7b12:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    7b14:	68fb      	ldr	r3, [r7, #12]
    7b16:	7b5b      	ldrb	r3, [r3, #13]
    7b18:	4619      	mov	r1, r3
    7b1a:	6838      	ldr	r0, [r7, #0]
    7b1c:	4b1c      	ldr	r3, [pc, #112]	; (7b90 <_tcc_timer_init+0xf8>)
    7b1e:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    7b20:	68fb      	ldr	r3, [r7, #12]
    7b22:	691b      	ldr	r3, [r3, #16]
    7b24:	4619      	mov	r1, r3
    7b26:	6838      	ldr	r0, [r7, #0]
    7b28:	4b1a      	ldr	r3, [pc, #104]	; (7b94 <_tcc_timer_init+0xfc>)
    7b2a:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    7b2c:	68fb      	ldr	r3, [r7, #12]
    7b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7b30:	4619      	mov	r1, r3
    7b32:	6838      	ldr	r0, [r7, #0]
    7b34:	4b18      	ldr	r3, [pc, #96]	; (7b98 <_tcc_timer_init+0x100>)
    7b36:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7b38:	6838      	ldr	r0, [r7, #0]
    7b3a:	4b18      	ldr	r3, [pc, #96]	; (7b9c <_tcc_timer_init+0x104>)
    7b3c:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    7b3e:	6879      	ldr	r1, [r7, #4]
    7b40:	6838      	ldr	r0, [r7, #0]
    7b42:	4b17      	ldr	r3, [pc, #92]	; (7ba0 <_tcc_timer_init+0x108>)
    7b44:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7b46:	68fb      	ldr	r3, [r7, #12]
    7b48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7b4c:	4618      	mov	r0, r3
    7b4e:	4b15      	ldr	r3, [pc, #84]	; (7ba4 <_tcc_timer_init+0x10c>)
    7b50:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    7b52:	68fb      	ldr	r3, [r7, #12]
    7b54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7b58:	4618      	mov	r0, r3
    7b5a:	4b13      	ldr	r3, [pc, #76]	; (7ba8 <_tcc_timer_init+0x110>)
    7b5c:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    7b5e:	68fb      	ldr	r3, [r7, #12]
    7b60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7b64:	4618      	mov	r0, r3
    7b66:	4b11      	ldr	r3, [pc, #68]	; (7bac <_tcc_timer_init+0x114>)
    7b68:	4798      	blx	r3

	return ERR_NONE;
    7b6a:	2300      	movs	r3, #0
}
    7b6c:	4618      	mov	r0, r3
    7b6e:	3710      	adds	r7, #16
    7b70:	46bd      	mov	sp, r7
    7b72:	bd80      	pop	{r7, pc}
    7b74:	00007d61 	.word	0x00007d61
    7b78:	00007831 	.word	0x00007831
    7b7c:	00007981 	.word	0x00007981
    7b80:	00007959 	.word	0x00007959
    7b84:	0000780d 	.word	0x0000780d
    7b88:	000079b1 	.word	0x000079b1
    7b8c:	00007899 	.word	0x00007899
    7b90:	000079d5 	.word	0x000079d5
    7b94:	000079f3 	.word	0x000079f3
    7b98:	00007a11 	.word	0x00007a11
    7b9c:	000078b7 	.word	0x000078b7
    7ba0:	00007a55 	.word	0x00007a55
    7ba4:	0000778d 	.word	0x0000778d
    7ba8:	000077d1 	.word	0x000077d1
    7bac:	00007751 	.word	0x00007751

00007bb0 <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    7bb0:	b580      	push	{r7, lr}
    7bb2:	b084      	sub	sp, #16
    7bb4:	af00      	add	r7, sp, #0
    7bb6:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7bb8:	687b      	ldr	r3, [r7, #4]
    7bba:	68db      	ldr	r3, [r3, #12]
    7bbc:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7bbe:	68f8      	ldr	r0, [r7, #12]
    7bc0:	4b0a      	ldr	r3, [pc, #40]	; (7bec <_tcc_timer_deinit+0x3c>)
    7bc2:	4798      	blx	r3
    7bc4:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7bc6:	68bb      	ldr	r3, [r7, #8]
    7bc8:	2b00      	cmp	r3, #0
    7bca:	d00b      	beq.n	7be4 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7bcc:	68bb      	ldr	r3, [r7, #8]
    7bce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7bd2:	4618      	mov	r0, r3
    7bd4:	4b06      	ldr	r3, [pc, #24]	; (7bf0 <_tcc_timer_deinit+0x40>)
    7bd6:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7bd8:	68f8      	ldr	r0, [r7, #12]
    7bda:	4b06      	ldr	r3, [pc, #24]	; (7bf4 <_tcc_timer_deinit+0x44>)
    7bdc:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    7bde:	68f8      	ldr	r0, [r7, #12]
    7be0:	4b05      	ldr	r3, [pc, #20]	; (7bf8 <_tcc_timer_deinit+0x48>)
    7be2:	4798      	blx	r3
	}
}
    7be4:	bf00      	nop
    7be6:	3710      	adds	r7, #16
    7be8:	46bd      	mov	sp, r7
    7bea:	bd80      	pop	{r7, pc}
    7bec:	00007d61 	.word	0x00007d61
    7bf0:	0000778d 	.word	0x0000778d
    7bf4:	00007959 	.word	0x00007959
    7bf8:	000078d1 	.word	0x000078d1

00007bfc <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    7bfc:	b580      	push	{r7, lr}
    7bfe:	b082      	sub	sp, #8
    7c00:	af00      	add	r7, sp, #0
    7c02:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    7c04:	687b      	ldr	r3, [r7, #4]
    7c06:	68db      	ldr	r3, [r3, #12]
    7c08:	4618      	mov	r0, r3
    7c0a:	4b03      	ldr	r3, [pc, #12]	; (7c18 <_tcc_timer_start+0x1c>)
    7c0c:	4798      	blx	r3
}
    7c0e:	bf00      	nop
    7c10:	3708      	adds	r7, #8
    7c12:	46bd      	mov	sp, r7
    7c14:	bd80      	pop	{r7, pc}
    7c16:	bf00      	nop
    7c18:	000078f9 	.word	0x000078f9

00007c1c <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    7c1c:	b580      	push	{r7, lr}
    7c1e:	b082      	sub	sp, #8
    7c20:	af00      	add	r7, sp, #0
    7c22:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    7c24:	687b      	ldr	r3, [r7, #4]
    7c26:	68db      	ldr	r3, [r3, #12]
    7c28:	4618      	mov	r0, r3
    7c2a:	4b03      	ldr	r3, [pc, #12]	; (7c38 <_tcc_timer_stop+0x1c>)
    7c2c:	4798      	blx	r3
}
    7c2e:	bf00      	nop
    7c30:	3708      	adds	r7, #8
    7c32:	46bd      	mov	sp, r7
    7c34:	bd80      	pop	{r7, pc}
    7c36:	bf00      	nop
    7c38:	00007959 	.word	0x00007959

00007c3c <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7c3c:	b580      	push	{r7, lr}
    7c3e:	b082      	sub	sp, #8
    7c40:	af00      	add	r7, sp, #0
    7c42:	6078      	str	r0, [r7, #4]
    7c44:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    7c46:	687b      	ldr	r3, [r7, #4]
    7c48:	68db      	ldr	r3, [r3, #12]
    7c4a:	6839      	ldr	r1, [r7, #0]
    7c4c:	4618      	mov	r0, r3
    7c4e:	4b03      	ldr	r3, [pc, #12]	; (7c5c <_tcc_timer_set_period+0x20>)
    7c50:	4798      	blx	r3
}
    7c52:	bf00      	nop
    7c54:	3708      	adds	r7, #8
    7c56:	46bd      	mov	sp, r7
    7c58:	bd80      	pop	{r7, pc}
    7c5a:	bf00      	nop
    7c5c:	00007a11 	.word	0x00007a11

00007c60 <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    7c60:	b580      	push	{r7, lr}
    7c62:	b082      	sub	sp, #8
    7c64:	af00      	add	r7, sp, #0
    7c66:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7c68:	687b      	ldr	r3, [r7, #4]
    7c6a:	68db      	ldr	r3, [r3, #12]
    7c6c:	4618      	mov	r0, r3
    7c6e:	4b03      	ldr	r3, [pc, #12]	; (7c7c <_tcc_timer_get_period+0x1c>)
    7c70:	4798      	blx	r3
    7c72:	4603      	mov	r3, r0
}
    7c74:	4618      	mov	r0, r3
    7c76:	3708      	adds	r7, #8
    7c78:	46bd      	mov	sp, r7
    7c7a:	bd80      	pop	{r7, pc}
    7c7c:	00007a35 	.word	0x00007a35

00007c80 <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    7c80:	b580      	push	{r7, lr}
    7c82:	b082      	sub	sp, #8
    7c84:	af00      	add	r7, sp, #0
    7c86:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7c88:	687b      	ldr	r3, [r7, #4]
    7c8a:	68db      	ldr	r3, [r3, #12]
    7c8c:	4618      	mov	r0, r3
    7c8e:	4b03      	ldr	r3, [pc, #12]	; (7c9c <_tcc_timer_is_started+0x1c>)
    7c90:	4798      	blx	r3
    7c92:	4603      	mov	r3, r0
}
    7c94:	4618      	mov	r0, r3
    7c96:	3708      	adds	r7, #8
    7c98:	46bd      	mov	sp, r7
    7c9a:	bd80      	pop	{r7, pc}
    7c9c:	00007921 	.word	0x00007921

00007ca0 <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    7ca0:	b480      	push	{r7}
    7ca2:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    7ca4:	4b02      	ldr	r3, [pc, #8]	; (7cb0 <_tcc_get_timer+0x10>)
}
    7ca6:	4618      	mov	r0, r3
    7ca8:	46bd      	mov	sp, r7
    7caa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cae:	4770      	bx	lr
    7cb0:	200000c0 	.word	0x200000c0

00007cb4 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    7cb4:	b580      	push	{r7, lr}
    7cb6:	b084      	sub	sp, #16
    7cb8:	af00      	add	r7, sp, #0
    7cba:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7cbc:	687b      	ldr	r3, [r7, #4]
    7cbe:	68db      	ldr	r3, [r3, #12]
    7cc0:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7cc2:	68f8      	ldr	r0, [r7, #12]
    7cc4:	4b08      	ldr	r3, [pc, #32]	; (7ce8 <_tcc_timer_set_irq+0x34>)
    7cc6:	4798      	blx	r3
    7cc8:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7cca:	68bb      	ldr	r3, [r7, #8]
    7ccc:	2b00      	cmp	r3, #0
    7cce:	d006      	beq.n	7cde <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    7cd0:	68bb      	ldr	r3, [r7, #8]
    7cd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7cd6:	b2db      	uxtb	r3, r3
    7cd8:	4618      	mov	r0, r3
    7cda:	4b04      	ldr	r3, [pc, #16]	; (7cec <_tcc_timer_set_irq+0x38>)
    7cdc:	4798      	blx	r3
	}
}
    7cde:	bf00      	nop
    7ce0:	3710      	adds	r7, #16
    7ce2:	46bd      	mov	sp, r7
    7ce4:	bd80      	pop	{r7, pc}
    7ce6:	bf00      	nop
    7ce8:	00007d61 	.word	0x00007d61
    7cec:	00004651 	.word	0x00004651

00007cf0 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    7cf0:	b580      	push	{r7, lr}
    7cf2:	b084      	sub	sp, #16
    7cf4:	af00      	add	r7, sp, #0
    7cf6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7cf8:	687b      	ldr	r3, [r7, #4]
    7cfa:	68db      	ldr	r3, [r3, #12]
    7cfc:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    7cfe:	68f8      	ldr	r0, [r7, #12]
    7d00:	4b07      	ldr	r3, [pc, #28]	; (7d20 <tcc_interrupt_handler+0x30>)
    7d02:	4798      	blx	r3
    7d04:	4603      	mov	r3, r0
    7d06:	2b00      	cmp	r3, #0
    7d08:	d006      	beq.n	7d18 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    7d0a:	68f8      	ldr	r0, [r7, #12]
    7d0c:	4b05      	ldr	r3, [pc, #20]	; (7d24 <tcc_interrupt_handler+0x34>)
    7d0e:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7d10:	687b      	ldr	r3, [r7, #4]
    7d12:	681b      	ldr	r3, [r3, #0]
    7d14:	6878      	ldr	r0, [r7, #4]
    7d16:	4798      	blx	r3
	}
}
    7d18:	bf00      	nop
    7d1a:	3710      	adds	r7, #16
    7d1c:	46bd      	mov	sp, r7
    7d1e:	bd80      	pop	{r7, pc}
    7d20:	00007859 	.word	0x00007859
    7d24:	0000787f 	.word	0x0000787f

00007d28 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    7d28:	b580      	push	{r7, lr}
    7d2a:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    7d2c:	4b03      	ldr	r3, [pc, #12]	; (7d3c <TCC0_0_Handler+0x14>)
    7d2e:	681b      	ldr	r3, [r3, #0]
    7d30:	4618      	mov	r0, r3
    7d32:	4b03      	ldr	r3, [pc, #12]	; (7d40 <TCC0_0_Handler+0x18>)
    7d34:	4798      	blx	r3
}
    7d36:	bf00      	nop
    7d38:	bd80      	pop	{r7, pc}
    7d3a:	bf00      	nop
    7d3c:	20000934 	.word	0x20000934
    7d40:	00007cf1 	.word	0x00007cf1

00007d44 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    7d44:	b580      	push	{r7, lr}
    7d46:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    7d48:	4b03      	ldr	r3, [pc, #12]	; (7d58 <TCC1_0_Handler+0x14>)
    7d4a:	681b      	ldr	r3, [r3, #0]
    7d4c:	4618      	mov	r0, r3
    7d4e:	4b03      	ldr	r3, [pc, #12]	; (7d5c <TCC1_0_Handler+0x18>)
    7d50:	4798      	blx	r3
}
    7d52:	bf00      	nop
    7d54:	bd80      	pop	{r7, pc}
    7d56:	bf00      	nop
    7d58:	20000938 	.word	0x20000938
    7d5c:	00007cf1 	.word	0x00007cf1

00007d60 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    7d60:	b480      	push	{r7}
    7d62:	b085      	sub	sp, #20
    7d64:	af00      	add	r7, sp, #0
    7d66:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7d68:	2300      	movs	r3, #0
    7d6a:	73fb      	strb	r3, [r7, #15]
    7d6c:	e015      	b.n	7d9a <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    7d6e:	7bfa      	ldrb	r2, [r7, #15]
    7d70:	490f      	ldr	r1, [pc, #60]	; (7db0 <_get_tcc_cfg+0x50>)
    7d72:	4613      	mov	r3, r2
    7d74:	005b      	lsls	r3, r3, #1
    7d76:	4413      	add	r3, r2
    7d78:	011b      	lsls	r3, r3, #4
    7d7a:	440b      	add	r3, r1
    7d7c:	681a      	ldr	r2, [r3, #0]
    7d7e:	687b      	ldr	r3, [r7, #4]
    7d80:	429a      	cmp	r2, r3
    7d82:	d107      	bne.n	7d94 <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    7d84:	7bfa      	ldrb	r2, [r7, #15]
    7d86:	4613      	mov	r3, r2
    7d88:	005b      	lsls	r3, r3, #1
    7d8a:	4413      	add	r3, r2
    7d8c:	011b      	lsls	r3, r3, #4
    7d8e:	4a08      	ldr	r2, [pc, #32]	; (7db0 <_get_tcc_cfg+0x50>)
    7d90:	4413      	add	r3, r2
    7d92:	e006      	b.n	7da2 <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    7d94:	7bfb      	ldrb	r3, [r7, #15]
    7d96:	3301      	adds	r3, #1
    7d98:	73fb      	strb	r3, [r7, #15]
    7d9a:	7bfb      	ldrb	r3, [r7, #15]
    7d9c:	2b01      	cmp	r3, #1
    7d9e:	d9e6      	bls.n	7d6e <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    7da0:	2300      	movs	r3, #0
}
    7da2:	4618      	mov	r0, r3
    7da4:	3714      	adds	r7, #20
    7da6:	46bd      	mov	sp, r7
    7da8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dac:	4770      	bx	lr
    7dae:	bf00      	nop
    7db0:	20000060 	.word	0x20000060

00007db4 <__NVIC_EnableIRQ>:
{
    7db4:	b480      	push	{r7}
    7db6:	b083      	sub	sp, #12
    7db8:	af00      	add	r7, sp, #0
    7dba:	4603      	mov	r3, r0
    7dbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7dc2:	2b00      	cmp	r3, #0
    7dc4:	db0b      	blt.n	7dde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7dc6:	4909      	ldr	r1, [pc, #36]	; (7dec <__NVIC_EnableIRQ+0x38>)
    7dc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7dcc:	095b      	lsrs	r3, r3, #5
    7dce:	88fa      	ldrh	r2, [r7, #6]
    7dd0:	f002 021f 	and.w	r2, r2, #31
    7dd4:	2001      	movs	r0, #1
    7dd6:	fa00 f202 	lsl.w	r2, r0, r2
    7dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7dde:	bf00      	nop
    7de0:	370c      	adds	r7, #12
    7de2:	46bd      	mov	sp, r7
    7de4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7de8:	4770      	bx	lr
    7dea:	bf00      	nop
    7dec:	e000e100 	.word	0xe000e100

00007df0 <__NVIC_DisableIRQ>:
{
    7df0:	b480      	push	{r7}
    7df2:	b083      	sub	sp, #12
    7df4:	af00      	add	r7, sp, #0
    7df6:	4603      	mov	r3, r0
    7df8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7dfe:	2b00      	cmp	r3, #0
    7e00:	db10      	blt.n	7e24 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e02:	490b      	ldr	r1, [pc, #44]	; (7e30 <__NVIC_DisableIRQ+0x40>)
    7e04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7e08:	095b      	lsrs	r3, r3, #5
    7e0a:	88fa      	ldrh	r2, [r7, #6]
    7e0c:	f002 021f 	and.w	r2, r2, #31
    7e10:	2001      	movs	r0, #1
    7e12:	fa00 f202 	lsl.w	r2, r0, r2
    7e16:	3320      	adds	r3, #32
    7e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7e1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7e20:	f3bf 8f6f 	isb	sy
}
    7e24:	bf00      	nop
    7e26:	370c      	adds	r7, #12
    7e28:	46bd      	mov	sp, r7
    7e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e2e:	4770      	bx	lr
    7e30:	e000e100 	.word	0xe000e100

00007e34 <__NVIC_ClearPendingIRQ>:
{
    7e34:	b480      	push	{r7}
    7e36:	b083      	sub	sp, #12
    7e38:	af00      	add	r7, sp, #0
    7e3a:	4603      	mov	r3, r0
    7e3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7e42:	2b00      	cmp	r3, #0
    7e44:	db0c      	blt.n	7e60 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e46:	4909      	ldr	r1, [pc, #36]	; (7e6c <__NVIC_ClearPendingIRQ+0x38>)
    7e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7e4c:	095b      	lsrs	r3, r3, #5
    7e4e:	88fa      	ldrh	r2, [r7, #6]
    7e50:	f002 021f 	and.w	r2, r2, #31
    7e54:	2001      	movs	r0, #1
    7e56:	fa00 f202 	lsl.w	r2, r0, r2
    7e5a:	3360      	adds	r3, #96	; 0x60
    7e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7e60:	bf00      	nop
    7e62:	370c      	adds	r7, #12
    7e64:	46bd      	mov	sp, r7
    7e66:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e6a:	4770      	bx	lr
    7e6c:	e000e100 	.word	0xe000e100

00007e70 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7e70:	b480      	push	{r7}
    7e72:	b083      	sub	sp, #12
    7e74:	af00      	add	r7, sp, #0
    7e76:	6078      	str	r0, [r7, #4]
    7e78:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    7e7a:	bf00      	nop
    7e7c:	687b      	ldr	r3, [r7, #4]
    7e7e:	691a      	ldr	r2, [r3, #16]
    7e80:	683b      	ldr	r3, [r7, #0]
    7e82:	4013      	ands	r3, r2
    7e84:	2b00      	cmp	r3, #0
    7e86:	d1f9      	bne.n	7e7c <hri_tc_wait_for_sync+0xc>
	};
}
    7e88:	bf00      	nop
    7e8a:	370c      	adds	r7, #12
    7e8c:	46bd      	mov	sp, r7
    7e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e92:	4770      	bx	lr

00007e94 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    7e94:	b480      	push	{r7}
    7e96:	b083      	sub	sp, #12
    7e98:	af00      	add	r7, sp, #0
    7e9a:	6078      	str	r0, [r7, #4]
    7e9c:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    7e9e:	687b      	ldr	r3, [r7, #4]
    7ea0:	691a      	ldr	r2, [r3, #16]
    7ea2:	683b      	ldr	r3, [r7, #0]
    7ea4:	4013      	ands	r3, r2
    7ea6:	2b00      	cmp	r3, #0
    7ea8:	bf14      	ite	ne
    7eaa:	2301      	movne	r3, #1
    7eac:	2300      	moveq	r3, #0
    7eae:	b2db      	uxtb	r3, r3
}
    7eb0:	4618      	mov	r0, r3
    7eb2:	370c      	adds	r7, #12
    7eb4:	46bd      	mov	sp, r7
    7eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7eba:	4770      	bx	lr

00007ebc <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    7ebc:	b480      	push	{r7}
    7ebe:	b083      	sub	sp, #12
    7ec0:	af00      	add	r7, sp, #0
    7ec2:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    7ec4:	687b      	ldr	r3, [r7, #4]
    7ec6:	7a9b      	ldrb	r3, [r3, #10]
    7ec8:	b2db      	uxtb	r3, r3
    7eca:	f003 0301 	and.w	r3, r3, #1
    7ece:	2b00      	cmp	r3, #0
    7ed0:	bf14      	ite	ne
    7ed2:	2301      	movne	r3, #1
    7ed4:	2300      	moveq	r3, #0
    7ed6:	b2db      	uxtb	r3, r3
}
    7ed8:	4618      	mov	r0, r3
    7eda:	370c      	adds	r7, #12
    7edc:	46bd      	mov	sp, r7
    7ede:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ee2:	4770      	bx	lr

00007ee4 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    7ee4:	b480      	push	{r7}
    7ee6:	b083      	sub	sp, #12
    7ee8:	af00      	add	r7, sp, #0
    7eea:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    7eec:	687b      	ldr	r3, [r7, #4]
    7eee:	2201      	movs	r2, #1
    7ef0:	729a      	strb	r2, [r3, #10]
}
    7ef2:	bf00      	nop
    7ef4:	370c      	adds	r7, #12
    7ef6:	46bd      	mov	sp, r7
    7ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
    7efc:	4770      	bx	lr

00007efe <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    7efe:	b480      	push	{r7}
    7f00:	b083      	sub	sp, #12
    7f02:	af00      	add	r7, sp, #0
    7f04:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    7f06:	687b      	ldr	r3, [r7, #4]
    7f08:	2202      	movs	r2, #2
    7f0a:	729a      	strb	r2, [r3, #10]
}
    7f0c:	bf00      	nop
    7f0e:	370c      	adds	r7, #12
    7f10:	46bd      	mov	sp, r7
    7f12:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f16:	4770      	bx	lr

00007f18 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    7f18:	b480      	push	{r7}
    7f1a:	b083      	sub	sp, #12
    7f1c:	af00      	add	r7, sp, #0
    7f1e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    7f20:	687b      	ldr	r3, [r7, #4]
    7f22:	2201      	movs	r2, #1
    7f24:	725a      	strb	r2, [r3, #9]
}
    7f26:	bf00      	nop
    7f28:	370c      	adds	r7, #12
    7f2a:	46bd      	mov	sp, r7
    7f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f30:	4770      	bx	lr

00007f32 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    7f32:	b480      	push	{r7}
    7f34:	b083      	sub	sp, #12
    7f36:	af00      	add	r7, sp, #0
    7f38:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    7f3a:	687b      	ldr	r3, [r7, #4]
    7f3c:	7a5b      	ldrb	r3, [r3, #9]
    7f3e:	b2db      	uxtb	r3, r3
    7f40:	085b      	lsrs	r3, r3, #1
    7f42:	f003 0301 	and.w	r3, r3, #1
    7f46:	2b00      	cmp	r3, #0
    7f48:	bf14      	ite	ne
    7f4a:	2301      	movne	r3, #1
    7f4c:	2300      	moveq	r3, #0
    7f4e:	b2db      	uxtb	r3, r3
}
    7f50:	4618      	mov	r0, r3
    7f52:	370c      	adds	r7, #12
    7f54:	46bd      	mov	sp, r7
    7f56:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f5a:	4770      	bx	lr

00007f5c <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7f5c:	b580      	push	{r7, lr}
    7f5e:	b082      	sub	sp, #8
    7f60:	af00      	add	r7, sp, #0
    7f62:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    7f64:	687b      	ldr	r3, [r7, #4]
    7f66:	681b      	ldr	r3, [r3, #0]
    7f68:	f043 0201 	orr.w	r2, r3, #1
    7f6c:	687b      	ldr	r3, [r7, #4]
    7f6e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    7f70:	2101      	movs	r1, #1
    7f72:	6878      	ldr	r0, [r7, #4]
    7f74:	4b02      	ldr	r3, [pc, #8]	; (7f80 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    7f76:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7f78:	bf00      	nop
    7f7a:	3708      	adds	r7, #8
    7f7c:	46bd      	mov	sp, r7
    7f7e:	bd80      	pop	{r7, pc}
    7f80:	00007e71 	.word	0x00007e71

00007f84 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7f84:	b580      	push	{r7, lr}
    7f86:	b082      	sub	sp, #8
    7f88:	af00      	add	r7, sp, #0
    7f8a:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    7f8c:	687b      	ldr	r3, [r7, #4]
    7f8e:	681b      	ldr	r3, [r3, #0]
    7f90:	f043 0202 	orr.w	r2, r3, #2
    7f94:	687b      	ldr	r3, [r7, #4]
    7f96:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7f98:	2103      	movs	r1, #3
    7f9a:	6878      	ldr	r0, [r7, #4]
    7f9c:	4b02      	ldr	r3, [pc, #8]	; (7fa8 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    7f9e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    7fa0:	bf00      	nop
    7fa2:	3708      	adds	r7, #8
    7fa4:	46bd      	mov	sp, r7
    7fa6:	bd80      	pop	{r7, pc}
    7fa8:	00007e71 	.word	0x00007e71

00007fac <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7fac:	b580      	push	{r7, lr}
    7fae:	b084      	sub	sp, #16
    7fb0:	af00      	add	r7, sp, #0
    7fb2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7fb4:	2103      	movs	r1, #3
    7fb6:	6878      	ldr	r0, [r7, #4]
    7fb8:	4b09      	ldr	r3, [pc, #36]	; (7fe0 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    7fba:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    7fbc:	687b      	ldr	r3, [r7, #4]
    7fbe:	681b      	ldr	r3, [r3, #0]
    7fc0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    7fc2:	68fb      	ldr	r3, [r7, #12]
    7fc4:	085b      	lsrs	r3, r3, #1
    7fc6:	f003 0301 	and.w	r3, r3, #1
    7fca:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7fcc:	68fb      	ldr	r3, [r7, #12]
    7fce:	2b00      	cmp	r3, #0
    7fd0:	bf14      	ite	ne
    7fd2:	2301      	movne	r3, #1
    7fd4:	2300      	moveq	r3, #0
    7fd6:	b2db      	uxtb	r3, r3
}
    7fd8:	4618      	mov	r0, r3
    7fda:	3710      	adds	r7, #16
    7fdc:	46bd      	mov	sp, r7
    7fde:	bd80      	pop	{r7, pc}
    7fe0:	00007e71 	.word	0x00007e71

00007fe4 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7fe4:	b580      	push	{r7, lr}
    7fe6:	b082      	sub	sp, #8
    7fe8:	af00      	add	r7, sp, #0
    7fea:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    7fec:	687b      	ldr	r3, [r7, #4]
    7fee:	681b      	ldr	r3, [r3, #0]
    7ff0:	f023 0202 	bic.w	r2, r3, #2
    7ff4:	687b      	ldr	r3, [r7, #4]
    7ff6:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    7ff8:	2103      	movs	r1, #3
    7ffa:	6878      	ldr	r0, [r7, #4]
    7ffc:	4b02      	ldr	r3, [pc, #8]	; (8008 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    7ffe:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8000:	bf00      	nop
    8002:	3708      	adds	r7, #8
    8004:	46bd      	mov	sp, r7
    8006:	bd80      	pop	{r7, pc}
    8008:	00007e71 	.word	0x00007e71

0000800c <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    800c:	b480      	push	{r7}
    800e:	b085      	sub	sp, #20
    8010:	af00      	add	r7, sp, #0
    8012:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8014:	687b      	ldr	r3, [r7, #4]
    8016:	681b      	ldr	r3, [r3, #0]
    8018:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    801a:	68fb      	ldr	r3, [r7, #12]
    801c:	089b      	lsrs	r3, r3, #2
    801e:	f003 0303 	and.w	r3, r3, #3
    8022:	60fb      	str	r3, [r7, #12]
	return tmp;
    8024:	68fb      	ldr	r3, [r7, #12]
}
    8026:	4618      	mov	r0, r3
    8028:	3714      	adds	r7, #20
    802a:	46bd      	mov	sp, r7
    802c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8030:	4770      	bx	lr
	...

00008034 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    8034:	b580      	push	{r7, lr}
    8036:	b084      	sub	sp, #16
    8038:	af00      	add	r7, sp, #0
    803a:	6078      	str	r0, [r7, #4]
    803c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    803e:	2103      	movs	r1, #3
    8040:	6878      	ldr	r0, [r7, #4]
    8042:	4b07      	ldr	r3, [pc, #28]	; (8060 <hri_tc_get_CTRLA_reg+0x2c>)
    8044:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8046:	687b      	ldr	r3, [r7, #4]
    8048:	681b      	ldr	r3, [r3, #0]
    804a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    804c:	68fa      	ldr	r2, [r7, #12]
    804e:	683b      	ldr	r3, [r7, #0]
    8050:	4013      	ands	r3, r2
    8052:	60fb      	str	r3, [r7, #12]
	return tmp;
    8054:	68fb      	ldr	r3, [r7, #12]
}
    8056:	4618      	mov	r0, r3
    8058:	3710      	adds	r7, #16
    805a:	46bd      	mov	sp, r7
    805c:	bd80      	pop	{r7, pc}
    805e:	bf00      	nop
    8060:	00007e71 	.word	0x00007e71

00008064 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    8064:	b580      	push	{r7, lr}
    8066:	b082      	sub	sp, #8
    8068:	af00      	add	r7, sp, #0
    806a:	6078      	str	r0, [r7, #4]
    806c:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    806e:	687b      	ldr	r3, [r7, #4]
    8070:	683a      	ldr	r2, [r7, #0]
    8072:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8074:	2103      	movs	r1, #3
    8076:	6878      	ldr	r0, [r7, #4]
    8078:	4b02      	ldr	r3, [pc, #8]	; (8084 <hri_tc_write_CTRLA_reg+0x20>)
    807a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    807c:	bf00      	nop
    807e:	3708      	adds	r7, #8
    8080:	46bd      	mov	sp, r7
    8082:	bd80      	pop	{r7, pc}
    8084:	00007e71 	.word	0x00007e71

00008088 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    8088:	b480      	push	{r7}
    808a:	b083      	sub	sp, #12
    808c:	af00      	add	r7, sp, #0
    808e:	6078      	str	r0, [r7, #4]
    8090:	460b      	mov	r3, r1
    8092:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    8094:	687b      	ldr	r3, [r7, #4]
    8096:	887a      	ldrh	r2, [r7, #2]
    8098:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    809a:	bf00      	nop
    809c:	370c      	adds	r7, #12
    809e:	46bd      	mov	sp, r7
    80a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    80a4:	4770      	bx	lr

000080a6 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    80a6:	b480      	push	{r7}
    80a8:	b083      	sub	sp, #12
    80aa:	af00      	add	r7, sp, #0
    80ac:	6078      	str	r0, [r7, #4]
    80ae:	460b      	mov	r3, r1
    80b0:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    80b2:	687b      	ldr	r3, [r7, #4]
    80b4:	78fa      	ldrb	r2, [r7, #3]
    80b6:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    80b8:	bf00      	nop
    80ba:	370c      	adds	r7, #12
    80bc:	46bd      	mov	sp, r7
    80be:	f85d 7b04 	ldr.w	r7, [sp], #4
    80c2:	4770      	bx	lr

000080c4 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    80c4:	b480      	push	{r7}
    80c6:	b083      	sub	sp, #12
    80c8:	af00      	add	r7, sp, #0
    80ca:	6078      	str	r0, [r7, #4]
    80cc:	460b      	mov	r3, r1
    80ce:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    80d0:	687b      	ldr	r3, [r7, #4]
    80d2:	78fa      	ldrb	r2, [r7, #3]
    80d4:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    80d6:	bf00      	nop
    80d8:	370c      	adds	r7, #12
    80da:	46bd      	mov	sp, r7
    80dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    80e0:	4770      	bx	lr
	...

000080e4 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    80e4:	b580      	push	{r7, lr}
    80e6:	b082      	sub	sp, #8
    80e8:	af00      	add	r7, sp, #0
    80ea:	6078      	str	r0, [r7, #4]
    80ec:	460b      	mov	r3, r1
    80ee:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    80f0:	687b      	ldr	r3, [r7, #4]
    80f2:	78fa      	ldrb	r2, [r7, #3]
    80f4:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    80f6:	2120      	movs	r1, #32
    80f8:	6878      	ldr	r0, [r7, #4]
    80fa:	4b03      	ldr	r3, [pc, #12]	; (8108 <hri_tccount8_write_PER_reg+0x24>)
    80fc:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    80fe:	bf00      	nop
    8100:	3708      	adds	r7, #8
    8102:	46bd      	mov	sp, r7
    8104:	bd80      	pop	{r7, pc}
    8106:	bf00      	nop
    8108:	00007e71 	.word	0x00007e71

0000810c <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    810c:	b580      	push	{r7, lr}
    810e:	b082      	sub	sp, #8
    8110:	af00      	add	r7, sp, #0
    8112:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    8114:	2120      	movs	r1, #32
    8116:	6878      	ldr	r0, [r7, #4]
    8118:	4b04      	ldr	r3, [pc, #16]	; (812c <hri_tccount8_read_PER_reg+0x20>)
    811a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    811c:	687b      	ldr	r3, [r7, #4]
    811e:	7edb      	ldrb	r3, [r3, #27]
    8120:	b2db      	uxtb	r3, r3
}
    8122:	4618      	mov	r0, r3
    8124:	3708      	adds	r7, #8
    8126:	46bd      	mov	sp, r7
    8128:	bd80      	pop	{r7, pc}
    812a:	bf00      	nop
    812c:	00007e71 	.word	0x00007e71

00008130 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    8130:	b580      	push	{r7, lr}
    8132:	b082      	sub	sp, #8
    8134:	af00      	add	r7, sp, #0
    8136:	6078      	str	r0, [r7, #4]
    8138:	460b      	mov	r3, r1
    813a:	70fb      	strb	r3, [r7, #3]
    813c:	4613      	mov	r3, r2
    813e:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    8140:	78fb      	ldrb	r3, [r7, #3]
    8142:	687a      	ldr	r2, [r7, #4]
    8144:	4413      	add	r3, r2
    8146:	78ba      	ldrb	r2, [r7, #2]
    8148:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    814a:	21c0      	movs	r1, #192	; 0xc0
    814c:	6878      	ldr	r0, [r7, #4]
    814e:	4b03      	ldr	r3, [pc, #12]	; (815c <hri_tccount8_write_CC_reg+0x2c>)
    8150:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8152:	bf00      	nop
    8154:	3708      	adds	r7, #8
    8156:	46bd      	mov	sp, r7
    8158:	bd80      	pop	{r7, pc}
    815a:	bf00      	nop
    815c:	00007e71 	.word	0x00007e71

00008160 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    8160:	b580      	push	{r7, lr}
    8162:	b082      	sub	sp, #8
    8164:	af00      	add	r7, sp, #0
    8166:	6078      	str	r0, [r7, #4]
    8168:	460b      	mov	r3, r1
    816a:	70fb      	strb	r3, [r7, #3]
    816c:	4613      	mov	r3, r2
    816e:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    8170:	78fb      	ldrb	r3, [r7, #3]
    8172:	687a      	ldr	r2, [r7, #4]
    8174:	330c      	adds	r3, #12
    8176:	005b      	lsls	r3, r3, #1
    8178:	4413      	add	r3, r2
    817a:	883a      	ldrh	r2, [r7, #0]
    817c:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    817e:	21c0      	movs	r1, #192	; 0xc0
    8180:	6878      	ldr	r0, [r7, #4]
    8182:	4b03      	ldr	r3, [pc, #12]	; (8190 <hri_tccount16_write_CC_reg+0x30>)
    8184:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8186:	bf00      	nop
    8188:	3708      	adds	r7, #8
    818a:	46bd      	mov	sp, r7
    818c:	bd80      	pop	{r7, pc}
    818e:	bf00      	nop
    8190:	00007e71 	.word	0x00007e71

00008194 <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    8194:	b580      	push	{r7, lr}
    8196:	b082      	sub	sp, #8
    8198:	af00      	add	r7, sp, #0
    819a:	6078      	str	r0, [r7, #4]
    819c:	460b      	mov	r3, r1
    819e:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    81a0:	21c0      	movs	r1, #192	; 0xc0
    81a2:	6878      	ldr	r0, [r7, #4]
    81a4:	4b06      	ldr	r3, [pc, #24]	; (81c0 <hri_tccount16_read_CC_reg+0x2c>)
    81a6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    81a8:	78fb      	ldrb	r3, [r7, #3]
    81aa:	687a      	ldr	r2, [r7, #4]
    81ac:	330c      	adds	r3, #12
    81ae:	005b      	lsls	r3, r3, #1
    81b0:	4413      	add	r3, r2
    81b2:	889b      	ldrh	r3, [r3, #4]
    81b4:	b29b      	uxth	r3, r3
}
    81b6:	4618      	mov	r0, r3
    81b8:	3708      	adds	r7, #8
    81ba:	46bd      	mov	sp, r7
    81bc:	bd80      	pop	{r7, pc}
    81be:	bf00      	nop
    81c0:	00007e71 	.word	0x00007e71

000081c4 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    81c4:	b580      	push	{r7, lr}
    81c6:	b084      	sub	sp, #16
    81c8:	af00      	add	r7, sp, #0
    81ca:	60f8      	str	r0, [r7, #12]
    81cc:	460b      	mov	r3, r1
    81ce:	607a      	str	r2, [r7, #4]
    81d0:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    81d2:	7afb      	ldrb	r3, [r7, #11]
    81d4:	68fa      	ldr	r2, [r7, #12]
    81d6:	3306      	adds	r3, #6
    81d8:	009b      	lsls	r3, r3, #2
    81da:	4413      	add	r3, r2
    81dc:	687a      	ldr	r2, [r7, #4]
    81de:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    81e0:	21c0      	movs	r1, #192	; 0xc0
    81e2:	68f8      	ldr	r0, [r7, #12]
    81e4:	4b02      	ldr	r3, [pc, #8]	; (81f0 <hri_tccount32_write_CC_reg+0x2c>)
    81e6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    81e8:	bf00      	nop
    81ea:	3710      	adds	r7, #16
    81ec:	46bd      	mov	sp, r7
    81ee:	bd80      	pop	{r7, pc}
    81f0:	00007e71 	.word	0x00007e71

000081f4 <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    81f4:	b580      	push	{r7, lr}
    81f6:	b082      	sub	sp, #8
    81f8:	af00      	add	r7, sp, #0
    81fa:	6078      	str	r0, [r7, #4]
    81fc:	460b      	mov	r3, r1
    81fe:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8200:	21c0      	movs	r1, #192	; 0xc0
    8202:	6878      	ldr	r0, [r7, #4]
    8204:	4b05      	ldr	r3, [pc, #20]	; (821c <hri_tccount32_read_CC_reg+0x28>)
    8206:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    8208:	78fb      	ldrb	r3, [r7, #3]
    820a:	687a      	ldr	r2, [r7, #4]
    820c:	3306      	adds	r3, #6
    820e:	009b      	lsls	r3, r3, #2
    8210:	4413      	add	r3, r2
    8212:	685b      	ldr	r3, [r3, #4]
}
    8214:	4618      	mov	r0, r3
    8216:	3708      	adds	r7, #8
    8218:	46bd      	mov	sp, r7
    821a:	bd80      	pop	{r7, pc}
    821c:	00007e71 	.word	0x00007e71

00008220 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    8220:	b580      	push	{r7, lr}
    8222:	b084      	sub	sp, #16
    8224:	af00      	add	r7, sp, #0
    8226:	6078      	str	r0, [r7, #4]
    8228:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    822a:	6838      	ldr	r0, [r7, #0]
    822c:	4b93      	ldr	r3, [pc, #588]	; (847c <_tc_timer_init+0x25c>)
    822e:	4798      	blx	r3
    8230:	4603      	mov	r3, r0
    8232:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    8234:	687b      	ldr	r3, [r7, #4]
    8236:	683a      	ldr	r2, [r7, #0]
    8238:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    823a:	22a4      	movs	r2, #164	; 0xa4
    823c:	4990      	ldr	r1, [pc, #576]	; (8480 <_tc_timer_init+0x260>)
    823e:	2001      	movs	r0, #1
    8240:	4b90      	ldr	r3, [pc, #576]	; (8484 <_tc_timer_init+0x264>)
    8242:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8244:	2101      	movs	r1, #1
    8246:	6838      	ldr	r0, [r7, #0]
    8248:	4b8f      	ldr	r3, [pc, #572]	; (8488 <_tc_timer_init+0x268>)
    824a:	4798      	blx	r3
    824c:	4603      	mov	r3, r0
    824e:	f083 0301 	eor.w	r3, r3, #1
    8252:	b2db      	uxtb	r3, r3
    8254:	2b00      	cmp	r3, #0
    8256:	d011      	beq.n	827c <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8258:	2102      	movs	r1, #2
    825a:	6838      	ldr	r0, [r7, #0]
    825c:	4b8b      	ldr	r3, [pc, #556]	; (848c <_tc_timer_init+0x26c>)
    825e:	4798      	blx	r3
    8260:	4603      	mov	r3, r0
    8262:	2b00      	cmp	r3, #0
    8264:	d006      	beq.n	8274 <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    8266:	6838      	ldr	r0, [r7, #0]
    8268:	4b89      	ldr	r3, [pc, #548]	; (8490 <_tc_timer_init+0x270>)
    826a:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    826c:	2102      	movs	r1, #2
    826e:	6838      	ldr	r0, [r7, #0]
    8270:	4b88      	ldr	r3, [pc, #544]	; (8494 <_tc_timer_init+0x274>)
    8272:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    8274:	2101      	movs	r1, #1
    8276:	6838      	ldr	r0, [r7, #0]
    8278:	4b87      	ldr	r3, [pc, #540]	; (8498 <_tc_timer_init+0x278>)
    827a:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    827c:	2101      	movs	r1, #1
    827e:	6838      	ldr	r0, [r7, #0]
    8280:	4b84      	ldr	r3, [pc, #528]	; (8494 <_tc_timer_init+0x274>)
    8282:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    8284:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8288:	4984      	ldr	r1, [pc, #528]	; (849c <_tc_timer_init+0x27c>)
    828a:	4613      	mov	r3, r2
    828c:	009b      	lsls	r3, r3, #2
    828e:	4413      	add	r3, r2
    8290:	009b      	lsls	r3, r3, #2
    8292:	440b      	add	r3, r1
    8294:	3304      	adds	r3, #4
    8296:	681b      	ldr	r3, [r3, #0]
    8298:	4619      	mov	r1, r3
    829a:	6838      	ldr	r0, [r7, #0]
    829c:	4b7e      	ldr	r3, [pc, #504]	; (8498 <_tc_timer_init+0x278>)
    829e:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    82a0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    82a4:	497d      	ldr	r1, [pc, #500]	; (849c <_tc_timer_init+0x27c>)
    82a6:	4613      	mov	r3, r2
    82a8:	009b      	lsls	r3, r3, #2
    82aa:	4413      	add	r3, r2
    82ac:	009b      	lsls	r3, r3, #2
    82ae:	440b      	add	r3, r1
    82b0:	330a      	adds	r3, #10
    82b2:	781b      	ldrb	r3, [r3, #0]
    82b4:	4619      	mov	r1, r3
    82b6:	6838      	ldr	r0, [r7, #0]
    82b8:	4b79      	ldr	r3, [pc, #484]	; (84a0 <_tc_timer_init+0x280>)
    82ba:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    82bc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    82c0:	4976      	ldr	r1, [pc, #472]	; (849c <_tc_timer_init+0x27c>)
    82c2:	4613      	mov	r3, r2
    82c4:	009b      	lsls	r3, r3, #2
    82c6:	4413      	add	r3, r2
    82c8:	009b      	lsls	r3, r3, #2
    82ca:	440b      	add	r3, r1
    82cc:	3308      	adds	r3, #8
    82ce:	881b      	ldrh	r3, [r3, #0]
    82d0:	4619      	mov	r1, r3
    82d2:	6838      	ldr	r0, [r7, #0]
    82d4:	4b73      	ldr	r3, [pc, #460]	; (84a4 <_tc_timer_init+0x284>)
    82d6:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    82d8:	2101      	movs	r1, #1
    82da:	6838      	ldr	r0, [r7, #0]
    82dc:	4b72      	ldr	r3, [pc, #456]	; (84a8 <_tc_timer_init+0x288>)
    82de:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    82e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    82e4:	496d      	ldr	r1, [pc, #436]	; (849c <_tc_timer_init+0x27c>)
    82e6:	4613      	mov	r3, r2
    82e8:	009b      	lsls	r3, r3, #2
    82ea:	4413      	add	r3, r2
    82ec:	009b      	lsls	r3, r3, #2
    82ee:	440b      	add	r3, r1
    82f0:	3304      	adds	r3, #4
    82f2:	681b      	ldr	r3, [r3, #0]
    82f4:	f003 030c 	and.w	r3, r3, #12
    82f8:	2b08      	cmp	r3, #8
    82fa:	d11e      	bne.n	833a <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    82fc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8300:	4966      	ldr	r1, [pc, #408]	; (849c <_tc_timer_init+0x27c>)
    8302:	4613      	mov	r3, r2
    8304:	009b      	lsls	r3, r3, #2
    8306:	4413      	add	r3, r2
    8308:	009b      	lsls	r3, r3, #2
    830a:	440b      	add	r3, r1
    830c:	330c      	adds	r3, #12
    830e:	681b      	ldr	r3, [r3, #0]
    8310:	461a      	mov	r2, r3
    8312:	2100      	movs	r1, #0
    8314:	6838      	ldr	r0, [r7, #0]
    8316:	4b65      	ldr	r3, [pc, #404]	; (84ac <_tc_timer_init+0x28c>)
    8318:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    831a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    831e:	495f      	ldr	r1, [pc, #380]	; (849c <_tc_timer_init+0x27c>)
    8320:	4613      	mov	r3, r2
    8322:	009b      	lsls	r3, r3, #2
    8324:	4413      	add	r3, r2
    8326:	009b      	lsls	r3, r3, #2
    8328:	440b      	add	r3, r1
    832a:	3310      	adds	r3, #16
    832c:	681b      	ldr	r3, [r3, #0]
    832e:	461a      	mov	r2, r3
    8330:	2101      	movs	r1, #1
    8332:	6838      	ldr	r0, [r7, #0]
    8334:	4b5d      	ldr	r3, [pc, #372]	; (84ac <_tc_timer_init+0x28c>)
    8336:	4798      	blx	r3
    8338:	e06a      	b.n	8410 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    833a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    833e:	4957      	ldr	r1, [pc, #348]	; (849c <_tc_timer_init+0x27c>)
    8340:	4613      	mov	r3, r2
    8342:	009b      	lsls	r3, r3, #2
    8344:	4413      	add	r3, r2
    8346:	009b      	lsls	r3, r3, #2
    8348:	440b      	add	r3, r1
    834a:	3304      	adds	r3, #4
    834c:	681b      	ldr	r3, [r3, #0]
    834e:	f003 030c 	and.w	r3, r3, #12
    8352:	2b00      	cmp	r3, #0
    8354:	d120      	bne.n	8398 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8356:	f997 200f 	ldrsb.w	r2, [r7, #15]
    835a:	4950      	ldr	r1, [pc, #320]	; (849c <_tc_timer_init+0x27c>)
    835c:	4613      	mov	r3, r2
    835e:	009b      	lsls	r3, r3, #2
    8360:	4413      	add	r3, r2
    8362:	009b      	lsls	r3, r3, #2
    8364:	440b      	add	r3, r1
    8366:	330c      	adds	r3, #12
    8368:	681b      	ldr	r3, [r3, #0]
    836a:	b29b      	uxth	r3, r3
    836c:	461a      	mov	r2, r3
    836e:	2100      	movs	r1, #0
    8370:	6838      	ldr	r0, [r7, #0]
    8372:	4b4f      	ldr	r3, [pc, #316]	; (84b0 <_tc_timer_init+0x290>)
    8374:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    8376:	f997 200f 	ldrsb.w	r2, [r7, #15]
    837a:	4948      	ldr	r1, [pc, #288]	; (849c <_tc_timer_init+0x27c>)
    837c:	4613      	mov	r3, r2
    837e:	009b      	lsls	r3, r3, #2
    8380:	4413      	add	r3, r2
    8382:	009b      	lsls	r3, r3, #2
    8384:	440b      	add	r3, r1
    8386:	3310      	adds	r3, #16
    8388:	681b      	ldr	r3, [r3, #0]
    838a:	b29b      	uxth	r3, r3
    838c:	461a      	mov	r2, r3
    838e:	2101      	movs	r1, #1
    8390:	6838      	ldr	r0, [r7, #0]
    8392:	4b47      	ldr	r3, [pc, #284]	; (84b0 <_tc_timer_init+0x290>)
    8394:	4798      	blx	r3
    8396:	e03b      	b.n	8410 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8398:	f997 200f 	ldrsb.w	r2, [r7, #15]
    839c:	493f      	ldr	r1, [pc, #252]	; (849c <_tc_timer_init+0x27c>)
    839e:	4613      	mov	r3, r2
    83a0:	009b      	lsls	r3, r3, #2
    83a2:	4413      	add	r3, r2
    83a4:	009b      	lsls	r3, r3, #2
    83a6:	440b      	add	r3, r1
    83a8:	3304      	adds	r3, #4
    83aa:	681b      	ldr	r3, [r3, #0]
    83ac:	f003 030c 	and.w	r3, r3, #12
    83b0:	2b04      	cmp	r3, #4
    83b2:	d12d      	bne.n	8410 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    83b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    83b8:	4938      	ldr	r1, [pc, #224]	; (849c <_tc_timer_init+0x27c>)
    83ba:	4613      	mov	r3, r2
    83bc:	009b      	lsls	r3, r3, #2
    83be:	4413      	add	r3, r2
    83c0:	009b      	lsls	r3, r3, #2
    83c2:	440b      	add	r3, r1
    83c4:	330c      	adds	r3, #12
    83c6:	681b      	ldr	r3, [r3, #0]
    83c8:	b2db      	uxtb	r3, r3
    83ca:	461a      	mov	r2, r3
    83cc:	2100      	movs	r1, #0
    83ce:	6838      	ldr	r0, [r7, #0]
    83d0:	4b38      	ldr	r3, [pc, #224]	; (84b4 <_tc_timer_init+0x294>)
    83d2:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    83d4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    83d8:	4930      	ldr	r1, [pc, #192]	; (849c <_tc_timer_init+0x27c>)
    83da:	4613      	mov	r3, r2
    83dc:	009b      	lsls	r3, r3, #2
    83de:	4413      	add	r3, r2
    83e0:	009b      	lsls	r3, r3, #2
    83e2:	440b      	add	r3, r1
    83e4:	3310      	adds	r3, #16
    83e6:	681b      	ldr	r3, [r3, #0]
    83e8:	b2db      	uxtb	r3, r3
    83ea:	461a      	mov	r2, r3
    83ec:	2101      	movs	r1, #1
    83ee:	6838      	ldr	r0, [r7, #0]
    83f0:	4b30      	ldr	r3, [pc, #192]	; (84b4 <_tc_timer_init+0x294>)
    83f2:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    83f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    83f8:	4928      	ldr	r1, [pc, #160]	; (849c <_tc_timer_init+0x27c>)
    83fa:	4613      	mov	r3, r2
    83fc:	009b      	lsls	r3, r3, #2
    83fe:	4413      	add	r3, r2
    8400:	009b      	lsls	r3, r3, #2
    8402:	440b      	add	r3, r1
    8404:	330b      	adds	r3, #11
    8406:	781b      	ldrb	r3, [r3, #0]
    8408:	4619      	mov	r1, r3
    840a:	6838      	ldr	r0, [r7, #0]
    840c:	4b2a      	ldr	r3, [pc, #168]	; (84b8 <_tc_timer_init+0x298>)
    840e:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    8410:	6838      	ldr	r0, [r7, #0]
    8412:	4b2a      	ldr	r3, [pc, #168]	; (84bc <_tc_timer_init+0x29c>)
    8414:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    8416:	6879      	ldr	r1, [r7, #4]
    8418:	6838      	ldr	r0, [r7, #0]
    841a:	4b29      	ldr	r3, [pc, #164]	; (84c0 <_tc_timer_init+0x2a0>)
    841c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    841e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8422:	491e      	ldr	r1, [pc, #120]	; (849c <_tc_timer_init+0x27c>)
    8424:	4613      	mov	r3, r2
    8426:	009b      	lsls	r3, r3, #2
    8428:	4413      	add	r3, r2
    842a:	009b      	lsls	r3, r3, #2
    842c:	440b      	add	r3, r1
    842e:	3302      	adds	r3, #2
    8430:	f9b3 3000 	ldrsh.w	r3, [r3]
    8434:	4618      	mov	r0, r3
    8436:	4b23      	ldr	r3, [pc, #140]	; (84c4 <_tc_timer_init+0x2a4>)
    8438:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    843a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    843e:	4917      	ldr	r1, [pc, #92]	; (849c <_tc_timer_init+0x27c>)
    8440:	4613      	mov	r3, r2
    8442:	009b      	lsls	r3, r3, #2
    8444:	4413      	add	r3, r2
    8446:	009b      	lsls	r3, r3, #2
    8448:	440b      	add	r3, r1
    844a:	3302      	adds	r3, #2
    844c:	f9b3 3000 	ldrsh.w	r3, [r3]
    8450:	4618      	mov	r0, r3
    8452:	4b1d      	ldr	r3, [pc, #116]	; (84c8 <_tc_timer_init+0x2a8>)
    8454:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8456:	f997 200f 	ldrsb.w	r2, [r7, #15]
    845a:	4910      	ldr	r1, [pc, #64]	; (849c <_tc_timer_init+0x27c>)
    845c:	4613      	mov	r3, r2
    845e:	009b      	lsls	r3, r3, #2
    8460:	4413      	add	r3, r2
    8462:	009b      	lsls	r3, r3, #2
    8464:	440b      	add	r3, r1
    8466:	3302      	adds	r3, #2
    8468:	f9b3 3000 	ldrsh.w	r3, [r3]
    846c:	4618      	mov	r0, r3
    846e:	4b17      	ldr	r3, [pc, #92]	; (84cc <_tc_timer_init+0x2ac>)
    8470:	4798      	blx	r3

	return ERR_NONE;
    8472:	2300      	movs	r3, #0
}
    8474:	4618      	mov	r0, r3
    8476:	3710      	adds	r7, #16
    8478:	46bd      	mov	sp, r7
    847a:	bd80      	pop	{r7, pc}
    847c:	00008a71 	.word	0x00008a71
    8480:	00013700 	.word	0x00013700
    8484:	00003e05 	.word	0x00003e05
    8488:	00007e95 	.word	0x00007e95
    848c:	00008035 	.word	0x00008035
    8490:	00007fe5 	.word	0x00007fe5
    8494:	00007e71 	.word	0x00007e71
    8498:	00008065 	.word	0x00008065
    849c:	200000e0 	.word	0x200000e0
    84a0:	000080c5 	.word	0x000080c5
    84a4:	00008089 	.word	0x00008089
    84a8:	000080a7 	.word	0x000080a7
    84ac:	000081c5 	.word	0x000081c5
    84b0:	00008161 	.word	0x00008161
    84b4:	00008131 	.word	0x00008131
    84b8:	000080e5 	.word	0x000080e5
    84bc:	00007f19 	.word	0x00007f19
    84c0:	00008ad9 	.word	0x00008ad9
    84c4:	00007df1 	.word	0x00007df1
    84c8:	00007e35 	.word	0x00007e35
    84cc:	00007db5 	.word	0x00007db5

000084d0 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    84d0:	b580      	push	{r7, lr}
    84d2:	b084      	sub	sp, #16
    84d4:	af00      	add	r7, sp, #0
    84d6:	6078      	str	r0, [r7, #4]
    84d8:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    84da:	6838      	ldr	r0, [r7, #0]
    84dc:	4b73      	ldr	r3, [pc, #460]	; (86ac <_pwm_init+0x1dc>)
    84de:	4798      	blx	r3
    84e0:	4603      	mov	r3, r0
    84e2:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    84e4:	687b      	ldr	r3, [r7, #4]
    84e6:	683a      	ldr	r2, [r7, #0]
    84e8:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    84ea:	2101      	movs	r1, #1
    84ec:	6838      	ldr	r0, [r7, #0]
    84ee:	4b70      	ldr	r3, [pc, #448]	; (86b0 <_pwm_init+0x1e0>)
    84f0:	4798      	blx	r3
    84f2:	4603      	mov	r3, r0
    84f4:	f083 0301 	eor.w	r3, r3, #1
    84f8:	b2db      	uxtb	r3, r3
    84fa:	2b00      	cmp	r3, #0
    84fc:	d011      	beq.n	8522 <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    84fe:	2102      	movs	r1, #2
    8500:	6838      	ldr	r0, [r7, #0]
    8502:	4b6c      	ldr	r3, [pc, #432]	; (86b4 <_pwm_init+0x1e4>)
    8504:	4798      	blx	r3
    8506:	4603      	mov	r3, r0
    8508:	2b00      	cmp	r3, #0
    850a:	d006      	beq.n	851a <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    850c:	6838      	ldr	r0, [r7, #0]
    850e:	4b6a      	ldr	r3, [pc, #424]	; (86b8 <_pwm_init+0x1e8>)
    8510:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8512:	2102      	movs	r1, #2
    8514:	6838      	ldr	r0, [r7, #0]
    8516:	4b69      	ldr	r3, [pc, #420]	; (86bc <_pwm_init+0x1ec>)
    8518:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    851a:	2101      	movs	r1, #1
    851c:	6838      	ldr	r0, [r7, #0]
    851e:	4b68      	ldr	r3, [pc, #416]	; (86c0 <_pwm_init+0x1f0>)
    8520:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8522:	2101      	movs	r1, #1
    8524:	6838      	ldr	r0, [r7, #0]
    8526:	4b65      	ldr	r3, [pc, #404]	; (86bc <_pwm_init+0x1ec>)
    8528:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    852a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    852e:	4965      	ldr	r1, [pc, #404]	; (86c4 <_pwm_init+0x1f4>)
    8530:	4613      	mov	r3, r2
    8532:	009b      	lsls	r3, r3, #2
    8534:	4413      	add	r3, r2
    8536:	009b      	lsls	r3, r3, #2
    8538:	440b      	add	r3, r1
    853a:	3304      	adds	r3, #4
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	4619      	mov	r1, r3
    8540:	6838      	ldr	r0, [r7, #0]
    8542:	4b5f      	ldr	r3, [pc, #380]	; (86c0 <_pwm_init+0x1f0>)
    8544:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8546:	f997 200f 	ldrsb.w	r2, [r7, #15]
    854a:	495e      	ldr	r1, [pc, #376]	; (86c4 <_pwm_init+0x1f4>)
    854c:	4613      	mov	r3, r2
    854e:	009b      	lsls	r3, r3, #2
    8550:	4413      	add	r3, r2
    8552:	009b      	lsls	r3, r3, #2
    8554:	440b      	add	r3, r1
    8556:	330a      	adds	r3, #10
    8558:	781b      	ldrb	r3, [r3, #0]
    855a:	4619      	mov	r1, r3
    855c:	6838      	ldr	r0, [r7, #0]
    855e:	4b5a      	ldr	r3, [pc, #360]	; (86c8 <_pwm_init+0x1f8>)
    8560:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8562:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8566:	4957      	ldr	r1, [pc, #348]	; (86c4 <_pwm_init+0x1f4>)
    8568:	4613      	mov	r3, r2
    856a:	009b      	lsls	r3, r3, #2
    856c:	4413      	add	r3, r2
    856e:	009b      	lsls	r3, r3, #2
    8570:	440b      	add	r3, r1
    8572:	3308      	adds	r3, #8
    8574:	881b      	ldrh	r3, [r3, #0]
    8576:	4619      	mov	r1, r3
    8578:	6838      	ldr	r0, [r7, #0]
    857a:	4b54      	ldr	r3, [pc, #336]	; (86cc <_pwm_init+0x1fc>)
    857c:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    857e:	2103      	movs	r1, #3
    8580:	6838      	ldr	r0, [r7, #0]
    8582:	4b53      	ldr	r3, [pc, #332]	; (86d0 <_pwm_init+0x200>)
    8584:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8586:	f997 200f 	ldrsb.w	r2, [r7, #15]
    858a:	494e      	ldr	r1, [pc, #312]	; (86c4 <_pwm_init+0x1f4>)
    858c:	4613      	mov	r3, r2
    858e:	009b      	lsls	r3, r3, #2
    8590:	4413      	add	r3, r2
    8592:	009b      	lsls	r3, r3, #2
    8594:	440b      	add	r3, r1
    8596:	3304      	adds	r3, #4
    8598:	681b      	ldr	r3, [r3, #0]
    859a:	f003 030c 	and.w	r3, r3, #12
    859e:	2b08      	cmp	r3, #8
    85a0:	d11e      	bne.n	85e0 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    85a2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85a6:	4947      	ldr	r1, [pc, #284]	; (86c4 <_pwm_init+0x1f4>)
    85a8:	4613      	mov	r3, r2
    85aa:	009b      	lsls	r3, r3, #2
    85ac:	4413      	add	r3, r2
    85ae:	009b      	lsls	r3, r3, #2
    85b0:	440b      	add	r3, r1
    85b2:	330c      	adds	r3, #12
    85b4:	681b      	ldr	r3, [r3, #0]
    85b6:	461a      	mov	r2, r3
    85b8:	2100      	movs	r1, #0
    85ba:	6838      	ldr	r0, [r7, #0]
    85bc:	4b45      	ldr	r3, [pc, #276]	; (86d4 <_pwm_init+0x204>)
    85be:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    85c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85c4:	493f      	ldr	r1, [pc, #252]	; (86c4 <_pwm_init+0x1f4>)
    85c6:	4613      	mov	r3, r2
    85c8:	009b      	lsls	r3, r3, #2
    85ca:	4413      	add	r3, r2
    85cc:	009b      	lsls	r3, r3, #2
    85ce:	440b      	add	r3, r1
    85d0:	3310      	adds	r3, #16
    85d2:	681b      	ldr	r3, [r3, #0]
    85d4:	461a      	mov	r2, r3
    85d6:	2101      	movs	r1, #1
    85d8:	6838      	ldr	r0, [r7, #0]
    85da:	4b3e      	ldr	r3, [pc, #248]	; (86d4 <_pwm_init+0x204>)
    85dc:	4798      	blx	r3
    85de:	e031      	b.n	8644 <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    85e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85e4:	4937      	ldr	r1, [pc, #220]	; (86c4 <_pwm_init+0x1f4>)
    85e6:	4613      	mov	r3, r2
    85e8:	009b      	lsls	r3, r3, #2
    85ea:	4413      	add	r3, r2
    85ec:	009b      	lsls	r3, r3, #2
    85ee:	440b      	add	r3, r1
    85f0:	3304      	adds	r3, #4
    85f2:	681b      	ldr	r3, [r3, #0]
    85f4:	f003 030c 	and.w	r3, r3, #12
    85f8:	2b00      	cmp	r3, #0
    85fa:	d120      	bne.n	863e <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    85fc:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8600:	4930      	ldr	r1, [pc, #192]	; (86c4 <_pwm_init+0x1f4>)
    8602:	4613      	mov	r3, r2
    8604:	009b      	lsls	r3, r3, #2
    8606:	4413      	add	r3, r2
    8608:	009b      	lsls	r3, r3, #2
    860a:	440b      	add	r3, r1
    860c:	330c      	adds	r3, #12
    860e:	681b      	ldr	r3, [r3, #0]
    8610:	b29b      	uxth	r3, r3
    8612:	461a      	mov	r2, r3
    8614:	2100      	movs	r1, #0
    8616:	6838      	ldr	r0, [r7, #0]
    8618:	4b2f      	ldr	r3, [pc, #188]	; (86d8 <_pwm_init+0x208>)
    861a:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    861c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8620:	4928      	ldr	r1, [pc, #160]	; (86c4 <_pwm_init+0x1f4>)
    8622:	4613      	mov	r3, r2
    8624:	009b      	lsls	r3, r3, #2
    8626:	4413      	add	r3, r2
    8628:	009b      	lsls	r3, r3, #2
    862a:	440b      	add	r3, r1
    862c:	3310      	adds	r3, #16
    862e:	681b      	ldr	r3, [r3, #0]
    8630:	b29b      	uxth	r3, r3
    8632:	461a      	mov	r2, r3
    8634:	2101      	movs	r1, #1
    8636:	6838      	ldr	r0, [r7, #0]
    8638:	4b27      	ldr	r3, [pc, #156]	; (86d8 <_pwm_init+0x208>)
    863a:	4798      	blx	r3
    863c:	e002      	b.n	8644 <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    863e:	f04f 33ff 	mov.w	r3, #4294967295
    8642:	e02e      	b.n	86a2 <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    8644:	6879      	ldr	r1, [r7, #4]
    8646:	6838      	ldr	r0, [r7, #0]
    8648:	4b24      	ldr	r3, [pc, #144]	; (86dc <_pwm_init+0x20c>)
    864a:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    864c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8650:	491c      	ldr	r1, [pc, #112]	; (86c4 <_pwm_init+0x1f4>)
    8652:	4613      	mov	r3, r2
    8654:	009b      	lsls	r3, r3, #2
    8656:	4413      	add	r3, r2
    8658:	009b      	lsls	r3, r3, #2
    865a:	440b      	add	r3, r1
    865c:	3302      	adds	r3, #2
    865e:	f9b3 3000 	ldrsh.w	r3, [r3]
    8662:	4618      	mov	r0, r3
    8664:	4b1e      	ldr	r3, [pc, #120]	; (86e0 <_pwm_init+0x210>)
    8666:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8668:	f997 200f 	ldrsb.w	r2, [r7, #15]
    866c:	4915      	ldr	r1, [pc, #84]	; (86c4 <_pwm_init+0x1f4>)
    866e:	4613      	mov	r3, r2
    8670:	009b      	lsls	r3, r3, #2
    8672:	4413      	add	r3, r2
    8674:	009b      	lsls	r3, r3, #2
    8676:	440b      	add	r3, r1
    8678:	3302      	adds	r3, #2
    867a:	f9b3 3000 	ldrsh.w	r3, [r3]
    867e:	4618      	mov	r0, r3
    8680:	4b18      	ldr	r3, [pc, #96]	; (86e4 <_pwm_init+0x214>)
    8682:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    8684:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8688:	490e      	ldr	r1, [pc, #56]	; (86c4 <_pwm_init+0x1f4>)
    868a:	4613      	mov	r3, r2
    868c:	009b      	lsls	r3, r3, #2
    868e:	4413      	add	r3, r2
    8690:	009b      	lsls	r3, r3, #2
    8692:	440b      	add	r3, r1
    8694:	3302      	adds	r3, #2
    8696:	f9b3 3000 	ldrsh.w	r3, [r3]
    869a:	4618      	mov	r0, r3
    869c:	4b12      	ldr	r3, [pc, #72]	; (86e8 <_pwm_init+0x218>)
    869e:	4798      	blx	r3

	return 0;
    86a0:	2300      	movs	r3, #0
}
    86a2:	4618      	mov	r0, r3
    86a4:	3710      	adds	r7, #16
    86a6:	46bd      	mov	sp, r7
    86a8:	bd80      	pop	{r7, pc}
    86aa:	bf00      	nop
    86ac:	00008a71 	.word	0x00008a71
    86b0:	00007e95 	.word	0x00007e95
    86b4:	00008035 	.word	0x00008035
    86b8:	00007fe5 	.word	0x00007fe5
    86bc:	00007e71 	.word	0x00007e71
    86c0:	00008065 	.word	0x00008065
    86c4:	200000e0 	.word	0x200000e0
    86c8:	000080c5 	.word	0x000080c5
    86cc:	00008089 	.word	0x00008089
    86d0:	000080a7 	.word	0x000080a7
    86d4:	000081c5 	.word	0x000081c5
    86d8:	00008161 	.word	0x00008161
    86dc:	00008ad9 	.word	0x00008ad9
    86e0:	00007df1 	.word	0x00007df1
    86e4:	00007e35 	.word	0x00007e35
    86e8:	00007db5 	.word	0x00007db5

000086ec <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    86ec:	b580      	push	{r7, lr}
    86ee:	b084      	sub	sp, #16
    86f0:	af00      	add	r7, sp, #0
    86f2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    86f4:	687b      	ldr	r3, [r7, #4]
    86f6:	68db      	ldr	r3, [r3, #12]
    86f8:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    86fa:	68f8      	ldr	r0, [r7, #12]
    86fc:	4b10      	ldr	r3, [pc, #64]	; (8740 <_tc_timer_deinit+0x54>)
    86fe:	4798      	blx	r3
    8700:	4603      	mov	r3, r0
    8702:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8704:	22f9      	movs	r2, #249	; 0xf9
    8706:	490f      	ldr	r1, [pc, #60]	; (8744 <_tc_timer_deinit+0x58>)
    8708:	2001      	movs	r0, #1
    870a:	4b0f      	ldr	r3, [pc, #60]	; (8748 <_tc_timer_deinit+0x5c>)
    870c:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    870e:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8712:	490e      	ldr	r1, [pc, #56]	; (874c <_tc_timer_deinit+0x60>)
    8714:	4613      	mov	r3, r2
    8716:	009b      	lsls	r3, r3, #2
    8718:	4413      	add	r3, r2
    871a:	009b      	lsls	r3, r3, #2
    871c:	440b      	add	r3, r1
    871e:	3302      	adds	r3, #2
    8720:	f9b3 3000 	ldrsh.w	r3, [r3]
    8724:	4618      	mov	r0, r3
    8726:	4b0a      	ldr	r3, [pc, #40]	; (8750 <_tc_timer_deinit+0x64>)
    8728:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    872a:	68f8      	ldr	r0, [r7, #12]
    872c:	4b09      	ldr	r3, [pc, #36]	; (8754 <_tc_timer_deinit+0x68>)
    872e:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    8730:	68f8      	ldr	r0, [r7, #12]
    8732:	4b09      	ldr	r3, [pc, #36]	; (8758 <_tc_timer_deinit+0x6c>)
    8734:	4798      	blx	r3
}
    8736:	bf00      	nop
    8738:	3710      	adds	r7, #16
    873a:	46bd      	mov	sp, r7
    873c:	bd80      	pop	{r7, pc}
    873e:	bf00      	nop
    8740:	00008a71 	.word	0x00008a71
    8744:	00013700 	.word	0x00013700
    8748:	00003e05 	.word	0x00003e05
    874c:	200000e0 	.word	0x200000e0
    8750:	00007df1 	.word	0x00007df1
    8754:	00007fe5 	.word	0x00007fe5
    8758:	00007f5d 	.word	0x00007f5d

0000875c <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    875c:	b580      	push	{r7, lr}
    875e:	b082      	sub	sp, #8
    8760:	af00      	add	r7, sp, #0
    8762:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    8764:	687b      	ldr	r3, [r7, #4]
    8766:	68db      	ldr	r3, [r3, #12]
    8768:	4618      	mov	r0, r3
    876a:	4b03      	ldr	r3, [pc, #12]	; (8778 <_tc_timer_start+0x1c>)
    876c:	4798      	blx	r3
}
    876e:	bf00      	nop
    8770:	3708      	adds	r7, #8
    8772:	46bd      	mov	sp, r7
    8774:	bd80      	pop	{r7, pc}
    8776:	bf00      	nop
    8778:	00007f85 	.word	0x00007f85

0000877c <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    877c:	b580      	push	{r7, lr}
    877e:	b082      	sub	sp, #8
    8780:	af00      	add	r7, sp, #0
    8782:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8784:	687b      	ldr	r3, [r7, #4]
    8786:	68db      	ldr	r3, [r3, #12]
    8788:	4618      	mov	r0, r3
    878a:	4b03      	ldr	r3, [pc, #12]	; (8798 <_tc_timer_stop+0x1c>)
    878c:	4798      	blx	r3
}
    878e:	bf00      	nop
    8790:	3708      	adds	r7, #8
    8792:	46bd      	mov	sp, r7
    8794:	bd80      	pop	{r7, pc}
    8796:	bf00      	nop
    8798:	00007fe5 	.word	0x00007fe5

0000879c <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    879c:	b580      	push	{r7, lr}
    879e:	b084      	sub	sp, #16
    87a0:	af00      	add	r7, sp, #0
    87a2:	6078      	str	r0, [r7, #4]
    87a4:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    87a6:	687b      	ldr	r3, [r7, #4]
    87a8:	68db      	ldr	r3, [r3, #12]
    87aa:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    87ac:	68f8      	ldr	r0, [r7, #12]
    87ae:	4b14      	ldr	r3, [pc, #80]	; (8800 <_tc_timer_set_period+0x64>)
    87b0:	4798      	blx	r3
    87b2:	4603      	mov	r3, r0
    87b4:	2b02      	cmp	r3, #2
    87b6:	d105      	bne.n	87c4 <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    87b8:	683a      	ldr	r2, [r7, #0]
    87ba:	2100      	movs	r1, #0
    87bc:	68f8      	ldr	r0, [r7, #12]
    87be:	4b11      	ldr	r3, [pc, #68]	; (8804 <_tc_timer_set_period+0x68>)
    87c0:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    87c2:	e019      	b.n	87f8 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    87c4:	68f8      	ldr	r0, [r7, #12]
    87c6:	4b0e      	ldr	r3, [pc, #56]	; (8800 <_tc_timer_set_period+0x64>)
    87c8:	4798      	blx	r3
    87ca:	4603      	mov	r3, r0
    87cc:	2b00      	cmp	r3, #0
    87ce:	d107      	bne.n	87e0 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    87d0:	683b      	ldr	r3, [r7, #0]
    87d2:	b29b      	uxth	r3, r3
    87d4:	461a      	mov	r2, r3
    87d6:	2100      	movs	r1, #0
    87d8:	68f8      	ldr	r0, [r7, #12]
    87da:	4b0b      	ldr	r3, [pc, #44]	; (8808 <_tc_timer_set_period+0x6c>)
    87dc:	4798      	blx	r3
}
    87de:	e00b      	b.n	87f8 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    87e0:	68f8      	ldr	r0, [r7, #12]
    87e2:	4b07      	ldr	r3, [pc, #28]	; (8800 <_tc_timer_set_period+0x64>)
    87e4:	4798      	blx	r3
    87e6:	4603      	mov	r3, r0
    87e8:	2b01      	cmp	r3, #1
    87ea:	d105      	bne.n	87f8 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    87ec:	683b      	ldr	r3, [r7, #0]
    87ee:	b2db      	uxtb	r3, r3
    87f0:	4619      	mov	r1, r3
    87f2:	68f8      	ldr	r0, [r7, #12]
    87f4:	4b05      	ldr	r3, [pc, #20]	; (880c <_tc_timer_set_period+0x70>)
    87f6:	4798      	blx	r3
}
    87f8:	bf00      	nop
    87fa:	3710      	adds	r7, #16
    87fc:	46bd      	mov	sp, r7
    87fe:	bd80      	pop	{r7, pc}
    8800:	0000800d 	.word	0x0000800d
    8804:	000081c5 	.word	0x000081c5
    8808:	00008161 	.word	0x00008161
    880c:	000080e5 	.word	0x000080e5

00008810 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8810:	b580      	push	{r7, lr}
    8812:	b084      	sub	sp, #16
    8814:	af00      	add	r7, sp, #0
    8816:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8818:	687b      	ldr	r3, [r7, #4]
    881a:	68db      	ldr	r3, [r3, #12]
    881c:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    881e:	68f8      	ldr	r0, [r7, #12]
    8820:	4b13      	ldr	r3, [pc, #76]	; (8870 <_tc_timer_get_period+0x60>)
    8822:	4798      	blx	r3
    8824:	4603      	mov	r3, r0
    8826:	2b02      	cmp	r3, #2
    8828:	d105      	bne.n	8836 <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    882a:	2100      	movs	r1, #0
    882c:	68f8      	ldr	r0, [r7, #12]
    882e:	4b11      	ldr	r3, [pc, #68]	; (8874 <_tc_timer_get_period+0x64>)
    8830:	4798      	blx	r3
    8832:	4603      	mov	r3, r0
    8834:	e017      	b.n	8866 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8836:	68f8      	ldr	r0, [r7, #12]
    8838:	4b0d      	ldr	r3, [pc, #52]	; (8870 <_tc_timer_get_period+0x60>)
    883a:	4798      	blx	r3
    883c:	4603      	mov	r3, r0
    883e:	2b00      	cmp	r3, #0
    8840:	d105      	bne.n	884e <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8842:	2100      	movs	r1, #0
    8844:	68f8      	ldr	r0, [r7, #12]
    8846:	4b0c      	ldr	r3, [pc, #48]	; (8878 <_tc_timer_get_period+0x68>)
    8848:	4798      	blx	r3
    884a:	4603      	mov	r3, r0
    884c:	e00b      	b.n	8866 <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    884e:	68f8      	ldr	r0, [r7, #12]
    8850:	4b07      	ldr	r3, [pc, #28]	; (8870 <_tc_timer_get_period+0x60>)
    8852:	4798      	blx	r3
    8854:	4603      	mov	r3, r0
    8856:	2b01      	cmp	r3, #1
    8858:	d104      	bne.n	8864 <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    885a:	68f8      	ldr	r0, [r7, #12]
    885c:	4b07      	ldr	r3, [pc, #28]	; (887c <_tc_timer_get_period+0x6c>)
    885e:	4798      	blx	r3
    8860:	4603      	mov	r3, r0
    8862:	e000      	b.n	8866 <_tc_timer_get_period+0x56>
	}

	return 0;
    8864:	2300      	movs	r3, #0
}
    8866:	4618      	mov	r0, r3
    8868:	3710      	adds	r7, #16
    886a:	46bd      	mov	sp, r7
    886c:	bd80      	pop	{r7, pc}
    886e:	bf00      	nop
    8870:	0000800d 	.word	0x0000800d
    8874:	000081f5 	.word	0x000081f5
    8878:	00008195 	.word	0x00008195
    887c:	0000810d 	.word	0x0000810d

00008880 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8880:	b580      	push	{r7, lr}
    8882:	b082      	sub	sp, #8
    8884:	af00      	add	r7, sp, #0
    8886:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8888:	687b      	ldr	r3, [r7, #4]
    888a:	68db      	ldr	r3, [r3, #12]
    888c:	4618      	mov	r0, r3
    888e:	4b03      	ldr	r3, [pc, #12]	; (889c <_tc_timer_is_started+0x1c>)
    8890:	4798      	blx	r3
    8892:	4603      	mov	r3, r0
}
    8894:	4618      	mov	r0, r3
    8896:	3708      	adds	r7, #8
    8898:	46bd      	mov	sp, r7
    889a:	bd80      	pop	{r7, pc}
    889c:	00007fad 	.word	0x00007fad

000088a0 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    88a0:	b480      	push	{r7}
    88a2:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    88a4:	4b02      	ldr	r3, [pc, #8]	; (88b0 <_tc_get_timer+0x10>)
}
    88a6:	4618      	mov	r0, r3
    88a8:	46bd      	mov	sp, r7
    88aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    88ae:	4770      	bx	lr
    88b0:	20000158 	.word	0x20000158

000088b4 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    88b4:	b480      	push	{r7}
    88b6:	af00      	add	r7, sp, #0
	return NULL;
    88b8:	2300      	movs	r3, #0
}
    88ba:	4618      	mov	r0, r3
    88bc:	46bd      	mov	sp, r7
    88be:	f85d 7b04 	ldr.w	r7, [sp], #4
    88c2:	4770      	bx	lr

000088c4 <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    88c4:	b580      	push	{r7, lr}
    88c6:	b084      	sub	sp, #16
    88c8:	af00      	add	r7, sp, #0
    88ca:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    88cc:	687b      	ldr	r3, [r7, #4]
    88ce:	68db      	ldr	r3, [r3, #12]
    88d0:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    88d2:	68f8      	ldr	r0, [r7, #12]
    88d4:	4b0e      	ldr	r3, [pc, #56]	; (8910 <_tc_timer_set_irq+0x4c>)
    88d6:	4798      	blx	r3
    88d8:	4603      	mov	r3, r0
    88da:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    88dc:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    88e0:	490c      	ldr	r1, [pc, #48]	; (8914 <_tc_timer_set_irq+0x50>)
    88e2:	2001      	movs	r0, #1
    88e4:	4b0c      	ldr	r3, [pc, #48]	; (8918 <_tc_timer_set_irq+0x54>)
    88e6:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    88e8:	f997 200b 	ldrsb.w	r2, [r7, #11]
    88ec:	490b      	ldr	r1, [pc, #44]	; (891c <_tc_timer_set_irq+0x58>)
    88ee:	4613      	mov	r3, r2
    88f0:	009b      	lsls	r3, r3, #2
    88f2:	4413      	add	r3, r2
    88f4:	009b      	lsls	r3, r3, #2
    88f6:	440b      	add	r3, r1
    88f8:	3302      	adds	r3, #2
    88fa:	f9b3 3000 	ldrsh.w	r3, [r3]
    88fe:	b2db      	uxtb	r3, r3
    8900:	4618      	mov	r0, r3
    8902:	4b07      	ldr	r3, [pc, #28]	; (8920 <_tc_timer_set_irq+0x5c>)
    8904:	4798      	blx	r3
}
    8906:	bf00      	nop
    8908:	3710      	adds	r7, #16
    890a:	46bd      	mov	sp, r7
    890c:	bd80      	pop	{r7, pc}
    890e:	bf00      	nop
    8910:	00008a71 	.word	0x00008a71
    8914:	00013700 	.word	0x00013700
    8918:	00003e05 	.word	0x00003e05
    891c:	200000e0 	.word	0x200000e0
    8920:	00004651 	.word	0x00004651

00008924 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8924:	b580      	push	{r7, lr}
    8926:	b084      	sub	sp, #16
    8928:	af00      	add	r7, sp, #0
    892a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    892c:	687b      	ldr	r3, [r7, #4]
    892e:	68db      	ldr	r3, [r3, #12]
    8930:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8932:	68f8      	ldr	r0, [r7, #12]
    8934:	4b07      	ldr	r3, [pc, #28]	; (8954 <tc_interrupt_handler+0x30>)
    8936:	4798      	blx	r3
    8938:	4603      	mov	r3, r0
    893a:	2b00      	cmp	r3, #0
    893c:	d006      	beq.n	894c <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    893e:	68f8      	ldr	r0, [r7, #12]
    8940:	4b05      	ldr	r3, [pc, #20]	; (8958 <tc_interrupt_handler+0x34>)
    8942:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8944:	687b      	ldr	r3, [r7, #4]
    8946:	681b      	ldr	r3, [r3, #0]
    8948:	6878      	ldr	r0, [r7, #4]
    894a:	4798      	blx	r3
	}
}
    894c:	bf00      	nop
    894e:	3710      	adds	r7, #16
    8950:	46bd      	mov	sp, r7
    8952:	bd80      	pop	{r7, pc}
    8954:	00007ebd 	.word	0x00007ebd
    8958:	00007ee5 	.word	0x00007ee5

0000895c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    895c:	b580      	push	{r7, lr}
    895e:	b084      	sub	sp, #16
    8960:	af00      	add	r7, sp, #0
    8962:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8964:	687b      	ldr	r3, [r7, #4]
    8966:	691b      	ldr	r3, [r3, #16]
    8968:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    896a:	68f8      	ldr	r0, [r7, #12]
    896c:	4b12      	ldr	r3, [pc, #72]	; (89b8 <tc_pwm_interrupt_handler+0x5c>)
    896e:	4798      	blx	r3
    8970:	4603      	mov	r3, r0
    8972:	2b00      	cmp	r3, #0
    8974:	d00a      	beq.n	898c <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8976:	68f8      	ldr	r0, [r7, #12]
    8978:	4b10      	ldr	r3, [pc, #64]	; (89bc <tc_pwm_interrupt_handler+0x60>)
    897a:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    897c:	687b      	ldr	r3, [r7, #4]
    897e:	681b      	ldr	r3, [r3, #0]
    8980:	2b00      	cmp	r3, #0
    8982:	d003      	beq.n	898c <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8984:	687b      	ldr	r3, [r7, #4]
    8986:	681b      	ldr	r3, [r3, #0]
    8988:	6878      	ldr	r0, [r7, #4]
    898a:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    898c:	68f8      	ldr	r0, [r7, #12]
    898e:	4b0c      	ldr	r3, [pc, #48]	; (89c0 <tc_pwm_interrupt_handler+0x64>)
    8990:	4798      	blx	r3
    8992:	4603      	mov	r3, r0
    8994:	2b00      	cmp	r3, #0
    8996:	d00a      	beq.n	89ae <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    8998:	68f8      	ldr	r0, [r7, #12]
    899a:	4b0a      	ldr	r3, [pc, #40]	; (89c4 <tc_pwm_interrupt_handler+0x68>)
    899c:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    899e:	687b      	ldr	r3, [r7, #4]
    89a0:	685b      	ldr	r3, [r3, #4]
    89a2:	2b00      	cmp	r3, #0
    89a4:	d003      	beq.n	89ae <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    89a6:	687b      	ldr	r3, [r7, #4]
    89a8:	685b      	ldr	r3, [r3, #4]
    89aa:	6878      	ldr	r0, [r7, #4]
    89ac:	4798      	blx	r3
		}
	}
}
    89ae:	bf00      	nop
    89b0:	3710      	adds	r7, #16
    89b2:	46bd      	mov	sp, r7
    89b4:	bd80      	pop	{r7, pc}
    89b6:	bf00      	nop
    89b8:	00007ebd 	.word	0x00007ebd
    89bc:	00007ee5 	.word	0x00007ee5
    89c0:	00007f33 	.word	0x00007f33
    89c4:	00007eff 	.word	0x00007eff

000089c8 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    89c8:	b580      	push	{r7, lr}
    89ca:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    89cc:	4b03      	ldr	r3, [pc, #12]	; (89dc <TC0_Handler+0x14>)
    89ce:	681b      	ldr	r3, [r3, #0]
    89d0:	4618      	mov	r0, r3
    89d2:	4b03      	ldr	r3, [pc, #12]	; (89e0 <TC0_Handler+0x18>)
    89d4:	4798      	blx	r3
}
    89d6:	bf00      	nop
    89d8:	bd80      	pop	{r7, pc}
    89da:	bf00      	nop
    89dc:	2000093c 	.word	0x2000093c
    89e0:	00008925 	.word	0x00008925

000089e4 <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    89e4:	b580      	push	{r7, lr}
    89e6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    89e8:	4b03      	ldr	r3, [pc, #12]	; (89f8 <TC2_Handler+0x14>)
    89ea:	681b      	ldr	r3, [r3, #0]
    89ec:	4618      	mov	r0, r3
    89ee:	4b03      	ldr	r3, [pc, #12]	; (89fc <TC2_Handler+0x18>)
    89f0:	4798      	blx	r3
}
    89f2:	bf00      	nop
    89f4:	bd80      	pop	{r7, pc}
    89f6:	bf00      	nop
    89f8:	20000940 	.word	0x20000940
    89fc:	00008925 	.word	0x00008925

00008a00 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    8a00:	b580      	push	{r7, lr}
    8a02:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8a04:	4b03      	ldr	r3, [pc, #12]	; (8a14 <TC4_Handler+0x14>)
    8a06:	681b      	ldr	r3, [r3, #0]
    8a08:	4618      	mov	r0, r3
    8a0a:	4b03      	ldr	r3, [pc, #12]	; (8a18 <TC4_Handler+0x18>)
    8a0c:	4798      	blx	r3
}
    8a0e:	bf00      	nop
    8a10:	bd80      	pop	{r7, pc}
    8a12:	bf00      	nop
    8a14:	20000944 	.word	0x20000944
    8a18:	00008925 	.word	0x00008925

00008a1c <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8a1c:	b580      	push	{r7, lr}
    8a1e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    8a20:	4b03      	ldr	r3, [pc, #12]	; (8a30 <TC5_Handler+0x14>)
    8a22:	681b      	ldr	r3, [r3, #0]
    8a24:	4618      	mov	r0, r3
    8a26:	4b03      	ldr	r3, [pc, #12]	; (8a34 <TC5_Handler+0x18>)
    8a28:	4798      	blx	r3
}
    8a2a:	bf00      	nop
    8a2c:	bd80      	pop	{r7, pc}
    8a2e:	bf00      	nop
    8a30:	20000948 	.word	0x20000948
    8a34:	00008925 	.word	0x00008925

00008a38 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8a38:	b580      	push	{r7, lr}
    8a3a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8a3c:	4b03      	ldr	r3, [pc, #12]	; (8a4c <TC6_Handler+0x14>)
    8a3e:	681b      	ldr	r3, [r3, #0]
    8a40:	4618      	mov	r0, r3
    8a42:	4b03      	ldr	r3, [pc, #12]	; (8a50 <TC6_Handler+0x18>)
    8a44:	4798      	blx	r3
}
    8a46:	bf00      	nop
    8a48:	bd80      	pop	{r7, pc}
    8a4a:	bf00      	nop
    8a4c:	2000094c 	.word	0x2000094c
    8a50:	00008925 	.word	0x00008925

00008a54 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8a54:	b580      	push	{r7, lr}
    8a56:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8a58:	4b03      	ldr	r3, [pc, #12]	; (8a68 <TC7_Handler+0x14>)
    8a5a:	681b      	ldr	r3, [r3, #0]
    8a5c:	4618      	mov	r0, r3
    8a5e:	4b03      	ldr	r3, [pc, #12]	; (8a6c <TC7_Handler+0x18>)
    8a60:	4798      	blx	r3
}
    8a62:	bf00      	nop
    8a64:	bd80      	pop	{r7, pc}
    8a66:	bf00      	nop
    8a68:	20000950 	.word	0x20000950
    8a6c:	0000895d 	.word	0x0000895d

00008a70 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8a70:	b580      	push	{r7, lr}
    8a72:	b084      	sub	sp, #16
    8a74:	af00      	add	r7, sp, #0
    8a76:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8a78:	6878      	ldr	r0, [r7, #4]
    8a7a:	4b13      	ldr	r3, [pc, #76]	; (8ac8 <get_tc_index+0x58>)
    8a7c:	4798      	blx	r3
    8a7e:	4603      	mov	r3, r0
    8a80:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8a82:	2300      	movs	r3, #0
    8a84:	73fb      	strb	r3, [r7, #15]
    8a86:	e010      	b.n	8aaa <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8a88:	7bfa      	ldrb	r2, [r7, #15]
    8a8a:	4910      	ldr	r1, [pc, #64]	; (8acc <get_tc_index+0x5c>)
    8a8c:	4613      	mov	r3, r2
    8a8e:	009b      	lsls	r3, r3, #2
    8a90:	4413      	add	r3, r2
    8a92:	009b      	lsls	r3, r3, #2
    8a94:	440b      	add	r3, r1
    8a96:	781b      	ldrb	r3, [r3, #0]
    8a98:	7bba      	ldrb	r2, [r7, #14]
    8a9a:	429a      	cmp	r2, r3
    8a9c:	d102      	bne.n	8aa4 <get_tc_index+0x34>
			return i;
    8a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8aa2:	e00d      	b.n	8ac0 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8aa4:	7bfb      	ldrb	r3, [r7, #15]
    8aa6:	3301      	adds	r3, #1
    8aa8:	73fb      	strb	r3, [r7, #15]
    8aaa:	7bfb      	ldrb	r3, [r7, #15]
    8aac:	2b05      	cmp	r3, #5
    8aae:	d9eb      	bls.n	8a88 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8ab0:	f240 221d 	movw	r2, #541	; 0x21d
    8ab4:	4906      	ldr	r1, [pc, #24]	; (8ad0 <get_tc_index+0x60>)
    8ab6:	2000      	movs	r0, #0
    8ab8:	4b06      	ldr	r3, [pc, #24]	; (8ad4 <get_tc_index+0x64>)
    8aba:	4798      	blx	r3
	return -1;
    8abc:	f04f 33ff 	mov.w	r3, #4294967295
}
    8ac0:	4618      	mov	r0, r3
    8ac2:	3710      	adds	r7, #16
    8ac4:	46bd      	mov	sp, r7
    8ac6:	bd80      	pop	{r7, pc}
    8ac8:	00008b75 	.word	0x00008b75
    8acc:	200000e0 	.word	0x200000e0
    8ad0:	00013700 	.word	0x00013700
    8ad4:	00003e05 	.word	0x00003e05

00008ad8 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    8ad8:	b480      	push	{r7}
    8ada:	b083      	sub	sp, #12
    8adc:	af00      	add	r7, sp, #0
    8ade:	6078      	str	r0, [r7, #4]
    8ae0:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    8ae2:	687b      	ldr	r3, [r7, #4]
    8ae4:	4a17      	ldr	r2, [pc, #92]	; (8b44 <_tc_init_irq_param+0x6c>)
    8ae6:	4293      	cmp	r3, r2
    8ae8:	d102      	bne.n	8af0 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    8aea:	4a17      	ldr	r2, [pc, #92]	; (8b48 <_tc_init_irq_param+0x70>)
    8aec:	683b      	ldr	r3, [r7, #0]
    8aee:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8af0:	687b      	ldr	r3, [r7, #4]
    8af2:	4a16      	ldr	r2, [pc, #88]	; (8b4c <_tc_init_irq_param+0x74>)
    8af4:	4293      	cmp	r3, r2
    8af6:	d102      	bne.n	8afe <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    8af8:	4a15      	ldr	r2, [pc, #84]	; (8b50 <_tc_init_irq_param+0x78>)
    8afa:	683b      	ldr	r3, [r7, #0]
    8afc:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    8afe:	687b      	ldr	r3, [r7, #4]
    8b00:	4a14      	ldr	r2, [pc, #80]	; (8b54 <_tc_init_irq_param+0x7c>)
    8b02:	4293      	cmp	r3, r2
    8b04:	d102      	bne.n	8b0c <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    8b06:	4a14      	ldr	r2, [pc, #80]	; (8b58 <_tc_init_irq_param+0x80>)
    8b08:	683b      	ldr	r3, [r7, #0]
    8b0a:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8b0c:	687b      	ldr	r3, [r7, #4]
    8b0e:	4a13      	ldr	r2, [pc, #76]	; (8b5c <_tc_init_irq_param+0x84>)
    8b10:	4293      	cmp	r3, r2
    8b12:	d102      	bne.n	8b1a <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8b14:	4a12      	ldr	r2, [pc, #72]	; (8b60 <_tc_init_irq_param+0x88>)
    8b16:	683b      	ldr	r3, [r7, #0]
    8b18:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    8b1a:	687b      	ldr	r3, [r7, #4]
    8b1c:	4a11      	ldr	r2, [pc, #68]	; (8b64 <_tc_init_irq_param+0x8c>)
    8b1e:	4293      	cmp	r3, r2
    8b20:	d102      	bne.n	8b28 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    8b22:	4a11      	ldr	r2, [pc, #68]	; (8b68 <_tc_init_irq_param+0x90>)
    8b24:	683b      	ldr	r3, [r7, #0]
    8b26:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8b28:	687b      	ldr	r3, [r7, #4]
    8b2a:	4a10      	ldr	r2, [pc, #64]	; (8b6c <_tc_init_irq_param+0x94>)
    8b2c:	4293      	cmp	r3, r2
    8b2e:	d102      	bne.n	8b36 <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    8b30:	4a0f      	ldr	r2, [pc, #60]	; (8b70 <_tc_init_irq_param+0x98>)
    8b32:	683b      	ldr	r3, [r7, #0]
    8b34:	6013      	str	r3, [r2, #0]
	}
}
    8b36:	bf00      	nop
    8b38:	370c      	adds	r7, #12
    8b3a:	46bd      	mov	sp, r7
    8b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b40:	4770      	bx	lr
    8b42:	bf00      	nop
    8b44:	40003800 	.word	0x40003800
    8b48:	2000093c 	.word	0x2000093c
    8b4c:	4101a000 	.word	0x4101a000
    8b50:	20000940 	.word	0x20000940
    8b54:	42001400 	.word	0x42001400
    8b58:	20000944 	.word	0x20000944
    8b5c:	42001800 	.word	0x42001800
    8b60:	20000948 	.word	0x20000948
    8b64:	43001400 	.word	0x43001400
    8b68:	2000094c 	.word	0x2000094c
    8b6c:	43001800 	.word	0x43001800
    8b70:	20000950 	.word	0x20000950

00008b74 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8b74:	b4b0      	push	{r4, r5, r7}
    8b76:	b08d      	sub	sp, #52	; 0x34
    8b78:	af00      	add	r7, sp, #0
    8b7a:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8b7c:	4b13      	ldr	r3, [pc, #76]	; (8bcc <_get_hardware_offset+0x58>)
    8b7e:	f107 040c 	add.w	r4, r7, #12
    8b82:	461d      	mov	r5, r3
    8b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8b88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8b8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8b90:	2300      	movs	r3, #0
    8b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    8b94:	e010      	b.n	8bb8 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    8b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8b98:	009b      	lsls	r3, r3, #2
    8b9a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8b9e:	4413      	add	r3, r2
    8ba0:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8ba4:	461a      	mov	r2, r3
    8ba6:	687b      	ldr	r3, [r7, #4]
    8ba8:	429a      	cmp	r2, r3
    8baa:	d102      	bne.n	8bb2 <_get_hardware_offset+0x3e>
			return i;
    8bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8bae:	b2db      	uxtb	r3, r3
    8bb0:	e006      	b.n	8bc0 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8bb4:	3301      	adds	r3, #1
    8bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    8bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8bba:	2b07      	cmp	r3, #7
    8bbc:	d9eb      	bls.n	8b96 <_get_hardware_offset+0x22>
		}
	}
	return 0;
    8bbe:	2300      	movs	r3, #0
}
    8bc0:	4618      	mov	r0, r3
    8bc2:	3734      	adds	r7, #52	; 0x34
    8bc4:	46bd      	mov	sp, r7
    8bc6:	bcb0      	pop	{r4, r5, r7}
    8bc8:	4770      	bx	lr
    8bca:	bf00      	nop
    8bcc:	00013714 	.word	0x00013714

00008bd0 <__NVIC_EnableIRQ>:
{
    8bd0:	b480      	push	{r7}
    8bd2:	b083      	sub	sp, #12
    8bd4:	af00      	add	r7, sp, #0
    8bd6:	4603      	mov	r3, r0
    8bd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8bde:	2b00      	cmp	r3, #0
    8be0:	db0b      	blt.n	8bfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8be2:	4909      	ldr	r1, [pc, #36]	; (8c08 <__NVIC_EnableIRQ+0x38>)
    8be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8be8:	095b      	lsrs	r3, r3, #5
    8bea:	88fa      	ldrh	r2, [r7, #6]
    8bec:	f002 021f 	and.w	r2, r2, #31
    8bf0:	2001      	movs	r0, #1
    8bf2:	fa00 f202 	lsl.w	r2, r0, r2
    8bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8bfa:	bf00      	nop
    8bfc:	370c      	adds	r7, #12
    8bfe:	46bd      	mov	sp, r7
    8c00:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c04:	4770      	bx	lr
    8c06:	bf00      	nop
    8c08:	e000e100 	.word	0xe000e100

00008c0c <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8c0c:	b480      	push	{r7}
    8c0e:	b087      	sub	sp, #28
    8c10:	af00      	add	r7, sp, #0
    8c12:	60f8      	str	r0, [r7, #12]
    8c14:	460b      	mov	r3, r1
    8c16:	607a      	str	r2, [r7, #4]
    8c18:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    8c1a:	7afa      	ldrb	r2, [r7, #11]
    8c1c:	68f9      	ldr	r1, [r7, #12]
    8c1e:	4613      	mov	r3, r2
    8c20:	009b      	lsls	r3, r3, #2
    8c22:	4413      	add	r3, r2
    8c24:	009b      	lsls	r3, r3, #2
    8c26:	440b      	add	r3, r1
    8c28:	3340      	adds	r3, #64	; 0x40
    8c2a:	681b      	ldr	r3, [r3, #0]
    8c2c:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    8c2e:	697a      	ldr	r2, [r7, #20]
    8c30:	687b      	ldr	r3, [r7, #4]
    8c32:	4013      	ands	r3, r2
    8c34:	617b      	str	r3, [r7, #20]
	return tmp;
    8c36:	697b      	ldr	r3, [r7, #20]
}
    8c38:	4618      	mov	r0, r3
    8c3a:	371c      	adds	r7, #28
    8c3c:	46bd      	mov	sp, r7
    8c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c42:	4770      	bx	lr

00008c44 <hri_oscctrl_get_STATUS_reg>:
{
    8c44:	b480      	push	{r7}
    8c46:	b085      	sub	sp, #20
    8c48:	af00      	add	r7, sp, #0
    8c4a:	6078      	str	r0, [r7, #4]
    8c4c:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8c4e:	687b      	ldr	r3, [r7, #4]
    8c50:	691b      	ldr	r3, [r3, #16]
    8c52:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8c54:	68fa      	ldr	r2, [r7, #12]
    8c56:	683b      	ldr	r3, [r7, #0]
    8c58:	4013      	ands	r3, r2
    8c5a:	60fb      	str	r3, [r7, #12]
	return tmp;
    8c5c:	68fb      	ldr	r3, [r7, #12]
}
    8c5e:	4618      	mov	r0, r3
    8c60:	3714      	adds	r7, #20
    8c62:	46bd      	mov	sp, r7
    8c64:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c68:	4770      	bx	lr

00008c6a <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    8c6a:	b480      	push	{r7}
    8c6c:	b085      	sub	sp, #20
    8c6e:	af00      	add	r7, sp, #0
    8c70:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8c72:	687b      	ldr	r3, [r7, #4]
    8c74:	f893 3020 	ldrb.w	r3, [r3, #32]
    8c78:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    8c7a:	7bfb      	ldrb	r3, [r7, #15]
    8c7c:	f003 0301 	and.w	r3, r3, #1
    8c80:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8c82:	7bfb      	ldrb	r3, [r7, #15]
    8c84:	2b00      	cmp	r3, #0
    8c86:	bf14      	ite	ne
    8c88:	2301      	movne	r3, #1
    8c8a:	2300      	moveq	r3, #0
    8c8c:	b2db      	uxtb	r3, r3
}
    8c8e:	4618      	mov	r0, r3
    8c90:	3714      	adds	r7, #20
    8c92:	46bd      	mov	sp, r7
    8c94:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c98:	4770      	bx	lr

00008c9a <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8c9a:	b480      	push	{r7}
    8c9c:	b083      	sub	sp, #12
    8c9e:	af00      	add	r7, sp, #0
    8ca0:	6078      	str	r0, [r7, #4]
    8ca2:	460b      	mov	r3, r1
    8ca4:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8ca6:	bf00      	nop
    8ca8:	687b      	ldr	r3, [r7, #4]
    8caa:	789b      	ldrb	r3, [r3, #2]
    8cac:	b2da      	uxtb	r2, r3
    8cae:	78fb      	ldrb	r3, [r7, #3]
    8cb0:	4013      	ands	r3, r2
    8cb2:	b2db      	uxtb	r3, r3
    8cb4:	2b00      	cmp	r3, #0
    8cb6:	d1f7      	bne.n	8ca8 <hri_usb_wait_for_sync+0xe>
	};
}
    8cb8:	bf00      	nop
    8cba:	370c      	adds	r7, #12
    8cbc:	46bd      	mov	sp, r7
    8cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cc2:	4770      	bx	lr

00008cc4 <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8cc4:	b480      	push	{r7}
    8cc6:	b083      	sub	sp, #12
    8cc8:	af00      	add	r7, sp, #0
    8cca:	6078      	str	r0, [r7, #4]
    8ccc:	460b      	mov	r3, r1
    8cce:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8cd0:	687b      	ldr	r3, [r7, #4]
    8cd2:	789b      	ldrb	r3, [r3, #2]
    8cd4:	b2da      	uxtb	r2, r3
    8cd6:	78fb      	ldrb	r3, [r7, #3]
    8cd8:	4013      	ands	r3, r2
    8cda:	b2db      	uxtb	r3, r3
    8cdc:	2b00      	cmp	r3, #0
    8cde:	bf14      	ite	ne
    8ce0:	2301      	movne	r3, #1
    8ce2:	2300      	moveq	r3, #0
    8ce4:	b2db      	uxtb	r3, r3
}
    8ce6:	4618      	mov	r0, r3
    8ce8:	370c      	adds	r7, #12
    8cea:	46bd      	mov	sp, r7
    8cec:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cf0:	4770      	bx	lr

00008cf2 <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    8cf2:	b480      	push	{r7}
    8cf4:	b085      	sub	sp, #20
    8cf6:	af00      	add	r7, sp, #0
    8cf8:	6078      	str	r0, [r7, #4]
    8cfa:	460b      	mov	r3, r1
    8cfc:	70fb      	strb	r3, [r7, #3]
    8cfe:	4613      	mov	r3, r2
    8d00:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8d02:	78fb      	ldrb	r3, [r7, #3]
    8d04:	687a      	ldr	r2, [r7, #4]
    8d06:	3308      	adds	r3, #8
    8d08:	015b      	lsls	r3, r3, #5
    8d0a:	4413      	add	r3, r2
    8d0c:	3307      	adds	r3, #7
    8d0e:	781b      	ldrb	r3, [r3, #0]
    8d10:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8d12:	7bfa      	ldrb	r2, [r7, #15]
    8d14:	78bb      	ldrb	r3, [r7, #2]
    8d16:	4013      	ands	r3, r2
    8d18:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8d1a:	7bfb      	ldrb	r3, [r7, #15]
}
    8d1c:	4618      	mov	r0, r3
    8d1e:	3714      	adds	r7, #20
    8d20:	46bd      	mov	sp, r7
    8d22:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d26:	4770      	bx	lr

00008d28 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    8d28:	b480      	push	{r7}
    8d2a:	b083      	sub	sp, #12
    8d2c:	af00      	add	r7, sp, #0
    8d2e:	6078      	str	r0, [r7, #4]
    8d30:	460b      	mov	r3, r1
    8d32:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8d34:	78fb      	ldrb	r3, [r7, #3]
    8d36:	687a      	ldr	r2, [r7, #4]
    8d38:	3308      	adds	r3, #8
    8d3a:	015b      	lsls	r3, r3, #5
    8d3c:	4413      	add	r3, r2
    8d3e:	3307      	adds	r3, #7
    8d40:	781b      	ldrb	r3, [r3, #0]
    8d42:	b2db      	uxtb	r3, r3
}
    8d44:	4618      	mov	r0, r3
    8d46:	370c      	adds	r7, #12
    8d48:	46bd      	mov	sp, r7
    8d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d4e:	4770      	bx	lr

00008d50 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    8d50:	b480      	push	{r7}
    8d52:	b083      	sub	sp, #12
    8d54:	af00      	add	r7, sp, #0
    8d56:	6078      	str	r0, [r7, #4]
    8d58:	460b      	mov	r3, r1
    8d5a:	70fb      	strb	r3, [r7, #3]
    8d5c:	4613      	mov	r3, r2
    8d5e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8d60:	78fb      	ldrb	r3, [r7, #3]
    8d62:	687a      	ldr	r2, [r7, #4]
    8d64:	3308      	adds	r3, #8
    8d66:	015b      	lsls	r3, r3, #5
    8d68:	4413      	add	r3, r2
    8d6a:	3307      	adds	r3, #7
    8d6c:	78ba      	ldrb	r2, [r7, #2]
    8d6e:	701a      	strb	r2, [r3, #0]
}
    8d70:	bf00      	nop
    8d72:	370c      	adds	r7, #12
    8d74:	46bd      	mov	sp, r7
    8d76:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d7a:	4770      	bx	lr

00008d7c <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    8d7c:	b480      	push	{r7}
    8d7e:	b083      	sub	sp, #12
    8d80:	af00      	add	r7, sp, #0
    8d82:	6078      	str	r0, [r7, #4]
    8d84:	460b      	mov	r3, r1
    8d86:	70fb      	strb	r3, [r7, #3]
    8d88:	4613      	mov	r3, r2
    8d8a:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    8d8c:	78fb      	ldrb	r3, [r7, #3]
    8d8e:	687a      	ldr	r2, [r7, #4]
    8d90:	3308      	adds	r3, #8
    8d92:	015b      	lsls	r3, r3, #5
    8d94:	4413      	add	r3, r2
    8d96:	3305      	adds	r3, #5
    8d98:	78ba      	ldrb	r2, [r7, #2]
    8d9a:	701a      	strb	r2, [r3, #0]
}
    8d9c:	bf00      	nop
    8d9e:	370c      	adds	r7, #12
    8da0:	46bd      	mov	sp, r7
    8da2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8da6:	4770      	bx	lr

00008da8 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    8da8:	b480      	push	{r7}
    8daa:	b083      	sub	sp, #12
    8dac:	af00      	add	r7, sp, #0
    8dae:	6078      	str	r0, [r7, #4]
    8db0:	460b      	mov	r3, r1
    8db2:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    8db4:	78fb      	ldrb	r3, [r7, #3]
    8db6:	687a      	ldr	r2, [r7, #4]
    8db8:	3308      	adds	r3, #8
    8dba:	015b      	lsls	r3, r3, #5
    8dbc:	4413      	add	r3, r2
    8dbe:	3306      	adds	r3, #6
    8dc0:	781b      	ldrb	r3, [r3, #0]
    8dc2:	b2db      	uxtb	r3, r3
}
    8dc4:	4618      	mov	r0, r3
    8dc6:	370c      	adds	r7, #12
    8dc8:	46bd      	mov	sp, r7
    8dca:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dce:	4770      	bx	lr

00008dd0 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    8dd0:	b480      	push	{r7}
    8dd2:	b083      	sub	sp, #12
    8dd4:	af00      	add	r7, sp, #0
    8dd6:	6078      	str	r0, [r7, #4]
    8dd8:	460b      	mov	r3, r1
    8dda:	70fb      	strb	r3, [r7, #3]
    8ddc:	4613      	mov	r3, r2
    8dde:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    8de0:	78fb      	ldrb	r3, [r7, #3]
    8de2:	687a      	ldr	r2, [r7, #4]
    8de4:	3308      	adds	r3, #8
    8de6:	015b      	lsls	r3, r3, #5
    8de8:	4413      	add	r3, r2
    8dea:	3304      	adds	r3, #4
    8dec:	78ba      	ldrb	r2, [r7, #2]
    8dee:	701a      	strb	r2, [r3, #0]
}
    8df0:	bf00      	nop
    8df2:	370c      	adds	r7, #12
    8df4:	46bd      	mov	sp, r7
    8df6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dfa:	4770      	bx	lr

00008dfc <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    8dfc:	b480      	push	{r7}
    8dfe:	b083      	sub	sp, #12
    8e00:	af00      	add	r7, sp, #0
    8e02:	6078      	str	r0, [r7, #4]
    8e04:	460b      	mov	r3, r1
    8e06:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    8e08:	78fb      	ldrb	r3, [r7, #3]
    8e0a:	687a      	ldr	r2, [r7, #4]
    8e0c:	015b      	lsls	r3, r3, #5
    8e0e:	4413      	add	r3, r2
    8e10:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8e14:	2210      	movs	r2, #16
    8e16:	701a      	strb	r2, [r3, #0]
}
    8e18:	bf00      	nop
    8e1a:	370c      	adds	r7, #12
    8e1c:	46bd      	mov	sp, r7
    8e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e22:	4770      	bx	lr

00008e24 <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    8e24:	b480      	push	{r7}
    8e26:	b083      	sub	sp, #12
    8e28:	af00      	add	r7, sp, #0
    8e2a:	6078      	str	r0, [r7, #4]
    8e2c:	460b      	mov	r3, r1
    8e2e:	70fb      	strb	r3, [r7, #3]
    8e30:	4613      	mov	r3, r2
    8e32:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    8e34:	78fb      	ldrb	r3, [r7, #3]
    8e36:	687a      	ldr	r2, [r7, #4]
    8e38:	015b      	lsls	r3, r3, #5
    8e3a:	4413      	add	r3, r2
    8e3c:	f203 1309 	addw	r3, r3, #265	; 0x109
    8e40:	78ba      	ldrb	r2, [r7, #2]
    8e42:	701a      	strb	r2, [r3, #0]
}
    8e44:	bf00      	nop
    8e46:	370c      	adds	r7, #12
    8e48:	46bd      	mov	sp, r7
    8e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e4e:	4770      	bx	lr

00008e50 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    8e50:	b480      	push	{r7}
    8e52:	b083      	sub	sp, #12
    8e54:	af00      	add	r7, sp, #0
    8e56:	6078      	str	r0, [r7, #4]
    8e58:	460b      	mov	r3, r1
    8e5a:	70fb      	strb	r3, [r7, #3]
    8e5c:	4613      	mov	r3, r2
    8e5e:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    8e60:	78fb      	ldrb	r3, [r7, #3]
    8e62:	687a      	ldr	r2, [r7, #4]
    8e64:	015b      	lsls	r3, r3, #5
    8e66:	4413      	add	r3, r2
    8e68:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8e6c:	78ba      	ldrb	r2, [r7, #2]
    8e6e:	701a      	strb	r2, [r3, #0]
}
    8e70:	bf00      	nop
    8e72:	370c      	adds	r7, #12
    8e74:	46bd      	mov	sp, r7
    8e76:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e7a:	4770      	bx	lr

00008e7c <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8e7c:	b480      	push	{r7}
    8e7e:	b085      	sub	sp, #20
    8e80:	af00      	add	r7, sp, #0
    8e82:	6078      	str	r0, [r7, #4]
    8e84:	460b      	mov	r3, r1
    8e86:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8e88:	78fb      	ldrb	r3, [r7, #3]
    8e8a:	687a      	ldr	r2, [r7, #4]
    8e8c:	3308      	adds	r3, #8
    8e8e:	015b      	lsls	r3, r3, #5
    8e90:	4413      	add	r3, r2
    8e92:	781b      	ldrb	r3, [r3, #0]
    8e94:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    8e96:	7bfb      	ldrb	r3, [r7, #15]
    8e98:	f003 0307 	and.w	r3, r3, #7
    8e9c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8e9e:	7bfb      	ldrb	r3, [r7, #15]
}
    8ea0:	4618      	mov	r0, r3
    8ea2:	3714      	adds	r7, #20
    8ea4:	46bd      	mov	sp, r7
    8ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eaa:	4770      	bx	lr

00008eac <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    8eac:	b480      	push	{r7}
    8eae:	b085      	sub	sp, #20
    8eb0:	af00      	add	r7, sp, #0
    8eb2:	6078      	str	r0, [r7, #4]
    8eb4:	460b      	mov	r3, r1
    8eb6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8eb8:	78fb      	ldrb	r3, [r7, #3]
    8eba:	687a      	ldr	r2, [r7, #4]
    8ebc:	3308      	adds	r3, #8
    8ebe:	015b      	lsls	r3, r3, #5
    8ec0:	4413      	add	r3, r2
    8ec2:	781b      	ldrb	r3, [r3, #0]
    8ec4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    8ec6:	7bfb      	ldrb	r3, [r7, #15]
    8ec8:	091b      	lsrs	r3, r3, #4
    8eca:	b2db      	uxtb	r3, r3
    8ecc:	f003 0307 	and.w	r3, r3, #7
    8ed0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8ed2:	7bfb      	ldrb	r3, [r7, #15]
}
    8ed4:	4618      	mov	r0, r3
    8ed6:	3714      	adds	r7, #20
    8ed8:	46bd      	mov	sp, r7
    8eda:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ede:	4770      	bx	lr

00008ee0 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    8ee0:	b480      	push	{r7}
    8ee2:	b083      	sub	sp, #12
    8ee4:	af00      	add	r7, sp, #0
    8ee6:	6078      	str	r0, [r7, #4]
    8ee8:	460b      	mov	r3, r1
    8eea:	70fb      	strb	r3, [r7, #3]
    8eec:	4613      	mov	r3, r2
    8eee:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    8ef0:	78fb      	ldrb	r3, [r7, #3]
    8ef2:	687a      	ldr	r2, [r7, #4]
    8ef4:	3308      	adds	r3, #8
    8ef6:	015b      	lsls	r3, r3, #5
    8ef8:	4413      	add	r3, r2
    8efa:	78ba      	ldrb	r2, [r7, #2]
    8efc:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    8efe:	bf00      	nop
    8f00:	370c      	adds	r7, #12
    8f02:	46bd      	mov	sp, r7
    8f04:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f08:	4770      	bx	lr

00008f0a <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    8f0a:	b480      	push	{r7}
    8f0c:	b083      	sub	sp, #12
    8f0e:	af00      	add	r7, sp, #0
    8f10:	6078      	str	r0, [r7, #4]
    8f12:	460b      	mov	r3, r1
    8f14:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    8f16:	78fb      	ldrb	r3, [r7, #3]
    8f18:	687a      	ldr	r2, [r7, #4]
    8f1a:	3308      	adds	r3, #8
    8f1c:	015b      	lsls	r3, r3, #5
    8f1e:	4413      	add	r3, r2
    8f20:	781b      	ldrb	r3, [r3, #0]
    8f22:	b2db      	uxtb	r3, r3
}
    8f24:	4618      	mov	r0, r3
    8f26:	370c      	adds	r7, #12
    8f28:	46bd      	mov	sp, r7
    8f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f2e:	4770      	bx	lr

00008f30 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    8f30:	b480      	push	{r7}
    8f32:	b083      	sub	sp, #12
    8f34:	af00      	add	r7, sp, #0
    8f36:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    8f38:	687b      	ldr	r3, [r7, #4]
    8f3a:	8b9b      	ldrh	r3, [r3, #28]
    8f3c:	b29b      	uxth	r3, r3
}
    8f3e:	4618      	mov	r0, r3
    8f40:	370c      	adds	r7, #12
    8f42:	46bd      	mov	sp, r7
    8f44:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f48:	4770      	bx	lr

00008f4a <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    8f4a:	b480      	push	{r7}
    8f4c:	b083      	sub	sp, #12
    8f4e:	af00      	add	r7, sp, #0
    8f50:	6078      	str	r0, [r7, #4]
    8f52:	460b      	mov	r3, r1
    8f54:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    8f56:	687b      	ldr	r3, [r7, #4]
    8f58:	887a      	ldrh	r2, [r7, #2]
    8f5a:	839a      	strh	r2, [r3, #28]
}
    8f5c:	bf00      	nop
    8f5e:	370c      	adds	r7, #12
    8f60:	46bd      	mov	sp, r7
    8f62:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f66:	4770      	bx	lr

00008f68 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8f68:	b480      	push	{r7}
    8f6a:	b083      	sub	sp, #12
    8f6c:	af00      	add	r7, sp, #0
    8f6e:	6078      	str	r0, [r7, #4]
    8f70:	460b      	mov	r3, r1
    8f72:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    8f74:	687b      	ldr	r3, [r7, #4]
    8f76:	887a      	ldrh	r2, [r7, #2]
    8f78:	831a      	strh	r2, [r3, #24]
}
    8f7a:	bf00      	nop
    8f7c:	370c      	adds	r7, #12
    8f7e:	46bd      	mov	sp, r7
    8f80:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f84:	4770      	bx	lr

00008f86 <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    8f86:	b480      	push	{r7}
    8f88:	b083      	sub	sp, #12
    8f8a:	af00      	add	r7, sp, #0
    8f8c:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    8f8e:	687b      	ldr	r3, [r7, #4]
    8f90:	8b1b      	ldrh	r3, [r3, #24]
    8f92:	b29b      	uxth	r3, r3
}
    8f94:	4618      	mov	r0, r3
    8f96:	370c      	adds	r7, #12
    8f98:	46bd      	mov	sp, r7
    8f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f9e:	4770      	bx	lr

00008fa0 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    8fa0:	b480      	push	{r7}
    8fa2:	b083      	sub	sp, #12
    8fa4:	af00      	add	r7, sp, #0
    8fa6:	6078      	str	r0, [r7, #4]
    8fa8:	460b      	mov	r3, r1
    8faa:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    8fac:	687b      	ldr	r3, [r7, #4]
    8fae:	887a      	ldrh	r2, [r7, #2]
    8fb0:	829a      	strh	r2, [r3, #20]
}
    8fb2:	bf00      	nop
    8fb4:	370c      	adds	r7, #12
    8fb6:	46bd      	mov	sp, r7
    8fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fbc:	4770      	bx	lr

00008fbe <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    8fbe:	b480      	push	{r7}
    8fc0:	b085      	sub	sp, #20
    8fc2:	af00      	add	r7, sp, #0
    8fc4:	6078      	str	r0, [r7, #4]
    8fc6:	460b      	mov	r3, r1
    8fc8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    8fca:	687b      	ldr	r3, [r7, #4]
    8fcc:	789b      	ldrb	r3, [r3, #2]
    8fce:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8fd0:	7bfa      	ldrb	r2, [r7, #15]
    8fd2:	78fb      	ldrb	r3, [r7, #3]
    8fd4:	4013      	ands	r3, r2
    8fd6:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8fd8:	7bfb      	ldrb	r3, [r7, #15]
}
    8fda:	4618      	mov	r0, r3
    8fdc:	3714      	adds	r7, #20
    8fde:	46bd      	mov	sp, r7
    8fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fe4:	4770      	bx	lr
	...

00008fe8 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    8fe8:	b580      	push	{r7, lr}
    8fea:	b082      	sub	sp, #8
    8fec:	af00      	add	r7, sp, #0
    8fee:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    8ff0:	687b      	ldr	r3, [r7, #4]
    8ff2:	781b      	ldrb	r3, [r3, #0]
    8ff4:	b2db      	uxtb	r3, r3
    8ff6:	f023 0302 	bic.w	r3, r3, #2
    8ffa:	b2da      	uxtb	r2, r3
    8ffc:	687b      	ldr	r3, [r7, #4]
    8ffe:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    9000:	2103      	movs	r1, #3
    9002:	6878      	ldr	r0, [r7, #4]
    9004:	4b02      	ldr	r3, [pc, #8]	; (9010 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    9006:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    9008:	bf00      	nop
    900a:	3708      	adds	r7, #8
    900c:	46bd      	mov	sp, r7
    900e:	bd80      	pop	{r7, pc}
    9010:	00008c9b 	.word	0x00008c9b

00009014 <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    9014:	b580      	push	{r7, lr}
    9016:	b084      	sub	sp, #16
    9018:	af00      	add	r7, sp, #0
    901a:	6078      	str	r0, [r7, #4]
    901c:	460b      	mov	r3, r1
    901e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9020:	2103      	movs	r1, #3
    9022:	6878      	ldr	r0, [r7, #4]
    9024:	4b06      	ldr	r3, [pc, #24]	; (9040 <hri_usb_get_CTRLA_reg+0x2c>)
    9026:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    9028:	687b      	ldr	r3, [r7, #4]
    902a:	781b      	ldrb	r3, [r3, #0]
    902c:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    902e:	7bfa      	ldrb	r2, [r7, #15]
    9030:	78fb      	ldrb	r3, [r7, #3]
    9032:	4013      	ands	r3, r2
    9034:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9036:	7bfb      	ldrb	r3, [r7, #15]
}
    9038:	4618      	mov	r0, r3
    903a:	3710      	adds	r7, #16
    903c:	46bd      	mov	sp, r7
    903e:	bd80      	pop	{r7, pc}
    9040:	00008c9b 	.word	0x00008c9b

00009044 <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    9044:	b580      	push	{r7, lr}
    9046:	b082      	sub	sp, #8
    9048:	af00      	add	r7, sp, #0
    904a:	6078      	str	r0, [r7, #4]
    904c:	460b      	mov	r3, r1
    904e:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    9050:	687b      	ldr	r3, [r7, #4]
    9052:	78fa      	ldrb	r2, [r7, #3]
    9054:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9056:	2103      	movs	r1, #3
    9058:	6878      	ldr	r0, [r7, #4]
    905a:	4b03      	ldr	r3, [pc, #12]	; (9068 <hri_usb_write_CTRLA_reg+0x24>)
    905c:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    905e:	bf00      	nop
    9060:	3708      	adds	r7, #8
    9062:	46bd      	mov	sp, r7
    9064:	bd80      	pop	{r7, pc}
    9066:	bf00      	nop
    9068:	00008c9b 	.word	0x00008c9b

0000906c <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    906c:	b580      	push	{r7, lr}
    906e:	b082      	sub	sp, #8
    9070:	af00      	add	r7, sp, #0
    9072:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    9074:	2103      	movs	r1, #3
    9076:	6878      	ldr	r0, [r7, #4]
    9078:	4b04      	ldr	r3, [pc, #16]	; (908c <hri_usb_read_CTRLA_reg+0x20>)
    907a:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    907c:	687b      	ldr	r3, [r7, #4]
    907e:	781b      	ldrb	r3, [r3, #0]
    9080:	b2db      	uxtb	r3, r3
}
    9082:	4618      	mov	r0, r3
    9084:	3708      	adds	r7, #8
    9086:	46bd      	mov	sp, r7
    9088:	bd80      	pop	{r7, pc}
    908a:	bf00      	nop
    908c:	00008c9b 	.word	0x00008c9b

00009090 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    9090:	b480      	push	{r7}
    9092:	b083      	sub	sp, #12
    9094:	af00      	add	r7, sp, #0
    9096:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    9098:	687b      	ldr	r3, [r7, #4]
    909a:	891b      	ldrh	r3, [r3, #8]
    909c:	b29b      	uxth	r3, r3
    909e:	f023 0301 	bic.w	r3, r3, #1
    90a2:	b29a      	uxth	r2, r3
    90a4:	687b      	ldr	r3, [r7, #4]
    90a6:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    90a8:	bf00      	nop
    90aa:	370c      	adds	r7, #12
    90ac:	46bd      	mov	sp, r7
    90ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    90b2:	4770      	bx	lr

000090b4 <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    90b4:	b480      	push	{r7}
    90b6:	b083      	sub	sp, #12
    90b8:	af00      	add	r7, sp, #0
    90ba:	6078      	str	r0, [r7, #4]
    90bc:	460b      	mov	r3, r1
    90be:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    90c0:	687b      	ldr	r3, [r7, #4]
    90c2:	887a      	ldrh	r2, [r7, #2]
    90c4:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    90c6:	bf00      	nop
    90c8:	370c      	adds	r7, #12
    90ca:	46bd      	mov	sp, r7
    90cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    90d0:	4770      	bx	lr

000090d2 <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    90d2:	b480      	push	{r7}
    90d4:	b083      	sub	sp, #12
    90d6:	af00      	add	r7, sp, #0
    90d8:	6078      	str	r0, [r7, #4]
    90da:	460b      	mov	r3, r1
    90dc:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    90de:	687b      	ldr	r3, [r7, #4]
    90e0:	78fa      	ldrb	r2, [r7, #3]
    90e2:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    90e4:	bf00      	nop
    90e6:	370c      	adds	r7, #12
    90e8:	46bd      	mov	sp, r7
    90ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    90ee:	4770      	bx	lr

000090f0 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    90f0:	b480      	push	{r7}
    90f2:	b083      	sub	sp, #12
    90f4:	af00      	add	r7, sp, #0
    90f6:	6078      	str	r0, [r7, #4]
    90f8:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    90fa:	687b      	ldr	r3, [r7, #4]
    90fc:	683a      	ldr	r2, [r7, #0]
    90fe:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    9100:	bf00      	nop
    9102:	370c      	adds	r7, #12
    9104:	46bd      	mov	sp, r7
    9106:	f85d 7b04 	ldr.w	r7, [sp], #4
    910a:	4770      	bx	lr

0000910c <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    910c:	b480      	push	{r7}
    910e:	b083      	sub	sp, #12
    9110:	af00      	add	r7, sp, #0
    9112:	6078      	str	r0, [r7, #4]
    9114:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    9116:	2300      	movs	r3, #0
}
    9118:	4618      	mov	r0, r3
    911a:	370c      	adds	r7, #12
    911c:	46bd      	mov	sp, r7
    911e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9122:	4770      	bx	lr

00009124 <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    9124:	b480      	push	{r7}
    9126:	b085      	sub	sp, #20
    9128:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    912a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    912e:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    9130:	4b28      	ldr	r3, [pc, #160]	; (91d4 <_usb_load_calib+0xb0>)
    9132:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    9134:	f003 031f 	and.w	r3, r3, #31
    9138:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    913a:	4b26      	ldr	r3, [pc, #152]	; (91d4 <_usb_load_calib+0xb0>)
    913c:	681b      	ldr	r3, [r3, #0]
    913e:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    9140:	f003 031f 	and.w	r3, r3, #31
    9144:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    9146:	4b23      	ldr	r3, [pc, #140]	; (91d4 <_usb_load_calib+0xb0>)
    9148:	681b      	ldr	r3, [r3, #0]
    914a:	0a9b      	lsrs	r3, r3, #10
    914c:	f003 0307 	and.w	r3, r3, #7
    9150:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    9152:	68fb      	ldr	r3, [r7, #12]
    9154:	2b00      	cmp	r3, #0
    9156:	d002      	beq.n	915e <_usb_load_calib+0x3a>
    9158:	68fb      	ldr	r3, [r7, #12]
    915a:	2b1f      	cmp	r3, #31
    915c:	d101      	bne.n	9162 <_usb_load_calib+0x3e>
		pad_transn = 9;
    915e:	2309      	movs	r3, #9
    9160:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    9162:	68bb      	ldr	r3, [r7, #8]
    9164:	2b00      	cmp	r3, #0
    9166:	d002      	beq.n	916e <_usb_load_calib+0x4a>
    9168:	68bb      	ldr	r3, [r7, #8]
    916a:	2b1f      	cmp	r3, #31
    916c:	d101      	bne.n	9172 <_usb_load_calib+0x4e>
		pad_transp = 25;
    916e:	2319      	movs	r3, #25
    9170:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    9172:	687b      	ldr	r3, [r7, #4]
    9174:	2b00      	cmp	r3, #0
    9176:	d002      	beq.n	917e <_usb_load_calib+0x5a>
    9178:	687b      	ldr	r3, [r7, #4]
    917a:	2b07      	cmp	r3, #7
    917c:	d101      	bne.n	9182 <_usb_load_calib+0x5e>
		pad_trim = 6;
    917e:	2306      	movs	r3, #6
    9180:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    9182:	68fb      	ldr	r3, [r7, #12]
    9184:	b29b      	uxth	r3, r3
    9186:	019b      	lsls	r3, r3, #6
    9188:	b29b      	uxth	r3, r3
    918a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    918e:	b29a      	uxth	r2, r3
    9190:	68bb      	ldr	r3, [r7, #8]
    9192:	b29b      	uxth	r3, r3
    9194:	f003 031f 	and.w	r3, r3, #31
    9198:	b29b      	uxth	r3, r3
    919a:	4313      	orrs	r3, r2
    919c:	b29a      	uxth	r2, r3
    919e:	687b      	ldr	r3, [r7, #4]
    91a0:	b29b      	uxth	r3, r3
    91a2:	031b      	lsls	r3, r3, #12
    91a4:	b29b      	uxth	r3, r3
    91a6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    91aa:	b29b      	uxth	r3, r3
    91ac:	4313      	orrs	r3, r2
    91ae:	b29a      	uxth	r2, r3
    91b0:	683b      	ldr	r3, [r7, #0]
    91b2:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    91b4:	683a      	ldr	r2, [r7, #0]
    91b6:	78d3      	ldrb	r3, [r2, #3]
    91b8:	f043 0303 	orr.w	r3, r3, #3
    91bc:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    91be:	683a      	ldr	r2, [r7, #0]
    91c0:	78d3      	ldrb	r3, [r2, #3]
    91c2:	f043 030c 	orr.w	r3, r3, #12
    91c6:	70d3      	strb	r3, [r2, #3]
}
    91c8:	bf00      	nop
    91ca:	3714      	adds	r7, #20
    91cc:	46bd      	mov	sp, r7
    91ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    91d2:	4770      	bx	lr
    91d4:	00800084 	.word	0x00800084

000091d8 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    91d8:	b580      	push	{r7, lr}
    91da:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    91dc:	bf00      	nop
    91de:	2203      	movs	r2, #3
    91e0:	2100      	movs	r1, #0
    91e2:	4804      	ldr	r0, [pc, #16]	; (91f4 <_usb_d_dev_wait_dpll_rdy+0x1c>)
    91e4:	4b04      	ldr	r3, [pc, #16]	; (91f8 <_usb_d_dev_wait_dpll_rdy+0x20>)
    91e6:	4798      	blx	r3
    91e8:	4603      	mov	r3, r0
    91ea:	2b03      	cmp	r3, #3
    91ec:	d1f7      	bne.n	91de <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    91ee:	bf00      	nop
    91f0:	bd80      	pop	{r7, pc}
    91f2:	bf00      	nop
    91f4:	40001000 	.word	0x40001000
    91f8:	00008c0d 	.word	0x00008c0d

000091fc <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    91fc:	b580      	push	{r7, lr}
    91fe:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    9200:	480e      	ldr	r0, [pc, #56]	; (923c <_usb_d_dev_wait_dfll_rdy+0x40>)
    9202:	4b0f      	ldr	r3, [pc, #60]	; (9240 <_usb_d_dev_wait_dfll_rdy+0x44>)
    9204:	4798      	blx	r3
    9206:	4603      	mov	r3, r0
    9208:	2b00      	cmp	r3, #0
    920a:	d00a      	beq.n	9222 <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    920c:	bf00      	nop
    920e:	f44f 6110 	mov.w	r1, #2304	; 0x900
    9212:	480a      	ldr	r0, [pc, #40]	; (923c <_usb_d_dev_wait_dfll_rdy+0x40>)
    9214:	4b0b      	ldr	r3, [pc, #44]	; (9244 <_usb_d_dev_wait_dfll_rdy+0x48>)
    9216:	4798      	blx	r3
    9218:	4603      	mov	r3, r0
    921a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    921e:	d1f6      	bne.n	920e <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    9220:	e009      	b.n	9236 <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    9222:	bf00      	nop
    9224:	f44f 7180 	mov.w	r1, #256	; 0x100
    9228:	4804      	ldr	r0, [pc, #16]	; (923c <_usb_d_dev_wait_dfll_rdy+0x40>)
    922a:	4b06      	ldr	r3, [pc, #24]	; (9244 <_usb_d_dev_wait_dfll_rdy+0x48>)
    922c:	4798      	blx	r3
    922e:	4603      	mov	r3, r0
    9230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9234:	d1f6      	bne.n	9224 <_usb_d_dev_wait_dfll_rdy+0x28>
}
    9236:	bf00      	nop
    9238:	bd80      	pop	{r7, pc}
    923a:	bf00      	nop
    923c:	40001000 	.word	0x40001000
    9240:	00008c6b 	.word	0x00008c6b
    9244:	00008c45 	.word	0x00008c45

00009248 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    9248:	b580      	push	{r7, lr}
    924a:	b082      	sub	sp, #8
    924c:	af00      	add	r7, sp, #0
    924e:	4603      	mov	r3, r0
    9250:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    9252:	79fb      	ldrb	r3, [r7, #7]
    9254:	2b00      	cmp	r3, #0
    9256:	d102      	bne.n	925e <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    9258:	4b05      	ldr	r3, [pc, #20]	; (9270 <_usb_d_dev_wait_clk_rdy+0x28>)
    925a:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    925c:	e004      	b.n	9268 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    925e:	79fb      	ldrb	r3, [r7, #7]
    9260:	2b01      	cmp	r3, #1
    9262:	d101      	bne.n	9268 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    9264:	4b03      	ldr	r3, [pc, #12]	; (9274 <_usb_d_dev_wait_clk_rdy+0x2c>)
    9266:	4798      	blx	r3
}
    9268:	bf00      	nop
    926a:	3708      	adds	r7, #8
    926c:	46bd      	mov	sp, r7
    926e:	bd80      	pop	{r7, pc}
    9270:	000091fd 	.word	0x000091fd
    9274:	000091d9 	.word	0x000091d9

00009278 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    9278:	b580      	push	{r7, lr}
    927a:	b082      	sub	sp, #8
    927c:	af00      	add	r7, sp, #0
    927e:	4603      	mov	r3, r0
    9280:	6039      	str	r1, [r7, #0]
    9282:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    9284:	683b      	ldr	r3, [r7, #0]
    9286:	b2da      	uxtb	r2, r3
    9288:	79fb      	ldrb	r3, [r7, #7]
    928a:	4619      	mov	r1, r3
    928c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9290:	4b02      	ldr	r3, [pc, #8]	; (929c <_usbd_ep_int_ack+0x24>)
    9292:	4798      	blx	r3
}
    9294:	bf00      	nop
    9296:	3708      	adds	r7, #8
    9298:	46bd      	mov	sp, r7
    929a:	bd80      	pop	{r7, pc}
    929c:	00008d51 	.word	0x00008d51

000092a0 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    92a0:	b580      	push	{r7, lr}
    92a2:	b082      	sub	sp, #8
    92a4:	af00      	add	r7, sp, #0
    92a6:	4603      	mov	r3, r0
    92a8:	6039      	str	r1, [r7, #0]
    92aa:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    92ac:	683b      	ldr	r3, [r7, #0]
    92ae:	b2da      	uxtb	r2, r3
    92b0:	79fb      	ldrb	r3, [r7, #7]
    92b2:	4619      	mov	r1, r3
    92b4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92b8:	4b02      	ldr	r3, [pc, #8]	; (92c4 <_usbd_ep_int_en+0x24>)
    92ba:	4798      	blx	r3
}
    92bc:	bf00      	nop
    92be:	3708      	adds	r7, #8
    92c0:	46bd      	mov	sp, r7
    92c2:	bd80      	pop	{r7, pc}
    92c4:	00008e25 	.word	0x00008e25

000092c8 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    92c8:	b580      	push	{r7, lr}
    92ca:	b082      	sub	sp, #8
    92cc:	af00      	add	r7, sp, #0
    92ce:	4603      	mov	r3, r0
    92d0:	6039      	str	r1, [r7, #0]
    92d2:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    92d4:	683b      	ldr	r3, [r7, #0]
    92d6:	b2da      	uxtb	r2, r3
    92d8:	79fb      	ldrb	r3, [r7, #7]
    92da:	4619      	mov	r1, r3
    92dc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    92e0:	4b02      	ldr	r3, [pc, #8]	; (92ec <_usbd_ep_int_dis+0x24>)
    92e2:	4798      	blx	r3
}
    92e4:	bf00      	nop
    92e6:	3708      	adds	r7, #8
    92e8:	46bd      	mov	sp, r7
    92ea:	bd80      	pop	{r7, pc}
    92ec:	00008e51 	.word	0x00008e51

000092f0 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    92f0:	b580      	push	{r7, lr}
    92f2:	b082      	sub	sp, #8
    92f4:	af00      	add	r7, sp, #0
    92f6:	4603      	mov	r3, r0
    92f8:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    92fa:	79fb      	ldrb	r3, [r7, #7]
    92fc:	4619      	mov	r1, r3
    92fe:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9302:	4b06      	ldr	r3, [pc, #24]	; (931c <_usbd_ep_is_ctrl+0x2c>)
    9304:	4798      	blx	r3
    9306:	4603      	mov	r3, r0
    9308:	2b11      	cmp	r3, #17
    930a:	bf0c      	ite	eq
    930c:	2301      	moveq	r3, #1
    930e:	2300      	movne	r3, #0
    9310:	b2db      	uxtb	r3, r3
}
    9312:	4618      	mov	r0, r3
    9314:	3708      	adds	r7, #8
    9316:	46bd      	mov	sp, r7
    9318:	bd80      	pop	{r7, pc}
    931a:	bf00      	nop
    931c:	00008f0b 	.word	0x00008f0b

00009320 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    9320:	b580      	push	{r7, lr}
    9322:	b082      	sub	sp, #8
    9324:	af00      	add	r7, sp, #0
    9326:	4603      	mov	r3, r0
    9328:	71fb      	strb	r3, [r7, #7]
    932a:	460b      	mov	r3, r1
    932c:	71bb      	strb	r3, [r7, #6]
    932e:	4613      	mov	r3, r2
    9330:	717b      	strb	r3, [r7, #5]
	if (st) {
    9332:	797b      	ldrb	r3, [r7, #5]
    9334:	2b00      	cmp	r3, #0
    9336:	d00b      	beq.n	9350 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9338:	79bb      	ldrb	r3, [r7, #6]
    933a:	2210      	movs	r2, #16
    933c:	fa02 f303 	lsl.w	r3, r2, r3
    9340:	b2da      	uxtb	r2, r3
    9342:	79fb      	ldrb	r3, [r7, #7]
    9344:	4619      	mov	r1, r3
    9346:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    934a:	4b09      	ldr	r3, [pc, #36]	; (9370 <_usbd_ep_set_stall+0x50>)
    934c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    934e:	e00a      	b.n	9366 <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9350:	79bb      	ldrb	r3, [r7, #6]
    9352:	2210      	movs	r2, #16
    9354:	fa02 f303 	lsl.w	r3, r2, r3
    9358:	b2da      	uxtb	r2, r3
    935a:	79fb      	ldrb	r3, [r7, #7]
    935c:	4619      	mov	r1, r3
    935e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9362:	4b04      	ldr	r3, [pc, #16]	; (9374 <_usbd_ep_set_stall+0x54>)
    9364:	4798      	blx	r3
}
    9366:	bf00      	nop
    9368:	3708      	adds	r7, #8
    936a:	46bd      	mov	sp, r7
    936c:	bd80      	pop	{r7, pc}
    936e:	bf00      	nop
    9370:	00008d7d 	.word	0x00008d7d
    9374:	00008dd1 	.word	0x00008dd1

00009378 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    9378:	b580      	push	{r7, lr}
    937a:	b084      	sub	sp, #16
    937c:	af00      	add	r7, sp, #0
    937e:	4603      	mov	r3, r0
    9380:	460a      	mov	r2, r1
    9382:	71fb      	strb	r3, [r7, #7]
    9384:	4613      	mov	r3, r2
    9386:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9388:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    938c:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    938e:	79fb      	ldrb	r3, [r7, #7]
    9390:	4619      	mov	r1, r3
    9392:	68f8      	ldr	r0, [r7, #12]
    9394:	4b08      	ldr	r3, [pc, #32]	; (93b8 <_usbd_ep_is_stalled+0x40>)
    9396:	4798      	blx	r3
    9398:	4603      	mov	r3, r0
    939a:	4619      	mov	r1, r3
    939c:	79bb      	ldrb	r3, [r7, #6]
    939e:	2210      	movs	r2, #16
    93a0:	fa02 f303 	lsl.w	r3, r2, r3
    93a4:	400b      	ands	r3, r1
    93a6:	2b00      	cmp	r3, #0
    93a8:	bf14      	ite	ne
    93aa:	2301      	movne	r3, #1
    93ac:	2300      	moveq	r3, #0
    93ae:	b2db      	uxtb	r3, r3
}
    93b0:	4618      	mov	r0, r3
    93b2:	3710      	adds	r7, #16
    93b4:	46bd      	mov	sp, r7
    93b6:	bd80      	pop	{r7, pc}
    93b8:	00008da9 	.word	0x00008da9

000093bc <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    93bc:	b580      	push	{r7, lr}
    93be:	b084      	sub	sp, #16
    93c0:	af00      	add	r7, sp, #0
    93c2:	4603      	mov	r3, r0
    93c4:	460a      	mov	r2, r1
    93c6:	71fb      	strb	r3, [r7, #7]
    93c8:	4613      	mov	r3, r2
    93ca:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    93cc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    93d0:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    93d2:	79fb      	ldrb	r3, [r7, #7]
    93d4:	4619      	mov	r1, r3
    93d6:	68f8      	ldr	r0, [r7, #12]
    93d8:	4b08      	ldr	r3, [pc, #32]	; (93fc <_usbd_ep_is_stall_sent+0x40>)
    93da:	4798      	blx	r3
    93dc:	4603      	mov	r3, r0
    93de:	4619      	mov	r1, r3
    93e0:	79bb      	ldrb	r3, [r7, #6]
    93e2:	2220      	movs	r2, #32
    93e4:	fa02 f303 	lsl.w	r3, r2, r3
    93e8:	400b      	ands	r3, r1
    93ea:	2b00      	cmp	r3, #0
    93ec:	bf14      	ite	ne
    93ee:	2301      	movne	r3, #1
    93f0:	2300      	moveq	r3, #0
    93f2:	b2db      	uxtb	r3, r3
}
    93f4:	4618      	mov	r0, r3
    93f6:	3710      	adds	r7, #16
    93f8:	46bd      	mov	sp, r7
    93fa:	bd80      	pop	{r7, pc}
    93fc:	00008d29 	.word	0x00008d29

00009400 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    9400:	b580      	push	{r7, lr}
    9402:	b082      	sub	sp, #8
    9404:	af00      	add	r7, sp, #0
    9406:	4603      	mov	r3, r0
    9408:	460a      	mov	r2, r1
    940a:	71fb      	strb	r3, [r7, #7]
    940c:	4613      	mov	r3, r2
    940e:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    9410:	79bb      	ldrb	r3, [r7, #6]
    9412:	2220      	movs	r2, #32
    9414:	409a      	lsls	r2, r3
    9416:	79fb      	ldrb	r3, [r7, #7]
    9418:	4611      	mov	r1, r2
    941a:	4618      	mov	r0, r3
    941c:	4b02      	ldr	r3, [pc, #8]	; (9428 <_usbd_ep_ack_stall+0x28>)
    941e:	4798      	blx	r3
}
    9420:	bf00      	nop
    9422:	3708      	adds	r7, #8
    9424:	46bd      	mov	sp, r7
    9426:	bd80      	pop	{r7, pc}
    9428:	00009279 	.word	0x00009279

0000942c <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    942c:	b580      	push	{r7, lr}
    942e:	b082      	sub	sp, #8
    9430:	af00      	add	r7, sp, #0
    9432:	4603      	mov	r3, r0
    9434:	71fb      	strb	r3, [r7, #7]
    9436:	460b      	mov	r3, r1
    9438:	71bb      	strb	r3, [r7, #6]
    943a:	4613      	mov	r3, r2
    943c:	717b      	strb	r3, [r7, #5]
	if (en) {
    943e:	797b      	ldrb	r3, [r7, #5]
    9440:	2b00      	cmp	r3, #0
    9442:	d008      	beq.n	9456 <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9444:	79bb      	ldrb	r3, [r7, #6]
    9446:	2220      	movs	r2, #32
    9448:	409a      	lsls	r2, r3
    944a:	79fb      	ldrb	r3, [r7, #7]
    944c:	4611      	mov	r1, r2
    944e:	4618      	mov	r0, r3
    9450:	4b07      	ldr	r3, [pc, #28]	; (9470 <_usbd_ep_int_stall_en+0x44>)
    9452:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    9454:	e007      	b.n	9466 <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    9456:	79bb      	ldrb	r3, [r7, #6]
    9458:	2220      	movs	r2, #32
    945a:	409a      	lsls	r2, r3
    945c:	79fb      	ldrb	r3, [r7, #7]
    945e:	4611      	mov	r1, r2
    9460:	4618      	mov	r0, r3
    9462:	4b04      	ldr	r3, [pc, #16]	; (9474 <_usbd_ep_int_stall_en+0x48>)
    9464:	4798      	blx	r3
}
    9466:	bf00      	nop
    9468:	3708      	adds	r7, #8
    946a:	46bd      	mov	sp, r7
    946c:	bd80      	pop	{r7, pc}
    946e:	bf00      	nop
    9470:	000092a1 	.word	0x000092a1
    9474:	000092c9 	.word	0x000092c9

00009478 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    9478:	b580      	push	{r7, lr}
    947a:	b082      	sub	sp, #8
    947c:	af00      	add	r7, sp, #0
    947e:	4603      	mov	r3, r0
    9480:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    9482:	79fb      	ldrb	r3, [r7, #7]
    9484:	4619      	mov	r1, r3
    9486:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    948a:	4b03      	ldr	r3, [pc, #12]	; (9498 <_usbd_ep_stop_setup+0x20>)
    948c:	4798      	blx	r3
}
    948e:	bf00      	nop
    9490:	3708      	adds	r7, #8
    9492:	46bd      	mov	sp, r7
    9494:	bd80      	pop	{r7, pc}
    9496:	bf00      	nop
    9498:	00008dfd 	.word	0x00008dfd

0000949c <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    949c:	b580      	push	{r7, lr}
    949e:	b082      	sub	sp, #8
    94a0:	af00      	add	r7, sp, #0
    94a2:	4603      	mov	r3, r0
    94a4:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    94a6:	79fb      	ldrb	r3, [r7, #7]
    94a8:	2210      	movs	r2, #16
    94aa:	4619      	mov	r1, r3
    94ac:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    94b0:	4b05      	ldr	r3, [pc, #20]	; (94c8 <_usbd_ep_is_setup+0x2c>)
    94b2:	4798      	blx	r3
    94b4:	4603      	mov	r3, r0
    94b6:	2b00      	cmp	r3, #0
    94b8:	bf14      	ite	ne
    94ba:	2301      	movne	r3, #1
    94bc:	2300      	moveq	r3, #0
    94be:	b2db      	uxtb	r3, r3
}
    94c0:	4618      	mov	r0, r3
    94c2:	3708      	adds	r7, #8
    94c4:	46bd      	mov	sp, r7
    94c6:	bd80      	pop	{r7, pc}
    94c8:	00008cf3 	.word	0x00008cf3

000094cc <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    94cc:	b580      	push	{r7, lr}
    94ce:	b082      	sub	sp, #8
    94d0:	af00      	add	r7, sp, #0
    94d2:	4603      	mov	r3, r0
    94d4:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    94d6:	79fb      	ldrb	r3, [r7, #7]
    94d8:	2110      	movs	r1, #16
    94da:	4618      	mov	r0, r3
    94dc:	4b02      	ldr	r3, [pc, #8]	; (94e8 <_usbd_ep_ack_setup+0x1c>)
    94de:	4798      	blx	r3
}
    94e0:	bf00      	nop
    94e2:	3708      	adds	r7, #8
    94e4:	46bd      	mov	sp, r7
    94e6:	bd80      	pop	{r7, pc}
    94e8:	00009279 	.word	0x00009279

000094ec <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    94ec:	b580      	push	{r7, lr}
    94ee:	b082      	sub	sp, #8
    94f0:	af00      	add	r7, sp, #0
    94f2:	4603      	mov	r3, r0
    94f4:	71fb      	strb	r3, [r7, #7]
    94f6:	460b      	mov	r3, r1
    94f8:	71bb      	strb	r3, [r7, #6]
    94fa:	4613      	mov	r3, r2
    94fc:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    94fe:	797b      	ldrb	r3, [r7, #5]
    9500:	2b00      	cmp	r3, #0
    9502:	d00b      	beq.n	951c <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    9504:	79bb      	ldrb	r3, [r7, #6]
    9506:	2201      	movs	r2, #1
    9508:	fa02 f303 	lsl.w	r3, r2, r3
    950c:	b2da      	uxtb	r2, r3
    950e:	79fb      	ldrb	r3, [r7, #7]
    9510:	4619      	mov	r1, r3
    9512:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9516:	4b09      	ldr	r3, [pc, #36]	; (953c <_usbd_ep_set_toggle+0x50>)
    9518:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    951a:	e00a      	b.n	9532 <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    951c:	79bb      	ldrb	r3, [r7, #6]
    951e:	2201      	movs	r2, #1
    9520:	fa02 f303 	lsl.w	r3, r2, r3
    9524:	b2da      	uxtb	r2, r3
    9526:	79fb      	ldrb	r3, [r7, #7]
    9528:	4619      	mov	r1, r3
    952a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    952e:	4b04      	ldr	r3, [pc, #16]	; (9540 <_usbd_ep_set_toggle+0x54>)
    9530:	4798      	blx	r3
}
    9532:	bf00      	nop
    9534:	3708      	adds	r7, #8
    9536:	46bd      	mov	sp, r7
    9538:	bd80      	pop	{r7, pc}
    953a:	bf00      	nop
    953c:	00008d7d 	.word	0x00008d7d
    9540:	00008dd1 	.word	0x00008dd1

00009544 <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    9544:	b580      	push	{r7, lr}
    9546:	b082      	sub	sp, #8
    9548:	af00      	add	r7, sp, #0
    954a:	4603      	mov	r3, r0
    954c:	460a      	mov	r2, r1
    954e:	71fb      	strb	r3, [r7, #7]
    9550:	4613      	mov	r3, r2
    9552:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    9554:	79bb      	ldrb	r3, [r7, #6]
    9556:	2201      	movs	r2, #1
    9558:	409a      	lsls	r2, r3
    955a:	79fb      	ldrb	r3, [r7, #7]
    955c:	4611      	mov	r1, r2
    955e:	4618      	mov	r0, r3
    9560:	4b02      	ldr	r3, [pc, #8]	; (956c <_usbd_ep_ack_io_cpt+0x28>)
    9562:	4798      	blx	r3
}
    9564:	bf00      	nop
    9566:	3708      	adds	r7, #8
    9568:	46bd      	mov	sp, r7
    956a:	bd80      	pop	{r7, pc}
    956c:	00009279 	.word	0x00009279

00009570 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    9570:	b480      	push	{r7}
    9572:	b085      	sub	sp, #20
    9574:	af00      	add	r7, sp, #0
    9576:	4603      	mov	r3, r0
    9578:	603a      	str	r2, [r7, #0]
    957a:	71fb      	strb	r3, [r7, #7]
    957c:	460b      	mov	r3, r1
    957e:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9580:	79fa      	ldrb	r2, [r7, #7]
    9582:	79bb      	ldrb	r3, [r7, #6]
    9584:	0052      	lsls	r2, r2, #1
    9586:	4413      	add	r3, r2
    9588:	011b      	lsls	r3, r3, #4
    958a:	4a06      	ldr	r2, [pc, #24]	; (95a4 <_usbd_ep_set_buf+0x34>)
    958c:	4413      	add	r3, r2
    958e:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    9590:	68fb      	ldr	r3, [r7, #12]
    9592:	683a      	ldr	r2, [r7, #0]
    9594:	601a      	str	r2, [r3, #0]
}
    9596:	bf00      	nop
    9598:	3714      	adds	r7, #20
    959a:	46bd      	mov	sp, r7
    959c:	f85d 7b04 	ldr.w	r7, [sp], #4
    95a0:	4770      	bx	lr
    95a2:	bf00      	nop
    95a4:	20000c5c 	.word	0x20000c5c

000095a8 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    95a8:	b480      	push	{r7}
    95aa:	b085      	sub	sp, #20
    95ac:	af00      	add	r7, sp, #0
    95ae:	4603      	mov	r3, r0
    95b0:	71fb      	strb	r3, [r7, #7]
    95b2:	460b      	mov	r3, r1
    95b4:	71bb      	strb	r3, [r7, #6]
    95b6:	4613      	mov	r3, r2
    95b8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    95ba:	79fa      	ldrb	r2, [r7, #7]
    95bc:	79bb      	ldrb	r3, [r7, #6]
    95be:	0052      	lsls	r2, r2, #1
    95c0:	4413      	add	r3, r2
    95c2:	011b      	lsls	r3, r3, #4
    95c4:	4a08      	ldr	r2, [pc, #32]	; (95e8 <_usbd_ep_set_in_count+0x40>)
    95c6:	4413      	add	r3, r2
    95c8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    95ca:	88bb      	ldrh	r3, [r7, #4]
    95cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
    95d0:	b299      	uxth	r1, r3
    95d2:	68fa      	ldr	r2, [r7, #12]
    95d4:	6853      	ldr	r3, [r2, #4]
    95d6:	f361 339b 	bfi	r3, r1, #14, #14
    95da:	6053      	str	r3, [r2, #4]
}
    95dc:	bf00      	nop
    95de:	3714      	adds	r7, #20
    95e0:	46bd      	mov	sp, r7
    95e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    95e6:	4770      	bx	lr
    95e8:	20000c5c 	.word	0x20000c5c

000095ec <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    95ec:	b480      	push	{r7}
    95ee:	b085      	sub	sp, #20
    95f0:	af00      	add	r7, sp, #0
    95f2:	4603      	mov	r3, r0
    95f4:	71fb      	strb	r3, [r7, #7]
    95f6:	460b      	mov	r3, r1
    95f8:	71bb      	strb	r3, [r7, #6]
    95fa:	4613      	mov	r3, r2
    95fc:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    95fe:	79fa      	ldrb	r2, [r7, #7]
    9600:	79bb      	ldrb	r3, [r7, #6]
    9602:	0052      	lsls	r2, r2, #1
    9604:	4413      	add	r3, r2
    9606:	011b      	lsls	r3, r3, #4
    9608:	4a08      	ldr	r2, [pc, #32]	; (962c <_usbd_ep_set_in_size+0x40>)
    960a:	4413      	add	r3, r2
    960c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    960e:	88bb      	ldrh	r3, [r7, #4]
    9610:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9614:	b299      	uxth	r1, r3
    9616:	68fa      	ldr	r2, [r7, #12]
    9618:	6853      	ldr	r3, [r2, #4]
    961a:	f361 030d 	bfi	r3, r1, #0, #14
    961e:	6053      	str	r3, [r2, #4]
}
    9620:	bf00      	nop
    9622:	3714      	adds	r7, #20
    9624:	46bd      	mov	sp, r7
    9626:	f85d 7b04 	ldr.w	r7, [sp], #4
    962a:	4770      	bx	lr
    962c:	20000c5c 	.word	0x20000c5c

00009630 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9630:	b480      	push	{r7}
    9632:	b085      	sub	sp, #20
    9634:	af00      	add	r7, sp, #0
    9636:	4603      	mov	r3, r0
    9638:	71fb      	strb	r3, [r7, #7]
    963a:	460b      	mov	r3, r1
    963c:	71bb      	strb	r3, [r7, #6]
    963e:	4613      	mov	r3, r2
    9640:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9642:	79fa      	ldrb	r2, [r7, #7]
    9644:	79bb      	ldrb	r3, [r7, #6]
    9646:	0052      	lsls	r2, r2, #1
    9648:	4413      	add	r3, r2
    964a:	011b      	lsls	r3, r3, #4
    964c:	4a08      	ldr	r2, [pc, #32]	; (9670 <_usbd_ep_set_out_count+0x40>)
    964e:	4413      	add	r3, r2
    9650:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    9652:	88bb      	ldrh	r3, [r7, #4]
    9654:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9658:	b299      	uxth	r1, r3
    965a:	68fa      	ldr	r2, [r7, #12]
    965c:	6853      	ldr	r3, [r2, #4]
    965e:	f361 030d 	bfi	r3, r1, #0, #14
    9662:	6053      	str	r3, [r2, #4]
}
    9664:	bf00      	nop
    9666:	3714      	adds	r7, #20
    9668:	46bd      	mov	sp, r7
    966a:	f85d 7b04 	ldr.w	r7, [sp], #4
    966e:	4770      	bx	lr
    9670:	20000c5c 	.word	0x20000c5c

00009674 <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9674:	b480      	push	{r7}
    9676:	b085      	sub	sp, #20
    9678:	af00      	add	r7, sp, #0
    967a:	4603      	mov	r3, r0
    967c:	71fb      	strb	r3, [r7, #7]
    967e:	460b      	mov	r3, r1
    9680:	71bb      	strb	r3, [r7, #6]
    9682:	4613      	mov	r3, r2
    9684:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9686:	79fa      	ldrb	r2, [r7, #7]
    9688:	79bb      	ldrb	r3, [r7, #6]
    968a:	0052      	lsls	r2, r2, #1
    968c:	4413      	add	r3, r2
    968e:	011b      	lsls	r3, r3, #4
    9690:	4a08      	ldr	r2, [pc, #32]	; (96b4 <_usbd_ep_set_out_size+0x40>)
    9692:	4413      	add	r3, r2
    9694:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    9696:	88bb      	ldrh	r3, [r7, #4]
    9698:	f3c3 030d 	ubfx	r3, r3, #0, #14
    969c:	b299      	uxth	r1, r3
    969e:	68fa      	ldr	r2, [r7, #12]
    96a0:	6853      	ldr	r3, [r2, #4]
    96a2:	f361 339b 	bfi	r3, r1, #14, #14
    96a6:	6053      	str	r3, [r2, #4]
}
    96a8:	bf00      	nop
    96aa:	3714      	adds	r7, #20
    96ac:	46bd      	mov	sp, r7
    96ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    96b2:	4770      	bx	lr
    96b4:	20000c5c 	.word	0x20000c5c

000096b8 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    96b8:	b580      	push	{r7, lr}
    96ba:	b084      	sub	sp, #16
    96bc:	af00      	add	r7, sp, #0
    96be:	60ba      	str	r2, [r7, #8]
    96c0:	607b      	str	r3, [r7, #4]
    96c2:	4603      	mov	r3, r0
    96c4:	73fb      	strb	r3, [r7, #15]
    96c6:	460b      	mov	r3, r1
    96c8:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    96ca:	68bb      	ldr	r3, [r7, #8]
    96cc:	b29a      	uxth	r2, r3
    96ce:	7bb9      	ldrb	r1, [r7, #14]
    96d0:	7bfb      	ldrb	r3, [r7, #15]
    96d2:	4618      	mov	r0, r3
    96d4:	4b06      	ldr	r3, [pc, #24]	; (96f0 <_usbd_ep_set_in_trans+0x38>)
    96d6:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    96d8:	687b      	ldr	r3, [r7, #4]
    96da:	b29a      	uxth	r2, r3
    96dc:	7bb9      	ldrb	r1, [r7, #14]
    96de:	7bfb      	ldrb	r3, [r7, #15]
    96e0:	4618      	mov	r0, r3
    96e2:	4b04      	ldr	r3, [pc, #16]	; (96f4 <_usbd_ep_set_in_trans+0x3c>)
    96e4:	4798      	blx	r3
}
    96e6:	bf00      	nop
    96e8:	3710      	adds	r7, #16
    96ea:	46bd      	mov	sp, r7
    96ec:	bd80      	pop	{r7, pc}
    96ee:	bf00      	nop
    96f0:	000095ed 	.word	0x000095ed
    96f4:	000095a9 	.word	0x000095a9

000096f8 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    96f8:	b580      	push	{r7, lr}
    96fa:	b084      	sub	sp, #16
    96fc:	af00      	add	r7, sp, #0
    96fe:	60ba      	str	r2, [r7, #8]
    9700:	607b      	str	r3, [r7, #4]
    9702:	4603      	mov	r3, r0
    9704:	73fb      	strb	r3, [r7, #15]
    9706:	460b      	mov	r3, r1
    9708:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    970a:	68bb      	ldr	r3, [r7, #8]
    970c:	b29a      	uxth	r2, r3
    970e:	7bb9      	ldrb	r1, [r7, #14]
    9710:	7bfb      	ldrb	r3, [r7, #15]
    9712:	4618      	mov	r0, r3
    9714:	4b06      	ldr	r3, [pc, #24]	; (9730 <_usbd_ep_set_out_trans+0x38>)
    9716:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    9718:	687b      	ldr	r3, [r7, #4]
    971a:	b29a      	uxth	r2, r3
    971c:	7bb9      	ldrb	r1, [r7, #14]
    971e:	7bfb      	ldrb	r3, [r7, #15]
    9720:	4618      	mov	r0, r3
    9722:	4b04      	ldr	r3, [pc, #16]	; (9734 <_usbd_ep_set_out_trans+0x3c>)
    9724:	4798      	blx	r3
}
    9726:	bf00      	nop
    9728:	3710      	adds	r7, #16
    972a:	46bd      	mov	sp, r7
    972c:	bd80      	pop	{r7, pc}
    972e:	bf00      	nop
    9730:	00009675 	.word	0x00009675
    9734:	00009631 	.word	0x00009631

00009738 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    9738:	b480      	push	{r7}
    973a:	b085      	sub	sp, #20
    973c:	af00      	add	r7, sp, #0
    973e:	4603      	mov	r3, r0
    9740:	460a      	mov	r2, r1
    9742:	71fb      	strb	r3, [r7, #7]
    9744:	4613      	mov	r3, r2
    9746:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9748:	79fa      	ldrb	r2, [r7, #7]
    974a:	79bb      	ldrb	r3, [r7, #6]
    974c:	0052      	lsls	r2, r2, #1
    974e:	4413      	add	r3, r2
    9750:	011b      	lsls	r3, r3, #4
    9752:	4a06      	ldr	r2, [pc, #24]	; (976c <_usbd_ep_clear_bank_status+0x34>)
    9754:	4413      	add	r3, r2
    9756:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    9758:	68fb      	ldr	r3, [r7, #12]
    975a:	2200      	movs	r2, #0
    975c:	729a      	strb	r2, [r3, #10]
}
    975e:	bf00      	nop
    9760:	3714      	adds	r7, #20
    9762:	46bd      	mov	sp, r7
    9764:	f85d 7b04 	ldr.w	r7, [sp], #4
    9768:	4770      	bx	lr
    976a:	bf00      	nop
    976c:	20000c5c 	.word	0x20000c5c

00009770 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9770:	b580      	push	{r7, lr}
    9772:	b082      	sub	sp, #8
    9774:	af00      	add	r7, sp, #0
    9776:	4603      	mov	r3, r0
    9778:	71fb      	strb	r3, [r7, #7]
    977a:	460b      	mov	r3, r1
    977c:	71bb      	strb	r3, [r7, #6]
    977e:	4613      	mov	r3, r2
    9780:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9782:	797b      	ldrb	r3, [r7, #5]
    9784:	2b00      	cmp	r3, #0
    9786:	d00b      	beq.n	97a0 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9788:	79bb      	ldrb	r3, [r7, #6]
    978a:	2240      	movs	r2, #64	; 0x40
    978c:	fa02 f303 	lsl.w	r3, r2, r3
    9790:	b2da      	uxtb	r2, r3
    9792:	79fb      	ldrb	r3, [r7, #7]
    9794:	4619      	mov	r1, r3
    9796:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    979a:	4b09      	ldr	r3, [pc, #36]	; (97c0 <_usbd_ep_set_in_rdy+0x50>)
    979c:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    979e:	e00a      	b.n	97b6 <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    97a0:	79bb      	ldrb	r3, [r7, #6]
    97a2:	2240      	movs	r2, #64	; 0x40
    97a4:	fa02 f303 	lsl.w	r3, r2, r3
    97a8:	b2da      	uxtb	r2, r3
    97aa:	79fb      	ldrb	r3, [r7, #7]
    97ac:	4619      	mov	r1, r3
    97ae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97b2:	4b04      	ldr	r3, [pc, #16]	; (97c4 <_usbd_ep_set_in_rdy+0x54>)
    97b4:	4798      	blx	r3
}
    97b6:	bf00      	nop
    97b8:	3708      	adds	r7, #8
    97ba:	46bd      	mov	sp, r7
    97bc:	bd80      	pop	{r7, pc}
    97be:	bf00      	nop
    97c0:	00008d7d 	.word	0x00008d7d
    97c4:	00008dd1 	.word	0x00008dd1

000097c8 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    97c8:	b580      	push	{r7, lr}
    97ca:	b082      	sub	sp, #8
    97cc:	af00      	add	r7, sp, #0
    97ce:	4603      	mov	r3, r0
    97d0:	71fb      	strb	r3, [r7, #7]
    97d2:	460b      	mov	r3, r1
    97d4:	71bb      	strb	r3, [r7, #6]
    97d6:	4613      	mov	r3, r2
    97d8:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    97da:	797b      	ldrb	r3, [r7, #5]
    97dc:	2b00      	cmp	r3, #0
    97de:	d00b      	beq.n	97f8 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    97e0:	79bb      	ldrb	r3, [r7, #6]
    97e2:	2240      	movs	r2, #64	; 0x40
    97e4:	fa02 f303 	lsl.w	r3, r2, r3
    97e8:	b2da      	uxtb	r2, r3
    97ea:	79fb      	ldrb	r3, [r7, #7]
    97ec:	4619      	mov	r1, r3
    97ee:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97f2:	4b09      	ldr	r3, [pc, #36]	; (9818 <_usbd_ep_set_out_rdy+0x50>)
    97f4:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    97f6:	e00a      	b.n	980e <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    97f8:	79bb      	ldrb	r3, [r7, #6]
    97fa:	2240      	movs	r2, #64	; 0x40
    97fc:	fa02 f303 	lsl.w	r3, r2, r3
    9800:	b2da      	uxtb	r2, r3
    9802:	79fb      	ldrb	r3, [r7, #7]
    9804:	4619      	mov	r1, r3
    9806:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    980a:	4b04      	ldr	r3, [pc, #16]	; (981c <_usbd_ep_set_out_rdy+0x54>)
    980c:	4798      	blx	r3
}
    980e:	bf00      	nop
    9810:	3708      	adds	r7, #8
    9812:	46bd      	mov	sp, r7
    9814:	bd80      	pop	{r7, pc}
    9816:	bf00      	nop
    9818:	00008dd1 	.word	0x00008dd1
    981c:	00008d7d 	.word	0x00008d7d

00009820 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9820:	b480      	push	{r7}
    9822:	b083      	sub	sp, #12
    9824:	af00      	add	r7, sp, #0
    9826:	4603      	mov	r3, r0
    9828:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    982a:	88fb      	ldrh	r3, [r7, #6]
    982c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9830:	d820      	bhi.n	9874 <_usbd_ep_pcksize_size+0x54>
    9832:	88fb      	ldrh	r3, [r7, #6]
    9834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9838:	d81a      	bhi.n	9870 <_usbd_ep_pcksize_size+0x50>
    983a:	88fb      	ldrh	r3, [r7, #6]
    983c:	2b80      	cmp	r3, #128	; 0x80
    983e:	d815      	bhi.n	986c <_usbd_ep_pcksize_size+0x4c>
    9840:	88fb      	ldrh	r3, [r7, #6]
    9842:	2b40      	cmp	r3, #64	; 0x40
    9844:	d810      	bhi.n	9868 <_usbd_ep_pcksize_size+0x48>
    9846:	88fb      	ldrh	r3, [r7, #6]
    9848:	2b20      	cmp	r3, #32
    984a:	d80b      	bhi.n	9864 <_usbd_ep_pcksize_size+0x44>
    984c:	88fb      	ldrh	r3, [r7, #6]
    984e:	2b10      	cmp	r3, #16
    9850:	d806      	bhi.n	9860 <_usbd_ep_pcksize_size+0x40>
    9852:	88fb      	ldrh	r3, [r7, #6]
    9854:	2b08      	cmp	r3, #8
    9856:	bf8c      	ite	hi
    9858:	2301      	movhi	r3, #1
    985a:	2300      	movls	r3, #0
    985c:	b2db      	uxtb	r3, r3
    985e:	e00a      	b.n	9876 <_usbd_ep_pcksize_size+0x56>
    9860:	2302      	movs	r3, #2
    9862:	e008      	b.n	9876 <_usbd_ep_pcksize_size+0x56>
    9864:	2303      	movs	r3, #3
    9866:	e006      	b.n	9876 <_usbd_ep_pcksize_size+0x56>
    9868:	2304      	movs	r3, #4
    986a:	e004      	b.n	9876 <_usbd_ep_pcksize_size+0x56>
    986c:	2305      	movs	r3, #5
    986e:	e002      	b.n	9876 <_usbd_ep_pcksize_size+0x56>
    9870:	2306      	movs	r3, #6
    9872:	e000      	b.n	9876 <_usbd_ep_pcksize_size+0x56>
    9874:	2307      	movs	r3, #7
}
    9876:	4618      	mov	r0, r3
    9878:	370c      	adds	r7, #12
    987a:	46bd      	mov	sp, r7
    987c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9880:	4770      	bx	lr
	...

00009884 <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9884:	b480      	push	{r7}
    9886:	b085      	sub	sp, #20
    9888:	af00      	add	r7, sp, #0
    988a:	4603      	mov	r3, r0
    988c:	460a      	mov	r2, r1
    988e:	71fb      	strb	r3, [r7, #7]
    9890:	4613      	mov	r3, r2
    9892:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9894:	79fb      	ldrb	r3, [r7, #7]
    9896:	2b00      	cmp	r3, #0
    9898:	d008      	beq.n	98ac <_usb_d_dev_ept+0x28>
    989a:	79bb      	ldrb	r3, [r7, #6]
    989c:	2b00      	cmp	r3, #0
    989e:	d003      	beq.n	98a8 <_usb_d_dev_ept+0x24>
    98a0:	79fb      	ldrb	r3, [r7, #7]
    98a2:	3304      	adds	r3, #4
    98a4:	b2db      	uxtb	r3, r3
    98a6:	e002      	b.n	98ae <_usb_d_dev_ept+0x2a>
    98a8:	79fb      	ldrb	r3, [r7, #7]
    98aa:	e000      	b.n	98ae <_usb_d_dev_ept+0x2a>
    98ac:	2300      	movs	r3, #0
    98ae:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    98b0:	7bfa      	ldrb	r2, [r7, #15]
    98b2:	4613      	mov	r3, r2
    98b4:	009b      	lsls	r3, r3, #2
    98b6:	4413      	add	r3, r2
    98b8:	009b      	lsls	r3, r3, #2
    98ba:	3310      	adds	r3, #16
    98bc:	4a04      	ldr	r2, [pc, #16]	; (98d0 <_usb_d_dev_ept+0x4c>)
    98be:	4413      	add	r3, r2
    98c0:	3304      	adds	r3, #4
}
    98c2:	4618      	mov	r0, r3
    98c4:	3714      	adds	r7, #20
    98c6:	46bd      	mov	sp, r7
    98c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    98cc:	4770      	bx	lr
    98ce:	bf00      	nop
    98d0:	20000b94 	.word	0x20000b94

000098d4 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    98d4:	b580      	push	{r7, lr}
    98d6:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    98d8:	2104      	movs	r1, #4
    98da:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    98de:	4b03      	ldr	r3, [pc, #12]	; (98ec <_usb_d_dev_sof+0x18>)
    98e0:	4798      	blx	r3
	dev_inst.callbacks.sof();
    98e2:	4b03      	ldr	r3, [pc, #12]	; (98f0 <_usb_d_dev_sof+0x1c>)
    98e4:	681b      	ldr	r3, [r3, #0]
    98e6:	4798      	blx	r3
}
    98e8:	bf00      	nop
    98ea:	bd80      	pop	{r7, pc}
    98ec:	00008f4b 	.word	0x00008f4b
    98f0:	20000b94 	.word	0x20000b94

000098f4 <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    98f4:	b580      	push	{r7, lr}
    98f6:	b084      	sub	sp, #16
    98f8:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    98fa:	2300      	movs	r3, #0
    98fc:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    98fe:	f240 2101 	movw	r1, #513	; 0x201
    9902:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9906:	4b1a      	ldr	r3, [pc, #104]	; (9970 <_usb_d_dev_lpmsusp+0x7c>)
    9908:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    990a:	f240 2101 	movw	r1, #513	; 0x201
    990e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9912:	4b18      	ldr	r3, [pc, #96]	; (9974 <_usb_d_dev_lpmsusp+0x80>)
    9914:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9916:	2170      	movs	r1, #112	; 0x70
    9918:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    991c:	4b16      	ldr	r3, [pc, #88]	; (9978 <_usb_d_dev_lpmsusp+0x84>)
    991e:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9920:	2300      	movs	r3, #0
    9922:	73fb      	strb	r3, [r7, #15]
    9924:	e018      	b.n	9958 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9926:	7bfb      	ldrb	r3, [r7, #15]
    9928:	015b      	lsls	r3, r3, #5
    992a:	4a14      	ldr	r2, [pc, #80]	; (997c <_usb_d_dev_lpmsusp+0x88>)
    992c:	4413      	add	r3, r2
    992e:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9930:	687b      	ldr	r3, [r7, #4]
    9932:	891b      	ldrh	r3, [r3, #8]
    9934:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9938:	b2db      	uxtb	r3, r3
    993a:	2b03      	cmp	r3, #3
    993c:	d109      	bne.n	9952 <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    993e:	687b      	ldr	r3, [r7, #4]
    9940:	891b      	ldrh	r3, [r3, #8]
    9942:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9946:	b29b      	uxth	r3, r3
    9948:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    994a:	687b      	ldr	r3, [r7, #4]
    994c:	2200      	movs	r2, #0
    994e:	811a      	strh	r2, [r3, #8]
			break;
    9950:	e005      	b.n	995e <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9952:	7bfb      	ldrb	r3, [r7, #15]
    9954:	3301      	adds	r3, #1
    9956:	73fb      	strb	r3, [r7, #15]
    9958:	7bfb      	ldrb	r3, [r7, #15]
    995a:	2b03      	cmp	r3, #3
    995c:	d9e3      	bls.n	9926 <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    995e:	4b08      	ldr	r3, [pc, #32]	; (9980 <_usb_d_dev_lpmsusp+0x8c>)
    9960:	685b      	ldr	r3, [r3, #4]
    9962:	68b9      	ldr	r1, [r7, #8]
    9964:	2003      	movs	r0, #3
    9966:	4798      	blx	r3
}
    9968:	bf00      	nop
    996a:	3710      	adds	r7, #16
    996c:	46bd      	mov	sp, r7
    996e:	bd80      	pop	{r7, pc}
    9970:	00008f4b 	.word	0x00008f4b
    9974:	00008fa1 	.word	0x00008fa1
    9978:	00008f69 	.word	0x00008f69
    997c:	20000c5c 	.word	0x20000c5c
    9980:	20000b94 	.word	0x20000b94

00009984 <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9984:	b580      	push	{r7, lr}
    9986:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9988:	2180      	movs	r1, #128	; 0x80
    998a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    998e:	4b04      	ldr	r3, [pc, #16]	; (99a0 <_usb_d_dev_ramerr+0x1c>)
    9990:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9992:	4b04      	ldr	r3, [pc, #16]	; (99a4 <_usb_d_dev_ramerr+0x20>)
    9994:	685b      	ldr	r3, [r3, #4]
    9996:	2100      	movs	r1, #0
    9998:	2005      	movs	r0, #5
    999a:	4798      	blx	r3
}
    999c:	bf00      	nop
    999e:	bd80      	pop	{r7, pc}
    99a0:	00008f4b 	.word	0x00008f4b
    99a4:	20000b94 	.word	0x20000b94

000099a8 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    99a8:	b580      	push	{r7, lr}
    99aa:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    99ac:	2170      	movs	r1, #112	; 0x70
    99ae:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    99b2:	4b0b      	ldr	r3, [pc, #44]	; (99e0 <_usb_d_dev_wakeup+0x38>)
    99b4:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    99b6:	2170      	movs	r1, #112	; 0x70
    99b8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    99bc:	4b09      	ldr	r3, [pc, #36]	; (99e4 <_usb_d_dev_wakeup+0x3c>)
    99be:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    99c0:	f240 2101 	movw	r1, #513	; 0x201
    99c4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    99c8:	4b07      	ldr	r3, [pc, #28]	; (99e8 <_usb_d_dev_wakeup+0x40>)
    99ca:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    99cc:	2000      	movs	r0, #0
    99ce:	4b07      	ldr	r3, [pc, #28]	; (99ec <_usb_d_dev_wakeup+0x44>)
    99d0:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    99d2:	4b07      	ldr	r3, [pc, #28]	; (99f0 <_usb_d_dev_wakeup+0x48>)
    99d4:	685b      	ldr	r3, [r3, #4]
    99d6:	2100      	movs	r1, #0
    99d8:	2002      	movs	r0, #2
    99da:	4798      	blx	r3
}
    99dc:	bf00      	nop
    99de:	bd80      	pop	{r7, pc}
    99e0:	00008f4b 	.word	0x00008f4b
    99e4:	00008fa1 	.word	0x00008fa1
    99e8:	00008f69 	.word	0x00008f69
    99ec:	00009249 	.word	0x00009249
    99f0:	20000b94 	.word	0x20000b94

000099f4 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    99f4:	b580      	push	{r7, lr}
    99f6:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    99f8:	2200      	movs	r2, #0
    99fa:	2100      	movs	r1, #0
    99fc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a00:	4b0d      	ldr	r3, [pc, #52]	; (9a38 <_usb_d_dev_reset+0x44>)
    9a02:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9a04:	2108      	movs	r1, #8
    9a06:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a0a:	4b0c      	ldr	r3, [pc, #48]	; (9a3c <_usb_d_dev_reset+0x48>)
    9a0c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9a0e:	2170      	movs	r1, #112	; 0x70
    9a10:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a14:	4b0a      	ldr	r3, [pc, #40]	; (9a40 <_usb_d_dev_reset+0x4c>)
    9a16:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9a18:	f240 2101 	movw	r1, #513	; 0x201
    9a1c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a20:	4b08      	ldr	r3, [pc, #32]	; (9a44 <_usb_d_dev_reset+0x50>)
    9a22:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9a24:	4b08      	ldr	r3, [pc, #32]	; (9a48 <_usb_d_dev_reset+0x54>)
    9a26:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9a28:	4b08      	ldr	r3, [pc, #32]	; (9a4c <_usb_d_dev_reset+0x58>)
    9a2a:	685b      	ldr	r3, [r3, #4]
    9a2c:	2100      	movs	r1, #0
    9a2e:	2001      	movs	r0, #1
    9a30:	4798      	blx	r3
}
    9a32:	bf00      	nop
    9a34:	bd80      	pop	{r7, pc}
    9a36:	bf00      	nop
    9a38:	00008ee1 	.word	0x00008ee1
    9a3c:	00008f4b 	.word	0x00008f4b
    9a40:	00008fa1 	.word	0x00008fa1
    9a44:	00008f69 	.word	0x00008f69
    9a48:	0000a5b1 	.word	0x0000a5b1
    9a4c:	20000b94 	.word	0x20000b94

00009a50 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9a50:	b580      	push	{r7, lr}
    9a52:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9a54:	f240 2101 	movw	r1, #513	; 0x201
    9a58:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a5c:	4b09      	ldr	r3, [pc, #36]	; (9a84 <_usb_d_dev_suspend+0x34>)
    9a5e:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9a60:	f240 2101 	movw	r1, #513	; 0x201
    9a64:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a68:	4b07      	ldr	r3, [pc, #28]	; (9a88 <_usb_d_dev_suspend+0x38>)
    9a6a:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9a6c:	2170      	movs	r1, #112	; 0x70
    9a6e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a72:	4b06      	ldr	r3, [pc, #24]	; (9a8c <_usb_d_dev_suspend+0x3c>)
    9a74:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    9a76:	4b06      	ldr	r3, [pc, #24]	; (9a90 <_usb_d_dev_suspend+0x40>)
    9a78:	685b      	ldr	r3, [r3, #4]
    9a7a:	2100      	movs	r1, #0
    9a7c:	2004      	movs	r0, #4
    9a7e:	4798      	blx	r3
}
    9a80:	bf00      	nop
    9a82:	bd80      	pop	{r7, pc}
    9a84:	00008f4b 	.word	0x00008f4b
    9a88:	00008fa1 	.word	0x00008fa1
    9a8c:	00008f69 	.word	0x00008f69
    9a90:	20000b94 	.word	0x20000b94

00009a94 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9a94:	b580      	push	{r7, lr}
    9a96:	b082      	sub	sp, #8
    9a98:	af00      	add	r7, sp, #0
	bool     rc    = true;
    9a9a:	2301      	movs	r3, #1
    9a9c:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    9a9e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9aa2:	4b22      	ldr	r3, [pc, #136]	; (9b2c <_usb_d_dev_handle_nep+0x98>)
    9aa4:	4798      	blx	r3
    9aa6:	4603      	mov	r3, r0
    9aa8:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9aaa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9aae:	4b20      	ldr	r3, [pc, #128]	; (9b30 <_usb_d_dev_handle_nep+0x9c>)
    9ab0:	4798      	blx	r3
    9ab2:	4603      	mov	r3, r0
    9ab4:	461a      	mov	r2, r3
    9ab6:	88bb      	ldrh	r3, [r7, #4]
    9ab8:	4013      	ands	r3, r2
    9aba:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9abc:	88bb      	ldrh	r3, [r7, #4]
    9abe:	f003 0304 	and.w	r3, r3, #4
    9ac2:	2b00      	cmp	r3, #0
    9ac4:	d003      	beq.n	9ace <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    9ac6:	4b1b      	ldr	r3, [pc, #108]	; (9b34 <_usb_d_dev_handle_nep+0xa0>)
    9ac8:	4798      	blx	r3
		return true;
    9aca:	2301      	movs	r3, #1
    9acc:	e02a      	b.n	9b24 <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9ace:	88bb      	ldrh	r3, [r7, #4]
    9ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9ad4:	2b00      	cmp	r3, #0
    9ad6:	d002      	beq.n	9ade <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    9ad8:	4b17      	ldr	r3, [pc, #92]	; (9b38 <_usb_d_dev_handle_nep+0xa4>)
    9ada:	4798      	blx	r3
    9adc:	e021      	b.n	9b22 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9ade:	88bb      	ldrh	r3, [r7, #4]
    9ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9ae4:	2b00      	cmp	r3, #0
    9ae6:	d002      	beq.n	9aee <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    9ae8:	4b14      	ldr	r3, [pc, #80]	; (9b3c <_usb_d_dev_handle_nep+0xa8>)
    9aea:	4798      	blx	r3
    9aec:	e019      	b.n	9b22 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9aee:	88bb      	ldrh	r3, [r7, #4]
    9af0:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9af4:	2b00      	cmp	r3, #0
    9af6:	d002      	beq.n	9afe <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    9af8:	4b11      	ldr	r3, [pc, #68]	; (9b40 <_usb_d_dev_handle_nep+0xac>)
    9afa:	4798      	blx	r3
    9afc:	e011      	b.n	9b22 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9afe:	88bb      	ldrh	r3, [r7, #4]
    9b00:	f003 0308 	and.w	r3, r3, #8
    9b04:	2b00      	cmp	r3, #0
    9b06:	d002      	beq.n	9b0e <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    9b08:	4b0e      	ldr	r3, [pc, #56]	; (9b44 <_usb_d_dev_handle_nep+0xb0>)
    9b0a:	4798      	blx	r3
    9b0c:	e009      	b.n	9b22 <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9b0e:	88bb      	ldrh	r3, [r7, #4]
    9b10:	f003 0301 	and.w	r3, r3, #1
    9b14:	2b00      	cmp	r3, #0
    9b16:	d002      	beq.n	9b1e <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9b18:	4b0b      	ldr	r3, [pc, #44]	; (9b48 <_usb_d_dev_handle_nep+0xb4>)
    9b1a:	4798      	blx	r3
    9b1c:	e001      	b.n	9b22 <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9b1e:	2300      	movs	r3, #0
    9b20:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9b22:	79fb      	ldrb	r3, [r7, #7]
}
    9b24:	4618      	mov	r0, r3
    9b26:	3708      	adds	r7, #8
    9b28:	46bd      	mov	sp, r7
    9b2a:	bd80      	pop	{r7, pc}
    9b2c:	00008f31 	.word	0x00008f31
    9b30:	00008f87 	.word	0x00008f87
    9b34:	000098d5 	.word	0x000098d5
    9b38:	000098f5 	.word	0x000098f5
    9b3c:	00009985 	.word	0x00009985
    9b40:	000099a9 	.word	0x000099a9
    9b44:	000099f5 	.word	0x000099f5
    9b48:	00009a51 	.word	0x00009a51

00009b4c <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9b4c:	b590      	push	{r4, r7, lr}
    9b4e:	b089      	sub	sp, #36	; 0x24
    9b50:	af00      	add	r7, sp, #0
    9b52:	6078      	str	r0, [r7, #4]
    9b54:	460b      	mov	r3, r1
    9b56:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    9b58:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9b5c:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9b5e:	687b      	ldr	r3, [r7, #4]
    9b60:	7c9b      	ldrb	r3, [r3, #18]
    9b62:	f003 030f 	and.w	r3, r3, #15
    9b66:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9b68:	7dfb      	ldrb	r3, [r7, #23]
    9b6a:	015b      	lsls	r3, r3, #5
    9b6c:	4a73      	ldr	r2, [pc, #460]	; (9d3c <_usb_d_dev_in_next+0x1f0>)
    9b6e:	4413      	add	r3, r2
    9b70:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9b72:	78fb      	ldrb	r3, [r7, #3]
    9b74:	2b00      	cmp	r3, #0
    9b76:	d006      	beq.n	9b86 <_usb_d_dev_in_next+0x3a>
    9b78:	693b      	ldr	r3, [r7, #16]
    9b7a:	3310      	adds	r3, #16
    9b7c:	685b      	ldr	r3, [r3, #4]
    9b7e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9b82:	b29b      	uxth	r3, r3
    9b84:	e000      	b.n	9b88 <_usb_d_dev_in_next+0x3c>
    9b86:	2300      	movs	r3, #0
    9b88:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9b8a:	687b      	ldr	r3, [r7, #4]
    9b8c:	8a1b      	ldrh	r3, [r3, #16]
    9b8e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9b92:	4293      	cmp	r3, r2
    9b94:	d103      	bne.n	9b9e <_usb_d_dev_in_next+0x52>
    9b96:	687b      	ldr	r3, [r7, #4]
    9b98:	8a1b      	ldrh	r3, [r3, #16]
    9b9a:	b21b      	sxth	r3, r3
    9b9c:	e004      	b.n	9ba8 <_usb_d_dev_in_next+0x5c>
    9b9e:	687b      	ldr	r3, [r7, #4]
    9ba0:	8a1b      	ldrh	r3, [r3, #16]
    9ba2:	3b01      	subs	r3, #1
    9ba4:	b29b      	uxth	r3, r3
    9ba6:	b21b      	sxth	r3, r3
    9ba8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9bac:	4013      	ands	r3, r2
    9bae:	b21b      	sxth	r3, r3
    9bb0:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    9bb2:	2300      	movs	r3, #0
    9bb4:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    9bb6:	687b      	ldr	r3, [r7, #4]
    9bb8:	7cdb      	ldrb	r3, [r3, #19]
    9bba:	f003 0307 	and.w	r3, r3, #7
    9bbe:	b2db      	uxtb	r3, r3
    9bc0:	2b01      	cmp	r3, #1
    9bc2:	bf0c      	ite	eq
    9bc4:	2301      	moveq	r3, #1
    9bc6:	2300      	movne	r3, #0
    9bc8:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    9bca:	78fb      	ldrb	r3, [r7, #3]
    9bcc:	2b00      	cmp	r3, #0
    9bce:	d004      	beq.n	9bda <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9bd0:	7dfb      	ldrb	r3, [r7, #23]
    9bd2:	2101      	movs	r1, #1
    9bd4:	4618      	mov	r0, r3
    9bd6:	4b5a      	ldr	r3, [pc, #360]	; (9d40 <_usb_d_dev_in_next+0x1f4>)
    9bd8:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    9bda:	687b      	ldr	r3, [r7, #4]
    9bdc:	689a      	ldr	r2, [r3, #8]
    9bde:	89fb      	ldrh	r3, [r7, #14]
    9be0:	441a      	add	r2, r3
    9be2:	687b      	ldr	r3, [r7, #4]
    9be4:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    9be6:	687b      	ldr	r3, [r7, #4]
    9be8:	689a      	ldr	r2, [r3, #8]
    9bea:	687b      	ldr	r3, [r7, #4]
    9bec:	685b      	ldr	r3, [r3, #4]
    9bee:	429a      	cmp	r2, r3
    9bf0:	d243      	bcs.n	9c7a <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    9bf2:	687b      	ldr	r3, [r7, #4]
    9bf4:	685b      	ldr	r3, [r3, #4]
    9bf6:	b29a      	uxth	r2, r3
    9bf8:	687b      	ldr	r3, [r7, #4]
    9bfa:	689b      	ldr	r3, [r3, #8]
    9bfc:	b29b      	uxth	r3, r3
    9bfe:	1ad3      	subs	r3, r2, r3
    9c00:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    9c02:	687b      	ldr	r3, [r7, #4]
    9c04:	7cdb      	ldrb	r3, [r3, #19]
    9c06:	f003 0320 	and.w	r3, r3, #32
    9c0a:	b2db      	uxtb	r3, r3
    9c0c:	2b00      	cmp	r3, #0
    9c0e:	d01b      	beq.n	9c48 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9c10:	687b      	ldr	r3, [r7, #4]
    9c12:	8a1b      	ldrh	r3, [r3, #16]
    9c14:	8bfa      	ldrh	r2, [r7, #30]
    9c16:	429a      	cmp	r2, r3
    9c18:	d902      	bls.n	9c20 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    9c1a:	687b      	ldr	r3, [r7, #4]
    9c1c:	8a1b      	ldrh	r3, [r3, #16]
    9c1e:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9c20:	687b      	ldr	r3, [r7, #4]
    9c22:	68d8      	ldr	r0, [r3, #12]
    9c24:	687b      	ldr	r3, [r7, #4]
    9c26:	681a      	ldr	r2, [r3, #0]
    9c28:	687b      	ldr	r3, [r7, #4]
    9c2a:	689b      	ldr	r3, [r3, #8]
    9c2c:	4413      	add	r3, r2
    9c2e:	8bfa      	ldrh	r2, [r7, #30]
    9c30:	4619      	mov	r1, r3
    9c32:	4b44      	ldr	r3, [pc, #272]	; (9d44 <_usb_d_dev_in_next+0x1f8>)
    9c34:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9c36:	687b      	ldr	r3, [r7, #4]
    9c38:	68db      	ldr	r3, [r3, #12]
    9c3a:	461a      	mov	r2, r3
    9c3c:	7dfb      	ldrb	r3, [r7, #23]
    9c3e:	2101      	movs	r1, #1
    9c40:	4618      	mov	r0, r3
    9c42:	4b41      	ldr	r3, [pc, #260]	; (9d48 <_usb_d_dev_in_next+0x1fc>)
    9c44:	4798      	blx	r3
    9c46:	e011      	b.n	9c6c <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9c48:	8bfb      	ldrh	r3, [r7, #30]
    9c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9c4e:	d902      	bls.n	9c56 <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9c54:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9c56:	687b      	ldr	r3, [r7, #4]
    9c58:	681a      	ldr	r2, [r3, #0]
    9c5a:	687b      	ldr	r3, [r7, #4]
    9c5c:	689b      	ldr	r3, [r3, #8]
    9c5e:	4413      	add	r3, r2
    9c60:	461a      	mov	r2, r3
    9c62:	7dfb      	ldrb	r3, [r7, #23]
    9c64:	2101      	movs	r1, #1
    9c66:	4618      	mov	r0, r3
    9c68:	4b37      	ldr	r3, [pc, #220]	; (9d48 <_usb_d_dev_in_next+0x1fc>)
    9c6a:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9c6c:	8bfa      	ldrh	r2, [r7, #30]
    9c6e:	7df8      	ldrb	r0, [r7, #23]
    9c70:	2300      	movs	r3, #0
    9c72:	2101      	movs	r1, #1
    9c74:	4c35      	ldr	r4, [pc, #212]	; (9d4c <_usb_d_dev_in_next+0x200>)
    9c76:	47a0      	blx	r4
		goto _in_tx_exec;
    9c78:	e041      	b.n	9cfe <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    9c7a:	687b      	ldr	r3, [r7, #4]
    9c7c:	7cdb      	ldrb	r3, [r3, #19]
    9c7e:	f003 0310 	and.w	r3, r3, #16
    9c82:	b2db      	uxtb	r3, r3
    9c84:	2b00      	cmp	r3, #0
    9c86:	d00b      	beq.n	9ca0 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    9c88:	687a      	ldr	r2, [r7, #4]
    9c8a:	7cd3      	ldrb	r3, [r2, #19]
    9c8c:	f36f 1304 	bfc	r3, #4, #1
    9c90:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    9c92:	7df8      	ldrb	r0, [r7, #23]
    9c94:	2300      	movs	r3, #0
    9c96:	2200      	movs	r2, #0
    9c98:	2101      	movs	r1, #1
    9c9a:	4c2c      	ldr	r4, [pc, #176]	; (9d4c <_usb_d_dev_in_next+0x200>)
    9c9c:	47a0      	blx	r4
		goto _in_tx_exec;
    9c9e:	e02e      	b.n	9cfe <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    9ca0:	7afb      	ldrb	r3, [r7, #11]
    9ca2:	2b00      	cmp	r3, #0
    9ca4:	d006      	beq.n	9cb4 <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    9ca6:	7dfb      	ldrb	r3, [r7, #23]
    9ca8:	224b      	movs	r2, #75	; 0x4b
    9caa:	4619      	mov	r1, r3
    9cac:	69b8      	ldr	r0, [r7, #24]
    9cae:	4b28      	ldr	r3, [pc, #160]	; (9d50 <_usb_d_dev_in_next+0x204>)
    9cb0:	4798      	blx	r3
    9cb2:	e005      	b.n	9cc0 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    9cb4:	7dfb      	ldrb	r3, [r7, #23]
    9cb6:	224a      	movs	r2, #74	; 0x4a
    9cb8:	4619      	mov	r1, r3
    9cba:	69b8      	ldr	r0, [r7, #24]
    9cbc:	4b24      	ldr	r3, [pc, #144]	; (9d50 <_usb_d_dev_in_next+0x204>)
    9cbe:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    9cc0:	687b      	ldr	r3, [r7, #4]
    9cc2:	8a1b      	ldrh	r3, [r3, #16]
    9cc4:	89ba      	ldrh	r2, [r7, #12]
    9cc6:	429a      	cmp	r2, r3
    9cc8:	d114      	bne.n	9cf4 <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    9cca:	687a      	ldr	r2, [r7, #4]
    9ccc:	7cd3      	ldrb	r3, [r2, #19]
    9cce:	f36f 1386 	bfc	r3, #6, #1
    9cd2:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9cd4:	4b1f      	ldr	r3, [pc, #124]	; (9d54 <_usb_d_dev_in_next+0x208>)
    9cd6:	68db      	ldr	r3, [r3, #12]
    9cd8:	687a      	ldr	r2, [r7, #4]
    9cda:	7c90      	ldrb	r0, [r2, #18]
    9cdc:	687a      	ldr	r2, [r7, #4]
    9cde:	6892      	ldr	r2, [r2, #8]
    9ce0:	4611      	mov	r1, r2
    9ce2:	4798      	blx	r3
    9ce4:	4603      	mov	r3, r0
    9ce6:	2b00      	cmp	r3, #0
    9ce8:	d124      	bne.n	9d34 <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    9cea:	687a      	ldr	r2, [r7, #4]
    9cec:	7cd3      	ldrb	r3, [r2, #19]
    9cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9cf2:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9cf4:	2100      	movs	r1, #0
    9cf6:	6878      	ldr	r0, [r7, #4]
    9cf8:	4b17      	ldr	r3, [pc, #92]	; (9d58 <_usb_d_dev_in_next+0x20c>)
    9cfa:	4798      	blx	r3
	return;
    9cfc:	e01b      	b.n	9d36 <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    9cfe:	78fb      	ldrb	r3, [r7, #3]
    9d00:	f083 0301 	eor.w	r3, r3, #1
    9d04:	b2db      	uxtb	r3, r3
    9d06:	2b00      	cmp	r3, #0
    9d08:	d00d      	beq.n	9d26 <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    9d0a:	7afb      	ldrb	r3, [r7, #11]
    9d0c:	2b00      	cmp	r3, #0
    9d0e:	d002      	beq.n	9d16 <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9d10:	234e      	movs	r3, #78	; 0x4e
    9d12:	777b      	strb	r3, [r7, #29]
    9d14:	e001      	b.n	9d1a <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    9d16:	234a      	movs	r3, #74	; 0x4a
    9d18:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9d1a:	7f7a      	ldrb	r2, [r7, #29]
    9d1c:	7dfb      	ldrb	r3, [r7, #23]
    9d1e:	4619      	mov	r1, r3
    9d20:	69b8      	ldr	r0, [r7, #24]
    9d22:	4b0e      	ldr	r3, [pc, #56]	; (9d5c <_usb_d_dev_in_next+0x210>)
    9d24:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    9d26:	7dfb      	ldrb	r3, [r7, #23]
    9d28:	2201      	movs	r2, #1
    9d2a:	2101      	movs	r1, #1
    9d2c:	4618      	mov	r0, r3
    9d2e:	4b0c      	ldr	r3, [pc, #48]	; (9d60 <_usb_d_dev_in_next+0x214>)
    9d30:	4798      	blx	r3
    9d32:	e000      	b.n	9d36 <_usb_d_dev_in_next+0x1ea>
			return;
    9d34:	bf00      	nop
}
    9d36:	3724      	adds	r7, #36	; 0x24
    9d38:	46bd      	mov	sp, r7
    9d3a:	bd90      	pop	{r4, r7, pc}
    9d3c:	20000c5c 	.word	0x20000c5c
    9d40:	00009545 	.word	0x00009545
    9d44:	00012fc1 	.word	0x00012fc1
    9d48:	00009571 	.word	0x00009571
    9d4c:	000096b9 	.word	0x000096b9
    9d50:	00008e51 	.word	0x00008e51
    9d54:	20000b94 	.word	0x20000b94
    9d58:	0000ae75 	.word	0x0000ae75
    9d5c:	00008e25 	.word	0x00008e25
    9d60:	00009771 	.word	0x00009771

00009d64 <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9d64:	b590      	push	{r4, r7, lr}
    9d66:	b08b      	sub	sp, #44	; 0x2c
    9d68:	af00      	add	r7, sp, #0
    9d6a:	6078      	str	r0, [r7, #4]
    9d6c:	460b      	mov	r3, r1
    9d6e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    9d70:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9d74:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    9d76:	687b      	ldr	r3, [r7, #4]
    9d78:	7c9b      	ldrb	r3, [r3, #18]
    9d7a:	f003 030f 	and.w	r3, r3, #15
    9d7e:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9d80:	7ffb      	ldrb	r3, [r7, #31]
    9d82:	015b      	lsls	r3, r3, #5
    9d84:	4a94      	ldr	r2, [pc, #592]	; (9fd8 <_usb_d_dev_out_next+0x274>)
    9d86:	4413      	add	r3, r2
    9d88:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    9d8a:	78fb      	ldrb	r3, [r7, #3]
    9d8c:	2b00      	cmp	r3, #0
    9d8e:	d005      	beq.n	9d9c <_usb_d_dev_out_next+0x38>
    9d90:	69bb      	ldr	r3, [r7, #24]
    9d92:	685b      	ldr	r3, [r3, #4]
    9d94:	f3c3 338d 	ubfx	r3, r3, #14, #14
    9d98:	b29b      	uxth	r3, r3
    9d9a:	e000      	b.n	9d9e <_usb_d_dev_out_next+0x3a>
    9d9c:	2300      	movs	r3, #0
    9d9e:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    9da0:	78fb      	ldrb	r3, [r7, #3]
    9da2:	2b00      	cmp	r3, #0
    9da4:	d005      	beq.n	9db2 <_usb_d_dev_out_next+0x4e>
    9da6:	69bb      	ldr	r3, [r7, #24]
    9da8:	685b      	ldr	r3, [r3, #4]
    9daa:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9dae:	b29b      	uxth	r3, r3
    9db0:	e000      	b.n	9db4 <_usb_d_dev_out_next+0x50>
    9db2:	2300      	movs	r3, #0
    9db4:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    9db6:	687b      	ldr	r3, [r7, #4]
    9db8:	8a1b      	ldrh	r3, [r3, #16]
    9dba:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9dbe:	4293      	cmp	r3, r2
    9dc0:	d004      	beq.n	9dcc <_usb_d_dev_out_next+0x68>
    9dc2:	687b      	ldr	r3, [r7, #4]
    9dc4:	8a1b      	ldrh	r3, [r3, #16]
    9dc6:	3b01      	subs	r3, #1
    9dc8:	b29b      	uxth	r3, r3
    9dca:	e001      	b.n	9dd0 <_usb_d_dev_out_next+0x6c>
    9dcc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    9dd0:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    9dd2:	8aba      	ldrh	r2, [r7, #20]
    9dd4:	8a7b      	ldrh	r3, [r7, #18]
    9dd6:	4013      	ands	r3, r2
    9dd8:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    9dda:	687b      	ldr	r3, [r7, #4]
    9ddc:	7cdb      	ldrb	r3, [r3, #19]
    9dde:	f003 0307 	and.w	r3, r3, #7
    9de2:	b2db      	uxtb	r3, r3
    9de4:	2b01      	cmp	r3, #1
    9de6:	bf0c      	ite	eq
    9de8:	2301      	moveq	r3, #1
    9dea:	2300      	movne	r3, #0
    9dec:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    9dee:	78fb      	ldrb	r3, [r7, #3]
    9df0:	2b00      	cmp	r3, #0
    9df2:	d004      	beq.n	9dfe <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    9df4:	7ffb      	ldrb	r3, [r7, #31]
    9df6:	2100      	movs	r1, #0
    9df8:	4618      	mov	r0, r3
    9dfa:	4b78      	ldr	r3, [pc, #480]	; (9fdc <_usb_d_dev_out_next+0x278>)
    9dfc:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    9dfe:	687b      	ldr	r3, [r7, #4]
    9e00:	7cdb      	ldrb	r3, [r3, #19]
    9e02:	f003 0320 	and.w	r3, r3, #32
    9e06:	b2db      	uxtb	r3, r3
    9e08:	2b00      	cmp	r3, #0
    9e0a:	d01c      	beq.n	9e46 <_usb_d_dev_out_next+0xe2>
    9e0c:	687b      	ldr	r3, [r7, #4]
    9e0e:	685b      	ldr	r3, [r3, #4]
    9e10:	2b00      	cmp	r3, #0
    9e12:	d018      	beq.n	9e46 <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    9e14:	687b      	ldr	r3, [r7, #4]
    9e16:	685b      	ldr	r3, [r3, #4]
    9e18:	b29a      	uxth	r2, r3
    9e1a:	687b      	ldr	r3, [r7, #4]
    9e1c:	689b      	ldr	r3, [r3, #8]
    9e1e:	b29b      	uxth	r3, r3
    9e20:	1ad3      	subs	r3, r2, r3
    9e22:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    9e24:	687b      	ldr	r3, [r7, #4]
    9e26:	681a      	ldr	r2, [r3, #0]
    9e28:	687b      	ldr	r3, [r7, #4]
    9e2a:	689b      	ldr	r3, [r3, #8]
    9e2c:	18d0      	adds	r0, r2, r3
    9e2e:	687b      	ldr	r3, [r7, #4]
    9e30:	68d9      	ldr	r1, [r3, #12]
    9e32:	89ba      	ldrh	r2, [r7, #12]
    9e34:	8a3b      	ldrh	r3, [r7, #16]
    9e36:	429a      	cmp	r2, r3
    9e38:	d901      	bls.n	9e3e <_usb_d_dev_out_next+0xda>
    9e3a:	8a3b      	ldrh	r3, [r7, #16]
    9e3c:	e000      	b.n	9e40 <_usb_d_dev_out_next+0xdc>
    9e3e:	89bb      	ldrh	r3, [r7, #12]
    9e40:	461a      	mov	r2, r3
    9e42:	4b67      	ldr	r3, [pc, #412]	; (9fe0 <_usb_d_dev_out_next+0x27c>)
    9e44:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    9e46:	687b      	ldr	r3, [r7, #4]
    9e48:	685b      	ldr	r3, [r3, #4]
    9e4a:	2b00      	cmp	r3, #0
    9e4c:	d121      	bne.n	9e92 <_usb_d_dev_out_next+0x12e>
    9e4e:	687b      	ldr	r3, [r7, #4]
    9e50:	7cdb      	ldrb	r3, [r3, #19]
    9e52:	f003 0310 	and.w	r3, r3, #16
    9e56:	b2db      	uxtb	r3, r3
    9e58:	2b00      	cmp	r3, #0
    9e5a:	d01a      	beq.n	9e92 <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    9e5c:	687a      	ldr	r2, [r7, #4]
    9e5e:	7cd3      	ldrb	r3, [r2, #19]
    9e60:	f36f 1304 	bfc	r3, #4, #1
    9e64:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    9e66:	687a      	ldr	r2, [r7, #4]
    9e68:	7cd3      	ldrb	r3, [r2, #19]
    9e6a:	f043 0320 	orr.w	r3, r3, #32
    9e6e:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9e70:	687b      	ldr	r3, [r7, #4]
    9e72:	68db      	ldr	r3, [r3, #12]
    9e74:	461a      	mov	r2, r3
    9e76:	7ffb      	ldrb	r3, [r7, #31]
    9e78:	2100      	movs	r1, #0
    9e7a:	4618      	mov	r0, r3
    9e7c:	4b59      	ldr	r3, [pc, #356]	; (9fe4 <_usb_d_dev_out_next+0x280>)
    9e7e:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    9e80:	687b      	ldr	r3, [r7, #4]
    9e82:	8a1b      	ldrh	r3, [r3, #16]
    9e84:	461a      	mov	r2, r3
    9e86:	7ff8      	ldrb	r0, [r7, #31]
    9e88:	2300      	movs	r3, #0
    9e8a:	2100      	movs	r1, #0
    9e8c:	4c56      	ldr	r4, [pc, #344]	; (9fe8 <_usb_d_dev_out_next+0x284>)
    9e8e:	47a0      	blx	r4
		goto _out_rx_exec;
    9e90:	e090      	b.n	9fb4 <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    9e92:	78fb      	ldrb	r3, [r7, #3]
    9e94:	2b00      	cmp	r3, #0
    9e96:	d010      	beq.n	9eba <_usb_d_dev_out_next+0x156>
    9e98:	687b      	ldr	r3, [r7, #4]
    9e9a:	8a1b      	ldrh	r3, [r3, #16]
    9e9c:	8a3a      	ldrh	r2, [r7, #16]
    9e9e:	429a      	cmp	r2, r3
    9ea0:	d20b      	bcs.n	9eba <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    9ea2:	687a      	ldr	r2, [r7, #4]
    9ea4:	7cd3      	ldrb	r3, [r2, #19]
    9ea6:	f36f 1304 	bfc	r3, #4, #1
    9eaa:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    9eac:	687b      	ldr	r3, [r7, #4]
    9eae:	689a      	ldr	r2, [r3, #8]
    9eb0:	8abb      	ldrh	r3, [r7, #20]
    9eb2:	441a      	add	r2, r3
    9eb4:	687b      	ldr	r3, [r7, #4]
    9eb6:	609a      	str	r2, [r3, #8]
    9eb8:	e05c      	b.n	9f74 <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    9eba:	687b      	ldr	r3, [r7, #4]
    9ebc:	689a      	ldr	r2, [r3, #8]
    9ebe:	8afb      	ldrh	r3, [r7, #22]
    9ec0:	441a      	add	r2, r3
    9ec2:	687b      	ldr	r3, [r7, #4]
    9ec4:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    9ec6:	687b      	ldr	r3, [r7, #4]
    9ec8:	689a      	ldr	r2, [r3, #8]
    9eca:	687b      	ldr	r3, [r7, #4]
    9ecc:	685b      	ldr	r3, [r3, #4]
    9ece:	429a      	cmp	r2, r3
    9ed0:	d250      	bcs.n	9f74 <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    9ed2:	687b      	ldr	r3, [r7, #4]
    9ed4:	685b      	ldr	r3, [r3, #4]
    9ed6:	b29a      	uxth	r2, r3
    9ed8:	687b      	ldr	r3, [r7, #4]
    9eda:	689b      	ldr	r3, [r3, #8]
    9edc:	b29b      	uxth	r3, r3
    9ede:	1ad3      	subs	r3, r2, r3
    9ee0:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    9ee2:	687b      	ldr	r3, [r7, #4]
    9ee4:	7cdb      	ldrb	r3, [r3, #19]
    9ee6:	f003 0320 	and.w	r3, r3, #32
    9eea:	b2db      	uxtb	r3, r3
    9eec:	2b00      	cmp	r3, #0
    9eee:	d010      	beq.n	9f12 <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    9ef0:	687b      	ldr	r3, [r7, #4]
    9ef2:	8a1b      	ldrh	r3, [r3, #16]
    9ef4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9ef6:	429a      	cmp	r2, r3
    9ef8:	d902      	bls.n	9f00 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    9efa:	687b      	ldr	r3, [r7, #4]
    9efc:	8a1b      	ldrh	r3, [r3, #16]
    9efe:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9f00:	687b      	ldr	r3, [r7, #4]
    9f02:	68db      	ldr	r3, [r3, #12]
    9f04:	461a      	mov	r2, r3
    9f06:	7ffb      	ldrb	r3, [r7, #31]
    9f08:	2100      	movs	r1, #0
    9f0a:	4618      	mov	r0, r3
    9f0c:	4b35      	ldr	r3, [pc, #212]	; (9fe4 <_usb_d_dev_out_next+0x280>)
    9f0e:	4798      	blx	r3
    9f10:	e029      	b.n	9f66 <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    9f12:	687b      	ldr	r3, [r7, #4]
    9f14:	8a1b      	ldrh	r3, [r3, #16]
    9f16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9f18:	429a      	cmp	r2, r3
    9f1a:	d90f      	bls.n	9f3c <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    9f1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    9f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9f22:	d903      	bls.n	9f2c <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    9f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9f28:	84fb      	strh	r3, [r7, #38]	; 0x26
    9f2a:	e011      	b.n	9f50 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    9f2c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9f2e:	8a7b      	ldrh	r3, [r7, #18]
    9f30:	4013      	ands	r3, r2
    9f32:	b29b      	uxth	r3, r3
    9f34:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9f36:	1ad3      	subs	r3, r2, r3
    9f38:	84fb      	strh	r3, [r7, #38]	; 0x26
    9f3a:	e009      	b.n	9f50 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    9f3c:	687b      	ldr	r3, [r7, #4]
    9f3e:	8a1b      	ldrh	r3, [r3, #16]
    9f40:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9f42:	429a      	cmp	r2, r3
    9f44:	d204      	bcs.n	9f50 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    9f46:	687a      	ldr	r2, [r7, #4]
    9f48:	7cd3      	ldrb	r3, [r2, #19]
    9f4a:	f043 0320 	orr.w	r3, r3, #32
    9f4e:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9f50:	687b      	ldr	r3, [r7, #4]
    9f52:	681a      	ldr	r2, [r3, #0]
    9f54:	687b      	ldr	r3, [r7, #4]
    9f56:	689b      	ldr	r3, [r3, #8]
    9f58:	4413      	add	r3, r2
    9f5a:	461a      	mov	r2, r3
    9f5c:	7ffb      	ldrb	r3, [r7, #31]
    9f5e:	2100      	movs	r1, #0
    9f60:	4618      	mov	r0, r3
    9f62:	4b20      	ldr	r3, [pc, #128]	; (9fe4 <_usb_d_dev_out_next+0x280>)
    9f64:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    9f66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9f68:	7ff8      	ldrb	r0, [r7, #31]
    9f6a:	2300      	movs	r3, #0
    9f6c:	2100      	movs	r1, #0
    9f6e:	4c1e      	ldr	r4, [pc, #120]	; (9fe8 <_usb_d_dev_out_next+0x284>)
    9f70:	47a0      	blx	r4
			goto _out_rx_exec;
    9f72:	e01f      	b.n	9fb4 <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    9f74:	7bfb      	ldrb	r3, [r7, #15]
    9f76:	2b00      	cmp	r3, #0
    9f78:	d006      	beq.n	9f88 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    9f7a:	7ffb      	ldrb	r3, [r7, #31]
    9f7c:	222d      	movs	r2, #45	; 0x2d
    9f7e:	4619      	mov	r1, r3
    9f80:	6a38      	ldr	r0, [r7, #32]
    9f82:	4b1a      	ldr	r3, [pc, #104]	; (9fec <_usb_d_dev_out_next+0x288>)
    9f84:	4798      	blx	r3
    9f86:	e005      	b.n	9f94 <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    9f88:	7ffb      	ldrb	r3, [r7, #31]
    9f8a:	2225      	movs	r2, #37	; 0x25
    9f8c:	4619      	mov	r1, r3
    9f8e:	6a38      	ldr	r0, [r7, #32]
    9f90:	4b16      	ldr	r3, [pc, #88]	; (9fec <_usb_d_dev_out_next+0x288>)
    9f92:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    9f94:	7ffb      	ldrb	r3, [r7, #31]
    9f96:	2b00      	cmp	r3, #0
    9f98:	d107      	bne.n	9faa <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    9f9a:	687b      	ldr	r3, [r7, #4]
    9f9c:	68db      	ldr	r3, [r3, #12]
    9f9e:	461a      	mov	r2, r3
    9fa0:	7ffb      	ldrb	r3, [r7, #31]
    9fa2:	2100      	movs	r1, #0
    9fa4:	4618      	mov	r0, r3
    9fa6:	4b0f      	ldr	r3, [pc, #60]	; (9fe4 <_usb_d_dev_out_next+0x280>)
    9fa8:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9faa:	2100      	movs	r1, #0
    9fac:	6878      	ldr	r0, [r7, #4]
    9fae:	4b10      	ldr	r3, [pc, #64]	; (9ff0 <_usb_d_dev_out_next+0x28c>)
    9fb0:	4798      	blx	r3
	return;
    9fb2:	e031      	b.n	a018 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    9fb4:	78fb      	ldrb	r3, [r7, #3]
    9fb6:	f083 0301 	eor.w	r3, r3, #1
    9fba:	b2db      	uxtb	r3, r3
    9fbc:	2b00      	cmp	r3, #0
    9fbe:	d025      	beq.n	a00c <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    9fc0:	7bfb      	ldrb	r3, [r7, #15]
    9fc2:	2b00      	cmp	r3, #0
    9fc4:	d018      	beq.n	9ff8 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    9fc6:	7ffb      	ldrb	r3, [r7, #31]
    9fc8:	2101      	movs	r1, #1
    9fca:	4618      	mov	r0, r3
    9fcc:	4b09      	ldr	r3, [pc, #36]	; (9ff4 <_usb_d_dev_out_next+0x290>)
    9fce:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    9fd0:	232d      	movs	r3, #45	; 0x2d
    9fd2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    9fd6:	e012      	b.n	9ffe <_usb_d_dev_out_next+0x29a>
    9fd8:	20000c5c 	.word	0x20000c5c
    9fdc:	00009545 	.word	0x00009545
    9fe0:	00012fc1 	.word	0x00012fc1
    9fe4:	00009571 	.word	0x00009571
    9fe8:	000096f9 	.word	0x000096f9
    9fec:	00008e51 	.word	0x00008e51
    9ff0:	0000ae75 	.word	0x0000ae75
    9ff4:	00009739 	.word	0x00009739
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    9ff8:	2325      	movs	r3, #37	; 0x25
    9ffa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9ffe:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    a002:	7ffb      	ldrb	r3, [r7, #31]
    a004:	4619      	mov	r1, r3
    a006:	6a38      	ldr	r0, [r7, #32]
    a008:	4b05      	ldr	r3, [pc, #20]	; (a020 <_usb_d_dev_out_next+0x2bc>)
    a00a:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    a00c:	7ffb      	ldrb	r3, [r7, #31]
    a00e:	2201      	movs	r2, #1
    a010:	2100      	movs	r1, #0
    a012:	4618      	mov	r0, r3
    a014:	4b03      	ldr	r3, [pc, #12]	; (a024 <_usb_d_dev_out_next+0x2c0>)
    a016:	4798      	blx	r3
}
    a018:	372c      	adds	r7, #44	; 0x2c
    a01a:	46bd      	mov	sp, r7
    a01c:	bd90      	pop	{r4, r7, pc}
    a01e:	bf00      	nop
    a020:	00008e25 	.word	0x00008e25
    a024:	000097c9 	.word	0x000097c9

0000a028 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    a028:	b580      	push	{r7, lr}
    a02a:	b084      	sub	sp, #16
    a02c:	af00      	add	r7, sp, #0
    a02e:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    a030:	687b      	ldr	r3, [r7, #4]
    a032:	7c9b      	ldrb	r3, [r3, #18]
    a034:	f003 030f 	and.w	r3, r3, #15
    a038:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a03a:	687b      	ldr	r3, [r7, #4]
    a03c:	7cdb      	ldrb	r3, [r3, #19]
    a03e:	f003 0307 	and.w	r3, r3, #7
    a042:	b2db      	uxtb	r3, r3
    a044:	2b01      	cmp	r3, #1
    a046:	bf0c      	ite	eq
    a048:	2301      	moveq	r3, #1
    a04a:	2300      	movne	r3, #0
    a04c:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    a04e:	7bbb      	ldrb	r3, [r7, #14]
    a050:	f083 0301 	eor.w	r3, r3, #1
    a054:	b2db      	uxtb	r3, r3
    a056:	2b00      	cmp	r3, #0
    a058:	d008      	beq.n	a06c <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    a05a:	7bfb      	ldrb	r3, [r7, #15]
    a05c:	4618      	mov	r0, r3
    a05e:	4b20      	ldr	r3, [pc, #128]	; (a0e0 <_usb_d_dev_handle_setup+0xb8>)
    a060:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    a062:	7bfb      	ldrb	r3, [r7, #15]
    a064:	4618      	mov	r0, r3
    a066:	4b1f      	ldr	r3, [pc, #124]	; (a0e4 <_usb_d_dev_handle_setup+0xbc>)
    a068:	4798      	blx	r3
		return;
    a06a:	e036      	b.n	a0da <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    a06c:	687b      	ldr	r3, [r7, #4]
    a06e:	7cdb      	ldrb	r3, [r3, #19]
    a070:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a074:	b2db      	uxtb	r3, r3
    a076:	2b00      	cmp	r3, #0
    a078:	d010      	beq.n	a09c <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    a07a:	687a      	ldr	r2, [r7, #4]
    a07c:	7cd3      	ldrb	r3, [r2, #19]
    a07e:	f36f 1386 	bfc	r3, #6, #1
    a082:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a084:	7bfb      	ldrb	r3, [r7, #15]
    a086:	2200      	movs	r2, #0
    a088:	2101      	movs	r1, #1
    a08a:	4618      	mov	r0, r3
    a08c:	4b16      	ldr	r3, [pc, #88]	; (a0e8 <_usb_d_dev_handle_setup+0xc0>)
    a08e:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    a090:	7bfb      	ldrb	r3, [r7, #15]
    a092:	2200      	movs	r2, #0
    a094:	2100      	movs	r1, #0
    a096:	4618      	mov	r0, r3
    a098:	4b14      	ldr	r3, [pc, #80]	; (a0ec <_usb_d_dev_handle_setup+0xc4>)
    a09a:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    a09c:	687a      	ldr	r2, [r7, #4]
    a09e:	7cd3      	ldrb	r3, [r2, #19]
    a0a0:	f36f 03c3 	bfc	r3, #3, #1
    a0a4:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    a0a6:	7bfb      	ldrb	r3, [r7, #15]
    a0a8:	2100      	movs	r1, #0
    a0aa:	4618      	mov	r0, r3
    a0ac:	4b10      	ldr	r3, [pc, #64]	; (a0f0 <_usb_d_dev_handle_setup+0xc8>)
    a0ae:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    a0b0:	7bfb      	ldrb	r3, [r7, #15]
    a0b2:	2101      	movs	r1, #1
    a0b4:	4618      	mov	r0, r3
    a0b6:	4b0e      	ldr	r3, [pc, #56]	; (a0f0 <_usb_d_dev_handle_setup+0xc8>)
    a0b8:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a0ba:	7bfb      	ldrb	r3, [r7, #15]
    a0bc:	216f      	movs	r1, #111	; 0x6f
    a0be:	4618      	mov	r0, r3
    a0c0:	4b0c      	ldr	r3, [pc, #48]	; (a0f4 <_usb_d_dev_handle_setup+0xcc>)
    a0c2:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a0c4:	7bfb      	ldrb	r3, [r7, #15]
    a0c6:	216f      	movs	r1, #111	; 0x6f
    a0c8:	4618      	mov	r0, r3
    a0ca:	4b0b      	ldr	r3, [pc, #44]	; (a0f8 <_usb_d_dev_handle_setup+0xd0>)
    a0cc:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    a0ce:	4b0b      	ldr	r3, [pc, #44]	; (a0fc <_usb_d_dev_handle_setup+0xd4>)
    a0d0:	689b      	ldr	r3, [r3, #8]
    a0d2:	687a      	ldr	r2, [r7, #4]
    a0d4:	7c92      	ldrb	r2, [r2, #18]
    a0d6:	4610      	mov	r0, r2
    a0d8:	4798      	blx	r3
}
    a0da:	3710      	adds	r7, #16
    a0dc:	46bd      	mov	sp, r7
    a0de:	bd80      	pop	{r7, pc}
    a0e0:	000094cd 	.word	0x000094cd
    a0e4:	00009479 	.word	0x00009479
    a0e8:	00009771 	.word	0x00009771
    a0ec:	000097c9 	.word	0x000097c9
    a0f0:	00009739 	.word	0x00009739
    a0f4:	00009279 	.word	0x00009279
    a0f8:	000092c9 	.word	0x000092c9
    a0fc:	20000b94 	.word	0x20000b94

0000a100 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a100:	b580      	push	{r7, lr}
    a102:	b084      	sub	sp, #16
    a104:	af00      	add	r7, sp, #0
    a106:	6078      	str	r0, [r7, #4]
    a108:	460b      	mov	r3, r1
    a10a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a10c:	687b      	ldr	r3, [r7, #4]
    a10e:	7c9b      	ldrb	r3, [r3, #18]
    a110:	f003 030f 	and.w	r3, r3, #15
    a114:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    a116:	78f9      	ldrb	r1, [r7, #3]
    a118:	7bfb      	ldrb	r3, [r7, #15]
    a11a:	2200      	movs	r2, #0
    a11c:	4618      	mov	r0, r3
    a11e:	4b07      	ldr	r3, [pc, #28]	; (a13c <_usb_d_dev_handle_stall+0x3c>)
    a120:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    a122:	4b07      	ldr	r3, [pc, #28]	; (a140 <_usb_d_dev_handle_stall+0x40>)
    a124:	691b      	ldr	r3, [r3, #16]
    a126:	687a      	ldr	r2, [r7, #4]
    a128:	7c90      	ldrb	r0, [r2, #18]
    a12a:	687a      	ldr	r2, [r7, #4]
    a12c:	6892      	ldr	r2, [r2, #8]
    a12e:	2101      	movs	r1, #1
    a130:	4798      	blx	r3
}
    a132:	bf00      	nop
    a134:	3710      	adds	r7, #16
    a136:	46bd      	mov	sp, r7
    a138:	bd80      	pop	{r7, pc}
    a13a:	bf00      	nop
    a13c:	0000942d 	.word	0x0000942d
    a140:	20000b94 	.word	0x20000b94

0000a144 <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a144:	b580      	push	{r7, lr}
    a146:	b088      	sub	sp, #32
    a148:	af00      	add	r7, sp, #0
    a14a:	6078      	str	r0, [r7, #4]
    a14c:	460b      	mov	r3, r1
    a14e:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    a150:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a154:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    a156:	687b      	ldr	r3, [r7, #4]
    a158:	7c9b      	ldrb	r3, [r3, #18]
    a15a:	f003 030f 	and.w	r3, r3, #15
    a15e:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    a160:	4b61      	ldr	r3, [pc, #388]	; (a2e8 <_usb_d_dev_handle_trfail+0x1a4>)
    a162:	881b      	ldrh	r3, [r3, #0]
    a164:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    a166:	7efb      	ldrb	r3, [r7, #27]
    a168:	015b      	lsls	r3, r3, #5
    a16a:	4a60      	ldr	r2, [pc, #384]	; (a2ec <_usb_d_dev_handle_trfail+0x1a8>)
    a16c:	4413      	add	r3, r2
    a16e:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    a170:	78fb      	ldrb	r3, [r7, #3]
    a172:	2b00      	cmp	r3, #0
    a174:	d006      	beq.n	a184 <_usb_d_dev_handle_trfail+0x40>
    a176:	7efb      	ldrb	r3, [r7, #27]
    a178:	4619      	mov	r1, r3
    a17a:	69f8      	ldr	r0, [r7, #28]
    a17c:	4b5c      	ldr	r3, [pc, #368]	; (a2f0 <_usb_d_dev_handle_trfail+0x1ac>)
    a17e:	4798      	blx	r3
    a180:	4603      	mov	r3, r0
    a182:	e005      	b.n	a190 <_usb_d_dev_handle_trfail+0x4c>
    a184:	7efb      	ldrb	r3, [r7, #27]
    a186:	4619      	mov	r1, r3
    a188:	69f8      	ldr	r0, [r7, #28]
    a18a:	4b5a      	ldr	r3, [pc, #360]	; (a2f4 <_usb_d_dev_handle_trfail+0x1b0>)
    a18c:	4798      	blx	r3
    a18e:	4603      	mov	r3, r0
    a190:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a192:	687b      	ldr	r3, [r7, #4]
    a194:	7cdb      	ldrb	r3, [r3, #19]
    a196:	f003 0307 	and.w	r3, r3, #7
    a19a:	b2db      	uxtb	r3, r3
    a19c:	2b01      	cmp	r3, #1
    a19e:	bf0c      	ite	eq
    a1a0:	2301      	moveq	r3, #1
    a1a2:	2300      	movne	r3, #0
    a1a4:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    a1a6:	78fb      	ldrb	r3, [r7, #3]
    a1a8:	011b      	lsls	r3, r3, #4
    a1aa:	697a      	ldr	r2, [r7, #20]
    a1ac:	4413      	add	r3, r2
    a1ae:	7a9b      	ldrb	r3, [r3, #10]
    a1b0:	b2db      	uxtb	r3, r3
    a1b2:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    a1b4:	7cfb      	ldrb	r3, [r7, #19]
    a1b6:	2b02      	cmp	r3, #2
    a1b8:	d12f      	bne.n	a21a <_usb_d_dev_handle_trfail+0xd6>
    a1ba:	7b3b      	ldrb	r3, [r7, #12]
    a1bc:	f003 0301 	and.w	r3, r3, #1
    a1c0:	b2db      	uxtb	r3, r3
    a1c2:	2b00      	cmp	r3, #0
    a1c4:	d029      	beq.n	a21a <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    a1c6:	78fb      	ldrb	r3, [r7, #3]
    a1c8:	011b      	lsls	r3, r3, #4
    a1ca:	697a      	ldr	r2, [r7, #20]
    a1cc:	441a      	add	r2, r3
    a1ce:	7a93      	ldrb	r3, [r2, #10]
    a1d0:	f36f 0300 	bfc	r3, #0, #1
    a1d4:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a1d6:	78fb      	ldrb	r3, [r7, #3]
    a1d8:	f107 0220 	add.w	r2, r7, #32
    a1dc:	4413      	add	r3, r2
    a1de:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a1e2:	7efb      	ldrb	r3, [r7, #27]
    a1e4:	4619      	mov	r1, r3
    a1e6:	69f8      	ldr	r0, [r7, #28]
    a1e8:	4b43      	ldr	r3, [pc, #268]	; (a2f8 <_usb_d_dev_handle_trfail+0x1b4>)
    a1ea:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a1ec:	78fb      	ldrb	r3, [r7, #3]
    a1ee:	f107 0220 	add.w	r2, r7, #32
    a1f2:	4413      	add	r3, r2
    a1f4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a1f8:	7efb      	ldrb	r3, [r7, #27]
    a1fa:	4619      	mov	r1, r3
    a1fc:	69f8      	ldr	r0, [r7, #28]
    a1fe:	4b3f      	ldr	r3, [pc, #252]	; (a2fc <_usb_d_dev_handle_trfail+0x1b8>)
    a200:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    a202:	78fb      	ldrb	r3, [r7, #3]
    a204:	2b00      	cmp	r3, #0
    a206:	bf14      	ite	ne
    a208:	2301      	movne	r3, #1
    a20a:	2300      	moveq	r3, #0
    a20c:	b2db      	uxtb	r3, r3
    a20e:	2204      	movs	r2, #4
    a210:	4619      	mov	r1, r3
    a212:	6878      	ldr	r0, [r7, #4]
    a214:	4b3a      	ldr	r3, [pc, #232]	; (a300 <_usb_d_dev_handle_trfail+0x1bc>)
    a216:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    a218:	e062      	b.n	a2e0 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    a21a:	7b3b      	ldrb	r3, [r7, #12]
    a21c:	f003 0302 	and.w	r3, r3, #2
    a220:	b2db      	uxtb	r3, r3
    a222:	2b00      	cmp	r3, #0
    a224:	d040      	beq.n	a2a8 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    a226:	78fb      	ldrb	r3, [r7, #3]
    a228:	011b      	lsls	r3, r3, #4
    a22a:	697a      	ldr	r2, [r7, #20]
    a22c:	441a      	add	r2, r3
    a22e:	7a93      	ldrb	r3, [r2, #10]
    a230:	f36f 0341 	bfc	r3, #1, #1
    a234:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a236:	78fb      	ldrb	r3, [r7, #3]
    a238:	f107 0220 	add.w	r2, r7, #32
    a23c:	4413      	add	r3, r2
    a23e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a242:	7efb      	ldrb	r3, [r7, #27]
    a244:	4619      	mov	r1, r3
    a246:	69f8      	ldr	r0, [r7, #28]
    a248:	4b2b      	ldr	r3, [pc, #172]	; (a2f8 <_usb_d_dev_handle_trfail+0x1b4>)
    a24a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a24c:	78fb      	ldrb	r3, [r7, #3]
    a24e:	f107 0220 	add.w	r2, r7, #32
    a252:	4413      	add	r3, r2
    a254:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a258:	7efb      	ldrb	r3, [r7, #27]
    a25a:	4619      	mov	r1, r3
    a25c:	69f8      	ldr	r0, [r7, #28]
    a25e:	4b27      	ldr	r3, [pc, #156]	; (a2fc <_usb_d_dev_handle_trfail+0x1b8>)
    a260:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    a262:	7cbb      	ldrb	r3, [r7, #18]
    a264:	2b00      	cmp	r3, #0
    a266:	d03b      	beq.n	a2e0 <_usb_d_dev_handle_trfail+0x19c>
    a268:	687b      	ldr	r3, [r7, #4]
    a26a:	7cdb      	ldrb	r3, [r3, #19]
    a26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a270:	b2db      	uxtb	r3, r3
    a272:	2b00      	cmp	r3, #0
    a274:	d034      	beq.n	a2e0 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    a276:	687b      	ldr	r3, [r7, #4]
    a278:	7cdb      	ldrb	r3, [r3, #19]
    a27a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a27e:	b2db      	uxtb	r3, r3
    a280:	461a      	mov	r2, r3
    a282:	78fb      	ldrb	r3, [r7, #3]
    a284:	4293      	cmp	r3, r2
    a286:	d02b      	beq.n	a2e0 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    a288:	687b      	ldr	r3, [r7, #4]
    a28a:	7cdb      	ldrb	r3, [r3, #19]
    a28c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a290:	b2db      	uxtb	r3, r3
    a292:	2b00      	cmp	r3, #0
    a294:	bf14      	ite	ne
    a296:	2301      	movne	r3, #1
    a298:	2300      	moveq	r3, #0
    a29a:	b2db      	uxtb	r3, r3
    a29c:	2200      	movs	r2, #0
    a29e:	4619      	mov	r1, r3
    a2a0:	6878      	ldr	r0, [r7, #4]
    a2a2:	4b17      	ldr	r3, [pc, #92]	; (a300 <_usb_d_dev_handle_trfail+0x1bc>)
    a2a4:	4798      	blx	r3
}
    a2a6:	e01b      	b.n	a2e0 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    a2a8:	78fa      	ldrb	r2, [r7, #3]
    a2aa:	7efb      	ldrb	r3, [r7, #27]
    a2ac:	4611      	mov	r1, r2
    a2ae:	4618      	mov	r0, r3
    a2b0:	4b14      	ldr	r3, [pc, #80]	; (a304 <_usb_d_dev_handle_trfail+0x1c0>)
    a2b2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a2b4:	78fb      	ldrb	r3, [r7, #3]
    a2b6:	f107 0220 	add.w	r2, r7, #32
    a2ba:	4413      	add	r3, r2
    a2bc:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a2c0:	7efb      	ldrb	r3, [r7, #27]
    a2c2:	4619      	mov	r1, r3
    a2c4:	69f8      	ldr	r0, [r7, #28]
    a2c6:	4b0c      	ldr	r3, [pc, #48]	; (a2f8 <_usb_d_dev_handle_trfail+0x1b4>)
    a2c8:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a2ca:	78fb      	ldrb	r3, [r7, #3]
    a2cc:	f107 0220 	add.w	r2, r7, #32
    a2d0:	4413      	add	r3, r2
    a2d2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a2d6:	7efb      	ldrb	r3, [r7, #27]
    a2d8:	4619      	mov	r1, r3
    a2da:	69f8      	ldr	r0, [r7, #28]
    a2dc:	4b07      	ldr	r3, [pc, #28]	; (a2fc <_usb_d_dev_handle_trfail+0x1b8>)
    a2de:	4798      	blx	r3
}
    a2e0:	bf00      	nop
    a2e2:	3720      	adds	r7, #32
    a2e4:	46bd      	mov	sp, r7
    a2e6:	bd80      	pop	{r7, pc}
    a2e8:	00013770 	.word	0x00013770
    a2ec:	20000c5c 	.word	0x20000c5c
    a2f0:	00008ead 	.word	0x00008ead
    a2f4:	00008e7d 	.word	0x00008e7d
    a2f8:	00008d51 	.word	0x00008d51
    a2fc:	00008e51 	.word	0x00008e51
    a300:	0000aebd 	.word	0x0000aebd
    a304:	00009739 	.word	0x00009739

0000a308 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a308:	b580      	push	{r7, lr}
    a30a:	b082      	sub	sp, #8
    a30c:	af00      	add	r7, sp, #0
    a30e:	6078      	str	r0, [r7, #4]
    a310:	460b      	mov	r3, r1
    a312:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a314:	78fb      	ldrb	r3, [r7, #3]
    a316:	f003 0310 	and.w	r3, r3, #16
    a31a:	2b00      	cmp	r3, #0
    a31c:	d003      	beq.n	a326 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    a31e:	6878      	ldr	r0, [r7, #4]
    a320:	4b0c      	ldr	r3, [pc, #48]	; (a354 <_usb_d_dev_trans_setup_isr+0x4c>)
    a322:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    a324:	e012      	b.n	a34c <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a326:	78fb      	ldrb	r3, [r7, #3]
    a328:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a32c:	2b00      	cmp	r3, #0
    a32e:	d004      	beq.n	a33a <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    a330:	2101      	movs	r1, #1
    a332:	6878      	ldr	r0, [r7, #4]
    a334:	4b08      	ldr	r3, [pc, #32]	; (a358 <_usb_d_dev_trans_setup_isr+0x50>)
    a336:	4798      	blx	r3
}
    a338:	e008      	b.n	a34c <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a33a:	78fb      	ldrb	r3, [r7, #3]
    a33c:	f003 0320 	and.w	r3, r3, #32
    a340:	2b00      	cmp	r3, #0
    a342:	d003      	beq.n	a34c <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    a344:	2100      	movs	r1, #0
    a346:	6878      	ldr	r0, [r7, #4]
    a348:	4b03      	ldr	r3, [pc, #12]	; (a358 <_usb_d_dev_trans_setup_isr+0x50>)
    a34a:	4798      	blx	r3
}
    a34c:	bf00      	nop
    a34e:	3708      	adds	r7, #8
    a350:	46bd      	mov	sp, r7
    a352:	bd80      	pop	{r7, pc}
    a354:	0000a029 	.word	0x0000a029
    a358:	0000a101 	.word	0x0000a101

0000a35c <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a35c:	b580      	push	{r7, lr}
    a35e:	b082      	sub	sp, #8
    a360:	af00      	add	r7, sp, #0
    a362:	6078      	str	r0, [r7, #4]
    a364:	460b      	mov	r3, r1
    a366:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a368:	78fb      	ldrb	r3, [r7, #3]
    a36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a36e:	2b00      	cmp	r3, #0
    a370:	d004      	beq.n	a37c <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    a372:	2101      	movs	r1, #1
    a374:	6878      	ldr	r0, [r7, #4]
    a376:	4b1a      	ldr	r3, [pc, #104]	; (a3e0 <_usb_d_dev_trans_in_isr+0x84>)
    a378:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a37a:	e02c      	b.n	a3d6 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a37c:	78fb      	ldrb	r3, [r7, #3]
    a37e:	f003 0308 	and.w	r3, r3, #8
    a382:	2b00      	cmp	r3, #0
    a384:	d004      	beq.n	a390 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    a386:	2101      	movs	r1, #1
    a388:	6878      	ldr	r0, [r7, #4]
    a38a:	4b16      	ldr	r3, [pc, #88]	; (a3e4 <_usb_d_dev_trans_in_isr+0x88>)
    a38c:	4798      	blx	r3
}
    a38e:	e022      	b.n	a3d6 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a390:	78fb      	ldrb	r3, [r7, #3]
    a392:	f003 0302 	and.w	r3, r3, #2
    a396:	2b00      	cmp	r3, #0
    a398:	d004      	beq.n	a3a4 <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    a39a:	2101      	movs	r1, #1
    a39c:	6878      	ldr	r0, [r7, #4]
    a39e:	4b12      	ldr	r3, [pc, #72]	; (a3e8 <_usb_d_dev_trans_in_isr+0x8c>)
    a3a0:	4798      	blx	r3
}
    a3a2:	e018      	b.n	a3d6 <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a3a4:	687b      	ldr	r3, [r7, #4]
    a3a6:	7cdb      	ldrb	r3, [r3, #19]
    a3a8:	f003 0307 	and.w	r3, r3, #7
    a3ac:	b2db      	uxtb	r3, r3
    a3ae:	2b01      	cmp	r3, #1
    a3b0:	d111      	bne.n	a3d6 <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a3b2:	78fb      	ldrb	r3, [r7, #3]
    a3b4:	f003 0304 	and.w	r3, r3, #4
    a3b8:	2b00      	cmp	r3, #0
    a3ba:	d004      	beq.n	a3c6 <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    a3bc:	2100      	movs	r1, #0
    a3be:	6878      	ldr	r0, [r7, #4]
    a3c0:	4b08      	ldr	r3, [pc, #32]	; (a3e4 <_usb_d_dev_trans_in_isr+0x88>)
    a3c2:	4798      	blx	r3
}
    a3c4:	e007      	b.n	a3d6 <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a3c6:	78fb      	ldrb	r3, [r7, #3]
    a3c8:	f003 0310 	and.w	r3, r3, #16
    a3cc:	2b00      	cmp	r3, #0
    a3ce:	d002      	beq.n	a3d6 <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a3d0:	6878      	ldr	r0, [r7, #4]
    a3d2:	4b06      	ldr	r3, [pc, #24]	; (a3ec <_usb_d_dev_trans_in_isr+0x90>)
    a3d4:	4798      	blx	r3
}
    a3d6:	bf00      	nop
    a3d8:	3708      	adds	r7, #8
    a3da:	46bd      	mov	sp, r7
    a3dc:	bd80      	pop	{r7, pc}
    a3de:	bf00      	nop
    a3e0:	0000a101 	.word	0x0000a101
    a3e4:	0000a145 	.word	0x0000a145
    a3e8:	00009b4d 	.word	0x00009b4d
    a3ec:	0000a029 	.word	0x0000a029

0000a3f0 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a3f0:	b580      	push	{r7, lr}
    a3f2:	b082      	sub	sp, #8
    a3f4:	af00      	add	r7, sp, #0
    a3f6:	6078      	str	r0, [r7, #4]
    a3f8:	460b      	mov	r3, r1
    a3fa:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a3fc:	78fb      	ldrb	r3, [r7, #3]
    a3fe:	f003 0320 	and.w	r3, r3, #32
    a402:	2b00      	cmp	r3, #0
    a404:	d004      	beq.n	a410 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    a406:	2100      	movs	r1, #0
    a408:	6878      	ldr	r0, [r7, #4]
    a40a:	4b1a      	ldr	r3, [pc, #104]	; (a474 <_usb_d_dev_trans_out_isr+0x84>)
    a40c:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a40e:	e02c      	b.n	a46a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a410:	78fb      	ldrb	r3, [r7, #3]
    a412:	f003 0304 	and.w	r3, r3, #4
    a416:	2b00      	cmp	r3, #0
    a418:	d004      	beq.n	a424 <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    a41a:	2100      	movs	r1, #0
    a41c:	6878      	ldr	r0, [r7, #4]
    a41e:	4b16      	ldr	r3, [pc, #88]	; (a478 <_usb_d_dev_trans_out_isr+0x88>)
    a420:	4798      	blx	r3
}
    a422:	e022      	b.n	a46a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a424:	78fb      	ldrb	r3, [r7, #3]
    a426:	f003 0301 	and.w	r3, r3, #1
    a42a:	2b00      	cmp	r3, #0
    a42c:	d004      	beq.n	a438 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    a42e:	2101      	movs	r1, #1
    a430:	6878      	ldr	r0, [r7, #4]
    a432:	4b12      	ldr	r3, [pc, #72]	; (a47c <_usb_d_dev_trans_out_isr+0x8c>)
    a434:	4798      	blx	r3
}
    a436:	e018      	b.n	a46a <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a438:	687b      	ldr	r3, [r7, #4]
    a43a:	7cdb      	ldrb	r3, [r3, #19]
    a43c:	f003 0307 	and.w	r3, r3, #7
    a440:	b2db      	uxtb	r3, r3
    a442:	2b01      	cmp	r3, #1
    a444:	d111      	bne.n	a46a <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a446:	78fb      	ldrb	r3, [r7, #3]
    a448:	f003 0308 	and.w	r3, r3, #8
    a44c:	2b00      	cmp	r3, #0
    a44e:	d004      	beq.n	a45a <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    a450:	2101      	movs	r1, #1
    a452:	6878      	ldr	r0, [r7, #4]
    a454:	4b08      	ldr	r3, [pc, #32]	; (a478 <_usb_d_dev_trans_out_isr+0x88>)
    a456:	4798      	blx	r3
}
    a458:	e007      	b.n	a46a <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a45a:	78fb      	ldrb	r3, [r7, #3]
    a45c:	f003 0310 	and.w	r3, r3, #16
    a460:	2b00      	cmp	r3, #0
    a462:	d002      	beq.n	a46a <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a464:	6878      	ldr	r0, [r7, #4]
    a466:	4b06      	ldr	r3, [pc, #24]	; (a480 <_usb_d_dev_trans_out_isr+0x90>)
    a468:	4798      	blx	r3
}
    a46a:	bf00      	nop
    a46c:	3708      	adds	r7, #8
    a46e:	46bd      	mov	sp, r7
    a470:	bd80      	pop	{r7, pc}
    a472:	bf00      	nop
    a474:	0000a101 	.word	0x0000a101
    a478:	0000a145 	.word	0x0000a145
    a47c:	00009d65 	.word	0x00009d65
    a480:	0000a029 	.word	0x0000a029

0000a484 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    a484:	b580      	push	{r7, lr}
    a486:	b084      	sub	sp, #16
    a488:	af00      	add	r7, sp, #0
    a48a:	6078      	str	r0, [r7, #4]
    a48c:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    a48e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a492:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a494:	683b      	ldr	r3, [r7, #0]
    a496:	7c9b      	ldrb	r3, [r3, #18]
    a498:	f003 030f 	and.w	r3, r3, #15
    a49c:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    a49e:	7afb      	ldrb	r3, [r7, #11]
    a4a0:	2201      	movs	r2, #1
    a4a2:	409a      	lsls	r2, r3
    a4a4:	687b      	ldr	r3, [r7, #4]
    a4a6:	4013      	ands	r3, r2
    a4a8:	2b00      	cmp	r3, #0
    a4aa:	d03d      	beq.n	a528 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    a4ac:	7afb      	ldrb	r3, [r7, #11]
    a4ae:	68fa      	ldr	r2, [r7, #12]
    a4b0:	3308      	adds	r3, #8
    a4b2:	015b      	lsls	r3, r3, #5
    a4b4:	4413      	add	r3, r2
    a4b6:	3307      	adds	r3, #7
    a4b8:	781b      	ldrb	r3, [r3, #0]
    a4ba:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    a4bc:	7afb      	ldrb	r3, [r7, #11]
    a4be:	68fa      	ldr	r2, [r7, #12]
    a4c0:	015b      	lsls	r3, r3, #5
    a4c2:	4413      	add	r3, r2
    a4c4:	f203 1309 	addw	r3, r3, #265	; 0x109
    a4c8:	781b      	ldrb	r3, [r3, #0]
    a4ca:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    a4cc:	7aba      	ldrb	r2, [r7, #10]
    a4ce:	7a7b      	ldrb	r3, [r7, #9]
    a4d0:	4013      	ands	r3, r2
    a4d2:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    a4d4:	7abb      	ldrb	r3, [r7, #10]
    a4d6:	2b00      	cmp	r3, #0
    a4d8:	d027      	beq.n	a52a <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a4da:	683b      	ldr	r3, [r7, #0]
    a4dc:	7cdb      	ldrb	r3, [r3, #19]
    a4de:	f003 0307 	and.w	r3, r3, #7
    a4e2:	b2db      	uxtb	r3, r3
    a4e4:	2b01      	cmp	r3, #1
    a4e6:	d10c      	bne.n	a502 <_usb_d_dev_handle_eps+0x7e>
    a4e8:	683b      	ldr	r3, [r7, #0]
    a4ea:	7cdb      	ldrb	r3, [r3, #19]
    a4ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a4f0:	b2db      	uxtb	r3, r3
    a4f2:	2b00      	cmp	r3, #0
    a4f4:	d105      	bne.n	a502 <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    a4f6:	7abb      	ldrb	r3, [r7, #10]
    a4f8:	4619      	mov	r1, r3
    a4fa:	6838      	ldr	r0, [r7, #0]
    a4fc:	4b0c      	ldr	r3, [pc, #48]	; (a530 <_usb_d_dev_handle_eps+0xac>)
    a4fe:	4798      	blx	r3
    a500:	e013      	b.n	a52a <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a502:	683b      	ldr	r3, [r7, #0]
    a504:	7cdb      	ldrb	r3, [r3, #19]
    a506:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a50a:	b2db      	uxtb	r3, r3
    a50c:	2b00      	cmp	r3, #0
    a50e:	d005      	beq.n	a51c <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    a510:	7abb      	ldrb	r3, [r7, #10]
    a512:	4619      	mov	r1, r3
    a514:	6838      	ldr	r0, [r7, #0]
    a516:	4b07      	ldr	r3, [pc, #28]	; (a534 <_usb_d_dev_handle_eps+0xb0>)
    a518:	4798      	blx	r3
    a51a:	e006      	b.n	a52a <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a51c:	7abb      	ldrb	r3, [r7, #10]
    a51e:	4619      	mov	r1, r3
    a520:	6838      	ldr	r0, [r7, #0]
    a522:	4b05      	ldr	r3, [pc, #20]	; (a538 <_usb_d_dev_handle_eps+0xb4>)
    a524:	4798      	blx	r3
    a526:	e000      	b.n	a52a <_usb_d_dev_handle_eps+0xa6>
		return;
    a528:	bf00      	nop
		}
	}
}
    a52a:	3710      	adds	r7, #16
    a52c:	46bd      	mov	sp, r7
    a52e:	bd80      	pop	{r7, pc}
    a530:	0000a309 	.word	0x0000a309
    a534:	0000a35d 	.word	0x0000a35d
    a538:	0000a3f1 	.word	0x0000a3f1

0000a53c <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    a53c:	b580      	push	{r7, lr}
    a53e:	b084      	sub	sp, #16
    a540:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a542:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a546:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a548:	68bb      	ldr	r3, [r7, #8]
    a54a:	8c1b      	ldrh	r3, [r3, #32]
    a54c:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    a54e:	88fb      	ldrh	r3, [r7, #6]
    a550:	2b00      	cmp	r3, #0
    a552:	d104      	bne.n	a55e <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    a554:	4b13      	ldr	r3, [pc, #76]	; (a5a4 <_usb_d_dev_handler+0x68>)
    a556:	4798      	blx	r3
    a558:	4603      	mov	r3, r0
    a55a:	2b00      	cmp	r3, #0
    a55c:	d11e      	bne.n	a59c <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    a55e:	2300      	movs	r3, #0
    a560:	73fb      	strb	r3, [r7, #15]
    a562:	e017      	b.n	a594 <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    a564:	7bfa      	ldrb	r2, [r7, #15]
    a566:	4613      	mov	r3, r2
    a568:	009b      	lsls	r3, r3, #2
    a56a:	4413      	add	r3, r2
    a56c:	009b      	lsls	r3, r3, #2
    a56e:	3310      	adds	r3, #16
    a570:	4a0d      	ldr	r2, [pc, #52]	; (a5a8 <_usb_d_dev_handler+0x6c>)
    a572:	4413      	add	r3, r2
    a574:	3304      	adds	r3, #4
    a576:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    a578:	683b      	ldr	r3, [r7, #0]
    a57a:	7c9b      	ldrb	r3, [r3, #18]
    a57c:	2bff      	cmp	r3, #255	; 0xff
    a57e:	d005      	beq.n	a58c <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    a580:	88fb      	ldrh	r3, [r7, #6]
    a582:	6839      	ldr	r1, [r7, #0]
    a584:	4618      	mov	r0, r3
    a586:	4b09      	ldr	r3, [pc, #36]	; (a5ac <_usb_d_dev_handler+0x70>)
    a588:	4798      	blx	r3
    a58a:	e000      	b.n	a58e <_usb_d_dev_handler+0x52>
			continue;
    a58c:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    a58e:	7bfb      	ldrb	r3, [r7, #15]
    a590:	3301      	adds	r3, #1
    a592:	73fb      	strb	r3, [r7, #15]
    a594:	7bfb      	ldrb	r3, [r7, #15]
    a596:	2b08      	cmp	r3, #8
    a598:	d9e4      	bls.n	a564 <_usb_d_dev_handler+0x28>
    a59a:	e000      	b.n	a59e <_usb_d_dev_handler+0x62>
			return;
    a59c:	bf00      	nop
	}
}
    a59e:	3710      	adds	r7, #16
    a5a0:	46bd      	mov	sp, r7
    a5a2:	bd80      	pop	{r7, pc}
    a5a4:	00009a95 	.word	0x00009a95
    a5a8:	20000b94 	.word	0x20000b94
    a5ac:	0000a485 	.word	0x0000a485

0000a5b0 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    a5b0:	b580      	push	{r7, lr}
    a5b2:	b082      	sub	sp, #8
    a5b4:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    a5b6:	2300      	movs	r3, #0
    a5b8:	71fb      	strb	r3, [r7, #7]
    a5ba:	e023      	b.n	a604 <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    a5bc:	79fa      	ldrb	r2, [r7, #7]
    a5be:	4613      	mov	r3, r2
    a5c0:	009b      	lsls	r3, r3, #2
    a5c2:	4413      	add	r3, r2
    a5c4:	009b      	lsls	r3, r3, #2
    a5c6:	3310      	adds	r3, #16
    a5c8:	4a14      	ldr	r2, [pc, #80]	; (a61c <_usb_d_dev_reset_epts+0x6c>)
    a5ca:	4413      	add	r3, r2
    a5cc:	3304      	adds	r3, #4
    a5ce:	2103      	movs	r1, #3
    a5d0:	4618      	mov	r0, r3
    a5d2:	4b13      	ldr	r3, [pc, #76]	; (a620 <_usb_d_dev_reset_epts+0x70>)
    a5d4:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    a5d6:	79fa      	ldrb	r2, [r7, #7]
    a5d8:	4910      	ldr	r1, [pc, #64]	; (a61c <_usb_d_dev_reset_epts+0x6c>)
    a5da:	4613      	mov	r3, r2
    a5dc:	009b      	lsls	r3, r3, #2
    a5de:	4413      	add	r3, r2
    a5e0:	009b      	lsls	r3, r3, #2
    a5e2:	440b      	add	r3, r1
    a5e4:	3326      	adds	r3, #38	; 0x26
    a5e6:	22ff      	movs	r2, #255	; 0xff
    a5e8:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    a5ea:	79fa      	ldrb	r2, [r7, #7]
    a5ec:	490b      	ldr	r1, [pc, #44]	; (a61c <_usb_d_dev_reset_epts+0x6c>)
    a5ee:	4613      	mov	r3, r2
    a5f0:	009b      	lsls	r3, r3, #2
    a5f2:	4413      	add	r3, r2
    a5f4:	009b      	lsls	r3, r3, #2
    a5f6:	440b      	add	r3, r1
    a5f8:	3327      	adds	r3, #39	; 0x27
    a5fa:	2200      	movs	r2, #0
    a5fc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    a5fe:	79fb      	ldrb	r3, [r7, #7]
    a600:	3301      	adds	r3, #1
    a602:	71fb      	strb	r3, [r7, #7]
    a604:	79fb      	ldrb	r3, [r7, #7]
    a606:	2b08      	cmp	r3, #8
    a608:	d9d8      	bls.n	a5bc <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    a60a:	22a0      	movs	r2, #160	; 0xa0
    a60c:	2100      	movs	r1, #0
    a60e:	4805      	ldr	r0, [pc, #20]	; (a624 <_usb_d_dev_reset_epts+0x74>)
    a610:	4b05      	ldr	r3, [pc, #20]	; (a628 <_usb_d_dev_reset_epts+0x78>)
    a612:	4798      	blx	r3
}
    a614:	bf00      	nop
    a616:	3708      	adds	r7, #8
    a618:	46bd      	mov	sp, r7
    a61a:	bd80      	pop	{r7, pc}
    a61c:	20000b94 	.word	0x20000b94
    a620:	0000ae75 	.word	0x0000ae75
    a624:	20000c5c 	.word	0x20000c5c
    a628:	000130f5 	.word	0x000130f5

0000a62c <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    a62c:	b580      	push	{r7, lr}
    a62e:	b084      	sub	sp, #16
    a630:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    a632:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a636:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    a638:	2301      	movs	r3, #1
    a63a:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    a63c:	2304      	movs	r3, #4
    a63e:	713b      	strb	r3, [r7, #4]
    a640:	2300      	movs	r3, #0
    a642:	717b      	strb	r3, [r7, #5]
    a644:	2300      	movs	r3, #0
    a646:	71bb      	strb	r3, [r7, #6]
    a648:	2300      	movs	r3, #0
    a64a:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a64c:	2101      	movs	r1, #1
    a64e:	68f8      	ldr	r0, [r7, #12]
    a650:	4b26      	ldr	r3, [pc, #152]	; (a6ec <_usb_d_dev_init+0xc0>)
    a652:	4798      	blx	r3
    a654:	4603      	mov	r3, r0
    a656:	f083 0301 	eor.w	r3, r3, #1
    a65a:	b2db      	uxtb	r3, r3
    a65c:	2b00      	cmp	r3, #0
    a65e:	d011      	beq.n	a684 <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a660:	2102      	movs	r1, #2
    a662:	68f8      	ldr	r0, [r7, #12]
    a664:	4b22      	ldr	r3, [pc, #136]	; (a6f0 <_usb_d_dev_init+0xc4>)
    a666:	4798      	blx	r3
    a668:	4603      	mov	r3, r0
    a66a:	2b00      	cmp	r3, #0
    a66c:	d006      	beq.n	a67c <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a66e:	68f8      	ldr	r0, [r7, #12]
    a670:	4b20      	ldr	r3, [pc, #128]	; (a6f4 <_usb_d_dev_init+0xc8>)
    a672:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    a674:	2102      	movs	r1, #2
    a676:	68f8      	ldr	r0, [r7, #12]
    a678:	4b1f      	ldr	r3, [pc, #124]	; (a6f8 <_usb_d_dev_init+0xcc>)
    a67a:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    a67c:	2101      	movs	r1, #1
    a67e:	68f8      	ldr	r0, [r7, #12]
    a680:	4b1e      	ldr	r3, [pc, #120]	; (a6fc <_usb_d_dev_init+0xd0>)
    a682:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    a684:	2101      	movs	r1, #1
    a686:	68f8      	ldr	r0, [r7, #12]
    a688:	4b1b      	ldr	r3, [pc, #108]	; (a6f8 <_usb_d_dev_init+0xcc>)
    a68a:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a68c:	4b1c      	ldr	r3, [pc, #112]	; (a700 <_usb_d_dev_init+0xd4>)
    a68e:	4a1d      	ldr	r2, [pc, #116]	; (a704 <_usb_d_dev_init+0xd8>)
    a690:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a692:	4b1b      	ldr	r3, [pc, #108]	; (a700 <_usb_d_dev_init+0xd4>)
    a694:	4a1b      	ldr	r2, [pc, #108]	; (a704 <_usb_d_dev_init+0xd8>)
    a696:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a698:	4b19      	ldr	r3, [pc, #100]	; (a700 <_usb_d_dev_init+0xd4>)
    a69a:	4a1a      	ldr	r2, [pc, #104]	; (a704 <_usb_d_dev_init+0xd8>)
    a69c:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a69e:	4b18      	ldr	r3, [pc, #96]	; (a700 <_usb_d_dev_init+0xd4>)
    a6a0:	4a18      	ldr	r2, [pc, #96]	; (a704 <_usb_d_dev_init+0xd8>)
    a6a2:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a6a4:	4b16      	ldr	r3, [pc, #88]	; (a700 <_usb_d_dev_init+0xd4>)
    a6a6:	4a17      	ldr	r2, [pc, #92]	; (a704 <_usb_d_dev_init+0xd8>)
    a6a8:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    a6aa:	4b17      	ldr	r3, [pc, #92]	; (a708 <_usb_d_dev_init+0xdc>)
    a6ac:	4798      	blx	r3

	_usb_load_calib();
    a6ae:	4b17      	ldr	r3, [pc, #92]	; (a70c <_usb_d_dev_init+0xe0>)
    a6b0:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    a6b2:	2104      	movs	r1, #4
    a6b4:	68f8      	ldr	r0, [r7, #12]
    a6b6:	4b11      	ldr	r3, [pc, #68]	; (a6fc <_usb_d_dev_init+0xd0>)
    a6b8:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    a6ba:	4b15      	ldr	r3, [pc, #84]	; (a710 <_usb_d_dev_init+0xe4>)
    a6bc:	4619      	mov	r1, r3
    a6be:	68f8      	ldr	r0, [r7, #12]
    a6c0:	4b14      	ldr	r3, [pc, #80]	; (a714 <_usb_d_dev_init+0xe8>)
    a6c2:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    a6c4:	7afb      	ldrb	r3, [r7, #11]
    a6c6:	f107 0210 	add.w	r2, r7, #16
    a6ca:	4413      	add	r3, r2
    a6cc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    a6d0:	f043 0301 	orr.w	r3, r3, #1
    a6d4:	b2db      	uxtb	r3, r3
    a6d6:	b29b      	uxth	r3, r3
    a6d8:	4619      	mov	r1, r3
    a6da:	68f8      	ldr	r0, [r7, #12]
    a6dc:	4b0e      	ldr	r3, [pc, #56]	; (a718 <_usb_d_dev_init+0xec>)
    a6de:	4798      	blx	r3

	return ERR_NONE;
    a6e0:	2300      	movs	r3, #0
}
    a6e2:	4618      	mov	r0, r3
    a6e4:	3710      	adds	r7, #16
    a6e6:	46bd      	mov	sp, r7
    a6e8:	bd80      	pop	{r7, pc}
    a6ea:	bf00      	nop
    a6ec:	00008cc5 	.word	0x00008cc5
    a6f0:	00009015 	.word	0x00009015
    a6f4:	00008fe9 	.word	0x00008fe9
    a6f8:	00008c9b 	.word	0x00008c9b
    a6fc:	00009045 	.word	0x00009045
    a700:	20000b94 	.word	0x20000b94
    a704:	0000910d 	.word	0x0000910d
    a708:	0000a5b1 	.word	0x0000a5b1
    a70c:	00009125 	.word	0x00009125
    a710:	20000c5c 	.word	0x20000c5c
    a714:	000090f1 	.word	0x000090f1
    a718:	000090b5 	.word	0x000090b5

0000a71c <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    a71c:	b580      	push	{r7, lr}
    a71e:	b082      	sub	sp, #8
    a720:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a722:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a726:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    a728:	2103      	movs	r1, #3
    a72a:	6878      	ldr	r0, [r7, #4]
    a72c:	4b17      	ldr	r3, [pc, #92]	; (a78c <_usb_d_dev_enable+0x70>)
    a72e:	4798      	blx	r3
    a730:	4603      	mov	r3, r0
    a732:	2b00      	cmp	r3, #0
    a734:	d002      	beq.n	a73c <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    a736:	f06f 0310 	mvn.w	r3, #16
    a73a:	e023      	b.n	a784 <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    a73c:	6878      	ldr	r0, [r7, #4]
    a73e:	4b14      	ldr	r3, [pc, #80]	; (a790 <_usb_d_dev_enable+0x74>)
    a740:	4798      	blx	r3
    a742:	4603      	mov	r3, r0
    a744:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    a746:	78fb      	ldrb	r3, [r7, #3]
    a748:	f003 0302 	and.w	r3, r3, #2
    a74c:	2b00      	cmp	r3, #0
    a74e:	d107      	bne.n	a760 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    a750:	78fb      	ldrb	r3, [r7, #3]
    a752:	f043 0302 	orr.w	r3, r3, #2
    a756:	b2db      	uxtb	r3, r3
    a758:	4619      	mov	r1, r3
    a75a:	6878      	ldr	r0, [r7, #4]
    a75c:	4b0d      	ldr	r3, [pc, #52]	; (a794 <_usb_d_dev_enable+0x78>)
    a75e:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    a760:	2050      	movs	r0, #80	; 0x50
    a762:	4b0d      	ldr	r3, [pc, #52]	; (a798 <_usb_d_dev_enable+0x7c>)
    a764:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    a766:	2051      	movs	r0, #81	; 0x51
    a768:	4b0b      	ldr	r3, [pc, #44]	; (a798 <_usb_d_dev_enable+0x7c>)
    a76a:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    a76c:	2052      	movs	r0, #82	; 0x52
    a76e:	4b0a      	ldr	r3, [pc, #40]	; (a798 <_usb_d_dev_enable+0x7c>)
    a770:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    a772:	2053      	movs	r0, #83	; 0x53
    a774:	4b08      	ldr	r3, [pc, #32]	; (a798 <_usb_d_dev_enable+0x7c>)
    a776:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    a778:	f240 218d 	movw	r1, #653	; 0x28d
    a77c:	6878      	ldr	r0, [r7, #4]
    a77e:	4b07      	ldr	r3, [pc, #28]	; (a79c <_usb_d_dev_enable+0x80>)
    a780:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    a782:	2300      	movs	r3, #0
}
    a784:	4618      	mov	r0, r3
    a786:	3708      	adds	r7, #8
    a788:	46bd      	mov	sp, r7
    a78a:	bd80      	pop	{r7, pc}
    a78c:	00008fbf 	.word	0x00008fbf
    a790:	0000906d 	.word	0x0000906d
    a794:	00009045 	.word	0x00009045
    a798:	00008bd1 	.word	0x00008bd1
    a79c:	00008f69 	.word	0x00008f69

0000a7a0 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    a7a0:	b580      	push	{r7, lr}
    a7a2:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    a7a4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a7a8:	4b01      	ldr	r3, [pc, #4]	; (a7b0 <_usb_d_dev_attach+0x10>)
    a7aa:	4798      	blx	r3
}
    a7ac:	bf00      	nop
    a7ae:	bd80      	pop	{r7, pc}
    a7b0:	00009091 	.word	0x00009091

0000a7b4 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    a7b4:	b580      	push	{r7, lr}
    a7b6:	b082      	sub	sp, #8
    a7b8:	af00      	add	r7, sp, #0
    a7ba:	4603      	mov	r3, r0
    a7bc:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    a7be:	79fb      	ldrb	r3, [r7, #7]
    a7c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a7c4:	b2db      	uxtb	r3, r3
    a7c6:	4619      	mov	r1, r3
    a7c8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    a7cc:	4b02      	ldr	r3, [pc, #8]	; (a7d8 <_usb_d_dev_set_address+0x24>)
    a7ce:	4798      	blx	r3
}
    a7d0:	bf00      	nop
    a7d2:	3708      	adds	r7, #8
    a7d4:	46bd      	mov	sp, r7
    a7d6:	bd80      	pop	{r7, pc}
    a7d8:	000090d3 	.word	0x000090d3

0000a7dc <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    a7dc:	b590      	push	{r4, r7, lr}
    a7de:	b085      	sub	sp, #20
    a7e0:	af00      	add	r7, sp, #0
    a7e2:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    a7e4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a7e8:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a7ea:	687b      	ldr	r3, [r7, #4]
    a7ec:	7c9b      	ldrb	r3, [r3, #18]
    a7ee:	f003 030f 	and.w	r3, r3, #15
    a7f2:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a7f4:	687b      	ldr	r3, [r7, #4]
    a7f6:	68db      	ldr	r3, [r3, #12]
    a7f8:	461a      	mov	r2, r3
    a7fa:	7afb      	ldrb	r3, [r7, #11]
    a7fc:	2100      	movs	r1, #0
    a7fe:	4618      	mov	r0, r3
    a800:	4b0f      	ldr	r3, [pc, #60]	; (a840 <_usb_d_dev_trans_setup+0x64>)
    a802:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a804:	687b      	ldr	r3, [r7, #4]
    a806:	8a1b      	ldrh	r3, [r3, #16]
    a808:	461a      	mov	r2, r3
    a80a:	7af8      	ldrb	r0, [r7, #11]
    a80c:	2300      	movs	r3, #0
    a80e:	2100      	movs	r1, #0
    a810:	4c0c      	ldr	r4, [pc, #48]	; (a844 <_usb_d_dev_trans_setup+0x68>)
    a812:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    a814:	7afb      	ldrb	r3, [r7, #11]
    a816:	22b0      	movs	r2, #176	; 0xb0
    a818:	4619      	mov	r1, r3
    a81a:	68f8      	ldr	r0, [r7, #12]
    a81c:	4b0a      	ldr	r3, [pc, #40]	; (a848 <_usb_d_dev_trans_setup+0x6c>)
    a81e:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    a820:	7afb      	ldrb	r3, [r7, #11]
    a822:	2200      	movs	r2, #0
    a824:	2100      	movs	r1, #0
    a826:	4618      	mov	r0, r3
    a828:	4b08      	ldr	r3, [pc, #32]	; (a84c <_usb_d_dev_trans_setup+0x70>)
    a82a:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    a82c:	7afb      	ldrb	r3, [r7, #11]
    a82e:	2210      	movs	r2, #16
    a830:	4619      	mov	r1, r3
    a832:	68f8      	ldr	r0, [r7, #12]
    a834:	4b06      	ldr	r3, [pc, #24]	; (a850 <_usb_d_dev_trans_setup+0x74>)
    a836:	4798      	blx	r3
}
    a838:	bf00      	nop
    a83a:	3714      	adds	r7, #20
    a83c:	46bd      	mov	sp, r7
    a83e:	bd90      	pop	{r4, r7, pc}
    a840:	00009571 	.word	0x00009571
    a844:	000096f9 	.word	0x000096f9
    a848:	00008dd1 	.word	0x00008dd1
    a84c:	000097c9 	.word	0x000097c9
    a850:	00008e25 	.word	0x00008e25

0000a854 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    a854:	b580      	push	{r7, lr}
    a856:	b088      	sub	sp, #32
    a858:	af00      	add	r7, sp, #0
    a85a:	4603      	mov	r3, r0
    a85c:	71fb      	strb	r3, [r7, #7]
    a85e:	460b      	mov	r3, r1
    a860:	71bb      	strb	r3, [r7, #6]
    a862:	4613      	mov	r3, r2
    a864:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    a866:	79fb      	ldrb	r3, [r7, #7]
    a868:	f003 030f 	and.w	r3, r3, #15
    a86c:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    a86e:	79fb      	ldrb	r3, [r7, #7]
    a870:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a874:	2b00      	cmp	r3, #0
    a876:	bf14      	ite	ne
    a878:	2301      	movne	r3, #1
    a87a:	2300      	moveq	r3, #0
    a87c:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a87e:	7fba      	ldrb	r2, [r7, #30]
    a880:	7ffb      	ldrb	r3, [r7, #31]
    a882:	4611      	mov	r1, r2
    a884:	4618      	mov	r0, r3
    a886:	4b3e      	ldr	r3, [pc, #248]	; (a980 <_usb_d_dev_ep_init+0x12c>)
    a888:	4798      	blx	r3
    a88a:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    a88c:	79bb      	ldrb	r3, [r7, #6]
    a88e:	f003 0303 	and.w	r3, r3, #3
    a892:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    a894:	7ffa      	ldrb	r2, [r7, #31]
    a896:	4613      	mov	r3, r2
    a898:	005b      	lsls	r3, r3, #1
    a89a:	4413      	add	r3, r2
    a89c:	009b      	lsls	r3, r3, #2
    a89e:	4a39      	ldr	r2, [pc, #228]	; (a984 <_usb_d_dev_ep_init+0x130>)
    a8a0:	4413      	add	r3, r2
    a8a2:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    a8a4:	7ffb      	ldrb	r3, [r7, #31]
    a8a6:	2b04      	cmp	r3, #4
    a8a8:	d902      	bls.n	a8b0 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    a8aa:	f06f 0311 	mvn.w	r3, #17
    a8ae:	e063      	b.n	a978 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    a8b0:	69bb      	ldr	r3, [r7, #24]
    a8b2:	7c9b      	ldrb	r3, [r3, #18]
    a8b4:	2bff      	cmp	r3, #255	; 0xff
    a8b6:	d002      	beq.n	a8be <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    a8b8:	f06f 0313 	mvn.w	r3, #19
    a8bc:	e05c      	b.n	a978 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    a8be:	7dfb      	ldrb	r3, [r7, #23]
    a8c0:	2b00      	cmp	r3, #0
    a8c2:	d11f      	bne.n	a904 <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    a8c4:	7fbb      	ldrb	r3, [r7, #30]
    a8c6:	2b00      	cmp	r3, #0
    a8c8:	bf14      	ite	ne
    a8ca:	2301      	movne	r3, #1
    a8cc:	2300      	moveq	r3, #0
    a8ce:	b2db      	uxtb	r3, r3
    a8d0:	f083 0301 	eor.w	r3, r3, #1
    a8d4:	b2db      	uxtb	r3, r3
    a8d6:	f003 0301 	and.w	r3, r3, #1
    a8da:	b2da      	uxtb	r2, r3
    a8dc:	7ffb      	ldrb	r3, [r7, #31]
    a8de:	4611      	mov	r1, r2
    a8e0:	4618      	mov	r0, r3
    a8e2:	4b27      	ldr	r3, [pc, #156]	; (a980 <_usb_d_dev_ep_init+0x12c>)
    a8e4:	4798      	blx	r3
    a8e6:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    a8e8:	68fb      	ldr	r3, [r7, #12]
    a8ea:	7c9b      	ldrb	r3, [r3, #18]
    a8ec:	2bff      	cmp	r3, #255	; 0xff
    a8ee:	d002      	beq.n	a8f6 <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    a8f0:	f06f 0313 	mvn.w	r3, #19
    a8f4:	e040      	b.n	a978 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    a8f6:	693b      	ldr	r3, [r7, #16]
    a8f8:	681b      	ldr	r3, [r3, #0]
    a8fa:	2b00      	cmp	r3, #0
    a8fc:	d102      	bne.n	a904 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    a8fe:	f06f 0312 	mvn.w	r3, #18
    a902:	e039      	b.n	a978 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    a904:	7fbb      	ldrb	r3, [r7, #30]
    a906:	2b00      	cmp	r3, #0
    a908:	d007      	beq.n	a91a <_usb_d_dev_ep_init+0xc6>
    a90a:	693b      	ldr	r3, [r7, #16]
    a90c:	685b      	ldr	r3, [r3, #4]
    a90e:	2b00      	cmp	r3, #0
    a910:	bf14      	ite	ne
    a912:	2301      	movne	r3, #1
    a914:	2300      	moveq	r3, #0
    a916:	b2db      	uxtb	r3, r3
    a918:	e006      	b.n	a928 <_usb_d_dev_ep_init+0xd4>
    a91a:	693b      	ldr	r3, [r7, #16]
    a91c:	681b      	ldr	r3, [r3, #0]
    a91e:	2b00      	cmp	r3, #0
    a920:	bf14      	ite	ne
    a922:	2301      	movne	r3, #1
    a924:	2300      	moveq	r3, #0
    a926:	b2db      	uxtb	r3, r3
    a928:	2b00      	cmp	r3, #0
    a92a:	d00f      	beq.n	a94c <_usb_d_dev_ep_init+0xf8>
    a92c:	7fbb      	ldrb	r3, [r7, #30]
    a92e:	2b00      	cmp	r3, #0
    a930:	d003      	beq.n	a93a <_usb_d_dev_ep_init+0xe6>
    a932:	693b      	ldr	r3, [r7, #16]
    a934:	895b      	ldrh	r3, [r3, #10]
    a936:	461a      	mov	r2, r3
    a938:	e002      	b.n	a940 <_usb_d_dev_ep_init+0xec>
    a93a:	693b      	ldr	r3, [r7, #16]
    a93c:	891b      	ldrh	r3, [r3, #8]
    a93e:	461a      	mov	r2, r3
    a940:	88bb      	ldrh	r3, [r7, #4]
    a942:	429a      	cmp	r2, r3
    a944:	da02      	bge.n	a94c <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    a946:	f06f 0312 	mvn.w	r3, #18
    a94a:	e015      	b.n	a978 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    a94c:	7fbb      	ldrb	r3, [r7, #30]
    a94e:	2b00      	cmp	r3, #0
    a950:	d002      	beq.n	a958 <_usb_d_dev_ep_init+0x104>
    a952:	693b      	ldr	r3, [r7, #16]
    a954:	685b      	ldr	r3, [r3, #4]
    a956:	e001      	b.n	a95c <_usb_d_dev_ep_init+0x108>
    a958:	693b      	ldr	r3, [r7, #16]
    a95a:	681b      	ldr	r3, [r3, #0]
    a95c:	69ba      	ldr	r2, [r7, #24]
    a95e:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    a960:	69bb      	ldr	r3, [r7, #24]
    a962:	88ba      	ldrh	r2, [r7, #4]
    a964:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    a966:	7dfb      	ldrb	r3, [r7, #23]
    a968:	3301      	adds	r3, #1
    a96a:	b2da      	uxtb	r2, r3
    a96c:	69bb      	ldr	r3, [r7, #24]
    a96e:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    a970:	69bb      	ldr	r3, [r7, #24]
    a972:	79fa      	ldrb	r2, [r7, #7]
    a974:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    a976:	2300      	movs	r3, #0
}
    a978:	4618      	mov	r0, r3
    a97a:	3720      	adds	r7, #32
    a97c:	46bd      	mov	sp, r7
    a97e:	bd80      	pop	{r7, pc}
    a980:	00009885 	.word	0x00009885
    a984:	00013734 	.word	0x00013734

0000a988 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    a988:	b580      	push	{r7, lr}
    a98a:	b086      	sub	sp, #24
    a98c:	af00      	add	r7, sp, #0
    a98e:	4603      	mov	r3, r0
    a990:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    a992:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a996:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    a998:	79fb      	ldrb	r3, [r7, #7]
    a99a:	f003 030f 	and.w	r3, r3, #15
    a99e:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    a9a0:	79fb      	ldrb	r3, [r7, #7]
    a9a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a9a6:	2b00      	cmp	r3, #0
    a9a8:	bf14      	ite	ne
    a9aa:	2301      	movne	r3, #1
    a9ac:	2300      	moveq	r3, #0
    a9ae:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    a9b0:	7cba      	ldrb	r2, [r7, #18]
    a9b2:	7cfb      	ldrb	r3, [r7, #19]
    a9b4:	4611      	mov	r1, r2
    a9b6:	4618      	mov	r0, r3
    a9b8:	4b2a      	ldr	r3, [pc, #168]	; (aa64 <_usb_d_dev_ep_deinit+0xdc>)
    a9ba:	4798      	blx	r3
    a9bc:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    a9be:	7cfb      	ldrb	r3, [r7, #19]
    a9c0:	2b04      	cmp	r3, #4
    a9c2:	d84a      	bhi.n	aa5a <_usb_d_dev_ep_deinit+0xd2>
    a9c4:	68fb      	ldr	r3, [r7, #12]
    a9c6:	7c9b      	ldrb	r3, [r3, #18]
    a9c8:	2bff      	cmp	r3, #255	; 0xff
    a9ca:	d046      	beq.n	aa5a <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    a9cc:	7cbb      	ldrb	r3, [r7, #18]
    a9ce:	2203      	movs	r2, #3
    a9d0:	4619      	mov	r1, r3
    a9d2:	68f8      	ldr	r0, [r7, #12]
    a9d4:	4b24      	ldr	r3, [pc, #144]	; (aa68 <_usb_d_dev_ep_deinit+0xe0>)
    a9d6:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    a9d8:	68fb      	ldr	r3, [r7, #12]
    a9da:	7cdb      	ldrb	r3, [r3, #19]
    a9dc:	f003 0307 	and.w	r3, r3, #7
    a9e0:	b2db      	uxtb	r3, r3
    a9e2:	2b01      	cmp	r3, #1
    a9e4:	d107      	bne.n	a9f6 <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    a9e6:	79fb      	ldrb	r3, [r7, #7]
    a9e8:	697a      	ldr	r2, [r7, #20]
    a9ea:	3308      	adds	r3, #8
    a9ec:	015b      	lsls	r3, r3, #5
    a9ee:	4413      	add	r3, r2
    a9f0:	2200      	movs	r2, #0
    a9f2:	701a      	strb	r2, [r3, #0]
    a9f4:	e02a      	b.n	aa4c <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    a9f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a9fa:	2b00      	cmp	r3, #0
    a9fc:	da15      	bge.n	aa2a <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    a9fe:	79fb      	ldrb	r3, [r7, #7]
    aa00:	f003 030f 	and.w	r3, r3, #15
    aa04:	79fa      	ldrb	r2, [r7, #7]
    aa06:	f002 020f 	and.w	r2, r2, #15
    aa0a:	6979      	ldr	r1, [r7, #20]
    aa0c:	3208      	adds	r2, #8
    aa0e:	0152      	lsls	r2, r2, #5
    aa10:	440a      	add	r2, r1
    aa12:	7812      	ldrb	r2, [r2, #0]
    aa14:	b2d2      	uxtb	r2, r2
    aa16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    aa1a:	b2d1      	uxtb	r1, r2
    aa1c:	697a      	ldr	r2, [r7, #20]
    aa1e:	3308      	adds	r3, #8
    aa20:	015b      	lsls	r3, r3, #5
    aa22:	4413      	add	r3, r2
    aa24:	460a      	mov	r2, r1
    aa26:	701a      	strb	r2, [r3, #0]
    aa28:	e010      	b.n	aa4c <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    aa2a:	79fb      	ldrb	r3, [r7, #7]
    aa2c:	79fa      	ldrb	r2, [r7, #7]
    aa2e:	6979      	ldr	r1, [r7, #20]
    aa30:	3208      	adds	r2, #8
    aa32:	0152      	lsls	r2, r2, #5
    aa34:	440a      	add	r2, r1
    aa36:	7812      	ldrb	r2, [r2, #0]
    aa38:	b2d2      	uxtb	r2, r2
    aa3a:	f022 0207 	bic.w	r2, r2, #7
    aa3e:	b2d1      	uxtb	r1, r2
    aa40:	697a      	ldr	r2, [r7, #20]
    aa42:	3308      	adds	r3, #8
    aa44:	015b      	lsls	r3, r3, #5
    aa46:	4413      	add	r3, r2
    aa48:	460a      	mov	r2, r1
    aa4a:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    aa4c:	68fb      	ldr	r3, [r7, #12]
    aa4e:	2200      	movs	r2, #0
    aa50:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    aa52:	68fb      	ldr	r3, [r7, #12]
    aa54:	22ff      	movs	r2, #255	; 0xff
    aa56:	749a      	strb	r2, [r3, #18]
    aa58:	e000      	b.n	aa5c <_usb_d_dev_ep_deinit+0xd4>
		return;
    aa5a:	bf00      	nop
}
    aa5c:	3718      	adds	r7, #24
    aa5e:	46bd      	mov	sp, r7
    aa60:	bd80      	pop	{r7, pc}
    aa62:	bf00      	nop
    aa64:	00009885 	.word	0x00009885
    aa68:	0000aebd 	.word	0x0000aebd

0000aa6c <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    aa6c:	b5b0      	push	{r4, r5, r7, lr}
    aa6e:	b088      	sub	sp, #32
    aa70:	af00      	add	r7, sp, #0
    aa72:	4603      	mov	r3, r0
    aa74:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    aa76:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aa7a:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    aa7c:	79fb      	ldrb	r3, [r7, #7]
    aa7e:	f003 030f 	and.w	r3, r3, #15
    aa82:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    aa84:	79fb      	ldrb	r3, [r7, #7]
    aa86:	f003 0380 	and.w	r3, r3, #128	; 0x80
    aa8a:	2b00      	cmp	r3, #0
    aa8c:	bf14      	ite	ne
    aa8e:	2301      	movne	r3, #1
    aa90:	2300      	moveq	r3, #0
    aa92:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    aa94:	7eba      	ldrb	r2, [r7, #26]
    aa96:	7efb      	ldrb	r3, [r7, #27]
    aa98:	4611      	mov	r1, r2
    aa9a:	4618      	mov	r0, r3
    aa9c:	4b70      	ldr	r3, [pc, #448]	; (ac60 <_usb_d_dev_ep_enable+0x1f4>)
    aa9e:	4798      	blx	r3
    aaa0:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    aaa2:	7efb      	ldrb	r3, [r7, #27]
    aaa4:	4619      	mov	r1, r3
    aaa6:	69f8      	ldr	r0, [r7, #28]
    aaa8:	4b6e      	ldr	r3, [pc, #440]	; (ac64 <_usb_d_dev_ep_enable+0x1f8>)
    aaaa:	4798      	blx	r3
    aaac:	4603      	mov	r3, r0
    aaae:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    aab0:	7efb      	ldrb	r3, [r7, #27]
    aab2:	2b04      	cmp	r3, #4
    aab4:	d803      	bhi.n	aabe <_usb_d_dev_ep_enable+0x52>
    aab6:	697b      	ldr	r3, [r7, #20]
    aab8:	7c9b      	ldrb	r3, [r3, #18]
    aaba:	2bff      	cmp	r3, #255	; 0xff
    aabc:	d102      	bne.n	aac4 <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    aabe:	f06f 0311 	mvn.w	r3, #17
    aac2:	e0c8      	b.n	ac56 <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    aac4:	7efb      	ldrb	r3, [r7, #27]
    aac6:	015b      	lsls	r3, r3, #5
    aac8:	4a67      	ldr	r2, [pc, #412]	; (ac68 <_usb_d_dev_ep_enable+0x1fc>)
    aaca:	4413      	add	r3, r2
    aacc:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    aace:	697b      	ldr	r3, [r7, #20]
    aad0:	7cdb      	ldrb	r3, [r3, #19]
    aad2:	f003 0307 	and.w	r3, r3, #7
    aad6:	b2db      	uxtb	r3, r3
    aad8:	2b01      	cmp	r3, #1
    aada:	d14b      	bne.n	ab74 <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    aadc:	7cfb      	ldrb	r3, [r7, #19]
    aade:	f003 0377 	and.w	r3, r3, #119	; 0x77
    aae2:	2b00      	cmp	r3, #0
    aae4:	d002      	beq.n	aaec <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    aae6:	f06f 0313 	mvn.w	r3, #19
    aaea:	e0b4      	b.n	ac56 <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    aaec:	7efb      	ldrb	r3, [r7, #27]
    aaee:	2211      	movs	r2, #17
    aaf0:	4619      	mov	r1, r3
    aaf2:	69f8      	ldr	r0, [r7, #28]
    aaf4:	4b5d      	ldr	r3, [pc, #372]	; (ac6c <_usb_d_dev_ep_enable+0x200>)
    aaf6:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    aaf8:	697b      	ldr	r3, [r7, #20]
    aafa:	8a1b      	ldrh	r3, [r3, #16]
    aafc:	039b      	lsls	r3, r3, #14
    aafe:	4c5c      	ldr	r4, [pc, #368]	; (ac70 <_usb_d_dev_ep_enable+0x204>)
    ab00:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ab02:	697b      	ldr	r3, [r7, #20]
    ab04:	8a1b      	ldrh	r3, [r3, #16]
    ab06:	4618      	mov	r0, r3
    ab08:	4b5a      	ldr	r3, [pc, #360]	; (ac74 <_usb_d_dev_ep_enable+0x208>)
    ab0a:	4798      	blx	r3
    ab0c:	4603      	mov	r3, r0
    ab0e:	071b      	lsls	r3, r3, #28
    ab10:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ab14:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ab18:	68fb      	ldr	r3, [r7, #12]
    ab1a:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    ab1c:	68fb      	ldr	r3, [r7, #12]
    ab1e:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ab22:	697b      	ldr	r3, [r7, #20]
    ab24:	8a1b      	ldrh	r3, [r3, #16]
    ab26:	f3c3 050d 	ubfx	r5, r3, #0, #14
    ab2a:	697b      	ldr	r3, [r7, #20]
    ab2c:	8a1b      	ldrh	r3, [r3, #16]
    ab2e:	4618      	mov	r0, r3
    ab30:	4b50      	ldr	r3, [pc, #320]	; (ac74 <_usb_d_dev_ep_enable+0x208>)
    ab32:	4798      	blx	r3
    ab34:	4603      	mov	r3, r0
    ab36:	071b      	lsls	r3, r3, #28
    ab38:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ab3c:	432b      	orrs	r3, r5
    ab3e:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ab40:	7efb      	ldrb	r3, [r7, #27]
    ab42:	2200      	movs	r2, #0
    ab44:	2100      	movs	r1, #0
    ab46:	4618      	mov	r0, r3
    ab48:	4b4b      	ldr	r3, [pc, #300]	; (ac78 <_usb_d_dev_ep_enable+0x20c>)
    ab4a:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    ab4c:	7efb      	ldrb	r3, [r7, #27]
    ab4e:	2200      	movs	r2, #0
    ab50:	2101      	movs	r1, #1
    ab52:	4618      	mov	r0, r3
    ab54:	4b49      	ldr	r3, [pc, #292]	; (ac7c <_usb_d_dev_ep_enable+0x210>)
    ab56:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    ab58:	7efb      	ldrb	r3, [r7, #27]
    ab5a:	2100      	movs	r1, #0
    ab5c:	4618      	mov	r0, r3
    ab5e:	4b48      	ldr	r3, [pc, #288]	; (ac80 <_usb_d_dev_ep_enable+0x214>)
    ab60:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    ab62:	7efb      	ldrb	r3, [r7, #27]
    ab64:	2101      	movs	r1, #1
    ab66:	4618      	mov	r0, r3
    ab68:	4b45      	ldr	r3, [pc, #276]	; (ac80 <_usb_d_dev_ep_enable+0x214>)
    ab6a:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    ab6c:	6978      	ldr	r0, [r7, #20]
    ab6e:	4b45      	ldr	r3, [pc, #276]	; (ac84 <_usb_d_dev_ep_enable+0x218>)
    ab70:	4798      	blx	r3
    ab72:	e06f      	b.n	ac54 <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    ab74:	7ebb      	ldrb	r3, [r7, #26]
    ab76:	2b00      	cmp	r3, #0
    ab78:	d038      	beq.n	abec <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    ab7a:	7cfb      	ldrb	r3, [r7, #19]
    ab7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    ab80:	2b00      	cmp	r3, #0
    ab82:	d002      	beq.n	ab8a <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    ab84:	f06f 0313 	mvn.w	r3, #19
    ab88:	e065      	b.n	ac56 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    ab8a:	697b      	ldr	r3, [r7, #20]
    ab8c:	7cdb      	ldrb	r3, [r3, #19]
    ab8e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ab92:	b2db      	uxtb	r3, r3
    ab94:	011b      	lsls	r3, r3, #4
    ab96:	b2db      	uxtb	r3, r3
    ab98:	f003 0370 	and.w	r3, r3, #112	; 0x70
    ab9c:	b2da      	uxtb	r2, r3
    ab9e:	7cfb      	ldrb	r3, [r7, #19]
    aba0:	4313      	orrs	r3, r2
    aba2:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    aba4:	7cfa      	ldrb	r2, [r7, #19]
    aba6:	7efb      	ldrb	r3, [r7, #27]
    aba8:	4619      	mov	r1, r3
    abaa:	69f8      	ldr	r0, [r7, #28]
    abac:	4b2f      	ldr	r3, [pc, #188]	; (ac6c <_usb_d_dev_ep_enable+0x200>)
    abae:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    abb0:	68fb      	ldr	r3, [r7, #12]
    abb2:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    abb6:	697b      	ldr	r3, [r7, #20]
    abb8:	8a1b      	ldrh	r3, [r3, #16]
    abba:	f3c3 050d 	ubfx	r5, r3, #0, #14
    abbe:	697b      	ldr	r3, [r7, #20]
    abc0:	8a1b      	ldrh	r3, [r3, #16]
    abc2:	4618      	mov	r0, r3
    abc4:	4b2b      	ldr	r3, [pc, #172]	; (ac74 <_usb_d_dev_ep_enable+0x208>)
    abc6:	4798      	blx	r3
    abc8:	4603      	mov	r3, r0
    abca:	071b      	lsls	r3, r3, #28
    abcc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    abd0:	432b      	orrs	r3, r5
    abd2:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    abd4:	7efb      	ldrb	r3, [r7, #27]
    abd6:	2200      	movs	r2, #0
    abd8:	2101      	movs	r1, #1
    abda:	4618      	mov	r0, r3
    abdc:	4b27      	ldr	r3, [pc, #156]	; (ac7c <_usb_d_dev_ep_enable+0x210>)
    abde:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    abe0:	7efb      	ldrb	r3, [r7, #27]
    abe2:	2101      	movs	r1, #1
    abe4:	4618      	mov	r0, r3
    abe6:	4b26      	ldr	r3, [pc, #152]	; (ac80 <_usb_d_dev_ep_enable+0x214>)
    abe8:	4798      	blx	r3
    abea:	e033      	b.n	ac54 <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    abec:	7cfb      	ldrb	r3, [r7, #19]
    abee:	f003 0307 	and.w	r3, r3, #7
    abf2:	2b00      	cmp	r3, #0
    abf4:	d002      	beq.n	abfc <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    abf6:	f06f 0313 	mvn.w	r3, #19
    abfa:	e02c      	b.n	ac56 <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    abfc:	697b      	ldr	r3, [r7, #20]
    abfe:	7cdb      	ldrb	r3, [r3, #19]
    ac00:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ac04:	b2db      	uxtb	r3, r3
    ac06:	461a      	mov	r2, r3
    ac08:	7cfb      	ldrb	r3, [r7, #19]
    ac0a:	4313      	orrs	r3, r2
    ac0c:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    ac0e:	7cfa      	ldrb	r2, [r7, #19]
    ac10:	7efb      	ldrb	r3, [r7, #27]
    ac12:	4619      	mov	r1, r3
    ac14:	69f8      	ldr	r0, [r7, #28]
    ac16:	4b15      	ldr	r3, [pc, #84]	; (ac6c <_usb_d_dev_ep_enable+0x200>)
    ac18:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ac1a:	697b      	ldr	r3, [r7, #20]
    ac1c:	8a1b      	ldrh	r3, [r3, #16]
    ac1e:	039b      	lsls	r3, r3, #14
    ac20:	4c13      	ldr	r4, [pc, #76]	; (ac70 <_usb_d_dev_ep_enable+0x204>)
    ac22:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ac24:	697b      	ldr	r3, [r7, #20]
    ac26:	8a1b      	ldrh	r3, [r3, #16]
    ac28:	4618      	mov	r0, r3
    ac2a:	4b12      	ldr	r3, [pc, #72]	; (ac74 <_usb_d_dev_ep_enable+0x208>)
    ac2c:	4798      	blx	r3
    ac2e:	4603      	mov	r3, r0
    ac30:	071b      	lsls	r3, r3, #28
    ac32:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ac36:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ac3a:	68fb      	ldr	r3, [r7, #12]
    ac3c:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    ac3e:	7efb      	ldrb	r3, [r7, #27]
    ac40:	2200      	movs	r2, #0
    ac42:	2100      	movs	r1, #0
    ac44:	4618      	mov	r0, r3
    ac46:	4b0c      	ldr	r3, [pc, #48]	; (ac78 <_usb_d_dev_ep_enable+0x20c>)
    ac48:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    ac4a:	7efb      	ldrb	r3, [r7, #27]
    ac4c:	2100      	movs	r1, #0
    ac4e:	4618      	mov	r0, r3
    ac50:	4b0b      	ldr	r3, [pc, #44]	; (ac80 <_usb_d_dev_ep_enable+0x214>)
    ac52:	4798      	blx	r3
	}

	return USB_OK;
    ac54:	2300      	movs	r3, #0
}
    ac56:	4618      	mov	r0, r3
    ac58:	3720      	adds	r7, #32
    ac5a:	46bd      	mov	sp, r7
    ac5c:	bdb0      	pop	{r4, r5, r7, pc}
    ac5e:	bf00      	nop
    ac60:	00009885 	.word	0x00009885
    ac64:	00008f0b 	.word	0x00008f0b
    ac68:	20000c5c 	.word	0x20000c5c
    ac6c:	00008ee1 	.word	0x00008ee1
    ac70:	0fffc000 	.word	0x0fffc000
    ac74:	00009821 	.word	0x00009821
    ac78:	000097c9 	.word	0x000097c9
    ac7c:	00009771 	.word	0x00009771
    ac80:	00009739 	.word	0x00009739
    ac84:	0000a7dd 	.word	0x0000a7dd

0000ac88 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    ac88:	b580      	push	{r7, lr}
    ac8a:	b084      	sub	sp, #16
    ac8c:	af00      	add	r7, sp, #0
    ac8e:	6078      	str	r0, [r7, #4]
    ac90:	460b      	mov	r3, r1
    ac92:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ac94:	687b      	ldr	r3, [r7, #4]
    ac96:	7c9b      	ldrb	r3, [r3, #18]
    ac98:	f003 030f 	and.w	r3, r3, #15
    ac9c:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    ac9e:	78fa      	ldrb	r2, [r7, #3]
    aca0:	7bfb      	ldrb	r3, [r7, #15]
    aca2:	4611      	mov	r1, r2
    aca4:	4618      	mov	r0, r3
    aca6:	4b03      	ldr	r3, [pc, #12]	; (acb4 <_usb_d_dev_ep_stall_get+0x2c>)
    aca8:	4798      	blx	r3
    acaa:	4603      	mov	r3, r0
}
    acac:	4618      	mov	r0, r3
    acae:	3710      	adds	r7, #16
    acb0:	46bd      	mov	sp, r7
    acb2:	bd80      	pop	{r7, pc}
    acb4:	00009379 	.word	0x00009379

0000acb8 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    acb8:	b580      	push	{r7, lr}
    acba:	b084      	sub	sp, #16
    acbc:	af00      	add	r7, sp, #0
    acbe:	6078      	str	r0, [r7, #4]
    acc0:	460b      	mov	r3, r1
    acc2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    acc4:	687b      	ldr	r3, [r7, #4]
    acc6:	7c9b      	ldrb	r3, [r3, #18]
    acc8:	f003 030f 	and.w	r3, r3, #15
    accc:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    acce:	78f9      	ldrb	r1, [r7, #3]
    acd0:	7bfb      	ldrb	r3, [r7, #15]
    acd2:	2201      	movs	r2, #1
    acd4:	4618      	mov	r0, r3
    acd6:	4b0a      	ldr	r3, [pc, #40]	; (ad00 <_usb_d_dev_ep_stall_set+0x48>)
    acd8:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    acda:	78fb      	ldrb	r3, [r7, #3]
    acdc:	2220      	movs	r2, #32
    acde:	409a      	lsls	r2, r3
    ace0:	7bfb      	ldrb	r3, [r7, #15]
    ace2:	4611      	mov	r1, r2
    ace4:	4618      	mov	r0, r3
    ace6:	4b07      	ldr	r3, [pc, #28]	; (ad04 <_usb_d_dev_ep_stall_set+0x4c>)
    ace8:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    acea:	687a      	ldr	r2, [r7, #4]
    acec:	7cd3      	ldrb	r3, [r2, #19]
    acee:	f043 0308 	orr.w	r3, r3, #8
    acf2:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    acf4:	2300      	movs	r3, #0
}
    acf6:	4618      	mov	r0, r3
    acf8:	3710      	adds	r7, #16
    acfa:	46bd      	mov	sp, r7
    acfc:	bd80      	pop	{r7, pc}
    acfe:	bf00      	nop
    ad00:	00009321 	.word	0x00009321
    ad04:	000092a1 	.word	0x000092a1

0000ad08 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    ad08:	b580      	push	{r7, lr}
    ad0a:	b084      	sub	sp, #16
    ad0c:	af00      	add	r7, sp, #0
    ad0e:	6078      	str	r0, [r7, #4]
    ad10:	460b      	mov	r3, r1
    ad12:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    ad14:	687b      	ldr	r3, [r7, #4]
    ad16:	7c9b      	ldrb	r3, [r3, #18]
    ad18:	f003 030f 	and.w	r3, r3, #15
    ad1c:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    ad1e:	78fa      	ldrb	r2, [r7, #3]
    ad20:	7bfb      	ldrb	r3, [r7, #15]
    ad22:	4611      	mov	r1, r2
    ad24:	4618      	mov	r0, r3
    ad26:	4b28      	ldr	r3, [pc, #160]	; (adc8 <_usb_d_dev_ep_stall_clr+0xc0>)
    ad28:	4798      	blx	r3
    ad2a:	4603      	mov	r3, r0
    ad2c:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    ad2e:	7bbb      	ldrb	r3, [r7, #14]
    ad30:	f083 0301 	eor.w	r3, r3, #1
    ad34:	b2db      	uxtb	r3, r3
    ad36:	2b00      	cmp	r3, #0
    ad38:	d001      	beq.n	ad3e <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    ad3a:	2300      	movs	r3, #0
    ad3c:	e040      	b.n	adc0 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    ad3e:	78f9      	ldrb	r1, [r7, #3]
    ad40:	7bfb      	ldrb	r3, [r7, #15]
    ad42:	2200      	movs	r2, #0
    ad44:	4618      	mov	r0, r3
    ad46:	4b21      	ldr	r3, [pc, #132]	; (adcc <_usb_d_dev_ep_stall_clr+0xc4>)
    ad48:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    ad4a:	78fb      	ldrb	r3, [r7, #3]
    ad4c:	2220      	movs	r2, #32
    ad4e:	409a      	lsls	r2, r3
    ad50:	7bfb      	ldrb	r3, [r7, #15]
    ad52:	4611      	mov	r1, r2
    ad54:	4618      	mov	r0, r3
    ad56:	4b1e      	ldr	r3, [pc, #120]	; (add0 <_usb_d_dev_ep_stall_clr+0xc8>)
    ad58:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    ad5a:	78fa      	ldrb	r2, [r7, #3]
    ad5c:	7bfb      	ldrb	r3, [r7, #15]
    ad5e:	4611      	mov	r1, r2
    ad60:	4618      	mov	r0, r3
    ad62:	4b1c      	ldr	r3, [pc, #112]	; (add4 <_usb_d_dev_ep_stall_clr+0xcc>)
    ad64:	4798      	blx	r3
    ad66:	4603      	mov	r3, r0
    ad68:	2b00      	cmp	r3, #0
    ad6a:	d00b      	beq.n	ad84 <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    ad6c:	78fa      	ldrb	r2, [r7, #3]
    ad6e:	7bfb      	ldrb	r3, [r7, #15]
    ad70:	4611      	mov	r1, r2
    ad72:	4618      	mov	r0, r3
    ad74:	4b18      	ldr	r3, [pc, #96]	; (add8 <_usb_d_dev_ep_stall_clr+0xd0>)
    ad76:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    ad78:	78f9      	ldrb	r1, [r7, #3]
    ad7a:	7bfb      	ldrb	r3, [r7, #15]
    ad7c:	2200      	movs	r2, #0
    ad7e:	4618      	mov	r0, r3
    ad80:	4b16      	ldr	r3, [pc, #88]	; (addc <_usb_d_dev_ep_stall_clr+0xd4>)
    ad82:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    ad84:	687b      	ldr	r3, [r7, #4]
    ad86:	7cdb      	ldrb	r3, [r3, #19]
    ad88:	f003 0307 	and.w	r3, r3, #7
    ad8c:	b2db      	uxtb	r3, r3
    ad8e:	2b01      	cmp	r3, #1
    ad90:	d110      	bne.n	adb4 <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    ad92:	7bfb      	ldrb	r3, [r7, #15]
    ad94:	4619      	mov	r1, r3
    ad96:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    ad9a:	4b11      	ldr	r3, [pc, #68]	; (ade0 <_usb_d_dev_ep_stall_clr+0xd8>)
    ad9c:	4798      	blx	r3
    ad9e:	4603      	mov	r3, r0
    ada0:	f003 0330 	and.w	r3, r3, #48	; 0x30
    ada4:	2b00      	cmp	r3, #0
    ada6:	d10a      	bne.n	adbe <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    ada8:	687a      	ldr	r2, [r7, #4]
    adaa:	7cd3      	ldrb	r3, [r2, #19]
    adac:	f36f 03c3 	bfc	r3, #3, #1
    adb0:	74d3      	strb	r3, [r2, #19]
    adb2:	e004      	b.n	adbe <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    adb4:	687a      	ldr	r2, [r7, #4]
    adb6:	7cd3      	ldrb	r3, [r2, #19]
    adb8:	f36f 03c3 	bfc	r3, #3, #1
    adbc:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    adbe:	2300      	movs	r3, #0
}
    adc0:	4618      	mov	r0, r3
    adc2:	3710      	adds	r7, #16
    adc4:	46bd      	mov	sp, r7
    adc6:	bd80      	pop	{r7, pc}
    adc8:	00009379 	.word	0x00009379
    adcc:	00009321 	.word	0x00009321
    add0:	000092c9 	.word	0x000092c9
    add4:	000093bd 	.word	0x000093bd
    add8:	00009401 	.word	0x00009401
    addc:	000094ed 	.word	0x000094ed
    ade0:	00008da9 	.word	0x00008da9

0000ade4 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    ade4:	b580      	push	{r7, lr}
    ade6:	b086      	sub	sp, #24
    ade8:	af00      	add	r7, sp, #0
    adea:	4603      	mov	r3, r0
    adec:	460a      	mov	r2, r1
    adee:	71fb      	strb	r3, [r7, #7]
    adf0:	4613      	mov	r3, r2
    adf2:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    adf4:	79fb      	ldrb	r3, [r7, #7]
    adf6:	f003 030f 	and.w	r3, r3, #15
    adfa:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    adfc:	79fb      	ldrb	r3, [r7, #7]
    adfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ae02:	2b00      	cmp	r3, #0
    ae04:	bf14      	ite	ne
    ae06:	2301      	movne	r3, #1
    ae08:	2300      	moveq	r3, #0
    ae0a:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ae0c:	7cba      	ldrb	r2, [r7, #18]
    ae0e:	7cfb      	ldrb	r3, [r7, #19]
    ae10:	4611      	mov	r1, r2
    ae12:	4618      	mov	r0, r3
    ae14:	4b13      	ldr	r3, [pc, #76]	; (ae64 <_usb_d_dev_ep_stall+0x80>)
    ae16:	4798      	blx	r3
    ae18:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    ae1a:	7cfb      	ldrb	r3, [r7, #19]
    ae1c:	2b04      	cmp	r3, #4
    ae1e:	d902      	bls.n	ae26 <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    ae20:	f06f 0311 	mvn.w	r3, #17
    ae24:	e01a      	b.n	ae5c <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    ae26:	79bb      	ldrb	r3, [r7, #6]
    ae28:	2b01      	cmp	r3, #1
    ae2a:	d106      	bne.n	ae3a <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    ae2c:	7cbb      	ldrb	r3, [r7, #18]
    ae2e:	4619      	mov	r1, r3
    ae30:	68f8      	ldr	r0, [r7, #12]
    ae32:	4b0d      	ldr	r3, [pc, #52]	; (ae68 <_usb_d_dev_ep_stall+0x84>)
    ae34:	4798      	blx	r3
    ae36:	6178      	str	r0, [r7, #20]
    ae38:	e00f      	b.n	ae5a <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    ae3a:	79bb      	ldrb	r3, [r7, #6]
    ae3c:	2b00      	cmp	r3, #0
    ae3e:	d106      	bne.n	ae4e <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    ae40:	7cbb      	ldrb	r3, [r7, #18]
    ae42:	4619      	mov	r1, r3
    ae44:	68f8      	ldr	r0, [r7, #12]
    ae46:	4b09      	ldr	r3, [pc, #36]	; (ae6c <_usb_d_dev_ep_stall+0x88>)
    ae48:	4798      	blx	r3
    ae4a:	6178      	str	r0, [r7, #20]
    ae4c:	e005      	b.n	ae5a <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    ae4e:	7cbb      	ldrb	r3, [r7, #18]
    ae50:	4619      	mov	r1, r3
    ae52:	68f8      	ldr	r0, [r7, #12]
    ae54:	4b06      	ldr	r3, [pc, #24]	; (ae70 <_usb_d_dev_ep_stall+0x8c>)
    ae56:	4798      	blx	r3
    ae58:	6178      	str	r0, [r7, #20]
	}
	return rc;
    ae5a:	697b      	ldr	r3, [r7, #20]
}
    ae5c:	4618      	mov	r0, r3
    ae5e:	3718      	adds	r7, #24
    ae60:	46bd      	mov	sp, r7
    ae62:	bd80      	pop	{r7, pc}
    ae64:	00009885 	.word	0x00009885
    ae68:	0000acb9 	.word	0x0000acb9
    ae6c:	0000ad09 	.word	0x0000ad09
    ae70:	0000ac89 	.word	0x0000ac89

0000ae74 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    ae74:	b580      	push	{r7, lr}
    ae76:	b082      	sub	sp, #8
    ae78:	af00      	add	r7, sp, #0
    ae7a:	6078      	str	r0, [r7, #4]
    ae7c:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    ae7e:	687b      	ldr	r3, [r7, #4]
    ae80:	7c9b      	ldrb	r3, [r3, #18]
    ae82:	2bff      	cmp	r3, #255	; 0xff
    ae84:	d014      	beq.n	aeb0 <_usb_d_dev_trans_done+0x3c>
    ae86:	687b      	ldr	r3, [r7, #4]
    ae88:	7cdb      	ldrb	r3, [r3, #19]
    ae8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ae8e:	b2db      	uxtb	r3, r3
    ae90:	2b00      	cmp	r3, #0
    ae92:	d00d      	beq.n	aeb0 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    ae94:	687a      	ldr	r2, [r7, #4]
    ae96:	7cd3      	ldrb	r3, [r2, #19]
    ae98:	f36f 1386 	bfc	r3, #6, #1
    ae9c:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    ae9e:	4b06      	ldr	r3, [pc, #24]	; (aeb8 <_usb_d_dev_trans_done+0x44>)
    aea0:	691b      	ldr	r3, [r3, #16]
    aea2:	687a      	ldr	r2, [r7, #4]
    aea4:	7c90      	ldrb	r0, [r2, #18]
    aea6:	687a      	ldr	r2, [r7, #4]
    aea8:	6892      	ldr	r2, [r2, #8]
    aeaa:	6839      	ldr	r1, [r7, #0]
    aeac:	4798      	blx	r3
    aeae:	e000      	b.n	aeb2 <_usb_d_dev_trans_done+0x3e>
		return;
    aeb0:	bf00      	nop
}
    aeb2:	3708      	adds	r7, #8
    aeb4:	46bd      	mov	sp, r7
    aeb6:	bd80      	pop	{r7, pc}
    aeb8:	20000b94 	.word	0x20000b94

0000aebc <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    aebc:	b580      	push	{r7, lr}
    aebe:	b086      	sub	sp, #24
    aec0:	af00      	add	r7, sp, #0
    aec2:	60f8      	str	r0, [r7, #12]
    aec4:	460b      	mov	r3, r1
    aec6:	607a      	str	r2, [r7, #4]
    aec8:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    aeca:	68fb      	ldr	r3, [r7, #12]
    aecc:	7c9b      	ldrb	r3, [r3, #18]
    aece:	f003 030f 	and.w	r3, r3, #15
    aed2:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    aed4:	4b1f      	ldr	r3, [pc, #124]	; (af54 <_usb_d_dev_trans_stop+0x98>)
    aed6:	881b      	ldrh	r3, [r3, #0]
    aed8:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    aeda:	68fb      	ldr	r3, [r7, #12]
    aedc:	7c9b      	ldrb	r3, [r3, #18]
    aede:	2bff      	cmp	r3, #255	; 0xff
    aee0:	d033      	beq.n	af4a <_usb_d_dev_trans_stop+0x8e>
    aee2:	68fb      	ldr	r3, [r7, #12]
    aee4:	7cdb      	ldrb	r3, [r3, #19]
    aee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    aeea:	b2db      	uxtb	r3, r3
    aeec:	2b00      	cmp	r3, #0
    aeee:	d02c      	beq.n	af4a <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    aef0:	7afb      	ldrb	r3, [r7, #11]
    aef2:	2b00      	cmp	r3, #0
    aef4:	d006      	beq.n	af04 <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    aef6:	7dfb      	ldrb	r3, [r7, #23]
    aef8:	2200      	movs	r2, #0
    aefa:	2101      	movs	r1, #1
    aefc:	4618      	mov	r0, r3
    aefe:	4b16      	ldr	r3, [pc, #88]	; (af58 <_usb_d_dev_trans_stop+0x9c>)
    af00:	4798      	blx	r3
    af02:	e005      	b.n	af10 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    af04:	7dfb      	ldrb	r3, [r7, #23]
    af06:	2200      	movs	r2, #0
    af08:	2100      	movs	r1, #0
    af0a:	4618      	mov	r0, r3
    af0c:	4b13      	ldr	r3, [pc, #76]	; (af5c <_usb_d_dev_trans_stop+0xa0>)
    af0e:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    af10:	7afb      	ldrb	r3, [r7, #11]
    af12:	f107 0218 	add.w	r2, r7, #24
    af16:	4413      	add	r3, r2
    af18:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    af1c:	461a      	mov	r2, r3
    af1e:	7dfb      	ldrb	r3, [r7, #23]
    af20:	4611      	mov	r1, r2
    af22:	4618      	mov	r0, r3
    af24:	4b0e      	ldr	r3, [pc, #56]	; (af60 <_usb_d_dev_trans_stop+0xa4>)
    af26:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    af28:	7afb      	ldrb	r3, [r7, #11]
    af2a:	f107 0218 	add.w	r2, r7, #24
    af2e:	4413      	add	r3, r2
    af30:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    af34:	461a      	mov	r2, r3
    af36:	7dfb      	ldrb	r3, [r7, #23]
    af38:	4611      	mov	r1, r2
    af3a:	4618      	mov	r0, r3
    af3c:	4b09      	ldr	r3, [pc, #36]	; (af64 <_usb_d_dev_trans_stop+0xa8>)
    af3e:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    af40:	6879      	ldr	r1, [r7, #4]
    af42:	68f8      	ldr	r0, [r7, #12]
    af44:	4b08      	ldr	r3, [pc, #32]	; (af68 <_usb_d_dev_trans_stop+0xac>)
    af46:	4798      	blx	r3
    af48:	e000      	b.n	af4c <_usb_d_dev_trans_stop+0x90>
		return;
    af4a:	bf00      	nop
}
    af4c:	3718      	adds	r7, #24
    af4e:	46bd      	mov	sp, r7
    af50:	bd80      	pop	{r7, pc}
    af52:	bf00      	nop
    af54:	00013774 	.word	0x00013774
    af58:	00009771 	.word	0x00009771
    af5c:	000097c9 	.word	0x000097c9
    af60:	00009279 	.word	0x00009279
    af64:	000092c9 	.word	0x000092c9
    af68:	0000ae75 	.word	0x0000ae75

0000af6c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    af6c:	b580      	push	{r7, lr}
    af6e:	b086      	sub	sp, #24
    af70:	af00      	add	r7, sp, #0
    af72:	4603      	mov	r3, r0
    af74:	6039      	str	r1, [r7, #0]
    af76:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    af78:	79fb      	ldrb	r3, [r7, #7]
    af7a:	f003 030f 	and.w	r3, r3, #15
    af7e:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    af80:	7dfb      	ldrb	r3, [r7, #23]
    af82:	015b      	lsls	r3, r3, #5
    af84:	4a1e      	ldr	r2, [pc, #120]	; (b000 <_usb_d_dev_ep_read_req+0x94>)
    af86:	4413      	add	r3, r2
    af88:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    af8a:	693b      	ldr	r3, [r7, #16]
    af8c:	681b      	ldr	r3, [r3, #0]
    af8e:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    af90:	693b      	ldr	r3, [r7, #16]
    af92:	685b      	ldr	r3, [r3, #4]
    af94:	f3c3 030d 	ubfx	r3, r3, #0, #14
    af98:	b29b      	uxth	r3, r3
    af9a:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    af9c:	7dfb      	ldrb	r3, [r7, #23]
    af9e:	2b04      	cmp	r3, #4
    afa0:	d802      	bhi.n	afa8 <_usb_d_dev_ep_read_req+0x3c>
    afa2:	683b      	ldr	r3, [r7, #0]
    afa4:	2b00      	cmp	r3, #0
    afa6:	d102      	bne.n	afae <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    afa8:	f06f 0311 	mvn.w	r3, #17
    afac:	e023      	b.n	aff6 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    afae:	7dfb      	ldrb	r3, [r7, #23]
    afb0:	4618      	mov	r0, r3
    afb2:	4b14      	ldr	r3, [pc, #80]	; (b004 <_usb_d_dev_ep_read_req+0x98>)
    afb4:	4798      	blx	r3
    afb6:	4603      	mov	r3, r0
    afb8:	f083 0301 	eor.w	r3, r3, #1
    afbc:	b2db      	uxtb	r3, r3
    afbe:	2b00      	cmp	r3, #0
    afc0:	d002      	beq.n	afc8 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    afc2:	f06f 0312 	mvn.w	r3, #18
    afc6:	e016      	b.n	aff6 <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    afc8:	7dfb      	ldrb	r3, [r7, #23]
    afca:	4618      	mov	r0, r3
    afcc:	4b0e      	ldr	r3, [pc, #56]	; (b008 <_usb_d_dev_ep_read_req+0x9c>)
    afce:	4798      	blx	r3
    afd0:	4603      	mov	r3, r0
    afd2:	f083 0301 	eor.w	r3, r3, #1
    afd6:	b2db      	uxtb	r3, r3
    afd8:	2b00      	cmp	r3, #0
    afda:	d001      	beq.n	afe0 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    afdc:	2300      	movs	r3, #0
    afde:	e00a      	b.n	aff6 <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    afe0:	68fb      	ldr	r3, [r7, #12]
    afe2:	2208      	movs	r2, #8
    afe4:	4619      	mov	r1, r3
    afe6:	6838      	ldr	r0, [r7, #0]
    afe8:	4b08      	ldr	r3, [pc, #32]	; (b00c <_usb_d_dev_ep_read_req+0xa0>)
    afea:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    afec:	7dfb      	ldrb	r3, [r7, #23]
    afee:	4618      	mov	r0, r3
    aff0:	4b07      	ldr	r3, [pc, #28]	; (b010 <_usb_d_dev_ep_read_req+0xa4>)
    aff2:	4798      	blx	r3

	return bytes;
    aff4:	897b      	ldrh	r3, [r7, #10]
}
    aff6:	4618      	mov	r0, r3
    aff8:	3718      	adds	r7, #24
    affa:	46bd      	mov	sp, r7
    affc:	bd80      	pop	{r7, pc}
    affe:	bf00      	nop
    b000:	20000c5c 	.word	0x20000c5c
    b004:	000092f1 	.word	0x000092f1
    b008:	0000949d 	.word	0x0000949d
    b00c:	00012fc1 	.word	0x00012fc1
    b010:	000094cd 	.word	0x000094cd

0000b014 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    b014:	b580      	push	{r7, lr}
    b016:	b086      	sub	sp, #24
    b018:	af00      	add	r7, sp, #0
    b01a:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    b01c:	687b      	ldr	r3, [r7, #4]
    b01e:	7a1b      	ldrb	r3, [r3, #8]
    b020:	f003 030f 	and.w	r3, r3, #15
    b024:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    b026:	687b      	ldr	r3, [r7, #4]
    b028:	7a1b      	ldrb	r3, [r3, #8]
    b02a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b02e:	2b00      	cmp	r3, #0
    b030:	bf14      	ite	ne
    b032:	2301      	movne	r3, #1
    b034:	2300      	moveq	r3, #0
    b036:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b038:	7d7a      	ldrb	r2, [r7, #21]
    b03a:	7dbb      	ldrb	r3, [r7, #22]
    b03c:	4611      	mov	r1, r2
    b03e:	4618      	mov	r0, r3
    b040:	4b5f      	ldr	r3, [pc, #380]	; (b1c0 <_usb_d_dev_ep_trans+0x1ac>)
    b042:	4798      	blx	r3
    b044:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b046:	693b      	ldr	r3, [r7, #16]
    b048:	8a1b      	ldrh	r3, [r3, #16]
    b04a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b04e:	4293      	cmp	r3, r2
    b050:	d004      	beq.n	b05c <_usb_d_dev_ep_trans+0x48>
    b052:	693b      	ldr	r3, [r7, #16]
    b054:	8a1b      	ldrh	r3, [r3, #16]
    b056:	3b01      	subs	r3, #1
    b058:	b29b      	uxth	r3, r3
    b05a:	e001      	b.n	b060 <_usb_d_dev_ep_trans+0x4c>
    b05c:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b060:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    b062:	687b      	ldr	r3, [r7, #4]
    b064:	685a      	ldr	r2, [r3, #4]
    b066:	89fb      	ldrh	r3, [r7, #14]
    b068:	4013      	ands	r3, r2
    b06a:	2b00      	cmp	r3, #0
    b06c:	bf14      	ite	ne
    b06e:	2301      	movne	r3, #1
    b070:	2300      	moveq	r3, #0
    b072:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    b074:	2300      	movs	r3, #0
    b076:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b078:	7dbb      	ldrb	r3, [r7, #22]
    b07a:	2b04      	cmp	r3, #4
    b07c:	d902      	bls.n	b084 <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    b07e:	f06f 0311 	mvn.w	r3, #17
    b082:	e098      	b.n	b1b6 <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    b084:	687b      	ldr	r3, [r7, #4]
    b086:	681b      	ldr	r3, [r3, #0]
    b088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b08c:	d31a      	bcc.n	b0c4 <_usb_d_dev_ep_trans+0xb0>
    b08e:	687b      	ldr	r3, [r7, #4]
    b090:	681b      	ldr	r3, [r3, #0]
    b092:	461a      	mov	r2, r3
    b094:	687b      	ldr	r3, [r7, #4]
    b096:	685b      	ldr	r3, [r3, #4]
    b098:	4413      	add	r3, r2
    b09a:	4a4a      	ldr	r2, [pc, #296]	; (b1c4 <_usb_d_dev_ep_trans+0x1b0>)
    b09c:	4293      	cmp	r3, r2
    b09e:	d811      	bhi.n	b0c4 <_usb_d_dev_ep_trans+0xb0>
    b0a0:	687b      	ldr	r3, [r7, #4]
    b0a2:	681b      	ldr	r3, [r3, #0]
    b0a4:	f003 0303 	and.w	r3, r3, #3
    b0a8:	2b00      	cmp	r3, #0
    b0aa:	d10b      	bne.n	b0c4 <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    b0ac:	7d7b      	ldrb	r3, [r7, #21]
    b0ae:	f083 0301 	eor.w	r3, r3, #1
    b0b2:	b2db      	uxtb	r3, r3
    b0b4:	2b00      	cmp	r3, #0
    b0b6:	d00e      	beq.n	b0d6 <_usb_d_dev_ep_trans+0xc2>
    b0b8:	687b      	ldr	r3, [r7, #4]
    b0ba:	685b      	ldr	r3, [r3, #4]
    b0bc:	693a      	ldr	r2, [r7, #16]
    b0be:	8a12      	ldrh	r2, [r2, #16]
    b0c0:	4293      	cmp	r3, r2
    b0c2:	d208      	bcs.n	b0d6 <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    b0c4:	693b      	ldr	r3, [r7, #16]
    b0c6:	68db      	ldr	r3, [r3, #12]
    b0c8:	2b00      	cmp	r3, #0
    b0ca:	d102      	bne.n	b0d2 <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    b0cc:	f06f 0312 	mvn.w	r3, #18
    b0d0:	e071      	b.n	b1b6 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    b0d2:	2301      	movs	r3, #1
    b0d4:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    b0d6:	7d7b      	ldrb	r3, [r7, #21]
    b0d8:	f083 0301 	eor.w	r3, r3, #1
    b0dc:	b2db      	uxtb	r3, r3
    b0de:	2b00      	cmp	r3, #0
    b0e0:	d009      	beq.n	b0f6 <_usb_d_dev_ep_trans+0xe2>
    b0e2:	7b7b      	ldrb	r3, [r7, #13]
    b0e4:	2b00      	cmp	r3, #0
    b0e6:	d006      	beq.n	b0f6 <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    b0e8:	693b      	ldr	r3, [r7, #16]
    b0ea:	68db      	ldr	r3, [r3, #12]
    b0ec:	2b00      	cmp	r3, #0
    b0ee:	d102      	bne.n	b0f6 <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    b0f0:	f06f 0311 	mvn.w	r3, #17
    b0f4:	e05f      	b.n	b1b6 <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    b0f6:	693b      	ldr	r3, [r7, #16]
    b0f8:	7cdb      	ldrb	r3, [r3, #19]
    b0fa:	f003 0308 	and.w	r3, r3, #8
    b0fe:	b2db      	uxtb	r3, r3
    b100:	2b00      	cmp	r3, #0
    b102:	d001      	beq.n	b108 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    b104:	2302      	movs	r3, #2
    b106:	e056      	b.n	b1b6 <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    b108:	f107 0308 	add.w	r3, r7, #8
    b10c:	4618      	mov	r0, r3
    b10e:	4b2e      	ldr	r3, [pc, #184]	; (b1c8 <_usb_d_dev_ep_trans+0x1b4>)
    b110:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    b112:	693b      	ldr	r3, [r7, #16]
    b114:	7cdb      	ldrb	r3, [r3, #19]
    b116:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b11a:	b2db      	uxtb	r3, r3
    b11c:	2b00      	cmp	r3, #0
    b11e:	d006      	beq.n	b12e <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    b120:	f107 0308 	add.w	r3, r7, #8
    b124:	4618      	mov	r0, r3
    b126:	4b29      	ldr	r3, [pc, #164]	; (b1cc <_usb_d_dev_ep_trans+0x1b8>)
    b128:	4798      	blx	r3
		return USB_BUSY;
    b12a:	2301      	movs	r3, #1
    b12c:	e043      	b.n	b1b6 <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    b12e:	693a      	ldr	r2, [r7, #16]
    b130:	7cd3      	ldrb	r3, [r2, #19]
    b132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b136:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    b138:	f107 0308 	add.w	r3, r7, #8
    b13c:	4618      	mov	r0, r3
    b13e:	4b23      	ldr	r3, [pc, #140]	; (b1cc <_usb_d_dev_ep_trans+0x1b8>)
    b140:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    b142:	687b      	ldr	r3, [r7, #4]
    b144:	681a      	ldr	r2, [r3, #0]
    b146:	693b      	ldr	r3, [r7, #16]
    b148:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    b14a:	687b      	ldr	r3, [r7, #4]
    b14c:	685a      	ldr	r2, [r3, #4]
    b14e:	693b      	ldr	r3, [r7, #16]
    b150:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    b152:	693b      	ldr	r3, [r7, #16]
    b154:	2200      	movs	r2, #0
    b156:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    b158:	693a      	ldr	r2, [r7, #16]
    b15a:	7cd3      	ldrb	r3, [r2, #19]
    b15c:	7d79      	ldrb	r1, [r7, #21]
    b15e:	f361 13c7 	bfi	r3, r1, #7, #1
    b162:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    b164:	693a      	ldr	r2, [r7, #16]
    b166:	7cd3      	ldrb	r3, [r2, #19]
    b168:	7df9      	ldrb	r1, [r7, #23]
    b16a:	f361 1345 	bfi	r3, r1, #5, #1
    b16e:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    b170:	687b      	ldr	r3, [r7, #4]
    b172:	7a5b      	ldrb	r3, [r3, #9]
    b174:	2b00      	cmp	r3, #0
    b176:	d007      	beq.n	b188 <_usb_d_dev_ep_trans+0x174>
    b178:	7b7b      	ldrb	r3, [r7, #13]
    b17a:	f083 0301 	eor.w	r3, r3, #1
    b17e:	b2db      	uxtb	r3, r3
    b180:	2b00      	cmp	r3, #0
    b182:	d001      	beq.n	b188 <_usb_d_dev_ep_trans+0x174>
    b184:	2301      	movs	r3, #1
    b186:	e000      	b.n	b18a <_usb_d_dev_ep_trans+0x176>
    b188:	2300      	movs	r3, #0
    b18a:	b2db      	uxtb	r3, r3
    b18c:	f003 0301 	and.w	r3, r3, #1
    b190:	b2d9      	uxtb	r1, r3
    b192:	693a      	ldr	r2, [r7, #16]
    b194:	7cd3      	ldrb	r3, [r2, #19]
    b196:	f361 1304 	bfi	r3, r1, #4, #1
    b19a:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    b19c:	7d7b      	ldrb	r3, [r7, #21]
    b19e:	2b00      	cmp	r3, #0
    b1a0:	d004      	beq.n	b1ac <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    b1a2:	2100      	movs	r1, #0
    b1a4:	6938      	ldr	r0, [r7, #16]
    b1a6:	4b0a      	ldr	r3, [pc, #40]	; (b1d0 <_usb_d_dev_ep_trans+0x1bc>)
    b1a8:	4798      	blx	r3
    b1aa:	e003      	b.n	b1b4 <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    b1ac:	2100      	movs	r1, #0
    b1ae:	6938      	ldr	r0, [r7, #16]
    b1b0:	4b08      	ldr	r3, [pc, #32]	; (b1d4 <_usb_d_dev_ep_trans+0x1c0>)
    b1b2:	4798      	blx	r3
	}

	return ERR_NONE;
    b1b4:	2300      	movs	r3, #0
}
    b1b6:	4618      	mov	r0, r3
    b1b8:	3718      	adds	r7, #24
    b1ba:	46bd      	mov	sp, r7
    b1bc:	bd80      	pop	{r7, pc}
    b1be:	bf00      	nop
    b1c0:	00009885 	.word	0x00009885
    b1c4:	20041fff 	.word	0x20041fff
    b1c8:	0000b9e1 	.word	0x0000b9e1
    b1cc:	0000ba07 	.word	0x0000ba07
    b1d0:	00009b4d 	.word	0x00009b4d
    b1d4:	00009d65 	.word	0x00009d65

0000b1d8 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    b1d8:	b580      	push	{r7, lr}
    b1da:	b084      	sub	sp, #16
    b1dc:	af00      	add	r7, sp, #0
    b1de:	4603      	mov	r3, r0
    b1e0:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    b1e2:	79fb      	ldrb	r3, [r7, #7]
    b1e4:	f003 030f 	and.w	r3, r3, #15
    b1e8:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    b1ea:	79fb      	ldrb	r3, [r7, #7]
    b1ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b1f0:	2b00      	cmp	r3, #0
    b1f2:	bf14      	ite	ne
    b1f4:	2301      	movne	r3, #1
    b1f6:	2300      	moveq	r3, #0
    b1f8:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b1fa:	7bba      	ldrb	r2, [r7, #14]
    b1fc:	7bfb      	ldrb	r3, [r7, #15]
    b1fe:	4611      	mov	r1, r2
    b200:	4618      	mov	r0, r3
    b202:	4b08      	ldr	r3, [pc, #32]	; (b224 <_usb_d_dev_ep_abort+0x4c>)
    b204:	4798      	blx	r3
    b206:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    b208:	7bfb      	ldrb	r3, [r7, #15]
    b20a:	2b04      	cmp	r3, #4
    b20c:	d806      	bhi.n	b21c <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    b20e:	7bbb      	ldrb	r3, [r7, #14]
    b210:	2202      	movs	r2, #2
    b212:	4619      	mov	r1, r3
    b214:	68b8      	ldr	r0, [r7, #8]
    b216:	4b04      	ldr	r3, [pc, #16]	; (b228 <_usb_d_dev_ep_abort+0x50>)
    b218:	4798      	blx	r3
    b21a:	e000      	b.n	b21e <_usb_d_dev_ep_abort+0x46>
		return;
    b21c:	bf00      	nop
}
    b21e:	3710      	adds	r7, #16
    b220:	46bd      	mov	sp, r7
    b222:	bd80      	pop	{r7, pc}
    b224:	00009885 	.word	0x00009885
    b228:	0000aebd 	.word	0x0000aebd

0000b22c <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    b22c:	b480      	push	{r7}
    b22e:	b085      	sub	sp, #20
    b230:	af00      	add	r7, sp, #0
    b232:	4603      	mov	r3, r0
    b234:	6039      	str	r1, [r7, #0]
    b236:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b238:	683b      	ldr	r3, [r7, #0]
    b23a:	2b00      	cmp	r3, #0
    b23c:	d001      	beq.n	b242 <_usb_d_dev_register_callback+0x16>
    b23e:	683b      	ldr	r3, [r7, #0]
    b240:	e000      	b.n	b244 <_usb_d_dev_register_callback+0x18>
    b242:	4b0a      	ldr	r3, [pc, #40]	; (b26c <_usb_d_dev_register_callback+0x40>)
    b244:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    b246:	79fb      	ldrb	r3, [r7, #7]
    b248:	2b01      	cmp	r3, #1
    b24a:	d103      	bne.n	b254 <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    b24c:	4a08      	ldr	r2, [pc, #32]	; (b270 <_usb_d_dev_register_callback+0x44>)
    b24e:	68fb      	ldr	r3, [r7, #12]
    b250:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    b252:	e005      	b.n	b260 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    b254:	79fb      	ldrb	r3, [r7, #7]
    b256:	2b00      	cmp	r3, #0
    b258:	d102      	bne.n	b260 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    b25a:	4a05      	ldr	r2, [pc, #20]	; (b270 <_usb_d_dev_register_callback+0x44>)
    b25c:	68fb      	ldr	r3, [r7, #12]
    b25e:	6013      	str	r3, [r2, #0]
}
    b260:	bf00      	nop
    b262:	3714      	adds	r7, #20
    b264:	46bd      	mov	sp, r7
    b266:	f85d 7b04 	ldr.w	r7, [sp], #4
    b26a:	4770      	bx	lr
    b26c:	0000910d 	.word	0x0000910d
    b270:	20000b94 	.word	0x20000b94

0000b274 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    b274:	b480      	push	{r7}
    b276:	b085      	sub	sp, #20
    b278:	af00      	add	r7, sp, #0
    b27a:	4603      	mov	r3, r0
    b27c:	6039      	str	r1, [r7, #0]
    b27e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b280:	683b      	ldr	r3, [r7, #0]
    b282:	2b00      	cmp	r3, #0
    b284:	d001      	beq.n	b28a <_usb_d_dev_register_ep_callback+0x16>
    b286:	683b      	ldr	r3, [r7, #0]
    b288:	e000      	b.n	b28c <_usb_d_dev_register_ep_callback+0x18>
    b28a:	4b0e      	ldr	r3, [pc, #56]	; (b2c4 <_usb_d_dev_register_ep_callback+0x50>)
    b28c:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    b28e:	79fb      	ldrb	r3, [r7, #7]
    b290:	2b00      	cmp	r3, #0
    b292:	d103      	bne.n	b29c <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    b294:	4a0c      	ldr	r2, [pc, #48]	; (b2c8 <_usb_d_dev_register_ep_callback+0x54>)
    b296:	68fb      	ldr	r3, [r7, #12]
    b298:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    b29a:	e00c      	b.n	b2b6 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    b29c:	79fb      	ldrb	r3, [r7, #7]
    b29e:	2b01      	cmp	r3, #1
    b2a0:	d103      	bne.n	b2aa <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    b2a2:	4a09      	ldr	r2, [pc, #36]	; (b2c8 <_usb_d_dev_register_ep_callback+0x54>)
    b2a4:	68fb      	ldr	r3, [r7, #12]
    b2a6:	60d3      	str	r3, [r2, #12]
}
    b2a8:	e005      	b.n	b2b6 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    b2aa:	79fb      	ldrb	r3, [r7, #7]
    b2ac:	2b02      	cmp	r3, #2
    b2ae:	d102      	bne.n	b2b6 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    b2b0:	4a05      	ldr	r2, [pc, #20]	; (b2c8 <_usb_d_dev_register_ep_callback+0x54>)
    b2b2:	68fb      	ldr	r3, [r7, #12]
    b2b4:	6113      	str	r3, [r2, #16]
}
    b2b6:	bf00      	nop
    b2b8:	3714      	adds	r7, #20
    b2ba:	46bd      	mov	sp, r7
    b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2c0:	4770      	bx	lr
    b2c2:	bf00      	nop
    b2c4:	0000910d 	.word	0x0000910d
    b2c8:	20000b94 	.word	0x20000b94

0000b2cc <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    b2cc:	b580      	push	{r7, lr}
    b2ce:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b2d0:	4b01      	ldr	r3, [pc, #4]	; (b2d8 <USB_0_Handler+0xc>)
    b2d2:	4798      	blx	r3
}
    b2d4:	bf00      	nop
    b2d6:	bd80      	pop	{r7, pc}
    b2d8:	0000a53d 	.word	0x0000a53d

0000b2dc <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    b2dc:	b580      	push	{r7, lr}
    b2de:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b2e0:	4b01      	ldr	r3, [pc, #4]	; (b2e8 <USB_1_Handler+0xc>)
    b2e2:	4798      	blx	r3
}
    b2e4:	bf00      	nop
    b2e6:	bd80      	pop	{r7, pc}
    b2e8:	0000a53d 	.word	0x0000a53d

0000b2ec <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    b2ec:	b580      	push	{r7, lr}
    b2ee:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b2f0:	4b01      	ldr	r3, [pc, #4]	; (b2f8 <USB_2_Handler+0xc>)
    b2f2:	4798      	blx	r3
}
    b2f4:	bf00      	nop
    b2f6:	bd80      	pop	{r7, pc}
    b2f8:	0000a53d 	.word	0x0000a53d

0000b2fc <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    b2fc:	b580      	push	{r7, lr}
    b2fe:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b300:	4b01      	ldr	r3, [pc, #4]	; (b308 <USB_3_Handler+0xc>)
    b302:	4798      	blx	r3
}
    b304:	bf00      	nop
    b306:	bd80      	pop	{r7, pc}
    b308:	0000a53d 	.word	0x0000a53d

0000b30c <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    b30c:	b480      	push	{r7}
    b30e:	b083      	sub	sp, #12
    b310:	af00      	add	r7, sp, #0
    b312:	6078      	str	r0, [r7, #4]
    b314:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b316:	bf00      	nop
    b318:	687b      	ldr	r3, [r7, #4]
    b31a:	689a      	ldr	r2, [r3, #8]
    b31c:	683b      	ldr	r3, [r7, #0]
    b31e:	4013      	ands	r3, r2
    b320:	2b00      	cmp	r3, #0
    b322:	d1f9      	bne.n	b318 <hri_wdt_wait_for_sync+0xc>
	};
}
    b324:	bf00      	nop
    b326:	370c      	adds	r7, #12
    b328:	46bd      	mov	sp, r7
    b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b32e:	4770      	bx	lr

0000b330 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b330:	b580      	push	{r7, lr}
    b332:	b084      	sub	sp, #16
    b334:	af00      	add	r7, sp, #0
    b336:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b338:	210e      	movs	r1, #14
    b33a:	6878      	ldr	r0, [r7, #4]
    b33c:	4b0a      	ldr	r3, [pc, #40]	; (b368 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    b33e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b340:	687b      	ldr	r3, [r7, #4]
    b342:	781b      	ldrb	r3, [r3, #0]
    b344:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    b346:	7bfb      	ldrb	r3, [r7, #15]
    b348:	085b      	lsrs	r3, r3, #1
    b34a:	b2db      	uxtb	r3, r3
    b34c:	f003 0301 	and.w	r3, r3, #1
    b350:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b352:	7bfb      	ldrb	r3, [r7, #15]
    b354:	2b00      	cmp	r3, #0
    b356:	bf14      	ite	ne
    b358:	2301      	movne	r3, #1
    b35a:	2300      	moveq	r3, #0
    b35c:	b2db      	uxtb	r3, r3
}
    b35e:	4618      	mov	r0, r3
    b360:	3710      	adds	r7, #16
    b362:	46bd      	mov	sp, r7
    b364:	bd80      	pop	{r7, pc}
    b366:	bf00      	nop
    b368:	0000b30d 	.word	0x0000b30d

0000b36c <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    b36c:	b580      	push	{r7, lr}
    b36e:	b082      	sub	sp, #8
    b370:	af00      	add	r7, sp, #0
    b372:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b374:	687b      	ldr	r3, [r7, #4]
    b376:	781b      	ldrb	r3, [r3, #0]
    b378:	b2db      	uxtb	r3, r3
    b37a:	f023 0304 	bic.w	r3, r3, #4
    b37e:	b2da      	uxtb	r2, r3
    b380:	687b      	ldr	r3, [r7, #4]
    b382:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b384:	210e      	movs	r1, #14
    b386:	6878      	ldr	r0, [r7, #4]
    b388:	4b02      	ldr	r3, [pc, #8]	; (b394 <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    b38a:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    b38c:	bf00      	nop
    b38e:	3708      	adds	r7, #8
    b390:	46bd      	mov	sp, r7
    b392:	bd80      	pop	{r7, pc}
    b394:	0000b30d 	.word	0x0000b30d

0000b398 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    b398:	b580      	push	{r7, lr}
    b39a:	b084      	sub	sp, #16
    b39c:	af00      	add	r7, sp, #0
    b39e:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b3a0:	210e      	movs	r1, #14
    b3a2:	6878      	ldr	r0, [r7, #4]
    b3a4:	4b08      	ldr	r3, [pc, #32]	; (b3c8 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    b3a6:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b3a8:	687b      	ldr	r3, [r7, #4]
    b3aa:	781b      	ldrb	r3, [r3, #0]
    b3ac:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    b3ae:	7bfb      	ldrb	r3, [r7, #15]
    b3b0:	09db      	lsrs	r3, r3, #7
    b3b2:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b3b4:	7bfb      	ldrb	r3, [r7, #15]
    b3b6:	2b00      	cmp	r3, #0
    b3b8:	bf14      	ite	ne
    b3ba:	2301      	movne	r3, #1
    b3bc:	2300      	moveq	r3, #0
    b3be:	b2db      	uxtb	r3, r3
}
    b3c0:	4618      	mov	r0, r3
    b3c2:	3710      	adds	r7, #16
    b3c4:	46bd      	mov	sp, r7
    b3c6:	bd80      	pop	{r7, pc}
    b3c8:	0000b30d 	.word	0x0000b30d

0000b3cc <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    b3cc:	b480      	push	{r7}
    b3ce:	b085      	sub	sp, #20
    b3d0:	af00      	add	r7, sp, #0
    b3d2:	6078      	str	r0, [r7, #4]
    b3d4:	460b      	mov	r3, r1
    b3d6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b3d8:	687b      	ldr	r3, [r7, #4]
    b3da:	785b      	ldrb	r3, [r3, #1]
    b3dc:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b3de:	7bfb      	ldrb	r3, [r7, #15]
    b3e0:	f023 030f 	bic.w	r3, r3, #15
    b3e4:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    b3e6:	78fb      	ldrb	r3, [r7, #3]
    b3e8:	f003 030f 	and.w	r3, r3, #15
    b3ec:	b2da      	uxtb	r2, r3
    b3ee:	7bfb      	ldrb	r3, [r7, #15]
    b3f0:	4313      	orrs	r3, r2
    b3f2:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    b3f4:	687b      	ldr	r3, [r7, #4]
    b3f6:	7bfa      	ldrb	r2, [r7, #15]
    b3f8:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    b3fa:	bf00      	nop
    b3fc:	3714      	adds	r7, #20
    b3fe:	46bd      	mov	sp, r7
    b400:	f85d 7b04 	ldr.w	r7, [sp], #4
    b404:	4770      	bx	lr
	...

0000b408 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    b408:	b580      	push	{r7, lr}
    b40a:	b082      	sub	sp, #8
    b40c:	af00      	add	r7, sp, #0
    b40e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    b410:	687b      	ldr	r3, [r7, #4]
    b412:	2b00      	cmp	r3, #0
    b414:	d005      	beq.n	b422 <_wdt_init+0x1a>
    b416:	687b      	ldr	r3, [r7, #4]
    b418:	681b      	ldr	r3, [r3, #0]
    b41a:	2b00      	cmp	r3, #0
    b41c:	d001      	beq.n	b422 <_wdt_init+0x1a>
    b41e:	2301      	movs	r3, #1
    b420:	e000      	b.n	b424 <_wdt_init+0x1c>
    b422:	2300      	movs	r3, #0
    b424:	f003 0301 	and.w	r3, r3, #1
    b428:	b2db      	uxtb	r3, r3
    b42a:	2250      	movs	r2, #80	; 0x50
    b42c:	4913      	ldr	r1, [pc, #76]	; (b47c <_wdt_init+0x74>)
    b42e:	4618      	mov	r0, r3
    b430:	4b13      	ldr	r3, [pc, #76]	; (b480 <_wdt_init+0x78>)
    b432:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    b434:	687b      	ldr	r3, [r7, #4]
    b436:	681b      	ldr	r3, [r3, #0]
    b438:	4618      	mov	r0, r3
    b43a:	4b12      	ldr	r3, [pc, #72]	; (b484 <_wdt_init+0x7c>)
    b43c:	4798      	blx	r3
    b43e:	4603      	mov	r3, r0
    b440:	2b00      	cmp	r3, #0
    b442:	d107      	bne.n	b454 <_wdt_init+0x4c>
    b444:	687b      	ldr	r3, [r7, #4]
    b446:	681b      	ldr	r3, [r3, #0]
    b448:	4618      	mov	r0, r3
    b44a:	4b0f      	ldr	r3, [pc, #60]	; (b488 <_wdt_init+0x80>)
    b44c:	4798      	blx	r3
    b44e:	4603      	mov	r3, r0
    b450:	2b00      	cmp	r3, #0
    b452:	d002      	beq.n	b45a <_wdt_init+0x52>
		return ERR_DENIED;
    b454:	f06f 0310 	mvn.w	r3, #16
    b458:	e00b      	b.n	b472 <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    b45a:	687b      	ldr	r3, [r7, #4]
    b45c:	681b      	ldr	r3, [r3, #0]
    b45e:	4618      	mov	r0, r3
    b460:	4b0a      	ldr	r3, [pc, #40]	; (b48c <_wdt_init+0x84>)
    b462:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    b464:	687b      	ldr	r3, [r7, #4]
    b466:	681b      	ldr	r3, [r3, #0]
    b468:	210b      	movs	r1, #11
    b46a:	4618      	mov	r0, r3
    b46c:	4b08      	ldr	r3, [pc, #32]	; (b490 <_wdt_init+0x88>)
    b46e:	4798      	blx	r3
	}

	return ERR_NONE;
    b470:	2300      	movs	r3, #0
}
    b472:	4618      	mov	r0, r3
    b474:	3708      	adds	r7, #8
    b476:	46bd      	mov	sp, r7
    b478:	bd80      	pop	{r7, pc}
    b47a:	bf00      	nop
    b47c:	00013778 	.word	0x00013778
    b480:	00003e05 	.word	0x00003e05
    b484:	0000b399 	.word	0x0000b399
    b488:	0000b331 	.word	0x0000b331
    b48c:	0000b36d 	.word	0x0000b36d
    b490:	0000b3cd 	.word	0x0000b3cd

0000b494 <hri_port_set_DIR_reg>:
{
    b494:	b480      	push	{r7}
    b496:	b085      	sub	sp, #20
    b498:	af00      	add	r7, sp, #0
    b49a:	60f8      	str	r0, [r7, #12]
    b49c:	460b      	mov	r3, r1
    b49e:	607a      	str	r2, [r7, #4]
    b4a0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    b4a2:	7afb      	ldrb	r3, [r7, #11]
    b4a4:	68fa      	ldr	r2, [r7, #12]
    b4a6:	01db      	lsls	r3, r3, #7
    b4a8:	4413      	add	r3, r2
    b4aa:	3308      	adds	r3, #8
    b4ac:	687a      	ldr	r2, [r7, #4]
    b4ae:	601a      	str	r2, [r3, #0]
}
    b4b0:	bf00      	nop
    b4b2:	3714      	adds	r7, #20
    b4b4:	46bd      	mov	sp, r7
    b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4ba:	4770      	bx	lr

0000b4bc <hri_port_clear_DIR_reg>:
{
    b4bc:	b480      	push	{r7}
    b4be:	b085      	sub	sp, #20
    b4c0:	af00      	add	r7, sp, #0
    b4c2:	60f8      	str	r0, [r7, #12]
    b4c4:	460b      	mov	r3, r1
    b4c6:	607a      	str	r2, [r7, #4]
    b4c8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    b4ca:	7afb      	ldrb	r3, [r7, #11]
    b4cc:	68fa      	ldr	r2, [r7, #12]
    b4ce:	01db      	lsls	r3, r3, #7
    b4d0:	4413      	add	r3, r2
    b4d2:	3304      	adds	r3, #4
    b4d4:	687a      	ldr	r2, [r7, #4]
    b4d6:	601a      	str	r2, [r3, #0]
}
    b4d8:	bf00      	nop
    b4da:	3714      	adds	r7, #20
    b4dc:	46bd      	mov	sp, r7
    b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4e2:	4770      	bx	lr

0000b4e4 <hri_port_set_OUT_reg>:
{
    b4e4:	b480      	push	{r7}
    b4e6:	b085      	sub	sp, #20
    b4e8:	af00      	add	r7, sp, #0
    b4ea:	60f8      	str	r0, [r7, #12]
    b4ec:	460b      	mov	r3, r1
    b4ee:	607a      	str	r2, [r7, #4]
    b4f0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b4f2:	7afb      	ldrb	r3, [r7, #11]
    b4f4:	68fa      	ldr	r2, [r7, #12]
    b4f6:	01db      	lsls	r3, r3, #7
    b4f8:	4413      	add	r3, r2
    b4fa:	3318      	adds	r3, #24
    b4fc:	687a      	ldr	r2, [r7, #4]
    b4fe:	601a      	str	r2, [r3, #0]
}
    b500:	bf00      	nop
    b502:	3714      	adds	r7, #20
    b504:	46bd      	mov	sp, r7
    b506:	f85d 7b04 	ldr.w	r7, [sp], #4
    b50a:	4770      	bx	lr

0000b50c <hri_port_clear_OUT_reg>:
{
    b50c:	b480      	push	{r7}
    b50e:	b085      	sub	sp, #20
    b510:	af00      	add	r7, sp, #0
    b512:	60f8      	str	r0, [r7, #12]
    b514:	460b      	mov	r3, r1
    b516:	607a      	str	r2, [r7, #4]
    b518:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b51a:	7afb      	ldrb	r3, [r7, #11]
    b51c:	68fa      	ldr	r2, [r7, #12]
    b51e:	01db      	lsls	r3, r3, #7
    b520:	4413      	add	r3, r2
    b522:	3314      	adds	r3, #20
    b524:	687a      	ldr	r2, [r7, #4]
    b526:	601a      	str	r2, [r3, #0]
}
    b528:	bf00      	nop
    b52a:	3714      	adds	r7, #20
    b52c:	46bd      	mov	sp, r7
    b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b532:	4770      	bx	lr

0000b534 <hri_port_write_PMUX_PMUXE_bf>:
{
    b534:	b480      	push	{r7}
    b536:	b085      	sub	sp, #20
    b538:	af00      	add	r7, sp, #0
    b53a:	6078      	str	r0, [r7, #4]
    b53c:	4608      	mov	r0, r1
    b53e:	4611      	mov	r1, r2
    b540:	461a      	mov	r2, r3
    b542:	4603      	mov	r3, r0
    b544:	70fb      	strb	r3, [r7, #3]
    b546:	460b      	mov	r3, r1
    b548:	70bb      	strb	r3, [r7, #2]
    b54a:	4613      	mov	r3, r2
    b54c:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b54e:	78fa      	ldrb	r2, [r7, #3]
    b550:	78bb      	ldrb	r3, [r7, #2]
    b552:	6879      	ldr	r1, [r7, #4]
    b554:	01d2      	lsls	r2, r2, #7
    b556:	440a      	add	r2, r1
    b558:	4413      	add	r3, r2
    b55a:	3330      	adds	r3, #48	; 0x30
    b55c:	781b      	ldrb	r3, [r3, #0]
    b55e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    b560:	7bfb      	ldrb	r3, [r7, #15]
    b562:	f023 030f 	bic.w	r3, r3, #15
    b566:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    b568:	787b      	ldrb	r3, [r7, #1]
    b56a:	f003 030f 	and.w	r3, r3, #15
    b56e:	b2da      	uxtb	r2, r3
    b570:	7bfb      	ldrb	r3, [r7, #15]
    b572:	4313      	orrs	r3, r2
    b574:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b576:	78fa      	ldrb	r2, [r7, #3]
    b578:	78bb      	ldrb	r3, [r7, #2]
    b57a:	6879      	ldr	r1, [r7, #4]
    b57c:	01d2      	lsls	r2, r2, #7
    b57e:	440a      	add	r2, r1
    b580:	4413      	add	r3, r2
    b582:	3330      	adds	r3, #48	; 0x30
    b584:	7bfa      	ldrb	r2, [r7, #15]
    b586:	701a      	strb	r2, [r3, #0]
}
    b588:	bf00      	nop
    b58a:	3714      	adds	r7, #20
    b58c:	46bd      	mov	sp, r7
    b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b592:	4770      	bx	lr

0000b594 <hri_port_write_PMUX_PMUXO_bf>:
{
    b594:	b480      	push	{r7}
    b596:	b085      	sub	sp, #20
    b598:	af00      	add	r7, sp, #0
    b59a:	6078      	str	r0, [r7, #4]
    b59c:	4608      	mov	r0, r1
    b59e:	4611      	mov	r1, r2
    b5a0:	461a      	mov	r2, r3
    b5a2:	4603      	mov	r3, r0
    b5a4:	70fb      	strb	r3, [r7, #3]
    b5a6:	460b      	mov	r3, r1
    b5a8:	70bb      	strb	r3, [r7, #2]
    b5aa:	4613      	mov	r3, r2
    b5ac:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b5ae:	78fa      	ldrb	r2, [r7, #3]
    b5b0:	78bb      	ldrb	r3, [r7, #2]
    b5b2:	6879      	ldr	r1, [r7, #4]
    b5b4:	01d2      	lsls	r2, r2, #7
    b5b6:	440a      	add	r2, r1
    b5b8:	4413      	add	r3, r2
    b5ba:	3330      	adds	r3, #48	; 0x30
    b5bc:	781b      	ldrb	r3, [r3, #0]
    b5be:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    b5c0:	7bfb      	ldrb	r3, [r7, #15]
    b5c2:	f003 030f 	and.w	r3, r3, #15
    b5c6:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    b5c8:	787b      	ldrb	r3, [r7, #1]
    b5ca:	011b      	lsls	r3, r3, #4
    b5cc:	b2da      	uxtb	r2, r3
    b5ce:	7bfb      	ldrb	r3, [r7, #15]
    b5d0:	4313      	orrs	r3, r2
    b5d2:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b5d4:	78fa      	ldrb	r2, [r7, #3]
    b5d6:	78bb      	ldrb	r3, [r7, #2]
    b5d8:	6879      	ldr	r1, [r7, #4]
    b5da:	01d2      	lsls	r2, r2, #7
    b5dc:	440a      	add	r2, r1
    b5de:	4413      	add	r3, r2
    b5e0:	3330      	adds	r3, #48	; 0x30
    b5e2:	7bfa      	ldrb	r2, [r7, #15]
    b5e4:	701a      	strb	r2, [r3, #0]
}
    b5e6:	bf00      	nop
    b5e8:	3714      	adds	r7, #20
    b5ea:	46bd      	mov	sp, r7
    b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5f0:	4770      	bx	lr

0000b5f2 <hri_port_write_PINCFG_PMUXEN_bit>:
{
    b5f2:	b480      	push	{r7}
    b5f4:	b085      	sub	sp, #20
    b5f6:	af00      	add	r7, sp, #0
    b5f8:	6078      	str	r0, [r7, #4]
    b5fa:	4608      	mov	r0, r1
    b5fc:	4611      	mov	r1, r2
    b5fe:	461a      	mov	r2, r3
    b600:	4603      	mov	r3, r0
    b602:	70fb      	strb	r3, [r7, #3]
    b604:	460b      	mov	r3, r1
    b606:	70bb      	strb	r3, [r7, #2]
    b608:	4613      	mov	r3, r2
    b60a:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    b60c:	78fa      	ldrb	r2, [r7, #3]
    b60e:	78bb      	ldrb	r3, [r7, #2]
    b610:	6879      	ldr	r1, [r7, #4]
    b612:	01d2      	lsls	r2, r2, #7
    b614:	440a      	add	r2, r1
    b616:	4413      	add	r3, r2
    b618:	3340      	adds	r3, #64	; 0x40
    b61a:	781b      	ldrb	r3, [r3, #0]
    b61c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    b61e:	7bfb      	ldrb	r3, [r7, #15]
    b620:	f023 0301 	bic.w	r3, r3, #1
    b624:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    b626:	787a      	ldrb	r2, [r7, #1]
    b628:	7bfb      	ldrb	r3, [r7, #15]
    b62a:	4313      	orrs	r3, r2
    b62c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    b62e:	78fa      	ldrb	r2, [r7, #3]
    b630:	78bb      	ldrb	r3, [r7, #2]
    b632:	6879      	ldr	r1, [r7, #4]
    b634:	01d2      	lsls	r2, r2, #7
    b636:	440a      	add	r2, r1
    b638:	4413      	add	r3, r2
    b63a:	3340      	adds	r3, #64	; 0x40
    b63c:	7bfa      	ldrb	r2, [r7, #15]
    b63e:	701a      	strb	r2, [r3, #0]
}
    b640:	bf00      	nop
    b642:	3714      	adds	r7, #20
    b644:	46bd      	mov	sp, r7
    b646:	f85d 7b04 	ldr.w	r7, [sp], #4
    b64a:	4770      	bx	lr

0000b64c <hri_port_write_WRCONFIG_reg>:
{
    b64c:	b480      	push	{r7}
    b64e:	b085      	sub	sp, #20
    b650:	af00      	add	r7, sp, #0
    b652:	60f8      	str	r0, [r7, #12]
    b654:	460b      	mov	r3, r1
    b656:	607a      	str	r2, [r7, #4]
    b658:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    b65a:	7afb      	ldrb	r3, [r7, #11]
    b65c:	68fa      	ldr	r2, [r7, #12]
    b65e:	01db      	lsls	r3, r3, #7
    b660:	4413      	add	r3, r2
    b662:	3328      	adds	r3, #40	; 0x28
    b664:	687a      	ldr	r2, [r7, #4]
    b666:	601a      	str	r2, [r3, #0]
}
    b668:	bf00      	nop
    b66a:	3714      	adds	r7, #20
    b66c:	46bd      	mov	sp, r7
    b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b672:	4770      	bx	lr

0000b674 <_gpio_set_direction>:
{
    b674:	b580      	push	{r7, lr}
    b676:	b082      	sub	sp, #8
    b678:	af00      	add	r7, sp, #0
    b67a:	4603      	mov	r3, r0
    b67c:	6039      	str	r1, [r7, #0]
    b67e:	71fb      	strb	r3, [r7, #7]
    b680:	4613      	mov	r3, r2
    b682:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    b684:	79bb      	ldrb	r3, [r7, #6]
    b686:	2b01      	cmp	r3, #1
    b688:	d01c      	beq.n	b6c4 <_gpio_set_direction+0x50>
    b68a:	2b02      	cmp	r3, #2
    b68c:	d037      	beq.n	b6fe <_gpio_set_direction+0x8a>
    b68e:	2b00      	cmp	r3, #0
    b690:	d14e      	bne.n	b730 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b692:	79fb      	ldrb	r3, [r7, #7]
    b694:	683a      	ldr	r2, [r7, #0]
    b696:	4619      	mov	r1, r3
    b698:	482a      	ldr	r0, [pc, #168]	; (b744 <_gpio_set_direction+0xd0>)
    b69a:	4b2b      	ldr	r3, [pc, #172]	; (b748 <_gpio_set_direction+0xd4>)
    b69c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b69e:	683b      	ldr	r3, [r7, #0]
    b6a0:	b29b      	uxth	r3, r3
    b6a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b6a6:	79fb      	ldrb	r3, [r7, #7]
    b6a8:	4619      	mov	r1, r3
    b6aa:	4826      	ldr	r0, [pc, #152]	; (b744 <_gpio_set_direction+0xd0>)
    b6ac:	4b27      	ldr	r3, [pc, #156]	; (b74c <_gpio_set_direction+0xd8>)
    b6ae:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b6b0:	683b      	ldr	r3, [r7, #0]
    b6b2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b6b4:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b6b8:	79fb      	ldrb	r3, [r7, #7]
    b6ba:	4619      	mov	r1, r3
    b6bc:	4821      	ldr	r0, [pc, #132]	; (b744 <_gpio_set_direction+0xd0>)
    b6be:	4b23      	ldr	r3, [pc, #140]	; (b74c <_gpio_set_direction+0xd8>)
    b6c0:	4798      	blx	r3
		break;
    b6c2:	e03a      	b.n	b73a <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b6c4:	79fb      	ldrb	r3, [r7, #7]
    b6c6:	683a      	ldr	r2, [r7, #0]
    b6c8:	4619      	mov	r1, r3
    b6ca:	481e      	ldr	r0, [pc, #120]	; (b744 <_gpio_set_direction+0xd0>)
    b6cc:	4b1e      	ldr	r3, [pc, #120]	; (b748 <_gpio_set_direction+0xd4>)
    b6ce:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    b6d0:	683b      	ldr	r3, [r7, #0]
    b6d2:	b29b      	uxth	r3, r3
    b6d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b6d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b6dc:	79f9      	ldrb	r1, [r7, #7]
    b6de:	461a      	mov	r2, r3
    b6e0:	4818      	ldr	r0, [pc, #96]	; (b744 <_gpio_set_direction+0xd0>)
    b6e2:	4b1a      	ldr	r3, [pc, #104]	; (b74c <_gpio_set_direction+0xd8>)
    b6e4:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    b6e6:	683b      	ldr	r3, [r7, #0]
    b6e8:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    b6ea:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    b6ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b6f2:	79f9      	ldrb	r1, [r7, #7]
    b6f4:	461a      	mov	r2, r3
    b6f6:	4813      	ldr	r0, [pc, #76]	; (b744 <_gpio_set_direction+0xd0>)
    b6f8:	4b14      	ldr	r3, [pc, #80]	; (b74c <_gpio_set_direction+0xd8>)
    b6fa:	4798      	blx	r3
		break;
    b6fc:	e01d      	b.n	b73a <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    b6fe:	79fb      	ldrb	r3, [r7, #7]
    b700:	683a      	ldr	r2, [r7, #0]
    b702:	4619      	mov	r1, r3
    b704:	480f      	ldr	r0, [pc, #60]	; (b744 <_gpio_set_direction+0xd0>)
    b706:	4b12      	ldr	r3, [pc, #72]	; (b750 <_gpio_set_direction+0xdc>)
    b708:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b70a:	683b      	ldr	r3, [r7, #0]
    b70c:	b29b      	uxth	r3, r3
    b70e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b712:	79fb      	ldrb	r3, [r7, #7]
    b714:	4619      	mov	r1, r3
    b716:	480b      	ldr	r0, [pc, #44]	; (b744 <_gpio_set_direction+0xd0>)
    b718:	4b0c      	ldr	r3, [pc, #48]	; (b74c <_gpio_set_direction+0xd8>)
    b71a:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b71c:	683b      	ldr	r3, [r7, #0]
    b71e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b720:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b724:	79fb      	ldrb	r3, [r7, #7]
    b726:	4619      	mov	r1, r3
    b728:	4806      	ldr	r0, [pc, #24]	; (b744 <_gpio_set_direction+0xd0>)
    b72a:	4b08      	ldr	r3, [pc, #32]	; (b74c <_gpio_set_direction+0xd8>)
    b72c:	4798      	blx	r3
		break;
    b72e:	e004      	b.n	b73a <_gpio_set_direction+0xc6>
		ASSERT(false);
    b730:	2246      	movs	r2, #70	; 0x46
    b732:	4908      	ldr	r1, [pc, #32]	; (b754 <_gpio_set_direction+0xe0>)
    b734:	2000      	movs	r0, #0
    b736:	4b08      	ldr	r3, [pc, #32]	; (b758 <_gpio_set_direction+0xe4>)
    b738:	4798      	blx	r3
}
    b73a:	bf00      	nop
    b73c:	3708      	adds	r7, #8
    b73e:	46bd      	mov	sp, r7
    b740:	bd80      	pop	{r7, pc}
    b742:	bf00      	nop
    b744:	41008000 	.word	0x41008000
    b748:	0000b4bd 	.word	0x0000b4bd
    b74c:	0000b64d 	.word	0x0000b64d
    b750:	0000b495 	.word	0x0000b495
    b754:	00013790 	.word	0x00013790
    b758:	00003e05 	.word	0x00003e05

0000b75c <_gpio_set_level>:
{
    b75c:	b580      	push	{r7, lr}
    b75e:	b082      	sub	sp, #8
    b760:	af00      	add	r7, sp, #0
    b762:	4603      	mov	r3, r0
    b764:	6039      	str	r1, [r7, #0]
    b766:	71fb      	strb	r3, [r7, #7]
    b768:	4613      	mov	r3, r2
    b76a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    b76c:	79bb      	ldrb	r3, [r7, #6]
    b76e:	2b00      	cmp	r3, #0
    b770:	d006      	beq.n	b780 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    b772:	79fb      	ldrb	r3, [r7, #7]
    b774:	683a      	ldr	r2, [r7, #0]
    b776:	4619      	mov	r1, r3
    b778:	4806      	ldr	r0, [pc, #24]	; (b794 <_gpio_set_level+0x38>)
    b77a:	4b07      	ldr	r3, [pc, #28]	; (b798 <_gpio_set_level+0x3c>)
    b77c:	4798      	blx	r3
}
    b77e:	e005      	b.n	b78c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    b780:	79fb      	ldrb	r3, [r7, #7]
    b782:	683a      	ldr	r2, [r7, #0]
    b784:	4619      	mov	r1, r3
    b786:	4803      	ldr	r0, [pc, #12]	; (b794 <_gpio_set_level+0x38>)
    b788:	4b04      	ldr	r3, [pc, #16]	; (b79c <_gpio_set_level+0x40>)
    b78a:	4798      	blx	r3
}
    b78c:	bf00      	nop
    b78e:	3708      	adds	r7, #8
    b790:	46bd      	mov	sp, r7
    b792:	bd80      	pop	{r7, pc}
    b794:	41008000 	.word	0x41008000
    b798:	0000b4e5 	.word	0x0000b4e5
    b79c:	0000b50d 	.word	0x0000b50d

0000b7a0 <_gpio_set_pin_function>:
{
    b7a0:	b590      	push	{r4, r7, lr}
    b7a2:	b085      	sub	sp, #20
    b7a4:	af00      	add	r7, sp, #0
    b7a6:	6078      	str	r0, [r7, #4]
    b7a8:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    b7aa:	687b      	ldr	r3, [r7, #4]
    b7ac:	095b      	lsrs	r3, r3, #5
    b7ae:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    b7b0:	687b      	ldr	r3, [r7, #4]
    b7b2:	b2db      	uxtb	r3, r3
    b7b4:	f003 031f 	and.w	r3, r3, #31
    b7b8:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    b7ba:	683b      	ldr	r3, [r7, #0]
    b7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    b7c0:	d106      	bne.n	b7d0 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    b7c2:	7bba      	ldrb	r2, [r7, #14]
    b7c4:	7bf9      	ldrb	r1, [r7, #15]
    b7c6:	2300      	movs	r3, #0
    b7c8:	4812      	ldr	r0, [pc, #72]	; (b814 <_gpio_set_pin_function+0x74>)
    b7ca:	4c13      	ldr	r4, [pc, #76]	; (b818 <_gpio_set_pin_function+0x78>)
    b7cc:	47a0      	blx	r4
}
    b7ce:	e01d      	b.n	b80c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    b7d0:	7bba      	ldrb	r2, [r7, #14]
    b7d2:	7bf9      	ldrb	r1, [r7, #15]
    b7d4:	2301      	movs	r3, #1
    b7d6:	480f      	ldr	r0, [pc, #60]	; (b814 <_gpio_set_pin_function+0x74>)
    b7d8:	4c0f      	ldr	r4, [pc, #60]	; (b818 <_gpio_set_pin_function+0x78>)
    b7da:	47a0      	blx	r4
		if (pin & 1) {
    b7dc:	7bbb      	ldrb	r3, [r7, #14]
    b7de:	f003 0301 	and.w	r3, r3, #1
    b7e2:	2b00      	cmp	r3, #0
    b7e4:	d009      	beq.n	b7fa <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    b7e6:	7bbb      	ldrb	r3, [r7, #14]
    b7e8:	085b      	lsrs	r3, r3, #1
    b7ea:	b2da      	uxtb	r2, r3
    b7ec:	683b      	ldr	r3, [r7, #0]
    b7ee:	b2db      	uxtb	r3, r3
    b7f0:	7bf9      	ldrb	r1, [r7, #15]
    b7f2:	4808      	ldr	r0, [pc, #32]	; (b814 <_gpio_set_pin_function+0x74>)
    b7f4:	4c09      	ldr	r4, [pc, #36]	; (b81c <_gpio_set_pin_function+0x7c>)
    b7f6:	47a0      	blx	r4
}
    b7f8:	e008      	b.n	b80c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    b7fa:	7bbb      	ldrb	r3, [r7, #14]
    b7fc:	085b      	lsrs	r3, r3, #1
    b7fe:	b2da      	uxtb	r2, r3
    b800:	683b      	ldr	r3, [r7, #0]
    b802:	b2db      	uxtb	r3, r3
    b804:	7bf9      	ldrb	r1, [r7, #15]
    b806:	4803      	ldr	r0, [pc, #12]	; (b814 <_gpio_set_pin_function+0x74>)
    b808:	4c05      	ldr	r4, [pc, #20]	; (b820 <_gpio_set_pin_function+0x80>)
    b80a:	47a0      	blx	r4
}
    b80c:	bf00      	nop
    b80e:	3714      	adds	r7, #20
    b810:	46bd      	mov	sp, r7
    b812:	bd90      	pop	{r4, r7, pc}
    b814:	41008000 	.word	0x41008000
    b818:	0000b5f3 	.word	0x0000b5f3
    b81c:	0000b595 	.word	0x0000b595
    b820:	0000b535 	.word	0x0000b535

0000b824 <gpio_set_pin_function>:
{
    b824:	b580      	push	{r7, lr}
    b826:	b082      	sub	sp, #8
    b828:	af00      	add	r7, sp, #0
    b82a:	6078      	str	r0, [r7, #4]
    b82c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    b82e:	6839      	ldr	r1, [r7, #0]
    b830:	6878      	ldr	r0, [r7, #4]
    b832:	4b03      	ldr	r3, [pc, #12]	; (b840 <gpio_set_pin_function+0x1c>)
    b834:	4798      	blx	r3
}
    b836:	bf00      	nop
    b838:	3708      	adds	r7, #8
    b83a:	46bd      	mov	sp, r7
    b83c:	bd80      	pop	{r7, pc}
    b83e:	bf00      	nop
    b840:	0000b7a1 	.word	0x0000b7a1

0000b844 <gpio_set_pin_direction>:
{
    b844:	b580      	push	{r7, lr}
    b846:	b082      	sub	sp, #8
    b848:	af00      	add	r7, sp, #0
    b84a:	4603      	mov	r3, r0
    b84c:	460a      	mov	r2, r1
    b84e:	71fb      	strb	r3, [r7, #7]
    b850:	4613      	mov	r3, r2
    b852:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    b854:	79fb      	ldrb	r3, [r7, #7]
    b856:	095b      	lsrs	r3, r3, #5
    b858:	b2d8      	uxtb	r0, r3
    b85a:	79fb      	ldrb	r3, [r7, #7]
    b85c:	f003 031f 	and.w	r3, r3, #31
    b860:	2201      	movs	r2, #1
    b862:	fa02 f303 	lsl.w	r3, r2, r3
    b866:	79ba      	ldrb	r2, [r7, #6]
    b868:	4619      	mov	r1, r3
    b86a:	4b03      	ldr	r3, [pc, #12]	; (b878 <gpio_set_pin_direction+0x34>)
    b86c:	4798      	blx	r3
}
    b86e:	bf00      	nop
    b870:	3708      	adds	r7, #8
    b872:	46bd      	mov	sp, r7
    b874:	bd80      	pop	{r7, pc}
    b876:	bf00      	nop
    b878:	0000b675 	.word	0x0000b675

0000b87c <gpio_set_pin_level>:
{
    b87c:	b580      	push	{r7, lr}
    b87e:	b082      	sub	sp, #8
    b880:	af00      	add	r7, sp, #0
    b882:	4603      	mov	r3, r0
    b884:	460a      	mov	r2, r1
    b886:	71fb      	strb	r3, [r7, #7]
    b888:	4613      	mov	r3, r2
    b88a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    b88c:	79fb      	ldrb	r3, [r7, #7]
    b88e:	095b      	lsrs	r3, r3, #5
    b890:	b2d8      	uxtb	r0, r3
    b892:	79fb      	ldrb	r3, [r7, #7]
    b894:	f003 031f 	and.w	r3, r3, #31
    b898:	2201      	movs	r2, #1
    b89a:	fa02 f303 	lsl.w	r3, r2, r3
    b89e:	79ba      	ldrb	r2, [r7, #6]
    b8a0:	4619      	mov	r1, r3
    b8a2:	4b03      	ldr	r3, [pc, #12]	; (b8b0 <gpio_set_pin_level+0x34>)
    b8a4:	4798      	blx	r3
}
    b8a6:	bf00      	nop
    b8a8:	3708      	adds	r7, #8
    b8aa:	46bd      	mov	sp, r7
    b8ac:	bd80      	pop	{r7, pc}
    b8ae:	bf00      	nop
    b8b0:	0000b75d 	.word	0x0000b75d

0000b8b4 <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    b8b4:	b580      	push	{r7, lr}
    b8b6:	b082      	sub	sp, #8
    b8b8:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    b8ba:	2100      	movs	r1, #0
    b8bc:	2008      	movs	r0, #8
    b8be:	4b24      	ldr	r3, [pc, #144]	; (b950 <QSPI_N25Q256_exit_xip+0x9c>)
    b8c0:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    b8c2:	2100      	movs	r1, #0
    b8c4:	202b      	movs	r0, #43	; 0x2b
    b8c6:	4b22      	ldr	r3, [pc, #136]	; (b950 <QSPI_N25Q256_exit_xip+0x9c>)
    b8c8:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    b8ca:	2100      	movs	r1, #0
    b8cc:	202a      	movs	r0, #42	; 0x2a
    b8ce:	4b20      	ldr	r3, [pc, #128]	; (b950 <QSPI_N25Q256_exit_xip+0x9c>)
    b8d0:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    b8d2:	2102      	movs	r1, #2
    b8d4:	2008      	movs	r0, #8
    b8d6:	4b1f      	ldr	r3, [pc, #124]	; (b954 <QSPI_N25Q256_exit_xip+0xa0>)
    b8d8:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    b8da:	2102      	movs	r1, #2
    b8dc:	202b      	movs	r0, #43	; 0x2b
    b8de:	4b1d      	ldr	r3, [pc, #116]	; (b954 <QSPI_N25Q256_exit_xip+0xa0>)
    b8e0:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    b8e2:	2102      	movs	r1, #2
    b8e4:	202a      	movs	r0, #42	; 0x2a
    b8e6:	4b1b      	ldr	r3, [pc, #108]	; (b954 <QSPI_N25Q256_exit_xip+0xa0>)
    b8e8:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    b8ea:	2101      	movs	r1, #1
    b8ec:	2008      	movs	r0, #8
    b8ee:	4b1a      	ldr	r3, [pc, #104]	; (b958 <QSPI_N25Q256_exit_xip+0xa4>)
    b8f0:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    b8f2:	2100      	movs	r1, #0
    b8f4:	202b      	movs	r0, #43	; 0x2b
    b8f6:	4b18      	ldr	r3, [pc, #96]	; (b958 <QSPI_N25Q256_exit_xip+0xa4>)
    b8f8:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    b8fa:	2100      	movs	r1, #0
    b8fc:	202a      	movs	r0, #42	; 0x2a
    b8fe:	4b16      	ldr	r3, [pc, #88]	; (b958 <QSPI_N25Q256_exit_xip+0xa4>)
    b900:	4798      	blx	r3

	delay_us(1);
    b902:	2001      	movs	r0, #1
    b904:	4b15      	ldr	r3, [pc, #84]	; (b95c <QSPI_N25Q256_exit_xip+0xa8>)
    b906:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    b908:	2300      	movs	r3, #0
    b90a:	607b      	str	r3, [r7, #4]
    b90c:	e010      	b.n	b930 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    b90e:	2101      	movs	r1, #1
    b910:	202a      	movs	r0, #42	; 0x2a
    b912:	4b11      	ldr	r3, [pc, #68]	; (b958 <QSPI_N25Q256_exit_xip+0xa4>)
    b914:	4798      	blx	r3
		delay_us(1);
    b916:	2001      	movs	r0, #1
    b918:	4b10      	ldr	r3, [pc, #64]	; (b95c <QSPI_N25Q256_exit_xip+0xa8>)
    b91a:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    b91c:	2100      	movs	r1, #0
    b91e:	202a      	movs	r0, #42	; 0x2a
    b920:	4b0d      	ldr	r3, [pc, #52]	; (b958 <QSPI_N25Q256_exit_xip+0xa4>)
    b922:	4798      	blx	r3
		delay_us(1);
    b924:	2001      	movs	r0, #1
    b926:	4b0d      	ldr	r3, [pc, #52]	; (b95c <QSPI_N25Q256_exit_xip+0xa8>)
    b928:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    b92a:	687b      	ldr	r3, [r7, #4]
    b92c:	3301      	adds	r3, #1
    b92e:	607b      	str	r3, [r7, #4]
    b930:	687b      	ldr	r3, [r7, #4]
    b932:	2b06      	cmp	r3, #6
    b934:	ddeb      	ble.n	b90e <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    b936:	2101      	movs	r1, #1
    b938:	202b      	movs	r0, #43	; 0x2b
    b93a:	4b07      	ldr	r3, [pc, #28]	; (b958 <QSPI_N25Q256_exit_xip+0xa4>)
    b93c:	4798      	blx	r3
	delay_us(1);
    b93e:	2001      	movs	r0, #1
    b940:	4b06      	ldr	r3, [pc, #24]	; (b95c <QSPI_N25Q256_exit_xip+0xa8>)
    b942:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    b944:	4b06      	ldr	r3, [pc, #24]	; (b960 <QSPI_N25Q256_exit_xip+0xac>)
    b946:	4798      	blx	r3
}
    b948:	bf00      	nop
    b94a:	3708      	adds	r7, #8
    b94c:	46bd      	mov	sp, r7
    b94e:	bd80      	pop	{r7, pc}
    b950:	0000b825 	.word	0x0000b825
    b954:	0000b845 	.word	0x0000b845
    b958:	0000b87d 	.word	0x0000b87d
    b95c:	00002795 	.word	0x00002795
    b960:	00001b51 	.word	0x00001b51

0000b964 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    b964:	b598      	push	{r3, r4, r7, lr}
    b966:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    b968:	4806      	ldr	r0, [pc, #24]	; (b984 <spi_nor_flash_init+0x20>)
    b96a:	4b07      	ldr	r3, [pc, #28]	; (b988 <spi_nor_flash_init+0x24>)
    b96c:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    b96e:	2300      	movs	r3, #0
    b970:	4a06      	ldr	r2, [pc, #24]	; (b98c <spi_nor_flash_init+0x28>)
    b972:	4904      	ldr	r1, [pc, #16]	; (b984 <spi_nor_flash_init+0x20>)
    b974:	4806      	ldr	r0, [pc, #24]	; (b990 <spi_nor_flash_init+0x2c>)
    b976:	4c07      	ldr	r4, [pc, #28]	; (b994 <spi_nor_flash_init+0x30>)
    b978:	47a0      	blx	r4
    b97a:	4602      	mov	r2, r0
    b97c:	4b06      	ldr	r3, [pc, #24]	; (b998 <spi_nor_flash_init+0x34>)
    b97e:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    b980:	bf00      	nop
    b982:	bd98      	pop	{r3, r4, r7, pc}
    b984:	20007e4c 	.word	0x20007e4c
    b988:	00002cad 	.word	0x00002cad
    b98c:	0000b8b5 	.word	0x0000b8b5
    b990:	20000cfc 	.word	0x20000cfc
    b994:	0000bdd1 	.word	0x0000bdd1
    b998:	2000802c 	.word	0x2000802c

0000b99c <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    b99c:	b580      	push	{r7, lr}
    b99e:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b9a0:	4805      	ldr	r0, [pc, #20]	; (b9b8 <cdc_device_acm_init+0x1c>)
    b9a2:	4b06      	ldr	r3, [pc, #24]	; (b9bc <cdc_device_acm_init+0x20>)
    b9a4:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    b9a6:	4b06      	ldr	r3, [pc, #24]	; (b9c0 <cdc_device_acm_init+0x24>)
    b9a8:	4798      	blx	r3

	usbdc_start(single_desc);
    b9aa:	4806      	ldr	r0, [pc, #24]	; (b9c4 <cdc_device_acm_init+0x28>)
    b9ac:	4b06      	ldr	r3, [pc, #24]	; (b9c8 <cdc_device_acm_init+0x2c>)
    b9ae:	4798      	blx	r3
	usbdc_attach();
    b9b0:	4b06      	ldr	r3, [pc, #24]	; (b9cc <cdc_device_acm_init+0x30>)
    b9b2:	4798      	blx	r3
}
    b9b4:	bf00      	nop
    b9b6:	bd80      	pop	{r7, pc}
    b9b8:	20000d4c 	.word	0x20000d4c
    b9bc:	0000d4f9 	.word	0x0000d4f9
    b9c0:	0000c771 	.word	0x0000c771
    b9c4:	200001d0 	.word	0x200001d0
    b9c8:	0000d595 	.word	0x0000d595
    b9cc:	0000d5e5 	.word	0x0000d5e5

0000b9d0 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    b9d0:	b580      	push	{r7, lr}
    b9d2:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    b9d4:	4b01      	ldr	r3, [pc, #4]	; (b9dc <usb_init+0xc>)
    b9d6:	4798      	blx	r3
}
    b9d8:	bf00      	nop
    b9da:	bd80      	pop	{r7, pc}
    b9dc:	0000b99d 	.word	0x0000b99d

0000b9e0 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    b9e0:	b480      	push	{r7}
    b9e2:	b085      	sub	sp, #20
    b9e4:	af00      	add	r7, sp, #0
    b9e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b9e8:	f3ef 8310 	mrs	r3, PRIMASK
    b9ec:	60fb      	str	r3, [r7, #12]
  return(result);
    b9ee:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    b9f0:	687b      	ldr	r3, [r7, #4]
    b9f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    b9f4:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    b9f6:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    b9fa:	bf00      	nop
    b9fc:	3714      	adds	r7, #20
    b9fe:	46bd      	mov	sp, r7
    ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba04:	4770      	bx	lr

0000ba06 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    ba06:	b480      	push	{r7}
    ba08:	b085      	sub	sp, #20
    ba0a:	af00      	add	r7, sp, #0
    ba0c:	6078      	str	r0, [r7, #4]
    ba0e:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    ba12:	687b      	ldr	r3, [r7, #4]
    ba14:	681b      	ldr	r3, [r3, #0]
    ba16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    ba18:	68fb      	ldr	r3, [r7, #12]
    ba1a:	f383 8810 	msr	PRIMASK, r3
}
    ba1e:	bf00      	nop
    ba20:	3714      	adds	r7, #20
    ba22:	46bd      	mov	sp, r7
    ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba28:	4770      	bx	lr
	...

0000ba2c <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    ba2c:	b580      	push	{r7, lr}
    ba2e:	b08c      	sub	sp, #48	; 0x30
    ba30:	af00      	add	r7, sp, #0
    ba32:	6078      	str	r0, [r7, #4]
    ba34:	460b      	mov	r3, r1
    ba36:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    ba38:	687b      	ldr	r3, [r7, #4]
    ba3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    ba3c:	687b      	ldr	r3, [r7, #4]
    ba3e:	681b      	ldr	r3, [r3, #0]
    ba40:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    ba42:	f107 030c 	add.w	r3, r7, #12
    ba46:	2200      	movs	r2, #0
    ba48:	601a      	str	r2, [r3, #0]
    ba4a:	605a      	str	r2, [r3, #4]
    ba4c:	609a      	str	r2, [r3, #8]
    ba4e:	60da      	str	r2, [r3, #12]
    ba50:	611a      	str	r2, [r3, #16]
    ba52:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    ba54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba56:	7b1b      	ldrb	r3, [r3, #12]
    ba58:	2b00      	cmp	r3, #0
    ba5a:	d001      	beq.n	ba60 <n25q256a_xip_confirm+0x34>
    ba5c:	2206      	movs	r2, #6
    ba5e:	e000      	b.n	ba62 <n25q256a_xip_confirm+0x36>
    ba60:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    ba62:	7b3b      	ldrb	r3, [r7, #12]
    ba64:	f362 0302 	bfi	r3, r2, #0, #3
    ba68:	733b      	strb	r3, [r7, #12]
    ba6a:	7b3b      	ldrb	r3, [r7, #12]
    ba6c:	f043 0310 	orr.w	r3, r3, #16
    ba70:	733b      	strb	r3, [r7, #12]
    ba72:	7b3b      	ldrb	r3, [r7, #12]
    ba74:	f043 0320 	orr.w	r3, r3, #32
    ba78:	733b      	strb	r3, [r7, #12]
    ba7a:	7b3b      	ldrb	r3, [r7, #12]
    ba7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ba80:	733b      	strb	r3, [r7, #12]
    ba82:	7b3b      	ldrb	r3, [r7, #12]
    ba84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ba88:	733b      	strb	r3, [r7, #12]
    ba8a:	7b7b      	ldrb	r3, [r7, #13]
    ba8c:	f043 0303 	orr.w	r3, r3, #3
    ba90:	737b      	strb	r3, [r7, #13]
    ba92:	7b7b      	ldrb	r3, [r7, #13]
    ba94:	2201      	movs	r2, #1
    ba96:	f362 1305 	bfi	r3, r2, #4, #2
    ba9a:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    ba9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ba9e:	7b1b      	ldrb	r3, [r3, #12]
    baa0:	2b00      	cmp	r3, #0
    baa2:	d001      	beq.n	baa8 <n25q256a_xip_confirm+0x7c>
    baa4:	2208      	movs	r2, #8
    baa6:	e000      	b.n	baaa <n25q256a_xip_confirm+0x7e>
    baa8:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    baaa:	7bbb      	ldrb	r3, [r7, #14]
    baac:	f362 0304 	bfi	r3, r2, #0, #5
    bab0:	73bb      	strb	r3, [r7, #14]
    bab2:	230b      	movs	r3, #11
    bab4:	743b      	strb	r3, [r7, #16]
    bab6:	78fb      	ldrb	r3, [r7, #3]
    bab8:	2b00      	cmp	r3, #0
    baba:	d001      	beq.n	bac0 <n25q256a_xip_confirm+0x94>
    babc:	2300      	movs	r3, #0
    babe:	e000      	b.n	bac2 <n25q256a_xip_confirm+0x96>
    bac0:	23ff      	movs	r3, #255	; 0xff
    bac2:	747b      	strb	r3, [r7, #17]
    bac4:	2301      	movs	r3, #1
    bac6:	61bb      	str	r3, [r7, #24]
    bac8:	f107 0327 	add.w	r3, r7, #39	; 0x27
    bacc:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    bace:	f107 030c 	add.w	r3, r7, #12
    bad2:	4619      	mov	r1, r3
    bad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bad6:	4b07      	ldr	r3, [pc, #28]	; (baf4 <n25q256a_xip_confirm+0xc8>)
    bad8:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    bada:	78fb      	ldrb	r3, [r7, #3]
    badc:	2b00      	cmp	r3, #0
    bade:	d001      	beq.n	bae4 <n25q256a_xip_confirm+0xb8>
    bae0:	2202      	movs	r2, #2
    bae2:	e000      	b.n	bae6 <n25q256a_xip_confirm+0xba>
    bae4:	2201      	movs	r2, #1
    bae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bae8:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    baea:	2300      	movs	r3, #0
}
    baec:	4618      	mov	r0, r3
    baee:	3730      	adds	r7, #48	; 0x30
    baf0:	46bd      	mov	sp, r7
    baf2:	bd80      	pop	{r7, pc}
    baf4:	00002d25 	.word	0x00002d25

0000baf8 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    baf8:	b580      	push	{r7, lr}
    bafa:	b08c      	sub	sp, #48	; 0x30
    bafc:	af00      	add	r7, sp, #0
    bafe:	6078      	str	r0, [r7, #4]
    bb00:	460b      	mov	r3, r1
    bb02:	70fb      	strb	r3, [r7, #3]
    bb04:	4613      	mov	r3, r2
    bb06:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    bb08:	2300      	movs	r3, #0
    bb0a:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    bb0c:	687b      	ldr	r3, [r7, #4]
    bb0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    bb10:	687b      	ldr	r3, [r7, #4]
    bb12:	681b      	ldr	r3, [r3, #0]
    bb14:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    bb16:	f107 030c 	add.w	r3, r7, #12
    bb1a:	2200      	movs	r2, #0
    bb1c:	601a      	str	r2, [r3, #0]
    bb1e:	605a      	str	r2, [r3, #4]
    bb20:	609a      	str	r2, [r3, #8]
    bb22:	60da      	str	r2, [r3, #12]
    bb24:	611a      	str	r2, [r3, #16]
    bb26:	615a      	str	r2, [r3, #20]
    bb28:	78fb      	ldrb	r3, [r7, #3]
    bb2a:	f003 0307 	and.w	r3, r3, #7
    bb2e:	b2da      	uxtb	r2, r3
    bb30:	7b3b      	ldrb	r3, [r7, #12]
    bb32:	f362 0302 	bfi	r3, r2, #0, #3
    bb36:	733b      	strb	r3, [r7, #12]
    bb38:	7b3b      	ldrb	r3, [r7, #12]
    bb3a:	f043 0310 	orr.w	r3, r3, #16
    bb3e:	733b      	strb	r3, [r7, #12]
    bb40:	7b3b      	ldrb	r3, [r7, #12]
    bb42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bb46:	733b      	strb	r3, [r7, #12]
    bb48:	78bb      	ldrb	r3, [r7, #2]
    bb4a:	743b      	strb	r3, [r7, #16]
    bb4c:	2301      	movs	r3, #1
    bb4e:	61bb      	str	r3, [r7, #24]
    bb50:	f107 0324 	add.w	r3, r7, #36	; 0x24
    bb54:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    bb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb58:	7b5b      	ldrb	r3, [r3, #13]
    bb5a:	2b00      	cmp	r3, #0
    bb5c:	d003      	beq.n	bb66 <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    bb5e:	2100      	movs	r1, #0
    bb60:	6878      	ldr	r0, [r7, #4]
    bb62:	4b0a      	ldr	r3, [pc, #40]	; (bb8c <n25q256a_read_reg+0x94>)
    bb64:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    bb66:	f107 030c 	add.w	r3, r7, #12
    bb6a:	4619      	mov	r1, r3
    bb6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bb6e:	4b08      	ldr	r3, [pc, #32]	; (bb90 <n25q256a_read_reg+0x98>)
    bb70:	4798      	blx	r3
	if (n25q->xip_mode) {
    bb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bb74:	7b5b      	ldrb	r3, [r3, #13]
    bb76:	2b00      	cmp	r3, #0
    bb78:	d003      	beq.n	bb82 <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    bb7a:	2101      	movs	r1, #1
    bb7c:	6878      	ldr	r0, [r7, #4]
    bb7e:	4b03      	ldr	r3, [pc, #12]	; (bb8c <n25q256a_read_reg+0x94>)
    bb80:	4798      	blx	r3
	}
	return status;
    bb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    bb84:	4618      	mov	r0, r3
    bb86:	3730      	adds	r7, #48	; 0x30
    bb88:	46bd      	mov	sp, r7
    bb8a:	bd80      	pop	{r7, pc}
    bb8c:	0000ba2d 	.word	0x0000ba2d
    bb90:	00002d25 	.word	0x00002d25

0000bb94 <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    bb94:	b580      	push	{r7, lr}
    bb96:	b08c      	sub	sp, #48	; 0x30
    bb98:	af00      	add	r7, sp, #0
    bb9a:	60f8      	str	r0, [r7, #12]
    bb9c:	607b      	str	r3, [r7, #4]
    bb9e:	460b      	mov	r3, r1
    bba0:	72fb      	strb	r3, [r7, #11]
    bba2:	4613      	mov	r3, r2
    bba4:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bba6:	68fb      	ldr	r3, [r7, #12]
    bba8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bbaa:	68fb      	ldr	r3, [r7, #12]
    bbac:	681b      	ldr	r3, [r3, #0]
    bbae:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    bbb0:	f107 0310 	add.w	r3, r7, #16
    bbb4:	2200      	movs	r2, #0
    bbb6:	601a      	str	r2, [r3, #0]
    bbb8:	605a      	str	r2, [r3, #4]
    bbba:	609a      	str	r2, [r3, #8]
    bbbc:	60da      	str	r2, [r3, #12]
    bbbe:	611a      	str	r2, [r3, #16]
    bbc0:	615a      	str	r2, [r3, #20]
    bbc2:	7afb      	ldrb	r3, [r7, #11]
    bbc4:	f003 0307 	and.w	r3, r3, #7
    bbc8:	b2da      	uxtb	r2, r3
    bbca:	7c3b      	ldrb	r3, [r7, #16]
    bbcc:	f362 0302 	bfi	r3, r2, #0, #3
    bbd0:	743b      	strb	r3, [r7, #16]
    bbd2:	7c3b      	ldrb	r3, [r7, #16]
    bbd4:	f043 0310 	orr.w	r3, r3, #16
    bbd8:	743b      	strb	r3, [r7, #16]
    bbda:	7c3b      	ldrb	r3, [r7, #16]
    bbdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bbe0:	743b      	strb	r3, [r7, #16]
    bbe2:	7c7b      	ldrb	r3, [r7, #17]
    bbe4:	2202      	movs	r2, #2
    bbe6:	f362 1305 	bfi	r3, r2, #4, #2
    bbea:	747b      	strb	r3, [r7, #17]
    bbec:	7abb      	ldrb	r3, [r7, #10]
    bbee:	753b      	strb	r3, [r7, #20]
    bbf0:	2301      	movs	r3, #1
    bbf2:	61fb      	str	r3, [r7, #28]
    bbf4:	1d3b      	adds	r3, r7, #4
    bbf6:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    bbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bbfa:	7b5b      	ldrb	r3, [r3, #13]
    bbfc:	2b00      	cmp	r3, #0
    bbfe:	d003      	beq.n	bc08 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    bc00:	2100      	movs	r1, #0
    bc02:	68f8      	ldr	r0, [r7, #12]
    bc04:	4b09      	ldr	r3, [pc, #36]	; (bc2c <n25q256a_write_reg+0x98>)
    bc06:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    bc08:	f107 0310 	add.w	r3, r7, #16
    bc0c:	4619      	mov	r1, r3
    bc0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bc10:	4b07      	ldr	r3, [pc, #28]	; (bc30 <n25q256a_write_reg+0x9c>)
    bc12:	4798      	blx	r3
	if (n25q->xip_mode) {
    bc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bc16:	7b5b      	ldrb	r3, [r3, #13]
    bc18:	2b00      	cmp	r3, #0
    bc1a:	d003      	beq.n	bc24 <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    bc1c:	2101      	movs	r1, #1
    bc1e:	68f8      	ldr	r0, [r7, #12]
    bc20:	4b02      	ldr	r3, [pc, #8]	; (bc2c <n25q256a_write_reg+0x98>)
    bc22:	4798      	blx	r3
	}
}
    bc24:	bf00      	nop
    bc26:	3730      	adds	r7, #48	; 0x30
    bc28:	46bd      	mov	sp, r7
    bc2a:	bd80      	pop	{r7, pc}
    bc2c:	0000ba2d 	.word	0x0000ba2d
    bc30:	00002d25 	.word	0x00002d25

0000bc34 <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    bc34:	b580      	push	{r7, lr}
    bc36:	b090      	sub	sp, #64	; 0x40
    bc38:	af00      	add	r7, sp, #0
    bc3a:	6078      	str	r0, [r7, #4]
    bc3c:	460b      	mov	r3, r1
    bc3e:	70fb      	strb	r3, [r7, #3]
    bc40:	4613      	mov	r3, r2
    bc42:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bc44:	687b      	ldr	r3, [r7, #4]
    bc46:	681b      	ldr	r3, [r3, #0]
    bc48:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    bc4a:	78bb      	ldrb	r3, [r7, #2]
    bc4c:	2b00      	cmp	r3, #0
    bc4e:	d001      	beq.n	bc54 <n25q256a_write_enable+0x20>
    bc50:	2306      	movs	r3, #6
    bc52:	e000      	b.n	bc56 <n25q256a_write_enable+0x22>
    bc54:	2304      	movs	r3, #4
    bc56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    bc5a:	f107 0320 	add.w	r3, r7, #32
    bc5e:	2200      	movs	r2, #0
    bc60:	601a      	str	r2, [r3, #0]
    bc62:	605a      	str	r2, [r3, #4]
    bc64:	609a      	str	r2, [r3, #8]
    bc66:	60da      	str	r2, [r3, #12]
    bc68:	611a      	str	r2, [r3, #16]
    bc6a:	615a      	str	r2, [r3, #20]
    bc6c:	78fb      	ldrb	r3, [r7, #3]
    bc6e:	f003 0307 	and.w	r3, r3, #7
    bc72:	b2da      	uxtb	r2, r3
    bc74:	f897 3020 	ldrb.w	r3, [r7, #32]
    bc78:	f362 0302 	bfi	r3, r2, #0, #3
    bc7c:	f887 3020 	strb.w	r3, [r7, #32]
    bc80:	f897 3020 	ldrb.w	r3, [r7, #32]
    bc84:	f043 0310 	orr.w	r3, r3, #16
    bc88:	f887 3020 	strb.w	r3, [r7, #32]
    bc8c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    bc90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    bc94:	f107 0308 	add.w	r3, r7, #8
    bc98:	2200      	movs	r2, #0
    bc9a:	601a      	str	r2, [r3, #0]
    bc9c:	605a      	str	r2, [r3, #4]
    bc9e:	609a      	str	r2, [r3, #8]
    bca0:	60da      	str	r2, [r3, #12]
    bca2:	611a      	str	r2, [r3, #16]
    bca4:	615a      	str	r2, [r3, #20]
    bca6:	78fb      	ldrb	r3, [r7, #3]
    bca8:	f003 0307 	and.w	r3, r3, #7
    bcac:	b2da      	uxtb	r2, r3
    bcae:	7a3b      	ldrb	r3, [r7, #8]
    bcb0:	f362 0302 	bfi	r3, r2, #0, #3
    bcb4:	723b      	strb	r3, [r7, #8]
    bcb6:	7a3b      	ldrb	r3, [r7, #8]
    bcb8:	f043 0310 	orr.w	r3, r3, #16
    bcbc:	723b      	strb	r3, [r7, #8]
    bcbe:	7a3b      	ldrb	r3, [r7, #8]
    bcc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bcc4:	723b      	strb	r3, [r7, #8]
    bcc6:	2305      	movs	r3, #5
    bcc8:	733b      	strb	r3, [r7, #12]
    bcca:	2301      	movs	r3, #1
    bccc:	617b      	str	r3, [r7, #20]
    bcce:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    bcd2:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    bcd4:	f107 0320 	add.w	r3, r7, #32
    bcd8:	4619      	mov	r1, r3
    bcda:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    bcdc:	4b08      	ldr	r3, [pc, #32]	; (bd00 <n25q256a_write_enable+0xcc>)
    bcde:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    bce0:	f107 0308 	add.w	r3, r7, #8
    bce4:	4619      	mov	r1, r3
    bce6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    bce8:	4b05      	ldr	r3, [pc, #20]	; (bd00 <n25q256a_write_enable+0xcc>)
    bcea:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    bcec:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    bcf0:	f003 0302 	and.w	r3, r3, #2
    bcf4:	2b00      	cmp	r3, #0
    bcf6:	d0ed      	beq.n	bcd4 <n25q256a_write_enable+0xa0>
}
    bcf8:	bf00      	nop
    bcfa:	3740      	adds	r7, #64	; 0x40
    bcfc:	46bd      	mov	sp, r7
    bcfe:	bd80      	pop	{r7, pc}
    bd00:	00002d25 	.word	0x00002d25

0000bd04 <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    bd04:	b590      	push	{r4, r7, lr}
    bd06:	b087      	sub	sp, #28
    bd08:	af00      	add	r7, sp, #0
    bd0a:	6078      	str	r0, [r7, #4]
    bd0c:	460b      	mov	r3, r1
    bd0e:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    bd10:	687b      	ldr	r3, [r7, #4]
    bd12:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bd14:	68fb      	ldr	r3, [r7, #12]
    bd16:	7b1b      	ldrb	r3, [r3, #12]
    bd18:	2b00      	cmp	r3, #0
    bd1a:	d001      	beq.n	bd20 <n25q256a_switch_mode+0x1c>
    bd1c:	2306      	movs	r3, #6
    bd1e:	e000      	b.n	bd22 <n25q256a_switch_mode+0x1e>
    bd20:	2300      	movs	r3, #0
    bd22:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    bd24:	7afb      	ldrb	r3, [r7, #11]
    bd26:	2265      	movs	r2, #101	; 0x65
    bd28:	4619      	mov	r1, r3
    bd2a:	6878      	ldr	r0, [r7, #4]
    bd2c:	4b25      	ldr	r3, [pc, #148]	; (bdc4 <n25q256a_switch_mode+0xc0>)
    bd2e:	4798      	blx	r3
    bd30:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    bd32:	2300      	movs	r3, #0
    bd34:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    bd36:	68fb      	ldr	r3, [r7, #12]
    bd38:	7b1b      	ldrb	r3, [r3, #12]
    bd3a:	78fa      	ldrb	r2, [r7, #3]
    bd3c:	429a      	cmp	r2, r3
    bd3e:	d03d      	beq.n	bdbc <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    bd40:	78fb      	ldrb	r3, [r7, #3]
    bd42:	2b00      	cmp	r3, #0
    bd44:	d00b      	beq.n	bd5e <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    bd46:	697b      	ldr	r3, [r7, #20]
    bd48:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bd4c:	2b00      	cmp	r3, #0
    bd4e:	d011      	beq.n	bd74 <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    bd50:	697b      	ldr	r3, [r7, #20]
    bd52:	f003 031f 	and.w	r3, r3, #31
    bd56:	617b      	str	r3, [r7, #20]
			modify = 1;
    bd58:	2301      	movs	r3, #1
    bd5a:	74fb      	strb	r3, [r7, #19]
    bd5c:	e00a      	b.n	bd74 <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    bd5e:	697b      	ldr	r3, [r7, #20]
    bd60:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bd64:	2b00      	cmp	r3, #0
    bd66:	d105      	bne.n	bd74 <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    bd68:	697b      	ldr	r3, [r7, #20]
    bd6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    bd6e:	617b      	str	r3, [r7, #20]
			modify = 1;
    bd70:	2301      	movs	r3, #1
    bd72:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    bd74:	7cfb      	ldrb	r3, [r7, #19]
    bd76:	2b00      	cmp	r3, #0
    bd78:	d021      	beq.n	bdbe <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    bd7a:	68fb      	ldr	r3, [r7, #12]
    bd7c:	78fa      	ldrb	r2, [r7, #3]
    bd7e:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    bd80:	7afb      	ldrb	r3, [r7, #11]
    bd82:	2201      	movs	r2, #1
    bd84:	4619      	mov	r1, r3
    bd86:	6878      	ldr	r0, [r7, #4]
    bd88:	4b0f      	ldr	r3, [pc, #60]	; (bdc8 <n25q256a_switch_mode+0xc4>)
    bd8a:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    bd8c:	7af9      	ldrb	r1, [r7, #11]
    bd8e:	697b      	ldr	r3, [r7, #20]
    bd90:	2261      	movs	r2, #97	; 0x61
    bd92:	6878      	ldr	r0, [r7, #4]
    bd94:	4c0d      	ldr	r4, [pc, #52]	; (bdcc <n25q256a_switch_mode+0xc8>)
    bd96:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bd98:	78fb      	ldrb	r3, [r7, #3]
    bd9a:	2b00      	cmp	r3, #0
    bd9c:	d001      	beq.n	bda2 <n25q256a_switch_mode+0x9e>
    bd9e:	2306      	movs	r3, #6
    bda0:	e000      	b.n	bda4 <n25q256a_switch_mode+0xa0>
    bda2:	2300      	movs	r3, #0
    bda4:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    bda6:	7afb      	ldrb	r3, [r7, #11]
    bda8:	2265      	movs	r2, #101	; 0x65
    bdaa:	4619      	mov	r1, r3
    bdac:	6878      	ldr	r0, [r7, #4]
    bdae:	4b05      	ldr	r3, [pc, #20]	; (bdc4 <n25q256a_switch_mode+0xc0>)
    bdb0:	4798      	blx	r3
    bdb2:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    bdb4:	68fb      	ldr	r3, [r7, #12]
    bdb6:	78fa      	ldrb	r2, [r7, #3]
    bdb8:	731a      	strb	r2, [r3, #12]
    bdba:	e000      	b.n	bdbe <n25q256a_switch_mode+0xba>
		return;
    bdbc:	bf00      	nop
	}
}
    bdbe:	371c      	adds	r7, #28
    bdc0:	46bd      	mov	sp, r7
    bdc2:	bd90      	pop	{r4, r7, pc}
    bdc4:	0000baf9 	.word	0x0000baf9
    bdc8:	0000bc35 	.word	0x0000bc35
    bdcc:	0000bb95 	.word	0x0000bb95

0000bdd0 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    bdd0:	b580      	push	{r7, lr}
    bdd2:	b086      	sub	sp, #24
    bdd4:	af00      	add	r7, sp, #0
    bdd6:	60f8      	str	r0, [r7, #12]
    bdd8:	60b9      	str	r1, [r7, #8]
    bdda:	607a      	str	r2, [r7, #4]
    bddc:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    bdde:	68fb      	ldr	r3, [r7, #12]
    bde0:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    bde2:	4a0c      	ldr	r2, [pc, #48]	; (be14 <n25q256a_construct+0x44>)
    bde4:	68b9      	ldr	r1, [r7, #8]
    bde6:	68f8      	ldr	r0, [r7, #12]
    bde8:	4b0b      	ldr	r3, [pc, #44]	; (be18 <n25q256a_construct+0x48>)
    bdea:	4798      	blx	r3
	n25q->quad_mode    = 0;
    bdec:	697b      	ldr	r3, [r7, #20]
    bdee:	2200      	movs	r2, #0
    bdf0:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    bdf2:	697b      	ldr	r3, [r7, #20]
    bdf4:	2200      	movs	r2, #0
    bdf6:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    bdf8:	697b      	ldr	r3, [r7, #20]
    bdfa:	687a      	ldr	r2, [r7, #4]
    bdfc:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    bdfe:	78fb      	ldrb	r3, [r7, #3]
    be00:	4619      	mov	r1, r3
    be02:	68f8      	ldr	r0, [r7, #12]
    be04:	4b05      	ldr	r3, [pc, #20]	; (be1c <n25q256a_construct+0x4c>)
    be06:	4798      	blx	r3
	return me;
    be08:	68fb      	ldr	r3, [r7, #12]
}
    be0a:	4618      	mov	r0, r3
    be0c:	3718      	adds	r7, #24
    be0e:	46bd      	mov	sp, r7
    be10:	bd80      	pop	{r7, pc}
    be12:	bf00      	nop
    be14:	000137ac 	.word	0x000137ac
    be18:	0000c2ad 	.word	0x0000c2ad
    be1c:	0000bd05 	.word	0x0000bd05

0000be20 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    be20:	b580      	push	{r7, lr}
    be22:	b08c      	sub	sp, #48	; 0x30
    be24:	af00      	add	r7, sp, #0
    be26:	60f8      	str	r0, [r7, #12]
    be28:	60b9      	str	r1, [r7, #8]
    be2a:	607a      	str	r2, [r7, #4]
    be2c:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    be2e:	68fb      	ldr	r3, [r7, #12]
    be30:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    be32:	68fb      	ldr	r3, [r7, #12]
    be34:	681b      	ldr	r3, [r3, #0]
    be36:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    be38:	f107 0310 	add.w	r3, r7, #16
    be3c:	2200      	movs	r2, #0
    be3e:	601a      	str	r2, [r3, #0]
    be40:	605a      	str	r2, [r3, #4]
    be42:	609a      	str	r2, [r3, #8]
    be44:	60da      	str	r2, [r3, #12]
    be46:	611a      	str	r2, [r3, #16]
    be48:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    be4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be4c:	7b1b      	ldrb	r3, [r3, #12]
    be4e:	2b00      	cmp	r3, #0
    be50:	d001      	beq.n	be56 <n25q256a_read+0x36>
    be52:	2206      	movs	r2, #6
    be54:	e000      	b.n	be58 <n25q256a_read+0x38>
    be56:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    be58:	7c3b      	ldrb	r3, [r7, #16]
    be5a:	f362 0302 	bfi	r3, r2, #0, #3
    be5e:	743b      	strb	r3, [r7, #16]
    be60:	7c3b      	ldrb	r3, [r7, #16]
    be62:	f043 0310 	orr.w	r3, r3, #16
    be66:	743b      	strb	r3, [r7, #16]
    be68:	7c3b      	ldrb	r3, [r7, #16]
    be6a:	f043 0320 	orr.w	r3, r3, #32
    be6e:	743b      	strb	r3, [r7, #16]
    be70:	7c3b      	ldrb	r3, [r7, #16]
    be72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    be76:	743b      	strb	r3, [r7, #16]
    be78:	7c7b      	ldrb	r3, [r7, #17]
    be7a:	2201      	movs	r2, #1
    be7c:	f362 1305 	bfi	r3, r2, #4, #2
    be80:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    be82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be84:	7b1b      	ldrb	r3, [r3, #12]
    be86:	2b00      	cmp	r3, #0
    be88:	d001      	beq.n	be8e <n25q256a_read+0x6e>
    be8a:	220a      	movs	r2, #10
    be8c:	e000      	b.n	be90 <n25q256a_read+0x70>
    be8e:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    be90:	7cbb      	ldrb	r3, [r7, #18]
    be92:	f362 0304 	bfi	r3, r2, #0, #5
    be96:	74bb      	strb	r3, [r7, #18]
    be98:	230b      	movs	r3, #11
    be9a:	753b      	strb	r3, [r7, #20]
    be9c:	687b      	ldr	r3, [r7, #4]
    be9e:	61bb      	str	r3, [r7, #24]
    bea0:	683b      	ldr	r3, [r7, #0]
    bea2:	61fb      	str	r3, [r7, #28]
    bea4:	68bb      	ldr	r3, [r7, #8]
    bea6:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    bea8:	f107 0310 	add.w	r3, r7, #16
    beac:	4619      	mov	r1, r3
    beae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    beb0:	4b03      	ldr	r3, [pc, #12]	; (bec0 <n25q256a_read+0xa0>)
    beb2:	4798      	blx	r3
	return ERR_NONE;
    beb4:	2300      	movs	r3, #0
}
    beb6:	4618      	mov	r0, r3
    beb8:	3730      	adds	r7, #48	; 0x30
    beba:	46bd      	mov	sp, r7
    bebc:	bd80      	pop	{r7, pc}
    bebe:	bf00      	nop
    bec0:	00002d25 	.word	0x00002d25

0000bec4 <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    bec4:	b580      	push	{r7, lr}
    bec6:	b08c      	sub	sp, #48	; 0x30
    bec8:	af00      	add	r7, sp, #0
    beca:	60f8      	str	r0, [r7, #12]
    becc:	60b9      	str	r1, [r7, #8]
    bece:	607a      	str	r2, [r7, #4]
    bed0:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bed2:	68fb      	ldr	r3, [r7, #12]
    bed4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bed6:	68fb      	ldr	r3, [r7, #12]
    bed8:	681b      	ldr	r3, [r3, #0]
    beda:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    bedc:	f107 0310 	add.w	r3, r7, #16
    bee0:	2200      	movs	r2, #0
    bee2:	601a      	str	r2, [r3, #0]
    bee4:	605a      	str	r2, [r3, #4]
    bee6:	609a      	str	r2, [r3, #8]
    bee8:	60da      	str	r2, [r3, #12]
    beea:	611a      	str	r2, [r3, #16]
    beec:	615a      	str	r2, [r3, #20]
    beee:	7c3b      	ldrb	r3, [r7, #16]
    bef0:	f043 0310 	orr.w	r3, r3, #16
    bef4:	743b      	strb	r3, [r7, #16]
    bef6:	7c3b      	ldrb	r3, [r7, #16]
    bef8:	f043 0320 	orr.w	r3, r3, #32
    befc:	743b      	strb	r3, [r7, #16]
    befe:	7c3b      	ldrb	r3, [r7, #16]
    bf00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bf04:	743b      	strb	r3, [r7, #16]
    bf06:	7c7b      	ldrb	r3, [r7, #17]
    bf08:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    bf0c:	747b      	strb	r3, [r7, #17]
    bf0e:	2302      	movs	r3, #2
    bf10:	753b      	strb	r3, [r7, #20]
    bf12:	687b      	ldr	r3, [r7, #4]
    bf14:	61bb      	str	r3, [r7, #24]
    bf16:	683b      	ldr	r3, [r7, #0]
    bf18:	61fb      	str	r3, [r7, #28]
    bf1a:	68bb      	ldr	r3, [r7, #8]
    bf1c:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bf1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf20:	7b1b      	ldrb	r3, [r3, #12]
    bf22:	2b00      	cmp	r3, #0
    bf24:	d001      	beq.n	bf2a <n25q256a_write+0x66>
    bf26:	2206      	movs	r2, #6
    bf28:	e000      	b.n	bf2c <n25q256a_write+0x68>
    bf2a:	2200      	movs	r2, #0
    bf2c:	7c3b      	ldrb	r3, [r7, #16]
    bf2e:	f362 0302 	bfi	r3, r2, #0, #3
    bf32:	743b      	strb	r3, [r7, #16]
	while (length) {
    bf34:	e035      	b.n	bfa2 <n25q256a_write+0xde>
		cmd.address = address;
    bf36:	687b      	ldr	r3, [r7, #4]
    bf38:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    bf3a:	683b      	ldr	r3, [r7, #0]
    bf3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    bf40:	d802      	bhi.n	bf48 <n25q256a_write+0x84>
			cmd.buf_len = length;
    bf42:	683b      	ldr	r3, [r7, #0]
    bf44:	61fb      	str	r3, [r7, #28]
    bf46:	e002      	b.n	bf4e <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    bf48:	f44f 7380 	mov.w	r3, #256	; 0x100
    bf4c:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    bf4e:	7c3b      	ldrb	r3, [r7, #16]
    bf50:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bf54:	b2db      	uxtb	r3, r3
    bf56:	2201      	movs	r2, #1
    bf58:	4619      	mov	r1, r3
    bf5a:	68f8      	ldr	r0, [r7, #12]
    bf5c:	4b19      	ldr	r3, [pc, #100]	; (bfc4 <n25q256a_write+0x100>)
    bf5e:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    bf60:	f107 0310 	add.w	r3, r7, #16
    bf64:	4619      	mov	r1, r3
    bf66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bf68:	4b17      	ldr	r3, [pc, #92]	; (bfc8 <n25q256a_write+0x104>)
    bf6a:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    bf6c:	bf00      	nop
    bf6e:	7c3b      	ldrb	r3, [r7, #16]
    bf70:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bf74:	b2db      	uxtb	r3, r3
    bf76:	2270      	movs	r2, #112	; 0x70
    bf78:	4619      	mov	r1, r3
    bf7a:	68f8      	ldr	r0, [r7, #12]
    bf7c:	4b13      	ldr	r3, [pc, #76]	; (bfcc <n25q256a_write+0x108>)
    bf7e:	4798      	blx	r3
    bf80:	4603      	mov	r3, r0
    bf82:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bf86:	2b00      	cmp	r3, #0
    bf88:	d0f1      	beq.n	bf6e <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    bf8a:	6a3a      	ldr	r2, [r7, #32]
    bf8c:	69fb      	ldr	r3, [r7, #28]
    bf8e:	4413      	add	r3, r2
    bf90:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    bf92:	69fb      	ldr	r3, [r7, #28]
    bf94:	683a      	ldr	r2, [r7, #0]
    bf96:	1ad3      	subs	r3, r2, r3
    bf98:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    bf9a:	69fb      	ldr	r3, [r7, #28]
    bf9c:	687a      	ldr	r2, [r7, #4]
    bf9e:	4413      	add	r3, r2
    bfa0:	607b      	str	r3, [r7, #4]
	while (length) {
    bfa2:	683b      	ldr	r3, [r7, #0]
    bfa4:	2b00      	cmp	r3, #0
    bfa6:	d1c6      	bne.n	bf36 <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    bfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bfaa:	7b5b      	ldrb	r3, [r3, #13]
    bfac:	2b00      	cmp	r3, #0
    bfae:	d003      	beq.n	bfb8 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    bfb0:	2101      	movs	r1, #1
    bfb2:	68f8      	ldr	r0, [r7, #12]
    bfb4:	4b06      	ldr	r3, [pc, #24]	; (bfd0 <n25q256a_write+0x10c>)
    bfb6:	4798      	blx	r3
	}
	return ERR_NONE;
    bfb8:	2300      	movs	r3, #0
}
    bfba:	4618      	mov	r0, r3
    bfbc:	3730      	adds	r7, #48	; 0x30
    bfbe:	46bd      	mov	sp, r7
    bfc0:	bd80      	pop	{r7, pc}
    bfc2:	bf00      	nop
    bfc4:	0000bc35 	.word	0x0000bc35
    bfc8:	00002d25 	.word	0x00002d25
    bfcc:	0000baf9 	.word	0x0000baf9
    bfd0:	0000ba2d 	.word	0x0000ba2d

0000bfd4 <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    bfd4:	b580      	push	{r7, lr}
    bfd6:	b090      	sub	sp, #64	; 0x40
    bfd8:	af00      	add	r7, sp, #0
    bfda:	60f8      	str	r0, [r7, #12]
    bfdc:	60b9      	str	r1, [r7, #8]
    bfde:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bfe0:	68fb      	ldr	r3, [r7, #12]
    bfe2:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bfe4:	68fb      	ldr	r3, [r7, #12]
    bfe6:	681b      	ldr	r3, [r3, #0]
    bfe8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    bfea:	f107 0314 	add.w	r3, r7, #20
    bfee:	2200      	movs	r2, #0
    bff0:	601a      	str	r2, [r3, #0]
    bff2:	605a      	str	r2, [r3, #4]
    bff4:	609a      	str	r2, [r3, #8]
    bff6:	60da      	str	r2, [r3, #12]
    bff8:	611a      	str	r2, [r3, #16]
    bffa:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bffe:	7b1b      	ldrb	r3, [r3, #12]
    c000:	2b00      	cmp	r3, #0
    c002:	d001      	beq.n	c008 <n25q256a_erase+0x34>
    c004:	2206      	movs	r2, #6
    c006:	e000      	b.n	c00a <n25q256a_erase+0x36>
    c008:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    c00a:	7d3b      	ldrb	r3, [r7, #20]
    c00c:	f362 0302 	bfi	r3, r2, #0, #3
    c010:	753b      	strb	r3, [r7, #20]
    c012:	7d3b      	ldrb	r3, [r7, #20]
    c014:	f043 0310 	orr.w	r3, r3, #16
    c018:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    c01a:	687b      	ldr	r3, [r7, #4]
    c01c:	4a56      	ldr	r2, [pc, #344]	; (c178 <n25q256a_erase+0x1a4>)
    c01e:	4293      	cmp	r3, r2
    c020:	bf94      	ite	ls
    c022:	2301      	movls	r3, #1
    c024:	2300      	movhi	r3, #0
    c026:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    c028:	7d3b      	ldrb	r3, [r7, #20]
    c02a:	f362 1345 	bfi	r3, r2, #5, #1
    c02e:	753b      	strb	r3, [r7, #20]
    c030:	7d7b      	ldrb	r3, [r7, #21]
    c032:	2202      	movs	r2, #2
    c034:	f362 1305 	bfi	r3, r2, #4, #2
    c038:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    c03a:	68bb      	ldr	r3, [r7, #8]
    c03c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    c03e:	687b      	ldr	r3, [r7, #4]
    c040:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    c042:	2300      	movs	r3, #0
    c044:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    c046:	687b      	ldr	r3, [r7, #4]
    c048:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c04c:	2b00      	cmp	r3, #0
    c04e:	d104      	bne.n	c05a <n25q256a_erase+0x86>
    c050:	68bb      	ldr	r3, [r7, #8]
    c052:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c056:	2b00      	cmp	r3, #0
    c058:	d002      	beq.n	c060 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    c05a:	f06f 030c 	mvn.w	r3, #12
    c05e:	e087      	b.n	c170 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    c060:	687b      	ldr	r3, [r7, #4]
    c062:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    c066:	d368      	bcc.n	c13a <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    c068:	23c7      	movs	r3, #199	; 0xc7
    c06a:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c06c:	7d3b      	ldrb	r3, [r7, #20]
    c06e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c072:	b2db      	uxtb	r3, r3
    c074:	2201      	movs	r2, #1
    c076:	4619      	mov	r1, r3
    c078:	68f8      	ldr	r0, [r7, #12]
    c07a:	4b40      	ldr	r3, [pc, #256]	; (c17c <n25q256a_erase+0x1a8>)
    c07c:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    c07e:	f107 0314 	add.w	r3, r7, #20
    c082:	4619      	mov	r1, r3
    c084:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c086:	4b3e      	ldr	r3, [pc, #248]	; (c180 <n25q256a_erase+0x1ac>)
    c088:	4798      	blx	r3
    c08a:	e059      	b.n	c140 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    c08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c08e:	b29b      	uxth	r3, r3
    c090:	2b00      	cmp	r3, #0
    c092:	d11f      	bne.n	c0d4 <n25q256a_erase+0x100>
    c094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c09a:	d31b      	bcc.n	c0d4 <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    c09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c09e:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    c0a0:	23d8      	movs	r3, #216	; 0xd8
    c0a2:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c0a4:	7d3b      	ldrb	r3, [r7, #20]
    c0a6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c0aa:	b2db      	uxtb	r3, r3
    c0ac:	2201      	movs	r2, #1
    c0ae:	4619      	mov	r1, r3
    c0b0:	68f8      	ldr	r0, [r7, #12]
    c0b2:	4b32      	ldr	r3, [pc, #200]	; (c17c <n25q256a_erase+0x1a8>)
    c0b4:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c0b6:	f107 0314 	add.w	r3, r7, #20
    c0ba:	4619      	mov	r1, r3
    c0bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c0be:	4b30      	ldr	r3, [pc, #192]	; (c180 <n25q256a_erase+0x1ac>)
    c0c0:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    c0c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c0c4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    c0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c0cc:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    c0d0:	63bb      	str	r3, [r7, #56]	; 0x38
    c0d2:	e023      	b.n	c11c <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    c0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c0d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    c0da:	d31b      	bcc.n	c114 <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    c0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c0de:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    c0e0:	2320      	movs	r3, #32
    c0e2:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c0e4:	7d3b      	ldrb	r3, [r7, #20]
    c0e6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c0ea:	b2db      	uxtb	r3, r3
    c0ec:	2201      	movs	r2, #1
    c0ee:	4619      	mov	r1, r3
    c0f0:	68f8      	ldr	r0, [r7, #12]
    c0f2:	4b22      	ldr	r3, [pc, #136]	; (c17c <n25q256a_erase+0x1a8>)
    c0f4:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c0f6:	f107 0314 	add.w	r3, r7, #20
    c0fa:	4619      	mov	r1, r3
    c0fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c0fe:	4b20      	ldr	r3, [pc, #128]	; (c180 <n25q256a_erase+0x1ac>)
    c100:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    c102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c108:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    c10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c10c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    c110:	63bb      	str	r3, [r7, #56]	; 0x38
    c112:	e003      	b.n	c11c <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    c114:	f06f 030c 	mvn.w	r3, #12
    c118:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    c11a:	e011      	b.n	c140 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c11c:	bf00      	nop
    c11e:	7d3b      	ldrb	r3, [r7, #20]
    c120:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c124:	b2db      	uxtb	r3, r3
    c126:	2270      	movs	r2, #112	; 0x70
    c128:	4619      	mov	r1, r3
    c12a:	68f8      	ldr	r0, [r7, #12]
    c12c:	4b15      	ldr	r3, [pc, #84]	; (c184 <n25q256a_erase+0x1b0>)
    c12e:	4798      	blx	r3
    c130:	4603      	mov	r3, r0
    c132:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c136:	2b00      	cmp	r3, #0
    c138:	d0f1      	beq.n	c11e <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    c13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c13c:	2b00      	cmp	r3, #0
    c13e:	d1a5      	bne.n	c08c <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c140:	bf00      	nop
    c142:	7d3b      	ldrb	r3, [r7, #20]
    c144:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c148:	b2db      	uxtb	r3, r3
    c14a:	2270      	movs	r2, #112	; 0x70
    c14c:	4619      	mov	r1, r3
    c14e:	68f8      	ldr	r0, [r7, #12]
    c150:	4b0c      	ldr	r3, [pc, #48]	; (c184 <n25q256a_erase+0x1b0>)
    c152:	4798      	blx	r3
    c154:	4603      	mov	r3, r0
    c156:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c15a:	2b00      	cmp	r3, #0
    c15c:	d0f1      	beq.n	c142 <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    c15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c160:	7b5b      	ldrb	r3, [r3, #13]
    c162:	2b00      	cmp	r3, #0
    c164:	d003      	beq.n	c16e <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    c166:	2101      	movs	r1, #1
    c168:	68f8      	ldr	r0, [r7, #12]
    c16a:	4b07      	ldr	r3, [pc, #28]	; (c188 <n25q256a_erase+0x1b4>)
    c16c:	4798      	blx	r3
	}
	return rc;
    c16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    c170:	4618      	mov	r0, r3
    c172:	3740      	adds	r7, #64	; 0x40
    c174:	46bd      	mov	sp, r7
    c176:	bd80      	pop	{r7, pc}
    c178:	001fffff 	.word	0x001fffff
    c17c:	0000bc35 	.word	0x0000bc35
    c180:	00002d25 	.word	0x00002d25
    c184:	0000baf9 	.word	0x0000baf9
    c188:	0000ba2d 	.word	0x0000ba2d

0000c18c <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    c18c:	b590      	push	{r4, r7, lr}
    c18e:	b085      	sub	sp, #20
    c190:	af00      	add	r7, sp, #0
    c192:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    c194:	687b      	ldr	r3, [r7, #4]
    c196:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c198:	68fb      	ldr	r3, [r7, #12]
    c19a:	7b1b      	ldrb	r3, [r3, #12]
    c19c:	2b00      	cmp	r3, #0
    c19e:	d001      	beq.n	c1a4 <n25q256a_enable_xip+0x18>
    c1a0:	2306      	movs	r3, #6
    c1a2:	e000      	b.n	c1a6 <n25q256a_enable_xip+0x1a>
    c1a4:	2300      	movs	r3, #0
    c1a6:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    c1a8:	68fb      	ldr	r3, [r7, #12]
    c1aa:	7b5b      	ldrb	r3, [r3, #13]
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	d129      	bne.n	c204 <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c1b0:	7afb      	ldrb	r3, [r7, #11]
    c1b2:	2285      	movs	r2, #133	; 0x85
    c1b4:	4619      	mov	r1, r3
    c1b6:	6878      	ldr	r0, [r7, #4]
    c1b8:	4b15      	ldr	r3, [pc, #84]	; (c210 <n25q256a_enable_xip+0x84>)
    c1ba:	4798      	blx	r3
    c1bc:	4603      	mov	r3, r0
    c1be:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    c1c0:	7abb      	ldrb	r3, [r7, #10]
    c1c2:	f003 0308 	and.w	r3, r3, #8
    c1c6:	2b00      	cmp	r3, #0
    c1c8:	d015      	beq.n	c1f6 <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    c1ca:	7abb      	ldrb	r3, [r7, #10]
    c1cc:	f023 0308 	bic.w	r3, r3, #8
    c1d0:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    c1d2:	7abb      	ldrb	r3, [r7, #10]
    c1d4:	7af9      	ldrb	r1, [r7, #11]
    c1d6:	2281      	movs	r2, #129	; 0x81
    c1d8:	6878      	ldr	r0, [r7, #4]
    c1da:	4c0e      	ldr	r4, [pc, #56]	; (c214 <n25q256a_enable_xip+0x88>)
    c1dc:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c1de:	bf00      	nop
    c1e0:	7afb      	ldrb	r3, [r7, #11]
    c1e2:	2270      	movs	r2, #112	; 0x70
    c1e4:	4619      	mov	r1, r3
    c1e6:	6878      	ldr	r0, [r7, #4]
    c1e8:	4b09      	ldr	r3, [pc, #36]	; (c210 <n25q256a_enable_xip+0x84>)
    c1ea:	4798      	blx	r3
    c1ec:	4603      	mov	r3, r0
    c1ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c1f2:	2b00      	cmp	r3, #0
    c1f4:	d0f4      	beq.n	c1e0 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    c1f6:	68fb      	ldr	r3, [r7, #12]
    c1f8:	2201      	movs	r2, #1
    c1fa:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    c1fc:	2101      	movs	r1, #1
    c1fe:	6878      	ldr	r0, [r7, #4]
    c200:	4b05      	ldr	r3, [pc, #20]	; (c218 <n25q256a_enable_xip+0x8c>)
    c202:	4798      	blx	r3
	}
	return ERR_NONE;
    c204:	2300      	movs	r3, #0
}
    c206:	4618      	mov	r0, r3
    c208:	3714      	adds	r7, #20
    c20a:	46bd      	mov	sp, r7
    c20c:	bd90      	pop	{r4, r7, pc}
    c20e:	bf00      	nop
    c210:	0000baf9 	.word	0x0000baf9
    c214:	0000bb95 	.word	0x0000bb95
    c218:	0000ba2d 	.word	0x0000ba2d

0000c21c <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    c21c:	b580      	push	{r7, lr}
    c21e:	b086      	sub	sp, #24
    c220:	af00      	add	r7, sp, #0
    c222:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c224:	687b      	ldr	r3, [r7, #4]
    c226:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c228:	687b      	ldr	r3, [r7, #4]
    c22a:	681b      	ldr	r3, [r3, #0]
    c22c:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c22e:	697b      	ldr	r3, [r7, #20]
    c230:	7b1b      	ldrb	r3, [r3, #12]
    c232:	2b00      	cmp	r3, #0
    c234:	d001      	beq.n	c23a <n25q256a_disable_xip+0x1e>
    c236:	2306      	movs	r3, #6
    c238:	e000      	b.n	c23c <n25q256a_disable_xip+0x20>
    c23a:	2300      	movs	r3, #0
    c23c:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    c23e:	2100      	movs	r1, #0
    c240:	6878      	ldr	r0, [r7, #4]
    c242:	4b15      	ldr	r3, [pc, #84]	; (c298 <n25q256a_disable_xip+0x7c>)
    c244:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c246:	7bfb      	ldrb	r3, [r7, #15]
    c248:	2285      	movs	r2, #133	; 0x85
    c24a:	4619      	mov	r1, r3
    c24c:	6878      	ldr	r0, [r7, #4]
    c24e:	4b13      	ldr	r3, [pc, #76]	; (c29c <n25q256a_disable_xip+0x80>)
    c250:	4798      	blx	r3
    c252:	4603      	mov	r3, r0
    c254:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    c256:	7bbb      	ldrb	r3, [r7, #14]
    c258:	f003 0308 	and.w	r3, r3, #8
    c25c:	2b00      	cmp	r3, #0
    c25e:	d113      	bne.n	c288 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    c260:	697b      	ldr	r3, [r7, #20]
    c262:	689b      	ldr	r3, [r3, #8]
    c264:	2b00      	cmp	r3, #0
    c266:	d00f      	beq.n	c288 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    c268:	693b      	ldr	r3, [r7, #16]
    c26a:	681b      	ldr	r3, [r3, #0]
    c26c:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    c26e:	6938      	ldr	r0, [r7, #16]
    c270:	4b0b      	ldr	r3, [pc, #44]	; (c2a0 <n25q256a_disable_xip+0x84>)
    c272:	4798      	blx	r3
			n25q->pin_exit_xip();
    c274:	697b      	ldr	r3, [r7, #20]
    c276:	689b      	ldr	r3, [r3, #8]
    c278:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    c27a:	68b9      	ldr	r1, [r7, #8]
    c27c:	6938      	ldr	r0, [r7, #16]
    c27e:	4b09      	ldr	r3, [pc, #36]	; (c2a4 <n25q256a_disable_xip+0x88>)
    c280:	4798      	blx	r3
			qspi_sync_enable(descr);
    c282:	6938      	ldr	r0, [r7, #16]
    c284:	4b08      	ldr	r3, [pc, #32]	; (c2a8 <n25q256a_disable_xip+0x8c>)
    c286:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    c288:	697b      	ldr	r3, [r7, #20]
    c28a:	2200      	movs	r2, #0
    c28c:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c28e:	2300      	movs	r3, #0
}
    c290:	4618      	mov	r0, r3
    c292:	3718      	adds	r7, #24
    c294:	46bd      	mov	sp, r7
    c296:	bd80      	pop	{r7, pc}
    c298:	0000ba2d 	.word	0x0000ba2d
    c29c:	0000baf9 	.word	0x0000baf9
    c2a0:	00002ce9 	.word	0x00002ce9
    c2a4:	00002c61 	.word	0x00002c61
    c2a8:	00002cad 	.word	0x00002cad

0000c2ac <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    c2ac:	b480      	push	{r7}
    c2ae:	b085      	sub	sp, #20
    c2b0:	af00      	add	r7, sp, #0
    c2b2:	60f8      	str	r0, [r7, #12]
    c2b4:	60b9      	str	r1, [r7, #8]
    c2b6:	607a      	str	r2, [r7, #4]
	me->io        = io;
    c2b8:	68fb      	ldr	r3, [r7, #12]
    c2ba:	68ba      	ldr	r2, [r7, #8]
    c2bc:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    c2be:	68fb      	ldr	r3, [r7, #12]
    c2c0:	687a      	ldr	r2, [r7, #4]
    c2c2:	605a      	str	r2, [r3, #4]

	return me;
    c2c4:	68fb      	ldr	r3, [r7, #12]
}
    c2c6:	4618      	mov	r0, r3
    c2c8:	3714      	adds	r7, #20
    c2ca:	46bd      	mov	sp, r7
    c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2d0:	4770      	bx	lr

0000c2d2 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    c2d2:	b480      	push	{r7}
    c2d4:	b083      	sub	sp, #12
    c2d6:	af00      	add	r7, sp, #0
    c2d8:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c2da:	687b      	ldr	r3, [r7, #4]
    c2dc:	781b      	ldrb	r3, [r3, #0]
    c2de:	b29a      	uxth	r2, r3
    c2e0:	687b      	ldr	r3, [r7, #4]
    c2e2:	3301      	adds	r3, #1
    c2e4:	781b      	ldrb	r3, [r3, #0]
    c2e6:	b29b      	uxth	r3, r3
    c2e8:	021b      	lsls	r3, r3, #8
    c2ea:	b29b      	uxth	r3, r3
    c2ec:	4413      	add	r3, r2
    c2ee:	b29b      	uxth	r3, r3
}
    c2f0:	4618      	mov	r0, r3
    c2f2:	370c      	adds	r7, #12
    c2f4:	46bd      	mov	sp, r7
    c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2fa:	4770      	bx	lr

0000c2fc <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    c2fc:	b480      	push	{r7}
    c2fe:	b083      	sub	sp, #12
    c300:	af00      	add	r7, sp, #0
    c302:	6078      	str	r0, [r7, #4]
	return desc[0];
    c304:	687b      	ldr	r3, [r7, #4]
    c306:	781b      	ldrb	r3, [r3, #0]
}
    c308:	4618      	mov	r0, r3
    c30a:	370c      	adds	r7, #12
    c30c:	46bd      	mov	sp, r7
    c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c312:	4770      	bx	lr

0000c314 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    c314:	b580      	push	{r7, lr}
    c316:	b082      	sub	sp, #8
    c318:	af00      	add	r7, sp, #0
    c31a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c31c:	6878      	ldr	r0, [r7, #4]
    c31e:	4b05      	ldr	r3, [pc, #20]	; (c334 <usb_desc_next+0x20>)
    c320:	4798      	blx	r3
    c322:	4603      	mov	r3, r0
    c324:	461a      	mov	r2, r3
    c326:	687b      	ldr	r3, [r7, #4]
    c328:	4413      	add	r3, r2
}
    c32a:	4618      	mov	r0, r3
    c32c:	3708      	adds	r7, #8
    c32e:	46bd      	mov	sp, r7
    c330:	bd80      	pop	{r7, pc}
    c332:	bf00      	nop
    c334:	0000c2fd 	.word	0x0000c2fd

0000c338 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c338:	b580      	push	{r7, lr}
    c33a:	b08c      	sub	sp, #48	; 0x30
    c33c:	af00      	add	r7, sp, #0
    c33e:	6078      	str	r0, [r7, #4]
    c340:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c342:	687b      	ldr	r3, [r7, #4]
    c344:	689b      	ldr	r3, [r3, #8]
    c346:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    c348:	683b      	ldr	r3, [r7, #0]
    c34a:	681b      	ldr	r3, [r3, #0]
    c34c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c34e:	2300      	movs	r3, #0
    c350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c354:	e08f      	b.n	c476 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    c356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c358:	2b00      	cmp	r3, #0
    c35a:	d102      	bne.n	c362 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    c35c:	f06f 0309 	mvn.w	r3, #9
    c360:	e092      	b.n	c488 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    c362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c364:	789b      	ldrb	r3, [r3, #2]
    c366:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    c368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c36a:	795b      	ldrb	r3, [r3, #5]
    c36c:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c36e:	7c7b      	ldrb	r3, [r7, #17]
    c370:	2b02      	cmp	r3, #2
    c372:	d002      	beq.n	c37a <cdcdf_acm_enable+0x42>
    c374:	7c7b      	ldrb	r3, [r7, #17]
    c376:	2b0a      	cmp	r3, #10
    c378:	d121      	bne.n	c3be <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c37a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c37e:	6a3a      	ldr	r2, [r7, #32]
    c380:	5cd2      	ldrb	r2, [r2, r3]
    c382:	7bbb      	ldrb	r3, [r7, #14]
    c384:	429a      	cmp	r2, r3
    c386:	d102      	bne.n	c38e <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    c388:	f06f 0311 	mvn.w	r3, #17
    c38c:	e07c      	b.n	c488 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c38e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c392:	6a3a      	ldr	r2, [r7, #32]
    c394:	5cd3      	ldrb	r3, [r2, r3]
    c396:	2bff      	cmp	r3, #255	; 0xff
    c398:	d002      	beq.n	c3a0 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    c39a:	f06f 031b 	mvn.w	r3, #27
    c39e:	e073      	b.n	c488 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c3a4:	7bb9      	ldrb	r1, [r7, #14]
    c3a6:	6a3a      	ldr	r2, [r7, #32]
    c3a8:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c3aa:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c3ac:	683b      	ldr	r3, [r7, #0]
    c3ae:	685b      	ldr	r3, [r3, #4]
    c3b0:	2205      	movs	r2, #5
    c3b2:	4619      	mov	r1, r3
    c3b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c3b6:	4b36      	ldr	r3, [pc, #216]	; (c490 <cdcdf_acm_enable+0x158>)
    c3b8:	4798      	blx	r3
    c3ba:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c3bc:	e047      	b.n	c44e <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    c3be:	f06f 0309 	mvn.w	r3, #9
    c3c2:	e061      	b.n	c488 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    c3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c3c6:	789b      	ldrb	r3, [r3, #2]
    c3c8:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    c3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c3cc:	78db      	ldrb	r3, [r3, #3]
    c3ce:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c3d2:	3304      	adds	r3, #4
    c3d4:	4618      	mov	r0, r3
    c3d6:	4b2f      	ldr	r3, [pc, #188]	; (c494 <cdcdf_acm_enable+0x15c>)
    c3d8:	4798      	blx	r3
    c3da:	4603      	mov	r3, r0
    c3dc:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c3de:	7ebb      	ldrb	r3, [r7, #26]
    c3e0:	7ef9      	ldrb	r1, [r7, #27]
    c3e2:	8bba      	ldrh	r2, [r7, #28]
    c3e4:	4618      	mov	r0, r3
    c3e6:	4b2c      	ldr	r3, [pc, #176]	; (c498 <cdcdf_acm_enable+0x160>)
    c3e8:	4798      	blx	r3
    c3ea:	4603      	mov	r3, r0
    c3ec:	2b00      	cmp	r3, #0
    c3ee:	d002      	beq.n	c3f6 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    c3f0:	f06f 0313 	mvn.w	r3, #19
    c3f4:	e048      	b.n	c488 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c3f6:	7ebb      	ldrb	r3, [r7, #26]
    c3f8:	b25b      	sxtb	r3, r3
    c3fa:	2b00      	cmp	r3, #0
    c3fc:	da0f      	bge.n	c41e <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c3fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c402:	7eb9      	ldrb	r1, [r7, #26]
    c404:	6a3a      	ldr	r2, [r7, #32]
    c406:	4413      	add	r3, r2
    c408:	460a      	mov	r2, r1
    c40a:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    c40c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c410:	6a3a      	ldr	r2, [r7, #32]
    c412:	4413      	add	r3, r2
    c414:	789b      	ldrb	r3, [r3, #2]
    c416:	4618      	mov	r0, r3
    c418:	4b20      	ldr	r3, [pc, #128]	; (c49c <cdcdf_acm_enable+0x164>)
    c41a:	4798      	blx	r3
    c41c:	e007      	b.n	c42e <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c41e:	7eba      	ldrb	r2, [r7, #26]
    c420:	6a3b      	ldr	r3, [r7, #32]
    c422:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c424:	6a3b      	ldr	r3, [r7, #32]
    c426:	791b      	ldrb	r3, [r3, #4]
    c428:	4618      	mov	r0, r3
    c42a:	4b1c      	ldr	r3, [pc, #112]	; (c49c <cdcdf_acm_enable+0x164>)
    c42c:	4798      	blx	r3
			}
			desc->sod = ep;
    c42e:	683b      	ldr	r3, [r7, #0]
    c430:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c432:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c434:	683b      	ldr	r3, [r7, #0]
    c436:	681b      	ldr	r3, [r3, #0]
    c438:	4618      	mov	r0, r3
    c43a:	4b19      	ldr	r3, [pc, #100]	; (c4a0 <cdcdf_acm_enable+0x168>)
    c43c:	4798      	blx	r3
    c43e:	4602      	mov	r2, r0
    c440:	683b      	ldr	r3, [r7, #0]
    c442:	685b      	ldr	r3, [r3, #4]
    c444:	4619      	mov	r1, r3
    c446:	4610      	mov	r0, r2
    c448:	4b16      	ldr	r3, [pc, #88]	; (c4a4 <cdcdf_acm_enable+0x16c>)
    c44a:	4798      	blx	r3
    c44c:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c450:	2b00      	cmp	r3, #0
    c452:	d1b7      	bne.n	c3c4 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c454:	683b      	ldr	r3, [r7, #0]
    c456:	681b      	ldr	r3, [r3, #0]
    c458:	4618      	mov	r0, r3
    c45a:	4b11      	ldr	r3, [pc, #68]	; (c4a0 <cdcdf_acm_enable+0x168>)
    c45c:	4798      	blx	r3
    c45e:	683b      	ldr	r3, [r7, #0]
    c460:	685b      	ldr	r3, [r3, #4]
    c462:	2204      	movs	r2, #4
    c464:	4619      	mov	r1, r3
    c466:	4b0a      	ldr	r3, [pc, #40]	; (c490 <cdcdf_acm_enable+0x158>)
    c468:	4798      	blx	r3
    c46a:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c46c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c470:	3301      	adds	r3, #1
    c472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c476:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c47a:	2b01      	cmp	r3, #1
    c47c:	f67f af6b 	bls.w	c356 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    c480:	4b09      	ldr	r3, [pc, #36]	; (c4a8 <cdcdf_acm_enable+0x170>)
    c482:	2201      	movs	r2, #1
    c484:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c486:	2300      	movs	r3, #0
}
    c488:	4618      	mov	r0, r3
    c48a:	3730      	adds	r7, #48	; 0x30
    c48c:	46bd      	mov	sp, r7
    c48e:	bd80      	pop	{r7, pc}
    c490:	0000d6f9 	.word	0x0000d6f9
    c494:	0000c2d3 	.word	0x0000c2d3
    c498:	00003999 	.word	0x00003999
    c49c:	00003a85 	.word	0x00003a85
    c4a0:	0000c315 	.word	0x0000c315
    c4a4:	0000d755 	.word	0x0000d755
    c4a8:	20000d98 	.word	0x20000d98

0000c4ac <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c4ac:	b580      	push	{r7, lr}
    c4ae:	b088      	sub	sp, #32
    c4b0:	af00      	add	r7, sp, #0
    c4b2:	6078      	str	r0, [r7, #4]
    c4b4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c4b6:	687b      	ldr	r3, [r7, #4]
    c4b8:	689b      	ldr	r3, [r3, #8]
    c4ba:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    c4bc:	683b      	ldr	r3, [r7, #0]
    c4be:	2b00      	cmp	r3, #0
    c4c0:	d00c      	beq.n	c4dc <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c4c2:	683b      	ldr	r3, [r7, #0]
    c4c4:	681b      	ldr	r3, [r3, #0]
    c4c6:	795b      	ldrb	r3, [r3, #5]
    c4c8:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c4ca:	7c7b      	ldrb	r3, [r7, #17]
    c4cc:	2b02      	cmp	r3, #2
    c4ce:	d005      	beq.n	c4dc <cdcdf_acm_disable+0x30>
    c4d0:	7c7b      	ldrb	r3, [r7, #17]
    c4d2:	2b0a      	cmp	r3, #10
    c4d4:	d002      	beq.n	c4dc <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    c4d6:	f06f 0309 	mvn.w	r3, #9
    c4da:	e035      	b.n	c548 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    c4dc:	2300      	movs	r3, #0
    c4de:	77fb      	strb	r3, [r7, #31]
    c4e0:	e01f      	b.n	c522 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    c4e2:	7ffb      	ldrb	r3, [r7, #31]
    c4e4:	69ba      	ldr	r2, [r7, #24]
    c4e6:	5cd3      	ldrb	r3, [r2, r3]
    c4e8:	2bff      	cmp	r3, #255	; 0xff
    c4ea:	d016      	beq.n	c51a <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    c4ec:	7ffb      	ldrb	r3, [r7, #31]
    c4ee:	69ba      	ldr	r2, [r7, #24]
    c4f0:	21ff      	movs	r1, #255	; 0xff
    c4f2:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    c4f4:	7ffb      	ldrb	r3, [r7, #31]
    c4f6:	69ba      	ldr	r2, [r7, #24]
    c4f8:	4413      	add	r3, r2
    c4fa:	789b      	ldrb	r3, [r3, #2]
    c4fc:	2bff      	cmp	r3, #255	; 0xff
    c4fe:	d00d      	beq.n	c51c <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c500:	7ffb      	ldrb	r3, [r7, #31]
    c502:	69ba      	ldr	r2, [r7, #24]
    c504:	4413      	add	r3, r2
    c506:	789b      	ldrb	r3, [r3, #2]
    c508:	4618      	mov	r0, r3
    c50a:	4b11      	ldr	r3, [pc, #68]	; (c550 <cdcdf_acm_disable+0xa4>)
    c50c:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c50e:	7ffb      	ldrb	r3, [r7, #31]
    c510:	69ba      	ldr	r2, [r7, #24]
    c512:	4413      	add	r3, r2
    c514:	22ff      	movs	r2, #255	; 0xff
    c516:	709a      	strb	r2, [r3, #2]
    c518:	e000      	b.n	c51c <cdcdf_acm_disable+0x70>
			continue;
    c51a:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c51c:	7ffb      	ldrb	r3, [r7, #31]
    c51e:	3301      	adds	r3, #1
    c520:	77fb      	strb	r3, [r7, #31]
    c522:	7ffb      	ldrb	r3, [r7, #31]
    c524:	2b01      	cmp	r3, #1
    c526:	d9dc      	bls.n	c4e2 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    c528:	69bb      	ldr	r3, [r7, #24]
    c52a:	791b      	ldrb	r3, [r3, #4]
    c52c:	2bff      	cmp	r3, #255	; 0xff
    c52e:	d007      	beq.n	c540 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    c530:	69bb      	ldr	r3, [r7, #24]
    c532:	791b      	ldrb	r3, [r3, #4]
    c534:	4618      	mov	r0, r3
    c536:	4b06      	ldr	r3, [pc, #24]	; (c550 <cdcdf_acm_disable+0xa4>)
    c538:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c53a:	69bb      	ldr	r3, [r7, #24]
    c53c:	22ff      	movs	r2, #255	; 0xff
    c53e:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    c540:	4b04      	ldr	r3, [pc, #16]	; (c554 <cdcdf_acm_disable+0xa8>)
    c542:	2200      	movs	r2, #0
    c544:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c546:	2300      	movs	r3, #0
}
    c548:	4618      	mov	r0, r3
    c54a:	3720      	adds	r7, #32
    c54c:	46bd      	mov	sp, r7
    c54e:	bd80      	pop	{r7, pc}
    c550:	00003a35 	.word	0x00003a35
    c554:	20000d98 	.word	0x20000d98

0000c558 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    c558:	b580      	push	{r7, lr}
    c55a:	b084      	sub	sp, #16
    c55c:	af00      	add	r7, sp, #0
    c55e:	60f8      	str	r0, [r7, #12]
    c560:	460b      	mov	r3, r1
    c562:	607a      	str	r2, [r7, #4]
    c564:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    c566:	7afb      	ldrb	r3, [r7, #11]
    c568:	2b01      	cmp	r3, #1
    c56a:	d009      	beq.n	c580 <cdcdf_acm_ctrl+0x28>
    c56c:	2b02      	cmp	r3, #2
    c56e:	d00d      	beq.n	c58c <cdcdf_acm_ctrl+0x34>
    c570:	2b00      	cmp	r3, #0
    c572:	d10e      	bne.n	c592 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    c574:	6879      	ldr	r1, [r7, #4]
    c576:	68f8      	ldr	r0, [r7, #12]
    c578:	4b09      	ldr	r3, [pc, #36]	; (c5a0 <cdcdf_acm_ctrl+0x48>)
    c57a:	4798      	blx	r3
    c57c:	4603      	mov	r3, r0
    c57e:	e00a      	b.n	c596 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    c580:	6879      	ldr	r1, [r7, #4]
    c582:	68f8      	ldr	r0, [r7, #12]
    c584:	4b07      	ldr	r3, [pc, #28]	; (c5a4 <cdcdf_acm_ctrl+0x4c>)
    c586:	4798      	blx	r3
    c588:	4603      	mov	r3, r0
    c58a:	e004      	b.n	c596 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    c58c:	f06f 031a 	mvn.w	r3, #26
    c590:	e001      	b.n	c596 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    c592:	f06f 030c 	mvn.w	r3, #12
	}
}
    c596:	4618      	mov	r0, r3
    c598:	3710      	adds	r7, #16
    c59a:	46bd      	mov	sp, r7
    c59c:	bd80      	pop	{r7, pc}
    c59e:	bf00      	nop
    c5a0:	0000c339 	.word	0x0000c339
    c5a4:	0000c4ad 	.word	0x0000c4ad

0000c5a8 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c5a8:	b590      	push	{r4, r7, lr}
    c5aa:	b087      	sub	sp, #28
    c5ac:	af00      	add	r7, sp, #0
    c5ae:	4603      	mov	r3, r0
    c5b0:	6039      	str	r1, [r7, #0]
    c5b2:	71fb      	strb	r3, [r7, #7]
    c5b4:	4613      	mov	r3, r2
    c5b6:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c5b8:	683b      	ldr	r3, [r7, #0]
    c5ba:	799a      	ldrb	r2, [r3, #6]
    c5bc:	79db      	ldrb	r3, [r3, #7]
    c5be:	021b      	lsls	r3, r3, #8
    c5c0:	4313      	orrs	r3, r2
    c5c2:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c5c4:	4b2b      	ldr	r3, [pc, #172]	; (c674 <cdcdf_acm_set_req+0xcc>)
    c5c6:	4798      	blx	r3
    c5c8:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c5ca:	683b      	ldr	r3, [r7, #0]
    c5cc:	785b      	ldrb	r3, [r3, #1]
    c5ce:	2b20      	cmp	r3, #32
    c5d0:	d002      	beq.n	c5d8 <cdcdf_acm_set_req+0x30>
    c5d2:	2b22      	cmp	r3, #34	; 0x22
    c5d4:	d034      	beq.n	c640 <cdcdf_acm_set_req+0x98>
    c5d6:	e046      	b.n	c666 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c5d8:	8afb      	ldrh	r3, [r7, #22]
    c5da:	2b07      	cmp	r3, #7
    c5dc:	d002      	beq.n	c5e4 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c5de:	f04f 33ff 	mov.w	r3, #4294967295
    c5e2:	e042      	b.n	c66a <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c5e4:	79bb      	ldrb	r3, [r7, #6]
    c5e6:	2b00      	cmp	r3, #0
    c5e8:	d107      	bne.n	c5fa <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c5ea:	8afa      	ldrh	r2, [r7, #22]
    c5ec:	79f8      	ldrb	r0, [r7, #7]
    c5ee:	2300      	movs	r3, #0
    c5f0:	6939      	ldr	r1, [r7, #16]
    c5f2:	4c21      	ldr	r4, [pc, #132]	; (c678 <cdcdf_acm_set_req+0xd0>)
    c5f4:	47a0      	blx	r4
    c5f6:	4603      	mov	r3, r0
    c5f8:	e037      	b.n	c66a <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c5fa:	693a      	ldr	r2, [r7, #16]
    c5fc:	f107 0308 	add.w	r3, r7, #8
    c600:	6810      	ldr	r0, [r2, #0]
    c602:	6018      	str	r0, [r3, #0]
    c604:	8891      	ldrh	r1, [r2, #4]
    c606:	7992      	ldrb	r2, [r2, #6]
    c608:	8099      	strh	r1, [r3, #4]
    c60a:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c60c:	4b1b      	ldr	r3, [pc, #108]	; (c67c <cdcdf_acm_set_req+0xd4>)
    c60e:	681b      	ldr	r3, [r3, #0]
    c610:	2b00      	cmp	r3, #0
    c612:	d008      	beq.n	c626 <cdcdf_acm_set_req+0x7e>
    c614:	4b19      	ldr	r3, [pc, #100]	; (c67c <cdcdf_acm_set_req+0xd4>)
    c616:	681b      	ldr	r3, [r3, #0]
    c618:	f107 0208 	add.w	r2, r7, #8
    c61c:	4610      	mov	r0, r2
    c61e:	4798      	blx	r3
    c620:	4603      	mov	r3, r0
    c622:	2b00      	cmp	r3, #0
    c624:	d00a      	beq.n	c63c <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c626:	4b16      	ldr	r3, [pc, #88]	; (c680 <cdcdf_acm_set_req+0xd8>)
    c628:	f107 0208 	add.w	r2, r7, #8
    c62c:	e892 0003 	ldmia.w	r2, {r0, r1}
    c630:	6018      	str	r0, [r3, #0]
    c632:	3304      	adds	r3, #4
    c634:	8019      	strh	r1, [r3, #0]
    c636:	3302      	adds	r3, #2
    c638:	0c0a      	lsrs	r2, r1, #16
    c63a:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c63c:	2300      	movs	r3, #0
    c63e:	e014      	b.n	c66a <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c640:	2300      	movs	r3, #0
    c642:	2200      	movs	r2, #0
    c644:	2100      	movs	r1, #0
    c646:	2000      	movs	r0, #0
    c648:	4c0b      	ldr	r4, [pc, #44]	; (c678 <cdcdf_acm_set_req+0xd0>)
    c64a:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c64c:	4b0d      	ldr	r3, [pc, #52]	; (c684 <cdcdf_acm_set_req+0xdc>)
    c64e:	681b      	ldr	r3, [r3, #0]
    c650:	2b00      	cmp	r3, #0
    c652:	d006      	beq.n	c662 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c654:	4b0b      	ldr	r3, [pc, #44]	; (c684 <cdcdf_acm_set_req+0xdc>)
    c656:	681b      	ldr	r3, [r3, #0]
    c658:	683a      	ldr	r2, [r7, #0]
    c65a:	8852      	ldrh	r2, [r2, #2]
    c65c:	b292      	uxth	r2, r2
    c65e:	4610      	mov	r0, r2
    c660:	4798      	blx	r3
		}
		return ERR_NONE;
    c662:	2300      	movs	r3, #0
    c664:	e001      	b.n	c66a <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c666:	f06f 030c 	mvn.w	r3, #12
	}
}
    c66a:	4618      	mov	r0, r3
    c66c:	371c      	adds	r7, #28
    c66e:	46bd      	mov	sp, r7
    c670:	bd90      	pop	{r4, r7, pc}
    c672:	bf00      	nop
    c674:	0000d5f5 	.word	0x0000d5f5
    c678:	0000d469 	.word	0x0000d469
    c67c:	20000dac 	.word	0x20000dac
    c680:	20000da0 	.word	0x20000da0
    c684:	20000da8 	.word	0x20000da8

0000c688 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c688:	b590      	push	{r4, r7, lr}
    c68a:	b085      	sub	sp, #20
    c68c:	af00      	add	r7, sp, #0
    c68e:	4603      	mov	r3, r0
    c690:	6039      	str	r1, [r7, #0]
    c692:	71fb      	strb	r3, [r7, #7]
    c694:	4613      	mov	r3, r2
    c696:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c698:	683b      	ldr	r3, [r7, #0]
    c69a:	799a      	ldrb	r2, [r3, #6]
    c69c:	79db      	ldrb	r3, [r3, #7]
    c69e:	021b      	lsls	r3, r3, #8
    c6a0:	4313      	orrs	r3, r2
    c6a2:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c6a4:	79bb      	ldrb	r3, [r7, #6]
    c6a6:	2b01      	cmp	r3, #1
    c6a8:	d101      	bne.n	c6ae <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c6aa:	2300      	movs	r3, #0
    c6ac:	e013      	b.n	c6d6 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c6ae:	683b      	ldr	r3, [r7, #0]
    c6b0:	785b      	ldrb	r3, [r3, #1]
    c6b2:	2b21      	cmp	r3, #33	; 0x21
    c6b4:	d10d      	bne.n	c6d2 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c6b6:	89fb      	ldrh	r3, [r7, #14]
    c6b8:	2b07      	cmp	r3, #7
    c6ba:	d002      	beq.n	c6c2 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c6bc:	f04f 33ff 	mov.w	r3, #4294967295
    c6c0:	e009      	b.n	c6d6 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c6c2:	89fa      	ldrh	r2, [r7, #14]
    c6c4:	79f8      	ldrb	r0, [r7, #7]
    c6c6:	2300      	movs	r3, #0
    c6c8:	4905      	ldr	r1, [pc, #20]	; (c6e0 <cdcdf_acm_get_req+0x58>)
    c6ca:	4c06      	ldr	r4, [pc, #24]	; (c6e4 <cdcdf_acm_get_req+0x5c>)
    c6cc:	47a0      	blx	r4
    c6ce:	4603      	mov	r3, r0
    c6d0:	e001      	b.n	c6d6 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c6d2:	f06f 030c 	mvn.w	r3, #12
	}
}
    c6d6:	4618      	mov	r0, r3
    c6d8:	3714      	adds	r7, #20
    c6da:	46bd      	mov	sp, r7
    c6dc:	bd90      	pop	{r4, r7, pc}
    c6de:	bf00      	nop
    c6e0:	20000da0 	.word	0x20000da0
    c6e4:	0000d469 	.word	0x0000d469

0000c6e8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c6e8:	b580      	push	{r7, lr}
    c6ea:	b082      	sub	sp, #8
    c6ec:	af00      	add	r7, sp, #0
    c6ee:	4603      	mov	r3, r0
    c6f0:	6039      	str	r1, [r7, #0]
    c6f2:	71fb      	strb	r3, [r7, #7]
    c6f4:	4613      	mov	r3, r2
    c6f6:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c6f8:	683b      	ldr	r3, [r7, #0]
    c6fa:	781b      	ldrb	r3, [r3, #0]
    c6fc:	095b      	lsrs	r3, r3, #5
    c6fe:	b2db      	uxtb	r3, r3
    c700:	f003 0303 	and.w	r3, r3, #3
    c704:	2b01      	cmp	r3, #1
    c706:	d002      	beq.n	c70e <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    c708:	f06f 0309 	mvn.w	r3, #9
    c70c:	e026      	b.n	c75c <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c70e:	683b      	ldr	r3, [r7, #0]
    c710:	889b      	ldrh	r3, [r3, #4]
    c712:	b29a      	uxth	r2, r3
    c714:	4b13      	ldr	r3, [pc, #76]	; (c764 <cdcdf_acm_req+0x7c>)
    c716:	781b      	ldrb	r3, [r3, #0]
    c718:	b29b      	uxth	r3, r3
    c71a:	429a      	cmp	r2, r3
    c71c:	d007      	beq.n	c72e <cdcdf_acm_req+0x46>
    c71e:	683b      	ldr	r3, [r7, #0]
    c720:	889b      	ldrh	r3, [r3, #4]
    c722:	b29a      	uxth	r2, r3
    c724:	4b0f      	ldr	r3, [pc, #60]	; (c764 <cdcdf_acm_req+0x7c>)
    c726:	785b      	ldrb	r3, [r3, #1]
    c728:	b29b      	uxth	r3, r3
    c72a:	429a      	cmp	r2, r3
    c72c:	d114      	bne.n	c758 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c72e:	683b      	ldr	r3, [r7, #0]
    c730:	781b      	ldrb	r3, [r3, #0]
    c732:	b25b      	sxtb	r3, r3
    c734:	2b00      	cmp	r3, #0
    c736:	da07      	bge.n	c748 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    c738:	79ba      	ldrb	r2, [r7, #6]
    c73a:	79fb      	ldrb	r3, [r7, #7]
    c73c:	6839      	ldr	r1, [r7, #0]
    c73e:	4618      	mov	r0, r3
    c740:	4b09      	ldr	r3, [pc, #36]	; (c768 <cdcdf_acm_req+0x80>)
    c742:	4798      	blx	r3
    c744:	4603      	mov	r3, r0
    c746:	e009      	b.n	c75c <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    c748:	79ba      	ldrb	r2, [r7, #6]
    c74a:	79fb      	ldrb	r3, [r7, #7]
    c74c:	6839      	ldr	r1, [r7, #0]
    c74e:	4618      	mov	r0, r3
    c750:	4b06      	ldr	r3, [pc, #24]	; (c76c <cdcdf_acm_req+0x84>)
    c752:	4798      	blx	r3
    c754:	4603      	mov	r3, r0
    c756:	e001      	b.n	c75c <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    c758:	f06f 0309 	mvn.w	r3, #9
	}
}
    c75c:	4618      	mov	r0, r3
    c75e:	3708      	adds	r7, #8
    c760:	46bd      	mov	sp, r7
    c762:	bd80      	pop	{r7, pc}
    c764:	20000d98 	.word	0x20000d98
    c768:	0000c689 	.word	0x0000c689
    c76c:	0000c5a9 	.word	0x0000c5a9

0000c770 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c770:	b580      	push	{r7, lr}
    c772:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    c774:	4b0b      	ldr	r3, [pc, #44]	; (c7a4 <cdcdf_acm_init+0x34>)
    c776:	4798      	blx	r3
    c778:	4603      	mov	r3, r0
    c77a:	2b01      	cmp	r3, #1
    c77c:	d902      	bls.n	c784 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    c77e:	f06f 0310 	mvn.w	r3, #16
    c782:	e00d      	b.n	c7a0 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c784:	4b08      	ldr	r3, [pc, #32]	; (c7a8 <cdcdf_acm_init+0x38>)
    c786:	4a09      	ldr	r2, [pc, #36]	; (c7ac <cdcdf_acm_init+0x3c>)
    c788:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c78a:	4b07      	ldr	r3, [pc, #28]	; (c7a8 <cdcdf_acm_init+0x38>)
    c78c:	4a08      	ldr	r2, [pc, #32]	; (c7b0 <cdcdf_acm_init+0x40>)
    c78e:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    c790:	4805      	ldr	r0, [pc, #20]	; (c7a8 <cdcdf_acm_init+0x38>)
    c792:	4b08      	ldr	r3, [pc, #32]	; (c7b4 <cdcdf_acm_init+0x44>)
    c794:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c796:	4908      	ldr	r1, [pc, #32]	; (c7b8 <cdcdf_acm_init+0x48>)
    c798:	2001      	movs	r0, #1
    c79a:	4b08      	ldr	r3, [pc, #32]	; (c7bc <cdcdf_acm_init+0x4c>)
    c79c:	4798      	blx	r3
	return ERR_NONE;
    c79e:	2300      	movs	r3, #0
}
    c7a0:	4618      	mov	r0, r3
    c7a2:	bd80      	pop	{r7, pc}
    c7a4:	0000d60d 	.word	0x0000d60d
    c7a8:	20000d8c 	.word	0x20000d8c
    c7ac:	0000c559 	.word	0x0000c559
    c7b0:	20000d98 	.word	0x20000d98
    c7b4:	0000d575 	.word	0x0000d575
    c7b8:	200001d8 	.word	0x200001d8
    c7bc:	0000d4a5 	.word	0x0000d4a5

0000c7c0 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    c7c0:	b590      	push	{r4, r7, lr}
    c7c2:	b083      	sub	sp, #12
    c7c4:	af00      	add	r7, sp, #0
    c7c6:	6078      	str	r0, [r7, #4]
    c7c8:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c7ca:	4b0b      	ldr	r3, [pc, #44]	; (c7f8 <cdcdf_acm_read+0x38>)
    c7cc:	4798      	blx	r3
    c7ce:	4603      	mov	r3, r0
    c7d0:	f083 0301 	eor.w	r3, r3, #1
    c7d4:	b2db      	uxtb	r3, r3
    c7d6:	2b00      	cmp	r3, #0
    c7d8:	d002      	beq.n	c7e0 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    c7da:	f06f 0310 	mvn.w	r3, #16
    c7de:	e007      	b.n	c7f0 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c7e0:	4b06      	ldr	r3, [pc, #24]	; (c7fc <cdcdf_acm_read+0x3c>)
    c7e2:	7918      	ldrb	r0, [r3, #4]
    c7e4:	2300      	movs	r3, #0
    c7e6:	683a      	ldr	r2, [r7, #0]
    c7e8:	6879      	ldr	r1, [r7, #4]
    c7ea:	4c05      	ldr	r4, [pc, #20]	; (c800 <cdcdf_acm_read+0x40>)
    c7ec:	47a0      	blx	r4
    c7ee:	4603      	mov	r3, r0
}
    c7f0:	4618      	mov	r0, r3
    c7f2:	370c      	adds	r7, #12
    c7f4:	46bd      	mov	sp, r7
    c7f6:	bd90      	pop	{r4, r7, pc}
    c7f8:	0000c8e5 	.word	0x0000c8e5
    c7fc:	20000d98 	.word	0x20000d98
    c800:	0000d469 	.word	0x0000d469

0000c804 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    c804:	b590      	push	{r4, r7, lr}
    c806:	b083      	sub	sp, #12
    c808:	af00      	add	r7, sp, #0
    c80a:	6078      	str	r0, [r7, #4]
    c80c:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    c80e:	4b0b      	ldr	r3, [pc, #44]	; (c83c <cdcdf_acm_write+0x38>)
    c810:	4798      	blx	r3
    c812:	4603      	mov	r3, r0
    c814:	f083 0301 	eor.w	r3, r3, #1
    c818:	b2db      	uxtb	r3, r3
    c81a:	2b00      	cmp	r3, #0
    c81c:	d002      	beq.n	c824 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    c81e:	f06f 0310 	mvn.w	r3, #16
    c822:	e007      	b.n	c834 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c824:	4b06      	ldr	r3, [pc, #24]	; (c840 <cdcdf_acm_write+0x3c>)
    c826:	78d8      	ldrb	r0, [r3, #3]
    c828:	2301      	movs	r3, #1
    c82a:	683a      	ldr	r2, [r7, #0]
    c82c:	6879      	ldr	r1, [r7, #4]
    c82e:	4c05      	ldr	r4, [pc, #20]	; (c844 <cdcdf_acm_write+0x40>)
    c830:	47a0      	blx	r4
    c832:	4603      	mov	r3, r0
}
    c834:	4618      	mov	r0, r3
    c836:	370c      	adds	r7, #12
    c838:	46bd      	mov	sp, r7
    c83a:	bd90      	pop	{r4, r7, pc}
    c83c:	0000c8e5 	.word	0x0000c8e5
    c840:	20000d98 	.word	0x20000d98
    c844:	0000d469 	.word	0x0000d469

0000c848 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    c848:	b580      	push	{r7, lr}
    c84a:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    c84c:	4b05      	ldr	r3, [pc, #20]	; (c864 <cdcdf_acm_stop_xfer+0x1c>)
    c84e:	78db      	ldrb	r3, [r3, #3]
    c850:	4618      	mov	r0, r3
    c852:	4b05      	ldr	r3, [pc, #20]	; (c868 <cdcdf_acm_stop_xfer+0x20>)
    c854:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    c856:	4b03      	ldr	r3, [pc, #12]	; (c864 <cdcdf_acm_stop_xfer+0x1c>)
    c858:	791b      	ldrb	r3, [r3, #4]
    c85a:	4618      	mov	r0, r3
    c85c:	4b02      	ldr	r3, [pc, #8]	; (c868 <cdcdf_acm_stop_xfer+0x20>)
    c85e:	4798      	blx	r3
}
    c860:	bf00      	nop
    c862:	bd80      	pop	{r7, pc}
    c864:	20000d98 	.word	0x20000d98
    c868:	00003c5d 	.word	0x00003c5d

0000c86c <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    c86c:	b580      	push	{r7, lr}
    c86e:	b082      	sub	sp, #8
    c870:	af00      	add	r7, sp, #0
    c872:	4603      	mov	r3, r0
    c874:	6039      	str	r1, [r7, #0]
    c876:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    c878:	79fb      	ldrb	r3, [r7, #7]
    c87a:	2b03      	cmp	r3, #3
    c87c:	d822      	bhi.n	c8c4 <cdcdf_acm_register_callback+0x58>
    c87e:	a201      	add	r2, pc, #4	; (adr r2, c884 <cdcdf_acm_register_callback+0x18>)
    c880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c884:	0000c895 	.word	0x0000c895
    c888:	0000c8a5 	.word	0x0000c8a5
    c88c:	0000c8b5 	.word	0x0000c8b5
    c890:	0000c8bd 	.word	0x0000c8bd
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c894:	4b0f      	ldr	r3, [pc, #60]	; (c8d4 <cdcdf_acm_register_callback+0x68>)
    c896:	791b      	ldrb	r3, [r3, #4]
    c898:	683a      	ldr	r2, [r7, #0]
    c89a:	2102      	movs	r1, #2
    c89c:	4618      	mov	r0, r3
    c89e:	4b0e      	ldr	r3, [pc, #56]	; (c8d8 <cdcdf_acm_register_callback+0x6c>)
    c8a0:	4798      	blx	r3
		break;
    c8a2:	e012      	b.n	c8ca <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c8a4:	4b0b      	ldr	r3, [pc, #44]	; (c8d4 <cdcdf_acm_register_callback+0x68>)
    c8a6:	78db      	ldrb	r3, [r3, #3]
    c8a8:	683a      	ldr	r2, [r7, #0]
    c8aa:	2102      	movs	r1, #2
    c8ac:	4618      	mov	r0, r3
    c8ae:	4b0a      	ldr	r3, [pc, #40]	; (c8d8 <cdcdf_acm_register_callback+0x6c>)
    c8b0:	4798      	blx	r3
		break;
    c8b2:	e00a      	b.n	c8ca <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c8b4:	4a09      	ldr	r2, [pc, #36]	; (c8dc <cdcdf_acm_register_callback+0x70>)
    c8b6:	683b      	ldr	r3, [r7, #0]
    c8b8:	6013      	str	r3, [r2, #0]
		break;
    c8ba:	e006      	b.n	c8ca <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c8bc:	4a08      	ldr	r2, [pc, #32]	; (c8e0 <cdcdf_acm_register_callback+0x74>)
    c8be:	683b      	ldr	r3, [r7, #0]
    c8c0:	6013      	str	r3, [r2, #0]
		break;
    c8c2:	e002      	b.n	c8ca <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    c8c4:	f06f 030c 	mvn.w	r3, #12
    c8c8:	e000      	b.n	c8cc <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    c8ca:	2300      	movs	r3, #0
}
    c8cc:	4618      	mov	r0, r3
    c8ce:	3708      	adds	r7, #8
    c8d0:	46bd      	mov	sp, r7
    c8d2:	bd80      	pop	{r7, pc}
    c8d4:	20000d98 	.word	0x20000d98
    c8d8:	00003d89 	.word	0x00003d89
    c8dc:	20000dac 	.word	0x20000dac
    c8e0:	20000da8 	.word	0x20000da8

0000c8e4 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    c8e4:	b480      	push	{r7}
    c8e6:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    c8e8:	4b03      	ldr	r3, [pc, #12]	; (c8f8 <cdcdf_acm_is_enabled+0x14>)
    c8ea:	795b      	ldrb	r3, [r3, #5]
}
    c8ec:	4618      	mov	r0, r3
    c8ee:	46bd      	mov	sp, r7
    c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8f4:	4770      	bx	lr
    c8f6:	bf00      	nop
    c8f8:	20000d98 	.word	0x20000d98

0000c8fc <usb_get_u16>:
{
    c8fc:	b480      	push	{r7}
    c8fe:	b083      	sub	sp, #12
    c900:	af00      	add	r7, sp, #0
    c902:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c904:	687b      	ldr	r3, [r7, #4]
    c906:	781b      	ldrb	r3, [r3, #0]
    c908:	b29a      	uxth	r2, r3
    c90a:	687b      	ldr	r3, [r7, #4]
    c90c:	3301      	adds	r3, #1
    c90e:	781b      	ldrb	r3, [r3, #0]
    c910:	b29b      	uxth	r3, r3
    c912:	021b      	lsls	r3, r3, #8
    c914:	b29b      	uxth	r3, r3
    c916:	4413      	add	r3, r2
    c918:	b29b      	uxth	r3, r3
}
    c91a:	4618      	mov	r0, r3
    c91c:	370c      	adds	r7, #12
    c91e:	46bd      	mov	sp, r7
    c920:	f85d 7b04 	ldr.w	r7, [sp], #4
    c924:	4770      	bx	lr

0000c926 <usb_desc_len>:
{
    c926:	b480      	push	{r7}
    c928:	b083      	sub	sp, #12
    c92a:	af00      	add	r7, sp, #0
    c92c:	6078      	str	r0, [r7, #4]
	return desc[0];
    c92e:	687b      	ldr	r3, [r7, #4]
    c930:	781b      	ldrb	r3, [r3, #0]
}
    c932:	4618      	mov	r0, r3
    c934:	370c      	adds	r7, #12
    c936:	46bd      	mov	sp, r7
    c938:	f85d 7b04 	ldr.w	r7, [sp], #4
    c93c:	4770      	bx	lr
	...

0000c940 <usb_desc_next>:
{
    c940:	b580      	push	{r7, lr}
    c942:	b082      	sub	sp, #8
    c944:	af00      	add	r7, sp, #0
    c946:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c948:	6878      	ldr	r0, [r7, #4]
    c94a:	4b05      	ldr	r3, [pc, #20]	; (c960 <usb_desc_next+0x20>)
    c94c:	4798      	blx	r3
    c94e:	4603      	mov	r3, r0
    c950:	461a      	mov	r2, r3
    c952:	687b      	ldr	r3, [r7, #4]
    c954:	4413      	add	r3, r2
}
    c956:	4618      	mov	r0, r3
    c958:	3708      	adds	r7, #8
    c95a:	46bd      	mov	sp, r7
    c95c:	bd80      	pop	{r7, pc}
    c95e:	bf00      	nop
    c960:	0000c927 	.word	0x0000c927

0000c964 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    c964:	b580      	push	{r7, lr}
    c966:	b082      	sub	sp, #8
    c968:	af00      	add	r7, sp, #0
    c96a:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    c96c:	687b      	ldr	r3, [r7, #4]
    c96e:	3302      	adds	r3, #2
    c970:	4618      	mov	r0, r3
    c972:	4b03      	ldr	r3, [pc, #12]	; (c980 <usb_cfg_desc_total_len+0x1c>)
    c974:	4798      	blx	r3
    c976:	4603      	mov	r3, r0
}
    c978:	4618      	mov	r0, r3
    c97a:	3708      	adds	r7, #8
    c97c:	46bd      	mov	sp, r7
    c97e:	bd80      	pop	{r7, pc}
    c980:	0000c8fd 	.word	0x0000c8fd

0000c984 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    c984:	b590      	push	{r4, r7, lr}
    c986:	b085      	sub	sp, #20
    c988:	af00      	add	r7, sp, #0
    c98a:	4603      	mov	r3, r0
    c98c:	6039      	str	r1, [r7, #0]
    c98e:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    c990:	2300      	movs	r3, #0
    c992:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    c994:	683b      	ldr	r3, [r7, #0]
    c996:	799a      	ldrb	r2, [r3, #6]
    c998:	79db      	ldrb	r3, [r3, #7]
    c99a:	021b      	lsls	r3, r3, #8
    c99c:	4313      	orrs	r3, r2
    c99e:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    c9a0:	897b      	ldrh	r3, [r7, #10]
    c9a2:	2b12      	cmp	r3, #18
    c9a4:	d901      	bls.n	c9aa <usbdc_get_dev_desc+0x26>
		length = 0x12;
    c9a6:	2312      	movs	r3, #18
    c9a8:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    c9aa:	68fb      	ldr	r3, [r7, #12]
    c9ac:	2b00      	cmp	r3, #0
    c9ae:	d10a      	bne.n	c9c6 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c9b0:	4b0f      	ldr	r3, [pc, #60]	; (c9f0 <usbdc_get_dev_desc+0x6c>)
    c9b2:	681b      	ldr	r3, [r3, #0]
    c9b4:	6818      	ldr	r0, [r3, #0]
    c9b6:	4b0e      	ldr	r3, [pc, #56]	; (c9f0 <usbdc_get_dev_desc+0x6c>)
    c9b8:	681b      	ldr	r3, [r3, #0]
    c9ba:	685b      	ldr	r3, [r3, #4]
    c9bc:	2201      	movs	r2, #1
    c9be:	4619      	mov	r1, r3
    c9c0:	4b0c      	ldr	r3, [pc, #48]	; (c9f4 <usbdc_get_dev_desc+0x70>)
    c9c2:	4798      	blx	r3
    c9c4:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    c9c6:	68fb      	ldr	r3, [r7, #12]
    c9c8:	2b00      	cmp	r3, #0
    c9ca:	d101      	bne.n	c9d0 <usbdc_get_dev_desc+0x4c>
		return false;
    c9cc:	2300      	movs	r3, #0
    c9ce:	e00b      	b.n	c9e8 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c9d0:	897a      	ldrh	r2, [r7, #10]
    c9d2:	79f8      	ldrb	r0, [r7, #7]
    c9d4:	2300      	movs	r3, #0
    c9d6:	68f9      	ldr	r1, [r7, #12]
    c9d8:	4c07      	ldr	r4, [pc, #28]	; (c9f8 <usbdc_get_dev_desc+0x74>)
    c9da:	47a0      	blx	r4
    c9dc:	4603      	mov	r3, r0
    c9de:	2b00      	cmp	r3, #0
    c9e0:	d001      	beq.n	c9e6 <usbdc_get_dev_desc+0x62>
		return false;
    c9e2:	2300      	movs	r3, #0
    c9e4:	e000      	b.n	c9e8 <usbdc_get_dev_desc+0x64>
	}
	return true;
    c9e6:	2301      	movs	r3, #1
}
    c9e8:	4618      	mov	r0, r3
    c9ea:	3714      	adds	r7, #20
    c9ec:	46bd      	mov	sp, r7
    c9ee:	bd90      	pop	{r4, r7, pc}
    c9f0:	20000db0 	.word	0x20000db0
    c9f4:	0000d6f9 	.word	0x0000d6f9
    c9f8:	0000d469 	.word	0x0000d469

0000c9fc <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    c9fc:	b590      	push	{r4, r7, lr}
    c9fe:	b087      	sub	sp, #28
    ca00:	af00      	add	r7, sp, #0
    ca02:	4603      	mov	r3, r0
    ca04:	6039      	str	r1, [r7, #0]
    ca06:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    ca08:	2300      	movs	r3, #0
    ca0a:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    ca0c:	683b      	ldr	r3, [r7, #0]
    ca0e:	799a      	ldrb	r2, [r3, #6]
    ca10:	79db      	ldrb	r3, [r3, #7]
    ca12:	021b      	lsls	r3, r3, #8
    ca14:	4313      	orrs	r3, r2
    ca16:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    ca18:	683b      	ldr	r3, [r7, #0]
    ca1a:	885b      	ldrh	r3, [r3, #2]
    ca1c:	b29b      	uxth	r3, r3
    ca1e:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ca20:	8a7a      	ldrh	r2, [r7, #18]
    ca22:	4b1e      	ldr	r3, [pc, #120]	; (ca9c <usbdc_get_cfg_desc+0xa0>)
    ca24:	7f1b      	ldrb	r3, [r3, #28]
    ca26:	3b01      	subs	r3, #1
    ca28:	4013      	ands	r3, r2
    ca2a:	2b00      	cmp	r3, #0
    ca2c:	bf0c      	ite	eq
    ca2e:	2301      	moveq	r3, #1
    ca30:	2300      	movne	r3, #0
    ca32:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    ca34:	697b      	ldr	r3, [r7, #20]
    ca36:	2b00      	cmp	r3, #0
    ca38:	d10c      	bne.n	ca54 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    ca3a:	4b18      	ldr	r3, [pc, #96]	; (ca9c <usbdc_get_cfg_desc+0xa0>)
    ca3c:	681b      	ldr	r3, [r3, #0]
    ca3e:	6818      	ldr	r0, [r3, #0]
    ca40:	4b16      	ldr	r3, [pc, #88]	; (ca9c <usbdc_get_cfg_desc+0xa0>)
    ca42:	681b      	ldr	r3, [r3, #0]
    ca44:	6859      	ldr	r1, [r3, #4]
    ca46:	7c3b      	ldrb	r3, [r7, #16]
    ca48:	3301      	adds	r3, #1
    ca4a:	b2db      	uxtb	r3, r3
    ca4c:	461a      	mov	r2, r3
    ca4e:	4b14      	ldr	r3, [pc, #80]	; (caa0 <usbdc_get_cfg_desc+0xa4>)
    ca50:	4798      	blx	r3
    ca52:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    ca54:	697b      	ldr	r3, [r7, #20]
    ca56:	2b00      	cmp	r3, #0
    ca58:	d101      	bne.n	ca5e <usbdc_get_cfg_desc+0x62>
		return false;
    ca5a:	2300      	movs	r3, #0
    ca5c:	e019      	b.n	ca92 <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    ca5e:	6978      	ldr	r0, [r7, #20]
    ca60:	4b10      	ldr	r3, [pc, #64]	; (caa4 <usbdc_get_cfg_desc+0xa8>)
    ca62:	4798      	blx	r3
    ca64:	4603      	mov	r3, r0
    ca66:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    ca68:	8a7a      	ldrh	r2, [r7, #18]
    ca6a:	89fb      	ldrh	r3, [r7, #14]
    ca6c:	429a      	cmp	r2, r3
    ca6e:	d802      	bhi.n	ca76 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    ca70:	2300      	movs	r3, #0
    ca72:	747b      	strb	r3, [r7, #17]
    ca74:	e001      	b.n	ca7a <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    ca76:	89fb      	ldrh	r3, [r7, #14]
    ca78:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    ca7a:	8a7a      	ldrh	r2, [r7, #18]
    ca7c:	7c7b      	ldrb	r3, [r7, #17]
    ca7e:	79f8      	ldrb	r0, [r7, #7]
    ca80:	6979      	ldr	r1, [r7, #20]
    ca82:	4c09      	ldr	r4, [pc, #36]	; (caa8 <usbdc_get_cfg_desc+0xac>)
    ca84:	47a0      	blx	r4
    ca86:	4603      	mov	r3, r0
    ca88:	2b00      	cmp	r3, #0
    ca8a:	d001      	beq.n	ca90 <usbdc_get_cfg_desc+0x94>
		return false;
    ca8c:	2300      	movs	r3, #0
    ca8e:	e000      	b.n	ca92 <usbdc_get_cfg_desc+0x96>
	}
	return true;
    ca90:	2301      	movs	r3, #1
}
    ca92:	4618      	mov	r0, r3
    ca94:	371c      	adds	r7, #28
    ca96:	46bd      	mov	sp, r7
    ca98:	bd90      	pop	{r4, r7, pc}
    ca9a:	bf00      	nop
    ca9c:	20000db0 	.word	0x20000db0
    caa0:	0000d7b9 	.word	0x0000d7b9
    caa4:	0000c965 	.word	0x0000c965
    caa8:	0000d469 	.word	0x0000d469

0000caac <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    caac:	b590      	push	{r4, r7, lr}
    caae:	b085      	sub	sp, #20
    cab0:	af00      	add	r7, sp, #0
    cab2:	4603      	mov	r3, r0
    cab4:	6039      	str	r1, [r7, #0]
    cab6:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    cab8:	683b      	ldr	r3, [r7, #0]
    caba:	799a      	ldrb	r2, [r3, #6]
    cabc:	79db      	ldrb	r3, [r3, #7]
    cabe:	021b      	lsls	r3, r3, #8
    cac0:	4313      	orrs	r3, r2
    cac2:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    cac4:	683b      	ldr	r3, [r7, #0]
    cac6:	885b      	ldrh	r3, [r3, #2]
    cac8:	b29b      	uxth	r3, r3
    caca:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cacc:	89fa      	ldrh	r2, [r7, #14]
    cace:	4b1a      	ldr	r3, [pc, #104]	; (cb38 <usbdc_get_str_desc+0x8c>)
    cad0:	7f1b      	ldrb	r3, [r3, #28]
    cad2:	3b01      	subs	r3, #1
    cad4:	4013      	ands	r3, r2
    cad6:	2b00      	cmp	r3, #0
    cad8:	bf0c      	ite	eq
    cada:	2301      	moveq	r3, #1
    cadc:	2300      	movne	r3, #0
    cade:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    cae0:	4b15      	ldr	r3, [pc, #84]	; (cb38 <usbdc_get_str_desc+0x8c>)
    cae2:	681b      	ldr	r3, [r3, #0]
    cae4:	6818      	ldr	r0, [r3, #0]
    cae6:	4b14      	ldr	r3, [pc, #80]	; (cb38 <usbdc_get_str_desc+0x8c>)
    cae8:	681b      	ldr	r3, [r3, #0]
    caea:	685b      	ldr	r3, [r3, #4]
    caec:	7b3a      	ldrb	r2, [r7, #12]
    caee:	4619      	mov	r1, r3
    caf0:	4b12      	ldr	r3, [pc, #72]	; (cb3c <usbdc_get_str_desc+0x90>)
    caf2:	4798      	blx	r3
    caf4:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    caf6:	68bb      	ldr	r3, [r7, #8]
    caf8:	2b00      	cmp	r3, #0
    cafa:	d101      	bne.n	cb00 <usbdc_get_str_desc+0x54>
		return false;
    cafc:	2300      	movs	r3, #0
    cafe:	e017      	b.n	cb30 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    cb00:	68bb      	ldr	r3, [r7, #8]
    cb02:	781b      	ldrb	r3, [r3, #0]
    cb04:	b29b      	uxth	r3, r3
    cb06:	89fa      	ldrh	r2, [r7, #14]
    cb08:	429a      	cmp	r2, r3
    cb0a:	d802      	bhi.n	cb12 <usbdc_get_str_desc+0x66>
		need_zlp = false;
    cb0c:	2300      	movs	r3, #0
    cb0e:	737b      	strb	r3, [r7, #13]
    cb10:	e002      	b.n	cb18 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    cb12:	68bb      	ldr	r3, [r7, #8]
    cb14:	781b      	ldrb	r3, [r3, #0]
    cb16:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    cb18:	89fa      	ldrh	r2, [r7, #14]
    cb1a:	7b7b      	ldrb	r3, [r7, #13]
    cb1c:	79f8      	ldrb	r0, [r7, #7]
    cb1e:	68b9      	ldr	r1, [r7, #8]
    cb20:	4c07      	ldr	r4, [pc, #28]	; (cb40 <usbdc_get_str_desc+0x94>)
    cb22:	47a0      	blx	r4
    cb24:	4603      	mov	r3, r0
    cb26:	2b00      	cmp	r3, #0
    cb28:	d001      	beq.n	cb2e <usbdc_get_str_desc+0x82>
		return false;
    cb2a:	2300      	movs	r3, #0
    cb2c:	e000      	b.n	cb30 <usbdc_get_str_desc+0x84>
	}
	return true;
    cb2e:	2301      	movs	r3, #1
}
    cb30:	4618      	mov	r0, r3
    cb32:	3714      	adds	r7, #20
    cb34:	46bd      	mov	sp, r7
    cb36:	bd90      	pop	{r4, r7, pc}
    cb38:	20000db0 	.word	0x20000db0
    cb3c:	0000d831 	.word	0x0000d831
    cb40:	0000d469 	.word	0x0000d469

0000cb44 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    cb44:	b580      	push	{r7, lr}
    cb46:	b084      	sub	sp, #16
    cb48:	af00      	add	r7, sp, #0
    cb4a:	4603      	mov	r3, r0
    cb4c:	6039      	str	r1, [r7, #0]
    cb4e:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    cb50:	683b      	ldr	r3, [r7, #0]
    cb52:	885b      	ldrh	r3, [r3, #2]
    cb54:	b29b      	uxth	r3, r3
    cb56:	0a1b      	lsrs	r3, r3, #8
    cb58:	b29b      	uxth	r3, r3
    cb5a:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    cb5c:	7bfb      	ldrb	r3, [r7, #15]
    cb5e:	2b02      	cmp	r3, #2
    cb60:	d00d      	beq.n	cb7e <usbdc_get_desc_req+0x3a>
    cb62:	2b03      	cmp	r3, #3
    cb64:	d012      	beq.n	cb8c <usbdc_get_desc_req+0x48>
    cb66:	2b01      	cmp	r3, #1
    cb68:	d002      	beq.n	cb70 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    cb6a:	bf00      	nop
	}
	return false;
    cb6c:	2300      	movs	r3, #0
    cb6e:	e013      	b.n	cb98 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    cb70:	79fb      	ldrb	r3, [r7, #7]
    cb72:	6839      	ldr	r1, [r7, #0]
    cb74:	4618      	mov	r0, r3
    cb76:	4b0a      	ldr	r3, [pc, #40]	; (cba0 <usbdc_get_desc_req+0x5c>)
    cb78:	4798      	blx	r3
    cb7a:	4603      	mov	r3, r0
    cb7c:	e00c      	b.n	cb98 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    cb7e:	79fb      	ldrb	r3, [r7, #7]
    cb80:	6839      	ldr	r1, [r7, #0]
    cb82:	4618      	mov	r0, r3
    cb84:	4b07      	ldr	r3, [pc, #28]	; (cba4 <usbdc_get_desc_req+0x60>)
    cb86:	4798      	blx	r3
    cb88:	4603      	mov	r3, r0
    cb8a:	e005      	b.n	cb98 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    cb8c:	79fb      	ldrb	r3, [r7, #7]
    cb8e:	6839      	ldr	r1, [r7, #0]
    cb90:	4618      	mov	r0, r3
    cb92:	4b05      	ldr	r3, [pc, #20]	; (cba8 <usbdc_get_desc_req+0x64>)
    cb94:	4798      	blx	r3
    cb96:	4603      	mov	r3, r0
}
    cb98:	4618      	mov	r0, r3
    cb9a:	3710      	adds	r7, #16
    cb9c:	46bd      	mov	sp, r7
    cb9e:	bd80      	pop	{r7, pc}
    cba0:	0000c985 	.word	0x0000c985
    cba4:	0000c9fd 	.word	0x0000c9fd
    cba8:	0000caad 	.word	0x0000caad

0000cbac <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    cbac:	b590      	push	{r4, r7, lr}
    cbae:	b085      	sub	sp, #20
    cbb0:	af00      	add	r7, sp, #0
    cbb2:	4603      	mov	r3, r0
    cbb4:	6039      	str	r1, [r7, #0]
    cbb6:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    cbb8:	683b      	ldr	r3, [r7, #0]
    cbba:	781b      	ldrb	r3, [r3, #0]
    cbbc:	f003 031f 	and.w	r3, r3, #31
    cbc0:	2b00      	cmp	r3, #0
    cbc2:	db1b      	blt.n	cbfc <usbdc_get_status_req+0x50>
    cbc4:	2b01      	cmp	r3, #1
    cbc6:	dd02      	ble.n	cbce <usbdc_get_status_req+0x22>
    cbc8:	2b02      	cmp	r3, #2
    cbca:	d003      	beq.n	cbd4 <usbdc_get_status_req+0x28>
    cbcc:	e016      	b.n	cbfc <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    cbce:	2300      	movs	r3, #0
    cbd0:	60fb      	str	r3, [r7, #12]
		break;
    cbd2:	e015      	b.n	cc00 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    cbd4:	683b      	ldr	r3, [r7, #0]
    cbd6:	889b      	ldrh	r3, [r3, #4]
    cbd8:	b29b      	uxth	r3, r3
    cbda:	b2db      	uxtb	r3, r3
    cbdc:	2102      	movs	r1, #2
    cbde:	4618      	mov	r0, r3
    cbe0:	4b0f      	ldr	r3, [pc, #60]	; (cc20 <usbdc_get_status_req+0x74>)
    cbe2:	4798      	blx	r3
    cbe4:	4603      	mov	r3, r0
    cbe6:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    cbe8:	68fb      	ldr	r3, [r7, #12]
    cbea:	2b00      	cmp	r3, #0
    cbec:	da01      	bge.n	cbf2 <usbdc_get_status_req+0x46>
			return false;
    cbee:	2300      	movs	r3, #0
    cbf0:	e012      	b.n	cc18 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    cbf2:	68fb      	ldr	r3, [r7, #12]
    cbf4:	f003 0301 	and.w	r3, r3, #1
    cbf8:	60fb      	str	r3, [r7, #12]
		break;
    cbfa:	e001      	b.n	cc00 <usbdc_get_status_req+0x54>
	default:
		return false;
    cbfc:	2300      	movs	r3, #0
    cbfe:	e00b      	b.n	cc18 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    cc00:	4b08      	ldr	r3, [pc, #32]	; (cc24 <usbdc_get_status_req+0x78>)
    cc02:	695b      	ldr	r3, [r3, #20]
    cc04:	89ba      	ldrh	r2, [r7, #12]
    cc06:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    cc08:	4b06      	ldr	r3, [pc, #24]	; (cc24 <usbdc_get_status_req+0x78>)
    cc0a:	6959      	ldr	r1, [r3, #20]
    cc0c:	79f8      	ldrb	r0, [r7, #7]
    cc0e:	2300      	movs	r3, #0
    cc10:	2202      	movs	r2, #2
    cc12:	4c05      	ldr	r4, [pc, #20]	; (cc28 <usbdc_get_status_req+0x7c>)
    cc14:	47a0      	blx	r4
	return true;
    cc16:	2301      	movs	r3, #1
}
    cc18:	4618      	mov	r0, r3
    cc1a:	3714      	adds	r7, #20
    cc1c:	46bd      	mov	sp, r7
    cc1e:	bd90      	pop	{r4, r7, pc}
    cc20:	00003d35 	.word	0x00003d35
    cc24:	20000db0 	.word	0x20000db0
    cc28:	0000d469 	.word	0x0000d469

0000cc2c <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    cc2c:	b590      	push	{r4, r7, lr}
    cc2e:	b085      	sub	sp, #20
    cc30:	af00      	add	r7, sp, #0
    cc32:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    cc34:	4b1f      	ldr	r3, [pc, #124]	; (ccb4 <usbdc_get_interface+0x88>)
    cc36:	691b      	ldr	r3, [r3, #16]
    cc38:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    cc3a:	4b1e      	ldr	r3, [pc, #120]	; (ccb4 <usbdc_get_interface+0x88>)
    cc3c:	7f5b      	ldrb	r3, [r3, #29]
    cc3e:	461a      	mov	r2, r3
    cc40:	687b      	ldr	r3, [r7, #4]
    cc42:	889b      	ldrh	r3, [r3, #4]
    cc44:	b29b      	uxth	r3, r3
    cc46:	fa42 f303 	asr.w	r3, r2, r3
    cc4a:	f003 0301 	and.w	r3, r3, #1
    cc4e:	2b00      	cmp	r3, #0
    cc50:	d128      	bne.n	cca4 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    cc52:	4b18      	ldr	r3, [pc, #96]	; (ccb4 <usbdc_get_interface+0x88>)
    cc54:	695b      	ldr	r3, [r3, #20]
    cc56:	2200      	movs	r2, #0
    cc58:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    cc5a:	4b16      	ldr	r3, [pc, #88]	; (ccb4 <usbdc_get_interface+0x88>)
    cc5c:	6959      	ldr	r1, [r3, #20]
    cc5e:	2300      	movs	r3, #0
    cc60:	2201      	movs	r2, #1
    cc62:	2000      	movs	r0, #0
    cc64:	4c14      	ldr	r4, [pc, #80]	; (ccb8 <usbdc_get_interface+0x8c>)
    cc66:	47a0      	blx	r4
		return true;
    cc68:	2301      	movs	r3, #1
    cc6a:	e01f      	b.n	ccac <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    cc6c:	68fb      	ldr	r3, [r7, #12]
    cc6e:	685b      	ldr	r3, [r3, #4]
    cc70:	687a      	ldr	r2, [r7, #4]
    cc72:	2102      	movs	r1, #2
    cc74:	68f8      	ldr	r0, [r7, #12]
    cc76:	4798      	blx	r3
    cc78:	60b8      	str	r0, [r7, #8]
    cc7a:	68bb      	ldr	r3, [r7, #8]
    cc7c:	2b00      	cmp	r3, #0
    cc7e:	da03      	bge.n	cc88 <usbdc_get_interface+0x5c>
			func = func->next;
    cc80:	68fb      	ldr	r3, [r7, #12]
    cc82:	681b      	ldr	r3, [r3, #0]
    cc84:	60fb      	str	r3, [r7, #12]
    cc86:	e00d      	b.n	cca4 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    cc88:	4b0a      	ldr	r3, [pc, #40]	; (ccb4 <usbdc_get_interface+0x88>)
    cc8a:	695b      	ldr	r3, [r3, #20]
    cc8c:	68ba      	ldr	r2, [r7, #8]
    cc8e:	b2d2      	uxtb	r2, r2
    cc90:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    cc92:	4b08      	ldr	r3, [pc, #32]	; (ccb4 <usbdc_get_interface+0x88>)
    cc94:	6959      	ldr	r1, [r3, #20]
    cc96:	2300      	movs	r3, #0
    cc98:	2201      	movs	r2, #1
    cc9a:	2000      	movs	r0, #0
    cc9c:	4c06      	ldr	r4, [pc, #24]	; (ccb8 <usbdc_get_interface+0x8c>)
    cc9e:	47a0      	blx	r4
			return true;
    cca0:	2301      	movs	r3, #1
    cca2:	e003      	b.n	ccac <usbdc_get_interface+0x80>
	while (NULL != func) {
    cca4:	68fb      	ldr	r3, [r7, #12]
    cca6:	2b00      	cmp	r3, #0
    cca8:	d1e0      	bne.n	cc6c <usbdc_get_interface+0x40>
		}
	}
	return false;
    ccaa:	2300      	movs	r3, #0
}
    ccac:	4618      	mov	r0, r3
    ccae:	3714      	adds	r7, #20
    ccb0:	46bd      	mov	sp, r7
    ccb2:	bd90      	pop	{r4, r7, pc}
    ccb4:	20000db0 	.word	0x20000db0
    ccb8:	0000d469 	.word	0x0000d469

0000ccbc <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    ccbc:	b590      	push	{r4, r7, lr}
    ccbe:	b083      	sub	sp, #12
    ccc0:	af00      	add	r7, sp, #0
    ccc2:	4603      	mov	r3, r0
    ccc4:	6039      	str	r1, [r7, #0]
    ccc6:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    ccc8:	683b      	ldr	r3, [r7, #0]
    ccca:	785b      	ldrb	r3, [r3, #1]
    cccc:	2b0a      	cmp	r3, #10
    ccce:	d83a      	bhi.n	cd46 <usbdc_get_req+0x8a>
    ccd0:	a201      	add	r2, pc, #4	; (adr r2, ccd8 <usbdc_get_req+0x1c>)
    ccd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ccd6:	bf00      	nop
    ccd8:	0000cd2f 	.word	0x0000cd2f
    ccdc:	0000cd47 	.word	0x0000cd47
    cce0:	0000cd47 	.word	0x0000cd47
    cce4:	0000cd47 	.word	0x0000cd47
    cce8:	0000cd47 	.word	0x0000cd47
    ccec:	0000cd47 	.word	0x0000cd47
    ccf0:	0000cd05 	.word	0x0000cd05
    ccf4:	0000cd47 	.word	0x0000cd47
    ccf8:	0000cd13 	.word	0x0000cd13
    ccfc:	0000cd47 	.word	0x0000cd47
    cd00:	0000cd3d 	.word	0x0000cd3d
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    cd04:	79fb      	ldrb	r3, [r7, #7]
    cd06:	6839      	ldr	r1, [r7, #0]
    cd08:	4618      	mov	r0, r3
    cd0a:	4b11      	ldr	r3, [pc, #68]	; (cd50 <usbdc_get_req+0x94>)
    cd0c:	4798      	blx	r3
    cd0e:	4603      	mov	r3, r0
    cd10:	e01a      	b.n	cd48 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    cd12:	4b10      	ldr	r3, [pc, #64]	; (cd54 <usbdc_get_req+0x98>)
    cd14:	695b      	ldr	r3, [r3, #20]
    cd16:	4a0f      	ldr	r2, [pc, #60]	; (cd54 <usbdc_get_req+0x98>)
    cd18:	7ed2      	ldrb	r2, [r2, #27]
    cd1a:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    cd1c:	4b0d      	ldr	r3, [pc, #52]	; (cd54 <usbdc_get_req+0x98>)
    cd1e:	6959      	ldr	r1, [r3, #20]
    cd20:	79f8      	ldrb	r0, [r7, #7]
    cd22:	2300      	movs	r3, #0
    cd24:	2201      	movs	r2, #1
    cd26:	4c0c      	ldr	r4, [pc, #48]	; (cd58 <usbdc_get_req+0x9c>)
    cd28:	47a0      	blx	r4
		return true;
    cd2a:	2301      	movs	r3, #1
    cd2c:	e00c      	b.n	cd48 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    cd2e:	79fb      	ldrb	r3, [r7, #7]
    cd30:	6839      	ldr	r1, [r7, #0]
    cd32:	4618      	mov	r0, r3
    cd34:	4b09      	ldr	r3, [pc, #36]	; (cd5c <usbdc_get_req+0xa0>)
    cd36:	4798      	blx	r3
    cd38:	4603      	mov	r3, r0
    cd3a:	e005      	b.n	cd48 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    cd3c:	6838      	ldr	r0, [r7, #0]
    cd3e:	4b08      	ldr	r3, [pc, #32]	; (cd60 <usbdc_get_req+0xa4>)
    cd40:	4798      	blx	r3
    cd42:	4603      	mov	r3, r0
    cd44:	e000      	b.n	cd48 <usbdc_get_req+0x8c>
	default:
		return false;
    cd46:	2300      	movs	r3, #0
	}
}
    cd48:	4618      	mov	r0, r3
    cd4a:	370c      	adds	r7, #12
    cd4c:	46bd      	mov	sp, r7
    cd4e:	bd90      	pop	{r4, r7, pc}
    cd50:	0000cb45 	.word	0x0000cb45
    cd54:	20000db0 	.word	0x20000db0
    cd58:	0000d469 	.word	0x0000d469
    cd5c:	0000cbad 	.word	0x0000cbad
    cd60:	0000cc2d 	.word	0x0000cc2d

0000cd64 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    cd64:	b590      	push	{r4, r7, lr}
    cd66:	b083      	sub	sp, #12
    cd68:	af00      	add	r7, sp, #0
    cd6a:	4603      	mov	r3, r0
    cd6c:	6039      	str	r1, [r7, #0]
    cd6e:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    cd70:	683b      	ldr	r3, [r7, #0]
    cd72:	781b      	ldrb	r3, [r3, #0]
    cd74:	f003 031f 	and.w	r3, r3, #31
    cd78:	2b02      	cmp	r3, #2
    cd7a:	d116      	bne.n	cdaa <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    cd7c:	683b      	ldr	r3, [r7, #0]
    cd7e:	88db      	ldrh	r3, [r3, #6]
    cd80:	b29b      	uxth	r3, r3
    cd82:	2b00      	cmp	r3, #0
    cd84:	d001      	beq.n	cd8a <usbdc_clear_ftr_req+0x26>
			return false;
    cd86:	2300      	movs	r3, #0
    cd88:	e010      	b.n	cdac <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    cd8a:	683b      	ldr	r3, [r7, #0]
    cd8c:	889b      	ldrh	r3, [r3, #4]
    cd8e:	b29b      	uxth	r3, r3
    cd90:	b2db      	uxtb	r3, r3
    cd92:	2100      	movs	r1, #0
    cd94:	4618      	mov	r0, r3
    cd96:	4b07      	ldr	r3, [pc, #28]	; (cdb4 <usbdc_clear_ftr_req+0x50>)
    cd98:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    cd9a:	79f8      	ldrb	r0, [r7, #7]
    cd9c:	2301      	movs	r3, #1
    cd9e:	2200      	movs	r2, #0
    cda0:	2100      	movs	r1, #0
    cda2:	4c05      	ldr	r4, [pc, #20]	; (cdb8 <usbdc_clear_ftr_req+0x54>)
    cda4:	47a0      	blx	r4
		return true;
    cda6:	2301      	movs	r3, #1
    cda8:	e000      	b.n	cdac <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    cdaa:	2300      	movs	r3, #0
	}
}
    cdac:	4618      	mov	r0, r3
    cdae:	370c      	adds	r7, #12
    cdb0:	46bd      	mov	sp, r7
    cdb2:	bd90      	pop	{r4, r7, pc}
    cdb4:	00003d35 	.word	0x00003d35
    cdb8:	0000d469 	.word	0x0000d469

0000cdbc <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    cdbc:	b590      	push	{r4, r7, lr}
    cdbe:	b083      	sub	sp, #12
    cdc0:	af00      	add	r7, sp, #0
    cdc2:	4603      	mov	r3, r0
    cdc4:	6039      	str	r1, [r7, #0]
    cdc6:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    cdc8:	683b      	ldr	r3, [r7, #0]
    cdca:	781b      	ldrb	r3, [r3, #0]
    cdcc:	f003 031f 	and.w	r3, r3, #31
    cdd0:	2b02      	cmp	r3, #2
    cdd2:	d116      	bne.n	ce02 <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    cdd4:	683b      	ldr	r3, [r7, #0]
    cdd6:	88db      	ldrh	r3, [r3, #6]
    cdd8:	b29b      	uxth	r3, r3
    cdda:	2b00      	cmp	r3, #0
    cddc:	d001      	beq.n	cde2 <usbdc_set_ftr_req+0x26>
			return false;
    cdde:	2300      	movs	r3, #0
    cde0:	e010      	b.n	ce04 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    cde2:	683b      	ldr	r3, [r7, #0]
    cde4:	889b      	ldrh	r3, [r3, #4]
    cde6:	b29b      	uxth	r3, r3
    cde8:	b2db      	uxtb	r3, r3
    cdea:	2101      	movs	r1, #1
    cdec:	4618      	mov	r0, r3
    cdee:	4b07      	ldr	r3, [pc, #28]	; (ce0c <usbdc_set_ftr_req+0x50>)
    cdf0:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    cdf2:	79f8      	ldrb	r0, [r7, #7]
    cdf4:	2301      	movs	r3, #1
    cdf6:	2200      	movs	r2, #0
    cdf8:	2100      	movs	r1, #0
    cdfa:	4c05      	ldr	r4, [pc, #20]	; (ce10 <usbdc_set_ftr_req+0x54>)
    cdfc:	47a0      	blx	r4
		return true;
    cdfe:	2301      	movs	r3, #1
    ce00:	e000      	b.n	ce04 <usbdc_set_ftr_req+0x48>
	default:
		return false;
    ce02:	2300      	movs	r3, #0
	}
}
    ce04:	4618      	mov	r0, r3
    ce06:	370c      	adds	r7, #12
    ce08:	46bd      	mov	sp, r7
    ce0a:	bd90      	pop	{r4, r7, pc}
    ce0c:	00003d35 	.word	0x00003d35
    ce10:	0000d469 	.word	0x0000d469

0000ce14 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    ce14:	b580      	push	{r7, lr}
    ce16:	b082      	sub	sp, #8
    ce18:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ce1a:	4b0a      	ldr	r3, [pc, #40]	; (ce44 <usbdc_unconfig+0x30>)
    ce1c:	691b      	ldr	r3, [r3, #16]
    ce1e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    ce20:	e008      	b.n	ce34 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    ce22:	687b      	ldr	r3, [r7, #4]
    ce24:	685b      	ldr	r3, [r3, #4]
    ce26:	2200      	movs	r2, #0
    ce28:	2101      	movs	r1, #1
    ce2a:	6878      	ldr	r0, [r7, #4]
    ce2c:	4798      	blx	r3
		func = func->next;
    ce2e:	687b      	ldr	r3, [r7, #4]
    ce30:	681b      	ldr	r3, [r3, #0]
    ce32:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    ce34:	687b      	ldr	r3, [r7, #4]
    ce36:	2b00      	cmp	r3, #0
    ce38:	d1f3      	bne.n	ce22 <usbdc_unconfig+0xe>
	}
}
    ce3a:	bf00      	nop
    ce3c:	3708      	adds	r7, #8
    ce3e:	46bd      	mov	sp, r7
    ce40:	bd80      	pop	{r7, pc}
    ce42:	bf00      	nop
    ce44:	20000db0 	.word	0x20000db0

0000ce48 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    ce48:	b580      	push	{r7, lr}
    ce4a:	b088      	sub	sp, #32
    ce4c:	af00      	add	r7, sp, #0
    ce4e:	4603      	mov	r3, r0
    ce50:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    ce52:	2300      	movs	r3, #0
    ce54:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    ce56:	23ff      	movs	r3, #255	; 0xff
    ce58:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    ce5a:	79fb      	ldrb	r3, [r7, #7]
    ce5c:	2b00      	cmp	r3, #0
    ce5e:	d103      	bne.n	ce68 <usbdc_set_config+0x20>
		usbdc_unconfig();
    ce60:	4b2e      	ldr	r3, [pc, #184]	; (cf1c <usbdc_set_config+0xd4>)
    ce62:	4798      	blx	r3
		return true;
    ce64:	2301      	movs	r3, #1
    ce66:	e055      	b.n	cf14 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    ce68:	69bb      	ldr	r3, [r7, #24]
    ce6a:	2b00      	cmp	r3, #0
    ce6c:	d10a      	bne.n	ce84 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    ce6e:	4b2c      	ldr	r3, [pc, #176]	; (cf20 <usbdc_set_config+0xd8>)
    ce70:	681b      	ldr	r3, [r3, #0]
    ce72:	6818      	ldr	r0, [r3, #0]
    ce74:	4b2a      	ldr	r3, [pc, #168]	; (cf20 <usbdc_set_config+0xd8>)
    ce76:	681b      	ldr	r3, [r3, #0]
    ce78:	685b      	ldr	r3, [r3, #4]
    ce7a:	79fa      	ldrb	r2, [r7, #7]
    ce7c:	4619      	mov	r1, r3
    ce7e:	4b29      	ldr	r3, [pc, #164]	; (cf24 <usbdc_set_config+0xdc>)
    ce80:	4798      	blx	r3
    ce82:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    ce84:	69bb      	ldr	r3, [r7, #24]
    ce86:	2b00      	cmp	r3, #0
    ce88:	d101      	bne.n	ce8e <usbdc_set_config+0x46>
		return false;
    ce8a:	2300      	movs	r3, #0
    ce8c:	e042      	b.n	cf14 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    ce8e:	69b8      	ldr	r0, [r7, #24]
    ce90:	4b25      	ldr	r3, [pc, #148]	; (cf28 <usbdc_set_config+0xe0>)
    ce92:	4798      	blx	r3
    ce94:	4603      	mov	r3, r0
    ce96:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    ce98:	8abb      	ldrh	r3, [r7, #20]
    ce9a:	69ba      	ldr	r2, [r7, #24]
    ce9c:	4413      	add	r3, r2
    ce9e:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    cea0:	693b      	ldr	r3, [r7, #16]
    cea2:	2204      	movs	r2, #4
    cea4:	4619      	mov	r1, r3
    cea6:	69b8      	ldr	r0, [r7, #24]
    cea8:	4b20      	ldr	r3, [pc, #128]	; (cf2c <usbdc_set_config+0xe4>)
    ceaa:	4798      	blx	r3
    ceac:	4603      	mov	r3, r0
    ceae:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    ceb0:	e02c      	b.n	cf0c <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    ceb2:	68fb      	ldr	r3, [r7, #12]
    ceb4:	3302      	adds	r3, #2
    ceb6:	781b      	ldrb	r3, [r3, #0]
    ceb8:	7dfa      	ldrb	r2, [r7, #23]
    ceba:	429a      	cmp	r2, r3
    cebc:	d018      	beq.n	cef0 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    cebe:	68fb      	ldr	r3, [r7, #12]
    cec0:	789b      	ldrb	r3, [r3, #2]
    cec2:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    cec4:	4b16      	ldr	r3, [pc, #88]	; (cf20 <usbdc_set_config+0xd8>)
    cec6:	691b      	ldr	r3, [r3, #16]
    cec8:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    ceca:	e00c      	b.n	cee6 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    cecc:	69fb      	ldr	r3, [r7, #28]
    cece:	685b      	ldr	r3, [r3, #4]
    ced0:	f107 020c 	add.w	r2, r7, #12
    ced4:	2100      	movs	r1, #0
    ced6:	69f8      	ldr	r0, [r7, #28]
    ced8:	4798      	blx	r3
    ceda:	4603      	mov	r3, r0
    cedc:	2b00      	cmp	r3, #0
    cede:	d006      	beq.n	ceee <usbdc_set_config+0xa6>
					func = func->next;
    cee0:	69fb      	ldr	r3, [r7, #28]
    cee2:	681b      	ldr	r3, [r3, #0]
    cee4:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    cee6:	69fb      	ldr	r3, [r7, #28]
    cee8:	2b00      	cmp	r3, #0
    ceea:	d1ef      	bne.n	cecc <usbdc_set_config+0x84>
    ceec:	e000      	b.n	cef0 <usbdc_set_config+0xa8>
				} else {
					break;
    ceee:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    cef0:	68fb      	ldr	r3, [r7, #12]
    cef2:	4618      	mov	r0, r3
    cef4:	4b0e      	ldr	r3, [pc, #56]	; (cf30 <usbdc_set_config+0xe8>)
    cef6:	4798      	blx	r3
    cef8:	4603      	mov	r3, r0
    cefa:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    cefc:	68fb      	ldr	r3, [r7, #12]
    cefe:	6939      	ldr	r1, [r7, #16]
    cf00:	2204      	movs	r2, #4
    cf02:	4618      	mov	r0, r3
    cf04:	4b09      	ldr	r3, [pc, #36]	; (cf2c <usbdc_set_config+0xe4>)
    cf06:	4798      	blx	r3
    cf08:	4603      	mov	r3, r0
    cf0a:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    cf0c:	68fb      	ldr	r3, [r7, #12]
    cf0e:	2b00      	cmp	r3, #0
    cf10:	d1cf      	bne.n	ceb2 <usbdc_set_config+0x6a>
	}
	return true;
    cf12:	2301      	movs	r3, #1
}
    cf14:	4618      	mov	r0, r3
    cf16:	3720      	adds	r7, #32
    cf18:	46bd      	mov	sp, r7
    cf1a:	bd80      	pop	{r7, pc}
    cf1c:	0000ce15 	.word	0x0000ce15
    cf20:	20000db0 	.word	0x20000db0
    cf24:	0000d7b9 	.word	0x0000d7b9
    cf28:	0000c965 	.word	0x0000c965
    cf2c:	0000d6f9 	.word	0x0000d6f9
    cf30:	0000c941 	.word	0x0000c941

0000cf34 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    cf34:	b580      	push	{r7, lr}
    cf36:	b082      	sub	sp, #8
    cf38:	af00      	add	r7, sp, #0
    cf3a:	4603      	mov	r3, r0
    cf3c:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    cf3e:	79fb      	ldrb	r3, [r7, #7]
    cf40:	4618      	mov	r0, r3
    cf42:	4b03      	ldr	r3, [pc, #12]	; (cf50 <usbdc_set_address+0x1c>)
    cf44:	4798      	blx	r3
}
    cf46:	bf00      	nop
    cf48:	3708      	adds	r7, #8
    cf4a:	46bd      	mov	sp, r7
    cf4c:	bd80      	pop	{r7, pc}
    cf4e:	bf00      	nop
    cf50:	00003951 	.word	0x00003951

0000cf54 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    cf54:	b590      	push	{r4, r7, lr}
    cf56:	b087      	sub	sp, #28
    cf58:	af00      	add	r7, sp, #0
    cf5a:	4603      	mov	r3, r0
    cf5c:	460a      	mov	r2, r1
    cf5e:	80fb      	strh	r3, [r7, #6]
    cf60:	4613      	mov	r3, r2
    cf62:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    cf64:	2300      	movs	r3, #0
    cf66:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    cf68:	693b      	ldr	r3, [r7, #16]
    cf6a:	2b00      	cmp	r3, #0
    cf6c:	d10b      	bne.n	cf86 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    cf6e:	4b43      	ldr	r3, [pc, #268]	; (d07c <usbdc_set_interface+0x128>)
    cf70:	681b      	ldr	r3, [r3, #0]
    cf72:	6818      	ldr	r0, [r3, #0]
    cf74:	4b41      	ldr	r3, [pc, #260]	; (d07c <usbdc_set_interface+0x128>)
    cf76:	681b      	ldr	r3, [r3, #0]
    cf78:	6859      	ldr	r1, [r3, #4]
    cf7a:	4b40      	ldr	r3, [pc, #256]	; (d07c <usbdc_set_interface+0x128>)
    cf7c:	7edb      	ldrb	r3, [r3, #27]
    cf7e:	461a      	mov	r2, r3
    cf80:	4b3f      	ldr	r3, [pc, #252]	; (d080 <usbdc_set_interface+0x12c>)
    cf82:	4798      	blx	r3
    cf84:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    cf86:	693b      	ldr	r3, [r7, #16]
    cf88:	2b00      	cmp	r3, #0
    cf8a:	d101      	bne.n	cf90 <usbdc_set_interface+0x3c>
		return false;
    cf8c:	2300      	movs	r3, #0
    cf8e:	e071      	b.n	d074 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    cf90:	693b      	ldr	r3, [r7, #16]
    cf92:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    cf94:	6938      	ldr	r0, [r7, #16]
    cf96:	4b3b      	ldr	r3, [pc, #236]	; (d084 <usbdc_set_interface+0x130>)
    cf98:	4798      	blx	r3
    cf9a:	4603      	mov	r3, r0
    cf9c:	461a      	mov	r2, r3
    cf9e:	693b      	ldr	r3, [r7, #16]
    cfa0:	4413      	add	r3, r2
    cfa2:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    cfa4:	68bb      	ldr	r3, [r7, #8]
    cfa6:	68f9      	ldr	r1, [r7, #12]
    cfa8:	2204      	movs	r2, #4
    cfaa:	4618      	mov	r0, r3
    cfac:	4b36      	ldr	r3, [pc, #216]	; (d088 <usbdc_set_interface+0x134>)
    cfae:	4798      	blx	r3
    cfb0:	6138      	str	r0, [r7, #16]
    cfb2:	693b      	ldr	r3, [r7, #16]
    cfb4:	2b00      	cmp	r3, #0
    cfb6:	d113      	bne.n	cfe0 <usbdc_set_interface+0x8c>
		return false;
    cfb8:	2300      	movs	r3, #0
    cfba:	e05b      	b.n	d074 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    cfbc:	68bb      	ldr	r3, [r7, #8]
    cfbe:	4618      	mov	r0, r3
    cfc0:	4b32      	ldr	r3, [pc, #200]	; (d08c <usbdc_set_interface+0x138>)
    cfc2:	4798      	blx	r3
    cfc4:	4603      	mov	r3, r0
    cfc6:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    cfc8:	68bb      	ldr	r3, [r7, #8]
    cfca:	68f9      	ldr	r1, [r7, #12]
    cfcc:	2204      	movs	r2, #4
    cfce:	4618      	mov	r0, r3
    cfd0:	4b2d      	ldr	r3, [pc, #180]	; (d088 <usbdc_set_interface+0x134>)
    cfd2:	4798      	blx	r3
    cfd4:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    cfd6:	693b      	ldr	r3, [r7, #16]
    cfd8:	2b00      	cmp	r3, #0
    cfda:	d101      	bne.n	cfe0 <usbdc_set_interface+0x8c>
			return false;
    cfdc:	2300      	movs	r3, #0
    cfde:	e049      	b.n	d074 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    cfe0:	693b      	ldr	r3, [r7, #16]
    cfe2:	3302      	adds	r3, #2
    cfe4:	781b      	ldrb	r3, [r3, #0]
    cfe6:	b29b      	uxth	r3, r3
    cfe8:	88ba      	ldrh	r2, [r7, #4]
    cfea:	429a      	cmp	r2, r3
    cfec:	d1e6      	bne.n	cfbc <usbdc_set_interface+0x68>
    cfee:	693b      	ldr	r3, [r7, #16]
    cff0:	3303      	adds	r3, #3
    cff2:	781b      	ldrb	r3, [r3, #0]
    cff4:	b29b      	uxth	r3, r3
    cff6:	88fa      	ldrh	r2, [r7, #6]
    cff8:	429a      	cmp	r2, r3
    cffa:	d1df      	bne.n	cfbc <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    cffc:	693b      	ldr	r3, [r7, #16]
    cffe:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    d000:	4b1e      	ldr	r3, [pc, #120]	; (d07c <usbdc_set_interface+0x128>)
    d002:	691b      	ldr	r3, [r3, #16]
    d004:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    d006:	e031      	b.n	d06c <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    d008:	697b      	ldr	r3, [r7, #20]
    d00a:	685b      	ldr	r3, [r3, #4]
    d00c:	f107 0208 	add.w	r2, r7, #8
    d010:	2101      	movs	r1, #1
    d012:	6978      	ldr	r0, [r7, #20]
    d014:	4798      	blx	r3
    d016:	4603      	mov	r3, r0
    d018:	2b00      	cmp	r3, #0
    d01a:	d003      	beq.n	d024 <usbdc_set_interface+0xd0>
			func = func->next;
    d01c:	697b      	ldr	r3, [r7, #20]
    d01e:	681b      	ldr	r3, [r3, #0]
    d020:	617b      	str	r3, [r7, #20]
    d022:	e023      	b.n	d06c <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d024:	697b      	ldr	r3, [r7, #20]
    d026:	685b      	ldr	r3, [r3, #4]
    d028:	f107 0208 	add.w	r2, r7, #8
    d02c:	2100      	movs	r1, #0
    d02e:	6978      	ldr	r0, [r7, #20]
    d030:	4798      	blx	r3
    d032:	4603      	mov	r3, r0
    d034:	2b00      	cmp	r3, #0
    d036:	d117      	bne.n	d068 <usbdc_set_interface+0x114>
			if (alt_set) {
    d038:	88fb      	ldrh	r3, [r7, #6]
    d03a:	2b00      	cmp	r3, #0
    d03c:	d00c      	beq.n	d058 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d03e:	4b0f      	ldr	r3, [pc, #60]	; (d07c <usbdc_set_interface+0x128>)
    d040:	7f5b      	ldrb	r3, [r3, #29]
    d042:	b25a      	sxtb	r2, r3
    d044:	88bb      	ldrh	r3, [r7, #4]
    d046:	2101      	movs	r1, #1
    d048:	fa01 f303 	lsl.w	r3, r1, r3
    d04c:	b25b      	sxtb	r3, r3
    d04e:	4313      	orrs	r3, r2
    d050:	b25b      	sxtb	r3, r3
    d052:	b2da      	uxtb	r2, r3
    d054:	4b09      	ldr	r3, [pc, #36]	; (d07c <usbdc_set_interface+0x128>)
    d056:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    d058:	2300      	movs	r3, #0
    d05a:	2200      	movs	r2, #0
    d05c:	2100      	movs	r1, #0
    d05e:	2000      	movs	r0, #0
    d060:	4c0b      	ldr	r4, [pc, #44]	; (d090 <usbdc_set_interface+0x13c>)
    d062:	47a0      	blx	r4
			return true;
    d064:	2301      	movs	r3, #1
    d066:	e005      	b.n	d074 <usbdc_set_interface+0x120>
		} else {
			return false;
    d068:	2300      	movs	r3, #0
    d06a:	e003      	b.n	d074 <usbdc_set_interface+0x120>
	while (NULL != func) {
    d06c:	697b      	ldr	r3, [r7, #20]
    d06e:	2b00      	cmp	r3, #0
    d070:	d1ca      	bne.n	d008 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    d072:	2300      	movs	r3, #0
}
    d074:	4618      	mov	r0, r3
    d076:	371c      	adds	r7, #28
    d078:	46bd      	mov	sp, r7
    d07a:	bd90      	pop	{r4, r7, pc}
    d07c:	20000db0 	.word	0x20000db0
    d080:	0000d7b9 	.word	0x0000d7b9
    d084:	0000c965 	.word	0x0000c965
    d088:	0000d6f9 	.word	0x0000d6f9
    d08c:	0000c941 	.word	0x0000c941
    d090:	0000d469 	.word	0x0000d469

0000d094 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    d094:	b590      	push	{r4, r7, lr}
    d096:	b083      	sub	sp, #12
    d098:	af00      	add	r7, sp, #0
    d09a:	4603      	mov	r3, r0
    d09c:	6039      	str	r1, [r7, #0]
    d09e:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d0a0:	683b      	ldr	r3, [r7, #0]
    d0a2:	785b      	ldrb	r3, [r3, #1]
    d0a4:	3b01      	subs	r3, #1
    d0a6:	2b0a      	cmp	r3, #10
    d0a8:	d85b      	bhi.n	d162 <usbdc_set_req+0xce>
    d0aa:	a201      	add	r2, pc, #4	; (adr r2, d0b0 <usbdc_set_req+0x1c>)
    d0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d0b0:	0000d12f 	.word	0x0000d12f
    d0b4:	0000d163 	.word	0x0000d163
    d0b8:	0000d13d 	.word	0x0000d13d
    d0bc:	0000d163 	.word	0x0000d163
    d0c0:	0000d0dd 	.word	0x0000d0dd
    d0c4:	0000d163 	.word	0x0000d163
    d0c8:	0000d163 	.word	0x0000d163
    d0cc:	0000d163 	.word	0x0000d163
    d0d0:	0000d0f7 	.word	0x0000d0f7
    d0d4:	0000d163 	.word	0x0000d163
    d0d8:	0000d14b 	.word	0x0000d14b
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d0dc:	79f8      	ldrb	r0, [r7, #7]
    d0de:	2301      	movs	r3, #1
    d0e0:	2200      	movs	r2, #0
    d0e2:	2100      	movs	r1, #0
    d0e4:	4c21      	ldr	r4, [pc, #132]	; (d16c <usbdc_set_req+0xd8>)
    d0e6:	47a0      	blx	r4
    d0e8:	4603      	mov	r3, r0
    d0ea:	2b00      	cmp	r3, #0
    d0ec:	bf0c      	ite	eq
    d0ee:	2301      	moveq	r3, #1
    d0f0:	2300      	movne	r3, #0
    d0f2:	b2db      	uxtb	r3, r3
    d0f4:	e036      	b.n	d164 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    d0f6:	683b      	ldr	r3, [r7, #0]
    d0f8:	885b      	ldrh	r3, [r3, #2]
    d0fa:	b29b      	uxth	r3, r3
    d0fc:	b2db      	uxtb	r3, r3
    d0fe:	4618      	mov	r0, r3
    d100:	4b1b      	ldr	r3, [pc, #108]	; (d170 <usbdc_set_req+0xdc>)
    d102:	4798      	blx	r3
    d104:	4603      	mov	r3, r0
    d106:	f083 0301 	eor.w	r3, r3, #1
    d10a:	b2db      	uxtb	r3, r3
    d10c:	2b00      	cmp	r3, #0
    d10e:	d001      	beq.n	d114 <usbdc_set_req+0x80>
			return false;
    d110:	2300      	movs	r3, #0
    d112:	e027      	b.n	d164 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d114:	79f8      	ldrb	r0, [r7, #7]
    d116:	2301      	movs	r3, #1
    d118:	2200      	movs	r2, #0
    d11a:	2100      	movs	r1, #0
    d11c:	4c13      	ldr	r4, [pc, #76]	; (d16c <usbdc_set_req+0xd8>)
    d11e:	47a0      	blx	r4
    d120:	4603      	mov	r3, r0
    d122:	2b00      	cmp	r3, #0
    d124:	bf0c      	ite	eq
    d126:	2301      	moveq	r3, #1
    d128:	2300      	movne	r3, #0
    d12a:	b2db      	uxtb	r3, r3
    d12c:	e01a      	b.n	d164 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    d12e:	79fb      	ldrb	r3, [r7, #7]
    d130:	6839      	ldr	r1, [r7, #0]
    d132:	4618      	mov	r0, r3
    d134:	4b0f      	ldr	r3, [pc, #60]	; (d174 <usbdc_set_req+0xe0>)
    d136:	4798      	blx	r3
    d138:	4603      	mov	r3, r0
    d13a:	e013      	b.n	d164 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    d13c:	79fb      	ldrb	r3, [r7, #7]
    d13e:	6839      	ldr	r1, [r7, #0]
    d140:	4618      	mov	r0, r3
    d142:	4b0d      	ldr	r3, [pc, #52]	; (d178 <usbdc_set_req+0xe4>)
    d144:	4798      	blx	r3
    d146:	4603      	mov	r3, r0
    d148:	e00c      	b.n	d164 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    d14a:	683b      	ldr	r3, [r7, #0]
    d14c:	885b      	ldrh	r3, [r3, #2]
    d14e:	b29a      	uxth	r2, r3
    d150:	683b      	ldr	r3, [r7, #0]
    d152:	889b      	ldrh	r3, [r3, #4]
    d154:	b29b      	uxth	r3, r3
    d156:	4619      	mov	r1, r3
    d158:	4610      	mov	r0, r2
    d15a:	4b08      	ldr	r3, [pc, #32]	; (d17c <usbdc_set_req+0xe8>)
    d15c:	4798      	blx	r3
    d15e:	4603      	mov	r3, r0
    d160:	e000      	b.n	d164 <usbdc_set_req+0xd0>
	default:
		return false;
    d162:	2300      	movs	r3, #0
	}
}
    d164:	4618      	mov	r0, r3
    d166:	370c      	adds	r7, #12
    d168:	46bd      	mov	sp, r7
    d16a:	bd90      	pop	{r4, r7, pc}
    d16c:	0000d469 	.word	0x0000d469
    d170:	0000ce49 	.word	0x0000ce49
    d174:	0000cd65 	.word	0x0000cd65
    d178:	0000cdbd 	.word	0x0000cdbd
    d17c:	0000cf55 	.word	0x0000cf55

0000d180 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    d180:	b580      	push	{r7, lr}
    d182:	b082      	sub	sp, #8
    d184:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d186:	4b0a      	ldr	r3, [pc, #40]	; (d1b0 <usbdc_sof_notify+0x30>)
    d188:	685b      	ldr	r3, [r3, #4]
    d18a:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    d18c:	e009      	b.n	d1a2 <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    d18e:	687b      	ldr	r3, [r7, #4]
    d190:	685b      	ldr	r3, [r3, #4]
    d192:	2b00      	cmp	r3, #0
    d194:	d002      	beq.n	d19c <usbdc_sof_notify+0x1c>
			sof->cb();
    d196:	687b      	ldr	r3, [r7, #4]
    d198:	685b      	ldr	r3, [r3, #4]
    d19a:	4798      	blx	r3
		}
		sof = sof->next;
    d19c:	687b      	ldr	r3, [r7, #4]
    d19e:	681b      	ldr	r3, [r3, #0]
    d1a0:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    d1a2:	687b      	ldr	r3, [r7, #4]
    d1a4:	2b00      	cmp	r3, #0
    d1a6:	d1f2      	bne.n	d18e <usbdc_sof_notify+0xe>
	}
}
    d1a8:	bf00      	nop
    d1aa:	3708      	adds	r7, #8
    d1ac:	46bd      	mov	sp, r7
    d1ae:	bd80      	pop	{r7, pc}
    d1b0:	20000db0 	.word	0x20000db0

0000d1b4 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    d1b4:	b580      	push	{r7, lr}
    d1b6:	b084      	sub	sp, #16
    d1b8:	af00      	add	r7, sp, #0
    d1ba:	4603      	mov	r3, r0
    d1bc:	6039      	str	r1, [r7, #0]
    d1be:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d1c0:	4b0b      	ldr	r3, [pc, #44]	; (d1f0 <usbdc_change_notify+0x3c>)
    d1c2:	68db      	ldr	r3, [r3, #12]
    d1c4:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    d1c6:	e00c      	b.n	d1e2 <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    d1c8:	68fb      	ldr	r3, [r7, #12]
    d1ca:	685b      	ldr	r3, [r3, #4]
    d1cc:	2b00      	cmp	r3, #0
    d1ce:	d005      	beq.n	d1dc <usbdc_change_notify+0x28>
			cg->cb(change, value);
    d1d0:	68fb      	ldr	r3, [r7, #12]
    d1d2:	685b      	ldr	r3, [r3, #4]
    d1d4:	79fa      	ldrb	r2, [r7, #7]
    d1d6:	6839      	ldr	r1, [r7, #0]
    d1d8:	4610      	mov	r0, r2
    d1da:	4798      	blx	r3
		}
		cg = cg->next;
    d1dc:	68fb      	ldr	r3, [r7, #12]
    d1de:	681b      	ldr	r3, [r3, #0]
    d1e0:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    d1e2:	68fb      	ldr	r3, [r7, #12]
    d1e4:	2b00      	cmp	r3, #0
    d1e6:	d1ef      	bne.n	d1c8 <usbdc_change_notify+0x14>
	}
}
    d1e8:	bf00      	nop
    d1ea:	3710      	adds	r7, #16
    d1ec:	46bd      	mov	sp, r7
    d1ee:	bd80      	pop	{r7, pc}
    d1f0:	20000db0 	.word	0x20000db0

0000d1f4 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d1f4:	b580      	push	{r7, lr}
    d1f6:	b084      	sub	sp, #16
    d1f8:	af00      	add	r7, sp, #0
    d1fa:	4603      	mov	r3, r0
    d1fc:	6039      	str	r1, [r7, #0]
    d1fe:	71fb      	strb	r3, [r7, #7]
    d200:	4613      	mov	r3, r2
    d202:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d204:	4b12      	ldr	r3, [pc, #72]	; (d250 <usbdc_request_handler+0x5c>)
    d206:	689b      	ldr	r3, [r3, #8]
    d208:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    d20a:	e019      	b.n	d240 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    d20c:	68fb      	ldr	r3, [r7, #12]
    d20e:	685b      	ldr	r3, [r3, #4]
    d210:	2b00      	cmp	r3, #0
    d212:	d012      	beq.n	d23a <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    d214:	68fb      	ldr	r3, [r7, #12]
    d216:	685b      	ldr	r3, [r3, #4]
    d218:	79ba      	ldrb	r2, [r7, #6]
    d21a:	79f8      	ldrb	r0, [r7, #7]
    d21c:	6839      	ldr	r1, [r7, #0]
    d21e:	4798      	blx	r3
    d220:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    d222:	68bb      	ldr	r3, [r7, #8]
    d224:	2b00      	cmp	r3, #0
    d226:	d101      	bne.n	d22c <usbdc_request_handler+0x38>
				return true;
    d228:	2301      	movs	r3, #1
    d22a:	e00d      	b.n	d248 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    d22c:	68bb      	ldr	r3, [r7, #8]
    d22e:	f113 0f0a 	cmn.w	r3, #10
    d232:	d002      	beq.n	d23a <usbdc_request_handler+0x46>
				return -1;
    d234:	f04f 33ff 	mov.w	r3, #4294967295
    d238:	e006      	b.n	d248 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    d23a:	68fb      	ldr	r3, [r7, #12]
    d23c:	681b      	ldr	r3, [r3, #0]
    d23e:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    d240:	68fb      	ldr	r3, [r7, #12]
    d242:	2b00      	cmp	r3, #0
    d244:	d1e2      	bne.n	d20c <usbdc_request_handler+0x18>
	}
	return false;
    d246:	2300      	movs	r3, #0
}
    d248:	4618      	mov	r0, r3
    d24a:	3710      	adds	r7, #16
    d24c:	46bd      	mov	sp, r7
    d24e:	bd80      	pop	{r7, pc}
    d250:	20000db0 	.word	0x20000db0

0000d254 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d254:	b580      	push	{r7, lr}
    d256:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    d258:	4b01      	ldr	r3, [pc, #4]	; (d260 <usbd_sof_cb+0xc>)
    d25a:	4798      	blx	r3
}
    d25c:	bf00      	nop
    d25e:	bd80      	pop	{r7, pc}
    d260:	0000d181 	.word	0x0000d181

0000d264 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    d264:	b580      	push	{r7, lr}
    d266:	b082      	sub	sp, #8
    d268:	af00      	add	r7, sp, #0
    d26a:	4603      	mov	r3, r0
    d26c:	6039      	str	r1, [r7, #0]
    d26e:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d270:	79fb      	ldrb	r3, [r7, #7]
    d272:	2200      	movs	r2, #0
    d274:	6839      	ldr	r1, [r7, #0]
    d276:	4618      	mov	r0, r3
    d278:	4b14      	ldr	r3, [pc, #80]	; (d2cc <usbdc_cb_ctl_req+0x68>)
    d27a:	4798      	blx	r3
    d27c:	4603      	mov	r3, r0
    d27e:	f1b3 3fff 	cmp.w	r3, #4294967295
    d282:	d00b      	beq.n	d29c <usbdc_cb_ctl_req+0x38>
    d284:	2b01      	cmp	r3, #1
    d286:	d007      	beq.n	d298 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    d288:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d28a:	683b      	ldr	r3, [r7, #0]
    d28c:	781b      	ldrb	r3, [r3, #0]
    d28e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d292:	2b00      	cmp	r3, #0
    d294:	d007      	beq.n	d2a6 <usbdc_cb_ctl_req+0x42>
    d296:	e003      	b.n	d2a0 <usbdc_cb_ctl_req+0x3c>
		return true;
    d298:	2301      	movs	r3, #1
    d29a:	e013      	b.n	d2c4 <usbdc_cb_ctl_req+0x60>
		return false;
    d29c:	2300      	movs	r3, #0
    d29e:	e011      	b.n	d2c4 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d2a0:	2b80      	cmp	r3, #128	; 0x80
    d2a2:	d007      	beq.n	d2b4 <usbdc_cb_ctl_req+0x50>
    d2a4:	e00d      	b.n	d2c2 <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    d2a6:	79fb      	ldrb	r3, [r7, #7]
    d2a8:	6839      	ldr	r1, [r7, #0]
    d2aa:	4618      	mov	r0, r3
    d2ac:	4b08      	ldr	r3, [pc, #32]	; (d2d0 <usbdc_cb_ctl_req+0x6c>)
    d2ae:	4798      	blx	r3
    d2b0:	4603      	mov	r3, r0
    d2b2:	e007      	b.n	d2c4 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    d2b4:	79fb      	ldrb	r3, [r7, #7]
    d2b6:	6839      	ldr	r1, [r7, #0]
    d2b8:	4618      	mov	r0, r3
    d2ba:	4b06      	ldr	r3, [pc, #24]	; (d2d4 <usbdc_cb_ctl_req+0x70>)
    d2bc:	4798      	blx	r3
    d2be:	4603      	mov	r3, r0
    d2c0:	e000      	b.n	d2c4 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    d2c2:	2300      	movs	r3, #0
	}
}
    d2c4:	4618      	mov	r0, r3
    d2c6:	3708      	adds	r7, #8
    d2c8:	46bd      	mov	sp, r7
    d2ca:	bd80      	pop	{r7, pc}
    d2cc:	0000d1f5 	.word	0x0000d1f5
    d2d0:	0000d095 	.word	0x0000d095
    d2d4:	0000ccbd 	.word	0x0000ccbd

0000d2d8 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    d2d8:	b580      	push	{r7, lr}
    d2da:	b082      	sub	sp, #8
    d2dc:	af00      	add	r7, sp, #0
    d2de:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d2e0:	687b      	ldr	r3, [r7, #4]
    d2e2:	781b      	ldrb	r3, [r3, #0]
    d2e4:	2b00      	cmp	r3, #0
    d2e6:	d135      	bne.n	d354 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    d2e8:	687b      	ldr	r3, [r7, #4]
    d2ea:	785b      	ldrb	r3, [r3, #1]
    d2ec:	2b05      	cmp	r3, #5
    d2ee:	d019      	beq.n	d324 <usbdc_ctrl_status_end+0x4c>
    d2f0:	2b09      	cmp	r3, #9
    d2f2:	d000      	beq.n	d2f6 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    d2f4:	e02f      	b.n	d356 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    d2f6:	687b      	ldr	r3, [r7, #4]
    d2f8:	885b      	ldrh	r3, [r3, #2]
    d2fa:	b29b      	uxth	r3, r3
    d2fc:	b2da      	uxtb	r2, r3
    d2fe:	4b17      	ldr	r3, [pc, #92]	; (d35c <usbdc_ctrl_status_end+0x84>)
    d300:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d302:	687b      	ldr	r3, [r7, #4]
    d304:	885b      	ldrh	r3, [r3, #2]
    d306:	b29b      	uxth	r3, r3
    d308:	2b00      	cmp	r3, #0
    d30a:	d001      	beq.n	d310 <usbdc_ctrl_status_end+0x38>
    d30c:	2204      	movs	r2, #4
    d30e:	e000      	b.n	d312 <usbdc_ctrl_status_end+0x3a>
    d310:	2203      	movs	r2, #3
    d312:	4b12      	ldr	r3, [pc, #72]	; (d35c <usbdc_ctrl_status_end+0x84>)
    d314:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d316:	4b11      	ldr	r3, [pc, #68]	; (d35c <usbdc_ctrl_status_end+0x84>)
    d318:	7e9b      	ldrb	r3, [r3, #26]
    d31a:	4619      	mov	r1, r3
    d31c:	2001      	movs	r0, #1
    d31e:	4b10      	ldr	r3, [pc, #64]	; (d360 <usbdc_ctrl_status_end+0x88>)
    d320:	4798      	blx	r3
		break;
    d322:	e018      	b.n	d356 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    d324:	687b      	ldr	r3, [r7, #4]
    d326:	885b      	ldrh	r3, [r3, #2]
    d328:	b29b      	uxth	r3, r3
    d32a:	b2db      	uxtb	r3, r3
    d32c:	4618      	mov	r0, r3
    d32e:	4b0d      	ldr	r3, [pc, #52]	; (d364 <usbdc_ctrl_status_end+0x8c>)
    d330:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d332:	687b      	ldr	r3, [r7, #4]
    d334:	885b      	ldrh	r3, [r3, #2]
    d336:	b29b      	uxth	r3, r3
    d338:	2b00      	cmp	r3, #0
    d33a:	d001      	beq.n	d340 <usbdc_ctrl_status_end+0x68>
    d33c:	2203      	movs	r2, #3
    d33e:	e000      	b.n	d342 <usbdc_ctrl_status_end+0x6a>
    d340:	2202      	movs	r2, #2
    d342:	4b06      	ldr	r3, [pc, #24]	; (d35c <usbdc_ctrl_status_end+0x84>)
    d344:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d346:	4b05      	ldr	r3, [pc, #20]	; (d35c <usbdc_ctrl_status_end+0x84>)
    d348:	7e9b      	ldrb	r3, [r3, #26]
    d34a:	4619      	mov	r1, r3
    d34c:	2001      	movs	r0, #1
    d34e:	4b04      	ldr	r3, [pc, #16]	; (d360 <usbdc_ctrl_status_end+0x88>)
    d350:	4798      	blx	r3
		break;
    d352:	e000      	b.n	d356 <usbdc_ctrl_status_end+0x7e>
		return;
    d354:	bf00      	nop
	}
}
    d356:	3708      	adds	r7, #8
    d358:	46bd      	mov	sp, r7
    d35a:	bd80      	pop	{r7, pc}
    d35c:	20000db0 	.word	0x20000db0
    d360:	0000d1b5 	.word	0x0000d1b5
    d364:	0000cf35 	.word	0x0000cf35

0000d368 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    d368:	b580      	push	{r7, lr}
    d36a:	b082      	sub	sp, #8
    d36c:	af00      	add	r7, sp, #0
    d36e:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d370:	2201      	movs	r2, #1
    d372:	6879      	ldr	r1, [r7, #4]
    d374:	2000      	movs	r0, #0
    d376:	4b03      	ldr	r3, [pc, #12]	; (d384 <usbdc_ctrl_data_end+0x1c>)
    d378:	4798      	blx	r3
	return false;
    d37a:	2300      	movs	r3, #0
}
    d37c:	4618      	mov	r0, r3
    d37e:	3708      	adds	r7, #8
    d380:	46bd      	mov	sp, r7
    d382:	bd80      	pop	{r7, pc}
    d384:	0000d1f5 	.word	0x0000d1f5

0000d388 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d388:	b580      	push	{r7, lr}
    d38a:	b082      	sub	sp, #8
    d38c:	af00      	add	r7, sp, #0
    d38e:	4603      	mov	r3, r0
    d390:	603a      	str	r2, [r7, #0]
    d392:	71fb      	strb	r3, [r7, #7]
    d394:	460b      	mov	r3, r1
    d396:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    d398:	79bb      	ldrb	r3, [r7, #6]
    d39a:	2b00      	cmp	r3, #0
    d39c:	d002      	beq.n	d3a4 <usbdc_cb_ctl_done+0x1c>
    d39e:	2b01      	cmp	r3, #1
    d3a0:	d004      	beq.n	d3ac <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    d3a2:	e008      	b.n	d3b6 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    d3a4:	6838      	ldr	r0, [r7, #0]
    d3a6:	4b06      	ldr	r3, [pc, #24]	; (d3c0 <usbdc_cb_ctl_done+0x38>)
    d3a8:	4798      	blx	r3
		break;
    d3aa:	e004      	b.n	d3b6 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    d3ac:	6838      	ldr	r0, [r7, #0]
    d3ae:	4b05      	ldr	r3, [pc, #20]	; (d3c4 <usbdc_cb_ctl_done+0x3c>)
    d3b0:	4798      	blx	r3
    d3b2:	4603      	mov	r3, r0
    d3b4:	e000      	b.n	d3b8 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    d3b6:	2300      	movs	r3, #0
}
    d3b8:	4618      	mov	r0, r3
    d3ba:	3708      	adds	r7, #8
    d3bc:	46bd      	mov	sp, r7
    d3be:	bd80      	pop	{r7, pc}
    d3c0:	0000d2d9 	.word	0x0000d2d9
    d3c4:	0000d369 	.word	0x0000d369

0000d3c8 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d3c8:	b580      	push	{r7, lr}
    d3ca:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    d3cc:	4b10      	ldr	r3, [pc, #64]	; (d410 <usbdc_reset+0x48>)
    d3ce:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d3d0:	4b10      	ldr	r3, [pc, #64]	; (d414 <usbdc_reset+0x4c>)
    d3d2:	2202      	movs	r2, #2
    d3d4:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    d3d6:	4b0f      	ldr	r3, [pc, #60]	; (d414 <usbdc_reset+0x4c>)
    d3d8:	2200      	movs	r2, #0
    d3da:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    d3dc:	4b0d      	ldr	r3, [pc, #52]	; (d414 <usbdc_reset+0x4c>)
    d3de:	2200      	movs	r2, #0
    d3e0:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d3e2:	2000      	movs	r0, #0
    d3e4:	4b0c      	ldr	r3, [pc, #48]	; (d418 <usbdc_reset+0x50>)
    d3e6:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d3e8:	4b0a      	ldr	r3, [pc, #40]	; (d414 <usbdc_reset+0x4c>)
    d3ea:	7f1b      	ldrb	r3, [r3, #28]
    d3ec:	4618      	mov	r0, r3
    d3ee:	4b0b      	ldr	r3, [pc, #44]	; (d41c <usbdc_reset+0x54>)
    d3f0:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d3f2:	4a0b      	ldr	r2, [pc, #44]	; (d420 <usbdc_reset+0x58>)
    d3f4:	2100      	movs	r1, #0
    d3f6:	2000      	movs	r0, #0
    d3f8:	4b0a      	ldr	r3, [pc, #40]	; (d424 <usbdc_reset+0x5c>)
    d3fa:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d3fc:	4a0a      	ldr	r2, [pc, #40]	; (d428 <usbdc_reset+0x60>)
    d3fe:	2102      	movs	r1, #2
    d400:	2000      	movs	r0, #0
    d402:	4b08      	ldr	r3, [pc, #32]	; (d424 <usbdc_reset+0x5c>)
    d404:	4798      	blx	r3
	usb_d_ep_enable(0);
    d406:	2000      	movs	r0, #0
    d408:	4b08      	ldr	r3, [pc, #32]	; (d42c <usbdc_reset+0x64>)
    d40a:	4798      	blx	r3
}
    d40c:	bf00      	nop
    d40e:	bd80      	pop	{r7, pc}
    d410:	0000ce15 	.word	0x0000ce15
    d414:	20000db0 	.word	0x20000db0
    d418:	00003a35 	.word	0x00003a35
    d41c:	00003971 	.word	0x00003971
    d420:	0000d265 	.word	0x0000d265
    d424:	00003d89 	.word	0x00003d89
    d428:	0000d389 	.word	0x0000d389
    d42c:	00003a85 	.word	0x00003a85

0000d430 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    d430:	b580      	push	{r7, lr}
    d432:	b082      	sub	sp, #8
    d434:	af00      	add	r7, sp, #0
    d436:	4603      	mov	r3, r0
    d438:	6039      	str	r1, [r7, #0]
    d43a:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    d43c:	79fb      	ldrb	r3, [r7, #7]
    d43e:	2b00      	cmp	r3, #0
    d440:	d002      	beq.n	d448 <usbd_event_cb+0x18>
    d442:	2b01      	cmp	r3, #1
    d444:	d005      	beq.n	d452 <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    d446:	e007      	b.n	d458 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    d448:	6839      	ldr	r1, [r7, #0]
    d44a:	2000      	movs	r0, #0
    d44c:	4b04      	ldr	r3, [pc, #16]	; (d460 <usbd_event_cb+0x30>)
    d44e:	4798      	blx	r3
		break;
    d450:	e002      	b.n	d458 <usbd_event_cb+0x28>
		usbdc_reset();
    d452:	4b04      	ldr	r3, [pc, #16]	; (d464 <usbd_event_cb+0x34>)
    d454:	4798      	blx	r3
		break;
    d456:	bf00      	nop
	}
}
    d458:	bf00      	nop
    d45a:	3708      	adds	r7, #8
    d45c:	46bd      	mov	sp, r7
    d45e:	bd80      	pop	{r7, pc}
    d460:	0000d1b5 	.word	0x0000d1b5
    d464:	0000d3c9 	.word	0x0000d3c9

0000d468 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    d468:	b580      	push	{r7, lr}
    d46a:	b088      	sub	sp, #32
    d46c:	af00      	add	r7, sp, #0
    d46e:	60b9      	str	r1, [r7, #8]
    d470:	607a      	str	r2, [r7, #4]
    d472:	461a      	mov	r2, r3
    d474:	4603      	mov	r3, r0
    d476:	73fb      	strb	r3, [r7, #15]
    d478:	4613      	mov	r3, r2
    d47a:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d47c:	68bb      	ldr	r3, [r7, #8]
    d47e:	617b      	str	r3, [r7, #20]
    d480:	687b      	ldr	r3, [r7, #4]
    d482:	61bb      	str	r3, [r7, #24]
    d484:	7bfb      	ldrb	r3, [r7, #15]
    d486:	773b      	strb	r3, [r7, #28]
    d488:	7bbb      	ldrb	r3, [r7, #14]
    d48a:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    d48c:	f107 0314 	add.w	r3, r7, #20
    d490:	4618      	mov	r0, r3
    d492:	4b03      	ldr	r3, [pc, #12]	; (d4a0 <usbdc_xfer+0x38>)
    d494:	4798      	blx	r3
    d496:	4603      	mov	r3, r0
}
    d498:	4618      	mov	r0, r3
    d49a:	3720      	adds	r7, #32
    d49c:	46bd      	mov	sp, r7
    d49e:	bd80      	pop	{r7, pc}
    d4a0:	00003af5 	.word	0x00003af5

0000d4a4 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    d4a4:	b580      	push	{r7, lr}
    d4a6:	b082      	sub	sp, #8
    d4a8:	af00      	add	r7, sp, #0
    d4aa:	4603      	mov	r3, r0
    d4ac:	6039      	str	r1, [r7, #0]
    d4ae:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    d4b0:	79fb      	ldrb	r3, [r7, #7]
    d4b2:	2b01      	cmp	r3, #1
    d4b4:	d009      	beq.n	d4ca <usbdc_register_handler+0x26>
    d4b6:	2b02      	cmp	r3, #2
    d4b8:	d00c      	beq.n	d4d4 <usbdc_register_handler+0x30>
    d4ba:	2b00      	cmp	r3, #0
    d4bc:	d000      	beq.n	d4c0 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    d4be:	e00e      	b.n	d4de <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d4c0:	6839      	ldr	r1, [r7, #0]
    d4c2:	4809      	ldr	r0, [pc, #36]	; (d4e8 <usbdc_register_handler+0x44>)
    d4c4:	4b09      	ldr	r3, [pc, #36]	; (d4ec <usbdc_register_handler+0x48>)
    d4c6:	4798      	blx	r3
		break;
    d4c8:	e009      	b.n	d4de <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d4ca:	6839      	ldr	r1, [r7, #0]
    d4cc:	4808      	ldr	r0, [pc, #32]	; (d4f0 <usbdc_register_handler+0x4c>)
    d4ce:	4b07      	ldr	r3, [pc, #28]	; (d4ec <usbdc_register_handler+0x48>)
    d4d0:	4798      	blx	r3
		break;
    d4d2:	e004      	b.n	d4de <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d4d4:	6839      	ldr	r1, [r7, #0]
    d4d6:	4807      	ldr	r0, [pc, #28]	; (d4f4 <usbdc_register_handler+0x50>)
    d4d8:	4b04      	ldr	r3, [pc, #16]	; (d4ec <usbdc_register_handler+0x48>)
    d4da:	4798      	blx	r3
		break;
    d4dc:	bf00      	nop
	}
}
    d4de:	bf00      	nop
    d4e0:	3708      	adds	r7, #8
    d4e2:	46bd      	mov	sp, r7
    d4e4:	bd80      	pop	{r7, pc}
    d4e6:	bf00      	nop
    d4e8:	20000db4 	.word	0x20000db4
    d4ec:	00003ee1 	.word	0x00003ee1
    d4f0:	20000db8 	.word	0x20000db8
    d4f4:	20000dbc 	.word	0x20000dbc

0000d4f8 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d4f8:	b580      	push	{r7, lr}
    d4fa:	b084      	sub	sp, #16
    d4fc:	af00      	add	r7, sp, #0
    d4fe:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    d500:	687b      	ldr	r3, [r7, #4]
    d502:	2b00      	cmp	r3, #0
    d504:	bf14      	ite	ne
    d506:	2301      	movne	r3, #1
    d508:	2300      	moveq	r3, #0
    d50a:	b2db      	uxtb	r3, r3
    d50c:	f240 3255 	movw	r2, #853	; 0x355
    d510:	4910      	ldr	r1, [pc, #64]	; (d554 <usbdc_init+0x5c>)
    d512:	4618      	mov	r0, r3
    d514:	4b10      	ldr	r3, [pc, #64]	; (d558 <usbdc_init+0x60>)
    d516:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d518:	4b10      	ldr	r3, [pc, #64]	; (d55c <usbdc_init+0x64>)
    d51a:	4798      	blx	r3
    d51c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d51e:	68fb      	ldr	r3, [r7, #12]
    d520:	2b00      	cmp	r3, #0
    d522:	da01      	bge.n	d528 <usbdc_init+0x30>
		return rc;
    d524:	68fb      	ldr	r3, [r7, #12]
    d526:	e010      	b.n	d54a <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d528:	2220      	movs	r2, #32
    d52a:	2100      	movs	r1, #0
    d52c:	480c      	ldr	r0, [pc, #48]	; (d560 <usbdc_init+0x68>)
    d52e:	4b0d      	ldr	r3, [pc, #52]	; (d564 <usbdc_init+0x6c>)
    d530:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d532:	4a0b      	ldr	r2, [pc, #44]	; (d560 <usbdc_init+0x68>)
    d534:	687b      	ldr	r3, [r7, #4]
    d536:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d538:	490b      	ldr	r1, [pc, #44]	; (d568 <usbdc_init+0x70>)
    d53a:	2000      	movs	r0, #0
    d53c:	4b0b      	ldr	r3, [pc, #44]	; (d56c <usbdc_init+0x74>)
    d53e:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d540:	490b      	ldr	r1, [pc, #44]	; (d570 <usbdc_init+0x78>)
    d542:	2001      	movs	r0, #1
    d544:	4b09      	ldr	r3, [pc, #36]	; (d56c <usbdc_init+0x74>)
    d546:	4798      	blx	r3

	return 0;
    d548:	2300      	movs	r3, #0
}
    d54a:	4618      	mov	r0, r3
    d54c:	3710      	adds	r7, #16
    d54e:	46bd      	mov	sp, r7
    d550:	bd80      	pop	{r7, pc}
    d552:	bf00      	nop
    d554:	000137c0 	.word	0x000137c0
    d558:	00003e05 	.word	0x00003e05
    d55c:	0000385d 	.word	0x0000385d
    d560:	20000db0 	.word	0x20000db0
    d564:	000130f5 	.word	0x000130f5
    d568:	0000d255 	.word	0x0000d255
    d56c:	00003909 	.word	0x00003909
    d570:	0000d431 	.word	0x0000d431

0000d574 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d574:	b580      	push	{r7, lr}
    d576:	b082      	sub	sp, #8
    d578:	af00      	add	r7, sp, #0
    d57a:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    d57c:	6879      	ldr	r1, [r7, #4]
    d57e:	4803      	ldr	r0, [pc, #12]	; (d58c <usbdc_register_function+0x18>)
    d580:	4b03      	ldr	r3, [pc, #12]	; (d590 <usbdc_register_function+0x1c>)
    d582:	4798      	blx	r3
}
    d584:	bf00      	nop
    d586:	3708      	adds	r7, #8
    d588:	46bd      	mov	sp, r7
    d58a:	bd80      	pop	{r7, pc}
    d58c:	20000dc0 	.word	0x20000dc0
    d590:	00003ee1 	.word	0x00003ee1

0000d594 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d594:	b580      	push	{r7, lr}
    d596:	b082      	sub	sp, #8
    d598:	af00      	add	r7, sp, #0
    d59a:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    d59c:	4b0f      	ldr	r3, [pc, #60]	; (d5dc <usbdc_start+0x48>)
    d59e:	7e9b      	ldrb	r3, [r3, #26]
    d5a0:	2b00      	cmp	r3, #0
    d5a2:	d002      	beq.n	d5aa <usbdc_start+0x16>
		return ERR_BUSY;
    d5a4:	f06f 0303 	mvn.w	r3, #3
    d5a8:	e013      	b.n	d5d2 <usbdc_start+0x3e>
	}

	if (desces) {
    d5aa:	687b      	ldr	r3, [r7, #4]
    d5ac:	2b00      	cmp	r3, #0
    d5ae:	d00e      	beq.n	d5ce <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d5b0:	4a0a      	ldr	r2, [pc, #40]	; (d5dc <usbdc_start+0x48>)
    d5b2:	687b      	ldr	r3, [r7, #4]
    d5b4:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d5b6:	687b      	ldr	r3, [r7, #4]
    d5b8:	681b      	ldr	r3, [r3, #0]
    d5ba:	79da      	ldrb	r2, [r3, #7]
    d5bc:	4b07      	ldr	r3, [pc, #28]	; (d5dc <usbdc_start+0x48>)
    d5be:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d5c0:	4b06      	ldr	r3, [pc, #24]	; (d5dc <usbdc_start+0x48>)
    d5c2:	2201      	movs	r2, #1
    d5c4:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d5c6:	4b06      	ldr	r3, [pc, #24]	; (d5e0 <usbdc_start+0x4c>)
    d5c8:	4798      	blx	r3
	return ERR_NONE;
    d5ca:	2300      	movs	r3, #0
    d5cc:	e001      	b.n	d5d2 <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d5ce:	f06f 0308 	mvn.w	r3, #8
}
    d5d2:	4618      	mov	r0, r3
    d5d4:	3708      	adds	r7, #8
    d5d6:	46bd      	mov	sp, r7
    d5d8:	bd80      	pop	{r7, pc}
    d5da:	bf00      	nop
    d5dc:	20000db0 	.word	0x20000db0
    d5e0:	0000392d 	.word	0x0000392d

0000d5e4 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d5e4:	b580      	push	{r7, lr}
    d5e6:	af00      	add	r7, sp, #0
	usb_d_attach();
    d5e8:	4b01      	ldr	r3, [pc, #4]	; (d5f0 <usbdc_attach+0xc>)
    d5ea:	4798      	blx	r3
}
    d5ec:	bf00      	nop
    d5ee:	bd80      	pop	{r7, pc}
    d5f0:	00003941 	.word	0x00003941

0000d5f4 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d5f4:	b480      	push	{r7}
    d5f6:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d5f8:	4b03      	ldr	r3, [pc, #12]	; (d608 <usbdc_get_ctrl_buffer+0x14>)
    d5fa:	695b      	ldr	r3, [r3, #20]
}
    d5fc:	4618      	mov	r0, r3
    d5fe:	46bd      	mov	sp, r7
    d600:	f85d 7b04 	ldr.w	r7, [sp], #4
    d604:	4770      	bx	lr
    d606:	bf00      	nop
    d608:	20000db0 	.word	0x20000db0

0000d60c <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d60c:	b480      	push	{r7}
    d60e:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d610:	4b07      	ldr	r3, [pc, #28]	; (d630 <usbdc_get_state+0x24>)
    d612:	7e9b      	ldrb	r3, [r3, #26]
    d614:	f003 0310 	and.w	r3, r3, #16
    d618:	2b00      	cmp	r3, #0
    d61a:	d001      	beq.n	d620 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d61c:	2310      	movs	r3, #16
    d61e:	e001      	b.n	d624 <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d620:	4b03      	ldr	r3, [pc, #12]	; (d630 <usbdc_get_state+0x24>)
    d622:	7e9b      	ldrb	r3, [r3, #26]
}
    d624:	4618      	mov	r0, r3
    d626:	46bd      	mov	sp, r7
    d628:	f85d 7b04 	ldr.w	r7, [sp], #4
    d62c:	4770      	bx	lr
    d62e:	bf00      	nop
    d630:	20000db0 	.word	0x20000db0

0000d634 <usb_get_u16>:
{
    d634:	b480      	push	{r7}
    d636:	b083      	sub	sp, #12
    d638:	af00      	add	r7, sp, #0
    d63a:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d63c:	687b      	ldr	r3, [r7, #4]
    d63e:	781b      	ldrb	r3, [r3, #0]
    d640:	b29a      	uxth	r2, r3
    d642:	687b      	ldr	r3, [r7, #4]
    d644:	3301      	adds	r3, #1
    d646:	781b      	ldrb	r3, [r3, #0]
    d648:	b29b      	uxth	r3, r3
    d64a:	021b      	lsls	r3, r3, #8
    d64c:	b29b      	uxth	r3, r3
    d64e:	4413      	add	r3, r2
    d650:	b29b      	uxth	r3, r3
}
    d652:	4618      	mov	r0, r3
    d654:	370c      	adds	r7, #12
    d656:	46bd      	mov	sp, r7
    d658:	f85d 7b04 	ldr.w	r7, [sp], #4
    d65c:	4770      	bx	lr

0000d65e <usb_desc_len>:
{
    d65e:	b480      	push	{r7}
    d660:	b083      	sub	sp, #12
    d662:	af00      	add	r7, sp, #0
    d664:	6078      	str	r0, [r7, #4]
	return desc[0];
    d666:	687b      	ldr	r3, [r7, #4]
    d668:	781b      	ldrb	r3, [r3, #0]
}
    d66a:	4618      	mov	r0, r3
    d66c:	370c      	adds	r7, #12
    d66e:	46bd      	mov	sp, r7
    d670:	f85d 7b04 	ldr.w	r7, [sp], #4
    d674:	4770      	bx	lr

0000d676 <usb_desc_type>:
{
    d676:	b480      	push	{r7}
    d678:	b083      	sub	sp, #12
    d67a:	af00      	add	r7, sp, #0
    d67c:	6078      	str	r0, [r7, #4]
	return desc[1];
    d67e:	687b      	ldr	r3, [r7, #4]
    d680:	3301      	adds	r3, #1
    d682:	781b      	ldrb	r3, [r3, #0]
}
    d684:	4618      	mov	r0, r3
    d686:	370c      	adds	r7, #12
    d688:	46bd      	mov	sp, r7
    d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d68e:	4770      	bx	lr

0000d690 <usb_desc_next>:
{
    d690:	b580      	push	{r7, lr}
    d692:	b082      	sub	sp, #8
    d694:	af00      	add	r7, sp, #0
    d696:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d698:	6878      	ldr	r0, [r7, #4]
    d69a:	4b05      	ldr	r3, [pc, #20]	; (d6b0 <usb_desc_next+0x20>)
    d69c:	4798      	blx	r3
    d69e:	4603      	mov	r3, r0
    d6a0:	461a      	mov	r2, r3
    d6a2:	687b      	ldr	r3, [r7, #4]
    d6a4:	4413      	add	r3, r2
}
    d6a6:	4618      	mov	r0, r3
    d6a8:	3708      	adds	r7, #8
    d6aa:	46bd      	mov	sp, r7
    d6ac:	bd80      	pop	{r7, pc}
    d6ae:	bf00      	nop
    d6b0:	0000d65f 	.word	0x0000d65f

0000d6b4 <usb_cfg_desc_total_len>:
{
    d6b4:	b580      	push	{r7, lr}
    d6b6:	b082      	sub	sp, #8
    d6b8:	af00      	add	r7, sp, #0
    d6ba:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d6bc:	687b      	ldr	r3, [r7, #4]
    d6be:	3302      	adds	r3, #2
    d6c0:	4618      	mov	r0, r3
    d6c2:	4b03      	ldr	r3, [pc, #12]	; (d6d0 <usb_cfg_desc_total_len+0x1c>)
    d6c4:	4798      	blx	r3
    d6c6:	4603      	mov	r3, r0
}
    d6c8:	4618      	mov	r0, r3
    d6ca:	3708      	adds	r7, #8
    d6cc:	46bd      	mov	sp, r7
    d6ce:	bd80      	pop	{r7, pc}
    d6d0:	0000d635 	.word	0x0000d635

0000d6d4 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d6d4:	b580      	push	{r7, lr}
    d6d6:	b082      	sub	sp, #8
    d6d8:	af00      	add	r7, sp, #0
    d6da:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d6dc:	6878      	ldr	r0, [r7, #4]
    d6de:	4b05      	ldr	r3, [pc, #20]	; (d6f4 <usb_cfg_desc_next+0x20>)
    d6e0:	4798      	blx	r3
    d6e2:	4603      	mov	r3, r0
    d6e4:	461a      	mov	r2, r3
    d6e6:	687b      	ldr	r3, [r7, #4]
    d6e8:	4413      	add	r3, r2
}
    d6ea:	4618      	mov	r0, r3
    d6ec:	3708      	adds	r7, #8
    d6ee:	46bd      	mov	sp, r7
    d6f0:	bd80      	pop	{r7, pc}
    d6f2:	bf00      	nop
    d6f4:	0000d6b5 	.word	0x0000d6b5

0000d6f8 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    d6f8:	b580      	push	{r7, lr}
    d6fa:	b084      	sub	sp, #16
    d6fc:	af00      	add	r7, sp, #0
    d6fe:	60f8      	str	r0, [r7, #12]
    d700:	60b9      	str	r1, [r7, #8]
    d702:	4613      	mov	r3, r2
    d704:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d706:	e015      	b.n	d734 <usb_find_desc+0x3c>
		_desc_len_check();
    d708:	68f8      	ldr	r0, [r7, #12]
    d70a:	4b0f      	ldr	r3, [pc, #60]	; (d748 <usb_find_desc+0x50>)
    d70c:	4798      	blx	r3
    d70e:	4603      	mov	r3, r0
    d710:	2b01      	cmp	r3, #1
    d712:	d801      	bhi.n	d718 <usb_find_desc+0x20>
    d714:	2300      	movs	r3, #0
    d716:	e012      	b.n	d73e <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    d718:	68f8      	ldr	r0, [r7, #12]
    d71a:	4b0c      	ldr	r3, [pc, #48]	; (d74c <usb_find_desc+0x54>)
    d71c:	4798      	blx	r3
    d71e:	4603      	mov	r3, r0
    d720:	461a      	mov	r2, r3
    d722:	79fb      	ldrb	r3, [r7, #7]
    d724:	4293      	cmp	r3, r2
    d726:	d101      	bne.n	d72c <usb_find_desc+0x34>
			return desc;
    d728:	68fb      	ldr	r3, [r7, #12]
    d72a:	e008      	b.n	d73e <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    d72c:	68f8      	ldr	r0, [r7, #12]
    d72e:	4b08      	ldr	r3, [pc, #32]	; (d750 <usb_find_desc+0x58>)
    d730:	4798      	blx	r3
    d732:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d734:	68fa      	ldr	r2, [r7, #12]
    d736:	68bb      	ldr	r3, [r7, #8]
    d738:	429a      	cmp	r2, r3
    d73a:	d3e5      	bcc.n	d708 <usb_find_desc+0x10>
	}
	return NULL;
    d73c:	2300      	movs	r3, #0
}
    d73e:	4618      	mov	r0, r3
    d740:	3710      	adds	r7, #16
    d742:	46bd      	mov	sp, r7
    d744:	bd80      	pop	{r7, pc}
    d746:	bf00      	nop
    d748:	0000d65f 	.word	0x0000d65f
    d74c:	0000d677 	.word	0x0000d677
    d750:	0000d691 	.word	0x0000d691

0000d754 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    d754:	b580      	push	{r7, lr}
    d756:	b082      	sub	sp, #8
    d758:	af00      	add	r7, sp, #0
    d75a:	6078      	str	r0, [r7, #4]
    d75c:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d75e:	e019      	b.n	d794 <usb_find_ep_desc+0x40>
		_desc_len_check();
    d760:	6878      	ldr	r0, [r7, #4]
    d762:	4b12      	ldr	r3, [pc, #72]	; (d7ac <usb_find_ep_desc+0x58>)
    d764:	4798      	blx	r3
    d766:	4603      	mov	r3, r0
    d768:	2b01      	cmp	r3, #1
    d76a:	d801      	bhi.n	d770 <usb_find_ep_desc+0x1c>
    d76c:	2300      	movs	r3, #0
    d76e:	e018      	b.n	d7a2 <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    d770:	6878      	ldr	r0, [r7, #4]
    d772:	4b0f      	ldr	r3, [pc, #60]	; (d7b0 <usb_find_ep_desc+0x5c>)
    d774:	4798      	blx	r3
    d776:	4603      	mov	r3, r0
    d778:	2b04      	cmp	r3, #4
    d77a:	d010      	beq.n	d79e <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    d77c:	6878      	ldr	r0, [r7, #4]
    d77e:	4b0c      	ldr	r3, [pc, #48]	; (d7b0 <usb_find_ep_desc+0x5c>)
    d780:	4798      	blx	r3
    d782:	4603      	mov	r3, r0
    d784:	2b05      	cmp	r3, #5
    d786:	d101      	bne.n	d78c <usb_find_ep_desc+0x38>
			return desc;
    d788:	687b      	ldr	r3, [r7, #4]
    d78a:	e00a      	b.n	d7a2 <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    d78c:	6878      	ldr	r0, [r7, #4]
    d78e:	4b09      	ldr	r3, [pc, #36]	; (d7b4 <usb_find_ep_desc+0x60>)
    d790:	4798      	blx	r3
    d792:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    d794:	687a      	ldr	r2, [r7, #4]
    d796:	683b      	ldr	r3, [r7, #0]
    d798:	429a      	cmp	r2, r3
    d79a:	d3e1      	bcc.n	d760 <usb_find_ep_desc+0xc>
    d79c:	e000      	b.n	d7a0 <usb_find_ep_desc+0x4c>
			break;
    d79e:	bf00      	nop
	}
	return NULL;
    d7a0:	2300      	movs	r3, #0
}
    d7a2:	4618      	mov	r0, r3
    d7a4:	3708      	adds	r7, #8
    d7a6:	46bd      	mov	sp, r7
    d7a8:	bd80      	pop	{r7, pc}
    d7aa:	bf00      	nop
    d7ac:	0000d65f 	.word	0x0000d65f
    d7b0:	0000d677 	.word	0x0000d677
    d7b4:	0000d691 	.word	0x0000d691

0000d7b8 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    d7b8:	b580      	push	{r7, lr}
    d7ba:	b084      	sub	sp, #16
    d7bc:	af00      	add	r7, sp, #0
    d7be:	60f8      	str	r0, [r7, #12]
    d7c0:	60b9      	str	r1, [r7, #8]
    d7c2:	4613      	mov	r3, r2
    d7c4:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    d7c6:	2202      	movs	r2, #2
    d7c8:	68b9      	ldr	r1, [r7, #8]
    d7ca:	68f8      	ldr	r0, [r7, #12]
    d7cc:	4b15      	ldr	r3, [pc, #84]	; (d824 <usb_find_cfg_desc+0x6c>)
    d7ce:	4798      	blx	r3
    d7d0:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    d7d2:	68fb      	ldr	r3, [r7, #12]
    d7d4:	2b00      	cmp	r3, #0
    d7d6:	d11a      	bne.n	d80e <usb_find_cfg_desc+0x56>
		return NULL;
    d7d8:	2300      	movs	r3, #0
    d7da:	e01f      	b.n	d81c <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    d7dc:	68f8      	ldr	r0, [r7, #12]
    d7de:	4b12      	ldr	r3, [pc, #72]	; (d828 <usb_find_cfg_desc+0x70>)
    d7e0:	4798      	blx	r3
    d7e2:	4603      	mov	r3, r0
    d7e4:	2b01      	cmp	r3, #1
    d7e6:	d801      	bhi.n	d7ec <usb_find_cfg_desc+0x34>
    d7e8:	2300      	movs	r3, #0
    d7ea:	e017      	b.n	d81c <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    d7ec:	68fb      	ldr	r3, [r7, #12]
    d7ee:	3301      	adds	r3, #1
    d7f0:	781b      	ldrb	r3, [r3, #0]
    d7f2:	2b02      	cmp	r3, #2
    d7f4:	d110      	bne.n	d818 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    d7f6:	68fb      	ldr	r3, [r7, #12]
    d7f8:	3305      	adds	r3, #5
    d7fa:	781b      	ldrb	r3, [r3, #0]
    d7fc:	79fa      	ldrb	r2, [r7, #7]
    d7fe:	429a      	cmp	r2, r3
    d800:	d101      	bne.n	d806 <usb_find_cfg_desc+0x4e>
			return desc;
    d802:	68fb      	ldr	r3, [r7, #12]
    d804:	e00a      	b.n	d81c <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    d806:	68f8      	ldr	r0, [r7, #12]
    d808:	4b08      	ldr	r3, [pc, #32]	; (d82c <usb_find_cfg_desc+0x74>)
    d80a:	4798      	blx	r3
    d80c:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d80e:	68fa      	ldr	r2, [r7, #12]
    d810:	68bb      	ldr	r3, [r7, #8]
    d812:	429a      	cmp	r2, r3
    d814:	d3e2      	bcc.n	d7dc <usb_find_cfg_desc+0x24>
    d816:	e000      	b.n	d81a <usb_find_cfg_desc+0x62>
			break;
    d818:	bf00      	nop
	}
	return NULL;
    d81a:	2300      	movs	r3, #0
}
    d81c:	4618      	mov	r0, r3
    d81e:	3710      	adds	r7, #16
    d820:	46bd      	mov	sp, r7
    d822:	bd80      	pop	{r7, pc}
    d824:	0000d6f9 	.word	0x0000d6f9
    d828:	0000d65f 	.word	0x0000d65f
    d82c:	0000d6d5 	.word	0x0000d6d5

0000d830 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    d830:	b580      	push	{r7, lr}
    d832:	b086      	sub	sp, #24
    d834:	af00      	add	r7, sp, #0
    d836:	60f8      	str	r0, [r7, #12]
    d838:	60b9      	str	r1, [r7, #8]
    d83a:	4613      	mov	r3, r2
    d83c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    d83e:	2300      	movs	r3, #0
    d840:	75fb      	strb	r3, [r7, #23]
    d842:	e020      	b.n	d886 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    d844:	2203      	movs	r2, #3
    d846:	68b9      	ldr	r1, [r7, #8]
    d848:	68f8      	ldr	r0, [r7, #12]
    d84a:	4b13      	ldr	r3, [pc, #76]	; (d898 <usb_find_str_desc+0x68>)
    d84c:	4798      	blx	r3
    d84e:	60f8      	str	r0, [r7, #12]
		if (desc) {
    d850:	68fb      	ldr	r3, [r7, #12]
    d852:	2b00      	cmp	r3, #0
    d854:	d015      	beq.n	d882 <usb_find_str_desc+0x52>
			_desc_len_check();
    d856:	68f8      	ldr	r0, [r7, #12]
    d858:	4b10      	ldr	r3, [pc, #64]	; (d89c <usb_find_str_desc+0x6c>)
    d85a:	4798      	blx	r3
    d85c:	4603      	mov	r3, r0
    d85e:	2b01      	cmp	r3, #1
    d860:	d801      	bhi.n	d866 <usb_find_str_desc+0x36>
    d862:	2300      	movs	r3, #0
    d864:	e014      	b.n	d890 <usb_find_str_desc+0x60>
			if (i == str_index) {
    d866:	7dfa      	ldrb	r2, [r7, #23]
    d868:	79fb      	ldrb	r3, [r7, #7]
    d86a:	429a      	cmp	r2, r3
    d86c:	d101      	bne.n	d872 <usb_find_str_desc+0x42>
				return desc;
    d86e:	68fb      	ldr	r3, [r7, #12]
    d870:	e00e      	b.n	d890 <usb_find_str_desc+0x60>
			}
			i++;
    d872:	7dfb      	ldrb	r3, [r7, #23]
    d874:	3301      	adds	r3, #1
    d876:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    d878:	68f8      	ldr	r0, [r7, #12]
    d87a:	4b09      	ldr	r3, [pc, #36]	; (d8a0 <usb_find_str_desc+0x70>)
    d87c:	4798      	blx	r3
    d87e:	60f8      	str	r0, [r7, #12]
    d880:	e001      	b.n	d886 <usb_find_str_desc+0x56>
		} else {
			return NULL;
    d882:	2300      	movs	r3, #0
    d884:	e004      	b.n	d890 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    d886:	68fa      	ldr	r2, [r7, #12]
    d888:	68bb      	ldr	r3, [r7, #8]
    d88a:	429a      	cmp	r2, r3
    d88c:	d3da      	bcc.n	d844 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    d88e:	2300      	movs	r3, #0
}
    d890:	4618      	mov	r0, r3
    d892:	3718      	adds	r7, #24
    d894:	46bd      	mov	sp, r7
    d896:	bd80      	pop	{r7, pc}
    d898:	0000d6f9 	.word	0x0000d6f9
    d89c:	0000d65f 	.word	0x0000d65f
    d8a0:	0000d691 	.word	0x0000d691

0000d8a4 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    d8a4:	b480      	push	{r7}
    d8a6:	b083      	sub	sp, #12
    d8a8:	af00      	add	r7, sp, #0
    d8aa:	6078      	str	r0, [r7, #4]
    d8ac:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    d8ae:	687b      	ldr	r3, [r7, #4]
    d8b0:	683a      	ldr	r2, [r7, #0]
    d8b2:	60da      	str	r2, [r3, #12]
	ptrTimerClass=this;
    d8b4:	4a06      	ldr	r2, [pc, #24]	; (d8d0 <_ZN11Timer_ClassC1EP16timer_descriptor+0x2c>)
    d8b6:	687b      	ldr	r3, [r7, #4]
    d8b8:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    d8ba:	687b      	ldr	r3, [r7, #4]
    d8bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d8c0:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    d8c2:	687b      	ldr	r3, [r7, #4]
    d8c4:	4618      	mov	r0, r3
    d8c6:	370c      	adds	r7, #12
    d8c8:	46bd      	mov	sp, r7
    d8ca:	bc80      	pop	{r7}
    d8cc:	4770      	bx	lr
    d8ce:	bf00      	nop
    d8d0:	20000dd0 	.word	0x20000dd0

0000d8d4 <_ZN11Timer_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    d8d4:	b480      	push	{r7}
    d8d6:	b083      	sub	sp, #12
    d8d8:	af00      	add	r7, sp, #0
    d8da:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    d8dc:	687b      	ldr	r3, [r7, #4]
    d8de:	2200      	movs	r2, #0
    d8e0:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    d8e2:	687b      	ldr	r3, [r7, #4]
    d8e4:	4618      	mov	r0, r3
    d8e6:	370c      	adds	r7, #12
    d8e8:	46bd      	mov	sp, r7
    d8ea:	bc80      	pop	{r7}
    d8ec:	4770      	bx	lr
	...

0000d8f0 <_ZL9InitArrayv>:


static void InitArray(){
    d8f0:	b480      	push	{r7}
    d8f2:	b083      	sub	sp, #12
    d8f4:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    d8f6:	2301      	movs	r3, #1
    d8f8:	607b      	str	r3, [r7, #4]
    d8fa:	687b      	ldr	r3, [r7, #4]
    d8fc:	2b0f      	cmp	r3, #15
    d8fe:	dc26      	bgt.n	d94e <_ZL9InitArrayv+0x5e>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    d900:	4917      	ldr	r1, [pc, #92]	; (d960 <_ZL9InitArrayv+0x70>)
    d902:	687a      	ldr	r2, [r7, #4]
    d904:	4613      	mov	r3, r2
    d906:	009b      	lsls	r3, r3, #2
    d908:	4413      	add	r3, r2
    d90a:	009b      	lsls	r3, r3, #2
    d90c:	440b      	add	r3, r1
    d90e:	2200      	movs	r2, #0
    d910:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    d912:	4913      	ldr	r1, [pc, #76]	; (d960 <_ZL9InitArrayv+0x70>)
    d914:	687a      	ldr	r2, [r7, #4]
    d916:	4613      	mov	r3, r2
    d918:	009b      	lsls	r3, r3, #2
    d91a:	4413      	add	r3, r2
    d91c:	009b      	lsls	r3, r3, #2
    d91e:	440b      	add	r3, r1
    d920:	330c      	adds	r3, #12
    d922:	2200      	movs	r2, #0
    d924:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    d926:	687b      	ldr	r3, [r7, #4]
    d928:	1e5a      	subs	r2, r3, #1
    d92a:	6879      	ldr	r1, [r7, #4]
    d92c:	460b      	mov	r3, r1
    d92e:	009b      	lsls	r3, r3, #2
    d930:	440b      	add	r3, r1
    d932:	009b      	lsls	r3, r3, #2
    d934:	490a      	ldr	r1, [pc, #40]	; (d960 <_ZL9InitArrayv+0x70>)
    d936:	4419      	add	r1, r3
    d938:	4809      	ldr	r0, [pc, #36]	; (d960 <_ZL9InitArrayv+0x70>)
    d93a:	4613      	mov	r3, r2
    d93c:	009b      	lsls	r3, r3, #2
    d93e:	4413      	add	r3, r2
    d940:	009b      	lsls	r3, r3, #2
    d942:	4403      	add	r3, r0
    d944:	6019      	str	r1, [r3, #0]
	for (int i=1; i<TASK_NUMBER	; i++)
    d946:	687b      	ldr	r3, [r7, #4]
    d948:	3301      	adds	r3, #1
    d94a:	607b      	str	r3, [r7, #4]
    d94c:	e7d5      	b.n	d8fa <_ZL9InitArrayv+0xa>
	}
	arrayInitiated=true;
    d94e:	4b05      	ldr	r3, [pc, #20]	; (d964 <_ZL9InitArrayv+0x74>)
    d950:	2201      	movs	r2, #1
    d952:	701a      	strb	r2, [r3, #0]
		
}
    d954:	bf00      	nop
    d956:	370c      	adds	r7, #12
    d958:	46bd      	mov	sp, r7
    d95a:	bc80      	pop	{r7}
    d95c:	4770      	bx	lr
    d95e:	bf00      	nop
    d960:	20000dd4 	.word	0x20000dd4
    d964:	20000f14 	.word	0x20000f14

0000d968 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    d968:	b580      	push	{r7, lr}
    d96a:	b082      	sub	sp, #8
    d96c:	af00      	add	r7, sp, #0
    d96e:	6078      	str	r0, [r7, #4]
	ticks=0;
    d970:	687b      	ldr	r3, [r7, #4]
    d972:	2200      	movs	r2, #0
    d974:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    d976:	4b0d      	ldr	r3, [pc, #52]	; (d9ac <_ZN11Timer_Class4InitEv+0x44>)
    d978:	781b      	ldrb	r3, [r3, #0]
    d97a:	f083 0301 	eor.w	r3, r3, #1
    d97e:	b2db      	uxtb	r3, r3
    d980:	2b00      	cmp	r3, #0
    d982:	d001      	beq.n	d988 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    d984:	4b0a      	ldr	r3, [pc, #40]	; (d9b0 <_ZN11Timer_Class4InitEv+0x48>)
    d986:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=start()==ERR_NONE;
    d988:	6878      	ldr	r0, [r7, #4]
    d98a:	4b0a      	ldr	r3, [pc, #40]	; (d9b4 <_ZN11Timer_Class4InitEv+0x4c>)
    d98c:	4798      	blx	r3
    d98e:	4603      	mov	r3, r0
    d990:	2b00      	cmp	r3, #0
    d992:	bf0c      	ite	eq
    d994:	2301      	moveq	r3, #1
    d996:	2300      	movne	r3, #0
    d998:	b2da      	uxtb	r2, r3
    d99a:	687b      	ldr	r3, [r7, #4]
    d99c:	709a      	strb	r2, [r3, #2]
	return isOK;
    d99e:	687b      	ldr	r3, [r7, #4]
    d9a0:	789b      	ldrb	r3, [r3, #2]
    d9a2:	b2db      	uxtb	r3, r3
}
    d9a4:	4618      	mov	r0, r3
    d9a6:	3708      	adds	r7, #8
    d9a8:	46bd      	mov	sp, r7
    d9aa:	bd80      	pop	{r7, pc}
    d9ac:	20000f14 	.word	0x20000f14
    d9b0:	0000d8f1 	.word	0x0000d8f1
    d9b4:	0000d9b9 	.word	0x0000d9b9

0000d9b8 <_ZN11Timer_Class5startEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::start(void){
    d9b8:	b580      	push	{r7, lr}
    d9ba:	b084      	sub	sp, #16
    d9bc:	af00      	add	r7, sp, #0
    d9be:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    d9c0:	687b      	ldr	r3, [r7, #4]
    d9c2:	68db      	ldr	r3, [r3, #12]
    d9c4:	4618      	mov	r0, r3
    d9c6:	4b04      	ldr	r3, [pc, #16]	; (d9d8 <_ZN11Timer_Class5startEv+0x20>)
    d9c8:	4798      	blx	r3
    d9ca:	60f8      	str	r0, [r7, #12]
	return status;
    d9cc:	68fb      	ldr	r3, [r7, #12]
	
}
    d9ce:	4618      	mov	r0, r3
    d9d0:	3710      	adds	r7, #16
    d9d2:	46bd      	mov	sp, r7
    d9d4:	bd80      	pop	{r7, pc}
    d9d6:	bf00      	nop
    d9d8:	0000306d 	.word	0x0000306d

0000d9dc <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    d9dc:	b580      	push	{r7, lr}
    d9de:	b086      	sub	sp, #24
    d9e0:	af00      	add	r7, sp, #0
    d9e2:	60f8      	str	r0, [r7, #12]
    d9e4:	60b9      	str	r1, [r7, #8]
    d9e6:	607a      	str	r2, [r7, #4]
    d9e8:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    d9ea:	68f8      	ldr	r0, [r7, #12]
    d9ec:	4b0d      	ldr	r3, [pc, #52]	; (da24 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    d9ee:	4798      	blx	r3
	task->interval = interval;
    d9f0:	68fb      	ldr	r3, [r7, #12]
    d9f2:	699b      	ldr	r3, [r3, #24]
    d9f4:	687a      	ldr	r2, [r7, #4]
    d9f6:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    d9f8:	68fb      	ldr	r3, [r7, #12]
    d9fa:	699b      	ldr	r3, [r3, #24]
    d9fc:	68ba      	ldr	r2, [r7, #8]
    d9fe:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    da00:	68fb      	ldr	r3, [r7, #12]
    da02:	699b      	ldr	r3, [r3, #24]
    da04:	78fa      	ldrb	r2, [r7, #3]
    da06:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    da08:	68fb      	ldr	r3, [r7, #12]
    da0a:	68da      	ldr	r2, [r3, #12]
    da0c:	68fb      	ldr	r3, [r7, #12]
    da0e:	699b      	ldr	r3, [r3, #24]
    da10:	4619      	mov	r1, r3
    da12:	4610      	mov	r0, r2
    da14:	4b04      	ldr	r3, [pc, #16]	; (da28 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    da16:	4798      	blx	r3
    da18:	6178      	str	r0, [r7, #20]
	
	return status;
    da1a:	697b      	ldr	r3, [r7, #20]
}
    da1c:	4618      	mov	r0, r3
    da1e:	3718      	adds	r7, #24
    da20:	46bd      	mov	sp, r7
    da22:	bd80      	pop	{r7, pc}
    da24:	0000dad5 	.word	0x0000dad5
    da28:	00003141 	.word	0x00003141

0000da2c <_ZN11Timer_Class11Remove_taskEPFvvE>:
	
	timer_remove_task(timer_descr, task);
	task->cb=NULL;
}

void	Timer_Class::Remove_task(FUNC_PTR func){
    da2c:	b580      	push	{r7, lr}
    da2e:	b082      	sub	sp, #8
    da30:	af00      	add	r7, sp, #0
    da32:	6078      	str	r0, [r7, #4]
    da34:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    da36:	6839      	ldr	r1, [r7, #0]
    da38:	6878      	ldr	r0, [r7, #4]
    da3a:	4b0f      	ldr	r3, [pc, #60]	; (da78 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    da3c:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    da3e:	687b      	ldr	r3, [r7, #4]
    da40:	68db      	ldr	r3, [r3, #12]
    da42:	f103 0218 	add.w	r2, r3, #24
    da46:	687b      	ldr	r3, [r7, #4]
    da48:	699b      	ldr	r3, [r3, #24]
    da4a:	4619      	mov	r1, r3
    da4c:	4610      	mov	r0, r2
    da4e:	4b0b      	ldr	r3, [pc, #44]	; (da7c <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    da50:	4798      	blx	r3
    da52:	4603      	mov	r3, r0
    da54:	2b00      	cmp	r3, #0
    da56:	d007      	beq.n	da68 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    da58:	687b      	ldr	r3, [r7, #4]
    da5a:	68da      	ldr	r2, [r3, #12]
    da5c:	687b      	ldr	r3, [r7, #4]
    da5e:	699b      	ldr	r3, [r3, #24]
    da60:	4619      	mov	r1, r3
    da62:	4610      	mov	r0, r2
    da64:	4b06      	ldr	r3, [pc, #24]	; (da80 <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    da66:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    da68:	687b      	ldr	r3, [r7, #4]
    da6a:	699b      	ldr	r3, [r3, #24]
    da6c:	2200      	movs	r2, #0
    da6e:	60da      	str	r2, [r3, #12]
}
    da70:	bf00      	nop
    da72:	3708      	adds	r7, #8
    da74:	46bd      	mov	sp, r7
    da76:	bd80      	pop	{r7, pc}
    da78:	0000db35 	.word	0x0000db35
    da7c:	00003e2d 	.word	0x00003e2d
    da80:	00003245 	.word	0x00003245

0000da84 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    da84:	b590      	push	{r4, r7, lr}
    da86:	b087      	sub	sp, #28
    da88:	af00      	add	r7, sp, #0
    da8a:	60f8      	str	r0, [r7, #12]
    da8c:	60b9      	str	r1, [r7, #8]
    da8e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    da90:	2300      	movs	r3, #0
    da92:	687a      	ldr	r2, [r7, #4]
    da94:	68b9      	ldr	r1, [r7, #8]
    da96:	68f8      	ldr	r0, [r7, #12]
    da98:	4c0c      	ldr	r4, [pc, #48]	; (dacc <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    da9a:	47a0      	blx	r4
    da9c:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    da9e:	68fb      	ldr	r3, [r7, #12]
    daa0:	68db      	ldr	r3, [r3, #12]
    daa2:	681b      	ldr	r3, [r3, #0]
    daa4:	699b      	ldr	r3, [r3, #24]
    daa6:	68fa      	ldr	r2, [r7, #12]
    daa8:	68d2      	ldr	r2, [r2, #12]
    daaa:	3204      	adds	r2, #4
    daac:	4610      	mov	r0, r2
    daae:	4798      	blx	r3
    dab0:	4603      	mov	r3, r0
    dab2:	2b00      	cmp	r3, #0
    dab4:	d105      	bne.n	dac2 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    dab6:	68fb      	ldr	r3, [r7, #12]
    dab8:	68db      	ldr	r3, [r3, #12]
    daba:	4618      	mov	r0, r3
    dabc:	4b04      	ldr	r3, [pc, #16]	; (dad0 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    dabe:	4798      	blx	r3
    dac0:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    dac2:	697b      	ldr	r3, [r7, #20]
}
    dac4:	4618      	mov	r0, r3
    dac6:	371c      	adds	r7, #28
    dac8:	46bd      	mov	sp, r7
    daca:	bd90      	pop	{r4, r7, pc}
    dacc:	0000d9dd 	.word	0x0000d9dd
    dad0:	0000306d 	.word	0x0000306d

0000dad4 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    dad4:	b480      	push	{r7}
    dad6:	b085      	sub	sp, #20
    dad8:	af00      	add	r7, sp, #0
    dada:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dadc:	2300      	movs	r3, #0
    dade:	73fb      	strb	r3, [r7, #15]
    dae0:	7bfb      	ldrb	r3, [r7, #15]
    dae2:	2b0f      	cmp	r3, #15
    dae4:	dc1c      	bgt.n	db20 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x4c>
	{	
				
		j=ii%TASK_NUMBER;
    dae6:	7bfb      	ldrb	r3, [r7, #15]
    dae8:	f003 030f 	and.w	r3, r3, #15
    daec:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    daee:	7bba      	ldrb	r2, [r7, #14]
    daf0:	490f      	ldr	r1, [pc, #60]	; (db30 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    daf2:	4613      	mov	r3, r2
    daf4:	009b      	lsls	r3, r3, #2
    daf6:	4413      	add	r3, r2
    daf8:	009b      	lsls	r3, r3, #2
    dafa:	440b      	add	r3, r1
    dafc:	330c      	adds	r3, #12
    dafe:	681b      	ldr	r3, [r3, #0]
    db00:	2b00      	cmp	r3, #0
    db02:	d109      	bne.n	db18 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x44>
		{
			
			task=&taskArray[j];
    db04:	7bba      	ldrb	r2, [r7, #14]
    db06:	4613      	mov	r3, r2
    db08:	009b      	lsls	r3, r3, #2
    db0a:	4413      	add	r3, r2
    db0c:	009b      	lsls	r3, r3, #2
    db0e:	4a08      	ldr	r2, [pc, #32]	; (db30 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    db10:	441a      	add	r2, r3
    db12:	687b      	ldr	r3, [r7, #4]
    db14:	619a      	str	r2, [r3, #24]
			return;
    db16:	e006      	b.n	db26 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    db18:	7bfb      	ldrb	r3, [r7, #15]
    db1a:	3301      	adds	r3, #1
    db1c:	73fb      	strb	r3, [r7, #15]
    db1e:	e7df      	b.n	dae0 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    db20:	687b      	ldr	r3, [r7, #4]
    db22:	4a03      	ldr	r2, [pc, #12]	; (db30 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5c>)
    db24:	619a      	str	r2, [r3, #24]

}
    db26:	3714      	adds	r7, #20
    db28:	46bd      	mov	sp, r7
    db2a:	bc80      	pop	{r7}
    db2c:	4770      	bx	lr
    db2e:	bf00      	nop
    db30:	20000dd4 	.word	0x20000dd4

0000db34 <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    db34:	b480      	push	{r7}
    db36:	b085      	sub	sp, #20
    db38:	af00      	add	r7, sp, #0
    db3a:	6078      	str	r0, [r7, #4]
    db3c:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    db3e:	2300      	movs	r3, #0
    db40:	73fb      	strb	r3, [r7, #15]
    db42:	7bfb      	ldrb	r3, [r7, #15]
    db44:	2b0f      	cmp	r3, #15
    db46:	dc19      	bgt.n	db7c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    db48:	7bfa      	ldrb	r2, [r7, #15]
    db4a:	490f      	ldr	r1, [pc, #60]	; (db88 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    db4c:	4613      	mov	r3, r2
    db4e:	009b      	lsls	r3, r3, #2
    db50:	4413      	add	r3, r2
    db52:	009b      	lsls	r3, r3, #2
    db54:	440b      	add	r3, r1
    db56:	330c      	adds	r3, #12
    db58:	681a      	ldr	r2, [r3, #0]
    db5a:	683b      	ldr	r3, [r7, #0]
    db5c:	429a      	cmp	r2, r3
    db5e:	d109      	bne.n	db74 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    db60:	7bfa      	ldrb	r2, [r7, #15]
    db62:	4613      	mov	r3, r2
    db64:	009b      	lsls	r3, r3, #2
    db66:	4413      	add	r3, r2
    db68:	009b      	lsls	r3, r3, #2
    db6a:	4a07      	ldr	r2, [pc, #28]	; (db88 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    db6c:	441a      	add	r2, r3
    db6e:	687b      	ldr	r3, [r7, #4]
    db70:	619a      	str	r2, [r3, #24]
			return;
    db72:	e004      	b.n	db7e <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    db74:	7bfb      	ldrb	r3, [r7, #15]
    db76:	3301      	adds	r3, #1
    db78:	73fb      	strb	r3, [r7, #15]
    db7a:	e7e2      	b.n	db42 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    db7c:	bf00      	nop
}
    db7e:	3714      	adds	r7, #20
    db80:	46bd      	mov	sp, r7
    db82:	bc80      	pop	{r7}
    db84:	4770      	bx	lr
    db86:	bf00      	nop
    db88:	20000dd4 	.word	0x20000dd4

0000db8c <_Z41__static_initialization_and_destruction_0ii>:

Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
Timer_Class eventTimer(&TIMER_EVENT);
Timer_Class hvacTimer(&TIMER_HVAC);
Timer_Class connectionTimer(&TIMER_INTERFACE);
Timer_Class arincTimer(&TIMER_ARINC);
    db8c:	b580      	push	{r7, lr}
    db8e:	b082      	sub	sp, #8
    db90:	af00      	add	r7, sp, #0
    db92:	6078      	str	r0, [r7, #4]
    db94:	6039      	str	r1, [r7, #0]
    db96:	687b      	ldr	r3, [r7, #4]
    db98:	2b01      	cmp	r3, #1
    db9a:	d131      	bne.n	dc00 <_Z41__static_initialization_and_destruction_0ii+0x74>
    db9c:	683b      	ldr	r3, [r7, #0]
    db9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dba2:	4293      	cmp	r3, r2
    dba4:	d12c      	bne.n	dc00 <_Z41__static_initialization_and_destruction_0ii+0x74>
Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    dba6:	4918      	ldr	r1, [pc, #96]	; (dc08 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
    dba8:	4818      	ldr	r0, [pc, #96]	; (dc0c <_Z41__static_initialization_and_destruction_0ii+0x80>)
    dbaa:	4b19      	ldr	r3, [pc, #100]	; (dc10 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    dbac:	4798      	blx	r3
    dbae:	4a19      	ldr	r2, [pc, #100]	; (dc14 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    dbb0:	4919      	ldr	r1, [pc, #100]	; (dc18 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    dbb2:	4816      	ldr	r0, [pc, #88]	; (dc0c <_Z41__static_initialization_and_destruction_0ii+0x80>)
    dbb4:	4b19      	ldr	r3, [pc, #100]	; (dc1c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    dbb6:	4798      	blx	r3
Timer_Class eventTimer(&TIMER_EVENT);
    dbb8:	4919      	ldr	r1, [pc, #100]	; (dc20 <_Z41__static_initialization_and_destruction_0ii+0x94>)
    dbba:	481a      	ldr	r0, [pc, #104]	; (dc24 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    dbbc:	4b14      	ldr	r3, [pc, #80]	; (dc10 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    dbbe:	4798      	blx	r3
    dbc0:	4a14      	ldr	r2, [pc, #80]	; (dc14 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    dbc2:	4915      	ldr	r1, [pc, #84]	; (dc18 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    dbc4:	4817      	ldr	r0, [pc, #92]	; (dc24 <_Z41__static_initialization_and_destruction_0ii+0x98>)
    dbc6:	4b15      	ldr	r3, [pc, #84]	; (dc1c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    dbc8:	4798      	blx	r3
Timer_Class hvacTimer(&TIMER_HVAC);
    dbca:	4917      	ldr	r1, [pc, #92]	; (dc28 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
    dbcc:	4817      	ldr	r0, [pc, #92]	; (dc2c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    dbce:	4b10      	ldr	r3, [pc, #64]	; (dc10 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    dbd0:	4798      	blx	r3
    dbd2:	4a10      	ldr	r2, [pc, #64]	; (dc14 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    dbd4:	4910      	ldr	r1, [pc, #64]	; (dc18 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    dbd6:	4815      	ldr	r0, [pc, #84]	; (dc2c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
    dbd8:	4b10      	ldr	r3, [pc, #64]	; (dc1c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    dbda:	4798      	blx	r3
Timer_Class connectionTimer(&TIMER_INTERFACE);
    dbdc:	4914      	ldr	r1, [pc, #80]	; (dc30 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
    dbde:	4815      	ldr	r0, [pc, #84]	; (dc34 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    dbe0:	4b0b      	ldr	r3, [pc, #44]	; (dc10 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    dbe2:	4798      	blx	r3
    dbe4:	4a0b      	ldr	r2, [pc, #44]	; (dc14 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    dbe6:	490c      	ldr	r1, [pc, #48]	; (dc18 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    dbe8:	4812      	ldr	r0, [pc, #72]	; (dc34 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
    dbea:	4b0c      	ldr	r3, [pc, #48]	; (dc1c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    dbec:	4798      	blx	r3
Timer_Class arincTimer(&TIMER_ARINC);
    dbee:	4912      	ldr	r1, [pc, #72]	; (dc38 <_Z41__static_initialization_and_destruction_0ii+0xac>)
    dbf0:	4812      	ldr	r0, [pc, #72]	; (dc3c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    dbf2:	4b07      	ldr	r3, [pc, #28]	; (dc10 <_Z41__static_initialization_and_destruction_0ii+0x84>)
    dbf4:	4798      	blx	r3
    dbf6:	4a07      	ldr	r2, [pc, #28]	; (dc14 <_Z41__static_initialization_and_destruction_0ii+0x88>)
    dbf8:	4907      	ldr	r1, [pc, #28]	; (dc18 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
    dbfa:	4810      	ldr	r0, [pc, #64]	; (dc3c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
    dbfc:	4b07      	ldr	r3, [pc, #28]	; (dc1c <_Z41__static_initialization_and_destruction_0ii+0x90>)
    dbfe:	4798      	blx	r3
    dc00:	bf00      	nop
    dc02:	3708      	adds	r7, #8
    dc04:	46bd      	mov	sp, r7
    dc06:	bd80      	pop	{r7, pc}
    dc08:	20007dbc 	.word	0x20007dbc
    dc0c:	20000f18 	.word	0x20000f18
    dc10:	0000d8a5 	.word	0x0000d8a5
    dc14:	20000000 	.word	0x20000000
    dc18:	0000d8d5 	.word	0x0000d8d5
    dc1c:	00012a41 	.word	0x00012a41
    dc20:	20007e50 	.word	0x20007e50
    dc24:	20000f34 	.word	0x20000f34
    dc28:	20007f54 	.word	0x20007f54
    dc2c:	20000f50 	.word	0x20000f50
    dc30:	20007e70 	.word	0x20007e70
    dc34:	20000f6c 	.word	0x20000f6c
    dc38:	20007f14 	.word	0x20007f14
    dc3c:	20000f88 	.word	0x20000f88

0000dc40 <_GLOBAL__sub_I_ptrTimerClass>:
    dc40:	b580      	push	{r7, lr}
    dc42:	af00      	add	r7, sp, #0
    dc44:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dc48:	2001      	movs	r0, #1
    dc4a:	4b01      	ldr	r3, [pc, #4]	; (dc50 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    dc4c:	4798      	blx	r3
    dc4e:	bd80      	pop	{r7, pc}
    dc50:	0000db8d 	.word	0x0000db8d

0000dc54 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    dc54:	b480      	push	{r7}
    dc56:	b083      	sub	sp, #12
    dc58:	af00      	add	r7, sp, #0
    dc5a:	6078      	str	r0, [r7, #4]
    dc5c:	4a05      	ldr	r2, [pc, #20]	; (dc74 <_ZN5PrintC1Ev+0x20>)
    dc5e:	687b      	ldr	r3, [r7, #4]
    dc60:	601a      	str	r2, [r3, #0]
    dc62:	687b      	ldr	r3, [r7, #4]
    dc64:	2200      	movs	r2, #0
    dc66:	605a      	str	r2, [r3, #4]
    dc68:	687b      	ldr	r3, [r7, #4]
    dc6a:	4618      	mov	r0, r3
    dc6c:	370c      	adds	r7, #12
    dc6e:	46bd      	mov	sp, r7
    dc70:	bc80      	pop	{r7}
    dc72:	4770      	bx	lr
    dc74:	0001384c 	.word	0x0001384c

0000dc78 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    dc78:	b480      	push	{r7}
    dc7a:	b083      	sub	sp, #12
    dc7c:	af00      	add	r7, sp, #0
    dc7e:	6078      	str	r0, [r7, #4]
    dc80:	2300      	movs	r3, #0
    dc82:	4618      	mov	r0, r3
    dc84:	370c      	adds	r7, #12
    dc86:	46bd      	mov	sp, r7
    dc88:	bc80      	pop	{r7}
    dc8a:	4770      	bx	lr

0000dc8c <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    dc8c:	b480      	push	{r7}
    dc8e:	b083      	sub	sp, #12
    dc90:	af00      	add	r7, sp, #0
    dc92:	6078      	str	r0, [r7, #4]
    dc94:	bf00      	nop
    dc96:	370c      	adds	r7, #12
    dc98:	46bd      	mov	sp, r7
    dc9a:	bc80      	pop	{r7}
    dc9c:	4770      	bx	lr
	...

0000dca0 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    dca0:	b580      	push	{r7, lr}
    dca2:	b082      	sub	sp, #8
    dca4:	af00      	add	r7, sp, #0
    dca6:	6078      	str	r0, [r7, #4]
    dca8:	687b      	ldr	r3, [r7, #4]
    dcaa:	4618      	mov	r0, r3
    dcac:	4b06      	ldr	r3, [pc, #24]	; (dcc8 <_ZN6StreamC1Ev+0x28>)
    dcae:	4798      	blx	r3
    dcb0:	4a06      	ldr	r2, [pc, #24]	; (dccc <_ZN6StreamC1Ev+0x2c>)
    dcb2:	687b      	ldr	r3, [r7, #4]
    dcb4:	601a      	str	r2, [r3, #0]
    dcb6:	687b      	ldr	r3, [r7, #4]
    dcb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dcbc:	609a      	str	r2, [r3, #8]
    dcbe:	687b      	ldr	r3, [r7, #4]
    dcc0:	4618      	mov	r0, r3
    dcc2:	3708      	adds	r7, #8
    dcc4:	46bd      	mov	sp, r7
    dcc6:	bd80      	pop	{r7, pc}
    dcc8:	0000dc55 	.word	0x0000dc55
    dccc:	00013810 	.word	0x00013810

0000dcd0 <_ZL10USBTimeoutPK10timer_task>:
#include "CDC_Class.h"
#include "TimerSerial_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    dcd0:	b480      	push	{r7}
    dcd2:	b083      	sub	sp, #12
    dcd4:	af00      	add	r7, sp, #0
    dcd6:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    dcd8:	4b06      	ldr	r3, [pc, #24]	; (dcf4 <_ZL10USBTimeoutPK10timer_task+0x24>)
    dcda:	681b      	ldr	r3, [r3, #0]
    dcdc:	2201      	movs	r2, #1
    dcde:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    dce0:	4b04      	ldr	r3, [pc, #16]	; (dcf4 <_ZL10USBTimeoutPK10timer_task+0x24>)
    dce2:	681b      	ldr	r3, [r3, #0]
    dce4:	2200      	movs	r2, #0
    dce6:	741a      	strb	r2, [r3, #16]
	
}
    dce8:	bf00      	nop
    dcea:	370c      	adds	r7, #12
    dcec:	46bd      	mov	sp, r7
    dcee:	bc80      	pop	{r7}
    dcf0:	4770      	bx	lr
    dcf2:	bf00      	nop
    dcf4:	20000fa4 	.word	0x20000fa4

0000dcf8 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    dcf8:	b480      	push	{r7}
    dcfa:	b083      	sub	sp, #12
    dcfc:	af00      	add	r7, sp, #0
    dcfe:	4603      	mov	r3, r0
    dd00:	603a      	str	r2, [r7, #0]
    dd02:	71fb      	strb	r3, [r7, #7]
    dd04:	460b      	mov	r3, r1
    dd06:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    dd08:	4b08      	ldr	r3, [pc, #32]	; (dd2c <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    dd0a:	681b      	ldr	r3, [r3, #0]
    dd0c:	2201      	movs	r2, #1
    dd0e:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    dd10:	4b06      	ldr	r3, [pc, #24]	; (dd2c <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    dd12:	681b      	ldr	r3, [r3, #0]
    dd14:	2201      	movs	r2, #1
    dd16:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    dd18:	4b04      	ldr	r3, [pc, #16]	; (dd2c <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    dd1a:	681b      	ldr	r3, [r3, #0]
    dd1c:	2201      	movs	r2, #1
    dd1e:	741a      	strb	r2, [r3, #16]


	return false;
    dd20:	2300      	movs	r3, #0
}
    dd22:	4618      	mov	r0, r3
    dd24:	370c      	adds	r7, #12
    dd26:	46bd      	mov	sp, r7
    dd28:	bc80      	pop	{r7}
    dd2a:	4770      	bx	lr
    dd2c:	20000fa4 	.word	0x20000fa4

0000dd30 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    dd30:	b480      	push	{r7}
    dd32:	b083      	sub	sp, #12
    dd34:	af00      	add	r7, sp, #0
    dd36:	4603      	mov	r3, r0
    dd38:	603a      	str	r2, [r7, #0]
    dd3a:	71fb      	strb	r3, [r7, #7]
    dd3c:	460b      	mov	r3, r1
    dd3e:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    dd40:	4b08      	ldr	r3, [pc, #32]	; (dd64 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    dd42:	681b      	ldr	r3, [r3, #0]
    dd44:	2201      	movs	r2, #1
    dd46:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    dd48:	4b06      	ldr	r3, [pc, #24]	; (dd64 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    dd4a:	681b      	ldr	r3, [r3, #0]
    dd4c:	2201      	movs	r2, #1
    dd4e:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    dd50:	4b04      	ldr	r3, [pc, #16]	; (dd64 <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    dd52:	681b      	ldr	r3, [r3, #0]
    dd54:	2201      	movs	r2, #1
    dd56:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    dd58:	2300      	movs	r3, #0
}
    dd5a:	4618      	mov	r0, r3
    dd5c:	370c      	adds	r7, #12
    dd5e:	46bd      	mov	sp, r7
    dd60:	bc80      	pop	{r7}
    dd62:	4770      	bx	lr
    dd64:	20000fa4 	.word	0x20000fa4

0000dd68 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    dd68:	b580      	push	{r7, lr}
    dd6a:	b082      	sub	sp, #8
    dd6c:	af00      	add	r7, sp, #0
    dd6e:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    dd70:	793b      	ldrb	r3, [r7, #4]
    dd72:	f003 0301 	and.w	r3, r3, #1
    dd76:	b2db      	uxtb	r3, r3
    dd78:	2b00      	cmp	r3, #0
    dd7a:	d013      	beq.n	dda4 <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    dd7c:	490c      	ldr	r1, [pc, #48]	; (ddb0 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    dd7e:	2000      	movs	r0, #0
    dd80:	4b0c      	ldr	r3, [pc, #48]	; (ddb4 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    dd82:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    dd84:	490c      	ldr	r1, [pc, #48]	; (ddb8 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    dd86:	2001      	movs	r0, #1
    dd88:	4b0a      	ldr	r3, [pc, #40]	; (ddb4 <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    dd8a:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    dd8c:	4b0b      	ldr	r3, [pc, #44]	; (ddbc <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    dd8e:	681b      	ldr	r3, [r3, #0]
    dd90:	2201      	movs	r2, #1
    dd92:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    dd94:	4b09      	ldr	r3, [pc, #36]	; (ddbc <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    dd96:	681b      	ldr	r3, [r3, #0]
    dd98:	2201      	movs	r2, #1
    dd9a:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    dd9c:	4b07      	ldr	r3, [pc, #28]	; (ddbc <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    dd9e:	681b      	ldr	r3, [r3, #0]
    dda0:	2201      	movs	r2, #1
    dda2:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    dda4:	2300      	movs	r3, #0
}
    dda6:	4618      	mov	r0, r3
    dda8:	3708      	adds	r7, #8
    ddaa:	46bd      	mov	sp, r7
    ddac:	bd80      	pop	{r7, pc}
    ddae:	bf00      	nop
    ddb0:	0000dcf9 	.word	0x0000dcf9
    ddb4:	0000c86d 	.word	0x0000c86d
    ddb8:	0000dd31 	.word	0x0000dd31
    ddbc:	20000fa4 	.word	0x20000fa4

0000ddc0 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    ddc0:	b580      	push	{r7, lr}
    ddc2:	b082      	sub	sp, #8
    ddc4:	af00      	add	r7, sp, #0
    ddc6:	6078      	str	r0, [r7, #4]
    ddc8:	687b      	ldr	r3, [r7, #4]
    ddca:	4618      	mov	r0, r3
    ddcc:	4b0a      	ldr	r3, [pc, #40]	; (ddf8 <_ZN9CDC_ClassC1Ev+0x38>)
    ddce:	4798      	blx	r3
    ddd0:	687b      	ldr	r3, [r7, #4]
    ddd2:	3310      	adds	r3, #16
    ddd4:	4618      	mov	r0, r3
    ddd6:	4b09      	ldr	r3, [pc, #36]	; (ddfc <_ZN9CDC_ClassC1Ev+0x3c>)
    ddd8:	4798      	blx	r3
    ddda:	4a09      	ldr	r2, [pc, #36]	; (de00 <_ZN9CDC_ClassC1Ev+0x40>)
    dddc:	687b      	ldr	r3, [r7, #4]
    ddde:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    dde0:	687b      	ldr	r3, [r7, #4]
    dde2:	f04f 32ff 	mov.w	r2, #4294967295
    dde6:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    dde8:	4a06      	ldr	r2, [pc, #24]	; (de04 <_ZN9CDC_ClassC1Ev+0x44>)
    ddea:	687b      	ldr	r3, [r7, #4]
    ddec:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    ddee:	687b      	ldr	r3, [r7, #4]
    ddf0:	4618      	mov	r0, r3
    ddf2:	3708      	adds	r7, #8
    ddf4:	46bd      	mov	sp, r7
    ddf6:	bd80      	pop	{r7, pc}
    ddf8:	0000dca1 	.word	0x0000dca1
    ddfc:	0000e461 	.word	0x0000e461
    de00:	000137e0 	.word	0x000137e0
    de04:	20000fa4 	.word	0x20000fa4

0000de08 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    de08:	b580      	push	{r7, lr}
    de0a:	b082      	sub	sp, #8
    de0c:	af00      	add	r7, sp, #0
    de0e:	6078      	str	r0, [r7, #4]
    de10:	4a06      	ldr	r2, [pc, #24]	; (de2c <_ZN9CDC_ClassD1Ev+0x24>)
    de12:	687b      	ldr	r3, [r7, #4]
    de14:	601a      	str	r2, [r3, #0]
    de16:	687b      	ldr	r3, [r7, #4]
    de18:	3310      	adds	r3, #16
    de1a:	4618      	mov	r0, r3
    de1c:	4b04      	ldr	r3, [pc, #16]	; (de30 <_ZN9CDC_ClassD1Ev+0x28>)
    de1e:	4798      	blx	r3
{
} //~CDC_Class
    de20:	687b      	ldr	r3, [r7, #4]
    de22:	4618      	mov	r0, r3
    de24:	3708      	adds	r7, #8
    de26:	46bd      	mov	sp, r7
    de28:	bd80      	pop	{r7, pc}
    de2a:	bf00      	nop
    de2c:	000137e0 	.word	0x000137e0
    de30:	0000e481 	.word	0x0000e481

0000de34 <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    de34:	b580      	push	{r7, lr}
    de36:	b082      	sub	sp, #8
    de38:	af00      	add	r7, sp, #0
    de3a:	6078      	str	r0, [r7, #4]
	
	OnInit();
    de3c:	687b      	ldr	r3, [r7, #4]
    de3e:	3310      	adds	r3, #16
    de40:	4618      	mov	r0, r3
    de42:	4b09      	ldr	r3, [pc, #36]	; (de68 <_ZN9CDC_Class4InitEv+0x34>)
    de44:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    de46:	4909      	ldr	r1, [pc, #36]	; (de6c <_ZN9CDC_Class4InitEv+0x38>)
    de48:	2003      	movs	r0, #3
    de4a:	4b09      	ldr	r3, [pc, #36]	; (de70 <_ZN9CDC_Class4InitEv+0x3c>)
    de4c:	4798      	blx	r3
	delay_ms(100);
    de4e:	2064      	movs	r0, #100	; 0x64
    de50:	4b08      	ldr	r3, [pc, #32]	; (de74 <_ZN9CDC_Class4InitEv+0x40>)
    de52:	4798      	blx	r3
		
	if (connected)
    de54:	687b      	ldr	r3, [r7, #4]
    de56:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    de58:	2064      	movs	r0, #100	; 0x64
    de5a:	4b06      	ldr	r3, [pc, #24]	; (de74 <_ZN9CDC_Class4InitEv+0x40>)
    de5c:	4798      	blx	r3

	

}
    de5e:	bf00      	nop
    de60:	3708      	adds	r7, #8
    de62:	46bd      	mov	sp, r7
    de64:	bd80      	pop	{r7, pc}
    de66:	bf00      	nop
    de68:	0000e495 	.word	0x0000e495
    de6c:	0000dd69 	.word	0x0000dd69
    de70:	0000c86d 	.word	0x0000c86d
    de74:	000027c9 	.word	0x000027c9

0000de78 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    de78:	b580      	push	{r7, lr}
    de7a:	b082      	sub	sp, #8
    de7c:	af00      	add	r7, sp, #0
    de7e:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    de80:	4b03      	ldr	r3, [pc, #12]	; (de90 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    de82:	4798      	blx	r3
    de84:	4603      	mov	r3, r0
	
}
    de86:	4618      	mov	r0, r3
    de88:	3708      	adds	r7, #8
    de8a:	46bd      	mov	sp, r7
    de8c:	bd80      	pop	{r7, pc}
    de8e:	bf00      	nop
    de90:	0000c8e5 	.word	0x0000c8e5

0000de94 <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    de94:	b580      	push	{r7, lr}
    de96:	b084      	sub	sp, #16
    de98:	af00      	add	r7, sp, #0
    de9a:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    de9c:	687b      	ldr	r3, [r7, #4]
    de9e:	699b      	ldr	r3, [r3, #24]
    dea0:	f1b3 3fff 	cmp.w	r3, #4294967295
    dea4:	bf14      	ite	ne
    dea6:	2301      	movne	r3, #1
    dea8:	2300      	moveq	r3, #0
    deaa:	b2db      	uxtb	r3, r3
    deac:	2b00      	cmp	r3, #0
    deae:	d002      	beq.n	deb6 <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    deb0:	687b      	ldr	r3, [r7, #4]
    deb2:	699b      	ldr	r3, [r3, #24]
    deb4:	e011      	b.n	deda <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    deb6:	687b      	ldr	r3, [r7, #4]
    deb8:	681b      	ldr	r3, [r3, #0]
    deba:	331c      	adds	r3, #28
    debc:	681b      	ldr	r3, [r3, #0]
    debe:	f107 010f 	add.w	r1, r7, #15
    dec2:	2201      	movs	r2, #1
    dec4:	6878      	ldr	r0, [r7, #4]
    dec6:	4798      	blx	r3
    dec8:	4602      	mov	r2, r0
    deca:	687b      	ldr	r3, [r7, #4]
    decc:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    dece:	7bfb      	ldrb	r3, [r7, #15]
    ded0:	461a      	mov	r2, r3
    ded2:	687b      	ldr	r3, [r7, #4]
    ded4:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    ded6:	687b      	ldr	r3, [r7, #4]
    ded8:	699b      	ldr	r3, [r3, #24]
}
    deda:	4618      	mov	r0, r3
    dedc:	3710      	adds	r7, #16
    dede:	46bd      	mov	sp, r7
    dee0:	bd80      	pop	{r7, pc}
	...

0000dee4 <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    dee4:	b580      	push	{r7, lr}
    dee6:	b086      	sub	sp, #24
    dee8:	af00      	add	r7, sp, #0
    deea:	60f8      	str	r0, [r7, #12]
    deec:	60b9      	str	r1, [r7, #8]
    deee:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    def0:	68fb      	ldr	r3, [r7, #12]
    def2:	7c1b      	ldrb	r3, [r3, #16]
    def4:	b2db      	uxtb	r3, r3
    def6:	2b00      	cmp	r3, #0
    def8:	d02e      	beq.n	df58 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    defa:	687a      	ldr	r2, [r7, #4]
    defc:	4613      	mov	r3, r2
    defe:	009b      	lsls	r3, r3, #2
    df00:	4413      	add	r3, r2
    df02:	005b      	lsls	r3, r3, #1
    df04:	461a      	mov	r2, r3
    df06:	4918      	ldr	r1, [pc, #96]	; (df68 <_ZN9CDC_Class8readDataEPvl+0x84>)
    df08:	4818      	ldr	r0, [pc, #96]	; (df6c <_ZN9CDC_Class8readDataEPvl+0x88>)
    df0a:	4b19      	ldr	r3, [pc, #100]	; (df70 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    df0c:	4798      	blx	r3
		rxReady=false;
    df0e:	68fb      	ldr	r3, [r7, #12]
    df10:	2200      	movs	r2, #0
    df12:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    df14:	687b      	ldr	r3, [r7, #4]
    df16:	4619      	mov	r1, r3
    df18:	68b8      	ldr	r0, [r7, #8]
    df1a:	4b16      	ldr	r3, [pc, #88]	; (df74 <_ZN9CDC_Class8readDataEPvl+0x90>)
    df1c:	4798      	blx	r3
    df1e:	4603      	mov	r3, r0
    df20:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    df22:	68fb      	ldr	r3, [r7, #12]
    df24:	7d5b      	ldrb	r3, [r3, #21]
    df26:	b2db      	uxtb	r3, r3
    df28:	f083 0301 	eor.w	r3, r3, #1
    df2c:	b2db      	uxtb	r3, r3
    df2e:	2b00      	cmp	r3, #0
    df30:	d006      	beq.n	df40 <_ZN9CDC_Class8readDataEPvl+0x5c>
    df32:	68fb      	ldr	r3, [r7, #12]
    df34:	7c1b      	ldrb	r3, [r3, #16]
    df36:	b2db      	uxtb	r3, r3
    df38:	2b00      	cmp	r3, #0
    df3a:	d001      	beq.n	df40 <_ZN9CDC_Class8readDataEPvl+0x5c>
    df3c:	2301      	movs	r3, #1
    df3e:	e000      	b.n	df42 <_ZN9CDC_Class8readDataEPvl+0x5e>
    df40:	2300      	movs	r3, #0
    df42:	2b00      	cmp	r3, #0
    df44:	d000      	beq.n	df48 <_ZN9CDC_Class8readDataEPvl+0x64>
    df46:	e7ec      	b.n	df22 <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    df48:	4808      	ldr	r0, [pc, #32]	; (df6c <_ZN9CDC_Class8readDataEPvl+0x88>)
    df4a:	4b0b      	ldr	r3, [pc, #44]	; (df78 <_ZN9CDC_Class8readDataEPvl+0x94>)
    df4c:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    df4e:	4906      	ldr	r1, [pc, #24]	; (df68 <_ZN9CDC_Class8readDataEPvl+0x84>)
    df50:	4806      	ldr	r0, [pc, #24]	; (df6c <_ZN9CDC_Class8readDataEPvl+0x88>)
    df52:	4b0a      	ldr	r3, [pc, #40]	; (df7c <_ZN9CDC_Class8readDataEPvl+0x98>)
    df54:	4798      	blx	r3
    df56:	e001      	b.n	df5c <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    df58:	2300      	movs	r3, #0
    df5a:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    df5c:	7dfb      	ldrb	r3, [r7, #23]
}
    df5e:	4618      	mov	r0, r3
    df60:	3718      	adds	r7, #24
    df62:	46bd      	mov	sp, r7
    df64:	bd80      	pop	{r7, pc}
    df66:	bf00      	nop
    df68:	0000dcd1 	.word	0x0000dcd1
    df6c:	20001060 	.word	0x20001060
    df70:	0000e701 	.word	0x0000e701
    df74:	0000c7c1 	.word	0x0000c7c1
    df78:	0000e621 	.word	0x0000e621
    df7c:	0000e765 	.word	0x0000e765

0000df80 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
    df80:	b580      	push	{r7, lr}
    df82:	b086      	sub	sp, #24
    df84:	af00      	add	r7, sp, #0
    df86:	60f8      	str	r0, [r7, #12]
    df88:	60b9      	str	r1, [r7, #8]
    df8a:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
    df8c:	68fb      	ldr	r3, [r7, #12]
    df8e:	2200      	movs	r2, #0
    df90:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    df92:	687b      	ldr	r3, [r7, #4]
    df94:	4619      	mov	r1, r3
    df96:	68b8      	ldr	r0, [r7, #8]
    df98:	4b04      	ldr	r3, [pc, #16]	; (dfac <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
    df9a:	4798      	blx	r3
    df9c:	4603      	mov	r3, r0
    df9e:	617b      	str	r3, [r7, #20]
	return r;
    dfa0:	697b      	ldr	r3, [r7, #20]
}
    dfa2:	4618      	mov	r0, r3
    dfa4:	3718      	adds	r7, #24
    dfa6:	46bd      	mov	sp, r7
    dfa8:	bd80      	pop	{r7, pc}
    dfaa:	bf00      	nop
    dfac:	0000c7c1 	.word	0x0000c7c1

0000dfb0 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    dfb0:	b580      	push	{r7, lr}
    dfb2:	b084      	sub	sp, #16
    dfb4:	af00      	add	r7, sp, #0
    dfb6:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    dfb8:	687b      	ldr	r3, [r7, #4]
    dfba:	2200      	movs	r2, #0
    dfbc:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    dfbe:	f107 030f 	add.w	r3, r7, #15
    dfc2:	2101      	movs	r1, #1
    dfc4:	4618      	mov	r0, r3
    dfc6:	4b08      	ldr	r3, [pc, #32]	; (dfe8 <_ZN9CDC_Class4readEv+0x38>)
    dfc8:	4798      	blx	r3
	while(!rxReady);
    dfca:	687b      	ldr	r3, [r7, #4]
    dfcc:	7d5b      	ldrb	r3, [r3, #21]
    dfce:	b2db      	uxtb	r3, r3
    dfd0:	f083 0301 	eor.w	r3, r3, #1
    dfd4:	b2db      	uxtb	r3, r3
    dfd6:	2b00      	cmp	r3, #0
    dfd8:	d000      	beq.n	dfdc <_ZN9CDC_Class4readEv+0x2c>
    dfda:	e7f6      	b.n	dfca <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    dfdc:	7bfb      	ldrb	r3, [r7, #15]
}
    dfde:	4618      	mov	r0, r3
    dfe0:	3710      	adds	r7, #16
    dfe2:	46bd      	mov	sp, r7
    dfe4:	bd80      	pop	{r7, pc}
    dfe6:	bf00      	nop
    dfe8:	0000c7c1 	.word	0x0000c7c1

0000dfec <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    dfec:	b580      	push	{r7, lr}
    dfee:	b082      	sub	sp, #8
    dff0:	af00      	add	r7, sp, #0
    dff2:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    dff4:	687b      	ldr	r3, [r7, #4]
    dff6:	331c      	adds	r3, #28
    dff8:	2140      	movs	r1, #64	; 0x40
    dffa:	4618      	mov	r0, r3
    dffc:	4b02      	ldr	r3, [pc, #8]	; (e008 <_ZN9CDC_Class5flushEv+0x1c>)
    dffe:	4798      	blx	r3
}
    e000:	bf00      	nop
    e002:	3708      	adds	r7, #8
    e004:	46bd      	mov	sp, r7
    e006:	bd80      	pop	{r7, pc}
    e008:	0000c805 	.word	0x0000c805

0000e00c <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    e00c:	b580      	push	{r7, lr}
    e00e:	b082      	sub	sp, #8
    e010:	af00      	add	r7, sp, #0
    e012:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    e014:	4b02      	ldr	r3, [pc, #8]	; (e020 <_ZN9CDC_Class5clearEv+0x14>)
    e016:	4798      	blx	r3
}
    e018:	bf00      	nop
    e01a:	3708      	adds	r7, #8
    e01c:	46bd      	mov	sp, r7
    e01e:	bd80      	pop	{r7, pc}
    e020:	0000c849 	.word	0x0000c849

0000e024 <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    e024:	b580      	push	{r7, lr}
    e026:	b082      	sub	sp, #8
    e028:	af00      	add	r7, sp, #0
    e02a:	6078      	str	r0, [r7, #4]
    e02c:	460b      	mov	r3, r1
    e02e:	70fb      	strb	r3, [r7, #3]
	if (connected){
    e030:	687b      	ldr	r3, [r7, #4]
    e032:	7c1b      	ldrb	r3, [r3, #16]
    e034:	b2db      	uxtb	r3, r3
    e036:	2b00      	cmp	r3, #0
    e038:	d012      	beq.n	e060 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    e03a:	687b      	ldr	r3, [r7, #4]
    e03c:	7d1b      	ldrb	r3, [r3, #20]
    e03e:	b2db      	uxtb	r3, r3
    e040:	f083 0301 	eor.w	r3, r3, #1
    e044:	b2db      	uxtb	r3, r3
    e046:	2b00      	cmp	r3, #0
    e048:	d000      	beq.n	e04c <_ZN9CDC_Class5writeEh+0x28>
    e04a:	e7f6      	b.n	e03a <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    e04c:	687b      	ldr	r3, [r7, #4]
    e04e:	681b      	ldr	r3, [r3, #0]
    e050:	3324      	adds	r3, #36	; 0x24
    e052:	681b      	ldr	r3, [r3, #0]
    e054:	1cf9      	adds	r1, r7, #3
    e056:	2201      	movs	r2, #1
    e058:	6878      	ldr	r0, [r7, #4]
    e05a:	4798      	blx	r3
    e05c:	4603      	mov	r3, r0
    e05e:	e000      	b.n	e062 <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    e060:	2300      	movs	r3, #0
	}
		
}
    e062:	4618      	mov	r0, r3
    e064:	3708      	adds	r7, #8
    e066:	46bd      	mov	sp, r7
    e068:	bd80      	pop	{r7, pc}
	...

0000e06c <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    e06c:	b580      	push	{r7, lr}
    e06e:	b086      	sub	sp, #24
    e070:	af00      	add	r7, sp, #0
    e072:	60f8      	str	r0, [r7, #12]
    e074:	60b9      	str	r1, [r7, #8]
    e076:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    e078:	68fb      	ldr	r3, [r7, #12]
    e07a:	7c1b      	ldrb	r3, [r3, #16]
    e07c:	b2db      	uxtb	r3, r3
    e07e:	2b00      	cmp	r3, #0
    e080:	d02f      	beq.n	e0e2 <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e082:	687a      	ldr	r2, [r7, #4]
    e084:	4613      	mov	r3, r2
    e086:	009b      	lsls	r3, r3, #2
    e088:	4413      	add	r3, r2
    e08a:	005b      	lsls	r3, r3, #1
    e08c:	461a      	mov	r2, r3
    e08e:	4917      	ldr	r1, [pc, #92]	; (e0ec <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e090:	4817      	ldr	r0, [pc, #92]	; (e0f0 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e092:	4b18      	ldr	r3, [pc, #96]	; (e0f4 <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    e094:	4798      	blx	r3
		txReady=false;
    e096:	68fb      	ldr	r3, [r7, #12]
    e098:	2200      	movs	r2, #0
    e09a:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e09c:	687b      	ldr	r3, [r7, #4]
    e09e:	4619      	mov	r1, r3
    e0a0:	68b8      	ldr	r0, [r7, #8]
    e0a2:	4b15      	ldr	r3, [pc, #84]	; (e0f8 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    e0a4:	4798      	blx	r3
    e0a6:	4603      	mov	r3, r0
    e0a8:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    e0aa:	68fb      	ldr	r3, [r7, #12]
    e0ac:	7d1b      	ldrb	r3, [r3, #20]
    e0ae:	b2db      	uxtb	r3, r3
    e0b0:	f083 0301 	eor.w	r3, r3, #1
    e0b4:	b2db      	uxtb	r3, r3
    e0b6:	2b00      	cmp	r3, #0
    e0b8:	d006      	beq.n	e0c8 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e0ba:	68fb      	ldr	r3, [r7, #12]
    e0bc:	7c1b      	ldrb	r3, [r3, #16]
    e0be:	b2db      	uxtb	r3, r3
    e0c0:	2b00      	cmp	r3, #0
    e0c2:	d001      	beq.n	e0c8 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e0c4:	2301      	movs	r3, #1
    e0c6:	e000      	b.n	e0ca <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    e0c8:	2300      	movs	r3, #0
    e0ca:	2b00      	cmp	r3, #0
    e0cc:	d000      	beq.n	e0d0 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    e0ce:	e7ec      	b.n	e0aa <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    e0d0:	4807      	ldr	r0, [pc, #28]	; (e0f0 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e0d2:	4b0a      	ldr	r3, [pc, #40]	; (e0fc <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    e0d4:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e0d6:	4905      	ldr	r1, [pc, #20]	; (e0ec <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e0d8:	4805      	ldr	r0, [pc, #20]	; (e0f0 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e0da:	4b09      	ldr	r3, [pc, #36]	; (e100 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    e0dc:	4798      	blx	r3
		return r;
    e0de:	697b      	ldr	r3, [r7, #20]
    e0e0:	e000      	b.n	e0e4 <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    e0e2:	2300      	movs	r3, #0
	}
	

}
    e0e4:	4618      	mov	r0, r3
    e0e6:	3718      	adds	r7, #24
    e0e8:	46bd      	mov	sp, r7
    e0ea:	bd80      	pop	{r7, pc}
    e0ec:	0000dcd1 	.word	0x0000dcd1
    e0f0:	20001060 	.word	0x20001060
    e0f4:	0000e701 	.word	0x0000e701
    e0f8:	0000c805 	.word	0x0000c805
    e0fc:	0000e621 	.word	0x0000e621
    e100:	0000e765 	.word	0x0000e765

0000e104 <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    e104:	b580      	push	{r7, lr}
    e106:	b086      	sub	sp, #24
    e108:	af00      	add	r7, sp, #0
    e10a:	60f8      	str	r0, [r7, #12]
    e10c:	60b9      	str	r1, [r7, #8]
    e10e:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    e110:	68fb      	ldr	r3, [r7, #12]
    e112:	2200      	movs	r2, #0
    e114:	751a      	strb	r2, [r3, #20]

 	if (connected){
    e116:	68fb      	ldr	r3, [r7, #12]
    e118:	7c1b      	ldrb	r3, [r3, #16]
    e11a:	b2db      	uxtb	r3, r3
    e11c:	2b00      	cmp	r3, #0
    e11e:	d02a      	beq.n	e176 <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e120:	687a      	ldr	r2, [r7, #4]
    e122:	4613      	mov	r3, r2
    e124:	009b      	lsls	r3, r3, #2
    e126:	4413      	add	r3, r2
    e128:	005b      	lsls	r3, r3, #1
    e12a:	461a      	mov	r2, r3
    e12c:	4915      	ldr	r1, [pc, #84]	; (e184 <_ZN9CDC_Class5writeEPKhj+0x80>)
    e12e:	4816      	ldr	r0, [pc, #88]	; (e188 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e130:	4b16      	ldr	r3, [pc, #88]	; (e18c <_ZN9CDC_Class5writeEPKhj+0x88>)
    e132:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e134:	6879      	ldr	r1, [r7, #4]
    e136:	68b8      	ldr	r0, [r7, #8]
    e138:	4b15      	ldr	r3, [pc, #84]	; (e190 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    e13a:	4798      	blx	r3
    e13c:	4603      	mov	r3, r0
    e13e:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    e140:	68fb      	ldr	r3, [r7, #12]
    e142:	7d1b      	ldrb	r3, [r3, #20]
    e144:	b2db      	uxtb	r3, r3
    e146:	f083 0301 	eor.w	r3, r3, #1
    e14a:	b2db      	uxtb	r3, r3
    e14c:	2b00      	cmp	r3, #0
    e14e:	d006      	beq.n	e15e <_ZN9CDC_Class5writeEPKhj+0x5a>
    e150:	68fb      	ldr	r3, [r7, #12]
    e152:	7c1b      	ldrb	r3, [r3, #16]
    e154:	b2db      	uxtb	r3, r3
    e156:	2b00      	cmp	r3, #0
    e158:	d001      	beq.n	e15e <_ZN9CDC_Class5writeEPKhj+0x5a>
    e15a:	2301      	movs	r3, #1
    e15c:	e000      	b.n	e160 <_ZN9CDC_Class5writeEPKhj+0x5c>
    e15e:	2300      	movs	r3, #0
    e160:	2b00      	cmp	r3, #0
    e162:	d000      	beq.n	e166 <_ZN9CDC_Class5writeEPKhj+0x62>
    e164:	e7ec      	b.n	e140 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    e166:	4808      	ldr	r0, [pc, #32]	; (e188 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e168:	4b0a      	ldr	r3, [pc, #40]	; (e194 <_ZN9CDC_Class5writeEPKhj+0x90>)
    e16a:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e16c:	4905      	ldr	r1, [pc, #20]	; (e184 <_ZN9CDC_Class5writeEPKhj+0x80>)
    e16e:	4806      	ldr	r0, [pc, #24]	; (e188 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e170:	4b09      	ldr	r3, [pc, #36]	; (e198 <_ZN9CDC_Class5writeEPKhj+0x94>)
    e172:	4798      	blx	r3
    e174:	e001      	b.n	e17a <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    e176:	2300      	movs	r3, #0
    e178:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    e17a:	697b      	ldr	r3, [r7, #20]
}
    e17c:	4618      	mov	r0, r3
    e17e:	3718      	adds	r7, #24
    e180:	46bd      	mov	sp, r7
    e182:	bd80      	pop	{r7, pc}
    e184:	0000dcd1 	.word	0x0000dcd1
    e188:	20001060 	.word	0x20001060
    e18c:	0000e701 	.word	0x0000e701
    e190:	0000c805 	.word	0x0000c805
    e194:	0000e621 	.word	0x0000e621
    e198:	0000e765 	.word	0x0000e765

0000e19c <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    e19c:	b480      	push	{r7}
    e19e:	b083      	sub	sp, #12
    e1a0:	af00      	add	r7, sp, #0
    e1a2:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    e1a4:	687b      	ldr	r3, [r7, #4]
    e1a6:	7d5b      	ldrb	r3, [r3, #21]
    e1a8:	b2db      	uxtb	r3, r3
    e1aa:	2b00      	cmp	r3, #0
    e1ac:	d006      	beq.n	e1bc <_ZN9CDC_Class9availableEv+0x20>
    e1ae:	687b      	ldr	r3, [r7, #4]
    e1b0:	7d1b      	ldrb	r3, [r3, #20]
    e1b2:	b2db      	uxtb	r3, r3
    e1b4:	2b00      	cmp	r3, #0
    e1b6:	d001      	beq.n	e1bc <_ZN9CDC_Class9availableEv+0x20>
    e1b8:	2301      	movs	r3, #1
    e1ba:	e000      	b.n	e1be <_ZN9CDC_Class9availableEv+0x22>
    e1bc:	2300      	movs	r3, #0
    e1be:	2b00      	cmp	r3, #0
    e1c0:	d001      	beq.n	e1c6 <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    e1c2:	2301      	movs	r3, #1
    e1c4:	e000      	b.n	e1c8 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    e1c6:	2300      	movs	r3, #0
	}
	
}
    e1c8:	4618      	mov	r0, r3
    e1ca:	370c      	adds	r7, #12
    e1cc:	46bd      	mov	sp, r7
    e1ce:	bc80      	pop	{r7}
    e1d0:	4770      	bx	lr
	...

0000e1d4 <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    e1d4:	b580      	push	{r7, lr}
    e1d6:	b082      	sub	sp, #8
    e1d8:	af00      	add	r7, sp, #0
    e1da:	6078      	str	r0, [r7, #4]
    e1dc:	6039      	str	r1, [r7, #0]
    e1de:	687b      	ldr	r3, [r7, #4]
    e1e0:	2b01      	cmp	r3, #1
    e1e2:	d10c      	bne.n	e1fe <_Z41__static_initialization_and_destruction_0ii+0x2a>
    e1e4:	683b      	ldr	r3, [r7, #0]
    e1e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e1ea:	4293      	cmp	r3, r2
    e1ec:	d107      	bne.n	e1fe <_Z41__static_initialization_and_destruction_0ii+0x2a>
    e1ee:	4806      	ldr	r0, [pc, #24]	; (e208 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e1f0:	4b06      	ldr	r3, [pc, #24]	; (e20c <_Z41__static_initialization_and_destruction_0ii+0x38>)
    e1f2:	4798      	blx	r3
    e1f4:	4a06      	ldr	r2, [pc, #24]	; (e210 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
    e1f6:	4907      	ldr	r1, [pc, #28]	; (e214 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    e1f8:	4803      	ldr	r0, [pc, #12]	; (e208 <_Z41__static_initialization_and_destruction_0ii+0x34>)
    e1fa:	4b07      	ldr	r3, [pc, #28]	; (e218 <_Z41__static_initialization_and_destruction_0ii+0x44>)
    e1fc:	4798      	blx	r3
    e1fe:	bf00      	nop
    e200:	3708      	adds	r7, #8
    e202:	46bd      	mov	sp, r7
    e204:	bd80      	pop	{r7, pc}
    e206:	bf00      	nop
    e208:	20000fa8 	.word	0x20000fa8
    e20c:	0000ddc1 	.word	0x0000ddc1
    e210:	20000000 	.word	0x20000000
    e214:	0000de09 	.word	0x0000de09
    e218:	00012a41 	.word	0x00012a41

0000e21c <_GLOBAL__sub_I_ptrCDCClass>:
    e21c:	b580      	push	{r7, lr}
    e21e:	af00      	add	r7, sp, #0
    e220:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e224:	2001      	movs	r0, #1
    e226:	4b01      	ldr	r3, [pc, #4]	; (e22c <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    e228:	4798      	blx	r3
    e22a:	bd80      	pop	{r7, pc}
    e22c:	0000e1d5 	.word	0x0000e1d5

0000e230 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    e230:	b590      	push	{r4, r7, lr}
    e232:	b083      	sub	sp, #12
    e234:	af00      	add	r7, sp, #0
    e236:	6078      	str	r0, [r7, #4]
    e238:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    e23a:	683b      	ldr	r3, [r7, #0]
    e23c:	2b00      	cmp	r3, #0
    e23e:	d101      	bne.n	e244 <_ZN5Print5writeEPKc+0x14>
    e240:	2300      	movs	r3, #0
    e242:	e00c      	b.n	e25e <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    e244:	687b      	ldr	r3, [r7, #4]
    e246:	681b      	ldr	r3, [r3, #0]
    e248:	3304      	adds	r3, #4
    e24a:	681c      	ldr	r4, [r3, #0]
    e24c:	6838      	ldr	r0, [r7, #0]
    e24e:	4b06      	ldr	r3, [pc, #24]	; (e268 <_ZN5Print5writeEPKc+0x38>)
    e250:	4798      	blx	r3
    e252:	4603      	mov	r3, r0
    e254:	461a      	mov	r2, r3
    e256:	6839      	ldr	r1, [r7, #0]
    e258:	6878      	ldr	r0, [r7, #4]
    e25a:	47a0      	blx	r4
    e25c:	4603      	mov	r3, r0
    }
    e25e:	4618      	mov	r0, r3
    e260:	370c      	adds	r7, #12
    e262:	46bd      	mov	sp, r7
    e264:	bd90      	pop	{r4, r7, pc}
    e266:	bf00      	nop
    e268:	000131c1 	.word	0x000131c1

0000e26c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    e26c:	b580      	push	{r7, lr}
    e26e:	b086      	sub	sp, #24
    e270:	af00      	add	r7, sp, #0
    e272:	60f8      	str	r0, [r7, #12]
    e274:	60b9      	str	r1, [r7, #8]
    e276:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    e278:	2300      	movs	r3, #0
    e27a:	617b      	str	r3, [r7, #20]
  while (size--) {
    e27c:	687b      	ldr	r3, [r7, #4]
    e27e:	1e5a      	subs	r2, r3, #1
    e280:	607a      	str	r2, [r7, #4]
    e282:	2b00      	cmp	r3, #0
    e284:	bf14      	ite	ne
    e286:	2301      	movne	r3, #1
    e288:	2300      	moveq	r3, #0
    e28a:	b2db      	uxtb	r3, r3
    e28c:	2b00      	cmp	r3, #0
    e28e:	d016      	beq.n	e2be <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    e290:	68fb      	ldr	r3, [r7, #12]
    e292:	681b      	ldr	r3, [r3, #0]
    e294:	681a      	ldr	r2, [r3, #0]
    e296:	68bb      	ldr	r3, [r7, #8]
    e298:	1c59      	adds	r1, r3, #1
    e29a:	60b9      	str	r1, [r7, #8]
    e29c:	781b      	ldrb	r3, [r3, #0]
    e29e:	4619      	mov	r1, r3
    e2a0:	68f8      	ldr	r0, [r7, #12]
    e2a2:	4790      	blx	r2
    e2a4:	4603      	mov	r3, r0
    e2a6:	2b00      	cmp	r3, #0
    e2a8:	bf14      	ite	ne
    e2aa:	2301      	movne	r3, #1
    e2ac:	2300      	moveq	r3, #0
    e2ae:	b2db      	uxtb	r3, r3
    e2b0:	2b00      	cmp	r3, #0
    e2b2:	d003      	beq.n	e2bc <_ZN5Print5writeEPKhj+0x50>
    e2b4:	697b      	ldr	r3, [r7, #20]
    e2b6:	3301      	adds	r3, #1
    e2b8:	617b      	str	r3, [r7, #20]
  while (size--) {
    e2ba:	e7df      	b.n	e27c <_ZN5Print5writeEPKhj+0x10>
    else break;
    e2bc:	bf00      	nop
  }
  return n;
    e2be:	697b      	ldr	r3, [r7, #20]
}
    e2c0:	4618      	mov	r0, r3
    e2c2:	3718      	adds	r7, #24
    e2c4:	46bd      	mov	sp, r7
    e2c6:	bd80      	pop	{r7, pc}

0000e2c8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    e2c8:	b580      	push	{r7, lr}
    e2ca:	b082      	sub	sp, #8
    e2cc:	af00      	add	r7, sp, #0
    e2ce:	6078      	str	r0, [r7, #4]
    e2d0:	6039      	str	r1, [r7, #0]
  return write(str);
    e2d2:	6839      	ldr	r1, [r7, #0]
    e2d4:	6878      	ldr	r0, [r7, #4]
    e2d6:	4b03      	ldr	r3, [pc, #12]	; (e2e4 <_ZN5Print5printEPKc+0x1c>)
    e2d8:	4798      	blx	r3
    e2da:	4603      	mov	r3, r0
}
    e2dc:	4618      	mov	r0, r3
    e2de:	3708      	adds	r7, #8
    e2e0:	46bd      	mov	sp, r7
    e2e2:	bd80      	pop	{r7, pc}
    e2e4:	0000e231 	.word	0x0000e231

0000e2e8 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    e2e8:	b480      	push	{r7}
    e2ea:	b083      	sub	sp, #12
    e2ec:	af00      	add	r7, sp, #0
    e2ee:	6078      	str	r0, [r7, #4]
    e2f0:	460b      	mov	r3, r1
    e2f2:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    e2f4:	78fb      	ldrb	r3, [r7, #3]
    e2f6:	687a      	ldr	r2, [r7, #4]
    e2f8:	01db      	lsls	r3, r3, #7
    e2fa:	4413      	add	r3, r2
    e2fc:	681b      	ldr	r3, [r3, #0]
}
    e2fe:	4618      	mov	r0, r3
    e300:	370c      	adds	r7, #12
    e302:	46bd      	mov	sp, r7
    e304:	bc80      	pop	{r7}
    e306:	4770      	bx	lr

0000e308 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    e308:	b480      	push	{r7}
    e30a:	b083      	sub	sp, #12
    e30c:	af00      	add	r7, sp, #0
    e30e:	6078      	str	r0, [r7, #4]
    e310:	460b      	mov	r3, r1
    e312:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    e314:	78fb      	ldrb	r3, [r7, #3]
    e316:	687a      	ldr	r2, [r7, #4]
    e318:	01db      	lsls	r3, r3, #7
    e31a:	4413      	add	r3, r2
    e31c:	3310      	adds	r3, #16
    e31e:	681b      	ldr	r3, [r3, #0]
}
    e320:	4618      	mov	r0, r3
    e322:	370c      	adds	r7, #12
    e324:	46bd      	mov	sp, r7
    e326:	bc80      	pop	{r7}
    e328:	4770      	bx	lr

0000e32a <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    e32a:	b480      	push	{r7}
    e32c:	b083      	sub	sp, #12
    e32e:	af00      	add	r7, sp, #0
    e330:	6078      	str	r0, [r7, #4]
    e332:	460b      	mov	r3, r1
    e334:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    e336:	78fb      	ldrb	r3, [r7, #3]
    e338:	687a      	ldr	r2, [r7, #4]
    e33a:	01db      	lsls	r3, r3, #7
    e33c:	4413      	add	r3, r2
    e33e:	3320      	adds	r3, #32
    e340:	681b      	ldr	r3, [r3, #0]
}
    e342:	4618      	mov	r0, r3
    e344:	370c      	adds	r7, #12
    e346:	46bd      	mov	sp, r7
    e348:	bc80      	pop	{r7}
    e34a:	4770      	bx	lr

0000e34c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    e34c:	b580      	push	{r7, lr}
    e34e:	b086      	sub	sp, #24
    e350:	af00      	add	r7, sp, #0
    e352:	4603      	mov	r3, r0
    e354:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    e356:	f107 030c 	add.w	r3, r7, #12
    e35a:	4618      	mov	r0, r3
    e35c:	4b13      	ldr	r3, [pc, #76]	; (e3ac <_gpio_get_level+0x60>)
    e35e:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    e360:	79fb      	ldrb	r3, [r7, #7]
    e362:	4619      	mov	r1, r3
    e364:	4812      	ldr	r0, [pc, #72]	; (e3b0 <_gpio_get_level+0x64>)
    e366:	4b13      	ldr	r3, [pc, #76]	; (e3b4 <_gpio_get_level+0x68>)
    e368:	4798      	blx	r3
    e36a:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    e36c:	79fb      	ldrb	r3, [r7, #7]
    e36e:	4619      	mov	r1, r3
    e370:	480f      	ldr	r0, [pc, #60]	; (e3b0 <_gpio_get_level+0x64>)
    e372:	4b11      	ldr	r3, [pc, #68]	; (e3b8 <_gpio_get_level+0x6c>)
    e374:	4798      	blx	r3
    e376:	4602      	mov	r2, r0
    e378:	697b      	ldr	r3, [r7, #20]
    e37a:	43db      	mvns	r3, r3
    e37c:	4013      	ands	r3, r2
    e37e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e380:	79fb      	ldrb	r3, [r7, #7]
    e382:	4619      	mov	r1, r3
    e384:	480a      	ldr	r0, [pc, #40]	; (e3b0 <_gpio_get_level+0x64>)
    e386:	4b0d      	ldr	r3, [pc, #52]	; (e3bc <_gpio_get_level+0x70>)
    e388:	4798      	blx	r3
    e38a:	4602      	mov	r2, r0
    e38c:	697b      	ldr	r3, [r7, #20]
    e38e:	4013      	ands	r3, r2
    e390:	693a      	ldr	r2, [r7, #16]
    e392:	4313      	orrs	r3, r2
    e394:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    e396:	f107 030c 	add.w	r3, r7, #12
    e39a:	4618      	mov	r0, r3
    e39c:	4b08      	ldr	r3, [pc, #32]	; (e3c0 <_gpio_get_level+0x74>)
    e39e:	4798      	blx	r3

	return tmp;
    e3a0:	693b      	ldr	r3, [r7, #16]
}
    e3a2:	4618      	mov	r0, r3
    e3a4:	3718      	adds	r7, #24
    e3a6:	46bd      	mov	sp, r7
    e3a8:	bd80      	pop	{r7, pc}
    e3aa:	bf00      	nop
    e3ac:	0000b9e1 	.word	0x0000b9e1
    e3b0:	41008000 	.word	0x41008000
    e3b4:	0000e2e9 	.word	0x0000e2e9
    e3b8:	0000e32b 	.word	0x0000e32b
    e3bc:	0000e309 	.word	0x0000e309
    e3c0:	0000ba07 	.word	0x0000ba07

0000e3c4 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    e3c4:	b580      	push	{r7, lr}
    e3c6:	b082      	sub	sp, #8
    e3c8:	af00      	add	r7, sp, #0
    e3ca:	4603      	mov	r3, r0
    e3cc:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    e3ce:	79fb      	ldrb	r3, [r7, #7]
    e3d0:	115b      	asrs	r3, r3, #5
    e3d2:	b2db      	uxtb	r3, r3
    e3d4:	4618      	mov	r0, r3
    e3d6:	4b09      	ldr	r3, [pc, #36]	; (e3fc <gpio_get_pin_level+0x38>)
    e3d8:	4798      	blx	r3
    e3da:	4601      	mov	r1, r0
    e3dc:	79fb      	ldrb	r3, [r7, #7]
    e3de:	f003 031f 	and.w	r3, r3, #31
    e3e2:	2201      	movs	r2, #1
    e3e4:	fa02 f303 	lsl.w	r3, r2, r3
    e3e8:	400b      	ands	r3, r1
    e3ea:	2b00      	cmp	r3, #0
    e3ec:	bf14      	ite	ne
    e3ee:	2301      	movne	r3, #1
    e3f0:	2300      	moveq	r3, #0
    e3f2:	b2db      	uxtb	r3, r3
}
    e3f4:	4618      	mov	r0, r3
    e3f6:	3708      	adds	r7, #8
    e3f8:	46bd      	mov	sp, r7
    e3fa:	bd80      	pop	{r7, pc}
    e3fc:	0000e34d 	.word	0x0000e34d

0000e400 <_ZL14USBTimeoutTaskPK10timer_task>:

#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    e400:	b480      	push	{r7}
    e402:	b083      	sub	sp, #12
    e404:	af00      	add	r7, sp, #0
    e406:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    e408:	4b06      	ldr	r3, [pc, #24]	; (e424 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e40a:	681b      	ldr	r3, [r3, #0]
    e40c:	2201      	movs	r2, #1
    e40e:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    e410:	4b04      	ldr	r3, [pc, #16]	; (e424 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    e412:	681b      	ldr	r3, [r3, #0]
    e414:	2200      	movs	r2, #0
    e416:	705a      	strb	r2, [r3, #1]
}
    e418:	bf00      	nop
    e41a:	370c      	adds	r7, #12
    e41c:	46bd      	mov	sp, r7
    e41e:	bc80      	pop	{r7}
    e420:	4770      	bx	lr
    e422:	bf00      	nop
    e424:	20001008 	.word	0x20001008

0000e428 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    e428:	b580      	push	{r7, lr}
    e42a:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    e42c:	2040      	movs	r0, #64	; 0x40
    e42e:	4b0a      	ldr	r3, [pc, #40]	; (e458 <_ZL10USBPluggedv+0x30>)
    e430:	4798      	blx	r3
    e432:	4603      	mov	r3, r0
    e434:	2b00      	cmp	r3, #0
    e436:	d004      	beq.n	e442 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    e438:	4b08      	ldr	r3, [pc, #32]	; (e45c <_ZL10USBPluggedv+0x34>)
    e43a:	681b      	ldr	r3, [r3, #0]
    e43c:	2201      	movs	r2, #1
    e43e:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    e440:	e007      	b.n	e452 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    e442:	4b06      	ldr	r3, [pc, #24]	; (e45c <_ZL10USBPluggedv+0x34>)
    e444:	681b      	ldr	r3, [r3, #0]
    e446:	2200      	movs	r2, #0
    e448:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    e44a:	4b04      	ldr	r3, [pc, #16]	; (e45c <_ZL10USBPluggedv+0x34>)
    e44c:	681b      	ldr	r3, [r3, #0]
    e44e:	2200      	movs	r2, #0
    e450:	701a      	strb	r2, [r3, #0]
}
    e452:	bf00      	nop
    e454:	bd80      	pop	{r7, pc}
    e456:	bf00      	nop
    e458:	0000e3c5 	.word	0x0000e3c5
    e45c:	20001008 	.word	0x20001008

0000e460 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    e460:	b480      	push	{r7}
    e462:	b083      	sub	sp, #12
    e464:	af00      	add	r7, sp, #0
    e466:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    e468:	4a04      	ldr	r2, [pc, #16]	; (e47c <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    e46a:	687b      	ldr	r3, [r7, #4]
    e46c:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    e46e:	687b      	ldr	r3, [r7, #4]
    e470:	4618      	mov	r0, r3
    e472:	370c      	adds	r7, #12
    e474:	46bd      	mov	sp, r7
    e476:	bc80      	pop	{r7}
    e478:	4770      	bx	lr
    e47a:	bf00      	nop
    e47c:	20001008 	.word	0x20001008

0000e480 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    e480:	b480      	push	{r7}
    e482:	b083      	sub	sp, #12
    e484:	af00      	add	r7, sp, #0
    e486:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    e488:	687b      	ldr	r3, [r7, #4]
    e48a:	4618      	mov	r0, r3
    e48c:	370c      	adds	r7, #12
    e48e:	46bd      	mov	sp, r7
    e490:	bc80      	pop	{r7}
    e492:	4770      	bx	lr

0000e494 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    e494:	b580      	push	{r7, lr}
    e496:	b082      	sub	sp, #8
    e498:	af00      	add	r7, sp, #0
    e49a:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    e49c:	491f      	ldr	r1, [pc, #124]	; (e51c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    e49e:	2040      	movs	r0, #64	; 0x40
    e4a0:	4b1f      	ldr	r3, [pc, #124]	; (e520 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    e4a2:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    e4a4:	481f      	ldr	r0, [pc, #124]	; (e524 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e4a6:	4b20      	ldr	r3, [pc, #128]	; (e528 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    e4a8:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    e4aa:	2040      	movs	r0, #64	; 0x40
    e4ac:	4b1f      	ldr	r3, [pc, #124]	; (e52c <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    e4ae:	4798      	blx	r3
    e4b0:	4603      	mov	r3, r0
    e4b2:	461a      	mov	r2, r3
    e4b4:	687b      	ldr	r3, [r7, #4]
    e4b6:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    e4b8:	687b      	ldr	r3, [r7, #4]
    e4ba:	78db      	ldrb	r3, [r3, #3]
    e4bc:	2b00      	cmp	r3, #0
    e4be:	d024      	beq.n	e50a <_ZN20SerialTerminal_Class6OnInitEv+0x76>
		{
			timeout=false;
    e4c0:	687b      	ldr	r3, [r7, #4]
    e4c2:	2200      	movs	r2, #0
    e4c4:	709a      	strb	r2, [r3, #2]
			plugged=true;
    e4c6:	687b      	ldr	r3, [r7, #4]
    e4c8:	2201      	movs	r2, #1
    e4ca:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Add_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    e4cc:	f44f 7216 	mov.w	r2, #600	; 0x258
    e4d0:	4917      	ldr	r1, [pc, #92]	; (e530 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    e4d2:	4814      	ldr	r0, [pc, #80]	; (e524 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e4d4:	4b17      	ldr	r3, [pc, #92]	; (e534 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    e4d6:	4798      	blx	r3
			usbTerminalTimer.Start();
    e4d8:	4812      	ldr	r0, [pc, #72]	; (e524 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e4da:	4b17      	ldr	r3, [pc, #92]	; (e538 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    e4dc:	4798      	blx	r3
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    e4de:	4817      	ldr	r0, [pc, #92]	; (e53c <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    e4e0:	4b17      	ldr	r3, [pc, #92]	; (e540 <_ZN20SerialTerminal_Class6OnInitEv+0xac>)
    e4e2:	4798      	blx	r3
    e4e4:	4603      	mov	r3, r0
    e4e6:	f083 0301 	eor.w	r3, r3, #1
    e4ea:	b2db      	uxtb	r3, r3
    e4ec:	2b00      	cmp	r3, #0
    e4ee:	d008      	beq.n	e502 <_ZN20SerialTerminal_Class6OnInitEv+0x6e>
				if (timeout)
    e4f0:	687b      	ldr	r3, [r7, #4]
    e4f2:	789b      	ldrb	r3, [r3, #2]
    e4f4:	b2db      	uxtb	r3, r3
    e4f6:	2b00      	cmp	r3, #0
    e4f8:	d0f1      	beq.n	e4de <_ZN20SerialTerminal_Class6OnInitEv+0x4a>
				{
					connected=false;
    e4fa:	687b      	ldr	r3, [r7, #4]
    e4fc:	2200      	movs	r2, #0
    e4fe:	701a      	strb	r2, [r3, #0]
					return;
    e500:	e009      	b.n	e516 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    e502:	4808      	ldr	r0, [pc, #32]	; (e524 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    e504:	4b0f      	ldr	r3, [pc, #60]	; (e544 <_ZN20SerialTerminal_Class6OnInitEv+0xb0>)
    e506:	4798      	blx	r3
    e508:	e005      	b.n	e516 <_ZN20SerialTerminal_Class6OnInitEv+0x82>
		} 
		else
		{
			connected=false;
    e50a:	687b      	ldr	r3, [r7, #4]
    e50c:	2200      	movs	r2, #0
    e50e:	701a      	strb	r2, [r3, #0]
			plugged=false;
    e510:	687b      	ldr	r3, [r7, #4]
    e512:	2200      	movs	r2, #0
    e514:	705a      	strb	r2, [r3, #1]
		}
		
}
    e516:	3708      	adds	r7, #8
    e518:	46bd      	mov	sp, r7
    e51a:	bd80      	pop	{r7, pc}
    e51c:	0000e429 	.word	0x0000e429
    e520:	0000285d 	.word	0x0000285d
    e524:	20001060 	.word	0x20001060
    e528:	0000e5c5 	.word	0x0000e5c5
    e52c:	0000e3c5 	.word	0x0000e3c5
    e530:	0000e401 	.word	0x0000e401
    e534:	0000e6d9 	.word	0x0000e6d9
    e538:	0000e5fd 	.word	0x0000e5fd
    e53c:	20000fa8 	.word	0x20000fa8
    e540:	0000de79 	.word	0x0000de79
    e544:	0000e621 	.word	0x0000e621

0000e548 <_ZL7task_cbPK10timer_task>:
static void extern_task_cb(const struct timer_task *const timer_task)
{
	ptrTimerSerialClass->handler();
}
static void task_cb(const struct timer_task *const timer_task)
{
    e548:	b580      	push	{r7, lr}
    e54a:	b082      	sub	sp, #8
    e54c:	af00      	add	r7, sp, #0
    e54e:	6078      	str	r0, [r7, #4]
	ptrTimerSerialClass->setTimeout();
    e550:	4b04      	ldr	r3, [pc, #16]	; (e564 <_ZL7task_cbPK10timer_task+0x1c>)
    e552:	681b      	ldr	r3, [r3, #0]
    e554:	4618      	mov	r0, r3
    e556:	4b04      	ldr	r3, [pc, #16]	; (e568 <_ZL7task_cbPK10timer_task+0x20>)
    e558:	4798      	blx	r3
}
    e55a:	bf00      	nop
    e55c:	3708      	adds	r7, #8
    e55e:	46bd      	mov	sp, r7
    e560:	bd80      	pop	{r7, pc}
    e562:	bf00      	nop
    e564:	2000100c 	.word	0x2000100c
    e568:	0000e649 	.word	0x0000e649

0000e56c <_ZN17TimerSerial_ClassC1EP16timer_descriptor>:
	clockCycles=1024;
	task->cb=task_cb;
} //Timer_Class

// default constructor
TimerSerial_Class::TimerSerial_Class( timer_descriptor * descr)
    e56c:	b480      	push	{r7}
    e56e:	b083      	sub	sp, #12
    e570:	af00      	add	r7, sp, #0
    e572:	6078      	str	r0, [r7, #4]
    e574:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    e576:	687b      	ldr	r3, [r7, #4]
    e578:	683a      	ldr	r2, [r7, #0]
    e57a:	611a      	str	r2, [r3, #16]
	ptrTimerSerialClass=this;
    e57c:	4a08      	ldr	r2, [pc, #32]	; (e5a0 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x34>)
    e57e:	687b      	ldr	r3, [r7, #4]
    e580:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    e582:	687b      	ldr	r3, [r7, #4]
    e584:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e588:	619a      	str	r2, [r3, #24]
	task->cb=task_cb;
    e58a:	687b      	ldr	r3, [r7, #4]
    e58c:	689b      	ldr	r3, [r3, #8]
    e58e:	4a05      	ldr	r2, [pc, #20]	; (e5a4 <_ZN17TimerSerial_ClassC1EP16timer_descriptor+0x38>)
    e590:	60da      	str	r2, [r3, #12]
} //Timer_Class
    e592:	687b      	ldr	r3, [r7, #4]
    e594:	4618      	mov	r0, r3
    e596:	370c      	adds	r7, #12
    e598:	46bd      	mov	sp, r7
    e59a:	bc80      	pop	{r7}
    e59c:	4770      	bx	lr
    e59e:	bf00      	nop
    e5a0:	2000100c 	.word	0x2000100c
    e5a4:	0000e549 	.word	0x0000e549

0000e5a8 <_ZN17TimerSerial_ClassD1Ev>:
		timer_descr=descr;
		ptrTimerSerialClass=this;
}

// default destructor
TimerSerial_Class::~TimerSerial_Class()
    e5a8:	b480      	push	{r7}
    e5aa:	b083      	sub	sp, #12
    e5ac:	af00      	add	r7, sp, #0
    e5ae:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    e5b0:	687b      	ldr	r3, [r7, #4]
    e5b2:	2200      	movs	r2, #0
    e5b4:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    e5b6:	687b      	ldr	r3, [r7, #4]
    e5b8:	4618      	mov	r0, r3
    e5ba:	370c      	adds	r7, #12
    e5bc:	46bd      	mov	sp, r7
    e5be:	bc80      	pop	{r7}
    e5c0:	4770      	bx	lr
	...

0000e5c4 <_ZN17TimerSerial_Class4InitEv>:

void TimerSerial_Class::Init(timer_descriptor * descr){
	set_descriptor(descr);
	ticks=0;
}
bool TimerSerial_Class::Init(void){
    e5c4:	b580      	push	{r7, lr}
    e5c6:	b082      	sub	sp, #8
    e5c8:	af00      	add	r7, sp, #0
    e5ca:	6078      	str	r0, [r7, #4]
	
	ticks=0;
    e5cc:	687b      	ldr	r3, [r7, #4]
    e5ce:	2200      	movs	r2, #0
    e5d0:	60da      	str	r2, [r3, #12]
	isOK=Start()==0;
    e5d2:	6878      	ldr	r0, [r7, #4]
    e5d4:	4b08      	ldr	r3, [pc, #32]	; (e5f8 <_ZN17TimerSerial_Class4InitEv+0x34>)
    e5d6:	4798      	blx	r3
    e5d8:	4603      	mov	r3, r0
    e5da:	2b00      	cmp	r3, #0
    e5dc:	bf0c      	ite	eq
    e5de:	2301      	moveq	r3, #1
    e5e0:	2300      	movne	r3, #0
    e5e2:	b2da      	uxtb	r2, r3
    e5e4:	687b      	ldr	r3, [r7, #4]
    e5e6:	709a      	strb	r2, [r3, #2]
	return isOK;
    e5e8:	687b      	ldr	r3, [r7, #4]
    e5ea:	789b      	ldrb	r3, [r3, #2]
    e5ec:	b2db      	uxtb	r3, r3
}
    e5ee:	4618      	mov	r0, r3
    e5f0:	3708      	adds	r7, #8
    e5f2:	46bd      	mov	sp, r7
    e5f4:	bd80      	pop	{r7, pc}
    e5f6:	bf00      	nop
    e5f8:	0000e5fd 	.word	0x0000e5fd

0000e5fc <_ZN17TimerSerial_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t TimerSerial_Class::Start(void){
    e5fc:	b580      	push	{r7, lr}
    e5fe:	b084      	sub	sp, #16
    e600:	af00      	add	r7, sp, #0
    e602:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    e604:	687b      	ldr	r3, [r7, #4]
    e606:	691b      	ldr	r3, [r3, #16]
    e608:	4618      	mov	r0, r3
    e60a:	4b04      	ldr	r3, [pc, #16]	; (e61c <_ZN17TimerSerial_Class5StartEv+0x20>)
    e60c:	4798      	blx	r3
    e60e:	60f8      	str	r0, [r7, #12]
	return status;
    e610:	68fb      	ldr	r3, [r7, #12]
	
}
    e612:	4618      	mov	r0, r3
    e614:	3710      	adds	r7, #16
    e616:	46bd      	mov	sp, r7
    e618:	bd80      	pop	{r7, pc}
    e61a:	bf00      	nop
    e61c:	0000306d 	.word	0x0000306d

0000e620 <_ZN17TimerSerial_Class4StopEv>:

int32_t TimerSerial_Class::Stop( void){
    e620:	b580      	push	{r7, lr}
    e622:	b084      	sub	sp, #16
    e624:	af00      	add	r7, sp, #0
    e626:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    e628:	687b      	ldr	r3, [r7, #4]
    e62a:	691b      	ldr	r3, [r3, #16]
    e62c:	4618      	mov	r0, r3
    e62e:	4b05      	ldr	r3, [pc, #20]	; (e644 <_ZN17TimerSerial_Class4StopEv+0x24>)
    e630:	4798      	blx	r3
    e632:	60f8      	str	r0, [r7, #12]
	timeout=0;
    e634:	687b      	ldr	r3, [r7, #4]
    e636:	2200      	movs	r2, #0
    e638:	705a      	strb	r2, [r3, #1]
	return status;
    e63a:	68fb      	ldr	r3, [r7, #12]
}
    e63c:	4618      	mov	r0, r3
    e63e:	3710      	adds	r7, #16
    e640:	46bd      	mov	sp, r7
    e642:	bd80      	pop	{r7, pc}
    e644:	000030d5 	.word	0x000030d5

0000e648 <_ZN17TimerSerial_Class10setTimeoutEv>:
	task->cb=task_cb;
	task->mode=TIMER_TASK_ONE_SHOT;
	timer_add_task(timer_descr, task);
}

volatile void TimerSerial_Class::setTimeout(){
    e648:	b480      	push	{r7}
    e64a:	b083      	sub	sp, #12
    e64c:	af00      	add	r7, sp, #0
    e64e:	6078      	str	r0, [r7, #4]
	timeout=1;
    e650:	687b      	ldr	r3, [r7, #4]
    e652:	2201      	movs	r2, #1
    e654:	705a      	strb	r2, [r3, #1]
}
    e656:	bf00      	nop
    e658:	370c      	adds	r7, #12
    e65a:	46bd      	mov	sp, r7
    e65c:	bc80      	pop	{r7}
    e65e:	4770      	bx	lr

0000e660 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t TimerSerial_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    e660:	b580      	push	{r7, lr}
    e662:	b086      	sub	sp, #24
    e664:	af00      	add	r7, sp, #0
    e666:	60f8      	str	r0, [r7, #12]
    e668:	60b9      	str	r1, [r7, #8]
    e66a:	607a      	str	r2, [r7, #4]
    e66c:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask();
    e66e:	68f8      	ldr	r0, [r7, #12]
    e670:	4b0d      	ldr	r3, [pc, #52]	; (e6a8 <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x48>)
    e672:	4798      	blx	r3
	task->interval = interval;
    e674:	68fb      	ldr	r3, [r7, #12]
    e676:	689b      	ldr	r3, [r3, #8]
    e678:	687a      	ldr	r2, [r7, #4]
    e67a:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    e67c:	68fb      	ldr	r3, [r7, #12]
    e67e:	689b      	ldr	r3, [r3, #8]
    e680:	68ba      	ldr	r2, [r7, #8]
    e682:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    e684:	68fb      	ldr	r3, [r7, #12]
    e686:	689b      	ldr	r3, [r3, #8]
    e688:	78fa      	ldrb	r2, [r7, #3]
    e68a:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    e68c:	68fb      	ldr	r3, [r7, #12]
    e68e:	691a      	ldr	r2, [r3, #16]
    e690:	68fb      	ldr	r3, [r7, #12]
    e692:	689b      	ldr	r3, [r3, #8]
    e694:	4619      	mov	r1, r3
    e696:	4610      	mov	r0, r2
    e698:	4b04      	ldr	r3, [pc, #16]	; (e6ac <_ZN17TimerSerial_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    e69a:	4798      	blx	r3
    e69c:	6178      	str	r0, [r7, #20]
	
	return status;
    e69e:	697b      	ldr	r3, [r7, #20]
}
    e6a0:	4618      	mov	r0, r3
    e6a2:	3718      	adds	r7, #24
    e6a4:	46bd      	mov	sp, r7
    e6a6:	bd80      	pop	{r7, pc}
    e6a8:	0000e7bd 	.word	0x0000e7bd
    e6ac:	00003141 	.word	0x00003141

0000e6b0 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    e6b0:	b590      	push	{r4, r7, lr}
    e6b2:	b087      	sub	sp, #28
    e6b4:	af00      	add	r7, sp, #0
    e6b6:	60f8      	str	r0, [r7, #12]
    e6b8:	60b9      	str	r1, [r7, #8]
    e6ba:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    e6bc:	2301      	movs	r3, #1
    e6be:	687a      	ldr	r2, [r7, #4]
    e6c0:	68b9      	ldr	r1, [r7, #8]
    e6c2:	68f8      	ldr	r0, [r7, #12]
    e6c4:	4c03      	ldr	r4, [pc, #12]	; (e6d4 <_ZN17TimerSerial_Class17Add_periodic_taskEPFvvEm+0x24>)
    e6c6:	47a0      	blx	r4
    e6c8:	6178      	str	r0, [r7, #20]
		return status;
    e6ca:	697b      	ldr	r3, [r7, #20]
}
    e6cc:	4618      	mov	r0, r3
    e6ce:	371c      	adds	r7, #28
    e6d0:	46bd      	mov	sp, r7
    e6d2:	bd90      	pop	{r4, r7, pc}
    e6d4:	0000e661 	.word	0x0000e661

0000e6d8 <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Add_oneShot_task(FUNC_PTR func,uint32_t interval){
    e6d8:	b590      	push	{r4, r7, lr}
    e6da:	b087      	sub	sp, #28
    e6dc:	af00      	add	r7, sp, #0
    e6de:	60f8      	str	r0, [r7, #12]
    e6e0:	60b9      	str	r1, [r7, #8]
    e6e2:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e6e4:	2300      	movs	r3, #0
    e6e6:	687a      	ldr	r2, [r7, #4]
    e6e8:	68b9      	ldr	r1, [r7, #8]
    e6ea:	68f8      	ldr	r0, [r7, #12]
    e6ec:	4c03      	ldr	r4, [pc, #12]	; (e6fc <_ZN17TimerSerial_Class16Add_oneShot_taskEPFvvEm+0x24>)
    e6ee:	47a0      	blx	r4
    e6f0:	6178      	str	r0, [r7, #20]
	return status;
    e6f2:	697b      	ldr	r3, [r7, #20]
}
    e6f4:	4618      	mov	r0, r3
    e6f6:	371c      	adds	r7, #28
    e6f8:	46bd      	mov	sp, r7
    e6fa:	bd90      	pop	{r4, r7, pc}
    e6fc:	0000e661 	.word	0x0000e661

0000e700 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm>:
int32_t TimerSerial_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    e700:	b590      	push	{r4, r7, lr}
    e702:	b087      	sub	sp, #28
    e704:	af00      	add	r7, sp, #0
    e706:	60f8      	str	r0, [r7, #12]
    e708:	60b9      	str	r1, [r7, #8]
    e70a:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    e70c:	2300      	movs	r3, #0
    e70e:	687a      	ldr	r2, [r7, #4]
    e710:	68b9      	ldr	r1, [r7, #8]
    e712:	68f8      	ldr	r0, [r7, #12]
    e714:	4c06      	ldr	r4, [pc, #24]	; (e730 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x30>)
    e716:	47a0      	blx	r4
    e718:	6178      	str	r0, [r7, #20]
	status=timer_start(timer_descr);
    e71a:	68fb      	ldr	r3, [r7, #12]
    e71c:	691b      	ldr	r3, [r3, #16]
    e71e:	4618      	mov	r0, r3
    e720:	4b04      	ldr	r3, [pc, #16]	; (e734 <_ZN17TimerSerial_Class18Start_oneShot_taskEPFvvEm+0x34>)
    e722:	4798      	blx	r3
    e724:	6178      	str	r0, [r7, #20]
	return status;
    e726:	697b      	ldr	r3, [r7, #20]
}
    e728:	4618      	mov	r0, r3
    e72a:	371c      	adds	r7, #28
    e72c:	46bd      	mov	sp, r7
    e72e:	bd90      	pop	{r4, r7, pc}
    e730:	0000e661 	.word	0x0000e661
    e734:	0000306d 	.word	0x0000306d

0000e738 <_ZN17TimerSerial_Class11Remove_taskEv>:

void	TimerSerial_Class::Remove_task(void){
    e738:	b580      	push	{r7, lr}
    e73a:	b082      	sub	sp, #8
    e73c:	af00      	add	r7, sp, #0
    e73e:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
    e740:	687b      	ldr	r3, [r7, #4]
    e742:	691a      	ldr	r2, [r3, #16]
    e744:	687b      	ldr	r3, [r7, #4]
    e746:	689b      	ldr	r3, [r3, #8]
    e748:	4619      	mov	r1, r3
    e74a:	4610      	mov	r0, r2
    e74c:	4b04      	ldr	r3, [pc, #16]	; (e760 <_ZN17TimerSerial_Class11Remove_taskEv+0x28>)
    e74e:	4798      	blx	r3
	task->cb=NULL;
    e750:	687b      	ldr	r3, [r7, #4]
    e752:	689b      	ldr	r3, [r3, #8]
    e754:	2200      	movs	r2, #0
    e756:	60da      	str	r2, [r3, #12]
}
    e758:	bf00      	nop
    e75a:	3708      	adds	r7, #8
    e75c:	46bd      	mov	sp, r7
    e75e:	bd80      	pop	{r7, pc}
    e760:	00003245 	.word	0x00003245

0000e764 <_ZN17TimerSerial_Class11Remove_taskEPFvvE>:

void	TimerSerial_Class::Remove_task(FUNC_PTR func){
    e764:	b580      	push	{r7, lr}
    e766:	b082      	sub	sp, #8
    e768:	af00      	add	r7, sp, #0
    e76a:	6078      	str	r0, [r7, #4]
    e76c:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    e76e:	6839      	ldr	r1, [r7, #0]
    e770:	6878      	ldr	r0, [r7, #4]
    e772:	4b0f      	ldr	r3, [pc, #60]	; (e7b0 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x4c>)
    e774:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    e776:	687b      	ldr	r3, [r7, #4]
    e778:	691b      	ldr	r3, [r3, #16]
    e77a:	f103 0218 	add.w	r2, r3, #24
    e77e:	687b      	ldr	r3, [r7, #4]
    e780:	689b      	ldr	r3, [r3, #8]
    e782:	4619      	mov	r1, r3
    e784:	4610      	mov	r0, r2
    e786:	4b0b      	ldr	r3, [pc, #44]	; (e7b4 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x50>)
    e788:	4798      	blx	r3
    e78a:	4603      	mov	r3, r0
    e78c:	2b00      	cmp	r3, #0
    e78e:	d007      	beq.n	e7a0 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    e790:	687b      	ldr	r3, [r7, #4]
    e792:	691a      	ldr	r2, [r3, #16]
    e794:	687b      	ldr	r3, [r7, #4]
    e796:	689b      	ldr	r3, [r3, #8]
    e798:	4619      	mov	r1, r3
    e79a:	4610      	mov	r0, r2
    e79c:	4b06      	ldr	r3, [pc, #24]	; (e7b8 <_ZN17TimerSerial_Class11Remove_taskEPFvvE+0x54>)
    e79e:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    e7a0:	687b      	ldr	r3, [r7, #4]
    e7a2:	689b      	ldr	r3, [r3, #8]
    e7a4:	2200      	movs	r2, #0
    e7a6:	60da      	str	r2, [r3, #12]
}
    e7a8:	bf00      	nop
    e7aa:	3708      	adds	r7, #8
    e7ac:	46bd      	mov	sp, r7
    e7ae:	bd80      	pop	{r7, pc}
    e7b0:	0000e815 	.word	0x0000e815
    e7b4:	00003e2d 	.word	0x00003e2d
    e7b8:	00003245 	.word	0x00003245

0000e7bc <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv>:
uint32_t	TimerSerial_Class::Get_ticks(void){
	
	return ticks;
}

void	TimerSerial_Class::ChooseAvailableTimerTask(void){
    e7bc:	b480      	push	{r7}
    e7be:	b085      	sub	sp, #20
    e7c0:	af00      	add	r7, sp, #0
    e7c2:	6078      	str	r0, [r7, #4]
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e7c4:	2300      	movs	r3, #0
    e7c6:	73fb      	strb	r3, [r7, #15]
    e7c8:	7bfb      	ldrb	r3, [r7, #15]
    e7ca:	2b03      	cmp	r3, #3
    e7cc:	dc18      	bgt.n	e800 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x44>
	{
			if (taskArray[ii].cb==NULL)
    e7ce:	7bfa      	ldrb	r2, [r7, #15]
    e7d0:	490f      	ldr	r1, [pc, #60]	; (e810 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    e7d2:	4613      	mov	r3, r2
    e7d4:	009b      	lsls	r3, r3, #2
    e7d6:	4413      	add	r3, r2
    e7d8:	009b      	lsls	r3, r3, #2
    e7da:	440b      	add	r3, r1
    e7dc:	330c      	adds	r3, #12
    e7de:	681b      	ldr	r3, [r3, #0]
    e7e0:	2b00      	cmp	r3, #0
    e7e2:	d109      	bne.n	e7f8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x3c>
			{
				
				task=&taskArray[ii];
    e7e4:	7bfa      	ldrb	r2, [r7, #15]
    e7e6:	4613      	mov	r3, r2
    e7e8:	009b      	lsls	r3, r3, #2
    e7ea:	4413      	add	r3, r2
    e7ec:	009b      	lsls	r3, r3, #2
    e7ee:	4a08      	ldr	r2, [pc, #32]	; (e810 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    e7f0:	441a      	add	r2, r3
    e7f2:	687b      	ldr	r3, [r7, #4]
    e7f4:	609a      	str	r2, [r3, #8]
			return;
    e7f6:	e006      	b.n	e806 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x4a>
	for ( uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e7f8:	7bfb      	ldrb	r3, [r7, #15]
    e7fa:	3301      	adds	r3, #1
    e7fc:	73fb      	strb	r3, [r7, #15]
    e7fe:	e7e3      	b.n	e7c8 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0xc>
				
			}
	}
	task=&taskArray[0];
    e800:	687b      	ldr	r3, [r7, #4]
    e802:	4a03      	ldr	r2, [pc, #12]	; (e810 <_ZN17TimerSerial_Class24ChooseAvailableTimerTaskEv+0x54>)
    e804:	609a      	str	r2, [r3, #8]

}
    e806:	3714      	adds	r7, #20
    e808:	46bd      	mov	sp, r7
    e80a:	bc80      	pop	{r7}
    e80c:	4770      	bx	lr
    e80e:	bf00      	nop
    e810:	20001010 	.word	0x20001010

0000e814 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE>:
void	TimerSerial_Class::GetTaskFunction(FUNC_PTR func){
    e814:	b480      	push	{r7}
    e816:	b085      	sub	sp, #20
    e818:	af00      	add	r7, sp, #0
    e81a:	6078      	str	r0, [r7, #4]
    e81c:	6039      	str	r1, [r7, #0]
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e81e:	2300      	movs	r3, #0
    e820:	73fb      	strb	r3, [r7, #15]
    e822:	7bfb      	ldrb	r3, [r7, #15]
    e824:	2b03      	cmp	r3, #3
    e826:	dc19      	bgt.n	e85c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    e828:	7bfa      	ldrb	r2, [r7, #15]
    e82a:	490e      	ldr	r1, [pc, #56]	; (e864 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    e82c:	4613      	mov	r3, r2
    e82e:	009b      	lsls	r3, r3, #2
    e830:	4413      	add	r3, r2
    e832:	009b      	lsls	r3, r3, #2
    e834:	440b      	add	r3, r1
    e836:	330c      	adds	r3, #12
    e838:	681a      	ldr	r2, [r3, #0]
    e83a:	683b      	ldr	r3, [r7, #0]
    e83c:	429a      	cmp	r2, r3
    e83e:	d109      	bne.n	e854 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    e840:	7bfa      	ldrb	r2, [r7, #15]
    e842:	4613      	mov	r3, r2
    e844:	009b      	lsls	r3, r3, #2
    e846:	4413      	add	r3, r2
    e848:	009b      	lsls	r3, r3, #2
    e84a:	4a06      	ldr	r2, [pc, #24]	; (e864 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x50>)
    e84c:	441a      	add	r2, r3
    e84e:	687b      	ldr	r3, [r7, #4]
    e850:	609a      	str	r2, [r3, #8]
			return;
    e852:	e003      	b.n	e85c <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0x48>
	for (uint8_t ii = 0; ii < SERIAL_TASK_NUMBER; ii++)
    e854:	7bfb      	ldrb	r3, [r7, #15]
    e856:	3301      	adds	r3, #1
    e858:	73fb      	strb	r3, [r7, #15]
    e85a:	e7e2      	b.n	e822 <_ZN17TimerSerial_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}


}
    e85c:	3714      	adds	r7, #20
    e85e:	46bd      	mov	sp, r7
    e860:	bc80      	pop	{r7}
    e862:	4770      	bx	lr
    e864:	20001010 	.word	0x20001010

0000e868 <_Z41__static_initialization_and_destruction_0ii>:


TimerSerial_Class usbTerminalTimer(&TIMER_USB);
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    e868:	b580      	push	{r7, lr}
    e86a:	b082      	sub	sp, #8
    e86c:	af00      	add	r7, sp, #0
    e86e:	6078      	str	r0, [r7, #4]
    e870:	6039      	str	r1, [r7, #0]
    e872:	687b      	ldr	r3, [r7, #4]
    e874:	2b01      	cmp	r3, #1
    e876:	d116      	bne.n	e8a6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
    e878:	683b      	ldr	r3, [r7, #0]
    e87a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e87e:	4293      	cmp	r3, r2
    e880:	d111      	bne.n	e8a6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
TimerSerial_Class usbTerminalTimer(&TIMER_USB);
    e882:	490b      	ldr	r1, [pc, #44]	; (e8b0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    e884:	480b      	ldr	r0, [pc, #44]	; (e8b4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    e886:	4b0c      	ldr	r3, [pc, #48]	; (e8b8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    e888:	4798      	blx	r3
    e88a:	4a0c      	ldr	r2, [pc, #48]	; (e8bc <_Z41__static_initialization_and_destruction_0ii+0x54>)
    e88c:	490c      	ldr	r1, [pc, #48]	; (e8c0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e88e:	4809      	ldr	r0, [pc, #36]	; (e8b4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    e890:	4b0c      	ldr	r3, [pc, #48]	; (e8c4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e892:	4798      	blx	r3
TimerSerial_Class interfaceTimer(&TIMER_MAINTENANCE);
    e894:	490c      	ldr	r1, [pc, #48]	; (e8c8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    e896:	480d      	ldr	r0, [pc, #52]	; (e8cc <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e898:	4b07      	ldr	r3, [pc, #28]	; (e8b8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    e89a:	4798      	blx	r3
    e89c:	4a07      	ldr	r2, [pc, #28]	; (e8bc <_Z41__static_initialization_and_destruction_0ii+0x54>)
    e89e:	4908      	ldr	r1, [pc, #32]	; (e8c0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    e8a0:	480a      	ldr	r0, [pc, #40]	; (e8cc <_Z41__static_initialization_and_destruction_0ii+0x64>)
    e8a2:	4b08      	ldr	r3, [pc, #32]	; (e8c4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    e8a4:	4798      	blx	r3
    e8a6:	bf00      	nop
    e8a8:	3708      	adds	r7, #8
    e8aa:	46bd      	mov	sp, r7
    e8ac:	bd80      	pop	{r7, pc}
    e8ae:	bf00      	nop
    e8b0:	20007f34 	.word	0x20007f34
    e8b4:	20001060 	.word	0x20001060
    e8b8:	0000e56d 	.word	0x0000e56d
    e8bc:	20000000 	.word	0x20000000
    e8c0:	0000e5a9 	.word	0x0000e5a9
    e8c4:	00012a41 	.word	0x00012a41
    e8c8:	20007e2c 	.word	0x20007e2c
    e8cc:	20001080 	.word	0x20001080

0000e8d0 <_GLOBAL__sub_I_ptrTimerSerialClass>:
    e8d0:	b580      	push	{r7, lr}
    e8d2:	af00      	add	r7, sp, #0
    e8d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e8d8:	2001      	movs	r0, #1
    e8da:	4b01      	ldr	r3, [pc, #4]	; (e8e0 <_GLOBAL__sub_I_ptrTimerSerialClass+0x10>)
    e8dc:	4798      	blx	r3
    e8de:	bd80      	pop	{r7, pc}
    e8e0:	0000e869 	.word	0x0000e869

0000e8e4 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    e8e4:	b480      	push	{r7}
    e8e6:	b083      	sub	sp, #12
    e8e8:	af00      	add	r7, sp, #0
    e8ea:	6078      	str	r0, [r7, #4]
    return (void *)0;
    e8ec:	2300      	movs	r3, #0
	}
    e8ee:	4618      	mov	r0, r3
    e8f0:	370c      	adds	r7, #12
    e8f2:	46bd      	mov	sp, r7
    e8f4:	bc80      	pop	{r7}
    e8f6:	4770      	bx	lr

0000e8f8 <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    e8f8:	b480      	push	{r7}
    e8fa:	af00      	add	r7, sp, #0
		}
    e8fc:	bf00      	nop
    e8fe:	46bd      	mov	sp, r7
    e900:	bc80      	pop	{r7}
    e902:	4770      	bx	lr

0000e904 <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
    e904:	4770      	bx	lr

0000e906 <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
    e906:	4770      	bx	lr

0000e908 <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
	return isOK;
	
	
}

uint8_t CondesatorFan_Class::InitExpanderArray(MCP23008_Class** expandersArray){
    e908:	1f0b      	subs	r3, r1, #4
    e90a:	300c      	adds	r0, #12
    e90c:	3118      	adds	r1, #24
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
		{
			expanders[i]=expandersArray[i];
    e90e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    e912:	f840 2b04 	str.w	r2, [r0], #4
		for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    e916:	428b      	cmp	r3, r1
    e918:	d1f9      	bne.n	e90e <_ZN19CondesatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
		}
		return 0;
}
    e91a:	2000      	movs	r0, #0
    e91c:	4770      	bx	lr
	...

0000e920 <_ZN19CondesatorFan_Class10ReadStatusEv>:
	


uint8_t	CondesatorFan_Class::ReadStatus(void){
    e920:	b510      	push	{r4, lr}
    e922:	4604      	mov	r4, r0
	uint8_t r=expanders[0]->ReadGPIORegister();
    e924:	68c0      	ldr	r0, [r0, #12]
    e926:	4b08      	ldr	r3, [pc, #32]	; (e948 <_ZN19CondesatorFan_Class10ReadStatusEv+0x28>)
    e928:	4798      	blx	r3
	
	
	condesatorStatus.niAlcCdsFanExtFault=r&(0x01<<(4));
    e92a:	f3c0 1100 	ubfx	r1, r0, #4, #1
    e92e:	78e3      	ldrb	r3, [r4, #3]
    e930:	f361 0382 	bfi	r3, r1, #2, #1
	condesatorStatus.niAlcCdsFanEnableFault=r&(0x02<<(4));
    e934:	f3c0 1140 	ubfx	r1, r0, #5, #1
    e938:	f361 0341 	bfi	r3, r1, #1, #1
	condesatorStatus.niAlcCdsFanPwmFault=r&(0x04<<(4));
    e93c:	f3c0 1280 	ubfx	r2, r0, #6, #1
    e940:	f362 0300 	bfi	r3, r2, #0, #1
    e944:	70e3      	strb	r3, [r4, #3]
	
	return r;
}
    e946:	bd10      	pop	{r4, pc}
    e948:	00011225 	.word	0x00011225

0000e94c <_ZN19CondesatorFan_Class9SetEnableEb>:
uint8_t	CondesatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(2,true);
	return uint8_t(enabled);
}
uint8_t	CondesatorFan_Class::SetEnable(bool state){
    e94c:	b510      	push	{r4, lr}
    e94e:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(0,!state);
    e950:	f081 0201 	eor.w	r2, r1, #1
    e954:	2100      	movs	r1, #0
    e956:	68c0      	ldr	r0, [r0, #12]
    e958:	4b01      	ldr	r3, [pc, #4]	; (e960 <_ZN19CondesatorFan_Class9SetEnableEb+0x14>)
    e95a:	4798      	blx	r3
    e95c:	7060      	strb	r0, [r4, #1]

	return uint8_t(enabled);
}
    e95e:	bd10      	pop	{r4, pc}
    e960:	00011495 	.word	0x00011495

0000e964 <_ZN19CondesatorFan_Class6SetPWMEh>:
	enabled=!(value&0x01);
	return enabled;
}


uint8_t	CondesatorFan_Class::SetPWM(uint8_t pwm){
    e964:	b510      	push	{r4, lr}
    e966:	4604      	mov	r4, r0
	pwmValue= expanders[6]->WriteGPIORegister(pwm);
    e968:	6a40      	ldr	r0, [r0, #36]	; 0x24
    e96a:	4b02      	ldr	r3, [pc, #8]	; (e974 <_ZN19CondesatorFan_Class6SetPWMEh+0x10>)
    e96c:	4798      	blx	r3
    e96e:	7120      	strb	r0, [r4, #4]
	return pwmValue;
}
    e970:	bd10      	pop	{r4, pc}
    e972:	bf00      	nop
    e974:	000112a9 	.word	0x000112a9

0000e978 <_ZN19CondesatorFan_Class8SelfTestEv>:

bool CondesatorFan_Class::SelfTest(void){
    e978:	b510      	push	{r4, lr}
    e97a:	4604      	mov	r4, r0
		bool result;
		SetEnable(false);
    e97c:	2100      	movs	r1, #0
    e97e:	4b06      	ldr	r3, [pc, #24]	; (e998 <_ZN19CondesatorFan_Class8SelfTestEv+0x20>)
    e980:	4798      	blx	r3
		SetPWM(CONDESATOR_MINIMUN_FLOW_AIR);
    e982:	2130      	movs	r1, #48	; 0x30
    e984:	4620      	mov	r0, r4
    e986:	4b05      	ldr	r3, [pc, #20]	; (e99c <_ZN19CondesatorFan_Class8SelfTestEv+0x24>)
    e988:	4798      	blx	r3
	//	SetEnable(true);
		ReadStatus();
    e98a:	4620      	mov	r0, r4
    e98c:	4b04      	ldr	r3, [pc, #16]	; (e9a0 <_ZN19CondesatorFan_Class8SelfTestEv+0x28>)
    e98e:	4798      	blx	r3
// 		delay_ms(6*1000);
// 		SetEnable(false);
		result=condesatorStatus.niAlcCdsFanExtFault;
    e990:	78e0      	ldrb	r0, [r4, #3]
		return result;
    e992:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e996:	bd10      	pop	{r4, pc}
    e998:	0000e94d 	.word	0x0000e94d
    e99c:	0000e965 	.word	0x0000e965
    e9a0:	0000e921 	.word	0x0000e921

0000e9a4 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class>:
bool CondesatorFan_Class::InitCondesator(I2C_Sync_Class* i2cClass,MCP23008_Class** expanderArray){
    e9a4:	b510      	push	{r4, lr}
    e9a6:	4604      	mov	r4, r0
	i2c=i2cClass;
    e9a8:	6081      	str	r1, [r0, #8]
	if (i2c->isOK)
    e9aa:	7a4b      	ldrb	r3, [r1, #9]
    e9ac:	b90b      	cbnz	r3, e9b2 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
}
    e9ae:	78a0      	ldrb	r0, [r4, #2]
    e9b0:	bd10      	pop	{r4, pc}
		InitExpanderArray(expanderArray);
    e9b2:	4611      	mov	r1, r2
    e9b4:	4b04      	ldr	r3, [pc, #16]	; (e9c8 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x24>)
    e9b6:	4798      	blx	r3
		expanders[EVAPORATOR_AND_CONDESATOR_EXPANDERS-1]->SetPortOutput();
    e9b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    e9ba:	4b04      	ldr	r3, [pc, #16]	; (e9cc <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x28>)
    e9bc:	4798      	blx	r3
		isOK=SelfTest();
    e9be:	4620      	mov	r0, r4
    e9c0:	4b03      	ldr	r3, [pc, #12]	; (e9d0 <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0x2c>)
    e9c2:	4798      	blx	r3
    e9c4:	70a0      	strb	r0, [r4, #2]
    e9c6:	e7f2      	b.n	e9ae <_ZN19CondesatorFan_Class14InitCondesatorEP14I2C_Sync_ClassPP14MCP23008_Class+0xa>
    e9c8:	0000e909 	.word	0x0000e909
    e9cc:	0001139d 	.word	0x0001139d
    e9d0:	0000e979 	.word	0x0000e979

0000e9d4 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:
	somethingChanged=false;
	
} //EvaporatorAndCondesatorFans_Class

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
    e9d4:	b510      	push	{r4, lr}
    e9d6:	4604      	mov	r4, r0
    e9d8:	302c      	adds	r0, #44	; 0x2c
    e9da:	4b03      	ldr	r3, [pc, #12]	; (e9e8 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
    e9dc:	4798      	blx	r3
    e9de:	4620      	mov	r0, r4
    e9e0:	4b02      	ldr	r3, [pc, #8]	; (e9ec <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
    e9e2:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
    e9e4:	4620      	mov	r0, r4
    e9e6:	bd10      	pop	{r4, pc}
    e9e8:	0000e907 	.word	0x0000e907
    e9ec:	0000ec1d 	.word	0x0000ec1d

0000e9f0 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    e9f0:	b570      	push	{r4, r5, r6, lr}
    e9f2:	4c05      	ldr	r4, [pc, #20]	; (ea08 <__tcf_1+0x18>)
    e9f4:	4e05      	ldr	r6, [pc, #20]	; (ea0c <__tcf_1+0x1c>)
    e9f6:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
    e9fa:	3c1c      	subs	r4, #28
    e9fc:	4620      	mov	r0, r4
    e9fe:	47b0      	blx	r6
    ea00:	42ac      	cmp	r4, r5
    ea02:	d1fa      	bne.n	e9fa <__tcf_1+0xa>
    ea04:	bd70      	pop	{r4, r5, r6, pc}
    ea06:	bf00      	nop
    ea08:	20001164 	.word	0x20001164
    ea0c:	0001112b 	.word	0x0001112b

0000ea10 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
    ea10:	b510      	push	{r4, lr}
    ea12:	4803      	ldr	r0, [pc, #12]	; (ea20 <__tcf_0+0x10>)
    ea14:	4c03      	ldr	r4, [pc, #12]	; (ea24 <__tcf_0+0x14>)
    ea16:	47a0      	blx	r4
    ea18:	4803      	ldr	r0, [pc, #12]	; (ea28 <__tcf_0+0x18>)
    ea1a:	47a0      	blx	r4
    ea1c:	bd10      	pop	{r4, pc}
    ea1e:	bf00      	nop
    ea20:	20001190 	.word	0x20001190
    ea24:	0000ec1d 	.word	0x0000ec1d
    ea28:	20001164 	.word	0x20001164

0000ea2c <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
    ea2c:	b510      	push	{r4, lr}
    ea2e:	4604      	mov	r4, r0
    ea30:	4b0d      	ldr	r3, [pc, #52]	; (ea68 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
    ea32:	4798      	blx	r3
    ea34:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ea38:	4b0c      	ldr	r3, [pc, #48]	; (ea6c <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
    ea3a:	4798      	blx	r3
	i2c=&i2cSharedStatic;
    ea3c:	4b0c      	ldr	r3, [pc, #48]	; (ea70 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
    ea3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
    ea42:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
    ea46:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
    ea4a:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
    ea4c:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
    ea50:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
    ea52:	f503 7298 	add.w	r2, r3, #304	; 0x130
    ea56:	6662      	str	r2, [r4, #100]	; 0x64
	ptrFansClass=this;
    ea58:	f8c3 415c 	str.w	r4, [r3, #348]	; 0x15c
	somethingChanged=false;
    ea5c:	2300      	movs	r3, #0
    ea5e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
} //EvaporatorAndCondesatorFans_Class
    ea62:	4620      	mov	r0, r4
    ea64:	bd10      	pop	{r4, pc}
    ea66:	bf00      	nop
    ea68:	0000ec05 	.word	0x0000ec05
    ea6c:	0000e905 	.word	0x0000e905
    ea70:	200010a0 	.word	0x200010a0

0000ea74 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv>:
	}
	isOK=i2c->isOK;
	return isOK;
	
}
uint8_t EvaporatorAndCondesatorFans_Class::InitExpanderArray(void){
    ea74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea78:	4606      	mov	r6, r0
    ea7a:	4c0c      	ldr	r4, [pc, #48]	; (eaac <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x38>)
    ea7c:	f100 0768 	add.w	r7, r0, #104	; 0x68
	
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    ea80:	2500      	movs	r5, #0
	{
		expanders[i]=&expandersStatic[i];
		currentExpander=expanders[i];
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
    ea82:	f8df 802c 	ldr.w	r8, [pc, #44]	; eab0 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x3c>
		expanders[i]=&expandersStatic[i];
    ea86:	f847 4b04 	str.w	r4, [r7], #4
		currentExpander=expanders[i];
    ea8a:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
    ea8e:	f045 0120 	orr.w	r1, r5, #32
    ea92:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
    ea96:	b2c9      	uxtb	r1, r1
    ea98:	4620      	mov	r0, r4
    ea9a:	47c0      	blx	r8
	for (int i = 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    ea9c:	3501      	adds	r5, #1
    ea9e:	341c      	adds	r4, #28
    eaa0:	2d07      	cmp	r5, #7
    eaa2:	d1f0      	bne.n	ea86 <_ZN33EvaporatorAndCondesatorFans_Class17InitExpanderArrayEv+0x12>
	}
	return 0;
}
    eaa4:	2000      	movs	r0, #0
    eaa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eaaa:	bf00      	nop
    eaac:	200010a0 	.word	0x200010a0
    eab0:	0001113f 	.word	0x0001113f

0000eab4 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv>:
bool	EvaporatorAndCondesatorFans_Class::Init(void){
    eab4:	b570      	push	{r4, r5, r6, lr}
    eab6:	4604      	mov	r4, r0
	i2c->Init();
    eab8:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    eabc:	4b17      	ldr	r3, [pc, #92]	; (eb1c <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x68>)
    eabe:	4798      	blx	r3
	if (i2c->isOK)
    eac0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    eac4:	7a5b      	ldrb	r3, [r3, #9]
    eac6:	b943      	cbnz	r3, eada <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x26>
	isOK=i2c->isOK;
    eac8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    eacc:	7a5b      	ldrb	r3, [r3, #9]
    eace:	b2db      	uxtb	r3, r3
    ead0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	return isOK;
    ead4:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
}
    ead8:	bd70      	pop	{r4, r5, r6, pc}
		InitExpanderArray();
    eada:	4620      	mov	r0, r4
    eadc:	4b10      	ldr	r3, [pc, #64]	; (eb20 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x6c>)
    eade:	4798      	blx	r3
		evaporator[0]->InitEvaporator(0,i2c,expanders);
    eae0:	f104 0568 	add.w	r5, r4, #104	; 0x68
    eae4:	462b      	mov	r3, r5
    eae6:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    eaea:	2100      	movs	r1, #0
    eaec:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    eaee:	4e0d      	ldr	r6, [pc, #52]	; (eb24 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x70>)
    eaf0:	47b0      	blx	r6
		evaporator[1]->InitEvaporator(1,i2c,expanders);
    eaf2:	462b      	mov	r3, r5
    eaf4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    eaf8:	2101      	movs	r1, #1
    eafa:	6e20      	ldr	r0, [r4, #96]	; 0x60
    eafc:	47b0      	blx	r6
		condesator->InitCondesator(i2c,expanders);
    eafe:	462a      	mov	r2, r5
    eb00:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    eb04:	6e60      	ldr	r0, [r4, #100]	; 0x64
    eb06:	4b08      	ldr	r3, [pc, #32]	; (eb28 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x74>)
    eb08:	4798      	blx	r3
		isOK=(evaporator[0]->isOK)&(evaporator[1]->isOK);
    eb0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    eb0c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    eb0e:	791b      	ldrb	r3, [r3, #4]
    eb10:	7912      	ldrb	r2, [r2, #4]
    eb12:	4013      	ands	r3, r2
    eb14:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    eb18:	e7d6      	b.n	eac8 <_ZN33EvaporatorAndCondesatorFans_Class4InitEv+0x14>
    eb1a:	bf00      	nop
    eb1c:	00010ddd 	.word	0x00010ddd
    eb20:	0000ea75 	.word	0x0000ea75
    eb24:	0000ecfd 	.word	0x0000ecfd
    eb28:	0000e9a5 	.word	0x0000e9a5

0000eb2c <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh>:
void EvaporatorAndCondesatorFans_Class::GetGPIOSValues(uint8_t * gpios){
    eb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb2e:	f100 0468 	add.w	r4, r0, #104	; 0x68
    eb32:	1e4d      	subs	r5, r1, #1
    eb34:	f100 0684 	add.w	r6, r0, #132	; 0x84
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
	{
		gpios[i]=expanders[i]->ReadGPIORegister();
    eb38:	4f04      	ldr	r7, [pc, #16]	; (eb4c <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0x20>)
    eb3a:	f854 0b04 	ldr.w	r0, [r4], #4
    eb3e:	47b8      	blx	r7
    eb40:	f805 0f01 	strb.w	r0, [r5, #1]!
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    eb44:	42b4      	cmp	r4, r6
    eb46:	d1f8      	bne.n	eb3a <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0xe>
	}
	

}
    eb48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb4a:	bf00      	nop
    eb4c:	00011225 	.word	0x00011225

0000eb50 <_GLOBAL__sub_I_ptrFansClass>:

EvaporatorAndCondesatorFans_Class  fans;
    eb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static I2C_Sync_Class	i2cSharedStatic(&I2C_FANS);
    eb54:	4c1c      	ldr	r4, [pc, #112]	; (ebc8 <_GLOBAL__sub_I_ptrFansClass+0x78>)
    eb56:	f504 758e 	add.w	r5, r4, #284	; 0x11c
    eb5a:	491c      	ldr	r1, [pc, #112]	; (ebcc <_GLOBAL__sub_I_ptrFansClass+0x7c>)
    eb5c:	4628      	mov	r0, r5
    eb5e:	4b1c      	ldr	r3, [pc, #112]	; (ebd0 <_GLOBAL__sub_I_ptrFansClass+0x80>)
    eb60:	4798      	blx	r3
    eb62:	4f1c      	ldr	r7, [pc, #112]	; (ebd4 <_GLOBAL__sub_I_ptrFansClass+0x84>)
    eb64:	463a      	mov	r2, r7
    eb66:	491c      	ldr	r1, [pc, #112]	; (ebd8 <_GLOBAL__sub_I_ptrFansClass+0x88>)
    eb68:	4628      	mov	r0, r5
    eb6a:	4e1c      	ldr	r6, [pc, #112]	; (ebdc <_GLOBAL__sub_I_ptrFansClass+0x8c>)
    eb6c:	47b0      	blx	r6
static EvaporatorFan_Class	evaporatorFan[2];
    eb6e:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    eb72:	4628      	mov	r0, r5
    eb74:	f8df 8088 	ldr.w	r8, [pc, #136]	; ec00 <_GLOBAL__sub_I_ptrFansClass+0xb0>
    eb78:	47c0      	blx	r8
    eb7a:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    eb7e:	47c0      	blx	r8
    eb80:	463a      	mov	r2, r7
    eb82:	4917      	ldr	r1, [pc, #92]	; (ebe0 <_GLOBAL__sub_I_ptrFansClass+0x90>)
    eb84:	2000      	movs	r0, #0
    eb86:	47b0      	blx	r6
static CondesatorFan_Class	condesatorFan;
    eb88:	f504 7898 	add.w	r8, r4, #304	; 0x130
    eb8c:	4640      	mov	r0, r8
    eb8e:	4b15      	ldr	r3, [pc, #84]	; (ebe4 <_GLOBAL__sub_I_ptrFansClass+0x94>)
    eb90:	4798      	blx	r3
    eb92:	463a      	mov	r2, r7
    eb94:	4914      	ldr	r1, [pc, #80]	; (ebe8 <_GLOBAL__sub_I_ptrFansClass+0x98>)
    eb96:	4640      	mov	r0, r8
    eb98:	47b0      	blx	r6
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    eb9a:	4e14      	ldr	r6, [pc, #80]	; (ebec <_GLOBAL__sub_I_ptrFansClass+0x9c>)
    eb9c:	4620      	mov	r0, r4
    eb9e:	47b0      	blx	r6
    eba0:	341c      	adds	r4, #28
    eba2:	42a5      	cmp	r5, r4
    eba4:	d1fa      	bne.n	eb9c <_GLOBAL__sub_I_ptrFansClass+0x4c>
    eba6:	4e0b      	ldr	r6, [pc, #44]	; (ebd4 <_GLOBAL__sub_I_ptrFansClass+0x84>)
    eba8:	4632      	mov	r2, r6
    ebaa:	4911      	ldr	r1, [pc, #68]	; (ebf0 <_GLOBAL__sub_I_ptrFansClass+0xa0>)
    ebac:	2000      	movs	r0, #0
    ebae:	4c0b      	ldr	r4, [pc, #44]	; (ebdc <_GLOBAL__sub_I_ptrFansClass+0x8c>)
    ebb0:	47a0      	blx	r4
EvaporatorAndCondesatorFans_Class  fans;
    ebb2:	4d10      	ldr	r5, [pc, #64]	; (ebf4 <_GLOBAL__sub_I_ptrFansClass+0xa4>)
    ebb4:	4628      	mov	r0, r5
    ebb6:	4b10      	ldr	r3, [pc, #64]	; (ebf8 <_GLOBAL__sub_I_ptrFansClass+0xa8>)
    ebb8:	4798      	blx	r3
    ebba:	4632      	mov	r2, r6
    ebbc:	490f      	ldr	r1, [pc, #60]	; (ebfc <_GLOBAL__sub_I_ptrFansClass+0xac>)
    ebbe:	4628      	mov	r0, r5
    ebc0:	47a0      	blx	r4
    ebc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ebc6:	bf00      	nop
    ebc8:	200010a0 	.word	0x200010a0
    ebcc:	20007e0c 	.word	0x20007e0c
    ebd0:	00010dad 	.word	0x00010dad
    ebd4:	20000000 	.word	0x20000000
    ebd8:	00010dc9 	.word	0x00010dc9
    ebdc:	00012a41 	.word	0x00012a41
    ebe0:	0000ea11 	.word	0x0000ea11
    ebe4:	0000e905 	.word	0x0000e905
    ebe8:	0000e907 	.word	0x0000e907
    ebec:	00011117 	.word	0x00011117
    ebf0:	0000e9f1 	.word	0x0000e9f1
    ebf4:	20001200 	.word	0x20001200
    ebf8:	0000ea2d 	.word	0x0000ea2d
    ebfc:	0000e9d5 	.word	0x0000e9d5
    ec00:	0000ec05 	.word	0x0000ec05

0000ec04 <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
    ec04:	b510      	push	{r4, lr}
    ec06:	4604      	mov	r4, r0
    ec08:	4b02      	ldr	r3, [pc, #8]	; (ec14 <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
    ec0a:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
    ec0c:	4b02      	ldr	r3, [pc, #8]	; (ec18 <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
    ec0e:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
    ec10:	4620      	mov	r0, r4
    ec12:	bd10      	pop	{r4, pc}
    ec14:	0000ed59 	.word	0x0000ed59
    ec18:	2000128c 	.word	0x2000128c

0000ec1c <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
    ec1c:	b510      	push	{r4, lr}
    ec1e:	4604      	mov	r4, r0
    ec20:	4b01      	ldr	r3, [pc, #4]	; (ec28 <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
    ec22:	4798      	blx	r3
{
} //~EvaporatorFan_Class
    ec24:	4620      	mov	r0, r4
    ec26:	bd10      	pop	{r4, pc}
    ec28:	0000ed5b 	.word	0x0000ed5b

0000ec2c <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class>:
		}
		return isOK;
	
	
}
uint8_t EvaporatorFan_Class::InitExpanderArray(MCP23008_Class** expanArray){
    ec2c:	1f0b      	subs	r3, r1, #4
    ec2e:	300c      	adds	r0, #12
    ec30:	3114      	adds	r1, #20
	
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
			{
				expanders[i]=expanArray[i];
    ec32:	f853 2f04 	ldr.w	r2, [r3, #4]!
    ec36:	f840 2b04 	str.w	r2, [r0], #4
			for (int i = 0; i < EVAPORATOR_EXPANDERS; i++)
    ec3a:	428b      	cmp	r3, r1
    ec3c:	d1f9      	bne.n	ec32 <_ZN19EvaporatorFan_Class17InitExpanderArrayEPP14MCP23008_Class+0x6>
			}
			return 0;
}
    ec3e:	2000      	movs	r0, #0
    ec40:	4770      	bx	lr
	...

0000ec44 <_ZN19EvaporatorFan_Class10ReadStatusEv>:

uint8_t	EvaporatorFan_Class::ReadStatus(void){
    ec44:	b570      	push	{r4, r5, r6, lr}
    ec46:	4604      	mov	r4, r0
	uint8_t r=expanders[1]->ReadGPIORegister();
    ec48:	6900      	ldr	r0, [r0, #16]
    ec4a:	4b0e      	ldr	r3, [pc, #56]	; (ec84 <_ZN19EvaporatorFan_Class10ReadStatusEv+0x40>)
    ec4c:	4798      	blx	r3
    ec4e:	4601      	mov	r1, r0
	
	
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanExtFault=r&(0x01<<(4*fanNumber));
    ec50:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    ec54:	0096      	lsls	r6, r2, #2
    ec56:	fa40 f506 	asr.w	r5, r0, r6
    ec5a:	5ca3      	ldrb	r3, [r4, r2]
    ec5c:	f365 0382 	bfi	r3, r5, #2, #1
	evaporatorFansStatus.inputs[fanNumber].niAlcEvaFanEnableFault=r&(0x02<<(4*fanNumber));
    ec60:	2502      	movs	r5, #2
    ec62:	40b5      	lsls	r5, r6
    ec64:	4205      	tst	r5, r0
    ec66:	bf14      	ite	ne
    ec68:	2501      	movne	r5, #1
    ec6a:	2500      	moveq	r5, #0
    ec6c:	f365 0341 	bfi	r3, r5, #1, #1
	evaporatorFansStatus.inputs[fanNumber].iAlcEvaFanPwmFault=r&(0x04<<(4*fanNumber));
    ec70:	2504      	movs	r5, #4
    ec72:	40b5      	lsls	r5, r6
    ec74:	4205      	tst	r5, r0
    ec76:	bf14      	ite	ne
    ec78:	2101      	movne	r1, #1
    ec7a:	2100      	moveq	r1, #0
    ec7c:	f361 0300 	bfi	r3, r1, #0, #1
    ec80:	54a3      	strb	r3, [r4, r2]
	return r;
		
}
    ec82:	bd70      	pop	{r4, r5, r6, pc}
    ec84:	00011225 	.word	0x00011225

0000ec88 <_ZN19EvaporatorFan_Class9SetEnableEb>:
uint8_t	EvaporatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,true);
	return uint8_t(enabled);
}
uint8_t	EvaporatorFan_Class::SetEnable(bool state){
    ec88:	b510      	push	{r4, lr}
    ec8a:	4604      	mov	r4, r0
	uint8_t fanCorrrection=fanNumber==1?2:1;
    ec8c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ec90:	2b01      	cmp	r3, #1
	enabled=expanders[0]->WriteDigit(fanCorrrection,!state);
    ec92:	f081 0201 	eor.w	r2, r1, #1
    ec96:	bf0c      	ite	eq
    ec98:	2102      	moveq	r1, #2
    ec9a:	2101      	movne	r1, #1
    ec9c:	68c0      	ldr	r0, [r0, #12]
    ec9e:	4b02      	ldr	r3, [pc, #8]	; (eca8 <_ZN19EvaporatorFan_Class9SetEnableEb+0x20>)
    eca0:	4798      	blx	r3
    eca2:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
    eca4:	bd10      	pop	{r4, pc}
    eca6:	bf00      	nop
    eca8:	00011495 	.word	0x00011495

0000ecac <_ZN19EvaporatorFan_Class6SetPWMEh>:
uint8_t	EvaporatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,false)?false:true;
	return uint8_t(enabled);
}

uint8_t	EvaporatorFan_Class::SetPWM(uint8_t pwm){
    ecac:	b510      	push	{r4, lr}
    ecae:	4604      	mov	r4, r0
	pwmValue= expanders[4+fanNumber]->WriteGPIORegister(pwm);
    ecb0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ecb4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ecb8:	69d8      	ldr	r0, [r3, #28]
    ecba:	4b02      	ldr	r3, [pc, #8]	; (ecc4 <_ZN19EvaporatorFan_Class6SetPWMEh+0x18>)
    ecbc:	4798      	blx	r3
    ecbe:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	return pwmValue;
}
    ecc2:	bd10      	pop	{r4, pc}
    ecc4:	000112a9 	.word	0x000112a9

0000ecc8 <_ZN19EvaporatorFan_Class8SelfTestEv>:

bool EvaporatorFan_Class::SelfTest(void){
    ecc8:	b538      	push	{r3, r4, r5, lr}
    ecca:	4604      	mov	r4, r0
	bool result;
	SetEnable(false);
    eccc:	2100      	movs	r1, #0
    ecce:	4d08      	ldr	r5, [pc, #32]	; (ecf0 <_ZN19EvaporatorFan_Class8SelfTestEv+0x28>)
    ecd0:	47a8      	blx	r5
	SetPWM(MINIMUN_FLOW_AIR);
    ecd2:	2120      	movs	r1, #32
    ecd4:	4620      	mov	r0, r4
    ecd6:	4b07      	ldr	r3, [pc, #28]	; (ecf4 <_ZN19EvaporatorFan_Class8SelfTestEv+0x2c>)
    ecd8:	4798      	blx	r3
	SetEnable(true);
    ecda:	2101      	movs	r1, #1
    ecdc:	4620      	mov	r0, r4
    ecde:	47a8      	blx	r5
	ReadStatus();
    ece0:	4620      	mov	r0, r4
    ece2:	4b05      	ldr	r3, [pc, #20]	; (ecf8 <_ZN19EvaporatorFan_Class8SelfTestEv+0x30>)
    ece4:	4798      	blx	r3
	result=evaporatorFansStatus.inputs->niAlcEvaFanExtFault;
    ece6:	7820      	ldrb	r0, [r4, #0]
	return result;
}
    ece8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ecec:	bd38      	pop	{r3, r4, r5, pc}
    ecee:	bf00      	nop
    ecf0:	0000ec89 	.word	0x0000ec89
    ecf4:	0000ecad 	.word	0x0000ecad
    ecf8:	0000ec45 	.word	0x0000ec45

0000ecfc <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class>:
bool EvaporatorFan_Class::InitEvaporator(uint8_t number, I2C_Sync_Class* i2cClass,MCP23008_Class** expandersArray){
    ecfc:	b510      	push	{r4, lr}
    ecfe:	4604      	mov	r4, r0
	i2c=i2cClass;
    ed00:	6082      	str	r2, [r0, #8]
	fanNumber=number;
    ed02:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
		if (i2c->isOK)
    ed06:	7a52      	ldrb	r2, [r2, #9]
    ed08:	b90a      	cbnz	r2, ed0e <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x12>
}
    ed0a:	7920      	ldrb	r0, [r4, #4]
    ed0c:	bd10      	pop	{r4, pc}
			InitExpanderArray(expandersArray);
    ed0e:	4619      	mov	r1, r3
    ed10:	4b0c      	ldr	r3, [pc, #48]	; (ed44 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x48>)
    ed12:	4798      	blx	r3
			if (fanNumber==0)
    ed14:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    ed18:	b15b      	cbz	r3, ed32 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x36>
			expanders[4+fanNumber]->SetPortOutput();
    ed1a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    ed1e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    ed22:	69d8      	ldr	r0, [r3, #28]
    ed24:	4b08      	ldr	r3, [pc, #32]	; (ed48 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x4c>)
    ed26:	4798      	blx	r3
			isOK=SelfTest();
    ed28:	4620      	mov	r0, r4
    ed2a:	4b08      	ldr	r3, [pc, #32]	; (ed4c <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x50>)
    ed2c:	4798      	blx	r3
    ed2e:	7120      	strb	r0, [r4, #4]
    ed30:	e7eb      	b.n	ed0a <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0xe>
				expanders[0]->SetPortInput(0x70);
    ed32:	2170      	movs	r1, #112	; 0x70
    ed34:	68e0      	ldr	r0, [r4, #12]
    ed36:	4b06      	ldr	r3, [pc, #24]	; (ed50 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x54>)
    ed38:	4798      	blx	r3
				expanders[1]->SetPortInput();
    ed3a:	6920      	ldr	r0, [r4, #16]
    ed3c:	4b05      	ldr	r3, [pc, #20]	; (ed54 <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x58>)
    ed3e:	4798      	blx	r3
    ed40:	e7eb      	b.n	ed1a <_ZN19EvaporatorFan_Class14InitEvaporatorEhP14I2C_Sync_ClassPP14MCP23008_Class+0x1e>
    ed42:	bf00      	nop
    ed44:	0000ec2d 	.word	0x0000ec2d
    ed48:	0001139d 	.word	0x0001139d
    ed4c:	0000ecc9 	.word	0x0000ecc9
    ed50:	00011329 	.word	0x00011329
    ed54:	000112e5 	.word	0x000112e5

0000ed58 <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
    ed58:	4770      	bx	lr

0000ed5a <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
    ed5a:	4770      	bx	lr

0000ed5c <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    ed5c:	b480      	push	{r7}
    ed5e:	b083      	sub	sp, #12
    ed60:	af00      	add	r7, sp, #0
    ed62:	6078      	str	r0, [r7, #4]
    ed64:	460b      	mov	r3, r1
    ed66:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    ed68:	78fb      	ldrb	r3, [r7, #3]
    ed6a:	687a      	ldr	r2, [r7, #4]
    ed6c:	01db      	lsls	r3, r3, #7
    ed6e:	4413      	add	r3, r2
    ed70:	681b      	ldr	r3, [r3, #0]
}
    ed72:	4618      	mov	r0, r3
    ed74:	370c      	adds	r7, #12
    ed76:	46bd      	mov	sp, r7
    ed78:	bc80      	pop	{r7}
    ed7a:	4770      	bx	lr

0000ed7c <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    ed7c:	b480      	push	{r7}
    ed7e:	b085      	sub	sp, #20
    ed80:	af00      	add	r7, sp, #0
    ed82:	60f8      	str	r0, [r7, #12]
    ed84:	460b      	mov	r3, r1
    ed86:	607a      	str	r2, [r7, #4]
    ed88:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    ed8a:	7afb      	ldrb	r3, [r7, #11]
    ed8c:	68fa      	ldr	r2, [r7, #12]
    ed8e:	01db      	lsls	r3, r3, #7
    ed90:	4413      	add	r3, r2
    ed92:	3318      	adds	r3, #24
    ed94:	687a      	ldr	r2, [r7, #4]
    ed96:	601a      	str	r2, [r3, #0]
}
    ed98:	bf00      	nop
    ed9a:	3714      	adds	r7, #20
    ed9c:	46bd      	mov	sp, r7
    ed9e:	bc80      	pop	{r7}
    eda0:	4770      	bx	lr

0000eda2 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    eda2:	b480      	push	{r7}
    eda4:	b083      	sub	sp, #12
    eda6:	af00      	add	r7, sp, #0
    eda8:	6078      	str	r0, [r7, #4]
    edaa:	460b      	mov	r3, r1
    edac:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    edae:	78fb      	ldrb	r3, [r7, #3]
    edb0:	687a      	ldr	r2, [r7, #4]
    edb2:	01db      	lsls	r3, r3, #7
    edb4:	4413      	add	r3, r2
    edb6:	3310      	adds	r3, #16
    edb8:	681b      	ldr	r3, [r3, #0]
}
    edba:	4618      	mov	r0, r3
    edbc:	370c      	adds	r7, #12
    edbe:	46bd      	mov	sp, r7
    edc0:	bc80      	pop	{r7}
    edc2:	4770      	bx	lr

0000edc4 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    edc4:	b480      	push	{r7}
    edc6:	b085      	sub	sp, #20
    edc8:	af00      	add	r7, sp, #0
    edca:	60f8      	str	r0, [r7, #12]
    edcc:	460b      	mov	r3, r1
    edce:	607a      	str	r2, [r7, #4]
    edd0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    edd2:	7afb      	ldrb	r3, [r7, #11]
    edd4:	68fa      	ldr	r2, [r7, #12]
    edd6:	01db      	lsls	r3, r3, #7
    edd8:	4413      	add	r3, r2
    edda:	3314      	adds	r3, #20
    eddc:	687a      	ldr	r2, [r7, #4]
    edde:	601a      	str	r2, [r3, #0]
}
    ede0:	bf00      	nop
    ede2:	3714      	adds	r7, #20
    ede4:	46bd      	mov	sp, r7
    ede6:	bc80      	pop	{r7}
    ede8:	4770      	bx	lr

0000edea <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    edea:	b480      	push	{r7}
    edec:	b085      	sub	sp, #20
    edee:	af00      	add	r7, sp, #0
    edf0:	60f8      	str	r0, [r7, #12]
    edf2:	460b      	mov	r3, r1
    edf4:	607a      	str	r2, [r7, #4]
    edf6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    edf8:	7afb      	ldrb	r3, [r7, #11]
    edfa:	68fa      	ldr	r2, [r7, #12]
    edfc:	01db      	lsls	r3, r3, #7
    edfe:	4413      	add	r3, r2
    ee00:	331c      	adds	r3, #28
    ee02:	687a      	ldr	r2, [r7, #4]
    ee04:	601a      	str	r2, [r3, #0]
}
    ee06:	bf00      	nop
    ee08:	3714      	adds	r7, #20
    ee0a:	46bd      	mov	sp, r7
    ee0c:	bc80      	pop	{r7}
    ee0e:	4770      	bx	lr

0000ee10 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    ee10:	b480      	push	{r7}
    ee12:	b083      	sub	sp, #12
    ee14:	af00      	add	r7, sp, #0
    ee16:	6078      	str	r0, [r7, #4]
    ee18:	460b      	mov	r3, r1
    ee1a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    ee1c:	78fb      	ldrb	r3, [r7, #3]
    ee1e:	687a      	ldr	r2, [r7, #4]
    ee20:	01db      	lsls	r3, r3, #7
    ee22:	4413      	add	r3, r2
    ee24:	3320      	adds	r3, #32
    ee26:	681b      	ldr	r3, [r3, #0]
}
    ee28:	4618      	mov	r0, r3
    ee2a:	370c      	adds	r7, #12
    ee2c:	46bd      	mov	sp, r7
    ee2e:	bc80      	pop	{r7}
    ee30:	4770      	bx	lr
	...

0000ee34 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    ee34:	b580      	push	{r7, lr}
    ee36:	b082      	sub	sp, #8
    ee38:	af00      	add	r7, sp, #0
    ee3a:	4603      	mov	r3, r0
    ee3c:	6039      	str	r1, [r7, #0]
    ee3e:	71fb      	strb	r3, [r7, #7]
    ee40:	4613      	mov	r3, r2
    ee42:	71bb      	strb	r3, [r7, #6]
	if (level) {
    ee44:	79bb      	ldrb	r3, [r7, #6]
    ee46:	2b00      	cmp	r3, #0
    ee48:	d006      	beq.n	ee58 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    ee4a:	79fb      	ldrb	r3, [r7, #7]
    ee4c:	683a      	ldr	r2, [r7, #0]
    ee4e:	4619      	mov	r1, r3
    ee50:	4806      	ldr	r0, [pc, #24]	; (ee6c <_gpio_set_level+0x38>)
    ee52:	4b07      	ldr	r3, [pc, #28]	; (ee70 <_gpio_set_level+0x3c>)
    ee54:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    ee56:	e005      	b.n	ee64 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    ee58:	79fb      	ldrb	r3, [r7, #7]
    ee5a:	683a      	ldr	r2, [r7, #0]
    ee5c:	4619      	mov	r1, r3
    ee5e:	4803      	ldr	r0, [pc, #12]	; (ee6c <_gpio_set_level+0x38>)
    ee60:	4b04      	ldr	r3, [pc, #16]	; (ee74 <_gpio_set_level+0x40>)
    ee62:	4798      	blx	r3
}
    ee64:	bf00      	nop
    ee66:	3708      	adds	r7, #8
    ee68:	46bd      	mov	sp, r7
    ee6a:	bd80      	pop	{r7, pc}
    ee6c:	41008000 	.word	0x41008000
    ee70:	0000ed7d 	.word	0x0000ed7d
    ee74:	0000edc5 	.word	0x0000edc5

0000ee78 <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
    ee78:	b580      	push	{r7, lr}
    ee7a:	b082      	sub	sp, #8
    ee7c:	af00      	add	r7, sp, #0
    ee7e:	4603      	mov	r3, r0
    ee80:	6039      	str	r1, [r7, #0]
    ee82:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
    ee84:	79fb      	ldrb	r3, [r7, #7]
    ee86:	683a      	ldr	r2, [r7, #0]
    ee88:	4619      	mov	r1, r3
    ee8a:	4803      	ldr	r0, [pc, #12]	; (ee98 <_gpio_toggle_level+0x20>)
    ee8c:	4b03      	ldr	r3, [pc, #12]	; (ee9c <_gpio_toggle_level+0x24>)
    ee8e:	4798      	blx	r3
}
    ee90:	bf00      	nop
    ee92:	3708      	adds	r7, #8
    ee94:	46bd      	mov	sp, r7
    ee96:	bd80      	pop	{r7, pc}
    ee98:	41008000 	.word	0x41008000
    ee9c:	0000edeb 	.word	0x0000edeb

0000eea0 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    eea0:	b580      	push	{r7, lr}
    eea2:	b086      	sub	sp, #24
    eea4:	af00      	add	r7, sp, #0
    eea6:	4603      	mov	r3, r0
    eea8:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    eeaa:	f107 030c 	add.w	r3, r7, #12
    eeae:	4618      	mov	r0, r3
    eeb0:	4b13      	ldr	r3, [pc, #76]	; (ef00 <_gpio_get_level+0x60>)
    eeb2:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    eeb4:	79fb      	ldrb	r3, [r7, #7]
    eeb6:	4619      	mov	r1, r3
    eeb8:	4812      	ldr	r0, [pc, #72]	; (ef04 <_gpio_get_level+0x64>)
    eeba:	4b13      	ldr	r3, [pc, #76]	; (ef08 <_gpio_get_level+0x68>)
    eebc:	4798      	blx	r3
    eebe:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    eec0:	79fb      	ldrb	r3, [r7, #7]
    eec2:	4619      	mov	r1, r3
    eec4:	480f      	ldr	r0, [pc, #60]	; (ef04 <_gpio_get_level+0x64>)
    eec6:	4b11      	ldr	r3, [pc, #68]	; (ef0c <_gpio_get_level+0x6c>)
    eec8:	4798      	blx	r3
    eeca:	4602      	mov	r2, r0
    eecc:	697b      	ldr	r3, [r7, #20]
    eece:	43db      	mvns	r3, r3
    eed0:	4013      	ands	r3, r2
    eed2:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    eed4:	79fb      	ldrb	r3, [r7, #7]
    eed6:	4619      	mov	r1, r3
    eed8:	480a      	ldr	r0, [pc, #40]	; (ef04 <_gpio_get_level+0x64>)
    eeda:	4b0d      	ldr	r3, [pc, #52]	; (ef10 <_gpio_get_level+0x70>)
    eedc:	4798      	blx	r3
    eede:	4602      	mov	r2, r0
    eee0:	697b      	ldr	r3, [r7, #20]
    eee2:	4013      	ands	r3, r2
    eee4:	693a      	ldr	r2, [r7, #16]
    eee6:	4313      	orrs	r3, r2
    eee8:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    eeea:	f107 030c 	add.w	r3, r7, #12
    eeee:	4618      	mov	r0, r3
    eef0:	4b08      	ldr	r3, [pc, #32]	; (ef14 <_gpio_get_level+0x74>)
    eef2:	4798      	blx	r3

	return tmp;
    eef4:	693b      	ldr	r3, [r7, #16]
}
    eef6:	4618      	mov	r0, r3
    eef8:	3718      	adds	r7, #24
    eefa:	46bd      	mov	sp, r7
    eefc:	bd80      	pop	{r7, pc}
    eefe:	bf00      	nop
    ef00:	0000b9e1 	.word	0x0000b9e1
    ef04:	41008000 	.word	0x41008000
    ef08:	0000ed5d 	.word	0x0000ed5d
    ef0c:	0000ee11 	.word	0x0000ee11
    ef10:	0000eda3 	.word	0x0000eda3
    ef14:	0000ba07 	.word	0x0000ba07

0000ef18 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    ef18:	b580      	push	{r7, lr}
    ef1a:	b082      	sub	sp, #8
    ef1c:	af00      	add	r7, sp, #0
    ef1e:	4603      	mov	r3, r0
    ef20:	460a      	mov	r2, r1
    ef22:	71fb      	strb	r3, [r7, #7]
    ef24:	4613      	mov	r3, r2
    ef26:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    ef28:	79fb      	ldrb	r3, [r7, #7]
    ef2a:	115b      	asrs	r3, r3, #5
    ef2c:	b2d8      	uxtb	r0, r3
    ef2e:	79fb      	ldrb	r3, [r7, #7]
    ef30:	f003 031f 	and.w	r3, r3, #31
    ef34:	2201      	movs	r2, #1
    ef36:	fa02 f303 	lsl.w	r3, r2, r3
    ef3a:	79ba      	ldrb	r2, [r7, #6]
    ef3c:	4619      	mov	r1, r3
    ef3e:	4b03      	ldr	r3, [pc, #12]	; (ef4c <gpio_set_pin_level+0x34>)
    ef40:	4798      	blx	r3
}
    ef42:	bf00      	nop
    ef44:	3708      	adds	r7, #8
    ef46:	46bd      	mov	sp, r7
    ef48:	bd80      	pop	{r7, pc}
    ef4a:	bf00      	nop
    ef4c:	0000ee35 	.word	0x0000ee35

0000ef50 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
    ef50:	b580      	push	{r7, lr}
    ef52:	b082      	sub	sp, #8
    ef54:	af00      	add	r7, sp, #0
    ef56:	4603      	mov	r3, r0
    ef58:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    ef5a:	79fb      	ldrb	r3, [r7, #7]
    ef5c:	115b      	asrs	r3, r3, #5
    ef5e:	b2d8      	uxtb	r0, r3
    ef60:	79fb      	ldrb	r3, [r7, #7]
    ef62:	f003 031f 	and.w	r3, r3, #31
    ef66:	2201      	movs	r2, #1
    ef68:	fa02 f303 	lsl.w	r3, r2, r3
    ef6c:	4619      	mov	r1, r3
    ef6e:	4b03      	ldr	r3, [pc, #12]	; (ef7c <gpio_toggle_pin_level+0x2c>)
    ef70:	4798      	blx	r3
}
    ef72:	bf00      	nop
    ef74:	3708      	adds	r7, #8
    ef76:	46bd      	mov	sp, r7
    ef78:	bd80      	pop	{r7, pc}
    ef7a:	bf00      	nop
    ef7c:	0000ee79 	.word	0x0000ee79

0000ef80 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    ef80:	b580      	push	{r7, lr}
    ef82:	b082      	sub	sp, #8
    ef84:	af00      	add	r7, sp, #0
    ef86:	4603      	mov	r3, r0
    ef88:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    ef8a:	79fb      	ldrb	r3, [r7, #7]
    ef8c:	115b      	asrs	r3, r3, #5
    ef8e:	b2db      	uxtb	r3, r3
    ef90:	4618      	mov	r0, r3
    ef92:	4b09      	ldr	r3, [pc, #36]	; (efb8 <gpio_get_pin_level+0x38>)
    ef94:	4798      	blx	r3
    ef96:	4601      	mov	r1, r0
    ef98:	79fb      	ldrb	r3, [r7, #7]
    ef9a:	f003 031f 	and.w	r3, r3, #31
    ef9e:	2201      	movs	r2, #1
    efa0:	fa02 f303 	lsl.w	r3, r2, r3
    efa4:	400b      	ands	r3, r1
    efa6:	2b00      	cmp	r3, #0
    efa8:	bf14      	ite	ne
    efaa:	2301      	movne	r3, #1
    efac:	2300      	moveq	r3, #0
    efae:	b2db      	uxtb	r3, r3
}
    efb0:	4618      	mov	r0, r3
    efb2:	3708      	adds	r7, #8
    efb4:	46bd      	mov	sp, r7
    efb6:	bd80      	pop	{r7, pc}
    efb8:	0000eea1 	.word	0x0000eea1

0000efbc <_ZL29TimeoutFlapperValveControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController;

static SingleFlapperValve_Class fvStatic(0);

static void TimeoutFlapperValveController(const struct timer_task *const timer_task)
{
    efbc:	b480      	push	{r7}
    efbe:	b083      	sub	sp, #12
    efc0:	af00      	add	r7, sp, #0
    efc2:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController->timeoutFlapperValveController=true;
    efc4:	4b07      	ldr	r3, [pc, #28]	; (efe4 <_ZL29TimeoutFlapperValveControllerPK10timer_task+0x28>)
    efc6:	681b      	ldr	r3, [r3, #0]
    efc8:	2201      	movs	r2, #1
    efca:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController->unLockTimeout=true;
    efce:	4b05      	ldr	r3, [pc, #20]	; (efe4 <_ZL29TimeoutFlapperValveControllerPK10timer_task+0x28>)
    efd0:	681b      	ldr	r3, [r3, #0]
    efd2:	2201      	movs	r2, #1
    efd4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	
}
    efd8:	bf00      	nop
    efda:	370c      	adds	r7, #12
    efdc:	46bd      	mov	sp, r7
    efde:	bc80      	pop	{r7}
    efe0:	4770      	bx	lr
    efe2:	bf00      	nop
    efe4:	20001290 	.word	0x20001290

0000efe8 <_ZL31TimeoutFlapperValveFullyClossedPK10timer_task>:
static void TimeoutFlapperValveFullyClossed(const struct timer_task *const timer_task)
{
    efe8:	b480      	push	{r7}
    efea:	b083      	sub	sp, #12
    efec:	af00      	add	r7, sp, #0
    efee:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController->fullClosedTimeout=true;
    eff0:	4b04      	ldr	r3, [pc, #16]	; (f004 <_ZL31TimeoutFlapperValveFullyClossedPK10timer_task+0x1c>)
    eff2:	681b      	ldr	r3, [r3, #0]
    eff4:	2201      	movs	r2, #1
    eff6:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	
}
    effa:	bf00      	nop
    effc:	370c      	adds	r7, #12
    effe:	46bd      	mov	sp, r7
    f000:	bc80      	pop	{r7}
    f002:	4770      	bx	lr
    f004:	20001290 	.word	0x20001290

0000f008 <_ZL17ResetValveTimeoutPK10timer_task>:

static void ResetValveTimeout(const struct timer_task *const timer_task)
{
    f008:	b480      	push	{r7}
    f00a:	b083      	sub	sp, #12
    f00c:	af00      	add	r7, sp, #0
    f00e:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController->resetTimeout=true;
    f010:	4b04      	ldr	r3, [pc, #16]	; (f024 <_ZL17ResetValveTimeoutPK10timer_task+0x1c>)
    f012:	681b      	ldr	r3, [r3, #0]
    f014:	2201      	movs	r2, #1
    f016:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
}
    f01a:	bf00      	nop
    f01c:	370c      	adds	r7, #12
    f01e:	46bd      	mov	sp, r7
    f020:	bc80      	pop	{r7}
    f022:	4770      	bx	lr
    f024:	20001290 	.word	0x20001290

0000f028 <_ZN22FlapperValveControllerC1Ev>:


// default constructor
FlapperValveController::FlapperValveController()
    f028:	b580      	push	{r7, lr}
    f02a:	b082      	sub	sp, #8
    f02c:	af00      	add	r7, sp, #0
    f02e:	6078      	str	r0, [r7, #4]
    f030:	687b      	ldr	r3, [r7, #4]
    f032:	4618      	mov	r0, r3
    f034:	4b1e      	ldr	r3, [pc, #120]	; (f0b0 <_ZN22FlapperValveControllerC1Ev+0x88>)
    f036:	4798      	blx	r3
{
	fv=&fvStatic;
    f038:	687b      	ldr	r3, [r7, #4]
    f03a:	4a1e      	ldr	r2, [pc, #120]	; (f0b4 <_ZN22FlapperValveControllerC1Ev+0x8c>)
    f03c:	67da      	str	r2, [r3, #124]	; 0x7c
	ptrFlapperValveController=this;
    f03e:	4a1e      	ldr	r2, [pc, #120]	; (f0b8 <_ZN22FlapperValveControllerC1Ev+0x90>)
    f040:	687b      	ldr	r3, [r7, #4]
    f042:	6013      	str	r3, [r2, #0]
	doPeriodicTask=false;
    f044:	687b      	ldr	r3, [r7, #4]
    f046:	2200      	movs	r2, #0
    f048:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	isControlling=false;
    f04c:	687b      	ldr	r3, [r7, #4]
    f04e:	2200      	movs	r2, #0
    f050:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	gotSetpoint=false;
    f054:	687b      	ldr	r3, [r7, #4]
    f056:	2200      	movs	r2, #0
    f058:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	controllerEnabled=false;
    f05c:	687b      	ldr	r3, [r7, #4]
    f05e:	2200      	movs	r2, #0
    f060:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	closing=false;
    f064:	687b      	ldr	r3, [r7, #4]
    f066:	2200      	movs	r2, #0
    f068:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUM_AIR;
    f06c:	687b      	ldr	r3, [r7, #4]
    f06e:	22da      	movs	r2, #218	; 0xda
    f070:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	NBC_Mode=false;
    f074:	687b      	ldr	r3, [r7, #4]
    f076:	2200      	movs	r2, #0
    f078:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	NBC_Activated=false;
    f07c:	687b      	ldr	r3, [r7, #4]
    f07e:	2200      	movs	r2, #0
    f080:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	standAloneActivated=false;
    f084:	687b      	ldr	r3, [r7, #4]
    f086:	2200      	movs	r2, #0
    f088:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	standAloneMode=false;
    f08c:	687b      	ldr	r3, [r7, #4]
    f08e:	2200      	movs	r2, #0
    f090:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	resetTimeout=false;
    f094:	687b      	ldr	r3, [r7, #4]
    f096:	2200      	movs	r2, #0
    f098:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	standAloneReturning=false;
    f09c:	687b      	ldr	r3, [r7, #4]
    f09e:	2200      	movs	r2, #0
    f0a0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	
	
} //FlapperValveController
    f0a4:	687b      	ldr	r3, [r7, #4]
    f0a6:	4618      	mov	r0, r3
    f0a8:	3708      	adds	r7, #8
    f0aa:	46bd      	mov	sp, r7
    f0ac:	bd80      	pop	{r7, pc}
    f0ae:	bf00      	nop
    f0b0:	0000ffd1 	.word	0x0000ffd1
    f0b4:	20001294 	.word	0x20001294
    f0b8:	20001290 	.word	0x20001290

0000f0bc <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
    f0bc:	b580      	push	{r7, lr}
    f0be:	b082      	sub	sp, #8
    f0c0:	af00      	add	r7, sp, #0
    f0c2:	6078      	str	r0, [r7, #4]
    f0c4:	687b      	ldr	r3, [r7, #4]
    f0c6:	4618      	mov	r0, r3
    f0c8:	4b03      	ldr	r3, [pc, #12]	; (f0d8 <_ZN22FlapperValveControllerD1Ev+0x1c>)
    f0ca:	4798      	blx	r3
{
} //~FlapperValveController
    f0cc:	687b      	ldr	r3, [r7, #4]
    f0ce:	4618      	mov	r0, r3
    f0d0:	3708      	adds	r7, #8
    f0d2:	46bd      	mov	sp, r7
    f0d4:	bd80      	pop	{r7, pc}
    f0d6:	bf00      	nop
    f0d8:	0001001d 	.word	0x0001001d

0000f0dc <_ZN22FlapperValveController14InitControllerEv>:

bool FlapperValveController::InitController(){
    f0dc:	b580      	push	{r7, lr}
    f0de:	b082      	sub	sp, #8
    f0e0:	af00      	add	r7, sp, #0
    f0e2:	6078      	str	r0, [r7, #4]
	fv=&fvStatic;
    f0e4:	687b      	ldr	r3, [r7, #4]
    f0e6:	4a0d      	ldr	r2, [pc, #52]	; (f11c <_ZN22FlapperValveController14InitControllerEv+0x40>)
    f0e8:	67da      	str	r2, [r3, #124]	; 0x7c
	if (fv->Init())
    f0ea:	687b      	ldr	r3, [r7, #4]
    f0ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f0ee:	4618      	mov	r0, r3
    f0f0:	4b0b      	ldr	r3, [pc, #44]	; (f120 <_ZN22FlapperValveController14InitControllerEv+0x44>)
    f0f2:	4798      	blx	r3
    f0f4:	4603      	mov	r3, r0
    f0f6:	2b00      	cmp	r3, #0
    f0f8:	d007      	beq.n	f10a <_ZN22FlapperValveController14InitControllerEv+0x2e>
	{
		isOK=Selftest();
    f0fa:	6878      	ldr	r0, [r7, #4]
    f0fc:	4b09      	ldr	r3, [pc, #36]	; (f124 <_ZN22FlapperValveController14InitControllerEv+0x48>)
    f0fe:	4798      	blx	r3
    f100:	4603      	mov	r3, r0
    f102:	461a      	mov	r2, r3
    f104:	687b      	ldr	r3, [r7, #4]
    f106:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	}
	return	isOK;	
    f10a:	687b      	ldr	r3, [r7, #4]
    f10c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    f110:	b2db      	uxtb	r3, r3
}
    f112:	4618      	mov	r0, r3
    f114:	3708      	adds	r7, #8
    f116:	46bd      	mov	sp, r7
    f118:	bd80      	pop	{r7, pc}
    f11a:	bf00      	nop
    f11c:	20001294 	.word	0x20001294
    f120:	0001003d 	.word	0x0001003d
    f124:	0000fd91 	.word	0x0000fd91

0000f128 <_ZN22FlapperValveController18CalculateDirectionEh>:
bool FlapperValveController::IsEnabled(){
	return	fv->controlOutputs.niAlcFvMotorEnable==true;
}


bool	FlapperValveController::CalculateDirection(uint8_t sp){
    f128:	b480      	push	{r7}
    f12a:	b083      	sub	sp, #12
    f12c:	af00      	add	r7, sp, #0
    f12e:	6078      	str	r0, [r7, #4]
    f130:	460b      	mov	r3, r1
    f132:	70fb      	strb	r3, [r7, #3]
	lastDirection=direction;
    f134:	687b      	ldr	r3, [r7, #4]
    f136:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
    f13a:	687b      	ldr	r3, [r7, #4]
    f13c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	direction=currentPosition>sp;
    f140:	687b      	ldr	r3, [r7, #4]
    f142:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f146:	461a      	mov	r2, r3
    f148:	78fb      	ldrb	r3, [r7, #3]
    f14a:	429a      	cmp	r2, r3
    f14c:	bfcc      	ite	gt
    f14e:	2301      	movgt	r3, #1
    f150:	2300      	movle	r3, #0
    f152:	b2da      	uxtb	r2, r3
    f154:	687b      	ldr	r3, [r7, #4]
    f156:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	return direction;
    f15a:	687b      	ldr	r3, [r7, #4]
    f15c:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
	
}
    f160:	4618      	mov	r0, r3
    f162:	370c      	adds	r7, #12
    f164:	46bd      	mov	sp, r7
    f166:	bc80      	pop	{r7}
    f168:	4770      	bx	lr
	...

0000f16c <_ZN22FlapperValveController18CalculateDirectionEv>:

bool	FlapperValveController::CalculateDirection(){
    f16c:	b580      	push	{r7, lr}
    f16e:	b082      	sub	sp, #8
    f170:	af00      	add	r7, sp, #0
    f172:	6078      	str	r0, [r7, #4]

	//floatSetpoint=(float)setpoint;
	return CalculateDirection(setpoint);
    f174:	687b      	ldr	r3, [r7, #4]
    f176:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    f17a:	4619      	mov	r1, r3
    f17c:	6878      	ldr	r0, [r7, #4]
    f17e:	4b03      	ldr	r3, [pc, #12]	; (f18c <_ZN22FlapperValveController18CalculateDirectionEv+0x20>)
    f180:	4798      	blx	r3
    f182:	4603      	mov	r3, r0
	
}
    f184:	4618      	mov	r0, r3
    f186:	3708      	adds	r7, #8
    f188:	46bd      	mov	sp, r7
    f18a:	bd80      	pop	{r7, pc}
    f18c:	0000f129 	.word	0x0000f129

0000f190 <_ZN22FlapperValveController22StartMovingOnDirectionEv>:
bool	FlapperValveController::StatusHadChanged(){
	return	fv->fv1StatusChanged;
}

uint8_t FlapperValveController::StartMovingOnDirection(){
    f190:	b590      	push	{r4, r7, lr}
    f192:	b083      	sub	sp, #12
    f194:	af00      	add	r7, sp, #0
    f196:	6078      	str	r0, [r7, #4]

	lastPosition=currentPosition;
    f198:	687b      	ldr	r3, [r7, #4]
    f19a:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
    f19e:	687b      	ldr	r3, [r7, #4]
    f1a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
//	floatLastPosition=(float)lastPosition;
	if (fv->controlOutputs.niAlcFvMotorEnable)
    f1a4:	687b      	ldr	r3, [r7, #4]
    f1a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f1a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    f1ac:	2b00      	cmp	r3, #0
    f1ae:	d008      	beq.n	f1c2 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x32>
	{
		fv->SetEnable(false);
    f1b0:	687b      	ldr	r3, [r7, #4]
    f1b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f1b4:	2100      	movs	r1, #0
    f1b6:	4618      	mov	r0, r3
    f1b8:	4b0b      	ldr	r3, [pc, #44]	; (f1e8 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x58>)
    f1ba:	4798      	blx	r3
		delay_ms(10);
    f1bc:	200a      	movs	r0, #10
    f1be:	4b0b      	ldr	r3, [pc, #44]	; (f1ec <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x5c>)
    f1c0:	4798      	blx	r3
	} 
	else
	{
	}
	fv->SetDirection(CalculateDirection());
    f1c2:	687b      	ldr	r3, [r7, #4]
    f1c4:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
    f1c6:	6878      	ldr	r0, [r7, #4]
    f1c8:	4b09      	ldr	r3, [pc, #36]	; (f1f0 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x60>)
    f1ca:	4798      	blx	r3
    f1cc:	4603      	mov	r3, r0
    f1ce:	4619      	mov	r1, r3
    f1d0:	4620      	mov	r0, r4
    f1d2:	4b08      	ldr	r3, [pc, #32]	; (f1f4 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x64>)
    f1d4:	4798      	blx	r3
	StartMotor();
    f1d6:	6878      	ldr	r0, [r7, #4]
    f1d8:	4b07      	ldr	r3, [pc, #28]	; (f1f8 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x68>)
    f1da:	4798      	blx	r3
	return 0;
    f1dc:	2300      	movs	r3, #0
}
    f1de:	4618      	mov	r0, r3
    f1e0:	370c      	adds	r7, #12
    f1e2:	46bd      	mov	sp, r7
    f1e4:	bd90      	pop	{r4, r7, pc}
    f1e6:	bf00      	nop
    f1e8:	000101f1 	.word	0x000101f1
    f1ec:	000027c9 	.word	0x000027c9
    f1f0:	0000f16d 	.word	0x0000f16d
    f1f4:	00010271 	.word	0x00010271
    f1f8:	0000fa49 	.word	0x0000fa49

0000f1fc <_ZN22FlapperValveController23ControlMovement_AND_NBCEv>:

bool FlapperValveController::ControlMovement_AND_NBC(void){
    f1fc:	b580      	push	{r7, lr}
    f1fe:	b082      	sub	sp, #8
    f200:	af00      	add	r7, sp, #0
    f202:	6078      	str	r0, [r7, #4]

	if (IsNBCMode())
    f204:	6878      	ldr	r0, [r7, #4]
    f206:	4b13      	ldr	r3, [pc, #76]	; (f254 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x58>)
    f208:	4798      	blx	r3
    f20a:	4603      	mov	r3, r0
    f20c:	2b00      	cmp	r3, #0
    f20e:	d003      	beq.n	f218 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x1c>
	{
		CommandNBC_Mode();
    f210:	6878      	ldr	r0, [r7, #4]
    f212:	4b11      	ldr	r3, [pc, #68]	; (f258 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x5c>)
    f214:	4798      	blx	r3
    f216:	e013      	b.n	f240 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
	} 
	else
	{
		if (NBC_Activated)
    f218:	687b      	ldr	r3, [r7, #4]
    f21a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
    f21e:	2b00      	cmp	r3, #0
    f220:	d00b      	beq.n	f23a <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x3e>
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
    f222:	687b      	ldr	r3, [r7, #4]
    f224:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
    f228:	4619      	mov	r1, r3
    f22a:	6878      	ldr	r0, [r7, #4]
    f22c:	4b0b      	ldr	r3, [pc, #44]	; (f25c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x60>)
    f22e:	4798      	blx	r3
			NBC_Activated=false;
    f230:	687b      	ldr	r3, [r7, #4]
    f232:	2200      	movs	r2, #0
    f234:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    f238:	e002      	b.n	f240 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
		} 
		else
		{
			ControlMovement();
    f23a:	6878      	ldr	r0, [r7, #4]
    f23c:	4b08      	ldr	r3, [pc, #32]	; (f260 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x64>)
    f23e:	4798      	blx	r3
		}
		
	}
	return !NBC_Mode;
    f240:	687b      	ldr	r3, [r7, #4]
    f242:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    f246:	f083 0301 	eor.w	r3, r3, #1
    f24a:	b2db      	uxtb	r3, r3
}
    f24c:	4618      	mov	r0, r3
    f24e:	3708      	adds	r7, #8
    f250:	46bd      	mov	sp, r7
    f252:	bd80      	pop	{r7, pc}
    f254:	0000f8a1 	.word	0x0000f8a1
    f258:	0000f841 	.word	0x0000f841
    f25c:	0000fad9 	.word	0x0000fad9
    f260:	0000f439 	.word	0x0000f439

0000f264 <_ZN22FlapperValveController17IsInvalidPositionEv>:

bool FlapperValveController::IsInvalidPosition(){
    f264:	b590      	push	{r4, r7, lr}
    f266:	b085      	sub	sp, #20
    f268:	af00      	add	r7, sp, #0
    f26a:	6078      	str	r0, [r7, #4]
	bool result=false;
    f26c:	2300      	movs	r3, #0
    f26e:	73fb      	strb	r3, [r7, #15]
	memory.ReadParameters(parameters);
    f270:	687b      	ldr	r3, [r7, #4]
    f272:	33bf      	adds	r3, #191	; 0xbf
    f274:	4619      	mov	r1, r3
    f276:	4817      	ldr	r0, [pc, #92]	; (f2d4 <_ZN22FlapperValveController17IsInvalidPositionEv+0x70>)
    f278:	4b17      	ldr	r3, [pc, #92]	; (f2d8 <_ZN22FlapperValveController17IsInvalidPositionEv+0x74>)
    f27a:	4798      	blx	r3
	UpdateFlapperValveData();
    f27c:	6878      	ldr	r0, [r7, #4]
    f27e:	4b17      	ldr	r3, [pc, #92]	; (f2dc <_ZN22FlapperValveController17IsInvalidPositionEv+0x78>)
    f280:	4798      	blx	r3
	if ((!standAloneReturning)&(!IsNBCMode()))
    f282:	687b      	ldr	r3, [r7, #4]
    f284:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
    f288:	f083 0301 	eor.w	r3, r3, #1
    f28c:	b2db      	uxtb	r3, r3
    f28e:	461c      	mov	r4, r3
    f290:	6878      	ldr	r0, [r7, #4]
    f292:	4b13      	ldr	r3, [pc, #76]	; (f2e0 <_ZN22FlapperValveController17IsInvalidPositionEv+0x7c>)
    f294:	4798      	blx	r3
    f296:	4603      	mov	r3, r0
    f298:	f083 0301 	eor.w	r3, r3, #1
    f29c:	b2db      	uxtb	r3, r3
    f29e:	4023      	ands	r3, r4
    f2a0:	2b00      	cmp	r3, #0
    f2a2:	bf14      	ite	ne
    f2a4:	2301      	movne	r3, #1
    f2a6:	2300      	moveq	r3, #0
    f2a8:	b2db      	uxtb	r3, r3
    f2aa:	2b00      	cmp	r3, #0
    f2ac:	d00d      	beq.n	f2ca <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
	{
		if (currentPosition>currentMaximum)
    f2ae:	687b      	ldr	r3, [r7, #4]
    f2b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f2b4:	461a      	mov	r2, r3
    f2b6:	687b      	ldr	r3, [r7, #4]
    f2b8:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
    f2bc:	429a      	cmp	r2, r3
    f2be:	dd02      	ble.n	f2c6 <_ZN22FlapperValveController17IsInvalidPositionEv+0x62>
		{
			result=true;
    f2c0:	2301      	movs	r3, #1
    f2c2:	73fb      	strb	r3, [r7, #15]
    f2c4:	e001      	b.n	f2ca <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
		}
		else
		{
			result=false;
    f2c6:	2300      	movs	r3, #0
    f2c8:	73fb      	strb	r3, [r7, #15]
		}
	}

	return result;
    f2ca:	7bfb      	ldrb	r3, [r7, #15]
}
    f2cc:	4618      	mov	r0, r3
    f2ce:	3714      	adds	r7, #20
    f2d0:	46bd      	mov	sp, r7
    f2d2:	bd90      	pop	{r4, r7, pc}
    f2d4:	200024c8 	.word	0x200024c8
    f2d8:	0001092d 	.word	0x0001092d
    f2dc:	0000fcb9 	.word	0x0000fcb9
    f2e0:	0000f8a1 	.word	0x0000f8a1

0000f2e4 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv>:

bool FlapperValveController::Control_NBC_StandAlone_Reset(void){
    f2e4:	b580      	push	{r7, lr}
    f2e6:	b082      	sub	sp, #8
    f2e8:	af00      	add	r7, sp, #0
    f2ea:	6078      	str	r0, [r7, #4]
	
	if ((IsInvalidPosition()&(!flapperValveIsMoving)))
    f2ec:	6878      	ldr	r0, [r7, #4]
    f2ee:	4b11      	ldr	r3, [pc, #68]	; (f334 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x50>)
    f2f0:	4798      	blx	r3
    f2f2:	4603      	mov	r3, r0
    f2f4:	461a      	mov	r2, r3
    f2f6:	687b      	ldr	r3, [r7, #4]
    f2f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    f2fc:	b2db      	uxtb	r3, r3
    f2fe:	f083 0301 	eor.w	r3, r3, #1
    f302:	b2db      	uxtb	r3, r3
    f304:	4013      	ands	r3, r2
    f306:	2b00      	cmp	r3, #0
    f308:	bf14      	ite	ne
    f30a:	2301      	movne	r3, #1
    f30c:	2300      	moveq	r3, #0
    f30e:	b2db      	uxtb	r3, r3
    f310:	2b00      	cmp	r3, #0
    f312:	d003      	beq.n	f31c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x38>
	{
		ResetValvePosition();
    f314:	6878      	ldr	r0, [r7, #4]
    f316:	4b08      	ldr	r3, [pc, #32]	; (f338 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x54>)
    f318:	4798      	blx	r3
    f31a:	e002      	b.n	f322 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x3e>
	} 
	else
	{
		Control_NBC_StandAlone();
    f31c:	6878      	ldr	r0, [r7, #4]
    f31e:	4b07      	ldr	r3, [pc, #28]	; (f33c <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x58>)
    f320:	4798      	blx	r3
	}
	return resetTimeout;
    f322:	687b      	ldr	r3, [r7, #4]
    f324:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
    f328:	b2db      	uxtb	r3, r3
}
    f32a:	4618      	mov	r0, r3
    f32c:	3708      	adds	r7, #8
    f32e:	46bd      	mov	sp, r7
    f330:	bd80      	pop	{r7, pc}
    f332:	bf00      	nop
    f334:	0000f265 	.word	0x0000f265
    f338:	0000f6ad 	.word	0x0000f6ad
    f33c:	0000f341 	.word	0x0000f341

0000f340 <_ZN22FlapperValveController22Control_NBC_StandAloneEv>:

bool FlapperValveController::Control_NBC_StandAlone(void){
    f340:	b580      	push	{r7, lr}
    f342:	b082      	sub	sp, #8
    f344:	af00      	add	r7, sp, #0
    f346:	6078      	str	r0, [r7, #4]

	if (IsStandAloneMode())
    f348:	6878      	ldr	r0, [r7, #4]
    f34a:	4b29      	ldr	r3, [pc, #164]	; (f3f0 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb0>)
    f34c:	4798      	blx	r3
    f34e:	4603      	mov	r3, r0
    f350:	2b00      	cmp	r3, #0
    f352:	d031      	beq.n	f3b8 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x78>
	{	

			standAloneMode=true;
    f354:	687b      	ldr	r3, [r7, #4]
    f356:	2201      	movs	r2, #1
    f358:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
			if (standAloneActivated)
    f35c:	687b      	ldr	r3, [r7, #4]
    f35e:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
    f362:	2b00      	cmp	r3, #0
    f364:	d003      	beq.n	f36e <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x2e>
			{
				ControlMovement_AND_NBC();
    f366:	6878      	ldr	r0, [r7, #4]
    f368:	4b22      	ldr	r3, [pc, #136]	; (f3f4 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
    f36a:	4798      	blx	r3
    f36c:	e038      	b.n	f3e0 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
			}
			else
			{
				
				if ((currentPosition>0xff-parameters.flapperValveStandAloneMinimumPosition))
    f36e:	687b      	ldr	r3, [r7, #4]
    f370:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f374:	461a      	mov	r2, r3
    f376:	687b      	ldr	r3, [r7, #4]
    f378:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    f37c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    f380:	429a      	cmp	r2, r3
    f382:	dd0c      	ble.n	f39e <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x5e>
				{
					StartControlling(0xff-parameters.flapperValveStandAloneMinimumPosition);
    f384:	687b      	ldr	r3, [r7, #4]
    f386:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    f38a:	43db      	mvns	r3, r3
    f38c:	b2db      	uxtb	r3, r3
    f38e:	4619      	mov	r1, r3
    f390:	6878      	ldr	r0, [r7, #4]
    f392:	4b19      	ldr	r3, [pc, #100]	; (f3f8 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb8>)
    f394:	4798      	blx	r3
					standAloneReturning=true;
    f396:	687b      	ldr	r3, [r7, #4]
    f398:	2201      	movs	r2, #1
    f39a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
				}
				else
				{
					
				}
				currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
    f39e:	687b      	ldr	r3, [r7, #4]
    f3a0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    f3a4:	43db      	mvns	r3, r3
    f3a6:	b2da      	uxtb	r2, r3
    f3a8:	687b      	ldr	r3, [r7, #4]
    f3aa:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
				standAloneActivated=true;
    f3ae:	687b      	ldr	r3, [r7, #4]
    f3b0:	2201      	movs	r2, #1
    f3b2:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
    f3b6:	e013      	b.n	f3e0 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
		
		
	} 
	else
	{
		standAloneMode=false;
    f3b8:	687b      	ldr	r3, [r7, #4]
    f3ba:	2200      	movs	r2, #0
    f3bc:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
		if (standAloneActivated)
    f3c0:	687b      	ldr	r3, [r7, #4]
    f3c2:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
    f3c6:	2b00      	cmp	r3, #0
    f3c8:	d007      	beq.n	f3da <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x9a>
		{
		//	StartControlling(parameters.flapperValveMinimumPosition);
			standAloneActivated=false;
    f3ca:	687b      	ldr	r3, [r7, #4]
    f3cc:	2200      	movs	r2, #0
    f3ce:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
			standAloneReturning=false;
    f3d2:	687b      	ldr	r3, [r7, #4]
    f3d4:	2200      	movs	r2, #0
    f3d6:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		} 
		else
		{
		
		}
			ControlMovement_AND_NBC();
    f3da:	6878      	ldr	r0, [r7, #4]
    f3dc:	4b05      	ldr	r3, [pc, #20]	; (f3f4 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
    f3de:	4798      	blx	r3
		
	}
	return standAloneMode;
    f3e0:	687b      	ldr	r3, [r7, #4]
    f3e2:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
}
    f3e6:	4618      	mov	r0, r3
    f3e8:	3708      	adds	r7, #8
    f3ea:	46bd      	mov	sp, r7
    f3ec:	bd80      	pop	{r7, pc}
    f3ee:	bf00      	nop
    f3f0:	0000f3fd 	.word	0x0000f3fd
    f3f4:	0000f1fd 	.word	0x0000f1fd
    f3f8:	0000fad9 	.word	0x0000fad9

0000f3fc <_ZN22FlapperValveController16IsStandAloneModeEv>:

bool	FlapperValveController::IsStandAloneMode(){
    f3fc:	b480      	push	{r7}
    f3fe:	b085      	sub	sp, #20
    f400:	af00      	add	r7, sp, #0
    f402:	6078      	str	r0, [r7, #4]
	bool result=false;
    f404:	2300      	movs	r3, #0
    f406:	73fb      	strb	r3, [r7, #15]
	if ((dataStruct.controlOutputs.iAlcFvStandAloneOut)&(!dataStruct.inputStatus.cabin[1]))
    f408:	687b      	ldr	r3, [r7, #4]
    f40a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
    f40e:	461a      	mov	r2, r3
    f410:	687b      	ldr	r3, [r7, #4]
    f412:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
    f416:	f083 0301 	eor.w	r3, r3, #1
    f41a:	b2db      	uxtb	r3, r3
    f41c:	4013      	ands	r3, r2
    f41e:	2b00      	cmp	r3, #0
    f420:	d002      	beq.n	f428 <_ZN22FlapperValveController16IsStandAloneModeEv+0x2c>
	{
		result=true;
    f422:	2301      	movs	r3, #1
    f424:	73fb      	strb	r3, [r7, #15]
    f426:	e001      	b.n	f42c <_ZN22FlapperValveController16IsStandAloneModeEv+0x30>
	} 
	else
	{
		result=false;
    f428:	2300      	movs	r3, #0
    f42a:	73fb      	strb	r3, [r7, #15]
	}
	return result;
    f42c:	7bfb      	ldrb	r3, [r7, #15]
}
    f42e:	4618      	mov	r0, r3
    f430:	3714      	adds	r7, #20
    f432:	46bd      	mov	sp, r7
    f434:	bc80      	pop	{r7}
    f436:	4770      	bx	lr

0000f438 <_ZN22FlapperValveController15ControlMovementEv>:

uint8_t FlapperValveController::ControlMovement(){
    f438:	b590      	push	{r4, r7, lr}
    f43a:	b083      	sub	sp, #12
    f43c:	af00      	add	r7, sp, #0
    f43e:	6078      	str	r0, [r7, #4]
	if (isControlling)
    f440:	687b      	ldr	r3, [r7, #4]
    f442:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
    f446:	2b00      	cmp	r3, #0
    f448:	f000 8117 	beq.w	f67a <_ZN22FlapperValveController15ControlMovementEv+0x242>
	{	
		if (((dataStruct.inputStatus.limit[0]|dataStruct.inputStatus.limit[1])&(closing))&(unLockTimeout))
    f44c:	687b      	ldr	r3, [r7, #4]
    f44e:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
    f452:	687b      	ldr	r3, [r7, #4]
    f454:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
    f458:	4313      	orrs	r3, r2
    f45a:	b2db      	uxtb	r3, r3
    f45c:	461a      	mov	r2, r3
    f45e:	687b      	ldr	r3, [r7, #4]
    f460:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    f464:	4013      	ands	r3, r2
    f466:	687a      	ldr	r2, [r7, #4]
    f468:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
    f46c:	b2d2      	uxtb	r2, r2
    f46e:	4013      	ands	r3, r2
    f470:	2b00      	cmp	r3, #0
    f472:	bf14      	ite	ne
    f474:	2301      	movne	r3, #1
    f476:	2300      	moveq	r3, #0
    f478:	b2db      	uxtb	r3, r3
    f47a:	2b00      	cmp	r3, #0
    f47c:	d003      	beq.n	f486 <_ZN22FlapperValveController15ControlMovementEv+0x4e>
		{
				StopValveAtLimit();
    f47e:	6878      	ldr	r0, [r7, #4]
    f480:	4b80      	ldr	r3, [pc, #512]	; (f684 <_ZN22FlapperValveController15ControlMovementEv+0x24c>)
    f482:	4798      	blx	r3
    f484:	e0f9      	b.n	f67a <_ZN22FlapperValveController15ControlMovementEv+0x242>
		} 
		else
		{
			
		//	currentPosition=fv->ReadActualPosition();
			if ((((setpoint<6)&(currentPosition<6))|((setpoint>250)&(currentPosition>245)))&((!closing)&(flapperValveIsMoving)))
    f486:	687b      	ldr	r3, [r7, #4]
    f488:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    f48c:	2b05      	cmp	r3, #5
    f48e:	bfd4      	ite	le
    f490:	2301      	movle	r3, #1
    f492:	2300      	movgt	r3, #0
    f494:	b2da      	uxtb	r2, r3
    f496:	687b      	ldr	r3, [r7, #4]
    f498:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f49c:	2b05      	cmp	r3, #5
    f49e:	bfd4      	ite	le
    f4a0:	2301      	movle	r3, #1
    f4a2:	2300      	movgt	r3, #0
    f4a4:	b2db      	uxtb	r3, r3
    f4a6:	4013      	ands	r3, r2
    f4a8:	b2da      	uxtb	r2, r3
    f4aa:	687b      	ldr	r3, [r7, #4]
    f4ac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    f4b0:	2bfa      	cmp	r3, #250	; 0xfa
    f4b2:	bfcc      	ite	gt
    f4b4:	2301      	movgt	r3, #1
    f4b6:	2300      	movle	r3, #0
    f4b8:	b2d9      	uxtb	r1, r3
    f4ba:	687b      	ldr	r3, [r7, #4]
    f4bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f4c0:	2bf5      	cmp	r3, #245	; 0xf5
    f4c2:	bfcc      	ite	gt
    f4c4:	2301      	movgt	r3, #1
    f4c6:	2300      	movle	r3, #0
    f4c8:	b2db      	uxtb	r3, r3
    f4ca:	400b      	ands	r3, r1
    f4cc:	b2db      	uxtb	r3, r3
    f4ce:	4313      	orrs	r3, r2
    f4d0:	b2db      	uxtb	r3, r3
    f4d2:	461a      	mov	r2, r3
    f4d4:	687b      	ldr	r3, [r7, #4]
    f4d6:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    f4da:	f083 0301 	eor.w	r3, r3, #1
    f4de:	b2db      	uxtb	r3, r3
    f4e0:	4619      	mov	r1, r3
    f4e2:	687b      	ldr	r3, [r7, #4]
    f4e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    f4e8:	b2db      	uxtb	r3, r3
    f4ea:	400b      	ands	r3, r1
    f4ec:	4013      	ands	r3, r2
    f4ee:	2b00      	cmp	r3, #0
    f4f0:	bf14      	ite	ne
    f4f2:	2301      	movne	r3, #1
    f4f4:	2300      	moveq	r3, #0
    f4f6:	b2db      	uxtb	r3, r3
    f4f8:	2b00      	cmp	r3, #0
    f4fa:	d014      	beq.n	f526 <_ZN22FlapperValveController15ControlMovementEv+0xee>
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveFullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
    f4fc:	22c8      	movs	r2, #200	; 0xc8
    f4fe:	4962      	ldr	r1, [pc, #392]	; (f688 <_ZN22FlapperValveController15ControlMovementEv+0x250>)
    f500:	4862      	ldr	r0, [pc, #392]	; (f68c <_ZN22FlapperValveController15ControlMovementEv+0x254>)
    f502:	4b63      	ldr	r3, [pc, #396]	; (f690 <_ZN22FlapperValveController15ControlMovementEv+0x258>)
    f504:	4798      	blx	r3
				fullClosedTimeout=false;
    f506:	687b      	ldr	r3, [r7, #4]
    f508:	2200      	movs	r2, #0
    f50a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
				gotSetpoint=false;
    f50e:	687b      	ldr	r3, [r7, #4]
    f510:	2200      	movs	r2, #0
    f512:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
				closing=true;
    f516:	687b      	ldr	r3, [r7, #4]
    f518:	2201      	movs	r2, #1
    f51a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
				unLockTimeout=true;
    f51e:	687b      	ldr	r3, [r7, #4]
    f520:	2201      	movs	r2, #1
    f522:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
			}
			//floatCurrentPosition=(float)currentPosition;
			if ((abs(currentPosition-setpoint)>tolerance)|(closing))
    f526:	687b      	ldr	r3, [r7, #4]
    f528:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f52c:	461a      	mov	r2, r3
    f52e:	687b      	ldr	r3, [r7, #4]
    f530:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    f534:	1ad3      	subs	r3, r2, r3
    f536:	2b00      	cmp	r3, #0
    f538:	bfb8      	it	lt
    f53a:	425b      	neglt	r3, r3
    f53c:	687a      	ldr	r2, [r7, #4]
    f53e:	f892 209b 	ldrb.w	r2, [r2, #155]	; 0x9b
    f542:	4293      	cmp	r3, r2
    f544:	bfcc      	ite	gt
    f546:	2301      	movgt	r3, #1
    f548:	2300      	movle	r3, #0
    f54a:	b2db      	uxtb	r3, r3
    f54c:	461a      	mov	r2, r3
    f54e:	687b      	ldr	r3, [r7, #4]
    f550:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    f554:	4313      	orrs	r3, r2
    f556:	2b00      	cmp	r3, #0
    f558:	d079      	beq.n	f64e <_ZN22FlapperValveController15ControlMovementEv+0x216>
			{
				if (flapperValveIsMoving)
    f55a:	687b      	ldr	r3, [r7, #4]
    f55c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    f560:	b2db      	uxtb	r3, r3
    f562:	2b00      	cmp	r3, #0
    f564:	d04b      	beq.n	f5fe <_ZN22FlapperValveController15ControlMovementEv+0x1c6>
				{
					if (closing)
    f566:	687b      	ldr	r3, [r7, #4]
    f568:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    f56c:	2b00      	cmp	r3, #0
    f56e:	d00e      	beq.n	f58e <_ZN22FlapperValveController15ControlMovementEv+0x156>
					{
						if (keepControlling)
    f570:	687b      	ldr	r3, [r7, #4]
    f572:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
    f576:	2b00      	cmp	r3, #0
    f578:	d054      	beq.n	f624 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						{
							if (fullClosedTimeout)
    f57a:	687b      	ldr	r3, [r7, #4]
    f57c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
    f580:	b2db      	uxtb	r3, r3
    f582:	2b00      	cmp	r3, #0
    f584:	d04e      	beq.n	f624 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
							{
								StopValveAtLimit();
    f586:	6878      	ldr	r0, [r7, #4]
    f588:	4b3e      	ldr	r3, [pc, #248]	; (f684 <_ZN22FlapperValveController15ControlMovementEv+0x24c>)
    f58a:	4798      	blx	r3
    f58c:	e04a      	b.n	f624 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						}
					} 
					else
					{
						
						if (lastDirection!=CalculateDirection())
    f58e:	687b      	ldr	r3, [r7, #4]
    f590:	f893 40ac 	ldrb.w	r4, [r3, #172]	; 0xac
    f594:	6878      	ldr	r0, [r7, #4]
    f596:	4b3f      	ldr	r3, [pc, #252]	; (f694 <_ZN22FlapperValveController15ControlMovementEv+0x25c>)
    f598:	4798      	blx	r3
    f59a:	4603      	mov	r3, r0
    f59c:	429c      	cmp	r4, r3
    f59e:	bf14      	ite	ne
    f5a0:	2301      	movne	r3, #1
    f5a2:	2300      	moveq	r3, #0
    f5a4:	b2db      	uxtb	r3, r3
    f5a6:	2b00      	cmp	r3, #0
    f5a8:	d00b      	beq.n	f5c2 <_ZN22FlapperValveController15ControlMovementEv+0x18a>
						{
							StopMotor();
    f5aa:	6878      	ldr	r0, [r7, #4]
    f5ac:	4b3a      	ldr	r3, [pc, #232]	; (f698 <_ZN22FlapperValveController15ControlMovementEv+0x260>)
    f5ae:	4798      	blx	r3
							hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
    f5b0:	493a      	ldr	r1, [pc, #232]	; (f69c <_ZN22FlapperValveController15ControlMovementEv+0x264>)
    f5b2:	4836      	ldr	r0, [pc, #216]	; (f68c <_ZN22FlapperValveController15ControlMovementEv+0x254>)
    f5b4:	4b3a      	ldr	r3, [pc, #232]	; (f6a0 <_ZN22FlapperValveController15ControlMovementEv+0x268>)
    f5b6:	4798      	blx	r3
							keepControlling=true;
    f5b8:	687b      	ldr	r3, [r7, #4]
    f5ba:	2201      	movs	r2, #1
    f5bc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    f5c0:	e030      	b.n	f624 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						}
						else
						{
							if (timeoutFlapperValveController)
    f5c2:	687b      	ldr	r3, [r7, #4]
    f5c4:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    f5c8:	b2db      	uxtb	r3, r3
    f5ca:	2b00      	cmp	r3, #0
    f5cc:	d003      	beq.n	f5d6 <_ZN22FlapperValveController15ControlMovementEv+0x19e>
							{
								StopMotor();
    f5ce:	6878      	ldr	r0, [r7, #4]
    f5d0:	4b31      	ldr	r3, [pc, #196]	; (f698 <_ZN22FlapperValveController15ControlMovementEv+0x260>)
    f5d2:	4798      	blx	r3
    f5d4:	e026      	b.n	f624 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
								
							}
							else
							{
								if (keepControlling)
    f5d6:	687b      	ldr	r3, [r7, #4]
    f5d8:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
    f5dc:	2b00      	cmp	r3, #0
    f5de:	d021      	beq.n	f624 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
								{
									if (timeoutKeepControlling)
    f5e0:	687b      	ldr	r3, [r7, #4]
    f5e2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    f5e6:	b2db      	uxtb	r3, r3
    f5e8:	2b00      	cmp	r3, #0
    f5ea:	d003      	beq.n	f5f4 <_ZN22FlapperValveController15ControlMovementEv+0x1bc>
									{
										StopMotor();
    f5ec:	6878      	ldr	r0, [r7, #4]
    f5ee:	4b2a      	ldr	r3, [pc, #168]	; (f698 <_ZN22FlapperValveController15ControlMovementEv+0x260>)
    f5f0:	4798      	blx	r3
    f5f2:	e017      	b.n	f624 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
									}
									else
									{
										KeepControlling();
    f5f4:	2100      	movs	r1, #0
    f5f6:	6878      	ldr	r0, [r7, #4]
    f5f8:	4b2a      	ldr	r3, [pc, #168]	; (f6a4 <_ZN22FlapperValveController15ControlMovementEv+0x26c>)
    f5fa:	4798      	blx	r3
    f5fc:	e012      	b.n	f624 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
					}
					
				}
				else
				{
					if (keepControlling)
    f5fe:	687b      	ldr	r3, [r7, #4]
    f600:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
    f604:	2b00      	cmp	r3, #0
    f606:	d00d      	beq.n	f624 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
					{
						if (timeoutKeepControlling)
    f608:	687b      	ldr	r3, [r7, #4]
    f60a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    f60e:	b2db      	uxtb	r3, r3
    f610:	2b00      	cmp	r3, #0
    f612:	d003      	beq.n	f61c <_ZN22FlapperValveController15ControlMovementEv+0x1e4>
						{
							StopValveinBetween();
    f614:	6878      	ldr	r0, [r7, #4]
    f616:	4b24      	ldr	r3, [pc, #144]	; (f6a8 <_ZN22FlapperValveController15ControlMovementEv+0x270>)
    f618:	4798      	blx	r3
    f61a:	e003      	b.n	f624 <_ZN22FlapperValveController15ControlMovementEv+0x1ec>
						}
						else
						{
							KeepControlling();
    f61c:	2100      	movs	r1, #0
    f61e:	6878      	ldr	r0, [r7, #4]
    f620:	4b20      	ldr	r3, [pc, #128]	; (f6a4 <_ZN22FlapperValveController15ControlMovementEv+0x26c>)
    f622:	4798      	blx	r3
						
					}
					
				}
				
				if ((abs(currentPosition-setpoint)>tolerance))
    f624:	687b      	ldr	r3, [r7, #4]
    f626:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f62a:	461a      	mov	r2, r3
    f62c:	687b      	ldr	r3, [r7, #4]
    f62e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    f632:	1ad3      	subs	r3, r2, r3
    f634:	2b00      	cmp	r3, #0
    f636:	bfb8      	it	lt
    f638:	425b      	neglt	r3, r3
    f63a:	687a      	ldr	r2, [r7, #4]
    f63c:	f892 209b 	ldrb.w	r2, [r2, #155]	; 0x9b
    f640:	4293      	cmp	r3, r2
    f642:	dd1a      	ble.n	f67a <_ZN22FlapperValveController15ControlMovementEv+0x242>
				{
					gotSetpoint=false;
    f644:	687b      	ldr	r3, [r7, #4]
    f646:	2200      	movs	r2, #0
    f648:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
    f64c:	e015      	b.n	f67a <_ZN22FlapperValveController15ControlMovementEv+0x242>
				
				
			}
			else
			{
				if (closing)
    f64e:	687b      	ldr	r3, [r7, #4]
    f650:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    f654:	2b00      	cmp	r3, #0
    f656:	d009      	beq.n	f66c <_ZN22FlapperValveController15ControlMovementEv+0x234>
				{
					if (fullClosedTimeout)
    f658:	687b      	ldr	r3, [r7, #4]
    f65a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
    f65e:	b2db      	uxtb	r3, r3
    f660:	2b00      	cmp	r3, #0
    f662:	d00a      	beq.n	f67a <_ZN22FlapperValveController15ControlMovementEv+0x242>
					{
						StopValveAtLimit();
    f664:	6878      	ldr	r0, [r7, #4]
    f666:	4b07      	ldr	r3, [pc, #28]	; (f684 <_ZN22FlapperValveController15ControlMovementEv+0x24c>)
    f668:	4798      	blx	r3
    f66a:	e006      	b.n	f67a <_ZN22FlapperValveController15ControlMovementEv+0x242>
					{
					}
				} 
				else
				{
					StopValveinBetween();
    f66c:	6878      	ldr	r0, [r7, #4]
    f66e:	4b0e      	ldr	r3, [pc, #56]	; (f6a8 <_ZN22FlapperValveController15ControlMovementEv+0x270>)
    f670:	4798      	blx	r3
					gotSetpoint=true;
    f672:	687b      	ldr	r3, [r7, #4]
    f674:	2201      	movs	r2, #1
    f676:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
		
	} 
	else
	{
	}
	return 0;
    f67a:	2300      	movs	r3, #0
	
}
    f67c:	4618      	mov	r0, r3
    f67e:	370c      	adds	r7, #12
    f680:	46bd      	mov	sp, r7
    f682:	bd90      	pop	{r4, r7, pc}
    f684:	0000f915 	.word	0x0000f915
    f688:	0000efe9 	.word	0x0000efe9
    f68c:	20000f50 	.word	0x20000f50
    f690:	0000da85 	.word	0x0000da85
    f694:	0000f16d 	.word	0x0000f16d
    f698:	0000f8e9 	.word	0x0000f8e9
    f69c:	0000efbd 	.word	0x0000efbd
    f6a0:	0000da2d 	.word	0x0000da2d
    f6a4:	0000fc81 	.word	0x0000fc81
    f6a8:	0000f989 	.word	0x0000f989

0000f6ac <_ZN22FlapperValveController18ResetValvePositionEv>:
void FlapperValveController::ResetValvePosition(void){
    f6ac:	b580      	push	{r7, lr}
    f6ae:	b084      	sub	sp, #16
    f6b0:	af00      	add	r7, sp, #0
    f6b2:	6078      	str	r0, [r7, #4]
	uint8_t localSetpoint,localPosition;
	bool pinLevel=gpio_get_pin_level(LED0);
    f6b4:	2052      	movs	r0, #82	; 0x52
    f6b6:	4b54      	ldr	r3, [pc, #336]	; (f808 <_ZN22FlapperValveController18ResetValvePositionEv+0x15c>)
    f6b8:	4798      	blx	r3
    f6ba:	4603      	mov	r3, r0
    f6bc:	73fb      	strb	r3, [r7, #15]
	if (IsInvalidPosition())
    f6be:	6878      	ldr	r0, [r7, #4]
    f6c0:	4b52      	ldr	r3, [pc, #328]	; (f80c <_ZN22FlapperValveController18ResetValvePositionEv+0x160>)
    f6c2:	4798      	blx	r3
    f6c4:	4603      	mov	r3, r0
    f6c6:	2b00      	cmp	r3, #0
    f6c8:	f000 8099 	beq.w	f7fe <_ZN22FlapperValveController18ResetValvePositionEv+0x152>
	{
		
		localSetpoint=currentMaximum;
    f6cc:	687b      	ldr	r3, [r7, #4]
    f6ce:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
    f6d2:	73bb      	strb	r3, [r7, #14]
		
		fv->SetEnable(false);
    f6d4:	687b      	ldr	r3, [r7, #4]
    f6d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f6d8:	2100      	movs	r1, #0
    f6da:	4618      	mov	r0, r3
    f6dc:	4b4c      	ldr	r3, [pc, #304]	; (f810 <_ZN22FlapperValveController18ResetValvePositionEv+0x164>)
    f6de:	4798      	blx	r3
		fv->SetInvalidPosition(false);
    f6e0:	687b      	ldr	r3, [r7, #4]
    f6e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f6e4:	2100      	movs	r1, #0
    f6e6:	4618      	mov	r0, r3
    f6e8:	4b4a      	ldr	r3, [pc, #296]	; (f814 <_ZN22FlapperValveController18ResetValvePositionEv+0x168>)
    f6ea:	4798      	blx	r3
		fv->ClearMoveFault(false);
    f6ec:	687b      	ldr	r3, [r7, #4]
    f6ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f6f0:	2100      	movs	r1, #0
    f6f2:	4618      	mov	r0, r3
    f6f4:	4b48      	ldr	r3, [pc, #288]	; (f818 <_ZN22FlapperValveController18ResetValvePositionEv+0x16c>)
    f6f6:	4798      	blx	r3
		delay_ms(100);
    f6f8:	2064      	movs	r0, #100	; 0x64
    f6fa:	4b48      	ldr	r3, [pc, #288]	; (f81c <_ZN22FlapperValveController18ResetValvePositionEv+0x170>)
    f6fc:	4798      	blx	r3
		if (fv->ReadActualPosition()>localSetpoint)
    f6fe:	687b      	ldr	r3, [r7, #4]
    f700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f702:	4618      	mov	r0, r3
    f704:	4b46      	ldr	r3, [pc, #280]	; (f820 <_ZN22FlapperValveController18ResetValvePositionEv+0x174>)
    f706:	4798      	blx	r3
    f708:	4603      	mov	r3, r0
    f70a:	461a      	mov	r2, r3
    f70c:	7bbb      	ldrb	r3, [r7, #14]
    f70e:	429a      	cmp	r2, r3
    f710:	bfcc      	ite	gt
    f712:	2301      	movgt	r3, #1
    f714:	2300      	movle	r3, #0
    f716:	b2db      	uxtb	r3, r3
    f718:	2b00      	cmp	r3, #0
    f71a:	d006      	beq.n	f72a <_ZN22FlapperValveController18ResetValvePositionEv+0x7e>
		{
			fv->SetDirection(true);
    f71c:	687b      	ldr	r3, [r7, #4]
    f71e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f720:	2101      	movs	r1, #1
    f722:	4618      	mov	r0, r3
    f724:	4b3f      	ldr	r3, [pc, #252]	; (f824 <_ZN22FlapperValveController18ResetValvePositionEv+0x178>)
    f726:	4798      	blx	r3
    f728:	e005      	b.n	f736 <_ZN22FlapperValveController18ResetValvePositionEv+0x8a>
		}
		else
		{
			fv->SetDirection(false);
    f72a:	687b      	ldr	r3, [r7, #4]
    f72c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f72e:	2100      	movs	r1, #0
    f730:	4618      	mov	r0, r3
    f732:	4b3c      	ldr	r3, [pc, #240]	; (f824 <_ZN22FlapperValveController18ResetValvePositionEv+0x178>)
    f734:	4798      	blx	r3
		}
		fv->SetInvalidPosition(true);
    f736:	687b      	ldr	r3, [r7, #4]
    f738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f73a:	2101      	movs	r1, #1
    f73c:	4618      	mov	r0, r3
    f73e:	4b35      	ldr	r3, [pc, #212]	; (f814 <_ZN22FlapperValveController18ResetValvePositionEv+0x168>)
    f740:	4798      	blx	r3
		fv->ClearMoveFault(true);
    f742:	687b      	ldr	r3, [r7, #4]
    f744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f746:	2101      	movs	r1, #1
    f748:	4618      	mov	r0, r3
    f74a:	4b33      	ldr	r3, [pc, #204]	; (f818 <_ZN22FlapperValveController18ResetValvePositionEv+0x16c>)
    f74c:	4798      	blx	r3
		fv->WriteSetpoint(localSetpoint);
    f74e:	687b      	ldr	r3, [r7, #4]
    f750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f752:	7bba      	ldrb	r2, [r7, #14]
    f754:	4611      	mov	r1, r2
    f756:	4618      	mov	r0, r3
    f758:	4b33      	ldr	r3, [pc, #204]	; (f828 <_ZN22FlapperValveController18ResetValvePositionEv+0x17c>)
    f75a:	4798      	blx	r3
		

		currentPosition=fv->ReadActualPosition();
    f75c:	687b      	ldr	r3, [r7, #4]
    f75e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f760:	4618      	mov	r0, r3
    f762:	4b2f      	ldr	r3, [pc, #188]	; (f820 <_ZN22FlapperValveController18ResetValvePositionEv+0x174>)
    f764:	4798      	blx	r3
    f766:	4603      	mov	r3, r0
    f768:	461a      	mov	r2, r3
    f76a:	687b      	ldr	r3, [r7, #4]
    f76c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		
		resetTimeout=false;
    f770:	687b      	ldr	r3, [r7, #4]
    f772:	2200      	movs	r2, #0
    f774:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
		hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValveTimeout),1000);
    f778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f77c:	492b      	ldr	r1, [pc, #172]	; (f82c <_ZN22FlapperValveController18ResetValvePositionEv+0x180>)
    f77e:	482c      	ldr	r0, [pc, #176]	; (f830 <_ZN22FlapperValveController18ResetValvePositionEv+0x184>)
    f780:	4b2c      	ldr	r3, [pc, #176]	; (f834 <_ZN22FlapperValveController18ResetValvePositionEv+0x188>)
    f782:	4798      	blx	r3
		
		fv->SetEnable(true);
    f784:	687b      	ldr	r3, [r7, #4]
    f786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f788:	2101      	movs	r1, #1
    f78a:	4618      	mov	r0, r3
    f78c:	4b20      	ldr	r3, [pc, #128]	; (f810 <_ZN22FlapperValveController18ResetValvePositionEv+0x164>)
    f78e:	4798      	blx	r3
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
    f790:	687b      	ldr	r3, [r7, #4]
    f792:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f796:	461a      	mov	r2, r3
    f798:	7bbb      	ldrb	r3, [r7, #14]
    f79a:	1ad3      	subs	r3, r2, r3
    f79c:	2b00      	cmp	r3, #0
    f79e:	bfb8      	it	lt
    f7a0:	425b      	neglt	r3, r3
    f7a2:	2b06      	cmp	r3, #6
    f7a4:	bfcc      	ite	gt
    f7a6:	2301      	movgt	r3, #1
    f7a8:	2300      	movle	r3, #0
    f7aa:	b2db      	uxtb	r3, r3
    f7ac:	461a      	mov	r2, r3
    f7ae:	687b      	ldr	r3, [r7, #4]
    f7b0:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
    f7b4:	b2db      	uxtb	r3, r3
    f7b6:	f083 0301 	eor.w	r3, r3, #1
    f7ba:	b2db      	uxtb	r3, r3
    f7bc:	4013      	ands	r3, r2
    f7be:	2b00      	cmp	r3, #0
    f7c0:	bf14      	ite	ne
    f7c2:	2301      	movne	r3, #1
    f7c4:	2300      	moveq	r3, #0
    f7c6:	b2db      	uxtb	r3, r3
    f7c8:	2b00      	cmp	r3, #0
    f7ca:	d00d      	beq.n	f7e8 <_ZN22FlapperValveController18ResetValvePositionEv+0x13c>

		{
			gpio_toggle_pin_level(LED0);
    f7cc:	2052      	movs	r0, #82	; 0x52
    f7ce:	4b1a      	ldr	r3, [pc, #104]	; (f838 <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
    f7d0:	4798      	blx	r3
			currentPosition=fv->ReadActualPosition();
    f7d2:	687b      	ldr	r3, [r7, #4]
    f7d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f7d6:	4618      	mov	r0, r3
    f7d8:	4b11      	ldr	r3, [pc, #68]	; (f820 <_ZN22FlapperValveController18ResetValvePositionEv+0x174>)
    f7da:	4798      	blx	r3
    f7dc:	4603      	mov	r3, r0
    f7de:	461a      	mov	r2, r3
    f7e0:	687b      	ldr	r3, [r7, #4]
    f7e2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
    f7e6:	e7d3      	b.n	f790 <_ZN22FlapperValveController18ResetValvePositionEv+0xe4>

		}
		fv->SetEnable(false);
    f7e8:	687b      	ldr	r3, [r7, #4]
    f7ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f7ec:	2100      	movs	r1, #0
    f7ee:	4618      	mov	r0, r3
    f7f0:	4b07      	ldr	r3, [pc, #28]	; (f810 <_ZN22FlapperValveController18ResetValvePositionEv+0x164>)
    f7f2:	4798      	blx	r3
		gpio_set_pin_level(LED0,pinLevel);
    f7f4:	7bfb      	ldrb	r3, [r7, #15]
    f7f6:	4619      	mov	r1, r3
    f7f8:	2052      	movs	r0, #82	; 0x52
    f7fa:	4b10      	ldr	r3, [pc, #64]	; (f83c <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
    f7fc:	4798      	blx	r3
	} 
	else
	{
	}
}
    f7fe:	bf00      	nop
    f800:	3710      	adds	r7, #16
    f802:	46bd      	mov	sp, r7
    f804:	bd80      	pop	{r7, pc}
    f806:	bf00      	nop
    f808:	0000ef81 	.word	0x0000ef81
    f80c:	0000f265 	.word	0x0000f265
    f810:	000101f1 	.word	0x000101f1
    f814:	00010361 	.word	0x00010361
    f818:	000102e9 	.word	0x000102e9
    f81c:	000027c9 	.word	0x000027c9
    f820:	00010411 	.word	0x00010411
    f824:	00010271 	.word	0x00010271
    f828:	000103d9 	.word	0x000103d9
    f82c:	0000f009 	.word	0x0000f009
    f830:	20000f50 	.word	0x20000f50
    f834:	0000da85 	.word	0x0000da85
    f838:	0000ef51 	.word	0x0000ef51
    f83c:	0000ef19 	.word	0x0000ef19

0000f840 <_ZN22FlapperValveController15CommandNBC_ModeEv>:

uint8_t FlapperValveController::CommandNBC_Mode(void){
    f840:	b580      	push	{r7, lr}
    f842:	b082      	sub	sp, #8
    f844:	af00      	add	r7, sp, #0
    f846:	6078      	str	r0, [r7, #4]
	if (NBC_Activated)
    f848:	687b      	ldr	r3, [r7, #4]
    f84a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
    f84e:	2b00      	cmp	r3, #0
    f850:	d014      	beq.n	f87c <_ZN22FlapperValveController15CommandNBC_ModeEv+0x3c>
	{
		if (NBC_Mode)
    f852:	687b      	ldr	r3, [r7, #4]
    f854:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    f858:	2b00      	cmp	r3, #0
    f85a:	d003      	beq.n	f864 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x24>
		{
			ControlMovement();
    f85c:	6878      	ldr	r0, [r7, #4]
    f85e:	4b0e      	ldr	r3, [pc, #56]	; (f898 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x58>)
    f860:	4798      	blx	r3
    f862:	e013      	b.n	f88c <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
		else
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
    f864:	687b      	ldr	r3, [r7, #4]
    f866:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
    f86a:	4619      	mov	r1, r3
    f86c:	6878      	ldr	r0, [r7, #4]
    f86e:	4b0b      	ldr	r3, [pc, #44]	; (f89c <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
    f870:	4798      	blx	r3
			NBC_Activated=false;
    f872:	687b      	ldr	r3, [r7, #4]
    f874:	2200      	movs	r2, #0
    f876:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    f87a:	e007      	b.n	f88c <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
	} 
	else
	{
			StartControlling(255);
    f87c:	21ff      	movs	r1, #255	; 0xff
    f87e:	6878      	ldr	r0, [r7, #4]
    f880:	4b06      	ldr	r3, [pc, #24]	; (f89c <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
    f882:	4798      	blx	r3
			NBC_Activated=true;
    f884:	687b      	ldr	r3, [r7, #4]
    f886:	2201      	movs	r2, #1
    f888:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	}

	return 0;
    f88c:	2300      	movs	r3, #0
	
}
    f88e:	4618      	mov	r0, r3
    f890:	3708      	adds	r7, #8
    f892:	46bd      	mov	sp, r7
    f894:	bd80      	pop	{r7, pc}
    f896:	bf00      	nop
    f898:	0000f439 	.word	0x0000f439
    f89c:	0000fad9 	.word	0x0000fad9

0000f8a0 <_ZN22FlapperValveController9IsNBCModeEv>:

bool FlapperValveController::IsNBCMode(){
    f8a0:	b480      	push	{r7}
    f8a2:	b083      	sub	sp, #12
    f8a4:	af00      	add	r7, sp, #0
    f8a6:	6078      	str	r0, [r7, #4]
	NBC_Mode=((dataStruct.inputStatus.cabin[0]&dataStruct.inputStatus.cabin[1])|NBC_Remote);
    f8a8:	687b      	ldr	r3, [r7, #4]
    f8aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
    f8ae:	461a      	mov	r2, r3
    f8b0:	687b      	ldr	r3, [r7, #4]
    f8b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
    f8b6:	4013      	ands	r3, r2
    f8b8:	687a      	ldr	r2, [r7, #4]
    f8ba:	f892 20b5 	ldrb.w	r2, [r2, #181]	; 0xb5
    f8be:	4313      	orrs	r3, r2
    f8c0:	2b00      	cmp	r3, #0
    f8c2:	bf14      	ite	ne
    f8c4:	2301      	movne	r3, #1
    f8c6:	2300      	moveq	r3, #0
    f8c8:	b2da      	uxtb	r2, r3
    f8ca:	687b      	ldr	r3, [r7, #4]
    f8cc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	currentMaximum=255;
    f8d0:	687b      	ldr	r3, [r7, #4]
    f8d2:	22ff      	movs	r2, #255	; 0xff
    f8d4:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	return NBC_Mode;
    f8d8:	687b      	ldr	r3, [r7, #4]
    f8da:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
}
    f8de:	4618      	mov	r0, r3
    f8e0:	370c      	adds	r7, #12
    f8e2:	46bd      	mov	sp, r7
    f8e4:	bc80      	pop	{r7}
    f8e6:	4770      	bx	lr

0000f8e8 <_ZN22FlapperValveController9StopMotorEv>:
	}
	return NBC_Remote;
}


uint8_t	FlapperValveController::StopMotor(){
    f8e8:	b580      	push	{r7, lr}
    f8ea:	b082      	sub	sp, #8
    f8ec:	af00      	add	r7, sp, #0
    f8ee:	6078      	str	r0, [r7, #4]
	fv->SetEnable(false);
    f8f0:	687b      	ldr	r3, [r7, #4]
    f8f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f8f4:	2100      	movs	r1, #0
    f8f6:	4618      	mov	r0, r3
    f8f8:	4b05      	ldr	r3, [pc, #20]	; (f910 <_ZN22FlapperValveController9StopMotorEv+0x28>)
    f8fa:	4798      	blx	r3
	flapperValveIsMoving=false;
    f8fc:	687b      	ldr	r3, [r7, #4]
    f8fe:	2200      	movs	r2, #0
    f900:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	
	return 0;
    f904:	2300      	movs	r3, #0
}
    f906:	4618      	mov	r0, r3
    f908:	3708      	adds	r7, #8
    f90a:	46bd      	mov	sp, r7
    f90c:	bd80      	pop	{r7, pc}
    f90e:	bf00      	nop
    f910:	000101f1 	.word	0x000101f1

0000f914 <_ZN22FlapperValveController16StopValveAtLimitEv>:
void	FlapperValveController::StopValveAtLimit(void){
    f914:	b580      	push	{r7, lr}
    f916:	b082      	sub	sp, #8
    f918:	af00      	add	r7, sp, #0
    f91a:	6078      	str	r0, [r7, #4]
		if (closing)
    f91c:	687b      	ldr	r3, [r7, #4]
    f91e:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    f922:	2b00      	cmp	r3, #0
    f924:	d003      	beq.n	f92e <_ZN22FlapperValveController16StopValveAtLimitEv+0x1a>
		{
			closing=false;
    f926:	687b      	ldr	r3, [r7, #4]
    f928:	2200      	movs	r2, #0
    f92a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
		}
	
		StopMotor();
    f92e:	6878      	ldr	r0, [r7, #4]
    f930:	4b10      	ldr	r3, [pc, #64]	; (f974 <_ZN22FlapperValveController16StopValveAtLimitEv+0x60>)
    f932:	4798      	blx	r3
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
    f934:	4910      	ldr	r1, [pc, #64]	; (f978 <_ZN22FlapperValveController16StopValveAtLimitEv+0x64>)
    f936:	4811      	ldr	r0, [pc, #68]	; (f97c <_ZN22FlapperValveController16StopValveAtLimitEv+0x68>)
    f938:	4b11      	ldr	r3, [pc, #68]	; (f980 <_ZN22FlapperValveController16StopValveAtLimitEv+0x6c>)
    f93a:	4798      	blx	r3
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveFullyClossed));
    f93c:	4911      	ldr	r1, [pc, #68]	; (f984 <_ZN22FlapperValveController16StopValveAtLimitEv+0x70>)
    f93e:	480f      	ldr	r0, [pc, #60]	; (f97c <_ZN22FlapperValveController16StopValveAtLimitEv+0x68>)
    f940:	4b0f      	ldr	r3, [pc, #60]	; (f980 <_ZN22FlapperValveController16StopValveAtLimitEv+0x6c>)
    f942:	4798      	blx	r3
		timeoutFlapperValveController=false;
    f944:	687b      	ldr	r3, [r7, #4]
    f946:	2200      	movs	r2, #0
    f948:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		timeoutKeepControlling=false;
    f94c:	687b      	ldr	r3, [r7, #4]
    f94e:	2200      	movs	r2, #0
    f950:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		unLockTimeout=false;
    f954:	687b      	ldr	r3, [r7, #4]
    f956:	2200      	movs	r2, #0
    f958:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		paused=false;
    f95c:	687b      	ldr	r3, [r7, #4]
    f95e:	2200      	movs	r2, #0
    f960:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		keepControlling=false;
    f964:	687b      	ldr	r3, [r7, #4]
    f966:	2200      	movs	r2, #0
    f968:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
}
    f96c:	bf00      	nop
    f96e:	3708      	adds	r7, #8
    f970:	46bd      	mov	sp, r7
    f972:	bd80      	pop	{r7, pc}
    f974:	0000f8e9 	.word	0x0000f8e9
    f978:	0000efbd 	.word	0x0000efbd
    f97c:	20000f50 	.word	0x20000f50
    f980:	0000da2d 	.word	0x0000da2d
    f984:	0000efe9 	.word	0x0000efe9

0000f988 <_ZN22FlapperValveController18StopValveinBetweenEv>:

void FlapperValveController::StopValveinBetween(void){
    f988:	b580      	push	{r7, lr}
    f98a:	b082      	sub	sp, #8
    f98c:	af00      	add	r7, sp, #0
    f98e:	6078      	str	r0, [r7, #4]
		StopMotor();
    f990:	6878      	ldr	r0, [r7, #4]
    f992:	4b0d      	ldr	r3, [pc, #52]	; (f9c8 <_ZN22FlapperValveController18StopValveinBetweenEv+0x40>)
    f994:	4798      	blx	r3
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
    f996:	490d      	ldr	r1, [pc, #52]	; (f9cc <_ZN22FlapperValveController18StopValveinBetweenEv+0x44>)
    f998:	480d      	ldr	r0, [pc, #52]	; (f9d0 <_ZN22FlapperValveController18StopValveinBetweenEv+0x48>)
    f99a:	4b0e      	ldr	r3, [pc, #56]	; (f9d4 <_ZN22FlapperValveController18StopValveinBetweenEv+0x4c>)
    f99c:	4798      	blx	r3
		timeoutFlapperValveController=false;
    f99e:	687b      	ldr	r3, [r7, #4]
    f9a0:	2200      	movs	r2, #0
    f9a2:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		paused=false;
    f9a6:	687b      	ldr	r3, [r7, #4]
    f9a8:	2200      	movs	r2, #0
    f9aa:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		timeoutKeepControlling=false;
    f9ae:	687b      	ldr	r3, [r7, #4]
    f9b0:	2200      	movs	r2, #0
    f9b2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		keepControlling=true;
    f9b6:	687b      	ldr	r3, [r7, #4]
    f9b8:	2201      	movs	r2, #1
    f9ba:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
}
    f9be:	bf00      	nop
    f9c0:	3708      	adds	r7, #8
    f9c2:	46bd      	mov	sp, r7
    f9c4:	bd80      	pop	{r7, pc}
    f9c6:	bf00      	nop
    f9c8:	0000f8e9 	.word	0x0000f8e9
    f9cc:	0000efbd 	.word	0x0000efbd
    f9d0:	20000f50 	.word	0x20000f50
    f9d4:	0000da2d 	.word	0x0000da2d

0000f9d8 <_ZN22FlapperValveController16CorrectToleranceEh>:



uint8_t	FlapperValveController::CorrectTolerance(uint8_t sp){
    f9d8:	b580      	push	{r7, lr}
    f9da:	b084      	sub	sp, #16
    f9dc:	af00      	add	r7, sp, #0
    f9de:	6078      	str	r0, [r7, #4]
    f9e0:	460b      	mov	r3, r1
    f9e2:	70fb      	strb	r3, [r7, #3]
	float floatTolerance=FLAPPER_VALVE_CONTROL_LIMIT*((abs(127-sp)-128))/256;
    f9e4:	78fb      	ldrb	r3, [r7, #3]
    f9e6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
    f9ea:	2b00      	cmp	r3, #0
    f9ec:	dd0c      	ble.n	fa08 <_ZN22FlapperValveController16CorrectToleranceEh+0x30>
    f9ee:	78fb      	ldrb	r3, [r7, #3]
    f9f0:	43db      	mvns	r3, r3
    f9f2:	009b      	lsls	r3, r3, #2
    f9f4:	2b00      	cmp	r3, #0
    f9f6:	da00      	bge.n	f9fa <_ZN22FlapperValveController16CorrectToleranceEh+0x22>
    f9f8:	33ff      	adds	r3, #255	; 0xff
    f9fa:	121b      	asrs	r3, r3, #8
    f9fc:	461a      	mov	r2, r3
    f9fe:	4b10      	ldr	r3, [pc, #64]	; (fa40 <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
    fa00:	4610      	mov	r0, r2
    fa02:	4798      	blx	r3
    fa04:	4603      	mov	r3, r0
    fa06:	e00b      	b.n	fa20 <_ZN22FlapperValveController16CorrectToleranceEh+0x48>
    fa08:	78fb      	ldrb	r3, [r7, #3]
    fa0a:	3bff      	subs	r3, #255	; 0xff
    fa0c:	009b      	lsls	r3, r3, #2
    fa0e:	2b00      	cmp	r3, #0
    fa10:	da00      	bge.n	fa14 <_ZN22FlapperValveController16CorrectToleranceEh+0x3c>
    fa12:	33ff      	adds	r3, #255	; 0xff
    fa14:	121b      	asrs	r3, r3, #8
    fa16:	461a      	mov	r2, r3
    fa18:	4b09      	ldr	r3, [pc, #36]	; (fa40 <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
    fa1a:	4610      	mov	r0, r2
    fa1c:	4798      	blx	r3
    fa1e:	4603      	mov	r3, r0
    fa20:	60fb      	str	r3, [r7, #12]
	tolerance=(uint8_t)floatTolerance;
    fa22:	4b08      	ldr	r3, [pc, #32]	; (fa44 <_ZN22FlapperValveController16CorrectToleranceEh+0x6c>)
    fa24:	68f8      	ldr	r0, [r7, #12]
    fa26:	4798      	blx	r3
    fa28:	4603      	mov	r3, r0
    fa2a:	b2da      	uxtb	r2, r3
    fa2c:	687b      	ldr	r3, [r7, #4]
    fa2e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	return tolerance;
    fa32:	687b      	ldr	r3, [r7, #4]
    fa34:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
}
    fa38:	4618      	mov	r0, r3
    fa3a:	3710      	adds	r7, #16
    fa3c:	46bd      	mov	sp, r7
    fa3e:	bd80      	pop	{r7, pc}
    fa40:	00012bc1 	.word	0x00012bc1
    fa44:	00012f09 	.word	0x00012f09

0000fa48 <_ZN22FlapperValveController10StartMotorEv>:
uint8_t	FlapperValveController::StartMotor(){
    fa48:	b580      	push	{r7, lr}
    fa4a:	b082      	sub	sp, #8
    fa4c:	af00      	add	r7, sp, #0
    fa4e:	6078      	str	r0, [r7, #4]
	if (fv->controlOutputs.niAlcFvMotorEnable)
    fa50:	687b      	ldr	r3, [r7, #4]
    fa52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fa54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    fa58:	2b00      	cmp	r3, #0
    fa5a:	d008      	beq.n	fa6e <_ZN22FlapperValveController10StartMotorEv+0x26>
	{
		fv->SetEnable(false);
    fa5c:	687b      	ldr	r3, [r7, #4]
    fa5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fa60:	2100      	movs	r1, #0
    fa62:	4618      	mov	r0, r3
    fa64:	4b09      	ldr	r3, [pc, #36]	; (fa8c <_ZN22FlapperValveController10StartMotorEv+0x44>)
    fa66:	4798      	blx	r3
		delay_ms(10);
    fa68:	200a      	movs	r0, #10
    fa6a:	4b09      	ldr	r3, [pc, #36]	; (fa90 <_ZN22FlapperValveController10StartMotorEv+0x48>)
    fa6c:	4798      	blx	r3
	}
	
		
	fv->SetEnable(true);
    fa6e:	687b      	ldr	r3, [r7, #4]
    fa70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fa72:	2101      	movs	r1, #1
    fa74:	4618      	mov	r0, r3
    fa76:	4b05      	ldr	r3, [pc, #20]	; (fa8c <_ZN22FlapperValveController10StartMotorEv+0x44>)
    fa78:	4798      	blx	r3
	flapperValveIsMoving=true;
    fa7a:	687b      	ldr	r3, [r7, #4]
    fa7c:	2201      	movs	r2, #1
    fa7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	return 0;
    fa82:	2300      	movs	r3, #0
}
    fa84:	4618      	mov	r0, r3
    fa86:	3708      	adds	r7, #8
    fa88:	46bd      	mov	sp, r7
    fa8a:	bd80      	pop	{r7, pc}
    fa8c:	000101f1 	.word	0x000101f1
    fa90:	000027c9 	.word	0x000027c9

0000fa94 <_ZN22FlapperValveController15StopControllingEv>:
uint8_t FlapperValveController::StopControlling(void){
    fa94:	b580      	push	{r7, lr}
    fa96:	b082      	sub	sp, #8
    fa98:	af00      	add	r7, sp, #0
    fa9a:	6078      	str	r0, [r7, #4]
	StopMotor();
    fa9c:	6878      	ldr	r0, [r7, #4]
    fa9e:	4b0d      	ldr	r3, [pc, #52]	; (fad4 <_ZN22FlapperValveController15StopControllingEv+0x40>)
    faa0:	4798      	blx	r3
	timeoutKeepControlling=false;
    faa2:	687b      	ldr	r3, [r7, #4]
    faa4:	2200      	movs	r2, #0
    faa6:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	timeoutFlapperValveController=false;
    faaa:	687b      	ldr	r3, [r7, #4]
    faac:	2200      	movs	r2, #0
    faae:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	isControlling=false;
    fab2:	687b      	ldr	r3, [r7, #4]
    fab4:	2200      	movs	r2, #0
    fab6:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	keepControlling=false;
    faba:	687b      	ldr	r3, [r7, #4]
    fabc:	2200      	movs	r2, #0
    fabe:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	controllerEnabled=false;
    fac2:	687b      	ldr	r3, [r7, #4]
    fac4:	2200      	movs	r2, #0
    fac6:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	return 0;
    faca:	2300      	movs	r3, #0
}
    facc:	4618      	mov	r0, r3
    face:	3708      	adds	r7, #8
    fad0:	46bd      	mov	sp, r7
    fad2:	bd80      	pop	{r7, pc}
    fad4:	0000f8e9 	.word	0x0000f8e9

0000fad8 <_ZN22FlapperValveController16StartControllingEh>:

uint8_t	FlapperValveController::StartControlling(uint8_t sp){
    fad8:	b580      	push	{r7, lr}
    fada:	b082      	sub	sp, #8
    fadc:	af00      	add	r7, sp, #0
    fade:	6078      	str	r0, [r7, #4]
    fae0:	460b      	mov	r3, r1
    fae2:	70fb      	strb	r3, [r7, #3]
		setpoint=VerifySetpoint(sp);
    fae4:	78fb      	ldrb	r3, [r7, #3]
    fae6:	4619      	mov	r1, r3
    fae8:	6878      	ldr	r0, [r7, #4]
    faea:	4b25      	ldr	r3, [pc, #148]	; (fb80 <_ZN22FlapperValveController16StartControllingEh+0xa8>)
    faec:	4798      	blx	r3
    faee:	4603      	mov	r3, r0
    faf0:	461a      	mov	r2, r3
    faf2:	687b      	ldr	r3, [r7, #4]
    faf4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
		CorrectTolerance(setpoint);
    faf8:	687b      	ldr	r3, [r7, #4]
    fafa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    fafe:	4619      	mov	r1, r3
    fb00:	6878      	ldr	r0, [r7, #4]
    fb02:	4b20      	ldr	r3, [pc, #128]	; (fb84 <_ZN22FlapperValveController16StartControllingEh+0xac>)
    fb04:	4798      	blx	r3
		floatSetpoint=(float)setpoint;
    fb06:	687b      	ldr	r3, [r7, #4]
    fb08:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
    fb0c:	4b1e      	ldr	r3, [pc, #120]	; (fb88 <_ZN22FlapperValveController16StartControllingEh+0xb0>)
    fb0e:	4610      	mov	r0, r2
    fb10:	4798      	blx	r3
    fb12:	4602      	mov	r2, r0
    fb14:	687b      	ldr	r3, [r7, #4]
    fb16:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		timeoutFlapperValveController=false;
    fb1a:	687b      	ldr	r3, [r7, #4]
    fb1c:	2200      	movs	r2, #0
    fb1e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		timeoutKeepControlling=false;
    fb22:	687b      	ldr	r3, [r7, #4]
    fb24:	2200      	movs	r2, #0
    fb26:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		keepControlling=false;
    fb2a:	687b      	ldr	r3, [r7, #4]
    fb2c:	2200      	movs	r2, #0
    fb2e:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
		controllerEnabled=true;
    fb32:	687b      	ldr	r3, [r7, #4]
    fb34:	2201      	movs	r2, #1
    fb36:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		unLockTimeout=false;
    fb3a:	687b      	ldr	r3, [r7, #4]
    fb3c:	2200      	movs	r2, #0
    fb3e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT);
    fb42:	f242 7210 	movw	r2, #10000	; 0x2710
    fb46:	4911      	ldr	r1, [pc, #68]	; (fb8c <_ZN22FlapperValveController16StartControllingEh+0xb4>)
    fb48:	4811      	ldr	r0, [pc, #68]	; (fb90 <_ZN22FlapperValveController16StartControllingEh+0xb8>)
    fb4a:	4b12      	ldr	r3, [pc, #72]	; (fb94 <_ZN22FlapperValveController16StartControllingEh+0xbc>)
    fb4c:	4798      	blx	r3
		isControlling=true;
    fb4e:	687b      	ldr	r3, [r7, #4]
    fb50:	2201      	movs	r2, #1
    fb52:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		StartMovingOnDirection();
    fb56:	6878      	ldr	r0, [r7, #4]
    fb58:	4b0f      	ldr	r3, [pc, #60]	; (fb98 <_ZN22FlapperValveController16StartControllingEh+0xc0>)
    fb5a:	4798      	blx	r3
	//	while(!gotSetpoint&(!doPeriodicTask)){
			ControlMovement();
    fb5c:	6878      	ldr	r0, [r7, #4]
    fb5e:	4b0f      	ldr	r3, [pc, #60]	; (fb9c <_ZN22FlapperValveController16StartControllingEh+0xc4>)
    fb60:	4798      	blx	r3
	//	}	
		if (doPeriodicTask)
    fb62:	687b      	ldr	r3, [r7, #4]
    fb64:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
    fb68:	b2db      	uxtb	r3, r3
    fb6a:	2b00      	cmp	r3, #0
    fb6c:	d003      	beq.n	fb76 <_ZN22FlapperValveController16StartControllingEh+0x9e>
		{
			paused=true;
    fb6e:	687b      	ldr	r3, [r7, #4]
    fb70:	2201      	movs	r2, #1
    fb72:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		}
		return 0;
    fb76:	2300      	movs	r3, #0
	
}
    fb78:	4618      	mov	r0, r3
    fb7a:	3708      	adds	r7, #8
    fb7c:	46bd      	mov	sp, r7
    fb7e:	bd80      	pop	{r7, pc}
    fb80:	0000fba1 	.word	0x0000fba1
    fb84:	0000f9d9 	.word	0x0000f9d9
    fb88:	00012bb9 	.word	0x00012bb9
    fb8c:	0000efbd 	.word	0x0000efbd
    fb90:	20000f50 	.word	0x20000f50
    fb94:	0000da85 	.word	0x0000da85
    fb98:	0000f191 	.word	0x0000f191
    fb9c:	0000f439 	.word	0x0000f439

0000fba0 <_ZN22FlapperValveController14VerifySetpointEh>:
uint8_t FlapperValveController::VerifySetpoint(uint8_t sp){
    fba0:	b580      	push	{r7, lr}
    fba2:	b082      	sub	sp, #8
    fba4:	af00      	add	r7, sp, #0
    fba6:	6078      	str	r0, [r7, #4]
    fba8:	460b      	mov	r3, r1
    fbaa:	70fb      	strb	r3, [r7, #3]
	
	if (IsNBCMode())
    fbac:	6878      	ldr	r0, [r7, #4]
    fbae:	4b2a      	ldr	r3, [pc, #168]	; (fc58 <_ZN22FlapperValveController14VerifySetpointEh+0xb8>)
    fbb0:	4798      	blx	r3
    fbb2:	4603      	mov	r3, r0
    fbb4:	2b00      	cmp	r3, #0
    fbb6:	d004      	beq.n	fbc2 <_ZN22FlapperValveController14VerifySetpointEh+0x22>
	{
		setpoint=sp;
    fbb8:	687b      	ldr	r3, [r7, #4]
    fbba:	78fa      	ldrb	r2, [r7, #3]
    fbbc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    fbc0:	e043      	b.n	fc4a <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
	} 
	else
	{
		if (standAloneActivated)
    fbc2:	687b      	ldr	r3, [r7, #4]
    fbc4:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
    fbc8:	2b00      	cmp	r3, #0
    fbca:	d01f      	beq.n	fc0c <_ZN22FlapperValveController14VerifySetpointEh+0x6c>
		{
			standAlonePosition=0xff-parameters.flapperValveStandAloneMinimumPosition;
    fbcc:	687b      	ldr	r3, [r7, #4]
    fbce:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    fbd2:	43db      	mvns	r3, r3
    fbd4:	b2da      	uxtb	r2, r3
    fbd6:	687b      	ldr	r3, [r7, #4]
    fbd8:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			if (sp>(standAlonePosition))
    fbdc:	78fb      	ldrb	r3, [r7, #3]
    fbde:	687a      	ldr	r2, [r7, #4]
    fbe0:	f892 20bd 	ldrb.w	r2, [r2, #189]	; 0xbd
    fbe4:	4293      	cmp	r3, r2
    fbe6:	dd0c      	ble.n	fc02 <_ZN22FlapperValveController14VerifySetpointEh+0x62>
			{
				setpoint=standAlonePosition;
    fbe8:	687b      	ldr	r3, [r7, #4]
    fbea:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
    fbee:	687b      	ldr	r3, [r7, #4]
    fbf0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
				currentMaximum=standAlonePosition;
    fbf4:	687b      	ldr	r3, [r7, #4]
    fbf6:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
    fbfa:	687b      	ldr	r3, [r7, #4]
    fbfc:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
    fc00:	e023      	b.n	fc4a <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
    fc02:	687b      	ldr	r3, [r7, #4]
    fc04:	78fa      	ldrb	r2, [r7, #3]
    fc06:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    fc0a:	e01e      	b.n	fc4a <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
		}
		else
		{
			maximumPosition=0xff-parameters.flapperValveMinimumPosition;
    fc0c:	687b      	ldr	r3, [r7, #4]
    fc0e:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
    fc12:	43db      	mvns	r3, r3
    fc14:	b2da      	uxtb	r2, r3
    fc16:	687b      	ldr	r3, [r7, #4]
    fc18:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
			if (sp>maximumPosition)
    fc1c:	78fb      	ldrb	r3, [r7, #3]
    fc1e:	687a      	ldr	r2, [r7, #4]
    fc20:	f892 20bc 	ldrb.w	r2, [r2, #188]	; 0xbc
    fc24:	4293      	cmp	r3, r2
    fc26:	dd0c      	ble.n	fc42 <_ZN22FlapperValveController14VerifySetpointEh+0xa2>
			{
				setpoint=maximumPosition;
    fc28:	687b      	ldr	r3, [r7, #4]
    fc2a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
    fc2e:	687b      	ldr	r3, [r7, #4]
    fc30:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
				currentMaximum=maximumPosition;
    fc34:	687b      	ldr	r3, [r7, #4]
    fc36:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
    fc3a:	687b      	ldr	r3, [r7, #4]
    fc3c:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
    fc40:	e003      	b.n	fc4a <_ZN22FlapperValveController14VerifySetpointEh+0xaa>
			}
			else
			{
				setpoint=sp;
    fc42:	687b      	ldr	r3, [r7, #4]
    fc44:	78fa      	ldrb	r2, [r7, #3]
    fc46:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			}
		}
	}
	
	return setpoint;
    fc4a:	687b      	ldr	r3, [r7, #4]
    fc4c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
	
}
    fc50:	4618      	mov	r0, r3
    fc52:	3708      	adds	r7, #8
    fc54:	46bd      	mov	sp, r7
    fc56:	bd80      	pop	{r7, pc}
    fc58:	0000f8a1 	.word	0x0000f8a1

0000fc5c <_ZN22FlapperValveController16StartControllingEv>:
	currentPosition=fv->ReadActualPosition();
	//floatCurrentPosition=(float)currentPosition;
	return currentPosition;
}
	
uint8_t	FlapperValveController::StartControlling(void){
    fc5c:	b580      	push	{r7, lr}
    fc5e:	b082      	sub	sp, #8
    fc60:	af00      	add	r7, sp, #0
    fc62:	6078      	str	r0, [r7, #4]
	return	StartControlling(currentPosition);
    fc64:	687b      	ldr	r3, [r7, #4]
    fc66:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    fc6a:	4619      	mov	r1, r3
    fc6c:	6878      	ldr	r0, [r7, #4]
    fc6e:	4b03      	ldr	r3, [pc, #12]	; (fc7c <_ZN22FlapperValveController16StartControllingEv+0x20>)
    fc70:	4798      	blx	r3
    fc72:	4603      	mov	r3, r0
	
}
    fc74:	4618      	mov	r0, r3
    fc76:	3708      	adds	r7, #8
    fc78:	46bd      	mov	sp, r7
    fc7a:	bd80      	pop	{r7, pc}
    fc7c:	0000fad9 	.word	0x0000fad9

0000fc80 <_ZN22FlapperValveController15KeepControllingEh>:
uint8_t	FlapperValveController::KeepControlling(uint8_t restart){
    fc80:	b580      	push	{r7, lr}
    fc82:	b082      	sub	sp, #8
    fc84:	af00      	add	r7, sp, #0
    fc86:	6078      	str	r0, [r7, #4]
    fc88:	460b      	mov	r3, r1
    fc8a:	70fb      	strb	r3, [r7, #3]

	//setpoint=lastPosition;

		timeoutKeepControlling=false;
    fc8c:	687b      	ldr	r3, [r7, #4]
    fc8e:	2200      	movs	r2, #0
    fc90:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT/2);
		isControlling=true;
    fc94:	687b      	ldr	r3, [r7, #4]
    fc96:	2201      	movs	r2, #1
    fc98:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		StartMovingOnDirection();
    fc9c:	6878      	ldr	r0, [r7, #4]
    fc9e:	4b05      	ldr	r3, [pc, #20]	; (fcb4 <_ZN22FlapperValveController15KeepControllingEh+0x34>)
    fca0:	4798      	blx	r3
		keepControlling=false;
    fca2:	687b      	ldr	r3, [r7, #4]
    fca4:	2200      	movs	r2, #0
    fca6:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

	return 0;
    fcaa:	2300      	movs	r3, #0
	
}
    fcac:	4618      	mov	r0, r3
    fcae:	3708      	adds	r7, #8
    fcb0:	46bd      	mov	sp, r7
    fcb2:	bd80      	pop	{r7, pc}
    fcb4:	0000f191 	.word	0x0000f191

0000fcb8 <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

void	FlapperValveController::UpdateFlapperValveData(void){
    fcb8:	b590      	push	{r4, r7, lr}
    fcba:	b085      	sub	sp, #20
    fcbc:	af00      	add	r7, sp, #0
    fcbe:	60f8      	str	r0, [r7, #12]
	currentPosition=fv->ReadActualPosition();
    fcc0:	68fb      	ldr	r3, [r7, #12]
    fcc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fcc4:	4618      	mov	r0, r3
    fcc6:	4b2f      	ldr	r3, [pc, #188]	; (fd84 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xcc>)
    fcc8:	4798      	blx	r3
    fcca:	4603      	mov	r3, r0
    fccc:	461a      	mov	r2, r3
    fcce:	68fb      	ldr	r3, [r7, #12]
    fcd0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	dataStruct.actualPosition=currentPosition;
    fcd4:	68fb      	ldr	r3, [r7, #12]
    fcd6:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
    fcda:	68fb      	ldr	r3, [r7, #12]
    fcdc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	dataStruct.setPointPosition=setpoint;
    fce0:	68fb      	ldr	r3, [r7, #12]
    fce2:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
    fce6:	68fb      	ldr	r3, [r7, #12]
    fce8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	dataStruct.inputStatus=fv->ReadStatusInputs();
    fcec:	68fb      	ldr	r3, [r7, #12]
    fcee:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    fcf0:	68fc      	ldr	r4, [r7, #12]
    fcf2:	463b      	mov	r3, r7
    fcf4:	4611      	mov	r1, r2
    fcf6:	4618      	mov	r0, r3
    fcf8:	4b23      	ldr	r3, [pc, #140]	; (fd88 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd0>)
    fcfa:	4798      	blx	r3
    fcfc:	f104 0380 	add.w	r3, r4, #128	; 0x80
    fd00:	463a      	mov	r2, r7
    fd02:	6810      	ldr	r0, [r2, #0]
    fd04:	6018      	str	r0, [r3, #0]
    fd06:	8892      	ldrh	r2, [r2, #4]
    fd08:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=fv->ReadControlStatus();
    fd0a:	68fb      	ldr	r3, [r7, #12]
    fd0c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    fd0e:	68fc      	ldr	r4, [r7, #12]
    fd10:	463b      	mov	r3, r7
    fd12:	4611      	mov	r1, r2
    fd14:	4618      	mov	r0, r3
    fd16:	4b1d      	ldr	r3, [pc, #116]	; (fd8c <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd4>)
    fd18:	4798      	blx	r3
    fd1a:	f104 0386 	add.w	r3, r4, #134	; 0x86
    fd1e:	463a      	mov	r2, r7
    fd20:	6811      	ldr	r1, [r2, #0]
    fd22:	6852      	ldr	r2, [r2, #4]
    fd24:	6019      	str	r1, [r3, #0]
    fd26:	605a      	str	r2, [r3, #4]
	
	dataStruct.controllerStatus.isMoving=flapperValveIsMoving;
    fd28:	68fb      	ldr	r3, [r7, #12]
    fd2a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    fd2e:	b2da      	uxtb	r2, r3
    fd30:	68fb      	ldr	r3, [r7, #12]
    fd32:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	dataStruct.controllerStatus.isControlling=isControlling;
    fd36:	68fb      	ldr	r3, [r7, #12]
    fd38:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
    fd3c:	68fb      	ldr	r3, [r7, #12]
    fd3e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
    fd42:	68fb      	ldr	r3, [r7, #12]
    fd44:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
    fd48:	68fb      	ldr	r3, [r7, #12]
    fd4a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	if (standAloneActivated)
    fd4e:	68fb      	ldr	r3, [r7, #12]
    fd50:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
    fd54:	2b00      	cmp	r3, #0
    fd56:	d008      	beq.n	fd6a <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xb2>
	{
		currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
    fd58:	68fb      	ldr	r3, [r7, #12]
    fd5a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    fd5e:	43db      	mvns	r3, r3
    fd60:	b2da      	uxtb	r2, r3
    fd62:	68fb      	ldr	r3, [r7, #12]
    fd64:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	} 
	else
	{
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
	}
}
    fd68:	e007      	b.n	fd7a <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xc2>
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
    fd6a:	68fb      	ldr	r3, [r7, #12]
    fd6c:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
    fd70:	43db      	mvns	r3, r3
    fd72:	b2da      	uxtb	r2, r3
    fd74:	68fb      	ldr	r3, [r7, #12]
    fd76:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
}
    fd7a:	bf00      	nop
    fd7c:	3714      	adds	r7, #20
    fd7e:	46bd      	mov	sp, r7
    fd80:	bd90      	pop	{r4, r7, pc}
    fd82:	bf00      	nop
    fd84:	00010411 	.word	0x00010411
    fd88:	00010195 	.word	0x00010195
    fd8c:	00010139 	.word	0x00010139

0000fd90 <_ZN22FlapperValveController8SelftestEv>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
	return fv->ReadActualPosition();
}
bool	FlapperValveController::Selftest(void){
    fd90:	b580      	push	{r7, lr}
    fd92:	b084      	sub	sp, #16
    fd94:	af00      	add	r7, sp, #0
    fd96:	6078      	str	r0, [r7, #4]
		uint8_t localSetpoint=180;
    fd98:	23b4      	movs	r3, #180	; 0xb4
    fd9a:	73bb      	strb	r3, [r7, #14]
		parameters=defaultParameters;
    fd9c:	687b      	ldr	r3, [r7, #4]
    fd9e:	4a4d      	ldr	r2, [pc, #308]	; (fed4 <_ZN22FlapperValveController8SelftestEv+0x144>)
    fda0:	33bf      	adds	r3, #191	; 0xbf
    fda2:	8812      	ldrh	r2, [r2, #0]
    fda4:	801a      	strh	r2, [r3, #0]
		uint8_t localPosition;
	UpdateFlapperValveData();
    fda6:	6878      	ldr	r0, [r7, #4]
    fda8:	4b4b      	ldr	r3, [pc, #300]	; (fed8 <_ZN22FlapperValveController8SelftestEv+0x148>)
    fdaa:	4798      	blx	r3
	fv->SetEnable(false);
    fdac:	687b      	ldr	r3, [r7, #4]
    fdae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fdb0:	2100      	movs	r1, #0
    fdb2:	4618      	mov	r0, r3
    fdb4:	4b49      	ldr	r3, [pc, #292]	; (fedc <_ZN22FlapperValveController8SelftestEv+0x14c>)
    fdb6:	4798      	blx	r3
	fv->SetInvalidPosition(false);
    fdb8:	687b      	ldr	r3, [r7, #4]
    fdba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fdbc:	2100      	movs	r1, #0
    fdbe:	4618      	mov	r0, r3
    fdc0:	4b47      	ldr	r3, [pc, #284]	; (fee0 <_ZN22FlapperValveController8SelftestEv+0x150>)
    fdc2:	4798      	blx	r3
	fv->ClearMoveFault(false);
    fdc4:	687b      	ldr	r3, [r7, #4]
    fdc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fdc8:	2100      	movs	r1, #0
    fdca:	4618      	mov	r0, r3
    fdcc:	4b45      	ldr	r3, [pc, #276]	; (fee4 <_ZN22FlapperValveController8SelftestEv+0x154>)
    fdce:	4798      	blx	r3
	delay_ms(10);
    fdd0:	200a      	movs	r0, #10
    fdd2:	4b45      	ldr	r3, [pc, #276]	; (fee8 <_ZN22FlapperValveController8SelftestEv+0x158>)
    fdd4:	4798      	blx	r3
	fv->ClearMoveFault(true);
    fdd6:	687b      	ldr	r3, [r7, #4]
    fdd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fdda:	2101      	movs	r1, #1
    fddc:	4618      	mov	r0, r3
    fdde:	4b41      	ldr	r3, [pc, #260]	; (fee4 <_ZN22FlapperValveController8SelftestEv+0x154>)
    fde0:	4798      	blx	r3
	fv->WriteSetpoint(localSetpoint);
    fde2:	687b      	ldr	r3, [r7, #4]
    fde4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fde6:	7bba      	ldrb	r2, [r7, #14]
    fde8:	4611      	mov	r1, r2
    fdea:	4618      	mov	r0, r3
    fdec:	4b3f      	ldr	r3, [pc, #252]	; (feec <_ZN22FlapperValveController8SelftestEv+0x15c>)
    fdee:	4798      	blx	r3
	fv->SetDirection(false);
    fdf0:	687b      	ldr	r3, [r7, #4]
    fdf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fdf4:	2100      	movs	r1, #0
    fdf6:	4618      	mov	r0, r3
    fdf8:	4b3d      	ldr	r3, [pc, #244]	; (fef0 <_ZN22FlapperValveController8SelftestEv+0x160>)
    fdfa:	4798      	blx	r3
	if (fv->ReadActualPosition()>localSetpoint)
    fdfc:	687b      	ldr	r3, [r7, #4]
    fdfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fe00:	4618      	mov	r0, r3
    fe02:	4b3c      	ldr	r3, [pc, #240]	; (fef4 <_ZN22FlapperValveController8SelftestEv+0x164>)
    fe04:	4798      	blx	r3
    fe06:	4603      	mov	r3, r0
    fe08:	461a      	mov	r2, r3
    fe0a:	7bbb      	ldrb	r3, [r7, #14]
    fe0c:	429a      	cmp	r2, r3
    fe0e:	bfcc      	ite	gt
    fe10:	2301      	movgt	r3, #1
    fe12:	2300      	movle	r3, #0
    fe14:	b2db      	uxtb	r3, r3
    fe16:	2b00      	cmp	r3, #0
    fe18:	d006      	beq.n	fe28 <_ZN22FlapperValveController8SelftestEv+0x98>
	{
		fv->SetDirection(true);
    fe1a:	687b      	ldr	r3, [r7, #4]
    fe1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fe1e:	2101      	movs	r1, #1
    fe20:	4618      	mov	r0, r3
    fe22:	4b33      	ldr	r3, [pc, #204]	; (fef0 <_ZN22FlapperValveController8SelftestEv+0x160>)
    fe24:	4798      	blx	r3
    fe26:	e005      	b.n	fe34 <_ZN22FlapperValveController8SelftestEv+0xa4>
	}
	else
	{
		fv->SetDirection(false);
    fe28:	687b      	ldr	r3, [r7, #4]
    fe2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fe2c:	2100      	movs	r1, #0
    fe2e:	4618      	mov	r0, r3
    fe30:	4b2f      	ldr	r3, [pc, #188]	; (fef0 <_ZN22FlapperValveController8SelftestEv+0x160>)
    fe32:	4798      	blx	r3
	}
	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),10000);
    fe34:	f242 7210 	movw	r2, #10000	; 0x2710
    fe38:	492f      	ldr	r1, [pc, #188]	; (fef8 <_ZN22FlapperValveController8SelftestEv+0x168>)
    fe3a:	4830      	ldr	r0, [pc, #192]	; (fefc <_ZN22FlapperValveController8SelftestEv+0x16c>)
    fe3c:	4b30      	ldr	r3, [pc, #192]	; (ff00 <_ZN22FlapperValveController8SelftestEv+0x170>)
    fe3e:	4798      	blx	r3
	fv->SetEnable(true);
    fe40:	687b      	ldr	r3, [r7, #4]
    fe42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fe44:	2101      	movs	r1, #1
    fe46:	4618      	mov	r0, r3
    fe48:	4b24      	ldr	r3, [pc, #144]	; (fedc <_ZN22FlapperValveController8SelftestEv+0x14c>)
    fe4a:	4798      	blx	r3

	localPosition=fv->ReadActualPosition();
    fe4c:	687b      	ldr	r3, [r7, #4]
    fe4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fe50:	4618      	mov	r0, r3
    fe52:	4b28      	ldr	r3, [pc, #160]	; (fef4 <_ZN22FlapperValveController8SelftestEv+0x164>)
    fe54:	4798      	blx	r3
    fe56:	4603      	mov	r3, r0
    fe58:	73fb      	strb	r3, [r7, #15]
	timeoutFlapperValveController=false;
    fe5a:	687b      	ldr	r3, [r7, #4]
    fe5c:	2200      	movs	r2, #0
    fe5e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	while ((abs(localPosition-localSetpoint)>6)&(!timeoutFlapperValveController))
    fe62:	7bfa      	ldrb	r2, [r7, #15]
    fe64:	7bbb      	ldrb	r3, [r7, #14]
    fe66:	1ad3      	subs	r3, r2, r3
    fe68:	2b00      	cmp	r3, #0
    fe6a:	bfb8      	it	lt
    fe6c:	425b      	neglt	r3, r3
    fe6e:	2b06      	cmp	r3, #6
    fe70:	bfcc      	ite	gt
    fe72:	2301      	movgt	r3, #1
    fe74:	2300      	movle	r3, #0
    fe76:	b2db      	uxtb	r3, r3
    fe78:	461a      	mov	r2, r3
    fe7a:	687b      	ldr	r3, [r7, #4]
    fe7c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    fe80:	b2db      	uxtb	r3, r3
    fe82:	f083 0301 	eor.w	r3, r3, #1
    fe86:	b2db      	uxtb	r3, r3
    fe88:	4013      	ands	r3, r2
    fe8a:	2b00      	cmp	r3, #0
    fe8c:	bf14      	ite	ne
    fe8e:	2301      	movne	r3, #1
    fe90:	2300      	moveq	r3, #0
    fe92:	b2db      	uxtb	r3, r3
    fe94:	2b00      	cmp	r3, #0
    fe96:	d007      	beq.n	fea8 <_ZN22FlapperValveController8SelftestEv+0x118>

	{

		localPosition=fv->ReadActualPosition();
    fe98:	687b      	ldr	r3, [r7, #4]
    fe9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fe9c:	4618      	mov	r0, r3
    fe9e:	4b15      	ldr	r3, [pc, #84]	; (fef4 <_ZN22FlapperValveController8SelftestEv+0x164>)
    fea0:	4798      	blx	r3
    fea2:	4603      	mov	r3, r0
    fea4:	73fb      	strb	r3, [r7, #15]
	while ((abs(localPosition-localSetpoint)>6)&(!timeoutFlapperValveController))
    fea6:	e7dc      	b.n	fe62 <_ZN22FlapperValveController8SelftestEv+0xd2>

	}
	hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValveController));
    fea8:	4913      	ldr	r1, [pc, #76]	; (fef8 <_ZN22FlapperValveController8SelftestEv+0x168>)
    feaa:	4814      	ldr	r0, [pc, #80]	; (fefc <_ZN22FlapperValveController8SelftestEv+0x16c>)
    feac:	4b15      	ldr	r3, [pc, #84]	; (ff04 <_ZN22FlapperValveController8SelftestEv+0x174>)
    feae:	4798      	blx	r3
	fv->SetEnable(false);
    feb0:	687b      	ldr	r3, [r7, #4]
    feb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    feb4:	2100      	movs	r1, #0
    feb6:	4618      	mov	r0, r3
    feb8:	4b08      	ldr	r3, [pc, #32]	; (fedc <_ZN22FlapperValveController8SelftestEv+0x14c>)
    feba:	4798      	blx	r3
	return !timeoutFlapperValveController;
    febc:	687b      	ldr	r3, [r7, #4]
    febe:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    fec2:	b2db      	uxtb	r3, r3
    fec4:	f083 0301 	eor.w	r3, r3, #1
    fec8:	b2db      	uxtb	r3, r3
}
    feca:	4618      	mov	r0, r3
    fecc:	3710      	adds	r7, #16
    fece:	46bd      	mov	sp, r7
    fed0:	bd80      	pop	{r7, pc}
    fed2:	bf00      	nop
    fed4:	000138d8 	.word	0x000138d8
    fed8:	0000fcb9 	.word	0x0000fcb9
    fedc:	000101f1 	.word	0x000101f1
    fee0:	00010361 	.word	0x00010361
    fee4:	000102e9 	.word	0x000102e9
    fee8:	000027c9 	.word	0x000027c9
    feec:	000103d9 	.word	0x000103d9
    fef0:	00010271 	.word	0x00010271
    fef4:	00010411 	.word	0x00010411
    fef8:	0000efbd 	.word	0x0000efbd
    fefc:	20000f50 	.word	0x20000f50
    ff00:	0000da85 	.word	0x0000da85
    ff04:	0000da2d 	.word	0x0000da2d

0000ff08 <_Z41__static_initialization_and_destruction_0ii>:

    ff08:	b580      	push	{r7, lr}
    ff0a:	b082      	sub	sp, #8
    ff0c:	af00      	add	r7, sp, #0
    ff0e:	6078      	str	r0, [r7, #4]
    ff10:	6039      	str	r1, [r7, #0]
    ff12:	687b      	ldr	r3, [r7, #4]
    ff14:	2b01      	cmp	r3, #1
    ff16:	d115      	bne.n	ff44 <_Z41__static_initialization_and_destruction_0ii+0x3c>
    ff18:	683b      	ldr	r3, [r7, #0]
    ff1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ff1e:	4293      	cmp	r3, r2
    ff20:	d110      	bne.n	ff44 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static SingleFlapperValve_Class fvStatic(0);
    ff22:	2100      	movs	r1, #0
    ff24:	4809      	ldr	r0, [pc, #36]	; (ff4c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    ff26:	4b0a      	ldr	r3, [pc, #40]	; (ff50 <_Z41__static_initialization_and_destruction_0ii+0x48>)
    ff28:	4798      	blx	r3
    ff2a:	4a0a      	ldr	r2, [pc, #40]	; (ff54 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    ff2c:	490a      	ldr	r1, [pc, #40]	; (ff58 <_Z41__static_initialization_and_destruction_0ii+0x50>)
    ff2e:	4807      	ldr	r0, [pc, #28]	; (ff4c <_Z41__static_initialization_and_destruction_0ii+0x44>)
    ff30:	4b0a      	ldr	r3, [pc, #40]	; (ff5c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    ff32:	4798      	blx	r3
    ff34:	480a      	ldr	r0, [pc, #40]	; (ff60 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    ff36:	4b0b      	ldr	r3, [pc, #44]	; (ff64 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
    ff38:	4798      	blx	r3
    ff3a:	4a06      	ldr	r2, [pc, #24]	; (ff54 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
    ff3c:	490a      	ldr	r1, [pc, #40]	; (ff68 <_Z41__static_initialization_and_destruction_0ii+0x60>)
    ff3e:	4808      	ldr	r0, [pc, #32]	; (ff60 <_Z41__static_initialization_and_destruction_0ii+0x58>)
    ff40:	4b06      	ldr	r3, [pc, #24]	; (ff5c <_Z41__static_initialization_and_destruction_0ii+0x54>)
    ff42:	4798      	blx	r3
    ff44:	bf00      	nop
    ff46:	3708      	adds	r7, #8
    ff48:	46bd      	mov	sp, r7
    ff4a:	bd80      	pop	{r7, pc}
    ff4c:	20001294 	.word	0x20001294
    ff50:	0000ff81 	.word	0x0000ff81
    ff54:	20000000 	.word	0x20000000
    ff58:	0001001d 	.word	0x0001001d
    ff5c:	00012a41 	.word	0x00012a41
    ff60:	20001308 	.word	0x20001308
    ff64:	0000f029 	.word	0x0000f029
    ff68:	0000f0bd 	.word	0x0000f0bd

0000ff6c <_GLOBAL__sub_I_ptrFlapperValveController>:
    ff6c:	b580      	push	{r7, lr}
    ff6e:	af00      	add	r7, sp, #0
    ff70:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ff74:	2001      	movs	r0, #1
    ff76:	4b01      	ldr	r3, [pc, #4]	; (ff7c <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
    ff78:	4798      	blx	r3
    ff7a:	bd80      	pop	{r7, pc}
    ff7c:	0000ff09 	.word	0x0000ff09

0000ff80 <_ZN24SingleFlapperValve_ClassC1Eh>:
static void	RegulatorTimeout(const struct timer_task *const timer_task){
	ptrSingleFlapperValveClass->regulatorTimeout=true;
	asm("nop");
}

SingleFlapperValve_Class::SingleFlapperValve_Class(uint8_t _iD)
    ff80:	b580      	push	{r7, lr}
    ff82:	b082      	sub	sp, #8
    ff84:	af00      	add	r7, sp, #0
    ff86:	6078      	str	r0, [r7, #4]
    ff88:	460b      	mov	r3, r1
    ff8a:	70fb      	strb	r3, [r7, #3]
    ff8c:	687b      	ldr	r3, [r7, #4]
    ff8e:	4618      	mov	r0, r3
    ff90:	4b0c      	ldr	r3, [pc, #48]	; (ffc4 <_ZN24SingleFlapperValve_ClassC1Eh+0x44>)
    ff92:	4798      	blx	r3
{	
	valveID=_iD;
    ff94:	687b      	ldr	r3, [r7, #4]
    ff96:	78fa      	ldrb	r2, [r7, #3]
    ff98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	i2c=&i2cStatic;
    ff9c:	687b      	ldr	r3, [r7, #4]
    ff9e:	4a0a      	ldr	r2, [pc, #40]	; (ffc8 <_ZN24SingleFlapperValve_ClassC1Eh+0x48>)
    ffa0:	649a      	str	r2, [r3, #72]	; 0x48
	fv1StatusChanged=false;
    ffa2:	687b      	ldr	r3, [r7, #4]
    ffa4:	2200      	movs	r2, #0
    ffa6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ptrSingleFlapperValveClass=this;
    ffaa:	4a08      	ldr	r2, [pc, #32]	; (ffcc <_ZN24SingleFlapperValve_ClassC1Eh+0x4c>)
    ffac:	687b      	ldr	r3, [r7, #4]
    ffae:	6013      	str	r3, [r2, #0]
	isOK=false;
    ffb0:	687b      	ldr	r3, [r7, #4]
    ffb2:	2200      	movs	r2, #0
    ffb4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
} //FlapperValve_Class
    ffb8:	687b      	ldr	r3, [r7, #4]
    ffba:	4618      	mov	r0, r3
    ffbc:	3708      	adds	r7, #8
    ffbe:	46bd      	mov	sp, r7
    ffc0:	bd80      	pop	{r7, pc}
    ffc2:	bf00      	nop
    ffc4:	00010f21 	.word	0x00010f21
    ffc8:	200013d0 	.word	0x200013d0
    ffcc:	200013cc 	.word	0x200013cc

0000ffd0 <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
    ffd0:	b580      	push	{r7, lr}
    ffd2:	b082      	sub	sp, #8
    ffd4:	af00      	add	r7, sp, #0
    ffd6:	6078      	str	r0, [r7, #4]
    ffd8:	687b      	ldr	r3, [r7, #4]
    ffda:	4618      	mov	r0, r3
    ffdc:	4b0c      	ldr	r3, [pc, #48]	; (10010 <STACK_SIZE+0x10>)
    ffde:	4798      	blx	r3
{
	valveID=0;
    ffe0:	687b      	ldr	r3, [r7, #4]
    ffe2:	2200      	movs	r2, #0
    ffe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	i2c=&i2cStatic;
    ffe8:	687b      	ldr	r3, [r7, #4]
    ffea:	4a0a      	ldr	r2, [pc, #40]	; (10014 <STACK_SIZE+0x14>)
    ffec:	649a      	str	r2, [r3, #72]	; 0x48
	fv1StatusChanged=false;
    ffee:	687b      	ldr	r3, [r7, #4]
    fff0:	2200      	movs	r2, #0
    fff2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ptrSingleFlapperValveClass=this;
    fff6:	4a08      	ldr	r2, [pc, #32]	; (10018 <STACK_SIZE+0x18>)
    fff8:	687b      	ldr	r3, [r7, #4]
    fffa:	6013      	str	r3, [r2, #0]
	isOK=false;
    fffc:	687b      	ldr	r3, [r7, #4]
    fffe:	2200      	movs	r2, #0
   10000:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
} //FlapperValve_Class
   10004:	687b      	ldr	r3, [r7, #4]
   10006:	4618      	mov	r0, r3
   10008:	3708      	adds	r7, #8
   1000a:	46bd      	mov	sp, r7
   1000c:	bd80      	pop	{r7, pc}
   1000e:	bf00      	nop
   10010:	00010f21 	.word	0x00010f21
   10014:	200013d0 	.word	0x200013d0
   10018:	200013cc 	.word	0x200013cc

0001001c <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
   1001c:	b580      	push	{r7, lr}
   1001e:	b082      	sub	sp, #8
   10020:	af00      	add	r7, sp, #0
   10022:	6078      	str	r0, [r7, #4]
   10024:	687b      	ldr	r3, [r7, #4]
   10026:	4618      	mov	r0, r3
   10028:	4b03      	ldr	r3, [pc, #12]	; (10038 <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
   1002a:	4798      	blx	r3
{
} //~FlapperValve_Class
   1002c:	687b      	ldr	r3, [r7, #4]
   1002e:	4618      	mov	r0, r3
   10030:	3708      	adds	r7, #8
   10032:	46bd      	mov	sp, r7
   10034:	bd80      	pop	{r7, pc}
   10036:	bf00      	nop
   10038:	00010f35 	.word	0x00010f35

0001003c <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
   1003c:	b580      	push	{r7, lr}
   1003e:	b082      	sub	sp, #8
   10040:	af00      	add	r7, sp, #0
   10042:	6078      	str	r0, [r7, #4]
	
		i2c->Init();
   10044:	687b      	ldr	r3, [r7, #4]
   10046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10048:	4618      	mov	r0, r3
   1004a:	4b19      	ldr	r3, [pc, #100]	; (100b0 <_ZN24SingleFlapperValve_Class4InitEv+0x74>)
   1004c:	4798      	blx	r3

		if (i2c->isOK)
   1004e:	687b      	ldr	r3, [r7, #4]
   10050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10052:	7a5b      	ldrb	r3, [r3, #9]
   10054:	b2db      	uxtb	r3, r3
   10056:	2b00      	cmp	r3, #0
   10058:	d01b      	beq.n	10092 <_ZN24SingleFlapperValve_Class4InitEv+0x56>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
   1005a:	687b      	ldr	r3, [r7, #4]
   1005c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
   10060:	4619      	mov	r1, r3
   10062:	6878      	ldr	r0, [r7, #4]
   10064:	4b13      	ldr	r3, [pc, #76]	; (100b4 <_ZN24SingleFlapperValve_Class4InitEv+0x78>)
   10066:	4798      	blx	r3
			expanders[0]->SetPortInput();
   10068:	687b      	ldr	r3, [r7, #4]
   1006a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1006c:	4618      	mov	r0, r3
   1006e:	4b12      	ldr	r3, [pc, #72]	; (100b8 <_ZN24SingleFlapperValve_Class4InitEv+0x7c>)
   10070:	4798      	blx	r3
			expanders[1]->SetPortInput(0x80);
   10072:	687b      	ldr	r3, [r7, #4]
   10074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10076:	2180      	movs	r1, #128	; 0x80
   10078:	4618      	mov	r0, r3
   1007a:	4b10      	ldr	r3, [pc, #64]	; (100bc <_ZN24SingleFlapperValve_Class4InitEv+0x80>)
   1007c:	4798      	blx	r3
			expanders[2]->SetPortOutput();
   1007e:	687b      	ldr	r3, [r7, #4]
   10080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   10082:	4618      	mov	r0, r3
   10084:	4b0e      	ldr	r3, [pc, #56]	; (100c0 <_ZN24SingleFlapperValve_Class4InitEv+0x84>)
   10086:	4798      	blx	r3
			expanders[3]->SetPortInput();
   10088:	687b      	ldr	r3, [r7, #4]
   1008a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1008c:	4618      	mov	r0, r3
   1008e:	4b0a      	ldr	r3, [pc, #40]	; (100b8 <_ZN24SingleFlapperValve_Class4InitEv+0x7c>)
   10090:	4798      	blx	r3
							
		}
		isOK=i2c->isOK;
   10092:	687b      	ldr	r3, [r7, #4]
   10094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10096:	7a5b      	ldrb	r3, [r3, #9]
   10098:	b2da      	uxtb	r2, r3
   1009a:	687b      	ldr	r3, [r7, #4]
   1009c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		
		return isOK;
   100a0:	687b      	ldr	r3, [r7, #4]
   100a2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   100a6:	b2db      	uxtb	r3, r3
// 			asm("nop");
// 		}
// 		return isOK;	


}
   100a8:	4618      	mov	r0, r3
   100aa:	3708      	adds	r7, #8
   100ac:	46bd      	mov	sp, r7
   100ae:	bd80      	pop	{r7, pc}
   100b0:	00010ddd 	.word	0x00010ddd
   100b4:	000100c5 	.word	0x000100c5
   100b8:	000112e5 	.word	0x000112e5
   100bc:	00011329 	.word	0x00011329
   100c0:	0001139d 	.word	0x0001139d

000100c4 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
   100c4:	b580      	push	{r7, lr}
   100c6:	b084      	sub	sp, #16
   100c8:	af00      	add	r7, sp, #0
   100ca:	6078      	str	r0, [r7, #4]
   100cc:	460b      	mov	r3, r1
   100ce:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   100d0:	2300      	movs	r3, #0
   100d2:	60fb      	str	r3, [r7, #12]
   100d4:	68fb      	ldr	r3, [r7, #12]
   100d6:	2b03      	cmp	r3, #3
   100d8:	dc24      	bgt.n	10124 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x60>
	{
		currentExpander=&(expandersStatic[i]);
   100da:	68fa      	ldr	r2, [r7, #12]
   100dc:	4613      	mov	r3, r2
   100de:	00db      	lsls	r3, r3, #3
   100e0:	1a9b      	subs	r3, r3, r2
   100e2:	009b      	lsls	r3, r3, #2
   100e4:	4a12      	ldr	r2, [pc, #72]	; (10130 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x6c>)
   100e6:	441a      	add	r2, r3
   100e8:	687b      	ldr	r3, [r7, #4]
   100ea:	665a      	str	r2, [r3, #100]	; 0x64
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
   100ec:	687b      	ldr	r3, [r7, #4]
   100ee:	6e58      	ldr	r0, [r3, #100]	; 0x64
   100f0:	68fb      	ldr	r3, [r7, #12]
   100f2:	b2da      	uxtb	r2, r3
   100f4:	78fb      	ldrb	r3, [r7, #3]
   100f6:	009b      	lsls	r3, r3, #2
   100f8:	b2db      	uxtb	r3, r3
   100fa:	4413      	add	r3, r2
   100fc:	b2db      	uxtb	r3, r3
   100fe:	3320      	adds	r3, #32
   10100:	b2d9      	uxtb	r1, r3
   10102:	687b      	ldr	r3, [r7, #4]
   10104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10106:	461a      	mov	r2, r3
   10108:	4b0a      	ldr	r3, [pc, #40]	; (10134 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x70>)
   1010a:	4798      	blx	r3
		expanders[i]=currentExpander;
   1010c:	687b      	ldr	r3, [r7, #4]
   1010e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   10110:	6879      	ldr	r1, [r7, #4]
   10112:	68fb      	ldr	r3, [r7, #12]
   10114:	3314      	adds	r3, #20
   10116:	009b      	lsls	r3, r3, #2
   10118:	440b      	add	r3, r1
   1011a:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   1011c:	68fb      	ldr	r3, [r7, #12]
   1011e:	3301      	adds	r3, #1
   10120:	60fb      	str	r3, [r7, #12]
   10122:	e7d7      	b.n	100d4 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
   10124:	2300      	movs	r3, #0
}
   10126:	4618      	mov	r0, r3
   10128:	3710      	adds	r7, #16
   1012a:	46bd      	mov	sp, r7
   1012c:	bd80      	pop	{r7, pc}
   1012e:	bf00      	nop
   10130:	200013e4 	.word	0x200013e4
   10134:	0001113f 	.word	0x0001113f

00010138 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
   10138:	b590      	push	{r4, r7, lr}
   1013a:	b085      	sub	sp, #20
   1013c:	af00      	add	r7, sp, #0
   1013e:	60f8      	str	r0, [r7, #12]
   10140:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
   10142:	68bb      	ldr	r3, [r7, #8]
   10144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10146:	4618      	mov	r0, r3
   10148:	4b10      	ldr	r3, [pc, #64]	; (1018c <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
   1014a:	4798      	blx	r3
   1014c:	4603      	mov	r3, r0
   1014e:	461a      	mov	r2, r3
   10150:	68bb      	ldr	r3, [r7, #8]
   10152:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	controlOutputs=FillControlOutputs(value);
   10156:	68b9      	ldr	r1, [r7, #8]
   10158:	68bb      	ldr	r3, [r7, #8]
   1015a:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
   1015e:	68bc      	ldr	r4, [r7, #8]
   10160:	463b      	mov	r3, r7
   10162:	4618      	mov	r0, r3
   10164:	4b0a      	ldr	r3, [pc, #40]	; (10190 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x58>)
   10166:	4798      	blx	r3
   10168:	f104 033a 	add.w	r3, r4, #58	; 0x3a
   1016c:	463a      	mov	r2, r7
   1016e:	6811      	ldr	r1, [r2, #0]
   10170:	6852      	ldr	r2, [r2, #4]
   10172:	6019      	str	r1, [r3, #0]
   10174:	605a      	str	r2, [r3, #4]
	return controlOutputs;
   10176:	68fa      	ldr	r2, [r7, #12]
   10178:	68bb      	ldr	r3, [r7, #8]
   1017a:	333a      	adds	r3, #58	; 0x3a
   1017c:	6819      	ldr	r1, [r3, #0]
   1017e:	685b      	ldr	r3, [r3, #4]
   10180:	6011      	str	r1, [r2, #0]
   10182:	6053      	str	r3, [r2, #4]
}
   10184:	68f8      	ldr	r0, [r7, #12]
   10186:	3714      	adds	r7, #20
   10188:	46bd      	mov	sp, r7
   1018a:	bd90      	pop	{r4, r7, pc}
   1018c:	00011225 	.word	0x00011225
   10190:	00011031 	.word	0x00011031

00010194 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
   10194:	b590      	push	{r4, r7, lr}
   10196:	b085      	sub	sp, #20
   10198:	af00      	add	r7, sp, #0
   1019a:	60f8      	str	r0, [r7, #12]
   1019c:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
   1019e:	68bb      	ldr	r3, [r7, #8]
   101a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   101a2:	4618      	mov	r0, r3
   101a4:	4b10      	ldr	r3, [pc, #64]	; (101e8 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
   101a6:	4798      	blx	r3
   101a8:	4603      	mov	r3, r0
   101aa:	461a      	mov	r2, r3
   101ac:	68bb      	ldr	r3, [r7, #8]
   101ae:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	statusInputs=FillInputStatus(value);
   101b2:	68b9      	ldr	r1, [r7, #8]
   101b4:	68bb      	ldr	r3, [r7, #8]
   101b6:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
   101ba:	68bc      	ldr	r4, [r7, #8]
   101bc:	463b      	mov	r3, r7
   101be:	4618      	mov	r0, r3
   101c0:	4b0a      	ldr	r3, [pc, #40]	; (101ec <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
   101c2:	4798      	blx	r3
   101c4:	f104 0342 	add.w	r3, r4, #66	; 0x42
   101c8:	463a      	mov	r2, r7
   101ca:	6811      	ldr	r1, [r2, #0]
   101cc:	6019      	str	r1, [r3, #0]
   101ce:	8892      	ldrh	r2, [r2, #4]
   101d0:	809a      	strh	r2, [r3, #4]
	return statusInputs;
   101d2:	68fa      	ldr	r2, [r7, #12]
   101d4:	68bb      	ldr	r3, [r7, #8]
   101d6:	3342      	adds	r3, #66	; 0x42
   101d8:	6819      	ldr	r1, [r3, #0]
   101da:	6011      	str	r1, [r2, #0]
   101dc:	889b      	ldrh	r3, [r3, #4]
   101de:	8093      	strh	r3, [r2, #4]
}
   101e0:	68f8      	ldr	r0, [r7, #12]
   101e2:	3714      	adds	r7, #20
   101e4:	46bd      	mov	sp, r7
   101e6:	bd90      	pop	{r4, r7, pc}
   101e8:	00011225 	.word	0x00011225
   101ec:	00010fdd 	.word	0x00010fdd

000101f0 <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
   101f0:	b580      	push	{r7, lr}
   101f2:	b082      	sub	sp, #8
   101f4:	af00      	add	r7, sp, #0
   101f6:	6078      	str	r0, [r7, #4]
   101f8:	460b      	mov	r3, r1
   101fa:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   101fc:	687b      	ldr	r3, [r7, #4]
   101fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10200:	4618      	mov	r0, r3
   10202:	4b19      	ldr	r3, [pc, #100]	; (10268 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
   10204:	4798      	blx	r3
   10206:	4603      	mov	r3, r0
   10208:	461a      	mov	r2, r3
   1020a:	687b      	ldr	r3, [r7, #4]
   1020c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value&0xfe:value|0x01;
   10210:	78fb      	ldrb	r3, [r7, #3]
   10212:	2b00      	cmp	r3, #0
   10214:	d006      	beq.n	10224 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
   10216:	687b      	ldr	r3, [r7, #4]
   10218:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   1021c:	f023 0301 	bic.w	r3, r3, #1
   10220:	b2db      	uxtb	r3, r3
   10222:	e005      	b.n	10230 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
   10224:	687b      	ldr	r3, [r7, #4]
   10226:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   1022a:	f043 0301 	orr.w	r3, r3, #1
   1022e:	b2db      	uxtb	r3, r3
   10230:	687a      	ldr	r2, [r7, #4]
   10232:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	controlOutputs.niAlcFvMotorEnable=b;
   10236:	687b      	ldr	r3, [r7, #4]
   10238:	78fa      	ldrb	r2, [r7, #3]
   1023a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	value=expanders[1]->WriteGPIORegister(value);
   1023e:	687b      	ldr	r3, [r7, #4]
   10240:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   10242:	687b      	ldr	r3, [r7, #4]
   10244:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10248:	4619      	mov	r1, r3
   1024a:	4610      	mov	r0, r2
   1024c:	4b07      	ldr	r3, [pc, #28]	; (1026c <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
   1024e:	4798      	blx	r3
   10250:	4603      	mov	r3, r0
   10252:	461a      	mov	r2, r3
   10254:	687b      	ldr	r3, [r7, #4]
   10256:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   1025a:	687b      	ldr	r3, [r7, #4]
   1025c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   10260:	4618      	mov	r0, r3
   10262:	3708      	adds	r7, #8
   10264:	46bd      	mov	sp, r7
   10266:	bd80      	pop	{r7, pc}
   10268:	00011225 	.word	0x00011225
   1026c:	000112a9 	.word	0x000112a9

00010270 <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
   10270:	b580      	push	{r7, lr}
   10272:	b082      	sub	sp, #8
   10274:	af00      	add	r7, sp, #0
   10276:	6078      	str	r0, [r7, #4]
   10278:	460b      	mov	r3, r1
   1027a:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   1027c:	687b      	ldr	r3, [r7, #4]
   1027e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10280:	4618      	mov	r0, r3
   10282:	4b17      	ldr	r3, [pc, #92]	; (102e0 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x70>)
   10284:	4798      	blx	r3
   10286:	4603      	mov	r3, r0
   10288:	461a      	mov	r2, r3
   1028a:	687b      	ldr	r3, [r7, #4]
   1028c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x20:value&0xdf;
   10290:	78fb      	ldrb	r3, [r7, #3]
   10292:	2b00      	cmp	r3, #0
   10294:	d006      	beq.n	102a4 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
   10296:	687b      	ldr	r3, [r7, #4]
   10298:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   1029c:	f043 0320 	orr.w	r3, r3, #32
   102a0:	b2db      	uxtb	r3, r3
   102a2:	e005      	b.n	102b0 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x40>
   102a4:	687b      	ldr	r3, [r7, #4]
   102a6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   102aa:	f023 0320 	bic.w	r3, r3, #32
   102ae:	b2db      	uxtb	r3, r3
   102b0:	687a      	ldr	r2, [r7, #4]
   102b2:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
   102b6:	687b      	ldr	r3, [r7, #4]
   102b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   102ba:	687b      	ldr	r3, [r7, #4]
   102bc:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   102c0:	4619      	mov	r1, r3
   102c2:	4610      	mov	r0, r2
   102c4:	4b07      	ldr	r3, [pc, #28]	; (102e4 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x74>)
   102c6:	4798      	blx	r3
   102c8:	4603      	mov	r3, r0
   102ca:	461a      	mov	r2, r3
   102cc:	687b      	ldr	r3, [r7, #4]
   102ce:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   102d2:	687b      	ldr	r3, [r7, #4]
   102d4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   102d8:	4618      	mov	r0, r3
   102da:	3708      	adds	r7, #8
   102dc:	46bd      	mov	sp, r7
   102de:	bd80      	pop	{r7, pc}
   102e0:	00011225 	.word	0x00011225
   102e4:	000112a9 	.word	0x000112a9

000102e8 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
   102e8:	b580      	push	{r7, lr}
   102ea:	b082      	sub	sp, #8
   102ec:	af00      	add	r7, sp, #0
   102ee:	6078      	str	r0, [r7, #4]
   102f0:	460b      	mov	r3, r1
   102f2:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   102f4:	687b      	ldr	r3, [r7, #4]
   102f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   102f8:	4618      	mov	r0, r3
   102fa:	4b17      	ldr	r3, [pc, #92]	; (10358 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
   102fc:	4798      	blx	r3
   102fe:	4603      	mov	r3, r0
   10300:	461a      	mov	r2, r3
   10302:	687b      	ldr	r3, [r7, #4]
   10304:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x40:value&0xbf;
   10308:	78fb      	ldrb	r3, [r7, #3]
   1030a:	2b00      	cmp	r3, #0
   1030c:	d006      	beq.n	1031c <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
   1030e:	687b      	ldr	r3, [r7, #4]
   10310:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10318:	b2db      	uxtb	r3, r3
   1031a:	e005      	b.n	10328 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
   1031c:	687b      	ldr	r3, [r7, #4]
   1031e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   10326:	b2db      	uxtb	r3, r3
   10328:	687a      	ldr	r2, [r7, #4]
   1032a:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
   1032e:	687b      	ldr	r3, [r7, #4]
   10330:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   10332:	687b      	ldr	r3, [r7, #4]
   10334:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10338:	4619      	mov	r1, r3
   1033a:	4610      	mov	r0, r2
   1033c:	4b07      	ldr	r3, [pc, #28]	; (1035c <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
   1033e:	4798      	blx	r3
   10340:	4603      	mov	r3, r0
   10342:	461a      	mov	r2, r3
   10344:	687b      	ldr	r3, [r7, #4]
   10346:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   1034a:	687b      	ldr	r3, [r7, #4]
   1034c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   10350:	4618      	mov	r0, r3
   10352:	3708      	adds	r7, #8
   10354:	46bd      	mov	sp, r7
   10356:	bd80      	pop	{r7, pc}
   10358:	00011225 	.word	0x00011225
   1035c:	000112a9 	.word	0x000112a9

00010360 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb>:

uint8_t SingleFlapperValve_Class::SetInvalidPosition(bool b){
   10360:	b580      	push	{r7, lr}
   10362:	b082      	sub	sp, #8
   10364:	af00      	add	r7, sp, #0
   10366:	6078      	str	r0, [r7, #4]
   10368:	460b      	mov	r3, r1
   1036a:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   1036c:	687b      	ldr	r3, [r7, #4]
   1036e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10370:	4618      	mov	r0, r3
   10372:	4b17      	ldr	r3, [pc, #92]	; (103d0 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x70>)
   10374:	4798      	blx	r3
   10376:	4603      	mov	r3, r0
   10378:	461a      	mov	r2, r3
   1037a:	687b      	ldr	r3, [r7, #4]
   1037c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x04:value&0xfb;
   10380:	78fb      	ldrb	r3, [r7, #3]
   10382:	2b00      	cmp	r3, #0
   10384:	d006      	beq.n	10394 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x34>
   10386:	687b      	ldr	r3, [r7, #4]
   10388:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   1038c:	f043 0304 	orr.w	r3, r3, #4
   10390:	b2db      	uxtb	r3, r3
   10392:	e005      	b.n	103a0 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x40>
   10394:	687b      	ldr	r3, [r7, #4]
   10396:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   1039a:	f023 0304 	bic.w	r3, r3, #4
   1039e:	b2db      	uxtb	r3, r3
   103a0:	687a      	ldr	r2, [r7, #4]
   103a2:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
   103a6:	687b      	ldr	r3, [r7, #4]
   103a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   103aa:	687b      	ldr	r3, [r7, #4]
   103ac:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   103b0:	4619      	mov	r1, r3
   103b2:	4610      	mov	r0, r2
   103b4:	4b07      	ldr	r3, [pc, #28]	; (103d4 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x74>)
   103b6:	4798      	blx	r3
   103b8:	4603      	mov	r3, r0
   103ba:	461a      	mov	r2, r3
   103bc:	687b      	ldr	r3, [r7, #4]
   103be:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   103c2:	687b      	ldr	r3, [r7, #4]
   103c4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   103c8:	4618      	mov	r0, r3
   103ca:	3708      	adds	r7, #8
   103cc:	46bd      	mov	sp, r7
   103ce:	bd80      	pop	{r7, pc}
   103d0:	00011225 	.word	0x00011225
   103d4:	000112a9 	.word	0x000112a9

000103d8 <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
   103d8:	b580      	push	{r7, lr}
   103da:	b082      	sub	sp, #8
   103dc:	af00      	add	r7, sp, #0
   103de:	6078      	str	r0, [r7, #4]
   103e0:	460b      	mov	r3, r1
   103e2:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
   103e4:	687b      	ldr	r3, [r7, #4]
   103e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   103e8:	78fa      	ldrb	r2, [r7, #3]
   103ea:	4611      	mov	r1, r2
   103ec:	4618      	mov	r0, r3
   103ee:	4b07      	ldr	r3, [pc, #28]	; (1040c <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
   103f0:	4798      	blx	r3
   103f2:	4603      	mov	r3, r0
   103f4:	461a      	mov	r2, r3
   103f6:	687b      	ldr	r3, [r7, #4]
   103f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
   103fc:	687b      	ldr	r3, [r7, #4]
   103fe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
}
   10402:	4618      	mov	r0, r3
   10404:	3708      	adds	r7, #8
   10406:	46bd      	mov	sp, r7
   10408:	bd80      	pop	{r7, pc}
   1040a:	bf00      	nop
   1040c:	000112a9 	.word	0x000112a9

00010410 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
	return setpointPosition;
}
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
   10410:	b580      	push	{r7, lr}
   10412:	b082      	sub	sp, #8
   10414:	af00      	add	r7, sp, #0
   10416:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
   10418:	687b      	ldr	r3, [r7, #4]
   1041a:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
   1041e:	687b      	ldr	r3, [r7, #4]
   10420:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
   10424:	687b      	ldr	r3, [r7, #4]
   10426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   10428:	4618      	mov	r0, r3
   1042a:	4b13      	ldr	r3, [pc, #76]	; (10478 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x68>)
   1042c:	4798      	blx	r3
   1042e:	4603      	mov	r3, r0
   10430:	461a      	mov	r2, r3
   10432:	687b      	ldr	r3, [r7, #4]
   10434:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	if (actualPosition>200)
   10438:	687b      	ldr	r3, [r7, #4]
   1043a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   1043e:	2bc8      	cmp	r3, #200	; 0xc8
   10440:	dd04      	ble.n	1044c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x3c>
	{
		statusFlapperValve=RECYCLE_MODE;
   10442:	687b      	ldr	r3, [r7, #4]
   10444:	2202      	movs	r2, #2
   10446:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   1044a:	e00d      	b.n	10468 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x58>
	}else if (actualPosition>100)
   1044c:	687b      	ldr	r3, [r7, #4]
   1044e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   10452:	2b64      	cmp	r3, #100	; 0x64
   10454:	dd04      	ble.n	10460 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x50>
	{
		statusFlapperValve=INTERM_MODE;
   10456:	687b      	ldr	r3, [r7, #4]
   10458:	2201      	movs	r2, #1
   1045a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   1045e:	e003      	b.n	10468 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x58>
	} 
	else
	{
		statusFlapperValve=FRESHAIR_MODE;
   10460:	687b      	ldr	r3, [r7, #4]
   10462:	2200      	movs	r2, #0
   10464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}
	return actualPosition;
   10468:	687b      	ldr	r3, [r7, #4]
   1046a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
}
   1046e:	4618      	mov	r0, r3
   10470:	3708      	adds	r7, #8
   10472:	46bd      	mov	sp, r7
   10474:	bd80      	pop	{r7, pc}
   10476:	bf00      	nop
   10478:	00011225 	.word	0x00011225

0001047c <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_EXPANDERS];
   1047c:	b590      	push	{r4, r7, lr}
   1047e:	b083      	sub	sp, #12
   10480:	af00      	add	r7, sp, #0
   10482:	6078      	str	r0, [r7, #4]
   10484:	4c05      	ldr	r4, [pc, #20]	; (1049c <__tcf_0+0x20>)
   10486:	4b06      	ldr	r3, [pc, #24]	; (104a0 <__tcf_0+0x24>)
   10488:	429c      	cmp	r4, r3
   1048a:	d004      	beq.n	10496 <__tcf_0+0x1a>
   1048c:	3c1c      	subs	r4, #28
   1048e:	4620      	mov	r0, r4
   10490:	4b04      	ldr	r3, [pc, #16]	; (104a4 <__tcf_0+0x28>)
   10492:	4798      	blx	r3
   10494:	e7f7      	b.n	10486 <__tcf_0+0xa>
   10496:	370c      	adds	r7, #12
   10498:	46bd      	mov	sp, r7
   1049a:	bd90      	pop	{r4, r7, pc}
   1049c:	20001454 	.word	0x20001454
   104a0:	200013e4 	.word	0x200013e4
   104a4:	0001112b 	.word	0x0001112b

000104a8 <_Z41__static_initialization_and_destruction_0ii>:
	return true;
}

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}
   104a8:	b5b0      	push	{r4, r5, r7, lr}
   104aa:	b082      	sub	sp, #8
   104ac:	af00      	add	r7, sp, #0
   104ae:	6078      	str	r0, [r7, #4]
   104b0:	6039      	str	r1, [r7, #0]
   104b2:	687b      	ldr	r3, [r7, #4]
   104b4:	2b01      	cmp	r3, #1
   104b6:	d11d      	bne.n	104f4 <_Z41__static_initialization_and_destruction_0ii+0x4c>
   104b8:	683b      	ldr	r3, [r7, #0]
   104ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
   104be:	4293      	cmp	r3, r2
   104c0:	d118      	bne.n	104f4 <_Z41__static_initialization_and_destruction_0ii+0x4c>
static I2C_Sync_Class		i2cStatic(&I2C_FLAPPER_VALVE);
   104c2:	490e      	ldr	r1, [pc, #56]	; (104fc <_Z41__static_initialization_and_destruction_0ii+0x54>)
   104c4:	480e      	ldr	r0, [pc, #56]	; (10500 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   104c6:	4b0f      	ldr	r3, [pc, #60]	; (10504 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
   104c8:	4798      	blx	r3
   104ca:	4a0f      	ldr	r2, [pc, #60]	; (10508 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   104cc:	490f      	ldr	r1, [pc, #60]	; (1050c <_Z41__static_initialization_and_destruction_0ii+0x64>)
   104ce:	480c      	ldr	r0, [pc, #48]	; (10500 <_Z41__static_initialization_and_destruction_0ii+0x58>)
   104d0:	4b0f      	ldr	r3, [pc, #60]	; (10510 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   104d2:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_EXPANDERS];
   104d4:	4b0f      	ldr	r3, [pc, #60]	; (10514 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   104d6:	2403      	movs	r4, #3
   104d8:	461d      	mov	r5, r3
   104da:	2c00      	cmp	r4, #0
   104dc:	db05      	blt.n	104ea <_Z41__static_initialization_and_destruction_0ii+0x42>
   104de:	4628      	mov	r0, r5
   104e0:	4b0d      	ldr	r3, [pc, #52]	; (10518 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   104e2:	4798      	blx	r3
   104e4:	351c      	adds	r5, #28
   104e6:	3c01      	subs	r4, #1
   104e8:	e7f7      	b.n	104da <_Z41__static_initialization_and_destruction_0ii+0x32>
   104ea:	4a07      	ldr	r2, [pc, #28]	; (10508 <_Z41__static_initialization_and_destruction_0ii+0x60>)
   104ec:	490b      	ldr	r1, [pc, #44]	; (1051c <_Z41__static_initialization_and_destruction_0ii+0x74>)
   104ee:	2000      	movs	r0, #0
   104f0:	4b07      	ldr	r3, [pc, #28]	; (10510 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   104f2:	4798      	blx	r3
}
   104f4:	bf00      	nop
   104f6:	3708      	adds	r7, #8
   104f8:	46bd      	mov	sp, r7
   104fa:	bdb0      	pop	{r4, r5, r7, pc}
   104fc:	20007e90 	.word	0x20007e90
   10500:	200013d0 	.word	0x200013d0
   10504:	00010dad 	.word	0x00010dad
   10508:	20000000 	.word	0x20000000
   1050c:	00010dc9 	.word	0x00010dc9
   10510:	00012a41 	.word	0x00012a41
   10514:	200013e4 	.word	0x200013e4
   10518:	00011117 	.word	0x00011117
   1051c:	0001047d 	.word	0x0001047d

00010520 <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
   10520:	b580      	push	{r7, lr}
   10522:	af00      	add	r7, sp, #0
   10524:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10528:	2001      	movs	r0, #1
   1052a:	4b01      	ldr	r3, [pc, #4]	; (10530 <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
   1052c:	4798      	blx	r3
   1052e:	bd80      	pop	{r7, pc}
   10530:	000104a9 	.word	0x000104a9

00010534 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
   10534:	b480      	push	{r7}
   10536:	b083      	sub	sp, #12
   10538:	af00      	add	r7, sp, #0
   1053a:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
   1053c:	4a07      	ldr	r2, [pc, #28]	; (1055c <_ZN18SingleHeater_ClassC1Ev+0x28>)
   1053e:	687b      	ldr	r3, [r7, #4]
   10540:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
   10542:	687b      	ldr	r3, [r7, #4]
   10544:	4a06      	ldr	r2, [pc, #24]	; (10560 <_ZN18SingleHeater_ClassC1Ev+0x2c>)
   10546:	619a      	str	r2, [r3, #24]
	heaterStatusChanged=false;
   10548:	687b      	ldr	r3, [r7, #4]
   1054a:	2200      	movs	r2, #0
   1054c:	705a      	strb	r2, [r3, #1]
} //SingleHeater_Class
   1054e:	687b      	ldr	r3, [r7, #4]
   10550:	4618      	mov	r0, r3
   10552:	370c      	adds	r7, #12
   10554:	46bd      	mov	sp, r7
   10556:	bc80      	pop	{r7}
   10558:	4770      	bx	lr
   1055a:	bf00      	nop
   1055c:	20001454 	.word	0x20001454
   10560:	20001458 	.word	0x20001458

00010564 <_ZN18SingleHeater_ClassD1Ev>:
	heaterStatusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
   10564:	b480      	push	{r7}
   10566:	b083      	sub	sp, #12
   10568:	af00      	add	r7, sp, #0
   1056a:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
   1056c:	687b      	ldr	r3, [r7, #4]
   1056e:	4618      	mov	r0, r3
   10570:	370c      	adds	r7, #12
   10572:	46bd      	mov	sp, r7
   10574:	bc80      	pop	{r7}
   10576:	4770      	bx	lr

00010578 <_ZN18SingleHeater_Class4InitEv>:
static void	HeaterStatusChanged(void){
	
	ptrSingleHeaterClass->heaterStatusChanged=true;
}

bool SingleHeater_Class::Init(void){
   10578:	b580      	push	{r7, lr}
   1057a:	b082      	sub	sp, #8
   1057c:	af00      	add	r7, sp, #0
   1057e:	6078      	str	r0, [r7, #4]
		i2c->Init();
   10580:	687b      	ldr	r3, [r7, #4]
   10582:	699b      	ldr	r3, [r3, #24]
   10584:	4618      	mov	r0, r3
   10586:	4b15      	ldr	r3, [pc, #84]	; (105dc <_ZN18SingleHeater_Class4InitEv+0x64>)
   10588:	4798      	blx	r3
		if (i2c->isOK)
   1058a:	687b      	ldr	r3, [r7, #4]
   1058c:	699b      	ldr	r3, [r3, #24]
   1058e:	7a5b      	ldrb	r3, [r3, #9]
   10590:	b2db      	uxtb	r3, r3
   10592:	2b00      	cmp	r3, #0
   10594:	d014      	beq.n	105c0 <_ZN18SingleHeater_Class4InitEv+0x48>
		{
			
			//ext_irq_register(PIN_PA03,FUNC_PTR(HeaterStatusChanged));
			InitExpanderArray();
   10596:	6878      	ldr	r0, [r7, #4]
   10598:	4b11      	ldr	r3, [pc, #68]	; (105e0 <_ZN18SingleHeater_Class4InitEv+0x68>)
   1059a:	4798      	blx	r3
			expanders[0]->SetPortInput();
   1059c:	687b      	ldr	r3, [r7, #4]
   1059e:	68db      	ldr	r3, [r3, #12]
   105a0:	4618      	mov	r0, r3
   105a2:	4b10      	ldr	r3, [pc, #64]	; (105e4 <_ZN18SingleHeater_Class4InitEv+0x6c>)
   105a4:	4798      	blx	r3
			expanders[1]->SetPortOutput();
   105a6:	687b      	ldr	r3, [r7, #4]
   105a8:	691b      	ldr	r3, [r3, #16]
   105aa:	4618      	mov	r0, r3
   105ac:	4b0e      	ldr	r3, [pc, #56]	; (105e8 <_ZN18SingleHeater_Class4InitEv+0x70>)
   105ae:	4798      	blx	r3
			isOK=SelfTest();
   105b0:	6878      	ldr	r0, [r7, #4]
   105b2:	4b0e      	ldr	r3, [pc, #56]	; (105ec <_ZN18SingleHeater_Class4InitEv+0x74>)
   105b4:	4798      	blx	r3
   105b6:	4603      	mov	r3, r0
   105b8:	461a      	mov	r2, r3
   105ba:	687b      	ldr	r3, [r7, #4]
   105bc:	701a      	strb	r2, [r3, #0]
   105be:	e000      	b.n	105c2 <_ZN18SingleHeater_Class4InitEv+0x4a>
		}
		else
		{
			asm("nop");
   105c0:	bf00      	nop
		}
		isOK=i2c->isOK;
   105c2:	687b      	ldr	r3, [r7, #4]
   105c4:	699b      	ldr	r3, [r3, #24]
   105c6:	7a5b      	ldrb	r3, [r3, #9]
   105c8:	b2da      	uxtb	r2, r3
   105ca:	687b      	ldr	r3, [r7, #4]
   105cc:	701a      	strb	r2, [r3, #0]
		return isOK;
   105ce:	687b      	ldr	r3, [r7, #4]
   105d0:	781b      	ldrb	r3, [r3, #0]
   105d2:	b2db      	uxtb	r3, r3
}
   105d4:	4618      	mov	r0, r3
   105d6:	3708      	adds	r7, #8
   105d8:	46bd      	mov	sp, r7
   105da:	bd80      	pop	{r7, pc}
   105dc:	00010ddd 	.word	0x00010ddd
   105e0:	000105f1 	.word	0x000105f1
   105e4:	000112e5 	.word	0x000112e5
   105e8:	0001139d 	.word	0x0001139d
   105ec:	000107d5 	.word	0x000107d5

000105f0 <_ZN18SingleHeater_Class17InitExpanderArrayEv>:

uint8_t SingleHeater_Class::InitExpanderArray(void){
   105f0:	b580      	push	{r7, lr}
   105f2:	b084      	sub	sp, #16
   105f4:	af00      	add	r7, sp, #0
   105f6:	6078      	str	r0, [r7, #4]
	
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
   105f8:	2300      	movs	r3, #0
   105fa:	60fb      	str	r3, [r7, #12]
   105fc:	68fb      	ldr	r3, [r7, #12]
   105fe:	2b01      	cmp	r3, #1
   10600:	dc25      	bgt.n	1064e <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x5e>
	{
		expanders[i]=&expandersStatic[i];
   10602:	68fa      	ldr	r2, [r7, #12]
   10604:	4613      	mov	r3, r2
   10606:	00db      	lsls	r3, r3, #3
   10608:	1a9b      	subs	r3, r3, r2
   1060a:	009b      	lsls	r3, r3, #2
   1060c:	4a12      	ldr	r2, [pc, #72]	; (10658 <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x68>)
   1060e:	441a      	add	r2, r3
   10610:	6879      	ldr	r1, [r7, #4]
   10612:	68fb      	ldr	r3, [r7, #12]
   10614:	3302      	adds	r3, #2
   10616:	009b      	lsls	r3, r3, #2
   10618:	440b      	add	r3, r1
   1061a:	605a      	str	r2, [r3, #4]
		currentExpander=(expanders[i]);
   1061c:	687a      	ldr	r2, [r7, #4]
   1061e:	68fb      	ldr	r3, [r7, #12]
   10620:	3302      	adds	r3, #2
   10622:	009b      	lsls	r3, r3, #2
   10624:	4413      	add	r3, r2
   10626:	685a      	ldr	r2, [r3, #4]
   10628:	687b      	ldr	r3, [r7, #4]
   1062a:	615a      	str	r2, [r3, #20]
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
   1062c:	687b      	ldr	r3, [r7, #4]
   1062e:	6958      	ldr	r0, [r3, #20]
   10630:	68fb      	ldr	r3, [r7, #12]
   10632:	b25b      	sxtb	r3, r3
   10634:	f043 0320 	orr.w	r3, r3, #32
   10638:	b25b      	sxtb	r3, r3
   1063a:	b2d9      	uxtb	r1, r3
   1063c:	687b      	ldr	r3, [r7, #4]
   1063e:	699b      	ldr	r3, [r3, #24]
   10640:	461a      	mov	r2, r3
   10642:	4b06      	ldr	r3, [pc, #24]	; (1065c <_ZN18SingleHeater_Class17InitExpanderArrayEv+0x6c>)
   10644:	4798      	blx	r3
	for (int i = 0; i < SINGLE_HEATER_EXPANDERS; i++)
   10646:	68fb      	ldr	r3, [r7, #12]
   10648:	3301      	adds	r3, #1
   1064a:	60fb      	str	r3, [r7, #12]
   1064c:	e7d6      	b.n	105fc <_ZN18SingleHeater_Class17InitExpanderArrayEv+0xc>
	}
	
}
   1064e:	bf00      	nop
   10650:	4618      	mov	r0, r3
   10652:	3710      	adds	r7, #16
   10654:	46bd      	mov	sp, r7
   10656:	bd80      	pop	{r7, pc}
   10658:	2000146c 	.word	0x2000146c
   1065c:	0001113f 	.word	0x0001113f

00010660 <_ZN18SingleHeater_Class10ReadStatusEv>:

uint8_t	SingleHeater_Class::ReadStatus(void){
   10660:	b580      	push	{r7, lr}
   10662:	b084      	sub	sp, #16
   10664:	af00      	add	r7, sp, #0
   10666:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
   10668:	687b      	ldr	r3, [r7, #4]
   1066a:	68db      	ldr	r3, [r3, #12]
   1066c:	4618      	mov	r0, r3
   1066e:	4b16      	ldr	r3, [pc, #88]	; (106c8 <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
   10670:	4798      	blx	r3
   10672:	4603      	mov	r3, r0
   10674:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
   10676:	7bbb      	ldrb	r3, [r7, #14]
   10678:	f003 0301 	and.w	r3, r3, #1
   1067c:	2b00      	cmp	r3, #0
   1067e:	bf14      	ite	ne
   10680:	2301      	movne	r3, #1
   10682:	2300      	moveq	r3, #0
   10684:	b2da      	uxtb	r2, r3
   10686:	687b      	ldr	r3, [r7, #4]
   10688:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
   1068a:	2300      	movs	r3, #0
   1068c:	73fb      	strb	r3, [r7, #15]
   1068e:	7bfb      	ldrb	r3, [r7, #15]
   10690:	2b03      	cmp	r3, #3
   10692:	dc14      	bgt.n	106be <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
   10694:	7bfb      	ldrb	r3, [r7, #15]
   10696:	7bb9      	ldrb	r1, [r7, #14]
   10698:	7bfa      	ldrb	r2, [r7, #15]
   1069a:	3201      	adds	r2, #1
   1069c:	fa41 f202 	asr.w	r2, r1, r2
   106a0:	f002 0201 	and.w	r2, r2, #1
   106a4:	2a00      	cmp	r2, #0
   106a6:	bf14      	ite	ne
   106a8:	2201      	movne	r2, #1
   106aa:	2200      	moveq	r2, #0
   106ac:	b2d1      	uxtb	r1, r2
   106ae:	687a      	ldr	r2, [r7, #4]
   106b0:	4413      	add	r3, r2
   106b2:	460a      	mov	r2, r1
   106b4:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
   106b6:	7bfb      	ldrb	r3, [r7, #15]
   106b8:	3301      	adds	r3, #1
   106ba:	73fb      	strb	r3, [r7, #15]
   106bc:	e7e7      	b.n	1068e <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
   106be:	7bbb      	ldrb	r3, [r7, #14]
}
   106c0:	4618      	mov	r0, r3
   106c2:	3710      	adds	r7, #16
   106c4:	46bd      	mov	sp, r7
   106c6:	bd80      	pop	{r7, pc}
   106c8:	00011225 	.word	0x00011225

000106cc <_ZN18SingleHeater_Class14ReadEnableGIPOEv>:

uint8_t	SingleHeater_Class::ReadEnableGIPO(void){
   106cc:	b580      	push	{r7, lr}
   106ce:	b084      	sub	sp, #16
   106d0:	af00      	add	r7, sp, #0
   106d2:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[1]->ReadGPIORegister();
   106d4:	687b      	ldr	r3, [r7, #4]
   106d6:	691b      	ldr	r3, [r3, #16]
   106d8:	4618      	mov	r0, r3
   106da:	4b12      	ldr	r3, [pc, #72]	; (10724 <_ZN18SingleHeater_Class14ReadEnableGIPOEv+0x58>)
   106dc:	4798      	blx	r3
   106de:	4603      	mov	r3, r0
   106e0:	73bb      	strb	r3, [r7, #14]

	for (uint8_t i = 0; i < 4; i++)
   106e2:	2300      	movs	r3, #0
   106e4:	73fb      	strb	r3, [r7, #15]
   106e6:	7bfb      	ldrb	r3, [r7, #15]
   106e8:	2b03      	cmp	r3, #3
   106ea:	dc15      	bgt.n	10718 <_ZN18SingleHeater_Class14ReadEnableGIPOEv+0x4c>
	{
		enables[i]=!(r&(0x01<i));
   106ec:	7bfb      	ldrb	r3, [r7, #15]
   106ee:	7bba      	ldrb	r2, [r7, #14]
   106f0:	7bf9      	ldrb	r1, [r7, #15]
   106f2:	2901      	cmp	r1, #1
   106f4:	bfcc      	ite	gt
   106f6:	2101      	movgt	r1, #1
   106f8:	2100      	movle	r1, #0
   106fa:	b2c9      	uxtb	r1, r1
   106fc:	400a      	ands	r2, r1
   106fe:	2a00      	cmp	r2, #0
   10700:	bf0c      	ite	eq
   10702:	2201      	moveq	r2, #1
   10704:	2200      	movne	r2, #0
   10706:	b2d1      	uxtb	r1, r2
   10708:	687a      	ldr	r2, [r7, #4]
   1070a:	4413      	add	r3, r2
   1070c:	460a      	mov	r2, r1
   1070e:	771a      	strb	r2, [r3, #28]
	for (uint8_t i = 0; i < 4; i++)
   10710:	7bfb      	ldrb	r3, [r7, #15]
   10712:	3301      	adds	r3, #1
   10714:	73fb      	strb	r3, [r7, #15]
   10716:	e7e6      	b.n	106e6 <_ZN18SingleHeater_Class14ReadEnableGIPOEv+0x1a>
	}
	return r;
   10718:	7bbb      	ldrb	r3, [r7, #14]
}
   1071a:	4618      	mov	r0, r3
   1071c:	3710      	adds	r7, #16
   1071e:	46bd      	mov	sp, r7
   10720:	bd80      	pop	{r7, pc}
   10722:	bf00      	nop
   10724:	00011225 	.word	0x00011225

00010728 <_ZN18SingleHeater_Class11EnableIndexEh>:
uint8_t	SingleHeater_Class::EnableIndex(uint8_t indexHeater){
   10728:	b580      	push	{r7, lr}
   1072a:	b082      	sub	sp, #8
   1072c:	af00      	add	r7, sp, #0
   1072e:	6078      	str	r0, [r7, #4]
   10730:	460b      	mov	r3, r1
   10732:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,false);
   10734:	687b      	ldr	r3, [r7, #4]
   10736:	691b      	ldr	r3, [r3, #16]
   10738:	78f9      	ldrb	r1, [r7, #3]
   1073a:	2200      	movs	r2, #0
   1073c:	4618      	mov	r0, r3
   1073e:	4b06      	ldr	r3, [pc, #24]	; (10758 <_ZN18SingleHeater_Class11EnableIndexEh+0x30>)
   10740:	4798      	blx	r3
   10742:	4603      	mov	r3, r0
   10744:	461a      	mov	r2, r3
   10746:	687b      	ldr	r3, [r7, #4]
   10748:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   1074a:	687b      	ldr	r3, [r7, #4]
   1074c:	7adb      	ldrb	r3, [r3, #11]
}
   1074e:	4618      	mov	r0, r3
   10750:	3708      	adds	r7, #8
   10752:	46bd      	mov	sp, r7
   10754:	bd80      	pop	{r7, pc}
   10756:	bf00      	nop
   10758:	00011495 	.word	0x00011495

0001075c <_ZN18SingleHeater_Class8SetRelayEhb>:
uint8_t	SingleHeater_Class::SetRelay(uint8_t indexHeater, bool state){
   1075c:	b580      	push	{r7, lr}
   1075e:	b082      	sub	sp, #8
   10760:	af00      	add	r7, sp, #0
   10762:	6078      	str	r0, [r7, #4]
   10764:	460b      	mov	r3, r1
   10766:	70fb      	strb	r3, [r7, #3]
   10768:	4613      	mov	r3, r2
   1076a:	70bb      	strb	r3, [r7, #2]
	enabled=expanders[1]->WriteDigit(indexHeater,!state);
   1076c:	687b      	ldr	r3, [r7, #4]
   1076e:	6918      	ldr	r0, [r3, #16]
   10770:	78bb      	ldrb	r3, [r7, #2]
   10772:	f083 0301 	eor.w	r3, r3, #1
   10776:	b2da      	uxtb	r2, r3
   10778:	78fb      	ldrb	r3, [r7, #3]
   1077a:	4619      	mov	r1, r3
   1077c:	4b05      	ldr	r3, [pc, #20]	; (10794 <_ZN18SingleHeater_Class8SetRelayEhb+0x38>)
   1077e:	4798      	blx	r3
   10780:	4603      	mov	r3, r0
   10782:	461a      	mov	r2, r3
   10784:	687b      	ldr	r3, [r7, #4]
   10786:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   10788:	687b      	ldr	r3, [r7, #4]
   1078a:	7adb      	ldrb	r3, [r3, #11]
}
   1078c:	4618      	mov	r0, r3
   1078e:	3708      	adds	r7, #8
   10790:	46bd      	mov	sp, r7
   10792:	bd80      	pop	{r7, pc}
   10794:	00011495 	.word	0x00011495

00010798 <_ZN18SingleHeater_Class12DisableIndexEh>:

uint8_t	SingleHeater_Class::DisableIndex(uint8_t indexHeater){
   10798:	b580      	push	{r7, lr}
   1079a:	b082      	sub	sp, #8
   1079c:	af00      	add	r7, sp, #0
   1079e:	6078      	str	r0, [r7, #4]
   107a0:	460b      	mov	r3, r1
   107a2:	70fb      	strb	r3, [r7, #3]
	enabled=expanders[1]->WriteDigit(indexHeater,true)?false:true;
   107a4:	687b      	ldr	r3, [r7, #4]
   107a6:	691b      	ldr	r3, [r3, #16]
   107a8:	78f9      	ldrb	r1, [r7, #3]
   107aa:	2201      	movs	r2, #1
   107ac:	4618      	mov	r0, r3
   107ae:	4b08      	ldr	r3, [pc, #32]	; (107d0 <_ZN18SingleHeater_Class12DisableIndexEh+0x38>)
   107b0:	4798      	blx	r3
   107b2:	4603      	mov	r3, r0
   107b4:	2b00      	cmp	r3, #0
   107b6:	d001      	beq.n	107bc <_ZN18SingleHeater_Class12DisableIndexEh+0x24>
   107b8:	2200      	movs	r2, #0
   107ba:	e000      	b.n	107be <_ZN18SingleHeater_Class12DisableIndexEh+0x26>
   107bc:	2201      	movs	r2, #1
   107be:	687b      	ldr	r3, [r7, #4]
   107c0:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   107c2:	687b      	ldr	r3, [r7, #4]
   107c4:	7adb      	ldrb	r3, [r3, #11]
}
   107c6:	4618      	mov	r0, r3
   107c8:	3708      	adds	r7, #8
   107ca:	46bd      	mov	sp, r7
   107cc:	bd80      	pop	{r7, pc}
   107ce:	bf00      	nop
   107d0:	00011495 	.word	0x00011495

000107d4 <_ZN18SingleHeater_Class8SelfTestEv>:



bool SingleHeater_Class::SelfTest(void){
   107d4:	b580      	push	{r7, lr}
   107d6:	b084      	sub	sp, #16
   107d8:	af00      	add	r7, sp, #0
   107da:	6078      	str	r0, [r7, #4]
	bool result;
	for (uint8_t i = 0; i < 4; i++)
   107dc:	2300      	movs	r3, #0
   107de:	73bb      	strb	r3, [r7, #14]
   107e0:	7bbb      	ldrb	r3, [r7, #14]
   107e2:	2b03      	cmp	r3, #3
   107e4:	dc1f      	bgt.n	10826 <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	{
			EnableIndex(i);
   107e6:	7bbb      	ldrb	r3, [r7, #14]
   107e8:	4619      	mov	r1, r3
   107ea:	6878      	ldr	r0, [r7, #4]
   107ec:	4b10      	ldr	r3, [pc, #64]	; (10830 <_ZN18SingleHeater_Class8SelfTestEv+0x5c>)
   107ee:	4798      	blx	r3
			delay_ms(100);
   107f0:	2064      	movs	r0, #100	; 0x64
   107f2:	4b10      	ldr	r3, [pc, #64]	; (10834 <_ZN18SingleHeater_Class8SelfTestEv+0x60>)
   107f4:	4798      	blx	r3
			DisableIndex(i);
   107f6:	7bbb      	ldrb	r3, [r7, #14]
   107f8:	4619      	mov	r1, r3
   107fa:	6878      	ldr	r0, [r7, #4]
   107fc:	4b0e      	ldr	r3, [pc, #56]	; (10838 <_ZN18SingleHeater_Class8SelfTestEv+0x64>)
   107fe:	4798      	blx	r3
			ReadStatus();
   10800:	6878      	ldr	r0, [r7, #4]
   10802:	4b0e      	ldr	r3, [pc, #56]	; (1083c <_ZN18SingleHeater_Class8SelfTestEv+0x68>)
   10804:	4798      	blx	r3
			if (heaterGPIO.inputs.niAlcHeaterRelayFault[i])
   10806:	7bbb      	ldrb	r3, [r7, #14]
   10808:	687a      	ldr	r2, [r7, #4]
   1080a:	4413      	add	r3, r2
   1080c:	78db      	ldrb	r3, [r3, #3]
   1080e:	2b00      	cmp	r3, #0
   10810:	d002      	beq.n	10818 <_ZN18SingleHeater_Class8SelfTestEv+0x44>
			{
				result=true;
   10812:	2301      	movs	r3, #1
   10814:	73fb      	strb	r3, [r7, #15]
   10816:	e002      	b.n	1081e <_ZN18SingleHeater_Class8SelfTestEv+0x4a>
			} 
			else
			{
				result=false;
   10818:	2300      	movs	r3, #0
   1081a:	73fb      	strb	r3, [r7, #15]
				break;
   1081c:	e003      	b.n	10826 <_ZN18SingleHeater_Class8SelfTestEv+0x52>
	for (uint8_t i = 0; i < 4; i++)
   1081e:	7bbb      	ldrb	r3, [r7, #14]
   10820:	3301      	adds	r3, #1
   10822:	73bb      	strb	r3, [r7, #14]
   10824:	e7dc      	b.n	107e0 <_ZN18SingleHeater_Class8SelfTestEv+0xc>
			
			
	}
	

	return result;
   10826:	7bfb      	ldrb	r3, [r7, #15]
}
   10828:	4618      	mov	r0, r3
   1082a:	3710      	adds	r7, #16
   1082c:	46bd      	mov	sp, r7
   1082e:	bd80      	pop	{r7, pc}
   10830:	00010729 	.word	0x00010729
   10834:	000027c9 	.word	0x000027c9
   10838:	00010799 	.word	0x00010799
   1083c:	00010661 	.word	0x00010661

00010840 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   10840:	b590      	push	{r4, r7, lr}
   10842:	b083      	sub	sp, #12
   10844:	af00      	add	r7, sp, #0
   10846:	6078      	str	r0, [r7, #4]
   10848:	4c05      	ldr	r4, [pc, #20]	; (10860 <__tcf_0+0x20>)
   1084a:	4b06      	ldr	r3, [pc, #24]	; (10864 <__tcf_0+0x24>)
   1084c:	429c      	cmp	r4, r3
   1084e:	d004      	beq.n	1085a <__tcf_0+0x1a>
   10850:	3c1c      	subs	r4, #28
   10852:	4620      	mov	r0, r4
   10854:	4b04      	ldr	r3, [pc, #16]	; (10868 <__tcf_0+0x28>)
   10856:	4798      	blx	r3
   10858:	e7f7      	b.n	1084a <__tcf_0+0xa>
   1085a:	370c      	adds	r7, #12
   1085c:	46bd      	mov	sp, r7
   1085e:	bd90      	pop	{r4, r7, pc}
   10860:	200014a4 	.word	0x200014a4
   10864:	2000146c 	.word	0x2000146c
   10868:	0001112b 	.word	0x0001112b

0001086c <_Z41__static_initialization_and_destruction_0ii>:

   1086c:	b5b0      	push	{r4, r5, r7, lr}
   1086e:	b082      	sub	sp, #8
   10870:	af00      	add	r7, sp, #0
   10872:	6078      	str	r0, [r7, #4]
   10874:	6039      	str	r1, [r7, #0]
   10876:	687b      	ldr	r3, [r7, #4]
   10878:	2b01      	cmp	r3, #1
   1087a:	d125      	bne.n	108c8 <_Z41__static_initialization_and_destruction_0ii+0x5c>
   1087c:	683b      	ldr	r3, [r7, #0]
   1087e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10882:	4293      	cmp	r3, r2
   10884:	d120      	bne.n	108c8 <_Z41__static_initialization_and_destruction_0ii+0x5c>
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   10886:	4912      	ldr	r1, [pc, #72]	; (108d0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   10888:	4812      	ldr	r0, [pc, #72]	; (108d4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   1088a:	4b13      	ldr	r3, [pc, #76]	; (108d8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   1088c:	4798      	blx	r3
   1088e:	4a13      	ldr	r2, [pc, #76]	; (108dc <_Z41__static_initialization_and_destruction_0ii+0x70>)
   10890:	4913      	ldr	r1, [pc, #76]	; (108e0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   10892:	4810      	ldr	r0, [pc, #64]	; (108d4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   10894:	4b13      	ldr	r3, [pc, #76]	; (108e4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   10896:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   10898:	4b13      	ldr	r3, [pc, #76]	; (108e8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   1089a:	2401      	movs	r4, #1
   1089c:	461d      	mov	r5, r3
   1089e:	2c00      	cmp	r4, #0
   108a0:	db05      	blt.n	108ae <_Z41__static_initialization_and_destruction_0ii+0x42>
   108a2:	4628      	mov	r0, r5
   108a4:	4b11      	ldr	r3, [pc, #68]	; (108ec <_Z41__static_initialization_and_destruction_0ii+0x80>)
   108a6:	4798      	blx	r3
   108a8:	351c      	adds	r5, #28
   108aa:	3c01      	subs	r4, #1
   108ac:	e7f7      	b.n	1089e <_Z41__static_initialization_and_destruction_0ii+0x32>
   108ae:	4a0b      	ldr	r2, [pc, #44]	; (108dc <_Z41__static_initialization_and_destruction_0ii+0x70>)
   108b0:	490f      	ldr	r1, [pc, #60]	; (108f0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   108b2:	2000      	movs	r0, #0
   108b4:	4b0b      	ldr	r3, [pc, #44]	; (108e4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   108b6:	4798      	blx	r3
   108b8:	480e      	ldr	r0, [pc, #56]	; (108f4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   108ba:	4b0f      	ldr	r3, [pc, #60]	; (108f8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   108bc:	4798      	blx	r3
   108be:	4a07      	ldr	r2, [pc, #28]	; (108dc <_Z41__static_initialization_and_destruction_0ii+0x70>)
   108c0:	490e      	ldr	r1, [pc, #56]	; (108fc <_Z41__static_initialization_and_destruction_0ii+0x90>)
   108c2:	480c      	ldr	r0, [pc, #48]	; (108f4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   108c4:	4b07      	ldr	r3, [pc, #28]	; (108e4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   108c6:	4798      	blx	r3
   108c8:	bf00      	nop
   108ca:	3708      	adds	r7, #8
   108cc:	46bd      	mov	sp, r7
   108ce:	bdb0      	pop	{r4, r5, r7, pc}
   108d0:	20007ecc 	.word	0x20007ecc
   108d4:	20001458 	.word	0x20001458
   108d8:	00010dad 	.word	0x00010dad
   108dc:	20000000 	.word	0x20000000
   108e0:	00010dc9 	.word	0x00010dc9
   108e4:	00012a41 	.word	0x00012a41
   108e8:	2000146c 	.word	0x2000146c
   108ec:	00011117 	.word	0x00011117
   108f0:	00010841 	.word	0x00010841
   108f4:	200014a4 	.word	0x200014a4
   108f8:	00010535 	.word	0x00010535
   108fc:	00010565 	.word	0x00010565

00010900 <_GLOBAL__sub_I_ptrSingleHeaterClass>:
   10900:	b580      	push	{r7, lr}
   10902:	af00      	add	r7, sp, #0
   10904:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10908:	2001      	movs	r0, #1
   1090a:	4b01      	ldr	r3, [pc, #4]	; (10910 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
   1090c:	4798      	blx	r3
   1090e:	bd80      	pop	{r7, pc}
   10910:	0001086d 	.word	0x0001086d

00010914 <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
   10914:	4770      	bx	lr

00010916 <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
   10916:	4770      	bx	lr

00010918 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm>:
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	r;
}

uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){
   10918:	b510      	push	{r4, lr}

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
   1091a:	2302      	movs	r3, #2
   1091c:	4801      	ldr	r0, [pc, #4]	; (10924 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0xc>)
   1091e:	4c02      	ldr	r4, [pc, #8]	; (10928 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0x10>)
   10920:	47a0      	blx	r4
	return	r;
}
   10922:	bd10      	pop	{r4, pc}
   10924:	20007b8c 	.word	0x20007b8c
   10928:	000126c9 	.word	0x000126c9

0001092c <_ZN18FlashHandler_Class14ReadParametersER14UserParameters>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
   1092c:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
   1092e:	4b03      	ldr	r3, [pc, #12]	; (1093c <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x10>)
   10930:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadParameters(up,add);
   10932:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   10936:	4b02      	ldr	r3, [pc, #8]	; (10940 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x14>)
   10938:	4798      	blx	r3
}
   1093a:	bd08      	pop	{r3, pc}
   1093c:	200014c4 	.word	0x200014c4
   10940:	00010919 	.word	0x00010919

00010944 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
   10944:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
   10946:	2302      	movs	r3, #2
   10948:	4801      	ldr	r0, [pc, #4]	; (10950 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
   1094a:	4c02      	ldr	r4, [pc, #8]	; (10954 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
   1094c:	47a0      	blx	r4
	return	w;
}
   1094e:	bd10      	pop	{r4, pc}
   10950:	20007b8c 	.word	0x20007b8c
   10954:	00012695 	.word	0x00012695

00010958 <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
   10958:	b500      	push	{lr}
   1095a:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
   1095c:	4b07      	ldr	r3, [pc, #28]	; (1097c <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
   1095e:	881b      	ldrh	r3, [r3, #0]
   10960:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
   10964:	4b06      	ldr	r3, [pc, #24]	; (10980 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
   10966:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
   10968:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1096c:	3202      	adds	r2, #2
   1096e:	a901      	add	r1, sp, #4
   10970:	4b04      	ldr	r3, [pc, #16]	; (10984 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
   10972:	4798      	blx	r3
	return	w;
}
   10974:	b003      	add	sp, #12
   10976:	f85d fb04 	ldr.w	pc, [sp], #4
   1097a:	bf00      	nop
   1097c:	000138d8 	.word	0x000138d8
   10980:	200014c4 	.word	0x200014c4
   10984:	00010945 	.word	0x00010945

00010988 <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
   10988:	b510      	push	{r4, lr}
   1098a:	4604      	mov	r4, r0
   1098c:	30b8      	adds	r0, #184	; 0xb8
   1098e:	4b03      	ldr	r3, [pc, #12]	; (1099c <_ZN17MemoryFlash_ClassD1Ev+0x14>)
   10990:	4798      	blx	r3
   10992:	4620      	mov	r0, r4
   10994:	4b02      	ldr	r3, [pc, #8]	; (109a0 <_ZN17MemoryFlash_ClassD1Ev+0x18>)
   10996:	4798      	blx	r3
{
} //~MemoryManagment_Class
   10998:	4620      	mov	r0, r4
   1099a:	bd10      	pop	{r4, pc}
   1099c:	00010ad3 	.word	0x00010ad3
   109a0:	00010917 	.word	0x00010917

000109a4 <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
   109a4:	b538      	push	{r3, r4, r5, lr}
   109a6:	4604      	mov	r4, r0
   109a8:	4b10      	ldr	r3, [pc, #64]	; (109ec <_ZN17MemoryFlash_ClassC1Ev+0x48>)
   109aa:	4798      	blx	r3
   109ac:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   109b0:	4b0f      	ldr	r3, [pc, #60]	; (109f0 <_ZN17MemoryFlash_ClassC1Ev+0x4c>)
   109b2:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   109b4:	f44f 7500 	mov.w	r5, #512	; 0x200
   109b8:	462a      	mov	r2, r5
   109ba:	2100      	movs	r1, #0
   109bc:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   109c0:	4b0c      	ldr	r3, [pc, #48]	; (109f4 <_ZN17MemoryFlash_ClassC1Ev+0x50>)
   109c2:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   109c4:	2300      	movs	r3, #0
   109c6:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  _iTail = 0;
   109ca:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
   109ce:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
	_currentAddress=0;
   109d2:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
	head=512;
   109d6:	f8c4 52f8 	str.w	r5, [r4, #760]	; 0x2f8
	tail=0;
   109da:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
	flashBuffer=&flashBufferStatic[0];
   109de:	4a06      	ldr	r2, [pc, #24]	; (109f8 <_ZN17MemoryFlash_ClassC1Ev+0x54>)
   109e0:	f245 33b4 	movw	r3, #21428	; 0x53b4
   109e4:	50e2      	str	r2, [r4, r3]
} //MemoryManagment_Class
   109e6:	4620      	mov	r0, r4
   109e8:	bd38      	pop	{r3, r4, r5, pc}
   109ea:	bf00      	nop
   109ec:	00010915 	.word	0x00010915
   109f0:	00010ad1 	.word	0x00010ad1
   109f4:	000130f5 	.word	0x000130f5
   109f8:	200014c8 	.word	0x200014c8

000109fc <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
   109fc:	b538      	push	{r3, r4, r5, lr}
		if (qspiFlash.Init())
   109fe:	480b      	ldr	r0, [pc, #44]	; (10a2c <_ZN17MemoryFlash_Class4InitEm+0x30>)
   10a00:	4b0b      	ldr	r3, [pc, #44]	; (10a30 <_ZN17MemoryFlash_Class4InitEm+0x34>)
   10a02:	4798      	blx	r3
   10a04:	b948      	cbnz	r0, 10a1a <_ZN17MemoryFlash_Class4InitEm+0x1e>
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
   10a06:	4d0b      	ldr	r5, [pc, #44]	; (10a34 <_ZN17MemoryFlash_Class4InitEm+0x38>)
   10a08:	490b      	ldr	r1, [pc, #44]	; (10a38 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
   10a0a:	4628      	mov	r0, r5
   10a0c:	4c0b      	ldr	r4, [pc, #44]	; (10a3c <_ZN17MemoryFlash_Class4InitEm+0x40>)
   10a0e:	47a0      	blx	r4
   10a10:	490b      	ldr	r1, [pc, #44]	; (10a40 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   10a12:	4628      	mov	r0, r5
   10a14:	47a0      	blx	r4
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return true;
}
   10a16:	2001      	movs	r0, #1
   10a18:	bd38      	pop	{r3, r4, r5, pc}
   10a1a:	4d06      	ldr	r5, [pc, #24]	; (10a34 <_ZN17MemoryFlash_Class4InitEm+0x38>)
   10a1c:	4909      	ldr	r1, [pc, #36]	; (10a44 <_ZN17MemoryFlash_Class4InitEm+0x48>)
   10a1e:	4628      	mov	r0, r5
   10a20:	4c06      	ldr	r4, [pc, #24]	; (10a3c <_ZN17MemoryFlash_Class4InitEm+0x40>)
   10a22:	47a0      	blx	r4
   10a24:	4906      	ldr	r1, [pc, #24]	; (10a40 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   10a26:	4628      	mov	r0, r5
   10a28:	47a0      	blx	r4
   10a2a:	e7f4      	b.n	10a16 <_ZN17MemoryFlash_Class4InitEm+0x1a>
   10a2c:	20007b8c 	.word	0x20007b8c
   10a30:	000125f9 	.word	0x000125f9
   10a34:	20000fa8 	.word	0x20000fa8
   10a38:	00013880 	.word	0x00013880
   10a3c:	0000e2c9 	.word	0x0000e2c9
   10a40:	0001387c 	.word	0x0001387c
   10a44:	0001385c 	.word	0x0001385c

00010a48 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters>:
		  return	w;
	 }

	 return	r;
 }
  uint32_t	MemoryFlash_Class::SaveParameters(UserParameters& up){
   10a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a4a:	460f      	mov	r7, r1
	  uint32_t	add=(uint32_t)&flashMap->parametersSector;
   10a4c:	4b10      	ldr	r3, [pc, #64]	; (10a90 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x48>)
   10a4e:	681c      	ldr	r4, [r3, #0]
   10a50:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	  ParametersSector	*pss=(ParametersSector*)&flashBuffer[0];
   10a54:	f245 33b4 	movw	r3, #21428	; 0x53b4
   10a58:	58c5      	ldr	r5, [r0, r3]
	  uint32_t r=qspiFlash.ReadAddress((uint8_t*)pss,add,QSPI_ERBLK);
   10a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   10a5e:	4622      	mov	r2, r4
   10a60:	4629      	mov	r1, r5
   10a62:	480c      	ldr	r0, [pc, #48]	; (10a94 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   10a64:	4e0c      	ldr	r6, [pc, #48]	; (10a98 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x50>)
   10a66:	47b0      	blx	r6
	  if (r==0)
   10a68:	4603      	mov	r3, r0
   10a6a:	b108      	cbz	r0, 10a70 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x28>
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
		  return	w;
	  }

	  return	r;
  }
   10a6c:	4618      	mov	r0, r3
   10a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  memcpy((void*)&(pss->parameters),(void*)&up,sizeof(UserParameters));
   10a70:	883b      	ldrh	r3, [r7, #0]
   10a72:	802b      	strh	r3, [r5, #0]
		  qspiFlash.Erase(add);
   10a74:	4e07      	ldr	r6, [pc, #28]	; (10a94 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   10a76:	4621      	mov	r1, r4
   10a78:	4630      	mov	r0, r6
   10a7a:	4b08      	ldr	r3, [pc, #32]	; (10a9c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x54>)
   10a7c:	4798      	blx	r3
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
   10a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   10a82:	4622      	mov	r2, r4
   10a84:	4629      	mov	r1, r5
   10a86:	4630      	mov	r0, r6
   10a88:	4c05      	ldr	r4, [pc, #20]	; (10aa0 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x58>)
   10a8a:	47a0      	blx	r4
   10a8c:	4603      	mov	r3, r0
		  return	w;
   10a8e:	e7ed      	b.n	10a6c <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x24>
   10a90:	200014c4 	.word	0x200014c4
   10a94:	20007b8c 	.word	0x20007b8c
   10a98:	000126c9 	.word	0x000126c9
   10a9c:	00012665 	.word	0x00012665
   10aa0:	00012695 	.word	0x00012695

00010aa4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
   10aa4:	b510      	push	{r4, lr}
   10aa6:	4c05      	ldr	r4, [pc, #20]	; (10abc <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x18>)
   10aa8:	4620      	mov	r0, r4
   10aaa:	4b05      	ldr	r3, [pc, #20]	; (10ac0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x1c>)
   10aac:	4798      	blx	r3
   10aae:	4a05      	ldr	r2, [pc, #20]	; (10ac4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x20>)
   10ab0:	4905      	ldr	r1, [pc, #20]	; (10ac8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x24>)
   10ab2:	4620      	mov	r0, r4
   10ab4:	4b05      	ldr	r3, [pc, #20]	; (10acc <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0x28>)
   10ab6:	4798      	blx	r3
   10ab8:	bd10      	pop	{r4, pc}
   10aba:	bf00      	nop
   10abc:	200024c8 	.word	0x200024c8
   10ac0:	000109a5 	.word	0x000109a5
   10ac4:	20000000 	.word	0x20000000
   10ac8:	00010989 	.word	0x00010989
   10acc:	00012a41 	.word	0x00012a41

00010ad0 <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
   10ad0:	4770      	bx	lr

00010ad2 <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
   10ad2:	4770      	bx	lr

00010ad4 <_ZL17ConversionTimeoutPK10timer_task>:
	ptrTemperaturesClass->converterReady[2]=true;
	ptrTemperaturesClass->SetModuleReady(2);
	ptrTemperaturesClass->converterTimeout=false;
}
static void	ConversionTimeout(const struct timer_task *const timer_task){
	ptrTemperaturesClass->converterTimeout=true;
   10ad4:	4b03      	ldr	r3, [pc, #12]	; (10ae4 <_ZL17ConversionTimeoutPK10timer_task+0x10>)
   10ad6:	681b      	ldr	r3, [r3, #0]
   10ad8:	2201      	movs	r2, #1
   10ada:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	asm("nop");
   10ade:	bf00      	nop
   10ae0:	4770      	bx	lr
   10ae2:	bf00      	nop
   10ae4:	20007880 	.word	0x20007880

00010ae8 <_ZN24TemperatureSensors_ClassD1Ev>:
		SPIA=SPI_LTC;
		
} //TemperatureSensors_Class

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   10ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10aea:	4607      	mov	r7, r0
   10aec:	f110 05a8 	adds.w	r5, r0, #168	; 0xa8
   10af0:	d007      	beq.n	10b02 <_ZN24TemperatureSensors_ClassD1Ev+0x1a>
   10af2:	f500 74f0 	add.w	r4, r0, #480	; 0x1e0
   10af6:	4e05      	ldr	r6, [pc, #20]	; (10b0c <_ZN24TemperatureSensors_ClassD1Ev+0x24>)
   10af8:	3c68      	subs	r4, #104	; 0x68
   10afa:	4620      	mov	r0, r4
   10afc:	47b0      	blx	r6
   10afe:	42a5      	cmp	r5, r4
   10b00:	d1fa      	bne.n	10af8 <_ZN24TemperatureSensors_ClassD1Ev+0x10>
   10b02:	4638      	mov	r0, r7
   10b04:	4b02      	ldr	r3, [pc, #8]	; (10b10 <_ZN24TemperatureSensors_ClassD1Ev+0x28>)
   10b06:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   10b08:	4638      	mov	r0, r7
   10b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b0c:	000115a1 	.word	0x000115a1
   10b10:	000115a1 	.word	0x000115a1

00010b14 <_ZL15Converter1Readyv>:
	ptrTemperaturesClass->converterReady[0]=true;
   10b14:	4b06      	ldr	r3, [pc, #24]	; (10b30 <_ZL15Converter1Readyv+0x1c>)
   10b16:	681b      	ldr	r3, [r3, #0]
   10b18:	2201      	movs	r2, #1
   10b1a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
bool	TemperatureSensors_Class::IsConversionFinished(){
	return converterReady[0]&converterReady[1]&converterReady[2];
}
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
	module[m].ready=true;
   10b1e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return module[m].ready;
   10b22:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	ptrTemperaturesClass->converterTimeout=false;
   10b26:	2200      	movs	r2, #0
   10b28:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   10b2c:	4770      	bx	lr
   10b2e:	bf00      	nop
   10b30:	20007880 	.word	0x20007880

00010b34 <_ZL15Converter2Readyv>:
	ptrTemperaturesClass->converterReady[1]=true;
   10b34:	4b06      	ldr	r3, [pc, #24]	; (10b50 <_ZL15Converter2Readyv+0x1c>)
   10b36:	681b      	ldr	r3, [r3, #0]
   10b38:	2201      	movs	r2, #1
   10b3a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	module[m].ready=true;
   10b3e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	return module[m].ready;
   10b42:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
	ptrTemperaturesClass->converterTimeout=false;
   10b46:	2200      	movs	r2, #0
   10b48:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   10b4c:	4770      	bx	lr
   10b4e:	bf00      	nop
   10b50:	20007880 	.word	0x20007880

00010b54 <_ZL15Converter3Readyv>:
	ptrTemperaturesClass->converterReady[2]=true;
   10b54:	4b06      	ldr	r3, [pc, #24]	; (10b70 <_ZL15Converter3Readyv+0x1c>)
   10b56:	681b      	ldr	r3, [r3, #0]
   10b58:	2201      	movs	r2, #1
   10b5a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	module[m].ready=true;
   10b5e:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	return module[m].ready;
   10b62:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
	ptrTemperaturesClass->converterTimeout=false;
   10b66:	2200      	movs	r2, #0
   10b68:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   10b6c:	4770      	bx	lr
   10b6e:	bf00      	nop
   10b70:	20007880 	.word	0x20007880

00010b74 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
   10b74:	b570      	push	{r4, r5, r6, lr}
   10b76:	4604      	mov	r4, r0
   10b78:	460e      	mov	r6, r1
   10b7a:	4b0a      	ldr	r3, [pc, #40]	; (10ba4 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x30>)
   10b7c:	4798      	blx	r3
   10b7e:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   10b82:	4d09      	ldr	r5, [pc, #36]	; (10ba8 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x34>)
   10b84:	47a8      	blx	r5
   10b86:	f504 7088 	add.w	r0, r4, #272	; 0x110
   10b8a:	47a8      	blx	r5
   10b8c:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   10b90:	47a8      	blx	r5
		spiLite=&ltSPI;
   10b92:	4b06      	ldr	r3, [pc, #24]	; (10bac <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x38>)
   10b94:	1d1a      	adds	r2, r3, #4
   10b96:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
		ptrTemperaturesClass=this;
   10b9a:	601c      	str	r4, [r3, #0]
		SPIA=SPI_LTC;
   10b9c:	f8c4 61ec 	str.w	r6, [r4, #492]	; 0x1ec
} //TemperatureSensors_Class
   10ba0:	4620      	mov	r0, r4
   10ba2:	bd70      	pop	{r4, r5, r6, pc}
   10ba4:	0001158d 	.word	0x0001158d
   10ba8:	0001158d 	.word	0x0001158d
   10bac:	20007880 	.word	0x20007880

00010bb0 <_ZN24TemperatureSensors_Class11InitModulesEv>:
bool TemperatureSensors_Class::InitModules(void){
   10bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10bb4:	4604      	mov	r4, r0
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2; csPins[2]=CS_TEMP3;
   10bb6:	233d      	movs	r3, #61	; 0x3d
   10bb8:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
   10bbc:	231b      	movs	r3, #27
   10bbe:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
   10bc2:	2327      	movs	r3, #39	; 0x27
   10bc4:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
   10bc8:	f500 76f0 	add.w	r6, r0, #480	; 0x1e0
   10bcc:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
   10bd0:	f500 78f6 	add.w	r8, r0, #492	; 0x1ec
		module[ii].Init(csPins[ii],spiLite);
   10bd4:	4f06      	ldr	r7, [pc, #24]	; (10bf0 <_ZN24TemperatureSensors_Class11InitModulesEv+0x40>)
   10bd6:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   10bda:	f856 1b04 	ldr.w	r1, [r6], #4
   10bde:	4628      	mov	r0, r5
   10be0:	47b8      	blx	r7
   10be2:	3568      	adds	r5, #104	; 0x68
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   10be4:	4546      	cmp	r6, r8
   10be6:	d1f6      	bne.n	10bd6 <_ZN24TemperatureSensors_Class11InitModulesEv+0x26>
}
   10be8:	2001      	movs	r0, #1
   10bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10bee:	bf00      	nop
   10bf0:	000115b5 	.word	0x000115b5

00010bf4 <_ZN24TemperatureSensors_Class4InitEv>:
bool	TemperatureSensors_Class::Init(void){
   10bf4:	b538      	push	{r3, r4, r5, lr}
   10bf6:	4604      	mov	r4, r0
	spiLite->set_descriptor(SPIA);
   10bf8:	f8d0 11ec 	ldr.w	r1, [r0, #492]	; 0x1ec
   10bfc:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   10c00:	4b13      	ldr	r3, [pc, #76]	; (10c50 <_ZN24TemperatureSensors_Class4InitEv+0x5c>)
   10c02:	4798      	blx	r3
	spiLite->init();
   10c04:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   10c08:	4b12      	ldr	r3, [pc, #72]	; (10c54 <_ZN24TemperatureSensors_Class4InitEv+0x60>)
   10c0a:	4798      	blx	r3
	ptrTemperaturesClass=this;
   10c0c:	4b12      	ldr	r3, [pc, #72]	; (10c58 <_ZN24TemperatureSensors_Class4InitEv+0x64>)
   10c0e:	601c      	str	r4, [r3, #0]
	ext_irq_register(PIN_PB08, Converter1Ready);
   10c10:	4912      	ldr	r1, [pc, #72]	; (10c5c <_ZN24TemperatureSensors_Class4InitEv+0x68>)
   10c12:	2028      	movs	r0, #40	; 0x28
   10c14:	4d12      	ldr	r5, [pc, #72]	; (10c60 <_ZN24TemperatureSensors_Class4InitEv+0x6c>)
   10c16:	47a8      	blx	r5
	ext_irq_register(PIN_PB09, Converter2Ready);
   10c18:	4912      	ldr	r1, [pc, #72]	; (10c64 <_ZN24TemperatureSensors_Class4InitEv+0x70>)
   10c1a:	2029      	movs	r0, #41	; 0x29
   10c1c:	47a8      	blx	r5
	ext_irq_register(PIN_PB01, Converter3Ready);
   10c1e:	4912      	ldr	r1, [pc, #72]	; (10c68 <_ZN24TemperatureSensors_Class4InitEv+0x74>)
   10c20:	2021      	movs	r0, #33	; 0x21
   10c22:	47a8      	blx	r5
	InitModules();
   10c24:	4620      	mov	r0, r4
   10c26:	4b11      	ldr	r3, [pc, #68]	; (10c6c <_ZN24TemperatureSensors_Class4InitEv+0x78>)
   10c28:	4798      	blx	r3
	currentModule=0; currentChannelIndex=0;
   10c2a:	2300      	movs	r3, #0
   10c2c:	f884 31f3 	strb.w	r3, [r4, #499]	; 0x1f3
   10c30:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
   10c34:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   10c38:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
   10c3c:	4013      	ands	r3, r2
   10c3e:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   10c42:	4013      	ands	r3, r2
	isOK=(module[0].isOK)&(module[1].isOK)&(module[2].isOK);
   10c44:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	return isOK;
   10c48:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
}
   10c4c:	bd38      	pop	{r3, r4, r5, pc}
   10c4e:	bf00      	nop
   10c50:	00011da9 	.word	0x00011da9
   10c54:	00011d4d 	.word	0x00011d4d
   10c58:	20007880 	.word	0x20007880
   10c5c:	00010b15 	.word	0x00010b15
   10c60:	0000285d 	.word	0x0000285d
   10c64:	00010b35 	.word	0x00010b35
   10c68:	00010b55 	.word	0x00010b55
   10c6c:	00010bb1 	.word	0x00010bb1

00010c70 <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
   10c70:	b510      	push	{r4, lr}
   10c72:	4604      	mov	r4, r0
	converterTimeout=false;
   10c74:	2200      	movs	r2, #0
   10c76:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	converterReady[currentModule]=false;
   10c7a:	f890 31f3 	ldrb.w	r3, [r0, #499]	; 0x1f3
   10c7e:	4403      	add	r3, r0
   10c80:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   10c84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10c88:	4907      	ldr	r1, [pc, #28]	; (10ca8 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x38>)
   10c8a:	4808      	ldr	r0, [pc, #32]	; (10cac <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x3c>)
   10c8c:	4b08      	ldr	r3, [pc, #32]	; (10cb0 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x40>)
   10c8e:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
   10c90:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
   10c94:	2368      	movs	r3, #104	; 0x68
   10c96:	fb03 4000 	mla	r0, r3, r0, r4
   10c9a:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
   10c9e:	30a8      	adds	r0, #168	; 0xa8
   10ca0:	4b04      	ldr	r3, [pc, #16]	; (10cb4 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x44>)
   10ca2:	4798      	blx	r3
   10ca4:	bd10      	pop	{r4, pc}
   10ca6:	bf00      	nop
   10ca8:	00010ad5 	.word	0x00010ad5
   10cac:	20000f18 	.word	0x20000f18
   10cb0:	0000da85 	.word	0x0000da85
   10cb4:	000116a9 	.word	0x000116a9

00010cb8 <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
   10cb8:	b538      	push	{r3, r4, r5, lr}
   10cba:	4604      	mov	r4, r0
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
   10cbc:	491e      	ldr	r1, [pc, #120]	; (10d38 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x80>)
   10cbe:	481f      	ldr	r0, [pc, #124]	; (10d3c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x84>)
   10cc0:	4b1f      	ldr	r3, [pc, #124]	; (10d40 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x88>)
   10cc2:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
   10cc4:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
   10cc8:	2568      	movs	r5, #104	; 0x68
   10cca:	fb05 4000 	mla	r0, r5, r0, r4
   10cce:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
   10cd2:	30a8      	adds	r0, #168	; 0xa8
   10cd4:	4b1b      	ldr	r3, [pc, #108]	; (10d44 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>)
   10cd6:	4798      	blx	r3
   10cd8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	faultData=module[currentModule].fault_data;
   10cdc:	f894 21f3 	ldrb.w	r2, [r4, #499]	; 0x1f3
   10ce0:	fb05 4502 	mla	r5, r5, r2, r4
   10ce4:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
   10ce8:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (faultData==VALID_TEMPERATURE)
   10cec:	2b01      	cmp	r3, #1
   10cee:	d00d      	beq.n	10d0c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x54>
			lastValue=-999;
   10cf0:	4b15      	ldr	r3, [pc, #84]	; (10d48 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x90>)
   10cf2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	currentChannelIndex++;
   10cf6:	f894 31f4 	ldrb.w	r3, [r4, #500]	; 0x1f4
   10cfa:	3301      	adds	r3, #1
   10cfc:	b2db      	uxtb	r3, r3
	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
   10cfe:	2b04      	cmp	r3, #4
   10d00:	d00c      	beq.n	10d1c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x64>
	currentChannelIndex++;
   10d02:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
}
   10d06:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   10d0a:	bd38      	pop	{r3, r4, r5, pc}
			values[currentModule][currentChannelIndex]=lastValue;
   10d0c:	f894 31f4 	ldrb.w	r3, [r4, #500]	; 0x1f4
   10d10:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   10d14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   10d18:	66d8      	str	r0, [r3, #108]	; 0x6c
   10d1a:	e7ec      	b.n	10cf6 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x3e>
		currentChannelIndex=0;
   10d1c:	2300      	movs	r3, #0
   10d1e:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
		currentModule++;
   10d22:	3201      	adds	r2, #1
   10d24:	b2d2      	uxtb	r2, r2
		if (currentModule==NUMBER_LTC2983_MODULES)
   10d26:	2a03      	cmp	r2, #3
		currentModule++;
   10d28:	bf12      	itee	ne
   10d2a:	f884 21f3 	strbne.w	r2, [r4, #499]	; 0x1f3
			currentModule=0;
   10d2e:	2300      	moveq	r3, #0
   10d30:	f884 31f3 	strbeq.w	r3, [r4, #499]	; 0x1f3
   10d34:	e7e7      	b.n	10d06 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x4e>
   10d36:	bf00      	nop
   10d38:	00010ad5 	.word	0x00010ad5
   10d3c:	20000f18 	.word	0x20000f18
   10d40:	0000da2d 	.word	0x0000da2d
   10d44:	000117b1 	.word	0x000117b1
   10d48:	c479c000 	.word	0xc479c000

00010d4c <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
	return converterReady[0]&converterReady[1]&converterReady[2];
   10d4c:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
   10d50:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   10d54:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   10d58:	4013      	ands	r3, r2
}
   10d5a:	4018      	ands	r0, r3
   10d5c:	4770      	bx	lr
	...

00010d60 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev>:
}

TemperatureSensors_Class temperatures(&SPI_TEMP);
   10d60:	b570      	push	{r4, r5, r6, lr}
static LT_SPI	ltSPI;
   10d62:	4c0a      	ldr	r4, [pc, #40]	; (10d8c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x2c>)
   10d64:	1d25      	adds	r5, r4, #4
   10d66:	4628      	mov	r0, r5
   10d68:	4b09      	ldr	r3, [pc, #36]	; (10d90 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x30>)
   10d6a:	4798      	blx	r3
   10d6c:	4e09      	ldr	r6, [pc, #36]	; (10d94 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x34>)
   10d6e:	4632      	mov	r2, r6
   10d70:	4909      	ldr	r1, [pc, #36]	; (10d98 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x38>)
   10d72:	4628      	mov	r0, r5
   10d74:	4d09      	ldr	r5, [pc, #36]	; (10d9c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x3c>)
   10d76:	47a8      	blx	r5
TemperatureSensors_Class temperatures(&SPI_TEMP);
   10d78:	3418      	adds	r4, #24
   10d7a:	4909      	ldr	r1, [pc, #36]	; (10da0 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x40>)
   10d7c:	4620      	mov	r0, r4
   10d7e:	4b09      	ldr	r3, [pc, #36]	; (10da4 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x44>)
   10d80:	4798      	blx	r3
   10d82:	4632      	mov	r2, r6
   10d84:	4908      	ldr	r1, [pc, #32]	; (10da8 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x48>)
   10d86:	4620      	mov	r0, r4
   10d88:	47a8      	blx	r5
   10d8a:	bd70      	pop	{r4, r5, r6, pc}
   10d8c:	20007880 	.word	0x20007880
   10d90:	00011d11 	.word	0x00011d11
   10d94:	20000000 	.word	0x20000000
   10d98:	00011d39 	.word	0x00011d39
   10d9c:	00012a41 	.word	0x00012a41
   10da0:	20007df4 	.word	0x20007df4
   10da4:	00010b75 	.word	0x00010b75
   10da8:	00010ae9 	.word	0x00010ae9

00010dac <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:

// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
   10dac:	b480      	push	{r7}
   10dae:	b083      	sub	sp, #12
   10db0:	af00      	add	r7, sp, #0
   10db2:	6078      	str	r0, [r7, #4]
   10db4:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
   10db6:	687b      	ldr	r3, [r7, #4]
   10db8:	683a      	ldr	r2, [r7, #0]
   10dba:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
   10dbc:	687b      	ldr	r3, [r7, #4]
   10dbe:	4618      	mov	r0, r3
   10dc0:	370c      	adds	r7, #12
   10dc2:	46bd      	mov	sp, r7
   10dc4:	bc80      	pop	{r7}
   10dc6:	4770      	bx	lr

00010dc8 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
   10dc8:	b480      	push	{r7}
   10dca:	b083      	sub	sp, #12
   10dcc:	af00      	add	r7, sp, #0
   10dce:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
   10dd0:	687b      	ldr	r3, [r7, #4]
   10dd2:	4618      	mov	r0, r3
   10dd4:	370c      	adds	r7, #12
   10dd6:	46bd      	mov	sp, r7
   10dd8:	bc80      	pop	{r7}
   10dda:	4770      	bx	lr

00010ddc <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
   10ddc:	b580      	push	{r7, lr}
   10dde:	b084      	sub	sp, #16
   10de0:	af00      	add	r7, sp, #0
   10de2:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
   10de4:	687b      	ldr	r3, [r7, #4]
   10de6:	4a14      	ldr	r2, [pc, #80]	; (10e38 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
   10de8:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
   10dea:	687b      	ldr	r3, [r7, #4]
   10dec:	4a12      	ldr	r2, [pc, #72]	; (10e38 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
   10dee:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
   10df0:	687b      	ldr	r3, [r7, #4]
   10df2:	691a      	ldr	r2, [r3, #16]
   10df4:	687b      	ldr	r3, [r7, #4]
   10df6:	330c      	adds	r3, #12
   10df8:	4619      	mov	r1, r3
   10dfa:	4610      	mov	r0, r2
   10dfc:	4b0f      	ldr	r3, [pc, #60]	; (10e3c <_ZN14I2C_Sync_Class4InitEv+0x60>)
   10dfe:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
   10e00:	687b      	ldr	r3, [r7, #4]
   10e02:	691b      	ldr	r3, [r3, #16]
   10e04:	4618      	mov	r0, r3
   10e06:	4b0e      	ldr	r3, [pc, #56]	; (10e40 <_ZN14I2C_Sync_Class4InitEv+0x64>)
   10e08:	4798      	blx	r3
   10e0a:	4603      	mov	r3, r0
   10e0c:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
   10e0e:	7bfb      	ldrb	r3, [r7, #15]
   10e10:	2b00      	cmp	r3, #0
   10e12:	bf0c      	ite	eq
   10e14:	2301      	moveq	r3, #1
   10e16:	2300      	movne	r3, #0
   10e18:	b2da      	uxtb	r2, r3
   10e1a:	687b      	ldr	r3, [r7, #4]
   10e1c:	725a      	strb	r2, [r3, #9]
	initiated=isOK;
   10e1e:	687b      	ldr	r3, [r7, #4]
   10e20:	7a5b      	ldrb	r3, [r3, #9]
   10e22:	b2da      	uxtb	r2, r3
   10e24:	687b      	ldr	r3, [r7, #4]
   10e26:	721a      	strb	r2, [r3, #8]
	return isOK;
   10e28:	687b      	ldr	r3, [r7, #4]
   10e2a:	7a5b      	ldrb	r3, [r3, #9]
   10e2c:	b2db      	uxtb	r3, r3
	
}
   10e2e:	4618      	mov	r0, r3
   10e30:	3710      	adds	r7, #16
   10e32:	46bd      	mov	sp, r7
   10e34:	bd80      	pop	{r7, pc}
   10e36:	bf00      	nop
   10e38:	20007a90 	.word	0x20007a90
   10e3c:	00002b93 	.word	0x00002b93
   10e40:	00002b39 	.word	0x00002b39

00010e44 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
   10e44:	b580      	push	{r7, lr}
   10e46:	b082      	sub	sp, #8
   10e48:	af00      	add	r7, sp, #0
   10e4a:	6078      	str	r0, [r7, #4]
   10e4c:	460b      	mov	r3, r1
   10e4e:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
   10e50:	687b      	ldr	r3, [r7, #4]
   10e52:	691b      	ldr	r3, [r3, #16]
   10e54:	78fa      	ldrb	r2, [r7, #3]
   10e56:	b211      	sxth	r1, r2
   10e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10e5c:	4618      	mov	r0, r3
   10e5e:	4b03      	ldr	r3, [pc, #12]	; (10e6c <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
   10e60:	4798      	blx	r3
   10e62:	4603      	mov	r3, r0
}
   10e64:	4618      	mov	r0, r3
   10e66:	3708      	adds	r7, #8
   10e68:	46bd      	mov	sp, r7
   10e6a:	bd80      	pop	{r7, pc}
   10e6c:	00002b59 	.word	0x00002b59

00010e70 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
   10e70:	b580      	push	{r7, lr}
   10e72:	b086      	sub	sp, #24
   10e74:	af00      	add	r7, sp, #0
   10e76:	60f8      	str	r0, [r7, #12]
   10e78:	60b9      	str	r1, [r7, #8]
   10e7a:	4613      	mov	r3, r2
   10e7c:	80fb      	strh	r3, [r7, #6]
	Irq_Disable();
   10e7e:	68f8      	ldr	r0, [r7, #12]
   10e80:	4b08      	ldr	r3, [pc, #32]	; (10ea4 <_ZN14I2C_Sync_Class5WriteEPht+0x34>)
   10e82:	4798      	blx	r3
	int32_t w= io_write(I2C_io, buffer, lenght);
   10e84:	68fb      	ldr	r3, [r7, #12]
   10e86:	68db      	ldr	r3, [r3, #12]
   10e88:	88fa      	ldrh	r2, [r7, #6]
   10e8a:	68b9      	ldr	r1, [r7, #8]
   10e8c:	4618      	mov	r0, r3
   10e8e:	4b06      	ldr	r3, [pc, #24]	; (10ea8 <_ZN14I2C_Sync_Class5WriteEPht+0x38>)
   10e90:	4798      	blx	r3
   10e92:	6178      	str	r0, [r7, #20]
	Irq_Enable();
   10e94:	68f8      	ldr	r0, [r7, #12]
   10e96:	4b05      	ldr	r3, [pc, #20]	; (10eac <_ZN14I2C_Sync_Class5WriteEPht+0x3c>)
   10e98:	4798      	blx	r3
	return w;
   10e9a:	697b      	ldr	r3, [r7, #20]
}
   10e9c:	4618      	mov	r0, r3
   10e9e:	3718      	adds	r7, #24
   10ea0:	46bd      	mov	sp, r7
   10ea2:	bd80      	pop	{r7, pc}
   10ea4:	00010f09 	.word	0x00010f09
   10ea8:	000129a1 	.word	0x000129a1
   10eac:	00010ef1 	.word	0x00010ef1

00010eb0 <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
   10eb0:	b580      	push	{r7, lr}
   10eb2:	b086      	sub	sp, #24
   10eb4:	af00      	add	r7, sp, #0
   10eb6:	60f8      	str	r0, [r7, #12]
   10eb8:	60b9      	str	r1, [r7, #8]
   10eba:	4613      	mov	r3, r2
   10ebc:	80fb      	strh	r3, [r7, #6]
	Irq_Disable();
   10ebe:	68f8      	ldr	r0, [r7, #12]
   10ec0:	4b08      	ldr	r3, [pc, #32]	; (10ee4 <_ZN14I2C_Sync_Class4ReadEPht+0x34>)
   10ec2:	4798      	blx	r3
	int32_t r= io_read(I2C_io, buffer, lenght);
   10ec4:	68fb      	ldr	r3, [r7, #12]
   10ec6:	68db      	ldr	r3, [r3, #12]
   10ec8:	88fa      	ldrh	r2, [r7, #6]
   10eca:	68b9      	ldr	r1, [r7, #8]
   10ecc:	4618      	mov	r0, r3
   10ece:	4b06      	ldr	r3, [pc, #24]	; (10ee8 <_ZN14I2C_Sync_Class4ReadEPht+0x38>)
   10ed0:	4798      	blx	r3
   10ed2:	6178      	str	r0, [r7, #20]
	Irq_Enable();
   10ed4:	68f8      	ldr	r0, [r7, #12]
   10ed6:	4b05      	ldr	r3, [pc, #20]	; (10eec <_ZN14I2C_Sync_Class4ReadEPht+0x3c>)
   10ed8:	4798      	blx	r3
	return r;
   10eda:	697b      	ldr	r3, [r7, #20]
}
   10edc:	4618      	mov	r0, r3
   10ede:	3718      	adds	r7, #24
   10ee0:	46bd      	mov	sp, r7
   10ee2:	bd80      	pop	{r7, pc}
   10ee4:	00010f09 	.word	0x00010f09
   10ee8:	000129f1 	.word	0x000129f1
   10eec:	00010ef1 	.word	0x00010ef1

00010ef0 <_ZN14I2C_Sync_Class10Irq_EnableEv>:
	Irq_Disable();
	int32_t w= i2c_m_sync_cmd_write(ptrI2CDescr,cmd,buffer,lenght);
	Irq_Enable();
	return w;
}
void	I2C_Sync_Class::Irq_Enable(void){
   10ef0:	b480      	push	{r7}
   10ef2:	b083      	sub	sp, #12
   10ef4:	af00      	add	r7, sp, #0
   10ef6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   10ef8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   10efc:	b662      	cpsie	i
	__DMB();
	__enable_irq();
}
   10efe:	bf00      	nop
   10f00:	370c      	adds	r7, #12
   10f02:	46bd      	mov	sp, r7
   10f04:	bc80      	pop	{r7}
   10f06:	4770      	bx	lr

00010f08 <_ZN14I2C_Sync_Class11Irq_DisableEv>:
void	I2C_Sync_Class::Irq_Disable(void){
   10f08:	b480      	push	{r7}
   10f0a:	b083      	sub	sp, #12
   10f0c:	af00      	add	r7, sp, #0
   10f0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
   10f10:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   10f14:	b672      	cpsid	i
	__DMB();
	__disable_irq();
}
   10f16:	bf00      	nop
   10f18:	370c      	adds	r7, #12
   10f1a:	46bd      	mov	sp, r7
   10f1c:	bc80      	pop	{r7}
   10f1e:	4770      	bx	lr

00010f20 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
   10f20:	b480      	push	{r7}
   10f22:	b083      	sub	sp, #12
   10f24:	af00      	add	r7, sp, #0
   10f26:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
   10f28:	687b      	ldr	r3, [r7, #4]
   10f2a:	4618      	mov	r0, r3
   10f2c:	370c      	adds	r7, #12
   10f2e:	46bd      	mov	sp, r7
   10f30:	bc80      	pop	{r7}
   10f32:	4770      	bx	lr

00010f34 <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
   10f34:	b480      	push	{r7}
   10f36:	b083      	sub	sp, #12
   10f38:	af00      	add	r7, sp, #0
   10f3a:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
   10f3c:	687b      	ldr	r3, [r7, #4]
   10f3e:	4618      	mov	r0, r3
   10f40:	370c      	adds	r7, #12
   10f42:	46bd      	mov	sp, r7
   10f44:	bc80      	pop	{r7}
   10f46:	4770      	bx	lr

00010f48 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
   10f48:	b480      	push	{r7}
   10f4a:	b085      	sub	sp, #20
   10f4c:	af00      	add	r7, sp, #0
   10f4e:	6078      	str	r0, [r7, #4]
   10f50:	460b      	mov	r3, r1
   10f52:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
   10f54:	2300      	movs	r3, #0
   10f56:	73fb      	strb	r3, [r7, #15]
   10f58:	7bfb      	ldrb	r3, [r7, #15]
   10f5a:	2b01      	cmp	r3, #1
   10f5c:	dc13      	bgt.n	10f86 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
   10f5e:	7bfb      	ldrb	r3, [r7, #15]
   10f60:	78f9      	ldrb	r1, [r7, #3]
   10f62:	7bfa      	ldrb	r2, [r7, #15]
   10f64:	2080      	movs	r0, #128	; 0x80
   10f66:	fa40 f202 	asr.w	r2, r0, r2
   10f6a:	400a      	ands	r2, r1
   10f6c:	2a00      	cmp	r2, #0
   10f6e:	bfcc      	ite	gt
   10f70:	2201      	movgt	r2, #1
   10f72:	2200      	movle	r2, #0
   10f74:	b2d1      	uxtb	r1, r2
   10f76:	687a      	ldr	r2, [r7, #4]
   10f78:	4413      	add	r3, r2
   10f7a:	460a      	mov	r2, r1
   10f7c:	751a      	strb	r2, [r3, #20]
	for (uint8_t ii = 0; ii < 2; ii++)
   10f7e:	7bfb      	ldrb	r3, [r7, #15]
   10f80:	3301      	adds	r3, #1
   10f82:	73fb      	strb	r3, [r7, #15]
   10f84:	e7e8      	b.n	10f58 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
   10f86:	bf00      	nop
   10f88:	3714      	adds	r7, #20
   10f8a:	46bd      	mov	sp, r7
   10f8c:	bc80      	pop	{r7}
   10f8e:	4770      	bx	lr

00010f90 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
   10f90:	b480      	push	{r7}
   10f92:	b085      	sub	sp, #20
   10f94:	af00      	add	r7, sp, #0
   10f96:	6078      	str	r0, [r7, #4]
   10f98:	460b      	mov	r3, r1
   10f9a:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
   10f9c:	2300      	movs	r3, #0
   10f9e:	73fb      	strb	r3, [r7, #15]
   10fa0:	7bfb      	ldrb	r3, [r7, #15]
   10fa2:	2b02      	cmp	r3, #2
   10fa4:	dc15      	bgt.n	10fd2 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
   10fa6:	7bfb      	ldrb	r3, [r7, #15]
   10fa8:	f1c3 0302 	rsb	r3, r3, #2
   10fac:	78f9      	ldrb	r1, [r7, #3]
   10fae:	7bfa      	ldrb	r2, [r7, #15]
   10fb0:	2020      	movs	r0, #32
   10fb2:	fa40 f202 	asr.w	r2, r0, r2
   10fb6:	400a      	ands	r2, r1
   10fb8:	2a00      	cmp	r2, #0
   10fba:	bfcc      	ite	gt
   10fbc:	2201      	movgt	r2, #1
   10fbe:	2200      	movle	r2, #0
   10fc0:	b2d1      	uxtb	r1, r2
   10fc2:	687a      	ldr	r2, [r7, #4]
   10fc4:	4413      	add	r3, r2
   10fc6:	460a      	mov	r2, r1
   10fc8:	759a      	strb	r2, [r3, #22]
	for (uint8_t ii = 0; ii < 3; ii++)
   10fca:	7bfb      	ldrb	r3, [r7, #15]
   10fcc:	3301      	adds	r3, #1
   10fce:	73fb      	strb	r3, [r7, #15]
   10fd0:	e7e6      	b.n	10fa0 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
   10fd2:	bf00      	nop
   10fd4:	3714      	adds	r7, #20
   10fd6:	46bd      	mov	sp, r7
   10fd8:	bc80      	pop	{r7}
   10fda:	4770      	bx	lr

00010fdc <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
   10fdc:	b580      	push	{r7, lr}
   10fde:	b084      	sub	sp, #16
   10fe0:	af00      	add	r7, sp, #0
   10fe2:	60f8      	str	r0, [r7, #12]
   10fe4:	60b9      	str	r1, [r7, #8]
   10fe6:	4613      	mov	r3, r2
   10fe8:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
   10fea:	79fb      	ldrb	r3, [r7, #7]
   10fec:	4619      	mov	r1, r3
   10fee:	68b8      	ldr	r0, [r7, #8]
   10ff0:	4b0d      	ldr	r3, [pc, #52]	; (11028 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
   10ff2:	4798      	blx	r3
	FillLimitSwitch(v);
   10ff4:	79fb      	ldrb	r3, [r7, #7]
   10ff6:	4619      	mov	r1, r3
   10ff8:	68b8      	ldr	r0, [r7, #8]
   10ffa:	4b0c      	ldr	r3, [pc, #48]	; (1102c <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
   10ffc:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
   10ffe:	79fb      	ldrb	r3, [r7, #7]
   11000:	f003 0301 	and.w	r3, r3, #1
   11004:	2b00      	cmp	r3, #0
   11006:	bfcc      	ite	gt
   11008:	2301      	movgt	r3, #1
   1100a:	2300      	movle	r3, #0
   1100c:	b2da      	uxtb	r2, r3
   1100e:	68bb      	ldr	r3, [r7, #8]
   11010:	765a      	strb	r2, [r3, #25]
	return controlStatus;
   11012:	68fa      	ldr	r2, [r7, #12]
   11014:	68bb      	ldr	r3, [r7, #8]
   11016:	3314      	adds	r3, #20
   11018:	6819      	ldr	r1, [r3, #0]
   1101a:	6011      	str	r1, [r2, #0]
   1101c:	889b      	ldrh	r3, [r3, #4]
   1101e:	8093      	strh	r3, [r2, #4]
}
   11020:	68f8      	ldr	r0, [r7, #12]
   11022:	3710      	adds	r7, #16
   11024:	46bd      	mov	sp, r7
   11026:	bd80      	pop	{r7, pc}
   11028:	00010f49 	.word	0x00010f49
   1102c:	00010f91 	.word	0x00010f91

00011030 <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
   11030:	b480      	push	{r7}
   11032:	b085      	sub	sp, #20
   11034:	af00      	add	r7, sp, #0
   11036:	60f8      	str	r0, [r7, #12]
   11038:	60b9      	str	r1, [r7, #8]
   1103a:	4613      	mov	r3, r2
   1103c:	71fb      	strb	r3, [r7, #7]
	
	if ( (STANDALONE > 0 )&(!controlStatus.cabin[1]))
   1103e:	68bb      	ldr	r3, [r7, #8]
   11040:	7d5b      	ldrb	r3, [r3, #21]
   11042:	f083 0301 	eor.w	r3, r3, #1
   11046:	b2db      	uxtb	r3, r3
   11048:	f003 0301 	and.w	r3, r3, #1
   1104c:	2b00      	cmp	r3, #0
   1104e:	d004      	beq.n	1105a <_ZN22FlapperValveDataStruct18FillControlOutputsEh+0x2a>
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
   11050:	68bb      	ldr	r3, [r7, #8]
   11052:	7d1a      	ldrb	r2, [r3, #20]
   11054:	68bb      	ldr	r3, [r7, #8]
   11056:	769a      	strb	r2, [r3, #26]
   11058:	e009      	b.n	1106e <_ZN22FlapperValveDataStruct18FillControlOutputsEh+0x3e>
	} 
	else
	{
		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
   1105a:	79fb      	ldrb	r3, [r7, #7]
   1105c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11060:	2b00      	cmp	r3, #0
   11062:	bfcc      	ite	gt
   11064:	2301      	movgt	r3, #1
   11066:	2300      	movle	r3, #0
   11068:	b2da      	uxtb	r2, r3
   1106a:	68bb      	ldr	r3, [r7, #8]
   1106c:	769a      	strb	r2, [r3, #26]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
   1106e:	79fb      	ldrb	r3, [r7, #7]
   11070:	f003 0340 	and.w	r3, r3, #64	; 0x40
   11074:	2b00      	cmp	r3, #0
   11076:	bfcc      	ite	gt
   11078:	2301      	movgt	r3, #1
   1107a:	2300      	movle	r3, #0
   1107c:	b2da      	uxtb	r2, r3
   1107e:	68bb      	ldr	r3, [r7, #8]
   11080:	76da      	strb	r2, [r3, #27]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
   11082:	79fb      	ldrb	r3, [r7, #7]
   11084:	f003 0320 	and.w	r3, r3, #32
   11088:	2b00      	cmp	r3, #0
   1108a:	bfcc      	ite	gt
   1108c:	2301      	movgt	r3, #1
   1108e:	2300      	movle	r3, #0
   11090:	b2da      	uxtb	r2, r3
   11092:	68bb      	ldr	r3, [r7, #8]
   11094:	775a      	strb	r2, [r3, #29]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
   11096:	79fb      	ldrb	r3, [r7, #7]
   11098:	f003 0310 	and.w	r3, r3, #16
   1109c:	2b00      	cmp	r3, #0
   1109e:	bfcc      	ite	gt
   110a0:	2301      	movgt	r3, #1
   110a2:	2300      	movle	r3, #0
   110a4:	b2da      	uxtb	r2, r3
   110a6:	68bb      	ldr	r3, [r7, #8]
   110a8:	771a      	strb	r2, [r3, #28]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
   110aa:	79fb      	ldrb	r3, [r7, #7]
   110ac:	f003 0308 	and.w	r3, r3, #8
   110b0:	2b00      	cmp	r3, #0
   110b2:	bfcc      	ite	gt
   110b4:	2301      	movgt	r3, #1
   110b6:	2300      	movle	r3, #0
   110b8:	b2da      	uxtb	r2, r3
   110ba:	68bb      	ldr	r3, [r7, #8]
   110bc:	779a      	strb	r2, [r3, #30]
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
   110be:	79fb      	ldrb	r3, [r7, #7]
   110c0:	f003 0304 	and.w	r3, r3, #4
   110c4:	2b00      	cmp	r3, #0
   110c6:	bfcc      	ite	gt
   110c8:	2301      	movgt	r3, #1
   110ca:	2300      	movle	r3, #0
   110cc:	b2da      	uxtb	r2, r3
   110ce:	68bb      	ldr	r3, [r7, #8]
   110d0:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
   110d2:	79fb      	ldrb	r3, [r7, #7]
   110d4:	f003 0302 	and.w	r3, r3, #2
   110d8:	2b00      	cmp	r3, #0
   110da:	bfcc      	ite	gt
   110dc:	2301      	movgt	r3, #1
   110de:	2300      	movle	r3, #0
   110e0:	b2da      	uxtb	r2, r3
   110e2:	68bb      	ldr	r3, [r7, #8]
   110e4:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
   110e8:	79fb      	ldrb	r3, [r7, #7]
   110ea:	f003 0301 	and.w	r3, r3, #1
   110ee:	2b00      	cmp	r3, #0
   110f0:	bfcc      	ite	gt
   110f2:	2301      	movgt	r3, #1
   110f4:	2300      	movle	r3, #0
   110f6:	b2da      	uxtb	r2, r3
   110f8:	68bb      	ldr	r3, [r7, #8]
   110fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return controlOutputs;
   110fe:	68fa      	ldr	r2, [r7, #12]
   11100:	68bb      	ldr	r3, [r7, #8]
   11102:	331a      	adds	r3, #26
   11104:	6819      	ldr	r1, [r3, #0]
   11106:	685b      	ldr	r3, [r3, #4]
   11108:	6011      	str	r1, [r2, #0]
   1110a:	6053      	str	r3, [r2, #4]
   1110c:	68f8      	ldr	r0, [r7, #12]
   1110e:	3714      	adds	r7, #20
   11110:	46bd      	mov	sp, r7
   11112:	bc80      	pop	{r7}
   11114:	4770      	bx	lr

00011116 <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   11116:	b480      	push	{r7}
   11118:	b083      	sub	sp, #12
   1111a:	af00      	add	r7, sp, #0
   1111c:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   1111e:	687b      	ldr	r3, [r7, #4]
   11120:	4618      	mov	r0, r3
   11122:	370c      	adds	r7, #12
   11124:	46bd      	mov	sp, r7
   11126:	bc80      	pop	{r7}
   11128:	4770      	bx	lr

0001112a <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   1112a:	b480      	push	{r7}
   1112c:	b083      	sub	sp, #12
   1112e:	af00      	add	r7, sp, #0
   11130:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   11132:	687b      	ldr	r3, [r7, #4]
   11134:	4618      	mov	r0, r3
   11136:	370c      	adds	r7, #12
   11138:	46bd      	mov	sp, r7
   1113a:	bc80      	pop	{r7}
   1113c:	4770      	bx	lr

0001113e <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
   1113e:	b480      	push	{r7}
   11140:	b085      	sub	sp, #20
   11142:	af00      	add	r7, sp, #0
   11144:	60f8      	str	r0, [r7, #12]
   11146:	460b      	mov	r3, r1
   11148:	607a      	str	r2, [r7, #4]
   1114a:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
   1114c:	687b      	ldr	r3, [r7, #4]
   1114e:	681a      	ldr	r2, [r3, #0]
   11150:	68fb      	ldr	r3, [r7, #12]
   11152:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
   11154:	687b      	ldr	r3, [r7, #4]
   11156:	685a      	ldr	r2, [r3, #4]
   11158:	68fb      	ldr	r3, [r7, #12]
   1115a:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
   1115c:	68fb      	ldr	r3, [r7, #12]
   1115e:	7afa      	ldrb	r2, [r7, #11]
   11160:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
   11162:	68fb      	ldr	r3, [r7, #12]
   11164:	687a      	ldr	r2, [r7, #4]
   11166:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
   11168:	68fb      	ldr	r3, [r7, #12]
   1116a:	68db      	ldr	r3, [r3, #12]
   1116c:	7a5b      	ldrb	r3, [r3, #9]
   1116e:	b2da      	uxtb	r2, r3
   11170:	68fb      	ldr	r3, [r7, #12]
   11172:	719a      	strb	r2, [r3, #6]
	return isOK;
   11174:	68fb      	ldr	r3, [r7, #12]
   11176:	799b      	ldrb	r3, [r3, #6]
   11178:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   1117a:	4618      	mov	r0, r3
   1117c:	3714      	adds	r7, #20
   1117e:	46bd      	mov	sp, r7
   11180:	bc80      	pop	{r7}
   11182:	4770      	bx	lr

00011184 <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
   11184:	b480      	push	{r7}
   11186:	b083      	sub	sp, #12
   11188:	af00      	add	r7, sp, #0
   1118a:	6078      	str	r0, [r7, #4]
   1118c:	460b      	mov	r3, r1
   1118e:	70fb      	strb	r3, [r7, #3]
    return pin%8;
   11190:	78fb      	ldrb	r3, [r7, #3]
   11192:	f003 0307 	and.w	r3, r3, #7
   11196:	b2db      	uxtb	r3, r3
}
   11198:	4618      	mov	r0, r3
   1119a:	370c      	adds	r7, #12
   1119c:	46bd      	mov	sp, r7
   1119e:	bc80      	pop	{r7}
   111a0:	4770      	bx	lr

000111a2 <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
   111a2:	b480      	push	{r7}
   111a4:	b083      	sub	sp, #12
   111a6:	af00      	add	r7, sp, #0
   111a8:	6078      	str	r0, [r7, #4]
   111aa:	4608      	mov	r0, r1
   111ac:	4611      	mov	r1, r2
   111ae:	461a      	mov	r2, r3
   111b0:	4603      	mov	r3, r0
   111b2:	70fb      	strb	r3, [r7, #3]
   111b4:	460b      	mov	r3, r1
   111b6:	70bb      	strb	r3, [r7, #2]
   111b8:	4613      	mov	r3, r2
   111ba:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
   111bc:	78fb      	ldrb	r3, [r7, #3]
   111be:	2b07      	cmp	r3, #7
   111c0:	dc01      	bgt.n	111c6 <_ZN14MCP23008_Class9regForPinEhhh+0x24>
   111c2:	78bb      	ldrb	r3, [r7, #2]
   111c4:	e000      	b.n	111c8 <_ZN14MCP23008_Class9regForPinEhhh+0x26>
   111c6:	787b      	ldrb	r3, [r7, #1]
}
   111c8:	4618      	mov	r0, r3
   111ca:	370c      	adds	r7, #12
   111cc:	46bd      	mov	sp, r7
   111ce:	bc80      	pop	{r7}
   111d0:	4770      	bx	lr
	...

000111d4 <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
   111d4:	b580      	push	{r7, lr}
   111d6:	b082      	sub	sp, #8
   111d8:	af00      	add	r7, sp, #0
   111da:	6078      	str	r0, [r7, #4]
   111dc:	460b      	mov	r3, r1
   111de:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
   111e0:	687b      	ldr	r3, [r7, #4]
   111e2:	68da      	ldr	r2, [r3, #12]
   111e4:	687b      	ldr	r3, [r7, #4]
   111e6:	7a1b      	ldrb	r3, [r3, #8]
   111e8:	4619      	mov	r1, r3
   111ea:	4610      	mov	r0, r2
   111ec:	4b0a      	ldr	r3, [pc, #40]	; (11218 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
   111ee:	4798      	blx	r3
	i2cClass->Write(&addr,1);
   111f0:	687b      	ldr	r3, [r7, #4]
   111f2:	68db      	ldr	r3, [r3, #12]
   111f4:	1cf9      	adds	r1, r7, #3
   111f6:	2201      	movs	r2, #1
   111f8:	4618      	mov	r0, r3
   111fa:	4b08      	ldr	r3, [pc, #32]	; (1121c <_ZN14MCP23008_Class12readRegisterEh+0x48>)
   111fc:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
   111fe:	687b      	ldr	r3, [r7, #4]
   11200:	68db      	ldr	r3, [r3, #12]
   11202:	6879      	ldr	r1, [r7, #4]
   11204:	2201      	movs	r2, #1
   11206:	4618      	mov	r0, r3
   11208:	4b05      	ldr	r3, [pc, #20]	; (11220 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
   1120a:	4798      	blx	r3

	return registerValue;
   1120c:	687b      	ldr	r3, [r7, #4]
   1120e:	781b      	ldrb	r3, [r3, #0]
}
   11210:	4618      	mov	r0, r3
   11212:	3708      	adds	r7, #8
   11214:	46bd      	mov	sp, r7
   11216:	bd80      	pop	{r7, pc}
   11218:	00010e45 	.word	0x00010e45
   1121c:	00010e71 	.word	0x00010e71
   11220:	00010eb1 	.word	0x00010eb1

00011224 <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
   11224:	b580      	push	{r7, lr}
   11226:	b084      	sub	sp, #16
   11228:	af00      	add	r7, sp, #0
   1122a:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   1122c:	687b      	ldr	r3, [r7, #4]
   1122e:	68da      	ldr	r2, [r3, #12]
   11230:	687b      	ldr	r3, [r7, #4]
   11232:	7a1b      	ldrb	r3, [r3, #8]
   11234:	4619      	mov	r1, r3
   11236:	4610      	mov	r0, r2
   11238:	4b06      	ldr	r3, [pc, #24]	; (11254 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
   1123a:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
   1123c:	2109      	movs	r1, #9
   1123e:	6878      	ldr	r0, [r7, #4]
   11240:	4b05      	ldr	r3, [pc, #20]	; (11258 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
   11242:	4798      	blx	r3
   11244:	4603      	mov	r3, r0
   11246:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
   11248:	7bfb      	ldrb	r3, [r7, #15]
}
   1124a:	4618      	mov	r0, r3
   1124c:	3710      	adds	r7, #16
   1124e:	46bd      	mov	sp, r7
   11250:	bd80      	pop	{r7, pc}
   11252:	bf00      	nop
   11254:	00010e45 	.word	0x00010e45
   11258:	000111d5 	.word	0x000111d5

0001125c <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
   1125c:	b580      	push	{r7, lr}
   1125e:	b084      	sub	sp, #16
   11260:	af00      	add	r7, sp, #0
   11262:	6078      	str	r0, [r7, #4]
   11264:	460b      	mov	r3, r1
   11266:	70fb      	strb	r3, [r7, #3]
   11268:	4613      	mov	r3, r2
   1126a:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
   1126c:	687b      	ldr	r3, [r7, #4]
   1126e:	68da      	ldr	r2, [r3, #12]
   11270:	687b      	ldr	r3, [r7, #4]
   11272:	7a1b      	ldrb	r3, [r3, #8]
   11274:	4619      	mov	r1, r3
   11276:	4610      	mov	r0, r2
   11278:	4b09      	ldr	r3, [pc, #36]	; (112a0 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
   1127a:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
   1127c:	78fb      	ldrb	r3, [r7, #3]
   1127e:	733b      	strb	r3, [r7, #12]
	array[1]=value;
   11280:	78bb      	ldrb	r3, [r7, #2]
   11282:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
   11284:	687b      	ldr	r3, [r7, #4]
   11286:	68db      	ldr	r3, [r3, #12]
   11288:	f107 010c 	add.w	r1, r7, #12
   1128c:	2202      	movs	r2, #2
   1128e:	4618      	mov	r0, r3
   11290:	4b04      	ldr	r3, [pc, #16]	; (112a4 <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
   11292:	4798      	blx	r3
   11294:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
   11296:	4618      	mov	r0, r3
   11298:	3710      	adds	r7, #16
   1129a:	46bd      	mov	sp, r7
   1129c:	bd80      	pop	{r7, pc}
   1129e:	bf00      	nop
   112a0:	00010e45 	.word	0x00010e45
   112a4:	00010e71 	.word	0x00010e71

000112a8 <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
   112a8:	b580      	push	{r7, lr}
   112aa:	b082      	sub	sp, #8
   112ac:	af00      	add	r7, sp, #0
   112ae:	6078      	str	r0, [r7, #4]
   112b0:	460b      	mov	r3, r1
   112b2:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   112b4:	687b      	ldr	r3, [r7, #4]
   112b6:	68da      	ldr	r2, [r3, #12]
   112b8:	687b      	ldr	r3, [r7, #4]
   112ba:	7a1b      	ldrb	r3, [r3, #8]
   112bc:	4619      	mov	r1, r3
   112be:	4610      	mov	r0, r2
   112c0:	4b06      	ldr	r3, [pc, #24]	; (112dc <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
   112c2:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
   112c4:	78fb      	ldrb	r3, [r7, #3]
   112c6:	461a      	mov	r2, r3
   112c8:	2109      	movs	r1, #9
   112ca:	6878      	ldr	r0, [r7, #4]
   112cc:	4b04      	ldr	r3, [pc, #16]	; (112e0 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
   112ce:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
   112d0:	78fb      	ldrb	r3, [r7, #3]
}
   112d2:	4618      	mov	r0, r3
   112d4:	3708      	adds	r7, #8
   112d6:	46bd      	mov	sp, r7
   112d8:	bd80      	pop	{r7, pc}
   112da:	bf00      	nop
   112dc:	00010e45 	.word	0x00010e45
   112e0:	0001125d 	.word	0x0001125d

000112e4 <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
   112e4:	b580      	push	{r7, lr}
   112e6:	b084      	sub	sp, #16
   112e8:	af00      	add	r7, sp, #0
   112ea:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   112ec:	2300      	movs	r3, #0
   112ee:	73fb      	strb	r3, [r7, #15]
   112f0:	7bfb      	ldrb	r3, [r7, #15]
   112f2:	2b07      	cmp	r3, #7
   112f4:	dc0f      	bgt.n	11316 <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
   112f6:	7bfb      	ldrb	r3, [r7, #15]
   112f8:	2201      	movs	r2, #1
   112fa:	4619      	mov	r1, r3
   112fc:	6878      	ldr	r0, [r7, #4]
   112fe:	4b08      	ldr	r3, [pc, #32]	; (11320 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
   11300:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
   11302:	7bfb      	ldrb	r3, [r7, #15]
   11304:	2201      	movs	r2, #1
   11306:	4619      	mov	r1, r3
   11308:	6878      	ldr	r0, [r7, #4]
   1130a:	4b06      	ldr	r3, [pc, #24]	; (11324 <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
   1130c:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   1130e:	7bfb      	ldrb	r3, [r7, #15]
   11310:	3301      	adds	r3, #1
   11312:	73fb      	strb	r3, [r7, #15]
   11314:	e7ec      	b.n	112f0 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
   11316:	bf00      	nop
   11318:	3710      	adds	r7, #16
   1131a:	46bd      	mov	sp, r7
   1131c:	bd80      	pop	{r7, pc}
   1131e:	bf00      	nop
   11320:	0001145d 	.word	0x0001145d
   11324:	00011541 	.word	0x00011541

00011328 <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
   11328:	b580      	push	{r7, lr}
   1132a:	b084      	sub	sp, #16
   1132c:	af00      	add	r7, sp, #0
   1132e:	6078      	str	r0, [r7, #4]
   11330:	460b      	mov	r3, r1
   11332:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
   11334:	78fb      	ldrb	r3, [r7, #3]
   11336:	2b00      	cmp	r3, #0
   11338:	dd23      	ble.n	11382 <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
   1133a:	2300      	movs	r3, #0
   1133c:	73fb      	strb	r3, [r7, #15]
   1133e:	7bfb      	ldrb	r3, [r7, #15]
   11340:	2b07      	cmp	r3, #7
   11342:	dc21      	bgt.n	11388 <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
   11344:	78fa      	ldrb	r2, [r7, #3]
   11346:	7bfb      	ldrb	r3, [r7, #15]
   11348:	fa42 f303 	asr.w	r3, r2, r3
   1134c:	f003 0301 	and.w	r3, r3, #1
   11350:	2b00      	cmp	r3, #0
   11352:	d00c      	beq.n	1136e <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
   11354:	7bfb      	ldrb	r3, [r7, #15]
   11356:	2201      	movs	r2, #1
   11358:	4619      	mov	r1, r3
   1135a:	6878      	ldr	r0, [r7, #4]
   1135c:	4b0c      	ldr	r3, [pc, #48]	; (11390 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   1135e:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
   11360:	7bfb      	ldrb	r3, [r7, #15]
   11362:	2201      	movs	r2, #1
   11364:	4619      	mov	r1, r3
   11366:	6878      	ldr	r0, [r7, #4]
   11368:	4b0a      	ldr	r3, [pc, #40]	; (11394 <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
   1136a:	4798      	blx	r3
   1136c:	e005      	b.n	1137a <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
   1136e:	7bfb      	ldrb	r3, [r7, #15]
   11370:	2200      	movs	r2, #0
   11372:	4619      	mov	r1, r3
   11374:	6878      	ldr	r0, [r7, #4]
   11376:	4b06      	ldr	r3, [pc, #24]	; (11390 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   11378:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
   1137a:	7bfb      	ldrb	r3, [r7, #15]
   1137c:	3301      	adds	r3, #1
   1137e:	73fb      	strb	r3, [r7, #15]
   11380:	e7dd      	b.n	1133e <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
   11382:	6878      	ldr	r0, [r7, #4]
   11384:	4b04      	ldr	r3, [pc, #16]	; (11398 <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
   11386:	4798      	blx	r3
	}
	
}
   11388:	bf00      	nop
   1138a:	3710      	adds	r7, #16
   1138c:	46bd      	mov	sp, r7
   1138e:	bd80      	pop	{r7, pc}
   11390:	0001145d 	.word	0x0001145d
   11394:	00011541 	.word	0x00011541
   11398:	0001139d 	.word	0x0001139d

0001139c <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
   1139c:	b580      	push	{r7, lr}
   1139e:	b084      	sub	sp, #16
   113a0:	af00      	add	r7, sp, #0
   113a2:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   113a4:	2300      	movs	r3, #0
   113a6:	73fb      	strb	r3, [r7, #15]
   113a8:	7bfb      	ldrb	r3, [r7, #15]
   113aa:	2b07      	cmp	r3, #7
   113ac:	dc09      	bgt.n	113c2 <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
   113ae:	7bfb      	ldrb	r3, [r7, #15]
   113b0:	2200      	movs	r2, #0
   113b2:	4619      	mov	r1, r3
   113b4:	6878      	ldr	r0, [r7, #4]
   113b6:	4b05      	ldr	r3, [pc, #20]	; (113cc <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
   113b8:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   113ba:	7bfb      	ldrb	r3, [r7, #15]
   113bc:	3301      	adds	r3, #1
   113be:	73fb      	strb	r3, [r7, #15]
   113c0:	e7f2      	b.n	113a8 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
   113c2:	bf00      	nop
   113c4:	3710      	adds	r7, #16
   113c6:	46bd      	mov	sp, r7
   113c8:	bd80      	pop	{r7, pc}
   113ca:	bf00      	nop
   113cc:	0001145d 	.word	0x0001145d

000113d0 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   113d0:	b580      	push	{r7, lr}
   113d2:	b084      	sub	sp, #16
   113d4:	af00      	add	r7, sp, #0
   113d6:	6078      	str	r0, [r7, #4]
   113d8:	4608      	mov	r0, r1
   113da:	4611      	mov	r1, r2
   113dc:	461a      	mov	r2, r3
   113de:	4603      	mov	r3, r0
   113e0:	70fb      	strb	r3, [r7, #3]
   113e2:	460b      	mov	r3, r1
   113e4:	70bb      	strb	r3, [r7, #2]
   113e6:	4613      	mov	r3, r2
   113e8:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
   113ea:	787b      	ldrb	r3, [r7, #1]
   113ec:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   113ee:	78fb      	ldrb	r3, [r7, #3]
   113f0:	4619      	mov	r1, r3
   113f2:	6878      	ldr	r0, [r7, #4]
   113f4:	4b16      	ldr	r3, [pc, #88]	; (11450 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
   113f6:	4798      	blx	r3
   113f8:	4603      	mov	r3, r0
   113fa:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
   113fc:	7bfb      	ldrb	r3, [r7, #15]
   113fe:	4619      	mov	r1, r3
   11400:	6878      	ldr	r0, [r7, #4]
   11402:	4b14      	ldr	r3, [pc, #80]	; (11454 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
   11404:	4798      	blx	r3
   11406:	4603      	mov	r3, r0
   11408:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   1140a:	78bb      	ldrb	r3, [r7, #2]
   1140c:	2b00      	cmp	r3, #0
   1140e:	d009      	beq.n	11424 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
   11410:	7bba      	ldrb	r2, [r7, #14]
   11412:	7b7b      	ldrb	r3, [r7, #13]
   11414:	4619      	mov	r1, r3
   11416:	2301      	movs	r3, #1
   11418:	408b      	lsls	r3, r1
   1141a:	b2db      	uxtb	r3, r3
   1141c:	4313      	orrs	r3, r2
   1141e:	b2db      	uxtb	r3, r3
   11420:	73bb      	strb	r3, [r7, #14]
   11422:	e00a      	b.n	1143a <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
   11424:	7bba      	ldrb	r2, [r7, #14]
   11426:	7b7b      	ldrb	r3, [r7, #13]
   11428:	4619      	mov	r1, r3
   1142a:	2301      	movs	r3, #1
   1142c:	408b      	lsls	r3, r1
   1142e:	b2db      	uxtb	r3, r3
   11430:	43db      	mvns	r3, r3
   11432:	b2db      	uxtb	r3, r3
   11434:	4013      	ands	r3, r2
   11436:	b2db      	uxtb	r3, r3
   11438:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
   1143a:	7bba      	ldrb	r2, [r7, #14]
   1143c:	7bfb      	ldrb	r3, [r7, #15]
   1143e:	4619      	mov	r1, r3
   11440:	6878      	ldr	r0, [r7, #4]
   11442:	4b05      	ldr	r3, [pc, #20]	; (11458 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
   11444:	4798      	blx	r3
}
   11446:	bf00      	nop
   11448:	3710      	adds	r7, #16
   1144a:	46bd      	mov	sp, r7
   1144c:	bd80      	pop	{r7, pc}
   1144e:	bf00      	nop
   11450:	00011185 	.word	0x00011185
   11454:	000111d5 	.word	0x000111d5
   11458:	0001125d 	.word	0x0001125d

0001145c <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
   1145c:	b590      	push	{r4, r7, lr}
   1145e:	b085      	sub	sp, #20
   11460:	af02      	add	r7, sp, #8
   11462:	6078      	str	r0, [r7, #4]
   11464:	460b      	mov	r3, r1
   11466:	70fb      	strb	r3, [r7, #3]
   11468:	4613      	mov	r3, r2
   1146a:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
   1146c:	78bb      	ldrb	r3, [r7, #2]
   1146e:	2b01      	cmp	r3, #1
   11470:	bf0c      	ite	eq
   11472:	2301      	moveq	r3, #1
   11474:	2300      	movne	r3, #0
   11476:	b2db      	uxtb	r3, r3
   11478:	461a      	mov	r2, r3
   1147a:	78f9      	ldrb	r1, [r7, #3]
   1147c:	2300      	movs	r3, #0
   1147e:	9300      	str	r3, [sp, #0]
   11480:	2300      	movs	r3, #0
   11482:	6878      	ldr	r0, [r7, #4]
   11484:	4c02      	ldr	r4, [pc, #8]	; (11490 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
   11486:	47a0      	blx	r4
}
   11488:	bf00      	nop
   1148a:	370c      	adds	r7, #12
   1148c:	46bd      	mov	sp, r7
   1148e:	bd90      	pop	{r4, r7, pc}
   11490:	000113d1 	.word	0x000113d1

00011494 <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
   11494:	b590      	push	{r4, r7, lr}
   11496:	b085      	sub	sp, #20
   11498:	af00      	add	r7, sp, #0
   1149a:	6078      	str	r0, [r7, #4]
   1149c:	460b      	mov	r3, r1
   1149e:	70fb      	strb	r3, [r7, #3]
   114a0:	4613      	mov	r3, r2
   114a2:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
   114a4:	78fb      	ldrb	r3, [r7, #3]
   114a6:	4619      	mov	r1, r3
   114a8:	6878      	ldr	r0, [r7, #4]
   114aa:	4b21      	ldr	r3, [pc, #132]	; (11530 <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
   114ac:	4798      	blx	r3
   114ae:	4603      	mov	r3, r0
   114b0:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
   114b2:	78f9      	ldrb	r1, [r7, #3]
   114b4:	230a      	movs	r3, #10
   114b6:	220a      	movs	r2, #10
   114b8:	6878      	ldr	r0, [r7, #4]
   114ba:	4c1e      	ldr	r4, [pc, #120]	; (11534 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   114bc:	47a0      	blx	r4
   114be:	4603      	mov	r3, r0
   114c0:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
   114c2:	7bfb      	ldrb	r3, [r7, #15]
   114c4:	4619      	mov	r1, r3
   114c6:	6878      	ldr	r0, [r7, #4]
   114c8:	4b1b      	ldr	r3, [pc, #108]	; (11538 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
   114ca:	4798      	blx	r3
   114cc:	4603      	mov	r3, r0
   114ce:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
   114d0:	78bb      	ldrb	r3, [r7, #2]
   114d2:	2b00      	cmp	r3, #0
   114d4:	d009      	beq.n	114ea <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
   114d6:	7bba      	ldrb	r2, [r7, #14]
   114d8:	7b7b      	ldrb	r3, [r7, #13]
   114da:	4619      	mov	r1, r3
   114dc:	2301      	movs	r3, #1
   114de:	408b      	lsls	r3, r1
   114e0:	b2db      	uxtb	r3, r3
   114e2:	4313      	orrs	r3, r2
   114e4:	b2db      	uxtb	r3, r3
   114e6:	73bb      	strb	r3, [r7, #14]
   114e8:	e00a      	b.n	11500 <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
   114ea:	7bba      	ldrb	r2, [r7, #14]
   114ec:	7b7b      	ldrb	r3, [r7, #13]
   114ee:	4619      	mov	r1, r3
   114f0:	2301      	movs	r3, #1
   114f2:	408b      	lsls	r3, r1
   114f4:	b2db      	uxtb	r3, r3
   114f6:	43db      	mvns	r3, r3
   114f8:	b2db      	uxtb	r3, r3
   114fa:	4013      	ands	r3, r2
   114fc:	b2db      	uxtb	r3, r3
   114fe:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
   11500:	78f9      	ldrb	r1, [r7, #3]
   11502:	2309      	movs	r3, #9
   11504:	2209      	movs	r2, #9
   11506:	6878      	ldr	r0, [r7, #4]
   11508:	4c0a      	ldr	r4, [pc, #40]	; (11534 <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   1150a:	47a0      	blx	r4
   1150c:	4603      	mov	r3, r0
   1150e:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
   11510:	7bba      	ldrb	r2, [r7, #14]
   11512:	7bfb      	ldrb	r3, [r7, #15]
   11514:	4619      	mov	r1, r3
   11516:	6878      	ldr	r0, [r7, #4]
   11518:	4b08      	ldr	r3, [pc, #32]	; (1153c <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
   1151a:	4798      	blx	r3
   1151c:	4603      	mov	r3, r0
   1151e:	2b00      	cmp	r3, #0
   11520:	bf0c      	ite	eq
   11522:	2301      	moveq	r3, #1
   11524:	2300      	movne	r3, #0
   11526:	b2db      	uxtb	r3, r3
}
   11528:	4618      	mov	r0, r3
   1152a:	3714      	adds	r7, #20
   1152c:	46bd      	mov	sp, r7
   1152e:	bd90      	pop	{r4, r7, pc}
   11530:	00011185 	.word	0x00011185
   11534:	000111a3 	.word	0x000111a3
   11538:	000111d5 	.word	0x000111d5
   1153c:	0001125d 	.word	0x0001125d

00011540 <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
   11540:	b590      	push	{r4, r7, lr}
   11542:	b085      	sub	sp, #20
   11544:	af02      	add	r7, sp, #8
   11546:	6078      	str	r0, [r7, #4]
   11548:	460b      	mov	r3, r1
   1154a:	70fb      	strb	r3, [r7, #3]
   1154c:	4613      	mov	r3, r2
   1154e:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
   11550:	78ba      	ldrb	r2, [r7, #2]
   11552:	78f9      	ldrb	r1, [r7, #3]
   11554:	2306      	movs	r3, #6
   11556:	9300      	str	r3, [sp, #0]
   11558:	2306      	movs	r3, #6
   1155a:	6878      	ldr	r0, [r7, #4]
   1155c:	4c02      	ldr	r4, [pc, #8]	; (11568 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
   1155e:	47a0      	blx	r4
}
   11560:	bf00      	nop
   11562:	370c      	adds	r7, #12
   11564:	46bd      	mov	sp, r7
   11566:	bd90      	pop	{r4, r7, pc}
   11568:	000113d1 	.word	0x000113d1

0001156c <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
   1156c:	b480      	push	{r7}
   1156e:	b083      	sub	sp, #12
   11570:	af00      	add	r7, sp, #0
   11572:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
   11574:	4b04      	ldr	r3, [pc, #16]	; (11588 <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
   11576:	681b      	ldr	r3, [r3, #0]
   11578:	2201      	movs	r2, #1
   1157a:	709a      	strb	r2, [r3, #2]
	asm("nop");
   1157c:	bf00      	nop
}
   1157e:	bf00      	nop
   11580:	370c      	adds	r7, #12
   11582:	46bd      	mov	sp, r7
   11584:	bc80      	pop	{r7}
   11586:	4770      	bx	lr
   11588:	20007b10 	.word	0x20007b10

0001158c <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   1158c:	b480      	push	{r7}
   1158e:	b083      	sub	sp, #12
   11590:	af00      	add	r7, sp, #0
   11592:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   11594:	687b      	ldr	r3, [r7, #4]
   11596:	4618      	mov	r0, r3
   11598:	370c      	adds	r7, #12
   1159a:	46bd      	mov	sp, r7
   1159c:	bc80      	pop	{r7}
   1159e:	4770      	bx	lr

000115a0 <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   115a0:	b480      	push	{r7}
   115a2:	b083      	sub	sp, #12
   115a4:	af00      	add	r7, sp, #0
   115a6:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   115a8:	687b      	ldr	r3, [r7, #4]
   115aa:	4618      	mov	r0, r3
   115ac:	370c      	adds	r7, #12
   115ae:	46bd      	mov	sp, r7
   115b0:	bc80      	pop	{r7}
   115b2:	4770      	bx	lr

000115b4 <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
   115b4:	b580      	push	{r7, lr}
   115b6:	b084      	sub	sp, #16
   115b8:	af00      	add	r7, sp, #0
   115ba:	60f8      	str	r0, [r7, #12]
   115bc:	60b9      	str	r1, [r7, #8]
   115be:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
   115c0:	4a1c      	ldr	r2, [pc, #112]	; (11634 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
   115c2:	68fb      	ldr	r3, [r7, #12]
   115c4:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
   115c6:	68fb      	ldr	r3, [r7, #12]
   115c8:	68ba      	ldr	r2, [r7, #8]
   115ca:	659a      	str	r2, [r3, #88]	; 0x58
	spiLT=spiLite;
   115cc:	68fb      	ldr	r3, [r7, #12]
   115ce:	687a      	ldr	r2, [r7, #4]
   115d0:	621a      	str	r2, [r3, #32]
	rx=spiLT->rxLiteBuffer;
   115d2:	68fb      	ldr	r3, [r7, #12]
   115d4:	6a1b      	ldr	r3, [r3, #32]
   115d6:	68da      	ldr	r2, [r3, #12]
   115d8:	68fb      	ldr	r3, [r7, #12]
   115da:	62da      	str	r2, [r3, #44]	; 0x2c
	tx=spiLT->txLiteBuffer;
   115dc:	68fb      	ldr	r3, [r7, #12]
   115de:	6a1b      	ldr	r3, [r3, #32]
   115e0:	689a      	ldr	r2, [r3, #8]
   115e2:	68fb      	ldr	r3, [r7, #12]
   115e4:	629a      	str	r2, [r3, #40]	; 0x28
	auxTimer=&hvacTimer;
   115e6:	68fb      	ldr	r3, [r7, #12]
   115e8:	4a13      	ldr	r2, [pc, #76]	; (11638 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
   115ea:	631a      	str	r2, [r3, #48]	; 0x30
	activeChannels[0]=4;
   115ec:	68fb      	ldr	r3, [r7, #12]
   115ee:	2204      	movs	r2, #4
   115f0:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=9;
   115f2:	68fb      	ldr	r3, [r7, #12]
   115f4:	2209      	movs	r2, #9
   115f6:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=14;
   115f8:	68fb      	ldr	r3, [r7, #12]
   115fa:	220e      	movs	r2, #14
   115fc:	715a      	strb	r2, [r3, #5]
	activeChannels[3]=19;
   115fe:	68fb      	ldr	r3, [r7, #12]
   11600:	2213      	movs	r2, #19
   11602:	719a      	strb	r2, [r3, #6]
	delay_ms(200);
   11604:	20c8      	movs	r0, #200	; 0xc8
   11606:	4b0d      	ldr	r3, [pc, #52]	; (1163c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
   11608:	4798      	blx	r3
	temperatureTimer.Init();
   1160a:	480d      	ldr	r0, [pc, #52]	; (11640 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
   1160c:	4b0d      	ldr	r3, [pc, #52]	; (11644 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
   1160e:	4798      	blx	r3
	configure_channels();
   11610:	68f8      	ldr	r0, [r7, #12]
   11612:	4b0d      	ldr	r3, [pc, #52]	; (11648 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
   11614:	4798      	blx	r3
	configure_global_parameters();
   11616:	68f8      	ldr	r0, [r7, #12]
   11618:	4b0c      	ldr	r3, [pc, #48]	; (1164c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x98>)
   1161a:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
   1161c:	68fb      	ldr	r3, [r7, #12]
   1161e:	2201      	movs	r2, #1
   11620:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
   11622:	68f8      	ldr	r0, [r7, #12]
   11624:	4b0a      	ldr	r3, [pc, #40]	; (11650 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x9c>)
   11626:	4798      	blx	r3
   11628:	4603      	mov	r3, r0
}
   1162a:	4618      	mov	r0, r3
   1162c:	3710      	adds	r7, #16
   1162e:	46bd      	mov	sp, r7
   11630:	bd80      	pop	{r7, pc}
   11632:	bf00      	nop
   11634:	20007b10 	.word	0x20007b10
   11638:	20000f50 	.word	0x20000f50
   1163c:	000027c9 	.word	0x000027c9
   11640:	20000f18 	.word	0x20000f18
   11644:	0000d969 	.word	0x0000d969
   11648:	00011a5d 	.word	0x00011a5d
   1164c:	00011b15 	.word	0x00011b15
   11650:	00011b4d 	.word	0x00011b4d

00011654 <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
   11654:	b590      	push	{r4, r7, lr}
   11656:	b089      	sub	sp, #36	; 0x24
   11658:	af02      	add	r7, sp, #8
   1165a:	60f8      	str	r0, [r7, #12]
   1165c:	60b9      	str	r1, [r7, #8]
   1165e:	603b      	str	r3, [r7, #0]
   11660:	4613      	mov	r3, r2
   11662:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
   11664:	79fb      	ldrb	r3, [r7, #7]
   11666:	461a      	mov	r2, r3
   11668:	f44f 7100 	mov.w	r1, #512	; 0x200
   1166c:	68f8      	ldr	r0, [r7, #12]
   1166e:	4b0b      	ldr	r3, [pc, #44]	; (1169c <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
   11670:	4798      	blx	r3
   11672:	4603      	mov	r3, r0
   11674:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
   11676:	8afa      	ldrh	r2, [r7, #22]
   11678:	683b      	ldr	r3, [r7, #0]
   1167a:	9300      	str	r3, [sp, #0]
   1167c:	4613      	mov	r3, r2
   1167e:	2202      	movs	r2, #2
   11680:	68b9      	ldr	r1, [r7, #8]
   11682:	68f8      	ldr	r0, [r7, #12]
   11684:	4c06      	ldr	r4, [pc, #24]	; (116a0 <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
   11686:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
   11688:	8afb      	ldrh	r3, [r7, #22]
   1168a:	79fa      	ldrb	r2, [r7, #7]
   1168c:	68b9      	ldr	r1, [r7, #8]
   1168e:	68f8      	ldr	r0, [r7, #12]
   11690:	4c04      	ldr	r4, [pc, #16]	; (116a4 <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
   11692:	47a0      	blx	r4
}
   11694:	bf00      	nop
   11696:	371c      	adds	r7, #28
   11698:	46bd      	mov	sp, r7
   1169a:	bd90      	pop	{r4, r7, pc}
   1169c:	00011a31 	.word	0x00011a31
   116a0:	000118f1 	.word	0x000118f1
   116a4:	000116f5 	.word	0x000116f5

000116a8 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
   116a8:	b590      	push	{r4, r7, lr}
   116aa:	b087      	sub	sp, #28
   116ac:	af02      	add	r7, sp, #8
   116ae:	6078      	str	r0, [r7, #4]
   116b0:	460b      	mov	r3, r1
   116b2:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
   116b4:	78fb      	ldrb	r3, [r7, #3]
   116b6:	687a      	ldr	r2, [r7, #4]
   116b8:	4413      	add	r3, r2
   116ba:	78db      	ldrb	r3, [r3, #3]
   116bc:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
   116be:	687b      	ldr	r3, [r7, #4]
   116c0:	2200      	movs	r2, #0
   116c2:	705a      	strb	r2, [r3, #1]
	ready=false;
   116c4:	687b      	ldr	r3, [r7, #4]
   116c6:	2200      	movs	r2, #0
   116c8:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
   116ca:	687b      	ldr	r3, [r7, #4]
   116cc:	6d99      	ldr	r1, [r3, #88]	; 0x58
   116ce:	7bfb      	ldrb	r3, [r7, #15]
   116d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   116d4:	b2db      	uxtb	r3, r3
   116d6:	9300      	str	r3, [sp, #0]
   116d8:	2300      	movs	r3, #0
   116da:	2202      	movs	r2, #2
   116dc:	6878      	ldr	r0, [r7, #4]
   116de:	4c04      	ldr	r4, [pc, #16]	; (116f0 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
   116e0:	47a0      	blx	r4
	channelOnProcess=channel_number;
   116e2:	687b      	ldr	r3, [r7, #4]
   116e4:	7bfa      	ldrb	r2, [r7, #15]
   116e6:	721a      	strb	r2, [r3, #8]
	//wait_for_process_to_finish(chip_select);
}
   116e8:	bf00      	nop
   116ea:	3714      	adds	r7, #20
   116ec:	46bd      	mov	sp, r7
   116ee:	bd90      	pop	{r4, r7, pc}
   116f0:	000119c1 	.word	0x000119c1

000116f4 <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
   116f4:	b590      	push	{r4, r7, lr}
   116f6:	b089      	sub	sp, #36	; 0x24
   116f8:	af02      	add	r7, sp, #8
   116fa:	60f8      	str	r0, [r7, #12]
   116fc:	60b9      	str	r1, [r7, #8]
   116fe:	4611      	mov	r1, r2
   11700:	461a      	mov	r2, r3
   11702:	460b      	mov	r3, r1
   11704:	71fb      	strb	r3, [r7, #7]
   11706:	4613      	mov	r3, r2
   11708:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
   1170a:	88ba      	ldrh	r2, [r7, #4]
   1170c:	2300      	movs	r3, #0
   1170e:	9300      	str	r3, [sp, #0]
   11710:	4613      	mov	r3, r2
   11712:	2203      	movs	r2, #3
   11714:	68b9      	ldr	r1, [r7, #8]
   11716:	68f8      	ldr	r0, [r7, #12]
   11718:	4c03      	ldr	r4, [pc, #12]	; (11728 <_ZN13LTC2983_Class20print_config_channelEmht+0x34>)
   1171a:	47a0      	blx	r4
   1171c:	6178      	str	r0, [r7, #20]
	// 24 LSB's are conversion result
	
// 	usb<<"register value: ";
// 	usb.println(raw_data,HEX);
	
}
   1171e:	bf00      	nop
   11720:	371c      	adds	r7, #28
   11722:	46bd      	mov	sp, r7
   11724:	bd90      	pop	{r4, r7, pc}
   11726:	bf00      	nop
   11728:	000118f1 	.word	0x000118f1

0001172c <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
   1172c:	b590      	push	{r4, r7, lr}
   1172e:	b085      	sub	sp, #20
   11730:	af02      	add	r7, sp, #8
   11732:	6078      	str	r0, [r7, #4]
   11734:	460b      	mov	r3, r1
   11736:	70fb      	strb	r3, [r7, #3]
   11738:	4613      	mov	r3, r2
   1173a:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
   1173c:	78fb      	ldrb	r3, [r7, #3]
   1173e:	461a      	mov	r2, r3
   11740:	2110      	movs	r1, #16
   11742:	6878      	ldr	r0, [r7, #4]
   11744:	4b17      	ldr	r3, [pc, #92]	; (117a4 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
   11746:	4798      	blx	r3
   11748:	4603      	mov	r3, r0
   1174a:	461a      	mov	r2, r3
   1174c:	687b      	ldr	r3, [r7, #4]
   1174e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
   11752:	687b      	ldr	r3, [r7, #4]
   11754:	6d99      	ldr	r1, [r3, #88]	; 0x58
   11756:	687b      	ldr	r3, [r7, #4]
   11758:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   1175c:	2300      	movs	r3, #0
   1175e:	9300      	str	r3, [sp, #0]
   11760:	4613      	mov	r3, r2
   11762:	2203      	movs	r2, #3
   11764:	6878      	ldr	r0, [r7, #4]
   11766:	4c10      	ldr	r4, [pc, #64]	; (117a8 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
   11768:	47a0      	blx	r4
   1176a:	4602      	mov	r2, r0
   1176c:	687b      	ldr	r3, [r7, #4]
   1176e:	655a      	str	r2, [r3, #84]	; 0x54


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
   11770:	687b      	ldr	r3, [r7, #4]
   11772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   11774:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   11778:	687b      	ldr	r3, [r7, #4]
   1177a:	651a      	str	r2, [r3, #80]	; 0x50
	ConvertResult(raw_conversion_result, channel_number, channel_output);
   1177c:	687b      	ldr	r3, [r7, #4]
   1177e:	6d19      	ldr	r1, [r3, #80]	; 0x50
   11780:	78bb      	ldrb	r3, [r7, #2]
   11782:	78fa      	ldrb	r2, [r7, #3]
   11784:	6878      	ldr	r0, [r7, #4]
   11786:	4c09      	ldr	r4, [pc, #36]	; (117ac <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
   11788:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
   1178a:	687b      	ldr	r3, [r7, #4]
   1178c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1178e:	0e1b      	lsrs	r3, r3, #24
   11790:	b2da      	uxtb	r2, r3
   11792:	687b      	ldr	r3, [r7, #4]
   11794:	71da      	strb	r2, [r3, #7]
	return scaled_result;
   11796:	687b      	ldr	r3, [r7, #4]
   11798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
   1179a:	4618      	mov	r0, r3
   1179c:	370c      	adds	r7, #12
   1179e:	46bd      	mov	sp, r7
   117a0:	bd90      	pop	{r4, r7, pc}
   117a2:	bf00      	nop
   117a4:	00011a31 	.word	0x00011a31
   117a8:	000118f1 	.word	0x000118f1
   117ac:	00011805 	.word	0x00011805

000117b0 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
   117b0:	b580      	push	{r7, lr}
   117b2:	b082      	sub	sp, #8
   117b4:	af00      	add	r7, sp, #0
   117b6:	6078      	str	r0, [r7, #4]
   117b8:	460b      	mov	r3, r1
   117ba:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
   117bc:	78fb      	ldrb	r3, [r7, #3]
   117be:	687a      	ldr	r2, [r7, #4]
   117c0:	4413      	add	r3, r2
   117c2:	78db      	ldrb	r3, [r3, #3]
   117c4:	4619      	mov	r1, r3
   117c6:	6878      	ldr	r0, [r7, #4]
   117c8:	4b03      	ldr	r3, [pc, #12]	; (117d8 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
   117ca:	4798      	blx	r3
   117cc:	4603      	mov	r3, r0
}
   117ce:	4618      	mov	r0, r3
   117d0:	3708      	adds	r7, #8
   117d2:	46bd      	mov	sp, r7
   117d4:	bd80      	pop	{r7, pc}
   117d6:	bf00      	nop
   117d8:	000117dd 	.word	0x000117dd

000117dc <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
   117dc:	b580      	push	{r7, lr}
   117de:	b082      	sub	sp, #8
   117e0:	af00      	add	r7, sp, #0
   117e2:	6078      	str	r0, [r7, #4]
   117e4:	460b      	mov	r3, r1
   117e6:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
   117e8:	78fb      	ldrb	r3, [r7, #3]
   117ea:	2202      	movs	r2, #2
   117ec:	4619      	mov	r1, r3
   117ee:	6878      	ldr	r0, [r7, #4]
   117f0:	4b03      	ldr	r3, [pc, #12]	; (11800 <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
   117f2:	4798      	blx	r3
   117f4:	4603      	mov	r3, r0
}
   117f6:	4618      	mov	r0, r3
   117f8:	3708      	adds	r7, #8
   117fa:	46bd      	mov	sp, r7
   117fc:	bd80      	pop	{r7, pc}
   117fe:	bf00      	nop
   11800:	0001172d 	.word	0x0001172d

00011804 <_ZN13LTC2983_Class13ConvertResultEmhh>:
// 		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
   11804:	b580      	push	{r7, lr}
   11806:	b084      	sub	sp, #16
   11808:	af00      	add	r7, sp, #0
   1180a:	60f8      	str	r0, [r7, #12]
   1180c:	60b9      	str	r1, [r7, #8]
   1180e:	4611      	mov	r1, r2
   11810:	461a      	mov	r2, r3
   11812:	460b      	mov	r3, r1
   11814:	71fb      	strb	r3, [r7, #7]
   11816:	4613      	mov	r3, r2
   11818:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
   1181a:	68ba      	ldr	r2, [r7, #8]
   1181c:	68fb      	ldr	r3, [r7, #12]
   1181e:	661a      	str	r2, [r3, #96]	; 0x60
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
   11820:	68fb      	ldr	r3, [r7, #12]
   11822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   11828:	2b00      	cmp	r3, #0
   1182a:	d006      	beq.n	1183a <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
   1182c:	68fb      	ldr	r3, [r7, #12]
   1182e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   11834:	461a      	mov	r2, r3
   11836:	68fb      	ldr	r3, [r7, #12]
   11838:	661a      	str	r2, [r3, #96]	; 0x60

	// Translate and print result
	if (channel_output == TEMPERATURE)
   1183a:	79bb      	ldrb	r3, [r7, #6]
   1183c:	2b02      	cmp	r3, #2
   1183e:	d11d      	bne.n	1187c <_ZN13LTC2983_Class13ConvertResultEmhh+0x78>
	{
		scaled_result= float(signed_data) / 1024;
   11840:	68fb      	ldr	r3, [r7, #12]
   11842:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   11844:	4b18      	ldr	r3, [pc, #96]	; (118a8 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   11846:	4610      	mov	r0, r2
   11848:	4798      	blx	r3
   1184a:	4602      	mov	r2, r0
   1184c:	4b17      	ldr	r3, [pc, #92]	; (118ac <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   1184e:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
   11852:	4610      	mov	r0, r2
   11854:	4798      	blx	r3
   11856:	4603      	mov	r3, r0
   11858:	461a      	mov	r2, r3
   1185a:	68fb      	ldr	r3, [r7, #12]
   1185c:	65da      	str	r2, [r3, #92]	; 0x5c
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
   1185e:	79fb      	ldrb	r3, [r7, #7]
   11860:	4619      	mov	r1, r3
   11862:	68f8      	ldr	r0, [r7, #12]
   11864:	4b12      	ldr	r3, [pc, #72]	; (118b0 <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
   11866:	4798      	blx	r3
   11868:	4603      	mov	r3, r0
   1186a:	4618      	mov	r0, r3
   1186c:	68fb      	ldr	r3, [r7, #12]
   1186e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   11870:	68f9      	ldr	r1, [r7, #12]
   11872:	1c83      	adds	r3, r0, #2
   11874:	009b      	lsls	r3, r3, #2
   11876:	440b      	add	r3, r1
   11878:	605a      	str	r2, [r3, #4]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
   1187a:	e011      	b.n	118a0 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
	else if (channel_output == VOLTAGE)
   1187c:	79bb      	ldrb	r3, [r7, #6]
   1187e:	2b01      	cmp	r3, #1
   11880:	d10e      	bne.n	118a0 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
		scaled_result = float(signed_data) / 2097152;
   11882:	68fb      	ldr	r3, [r7, #12]
   11884:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   11886:	4b08      	ldr	r3, [pc, #32]	; (118a8 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   11888:	4610      	mov	r0, r2
   1188a:	4798      	blx	r3
   1188c:	4602      	mov	r2, r0
   1188e:	4b07      	ldr	r3, [pc, #28]	; (118ac <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   11890:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
   11894:	4610      	mov	r0, r2
   11896:	4798      	blx	r3
   11898:	4603      	mov	r3, r0
   1189a:	461a      	mov	r2, r3
   1189c:	68fb      	ldr	r3, [r7, #12]
   1189e:	65da      	str	r2, [r3, #92]	; 0x5c
}
   118a0:	bf00      	nop
   118a2:	3710      	adds	r7, #16
   118a4:	46bd      	mov	sp, r7
   118a6:	bd80      	pop	{r7, pc}
   118a8:	00012bc1 	.word	0x00012bc1
   118ac:	00012dd1 	.word	0x00012dd1
   118b0:	000118b5 	.word	0x000118b5

000118b4 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
   118b4:	b480      	push	{r7}
   118b6:	b085      	sub	sp, #20
   118b8:	af00      	add	r7, sp, #0
   118ba:	6078      	str	r0, [r7, #4]
   118bc:	460b      	mov	r3, r1
   118be:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   118c0:	2300      	movs	r3, #0
   118c2:	73fb      	strb	r3, [r7, #15]
   118c4:	7bfb      	ldrb	r3, [r7, #15]
   118c6:	2b03      	cmp	r3, #3
   118c8:	dc0c      	bgt.n	118e4 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
   118ca:	7bfb      	ldrb	r3, [r7, #15]
   118cc:	687a      	ldr	r2, [r7, #4]
   118ce:	4413      	add	r3, r2
   118d0:	78db      	ldrb	r3, [r3, #3]
   118d2:	78fa      	ldrb	r2, [r7, #3]
   118d4:	429a      	cmp	r2, r3
   118d6:	d101      	bne.n	118dc <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
   118d8:	7bfb      	ldrb	r3, [r7, #15]
   118da:	e004      	b.n	118e6 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   118dc:	7bfb      	ldrb	r3, [r7, #15]
   118de:	3301      	adds	r3, #1
   118e0:	73fb      	strb	r3, [r7, #15]
   118e2:	e7ef      	b.n	118c4 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
   118e4:	2300      	movs	r3, #0
}
   118e6:	4618      	mov	r0, r3
   118e8:	3714      	adds	r7, #20
   118ea:	46bd      	mov	sp, r7
   118ec:	bc80      	pop	{r7}
   118ee:	4770      	bx	lr

000118f0 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   118f0:	b590      	push	{r4, r7, lr}
   118f2:	b089      	sub	sp, #36	; 0x24
   118f4:	af02      	add	r7, sp, #8
   118f6:	60f8      	str	r0, [r7, #12]
   118f8:	60b9      	str	r1, [r7, #8]
   118fa:	4611      	mov	r1, r2
   118fc:	461a      	mov	r2, r3
   118fe:	460b      	mov	r3, r1
   11900:	71fb      	strb	r3, [r7, #7]
   11902:	4613      	mov	r3, r2
   11904:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   11906:	2300      	movs	r3, #0
   11908:	75fb      	strb	r3, [r7, #23]
   1190a:	7dfb      	ldrb	r3, [r7, #23]
   1190c:	2b06      	cmp	r3, #6
   1190e:	dc09      	bgt.n	11924 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
   11910:	68fb      	ldr	r3, [r7, #12]
   11912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   11914:	7dfb      	ldrb	r3, [r7, #23]
   11916:	4413      	add	r3, r2
   11918:	2200      	movs	r2, #0
   1191a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   1191c:	7dfb      	ldrb	r3, [r7, #23]
   1191e:	3301      	adds	r3, #1
   11920:	75fb      	strb	r3, [r7, #23]
   11922:	e7f2      	b.n	1190a <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
   11924:	68fb      	ldr	r3, [r7, #12]
   11926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11928:	79fa      	ldrb	r2, [r7, #7]
   1192a:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
   1192c:	68fb      	ldr	r3, [r7, #12]
   1192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11930:	3301      	adds	r3, #1
   11932:	88ba      	ldrh	r2, [r7, #4]
   11934:	1212      	asrs	r2, r2, #8
   11936:	b2d2      	uxtb	r2, r2
   11938:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
   1193a:	68fb      	ldr	r3, [r7, #12]
   1193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1193e:	3302      	adds	r3, #2
   11940:	88ba      	ldrh	r2, [r7, #4]
   11942:	b2d2      	uxtb	r2, r2
   11944:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
   11946:	68fb      	ldr	r3, [r7, #12]
   11948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1194a:	3303      	adds	r3, #3
   1194c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1194e:	0e12      	lsrs	r2, r2, #24
   11950:	b2d2      	uxtb	r2, r2
   11952:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
   11954:	68fb      	ldr	r3, [r7, #12]
   11956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11958:	3304      	adds	r3, #4
   1195a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1195c:	0c12      	lsrs	r2, r2, #16
   1195e:	b2d2      	uxtb	r2, r2
   11960:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
   11962:	68fb      	ldr	r3, [r7, #12]
   11964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11966:	3305      	adds	r3, #5
   11968:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1196a:	0a12      	lsrs	r2, r2, #8
   1196c:	b2d2      	uxtb	r2, r2
   1196e:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
   11970:	68fb      	ldr	r3, [r7, #12]
   11972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11974:	3306      	adds	r3, #6
   11976:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11978:	b2d2      	uxtb	r2, r2
   1197a:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
   1197c:	68fb      	ldr	r3, [r7, #12]
   1197e:	6a18      	ldr	r0, [r3, #32]
   11980:	68fb      	ldr	r3, [r7, #12]
   11982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11984:	f107 0110 	add.w	r1, r7, #16
   11988:	2307      	movs	r3, #7
   1198a:	9300      	str	r3, [sp, #0]
   1198c:	460b      	mov	r3, r1
   1198e:	68b9      	ldr	r1, [r7, #8]
   11990:	4c0a      	ldr	r4, [pc, #40]	; (119bc <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
   11992:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
   11994:	7c3b      	ldrb	r3, [r7, #16]
   11996:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
   11998:	7c7b      	ldrb	r3, [r7, #17]
   1199a:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
   1199c:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
   1199e:	7cbb      	ldrb	r3, [r7, #18]
   119a0:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
   119a2:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
   119a4:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
   119a6:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
   119a8:	68fb      	ldr	r3, [r7, #12]
   119aa:	625a      	str	r2, [r3, #36]	; 0x24
	asm("nop");
   119ac:	bf00      	nop
	return output_data;
   119ae:	68fb      	ldr	r3, [r7, #12]
   119b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   119b2:	4618      	mov	r0, r3
   119b4:	371c      	adds	r7, #28
   119b6:	46bd      	mov	sp, r7
   119b8:	bd90      	pop	{r4, r7, pc}
   119ba:	bf00      	nop
   119bc:	00011dcd 	.word	0x00011dcd

000119c0 <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
   119c0:	b590      	push	{r4, r7, lr}
   119c2:	b087      	sub	sp, #28
   119c4:	af02      	add	r7, sp, #8
   119c6:	60f8      	str	r0, [r7, #12]
   119c8:	60b9      	str	r1, [r7, #8]
   119ca:	4611      	mov	r1, r2
   119cc:	461a      	mov	r2, r3
   119ce:	460b      	mov	r3, r1
   119d0:	71fb      	strb	r3, [r7, #7]
   119d2:	4613      	mov	r3, r2
   119d4:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
   119d6:	68fb      	ldr	r3, [r7, #12]
   119d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   119da:	79fa      	ldrb	r2, [r7, #7]
   119dc:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
   119de:	68fb      	ldr	r3, [r7, #12]
   119e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   119e2:	3301      	adds	r3, #1
   119e4:	88ba      	ldrh	r2, [r7, #4]
   119e6:	1212      	asrs	r2, r2, #8
   119e8:	b2d2      	uxtb	r2, r2
   119ea:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
   119ec:	68fb      	ldr	r3, [r7, #12]
   119ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   119f0:	3302      	adds	r3, #2
   119f2:	88ba      	ldrh	r2, [r7, #4]
   119f4:	b2d2      	uxtb	r2, r2
   119f6:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
   119f8:	68fb      	ldr	r3, [r7, #12]
   119fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   119fc:	3303      	adds	r3, #3
   119fe:	f897 2020 	ldrb.w	r2, [r7, #32]
   11a02:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
   11a04:	68fb      	ldr	r3, [r7, #12]
   11a06:	6a18      	ldr	r0, [r3, #32]
   11a08:	68fb      	ldr	r3, [r7, #12]
   11a0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11a0c:	68fb      	ldr	r3, [r7, #12]
   11a0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   11a10:	2304      	movs	r3, #4
   11a12:	9300      	str	r3, [sp, #0]
   11a14:	460b      	mov	r3, r1
   11a16:	68b9      	ldr	r1, [r7, #8]
   11a18:	4c04      	ldr	r4, [pc, #16]	; (11a2c <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
   11a1a:	47a0      	blx	r4
	return rx[0];
   11a1c:	68fb      	ldr	r3, [r7, #12]
   11a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11a20:	781b      	ldrb	r3, [r3, #0]
}
   11a22:	4618      	mov	r0, r3
   11a24:	3714      	adds	r7, #20
   11a26:	46bd      	mov	sp, r7
   11a28:	bd90      	pop	{r4, r7, pc}
   11a2a:	bf00      	nop
   11a2c:	00011dcd 	.word	0x00011dcd

00011a30 <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   11a30:	b480      	push	{r7}
   11a32:	b083      	sub	sp, #12
   11a34:	af00      	add	r7, sp, #0
   11a36:	6078      	str	r0, [r7, #4]
   11a38:	460b      	mov	r3, r1
   11a3a:	807b      	strh	r3, [r7, #2]
   11a3c:	4613      	mov	r3, r2
   11a3e:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   11a40:	787b      	ldrb	r3, [r7, #1]
   11a42:	3b01      	subs	r3, #1
   11a44:	b29b      	uxth	r3, r3
   11a46:	009b      	lsls	r3, r3, #2
   11a48:	b29a      	uxth	r2, r3
   11a4a:	887b      	ldrh	r3, [r7, #2]
   11a4c:	4413      	add	r3, r2
   11a4e:	b29b      	uxth	r3, r3
}
   11a50:	4618      	mov	r0, r3
   11a52:	370c      	adds	r7, #12
   11a54:	46bd      	mov	sp, r7
   11a56:	bc80      	pop	{r7}
   11a58:	4770      	bx	lr
	...

00011a5c <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
   11a5c:	b590      	push	{r4, r7, lr}
   11a5e:	b085      	sub	sp, #20
   11a60:	af00      	add	r7, sp, #0
   11a62:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	
	  // ----- Channel 2: Assign Sense Resistor -----
	  channel_assignment_data =
   11a64:	4b25      	ldr	r3, [pc, #148]	; (11afc <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   11a66:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 2, channel_assignment_data);
   11a68:	687b      	ldr	r3, [r7, #4]
   11a6a:	6d99      	ldr	r1, [r3, #88]	; 0x58
   11a6c:	68fb      	ldr	r3, [r7, #12]
   11a6e:	2202      	movs	r2, #2
   11a70:	6878      	ldr	r0, [r7, #4]
   11a72:	4c23      	ldr	r4, [pc, #140]	; (11b00 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   11a74:	47a0      	blx	r4
	  // ----- Channel 4: Assign RTD PT-100 -----
	  channel_assignment_data =
   11a76:	4b23      	ldr	r3, [pc, #140]	; (11b04 <_ZN13LTC2983_Class18configure_channelsEv+0xa8>)
   11a78:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__2 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 4, channel_assignment_data);
   11a7a:	687b      	ldr	r3, [r7, #4]
   11a7c:	6d99      	ldr	r1, [r3, #88]	; 0x58
   11a7e:	68fb      	ldr	r3, [r7, #12]
   11a80:	2204      	movs	r2, #4
   11a82:	6878      	ldr	r0, [r7, #4]
   11a84:	4c1e      	ldr	r4, [pc, #120]	; (11b00 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   11a86:	47a0      	blx	r4
	  // ----- Channel 7: Assign Sense Resistor -----
	  channel_assignment_data =
   11a88:	4b1c      	ldr	r3, [pc, #112]	; (11afc <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   11a8a:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 7, channel_assignment_data);
   11a8c:	687b      	ldr	r3, [r7, #4]
   11a8e:	6d99      	ldr	r1, [r3, #88]	; 0x58
   11a90:	68fb      	ldr	r3, [r7, #12]
   11a92:	2207      	movs	r2, #7
   11a94:	6878      	ldr	r0, [r7, #4]
   11a96:	4c1a      	ldr	r4, [pc, #104]	; (11b00 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   11a98:	47a0      	blx	r4
	  // ----- Channel 9: Assign RTD PT-100 -----
	  channel_assignment_data =
   11a9a:	4b1b      	ldr	r3, [pc, #108]	; (11b08 <_ZN13LTC2983_Class18configure_channelsEv+0xac>)
   11a9c:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__7 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 9, channel_assignment_data);
   11a9e:	687b      	ldr	r3, [r7, #4]
   11aa0:	6d99      	ldr	r1, [r3, #88]	; 0x58
   11aa2:	68fb      	ldr	r3, [r7, #12]
   11aa4:	2209      	movs	r2, #9
   11aa6:	6878      	ldr	r0, [r7, #4]
   11aa8:	4c15      	ldr	r4, [pc, #84]	; (11b00 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   11aaa:	47a0      	blx	r4
	  // ----- Channel 12: Assign Sense Resistor -----
	  channel_assignment_data =
   11aac:	4b13      	ldr	r3, [pc, #76]	; (11afc <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   11aae:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 12, channel_assignment_data);
   11ab0:	687b      	ldr	r3, [r7, #4]
   11ab2:	6d99      	ldr	r1, [r3, #88]	; 0x58
   11ab4:	68fb      	ldr	r3, [r7, #12]
   11ab6:	220c      	movs	r2, #12
   11ab8:	6878      	ldr	r0, [r7, #4]
   11aba:	4c11      	ldr	r4, [pc, #68]	; (11b00 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   11abc:	47a0      	blx	r4
	  // ----- Channel 14: Assign RTD PT-100 -----
	  channel_assignment_data =
   11abe:	4b13      	ldr	r3, [pc, #76]	; (11b0c <_ZN13LTC2983_Class18configure_channelsEv+0xb0>)
   11ac0:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__12 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 14, channel_assignment_data);
   11ac2:	687b      	ldr	r3, [r7, #4]
   11ac4:	6d99      	ldr	r1, [r3, #88]	; 0x58
   11ac6:	68fb      	ldr	r3, [r7, #12]
   11ac8:	220e      	movs	r2, #14
   11aca:	6878      	ldr	r0, [r7, #4]
   11acc:	4c0c      	ldr	r4, [pc, #48]	; (11b00 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   11ace:	47a0      	blx	r4
	  // ----- Channel 17: Assign Sense Resistor -----
	  channel_assignment_data =
   11ad0:	4b0a      	ldr	r3, [pc, #40]	; (11afc <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   11ad2:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 17, channel_assignment_data);
   11ad4:	687b      	ldr	r3, [r7, #4]
   11ad6:	6d99      	ldr	r1, [r3, #88]	; 0x58
   11ad8:	68fb      	ldr	r3, [r7, #12]
   11ada:	2211      	movs	r2, #17
   11adc:	6878      	ldr	r0, [r7, #4]
   11ade:	4c08      	ldr	r4, [pc, #32]	; (11b00 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   11ae0:	47a0      	blx	r4
	  // ----- Channel 19: Assign RTD PT-100 -----
	  channel_assignment_data =
   11ae2:	4b0b      	ldr	r3, [pc, #44]	; (11b10 <_ZN13LTC2983_Class18configure_channelsEv+0xb4>)
   11ae4:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__17 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 19, channel_assignment_data);
   11ae6:	687b      	ldr	r3, [r7, #4]
   11ae8:	6d99      	ldr	r1, [r3, #88]	; 0x58
   11aea:	68fb      	ldr	r3, [r7, #12]
   11aec:	2213      	movs	r2, #19
   11aee:	6878      	ldr	r0, [r7, #4]
   11af0:	4c03      	ldr	r4, [pc, #12]	; (11b00 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   11af2:	47a0      	blx	r4

}
   11af4:	bf00      	nop
   11af6:	3714      	adds	r7, #20
   11af8:	46bd      	mov	sp, r7
   11afa:	bd90      	pop	{r4, r7, pc}
   11afc:	e89c4000 	.word	0xe89c4000
   11b00:	00011655 	.word	0x00011655
   11b04:	60a91000 	.word	0x60a91000
   11b08:	61e91000 	.word	0x61e91000
   11b0c:	63291000 	.word	0x63291000
   11b10:	64691000 	.word	0x64691000

00011b14 <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
   11b14:	b590      	push	{r4, r7, lr}
   11b16:	b085      	sub	sp, #20
   11b18:	af02      	add	r7, sp, #8
   11b1a:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
   11b1c:	687b      	ldr	r3, [r7, #4]
   11b1e:	6d99      	ldr	r1, [r3, #88]	; 0x58
	REJECTION__50_60_HZ);
   11b20:	2300      	movs	r3, #0
   11b22:	9300      	str	r3, [sp, #0]
   11b24:	23f0      	movs	r3, #240	; 0xf0
   11b26:	2202      	movs	r2, #2
   11b28:	6878      	ldr	r0, [r7, #4]
   11b2a:	4c07      	ldr	r4, [pc, #28]	; (11b48 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   11b2c:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
   11b2e:	687b      	ldr	r3, [r7, #4]
   11b30:	6d99      	ldr	r1, [r3, #88]	; 0x58
   11b32:	2300      	movs	r3, #0
   11b34:	9300      	str	r3, [sp, #0]
   11b36:	23ff      	movs	r3, #255	; 0xff
   11b38:	2202      	movs	r2, #2
   11b3a:	6878      	ldr	r0, [r7, #4]
   11b3c:	4c02      	ldr	r4, [pc, #8]	; (11b48 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   11b3e:	47a0      	blx	r4
}
   11b40:	bf00      	nop
   11b42:	370c      	adds	r7, #12
   11b44:	46bd      	mov	sp, r7
   11b46:	bd90      	pop	{r4, r7, pc}
   11b48:	000119c1 	.word	0x000119c1

00011b4c <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
   11b4c:	b580      	push	{r7, lr}
   11b4e:	b082      	sub	sp, #8
   11b50:	af00      	add	r7, sp, #0
   11b52:	6078      	str	r0, [r7, #4]
	process_finished = 0;
   11b54:	687b      	ldr	r3, [r7, #4]
   11b56:	2200      	movs	r2, #0
   11b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	meassureTimeout=false;
   11b5c:	687b      	ldr	r3, [r7, #4]
   11b5e:	2200      	movs	r2, #0
   11b60:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
   11b62:	4a31      	ldr	r2, [pc, #196]	; (11c28 <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
   11b64:	687b      	ldr	r3, [r7, #4]
   11b66:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   11b68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11b6c:	492f      	ldr	r1, [pc, #188]	; (11c2c <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   11b6e:	4830      	ldr	r0, [pc, #192]	; (11c30 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   11b70:	4b30      	ldr	r3, [pc, #192]	; (11c34 <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
   11b72:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   11b74:	687b      	ldr	r3, [r7, #4]
   11b76:	79db      	ldrb	r3, [r3, #7]
   11b78:	2b01      	cmp	r3, #1
   11b7a:	d009      	beq.n	11b90 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   11b7c:	687b      	ldr	r3, [r7, #4]
   11b7e:	789b      	ldrb	r3, [r3, #2]
   11b80:	b2db      	uxtb	r3, r3
   11b82:	f083 0301 	eor.w	r3, r3, #1
   11b86:	b2db      	uxtb	r3, r3
   11b88:	2b00      	cmp	r3, #0
   11b8a:	d001      	beq.n	11b90 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   11b8c:	2301      	movs	r3, #1
   11b8e:	e000      	b.n	11b92 <_ZN13LTC2983_Class8SelfTestEv+0x46>
   11b90:	2300      	movs	r3, #0
   11b92:	2b00      	cmp	r3, #0
   11b94:	d034      	beq.n	11c00 <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
   11b96:	2100      	movs	r1, #0
   11b98:	6878      	ldr	r0, [r7, #4]
   11b9a:	4b27      	ldr	r3, [pc, #156]	; (11c38 <_ZN13LTC2983_Class8SelfTestEv+0xec>)
   11b9c:	4798      	blx	r3
		delay_ms(1);
   11b9e:	2001      	movs	r0, #1
   11ba0:	4b26      	ldr	r3, [pc, #152]	; (11c3c <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   11ba2:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
   11ba4:	687b      	ldr	r3, [r7, #4]
   11ba6:	781b      	ldrb	r3, [r3, #0]
   11ba8:	b2db      	uxtb	r3, r3
   11baa:	f083 0301 	eor.w	r3, r3, #1
   11bae:	b2db      	uxtb	r3, r3
   11bb0:	2b00      	cmp	r3, #0
   11bb2:	d009      	beq.n	11bc8 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   11bb4:	687b      	ldr	r3, [r7, #4]
   11bb6:	789b      	ldrb	r3, [r3, #2]
   11bb8:	b2db      	uxtb	r3, r3
   11bba:	f083 0301 	eor.w	r3, r3, #1
   11bbe:	b2db      	uxtb	r3, r3
   11bc0:	2b00      	cmp	r3, #0
   11bc2:	d001      	beq.n	11bc8 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   11bc4:	2301      	movs	r3, #1
   11bc6:	e000      	b.n	11bca <_ZN13LTC2983_Class8SelfTestEv+0x7e>
   11bc8:	2300      	movs	r3, #0
   11bca:	2b00      	cmp	r3, #0
   11bcc:	d000      	beq.n	11bd0 <_ZN13LTC2983_Class8SelfTestEv+0x84>
   11bce:	e7e9      	b.n	11ba4 <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
   11bd0:	687b      	ldr	r3, [r7, #4]
   11bd2:	789b      	ldrb	r3, [r3, #2]
   11bd4:	b2db      	uxtb	r3, r3
   11bd6:	f083 0301 	eor.w	r3, r3, #1
   11bda:	b2db      	uxtb	r3, r3
   11bdc:	2b00      	cmp	r3, #0
   11bde:	d0c9      	beq.n	11b74 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
   11be0:	687b      	ldr	r3, [r7, #4]
   11be2:	781b      	ldrb	r3, [r3, #0]
   11be4:	b2db      	uxtb	r3, r3
   11be6:	2b00      	cmp	r3, #0
   11be8:	d006      	beq.n	11bf8 <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
   11bea:	687b      	ldr	r3, [r7, #4]
   11bec:	78db      	ldrb	r3, [r3, #3]
   11bee:	4619      	mov	r1, r3
   11bf0:	6878      	ldr	r0, [r7, #4]
   11bf2:	4b13      	ldr	r3, [pc, #76]	; (11c40 <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
   11bf4:	4798      	blx	r3
   11bf6:	e7bd      	b.n	11b74 <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
   11bf8:	2001      	movs	r0, #1
   11bfa:	4b10      	ldr	r3, [pc, #64]	; (11c3c <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   11bfc:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   11bfe:	e7b9      	b.n	11b74 <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
   11c00:	490a      	ldr	r1, [pc, #40]	; (11c2c <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   11c02:	480b      	ldr	r0, [pc, #44]	; (11c30 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   11c04:	4b0f      	ldr	r3, [pc, #60]	; (11c44 <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
   11c06:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
   11c08:	687b      	ldr	r3, [r7, #4]
   11c0a:	79db      	ldrb	r3, [r3, #7]
   11c0c:	2b01      	cmp	r3, #1
   11c0e:	bf0c      	ite	eq
   11c10:	2301      	moveq	r3, #1
   11c12:	2300      	movne	r3, #0
   11c14:	b2da      	uxtb	r2, r3
   11c16:	687b      	ldr	r3, [r7, #4]
   11c18:	771a      	strb	r2, [r3, #28]
	return	isOK;
   11c1a:	687b      	ldr	r3, [r7, #4]
   11c1c:	7f1b      	ldrb	r3, [r3, #28]
	}
   11c1e:	4618      	mov	r0, r3
   11c20:	3708      	adds	r7, #8
   11c22:	46bd      	mov	sp, r7
   11c24:	bd80      	pop	{r7, pc}
   11c26:	bf00      	nop
   11c28:	20007b10 	.word	0x20007b10
   11c2c:	0001156d 	.word	0x0001156d
   11c30:	20000f18 	.word	0x20000f18
   11c34:	0000da85 	.word	0x0000da85
   11c38:	000116a9 	.word	0x000116a9
   11c3c:	000027c9 	.word	0x000027c9
   11c40:	000117dd 	.word	0x000117dd
   11c44:	0000da2d 	.word	0x0000da2d

00011c48 <hri_port_set_OUT_reg>:
{
   11c48:	b480      	push	{r7}
   11c4a:	b085      	sub	sp, #20
   11c4c:	af00      	add	r7, sp, #0
   11c4e:	60f8      	str	r0, [r7, #12]
   11c50:	460b      	mov	r3, r1
   11c52:	607a      	str	r2, [r7, #4]
   11c54:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   11c56:	7afb      	ldrb	r3, [r7, #11]
   11c58:	68fa      	ldr	r2, [r7, #12]
   11c5a:	01db      	lsls	r3, r3, #7
   11c5c:	4413      	add	r3, r2
   11c5e:	3318      	adds	r3, #24
   11c60:	687a      	ldr	r2, [r7, #4]
   11c62:	601a      	str	r2, [r3, #0]
}
   11c64:	bf00      	nop
   11c66:	3714      	adds	r7, #20
   11c68:	46bd      	mov	sp, r7
   11c6a:	bc80      	pop	{r7}
   11c6c:	4770      	bx	lr

00011c6e <hri_port_clear_OUT_reg>:
{
   11c6e:	b480      	push	{r7}
   11c70:	b085      	sub	sp, #20
   11c72:	af00      	add	r7, sp, #0
   11c74:	60f8      	str	r0, [r7, #12]
   11c76:	460b      	mov	r3, r1
   11c78:	607a      	str	r2, [r7, #4]
   11c7a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   11c7c:	7afb      	ldrb	r3, [r7, #11]
   11c7e:	68fa      	ldr	r2, [r7, #12]
   11c80:	01db      	lsls	r3, r3, #7
   11c82:	4413      	add	r3, r2
   11c84:	3314      	adds	r3, #20
   11c86:	687a      	ldr	r2, [r7, #4]
   11c88:	601a      	str	r2, [r3, #0]
}
   11c8a:	bf00      	nop
   11c8c:	3714      	adds	r7, #20
   11c8e:	46bd      	mov	sp, r7
   11c90:	bc80      	pop	{r7}
   11c92:	4770      	bx	lr

00011c94 <_gpio_set_level>:
{
   11c94:	b580      	push	{r7, lr}
   11c96:	b082      	sub	sp, #8
   11c98:	af00      	add	r7, sp, #0
   11c9a:	4603      	mov	r3, r0
   11c9c:	6039      	str	r1, [r7, #0]
   11c9e:	71fb      	strb	r3, [r7, #7]
   11ca0:	4613      	mov	r3, r2
   11ca2:	71bb      	strb	r3, [r7, #6]
	if (level) {
   11ca4:	79bb      	ldrb	r3, [r7, #6]
   11ca6:	2b00      	cmp	r3, #0
   11ca8:	d006      	beq.n	11cb8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   11caa:	79fb      	ldrb	r3, [r7, #7]
   11cac:	683a      	ldr	r2, [r7, #0]
   11cae:	4619      	mov	r1, r3
   11cb0:	4806      	ldr	r0, [pc, #24]	; (11ccc <_gpio_set_level+0x38>)
   11cb2:	4b07      	ldr	r3, [pc, #28]	; (11cd0 <_gpio_set_level+0x3c>)
   11cb4:	4798      	blx	r3
}
   11cb6:	e005      	b.n	11cc4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   11cb8:	79fb      	ldrb	r3, [r7, #7]
   11cba:	683a      	ldr	r2, [r7, #0]
   11cbc:	4619      	mov	r1, r3
   11cbe:	4803      	ldr	r0, [pc, #12]	; (11ccc <_gpio_set_level+0x38>)
   11cc0:	4b04      	ldr	r3, [pc, #16]	; (11cd4 <_gpio_set_level+0x40>)
   11cc2:	4798      	blx	r3
}
   11cc4:	bf00      	nop
   11cc6:	3708      	adds	r7, #8
   11cc8:	46bd      	mov	sp, r7
   11cca:	bd80      	pop	{r7, pc}
   11ccc:	41008000 	.word	0x41008000
   11cd0:	00011c49 	.word	0x00011c49
   11cd4:	00011c6f 	.word	0x00011c6f

00011cd8 <gpio_set_pin_level>:
{
   11cd8:	b580      	push	{r7, lr}
   11cda:	b082      	sub	sp, #8
   11cdc:	af00      	add	r7, sp, #0
   11cde:	4603      	mov	r3, r0
   11ce0:	460a      	mov	r2, r1
   11ce2:	71fb      	strb	r3, [r7, #7]
   11ce4:	4613      	mov	r3, r2
   11ce6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   11ce8:	79fb      	ldrb	r3, [r7, #7]
   11cea:	115b      	asrs	r3, r3, #5
   11cec:	b2d8      	uxtb	r0, r3
   11cee:	79fb      	ldrb	r3, [r7, #7]
   11cf0:	f003 031f 	and.w	r3, r3, #31
   11cf4:	2201      	movs	r2, #1
   11cf6:	fa02 f303 	lsl.w	r3, r2, r3
   11cfa:	79ba      	ldrb	r2, [r7, #6]
   11cfc:	4619      	mov	r1, r3
   11cfe:	4b03      	ldr	r3, [pc, #12]	; (11d0c <gpio_set_pin_level+0x34>)
   11d00:	4798      	blx	r3
}
   11d02:	bf00      	nop
   11d04:	3708      	adds	r7, #8
   11d06:	46bd      	mov	sp, r7
   11d08:	bd80      	pop	{r7, pc}
   11d0a:	bf00      	nop
   11d0c:	00011c95 	.word	0x00011c95

00011d10 <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
   11d10:	b480      	push	{r7}
   11d12:	b083      	sub	sp, #12
   11d14:	af00      	add	r7, sp, #0
   11d16:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   11d18:	4a05      	ldr	r2, [pc, #20]	; (11d30 <_ZN6LT_SPIC1Ev+0x20>)
   11d1a:	687b      	ldr	r3, [r7, #4]
   11d1c:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
   11d1e:	687b      	ldr	r3, [r7, #4]
   11d20:	4a04      	ldr	r2, [pc, #16]	; (11d34 <_ZN6LT_SPIC1Ev+0x24>)
   11d22:	605a      	str	r2, [r3, #4]
} //LT_SPI
   11d24:	687b      	ldr	r3, [r7, #4]
   11d26:	4618      	mov	r0, r3
   11d28:	370c      	adds	r7, #12
   11d2a:	46bd      	mov	sp, r7
   11d2c:	bc80      	pop	{r7}
   11d2e:	4770      	bx	lr
   11d30:	20007b14 	.word	0x20007b14
   11d34:	20007b18 	.word	0x20007b18

00011d38 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   11d38:	b480      	push	{r7}
   11d3a:	b083      	sub	sp, #12
   11d3c:	af00      	add	r7, sp, #0
   11d3e:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   11d40:	687b      	ldr	r3, [r7, #4]
   11d42:	4618      	mov	r0, r3
   11d44:	370c      	adds	r7, #12
   11d46:	46bd      	mov	sp, r7
   11d48:	bc80      	pop	{r7}
   11d4a:	4770      	bx	lr

00011d4c <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
   11d4c:	b580      	push	{r7, lr}
   11d4e:	b082      	sub	sp, #8
   11d50:	af00      	add	r7, sp, #0
   11d52:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
   11d54:	687b      	ldr	r3, [r7, #4]
   11d56:	685a      	ldr	r2, [r3, #4]
   11d58:	687b      	ldr	r3, [r7, #4]
   11d5a:	691b      	ldr	r3, [r3, #16]
   11d5c:	4619      	mov	r1, r3
   11d5e:	4610      	mov	r0, r2
   11d60:	4b0e      	ldr	r3, [pc, #56]	; (11d9c <_ZN6LT_SPI4initEv+0x50>)
   11d62:	4798      	blx	r3
	spiTemp->init();
   11d64:	687b      	ldr	r3, [r7, #4]
   11d66:	685b      	ldr	r3, [r3, #4]
   11d68:	4618      	mov	r0, r3
   11d6a:	4b0d      	ldr	r3, [pc, #52]	; (11da0 <_ZN6LT_SPI4initEv+0x54>)
   11d6c:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
   11d6e:	687b      	ldr	r3, [r7, #4]
   11d70:	685b      	ldr	r3, [r3, #4]
   11d72:	685a      	ldr	r2, [r3, #4]
   11d74:	687b      	ldr	r3, [r7, #4]
   11d76:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
   11d78:	687b      	ldr	r3, [r7, #4]
   11d7a:	685b      	ldr	r3, [r3, #4]
   11d7c:	689a      	ldr	r2, [r3, #8]
   11d7e:	687b      	ldr	r3, [r7, #4]
   11d80:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
   11d82:	687b      	ldr	r3, [r7, #4]
   11d84:	685b      	ldr	r3, [r3, #4]
   11d86:	4618      	mov	r0, r3
   11d88:	4b06      	ldr	r3, [pc, #24]	; (11da4 <_ZN6LT_SPI4initEv+0x58>)
   11d8a:	4798      	blx	r3
	ready=true;
   11d8c:	687b      	ldr	r3, [r7, #4]
   11d8e:	2201      	movs	r2, #1
   11d90:	701a      	strb	r2, [r3, #0]
}
   11d92:	bf00      	nop
   11d94:	3708      	adds	r7, #8
   11d96:	46bd      	mov	sp, r7
   11d98:	bd80      	pop	{r7, pc}
   11d9a:	bf00      	nop
   11d9c:	00011ff5 	.word	0x00011ff5
   11da0:	00011fad 	.word	0x00011fad
   11da4:	00012019 	.word	0x00012019

00011da8 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
   11da8:	b480      	push	{r7}
   11daa:	b083      	sub	sp, #12
   11dac:	af00      	add	r7, sp, #0
   11dae:	6078      	str	r0, [r7, #4]
   11db0:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
   11db2:	687b      	ldr	r3, [r7, #4]
   11db4:	683a      	ldr	r2, [r7, #0]
   11db6:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
   11db8:	4a03      	ldr	r2, [pc, #12]	; (11dc8 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
   11dba:	687b      	ldr	r3, [r7, #4]
   11dbc:	6013      	str	r3, [r2, #0]
}
   11dbe:	bf00      	nop
   11dc0:	370c      	adds	r7, #12
   11dc2:	46bd      	mov	sp, r7
   11dc4:	bc80      	pop	{r7}
   11dc6:	4770      	bx	lr
   11dc8:	20007b14 	.word	0x20007b14

00011dcc <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   11dcc:	b580      	push	{r7, lr}
   11dce:	b086      	sub	sp, #24
   11dd0:	af00      	add	r7, sp, #0
   11dd2:	60f8      	str	r0, [r7, #12]
   11dd4:	60b9      	str	r1, [r7, #8]
   11dd6:	607a      	str	r2, [r7, #4]
   11dd8:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
   11dda:	687b      	ldr	r3, [r7, #4]
   11ddc:	781b      	ldrb	r3, [r3, #0]
   11dde:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
   11de0:	68b9      	ldr	r1, [r7, #8]
   11de2:	68f8      	ldr	r0, [r7, #12]
   11de4:	4b25      	ldr	r3, [pc, #148]	; (11e7c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
   11de6:	4798      	blx	r3
	
	switch(rOrw){
   11de8:	7dfb      	ldrb	r3, [r7, #23]
   11dea:	2b02      	cmp	r3, #2
   11dec:	d002      	beq.n	11df4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
   11dee:	2b03      	cmp	r3, #3
   11df0:	d009      	beq.n	11e06 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
   11df2:	e028      	b.n	11e46 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
   11df4:	68fb      	ldr	r3, [r7, #12]
   11df6:	685b      	ldr	r3, [r3, #4]
   11df8:	f897 2020 	ldrb.w	r2, [r7, #32]
   11dfc:	6879      	ldr	r1, [r7, #4]
   11dfe:	4618      	mov	r0, r3
   11e00:	4b1f      	ldr	r3, [pc, #124]	; (11e80 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   11e02:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
   11e04:	e031      	b.n	11e6a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
   11e06:	68fb      	ldr	r3, [r7, #12]
   11e08:	685b      	ldr	r3, [r3, #4]
   11e0a:	2203      	movs	r2, #3
   11e0c:	6879      	ldr	r1, [r7, #4]
   11e0e:	4618      	mov	r0, r3
   11e10:	4b1b      	ldr	r3, [pc, #108]	; (11e80 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   11e12:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
   11e14:	f897 3020 	ldrb.w	r3, [r7, #32]
   11e18:	2b04      	cmp	r3, #4
   11e1a:	dd0b      	ble.n	11e34 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
   11e1c:	68fb      	ldr	r3, [r7, #12]
   11e1e:	6858      	ldr	r0, [r3, #4]
   11e20:	f897 3020 	ldrb.w	r3, [r7, #32]
   11e24:	3b03      	subs	r3, #3
   11e26:	461a      	mov	r2, r3
   11e28:	6839      	ldr	r1, [r7, #0]
   11e2a:	4b16      	ldr	r3, [pc, #88]	; (11e84 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   11e2c:	4798      	blx	r3
					asm("nop");
   11e2e:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
   11e30:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
   11e32:	e01a      	b.n	11e6a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
   11e34:	68fb      	ldr	r3, [r7, #12]
   11e36:	685b      	ldr	r3, [r3, #4]
   11e38:	2201      	movs	r2, #1
   11e3a:	6839      	ldr	r1, [r7, #0]
   11e3c:	4618      	mov	r0, r3
   11e3e:	4b11      	ldr	r3, [pc, #68]	; (11e84 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   11e40:	4798      	blx	r3
				asm("nop");
   11e42:	bf00      	nop
			break;
   11e44:	e011      	b.n	11e6a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
   11e46:	68fb      	ldr	r3, [r7, #12]
   11e48:	685b      	ldr	r3, [r3, #4]
   11e4a:	f897 2020 	ldrb.w	r2, [r7, #32]
   11e4e:	6879      	ldr	r1, [r7, #4]
   11e50:	4618      	mov	r0, r3
   11e52:	4b0b      	ldr	r3, [pc, #44]	; (11e80 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   11e54:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
   11e56:	68fb      	ldr	r3, [r7, #12]
   11e58:	6858      	ldr	r0, [r3, #4]
   11e5a:	f897 3020 	ldrb.w	r3, [r7, #32]
   11e5e:	3b03      	subs	r3, #3
   11e60:	461a      	mov	r2, r3
   11e62:	6839      	ldr	r1, [r7, #0]
   11e64:	4b07      	ldr	r3, [pc, #28]	; (11e84 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   11e66:	4798      	blx	r3
			break;
   11e68:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
   11e6a:	68b9      	ldr	r1, [r7, #8]
   11e6c:	68f8      	ldr	r0, [r7, #12]
   11e6e:	4b06      	ldr	r3, [pc, #24]	; (11e88 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
   11e70:	4798      	blx	r3
	asm("nop");
   11e72:	bf00      	nop
	
}
   11e74:	bf00      	nop
   11e76:	3718      	adds	r7, #24
   11e78:	46bd      	mov	sp, r7
   11e7a:	bd80      	pop	{r7, pc}
   11e7c:	00011e8d 	.word	0x00011e8d
   11e80:	00012055 	.word	0x00012055
   11e84:	00012099 	.word	0x00012099
   11e88:	00011ed5 	.word	0x00011ed5

00011e8c <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
   11e8c:	b580      	push	{r7, lr}
   11e8e:	b082      	sub	sp, #8
   11e90:	af00      	add	r7, sp, #0
   11e92:	6078      	str	r0, [r7, #4]
   11e94:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   11e96:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   11e9a:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
   11e9c:	683b      	ldr	r3, [r7, #0]
   11e9e:	b2db      	uxtb	r3, r3
   11ea0:	2100      	movs	r1, #0
   11ea2:	4618      	mov	r0, r3
   11ea4:	4b08      	ldr	r3, [pc, #32]	; (11ec8 <_ZN6LT_SPI4OpenEm+0x3c>)
   11ea6:	4798      	blx	r3
	 delay_us(10);
   11ea8:	200a      	movs	r0, #10
   11eaa:	4b08      	ldr	r3, [pc, #32]	; (11ecc <_ZN6LT_SPI4OpenEm+0x40>)
   11eac:	4798      	blx	r3
	spiTemp->Enable();
   11eae:	687b      	ldr	r3, [r7, #4]
   11eb0:	685b      	ldr	r3, [r3, #4]
   11eb2:	4618      	mov	r0, r3
   11eb4:	4b06      	ldr	r3, [pc, #24]	; (11ed0 <_ZN6LT_SPI4OpenEm+0x44>)
   11eb6:	4798      	blx	r3
	 delay_us(10);
   11eb8:	200a      	movs	r0, #10
   11eba:	4b04      	ldr	r3, [pc, #16]	; (11ecc <_ZN6LT_SPI4OpenEm+0x40>)
   11ebc:	4798      	blx	r3
 }
   11ebe:	bf00      	nop
   11ec0:	3708      	adds	r7, #8
   11ec2:	46bd      	mov	sp, r7
   11ec4:	bd80      	pop	{r7, pc}
   11ec6:	bf00      	nop
   11ec8:	00011cd9 	.word	0x00011cd9
   11ecc:	00002795 	.word	0x00002795
   11ed0:	00012019 	.word	0x00012019

00011ed4 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
   11ed4:	b580      	push	{r7, lr}
   11ed6:	b082      	sub	sp, #8
   11ed8:	af00      	add	r7, sp, #0
   11eda:	6078      	str	r0, [r7, #4]
   11edc:	6039      	str	r1, [r7, #0]

	  delay_us(10);
   11ede:	200a      	movs	r0, #10
   11ee0:	4b0b      	ldr	r3, [pc, #44]	; (11f10 <_ZN6LT_SPI5CloseEm+0x3c>)
   11ee2:	4798      	blx	r3
	 spiTemp->Disable();
   11ee4:	687b      	ldr	r3, [r7, #4]
   11ee6:	685b      	ldr	r3, [r3, #4]
   11ee8:	4618      	mov	r0, r3
   11eea:	4b0a      	ldr	r3, [pc, #40]	; (11f14 <_ZN6LT_SPI5CloseEm+0x40>)
   11eec:	4798      	blx	r3
	delay_us(10);
   11eee:	200a      	movs	r0, #10
   11ef0:	4b07      	ldr	r3, [pc, #28]	; (11f10 <_ZN6LT_SPI5CloseEm+0x3c>)
   11ef2:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
   11ef4:	683b      	ldr	r3, [r7, #0]
   11ef6:	b2db      	uxtb	r3, r3
   11ef8:	2101      	movs	r1, #1
   11efa:	4618      	mov	r0, r3
   11efc:	4b06      	ldr	r3, [pc, #24]	; (11f18 <_ZN6LT_SPI5CloseEm+0x44>)
   11efe:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
   11f00:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   11f04:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
   11f06:	bf00      	nop
   11f08:	3708      	adds	r7, #8
   11f0a:	46bd      	mov	sp, r7
   11f0c:	bd80      	pop	{r7, pc}
   11f0e:	bf00      	nop
   11f10:	00002795 	.word	0x00002795
   11f14:	000120dd 	.word	0x000120dd
   11f18:	00011cd9 	.word	0x00011cd9

00011f1c <_Z41__static_initialization_and_destruction_0ii>:
   11f1c:	b580      	push	{r7, lr}
   11f1e:	b082      	sub	sp, #8
   11f20:	af00      	add	r7, sp, #0
   11f22:	6078      	str	r0, [r7, #4]
   11f24:	6039      	str	r1, [r7, #0]
   11f26:	687b      	ldr	r3, [r7, #4]
   11f28:	2b01      	cmp	r3, #1
   11f2a:	d10c      	bne.n	11f46 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   11f2c:	683b      	ldr	r3, [r7, #0]
   11f2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11f32:	4293      	cmp	r3, r2
   11f34:	d107      	bne.n	11f46 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
   11f36:	4806      	ldr	r0, [pc, #24]	; (11f50 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11f38:	4b06      	ldr	r3, [pc, #24]	; (11f54 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   11f3a:	4798      	blx	r3
   11f3c:	4a06      	ldr	r2, [pc, #24]	; (11f58 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   11f3e:	4907      	ldr	r1, [pc, #28]	; (11f5c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   11f40:	4803      	ldr	r0, [pc, #12]	; (11f50 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   11f42:	4b07      	ldr	r3, [pc, #28]	; (11f60 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   11f44:	4798      	blx	r3
   11f46:	bf00      	nop
   11f48:	3708      	adds	r7, #8
   11f4a:	46bd      	mov	sp, r7
   11f4c:	bd80      	pop	{r7, pc}
   11f4e:	bf00      	nop
   11f50:	20007b18 	.word	0x20007b18
   11f54:	00011f79 	.word	0x00011f79
   11f58:	20000000 	.word	0x20000000
   11f5c:	00011f99 	.word	0x00011f99
   11f60:	00012a41 	.word	0x00012a41

00011f64 <_GLOBAL__sub_I_ptrLTSPIClass>:
   11f64:	b580      	push	{r7, lr}
   11f66:	af00      	add	r7, sp, #0
   11f68:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11f6c:	2001      	movs	r0, #1
   11f6e:	4b01      	ldr	r3, [pc, #4]	; (11f74 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   11f70:	4798      	blx	r3
   11f72:	bd80      	pop	{r7, pc}
   11f74:	00011f1d 	.word	0x00011f1d

00011f78 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   11f78:	b480      	push	{r7}
   11f7a:	b083      	sub	sp, #12
   11f7c:	af00      	add	r7, sp, #0
   11f7e:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   11f80:	4a04      	ldr	r2, [pc, #16]	; (11f94 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   11f82:	687b      	ldr	r3, [r7, #4]
   11f84:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   11f86:	687b      	ldr	r3, [r7, #4]
   11f88:	4618      	mov	r0, r3
   11f8a:	370c      	adds	r7, #12
   11f8c:	46bd      	mov	sp, r7
   11f8e:	bc80      	pop	{r7}
   11f90:	4770      	bx	lr
   11f92:	bf00      	nop
   11f94:	20007b34 	.word	0x20007b34

00011f98 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   11f98:	b480      	push	{r7}
   11f9a:	b083      	sub	sp, #12
   11f9c:	af00      	add	r7, sp, #0
   11f9e:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   11fa0:	687b      	ldr	r3, [r7, #4]
   11fa2:	4618      	mov	r0, r3
   11fa4:	370c      	adds	r7, #12
   11fa6:	46bd      	mov	sp, r7
   11fa8:	bc80      	pop	{r7}
   11faa:	4770      	bx	lr

00011fac <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   11fac:	b580      	push	{r7, lr}
   11fae:	b082      	sub	sp, #8
   11fb0:	af00      	add	r7, sp, #0
   11fb2:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   11fb4:	687b      	ldr	r3, [r7, #4]
   11fb6:	68da      	ldr	r2, [r3, #12]
   11fb8:	687b      	ldr	r3, [r7, #4]
   11fba:	3310      	adds	r3, #16
   11fbc:	4619      	mov	r1, r3
   11fbe:	4610      	mov	r0, r2
   11fc0:	4b09      	ldr	r3, [pc, #36]	; (11fe8 <_ZN13SPI_Syn_Class4initEv+0x3c>)
   11fc2:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   11fc4:	687b      	ldr	r3, [r7, #4]
   11fc6:	68db      	ldr	r3, [r3, #12]
   11fc8:	4618      	mov	r0, r3
   11fca:	4b08      	ldr	r3, [pc, #32]	; (11fec <_ZN13SPI_Syn_Class4initEv+0x40>)
   11fcc:	4798      	blx	r3
		txBuffer=txStaticBuffer;
   11fce:	687b      	ldr	r3, [r7, #4]
   11fd0:	4a07      	ldr	r2, [pc, #28]	; (11ff0 <_ZN13SPI_Syn_Class4initEv+0x44>)
   11fd2:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
   11fd4:	687b      	ldr	r3, [r7, #4]
   11fd6:	4a06      	ldr	r2, [pc, #24]	; (11ff0 <_ZN13SPI_Syn_Class4initEv+0x44>)
   11fd8:	609a      	str	r2, [r3, #8]
	ready=true;
   11fda:	687b      	ldr	r3, [r7, #4]
   11fdc:	2201      	movs	r2, #1
   11fde:	701a      	strb	r2, [r3, #0]
	
}
   11fe0:	bf00      	nop
   11fe2:	3708      	adds	r7, #8
   11fe4:	46bd      	mov	sp, r7
   11fe6:	bd80      	pop	{r7, pc}
   11fe8:	00002f7d 	.word	0x00002f7d
   11fec:	00002df1 	.word	0x00002df1
   11ff0:	20007b38 	.word	0x20007b38

00011ff4 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   11ff4:	b480      	push	{r7}
   11ff6:	b083      	sub	sp, #12
   11ff8:	af00      	add	r7, sp, #0
   11ffa:	6078      	str	r0, [r7, #4]
   11ffc:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   11ffe:	4a05      	ldr	r2, [pc, #20]	; (12014 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   12000:	687b      	ldr	r3, [r7, #4]
   12002:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   12004:	687b      	ldr	r3, [r7, #4]
   12006:	683a      	ldr	r2, [r7, #0]
   12008:	60da      	str	r2, [r3, #12]
}
   1200a:	bf00      	nop
   1200c:	370c      	adds	r7, #12
   1200e:	46bd      	mov	sp, r7
   12010:	bc80      	pop	{r7}
   12012:	4770      	bx	lr
   12014:	20007b34 	.word	0x20007b34

00012018 <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
   12018:	b580      	push	{r7, lr}
   1201a:	b082      	sub	sp, #8
   1201c:	af00      	add	r7, sp, #0
   1201e:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   12020:	687b      	ldr	r3, [r7, #4]
   12022:	68da      	ldr	r2, [r3, #12]
   12024:	687b      	ldr	r3, [r7, #4]
   12026:	3310      	adds	r3, #16
   12028:	4619      	mov	r1, r3
   1202a:	4610      	mov	r0, r2
   1202c:	4b07      	ldr	r3, [pc, #28]	; (1204c <_ZN13SPI_Syn_Class6EnableEv+0x34>)
   1202e:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   12030:	687b      	ldr	r3, [r7, #4]
   12032:	68db      	ldr	r3, [r3, #12]
   12034:	4618      	mov	r0, r3
   12036:	4b06      	ldr	r3, [pc, #24]	; (12050 <_ZN13SPI_Syn_Class6EnableEv+0x38>)
   12038:	4798      	blx	r3
	ready=true;
   1203a:	687b      	ldr	r3, [r7, #4]
   1203c:	2201      	movs	r2, #1
   1203e:	701a      	strb	r2, [r3, #0]
	return 0;
   12040:	2300      	movs	r3, #0
}
   12042:	4618      	mov	r0, r3
   12044:	3708      	adds	r7, #8
   12046:	46bd      	mov	sp, r7
   12048:	bd80      	pop	{r7, pc}
   1204a:	bf00      	nop
   1204c:	00002f7d 	.word	0x00002f7d
   12050:	00002df1 	.word	0x00002df1

00012054 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
   12054:	b580      	push	{r7, lr}
   12056:	b086      	sub	sp, #24
   12058:	af00      	add	r7, sp, #0
   1205a:	60f8      	str	r0, [r7, #12]
   1205c:	60b9      	str	r1, [r7, #8]
   1205e:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   12060:	68fb      	ldr	r3, [r7, #12]
   12062:	2201      	movs	r2, #1
   12064:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
   12066:	68fb      	ldr	r3, [r7, #12]
   12068:	691b      	ldr	r3, [r3, #16]
   1206a:	687a      	ldr	r2, [r7, #4]
   1206c:	b292      	uxth	r2, r2
   1206e:	68b9      	ldr	r1, [r7, #8]
   12070:	4618      	mov	r0, r3
   12072:	4b08      	ldr	r3, [pc, #32]	; (12094 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
   12074:	4798      	blx	r3
   12076:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   12078:	697b      	ldr	r3, [r7, #20]
   1207a:	2b00      	cmp	r3, #0
   1207c:	bf14      	ite	ne
   1207e:	2301      	movne	r3, #1
   12080:	2300      	moveq	r3, #0
   12082:	b2da      	uxtb	r2, r3
   12084:	68fb      	ldr	r3, [r7, #12]
   12086:	761a      	strb	r2, [r3, #24]
	 return w;
   12088:	697b      	ldr	r3, [r7, #20]
	
}
   1208a:	4618      	mov	r0, r3
   1208c:	3718      	adds	r7, #24
   1208e:	46bd      	mov	sp, r7
   12090:	bd80      	pop	{r7, pc}
   12092:	bf00      	nop
   12094:	000129a1 	.word	0x000129a1

00012098 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
   12098:	b580      	push	{r7, lr}
   1209a:	b086      	sub	sp, #24
   1209c:	af00      	add	r7, sp, #0
   1209e:	60f8      	str	r0, [r7, #12]
   120a0:	60b9      	str	r1, [r7, #8]
   120a2:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   120a4:	68fb      	ldr	r3, [r7, #12]
   120a6:	2201      	movs	r2, #1
   120a8:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
   120aa:	68fb      	ldr	r3, [r7, #12]
   120ac:	691b      	ldr	r3, [r3, #16]
   120ae:	687a      	ldr	r2, [r7, #4]
   120b0:	b292      	uxth	r2, r2
   120b2:	68b9      	ldr	r1, [r7, #8]
   120b4:	4618      	mov	r0, r3
   120b6:	4b08      	ldr	r3, [pc, #32]	; (120d8 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
   120b8:	4798      	blx	r3
   120ba:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   120bc:	697b      	ldr	r3, [r7, #20]
   120be:	2b00      	cmp	r3, #0
   120c0:	bf14      	ite	ne
   120c2:	2301      	movne	r3, #1
   120c4:	2300      	moveq	r3, #0
   120c6:	b2da      	uxtb	r2, r3
   120c8:	68fb      	ldr	r3, [r7, #12]
   120ca:	765a      	strb	r2, [r3, #25]
	return  r;
   120cc:	697b      	ldr	r3, [r7, #20]
}
   120ce:	4618      	mov	r0, r3
   120d0:	3718      	adds	r7, #24
   120d2:	46bd      	mov	sp, r7
   120d4:	bd80      	pop	{r7, pc}
   120d6:	bf00      	nop
   120d8:	000129f1 	.word	0x000129f1

000120dc <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
   120dc:	b580      	push	{r7, lr}
   120de:	b082      	sub	sp, #8
   120e0:	af00      	add	r7, sp, #0
   120e2:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   120e4:	687b      	ldr	r3, [r7, #4]
   120e6:	68db      	ldr	r3, [r3, #12]
   120e8:	4618      	mov	r0, r3
   120ea:	4b03      	ldr	r3, [pc, #12]	; (120f8 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
   120ec:	4798      	blx	r3
	
}
   120ee:	bf00      	nop
   120f0:	3708      	adds	r7, #8
   120f2:	46bd      	mov	sp, r7
   120f4:	bd80      	pop	{r7, pc}
   120f6:	bf00      	nop
   120f8:	00002e2d 	.word	0x00002e2d

000120fc <hri_port_set_DIR_reg>:
{
   120fc:	b480      	push	{r7}
   120fe:	b085      	sub	sp, #20
   12100:	af00      	add	r7, sp, #0
   12102:	60f8      	str	r0, [r7, #12]
   12104:	460b      	mov	r3, r1
   12106:	607a      	str	r2, [r7, #4]
   12108:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   1210a:	7afb      	ldrb	r3, [r7, #11]
   1210c:	68fa      	ldr	r2, [r7, #12]
   1210e:	01db      	lsls	r3, r3, #7
   12110:	4413      	add	r3, r2
   12112:	3308      	adds	r3, #8
   12114:	687a      	ldr	r2, [r7, #4]
   12116:	601a      	str	r2, [r3, #0]
}
   12118:	bf00      	nop
   1211a:	3714      	adds	r7, #20
   1211c:	46bd      	mov	sp, r7
   1211e:	bc80      	pop	{r7}
   12120:	4770      	bx	lr

00012122 <hri_port_clear_DIR_reg>:
{
   12122:	b480      	push	{r7}
   12124:	b085      	sub	sp, #20
   12126:	af00      	add	r7, sp, #0
   12128:	60f8      	str	r0, [r7, #12]
   1212a:	460b      	mov	r3, r1
   1212c:	607a      	str	r2, [r7, #4]
   1212e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   12130:	7afb      	ldrb	r3, [r7, #11]
   12132:	68fa      	ldr	r2, [r7, #12]
   12134:	01db      	lsls	r3, r3, #7
   12136:	4413      	add	r3, r2
   12138:	3304      	adds	r3, #4
   1213a:	687a      	ldr	r2, [r7, #4]
   1213c:	601a      	str	r2, [r3, #0]
}
   1213e:	bf00      	nop
   12140:	3714      	adds	r7, #20
   12142:	46bd      	mov	sp, r7
   12144:	bc80      	pop	{r7}
   12146:	4770      	bx	lr

00012148 <hri_port_set_OUT_reg>:
{
   12148:	b480      	push	{r7}
   1214a:	b085      	sub	sp, #20
   1214c:	af00      	add	r7, sp, #0
   1214e:	60f8      	str	r0, [r7, #12]
   12150:	460b      	mov	r3, r1
   12152:	607a      	str	r2, [r7, #4]
   12154:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   12156:	7afb      	ldrb	r3, [r7, #11]
   12158:	68fa      	ldr	r2, [r7, #12]
   1215a:	01db      	lsls	r3, r3, #7
   1215c:	4413      	add	r3, r2
   1215e:	3318      	adds	r3, #24
   12160:	687a      	ldr	r2, [r7, #4]
   12162:	601a      	str	r2, [r3, #0]
}
   12164:	bf00      	nop
   12166:	3714      	adds	r7, #20
   12168:	46bd      	mov	sp, r7
   1216a:	bc80      	pop	{r7}
   1216c:	4770      	bx	lr

0001216e <hri_port_clear_OUT_reg>:
{
   1216e:	b480      	push	{r7}
   12170:	b085      	sub	sp, #20
   12172:	af00      	add	r7, sp, #0
   12174:	60f8      	str	r0, [r7, #12]
   12176:	460b      	mov	r3, r1
   12178:	607a      	str	r2, [r7, #4]
   1217a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   1217c:	7afb      	ldrb	r3, [r7, #11]
   1217e:	68fa      	ldr	r2, [r7, #12]
   12180:	01db      	lsls	r3, r3, #7
   12182:	4413      	add	r3, r2
   12184:	3314      	adds	r3, #20
   12186:	687a      	ldr	r2, [r7, #4]
   12188:	601a      	str	r2, [r3, #0]
}
   1218a:	bf00      	nop
   1218c:	3714      	adds	r7, #20
   1218e:	46bd      	mov	sp, r7
   12190:	bc80      	pop	{r7}
   12192:	4770      	bx	lr

00012194 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   12194:	b480      	push	{r7}
   12196:	b085      	sub	sp, #20
   12198:	af00      	add	r7, sp, #0
   1219a:	6078      	str	r0, [r7, #4]
   1219c:	4608      	mov	r0, r1
   1219e:	4611      	mov	r1, r2
   121a0:	461a      	mov	r2, r3
   121a2:	4603      	mov	r3, r0
   121a4:	70fb      	strb	r3, [r7, #3]
   121a6:	460b      	mov	r3, r1
   121a8:	70bb      	strb	r3, [r7, #2]
   121aa:	4613      	mov	r3, r2
   121ac:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   121ae:	78fa      	ldrb	r2, [r7, #3]
   121b0:	78bb      	ldrb	r3, [r7, #2]
   121b2:	6879      	ldr	r1, [r7, #4]
   121b4:	01d2      	lsls	r2, r2, #7
   121b6:	440a      	add	r2, r1
   121b8:	4413      	add	r3, r2
   121ba:	3330      	adds	r3, #48	; 0x30
   121bc:	781b      	ldrb	r3, [r3, #0]
   121be:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   121c0:	7bfb      	ldrb	r3, [r7, #15]
   121c2:	f023 030f 	bic.w	r3, r3, #15
   121c6:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   121c8:	787b      	ldrb	r3, [r7, #1]
   121ca:	f003 030f 	and.w	r3, r3, #15
   121ce:	b2da      	uxtb	r2, r3
   121d0:	7bfb      	ldrb	r3, [r7, #15]
   121d2:	4313      	orrs	r3, r2
   121d4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   121d6:	78fa      	ldrb	r2, [r7, #3]
   121d8:	78bb      	ldrb	r3, [r7, #2]
   121da:	6879      	ldr	r1, [r7, #4]
   121dc:	01d2      	lsls	r2, r2, #7
   121de:	440a      	add	r2, r1
   121e0:	4413      	add	r3, r2
   121e2:	3330      	adds	r3, #48	; 0x30
   121e4:	7bfa      	ldrb	r2, [r7, #15]
   121e6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   121e8:	bf00      	nop
   121ea:	3714      	adds	r7, #20
   121ec:	46bd      	mov	sp, r7
   121ee:	bc80      	pop	{r7}
   121f0:	4770      	bx	lr

000121f2 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   121f2:	b480      	push	{r7}
   121f4:	b085      	sub	sp, #20
   121f6:	af00      	add	r7, sp, #0
   121f8:	6078      	str	r0, [r7, #4]
   121fa:	4608      	mov	r0, r1
   121fc:	4611      	mov	r1, r2
   121fe:	461a      	mov	r2, r3
   12200:	4603      	mov	r3, r0
   12202:	70fb      	strb	r3, [r7, #3]
   12204:	460b      	mov	r3, r1
   12206:	70bb      	strb	r3, [r7, #2]
   12208:	4613      	mov	r3, r2
   1220a:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   1220c:	78fa      	ldrb	r2, [r7, #3]
   1220e:	78bb      	ldrb	r3, [r7, #2]
   12210:	6879      	ldr	r1, [r7, #4]
   12212:	01d2      	lsls	r2, r2, #7
   12214:	440a      	add	r2, r1
   12216:	4413      	add	r3, r2
   12218:	3330      	adds	r3, #48	; 0x30
   1221a:	781b      	ldrb	r3, [r3, #0]
   1221c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   1221e:	7bfb      	ldrb	r3, [r7, #15]
   12220:	f003 030f 	and.w	r3, r3, #15
   12224:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   12226:	787b      	ldrb	r3, [r7, #1]
   12228:	011b      	lsls	r3, r3, #4
   1222a:	b2da      	uxtb	r2, r3
   1222c:	7bfb      	ldrb	r3, [r7, #15]
   1222e:	4313      	orrs	r3, r2
   12230:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   12232:	78fa      	ldrb	r2, [r7, #3]
   12234:	78bb      	ldrb	r3, [r7, #2]
   12236:	6879      	ldr	r1, [r7, #4]
   12238:	01d2      	lsls	r2, r2, #7
   1223a:	440a      	add	r2, r1
   1223c:	4413      	add	r3, r2
   1223e:	3330      	adds	r3, #48	; 0x30
   12240:	7bfa      	ldrb	r2, [r7, #15]
   12242:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   12244:	bf00      	nop
   12246:	3714      	adds	r7, #20
   12248:	46bd      	mov	sp, r7
   1224a:	bc80      	pop	{r7}
   1224c:	4770      	bx	lr

0001224e <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   1224e:	b480      	push	{r7}
   12250:	b085      	sub	sp, #20
   12252:	af00      	add	r7, sp, #0
   12254:	6078      	str	r0, [r7, #4]
   12256:	4608      	mov	r0, r1
   12258:	4611      	mov	r1, r2
   1225a:	461a      	mov	r2, r3
   1225c:	4603      	mov	r3, r0
   1225e:	70fb      	strb	r3, [r7, #3]
   12260:	460b      	mov	r3, r1
   12262:	70bb      	strb	r3, [r7, #2]
   12264:	4613      	mov	r3, r2
   12266:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   12268:	78fa      	ldrb	r2, [r7, #3]
   1226a:	78bb      	ldrb	r3, [r7, #2]
   1226c:	6879      	ldr	r1, [r7, #4]
   1226e:	01d2      	lsls	r2, r2, #7
   12270:	440a      	add	r2, r1
   12272:	4413      	add	r3, r2
   12274:	3340      	adds	r3, #64	; 0x40
   12276:	781b      	ldrb	r3, [r3, #0]
   12278:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   1227a:	7bfb      	ldrb	r3, [r7, #15]
   1227c:	f023 0301 	bic.w	r3, r3, #1
   12280:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   12282:	787a      	ldrb	r2, [r7, #1]
   12284:	7bfb      	ldrb	r3, [r7, #15]
   12286:	4313      	orrs	r3, r2
   12288:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   1228a:	78fa      	ldrb	r2, [r7, #3]
   1228c:	78bb      	ldrb	r3, [r7, #2]
   1228e:	6879      	ldr	r1, [r7, #4]
   12290:	01d2      	lsls	r2, r2, #7
   12292:	440a      	add	r2, r1
   12294:	4413      	add	r3, r2
   12296:	3340      	adds	r3, #64	; 0x40
   12298:	7bfa      	ldrb	r2, [r7, #15]
   1229a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   1229c:	bf00      	nop
   1229e:	3714      	adds	r7, #20
   122a0:	46bd      	mov	sp, r7
   122a2:	bc80      	pop	{r7}
   122a4:	4770      	bx	lr

000122a6 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   122a6:	b480      	push	{r7}
   122a8:	b085      	sub	sp, #20
   122aa:	af00      	add	r7, sp, #0
   122ac:	60f8      	str	r0, [r7, #12]
   122ae:	460b      	mov	r3, r1
   122b0:	607a      	str	r2, [r7, #4]
   122b2:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   122b4:	7afb      	ldrb	r3, [r7, #11]
   122b6:	68fa      	ldr	r2, [r7, #12]
   122b8:	01db      	lsls	r3, r3, #7
   122ba:	4413      	add	r3, r2
   122bc:	3328      	adds	r3, #40	; 0x28
   122be:	687a      	ldr	r2, [r7, #4]
   122c0:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   122c2:	bf00      	nop
   122c4:	3714      	adds	r7, #20
   122c6:	46bd      	mov	sp, r7
   122c8:	bc80      	pop	{r7}
   122ca:	4770      	bx	lr

000122cc <_gpio_set_direction>:
{
   122cc:	b580      	push	{r7, lr}
   122ce:	b082      	sub	sp, #8
   122d0:	af00      	add	r7, sp, #0
   122d2:	4603      	mov	r3, r0
   122d4:	6039      	str	r1, [r7, #0]
   122d6:	71fb      	strb	r3, [r7, #7]
   122d8:	4613      	mov	r3, r2
   122da:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   122dc:	79bb      	ldrb	r3, [r7, #6]
   122de:	2b01      	cmp	r3, #1
   122e0:	d01c      	beq.n	1231c <_gpio_set_direction+0x50>
   122e2:	2b02      	cmp	r3, #2
   122e4:	d037      	beq.n	12356 <_gpio_set_direction+0x8a>
   122e6:	2b00      	cmp	r3, #0
   122e8:	d14e      	bne.n	12388 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   122ea:	79fb      	ldrb	r3, [r7, #7]
   122ec:	683a      	ldr	r2, [r7, #0]
   122ee:	4619      	mov	r1, r3
   122f0:	482a      	ldr	r0, [pc, #168]	; (1239c <_gpio_set_direction+0xd0>)
   122f2:	4b2b      	ldr	r3, [pc, #172]	; (123a0 <_gpio_set_direction+0xd4>)
   122f4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   122f6:	683b      	ldr	r3, [r7, #0]
   122f8:	b29b      	uxth	r3, r3
   122fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   122fe:	79fb      	ldrb	r3, [r7, #7]
   12300:	4619      	mov	r1, r3
   12302:	4826      	ldr	r0, [pc, #152]	; (1239c <_gpio_set_direction+0xd0>)
   12304:	4b27      	ldr	r3, [pc, #156]	; (123a4 <_gpio_set_direction+0xd8>)
   12306:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12308:	683b      	ldr	r3, [r7, #0]
   1230a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   1230c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12310:	79fb      	ldrb	r3, [r7, #7]
   12312:	4619      	mov	r1, r3
   12314:	4821      	ldr	r0, [pc, #132]	; (1239c <_gpio_set_direction+0xd0>)
   12316:	4b23      	ldr	r3, [pc, #140]	; (123a4 <_gpio_set_direction+0xd8>)
   12318:	4798      	blx	r3
		break;
   1231a:	e03a      	b.n	12392 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   1231c:	79fb      	ldrb	r3, [r7, #7]
   1231e:	683a      	ldr	r2, [r7, #0]
   12320:	4619      	mov	r1, r3
   12322:	481e      	ldr	r0, [pc, #120]	; (1239c <_gpio_set_direction+0xd0>)
   12324:	4b1e      	ldr	r3, [pc, #120]	; (123a0 <_gpio_set_direction+0xd4>)
   12326:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   12328:	683b      	ldr	r3, [r7, #0]
   1232a:	b29b      	uxth	r3, r3
   1232c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   12330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12334:	79f9      	ldrb	r1, [r7, #7]
   12336:	461a      	mov	r2, r3
   12338:	4818      	ldr	r0, [pc, #96]	; (1239c <_gpio_set_direction+0xd0>)
   1233a:	4b1a      	ldr	r3, [pc, #104]	; (123a4 <_gpio_set_direction+0xd8>)
   1233c:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   1233e:	683b      	ldr	r3, [r7, #0]
   12340:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   12342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   12346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   1234a:	79f9      	ldrb	r1, [r7, #7]
   1234c:	461a      	mov	r2, r3
   1234e:	4813      	ldr	r0, [pc, #76]	; (1239c <_gpio_set_direction+0xd0>)
   12350:	4b14      	ldr	r3, [pc, #80]	; (123a4 <_gpio_set_direction+0xd8>)
   12352:	4798      	blx	r3
		break;
   12354:	e01d      	b.n	12392 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   12356:	79fb      	ldrb	r3, [r7, #7]
   12358:	683a      	ldr	r2, [r7, #0]
   1235a:	4619      	mov	r1, r3
   1235c:	480f      	ldr	r0, [pc, #60]	; (1239c <_gpio_set_direction+0xd0>)
   1235e:	4b12      	ldr	r3, [pc, #72]	; (123a8 <_gpio_set_direction+0xdc>)
   12360:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   12362:	683b      	ldr	r3, [r7, #0]
   12364:	b29b      	uxth	r3, r3
   12366:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   1236a:	79fb      	ldrb	r3, [r7, #7]
   1236c:	4619      	mov	r1, r3
   1236e:	480b      	ldr	r0, [pc, #44]	; (1239c <_gpio_set_direction+0xd0>)
   12370:	4b0c      	ldr	r3, [pc, #48]	; (123a4 <_gpio_set_direction+0xd8>)
   12372:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12374:	683b      	ldr	r3, [r7, #0]
   12376:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   12378:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   1237c:	79fb      	ldrb	r3, [r7, #7]
   1237e:	4619      	mov	r1, r3
   12380:	4806      	ldr	r0, [pc, #24]	; (1239c <_gpio_set_direction+0xd0>)
   12382:	4b08      	ldr	r3, [pc, #32]	; (123a4 <_gpio_set_direction+0xd8>)
   12384:	4798      	blx	r3
		break;
   12386:	e004      	b.n	12392 <_gpio_set_direction+0xc6>
		ASSERT(false);
   12388:	2246      	movs	r2, #70	; 0x46
   1238a:	4908      	ldr	r1, [pc, #32]	; (123ac <_gpio_set_direction+0xe0>)
   1238c:	2000      	movs	r0, #0
   1238e:	4b08      	ldr	r3, [pc, #32]	; (123b0 <_gpio_set_direction+0xe4>)
   12390:	4798      	blx	r3
}
   12392:	bf00      	nop
   12394:	3708      	adds	r7, #8
   12396:	46bd      	mov	sp, r7
   12398:	bd80      	pop	{r7, pc}
   1239a:	bf00      	nop
   1239c:	41008000 	.word	0x41008000
   123a0:	00012123 	.word	0x00012123
   123a4:	000122a7 	.word	0x000122a7
   123a8:	000120fd 	.word	0x000120fd
   123ac:	000138a0 	.word	0x000138a0
   123b0:	00003e05 	.word	0x00003e05

000123b4 <_gpio_set_level>:
{
   123b4:	b580      	push	{r7, lr}
   123b6:	b082      	sub	sp, #8
   123b8:	af00      	add	r7, sp, #0
   123ba:	4603      	mov	r3, r0
   123bc:	6039      	str	r1, [r7, #0]
   123be:	71fb      	strb	r3, [r7, #7]
   123c0:	4613      	mov	r3, r2
   123c2:	71bb      	strb	r3, [r7, #6]
	if (level) {
   123c4:	79bb      	ldrb	r3, [r7, #6]
   123c6:	2b00      	cmp	r3, #0
   123c8:	d006      	beq.n	123d8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   123ca:	79fb      	ldrb	r3, [r7, #7]
   123cc:	683a      	ldr	r2, [r7, #0]
   123ce:	4619      	mov	r1, r3
   123d0:	4806      	ldr	r0, [pc, #24]	; (123ec <_gpio_set_level+0x38>)
   123d2:	4b07      	ldr	r3, [pc, #28]	; (123f0 <_gpio_set_level+0x3c>)
   123d4:	4798      	blx	r3
}
   123d6:	e005      	b.n	123e4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   123d8:	79fb      	ldrb	r3, [r7, #7]
   123da:	683a      	ldr	r2, [r7, #0]
   123dc:	4619      	mov	r1, r3
   123de:	4803      	ldr	r0, [pc, #12]	; (123ec <_gpio_set_level+0x38>)
   123e0:	4b04      	ldr	r3, [pc, #16]	; (123f4 <_gpio_set_level+0x40>)
   123e2:	4798      	blx	r3
}
   123e4:	bf00      	nop
   123e6:	3708      	adds	r7, #8
   123e8:	46bd      	mov	sp, r7
   123ea:	bd80      	pop	{r7, pc}
   123ec:	41008000 	.word	0x41008000
   123f0:	00012149 	.word	0x00012149
   123f4:	0001216f 	.word	0x0001216f

000123f8 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   123f8:	b590      	push	{r4, r7, lr}
   123fa:	b085      	sub	sp, #20
   123fc:	af00      	add	r7, sp, #0
   123fe:	6078      	str	r0, [r7, #4]
   12400:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   12402:	687b      	ldr	r3, [r7, #4]
   12404:	095b      	lsrs	r3, r3, #5
   12406:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   12408:	687b      	ldr	r3, [r7, #4]
   1240a:	b2db      	uxtb	r3, r3
   1240c:	f003 031f 	and.w	r3, r3, #31
   12410:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   12412:	683b      	ldr	r3, [r7, #0]
   12414:	f1b3 3fff 	cmp.w	r3, #4294967295
   12418:	d106      	bne.n	12428 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   1241a:	7bba      	ldrb	r2, [r7, #14]
   1241c:	7bf9      	ldrb	r1, [r7, #15]
   1241e:	2300      	movs	r3, #0
   12420:	4812      	ldr	r0, [pc, #72]	; (1246c <_gpio_set_pin_function+0x74>)
   12422:	4c13      	ldr	r4, [pc, #76]	; (12470 <_gpio_set_pin_function+0x78>)
   12424:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   12426:	e01d      	b.n	12464 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   12428:	7bba      	ldrb	r2, [r7, #14]
   1242a:	7bf9      	ldrb	r1, [r7, #15]
   1242c:	2301      	movs	r3, #1
   1242e:	480f      	ldr	r0, [pc, #60]	; (1246c <_gpio_set_pin_function+0x74>)
   12430:	4c0f      	ldr	r4, [pc, #60]	; (12470 <_gpio_set_pin_function+0x78>)
   12432:	47a0      	blx	r4
		if (pin & 1) {
   12434:	7bbb      	ldrb	r3, [r7, #14]
   12436:	f003 0301 	and.w	r3, r3, #1
   1243a:	2b00      	cmp	r3, #0
   1243c:	d009      	beq.n	12452 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   1243e:	7bbb      	ldrb	r3, [r7, #14]
   12440:	105b      	asrs	r3, r3, #1
   12442:	b2da      	uxtb	r2, r3
   12444:	683b      	ldr	r3, [r7, #0]
   12446:	b2db      	uxtb	r3, r3
   12448:	7bf9      	ldrb	r1, [r7, #15]
   1244a:	4808      	ldr	r0, [pc, #32]	; (1246c <_gpio_set_pin_function+0x74>)
   1244c:	4c09      	ldr	r4, [pc, #36]	; (12474 <_gpio_set_pin_function+0x7c>)
   1244e:	47a0      	blx	r4
}
   12450:	e008      	b.n	12464 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   12452:	7bbb      	ldrb	r3, [r7, #14]
   12454:	105b      	asrs	r3, r3, #1
   12456:	b2da      	uxtb	r2, r3
   12458:	683b      	ldr	r3, [r7, #0]
   1245a:	b2db      	uxtb	r3, r3
   1245c:	7bf9      	ldrb	r1, [r7, #15]
   1245e:	4803      	ldr	r0, [pc, #12]	; (1246c <_gpio_set_pin_function+0x74>)
   12460:	4c05      	ldr	r4, [pc, #20]	; (12478 <_gpio_set_pin_function+0x80>)
   12462:	47a0      	blx	r4
}
   12464:	bf00      	nop
   12466:	3714      	adds	r7, #20
   12468:	46bd      	mov	sp, r7
   1246a:	bd90      	pop	{r4, r7, pc}
   1246c:	41008000 	.word	0x41008000
   12470:	0001224f 	.word	0x0001224f
   12474:	000121f3 	.word	0x000121f3
   12478:	00012195 	.word	0x00012195

0001247c <gpio_set_pin_function>:
{
   1247c:	b580      	push	{r7, lr}
   1247e:	b082      	sub	sp, #8
   12480:	af00      	add	r7, sp, #0
   12482:	6078      	str	r0, [r7, #4]
   12484:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   12486:	6839      	ldr	r1, [r7, #0]
   12488:	6878      	ldr	r0, [r7, #4]
   1248a:	4b03      	ldr	r3, [pc, #12]	; (12498 <gpio_set_pin_function+0x1c>)
   1248c:	4798      	blx	r3
}
   1248e:	bf00      	nop
   12490:	3708      	adds	r7, #8
   12492:	46bd      	mov	sp, r7
   12494:	bd80      	pop	{r7, pc}
   12496:	bf00      	nop
   12498:	000123f9 	.word	0x000123f9

0001249c <gpio_set_pin_direction>:
{
   1249c:	b580      	push	{r7, lr}
   1249e:	b082      	sub	sp, #8
   124a0:	af00      	add	r7, sp, #0
   124a2:	4603      	mov	r3, r0
   124a4:	460a      	mov	r2, r1
   124a6:	71fb      	strb	r3, [r7, #7]
   124a8:	4613      	mov	r3, r2
   124aa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   124ac:	79fb      	ldrb	r3, [r7, #7]
   124ae:	115b      	asrs	r3, r3, #5
   124b0:	b2d8      	uxtb	r0, r3
   124b2:	79fb      	ldrb	r3, [r7, #7]
   124b4:	f003 031f 	and.w	r3, r3, #31
   124b8:	2201      	movs	r2, #1
   124ba:	fa02 f303 	lsl.w	r3, r2, r3
   124be:	79ba      	ldrb	r2, [r7, #6]
   124c0:	4619      	mov	r1, r3
   124c2:	4b03      	ldr	r3, [pc, #12]	; (124d0 <gpio_set_pin_direction+0x34>)
   124c4:	4798      	blx	r3
}
   124c6:	bf00      	nop
   124c8:	3708      	adds	r7, #8
   124ca:	46bd      	mov	sp, r7
   124cc:	bd80      	pop	{r7, pc}
   124ce:	bf00      	nop
   124d0:	000122cd 	.word	0x000122cd

000124d4 <gpio_set_pin_level>:
{
   124d4:	b580      	push	{r7, lr}
   124d6:	b082      	sub	sp, #8
   124d8:	af00      	add	r7, sp, #0
   124da:	4603      	mov	r3, r0
   124dc:	460a      	mov	r2, r1
   124de:	71fb      	strb	r3, [r7, #7]
   124e0:	4613      	mov	r3, r2
   124e2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   124e4:	79fb      	ldrb	r3, [r7, #7]
   124e6:	115b      	asrs	r3, r3, #5
   124e8:	b2d8      	uxtb	r0, r3
   124ea:	79fb      	ldrb	r3, [r7, #7]
   124ec:	f003 031f 	and.w	r3, r3, #31
   124f0:	2201      	movs	r2, #1
   124f2:	fa02 f303 	lsl.w	r3, r2, r3
   124f6:	79ba      	ldrb	r2, [r7, #6]
   124f8:	4619      	mov	r1, r3
   124fa:	4b03      	ldr	r3, [pc, #12]	; (12508 <gpio_set_pin_level+0x34>)
   124fc:	4798      	blx	r3
}
   124fe:	bf00      	nop
   12500:	3708      	adds	r7, #8
   12502:	46bd      	mov	sp, r7
   12504:	bd80      	pop	{r7, pc}
   12506:	bf00      	nop
   12508:	000123b5 	.word	0x000123b5

0001250c <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   1250c:	b580      	push	{r7, lr}
   1250e:	b082      	sub	sp, #8
   12510:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   12512:	2100      	movs	r1, #0
   12514:	2008      	movs	r0, #8
   12516:	4b24      	ldr	r3, [pc, #144]	; (125a8 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   12518:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   1251a:	2100      	movs	r1, #0
   1251c:	202b      	movs	r0, #43	; 0x2b
   1251e:	4b22      	ldr	r3, [pc, #136]	; (125a8 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   12520:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   12522:	2100      	movs	r1, #0
   12524:	202a      	movs	r0, #42	; 0x2a
   12526:	4b20      	ldr	r3, [pc, #128]	; (125a8 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   12528:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   1252a:	2102      	movs	r1, #2
   1252c:	2008      	movs	r0, #8
   1252e:	4b1f      	ldr	r3, [pc, #124]	; (125ac <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   12530:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   12532:	2102      	movs	r1, #2
   12534:	202b      	movs	r0, #43	; 0x2b
   12536:	4b1d      	ldr	r3, [pc, #116]	; (125ac <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   12538:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   1253a:	2102      	movs	r1, #2
   1253c:	202a      	movs	r0, #42	; 0x2a
   1253e:	4b1b      	ldr	r3, [pc, #108]	; (125ac <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   12540:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   12542:	2101      	movs	r1, #1
   12544:	2008      	movs	r0, #8
   12546:	4b1a      	ldr	r3, [pc, #104]	; (125b0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12548:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   1254a:	2100      	movs	r1, #0
   1254c:	202b      	movs	r0, #43	; 0x2b
   1254e:	4b18      	ldr	r3, [pc, #96]	; (125b0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12550:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   12552:	2100      	movs	r1, #0
   12554:	202a      	movs	r0, #42	; 0x2a
   12556:	4b16      	ldr	r3, [pc, #88]	; (125b0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12558:	4798      	blx	r3

	delay_us(1);
   1255a:	2001      	movs	r0, #1
   1255c:	4b15      	ldr	r3, [pc, #84]	; (125b4 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1255e:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   12560:	2300      	movs	r3, #0
   12562:	607b      	str	r3, [r7, #4]
   12564:	687b      	ldr	r3, [r7, #4]
   12566:	2b06      	cmp	r3, #6
   12568:	dc11      	bgt.n	1258e <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   1256a:	2101      	movs	r1, #1
   1256c:	202a      	movs	r0, #42	; 0x2a
   1256e:	4b10      	ldr	r3, [pc, #64]	; (125b0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12570:	4798      	blx	r3
		delay_us(1);
   12572:	2001      	movs	r0, #1
   12574:	4b0f      	ldr	r3, [pc, #60]	; (125b4 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   12576:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   12578:	2100      	movs	r1, #0
   1257a:	202a      	movs	r0, #42	; 0x2a
   1257c:	4b0c      	ldr	r3, [pc, #48]	; (125b0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   1257e:	4798      	blx	r3
		delay_us(1);
   12580:	2001      	movs	r0, #1
   12582:	4b0c      	ldr	r3, [pc, #48]	; (125b4 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   12584:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   12586:	687b      	ldr	r3, [r7, #4]
   12588:	3301      	adds	r3, #1
   1258a:	607b      	str	r3, [r7, #4]
   1258c:	e7ea      	b.n	12564 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   1258e:	2101      	movs	r1, #1
   12590:	202b      	movs	r0, #43	; 0x2b
   12592:	4b07      	ldr	r3, [pc, #28]	; (125b0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12594:	4798      	blx	r3
	delay_us(1);
   12596:	2001      	movs	r0, #1
   12598:	4b06      	ldr	r3, [pc, #24]	; (125b4 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   1259a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   1259c:	4b06      	ldr	r3, [pc, #24]	; (125b8 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   1259e:	4798      	blx	r3
}
   125a0:	bf00      	nop
   125a2:	3708      	adds	r7, #8
   125a4:	46bd      	mov	sp, r7
   125a6:	bd80      	pop	{r7, pc}
   125a8:	0001247d 	.word	0x0001247d
   125ac:	0001249d 	.word	0x0001249d
   125b0:	000124d5 	.word	0x000124d5
   125b4:	00002795 	.word	0x00002795
   125b8:	00001b51 	.word	0x00001b51

000125bc <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
// default constructor
N25Q256_Class::N25Q256_Class()
{

} //N25Q256_Class
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   125bc:	b480      	push	{r7}
   125be:	b083      	sub	sp, #12
   125c0:	af00      	add	r7, sp, #0
   125c2:	6078      	str	r0, [r7, #4]
   125c4:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   125c6:	687b      	ldr	r3, [r7, #4]
   125c8:	683a      	ldr	r2, [r7, #0]
   125ca:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   125cc:	687b      	ldr	r3, [r7, #4]
   125ce:	4a04      	ldr	r2, [pc, #16]	; (125e0 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   125d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   125d4:	687b      	ldr	r3, [r7, #4]
   125d6:	4618      	mov	r0, r3
   125d8:	370c      	adds	r7, #12
   125da:	46bd      	mov	sp, r7
   125dc:	bc80      	pop	{r7}
   125de:	4770      	bx	lr
   125e0:	001fff00 	.word	0x001fff00

000125e4 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   125e4:	b480      	push	{r7}
   125e6:	b083      	sub	sp, #12
   125e8:	af00      	add	r7, sp, #0
   125ea:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   125ec:	687b      	ldr	r3, [r7, #4]
   125ee:	4618      	mov	r0, r3
   125f0:	370c      	adds	r7, #12
   125f2:	46bd      	mov	sp, r7
   125f4:	bc80      	pop	{r7}
   125f6:	4770      	bx	lr

000125f8 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   125f8:	b580      	push	{r7, lr}
   125fa:	b082      	sub	sp, #8
   125fc:	af00      	add	r7, sp, #0
   125fe:	6078      	str	r0, [r7, #4]
	xferDone=false;
   12600:	687b      	ldr	r3, [r7, #4]
   12602:	2200      	movs	r2, #0
   12604:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   12606:	6878      	ldr	r0, [r7, #4]
   12608:	4b04      	ldr	r3, [pc, #16]	; (1261c <_ZN13N25Q256_Class4InitEv+0x24>)
   1260a:	4798      	blx	r3
	return SelfTest();
   1260c:	6878      	ldr	r0, [r7, #4]
   1260e:	4b04      	ldr	r3, [pc, #16]	; (12620 <_ZN13N25Q256_Class4InitEv+0x28>)
   12610:	4798      	blx	r3
   12612:	4603      	mov	r3, r0
}
   12614:	4618      	mov	r0, r3
   12616:	3708      	adds	r7, #8
   12618:	46bd      	mov	sp, r7
   1261a:	bd80      	pop	{r7, pc}
   1261c:	00012625 	.word	0x00012625
   12620:	000127c1 	.word	0x000127c1

00012624 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   12624:	b590      	push	{r4, r7, lr}
   12626:	b083      	sub	sp, #12
   12628:	af00      	add	r7, sp, #0
   1262a:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   1262c:	687b      	ldr	r3, [r7, #4]
   1262e:	685b      	ldr	r3, [r3, #4]
   12630:	4618      	mov	r0, r3
   12632:	4b08      	ldr	r3, [pc, #32]	; (12654 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   12634:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   12636:	687b      	ldr	r3, [r7, #4]
   12638:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   1263a:	2300      	movs	r3, #0
   1263c:	4a06      	ldr	r2, [pc, #24]	; (12658 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   1263e:	4807      	ldr	r0, [pc, #28]	; (1265c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   12640:	4c07      	ldr	r4, [pc, #28]	; (12660 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   12642:	47a0      	blx	r4
   12644:	4602      	mov	r2, r0
   12646:	687b      	ldr	r3, [r7, #4]
   12648:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   1264c:	bf00      	nop
   1264e:	370c      	adds	r7, #12
   12650:	46bd      	mov	sp, r7
   12652:	bd90      	pop	{r4, r7, pc}
   12654:	00002cad 	.word	0x00002cad
   12658:	0001250d 	.word	0x0001250d
   1265c:	20007b7c 	.word	0x20007b7c
   12660:	0000bdd1 	.word	0x0000bdd1

00012664 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   12664:	b580      	push	{r7, lr}
   12666:	b084      	sub	sp, #16
   12668:	af00      	add	r7, sp, #0
   1266a:	6078      	str	r0, [r7, #4]
   1266c:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   1266e:	687b      	ldr	r3, [r7, #4]
   12670:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   12674:	685b      	ldr	r3, [r3, #4]
   12676:	689b      	ldr	r3, [r3, #8]
   12678:	687a      	ldr	r2, [r7, #4]
   1267a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   1267e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   12682:	6839      	ldr	r1, [r7, #0]
   12684:	4798      	blx	r3
   12686:	4603      	mov	r3, r0
   12688:	60fb      	str	r3, [r7, #12]
	return	e;
   1268a:	68fb      	ldr	r3, [r7, #12]
}
   1268c:	4618      	mov	r0, r3
   1268e:	3710      	adds	r7, #16
   12690:	46bd      	mov	sp, r7
   12692:	bd80      	pop	{r7, pc}

00012694 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   12694:	b590      	push	{r4, r7, lr}
   12696:	b087      	sub	sp, #28
   12698:	af00      	add	r7, sp, #0
   1269a:	60f8      	str	r0, [r7, #12]
   1269c:	60b9      	str	r1, [r7, #8]
   1269e:	607a      	str	r2, [r7, #4]
   126a0:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   126a2:	68fb      	ldr	r3, [r7, #12]
   126a4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   126a8:	685b      	ldr	r3, [r3, #4]
   126aa:	685c      	ldr	r4, [r3, #4]
   126ac:	68fb      	ldr	r3, [r7, #12]
   126ae:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   126b2:	683b      	ldr	r3, [r7, #0]
   126b4:	687a      	ldr	r2, [r7, #4]
   126b6:	68b9      	ldr	r1, [r7, #8]
   126b8:	47a0      	blx	r4
   126ba:	4603      	mov	r3, r0
   126bc:	617b      	str	r3, [r7, #20]
	return	w;
   126be:	697b      	ldr	r3, [r7, #20]
}
   126c0:	4618      	mov	r0, r3
   126c2:	371c      	adds	r7, #28
   126c4:	46bd      	mov	sp, r7
   126c6:	bd90      	pop	{r4, r7, pc}

000126c8 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   126c8:	b590      	push	{r4, r7, lr}
   126ca:	b087      	sub	sp, #28
   126cc:	af00      	add	r7, sp, #0
   126ce:	60f8      	str	r0, [r7, #12]
   126d0:	60b9      	str	r1, [r7, #8]
   126d2:	607a      	str	r2, [r7, #4]
   126d4:	603b      	str	r3, [r7, #0]
	xferDone=false;
   126d6:	68fb      	ldr	r3, [r7, #12]
   126d8:	2200      	movs	r2, #0
   126da:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   126dc:	68fb      	ldr	r3, [r7, #12]
   126de:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   126e2:	685b      	ldr	r3, [r3, #4]
   126e4:	681c      	ldr	r4, [r3, #0]
   126e6:	68fb      	ldr	r3, [r7, #12]
   126e8:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   126ec:	683b      	ldr	r3, [r7, #0]
   126ee:	687a      	ldr	r2, [r7, #4]
   126f0:	68b9      	ldr	r1, [r7, #8]
   126f2:	47a0      	blx	r4
   126f4:	4603      	mov	r3, r0
   126f6:	617b      	str	r3, [r7, #20]
	return	r;
   126f8:	697b      	ldr	r3, [r7, #20]
}
   126fa:	4618      	mov	r0, r3
   126fc:	371c      	adds	r7, #28
   126fe:	46bd      	mov	sp, r7
   12700:	bd90      	pop	{r4, r7, pc}
	...

00012704 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   12704:	b580      	push	{r7, lr}
   12706:	b082      	sub	sp, #8
   12708:	af00      	add	r7, sp, #0
   1270a:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   1270c:	687a      	ldr	r2, [r7, #4]
   1270e:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   12712:	f043 0310 	orr.w	r3, r3, #16
   12716:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   1271a:	687a      	ldr	r2, [r7, #4]
   1271c:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   12720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12724:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   12728:	687a      	ldr	r2, [r7, #4]
   1272a:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   1272e:	f36f 1305 	bfc	r3, #4, #2
   12732:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   12736:	687b      	ldr	r3, [r7, #4]
   12738:	2205      	movs	r2, #5
   1273a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   1273e:	687b      	ldr	r3, [r7, #4]
   12740:	2201      	movs	r2, #1
   12742:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   12746:	687b      	ldr	r3, [r7, #4]
   12748:	f203 2212 	addw	r2, r3, #530	; 0x212
   1274c:	687b      	ldr	r3, [r7, #4]
   1274e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   12752:	687b      	ldr	r3, [r7, #4]
   12754:	685a      	ldr	r2, [r3, #4]
   12756:	687b      	ldr	r3, [r7, #4]
   12758:	f503 7305 	add.w	r3, r3, #532	; 0x214
   1275c:	4619      	mov	r1, r3
   1275e:	4610      	mov	r0, r2
   12760:	4b04      	ldr	r3, [pc, #16]	; (12774 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   12762:	4798      	blx	r3
		return status;
   12764:	687b      	ldr	r3, [r7, #4]
   12766:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   1276a:	4618      	mov	r0, r3
   1276c:	3708      	adds	r7, #8
   1276e:	46bd      	mov	sp, r7
   12770:	bd80      	pop	{r7, pc}
   12772:	bf00      	nop
   12774:	00002d25 	.word	0x00002d25

00012778 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   12778:	b580      	push	{r7, lr}
   1277a:	b082      	sub	sp, #8
   1277c:	af00      	add	r7, sp, #0
   1277e:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   12780:	6878      	ldr	r0, [r7, #4]
   12782:	4b0e      	ldr	r3, [pc, #56]	; (127bc <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   12784:	4798      	blx	r3
   12786:	4603      	mov	r3, r0
   12788:	461a      	mov	r2, r3
   1278a:	687b      	ldr	r3, [r7, #4]
   1278c:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   12790:	687b      	ldr	r3, [r7, #4]
   12792:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   12796:	f003 0301 	and.w	r3, r3, #1
   1279a:	2b00      	cmp	r3, #0
   1279c:	d000      	beq.n	127a0 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   1279e:	e7ef      	b.n	12780 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   127a0:	687b      	ldr	r3, [r7, #4]
   127a2:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   127a6:	f003 0301 	and.w	r3, r3, #1
   127aa:	2b00      	cmp	r3, #0
   127ac:	bf0c      	ite	eq
   127ae:	2301      	moveq	r3, #1
   127b0:	2300      	movne	r3, #0
   127b2:	b2db      	uxtb	r3, r3
}
   127b4:	4618      	mov	r0, r3
   127b6:	3708      	adds	r7, #8
   127b8:	46bd      	mov	sp, r7
   127ba:	bd80      	pop	{r7, pc}
   127bc:	00012705 	.word	0x00012705

000127c0 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   127c0:	b590      	push	{r4, r7, lr}
   127c2:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   127c6:	b085      	sub	sp, #20
   127c8:	af00      	add	r7, sp, #0
   127ca:	f107 0310 	add.w	r3, r7, #16
   127ce:	3b0c      	subs	r3, #12
   127d0:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   127d2:	f107 0310 	add.w	r3, r7, #16
   127d6:	3b0c      	subs	r3, #12
   127d8:	681b      	ldr	r3, [r3, #0]
   127da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   127de:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   127e2:	f107 0310 	add.w	r3, r7, #16
   127e6:	3b0c      	subs	r3, #12
   127e8:	681b      	ldr	r3, [r3, #0]
   127ea:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   127ee:	f107 0110 	add.w	r1, r7, #16
   127f2:	3904      	subs	r1, #4
   127f4:	f107 0010 	add.w	r0, r7, #16
   127f8:	380c      	subs	r0, #12
   127fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   127fe:	6800      	ldr	r0, [r0, #0]
   12800:	4c4b      	ldr	r4, [pc, #300]	; (12930 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   12802:	47a0      	blx	r4
	WaitOnBusy();
   12804:	f107 0310 	add.w	r3, r7, #16
   12808:	3b0c      	subs	r3, #12
   1280a:	6818      	ldr	r0, [r3, #0]
   1280c:	4b49      	ldr	r3, [pc, #292]	; (12934 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   1280e:	4798      	blx	r3
	Erase(currentAddress);
   12810:	f107 0310 	add.w	r3, r7, #16
   12814:	3b0c      	subs	r3, #12
   12816:	681b      	ldr	r3, [r3, #0]
   12818:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   1281c:	f107 0310 	add.w	r3, r7, #16
   12820:	3b0c      	subs	r3, #12
   12822:	4611      	mov	r1, r2
   12824:	6818      	ldr	r0, [r3, #0]
   12826:	4b44      	ldr	r3, [pc, #272]	; (12938 <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   12828:	4798      	blx	r3
	WaitOnBusy();
   1282a:	f107 0310 	add.w	r3, r7, #16
   1282e:	3b0c      	subs	r3, #12
   12830:	6818      	ldr	r0, [r3, #0]
   12832:	4b40      	ldr	r3, [pc, #256]	; (12934 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   12834:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   12836:	f107 0310 	add.w	r3, r7, #16
   1283a:	3b0c      	subs	r3, #12
   1283c:	681b      	ldr	r3, [r3, #0]
   1283e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   12842:	f107 0110 	add.w	r1, r7, #16
   12846:	3904      	subs	r1, #4
   12848:	f107 0010 	add.w	r0, r7, #16
   1284c:	380c      	subs	r0, #12
   1284e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   12852:	6800      	ldr	r0, [r0, #0]
   12854:	4c39      	ldr	r4, [pc, #228]	; (1293c <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   12856:	47a0      	blx	r4
	WaitOnBusy();
   12858:	f107 0310 	add.w	r3, r7, #16
   1285c:	3b0c      	subs	r3, #12
   1285e:	6818      	ldr	r0, [r3, #0]
   12860:	4b34      	ldr	r3, [pc, #208]	; (12934 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   12862:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   12864:	f107 0310 	add.w	r3, r7, #16
   12868:	3b0c      	subs	r3, #12
   1286a:	681b      	ldr	r3, [r3, #0]
   1286c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   12870:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   12874:	f101 0110 	add.w	r1, r1, #16
   12878:	3904      	subs	r1, #4
   1287a:	f107 0010 	add.w	r0, r7, #16
   1287e:	380c      	subs	r0, #12
   12880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   12884:	6800      	ldr	r0, [r0, #0]
   12886:	4c2a      	ldr	r4, [pc, #168]	; (12930 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   12888:	47a0      	blx	r4
	WaitOnBusy();
   1288a:	f107 0310 	add.w	r3, r7, #16
   1288e:	3b0c      	subs	r3, #12
   12890:	6818      	ldr	r0, [r3, #0]
   12892:	4b28      	ldr	r3, [pc, #160]	; (12934 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   12894:	4798      	blx	r3
	isOK	 = true;
   12896:	f107 0310 	add.w	r3, r7, #16
   1289a:	3b0c      	subs	r3, #12
   1289c:	681b      	ldr	r3, [r3, #0]
   1289e:	2201      	movs	r2, #1
   128a0:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   128a4:	2300      	movs	r3, #0
   128a6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   128aa:	f102 020c 	add.w	r2, r2, #12
   128ae:	6013      	str	r3, [r2, #0]
   128b0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   128b4:	f103 030c 	add.w	r3, r3, #12
   128b8:	681b      	ldr	r3, [r3, #0]
   128ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   128be:	da2b      	bge.n	12918 <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   128c0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   128c4:	f103 0310 	add.w	r3, r3, #16
   128c8:	3b04      	subs	r3, #4
   128ca:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   128ce:	f102 020c 	add.w	r2, r2, #12
   128d2:	6812      	ldr	r2, [r2, #0]
   128d4:	4413      	add	r3, r2
   128d6:	781a      	ldrb	r2, [r3, #0]
   128d8:	f107 0310 	add.w	r3, r7, #16
   128dc:	3b04      	subs	r3, #4
   128de:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   128e2:	f101 010c 	add.w	r1, r1, #12
   128e6:	6809      	ldr	r1, [r1, #0]
   128e8:	440b      	add	r3, r1
   128ea:	781b      	ldrb	r3, [r3, #0]
   128ec:	429a      	cmp	r2, r3
   128ee:	d007      	beq.n	12900 <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   128f0:	f107 0310 	add.w	r3, r7, #16
   128f4:	3b0c      	subs	r3, #12
   128f6:	681b      	ldr	r3, [r3, #0]
   128f8:	2200      	movs	r2, #0
   128fa:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   128fe:	e00b      	b.n	12918 <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   12900:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   12904:	f103 030c 	add.w	r3, r3, #12
   12908:	681b      	ldr	r3, [r3, #0]
   1290a:	3301      	adds	r3, #1
   1290c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   12910:	f102 020c 	add.w	r2, r2, #12
   12914:	6013      	str	r3, [r2, #0]
   12916:	e7cb      	b.n	128b0 <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   12918:	f107 0310 	add.w	r3, r7, #16
   1291c:	3b0c      	subs	r3, #12
   1291e:	681b      	ldr	r3, [r3, #0]
   12920:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   12924:	4618      	mov	r0, r3
   12926:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   1292a:	3714      	adds	r7, #20
   1292c:	46bd      	mov	sp, r7
   1292e:	bd90      	pop	{r4, r7, pc}
   12930:	000126c9 	.word	0x000126c9
   12934:	00012779 	.word	0x00012779
   12938:	00012665 	.word	0x00012665
   1293c:	00012695 	.word	0x00012695

00012940 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   12940:	b580      	push	{r7, lr}
   12942:	b082      	sub	sp, #8
   12944:	af00      	add	r7, sp, #0
   12946:	6078      	str	r0, [r7, #4]
   12948:	6039      	str	r1, [r7, #0]
   1294a:	687b      	ldr	r3, [r7, #4]
   1294c:	2b01      	cmp	r3, #1
   1294e:	d10d      	bne.n	1296c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   12950:	683b      	ldr	r3, [r7, #0]
   12952:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12956:	4293      	cmp	r3, r2
   12958:	d108      	bne.n	1296c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1295a:	4906      	ldr	r1, [pc, #24]	; (12974 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1295c:	4806      	ldr	r0, [pc, #24]	; (12978 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1295e:	4b07      	ldr	r3, [pc, #28]	; (1297c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   12960:	4798      	blx	r3
   12962:	4a07      	ldr	r2, [pc, #28]	; (12980 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   12964:	4907      	ldr	r1, [pc, #28]	; (12984 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   12966:	4804      	ldr	r0, [pc, #16]	; (12978 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   12968:	4b07      	ldr	r3, [pc, #28]	; (12988 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1296a:	4798      	blx	r3
   1296c:	bf00      	nop
   1296e:	3708      	adds	r7, #8
   12970:	46bd      	mov	sp, r7
   12972:	bd80      	pop	{r7, pc}
   12974:	20007e4c 	.word	0x20007e4c
   12978:	20007b8c 	.word	0x20007b8c
   1297c:	000125bd 	.word	0x000125bd
   12980:	20000000 	.word	0x20000000
   12984:	000125e5 	.word	0x000125e5
   12988:	00012a41 	.word	0x00012a41

0001298c <_GLOBAL__sub_I_ptrN25Q256Class>:
   1298c:	b580      	push	{r7, lr}
   1298e:	af00      	add	r7, sp, #0
   12990:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12994:	2001      	movs	r0, #1
   12996:	4b01      	ldr	r3, [pc, #4]	; (1299c <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   12998:	4798      	blx	r3
   1299a:	bd80      	pop	{r7, pc}
   1299c:	00012941 	.word	0x00012941

000129a0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   129a0:	b580      	push	{r7, lr}
   129a2:	b084      	sub	sp, #16
   129a4:	af00      	add	r7, sp, #0
   129a6:	60f8      	str	r0, [r7, #12]
   129a8:	60b9      	str	r1, [r7, #8]
   129aa:	4613      	mov	r3, r2
   129ac:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   129ae:	68fb      	ldr	r3, [r7, #12]
   129b0:	2b00      	cmp	r3, #0
   129b2:	d004      	beq.n	129be <io_write+0x1e>
   129b4:	68bb      	ldr	r3, [r7, #8]
   129b6:	2b00      	cmp	r3, #0
   129b8:	d001      	beq.n	129be <io_write+0x1e>
   129ba:	2301      	movs	r3, #1
   129bc:	e000      	b.n	129c0 <io_write+0x20>
   129be:	2300      	movs	r3, #0
   129c0:	f003 0301 	and.w	r3, r3, #1
   129c4:	b2db      	uxtb	r3, r3
   129c6:	2234      	movs	r2, #52	; 0x34
   129c8:	4907      	ldr	r1, [pc, #28]	; (129e8 <io_write+0x48>)
   129ca:	4618      	mov	r0, r3
   129cc:	4b07      	ldr	r3, [pc, #28]	; (129ec <io_write+0x4c>)
   129ce:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   129d0:	68fb      	ldr	r3, [r7, #12]
   129d2:	681b      	ldr	r3, [r3, #0]
   129d4:	88fa      	ldrh	r2, [r7, #6]
   129d6:	68b9      	ldr	r1, [r7, #8]
   129d8:	68f8      	ldr	r0, [r7, #12]
   129da:	4798      	blx	r3
   129dc:	4603      	mov	r3, r0
}
   129de:	4618      	mov	r0, r3
   129e0:	3710      	adds	r7, #16
   129e2:	46bd      	mov	sp, r7
   129e4:	bd80      	pop	{r7, pc}
   129e6:	bf00      	nop
   129e8:	000138e4 	.word	0x000138e4
   129ec:	00003e05 	.word	0x00003e05

000129f0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   129f0:	b580      	push	{r7, lr}
   129f2:	b084      	sub	sp, #16
   129f4:	af00      	add	r7, sp, #0
   129f6:	60f8      	str	r0, [r7, #12]
   129f8:	60b9      	str	r1, [r7, #8]
   129fa:	4613      	mov	r3, r2
   129fc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   129fe:	68fb      	ldr	r3, [r7, #12]
   12a00:	2b00      	cmp	r3, #0
   12a02:	d004      	beq.n	12a0e <io_read+0x1e>
   12a04:	68bb      	ldr	r3, [r7, #8]
   12a06:	2b00      	cmp	r3, #0
   12a08:	d001      	beq.n	12a0e <io_read+0x1e>
   12a0a:	2301      	movs	r3, #1
   12a0c:	e000      	b.n	12a10 <io_read+0x20>
   12a0e:	2300      	movs	r3, #0
   12a10:	f003 0301 	and.w	r3, r3, #1
   12a14:	b2db      	uxtb	r3, r3
   12a16:	223d      	movs	r2, #61	; 0x3d
   12a18:	4907      	ldr	r1, [pc, #28]	; (12a38 <io_read+0x48>)
   12a1a:	4618      	mov	r0, r3
   12a1c:	4b07      	ldr	r3, [pc, #28]	; (12a3c <io_read+0x4c>)
   12a1e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   12a20:	68fb      	ldr	r3, [r7, #12]
   12a22:	685b      	ldr	r3, [r3, #4]
   12a24:	88fa      	ldrh	r2, [r7, #6]
   12a26:	68b9      	ldr	r1, [r7, #8]
   12a28:	68f8      	ldr	r0, [r7, #12]
   12a2a:	4798      	blx	r3
   12a2c:	4603      	mov	r3, r0
}
   12a2e:	4618      	mov	r0, r3
   12a30:	3710      	adds	r7, #16
   12a32:	46bd      	mov	sp, r7
   12a34:	bd80      	pop	{r7, pc}
   12a36:	bf00      	nop
   12a38:	000138e4 	.word	0x000138e4
   12a3c:	00003e05 	.word	0x00003e05

00012a40 <__aeabi_atexit>:
   12a40:	460b      	mov	r3, r1
   12a42:	4601      	mov	r1, r0
   12a44:	4618      	mov	r0, r3
   12a46:	f000 ba7f 	b.w	12f48 <__cxa_atexit>
   12a4a:	bf00      	nop

00012a4c <__aeabi_frsub>:
   12a4c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   12a50:	e002      	b.n	12a58 <__addsf3>
   12a52:	bf00      	nop

00012a54 <__aeabi_fsub>:
   12a54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00012a58 <__addsf3>:
   12a58:	0042      	lsls	r2, r0, #1
   12a5a:	bf1f      	itttt	ne
   12a5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   12a60:	ea92 0f03 	teqne	r2, r3
   12a64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   12a68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   12a6c:	d06a      	beq.n	12b44 <__addsf3+0xec>
   12a6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   12a72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   12a76:	bfc1      	itttt	gt
   12a78:	18d2      	addgt	r2, r2, r3
   12a7a:	4041      	eorgt	r1, r0
   12a7c:	4048      	eorgt	r0, r1
   12a7e:	4041      	eorgt	r1, r0
   12a80:	bfb8      	it	lt
   12a82:	425b      	neglt	r3, r3
   12a84:	2b19      	cmp	r3, #25
   12a86:	bf88      	it	hi
   12a88:	4770      	bxhi	lr
   12a8a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   12a8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   12a92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   12a96:	bf18      	it	ne
   12a98:	4240      	negne	r0, r0
   12a9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   12a9e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   12aa2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   12aa6:	bf18      	it	ne
   12aa8:	4249      	negne	r1, r1
   12aaa:	ea92 0f03 	teq	r2, r3
   12aae:	d03f      	beq.n	12b30 <__addsf3+0xd8>
   12ab0:	f1a2 0201 	sub.w	r2, r2, #1
   12ab4:	fa41 fc03 	asr.w	ip, r1, r3
   12ab8:	eb10 000c 	adds.w	r0, r0, ip
   12abc:	f1c3 0320 	rsb	r3, r3, #32
   12ac0:	fa01 f103 	lsl.w	r1, r1, r3
   12ac4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   12ac8:	d502      	bpl.n	12ad0 <__addsf3+0x78>
   12aca:	4249      	negs	r1, r1
   12acc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   12ad0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   12ad4:	d313      	bcc.n	12afe <__addsf3+0xa6>
   12ad6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   12ada:	d306      	bcc.n	12aea <__addsf3+0x92>
   12adc:	0840      	lsrs	r0, r0, #1
   12ade:	ea4f 0131 	mov.w	r1, r1, rrx
   12ae2:	f102 0201 	add.w	r2, r2, #1
   12ae6:	2afe      	cmp	r2, #254	; 0xfe
   12ae8:	d251      	bcs.n	12b8e <__addsf3+0x136>
   12aea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   12aee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   12af2:	bf08      	it	eq
   12af4:	f020 0001 	biceq.w	r0, r0, #1
   12af8:	ea40 0003 	orr.w	r0, r0, r3
   12afc:	4770      	bx	lr
   12afe:	0049      	lsls	r1, r1, #1
   12b00:	eb40 0000 	adc.w	r0, r0, r0
   12b04:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   12b08:	f1a2 0201 	sub.w	r2, r2, #1
   12b0c:	d1ed      	bne.n	12aea <__addsf3+0x92>
   12b0e:	fab0 fc80 	clz	ip, r0
   12b12:	f1ac 0c08 	sub.w	ip, ip, #8
   12b16:	ebb2 020c 	subs.w	r2, r2, ip
   12b1a:	fa00 f00c 	lsl.w	r0, r0, ip
   12b1e:	bfaa      	itet	ge
   12b20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   12b24:	4252      	neglt	r2, r2
   12b26:	4318      	orrge	r0, r3
   12b28:	bfbc      	itt	lt
   12b2a:	40d0      	lsrlt	r0, r2
   12b2c:	4318      	orrlt	r0, r3
   12b2e:	4770      	bx	lr
   12b30:	f092 0f00 	teq	r2, #0
   12b34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   12b38:	bf06      	itte	eq
   12b3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   12b3e:	3201      	addeq	r2, #1
   12b40:	3b01      	subne	r3, #1
   12b42:	e7b5      	b.n	12ab0 <__addsf3+0x58>
   12b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
   12b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   12b4c:	bf18      	it	ne
   12b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   12b52:	d021      	beq.n	12b98 <__addsf3+0x140>
   12b54:	ea92 0f03 	teq	r2, r3
   12b58:	d004      	beq.n	12b64 <__addsf3+0x10c>
   12b5a:	f092 0f00 	teq	r2, #0
   12b5e:	bf08      	it	eq
   12b60:	4608      	moveq	r0, r1
   12b62:	4770      	bx	lr
   12b64:	ea90 0f01 	teq	r0, r1
   12b68:	bf1c      	itt	ne
   12b6a:	2000      	movne	r0, #0
   12b6c:	4770      	bxne	lr
   12b6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   12b72:	d104      	bne.n	12b7e <__addsf3+0x126>
   12b74:	0040      	lsls	r0, r0, #1
   12b76:	bf28      	it	cs
   12b78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   12b7c:	4770      	bx	lr
   12b7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   12b82:	bf3c      	itt	cc
   12b84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   12b88:	4770      	bxcc	lr
   12b8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   12b8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   12b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   12b96:	4770      	bx	lr
   12b98:	ea7f 6222 	mvns.w	r2, r2, asr #24
   12b9c:	bf16      	itet	ne
   12b9e:	4608      	movne	r0, r1
   12ba0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   12ba4:	4601      	movne	r1, r0
   12ba6:	0242      	lsls	r2, r0, #9
   12ba8:	bf06      	itte	eq
   12baa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   12bae:	ea90 0f01 	teqeq	r0, r1
   12bb2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   12bb6:	4770      	bx	lr

00012bb8 <__aeabi_ui2f>:
   12bb8:	f04f 0300 	mov.w	r3, #0
   12bbc:	e004      	b.n	12bc8 <__aeabi_i2f+0x8>
   12bbe:	bf00      	nop

00012bc0 <__aeabi_i2f>:
   12bc0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   12bc4:	bf48      	it	mi
   12bc6:	4240      	negmi	r0, r0
   12bc8:	ea5f 0c00 	movs.w	ip, r0
   12bcc:	bf08      	it	eq
   12bce:	4770      	bxeq	lr
   12bd0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   12bd4:	4601      	mov	r1, r0
   12bd6:	f04f 0000 	mov.w	r0, #0
   12bda:	e01c      	b.n	12c16 <__aeabi_l2f+0x2a>

00012bdc <__aeabi_ul2f>:
   12bdc:	ea50 0201 	orrs.w	r2, r0, r1
   12be0:	bf08      	it	eq
   12be2:	4770      	bxeq	lr
   12be4:	f04f 0300 	mov.w	r3, #0
   12be8:	e00a      	b.n	12c00 <__aeabi_l2f+0x14>
   12bea:	bf00      	nop

00012bec <__aeabi_l2f>:
   12bec:	ea50 0201 	orrs.w	r2, r0, r1
   12bf0:	bf08      	it	eq
   12bf2:	4770      	bxeq	lr
   12bf4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   12bf8:	d502      	bpl.n	12c00 <__aeabi_l2f+0x14>
   12bfa:	4240      	negs	r0, r0
   12bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12c00:	ea5f 0c01 	movs.w	ip, r1
   12c04:	bf02      	ittt	eq
   12c06:	4684      	moveq	ip, r0
   12c08:	4601      	moveq	r1, r0
   12c0a:	2000      	moveq	r0, #0
   12c0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   12c10:	bf08      	it	eq
   12c12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   12c16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   12c1a:	fabc f28c 	clz	r2, ip
   12c1e:	3a08      	subs	r2, #8
   12c20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   12c24:	db10      	blt.n	12c48 <__aeabi_l2f+0x5c>
   12c26:	fa01 fc02 	lsl.w	ip, r1, r2
   12c2a:	4463      	add	r3, ip
   12c2c:	fa00 fc02 	lsl.w	ip, r0, r2
   12c30:	f1c2 0220 	rsb	r2, r2, #32
   12c34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   12c38:	fa20 f202 	lsr.w	r2, r0, r2
   12c3c:	eb43 0002 	adc.w	r0, r3, r2
   12c40:	bf08      	it	eq
   12c42:	f020 0001 	biceq.w	r0, r0, #1
   12c46:	4770      	bx	lr
   12c48:	f102 0220 	add.w	r2, r2, #32
   12c4c:	fa01 fc02 	lsl.w	ip, r1, r2
   12c50:	f1c2 0220 	rsb	r2, r2, #32
   12c54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   12c58:	fa21 f202 	lsr.w	r2, r1, r2
   12c5c:	eb43 0002 	adc.w	r0, r3, r2
   12c60:	bf08      	it	eq
   12c62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   12c66:	4770      	bx	lr

00012c68 <__aeabi_fmul>:
   12c68:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12c6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   12c70:	bf1e      	ittt	ne
   12c72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   12c76:	ea92 0f0c 	teqne	r2, ip
   12c7a:	ea93 0f0c 	teqne	r3, ip
   12c7e:	d06f      	beq.n	12d60 <__aeabi_fmul+0xf8>
   12c80:	441a      	add	r2, r3
   12c82:	ea80 0c01 	eor.w	ip, r0, r1
   12c86:	0240      	lsls	r0, r0, #9
   12c88:	bf18      	it	ne
   12c8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   12c8e:	d01e      	beq.n	12cce <__aeabi_fmul+0x66>
   12c90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   12c94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   12c98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   12c9c:	fba0 3101 	umull	r3, r1, r0, r1
   12ca0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   12ca4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   12ca8:	bf3e      	ittt	cc
   12caa:	0049      	lslcc	r1, r1, #1
   12cac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   12cb0:	005b      	lslcc	r3, r3, #1
   12cb2:	ea40 0001 	orr.w	r0, r0, r1
   12cb6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   12cba:	2afd      	cmp	r2, #253	; 0xfd
   12cbc:	d81d      	bhi.n	12cfa <__aeabi_fmul+0x92>
   12cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   12cc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   12cc6:	bf08      	it	eq
   12cc8:	f020 0001 	biceq.w	r0, r0, #1
   12ccc:	4770      	bx	lr
   12cce:	f090 0f00 	teq	r0, #0
   12cd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   12cd6:	bf08      	it	eq
   12cd8:	0249      	lsleq	r1, r1, #9
   12cda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   12cde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   12ce2:	3a7f      	subs	r2, #127	; 0x7f
   12ce4:	bfc2      	ittt	gt
   12ce6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   12cea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   12cee:	4770      	bxgt	lr
   12cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   12cf4:	f04f 0300 	mov.w	r3, #0
   12cf8:	3a01      	subs	r2, #1
   12cfa:	dc5d      	bgt.n	12db8 <__aeabi_fmul+0x150>
   12cfc:	f112 0f19 	cmn.w	r2, #25
   12d00:	bfdc      	itt	le
   12d02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   12d06:	4770      	bxle	lr
   12d08:	f1c2 0200 	rsb	r2, r2, #0
   12d0c:	0041      	lsls	r1, r0, #1
   12d0e:	fa21 f102 	lsr.w	r1, r1, r2
   12d12:	f1c2 0220 	rsb	r2, r2, #32
   12d16:	fa00 fc02 	lsl.w	ip, r0, r2
   12d1a:	ea5f 0031 	movs.w	r0, r1, rrx
   12d1e:	f140 0000 	adc.w	r0, r0, #0
   12d22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   12d26:	bf08      	it	eq
   12d28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   12d2c:	4770      	bx	lr
   12d2e:	f092 0f00 	teq	r2, #0
   12d32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   12d36:	bf02      	ittt	eq
   12d38:	0040      	lsleq	r0, r0, #1
   12d3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   12d3e:	3a01      	subeq	r2, #1
   12d40:	d0f9      	beq.n	12d36 <__aeabi_fmul+0xce>
   12d42:	ea40 000c 	orr.w	r0, r0, ip
   12d46:	f093 0f00 	teq	r3, #0
   12d4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   12d4e:	bf02      	ittt	eq
   12d50:	0049      	lsleq	r1, r1, #1
   12d52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   12d56:	3b01      	subeq	r3, #1
   12d58:	d0f9      	beq.n	12d4e <__aeabi_fmul+0xe6>
   12d5a:	ea41 010c 	orr.w	r1, r1, ip
   12d5e:	e78f      	b.n	12c80 <__aeabi_fmul+0x18>
   12d60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   12d64:	ea92 0f0c 	teq	r2, ip
   12d68:	bf18      	it	ne
   12d6a:	ea93 0f0c 	teqne	r3, ip
   12d6e:	d00a      	beq.n	12d86 <__aeabi_fmul+0x11e>
   12d70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   12d74:	bf18      	it	ne
   12d76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   12d7a:	d1d8      	bne.n	12d2e <__aeabi_fmul+0xc6>
   12d7c:	ea80 0001 	eor.w	r0, r0, r1
   12d80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   12d84:	4770      	bx	lr
   12d86:	f090 0f00 	teq	r0, #0
   12d8a:	bf17      	itett	ne
   12d8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   12d90:	4608      	moveq	r0, r1
   12d92:	f091 0f00 	teqne	r1, #0
   12d96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   12d9a:	d014      	beq.n	12dc6 <__aeabi_fmul+0x15e>
   12d9c:	ea92 0f0c 	teq	r2, ip
   12da0:	d101      	bne.n	12da6 <__aeabi_fmul+0x13e>
   12da2:	0242      	lsls	r2, r0, #9
   12da4:	d10f      	bne.n	12dc6 <__aeabi_fmul+0x15e>
   12da6:	ea93 0f0c 	teq	r3, ip
   12daa:	d103      	bne.n	12db4 <__aeabi_fmul+0x14c>
   12dac:	024b      	lsls	r3, r1, #9
   12dae:	bf18      	it	ne
   12db0:	4608      	movne	r0, r1
   12db2:	d108      	bne.n	12dc6 <__aeabi_fmul+0x15e>
   12db4:	ea80 0001 	eor.w	r0, r0, r1
   12db8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   12dbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   12dc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   12dc4:	4770      	bx	lr
   12dc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   12dca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   12dce:	4770      	bx	lr

00012dd0 <__aeabi_fdiv>:
   12dd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12dd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   12dd8:	bf1e      	ittt	ne
   12dda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   12dde:	ea92 0f0c 	teqne	r2, ip
   12de2:	ea93 0f0c 	teqne	r3, ip
   12de6:	d069      	beq.n	12ebc <__aeabi_fdiv+0xec>
   12de8:	eba2 0203 	sub.w	r2, r2, r3
   12dec:	ea80 0c01 	eor.w	ip, r0, r1
   12df0:	0249      	lsls	r1, r1, #9
   12df2:	ea4f 2040 	mov.w	r0, r0, lsl #9
   12df6:	d037      	beq.n	12e68 <__aeabi_fdiv+0x98>
   12df8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12dfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   12e00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   12e04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   12e08:	428b      	cmp	r3, r1
   12e0a:	bf38      	it	cc
   12e0c:	005b      	lslcc	r3, r3, #1
   12e0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   12e12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   12e16:	428b      	cmp	r3, r1
   12e18:	bf24      	itt	cs
   12e1a:	1a5b      	subcs	r3, r3, r1
   12e1c:	ea40 000c 	orrcs.w	r0, r0, ip
   12e20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   12e24:	bf24      	itt	cs
   12e26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   12e2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   12e2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   12e32:	bf24      	itt	cs
   12e34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   12e38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   12e3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   12e40:	bf24      	itt	cs
   12e42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   12e46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   12e4a:	011b      	lsls	r3, r3, #4
   12e4c:	bf18      	it	ne
   12e4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   12e52:	d1e0      	bne.n	12e16 <__aeabi_fdiv+0x46>
   12e54:	2afd      	cmp	r2, #253	; 0xfd
   12e56:	f63f af50 	bhi.w	12cfa <__aeabi_fmul+0x92>
   12e5a:	428b      	cmp	r3, r1
   12e5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   12e60:	bf08      	it	eq
   12e62:	f020 0001 	biceq.w	r0, r0, #1
   12e66:	4770      	bx	lr
   12e68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   12e6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   12e70:	327f      	adds	r2, #127	; 0x7f
   12e72:	bfc2      	ittt	gt
   12e74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   12e78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   12e7c:	4770      	bxgt	lr
   12e7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   12e82:	f04f 0300 	mov.w	r3, #0
   12e86:	3a01      	subs	r2, #1
   12e88:	e737      	b.n	12cfa <__aeabi_fmul+0x92>
   12e8a:	f092 0f00 	teq	r2, #0
   12e8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   12e92:	bf02      	ittt	eq
   12e94:	0040      	lsleq	r0, r0, #1
   12e96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   12e9a:	3a01      	subeq	r2, #1
   12e9c:	d0f9      	beq.n	12e92 <__aeabi_fdiv+0xc2>
   12e9e:	ea40 000c 	orr.w	r0, r0, ip
   12ea2:	f093 0f00 	teq	r3, #0
   12ea6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   12eaa:	bf02      	ittt	eq
   12eac:	0049      	lsleq	r1, r1, #1
   12eae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   12eb2:	3b01      	subeq	r3, #1
   12eb4:	d0f9      	beq.n	12eaa <__aeabi_fdiv+0xda>
   12eb6:	ea41 010c 	orr.w	r1, r1, ip
   12eba:	e795      	b.n	12de8 <__aeabi_fdiv+0x18>
   12ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   12ec0:	ea92 0f0c 	teq	r2, ip
   12ec4:	d108      	bne.n	12ed8 <__aeabi_fdiv+0x108>
   12ec6:	0242      	lsls	r2, r0, #9
   12ec8:	f47f af7d 	bne.w	12dc6 <__aeabi_fmul+0x15e>
   12ecc:	ea93 0f0c 	teq	r3, ip
   12ed0:	f47f af70 	bne.w	12db4 <__aeabi_fmul+0x14c>
   12ed4:	4608      	mov	r0, r1
   12ed6:	e776      	b.n	12dc6 <__aeabi_fmul+0x15e>
   12ed8:	ea93 0f0c 	teq	r3, ip
   12edc:	d104      	bne.n	12ee8 <__aeabi_fdiv+0x118>
   12ede:	024b      	lsls	r3, r1, #9
   12ee0:	f43f af4c 	beq.w	12d7c <__aeabi_fmul+0x114>
   12ee4:	4608      	mov	r0, r1
   12ee6:	e76e      	b.n	12dc6 <__aeabi_fmul+0x15e>
   12ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   12eec:	bf18      	it	ne
   12eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   12ef2:	d1ca      	bne.n	12e8a <__aeabi_fdiv+0xba>
   12ef4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   12ef8:	f47f af5c 	bne.w	12db4 <__aeabi_fmul+0x14c>
   12efc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   12f00:	f47f af3c 	bne.w	12d7c <__aeabi_fmul+0x114>
   12f04:	e75f      	b.n	12dc6 <__aeabi_fmul+0x15e>
   12f06:	bf00      	nop

00012f08 <__aeabi_f2uiz>:
   12f08:	0042      	lsls	r2, r0, #1
   12f0a:	d20e      	bcs.n	12f2a <__aeabi_f2uiz+0x22>
   12f0c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   12f10:	d30b      	bcc.n	12f2a <__aeabi_f2uiz+0x22>
   12f12:	f04f 039e 	mov.w	r3, #158	; 0x9e
   12f16:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   12f1a:	d409      	bmi.n	12f30 <__aeabi_f2uiz+0x28>
   12f1c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   12f20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12f24:	fa23 f002 	lsr.w	r0, r3, r2
   12f28:	4770      	bx	lr
   12f2a:	f04f 0000 	mov.w	r0, #0
   12f2e:	4770      	bx	lr
   12f30:	f112 0f61 	cmn.w	r2, #97	; 0x61
   12f34:	d101      	bne.n	12f3a <__aeabi_f2uiz+0x32>
   12f36:	0242      	lsls	r2, r0, #9
   12f38:	d102      	bne.n	12f40 <__aeabi_f2uiz+0x38>
   12f3a:	f04f 30ff 	mov.w	r0, #4294967295
   12f3e:	4770      	bx	lr
   12f40:	f04f 0000 	mov.w	r0, #0
   12f44:	4770      	bx	lr
   12f46:	bf00      	nop

00012f48 <__cxa_atexit>:
   12f48:	4613      	mov	r3, r2
   12f4a:	460a      	mov	r2, r1
   12f4c:	4601      	mov	r1, r0
   12f4e:	2002      	movs	r0, #2
   12f50:	f000 b9a4 	b.w	1329c <__register_exitproc>

00012f54 <ffs>:
   12f54:	b140      	cbz	r0, 12f68 <ffs+0x14>
   12f56:	2300      	movs	r3, #0
   12f58:	fa40 f103 	asr.w	r1, r0, r3
   12f5c:	1c5a      	adds	r2, r3, #1
   12f5e:	07c9      	lsls	r1, r1, #31
   12f60:	4613      	mov	r3, r2
   12f62:	d5f9      	bpl.n	12f58 <ffs+0x4>
   12f64:	4610      	mov	r0, r2
   12f66:	4770      	bx	lr
   12f68:	4602      	mov	r2, r0
   12f6a:	4610      	mov	r0, r2
   12f6c:	4770      	bx	lr
   12f6e:	bf00      	nop

00012f70 <__libc_init_array>:
   12f70:	b570      	push	{r4, r5, r6, lr}
   12f72:	4e0f      	ldr	r6, [pc, #60]	; (12fb0 <__libc_init_array+0x40>)
   12f74:	4d0f      	ldr	r5, [pc, #60]	; (12fb4 <__libc_init_array+0x44>)
   12f76:	1b76      	subs	r6, r6, r5
   12f78:	10b6      	asrs	r6, r6, #2
   12f7a:	bf18      	it	ne
   12f7c:	2400      	movne	r4, #0
   12f7e:	d005      	beq.n	12f8c <__libc_init_array+0x1c>
   12f80:	3401      	adds	r4, #1
   12f82:	f855 3b04 	ldr.w	r3, [r5], #4
   12f86:	4798      	blx	r3
   12f88:	42a6      	cmp	r6, r4
   12f8a:	d1f9      	bne.n	12f80 <__libc_init_array+0x10>
   12f8c:	4e0a      	ldr	r6, [pc, #40]	; (12fb8 <__libc_init_array+0x48>)
   12f8e:	4d0b      	ldr	r5, [pc, #44]	; (12fbc <__libc_init_array+0x4c>)
   12f90:	1b76      	subs	r6, r6, r5
   12f92:	f000 fcb3 	bl	138fc <_init>
   12f96:	10b6      	asrs	r6, r6, #2
   12f98:	bf18      	it	ne
   12f9a:	2400      	movne	r4, #0
   12f9c:	d006      	beq.n	12fac <__libc_init_array+0x3c>
   12f9e:	3401      	adds	r4, #1
   12fa0:	f855 3b04 	ldr.w	r3, [r5], #4
   12fa4:	4798      	blx	r3
   12fa6:	42a6      	cmp	r6, r4
   12fa8:	d1f9      	bne.n	12f9e <__libc_init_array+0x2e>
   12faa:	bd70      	pop	{r4, r5, r6, pc}
   12fac:	bd70      	pop	{r4, r5, r6, pc}
   12fae:	bf00      	nop
   12fb0:	00013908 	.word	0x00013908
   12fb4:	00013908 	.word	0x00013908
   12fb8:	00013940 	.word	0x00013940
   12fbc:	00013908 	.word	0x00013908

00012fc0 <memcpy>:
   12fc0:	4684      	mov	ip, r0
   12fc2:	ea41 0300 	orr.w	r3, r1, r0
   12fc6:	f013 0303 	ands.w	r3, r3, #3
   12fca:	d16d      	bne.n	130a8 <memcpy+0xe8>
   12fcc:	3a40      	subs	r2, #64	; 0x40
   12fce:	d341      	bcc.n	13054 <memcpy+0x94>
   12fd0:	f851 3b04 	ldr.w	r3, [r1], #4
   12fd4:	f840 3b04 	str.w	r3, [r0], #4
   12fd8:	f851 3b04 	ldr.w	r3, [r1], #4
   12fdc:	f840 3b04 	str.w	r3, [r0], #4
   12fe0:	f851 3b04 	ldr.w	r3, [r1], #4
   12fe4:	f840 3b04 	str.w	r3, [r0], #4
   12fe8:	f851 3b04 	ldr.w	r3, [r1], #4
   12fec:	f840 3b04 	str.w	r3, [r0], #4
   12ff0:	f851 3b04 	ldr.w	r3, [r1], #4
   12ff4:	f840 3b04 	str.w	r3, [r0], #4
   12ff8:	f851 3b04 	ldr.w	r3, [r1], #4
   12ffc:	f840 3b04 	str.w	r3, [r0], #4
   13000:	f851 3b04 	ldr.w	r3, [r1], #4
   13004:	f840 3b04 	str.w	r3, [r0], #4
   13008:	f851 3b04 	ldr.w	r3, [r1], #4
   1300c:	f840 3b04 	str.w	r3, [r0], #4
   13010:	f851 3b04 	ldr.w	r3, [r1], #4
   13014:	f840 3b04 	str.w	r3, [r0], #4
   13018:	f851 3b04 	ldr.w	r3, [r1], #4
   1301c:	f840 3b04 	str.w	r3, [r0], #4
   13020:	f851 3b04 	ldr.w	r3, [r1], #4
   13024:	f840 3b04 	str.w	r3, [r0], #4
   13028:	f851 3b04 	ldr.w	r3, [r1], #4
   1302c:	f840 3b04 	str.w	r3, [r0], #4
   13030:	f851 3b04 	ldr.w	r3, [r1], #4
   13034:	f840 3b04 	str.w	r3, [r0], #4
   13038:	f851 3b04 	ldr.w	r3, [r1], #4
   1303c:	f840 3b04 	str.w	r3, [r0], #4
   13040:	f851 3b04 	ldr.w	r3, [r1], #4
   13044:	f840 3b04 	str.w	r3, [r0], #4
   13048:	f851 3b04 	ldr.w	r3, [r1], #4
   1304c:	f840 3b04 	str.w	r3, [r0], #4
   13050:	3a40      	subs	r2, #64	; 0x40
   13052:	d2bd      	bcs.n	12fd0 <memcpy+0x10>
   13054:	3230      	adds	r2, #48	; 0x30
   13056:	d311      	bcc.n	1307c <memcpy+0xbc>
   13058:	f851 3b04 	ldr.w	r3, [r1], #4
   1305c:	f840 3b04 	str.w	r3, [r0], #4
   13060:	f851 3b04 	ldr.w	r3, [r1], #4
   13064:	f840 3b04 	str.w	r3, [r0], #4
   13068:	f851 3b04 	ldr.w	r3, [r1], #4
   1306c:	f840 3b04 	str.w	r3, [r0], #4
   13070:	f851 3b04 	ldr.w	r3, [r1], #4
   13074:	f840 3b04 	str.w	r3, [r0], #4
   13078:	3a10      	subs	r2, #16
   1307a:	d2ed      	bcs.n	13058 <memcpy+0x98>
   1307c:	320c      	adds	r2, #12
   1307e:	d305      	bcc.n	1308c <memcpy+0xcc>
   13080:	f851 3b04 	ldr.w	r3, [r1], #4
   13084:	f840 3b04 	str.w	r3, [r0], #4
   13088:	3a04      	subs	r2, #4
   1308a:	d2f9      	bcs.n	13080 <memcpy+0xc0>
   1308c:	3204      	adds	r2, #4
   1308e:	d008      	beq.n	130a2 <memcpy+0xe2>
   13090:	07d2      	lsls	r2, r2, #31
   13092:	bf1c      	itt	ne
   13094:	f811 3b01 	ldrbne.w	r3, [r1], #1
   13098:	f800 3b01 	strbne.w	r3, [r0], #1
   1309c:	d301      	bcc.n	130a2 <memcpy+0xe2>
   1309e:	880b      	ldrh	r3, [r1, #0]
   130a0:	8003      	strh	r3, [r0, #0]
   130a2:	4660      	mov	r0, ip
   130a4:	4770      	bx	lr
   130a6:	bf00      	nop
   130a8:	2a08      	cmp	r2, #8
   130aa:	d313      	bcc.n	130d4 <memcpy+0x114>
   130ac:	078b      	lsls	r3, r1, #30
   130ae:	d08d      	beq.n	12fcc <memcpy+0xc>
   130b0:	f010 0303 	ands.w	r3, r0, #3
   130b4:	d08a      	beq.n	12fcc <memcpy+0xc>
   130b6:	f1c3 0304 	rsb	r3, r3, #4
   130ba:	1ad2      	subs	r2, r2, r3
   130bc:	07db      	lsls	r3, r3, #31
   130be:	bf1c      	itt	ne
   130c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   130c4:	f800 3b01 	strbne.w	r3, [r0], #1
   130c8:	d380      	bcc.n	12fcc <memcpy+0xc>
   130ca:	f831 3b02 	ldrh.w	r3, [r1], #2
   130ce:	f820 3b02 	strh.w	r3, [r0], #2
   130d2:	e77b      	b.n	12fcc <memcpy+0xc>
   130d4:	3a04      	subs	r2, #4
   130d6:	d3d9      	bcc.n	1308c <memcpy+0xcc>
   130d8:	3a01      	subs	r2, #1
   130da:	f811 3b01 	ldrb.w	r3, [r1], #1
   130de:	f800 3b01 	strb.w	r3, [r0], #1
   130e2:	d2f9      	bcs.n	130d8 <memcpy+0x118>
   130e4:	780b      	ldrb	r3, [r1, #0]
   130e6:	7003      	strb	r3, [r0, #0]
   130e8:	784b      	ldrb	r3, [r1, #1]
   130ea:	7043      	strb	r3, [r0, #1]
   130ec:	788b      	ldrb	r3, [r1, #2]
   130ee:	7083      	strb	r3, [r0, #2]
   130f0:	4660      	mov	r0, ip
   130f2:	4770      	bx	lr

000130f4 <memset>:
   130f4:	b470      	push	{r4, r5, r6}
   130f6:	0786      	lsls	r6, r0, #30
   130f8:	d046      	beq.n	13188 <memset+0x94>
   130fa:	1e54      	subs	r4, r2, #1
   130fc:	2a00      	cmp	r2, #0
   130fe:	d041      	beq.n	13184 <memset+0x90>
   13100:	b2ca      	uxtb	r2, r1
   13102:	4603      	mov	r3, r0
   13104:	e002      	b.n	1310c <memset+0x18>
   13106:	f114 34ff 	adds.w	r4, r4, #4294967295
   1310a:	d33b      	bcc.n	13184 <memset+0x90>
   1310c:	f803 2b01 	strb.w	r2, [r3], #1
   13110:	079d      	lsls	r5, r3, #30
   13112:	d1f8      	bne.n	13106 <memset+0x12>
   13114:	2c03      	cmp	r4, #3
   13116:	d92e      	bls.n	13176 <memset+0x82>
   13118:	b2cd      	uxtb	r5, r1
   1311a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1311e:	2c0f      	cmp	r4, #15
   13120:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   13124:	d919      	bls.n	1315a <memset+0x66>
   13126:	f103 0210 	add.w	r2, r3, #16
   1312a:	4626      	mov	r6, r4
   1312c:	3e10      	subs	r6, #16
   1312e:	2e0f      	cmp	r6, #15
   13130:	f842 5c10 	str.w	r5, [r2, #-16]
   13134:	f842 5c0c 	str.w	r5, [r2, #-12]
   13138:	f842 5c08 	str.w	r5, [r2, #-8]
   1313c:	f842 5c04 	str.w	r5, [r2, #-4]
   13140:	f102 0210 	add.w	r2, r2, #16
   13144:	d8f2      	bhi.n	1312c <memset+0x38>
   13146:	f1a4 0210 	sub.w	r2, r4, #16
   1314a:	f022 020f 	bic.w	r2, r2, #15
   1314e:	f004 040f 	and.w	r4, r4, #15
   13152:	3210      	adds	r2, #16
   13154:	2c03      	cmp	r4, #3
   13156:	4413      	add	r3, r2
   13158:	d90d      	bls.n	13176 <memset+0x82>
   1315a:	461e      	mov	r6, r3
   1315c:	4622      	mov	r2, r4
   1315e:	3a04      	subs	r2, #4
   13160:	2a03      	cmp	r2, #3
   13162:	f846 5b04 	str.w	r5, [r6], #4
   13166:	d8fa      	bhi.n	1315e <memset+0x6a>
   13168:	1f22      	subs	r2, r4, #4
   1316a:	f022 0203 	bic.w	r2, r2, #3
   1316e:	3204      	adds	r2, #4
   13170:	4413      	add	r3, r2
   13172:	f004 0403 	and.w	r4, r4, #3
   13176:	b12c      	cbz	r4, 13184 <memset+0x90>
   13178:	b2c9      	uxtb	r1, r1
   1317a:	441c      	add	r4, r3
   1317c:	f803 1b01 	strb.w	r1, [r3], #1
   13180:	429c      	cmp	r4, r3
   13182:	d1fb      	bne.n	1317c <memset+0x88>
   13184:	bc70      	pop	{r4, r5, r6}
   13186:	4770      	bx	lr
   13188:	4614      	mov	r4, r2
   1318a:	4603      	mov	r3, r0
   1318c:	e7c2      	b.n	13114 <memset+0x20>
   1318e:	bf00      	nop
	...

000131c0 <strlen>:
   131c0:	f890 f000 	pld	[r0]
   131c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   131c8:	f020 0107 	bic.w	r1, r0, #7
   131cc:	f06f 0c00 	mvn.w	ip, #0
   131d0:	f010 0407 	ands.w	r4, r0, #7
   131d4:	f891 f020 	pld	[r1, #32]
   131d8:	f040 8049 	bne.w	1326e <strlen+0xae>
   131dc:	f04f 0400 	mov.w	r4, #0
   131e0:	f06f 0007 	mvn.w	r0, #7
   131e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   131e8:	f891 f040 	pld	[r1, #64]	; 0x40
   131ec:	f100 0008 	add.w	r0, r0, #8
   131f0:	fa82 f24c 	uadd8	r2, r2, ip
   131f4:	faa4 f28c 	sel	r2, r4, ip
   131f8:	fa83 f34c 	uadd8	r3, r3, ip
   131fc:	faa2 f38c 	sel	r3, r2, ip
   13200:	bb4b      	cbnz	r3, 13256 <strlen+0x96>
   13202:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   13206:	fa82 f24c 	uadd8	r2, r2, ip
   1320a:	f100 0008 	add.w	r0, r0, #8
   1320e:	faa4 f28c 	sel	r2, r4, ip
   13212:	fa83 f34c 	uadd8	r3, r3, ip
   13216:	faa2 f38c 	sel	r3, r2, ip
   1321a:	b9e3      	cbnz	r3, 13256 <strlen+0x96>
   1321c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   13220:	fa82 f24c 	uadd8	r2, r2, ip
   13224:	f100 0008 	add.w	r0, r0, #8
   13228:	faa4 f28c 	sel	r2, r4, ip
   1322c:	fa83 f34c 	uadd8	r3, r3, ip
   13230:	faa2 f38c 	sel	r3, r2, ip
   13234:	b97b      	cbnz	r3, 13256 <strlen+0x96>
   13236:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1323a:	f101 0120 	add.w	r1, r1, #32
   1323e:	fa82 f24c 	uadd8	r2, r2, ip
   13242:	f100 0008 	add.w	r0, r0, #8
   13246:	faa4 f28c 	sel	r2, r4, ip
   1324a:	fa83 f34c 	uadd8	r3, r3, ip
   1324e:	faa2 f38c 	sel	r3, r2, ip
   13252:	2b00      	cmp	r3, #0
   13254:	d0c6      	beq.n	131e4 <strlen+0x24>
   13256:	2a00      	cmp	r2, #0
   13258:	bf04      	itt	eq
   1325a:	3004      	addeq	r0, #4
   1325c:	461a      	moveq	r2, r3
   1325e:	ba12      	rev	r2, r2
   13260:	fab2 f282 	clz	r2, r2
   13264:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   13268:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1326c:	4770      	bx	lr
   1326e:	e9d1 2300 	ldrd	r2, r3, [r1]
   13272:	f004 0503 	and.w	r5, r4, #3
   13276:	f1c4 0000 	rsb	r0, r4, #0
   1327a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1327e:	f014 0f04 	tst.w	r4, #4
   13282:	f891 f040 	pld	[r1, #64]	; 0x40
   13286:	fa0c f505 	lsl.w	r5, ip, r5
   1328a:	ea62 0205 	orn	r2, r2, r5
   1328e:	bf1c      	itt	ne
   13290:	ea63 0305 	ornne	r3, r3, r5
   13294:	4662      	movne	r2, ip
   13296:	f04f 0400 	mov.w	r4, #0
   1329a:	e7a9      	b.n	131f0 <strlen+0x30>

0001329c <__register_exitproc>:
   1329c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   132a0:	4d2c      	ldr	r5, [pc, #176]	; (13354 <__register_exitproc+0xb8>)
   132a2:	4606      	mov	r6, r0
   132a4:	6828      	ldr	r0, [r5, #0]
   132a6:	4698      	mov	r8, r3
   132a8:	460f      	mov	r7, r1
   132aa:	4691      	mov	r9, r2
   132ac:	f000 f882 	bl	133b4 <__retarget_lock_acquire_recursive>
   132b0:	4b29      	ldr	r3, [pc, #164]	; (13358 <__register_exitproc+0xbc>)
   132b2:	681c      	ldr	r4, [r3, #0]
   132b4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   132b8:	2b00      	cmp	r3, #0
   132ba:	d03e      	beq.n	1333a <__register_exitproc+0x9e>
   132bc:	685a      	ldr	r2, [r3, #4]
   132be:	2a1f      	cmp	r2, #31
   132c0:	dc1c      	bgt.n	132fc <__register_exitproc+0x60>
   132c2:	f102 0e01 	add.w	lr, r2, #1
   132c6:	b176      	cbz	r6, 132e6 <__register_exitproc+0x4a>
   132c8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   132cc:	2401      	movs	r4, #1
   132ce:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   132d2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   132d6:	4094      	lsls	r4, r2
   132d8:	4320      	orrs	r0, r4
   132da:	2e02      	cmp	r6, #2
   132dc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   132e0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   132e4:	d023      	beq.n	1332e <__register_exitproc+0x92>
   132e6:	3202      	adds	r2, #2
   132e8:	f8c3 e004 	str.w	lr, [r3, #4]
   132ec:	6828      	ldr	r0, [r5, #0]
   132ee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   132f2:	f000 f861 	bl	133b8 <__retarget_lock_release_recursive>
   132f6:	2000      	movs	r0, #0
   132f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   132fc:	4b17      	ldr	r3, [pc, #92]	; (1335c <__register_exitproc+0xc0>)
   132fe:	b30b      	cbz	r3, 13344 <__register_exitproc+0xa8>
   13300:	f44f 70c8 	mov.w	r0, #400	; 0x190
   13304:	f7fb faee 	bl	e8e4 <malloc>
   13308:	4603      	mov	r3, r0
   1330a:	b1d8      	cbz	r0, 13344 <__register_exitproc+0xa8>
   1330c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   13310:	6002      	str	r2, [r0, #0]
   13312:	2100      	movs	r1, #0
   13314:	6041      	str	r1, [r0, #4]
   13316:	460a      	mov	r2, r1
   13318:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1331c:	f04f 0e01 	mov.w	lr, #1
   13320:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   13324:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   13328:	2e00      	cmp	r6, #0
   1332a:	d0dc      	beq.n	132e6 <__register_exitproc+0x4a>
   1332c:	e7cc      	b.n	132c8 <__register_exitproc+0x2c>
   1332e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   13332:	430c      	orrs	r4, r1
   13334:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   13338:	e7d5      	b.n	132e6 <__register_exitproc+0x4a>
   1333a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1333e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   13342:	e7bb      	b.n	132bc <__register_exitproc+0x20>
   13344:	6828      	ldr	r0, [r5, #0]
   13346:	f000 f837 	bl	133b8 <__retarget_lock_release_recursive>
   1334a:	f04f 30ff 	mov.w	r0, #4294967295
   1334e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13352:	bf00      	nop
   13354:	20000608 	.word	0x20000608
   13358:	000138f8 	.word	0x000138f8
   1335c:	0000e8e5 	.word	0x0000e8e5

00013360 <register_fini>:
   13360:	4b02      	ldr	r3, [pc, #8]	; (1336c <register_fini+0xc>)
   13362:	b113      	cbz	r3, 1336a <register_fini+0xa>
   13364:	4802      	ldr	r0, [pc, #8]	; (13370 <register_fini+0x10>)
   13366:	f000 b805 	b.w	13374 <atexit>
   1336a:	4770      	bx	lr
   1336c:	00000000 	.word	0x00000000
   13370:	00013381 	.word	0x00013381

00013374 <atexit>:
   13374:	2300      	movs	r3, #0
   13376:	4601      	mov	r1, r0
   13378:	461a      	mov	r2, r3
   1337a:	4618      	mov	r0, r3
   1337c:	f7ff bf8e 	b.w	1329c <__register_exitproc>

00013380 <__libc_fini_array>:
   13380:	b538      	push	{r3, r4, r5, lr}
   13382:	4c0a      	ldr	r4, [pc, #40]	; (133ac <__libc_fini_array+0x2c>)
   13384:	4d0a      	ldr	r5, [pc, #40]	; (133b0 <__libc_fini_array+0x30>)
   13386:	1b64      	subs	r4, r4, r5
   13388:	10a4      	asrs	r4, r4, #2
   1338a:	d00a      	beq.n	133a2 <__libc_fini_array+0x22>
   1338c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   13390:	3b01      	subs	r3, #1
   13392:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   13396:	3c01      	subs	r4, #1
   13398:	f855 3904 	ldr.w	r3, [r5], #-4
   1339c:	4798      	blx	r3
   1339e:	2c00      	cmp	r4, #0
   133a0:	d1f9      	bne.n	13396 <__libc_fini_array+0x16>
   133a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   133a6:	f000 bacb 	b.w	13940 <_fini>
   133aa:	bf00      	nop
   133ac:	00013950 	.word	0x00013950
   133b0:	0001394c 	.word	0x0001394c

000133b4 <__retarget_lock_acquire_recursive>:
   133b4:	4770      	bx	lr
   133b6:	bf00      	nop

000133b8 <__retarget_lock_release_recursive>:
   133b8:	4770      	bx	lr
   133ba:	bf00      	nop

000133bc <_ZTC16Maintenance_Tool0_16Commands_Handler>:
   133bc:	0100 0000 0000 0000 0000 0000               ............

000133c8 <_ZTT16Maintenance_Tool>:
   133c8:	33dc 0001 33c8 0001                         .3...3..

000133d0 <_ZTV16Maintenance_Tool>:
   133d0:	0100 0000 0000 0000 0000 0000 2e2e 682f     ............../h
   133e0:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   133f0:	625f 7361 2e65 0068 2e2e 682f 6c61 692f     _base.h.../hal/i
   13400:	636e 756c 6564 682f 6c61 775f 7464 682e     nclude/hal_wdt.h
   13410:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   13420:	6c61 635f 6c61 6e65 6164 2e72 0063 0000     al_calendar.c...
   13430:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
   13440:	6e61 615f 7973 636e 632e 0000 2e2e 682f     an_async.c..../h
   13450:	6c61 732f 6372 682f 6c61 635f 6372 735f     al/src/hal_crc_s
   13460:	6e79 2e63 0063 0000 2e2e 682f 6c61 732f     ync.c...../hal/s
   13470:	6372 682f 6c61 695f 6332 6d5f 735f 6e79     rc/hal_i2c_m_syn
   13480:	2e63 0063 2e2e 682f 6c61 732f 6372 682f     c.c.../hal/src/h
   13490:	6c61 705f 6d77 632e 0000 0000 2e2e 682f     al_pwm.c....../h
   134a0:	6c61 732f 6372 682f 6c61 715f 7073 5f69     al/src/hal_qspi_
   134b0:	7973 636e 632e 0000 2e2e 682f 6c61 732f     sync.c..../hal/s
   134c0:	6372 682f 6c61 735f 6970 6d5f 735f 6e79     rc/hal_spi_m_syn
   134d0:	2e63 0063 2e2e 682f 6c61 732f 6372 682f     c.c.../hal/src/h
   134e0:	6c61 745f 6d69 7265 632e 0000 2e2e 682f     al_timer.c..../h
   134f0:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
   13500:	736c 6c5f 7369 2e74 0063 0000               ls_list.c...

0001350c <_map>:
   1350c:	0000 0000 0040 0000 0001 0000 0021 0000     ....@.......!...
   1351c:	0003 0000 0003 0000 0004 0000 0004 0000     ................
   1352c:	0005 0000 0005 0000 0006 0000 0056 0000     ............V...
   1353c:	0007 0000 0057 0000 0008 0000 0028 0000     ....W.......(...
   1354c:	0009 0000 0029 0000 2e2e 682f 6c70 652f     ....)...../hpl/e
   1355c:	6369 682f 6c70 655f 6369 632e 0000 0000     ic/hpl_eic.c....

0001356c <user_mux_confs>:
   1356c:	0100 0002 0000 0000 0000 0000 0000 0000     ................
	...

000135b0 <channel_confs>:
   135b0:	065f 0660 0000 0000 0000 0000 0000 0000     _.`.............
	...

000135f0 <interrupt_cfg>:
	...
   13670:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   13680:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   13690:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   136a0:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   136b0:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   136c0:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   136d0:	0400 4300 0800 4300 0c00 4300               ...C...C...C

000136dc <sercomspi_regs>:
   136dc:	000c 0020 0000 0002 0000 0000 0001 01ff     .. .............
   136ec:	0c04 3000 0000 0200 0000 0000 ef00 ff00     ...0............
   136fc:	0601 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   1370c:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   1371c:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   1372c:	1400 4300 1800 4300                         ...C...C

00013734 <_usb_ep_cfgs>:
   13734:	0954 2000 0000 0000 0040 0000 0994 2000     T.. ....@...... 
   13744:	09d4 2000 0040 0040 0a14 2000 0a54 2000     ... @.@.... T.. 
   13754:	0040 0040 0a94 2000 0ad4 2000 0040 0040     @.@.... ... @.@.
   13764:	0b14 2000 0b54 2000 0040 0040 0804 0000     ... T.. @.@.....
   13774:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   13784:	6c70 775f 7464 632e 0000 0000 2e2e 682f     pl_wdt.c....../h
   13794:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   137a4:	625f 7361 2e65 0068                         _base.h.

000137ac <n25q256a_interface>:
   137ac:	be21 0000 bec5 0000 bfd5 0000 c18d 0000     !...............
   137bc:	c21d 0000 2e2e 752f 6273 642f 7665 6369     ....../usb/devic
   137cc:	2f65 7375 6462 2e63 0063 0000               e/usbdc.c...

000137d8 <_ZTV9CDC_Class>:
	...
   137e0:	e025 0000 e105 0000 dc79 0000 dfed 0000     %.......y.......
   137f0:	e19d 0000 dfb1 0000 de95 0000 dee5 0000     ................
   13800:	e00d 0000 e06d 0000                         ....m...

00013808 <_ZTV6Stream>:
	...
   13810:	e8f9 0000 e26d 0000 dc79 0000 dc8d 0000     ....m...y.......
   13820:	e8f9 0000 e8f9 0000 e8f9 0000 7830 2e25     ............0x%.
   13830:	5838 0000 0a0d 0000 616e 006e 6e69 0066     8X......nan.inf.
   13840:	766f 0066                                   ovf.

00013844 <_ZTV5Print>:
	...
   1384c:	e8f9 0000 e26d 0000 dc79 0000 dc8d 0000     ....m...y.......
   1385c:	6c46 7361 2068 654d 6f6d 7972 5320 6c65     Flash Memory Sel
   1386c:	5466 7365 2074 4150 5353 4445 0000 0000     fTest PASSED....
   1387c:	0a0d 0000 6c46 7361 2068 654d 6f6d 7972     ....Flash Memory
   1388c:	5320 6c65 5466 7365 2074 4146 4c49 4445      SelfTest FAILED
   1389c:	0000 0000 2e2e 2e2f 2f2e 2e2e 412f 554c     ....../../../ALU
   138ac:	445f 6972 6576 2f72 4c41 5f55 7244 7669     _Driver/ALU_Driv
   138bc:	7265 682f 6c70 702f 726f 2f74 7068 5f6c     er/hpl/port/hpl_
   138cc:	7067 6f69 625f 7361 2e65 0068               gpio_base.h.

000138d8 <defaultParameters>:
   138d8:	4020 0000                                    @..

000138dc <defaultPreferences>:
   138dc:	00fa 0000 0032 0000 2e2e 682f 6c61 732f     ....2...../hal/s
   138ec:	6372 682f 6c61 695f 2e6f 0063               rc/hal_io.c.

000138f8 <_global_impure_ptr>:
   138f8:	01e0 2000                                   ... 

000138fc <_init>:
   138fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   138fe:	bf00      	nop
   13900:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13902:	bc08      	pop	{r3}
   13904:	469e      	mov	lr, r3
   13906:	4770      	bx	lr

00013908 <__init_array_start>:
   13908:	00013361 	.word	0x00013361

0001390c <__frame_dummy_init_array_entry>:
   1390c:	00000289 00000bf1 0000dc41 0000e21d     ........A.......
   1391c:	0000e8d1 0000eb51 0000ff6d 00010521     ....Q...m...!...
   1392c:	00010901 00010aa5 00010d61 00011f65     ........a...e...
   1393c:	0001298d                                .)..

00013940 <_fini>:
   13940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13942:	bf00      	nop
   13944:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13946:	bc08      	pop	{r3}
   13948:	469e      	mov	lr, r3
   1394a:	4770      	bx	lr

0001394c <__fini_array_start>:
   1394c:	00000265 	.word	0x00000265
