
MaintenanceInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013fa0  00000000  00000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00013fa0  00013fa0  00023fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000063c  20000000  00013fa8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  0003063c  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  0003063c  2**0
                  CONTENTS
  5 .bss          00009a24  2000063c  000145e4  0003063c  2**2
                  ALLOC
  6 .stack        00010000  2000a060  0001e008  0003063c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0003063c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  0003066a  2**0
                  CONTENTS, READONLY
  9 .debug_info   000a52b9  00000000  00000000  000306c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000e0e4  00000000  00000000  000d597c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00021b7c  00000000  00000000  000e3a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003b58  00000000  00000000  001055dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003748  00000000  00000000  00109134  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00059d98  00000000  00000000  0010c87c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0004dccd  00000000  00000000  00166614  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00147e86  00000000  00000000  001b42e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000f108  00000000  00000000  002fc168  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 a0 01 20 b1 06 00 00 ad 06 00 00 ad 06 00 00     `.. ............
      10:	ad 06 00 00 ad 06 00 00 ad 06 00 00 00 00 00 00     ................
	...
      2c:	ad 06 00 00 ad 06 00 00 00 00 00 00 ad 06 00 00     ................
      3c:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
      4c:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
      5c:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
      6c:	55 65 00 00 59 53 00 00 69 53 00 00 ad 06 00 00     Ue..YS..iS......
      7c:	79 53 00 00 89 53 00 00 99 53 00 00 a9 53 00 00     yS...S...S...S..
      8c:	b9 53 00 00 c9 53 00 00 d9 53 00 00 ad 06 00 00     .S...S...S......
      9c:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
      ac:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
      bc:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
      cc:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
      dc:	ad 06 00 00 ad 06 00 00 ad 06 00 00 00 00 00 00     ................
	...
      f4:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
     104:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
     114:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
     124:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
     134:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
     144:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
     154:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
     164:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
     174:	ad 06 00 00 ad 06 00 00 a1 47 00 00 65 b5 00 00     .........G..e...
     184:	75 b5 00 00 85 b5 00 00 95 b5 00 00 ad 06 00 00     u...............
     194:	a5 7f 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
     1a4:	ad 06 00 00 ad 06 00 00 ad 06 00 00 c1 7f 00 00     ................
     1b4:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
     1c4:	dd 7f 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
     1d4:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
     1e4:	ad 06 00 00 ad 06 00 00 61 8c 00 00 ad 06 00 00     ........a.......
     1f4:	7d 8c 00 00 ad 06 00 00 99 8c 00 00 b5 8c 00 00     }...............
     204:	d1 8c 00 00 ed 8c 00 00 ad 06 00 00 ad 06 00 00     ................
     214:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
     224:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
     234:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
     244:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................
     254:	ad 06 00 00 ad 06 00 00 ad 06 00 00 ad 06 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000063c 	.word	0x2000063c
     280:	00000000 	.word	0x00000000
     284:	00013fa8 	.word	0x00013fa8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00013fa8 	.word	0x00013fa8
     2c4:	20000640 	.word	0x20000640
     2c8:	00013fa8 	.word	0x00013fa8
     2cc:	00000000 	.word	0x00000000

000002d0 <_ZN16Commands_HandlerC2Ev>:
#include "EvaporatorAndCondesatorFans_Class.h"
#include "CDC_Class.h"
#include "Dual_Flapper_Valve_Controller.h"

// default constructor
Commands_Handler::Commands_Handler()
     2d0:	b470      	push	{r4, r5, r6}
     2d2:	680a      	ldr	r2, [r1, #0]
     2d4:	6002      	str	r2, [r0, #0]
    kGAINCommandSetNSDData,             //!< Editing NSD data
    kGAINCommandSetNSDDataBlock,        //!< Editing NSD data in data blocks (see NSD communication: Data blockes are tranmitted to GNC)
    kGAINCommandSetView,                 //!< Enables simplified view or standard view (only 932/933)
	kGAINNumberOfCommands
	};
 struct __attribute__((__packed__)) HVACMessageHeader
     2d6:	2200      	movs	r2, #0
     2d8:	2664      	movs	r6, #100	; 0x64
     2da:	7106      	strb	r6, [r0, #4]
     2dc:	2563      	movs	r5, #99	; 0x63
     2de:	7145      	strb	r5, [r0, #5]
     2e0:	2462      	movs	r4, #98	; 0x62
     2e2:	7184      	strb	r4, [r0, #6]
     2e4:	2161      	movs	r1, #97	; 0x61
     2e6:	71c1      	strb	r1, [r0, #7]
     2e8:	7242      	strb	r2, [r0, #9]
     2ea:	7406      	strb	r6, [r0, #16]
     2ec:	7445      	strb	r5, [r0, #17]
     2ee:	7484      	strb	r4, [r0, #18]
     2f0:	74c1      	strb	r1, [r0, #19]
     2f2:	7542      	strb	r2, [r0, #21]
{
	
} //Commands_Handler
     2f4:	bc70      	pop	{r4, r5, r6}
     2f6:	4770      	bx	lr

000002f8 <_ZN16Commands_HandlerD2Ev>:

// default destructor
Commands_Handler::~Commands_Handler()
     2f8:	680b      	ldr	r3, [r1, #0]
     2fa:	6003      	str	r3, [r0, #0]
{
} //~Commands_Handler
     2fc:	4770      	bx	lr

000002fe <_ZN16Commands_Handler18InitCommandHandlerEPh>:

void Commands_Handler::InitCommandHandler(uint8_t * buffer){
	usbMessageBuffer=buffer;
     2fe:	60c1      	str	r1, [r0, #12]
     300:	4770      	bx	lr
	...

00000304 <_ZN16Commands_Handler13SetEnableFan1Eh>:
	}
	return SetEnableFan1(data);
	
}

uint8_t Commands_Handler::SetEnableFan1(uint8_t data){
     304:	b510      	push	{r4, lr}
     306:	460c      	mov	r4, r1
	if ((data&(0x01))>0)
     308:	f011 0f01 	tst.w	r1, #1
	{
		fans.evaporator[0]->SetEnable(true);
     30c:	bf14      	ite	ne
     30e:	2101      	movne	r1, #1
	}
	else
	{
		fans.evaporator[0]->SetEnable(false);
     310:	2100      	moveq	r1, #0
     312:	4b03      	ldr	r3, [pc, #12]	; (320 <_ZN16Commands_Handler13SetEnableFan1Eh+0x1c>)
     314:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
     316:	4b03      	ldr	r3, [pc, #12]	; (324 <_ZN16Commands_Handler13SetEnableFan1Eh+0x20>)
     318:	4798      	blx	r3
	}
	return data;
}
     31a:	4620      	mov	r0, r4
     31c:	bd10      	pop	{r4, pc}
     31e:	bf00      	nop
     320:	200019bc 	.word	0x200019bc
     324:	0000ee59 	.word	0x0000ee59

00000328 <_ZN16Commands_Handler13SetEnableFan2Eh>:
uint8_t	Commands_Handler::SetEnableFan2(uint8_t data){
     328:	b538      	push	{r3, r4, r5, lr}
     32a:	4605      	mov	r5, r0
     32c:	460c      	mov	r4, r1
	if ((data&(0x02))>0){
     32e:	f011 0f02 	tst.w	r1, #2
		fans.evaporator[1]->SetEnable(true);
     332:	bf14      	ite	ne
     334:	2101      	movne	r1, #1
		fans.evaporator[1]->SetEnable(false);
     336:	2100      	moveq	r1, #0
     338:	4b04      	ldr	r3, [pc, #16]	; (34c <_ZN16Commands_Handler13SetEnableFan2Eh+0x24>)
     33a:	6e18      	ldr	r0, [r3, #96]	; 0x60
     33c:	4b04      	ldr	r3, [pc, #16]	; (350 <_ZN16Commands_Handler13SetEnableFan2Eh+0x28>)
     33e:	4798      	blx	r3
	return SetEnableFan1(data);
     340:	4621      	mov	r1, r4
     342:	4628      	mov	r0, r5
     344:	4b03      	ldr	r3, [pc, #12]	; (354 <_ZN16Commands_Handler13SetEnableFan2Eh+0x2c>)
     346:	4798      	blx	r3
}
     348:	bd38      	pop	{r3, r4, r5, pc}
     34a:	bf00      	nop
     34c:	200019bc 	.word	0x200019bc
     350:	0000ee59 	.word	0x0000ee59
     354:	00000305 	.word	0x00000305

00000358 <_ZN16Commands_Handler19SetEnableCondesatorEh>:
uint8_t Commands_Handler::SetEnableCondesator(uint8_t data){
     358:	b538      	push	{r3, r4, r5, lr}
     35a:	4605      	mov	r5, r0
     35c:	460c      	mov	r4, r1
	if ((data&(0x04))>0)
     35e:	f011 0f04 	tst.w	r1, #4
		fans.condesator->SetEnable(true);
     362:	bf14      	ite	ne
     364:	2101      	movne	r1, #1
		fans.condesator->SetEnable(false);
     366:	2100      	moveq	r1, #0
     368:	4b04      	ldr	r3, [pc, #16]	; (37c <_ZN16Commands_Handler19SetEnableCondesatorEh+0x24>)
     36a:	6e58      	ldr	r0, [r3, #100]	; 0x64
     36c:	4b04      	ldr	r3, [pc, #16]	; (380 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x28>)
     36e:	4798      	blx	r3
	return SetEnableFan2(data);
     370:	4621      	mov	r1, r4
     372:	4628      	mov	r0, r5
     374:	4b03      	ldr	r3, [pc, #12]	; (384 <_ZN16Commands_Handler19SetEnableCondesatorEh+0x2c>)
     376:	4798      	blx	r3
}
     378:	bd38      	pop	{r3, r4, r5, pc}
     37a:	bf00      	nop
     37c:	200019bc 	.word	0x200019bc
     380:	0000ec8d 	.word	0x0000ec8d
     384:	00000329 	.word	0x00000329

00000388 <_ZN16Commands_Handler20CommandSetEnableFansEv>:
bool Commands_Handler::CommandSetEnableFans(void){
     388:	b510      	push	{r4, lr}
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     38a:	68c3      	ldr	r3, [r0, #12]
     38c:	6819      	ldr	r1, [r3, #0]
     38e:	6041      	str	r1, [r0, #4]
     390:	8899      	ldrh	r1, [r3, #4]
     392:	799b      	ldrb	r3, [r3, #6]
     394:	8101      	strh	r1, [r0, #8]
     396:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandSetEnableFans);
     398:	7a43      	ldrb	r3, [r0, #9]
     39a:	2b4b      	cmp	r3, #75	; 0x4b
     39c:	bf0c      	ite	eq
     39e:	2401      	moveq	r4, #1
     3a0:	2400      	movne	r4, #0
	if (result){
     3a2:	d001      	beq.n	3a8 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x20>
}
     3a4:	4620      	mov	r0, r4
     3a6:	bd10      	pop	{r4, pc}
		SetEnableCondesator(data);
     3a8:	7a81      	ldrb	r1, [r0, #10]
     3aa:	4b01      	ldr	r3, [pc, #4]	; (3b0 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x28>)
     3ac:	4798      	blx	r3
     3ae:	e7f9      	b.n	3a4 <_ZN16Commands_Handler20CommandSetEnableFansEv+0x1c>
     3b0:	00000359 	.word	0x00000359

000003b4 <_ZN16Commands_Handler17CommandSetPWMFansEv>:

bool Commands_Handler::CommandSetPWMFans(void){
     3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     3b6:	68c3      	ldr	r3, [r0, #12]
     3b8:	6819      	ldr	r1, [r3, #0]
     3ba:	6041      	str	r1, [r0, #4]
     3bc:	8899      	ldrh	r1, [r3, #4]
     3be:	799b      	ldrb	r3, [r3, #6]
     3c0:	8101      	strh	r1, [r0, #8]
     3c2:	7283      	strb	r3, [r0, #10]
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(singleTaskMessage.header.task == 	kHVACCommandSetPWMFans);
     3c4:	7a43      	ldrb	r3, [r0, #9]
     3c6:	2b4c      	cmp	r3, #76	; 0x4c
     3c8:	bf0c      	ite	eq
     3ca:	2401      	moveq	r4, #1
     3cc:	2400      	movne	r4, #0
	if (result){
     3ce:	d001      	beq.n	3d4 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x20>
		}else{

	}
	
	return result;
}
     3d0:	4620      	mov	r0, r4
     3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data=singleTaskMessage.description;
     3d4:	7a85      	ldrb	r5, [r0, #10]
		if (data>0)
     3d6:	2d00      	cmp	r5, #0
     3d8:	d0fa      	beq.n	3d0 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x1c>
			fans.evaporator[0]->SetPWM(data);
     3da:	4e06      	ldr	r6, [pc, #24]	; (3f4 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x40>)
     3dc:	4629      	mov	r1, r5
     3de:	6df0      	ldr	r0, [r6, #92]	; 0x5c
     3e0:	4f05      	ldr	r7, [pc, #20]	; (3f8 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x44>)
     3e2:	47b8      	blx	r7
			fans.evaporator[1]->SetPWM(data);
     3e4:	4629      	mov	r1, r5
     3e6:	6e30      	ldr	r0, [r6, #96]	; 0x60
     3e8:	47b8      	blx	r7
			fans.condesator->SetPWM(data);
     3ea:	4629      	mov	r1, r5
     3ec:	6e70      	ldr	r0, [r6, #100]	; 0x64
     3ee:	4b03      	ldr	r3, [pc, #12]	; (3fc <_ZN16Commands_Handler17CommandSetPWMFansEv+0x48>)
     3f0:	4798      	blx	r3
     3f2:	e7ed      	b.n	3d0 <_ZN16Commands_Handler17CommandSetPWMFansEv+0x1c>
     3f4:	200019bc 	.word	0x200019bc
     3f8:	0000ee7d 	.word	0x0000ee7d
     3fc:	0000eca5 	.word	0x0000eca5

00000400 <_ZN16Commands_Handler22CommandSetFlapperValveEv>:
	}
	
	return result;
}

bool  Commands_Handler::CommandSetFlapperValve(void){
     400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


	uint8_t	data=0;
	
	memcpy(&message64,usbMessageBuffer,64);
     402:	68c3      	ldr	r3, [r0, #12]
     404:	f100 0210 	add.w	r2, r0, #16
     408:	f103 0140 	add.w	r1, r3, #64	; 0x40
     40c:	681f      	ldr	r7, [r3, #0]
     40e:	685e      	ldr	r6, [r3, #4]
     410:	689d      	ldr	r5, [r3, #8]
     412:	68dc      	ldr	r4, [r3, #12]
     414:	6017      	str	r7, [r2, #0]
     416:	6056      	str	r6, [r2, #4]
     418:	6095      	str	r5, [r2, #8]
     41a:	60d4      	str	r4, [r2, #12]
     41c:	3310      	adds	r3, #16
     41e:	3210      	adds	r2, #16
     420:	428b      	cmp	r3, r1
     422:	d1f3      	bne.n	40c <_ZN16Commands_Handler22CommandSetFlapperValveEv+0xc>
	
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(message64.header.task == kHVACCommandFlapperValve);
     424:	7d43      	ldrb	r3, [r0, #21]
     426:	2b4f      	cmp	r3, #79	; 0x4f
     428:	bf0c      	ite	eq
     42a:	2501      	moveq	r5, #1
     42c:	2500      	movne	r5, #0
	if (result){
     42e:	d114      	bne.n	45a <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x5a>
     430:	4604      	mov	r4, r0
		for (int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
		{
			data=message64.content[i];
			if ((data&(0x01))>0)
     432:	7d83      	ldrb	r3, [r0, #22]
     434:	f013 0f01 	tst.w	r3, #1
				fv.fvx[i]->StartControlling() ;
			}
			else
			{
				//fvc.fv->SetEnable(false);
				fv.fvx[i]->StopControlling();
     438:	4b09      	ldr	r3, [pc, #36]	; (460 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x60>)
     43a:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
     43e:	bf0c      	ite	eq
     440:	4b08      	ldreq	r3, [pc, #32]	; (464 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x64>)
				fv.fvx[i]->StartControlling() ;
     442:	4b09      	ldrne	r3, [pc, #36]	; (468 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x68>)
     444:	4798      	blx	r3
			if ((data&(0x01))>0)
     446:	7de3      	ldrb	r3, [r4, #23]
     448:	f013 0f01 	tst.w	r3, #1
				fv.fvx[i]->StartControlling() ;
     44c:	4b04      	ldr	r3, [pc, #16]	; (460 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x60>)
     44e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
     452:	bf14      	ite	ne
     454:	4b04      	ldrne	r3, [pc, #16]	; (468 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x68>)
				fv.fvx[i]->StopControlling();
     456:	4b03      	ldreq	r3, [pc, #12]	; (464 <_ZN16Commands_Handler22CommandSetFlapperValveEv+0x64>)
     458:	4798      	blx	r3
	}else{

	}
	
	return result;
}
     45a:	4628      	mov	r0, r5
     45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     45e:	bf00      	nop
     460:	20001bf4 	.word	0x20001bf4
     464:	0000fe61 	.word	0x0000fe61
     468:	00010045 	.word	0x00010045

0000046c <_ZN16Commands_Handler25CommandSetFlapperPositionEv>:

bool  Commands_Handler::CommandSetFlapperPosition(void){
     46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


	uint8_t	data=0;
	
	memcpy(&message64,usbMessageBuffer,64);
     46e:	68c3      	ldr	r3, [r0, #12]
     470:	f100 0210 	add.w	r2, r0, #16
     474:	f103 0140 	add.w	r1, r3, #64	; 0x40
     478:	681f      	ldr	r7, [r3, #0]
     47a:	685e      	ldr	r6, [r3, #4]
     47c:	689d      	ldr	r5, [r3, #8]
     47e:	68dc      	ldr	r4, [r3, #12]
     480:	6017      	str	r7, [r2, #0]
     482:	6056      	str	r6, [r2, #4]
     484:	6095      	str	r5, [r2, #8]
     486:	60d4      	str	r4, [r2, #12]
     488:	3310      	adds	r3, #16
     48a:	3210      	adds	r2, #16
     48c:	428b      	cmp	r3, r1
     48e:	d1f3      	bne.n	478 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0xc>
	

	bool	result(message64.header.task == kHVACWriteSetpointFlapperValve);
     490:	7d43      	ldrb	r3, [r0, #21]
     492:	2b50      	cmp	r3, #80	; 0x50
     494:	bf0c      	ite	eq
     496:	2501      	moveq	r5, #1
     498:	2500      	movne	r5, #0
	if (result){
     49a:	d117      	bne.n	4cc <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x60>
     49c:	4604      	mov	r4, r0
		for ( int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
		{
			data=message64.content[i];

			if (fv.fvx[i]->controllerEnabled)
     49e:	4b10      	ldr	r3, [pc, #64]	; (4e0 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x74>)
     4a0:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
     4a4:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
     4a8:	b993      	cbnz	r3, 4d0 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x64>
			{
				fv.fvx[i]->StartControlling(data);
			}
			
			
			fv.fvx[i]->doPeriodicTask=false;
     4aa:	4b0d      	ldr	r3, [pc, #52]	; (4e0 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x74>)
     4ac:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
     4b0:	2100      	movs	r1, #0
     4b2:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
			if (fv.fvx[i]->controllerEnabled)
     4b6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
     4ba:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
     4be:	b95b      	cbnz	r3, 4d8 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x6c>
			fv.fvx[i]->doPeriodicTask=false;
     4c0:	4b07      	ldr	r3, [pc, #28]	; (4e0 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x74>)
     4c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
     4c6:	2200      	movs	r2, #0
     4c8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	}else{

	}
	
	return result;
}
     4cc:	4628      	mov	r0, r5
     4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				fv.fvx[i]->StartControlling(data);
     4d0:	7da1      	ldrb	r1, [r4, #22]
     4d2:	4b04      	ldr	r3, [pc, #16]	; (4e4 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x78>)
     4d4:	4798      	blx	r3
     4d6:	e7e8      	b.n	4aa <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x3e>
     4d8:	7de1      	ldrb	r1, [r4, #23]
     4da:	4b02      	ldr	r3, [pc, #8]	; (4e4 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x78>)
     4dc:	4798      	blx	r3
     4de:	e7ef      	b.n	4c0 <_ZN16Commands_Handler25CommandSetFlapperPositionEv+0x54>
     4e0:	20001bf4 	.word	0x20001bf4
     4e4:	0000fea5 	.word	0x0000fea5

000004e8 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev>:

		
	}
	
	return result;
     4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     4ec:	4c26      	ldr	r4, [pc, #152]	; (588 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xa0>)
     4ee:	4927      	ldr	r1, [pc, #156]	; (58c <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xa4>)
     4f0:	4620      	mov	r0, r4
     4f2:	4e27      	ldr	r6, [pc, #156]	; (590 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xa8>)
     4f4:	47b0      	blx	r6
     4f6:	4f27      	ldr	r7, [pc, #156]	; (594 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xac>)
     4f8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 5b8 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xd0>
     4fc:	463a      	mov	r2, r7
     4fe:	4641      	mov	r1, r8
     500:	4620      	mov	r0, r4
     502:	4d25      	ldr	r5, [pc, #148]	; (598 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xb0>)
     504:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     506:	f104 0920 	add.w	r9, r4, #32
     50a:	4924      	ldr	r1, [pc, #144]	; (59c <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xb4>)
     50c:	4648      	mov	r0, r9
     50e:	47b0      	blx	r6
     510:	463a      	mov	r2, r7
     512:	4641      	mov	r1, r8
     514:	4648      	mov	r0, r9
     516:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     518:	f104 0940 	add.w	r9, r4, #64	; 0x40
     51c:	4920      	ldr	r1, [pc, #128]	; (5a0 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xb8>)
     51e:	4648      	mov	r0, r9
     520:	47b0      	blx	r6
     522:	463a      	mov	r2, r7
     524:	4641      	mov	r1, r8
     526:	4648      	mov	r0, r9
     528:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     52a:	f104 0960 	add.w	r9, r4, #96	; 0x60
     52e:	491d      	ldr	r1, [pc, #116]	; (5a4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xbc>)
     530:	4648      	mov	r0, r9
     532:	47b0      	blx	r6
     534:	463a      	mov	r2, r7
     536:	4641      	mov	r1, r8
     538:	4648      	mov	r0, r9
     53a:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     53c:	f104 0980 	add.w	r9, r4, #128	; 0x80
     540:	4919      	ldr	r1, [pc, #100]	; (5a8 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xc0>)
     542:	4648      	mov	r0, r9
     544:	47b0      	blx	r6
     546:	463a      	mov	r2, r7
     548:	4641      	mov	r1, r8
     54a:	4648      	mov	r0, r9
     54c:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     54e:	f104 09a0 	add.w	r9, r4, #160	; 0xa0
     552:	4916      	ldr	r1, [pc, #88]	; (5ac <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xc4>)
     554:	4648      	mov	r0, r9
     556:	47b0      	blx	r6
     558:	463a      	mov	r2, r7
     55a:	4641      	mov	r1, r8
     55c:	4648      	mov	r0, r9
     55e:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     560:	f104 09c0 	add.w	r9, r4, #192	; 0xc0
     564:	4912      	ldr	r1, [pc, #72]	; (5b0 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xc8>)
     566:	4648      	mov	r0, r9
     568:	47b0      	blx	r6
     56a:	463a      	mov	r2, r7
     56c:	4641      	mov	r1, r8
     56e:	4648      	mov	r0, r9
     570:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     572:	34e0      	adds	r4, #224	; 0xe0
     574:	490f      	ldr	r1, [pc, #60]	; (5b4 <_GLOBAL__sub_I__ZN16Commands_HandlerC2Ev+0xcc>)
     576:	4620      	mov	r0, r4
     578:	47b0      	blx	r6
     57a:	463a      	mov	r2, r7
     57c:	4641      	mov	r1, r8
     57e:	4620      	mov	r0, r4
     580:	47a8      	blx	r5
     582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     586:	bf00      	nop
     588:	20000658 	.word	0x20000658
     58c:	20009da8 	.word	0x20009da8
     590:	0000dc59 	.word	0x0000dc59
     594:	20000000 	.word	0x20000000
     598:	00013091 	.word	0x00013091
     59c:	20009e3c 	.word	0x20009e3c
     5a0:	20009f60 	.word	0x20009f60
     5a4:	20009e5c 	.word	0x20009e5c
     5a8:	20009f20 	.word	0x20009f20
     5ac:	20009f40 	.word	0x20009f40
     5b0:	20009e18 	.word	0x20009e18
     5b4:	20009eb8 	.word	0x20009eb8
     5b8:	0000dc91 	.word	0x0000dc91

000005bc <_ZN16Commands_Handler17CommandFansStatusEv>:
bool Commands_Handler::CommandFansStatus(){
     5bc:	b530      	push	{r4, r5, lr}
     5be:	b083      	sub	sp, #12
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     5c0:	68c3      	ldr	r3, [r0, #12]
     5c2:	6819      	ldr	r1, [r3, #0]
     5c4:	6041      	str	r1, [r0, #4]
     5c6:	8899      	ldrh	r1, [r3, #4]
     5c8:	799b      	ldrb	r3, [r3, #6]
     5ca:	8101      	strh	r1, [r0, #8]
     5cc:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACCommandRedStatusFans);
     5ce:	7a43      	ldrb	r3, [r0, #9]
     5d0:	2b51      	cmp	r3, #81	; 0x51
     5d2:	bf0c      	ite	eq
     5d4:	2501      	moveq	r5, #1
     5d6:	2500      	movne	r5, #0
	if (result){
     5d8:	d002      	beq.n	5e0 <_ZN16Commands_Handler17CommandFansStatusEv+0x24>
}
     5da:	4628      	mov	r0, r5
     5dc:	b003      	add	sp, #12
     5de:	bd30      	pop	{r4, r5, pc}
     5e0:	4604      	mov	r4, r0
		fans.GetGPIOSValues(gpios);
     5e2:	4669      	mov	r1, sp
     5e4:	4808      	ldr	r0, [pc, #32]	; (608 <_ZN16Commands_Handler17CommandFansStatusEv+0x4c>)
     5e6:	4b09      	ldr	r3, [pc, #36]	; (60c <_ZN16Commands_Handler17CommandFansStatusEv+0x50>)
     5e8:	4798      	blx	r3
		CreateFullBufferMessage(usbMessageBuffer,gpios);
     5ea:	6823      	ldr	r3, [r4, #0]
     5ec:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     5f0:	466a      	mov	r2, sp
     5f2:	68e1      	ldr	r1, [r4, #12]
     5f4:	4420      	add	r0, r4
     5f6:	4b06      	ldr	r3, [pc, #24]	; (610 <_ZN16Commands_Handler17CommandFansStatusEv+0x54>)
     5f8:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     5fa:	2240      	movs	r2, #64	; 0x40
     5fc:	68e1      	ldr	r1, [r4, #12]
     5fe:	4805      	ldr	r0, [pc, #20]	; (614 <_ZN16Commands_Handler17CommandFansStatusEv+0x58>)
     600:	4b05      	ldr	r3, [pc, #20]	; (618 <_ZN16Commands_Handler17CommandFansStatusEv+0x5c>)
     602:	4798      	blx	r3
     604:	e7e9      	b.n	5da <_ZN16Commands_Handler17CommandFansStatusEv+0x1e>
     606:	bf00      	nop
     608:	200019bc 	.word	0x200019bc
     60c:	0000ed59 	.word	0x0000ed59
     610:	000009ad 	.word	0x000009ad
     614:	200016f8 	.word	0x200016f8
     618:	0000e63d 	.word	0x0000e63d

0000061c <_ZN16Commands_Handler22CommandReadFlapperDataEv>:
bool Commands_Handler::CommandReadFlapperData(void){
     61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     620:	b08a      	sub	sp, #40	; 0x28
	memcpy(&singleTaskMessage,usbMessageBuffer,sizeof(SingleTaskMessage));
     622:	68c3      	ldr	r3, [r0, #12]
     624:	6819      	ldr	r1, [r3, #0]
     626:	6041      	str	r1, [r0, #4]
     628:	8899      	ldrh	r1, [r3, #4]
     62a:	799b      	ldrb	r3, [r3, #6]
     62c:	8101      	strh	r1, [r0, #8]
     62e:	7283      	strb	r3, [r0, #10]
	bool	result(singleTaskMessage.header.task == kHVACReadPositionFlapperValve);
     630:	7a43      	ldrb	r3, [r0, #9]
     632:	2b4e      	cmp	r3, #78	; 0x4e
     634:	bf0c      	ite	eq
     636:	f04f 0901 	moveq.w	r9, #1
     63a:	f04f 0900 	movne.w	r9, #0
	if (result){
     63e:	d003      	beq.n	648 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x2c>
     640:	4648      	mov	r0, r9
     642:	b00a      	add	sp, #40	; 0x28
     644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     648:	4605      	mov	r5, r0
     64a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 6a4 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x88>
	if (result){
     64e:	2600      	movs	r6, #0
				fv.fvx[i]->UpdateFlapperValveData();	
     650:	f8df a054 	ldr.w	sl, [pc, #84]	; 6a8 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x8c>
     654:	4644      	mov	r4, r8
     656:	f858 0b04 	ldr.w	r0, [r8], #4
     65a:	47d0      	blx	sl
				fvds[i]= fv.fvx[i]->dataStruct;
     65c:	6824      	ldr	r4, [r4, #0]
     65e:	eb0d 0706 	add.w	r7, sp, r6
     662:	3480      	adds	r4, #128	; 0x80
     664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     666:	f84d 0006 	str.w	r0, [sp, r6]
     66a:	6079      	str	r1, [r7, #4]
     66c:	60ba      	str	r2, [r7, #8]
     66e:	60fb      	str	r3, [r7, #12]
     670:	6820      	ldr	r0, [r4, #0]
     672:	6138      	str	r0, [r7, #16]
     674:	3614      	adds	r6, #20
		for (int i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
     676:	2e28      	cmp	r6, #40	; 0x28
     678:	d1ec      	bne.n	654 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x38>
		CreateFullBufferMessage(usbMessageBuffer,(uint8_t*)&fvds[0]);
     67a:	682b      	ldr	r3, [r5, #0]
     67c:	f853 0c0c 	ldr.w	r0, [r3, #-12]
     680:	466a      	mov	r2, sp
     682:	68e9      	ldr	r1, [r5, #12]
     684:	4428      	add	r0, r5
     686:	4b04      	ldr	r3, [pc, #16]	; (698 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x7c>)
     688:	4798      	blx	r3
		usb.write(usbMessageBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     68a:	2240      	movs	r2, #64	; 0x40
     68c:	68e9      	ldr	r1, [r5, #12]
     68e:	4803      	ldr	r0, [pc, #12]	; (69c <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x80>)
     690:	4b03      	ldr	r3, [pc, #12]	; (6a0 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x84>)
     692:	4798      	blx	r3
     694:	e7d4      	b.n	640 <_ZN16Commands_Handler22CommandReadFlapperDataEv+0x24>
     696:	bf00      	nop
     698:	000009ad 	.word	0x000009ad
     69c:	200016f8 	.word	0x200016f8
     6a0:	0000e63d 	.word	0x0000e63d
     6a4:	20001cd0 	.word	0x20001cd0
     6a8:	000100a1 	.word	0x000100a1

000006ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     6ac:	e7fe      	b.n	6ac <Dummy_Handler>
	...

000006b0 <Reset_Handler>:
{
     6b0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     6b2:	4b17      	ldr	r3, [pc, #92]	; (710 <Reset_Handler+0x60>)
     6b4:	4a17      	ldr	r2, [pc, #92]	; (714 <Reset_Handler+0x64>)
     6b6:	429a      	cmp	r2, r3
     6b8:	d010      	beq.n	6dc <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     6ba:	4b17      	ldr	r3, [pc, #92]	; (718 <Reset_Handler+0x68>)
     6bc:	4a14      	ldr	r2, [pc, #80]	; (710 <Reset_Handler+0x60>)
     6be:	429a      	cmp	r2, r3
     6c0:	d20c      	bcs.n	6dc <Reset_Handler+0x2c>
     6c2:	3b01      	subs	r3, #1
     6c4:	1a9b      	subs	r3, r3, r2
     6c6:	f023 0303 	bic.w	r3, r3, #3
     6ca:	3304      	adds	r3, #4
     6cc:	4413      	add	r3, r2
     6ce:	4911      	ldr	r1, [pc, #68]	; (714 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     6d0:	f851 0b04 	ldr.w	r0, [r1], #4
     6d4:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     6d8:	429a      	cmp	r2, r3
     6da:	d1f9      	bne.n	6d0 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     6dc:	4b0f      	ldr	r3, [pc, #60]	; (71c <Reset_Handler+0x6c>)
     6de:	4a10      	ldr	r2, [pc, #64]	; (720 <Reset_Handler+0x70>)
     6e0:	429a      	cmp	r2, r3
     6e2:	d20a      	bcs.n	6fa <Reset_Handler+0x4a>
     6e4:	3b01      	subs	r3, #1
     6e6:	1a9b      	subs	r3, r3, r2
     6e8:	f023 0303 	bic.w	r3, r3, #3
     6ec:	3304      	adds	r3, #4
     6ee:	4413      	add	r3, r2
                *pDest++ = 0;
     6f0:	2100      	movs	r1, #0
     6f2:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     6f6:	4293      	cmp	r3, r2
     6f8:	d1fb      	bne.n	6f2 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     6fa:	4a0a      	ldr	r2, [pc, #40]	; (724 <Reset_Handler+0x74>)
     6fc:	4b0a      	ldr	r3, [pc, #40]	; (728 <Reset_Handler+0x78>)
     6fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     702:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     704:	4b09      	ldr	r3, [pc, #36]	; (72c <Reset_Handler+0x7c>)
     706:	4798      	blx	r3
        main();
     708:	4b09      	ldr	r3, [pc, #36]	; (730 <Reset_Handler+0x80>)
     70a:	4798      	blx	r3
     70c:	e7fe      	b.n	70c <Reset_Handler+0x5c>
     70e:	bf00      	nop
     710:	20000000 	.word	0x20000000
     714:	00013fa8 	.word	0x00013fa8
     718:	2000063c 	.word	0x2000063c
     71c:	2000a060 	.word	0x2000a060
     720:	2000063c 	.word	0x2000063c
     724:	e000ed00 	.word	0xe000ed00
     728:	00000000 	.word	0x00000000
     72c:	000135c1 	.word	0x000135c1
     730:	00000735 	.word	0x00000735

00000734 <main>:




int main(void)		
{
     734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool gotNewTemperature=false;
	atmel_start_init();
     738:	4b3f      	ldr	r3, [pc, #252]	; (838 <main+0x104>)
     73a:	4798      	blx	r3
	usb.Init();
     73c:	483f      	ldr	r0, [pc, #252]	; (83c <main+0x108>)
     73e:	4b40      	ldr	r3, [pc, #256]	; (840 <main+0x10c>)
     740:	4798      	blx	r3
	//StartLivePulse();
	delay_ms(200);
     742:	20c8      	movs	r0, #200	; 0xc8
     744:	4b3f      	ldr	r3, [pc, #252]	; (844 <main+0x110>)
     746:	4798      	blx	r3
	memory.Init();
     748:	4c3f      	ldr	r4, [pc, #252]	; (848 <main+0x114>)
     74a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
     74e:	4620      	mov	r0, r4
     750:	4b3e      	ldr	r3, [pc, #248]	; (84c <main+0x118>)
     752:	4798      	blx	r3
	memory.WriteDefaultParameters();
     754:	4620      	mov	r0, r4
     756:	4b3e      	ldr	r3, [pc, #248]	; (850 <main+0x11c>)
     758:	4798      	blx	r3
	bool isOK=temperatures.Init();
     75a:	483e      	ldr	r0, [pc, #248]	; (854 <main+0x120>)
     75c:	4b3e      	ldr	r3, [pc, #248]	; (858 <main+0x124>)
     75e:	4798      	blx	r3
	if (isOK)
     760:	b110      	cbz	r0, 768 <main+0x34>
	{
		temperatures.StartOneConversion();
     762:	483c      	ldr	r0, [pc, #240]	; (854 <main+0x120>)
     764:	4b3d      	ldr	r3, [pc, #244]	; (85c <main+0x128>)
     766:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     768:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     76c:	4b3c      	ldr	r3, [pc, #240]	; (860 <main+0x12c>)
     76e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	gpio_set_pin_level(LED0,true);
	while (!fv.Init())
     772:	4e3c      	ldr	r6, [pc, #240]	; (864 <main+0x130>)
     774:	4d3c      	ldr	r5, [pc, #240]	; (868 <main+0x134>)
	{
		delay_ms(200);
     776:	4c33      	ldr	r4, [pc, #204]	; (844 <main+0x110>)
	while (!fv.Init())
     778:	4630      	mov	r0, r6
     77a:	47a8      	blx	r5
     77c:	b938      	cbnz	r0, 78e <main+0x5a>
		delay_ms(200);
     77e:	20c8      	movs	r0, #200	; 0xc8
     780:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     782:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     786:	4b36      	ldr	r3, [pc, #216]	; (860 <main+0x12c>)
     788:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
     78c:	e7f4      	b.n	778 <main+0x44>
// 	heater.DisableIndex(3);

	//hvacTimer.Start_periodic_task(FUNC_PTR(FirmwareIsAlive),2500);
	uint8_t localSetpoint=210;
	uint8_t localPosition;
	fv.fv1->StartControlling(220);
     78e:	4d35      	ldr	r5, [pc, #212]	; (864 <main+0x130>)
     790:	21dc      	movs	r1, #220	; 0xdc
     792:	f8d5 00d4 	ldr.w	r0, [r5, #212]	; 0xd4
     796:	4c35      	ldr	r4, [pc, #212]	; (86c <main+0x138>)
     798:	47a0      	blx	r4
	fv.fv2->StartControlling(220);
     79a:	21dc      	movs	r1, #220	; 0xdc
     79c:	f8d5 00d8 	ldr.w	r0, [r5, #216]	; 0xd8
     7a0:	47a0      	blx	r4
	
	toolApp.Init();
     7a2:	4833      	ldr	r0, [pc, #204]	; (870 <main+0x13c>)
     7a4:	4b33      	ldr	r3, [pc, #204]	; (874 <main+0x140>)
     7a6:	4798      	blx	r3

// 	fvc.fv->SetEnable(false);

	while (1)
	{
		if (toolApp.IsAppConnected())
     7a8:	4e31      	ldr	r6, [pc, #196]	; (870 <main+0x13c>)
			toolApp.handleCommunication();			
			
		}
		else
		{
			toolApp.setConnected(false);
     7aa:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 890 <main+0x15c>
     7ae:	e03c      	b.n	82a <main+0xf6>
     7b0:	2100      	movs	r1, #0
     7b2:	4630      	mov	r0, r6
     7b4:	47c0      	blx	r8
     7b6:	e01d      	b.n	7f4 <main+0xc0>
		}
	//	delay_ms(10);
		
		while ((!fv.fv1->gotSetpoint)|(!fv.fv2->gotSetpoint))
		{
			fv.fv1->Control_NBC_StandAlone_Reset();
     7b8:	4d2f      	ldr	r5, [pc, #188]	; (878 <main+0x144>)
			fv.fv2->Control_NBC_StandAlone_Reset();
     7ba:	4c2a      	ldr	r4, [pc, #168]	; (864 <main+0x130>)
			fv.fv1->Control_NBC_StandAlone_Reset();
     7bc:	47a8      	blx	r5
			fv.fv2->Control_NBC_StandAlone_Reset();
     7be:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
     7c2:	47a8      	blx	r5
		while ((!fv.fv1->gotSetpoint)|(!fv.fv2->gotSetpoint))
     7c4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
     7c8:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
     7cc:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
     7d0:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
     7d4:	b2db      	uxtb	r3, r3
     7d6:	2a00      	cmp	r2, #0
     7d8:	d0f0      	beq.n	7bc <main+0x88>
     7da:	2b00      	cmp	r3, #0
     7dc:	d0ee      	beq.n	7bc <main+0x88>
		}
		if (temperatures.IsConversionFinished())
     7de:	481d      	ldr	r0, [pc, #116]	; (854 <main+0x120>)
     7e0:	4b26      	ldr	r3, [pc, #152]	; (87c <main+0x148>)
     7e2:	4798      	blx	r3
     7e4:	b9a8      	cbnz	r0, 812 <main+0xde>
		if (toolApp.IsAppConnected())
     7e6:	4630      	mov	r0, r6
     7e8:	47b8      	blx	r7
     7ea:	2800      	cmp	r0, #0
     7ec:	d0e0      	beq.n	7b0 <main+0x7c>
			toolApp.handleCommunication();			
     7ee:	4630      	mov	r0, r6
     7f0:	4b23      	ldr	r3, [pc, #140]	; (880 <main+0x14c>)
     7f2:	4798      	blx	r3
		while ((!fv.fv1->gotSetpoint)|(!fv.fv2->gotSetpoint))
     7f4:	4b1b      	ldr	r3, [pc, #108]	; (864 <main+0x130>)
     7f6:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
     7fa:	f890 2096 	ldrb.w	r2, [r0, #150]	; 0x96
     7fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
     802:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
     806:	b2db      	uxtb	r3, r3
     808:	2a00      	cmp	r2, #0
     80a:	d0d5      	beq.n	7b8 <main+0x84>
     80c:	2b00      	cmp	r3, #0
     80e:	d0d3      	beq.n	7b8 <main+0x84>
     810:	e7e5      	b.n	7de <main+0xaa>
		{
			
			temperatures.GetConversionResult();
     812:	4c10      	ldr	r4, [pc, #64]	; (854 <main+0x120>)
     814:	4620      	mov	r0, r4
     816:	4b1b      	ldr	r3, [pc, #108]	; (884 <main+0x150>)
     818:	4798      	blx	r3
			if (temperatures.faultData==VALID_TEMPERATURE)
     81a:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
     81e:	2b01      	cmp	r3, #1
     820:	d005      	beq.n	82e <main+0xfa>
					gotNewTemperature=true;
					
				}
				
			}
			temperatures.StartOneConversion();
     822:	480c      	ldr	r0, [pc, #48]	; (854 <main+0x120>)
     824:	4b0d      	ldr	r3, [pc, #52]	; (85c <main+0x128>)
     826:	4798      	blx	r3
			asm("nop");
     828:	bf00      	nop
		if (toolApp.IsAppConnected())
     82a:	4f17      	ldr	r7, [pc, #92]	; (888 <main+0x154>)
     82c:	e7db      	b.n	7e6 <main+0xb2>
				currentTemperature=temperatures.lastValue;
     82e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
     832:	4b16      	ldr	r3, [pc, #88]	; (88c <main+0x158>)
     834:	601a      	str	r2, [r3, #0]
     836:	e7f4      	b.n	822 <main+0xee>
     838:	00001255 	.word	0x00001255
     83c:	200016f8 	.word	0x200016f8
     840:	0000e36d 	.word	0x0000e36d
     844:	00002a21 	.word	0x00002a21
     848:	20003330 	.word	0x20003330
     84c:	00010f15 	.word	0x00010f15
     850:	00010e5d 	.word	0x00010e5d
     854:	20009804 	.word	0x20009804
     858:	000111d1 	.word	0x000111d1
     85c:	00011259 	.word	0x00011259
     860:	41008000 	.word	0x41008000
     864:	20001bf4 	.word	0x20001bf4
     868:	0000eec9 	.word	0x0000eec9
     86c:	0000fea5 	.word	0x0000fea5
     870:	200009d0 	.word	0x200009d0
     874:	00000cd5 	.word	0x00000cd5
     878:	0000f599 	.word	0x0000f599
     87c:	00011335 	.word	0x00011335
     880:	00001175 	.word	0x00001175
     884:	000112a1 	.word	0x000112a1
     888:	00000af9 	.word	0x00000af9
     88c:	20000758 	.word	0x20000758
     890:	00000ac9 	.word	0x00000ac9

00000894 <_GLOBAL__sub_I_localtimeout>:
// 		delay_ms(500	
//		}
	}

	
}
     894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     898:	4c2c      	ldr	r4, [pc, #176]	; (94c <_GLOBAL__sub_I_localtimeout+0xb8>)
     89a:	1d25      	adds	r5, r4, #4
     89c:	492c      	ldr	r1, [pc, #176]	; (950 <_GLOBAL__sub_I_localtimeout+0xbc>)
     89e:	4628      	mov	r0, r5
     8a0:	4f2c      	ldr	r7, [pc, #176]	; (954 <_GLOBAL__sub_I_localtimeout+0xc0>)
     8a2:	47b8      	blx	r7
     8a4:	4e2c      	ldr	r6, [pc, #176]	; (958 <_GLOBAL__sub_I_localtimeout+0xc4>)
     8a6:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 988 <_GLOBAL__sub_I_localtimeout+0xf4>
     8aa:	4632      	mov	r2, r6
     8ac:	4641      	mov	r1, r8
     8ae:	4628      	mov	r0, r5
     8b0:	4d2a      	ldr	r5, [pc, #168]	; (95c <_GLOBAL__sub_I_localtimeout+0xc8>)
     8b2:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     8b4:	f104 0924 	add.w	r9, r4, #36	; 0x24
     8b8:	4929      	ldr	r1, [pc, #164]	; (960 <_GLOBAL__sub_I_localtimeout+0xcc>)
     8ba:	4648      	mov	r0, r9
     8bc:	47b8      	blx	r7
     8be:	4632      	mov	r2, r6
     8c0:	4641      	mov	r1, r8
     8c2:	4648      	mov	r0, r9
     8c4:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     8c6:	f104 0944 	add.w	r9, r4, #68	; 0x44
     8ca:	4926      	ldr	r1, [pc, #152]	; (964 <_GLOBAL__sub_I_localtimeout+0xd0>)
     8cc:	4648      	mov	r0, r9
     8ce:	47b8      	blx	r7
     8d0:	4632      	mov	r2, r6
     8d2:	4641      	mov	r1, r8
     8d4:	4648      	mov	r0, r9
     8d6:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     8d8:	f104 0964 	add.w	r9, r4, #100	; 0x64
     8dc:	4922      	ldr	r1, [pc, #136]	; (968 <_GLOBAL__sub_I_localtimeout+0xd4>)
     8de:	4648      	mov	r0, r9
     8e0:	47b8      	blx	r7
     8e2:	4632      	mov	r2, r6
     8e4:	4641      	mov	r1, r8
     8e6:	4648      	mov	r0, r9
     8e8:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     8ea:	f104 0984 	add.w	r9, r4, #132	; 0x84
     8ee:	491f      	ldr	r1, [pc, #124]	; (96c <_GLOBAL__sub_I_localtimeout+0xd8>)
     8f0:	4648      	mov	r0, r9
     8f2:	47b8      	blx	r7
     8f4:	4632      	mov	r2, r6
     8f6:	4641      	mov	r1, r8
     8f8:	4648      	mov	r0, r9
     8fa:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     8fc:	f104 09a4 	add.w	r9, r4, #164	; 0xa4
     900:	491b      	ldr	r1, [pc, #108]	; (970 <_GLOBAL__sub_I_localtimeout+0xdc>)
     902:	4648      	mov	r0, r9
     904:	47b8      	blx	r7
     906:	4632      	mov	r2, r6
     908:	4641      	mov	r1, r8
     90a:	4648      	mov	r0, r9
     90c:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     90e:	f104 09c4 	add.w	r9, r4, #196	; 0xc4
     912:	4918      	ldr	r1, [pc, #96]	; (974 <_GLOBAL__sub_I_localtimeout+0xe0>)
     914:	4648      	mov	r0, r9
     916:	47b8      	blx	r7
     918:	4632      	mov	r2, r6
     91a:	4641      	mov	r1, r8
     91c:	4648      	mov	r0, r9
     91e:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     920:	f104 09e4 	add.w	r9, r4, #228	; 0xe4
     924:	4914      	ldr	r1, [pc, #80]	; (978 <_GLOBAL__sub_I_localtimeout+0xe4>)
     926:	4648      	mov	r0, r9
     928:	47b8      	blx	r7
     92a:	4632      	mov	r2, r6
     92c:	4641      	mov	r1, r8
     92e:	4648      	mov	r0, r9
     930:	47a8      	blx	r5
	SingleHeater_Class( const SingleHeater_Class &c );
	SingleHeater_Class& operator=( const SingleHeater_Class &c );
	uint8_t InitExpanderArray(void);
	bool SelfTest(void);
}; //SingleHeater_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
     932:	f504 7482 	add.w	r4, r4, #260	; 0x104
     936:	4911      	ldr	r1, [pc, #68]	; (97c <_GLOBAL__sub_I_localtimeout+0xe8>)
     938:	4620      	mov	r0, r4
     93a:	4b11      	ldr	r3, [pc, #68]	; (980 <_GLOBAL__sub_I_localtimeout+0xec>)
     93c:	4798      	blx	r3
     93e:	4632      	mov	r2, r6
     940:	4910      	ldr	r1, [pc, #64]	; (984 <_GLOBAL__sub_I_localtimeout+0xf0>)
     942:	4620      	mov	r0, r4
     944:	47a8      	blx	r5
     946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     94a:	bf00      	nop
     94c:	20000758 	.word	0x20000758
     950:	20009da8 	.word	0x20009da8
     954:	0000dc59 	.word	0x0000dc59
     958:	20000000 	.word	0x20000000
     95c:	00013091 	.word	0x00013091
     960:	20009e3c 	.word	0x20009e3c
     964:	20009f60 	.word	0x20009f60
     968:	20009e5c 	.word	0x20009e5c
     96c:	20009f20 	.word	0x20009f20
     970:	20009f40 	.word	0x20009f40
     974:	20009e18 	.word	0x20009e18
     978:	20009eb8 	.word	0x20009eb8
     97c:	20009ed8 	.word	0x20009ed8
     980:	0000db3d 	.word	0x0000db3d
     984:	0000db59 	.word	0x0000db59
     988:	0000dc91 	.word	0x0000dc91

0000098c <_ZN22MaintenanceDataHandlerC1Ev>:
     98c:	2264      	movs	r2, #100	; 0x64
     98e:	7002      	strb	r2, [r0, #0]
     990:	2263      	movs	r2, #99	; 0x63
     992:	7042      	strb	r2, [r0, #1]
     994:	2262      	movs	r2, #98	; 0x62
     996:	7082      	strb	r2, [r0, #2]
     998:	2261      	movs	r2, #97	; 0x61
     99a:	70c2      	strb	r2, [r0, #3]
     99c:	2200      	movs	r2, #0
     99e:	7142      	strb	r2, [r0, #5]
#include "string.h"

// default constructor
MaintenanceDataHandler::MaintenanceDataHandler()
{
	sizeFullBufferMessage=FULL_MESSAGE_SIZE;
     9a0:	223a      	movs	r2, #58	; 0x3a
     9a2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} //MaintenanceDataHandler
     9a6:	4770      	bx	lr

000009a8 <_ZN22MaintenanceDataHandlerD1Ev>:

// default destructor
MaintenanceDataHandler::~MaintenanceDataHandler()
{
} //~MaintenanceDataHandler
     9a8:	4770      	bx	lr
	...

000009ac <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_>:

uint8_t MaintenanceDataHandler::CreateFullBufferMessage(uint8_t *localBuff,  uint8_t *data){
     9ac:	b570      	push	{r4, r5, r6, lr}
     9ae:	4605      	mov	r5, r0
     9b0:	460c      	mov	r4, r1
     9b2:	4611      	mov	r1, r2
	
	memcpy((void*)fullBufferMessage.content,(void*)data,sizeFullBufferMessage);
     9b4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
     9b8:	3006      	adds	r0, #6
     9ba:	4b09      	ldr	r3, [pc, #36]	; (9e0 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x34>)
     9bc:	4798      	blx	r3
	memcpy((void*)localBuff,(void *)&fullBufferMessage,MAINTENANCE_TOOL_BUFFER_SIZE);
     9be:	462b      	mov	r3, r5
     9c0:	4621      	mov	r1, r4
     9c2:	3540      	adds	r5, #64	; 0x40
     9c4:	681e      	ldr	r6, [r3, #0]
     9c6:	685c      	ldr	r4, [r3, #4]
     9c8:	6898      	ldr	r0, [r3, #8]
     9ca:	68da      	ldr	r2, [r3, #12]
     9cc:	600e      	str	r6, [r1, #0]
     9ce:	604c      	str	r4, [r1, #4]
     9d0:	6088      	str	r0, [r1, #8]
     9d2:	60ca      	str	r2, [r1, #12]
     9d4:	3310      	adds	r3, #16
     9d6:	3110      	adds	r1, #16
     9d8:	42ab      	cmp	r3, r5
     9da:	d1f3      	bne.n	9c4 <_ZN22MaintenanceDataHandler23CreateFullBufferMessageEPhS0_+0x18>
	return 0;
}
     9dc:	2000      	movs	r0, #0
     9de:	bd70      	pop	{r4, r5, r6, pc}
     9e0:	00013611 	.word	0x00013611

000009e4 <_ZL21MaintenaceToolTimmingPK10timer_task>:
Maintenance_Tool	*ptrMaintenanceTool;

static void MaintenaceToolTimming( const struct timer_task *const timer_task)
{
		
	ptrMaintenanceTool->ticks++;		
     9e4:	4b02      	ldr	r3, [pc, #8]	; (9f0 <_ZL21MaintenaceToolTimmingPK10timer_task+0xc>)
     9e6:	681a      	ldr	r2, [r3, #0]
     9e8:	6d13      	ldr	r3, [r2, #80]	; 0x50
     9ea:	3301      	adds	r3, #1
     9ec:	6513      	str	r3, [r2, #80]	; 0x50
     9ee:	4770      	bx	lr
     9f0:	20000878 	.word	0x20000878

000009f4 <_ZL23MaintenaceToolPCBeamingPK10timer_task>:
}

static void MaintenaceToolPCBeaming( const struct timer_task *const timer_task)
{
	
	ptrMaintenanceTool->is_MTPC_Beaming=false;
     9f4:	4b02      	ldr	r3, [pc, #8]	; (a00 <_ZL23MaintenaceToolPCBeamingPK10timer_task+0xc>)
     9f6:	681b      	ldr	r3, [r3, #0]
     9f8:	2200      	movs	r2, #0
     9fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
     9fe:	4770      	bx	lr
     a00:	20000878 	.word	0x20000878

00000a04 <_ZN16Maintenance_ToolD1Ev>:
	ticks=0;
	localBuffer=staticBuffer;
} //Maintenance_Tool

// default destructor
Maintenance_Tool::~Maintenance_Tool()
     a04:	b538      	push	{r3, r4, r5, lr}
     a06:	4604      	mov	r4, r0
     a08:	4b0a      	ldr	r3, [pc, #40]	; (a34 <_ZN16Maintenance_ToolD1Ev+0x30>)
     a0a:	6003      	str	r3, [r0, #0]
{
	ticks=0;
     a0c:	2300      	movs	r3, #0
     a0e:	6503      	str	r3, [r0, #80]	; 0x50
	interfaceTimer.Stop();
     a10:	4d09      	ldr	r5, [pc, #36]	; (a38 <_ZN16Maintenance_ToolD1Ev+0x34>)
     a12:	4628      	mov	r0, r5
     a14:	4b09      	ldr	r3, [pc, #36]	; (a3c <_ZN16Maintenance_ToolD1Ev+0x38>)
     a16:	4798      	blx	r3
	interfaceTimer.Remove_task();
     a18:	4628      	mov	r0, r5
     a1a:	4b09      	ldr	r3, [pc, #36]	; (a40 <_ZN16Maintenance_ToolD1Ev+0x3c>)
     a1c:	4798      	blx	r3
Maintenance_Tool::~Maintenance_Tool()
     a1e:	4909      	ldr	r1, [pc, #36]	; (a44 <_ZN16Maintenance_ToolD1Ev+0x40>)
     a20:	4620      	mov	r0, r4
     a22:	4b09      	ldr	r3, [pc, #36]	; (a48 <_ZN16Maintenance_ToolD1Ev+0x44>)
     a24:	4798      	blx	r3
     a26:	f504 70a0 	add.w	r0, r4, #320	; 0x140
     a2a:	4b08      	ldr	r3, [pc, #32]	; (a4c <_ZN16Maintenance_ToolD1Ev+0x48>)
     a2c:	4798      	blx	r3
	
} //~Maintenance_Tool
     a2e:	4620      	mov	r0, r4
     a30:	bd38      	pop	{r3, r4, r5, pc}
     a32:	bf00      	nop
     a34:	00013a1c 	.word	0x00013a1c
     a38:	2000087c 	.word	0x2000087c
     a3c:	0000ddb9 	.word	0x0000ddb9
     a40:	0000de5d 	.word	0x0000de5d
     a44:	00013a0c 	.word	0x00013a0c
     a48:	000002f9 	.word	0x000002f9
     a4c:	000009a9 	.word	0x000009a9

00000a50 <_ZN16Maintenance_ToolC1Ev>:
Maintenance_Tool::Maintenance_Tool()
     a50:	b538      	push	{r3, r4, r5, lr}
     a52:	4604      	mov	r4, r0
     a54:	f500 70a0 	add.w	r0, r0, #320	; 0x140
     a58:	4b16      	ldr	r3, [pc, #88]	; (ab4 <_ZN16Maintenance_ToolC1Ev+0x64>)
     a5a:	4798      	blx	r3
     a5c:	4916      	ldr	r1, [pc, #88]	; (ab8 <_ZN16Maintenance_ToolC1Ev+0x68>)
     a5e:	4620      	mov	r0, r4
     a60:	4b16      	ldr	r3, [pc, #88]	; (abc <_ZN16Maintenance_ToolC1Ev+0x6c>)
     a62:	4798      	blx	r3
     a64:	4b16      	ldr	r3, [pc, #88]	; (ac0 <_ZN16Maintenance_ToolC1Ev+0x70>)
     a66:	6023      	str	r3, [r4, #0]
     a68:	2300      	movs	r3, #0
     a6a:	2564      	movs	r5, #100	; 0x64
     a6c:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
     a70:	2063      	movs	r0, #99	; 0x63
     a72:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
     a76:	2162      	movs	r1, #98	; 0x62
     a78:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
     a7c:	2261      	movs	r2, #97	; 0x61
     a7e:	f884 20ab 	strb.w	r2, [r4, #171]	; 0xab
     a82:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
     a86:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
     a8a:	f884 0133 	strb.w	r0, [r4, #307]	; 0x133
     a8e:	f884 1134 	strb.w	r1, [r4, #308]	; 0x134
     a92:	f884 2135 	strb.w	r2, [r4, #309]	; 0x135
     a96:	f884 3137 	strb.w	r3, [r4, #311]	; 0x137
	ptrMaintenanceTool=this;
     a9a:	4a0a      	ldr	r2, [pc, #40]	; (ac4 <_ZN16Maintenance_ToolC1Ev+0x74>)
     a9c:	f842 4b24 	str.w	r4, [r2], #36
	maintenanceIsConnected = false;
     aa0:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	nextMaintenanceSyncTime = 0;
     aa4:	65a3      	str	r3, [r4, #88]	; 0x58
	nextMaintenanceUsageTimerSyncTime = 0;
     aa6:	65e3      	str	r3, [r4, #92]	; 0x5c
	ticks=0;
     aa8:	6523      	str	r3, [r4, #80]	; 0x50
	localBuffer=staticBuffer;
     aaa:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
} //Maintenance_Tool
     aae:	4620      	mov	r0, r4
     ab0:	bd38      	pop	{r3, r4, r5, pc}
     ab2:	bf00      	nop
     ab4:	0000098d 	.word	0x0000098d
     ab8:	00013a0c 	.word	0x00013a0c
     abc:	000002d1 	.word	0x000002d1
     ac0:	00013a1c 	.word	0x00013a1c
     ac4:	20000878 	.word	0x20000878

00000ac8 <_ZN16Maintenance_Tool12setConnectedEb>:
	
	return	result;
}

void Maintenance_Tool::setConnected(bool isConnected)
	{
     ac8:	b508      	push	{r3, lr}
		maintenanceIsConnected = isConnected;
     aca:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
		if (isConnected)
     ace:	b919      	cbnz	r1, ad8 <_ZN16Maintenance_Tool12setConnectedEb+0x10>
				
				
		} 
		else
		{
			interfaceTimer.Stop();
     ad0:	4805      	ldr	r0, [pc, #20]	; (ae8 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     ad2:	4b06      	ldr	r3, [pc, #24]	; (aec <_ZN16Maintenance_Tool12setConnectedEb+0x24>)
     ad4:	4798      	blx	r3
     ad6:	bd08      	pop	{r3, pc}
			interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,60*1000);
     ad8:	f64e 2260 	movw	r2, #60000	; 0xea60
     adc:	4904      	ldr	r1, [pc, #16]	; (af0 <_ZN16Maintenance_Tool12setConnectedEb+0x28>)
     ade:	4802      	ldr	r0, [pc, #8]	; (ae8 <_ZN16Maintenance_Tool12setConnectedEb+0x20>)
     ae0:	4b04      	ldr	r3, [pc, #16]	; (af4 <_ZN16Maintenance_Tool12setConnectedEb+0x2c>)
     ae2:	4798      	blx	r3
     ae4:	bd08      	pop	{r3, pc}
     ae6:	bf00      	nop
     ae8:	2000087c 	.word	0x2000087c
     aec:	0000ddb9 	.word	0x0000ddb9
     af0:	000009f5 	.word	0x000009f5
     af4:	0000dee1 	.word	0x0000dee1

00000af8 <_ZN16Maintenance_Tool14IsAppConnectedEv>:
bool	Maintenance_Tool::IsAppConnected(void){
     af8:	b510      	push	{r4, lr}
     afa:	4604      	mov	r4, r0
	result=false;
     afc:	2300      	movs	r3, #0
     afe:	f880 310c 	strb.w	r3, [r0, #268]	; 0x10c
	magic=0;
     b02:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
	if (gotAccess==true)
     b06:	f890 310d 	ldrb.w	r3, [r0, #269]	; 0x10d
     b0a:	b12b      	cbz	r3, b18 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x20>
		result=gotAccess;
     b0c:	2301      	movs	r3, #1
     b0e:	f880 310c 	strb.w	r3, [r0, #268]	; 0x10c
	return	result;
     b12:	f894 010c 	ldrb.w	r0, [r4, #268]	; 0x10c
}
     b16:	bd10      	pop	{r4, pc}
		if (usb.rxReady)
     b18:	4b16      	ldr	r3, [pc, #88]	; (b74 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     b1a:	7d5b      	ldrb	r3, [r3, #21]
     b1c:	b1b3      	cbz	r3, b4c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x54>
				magic|= localBuffer[i];
     b1e:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
     b22:	1e41      	subs	r1, r0, #1
     b24:	3003      	adds	r0, #3
				magic=magic<<8;
     b26:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
     b2a:	021b      	lsls	r3, r3, #8
     b2c:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
				magic|= localBuffer[i];
     b30:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     b34:	4313      	orrs	r3, r2
     b36:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
			for (int i = 0; i < 4; i++)
     b3a:	4281      	cmp	r1, r0
     b3c:	d1f3      	bne.n	b26 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x2e>
			xorResult=magic^MAINTENANCE_TOOL_KEYWORD;
     b3e:	4a0e      	ldr	r2, [pc, #56]	; (b78 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x80>)
     b40:	ea83 0102 	eor.w	r1, r3, r2
     b44:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
			if (xorResult==0)
     b48:	4293      	cmp	r3, r2
     b4a:	d006      	beq.n	b5a <_ZN16Maintenance_Tool14IsAppConnectedEv+0x62>
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     b4c:	2240      	movs	r2, #64	; 0x40
     b4e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
     b52:	4808      	ldr	r0, [pc, #32]	; (b74 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x7c>)
     b54:	4b09      	ldr	r3, [pc, #36]	; (b7c <_ZN16Maintenance_Tool14IsAppConnectedEv+0x84>)
     b56:	4798      	blx	r3
     b58:	e7db      	b.n	b12 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x1a>
				gotAccess=true;
     b5a:	2101      	movs	r1, #1
     b5c:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
				result=true;
     b60:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
				is_MTPC_Beaming=true;
     b64:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
				setConnected(true);
     b68:	4620      	mov	r0, r4
     b6a:	4b05      	ldr	r3, [pc, #20]	; (b80 <_ZN16Maintenance_Tool14IsAppConnectedEv+0x88>)
     b6c:	4798      	blx	r3
				return	result;
     b6e:	f894 010c 	ldrb.w	r0, [r4, #268]	; 0x10c
     b72:	bd10      	pop	{r4, pc}
     b74:	200016f8 	.word	0x200016f8
     b78:	61626364 	.word	0x61626364
     b7c:	0000e4b9 	.word	0x0000e4b9
     b80:	00000ac9 	.word	0x00000ac9

00000b84 <_ZN16Maintenance_Tool16ClearLocalBufferEv>:
		//lastMaintenanceMessageReceivedTime = controller.ticks();

	return result;
	}
	
uint8_t	Maintenance_Tool::ClearLocalBuffer(void){
     b84:	b410      	push	{r4}
     b86:	4604      	mov	r4, r0
     b88:	2300      	movs	r3, #0
	uint8_t i;
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
	{
		localBuffer[i]=0;
     b8a:	4619      	mov	r1, r3
     b8c:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
     b90:	54d1      	strb	r1, [r2, r3]
     b92:	1c58      	adds	r0, r3, #1
     b94:	b2c0      	uxtb	r0, r0
     b96:	3301      	adds	r3, #1
	for (i = 0; i < MAINTENANCE_TOOL_BUFFER_SIZE; i++)
     b98:	2b40      	cmp	r3, #64	; 0x40
     b9a:	d1f7      	bne.n	b8c <_ZN16Maintenance_Tool16ClearLocalBufferEv+0x8>
	}
	return	i;
}
     b9c:	bc10      	pop	{r4}
     b9e:	4770      	bx	lr

00000ba0 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader>:
	}

bool Maintenance_Tool::handleGAINCommandConnect( HVACMessageHeader& header)
	{
	
	if (!maintenanceIsConnected)
     ba0:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
     ba4:	b92b      	cbnz	r3, bb2 <_ZN16Maintenance_Tool24handleGAINCommandConnectER17HVACMessageHeader+0x12>
		{
		//event	e;

		nextMaintenanceSyncTime = 0;
     ba6:	6583      	str	r3, [r0, #88]	; 0x58
		maintenanceIsConnected = true;
     ba8:	2301      	movs	r3, #1
     baa:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
		bSendNotifications = true;
     bae:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
// 		corePortsClearPortBit(kPortG, kPortBit2);
// 	#endif
 		}

	return result;
	}
     bb2:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
     bb6:	4770      	bx	lr

00000bb8 <_ZN16Maintenance_Tool22CommandWriteParametersEv>:
	}
	
	return result;
}

bool Maintenance_Tool::CommandWriteParameters(void)	{
     bb8:	b508      	push	{r3, lr}
	uint32_t	w,r;
		int n=sizeof(HVACMessageHeader);
		HVACMessageHeader hm;
	
	bool	result(header.task == kGAINCommandWriteParameters);
	if (result){
     bba:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
     bbe:	2b47      	cmp	r3, #71	; 0x47
     bc0:	d001      	beq.n	bc6 <_ZN16Maintenance_Tool22CommandWriteParametersEv+0xe>
	bool	result(header.task == kGAINCommandWriteParameters);
     bc2:	2000      	movs	r0, #0
	}else{

	}
	
	return result;
}
     bc4:	bd08      	pop	{r3, pc}
		memcpy((uint8_t*)&parameters,&localBuffer[n],sizeof(UserParameters));
     bc6:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
     bca:	88db      	ldrh	r3, [r3, #6]
     bcc:	f8a0 3114 	strh.w	r3, [r0, #276]	; 0x114
		r=memory.SaveParameters(parameters);
     bd0:	f500 718a 	add.w	r1, r0, #276	; 0x114
     bd4:	4803      	ldr	r0, [pc, #12]	; (be4 <_ZN16Maintenance_Tool22CommandWriteParametersEv+0x2c>)
     bd6:	4b04      	ldr	r3, [pc, #16]	; (be8 <_ZN16Maintenance_Tool22CommandWriteParametersEv+0x30>)
     bd8:	4798      	blx	r3
			result=(bool)(r==0);
     bda:	fab0 f080 	clz	r0, r0
     bde:	0940      	lsrs	r0, r0, #5
     be0:	bd08      	pop	{r3, pc}
     be2:	bf00      	nop
     be4:	20003330 	.word	0x20003330
     be8:	00010f61 	.word	0x00010f61

00000bec <_ZN16Maintenance_Tool17CommandSetHeatersEv>:

bool Maintenance_Tool::CommandSetHeaters(void)	{
     bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	uint32_t	w,r;
	uint8_t	data=0;
	bool powerOn;
	
		memcpy(&singleTaskMessage,localBuffer,sizeof(SingleTaskMessage));
     bf0:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
     bf4:	6819      	ldr	r1, [r3, #0]
     bf6:	f8c0 1132 	str.w	r1, [r0, #306]	; 0x132
     bfa:	8899      	ldrh	r1, [r3, #4]
     bfc:	799b      	ldrb	r3, [r3, #6]
     bfe:	f8a0 1136 	strh.w	r1, [r0, #310]	; 0x136
     c02:	f880 3138 	strb.w	r3, [r0, #312]	; 0x138
		
	//	singleTaskMessage.description=localBuffer[0x06];
	bool	result(header.task == kHVACCommandSetHeaters);
     c06:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
     c0a:	2b49      	cmp	r3, #73	; 0x49
     c0c:	bf0c      	ite	eq
     c0e:	f04f 0801 	moveq.w	r8, #1
     c12:	f04f 0800 	movne.w	r8, #0
	if (result){
     c16:	d002      	beq.n	c1e <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x32>
			}
		}
	}
	
	return result;
}
     c18:	4640      	mov	r0, r8
     c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		lastEnableHeaters=enableHeaters;
     c1e:	f890 2131 	ldrb.w	r2, [r0, #305]	; 0x131
     c22:	f880 2130 	strb.w	r2, [r0, #304]	; 0x130
		enableHeaters=singleTaskMessage.description;
     c26:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
     c2a:	f880 3131 	strb.w	r3, [r0, #305]	; 0x131
		if (enableHeaters!=lastEnableHeaters)
     c2e:	429a      	cmp	r2, r3
     c30:	d0f2      	beq.n	c18 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
     c32:	4605      	mov	r5, r0
     c34:	2400      	movs	r4, #0
				heater.SetRelay(i,powerOn);
     c36:	4f07      	ldr	r7, [pc, #28]	; (c54 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x68>)
     c38:	4e07      	ldr	r6, [pc, #28]	; (c58 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x6c>)
				powerOn=enableHeaters&(0x01<<i);
     c3a:	f895 2131 	ldrb.w	r2, [r5, #305]	; 0x131
     c3e:	4122      	asrs	r2, r4
				heater.SetRelay(i,powerOn);
     c40:	f002 0201 	and.w	r2, r2, #1
     c44:	b2e1      	uxtb	r1, r4
     c46:	4638      	mov	r0, r7
     c48:	47b0      	blx	r6
     c4a:	3401      	adds	r4, #1
			for (uint8_t i = 0; i < 4; i++)
     c4c:	2c04      	cmp	r4, #4
     c4e:	d1f4      	bne.n	c3a <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x4e>
     c50:	e7e2      	b.n	c18 <_ZN16Maintenance_Tool17CommandSetHeatersEv+0x2c>
     c52:	bf00      	nop
     c54:	20002208 	.word	0x20002208
     c58:	00010d09 	.word	0x00010d09

00000c5c <_ZN16Maintenance_Tool17calculateChecksumEttPKv>:

	return checksum;
	}

uint16 Maintenance_Tool::calculateChecksum(uint16 checksum, uint16 size, const void* data)
	{
     c5c:	b430      	push	{r4, r5}
	uint16	i;
	
	for (i=0; i<(size/2); i++)
     c5e:	0855      	lsrs	r5, r2, #1
     c60:	d007      	beq.n	c72 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x16>
     c62:	2400      	movs	r4, #0
		checksum ^= ((uint16*)data)[i];
     c64:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
     c68:	4041      	eors	r1, r0
	for (i=0; i<(size/2); i++)
     c6a:	3401      	adds	r4, #1
     c6c:	b2a4      	uxth	r4, r4
     c6e:	42ac      	cmp	r4, r5
     c70:	dbf8      	blt.n	c64 <_ZN16Maintenance_Tool17calculateChecksumEttPKv+0x8>
	
	if (size & 0x01)
     c72:	f012 0f01 	tst.w	r2, #1
		checksum ^= (uint16)((uint8*)data)[size - 1];
     c76:	bf1d      	ittte	ne
     c78:	189b      	addne	r3, r3, r2
     c7a:	f813 0c01 	ldrbne.w	r0, [r3, #-1]
     c7e:	4048      	eorne	r0, r1
     c80:	4608      	moveq	r0, r1

	return checksum;
	}
     c82:	bc30      	pop	{r4, r5}
     c84:	4770      	bx	lr
	...

00000c88 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader>:
	{
     c88:	b538      	push	{r3, r4, r5, lr}
     c8a:	4604      	mov	r4, r0
	checksum=0;
     c8c:	2500      	movs	r5, #0
     c8e:	f8a0 5110 	strh.w	r5, [r0, #272]	; 0x110
	checksum = calculateChecksum(0, sizeof(header), &header);
     c92:	460b      	mov	r3, r1
     c94:	2206      	movs	r2, #6
     c96:	4629      	mov	r1, r5
     c98:	4d02      	ldr	r5, [pc, #8]	; (ca4 <_ZN16Maintenance_Tool17calculateChecksumERK17HVACMessageHeader+0x1c>)
     c9a:	47a8      	blx	r5
     c9c:	f8a4 0110 	strh.w	r0, [r4, #272]	; 0x110
	}
     ca0:	bd38      	pop	{r3, r4, r5, pc}
     ca2:	bf00      	nop
     ca4:	00000c5d 	.word	0x00000c5d

00000ca8 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh>:
{
	uint8_t i;
	uint32_t add=0x41002018;
	for (i = 0; i < 4; i++)
	{
		memcpy(buffer+4*i, (uint8_t*)(add+4*i), 4);
     ca8:	4b06      	ldr	r3, [pc, #24]	; (cc4 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x1c>)
     caa:	681b      	ldr	r3, [r3, #0]
     cac:	600b      	str	r3, [r1, #0]
     cae:	4b06      	ldr	r3, [pc, #24]	; (cc8 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x20>)
     cb0:	681b      	ldr	r3, [r3, #0]
     cb2:	604b      	str	r3, [r1, #4]
     cb4:	4b05      	ldr	r3, [pc, #20]	; (ccc <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x24>)
     cb6:	681b      	ldr	r3, [r3, #0]
     cb8:	608b      	str	r3, [r1, #8]
     cba:	4b05      	ldr	r3, [pc, #20]	; (cd0 <_ZN16Maintenance_Tool18GetCPUSerialNumberEPh+0x28>)
     cbc:	681b      	ldr	r3, [r3, #0]
     cbe:	60cb      	str	r3, [r1, #12]
     cc0:	4770      	bx	lr
     cc2:	bf00      	nop
     cc4:	41002018 	.word	0x41002018
     cc8:	4100201c 	.word	0x4100201c
     ccc:	41002020 	.word	0x41002020
     cd0:	41002024 	.word	0x41002024

00000cd4 <_ZN16Maintenance_Tool4InitEv>:
bool	Maintenance_Tool::Init(void){
     cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cd6:	4604      	mov	r4, r0
	ticks=0;
     cd8:	2600      	movs	r6, #0
     cda:	6506      	str	r6, [r0, #80]	; 0x50
	interfaceTimer.Init();
     cdc:	4d13      	ldr	r5, [pc, #76]	; (d2c <_ZN16Maintenance_Tool4InitEv+0x58>)
     cde:	4628      	mov	r0, r5
     ce0:	4b13      	ldr	r3, [pc, #76]	; (d30 <_ZN16Maintenance_Tool4InitEv+0x5c>)
     ce2:	4798      	blx	r3
	interfaceTimer.Add_periodic_task((FUNC_PTR)MaintenaceToolTimming,1000);
     ce4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     ce8:	4912      	ldr	r1, [pc, #72]	; (d34 <_ZN16Maintenance_Tool4InitEv+0x60>)
     cea:	4628      	mov	r0, r5
     cec:	4b12      	ldr	r3, [pc, #72]	; (d38 <_ZN16Maintenance_Tool4InitEv+0x64>)
     cee:	4798      	blx	r3
	InitCommandHandler(localBuffer);
     cf0:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
     cf4:	4620      	mov	r0, r4
     cf6:	4b11      	ldr	r3, [pc, #68]	; (d3c <_ZN16Maintenance_Tool4InitEv+0x68>)
     cf8:	4798      	blx	r3
	GetCPUSerialNumber(cpuSerial);
     cfa:	f204 1517 	addw	r5, r4, #279	; 0x117
     cfe:	4629      	mov	r1, r5
     d00:	4620      	mov	r0, r4
     d02:	4b0f      	ldr	r3, [pc, #60]	; (d40 <_ZN16Maintenance_Tool4InitEv+0x6c>)
     d04:	4798      	blx	r3
	memcpy(localBuffer,cpuSerial,16);
     d06:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
     d0a:	f8d4 7117 	ldr.w	r7, [r4, #279]	; 0x117
     d0e:	f8d4 011b 	ldr.w	r0, [r4, #283]	; 0x11b
     d12:	f8d4 111f 	ldr.w	r1, [r4, #287]	; 0x11f
     d16:	f8d4 2123 	ldr.w	r2, [r4, #291]	; 0x123
     d1a:	601f      	str	r7, [r3, #0]
     d1c:	6058      	str	r0, [r3, #4]
     d1e:	6099      	str	r1, [r3, #8]
     d20:	60da      	str	r2, [r3, #12]
	gotAccess=false;
     d22:	f884 610d 	strb.w	r6, [r4, #269]	; 0x10d
}
     d26:	f894 010c 	ldrb.w	r0, [r4, #268]	; 0x10c
     d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d2c:	2000087c 	.word	0x2000087c
     d30:	0000dd45 	.word	0x0000dd45
     d34:	000009e5 	.word	0x000009e5
     d38:	0000de35 	.word	0x0000de35
     d3c:	000002ff 	.word	0x000002ff
     d40:	00000ca9 	.word	0x00000ca9

00000d44 <_GLOBAL__sub_I_ptrMaintenanceTool>:
	}

}
     d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
     d48:	4c31      	ldr	r4, [pc, #196]	; (e10 <_GLOBAL__sub_I_ptrMaintenanceTool+0xcc>)
     d4a:	f104 0564 	add.w	r5, r4, #100	; 0x64
     d4e:	4931      	ldr	r1, [pc, #196]	; (e14 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd0>)
     d50:	4628      	mov	r0, r5
     d52:	4f31      	ldr	r7, [pc, #196]	; (e18 <_GLOBAL__sub_I_ptrMaintenanceTool+0xd4>)
     d54:	47b8      	blx	r7
     d56:	4e31      	ldr	r6, [pc, #196]	; (e1c <_GLOBAL__sub_I_ptrMaintenanceTool+0xd8>)
     d58:	f8df 80f8 	ldr.w	r8, [pc, #248]	; e54 <_GLOBAL__sub_I_ptrMaintenanceTool+0x110>
     d5c:	4632      	mov	r2, r6
     d5e:	4641      	mov	r1, r8
     d60:	4628      	mov	r0, r5
     d62:	4d2f      	ldr	r5, [pc, #188]	; (e20 <_GLOBAL__sub_I_ptrMaintenanceTool+0xdc>)
     d64:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
     d66:	f104 0984 	add.w	r9, r4, #132	; 0x84
     d6a:	492e      	ldr	r1, [pc, #184]	; (e24 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe0>)
     d6c:	4648      	mov	r0, r9
     d6e:	47b8      	blx	r7
     d70:	4632      	mov	r2, r6
     d72:	4641      	mov	r1, r8
     d74:	4648      	mov	r0, r9
     d76:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
     d78:	f104 09a4 	add.w	r9, r4, #164	; 0xa4
     d7c:	492a      	ldr	r1, [pc, #168]	; (e28 <_GLOBAL__sub_I_ptrMaintenanceTool+0xe4>)
     d7e:	4648      	mov	r0, r9
     d80:	47b8      	blx	r7
     d82:	4632      	mov	r2, r6
     d84:	4641      	mov	r1, r8
     d86:	4648      	mov	r0, r9
     d88:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
     d8a:	f104 09c4 	add.w	r9, r4, #196	; 0xc4
     d8e:	4927      	ldr	r1, [pc, #156]	; (e2c <_GLOBAL__sub_I_ptrMaintenanceTool+0xe8>)
     d90:	4648      	mov	r0, r9
     d92:	47b8      	blx	r7
     d94:	4632      	mov	r2, r6
     d96:	4641      	mov	r1, r8
     d98:	4648      	mov	r0, r9
     d9a:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
     d9c:	f104 09e4 	add.w	r9, r4, #228	; 0xe4
     da0:	4923      	ldr	r1, [pc, #140]	; (e30 <_GLOBAL__sub_I_ptrMaintenanceTool+0xec>)
     da2:	4648      	mov	r0, r9
     da4:	47b8      	blx	r7
     da6:	4632      	mov	r2, r6
     da8:	4641      	mov	r1, r8
     daa:	4648      	mov	r0, r9
     dac:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
     dae:	f504 7982 	add.w	r9, r4, #260	; 0x104
     db2:	4920      	ldr	r1, [pc, #128]	; (e34 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf0>)
     db4:	4648      	mov	r0, r9
     db6:	47b8      	blx	r7
     db8:	4632      	mov	r2, r6
     dba:	4641      	mov	r1, r8
     dbc:	4648      	mov	r0, r9
     dbe:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
     dc0:	f104 0904 	add.w	r9, r4, #4
     dc4:	491c      	ldr	r1, [pc, #112]	; (e38 <_GLOBAL__sub_I_ptrMaintenanceTool+0xf4>)
     dc6:	4648      	mov	r0, r9
     dc8:	47b8      	blx	r7
     dca:	4632      	mov	r2, r6
     dcc:	4641      	mov	r1, r8
     dce:	4648      	mov	r0, r9
     dd0:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
     dd2:	f504 7992 	add.w	r9, r4, #292	; 0x124
     dd6:	4919      	ldr	r1, [pc, #100]	; (e3c <_GLOBAL__sub_I_ptrMaintenanceTool+0xf8>)
     dd8:	4648      	mov	r0, r9
     dda:	47b8      	blx	r7
     ddc:	4632      	mov	r2, r6
     dde:	4641      	mov	r1, r8
     de0:	4648      	mov	r0, r9
     de2:	47a8      	blx	r5
     de4:	f504 77a2 	add.w	r7, r4, #324	; 0x144
     de8:	4915      	ldr	r1, [pc, #84]	; (e40 <_GLOBAL__sub_I_ptrMaintenanceTool+0xfc>)
     dea:	4638      	mov	r0, r7
     dec:	4b15      	ldr	r3, [pc, #84]	; (e44 <_GLOBAL__sub_I_ptrMaintenanceTool+0x100>)
     dee:	4798      	blx	r3
     df0:	4632      	mov	r2, r6
     df2:	4915      	ldr	r1, [pc, #84]	; (e48 <_GLOBAL__sub_I_ptrMaintenanceTool+0x104>)
     df4:	4638      	mov	r0, r7
     df6:	47a8      	blx	r5
     df8:	f504 74ac 	add.w	r4, r4, #344	; 0x158
     dfc:	4620      	mov	r0, r4
     dfe:	4b13      	ldr	r3, [pc, #76]	; (e4c <_GLOBAL__sub_I_ptrMaintenanceTool+0x108>)
     e00:	4798      	blx	r3
     e02:	4632      	mov	r2, r6
     e04:	4912      	ldr	r1, [pc, #72]	; (e50 <_GLOBAL__sub_I_ptrMaintenanceTool+0x10c>)
     e06:	4620      	mov	r0, r4
     e08:	47a8      	blx	r5
     e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     e0e:	bf00      	nop
     e10:	20000878 	.word	0x20000878
     e14:	20009da8 	.word	0x20009da8
     e18:	0000dc59 	.word	0x0000dc59
     e1c:	20000000 	.word	0x20000000
     e20:	00013091 	.word	0x00013091
     e24:	20009e3c 	.word	0x20009e3c
     e28:	20009f60 	.word	0x20009f60
     e2c:	20009e5c 	.word	0x20009e5c
     e30:	20009f20 	.word	0x20009f20
     e34:	20009f40 	.word	0x20009f40
     e38:	20009e18 	.word	0x20009e18
     e3c:	20009eb8 	.word	0x20009eb8
     e40:	20009ed8 	.word	0x20009ed8
     e44:	0000db3d 	.word	0x0000db3d
     e48:	0000db59 	.word	0x0000db59
     e4c:	00000a51 	.word	0x00000a51
     e50:	00000a05 	.word	0x00000a05
     e54:	0000dc91 	.word	0x0000dc91

00000e58 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb>:
	{
     e58:	b538      	push	{r3, r4, r5, lr}
     e5a:	4605      	mov	r5, r0
     e5c:	460c      	mov	r4, r1
	checksum = calculateChecksum(header);
     e5e:	4b05      	ldr	r3, [pc, #20]	; (e74 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x1c>)
     e60:	4798      	blx	r3
     e62:	f8a5 0110 	strh.w	r0, [r5, #272]	; 0x110
	usb.writeData(&header, sizeof(header));
     e66:	2206      	movs	r2, #6
     e68:	4621      	mov	r1, r4
     e6a:	4803      	ldr	r0, [pc, #12]	; (e78 <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x20>)
     e6c:	4b03      	ldr	r3, [pc, #12]	; (e7c <_ZN16Maintenance_Tool25notifyGAINCommandReceivedER17HVACMessageHeaderb+0x24>)
     e6e:	4798      	blx	r3
     e70:	bd38      	pop	{r3, r4, r5, pc}
     e72:	bf00      	nop
     e74:	00000c89 	.word	0x00000c89
     e78:	200016f8 	.word	0x200016f8
     e7c:	0000e5a5 	.word	0x0000e5a5

00000e80 <_ZN16Maintenance_Tool21CommandReadParametersEv>:
bool Maintenance_Tool::CommandReadParameters(){
     e80:	b538      	push	{r3, r4, r5, lr}
	 	bool	result(header.task == kGAINCommandReadParameters);
     e82:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
     e86:	2b48      	cmp	r3, #72	; 0x48
     e88:	bf0c      	ite	eq
     e8a:	2501      	moveq	r5, #1
     e8c:	2500      	movne	r5, #0
		if (result){
     e8e:	d001      	beq.n	e94 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x14>
}
     e90:	4628      	mov	r0, r5
     e92:	bd38      	pop	{r3, r4, r5, pc}
     e94:	4604      	mov	r4, r0
			r=memory.ReadParameters(parameters);
     e96:	f500 718a 	add.w	r1, r0, #276	; 0x114
     e9a:	4812      	ldr	r0, [pc, #72]	; (ee4 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x64>)
     e9c:	4b12      	ldr	r3, [pc, #72]	; (ee8 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x68>)
     e9e:	4798      	blx	r3
			 memcpy(localBuffer,(void*)&hm,n);
     ea0:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
     ea4:	4a11      	ldr	r2, [pc, #68]	; (eec <_ZN16Maintenance_Tool21CommandReadParametersEv+0x6c>)
     ea6:	601a      	str	r2, [r3, #0]
     ea8:	2200      	movs	r2, #0
     eaa:	711a      	strb	r2, [r3, #4]
     eac:	715a      	strb	r2, [r3, #5]
			memcpy((uint8_t*)&localBuffer[n],(void*)&parameters,sizeof(UserParameters));
     eae:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
     eb2:	f8b4 2114 	ldrh.w	r2, [r4, #276]	; 0x114
     eb6:	80da      	strh	r2, [r3, #6]
			if (fvc.dataStruct.controlOutputs.iAlcFvStandAloneOut)
     eb8:	4b0d      	ldr	r3, [pc, #52]	; (ef0 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x70>)
     eba:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
     ebe:	b15b      	cbz	r3, ed8 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x58>
				localBuffer[n+sizeof(UserParameters)]=parameters.flapperValveStandAloneMinimumPosition;
     ec0:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
     ec4:	f894 2115 	ldrb.w	r2, [r4, #277]	; 0x115
     ec8:	721a      	strb	r2, [r3, #8]
			w=usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     eca:	2240      	movs	r2, #64	; 0x40
     ecc:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
     ed0:	4808      	ldr	r0, [pc, #32]	; (ef4 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x74>)
     ed2:	4b09      	ldr	r3, [pc, #36]	; (ef8 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x78>)
     ed4:	4798      	blx	r3
     ed6:	e7db      	b.n	e90 <_ZN16Maintenance_Tool21CommandReadParametersEv+0x10>
				localBuffer[n+sizeof(UserParameters)]=parameters.flapperValveMinimumPosition;
     ed8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
     edc:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
     ee0:	721a      	strb	r2, [r3, #8]
     ee2:	e7f2      	b.n	eca <_ZN16Maintenance_Tool21CommandReadParametersEv+0x4a>
     ee4:	20003330 	.word	0x20003330
     ee8:	00010e31 	.word	0x00010e31
     eec:	61626364 	.word	0x61626364
     ef0:	20001eec 	.word	0x20001eec
     ef4:	200016f8 	.word	0x200016f8
     ef8:	0000e63d 	.word	0x0000e63d

00000efc <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv>:
bool Maintenance_Tool::CommandReadHeaterStatus(){
     efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool	result(header.task == kHVACCommandReadHeaterStatus);
     efe:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
     f02:	2b4a      	cmp	r3, #74	; 0x4a
     f04:	bf0c      	ite	eq
     f06:	2501      	moveq	r5, #1
     f08:	2500      	movne	r5, #0
	if (result){
     f0a:	d001      	beq.n	f10 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x14>
}
     f0c:	4628      	mov	r0, r5
     f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f10:	4604      	mov	r4, r0
			singleTask.description=heater.ReadStatus();
     f12:	4e14      	ldr	r6, [pc, #80]	; (f64 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x68>)
     f14:	4630      	mov	r0, r6
     f16:	4b14      	ldr	r3, [pc, #80]	; (f68 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x6c>)
     f18:	4798      	blx	r3
     f1a:	4607      	mov	r7, r0
			memcpy(localBuffer,(void*)&singleTask,n);
     f1c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
     f20:	4a12      	ldr	r2, [pc, #72]	; (f6c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x70>)
     f22:	601a      	str	r2, [r3, #0]
     f24:	2200      	movs	r2, #0
     f26:	711a      	strb	r2, [r3, #4]
     f28:	224a      	movs	r2, #74	; 0x4a
     f2a:	715a      	strb	r2, [r3, #5]
     f2c:	7198      	strb	r0, [r3, #6]
			heatersEnabled=heater.ReadEnableGIPO();
     f2e:	4630      	mov	r0, r6
     f30:	4b0f      	ldr	r3, [pc, #60]	; (f70 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x74>)
     f32:	4798      	blx	r3
			localBuffer[n]=heatersEnabled;
     f34:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
     f38:	71d8      	strb	r0, [r3, #7]
			if (!heater.heaterStatusChanged)
     f3a:	7873      	ldrb	r3, [r6, #1]
     f3c:	b15b      	cbz	r3, f56 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x5a>
			singleTaskMessage=singleTask;
     f3e:	4b0b      	ldr	r3, [pc, #44]	; (f6c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x70>)
     f40:	f8c4 3132 	str.w	r3, [r4, #306]	; 0x132
     f44:	2200      	movs	r2, #0
     f46:	f884 2136 	strb.w	r2, [r4, #310]	; 0x136
     f4a:	234a      	movs	r3, #74	; 0x4a
     f4c:	f884 3137 	strb.w	r3, [r4, #311]	; 0x137
     f50:	f884 7138 	strb.w	r7, [r4, #312]	; 0x138
     f54:	e7da      	b.n	f0c <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x10>
				usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     f56:	2240      	movs	r2, #64	; 0x40
     f58:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
     f5c:	4805      	ldr	r0, [pc, #20]	; (f74 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x78>)
     f5e:	4b06      	ldr	r3, [pc, #24]	; (f78 <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x7c>)
     f60:	4798      	blx	r3
     f62:	e7ec      	b.n	f3e <_ZN16Maintenance_Tool23CommandReadHeaterStatusEv+0x42>
     f64:	20002208 	.word	0x20002208
     f68:	00010c45 	.word	0x00010c45
     f6c:	61626364 	.word	0x61626364
     f70:	00010cb1 	.word	0x00010cb1
     f74:	200016f8 	.word	0x200016f8
     f78:	0000e63d 	.word	0x0000e63d

00000f7c <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv>:
bool Maintenance_Tool::CommandReadTemmperatures(){
     f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool	result(header.task == kHVACCommandReadTemperatures);
     f80:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
     f84:	2b4d      	cmp	r3, #77	; 0x4d
     f86:	bf0c      	ite	eq
     f88:	2501      	moveq	r5, #1
     f8a:	2500      	movne	r5, #0
	if (result){
     f8c:	d002      	beq.n	f94 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x18>
}
     f8e:	4628      	mov	r0, r5
     f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		singleTask.description=temperatures.faultData;
     f94:	4b18      	ldr	r3, [pc, #96]	; (ff8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
     f96:	f893 809c 	ldrb.w	r8, [r3, #156]	; 0x9c
		memcpy(localBuffer,(void*)&singleTask,n);
     f9a:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
     f9e:	4a17      	ldr	r2, [pc, #92]	; (ffc <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
     fa0:	601a      	str	r2, [r3, #0]
     fa2:	2200      	movs	r2, #0
     fa4:	711a      	strb	r2, [r3, #4]
     fa6:	224d      	movs	r2, #77	; 0x4d
     fa8:	715a      	strb	r2, [r3, #5]
     faa:	f883 8006 	strb.w	r8, [r3, #6]
     fae:	2307      	movs	r3, #7
     fb0:	4911      	ldr	r1, [pc, #68]	; (ff8 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x7c>)
     fb2:	f103 0261 	add.w	r2, r3, #97	; 0x61
     fb6:	440a      	add	r2, r1
     fb8:	f103 0710 	add.w	r7, r3, #16
				memcpy(&localBuffer[n+4*((4*i)+j)],(void*)&temperatures.values[i][j],4);
     fbc:	f852 4f04 	ldr.w	r4, [r2, #4]!
     fc0:	f8d0 613c 	ldr.w	r6, [r0, #316]	; 0x13c
     fc4:	50f4      	str	r4, [r6, r3]
     fc6:	3304      	adds	r3, #4
			for (int j = 0; j < 4; j++)
     fc8:	42bb      	cmp	r3, r7
     fca:	d1f7      	bne.n	fbc <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x40>
		for (int i = 0; i < 3; i++)
     fcc:	2b37      	cmp	r3, #55	; 0x37
     fce:	d1f0      	bne.n	fb2 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x36>
     fd0:	4604      	mov	r4, r0
		usb.write(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
     fd2:	2240      	movs	r2, #64	; 0x40
     fd4:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
     fd8:	4809      	ldr	r0, [pc, #36]	; (1000 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x84>)
     fda:	4b0a      	ldr	r3, [pc, #40]	; (1004 <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x88>)
     fdc:	4798      	blx	r3
		singleTaskMessage=singleTask;
     fde:	4b07      	ldr	r3, [pc, #28]	; (ffc <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x80>)
     fe0:	f8c4 3132 	str.w	r3, [r4, #306]	; 0x132
     fe4:	2200      	movs	r2, #0
     fe6:	f884 2136 	strb.w	r2, [r4, #310]	; 0x136
     fea:	234d      	movs	r3, #77	; 0x4d
     fec:	f884 3137 	strb.w	r3, [r4, #311]	; 0x137
     ff0:	f884 8138 	strb.w	r8, [r4, #312]	; 0x138
     ff4:	e7cb      	b.n	f8e <_ZN16Maintenance_Tool24CommandReadTemmperaturesEv+0x12>
     ff6:	bf00      	nop
     ff8:	20009804 	.word	0x20009804
     ffc:	61626364 	.word	0x61626364
    1000:	200016f8 	.word	0x200016f8
    1004:	0000e63d 	.word	0x0000e63d

00001008 <_ZN16Maintenance_Tool14handleHVACTaskEv>:
bool Maintenance_Tool::handleHVACTask(void){
    1008:	b570      	push	{r4, r5, r6, lr}
    100a:	4604      	mov	r4, r0
	memcpy(&header,localBuffer,sizeof(HVACMessageHeader));
    100c:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
    1010:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    1014:	681a      	ldr	r2, [r3, #0]
    1016:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
    101a:	889b      	ldrh	r3, [r3, #4]
    101c:	80ab      	strh	r3, [r5, #4]
	&& (header.task<kGAINNumberOfCommands))
    101e:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
    1022:	3b41      	subs	r3, #65	; 0x41
	if ((header.task>=kGAINCommandConnect)
    1024:	b2db      	uxtb	r3, r3
    1026:	2b16      	cmp	r3, #22
    1028:	d817      	bhi.n	105a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x52>
		gotTask=true;
    102a:	2301      	movs	r3, #1
    102c:	f880 310f 	strb.w	r3, [r0, #271]	; 0x10f
		result=gotTask;
    1030:	f880 310c 	strb.w	r3, [r0, #268]	; 0x10c
		switch (header.task)
    1034:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
    1038:	3b41      	subs	r3, #65	; 0x41
    103a:	2b16      	cmp	r3, #22
    103c:	d878      	bhi.n	1130 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x128>
    103e:	e8df f003 	tbb	[pc, r3]
    1042:	261f      	.short	0x261f
    1044:	1c1c2c1c 	.word	0x1c1c2c1c
    1048:	47413b35 	.word	0x47413b35
    104c:	655f534d 	.word	0x655f534d
    1050:	1c59716b 	.word	0x1c59716b
    1054:	77771c1c 	.word	0x77771c1c
    1058:	1c          	.byte	0x1c
    1059:	00          	.byte	0x00
		gotTask=false;
    105a:	2300      	movs	r3, #0
    105c:	f880 310f 	strb.w	r3, [r0, #271]	; 0x10f
		usb.readDataAsyn(&localBuffer, MAINTENANCE_TOOL_BUFFER_SIZE);
    1060:	4e35      	ldr	r6, [pc, #212]	; (1138 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x130>)
    1062:	2240      	movs	r2, #64	; 0x40
    1064:	f500 719e 	add.w	r1, r0, #316	; 0x13c
    1068:	4630      	mov	r0, r6
    106a:	4b34      	ldr	r3, [pc, #208]	; (113c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x134>)
    106c:	4798      	blx	r3
		result=usb.rxReady;
    106e:	7d73      	ldrb	r3, [r6, #21]
    1070:	b2db      	uxtb	r3, r3
    1072:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
	if (result)
    1076:	2b00      	cmp	r3, #0
    1078:	d1dc      	bne.n	1034 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x2c>
	}
    107a:	f894 010c 	ldrb.w	r0, [r4, #268]	; 0x10c
    107e:	bd70      	pop	{r4, r5, r6, pc}
				result = handleGAINCommandConnect( header);
    1080:	4629      	mov	r1, r5
    1082:	4620      	mov	r0, r4
    1084:	4b2e      	ldr	r3, [pc, #184]	; (1140 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x138>)
    1086:	4798      	blx	r3
    1088:	f884 010c 	strb.w	r0, [r4, #268]	; 0x10c
				break;
    108c:	e7f5      	b.n	107a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
	maintenanceIsConnected = false;
    108e:	2300      	movs	r3, #0
    1090:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	bSendNotifications = false;
    1094:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
				break;
    1098:	e7ef      	b.n	107a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				notifyGAINCommandReceived( header, result);
    109a:	2201      	movs	r2, #1
    109c:	4629      	mov	r1, r5
    109e:	4620      	mov	r0, r4
    10a0:	4b28      	ldr	r3, [pc, #160]	; (1144 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x13c>)
    10a2:	4798      	blx	r3
				result = handleGAINCommandReset(header);
    10a4:	2301      	movs	r3, #1
    10a6:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
				break;
    10aa:	e7e6      	b.n	107a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandWriteParameters();
    10ac:	4620      	mov	r0, r4
    10ae:	4b26      	ldr	r3, [pc, #152]	; (1148 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x140>)
    10b0:	4798      	blx	r3
    10b2:	f884 010c 	strb.w	r0, [r4, #268]	; 0x10c
				break;
    10b6:	e7e0      	b.n	107a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandReadParameters();
    10b8:	4620      	mov	r0, r4
    10ba:	4b24      	ldr	r3, [pc, #144]	; (114c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x144>)
    10bc:	4798      	blx	r3
    10be:	f884 010c 	strb.w	r0, [r4, #268]	; 0x10c
				break;
    10c2:	e7da      	b.n	107a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandSetHeaters();
    10c4:	4620      	mov	r0, r4
    10c6:	4b22      	ldr	r3, [pc, #136]	; (1150 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x148>)
    10c8:	4798      	blx	r3
    10ca:	f884 010c 	strb.w	r0, [r4, #268]	; 0x10c
				break;
    10ce:	e7d4      	b.n	107a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandReadHeaterStatus();
    10d0:	4620      	mov	r0, r4
    10d2:	4b20      	ldr	r3, [pc, #128]	; (1154 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x14c>)
    10d4:	4798      	blx	r3
    10d6:	f884 010c 	strb.w	r0, [r4, #268]	; 0x10c
				break;
    10da:	e7ce      	b.n	107a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandSetEnableFans();
    10dc:	4620      	mov	r0, r4
    10de:	4b1e      	ldr	r3, [pc, #120]	; (1158 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x150>)
    10e0:	4798      	blx	r3
    10e2:	f884 010c 	strb.w	r0, [r4, #268]	; 0x10c
				break;
    10e6:	e7c8      	b.n	107a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandSetPWMFans();
    10e8:	4620      	mov	r0, r4
    10ea:	4b1c      	ldr	r3, [pc, #112]	; (115c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x154>)
    10ec:	4798      	blx	r3
    10ee:	f884 010c 	strb.w	r0, [r4, #268]	; 0x10c
				break;
    10f2:	e7c2      	b.n	107a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandFansStatus();
    10f4:	4620      	mov	r0, r4
    10f6:	4b1a      	ldr	r3, [pc, #104]	; (1160 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x158>)
    10f8:	4798      	blx	r3
    10fa:	f884 010c 	strb.w	r0, [r4, #268]	; 0x10c
				break;
    10fe:	e7bc      	b.n	107a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandReadTemmperatures();
    1100:	4620      	mov	r0, r4
    1102:	4b18      	ldr	r3, [pc, #96]	; (1164 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x15c>)
    1104:	4798      	blx	r3
    1106:	f884 010c 	strb.w	r0, [r4, #268]	; 0x10c
				break;
    110a:	e7b6      	b.n	107a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandReadFlapperData();
    110c:	4620      	mov	r0, r4
    110e:	4b16      	ldr	r3, [pc, #88]	; (1168 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x160>)
    1110:	4798      	blx	r3
    1112:	f884 010c 	strb.w	r0, [r4, #268]	; 0x10c
				break;
    1116:	e7b0      	b.n	107a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandSetFlapperValve();
    1118:	4620      	mov	r0, r4
    111a:	4b14      	ldr	r3, [pc, #80]	; (116c <_ZN16Maintenance_Tool14handleHVACTaskEv+0x164>)
    111c:	4798      	blx	r3
    111e:	f884 010c 	strb.w	r0, [r4, #268]	; 0x10c
				break;
    1122:	e7aa      	b.n	107a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = CommandSetFlapperPosition();
    1124:	4620      	mov	r0, r4
    1126:	4b12      	ldr	r3, [pc, #72]	; (1170 <_ZN16Maintenance_Tool14handleHVACTaskEv+0x168>)
    1128:	4798      	blx	r3
    112a:	f884 010c 	strb.w	r0, [r4, #268]	; 0x10c
				break;
    112e:	e7a4      	b.n	107a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
				result = false;
    1130:	2300      	movs	r3, #0
    1132:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
				break;
    1136:	e7a0      	b.n	107a <_ZN16Maintenance_Tool14handleHVACTaskEv+0x72>
    1138:	200016f8 	.word	0x200016f8
    113c:	0000e4b9 	.word	0x0000e4b9
    1140:	00000ba1 	.word	0x00000ba1
    1144:	00000e59 	.word	0x00000e59
    1148:	00000bb9 	.word	0x00000bb9
    114c:	00000e81 	.word	0x00000e81
    1150:	00000bed 	.word	0x00000bed
    1154:	00000efd 	.word	0x00000efd
    1158:	00000389 	.word	0x00000389
    115c:	000003b5 	.word	0x000003b5
    1160:	000005bd 	.word	0x000005bd
    1164:	00000f7d 	.word	0x00000f7d
    1168:	0000061d 	.word	0x0000061d
    116c:	00000401 	.word	0x00000401
    1170:	0000046d 	.word	0x0000046d

00001174 <_ZN16Maintenance_Tool19handleCommunicationEv>:
	{
    1174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1176:	4604      	mov	r4, r0
	result=false;
    1178:	2300      	movs	r3, #0
    117a:	f880 310c 	strb.w	r3, [r0, #268]	; 0x10c
	if (gotAccess)
    117e:	f890 310d 	ldrb.w	r3, [r0, #269]	; 0x10d
    1182:	2b00      	cmp	r3, #0
    1184:	d04f      	beq.n	1226 <_ZN16Maintenance_Tool19handleCommunicationEv+0xb2>
		if (usb.rxReady)
    1186:	4b2a      	ldr	r3, [pc, #168]	; (1230 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    1188:	7d5b      	ldrb	r3, [r3, #21]
    118a:	b95b      	cbnz	r3, 11a4 <_ZN16Maintenance_Tool19handleCommunicationEv+0x30>
			gotCommand=false;
    118c:	2300      	movs	r3, #0
    118e:	f880 310e 	strb.w	r3, [r0, #270]	; 0x10e
		usb.readDataAsyn(localBuffer,MAINTENANCE_TOOL_BUFFER_SIZE);
    1192:	2240      	movs	r2, #64	; 0x40
    1194:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    1198:	4825      	ldr	r0, [pc, #148]	; (1230 <_ZN16Maintenance_Tool19handleCommunicationEv+0xbc>)
    119a:	4b26      	ldr	r3, [pc, #152]	; (1234 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc0>)
    119c:	4798      	blx	r3
	}
    119e:	f894 010c 	ldrb.w	r0, [r4, #268]	; 0x10c
    11a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memcpy(&header,localBuffer,sizeMessage);
    11a4:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    11a8:	681a      	ldr	r2, [r3, #0]
    11aa:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
    11ae:	889b      	ldrh	r3, [r3, #4]
    11b0:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
			switch (input){
    11b4:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
    11b8:	2b3d      	cmp	r3, #61	; 0x3d
    11ba:	d017      	beq.n	11ec <_ZN16Maintenance_Tool19handleCommunicationEv+0x78>
    11bc:	2b3e      	cmp	r3, #62	; 0x3e
    11be:	d010      	beq.n	11e2 <_ZN16Maintenance_Tool19handleCommunicationEv+0x6e>
    11c0:	2b3c      	cmp	r3, #60	; 0x3c
    11c2:	d003      	beq.n	11cc <_ZN16Maintenance_Tool19handleCommunicationEv+0x58>
					gotCommand=false;
    11c4:	2300      	movs	r3, #0
    11c6:	f880 310e 	strb.w	r3, [r0, #270]	; 0x10e
				break;
    11ca:	e006      	b.n	11da <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
					gotCommand=true;
    11cc:	2301      	movs	r3, #1
    11ce:	f880 310e 	strb.w	r3, [r0, #270]	; 0x10e
					result = handleHVACTask();
    11d2:	4b19      	ldr	r3, [pc, #100]	; (1238 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
    11d4:	4798      	blx	r3
    11d6:	f884 010c 	strb.w	r0, [r4, #268]	; 0x10c
			ClearLocalBuffer();
    11da:	4620      	mov	r0, r4
    11dc:	4b17      	ldr	r3, [pc, #92]	; (123c <_ZN16Maintenance_Tool19handleCommunicationEv+0xc8>)
    11de:	4798      	blx	r3
    11e0:	e7d7      	b.n	1192 <_ZN16Maintenance_Tool19handleCommunicationEv+0x1e>
					result = handleHVACTask();
    11e2:	4b15      	ldr	r3, [pc, #84]	; (1238 <_ZN16Maintenance_Tool19handleCommunicationEv+0xc4>)
    11e4:	4798      	blx	r3
    11e6:	f884 010c 	strb.w	r0, [r4, #268]	; 0x10c
				break;
    11ea:	e7f6      	b.n	11da <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
					is_MTPC_Beaming=true;
    11ec:	2501      	movs	r5, #1
    11ee:	f880 5054 	strb.w	r5, [r0, #84]	; 0x54
					interfaceTimer.Stop();
    11f2:	4e13      	ldr	r6, [pc, #76]	; (1240 <_ZN16Maintenance_Tool19handleCommunicationEv+0xcc>)
    11f4:	4630      	mov	r0, r6
    11f6:	4b13      	ldr	r3, [pc, #76]	; (1244 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd0>)
    11f8:	4798      	blx	r3
					interfaceTimer.Remove_task((FUNC_PTR)MaintenaceToolPCBeaming);
    11fa:	4f13      	ldr	r7, [pc, #76]	; (1248 <_ZN16Maintenance_Tool19handleCommunicationEv+0xd4>)
    11fc:	4639      	mov	r1, r7
    11fe:	4630      	mov	r0, r6
    1200:	4b12      	ldr	r3, [pc, #72]	; (124c <_ZN16Maintenance_Tool19handleCommunicationEv+0xd8>)
    1202:	4798      	blx	r3
					interfaceTimer.Start_oneShot_task((FUNC_PTR)MaintenaceToolPCBeaming,10*1000);
    1204:	f242 7210 	movw	r2, #10000	; 0x2710
    1208:	4639      	mov	r1, r7
    120a:	4630      	mov	r0, r6
    120c:	4b10      	ldr	r3, [pc, #64]	; (1250 <_ZN16Maintenance_Tool19handleCommunicationEv+0xdc>)
    120e:	4798      	blx	r3
					nextMaintenanceSyncTime = 0;
    1210:	2300      	movs	r3, #0
    1212:	65a3      	str	r3, [r4, #88]	; 0x58
					maintenanceIsConnected = true;
    1214:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
					bSendNotifications = true;
    1218:	f884 5065 	strb.w	r5, [r4, #101]	; 0x65
					result=is_MTPC_Beaming;
    121c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
    1220:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
				break;
    1224:	e7d9      	b.n	11da <_ZN16Maintenance_Tool19handleCommunicationEv+0x66>
		gotCommand=false;
    1226:	2300      	movs	r3, #0
    1228:	f880 310e 	strb.w	r3, [r0, #270]	; 0x10e
    122c:	e7b7      	b.n	119e <_ZN16Maintenance_Tool19handleCommunicationEv+0x2a>
    122e:	bf00      	nop
    1230:	200016f8 	.word	0x200016f8
    1234:	0000e4b9 	.word	0x0000e4b9
    1238:	00001009 	.word	0x00001009
    123c:	00000b85 	.word	0x00000b85
    1240:	2000087c 	.word	0x2000087c
    1244:	0000ddb9 	.word	0x0000ddb9
    1248:	000009f5 	.word	0x000009f5
    124c:	0000de89 	.word	0x0000de89
    1250:	0000dee1 	.word	0x0000dee1

00001254 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    1254:	b580      	push	{r7, lr}
    1256:	af00      	add	r7, sp, #0
	system_init();
    1258:	4b03      	ldr	r3, [pc, #12]	; (1268 <atmel_start_init+0x14>)
    125a:	4798      	blx	r3
	usb_init();
    125c:	4b03      	ldr	r3, [pc, #12]	; (126c <atmel_start_init+0x18>)
    125e:	4798      	blx	r3
	spi_nor_flash_init();
    1260:	4b03      	ldr	r3, [pc, #12]	; (1270 <atmel_start_init+0x1c>)
    1262:	4798      	blx	r3
}
    1264:	bf00      	nop
    1266:	bd80      	pop	{r7, pc}
    1268:	00002655 	.word	0x00002655
    126c:	0000bc69 	.word	0x0000bc69
    1270:	0000bbfd 	.word	0x0000bbfd

00001274 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
    1274:	b480      	push	{r7}
    1276:	b085      	sub	sp, #20
    1278:	af00      	add	r7, sp, #0
    127a:	60f8      	str	r0, [r7, #12]
    127c:	460b      	mov	r3, r1
    127e:	607a      	str	r2, [r7, #4]
    1280:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1282:	7afa      	ldrb	r2, [r7, #11]
    1284:	68fb      	ldr	r3, [r7, #12]
    1286:	3220      	adds	r2, #32
    1288:	6879      	ldr	r1, [r7, #4]
    128a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    128e:	bf00      	nop
    1290:	3714      	adds	r7, #20
    1292:	46bd      	mov	sp, r7
    1294:	f85d 7b04 	ldr.w	r7, [sp], #4
    1298:	4770      	bx	lr

0000129a <hri_mclk_set_AHBMASK_USB_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_DMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
    129a:	b480      	push	{r7}
    129c:	b083      	sub	sp, #12
    129e:	af00      	add	r7, sp, #0
    12a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    12a2:	687b      	ldr	r3, [r7, #4]
    12a4:	691b      	ldr	r3, [r3, #16]
    12a6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    12ae:	bf00      	nop
    12b0:	370c      	adds	r7, #12
    12b2:	46bd      	mov	sp, r7
    12b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    12b8:	4770      	bx	lr

000012ba <hri_mclk_set_AHBMASK_QSPI_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
    12ba:	b480      	push	{r7}
    12bc:	b083      	sub	sp, #12
    12be:	af00      	add	r7, sp, #0
    12c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    12c2:	687b      	ldr	r3, [r7, #4]
    12c4:	691b      	ldr	r3, [r3, #16]
    12c6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    12ca:	687b      	ldr	r3, [r7, #4]
    12cc:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    12ce:	bf00      	nop
    12d0:	370c      	adds	r7, #12
    12d2:	46bd      	mov	sp, r7
    12d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    12d8:	4770      	bx	lr

000012da <hri_mclk_set_AHBMASK_CAN1_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_CAN0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_CAN1_bit(const void *const hw)
{
    12da:	b480      	push	{r7}
    12dc:	b083      	sub	sp, #12
    12de:	af00      	add	r7, sp, #0
    12e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_CAN1;
    12e2:	687b      	ldr	r3, [r7, #4]
    12e4:	691b      	ldr	r3, [r3, #16]
    12e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    12ea:	687b      	ldr	r3, [r7, #4]
    12ec:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    12ee:	bf00      	nop
    12f0:	370c      	adds	r7, #12
    12f2:	46bd      	mov	sp, r7
    12f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    12f8:	4770      	bx	lr

000012fa <hri_mclk_set_AHBMASK_QSPI_2X_bit>:
	((Mclk *)hw)->AHBMASK.reg ^= MCLK_AHBMASK_PUKCC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
    12fa:	b480      	push	{r7}
    12fc:	b083      	sub	sp, #12
    12fe:	af00      	add	r7, sp, #0
    1300:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    1302:	687b      	ldr	r3, [r7, #4]
    1304:	691b      	ldr	r3, [r3, #16]
    1306:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    130a:	687b      	ldr	r3, [r7, #4]
    130c:	611a      	str	r2, [r3, #16]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    130e:	bf00      	nop
    1310:	370c      	adds	r7, #12
    1312:	46bd      	mov	sp, r7
    1314:	f85d 7b04 	ldr.w	r7, [sp], #4
    1318:	4770      	bx	lr

0000131a <hri_mclk_set_APBAMASK_WDT_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_GCLK;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_WDT_bit(const void *const hw)
{
    131a:	b480      	push	{r7}
    131c:	b083      	sub	sp, #12
    131e:	af00      	add	r7, sp, #0
    1320:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    1322:	687b      	ldr	r3, [r7, #4]
    1324:	695b      	ldr	r3, [r3, #20]
    1326:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    132a:	687b      	ldr	r3, [r7, #4]
    132c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    132e:	bf00      	nop
    1330:	370c      	adds	r7, #12
    1332:	46bd      	mov	sp, r7
    1334:	f85d 7b04 	ldr.w	r7, [sp], #4
    1338:	4770      	bx	lr

0000133a <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
    133a:	b480      	push	{r7}
    133c:	b083      	sub	sp, #12
    133e:	af00      	add	r7, sp, #0
    1340:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    1342:	687b      	ldr	r3, [r7, #4]
    1344:	695b      	ldr	r3, [r3, #20]
    1346:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    134a:	687b      	ldr	r3, [r7, #4]
    134c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    134e:	bf00      	nop
    1350:	370c      	adds	r7, #12
    1352:	46bd      	mov	sp, r7
    1354:	f85d 7b04 	ldr.w	r7, [sp], #4
    1358:	4770      	bx	lr

0000135a <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
    135a:	b480      	push	{r7}
    135c:	b083      	sub	sp, #12
    135e:	af00      	add	r7, sp, #0
    1360:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    1362:	687b      	ldr	r3, [r7, #4]
    1364:	695b      	ldr	r3, [r3, #20]
    1366:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    136a:	687b      	ldr	r3, [r7, #4]
    136c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    136e:	bf00      	nop
    1370:	370c      	adds	r7, #12
    1372:	46bd      	mov	sp, r7
    1374:	f85d 7b04 	ldr.w	r7, [sp], #4
    1378:	4770      	bx	lr

0000137a <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
    137a:	b480      	push	{r7}
    137c:	b083      	sub	sp, #12
    137e:	af00      	add	r7, sp, #0
    1380:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    1382:	687b      	ldr	r3, [r7, #4]
    1384:	695b      	ldr	r3, [r3, #20]
    1386:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    138a:	687b      	ldr	r3, [r7, #4]
    138c:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    138e:	bf00      	nop
    1390:	370c      	adds	r7, #12
    1392:	46bd      	mov	sp, r7
    1394:	f85d 7b04 	ldr.w	r7, [sp], #4
    1398:	4770      	bx	lr

0000139a <hri_mclk_set_APBAMASK_TC0_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_TC0_bit(const void *const hw)
{
    139a:	b480      	push	{r7}
    139c:	b083      	sub	sp, #12
    139e:	af00      	add	r7, sp, #0
    13a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    13a2:	687b      	ldr	r3, [r7, #4]
    13a4:	695b      	ldr	r3, [r3, #20]
    13a6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    13aa:	687b      	ldr	r3, [r7, #4]
    13ac:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    13ae:	bf00      	nop
    13b0:	370c      	adds	r7, #12
    13b2:	46bd      	mov	sp, r7
    13b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    13b8:	4770      	bx	lr

000013ba <hri_mclk_set_APBBMASK_USB_bit>:
{
	return ((Mclk *)hw)->APBAMASK.reg;
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
    13ba:	b480      	push	{r7}
    13bc:	b083      	sub	sp, #12
    13be:	af00      	add	r7, sp, #0
    13c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    13c2:	687b      	ldr	r3, [r7, #4]
    13c4:	699b      	ldr	r3, [r3, #24]
    13c6:	f043 0201 	orr.w	r2, r3, #1
    13ca:	687b      	ldr	r3, [r7, #4]
    13cc:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    13ce:	bf00      	nop
    13d0:	370c      	adds	r7, #12
    13d2:	46bd      	mov	sp, r7
    13d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    13d8:	4770      	bx	lr

000013da <hri_mclk_set_APBBMASK_DSU_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_USB;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_DSU_bit(const void *const hw)
{
    13da:	b480      	push	{r7}
    13dc:	b083      	sub	sp, #12
    13de:	af00      	add	r7, sp, #0
    13e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    13e2:	687b      	ldr	r3, [r7, #4]
    13e4:	699b      	ldr	r3, [r3, #24]
    13e6:	f043 0202 	orr.w	r2, r3, #2
    13ea:	687b      	ldr	r3, [r7, #4]
    13ec:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    13ee:	bf00      	nop
    13f0:	370c      	adds	r7, #12
    13f2:	46bd      	mov	sp, r7
    13f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    13f8:	4770      	bx	lr

000013fa <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
    13fa:	b480      	push	{r7}
    13fc:	b083      	sub	sp, #12
    13fe:	af00      	add	r7, sp, #0
    1400:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    1402:	687b      	ldr	r3, [r7, #4]
    1404:	699b      	ldr	r3, [r3, #24]
    1406:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    140a:	687b      	ldr	r3, [r7, #4]
    140c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    140e:	bf00      	nop
    1410:	370c      	adds	r7, #12
    1412:	46bd      	mov	sp, r7
    1414:	f85d 7b04 	ldr.w	r7, [sp], #4
    1418:	4770      	bx	lr

0000141a <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
    141a:	b480      	push	{r7}
    141c:	b083      	sub	sp, #12
    141e:	af00      	add	r7, sp, #0
    1420:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    1422:	687b      	ldr	r3, [r7, #4]
    1424:	699b      	ldr	r3, [r3, #24]
    1426:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    142a:	687b      	ldr	r3, [r7, #4]
    142c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    142e:	bf00      	nop
    1430:	370c      	adds	r7, #12
    1432:	46bd      	mov	sp, r7
    1434:	f85d 7b04 	ldr.w	r7, [sp], #4
    1438:	4770      	bx	lr

0000143a <hri_mclk_set_APBBMASK_TCC1_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC1_bit(const void *const hw)
{
    143a:	b480      	push	{r7}
    143c:	b083      	sub	sp, #12
    143e:	af00      	add	r7, sp, #0
    1440:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    1442:	687b      	ldr	r3, [r7, #4]
    1444:	699b      	ldr	r3, [r3, #24]
    1446:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    144a:	687b      	ldr	r3, [r7, #4]
    144c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    144e:	bf00      	nop
    1450:	370c      	adds	r7, #12
    1452:	46bd      	mov	sp, r7
    1454:	f85d 7b04 	ldr.w	r7, [sp], #4
    1458:	4770      	bx	lr

0000145a <hri_mclk_set_APBBMASK_TC2_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_TCC1;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TC2_bit(const void *const hw)
{
    145a:	b480      	push	{r7}
    145c:	b083      	sub	sp, #12
    145e:	af00      	add	r7, sp, #0
    1460:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    1462:	687b      	ldr	r3, [r7, #4]
    1464:	699b      	ldr	r3, [r3, #24]
    1466:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    146a:	687b      	ldr	r3, [r7, #4]
    146c:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    146e:	bf00      	nop
    1470:	370c      	adds	r7, #12
    1472:	46bd      	mov	sp, r7
    1474:	f85d 7b04 	ldr.w	r7, [sp], #4
    1478:	4770      	bx	lr

0000147a <hri_mclk_set_APBCMASK_TCC2_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_GMAC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TCC2_bit(const void *const hw)
{
    147a:	b480      	push	{r7}
    147c:	b083      	sub	sp, #12
    147e:	af00      	add	r7, sp, #0
    1480:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    1482:	687b      	ldr	r3, [r7, #4]
    1484:	69db      	ldr	r3, [r3, #28]
    1486:	f043 0208 	orr.w	r2, r3, #8
    148a:	687b      	ldr	r3, [r7, #4]
    148c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    148e:	bf00      	nop
    1490:	370c      	adds	r7, #12
    1492:	46bd      	mov	sp, r7
    1494:	f85d 7b04 	ldr.w	r7, [sp], #4
    1498:	4770      	bx	lr

0000149a <hri_mclk_set_APBCMASK_TC4_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
    149a:	b480      	push	{r7}
    149c:	b083      	sub	sp, #12
    149e:	af00      	add	r7, sp, #0
    14a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    14a2:	687b      	ldr	r3, [r7, #4]
    14a4:	69db      	ldr	r3, [r3, #28]
    14a6:	f043 0220 	orr.w	r2, r3, #32
    14aa:	687b      	ldr	r3, [r7, #4]
    14ac:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    14ae:	bf00      	nop
    14b0:	370c      	adds	r7, #12
    14b2:	46bd      	mov	sp, r7
    14b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14b8:	4770      	bx	lr

000014ba <hri_mclk_set_APBCMASK_TC5_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
    14ba:	b480      	push	{r7}
    14bc:	b083      	sub	sp, #12
    14be:	af00      	add	r7, sp, #0
    14c0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    14c2:	687b      	ldr	r3, [r7, #4]
    14c4:	69db      	ldr	r3, [r3, #28]
    14c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    14ca:	687b      	ldr	r3, [r7, #4]
    14cc:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    14ce:	bf00      	nop
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr

000014da <hri_mclk_set_APBCMASK_QSPI_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ICM;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
    14da:	b480      	push	{r7}
    14dc:	b083      	sub	sp, #12
    14de:	af00      	add	r7, sp, #0
    14e0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    14e2:	687b      	ldr	r3, [r7, #4]
    14e4:	69db      	ldr	r3, [r3, #28]
    14e6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
    14ea:	687b      	ldr	r3, [r7, #4]
    14ec:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    14ee:	bf00      	nop
    14f0:	370c      	adds	r7, #12
    14f2:	46bd      	mov	sp, r7
    14f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14f8:	4770      	bx	lr

000014fa <hri_mclk_set_APBDMASK_SERCOM4_bit>:
{
	return ((Mclk *)hw)->APBCMASK.reg;
}

static inline void hri_mclk_set_APBDMASK_SERCOM4_bit(const void *const hw)
{
    14fa:	b480      	push	{r7}
    14fc:	b083      	sub	sp, #12
    14fe:	af00      	add	r7, sp, #0
    1500:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    1502:	687b      	ldr	r3, [r7, #4]
    1504:	6a1b      	ldr	r3, [r3, #32]
    1506:	f043 0201 	orr.w	r2, r3, #1
    150a:	687b      	ldr	r3, [r7, #4]
    150c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    150e:	bf00      	nop
    1510:	370c      	adds	r7, #12
    1512:	46bd      	mov	sp, r7
    1514:	f85d 7b04 	ldr.w	r7, [sp], #4
    1518:	4770      	bx	lr

0000151a <hri_mclk_set_APBDMASK_SERCOM5_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
    151a:	b480      	push	{r7}
    151c:	b083      	sub	sp, #12
    151e:	af00      	add	r7, sp, #0
    1520:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    1522:	687b      	ldr	r3, [r7, #4]
    1524:	6a1b      	ldr	r3, [r3, #32]
    1526:	f043 0202 	orr.w	r2, r3, #2
    152a:	687b      	ldr	r3, [r7, #4]
    152c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    152e:	bf00      	nop
    1530:	370c      	adds	r7, #12
    1532:	46bd      	mov	sp, r7
    1534:	f85d 7b04 	ldr.w	r7, [sp], #4
    1538:	4770      	bx	lr

0000153a <hri_mclk_set_APBDMASK_SERCOM6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM5;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM6_bit(const void *const hw)
{
    153a:	b480      	push	{r7}
    153c:	b083      	sub	sp, #12
    153e:	af00      	add	r7, sp, #0
    1540:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    1542:	687b      	ldr	r3, [r7, #4]
    1544:	6a1b      	ldr	r3, [r3, #32]
    1546:	f043 0204 	orr.w	r2, r3, #4
    154a:	687b      	ldr	r3, [r7, #4]
    154c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    154e:	bf00      	nop
    1550:	370c      	adds	r7, #12
    1552:	46bd      	mov	sp, r7
    1554:	f85d 7b04 	ldr.w	r7, [sp], #4
    1558:	4770      	bx	lr

0000155a <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
    155a:	b480      	push	{r7}
    155c:	b083      	sub	sp, #12
    155e:	af00      	add	r7, sp, #0
    1560:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    1562:	687b      	ldr	r3, [r7, #4]
    1564:	6a1b      	ldr	r3, [r3, #32]
    1566:	f043 0208 	orr.w	r2, r3, #8
    156a:	687b      	ldr	r3, [r7, #4]
    156c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    156e:	bf00      	nop
    1570:	370c      	adds	r7, #12
    1572:	46bd      	mov	sp, r7
    1574:	f85d 7b04 	ldr.w	r7, [sp], #4
    1578:	4770      	bx	lr

0000157a <hri_mclk_set_APBDMASK_TC6_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TCC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC6_bit(const void *const hw)
{
    157a:	b480      	push	{r7}
    157c:	b083      	sub	sp, #12
    157e:	af00      	add	r7, sp, #0
    1580:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC6;
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	6a1b      	ldr	r3, [r3, #32]
    1586:	f043 0220 	orr.w	r2, r3, #32
    158a:	687b      	ldr	r3, [r7, #4]
    158c:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    158e:	bf00      	nop
    1590:	370c      	adds	r7, #12
    1592:	46bd      	mov	sp, r7
    1594:	f85d 7b04 	ldr.w	r7, [sp], #4
    1598:	4770      	bx	lr

0000159a <hri_mclk_set_APBDMASK_TC7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_TC6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_TC7_bit(const void *const hw)
{
    159a:	b480      	push	{r7}
    159c:	b083      	sub	sp, #12
    159e:	af00      	add	r7, sp, #0
    15a0:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TC7;
    15a2:	687b      	ldr	r3, [r7, #4]
    15a4:	6a1b      	ldr	r3, [r3, #32]
    15a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
    15ae:	bf00      	nop
    15b0:	370c      	adds	r7, #12
    15b2:	46bd      	mov	sp, r7
    15b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    15b8:	4770      	bx	lr

000015ba <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    15ba:	b480      	push	{r7}
    15bc:	b085      	sub	sp, #20
    15be:	af00      	add	r7, sp, #0
    15c0:	60f8      	str	r0, [r7, #12]
    15c2:	460b      	mov	r3, r1
    15c4:	607a      	str	r2, [r7, #4]
    15c6:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    15c8:	7afb      	ldrb	r3, [r7, #11]
    15ca:	68fa      	ldr	r2, [r7, #12]
    15cc:	01db      	lsls	r3, r3, #7
    15ce:	4413      	add	r3, r2
    15d0:	3308      	adds	r3, #8
    15d2:	687a      	ldr	r2, [r7, #4]
    15d4:	601a      	str	r2, [r3, #0]
}
    15d6:	bf00      	nop
    15d8:	3714      	adds	r7, #20
    15da:	46bd      	mov	sp, r7
    15dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    15e0:	4770      	bx	lr

000015e2 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
    15e2:	b480      	push	{r7}
    15e4:	b085      	sub	sp, #20
    15e6:	af00      	add	r7, sp, #0
    15e8:	60f8      	str	r0, [r7, #12]
    15ea:	460b      	mov	r3, r1
    15ec:	607a      	str	r2, [r7, #4]
    15ee:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    15f0:	7afb      	ldrb	r3, [r7, #11]
    15f2:	68fa      	ldr	r2, [r7, #12]
    15f4:	01db      	lsls	r3, r3, #7
    15f6:	4413      	add	r3, r2
    15f8:	3304      	adds	r3, #4
    15fa:	687a      	ldr	r2, [r7, #4]
    15fc:	601a      	str	r2, [r3, #0]
}
    15fe:	bf00      	nop
    1600:	3714      	adds	r7, #20
    1602:	46bd      	mov	sp, r7
    1604:	f85d 7b04 	ldr.w	r7, [sp], #4
    1608:	4770      	bx	lr

0000160a <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    160a:	b480      	push	{r7}
    160c:	b085      	sub	sp, #20
    160e:	af00      	add	r7, sp, #0
    1610:	60f8      	str	r0, [r7, #12]
    1612:	460b      	mov	r3, r1
    1614:	607a      	str	r2, [r7, #4]
    1616:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1618:	7afb      	ldrb	r3, [r7, #11]
    161a:	68fa      	ldr	r2, [r7, #12]
    161c:	01db      	lsls	r3, r3, #7
    161e:	4413      	add	r3, r2
    1620:	3318      	adds	r3, #24
    1622:	687a      	ldr	r2, [r7, #4]
    1624:	601a      	str	r2, [r3, #0]
}
    1626:	bf00      	nop
    1628:	3714      	adds	r7, #20
    162a:	46bd      	mov	sp, r7
    162c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1630:	4770      	bx	lr

00001632 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    1632:	b480      	push	{r7}
    1634:	b085      	sub	sp, #20
    1636:	af00      	add	r7, sp, #0
    1638:	60f8      	str	r0, [r7, #12]
    163a:	460b      	mov	r3, r1
    163c:	607a      	str	r2, [r7, #4]
    163e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1640:	7afb      	ldrb	r3, [r7, #11]
    1642:	68fa      	ldr	r2, [r7, #12]
    1644:	01db      	lsls	r3, r3, #7
    1646:	4413      	add	r3, r2
    1648:	3314      	adds	r3, #20
    164a:	687a      	ldr	r2, [r7, #4]
    164c:	601a      	str	r2, [r3, #0]
}
    164e:	bf00      	nop
    1650:	3714      	adds	r7, #20
    1652:	46bd      	mov	sp, r7
    1654:	f85d 7b04 	ldr.w	r7, [sp], #4
    1658:	4770      	bx	lr

0000165a <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    165a:	b480      	push	{r7}
    165c:	b085      	sub	sp, #20
    165e:	af00      	add	r7, sp, #0
    1660:	6078      	str	r0, [r7, #4]
    1662:	4608      	mov	r0, r1
    1664:	4611      	mov	r1, r2
    1666:	461a      	mov	r2, r3
    1668:	4603      	mov	r3, r0
    166a:	70fb      	strb	r3, [r7, #3]
    166c:	460b      	mov	r3, r1
    166e:	70bb      	strb	r3, [r7, #2]
    1670:	4613      	mov	r3, r2
    1672:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1674:	78fa      	ldrb	r2, [r7, #3]
    1676:	78bb      	ldrb	r3, [r7, #2]
    1678:	6879      	ldr	r1, [r7, #4]
    167a:	01d2      	lsls	r2, r2, #7
    167c:	440a      	add	r2, r1
    167e:	4413      	add	r3, r2
    1680:	3330      	adds	r3, #48	; 0x30
    1682:	781b      	ldrb	r3, [r3, #0]
    1684:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1686:	7bfb      	ldrb	r3, [r7, #15]
    1688:	f023 030f 	bic.w	r3, r3, #15
    168c:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    168e:	787b      	ldrb	r3, [r7, #1]
    1690:	f003 030f 	and.w	r3, r3, #15
    1694:	b2da      	uxtb	r2, r3
    1696:	7bfb      	ldrb	r3, [r7, #15]
    1698:	4313      	orrs	r3, r2
    169a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    169c:	78fa      	ldrb	r2, [r7, #3]
    169e:	78bb      	ldrb	r3, [r7, #2]
    16a0:	6879      	ldr	r1, [r7, #4]
    16a2:	01d2      	lsls	r2, r2, #7
    16a4:	440a      	add	r2, r1
    16a6:	4413      	add	r3, r2
    16a8:	3330      	adds	r3, #48	; 0x30
    16aa:	7bfa      	ldrb	r2, [r7, #15]
    16ac:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    16ae:	bf00      	nop
    16b0:	3714      	adds	r7, #20
    16b2:	46bd      	mov	sp, r7
    16b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    16b8:	4770      	bx	lr

000016ba <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
    16ba:	b480      	push	{r7}
    16bc:	b085      	sub	sp, #20
    16be:	af00      	add	r7, sp, #0
    16c0:	6078      	str	r0, [r7, #4]
    16c2:	4608      	mov	r0, r1
    16c4:	4611      	mov	r1, r2
    16c6:	461a      	mov	r2, r3
    16c8:	4603      	mov	r3, r0
    16ca:	70fb      	strb	r3, [r7, #3]
    16cc:	460b      	mov	r3, r1
    16ce:	70bb      	strb	r3, [r7, #2]
    16d0:	4613      	mov	r3, r2
    16d2:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    16d4:	78fa      	ldrb	r2, [r7, #3]
    16d6:	78bb      	ldrb	r3, [r7, #2]
    16d8:	6879      	ldr	r1, [r7, #4]
    16da:	01d2      	lsls	r2, r2, #7
    16dc:	440a      	add	r2, r1
    16de:	4413      	add	r3, r2
    16e0:	3330      	adds	r3, #48	; 0x30
    16e2:	781b      	ldrb	r3, [r3, #0]
    16e4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    16e6:	7bfb      	ldrb	r3, [r7, #15]
    16e8:	f003 030f 	and.w	r3, r3, #15
    16ec:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    16ee:	787b      	ldrb	r3, [r7, #1]
    16f0:	011b      	lsls	r3, r3, #4
    16f2:	b2da      	uxtb	r2, r3
    16f4:	7bfb      	ldrb	r3, [r7, #15]
    16f6:	4313      	orrs	r3, r2
    16f8:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    16fa:	78fa      	ldrb	r2, [r7, #3]
    16fc:	78bb      	ldrb	r3, [r7, #2]
    16fe:	6879      	ldr	r1, [r7, #4]
    1700:	01d2      	lsls	r2, r2, #7
    1702:	440a      	add	r2, r1
    1704:	4413      	add	r3, r2
    1706:	3330      	adds	r3, #48	; 0x30
    1708:	7bfa      	ldrb	r2, [r7, #15]
    170a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    170c:	bf00      	nop
    170e:	3714      	adds	r7, #20
    1710:	46bd      	mov	sp, r7
    1712:	f85d 7b04 	ldr.w	r7, [sp], #4
    1716:	4770      	bx	lr

00001718 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
    1718:	b480      	push	{r7}
    171a:	b085      	sub	sp, #20
    171c:	af00      	add	r7, sp, #0
    171e:	6078      	str	r0, [r7, #4]
    1720:	4608      	mov	r0, r1
    1722:	4611      	mov	r1, r2
    1724:	461a      	mov	r2, r3
    1726:	4603      	mov	r3, r0
    1728:	70fb      	strb	r3, [r7, #3]
    172a:	460b      	mov	r3, r1
    172c:	70bb      	strb	r3, [r7, #2]
    172e:	4613      	mov	r3, r2
    1730:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1732:	78fa      	ldrb	r2, [r7, #3]
    1734:	78bb      	ldrb	r3, [r7, #2]
    1736:	6879      	ldr	r1, [r7, #4]
    1738:	01d2      	lsls	r2, r2, #7
    173a:	440a      	add	r2, r1
    173c:	4413      	add	r3, r2
    173e:	3340      	adds	r3, #64	; 0x40
    1740:	781b      	ldrb	r3, [r3, #0]
    1742:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1744:	7bfb      	ldrb	r3, [r7, #15]
    1746:	f023 0301 	bic.w	r3, r3, #1
    174a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    174c:	787a      	ldrb	r2, [r7, #1]
    174e:	7bfb      	ldrb	r3, [r7, #15]
    1750:	4313      	orrs	r3, r2
    1752:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1754:	78fa      	ldrb	r2, [r7, #3]
    1756:	78bb      	ldrb	r3, [r7, #2]
    1758:	6879      	ldr	r1, [r7, #4]
    175a:	01d2      	lsls	r2, r2, #7
    175c:	440a      	add	r2, r1
    175e:	4413      	add	r3, r2
    1760:	3340      	adds	r3, #64	; 0x40
    1762:	7bfa      	ldrb	r2, [r7, #15]
    1764:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1766:	bf00      	nop
    1768:	3714      	adds	r7, #20
    176a:	46bd      	mov	sp, r7
    176c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1770:	4770      	bx	lr

00001772 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    1772:	b490      	push	{r4, r7}
    1774:	b082      	sub	sp, #8
    1776:	af00      	add	r7, sp, #0
    1778:	6078      	str	r0, [r7, #4]
    177a:	460b      	mov	r3, r1
    177c:	70fb      	strb	r3, [r7, #3]
    177e:	4613      	mov	r3, r2
    1780:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1782:	78fa      	ldrb	r2, [r7, #3]
    1784:	78bb      	ldrb	r3, [r7, #2]
    1786:	78f8      	ldrb	r0, [r7, #3]
    1788:	78b9      	ldrb	r1, [r7, #2]
    178a:	687c      	ldr	r4, [r7, #4]
    178c:	01c0      	lsls	r0, r0, #7
    178e:	4420      	add	r0, r4
    1790:	4401      	add	r1, r0
    1792:	3140      	adds	r1, #64	; 0x40
    1794:	7809      	ldrb	r1, [r1, #0]
    1796:	b2c9      	uxtb	r1, r1
    1798:	f041 0104 	orr.w	r1, r1, #4
    179c:	b2c8      	uxtb	r0, r1
    179e:	6879      	ldr	r1, [r7, #4]
    17a0:	01d2      	lsls	r2, r2, #7
    17a2:	440a      	add	r2, r1
    17a4:	4413      	add	r3, r2
    17a6:	3340      	adds	r3, #64	; 0x40
    17a8:	4602      	mov	r2, r0
    17aa:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    17ac:	bf00      	nop
    17ae:	3708      	adds	r7, #8
    17b0:	46bd      	mov	sp, r7
    17b2:	bc90      	pop	{r4, r7}
    17b4:	4770      	bx	lr

000017b6 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
    17b6:	b490      	push	{r4, r7}
    17b8:	b082      	sub	sp, #8
    17ba:	af00      	add	r7, sp, #0
    17bc:	6078      	str	r0, [r7, #4]
    17be:	460b      	mov	r3, r1
    17c0:	70fb      	strb	r3, [r7, #3]
    17c2:	4613      	mov	r3, r2
    17c4:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    17c6:	78fa      	ldrb	r2, [r7, #3]
    17c8:	78bb      	ldrb	r3, [r7, #2]
    17ca:	78f8      	ldrb	r0, [r7, #3]
    17cc:	78b9      	ldrb	r1, [r7, #2]
    17ce:	687c      	ldr	r4, [r7, #4]
    17d0:	01c0      	lsls	r0, r0, #7
    17d2:	4420      	add	r0, r4
    17d4:	4401      	add	r1, r0
    17d6:	3140      	adds	r1, #64	; 0x40
    17d8:	7809      	ldrb	r1, [r1, #0]
    17da:	b2c9      	uxtb	r1, r1
    17dc:	f021 0104 	bic.w	r1, r1, #4
    17e0:	b2c8      	uxtb	r0, r1
    17e2:	6879      	ldr	r1, [r7, #4]
    17e4:	01d2      	lsls	r2, r2, #7
    17e6:	440a      	add	r2, r1
    17e8:	4413      	add	r3, r2
    17ea:	3340      	adds	r3, #64	; 0x40
    17ec:	4602      	mov	r2, r0
    17ee:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    17f0:	bf00      	nop
    17f2:	3708      	adds	r7, #8
    17f4:	46bd      	mov	sp, r7
    17f6:	bc90      	pop	{r4, r7}
    17f8:	4770      	bx	lr

000017fa <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
    17fa:	b480      	push	{r7}
    17fc:	b085      	sub	sp, #20
    17fe:	af00      	add	r7, sp, #0
    1800:	60f8      	str	r0, [r7, #12]
    1802:	460b      	mov	r3, r1
    1804:	607a      	str	r2, [r7, #4]
    1806:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1808:	7afb      	ldrb	r3, [r7, #11]
    180a:	68fa      	ldr	r2, [r7, #12]
    180c:	01db      	lsls	r3, r3, #7
    180e:	4413      	add	r3, r2
    1810:	3328      	adds	r3, #40	; 0x28
    1812:	687a      	ldr	r2, [r7, #4]
    1814:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
    1816:	bf00      	nop
    1818:	3714      	adds	r7, #20
    181a:	46bd      	mov	sp, r7
    181c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1820:	4770      	bx	lr
	...

00001824 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
    1824:	b580      	push	{r7, lr}
    1826:	b082      	sub	sp, #8
    1828:	af00      	add	r7, sp, #0
    182a:	4603      	mov	r3, r0
    182c:	6039      	str	r1, [r7, #0]
    182e:	71fb      	strb	r3, [r7, #7]
    1830:	4613      	mov	r3, r2
    1832:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    1834:	79bb      	ldrb	r3, [r7, #6]
    1836:	2b01      	cmp	r3, #1
    1838:	d01c      	beq.n	1874 <_gpio_set_direction+0x50>
    183a:	2b02      	cmp	r3, #2
    183c:	d037      	beq.n	18ae <_gpio_set_direction+0x8a>
    183e:	2b00      	cmp	r3, #0
    1840:	d14e      	bne.n	18e0 <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1842:	79fb      	ldrb	r3, [r7, #7]
    1844:	683a      	ldr	r2, [r7, #0]
    1846:	4619      	mov	r1, r3
    1848:	482a      	ldr	r0, [pc, #168]	; (18f4 <_gpio_set_direction+0xd0>)
    184a:	4b2b      	ldr	r3, [pc, #172]	; (18f8 <_gpio_set_direction+0xd4>)
    184c:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    184e:	683b      	ldr	r3, [r7, #0]
    1850:	b29b      	uxth	r3, r3
    1852:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    1856:	79fb      	ldrb	r3, [r7, #7]
    1858:	4619      	mov	r1, r3
    185a:	4826      	ldr	r0, [pc, #152]	; (18f4 <_gpio_set_direction+0xd0>)
    185c:	4b27      	ldr	r3, [pc, #156]	; (18fc <_gpio_set_direction+0xd8>)
    185e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1860:	683b      	ldr	r3, [r7, #0]
    1862:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    1864:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    1868:	79fb      	ldrb	r3, [r7, #7]
    186a:	4619      	mov	r1, r3
    186c:	4821      	ldr	r0, [pc, #132]	; (18f4 <_gpio_set_direction+0xd0>)
    186e:	4b23      	ldr	r3, [pc, #140]	; (18fc <_gpio_set_direction+0xd8>)
    1870:	4798      	blx	r3
		break;
    1872:	e03a      	b.n	18ea <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
    1874:	79fb      	ldrb	r3, [r7, #7]
    1876:	683a      	ldr	r2, [r7, #0]
    1878:	4619      	mov	r1, r3
    187a:	481e      	ldr	r0, [pc, #120]	; (18f4 <_gpio_set_direction+0xd0>)
    187c:	4b1e      	ldr	r3, [pc, #120]	; (18f8 <_gpio_set_direction+0xd4>)
    187e:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1880:	683b      	ldr	r3, [r7, #0]
    1882:	b29b      	uxth	r3, r3
    1884:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    1888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    188c:	79f9      	ldrb	r1, [r7, #7]
    188e:	461a      	mov	r2, r3
    1890:	4818      	ldr	r0, [pc, #96]	; (18f4 <_gpio_set_direction+0xd0>)
    1892:	4b1a      	ldr	r3, [pc, #104]	; (18fc <_gpio_set_direction+0xd8>)
    1894:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
    1896:	683b      	ldr	r3, [r7, #0]
    1898:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    189a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    189e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    18a2:	79f9      	ldrb	r1, [r7, #7]
    18a4:	461a      	mov	r2, r3
    18a6:	4813      	ldr	r0, [pc, #76]	; (18f4 <_gpio_set_direction+0xd0>)
    18a8:	4b14      	ldr	r3, [pc, #80]	; (18fc <_gpio_set_direction+0xd8>)
    18aa:	4798      	blx	r3
		break;
    18ac:	e01d      	b.n	18ea <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
    18ae:	79fb      	ldrb	r3, [r7, #7]
    18b0:	683a      	ldr	r2, [r7, #0]
    18b2:	4619      	mov	r1, r3
    18b4:	480f      	ldr	r0, [pc, #60]	; (18f4 <_gpio_set_direction+0xd0>)
    18b6:	4b12      	ldr	r3, [pc, #72]	; (1900 <_gpio_set_direction+0xdc>)
    18b8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    18ba:	683b      	ldr	r3, [r7, #0]
    18bc:	b29b      	uxth	r3, r3
    18be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    18c2:	79fb      	ldrb	r3, [r7, #7]
    18c4:	4619      	mov	r1, r3
    18c6:	480b      	ldr	r0, [pc, #44]	; (18f4 <_gpio_set_direction+0xd0>)
    18c8:	4b0c      	ldr	r3, [pc, #48]	; (18fc <_gpio_set_direction+0xd8>)
    18ca:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    18cc:	683b      	ldr	r3, [r7, #0]
    18ce:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    18d0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    18d4:	79fb      	ldrb	r3, [r7, #7]
    18d6:	4619      	mov	r1, r3
    18d8:	4806      	ldr	r0, [pc, #24]	; (18f4 <_gpio_set_direction+0xd0>)
    18da:	4b08      	ldr	r3, [pc, #32]	; (18fc <_gpio_set_direction+0xd8>)
    18dc:	4798      	blx	r3
		break;
    18de:	e004      	b.n	18ea <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
    18e0:	2246      	movs	r2, #70	; 0x46
    18e2:	4908      	ldr	r1, [pc, #32]	; (1904 <_gpio_set_direction+0xe0>)
    18e4:	2000      	movs	r0, #0
    18e6:	4b08      	ldr	r3, [pc, #32]	; (1908 <_gpio_set_direction+0xe4>)
    18e8:	4798      	blx	r3
	}
}
    18ea:	bf00      	nop
    18ec:	3708      	adds	r7, #8
    18ee:	46bd      	mov	sp, r7
    18f0:	bd80      	pop	{r7, pc}
    18f2:	bf00      	nop
    18f4:	41008000 	.word	0x41008000
    18f8:	000015e3 	.word	0x000015e3
    18fc:	000017fb 	.word	0x000017fb
    1900:	000015bb 	.word	0x000015bb
    1904:	00013a1c 	.word	0x00013a1c
    1908:	0000405d 	.word	0x0000405d

0000190c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    190c:	b580      	push	{r7, lr}
    190e:	b082      	sub	sp, #8
    1910:	af00      	add	r7, sp, #0
    1912:	4603      	mov	r3, r0
    1914:	6039      	str	r1, [r7, #0]
    1916:	71fb      	strb	r3, [r7, #7]
    1918:	4613      	mov	r3, r2
    191a:	71bb      	strb	r3, [r7, #6]
	if (level) {
    191c:	79bb      	ldrb	r3, [r7, #6]
    191e:	2b00      	cmp	r3, #0
    1920:	d006      	beq.n	1930 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    1922:	79fb      	ldrb	r3, [r7, #7]
    1924:	683a      	ldr	r2, [r7, #0]
    1926:	4619      	mov	r1, r3
    1928:	4806      	ldr	r0, [pc, #24]	; (1944 <_gpio_set_level+0x38>)
    192a:	4b07      	ldr	r3, [pc, #28]	; (1948 <_gpio_set_level+0x3c>)
    192c:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    192e:	e005      	b.n	193c <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    1930:	79fb      	ldrb	r3, [r7, #7]
    1932:	683a      	ldr	r2, [r7, #0]
    1934:	4619      	mov	r1, r3
    1936:	4803      	ldr	r0, [pc, #12]	; (1944 <_gpio_set_level+0x38>)
    1938:	4b04      	ldr	r3, [pc, #16]	; (194c <_gpio_set_level+0x40>)
    193a:	4798      	blx	r3
}
    193c:	bf00      	nop
    193e:	3708      	adds	r7, #8
    1940:	46bd      	mov	sp, r7
    1942:	bd80      	pop	{r7, pc}
    1944:	41008000 	.word	0x41008000
    1948:	0000160b 	.word	0x0000160b
    194c:	00001633 	.word	0x00001633

00001950 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
    1950:	b580      	push	{r7, lr}
    1952:	b082      	sub	sp, #8
    1954:	af00      	add	r7, sp, #0
    1956:	4603      	mov	r3, r0
    1958:	71fb      	strb	r3, [r7, #7]
    195a:	460b      	mov	r3, r1
    195c:	71bb      	strb	r3, [r7, #6]
    195e:	4613      	mov	r3, r2
    1960:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
    1962:	797b      	ldrb	r3, [r7, #5]
    1964:	2b01      	cmp	r3, #1
    1966:	d00a      	beq.n	197e <_gpio_set_pin_pull_mode+0x2e>
    1968:	2b02      	cmp	r3, #2
    196a:	d01f      	beq.n	19ac <_gpio_set_pin_pull_mode+0x5c>
    196c:	2b00      	cmp	r3, #0
    196e:	d134      	bne.n	19da <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
    1970:	79ba      	ldrb	r2, [r7, #6]
    1972:	79fb      	ldrb	r3, [r7, #7]
    1974:	4619      	mov	r1, r3
    1976:	481e      	ldr	r0, [pc, #120]	; (19f0 <_gpio_set_pin_pull_mode+0xa0>)
    1978:	4b1e      	ldr	r3, [pc, #120]	; (19f4 <_gpio_set_pin_pull_mode+0xa4>)
    197a:	4798      	blx	r3
		break;
    197c:	e033      	b.n	19e6 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    197e:	79bb      	ldrb	r3, [r7, #6]
    1980:	2201      	movs	r2, #1
    1982:	409a      	lsls	r2, r3
    1984:	79fb      	ldrb	r3, [r7, #7]
    1986:	4619      	mov	r1, r3
    1988:	4819      	ldr	r0, [pc, #100]	; (19f0 <_gpio_set_pin_pull_mode+0xa0>)
    198a:	4b1b      	ldr	r3, [pc, #108]	; (19f8 <_gpio_set_pin_pull_mode+0xa8>)
    198c:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    198e:	79ba      	ldrb	r2, [r7, #6]
    1990:	79fb      	ldrb	r3, [r7, #7]
    1992:	4619      	mov	r1, r3
    1994:	4816      	ldr	r0, [pc, #88]	; (19f0 <_gpio_set_pin_pull_mode+0xa0>)
    1996:	4b19      	ldr	r3, [pc, #100]	; (19fc <_gpio_set_pin_pull_mode+0xac>)
    1998:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
    199a:	79bb      	ldrb	r3, [r7, #6]
    199c:	2201      	movs	r2, #1
    199e:	409a      	lsls	r2, r3
    19a0:	79fb      	ldrb	r3, [r7, #7]
    19a2:	4619      	mov	r1, r3
    19a4:	4812      	ldr	r0, [pc, #72]	; (19f0 <_gpio_set_pin_pull_mode+0xa0>)
    19a6:	4b16      	ldr	r3, [pc, #88]	; (1a00 <_gpio_set_pin_pull_mode+0xb0>)
    19a8:	4798      	blx	r3
		break;
    19aa:	e01c      	b.n	19e6 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    19ac:	79bb      	ldrb	r3, [r7, #6]
    19ae:	2201      	movs	r2, #1
    19b0:	409a      	lsls	r2, r3
    19b2:	79fb      	ldrb	r3, [r7, #7]
    19b4:	4619      	mov	r1, r3
    19b6:	480e      	ldr	r0, [pc, #56]	; (19f0 <_gpio_set_pin_pull_mode+0xa0>)
    19b8:	4b0f      	ldr	r3, [pc, #60]	; (19f8 <_gpio_set_pin_pull_mode+0xa8>)
    19ba:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
    19bc:	79ba      	ldrb	r2, [r7, #6]
    19be:	79fb      	ldrb	r3, [r7, #7]
    19c0:	4619      	mov	r1, r3
    19c2:	480b      	ldr	r0, [pc, #44]	; (19f0 <_gpio_set_pin_pull_mode+0xa0>)
    19c4:	4b0d      	ldr	r3, [pc, #52]	; (19fc <_gpio_set_pin_pull_mode+0xac>)
    19c6:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
    19c8:	79bb      	ldrb	r3, [r7, #6]
    19ca:	2201      	movs	r2, #1
    19cc:	409a      	lsls	r2, r3
    19ce:	79fb      	ldrb	r3, [r7, #7]
    19d0:	4619      	mov	r1, r3
    19d2:	4807      	ldr	r0, [pc, #28]	; (19f0 <_gpio_set_pin_pull_mode+0xa0>)
    19d4:	4b0b      	ldr	r3, [pc, #44]	; (1a04 <_gpio_set_pin_pull_mode+0xb4>)
    19d6:	4798      	blx	r3
		break;
    19d8:	e005      	b.n	19e6 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
    19da:	2289      	movs	r2, #137	; 0x89
    19dc:	490a      	ldr	r1, [pc, #40]	; (1a08 <_gpio_set_pin_pull_mode+0xb8>)
    19de:	2000      	movs	r0, #0
    19e0:	4b0a      	ldr	r3, [pc, #40]	; (1a0c <_gpio_set_pin_pull_mode+0xbc>)
    19e2:	4798      	blx	r3
		break;
    19e4:	bf00      	nop
	}
}
    19e6:	bf00      	nop
    19e8:	3708      	adds	r7, #8
    19ea:	46bd      	mov	sp, r7
    19ec:	bd80      	pop	{r7, pc}
    19ee:	bf00      	nop
    19f0:	41008000 	.word	0x41008000
    19f4:	000017b7 	.word	0x000017b7
    19f8:	000015e3 	.word	0x000015e3
    19fc:	00001773 	.word	0x00001773
    1a00:	0000160b 	.word	0x0000160b
    1a04:	00001633 	.word	0x00001633
    1a08:	00013a1c 	.word	0x00013a1c
    1a0c:	0000405d 	.word	0x0000405d

00001a10 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    1a10:	b590      	push	{r4, r7, lr}
    1a12:	b085      	sub	sp, #20
    1a14:	af00      	add	r7, sp, #0
    1a16:	6078      	str	r0, [r7, #4]
    1a18:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    1a1a:	687b      	ldr	r3, [r7, #4]
    1a1c:	095b      	lsrs	r3, r3, #5
    1a1e:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    1a20:	687b      	ldr	r3, [r7, #4]
    1a22:	b2db      	uxtb	r3, r3
    1a24:	f003 031f 	and.w	r3, r3, #31
    1a28:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
    1a2a:	683b      	ldr	r3, [r7, #0]
    1a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
    1a30:	d106      	bne.n	1a40 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    1a32:	7bba      	ldrb	r2, [r7, #14]
    1a34:	7bf9      	ldrb	r1, [r7, #15]
    1a36:	2300      	movs	r3, #0
    1a38:	4812      	ldr	r0, [pc, #72]	; (1a84 <_gpio_set_pin_function+0x74>)
    1a3a:	4c13      	ldr	r4, [pc, #76]	; (1a88 <_gpio_set_pin_function+0x78>)
    1a3c:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    1a3e:	e01d      	b.n	1a7c <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    1a40:	7bba      	ldrb	r2, [r7, #14]
    1a42:	7bf9      	ldrb	r1, [r7, #15]
    1a44:	2301      	movs	r3, #1
    1a46:	480f      	ldr	r0, [pc, #60]	; (1a84 <_gpio_set_pin_function+0x74>)
    1a48:	4c0f      	ldr	r4, [pc, #60]	; (1a88 <_gpio_set_pin_function+0x78>)
    1a4a:	47a0      	blx	r4
		if (pin & 1) {
    1a4c:	7bbb      	ldrb	r3, [r7, #14]
    1a4e:	f003 0301 	and.w	r3, r3, #1
    1a52:	2b00      	cmp	r3, #0
    1a54:	d009      	beq.n	1a6a <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    1a56:	7bbb      	ldrb	r3, [r7, #14]
    1a58:	085b      	lsrs	r3, r3, #1
    1a5a:	b2da      	uxtb	r2, r3
    1a5c:	683b      	ldr	r3, [r7, #0]
    1a5e:	b2db      	uxtb	r3, r3
    1a60:	7bf9      	ldrb	r1, [r7, #15]
    1a62:	4808      	ldr	r0, [pc, #32]	; (1a84 <_gpio_set_pin_function+0x74>)
    1a64:	4c09      	ldr	r4, [pc, #36]	; (1a8c <_gpio_set_pin_function+0x7c>)
    1a66:	47a0      	blx	r4
}
    1a68:	e008      	b.n	1a7c <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    1a6a:	7bbb      	ldrb	r3, [r7, #14]
    1a6c:	085b      	lsrs	r3, r3, #1
    1a6e:	b2da      	uxtb	r2, r3
    1a70:	683b      	ldr	r3, [r7, #0]
    1a72:	b2db      	uxtb	r3, r3
    1a74:	7bf9      	ldrb	r1, [r7, #15]
    1a76:	4803      	ldr	r0, [pc, #12]	; (1a84 <_gpio_set_pin_function+0x74>)
    1a78:	4c05      	ldr	r4, [pc, #20]	; (1a90 <_gpio_set_pin_function+0x80>)
    1a7a:	47a0      	blx	r4
}
    1a7c:	bf00      	nop
    1a7e:	3714      	adds	r7, #20
    1a80:	46bd      	mov	sp, r7
    1a82:	bd90      	pop	{r4, r7, pc}
    1a84:	41008000 	.word	0x41008000
    1a88:	00001719 	.word	0x00001719
    1a8c:	000016bb 	.word	0x000016bb
    1a90:	0000165b 	.word	0x0000165b

00001a94 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
    1a94:	b580      	push	{r7, lr}
    1a96:	b082      	sub	sp, #8
    1a98:	af00      	add	r7, sp, #0
    1a9a:	4603      	mov	r3, r0
    1a9c:	460a      	mov	r2, r1
    1a9e:	71fb      	strb	r3, [r7, #7]
    1aa0:	4613      	mov	r3, r2
    1aa2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    1aa4:	79fb      	ldrb	r3, [r7, #7]
    1aa6:	095b      	lsrs	r3, r3, #5
    1aa8:	b2d8      	uxtb	r0, r3
    1aaa:	79fb      	ldrb	r3, [r7, #7]
    1aac:	f003 031f 	and.w	r3, r3, #31
    1ab0:	b2db      	uxtb	r3, r3
    1ab2:	79ba      	ldrb	r2, [r7, #6]
    1ab4:	4619      	mov	r1, r3
    1ab6:	4b03      	ldr	r3, [pc, #12]	; (1ac4 <gpio_set_pin_pull_mode+0x30>)
    1ab8:	4798      	blx	r3
}
    1aba:	bf00      	nop
    1abc:	3708      	adds	r7, #8
    1abe:	46bd      	mov	sp, r7
    1ac0:	bd80      	pop	{r7, pc}
    1ac2:	bf00      	nop
    1ac4:	00001951 	.word	0x00001951

00001ac8 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
    1ac8:	b580      	push	{r7, lr}
    1aca:	b082      	sub	sp, #8
    1acc:	af00      	add	r7, sp, #0
    1ace:	6078      	str	r0, [r7, #4]
    1ad0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    1ad2:	6839      	ldr	r1, [r7, #0]
    1ad4:	6878      	ldr	r0, [r7, #4]
    1ad6:	4b03      	ldr	r3, [pc, #12]	; (1ae4 <gpio_set_pin_function+0x1c>)
    1ad8:	4798      	blx	r3
}
    1ada:	bf00      	nop
    1adc:	3708      	adds	r7, #8
    1ade:	46bd      	mov	sp, r7
    1ae0:	bd80      	pop	{r7, pc}
    1ae2:	bf00      	nop
    1ae4:	00001a11 	.word	0x00001a11

00001ae8 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
    1ae8:	b580      	push	{r7, lr}
    1aea:	b082      	sub	sp, #8
    1aec:	af00      	add	r7, sp, #0
    1aee:	4603      	mov	r3, r0
    1af0:	460a      	mov	r2, r1
    1af2:	71fb      	strb	r3, [r7, #7]
    1af4:	4613      	mov	r3, r2
    1af6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1af8:	79fb      	ldrb	r3, [r7, #7]
    1afa:	095b      	lsrs	r3, r3, #5
    1afc:	b2d8      	uxtb	r0, r3
    1afe:	79fb      	ldrb	r3, [r7, #7]
    1b00:	f003 031f 	and.w	r3, r3, #31
    1b04:	2201      	movs	r2, #1
    1b06:	fa02 f303 	lsl.w	r3, r2, r3
    1b0a:	79ba      	ldrb	r2, [r7, #6]
    1b0c:	4619      	mov	r1, r3
    1b0e:	4b03      	ldr	r3, [pc, #12]	; (1b1c <gpio_set_pin_direction+0x34>)
    1b10:	4798      	blx	r3
}
    1b12:	bf00      	nop
    1b14:	3708      	adds	r7, #8
    1b16:	46bd      	mov	sp, r7
    1b18:	bd80      	pop	{r7, pc}
    1b1a:	bf00      	nop
    1b1c:	00001825 	.word	0x00001825

00001b20 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    1b20:	b580      	push	{r7, lr}
    1b22:	b082      	sub	sp, #8
    1b24:	af00      	add	r7, sp, #0
    1b26:	4603      	mov	r3, r0
    1b28:	460a      	mov	r2, r1
    1b2a:	71fb      	strb	r3, [r7, #7]
    1b2c:	4613      	mov	r3, r2
    1b2e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    1b30:	79fb      	ldrb	r3, [r7, #7]
    1b32:	095b      	lsrs	r3, r3, #5
    1b34:	b2d8      	uxtb	r0, r3
    1b36:	79fb      	ldrb	r3, [r7, #7]
    1b38:	f003 031f 	and.w	r3, r3, #31
    1b3c:	2201      	movs	r2, #1
    1b3e:	fa02 f303 	lsl.w	r3, r2, r3
    1b42:	79ba      	ldrb	r2, [r7, #6]
    1b44:	4619      	mov	r1, r3
    1b46:	4b03      	ldr	r3, [pc, #12]	; (1b54 <gpio_set_pin_level+0x34>)
    1b48:	4798      	blx	r3
}
    1b4a:	bf00      	nop
    1b4c:	3708      	adds	r7, #8
    1b4e:	46bd      	mov	sp, r7
    1b50:	bd80      	pop	{r7, pc}
    1b52:	bf00      	nop
    1b54:	0000190d 	.word	0x0000190d

00001b58 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
    1b58:	b580      	push	{r7, lr}
    1b5a:	af00      	add	r7, sp, #0
	_init_chip();
    1b5c:	4b01      	ldr	r3, [pc, #4]	; (1b64 <init_mcu+0xc>)
    1b5e:	4798      	blx	r3
}
    1b60:	bf00      	nop
    1b62:	bd80      	pop	{r7, pc}
    1b64:	00004c65 	.word	0x00004c65

00001b68 <wdt_init>:
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
    1b68:	b580      	push	{r7, lr}
    1b6a:	b082      	sub	sp, #8
    1b6c:	af00      	add	r7, sp, #0
    1b6e:	6078      	str	r0, [r7, #4]
    1b70:	6039      	str	r1, [r7, #0]
	ASSERT(wdt && hw);
    1b72:	687b      	ldr	r3, [r7, #4]
    1b74:	2b00      	cmp	r3, #0
    1b76:	d004      	beq.n	1b82 <wdt_init+0x1a>
    1b78:	683b      	ldr	r3, [r7, #0]
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d001      	beq.n	1b82 <wdt_init+0x1a>
    1b7e:	2301      	movs	r3, #1
    1b80:	e000      	b.n	1b84 <wdt_init+0x1c>
    1b82:	2300      	movs	r3, #0
    1b84:	f003 0301 	and.w	r3, r3, #1
    1b88:	b2db      	uxtb	r3, r3
    1b8a:	2248      	movs	r2, #72	; 0x48
    1b8c:	4907      	ldr	r1, [pc, #28]	; (1bac <wdt_init+0x44>)
    1b8e:	4618      	mov	r0, r3
    1b90:	4b07      	ldr	r3, [pc, #28]	; (1bb0 <wdt_init+0x48>)
    1b92:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    1b94:	687b      	ldr	r3, [r7, #4]
    1b96:	683a      	ldr	r2, [r7, #0]
    1b98:	601a      	str	r2, [r3, #0]

	return _wdt_init(&wdt->dev);
    1b9a:	687b      	ldr	r3, [r7, #4]
    1b9c:	4618      	mov	r0, r3
    1b9e:	4b05      	ldr	r3, [pc, #20]	; (1bb4 <wdt_init+0x4c>)
    1ba0:	4798      	blx	r3
    1ba2:	4603      	mov	r3, r0
}
    1ba4:	4618      	mov	r0, r3
    1ba6:	3708      	adds	r7, #8
    1ba8:	46bd      	mov	sp, r7
    1baa:	bd80      	pop	{r7, pc}
    1bac:	00013a38 	.word	0x00013a38
    1bb0:	0000405d 	.word	0x0000405d
    1bb4:	0000b6a1 	.word	0x0000b6a1

00001bb8 <CRC_CALC_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_CALC_init(void)
{
    1bb8:	b580      	push	{r7, lr}
    1bba:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
    1bbc:	4804      	ldr	r0, [pc, #16]	; (1bd0 <CRC_CALC_init+0x18>)
    1bbe:	4b05      	ldr	r3, [pc, #20]	; (1bd4 <CRC_CALC_init+0x1c>)
    1bc0:	4798      	blx	r3
	crc_sync_init(&CRC_CALC, DSU);
    1bc2:	4905      	ldr	r1, [pc, #20]	; (1bd8 <CRC_CALC_init+0x20>)
    1bc4:	4805      	ldr	r0, [pc, #20]	; (1bdc <CRC_CALC_init+0x24>)
    1bc6:	4b06      	ldr	r3, [pc, #24]	; (1be0 <CRC_CALC_init+0x28>)
    1bc8:	4798      	blx	r3
}
    1bca:	bf00      	nop
    1bcc:	bd80      	pop	{r7, pc}
    1bce:	bf00      	nop
    1bd0:	40000800 	.word	0x40000800
    1bd4:	000013db 	.word	0x000013db
    1bd8:	41002000 	.word	0x41002000
    1bdc:	20009fa4 	.word	0x20009fa4
    1be0:	000029a1 	.word	0x000029a1

00001be4 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
    1be4:	b580      	push	{r7, lr}
    1be6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1be8:	2244      	movs	r2, #68	; 0x44
    1bea:	2104      	movs	r1, #4
    1bec:	483f      	ldr	r0, [pc, #252]	; (1cec <EXTERNAL_IRQ_0_init+0x108>)
    1bee:	4b40      	ldr	r3, [pc, #256]	; (1cf0 <EXTERNAL_IRQ_0_init+0x10c>)
    1bf0:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
    1bf2:	4840      	ldr	r0, [pc, #256]	; (1cf4 <EXTERNAL_IRQ_0_init+0x110>)
    1bf4:	4b40      	ldr	r3, [pc, #256]	; (1cf8 <EXTERNAL_IRQ_0_init+0x114>)
    1bf6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(VBUS_DETECTED, GPIO_DIRECTION_IN);
    1bf8:	2101      	movs	r1, #1
    1bfa:	2040      	movs	r0, #64	; 0x40
    1bfc:	4b3f      	ldr	r3, [pc, #252]	; (1cfc <EXTERNAL_IRQ_0_init+0x118>)
    1bfe:	4798      	blx	r3

	gpio_set_pin_pull_mode(VBUS_DETECTED,
    1c00:	2100      	movs	r1, #0
    1c02:	2040      	movs	r0, #64	; 0x40
    1c04:	4b3e      	ldr	r3, [pc, #248]	; (1d00 <EXTERNAL_IRQ_0_init+0x11c>)
    1c06:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(VBUS_DETECTED, PINMUX_PC00A_EIC_EXTINT0);
    1c08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    1c0c:	2040      	movs	r0, #64	; 0x40
    1c0e:	4b3d      	ldr	r3, [pc, #244]	; (1d04 <EXTERNAL_IRQ_0_init+0x120>)
    1c10:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB01, GPIO_DIRECTION_IN);
    1c12:	2101      	movs	r1, #1
    1c14:	2021      	movs	r0, #33	; 0x21
    1c16:	4b39      	ldr	r3, [pc, #228]	; (1cfc <EXTERNAL_IRQ_0_init+0x118>)
    1c18:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB01,
    1c1a:	2100      	movs	r1, #0
    1c1c:	2021      	movs	r0, #33	; 0x21
    1c1e:	4b38      	ldr	r3, [pc, #224]	; (1d00 <EXTERNAL_IRQ_0_init+0x11c>)
    1c20:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB01, PINMUX_PB01A_EIC_EXTINT1);
    1c22:	f44f 1104 	mov.w	r1, #2162688	; 0x210000
    1c26:	2021      	movs	r0, #33	; 0x21
    1c28:	4b36      	ldr	r3, [pc, #216]	; (1d04 <EXTERNAL_IRQ_0_init+0x120>)
    1c2a:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PA03, GPIO_DIRECTION_IN);
    1c2c:	2101      	movs	r1, #1
    1c2e:	2003      	movs	r0, #3
    1c30:	4b32      	ldr	r3, [pc, #200]	; (1cfc <EXTERNAL_IRQ_0_init+0x118>)
    1c32:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA03,
    1c34:	2102      	movs	r1, #2
    1c36:	2003      	movs	r0, #3
    1c38:	4b31      	ldr	r3, [pc, #196]	; (1d00 <EXTERNAL_IRQ_0_init+0x11c>)
    1c3a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(PA03, PINMUX_PA03A_EIC_EXTINT3);
    1c3c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    1c40:	2003      	movs	r0, #3
    1c42:	4b30      	ldr	r3, [pc, #192]	; (1d04 <EXTERNAL_IRQ_0_init+0x120>)
    1c44:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV1CHANGED, GPIO_DIRECTION_IN);
    1c46:	2101      	movs	r1, #1
    1c48:	2004      	movs	r0, #4
    1c4a:	4b2c      	ldr	r3, [pc, #176]	; (1cfc <EXTERNAL_IRQ_0_init+0x118>)
    1c4c:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV1CHANGED,
    1c4e:	2102      	movs	r1, #2
    1c50:	2004      	movs	r0, #4
    1c52:	4b2b      	ldr	r3, [pc, #172]	; (1d00 <EXTERNAL_IRQ_0_init+0x11c>)
    1c54:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV1CHANGED, PINMUX_PA04A_EIC_EXTINT4);
    1c56:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    1c5a:	2004      	movs	r0, #4
    1c5c:	4b29      	ldr	r3, [pc, #164]	; (1d04 <EXTERNAL_IRQ_0_init+0x120>)
    1c5e:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(I2CFV2CHANGED, GPIO_DIRECTION_IN);
    1c60:	2101      	movs	r1, #1
    1c62:	2005      	movs	r0, #5
    1c64:	4b25      	ldr	r3, [pc, #148]	; (1cfc <EXTERNAL_IRQ_0_init+0x118>)
    1c66:	4798      	blx	r3

	gpio_set_pin_pull_mode(I2CFV2CHANGED,
    1c68:	2102      	movs	r1, #2
    1c6a:	2005      	movs	r0, #5
    1c6c:	4b24      	ldr	r3, [pc, #144]	; (1d00 <EXTERNAL_IRQ_0_init+0x11c>)
    1c6e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(I2CFV2CHANGED, PINMUX_PA05A_EIC_EXTINT5);
    1c70:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    1c74:	2005      	movs	r0, #5
    1c76:	4b23      	ldr	r3, [pc, #140]	; (1d04 <EXTERNAL_IRQ_0_init+0x120>)
    1c78:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR2Int, GPIO_DIRECTION_IN);
    1c7a:	2101      	movs	r1, #1
    1c7c:	2056      	movs	r0, #86	; 0x56
    1c7e:	4b1f      	ldr	r3, [pc, #124]	; (1cfc <EXTERNAL_IRQ_0_init+0x118>)
    1c80:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR2Int,
    1c82:	2102      	movs	r1, #2
    1c84:	2056      	movs	r0, #86	; 0x56
    1c86:	4b1e      	ldr	r3, [pc, #120]	; (1d00 <EXTERNAL_IRQ_0_init+0x11c>)
    1c88:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR2Int, PINMUX_PC22A_EIC_EXTINT6);
    1c8a:	f44f 01ac 	mov.w	r1, #5636096	; 0x560000
    1c8e:	2056      	movs	r0, #86	; 0x56
    1c90:	4b1c      	ldr	r3, [pc, #112]	; (1d04 <EXTERNAL_IRQ_0_init+0x120>)
    1c92:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(ARINCR1Int, GPIO_DIRECTION_IN);
    1c94:	2101      	movs	r1, #1
    1c96:	2057      	movs	r0, #87	; 0x57
    1c98:	4b18      	ldr	r3, [pc, #96]	; (1cfc <EXTERNAL_IRQ_0_init+0x118>)
    1c9a:	4798      	blx	r3

	gpio_set_pin_pull_mode(ARINCR1Int,
    1c9c:	2102      	movs	r1, #2
    1c9e:	2057      	movs	r0, #87	; 0x57
    1ca0:	4b17      	ldr	r3, [pc, #92]	; (1d00 <EXTERNAL_IRQ_0_init+0x11c>)
    1ca2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_DOWN);

	gpio_set_pin_function(ARINCR1Int, PINMUX_PC23A_EIC_EXTINT7);
    1ca4:	f44f 01ae 	mov.w	r1, #5701632	; 0x570000
    1ca8:	2057      	movs	r0, #87	; 0x57
    1caa:	4b16      	ldr	r3, [pc, #88]	; (1d04 <EXTERNAL_IRQ_0_init+0x120>)
    1cac:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_IN);
    1cae:	2101      	movs	r1, #1
    1cb0:	2028      	movs	r0, #40	; 0x28
    1cb2:	4b12      	ldr	r3, [pc, #72]	; (1cfc <EXTERNAL_IRQ_0_init+0x118>)
    1cb4:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB08,
    1cb6:	2100      	movs	r1, #0
    1cb8:	2028      	movs	r0, #40	; 0x28
    1cba:	4b11      	ldr	r3, [pc, #68]	; (1d00 <EXTERNAL_IRQ_0_init+0x11c>)
    1cbc:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08A_EIC_EXTINT8);
    1cbe:	f44f 1120 	mov.w	r1, #2621440	; 0x280000
    1cc2:	2028      	movs	r0, #40	; 0x28
    1cc4:	4b0f      	ldr	r3, [pc, #60]	; (1d04 <EXTERNAL_IRQ_0_init+0x120>)
    1cc6:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_IN);
    1cc8:	2101      	movs	r1, #1
    1cca:	2029      	movs	r0, #41	; 0x29
    1ccc:	4b0b      	ldr	r3, [pc, #44]	; (1cfc <EXTERNAL_IRQ_0_init+0x118>)
    1cce:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB09,
    1cd0:	2100      	movs	r1, #0
    1cd2:	2029      	movs	r0, #41	; 0x29
    1cd4:	4b0a      	ldr	r3, [pc, #40]	; (1d00 <EXTERNAL_IRQ_0_init+0x11c>)
    1cd6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB09, PINMUX_PB09A_EIC_EXTINT9);
    1cd8:	f44f 1124 	mov.w	r1, #2686976	; 0x290000
    1cdc:	2029      	movs	r0, #41	; 0x29
    1cde:	4b09      	ldr	r3, [pc, #36]	; (1d04 <EXTERNAL_IRQ_0_init+0x120>)
    1ce0:	4798      	blx	r3

	ext_irq_init();
    1ce2:	4b09      	ldr	r3, [pc, #36]	; (1d08 <EXTERNAL_IRQ_0_init+0x124>)
    1ce4:	4798      	blx	r3
}
    1ce6:	bf00      	nop
    1ce8:	bd80      	pop	{r7, pc}
    1cea:	bf00      	nop
    1cec:	40001c00 	.word	0x40001c00
    1cf0:	00001275 	.word	0x00001275
    1cf4:	40000800 	.word	0x40000800
    1cf8:	0000135b 	.word	0x0000135b
    1cfc:	00001ae9 	.word	0x00001ae9
    1d00:	00001a95 	.word	0x00001a95
    1d04:	00001ac9 	.word	0x00001ac9
    1d08:	00002a69 	.word	0x00002a69

00001d0c <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
    1d0c:	b580      	push	{r7, lr}
    1d0e:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_0, CONF_GCLK_EVSYS_CHANNEL_0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d10:	2244      	movs	r2, #68	; 0x44
    1d12:	210b      	movs	r1, #11
    1d14:	4807      	ldr	r0, [pc, #28]	; (1d34 <EVENT_SYSTEM_0_init+0x28>)
    1d16:	4b08      	ldr	r3, [pc, #32]	; (1d38 <EVENT_SYSTEM_0_init+0x2c>)
    1d18:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1d1a:	2244      	movs	r2, #68	; 0x44
    1d1c:	210c      	movs	r1, #12
    1d1e:	4805      	ldr	r0, [pc, #20]	; (1d34 <EVENT_SYSTEM_0_init+0x28>)
    1d20:	4b05      	ldr	r3, [pc, #20]	; (1d38 <EVENT_SYSTEM_0_init+0x2c>)
    1d22:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
    1d24:	4805      	ldr	r0, [pc, #20]	; (1d3c <EVENT_SYSTEM_0_init+0x30>)
    1d26:	4b06      	ldr	r3, [pc, #24]	; (1d40 <EVENT_SYSTEM_0_init+0x34>)
    1d28:	4798      	blx	r3

	event_system_init();
    1d2a:	4b06      	ldr	r3, [pc, #24]	; (1d44 <EVENT_SYSTEM_0_init+0x38>)
    1d2c:	4798      	blx	r3
}
    1d2e:	bf00      	nop
    1d30:	bd80      	pop	{r7, pc}
    1d32:	bf00      	nop
    1d34:	40001c00 	.word	0x40001c00
    1d38:	00001275 	.word	0x00001275
    1d3c:	40000800 	.word	0x40000800
    1d40:	000013fb 	.word	0x000013fb
    1d44:	00002a55 	.word	0x00002a55

00001d48 <QSPI_N25Q256_PORT_init>:

void QSPI_N25Q256_PORT_init(void)
{
    1d48:	b580      	push	{r7, lr}
    1d4a:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_IN);
    1d4c:	2101      	movs	r1, #1
    1d4e:	202b      	movs	r0, #43	; 0x2b
    1d50:	4b2b      	ldr	r3, [pc, #172]	; (1e00 <QSPI_N25Q256_PORT_init+0xb8>)
    1d52:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CS,
    1d54:	2100      	movs	r1, #0
    1d56:	202b      	movs	r0, #43	; 0x2b
    1d58:	4b2a      	ldr	r3, [pc, #168]	; (1e04 <QSPI_N25Q256_PORT_init+0xbc>)
    1d5a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CS, PINMUX_PB11H_QSPI_CS);
    1d5c:	492a      	ldr	r1, [pc, #168]	; (1e08 <QSPI_N25Q256_PORT_init+0xc0>)
    1d5e:	202b      	movs	r0, #43	; 0x2b
    1d60:	4b2a      	ldr	r3, [pc, #168]	; (1e0c <QSPI_N25Q256_PORT_init+0xc4>)
    1d62:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0,
    1d64:	2102      	movs	r1, #2
    1d66:	2008      	movs	r0, #8
    1d68:	4b25      	ldr	r3, [pc, #148]	; (1e00 <QSPI_N25Q256_PORT_init+0xb8>)
    1d6a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO0,
    1d6c:	2100      	movs	r1, #0
    1d6e:	2008      	movs	r0, #8
    1d70:	4b27      	ldr	r3, [pc, #156]	; (1e10 <QSPI_N25Q256_PORT_init+0xc8>)
    1d72:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO0,
    1d74:	2100      	movs	r1, #0
    1d76:	2008      	movs	r0, #8
    1d78:	4b22      	ldr	r3, [pc, #136]	; (1e04 <QSPI_N25Q256_PORT_init+0xbc>)
    1d7a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO0,
    1d7c:	4925      	ldr	r1, [pc, #148]	; (1e14 <QSPI_N25Q256_PORT_init+0xcc>)
    1d7e:	2008      	movs	r0, #8
    1d80:	4b22      	ldr	r3, [pc, #136]	; (1e0c <QSPI_N25Q256_PORT_init+0xc4>)
    1d82:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(FLASH_IO1,
    1d84:	2102      	movs	r1, #2
    1d86:	2009      	movs	r0, #9
    1d88:	4b1d      	ldr	r3, [pc, #116]	; (1e00 <QSPI_N25Q256_PORT_init+0xb8>)
    1d8a:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO1,
    1d8c:	2100      	movs	r1, #0
    1d8e:	2009      	movs	r0, #9
    1d90:	4b1f      	ldr	r3, [pc, #124]	; (1e10 <QSPI_N25Q256_PORT_init+0xc8>)
    1d92:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO1,
    1d94:	2100      	movs	r1, #0
    1d96:	2009      	movs	r0, #9
    1d98:	4b1a      	ldr	r3, [pc, #104]	; (1e04 <QSPI_N25Q256_PORT_init+0xbc>)
    1d9a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO1,
    1d9c:	491e      	ldr	r1, [pc, #120]	; (1e18 <QSPI_N25Q256_PORT_init+0xd0>)
    1d9e:	2009      	movs	r0, #9
    1da0:	4b1a      	ldr	r3, [pc, #104]	; (1e0c <QSPI_N25Q256_PORT_init+0xc4>)
    1da2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(FLASH_IO2,
    1da4:	2102      	movs	r1, #2
    1da6:	200a      	movs	r0, #10
    1da8:	4b15      	ldr	r3, [pc, #84]	; (1e00 <QSPI_N25Q256_PORT_init+0xb8>)
    1daa:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO2,
    1dac:	2100      	movs	r1, #0
    1dae:	200a      	movs	r0, #10
    1db0:	4b17      	ldr	r3, [pc, #92]	; (1e10 <QSPI_N25Q256_PORT_init+0xc8>)
    1db2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO2,
    1db4:	2100      	movs	r1, #0
    1db6:	200a      	movs	r0, #10
    1db8:	4b12      	ldr	r3, [pc, #72]	; (1e04 <QSPI_N25Q256_PORT_init+0xbc>)
    1dba:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO2,
    1dbc:	4917      	ldr	r1, [pc, #92]	; (1e1c <QSPI_N25Q256_PORT_init+0xd4>)
    1dbe:	200a      	movs	r0, #10
    1dc0:	4b12      	ldr	r3, [pc, #72]	; (1e0c <QSPI_N25Q256_PORT_init+0xc4>)
    1dc2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(FLASH_IO3,
    1dc4:	2102      	movs	r1, #2
    1dc6:	200b      	movs	r0, #11
    1dc8:	4b0d      	ldr	r3, [pc, #52]	; (1e00 <QSPI_N25Q256_PORT_init+0xb8>)
    1dca:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(FLASH_IO3,
    1dcc:	2100      	movs	r1, #0
    1dce:	200b      	movs	r0, #11
    1dd0:	4b0f      	ldr	r3, [pc, #60]	; (1e10 <QSPI_N25Q256_PORT_init+0xc8>)
    1dd2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(FLASH_IO3,
    1dd4:	2100      	movs	r1, #0
    1dd6:	200b      	movs	r0, #11
    1dd8:	4b0a      	ldr	r3, [pc, #40]	; (1e04 <QSPI_N25Q256_PORT_init+0xbc>)
    1dda:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_IO3,
    1ddc:	4910      	ldr	r1, [pc, #64]	; (1e20 <QSPI_N25Q256_PORT_init+0xd8>)
    1dde:	200b      	movs	r0, #11
    1de0:	4b0a      	ldr	r3, [pc, #40]	; (1e0c <QSPI_N25Q256_PORT_init+0xc4>)
    1de2:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_IN);
    1de4:	2101      	movs	r1, #1
    1de6:	202a      	movs	r0, #42	; 0x2a
    1de8:	4b05      	ldr	r3, [pc, #20]	; (1e00 <QSPI_N25Q256_PORT_init+0xb8>)
    1dea:	4798      	blx	r3

	gpio_set_pin_pull_mode(FLASH_CLK,
    1dec:	2100      	movs	r1, #0
    1dee:	202a      	movs	r0, #42	; 0x2a
    1df0:	4b04      	ldr	r3, [pc, #16]	; (1e04 <QSPI_N25Q256_PORT_init+0xbc>)
    1df2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(FLASH_CLK, PINMUX_PB10H_QSPI_SCK);
    1df4:	490b      	ldr	r1, [pc, #44]	; (1e24 <QSPI_N25Q256_PORT_init+0xdc>)
    1df6:	202a      	movs	r0, #42	; 0x2a
    1df8:	4b04      	ldr	r3, [pc, #16]	; (1e0c <QSPI_N25Q256_PORT_init+0xc4>)
    1dfa:	4798      	blx	r3
}
    1dfc:	bf00      	nop
    1dfe:	bd80      	pop	{r7, pc}
    1e00:	00001ae9 	.word	0x00001ae9
    1e04:	00001a95 	.word	0x00001a95
    1e08:	002b0007 	.word	0x002b0007
    1e0c:	00001ac9 	.word	0x00001ac9
    1e10:	00001b21 	.word	0x00001b21
    1e14:	00080007 	.word	0x00080007
    1e18:	00090007 	.word	0x00090007
    1e1c:	000a0007 	.word	0x000a0007
    1e20:	000b0007 	.word	0x000b0007
    1e24:	002a0007 	.word	0x002a0007

00001e28 <QSPI_N25Q256_CLOCK_init>:

void QSPI_N25Q256_CLOCK_init(void)
{
    1e28:	b580      	push	{r7, lr}
    1e2a:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
    1e2c:	4805      	ldr	r0, [pc, #20]	; (1e44 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1e2e:	4b06      	ldr	r3, [pc, #24]	; (1e48 <QSPI_N25Q256_CLOCK_init+0x20>)
    1e30:	4798      	blx	r3
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
    1e32:	4804      	ldr	r0, [pc, #16]	; (1e44 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1e34:	4b05      	ldr	r3, [pc, #20]	; (1e4c <QSPI_N25Q256_CLOCK_init+0x24>)
    1e36:	4798      	blx	r3
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
    1e38:	4802      	ldr	r0, [pc, #8]	; (1e44 <QSPI_N25Q256_CLOCK_init+0x1c>)
    1e3a:	4b05      	ldr	r3, [pc, #20]	; (1e50 <QSPI_N25Q256_CLOCK_init+0x28>)
    1e3c:	4798      	blx	r3
}
    1e3e:	bf00      	nop
    1e40:	bd80      	pop	{r7, pc}
    1e42:	bf00      	nop
    1e44:	40000800 	.word	0x40000800
    1e48:	000012bb 	.word	0x000012bb
    1e4c:	000012fb 	.word	0x000012fb
    1e50:	000014db 	.word	0x000014db

00001e54 <QSPI_N25Q256_init>:

void QSPI_N25Q256_init(void)
{
    1e54:	b580      	push	{r7, lr}
    1e56:	af00      	add	r7, sp, #0
	QSPI_N25Q256_CLOCK_init();
    1e58:	4b04      	ldr	r3, [pc, #16]	; (1e6c <QSPI_N25Q256_init+0x18>)
    1e5a:	4798      	blx	r3
	qspi_sync_init(&QSPI_N25Q256, QSPI);
    1e5c:	4904      	ldr	r1, [pc, #16]	; (1e70 <QSPI_N25Q256_init+0x1c>)
    1e5e:	4805      	ldr	r0, [pc, #20]	; (1e74 <QSPI_N25Q256_init+0x20>)
    1e60:	4b05      	ldr	r3, [pc, #20]	; (1e78 <QSPI_N25Q256_init+0x24>)
    1e62:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    1e64:	4b05      	ldr	r3, [pc, #20]	; (1e7c <QSPI_N25Q256_init+0x28>)
    1e66:	4798      	blx	r3
}
    1e68:	bf00      	nop
    1e6a:	bd80      	pop	{r7, pc}
    1e6c:	00001e29 	.word	0x00001e29
    1e70:	42003400 	.word	0x42003400
    1e74:	20009e38 	.word	0x20009e38
    1e78:	00002eb9 	.word	0x00002eb9
    1e7c:	00001d49 	.word	0x00001d49

00001e80 <DATETIME_CLOCK_CLOCK_init>:

void DATETIME_CLOCK_CLOCK_init(void)
{
    1e80:	b580      	push	{r7, lr}
    1e82:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
    1e84:	4802      	ldr	r0, [pc, #8]	; (1e90 <DATETIME_CLOCK_CLOCK_init+0x10>)
    1e86:	4b03      	ldr	r3, [pc, #12]	; (1e94 <DATETIME_CLOCK_CLOCK_init+0x14>)
    1e88:	4798      	blx	r3
}
    1e8a:	bf00      	nop
    1e8c:	bd80      	pop	{r7, pc}
    1e8e:	bf00      	nop
    1e90:	40000800 	.word	0x40000800
    1e94:	0000133b 	.word	0x0000133b

00001e98 <DATETIME_CLOCK_init>:

void DATETIME_CLOCK_init(void)
{
    1e98:	b580      	push	{r7, lr}
    1e9a:	af00      	add	r7, sp, #0
	DATETIME_CLOCK_CLOCK_init();
    1e9c:	4b03      	ldr	r3, [pc, #12]	; (1eac <DATETIME_CLOCK_init+0x14>)
    1e9e:	4798      	blx	r3
	calendar_init(&DATETIME_CLOCK, RTC);
    1ea0:	4903      	ldr	r1, [pc, #12]	; (1eb0 <DATETIME_CLOCK_init+0x18>)
    1ea2:	4804      	ldr	r0, [pc, #16]	; (1eb4 <DATETIME_CLOCK_init+0x1c>)
    1ea4:	4b04      	ldr	r3, [pc, #16]	; (1eb8 <DATETIME_CLOCK_init+0x20>)
    1ea6:	4798      	blx	r3
}
    1ea8:	bf00      	nop
    1eaa:	bd80      	pop	{r7, pc}
    1eac:	00001e81 	.word	0x00001e81
    1eb0:	40002400 	.word	0x40002400
    1eb4:	20009f80 	.word	0x20009f80
    1eb8:	00002845 	.word	0x00002845

00001ebc <I2C_HEATERS_PORT_init>:

void I2C_HEATERS_PORT_init(void)
{
    1ebc:	b580      	push	{r7, lr}
    1ebe:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
    1ec0:	2101      	movs	r1, #1
    1ec2:	2010      	movs	r0, #16
    1ec4:	4b07      	ldr	r3, [pc, #28]	; (1ee4 <I2C_HEATERS_PORT_init+0x28>)
    1ec6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16C_SERCOM1_PAD0);
    1ec8:	4907      	ldr	r1, [pc, #28]	; (1ee8 <I2C_HEATERS_PORT_init+0x2c>)
    1eca:	2010      	movs	r0, #16
    1ecc:	4b07      	ldr	r3, [pc, #28]	; (1eec <I2C_HEATERS_PORT_init+0x30>)
    1ece:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
    1ed0:	2101      	movs	r1, #1
    1ed2:	2011      	movs	r0, #17
    1ed4:	4b03      	ldr	r3, [pc, #12]	; (1ee4 <I2C_HEATERS_PORT_init+0x28>)
    1ed6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
    1ed8:	4905      	ldr	r1, [pc, #20]	; (1ef0 <I2C_HEATERS_PORT_init+0x34>)
    1eda:	2011      	movs	r0, #17
    1edc:	4b03      	ldr	r3, [pc, #12]	; (1eec <I2C_HEATERS_PORT_init+0x30>)
    1ede:	4798      	blx	r3
}
    1ee0:	bf00      	nop
    1ee2:	bd80      	pop	{r7, pc}
    1ee4:	00001a95 	.word	0x00001a95
    1ee8:	00100002 	.word	0x00100002
    1eec:	00001ac9 	.word	0x00001ac9
    1ef0:	00110002 	.word	0x00110002

00001ef4 <I2C_HEATERS_CLOCK_init>:

void I2C_HEATERS_CLOCK_init(void)
{
    1ef4:	b580      	push	{r7, lr}
    1ef6:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1ef8:	2242      	movs	r2, #66	; 0x42
    1efa:	2108      	movs	r1, #8
    1efc:	4806      	ldr	r0, [pc, #24]	; (1f18 <I2C_HEATERS_CLOCK_init+0x24>)
    1efe:	4b07      	ldr	r3, [pc, #28]	; (1f1c <I2C_HEATERS_CLOCK_init+0x28>)
    1f00:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1f02:	224a      	movs	r2, #74	; 0x4a
    1f04:	2103      	movs	r1, #3
    1f06:	4804      	ldr	r0, [pc, #16]	; (1f18 <I2C_HEATERS_CLOCK_init+0x24>)
    1f08:	4b04      	ldr	r3, [pc, #16]	; (1f1c <I2C_HEATERS_CLOCK_init+0x28>)
    1f0a:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
    1f0c:	4804      	ldr	r0, [pc, #16]	; (1f20 <I2C_HEATERS_CLOCK_init+0x2c>)
    1f0e:	4b05      	ldr	r3, [pc, #20]	; (1f24 <I2C_HEATERS_CLOCK_init+0x30>)
    1f10:	4798      	blx	r3
}
    1f12:	bf00      	nop
    1f14:	bd80      	pop	{r7, pc}
    1f16:	bf00      	nop
    1f18:	40001c00 	.word	0x40001c00
    1f1c:	00001275 	.word	0x00001275
    1f20:	40000800 	.word	0x40000800
    1f24:	0000137b 	.word	0x0000137b

00001f28 <I2C_HEATERS_init>:

void I2C_HEATERS_init(void)
{
    1f28:	b580      	push	{r7, lr}
    1f2a:	af00      	add	r7, sp, #0
	I2C_HEATERS_CLOCK_init();
    1f2c:	4b04      	ldr	r3, [pc, #16]	; (1f40 <I2C_HEATERS_init+0x18>)
    1f2e:	4798      	blx	r3
	i2c_m_sync_init(&I2C_HEATERS, SERCOM1);
    1f30:	4904      	ldr	r1, [pc, #16]	; (1f44 <I2C_HEATERS_init+0x1c>)
    1f32:	4805      	ldr	r0, [pc, #20]	; (1f48 <I2C_HEATERS_init+0x20>)
    1f34:	4b05      	ldr	r3, [pc, #20]	; (1f4c <I2C_HEATERS_init+0x24>)
    1f36:	4798      	blx	r3
	I2C_HEATERS_PORT_init();
    1f38:	4b05      	ldr	r3, [pc, #20]	; (1f50 <I2C_HEATERS_init+0x28>)
    1f3a:	4798      	blx	r3
}
    1f3c:	bf00      	nop
    1f3e:	bd80      	pop	{r7, pc}
    1f40:	00001ef5 	.word	0x00001ef5
    1f44:	40003400 	.word	0x40003400
    1f48:	20009ed8 	.word	0x20009ed8
    1f4c:	00002d31 	.word	0x00002d31
    1f50:	00001ebd 	.word	0x00001ebd

00001f54 <SPI_TEMP_PORT_init>:

void SPI_TEMP_PORT_init(void)
{
    1f54:	b580      	push	{r7, lr}
    1f56:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PB27,
    1f58:	2100      	movs	r1, #0
    1f5a:	203b      	movs	r0, #59	; 0x3b
    1f5c:	4b11      	ldr	r3, [pc, #68]	; (1fa4 <SPI_TEMP_PORT_init+0x50>)
    1f5e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB27, GPIO_DIRECTION_OUT);
    1f60:	2102      	movs	r1, #2
    1f62:	203b      	movs	r0, #59	; 0x3b
    1f64:	4b10      	ldr	r3, [pc, #64]	; (1fa8 <SPI_TEMP_PORT_init+0x54>)
    1f66:	4798      	blx	r3

	gpio_set_pin_function(PB27, PINMUX_PB27D_SERCOM4_PAD0);
    1f68:	4910      	ldr	r1, [pc, #64]	; (1fac <SPI_TEMP_PORT_init+0x58>)
    1f6a:	203b      	movs	r0, #59	; 0x3b
    1f6c:	4b10      	ldr	r3, [pc, #64]	; (1fb0 <SPI_TEMP_PORT_init+0x5c>)
    1f6e:	4798      	blx	r3

	gpio_set_pin_level(PB26,
    1f70:	2100      	movs	r1, #0
    1f72:	203a      	movs	r0, #58	; 0x3a
    1f74:	4b0b      	ldr	r3, [pc, #44]	; (1fa4 <SPI_TEMP_PORT_init+0x50>)
    1f76:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB26, GPIO_DIRECTION_OUT);
    1f78:	2102      	movs	r1, #2
    1f7a:	203a      	movs	r0, #58	; 0x3a
    1f7c:	4b0a      	ldr	r3, [pc, #40]	; (1fa8 <SPI_TEMP_PORT_init+0x54>)
    1f7e:	4798      	blx	r3

	gpio_set_pin_function(PB26, PINMUX_PB26D_SERCOM4_PAD1);
    1f80:	490c      	ldr	r1, [pc, #48]	; (1fb4 <SPI_TEMP_PORT_init+0x60>)
    1f82:	203a      	movs	r0, #58	; 0x3a
    1f84:	4b0a      	ldr	r3, [pc, #40]	; (1fb0 <SPI_TEMP_PORT_init+0x5c>)
    1f86:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PB28, GPIO_DIRECTION_IN);
    1f88:	2101      	movs	r1, #1
    1f8a:	203c      	movs	r0, #60	; 0x3c
    1f8c:	4b06      	ldr	r3, [pc, #24]	; (1fa8 <SPI_TEMP_PORT_init+0x54>)
    1f8e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB28,
    1f90:	2100      	movs	r1, #0
    1f92:	203c      	movs	r0, #60	; 0x3c
    1f94:	4b08      	ldr	r3, [pc, #32]	; (1fb8 <SPI_TEMP_PORT_init+0x64>)
    1f96:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB28, PINMUX_PB28D_SERCOM4_PAD2);
    1f98:	4908      	ldr	r1, [pc, #32]	; (1fbc <SPI_TEMP_PORT_init+0x68>)
    1f9a:	203c      	movs	r0, #60	; 0x3c
    1f9c:	4b04      	ldr	r3, [pc, #16]	; (1fb0 <SPI_TEMP_PORT_init+0x5c>)
    1f9e:	4798      	blx	r3
}
    1fa0:	bf00      	nop
    1fa2:	bd80      	pop	{r7, pc}
    1fa4:	00001b21 	.word	0x00001b21
    1fa8:	00001ae9 	.word	0x00001ae9
    1fac:	003b0003 	.word	0x003b0003
    1fb0:	00001ac9 	.word	0x00001ac9
    1fb4:	003a0003 	.word	0x003a0003
    1fb8:	00001a95 	.word	0x00001a95
    1fbc:	003c0003 	.word	0x003c0003

00001fc0 <SPI_TEMP_CLOCK_init>:

void SPI_TEMP_CLOCK_init(void)
{
    1fc0:	b580      	push	{r7, lr}
    1fc2:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1fc4:	2245      	movs	r2, #69	; 0x45
    1fc6:	2122      	movs	r1, #34	; 0x22
    1fc8:	4806      	ldr	r0, [pc, #24]	; (1fe4 <SPI_TEMP_CLOCK_init+0x24>)
    1fca:	4b07      	ldr	r3, [pc, #28]	; (1fe8 <SPI_TEMP_CLOCK_init+0x28>)
    1fcc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    1fce:	224a      	movs	r2, #74	; 0x4a
    1fd0:	2103      	movs	r1, #3
    1fd2:	4804      	ldr	r0, [pc, #16]	; (1fe4 <SPI_TEMP_CLOCK_init+0x24>)
    1fd4:	4b04      	ldr	r3, [pc, #16]	; (1fe8 <SPI_TEMP_CLOCK_init+0x28>)
    1fd6:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
    1fd8:	4804      	ldr	r0, [pc, #16]	; (1fec <SPI_TEMP_CLOCK_init+0x2c>)
    1fda:	4b05      	ldr	r3, [pc, #20]	; (1ff0 <SPI_TEMP_CLOCK_init+0x30>)
    1fdc:	4798      	blx	r3
}
    1fde:	bf00      	nop
    1fe0:	bd80      	pop	{r7, pc}
    1fe2:	bf00      	nop
    1fe4:	40001c00 	.word	0x40001c00
    1fe8:	00001275 	.word	0x00001275
    1fec:	40000800 	.word	0x40000800
    1ff0:	000014fb 	.word	0x000014fb

00001ff4 <SPI_TEMP_init>:

void SPI_TEMP_init(void)
{
    1ff4:	b580      	push	{r7, lr}
    1ff6:	af00      	add	r7, sp, #0
	SPI_TEMP_CLOCK_init();
    1ff8:	4b05      	ldr	r3, [pc, #20]	; (2010 <SPI_TEMP_init+0x1c>)
    1ffa:	4798      	blx	r3
	spi_m_sync_init(&SPI_TEMP, SERCOM4);
    1ffc:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    2000:	4804      	ldr	r0, [pc, #16]	; (2014 <SPI_TEMP_init+0x20>)
    2002:	4b05      	ldr	r3, [pc, #20]	; (2018 <SPI_TEMP_init+0x24>)
    2004:	4798      	blx	r3
	SPI_TEMP_PORT_init();
    2006:	4b05      	ldr	r3, [pc, #20]	; (201c <SPI_TEMP_init+0x28>)
    2008:	4798      	blx	r3
}
    200a:	bf00      	nop
    200c:	bd80      	pop	{r7, pc}
    200e:	bf00      	nop
    2010:	00001fc1 	.word	0x00001fc1
    2014:	20009de0 	.word	0x20009de0
    2018:	00002fc9 	.word	0x00002fc9
    201c:	00001f55 	.word	0x00001f55

00002020 <I2C_FLAPPER_VALVE_PORT_init>:

void I2C_FLAPPER_VALVE_PORT_init(void)
{
    2020:	b580      	push	{r7, lr}
    2022:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA23,
    2024:	2100      	movs	r1, #0
    2026:	2017      	movs	r0, #23
    2028:	4b07      	ldr	r3, [pc, #28]	; (2048 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    202a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);
    202c:	4907      	ldr	r1, [pc, #28]	; (204c <I2C_FLAPPER_VALVE_PORT_init+0x2c>)
    202e:	2017      	movs	r0, #23
    2030:	4b07      	ldr	r3, [pc, #28]	; (2050 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    2032:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA22,
    2034:	2100      	movs	r1, #0
    2036:	2016      	movs	r0, #22
    2038:	4b03      	ldr	r3, [pc, #12]	; (2048 <I2C_FLAPPER_VALVE_PORT_init+0x28>)
    203a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
    203c:	4905      	ldr	r1, [pc, #20]	; (2054 <I2C_FLAPPER_VALVE_PORT_init+0x34>)
    203e:	2016      	movs	r0, #22
    2040:	4b03      	ldr	r3, [pc, #12]	; (2050 <I2C_FLAPPER_VALVE_PORT_init+0x30>)
    2042:	4798      	blx	r3
}
    2044:	bf00      	nop
    2046:	bd80      	pop	{r7, pc}
    2048:	00001a95 	.word	0x00001a95
    204c:	00170003 	.word	0x00170003
    2050:	00001ac9 	.word	0x00001ac9
    2054:	00160003 	.word	0x00160003

00002058 <I2C_FLAPPER_VALVE_CLOCK_init>:

void I2C_FLAPPER_VALVE_CLOCK_init(void)
{
    2058:	b580      	push	{r7, lr}
    205a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    205c:	2244      	movs	r2, #68	; 0x44
    205e:	2123      	movs	r1, #35	; 0x23
    2060:	4806      	ldr	r0, [pc, #24]	; (207c <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    2062:	4b07      	ldr	r3, [pc, #28]	; (2080 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    2064:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2066:	224a      	movs	r2, #74	; 0x4a
    2068:	2103      	movs	r1, #3
    206a:	4804      	ldr	r0, [pc, #16]	; (207c <I2C_FLAPPER_VALVE_CLOCK_init+0x24>)
    206c:	4b04      	ldr	r3, [pc, #16]	; (2080 <I2C_FLAPPER_VALVE_CLOCK_init+0x28>)
    206e:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
    2070:	4804      	ldr	r0, [pc, #16]	; (2084 <I2C_FLAPPER_VALVE_CLOCK_init+0x2c>)
    2072:	4b05      	ldr	r3, [pc, #20]	; (2088 <I2C_FLAPPER_VALVE_CLOCK_init+0x30>)
    2074:	4798      	blx	r3
}
    2076:	bf00      	nop
    2078:	bd80      	pop	{r7, pc}
    207a:	bf00      	nop
    207c:	40001c00 	.word	0x40001c00
    2080:	00001275 	.word	0x00001275
    2084:	40000800 	.word	0x40000800
    2088:	0000151b 	.word	0x0000151b

0000208c <I2C_FLAPPER_VALVE_init>:

void I2C_FLAPPER_VALVE_init(void)
{
    208c:	b580      	push	{r7, lr}
    208e:	af00      	add	r7, sp, #0
	I2C_FLAPPER_VALVE_CLOCK_init();
    2090:	4b04      	ldr	r3, [pc, #16]	; (20a4 <I2C_FLAPPER_VALVE_init+0x18>)
    2092:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FLAPPER_VALVE, SERCOM5);
    2094:	4904      	ldr	r1, [pc, #16]	; (20a8 <I2C_FLAPPER_VALVE_init+0x1c>)
    2096:	4805      	ldr	r0, [pc, #20]	; (20ac <I2C_FLAPPER_VALVE_init+0x20>)
    2098:	4b05      	ldr	r3, [pc, #20]	; (20b0 <I2C_FLAPPER_VALVE_init+0x24>)
    209a:	4798      	blx	r3
	I2C_FLAPPER_VALVE_PORT_init();
    209c:	4b05      	ldr	r3, [pc, #20]	; (20b4 <I2C_FLAPPER_VALVE_init+0x28>)
    209e:	4798      	blx	r3
}
    20a0:	bf00      	nop
    20a2:	bd80      	pop	{r7, pc}
    20a4:	00002059 	.word	0x00002059
    20a8:	43000400 	.word	0x43000400
    20ac:	20009e7c 	.word	0x20009e7c
    20b0:	00002d31 	.word	0x00002d31
    20b4:	00002021 	.word	0x00002021

000020b8 <SPI_HI3593_PORT_init>:

void SPI_HI3593_PORT_init(void)
{
    20b8:	b580      	push	{r7, lr}
    20ba:	af00      	add	r7, sp, #0

	gpio_set_pin_level(PC04,
    20bc:	2100      	movs	r1, #0
    20be:	2044      	movs	r0, #68	; 0x44
    20c0:	4b11      	ldr	r3, [pc, #68]	; (2108 <SPI_HI3593_PORT_init+0x50>)
    20c2:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC04, GPIO_DIRECTION_OUT);
    20c4:	2102      	movs	r1, #2
    20c6:	2044      	movs	r0, #68	; 0x44
    20c8:	4b10      	ldr	r3, [pc, #64]	; (210c <SPI_HI3593_PORT_init+0x54>)
    20ca:	4798      	blx	r3

	gpio_set_pin_function(PC04, PINMUX_PC04C_SERCOM6_PAD0);
    20cc:	4910      	ldr	r1, [pc, #64]	; (2110 <SPI_HI3593_PORT_init+0x58>)
    20ce:	2044      	movs	r0, #68	; 0x44
    20d0:	4b10      	ldr	r3, [pc, #64]	; (2114 <SPI_HI3593_PORT_init+0x5c>)
    20d2:	4798      	blx	r3

	gpio_set_pin_level(PC05,
    20d4:	2100      	movs	r1, #0
    20d6:	2045      	movs	r0, #69	; 0x45
    20d8:	4b0b      	ldr	r3, [pc, #44]	; (2108 <SPI_HI3593_PORT_init+0x50>)
    20da:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC05, GPIO_DIRECTION_OUT);
    20dc:	2102      	movs	r1, #2
    20de:	2045      	movs	r0, #69	; 0x45
    20e0:	4b0a      	ldr	r3, [pc, #40]	; (210c <SPI_HI3593_PORT_init+0x54>)
    20e2:	4798      	blx	r3

	gpio_set_pin_function(PC05, PINMUX_PC05C_SERCOM6_PAD1);
    20e4:	490c      	ldr	r1, [pc, #48]	; (2118 <SPI_HI3593_PORT_init+0x60>)
    20e6:	2045      	movs	r0, #69	; 0x45
    20e8:	4b0a      	ldr	r3, [pc, #40]	; (2114 <SPI_HI3593_PORT_init+0x5c>)
    20ea:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PC07, GPIO_DIRECTION_IN);
    20ec:	2101      	movs	r1, #1
    20ee:	2047      	movs	r0, #71	; 0x47
    20f0:	4b06      	ldr	r3, [pc, #24]	; (210c <SPI_HI3593_PORT_init+0x54>)
    20f2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PC07,
    20f4:	2100      	movs	r1, #0
    20f6:	2047      	movs	r0, #71	; 0x47
    20f8:	4b08      	ldr	r3, [pc, #32]	; (211c <SPI_HI3593_PORT_init+0x64>)
    20fa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PC07, PINMUX_PC07C_SERCOM6_PAD3);
    20fc:	4908      	ldr	r1, [pc, #32]	; (2120 <SPI_HI3593_PORT_init+0x68>)
    20fe:	2047      	movs	r0, #71	; 0x47
    2100:	4b04      	ldr	r3, [pc, #16]	; (2114 <SPI_HI3593_PORT_init+0x5c>)
    2102:	4798      	blx	r3
}
    2104:	bf00      	nop
    2106:	bd80      	pop	{r7, pc}
    2108:	00001b21 	.word	0x00001b21
    210c:	00001ae9 	.word	0x00001ae9
    2110:	00440002 	.word	0x00440002
    2114:	00001ac9 	.word	0x00001ac9
    2118:	00450002 	.word	0x00450002
    211c:	00001a95 	.word	0x00001a95
    2120:	00470002 	.word	0x00470002

00002124 <SPI_HI3593_CLOCK_init>:

void SPI_HI3593_CLOCK_init(void)
{
    2124:	b580      	push	{r7, lr}
    2126:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2128:	2242      	movs	r2, #66	; 0x42
    212a:	2124      	movs	r1, #36	; 0x24
    212c:	4806      	ldr	r0, [pc, #24]	; (2148 <SPI_HI3593_CLOCK_init+0x24>)
    212e:	4b07      	ldr	r3, [pc, #28]	; (214c <SPI_HI3593_CLOCK_init+0x28>)
    2130:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2132:	224a      	movs	r2, #74	; 0x4a
    2134:	2103      	movs	r1, #3
    2136:	4804      	ldr	r0, [pc, #16]	; (2148 <SPI_HI3593_CLOCK_init+0x24>)
    2138:	4b04      	ldr	r3, [pc, #16]	; (214c <SPI_HI3593_CLOCK_init+0x28>)
    213a:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
    213c:	4804      	ldr	r0, [pc, #16]	; (2150 <SPI_HI3593_CLOCK_init+0x2c>)
    213e:	4b05      	ldr	r3, [pc, #20]	; (2154 <SPI_HI3593_CLOCK_init+0x30>)
    2140:	4798      	blx	r3
}
    2142:	bf00      	nop
    2144:	bd80      	pop	{r7, pc}
    2146:	bf00      	nop
    2148:	40001c00 	.word	0x40001c00
    214c:	00001275 	.word	0x00001275
    2150:	40000800 	.word	0x40000800
    2154:	0000153b 	.word	0x0000153b

00002158 <SPI_HI3593_init>:

void SPI_HI3593_init(void)
{
    2158:	b580      	push	{r7, lr}
    215a:	af00      	add	r7, sp, #0
	SPI_HI3593_CLOCK_init();
    215c:	4b04      	ldr	r3, [pc, #16]	; (2170 <SPI_HI3593_init+0x18>)
    215e:	4798      	blx	r3
	spi_m_sync_init(&SPI_HI3593, SERCOM6);
    2160:	4904      	ldr	r1, [pc, #16]	; (2174 <SPI_HI3593_init+0x1c>)
    2162:	4805      	ldr	r0, [pc, #20]	; (2178 <SPI_HI3593_init+0x20>)
    2164:	4b05      	ldr	r3, [pc, #20]	; (217c <SPI_HI3593_init+0x24>)
    2166:	4798      	blx	r3
	SPI_HI3593_PORT_init();
    2168:	4b05      	ldr	r3, [pc, #20]	; (2180 <SPI_HI3593_init+0x28>)
    216a:	4798      	blx	r3
}
    216c:	bf00      	nop
    216e:	bd80      	pop	{r7, pc}
    2170:	00002125 	.word	0x00002125
    2174:	43000800 	.word	0x43000800
    2178:	20009dc8 	.word	0x20009dc8
    217c:	00002fc9 	.word	0x00002fc9
    2180:	000020b9 	.word	0x000020b9

00002184 <I2C_FANS_PORT_init>:

void I2C_FANS_PORT_init(void)
{
    2184:	b580      	push	{r7, lr}
    2186:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PD08,
    2188:	2100      	movs	r1, #0
    218a:	2068      	movs	r0, #104	; 0x68
    218c:	4b07      	ldr	r3, [pc, #28]	; (21ac <I2C_FANS_PORT_init+0x28>)
    218e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD08, PINMUX_PD08C_SERCOM7_PAD0);
    2190:	4907      	ldr	r1, [pc, #28]	; (21b0 <I2C_FANS_PORT_init+0x2c>)
    2192:	2068      	movs	r0, #104	; 0x68
    2194:	4b07      	ldr	r3, [pc, #28]	; (21b4 <I2C_FANS_PORT_init+0x30>)
    2196:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD09,
    2198:	2100      	movs	r1, #0
    219a:	2069      	movs	r0, #105	; 0x69
    219c:	4b03      	ldr	r3, [pc, #12]	; (21ac <I2C_FANS_PORT_init+0x28>)
    219e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD09, PINMUX_PD09C_SERCOM7_PAD1);
    21a0:	4905      	ldr	r1, [pc, #20]	; (21b8 <I2C_FANS_PORT_init+0x34>)
    21a2:	2069      	movs	r0, #105	; 0x69
    21a4:	4b03      	ldr	r3, [pc, #12]	; (21b4 <I2C_FANS_PORT_init+0x30>)
    21a6:	4798      	blx	r3
}
    21a8:	bf00      	nop
    21aa:	bd80      	pop	{r7, pc}
    21ac:	00001a95 	.word	0x00001a95
    21b0:	00680002 	.word	0x00680002
    21b4:	00001ac9 	.word	0x00001ac9
    21b8:	00690002 	.word	0x00690002

000021bc <I2C_FANS_CLOCK_init>:

void I2C_FANS_CLOCK_init(void)
{
    21bc:	b580      	push	{r7, lr}
    21be:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    21c0:	2244      	movs	r2, #68	; 0x44
    21c2:	2125      	movs	r1, #37	; 0x25
    21c4:	4806      	ldr	r0, [pc, #24]	; (21e0 <I2C_FANS_CLOCK_init+0x24>)
    21c6:	4b07      	ldr	r3, [pc, #28]	; (21e4 <I2C_FANS_CLOCK_init+0x28>)
    21c8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    21ca:	224a      	movs	r2, #74	; 0x4a
    21cc:	2103      	movs	r1, #3
    21ce:	4804      	ldr	r0, [pc, #16]	; (21e0 <I2C_FANS_CLOCK_init+0x24>)
    21d0:	4b04      	ldr	r3, [pc, #16]	; (21e4 <I2C_FANS_CLOCK_init+0x28>)
    21d2:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
    21d4:	4804      	ldr	r0, [pc, #16]	; (21e8 <I2C_FANS_CLOCK_init+0x2c>)
    21d6:	4b05      	ldr	r3, [pc, #20]	; (21ec <I2C_FANS_CLOCK_init+0x30>)
    21d8:	4798      	blx	r3
}
    21da:	bf00      	nop
    21dc:	bd80      	pop	{r7, pc}
    21de:	bf00      	nop
    21e0:	40001c00 	.word	0x40001c00
    21e4:	00001275 	.word	0x00001275
    21e8:	40000800 	.word	0x40000800
    21ec:	0000155b 	.word	0x0000155b

000021f0 <I2C_FANS_init>:

void I2C_FANS_init(void)
{
    21f0:	b580      	push	{r7, lr}
    21f2:	af00      	add	r7, sp, #0
	I2C_FANS_CLOCK_init();
    21f4:	4b04      	ldr	r3, [pc, #16]	; (2208 <I2C_FANS_init+0x18>)
    21f6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_FANS, SERCOM7);
    21f8:	4904      	ldr	r1, [pc, #16]	; (220c <I2C_FANS_init+0x1c>)
    21fa:	4805      	ldr	r0, [pc, #20]	; (2210 <I2C_FANS_init+0x20>)
    21fc:	4b05      	ldr	r3, [pc, #20]	; (2214 <I2C_FANS_init+0x24>)
    21fe:	4798      	blx	r3
	I2C_FANS_PORT_init();
    2200:	4b05      	ldr	r3, [pc, #20]	; (2218 <I2C_FANS_init+0x28>)
    2202:	4798      	blx	r3
}
    2204:	bf00      	nop
    2206:	bd80      	pop	{r7, pc}
    2208:	000021bd 	.word	0x000021bd
    220c:	43000c00 	.word	0x43000c00
    2210:	20009df8 	.word	0x20009df8
    2214:	00002d31 	.word	0x00002d31
    2218:	00002185 	.word	0x00002185

0000221c <TIMER_USB_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_USB_init(void)
{
    221c:	b580      	push	{r7, lr}
    221e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
    2220:	4808      	ldr	r0, [pc, #32]	; (2244 <TIMER_USB_init+0x28>)
    2222:	4b09      	ldr	r3, [pc, #36]	; (2248 <TIMER_USB_init+0x2c>)
    2224:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2226:	2243      	movs	r2, #67	; 0x43
    2228:	2109      	movs	r1, #9
    222a:	4808      	ldr	r0, [pc, #32]	; (224c <TIMER_USB_init+0x30>)
    222c:	4b08      	ldr	r3, [pc, #32]	; (2250 <TIMER_USB_init+0x34>)
    222e:	4798      	blx	r3

	timer_init(&TIMER_USB, TC0, _tc_get_timer());
    2230:	4b08      	ldr	r3, [pc, #32]	; (2254 <TIMER_USB_init+0x38>)
    2232:	4798      	blx	r3
    2234:	4603      	mov	r3, r0
    2236:	461a      	mov	r2, r3
    2238:	4907      	ldr	r1, [pc, #28]	; (2258 <TIMER_USB_init+0x3c>)
    223a:	4808      	ldr	r0, [pc, #32]	; (225c <TIMER_USB_init+0x40>)
    223c:	4b08      	ldr	r3, [pc, #32]	; (2260 <TIMER_USB_init+0x44>)
    223e:	4798      	blx	r3
}
    2240:	bf00      	nop
    2242:	bd80      	pop	{r7, pc}
    2244:	40000800 	.word	0x40000800
    2248:	0000139b 	.word	0x0000139b
    224c:	40001c00 	.word	0x40001c00
    2250:	00001275 	.word	0x00001275
    2254:	00008b39 	.word	0x00008b39
    2258:	40003800 	.word	0x40003800
    225c:	20009f40 	.word	0x20009f40
    2260:	00003259 	.word	0x00003259

00002264 <TIMER_ARINC_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_ARINC_init(void)
{
    2264:	b580      	push	{r7, lr}
    2266:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
    2268:	4808      	ldr	r0, [pc, #32]	; (228c <TIMER_ARINC_init+0x28>)
    226a:	4b09      	ldr	r3, [pc, #36]	; (2290 <TIMER_ARINC_init+0x2c>)
    226c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    226e:	2244      	movs	r2, #68	; 0x44
    2270:	211a      	movs	r1, #26
    2272:	4808      	ldr	r0, [pc, #32]	; (2294 <TIMER_ARINC_init+0x30>)
    2274:	4b08      	ldr	r3, [pc, #32]	; (2298 <TIMER_ARINC_init+0x34>)
    2276:	4798      	blx	r3

	timer_init(&TIMER_ARINC, TC2, _tc_get_timer());
    2278:	4b08      	ldr	r3, [pc, #32]	; (229c <TIMER_ARINC_init+0x38>)
    227a:	4798      	blx	r3
    227c:	4603      	mov	r3, r0
    227e:	461a      	mov	r2, r3
    2280:	4907      	ldr	r1, [pc, #28]	; (22a0 <TIMER_ARINC_init+0x3c>)
    2282:	4808      	ldr	r0, [pc, #32]	; (22a4 <TIMER_ARINC_init+0x40>)
    2284:	4b08      	ldr	r3, [pc, #32]	; (22a8 <TIMER_ARINC_init+0x44>)
    2286:	4798      	blx	r3
}
    2288:	bf00      	nop
    228a:	bd80      	pop	{r7, pc}
    228c:	40000800 	.word	0x40000800
    2290:	0000145b 	.word	0x0000145b
    2294:	40001c00 	.word	0x40001c00
    2298:	00001275 	.word	0x00001275
    229c:	00008b39 	.word	0x00008b39
    22a0:	4101a000 	.word	0x4101a000
    22a4:	20009f20 	.word	0x20009f20
    22a8:	00003259 	.word	0x00003259

000022ac <TIMER_MAINTENANCE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_MAINTENANCE_init(void)
{
    22ac:	b580      	push	{r7, lr}
    22ae:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
    22b0:	4808      	ldr	r0, [pc, #32]	; (22d4 <TIMER_MAINTENANCE_init+0x28>)
    22b2:	4b09      	ldr	r3, [pc, #36]	; (22d8 <TIMER_MAINTENANCE_init+0x2c>)
    22b4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    22b6:	2246      	movs	r2, #70	; 0x46
    22b8:	211e      	movs	r1, #30
    22ba:	4808      	ldr	r0, [pc, #32]	; (22dc <TIMER_MAINTENANCE_init+0x30>)
    22bc:	4b08      	ldr	r3, [pc, #32]	; (22e0 <TIMER_MAINTENANCE_init+0x34>)
    22be:	4798      	blx	r3

	timer_init(&TIMER_MAINTENANCE, TC4, _tc_get_timer());
    22c0:	4b08      	ldr	r3, [pc, #32]	; (22e4 <TIMER_MAINTENANCE_init+0x38>)
    22c2:	4798      	blx	r3
    22c4:	4603      	mov	r3, r0
    22c6:	461a      	mov	r2, r3
    22c8:	4907      	ldr	r1, [pc, #28]	; (22e8 <TIMER_MAINTENANCE_init+0x3c>)
    22ca:	4808      	ldr	r0, [pc, #32]	; (22ec <TIMER_MAINTENANCE_init+0x40>)
    22cc:	4b08      	ldr	r3, [pc, #32]	; (22f0 <TIMER_MAINTENANCE_init+0x44>)
    22ce:	4798      	blx	r3
}
    22d0:	bf00      	nop
    22d2:	bd80      	pop	{r7, pc}
    22d4:	40000800 	.word	0x40000800
    22d8:	0000149b 	.word	0x0000149b
    22dc:	40001c00 	.word	0x40001c00
    22e0:	00001275 	.word	0x00001275
    22e4:	00008b39 	.word	0x00008b39
    22e8:	42001400 	.word	0x42001400
    22ec:	20009e18 	.word	0x20009e18
    22f0:	00003259 	.word	0x00003259

000022f4 <TIMER_INTERFACE_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_INTERFACE_init(void)
{
    22f4:	b580      	push	{r7, lr}
    22f6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
    22f8:	4808      	ldr	r0, [pc, #32]	; (231c <TIMER_INTERFACE_init+0x28>)
    22fa:	4b09      	ldr	r3, [pc, #36]	; (2320 <TIMER_INTERFACE_init+0x2c>)
    22fc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    22fe:	2246      	movs	r2, #70	; 0x46
    2300:	211e      	movs	r1, #30
    2302:	4808      	ldr	r0, [pc, #32]	; (2324 <TIMER_INTERFACE_init+0x30>)
    2304:	4b08      	ldr	r3, [pc, #32]	; (2328 <TIMER_INTERFACE_init+0x34>)
    2306:	4798      	blx	r3

	timer_init(&TIMER_INTERFACE, TC5, _tc_get_timer());
    2308:	4b08      	ldr	r3, [pc, #32]	; (232c <TIMER_INTERFACE_init+0x38>)
    230a:	4798      	blx	r3
    230c:	4603      	mov	r3, r0
    230e:	461a      	mov	r2, r3
    2310:	4907      	ldr	r1, [pc, #28]	; (2330 <TIMER_INTERFACE_init+0x3c>)
    2312:	4808      	ldr	r0, [pc, #32]	; (2334 <TIMER_INTERFACE_init+0x40>)
    2314:	4b08      	ldr	r3, [pc, #32]	; (2338 <TIMER_INTERFACE_init+0x44>)
    2316:	4798      	blx	r3
}
    2318:	bf00      	nop
    231a:	bd80      	pop	{r7, pc}
    231c:	40000800 	.word	0x40000800
    2320:	000014bb 	.word	0x000014bb
    2324:	40001c00 	.word	0x40001c00
    2328:	00001275 	.word	0x00001275
    232c:	00008b39 	.word	0x00008b39
    2330:	42001800 	.word	0x42001800
    2334:	20009e5c 	.word	0x20009e5c
    2338:	00003259 	.word	0x00003259

0000233c <TIMER_EVENT_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_EVENT_init(void)
{
    233c:	b580      	push	{r7, lr}
    233e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_TC6_bit(MCLK);
    2340:	4808      	ldr	r0, [pc, #32]	; (2364 <TIMER_EVENT_init+0x28>)
    2342:	4b09      	ldr	r3, [pc, #36]	; (2368 <TIMER_EVENT_init+0x2c>)
    2344:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC6_GCLK_ID, CONF_GCLK_TC6_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2346:	2246      	movs	r2, #70	; 0x46
    2348:	2127      	movs	r1, #39	; 0x27
    234a:	4808      	ldr	r0, [pc, #32]	; (236c <TIMER_EVENT_init+0x30>)
    234c:	4b08      	ldr	r3, [pc, #32]	; (2370 <TIMER_EVENT_init+0x34>)
    234e:	4798      	blx	r3

	timer_init(&TIMER_EVENT, TC6, _tc_get_timer());
    2350:	4b08      	ldr	r3, [pc, #32]	; (2374 <TIMER_EVENT_init+0x38>)
    2352:	4798      	blx	r3
    2354:	4603      	mov	r3, r0
    2356:	461a      	mov	r2, r3
    2358:	4907      	ldr	r1, [pc, #28]	; (2378 <TIMER_EVENT_init+0x3c>)
    235a:	4808      	ldr	r0, [pc, #32]	; (237c <TIMER_EVENT_init+0x40>)
    235c:	4b08      	ldr	r3, [pc, #32]	; (2380 <TIMER_EVENT_init+0x44>)
    235e:	4798      	blx	r3
}
    2360:	bf00      	nop
    2362:	bd80      	pop	{r7, pc}
    2364:	40000800 	.word	0x40000800
    2368:	0000157b 	.word	0x0000157b
    236c:	40001c00 	.word	0x40001c00
    2370:	00001275 	.word	0x00001275
    2374:	00008b39 	.word	0x00008b39
    2378:	43001400 	.word	0x43001400
    237c:	20009e3c 	.word	0x20009e3c
    2380:	00003259 	.word	0x00003259

00002384 <LIVE_PULSE_PORT_init>:

void LIVE_PULSE_PORT_init(void)
{
    2384:	b480      	push	{r7}
    2386:	af00      	add	r7, sp, #0
}
    2388:	bf00      	nop
    238a:	46bd      	mov	sp, r7
    238c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2390:	4770      	bx	lr
	...

00002394 <LIVE_PULSE_CLOCK_init>:

void LIVE_PULSE_CLOCK_init(void)
{
    2394:	b580      	push	{r7, lr}
    2396:	af00      	add	r7, sp, #0

	hri_mclk_set_APBDMASK_TC7_bit(MCLK);
    2398:	4804      	ldr	r0, [pc, #16]	; (23ac <LIVE_PULSE_CLOCK_init+0x18>)
    239a:	4b05      	ldr	r3, [pc, #20]	; (23b0 <LIVE_PULSE_CLOCK_init+0x1c>)
    239c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC7_GCLK_ID, CONF_GCLK_TC7_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    239e:	2240      	movs	r2, #64	; 0x40
    23a0:	2127      	movs	r1, #39	; 0x27
    23a2:	4804      	ldr	r0, [pc, #16]	; (23b4 <LIVE_PULSE_CLOCK_init+0x20>)
    23a4:	4b04      	ldr	r3, [pc, #16]	; (23b8 <LIVE_PULSE_CLOCK_init+0x24>)
    23a6:	4798      	blx	r3
}
    23a8:	bf00      	nop
    23aa:	bd80      	pop	{r7, pc}
    23ac:	40000800 	.word	0x40000800
    23b0:	0000159b 	.word	0x0000159b
    23b4:	40001c00 	.word	0x40001c00
    23b8:	00001275 	.word	0x00001275

000023bc <LIVE_PULSE_init>:

void LIVE_PULSE_init(void)
{
    23bc:	b580      	push	{r7, lr}
    23be:	af00      	add	r7, sp, #0
	LIVE_PULSE_CLOCK_init();
    23c0:	4b06      	ldr	r3, [pc, #24]	; (23dc <LIVE_PULSE_init+0x20>)
    23c2:	4798      	blx	r3
	LIVE_PULSE_PORT_init();
    23c4:	4b06      	ldr	r3, [pc, #24]	; (23e0 <LIVE_PULSE_init+0x24>)
    23c6:	4798      	blx	r3
	pwm_init(&LIVE_PULSE, TC7, _tc_get_pwm());
    23c8:	4b06      	ldr	r3, [pc, #24]	; (23e4 <LIVE_PULSE_init+0x28>)
    23ca:	4798      	blx	r3
    23cc:	4603      	mov	r3, r0
    23ce:	461a      	mov	r2, r3
    23d0:	4905      	ldr	r1, [pc, #20]	; (23e8 <LIVE_PULSE_init+0x2c>)
    23d2:	4806      	ldr	r0, [pc, #24]	; (23ec <LIVE_PULSE_init+0x30>)
    23d4:	4b06      	ldr	r3, [pc, #24]	; (23f0 <LIVE_PULSE_init+0x34>)
    23d6:	4798      	blx	r3
}
    23d8:	bf00      	nop
    23da:	bd80      	pop	{r7, pc}
    23dc:	00002395 	.word	0x00002395
    23e0:	00002385 	.word	0x00002385
    23e4:	00008b4d 	.word	0x00008b4d
    23e8:	43001800 	.word	0x43001800
    23ec:	20009e9c 	.word	0x20009e9c
    23f0:	00002e0d 	.word	0x00002e0d

000023f4 <TIMER_HVAC_CLOCK_init>:

void TIMER_HVAC_CLOCK_init(void)
{
    23f4:	b580      	push	{r7, lr}
    23f6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
    23f8:	4804      	ldr	r0, [pc, #16]	; (240c <TIMER_HVAC_CLOCK_init+0x18>)
    23fa:	4b05      	ldr	r3, [pc, #20]	; (2410 <TIMER_HVAC_CLOCK_init+0x1c>)
    23fc:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    23fe:	2244      	movs	r2, #68	; 0x44
    2400:	2119      	movs	r1, #25
    2402:	4804      	ldr	r0, [pc, #16]	; (2414 <TIMER_HVAC_CLOCK_init+0x20>)
    2404:	4b04      	ldr	r3, [pc, #16]	; (2418 <TIMER_HVAC_CLOCK_init+0x24>)
    2406:	4798      	blx	r3
}
    2408:	bf00      	nop
    240a:	bd80      	pop	{r7, pc}
    240c:	40000800 	.word	0x40000800
    2410:	0000141b 	.word	0x0000141b
    2414:	40001c00 	.word	0x40001c00
    2418:	00001275 	.word	0x00001275

0000241c <TIMER_HVAC_init>:

void TIMER_HVAC_init(void)
{
    241c:	b580      	push	{r7, lr}
    241e:	af00      	add	r7, sp, #0
	TIMER_HVAC_CLOCK_init();
    2420:	4b05      	ldr	r3, [pc, #20]	; (2438 <TIMER_HVAC_init+0x1c>)
    2422:	4798      	blx	r3
	timer_init(&TIMER_HVAC, TCC0, _tcc_get_timer());
    2424:	4b05      	ldr	r3, [pc, #20]	; (243c <TIMER_HVAC_init+0x20>)
    2426:	4798      	blx	r3
    2428:	4603      	mov	r3, r0
    242a:	461a      	mov	r2, r3
    242c:	4904      	ldr	r1, [pc, #16]	; (2440 <TIMER_HVAC_init+0x24>)
    242e:	4805      	ldr	r0, [pc, #20]	; (2444 <TIMER_HVAC_init+0x28>)
    2430:	4b05      	ldr	r3, [pc, #20]	; (2448 <TIMER_HVAC_init+0x2c>)
    2432:	4798      	blx	r3
}
    2434:	bf00      	nop
    2436:	bd80      	pop	{r7, pc}
    2438:	000023f5 	.word	0x000023f5
    243c:	00007f1d 	.word	0x00007f1d
    2440:	41016000 	.word	0x41016000
    2444:	20009f60 	.word	0x20009f60
    2448:	00003259 	.word	0x00003259

0000244c <TIMER_TEMPERATURES_CLOCK_init>:

void TIMER_TEMPERATURES_CLOCK_init(void)
{
    244c:	b580      	push	{r7, lr}
    244e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
    2450:	4804      	ldr	r0, [pc, #16]	; (2464 <TIMER_TEMPERATURES_CLOCK_init+0x18>)
    2452:	4b05      	ldr	r3, [pc, #20]	; (2468 <TIMER_TEMPERATURES_CLOCK_init+0x1c>)
    2454:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2456:	2244      	movs	r2, #68	; 0x44
    2458:	2119      	movs	r1, #25
    245a:	4804      	ldr	r0, [pc, #16]	; (246c <TIMER_TEMPERATURES_CLOCK_init+0x20>)
    245c:	4b04      	ldr	r3, [pc, #16]	; (2470 <TIMER_TEMPERATURES_CLOCK_init+0x24>)
    245e:	4798      	blx	r3
}
    2460:	bf00      	nop
    2462:	bd80      	pop	{r7, pc}
    2464:	40000800 	.word	0x40000800
    2468:	0000143b 	.word	0x0000143b
    246c:	40001c00 	.word	0x40001c00
    2470:	00001275 	.word	0x00001275

00002474 <TIMER_TEMPERATURES_init>:

void TIMER_TEMPERATURES_init(void)
{
    2474:	b580      	push	{r7, lr}
    2476:	af00      	add	r7, sp, #0
	TIMER_TEMPERATURES_CLOCK_init();
    2478:	4b05      	ldr	r3, [pc, #20]	; (2490 <TIMER_TEMPERATURES_init+0x1c>)
    247a:	4798      	blx	r3
	timer_init(&TIMER_TEMPERATURES, TCC1, _tcc_get_timer());
    247c:	4b05      	ldr	r3, [pc, #20]	; (2494 <TIMER_TEMPERATURES_init+0x20>)
    247e:	4798      	blx	r3
    2480:	4603      	mov	r3, r0
    2482:	461a      	mov	r2, r3
    2484:	4904      	ldr	r1, [pc, #16]	; (2498 <TIMER_TEMPERATURES_init+0x24>)
    2486:	4805      	ldr	r0, [pc, #20]	; (249c <TIMER_TEMPERATURES_init+0x28>)
    2488:	4b05      	ldr	r3, [pc, #20]	; (24a0 <TIMER_TEMPERATURES_init+0x2c>)
    248a:	4798      	blx	r3
}
    248c:	bf00      	nop
    248e:	bd80      	pop	{r7, pc}
    2490:	0000244d 	.word	0x0000244d
    2494:	00007f1d 	.word	0x00007f1d
    2498:	41018000 	.word	0x41018000
    249c:	20009da8 	.word	0x20009da8
    24a0:	00003259 	.word	0x00003259

000024a4 <TIMER_CCU_CLOCK_init>:

void TIMER_CCU_CLOCK_init(void)
{
    24a4:	b580      	push	{r7, lr}
    24a6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
    24a8:	4804      	ldr	r0, [pc, #16]	; (24bc <TIMER_CCU_CLOCK_init+0x18>)
    24aa:	4b05      	ldr	r3, [pc, #20]	; (24c0 <TIMER_CCU_CLOCK_init+0x1c>)
    24ac:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    24ae:	2240      	movs	r2, #64	; 0x40
    24b0:	211d      	movs	r1, #29
    24b2:	4804      	ldr	r0, [pc, #16]	; (24c4 <TIMER_CCU_CLOCK_init+0x20>)
    24b4:	4b04      	ldr	r3, [pc, #16]	; (24c8 <TIMER_CCU_CLOCK_init+0x24>)
    24b6:	4798      	blx	r3
}
    24b8:	bf00      	nop
    24ba:	bd80      	pop	{r7, pc}
    24bc:	40000800 	.word	0x40000800
    24c0:	0000147b 	.word	0x0000147b
    24c4:	40001c00 	.word	0x40001c00
    24c8:	00001275 	.word	0x00001275

000024cc <TIMER_CCU_init>:

void TIMER_CCU_init(void)
{
    24cc:	b580      	push	{r7, lr}
    24ce:	af00      	add	r7, sp, #0
	TIMER_CCU_CLOCK_init();
    24d0:	4b05      	ldr	r3, [pc, #20]	; (24e8 <TIMER_CCU_init+0x1c>)
    24d2:	4798      	blx	r3
	timer_init(&TIMER_CCU, TCC2, _tcc_get_timer());
    24d4:	4b05      	ldr	r3, [pc, #20]	; (24ec <TIMER_CCU_init+0x20>)
    24d6:	4798      	blx	r3
    24d8:	4603      	mov	r3, r0
    24da:	461a      	mov	r2, r3
    24dc:	4904      	ldr	r1, [pc, #16]	; (24f0 <TIMER_CCU_init+0x24>)
    24de:	4805      	ldr	r0, [pc, #20]	; (24f4 <TIMER_CCU_init+0x28>)
    24e0:	4b05      	ldr	r3, [pc, #20]	; (24f8 <TIMER_CCU_init+0x2c>)
    24e2:	4798      	blx	r3
}
    24e4:	bf00      	nop
    24e6:	bd80      	pop	{r7, pc}
    24e8:	000024a5 	.word	0x000024a5
    24ec:	00007f1d 	.word	0x00007f1d
    24f0:	42000c00 	.word	0x42000c00
    24f4:	20009eb8 	.word	0x20009eb8
    24f8:	00003259 	.word	0x00003259

000024fc <CDCUSB_PORT_init>:

void CDCUSB_PORT_init(void)
{
    24fc:	b580      	push	{r7, lr}
    24fe:	af00      	add	r7, sp, #0

	gpio_set_pin_direction(PA24,
    2500:	2102      	movs	r1, #2
    2502:	2018      	movs	r0, #24
    2504:	4b0f      	ldr	r3, [pc, #60]	; (2544 <CDCUSB_PORT_init+0x48>)
    2506:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA24,
    2508:	2100      	movs	r1, #0
    250a:	2018      	movs	r0, #24
    250c:	4b0e      	ldr	r3, [pc, #56]	; (2548 <CDCUSB_PORT_init+0x4c>)
    250e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    2510:	2100      	movs	r1, #0
    2512:	2018      	movs	r0, #24
    2514:	4b0d      	ldr	r3, [pc, #52]	; (254c <CDCUSB_PORT_init+0x50>)
    2516:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA24,
    2518:	490d      	ldr	r1, [pc, #52]	; (2550 <CDCUSB_PORT_init+0x54>)
    251a:	2018      	movs	r0, #24
    251c:	4b0d      	ldr	r3, [pc, #52]	; (2554 <CDCUSB_PORT_init+0x58>)
    251e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    2520:	2102      	movs	r1, #2
    2522:	2019      	movs	r0, #25
    2524:	4b07      	ldr	r3, [pc, #28]	; (2544 <CDCUSB_PORT_init+0x48>)
    2526:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(PA25,
    2528:	2100      	movs	r1, #0
    252a:	2019      	movs	r0, #25
    252c:	4b06      	ldr	r3, [pc, #24]	; (2548 <CDCUSB_PORT_init+0x4c>)
    252e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    2530:	2100      	movs	r1, #0
    2532:	2019      	movs	r0, #25
    2534:	4b05      	ldr	r3, [pc, #20]	; (254c <CDCUSB_PORT_init+0x50>)
    2536:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA25,
    2538:	4907      	ldr	r1, [pc, #28]	; (2558 <CDCUSB_PORT_init+0x5c>)
    253a:	2019      	movs	r0, #25
    253c:	4b05      	ldr	r3, [pc, #20]	; (2554 <CDCUSB_PORT_init+0x58>)
    253e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    2540:	bf00      	nop
    2542:	bd80      	pop	{r7, pc}
    2544:	00001ae9 	.word	0x00001ae9
    2548:	00001b21 	.word	0x00001b21
    254c:	00001a95 	.word	0x00001a95
    2550:	00180007 	.word	0x00180007
    2554:	00001ac9 	.word	0x00001ac9
    2558:	00190007 	.word	0x00190007

0000255c <CDCUSB_CLOCK_init>:
#if (CONF_GCLK_USB_FREQUENCY > (48000000 + 48000000 / 400)) || (CONF_GCLK_USB_FREQUENCY < (48000000 - 48000000 / 400))
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif

void CDCUSB_CLOCK_init(void)
{
    255c:	b580      	push	{r7, lr}
    255e:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
    2560:	2242      	movs	r2, #66	; 0x42
    2562:	210a      	movs	r1, #10
    2564:	4805      	ldr	r0, [pc, #20]	; (257c <CDCUSB_CLOCK_init+0x20>)
    2566:	4b06      	ldr	r3, [pc, #24]	; (2580 <CDCUSB_CLOCK_init+0x24>)
    2568:	4798      	blx	r3
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
    256a:	4806      	ldr	r0, [pc, #24]	; (2584 <CDCUSB_CLOCK_init+0x28>)
    256c:	4b06      	ldr	r3, [pc, #24]	; (2588 <CDCUSB_CLOCK_init+0x2c>)
    256e:	4798      	blx	r3
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
    2570:	4804      	ldr	r0, [pc, #16]	; (2584 <CDCUSB_CLOCK_init+0x28>)
    2572:	4b06      	ldr	r3, [pc, #24]	; (258c <CDCUSB_CLOCK_init+0x30>)
    2574:	4798      	blx	r3
}
    2576:	bf00      	nop
    2578:	bd80      	pop	{r7, pc}
    257a:	bf00      	nop
    257c:	40001c00 	.word	0x40001c00
    2580:	00001275 	.word	0x00001275
    2584:	40000800 	.word	0x40000800
    2588:	0000129b 	.word	0x0000129b
    258c:	000013bb 	.word	0x000013bb

00002590 <CDCUSB_init>:

void CDCUSB_init(void)
{
    2590:	b580      	push	{r7, lr}
    2592:	af00      	add	r7, sp, #0
	CDCUSB_CLOCK_init();
    2594:	4b03      	ldr	r3, [pc, #12]	; (25a4 <CDCUSB_init+0x14>)
    2596:	4798      	blx	r3
	usb_d_init();
    2598:	4b03      	ldr	r3, [pc, #12]	; (25a8 <CDCUSB_init+0x18>)
    259a:	4798      	blx	r3
	CDCUSB_PORT_init();
    259c:	4b03      	ldr	r3, [pc, #12]	; (25ac <CDCUSB_init+0x1c>)
    259e:	4798      	blx	r3
}
    25a0:	bf00      	nop
    25a2:	bd80      	pop	{r7, pc}
    25a4:	0000255d 	.word	0x0000255d
    25a8:	00003ab5 	.word	0x00003ab5
    25ac:	000024fd 	.word	0x000024fd

000025b0 <WATCHDOG_CLOCK_init>:

void WATCHDOG_CLOCK_init(void)
{
    25b0:	b580      	push	{r7, lr}
    25b2:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
    25b4:	4802      	ldr	r0, [pc, #8]	; (25c0 <WATCHDOG_CLOCK_init+0x10>)
    25b6:	4b03      	ldr	r3, [pc, #12]	; (25c4 <WATCHDOG_CLOCK_init+0x14>)
    25b8:	4798      	blx	r3
}
    25ba:	bf00      	nop
    25bc:	bd80      	pop	{r7, pc}
    25be:	bf00      	nop
    25c0:	40000800 	.word	0x40000800
    25c4:	0000131b 	.word	0x0000131b

000025c8 <WATCHDOG_init>:

void WATCHDOG_init(void)
{
    25c8:	b580      	push	{r7, lr}
    25ca:	af00      	add	r7, sp, #0
	WATCHDOG_CLOCK_init();
    25cc:	4b03      	ldr	r3, [pc, #12]	; (25dc <WATCHDOG_init+0x14>)
    25ce:	4798      	blx	r3
	wdt_init(&WATCHDOG, WDT);
    25d0:	4903      	ldr	r1, [pc, #12]	; (25e0 <WATCHDOG_init+0x18>)
    25d2:	4804      	ldr	r0, [pc, #16]	; (25e4 <WATCHDOG_init+0x1c>)
    25d4:	4b04      	ldr	r3, [pc, #16]	; (25e8 <WATCHDOG_init+0x20>)
    25d6:	4798      	blx	r3
}
    25d8:	bf00      	nop
    25da:	bd80      	pop	{r7, pc}
    25dc:	000025b1 	.word	0x000025b1
    25e0:	40002000 	.word	0x40002000
    25e4:	20009fa0 	.word	0x20009fa0
    25e8:	00001b69 	.word	0x00001b69

000025ec <CAN_CCU_PORT_init>:

void CAN_CCU_PORT_init(void)
{
    25ec:	b580      	push	{r7, lr}
    25ee:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, PINMUX_PB13H_CAN1_RX);
    25f0:	4904      	ldr	r1, [pc, #16]	; (2604 <CAN_CCU_PORT_init+0x18>)
    25f2:	202d      	movs	r0, #45	; 0x2d
    25f4:	4b04      	ldr	r3, [pc, #16]	; (2608 <CAN_CCU_PORT_init+0x1c>)
    25f6:	4798      	blx	r3

	gpio_set_pin_function(PB12, PINMUX_PB12H_CAN1_TX);
    25f8:	4904      	ldr	r1, [pc, #16]	; (260c <CAN_CCU_PORT_init+0x20>)
    25fa:	202c      	movs	r0, #44	; 0x2c
    25fc:	4b02      	ldr	r3, [pc, #8]	; (2608 <CAN_CCU_PORT_init+0x1c>)
    25fe:	4798      	blx	r3
}
    2600:	bf00      	nop
    2602:	bd80      	pop	{r7, pc}
    2604:	002d0007 	.word	0x002d0007
    2608:	00001ac9 	.word	0x00001ac9
    260c:	002c0007 	.word	0x002c0007

00002610 <CAN_CCU_init>:
 * \brief CAN initialization function
 *
 * Enables CAN peripheral, clocks and initializes CAN driver
 */
void CAN_CCU_init(void)
{
    2610:	b580      	push	{r7, lr}
    2612:	af00      	add	r7, sp, #0
	hri_mclk_set_AHBMASK_CAN1_bit(MCLK);
    2614:	4807      	ldr	r0, [pc, #28]	; (2634 <CAN_CCU_init+0x24>)
    2616:	4b08      	ldr	r3, [pc, #32]	; (2638 <CAN_CCU_init+0x28>)
    2618:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, CAN1_GCLK_ID, CONF_GCLK_CAN1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    261a:	2249      	movs	r2, #73	; 0x49
    261c:	211c      	movs	r1, #28
    261e:	4807      	ldr	r0, [pc, #28]	; (263c <CAN_CCU_init+0x2c>)
    2620:	4b07      	ldr	r3, [pc, #28]	; (2640 <CAN_CCU_init+0x30>)
    2622:	4798      	blx	r3
	can_async_init(&CAN_CCU, CAN1);
    2624:	4907      	ldr	r1, [pc, #28]	; (2644 <CAN_CCU_init+0x34>)
    2626:	4808      	ldr	r0, [pc, #32]	; (2648 <CAN_CCU_init+0x38>)
    2628:	4b08      	ldr	r3, [pc, #32]	; (264c <CAN_CCU_init+0x3c>)
    262a:	4798      	blx	r3
	CAN_CCU_PORT_init();
    262c:	4b08      	ldr	r3, [pc, #32]	; (2650 <CAN_CCU_init+0x40>)
    262e:	4798      	blx	r3
}
    2630:	bf00      	nop
    2632:	bd80      	pop	{r7, pc}
    2634:	40000800 	.word	0x40000800
    2638:	000012db 	.word	0x000012db
    263c:	40001c00 	.word	0x40001c00
    2640:	00001275 	.word	0x00001275
    2644:	42000400 	.word	0x42000400
    2648:	20009ef8 	.word	0x20009ef8
    264c:	000028b5 	.word	0x000028b5
    2650:	000025ed 	.word	0x000025ed

00002654 <system_init>:

void system_init(void)
{
    2654:	b580      	push	{r7, lr}
    2656:	af00      	add	r7, sp, #0
	init_mcu();
    2658:	4b5f      	ldr	r3, [pc, #380]	; (27d8 <system_init+0x184>)
    265a:	4798      	blx	r3

	// GPIO on PA07

	gpio_set_pin_level(iAlcFwIsAlive,
    265c:	2100      	movs	r1, #0
    265e:	2007      	movs	r0, #7
    2660:	4b5e      	ldr	r3, [pc, #376]	; (27dc <system_init+0x188>)
    2662:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(iAlcFwIsAlive, GPIO_DIRECTION_OUT);
    2664:	2102      	movs	r1, #2
    2666:	2007      	movs	r0, #7
    2668:	4b5d      	ldr	r3, [pc, #372]	; (27e0 <system_init+0x18c>)
    266a:	4798      	blx	r3

	gpio_set_pin_function(iAlcFwIsAlive, GPIO_PIN_FUNCTION_OFF);
    266c:	f04f 31ff 	mov.w	r1, #4294967295
    2670:	2007      	movs	r0, #7
    2672:	4b5c      	ldr	r3, [pc, #368]	; (27e4 <system_init+0x190>)
    2674:	4798      	blx	r3

	// GPIO on PA15

	gpio_set_pin_level(CS_FLASH,
    2676:	2101      	movs	r1, #1
    2678:	200f      	movs	r0, #15
    267a:	4b58      	ldr	r3, [pc, #352]	; (27dc <system_init+0x188>)
    267c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FLASH, GPIO_DIRECTION_OUT);
    267e:	2102      	movs	r1, #2
    2680:	200f      	movs	r0, #15
    2682:	4b57      	ldr	r3, [pc, #348]	; (27e0 <system_init+0x18c>)
    2684:	4798      	blx	r3

	gpio_set_pin_function(CS_FLASH, GPIO_PIN_FUNCTION_OFF);
    2686:	f04f 31ff 	mov.w	r1, #4294967295
    268a:	200f      	movs	r0, #15
    268c:	4b55      	ldr	r3, [pc, #340]	; (27e4 <system_init+0x190>)
    268e:	4798      	blx	r3

	// GPIO on PA19

	gpio_set_pin_level(CS_FRAM,
    2690:	2101      	movs	r1, #1
    2692:	2013      	movs	r0, #19
    2694:	4b51      	ldr	r3, [pc, #324]	; (27dc <system_init+0x188>)
    2696:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_FRAM, GPIO_DIRECTION_OUT);
    2698:	2102      	movs	r1, #2
    269a:	2013      	movs	r0, #19
    269c:	4b50      	ldr	r3, [pc, #320]	; (27e0 <system_init+0x18c>)
    269e:	4798      	blx	r3

	gpio_set_pin_function(CS_FRAM, GPIO_PIN_FUNCTION_OFF);
    26a0:	f04f 31ff 	mov.w	r1, #4294967295
    26a4:	2013      	movs	r0, #19
    26a6:	4b4f      	ldr	r3, [pc, #316]	; (27e4 <system_init+0x190>)
    26a8:	4798      	blx	r3

	// GPIO on PA27

	gpio_set_pin_level(CS_TEMP2,
    26aa:	2101      	movs	r1, #1
    26ac:	201b      	movs	r0, #27
    26ae:	4b4b      	ldr	r3, [pc, #300]	; (27dc <system_init+0x188>)
    26b0:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP2, GPIO_DIRECTION_OUT);
    26b2:	2102      	movs	r1, #2
    26b4:	201b      	movs	r0, #27
    26b6:	4b4a      	ldr	r3, [pc, #296]	; (27e0 <system_init+0x18c>)
    26b8:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP2, GPIO_PIN_FUNCTION_OFF);
    26ba:	f04f 31ff 	mov.w	r1, #4294967295
    26be:	201b      	movs	r0, #27
    26c0:	4b48      	ldr	r3, [pc, #288]	; (27e4 <system_init+0x190>)
    26c2:	4798      	blx	r3

	// GPIO on PB07

	gpio_set_pin_level(CS_TEMP3,
    26c4:	2101      	movs	r1, #1
    26c6:	2027      	movs	r0, #39	; 0x27
    26c8:	4b44      	ldr	r3, [pc, #272]	; (27dc <system_init+0x188>)
    26ca:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP3, GPIO_DIRECTION_OUT);
    26cc:	2102      	movs	r1, #2
    26ce:	2027      	movs	r0, #39	; 0x27
    26d0:	4b43      	ldr	r3, [pc, #268]	; (27e0 <system_init+0x18c>)
    26d2:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP3, GPIO_PIN_FUNCTION_OFF);
    26d4:	f04f 31ff 	mov.w	r1, #4294967295
    26d8:	2027      	movs	r0, #39	; 0x27
    26da:	4b42      	ldr	r3, [pc, #264]	; (27e4 <system_init+0x190>)
    26dc:	4798      	blx	r3

	// GPIO on PB29

	gpio_set_pin_level(CS_TEMP1,
    26de:	2101      	movs	r1, #1
    26e0:	203d      	movs	r0, #61	; 0x3d
    26e2:	4b3e      	ldr	r3, [pc, #248]	; (27dc <system_init+0x188>)
    26e4:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_TEMP1, GPIO_DIRECTION_OUT);
    26e6:	2102      	movs	r1, #2
    26e8:	203d      	movs	r0, #61	; 0x3d
    26ea:	4b3d      	ldr	r3, [pc, #244]	; (27e0 <system_init+0x18c>)
    26ec:	4798      	blx	r3

	gpio_set_pin_function(CS_TEMP1, GPIO_PIN_FUNCTION_OFF);
    26ee:	f04f 31ff 	mov.w	r1, #4294967295
    26f2:	203d      	movs	r0, #61	; 0x3d
    26f4:	4b3b      	ldr	r3, [pc, #236]	; (27e4 <system_init+0x190>)
    26f6:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(SW0, GPIO_DIRECTION_IN);
    26f8:	2101      	movs	r1, #1
    26fa:	203f      	movs	r0, #63	; 0x3f
    26fc:	4b38      	ldr	r3, [pc, #224]	; (27e0 <system_init+0x18c>)
    26fe:	4798      	blx	r3

	gpio_set_pin_pull_mode(SW0,
    2700:	2101      	movs	r1, #1
    2702:	203f      	movs	r0, #63	; 0x3f
    2704:	4b38      	ldr	r3, [pc, #224]	; (27e8 <system_init+0x194>)
    2706:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(SW0, GPIO_PIN_FUNCTION_OFF);
    2708:	f04f 31ff 	mov.w	r1, #4294967295
    270c:	203f      	movs	r0, #63	; 0x3f
    270e:	4b35      	ldr	r3, [pc, #212]	; (27e4 <system_init+0x190>)
    2710:	4798      	blx	r3

	// GPIO on PC13

	gpio_set_pin_level(CAN_STDBY,
    2712:	2100      	movs	r1, #0
    2714:	204d      	movs	r0, #77	; 0x4d
    2716:	4b31      	ldr	r3, [pc, #196]	; (27dc <system_init+0x188>)
    2718:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CAN_STDBY, GPIO_DIRECTION_OUT);
    271a:	2102      	movs	r1, #2
    271c:	204d      	movs	r0, #77	; 0x4d
    271e:	4b30      	ldr	r3, [pc, #192]	; (27e0 <system_init+0x18c>)
    2720:	4798      	blx	r3

	gpio_set_pin_function(CAN_STDBY, GPIO_PIN_FUNCTION_OFF);
    2722:	f04f 31ff 	mov.w	r1, #4294967295
    2726:	204d      	movs	r0, #77	; 0x4d
    2728:	4b2e      	ldr	r3, [pc, #184]	; (27e4 <system_init+0x190>)
    272a:	4798      	blx	r3

	// GPIO on PC14

	gpio_set_pin_level(CS_Holt,
    272c:	2101      	movs	r1, #1
    272e:	204e      	movs	r0, #78	; 0x4e
    2730:	4b2a      	ldr	r3, [pc, #168]	; (27dc <system_init+0x188>)
    2732:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(CS_Holt, GPIO_DIRECTION_OUT);
    2734:	2102      	movs	r1, #2
    2736:	204e      	movs	r0, #78	; 0x4e
    2738:	4b29      	ldr	r3, [pc, #164]	; (27e0 <system_init+0x18c>)
    273a:	4798      	blx	r3

	gpio_set_pin_function(CS_Holt, GPIO_PIN_FUNCTION_OFF);
    273c:	f04f 31ff 	mov.w	r1, #4294967295
    2740:	204e      	movs	r0, #78	; 0x4e
    2742:	4b28      	ldr	r3, [pc, #160]	; (27e4 <system_init+0x190>)
    2744:	4798      	blx	r3

	// GPIO on PC15

	gpio_set_pin_level(Ethernet_Led,
    2746:	2100      	movs	r1, #0
    2748:	204f      	movs	r0, #79	; 0x4f
    274a:	4b24      	ldr	r3, [pc, #144]	; (27dc <system_init+0x188>)
    274c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Ethernet_Led, GPIO_DIRECTION_OUT);
    274e:	2102      	movs	r1, #2
    2750:	204f      	movs	r0, #79	; 0x4f
    2752:	4b23      	ldr	r3, [pc, #140]	; (27e0 <system_init+0x18c>)
    2754:	4798      	blx	r3

	gpio_set_pin_function(Ethernet_Led, GPIO_PIN_FUNCTION_OFF);
    2756:	f04f 31ff 	mov.w	r1, #4294967295
    275a:	204f      	movs	r0, #79	; 0x4f
    275c:	4b21      	ldr	r3, [pc, #132]	; (27e4 <system_init+0x190>)
    275e:	4798      	blx	r3

	// GPIO on PC18

	gpio_set_pin_level(LED0,
    2760:	2100      	movs	r1, #0
    2762:	2052      	movs	r0, #82	; 0x52
    2764:	4b1d      	ldr	r3, [pc, #116]	; (27dc <system_init+0x188>)
    2766:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    2768:	2102      	movs	r1, #2
    276a:	2052      	movs	r0, #82	; 0x52
    276c:	4b1c      	ldr	r3, [pc, #112]	; (27e0 <system_init+0x18c>)
    276e:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
    2770:	f04f 31ff 	mov.w	r1, #4294967295
    2774:	2052      	movs	r0, #82	; 0x52
    2776:	4b1b      	ldr	r3, [pc, #108]	; (27e4 <system_init+0x190>)
    2778:	4798      	blx	r3

	CRC_CALC_init();
    277a:	4b1c      	ldr	r3, [pc, #112]	; (27ec <system_init+0x198>)
    277c:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
    277e:	4b1c      	ldr	r3, [pc, #112]	; (27f0 <system_init+0x19c>)
    2780:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    2782:	4b1c      	ldr	r3, [pc, #112]	; (27f4 <system_init+0x1a0>)
    2784:	4798      	blx	r3

	QSPI_N25Q256_init();
    2786:	4b1c      	ldr	r3, [pc, #112]	; (27f8 <system_init+0x1a4>)
    2788:	4798      	blx	r3

	DATETIME_CLOCK_init();
    278a:	4b1c      	ldr	r3, [pc, #112]	; (27fc <system_init+0x1a8>)
    278c:	4798      	blx	r3

	I2C_HEATERS_init();
    278e:	4b1c      	ldr	r3, [pc, #112]	; (2800 <system_init+0x1ac>)
    2790:	4798      	blx	r3

	SPI_TEMP_init();
    2792:	4b1c      	ldr	r3, [pc, #112]	; (2804 <system_init+0x1b0>)
    2794:	4798      	blx	r3

	I2C_FLAPPER_VALVE_init();
    2796:	4b1c      	ldr	r3, [pc, #112]	; (2808 <system_init+0x1b4>)
    2798:	4798      	blx	r3

	SPI_HI3593_init();
    279a:	4b1c      	ldr	r3, [pc, #112]	; (280c <system_init+0x1b8>)
    279c:	4798      	blx	r3

	I2C_FANS_init();
    279e:	4b1c      	ldr	r3, [pc, #112]	; (2810 <system_init+0x1bc>)
    27a0:	4798      	blx	r3

	TIMER_USB_init();
    27a2:	4b1c      	ldr	r3, [pc, #112]	; (2814 <system_init+0x1c0>)
    27a4:	4798      	blx	r3
	TIMER_ARINC_init();
    27a6:	4b1c      	ldr	r3, [pc, #112]	; (2818 <system_init+0x1c4>)
    27a8:	4798      	blx	r3
	TIMER_MAINTENANCE_init();
    27aa:	4b1c      	ldr	r3, [pc, #112]	; (281c <system_init+0x1c8>)
    27ac:	4798      	blx	r3
	TIMER_INTERFACE_init();
    27ae:	4b1c      	ldr	r3, [pc, #112]	; (2820 <system_init+0x1cc>)
    27b0:	4798      	blx	r3
	TIMER_EVENT_init();
    27b2:	4b1c      	ldr	r3, [pc, #112]	; (2824 <system_init+0x1d0>)
    27b4:	4798      	blx	r3
	LIVE_PULSE_init();
    27b6:	4b1c      	ldr	r3, [pc, #112]	; (2828 <system_init+0x1d4>)
    27b8:	4798      	blx	r3

	TIMER_HVAC_init();
    27ba:	4b1c      	ldr	r3, [pc, #112]	; (282c <system_init+0x1d8>)
    27bc:	4798      	blx	r3

	TIMER_TEMPERATURES_init();
    27be:	4b1c      	ldr	r3, [pc, #112]	; (2830 <system_init+0x1dc>)
    27c0:	4798      	blx	r3

	TIMER_CCU_init();
    27c2:	4b1c      	ldr	r3, [pc, #112]	; (2834 <system_init+0x1e0>)
    27c4:	4798      	blx	r3

	CDCUSB_init();
    27c6:	4b1c      	ldr	r3, [pc, #112]	; (2838 <system_init+0x1e4>)
    27c8:	4798      	blx	r3

	WATCHDOG_init();
    27ca:	4b1c      	ldr	r3, [pc, #112]	; (283c <system_init+0x1e8>)
    27cc:	4798      	blx	r3
	CAN_CCU_init();
    27ce:	4b1c      	ldr	r3, [pc, #112]	; (2840 <system_init+0x1ec>)
    27d0:	4798      	blx	r3
}
    27d2:	bf00      	nop
    27d4:	bd80      	pop	{r7, pc}
    27d6:	bf00      	nop
    27d8:	00001b59 	.word	0x00001b59
    27dc:	00001b21 	.word	0x00001b21
    27e0:	00001ae9 	.word	0x00001ae9
    27e4:	00001ac9 	.word	0x00001ac9
    27e8:	00001a95 	.word	0x00001a95
    27ec:	00001bb9 	.word	0x00001bb9
    27f0:	00001be5 	.word	0x00001be5
    27f4:	00001d0d 	.word	0x00001d0d
    27f8:	00001e55 	.word	0x00001e55
    27fc:	00001e99 	.word	0x00001e99
    2800:	00001f29 	.word	0x00001f29
    2804:	00001ff5 	.word	0x00001ff5
    2808:	0000208d 	.word	0x0000208d
    280c:	00002159 	.word	0x00002159
    2810:	000021f1 	.word	0x000021f1
    2814:	0000221d 	.word	0x0000221d
    2818:	00002265 	.word	0x00002265
    281c:	000022ad 	.word	0x000022ad
    2820:	000022f5 	.word	0x000022f5
    2824:	0000233d 	.word	0x0000233d
    2828:	000023bd 	.word	0x000023bd
    282c:	0000241d 	.word	0x0000241d
    2830:	00002475 	.word	0x00002475
    2834:	000024cd 	.word	0x000024cd
    2838:	00002591 	.word	0x00002591
    283c:	000025c9 	.word	0x000025c9
    2840:	00002611 	.word	0x00002611

00002844 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    2844:	b580      	push	{r7, lr}
    2846:	b084      	sub	sp, #16
    2848:	af00      	add	r7, sp, #0
    284a:	6078      	str	r0, [r7, #4]
    284c:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    284e:	2300      	movs	r3, #0
    2850:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    2852:	687b      	ldr	r3, [r7, #4]
    2854:	2b00      	cmp	r3, #0
    2856:	bf14      	ite	ne
    2858:	2301      	movne	r3, #1
    285a:	2300      	moveq	r3, #0
    285c:	b2db      	uxtb	r3, r3
    285e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    2862:	4911      	ldr	r1, [pc, #68]	; (28a8 <calendar_init+0x64>)
    2864:	4618      	mov	r0, r3
    2866:	4b11      	ldr	r3, [pc, #68]	; (28ac <calendar_init+0x68>)
    2868:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    286a:	687b      	ldr	r3, [r7, #4]
    286c:	681a      	ldr	r2, [r3, #0]
    286e:	683b      	ldr	r3, [r7, #0]
    2870:	429a      	cmp	r2, r3
    2872:	d101      	bne.n	2878 <calendar_init+0x34>
		/* Already initialized with current configuration */
		return ERR_NONE;
    2874:	2300      	movs	r3, #0
    2876:	e013      	b.n	28a0 <calendar_init+0x5c>
	} else if (calendar->device.hw != NULL) {
    2878:	687b      	ldr	r3, [r7, #4]
    287a:	681b      	ldr	r3, [r3, #0]
    287c:	2b00      	cmp	r3, #0
    287e:	d002      	beq.n	2886 <calendar_init+0x42>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
    2880:	f06f 0311 	mvn.w	r3, #17
    2884:	e00c      	b.n	28a0 <calendar_init+0x5c>
	}
	calendar->device.hw = (void *)hw;
    2886:	687b      	ldr	r3, [r7, #4]
    2888:	683a      	ldr	r2, [r7, #0]
    288a:	601a      	str	r2, [r3, #0]
	ret                 = _calendar_init(&calendar->device);
    288c:	687b      	ldr	r3, [r7, #4]
    288e:	4618      	mov	r0, r3
    2890:	4b07      	ldr	r3, [pc, #28]	; (28b0 <calendar_init+0x6c>)
    2892:	4798      	blx	r3
    2894:	60f8      	str	r0, [r7, #12]
	calendar->base_year = DEFAULT_BASE_YEAR;
    2896:	687b      	ldr	r3, [r7, #4]
    2898:	f240 72b2 	movw	r2, #1970	; 0x7b2
    289c:	619a      	str	r2, [r3, #24]

	return ret;
    289e:	68fb      	ldr	r3, [r7, #12]
}
    28a0:	4618      	mov	r0, r3
    28a2:	3710      	adds	r7, #16
    28a4:	46bd      	mov	sp, r7
    28a6:	bd80      	pop	{r7, pc}
    28a8:	00013a54 	.word	0x00013a54
    28ac:	0000405d 	.word	0x0000405d
    28b0:	00006419 	.word	0x00006419

000028b4 <can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t can_async_init(struct can_async_descriptor *const descr, void *const hw)
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
    28bc:	6039      	str	r1, [r7, #0]
	int32_t rc;

	ASSERT(descr && hw);
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	2b00      	cmp	r3, #0
    28c2:	d004      	beq.n	28ce <can_async_init+0x1a>
    28c4:	683b      	ldr	r3, [r7, #0]
    28c6:	2b00      	cmp	r3, #0
    28c8:	d001      	beq.n	28ce <can_async_init+0x1a>
    28ca:	2301      	movs	r3, #1
    28cc:	e000      	b.n	28d0 <can_async_init+0x1c>
    28ce:	2300      	movs	r3, #0
    28d0:	f003 0301 	and.w	r3, r3, #1
    28d4:	b2db      	uxtb	r3, r3
    28d6:	2241      	movs	r2, #65	; 0x41
    28d8:	490e      	ldr	r1, [pc, #56]	; (2914 <can_async_init+0x60>)
    28da:	4618      	mov	r0, r3
    28dc:	4b0e      	ldr	r3, [pc, #56]	; (2918 <can_async_init+0x64>)
    28de:	4798      	blx	r3

	rc = _can_async_init(&descr->dev, hw);
    28e0:	687b      	ldr	r3, [r7, #4]
    28e2:	6839      	ldr	r1, [r7, #0]
    28e4:	4618      	mov	r0, r3
    28e6:	4b0d      	ldr	r3, [pc, #52]	; (291c <can_async_init+0x68>)
    28e8:	4798      	blx	r3
    28ea:	60f8      	str	r0, [r7, #12]
	if (rc) {
    28ec:	68fb      	ldr	r3, [r7, #12]
    28ee:	2b00      	cmp	r3, #0
    28f0:	d001      	beq.n	28f6 <can_async_init+0x42>
		return rc;
    28f2:	68fb      	ldr	r3, [r7, #12]
    28f4:	e009      	b.n	290a <can_async_init+0x56>
	}
	descr->dev.cb.tx_done     = can_tx_done;
    28f6:	687b      	ldr	r3, [r7, #4]
    28f8:	4a09      	ldr	r2, [pc, #36]	; (2920 <can_async_init+0x6c>)
    28fa:	605a      	str	r2, [r3, #4]
	descr->dev.cb.rx_done     = can_rx_done;
    28fc:	687b      	ldr	r3, [r7, #4]
    28fe:	4a09      	ldr	r2, [pc, #36]	; (2924 <can_async_init+0x70>)
    2900:	609a      	str	r2, [r3, #8]
	descr->dev.cb.irq_handler = can_irq_handler;
    2902:	687b      	ldr	r3, [r7, #4]
    2904:	4a08      	ldr	r2, [pc, #32]	; (2928 <can_async_init+0x74>)
    2906:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    2908:	2300      	movs	r3, #0
}
    290a:	4618      	mov	r0, r3
    290c:	3710      	adds	r7, #16
    290e:	46bd      	mov	sp, r7
    2910:	bd80      	pop	{r7, pc}
    2912:	bf00      	nop
    2914:	00013a70 	.word	0x00013a70
    2918:	0000405d 	.word	0x0000405d
    291c:	000045b9 	.word	0x000045b9
    2920:	0000292d 	.word	0x0000292d
    2924:	00002951 	.word	0x00002951
    2928:	00002975 	.word	0x00002975

0000292c <can_tx_done>:

/**
 * \internal Callback of CAN Message Write finished
 */
static void can_tx_done(struct _can_async_device *dev)
{
    292c:	b580      	push	{r7, lr}
    292e:	b084      	sub	sp, #16
    2930:	af00      	add	r7, sp, #0
    2932:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2934:	687b      	ldr	r3, [r7, #4]
    2936:	60fb      	str	r3, [r7, #12]

	if (descr->cb.tx_done) {
    2938:	68fb      	ldr	r3, [r7, #12]
    293a:	69db      	ldr	r3, [r3, #28]
    293c:	2b00      	cmp	r3, #0
    293e:	d003      	beq.n	2948 <can_tx_done+0x1c>
		descr->cb.tx_done(descr);
    2940:	68fb      	ldr	r3, [r7, #12]
    2942:	69db      	ldr	r3, [r3, #28]
    2944:	68f8      	ldr	r0, [r7, #12]
    2946:	4798      	blx	r3
	}
}
    2948:	bf00      	nop
    294a:	3710      	adds	r7, #16
    294c:	46bd      	mov	sp, r7
    294e:	bd80      	pop	{r7, pc}

00002950 <can_rx_done>:

/**
 * \internal Callback of CAN Message Read finished
 */
static void can_rx_done(struct _can_async_device *dev)
{
    2950:	b580      	push	{r7, lr}
    2952:	b084      	sub	sp, #16
    2954:	af00      	add	r7, sp, #0
    2956:	6078      	str	r0, [r7, #4]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2958:	687b      	ldr	r3, [r7, #4]
    295a:	60fb      	str	r3, [r7, #12]

	if (descr->cb.rx_done) {
    295c:	68fb      	ldr	r3, [r7, #12]
    295e:	6a1b      	ldr	r3, [r3, #32]
    2960:	2b00      	cmp	r3, #0
    2962:	d003      	beq.n	296c <can_rx_done+0x1c>
		descr->cb.rx_done(descr);
    2964:	68fb      	ldr	r3, [r7, #12]
    2966:	6a1b      	ldr	r3, [r3, #32]
    2968:	68f8      	ldr	r0, [r7, #12]
    296a:	4798      	blx	r3
	}
}
    296c:	bf00      	nop
    296e:	3710      	adds	r7, #16
    2970:	46bd      	mov	sp, r7
    2972:	bd80      	pop	{r7, pc}

00002974 <can_irq_handler>:

/**
 * \internal Callback of CAN Interrupt
 */
static void can_irq_handler(struct _can_async_device *dev, enum can_async_interrupt_type type)
{
    2974:	b580      	push	{r7, lr}
    2976:	b084      	sub	sp, #16
    2978:	af00      	add	r7, sp, #0
    297a:	6078      	str	r0, [r7, #4]
    297c:	460b      	mov	r3, r1
    297e:	70fb      	strb	r3, [r7, #3]
	struct can_async_descriptor *const descr = CONTAINER_OF(dev, struct can_async_descriptor, dev);
    2980:	687b      	ldr	r3, [r7, #4]
    2982:	60fb      	str	r3, [r7, #12]

	if (descr->cb.irq_handler) {
    2984:	68fb      	ldr	r3, [r7, #12]
    2986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2988:	2b00      	cmp	r3, #0
    298a:	d005      	beq.n	2998 <can_irq_handler+0x24>
		descr->cb.irq_handler(descr, type);
    298c:	68fb      	ldr	r3, [r7, #12]
    298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2990:	78fa      	ldrb	r2, [r7, #3]
    2992:	4611      	mov	r1, r2
    2994:	68f8      	ldr	r0, [r7, #12]
    2996:	4798      	blx	r3
	}
}
    2998:	bf00      	nop
    299a:	3710      	adds	r7, #16
    299c:	46bd      	mov	sp, r7
    299e:	bd80      	pop	{r7, pc}

000029a0 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    29a0:	b580      	push	{r7, lr}
    29a2:	b082      	sub	sp, #8
    29a4:	af00      	add	r7, sp, #0
    29a6:	6078      	str	r0, [r7, #4]
    29a8:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
    29aa:	687b      	ldr	r3, [r7, #4]
    29ac:	2b00      	cmp	r3, #0
    29ae:	d004      	beq.n	29ba <crc_sync_init+0x1a>
    29b0:	683b      	ldr	r3, [r7, #0]
    29b2:	2b00      	cmp	r3, #0
    29b4:	d001      	beq.n	29ba <crc_sync_init+0x1a>
    29b6:	2301      	movs	r3, #1
    29b8:	e000      	b.n	29bc <crc_sync_init+0x1c>
    29ba:	2300      	movs	r3, #0
    29bc:	f003 0301 	and.w	r3, r3, #1
    29c0:	b2db      	uxtb	r3, r3
    29c2:	222b      	movs	r2, #43	; 0x2b
    29c4:	4906      	ldr	r1, [pc, #24]	; (29e0 <crc_sync_init+0x40>)
    29c6:	4618      	mov	r0, r3
    29c8:	4b06      	ldr	r3, [pc, #24]	; (29e4 <crc_sync_init+0x44>)
    29ca:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	6839      	ldr	r1, [r7, #0]
    29d0:	4618      	mov	r0, r3
    29d2:	4b05      	ldr	r3, [pc, #20]	; (29e8 <crc_sync_init+0x48>)
    29d4:	4798      	blx	r3
    29d6:	4603      	mov	r3, r0
}
    29d8:	4618      	mov	r0, r3
    29da:	3708      	adds	r7, #8
    29dc:	46bd      	mov	sp, r7
    29de:	bd80      	pop	{r7, pc}
    29e0:	00013a8c 	.word	0x00013a8c
    29e4:	0000405d 	.word	0x0000405d
    29e8:	00004cb9 	.word	0x00004cb9

000029ec <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    29ec:	b590      	push	{r4, r7, lr}
    29ee:	b083      	sub	sp, #12
    29f0:	af00      	add	r7, sp, #0
    29f2:	4603      	mov	r3, r0
    29f4:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
    29f6:	4b07      	ldr	r3, [pc, #28]	; (2a14 <delay_us+0x28>)
    29f8:	681c      	ldr	r4, [r3, #0]
    29fa:	88fb      	ldrh	r3, [r7, #6]
    29fc:	4618      	mov	r0, r3
    29fe:	4b06      	ldr	r3, [pc, #24]	; (2a18 <delay_us+0x2c>)
    2a00:	4798      	blx	r3
    2a02:	4603      	mov	r3, r0
    2a04:	4619      	mov	r1, r3
    2a06:	4620      	mov	r0, r4
    2a08:	4b04      	ldr	r3, [pc, #16]	; (2a1c <delay_us+0x30>)
    2a0a:	4798      	blx	r3
}
    2a0c:	bf00      	nop
    2a0e:	370c      	adds	r7, #12
    2a10:	46bd      	mov	sp, r7
    2a12:	bd90      	pop	{r4, r7, pc}
    2a14:	20000b54 	.word	0x20000b54
    2a18:	00004a0d 	.word	0x00004a0d
    2a1c:	00004ba1 	.word	0x00004ba1

00002a20 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2a20:	b590      	push	{r4, r7, lr}
    2a22:	b083      	sub	sp, #12
    2a24:	af00      	add	r7, sp, #0
    2a26:	4603      	mov	r3, r0
    2a28:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2a2a:	4b07      	ldr	r3, [pc, #28]	; (2a48 <delay_ms+0x28>)
    2a2c:	681c      	ldr	r4, [r3, #0]
    2a2e:	88fb      	ldrh	r3, [r7, #6]
    2a30:	4618      	mov	r0, r3
    2a32:	4b06      	ldr	r3, [pc, #24]	; (2a4c <delay_ms+0x2c>)
    2a34:	4798      	blx	r3
    2a36:	4603      	mov	r3, r0
    2a38:	4619      	mov	r1, r3
    2a3a:	4620      	mov	r0, r4
    2a3c:	4b04      	ldr	r3, [pc, #16]	; (2a50 <delay_ms+0x30>)
    2a3e:	4798      	blx	r3
}
    2a40:	bf00      	nop
    2a42:	370c      	adds	r7, #12
    2a44:	46bd      	mov	sp, r7
    2a46:	bd90      	pop	{r4, r7, pc}
    2a48:	20000b54 	.word	0x20000b54
    2a4c:	00004b79 	.word	0x00004b79
    2a50:	00004ba1 	.word	0x00004ba1

00002a54 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2a54:	b580      	push	{r7, lr}
    2a56:	af00      	add	r7, sp, #0
	return _event_system_init();
    2a58:	4b02      	ldr	r3, [pc, #8]	; (2a64 <event_system_init+0x10>)
    2a5a:	4798      	blx	r3
    2a5c:	4603      	mov	r3, r0
}
    2a5e:	4618      	mov	r0, r3
    2a60:	bd80      	pop	{r7, pc}
    2a62:	bf00      	nop
    2a64:	00005475 	.word	0x00005475

00002a68 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
    2a68:	b580      	push	{r7, lr}
    2a6a:	b082      	sub	sp, #8
    2a6c:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2a6e:	2300      	movs	r3, #0
    2a70:	80fb      	strh	r3, [r7, #6]
    2a72:	e00e      	b.n	2a92 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    2a74:	88fb      	ldrh	r3, [r7, #6]
    2a76:	4a0c      	ldr	r2, [pc, #48]	; (2aa8 <ext_irq_init+0x40>)
    2a78:	00db      	lsls	r3, r3, #3
    2a7a:	4413      	add	r3, r2
    2a7c:	f04f 32ff 	mov.w	r2, #4294967295
    2a80:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    2a82:	88fb      	ldrh	r3, [r7, #6]
    2a84:	4a08      	ldr	r2, [pc, #32]	; (2aa8 <ext_irq_init+0x40>)
    2a86:	2100      	movs	r1, #0
    2a88:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2a8c:	88fb      	ldrh	r3, [r7, #6]
    2a8e:	3301      	adds	r3, #1
    2a90:	80fb      	strh	r3, [r7, #6]
    2a92:	88fb      	ldrh	r3, [r7, #6]
    2a94:	2b08      	cmp	r3, #8
    2a96:	d9ed      	bls.n	2a74 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
    2a98:	4804      	ldr	r0, [pc, #16]	; (2aac <ext_irq_init+0x44>)
    2a9a:	4b05      	ldr	r3, [pc, #20]	; (2ab0 <ext_irq_init+0x48>)
    2a9c:	4798      	blx	r3
    2a9e:	4603      	mov	r3, r0
}
    2aa0:	4618      	mov	r0, r3
    2aa2:	3708      	adds	r7, #8
    2aa4:	46bd      	mov	sp, r7
    2aa6:	bd80      	pop	{r7, pc}
    2aa8:	20000b58 	.word	0x20000b58
    2aac:	00002c0d 	.word	0x00002c0d
    2ab0:	00004ff9 	.word	0x00004ff9

00002ab4 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
    2ab4:	b580      	push	{r7, lr}
    2ab6:	b086      	sub	sp, #24
    2ab8:	af00      	add	r7, sp, #0
    2aba:	6078      	str	r0, [r7, #4]
    2abc:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
    2abe:	2300      	movs	r3, #0
    2ac0:	75fb      	strb	r3, [r7, #23]
    2ac2:	2300      	movs	r3, #0
    2ac4:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
    2ac6:	2300      	movs	r3, #0
    2ac8:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
    2aca:	e012      	b.n	2af2 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
    2acc:	7dfb      	ldrb	r3, [r7, #23]
    2ace:	4a4d      	ldr	r2, [pc, #308]	; (2c04 <ext_irq_register+0x150>)
    2ad0:	00db      	lsls	r3, r3, #3
    2ad2:	4413      	add	r3, r2
    2ad4:	685a      	ldr	r2, [r3, #4]
    2ad6:	687b      	ldr	r3, [r7, #4]
    2ad8:	429a      	cmp	r2, r3
    2ada:	d107      	bne.n	2aec <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
    2adc:	7dfb      	ldrb	r3, [r7, #23]
    2ade:	4949      	ldr	r1, [pc, #292]	; (2c04 <ext_irq_register+0x150>)
    2ae0:	683a      	ldr	r2, [r7, #0]
    2ae2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
    2ae6:	2301      	movs	r3, #1
    2ae8:	757b      	strb	r3, [r7, #21]
			break;
    2aea:	e005      	b.n	2af8 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2aec:	7dfb      	ldrb	r3, [r7, #23]
    2aee:	3301      	adds	r3, #1
    2af0:	75fb      	strb	r3, [r7, #23]
    2af2:	7dfb      	ldrb	r3, [r7, #23]
    2af4:	2b08      	cmp	r3, #8
    2af6:	d9e9      	bls.n	2acc <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
    2af8:	683b      	ldr	r3, [r7, #0]
    2afa:	2b00      	cmp	r3, #0
    2afc:	d10e      	bne.n	2b1c <ext_irq_register+0x68>
		if (!found) {
    2afe:	7d7b      	ldrb	r3, [r7, #21]
    2b00:	f083 0301 	eor.w	r3, r3, #1
    2b04:	b2db      	uxtb	r3, r3
    2b06:	2b00      	cmp	r3, #0
    2b08:	d002      	beq.n	2b10 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
    2b0a:	f06f 030c 	mvn.w	r3, #12
    2b0e:	e074      	b.n	2bfa <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    2b10:	2100      	movs	r1, #0
    2b12:	6878      	ldr	r0, [r7, #4]
    2b14:	4b3c      	ldr	r3, [pc, #240]	; (2c08 <ext_irq_register+0x154>)
    2b16:	4798      	blx	r3
    2b18:	4603      	mov	r3, r0
    2b1a:	e06e      	b.n	2bfa <ext_irq_register+0x146>
	}

	if (!found) {
    2b1c:	7d7b      	ldrb	r3, [r7, #21]
    2b1e:	f083 0301 	eor.w	r3, r3, #1
    2b22:	b2db      	uxtb	r3, r3
    2b24:	2b00      	cmp	r3, #0
    2b26:	d05a      	beq.n	2bde <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2b28:	2300      	movs	r3, #0
    2b2a:	75fb      	strb	r3, [r7, #23]
    2b2c:	e016      	b.n	2b5c <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    2b2e:	7dfb      	ldrb	r3, [r7, #23]
    2b30:	4a34      	ldr	r2, [pc, #208]	; (2c04 <ext_irq_register+0x150>)
    2b32:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2b36:	2b00      	cmp	r3, #0
    2b38:	d10d      	bne.n	2b56 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    2b3a:	7dfb      	ldrb	r3, [r7, #23]
    2b3c:	4931      	ldr	r1, [pc, #196]	; (2c04 <ext_irq_register+0x150>)
    2b3e:	683a      	ldr	r2, [r7, #0]
    2b40:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    2b44:	7dfb      	ldrb	r3, [r7, #23]
    2b46:	4a2f      	ldr	r2, [pc, #188]	; (2c04 <ext_irq_register+0x150>)
    2b48:	00db      	lsls	r3, r3, #3
    2b4a:	4413      	add	r3, r2
    2b4c:	687a      	ldr	r2, [r7, #4]
    2b4e:	605a      	str	r2, [r3, #4]
				found           = true;
    2b50:	2301      	movs	r3, #1
    2b52:	757b      	strb	r3, [r7, #21]
				break;
    2b54:	e005      	b.n	2b62 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2b56:	7dfb      	ldrb	r3, [r7, #23]
    2b58:	3301      	adds	r3, #1
    2b5a:	75fb      	strb	r3, [r7, #23]
    2b5c:	7dfb      	ldrb	r3, [r7, #23]
    2b5e:	2b08      	cmp	r3, #8
    2b60:	d9e5      	bls.n	2b2e <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2b62:	e036      	b.n	2bd2 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2b64:	7dfb      	ldrb	r3, [r7, #23]
    2b66:	4a27      	ldr	r2, [pc, #156]	; (2c04 <ext_irq_register+0x150>)
    2b68:	00db      	lsls	r3, r3, #3
    2b6a:	4413      	add	r3, r2
    2b6c:	685a      	ldr	r2, [r3, #4]
    2b6e:	7dbb      	ldrb	r3, [r7, #22]
    2b70:	4924      	ldr	r1, [pc, #144]	; (2c04 <ext_irq_register+0x150>)
    2b72:	00db      	lsls	r3, r3, #3
    2b74:	440b      	add	r3, r1
    2b76:	685b      	ldr	r3, [r3, #4]
    2b78:	429a      	cmp	r2, r3
    2b7a:	d227      	bcs.n	2bcc <ext_irq_register+0x118>
    2b7c:	7dbb      	ldrb	r3, [r7, #22]
    2b7e:	4a21      	ldr	r2, [pc, #132]	; (2c04 <ext_irq_register+0x150>)
    2b80:	00db      	lsls	r3, r3, #3
    2b82:	4413      	add	r3, r2
    2b84:	685b      	ldr	r3, [r3, #4]
    2b86:	f1b3 3fff 	cmp.w	r3, #4294967295
    2b8a:	d01f      	beq.n	2bcc <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    2b8c:	7dbb      	ldrb	r3, [r7, #22]
    2b8e:	491d      	ldr	r1, [pc, #116]	; (2c04 <ext_irq_register+0x150>)
    2b90:	f107 020c 	add.w	r2, r7, #12
    2b94:	00db      	lsls	r3, r3, #3
    2b96:	440b      	add	r3, r1
    2b98:	e893 0003 	ldmia.w	r3, {r0, r1}
    2b9c:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    2ba0:	7dbb      	ldrb	r3, [r7, #22]
    2ba2:	7dfa      	ldrb	r2, [r7, #23]
    2ba4:	4817      	ldr	r0, [pc, #92]	; (2c04 <ext_irq_register+0x150>)
    2ba6:	4917      	ldr	r1, [pc, #92]	; (2c04 <ext_irq_register+0x150>)
    2ba8:	00db      	lsls	r3, r3, #3
    2baa:	4403      	add	r3, r0
    2bac:	00d2      	lsls	r2, r2, #3
    2bae:	440a      	add	r2, r1
    2bb0:	e892 0003 	ldmia.w	r2, {r0, r1}
    2bb4:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    2bb8:	7dfb      	ldrb	r3, [r7, #23]
    2bba:	4a12      	ldr	r2, [pc, #72]	; (2c04 <ext_irq_register+0x150>)
    2bbc:	00db      	lsls	r3, r3, #3
    2bbe:	4413      	add	r3, r2
    2bc0:	f107 020c 	add.w	r2, r7, #12
    2bc4:	e892 0003 	ldmia.w	r2, {r0, r1}
    2bc8:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2bcc:	7dbb      	ldrb	r3, [r7, #22]
    2bce:	3301      	adds	r3, #1
    2bd0:	75bb      	strb	r3, [r7, #22]
    2bd2:	7dbb      	ldrb	r3, [r7, #22]
    2bd4:	2b08      	cmp	r3, #8
    2bd6:	d802      	bhi.n	2bde <ext_irq_register+0x12a>
    2bd8:	7dfb      	ldrb	r3, [r7, #23]
    2bda:	2b08      	cmp	r3, #8
    2bdc:	d9c2      	bls.n	2b64 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    2bde:	7d7b      	ldrb	r3, [r7, #21]
    2be0:	f083 0301 	eor.w	r3, r3, #1
    2be4:	b2db      	uxtb	r3, r3
    2be6:	2b00      	cmp	r3, #0
    2be8:	d002      	beq.n	2bf0 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    2bea:	f06f 030c 	mvn.w	r3, #12
    2bee:	e004      	b.n	2bfa <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    2bf0:	2101      	movs	r1, #1
    2bf2:	6878      	ldr	r0, [r7, #4]
    2bf4:	4b04      	ldr	r3, [pc, #16]	; (2c08 <ext_irq_register+0x154>)
    2bf6:	4798      	blx	r3
    2bf8:	4603      	mov	r3, r0
}
    2bfa:	4618      	mov	r0, r3
    2bfc:	3718      	adds	r7, #24
    2bfe:	46bd      	mov	sp, r7
    2c00:	bd80      	pop	{r7, pc}
    2c02:	bf00      	nop
    2c04:	20000b58 	.word	0x20000b58
    2c08:	0000518d 	.word	0x0000518d

00002c0c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2c0c:	b580      	push	{r7, lr}
    2c0e:	b084      	sub	sp, #16
    2c10:	af00      	add	r7, sp, #0
    2c12:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2c14:	2300      	movs	r3, #0
    2c16:	73fb      	strb	r3, [r7, #15]
    2c18:	2309      	movs	r3, #9
    2c1a:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    2c1c:	e02a      	b.n	2c74 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    2c1e:	7bba      	ldrb	r2, [r7, #14]
    2c20:	7bfb      	ldrb	r3, [r7, #15]
    2c22:	4413      	add	r3, r2
    2c24:	105b      	asrs	r3, r3, #1
    2c26:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    2c28:	7b7b      	ldrb	r3, [r7, #13]
    2c2a:	2b08      	cmp	r3, #8
    2c2c:	d827      	bhi.n	2c7e <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    2c2e:	7b7b      	ldrb	r3, [r7, #13]
    2c30:	4a16      	ldr	r2, [pc, #88]	; (2c8c <process_ext_irq+0x80>)
    2c32:	00db      	lsls	r3, r3, #3
    2c34:	4413      	add	r3, r2
    2c36:	685a      	ldr	r2, [r3, #4]
    2c38:	687b      	ldr	r3, [r7, #4]
    2c3a:	429a      	cmp	r2, r3
    2c3c:	d10b      	bne.n	2c56 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    2c3e:	7b7b      	ldrb	r3, [r7, #13]
    2c40:	4a12      	ldr	r2, [pc, #72]	; (2c8c <process_ext_irq+0x80>)
    2c42:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2c46:	2b00      	cmp	r3, #0
    2c48:	d01b      	beq.n	2c82 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    2c4a:	7b7b      	ldrb	r3, [r7, #13]
    2c4c:	4a0f      	ldr	r2, [pc, #60]	; (2c8c <process_ext_irq+0x80>)
    2c4e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2c52:	4798      	blx	r3
			}
			return;
    2c54:	e015      	b.n	2c82 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    2c56:	7b7b      	ldrb	r3, [r7, #13]
    2c58:	4a0c      	ldr	r2, [pc, #48]	; (2c8c <process_ext_irq+0x80>)
    2c5a:	00db      	lsls	r3, r3, #3
    2c5c:	4413      	add	r3, r2
    2c5e:	685a      	ldr	r2, [r3, #4]
    2c60:	687b      	ldr	r3, [r7, #4]
    2c62:	429a      	cmp	r2, r3
    2c64:	d203      	bcs.n	2c6e <process_ext_irq+0x62>
			lower = middle + 1;
    2c66:	7b7b      	ldrb	r3, [r7, #13]
    2c68:	3301      	adds	r3, #1
    2c6a:	73fb      	strb	r3, [r7, #15]
    2c6c:	e002      	b.n	2c74 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    2c6e:	7b7b      	ldrb	r3, [r7, #13]
    2c70:	3b01      	subs	r3, #1
    2c72:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    2c74:	7bba      	ldrb	r2, [r7, #14]
    2c76:	7bfb      	ldrb	r3, [r7, #15]
    2c78:	429a      	cmp	r2, r3
    2c7a:	d2d0      	bcs.n	2c1e <process_ext_irq+0x12>
    2c7c:	e002      	b.n	2c84 <process_ext_irq+0x78>
			return;
    2c7e:	bf00      	nop
    2c80:	e000      	b.n	2c84 <process_ext_irq+0x78>
			return;
    2c82:	bf00      	nop
		}
	}
}
    2c84:	3710      	adds	r7, #16
    2c86:	46bd      	mov	sp, r7
    2c88:	bd80      	pop	{r7, pc}
    2c8a:	bf00      	nop
    2c8c:	20000b58 	.word	0x20000b58

00002c90 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    2c90:	b580      	push	{r7, lr}
    2c92:	b08a      	sub	sp, #40	; 0x28
    2c94:	af00      	add	r7, sp, #0
    2c96:	60f8      	str	r0, [r7, #12]
    2c98:	60b9      	str	r1, [r7, #8]
    2c9a:	4613      	mov	r3, r2
    2c9c:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2c9e:	68fb      	ldr	r3, [r7, #12]
    2ca0:	3b14      	subs	r3, #20
    2ca2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ca6:	8b9b      	ldrh	r3, [r3, #28]
    2ca8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2caa:	88fb      	ldrh	r3, [r7, #6]
    2cac:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    2cae:	f248 0301 	movw	r3, #32769	; 0x8001
    2cb2:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    2cb4:	68bb      	ldr	r3, [r7, #8]
    2cb6:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2cba:	f107 0214 	add.w	r2, r7, #20
    2cbe:	4611      	mov	r1, r2
    2cc0:	4618      	mov	r0, r3
    2cc2:	4b06      	ldr	r3, [pc, #24]	; (2cdc <i2c_m_sync_read+0x4c>)
    2cc4:	4798      	blx	r3
    2cc6:	6238      	str	r0, [r7, #32]

	if (ret) {
    2cc8:	6a3b      	ldr	r3, [r7, #32]
    2cca:	2b00      	cmp	r3, #0
    2ccc:	d001      	beq.n	2cd2 <i2c_m_sync_read+0x42>
		return ret;
    2cce:	6a3b      	ldr	r3, [r7, #32]
    2cd0:	e000      	b.n	2cd4 <i2c_m_sync_read+0x44>
	}

	return n;
    2cd2:	88fb      	ldrh	r3, [r7, #6]
}
    2cd4:	4618      	mov	r0, r3
    2cd6:	3728      	adds	r7, #40	; 0x28
    2cd8:	46bd      	mov	sp, r7
    2cda:	bd80      	pop	{r7, pc}
    2cdc:	000070a1 	.word	0x000070a1

00002ce0 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    2ce0:	b580      	push	{r7, lr}
    2ce2:	b08a      	sub	sp, #40	; 0x28
    2ce4:	af00      	add	r7, sp, #0
    2ce6:	60f8      	str	r0, [r7, #12]
    2ce8:	60b9      	str	r1, [r7, #8]
    2cea:	4613      	mov	r3, r2
    2cec:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    2cee:	68fb      	ldr	r3, [r7, #12]
    2cf0:	3b14      	subs	r3, #20
    2cf2:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    2cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2cf6:	8b9b      	ldrh	r3, [r3, #28]
    2cf8:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    2cfa:	88fb      	ldrh	r3, [r7, #6]
    2cfc:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    2cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    2d02:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    2d04:	68bb      	ldr	r3, [r7, #8]
    2d06:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    2d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d0a:	f107 0214 	add.w	r2, r7, #20
    2d0e:	4611      	mov	r1, r2
    2d10:	4618      	mov	r0, r3
    2d12:	4b06      	ldr	r3, [pc, #24]	; (2d2c <i2c_m_sync_write+0x4c>)
    2d14:	4798      	blx	r3
    2d16:	6238      	str	r0, [r7, #32]

	if (ret) {
    2d18:	6a3b      	ldr	r3, [r7, #32]
    2d1a:	2b00      	cmp	r3, #0
    2d1c:	d001      	beq.n	2d22 <i2c_m_sync_write+0x42>
		return ret;
    2d1e:	6a3b      	ldr	r3, [r7, #32]
    2d20:	e000      	b.n	2d24 <i2c_m_sync_write+0x44>
	}

	return n;
    2d22:	88fb      	ldrh	r3, [r7, #6]
}
    2d24:	4618      	mov	r0, r3
    2d26:	3728      	adds	r7, #40	; 0x28
    2d28:	46bd      	mov	sp, r7
    2d2a:	bd80      	pop	{r7, pc}
    2d2c:	000070a1 	.word	0x000070a1

00002d30 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    2d30:	b580      	push	{r7, lr}
    2d32:	b084      	sub	sp, #16
    2d34:	af00      	add	r7, sp, #0
    2d36:	6078      	str	r0, [r7, #4]
    2d38:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    2d3a:	687b      	ldr	r3, [r7, #4]
    2d3c:	2b00      	cmp	r3, #0
    2d3e:	bf14      	ite	ne
    2d40:	2301      	movne	r3, #1
    2d42:	2300      	moveq	r3, #0
    2d44:	b2db      	uxtb	r3, r3
    2d46:	225e      	movs	r2, #94	; 0x5e
    2d48:	490c      	ldr	r1, [pc, #48]	; (2d7c <i2c_m_sync_init+0x4c>)
    2d4a:	4618      	mov	r0, r3
    2d4c:	4b0c      	ldr	r3, [pc, #48]	; (2d80 <i2c_m_sync_init+0x50>)
    2d4e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    2d50:	687b      	ldr	r3, [r7, #4]
    2d52:	6839      	ldr	r1, [r7, #0]
    2d54:	4618      	mov	r0, r3
    2d56:	4b0b      	ldr	r3, [pc, #44]	; (2d84 <i2c_m_sync_init+0x54>)
    2d58:	4798      	blx	r3
    2d5a:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    2d5c:	68fb      	ldr	r3, [r7, #12]
    2d5e:	2b00      	cmp	r3, #0
    2d60:	d001      	beq.n	2d66 <i2c_m_sync_init+0x36>
		return init_status;
    2d62:	68fb      	ldr	r3, [r7, #12]
    2d64:	e006      	b.n	2d74 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    2d66:	687b      	ldr	r3, [r7, #4]
    2d68:	4a07      	ldr	r2, [pc, #28]	; (2d88 <i2c_m_sync_init+0x58>)
    2d6a:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    2d6c:	687b      	ldr	r3, [r7, #4]
    2d6e:	4a07      	ldr	r2, [pc, #28]	; (2d8c <i2c_m_sync_init+0x5c>)
    2d70:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    2d72:	2300      	movs	r3, #0
}
    2d74:	4618      	mov	r0, r3
    2d76:	3710      	adds	r7, #16
    2d78:	46bd      	mov	sp, r7
    2d7a:	bd80      	pop	{r7, pc}
    2d7c:	00013aa8 	.word	0x00013aa8
    2d80:	0000405d 	.word	0x0000405d
    2d84:	00006e9d 	.word	0x00006e9d
    2d88:	00002c91 	.word	0x00002c91
    2d8c:	00002ce1 	.word	0x00002ce1

00002d90 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    2d90:	b580      	push	{r7, lr}
    2d92:	b082      	sub	sp, #8
    2d94:	af00      	add	r7, sp, #0
    2d96:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    2d98:	687b      	ldr	r3, [r7, #4]
    2d9a:	4618      	mov	r0, r3
    2d9c:	4b03      	ldr	r3, [pc, #12]	; (2dac <i2c_m_sync_enable+0x1c>)
    2d9e:	4798      	blx	r3
    2da0:	4603      	mov	r3, r0
}
    2da2:	4618      	mov	r0, r3
    2da4:	3708      	adds	r7, #8
    2da6:	46bd      	mov	sp, r7
    2da8:	bd80      	pop	{r7, pc}
    2daa:	bf00      	nop
    2dac:	00006ee5 	.word	0x00006ee5

00002db0 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    2db0:	b480      	push	{r7}
    2db2:	b085      	sub	sp, #20
    2db4:	af00      	add	r7, sp, #0
    2db6:	60f8      	str	r0, [r7, #12]
    2db8:	460b      	mov	r3, r1
    2dba:	607a      	str	r2, [r7, #4]
    2dbc:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    2dbe:	897b      	ldrh	r3, [r7, #10]
    2dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2dc4:	b21a      	sxth	r2, r3
    2dc6:	687b      	ldr	r3, [r7, #4]
    2dc8:	b21b      	sxth	r3, r3
    2dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2dce:	b21b      	sxth	r3, r3
    2dd0:	4313      	orrs	r3, r2
    2dd2:	b21b      	sxth	r3, r3
    2dd4:	b29a      	uxth	r2, r3
    2dd6:	68fb      	ldr	r3, [r7, #12]
    2dd8:	839a      	strh	r2, [r3, #28]
    2dda:	68fb      	ldr	r3, [r7, #12]
    2ddc:	8b9b      	ldrh	r3, [r3, #28]
}
    2dde:	4618      	mov	r0, r3
    2de0:	3714      	adds	r7, #20
    2de2:	46bd      	mov	sp, r7
    2de4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2de8:	4770      	bx	lr

00002dea <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    2dea:	b480      	push	{r7}
    2dec:	b083      	sub	sp, #12
    2dee:	af00      	add	r7, sp, #0
    2df0:	6078      	str	r0, [r7, #4]
    2df2:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    2df4:	687b      	ldr	r3, [r7, #4]
    2df6:	f103 0214 	add.w	r2, r3, #20
    2dfa:	683b      	ldr	r3, [r7, #0]
    2dfc:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2dfe:	2300      	movs	r3, #0
}
    2e00:	4618      	mov	r0, r3
    2e02:	370c      	adds	r7, #12
    2e04:	46bd      	mov	sp, r7
    2e06:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e0a:	4770      	bx	lr

00002e0c <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    2e0c:	b580      	push	{r7, lr}
    2e0e:	b084      	sub	sp, #16
    2e10:	af00      	add	r7, sp, #0
    2e12:	60f8      	str	r0, [r7, #12]
    2e14:	60b9      	str	r1, [r7, #8]
    2e16:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    2e18:	68fb      	ldr	r3, [r7, #12]
    2e1a:	2b00      	cmp	r3, #0
    2e1c:	d004      	beq.n	2e28 <pwm_init+0x1c>
    2e1e:	68bb      	ldr	r3, [r7, #8]
    2e20:	2b00      	cmp	r3, #0
    2e22:	d001      	beq.n	2e28 <pwm_init+0x1c>
    2e24:	2301      	movs	r3, #1
    2e26:	e000      	b.n	2e2a <pwm_init+0x1e>
    2e28:	2300      	movs	r3, #0
    2e2a:	f003 0301 	and.w	r3, r3, #1
    2e2e:	b2db      	uxtb	r3, r3
    2e30:	2233      	movs	r2, #51	; 0x33
    2e32:	490a      	ldr	r1, [pc, #40]	; (2e5c <pwm_init+0x50>)
    2e34:	4618      	mov	r0, r3
    2e36:	4b0a      	ldr	r3, [pc, #40]	; (2e60 <pwm_init+0x54>)
    2e38:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2e3a:	68fb      	ldr	r3, [r7, #12]
    2e3c:	68b9      	ldr	r1, [r7, #8]
    2e3e:	4618      	mov	r0, r3
    2e40:	4b08      	ldr	r3, [pc, #32]	; (2e64 <pwm_init+0x58>)
    2e42:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2e44:	68fb      	ldr	r3, [r7, #12]
    2e46:	4a08      	ldr	r2, [pc, #32]	; (2e68 <pwm_init+0x5c>)
    2e48:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2e4a:	68fb      	ldr	r3, [r7, #12]
    2e4c:	4a07      	ldr	r2, [pc, #28]	; (2e6c <pwm_init+0x60>)
    2e4e:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    2e50:	2300      	movs	r3, #0
}
    2e52:	4618      	mov	r0, r3
    2e54:	3710      	adds	r7, #16
    2e56:	46bd      	mov	sp, r7
    2e58:	bd80      	pop	{r7, pc}
    2e5a:	bf00      	nop
    2e5c:	00013ac4 	.word	0x00013ac4
    2e60:	0000405d 	.word	0x0000405d
    2e64:	00008769 	.word	0x00008769
    2e68:	00002e71 	.word	0x00002e71
    2e6c:	00002e95 	.word	0x00002e95

00002e70 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2e70:	b580      	push	{r7, lr}
    2e72:	b084      	sub	sp, #16
    2e74:	af00      	add	r7, sp, #0
    2e76:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2e78:	687b      	ldr	r3, [r7, #4]
    2e7a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    2e7c:	68fb      	ldr	r3, [r7, #12]
    2e7e:	695b      	ldr	r3, [r3, #20]
    2e80:	2b00      	cmp	r3, #0
    2e82:	d003      	beq.n	2e8c <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    2e84:	68fb      	ldr	r3, [r7, #12]
    2e86:	695b      	ldr	r3, [r3, #20]
    2e88:	68f8      	ldr	r0, [r7, #12]
    2e8a:	4798      	blx	r3
	}
}
    2e8c:	bf00      	nop
    2e8e:	3710      	adds	r7, #16
    2e90:	46bd      	mov	sp, r7
    2e92:	bd80      	pop	{r7, pc}

00002e94 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2e94:	b580      	push	{r7, lr}
    2e96:	b084      	sub	sp, #16
    2e98:	af00      	add	r7, sp, #0
    2e9a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    2e9c:	687b      	ldr	r3, [r7, #4]
    2e9e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    2ea0:	68fb      	ldr	r3, [r7, #12]
    2ea2:	699b      	ldr	r3, [r3, #24]
    2ea4:	2b00      	cmp	r3, #0
    2ea6:	d003      	beq.n	2eb0 <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    2ea8:	68fb      	ldr	r3, [r7, #12]
    2eaa:	699b      	ldr	r3, [r3, #24]
    2eac:	68f8      	ldr	r0, [r7, #12]
    2eae:	4798      	blx	r3
	}
}
    2eb0:	bf00      	nop
    2eb2:	3710      	adds	r7, #16
    2eb4:	46bd      	mov	sp, r7
    2eb6:	bd80      	pop	{r7, pc}

00002eb8 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    2eb8:	b580      	push	{r7, lr}
    2eba:	b082      	sub	sp, #8
    2ebc:	af00      	add	r7, sp, #0
    2ebe:	6078      	str	r0, [r7, #4]
    2ec0:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && hw);
    2ec2:	687b      	ldr	r3, [r7, #4]
    2ec4:	2b00      	cmp	r3, #0
    2ec6:	d004      	beq.n	2ed2 <qspi_sync_init+0x1a>
    2ec8:	683b      	ldr	r3, [r7, #0]
    2eca:	2b00      	cmp	r3, #0
    2ecc:	d001      	beq.n	2ed2 <qspi_sync_init+0x1a>
    2ece:	2301      	movs	r3, #1
    2ed0:	e000      	b.n	2ed4 <qspi_sync_init+0x1c>
    2ed2:	2300      	movs	r3, #0
    2ed4:	f003 0301 	and.w	r3, r3, #1
    2ed8:	b2db      	uxtb	r3, r3
    2eda:	2231      	movs	r2, #49	; 0x31
    2edc:	4906      	ldr	r1, [pc, #24]	; (2ef8 <qspi_sync_init+0x40>)
    2ede:	4618      	mov	r0, r3
    2ee0:	4b06      	ldr	r3, [pc, #24]	; (2efc <qspi_sync_init+0x44>)
    2ee2:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    2ee4:	687b      	ldr	r3, [r7, #4]
    2ee6:	6839      	ldr	r1, [r7, #0]
    2ee8:	4618      	mov	r0, r3
    2eea:	4b05      	ldr	r3, [pc, #20]	; (2f00 <qspi_sync_init+0x48>)
    2eec:	4798      	blx	r3
    2eee:	4603      	mov	r3, r0
}
    2ef0:	4618      	mov	r0, r3
    2ef2:	3708      	adds	r7, #8
    2ef4:	46bd      	mov	sp, r7
    2ef6:	bd80      	pop	{r7, pc}
    2ef8:	00013adc 	.word	0x00013adc
    2efc:	0000405d 	.word	0x0000405d
    2f00:	00006055 	.word	0x00006055

00002f04 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    2f04:	b580      	push	{r7, lr}
    2f06:	b082      	sub	sp, #8
    2f08:	af00      	add	r7, sp, #0
    2f0a:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2f0c:	687b      	ldr	r3, [r7, #4]
    2f0e:	2b00      	cmp	r3, #0
    2f10:	bf14      	ite	ne
    2f12:	2301      	movne	r3, #1
    2f14:	2300      	moveq	r3, #0
    2f16:	b2db      	uxtb	r3, r3
    2f18:	223f      	movs	r2, #63	; 0x3f
    2f1a:	4906      	ldr	r1, [pc, #24]	; (2f34 <qspi_sync_enable+0x30>)
    2f1c:	4618      	mov	r0, r3
    2f1e:	4b06      	ldr	r3, [pc, #24]	; (2f38 <qspi_sync_enable+0x34>)
    2f20:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    2f22:	687b      	ldr	r3, [r7, #4]
    2f24:	4618      	mov	r0, r3
    2f26:	4b05      	ldr	r3, [pc, #20]	; (2f3c <qspi_sync_enable+0x38>)
    2f28:	4798      	blx	r3
    2f2a:	4603      	mov	r3, r0
}
    2f2c:	4618      	mov	r0, r3
    2f2e:	3708      	adds	r7, #8
    2f30:	46bd      	mov	sp, r7
    2f32:	bd80      	pop	{r7, pc}
    2f34:	00013adc 	.word	0x00013adc
    2f38:	0000405d 	.word	0x0000405d
    2f3c:	000060c9 	.word	0x000060c9

00002f40 <qspi_sync_disable>:

int32_t qspi_sync_disable(struct qspi_sync_descriptor *qspi)
{
    2f40:	b580      	push	{r7, lr}
    2f42:	b082      	sub	sp, #8
    2f44:	af00      	add	r7, sp, #0
    2f46:	6078      	str	r0, [r7, #4]
	ASSERT(qspi);
    2f48:	687b      	ldr	r3, [r7, #4]
    2f4a:	2b00      	cmp	r3, #0
    2f4c:	bf14      	ite	ne
    2f4e:	2301      	movne	r3, #1
    2f50:	2300      	moveq	r3, #0
    2f52:	b2db      	uxtb	r3, r3
    2f54:	2246      	movs	r2, #70	; 0x46
    2f56:	4906      	ldr	r1, [pc, #24]	; (2f70 <qspi_sync_disable+0x30>)
    2f58:	4618      	mov	r0, r3
    2f5a:	4b06      	ldr	r3, [pc, #24]	; (2f74 <qspi_sync_disable+0x34>)
    2f5c:	4798      	blx	r3

	return _qspi_sync_disable(&qspi->dev);
    2f5e:	687b      	ldr	r3, [r7, #4]
    2f60:	4618      	mov	r0, r3
    2f62:	4b05      	ldr	r3, [pc, #20]	; (2f78 <qspi_sync_disable+0x38>)
    2f64:	4798      	blx	r3
    2f66:	4603      	mov	r3, r0
}
    2f68:	4618      	mov	r0, r3
    2f6a:	3708      	adds	r7, #8
    2f6c:	46bd      	mov	sp, r7
    2f6e:	bd80      	pop	{r7, pc}
    2f70:	00013adc 	.word	0x00013adc
    2f74:	0000405d 	.word	0x0000405d
    2f78:	000060ed 	.word	0x000060ed

00002f7c <qspi_sync_serial_run_command>:

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    2f7c:	b580      	push	{r7, lr}
    2f7e:	b082      	sub	sp, #8
    2f80:	af00      	add	r7, sp, #0
    2f82:	6078      	str	r0, [r7, #4]
    2f84:	6039      	str	r1, [r7, #0]
	ASSERT(qspi && cmd);
    2f86:	687b      	ldr	r3, [r7, #4]
    2f88:	2b00      	cmp	r3, #0
    2f8a:	d004      	beq.n	2f96 <qspi_sync_serial_run_command+0x1a>
    2f8c:	683b      	ldr	r3, [r7, #0]
    2f8e:	2b00      	cmp	r3, #0
    2f90:	d001      	beq.n	2f96 <qspi_sync_serial_run_command+0x1a>
    2f92:	2301      	movs	r3, #1
    2f94:	e000      	b.n	2f98 <qspi_sync_serial_run_command+0x1c>
    2f96:	2300      	movs	r3, #0
    2f98:	f003 0301 	and.w	r3, r3, #1
    2f9c:	b2db      	uxtb	r3, r3
    2f9e:	224d      	movs	r2, #77	; 0x4d
    2fa0:	4906      	ldr	r1, [pc, #24]	; (2fbc <qspi_sync_serial_run_command+0x40>)
    2fa2:	4618      	mov	r0, r3
    2fa4:	4b06      	ldr	r3, [pc, #24]	; (2fc0 <qspi_sync_serial_run_command+0x44>)
    2fa6:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    2fa8:	687b      	ldr	r3, [r7, #4]
    2faa:	6839      	ldr	r1, [r7, #0]
    2fac:	4618      	mov	r0, r3
    2fae:	4b05      	ldr	r3, [pc, #20]	; (2fc4 <qspi_sync_serial_run_command+0x48>)
    2fb0:	4798      	blx	r3
    2fb2:	4603      	mov	r3, r0
}
    2fb4:	4618      	mov	r0, r3
    2fb6:	3708      	adds	r7, #8
    2fb8:	46bd      	mov	sp, r7
    2fba:	bd80      	pop	{r7, pc}
    2fbc:	00013adc 	.word	0x00013adc
    2fc0:	0000405d 	.word	0x0000405d
    2fc4:	00006239 	.word	0x00006239

00002fc8 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    2fc8:	b580      	push	{r7, lr}
    2fca:	b084      	sub	sp, #16
    2fcc:	af00      	add	r7, sp, #0
    2fce:	6078      	str	r0, [r7, #4]
    2fd0:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
    2fd2:	2300      	movs	r3, #0
    2fd4:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
    2fd6:	687b      	ldr	r3, [r7, #4]
    2fd8:	2b00      	cmp	r3, #0
    2fda:	d004      	beq.n	2fe6 <spi_m_sync_init+0x1e>
    2fdc:	683b      	ldr	r3, [r7, #0]
    2fde:	2b00      	cmp	r3, #0
    2fe0:	d001      	beq.n	2fe6 <spi_m_sync_init+0x1e>
    2fe2:	2301      	movs	r3, #1
    2fe4:	e000      	b.n	2fe8 <spi_m_sync_init+0x20>
    2fe6:	2300      	movs	r3, #0
    2fe8:	f003 0301 	and.w	r3, r3, #1
    2fec:	b2db      	uxtb	r3, r3
    2fee:	2240      	movs	r2, #64	; 0x40
    2ff0:	4910      	ldr	r1, [pc, #64]	; (3034 <spi_m_sync_init+0x6c>)
    2ff2:	4618      	mov	r0, r3
    2ff4:	4b10      	ldr	r3, [pc, #64]	; (3038 <spi_m_sync_init+0x70>)
    2ff6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    2ff8:	687b      	ldr	r3, [r7, #4]
    2ffa:	683a      	ldr	r2, [r7, #0]
    2ffc:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    2ffe:	687b      	ldr	r3, [r7, #4]
    3000:	3304      	adds	r3, #4
    3002:	6839      	ldr	r1, [r7, #0]
    3004:	4618      	mov	r0, r3
    3006:	4b0d      	ldr	r3, [pc, #52]	; (303c <spi_m_sync_init+0x74>)
    3008:	4798      	blx	r3
    300a:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
    300c:	68fb      	ldr	r3, [r7, #12]
    300e:	2b00      	cmp	r3, #0
    3010:	da01      	bge.n	3016 <spi_m_sync_init+0x4e>
		return rc;
    3012:	68fb      	ldr	r3, [r7, #12]
    3014:	e00a      	b.n	302c <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    3016:	687b      	ldr	r3, [r7, #4]
    3018:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    301c:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
    301e:	687b      	ldr	r3, [r7, #4]
    3020:	4a07      	ldr	r2, [pc, #28]	; (3040 <spi_m_sync_init+0x78>)
    3022:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
    3024:	687b      	ldr	r3, [r7, #4]
    3026:	4a07      	ldr	r2, [pc, #28]	; (3044 <spi_m_sync_init+0x7c>)
    3028:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    302a:	2300      	movs	r3, #0
}
    302c:	4618      	mov	r0, r3
    302e:	3710      	adds	r7, #16
    3030:	46bd      	mov	sp, r7
    3032:	bd80      	pop	{r7, pc}
    3034:	00013af8 	.word	0x00013af8
    3038:	0000405d 	.word	0x0000405d
    303c:	0000759d 	.word	0x0000759d
    3040:	000030c1 	.word	0x000030c1
    3044:	00003119 	.word	0x00003119

00003048 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    3048:	b580      	push	{r7, lr}
    304a:	b082      	sub	sp, #8
    304c:	af00      	add	r7, sp, #0
    304e:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    3050:	687b      	ldr	r3, [r7, #4]
    3052:	2b00      	cmp	r3, #0
    3054:	bf14      	ite	ne
    3056:	2301      	movne	r3, #1
    3058:	2300      	moveq	r3, #0
    305a:	b2db      	uxtb	r3, r3
    305c:	2257      	movs	r2, #87	; 0x57
    305e:	4906      	ldr	r1, [pc, #24]	; (3078 <spi_m_sync_enable+0x30>)
    3060:	4618      	mov	r0, r3
    3062:	4b06      	ldr	r3, [pc, #24]	; (307c <spi_m_sync_enable+0x34>)
    3064:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    3066:	687b      	ldr	r3, [r7, #4]
    3068:	3304      	adds	r3, #4
    306a:	4618      	mov	r0, r3
    306c:	4b04      	ldr	r3, [pc, #16]	; (3080 <spi_m_sync_enable+0x38>)
    306e:	4798      	blx	r3
}
    3070:	bf00      	nop
    3072:	3708      	adds	r7, #8
    3074:	46bd      	mov	sp, r7
    3076:	bd80      	pop	{r7, pc}
    3078:	00013af8 	.word	0x00013af8
    307c:	0000405d 	.word	0x0000405d
    3080:	000076a9 	.word	0x000076a9

00003084 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    3084:	b580      	push	{r7, lr}
    3086:	b082      	sub	sp, #8
    3088:	af00      	add	r7, sp, #0
    308a:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
    308c:	687b      	ldr	r3, [r7, #4]
    308e:	2b00      	cmp	r3, #0
    3090:	bf14      	ite	ne
    3092:	2301      	movne	r3, #1
    3094:	2300      	moveq	r3, #0
    3096:	b2db      	uxtb	r3, r3
    3098:	225d      	movs	r2, #93	; 0x5d
    309a:	4906      	ldr	r1, [pc, #24]	; (30b4 <spi_m_sync_disable+0x30>)
    309c:	4618      	mov	r0, r3
    309e:	4b06      	ldr	r3, [pc, #24]	; (30b8 <spi_m_sync_disable+0x34>)
    30a0:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    30a2:	687b      	ldr	r3, [r7, #4]
    30a4:	3304      	adds	r3, #4
    30a6:	4618      	mov	r0, r3
    30a8:	4b04      	ldr	r3, [pc, #16]	; (30bc <spi_m_sync_disable+0x38>)
    30aa:	4798      	blx	r3
}
    30ac:	bf00      	nop
    30ae:	3708      	adds	r7, #8
    30b0:	46bd      	mov	sp, r7
    30b2:	bd80      	pop	{r7, pc}
    30b4:	00013af8 	.word	0x00013af8
    30b8:	0000405d 	.word	0x0000405d
    30bc:	000076f9 	.word	0x000076f9

000030c0 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
    30c0:	b580      	push	{r7, lr}
    30c2:	b088      	sub	sp, #32
    30c4:	af00      	add	r7, sp, #0
    30c6:	60f8      	str	r0, [r7, #12]
    30c8:	60b9      	str	r1, [r7, #8]
    30ca:	4613      	mov	r3, r2
    30cc:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    30ce:	68fb      	ldr	r3, [r7, #12]
    30d0:	2b00      	cmp	r3, #0
    30d2:	bf14      	ite	ne
    30d4:	2301      	movne	r3, #1
    30d6:	2300      	moveq	r3, #0
    30d8:	b2db      	uxtb	r3, r3
    30da:	2287      	movs	r2, #135	; 0x87
    30dc:	490b      	ldr	r1, [pc, #44]	; (310c <_spi_m_sync_io_read+0x4c>)
    30de:	4618      	mov	r0, r3
    30e0:	4b0b      	ldr	r3, [pc, #44]	; (3110 <_spi_m_sync_io_read+0x50>)
    30e2:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    30e4:	68fb      	ldr	r3, [r7, #12]
    30e6:	3b0c      	subs	r3, #12
    30e8:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
    30ea:	68bb      	ldr	r3, [r7, #8]
    30ec:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
    30ee:	2300      	movs	r3, #0
    30f0:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    30f2:	88fb      	ldrh	r3, [r7, #6]
    30f4:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    30f6:	f107 0310 	add.w	r3, r7, #16
    30fa:	4619      	mov	r1, r3
    30fc:	69f8      	ldr	r0, [r7, #28]
    30fe:	4b05      	ldr	r3, [pc, #20]	; (3114 <_spi_m_sync_io_read+0x54>)
    3100:	4798      	blx	r3
    3102:	4603      	mov	r3, r0
}
    3104:	4618      	mov	r0, r3
    3106:	3720      	adds	r7, #32
    3108:	46bd      	mov	sp, r7
    310a:	bd80      	pop	{r7, pc}
    310c:	00013af8 	.word	0x00013af8
    3110:	0000405d 	.word	0x0000405d
    3114:	00003171 	.word	0x00003171

00003118 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
    3118:	b580      	push	{r7, lr}
    311a:	b088      	sub	sp, #32
    311c:	af00      	add	r7, sp, #0
    311e:	60f8      	str	r0, [r7, #12]
    3120:	60b9      	str	r1, [r7, #8]
    3122:	4613      	mov	r3, r2
    3124:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
    3126:	68fb      	ldr	r3, [r7, #12]
    3128:	2b00      	cmp	r3, #0
    312a:	bf14      	ite	ne
    312c:	2301      	movne	r3, #1
    312e:	2300      	moveq	r3, #0
    3130:	b2db      	uxtb	r3, r3
    3132:	22a3      	movs	r2, #163	; 0xa3
    3134:	490b      	ldr	r1, [pc, #44]	; (3164 <_spi_m_sync_io_write+0x4c>)
    3136:	4618      	mov	r0, r3
    3138:	4b0b      	ldr	r3, [pc, #44]	; (3168 <_spi_m_sync_io_write+0x50>)
    313a:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    313c:	68fb      	ldr	r3, [r7, #12]
    313e:	3b0c      	subs	r3, #12
    3140:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
    3142:	2300      	movs	r3, #0
    3144:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
    3146:	68bb      	ldr	r3, [r7, #8]
    3148:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
    314a:	88fb      	ldrh	r3, [r7, #6]
    314c:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
    314e:	f107 0310 	add.w	r3, r7, #16
    3152:	4619      	mov	r1, r3
    3154:	69f8      	ldr	r0, [r7, #28]
    3156:	4b05      	ldr	r3, [pc, #20]	; (316c <_spi_m_sync_io_write+0x54>)
    3158:	4798      	blx	r3
    315a:	4603      	mov	r3, r0
}
    315c:	4618      	mov	r0, r3
    315e:	3720      	adds	r7, #32
    3160:	46bd      	mov	sp, r7
    3162:	bd80      	pop	{r7, pc}
    3164:	00013af8 	.word	0x00013af8
    3168:	0000405d 	.word	0x0000405d
    316c:	00003171 	.word	0x00003171

00003170 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    3170:	b580      	push	{r7, lr}
    3172:	b086      	sub	sp, #24
    3174:	af00      	add	r7, sp, #0
    3176:	6078      	str	r0, [r7, #4]
    3178:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    317a:	687b      	ldr	r3, [r7, #4]
    317c:	2b00      	cmp	r3, #0
    317e:	d004      	beq.n	318a <spi_m_sync_transfer+0x1a>
    3180:	683b      	ldr	r3, [r7, #0]
    3182:	2b00      	cmp	r3, #0
    3184:	d001      	beq.n	318a <spi_m_sync_transfer+0x1a>
    3186:	2301      	movs	r3, #1
    3188:	e000      	b.n	318c <spi_m_sync_transfer+0x1c>
    318a:	2300      	movs	r3, #0
    318c:	f003 0301 	and.w	r3, r3, #1
    3190:	b2db      	uxtb	r3, r3
    3192:	22b3      	movs	r2, #179	; 0xb3
    3194:	490c      	ldr	r1, [pc, #48]	; (31c8 <spi_m_sync_transfer+0x58>)
    3196:	4618      	mov	r0, r3
    3198:	4b0c      	ldr	r3, [pc, #48]	; (31cc <spi_m_sync_transfer+0x5c>)
    319a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    319c:	683b      	ldr	r3, [r7, #0]
    319e:	681b      	ldr	r3, [r3, #0]
    31a0:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
    31a2:	683b      	ldr	r3, [r7, #0]
    31a4:	685b      	ldr	r3, [r3, #4]
    31a6:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
    31a8:	683b      	ldr	r3, [r7, #0]
    31aa:	689b      	ldr	r3, [r3, #8]
    31ac:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	3304      	adds	r3, #4
    31b2:	f107 020c 	add.w	r2, r7, #12
    31b6:	4611      	mov	r1, r2
    31b8:	4618      	mov	r0, r3
    31ba:	4b05      	ldr	r3, [pc, #20]	; (31d0 <spi_m_sync_transfer+0x60>)
    31bc:	4798      	blx	r3
    31be:	4603      	mov	r3, r0
}
    31c0:	4618      	mov	r0, r3
    31c2:	3718      	adds	r7, #24
    31c4:	46bd      	mov	sp, r7
    31c6:	bd80      	pop	{r7, pc}
    31c8:	00013af8 	.word	0x00013af8
    31cc:	0000405d 	.word	0x0000405d
    31d0:	0000789d 	.word	0x0000789d

000031d4 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    31d4:	b580      	push	{r7, lr}
    31d6:	b082      	sub	sp, #8
    31d8:	af00      	add	r7, sp, #0
    31da:	6078      	str	r0, [r7, #4]
    31dc:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
    31de:	687b      	ldr	r3, [r7, #4]
    31e0:	2b00      	cmp	r3, #0
    31e2:	d004      	beq.n	31ee <spi_m_sync_get_io_descriptor+0x1a>
    31e4:	683b      	ldr	r3, [r7, #0]
    31e6:	2b00      	cmp	r3, #0
    31e8:	d001      	beq.n	31ee <spi_m_sync_get_io_descriptor+0x1a>
    31ea:	2301      	movs	r3, #1
    31ec:	e000      	b.n	31f0 <spi_m_sync_get_io_descriptor+0x1c>
    31ee:	2300      	movs	r3, #0
    31f0:	f003 0301 	and.w	r3, r3, #1
    31f4:	b2db      	uxtb	r3, r3
    31f6:	22bd      	movs	r2, #189	; 0xbd
    31f8:	4906      	ldr	r1, [pc, #24]	; (3214 <spi_m_sync_get_io_descriptor+0x40>)
    31fa:	4618      	mov	r0, r3
    31fc:	4b06      	ldr	r3, [pc, #24]	; (3218 <spi_m_sync_get_io_descriptor+0x44>)
    31fe:	4798      	blx	r3
	*io = &spi->io;
    3200:	687b      	ldr	r3, [r7, #4]
    3202:	f103 020c 	add.w	r2, r3, #12
    3206:	683b      	ldr	r3, [r7, #0]
    3208:	601a      	str	r2, [r3, #0]
	return 0;
    320a:	2300      	movs	r3, #0
}
    320c:	4618      	mov	r0, r3
    320e:	3708      	adds	r7, #8
    3210:	46bd      	mov	sp, r7
    3212:	bd80      	pop	{r7, pc}
    3214:	00013af8 	.word	0x00013af8
    3218:	0000405d 	.word	0x0000405d

0000321c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    321c:	b480      	push	{r7}
    321e:	b083      	sub	sp, #12
    3220:	af00      	add	r7, sp, #0
    3222:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    3224:	687b      	ldr	r3, [r7, #4]
    3226:	681b      	ldr	r3, [r3, #0]
}
    3228:	4618      	mov	r0, r3
    322a:	370c      	adds	r7, #12
    322c:	46bd      	mov	sp, r7
    322e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3232:	4770      	bx	lr

00003234 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    3234:	b480      	push	{r7}
    3236:	b083      	sub	sp, #12
    3238:	af00      	add	r7, sp, #0
    323a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    323c:	687b      	ldr	r3, [r7, #4]
    323e:	2b00      	cmp	r3, #0
    3240:	d002      	beq.n	3248 <list_get_next_element+0x14>
    3242:	687b      	ldr	r3, [r7, #4]
    3244:	681b      	ldr	r3, [r3, #0]
    3246:	e000      	b.n	324a <list_get_next_element+0x16>
    3248:	2300      	movs	r3, #0
}
    324a:	4618      	mov	r0, r3
    324c:	370c      	adds	r7, #12
    324e:	46bd      	mov	sp, r7
    3250:	f85d 7b04 	ldr.w	r7, [sp], #4
    3254:	4770      	bx	lr
	...

00003258 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    3258:	b580      	push	{r7, lr}
    325a:	b084      	sub	sp, #16
    325c:	af00      	add	r7, sp, #0
    325e:	60f8      	str	r0, [r7, #12]
    3260:	60b9      	str	r1, [r7, #8]
    3262:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw && func);
    3264:	68fb      	ldr	r3, [r7, #12]
    3266:	2b00      	cmp	r3, #0
    3268:	d007      	beq.n	327a <timer_init+0x22>
    326a:	68bb      	ldr	r3, [r7, #8]
    326c:	2b00      	cmp	r3, #0
    326e:	d004      	beq.n	327a <timer_init+0x22>
    3270:	687b      	ldr	r3, [r7, #4]
    3272:	2b00      	cmp	r3, #0
    3274:	d001      	beq.n	327a <timer_init+0x22>
    3276:	2301      	movs	r3, #1
    3278:	e000      	b.n	327c <timer_init+0x24>
    327a:	2300      	movs	r3, #0
    327c:	f003 0301 	and.w	r3, r3, #1
    3280:	b2db      	uxtb	r3, r3
    3282:	223b      	movs	r2, #59	; 0x3b
    3284:	490c      	ldr	r1, [pc, #48]	; (32b8 <timer_init+0x60>)
    3286:	4618      	mov	r0, r3
    3288:	4b0c      	ldr	r3, [pc, #48]	; (32bc <timer_init+0x64>)
    328a:	4798      	blx	r3
	descr->func = func;
    328c:	68fb      	ldr	r3, [r7, #12]
    328e:	687a      	ldr	r2, [r7, #4]
    3290:	601a      	str	r2, [r3, #0]
	descr->func->init(&descr->device, hw);
    3292:	68fb      	ldr	r3, [r7, #12]
    3294:	681b      	ldr	r3, [r3, #0]
    3296:	681b      	ldr	r3, [r3, #0]
    3298:	68fa      	ldr	r2, [r7, #12]
    329a:	3204      	adds	r2, #4
    329c:	68b9      	ldr	r1, [r7, #8]
    329e:	4610      	mov	r0, r2
    32a0:	4798      	blx	r3
	descr->time                           = 0;
    32a2:	68fb      	ldr	r3, [r7, #12]
    32a4:	2200      	movs	r2, #0
    32a6:	615a      	str	r2, [r3, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    32a8:	68fb      	ldr	r3, [r7, #12]
    32aa:	4a05      	ldr	r2, [pc, #20]	; (32c0 <timer_init+0x68>)
    32ac:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
    32ae:	2300      	movs	r3, #0
}
    32b0:	4618      	mov	r0, r3
    32b2:	3710      	adds	r7, #16
    32b4:	46bd      	mov	sp, r7
    32b6:	bd80      	pop	{r7, pc}
    32b8:	00013b14 	.word	0x00013b14
    32bc:	0000405d 	.word	0x0000405d
    32c0:	00003649 	.word	0x00003649

000032c4 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
    32c4:	b580      	push	{r7, lr}
    32c6:	b082      	sub	sp, #8
    32c8:	af00      	add	r7, sp, #0
    32ca:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    32cc:	687b      	ldr	r3, [r7, #4]
    32ce:	2b00      	cmp	r3, #0
    32d0:	d005      	beq.n	32de <timer_start+0x1a>
    32d2:	687b      	ldr	r3, [r7, #4]
    32d4:	681b      	ldr	r3, [r3, #0]
    32d6:	2b00      	cmp	r3, #0
    32d8:	d001      	beq.n	32de <timer_start+0x1a>
    32da:	2301      	movs	r3, #1
    32dc:	e000      	b.n	32e0 <timer_start+0x1c>
    32de:	2300      	movs	r3, #0
    32e0:	f003 0301 	and.w	r3, r3, #1
    32e4:	b2db      	uxtb	r3, r3
    32e6:	2254      	movs	r2, #84	; 0x54
    32e8:	490e      	ldr	r1, [pc, #56]	; (3324 <timer_start+0x60>)
    32ea:	4618      	mov	r0, r3
    32ec:	4b0e      	ldr	r3, [pc, #56]	; (3328 <timer_start+0x64>)
    32ee:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    32f0:	687b      	ldr	r3, [r7, #4]
    32f2:	681b      	ldr	r3, [r3, #0]
    32f4:	699b      	ldr	r3, [r3, #24]
    32f6:	687a      	ldr	r2, [r7, #4]
    32f8:	3204      	adds	r2, #4
    32fa:	4610      	mov	r0, r2
    32fc:	4798      	blx	r3
    32fe:	4603      	mov	r3, r0
    3300:	2b00      	cmp	r3, #0
    3302:	d002      	beq.n	330a <timer_start+0x46>
		return ERR_DENIED;
    3304:	f06f 0310 	mvn.w	r3, #16
    3308:	e007      	b.n	331a <timer_start+0x56>
	}
	descr->func->start_timer(&descr->device);
    330a:	687b      	ldr	r3, [r7, #4]
    330c:	681b      	ldr	r3, [r3, #0]
    330e:	689b      	ldr	r3, [r3, #8]
    3310:	687a      	ldr	r2, [r7, #4]
    3312:	3204      	adds	r2, #4
    3314:	4610      	mov	r0, r2
    3316:	4798      	blx	r3

	return ERR_NONE;
    3318:	2300      	movs	r3, #0
}
    331a:	4618      	mov	r0, r3
    331c:	3708      	adds	r7, #8
    331e:	46bd      	mov	sp, r7
    3320:	bd80      	pop	{r7, pc}
    3322:	bf00      	nop
    3324:	00013b14 	.word	0x00013b14
    3328:	0000405d 	.word	0x0000405d

0000332c <timer_stop>:

/**
 * \brief Stop timer
 */
int32_t timer_stop(struct timer_descriptor *const descr)
{
    332c:	b580      	push	{r7, lr}
    332e:	b082      	sub	sp, #8
    3330:	af00      	add	r7, sp, #0
    3332:	6078      	str	r0, [r7, #4]
	ASSERT(descr && descr->func);
    3334:	687b      	ldr	r3, [r7, #4]
    3336:	2b00      	cmp	r3, #0
    3338:	d005      	beq.n	3346 <timer_stop+0x1a>
    333a:	687b      	ldr	r3, [r7, #4]
    333c:	681b      	ldr	r3, [r3, #0]
    333e:	2b00      	cmp	r3, #0
    3340:	d001      	beq.n	3346 <timer_stop+0x1a>
    3342:	2301      	movs	r3, #1
    3344:	e000      	b.n	3348 <timer_stop+0x1c>
    3346:	2300      	movs	r3, #0
    3348:	f003 0301 	and.w	r3, r3, #1
    334c:	b2db      	uxtb	r3, r3
    334e:	2262      	movs	r2, #98	; 0x62
    3350:	490f      	ldr	r1, [pc, #60]	; (3390 <timer_stop+0x64>)
    3352:	4618      	mov	r0, r3
    3354:	4b0f      	ldr	r3, [pc, #60]	; (3394 <timer_stop+0x68>)
    3356:	4798      	blx	r3
	if (!descr->func->is_timer_started(&descr->device)) {
    3358:	687b      	ldr	r3, [r7, #4]
    335a:	681b      	ldr	r3, [r3, #0]
    335c:	699b      	ldr	r3, [r3, #24]
    335e:	687a      	ldr	r2, [r7, #4]
    3360:	3204      	adds	r2, #4
    3362:	4610      	mov	r0, r2
    3364:	4798      	blx	r3
    3366:	4603      	mov	r3, r0
    3368:	f083 0301 	eor.w	r3, r3, #1
    336c:	b2db      	uxtb	r3, r3
    336e:	2b00      	cmp	r3, #0
    3370:	d002      	beq.n	3378 <timer_stop+0x4c>
		return ERR_DENIED;
    3372:	f06f 0310 	mvn.w	r3, #16
    3376:	e007      	b.n	3388 <timer_stop+0x5c>
	}
	descr->func->stop_timer(&descr->device);
    3378:	687b      	ldr	r3, [r7, #4]
    337a:	681b      	ldr	r3, [r3, #0]
    337c:	68db      	ldr	r3, [r3, #12]
    337e:	687a      	ldr	r2, [r7, #4]
    3380:	3204      	adds	r2, #4
    3382:	4610      	mov	r0, r2
    3384:	4798      	blx	r3

	return ERR_NONE;
    3386:	2300      	movs	r3, #0
}
    3388:	4618      	mov	r0, r3
    338a:	3708      	adds	r7, #8
    338c:	46bd      	mov	sp, r7
    338e:	bd80      	pop	{r7, pc}
    3390:	00013b14 	.word	0x00013b14
    3394:	0000405d 	.word	0x0000405d

00003398 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
    3398:	b580      	push	{r7, lr}
    339a:	b084      	sub	sp, #16
    339c:	af00      	add	r7, sp, #0
    339e:	6078      	str	r0, [r7, #4]
    33a0:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    33a2:	687b      	ldr	r3, [r7, #4]
    33a4:	2b00      	cmp	r3, #0
    33a6:	d008      	beq.n	33ba <timer_add_task+0x22>
    33a8:	683b      	ldr	r3, [r7, #0]
    33aa:	2b00      	cmp	r3, #0
    33ac:	d005      	beq.n	33ba <timer_add_task+0x22>
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	681b      	ldr	r3, [r3, #0]
    33b2:	2b00      	cmp	r3, #0
    33b4:	d001      	beq.n	33ba <timer_add_task+0x22>
    33b6:	2301      	movs	r3, #1
    33b8:	e000      	b.n	33bc <timer_add_task+0x24>
    33ba:	2300      	movs	r3, #0
    33bc:	f003 0301 	and.w	r3, r3, #1
    33c0:	b2db      	uxtb	r3, r3
    33c2:	227b      	movs	r2, #123	; 0x7b
    33c4:	492f      	ldr	r1, [pc, #188]	; (3484 <timer_add_task+0xec>)
    33c6:	4618      	mov	r0, r3
    33c8:	4b2f      	ldr	r3, [pc, #188]	; (3488 <timer_add_task+0xf0>)
    33ca:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    33cc:	687b      	ldr	r3, [r7, #4]
    33ce:	7f1b      	ldrb	r3, [r3, #28]
    33d0:	b2db      	uxtb	r3, r3
    33d2:	f043 0301 	orr.w	r3, r3, #1
    33d6:	b2da      	uxtb	r2, r3
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	771a      	strb	r2, [r3, #28]
	if (is_list_element(&descr->tasks, task)) {
    33dc:	687b      	ldr	r3, [r7, #4]
    33de:	3318      	adds	r3, #24
    33e0:	6839      	ldr	r1, [r7, #0]
    33e2:	4618      	mov	r0, r3
    33e4:	4b29      	ldr	r3, [pc, #164]	; (348c <timer_add_task+0xf4>)
    33e6:	4798      	blx	r3
    33e8:	4603      	mov	r3, r0
    33ea:	2b00      	cmp	r3, #0
    33ec:	d00f      	beq.n	340e <timer_add_task+0x76>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    33ee:	687b      	ldr	r3, [r7, #4]
    33f0:	7f1b      	ldrb	r3, [r3, #28]
    33f2:	b2db      	uxtb	r3, r3
    33f4:	f023 0301 	bic.w	r3, r3, #1
    33f8:	b2da      	uxtb	r2, r3
    33fa:	687b      	ldr	r3, [r7, #4]
    33fc:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    33fe:	2280      	movs	r2, #128	; 0x80
    3400:	4920      	ldr	r1, [pc, #128]	; (3484 <timer_add_task+0xec>)
    3402:	2000      	movs	r0, #0
    3404:	4b20      	ldr	r3, [pc, #128]	; (3488 <timer_add_task+0xf0>)
    3406:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    3408:	f06f 0311 	mvn.w	r3, #17
    340c:	e035      	b.n	347a <timer_add_task+0xe2>
	}
	task->time_label = descr->time;
    340e:	687b      	ldr	r3, [r7, #4]
    3410:	695a      	ldr	r2, [r3, #20]
    3412:	683b      	ldr	r3, [r7, #0]
    3414:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    3416:	687b      	ldr	r3, [r7, #4]
    3418:	f103 0018 	add.w	r0, r3, #24
    341c:	687b      	ldr	r3, [r7, #4]
    341e:	695b      	ldr	r3, [r3, #20]
    3420:	461a      	mov	r2, r3
    3422:	6839      	ldr	r1, [r7, #0]
    3424:	4b1a      	ldr	r3, [pc, #104]	; (3490 <timer_add_task+0xf8>)
    3426:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3428:	687b      	ldr	r3, [r7, #4]
    342a:	7f1b      	ldrb	r3, [r3, #28]
    342c:	b2db      	uxtb	r3, r3
    342e:	f023 0301 	bic.w	r3, r3, #1
    3432:	b2da      	uxtb	r2, r3
    3434:	687b      	ldr	r3, [r7, #4]
    3436:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3438:	687b      	ldr	r3, [r7, #4]
    343a:	7f1b      	ldrb	r3, [r3, #28]
    343c:	b2db      	uxtb	r3, r3
    343e:	f003 0302 	and.w	r3, r3, #2
    3442:	2b00      	cmp	r3, #0
    3444:	d018      	beq.n	3478 <timer_add_task+0xe0>
		CRITICAL_SECTION_ENTER()
    3446:	f107 030c 	add.w	r3, r7, #12
    344a:	4618      	mov	r0, r3
    344c:	4b11      	ldr	r3, [pc, #68]	; (3494 <timer_add_task+0xfc>)
    344e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    3450:	687b      	ldr	r3, [r7, #4]
    3452:	7f1b      	ldrb	r3, [r3, #28]
    3454:	b2db      	uxtb	r3, r3
    3456:	f023 0302 	bic.w	r3, r3, #2
    345a:	b2da      	uxtb	r2, r3
    345c:	687b      	ldr	r3, [r7, #4]
    345e:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    3460:	687b      	ldr	r3, [r7, #4]
    3462:	681b      	ldr	r3, [r3, #0]
    3464:	69db      	ldr	r3, [r3, #28]
    3466:	687a      	ldr	r2, [r7, #4]
    3468:	3204      	adds	r2, #4
    346a:	4610      	mov	r0, r2
    346c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    346e:	f107 030c 	add.w	r3, r7, #12
    3472:	4618      	mov	r0, r3
    3474:	4b08      	ldr	r3, [pc, #32]	; (3498 <timer_add_task+0x100>)
    3476:	4798      	blx	r3
	}

	return ERR_NONE;
    3478:	2300      	movs	r3, #0
}
    347a:	4618      	mov	r0, r3
    347c:	3710      	adds	r7, #16
    347e:	46bd      	mov	sp, r7
    3480:	bd80      	pop	{r7, pc}
    3482:	bf00      	nop
    3484:	00013b14 	.word	0x00013b14
    3488:	0000405d 	.word	0x0000405d
    348c:	00004085 	.word	0x00004085
    3490:	00003599 	.word	0x00003599
    3494:	0000bc79 	.word	0x0000bc79
    3498:	0000bc9f 	.word	0x0000bc9f

0000349c <timer_remove_task>:

/**
 * \brief Remove timer task
 */
int32_t timer_remove_task(struct timer_descriptor *const descr, const struct timer_task *const task)
{
    349c:	b580      	push	{r7, lr}
    349e:	b084      	sub	sp, #16
    34a0:	af00      	add	r7, sp, #0
    34a2:	6078      	str	r0, [r7, #4]
    34a4:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task && descr->func);
    34a6:	687b      	ldr	r3, [r7, #4]
    34a8:	2b00      	cmp	r3, #0
    34aa:	d008      	beq.n	34be <timer_remove_task+0x22>
    34ac:	683b      	ldr	r3, [r7, #0]
    34ae:	2b00      	cmp	r3, #0
    34b0:	d005      	beq.n	34be <timer_remove_task+0x22>
    34b2:	687b      	ldr	r3, [r7, #4]
    34b4:	681b      	ldr	r3, [r3, #0]
    34b6:	2b00      	cmp	r3, #0
    34b8:	d001      	beq.n	34be <timer_remove_task+0x22>
    34ba:	2301      	movs	r3, #1
    34bc:	e000      	b.n	34c0 <timer_remove_task+0x24>
    34be:	2300      	movs	r3, #0
    34c0:	f003 0301 	and.w	r3, r3, #1
    34c4:	b2db      	uxtb	r3, r3
    34c6:	2296      	movs	r2, #150	; 0x96
    34c8:	492d      	ldr	r1, [pc, #180]	; (3580 <timer_remove_task+0xe4>)
    34ca:	4618      	mov	r0, r3
    34cc:	4b2d      	ldr	r3, [pc, #180]	; (3584 <timer_remove_task+0xe8>)
    34ce:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    34d0:	687b      	ldr	r3, [r7, #4]
    34d2:	7f1b      	ldrb	r3, [r3, #28]
    34d4:	b2db      	uxtb	r3, r3
    34d6:	f043 0301 	orr.w	r3, r3, #1
    34da:	b2da      	uxtb	r2, r3
    34dc:	687b      	ldr	r3, [r7, #4]
    34de:	771a      	strb	r2, [r3, #28]
	if (!is_list_element(&descr->tasks, task)) {
    34e0:	687b      	ldr	r3, [r7, #4]
    34e2:	3318      	adds	r3, #24
    34e4:	6839      	ldr	r1, [r7, #0]
    34e6:	4618      	mov	r0, r3
    34e8:	4b27      	ldr	r3, [pc, #156]	; (3588 <timer_remove_task+0xec>)
    34ea:	4798      	blx	r3
    34ec:	4603      	mov	r3, r0
    34ee:	f083 0301 	eor.w	r3, r3, #1
    34f2:	b2db      	uxtb	r3, r3
    34f4:	2b00      	cmp	r3, #0
    34f6:	d00f      	beq.n	3518 <timer_remove_task+0x7c>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    34f8:	687b      	ldr	r3, [r7, #4]
    34fa:	7f1b      	ldrb	r3, [r3, #28]
    34fc:	b2db      	uxtb	r3, r3
    34fe:	f023 0301 	bic.w	r3, r3, #1
    3502:	b2da      	uxtb	r2, r3
    3504:	687b      	ldr	r3, [r7, #4]
    3506:	771a      	strb	r2, [r3, #28]
		ASSERT(false);
    3508:	229b      	movs	r2, #155	; 0x9b
    350a:	491d      	ldr	r1, [pc, #116]	; (3580 <timer_remove_task+0xe4>)
    350c:	2000      	movs	r0, #0
    350e:	4b1d      	ldr	r3, [pc, #116]	; (3584 <timer_remove_task+0xe8>)
    3510:	4798      	blx	r3
		return ERR_NOT_FOUND;
    3512:	f06f 0309 	mvn.w	r3, #9
    3516:	e02e      	b.n	3576 <timer_remove_task+0xda>
	}
	list_delete_element(&descr->tasks, task);
    3518:	687b      	ldr	r3, [r7, #4]
    351a:	3318      	adds	r3, #24
    351c:	6839      	ldr	r1, [r7, #0]
    351e:	4618      	mov	r0, r3
    3520:	4b1a      	ldr	r3, [pc, #104]	; (358c <timer_remove_task+0xf0>)
    3522:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    3524:	687b      	ldr	r3, [r7, #4]
    3526:	7f1b      	ldrb	r3, [r3, #28]
    3528:	b2db      	uxtb	r3, r3
    352a:	f023 0301 	bic.w	r3, r3, #1
    352e:	b2da      	uxtb	r2, r3
    3530:	687b      	ldr	r3, [r7, #4]
    3532:	771a      	strb	r2, [r3, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    3534:	687b      	ldr	r3, [r7, #4]
    3536:	7f1b      	ldrb	r3, [r3, #28]
    3538:	b2db      	uxtb	r3, r3
    353a:	f003 0302 	and.w	r3, r3, #2
    353e:	2b00      	cmp	r3, #0
    3540:	d018      	beq.n	3574 <timer_remove_task+0xd8>
		CRITICAL_SECTION_ENTER()
    3542:	f107 030c 	add.w	r3, r7, #12
    3546:	4618      	mov	r0, r3
    3548:	4b11      	ldr	r3, [pc, #68]	; (3590 <timer_remove_task+0xf4>)
    354a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    354c:	687b      	ldr	r3, [r7, #4]
    354e:	7f1b      	ldrb	r3, [r3, #28]
    3550:	b2db      	uxtb	r3, r3
    3552:	f023 0302 	bic.w	r3, r3, #2
    3556:	b2da      	uxtb	r2, r3
    3558:	687b      	ldr	r3, [r7, #4]
    355a:	771a      	strb	r2, [r3, #28]
		descr->func->set_timer_irq(&descr->device);
    355c:	687b      	ldr	r3, [r7, #4]
    355e:	681b      	ldr	r3, [r3, #0]
    3560:	69db      	ldr	r3, [r3, #28]
    3562:	687a      	ldr	r2, [r7, #4]
    3564:	3204      	adds	r2, #4
    3566:	4610      	mov	r0, r2
    3568:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    356a:	f107 030c 	add.w	r3, r7, #12
    356e:	4618      	mov	r0, r3
    3570:	4b08      	ldr	r3, [pc, #32]	; (3594 <timer_remove_task+0xf8>)
    3572:	4798      	blx	r3
	}

	return ERR_NONE;
    3574:	2300      	movs	r3, #0
}
    3576:	4618      	mov	r0, r3
    3578:	3710      	adds	r7, #16
    357a:	46bd      	mov	sp, r7
    357c:	bd80      	pop	{r7, pc}
    357e:	bf00      	nop
    3580:	00013b14 	.word	0x00013b14
    3584:	0000405d 	.word	0x0000405d
    3588:	00004085 	.word	0x00004085
    358c:	000041e7 	.word	0x000041e7
    3590:	0000bc79 	.word	0x0000bc79
    3594:	0000bc9f 	.word	0x0000bc9f

00003598 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    3598:	b580      	push	{r7, lr}
    359a:	b088      	sub	sp, #32
    359c:	af00      	add	r7, sp, #0
    359e:	60f8      	str	r0, [r7, #12]
    35a0:	60b9      	str	r1, [r7, #8]
    35a2:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    35a4:	2300      	movs	r3, #0
    35a6:	61bb      	str	r3, [r7, #24]
    35a8:	68f8      	ldr	r0, [r7, #12]
    35aa:	4b23      	ldr	r3, [pc, #140]	; (3638 <timer_add_timer_task+0xa0>)
    35ac:	4798      	blx	r3
    35ae:	6138      	str	r0, [r7, #16]

	if (!head) {
    35b0:	693b      	ldr	r3, [r7, #16]
    35b2:	2b00      	cmp	r3, #0
    35b4:	d104      	bne.n	35c0 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    35b6:	68b9      	ldr	r1, [r7, #8]
    35b8:	68f8      	ldr	r0, [r7, #12]
    35ba:	4b20      	ldr	r3, [pc, #128]	; (363c <timer_add_timer_task+0xa4>)
    35bc:	4798      	blx	r3
		return;
    35be:	e037      	b.n	3630 <timer_add_timer_task+0x98>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    35c0:	693b      	ldr	r3, [r7, #16]
    35c2:	61fb      	str	r3, [r7, #28]
    35c4:	e022      	b.n	360c <timer_add_timer_task+0x74>
		uint32_t time_left;

		if (it->time_label <= time) {
    35c6:	69fb      	ldr	r3, [r7, #28]
    35c8:	685a      	ldr	r2, [r3, #4]
    35ca:	687b      	ldr	r3, [r7, #4]
    35cc:	429a      	cmp	r2, r3
    35ce:	d808      	bhi.n	35e2 <timer_add_timer_task+0x4a>
			time_left = it->interval - (time - it->time_label);
    35d0:	69fb      	ldr	r3, [r7, #28]
    35d2:	689a      	ldr	r2, [r3, #8]
    35d4:	69fb      	ldr	r3, [r7, #28]
    35d6:	6859      	ldr	r1, [r3, #4]
    35d8:	687b      	ldr	r3, [r7, #4]
    35da:	1acb      	subs	r3, r1, r3
    35dc:	4413      	add	r3, r2
    35de:	617b      	str	r3, [r7, #20]
    35e0:	e009      	b.n	35f6 <timer_add_timer_task+0x5e>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    35e2:	69fb      	ldr	r3, [r7, #28]
    35e4:	689a      	ldr	r2, [r3, #8]
    35e6:	69fb      	ldr	r3, [r7, #28]
    35e8:	685b      	ldr	r3, [r3, #4]
    35ea:	441a      	add	r2, r3
    35ec:	687b      	ldr	r3, [r7, #4]
    35ee:	425b      	negs	r3, r3
    35f0:	4413      	add	r3, r2
    35f2:	3301      	adds	r3, #1
    35f4:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    35f6:	68bb      	ldr	r3, [r7, #8]
    35f8:	689a      	ldr	r2, [r3, #8]
    35fa:	697b      	ldr	r3, [r7, #20]
    35fc:	429a      	cmp	r2, r3
    35fe:	d909      	bls.n	3614 <timer_add_timer_task+0x7c>
			break;
		prev = it;
    3600:	69fb      	ldr	r3, [r7, #28]
    3602:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    3604:	69f8      	ldr	r0, [r7, #28]
    3606:	4b0e      	ldr	r3, [pc, #56]	; (3640 <timer_add_timer_task+0xa8>)
    3608:	4798      	blx	r3
    360a:	61f8      	str	r0, [r7, #28]
    360c:	69fb      	ldr	r3, [r7, #28]
    360e:	2b00      	cmp	r3, #0
    3610:	d1d9      	bne.n	35c6 <timer_add_timer_task+0x2e>
    3612:	e000      	b.n	3616 <timer_add_timer_task+0x7e>
			break;
    3614:	bf00      	nop
	}

	if (it == head) {
    3616:	69fa      	ldr	r2, [r7, #28]
    3618:	693b      	ldr	r3, [r7, #16]
    361a:	429a      	cmp	r2, r3
    361c:	d104      	bne.n	3628 <timer_add_timer_task+0x90>
		list_insert_as_head(list, new_task);
    361e:	68b9      	ldr	r1, [r7, #8]
    3620:	68f8      	ldr	r0, [r7, #12]
    3622:	4b06      	ldr	r3, [pc, #24]	; (363c <timer_add_timer_task+0xa4>)
    3624:	4798      	blx	r3
    3626:	e003      	b.n	3630 <timer_add_timer_task+0x98>
	} else {
		list_insert_after(prev, new_task);
    3628:	68b9      	ldr	r1, [r7, #8]
    362a:	69b8      	ldr	r0, [r7, #24]
    362c:	4b05      	ldr	r3, [pc, #20]	; (3644 <timer_add_timer_task+0xac>)
    362e:	4798      	blx	r3
	}
}
    3630:	3720      	adds	r7, #32
    3632:	46bd      	mov	sp, r7
    3634:	bd80      	pop	{r7, pc}
    3636:	bf00      	nop
    3638:	0000321d 	.word	0x0000321d
    363c:	000040bd 	.word	0x000040bd
    3640:	00003235 	.word	0x00003235
    3644:	00004115 	.word	0x00004115

00003648 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    3648:	b580      	push	{r7, lr}
    364a:	b086      	sub	sp, #24
    364c:	af00      	add	r7, sp, #0
    364e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    3650:	687b      	ldr	r3, [r7, #4]
    3652:	3b04      	subs	r3, #4
    3654:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    3656:	693b      	ldr	r3, [r7, #16]
    3658:	3318      	adds	r3, #24
    365a:	4618      	mov	r0, r3
    365c:	4b27      	ldr	r3, [pc, #156]	; (36fc <timer_process_counted+0xb4>)
    365e:	4798      	blx	r3
    3660:	6178      	str	r0, [r7, #20]
	uint32_t                 time  = ++timer->time;
    3662:	693b      	ldr	r3, [r7, #16]
    3664:	695b      	ldr	r3, [r3, #20]
    3666:	1c5a      	adds	r2, r3, #1
    3668:	693b      	ldr	r3, [r7, #16]
    366a:	615a      	str	r2, [r3, #20]
    366c:	693b      	ldr	r3, [r7, #16]
    366e:	695b      	ldr	r3, [r3, #20]
    3670:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    3672:	693b      	ldr	r3, [r7, #16]
    3674:	7f1b      	ldrb	r3, [r3, #28]
    3676:	b2db      	uxtb	r3, r3
    3678:	f003 0301 	and.w	r3, r3, #1
    367c:	2b00      	cmp	r3, #0
    367e:	d106      	bne.n	368e <timer_process_counted+0x46>
    3680:	693b      	ldr	r3, [r7, #16]
    3682:	7f1b      	ldrb	r3, [r3, #28]
    3684:	b2db      	uxtb	r3, r3
    3686:	f003 0302 	and.w	r3, r3, #2
    368a:	2b00      	cmp	r3, #0
    368c:	d027      	beq.n	36de <timer_process_counted+0x96>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    368e:	693b      	ldr	r3, [r7, #16]
    3690:	7f1b      	ldrb	r3, [r3, #28]
    3692:	b2db      	uxtb	r3, r3
    3694:	f043 0302 	orr.w	r3, r3, #2
    3698:	b2da      	uxtb	r2, r3
    369a:	693b      	ldr	r3, [r7, #16]
    369c:	771a      	strb	r2, [r3, #28]
		return;
    369e:	e029      	b.n	36f4 <timer_process_counted+0xac>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    36a0:	697b      	ldr	r3, [r7, #20]
    36a2:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    36a4:	693b      	ldr	r3, [r7, #16]
    36a6:	3318      	adds	r3, #24
    36a8:	4618      	mov	r0, r3
    36aa:	4b15      	ldr	r3, [pc, #84]	; (3700 <timer_process_counted+0xb8>)
    36ac:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    36ae:	68bb      	ldr	r3, [r7, #8]
    36b0:	7c1b      	ldrb	r3, [r3, #16]
    36b2:	2b01      	cmp	r3, #1
    36b4:	d109      	bne.n	36ca <timer_process_counted+0x82>
			tmp->time_label = time;
    36b6:	68bb      	ldr	r3, [r7, #8]
    36b8:	68fa      	ldr	r2, [r7, #12]
    36ba:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    36bc:	693b      	ldr	r3, [r7, #16]
    36be:	3318      	adds	r3, #24
    36c0:	68fa      	ldr	r2, [r7, #12]
    36c2:	68b9      	ldr	r1, [r7, #8]
    36c4:	4618      	mov	r0, r3
    36c6:	4b0f      	ldr	r3, [pc, #60]	; (3704 <timer_process_counted+0xbc>)
    36c8:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    36ca:	693b      	ldr	r3, [r7, #16]
    36cc:	3318      	adds	r3, #24
    36ce:	4618      	mov	r0, r3
    36d0:	4b0a      	ldr	r3, [pc, #40]	; (36fc <timer_process_counted+0xb4>)
    36d2:	4798      	blx	r3
    36d4:	6178      	str	r0, [r7, #20]

		tmp->cb(tmp);
    36d6:	68bb      	ldr	r3, [r7, #8]
    36d8:	68db      	ldr	r3, [r3, #12]
    36da:	68b8      	ldr	r0, [r7, #8]
    36dc:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    36de:	697b      	ldr	r3, [r7, #20]
    36e0:	2b00      	cmp	r3, #0
    36e2:	d007      	beq.n	36f4 <timer_process_counted+0xac>
    36e4:	697b      	ldr	r3, [r7, #20]
    36e6:	685b      	ldr	r3, [r3, #4]
    36e8:	68fa      	ldr	r2, [r7, #12]
    36ea:	1ad2      	subs	r2, r2, r3
    36ec:	697b      	ldr	r3, [r7, #20]
    36ee:	689b      	ldr	r3, [r3, #8]
    36f0:	429a      	cmp	r2, r3
    36f2:	d2d5      	bcs.n	36a0 <timer_process_counted+0x58>
	}
}
    36f4:	3718      	adds	r7, #24
    36f6:	46bd      	mov	sp, r7
    36f8:	bd80      	pop	{r7, pc}
    36fa:	bf00      	nop
    36fc:	0000321d 	.word	0x0000321d
    3700:	000041b5 	.word	0x000041b5
    3704:	00003599 	.word	0x00003599

00003708 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    3708:	b480      	push	{r7}
    370a:	b085      	sub	sp, #20
    370c:	af00      	add	r7, sp, #0
    370e:	4603      	mov	r3, r0
    3710:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3712:	2300      	movs	r3, #0
    3714:	73fb      	strb	r3, [r7, #15]
    3716:	e029      	b.n	376c <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    3718:	f997 300f 	ldrsb.w	r3, [r7, #15]
    371c:	4a19      	ldr	r2, [pc, #100]	; (3784 <_usb_d_find_ep+0x7c>)
    371e:	015b      	lsls	r3, r3, #5
    3720:	4413      	add	r3, r2
    3722:	3301      	adds	r3, #1
    3724:	781b      	ldrb	r3, [r3, #0]
    3726:	79fa      	ldrb	r2, [r7, #7]
    3728:	429a      	cmp	r2, r3
    372a:	d102      	bne.n	3732 <_usb_d_find_ep+0x2a>
			return i;
    372c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3730:	e022      	b.n	3778 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    3732:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3736:	4a13      	ldr	r2, [pc, #76]	; (3784 <_usb_d_find_ep+0x7c>)
    3738:	015b      	lsls	r3, r3, #5
    373a:	4413      	add	r3, r2
    373c:	781b      	ldrb	r3, [r3, #0]
    373e:	2b00      	cmp	r3, #0
    3740:	d10e      	bne.n	3760 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    3742:	79fb      	ldrb	r3, [r7, #7]
    3744:	f003 030f 	and.w	r3, r3, #15
    3748:	f997 200f 	ldrsb.w	r2, [r7, #15]
    374c:	490d      	ldr	r1, [pc, #52]	; (3784 <_usb_d_find_ep+0x7c>)
    374e:	0152      	lsls	r2, r2, #5
    3750:	440a      	add	r2, r1
    3752:	3201      	adds	r2, #1
    3754:	7812      	ldrb	r2, [r2, #0]
    3756:	4293      	cmp	r3, r2
    3758:	d102      	bne.n	3760 <_usb_d_find_ep+0x58>
			return i;
    375a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    375e:	e00b      	b.n	3778 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3760:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3764:	b2db      	uxtb	r3, r3
    3766:	3301      	adds	r3, #1
    3768:	b2db      	uxtb	r3, r3
    376a:	73fb      	strb	r3, [r7, #15]
    376c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3770:	2b03      	cmp	r3, #3
    3772:	ddd1      	ble.n	3718 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
    3774:	f04f 33ff 	mov.w	r3, #4294967295
}
    3778:	4618      	mov	r0, r3
    377a:	3714      	adds	r7, #20
    377c:	46bd      	mov	sp, r7
    377e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3782:	4770      	bx	lr
    3784:	20000ba0 	.word	0x20000ba0

00003788 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
    3788:	b580      	push	{r7, lr}
    378a:	b088      	sub	sp, #32
    378c:	af00      	add	r7, sp, #0
    378e:	60ba      	str	r2, [r7, #8]
    3790:	607b      	str	r3, [r7, #4]
    3792:	4603      	mov	r3, r0
    3794:	73fb      	strb	r3, [r7, #15]
    3796:	460b      	mov	r3, r1
    3798:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
    379a:	68bb      	ldr	r3, [r7, #8]
    379c:	617b      	str	r3, [r7, #20]
    379e:	687b      	ldr	r3, [r7, #4]
    37a0:	61bb      	str	r3, [r7, #24]
    37a2:	7bbb      	ldrb	r3, [r7, #14]
    37a4:	2b00      	cmp	r3, #0
    37a6:	d004      	beq.n	37b2 <_usb_d_trans+0x2a>
    37a8:	7bfb      	ldrb	r3, [r7, #15]
    37aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    37ae:	b2db      	uxtb	r3, r3
    37b0:	e003      	b.n	37ba <_usb_d_trans+0x32>
    37b2:	7bfb      	ldrb	r3, [r7, #15]
    37b4:	f003 030f 	and.w	r3, r3, #15
    37b8:	b2db      	uxtb	r3, r3
    37ba:	773b      	strb	r3, [r7, #28]
    37bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    37c0:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
    37c2:	f107 0314 	add.w	r3, r7, #20
    37c6:	4618      	mov	r0, r3
    37c8:	4b03      	ldr	r3, [pc, #12]	; (37d8 <_usb_d_trans+0x50>)
    37ca:	4798      	blx	r3
    37cc:	4603      	mov	r3, r0
}
    37ce:	4618      	mov	r0, r3
    37d0:	3720      	adds	r7, #32
    37d2:	46bd      	mov	sp, r7
    37d4:	bd80      	pop	{r7, pc}
    37d6:	bf00      	nop
    37d8:	0000b2ad 	.word	0x0000b2ad

000037dc <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
    37dc:	b480      	push	{r7}
    37de:	b085      	sub	sp, #20
    37e0:	af00      	add	r7, sp, #0
    37e2:	60f8      	str	r0, [r7, #12]
    37e4:	60b9      	str	r1, [r7, #8]
    37e6:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
    37e8:	2300      	movs	r3, #0
}
    37ea:	4618      	mov	r0, r3
    37ec:	3714      	adds	r7, #20
    37ee:	46bd      	mov	sp, r7
    37f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    37f4:	4770      	bx	lr
	...

000037f8 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
    37f8:	b580      	push	{r7, lr}
    37fa:	b086      	sub	sp, #24
    37fc:	af00      	add	r7, sp, #0
    37fe:	4603      	mov	r3, r0
    3800:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3802:	79fb      	ldrb	r3, [r7, #7]
    3804:	4618      	mov	r0, r3
    3806:	4b2a      	ldr	r3, [pc, #168]	; (38b0 <usb_d_cb_trans_setup+0xb8>)
    3808:	4798      	blx	r3
    380a:	4603      	mov	r3, r0
    380c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    380e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3812:	015b      	lsls	r3, r3, #5
    3814:	4a27      	ldr	r2, [pc, #156]	; (38b4 <usb_d_cb_trans_setup+0xbc>)
    3816:	4413      	add	r3, r2
    3818:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
    381a:	693b      	ldr	r3, [r7, #16]
    381c:	330c      	adds	r3, #12
    381e:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    3820:	79fb      	ldrb	r3, [r7, #7]
    3822:	68f9      	ldr	r1, [r7, #12]
    3824:	4618      	mov	r0, r3
    3826:	4b24      	ldr	r3, [pc, #144]	; (38b8 <usb_d_cb_trans_setup+0xc0>)
    3828:	4798      	blx	r3
    382a:	4603      	mov	r3, r0
    382c:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
    382e:	7afb      	ldrb	r3, [r7, #11]
    3830:	2b08      	cmp	r3, #8
    3832:	d00d      	beq.n	3850 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3834:	79fb      	ldrb	r3, [r7, #7]
    3836:	2101      	movs	r1, #1
    3838:	4618      	mov	r0, r3
    383a:	4b20      	ldr	r3, [pc, #128]	; (38bc <usb_d_cb_trans_setup+0xc4>)
    383c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    383e:	79fb      	ldrb	r3, [r7, #7]
    3840:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3844:	b2db      	uxtb	r3, r3
    3846:	2101      	movs	r1, #1
    3848:	4618      	mov	r0, r3
    384a:	4b1c      	ldr	r3, [pc, #112]	; (38bc <usb_d_cb_trans_setup+0xc4>)
    384c:	4798      	blx	r3
		return;
    384e:	e02b      	b.n	38a8 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3850:	79fb      	ldrb	r3, [r7, #7]
    3852:	2100      	movs	r1, #0
    3854:	4618      	mov	r0, r3
    3856:	4b19      	ldr	r3, [pc, #100]	; (38bc <usb_d_cb_trans_setup+0xc4>)
    3858:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    385a:	79fb      	ldrb	r3, [r7, #7]
    385c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3860:	b2db      	uxtb	r3, r3
    3862:	2100      	movs	r1, #0
    3864:	4618      	mov	r0, r3
    3866:	4b15      	ldr	r3, [pc, #84]	; (38bc <usb_d_cb_trans_setup+0xc4>)
    3868:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    386a:	693b      	ldr	r3, [r7, #16]
    386c:	2201      	movs	r2, #1
    386e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    3870:	693b      	ldr	r3, [r7, #16]
    3872:	695b      	ldr	r3, [r3, #20]
    3874:	79fa      	ldrb	r2, [r7, #7]
    3876:	68f9      	ldr	r1, [r7, #12]
    3878:	4610      	mov	r0, r2
    387a:	4798      	blx	r3
    387c:	4603      	mov	r3, r0
    387e:	f083 0301 	eor.w	r3, r3, #1
    3882:	b2db      	uxtb	r3, r3
    3884:	2b00      	cmp	r3, #0
    3886:	d00f      	beq.n	38a8 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    3888:	693b      	ldr	r3, [r7, #16]
    388a:	2205      	movs	r2, #5
    388c:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    388e:	79fb      	ldrb	r3, [r7, #7]
    3890:	2101      	movs	r1, #1
    3892:	4618      	mov	r0, r3
    3894:	4b09      	ldr	r3, [pc, #36]	; (38bc <usb_d_cb_trans_setup+0xc4>)
    3896:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    3898:	79fb      	ldrb	r3, [r7, #7]
    389a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    389e:	b2db      	uxtb	r3, r3
    38a0:	2101      	movs	r1, #1
    38a2:	4618      	mov	r0, r3
    38a4:	4b05      	ldr	r3, [pc, #20]	; (38bc <usb_d_cb_trans_setup+0xc4>)
    38a6:	4798      	blx	r3
	}
}
    38a8:	3718      	adds	r7, #24
    38aa:	46bd      	mov	sp, r7
    38ac:	bd80      	pop	{r7, pc}
    38ae:	bf00      	nop
    38b0:	00003709 	.word	0x00003709
    38b4:	20000ba0 	.word	0x20000ba0
    38b8:	0000b205 	.word	0x0000b205
    38bc:	0000b07d 	.word	0x0000b07d

000038c0 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    38c0:	b580      	push	{r7, lr}
    38c2:	b084      	sub	sp, #16
    38c4:	af00      	add	r7, sp, #0
    38c6:	4603      	mov	r3, r0
    38c8:	6039      	str	r1, [r7, #0]
    38ca:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    38cc:	79fb      	ldrb	r3, [r7, #7]
    38ce:	4618      	mov	r0, r3
    38d0:	4b0d      	ldr	r3, [pc, #52]	; (3908 <usb_d_cb_trans_more+0x48>)
    38d2:	4798      	blx	r3
    38d4:	4603      	mov	r3, r0
    38d6:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    38d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    38dc:	015b      	lsls	r3, r3, #5
    38de:	4a0b      	ldr	r2, [pc, #44]	; (390c <usb_d_cb_trans_more+0x4c>)
    38e0:	4413      	add	r3, r2
    38e2:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    38e4:	68bb      	ldr	r3, [r7, #8]
    38e6:	789b      	ldrb	r3, [r3, #2]
    38e8:	2b03      	cmp	r3, #3
    38ea:	d107      	bne.n	38fc <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
    38ec:	68bb      	ldr	r3, [r7, #8]
    38ee:	699b      	ldr	r3, [r3, #24]
    38f0:	79fa      	ldrb	r2, [r7, #7]
    38f2:	6839      	ldr	r1, [r7, #0]
    38f4:	4610      	mov	r0, r2
    38f6:	4798      	blx	r3
    38f8:	4603      	mov	r3, r0
    38fa:	e000      	b.n	38fe <usb_d_cb_trans_more+0x3e>
	}
	return false;
    38fc:	2300      	movs	r3, #0
}
    38fe:	4618      	mov	r0, r3
    3900:	3710      	adds	r7, #16
    3902:	46bd      	mov	sp, r7
    3904:	bd80      	pop	{r7, pc}
    3906:	bf00      	nop
    3908:	00003709 	.word	0x00003709
    390c:	20000ba0 	.word	0x20000ba0

00003910 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
    3910:	b590      	push	{r4, r7, lr}
    3912:	b087      	sub	sp, #28
    3914:	af02      	add	r7, sp, #8
    3916:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
    3918:	687b      	ldr	r3, [r7, #4]
    391a:	789b      	ldrb	r3, [r3, #2]
    391c:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    391e:	687b      	ldr	r3, [r7, #4]
    3920:	7b1b      	ldrb	r3, [r3, #12]
    3922:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3926:	2b00      	cmp	r3, #0
    3928:	bf14      	ite	ne
    392a:	2301      	movne	r3, #1
    392c:	2300      	moveq	r3, #0
    392e:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
    3930:	7bfb      	ldrb	r3, [r7, #15]
    3932:	2b03      	cmp	r3, #3
    3934:	d13a      	bne.n	39ac <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    3936:	687b      	ldr	r3, [r7, #4]
    3938:	69db      	ldr	r3, [r3, #28]
    393a:	687a      	ldr	r2, [r7, #4]
    393c:	7850      	ldrb	r0, [r2, #1]
    393e:	687a      	ldr	r2, [r7, #4]
    3940:	320c      	adds	r2, #12
    3942:	2101      	movs	r1, #1
    3944:	4798      	blx	r3
    3946:	4603      	mov	r3, r0
    3948:	737b      	strb	r3, [r7, #13]
		if (err) {
    394a:	7b7b      	ldrb	r3, [r7, #13]
    394c:	2b00      	cmp	r3, #0
    394e:	d015      	beq.n	397c <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    3950:	687b      	ldr	r3, [r7, #4]
    3952:	2205      	movs	r2, #5
    3954:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    3956:	687b      	ldr	r3, [r7, #4]
    3958:	2202      	movs	r2, #2
    395a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    395c:	7bbb      	ldrb	r3, [r7, #14]
    395e:	2b00      	cmp	r3, #0
    3960:	d002      	beq.n	3968 <usb_d_ctrl_trans_done+0x58>
    3962:	687b      	ldr	r3, [r7, #4]
    3964:	785b      	ldrb	r3, [r3, #1]
    3966:	e004      	b.n	3972 <usb_d_ctrl_trans_done+0x62>
    3968:	687b      	ldr	r3, [r7, #4]
    396a:	785b      	ldrb	r3, [r3, #1]
    396c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3970:	b2db      	uxtb	r3, r3
    3972:	2101      	movs	r1, #1
    3974:	4618      	mov	r0, r3
    3976:	4b15      	ldr	r3, [pc, #84]	; (39cc <usb_d_ctrl_trans_done+0xbc>)
    3978:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
    397a:	e022      	b.n	39c2 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    397c:	687b      	ldr	r3, [r7, #4]
    397e:	2204      	movs	r2, #4
    3980:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    3982:	687b      	ldr	r3, [r7, #4]
    3984:	7858      	ldrb	r0, [r3, #1]
    3986:	7bbb      	ldrb	r3, [r7, #14]
    3988:	2b00      	cmp	r3, #0
    398a:	bf14      	ite	ne
    398c:	2301      	movne	r3, #1
    398e:	2300      	moveq	r3, #0
    3990:	b2db      	uxtb	r3, r3
    3992:	f083 0301 	eor.w	r3, r3, #1
    3996:	b2db      	uxtb	r3, r3
    3998:	f003 0301 	and.w	r3, r3, #1
    399c:	b2d9      	uxtb	r1, r3
    399e:	2301      	movs	r3, #1
    39a0:	9300      	str	r3, [sp, #0]
    39a2:	2300      	movs	r3, #0
    39a4:	2200      	movs	r2, #0
    39a6:	4c0a      	ldr	r4, [pc, #40]	; (39d0 <usb_d_ctrl_trans_done+0xc0>)
    39a8:	47a0      	blx	r4
}
    39aa:	e00a      	b.n	39c2 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    39ac:	687b      	ldr	r3, [r7, #4]
    39ae:	69db      	ldr	r3, [r3, #28]
    39b0:	687a      	ldr	r2, [r7, #4]
    39b2:	7850      	ldrb	r0, [r2, #1]
    39b4:	687a      	ldr	r2, [r7, #4]
    39b6:	320c      	adds	r2, #12
    39b8:	2100      	movs	r1, #0
    39ba:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    39bc:	687b      	ldr	r3, [r7, #4]
    39be:	2202      	movs	r2, #2
    39c0:	709a      	strb	r2, [r3, #2]
}
    39c2:	bf00      	nop
    39c4:	3714      	adds	r7, #20
    39c6:	46bd      	mov	sp, r7
    39c8:	bd90      	pop	{r4, r7, pc}
    39ca:	bf00      	nop
    39cc:	0000b07d 	.word	0x0000b07d
    39d0:	00003789 	.word	0x00003789

000039d4 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    39d4:	b580      	push	{r7, lr}
    39d6:	b086      	sub	sp, #24
    39d8:	af00      	add	r7, sp, #0
    39da:	4603      	mov	r3, r0
    39dc:	60b9      	str	r1, [r7, #8]
    39de:	607a      	str	r2, [r7, #4]
    39e0:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
    39e2:	7bfb      	ldrb	r3, [r7, #15]
    39e4:	4618      	mov	r0, r3
    39e6:	4b2f      	ldr	r3, [pc, #188]	; (3aa4 <_usb_d_cb_trans_done+0xd0>)
    39e8:	4798      	blx	r3
    39ea:	4603      	mov	r3, r0
    39ec:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    39ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
    39f2:	015b      	lsls	r3, r3, #5
    39f4:	4a2c      	ldr	r2, [pc, #176]	; (3aa8 <_usb_d_cb_trans_done+0xd4>)
    39f6:	4413      	add	r3, r2
    39f8:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
    39fa:	68bb      	ldr	r3, [r7, #8]
    39fc:	2b00      	cmp	r3, #0
    39fe:	d10e      	bne.n	3a1e <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
    3a00:	693b      	ldr	r3, [r7, #16]
    3a02:	2200      	movs	r2, #0
    3a04:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3a06:	693b      	ldr	r3, [r7, #16]
    3a08:	781b      	ldrb	r3, [r3, #0]
    3a0a:	2b00      	cmp	r3, #0
    3a0c:	d103      	bne.n	3a16 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
    3a0e:	6938      	ldr	r0, [r7, #16]
    3a10:	4b26      	ldr	r3, [pc, #152]	; (3aac <_usb_d_cb_trans_done+0xd8>)
    3a12:	4798      	blx	r3
			return;
    3a14:	e043      	b.n	3a9e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3a16:	693b      	ldr	r3, [r7, #16]
    3a18:	2201      	movs	r2, #1
    3a1a:	709a      	strb	r2, [r3, #2]
    3a1c:	e038      	b.n	3a90 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
    3a1e:	68bb      	ldr	r3, [r7, #8]
    3a20:	2b01      	cmp	r3, #1
    3a22:	d113      	bne.n	3a4c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
    3a24:	693b      	ldr	r3, [r7, #16]
    3a26:	2202      	movs	r2, #2
    3a28:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3a2a:	693b      	ldr	r3, [r7, #16]
    3a2c:	781b      	ldrb	r3, [r3, #0]
    3a2e:	2b00      	cmp	r3, #0
    3a30:	d108      	bne.n	3a44 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3a32:	693b      	ldr	r3, [r7, #16]
    3a34:	2202      	movs	r2, #2
    3a36:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3a38:	7bfb      	ldrb	r3, [r7, #15]
    3a3a:	2100      	movs	r1, #0
    3a3c:	4618      	mov	r0, r3
    3a3e:	4b1c      	ldr	r3, [pc, #112]	; (3ab0 <_usb_d_cb_trans_done+0xdc>)
    3a40:	4798      	blx	r3
    3a42:	e025      	b.n	3a90 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    3a44:	693b      	ldr	r3, [r7, #16]
    3a46:	2205      	movs	r2, #5
    3a48:	709a      	strb	r2, [r3, #2]
    3a4a:	e021      	b.n	3a90 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
    3a4c:	68bb      	ldr	r3, [r7, #8]
    3a4e:	2b02      	cmp	r3, #2
    3a50:	d10e      	bne.n	3a70 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    3a52:	693b      	ldr	r3, [r7, #16]
    3a54:	2204      	movs	r2, #4
    3a56:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3a58:	693b      	ldr	r3, [r7, #16]
    3a5a:	781b      	ldrb	r3, [r3, #0]
    3a5c:	2b00      	cmp	r3, #0
    3a5e:	d103      	bne.n	3a68 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    3a60:	693b      	ldr	r3, [r7, #16]
    3a62:	2202      	movs	r2, #2
    3a64:	709a      	strb	r2, [r3, #2]
			return;
    3a66:	e01a      	b.n	3a9e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    3a68:	693b      	ldr	r3, [r7, #16]
    3a6a:	2201      	movs	r2, #1
    3a6c:	709a      	strb	r2, [r3, #2]
    3a6e:	e00f      	b.n	3a90 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    3a70:	68bb      	ldr	r3, [r7, #8]
    3a72:	2b03      	cmp	r3, #3
    3a74:	d106      	bne.n	3a84 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    3a76:	693b      	ldr	r3, [r7, #16]
    3a78:	2200      	movs	r2, #0
    3a7a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    3a7c:	693b      	ldr	r3, [r7, #16]
    3a7e:	2205      	movs	r2, #5
    3a80:	70da      	strb	r2, [r3, #3]
    3a82:	e005      	b.n	3a90 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    3a84:	693b      	ldr	r3, [r7, #16]
    3a86:	2206      	movs	r2, #6
    3a88:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    3a8a:	693b      	ldr	r3, [r7, #16]
    3a8c:	2206      	movs	r2, #6
    3a8e:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    3a90:	693b      	ldr	r3, [r7, #16]
    3a92:	69db      	ldr	r3, [r3, #28]
    3a94:	693a      	ldr	r2, [r7, #16]
    3a96:	78d1      	ldrb	r1, [r2, #3]
    3a98:	687a      	ldr	r2, [r7, #4]
    3a9a:	7bf8      	ldrb	r0, [r7, #15]
    3a9c:	4798      	blx	r3
}
    3a9e:	3718      	adds	r7, #24
    3aa0:	46bd      	mov	sp, r7
    3aa2:	bd80      	pop	{r7, pc}
    3aa4:	00003709 	.word	0x00003709
    3aa8:	20000ba0 	.word	0x20000ba0
    3aac:	00003911 	.word	0x00003911
    3ab0:	0000b07d 	.word	0x0000b07d

00003ab4 <usb_d_init>:

int32_t usb_d_init(void)
{
    3ab4:	b580      	push	{r7, lr}
    3ab6:	b082      	sub	sp, #8
    3ab8:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
    3aba:	4b21      	ldr	r3, [pc, #132]	; (3b40 <usb_d_init+0x8c>)
    3abc:	4798      	blx	r3
    3abe:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
    3ac0:	683b      	ldr	r3, [r7, #0]
    3ac2:	2b00      	cmp	r3, #0
    3ac4:	da01      	bge.n	3aca <usb_d_init+0x16>
		return rc;
    3ac6:	683b      	ldr	r3, [r7, #0]
    3ac8:	e036      	b.n	3b38 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    3aca:	2280      	movs	r2, #128	; 0x80
    3acc:	2100      	movs	r1, #0
    3ace:	481d      	ldr	r0, [pc, #116]	; (3b44 <usb_d_init+0x90>)
    3ad0:	4b1d      	ldr	r3, [pc, #116]	; (3b48 <usb_d_init+0x94>)
    3ad2:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3ad4:	2300      	movs	r3, #0
    3ad6:	71fb      	strb	r3, [r7, #7]
    3ad8:	e01e      	b.n	3b18 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    3ada:	79fb      	ldrb	r3, [r7, #7]
    3adc:	4a19      	ldr	r2, [pc, #100]	; (3b44 <usb_d_init+0x90>)
    3ade:	015b      	lsls	r3, r3, #5
    3ae0:	4413      	add	r3, r2
    3ae2:	3301      	adds	r3, #1
    3ae4:	22ff      	movs	r2, #255	; 0xff
    3ae6:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    3ae8:	79fb      	ldrb	r3, [r7, #7]
    3aea:	4a16      	ldr	r2, [pc, #88]	; (3b44 <usb_d_init+0x90>)
    3aec:	015b      	lsls	r3, r3, #5
    3aee:	4413      	add	r3, r2
    3af0:	3314      	adds	r3, #20
    3af2:	4a16      	ldr	r2, [pc, #88]	; (3b4c <usb_d_init+0x98>)
    3af4:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    3af6:	79fb      	ldrb	r3, [r7, #7]
    3af8:	4a12      	ldr	r2, [pc, #72]	; (3b44 <usb_d_init+0x90>)
    3afa:	015b      	lsls	r3, r3, #5
    3afc:	4413      	add	r3, r2
    3afe:	3318      	adds	r3, #24
    3b00:	4a12      	ldr	r2, [pc, #72]	; (3b4c <usb_d_init+0x98>)
    3b02:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    3b04:	79fb      	ldrb	r3, [r7, #7]
    3b06:	4a0f      	ldr	r2, [pc, #60]	; (3b44 <usb_d_init+0x90>)
    3b08:	015b      	lsls	r3, r3, #5
    3b0a:	4413      	add	r3, r2
    3b0c:	331c      	adds	r3, #28
    3b0e:	4a0f      	ldr	r2, [pc, #60]	; (3b4c <usb_d_init+0x98>)
    3b10:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    3b12:	79fb      	ldrb	r3, [r7, #7]
    3b14:	3301      	adds	r3, #1
    3b16:	71fb      	strb	r3, [r7, #7]
    3b18:	79fb      	ldrb	r3, [r7, #7]
    3b1a:	2b03      	cmp	r3, #3
    3b1c:	d9dd      	bls.n	3ada <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    3b1e:	490c      	ldr	r1, [pc, #48]	; (3b50 <usb_d_init+0x9c>)
    3b20:	2000      	movs	r0, #0
    3b22:	4b0c      	ldr	r3, [pc, #48]	; (3b54 <usb_d_init+0xa0>)
    3b24:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    3b26:	490c      	ldr	r1, [pc, #48]	; (3b58 <usb_d_init+0xa4>)
    3b28:	2001      	movs	r0, #1
    3b2a:	4b0a      	ldr	r3, [pc, #40]	; (3b54 <usb_d_init+0xa0>)
    3b2c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    3b2e:	490b      	ldr	r1, [pc, #44]	; (3b5c <usb_d_init+0xa8>)
    3b30:	2002      	movs	r0, #2
    3b32:	4b08      	ldr	r3, [pc, #32]	; (3b54 <usb_d_init+0xa0>)
    3b34:	4798      	blx	r3
	return ERR_NONE;
    3b36:	2300      	movs	r3, #0
}
    3b38:	4618      	mov	r0, r3
    3b3a:	3708      	adds	r7, #8
    3b3c:	46bd      	mov	sp, r7
    3b3e:	bd80      	pop	{r7, pc}
    3b40:	0000a8c5 	.word	0x0000a8c5
    3b44:	20000ba0 	.word	0x20000ba0
    3b48:	00013745 	.word	0x00013745
    3b4c:	000037dd 	.word	0x000037dd
    3b50:	000037f9 	.word	0x000037f9
    3b54:	0000b50d 	.word	0x0000b50d
    3b58:	000038c1 	.word	0x000038c1
    3b5c:	000039d5 	.word	0x000039d5

00003b60 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    3b60:	b580      	push	{r7, lr}
    3b62:	b082      	sub	sp, #8
    3b64:	af00      	add	r7, sp, #0
    3b66:	4603      	mov	r3, r0
    3b68:	6039      	str	r1, [r7, #0]
    3b6a:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    3b6c:	79fb      	ldrb	r3, [r7, #7]
    3b6e:	6839      	ldr	r1, [r7, #0]
    3b70:	4618      	mov	r0, r3
    3b72:	4b03      	ldr	r3, [pc, #12]	; (3b80 <usb_d_register_callback+0x20>)
    3b74:	4798      	blx	r3
}
    3b76:	bf00      	nop
    3b78:	3708      	adds	r7, #8
    3b7a:	46bd      	mov	sp, r7
    3b7c:	bd80      	pop	{r7, pc}
    3b7e:	bf00      	nop
    3b80:	0000b4c5 	.word	0x0000b4c5

00003b84 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    3b84:	b580      	push	{r7, lr}
    3b86:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
    3b88:	4b02      	ldr	r3, [pc, #8]	; (3b94 <usb_d_enable+0x10>)
    3b8a:	4798      	blx	r3
    3b8c:	4603      	mov	r3, r0
}
    3b8e:	4618      	mov	r0, r3
    3b90:	bd80      	pop	{r7, pc}
    3b92:	bf00      	nop
    3b94:	0000a9b5 	.word	0x0000a9b5

00003b98 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    3b98:	b580      	push	{r7, lr}
    3b9a:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
    3b9c:	4b01      	ldr	r3, [pc, #4]	; (3ba4 <usb_d_attach+0xc>)
    3b9e:	4798      	blx	r3
}
    3ba0:	bf00      	nop
    3ba2:	bd80      	pop	{r7, pc}
    3ba4:	0000aa39 	.word	0x0000aa39

00003ba8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    3ba8:	b580      	push	{r7, lr}
    3baa:	b082      	sub	sp, #8
    3bac:	af00      	add	r7, sp, #0
    3bae:	4603      	mov	r3, r0
    3bb0:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
    3bb2:	79fb      	ldrb	r3, [r7, #7]
    3bb4:	4618      	mov	r0, r3
    3bb6:	4b03      	ldr	r3, [pc, #12]	; (3bc4 <usb_d_set_address+0x1c>)
    3bb8:	4798      	blx	r3
}
    3bba:	bf00      	nop
    3bbc:	3708      	adds	r7, #8
    3bbe:	46bd      	mov	sp, r7
    3bc0:	bd80      	pop	{r7, pc}
    3bc2:	bf00      	nop
    3bc4:	0000aa4d 	.word	0x0000aa4d

00003bc8 <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
    3bc8:	b580      	push	{r7, lr}
    3bca:	b082      	sub	sp, #8
    3bcc:	af00      	add	r7, sp, #0
    3bce:	4603      	mov	r3, r0
    3bd0:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    3bd2:	79fb      	ldrb	r3, [r7, #7]
    3bd4:	b29b      	uxth	r3, r3
    3bd6:	461a      	mov	r2, r3
    3bd8:	2100      	movs	r1, #0
    3bda:	2000      	movs	r0, #0
    3bdc:	4b03      	ldr	r3, [pc, #12]	; (3bec <usb_d_ep0_init+0x24>)
    3bde:	4798      	blx	r3
    3be0:	4603      	mov	r3, r0
}
    3be2:	4618      	mov	r0, r3
    3be4:	3708      	adds	r7, #8
    3be6:	46bd      	mov	sp, r7
    3be8:	bd80      	pop	{r7, pc}
    3bea:	bf00      	nop
    3bec:	00003bf1 	.word	0x00003bf1

00003bf0 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    3bf0:	b580      	push	{r7, lr}
    3bf2:	b086      	sub	sp, #24
    3bf4:	af00      	add	r7, sp, #0
    3bf6:	4603      	mov	r3, r0
    3bf8:	71fb      	strb	r3, [r7, #7]
    3bfa:	460b      	mov	r3, r1
    3bfc:	71bb      	strb	r3, [r7, #6]
    3bfe:	4613      	mov	r3, r2
    3c00:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    3c02:	79fb      	ldrb	r3, [r7, #7]
    3c04:	4618      	mov	r0, r3
    3c06:	4b1e      	ldr	r3, [pc, #120]	; (3c80 <usb_d_ep_init+0x90>)
    3c08:	4798      	blx	r3
    3c0a:	4603      	mov	r3, r0
    3c0c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3c0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c12:	015b      	lsls	r3, r3, #5
    3c14:	4a1b      	ldr	r2, [pc, #108]	; (3c84 <usb_d_ep_init+0x94>)
    3c16:	4413      	add	r3, r2
    3c18:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
    3c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c1e:	2b00      	cmp	r3, #0
    3c20:	db02      	blt.n	3c28 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
    3c22:	f06f 0313 	mvn.w	r3, #19
    3c26:	e027      	b.n	3c78 <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    3c28:	20ff      	movs	r0, #255	; 0xff
    3c2a:	4b15      	ldr	r3, [pc, #84]	; (3c80 <usb_d_ep_init+0x90>)
    3c2c:	4798      	blx	r3
    3c2e:	4603      	mov	r3, r0
    3c30:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
    3c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c36:	2b00      	cmp	r3, #0
    3c38:	da02      	bge.n	3c40 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
    3c3a:	f06f 0314 	mvn.w	r3, #20
    3c3e:	e01b      	b.n	3c78 <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
    3c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3c44:	015b      	lsls	r3, r3, #5
    3c46:	4a0f      	ldr	r2, [pc, #60]	; (3c84 <usb_d_ep_init+0x94>)
    3c48:	4413      	add	r3, r2
    3c4a:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    3c4c:	88ba      	ldrh	r2, [r7, #4]
    3c4e:	79b9      	ldrb	r1, [r7, #6]
    3c50:	79fb      	ldrb	r3, [r7, #7]
    3c52:	4618      	mov	r0, r3
    3c54:	4b0c      	ldr	r3, [pc, #48]	; (3c88 <usb_d_ep_init+0x98>)
    3c56:	4798      	blx	r3
    3c58:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3c5a:	68fb      	ldr	r3, [r7, #12]
    3c5c:	2b00      	cmp	r3, #0
    3c5e:	da01      	bge.n	3c64 <usb_d_ep_init+0x74>
		return rc;
    3c60:	68fb      	ldr	r3, [r7, #12]
    3c62:	e009      	b.n	3c78 <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
    3c64:	693b      	ldr	r3, [r7, #16]
    3c66:	79fa      	ldrb	r2, [r7, #7]
    3c68:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    3c6a:	79bb      	ldrb	r3, [r7, #6]
    3c6c:	f003 0303 	and.w	r3, r3, #3
    3c70:	b2da      	uxtb	r2, r3
    3c72:	693b      	ldr	r3, [r7, #16]
    3c74:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
    3c76:	2300      	movs	r3, #0
}
    3c78:	4618      	mov	r0, r3
    3c7a:	3718      	adds	r7, #24
    3c7c:	46bd      	mov	sp, r7
    3c7e:	bd80      	pop	{r7, pc}
    3c80:	00003709 	.word	0x00003709
    3c84:	20000ba0 	.word	0x20000ba0
    3c88:	0000aaed 	.word	0x0000aaed

00003c8c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    3c8c:	b580      	push	{r7, lr}
    3c8e:	b084      	sub	sp, #16
    3c90:	af00      	add	r7, sp, #0
    3c92:	4603      	mov	r3, r0
    3c94:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3c96:	79fb      	ldrb	r3, [r7, #7]
    3c98:	4618      	mov	r0, r3
    3c9a:	4b0d      	ldr	r3, [pc, #52]	; (3cd0 <usb_d_ep_deinit+0x44>)
    3c9c:	4798      	blx	r3
    3c9e:	4603      	mov	r3, r0
    3ca0:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3ca6:	015b      	lsls	r3, r3, #5
    3ca8:	4a0a      	ldr	r2, [pc, #40]	; (3cd4 <usb_d_ep_deinit+0x48>)
    3caa:	4413      	add	r3, r2
    3cac:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3cb2:	2b00      	cmp	r3, #0
    3cb4:	db07      	blt.n	3cc6 <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    3cb6:	79fb      	ldrb	r3, [r7, #7]
    3cb8:	4618      	mov	r0, r3
    3cba:	4b07      	ldr	r3, [pc, #28]	; (3cd8 <usb_d_ep_deinit+0x4c>)
    3cbc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    3cbe:	68bb      	ldr	r3, [r7, #8]
    3cc0:	22ff      	movs	r2, #255	; 0xff
    3cc2:	705a      	strb	r2, [r3, #1]
    3cc4:	e000      	b.n	3cc8 <usb_d_ep_deinit+0x3c>
		return;
    3cc6:	bf00      	nop
}
    3cc8:	3710      	adds	r7, #16
    3cca:	46bd      	mov	sp, r7
    3ccc:	bd80      	pop	{r7, pc}
    3cce:	bf00      	nop
    3cd0:	00003709 	.word	0x00003709
    3cd4:	20000ba0 	.word	0x20000ba0
    3cd8:	0000ac21 	.word	0x0000ac21

00003cdc <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    3cdc:	b580      	push	{r7, lr}
    3cde:	b086      	sub	sp, #24
    3ce0:	af00      	add	r7, sp, #0
    3ce2:	4603      	mov	r3, r0
    3ce4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3ce6:	79fb      	ldrb	r3, [r7, #7]
    3ce8:	4618      	mov	r0, r3
    3cea:	4b15      	ldr	r3, [pc, #84]	; (3d40 <usb_d_ep_enable+0x64>)
    3cec:	4798      	blx	r3
    3cee:	4603      	mov	r3, r0
    3cf0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3cf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3cf6:	015b      	lsls	r3, r3, #5
    3cf8:	4a12      	ldr	r2, [pc, #72]	; (3d44 <usb_d_ep_enable+0x68>)
    3cfa:	4413      	add	r3, r2
    3cfc:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3d02:	2b00      	cmp	r3, #0
    3d04:	da02      	bge.n	3d0c <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
    3d06:	f06f 0311 	mvn.w	r3, #17
    3d0a:	e014      	b.n	3d36 <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    3d0c:	693b      	ldr	r3, [r7, #16]
    3d0e:	781b      	ldrb	r3, [r3, #0]
    3d10:	2b00      	cmp	r3, #0
    3d12:	d101      	bne.n	3d18 <usb_d_ep_enable+0x3c>
    3d14:	2202      	movs	r2, #2
    3d16:	e000      	b.n	3d1a <usb_d_ep_enable+0x3e>
    3d18:	2201      	movs	r2, #1
    3d1a:	693b      	ldr	r3, [r7, #16]
    3d1c:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    3d1e:	79fb      	ldrb	r3, [r7, #7]
    3d20:	4618      	mov	r0, r3
    3d22:	4b09      	ldr	r3, [pc, #36]	; (3d48 <usb_d_ep_enable+0x6c>)
    3d24:	4798      	blx	r3
    3d26:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    3d28:	68fb      	ldr	r3, [r7, #12]
    3d2a:	2b00      	cmp	r3, #0
    3d2c:	da02      	bge.n	3d34 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    3d2e:	693b      	ldr	r3, [r7, #16]
    3d30:	2200      	movs	r2, #0
    3d32:	709a      	strb	r2, [r3, #2]
	}
	return rc;
    3d34:	68fb      	ldr	r3, [r7, #12]
}
    3d36:	4618      	mov	r0, r3
    3d38:	3718      	adds	r7, #24
    3d3a:	46bd      	mov	sp, r7
    3d3c:	bd80      	pop	{r7, pc}
    3d3e:	bf00      	nop
    3d40:	00003709 	.word	0x00003709
    3d44:	20000ba0 	.word	0x20000ba0
    3d48:	0000ad05 	.word	0x0000ad05

00003d4c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    3d4c:	b590      	push	{r4, r7, lr}
    3d4e:	b08d      	sub	sp, #52	; 0x34
    3d50:	af02      	add	r7, sp, #8
    3d52:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    3d54:	687b      	ldr	r3, [r7, #4]
    3d56:	7a1b      	ldrb	r3, [r3, #8]
    3d58:	4618      	mov	r0, r3
    3d5a:	4b51      	ldr	r3, [pc, #324]	; (3ea0 <usb_d_ep_transfer+0x154>)
    3d5c:	4798      	blx	r3
    3d5e:	4603      	mov	r3, r0
    3d60:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
    3d62:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3d66:	015b      	lsls	r3, r3, #5
    3d68:	4a4e      	ldr	r2, [pc, #312]	; (3ea4 <usb_d_ep_transfer+0x158>)
    3d6a:	4413      	add	r3, r2
    3d6c:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    3d6e:	687b      	ldr	r3, [r7, #4]
    3d70:	7a1b      	ldrb	r3, [r3, #8]
    3d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3d76:	2b00      	cmp	r3, #0
    3d78:	bf14      	ite	ne
    3d7a:	2301      	movne	r3, #1
    3d7c:	2300      	moveq	r3, #0
    3d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    3d82:	687b      	ldr	r3, [r7, #4]
    3d84:	7a5b      	ldrb	r3, [r3, #9]
    3d86:	2b00      	cmp	r3, #0
    3d88:	bf14      	ite	ne
    3d8a:	2301      	movne	r3, #1
    3d8c:	2300      	moveq	r3, #0
    3d8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
    3d92:	687b      	ldr	r3, [r7, #4]
    3d94:	685b      	ldr	r3, [r3, #4]
    3d96:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    3d98:	f997 301f 	ldrsb.w	r3, [r7, #31]
    3d9c:	2b00      	cmp	r3, #0
    3d9e:	da02      	bge.n	3da6 <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
    3da0:	f06f 0311 	mvn.w	r3, #17
    3da4:	e077      	b.n	3e96 <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
    3da6:	f107 0308 	add.w	r3, r7, #8
    3daa:	4618      	mov	r0, r3
    3dac:	4b3e      	ldr	r3, [pc, #248]	; (3ea8 <usb_d_ep_transfer+0x15c>)
    3dae:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    3db0:	69bb      	ldr	r3, [r7, #24]
    3db2:	789b      	ldrb	r3, [r3, #2]
    3db4:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
    3db6:	7bfb      	ldrb	r3, [r7, #15]
    3db8:	b2db      	uxtb	r3, r3
    3dba:	2b01      	cmp	r3, #1
    3dbc:	d10c      	bne.n	3dd8 <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    3dbe:	69bb      	ldr	r3, [r7, #24]
    3dc0:	2203      	movs	r2, #3
    3dc2:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    3dc4:	f107 0308 	add.w	r3, r7, #8
    3dc8:	4618      	mov	r0, r3
    3dca:	4b38      	ldr	r3, [pc, #224]	; (3eac <usb_d_ep_transfer+0x160>)
    3dcc:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    3dce:	69bb      	ldr	r3, [r7, #24]
    3dd0:	781b      	ldrb	r3, [r3, #0]
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	d151      	bne.n	3e7a <usb_d_ep_transfer+0x12e>
    3dd6:	e017      	b.n	3e08 <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
    3dd8:	f107 0308 	add.w	r3, r7, #8
    3ddc:	4618      	mov	r0, r3
    3dde:	4b33      	ldr	r3, [pc, #204]	; (3eac <usb_d_ep_transfer+0x160>)
    3de0:	4798      	blx	r3
		switch (state) {
    3de2:	7bfb      	ldrb	r3, [r7, #15]
    3de4:	b2db      	uxtb	r3, r3
    3de6:	2b05      	cmp	r3, #5
    3de8:	d004      	beq.n	3df4 <usb_d_ep_transfer+0xa8>
    3dea:	2b06      	cmp	r3, #6
    3dec:	d004      	beq.n	3df8 <usb_d_ep_transfer+0xac>
    3dee:	2b00      	cmp	r3, #0
    3df0:	d005      	beq.n	3dfe <usb_d_ep_transfer+0xb2>
    3df2:	e007      	b.n	3e04 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
    3df4:	2302      	movs	r3, #2
    3df6:	e04e      	b.n	3e96 <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
    3df8:	f06f 030f 	mvn.w	r3, #15
    3dfc:	e04b      	b.n	3e96 <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
    3dfe:	f06f 0312 	mvn.w	r3, #18
    3e02:	e048      	b.n	3e96 <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
    3e04:	2301      	movs	r3, #1
    3e06:	e046      	b.n	3e96 <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    3e08:	69bb      	ldr	r3, [r7, #24]
    3e0a:	7c9b      	ldrb	r3, [r3, #18]
    3e0c:	b29a      	uxth	r2, r3
    3e0e:	69bb      	ldr	r3, [r7, #24]
    3e10:	7cdb      	ldrb	r3, [r3, #19]
    3e12:	b29b      	uxth	r3, r3
    3e14:	021b      	lsls	r3, r3, #8
    3e16:	b29b      	uxth	r3, r3
    3e18:	4413      	add	r3, r2
    3e1a:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
    3e1c:	8afb      	ldrh	r3, [r7, #22]
    3e1e:	2b00      	cmp	r3, #0
    3e20:	d10b      	bne.n	3e3a <usb_d_ep_transfer+0xee>
			dir                 = true;
    3e22:	2301      	movs	r3, #1
    3e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
    3e28:	2300      	movs	r3, #0
    3e2a:	623b      	str	r3, [r7, #32]
			zlp                 = true;
    3e2c:	2301      	movs	r3, #1
    3e2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    3e32:	69bb      	ldr	r3, [r7, #24]
    3e34:	2204      	movs	r2, #4
    3e36:	709a      	strb	r2, [r3, #2]
    3e38:	e01f      	b.n	3e7a <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    3e3a:	69bb      	ldr	r3, [r7, #24]
    3e3c:	7b1b      	ldrb	r3, [r3, #12]
    3e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3e42:	2b00      	cmp	r3, #0
    3e44:	bf14      	ite	ne
    3e46:	2301      	movne	r3, #1
    3e48:	2300      	moveq	r3, #0
    3e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
    3e4e:	8afa      	ldrh	r2, [r7, #22]
    3e50:	6a3b      	ldr	r3, [r7, #32]
    3e52:	429a      	cmp	r2, r3
    3e54:	d201      	bcs.n	3e5a <usb_d_ep_transfer+0x10e>
				len = req_len;
    3e56:	8afb      	ldrh	r3, [r7, #22]
    3e58:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
    3e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3e5e:	2b00      	cmp	r3, #0
    3e60:	d008      	beq.n	3e74 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
    3e62:	8afa      	ldrh	r2, [r7, #22]
    3e64:	6a3b      	ldr	r3, [r7, #32]
    3e66:	429a      	cmp	r2, r3
    3e68:	bf8c      	ite	hi
    3e6a:	2301      	movhi	r3, #1
    3e6c:	2300      	movls	r3, #0
    3e6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    3e72:	e002      	b.n	3e7a <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
    3e74:	2300      	movs	r3, #0
    3e76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    3e7a:	687b      	ldr	r3, [r7, #4]
    3e7c:	7a18      	ldrb	r0, [r3, #8]
    3e7e:	687b      	ldr	r3, [r7, #4]
    3e80:	681a      	ldr	r2, [r3, #0]
    3e82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    3e86:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
    3e8a:	9300      	str	r3, [sp, #0]
    3e8c:	6a3b      	ldr	r3, [r7, #32]
    3e8e:	4c08      	ldr	r4, [pc, #32]	; (3eb0 <usb_d_ep_transfer+0x164>)
    3e90:	47a0      	blx	r4
    3e92:	6138      	str	r0, [r7, #16]
	return rc;
    3e94:	693b      	ldr	r3, [r7, #16]
}
    3e96:	4618      	mov	r0, r3
    3e98:	372c      	adds	r7, #44	; 0x2c
    3e9a:	46bd      	mov	sp, r7
    3e9c:	bd90      	pop	{r4, r7, pc}
    3e9e:	bf00      	nop
    3ea0:	00003709 	.word	0x00003709
    3ea4:	20000ba0 	.word	0x20000ba0
    3ea8:	0000bc79 	.word	0x0000bc79
    3eac:	0000bc9f 	.word	0x0000bc9f
    3eb0:	00003789 	.word	0x00003789

00003eb4 <usb_d_ep_abort>:

void usb_d_ep_abort(const uint8_t ep)
{
    3eb4:	b580      	push	{r7, lr}
    3eb6:	b084      	sub	sp, #16
    3eb8:	af00      	add	r7, sp, #0
    3eba:	4603      	mov	r3, r0
    3ebc:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3ebe:	79fb      	ldrb	r3, [r7, #7]
    3ec0:	4618      	mov	r0, r3
    3ec2:	4b0e      	ldr	r3, [pc, #56]	; (3efc <usb_d_ep_abort+0x48>)
    3ec4:	4798      	blx	r3
    3ec6:	4603      	mov	r3, r0
    3ec8:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3ece:	015b      	lsls	r3, r3, #5
    3ed0:	4a0b      	ldr	r2, [pc, #44]	; (3f00 <usb_d_ep_abort+0x4c>)
    3ed2:	4413      	add	r3, r2
    3ed4:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
    3ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    3eda:	2b00      	cmp	r3, #0
    3edc:	db0a      	blt.n	3ef4 <usb_d_ep_abort+0x40>
		return;
	}
	_usb_d_dev_ep_abort(ep);
    3ede:	79fb      	ldrb	r3, [r7, #7]
    3ee0:	4618      	mov	r0, r3
    3ee2:	4b08      	ldr	r3, [pc, #32]	; (3f04 <usb_d_ep_abort+0x50>)
    3ee4:	4798      	blx	r3
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3ee6:	68bb      	ldr	r3, [r7, #8]
    3ee8:	2201      	movs	r2, #1
    3eea:	709a      	strb	r2, [r3, #2]
	ept->xfer.hdr.status = USB_XFER_ABORT;
    3eec:	68bb      	ldr	r3, [r7, #8]
    3eee:	2204      	movs	r2, #4
    3ef0:	70da      	strb	r2, [r3, #3]
    3ef2:	e000      	b.n	3ef6 <usb_d_ep_abort+0x42>
		return;
    3ef4:	bf00      	nop
}
    3ef6:	3710      	adds	r7, #16
    3ef8:	46bd      	mov	sp, r7
    3efa:	bd80      	pop	{r7, pc}
    3efc:	00003709 	.word	0x00003709
    3f00:	20000ba0 	.word	0x20000ba0
    3f04:	0000b471 	.word	0x0000b471

00003f08 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
    3f08:	b580      	push	{r7, lr}
    3f0a:	b086      	sub	sp, #24
    3f0c:	af00      	add	r7, sp, #0
    3f0e:	4603      	mov	r3, r0
    3f10:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3f12:	79fb      	ldrb	r3, [r7, #7]
    3f14:	4618      	mov	r0, r3
    3f16:	4b1a      	ldr	r3, [pc, #104]	; (3f80 <_usb_d_ep_halt_clr+0x78>)
    3f18:	4798      	blx	r3
    3f1a:	4603      	mov	r3, r0
    3f1c:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3f1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3f22:	015b      	lsls	r3, r3, #5
    3f24:	4a17      	ldr	r2, [pc, #92]	; (3f84 <_usb_d_ep_halt_clr+0x7c>)
    3f26:	4413      	add	r3, r2
    3f28:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
    3f2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
    3f2e:	2b00      	cmp	r3, #0
    3f30:	da02      	bge.n	3f38 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
    3f32:	f06f 0311 	mvn.w	r3, #17
    3f36:	e01f      	b.n	3f78 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    3f38:	79fb      	ldrb	r3, [r7, #7]
    3f3a:	2102      	movs	r1, #2
    3f3c:	4618      	mov	r0, r3
    3f3e:	4b12      	ldr	r3, [pc, #72]	; (3f88 <_usb_d_ep_halt_clr+0x80>)
    3f40:	4798      	blx	r3
    3f42:	4603      	mov	r3, r0
    3f44:	2b00      	cmp	r3, #0
    3f46:	d016      	beq.n	3f76 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    3f48:	79fb      	ldrb	r3, [r7, #7]
    3f4a:	2100      	movs	r1, #0
    3f4c:	4618      	mov	r0, r3
    3f4e:	4b0e      	ldr	r3, [pc, #56]	; (3f88 <_usb_d_ep_halt_clr+0x80>)
    3f50:	4798      	blx	r3
    3f52:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    3f54:	68fb      	ldr	r3, [r7, #12]
    3f56:	2b00      	cmp	r3, #0
    3f58:	da01      	bge.n	3f5e <_usb_d_ep_halt_clr+0x56>
			return rc;
    3f5a:	68fb      	ldr	r3, [r7, #12]
    3f5c:	e00c      	b.n	3f78 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    3f5e:	693b      	ldr	r3, [r7, #16]
    3f60:	2201      	movs	r2, #1
    3f62:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    3f64:	693b      	ldr	r3, [r7, #16]
    3f66:	2203      	movs	r2, #3
    3f68:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    3f6a:	693b      	ldr	r3, [r7, #16]
    3f6c:	69db      	ldr	r3, [r3, #28]
    3f6e:	79f8      	ldrb	r0, [r7, #7]
    3f70:	2200      	movs	r2, #0
    3f72:	2103      	movs	r1, #3
    3f74:	4798      	blx	r3
	}
	return ERR_NONE;
    3f76:	2300      	movs	r3, #0
}
    3f78:	4618      	mov	r0, r3
    3f7a:	3718      	adds	r7, #24
    3f7c:	46bd      	mov	sp, r7
    3f7e:	bd80      	pop	{r7, pc}
    3f80:	00003709 	.word	0x00003709
    3f84:	20000ba0 	.word	0x20000ba0
    3f88:	0000b07d 	.word	0x0000b07d

00003f8c <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    3f8c:	b580      	push	{r7, lr}
    3f8e:	b082      	sub	sp, #8
    3f90:	af00      	add	r7, sp, #0
    3f92:	4603      	mov	r3, r0
    3f94:	460a      	mov	r2, r1
    3f96:	71fb      	strb	r3, [r7, #7]
    3f98:	4613      	mov	r3, r2
    3f9a:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
    3f9c:	79bb      	ldrb	r3, [r7, #6]
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	d105      	bne.n	3fae <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
    3fa2:	79fb      	ldrb	r3, [r7, #7]
    3fa4:	4618      	mov	r0, r3
    3fa6:	4b0c      	ldr	r3, [pc, #48]	; (3fd8 <usb_d_ep_halt+0x4c>)
    3fa8:	4798      	blx	r3
    3faa:	4603      	mov	r3, r0
    3fac:	e00f      	b.n	3fce <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
    3fae:	79bb      	ldrb	r3, [r7, #6]
    3fb0:	2b01      	cmp	r3, #1
    3fb2:	d106      	bne.n	3fc2 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    3fb4:	79fb      	ldrb	r3, [r7, #7]
    3fb6:	2101      	movs	r1, #1
    3fb8:	4618      	mov	r0, r3
    3fba:	4b08      	ldr	r3, [pc, #32]	; (3fdc <usb_d_ep_halt+0x50>)
    3fbc:	4798      	blx	r3
    3fbe:	4603      	mov	r3, r0
    3fc0:	e005      	b.n	3fce <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    3fc2:	79fb      	ldrb	r3, [r7, #7]
    3fc4:	2102      	movs	r1, #2
    3fc6:	4618      	mov	r0, r3
    3fc8:	4b04      	ldr	r3, [pc, #16]	; (3fdc <usb_d_ep_halt+0x50>)
    3fca:	4798      	blx	r3
    3fcc:	4603      	mov	r3, r0
	}
}
    3fce:	4618      	mov	r0, r3
    3fd0:	3708      	adds	r7, #8
    3fd2:	46bd      	mov	sp, r7
    3fd4:	bd80      	pop	{r7, pc}
    3fd6:	bf00      	nop
    3fd8:	00003f09 	.word	0x00003f09
    3fdc:	0000b07d 	.word	0x0000b07d

00003fe0 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    3fe0:	b580      	push	{r7, lr}
    3fe2:	b086      	sub	sp, #24
    3fe4:	af00      	add	r7, sp, #0
    3fe6:	4603      	mov	r3, r0
    3fe8:	603a      	str	r2, [r7, #0]
    3fea:	71fb      	strb	r3, [r7, #7]
    3fec:	460b      	mov	r3, r1
    3fee:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
    3ff0:	79fb      	ldrb	r3, [r7, #7]
    3ff2:	4618      	mov	r0, r3
    3ff4:	4b16      	ldr	r3, [pc, #88]	; (4050 <usb_d_ep_register_callback+0x70>)
    3ff6:	4798      	blx	r3
    3ff8:	4603      	mov	r3, r0
    3ffa:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
    3ffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
    4000:	015b      	lsls	r3, r3, #5
    4002:	4a14      	ldr	r2, [pc, #80]	; (4054 <usb_d_ep_register_callback+0x74>)
    4004:	4413      	add	r3, r2
    4006:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    4008:	683b      	ldr	r3, [r7, #0]
    400a:	2b00      	cmp	r3, #0
    400c:	d001      	beq.n	4012 <usb_d_ep_register_callback+0x32>
    400e:	683b      	ldr	r3, [r7, #0]
    4010:	e000      	b.n	4014 <usb_d_ep_register_callback+0x34>
    4012:	4b11      	ldr	r3, [pc, #68]	; (4058 <usb_d_ep_register_callback+0x78>)
    4014:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
    4016:	f997 3017 	ldrsb.w	r3, [r7, #23]
    401a:	2b00      	cmp	r3, #0
    401c:	db13      	blt.n	4046 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
    401e:	79bb      	ldrb	r3, [r7, #6]
    4020:	2b01      	cmp	r3, #1
    4022:	d008      	beq.n	4036 <usb_d_ep_register_callback+0x56>
    4024:	2b02      	cmp	r3, #2
    4026:	d00a      	beq.n	403e <usb_d_ep_register_callback+0x5e>
    4028:	2b00      	cmp	r3, #0
    402a:	d000      	beq.n	402e <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
    402c:	e00c      	b.n	4048 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    402e:	693b      	ldr	r3, [r7, #16]
    4030:	68fa      	ldr	r2, [r7, #12]
    4032:	615a      	str	r2, [r3, #20]
		break;
    4034:	e008      	b.n	4048 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    4036:	693b      	ldr	r3, [r7, #16]
    4038:	68fa      	ldr	r2, [r7, #12]
    403a:	619a      	str	r2, [r3, #24]
		break;
    403c:	e004      	b.n	4048 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    403e:	693b      	ldr	r3, [r7, #16]
    4040:	68fa      	ldr	r2, [r7, #12]
    4042:	61da      	str	r2, [r3, #28]
		break;
    4044:	e000      	b.n	4048 <usb_d_ep_register_callback+0x68>
		return;
    4046:	bf00      	nop
	}
}
    4048:	3718      	adds	r7, #24
    404a:	46bd      	mov	sp, r7
    404c:	bd80      	pop	{r7, pc}
    404e:	bf00      	nop
    4050:	00003709 	.word	0x00003709
    4054:	20000ba0 	.word	0x20000ba0
    4058:	000037dd 	.word	0x000037dd

0000405c <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    405c:	b480      	push	{r7}
    405e:	b085      	sub	sp, #20
    4060:	af00      	add	r7, sp, #0
    4062:	4603      	mov	r3, r0
    4064:	60b9      	str	r1, [r7, #8]
    4066:	607a      	str	r2, [r7, #4]
    4068:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    406a:	7bfb      	ldrb	r3, [r7, #15]
    406c:	f083 0301 	eor.w	r3, r3, #1
    4070:	b2db      	uxtb	r3, r3
    4072:	2b00      	cmp	r3, #0
    4074:	d000      	beq.n	4078 <assert+0x1c>
		__asm("BKPT #0");
    4076:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    4078:	bf00      	nop
    407a:	3714      	adds	r7, #20
    407c:	46bd      	mov	sp, r7
    407e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4082:	4770      	bx	lr

00004084 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    4084:	b480      	push	{r7}
    4086:	b085      	sub	sp, #20
    4088:	af00      	add	r7, sp, #0
    408a:	6078      	str	r0, [r7, #4]
    408c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    408e:	687b      	ldr	r3, [r7, #4]
    4090:	681b      	ldr	r3, [r3, #0]
    4092:	60fb      	str	r3, [r7, #12]
    4094:	e008      	b.n	40a8 <is_list_element+0x24>
		if (it == element) {
    4096:	68fa      	ldr	r2, [r7, #12]
    4098:	683b      	ldr	r3, [r7, #0]
    409a:	429a      	cmp	r2, r3
    409c:	d101      	bne.n	40a2 <is_list_element+0x1e>
			return true;
    409e:	2301      	movs	r3, #1
    40a0:	e006      	b.n	40b0 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    40a2:	68fb      	ldr	r3, [r7, #12]
    40a4:	681b      	ldr	r3, [r3, #0]
    40a6:	60fb      	str	r3, [r7, #12]
    40a8:	68fb      	ldr	r3, [r7, #12]
    40aa:	2b00      	cmp	r3, #0
    40ac:	d1f3      	bne.n	4096 <is_list_element+0x12>
		}
	}

	return false;
    40ae:	2300      	movs	r3, #0
}
    40b0:	4618      	mov	r0, r3
    40b2:	3714      	adds	r7, #20
    40b4:	46bd      	mov	sp, r7
    40b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    40ba:	4770      	bx	lr

000040bc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    40bc:	b580      	push	{r7, lr}
    40be:	b082      	sub	sp, #8
    40c0:	af00      	add	r7, sp, #0
    40c2:	6078      	str	r0, [r7, #4]
    40c4:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    40c6:	6839      	ldr	r1, [r7, #0]
    40c8:	6878      	ldr	r0, [r7, #4]
    40ca:	4b0f      	ldr	r3, [pc, #60]	; (4108 <list_insert_as_head+0x4c>)
    40cc:	4798      	blx	r3
    40ce:	4603      	mov	r3, r0
    40d0:	2b00      	cmp	r3, #0
    40d2:	bf14      	ite	ne
    40d4:	2301      	movne	r3, #1
    40d6:	2300      	moveq	r3, #0
    40d8:	b2db      	uxtb	r3, r3
    40da:	f083 0301 	eor.w	r3, r3, #1
    40de:	b2db      	uxtb	r3, r3
    40e0:	f003 0301 	and.w	r3, r3, #1
    40e4:	b2db      	uxtb	r3, r3
    40e6:	2239      	movs	r2, #57	; 0x39
    40e8:	4908      	ldr	r1, [pc, #32]	; (410c <list_insert_as_head+0x50>)
    40ea:	4618      	mov	r0, r3
    40ec:	4b08      	ldr	r3, [pc, #32]	; (4110 <list_insert_as_head+0x54>)
    40ee:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    40f0:	687b      	ldr	r3, [r7, #4]
    40f2:	681a      	ldr	r2, [r3, #0]
    40f4:	683b      	ldr	r3, [r7, #0]
    40f6:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    40f8:	687b      	ldr	r3, [r7, #4]
    40fa:	683a      	ldr	r2, [r7, #0]
    40fc:	601a      	str	r2, [r3, #0]
}
    40fe:	bf00      	nop
    4100:	3708      	adds	r7, #8
    4102:	46bd      	mov	sp, r7
    4104:	bd80      	pop	{r7, pc}
    4106:	bf00      	nop
    4108:	00004085 	.word	0x00004085
    410c:	00013b2c 	.word	0x00013b2c
    4110:	0000405d 	.word	0x0000405d

00004114 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    4114:	b480      	push	{r7}
    4116:	b083      	sub	sp, #12
    4118:	af00      	add	r7, sp, #0
    411a:	6078      	str	r0, [r7, #4]
    411c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    411e:	687b      	ldr	r3, [r7, #4]
    4120:	681a      	ldr	r2, [r3, #0]
    4122:	683b      	ldr	r3, [r7, #0]
    4124:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    4126:	687b      	ldr	r3, [r7, #4]
    4128:	683a      	ldr	r2, [r7, #0]
    412a:	601a      	str	r2, [r3, #0]
}
    412c:	bf00      	nop
    412e:	370c      	adds	r7, #12
    4130:	46bd      	mov	sp, r7
    4132:	f85d 7b04 	ldr.w	r7, [sp], #4
    4136:	4770      	bx	lr

00004138 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    4138:	b580      	push	{r7, lr}
    413a:	b084      	sub	sp, #16
    413c:	af00      	add	r7, sp, #0
    413e:	6078      	str	r0, [r7, #4]
    4140:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
    4142:	687b      	ldr	r3, [r7, #4]
    4144:	681b      	ldr	r3, [r3, #0]
    4146:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
    4148:	6839      	ldr	r1, [r7, #0]
    414a:	6878      	ldr	r0, [r7, #4]
    414c:	4b16      	ldr	r3, [pc, #88]	; (41a8 <list_insert_at_end+0x70>)
    414e:	4798      	blx	r3
    4150:	4603      	mov	r3, r0
    4152:	2b00      	cmp	r3, #0
    4154:	bf14      	ite	ne
    4156:	2301      	movne	r3, #1
    4158:	2300      	moveq	r3, #0
    415a:	b2db      	uxtb	r3, r3
    415c:	f083 0301 	eor.w	r3, r3, #1
    4160:	b2db      	uxtb	r3, r3
    4162:	f003 0301 	and.w	r3, r3, #1
    4166:	b2db      	uxtb	r3, r3
    4168:	224f      	movs	r2, #79	; 0x4f
    416a:	4910      	ldr	r1, [pc, #64]	; (41ac <list_insert_at_end+0x74>)
    416c:	4618      	mov	r0, r3
    416e:	4b10      	ldr	r3, [pc, #64]	; (41b0 <list_insert_at_end+0x78>)
    4170:	4798      	blx	r3

	if (!list->head) {
    4172:	687b      	ldr	r3, [r7, #4]
    4174:	681b      	ldr	r3, [r3, #0]
    4176:	2b00      	cmp	r3, #0
    4178:	d109      	bne.n	418e <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
    417a:	687b      	ldr	r3, [r7, #4]
    417c:	683a      	ldr	r2, [r7, #0]
    417e:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
    4180:	683b      	ldr	r3, [r7, #0]
    4182:	2200      	movs	r2, #0
    4184:	601a      	str	r2, [r3, #0]
		return;
    4186:	e00c      	b.n	41a2 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
    4188:	68fb      	ldr	r3, [r7, #12]
    418a:	681b      	ldr	r3, [r3, #0]
    418c:	60fb      	str	r3, [r7, #12]
	while (it->next) {
    418e:	68fb      	ldr	r3, [r7, #12]
    4190:	681b      	ldr	r3, [r3, #0]
    4192:	2b00      	cmp	r3, #0
    4194:	d1f8      	bne.n	4188 <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
    4196:	68fb      	ldr	r3, [r7, #12]
    4198:	683a      	ldr	r2, [r7, #0]
    419a:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
    419c:	683b      	ldr	r3, [r7, #0]
    419e:	2200      	movs	r2, #0
    41a0:	601a      	str	r2, [r3, #0]
}
    41a2:	3710      	adds	r7, #16
    41a4:	46bd      	mov	sp, r7
    41a6:	bd80      	pop	{r7, pc}
    41a8:	00004085 	.word	0x00004085
    41ac:	00013b2c 	.word	0x00013b2c
    41b0:	0000405d 	.word	0x0000405d

000041b4 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    41b4:	b480      	push	{r7}
    41b6:	b085      	sub	sp, #20
    41b8:	af00      	add	r7, sp, #0
    41ba:	6078      	str	r0, [r7, #4]
	if (list->head) {
    41bc:	687b      	ldr	r3, [r7, #4]
    41be:	681b      	ldr	r3, [r3, #0]
    41c0:	2b00      	cmp	r3, #0
    41c2:	d009      	beq.n	41d8 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    41c4:	687b      	ldr	r3, [r7, #4]
    41c6:	681b      	ldr	r3, [r3, #0]
    41c8:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    41ca:	687b      	ldr	r3, [r7, #4]
    41cc:	681b      	ldr	r3, [r3, #0]
    41ce:	681a      	ldr	r2, [r3, #0]
    41d0:	687b      	ldr	r3, [r7, #4]
    41d2:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    41d4:	68fb      	ldr	r3, [r7, #12]
    41d6:	e000      	b.n	41da <list_remove_head+0x26>
	}

	return NULL;
    41d8:	2300      	movs	r3, #0
}
    41da:	4618      	mov	r0, r3
    41dc:	3714      	adds	r7, #20
    41de:	46bd      	mov	sp, r7
    41e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    41e4:	4770      	bx	lr

000041e6 <list_delete_element>:

/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
    41e6:	b480      	push	{r7}
    41e8:	b085      	sub	sp, #20
    41ea:	af00      	add	r7, sp, #0
    41ec:	6078      	str	r0, [r7, #4]
    41ee:	6039      	str	r1, [r7, #0]
	if (!element) {
    41f0:	683b      	ldr	r3, [r7, #0]
    41f2:	2b00      	cmp	r3, #0
    41f4:	d101      	bne.n	41fa <list_delete_element+0x14>
		return false;
    41f6:	2300      	movs	r3, #0
    41f8:	e024      	b.n	4244 <list_delete_element+0x5e>
	}

	if (list->head == element) {
    41fa:	687b      	ldr	r3, [r7, #4]
    41fc:	681a      	ldr	r2, [r3, #0]
    41fe:	683b      	ldr	r3, [r7, #0]
    4200:	429a      	cmp	r2, r3
    4202:	d106      	bne.n	4212 <list_delete_element+0x2c>
		list->head = list->head->next;
    4204:	687b      	ldr	r3, [r7, #4]
    4206:	681b      	ldr	r3, [r3, #0]
    4208:	681a      	ldr	r2, [r3, #0]
    420a:	687b      	ldr	r3, [r7, #4]
    420c:	601a      	str	r2, [r3, #0]
		return true;
    420e:	2301      	movs	r3, #1
    4210:	e018      	b.n	4244 <list_delete_element+0x5e>
	} else {
		struct list_element *it = list->head;
    4212:	687b      	ldr	r3, [r7, #4]
    4214:	681b      	ldr	r3, [r3, #0]
    4216:	60fb      	str	r3, [r7, #12]

		while (it && it->next != element) {
    4218:	e002      	b.n	4220 <list_delete_element+0x3a>
			it = it->next;
    421a:	68fb      	ldr	r3, [r7, #12]
    421c:	681b      	ldr	r3, [r3, #0]
    421e:	60fb      	str	r3, [r7, #12]
		while (it && it->next != element) {
    4220:	68fb      	ldr	r3, [r7, #12]
    4222:	2b00      	cmp	r3, #0
    4224:	d004      	beq.n	4230 <list_delete_element+0x4a>
    4226:	68fb      	ldr	r3, [r7, #12]
    4228:	681a      	ldr	r2, [r3, #0]
    422a:	683b      	ldr	r3, [r7, #0]
    422c:	429a      	cmp	r2, r3
    422e:	d1f4      	bne.n	421a <list_delete_element+0x34>
		}
		if (it) {
    4230:	68fb      	ldr	r3, [r7, #12]
    4232:	2b00      	cmp	r3, #0
    4234:	d005      	beq.n	4242 <list_delete_element+0x5c>
			it->next = ((struct list_element *)element)->next;
    4236:	683b      	ldr	r3, [r7, #0]
    4238:	681a      	ldr	r2, [r3, #0]
    423a:	68fb      	ldr	r3, [r7, #12]
    423c:	601a      	str	r2, [r3, #0]
			return true;
    423e:	2301      	movs	r3, #1
    4240:	e000      	b.n	4244 <list_delete_element+0x5e>
		}
	}

	return false;
    4242:	2300      	movs	r3, #0
}
    4244:	4618      	mov	r0, r3
    4246:	3714      	adds	r7, #20
    4248:	46bd      	mov	sp, r7
    424a:	f85d 7b04 	ldr.w	r7, [sp], #4
    424e:	4770      	bx	lr

00004250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    4250:	b480      	push	{r7}
    4252:	b083      	sub	sp, #12
    4254:	af00      	add	r7, sp, #0
    4256:	4603      	mov	r3, r0
    4258:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    425a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    425e:	2b00      	cmp	r3, #0
    4260:	db0b      	blt.n	427a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4262:	4909      	ldr	r1, [pc, #36]	; (4288 <__NVIC_EnableIRQ+0x38>)
    4264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4268:	095b      	lsrs	r3, r3, #5
    426a:	88fa      	ldrh	r2, [r7, #6]
    426c:	f002 021f 	and.w	r2, r2, #31
    4270:	2001      	movs	r0, #1
    4272:	fa00 f202 	lsl.w	r2, r0, r2
    4276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    427a:	bf00      	nop
    427c:	370c      	adds	r7, #12
    427e:	46bd      	mov	sp, r7
    4280:	f85d 7b04 	ldr.w	r7, [sp], #4
    4284:	4770      	bx	lr
    4286:	bf00      	nop
    4288:	e000e100 	.word	0xe000e100

0000428c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    428c:	b480      	push	{r7}
    428e:	b083      	sub	sp, #12
    4290:	af00      	add	r7, sp, #0
    4292:	4603      	mov	r3, r0
    4294:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    429a:	2b00      	cmp	r3, #0
    429c:	db10      	blt.n	42c0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    429e:	490b      	ldr	r1, [pc, #44]	; (42cc <__NVIC_DisableIRQ+0x40>)
    42a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    42a4:	095b      	lsrs	r3, r3, #5
    42a6:	88fa      	ldrh	r2, [r7, #6]
    42a8:	f002 021f 	and.w	r2, r2, #31
    42ac:	2001      	movs	r0, #1
    42ae:	fa00 f202 	lsl.w	r2, r0, r2
    42b2:	3320      	adds	r3, #32
    42b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    42b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    42bc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    42c0:	bf00      	nop
    42c2:	370c      	adds	r7, #12
    42c4:	46bd      	mov	sp, r7
    42c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    42ca:	4770      	bx	lr
    42cc:	e000e100 	.word	0xe000e100

000042d0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    42d0:	b480      	push	{r7}
    42d2:	b083      	sub	sp, #12
    42d4:	af00      	add	r7, sp, #0
    42d6:	4603      	mov	r3, r0
    42d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    42da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    42de:	2b00      	cmp	r3, #0
    42e0:	db0c      	blt.n	42fc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    42e2:	4909      	ldr	r1, [pc, #36]	; (4308 <__NVIC_ClearPendingIRQ+0x38>)
    42e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    42e8:	095b      	lsrs	r3, r3, #5
    42ea:	88fa      	ldrh	r2, [r7, #6]
    42ec:	f002 021f 	and.w	r2, r2, #31
    42f0:	2001      	movs	r0, #1
    42f2:	fa00 f202 	lsl.w	r2, r0, r2
    42f6:	3360      	adds	r3, #96	; 0x60
    42f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    42fc:	bf00      	nop
    42fe:	370c      	adds	r7, #12
    4300:	46bd      	mov	sp, r7
    4302:	f85d 7b04 	ldr.w	r7, [sp], #4
    4306:	4770      	bx	lr
    4308:	e000e100 	.word	0xe000e100

0000430c <hri_can_get_PSR_EP_bit>:
{
	return ((Can *)hw)->ECR.reg;
}

static inline bool hri_can_get_PSR_EP_bit(const void *const hw)
{
    430c:	b480      	push	{r7}
    430e:	b083      	sub	sp, #12
    4310:	af00      	add	r7, sp, #0
    4312:	6078      	str	r0, [r7, #4]
	return (((Can *)hw)->PSR.reg & CAN_PSR_EP) >> CAN_PSR_EP_Pos;
    4314:	687b      	ldr	r3, [r7, #4]
    4316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4318:	095b      	lsrs	r3, r3, #5
    431a:	f003 0301 	and.w	r3, r3, #1
    431e:	2b00      	cmp	r3, #0
    4320:	bf14      	ite	ne
    4322:	2301      	movne	r3, #1
    4324:	2300      	moveq	r3, #0
    4326:	b2db      	uxtb	r3, r3
}
    4328:	4618      	mov	r0, r3
    432a:	370c      	adds	r7, #12
    432c:	46bd      	mov	sp, r7
    432e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4332:	4770      	bx	lr

00004334 <hri_can_write_MRCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_MRCFG_reg(const void *const hw, hri_can_mrcfg_reg_t data)
{
    4334:	b480      	push	{r7}
    4336:	b083      	sub	sp, #12
    4338:	af00      	add	r7, sp, #0
    433a:	6078      	str	r0, [r7, #4]
    433c:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->MRCFG.reg = data;
    433e:	687b      	ldr	r3, [r7, #4]
    4340:	683a      	ldr	r2, [r7, #0]
    4342:	609a      	str	r2, [r3, #8]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4344:	bf00      	nop
    4346:	370c      	adds	r7, #12
    4348:	46bd      	mov	sp, r7
    434a:	f85d 7b04 	ldr.w	r7, [sp], #4
    434e:	4770      	bx	lr

00004350 <hri_can_write_DBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_DBTP_reg(const void *const hw, hri_can_dbtp_reg_t data)
{
    4350:	b480      	push	{r7}
    4352:	b083      	sub	sp, #12
    4354:	af00      	add	r7, sp, #0
    4356:	6078      	str	r0, [r7, #4]
    4358:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->DBTP.reg = data;
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	683a      	ldr	r2, [r7, #0]
    435e:	60da      	str	r2, [r3, #12]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4360:	bf00      	nop
    4362:	370c      	adds	r7, #12
    4364:	46bd      	mov	sp, r7
    4366:	f85d 7b04 	ldr.w	r7, [sp], #4
    436a:	4770      	bx	lr

0000436c <hri_can_set_CCCR_INIT_bit>:
{
	return ((Can *)hw)->RWD.reg;
}

static inline void hri_can_set_CCCR_INIT_bit(const void *const hw)
{
    436c:	b480      	push	{r7}
    436e:	b083      	sub	sp, #12
    4370:	af00      	add	r7, sp, #0
    4372:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_INIT;
    4374:	687b      	ldr	r3, [r7, #4]
    4376:	699b      	ldr	r3, [r3, #24]
    4378:	f043 0201 	orr.w	r2, r3, #1
    437c:	687b      	ldr	r3, [r7, #4]
    437e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4380:	bf00      	nop
    4382:	370c      	adds	r7, #12
    4384:	46bd      	mov	sp, r7
    4386:	f85d 7b04 	ldr.w	r7, [sp], #4
    438a:	4770      	bx	lr

0000438c <hri_can_get_CCCR_INIT_bit>:

static inline bool hri_can_get_CCCR_INIT_bit(const void *const hw)
{
    438c:	b480      	push	{r7}
    438e:	b085      	sub	sp, #20
    4390:	af00      	add	r7, sp, #0
    4392:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Can *)hw)->CCCR.reg;
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	699b      	ldr	r3, [r3, #24]
    4398:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & CAN_CCCR_INIT) >> CAN_CCCR_INIT_Pos;
    439a:	68fb      	ldr	r3, [r7, #12]
    439c:	f003 0301 	and.w	r3, r3, #1
    43a0:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    43a2:	68fb      	ldr	r3, [r7, #12]
    43a4:	2b00      	cmp	r3, #0
    43a6:	bf14      	ite	ne
    43a8:	2301      	movne	r3, #1
    43aa:	2300      	moveq	r3, #0
    43ac:	b2db      	uxtb	r3, r3
}
    43ae:	4618      	mov	r0, r3
    43b0:	3714      	adds	r7, #20
    43b2:	46bd      	mov	sp, r7
    43b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    43b8:	4770      	bx	lr

000043ba <hri_can_clear_CCCR_INIT_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_INIT_bit(const void *const hw)
{
    43ba:	b480      	push	{r7}
    43bc:	b083      	sub	sp, #12
    43be:	af00      	add	r7, sp, #0
    43c0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_INIT;
    43c2:	687b      	ldr	r3, [r7, #4]
    43c4:	699b      	ldr	r3, [r3, #24]
    43c6:	f023 0201 	bic.w	r2, r3, #1
    43ca:	687b      	ldr	r3, [r7, #4]
    43cc:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    43ce:	bf00      	nop
    43d0:	370c      	adds	r7, #12
    43d2:	46bd      	mov	sp, r7
    43d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    43d8:	4770      	bx	lr

000043da <hri_can_set_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_INIT;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_CCE_bit(const void *const hw)
{
    43da:	b480      	push	{r7}
    43dc:	b083      	sub	sp, #12
    43de:	af00      	add	r7, sp, #0
    43e0:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= CAN_CCCR_CCE;
    43e2:	687b      	ldr	r3, [r7, #4]
    43e4:	699b      	ldr	r3, [r3, #24]
    43e6:	f043 0202 	orr.w	r2, r3, #2
    43ea:	687b      	ldr	r3, [r7, #4]
    43ec:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    43ee:	bf00      	nop
    43f0:	370c      	adds	r7, #12
    43f2:	46bd      	mov	sp, r7
    43f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    43f8:	4770      	bx	lr

000043fa <hri_can_clear_CCCR_CCE_bit>:
	((Can *)hw)->CCCR.reg = tmp;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_clear_CCCR_CCE_bit(const void *const hw)
{
    43fa:	b480      	push	{r7}
    43fc:	b083      	sub	sp, #12
    43fe:	af00      	add	r7, sp, #0
    4400:	6078      	str	r0, [r7, #4]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg &= ~CAN_CCCR_CCE;
    4402:	687b      	ldr	r3, [r7, #4]
    4404:	699b      	ldr	r3, [r3, #24]
    4406:	f023 0202 	bic.w	r2, r3, #2
    440a:	687b      	ldr	r3, [r7, #4]
    440c:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    440e:	bf00      	nop
    4410:	370c      	adds	r7, #12
    4412:	46bd      	mov	sp, r7
    4414:	f85d 7b04 	ldr.w	r7, [sp], #4
    4418:	4770      	bx	lr

0000441a <hri_can_set_CCCR_reg>:
	((Can *)hw)->CCCR.reg ^= CAN_CCCR_NISO;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline void hri_can_set_CCCR_reg(const void *const hw, hri_can_cccr_reg_t mask)
{
    441a:	b480      	push	{r7}
    441c:	b083      	sub	sp, #12
    441e:	af00      	add	r7, sp, #0
    4420:	6078      	str	r0, [r7, #4]
    4422:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->CCCR.reg |= mask;
    4424:	687b      	ldr	r3, [r7, #4]
    4426:	699a      	ldr	r2, [r3, #24]
    4428:	683b      	ldr	r3, [r7, #0]
    442a:	431a      	orrs	r2, r3
    442c:	687b      	ldr	r3, [r7, #4]
    442e:	619a      	str	r2, [r3, #24]
	CAN_CRITICAL_SECTION_LEAVE();
}
    4430:	bf00      	nop
    4432:	370c      	adds	r7, #12
    4434:	46bd      	mov	sp, r7
    4436:	f85d 7b04 	ldr.w	r7, [sp], #4
    443a:	4770      	bx	lr

0000443c <hri_can_write_NBTP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_NBTP_reg(const void *const hw, hri_can_nbtp_reg_t data)
{
    443c:	b480      	push	{r7}
    443e:	b083      	sub	sp, #12
    4440:	af00      	add	r7, sp, #0
    4442:	6078      	str	r0, [r7, #4]
    4444:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->NBTP.reg = data;
    4446:	687b      	ldr	r3, [r7, #4]
    4448:	683a      	ldr	r2, [r7, #0]
    444a:	61da      	str	r2, [r3, #28]
	CAN_CRITICAL_SECTION_LEAVE();
}
    444c:	bf00      	nop
    444e:	370c      	adds	r7, #12
    4450:	46bd      	mov	sp, r7
    4452:	f85d 7b04 	ldr.w	r7, [sp], #4
    4456:	4770      	bx	lr

00004458 <hri_can_write_IR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_IR_reg(const void *const hw, hri_can_ir_reg_t data)
{
    4458:	b480      	push	{r7}
    445a:	b083      	sub	sp, #12
    445c:	af00      	add	r7, sp, #0
    445e:	6078      	str	r0, [r7, #4]
    4460:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->IR.reg = data;
    4462:	687b      	ldr	r3, [r7, #4]
    4464:	683a      	ldr	r2, [r7, #0]
    4466:	651a      	str	r2, [r3, #80]	; 0x50
	CAN_CRITICAL_SECTION_LEAVE();
}
    4468:	bf00      	nop
    446a:	370c      	adds	r7, #12
    446c:	46bd      	mov	sp, r7
    446e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4472:	4770      	bx	lr

00004474 <hri_can_read_IR_reg>:
	((Can *)hw)->IR.reg ^= mask;
	CAN_CRITICAL_SECTION_LEAVE();
}

static inline hri_can_ir_reg_t hri_can_read_IR_reg(const void *const hw)
{
    4474:	b480      	push	{r7}
    4476:	b083      	sub	sp, #12
    4478:	af00      	add	r7, sp, #0
    447a:	6078      	str	r0, [r7, #4]
	return ((Can *)hw)->IR.reg;
    447c:	687b      	ldr	r3, [r7, #4]
    447e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
    4480:	4618      	mov	r0, r3
    4482:	370c      	adds	r7, #12
    4484:	46bd      	mov	sp, r7
    4486:	f85d 7b04 	ldr.w	r7, [sp], #4
    448a:	4770      	bx	lr

0000448c <hri_can_write_ILE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_ILE_reg(const void *const hw, hri_can_ile_reg_t data)
{
    448c:	b480      	push	{r7}
    448e:	b083      	sub	sp, #12
    4490:	af00      	add	r7, sp, #0
    4492:	6078      	str	r0, [r7, #4]
    4494:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->ILE.reg = data;
    4496:	687b      	ldr	r3, [r7, #4]
    4498:	683a      	ldr	r2, [r7, #0]
    449a:	65da      	str	r2, [r3, #92]	; 0x5c
	CAN_CRITICAL_SECTION_LEAVE();
}
    449c:	bf00      	nop
    449e:	370c      	adds	r7, #12
    44a0:	46bd      	mov	sp, r7
    44a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    44a6:	4770      	bx	lr

000044a8 <hri_can_write_GFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_GFC_reg(const void *const hw, hri_can_gfc_reg_t data)
{
    44a8:	b480      	push	{r7}
    44aa:	b083      	sub	sp, #12
    44ac:	af00      	add	r7, sp, #0
    44ae:	6078      	str	r0, [r7, #4]
    44b0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->GFC.reg = data;
    44b2:	687b      	ldr	r3, [r7, #4]
    44b4:	683a      	ldr	r2, [r7, #0]
    44b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	CAN_CRITICAL_SECTION_LEAVE();
}
    44ba:	bf00      	nop
    44bc:	370c      	adds	r7, #12
    44be:	46bd      	mov	sp, r7
    44c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    44c4:	4770      	bx	lr

000044c6 <hri_can_write_SIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_SIDFC_reg(const void *const hw, hri_can_sidfc_reg_t data)
{
    44c6:	b480      	push	{r7}
    44c8:	b083      	sub	sp, #12
    44ca:	af00      	add	r7, sp, #0
    44cc:	6078      	str	r0, [r7, #4]
    44ce:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->SIDFC.reg = data;
    44d0:	687b      	ldr	r3, [r7, #4]
    44d2:	683a      	ldr	r2, [r7, #0]
    44d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	CAN_CRITICAL_SECTION_LEAVE();
}
    44d8:	bf00      	nop
    44da:	370c      	adds	r7, #12
    44dc:	46bd      	mov	sp, r7
    44de:	f85d 7b04 	ldr.w	r7, [sp], #4
    44e2:	4770      	bx	lr

000044e4 <hri_can_write_XIDFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDFC_reg(const void *const hw, hri_can_xidfc_reg_t data)
{
    44e4:	b480      	push	{r7}
    44e6:	b083      	sub	sp, #12
    44e8:	af00      	add	r7, sp, #0
    44ea:	6078      	str	r0, [r7, #4]
    44ec:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDFC.reg = data;
    44ee:	687b      	ldr	r3, [r7, #4]
    44f0:	683a      	ldr	r2, [r7, #0]
    44f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	CAN_CRITICAL_SECTION_LEAVE();
}
    44f6:	bf00      	nop
    44f8:	370c      	adds	r7, #12
    44fa:	46bd      	mov	sp, r7
    44fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4500:	4770      	bx	lr

00004502 <hri_can_write_XIDAM_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_XIDAM_reg(const void *const hw, hri_can_xidam_reg_t data)
{
    4502:	b480      	push	{r7}
    4504:	b083      	sub	sp, #12
    4506:	af00      	add	r7, sp, #0
    4508:	6078      	str	r0, [r7, #4]
    450a:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->XIDAM.reg = data;
    450c:	687b      	ldr	r3, [r7, #4]
    450e:	683a      	ldr	r2, [r7, #0]
    4510:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	CAN_CRITICAL_SECTION_LEAVE();
}
    4514:	bf00      	nop
    4516:	370c      	adds	r7, #12
    4518:	46bd      	mov	sp, r7
    451a:	f85d 7b04 	ldr.w	r7, [sp], #4
    451e:	4770      	bx	lr

00004520 <hri_can_write_RXF0C_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXF0C_reg(const void *const hw, hri_can_rxf0c_reg_t data)
{
    4520:	b480      	push	{r7}
    4522:	b083      	sub	sp, #12
    4524:	af00      	add	r7, sp, #0
    4526:	6078      	str	r0, [r7, #4]
    4528:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXF0C.reg = data;
    452a:	687b      	ldr	r3, [r7, #4]
    452c:	683a      	ldr	r2, [r7, #0]
    452e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	CAN_CRITICAL_SECTION_LEAVE();
}
    4532:	bf00      	nop
    4534:	370c      	adds	r7, #12
    4536:	46bd      	mov	sp, r7
    4538:	f85d 7b04 	ldr.w	r7, [sp], #4
    453c:	4770      	bx	lr

0000453e <hri_can_write_RXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_RXESC_reg(const void *const hw, hri_can_rxesc_reg_t data)
{
    453e:	b480      	push	{r7}
    4540:	b083      	sub	sp, #12
    4542:	af00      	add	r7, sp, #0
    4544:	6078      	str	r0, [r7, #4]
    4546:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->RXESC.reg = data;
    4548:	687b      	ldr	r3, [r7, #4]
    454a:	683a      	ldr	r2, [r7, #0]
    454c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	CAN_CRITICAL_SECTION_LEAVE();
}
    4550:	bf00      	nop
    4552:	370c      	adds	r7, #12
    4554:	46bd      	mov	sp, r7
    4556:	f85d 7b04 	ldr.w	r7, [sp], #4
    455a:	4770      	bx	lr

0000455c <hri_can_write_TXBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXBC_reg(const void *const hw, hri_can_txbc_reg_t data)
{
    455c:	b480      	push	{r7}
    455e:	b083      	sub	sp, #12
    4560:	af00      	add	r7, sp, #0
    4562:	6078      	str	r0, [r7, #4]
    4564:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXBC.reg = data;
    4566:	687b      	ldr	r3, [r7, #4]
    4568:	683a      	ldr	r2, [r7, #0]
    456a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	CAN_CRITICAL_SECTION_LEAVE();
}
    456e:	bf00      	nop
    4570:	370c      	adds	r7, #12
    4572:	46bd      	mov	sp, r7
    4574:	f85d 7b04 	ldr.w	r7, [sp], #4
    4578:	4770      	bx	lr

0000457a <hri_can_write_TXESC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXESC_reg(const void *const hw, hri_can_txesc_reg_t data)
{
    457a:	b480      	push	{r7}
    457c:	b083      	sub	sp, #12
    457e:	af00      	add	r7, sp, #0
    4580:	6078      	str	r0, [r7, #4]
    4582:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXESC.reg = data;
    4584:	687b      	ldr	r3, [r7, #4]
    4586:	683a      	ldr	r2, [r7, #0]
    4588:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	CAN_CRITICAL_SECTION_LEAVE();
}
    458c:	bf00      	nop
    458e:	370c      	adds	r7, #12
    4590:	46bd      	mov	sp, r7
    4592:	f85d 7b04 	ldr.w	r7, [sp], #4
    4596:	4770      	bx	lr

00004598 <hri_can_write_TXEFC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_can_write_TXEFC_reg(const void *const hw, hri_can_txefc_reg_t data)
{
    4598:	b480      	push	{r7}
    459a:	b083      	sub	sp, #12
    459c:	af00      	add	r7, sp, #0
    459e:	6078      	str	r0, [r7, #4]
    45a0:	6039      	str	r1, [r7, #0]
	CAN_CRITICAL_SECTION_ENTER();
	((Can *)hw)->TXEFC.reg = data;
    45a2:	687b      	ldr	r3, [r7, #4]
    45a4:	683a      	ldr	r2, [r7, #0]
    45a6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	CAN_CRITICAL_SECTION_LEAVE();
}
    45aa:	bf00      	nop
    45ac:	370c      	adds	r7, #12
    45ae:	46bd      	mov	sp, r7
    45b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    45b4:	4770      	bx	lr
	...

000045b8 <_can_async_init>:

/**
 * \brief Initialize CAN.
 */
int32_t _can_async_init(struct _can_async_device *const dev, void *const hw)
{
    45b8:	b580      	push	{r7, lr}
    45ba:	b082      	sub	sp, #8
    45bc:	af00      	add	r7, sp, #0
    45be:	6078      	str	r0, [r7, #4]
    45c0:	6039      	str	r1, [r7, #0]
	dev->hw = hw;
    45c2:	687b      	ldr	r3, [r7, #4]
    45c4:	683a      	ldr	r2, [r7, #0]
    45c6:	601a      	str	r2, [r3, #0]
	hri_can_set_CCCR_INIT_bit(dev->hw);
    45c8:	687b      	ldr	r3, [r7, #4]
    45ca:	681b      	ldr	r3, [r3, #0]
    45cc:	4618      	mov	r0, r3
    45ce:	4b56      	ldr	r3, [pc, #344]	; (4728 <_can_async_init+0x170>)
    45d0:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw) == 0)
    45d2:	bf00      	nop
    45d4:	687b      	ldr	r3, [r7, #4]
    45d6:	681b      	ldr	r3, [r3, #0]
    45d8:	4618      	mov	r0, r3
    45da:	4b54      	ldr	r3, [pc, #336]	; (472c <_can_async_init+0x174>)
    45dc:	4798      	blx	r3
    45de:	4603      	mov	r3, r0
    45e0:	f083 0301 	eor.w	r3, r3, #1
    45e4:	b2db      	uxtb	r3, r3
    45e6:	2b00      	cmp	r3, #0
    45e8:	d1f4      	bne.n	45d4 <_can_async_init+0x1c>
		;
	hri_can_set_CCCR_CCE_bit(dev->hw);
    45ea:	687b      	ldr	r3, [r7, #4]
    45ec:	681b      	ldr	r3, [r3, #0]
    45ee:	4618      	mov	r0, r3
    45f0:	4b4f      	ldr	r3, [pc, #316]	; (4730 <_can_async_init+0x178>)
    45f2:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
	}
#endif

#ifdef CONF_CAN1_ENABLED
	if (hw == CAN1) {
    45f4:	683b      	ldr	r3, [r7, #0]
    45f6:	4a4f      	ldr	r2, [pc, #316]	; (4734 <_can_async_init+0x17c>)
    45f8:	4293      	cmp	r3, r2
    45fa:	d17c      	bne.n	46f6 <_can_async_init+0x13e>
		_can1_dev    = dev;
    45fc:	4a4e      	ldr	r2, [pc, #312]	; (4738 <_can_async_init+0x180>)
    45fe:	687b      	ldr	r3, [r7, #4]
    4600:	6013      	str	r3, [r2, #0]
		dev->context = (void *)&_can1_context;
    4602:	687b      	ldr	r3, [r7, #4]
    4604:	4a4d      	ldr	r2, [pc, #308]	; (473c <_can_async_init+0x184>)
    4606:	619a      	str	r2, [r3, #24]
		hri_can_set_CCCR_reg(dev->hw, CONF_CAN1_CCCR_REG);
    4608:	687b      	ldr	r3, [r7, #4]
    460a:	681b      	ldr	r3, [r3, #0]
    460c:	f44f 7100 	mov.w	r1, #512	; 0x200
    4610:	4618      	mov	r0, r3
    4612:	4b4b      	ldr	r3, [pc, #300]	; (4740 <_can_async_init+0x188>)
    4614:	4798      	blx	r3
		hri_can_write_MRCFG_reg(dev->hw, CONF_CAN1_MRCFG_REG);
    4616:	687b      	ldr	r3, [r7, #4]
    4618:	681b      	ldr	r3, [r3, #0]
    461a:	2102      	movs	r1, #2
    461c:	4618      	mov	r0, r3
    461e:	4b49      	ldr	r3, [pc, #292]	; (4744 <_can_async_init+0x18c>)
    4620:	4798      	blx	r3
		hri_can_write_NBTP_reg(dev->hw, CONF_CAN1_BTP_REG);
    4622:	687b      	ldr	r3, [r7, #4]
    4624:	681b      	ldr	r3, [r3, #0]
    4626:	f640 2103 	movw	r1, #2563	; 0xa03
    462a:	4618      	mov	r0, r3
    462c:	4b46      	ldr	r3, [pc, #280]	; (4748 <_can_async_init+0x190>)
    462e:	4798      	blx	r3
		hri_can_write_DBTP_reg(dev->hw, CONF_CAN1_DBTP_REG);
    4630:	687b      	ldr	r3, [r7, #4]
    4632:	681b      	ldr	r3, [r3, #0]
    4634:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    4638:	4618      	mov	r0, r3
    463a:	4b44      	ldr	r3, [pc, #272]	; (474c <_can_async_init+0x194>)
    463c:	4798      	blx	r3
		hri_can_write_RXF0C_reg(dev->hw, CONF_CAN1_RXF0C_REG | CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo));
    463e:	687b      	ldr	r3, [r7, #4]
    4640:	681a      	ldr	r2, [r3, #0]
    4642:	4b43      	ldr	r3, [pc, #268]	; (4750 <_can_async_init+0x198>)
    4644:	b29b      	uxth	r3, r3
    4646:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    464a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    464e:	4619      	mov	r1, r3
    4650:	4610      	mov	r0, r2
    4652:	4b40      	ldr	r3, [pc, #256]	; (4754 <_can_async_init+0x19c>)
    4654:	4798      	blx	r3
		hri_can_write_RXESC_reg(dev->hw, CONF_CAN1_RXESC_REG);
    4656:	687b      	ldr	r3, [r7, #4]
    4658:	681b      	ldr	r3, [r3, #0]
    465a:	2107      	movs	r1, #7
    465c:	4618      	mov	r0, r3
    465e:	4b3e      	ldr	r3, [pc, #248]	; (4758 <_can_async_init+0x1a0>)
    4660:	4798      	blx	r3
		hri_can_write_TXESC_reg(dev->hw, CONF_CAN1_TXESC_REG);
    4662:	687b      	ldr	r3, [r7, #4]
    4664:	681b      	ldr	r3, [r3, #0]
    4666:	2107      	movs	r1, #7
    4668:	4618      	mov	r0, r3
    466a:	4b3c      	ldr	r3, [pc, #240]	; (475c <_can_async_init+0x1a4>)
    466c:	4798      	blx	r3
		hri_can_write_TXBC_reg(dev->hw, CONF_CAN1_TXBC_REG | CAN_TXBC_TBSA((uint32_t)can1_tx_fifo));
    466e:	687b      	ldr	r3, [r7, #4]
    4670:	681a      	ldr	r2, [r3, #0]
    4672:	4b3b      	ldr	r3, [pc, #236]	; (4760 <_can_async_init+0x1a8>)
    4674:	b29b      	uxth	r3, r3
    4676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    467a:	4619      	mov	r1, r3
    467c:	4610      	mov	r0, r2
    467e:	4b39      	ldr	r3, [pc, #228]	; (4764 <_can_async_init+0x1ac>)
    4680:	4798      	blx	r3
		hri_can_write_TXEFC_reg(dev->hw, CONF_CAN1_TXEFC_REG | CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo));
    4682:	687b      	ldr	r3, [r7, #4]
    4684:	681a      	ldr	r2, [r3, #0]
    4686:	4b38      	ldr	r3, [pc, #224]	; (4768 <_can_async_init+0x1b0>)
    4688:	b29b      	uxth	r3, r3
    468a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    468e:	4619      	mov	r1, r3
    4690:	4610      	mov	r0, r2
    4692:	4b36      	ldr	r3, [pc, #216]	; (476c <_can_async_init+0x1b4>)
    4694:	4798      	blx	r3
		hri_can_write_GFC_reg(dev->hw, CONF_CAN1_GFC_REG);
    4696:	687b      	ldr	r3, [r7, #4]
    4698:	681b      	ldr	r3, [r3, #0]
    469a:	2108      	movs	r1, #8
    469c:	4618      	mov	r0, r3
    469e:	4b34      	ldr	r3, [pc, #208]	; (4770 <_can_async_init+0x1b8>)
    46a0:	4798      	blx	r3
		hri_can_write_SIDFC_reg(dev->hw, CONF_CAN1_SIDFC_REG | CAN_SIDFC_FLSSA((uint32_t)can1_rx_std_filter));
    46a2:	687b      	ldr	r3, [r7, #4]
    46a4:	681a      	ldr	r2, [r3, #0]
    46a6:	4b33      	ldr	r3, [pc, #204]	; (4774 <_can_async_init+0x1bc>)
    46a8:	b29b      	uxth	r3, r3
    46aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    46ae:	4619      	mov	r1, r3
    46b0:	4610      	mov	r0, r2
    46b2:	4b31      	ldr	r3, [pc, #196]	; (4778 <_can_async_init+0x1c0>)
    46b4:	4798      	blx	r3
		hri_can_write_XIDFC_reg(dev->hw, CONF_CAN1_XIDFC_REG | CAN_XIDFC_FLESA((uint32_t)can1_rx_ext_filter));
    46b6:	687b      	ldr	r3, [r7, #4]
    46b8:	681a      	ldr	r2, [r3, #0]
    46ba:	4b30      	ldr	r3, [pc, #192]	; (477c <_can_async_init+0x1c4>)
    46bc:	b29b      	uxth	r3, r3
    46be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    46c2:	4619      	mov	r1, r3
    46c4:	4610      	mov	r0, r2
    46c6:	4b2e      	ldr	r3, [pc, #184]	; (4780 <_can_async_init+0x1c8>)
    46c8:	4798      	blx	r3
		hri_can_write_XIDAM_reg(dev->hw, CONF_CAN1_XIDAM_REG);
    46ca:	687b      	ldr	r3, [r7, #4]
    46cc:	681b      	ldr	r3, [r3, #0]
    46ce:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    46d2:	4618      	mov	r0, r3
    46d4:	4b2b      	ldr	r3, [pc, #172]	; (4784 <_can_async_init+0x1cc>)
    46d6:	4798      	blx	r3

		NVIC_DisableIRQ(CAN1_IRQn);
    46d8:	204f      	movs	r0, #79	; 0x4f
    46da:	4b2b      	ldr	r3, [pc, #172]	; (4788 <_can_async_init+0x1d0>)
    46dc:	4798      	blx	r3
		NVIC_ClearPendingIRQ(CAN1_IRQn);
    46de:	204f      	movs	r0, #79	; 0x4f
    46e0:	4b2a      	ldr	r3, [pc, #168]	; (478c <_can_async_init+0x1d4>)
    46e2:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
    46e4:	204f      	movs	r0, #79	; 0x4f
    46e6:	4b2a      	ldr	r3, [pc, #168]	; (4790 <_can_async_init+0x1d8>)
    46e8:	4798      	blx	r3
		hri_can_write_ILE_reg(dev->hw, CAN_ILE_EINT0);
    46ea:	687b      	ldr	r3, [r7, #4]
    46ec:	681b      	ldr	r3, [r3, #0]
    46ee:	2101      	movs	r1, #1
    46f0:	4618      	mov	r0, r3
    46f2:	4b28      	ldr	r3, [pc, #160]	; (4794 <_can_async_init+0x1dc>)
    46f4:	4798      	blx	r3
	}
#endif

	/* Disable CCE to prevent Configuration Change */
	hri_can_clear_CCCR_CCE_bit(dev->hw);
    46f6:	687b      	ldr	r3, [r7, #4]
    46f8:	681b      	ldr	r3, [r3, #0]
    46fa:	4618      	mov	r0, r3
    46fc:	4b26      	ldr	r3, [pc, #152]	; (4798 <_can_async_init+0x1e0>)
    46fe:	4798      	blx	r3
	hri_can_clear_CCCR_INIT_bit(dev->hw);
    4700:	687b      	ldr	r3, [r7, #4]
    4702:	681b      	ldr	r3, [r3, #0]
    4704:	4618      	mov	r0, r3
    4706:	4b25      	ldr	r3, [pc, #148]	; (479c <_can_async_init+0x1e4>)
    4708:	4798      	blx	r3
	while (hri_can_get_CCCR_INIT_bit(dev->hw)) {
    470a:	bf00      	nop
    470c:	687b      	ldr	r3, [r7, #4]
    470e:	681b      	ldr	r3, [r3, #0]
    4710:	4618      	mov	r0, r3
    4712:	4b06      	ldr	r3, [pc, #24]	; (472c <_can_async_init+0x174>)
    4714:	4798      	blx	r3
    4716:	4603      	mov	r3, r0
    4718:	2b00      	cmp	r3, #0
    471a:	d1f7      	bne.n	470c <_can_async_init+0x154>
	};

	return ERR_NONE;
    471c:	2300      	movs	r3, #0
}
    471e:	4618      	mov	r0, r3
    4720:	3708      	adds	r7, #8
    4722:	46bd      	mov	sp, r7
    4724:	bd80      	pop	{r7, pc}
    4726:	bf00      	nop
    4728:	0000436d 	.word	0x0000436d
    472c:	0000438d 	.word	0x0000438d
    4730:	000043db 	.word	0x000043db
    4734:	42000400 	.word	0x42000400
    4738:	20000cc0 	.word	0x20000cc0
    473c:	20000004 	.word	0x20000004
    4740:	0000441b 	.word	0x0000441b
    4744:	00004335 	.word	0x00004335
    4748:	0000443d 	.word	0x0000443d
    474c:	00004351 	.word	0x00004351
    4750:	20009ff0 	.word	0x20009ff0
    4754:	00004521 	.word	0x00004521
    4758:	0000453f 	.word	0x0000453f
    475c:	0000457b 	.word	0x0000457b
    4760:	20009fa8 	.word	0x20009fa8
    4764:	0000455d 	.word	0x0000455d
    4768:	20000c20 	.word	0x20000c20
    476c:	00004599 	.word	0x00004599
    4770:	000044a9 	.word	0x000044a9
    4774:	20000c30 	.word	0x20000c30
    4778:	000044c7 	.word	0x000044c7
    477c:	20000cb0 	.word	0x20000cb0
    4780:	000044e5 	.word	0x000044e5
    4784:	00004503 	.word	0x00004503
    4788:	0000428d 	.word	0x0000428d
    478c:	000042d1 	.word	0x000042d1
    4790:	00004251 	.word	0x00004251
    4794:	0000448d 	.word	0x0000448d
    4798:	000043fb 	.word	0x000043fb
    479c:	000043bb 	.word	0x000043bb

000047a0 <CAN1_Handler>:

/*
 * \brief CAN interrupt handler
 */
void CAN1_Handler(void)
{
    47a0:	b590      	push	{r4, r7, lr}
    47a2:	b083      	sub	sp, #12
    47a4:	af00      	add	r7, sp, #0
	struct _can_async_device *dev = _can1_dev;
    47a6:	4b2c      	ldr	r3, [pc, #176]	; (4858 <CAN1_Handler+0xb8>)
    47a8:	681b      	ldr	r3, [r3, #0]
    47aa:	607b      	str	r3, [r7, #4]
	uint32_t                  ir;
	ir = hri_can_read_IR_reg(dev->hw);
    47ac:	687b      	ldr	r3, [r7, #4]
    47ae:	681b      	ldr	r3, [r3, #0]
    47b0:	4618      	mov	r0, r3
    47b2:	4b2a      	ldr	r3, [pc, #168]	; (485c <CAN1_Handler+0xbc>)
    47b4:	4798      	blx	r3
    47b6:	6038      	str	r0, [r7, #0]

	if (ir & CAN_IR_RF0N) {
    47b8:	683b      	ldr	r3, [r7, #0]
    47ba:	f003 0301 	and.w	r3, r3, #1
    47be:	2b00      	cmp	r3, #0
    47c0:	d003      	beq.n	47ca <CAN1_Handler+0x2a>
		dev->cb.rx_done(dev);
    47c2:	687b      	ldr	r3, [r7, #4]
    47c4:	689b      	ldr	r3, [r3, #8]
    47c6:	6878      	ldr	r0, [r7, #4]
    47c8:	4798      	blx	r3
	}

	if (ir & CAN_IR_TC) {
    47ca:	683b      	ldr	r3, [r7, #0]
    47cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    47d0:	2b00      	cmp	r3, #0
    47d2:	d003      	beq.n	47dc <CAN1_Handler+0x3c>
		dev->cb.tx_done(dev);
    47d4:	687b      	ldr	r3, [r7, #4]
    47d6:	685b      	ldr	r3, [r3, #4]
    47d8:	6878      	ldr	r0, [r7, #4]
    47da:	4798      	blx	r3
	}

	if (ir & CAN_IR_BO) {
    47dc:	683b      	ldr	r3, [r7, #0]
    47de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    47e2:	2b00      	cmp	r3, #0
    47e4:	d004      	beq.n	47f0 <CAN1_Handler+0x50>
		dev->cb.irq_handler(dev, CAN_IRQ_BO);
    47e6:	687b      	ldr	r3, [r7, #4]
    47e8:	68db      	ldr	r3, [r3, #12]
    47ea:	2103      	movs	r1, #3
    47ec:	6878      	ldr	r0, [r7, #4]
    47ee:	4798      	blx	r3
	}

	if (ir & CAN_IR_EW) {
    47f0:	683b      	ldr	r3, [r7, #0]
    47f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    47f6:	2b00      	cmp	r3, #0
    47f8:	d004      	beq.n	4804 <CAN1_Handler+0x64>
		dev->cb.irq_handler(dev, CAN_IRQ_EW);
    47fa:	687b      	ldr	r3, [r7, #4]
    47fc:	68db      	ldr	r3, [r3, #12]
    47fe:	2100      	movs	r1, #0
    4800:	6878      	ldr	r0, [r7, #4]
    4802:	4798      	blx	r3
	}

	if (ir & CAN_IR_EP) {
    4804:	683b      	ldr	r3, [r7, #0]
    4806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    480a:	2b00      	cmp	r3, #0
    480c:	d00f      	beq.n	482e <CAN1_Handler+0x8e>
		dev->cb.irq_handler(dev, hri_can_get_PSR_EP_bit(dev->hw) ? CAN_IRQ_EP : CAN_IRQ_EA);
    480e:	687b      	ldr	r3, [r7, #4]
    4810:	68dc      	ldr	r4, [r3, #12]
    4812:	687b      	ldr	r3, [r7, #4]
    4814:	681b      	ldr	r3, [r3, #0]
    4816:	4618      	mov	r0, r3
    4818:	4b11      	ldr	r3, [pc, #68]	; (4860 <CAN1_Handler+0xc0>)
    481a:	4798      	blx	r3
    481c:	4603      	mov	r3, r0
    481e:	2b00      	cmp	r3, #0
    4820:	d001      	beq.n	4826 <CAN1_Handler+0x86>
    4822:	2302      	movs	r3, #2
    4824:	e000      	b.n	4828 <CAN1_Handler+0x88>
    4826:	2301      	movs	r3, #1
    4828:	4619      	mov	r1, r3
    482a:	6878      	ldr	r0, [r7, #4]
    482c:	47a0      	blx	r4
	}

	if (ir & CAN_IR_RF0L) {
    482e:	683b      	ldr	r3, [r7, #0]
    4830:	f003 0308 	and.w	r3, r3, #8
    4834:	2b00      	cmp	r3, #0
    4836:	d004      	beq.n	4842 <CAN1_Handler+0xa2>
		dev->cb.irq_handler(dev, CAN_IRQ_DO);
    4838:	687b      	ldr	r3, [r7, #4]
    483a:	68db      	ldr	r3, [r3, #12]
    483c:	2104      	movs	r1, #4
    483e:	6878      	ldr	r0, [r7, #4]
    4840:	4798      	blx	r3
	}

	hri_can_write_IR_reg(dev->hw, ir);
    4842:	687b      	ldr	r3, [r7, #4]
    4844:	681b      	ldr	r3, [r3, #0]
    4846:	6839      	ldr	r1, [r7, #0]
    4848:	4618      	mov	r0, r3
    484a:	4b06      	ldr	r3, [pc, #24]	; (4864 <CAN1_Handler+0xc4>)
    484c:	4798      	blx	r3
}
    484e:	bf00      	nop
    4850:	370c      	adds	r7, #12
    4852:	46bd      	mov	sp, r7
    4854:	bd90      	pop	{r4, r7, pc}
    4856:	bf00      	nop
    4858:	20000cc0 	.word	0x20000cc0
    485c:	00004475 	.word	0x00004475
    4860:	0000430d 	.word	0x0000430d
    4864:	00004459 	.word	0x00004459

00004868 <__NVIC_SetPendingIRQ>:
{
    4868:	b480      	push	{r7}
    486a:	b083      	sub	sp, #12
    486c:	af00      	add	r7, sp, #0
    486e:	4603      	mov	r3, r0
    4870:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4876:	2b00      	cmp	r3, #0
    4878:	db0c      	blt.n	4894 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    487a:	4909      	ldr	r1, [pc, #36]	; (48a0 <__NVIC_SetPendingIRQ+0x38>)
    487c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4880:	095b      	lsrs	r3, r3, #5
    4882:	88fa      	ldrh	r2, [r7, #6]
    4884:	f002 021f 	and.w	r2, r2, #31
    4888:	2001      	movs	r0, #1
    488a:	fa00 f202 	lsl.w	r2, r0, r2
    488e:	3340      	adds	r3, #64	; 0x40
    4890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4894:	bf00      	nop
    4896:	370c      	adds	r7, #12
    4898:	46bd      	mov	sp, r7
    489a:	f85d 7b04 	ldr.w	r7, [sp], #4
    489e:	4770      	bx	lr
    48a0:	e000e100 	.word	0xe000e100

000048a4 <_irq_set>:

/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
    48a4:	b580      	push	{r7, lr}
    48a6:	b082      	sub	sp, #8
    48a8:	af00      	add	r7, sp, #0
    48aa:	4603      	mov	r3, r0
    48ac:	71fb      	strb	r3, [r7, #7]
	NVIC_SetPendingIRQ((IRQn_Type)n);
    48ae:	79fb      	ldrb	r3, [r7, #7]
    48b0:	b21b      	sxth	r3, r3
    48b2:	4618      	mov	r0, r3
    48b4:	4b02      	ldr	r3, [pc, #8]	; (48c0 <_irq_set+0x1c>)
    48b6:	4798      	blx	r3
}
    48b8:	bf00      	nop
    48ba:	3708      	adds	r7, #8
    48bc:	46bd      	mov	sp, r7
    48be:	bd80      	pop	{r7, pc}
    48c0:	00004869 	.word	0x00004869

000048c4 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    48c4:	b480      	push	{r7}
    48c6:	b083      	sub	sp, #12
    48c8:	af00      	add	r7, sp, #0
    48ca:	4603      	mov	r3, r0
    48cc:	6039      	str	r1, [r7, #0]
    48ce:	80fb      	strh	r3, [r7, #6]
    48d0:	4613      	mov	r3, r2
    48d2:	717b      	strb	r3, [r7, #5]
	switch (power) {
    48d4:	797b      	ldrb	r3, [r7, #5]
    48d6:	3b04      	subs	r3, #4
    48d8:	2b05      	cmp	r3, #5
    48da:	d86b      	bhi.n	49b4 <_get_cycles_for_us_internal+0xf0>
    48dc:	a201      	add	r2, pc, #4	; (adr r2, 48e4 <_get_cycles_for_us_internal+0x20>)
    48de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    48e2:	bf00      	nop
    48e4:	00004993 	.word	0x00004993
    48e8:	00004973 	.word	0x00004973
    48ec:	00004955 	.word	0x00004955
    48f0:	00004937 	.word	0x00004937
    48f4:	00004919 	.word	0x00004919
    48f8:	000048fd 	.word	0x000048fd
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    48fc:	88fb      	ldrh	r3, [r7, #6]
    48fe:	683a      	ldr	r2, [r7, #0]
    4900:	4935      	ldr	r1, [pc, #212]	; (49d8 <_get_cycles_for_us_internal+0x114>)
    4902:	fba1 1202 	umull	r1, r2, r1, r2
    4906:	0c92      	lsrs	r2, r2, #18
    4908:	fb02 f303 	mul.w	r3, r2, r3
    490c:	3302      	adds	r3, #2
    490e:	4a33      	ldr	r2, [pc, #204]	; (49dc <_get_cycles_for_us_internal+0x118>)
    4910:	fba2 2303 	umull	r2, r3, r2, r3
    4914:	085b      	lsrs	r3, r3, #1
    4916:	e059      	b.n	49cc <_get_cycles_for_us_internal+0x108>
	case 8:
		return (us * (freq / 100000) + 29) / 30;
    4918:	88fb      	ldrh	r3, [r7, #6]
    491a:	683a      	ldr	r2, [r7, #0]
    491c:	0952      	lsrs	r2, r2, #5
    491e:	4930      	ldr	r1, [pc, #192]	; (49e0 <_get_cycles_for_us_internal+0x11c>)
    4920:	fba1 1202 	umull	r1, r2, r1, r2
    4924:	09d2      	lsrs	r2, r2, #7
    4926:	fb02 f303 	mul.w	r3, r2, r3
    492a:	331d      	adds	r3, #29
    492c:	4a2d      	ldr	r2, [pc, #180]	; (49e4 <_get_cycles_for_us_internal+0x120>)
    492e:	fba2 2303 	umull	r2, r3, r2, r3
    4932:	091b      	lsrs	r3, r3, #4
    4934:	e04a      	b.n	49cc <_get_cycles_for_us_internal+0x108>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
    4936:	88fb      	ldrh	r3, [r7, #6]
    4938:	683a      	ldr	r2, [r7, #0]
    493a:	492b      	ldr	r1, [pc, #172]	; (49e8 <_get_cycles_for_us_internal+0x124>)
    493c:	fba1 1202 	umull	r1, r2, r1, r2
    4940:	0b52      	lsrs	r2, r2, #13
    4942:	fb02 f303 	mul.w	r3, r2, r3
    4946:	f203 132b 	addw	r3, r3, #299	; 0x12b
    494a:	4a28      	ldr	r2, [pc, #160]	; (49ec <_get_cycles_for_us_internal+0x128>)
    494c:	fba2 2303 	umull	r2, r3, r2, r3
    4950:	095b      	lsrs	r3, r3, #5
    4952:	e03b      	b.n	49cc <_get_cycles_for_us_internal+0x108>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
    4954:	88fb      	ldrh	r3, [r7, #6]
    4956:	683a      	ldr	r2, [r7, #0]
    4958:	4925      	ldr	r1, [pc, #148]	; (49f0 <_get_cycles_for_us_internal+0x12c>)
    495a:	fba1 1202 	umull	r1, r2, r1, r2
    495e:	0992      	lsrs	r2, r2, #6
    4960:	fb02 f303 	mul.w	r3, r2, r3
    4964:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4968:	4a22      	ldr	r2, [pc, #136]	; (49f4 <_get_cycles_for_us_internal+0x130>)
    496a:	fba2 2303 	umull	r2, r3, r2, r3
    496e:	099b      	lsrs	r3, r3, #6
    4970:	e02c      	b.n	49cc <_get_cycles_for_us_internal+0x108>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
    4972:	88fb      	ldrh	r3, [r7, #6]
    4974:	683a      	ldr	r2, [r7, #0]
    4976:	4920      	ldr	r1, [pc, #128]	; (49f8 <_get_cycles_for_us_internal+0x134>)
    4978:	fba1 1202 	umull	r1, r2, r1, r2
    497c:	0952      	lsrs	r2, r2, #5
    497e:	fb02 f303 	mul.w	r3, r2, r3
    4982:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
    4986:	332f      	adds	r3, #47	; 0x2f
    4988:	4a1c      	ldr	r2, [pc, #112]	; (49fc <_get_cycles_for_us_internal+0x138>)
    498a:	fba2 2303 	umull	r2, r3, r2, r3
    498e:	0b5b      	lsrs	r3, r3, #13
    4990:	e01c      	b.n	49cc <_get_cycles_for_us_internal+0x108>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
    4992:	88fb      	ldrh	r3, [r7, #6]
    4994:	683a      	ldr	r2, [r7, #0]
    4996:	491a      	ldr	r1, [pc, #104]	; (4a00 <_get_cycles_for_us_internal+0x13c>)
    4998:	fba1 1202 	umull	r1, r2, r1, r2
    499c:	08d2      	lsrs	r2, r2, #3
    499e:	fb02 f303 	mul.w	r3, r2, r3
    49a2:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
    49a6:	f203 33df 	addw	r3, r3, #991	; 0x3df
    49aa:	4a16      	ldr	r2, [pc, #88]	; (4a04 <_get_cycles_for_us_internal+0x140>)
    49ac:	fba2 2303 	umull	r2, r3, r2, r3
    49b0:	0c5b      	lsrs	r3, r3, #17
    49b2:	e00b      	b.n	49cc <_get_cycles_for_us_internal+0x108>
	default:
		return (us * freq + 2999999) / 3000000;
    49b4:	88fb      	ldrh	r3, [r7, #6]
    49b6:	683a      	ldr	r2, [r7, #0]
    49b8:	fb02 f303 	mul.w	r3, r2, r3
    49bc:	f503 1337 	add.w	r3, r3, #2998272	; 0x2dc000
    49c0:	f203 63bf 	addw	r3, r3, #1727	; 0x6bf
    49c4:	4a10      	ldr	r2, [pc, #64]	; (4a08 <_get_cycles_for_us_internal+0x144>)
    49c6:	fba2 2303 	umull	r2, r3, r2, r3
    49ca:	0c9b      	lsrs	r3, r3, #18
	}
}
    49cc:	4618      	mov	r0, r3
    49ce:	370c      	adds	r7, #12
    49d0:	46bd      	mov	sp, r7
    49d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    49d6:	4770      	bx	lr
    49d8:	431bde83 	.word	0x431bde83
    49dc:	aaaaaaab 	.word	0xaaaaaaab
    49e0:	0a7c5ac5 	.word	0x0a7c5ac5
    49e4:	88888889 	.word	0x88888889
    49e8:	d1b71759 	.word	0xd1b71759
    49ec:	1b4e81b5 	.word	0x1b4e81b5
    49f0:	10624dd3 	.word	0x10624dd3
    49f4:	057619f1 	.word	0x057619f1
    49f8:	51eb851f 	.word	0x51eb851f
    49fc:	45e7b273 	.word	0x45e7b273
    4a00:	cccccccd 	.word	0xcccccccd
    4a04:	6fd91d85 	.word	0x6fd91d85
    4a08:	165e9f81 	.word	0x165e9f81

00004a0c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    4a0c:	b580      	push	{r7, lr}
    4a0e:	b082      	sub	sp, #8
    4a10:	af00      	add	r7, sp, #0
    4a12:	4603      	mov	r3, r0
    4a14:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4a16:	88fb      	ldrh	r3, [r7, #6]
    4a18:	2209      	movs	r2, #9
    4a1a:	4904      	ldr	r1, [pc, #16]	; (4a2c <_get_cycles_for_us+0x20>)
    4a1c:	4618      	mov	r0, r3
    4a1e:	4b04      	ldr	r3, [pc, #16]	; (4a30 <_get_cycles_for_us+0x24>)
    4a20:	4798      	blx	r3
    4a22:	4603      	mov	r3, r0
}
    4a24:	4618      	mov	r0, r3
    4a26:	3708      	adds	r7, #8
    4a28:	46bd      	mov	sp, r7
    4a2a:	bd80      	pop	{r7, pc}
    4a2c:	07270e00 	.word	0x07270e00
    4a30:	000048c5 	.word	0x000048c5

00004a34 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    4a34:	b480      	push	{r7}
    4a36:	b083      	sub	sp, #12
    4a38:	af00      	add	r7, sp, #0
    4a3a:	4603      	mov	r3, r0
    4a3c:	6039      	str	r1, [r7, #0]
    4a3e:	80fb      	strh	r3, [r7, #6]
    4a40:	4613      	mov	r3, r2
    4a42:	717b      	strb	r3, [r7, #5]
	switch (power) {
    4a44:	797b      	ldrb	r3, [r7, #5]
    4a46:	3b04      	subs	r3, #4
    4a48:	2b05      	cmp	r3, #5
    4a4a:	d870      	bhi.n	4b2e <_get_cycles_for_ms_internal+0xfa>
    4a4c:	a201      	add	r2, pc, #4	; (adr r2, 4a54 <_get_cycles_for_ms_internal+0x20>)
    4a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4a52:	bf00      	nop
    4a54:	00004b11 	.word	0x00004b11
    4a58:	00004af5 	.word	0x00004af5
    4a5c:	00004ad9 	.word	0x00004ad9
    4a60:	00004ab5 	.word	0x00004ab5
    4a64:	00004a91 	.word	0x00004a91
    4a68:	00004a6d 	.word	0x00004a6d
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    4a6c:	88fb      	ldrh	r3, [r7, #6]
    4a6e:	683a      	ldr	r2, [r7, #0]
    4a70:	4937      	ldr	r1, [pc, #220]	; (4b50 <_get_cycles_for_ms_internal+0x11c>)
    4a72:	fba1 1202 	umull	r1, r2, r1, r2
    4a76:	0c92      	lsrs	r2, r2, #18
    4a78:	fb02 f303 	mul.w	r3, r2, r3
    4a7c:	3302      	adds	r3, #2
    4a7e:	4a35      	ldr	r2, [pc, #212]	; (4b54 <_get_cycles_for_ms_internal+0x120>)
    4a80:	fba2 2303 	umull	r2, r3, r2, r3
    4a84:	085b      	lsrs	r3, r3, #1
    4a86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4a8a:	fb02 f303 	mul.w	r3, r2, r3
    4a8e:	e058      	b.n	4b42 <_get_cycles_for_ms_internal+0x10e>
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    4a90:	88fb      	ldrh	r3, [r7, #6]
    4a92:	683a      	ldr	r2, [r7, #0]
    4a94:	0952      	lsrs	r2, r2, #5
    4a96:	4930      	ldr	r1, [pc, #192]	; (4b58 <_get_cycles_for_ms_internal+0x124>)
    4a98:	fba1 1202 	umull	r1, r2, r1, r2
    4a9c:	09d2      	lsrs	r2, r2, #7
    4a9e:	fb02 f303 	mul.w	r3, r2, r3
    4aa2:	3302      	adds	r3, #2
    4aa4:	4a2b      	ldr	r2, [pc, #172]	; (4b54 <_get_cycles_for_ms_internal+0x120>)
    4aa6:	fba2 2303 	umull	r2, r3, r2, r3
    4aaa:	085b      	lsrs	r3, r3, #1
    4aac:	2264      	movs	r2, #100	; 0x64
    4aae:	fb02 f303 	mul.w	r3, r2, r3
    4ab2:	e046      	b.n	4b42 <_get_cycles_for_ms_internal+0x10e>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
    4ab4:	88fb      	ldrh	r3, [r7, #6]
    4ab6:	683a      	ldr	r2, [r7, #0]
    4ab8:	4928      	ldr	r1, [pc, #160]	; (4b5c <_get_cycles_for_ms_internal+0x128>)
    4aba:	fba1 1202 	umull	r1, r2, r1, r2
    4abe:	0b52      	lsrs	r2, r2, #13
    4ac0:	fb02 f303 	mul.w	r3, r2, r3
    4ac4:	3302      	adds	r3, #2
    4ac6:	4a23      	ldr	r2, [pc, #140]	; (4b54 <_get_cycles_for_ms_internal+0x120>)
    4ac8:	fba2 2303 	umull	r2, r3, r2, r3
    4acc:	085a      	lsrs	r2, r3, #1
    4ace:	4613      	mov	r3, r2
    4ad0:	009b      	lsls	r3, r3, #2
    4ad2:	4413      	add	r3, r2
    4ad4:	005b      	lsls	r3, r3, #1
    4ad6:	e034      	b.n	4b42 <_get_cycles_for_ms_internal+0x10e>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
    4ad8:	88fb      	ldrh	r3, [r7, #6]
    4ada:	683a      	ldr	r2, [r7, #0]
    4adc:	4920      	ldr	r1, [pc, #128]	; (4b60 <_get_cycles_for_ms_internal+0x12c>)
    4ade:	fba1 1202 	umull	r1, r2, r1, r2
    4ae2:	0992      	lsrs	r2, r2, #6
    4ae4:	fb02 f303 	mul.w	r3, r2, r3
    4ae8:	3302      	adds	r3, #2
    4aea:	4a1a      	ldr	r2, [pc, #104]	; (4b54 <_get_cycles_for_ms_internal+0x120>)
    4aec:	fba2 2303 	umull	r2, r3, r2, r3
    4af0:	085b      	lsrs	r3, r3, #1
    4af2:	e026      	b.n	4b42 <_get_cycles_for_ms_internal+0x10e>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
    4af4:	88fb      	ldrh	r3, [r7, #6]
    4af6:	683a      	ldr	r2, [r7, #0]
    4af8:	491a      	ldr	r1, [pc, #104]	; (4b64 <_get_cycles_for_ms_internal+0x130>)
    4afa:	fba1 1202 	umull	r1, r2, r1, r2
    4afe:	0952      	lsrs	r2, r2, #5
    4b00:	fb02 f303 	mul.w	r3, r2, r3
    4b04:	331d      	adds	r3, #29
    4b06:	4a18      	ldr	r2, [pc, #96]	; (4b68 <_get_cycles_for_ms_internal+0x134>)
    4b08:	fba2 2303 	umull	r2, r3, r2, r3
    4b0c:	091b      	lsrs	r3, r3, #4
    4b0e:	e018      	b.n	4b42 <_get_cycles_for_ms_internal+0x10e>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
    4b10:	88fb      	ldrh	r3, [r7, #6]
    4b12:	683a      	ldr	r2, [r7, #0]
    4b14:	4915      	ldr	r1, [pc, #84]	; (4b6c <_get_cycles_for_ms_internal+0x138>)
    4b16:	fba1 1202 	umull	r1, r2, r1, r2
    4b1a:	08d2      	lsrs	r2, r2, #3
    4b1c:	fb02 f303 	mul.w	r3, r2, r3
    4b20:	f203 132b 	addw	r3, r3, #299	; 0x12b
    4b24:	4a12      	ldr	r2, [pc, #72]	; (4b70 <_get_cycles_for_ms_internal+0x13c>)
    4b26:	fba2 2303 	umull	r2, r3, r2, r3
    4b2a:	095b      	lsrs	r3, r3, #5
    4b2c:	e009      	b.n	4b42 <_get_cycles_for_ms_internal+0x10e>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
    4b2e:	88fb      	ldrh	r3, [r7, #6]
    4b30:	683a      	ldr	r2, [r7, #0]
    4b32:	fb02 f303 	mul.w	r3, r2, r3
    4b36:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4b3a:	4a0e      	ldr	r2, [pc, #56]	; (4b74 <_get_cycles_for_ms_internal+0x140>)
    4b3c:	fba2 2303 	umull	r2, r3, r2, r3
    4b40:	099b      	lsrs	r3, r3, #6
	}
}
    4b42:	4618      	mov	r0, r3
    4b44:	370c      	adds	r7, #12
    4b46:	46bd      	mov	sp, r7
    4b48:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b4c:	4770      	bx	lr
    4b4e:	bf00      	nop
    4b50:	431bde83 	.word	0x431bde83
    4b54:	aaaaaaab 	.word	0xaaaaaaab
    4b58:	0a7c5ac5 	.word	0x0a7c5ac5
    4b5c:	d1b71759 	.word	0xd1b71759
    4b60:	10624dd3 	.word	0x10624dd3
    4b64:	51eb851f 	.word	0x51eb851f
    4b68:	88888889 	.word	0x88888889
    4b6c:	cccccccd 	.word	0xcccccccd
    4b70:	1b4e81b5 	.word	0x1b4e81b5
    4b74:	057619f1 	.word	0x057619f1

00004b78 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    4b78:	b580      	push	{r7, lr}
    4b7a:	b082      	sub	sp, #8
    4b7c:	af00      	add	r7, sp, #0
    4b7e:	4603      	mov	r3, r0
    4b80:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    4b82:	88fb      	ldrh	r3, [r7, #6]
    4b84:	2209      	movs	r2, #9
    4b86:	4904      	ldr	r1, [pc, #16]	; (4b98 <_get_cycles_for_ms+0x20>)
    4b88:	4618      	mov	r0, r3
    4b8a:	4b04      	ldr	r3, [pc, #16]	; (4b9c <_get_cycles_for_ms+0x24>)
    4b8c:	4798      	blx	r3
    4b8e:	4603      	mov	r3, r0
}
    4b90:	4618      	mov	r0, r3
    4b92:	3708      	adds	r7, #8
    4b94:	46bd      	mov	sp, r7
    4b96:	bd80      	pop	{r7, pc}
    4b98:	07270e00 	.word	0x07270e00
    4b9c:	00004a35 	.word	0x00004a35

00004ba0 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4ba0:	b480      	push	{r7}
    4ba2:	b083      	sub	sp, #12
    4ba4:	af00      	add	r7, sp, #0
    4ba6:	6078      	str	r0, [r7, #4]
    4ba8:	6039      	str	r1, [r7, #0]
    4baa:	bf00      	nop
    4bac:	f3af 8000 	nop.w

00004bb0 <__delay>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    4bb0:	3901      	subs	r1, #1
    4bb2:	d8fd      	bhi.n	4bb0 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi.n __delay\n");
#endif
#endif
}
    4bb4:	bf00      	nop
    4bb6:	370c      	adds	r7, #12
    4bb8:	46bd      	mov	sp, r7
    4bba:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bbe:	4770      	bx	lr

00004bc0 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    4bc0:	b480      	push	{r7}
    4bc2:	b083      	sub	sp, #12
    4bc4:	af00      	add	r7, sp, #0
    4bc6:	6078      	str	r0, [r7, #4]
    4bc8:	460b      	mov	r3, r1
    4bca:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	881b      	ldrh	r3, [r3, #0]
    4bd0:	b29a      	uxth	r2, r3
    4bd2:	887b      	ldrh	r3, [r7, #2]
    4bd4:	021b      	lsls	r3, r3, #8
    4bd6:	b29b      	uxth	r3, r3
    4bd8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    4bdc:	b29b      	uxth	r3, r3
    4bde:	4313      	orrs	r3, r2
    4be0:	b29a      	uxth	r2, r3
    4be2:	687b      	ldr	r3, [r7, #4]
    4be4:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    4be6:	bf00      	nop
    4be8:	370c      	adds	r7, #12
    4bea:	46bd      	mov	sp, r7
    4bec:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bf0:	4770      	bx	lr

00004bf2 <hri_port_set_EVCTRL_reg>:
{
    4bf2:	b480      	push	{r7}
    4bf4:	b085      	sub	sp, #20
    4bf6:	af00      	add	r7, sp, #0
    4bf8:	60f8      	str	r0, [r7, #12]
    4bfa:	460b      	mov	r3, r1
    4bfc:	607a      	str	r2, [r7, #4]
    4bfe:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].EVCTRL.reg |= mask;
    4c00:	7afb      	ldrb	r3, [r7, #11]
    4c02:	7afa      	ldrb	r2, [r7, #11]
    4c04:	68f9      	ldr	r1, [r7, #12]
    4c06:	01d2      	lsls	r2, r2, #7
    4c08:	440a      	add	r2, r1
    4c0a:	322c      	adds	r2, #44	; 0x2c
    4c0c:	6811      	ldr	r1, [r2, #0]
    4c0e:	687a      	ldr	r2, [r7, #4]
    4c10:	430a      	orrs	r2, r1
    4c12:	68f9      	ldr	r1, [r7, #12]
    4c14:	01db      	lsls	r3, r3, #7
    4c16:	440b      	add	r3, r1
    4c18:	332c      	adds	r3, #44	; 0x2c
    4c1a:	601a      	str	r2, [r3, #0]
}
    4c1c:	bf00      	nop
    4c1e:	3714      	adds	r7, #20
    4c20:	46bd      	mov	sp, r7
    4c22:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c26:	4770      	bx	lr

00004c28 <_port_event_init>:

static inline void _port_event_init()
{
    4c28:	b580      	push	{r7, lr}
    4c2a:	af00      	add	r7, sp, #0
	hri_port_set_EVCTRL_reg(PORT, 0, CONF_PORTA_EVCTRL);
    4c2c:	2200      	movs	r2, #0
    4c2e:	2100      	movs	r1, #0
    4c30:	480a      	ldr	r0, [pc, #40]	; (4c5c <_port_event_init+0x34>)
    4c32:	4b0b      	ldr	r3, [pc, #44]	; (4c60 <_port_event_init+0x38>)
    4c34:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 1, CONF_PORTB_EVCTRL);
    4c36:	2200      	movs	r2, #0
    4c38:	2101      	movs	r1, #1
    4c3a:	4808      	ldr	r0, [pc, #32]	; (4c5c <_port_event_init+0x34>)
    4c3c:	4b08      	ldr	r3, [pc, #32]	; (4c60 <_port_event_init+0x38>)
    4c3e:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 2, CONF_PORTC_EVCTRL);
    4c40:	f64e 72ef 	movw	r2, #61423	; 0xefef
    4c44:	2102      	movs	r1, #2
    4c46:	4805      	ldr	r0, [pc, #20]	; (4c5c <_port_event_init+0x34>)
    4c48:	4b05      	ldr	r3, [pc, #20]	; (4c60 <_port_event_init+0x38>)
    4c4a:	4798      	blx	r3
	hri_port_set_EVCTRL_reg(PORT, 3, CONF_PORTD_EVCTRL);
    4c4c:	2200      	movs	r2, #0
    4c4e:	2103      	movs	r1, #3
    4c50:	4802      	ldr	r0, [pc, #8]	; (4c5c <_port_event_init+0x34>)
    4c52:	4b03      	ldr	r3, [pc, #12]	; (4c60 <_port_event_init+0x38>)
    4c54:	4798      	blx	r3
}
    4c56:	bf00      	nop
    4c58:	bd80      	pop	{r7, pc}
    4c5a:	bf00      	nop
    4c5c:	41008000 	.word	0x41008000
    4c60:	00004bf3 	.word	0x00004bf3

00004c64 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    4c64:	b580      	push	{r7, lr}
    4c66:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    4c68:	2104      	movs	r1, #4
    4c6a:	480b      	ldr	r0, [pc, #44]	; (4c98 <_init_chip+0x34>)
    4c6c:	4b0b      	ldr	r3, [pc, #44]	; (4c9c <_init_chip+0x38>)
    4c6e:	4798      	blx	r3

	_osc32kctrl_init_sources();
    4c70:	4b0b      	ldr	r3, [pc, #44]	; (4ca0 <_init_chip+0x3c>)
    4c72:	4798      	blx	r3
	_oscctrl_init_sources();
    4c74:	4b0b      	ldr	r3, [pc, #44]	; (4ca4 <_init_chip+0x40>)
    4c76:	4798      	blx	r3
	_mclk_init();
    4c78:	4b0b      	ldr	r3, [pc, #44]	; (4ca8 <_init_chip+0x44>)
    4c7a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4c7c:	f44f 6084 	mov.w	r0, #1056	; 0x420
    4c80:	4b0a      	ldr	r3, [pc, #40]	; (4cac <_init_chip+0x48>)
    4c82:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    4c84:	4b0a      	ldr	r3, [pc, #40]	; (4cb0 <_init_chip+0x4c>)
    4c86:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4c88:	f640 30df 	movw	r0, #3039	; 0xbdf
    4c8c:	4b07      	ldr	r3, [pc, #28]	; (4cac <_init_chip+0x48>)
    4c8e:	4798      	blx	r3
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
    4c90:	4b08      	ldr	r3, [pc, #32]	; (4cb4 <_init_chip+0x50>)
    4c92:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    4c94:	bf00      	nop
    4c96:	bd80      	pop	{r7, pc}
    4c98:	41004000 	.word	0x41004000
    4c9c:	00004bc1 	.word	0x00004bc1
    4ca0:	0000578d 	.word	0x0000578d
    4ca4:	00005c55 	.word	0x00005c55
    4ca8:	000056ad 	.word	0x000056ad
    4cac:	00005555 	.word	0x00005555
    4cb0:	00005c95 	.word	0x00005c95
    4cb4:	00004c29 	.word	0x00004c29

00004cb8 <_crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
    4cb8:	b480      	push	{r7}
    4cba:	b083      	sub	sp, #12
    4cbc:	af00      	add	r7, sp, #0
    4cbe:	6078      	str	r0, [r7, #4]
    4cc0:	6039      	str	r1, [r7, #0]
	device->hw = hw;
    4cc2:	687b      	ldr	r3, [r7, #4]
    4cc4:	683a      	ldr	r2, [r7, #0]
    4cc6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    4cc8:	2300      	movs	r3, #0
}
    4cca:	4618      	mov	r0, r3
    4ccc:	370c      	adds	r7, #12
    4cce:	46bd      	mov	sp, r7
    4cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cd4:	4770      	bx	lr
	...

00004cd8 <__NVIC_EnableIRQ>:
{
    4cd8:	b480      	push	{r7}
    4cda:	b083      	sub	sp, #12
    4cdc:	af00      	add	r7, sp, #0
    4cde:	4603      	mov	r3, r0
    4ce0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4ce6:	2b00      	cmp	r3, #0
    4ce8:	db0b      	blt.n	4d02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4cea:	4909      	ldr	r1, [pc, #36]	; (4d10 <__NVIC_EnableIRQ+0x38>)
    4cec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4cf0:	095b      	lsrs	r3, r3, #5
    4cf2:	88fa      	ldrh	r2, [r7, #6]
    4cf4:	f002 021f 	and.w	r2, r2, #31
    4cf8:	2001      	movs	r0, #1
    4cfa:	fa00 f202 	lsl.w	r2, r0, r2
    4cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4d02:	bf00      	nop
    4d04:	370c      	adds	r7, #12
    4d06:	46bd      	mov	sp, r7
    4d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d0c:	4770      	bx	lr
    4d0e:	bf00      	nop
    4d10:	e000e100 	.word	0xe000e100

00004d14 <__NVIC_DisableIRQ>:
{
    4d14:	b480      	push	{r7}
    4d16:	b083      	sub	sp, #12
    4d18:	af00      	add	r7, sp, #0
    4d1a:	4603      	mov	r3, r0
    4d1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4d22:	2b00      	cmp	r3, #0
    4d24:	db10      	blt.n	4d48 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4d26:	490b      	ldr	r1, [pc, #44]	; (4d54 <__NVIC_DisableIRQ+0x40>)
    4d28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4d2c:	095b      	lsrs	r3, r3, #5
    4d2e:	88fa      	ldrh	r2, [r7, #6]
    4d30:	f002 021f 	and.w	r2, r2, #31
    4d34:	2001      	movs	r0, #1
    4d36:	fa00 f202 	lsl.w	r2, r0, r2
    4d3a:	3320      	adds	r3, #32
    4d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4d40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4d44:	f3bf 8f6f 	isb	sy
}
    4d48:	bf00      	nop
    4d4a:	370c      	adds	r7, #12
    4d4c:	46bd      	mov	sp, r7
    4d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d52:	4770      	bx	lr
    4d54:	e000e100 	.word	0xe000e100

00004d58 <__NVIC_ClearPendingIRQ>:
{
    4d58:	b480      	push	{r7}
    4d5a:	b083      	sub	sp, #12
    4d5c:	af00      	add	r7, sp, #0
    4d5e:	4603      	mov	r3, r0
    4d60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4d66:	2b00      	cmp	r3, #0
    4d68:	db0c      	blt.n	4d84 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4d6a:	4909      	ldr	r1, [pc, #36]	; (4d90 <__NVIC_ClearPendingIRQ+0x38>)
    4d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4d70:	095b      	lsrs	r3, r3, #5
    4d72:	88fa      	ldrh	r2, [r7, #6]
    4d74:	f002 021f 	and.w	r2, r2, #31
    4d78:	2001      	movs	r0, #1
    4d7a:	fa00 f202 	lsl.w	r2, r0, r2
    4d7e:	3360      	adds	r3, #96	; 0x60
    4d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4d84:	bf00      	nop
    4d86:	370c      	adds	r7, #12
    4d88:	46bd      	mov	sp, r7
    4d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d8e:	4770      	bx	lr
    4d90:	e000e100 	.word	0xe000e100

00004d94 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4d94:	b480      	push	{r7}
    4d96:	b083      	sub	sp, #12
    4d98:	af00      	add	r7, sp, #0
    4d9a:	6078      	str	r0, [r7, #4]
    4d9c:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    4d9e:	bf00      	nop
    4da0:	687b      	ldr	r3, [r7, #4]
    4da2:	685a      	ldr	r2, [r3, #4]
    4da4:	683b      	ldr	r3, [r7, #0]
    4da6:	4013      	ands	r3, r2
    4da8:	2b00      	cmp	r3, #0
    4daa:	d1f9      	bne.n	4da0 <hri_eic_wait_for_sync+0xc>
	};
}
    4dac:	bf00      	nop
    4dae:	370c      	adds	r7, #12
    4db0:	46bd      	mov	sp, r7
    4db2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4db6:	4770      	bx	lr

00004db8 <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    4db8:	b480      	push	{r7}
    4dba:	b083      	sub	sp, #12
    4dbc:	af00      	add	r7, sp, #0
    4dbe:	6078      	str	r0, [r7, #4]
    4dc0:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    4dc2:	687b      	ldr	r3, [r7, #4]
    4dc4:	685a      	ldr	r2, [r3, #4]
    4dc6:	683b      	ldr	r3, [r7, #0]
    4dc8:	4013      	ands	r3, r2
    4dca:	2b00      	cmp	r3, #0
    4dcc:	bf14      	ite	ne
    4dce:	2301      	movne	r3, #1
    4dd0:	2300      	moveq	r3, #0
    4dd2:	b2db      	uxtb	r3, r3
}
    4dd4:	4618      	mov	r0, r3
    4dd6:	370c      	adds	r7, #12
    4dd8:	46bd      	mov	sp, r7
    4dda:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dde:	4770      	bx	lr

00004de0 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    4de0:	b480      	push	{r7}
    4de2:	b083      	sub	sp, #12
    4de4:	af00      	add	r7, sp, #0
    4de6:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    4de8:	687b      	ldr	r3, [r7, #4]
    4dea:	695b      	ldr	r3, [r3, #20]
}
    4dec:	4618      	mov	r0, r3
    4dee:	370c      	adds	r7, #12
    4df0:	46bd      	mov	sp, r7
    4df2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4df6:	4770      	bx	lr

00004df8 <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    4df8:	b480      	push	{r7}
    4dfa:	b083      	sub	sp, #12
    4dfc:	af00      	add	r7, sp, #0
    4dfe:	6078      	str	r0, [r7, #4]
    4e00:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    4e02:	687b      	ldr	r3, [r7, #4]
    4e04:	683a      	ldr	r2, [r7, #0]
    4e06:	615a      	str	r2, [r3, #20]
}
    4e08:	bf00      	nop
    4e0a:	370c      	adds	r7, #12
    4e0c:	46bd      	mov	sp, r7
    4e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e12:	4770      	bx	lr

00004e14 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4e14:	b480      	push	{r7}
    4e16:	b083      	sub	sp, #12
    4e18:	af00      	add	r7, sp, #0
    4e1a:	6078      	str	r0, [r7, #4]
    4e1c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    4e1e:	687b      	ldr	r3, [r7, #4]
    4e20:	683a      	ldr	r2, [r7, #0]
    4e22:	611a      	str	r2, [r3, #16]
}
    4e24:	bf00      	nop
    4e26:	370c      	adds	r7, #12
    4e28:	46bd      	mov	sp, r7
    4e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e2e:	4770      	bx	lr

00004e30 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    4e30:	b480      	push	{r7}
    4e32:	b083      	sub	sp, #12
    4e34:	af00      	add	r7, sp, #0
    4e36:	6078      	str	r0, [r7, #4]
    4e38:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    4e3a:	687b      	ldr	r3, [r7, #4]
    4e3c:	683a      	ldr	r2, [r7, #0]
    4e3e:	60da      	str	r2, [r3, #12]
}
    4e40:	bf00      	nop
    4e42:	370c      	adds	r7, #12
    4e44:	46bd      	mov	sp, r7
    4e46:	f85d 7b04 	ldr.w	r7, [sp], #4
    4e4a:	4770      	bx	lr

00004e4c <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4e4c:	b580      	push	{r7, lr}
    4e4e:	b082      	sub	sp, #8
    4e50:	af00      	add	r7, sp, #0
    4e52:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    4e54:	687b      	ldr	r3, [r7, #4]
    4e56:	781b      	ldrb	r3, [r3, #0]
    4e58:	b2db      	uxtb	r3, r3
    4e5a:	f043 0302 	orr.w	r3, r3, #2
    4e5e:	b2da      	uxtb	r2, r3
    4e60:	687b      	ldr	r3, [r7, #4]
    4e62:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4e64:	2103      	movs	r1, #3
    4e66:	6878      	ldr	r0, [r7, #4]
    4e68:	4b02      	ldr	r3, [pc, #8]	; (4e74 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    4e6a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4e6c:	bf00      	nop
    4e6e:	3708      	adds	r7, #8
    4e70:	46bd      	mov	sp, r7
    4e72:	bd80      	pop	{r7, pc}
    4e74:	00004d95 	.word	0x00004d95

00004e78 <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4e78:	b580      	push	{r7, lr}
    4e7a:	b082      	sub	sp, #8
    4e7c:	af00      	add	r7, sp, #0
    4e7e:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    4e80:	687b      	ldr	r3, [r7, #4]
    4e82:	781b      	ldrb	r3, [r3, #0]
    4e84:	b2db      	uxtb	r3, r3
    4e86:	f023 0302 	bic.w	r3, r3, #2
    4e8a:	b2da      	uxtb	r2, r3
    4e8c:	687b      	ldr	r3, [r7, #4]
    4e8e:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    4e90:	2103      	movs	r1, #3
    4e92:	6878      	ldr	r0, [r7, #4]
    4e94:	4b02      	ldr	r3, [pc, #8]	; (4ea0 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    4e96:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4e98:	bf00      	nop
    4e9a:	3708      	adds	r7, #8
    4e9c:	46bd      	mov	sp, r7
    4e9e:	bd80      	pop	{r7, pc}
    4ea0:	00004d95 	.word	0x00004d95

00004ea4 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    4ea4:	b580      	push	{r7, lr}
    4ea6:	b084      	sub	sp, #16
    4ea8:	af00      	add	r7, sp, #0
    4eaa:	6078      	str	r0, [r7, #4]
    4eac:	460b      	mov	r3, r1
    4eae:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    4eb0:	687b      	ldr	r3, [r7, #4]
    4eb2:	781b      	ldrb	r3, [r3, #0]
    4eb4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    4eb6:	7bfb      	ldrb	r3, [r7, #15]
    4eb8:	f023 0310 	bic.w	r3, r3, #16
    4ebc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    4ebe:	78fb      	ldrb	r3, [r7, #3]
    4ec0:	011b      	lsls	r3, r3, #4
    4ec2:	b25a      	sxtb	r2, r3
    4ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4ec8:	4313      	orrs	r3, r2
    4eca:	b25b      	sxtb	r3, r3
    4ecc:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    4ece:	687b      	ldr	r3, [r7, #4]
    4ed0:	7bfa      	ldrb	r2, [r7, #15]
    4ed2:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4ed4:	2103      	movs	r1, #3
    4ed6:	6878      	ldr	r0, [r7, #4]
    4ed8:	4b02      	ldr	r3, [pc, #8]	; (4ee4 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    4eda:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4edc:	bf00      	nop
    4ede:	3710      	adds	r7, #16
    4ee0:	46bd      	mov	sp, r7
    4ee2:	bd80      	pop	{r7, pc}
    4ee4:	00004d95 	.word	0x00004d95

00004ee8 <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    4ee8:	b580      	push	{r7, lr}
    4eea:	b084      	sub	sp, #16
    4eec:	af00      	add	r7, sp, #0
    4eee:	6078      	str	r0, [r7, #4]
    4ef0:	460b      	mov	r3, r1
    4ef2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4ef4:	2103      	movs	r1, #3
    4ef6:	6878      	ldr	r0, [r7, #4]
    4ef8:	4b06      	ldr	r3, [pc, #24]	; (4f14 <hri_eic_get_CTRLA_reg+0x2c>)
    4efa:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    4efc:	687b      	ldr	r3, [r7, #4]
    4efe:	781b      	ldrb	r3, [r3, #0]
    4f00:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    4f02:	7bfa      	ldrb	r2, [r7, #15]
    4f04:	78fb      	ldrb	r3, [r7, #3]
    4f06:	4013      	ands	r3, r2
    4f08:	73fb      	strb	r3, [r7, #15]
	return tmp;
    4f0a:	7bfb      	ldrb	r3, [r7, #15]
}
    4f0c:	4618      	mov	r0, r3
    4f0e:	3710      	adds	r7, #16
    4f10:	46bd      	mov	sp, r7
    4f12:	bd80      	pop	{r7, pc}
    4f14:	00004d95 	.word	0x00004d95

00004f18 <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    4f18:	b580      	push	{r7, lr}
    4f1a:	b082      	sub	sp, #8
    4f1c:	af00      	add	r7, sp, #0
    4f1e:	6078      	str	r0, [r7, #4]
    4f20:	460b      	mov	r3, r1
    4f22:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    4f24:	687b      	ldr	r3, [r7, #4]
    4f26:	78fa      	ldrb	r2, [r7, #3]
    4f28:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    4f2a:	2103      	movs	r1, #3
    4f2c:	6878      	ldr	r0, [r7, #4]
    4f2e:	4b03      	ldr	r3, [pc, #12]	; (4f3c <hri_eic_write_CTRLA_reg+0x24>)
    4f30:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    4f32:	bf00      	nop
    4f34:	3708      	adds	r7, #8
    4f36:	46bd      	mov	sp, r7
    4f38:	bd80      	pop	{r7, pc}
    4f3a:	bf00      	nop
    4f3c:	00004d95 	.word	0x00004d95

00004f40 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    4f40:	b480      	push	{r7}
    4f42:	b083      	sub	sp, #12
    4f44:	af00      	add	r7, sp, #0
    4f46:	6078      	str	r0, [r7, #4]
    4f48:	460b      	mov	r3, r1
    4f4a:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    4f4c:	687b      	ldr	r3, [r7, #4]
    4f4e:	78fa      	ldrb	r2, [r7, #3]
    4f50:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4f52:	bf00      	nop
    4f54:	370c      	adds	r7, #12
    4f56:	46bd      	mov	sp, r7
    4f58:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f5c:	4770      	bx	lr

00004f5e <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    4f5e:	b480      	push	{r7}
    4f60:	b083      	sub	sp, #12
    4f62:	af00      	add	r7, sp, #0
    4f64:	6078      	str	r0, [r7, #4]
    4f66:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    4f68:	687b      	ldr	r3, [r7, #4]
    4f6a:	683a      	ldr	r2, [r7, #0]
    4f6c:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4f6e:	bf00      	nop
    4f70:	370c      	adds	r7, #12
    4f72:	46bd      	mov	sp, r7
    4f74:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f78:	4770      	bx	lr

00004f7a <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    4f7a:	b480      	push	{r7}
    4f7c:	b083      	sub	sp, #12
    4f7e:	af00      	add	r7, sp, #0
    4f80:	6078      	str	r0, [r7, #4]
    4f82:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    4f84:	687b      	ldr	r3, [r7, #4]
    4f86:	683a      	ldr	r2, [r7, #0]
    4f88:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4f8a:	bf00      	nop
    4f8c:	370c      	adds	r7, #12
    4f8e:	46bd      	mov	sp, r7
    4f90:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f94:	4770      	bx	lr

00004f96 <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    4f96:	b480      	push	{r7}
    4f98:	b085      	sub	sp, #20
    4f9a:	af00      	add	r7, sp, #0
    4f9c:	60f8      	str	r0, [r7, #12]
    4f9e:	460b      	mov	r3, r1
    4fa0:	607a      	str	r2, [r7, #4]
    4fa2:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    4fa4:	7afb      	ldrb	r3, [r7, #11]
    4fa6:	68fa      	ldr	r2, [r7, #12]
    4fa8:	3306      	adds	r3, #6
    4faa:	009b      	lsls	r3, r3, #2
    4fac:	4413      	add	r3, r2
    4fae:	687a      	ldr	r2, [r7, #4]
    4fb0:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    4fb2:	bf00      	nop
    4fb4:	3714      	adds	r7, #20
    4fb6:	46bd      	mov	sp, r7
    4fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fbc:	4770      	bx	lr

00004fbe <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    4fbe:	b480      	push	{r7}
    4fc0:	b083      	sub	sp, #12
    4fc2:	af00      	add	r7, sp, #0
    4fc4:	6078      	str	r0, [r7, #4]
    4fc6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    4fc8:	687b      	ldr	r3, [r7, #4]
    4fca:	683a      	ldr	r2, [r7, #0]
    4fcc:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    4fce:	bf00      	nop
    4fd0:	370c      	adds	r7, #12
    4fd2:	46bd      	mov	sp, r7
    4fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fd8:	4770      	bx	lr

00004fda <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    4fda:	b480      	push	{r7}
    4fdc:	b083      	sub	sp, #12
    4fde:	af00      	add	r7, sp, #0
    4fe0:	6078      	str	r0, [r7, #4]
    4fe2:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    4fe4:	687b      	ldr	r3, [r7, #4]
    4fe6:	683a      	ldr	r2, [r7, #0]
    4fe8:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    4fea:	bf00      	nop
    4fec:	370c      	adds	r7, #12
    4fee:	46bd      	mov	sp, r7
    4ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ff4:	4770      	bx	lr
	...

00004ff8 <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    4ff8:	b580      	push	{r7, lr}
    4ffa:	b082      	sub	sp, #8
    4ffc:	af00      	add	r7, sp, #0
    4ffe:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    5000:	2101      	movs	r1, #1
    5002:	484f      	ldr	r0, [pc, #316]	; (5140 <_ext_irq_init+0x148>)
    5004:	4b4f      	ldr	r3, [pc, #316]	; (5144 <_ext_irq_init+0x14c>)
    5006:	4798      	blx	r3
    5008:	4603      	mov	r3, r0
    500a:	f083 0301 	eor.w	r3, r3, #1
    500e:	b2db      	uxtb	r3, r3
    5010:	2b00      	cmp	r3, #0
    5012:	d011      	beq.n	5038 <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    5014:	2102      	movs	r1, #2
    5016:	484a      	ldr	r0, [pc, #296]	; (5140 <_ext_irq_init+0x148>)
    5018:	4b4b      	ldr	r3, [pc, #300]	; (5148 <_ext_irq_init+0x150>)
    501a:	4798      	blx	r3
    501c:	4603      	mov	r3, r0
    501e:	2b00      	cmp	r3, #0
    5020:	d006      	beq.n	5030 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    5022:	4847      	ldr	r0, [pc, #284]	; (5140 <_ext_irq_init+0x148>)
    5024:	4b49      	ldr	r3, [pc, #292]	; (514c <_ext_irq_init+0x154>)
    5026:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    5028:	2102      	movs	r1, #2
    502a:	4845      	ldr	r0, [pc, #276]	; (5140 <_ext_irq_init+0x148>)
    502c:	4b48      	ldr	r3, [pc, #288]	; (5150 <_ext_irq_init+0x158>)
    502e:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    5030:	2101      	movs	r1, #1
    5032:	4843      	ldr	r0, [pc, #268]	; (5140 <_ext_irq_init+0x148>)
    5034:	4b47      	ldr	r3, [pc, #284]	; (5154 <_ext_irq_init+0x15c>)
    5036:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    5038:	2101      	movs	r1, #1
    503a:	4841      	ldr	r0, [pc, #260]	; (5140 <_ext_irq_init+0x148>)
    503c:	4b44      	ldr	r3, [pc, #272]	; (5150 <_ext_irq_init+0x158>)
    503e:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    5040:	2100      	movs	r1, #0
    5042:	483f      	ldr	r0, [pc, #252]	; (5140 <_ext_irq_init+0x148>)
    5044:	4b44      	ldr	r3, [pc, #272]	; (5158 <_ext_irq_init+0x160>)
    5046:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    5048:	2100      	movs	r1, #0
    504a:	483d      	ldr	r0, [pc, #244]	; (5140 <_ext_irq_init+0x148>)
    504c:	4b43      	ldr	r3, [pc, #268]	; (515c <_ext_irq_init+0x164>)
    504e:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    5050:	2100      	movs	r1, #0
    5052:	483b      	ldr	r0, [pc, #236]	; (5140 <_ext_irq_init+0x148>)
    5054:	4b42      	ldr	r3, [pc, #264]	; (5160 <_ext_irq_init+0x168>)
    5056:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    5058:	f240 31bb 	movw	r1, #955	; 0x3bb
    505c:	4838      	ldr	r0, [pc, #224]	; (5140 <_ext_irq_init+0x148>)
    505e:	4b41      	ldr	r3, [pc, #260]	; (5164 <_ext_irq_init+0x16c>)
    5060:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    5062:	f240 313b 	movw	r1, #827	; 0x33b
    5066:	4836      	ldr	r0, [pc, #216]	; (5140 <_ext_irq_init+0x148>)
    5068:	4b3f      	ldr	r3, [pc, #252]	; (5168 <_ext_irq_init+0x170>)
    506a:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    506c:	2100      	movs	r1, #0
    506e:	4834      	ldr	r0, [pc, #208]	; (5140 <_ext_irq_init+0x148>)
    5070:	4b3e      	ldr	r3, [pc, #248]	; (516c <_ext_irq_init+0x174>)
    5072:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    5074:	4a3e      	ldr	r2, [pc, #248]	; (5170 <_ext_irq_init+0x178>)
    5076:	2100      	movs	r1, #0
    5078:	4831      	ldr	r0, [pc, #196]	; (5140 <_ext_irq_init+0x148>)
    507a:	4b3e      	ldr	r3, [pc, #248]	; (5174 <_ext_irq_init+0x17c>)
    507c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    507e:	2211      	movs	r2, #17
    5080:	2101      	movs	r1, #1
    5082:	482f      	ldr	r0, [pc, #188]	; (5140 <_ext_irq_init+0x148>)
    5084:	4b3b      	ldr	r3, [pc, #236]	; (5174 <_ext_irq_init+0x17c>)
    5086:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    5088:	482d      	ldr	r0, [pc, #180]	; (5140 <_ext_irq_init+0x148>)
    508a:	4b3b      	ldr	r3, [pc, #236]	; (5178 <_ext_irq_init+0x180>)
    508c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_0_IRQn);
    508e:	200c      	movs	r0, #12
    5090:	4b3a      	ldr	r3, [pc, #232]	; (517c <_ext_irq_init+0x184>)
    5092:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_0_IRQn);
    5094:	200c      	movs	r0, #12
    5096:	4b3a      	ldr	r3, [pc, #232]	; (5180 <_ext_irq_init+0x188>)
    5098:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_0_IRQn);
    509a:	200c      	movs	r0, #12
    509c:	4b39      	ldr	r3, [pc, #228]	; (5184 <_ext_irq_init+0x18c>)
    509e:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_1_IRQn);
    50a0:	200d      	movs	r0, #13
    50a2:	4b36      	ldr	r3, [pc, #216]	; (517c <_ext_irq_init+0x184>)
    50a4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_1_IRQn);
    50a6:	200d      	movs	r0, #13
    50a8:	4b35      	ldr	r3, [pc, #212]	; (5180 <_ext_irq_init+0x188>)
    50aa:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_1_IRQn);
    50ac:	200d      	movs	r0, #13
    50ae:	4b35      	ldr	r3, [pc, #212]	; (5184 <_ext_irq_init+0x18c>)
    50b0:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_3_IRQn);
    50b2:	200f      	movs	r0, #15
    50b4:	4b31      	ldr	r3, [pc, #196]	; (517c <_ext_irq_init+0x184>)
    50b6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_3_IRQn);
    50b8:	200f      	movs	r0, #15
    50ba:	4b31      	ldr	r3, [pc, #196]	; (5180 <_ext_irq_init+0x188>)
    50bc:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_3_IRQn);
    50be:	200f      	movs	r0, #15
    50c0:	4b30      	ldr	r3, [pc, #192]	; (5184 <_ext_irq_init+0x18c>)
    50c2:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_4_IRQn);
    50c4:	2010      	movs	r0, #16
    50c6:	4b2d      	ldr	r3, [pc, #180]	; (517c <_ext_irq_init+0x184>)
    50c8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_4_IRQn);
    50ca:	2010      	movs	r0, #16
    50cc:	4b2c      	ldr	r3, [pc, #176]	; (5180 <_ext_irq_init+0x188>)
    50ce:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_4_IRQn);
    50d0:	2010      	movs	r0, #16
    50d2:	4b2c      	ldr	r3, [pc, #176]	; (5184 <_ext_irq_init+0x18c>)
    50d4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_5_IRQn);
    50d6:	2011      	movs	r0, #17
    50d8:	4b28      	ldr	r3, [pc, #160]	; (517c <_ext_irq_init+0x184>)
    50da:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_5_IRQn);
    50dc:	2011      	movs	r0, #17
    50de:	4b28      	ldr	r3, [pc, #160]	; (5180 <_ext_irq_init+0x188>)
    50e0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_5_IRQn);
    50e2:	2011      	movs	r0, #17
    50e4:	4b27      	ldr	r3, [pc, #156]	; (5184 <_ext_irq_init+0x18c>)
    50e6:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_6_IRQn);
    50e8:	2012      	movs	r0, #18
    50ea:	4b24      	ldr	r3, [pc, #144]	; (517c <_ext_irq_init+0x184>)
    50ec:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_6_IRQn);
    50ee:	2012      	movs	r0, #18
    50f0:	4b23      	ldr	r3, [pc, #140]	; (5180 <_ext_irq_init+0x188>)
    50f2:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_6_IRQn);
    50f4:	2012      	movs	r0, #18
    50f6:	4b23      	ldr	r3, [pc, #140]	; (5184 <_ext_irq_init+0x18c>)
    50f8:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_7_IRQn);
    50fa:	2013      	movs	r0, #19
    50fc:	4b1f      	ldr	r3, [pc, #124]	; (517c <_ext_irq_init+0x184>)
    50fe:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_7_IRQn);
    5100:	2013      	movs	r0, #19
    5102:	4b1f      	ldr	r3, [pc, #124]	; (5180 <_ext_irq_init+0x188>)
    5104:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_7_IRQn);
    5106:	2013      	movs	r0, #19
    5108:	4b1e      	ldr	r3, [pc, #120]	; (5184 <_ext_irq_init+0x18c>)
    510a:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_8_IRQn);
    510c:	2014      	movs	r0, #20
    510e:	4b1b      	ldr	r3, [pc, #108]	; (517c <_ext_irq_init+0x184>)
    5110:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_8_IRQn);
    5112:	2014      	movs	r0, #20
    5114:	4b1a      	ldr	r3, [pc, #104]	; (5180 <_ext_irq_init+0x188>)
    5116:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_8_IRQn);
    5118:	2014      	movs	r0, #20
    511a:	4b1a      	ldr	r3, [pc, #104]	; (5184 <_ext_irq_init+0x18c>)
    511c:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_9_IRQn);
    511e:	2015      	movs	r0, #21
    5120:	4b16      	ldr	r3, [pc, #88]	; (517c <_ext_irq_init+0x184>)
    5122:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_9_IRQn);
    5124:	2015      	movs	r0, #21
    5126:	4b16      	ldr	r3, [pc, #88]	; (5180 <_ext_irq_init+0x188>)
    5128:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_9_IRQn);
    512a:	2015      	movs	r0, #21
    512c:	4b15      	ldr	r3, [pc, #84]	; (5184 <_ext_irq_init+0x18c>)
    512e:	4798      	blx	r3

	callback = cb;
    5130:	4a15      	ldr	r2, [pc, #84]	; (5188 <_ext_irq_init+0x190>)
    5132:	687b      	ldr	r3, [r7, #4]
    5134:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    5136:	2300      	movs	r3, #0
}
    5138:	4618      	mov	r0, r3
    513a:	3708      	adds	r7, #8
    513c:	46bd      	mov	sp, r7
    513e:	bd80      	pop	{r7, pc}
    5140:	40002800 	.word	0x40002800
    5144:	00004db9 	.word	0x00004db9
    5148:	00004ee9 	.word	0x00004ee9
    514c:	00004e79 	.word	0x00004e79
    5150:	00004d95 	.word	0x00004d95
    5154:	00004f19 	.word	0x00004f19
    5158:	00004ea5 	.word	0x00004ea5
    515c:	00004f41 	.word	0x00004f41
    5160:	00004f5f 	.word	0x00004f5f
    5164:	00004f7b 	.word	0x00004f7b
    5168:	00004fbf 	.word	0x00004fbf
    516c:	00004fdb 	.word	0x00004fdb
    5170:	90999013 	.word	0x90999013
    5174:	00004f97 	.word	0x00004f97
    5178:	00004e4d 	.word	0x00004e4d
    517c:	00004d15 	.word	0x00004d15
    5180:	00004d59 	.word	0x00004d59
    5184:	00004cd9 	.word	0x00004cd9
    5188:	20000cc4 	.word	0x20000cc4

0000518c <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    518c:	b580      	push	{r7, lr}
    518e:	b084      	sub	sp, #16
    5190:	af00      	add	r7, sp, #0
    5192:	6078      	str	r0, [r7, #4]
    5194:	460b      	mov	r3, r1
    5196:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    5198:	23ff      	movs	r3, #255	; 0xff
    519a:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    519c:	2300      	movs	r3, #0
    519e:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    51a0:	e010      	b.n	51c4 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    51a2:	7bbb      	ldrb	r3, [r7, #14]
    51a4:	4a1c      	ldr	r2, [pc, #112]	; (5218 <_ext_irq_enable+0x8c>)
    51a6:	00db      	lsls	r3, r3, #3
    51a8:	4413      	add	r3, r2
    51aa:	685a      	ldr	r2, [r3, #4]
    51ac:	687b      	ldr	r3, [r7, #4]
    51ae:	429a      	cmp	r2, r3
    51b0:	d105      	bne.n	51be <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    51b2:	7bbb      	ldrb	r3, [r7, #14]
    51b4:	4a18      	ldr	r2, [pc, #96]	; (5218 <_ext_irq_enable+0x8c>)
    51b6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    51ba:	73fb      	strb	r3, [r7, #15]
			break;
    51bc:	e005      	b.n	51ca <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    51be:	7bbb      	ldrb	r3, [r7, #14]
    51c0:	3301      	adds	r3, #1
    51c2:	73bb      	strb	r3, [r7, #14]
    51c4:	7bbb      	ldrb	r3, [r7, #14]
    51c6:	2b08      	cmp	r3, #8
    51c8:	d9eb      	bls.n	51a2 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    51ca:	7bfb      	ldrb	r3, [r7, #15]
    51cc:	2bff      	cmp	r3, #255	; 0xff
    51ce:	d102      	bne.n	51d6 <_ext_irq_enable+0x4a>
		return -1;
    51d0:	f04f 33ff 	mov.w	r3, #4294967295
    51d4:	e01c      	b.n	5210 <_ext_irq_enable+0x84>
	}

	if (enable) {
    51d6:	78fb      	ldrb	r3, [r7, #3]
    51d8:	2b00      	cmp	r3, #0
    51da:	d008      	beq.n	51ee <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    51dc:	7bfb      	ldrb	r3, [r7, #15]
    51de:	2201      	movs	r2, #1
    51e0:	fa02 f303 	lsl.w	r3, r2, r3
    51e4:	4619      	mov	r1, r3
    51e6:	480d      	ldr	r0, [pc, #52]	; (521c <_ext_irq_enable+0x90>)
    51e8:	4b0d      	ldr	r3, [pc, #52]	; (5220 <_ext_irq_enable+0x94>)
    51ea:	4798      	blx	r3
    51ec:	e00f      	b.n	520e <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    51ee:	7bfb      	ldrb	r3, [r7, #15]
    51f0:	2201      	movs	r2, #1
    51f2:	fa02 f303 	lsl.w	r3, r2, r3
    51f6:	4619      	mov	r1, r3
    51f8:	4808      	ldr	r0, [pc, #32]	; (521c <_ext_irq_enable+0x90>)
    51fa:	4b0a      	ldr	r3, [pc, #40]	; (5224 <_ext_irq_enable+0x98>)
    51fc:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    51fe:	7bfb      	ldrb	r3, [r7, #15]
    5200:	2201      	movs	r2, #1
    5202:	fa02 f303 	lsl.w	r3, r2, r3
    5206:	4619      	mov	r1, r3
    5208:	4804      	ldr	r0, [pc, #16]	; (521c <_ext_irq_enable+0x90>)
    520a:	4b07      	ldr	r3, [pc, #28]	; (5228 <_ext_irq_enable+0x9c>)
    520c:	4798      	blx	r3
	}

	return ERR_NONE;
    520e:	2300      	movs	r3, #0
}
    5210:	4618      	mov	r0, r3
    5212:	3710      	adds	r7, #16
    5214:	46bd      	mov	sp, r7
    5216:	bd80      	pop	{r7, pc}
    5218:	00013b4c 	.word	0x00013b4c
    521c:	40002800 	.word	0x40002800
    5220:	00004e15 	.word	0x00004e15
    5224:	00004e31 	.word	0x00004e31
    5228:	00004df9 	.word	0x00004df9

0000522c <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    522c:	b580      	push	{r7, lr}
    522e:	b084      	sub	sp, #16
    5230:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    5232:	4841      	ldr	r0, [pc, #260]	; (5338 <_ext_irq_handler+0x10c>)
    5234:	4b41      	ldr	r3, [pc, #260]	; (533c <_ext_irq_handler+0x110>)
    5236:	4798      	blx	r3
    5238:	4603      	mov	r3, r0
    523a:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    523c:	f04f 33ff 	mov.w	r3, #4294967295
    5240:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    5242:	683b      	ldr	r3, [r7, #0]
    5244:	4619      	mov	r1, r3
    5246:	483c      	ldr	r0, [pc, #240]	; (5338 <_ext_irq_handler+0x10c>)
    5248:	4b3d      	ldr	r3, [pc, #244]	; (5340 <_ext_irq_handler+0x114>)
    524a:	4798      	blx	r3

	ASSERT(callback);
    524c:	4b3d      	ldr	r3, [pc, #244]	; (5344 <_ext_irq_handler+0x118>)
    524e:	681b      	ldr	r3, [r3, #0]
    5250:	2b00      	cmp	r3, #0
    5252:	bf14      	ite	ne
    5254:	2301      	movne	r3, #1
    5256:	2300      	moveq	r3, #0
    5258:	b2db      	uxtb	r3, r3
    525a:	f44f 7284 	mov.w	r2, #264	; 0x108
    525e:	493a      	ldr	r1, [pc, #232]	; (5348 <_ext_irq_handler+0x11c>)
    5260:	4618      	mov	r0, r3
    5262:	4b3a      	ldr	r3, [pc, #232]	; (534c <_ext_irq_handler+0x120>)
    5264:	4798      	blx	r3

	while (flags) {
    5266:	e060      	b.n	532a <_ext_irq_handler+0xfe>
		pos = ffs(flags) - 1;
    5268:	683b      	ldr	r3, [r7, #0]
    526a:	4618      	mov	r0, r3
    526c:	4b38      	ldr	r3, [pc, #224]	; (5350 <_ext_irq_handler+0x124>)
    526e:	4798      	blx	r3
    5270:	4603      	mov	r3, r0
    5272:	b2db      	uxtb	r3, r3
    5274:	3b01      	subs	r3, #1
    5276:	b2db      	uxtb	r3, r3
    5278:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    527a:	e047      	b.n	530c <_ext_irq_handler+0xe0>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    527c:	2300      	movs	r3, #0
    527e:	71fb      	strb	r3, [r7, #7]
    5280:	2309      	movs	r3, #9
    5282:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    5284:	e024      	b.n	52d0 <_ext_irq_handler+0xa4>
				middle = (upper + lower) >> 1;
    5286:	79ba      	ldrb	r2, [r7, #6]
    5288:	79fb      	ldrb	r3, [r7, #7]
    528a:	4413      	add	r3, r2
    528c:	105b      	asrs	r3, r3, #1
    528e:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    5290:	797b      	ldrb	r3, [r7, #5]
    5292:	4a30      	ldr	r2, [pc, #192]	; (5354 <_ext_irq_handler+0x128>)
    5294:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    5298:	461a      	mov	r2, r3
    529a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    529e:	429a      	cmp	r2, r3
    52a0:	d106      	bne.n	52b0 <_ext_irq_handler+0x84>
					pin = _map[middle].pin;
    52a2:	797b      	ldrb	r3, [r7, #5]
    52a4:	4a2b      	ldr	r2, [pc, #172]	; (5354 <_ext_irq_handler+0x128>)
    52a6:	00db      	lsls	r3, r3, #3
    52a8:	4413      	add	r3, r2
    52aa:	685b      	ldr	r3, [r3, #4]
    52ac:	60bb      	str	r3, [r7, #8]
					break;
    52ae:	e013      	b.n	52d8 <_ext_irq_handler+0xac>
				}
				if (_map[middle].extint < pos) {
    52b0:	797b      	ldrb	r3, [r7, #5]
    52b2:	4a28      	ldr	r2, [pc, #160]	; (5354 <_ext_irq_handler+0x128>)
    52b4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    52b8:	461a      	mov	r2, r3
    52ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
    52be:	429a      	cmp	r2, r3
    52c0:	da03      	bge.n	52ca <_ext_irq_handler+0x9e>
					lower = middle + 1;
    52c2:	797b      	ldrb	r3, [r7, #5]
    52c4:	3301      	adds	r3, #1
    52c6:	71fb      	strb	r3, [r7, #7]
    52c8:	e002      	b.n	52d0 <_ext_irq_handler+0xa4>
				} else {
					upper = middle - 1;
    52ca:	797b      	ldrb	r3, [r7, #5]
    52cc:	3b01      	subs	r3, #1
    52ce:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    52d0:	79ba      	ldrb	r2, [r7, #6]
    52d2:	79fb      	ldrb	r3, [r7, #7]
    52d4:	429a      	cmp	r2, r3
    52d6:	d2d6      	bcs.n	5286 <_ext_irq_handler+0x5a>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    52d8:	68bb      	ldr	r3, [r7, #8]
    52da:	f1b3 3fff 	cmp.w	r3, #4294967295
    52de:	d003      	beq.n	52e8 <_ext_irq_handler+0xbc>
				callback(pin);
    52e0:	4b18      	ldr	r3, [pc, #96]	; (5344 <_ext_irq_handler+0x118>)
    52e2:	681b      	ldr	r3, [r3, #0]
    52e4:	68b8      	ldr	r0, [r7, #8]
    52e6:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    52e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    52ec:	2201      	movs	r2, #1
    52ee:	fa02 f303 	lsl.w	r3, r2, r3
    52f2:	43da      	mvns	r2, r3
    52f4:	683b      	ldr	r3, [r7, #0]
    52f6:	4013      	ands	r3, r2
    52f8:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    52fa:	683b      	ldr	r3, [r7, #0]
    52fc:	4618      	mov	r0, r3
    52fe:	4b14      	ldr	r3, [pc, #80]	; (5350 <_ext_irq_handler+0x124>)
    5300:	4798      	blx	r3
    5302:	4603      	mov	r3, r0
    5304:	b2db      	uxtb	r3, r3
    5306:	3b01      	subs	r3, #1
    5308:	b2db      	uxtb	r3, r3
    530a:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    530c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    5310:	f1b3 3fff 	cmp.w	r3, #4294967295
    5314:	d1b2      	bne.n	527c <_ext_irq_handler+0x50>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    5316:	4808      	ldr	r0, [pc, #32]	; (5338 <_ext_irq_handler+0x10c>)
    5318:	4b08      	ldr	r3, [pc, #32]	; (533c <_ext_irq_handler+0x110>)
    531a:	4798      	blx	r3
    531c:	4603      	mov	r3, r0
    531e:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    5320:	683b      	ldr	r3, [r7, #0]
    5322:	4619      	mov	r1, r3
    5324:	4804      	ldr	r0, [pc, #16]	; (5338 <_ext_irq_handler+0x10c>)
    5326:	4b06      	ldr	r3, [pc, #24]	; (5340 <_ext_irq_handler+0x114>)
    5328:	4798      	blx	r3
	while (flags) {
    532a:	683b      	ldr	r3, [r7, #0]
    532c:	2b00      	cmp	r3, #0
    532e:	d19b      	bne.n	5268 <_ext_irq_handler+0x3c>
	}
}
    5330:	bf00      	nop
    5332:	3710      	adds	r7, #16
    5334:	46bd      	mov	sp, r7
    5336:	bd80      	pop	{r7, pc}
    5338:	40002800 	.word	0x40002800
    533c:	00004de1 	.word	0x00004de1
    5340:	00004df9 	.word	0x00004df9
    5344:	20000cc4 	.word	0x20000cc4
    5348:	00013b94 	.word	0x00013b94
    534c:	0000405d 	.word	0x0000405d
    5350:	000135a5 	.word	0x000135a5
    5354:	00013b4c 	.word	0x00013b4c

00005358 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    5358:	b580      	push	{r7, lr}
    535a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    535c:	4b01      	ldr	r3, [pc, #4]	; (5364 <EIC_0_Handler+0xc>)
    535e:	4798      	blx	r3
} /**
    5360:	bf00      	nop
    5362:	bd80      	pop	{r7, pc}
    5364:	0000522d 	.word	0x0000522d

00005368 <EIC_1_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_1_Handler(void)
{
    5368:	b580      	push	{r7, lr}
    536a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    536c:	4b01      	ldr	r3, [pc, #4]	; (5374 <EIC_1_Handler+0xc>)
    536e:	4798      	blx	r3
} /**
    5370:	bf00      	nop
    5372:	bd80      	pop	{r7, pc}
    5374:	0000522d 	.word	0x0000522d

00005378 <EIC_3_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_3_Handler(void)
{
    5378:	b580      	push	{r7, lr}
    537a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    537c:	4b01      	ldr	r3, [pc, #4]	; (5384 <EIC_3_Handler+0xc>)
    537e:	4798      	blx	r3
} /**
    5380:	bf00      	nop
    5382:	bd80      	pop	{r7, pc}
    5384:	0000522d 	.word	0x0000522d

00005388 <EIC_4_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_4_Handler(void)
{
    5388:	b580      	push	{r7, lr}
    538a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    538c:	4b01      	ldr	r3, [pc, #4]	; (5394 <EIC_4_Handler+0xc>)
    538e:	4798      	blx	r3
} /**
    5390:	bf00      	nop
    5392:	bd80      	pop	{r7, pc}
    5394:	0000522d 	.word	0x0000522d

00005398 <EIC_5_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_5_Handler(void)
{
    5398:	b580      	push	{r7, lr}
    539a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    539c:	4b01      	ldr	r3, [pc, #4]	; (53a4 <EIC_5_Handler+0xc>)
    539e:	4798      	blx	r3
} /**
    53a0:	bf00      	nop
    53a2:	bd80      	pop	{r7, pc}
    53a4:	0000522d 	.word	0x0000522d

000053a8 <EIC_6_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
    53a8:	b580      	push	{r7, lr}
    53aa:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    53ac:	4b01      	ldr	r3, [pc, #4]	; (53b4 <EIC_6_Handler+0xc>)
    53ae:	4798      	blx	r3
} /**
    53b0:	bf00      	nop
    53b2:	bd80      	pop	{r7, pc}
    53b4:	0000522d 	.word	0x0000522d

000053b8 <EIC_7_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    53b8:	b580      	push	{r7, lr}
    53ba:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    53bc:	4b01      	ldr	r3, [pc, #4]	; (53c4 <EIC_7_Handler+0xc>)
    53be:	4798      	blx	r3
} /**
    53c0:	bf00      	nop
    53c2:	bd80      	pop	{r7, pc}
    53c4:	0000522d 	.word	0x0000522d

000053c8 <EIC_8_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_8_Handler(void)
{
    53c8:	b580      	push	{r7, lr}
    53ca:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    53cc:	4b01      	ldr	r3, [pc, #4]	; (53d4 <EIC_8_Handler+0xc>)
    53ce:	4798      	blx	r3
} /**
    53d0:	bf00      	nop
    53d2:	bd80      	pop	{r7, pc}
    53d4:	0000522d 	.word	0x0000522d

000053d8 <EIC_9_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_9_Handler(void)
{
    53d8:	b580      	push	{r7, lr}
    53da:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    53dc:	4b01      	ldr	r3, [pc, #4]	; (53e4 <EIC_9_Handler+0xc>)
    53de:	4798      	blx	r3
}
    53e0:	bf00      	nop
    53e2:	bd80      	pop	{r7, pc}
    53e4:	0000522d 	.word	0x0000522d

000053e8 <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    53e8:	b480      	push	{r7}
    53ea:	b085      	sub	sp, #20
    53ec:	af00      	add	r7, sp, #0
    53ee:	60f8      	str	r0, [r7, #12]
    53f0:	460b      	mov	r3, r1
    53f2:	607a      	str	r2, [r7, #4]
    53f4:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    53f6:	7afa      	ldrb	r2, [r7, #11]
    53f8:	68fb      	ldr	r3, [r7, #12]
    53fa:	3248      	adds	r2, #72	; 0x48
    53fc:	6879      	ldr	r1, [r7, #4]
    53fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    5402:	bf00      	nop
    5404:	3714      	adds	r7, #20
    5406:	46bd      	mov	sp, r7
    5408:	f85d 7b04 	ldr.w	r7, [sp], #4
    540c:	4770      	bx	lr

0000540e <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    540e:	b480      	push	{r7}
    5410:	b083      	sub	sp, #12
    5412:	af00      	add	r7, sp, #0
    5414:	6078      	str	r0, [r7, #4]
    5416:	460b      	mov	r3, r1
    5418:	70fb      	strb	r3, [r7, #3]
    541a:	4613      	mov	r3, r2
    541c:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    541e:	78fb      	ldrb	r3, [r7, #3]
    5420:	687a      	ldr	r2, [r7, #4]
    5422:	3304      	adds	r3, #4
    5424:	00db      	lsls	r3, r3, #3
    5426:	4413      	add	r3, r2
    5428:	78ba      	ldrb	r2, [r7, #2]
    542a:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    542c:	78fb      	ldrb	r3, [r7, #3]
    542e:	78ba      	ldrb	r2, [r7, #2]
    5430:	43d2      	mvns	r2, r2
    5432:	b2d1      	uxtb	r1, r2
    5434:	687a      	ldr	r2, [r7, #4]
    5436:	3304      	adds	r3, #4
    5438:	00db      	lsls	r3, r3, #3
    543a:	4413      	add	r3, r2
    543c:	460a      	mov	r2, r1
    543e:	711a      	strb	r2, [r3, #4]
}
    5440:	bf00      	nop
    5442:	370c      	adds	r7, #12
    5444:	46bd      	mov	sp, r7
    5446:	f85d 7b04 	ldr.w	r7, [sp], #4
    544a:	4770      	bx	lr

0000544c <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    544c:	b480      	push	{r7}
    544e:	b085      	sub	sp, #20
    5450:	af00      	add	r7, sp, #0
    5452:	60f8      	str	r0, [r7, #12]
    5454:	460b      	mov	r3, r1
    5456:	607a      	str	r2, [r7, #4]
    5458:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    545a:	7afa      	ldrb	r2, [r7, #11]
    545c:	68fb      	ldr	r3, [r7, #12]
    545e:	3204      	adds	r2, #4
    5460:	6879      	ldr	r1, [r7, #4]
    5462:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    5466:	bf00      	nop
    5468:	3714      	adds	r7, #20
    546a:	46bd      	mov	sp, r7
    546c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5470:	4770      	bx	lr
	...

00005474 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    5474:	b580      	push	{r7, lr}
    5476:	b082      	sub	sp, #8
    5478:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    547a:	2300      	movs	r3, #0
    547c:	71fb      	strb	r3, [r7, #7]
    547e:	e00b      	b.n	5498 <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    5480:	79fb      	ldrb	r3, [r7, #7]
    5482:	4a18      	ldr	r2, [pc, #96]	; (54e4 <_event_system_init+0x70>)
    5484:	5cd3      	ldrb	r3, [r2, r3]
    5486:	461a      	mov	r2, r3
    5488:	79fb      	ldrb	r3, [r7, #7]
    548a:	4619      	mov	r1, r3
    548c:	4816      	ldr	r0, [pc, #88]	; (54e8 <_event_system_init+0x74>)
    548e:	4b17      	ldr	r3, [pc, #92]	; (54ec <_event_system_init+0x78>)
    5490:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    5492:	79fb      	ldrb	r3, [r7, #7]
    5494:	3301      	adds	r3, #1
    5496:	71fb      	strb	r3, [r7, #7]
    5498:	79fb      	ldrb	r3, [r7, #7]
    549a:	2b42      	cmp	r3, #66	; 0x42
    549c:	d9f0      	bls.n	5480 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    549e:	2300      	movs	r3, #0
    54a0:	71fb      	strb	r3, [r7, #7]
    54a2:	e016      	b.n	54d2 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    54a4:	79fb      	ldrb	r3, [r7, #7]
    54a6:	4a12      	ldr	r2, [pc, #72]	; (54f0 <_event_system_init+0x7c>)
    54a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    54ac:	461a      	mov	r2, r3
    54ae:	79fb      	ldrb	r3, [r7, #7]
    54b0:	4619      	mov	r1, r3
    54b2:	480d      	ldr	r0, [pc, #52]	; (54e8 <_event_system_init+0x74>)
    54b4:	4b0f      	ldr	r3, [pc, #60]	; (54f4 <_event_system_init+0x80>)
    54b6:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    54b8:	79fb      	ldrb	r3, [r7, #7]
    54ba:	4a0f      	ldr	r2, [pc, #60]	; (54f8 <_event_system_init+0x84>)
    54bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    54c0:	b2da      	uxtb	r2, r3
    54c2:	79fb      	ldrb	r3, [r7, #7]
    54c4:	4619      	mov	r1, r3
    54c6:	4808      	ldr	r0, [pc, #32]	; (54e8 <_event_system_init+0x74>)
    54c8:	4b0c      	ldr	r3, [pc, #48]	; (54fc <_event_system_init+0x88>)
    54ca:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    54cc:	79fb      	ldrb	r3, [r7, #7]
    54ce:	3301      	adds	r3, #1
    54d0:	71fb      	strb	r3, [r7, #7]
    54d2:	79fb      	ldrb	r3, [r7, #7]
    54d4:	2b1f      	cmp	r3, #31
    54d6:	d9e5      	bls.n	54a4 <_event_system_init+0x30>
	}

	return ERR_NONE;
    54d8:	2300      	movs	r3, #0
}
    54da:	4618      	mov	r0, r3
    54dc:	3708      	adds	r7, #8
    54de:	46bd      	mov	sp, r7
    54e0:	bd80      	pop	{r7, pc}
    54e2:	bf00      	nop
    54e4:	00013bac 	.word	0x00013bac
    54e8:	4100e000 	.word	0x4100e000
    54ec:	000053e9 	.word	0x000053e9
    54f0:	00013bf0 	.word	0x00013bf0
    54f4:	0000544d 	.word	0x0000544d
    54f8:	00013c30 	.word	0x00013c30
    54fc:	0000540f 	.word	0x0000540f

00005500 <hri_gclk_wait_for_sync>:
{
    5500:	b480      	push	{r7}
    5502:	b083      	sub	sp, #12
    5504:	af00      	add	r7, sp, #0
    5506:	6078      	str	r0, [r7, #4]
    5508:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    550a:	bf00      	nop
    550c:	687b      	ldr	r3, [r7, #4]
    550e:	685a      	ldr	r2, [r3, #4]
    5510:	683b      	ldr	r3, [r7, #0]
    5512:	4013      	ands	r3, r2
    5514:	2b00      	cmp	r3, #0
    5516:	d1f9      	bne.n	550c <hri_gclk_wait_for_sync+0xc>
}
    5518:	bf00      	nop
    551a:	370c      	adds	r7, #12
    551c:	46bd      	mov	sp, r7
    551e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5522:	4770      	bx	lr

00005524 <hri_gclk_write_GENCTRL_reg>:
{
    5524:	b580      	push	{r7, lr}
    5526:	b084      	sub	sp, #16
    5528:	af00      	add	r7, sp, #0
    552a:	60f8      	str	r0, [r7, #12]
    552c:	460b      	mov	r3, r1
    552e:	607a      	str	r2, [r7, #4]
    5530:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    5532:	7afa      	ldrb	r2, [r7, #11]
    5534:	68fb      	ldr	r3, [r7, #12]
    5536:	3208      	adds	r2, #8
    5538:	6879      	ldr	r1, [r7, #4]
    553a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    553e:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    5542:	68f8      	ldr	r0, [r7, #12]
    5544:	4b02      	ldr	r3, [pc, #8]	; (5550 <hri_gclk_write_GENCTRL_reg+0x2c>)
    5546:	4798      	blx	r3
}
    5548:	bf00      	nop
    554a:	3710      	adds	r7, #16
    554c:	46bd      	mov	sp, r7
    554e:	bd80      	pop	{r7, pc}
    5550:	00005501 	.word	0x00005501

00005554 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    5554:	b580      	push	{r7, lr}
    5556:	b082      	sub	sp, #8
    5558:	af00      	add	r7, sp, #0
    555a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    555c:	687b      	ldr	r3, [r7, #4]
    555e:	f003 0301 	and.w	r3, r3, #1
    5562:	2b00      	cmp	r3, #0
    5564:	d004      	beq.n	5570 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    5566:	4a3b      	ldr	r2, [pc, #236]	; (5654 <_gclk_init_generators_by_fref+0x100>)
    5568:	2100      	movs	r1, #0
    556a:	483b      	ldr	r0, [pc, #236]	; (5658 <_gclk_init_generators_by_fref+0x104>)
    556c:	4b3b      	ldr	r3, [pc, #236]	; (565c <_gclk_init_generators_by_fref+0x108>)
    556e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    5570:	687b      	ldr	r3, [r7, #4]
    5572:	f003 0302 	and.w	r3, r3, #2
    5576:	2b00      	cmp	r3, #0
    5578:	d004      	beq.n	5584 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    557a:	4a39      	ldr	r2, [pc, #228]	; (5660 <_gclk_init_generators_by_fref+0x10c>)
    557c:	2101      	movs	r1, #1
    557e:	4836      	ldr	r0, [pc, #216]	; (5658 <_gclk_init_generators_by_fref+0x104>)
    5580:	4b36      	ldr	r3, [pc, #216]	; (565c <_gclk_init_generators_by_fref+0x108>)
    5582:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    5584:	687b      	ldr	r3, [r7, #4]
    5586:	f003 0304 	and.w	r3, r3, #4
    558a:	2b00      	cmp	r3, #0
    558c:	d004      	beq.n	5598 <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    558e:	4a35      	ldr	r2, [pc, #212]	; (5664 <_gclk_init_generators_by_fref+0x110>)
    5590:	2102      	movs	r1, #2
    5592:	4831      	ldr	r0, [pc, #196]	; (5658 <_gclk_init_generators_by_fref+0x104>)
    5594:	4b31      	ldr	r3, [pc, #196]	; (565c <_gclk_init_generators_by_fref+0x108>)
    5596:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    5598:	687b      	ldr	r3, [r7, #4]
    559a:	f003 0308 	and.w	r3, r3, #8
    559e:	2b00      	cmp	r3, #0
    55a0:	d004      	beq.n	55ac <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    55a2:	4a31      	ldr	r2, [pc, #196]	; (5668 <_gclk_init_generators_by_fref+0x114>)
    55a4:	2103      	movs	r1, #3
    55a6:	482c      	ldr	r0, [pc, #176]	; (5658 <_gclk_init_generators_by_fref+0x104>)
    55a8:	4b2c      	ldr	r3, [pc, #176]	; (565c <_gclk_init_generators_by_fref+0x108>)
    55aa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    55ac:	687b      	ldr	r3, [r7, #4]
    55ae:	f003 0310 	and.w	r3, r3, #16
    55b2:	2b00      	cmp	r3, #0
    55b4:	d004      	beq.n	55c0 <_gclk_init_generators_by_fref+0x6c>
		hri_gclk_write_GENCTRL_reg(
    55b6:	4a2d      	ldr	r2, [pc, #180]	; (566c <_gclk_init_generators_by_fref+0x118>)
    55b8:	2104      	movs	r1, #4
    55ba:	4827      	ldr	r0, [pc, #156]	; (5658 <_gclk_init_generators_by_fref+0x104>)
    55bc:	4b27      	ldr	r3, [pc, #156]	; (565c <_gclk_init_generators_by_fref+0x108>)
    55be:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_5_CONFIG == 1
	if (bm & (1ul << 5)) {
    55c0:	687b      	ldr	r3, [r7, #4]
    55c2:	f003 0320 	and.w	r3, r3, #32
    55c6:	2b00      	cmp	r3, #0
    55c8:	d004      	beq.n	55d4 <_gclk_init_generators_by_fref+0x80>
		hri_gclk_write_GENCTRL_reg(
    55ca:	4a29      	ldr	r2, [pc, #164]	; (5670 <_gclk_init_generators_by_fref+0x11c>)
    55cc:	2105      	movs	r1, #5
    55ce:	4822      	ldr	r0, [pc, #136]	; (5658 <_gclk_init_generators_by_fref+0x104>)
    55d0:	4b22      	ldr	r3, [pc, #136]	; (565c <_gclk_init_generators_by_fref+0x108>)
    55d2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_6_CONFIG == 1
	if (bm & (1ul << 6)) {
    55d4:	687b      	ldr	r3, [r7, #4]
    55d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    55da:	2b00      	cmp	r3, #0
    55dc:	d004      	beq.n	55e8 <_gclk_init_generators_by_fref+0x94>
		hri_gclk_write_GENCTRL_reg(
    55de:	4a25      	ldr	r2, [pc, #148]	; (5674 <_gclk_init_generators_by_fref+0x120>)
    55e0:	2106      	movs	r1, #6
    55e2:	481d      	ldr	r0, [pc, #116]	; (5658 <_gclk_init_generators_by_fref+0x104>)
    55e4:	4b1d      	ldr	r3, [pc, #116]	; (565c <_gclk_init_generators_by_fref+0x108>)
    55e6:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_6_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_6_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_7_CONFIG == 1
	if (bm & (1ul << 7)) {
    55e8:	687b      	ldr	r3, [r7, #4]
    55ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
    55ee:	2b00      	cmp	r3, #0
    55f0:	d004      	beq.n	55fc <_gclk_init_generators_by_fref+0xa8>
		hri_gclk_write_GENCTRL_reg(
    55f2:	4a21      	ldr	r2, [pc, #132]	; (5678 <_gclk_init_generators_by_fref+0x124>)
    55f4:	2107      	movs	r1, #7
    55f6:	4818      	ldr	r0, [pc, #96]	; (5658 <_gclk_init_generators_by_fref+0x104>)
    55f8:	4b18      	ldr	r3, [pc, #96]	; (565c <_gclk_init_generators_by_fref+0x108>)
    55fa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_8_CONFIG == 1
	if (bm & (1ul << 8)) {
    55fc:	687b      	ldr	r3, [r7, #4]
    55fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
    5602:	2b00      	cmp	r3, #0
    5604:	d004      	beq.n	5610 <_gclk_init_generators_by_fref+0xbc>
		hri_gclk_write_GENCTRL_reg(
    5606:	4a1d      	ldr	r2, [pc, #116]	; (567c <_gclk_init_generators_by_fref+0x128>)
    5608:	2108      	movs	r1, #8
    560a:	4813      	ldr	r0, [pc, #76]	; (5658 <_gclk_init_generators_by_fref+0x104>)
    560c:	4b13      	ldr	r3, [pc, #76]	; (565c <_gclk_init_generators_by_fref+0x108>)
    560e:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_9_CONFIG == 1
	if (bm & (1ul << 9)) {
    5610:	687b      	ldr	r3, [r7, #4]
    5612:	f403 7300 	and.w	r3, r3, #512	; 0x200
    5616:	2b00      	cmp	r3, #0
    5618:	d004      	beq.n	5624 <_gclk_init_generators_by_fref+0xd0>
		hri_gclk_write_GENCTRL_reg(
    561a:	4a19      	ldr	r2, [pc, #100]	; (5680 <_gclk_init_generators_by_fref+0x12c>)
    561c:	2109      	movs	r1, #9
    561e:	480e      	ldr	r0, [pc, #56]	; (5658 <_gclk_init_generators_by_fref+0x104>)
    5620:	4b0e      	ldr	r3, [pc, #56]	; (565c <_gclk_init_generators_by_fref+0x108>)
    5622:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_9_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_9_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_10_CONFIG == 1
	if (bm & (1ul << 10)) {
    5624:	687b      	ldr	r3, [r7, #4]
    5626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    562a:	2b00      	cmp	r3, #0
    562c:	d004      	beq.n	5638 <_gclk_init_generators_by_fref+0xe4>
		hri_gclk_write_GENCTRL_reg(
    562e:	4a15      	ldr	r2, [pc, #84]	; (5684 <_gclk_init_generators_by_fref+0x130>)
    5630:	210a      	movs	r1, #10
    5632:	4809      	ldr	r0, [pc, #36]	; (5658 <_gclk_init_generators_by_fref+0x104>)
    5634:	4b09      	ldr	r3, [pc, #36]	; (565c <_gclk_init_generators_by_fref+0x108>)
    5636:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_10_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_10_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_11_CONFIG == 1
	if (bm & (1ul << 11)) {
    5638:	687b      	ldr	r3, [r7, #4]
    563a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    563e:	2b00      	cmp	r3, #0
    5640:	d004      	beq.n	564c <_gclk_init_generators_by_fref+0xf8>
		hri_gclk_write_GENCTRL_reg(
    5642:	4a11      	ldr	r2, [pc, #68]	; (5688 <_gclk_init_generators_by_fref+0x134>)
    5644:	210b      	movs	r1, #11
    5646:	4804      	ldr	r0, [pc, #16]	; (5658 <_gclk_init_generators_by_fref+0x104>)
    5648:	4b04      	ldr	r3, [pc, #16]	; (565c <_gclk_init_generators_by_fref+0x108>)
    564a:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    564c:	bf00      	nop
    564e:	3708      	adds	r7, #8
    5650:	46bd      	mov	sp, r7
    5652:	bd80      	pop	{r7, pc}
    5654:	00010107 	.word	0x00010107
    5658:	40001c00 	.word	0x40001c00
    565c:	00005525 	.word	0x00005525
    5660:	00010907 	.word	0x00010907
    5664:	00010906 	.word	0x00010906
    5668:	00020908 	.word	0x00020908
    566c:	00010901 	.word	0x00010901
    5670:	00062901 	.word	0x00062901
    5674:	000c2901 	.word	0x000c2901
    5678:	00082908 	.word	0x00082908
    567c:	00032901 	.word	0x00032901
    5680:	00011908 	.word	0x00011908
    5684:	00010905 	.word	0x00010905
    5688:	00041905 	.word	0x00041905

0000568c <hri_mclk_write_CPUDIV_reg>:
{
    568c:	b480      	push	{r7}
    568e:	b083      	sub	sp, #12
    5690:	af00      	add	r7, sp, #0
    5692:	6078      	str	r0, [r7, #4]
    5694:	460b      	mov	r3, r1
    5696:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    5698:	687b      	ldr	r3, [r7, #4]
    569a:	78fa      	ldrb	r2, [r7, #3]
    569c:	715a      	strb	r2, [r3, #5]
}
    569e:	bf00      	nop
    56a0:	370c      	adds	r7, #12
    56a2:	46bd      	mov	sp, r7
    56a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    56a8:	4770      	bx	lr
	...

000056ac <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    56ac:	b580      	push	{r7, lr}
    56ae:	b082      	sub	sp, #8
    56b0:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    56b2:	4b05      	ldr	r3, [pc, #20]	; (56c8 <_mclk_init+0x1c>)
    56b4:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    56b6:	2101      	movs	r1, #1
    56b8:	6878      	ldr	r0, [r7, #4]
    56ba:	4b04      	ldr	r3, [pc, #16]	; (56cc <_mclk_init+0x20>)
    56bc:	4798      	blx	r3
}
    56be:	bf00      	nop
    56c0:	3708      	adds	r7, #8
    56c2:	46bd      	mov	sp, r7
    56c4:	bd80      	pop	{r7, pc}
    56c6:	bf00      	nop
    56c8:	40000800 	.word	0x40000800
    56cc:	0000568d 	.word	0x0000568d

000056d0 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    56d0:	b480      	push	{r7}
    56d2:	b083      	sub	sp, #12
    56d4:	af00      	add	r7, sp, #0
    56d6:	6078      	str	r0, [r7, #4]
    56d8:	460b      	mov	r3, r1
    56da:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    56dc:	687b      	ldr	r3, [r7, #4]
    56de:	78fa      	ldrb	r2, [r7, #3]
    56e0:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    56e2:	bf00      	nop
    56e4:	370c      	adds	r7, #12
    56e6:	46bd      	mov	sp, r7
    56e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    56ec:	4770      	bx	lr

000056ee <hri_osc32kctrl_write_XOSC32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
    56ee:	b480      	push	{r7}
    56f0:	b083      	sub	sp, #12
    56f2:	af00      	add	r7, sp, #0
    56f4:	6078      	str	r0, [r7, #4]
    56f6:	460b      	mov	r3, r1
    56f8:	807b      	strh	r3, [r7, #2]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    56fa:	687b      	ldr	r3, [r7, #4]
    56fc:	887a      	ldrh	r2, [r7, #2]
    56fe:	829a      	strh	r2, [r3, #20]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    5700:	bf00      	nop
    5702:	370c      	adds	r7, #12
    5704:	46bd      	mov	sp, r7
    5706:	f85d 7b04 	ldr.w	r7, [sp], #4
    570a:	4770      	bx	lr

0000570c <hri_osc32kctrl_write_CFDCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
    570c:	b480      	push	{r7}
    570e:	b083      	sub	sp, #12
    5710:	af00      	add	r7, sp, #0
    5712:	6078      	str	r0, [r7, #4]
    5714:	460b      	mov	r3, r1
    5716:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    5718:	687b      	ldr	r3, [r7, #4]
    571a:	78fa      	ldrb	r2, [r7, #3]
    571c:	759a      	strb	r2, [r3, #22]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    571e:	bf00      	nop
    5720:	370c      	adds	r7, #12
    5722:	46bd      	mov	sp, r7
    5724:	f85d 7b04 	ldr.w	r7, [sp], #4
    5728:	4770      	bx	lr

0000572a <hri_osc32kctrl_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
    572a:	b480      	push	{r7}
    572c:	b083      	sub	sp, #12
    572e:	af00      	add	r7, sp, #0
    5730:	6078      	str	r0, [r7, #4]
    5732:	460b      	mov	r3, r1
    5734:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    5736:	687b      	ldr	r3, [r7, #4]
    5738:	78fa      	ldrb	r2, [r7, #3]
    573a:	75da      	strb	r2, [r3, #23]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    573c:	bf00      	nop
    573e:	370c      	adds	r7, #12
    5740:	46bd      	mov	sp, r7
    5742:	f85d 7b04 	ldr.w	r7, [sp], #4
    5746:	4770      	bx	lr

00005748 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    5748:	b480      	push	{r7}
    574a:	b085      	sub	sp, #20
    574c:	af00      	add	r7, sp, #0
    574e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    5750:	687b      	ldr	r3, [r7, #4]
    5752:	69db      	ldr	r3, [r3, #28]
    5754:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    5756:	68fb      	ldr	r3, [r7, #12]
    5758:	0a1b      	lsrs	r3, r3, #8
    575a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    575e:	60fb      	str	r3, [r7, #12]
	return tmp;
    5760:	68fb      	ldr	r3, [r7, #12]
}
    5762:	4618      	mov	r0, r3
    5764:	3714      	adds	r7, #20
    5766:	46bd      	mov	sp, r7
    5768:	f85d 7b04 	ldr.w	r7, [sp], #4
    576c:	4770      	bx	lr

0000576e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    576e:	b480      	push	{r7}
    5770:	b083      	sub	sp, #12
    5772:	af00      	add	r7, sp, #0
    5774:	6078      	str	r0, [r7, #4]
    5776:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    5778:	687b      	ldr	r3, [r7, #4]
    577a:	683a      	ldr	r2, [r7, #0]
    577c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    577e:	bf00      	nop
    5780:	370c      	adds	r7, #12
    5782:	46bd      	mov	sp, r7
    5784:	f85d 7b04 	ldr.w	r7, [sp], #4
    5788:	4770      	bx	lr
	...

0000578c <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    578c:	b580      	push	{r7, lr}
    578e:	b082      	sub	sp, #8
    5790:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    5792:	4b13      	ldr	r3, [pc, #76]	; (57e0 <_osc32kctrl_init_sources+0x54>)
    5794:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    5796:	2300      	movs	r3, #0
    5798:	807b      	strh	r3, [r7, #2]

#if CONF_XOSC32K_CONFIG == 1
	hri_osc32kctrl_write_XOSC32K_reg(
    579a:	f242 018e 	movw	r1, #8334	; 0x208e
    579e:	6878      	ldr	r0, [r7, #4]
    57a0:	4b10      	ldr	r3, [pc, #64]	; (57e4 <_osc32kctrl_init_sources+0x58>)
    57a2:	4798      	blx	r3
#ifdef CONF_XOSC32K_CGM
	        OSC32KCTRL_XOSC32K_CGM(CONF_XOSC32K_CGM) |
#endif
	        (CONF_XOSC32K_ENABLE << OSC32KCTRL_XOSC32K_ENABLE_Pos));

	hri_osc32kctrl_write_CFDCTRL_reg(hw, (CONF_XOSC32K_CFDEN << OSC32KCTRL_CFDCTRL_CFDEN_Pos));
    57a4:	2100      	movs	r1, #0
    57a6:	6878      	ldr	r0, [r7, #4]
    57a8:	4b0f      	ldr	r3, [pc, #60]	; (57e8 <_osc32kctrl_init_sources+0x5c>)
    57aa:	4798      	blx	r3

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
    57ac:	2100      	movs	r1, #0
    57ae:	6878      	ldr	r0, [r7, #4]
    57b0:	4b0e      	ldr	r3, [pc, #56]	; (57ec <_osc32kctrl_init_sources+0x60>)
    57b2:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    57b4:	6878      	ldr	r0, [r7, #4]
    57b6:	4b0e      	ldr	r3, [pc, #56]	; (57f0 <_osc32kctrl_init_sources+0x64>)
    57b8:	4798      	blx	r3
    57ba:	4603      	mov	r3, r0
    57bc:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    57be:	887b      	ldrh	r3, [r7, #2]
    57c0:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    57c2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    57c6:	4619      	mov	r1, r3
    57c8:	6878      	ldr	r0, [r7, #4]
    57ca:	4b0a      	ldr	r3, [pc, #40]	; (57f4 <_osc32kctrl_init_sources+0x68>)
    57cc:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    57ce:	2100      	movs	r1, #0
    57d0:	6878      	ldr	r0, [r7, #4]
    57d2:	4b09      	ldr	r3, [pc, #36]	; (57f8 <_osc32kctrl_init_sources+0x6c>)
    57d4:	4798      	blx	r3
	(void)calib;
}
    57d6:	bf00      	nop
    57d8:	3708      	adds	r7, #8
    57da:	46bd      	mov	sp, r7
    57dc:	bd80      	pop	{r7, pc}
    57de:	bf00      	nop
    57e0:	40001400 	.word	0x40001400
    57e4:	000056ef 	.word	0x000056ef
    57e8:	0000570d 	.word	0x0000570d
    57ec:	0000572b 	.word	0x0000572b
    57f0:	00005749 	.word	0x00005749
    57f4:	0000576f 	.word	0x0000576f
    57f8:	000056d1 	.word	0x000056d1

000057fc <hri_gclk_wait_for_sync>:
{
    57fc:	b480      	push	{r7}
    57fe:	b083      	sub	sp, #12
    5800:	af00      	add	r7, sp, #0
    5802:	6078      	str	r0, [r7, #4]
    5804:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    5806:	bf00      	nop
    5808:	687b      	ldr	r3, [r7, #4]
    580a:	685a      	ldr	r2, [r3, #4]
    580c:	683b      	ldr	r3, [r7, #0]
    580e:	4013      	ands	r3, r2
    5810:	2b00      	cmp	r3, #0
    5812:	d1f9      	bne.n	5808 <hri_gclk_wait_for_sync+0xc>
}
    5814:	bf00      	nop
    5816:	370c      	adds	r7, #12
    5818:	46bd      	mov	sp, r7
    581a:	f85d 7b04 	ldr.w	r7, [sp], #4
    581e:	4770      	bx	lr

00005820 <hri_gclk_get_SYNCBUSY_GENCTRL0_bit>:
{
    5820:	b480      	push	{r7}
    5822:	b083      	sub	sp, #12
    5824:	af00      	add	r7, sp, #0
    5826:	6078      	str	r0, [r7, #4]
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    5828:	687b      	ldr	r3, [r7, #4]
    582a:	685b      	ldr	r3, [r3, #4]
    582c:	089b      	lsrs	r3, r3, #2
    582e:	f003 0301 	and.w	r3, r3, #1
    5832:	2b00      	cmp	r3, #0
    5834:	bf14      	ite	ne
    5836:	2301      	movne	r3, #1
    5838:	2300      	moveq	r3, #0
    583a:	b2db      	uxtb	r3, r3
}
    583c:	4618      	mov	r0, r3
    583e:	370c      	adds	r7, #12
    5840:	46bd      	mov	sp, r7
    5842:	f85d 7b04 	ldr.w	r7, [sp], #4
    5846:	4770      	bx	lr

00005848 <hri_gclk_read_SYNCBUSY_reg>:
{
    5848:	b480      	push	{r7}
    584a:	b083      	sub	sp, #12
    584c:	af00      	add	r7, sp, #0
    584e:	6078      	str	r0, [r7, #4]
	return ((Gclk *)hw)->SYNCBUSY.reg;
    5850:	687b      	ldr	r3, [r7, #4]
    5852:	685b      	ldr	r3, [r3, #4]
}
    5854:	4618      	mov	r0, r3
    5856:	370c      	adds	r7, #12
    5858:	46bd      	mov	sp, r7
    585a:	f85d 7b04 	ldr.w	r7, [sp], #4
    585e:	4770      	bx	lr

00005860 <hri_gclk_write_GENCTRL_SRC_bf>:
{
    5860:	b580      	push	{r7, lr}
    5862:	b086      	sub	sp, #24
    5864:	af00      	add	r7, sp, #0
    5866:	60f8      	str	r0, [r7, #12]
    5868:	460b      	mov	r3, r1
    586a:	607a      	str	r2, [r7, #4]
    586c:	72fb      	strb	r3, [r7, #11]
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    586e:	7afa      	ldrb	r2, [r7, #11]
    5870:	68fb      	ldr	r3, [r7, #12]
    5872:	3208      	adds	r2, #8
    5874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5878:	617b      	str	r3, [r7, #20]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    587a:	697b      	ldr	r3, [r7, #20]
    587c:	f023 030f 	bic.w	r3, r3, #15
    5880:	617b      	str	r3, [r7, #20]
	tmp |= GCLK_GENCTRL_SRC(data);
    5882:	687b      	ldr	r3, [r7, #4]
    5884:	f003 030f 	and.w	r3, r3, #15
    5888:	697a      	ldr	r2, [r7, #20]
    588a:	4313      	orrs	r3, r2
    588c:	617b      	str	r3, [r7, #20]
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    588e:	7afa      	ldrb	r2, [r7, #11]
    5890:	68fb      	ldr	r3, [r7, #12]
    5892:	3208      	adds	r2, #8
    5894:	6979      	ldr	r1, [r7, #20]
    5896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    589a:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    589e:	68f8      	ldr	r0, [r7, #12]
    58a0:	4b02      	ldr	r3, [pc, #8]	; (58ac <hri_gclk_write_GENCTRL_SRC_bf+0x4c>)
    58a2:	4798      	blx	r3
}
    58a4:	bf00      	nop
    58a6:	3718      	adds	r7, #24
    58a8:	46bd      	mov	sp, r7
    58aa:	bd80      	pop	{r7, pc}
    58ac:	000057fd 	.word	0x000057fd

000058b0 <hri_gclk_write_PCHCTRL_reg>:
{
    58b0:	b480      	push	{r7}
    58b2:	b085      	sub	sp, #20
    58b4:	af00      	add	r7, sp, #0
    58b6:	60f8      	str	r0, [r7, #12]
    58b8:	460b      	mov	r3, r1
    58ba:	607a      	str	r2, [r7, #4]
    58bc:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    58be:	7afa      	ldrb	r2, [r7, #11]
    58c0:	68fb      	ldr	r3, [r7, #12]
    58c2:	3220      	adds	r2, #32
    58c4:	6879      	ldr	r1, [r7, #4]
    58c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    58ca:	bf00      	nop
    58cc:	3714      	adds	r7, #20
    58ce:	46bd      	mov	sp, r7
    58d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    58d4:	4770      	bx	lr

000058d6 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    58d6:	b480      	push	{r7}
    58d8:	b085      	sub	sp, #20
    58da:	af00      	add	r7, sp, #0
    58dc:	60f8      	str	r0, [r7, #12]
    58de:	460b      	mov	r3, r1
    58e0:	607a      	str	r2, [r7, #4]
    58e2:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    58e4:	bf00      	nop
    58e6:	7afa      	ldrb	r2, [r7, #11]
    58e8:	68f9      	ldr	r1, [r7, #12]
    58ea:	4613      	mov	r3, r2
    58ec:	009b      	lsls	r3, r3, #2
    58ee:	4413      	add	r3, r2
    58f0:	009b      	lsls	r3, r3, #2
    58f2:	440b      	add	r3, r1
    58f4:	333c      	adds	r3, #60	; 0x3c
    58f6:	681a      	ldr	r2, [r3, #0]
    58f8:	687b      	ldr	r3, [r7, #4]
    58fa:	4013      	ands	r3, r2
    58fc:	2b00      	cmp	r3, #0
    58fe:	d1f2      	bne.n	58e6 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    5900:	bf00      	nop
    5902:	3714      	adds	r7, #20
    5904:	46bd      	mov	sp, r7
    5906:	f85d 7b04 	ldr.w	r7, [sp], #4
    590a:	4770      	bx	lr

0000590c <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    590c:	b480      	push	{r7}
    590e:	b083      	sub	sp, #12
    5910:	af00      	add	r7, sp, #0
    5912:	6078      	str	r0, [r7, #4]
    5914:	460b      	mov	r3, r1
    5916:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    5918:	78fa      	ldrb	r2, [r7, #3]
    591a:	6879      	ldr	r1, [r7, #4]
    591c:	4613      	mov	r3, r2
    591e:	009b      	lsls	r3, r3, #2
    5920:	4413      	add	r3, r2
    5922:	009b      	lsls	r3, r3, #2
    5924:	440b      	add	r3, r1
    5926:	3340      	adds	r3, #64	; 0x40
    5928:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    592a:	f003 0301 	and.w	r3, r3, #1
    592e:	2b00      	cmp	r3, #0
    5930:	bf14      	ite	ne
    5932:	2301      	movne	r3, #1
    5934:	2300      	moveq	r3, #0
    5936:	b2db      	uxtb	r3, r3
}
    5938:	4618      	mov	r0, r3
    593a:	370c      	adds	r7, #12
    593c:	46bd      	mov	sp, r7
    593e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5942:	4770      	bx	lr

00005944 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    5944:	b480      	push	{r7}
    5946:	b083      	sub	sp, #12
    5948:	af00      	add	r7, sp, #0
    594a:	6078      	str	r0, [r7, #4]
    594c:	460b      	mov	r3, r1
    594e:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    5950:	78fa      	ldrb	r2, [r7, #3]
    5952:	6879      	ldr	r1, [r7, #4]
    5954:	4613      	mov	r3, r2
    5956:	009b      	lsls	r3, r3, #2
    5958:	4413      	add	r3, r2
    595a:	009b      	lsls	r3, r3, #2
    595c:	440b      	add	r3, r1
    595e:	3340      	adds	r3, #64	; 0x40
    5960:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    5962:	085b      	lsrs	r3, r3, #1
    5964:	f003 0301 	and.w	r3, r3, #1
    5968:	2b00      	cmp	r3, #0
    596a:	bf14      	ite	ne
    596c:	2301      	movne	r3, #1
    596e:	2300      	moveq	r3, #0
    5970:	b2db      	uxtb	r3, r3
}
    5972:	4618      	mov	r0, r3
    5974:	370c      	adds	r7, #12
    5976:	46bd      	mov	sp, r7
    5978:	f85d 7b04 	ldr.w	r7, [sp], #4
    597c:	4770      	bx	lr
	...

00005980 <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    5980:	b580      	push	{r7, lr}
    5982:	b082      	sub	sp, #8
    5984:	af00      	add	r7, sp, #0
    5986:	6078      	str	r0, [r7, #4]
    5988:	460b      	mov	r3, r1
    598a:	70fb      	strb	r3, [r7, #3]
    598c:	4613      	mov	r3, r2
    598e:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    5990:	78fa      	ldrb	r2, [r7, #3]
    5992:	6879      	ldr	r1, [r7, #4]
    5994:	4613      	mov	r3, r2
    5996:	009b      	lsls	r3, r3, #2
    5998:	4413      	add	r3, r2
    599a:	009b      	lsls	r3, r3, #2
    599c:	440b      	add	r3, r1
    599e:	3330      	adds	r3, #48	; 0x30
    59a0:	78ba      	ldrb	r2, [r7, #2]
    59a2:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    59a4:	78fb      	ldrb	r3, [r7, #3]
    59a6:	2202      	movs	r2, #2
    59a8:	4619      	mov	r1, r3
    59aa:	6878      	ldr	r0, [r7, #4]
    59ac:	4b02      	ldr	r3, [pc, #8]	; (59b8 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    59ae:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    59b0:	bf00      	nop
    59b2:	3708      	adds	r7, #8
    59b4:	46bd      	mov	sp, r7
    59b6:	bd80      	pop	{r7, pc}
    59b8:	000058d7 	.word	0x000058d7

000059bc <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    59bc:	b580      	push	{r7, lr}
    59be:	b084      	sub	sp, #16
    59c0:	af00      	add	r7, sp, #0
    59c2:	60f8      	str	r0, [r7, #12]
    59c4:	460b      	mov	r3, r1
    59c6:	607a      	str	r2, [r7, #4]
    59c8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    59ca:	7afa      	ldrb	r2, [r7, #11]
    59cc:	68f9      	ldr	r1, [r7, #12]
    59ce:	4613      	mov	r3, r2
    59d0:	009b      	lsls	r3, r3, #2
    59d2:	4413      	add	r3, r2
    59d4:	009b      	lsls	r3, r3, #2
    59d6:	440b      	add	r3, r1
    59d8:	3334      	adds	r3, #52	; 0x34
    59da:	687a      	ldr	r2, [r7, #4]
    59dc:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    59de:	7afb      	ldrb	r3, [r7, #11]
    59e0:	2206      	movs	r2, #6
    59e2:	4619      	mov	r1, r3
    59e4:	68f8      	ldr	r0, [r7, #12]
    59e6:	4b03      	ldr	r3, [pc, #12]	; (59f4 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    59e8:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    59ea:	bf00      	nop
    59ec:	3710      	adds	r7, #16
    59ee:	46bd      	mov	sp, r7
    59f0:	bd80      	pop	{r7, pc}
    59f2:	bf00      	nop
    59f4:	000058d7 	.word	0x000058d7

000059f8 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    59f8:	b480      	push	{r7}
    59fa:	b085      	sub	sp, #20
    59fc:	af00      	add	r7, sp, #0
    59fe:	60f8      	str	r0, [r7, #12]
    5a00:	460b      	mov	r3, r1
    5a02:	607a      	str	r2, [r7, #4]
    5a04:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    5a06:	7afa      	ldrb	r2, [r7, #11]
    5a08:	68f9      	ldr	r1, [r7, #12]
    5a0a:	4613      	mov	r3, r2
    5a0c:	009b      	lsls	r3, r3, #2
    5a0e:	4413      	add	r3, r2
    5a10:	009b      	lsls	r3, r3, #2
    5a12:	440b      	add	r3, r1
    5a14:	3338      	adds	r3, #56	; 0x38
    5a16:	687a      	ldr	r2, [r7, #4]
    5a18:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5a1a:	bf00      	nop
    5a1c:	3714      	adds	r7, #20
    5a1e:	46bd      	mov	sp, r7
    5a20:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a24:	4770      	bx	lr

00005a26 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    5a26:	b480      	push	{r7}
    5a28:	b083      	sub	sp, #12
    5a2a:	af00      	add	r7, sp, #0
    5a2c:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    5a2e:	687b      	ldr	r3, [r7, #4]
    5a30:	691b      	ldr	r3, [r3, #16]
    5a32:	085b      	lsrs	r3, r3, #1
    5a34:	f003 0301 	and.w	r3, r3, #1
    5a38:	2b00      	cmp	r3, #0
    5a3a:	bf14      	ite	ne
    5a3c:	2301      	movne	r3, #1
    5a3e:	2300      	moveq	r3, #0
    5a40:	b2db      	uxtb	r3, r3
}
    5a42:	4618      	mov	r0, r3
    5a44:	370c      	adds	r7, #12
    5a46:	46bd      	mov	sp, r7
    5a48:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a4c:	4770      	bx	lr

00005a4e <hri_oscctrl_get_STATUS_DFLLRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW1) >> OSCCTRL_STATUS_XOSCCKSW1_Pos;
}

static inline bool hri_oscctrl_get_STATUS_DFLLRDY_bit(const void *const hw)
{
    5a4e:	b480      	push	{r7}
    5a50:	b083      	sub	sp, #12
    5a52:	af00      	add	r7, sp, #0
    5a54:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    5a56:	687b      	ldr	r3, [r7, #4]
    5a58:	691b      	ldr	r3, [r3, #16]
    5a5a:	0a1b      	lsrs	r3, r3, #8
    5a5c:	f003 0301 	and.w	r3, r3, #1
    5a60:	2b00      	cmp	r3, #0
    5a62:	bf14      	ite	ne
    5a64:	2301      	movne	r3, #1
    5a66:	2300      	moveq	r3, #0
    5a68:	b2db      	uxtb	r3, r3
}
    5a6a:	4618      	mov	r0, r3
    5a6c:	370c      	adds	r7, #12
    5a6e:	46bd      	mov	sp, r7
    5a70:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a74:	4770      	bx	lr

00005a76 <hri_oscctrl_get_STATUS_reg>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DPLL1LDRTO) >> OSCCTRL_STATUS_DPLL1LDRTO_Pos;
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
    5a76:	b480      	push	{r7}
    5a78:	b085      	sub	sp, #20
    5a7a:	af00      	add	r7, sp, #0
    5a7c:	6078      	str	r0, [r7, #4]
    5a7e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5a80:	687b      	ldr	r3, [r7, #4]
    5a82:	691b      	ldr	r3, [r3, #16]
    5a84:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    5a86:	68fa      	ldr	r2, [r7, #12]
    5a88:	683b      	ldr	r3, [r7, #0]
    5a8a:	4013      	ands	r3, r2
    5a8c:	60fb      	str	r3, [r7, #12]
	return tmp;
    5a8e:	68fb      	ldr	r3, [r7, #12]
}
    5a90:	4618      	mov	r0, r3
    5a92:	3714      	adds	r7, #20
    5a94:	46bd      	mov	sp, r7
    5a96:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a9a:	4770      	bx	lr

00005a9c <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    5a9c:	b480      	push	{r7}
    5a9e:	b085      	sub	sp, #20
    5aa0:	af00      	add	r7, sp, #0
    5aa2:	60f8      	str	r0, [r7, #12]
    5aa4:	460b      	mov	r3, r1
    5aa6:	607a      	str	r2, [r7, #4]
    5aa8:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    5aaa:	7afb      	ldrb	r3, [r7, #11]
    5aac:	68fa      	ldr	r2, [r7, #12]
    5aae:	3304      	adds	r3, #4
    5ab0:	009b      	lsls	r3, r3, #2
    5ab2:	4413      	add	r3, r2
    5ab4:	687a      	ldr	r2, [r7, #4]
    5ab6:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5ab8:	bf00      	nop
    5aba:	3714      	adds	r7, #20
    5abc:	46bd      	mov	sp, r7
    5abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ac2:	4770      	bx	lr

00005ac4 <hri_oscctrl_write_DFLLCTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
    5ac4:	b480      	push	{r7}
    5ac6:	b083      	sub	sp, #12
    5ac8:	af00      	add	r7, sp, #0
    5aca:	6078      	str	r0, [r7, #4]
    5acc:	460b      	mov	r3, r1
    5ace:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    5ad0:	687b      	ldr	r3, [r7, #4]
    5ad2:	78fa      	ldrb	r2, [r7, #3]
    5ad4:	771a      	strb	r2, [r3, #28]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5ad6:	bf00      	nop
    5ad8:	370c      	adds	r7, #12
    5ada:	46bd      	mov	sp, r7
    5adc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ae0:	4770      	bx	lr

00005ae2 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
	((Oscctrl *)hw)->DFLLCTRLB.reg |= OSCCTRL_DFLLCTRLB_MODE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
    5ae2:	b480      	push	{r7}
    5ae4:	b085      	sub	sp, #20
    5ae6:	af00      	add	r7, sp, #0
    5ae8:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    5aea:	687b      	ldr	r3, [r7, #4]
    5aec:	f893 3020 	ldrb.w	r3, [r3, #32]
    5af0:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    5af2:	7bfb      	ldrb	r3, [r7, #15]
    5af4:	f003 0301 	and.w	r3, r3, #1
    5af8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5afa:	7bfb      	ldrb	r3, [r7, #15]
    5afc:	2b00      	cmp	r3, #0
    5afe:	bf14      	ite	ne
    5b00:	2301      	movne	r3, #1
    5b02:	2300      	moveq	r3, #0
    5b04:	b2db      	uxtb	r3, r3
}
    5b06:	4618      	mov	r0, r3
    5b08:	3714      	adds	r7, #20
    5b0a:	46bd      	mov	sp, r7
    5b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b10:	4770      	bx	lr

00005b12 <hri_oscctrl_write_DFLLCTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLCTRLB_reg(const void *const hw, hri_oscctrl_dfllctrlb_reg_t data)
{
    5b12:	b480      	push	{r7}
    5b14:	b083      	sub	sp, #12
    5b16:	af00      	add	r7, sp, #0
    5b18:	6078      	str	r0, [r7, #4]
    5b1a:	460b      	mov	r3, r1
    5b1c:	70fb      	strb	r3, [r7, #3]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    5b1e:	687b      	ldr	r3, [r7, #4]
    5b20:	78fa      	ldrb	r2, [r7, #3]
    5b22:	f883 2020 	strb.w	r2, [r3, #32]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5b26:	bf00      	nop
    5b28:	370c      	adds	r7, #12
    5b2a:	46bd      	mov	sp, r7
    5b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b30:	4770      	bx	lr

00005b32 <hri_oscctrl_write_DFLLVAL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLVAL_reg(const void *const hw, hri_oscctrl_dfllval_reg_t data)
{
    5b32:	b480      	push	{r7}
    5b34:	b083      	sub	sp, #12
    5b36:	af00      	add	r7, sp, #0
    5b38:	6078      	str	r0, [r7, #4]
    5b3a:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    5b3c:	687b      	ldr	r3, [r7, #4]
    5b3e:	683a      	ldr	r2, [r7, #0]
    5b40:	625a      	str	r2, [r3, #36]	; 0x24
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5b42:	bf00      	nop
    5b44:	370c      	adds	r7, #12
    5b46:	46bd      	mov	sp, r7
    5b48:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b4c:	4770      	bx	lr

00005b4e <hri_oscctrl_read_DFLLVAL_reg>:
	((Oscctrl *)hw)->DFLLVAL.reg ^= mask;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_oscctrl_dfllval_reg_t hri_oscctrl_read_DFLLVAL_reg(const void *const hw)
{
    5b4e:	b480      	push	{r7}
    5b50:	b083      	sub	sp, #12
    5b52:	af00      	add	r7, sp, #0
    5b54:	6078      	str	r0, [r7, #4]
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    5b56:	687b      	ldr	r3, [r7, #4]
    5b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    5b5a:	4618      	mov	r0, r3
    5b5c:	370c      	adds	r7, #12
    5b5e:	46bd      	mov	sp, r7
    5b60:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b64:	4770      	bx	lr

00005b66 <hri_oscctrl_write_DFLLMUL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
    5b66:	b480      	push	{r7}
    5b68:	b083      	sub	sp, #12
    5b6a:	af00      	add	r7, sp, #0
    5b6c:	6078      	str	r0, [r7, #4]
    5b6e:	6039      	str	r1, [r7, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    5b70:	687b      	ldr	r3, [r7, #4]
    5b72:	683a      	ldr	r2, [r7, #0]
    5b74:	629a      	str	r2, [r3, #40]	; 0x28
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    5b76:	bf00      	nop
    5b78:	370c      	adds	r7, #12
    5b7a:	46bd      	mov	sp, r7
    5b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b80:	4770      	bx	lr

00005b82 <hri_oscctrl_get_DFLLSYNC_ENABLE_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_ENABLE;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_ENABLE_bit(const void *const hw)
{
    5b82:	b480      	push	{r7}
    5b84:	b085      	sub	sp, #20
    5b86:	af00      	add	r7, sp, #0
    5b88:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5b8a:	687b      	ldr	r3, [r7, #4]
    5b8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5b90:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_ENABLE) >> OSCCTRL_DFLLSYNC_ENABLE_Pos;
    5b92:	7bfb      	ldrb	r3, [r7, #15]
    5b94:	085b      	lsrs	r3, r3, #1
    5b96:	b2db      	uxtb	r3, r3
    5b98:	f003 0301 	and.w	r3, r3, #1
    5b9c:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5b9e:	7bfb      	ldrb	r3, [r7, #15]
    5ba0:	2b00      	cmp	r3, #0
    5ba2:	bf14      	ite	ne
    5ba4:	2301      	movne	r3, #1
    5ba6:	2300      	moveq	r3, #0
    5ba8:	b2db      	uxtb	r3, r3
}
    5baa:	4618      	mov	r0, r3
    5bac:	3714      	adds	r7, #20
    5bae:	46bd      	mov	sp, r7
    5bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bb4:	4770      	bx	lr

00005bb6 <hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLCTRLB;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(const void *const hw)
{
    5bb6:	b480      	push	{r7}
    5bb8:	b085      	sub	sp, #20
    5bba:	af00      	add	r7, sp, #0
    5bbc:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5bbe:	687b      	ldr	r3, [r7, #4]
    5bc0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5bc4:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLCTRLB) >> OSCCTRL_DFLLSYNC_DFLLCTRLB_Pos;
    5bc6:	7bfb      	ldrb	r3, [r7, #15]
    5bc8:	089b      	lsrs	r3, r3, #2
    5bca:	b2db      	uxtb	r3, r3
    5bcc:	f003 0301 	and.w	r3, r3, #1
    5bd0:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5bd2:	7bfb      	ldrb	r3, [r7, #15]
    5bd4:	2b00      	cmp	r3, #0
    5bd6:	bf14      	ite	ne
    5bd8:	2301      	movne	r3, #1
    5bda:	2300      	moveq	r3, #0
    5bdc:	b2db      	uxtb	r3, r3
}
    5bde:	4618      	mov	r0, r3
    5be0:	3714      	adds	r7, #20
    5be2:	46bd      	mov	sp, r7
    5be4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5be8:	4770      	bx	lr

00005bea <hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLVAL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(const void *const hw)
{
    5bea:	b480      	push	{r7}
    5bec:	b085      	sub	sp, #20
    5bee:	af00      	add	r7, sp, #0
    5bf0:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5bf2:	687b      	ldr	r3, [r7, #4]
    5bf4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5bf8:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLVAL) >> OSCCTRL_DFLLSYNC_DFLLVAL_Pos;
    5bfa:	7bfb      	ldrb	r3, [r7, #15]
    5bfc:	08db      	lsrs	r3, r3, #3
    5bfe:	b2db      	uxtb	r3, r3
    5c00:	f003 0301 	and.w	r3, r3, #1
    5c04:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5c06:	7bfb      	ldrb	r3, [r7, #15]
    5c08:	2b00      	cmp	r3, #0
    5c0a:	bf14      	ite	ne
    5c0c:	2301      	movne	r3, #1
    5c0e:	2300      	moveq	r3, #0
    5c10:	b2db      	uxtb	r3, r3
}
    5c12:	4618      	mov	r0, r3
    5c14:	3714      	adds	r7, #20
    5c16:	46bd      	mov	sp, r7
    5c18:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c1c:	4770      	bx	lr

00005c1e <hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit>:
	((Oscctrl *)hw)->DFLLSYNC.reg |= OSCCTRL_DFLLSYNC_DFLLMUL;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
    5c1e:	b480      	push	{r7}
    5c20:	b085      	sub	sp, #20
    5c22:	af00      	add	r7, sp, #0
    5c24:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    5c26:	687b      	ldr	r3, [r7, #4]
    5c28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    5c2c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLSYNC_DFLLMUL) >> OSCCTRL_DFLLSYNC_DFLLMUL_Pos;
    5c2e:	7bfb      	ldrb	r3, [r7, #15]
    5c30:	091b      	lsrs	r3, r3, #4
    5c32:	b2db      	uxtb	r3, r3
    5c34:	f003 0301 	and.w	r3, r3, #1
    5c38:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    5c3a:	7bfb      	ldrb	r3, [r7, #15]
    5c3c:	2b00      	cmp	r3, #0
    5c3e:	bf14      	ite	ne
    5c40:	2301      	movne	r3, #1
    5c42:	2300      	moveq	r3, #0
    5c44:	b2db      	uxtb	r3, r3
}
    5c46:	4618      	mov	r0, r3
    5c48:	3714      	adds	r7, #20
    5c4a:	46bd      	mov	sp, r7
    5c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c50:	4770      	bx	lr
	...

00005c54 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    5c54:	b580      	push	{r7, lr}
    5c56:	b082      	sub	sp, #8
    5c58:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5c5a:	4b0a      	ldr	r3, [pc, #40]	; (5c84 <_oscctrl_init_sources+0x30>)
    5c5c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    5c5e:	4a0a      	ldr	r2, [pc, #40]	; (5c88 <_oscctrl_init_sources+0x34>)
    5c60:	2101      	movs	r1, #1
    5c62:	6878      	ldr	r0, [r7, #4]
    5c64:	4b09      	ldr	r3, [pc, #36]	; (5c8c <_oscctrl_init_sources+0x38>)
    5c66:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    5c68:	bf00      	nop
    5c6a:	6878      	ldr	r0, [r7, #4]
    5c6c:	4b08      	ldr	r3, [pc, #32]	; (5c90 <_oscctrl_init_sources+0x3c>)
    5c6e:	4798      	blx	r3
    5c70:	4603      	mov	r3, r0
    5c72:	f083 0301 	eor.w	r3, r3, #1
    5c76:	b2db      	uxtb	r3, r3
    5c78:	2b00      	cmp	r3, #0
    5c7a:	d1f6      	bne.n	5c6a <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    5c7c:	bf00      	nop
    5c7e:	3708      	adds	r7, #8
    5c80:	46bd      	mov	sp, r7
    5c82:	bd80      	pop	{r7, pc}
    5c84:	40001000 	.word	0x40001000
    5c88:	03002646 	.word	0x03002646
    5c8c:	00005a9d 	.word	0x00005a9d
    5c90:	00005a27 	.word	0x00005a27

00005c94 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    5c94:	b580      	push	{r7, lr}
    5c96:	b084      	sub	sp, #16
    5c98:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    5c9a:	4b6b      	ldr	r3, [pc, #428]	; (5e48 <_oscctrl_init_referenced_generators+0x1b4>)
    5c9c:	60fb      	str	r3, [r7, #12]

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
    5c9e:	2204      	movs	r2, #4
    5ca0:	2100      	movs	r1, #0
    5ca2:	486a      	ldr	r0, [pc, #424]	; (5e4c <_oscctrl_init_referenced_generators+0x1b8>)
    5ca4:	4b6a      	ldr	r3, [pc, #424]	; (5e50 <_oscctrl_init_referenced_generators+0x1bc>)
    5ca6:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5ca8:	bf00      	nop
    5caa:	4868      	ldr	r0, [pc, #416]	; (5e4c <_oscctrl_init_referenced_generators+0x1b8>)
    5cac:	4b69      	ldr	r3, [pc, #420]	; (5e54 <_oscctrl_init_referenced_generators+0x1c0>)
    5cae:	4798      	blx	r3
    5cb0:	4603      	mov	r3, r0
    5cb2:	2b00      	cmp	r3, #0
    5cb4:	d1f9      	bne.n	5caa <_oscctrl_init_referenced_generators+0x16>
		;
	uint8_t tmp;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, 0);
    5cb6:	2100      	movs	r1, #0
    5cb8:	68f8      	ldr	r0, [r7, #12]
    5cba:	4b67      	ldr	r3, [pc, #412]	; (5e58 <_oscctrl_init_referenced_generators+0x1c4>)
    5cbc:	4798      	blx	r3
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_DFLL48, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
    5cbe:	4967      	ldr	r1, [pc, #412]	; (5e5c <_oscctrl_init_referenced_generators+0x1c8>)
    5cc0:	68f8      	ldr	r0, [r7, #12]
    5cc2:	4b67      	ldr	r3, [pc, #412]	; (5e60 <_oscctrl_init_referenced_generators+0x1cc>)
    5cc4:	4798      	blx	r3
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    5cc6:	bf00      	nop
    5cc8:	68f8      	ldr	r0, [r7, #12]
    5cca:	4b66      	ldr	r3, [pc, #408]	; (5e64 <_oscctrl_init_referenced_generators+0x1d0>)
    5ccc:	4798      	blx	r3
    5cce:	4603      	mov	r3, r0
    5cd0:	2b00      	cmp	r3, #0
    5cd2:	d1f9      	bne.n	5cc8 <_oscctrl_init_referenced_generators+0x34>
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
    5cd4:	2100      	movs	r1, #0
    5cd6:	68f8      	ldr	r0, [r7, #12]
    5cd8:	4b63      	ldr	r3, [pc, #396]	; (5e68 <_oscctrl_init_referenced_generators+0x1d4>)
    5cda:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5cdc:	bf00      	nop
    5cde:	68f8      	ldr	r0, [r7, #12]
    5ce0:	4b62      	ldr	r3, [pc, #392]	; (5e6c <_oscctrl_init_referenced_generators+0x1d8>)
    5ce2:	4798      	blx	r3
    5ce4:	4603      	mov	r3, r0
    5ce6:	2b00      	cmp	r3, #0
    5ce8:	d1f9      	bne.n	5cde <_oscctrl_init_referenced_generators+0x4a>
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
    5cea:	2302      	movs	r3, #2
    5cec:	72fb      	strb	r3, [r7, #11]
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
    5cee:	7afb      	ldrb	r3, [r7, #11]
    5cf0:	4619      	mov	r1, r3
    5cf2:	68f8      	ldr	r0, [r7, #12]
    5cf4:	4b58      	ldr	r3, [pc, #352]	; (5e58 <_oscctrl_init_referenced_generators+0x1c4>)
    5cf6:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    5cf8:	bf00      	nop
    5cfa:	68f8      	ldr	r0, [r7, #12]
    5cfc:	4b5c      	ldr	r3, [pc, #368]	; (5e70 <_oscctrl_init_referenced_generators+0x1dc>)
    5cfe:	4798      	blx	r3
    5d00:	4603      	mov	r3, r0
    5d02:	2b00      	cmp	r3, #0
    5d04:	d1f9      	bne.n	5cfa <_oscctrl_init_referenced_generators+0x66>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
    5d06:	68f8      	ldr	r0, [r7, #12]
    5d08:	4b5a      	ldr	r3, [pc, #360]	; (5e74 <_oscctrl_init_referenced_generators+0x1e0>)
    5d0a:	4798      	blx	r3
    5d0c:	4603      	mov	r3, r0
    5d0e:	4619      	mov	r1, r3
    5d10:	68f8      	ldr	r0, [r7, #12]
    5d12:	4b59      	ldr	r3, [pc, #356]	; (5e78 <_oscctrl_init_referenced_generators+0x1e4>)
    5d14:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    5d16:	bf00      	nop
    5d18:	68f8      	ldr	r0, [r7, #12]
    5d1a:	4b58      	ldr	r3, [pc, #352]	; (5e7c <_oscctrl_init_referenced_generators+0x1e8>)
    5d1c:	4798      	blx	r3
    5d1e:	4603      	mov	r3, r0
    5d20:	2b00      	cmp	r3, #0
    5d22:	d1f9      	bne.n	5d18 <_oscctrl_init_referenced_generators+0x84>
		;

	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
    5d24:	2319      	movs	r3, #25
    5d26:	72fb      	strb	r3, [r7, #11]
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
    5d28:	7afb      	ldrb	r3, [r7, #11]
    5d2a:	4619      	mov	r1, r3
    5d2c:	68f8      	ldr	r0, [r7, #12]
    5d2e:	4b4e      	ldr	r3, [pc, #312]	; (5e68 <_oscctrl_init_referenced_generators+0x1d4>)
    5d30:	4798      	blx	r3
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    5d32:	bf00      	nop
    5d34:	68f8      	ldr	r0, [r7, #12]
    5d36:	4b4d      	ldr	r3, [pc, #308]	; (5e6c <_oscctrl_init_referenced_generators+0x1d8>)
    5d38:	4798      	blx	r3
    5d3a:	4603      	mov	r3, r0
    5d3c:	2b00      	cmp	r3, #0
    5d3e:	d1f9      	bne.n	5d34 <_oscctrl_init_referenced_generators+0xa0>
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    5d40:	2245      	movs	r2, #69	; 0x45
    5d42:	2101      	movs	r1, #1
    5d44:	4841      	ldr	r0, [pc, #260]	; (5e4c <_oscctrl_init_referenced_generators+0x1b8>)
    5d46:	4b4e      	ldr	r3, [pc, #312]	; (5e80 <_oscctrl_init_referenced_generators+0x1ec>)
    5d48:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5d4a:	223b      	movs	r2, #59	; 0x3b
    5d4c:	2100      	movs	r1, #0
    5d4e:	68f8      	ldr	r0, [r7, #12]
    5d50:	4b4c      	ldr	r3, [pc, #304]	; (5e84 <_oscctrl_init_referenced_generators+0x1f0>)
    5d52:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5d54:	f44f 6201 	mov.w	r2, #2064	; 0x810
    5d58:	2100      	movs	r1, #0
    5d5a:	68f8      	ldr	r0, [r7, #12]
    5d5c:	4b4a      	ldr	r3, [pc, #296]	; (5e88 <_oscctrl_init_referenced_generators+0x1f4>)
    5d5e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5d60:	2242      	movs	r2, #66	; 0x42
    5d62:	2100      	movs	r1, #0
    5d64:	68f8      	ldr	r0, [r7, #12]
    5d66:	4b49      	ldr	r3, [pc, #292]	; (5e8c <_oscctrl_init_referenced_generators+0x1f8>)
    5d68:	4798      	blx	r3
#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    5d6a:	4a49      	ldr	r2, [pc, #292]	; (5e90 <_oscctrl_init_referenced_generators+0x1fc>)
    5d6c:	2101      	movs	r1, #1
    5d6e:	68f8      	ldr	r0, [r7, #12]
    5d70:	4b44      	ldr	r3, [pc, #272]	; (5e84 <_oscctrl_init_referenced_generators+0x1f0>)
    5d72:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    5d74:	f44f 6203 	mov.w	r2, #2096	; 0x830
    5d78:	2101      	movs	r1, #1
    5d7a:	68f8      	ldr	r0, [r7, #12]
    5d7c:	4b42      	ldr	r3, [pc, #264]	; (5e88 <_oscctrl_init_referenced_generators+0x1f4>)
    5d7e:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    5d80:	2202      	movs	r2, #2
    5d82:	2101      	movs	r1, #1
    5d84:	68f8      	ldr	r0, [r7, #12]
    5d86:	4b41      	ldr	r3, [pc, #260]	; (5e8c <_oscctrl_init_referenced_generators+0x1f8>)
    5d88:	4798      	blx	r3
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    5d8a:	68f8      	ldr	r0, [r7, #12]
    5d8c:	4b41      	ldr	r3, [pc, #260]	; (5e94 <_oscctrl_init_referenced_generators+0x200>)
    5d8e:	4798      	blx	r3
    5d90:	4603      	mov	r3, r0
    5d92:	2b00      	cmp	r3, #0
    5d94:	d00c      	beq.n	5db0 <_oscctrl_init_referenced_generators+0x11c>
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;
    5d96:	f44f 6310 	mov.w	r3, #2304	; 0x900
    5d9a:	607b      	str	r3, [r7, #4]

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    5d9c:	bf00      	nop
    5d9e:	6879      	ldr	r1, [r7, #4]
    5da0:	68f8      	ldr	r0, [r7, #12]
    5da2:	4b3d      	ldr	r3, [pc, #244]	; (5e98 <_oscctrl_init_referenced_generators+0x204>)
    5da4:	4798      	blx	r3
    5da6:	4602      	mov	r2, r0
    5da8:	687b      	ldr	r3, [r7, #4]
    5daa:	429a      	cmp	r2, r3
    5dac:	d1f7      	bne.n	5d9e <_oscctrl_init_referenced_generators+0x10a>
    5dae:	e009      	b.n	5dc4 <_oscctrl_init_referenced_generators+0x130>
			;
	} else {
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    5db0:	bf00      	nop
    5db2:	68f8      	ldr	r0, [r7, #12]
    5db4:	4b39      	ldr	r3, [pc, #228]	; (5e9c <_oscctrl_init_referenced_generators+0x208>)
    5db6:	4798      	blx	r3
    5db8:	4603      	mov	r3, r0
    5dba:	f083 0301 	eor.w	r3, r3, #1
    5dbe:	b2db      	uxtb	r3, r3
    5dc0:	2b00      	cmp	r3, #0
    5dc2:	d1f6      	bne.n	5db2 <_oscctrl_init_referenced_generators+0x11e>
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    5dc4:	bf00      	nop
    5dc6:	2100      	movs	r1, #0
    5dc8:	68f8      	ldr	r0, [r7, #12]
    5dca:	4b35      	ldr	r3, [pc, #212]	; (5ea0 <_oscctrl_init_referenced_generators+0x20c>)
    5dcc:	4798      	blx	r3
    5dce:	4603      	mov	r3, r0
    5dd0:	f083 0301 	eor.w	r3, r3, #1
    5dd4:	b2db      	uxtb	r3, r3
    5dd6:	2b00      	cmp	r3, #0
    5dd8:	d009      	beq.n	5dee <_oscctrl_init_referenced_generators+0x15a>
    5dda:	2100      	movs	r1, #0
    5ddc:	68f8      	ldr	r0, [r7, #12]
    5dde:	4b31      	ldr	r3, [pc, #196]	; (5ea4 <_oscctrl_init_referenced_generators+0x210>)
    5de0:	4798      	blx	r3
    5de2:	4603      	mov	r3, r0
    5de4:	f083 0301 	eor.w	r3, r3, #1
    5de8:	b2db      	uxtb	r3, r3
    5dea:	2b00      	cmp	r3, #0
    5dec:	d1eb      	bne.n	5dc6 <_oscctrl_init_referenced_generators+0x132>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    5dee:	bf00      	nop
    5df0:	2101      	movs	r1, #1
    5df2:	68f8      	ldr	r0, [r7, #12]
    5df4:	4b2a      	ldr	r3, [pc, #168]	; (5ea0 <_oscctrl_init_referenced_generators+0x20c>)
    5df6:	4798      	blx	r3
    5df8:	4603      	mov	r3, r0
    5dfa:	f083 0301 	eor.w	r3, r3, #1
    5dfe:	b2db      	uxtb	r3, r3
    5e00:	2b00      	cmp	r3, #0
    5e02:	d009      	beq.n	5e18 <_oscctrl_init_referenced_generators+0x184>
    5e04:	2101      	movs	r1, #1
    5e06:	68f8      	ldr	r0, [r7, #12]
    5e08:	4b26      	ldr	r3, [pc, #152]	; (5ea4 <_oscctrl_init_referenced_generators+0x210>)
    5e0a:	4798      	blx	r3
    5e0c:	4603      	mov	r3, r0
    5e0e:	f083 0301 	eor.w	r3, r3, #1
    5e12:	b2db      	uxtb	r3, r3
    5e14:	2b00      	cmp	r3, #0
    5e16:	d1eb      	bne.n	5df0 <_oscctrl_init_referenced_generators+0x15c>
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    5e18:	bf00      	nop
    5e1a:	480c      	ldr	r0, [pc, #48]	; (5e4c <_oscctrl_init_referenced_generators+0x1b8>)
    5e1c:	4b22      	ldr	r3, [pc, #136]	; (5ea8 <_oscctrl_init_referenced_generators+0x214>)
    5e1e:	4798      	blx	r3
    5e20:	4603      	mov	r3, r0
    5e22:	2b00      	cmp	r3, #0
    5e24:	d1f9      	bne.n	5e1a <_oscctrl_init_referenced_generators+0x186>
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
    5e26:	2207      	movs	r2, #7
    5e28:	2100      	movs	r1, #0
    5e2a:	4808      	ldr	r0, [pc, #32]	; (5e4c <_oscctrl_init_referenced_generators+0x1b8>)
    5e2c:	4b08      	ldr	r3, [pc, #32]	; (5e50 <_oscctrl_init_referenced_generators+0x1bc>)
    5e2e:	4798      	blx	r3
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    5e30:	bf00      	nop
    5e32:	4806      	ldr	r0, [pc, #24]	; (5e4c <_oscctrl_init_referenced_generators+0x1b8>)
    5e34:	4b07      	ldr	r3, [pc, #28]	; (5e54 <_oscctrl_init_referenced_generators+0x1c0>)
    5e36:	4798      	blx	r3
    5e38:	4603      	mov	r3, r0
    5e3a:	2b00      	cmp	r3, #0
    5e3c:	d1f9      	bne.n	5e32 <_oscctrl_init_referenced_generators+0x19e>
		;
#endif
	(void)hw;
}
    5e3e:	bf00      	nop
    5e40:	3710      	adds	r7, #16
    5e42:	46bd      	mov	sp, r7
    5e44:	bd80      	pop	{r7, pc}
    5e46:	bf00      	nop
    5e48:	40001000 	.word	0x40001000
    5e4c:	40001c00 	.word	0x40001c00
    5e50:	00005861 	.word	0x00005861
    5e54:	00005821 	.word	0x00005821
    5e58:	00005ac5 	.word	0x00005ac5
    5e5c:	0401bb80 	.word	0x0401bb80
    5e60:	00005b67 	.word	0x00005b67
    5e64:	00005c1f 	.word	0x00005c1f
    5e68:	00005b13 	.word	0x00005b13
    5e6c:	00005bb7 	.word	0x00005bb7
    5e70:	00005b83 	.word	0x00005b83
    5e74:	00005b4f 	.word	0x00005b4f
    5e78:	00005b33 	.word	0x00005b33
    5e7c:	00005beb 	.word	0x00005beb
    5e80:	000058b1 	.word	0x000058b1
    5e84:	000059bd 	.word	0x000059bd
    5e88:	000059f9 	.word	0x000059f9
    5e8c:	00005981 	.word	0x00005981
    5e90:	000407a0 	.word	0x000407a0
    5e94:	00005ae3 	.word	0x00005ae3
    5e98:	00005a77 	.word	0x00005a77
    5e9c:	00005a4f 	.word	0x00005a4f
    5ea0:	0000590d 	.word	0x0000590d
    5ea4:	00005945 	.word	0x00005945
    5ea8:	00005849 	.word	0x00005849

00005eac <hri_qspi_get_INTFLAG_INSTREND_bit>:
{
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_CSRISE;
}

static inline bool hri_qspi_get_INTFLAG_INSTREND_bit(const void *const hw)
{
    5eac:	b480      	push	{r7}
    5eae:	b083      	sub	sp, #12
    5eb0:	af00      	add	r7, sp, #0
    5eb2:	6078      	str	r0, [r7, #4]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    5eb4:	687b      	ldr	r3, [r7, #4]
    5eb6:	69db      	ldr	r3, [r3, #28]
    5eb8:	0a9b      	lsrs	r3, r3, #10
    5eba:	f003 0301 	and.w	r3, r3, #1
    5ebe:	2b00      	cmp	r3, #0
    5ec0:	bf14      	ite	ne
    5ec2:	2301      	movne	r3, #1
    5ec4:	2300      	moveq	r3, #0
    5ec6:	b2db      	uxtb	r3, r3
}
    5ec8:	4618      	mov	r0, r3
    5eca:	370c      	adds	r7, #12
    5ecc:	46bd      	mov	sp, r7
    5ece:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ed2:	4770      	bx	lr

00005ed4 <hri_qspi_clear_INTFLAG_INSTREND_bit>:

static inline void hri_qspi_clear_INTFLAG_INSTREND_bit(const void *const hw)
{
    5ed4:	b480      	push	{r7}
    5ed6:	b083      	sub	sp, #12
    5ed8:	af00      	add	r7, sp, #0
    5eda:	6078      	str	r0, [r7, #4]
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    5edc:	687b      	ldr	r3, [r7, #4]
    5ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5ee2:	61da      	str	r2, [r3, #28]
}
    5ee4:	bf00      	nop
    5ee6:	370c      	adds	r7, #12
    5ee8:	46bd      	mov	sp, r7
    5eea:	f85d 7b04 	ldr.w	r7, [sp], #4
    5eee:	4770      	bx	lr

00005ef0 <hri_qspi_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
    5ef0:	b480      	push	{r7}
    5ef2:	b083      	sub	sp, #12
    5ef4:	af00      	add	r7, sp, #0
    5ef6:	6078      	str	r0, [r7, #4]
    5ef8:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    5efa:	687b      	ldr	r3, [r7, #4]
    5efc:	683a      	ldr	r2, [r7, #0]
    5efe:	601a      	str	r2, [r3, #0]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5f00:	bf00      	nop
    5f02:	370c      	adds	r7, #12
    5f04:	46bd      	mov	sp, r7
    5f06:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f0a:	4770      	bx	lr

00005f0c <hri_qspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
    5f0c:	b480      	push	{r7}
    5f0e:	b083      	sub	sp, #12
    5f10:	af00      	add	r7, sp, #0
    5f12:	6078      	str	r0, [r7, #4]
    5f14:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    5f16:	687b      	ldr	r3, [r7, #4]
    5f18:	683a      	ldr	r2, [r7, #0]
    5f1a:	605a      	str	r2, [r3, #4]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5f1c:	bf00      	nop
    5f1e:	370c      	adds	r7, #12
    5f20:	46bd      	mov	sp, r7
    5f22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f26:	4770      	bx	lr

00005f28 <hri_qspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
    5f28:	b480      	push	{r7}
    5f2a:	b083      	sub	sp, #12
    5f2c:	af00      	add	r7, sp, #0
    5f2e:	6078      	str	r0, [r7, #4]
    5f30:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    5f32:	687b      	ldr	r3, [r7, #4]
    5f34:	683a      	ldr	r2, [r7, #0]
    5f36:	609a      	str	r2, [r3, #8]
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5f38:	bf00      	nop
    5f3a:	370c      	adds	r7, #12
    5f3c:	46bd      	mov	sp, r7
    5f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f42:	4770      	bx	lr

00005f44 <hri_qspi_write_INSTRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
    5f44:	b480      	push	{r7}
    5f46:	b083      	sub	sp, #12
    5f48:	af00      	add	r7, sp, #0
    5f4a:	6078      	str	r0, [r7, #4]
    5f4c:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    5f4e:	687b      	ldr	r3, [r7, #4]
    5f50:	683a      	ldr	r2, [r7, #0]
    5f52:	631a      	str	r2, [r3, #48]	; 0x30
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5f54:	bf00      	nop
    5f56:	370c      	adds	r7, #12
    5f58:	46bd      	mov	sp, r7
    5f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f5e:	4770      	bx	lr

00005f60 <hri_qspi_write_INSTRCTRL_INSTR_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_INSTR(mask)) >> QSPI_INSTRCTRL_INSTR_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5f60:	b480      	push	{r7}
    5f62:	b085      	sub	sp, #20
    5f64:	af00      	add	r7, sp, #0
    5f66:	6078      	str	r0, [r7, #4]
    5f68:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5f6a:	687b      	ldr	r3, [r7, #4]
    5f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5f6e:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    5f70:	68fb      	ldr	r3, [r7, #12]
    5f72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    5f76:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    5f78:	683b      	ldr	r3, [r7, #0]
    5f7a:	b2db      	uxtb	r3, r3
    5f7c:	68fa      	ldr	r2, [r7, #12]
    5f7e:	4313      	orrs	r3, r2
    5f80:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5f82:	687b      	ldr	r3, [r7, #4]
    5f84:	68fa      	ldr	r2, [r7, #12]
    5f86:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5f88:	bf00      	nop
    5f8a:	3714      	adds	r7, #20
    5f8c:	46bd      	mov	sp, r7
    5f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f92:	4770      	bx	lr

00005f94 <hri_qspi_write_INSTRCTRL_OPTCODE_bf>:
	tmp = (tmp & QSPI_INSTRCTRL_OPTCODE(mask)) >> QSPI_INSTRCTRL_OPTCODE_Pos;
	return tmp;
}

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
    5f94:	b480      	push	{r7}
    5f96:	b085      	sub	sp, #20
    5f98:	af00      	add	r7, sp, #0
    5f9a:	6078      	str	r0, [r7, #4]
    5f9c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    5f9e:	687b      	ldr	r3, [r7, #4]
    5fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5fa2:	60fb      	str	r3, [r7, #12]
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    5fa4:	68fb      	ldr	r3, [r7, #12]
    5fa6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
    5faa:	60fb      	str	r3, [r7, #12]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    5fac:	683b      	ldr	r3, [r7, #0]
    5fae:	041b      	lsls	r3, r3, #16
    5fb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    5fb4:	68fa      	ldr	r2, [r7, #12]
    5fb6:	4313      	orrs	r3, r2
    5fb8:	60fb      	str	r3, [r7, #12]
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    5fba:	687b      	ldr	r3, [r7, #4]
    5fbc:	68fa      	ldr	r2, [r7, #12]
    5fbe:	635a      	str	r2, [r3, #52]	; 0x34
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5fc0:	bf00      	nop
    5fc2:	3714      	adds	r7, #20
    5fc4:	46bd      	mov	sp, r7
    5fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fca:	4770      	bx	lr

00005fcc <hri_qspi_write_INSTRFRAME_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
    5fcc:	b480      	push	{r7}
    5fce:	b083      	sub	sp, #12
    5fd0:	af00      	add	r7, sp, #0
    5fd2:	6078      	str	r0, [r7, #4]
    5fd4:	6039      	str	r1, [r7, #0]
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    5fd6:	687b      	ldr	r3, [r7, #4]
    5fd8:	683a      	ldr	r2, [r7, #0]
    5fda:	639a      	str	r2, [r3, #56]	; 0x38
	QSPI_CRITICAL_SECTION_LEAVE();
}
    5fdc:	bf00      	nop
    5fde:	370c      	adds	r7, #12
    5fe0:	46bd      	mov	sp, r7
    5fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fe6:	4770      	bx	lr

00005fe8 <hri_qspi_read_INSTRFRAME_reg>:
	((Qspi *)hw)->INSTRFRAME.reg ^= mask;
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
    5fe8:	b480      	push	{r7}
    5fea:	b083      	sub	sp, #12
    5fec:	af00      	add	r7, sp, #0
    5fee:	6078      	str	r0, [r7, #4]
	return ((Qspi *)hw)->INSTRFRAME.reg;
    5ff0:	687b      	ldr	r3, [r7, #4]
    5ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
    5ff4:	4618      	mov	r0, r3
    5ff6:	370c      	adds	r7, #12
    5ff8:	46bd      	mov	sp, r7
    5ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ffe:	4770      	bx	lr

00006000 <_qspi_memcpy>:
 * \param dst  Pointer to destination buffer.
 * \param src  Pointer to source buffer.
 * \param count  Bytes to be copied.
 */
static void _qspi_memcpy(uint8_t *dst, uint8_t *src, uint32_t count)
{
    6000:	b480      	push	{r7}
    6002:	b085      	sub	sp, #20
    6004:	af00      	add	r7, sp, #0
    6006:	60f8      	str	r0, [r7, #12]
    6008:	60b9      	str	r1, [r7, #8]
    600a:	607a      	str	r2, [r7, #4]
	while (count--) {
    600c:	e007      	b.n	601e <_qspi_memcpy+0x1e>
		*dst++ = *src++;
    600e:	68fb      	ldr	r3, [r7, #12]
    6010:	1c5a      	adds	r2, r3, #1
    6012:	60fa      	str	r2, [r7, #12]
    6014:	68ba      	ldr	r2, [r7, #8]
    6016:	1c51      	adds	r1, r2, #1
    6018:	60b9      	str	r1, [r7, #8]
    601a:	7812      	ldrb	r2, [r2, #0]
    601c:	701a      	strb	r2, [r3, #0]
	while (count--) {
    601e:	687b      	ldr	r3, [r7, #4]
    6020:	1e5a      	subs	r2, r3, #1
    6022:	607a      	str	r2, [r7, #4]
    6024:	2b00      	cmp	r3, #0
    6026:	d1f2      	bne.n	600e <_qspi_memcpy+0xe>
	}
}
    6028:	bf00      	nop
    602a:	3714      	adds	r7, #20
    602c:	46bd      	mov	sp, r7
    602e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6032:	4770      	bx	lr

00006034 <_qspi_end_transfer>:
 * \brief Ends ongoing transfer by releasing CS of QSPI peripheral.
 *
 * \param qspi  Pointer to an Qspi instance.
 */
static inline void _qspi_end_transfer(void *hw)
{
    6034:	b580      	push	{r7, lr}
    6036:	b082      	sub	sp, #8
    6038:	af00      	add	r7, sp, #0
    603a:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
    603c:	4903      	ldr	r1, [pc, #12]	; (604c <_qspi_end_transfer+0x18>)
    603e:	6878      	ldr	r0, [r7, #4]
    6040:	4b03      	ldr	r3, [pc, #12]	; (6050 <_qspi_end_transfer+0x1c>)
    6042:	4798      	blx	r3
}
    6044:	bf00      	nop
    6046:	3708      	adds	r7, #8
    6048:	46bd      	mov	sp, r7
    604a:	bd80      	pop	{r7, pc}
    604c:	01000002 	.word	0x01000002
    6050:	00005ef1 	.word	0x00005ef1

00006054 <_qspi_sync_init>:

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    6054:	b580      	push	{r7, lr}
    6056:	b082      	sub	sp, #8
    6058:	af00      	add	r7, sp, #0
    605a:	6078      	str	r0, [r7, #4]
    605c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
    605e:	687b      	ldr	r3, [r7, #4]
    6060:	2b00      	cmp	r3, #0
    6062:	d004      	beq.n	606e <_qspi_sync_init+0x1a>
    6064:	683b      	ldr	r3, [r7, #0]
    6066:	2b00      	cmp	r3, #0
    6068:	d001      	beq.n	606e <_qspi_sync_init+0x1a>
    606a:	2301      	movs	r3, #1
    606c:	e000      	b.n	6070 <_qspi_sync_init+0x1c>
    606e:	2300      	movs	r3, #0
    6070:	f003 0301 	and.w	r3, r3, #1
    6074:	b2db      	uxtb	r3, r3
    6076:	2240      	movs	r2, #64	; 0x40
    6078:	490c      	ldr	r1, [pc, #48]	; (60ac <_qspi_sync_init+0x58>)
    607a:	4618      	mov	r0, r3
    607c:	4b0c      	ldr	r3, [pc, #48]	; (60b0 <_qspi_sync_init+0x5c>)
    607e:	4798      	blx	r3
	dev->prvt = hw;
    6080:	687b      	ldr	r3, [r7, #4]
    6082:	683a      	ldr	r2, [r7, #0]
    6084:	601a      	str	r2, [r3, #0]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    6086:	687b      	ldr	r3, [r7, #4]
    6088:	681b      	ldr	r3, [r3, #0]
    608a:	2101      	movs	r1, #1
    608c:	4618      	mov	r0, r3
    608e:	4b09      	ldr	r3, [pc, #36]	; (60b4 <_qspi_sync_init+0x60>)
    6090:	4798      	blx	r3

	hri_qspi_write_CTRLB_reg(hw,
    6092:	4909      	ldr	r1, [pc, #36]	; (60b8 <_qspi_sync_init+0x64>)
    6094:	6838      	ldr	r0, [r7, #0]
    6096:	4b09      	ldr	r3, [pc, #36]	; (60bc <_qspi_sync_init+0x68>)
    6098:	4798      	blx	r3
	                         QSPI_CTRLB_MODE_MEMORY | QSPI_CTRLB_CSMODE_LASTXFER | QSPI_CTRLB_DATALEN(0)
	                             | QSPI_CTRLB_DLYBCT(0) | QSPI_CTRLB_DLYCS(CONF_QSPI_DLYCS));

	hri_qspi_write_BAUD_reg(hw,
    609a:	4909      	ldr	r1, [pc, #36]	; (60c0 <_qspi_sync_init+0x6c>)
    609c:	6838      	ldr	r0, [r7, #0]
    609e:	4b09      	ldr	r3, [pc, #36]	; (60c4 <_qspi_sync_init+0x70>)
    60a0:	4798      	blx	r3
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
    60a2:	2300      	movs	r3, #0
}
    60a4:	4618      	mov	r0, r3
    60a6:	3708      	adds	r7, #8
    60a8:	46bd      	mov	sp, r7
    60aa:	bd80      	pop	{r7, pc}
    60ac:	00013cb0 	.word	0x00013cb0
    60b0:	0000405d 	.word	0x0000405d
    60b4:	00005ef1 	.word	0x00005ef1
    60b8:	06000011 	.word	0x06000011
    60bc:	00005f0d 	.word	0x00005f0d
    60c0:	00241300 	.word	0x00241300
    60c4:	00005f29 	.word	0x00005f29

000060c8 <_qspi_sync_enable>:
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
    60c8:	b580      	push	{r7, lr}
    60ca:	b082      	sub	sp, #8
    60cc:	af00      	add	r7, sp, #0
    60ce:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    60d0:	687b      	ldr	r3, [r7, #4]
    60d2:	681b      	ldr	r3, [r3, #0]
    60d4:	2102      	movs	r1, #2
    60d6:	4618      	mov	r0, r3
    60d8:	4b03      	ldr	r3, [pc, #12]	; (60e8 <_qspi_sync_enable+0x20>)
    60da:	4798      	blx	r3
	return ERR_NONE;
    60dc:	2300      	movs	r3, #0
}
    60de:	4618      	mov	r0, r3
    60e0:	3708      	adds	r7, #8
    60e2:	46bd      	mov	sp, r7
    60e4:	bd80      	pop	{r7, pc}
    60e6:	bf00      	nop
    60e8:	00005ef1 	.word	0x00005ef1

000060ec <_qspi_sync_disable>:

int32_t _qspi_sync_disable(struct _qspi_sync_dev *dev)
{
    60ec:	b580      	push	{r7, lr}
    60ee:	b082      	sub	sp, #8
    60f0:	af00      	add	r7, sp, #0
    60f2:	6078      	str	r0, [r7, #4]
	hri_qspi_write_CTRLA_reg(dev->prvt, 0);
    60f4:	687b      	ldr	r3, [r7, #4]
    60f6:	681b      	ldr	r3, [r3, #0]
    60f8:	2100      	movs	r1, #0
    60fa:	4618      	mov	r0, r3
    60fc:	4b03      	ldr	r3, [pc, #12]	; (610c <_qspi_sync_disable+0x20>)
    60fe:	4798      	blx	r3
	return ERR_NONE;
    6100:	2300      	movs	r3, #0
}
    6102:	4618      	mov	r0, r3
    6104:	3708      	adds	r7, #8
    6106:	46bd      	mov	sp, r7
    6108:	bd80      	pop	{r7, pc}
    610a:	bf00      	nop
    610c:	00005ef1 	.word	0x00005ef1

00006110 <_qspi_sync_command_set_ifr>:

/**
 * \brief Set instruction frame param.
 */
static void _qspi_sync_command_set_ifr(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    6110:	b580      	push	{r7, lr}
    6112:	b084      	sub	sp, #16
    6114:	af00      	add	r7, sp, #0
    6116:	6078      	str	r0, [r7, #4]
    6118:	6039      	str	r1, [r7, #0]
	void *hw = dev->prvt;
    611a:	687b      	ldr	r3, [r7, #4]
    611c:	681b      	ldr	r3, [r3, #0]
    611e:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en) {
    6120:	683b      	ldr	r3, [r7, #0]
    6122:	781b      	ldrb	r3, [r3, #0]
    6124:	f003 0320 	and.w	r3, r3, #32
    6128:	b2db      	uxtb	r3, r3
    612a:	2b00      	cmp	r3, #0
    612c:	d005      	beq.n	613a <_qspi_sync_command_set_ifr+0x2a>
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    612e:	683b      	ldr	r3, [r7, #0]
    6130:	689b      	ldr	r3, [r3, #8]
    6132:	4619      	mov	r1, r3
    6134:	68f8      	ldr	r0, [r7, #12]
    6136:	4b13      	ldr	r3, [pc, #76]	; (6184 <_qspi_sync_command_set_ifr+0x74>)
    6138:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.inst_en) {
    613a:	683b      	ldr	r3, [r7, #0]
    613c:	781b      	ldrb	r3, [r3, #0]
    613e:	f003 0310 	and.w	r3, r3, #16
    6142:	b2db      	uxtb	r3, r3
    6144:	2b00      	cmp	r3, #0
    6146:	d005      	beq.n	6154 <_qspi_sync_command_set_ifr+0x44>
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    6148:	683b      	ldr	r3, [r7, #0]
    614a:	791b      	ldrb	r3, [r3, #4]
    614c:	4619      	mov	r1, r3
    614e:	68f8      	ldr	r0, [r7, #12]
    6150:	4b0d      	ldr	r3, [pc, #52]	; (6188 <_qspi_sync_command_set_ifr+0x78>)
    6152:	4798      	blx	r3
	}

	if (cmd->inst_frame.bits.opt_en) {
    6154:	683b      	ldr	r3, [r7, #0]
    6156:	781b      	ldrb	r3, [r3, #0]
    6158:	f003 0340 	and.w	r3, r3, #64	; 0x40
    615c:	b2db      	uxtb	r3, r3
    615e:	2b00      	cmp	r3, #0
    6160:	d005      	beq.n	616e <_qspi_sync_command_set_ifr+0x5e>
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    6162:	683b      	ldr	r3, [r7, #0]
    6164:	795b      	ldrb	r3, [r3, #5]
    6166:	4619      	mov	r1, r3
    6168:	68f8      	ldr	r0, [r7, #12]
    616a:	4b08      	ldr	r3, [pc, #32]	; (618c <_qspi_sync_command_set_ifr+0x7c>)
    616c:	4798      	blx	r3
	}

	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    616e:	683b      	ldr	r3, [r7, #0]
    6170:	681b      	ldr	r3, [r3, #0]
    6172:	4619      	mov	r1, r3
    6174:	68f8      	ldr	r0, [r7, #12]
    6176:	4b06      	ldr	r3, [pc, #24]	; (6190 <_qspi_sync_command_set_ifr+0x80>)
    6178:	4798      	blx	r3
}
    617a:	bf00      	nop
    617c:	3710      	adds	r7, #16
    617e:	46bd      	mov	sp, r7
    6180:	bd80      	pop	{r7, pc}
    6182:	bf00      	nop
    6184:	00005f45 	.word	0x00005f45
    6188:	00005f61 	.word	0x00005f61
    618c:	00005f95 	.word	0x00005f95
    6190:	00005fcd 	.word	0x00005fcd

00006194 <_qspi_sync_run_transfer>:

/**
 * \brief Access QSPI mapping memory via AHB.
 */
static void _qspi_sync_run_transfer(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    6194:	b580      	push	{r7, lr}
    6196:	b084      	sub	sp, #16
    6198:	af00      	add	r7, sp, #0
    619a:	6078      	str	r0, [r7, #4]
    619c:	6039      	str	r1, [r7, #0]
	void *   hw       = dev->prvt;
    619e:	687b      	ldr	r3, [r7, #4]
    61a0:	681b      	ldr	r3, [r3, #0]
    61a2:	60bb      	str	r3, [r7, #8]
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    61a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    61a8:	60fb      	str	r3, [r7, #12]
	if (cmd->inst_frame.bits.addr_en)
    61aa:	683b      	ldr	r3, [r7, #0]
    61ac:	781b      	ldrb	r3, [r3, #0]
    61ae:	f003 0320 	and.w	r3, r3, #32
    61b2:	b2db      	uxtb	r3, r3
    61b4:	2b00      	cmp	r3, #0
    61b6:	d004      	beq.n	61c2 <_qspi_sync_run_transfer+0x2e>
		qspi_mem += cmd->address;
    61b8:	683b      	ldr	r3, [r7, #0]
    61ba:	689b      	ldr	r3, [r3, #8]
    61bc:	68fa      	ldr	r2, [r7, #12]
    61be:	4413      	add	r3, r2
    61c0:	60fb      	str	r3, [r7, #12]

	/* To synchronize system bus accesses */
	hri_qspi_read_INSTRFRAME_reg(hw);
    61c2:	68b8      	ldr	r0, [r7, #8]
    61c4:	4b18      	ldr	r3, [pc, #96]	; (6228 <_qspi_sync_run_transfer+0x94>)
    61c6:	4798      	blx	r3

	ASSERT(cmd->tx_buf || cmd->rx_buf);
    61c8:	683b      	ldr	r3, [r7, #0]
    61ca:	691b      	ldr	r3, [r3, #16]
    61cc:	2b00      	cmp	r3, #0
    61ce:	d103      	bne.n	61d8 <_qspi_sync_run_transfer+0x44>
    61d0:	683b      	ldr	r3, [r7, #0]
    61d2:	695b      	ldr	r3, [r3, #20]
    61d4:	2b00      	cmp	r3, #0
    61d6:	d001      	beq.n	61dc <_qspi_sync_run_transfer+0x48>
    61d8:	2301      	movs	r3, #1
    61da:	e000      	b.n	61de <_qspi_sync_run_transfer+0x4a>
    61dc:	2300      	movs	r3, #0
    61de:	f003 0301 	and.w	r3, r3, #1
    61e2:	b2db      	uxtb	r3, r3
    61e4:	2282      	movs	r2, #130	; 0x82
    61e6:	4911      	ldr	r1, [pc, #68]	; (622c <_qspi_sync_run_transfer+0x98>)
    61e8:	4618      	mov	r0, r3
    61ea:	4b11      	ldr	r3, [pc, #68]	; (6230 <_qspi_sync_run_transfer+0x9c>)
    61ec:	4798      	blx	r3

	if (cmd->tx_buf) {
    61ee:	683b      	ldr	r3, [r7, #0]
    61f0:	691b      	ldr	r3, [r3, #16]
    61f2:	2b00      	cmp	r3, #0
    61f4:	d008      	beq.n	6208 <_qspi_sync_run_transfer+0x74>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    61f6:	683b      	ldr	r3, [r7, #0]
    61f8:	6919      	ldr	r1, [r3, #16]
    61fa:	683b      	ldr	r3, [r7, #0]
    61fc:	68db      	ldr	r3, [r3, #12]
    61fe:	461a      	mov	r2, r3
    6200:	68f8      	ldr	r0, [r7, #12]
    6202:	4b0c      	ldr	r3, [pc, #48]	; (6234 <_qspi_sync_run_transfer+0xa0>)
    6204:	4798      	blx	r3
    6206:	e007      	b.n	6218 <_qspi_sync_run_transfer+0x84>
	} else {
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    6208:	683b      	ldr	r3, [r7, #0]
    620a:	6958      	ldr	r0, [r3, #20]
    620c:	683b      	ldr	r3, [r7, #0]
    620e:	68db      	ldr	r3, [r3, #12]
    6210:	461a      	mov	r2, r3
    6212:	68f9      	ldr	r1, [r7, #12]
    6214:	4b07      	ldr	r3, [pc, #28]	; (6234 <_qspi_sync_run_transfer+0xa0>)
    6216:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
    6218:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    621c:	f3bf 8f6f 	isb	sy
	}

	__DSB();
	__ISB();
}
    6220:	bf00      	nop
    6222:	3710      	adds	r7, #16
    6224:	46bd      	mov	sp, r7
    6226:	bd80      	pop	{r7, pc}
    6228:	00005fe9 	.word	0x00005fe9
    622c:	00013cb0 	.word	0x00013cb0
    6230:	0000405d 	.word	0x0000405d
    6234:	00006001 	.word	0x00006001

00006238 <_qspi_sync_serial_run_command>:

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    6238:	b580      	push	{r7, lr}
    623a:	b082      	sub	sp, #8
    623c:	af00      	add	r7, sp, #0
    623e:	6078      	str	r0, [r7, #4]
    6240:	6039      	str	r1, [r7, #0]
	_qspi_sync_command_set_ifr(dev, cmd);
    6242:	6839      	ldr	r1, [r7, #0]
    6244:	6878      	ldr	r0, [r7, #4]
    6246:	4b14      	ldr	r3, [pc, #80]	; (6298 <_qspi_sync_serial_run_command+0x60>)
    6248:	4798      	blx	r3

	if (cmd->inst_frame.bits.data_en) {
    624a:	683b      	ldr	r3, [r7, #0]
    624c:	781b      	ldrb	r3, [r3, #0]
    624e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    6252:	b2db      	uxtb	r3, r3
    6254:	2b00      	cmp	r3, #0
    6256:	d003      	beq.n	6260 <_qspi_sync_serial_run_command+0x28>
		_qspi_sync_run_transfer(dev, cmd);
    6258:	6839      	ldr	r1, [r7, #0]
    625a:	6878      	ldr	r0, [r7, #4]
    625c:	4b0f      	ldr	r3, [pc, #60]	; (629c <_qspi_sync_serial_run_command+0x64>)
    625e:	4798      	blx	r3
	}

	_qspi_end_transfer(dev->prvt);
    6260:	687b      	ldr	r3, [r7, #4]
    6262:	681b      	ldr	r3, [r3, #0]
    6264:	4618      	mov	r0, r3
    6266:	4b0e      	ldr	r3, [pc, #56]	; (62a0 <_qspi_sync_serial_run_command+0x68>)
    6268:	4798      	blx	r3

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    626a:	bf00      	nop
    626c:	687b      	ldr	r3, [r7, #4]
    626e:	681b      	ldr	r3, [r3, #0]
    6270:	4618      	mov	r0, r3
    6272:	4b0c      	ldr	r3, [pc, #48]	; (62a4 <_qspi_sync_serial_run_command+0x6c>)
    6274:	4798      	blx	r3
    6276:	4603      	mov	r3, r0
    6278:	f083 0301 	eor.w	r3, r3, #1
    627c:	b2db      	uxtb	r3, r3
    627e:	2b00      	cmp	r3, #0
    6280:	d1f4      	bne.n	626c <_qspi_sync_serial_run_command+0x34>
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
    6282:	687b      	ldr	r3, [r7, #4]
    6284:	681b      	ldr	r3, [r3, #0]
    6286:	4618      	mov	r0, r3
    6288:	4b07      	ldr	r3, [pc, #28]	; (62a8 <_qspi_sync_serial_run_command+0x70>)
    628a:	4798      	blx	r3
	return ERR_NONE;
    628c:	2300      	movs	r3, #0
}
    628e:	4618      	mov	r0, r3
    6290:	3708      	adds	r7, #8
    6292:	46bd      	mov	sp, r7
    6294:	bd80      	pop	{r7, pc}
    6296:	bf00      	nop
    6298:	00006111 	.word	0x00006111
    629c:	00006195 	.word	0x00006195
    62a0:	00006035 	.word	0x00006035
    62a4:	00005ead 	.word	0x00005ead
    62a8:	00005ed5 	.word	0x00005ed5

000062ac <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    62ac:	b480      	push	{r7}
    62ae:	b083      	sub	sp, #12
    62b0:	af00      	add	r7, sp, #0
    62b2:	6078      	str	r0, [r7, #4]
    62b4:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    62b6:	bf00      	nop
    62b8:	687b      	ldr	r3, [r7, #4]
    62ba:	691a      	ldr	r2, [r3, #16]
    62bc:	683b      	ldr	r3, [r7, #0]
    62be:	4013      	ands	r3, r2
    62c0:	2b00      	cmp	r3, #0
    62c2:	d1f9      	bne.n	62b8 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    62c4:	bf00      	nop
    62c6:	370c      	adds	r7, #12
    62c8:	46bd      	mov	sp, r7
    62ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    62ce:	4770      	bx	lr

000062d0 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    62d0:	b480      	push	{r7}
    62d2:	b083      	sub	sp, #12
    62d4:	af00      	add	r7, sp, #0
    62d6:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    62d8:	687b      	ldr	r3, [r7, #4]
    62da:	f44f 7280 	mov.w	r2, #256	; 0x100
    62de:	819a      	strh	r2, [r3, #12]
}
    62e0:	bf00      	nop
    62e2:	370c      	adds	r7, #12
    62e4:	46bd      	mov	sp, r7
    62e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    62ea:	4770      	bx	lr

000062ec <hri_rtcmode0_clear_interrupt_TAMPER_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_TAMPER) >> RTC_MODE0_INTFLAG_TAMPER_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_TAMPER_bit(const void *const hw)
{
    62ec:	b480      	push	{r7}
    62ee:	b083      	sub	sp, #12
    62f0:	af00      	add	r7, sp, #0
    62f2:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_TAMPER;
    62f4:	687b      	ldr	r3, [r7, #4]
    62f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    62fa:	819a      	strh	r2, [r3, #12]
}
    62fc:	bf00      	nop
    62fe:	370c      	adds	r7, #12
    6300:	46bd      	mov	sp, r7
    6302:	f85d 7b04 	ldr.w	r7, [sp], #4
    6306:	4770      	bx	lr

00006308 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    6308:	b480      	push	{r7}
    630a:	b083      	sub	sp, #12
    630c:	af00      	add	r7, sp, #0
    630e:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    6310:	687b      	ldr	r3, [r7, #4]
    6312:	899b      	ldrh	r3, [r3, #12]
    6314:	b29b      	uxth	r3, r3
}
    6316:	4618      	mov	r0, r3
    6318:	370c      	adds	r7, #12
    631a:	46bd      	mov	sp, r7
    631c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6320:	4770      	bx	lr

00006322 <hri_rtcmode0_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intenset_reg_t hri_rtcmode0_read_INTEN_reg(const void *const hw)
{
    6322:	b480      	push	{r7}
    6324:	b083      	sub	sp, #12
    6326:	af00      	add	r7, sp, #0
    6328:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTENSET.reg;
    632a:	687b      	ldr	r3, [r7, #4]
    632c:	895b      	ldrh	r3, [r3, #10]
    632e:	b29b      	uxth	r3, r3
}
    6330:	4618      	mov	r0, r3
    6332:	370c      	adds	r7, #12
    6334:	46bd      	mov	sp, r7
    6336:	f85d 7b04 	ldr.w	r7, [sp], #4
    633a:	4770      	bx	lr

0000633c <hri_rtcmode0_set_CTRLA_SWRST_bit>:
	hri_rtcmode2_wait_for_sync(hw, RTC_MODE2_SYNCBUSY_MASK_);
	return ((Rtc *)hw)->MODE2.TIMESTAMP.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    633c:	b580      	push	{r7, lr}
    633e:	b082      	sub	sp, #8
    6340:	af00      	add	r7, sp, #0
    6342:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    6344:	687b      	ldr	r3, [r7, #4]
    6346:	881b      	ldrh	r3, [r3, #0]
    6348:	b29b      	uxth	r3, r3
    634a:	f043 0301 	orr.w	r3, r3, #1
    634e:	b29a      	uxth	r2, r3
    6350:	687b      	ldr	r3, [r7, #4]
    6352:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    6354:	2101      	movs	r1, #1
    6356:	6878      	ldr	r0, [r7, #4]
    6358:	4b02      	ldr	r3, [pc, #8]	; (6364 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x28>)
    635a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    635c:	bf00      	nop
    635e:	3708      	adds	r7, #8
    6360:	46bd      	mov	sp, r7
    6362:	bd80      	pop	{r7, pc}
    6364:	000062ad 	.word	0x000062ad

00006368 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    6368:	b580      	push	{r7, lr}
    636a:	b084      	sub	sp, #16
    636c:	af00      	add	r7, sp, #0
    636e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    6370:	f248 0103 	movw	r1, #32771	; 0x8003
    6374:	6878      	ldr	r0, [r7, #4]
    6376:	4b0a      	ldr	r3, [pc, #40]	; (63a0 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x38>)
    6378:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    637a:	687b      	ldr	r3, [r7, #4]
    637c:	881b      	ldrh	r3, [r3, #0]
    637e:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    6380:	89fb      	ldrh	r3, [r7, #14]
    6382:	085b      	lsrs	r3, r3, #1
    6384:	b29b      	uxth	r3, r3
    6386:	f003 0301 	and.w	r3, r3, #1
    638a:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    638c:	89fb      	ldrh	r3, [r7, #14]
    638e:	2b00      	cmp	r3, #0
    6390:	bf14      	ite	ne
    6392:	2301      	movne	r3, #1
    6394:	2300      	moveq	r3, #0
    6396:	b2db      	uxtb	r3, r3
}
    6398:	4618      	mov	r0, r3
    639a:	3710      	adds	r7, #16
    639c:	46bd      	mov	sp, r7
    639e:	bd80      	pop	{r7, pc}
    63a0:	000062ad 	.word	0x000062ad

000063a4 <hri_rtcmode0_clear_CTRLA_ENABLE_bit>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    63a4:	b580      	push	{r7, lr}
    63a6:	b082      	sub	sp, #8
    63a8:	af00      	add	r7, sp, #0
    63aa:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    63ac:	687b      	ldr	r3, [r7, #4]
    63ae:	881b      	ldrh	r3, [r3, #0]
    63b0:	b29b      	uxth	r3, r3
    63b2:	f023 0302 	bic.w	r3, r3, #2
    63b6:	b29a      	uxth	r2, r3
    63b8:	687b      	ldr	r3, [r7, #4]
    63ba:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    63bc:	f248 0103 	movw	r1, #32771	; 0x8003
    63c0:	6878      	ldr	r0, [r7, #4]
    63c2:	4b03      	ldr	r3, [pc, #12]	; (63d0 <hri_rtcmode0_clear_CTRLA_ENABLE_bit+0x2c>)
    63c4:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    63c6:	bf00      	nop
    63c8:	3708      	adds	r7, #8
    63ca:	46bd      	mov	sp, r7
    63cc:	bd80      	pop	{r7, pc}
    63ce:	bf00      	nop
    63d0:	000062ad 	.word	0x000062ad

000063d4 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    63d4:	b580      	push	{r7, lr}
    63d6:	b082      	sub	sp, #8
    63d8:	af00      	add	r7, sp, #0
    63da:	6078      	str	r0, [r7, #4]
    63dc:	460b      	mov	r3, r1
    63de:	807b      	strh	r3, [r7, #2]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    63e0:	687b      	ldr	r3, [r7, #4]
    63e2:	887a      	ldrh	r2, [r7, #2]
    63e4:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    63e6:	f248 0103 	movw	r1, #32771	; 0x8003
    63ea:	6878      	ldr	r0, [r7, #4]
    63ec:	4b02      	ldr	r3, [pc, #8]	; (63f8 <hri_rtcmode0_write_CTRLA_reg+0x24>)
    63ee:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    63f0:	bf00      	nop
    63f2:	3708      	adds	r7, #8
    63f4:	46bd      	mov	sp, r7
    63f6:	bd80      	pop	{r7, pc}
    63f8:	000062ad 	.word	0x000062ad

000063fc <hri_rtc_write_TAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtc_write_TAMPCTRL_reg(const void *const hw, hri_rtc_tampctrl_reg_t data)
{
    63fc:	b480      	push	{r7}
    63fe:	b083      	sub	sp, #12
    6400:	af00      	add	r7, sp, #0
    6402:	6078      	str	r0, [r7, #4]
    6404:	6039      	str	r1, [r7, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.TAMPCTRL.reg = data;
    6406:	687b      	ldr	r3, [r7, #4]
    6408:	683a      	ldr	r2, [r7, #0]
    640a:	661a      	str	r2, [r3, #96]	; 0x60
	RTC_CRITICAL_SECTION_LEAVE();
}
    640c:	bf00      	nop
    640e:	370c      	adds	r7, #12
    6410:	46bd      	mov	sp, r7
    6412:	f85d 7b04 	ldr.w	r7, [sp], #4
    6416:	4770      	bx	lr

00006418 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    6418:	b580      	push	{r7, lr}
    641a:	b082      	sub	sp, #8
    641c:	af00      	add	r7, sp, #0
    641e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    6420:	687b      	ldr	r3, [r7, #4]
    6422:	2b00      	cmp	r3, #0
    6424:	d005      	beq.n	6432 <_calendar_init+0x1a>
    6426:	687b      	ldr	r3, [r7, #4]
    6428:	681b      	ldr	r3, [r3, #0]
    642a:	2b00      	cmp	r3, #0
    642c:	d001      	beq.n	6432 <_calendar_init+0x1a>
    642e:	2301      	movs	r3, #1
    6430:	e000      	b.n	6434 <_calendar_init+0x1c>
    6432:	2300      	movs	r3, #0
    6434:	f003 0301 	and.w	r3, r3, #1
    6438:	b2db      	uxtb	r3, r3
    643a:	222f      	movs	r2, #47	; 0x2f
    643c:	491b      	ldr	r1, [pc, #108]	; (64ac <_calendar_init+0x94>)
    643e:	4618      	mov	r0, r3
    6440:	4b1b      	ldr	r3, [pc, #108]	; (64b0 <_calendar_init+0x98>)
    6442:	4798      	blx	r3

	_rtc_dev = dev;
    6444:	4a1b      	ldr	r2, [pc, #108]	; (64b4 <_calendar_init+0x9c>)
    6446:	687b      	ldr	r3, [r7, #4]
    6448:	6013      	str	r3, [r2, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    644a:	687b      	ldr	r3, [r7, #4]
    644c:	681b      	ldr	r3, [r3, #0]
    644e:	4618      	mov	r0, r3
    6450:	4b19      	ldr	r3, [pc, #100]	; (64b8 <_calendar_init+0xa0>)
    6452:	4798      	blx	r3
    6454:	4603      	mov	r3, r0
    6456:	2b00      	cmp	r3, #0
    6458:	d00a      	beq.n	6470 <_calendar_init+0x58>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    645a:	687b      	ldr	r3, [r7, #4]
    645c:	681b      	ldr	r3, [r3, #0]
    645e:	4618      	mov	r0, r3
    6460:	4b16      	ldr	r3, [pc, #88]	; (64bc <_calendar_init+0xa4>)
    6462:	4798      	blx	r3
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    6464:	687b      	ldr	r3, [r7, #4]
    6466:	681b      	ldr	r3, [r3, #0]
    6468:	2102      	movs	r1, #2
    646a:	4618      	mov	r0, r3
    646c:	4b14      	ldr	r3, [pc, #80]	; (64c0 <_calendar_init+0xa8>)
    646e:	4798      	blx	r3
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    6470:	687b      	ldr	r3, [r7, #4]
    6472:	681b      	ldr	r3, [r3, #0]
    6474:	4618      	mov	r0, r3
    6476:	4b13      	ldr	r3, [pc, #76]	; (64c4 <_calendar_init+0xac>)
    6478:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    647a:	687b      	ldr	r3, [r7, #4]
    647c:	681b      	ldr	r3, [r3, #0]
    647e:	2101      	movs	r1, #1
    6480:	4618      	mov	r0, r3
    6482:	4b0f      	ldr	r3, [pc, #60]	; (64c0 <_calendar_init+0xa8>)
    6484:	4798      	blx	r3
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_COMPE1 << RTC_MODE0_EVCTRL_CMPEO1_Pos)
	        | (CONF_RTC_TAMPEREO << RTC_MODE0_EVCTRL_TAMPEREO_Pos)
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    6486:	687b      	ldr	r3, [r7, #4]
    6488:	681b      	ldr	r3, [r3, #0]
    648a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
    648e:	4618      	mov	r0, r3
    6490:	4b0d      	ldr	r3, [pc, #52]	; (64c8 <_calendar_init+0xb0>)
    6492:	4798      	blx	r3

	hri_rtc_write_TAMPCTRL_reg(
	    dev->hw,
    6494:	687b      	ldr	r3, [r7, #4]
    6496:	681b      	ldr	r3, [r3, #0]
	hri_rtc_write_TAMPCTRL_reg(
    6498:	2100      	movs	r1, #0
    649a:	4618      	mov	r0, r3
    649c:	4b0b      	ldr	r3, [pc, #44]	; (64cc <_calendar_init+0xb4>)
    649e:	4798      	blx	r3
	if ((CONF_RTC_TAMPER_INACT_0 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_1 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_2 == TAMPER_MODE_ACTL) | (CONF_RTC_TAMPER_INACT_3 == TAMPER_MODE_ACTL)
	    | (CONF_RTC_TAMPER_INACT_4 == TAMPER_MODE_ACTL)) {
		hri_rtcmode0_set_CTRLB_RTCOUT_bit(dev->hw);
	}
	return ERR_NONE;
    64a0:	2300      	movs	r3, #0
}
    64a2:	4618      	mov	r0, r3
    64a4:	3708      	adds	r7, #8
    64a6:	46bd      	mov	sp, r7
    64a8:	bd80      	pop	{r7, pc}
    64aa:	bf00      	nop
    64ac:	00013cc8 	.word	0x00013cc8
    64b0:	0000405d 	.word	0x0000405d
    64b4:	20000cc8 	.word	0x20000cc8
    64b8:	00006369 	.word	0x00006369
    64bc:	000063a5 	.word	0x000063a5
    64c0:	000062ad 	.word	0x000062ad
    64c4:	0000633d 	.word	0x0000633d
    64c8:	000063d5 	.word	0x000063d5
    64cc:	000063fd 	.word	0x000063fd

000064d0 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    64d0:	b580      	push	{r7, lr}
    64d2:	b084      	sub	sp, #16
    64d4:	af00      	add	r7, sp, #0
    64d6:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status  = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    64d8:	687b      	ldr	r3, [r7, #4]
    64da:	681b      	ldr	r3, [r3, #0]
    64dc:	4618      	mov	r0, r3
    64de:	4b19      	ldr	r3, [pc, #100]	; (6544 <_rtc_interrupt_handler+0x74>)
    64e0:	4798      	blx	r3
    64e2:	4603      	mov	r3, r0
    64e4:	81fb      	strh	r3, [r7, #14]
	uint16_t interrupt_enabled = hri_rtcmode0_read_INTEN_reg(dev->hw);
    64e6:	687b      	ldr	r3, [r7, #4]
    64e8:	681b      	ldr	r3, [r3, #0]
    64ea:	4618      	mov	r0, r3
    64ec:	4b16      	ldr	r3, [pc, #88]	; (6548 <_rtc_interrupt_handler+0x78>)
    64ee:	4798      	blx	r3
    64f0:	4603      	mov	r3, r0
    64f2:	81bb      	strh	r3, [r7, #12]

	if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_ALARM0) {
    64f4:	89fa      	ldrh	r2, [r7, #14]
    64f6:	89bb      	ldrh	r3, [r7, #12]
    64f8:	4013      	ands	r3, r2
    64fa:	b29b      	uxth	r3, r3
    64fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
    6500:	2b00      	cmp	r3, #0
    6502:	d009      	beq.n	6518 <_rtc_interrupt_handler+0x48>
		dev->callback(dev);
    6504:	687b      	ldr	r3, [r7, #4]
    6506:	685b      	ldr	r3, [r3, #4]
    6508:	6878      	ldr	r0, [r7, #4]
    650a:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    650c:	687b      	ldr	r3, [r7, #4]
    650e:	681b      	ldr	r3, [r3, #0]
    6510:	4618      	mov	r0, r3
    6512:	4b0e      	ldr	r3, [pc, #56]	; (654c <_rtc_interrupt_handler+0x7c>)
    6514:	4798      	blx	r3
		dev->callback_tamper(dev);

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
	}
}
    6516:	e010      	b.n	653a <_rtc_interrupt_handler+0x6a>
	} else if ((interrupt_status & interrupt_enabled) & RTC_MODE2_INTFLAG_TAMPER) {
    6518:	89fa      	ldrh	r2, [r7, #14]
    651a:	89bb      	ldrh	r3, [r7, #12]
    651c:	4013      	ands	r3, r2
    651e:	b29b      	uxth	r3, r3
    6520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6524:	2b00      	cmp	r3, #0
    6526:	d008      	beq.n	653a <_rtc_interrupt_handler+0x6a>
		dev->callback_tamper(dev);
    6528:	687b      	ldr	r3, [r7, #4]
    652a:	689b      	ldr	r3, [r3, #8]
    652c:	6878      	ldr	r0, [r7, #4]
    652e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_TAMPER_bit(dev->hw);
    6530:	687b      	ldr	r3, [r7, #4]
    6532:	681b      	ldr	r3, [r3, #0]
    6534:	4618      	mov	r0, r3
    6536:	4b06      	ldr	r3, [pc, #24]	; (6550 <_rtc_interrupt_handler+0x80>)
    6538:	4798      	blx	r3
}
    653a:	bf00      	nop
    653c:	3710      	adds	r7, #16
    653e:	46bd      	mov	sp, r7
    6540:	bd80      	pop	{r7, pc}
    6542:	bf00      	nop
    6544:	00006309 	.word	0x00006309
    6548:	00006323 	.word	0x00006323
    654c:	000062d1 	.word	0x000062d1
    6550:	000062ed 	.word	0x000062ed

00006554 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    6554:	b580      	push	{r7, lr}
    6556:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    6558:	4b03      	ldr	r3, [pc, #12]	; (6568 <RTC_Handler+0x14>)
    655a:	681b      	ldr	r3, [r3, #0]
    655c:	4618      	mov	r0, r3
    655e:	4b03      	ldr	r3, [pc, #12]	; (656c <RTC_Handler+0x18>)
    6560:	4798      	blx	r3
}
    6562:	bf00      	nop
    6564:	bd80      	pop	{r7, pc}
    6566:	bf00      	nop
    6568:	20000cc8 	.word	0x20000cc8
    656c:	000064d1 	.word	0x000064d1

00006570 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6570:	b480      	push	{r7}
    6572:	b083      	sub	sp, #12
    6574:	af00      	add	r7, sp, #0
    6576:	6078      	str	r0, [r7, #4]
    6578:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    657a:	bf00      	nop
    657c:	687b      	ldr	r3, [r7, #4]
    657e:	69da      	ldr	r2, [r3, #28]
    6580:	683b      	ldr	r3, [r7, #0]
    6582:	4013      	ands	r3, r2
    6584:	2b00      	cmp	r3, #0
    6586:	d1f9      	bne.n	657c <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    6588:	bf00      	nop
    658a:	370c      	adds	r7, #12
    658c:	46bd      	mov	sp, r7
    658e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6592:	4770      	bx	lr

00006594 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    6594:	b480      	push	{r7}
    6596:	b083      	sub	sp, #12
    6598:	af00      	add	r7, sp, #0
    659a:	6078      	str	r0, [r7, #4]
    659c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    659e:	687b      	ldr	r3, [r7, #4]
    65a0:	69da      	ldr	r2, [r3, #28]
    65a2:	683b      	ldr	r3, [r7, #0]
    65a4:	4013      	ands	r3, r2
    65a6:	2b00      	cmp	r3, #0
    65a8:	bf14      	ite	ne
    65aa:	2301      	movne	r3, #1
    65ac:	2300      	moveq	r3, #0
    65ae:	b2db      	uxtb	r3, r3
}
    65b0:	4618      	mov	r0, r3
    65b2:	370c      	adds	r7, #12
    65b4:	46bd      	mov	sp, r7
    65b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    65ba:	4770      	bx	lr

000065bc <hri_sercomspi_wait_for_sync>:
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    65bc:	b480      	push	{r7}
    65be:	b083      	sub	sp, #12
    65c0:	af00      	add	r7, sp, #0
    65c2:	6078      	str	r0, [r7, #4]
    65c4:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    65c6:	bf00      	nop
    65c8:	687b      	ldr	r3, [r7, #4]
    65ca:	69da      	ldr	r2, [r3, #28]
    65cc:	683b      	ldr	r3, [r7, #0]
    65ce:	4013      	ands	r3, r2
    65d0:	2b00      	cmp	r3, #0
    65d2:	d1f9      	bne.n	65c8 <hri_sercomspi_wait_for_sync+0xc>
	};
}
    65d4:	bf00      	nop
    65d6:	370c      	adds	r7, #12
    65d8:	46bd      	mov	sp, r7
    65da:	f85d 7b04 	ldr.w	r7, [sp], #4
    65de:	4770      	bx	lr

000065e0 <hri_sercomspi_is_syncing>:

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
    65e0:	b480      	push	{r7}
    65e2:	b083      	sub	sp, #12
    65e4:	af00      	add	r7, sp, #0
    65e6:	6078      	str	r0, [r7, #4]
    65e8:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    65ea:	687b      	ldr	r3, [r7, #4]
    65ec:	69da      	ldr	r2, [r3, #28]
    65ee:	683b      	ldr	r3, [r7, #0]
    65f0:	4013      	ands	r3, r2
    65f2:	2b00      	cmp	r3, #0
    65f4:	bf14      	ite	ne
    65f6:	2301      	movne	r3, #1
    65f8:	2300      	moveq	r3, #0
    65fa:	b2db      	uxtb	r3, r3
}
    65fc:	4618      	mov	r0, r3
    65fe:	370c      	adds	r7, #12
    6600:	46bd      	mov	sp, r7
    6602:	f85d 7b04 	ldr.w	r7, [sp], #4
    6606:	4770      	bx	lr

00006608 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    6608:	b480      	push	{r7}
    660a:	b083      	sub	sp, #12
    660c:	af00      	add	r7, sp, #0
    660e:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    6610:	687b      	ldr	r3, [r7, #4]
    6612:	2201      	movs	r2, #1
    6614:	761a      	strb	r2, [r3, #24]
}
    6616:	bf00      	nop
    6618:	370c      	adds	r7, #12
    661a:	46bd      	mov	sp, r7
    661c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6620:	4770      	bx	lr

00006622 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    6622:	b480      	push	{r7}
    6624:	b083      	sub	sp, #12
    6626:	af00      	add	r7, sp, #0
    6628:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    662a:	687b      	ldr	r3, [r7, #4]
    662c:	2202      	movs	r2, #2
    662e:	761a      	strb	r2, [r3, #24]
}
    6630:	bf00      	nop
    6632:	370c      	adds	r7, #12
    6634:	46bd      	mov	sp, r7
    6636:	f85d 7b04 	ldr.w	r7, [sp], #4
    663a:	4770      	bx	lr

0000663c <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    663c:	b480      	push	{r7}
    663e:	b083      	sub	sp, #12
    6640:	af00      	add	r7, sp, #0
    6642:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    6644:	687b      	ldr	r3, [r7, #4]
    6646:	7e1b      	ldrb	r3, [r3, #24]
    6648:	b2db      	uxtb	r3, r3
}
    664a:	4618      	mov	r0, r3
    664c:	370c      	adds	r7, #12
    664e:	46bd      	mov	sp, r7
    6650:	f85d 7b04 	ldr.w	r7, [sp], #4
    6654:	4770      	bx	lr

00006656 <hri_sercomspi_get_INTFLAG_reg>:
	((Sercom *)hw)->SPI.INTFLAG.reg = SERCOM_SPI_INTFLAG_ERROR;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_get_INTFLAG_reg(const void *const           hw,
                                                                        hri_sercomspi_intflag_reg_t mask)
{
    6656:	b480      	push	{r7}
    6658:	b085      	sub	sp, #20
    665a:	af00      	add	r7, sp, #0
    665c:	6078      	str	r0, [r7, #4]
    665e:	460b      	mov	r3, r1
    6660:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    6662:	687b      	ldr	r3, [r7, #4]
    6664:	7e1b      	ldrb	r3, [r3, #24]
    6666:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    6668:	7bfa      	ldrb	r2, [r7, #15]
    666a:	78fb      	ldrb	r3, [r7, #3]
    666c:	4013      	ands	r3, r2
    666e:	73fb      	strb	r3, [r7, #15]
	return tmp;
    6670:	7bfb      	ldrb	r3, [r7, #15]
}
    6672:	4618      	mov	r0, r3
    6674:	3714      	adds	r7, #20
    6676:	46bd      	mov	sp, r7
    6678:	f85d 7b04 	ldr.w	r7, [sp], #4
    667c:	4770      	bx	lr

0000667e <hri_sercomspi_read_INTFLAG_reg>:

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
    667e:	b480      	push	{r7}
    6680:	b083      	sub	sp, #12
    6682:	af00      	add	r7, sp, #0
    6684:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    6686:	687b      	ldr	r3, [r7, #4]
    6688:	7e1b      	ldrb	r3, [r3, #24]
    668a:	b2db      	uxtb	r3, r3
}
    668c:	4618      	mov	r0, r3
    668e:	370c      	adds	r7, #12
    6690:	46bd      	mov	sp, r7
    6692:	f85d 7b04 	ldr.w	r7, [sp], #4
    6696:	4770      	bx	lr

00006698 <hri_sercomspi_clear_INTFLAG_reg>:

static inline void hri_sercomspi_clear_INTFLAG_reg(const void *const hw, hri_sercomspi_intflag_reg_t mask)
{
    6698:	b480      	push	{r7}
    669a:	b083      	sub	sp, #12
    669c:	af00      	add	r7, sp, #0
    669e:	6078      	str	r0, [r7, #4]
    66a0:	460b      	mov	r3, r1
    66a2:	70fb      	strb	r3, [r7, #3]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    66a4:	687b      	ldr	r3, [r7, #4]
    66a6:	78fa      	ldrb	r2, [r7, #3]
    66a8:	761a      	strb	r2, [r3, #24]
}
    66aa:	bf00      	nop
    66ac:	370c      	adds	r7, #12
    66ae:	46bd      	mov	sp, r7
    66b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    66b4:	4770      	bx	lr
	...

000066b8 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    66b8:	b580      	push	{r7, lr}
    66ba:	b082      	sub	sp, #8
    66bc:	af00      	add	r7, sp, #0
    66be:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    66c0:	687b      	ldr	r3, [r7, #4]
    66c2:	681b      	ldr	r3, [r3, #0]
    66c4:	f043 0202 	orr.w	r2, r3, #2
    66c8:	687b      	ldr	r3, [r7, #4]
    66ca:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    66cc:	2103      	movs	r1, #3
    66ce:	6878      	ldr	r0, [r7, #4]
    66d0:	4b02      	ldr	r3, [pc, #8]	; (66dc <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    66d2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66d4:	bf00      	nop
    66d6:	3708      	adds	r7, #8
    66d8:	46bd      	mov	sp, r7
    66da:	bd80      	pop	{r7, pc}
    66dc:	00006571 	.word	0x00006571

000066e0 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    66e0:	b580      	push	{r7, lr}
    66e2:	b082      	sub	sp, #8
    66e4:	af00      	add	r7, sp, #0
    66e6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    66e8:	687b      	ldr	r3, [r7, #4]
    66ea:	681b      	ldr	r3, [r3, #0]
    66ec:	f023 0202 	bic.w	r2, r3, #2
    66f0:	687b      	ldr	r3, [r7, #4]
    66f2:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    66f4:	2103      	movs	r1, #3
    66f6:	6878      	ldr	r0, [r7, #4]
    66f8:	4b02      	ldr	r3, [pc, #8]	; (6704 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    66fa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    66fc:	bf00      	nop
    66fe:	3708      	adds	r7, #8
    6700:	46bd      	mov	sp, r7
    6702:	bd80      	pop	{r7, pc}
    6704:	00006571 	.word	0x00006571

00006708 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    6708:	b480      	push	{r7}
    670a:	b085      	sub	sp, #20
    670c:	af00      	add	r7, sp, #0
    670e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    6710:	687b      	ldr	r3, [r7, #4]
    6712:	681b      	ldr	r3, [r3, #0]
    6714:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    6716:	68fb      	ldr	r3, [r7, #12]
    6718:	0edb      	lsrs	r3, r3, #27
    671a:	f003 0301 	and.w	r3, r3, #1
    671e:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    6720:	68fb      	ldr	r3, [r7, #12]
    6722:	2b00      	cmp	r3, #0
    6724:	bf14      	ite	ne
    6726:	2301      	movne	r3, #1
    6728:	2300      	moveq	r3, #0
    672a:	b2db      	uxtb	r3, r3
}
    672c:	4618      	mov	r0, r3
    672e:	3714      	adds	r7, #20
    6730:	46bd      	mov	sp, r7
    6732:	f85d 7b04 	ldr.w	r7, [sp], #4
    6736:	4770      	bx	lr

00006738 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    6738:	b580      	push	{r7, lr}
    673a:	b084      	sub	sp, #16
    673c:	af00      	add	r7, sp, #0
    673e:	6078      	str	r0, [r7, #4]
    6740:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6742:	2103      	movs	r1, #3
    6744:	6878      	ldr	r0, [r7, #4]
    6746:	4b07      	ldr	r3, [pc, #28]	; (6764 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    6748:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    674a:	687b      	ldr	r3, [r7, #4]
    674c:	681b      	ldr	r3, [r3, #0]
    674e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    6750:	68fa      	ldr	r2, [r7, #12]
    6752:	683b      	ldr	r3, [r7, #0]
    6754:	4013      	ands	r3, r2
    6756:	60fb      	str	r3, [r7, #12]
	return tmp;
    6758:	68fb      	ldr	r3, [r7, #12]
}
    675a:	4618      	mov	r0, r3
    675c:	3710      	adds	r7, #16
    675e:	46bd      	mov	sp, r7
    6760:	bd80      	pop	{r7, pc}
    6762:	bf00      	nop
    6764:	00006571 	.word	0x00006571

00006768 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    6768:	b580      	push	{r7, lr}
    676a:	b082      	sub	sp, #8
    676c:	af00      	add	r7, sp, #0
    676e:	6078      	str	r0, [r7, #4]
    6770:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    6772:	687b      	ldr	r3, [r7, #4]
    6774:	683a      	ldr	r2, [r7, #0]
    6776:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    6778:	2103      	movs	r1, #3
    677a:	6878      	ldr	r0, [r7, #4]
    677c:	4b02      	ldr	r3, [pc, #8]	; (6788 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    677e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6780:	bf00      	nop
    6782:	3708      	adds	r7, #8
    6784:	46bd      	mov	sp, r7
    6786:	bd80      	pop	{r7, pc}
    6788:	00006571 	.word	0x00006571

0000678c <hri_sercomspi_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_SPI_CTRLA_SWRST) >> SERCOM_SPI_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
    678c:	b580      	push	{r7, lr}
    678e:	b082      	sub	sp, #8
    6790:	af00      	add	r7, sp, #0
    6792:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6794:	687b      	ldr	r3, [r7, #4]
    6796:	681b      	ldr	r3, [r3, #0]
    6798:	f043 0202 	orr.w	r2, r3, #2
    679c:	687b      	ldr	r3, [r7, #4]
    679e:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    67a0:	2103      	movs	r1, #3
    67a2:	6878      	ldr	r0, [r7, #4]
    67a4:	4b02      	ldr	r3, [pc, #8]	; (67b0 <hri_sercomspi_set_CTRLA_ENABLE_bit+0x24>)
    67a6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    67a8:	bf00      	nop
    67aa:	3708      	adds	r7, #8
    67ac:	46bd      	mov	sp, r7
    67ae:	bd80      	pop	{r7, pc}
    67b0:	000065bd 	.word	0x000065bd

000067b4 <hri_sercomspi_get_CTRLA_ENABLE_bit>:

static inline bool hri_sercomspi_get_CTRLA_ENABLE_bit(const void *const hw)
{
    67b4:	b580      	push	{r7, lr}
    67b6:	b084      	sub	sp, #16
    67b8:	af00      	add	r7, sp, #0
    67ba:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    67bc:	2103      	movs	r1, #3
    67be:	6878      	ldr	r0, [r7, #4]
    67c0:	4b09      	ldr	r3, [pc, #36]	; (67e8 <hri_sercomspi_get_CTRLA_ENABLE_bit+0x34>)
    67c2:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    67c4:	687b      	ldr	r3, [r7, #4]
    67c6:	681b      	ldr	r3, [r3, #0]
    67c8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_SPI_CTRLA_ENABLE) >> SERCOM_SPI_CTRLA_ENABLE_Pos;
    67ca:	68fb      	ldr	r3, [r7, #12]
    67cc:	085b      	lsrs	r3, r3, #1
    67ce:	f003 0301 	and.w	r3, r3, #1
    67d2:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    67d4:	68fb      	ldr	r3, [r7, #12]
    67d6:	2b00      	cmp	r3, #0
    67d8:	bf14      	ite	ne
    67da:	2301      	movne	r3, #1
    67dc:	2300      	moveq	r3, #0
    67de:	b2db      	uxtb	r3, r3
}
    67e0:	4618      	mov	r0, r3
    67e2:	3710      	adds	r7, #16
    67e4:	46bd      	mov	sp, r7
    67e6:	bd80      	pop	{r7, pc}
    67e8:	000065bd 	.word	0x000065bd

000067ec <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    67ec:	b580      	push	{r7, lr}
    67ee:	b082      	sub	sp, #8
    67f0:	af00      	add	r7, sp, #0
    67f2:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    67f4:	687b      	ldr	r3, [r7, #4]
    67f6:	681b      	ldr	r3, [r3, #0]
    67f8:	f023 0202 	bic.w	r2, r3, #2
    67fc:	687b      	ldr	r3, [r7, #4]
    67fe:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6800:	2103      	movs	r1, #3
    6802:	6878      	ldr	r0, [r7, #4]
    6804:	4b02      	ldr	r3, [pc, #8]	; (6810 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x24>)
    6806:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6808:	bf00      	nop
    680a:	3708      	adds	r7, #8
    680c:	46bd      	mov	sp, r7
    680e:	bd80      	pop	{r7, pc}
    6810:	000065bd 	.word	0x000065bd

00006814 <hri_sercomspi_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
    6814:	b580      	push	{r7, lr}
    6816:	b084      	sub	sp, #16
    6818:	af00      	add	r7, sp, #0
    681a:	6078      	str	r0, [r7, #4]
    681c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    681e:	2103      	movs	r1, #3
    6820:	6878      	ldr	r0, [r7, #4]
    6822:	4b07      	ldr	r3, [pc, #28]	; (6840 <hri_sercomspi_get_CTRLA_reg+0x2c>)
    6824:	4798      	blx	r3
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    6826:	687b      	ldr	r3, [r7, #4]
    6828:	681b      	ldr	r3, [r3, #0]
    682a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    682c:	68fa      	ldr	r2, [r7, #12]
    682e:	683b      	ldr	r3, [r7, #0]
    6830:	4013      	ands	r3, r2
    6832:	60fb      	str	r3, [r7, #12]
	return tmp;
    6834:	68fb      	ldr	r3, [r7, #12]
}
    6836:	4618      	mov	r0, r3
    6838:	3710      	adds	r7, #16
    683a:	46bd      	mov	sp, r7
    683c:	bd80      	pop	{r7, pc}
    683e:	bf00      	nop
    6840:	000065bd 	.word	0x000065bd

00006844 <hri_sercomspi_write_CTRLA_reg>:

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
    6844:	b580      	push	{r7, lr}
    6846:	b082      	sub	sp, #8
    6848:	af00      	add	r7, sp, #0
    684a:	6078      	str	r0, [r7, #4]
    684c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    684e:	687b      	ldr	r3, [r7, #4]
    6850:	683a      	ldr	r2, [r7, #0]
    6852:	601a      	str	r2, [r3, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    6854:	2103      	movs	r1, #3
    6856:	6878      	ldr	r0, [r7, #4]
    6858:	4b02      	ldr	r3, [pc, #8]	; (6864 <hri_sercomspi_write_CTRLA_reg+0x20>)
    685a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    685c:	bf00      	nop
    685e:	3708      	adds	r7, #8
    6860:	46bd      	mov	sp, r7
    6862:	bd80      	pop	{r7, pc}
    6864:	000065bd 	.word	0x000065bd

00006868 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    6868:	b580      	push	{r7, lr}
    686a:	b082      	sub	sp, #8
    686c:	af00      	add	r7, sp, #0
    686e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    6870:	687b      	ldr	r3, [r7, #4]
    6872:	685b      	ldr	r3, [r3, #4]
    6874:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    6878:	687b      	ldr	r3, [r7, #4]
    687a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    687c:	2104      	movs	r1, #4
    687e:	6878      	ldr	r0, [r7, #4]
    6880:	4b02      	ldr	r3, [pc, #8]	; (688c <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    6882:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6884:	bf00      	nop
    6886:	3708      	adds	r7, #8
    6888:	46bd      	mov	sp, r7
    688a:	bd80      	pop	{r7, pc}
    688c:	00006571 	.word	0x00006571

00006890 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    6890:	b580      	push	{r7, lr}
    6892:	b082      	sub	sp, #8
    6894:	af00      	add	r7, sp, #0
    6896:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    6898:	687b      	ldr	r3, [r7, #4]
    689a:	685b      	ldr	r3, [r3, #4]
    689c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    68a0:	687b      	ldr	r3, [r7, #4]
    68a2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    68a4:	2104      	movs	r1, #4
    68a6:	6878      	ldr	r0, [r7, #4]
    68a8:	4b02      	ldr	r3, [pc, #8]	; (68b4 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    68aa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    68ac:	bf00      	nop
    68ae:	3708      	adds	r7, #8
    68b0:	46bd      	mov	sp, r7
    68b2:	bd80      	pop	{r7, pc}
    68b4:	00006571 	.word	0x00006571

000068b8 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    68b8:	b580      	push	{r7, lr}
    68ba:	b082      	sub	sp, #8
    68bc:	af00      	add	r7, sp, #0
    68be:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    68c0:	687b      	ldr	r3, [r7, #4]
    68c2:	685b      	ldr	r3, [r3, #4]
    68c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    68c8:	687b      	ldr	r3, [r7, #4]
    68ca:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    68cc:	2104      	movs	r1, #4
    68ce:	6878      	ldr	r0, [r7, #4]
    68d0:	4b02      	ldr	r3, [pc, #8]	; (68dc <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    68d2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    68d4:	bf00      	nop
    68d6:	3708      	adds	r7, #8
    68d8:	46bd      	mov	sp, r7
    68da:	bd80      	pop	{r7, pc}
    68dc:	00006571 	.word	0x00006571

000068e0 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    68e0:	b580      	push	{r7, lr}
    68e2:	b082      	sub	sp, #8
    68e4:	af00      	add	r7, sp, #0
    68e6:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    68e8:	687b      	ldr	r3, [r7, #4]
    68ea:	685b      	ldr	r3, [r3, #4]
    68ec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    68f0:	687b      	ldr	r3, [r7, #4]
    68f2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    68f4:	2104      	movs	r1, #4
    68f6:	6878      	ldr	r0, [r7, #4]
    68f8:	4b02      	ldr	r3, [pc, #8]	; (6904 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    68fa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    68fc:	bf00      	nop
    68fe:	3708      	adds	r7, #8
    6900:	46bd      	mov	sp, r7
    6902:	bd80      	pop	{r7, pc}
    6904:	00006571 	.word	0x00006571

00006908 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    6908:	b580      	push	{r7, lr}
    690a:	b082      	sub	sp, #8
    690c:	af00      	add	r7, sp, #0
    690e:	6078      	str	r0, [r7, #4]
    6910:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    6912:	687b      	ldr	r3, [r7, #4]
    6914:	685a      	ldr	r2, [r3, #4]
    6916:	683b      	ldr	r3, [r7, #0]
    6918:	041b      	lsls	r3, r3, #16
    691a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    691e:	431a      	orrs	r2, r3
    6920:	687b      	ldr	r3, [r7, #4]
    6922:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6924:	2104      	movs	r1, #4
    6926:	6878      	ldr	r0, [r7, #4]
    6928:	4b02      	ldr	r3, [pc, #8]	; (6934 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    692a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    692c:	bf00      	nop
    692e:	3708      	adds	r7, #8
    6930:	46bd      	mov	sp, r7
    6932:	bd80      	pop	{r7, pc}
    6934:	00006571 	.word	0x00006571

00006938 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    6938:	b580      	push	{r7, lr}
    693a:	b082      	sub	sp, #8
    693c:	af00      	add	r7, sp, #0
    693e:	6078      	str	r0, [r7, #4]
    6940:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    6942:	687b      	ldr	r3, [r7, #4]
    6944:	683a      	ldr	r2, [r7, #0]
    6946:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6948:	2104      	movs	r1, #4
    694a:	6878      	ldr	r0, [r7, #4]
    694c:	4b02      	ldr	r3, [pc, #8]	; (6958 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    694e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6950:	bf00      	nop
    6952:	3708      	adds	r7, #8
    6954:	46bd      	mov	sp, r7
    6956:	bd80      	pop	{r7, pc}
    6958:	00006571 	.word	0x00006571

0000695c <hri_sercomspi_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
    695c:	b580      	push	{r7, lr}
    695e:	b082      	sub	sp, #8
    6960:	af00      	add	r7, sp, #0
    6962:	6078      	str	r0, [r7, #4]
    6964:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    6966:	687b      	ldr	r3, [r7, #4]
    6968:	683a      	ldr	r2, [r7, #0]
    696a:	605a      	str	r2, [r3, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
    696c:	2117      	movs	r1, #23
    696e:	6878      	ldr	r0, [r7, #4]
    6970:	4b02      	ldr	r3, [pc, #8]	; (697c <hri_sercomspi_write_CTRLB_reg+0x20>)
    6972:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6974:	bf00      	nop
    6976:	3708      	adds	r7, #8
    6978:	46bd      	mov	sp, r7
    697a:	bd80      	pop	{r7, pc}
    697c:	000065bd 	.word	0x000065bd

00006980 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    6980:	b480      	push	{r7}
    6982:	b083      	sub	sp, #12
    6984:	af00      	add	r7, sp, #0
    6986:	6078      	str	r0, [r7, #4]
    6988:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    698a:	687b      	ldr	r3, [r7, #4]
    698c:	683a      	ldr	r2, [r7, #0]
    698e:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6990:	bf00      	nop
    6992:	370c      	adds	r7, #12
    6994:	46bd      	mov	sp, r7
    6996:	f85d 7b04 	ldr.w	r7, [sp], #4
    699a:	4770      	bx	lr

0000699c <hri_sercomspi_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
    699c:	b480      	push	{r7}
    699e:	b083      	sub	sp, #12
    69a0:	af00      	add	r7, sp, #0
    69a2:	6078      	str	r0, [r7, #4]
    69a4:	460b      	mov	r3, r1
    69a6:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    69a8:	687b      	ldr	r3, [r7, #4]
    69aa:	78fa      	ldrb	r2, [r7, #3]
    69ac:	731a      	strb	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    69ae:	bf00      	nop
    69b0:	370c      	adds	r7, #12
    69b2:	46bd      	mov	sp, r7
    69b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    69b8:	4770      	bx	lr
	...

000069bc <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    69bc:	b580      	push	{r7, lr}
    69be:	b084      	sub	sp, #16
    69c0:	af00      	add	r7, sp, #0
    69c2:	6078      	str	r0, [r7, #4]
    69c4:	460b      	mov	r3, r1
    69c6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    69c8:	687b      	ldr	r3, [r7, #4]
    69ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    69cc:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    69ce:	68fb      	ldr	r3, [r7, #12]
    69d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    69d4:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    69d6:	78fb      	ldrb	r3, [r7, #3]
    69d8:	039b      	lsls	r3, r3, #14
    69da:	461a      	mov	r2, r3
    69dc:	68fb      	ldr	r3, [r7, #12]
    69de:	4313      	orrs	r3, r2
    69e0:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    69e2:	687b      	ldr	r3, [r7, #4]
    69e4:	68fa      	ldr	r2, [r7, #12]
    69e6:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    69e8:	2104      	movs	r1, #4
    69ea:	6878      	ldr	r0, [r7, #4]
    69ec:	4b02      	ldr	r3, [pc, #8]	; (69f8 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    69ee:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    69f0:	bf00      	nop
    69f2:	3710      	adds	r7, #16
    69f4:	46bd      	mov	sp, r7
    69f6:	bd80      	pop	{r7, pc}
    69f8:	00006571 	.word	0x00006571

000069fc <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    69fc:	b580      	push	{r7, lr}
    69fe:	b082      	sub	sp, #8
    6a00:	af00      	add	r7, sp, #0
    6a02:	6078      	str	r0, [r7, #4]
    6a04:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    6a06:	687b      	ldr	r3, [r7, #4]
    6a08:	683a      	ldr	r2, [r7, #0]
    6a0a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6a0c:	2104      	movs	r1, #4
    6a0e:	6878      	ldr	r0, [r7, #4]
    6a10:	4b02      	ldr	r3, [pc, #8]	; (6a1c <hri_sercomi2cm_write_ADDR_reg+0x20>)
    6a12:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a14:	bf00      	nop
    6a16:	3708      	adds	r7, #8
    6a18:	46bd      	mov	sp, r7
    6a1a:	bd80      	pop	{r7, pc}
    6a1c:	00006571 	.word	0x00006571

00006a20 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    6a20:	b580      	push	{r7, lr}
    6a22:	b082      	sub	sp, #8
    6a24:	af00      	add	r7, sp, #0
    6a26:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6a28:	2104      	movs	r1, #4
    6a2a:	6878      	ldr	r0, [r7, #4]
    6a2c:	4b03      	ldr	r3, [pc, #12]	; (6a3c <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    6a2e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    6a30:	687b      	ldr	r3, [r7, #4]
    6a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    6a34:	4618      	mov	r0, r3
    6a36:	3708      	adds	r7, #8
    6a38:	46bd      	mov	sp, r7
    6a3a:	bd80      	pop	{r7, pc}
    6a3c:	00006571 	.word	0x00006571

00006a40 <hri_sercomspi_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
    6a40:	b480      	push	{r7}
    6a42:	b083      	sub	sp, #12
    6a44:	af00      	add	r7, sp, #0
    6a46:	6078      	str	r0, [r7, #4]
    6a48:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    6a4a:	687b      	ldr	r3, [r7, #4]
    6a4c:	683a      	ldr	r2, [r7, #0]
    6a4e:	625a      	str	r2, [r3, #36]	; 0x24
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a50:	bf00      	nop
    6a52:	370c      	adds	r7, #12
    6a54:	46bd      	mov	sp, r7
    6a56:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a5a:	4770      	bx	lr

00006a5c <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    6a5c:	b580      	push	{r7, lr}
    6a5e:	b082      	sub	sp, #8
    6a60:	af00      	add	r7, sp, #0
    6a62:	6078      	str	r0, [r7, #4]
    6a64:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    6a66:	687b      	ldr	r3, [r7, #4]
    6a68:	683a      	ldr	r2, [r7, #0]
    6a6a:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6a6c:	2104      	movs	r1, #4
    6a6e:	6878      	ldr	r0, [r7, #4]
    6a70:	4b02      	ldr	r3, [pc, #8]	; (6a7c <hri_sercomi2cm_write_DATA_reg+0x20>)
    6a72:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6a74:	bf00      	nop
    6a76:	3708      	adds	r7, #8
    6a78:	46bd      	mov	sp, r7
    6a7a:	bd80      	pop	{r7, pc}
    6a7c:	00006571 	.word	0x00006571

00006a80 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    6a80:	b580      	push	{r7, lr}
    6a82:	b082      	sub	sp, #8
    6a84:	af00      	add	r7, sp, #0
    6a86:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6a88:	2104      	movs	r1, #4
    6a8a:	6878      	ldr	r0, [r7, #4]
    6a8c:	4b03      	ldr	r3, [pc, #12]	; (6a9c <hri_sercomi2cm_read_DATA_reg+0x1c>)
    6a8e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    6a90:	687b      	ldr	r3, [r7, #4]
    6a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6a94:	4618      	mov	r0, r3
    6a96:	3708      	adds	r7, #8
    6a98:	46bd      	mov	sp, r7
    6a9a:	bd80      	pop	{r7, pc}
    6a9c:	00006571 	.word	0x00006571

00006aa0 <hri_sercomspi_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
    6aa0:	b480      	push	{r7}
    6aa2:	b083      	sub	sp, #12
    6aa4:	af00      	add	r7, sp, #0
    6aa6:	6078      	str	r0, [r7, #4]
    6aa8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    6aaa:	687b      	ldr	r3, [r7, #4]
    6aac:	683a      	ldr	r2, [r7, #0]
    6aae:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6ab0:	bf00      	nop
    6ab2:	370c      	adds	r7, #12
    6ab4:	46bd      	mov	sp, r7
    6ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    6aba:	4770      	bx	lr

00006abc <hri_sercomspi_read_DATA_reg>:
	((Sercom *)hw)->SPI.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
    6abc:	b480      	push	{r7}
    6abe:	b083      	sub	sp, #12
    6ac0:	af00      	add	r7, sp, #0
    6ac2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->SPI.DATA.reg;
    6ac4:	687b      	ldr	r3, [r7, #4]
    6ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    6ac8:	4618      	mov	r0, r3
    6aca:	370c      	adds	r7, #12
    6acc:	46bd      	mov	sp, r7
    6ace:	f85d 7b04 	ldr.w	r7, [sp], #4
    6ad2:	4770      	bx	lr

00006ad4 <hri_sercomspi_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
    6ad4:	b480      	push	{r7}
    6ad6:	b083      	sub	sp, #12
    6ad8:	af00      	add	r7, sp, #0
    6ada:	6078      	str	r0, [r7, #4]
    6adc:	460b      	mov	r3, r1
    6ade:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    6ae0:	687b      	ldr	r3, [r7, #4]
    6ae2:	78fa      	ldrb	r2, [r7, #3]
    6ae4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6ae8:	bf00      	nop
    6aea:	370c      	adds	r7, #12
    6aec:	46bd      	mov	sp, r7
    6aee:	f85d 7b04 	ldr.w	r7, [sp], #4
    6af2:	4770      	bx	lr

00006af4 <hri_sercomspi_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
    6af4:	b480      	push	{r7}
    6af6:	b083      	sub	sp, #12
    6af8:	af00      	add	r7, sp, #0
    6afa:	6078      	str	r0, [r7, #4]
    6afc:	460b      	mov	r3, r1
    6afe:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    6b00:	687b      	ldr	r3, [r7, #4]
    6b02:	887a      	ldrh	r2, [r7, #2]
    6b04:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b06:	bf00      	nop
    6b08:	370c      	adds	r7, #12
    6b0a:	46bd      	mov	sp, r7
    6b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6b10:	4770      	bx	lr
	...

00006b14 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    6b14:	b580      	push	{r7, lr}
    6b16:	b082      	sub	sp, #8
    6b18:	af00      	add	r7, sp, #0
    6b1a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6b1c:	2104      	movs	r1, #4
    6b1e:	6878      	ldr	r0, [r7, #4]
    6b20:	4b06      	ldr	r3, [pc, #24]	; (6b3c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    6b22:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    6b24:	687b      	ldr	r3, [r7, #4]
    6b26:	8b5b      	ldrh	r3, [r3, #26]
    6b28:	b29b      	uxth	r3, r3
    6b2a:	091b      	lsrs	r3, r3, #4
    6b2c:	b29b      	uxth	r3, r3
    6b2e:	f003 0303 	and.w	r3, r3, #3
    6b32:	b29b      	uxth	r3, r3
}
    6b34:	4618      	mov	r0, r3
    6b36:	3708      	adds	r7, #8
    6b38:	46bd      	mov	sp, r7
    6b3a:	bd80      	pop	{r7, pc}
    6b3c:	00006571 	.word	0x00006571

00006b40 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    6b40:	b580      	push	{r7, lr}
    6b42:	b082      	sub	sp, #8
    6b44:	af00      	add	r7, sp, #0
    6b46:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6b48:	2104      	movs	r1, #4
    6b4a:	6878      	ldr	r0, [r7, #4]
    6b4c:	4b04      	ldr	r3, [pc, #16]	; (6b60 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    6b4e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    6b50:	687b      	ldr	r3, [r7, #4]
    6b52:	8b5b      	ldrh	r3, [r3, #26]
    6b54:	b29b      	uxth	r3, r3
}
    6b56:	4618      	mov	r0, r3
    6b58:	3708      	adds	r7, #8
    6b5a:	46bd      	mov	sp, r7
    6b5c:	bd80      	pop	{r7, pc}
    6b5e:	bf00      	nop
    6b60:	00006571 	.word	0x00006571

00006b64 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    6b64:	b580      	push	{r7, lr}
    6b66:	b082      	sub	sp, #8
    6b68:	af00      	add	r7, sp, #0
    6b6a:	6078      	str	r0, [r7, #4]
    6b6c:	460b      	mov	r3, r1
    6b6e:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    6b70:	687b      	ldr	r3, [r7, #4]
    6b72:	887a      	ldrh	r2, [r7, #2]
    6b74:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    6b76:	2104      	movs	r1, #4
    6b78:	6878      	ldr	r0, [r7, #4]
    6b7a:	4b03      	ldr	r3, [pc, #12]	; (6b88 <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    6b7c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    6b7e:	bf00      	nop
    6b80:	3708      	adds	r7, #8
    6b82:	46bd      	mov	sp, r7
    6b84:	bd80      	pop	{r7, pc}
    6b86:	bf00      	nop
    6b88:	00006571 	.word	0x00006571

00006b8c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    6b8c:	b4b0      	push	{r4, r5, r7}
    6b8e:	b08d      	sub	sp, #52	; 0x34
    6b90:	af00      	add	r7, sp, #0
    6b92:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    6b94:	4b13      	ldr	r3, [pc, #76]	; (6be4 <_sercom_get_hardware_index+0x58>)
    6b96:	f107 040c 	add.w	r4, r7, #12
    6b9a:	461d      	mov	r5, r3
    6b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6ba0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6ba8:	2300      	movs	r3, #0
    6baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    6bac:	e010      	b.n	6bd0 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    6bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6bb0:	009b      	lsls	r3, r3, #2
    6bb2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    6bb6:	4413      	add	r3, r2
    6bb8:	f853 3c24 	ldr.w	r3, [r3, #-36]
    6bbc:	461a      	mov	r2, r3
    6bbe:	687b      	ldr	r3, [r7, #4]
    6bc0:	429a      	cmp	r2, r3
    6bc2:	d102      	bne.n	6bca <_sercom_get_hardware_index+0x3e>
			return i;
    6bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6bc6:	b2db      	uxtb	r3, r3
    6bc8:	e006      	b.n	6bd8 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6bcc:	3301      	adds	r3, #1
    6bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    6bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6bd2:	2b07      	cmp	r3, #7
    6bd4:	d9eb      	bls.n	6bae <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    6bd6:	2300      	movs	r3, #0
}
    6bd8:	4618      	mov	r0, r3
    6bda:	3734      	adds	r7, #52	; 0x34
    6bdc:	46bd      	mov	sp, r7
    6bde:	bcb0      	pop	{r4, r5, r7}
    6be0:	4770      	bx	lr
    6be2:	bf00      	nop
    6be4:	00013cfc 	.word	0x00013cfc

00006be8 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    6be8:	b580      	push	{r7, lr}
    6bea:	b084      	sub	sp, #16
    6bec:	af00      	add	r7, sp, #0
    6bee:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    6bf0:	6878      	ldr	r0, [r7, #4]
    6bf2:	4b13      	ldr	r3, [pc, #76]	; (6c40 <_get_i2cm_index+0x58>)
    6bf4:	4798      	blx	r3
    6bf6:	4603      	mov	r3, r0
    6bf8:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6bfa:	2300      	movs	r3, #0
    6bfc:	73fb      	strb	r3, [r7, #15]
    6bfe:	e010      	b.n	6c22 <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    6c00:	7bfa      	ldrb	r2, [r7, #15]
    6c02:	4910      	ldr	r1, [pc, #64]	; (6c44 <_get_i2cm_index+0x5c>)
    6c04:	4613      	mov	r3, r2
    6c06:	005b      	lsls	r3, r3, #1
    6c08:	4413      	add	r3, r2
    6c0a:	00db      	lsls	r3, r3, #3
    6c0c:	440b      	add	r3, r1
    6c0e:	781b      	ldrb	r3, [r3, #0]
    6c10:	7bba      	ldrb	r2, [r7, #14]
    6c12:	429a      	cmp	r2, r3
    6c14:	d102      	bne.n	6c1c <_get_i2cm_index+0x34>
			return i;
    6c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6c1a:	e00d      	b.n	6c38 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    6c1c:	7bfb      	ldrb	r3, [r7, #15]
    6c1e:	3301      	adds	r3, #1
    6c20:	73fb      	strb	r3, [r7, #15]
    6c22:	7bfb      	ldrb	r3, [r7, #15]
    6c24:	2b02      	cmp	r3, #2
    6c26:	d9eb      	bls.n	6c00 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    6c28:	f240 32a6 	movw	r2, #934	; 0x3a6
    6c2c:	4906      	ldr	r1, [pc, #24]	; (6c48 <_get_i2cm_index+0x60>)
    6c2e:	2000      	movs	r0, #0
    6c30:	4b06      	ldr	r3, [pc, #24]	; (6c4c <_get_i2cm_index+0x64>)
    6c32:	4798      	blx	r3
	return -1;
    6c34:	f04f 33ff 	mov.w	r3, #4294967295
}
    6c38:	4618      	mov	r0, r3
    6c3a:	3710      	adds	r7, #16
    6c3c:	46bd      	mov	sp, r7
    6c3e:	bd80      	pop	{r7, pc}
    6c40:	00006b8d 	.word	0x00006b8d
    6c44:	20000018 	.word	0x20000018
    6c48:	00013ce0 	.word	0x00013ce0
    6c4c:	0000405d 	.word	0x0000405d

00006c50 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    6c50:	b580      	push	{r7, lr}
    6c52:	b082      	sub	sp, #8
    6c54:	af00      	add	r7, sp, #0
    6c56:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    6c58:	2103      	movs	r1, #3
    6c5a:	6878      	ldr	r0, [r7, #4]
    6c5c:	4b02      	ldr	r3, [pc, #8]	; (6c68 <_sercom_i2c_send_stop+0x18>)
    6c5e:	4798      	blx	r3
}
    6c60:	bf00      	nop
    6c62:	3708      	adds	r7, #8
    6c64:	46bd      	mov	sp, r7
    6c66:	bd80      	pop	{r7, pc}
    6c68:	00006909 	.word	0x00006909

00006c6c <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    6c6c:	b590      	push	{r4, r7, lr}
    6c6e:	b087      	sub	sp, #28
    6c70:	af00      	add	r7, sp, #0
    6c72:	60f8      	str	r0, [r7, #12]
    6c74:	60b9      	str	r1, [r7, #8]
    6c76:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6c78:	68f8      	ldr	r0, [r7, #12]
    6c7a:	4b7d      	ldr	r3, [pc, #500]	; (6e70 <_sercom_i2c_sync_analyse_flags+0x204>)
    6c7c:	4798      	blx	r3
    6c7e:	4603      	mov	r3, r0
    6c80:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    6c82:	68f8      	ldr	r0, [r7, #12]
    6c84:	4b7b      	ldr	r3, [pc, #492]	; (6e74 <_sercom_i2c_sync_analyse_flags+0x208>)
    6c86:	4798      	blx	r3
    6c88:	4603      	mov	r3, r0
    6c8a:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    6c8c:	68bb      	ldr	r3, [r7, #8]
    6c8e:	f003 0301 	and.w	r3, r3, #1
    6c92:	2b00      	cmp	r3, #0
    6c94:	f000 8095 	beq.w	6dc2 <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    6c98:	8a7b      	ldrh	r3, [r7, #18]
    6c9a:	f003 0302 	and.w	r3, r3, #2
    6c9e:	2b00      	cmp	r3, #0
    6ca0:	d01d      	beq.n	6cde <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    6ca2:	68f8      	ldr	r0, [r7, #12]
    6ca4:	4b74      	ldr	r3, [pc, #464]	; (6e78 <_sercom_i2c_sync_analyse_flags+0x20c>)
    6ca6:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    6ca8:	687b      	ldr	r3, [r7, #4]
    6caa:	885b      	ldrh	r3, [r3, #2]
    6cac:	b29b      	uxth	r3, r3
    6cae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6cb2:	b29a      	uxth	r2, r3
    6cb4:	687b      	ldr	r3, [r7, #4]
    6cb6:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    6cb8:	687b      	ldr	r3, [r7, #4]
    6cba:	885b      	ldrh	r3, [r3, #2]
    6cbc:	b29b      	uxth	r3, r3
    6cbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6cc2:	b29a      	uxth	r2, r3
    6cc4:	687b      	ldr	r3, [r7, #4]
    6cc6:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    6cc8:	8a7b      	ldrh	r3, [r7, #18]
    6cca:	f003 0301 	and.w	r3, r3, #1
    6cce:	2b00      	cmp	r3, #0
    6cd0:	d002      	beq.n	6cd8 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    6cd2:	f06f 0304 	mvn.w	r3, #4
    6cd6:	e0c6      	b.n	6e66 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    6cd8:	f06f 0303 	mvn.w	r3, #3
    6cdc:	e0c3      	b.n	6e66 <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    6cde:	8a7b      	ldrh	r3, [r7, #18]
    6ce0:	f003 0304 	and.w	r3, r3, #4
    6ce4:	2b00      	cmp	r3, #0
    6ce6:	d01f      	beq.n	6d28 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    6ce8:	687b      	ldr	r3, [r7, #4]
    6cea:	685b      	ldr	r3, [r3, #4]
    6cec:	2b00      	cmp	r3, #0
    6cee:	dd07      	ble.n	6d00 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    6cf0:	687b      	ldr	r3, [r7, #4]
    6cf2:	885b      	ldrh	r3, [r3, #2]
    6cf4:	b29b      	uxth	r3, r3
    6cf6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6cfa:	b29a      	uxth	r2, r3
    6cfc:	687b      	ldr	r3, [r7, #4]
    6cfe:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    6d00:	687b      	ldr	r3, [r7, #4]
    6d02:	885b      	ldrh	r3, [r3, #2]
    6d04:	b29b      	uxth	r3, r3
    6d06:	b21b      	sxth	r3, r3
    6d08:	2b00      	cmp	r3, #0
    6d0a:	da02      	bge.n	6d12 <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    6d0c:	68f8      	ldr	r0, [r7, #12]
    6d0e:	4b5b      	ldr	r3, [pc, #364]	; (6e7c <_sercom_i2c_sync_analyse_flags+0x210>)
    6d10:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6d12:	687b      	ldr	r3, [r7, #4]
    6d14:	885b      	ldrh	r3, [r3, #2]
    6d16:	b29b      	uxth	r3, r3
    6d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6d1c:	b29a      	uxth	r2, r3
    6d1e:	687b      	ldr	r3, [r7, #4]
    6d20:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    6d22:	f06f 0301 	mvn.w	r3, #1
    6d26:	e09e      	b.n	6e66 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    6d28:	687b      	ldr	r3, [r7, #4]
    6d2a:	885b      	ldrh	r3, [r3, #2]
    6d2c:	b29b      	uxth	r3, r3
    6d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6d32:	2b00      	cmp	r3, #0
    6d34:	d01c      	beq.n	6d70 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    6d36:	687b      	ldr	r3, [r7, #4]
    6d38:	881b      	ldrh	r3, [r3, #0]
    6d3a:	121b      	asrs	r3, r3, #8
    6d3c:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    6d3e:	f003 0406 	and.w	r4, r3, #6
    6d42:	68f8      	ldr	r0, [r7, #12]
    6d44:	4b4e      	ldr	r3, [pc, #312]	; (6e80 <_sercom_i2c_sync_analyse_flags+0x214>)
    6d46:	4798      	blx	r3
    6d48:	4603      	mov	r3, r0
    6d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    6d4e:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    6d50:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    6d54:	4619      	mov	r1, r3
    6d56:	68f8      	ldr	r0, [r7, #12]
    6d58:	4b4a      	ldr	r3, [pc, #296]	; (6e84 <_sercom_i2c_sync_analyse_flags+0x218>)
    6d5a:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    6d5c:	687b      	ldr	r3, [r7, #4]
    6d5e:	885b      	ldrh	r3, [r3, #2]
    6d60:	b29b      	uxth	r3, r3
    6d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    6d66:	b29a      	uxth	r2, r3
    6d68:	687b      	ldr	r3, [r7, #4]
    6d6a:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    6d6c:	2300      	movs	r3, #0
    6d6e:	e07a      	b.n	6e66 <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    6d70:	687b      	ldr	r3, [r7, #4]
    6d72:	685b      	ldr	r3, [r3, #4]
    6d74:	2b00      	cmp	r3, #0
    6d76:	d111      	bne.n	6d9c <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    6d78:	687b      	ldr	r3, [r7, #4]
    6d7a:	885b      	ldrh	r3, [r3, #2]
    6d7c:	b29b      	uxth	r3, r3
    6d7e:	b21b      	sxth	r3, r3
    6d80:	2b00      	cmp	r3, #0
    6d82:	da02      	bge.n	6d8a <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    6d84:	68f8      	ldr	r0, [r7, #12]
    6d86:	4b3d      	ldr	r3, [pc, #244]	; (6e7c <_sercom_i2c_sync_analyse_flags+0x210>)
    6d88:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6d8a:	687b      	ldr	r3, [r7, #4]
    6d8c:	885b      	ldrh	r3, [r3, #2]
    6d8e:	b29b      	uxth	r3, r3
    6d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6d94:	b29a      	uxth	r2, r3
    6d96:	687b      	ldr	r3, [r7, #4]
    6d98:	805a      	strh	r2, [r3, #2]
    6d9a:	e010      	b.n	6dbe <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    6d9c:	687b      	ldr	r3, [r7, #4]
    6d9e:	689b      	ldr	r3, [r3, #8]
    6da0:	781b      	ldrb	r3, [r3, #0]
    6da2:	4619      	mov	r1, r3
    6da4:	68f8      	ldr	r0, [r7, #12]
    6da6:	4b38      	ldr	r3, [pc, #224]	; (6e88 <_sercom_i2c_sync_analyse_flags+0x21c>)
    6da8:	4798      	blx	r3
				msg->buffer++;
    6daa:	687b      	ldr	r3, [r7, #4]
    6dac:	689b      	ldr	r3, [r3, #8]
    6dae:	1c5a      	adds	r2, r3, #1
    6db0:	687b      	ldr	r3, [r7, #4]
    6db2:	609a      	str	r2, [r3, #8]
				msg->len--;
    6db4:	687b      	ldr	r3, [r7, #4]
    6db6:	685b      	ldr	r3, [r3, #4]
    6db8:	1e5a      	subs	r2, r3, #1
    6dba:	687b      	ldr	r3, [r7, #4]
    6dbc:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    6dbe:	2300      	movs	r3, #0
    6dc0:	e051      	b.n	6e66 <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    6dc2:	68bb      	ldr	r3, [r7, #8]
    6dc4:	f003 0302 	and.w	r3, r3, #2
    6dc8:	2b00      	cmp	r3, #0
    6dca:	d04b      	beq.n	6e64 <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    6dcc:	687b      	ldr	r3, [r7, #4]
    6dce:	685b      	ldr	r3, [r3, #4]
    6dd0:	2b00      	cmp	r3, #0
    6dd2:	d041      	beq.n	6e58 <_sercom_i2c_sync_analyse_flags+0x1ec>
    6dd4:	8a7b      	ldrh	r3, [r7, #18]
    6dd6:	f003 0304 	and.w	r3, r3, #4
    6dda:	2b00      	cmp	r3, #0
    6ddc:	d13c      	bne.n	6e58 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    6dde:	687b      	ldr	r3, [r7, #4]
    6de0:	685b      	ldr	r3, [r3, #4]
    6de2:	1e5a      	subs	r2, r3, #1
    6de4:	687b      	ldr	r3, [r7, #4]
    6de6:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    6de8:	687b      	ldr	r3, [r7, #4]
    6dea:	685b      	ldr	r3, [r3, #4]
    6dec:	2b00      	cmp	r3, #0
    6dee:	d102      	bne.n	6df6 <_sercom_i2c_sync_analyse_flags+0x18a>
    6df0:	697b      	ldr	r3, [r7, #20]
    6df2:	2b00      	cmp	r3, #0
    6df4:	d006      	beq.n	6e04 <_sercom_i2c_sync_analyse_flags+0x198>
    6df6:	687b      	ldr	r3, [r7, #4]
    6df8:	685b      	ldr	r3, [r3, #4]
    6dfa:	2b01      	cmp	r3, #1
    6dfc:	d105      	bne.n	6e0a <_sercom_i2c_sync_analyse_flags+0x19e>
    6dfe:	697b      	ldr	r3, [r7, #20]
    6e00:	2b00      	cmp	r3, #0
    6e02:	d002      	beq.n	6e0a <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6e04:	68f8      	ldr	r0, [r7, #12]
    6e06:	4b21      	ldr	r3, [pc, #132]	; (6e8c <_sercom_i2c_sync_analyse_flags+0x220>)
    6e08:	4798      	blx	r3
			}

			if (msg->len == 0) {
    6e0a:	687b      	ldr	r3, [r7, #4]
    6e0c:	685b      	ldr	r3, [r3, #4]
    6e0e:	2b00      	cmp	r3, #0
    6e10:	d113      	bne.n	6e3a <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    6e12:	687b      	ldr	r3, [r7, #4]
    6e14:	885b      	ldrh	r3, [r3, #2]
    6e16:	b29b      	uxth	r3, r3
    6e18:	b21b      	sxth	r3, r3
    6e1a:	2b00      	cmp	r3, #0
    6e1c:	da05      	bge.n	6e2a <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    6e1e:	68f8      	ldr	r0, [r7, #12]
    6e20:	4b1b      	ldr	r3, [pc, #108]	; (6e90 <_sercom_i2c_sync_analyse_flags+0x224>)
    6e22:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    6e24:	68f8      	ldr	r0, [r7, #12]
    6e26:	4b15      	ldr	r3, [pc, #84]	; (6e7c <_sercom_i2c_sync_analyse_flags+0x210>)
    6e28:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    6e2a:	687b      	ldr	r3, [r7, #4]
    6e2c:	885b      	ldrh	r3, [r3, #2]
    6e2e:	b29b      	uxth	r3, r3
    6e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    6e34:	b29a      	uxth	r2, r3
    6e36:	687b      	ldr	r3, [r7, #4]
    6e38:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    6e3a:	687b      	ldr	r3, [r7, #4]
    6e3c:	689c      	ldr	r4, [r3, #8]
    6e3e:	1c62      	adds	r2, r4, #1
    6e40:	687b      	ldr	r3, [r7, #4]
    6e42:	609a      	str	r2, [r3, #8]
    6e44:	68f8      	ldr	r0, [r7, #12]
    6e46:	4b13      	ldr	r3, [pc, #76]	; (6e94 <_sercom_i2c_sync_analyse_flags+0x228>)
    6e48:	4798      	blx	r3
    6e4a:	4603      	mov	r3, r0
    6e4c:	b2db      	uxtb	r3, r3
    6e4e:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6e50:	68f8      	ldr	r0, [r7, #12]
    6e52:	4b11      	ldr	r3, [pc, #68]	; (6e98 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6e54:	4798      	blx	r3
    6e56:	e005      	b.n	6e64 <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    6e58:	68f8      	ldr	r0, [r7, #12]
    6e5a:	4b0f      	ldr	r3, [pc, #60]	; (6e98 <_sercom_i2c_sync_analyse_flags+0x22c>)
    6e5c:	4798      	blx	r3
			return I2C_NACK;
    6e5e:	f06f 0301 	mvn.w	r3, #1
    6e62:	e000      	b.n	6e66 <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    6e64:	2300      	movs	r3, #0
}
    6e66:	4618      	mov	r0, r3
    6e68:	371c      	adds	r7, #28
    6e6a:	46bd      	mov	sp, r7
    6e6c:	bd90      	pop	{r4, r7, pc}
    6e6e:	bf00      	nop
    6e70:	00006709 	.word	0x00006709
    6e74:	00006b41 	.word	0x00006b41
    6e78:	00006609 	.word	0x00006609
    6e7c:	00006c51 	.word	0x00006c51
    6e80:	00006a21 	.word	0x00006a21
    6e84:	000069fd 	.word	0x000069fd
    6e88:	00006a5d 	.word	0x00006a5d
    6e8c:	000068b9 	.word	0x000068b9
    6e90:	00006891 	.word	0x00006891
    6e94:	00006a81 	.word	0x00006a81
    6e98:	00006623 	.word	0x00006623

00006e9c <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    6e9c:	b580      	push	{r7, lr}
    6e9e:	b082      	sub	sp, #8
    6ea0:	af00      	add	r7, sp, #0
    6ea2:	6078      	str	r0, [r7, #4]
    6ea4:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    6ea6:	687b      	ldr	r3, [r7, #4]
    6ea8:	2b00      	cmp	r3, #0
    6eaa:	bf14      	ite	ne
    6eac:	2301      	movne	r3, #1
    6eae:	2300      	moveq	r3, #0
    6eb0:	b2db      	uxtb	r3, r3
    6eb2:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    6eb6:	4908      	ldr	r1, [pc, #32]	; (6ed8 <_i2c_m_sync_init+0x3c>)
    6eb8:	4618      	mov	r0, r3
    6eba:	4b08      	ldr	r3, [pc, #32]	; (6edc <_i2c_m_sync_init+0x40>)
    6ebc:	4798      	blx	r3

	i2c_dev->hw = hw;
    6ebe:	687b      	ldr	r3, [r7, #4]
    6ec0:	683a      	ldr	r2, [r7, #0]
    6ec2:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    6ec4:	687b      	ldr	r3, [r7, #4]
    6ec6:	6839      	ldr	r1, [r7, #0]
    6ec8:	4618      	mov	r0, r3
    6eca:	4b05      	ldr	r3, [pc, #20]	; (6ee0 <_i2c_m_sync_init+0x44>)
    6ecc:	4798      	blx	r3
    6ece:	4603      	mov	r3, r0
}
    6ed0:	4618      	mov	r0, r3
    6ed2:	3708      	adds	r7, #8
    6ed4:	46bd      	mov	sp, r7
    6ed6:	bd80      	pop	{r7, pc}
    6ed8:	00013ce0 	.word	0x00013ce0
    6edc:	0000405d 	.word	0x0000405d
    6ee0:	00007259 	.word	0x00007259

00006ee4 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    6ee4:	b580      	push	{r7, lr}
    6ee6:	b082      	sub	sp, #8
    6ee8:	af00      	add	r7, sp, #0
    6eea:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    6eec:	687b      	ldr	r3, [r7, #4]
    6eee:	2b00      	cmp	r3, #0
    6ef0:	bf14      	ite	ne
    6ef2:	2301      	movne	r3, #1
    6ef4:	2300      	moveq	r3, #0
    6ef6:	b2db      	uxtb	r3, r3
    6ef8:	f240 5235 	movw	r2, #1333	; 0x535
    6efc:	4906      	ldr	r1, [pc, #24]	; (6f18 <_i2c_m_sync_enable+0x34>)
    6efe:	4618      	mov	r0, r3
    6f00:	4b06      	ldr	r3, [pc, #24]	; (6f1c <_i2c_m_sync_enable+0x38>)
    6f02:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    6f04:	687b      	ldr	r3, [r7, #4]
    6f06:	691b      	ldr	r3, [r3, #16]
    6f08:	4618      	mov	r0, r3
    6f0a:	4b05      	ldr	r3, [pc, #20]	; (6f20 <_i2c_m_sync_enable+0x3c>)
    6f0c:	4798      	blx	r3
    6f0e:	4603      	mov	r3, r0
}
    6f10:	4618      	mov	r0, r3
    6f12:	3708      	adds	r7, #8
    6f14:	46bd      	mov	sp, r7
    6f16:	bd80      	pop	{r7, pc}
    6f18:	00013ce0 	.word	0x00013ce0
    6f1c:	0000405d 	.word	0x0000405d
    6f20:	000071cd 	.word	0x000071cd

00006f24 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    6f24:	b580      	push	{r7, lr}
    6f26:	b084      	sub	sp, #16
    6f28:	af00      	add	r7, sp, #0
    6f2a:	6078      	str	r0, [r7, #4]
    6f2c:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    6f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6f32:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    6f34:	687b      	ldr	r3, [r7, #4]
    6f36:	691b      	ldr	r3, [r3, #16]
    6f38:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    6f3a:	68b8      	ldr	r0, [r7, #8]
    6f3c:	4b0f      	ldr	r3, [pc, #60]	; (6f7c <_sercom_i2c_sync_wait_bus+0x58>)
    6f3e:	4798      	blx	r3
    6f40:	4603      	mov	r3, r0
    6f42:	461a      	mov	r2, r3
    6f44:	683b      	ldr	r3, [r7, #0]
    6f46:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    6f48:	68fb      	ldr	r3, [r7, #12]
    6f4a:	1e5a      	subs	r2, r3, #1
    6f4c:	60fa      	str	r2, [r7, #12]
    6f4e:	2b00      	cmp	r3, #0
    6f50:	d102      	bne.n	6f58 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    6f52:	f06f 0304 	mvn.w	r3, #4
    6f56:	e00c      	b.n	6f72 <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    6f58:	683b      	ldr	r3, [r7, #0]
    6f5a:	681b      	ldr	r3, [r3, #0]
    6f5c:	f003 0301 	and.w	r3, r3, #1
    6f60:	2b00      	cmp	r3, #0
    6f62:	d105      	bne.n	6f70 <_sercom_i2c_sync_wait_bus+0x4c>
    6f64:	683b      	ldr	r3, [r7, #0]
    6f66:	681b      	ldr	r3, [r3, #0]
    6f68:	f003 0302 	and.w	r3, r3, #2
    6f6c:	2b00      	cmp	r3, #0
    6f6e:	d0e4      	beq.n	6f3a <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    6f70:	2300      	movs	r3, #0
}
    6f72:	4618      	mov	r0, r3
    6f74:	3710      	adds	r7, #16
    6f76:	46bd      	mov	sp, r7
    6f78:	bd80      	pop	{r7, pc}
    6f7a:	bf00      	nop
    6f7c:	0000663d 	.word	0x0000663d

00006f80 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    6f80:	b590      	push	{r4, r7, lr}
    6f82:	b087      	sub	sp, #28
    6f84:	af00      	add	r7, sp, #0
    6f86:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    6f88:	687b      	ldr	r3, [r7, #4]
    6f8a:	691b      	ldr	r3, [r3, #16]
    6f8c:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    6f8e:	687b      	ldr	r3, [r7, #4]
    6f90:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    6f92:	6978      	ldr	r0, [r7, #20]
    6f94:	4b39      	ldr	r3, [pc, #228]	; (707c <_sercom_i2c_sync_send_address+0xfc>)
    6f96:	4798      	blx	r3
    6f98:	4603      	mov	r3, r0
    6f9a:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    6f9c:	687b      	ldr	r3, [r7, #4]
    6f9e:	2b00      	cmp	r3, #0
    6fa0:	bf14      	ite	ne
    6fa2:	2301      	movne	r3, #1
    6fa4:	2300      	moveq	r3, #0
    6fa6:	b2db      	uxtb	r3, r3
    6fa8:	f240 52a5 	movw	r2, #1445	; 0x5a5
    6fac:	4934      	ldr	r1, [pc, #208]	; (7080 <_sercom_i2c_sync_send_address+0x100>)
    6fae:	4618      	mov	r0, r3
    6fb0:	4b34      	ldr	r3, [pc, #208]	; (7084 <_sercom_i2c_sync_send_address+0x104>)
    6fb2:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    6fb4:	693b      	ldr	r3, [r7, #16]
    6fb6:	685b      	ldr	r3, [r3, #4]
    6fb8:	2b01      	cmp	r3, #1
    6fba:	d106      	bne.n	6fca <_sercom_i2c_sync_send_address+0x4a>
    6fbc:	68fb      	ldr	r3, [r7, #12]
    6fbe:	2b00      	cmp	r3, #0
    6fc0:	d003      	beq.n	6fca <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    6fc2:	6978      	ldr	r0, [r7, #20]
    6fc4:	4b30      	ldr	r3, [pc, #192]	; (7088 <_sercom_i2c_sync_send_address+0x108>)
    6fc6:	4798      	blx	r3
    6fc8:	e002      	b.n	6fd0 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    6fca:	6978      	ldr	r0, [r7, #20]
    6fcc:	4b2f      	ldr	r3, [pc, #188]	; (708c <_sercom_i2c_sync_send_address+0x10c>)
    6fce:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    6fd0:	693b      	ldr	r3, [r7, #16]
    6fd2:	881b      	ldrh	r3, [r3, #0]
    6fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6fd8:	2b00      	cmp	r3, #0
    6fda:	d022      	beq.n	7022 <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    6fdc:	693b      	ldr	r3, [r7, #16]
    6fde:	885b      	ldrh	r3, [r3, #2]
    6fe0:	b29b      	uxth	r3, r3
    6fe2:	f003 0301 	and.w	r3, r3, #1
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	d007      	beq.n	6ffa <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    6fea:	693b      	ldr	r3, [r7, #16]
    6fec:	885b      	ldrh	r3, [r3, #2]
    6fee:	b29b      	uxth	r3, r3
    6ff0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    6ff4:	b29a      	uxth	r2, r3
    6ff6:	693b      	ldr	r3, [r7, #16]
    6ff8:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    6ffa:	693b      	ldr	r3, [r7, #16]
    6ffc:	881b      	ldrh	r3, [r3, #0]
    6ffe:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7000:	f240 74fe 	movw	r4, #2046	; 0x7fe
    7004:	401c      	ands	r4, r3
    7006:	6978      	ldr	r0, [r7, #20]
    7008:	4b21      	ldr	r3, [pc, #132]	; (7090 <_sercom_i2c_sync_send_address+0x110>)
    700a:	4798      	blx	r3
    700c:	4603      	mov	r3, r0
    700e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7012:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    7014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    7018:	4619      	mov	r1, r3
    701a:	6978      	ldr	r0, [r7, #20]
    701c:	4b1d      	ldr	r3, [pc, #116]	; (7094 <_sercom_i2c_sync_send_address+0x114>)
    701e:	4798      	blx	r3
    7020:	e01a      	b.n	7058 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    7022:	693b      	ldr	r3, [r7, #16]
    7024:	881b      	ldrh	r3, [r3, #0]
    7026:	005b      	lsls	r3, r3, #1
    7028:	b2db      	uxtb	r3, r3
    702a:	693a      	ldr	r2, [r7, #16]
    702c:	8852      	ldrh	r2, [r2, #2]
    702e:	b292      	uxth	r2, r2
    7030:	f002 0201 	and.w	r2, r2, #1
    7034:	2a00      	cmp	r2, #0
    7036:	bf14      	ite	ne
    7038:	2201      	movne	r2, #1
    703a:	2200      	moveq	r2, #0
    703c:	b2d2      	uxtb	r2, r2
    703e:	4313      	orrs	r3, r2
    7040:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    7042:	6978      	ldr	r0, [r7, #20]
    7044:	4b12      	ldr	r3, [pc, #72]	; (7090 <_sercom_i2c_sync_send_address+0x110>)
    7046:	4798      	blx	r3
    7048:	4603      	mov	r3, r0
    704a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    704e:	4323      	orrs	r3, r4
    7050:	4619      	mov	r1, r3
    7052:	6978      	ldr	r0, [r7, #20]
    7054:	4b0f      	ldr	r3, [pc, #60]	; (7094 <_sercom_i2c_sync_send_address+0x114>)
    7056:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    7058:	f107 0308 	add.w	r3, r7, #8
    705c:	4619      	mov	r1, r3
    705e:	6878      	ldr	r0, [r7, #4]
    7060:	4b0d      	ldr	r3, [pc, #52]	; (7098 <_sercom_i2c_sync_send_address+0x118>)
    7062:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    7064:	68bb      	ldr	r3, [r7, #8]
    7066:	693a      	ldr	r2, [r7, #16]
    7068:	4619      	mov	r1, r3
    706a:	6978      	ldr	r0, [r7, #20]
    706c:	4b0b      	ldr	r3, [pc, #44]	; (709c <_sercom_i2c_sync_send_address+0x11c>)
    706e:	4798      	blx	r3
    7070:	4603      	mov	r3, r0
}
    7072:	4618      	mov	r0, r3
    7074:	371c      	adds	r7, #28
    7076:	46bd      	mov	sp, r7
    7078:	bd90      	pop	{r4, r7, pc}
    707a:	bf00      	nop
    707c:	00006709 	.word	0x00006709
    7080:	00013ce0 	.word	0x00013ce0
    7084:	0000405d 	.word	0x0000405d
    7088:	000068b9 	.word	0x000068b9
    708c:	000068e1 	.word	0x000068e1
    7090:	00006a21 	.word	0x00006a21
    7094:	000069fd 	.word	0x000069fd
    7098:	00006f25 	.word	0x00006f25
    709c:	00006c6d 	.word	0x00006c6d

000070a0 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    70a0:	b580      	push	{r7, lr}
    70a2:	b086      	sub	sp, #24
    70a4:	af00      	add	r7, sp, #0
    70a6:	6078      	str	r0, [r7, #4]
    70a8:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    70aa:	687b      	ldr	r3, [r7, #4]
    70ac:	691b      	ldr	r3, [r3, #16]
    70ae:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    70b0:	687b      	ldr	r3, [r7, #4]
    70b2:	2b00      	cmp	r3, #0
    70b4:	bf14      	ite	ne
    70b6:	2301      	movne	r3, #1
    70b8:	2300      	moveq	r3, #0
    70ba:	b2db      	uxtb	r3, r3
    70bc:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
    70c0:	493b      	ldr	r1, [pc, #236]	; (71b0 <_i2c_m_sync_transfer+0x110>)
    70c2:	4618      	mov	r0, r3
    70c4:	4b3b      	ldr	r3, [pc, #236]	; (71b4 <_i2c_m_sync_transfer+0x114>)
    70c6:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    70c8:	687b      	ldr	r3, [r7, #4]
    70ca:	691b      	ldr	r3, [r3, #16]
    70cc:	2b00      	cmp	r3, #0
    70ce:	bf14      	ite	ne
    70d0:	2301      	movne	r3, #1
    70d2:	2300      	moveq	r3, #0
    70d4:	b2db      	uxtb	r3, r3
    70d6:	f240 52d1 	movw	r2, #1489	; 0x5d1
    70da:	4935      	ldr	r1, [pc, #212]	; (71b0 <_i2c_m_sync_transfer+0x110>)
    70dc:	4618      	mov	r0, r3
    70de:	4b35      	ldr	r3, [pc, #212]	; (71b4 <_i2c_m_sync_transfer+0x114>)
    70e0:	4798      	blx	r3
	ASSERT(msg);
    70e2:	683b      	ldr	r3, [r7, #0]
    70e4:	2b00      	cmp	r3, #0
    70e6:	bf14      	ite	ne
    70e8:	2301      	movne	r3, #1
    70ea:	2300      	moveq	r3, #0
    70ec:	b2db      	uxtb	r3, r3
    70ee:	f240 52d2 	movw	r2, #1490	; 0x5d2
    70f2:	492f      	ldr	r1, [pc, #188]	; (71b0 <_i2c_m_sync_transfer+0x110>)
    70f4:	4618      	mov	r0, r3
    70f6:	4b2f      	ldr	r3, [pc, #188]	; (71b4 <_i2c_m_sync_transfer+0x114>)
    70f8:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    70fa:	687b      	ldr	r3, [r7, #4]
    70fc:	885b      	ldrh	r3, [r3, #2]
    70fe:	b29b      	uxth	r3, r3
    7100:	f403 7380 	and.w	r3, r3, #256	; 0x100
    7104:	2b00      	cmp	r3, #0
    7106:	d002      	beq.n	710e <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    7108:	f06f 0305 	mvn.w	r3, #5
    710c:	e04c      	b.n	71a8 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    710e:	683b      	ldr	r3, [r7, #0]
    7110:	885b      	ldrh	r3, [r3, #2]
    7112:	b29b      	uxth	r3, r3
    7114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7118:	b29a      	uxth	r2, r3
    711a:	683b      	ldr	r3, [r7, #0]
    711c:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    711e:	687b      	ldr	r3, [r7, #4]
    7120:	683a      	ldr	r2, [r7, #0]
    7122:	ca07      	ldmia	r2, {r0, r1, r2}
    7124:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    7128:	6938      	ldr	r0, [r7, #16]
    712a:	4b23      	ldr	r3, [pc, #140]	; (71b8 <_i2c_m_sync_transfer+0x118>)
    712c:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    712e:	6878      	ldr	r0, [r7, #4]
    7130:	4b22      	ldr	r3, [pc, #136]	; (71bc <_i2c_m_sync_transfer+0x11c>)
    7132:	4798      	blx	r3
    7134:	6178      	str	r0, [r7, #20]

	if (ret) {
    7136:	697b      	ldr	r3, [r7, #20]
    7138:	2b00      	cmp	r3, #0
    713a:	d02d      	beq.n	7198 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    713c:	687b      	ldr	r3, [r7, #4]
    713e:	885b      	ldrh	r3, [r3, #2]
    7140:	b29b      	uxth	r3, r3
    7142:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7146:	b29a      	uxth	r2, r3
    7148:	687b      	ldr	r3, [r7, #4]
    714a:	805a      	strh	r2, [r3, #2]

		return ret;
    714c:	697b      	ldr	r3, [r7, #20]
    714e:	e02b      	b.n	71a8 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    7150:	f107 030c 	add.w	r3, r7, #12
    7154:	4619      	mov	r1, r3
    7156:	6878      	ldr	r0, [r7, #4]
    7158:	4b19      	ldr	r3, [pc, #100]	; (71c0 <_i2c_m_sync_transfer+0x120>)
    715a:	4798      	blx	r3
    715c:	6178      	str	r0, [r7, #20]

		if (ret) {
    715e:	697b      	ldr	r3, [r7, #20]
    7160:	2b00      	cmp	r3, #0
    7162:	d012      	beq.n	718a <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    7164:	683b      	ldr	r3, [r7, #0]
    7166:	885b      	ldrh	r3, [r3, #2]
    7168:	b29b      	uxth	r3, r3
    716a:	b21b      	sxth	r3, r3
    716c:	2b00      	cmp	r3, #0
    716e:	da02      	bge.n	7176 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    7170:	6938      	ldr	r0, [r7, #16]
    7172:	4b14      	ldr	r3, [pc, #80]	; (71c4 <_i2c_m_sync_transfer+0x124>)
    7174:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    7176:	687b      	ldr	r3, [r7, #4]
    7178:	885b      	ldrh	r3, [r3, #2]
    717a:	b29b      	uxth	r3, r3
    717c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    7180:	b29a      	uxth	r2, r3
    7182:	687b      	ldr	r3, [r7, #4]
    7184:	805a      	strh	r2, [r3, #2]

			return ret;
    7186:	697b      	ldr	r3, [r7, #20]
    7188:	e00e      	b.n	71a8 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    718a:	68fb      	ldr	r3, [r7, #12]
    718c:	687a      	ldr	r2, [r7, #4]
    718e:	4619      	mov	r1, r3
    7190:	6938      	ldr	r0, [r7, #16]
    7192:	4b0d      	ldr	r3, [pc, #52]	; (71c8 <_i2c_m_sync_transfer+0x128>)
    7194:	4798      	blx	r3
    7196:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    7198:	687b      	ldr	r3, [r7, #4]
    719a:	885b      	ldrh	r3, [r3, #2]
    719c:	b29b      	uxth	r3, r3
    719e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    71a2:	2b00      	cmp	r3, #0
    71a4:	d1d4      	bne.n	7150 <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    71a6:	697b      	ldr	r3, [r7, #20]
}
    71a8:	4618      	mov	r0, r3
    71aa:	3718      	adds	r7, #24
    71ac:	46bd      	mov	sp, r7
    71ae:	bd80      	pop	{r7, pc}
    71b0:	00013ce0 	.word	0x00013ce0
    71b4:	0000405d 	.word	0x0000405d
    71b8:	00006869 	.word	0x00006869
    71bc:	00006f81 	.word	0x00006f81
    71c0:	00006f25 	.word	0x00006f25
    71c4:	00006c51 	.word	0x00006c51
    71c8:	00006c6d 	.word	0x00006c6d

000071cc <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    71cc:	b580      	push	{r7, lr}
    71ce:	b084      	sub	sp, #16
    71d0:	af00      	add	r7, sp, #0
    71d2:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    71d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    71d8:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    71da:	2304      	movs	r3, #4
    71dc:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    71de:	687b      	ldr	r3, [r7, #4]
    71e0:	2b00      	cmp	r3, #0
    71e2:	bf14      	ite	ne
    71e4:	2301      	movne	r3, #1
    71e6:	2300      	moveq	r3, #0
    71e8:	b2db      	uxtb	r3, r3
    71ea:	f240 6205 	movw	r2, #1541	; 0x605
    71ee:	4915      	ldr	r1, [pc, #84]	; (7244 <_i2c_m_enable_implementation+0x78>)
    71f0:	4618      	mov	r0, r3
    71f2:	4b15      	ldr	r3, [pc, #84]	; (7248 <_i2c_m_enable_implementation+0x7c>)
    71f4:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    71f6:	6878      	ldr	r0, [r7, #4]
    71f8:	4b14      	ldr	r3, [pc, #80]	; (724c <_i2c_m_enable_implementation+0x80>)
    71fa:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    71fc:	e016      	b.n	722c <_i2c_m_enable_implementation+0x60>
		timeout--;
    71fe:	68fb      	ldr	r3, [r7, #12]
    7200:	3b01      	subs	r3, #1
    7202:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    7204:	68fb      	ldr	r3, [r7, #12]
    7206:	2b00      	cmp	r3, #0
    7208:	dc10      	bgt.n	722c <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    720a:	68bb      	ldr	r3, [r7, #8]
    720c:	3b01      	subs	r3, #1
    720e:	60bb      	str	r3, [r7, #8]
    7210:	68bb      	ldr	r3, [r7, #8]
    7212:	2b00      	cmp	r3, #0
    7214:	d007      	beq.n	7226 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    7216:	f64f 73ff 	movw	r3, #65535	; 0xffff
    721a:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    721c:	2110      	movs	r1, #16
    721e:	6878      	ldr	r0, [r7, #4]
    7220:	4b0b      	ldr	r3, [pc, #44]	; (7250 <_i2c_m_enable_implementation+0x84>)
    7222:	4798      	blx	r3
    7224:	e002      	b.n	722c <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    7226:	f06f 0305 	mvn.w	r3, #5
    722a:	e006      	b.n	723a <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    722c:	6878      	ldr	r0, [r7, #4]
    722e:	4b09      	ldr	r3, [pc, #36]	; (7254 <_i2c_m_enable_implementation+0x88>)
    7230:	4798      	blx	r3
    7232:	4603      	mov	r3, r0
    7234:	2b01      	cmp	r3, #1
    7236:	d1e2      	bne.n	71fe <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    7238:	2300      	movs	r3, #0
}
    723a:	4618      	mov	r0, r3
    723c:	3710      	adds	r7, #16
    723e:	46bd      	mov	sp, r7
    7240:	bd80      	pop	{r7, pc}
    7242:	bf00      	nop
    7244:	00013ce0 	.word	0x00013ce0
    7248:	0000405d 	.word	0x0000405d
    724c:	000066b9 	.word	0x000066b9
    7250:	00006b65 	.word	0x00006b65
    7254:	00006b15 	.word	0x00006b15

00007258 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    7258:	b580      	push	{r7, lr}
    725a:	b084      	sub	sp, #16
    725c:	af00      	add	r7, sp, #0
    725e:	6078      	str	r0, [r7, #4]
    7260:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    7262:	6838      	ldr	r0, [r7, #0]
    7264:	4b42      	ldr	r3, [pc, #264]	; (7370 <_i2c_m_sync_init_impl+0x118>)
    7266:	4798      	blx	r3
    7268:	4603      	mov	r3, r0
    726a:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    726c:	2101      	movs	r1, #1
    726e:	6838      	ldr	r0, [r7, #0]
    7270:	4b40      	ldr	r3, [pc, #256]	; (7374 <_i2c_m_sync_init_impl+0x11c>)
    7272:	4798      	blx	r3
    7274:	4603      	mov	r3, r0
    7276:	f083 0301 	eor.w	r3, r3, #1
    727a:	b2db      	uxtb	r3, r3
    727c:	2b00      	cmp	r3, #0
    727e:	d020      	beq.n	72c2 <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    7280:	7bfa      	ldrb	r2, [r7, #15]
    7282:	493d      	ldr	r1, [pc, #244]	; (7378 <_i2c_m_sync_init_impl+0x120>)
    7284:	4613      	mov	r3, r2
    7286:	005b      	lsls	r3, r3, #1
    7288:	4413      	add	r3, r2
    728a:	00db      	lsls	r3, r3, #3
    728c:	440b      	add	r3, r1
    728e:	3304      	adds	r3, #4
    7290:	681b      	ldr	r3, [r3, #0]
    7292:	f003 031c 	and.w	r3, r3, #28
    7296:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    7298:	2102      	movs	r1, #2
    729a:	6838      	ldr	r0, [r7, #0]
    729c:	4b37      	ldr	r3, [pc, #220]	; (737c <_i2c_m_sync_init_impl+0x124>)
    729e:	4798      	blx	r3
    72a0:	4603      	mov	r3, r0
    72a2:	2b00      	cmp	r3, #0
    72a4:	d006      	beq.n	72b4 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    72a6:	6838      	ldr	r0, [r7, #0]
    72a8:	4b35      	ldr	r3, [pc, #212]	; (7380 <_i2c_m_sync_init_impl+0x128>)
    72aa:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    72ac:	2102      	movs	r1, #2
    72ae:	6838      	ldr	r0, [r7, #0]
    72b0:	4b34      	ldr	r3, [pc, #208]	; (7384 <_i2c_m_sync_init_impl+0x12c>)
    72b2:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    72b4:	68bb      	ldr	r3, [r7, #8]
    72b6:	f043 0301 	orr.w	r3, r3, #1
    72ba:	4619      	mov	r1, r3
    72bc:	6838      	ldr	r0, [r7, #0]
    72be:	4b32      	ldr	r3, [pc, #200]	; (7388 <_i2c_m_sync_init_impl+0x130>)
    72c0:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    72c2:	2101      	movs	r1, #1
    72c4:	6838      	ldr	r0, [r7, #0]
    72c6:	4b2f      	ldr	r3, [pc, #188]	; (7384 <_i2c_m_sync_init_impl+0x12c>)
    72c8:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    72ca:	7bfa      	ldrb	r2, [r7, #15]
    72cc:	492a      	ldr	r1, [pc, #168]	; (7378 <_i2c_m_sync_init_impl+0x120>)
    72ce:	4613      	mov	r3, r2
    72d0:	005b      	lsls	r3, r3, #1
    72d2:	4413      	add	r3, r2
    72d4:	00db      	lsls	r3, r3, #3
    72d6:	440b      	add	r3, r1
    72d8:	3304      	adds	r3, #4
    72da:	681b      	ldr	r3, [r3, #0]
    72dc:	4619      	mov	r1, r3
    72de:	6838      	ldr	r0, [r7, #0]
    72e0:	4b29      	ldr	r3, [pc, #164]	; (7388 <_i2c_m_sync_init_impl+0x130>)
    72e2:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    72e4:	7bfa      	ldrb	r2, [r7, #15]
    72e6:	4924      	ldr	r1, [pc, #144]	; (7378 <_i2c_m_sync_init_impl+0x120>)
    72e8:	4613      	mov	r3, r2
    72ea:	005b      	lsls	r3, r3, #1
    72ec:	4413      	add	r3, r2
    72ee:	00db      	lsls	r3, r3, #3
    72f0:	440b      	add	r3, r1
    72f2:	3308      	adds	r3, #8
    72f4:	681b      	ldr	r3, [r3, #0]
    72f6:	4619      	mov	r1, r3
    72f8:	6838      	ldr	r0, [r7, #0]
    72fa:	4b24      	ldr	r3, [pc, #144]	; (738c <_i2c_m_sync_init_impl+0x134>)
    72fc:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    72fe:	7bfa      	ldrb	r2, [r7, #15]
    7300:	491d      	ldr	r1, [pc, #116]	; (7378 <_i2c_m_sync_init_impl+0x120>)
    7302:	4613      	mov	r3, r2
    7304:	005b      	lsls	r3, r3, #1
    7306:	4413      	add	r3, r2
    7308:	00db      	lsls	r3, r3, #3
    730a:	440b      	add	r3, r1
    730c:	330c      	adds	r3, #12
    730e:	681b      	ldr	r3, [r3, #0]
    7310:	4619      	mov	r1, r3
    7312:	6838      	ldr	r0, [r7, #0]
    7314:	4b1e      	ldr	r3, [pc, #120]	; (7390 <_i2c_m_sync_init_impl+0x138>)
    7316:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    7318:	7bfa      	ldrb	r2, [r7, #15]
    731a:	4917      	ldr	r1, [pc, #92]	; (7378 <_i2c_m_sync_init_impl+0x120>)
    731c:	4613      	mov	r3, r2
    731e:	005b      	lsls	r3, r3, #1
    7320:	4413      	add	r3, r2
    7322:	00db      	lsls	r3, r3, #3
    7324:	440b      	add	r3, r1
    7326:	3304      	adds	r3, #4
    7328:	681b      	ldr	r3, [r3, #0]
    732a:	0e1b      	lsrs	r3, r3, #24
    732c:	b29b      	uxth	r3, r3
    732e:	f003 0303 	and.w	r3, r3, #3
    7332:	b29a      	uxth	r2, r3
    7334:	687b      	ldr	r3, [r7, #4]
    7336:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    7338:	687b      	ldr	r3, [r7, #4]
    733a:	899b      	ldrh	r3, [r3, #12]
    733c:	2b01      	cmp	r3, #1
    733e:	bf8c      	ite	hi
    7340:	2301      	movhi	r3, #1
    7342:	2300      	movls	r3, #0
    7344:	b2db      	uxtb	r3, r3
    7346:	4619      	mov	r1, r3
    7348:	6838      	ldr	r0, [r7, #0]
    734a:	4b12      	ldr	r3, [pc, #72]	; (7394 <_i2c_m_sync_init_impl+0x13c>)
    734c:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    734e:	7bfa      	ldrb	r2, [r7, #15]
    7350:	4909      	ldr	r1, [pc, #36]	; (7378 <_i2c_m_sync_init_impl+0x120>)
    7352:	4613      	mov	r3, r2
    7354:	005b      	lsls	r3, r3, #1
    7356:	4413      	add	r3, r2
    7358:	00db      	lsls	r3, r3, #3
    735a:	440b      	add	r3, r1
    735c:	3312      	adds	r3, #18
    735e:	881a      	ldrh	r2, [r3, #0]
    7360:	687b      	ldr	r3, [r7, #4]
    7362:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    7364:	2300      	movs	r3, #0
}
    7366:	4618      	mov	r0, r3
    7368:	3710      	adds	r7, #16
    736a:	46bd      	mov	sp, r7
    736c:	bd80      	pop	{r7, pc}
    736e:	bf00      	nop
    7370:	00006be9 	.word	0x00006be9
    7374:	00006595 	.word	0x00006595
    7378:	20000018 	.word	0x20000018
    737c:	00006739 	.word	0x00006739
    7380:	000066e1 	.word	0x000066e1
    7384:	00006571 	.word	0x00006571
    7388:	00006769 	.word	0x00006769
    738c:	00006939 	.word	0x00006939
    7390:	00006981 	.word	0x00006981
    7394:	000069bd 	.word	0x000069bd

00007398 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
    7398:	b580      	push	{r7, lr}
    739a:	b082      	sub	sp, #8
    739c:	af00      	add	r7, sp, #0
    739e:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    73a0:	2101      	movs	r1, #1
    73a2:	6878      	ldr	r0, [r7, #4]
    73a4:	4b07      	ldr	r3, [pc, #28]	; (73c4 <_spi_sync_enable+0x2c>)
    73a6:	4798      	blx	r3
    73a8:	4603      	mov	r3, r0
    73aa:	2b00      	cmp	r3, #0
    73ac:	d002      	beq.n	73b4 <_spi_sync_enable+0x1c>
		return ERR_BUSY;
    73ae:	f06f 0303 	mvn.w	r3, #3
    73b2:	e003      	b.n	73bc <_spi_sync_enable+0x24>
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);
    73b4:	6878      	ldr	r0, [r7, #4]
    73b6:	4b04      	ldr	r3, [pc, #16]	; (73c8 <_spi_sync_enable+0x30>)
    73b8:	4798      	blx	r3

	return ERR_NONE;
    73ba:	2300      	movs	r3, #0
}
    73bc:	4618      	mov	r0, r3
    73be:	3708      	adds	r7, #8
    73c0:	46bd      	mov	sp, r7
    73c2:	bd80      	pop	{r7, pc}
    73c4:	000065e1 	.word	0x000065e1
    73c8:	0000678d 	.word	0x0000678d

000073cc <_spi_sync_disable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
    73cc:	b580      	push	{r7, lr}
    73ce:	b082      	sub	sp, #8
    73d0:	af00      	add	r7, sp, #0
    73d2:	6078      	str	r0, [r7, #4]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    73d4:	2101      	movs	r1, #1
    73d6:	6878      	ldr	r0, [r7, #4]
    73d8:	4b07      	ldr	r3, [pc, #28]	; (73f8 <_spi_sync_disable+0x2c>)
    73da:	4798      	blx	r3
    73dc:	4603      	mov	r3, r0
    73de:	2b00      	cmp	r3, #0
    73e0:	d002      	beq.n	73e8 <_spi_sync_disable+0x1c>
		return ERR_BUSY;
    73e2:	f06f 0303 	mvn.w	r3, #3
    73e6:	e003      	b.n	73f0 <_spi_sync_disable+0x24>
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    73e8:	6878      	ldr	r0, [r7, #4]
    73ea:	4b04      	ldr	r3, [pc, #16]	; (73fc <_spi_sync_disable+0x30>)
    73ec:	4798      	blx	r3

	return ERR_NONE;
    73ee:	2300      	movs	r3, #0
}
    73f0:	4618      	mov	r0, r3
    73f2:	3708      	adds	r7, #8
    73f4:	46bd      	mov	sp, r7
    73f6:	bd80      	pop	{r7, pc}
    73f8:	000065e1 	.word	0x000065e1
    73fc:	000067ed 	.word	0x000067ed

00007400 <_spi_load_regs_master>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_master(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7400:	b580      	push	{r7, lr}
    7402:	b082      	sub	sp, #8
    7404:	af00      	add	r7, sp, #0
    7406:	6078      	str	r0, [r7, #4]
    7408:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    740a:	687b      	ldr	r3, [r7, #4]
    740c:	2b00      	cmp	r3, #0
    740e:	d004      	beq.n	741a <_spi_load_regs_master+0x1a>
    7410:	683b      	ldr	r3, [r7, #0]
    7412:	2b00      	cmp	r3, #0
    7414:	d001      	beq.n	741a <_spi_load_regs_master+0x1a>
    7416:	2301      	movs	r3, #1
    7418:	e000      	b.n	741c <_spi_load_regs_master+0x1c>
    741a:	2300      	movs	r3, #0
    741c:	f003 0301 	and.w	r3, r3, #1
    7420:	b2db      	uxtb	r3, r3
    7422:	f640 1209 	movw	r2, #2313	; 0x909
    7426:	4915      	ldr	r1, [pc, #84]	; (747c <_spi_load_regs_master+0x7c>)
    7428:	4618      	mov	r0, r3
    742a:	4b15      	ldr	r3, [pc, #84]	; (7480 <_spi_load_regs_master+0x80>)
    742c:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    742e:	683b      	ldr	r3, [r7, #0]
    7430:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    7432:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    7436:	f023 0301 	bic.w	r3, r3, #1
    743a:	4619      	mov	r1, r3
    743c:	6878      	ldr	r0, [r7, #4]
    743e:	4b11      	ldr	r3, [pc, #68]	; (7484 <_spi_load_regs_master+0x84>)
    7440:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(
	    hw,
	    (regs->ctrlb
    7442:	683b      	ldr	r3, [r7, #0]
    7444:	685b      	ldr	r3, [r3, #4]
	     & ~(SERCOM_SPI_CTRLB_MSSEN | SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN))
	        | (SERCOM_SPI_CTRLB_RXEN));
    7446:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    744a:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    744e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    7452:	4619      	mov	r1, r3
    7454:	6878      	ldr	r0, [r7, #4]
    7456:	4b0c      	ldr	r3, [pc, #48]	; (7488 <_spi_load_regs_master+0x88>)
    7458:	4798      	blx	r3
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    745a:	683b      	ldr	r3, [r7, #0]
    745c:	7b1b      	ldrb	r3, [r3, #12]
    745e:	4619      	mov	r1, r3
    7460:	6878      	ldr	r0, [r7, #4]
    7462:	4b0a      	ldr	r3, [pc, #40]	; (748c <_spi_load_regs_master+0x8c>)
    7464:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    7466:	683b      	ldr	r3, [r7, #0]
    7468:	7b5b      	ldrb	r3, [r3, #13]
    746a:	4619      	mov	r1, r3
    746c:	6878      	ldr	r0, [r7, #4]
    746e:	4b08      	ldr	r3, [pc, #32]	; (7490 <_spi_load_regs_master+0x90>)
    7470:	4798      	blx	r3
}
    7472:	bf00      	nop
    7474:	3708      	adds	r7, #8
    7476:	46bd      	mov	sp, r7
    7478:	bd80      	pop	{r7, pc}
    747a:	bf00      	nop
    747c:	00013ce0 	.word	0x00013ce0
    7480:	0000405d 	.word	0x0000405d
    7484:	00006845 	.word	0x00006845
    7488:	0000695d 	.word	0x0000695d
    748c:	0000699d 	.word	0x0000699d
    7490:	00006ad5 	.word	0x00006ad5

00007494 <_spi_load_regs_slave>:
 *  are ignored.
 *  \param[in, out] hw Pointer to the hardware register base.
 *  \param[in] regs Pointer to register configuration values.
 */
static inline void _spi_load_regs_slave(void *const hw, const struct sercomspi_regs_cfg *regs)
{
    7494:	b580      	push	{r7, lr}
    7496:	b082      	sub	sp, #8
    7498:	af00      	add	r7, sp, #0
    749a:	6078      	str	r0, [r7, #4]
    749c:	6039      	str	r1, [r7, #0]
	ASSERT(hw && regs);
    749e:	687b      	ldr	r3, [r7, #4]
    74a0:	2b00      	cmp	r3, #0
    74a2:	d004      	beq.n	74ae <_spi_load_regs_slave+0x1a>
    74a4:	683b      	ldr	r3, [r7, #0]
    74a6:	2b00      	cmp	r3, #0
    74a8:	d001      	beq.n	74ae <_spi_load_regs_slave+0x1a>
    74aa:	2301      	movs	r3, #1
    74ac:	e000      	b.n	74b0 <_spi_load_regs_slave+0x1c>
    74ae:	2300      	movs	r3, #0
    74b0:	f003 0301 	and.w	r3, r3, #1
    74b4:	b2db      	uxtb	r3, r3
    74b6:	f640 121d 	movw	r2, #2333	; 0x91d
    74ba:	491a      	ldr	r1, [pc, #104]	; (7524 <_spi_load_regs_slave+0x90>)
    74bc:	4618      	mov	r0, r3
    74be:	4b1a      	ldr	r3, [pc, #104]	; (7528 <_spi_load_regs_slave+0x94>)
    74c0:	4798      	blx	r3
	hri_sercomspi_write_CTRLA_reg(
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    74c2:	683b      	ldr	r3, [r7, #0]
    74c4:	681b      	ldr	r3, [r3, #0]
	hri_sercomspi_write_CTRLA_reg(
    74c6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    74ca:	f023 0301 	bic.w	r3, r3, #1
    74ce:	4619      	mov	r1, r3
    74d0:	6878      	ldr	r0, [r7, #4]
    74d2:	4b16      	ldr	r3, [pc, #88]	; (752c <_spi_load_regs_slave+0x98>)
    74d4:	4798      	blx	r3
	hri_sercomspi_write_CTRLB_reg(hw,
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    74d6:	683b      	ldr	r3, [r7, #0]
    74d8:	685b      	ldr	r3, [r3, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    74da:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    74de:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    74e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    74e6:	f443 7310 	orr.w	r3, r3, #576	; 0x240
    74ea:	4619      	mov	r1, r3
    74ec:	6878      	ldr	r0, [r7, #4]
    74ee:	4b10      	ldr	r3, [pc, #64]	; (7530 <_spi_load_regs_slave+0x9c>)
    74f0:	4798      	blx	r3
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    74f2:	683b      	ldr	r3, [r7, #0]
    74f4:	689b      	ldr	r3, [r3, #8]
    74f6:	4619      	mov	r1, r3
    74f8:	6878      	ldr	r0, [r7, #4]
    74fa:	4b0e      	ldr	r3, [pc, #56]	; (7534 <_spi_load_regs_slave+0xa0>)
    74fc:	4798      	blx	r3
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    74fe:	683b      	ldr	r3, [r7, #0]
    7500:	7b5b      	ldrb	r3, [r3, #13]
    7502:	4619      	mov	r1, r3
    7504:	6878      	ldr	r0, [r7, #4]
    7506:	4b0c      	ldr	r3, [pc, #48]	; (7538 <_spi_load_regs_slave+0xa4>)
    7508:	4798      	blx	r3
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    750a:	bf00      	nop
    750c:	f04f 31ff 	mov.w	r1, #4294967295
    7510:	6878      	ldr	r0, [r7, #4]
    7512:	4b0a      	ldr	r3, [pc, #40]	; (753c <_spi_load_regs_slave+0xa8>)
    7514:	4798      	blx	r3
    7516:	4603      	mov	r3, r0
    7518:	2b00      	cmp	r3, #0
    751a:	d1f7      	bne.n	750c <_spi_load_regs_slave+0x78>
		;
}
    751c:	bf00      	nop
    751e:	3708      	adds	r7, #8
    7520:	46bd      	mov	sp, r7
    7522:	bd80      	pop	{r7, pc}
    7524:	00013ce0 	.word	0x00013ce0
    7528:	0000405d 	.word	0x0000405d
    752c:	00006845 	.word	0x00006845
    7530:	0000695d 	.word	0x0000695d
    7534:	00006a41 	.word	0x00006a41
    7538:	00006ad5 	.word	0x00006ad5
    753c:	000065e1 	.word	0x000065e1

00007540 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    7540:	b580      	push	{r7, lr}
    7542:	b084      	sub	sp, #16
    7544:	af00      	add	r7, sp, #0
    7546:	6078      	str	r0, [r7, #4]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    7548:	687b      	ldr	r3, [r7, #4]
    754a:	4618      	mov	r0, r3
    754c:	4b11      	ldr	r3, [pc, #68]	; (7594 <_spi_get_regs+0x54>)
    754e:	4798      	blx	r3
    7550:	4603      	mov	r3, r0
    7552:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    7554:	2300      	movs	r3, #0
    7556:	73fb      	strb	r3, [r7, #15]
    7558:	e014      	b.n	7584 <_spi_get_regs+0x44>
		if (sercomspi_regs[i].n == n) {
    755a:	7bfa      	ldrb	r2, [r7, #15]
    755c:	490e      	ldr	r1, [pc, #56]	; (7598 <_spi_get_regs+0x58>)
    755e:	4613      	mov	r3, r2
    7560:	011b      	lsls	r3, r3, #4
    7562:	4413      	add	r3, r2
    7564:	440b      	add	r3, r1
    7566:	3310      	adds	r3, #16
    7568:	781b      	ldrb	r3, [r3, #0]
    756a:	7bba      	ldrb	r2, [r7, #14]
    756c:	429a      	cmp	r2, r3
    756e:	d106      	bne.n	757e <_spi_get_regs+0x3e>
			return &sercomspi_regs[i];
    7570:	7bfa      	ldrb	r2, [r7, #15]
    7572:	4613      	mov	r3, r2
    7574:	011b      	lsls	r3, r3, #4
    7576:	4413      	add	r3, r2
    7578:	4a07      	ldr	r2, [pc, #28]	; (7598 <_spi_get_regs+0x58>)
    757a:	4413      	add	r3, r2
    757c:	e006      	b.n	758c <_spi_get_regs+0x4c>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    757e:	7bfb      	ldrb	r3, [r7, #15]
    7580:	3301      	adds	r3, #1
    7582:	73fb      	strb	r3, [r7, #15]
    7584:	7bfb      	ldrb	r3, [r7, #15]
    7586:	2b01      	cmp	r3, #1
    7588:	d9e7      	bls.n	755a <_spi_get_regs+0x1a>
		}
	}

	return NULL;
    758a:	2300      	movs	r3, #0
}
    758c:	4618      	mov	r0, r3
    758e:	3710      	adds	r7, #16
    7590:	46bd      	mov	sp, r7
    7592:	bd80      	pop	{r7, pc}
    7594:	00006b8d 	.word	0x00006b8d
    7598:	00013d1c 	.word	0x00013d1c

0000759c <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    759c:	b580      	push	{r7, lr}
    759e:	b084      	sub	sp, #16
    75a0:	af00      	add	r7, sp, #0
    75a2:	6078      	str	r0, [r7, #4]
    75a4:	6039      	str	r1, [r7, #0]
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
    75a6:	683b      	ldr	r3, [r7, #0]
    75a8:	4618      	mov	r0, r3
    75aa:	4b35      	ldr	r3, [pc, #212]	; (7680 <_spi_m_sync_init+0xe4>)
    75ac:	4798      	blx	r3
    75ae:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
    75b0:	687b      	ldr	r3, [r7, #4]
    75b2:	2b00      	cmp	r3, #0
    75b4:	d004      	beq.n	75c0 <_spi_m_sync_init+0x24>
    75b6:	683b      	ldr	r3, [r7, #0]
    75b8:	2b00      	cmp	r3, #0
    75ba:	d001      	beq.n	75c0 <_spi_m_sync_init+0x24>
    75bc:	2301      	movs	r3, #1
    75be:	e000      	b.n	75c2 <_spi_m_sync_init+0x26>
    75c0:	2300      	movs	r3, #0
    75c2:	f003 0301 	and.w	r3, r3, #1
    75c6:	b2db      	uxtb	r3, r3
    75c8:	f640 123f 	movw	r2, #2367	; 0x93f
    75cc:	492d      	ldr	r1, [pc, #180]	; (7684 <_spi_m_sync_init+0xe8>)
    75ce:	4618      	mov	r0, r3
    75d0:	4b2d      	ldr	r3, [pc, #180]	; (7688 <_spi_m_sync_init+0xec>)
    75d2:	4798      	blx	r3

	if (regs == NULL) {
    75d4:	68fb      	ldr	r3, [r7, #12]
    75d6:	2b00      	cmp	r3, #0
    75d8:	d102      	bne.n	75e0 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
    75da:	f06f 030c 	mvn.w	r3, #12
    75de:	e04a      	b.n	7676 <_spi_m_sync_init+0xda>
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    75e0:	2101      	movs	r1, #1
    75e2:	6838      	ldr	r0, [r7, #0]
    75e4:	4b29      	ldr	r3, [pc, #164]	; (768c <_spi_m_sync_init+0xf0>)
    75e6:	4798      	blx	r3
    75e8:	4603      	mov	r3, r0
    75ea:	f083 0301 	eor.w	r3, r3, #1
    75ee:	b2db      	uxtb	r3, r3
    75f0:	2b00      	cmp	r3, #0
    75f2:	d019      	beq.n	7628 <_spi_m_sync_init+0x8c>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    75f4:	68fb      	ldr	r3, [r7, #12]
    75f6:	681b      	ldr	r3, [r3, #0]
    75f8:	f003 031c 	and.w	r3, r3, #28
    75fc:	60bb      	str	r3, [r7, #8]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    75fe:	2102      	movs	r1, #2
    7600:	6838      	ldr	r0, [r7, #0]
    7602:	4b23      	ldr	r3, [pc, #140]	; (7690 <_spi_m_sync_init+0xf4>)
    7604:	4798      	blx	r3
    7606:	4603      	mov	r3, r0
    7608:	2b00      	cmp	r3, #0
    760a:	d006      	beq.n	761a <_spi_m_sync_init+0x7e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    760c:	6838      	ldr	r0, [r7, #0]
    760e:	4b21      	ldr	r3, [pc, #132]	; (7694 <_spi_m_sync_init+0xf8>)
    7610:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
    7612:	2102      	movs	r1, #2
    7614:	6838      	ldr	r0, [r7, #0]
    7616:	4b20      	ldr	r3, [pc, #128]	; (7698 <_spi_m_sync_init+0xfc>)
    7618:	4798      	blx	r3
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    761a:	68bb      	ldr	r3, [r7, #8]
    761c:	f043 0301 	orr.w	r3, r3, #1
    7620:	4619      	mov	r1, r3
    7622:	6838      	ldr	r0, [r7, #0]
    7624:	4b1d      	ldr	r3, [pc, #116]	; (769c <_spi_m_sync_init+0x100>)
    7626:	4798      	blx	r3
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
    7628:	2101      	movs	r1, #1
    762a:	6838      	ldr	r0, [r7, #0]
    762c:	4b1a      	ldr	r3, [pc, #104]	; (7698 <_spi_m_sync_init+0xfc>)
    762e:	4798      	blx	r3

	dev->prvt = hw;
    7630:	687b      	ldr	r3, [r7, #4]
    7632:	683a      	ldr	r2, [r7, #0]
    7634:	601a      	str	r2, [r3, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    7636:	68fb      	ldr	r3, [r7, #12]
    7638:	681b      	ldr	r3, [r3, #0]
    763a:	f003 031c 	and.w	r3, r3, #28
    763e:	2b08      	cmp	r3, #8
    7640:	d104      	bne.n	764c <_spi_m_sync_init+0xb0>
		_spi_load_regs_slave(hw, regs);
    7642:	68f9      	ldr	r1, [r7, #12]
    7644:	6838      	ldr	r0, [r7, #0]
    7646:	4b16      	ldr	r3, [pc, #88]	; (76a0 <_spi_m_sync_init+0x104>)
    7648:	4798      	blx	r3
    764a:	e003      	b.n	7654 <_spi_m_sync_init+0xb8>
	} else {
		_spi_load_regs_master(hw, regs);
    764c:	68f9      	ldr	r1, [r7, #12]
    764e:	6838      	ldr	r0, [r7, #0]
    7650:	4b14      	ldr	r3, [pc, #80]	; (76a4 <_spi_m_sync_init+0x108>)
    7652:	4798      	blx	r3
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    7654:	68fb      	ldr	r3, [r7, #12]
    7656:	685b      	ldr	r3, [r3, #4]
    7658:	f003 0307 	and.w	r3, r3, #7
    765c:	2b00      	cmp	r3, #0
    765e:	d101      	bne.n	7664 <_spi_m_sync_init+0xc8>
    7660:	2201      	movs	r2, #1
    7662:	e000      	b.n	7666 <_spi_m_sync_init+0xca>
    7664:	2202      	movs	r2, #2
    7666:	687b      	ldr	r3, [r7, #4]
    7668:	711a      	strb	r2, [r3, #4]

	dev->dummy_byte = regs->dummy_byte;
    766a:	68fb      	ldr	r3, [r7, #12]
    766c:	89db      	ldrh	r3, [r3, #14]
    766e:	b29a      	uxth	r2, r3
    7670:	687b      	ldr	r3, [r7, #4]
    7672:	80da      	strh	r2, [r3, #6]

	return ERR_NONE;
    7674:	2300      	movs	r3, #0
}
    7676:	4618      	mov	r0, r3
    7678:	3710      	adds	r7, #16
    767a:	46bd      	mov	sp, r7
    767c:	bd80      	pop	{r7, pc}
    767e:	bf00      	nop
    7680:	00007541 	.word	0x00007541
    7684:	00013ce0 	.word	0x00013ce0
    7688:	0000405d 	.word	0x0000405d
    768c:	000065e1 	.word	0x000065e1
    7690:	00006815 	.word	0x00006815
    7694:	000067ed 	.word	0x000067ed
    7698:	000065bd 	.word	0x000065bd
    769c:	00006845 	.word	0x00006845
    76a0:	00007495 	.word	0x00007495
    76a4:	00007401 	.word	0x00007401

000076a8 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    76a8:	b580      	push	{r7, lr}
    76aa:	b082      	sub	sp, #8
    76ac:	af00      	add	r7, sp, #0
    76ae:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    76b0:	687b      	ldr	r3, [r7, #4]
    76b2:	2b00      	cmp	r3, #0
    76b4:	d005      	beq.n	76c2 <_spi_m_sync_enable+0x1a>
    76b6:	687b      	ldr	r3, [r7, #4]
    76b8:	681b      	ldr	r3, [r3, #0]
    76ba:	2b00      	cmp	r3, #0
    76bc:	d001      	beq.n	76c2 <_spi_m_sync_enable+0x1a>
    76be:	2301      	movs	r3, #1
    76c0:	e000      	b.n	76c4 <_spi_m_sync_enable+0x1c>
    76c2:	2300      	movs	r3, #0
    76c4:	f003 0301 	and.w	r3, r3, #1
    76c8:	b2db      	uxtb	r3, r3
    76ca:	f640 129e 	movw	r2, #2462	; 0x99e
    76ce:	4907      	ldr	r1, [pc, #28]	; (76ec <_spi_m_sync_enable+0x44>)
    76d0:	4618      	mov	r0, r3
    76d2:	4b07      	ldr	r3, [pc, #28]	; (76f0 <_spi_m_sync_enable+0x48>)
    76d4:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    76d6:	687b      	ldr	r3, [r7, #4]
    76d8:	681b      	ldr	r3, [r3, #0]
    76da:	4618      	mov	r0, r3
    76dc:	4b05      	ldr	r3, [pc, #20]	; (76f4 <_spi_m_sync_enable+0x4c>)
    76de:	4798      	blx	r3
    76e0:	4603      	mov	r3, r0
}
    76e2:	4618      	mov	r0, r3
    76e4:	3708      	adds	r7, #8
    76e6:	46bd      	mov	sp, r7
    76e8:	bd80      	pop	{r7, pc}
    76ea:	bf00      	nop
    76ec:	00013ce0 	.word	0x00013ce0
    76f0:	0000405d 	.word	0x0000405d
    76f4:	00007399 	.word	0x00007399

000076f8 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    76f8:	b580      	push	{r7, lr}
    76fa:	b082      	sub	sp, #8
    76fc:	af00      	add	r7, sp, #0
    76fe:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
    7700:	687b      	ldr	r3, [r7, #4]
    7702:	2b00      	cmp	r3, #0
    7704:	d005      	beq.n	7712 <_spi_m_sync_disable+0x1a>
    7706:	687b      	ldr	r3, [r7, #4]
    7708:	681b      	ldr	r3, [r3, #0]
    770a:	2b00      	cmp	r3, #0
    770c:	d001      	beq.n	7712 <_spi_m_sync_disable+0x1a>
    770e:	2301      	movs	r3, #1
    7710:	e000      	b.n	7714 <_spi_m_sync_disable+0x1c>
    7712:	2300      	movs	r3, #0
    7714:	f003 0301 	and.w	r3, r3, #1
    7718:	b2db      	uxtb	r3, r3
    771a:	f640 12ba 	movw	r2, #2490	; 0x9ba
    771e:	4907      	ldr	r1, [pc, #28]	; (773c <_spi_m_sync_disable+0x44>)
    7720:	4618      	mov	r0, r3
    7722:	4b07      	ldr	r3, [pc, #28]	; (7740 <_spi_m_sync_disable+0x48>)
    7724:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    7726:	687b      	ldr	r3, [r7, #4]
    7728:	681b      	ldr	r3, [r3, #0]
    772a:	4618      	mov	r0, r3
    772c:	4b05      	ldr	r3, [pc, #20]	; (7744 <_spi_m_sync_disable+0x4c>)
    772e:	4798      	blx	r3
    7730:	4603      	mov	r3, r0
}
    7732:	4618      	mov	r0, r3
    7734:	3708      	adds	r7, #8
    7736:	46bd      	mov	sp, r7
    7738:	bd80      	pop	{r7, pc}
    773a:	bf00      	nop
    773c:	00013ce0 	.word	0x00013ce0
    7740:	0000405d 	.word	0x0000405d
    7744:	000073cd 	.word	0x000073cd

00007748 <_spi_wait_bus_idle>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
    7748:	b580      	push	{r7, lr}
    774a:	b082      	sub	sp, #8
    774c:	af00      	add	r7, sp, #0
    774e:	6078      	str	r0, [r7, #4]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    7750:	bf00      	nop
    7752:	2103      	movs	r1, #3
    7754:	6878      	ldr	r0, [r7, #4]
    7756:	4b06      	ldr	r3, [pc, #24]	; (7770 <_spi_wait_bus_idle+0x28>)
    7758:	4798      	blx	r3
    775a:	4603      	mov	r3, r0
    775c:	2b00      	cmp	r3, #0
    775e:	d0f8      	beq.n	7752 <_spi_wait_bus_idle+0xa>
		;
	}
	hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE);
    7760:	2103      	movs	r1, #3
    7762:	6878      	ldr	r0, [r7, #4]
    7764:	4b03      	ldr	r3, [pc, #12]	; (7774 <_spi_wait_bus_idle+0x2c>)
    7766:	4798      	blx	r3
}
    7768:	bf00      	nop
    776a:	3708      	adds	r7, #8
    776c:	46bd      	mov	sp, r7
    776e:	bd80      	pop	{r7, pc}
    7770:	00006657 	.word	0x00006657
    7774:	00006699 	.word	0x00006699

00007778 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check interrupt flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl)
{
    7778:	b580      	push	{r7, lr}
    777a:	b086      	sub	sp, #24
    777c:	af00      	add	r7, sp, #0
    777e:	60f8      	str	r0, [r7, #12]
    7780:	60b9      	str	r1, [r7, #8]
    7782:	607a      	str	r2, [r7, #4]
	uint32_t data;

	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    7784:	68bb      	ldr	r3, [r7, #8]
    7786:	f003 0304 	and.w	r3, r3, #4
    778a:	2b00      	cmp	r3, #0
    778c:	d101      	bne.n	7792 <_spi_rx_check_and_receive+0x1a>
		return false;
    778e:	2300      	movs	r3, #0
    7790:	e022      	b.n	77d8 <_spi_rx_check_and_receive+0x60>
	}

	data = hri_sercomspi_read_DATA_reg(hw);
    7792:	68f8      	ldr	r0, [r7, #12]
    7794:	4b12      	ldr	r3, [pc, #72]	; (77e0 <_spi_rx_check_and_receive+0x68>)
    7796:	4798      	blx	r3
    7798:	6178      	str	r0, [r7, #20]

	if (ctrl->rxbuf) {
    779a:	687b      	ldr	r3, [r7, #4]
    779c:	685b      	ldr	r3, [r3, #4]
    779e:	2b00      	cmp	r3, #0
    77a0:	d014      	beq.n	77cc <_spi_rx_check_and_receive+0x54>
		*ctrl->rxbuf++ = (uint8_t)data;
    77a2:	687b      	ldr	r3, [r7, #4]
    77a4:	685b      	ldr	r3, [r3, #4]
    77a6:	1c59      	adds	r1, r3, #1
    77a8:	687a      	ldr	r2, [r7, #4]
    77aa:	6051      	str	r1, [r2, #4]
    77ac:	697a      	ldr	r2, [r7, #20]
    77ae:	b2d2      	uxtb	r2, r2
    77b0:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
    77b2:	687b      	ldr	r3, [r7, #4]
    77b4:	7c1b      	ldrb	r3, [r3, #16]
    77b6:	2b01      	cmp	r3, #1
    77b8:	d908      	bls.n	77cc <_spi_rx_check_and_receive+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    77ba:	687b      	ldr	r3, [r7, #4]
    77bc:	685b      	ldr	r3, [r3, #4]
    77be:	1c59      	adds	r1, r3, #1
    77c0:	687a      	ldr	r2, [r7, #4]
    77c2:	6051      	str	r1, [r2, #4]
    77c4:	697a      	ldr	r2, [r7, #20]
    77c6:	0a12      	lsrs	r2, r2, #8
    77c8:	b2d2      	uxtb	r2, r2
    77ca:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
    77cc:	687b      	ldr	r3, [r7, #4]
    77ce:	68db      	ldr	r3, [r3, #12]
    77d0:	1c5a      	adds	r2, r3, #1
    77d2:	687b      	ldr	r3, [r7, #4]
    77d4:	60da      	str	r2, [r3, #12]

	return true;
    77d6:	2301      	movs	r3, #1
}
    77d8:	4618      	mov	r0, r3
    77da:	3718      	adds	r7, #24
    77dc:	46bd      	mov	sp, r7
    77de:	bd80      	pop	{r7, pc}
    77e0:	00006abd 	.word	0x00006abd

000077e4 <_spi_tx_check_and_send>:

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check_and_send(void *const hw, const uint32_t iflag, struct _spi_trans_ctrl *ctrl,
                                          uint16_t dummy)
{
    77e4:	b580      	push	{r7, lr}
    77e6:	b086      	sub	sp, #24
    77e8:	af00      	add	r7, sp, #0
    77ea:	60f8      	str	r0, [r7, #12]
    77ec:	60b9      	str	r1, [r7, #8]
    77ee:	607a      	str	r2, [r7, #4]
    77f0:	807b      	strh	r3, [r7, #2]
	uint32_t data;

	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    77f2:	68bb      	ldr	r3, [r7, #8]
    77f4:	f003 0301 	and.w	r3, r3, #1
    77f8:	2b00      	cmp	r3, #0
    77fa:	d028      	beq.n	784e <_spi_tx_check_and_send+0x6a>
		return;
	}

	if (ctrl->txbuf) {
    77fc:	687b      	ldr	r3, [r7, #4]
    77fe:	681b      	ldr	r3, [r3, #0]
    7800:	2b00      	cmp	r3, #0
    7802:	d018      	beq.n	7836 <_spi_tx_check_and_send+0x52>
		data = *ctrl->txbuf++;
    7804:	687b      	ldr	r3, [r7, #4]
    7806:	681b      	ldr	r3, [r3, #0]
    7808:	1c59      	adds	r1, r3, #1
    780a:	687a      	ldr	r2, [r7, #4]
    780c:	6011      	str	r1, [r2, #0]
    780e:	781b      	ldrb	r3, [r3, #0]
    7810:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
    7812:	687b      	ldr	r3, [r7, #4]
    7814:	7c1b      	ldrb	r3, [r3, #16]
    7816:	2b01      	cmp	r3, #1
    7818:	d90f      	bls.n	783a <_spi_tx_check_and_send+0x56>
			data |= (*ctrl->txbuf) << 8;
    781a:	687b      	ldr	r3, [r7, #4]
    781c:	681b      	ldr	r3, [r3, #0]
    781e:	781b      	ldrb	r3, [r3, #0]
    7820:	021b      	lsls	r3, r3, #8
    7822:	461a      	mov	r2, r3
    7824:	697b      	ldr	r3, [r7, #20]
    7826:	4313      	orrs	r3, r2
    7828:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
    782a:	687b      	ldr	r3, [r7, #4]
    782c:	681b      	ldr	r3, [r3, #0]
    782e:	1c5a      	adds	r2, r3, #1
    7830:	687b      	ldr	r3, [r7, #4]
    7832:	601a      	str	r2, [r3, #0]
    7834:	e001      	b.n	783a <_spi_tx_check_and_send+0x56>
		}
	} else {
		data = dummy;
    7836:	887b      	ldrh	r3, [r7, #2]
    7838:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
    783a:	687b      	ldr	r3, [r7, #4]
    783c:	689b      	ldr	r3, [r3, #8]
    783e:	1c5a      	adds	r2, r3, #1
    7840:	687b      	ldr	r3, [r7, #4]
    7842:	609a      	str	r2, [r3, #8]
	hri_sercomspi_write_DATA_reg(hw, data);
    7844:	6979      	ldr	r1, [r7, #20]
    7846:	68f8      	ldr	r0, [r7, #12]
    7848:	4b03      	ldr	r3, [pc, #12]	; (7858 <_spi_tx_check_and_send+0x74>)
    784a:	4798      	blx	r3
    784c:	e000      	b.n	7850 <_spi_tx_check_and_send+0x6c>
		return;
    784e:	bf00      	nop
}
    7850:	3718      	adds	r7, #24
    7852:	46bd      	mov	sp, r7
    7854:	bd80      	pop	{r7, pc}
    7856:	bf00      	nop
    7858:	00006aa1 	.word	0x00006aa1

0000785c <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
    785c:	b580      	push	{r7, lr}
    785e:	b082      	sub	sp, #8
    7860:	af00      	add	r7, sp, #0
    7862:	6078      	str	r0, [r7, #4]
    7864:	6039      	str	r1, [r7, #0]
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    7866:	687b      	ldr	r3, [r7, #4]
    7868:	f003 0380 	and.w	r3, r3, #128	; 0x80
    786c:	2b00      	cmp	r3, #0
    786e:	d00b      	beq.n	7888 <_spi_err_check+0x2c>
		hri_sercomspi_clear_STATUS_reg(hw, ~0);
    7870:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7874:	6838      	ldr	r0, [r7, #0]
    7876:	4b07      	ldr	r3, [pc, #28]	; (7894 <_spi_err_check+0x38>)
    7878:	4798      	blx	r3
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
    787a:	2180      	movs	r1, #128	; 0x80
    787c:	6838      	ldr	r0, [r7, #0]
    787e:	4b06      	ldr	r3, [pc, #24]	; (7898 <_spi_err_check+0x3c>)
    7880:	4798      	blx	r3
		return ERR_OVERFLOW;
    7882:	f06f 0312 	mvn.w	r3, #18
    7886:	e000      	b.n	788a <_spi_err_check+0x2e>
	}

	return ERR_NONE;
    7888:	2300      	movs	r3, #0
}
    788a:	4618      	mov	r0, r3
    788c:	3708      	adds	r7, #8
    788e:	46bd      	mov	sp, r7
    7890:	bd80      	pop	{r7, pc}
    7892:	bf00      	nop
    7894:	00006af5 	.word	0x00006af5
    7898:	00006699 	.word	0x00006699

0000789c <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    789c:	b590      	push	{r4, r7, lr}
    789e:	b08b      	sub	sp, #44	; 0x2c
    78a0:	af00      	add	r7, sp, #0
    78a2:	6078      	str	r0, [r7, #4]
    78a4:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
    78a6:	687b      	ldr	r3, [r7, #4]
    78a8:	681b      	ldr	r3, [r3, #0]
    78aa:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
    78ac:	2300      	movs	r3, #0
    78ae:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    78b0:	683b      	ldr	r3, [r7, #0]
    78b2:	681b      	ldr	r3, [r3, #0]
    78b4:	60bb      	str	r3, [r7, #8]
    78b6:	683b      	ldr	r3, [r7, #0]
    78b8:	685b      	ldr	r3, [r3, #4]
    78ba:	60fb      	str	r3, [r7, #12]
    78bc:	2300      	movs	r3, #0
    78be:	613b      	str	r3, [r7, #16]
    78c0:	2300      	movs	r3, #0
    78c2:	617b      	str	r3, [r7, #20]
    78c4:	687b      	ldr	r3, [r7, #4]
    78c6:	791b      	ldrb	r3, [r3, #4]
    78c8:	763b      	strb	r3, [r7, #24]

	ASSERT(dev && hw);
    78ca:	687b      	ldr	r3, [r7, #4]
    78cc:	2b00      	cmp	r3, #0
    78ce:	d004      	beq.n	78da <_spi_m_sync_trans+0x3e>
    78d0:	6a3b      	ldr	r3, [r7, #32]
    78d2:	2b00      	cmp	r3, #0
    78d4:	d001      	beq.n	78da <_spi_m_sync_trans+0x3e>
    78d6:	2301      	movs	r3, #1
    78d8:	e000      	b.n	78dc <_spi_m_sync_trans+0x40>
    78da:	2300      	movs	r3, #0
    78dc:	f003 0301 	and.w	r3, r3, #1
    78e0:	b2db      	uxtb	r3, r3
    78e2:	f640 22a3 	movw	r2, #2723	; 0xaa3
    78e6:	492b      	ldr	r1, [pc, #172]	; (7994 <_spi_m_sync_trans+0xf8>)
    78e8:	4618      	mov	r0, r3
    78ea:	4b2b      	ldr	r3, [pc, #172]	; (7998 <_spi_m_sync_trans+0xfc>)
    78ec:	4798      	blx	r3

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    78ee:	2107      	movs	r1, #7
    78f0:	6a38      	ldr	r0, [r7, #32]
    78f2:	4b2a      	ldr	r3, [pc, #168]	; (799c <_spi_m_sync_trans+0x100>)
    78f4:	4798      	blx	r3
    78f6:	4603      	mov	r3, r0
    78f8:	2b00      	cmp	r3, #0
    78fa:	d002      	beq.n	7902 <_spi_m_sync_trans+0x66>
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
    78fc:	f06f 0303 	mvn.w	r3, #3
    7900:	e043      	b.n	798a <_spi_m_sync_trans+0xee>
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    7902:	6a38      	ldr	r0, [r7, #32]
    7904:	4b26      	ldr	r3, [pc, #152]	; (79a0 <_spi_m_sync_trans+0x104>)
    7906:	4798      	blx	r3
    7908:	4603      	mov	r3, r0
    790a:	f083 0301 	eor.w	r3, r3, #1
    790e:	b2db      	uxtb	r3, r3
    7910:	2b00      	cmp	r3, #0
    7912:	d002      	beq.n	791a <_spi_m_sync_trans+0x7e>
		return ERR_NOT_INITIALIZED;
    7914:	f06f 0313 	mvn.w	r3, #19
    7918:	e037      	b.n	798a <_spi_m_sync_trans+0xee>
	}

	for (;;) {
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);
    791a:	6a38      	ldr	r0, [r7, #32]
    791c:	4b21      	ldr	r3, [pc, #132]	; (79a4 <_spi_m_sync_trans+0x108>)
    791e:	4798      	blx	r3
    7920:	4603      	mov	r3, r0
    7922:	61fb      	str	r3, [r7, #28]

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    7924:	f107 0308 	add.w	r3, r7, #8
    7928:	461a      	mov	r2, r3
    792a:	69f9      	ldr	r1, [r7, #28]
    792c:	6a38      	ldr	r0, [r7, #32]
    792e:	4b1e      	ldr	r3, [pc, #120]	; (79a8 <_spi_m_sync_trans+0x10c>)
    7930:	4798      	blx	r3
    7932:	4603      	mov	r3, r0
    7934:	f083 0301 	eor.w	r3, r3, #1
    7938:	b2db      	uxtb	r3, r3
    793a:	2b00      	cmp	r3, #0
    793c:	d00b      	beq.n	7956 <_spi_m_sync_trans+0xba>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    793e:	697a      	ldr	r2, [r7, #20]
    7940:	693b      	ldr	r3, [r7, #16]
    7942:	429a      	cmp	r2, r3
    7944:	d307      	bcc.n	7956 <_spi_m_sync_trans+0xba>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    7946:	687b      	ldr	r3, [r7, #4]
    7948:	88db      	ldrh	r3, [r3, #6]
    794a:	f107 0208 	add.w	r2, r7, #8
    794e:	69f9      	ldr	r1, [r7, #28]
    7950:	6a38      	ldr	r0, [r7, #32]
    7952:	4c16      	ldr	r4, [pc, #88]	; (79ac <_spi_m_sync_trans+0x110>)
    7954:	47a0      	blx	r4
			}
		}

		rc = _spi_err_check(iflag, hw);
    7956:	6a39      	ldr	r1, [r7, #32]
    7958:	69f8      	ldr	r0, [r7, #28]
    795a:	4b15      	ldr	r3, [pc, #84]	; (79b0 <_spi_m_sync_trans+0x114>)
    795c:	4798      	blx	r3
    795e:	6278      	str	r0, [r7, #36]	; 0x24

		if (rc < 0) {
    7960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7962:	2b00      	cmp	r3, #0
    7964:	db0c      	blt.n	7980 <_spi_m_sync_trans+0xe4>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    7966:	693a      	ldr	r2, [r7, #16]
    7968:	683b      	ldr	r3, [r7, #0]
    796a:	689b      	ldr	r3, [r3, #8]
    796c:	429a      	cmp	r2, r3
    796e:	d3d4      	bcc.n	791a <_spi_m_sync_trans+0x7e>
    7970:	697a      	ldr	r2, [r7, #20]
    7972:	683b      	ldr	r3, [r7, #0]
    7974:	689b      	ldr	r3, [r3, #8]
    7976:	429a      	cmp	r2, r3
    7978:	d3cf      	bcc.n	791a <_spi_m_sync_trans+0x7e>
			rc = ctrl.txcnt;
    797a:	693b      	ldr	r3, [r7, #16]
    797c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
    797e:	e000      	b.n	7982 <_spi_m_sync_trans+0xe6>
			break;
    7980:	bf00      	nop
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
    7982:	6a38      	ldr	r0, [r7, #32]
    7984:	4b0b      	ldr	r3, [pc, #44]	; (79b4 <_spi_m_sync_trans+0x118>)
    7986:	4798      	blx	r3

	return rc;
    7988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    798a:	4618      	mov	r0, r3
    798c:	372c      	adds	r7, #44	; 0x2c
    798e:	46bd      	mov	sp, r7
    7990:	bd90      	pop	{r4, r7, pc}
    7992:	bf00      	nop
    7994:	00013ce0 	.word	0x00013ce0
    7998:	0000405d 	.word	0x0000405d
    799c:	000065e1 	.word	0x000065e1
    79a0:	000067b5 	.word	0x000067b5
    79a4:	0000667f 	.word	0x0000667f
    79a8:	00007779 	.word	0x00007779
    79ac:	000077e5 	.word	0x000077e5
    79b0:	0000785d 	.word	0x0000785d
    79b4:	00007749 	.word	0x00007749

000079b8 <__NVIC_EnableIRQ>:
{
    79b8:	b480      	push	{r7}
    79ba:	b083      	sub	sp, #12
    79bc:	af00      	add	r7, sp, #0
    79be:	4603      	mov	r3, r0
    79c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    79c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    79c6:	2b00      	cmp	r3, #0
    79c8:	db0b      	blt.n	79e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    79ca:	4909      	ldr	r1, [pc, #36]	; (79f0 <__NVIC_EnableIRQ+0x38>)
    79cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    79d0:	095b      	lsrs	r3, r3, #5
    79d2:	88fa      	ldrh	r2, [r7, #6]
    79d4:	f002 021f 	and.w	r2, r2, #31
    79d8:	2001      	movs	r0, #1
    79da:	fa00 f202 	lsl.w	r2, r0, r2
    79de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    79e2:	bf00      	nop
    79e4:	370c      	adds	r7, #12
    79e6:	46bd      	mov	sp, r7
    79e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    79ec:	4770      	bx	lr
    79ee:	bf00      	nop
    79f0:	e000e100 	.word	0xe000e100

000079f4 <__NVIC_DisableIRQ>:
{
    79f4:	b480      	push	{r7}
    79f6:	b083      	sub	sp, #12
    79f8:	af00      	add	r7, sp, #0
    79fa:	4603      	mov	r3, r0
    79fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    79fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7a02:	2b00      	cmp	r3, #0
    7a04:	db10      	blt.n	7a28 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7a06:	490b      	ldr	r1, [pc, #44]	; (7a34 <__NVIC_DisableIRQ+0x40>)
    7a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7a0c:	095b      	lsrs	r3, r3, #5
    7a0e:	88fa      	ldrh	r2, [r7, #6]
    7a10:	f002 021f 	and.w	r2, r2, #31
    7a14:	2001      	movs	r0, #1
    7a16:	fa00 f202 	lsl.w	r2, r0, r2
    7a1a:	3320      	adds	r3, #32
    7a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    7a20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7a24:	f3bf 8f6f 	isb	sy
}
    7a28:	bf00      	nop
    7a2a:	370c      	adds	r7, #12
    7a2c:	46bd      	mov	sp, r7
    7a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a32:	4770      	bx	lr
    7a34:	e000e100 	.word	0xe000e100

00007a38 <__NVIC_ClearPendingIRQ>:
{
    7a38:	b480      	push	{r7}
    7a3a:	b083      	sub	sp, #12
    7a3c:	af00      	add	r7, sp, #0
    7a3e:	4603      	mov	r3, r0
    7a40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    7a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7a46:	2b00      	cmp	r3, #0
    7a48:	db0c      	blt.n	7a64 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7a4a:	4909      	ldr	r1, [pc, #36]	; (7a70 <__NVIC_ClearPendingIRQ+0x38>)
    7a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    7a50:	095b      	lsrs	r3, r3, #5
    7a52:	88fa      	ldrh	r2, [r7, #6]
    7a54:	f002 021f 	and.w	r2, r2, #31
    7a58:	2001      	movs	r0, #1
    7a5a:	fa00 f202 	lsl.w	r2, r0, r2
    7a5e:	3360      	adds	r3, #96	; 0x60
    7a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7a64:	bf00      	nop
    7a66:	370c      	adds	r7, #12
    7a68:	46bd      	mov	sp, r7
    7a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a6e:	4770      	bx	lr
    7a70:	e000e100 	.word	0xe000e100

00007a74 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7a74:	b480      	push	{r7}
    7a76:	b083      	sub	sp, #12
    7a78:	af00      	add	r7, sp, #0
    7a7a:	6078      	str	r0, [r7, #4]
    7a7c:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    7a7e:	bf00      	nop
    7a80:	687b      	ldr	r3, [r7, #4]
    7a82:	689a      	ldr	r2, [r3, #8]
    7a84:	683b      	ldr	r3, [r7, #0]
    7a86:	4013      	ands	r3, r2
    7a88:	2b00      	cmp	r3, #0
    7a8a:	d1f9      	bne.n	7a80 <hri_tcc_wait_for_sync+0xc>
	};
}
    7a8c:	bf00      	nop
    7a8e:	370c      	adds	r7, #12
    7a90:	46bd      	mov	sp, r7
    7a92:	f85d 7b04 	ldr.w	r7, [sp], #4
    7a96:	4770      	bx	lr

00007a98 <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    7a98:	b480      	push	{r7}
    7a9a:	b083      	sub	sp, #12
    7a9c:	af00      	add	r7, sp, #0
    7a9e:	6078      	str	r0, [r7, #4]
    7aa0:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    7aa2:	687b      	ldr	r3, [r7, #4]
    7aa4:	689a      	ldr	r2, [r3, #8]
    7aa6:	683b      	ldr	r3, [r7, #0]
    7aa8:	4013      	ands	r3, r2
    7aaa:	2b00      	cmp	r3, #0
    7aac:	bf14      	ite	ne
    7aae:	2301      	movne	r3, #1
    7ab0:	2300      	moveq	r3, #0
    7ab2:	b2db      	uxtb	r3, r3
}
    7ab4:	4618      	mov	r0, r3
    7ab6:	370c      	adds	r7, #12
    7ab8:	46bd      	mov	sp, r7
    7aba:	f85d 7b04 	ldr.w	r7, [sp], #4
    7abe:	4770      	bx	lr

00007ac0 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    7ac0:	b480      	push	{r7}
    7ac2:	b083      	sub	sp, #12
    7ac4:	af00      	add	r7, sp, #0
    7ac6:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    7ac8:	687b      	ldr	r3, [r7, #4]
    7aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7acc:	f003 0301 	and.w	r3, r3, #1
    7ad0:	2b00      	cmp	r3, #0
    7ad2:	bf14      	ite	ne
    7ad4:	2301      	movne	r3, #1
    7ad6:	2300      	moveq	r3, #0
    7ad8:	b2db      	uxtb	r3, r3
}
    7ada:	4618      	mov	r0, r3
    7adc:	370c      	adds	r7, #12
    7ade:	46bd      	mov	sp, r7
    7ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7ae4:	4770      	bx	lr

00007ae6 <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    7ae6:	b480      	push	{r7}
    7ae8:	b083      	sub	sp, #12
    7aea:	af00      	add	r7, sp, #0
    7aec:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    7aee:	687b      	ldr	r3, [r7, #4]
    7af0:	2201      	movs	r2, #1
    7af2:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7af4:	bf00      	nop
    7af6:	370c      	adds	r7, #12
    7af8:	46bd      	mov	sp, r7
    7afa:	f85d 7b04 	ldr.w	r7, [sp], #4
    7afe:	4770      	bx	lr

00007b00 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    7b00:	b480      	push	{r7}
    7b02:	b083      	sub	sp, #12
    7b04:	af00      	add	r7, sp, #0
    7b06:	6078      	str	r0, [r7, #4]
    7b08:	460b      	mov	r3, r1
    7b0a:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    7b0c:	687b      	ldr	r3, [r7, #4]
    7b0e:	78fa      	ldrb	r2, [r7, #3]
    7b10:	715a      	strb	r2, [r3, #5]
}
    7b12:	bf00      	nop
    7b14:	370c      	adds	r7, #12
    7b16:	46bd      	mov	sp, r7
    7b18:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b1c:	4770      	bx	lr

00007b1e <hri_tcc_set_INTEN_OVF_bit>:
{
	((Tcc *)hw)->CTRLBCLR.reg = mask;
}

static inline void hri_tcc_set_INTEN_OVF_bit(const void *const hw)
{
    7b1e:	b480      	push	{r7}
    7b20:	b083      	sub	sp, #12
    7b22:	af00      	add	r7, sp, #0
    7b24:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    7b26:	687b      	ldr	r3, [r7, #4]
    7b28:	2201      	movs	r2, #1
    7b2a:	629a      	str	r2, [r3, #40]	; 0x28
}
    7b2c:	bf00      	nop
    7b2e:	370c      	adds	r7, #12
    7b30:	46bd      	mov	sp, r7
    7b32:	f85d 7b04 	ldr.w	r7, [sp], #4
    7b36:	4770      	bx	lr

00007b38 <hri_tcc_set_CTRLA_SWRST_bit>:
{
	return ((Tcc *)hw)->SYNCBUSY.reg;
}

static inline void hri_tcc_set_CTRLA_SWRST_bit(const void *const hw)
{
    7b38:	b580      	push	{r7, lr}
    7b3a:	b082      	sub	sp, #8
    7b3c:	af00      	add	r7, sp, #0
    7b3e:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    7b40:	687b      	ldr	r3, [r7, #4]
    7b42:	681b      	ldr	r3, [r3, #0]
    7b44:	f043 0201 	orr.w	r2, r3, #1
    7b48:	687b      	ldr	r3, [r7, #4]
    7b4a:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7b4c:	2101      	movs	r1, #1
    7b4e:	6878      	ldr	r0, [r7, #4]
    7b50:	4b02      	ldr	r3, [pc, #8]	; (7b5c <hri_tcc_set_CTRLA_SWRST_bit+0x24>)
    7b52:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7b54:	bf00      	nop
    7b56:	3708      	adds	r7, #8
    7b58:	46bd      	mov	sp, r7
    7b5a:	bd80      	pop	{r7, pc}
    7b5c:	00007a75 	.word	0x00007a75

00007b60 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    7b60:	b580      	push	{r7, lr}
    7b62:	b082      	sub	sp, #8
    7b64:	af00      	add	r7, sp, #0
    7b66:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7b68:	687b      	ldr	r3, [r7, #4]
    7b6a:	681b      	ldr	r3, [r3, #0]
    7b6c:	f043 0202 	orr.w	r2, r3, #2
    7b70:	687b      	ldr	r3, [r7, #4]
    7b72:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7b74:	2103      	movs	r1, #3
    7b76:	6878      	ldr	r0, [r7, #4]
    7b78:	4b02      	ldr	r3, [pc, #8]	; (7b84 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    7b7a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7b7c:	bf00      	nop
    7b7e:	3708      	adds	r7, #8
    7b80:	46bd      	mov	sp, r7
    7b82:	bd80      	pop	{r7, pc}
    7b84:	00007a75 	.word	0x00007a75

00007b88 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    7b88:	b580      	push	{r7, lr}
    7b8a:	b084      	sub	sp, #16
    7b8c:	af00      	add	r7, sp, #0
    7b8e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7b90:	2103      	movs	r1, #3
    7b92:	6878      	ldr	r0, [r7, #4]
    7b94:	4b09      	ldr	r3, [pc, #36]	; (7bbc <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    7b96:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7b98:	687b      	ldr	r3, [r7, #4]
    7b9a:	681b      	ldr	r3, [r3, #0]
    7b9c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    7b9e:	68fb      	ldr	r3, [r7, #12]
    7ba0:	085b      	lsrs	r3, r3, #1
    7ba2:	f003 0301 	and.w	r3, r3, #1
    7ba6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    7ba8:	68fb      	ldr	r3, [r7, #12]
    7baa:	2b00      	cmp	r3, #0
    7bac:	bf14      	ite	ne
    7bae:	2301      	movne	r3, #1
    7bb0:	2300      	moveq	r3, #0
    7bb2:	b2db      	uxtb	r3, r3
}
    7bb4:	4618      	mov	r0, r3
    7bb6:	3710      	adds	r7, #16
    7bb8:	46bd      	mov	sp, r7
    7bba:	bd80      	pop	{r7, pc}
    7bbc:	00007a75 	.word	0x00007a75

00007bc0 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    7bc0:	b580      	push	{r7, lr}
    7bc2:	b082      	sub	sp, #8
    7bc4:	af00      	add	r7, sp, #0
    7bc6:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    7bc8:	687b      	ldr	r3, [r7, #4]
    7bca:	681b      	ldr	r3, [r3, #0]
    7bcc:	f023 0202 	bic.w	r2, r3, #2
    7bd0:	687b      	ldr	r3, [r7, #4]
    7bd2:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7bd4:	2103      	movs	r1, #3
    7bd6:	6878      	ldr	r0, [r7, #4]
    7bd8:	4b02      	ldr	r3, [pc, #8]	; (7be4 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    7bda:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7bdc:	bf00      	nop
    7bde:	3708      	adds	r7, #8
    7be0:	46bd      	mov	sp, r7
    7be2:	bd80      	pop	{r7, pc}
    7be4:	00007a75 	.word	0x00007a75

00007be8 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    7be8:	b580      	push	{r7, lr}
    7bea:	b084      	sub	sp, #16
    7bec:	af00      	add	r7, sp, #0
    7bee:	6078      	str	r0, [r7, #4]
    7bf0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7bf2:	2103      	movs	r1, #3
    7bf4:	6878      	ldr	r0, [r7, #4]
    7bf6:	4b07      	ldr	r3, [pc, #28]	; (7c14 <hri_tcc_get_CTRLA_reg+0x2c>)
    7bf8:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    7bfa:	687b      	ldr	r3, [r7, #4]
    7bfc:	681b      	ldr	r3, [r3, #0]
    7bfe:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    7c00:	68fa      	ldr	r2, [r7, #12]
    7c02:	683b      	ldr	r3, [r7, #0]
    7c04:	4013      	ands	r3, r2
    7c06:	60fb      	str	r3, [r7, #12]
	return tmp;
    7c08:	68fb      	ldr	r3, [r7, #12]
}
    7c0a:	4618      	mov	r0, r3
    7c0c:	3710      	adds	r7, #16
    7c0e:	46bd      	mov	sp, r7
    7c10:	bd80      	pop	{r7, pc}
    7c12:	bf00      	nop
    7c14:	00007a75 	.word	0x00007a75

00007c18 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    7c18:	b580      	push	{r7, lr}
    7c1a:	b082      	sub	sp, #8
    7c1c:	af00      	add	r7, sp, #0
    7c1e:	6078      	str	r0, [r7, #4]
    7c20:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    7c22:	687b      	ldr	r3, [r7, #4]
    7c24:	683a      	ldr	r2, [r7, #0]
    7c26:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    7c28:	2103      	movs	r1, #3
    7c2a:	6878      	ldr	r0, [r7, #4]
    7c2c:	4b02      	ldr	r3, [pc, #8]	; (7c38 <hri_tcc_write_CTRLA_reg+0x20>)
    7c2e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7c30:	bf00      	nop
    7c32:	3708      	adds	r7, #8
    7c34:	46bd      	mov	sp, r7
    7c36:	bd80      	pop	{r7, pc}
    7c38:	00007a75 	.word	0x00007a75

00007c3c <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    7c3c:	b480      	push	{r7}
    7c3e:	b083      	sub	sp, #12
    7c40:	af00      	add	r7, sp, #0
    7c42:	6078      	str	r0, [r7, #4]
    7c44:	460b      	mov	r3, r1
    7c46:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    7c48:	687b      	ldr	r3, [r7, #4]
    7c4a:	78fa      	ldrb	r2, [r7, #3]
    7c4c:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7c4e:	bf00      	nop
    7c50:	370c      	adds	r7, #12
    7c52:	46bd      	mov	sp, r7
    7c54:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c58:	4770      	bx	lr

00007c5a <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    7c5a:	b480      	push	{r7}
    7c5c:	b083      	sub	sp, #12
    7c5e:	af00      	add	r7, sp, #0
    7c60:	6078      	str	r0, [r7, #4]
    7c62:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    7c64:	687b      	ldr	r3, [r7, #4]
    7c66:	683a      	ldr	r2, [r7, #0]
    7c68:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    7c6a:	bf00      	nop
    7c6c:	370c      	adds	r7, #12
    7c6e:	46bd      	mov	sp, r7
    7c70:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c74:	4770      	bx	lr
	...

00007c78 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    7c78:	b580      	push	{r7, lr}
    7c7a:	b082      	sub	sp, #8
    7c7c:	af00      	add	r7, sp, #0
    7c7e:	6078      	str	r0, [r7, #4]
    7c80:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    7c82:	687b      	ldr	r3, [r7, #4]
    7c84:	683a      	ldr	r2, [r7, #0]
    7c86:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7c88:	2180      	movs	r1, #128	; 0x80
    7c8a:	6878      	ldr	r0, [r7, #4]
    7c8c:	4b02      	ldr	r3, [pc, #8]	; (7c98 <hri_tcc_write_PER_reg+0x20>)
    7c8e:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    7c90:	bf00      	nop
    7c92:	3708      	adds	r7, #8
    7c94:	46bd      	mov	sp, r7
    7c96:	bd80      	pop	{r7, pc}
    7c98:	00007a75 	.word	0x00007a75

00007c9c <hri_tcc_read_PER_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_per_reg_t hri_tcc_read_PER_reg(const void *const hw)
{
    7c9c:	b580      	push	{r7, lr}
    7c9e:	b082      	sub	sp, #8
    7ca0:	af00      	add	r7, sp, #0
    7ca2:	6078      	str	r0, [r7, #4]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    7ca4:	2180      	movs	r1, #128	; 0x80
    7ca6:	6878      	ldr	r0, [r7, #4]
    7ca8:	4b03      	ldr	r3, [pc, #12]	; (7cb8 <hri_tcc_read_PER_reg+0x1c>)
    7caa:	4798      	blx	r3
	return ((Tcc *)hw)->PER.reg;
    7cac:	687b      	ldr	r3, [r7, #4]
    7cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
    7cb0:	4618      	mov	r0, r3
    7cb2:	3708      	adds	r7, #8
    7cb4:	46bd      	mov	sp, r7
    7cb6:	bd80      	pop	{r7, pc}
    7cb8:	00007a75 	.word	0x00007a75

00007cbc <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    7cbc:	b480      	push	{r7}
    7cbe:	b083      	sub	sp, #12
    7cc0:	af00      	add	r7, sp, #0
    7cc2:	6078      	str	r0, [r7, #4]
    7cc4:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    7cc6:	687b      	ldr	r3, [r7, #4]
    7cc8:	4a0c      	ldr	r2, [pc, #48]	; (7cfc <_tcc_init_irq_param+0x40>)
    7cca:	4293      	cmp	r3, r2
    7ccc:	d102      	bne.n	7cd4 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _timer_device *)dev;
    7cce:	4a0c      	ldr	r2, [pc, #48]	; (7d00 <_tcc_init_irq_param+0x44>)
    7cd0:	683b      	ldr	r3, [r7, #0]
    7cd2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC1) {
    7cd4:	687b      	ldr	r3, [r7, #4]
    7cd6:	4a0b      	ldr	r2, [pc, #44]	; (7d04 <_tcc_init_irq_param+0x48>)
    7cd8:	4293      	cmp	r3, r2
    7cda:	d102      	bne.n	7ce2 <_tcc_init_irq_param+0x26>
		_tcc1_dev = (struct _timer_device *)dev;
    7cdc:	4a0a      	ldr	r2, [pc, #40]	; (7d08 <_tcc_init_irq_param+0x4c>)
    7cde:	683b      	ldr	r3, [r7, #0]
    7ce0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TCC2) {
    7ce2:	687b      	ldr	r3, [r7, #4]
    7ce4:	4a09      	ldr	r2, [pc, #36]	; (7d0c <_tcc_init_irq_param+0x50>)
    7ce6:	4293      	cmp	r3, r2
    7ce8:	d102      	bne.n	7cf0 <_tcc_init_irq_param+0x34>
		_tcc2_dev = (struct _timer_device *)dev;
    7cea:	4a09      	ldr	r2, [pc, #36]	; (7d10 <_tcc_init_irq_param+0x54>)
    7cec:	683b      	ldr	r3, [r7, #0]
    7cee:	6013      	str	r3, [r2, #0]
	}
}
    7cf0:	bf00      	nop
    7cf2:	370c      	adds	r7, #12
    7cf4:	46bd      	mov	sp, r7
    7cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cfa:	4770      	bx	lr
    7cfc:	41016000 	.word	0x41016000
    7d00:	20000ccc 	.word	0x20000ccc
    7d04:	41018000 	.word	0x41018000
    7d08:	20000cd0 	.word	0x20000cd0
    7d0c:	42000c00 	.word	0x42000c00
    7d10:	20000cd4 	.word	0x20000cd4

00007d14 <_tcc_timer_init>:
/**
 * \brief Initialize TCC
 */
int32_t _tcc_timer_init(struct _timer_device *const device, void *const hw)
{
    7d14:	b580      	push	{r7, lr}
    7d16:	b084      	sub	sp, #16
    7d18:	af00      	add	r7, sp, #0
    7d1a:	6078      	str	r0, [r7, #4]
    7d1c:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7d1e:	6838      	ldr	r0, [r7, #0]
    7d20:	4b33      	ldr	r3, [pc, #204]	; (7df0 <_tcc_timer_init+0xdc>)
    7d22:	4798      	blx	r3
    7d24:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    7d26:	68fb      	ldr	r3, [r7, #12]
    7d28:	2b00      	cmp	r3, #0
    7d2a:	d102      	bne.n	7d32 <_tcc_timer_init+0x1e>
		return ERR_NOT_FOUND;
    7d2c:	f06f 0309 	mvn.w	r3, #9
    7d30:	e05a      	b.n	7de8 <_tcc_timer_init+0xd4>
	}

	device->hw = hw;
    7d32:	687b      	ldr	r3, [r7, #4]
    7d34:	683a      	ldr	r2, [r7, #0]
    7d36:	60da      	str	r2, [r3, #12]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    7d38:	2101      	movs	r1, #1
    7d3a:	6838      	ldr	r0, [r7, #0]
    7d3c:	4b2d      	ldr	r3, [pc, #180]	; (7df4 <_tcc_timer_init+0xe0>)
    7d3e:	4798      	blx	r3
    7d40:	4603      	mov	r3, r0
    7d42:	f083 0301 	eor.w	r3, r3, #1
    7d46:	b2db      	uxtb	r3, r3
    7d48:	2b00      	cmp	r3, #0
    7d4a:	d011      	beq.n	7d70 <_tcc_timer_init+0x5c>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    7d4c:	2102      	movs	r1, #2
    7d4e:	6838      	ldr	r0, [r7, #0]
    7d50:	4b29      	ldr	r3, [pc, #164]	; (7df8 <_tcc_timer_init+0xe4>)
    7d52:	4798      	blx	r3
    7d54:	4603      	mov	r3, r0
    7d56:	2b00      	cmp	r3, #0
    7d58:	d006      	beq.n	7d68 <_tcc_timer_init+0x54>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7d5a:	6838      	ldr	r0, [r7, #0]
    7d5c:	4b27      	ldr	r3, [pc, #156]	; (7dfc <_tcc_timer_init+0xe8>)
    7d5e:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    7d60:	2102      	movs	r1, #2
    7d62:	6838      	ldr	r0, [r7, #0]
    7d64:	4b26      	ldr	r3, [pc, #152]	; (7e00 <_tcc_timer_init+0xec>)
    7d66:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    7d68:	2101      	movs	r1, #1
    7d6a:	6838      	ldr	r0, [r7, #0]
    7d6c:	4b25      	ldr	r3, [pc, #148]	; (7e04 <_tcc_timer_init+0xf0>)
    7d6e:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    7d70:	2101      	movs	r1, #1
    7d72:	6838      	ldr	r0, [r7, #0]
    7d74:	4b22      	ldr	r3, [pc, #136]	; (7e00 <_tcc_timer_init+0xec>)
    7d76:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    7d78:	68fb      	ldr	r3, [r7, #12]
    7d7a:	689b      	ldr	r3, [r3, #8]
    7d7c:	4619      	mov	r1, r3
    7d7e:	6838      	ldr	r0, [r7, #0]
    7d80:	4b20      	ldr	r3, [pc, #128]	; (7e04 <_tcc_timer_init+0xf0>)
    7d82:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    7d84:	68fb      	ldr	r3, [r7, #12]
    7d86:	7b1b      	ldrb	r3, [r3, #12]
    7d88:	4619      	mov	r1, r3
    7d8a:	6838      	ldr	r0, [r7, #0]
    7d8c:	4b1e      	ldr	r3, [pc, #120]	; (7e08 <_tcc_timer_init+0xf4>)
    7d8e:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    7d90:	68fb      	ldr	r3, [r7, #12]
    7d92:	7b5b      	ldrb	r3, [r3, #13]
    7d94:	4619      	mov	r1, r3
    7d96:	6838      	ldr	r0, [r7, #0]
    7d98:	4b1c      	ldr	r3, [pc, #112]	; (7e0c <_tcc_timer_init+0xf8>)
    7d9a:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    7d9c:	68fb      	ldr	r3, [r7, #12]
    7d9e:	691b      	ldr	r3, [r3, #16]
    7da0:	4619      	mov	r1, r3
    7da2:	6838      	ldr	r0, [r7, #0]
    7da4:	4b1a      	ldr	r3, [pc, #104]	; (7e10 <_tcc_timer_init+0xfc>)
    7da6:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg->per);
    7da8:	68fb      	ldr	r3, [r7, #12]
    7daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7dac:	4619      	mov	r1, r3
    7dae:	6838      	ldr	r0, [r7, #0]
    7db0:	4b18      	ldr	r3, [pc, #96]	; (7e14 <_tcc_timer_init+0x100>)
    7db2:	4798      	blx	r3
	hri_tcc_set_INTEN_OVF_bit(hw);
    7db4:	6838      	ldr	r0, [r7, #0]
    7db6:	4b18      	ldr	r3, [pc, #96]	; (7e18 <_tcc_timer_init+0x104>)
    7db8:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    7dba:	6879      	ldr	r1, [r7, #4]
    7dbc:	6838      	ldr	r0, [r7, #0]
    7dbe:	4b17      	ldr	r3, [pc, #92]	; (7e1c <_tcc_timer_init+0x108>)
    7dc0:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7dc2:	68fb      	ldr	r3, [r7, #12]
    7dc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7dc8:	4618      	mov	r0, r3
    7dca:	4b15      	ldr	r3, [pc, #84]	; (7e20 <_tcc_timer_init+0x10c>)
    7dcc:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg->irq);
    7dce:	68fb      	ldr	r3, [r7, #12]
    7dd0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7dd4:	4618      	mov	r0, r3
    7dd6:	4b13      	ldr	r3, [pc, #76]	; (7e24 <_tcc_timer_init+0x110>)
    7dd8:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg->irq);
    7dda:	68fb      	ldr	r3, [r7, #12]
    7ddc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7de0:	4618      	mov	r0, r3
    7de2:	4b11      	ldr	r3, [pc, #68]	; (7e28 <_tcc_timer_init+0x114>)
    7de4:	4798      	blx	r3

	return ERR_NONE;
    7de6:	2300      	movs	r3, #0
}
    7de8:	4618      	mov	r0, r3
    7dea:	3710      	adds	r7, #16
    7dec:	46bd      	mov	sp, r7
    7dee:	bd80      	pop	{r7, pc}
    7df0:	00007ff9 	.word	0x00007ff9
    7df4:	00007a99 	.word	0x00007a99
    7df8:	00007be9 	.word	0x00007be9
    7dfc:	00007bc1 	.word	0x00007bc1
    7e00:	00007a75 	.word	0x00007a75
    7e04:	00007c19 	.word	0x00007c19
    7e08:	00007b01 	.word	0x00007b01
    7e0c:	00007c3d 	.word	0x00007c3d
    7e10:	00007c5b 	.word	0x00007c5b
    7e14:	00007c79 	.word	0x00007c79
    7e18:	00007b1f 	.word	0x00007b1f
    7e1c:	00007cbd 	.word	0x00007cbd
    7e20:	000079f5 	.word	0x000079f5
    7e24:	00007a39 	.word	0x00007a39
    7e28:	000079b9 	.word	0x000079b9

00007e2c <_tcc_timer_deinit>:
/**
 * \brief De-initialize TCC
 */
void _tcc_timer_deinit(struct _timer_device *const device)
{
    7e2c:	b580      	push	{r7, lr}
    7e2e:	b084      	sub	sp, #16
    7e30:	af00      	add	r7, sp, #0
    7e32:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7e34:	687b      	ldr	r3, [r7, #4]
    7e36:	68db      	ldr	r3, [r3, #12]
    7e38:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7e3a:	68f8      	ldr	r0, [r7, #12]
    7e3c:	4b0a      	ldr	r3, [pc, #40]	; (7e68 <_tcc_timer_deinit+0x3c>)
    7e3e:	4798      	blx	r3
    7e40:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7e42:	68bb      	ldr	r3, [r7, #8]
    7e44:	2b00      	cmp	r3, #0
    7e46:	d00b      	beq.n	7e60 <_tcc_timer_deinit+0x34>
		NVIC_DisableIRQ((IRQn_Type)cfg->irq);
    7e48:	68bb      	ldr	r3, [r7, #8]
    7e4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7e4e:	4618      	mov	r0, r3
    7e50:	4b06      	ldr	r3, [pc, #24]	; (7e6c <_tcc_timer_deinit+0x40>)
    7e52:	4798      	blx	r3
		hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    7e54:	68f8      	ldr	r0, [r7, #12]
    7e56:	4b06      	ldr	r3, [pc, #24]	; (7e70 <_tcc_timer_deinit+0x44>)
    7e58:	4798      	blx	r3
		hri_tcc_set_CTRLA_SWRST_bit(hw);
    7e5a:	68f8      	ldr	r0, [r7, #12]
    7e5c:	4b05      	ldr	r3, [pc, #20]	; (7e74 <_tcc_timer_deinit+0x48>)
    7e5e:	4798      	blx	r3
	}
}
    7e60:	bf00      	nop
    7e62:	3710      	adds	r7, #16
    7e64:	46bd      	mov	sp, r7
    7e66:	bd80      	pop	{r7, pc}
    7e68:	00007ff9 	.word	0x00007ff9
    7e6c:	000079f5 	.word	0x000079f5
    7e70:	00007bc1 	.word	0x00007bc1
    7e74:	00007b39 	.word	0x00007b39

00007e78 <_tcc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tcc_timer_start(struct _timer_device *const device)
{
    7e78:	b580      	push	{r7, lr}
    7e7a:	b082      	sub	sp, #8
    7e7c:	af00      	add	r7, sp, #0
    7e7e:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    7e80:	687b      	ldr	r3, [r7, #4]
    7e82:	68db      	ldr	r3, [r3, #12]
    7e84:	4618      	mov	r0, r3
    7e86:	4b03      	ldr	r3, [pc, #12]	; (7e94 <_tcc_timer_start+0x1c>)
    7e88:	4798      	blx	r3
}
    7e8a:	bf00      	nop
    7e8c:	3708      	adds	r7, #8
    7e8e:	46bd      	mov	sp, r7
    7e90:	bd80      	pop	{r7, pc}
    7e92:	bf00      	nop
    7e94:	00007b61 	.word	0x00007b61

00007e98 <_tcc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tcc_timer_stop(struct _timer_device *const device)
{
    7e98:	b580      	push	{r7, lr}
    7e9a:	b082      	sub	sp, #8
    7e9c:	af00      	add	r7, sp, #0
    7e9e:	6078      	str	r0, [r7, #4]
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    7ea0:	687b      	ldr	r3, [r7, #4]
    7ea2:	68db      	ldr	r3, [r3, #12]
    7ea4:	4618      	mov	r0, r3
    7ea6:	4b03      	ldr	r3, [pc, #12]	; (7eb4 <_tcc_timer_stop+0x1c>)
    7ea8:	4798      	blx	r3
}
    7eaa:	bf00      	nop
    7eac:	3708      	adds	r7, #8
    7eae:	46bd      	mov	sp, r7
    7eb0:	bd80      	pop	{r7, pc}
    7eb2:	bf00      	nop
    7eb4:	00007bc1 	.word	0x00007bc1

00007eb8 <_tcc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tcc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    7eb8:	b580      	push	{r7, lr}
    7eba:	b082      	sub	sp, #8
    7ebc:	af00      	add	r7, sp, #0
    7ebe:	6078      	str	r0, [r7, #4]
    7ec0:	6039      	str	r1, [r7, #0]
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    7ec2:	687b      	ldr	r3, [r7, #4]
    7ec4:	68db      	ldr	r3, [r3, #12]
    7ec6:	6839      	ldr	r1, [r7, #0]
    7ec8:	4618      	mov	r0, r3
    7eca:	4b03      	ldr	r3, [pc, #12]	; (7ed8 <_tcc_timer_set_period+0x20>)
    7ecc:	4798      	blx	r3
}
    7ece:	bf00      	nop
    7ed0:	3708      	adds	r7, #8
    7ed2:	46bd      	mov	sp, r7
    7ed4:	bd80      	pop	{r7, pc}
    7ed6:	bf00      	nop
    7ed8:	00007c79 	.word	0x00007c79

00007edc <_tcc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tcc_timer_get_period(const struct _timer_device *const device)
{
    7edc:	b580      	push	{r7, lr}
    7ede:	b082      	sub	sp, #8
    7ee0:	af00      	add	r7, sp, #0
    7ee2:	6078      	str	r0, [r7, #4]
	return hri_tcc_read_PER_reg(device->hw);
    7ee4:	687b      	ldr	r3, [r7, #4]
    7ee6:	68db      	ldr	r3, [r3, #12]
    7ee8:	4618      	mov	r0, r3
    7eea:	4b03      	ldr	r3, [pc, #12]	; (7ef8 <_tcc_timer_get_period+0x1c>)
    7eec:	4798      	blx	r3
    7eee:	4603      	mov	r3, r0
}
    7ef0:	4618      	mov	r0, r3
    7ef2:	3708      	adds	r7, #8
    7ef4:	46bd      	mov	sp, r7
    7ef6:	bd80      	pop	{r7, pc}
    7ef8:	00007c9d 	.word	0x00007c9d

00007efc <_tcc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tcc_timer_is_started(const struct _timer_device *const device)
{
    7efc:	b580      	push	{r7, lr}
    7efe:	b082      	sub	sp, #8
    7f00:	af00      	add	r7, sp, #0
    7f02:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    7f04:	687b      	ldr	r3, [r7, #4]
    7f06:	68db      	ldr	r3, [r3, #12]
    7f08:	4618      	mov	r0, r3
    7f0a:	4b03      	ldr	r3, [pc, #12]	; (7f18 <_tcc_timer_is_started+0x1c>)
    7f0c:	4798      	blx	r3
    7f0e:	4603      	mov	r3, r0
}
    7f10:	4618      	mov	r0, r3
    7f12:	3708      	adds	r7, #8
    7f14:	46bd      	mov	sp, r7
    7f16:	bd80      	pop	{r7, pc}
    7f18:	00007b89 	.word	0x00007b89

00007f1c <_tcc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tcc_get_timer(void)
{
    7f1c:	b480      	push	{r7}
    7f1e:	af00      	add	r7, sp, #0
	return &_tcc_timer_functions;
    7f20:	4b02      	ldr	r3, [pc, #8]	; (7f2c <_tcc_get_timer+0x10>)
}
    7f22:	4618      	mov	r0, r3
    7f24:	46bd      	mov	sp, r7
    7f26:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f2a:	4770      	bx	lr
    7f2c:	200000f0 	.word	0x200000f0

00007f30 <_tcc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tcc_timer_set_irq(struct _timer_device *const device)
{
    7f30:	b580      	push	{r7, lr}
    7f32:	b084      	sub	sp, #16
    7f34:	af00      	add	r7, sp, #0
    7f36:	6078      	str	r0, [r7, #4]
	void *const     hw  = device->hw;
    7f38:	687b      	ldr	r3, [r7, #4]
    7f3a:	68db      	ldr	r3, [r3, #12]
    7f3c:	60fb      	str	r3, [r7, #12]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    7f3e:	68f8      	ldr	r0, [r7, #12]
    7f40:	4b08      	ldr	r3, [pc, #32]	; (7f64 <_tcc_timer_set_irq+0x34>)
    7f42:	4798      	blx	r3
    7f44:	60b8      	str	r0, [r7, #8]
	if (cfg != NULL) {
    7f46:	68bb      	ldr	r3, [r7, #8]
    7f48:	2b00      	cmp	r3, #0
    7f4a:	d006      	beq.n	7f5a <_tcc_timer_set_irq+0x2a>
		_irq_set((IRQn_Type)cfg->irq);
    7f4c:	68bb      	ldr	r3, [r7, #8]
    7f4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    7f52:	b2db      	uxtb	r3, r3
    7f54:	4618      	mov	r0, r3
    7f56:	4b04      	ldr	r3, [pc, #16]	; (7f68 <_tcc_timer_set_irq+0x38>)
    7f58:	4798      	blx	r3
	}
}
    7f5a:	bf00      	nop
    7f5c:	3710      	adds	r7, #16
    7f5e:	46bd      	mov	sp, r7
    7f60:	bd80      	pop	{r7, pc}
    7f62:	bf00      	nop
    7f64:	00007ff9 	.word	0x00007ff9
    7f68:	000048a5 	.word	0x000048a5

00007f6c <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    7f6c:	b580      	push	{r7, lr}
    7f6e:	b084      	sub	sp, #16
    7f70:	af00      	add	r7, sp, #0
    7f72:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    7f74:	687b      	ldr	r3, [r7, #4]
    7f76:	68db      	ldr	r3, [r3, #12]
    7f78:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    7f7a:	68f8      	ldr	r0, [r7, #12]
    7f7c:	4b07      	ldr	r3, [pc, #28]	; (7f9c <tcc_interrupt_handler+0x30>)
    7f7e:	4798      	blx	r3
    7f80:	4603      	mov	r3, r0
    7f82:	2b00      	cmp	r3, #0
    7f84:	d006      	beq.n	7f94 <tcc_interrupt_handler+0x28>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    7f86:	68f8      	ldr	r0, [r7, #12]
    7f88:	4b05      	ldr	r3, [pc, #20]	; (7fa0 <tcc_interrupt_handler+0x34>)
    7f8a:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    7f8c:	687b      	ldr	r3, [r7, #4]
    7f8e:	681b      	ldr	r3, [r3, #0]
    7f90:	6878      	ldr	r0, [r7, #4]
    7f92:	4798      	blx	r3
	}
}
    7f94:	bf00      	nop
    7f96:	3710      	adds	r7, #16
    7f98:	46bd      	mov	sp, r7
    7f9a:	bd80      	pop	{r7, pc}
    7f9c:	00007ac1 	.word	0x00007ac1
    7fa0:	00007ae7 	.word	0x00007ae7

00007fa4 <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    7fa4:	b580      	push	{r7, lr}
    7fa6:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc0_dev);
    7fa8:	4b03      	ldr	r3, [pc, #12]	; (7fb8 <TCC0_0_Handler+0x14>)
    7faa:	681b      	ldr	r3, [r3, #0]
    7fac:	4618      	mov	r0, r3
    7fae:	4b03      	ldr	r3, [pc, #12]	; (7fbc <TCC0_0_Handler+0x18>)
    7fb0:	4798      	blx	r3
}
    7fb2:	bf00      	nop
    7fb4:	bd80      	pop	{r7, pc}
    7fb6:	bf00      	nop
    7fb8:	20000ccc 	.word	0x20000ccc
    7fbc:	00007f6d 	.word	0x00007f6d

00007fc0 <TCC1_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC1_0_Handler(void)
{
    7fc0:	b580      	push	{r7, lr}
    7fc2:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc1_dev);
    7fc4:	4b03      	ldr	r3, [pc, #12]	; (7fd4 <TCC1_0_Handler+0x14>)
    7fc6:	681b      	ldr	r3, [r3, #0]
    7fc8:	4618      	mov	r0, r3
    7fca:	4b03      	ldr	r3, [pc, #12]	; (7fd8 <TCC1_0_Handler+0x18>)
    7fcc:	4798      	blx	r3
}
    7fce:	bf00      	nop
    7fd0:	bd80      	pop	{r7, pc}
    7fd2:	bf00      	nop
    7fd4:	20000cd0 	.word	0x20000cd0
    7fd8:	00007f6d 	.word	0x00007f6d

00007fdc <TCC2_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC2_0_Handler(void)
{
    7fdc:	b580      	push	{r7, lr}
    7fde:	af00      	add	r7, sp, #0
	tcc_interrupt_handler(_tcc2_dev);
    7fe0:	4b03      	ldr	r3, [pc, #12]	; (7ff0 <TCC2_0_Handler+0x14>)
    7fe2:	681b      	ldr	r3, [r3, #0]
    7fe4:	4618      	mov	r0, r3
    7fe6:	4b03      	ldr	r3, [pc, #12]	; (7ff4 <TCC2_0_Handler+0x18>)
    7fe8:	4798      	blx	r3
}
    7fea:	bf00      	nop
    7fec:	bd80      	pop	{r7, pc}
    7fee:	bf00      	nop
    7ff0:	20000cd4 	.word	0x20000cd4
    7ff4:	00007f6d 	.word	0x00007f6d

00007ff8 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    7ff8:	b480      	push	{r7}
    7ffa:	b085      	sub	sp, #20
    7ffc:	af00      	add	r7, sp, #0
    7ffe:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    8000:	2300      	movs	r3, #0
    8002:	73fb      	strb	r3, [r7, #15]
    8004:	e015      	b.n	8032 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    8006:	7bfa      	ldrb	r2, [r7, #15]
    8008:	490f      	ldr	r1, [pc, #60]	; (8048 <_get_tcc_cfg+0x50>)
    800a:	4613      	mov	r3, r2
    800c:	005b      	lsls	r3, r3, #1
    800e:	4413      	add	r3, r2
    8010:	011b      	lsls	r3, r3, #4
    8012:	440b      	add	r3, r1
    8014:	681a      	ldr	r2, [r3, #0]
    8016:	687b      	ldr	r3, [r7, #4]
    8018:	429a      	cmp	r2, r3
    801a:	d107      	bne.n	802c <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    801c:	7bfa      	ldrb	r2, [r7, #15]
    801e:	4613      	mov	r3, r2
    8020:	005b      	lsls	r3, r3, #1
    8022:	4413      	add	r3, r2
    8024:	011b      	lsls	r3, r3, #4
    8026:	4a08      	ldr	r2, [pc, #32]	; (8048 <_get_tcc_cfg+0x50>)
    8028:	4413      	add	r3, r2
    802a:	e006      	b.n	803a <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    802c:	7bfb      	ldrb	r3, [r7, #15]
    802e:	3301      	adds	r3, #1
    8030:	73fb      	strb	r3, [r7, #15]
    8032:	7bfb      	ldrb	r3, [r7, #15]
    8034:	2b02      	cmp	r3, #2
    8036:	d9e6      	bls.n	8006 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    8038:	2300      	movs	r3, #0
}
    803a:	4618      	mov	r0, r3
    803c:	3714      	adds	r7, #20
    803e:	46bd      	mov	sp, r7
    8040:	f85d 7b04 	ldr.w	r7, [sp], #4
    8044:	4770      	bx	lr
    8046:	bf00      	nop
    8048:	20000060 	.word	0x20000060

0000804c <__NVIC_EnableIRQ>:
{
    804c:	b480      	push	{r7}
    804e:	b083      	sub	sp, #12
    8050:	af00      	add	r7, sp, #0
    8052:	4603      	mov	r3, r0
    8054:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    805a:	2b00      	cmp	r3, #0
    805c:	db0b      	blt.n	8076 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    805e:	4909      	ldr	r1, [pc, #36]	; (8084 <__NVIC_EnableIRQ+0x38>)
    8060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8064:	095b      	lsrs	r3, r3, #5
    8066:	88fa      	ldrh	r2, [r7, #6]
    8068:	f002 021f 	and.w	r2, r2, #31
    806c:	2001      	movs	r0, #1
    806e:	fa00 f202 	lsl.w	r2, r0, r2
    8072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8076:	bf00      	nop
    8078:	370c      	adds	r7, #12
    807a:	46bd      	mov	sp, r7
    807c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8080:	4770      	bx	lr
    8082:	bf00      	nop
    8084:	e000e100 	.word	0xe000e100

00008088 <__NVIC_DisableIRQ>:
{
    8088:	b480      	push	{r7}
    808a:	b083      	sub	sp, #12
    808c:	af00      	add	r7, sp, #0
    808e:	4603      	mov	r3, r0
    8090:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8096:	2b00      	cmp	r3, #0
    8098:	db10      	blt.n	80bc <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    809a:	490b      	ldr	r1, [pc, #44]	; (80c8 <__NVIC_DisableIRQ+0x40>)
    809c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    80a0:	095b      	lsrs	r3, r3, #5
    80a2:	88fa      	ldrh	r2, [r7, #6]
    80a4:	f002 021f 	and.w	r2, r2, #31
    80a8:	2001      	movs	r0, #1
    80aa:	fa00 f202 	lsl.w	r2, r0, r2
    80ae:	3320      	adds	r3, #32
    80b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    80b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    80b8:	f3bf 8f6f 	isb	sy
}
    80bc:	bf00      	nop
    80be:	370c      	adds	r7, #12
    80c0:	46bd      	mov	sp, r7
    80c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    80c6:	4770      	bx	lr
    80c8:	e000e100 	.word	0xe000e100

000080cc <__NVIC_ClearPendingIRQ>:
{
    80cc:	b480      	push	{r7}
    80ce:	b083      	sub	sp, #12
    80d0:	af00      	add	r7, sp, #0
    80d2:	4603      	mov	r3, r0
    80d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    80d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    80da:	2b00      	cmp	r3, #0
    80dc:	db0c      	blt.n	80f8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    80de:	4909      	ldr	r1, [pc, #36]	; (8104 <__NVIC_ClearPendingIRQ+0x38>)
    80e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    80e4:	095b      	lsrs	r3, r3, #5
    80e6:	88fa      	ldrh	r2, [r7, #6]
    80e8:	f002 021f 	and.w	r2, r2, #31
    80ec:	2001      	movs	r0, #1
    80ee:	fa00 f202 	lsl.w	r2, r0, r2
    80f2:	3360      	adds	r3, #96	; 0x60
    80f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    80f8:	bf00      	nop
    80fa:	370c      	adds	r7, #12
    80fc:	46bd      	mov	sp, r7
    80fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8102:	4770      	bx	lr
    8104:	e000e100 	.word	0xe000e100

00008108 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    8108:	b480      	push	{r7}
    810a:	b083      	sub	sp, #12
    810c:	af00      	add	r7, sp, #0
    810e:	6078      	str	r0, [r7, #4]
    8110:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    8112:	bf00      	nop
    8114:	687b      	ldr	r3, [r7, #4]
    8116:	691a      	ldr	r2, [r3, #16]
    8118:	683b      	ldr	r3, [r7, #0]
    811a:	4013      	ands	r3, r2
    811c:	2b00      	cmp	r3, #0
    811e:	d1f9      	bne.n	8114 <hri_tc_wait_for_sync+0xc>
	};
}
    8120:	bf00      	nop
    8122:	370c      	adds	r7, #12
    8124:	46bd      	mov	sp, r7
    8126:	f85d 7b04 	ldr.w	r7, [sp], #4
    812a:	4770      	bx	lr

0000812c <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    812c:	b480      	push	{r7}
    812e:	b083      	sub	sp, #12
    8130:	af00      	add	r7, sp, #0
    8132:	6078      	str	r0, [r7, #4]
    8134:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    8136:	687b      	ldr	r3, [r7, #4]
    8138:	691a      	ldr	r2, [r3, #16]
    813a:	683b      	ldr	r3, [r7, #0]
    813c:	4013      	ands	r3, r2
    813e:	2b00      	cmp	r3, #0
    8140:	bf14      	ite	ne
    8142:	2301      	movne	r3, #1
    8144:	2300      	moveq	r3, #0
    8146:	b2db      	uxtb	r3, r3
}
    8148:	4618      	mov	r0, r3
    814a:	370c      	adds	r7, #12
    814c:	46bd      	mov	sp, r7
    814e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8152:	4770      	bx	lr

00008154 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    8154:	b480      	push	{r7}
    8156:	b083      	sub	sp, #12
    8158:	af00      	add	r7, sp, #0
    815a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    815c:	687b      	ldr	r3, [r7, #4]
    815e:	7a9b      	ldrb	r3, [r3, #10]
    8160:	b2db      	uxtb	r3, r3
    8162:	f003 0301 	and.w	r3, r3, #1
    8166:	2b00      	cmp	r3, #0
    8168:	bf14      	ite	ne
    816a:	2301      	movne	r3, #1
    816c:	2300      	moveq	r3, #0
    816e:	b2db      	uxtb	r3, r3
}
    8170:	4618      	mov	r0, r3
    8172:	370c      	adds	r7, #12
    8174:	46bd      	mov	sp, r7
    8176:	f85d 7b04 	ldr.w	r7, [sp], #4
    817a:	4770      	bx	lr

0000817c <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    817c:	b480      	push	{r7}
    817e:	b083      	sub	sp, #12
    8180:	af00      	add	r7, sp, #0
    8182:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    8184:	687b      	ldr	r3, [r7, #4]
    8186:	2201      	movs	r2, #1
    8188:	729a      	strb	r2, [r3, #10]
}
    818a:	bf00      	nop
    818c:	370c      	adds	r7, #12
    818e:	46bd      	mov	sp, r7
    8190:	f85d 7b04 	ldr.w	r7, [sp], #4
    8194:	4770      	bx	lr

00008196 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    8196:	b480      	push	{r7}
    8198:	b083      	sub	sp, #12
    819a:	af00      	add	r7, sp, #0
    819c:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    819e:	687b      	ldr	r3, [r7, #4]
    81a0:	2202      	movs	r2, #2
    81a2:	729a      	strb	r2, [r3, #10]
}
    81a4:	bf00      	nop
    81a6:	370c      	adds	r7, #12
    81a8:	46bd      	mov	sp, r7
    81aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    81ae:	4770      	bx	lr

000081b0 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    81b0:	b480      	push	{r7}
    81b2:	b083      	sub	sp, #12
    81b4:	af00      	add	r7, sp, #0
    81b6:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    81b8:	687b      	ldr	r3, [r7, #4]
    81ba:	2201      	movs	r2, #1
    81bc:	725a      	strb	r2, [r3, #9]
}
    81be:	bf00      	nop
    81c0:	370c      	adds	r7, #12
    81c2:	46bd      	mov	sp, r7
    81c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    81c8:	4770      	bx	lr

000081ca <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    81ca:	b480      	push	{r7}
    81cc:	b083      	sub	sp, #12
    81ce:	af00      	add	r7, sp, #0
    81d0:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    81d2:	687b      	ldr	r3, [r7, #4]
    81d4:	7a5b      	ldrb	r3, [r3, #9]
    81d6:	b2db      	uxtb	r3, r3
    81d8:	085b      	lsrs	r3, r3, #1
    81da:	f003 0301 	and.w	r3, r3, #1
    81de:	2b00      	cmp	r3, #0
    81e0:	bf14      	ite	ne
    81e2:	2301      	movne	r3, #1
    81e4:	2300      	moveq	r3, #0
    81e6:	b2db      	uxtb	r3, r3
}
    81e8:	4618      	mov	r0, r3
    81ea:	370c      	adds	r7, #12
    81ec:	46bd      	mov	sp, r7
    81ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    81f2:	4770      	bx	lr

000081f4 <hri_tc_set_CTRLA_SWRST_bit>:
{
	return ((Tc *)hw)->COUNT16.SYNCBUSY.reg;
}

static inline void hri_tc_set_CTRLA_SWRST_bit(const void *const hw)
{
    81f4:	b580      	push	{r7, lr}
    81f6:	b082      	sub	sp, #8
    81f8:	af00      	add	r7, sp, #0
    81fa:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    81fc:	687b      	ldr	r3, [r7, #4]
    81fe:	681b      	ldr	r3, [r3, #0]
    8200:	f043 0201 	orr.w	r2, r3, #1
    8204:	687b      	ldr	r3, [r7, #4]
    8206:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8208:	2101      	movs	r1, #1
    820a:	6878      	ldr	r0, [r7, #4]
    820c:	4b02      	ldr	r3, [pc, #8]	; (8218 <hri_tc_set_CTRLA_SWRST_bit+0x24>)
    820e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8210:	bf00      	nop
    8212:	3708      	adds	r7, #8
    8214:	46bd      	mov	sp, r7
    8216:	bd80      	pop	{r7, pc}
    8218:	00008109 	.word	0x00008109

0000821c <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    821c:	b580      	push	{r7, lr}
    821e:	b082      	sub	sp, #8
    8220:	af00      	add	r7, sp, #0
    8222:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    8224:	687b      	ldr	r3, [r7, #4]
    8226:	681b      	ldr	r3, [r3, #0]
    8228:	f043 0202 	orr.w	r2, r3, #2
    822c:	687b      	ldr	r3, [r7, #4]
    822e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8230:	2103      	movs	r1, #3
    8232:	6878      	ldr	r0, [r7, #4]
    8234:	4b02      	ldr	r3, [pc, #8]	; (8240 <hri_tc_set_CTRLA_ENABLE_bit+0x24>)
    8236:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8238:	bf00      	nop
    823a:	3708      	adds	r7, #8
    823c:	46bd      	mov	sp, r7
    823e:	bd80      	pop	{r7, pc}
    8240:	00008109 	.word	0x00008109

00008244 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    8244:	b580      	push	{r7, lr}
    8246:	b084      	sub	sp, #16
    8248:	af00      	add	r7, sp, #0
    824a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    824c:	2103      	movs	r1, #3
    824e:	6878      	ldr	r0, [r7, #4]
    8250:	4b09      	ldr	r3, [pc, #36]	; (8278 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    8252:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    8254:	687b      	ldr	r3, [r7, #4]
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    825a:	68fb      	ldr	r3, [r7, #12]
    825c:	085b      	lsrs	r3, r3, #1
    825e:	f003 0301 	and.w	r3, r3, #1
    8262:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    8264:	68fb      	ldr	r3, [r7, #12]
    8266:	2b00      	cmp	r3, #0
    8268:	bf14      	ite	ne
    826a:	2301      	movne	r3, #1
    826c:	2300      	moveq	r3, #0
    826e:	b2db      	uxtb	r3, r3
}
    8270:	4618      	mov	r0, r3
    8272:	3710      	adds	r7, #16
    8274:	46bd      	mov	sp, r7
    8276:	bd80      	pop	{r7, pc}
    8278:	00008109 	.word	0x00008109

0000827c <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    827c:	b580      	push	{r7, lr}
    827e:	b082      	sub	sp, #8
    8280:	af00      	add	r7, sp, #0
    8282:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    8284:	687b      	ldr	r3, [r7, #4]
    8286:	681b      	ldr	r3, [r3, #0]
    8288:	f023 0202 	bic.w	r2, r3, #2
    828c:	687b      	ldr	r3, [r7, #4]
    828e:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    8290:	2103      	movs	r1, #3
    8292:	6878      	ldr	r0, [r7, #4]
    8294:	4b02      	ldr	r3, [pc, #8]	; (82a0 <hri_tc_clear_CTRLA_ENABLE_bit+0x24>)
    8296:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8298:	bf00      	nop
    829a:	3708      	adds	r7, #8
    829c:	46bd      	mov	sp, r7
    829e:	bd80      	pop	{r7, pc}
    82a0:	00008109 	.word	0x00008109

000082a4 <hri_tc_read_CTRLA_MODE_bf>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_MASK);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
    82a4:	b480      	push	{r7}
    82a6:	b085      	sub	sp, #20
    82a8:	af00      	add	r7, sp, #0
    82aa:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    82ac:	687b      	ldr	r3, [r7, #4]
    82ae:	681b      	ldr	r3, [r3, #0]
    82b0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    82b2:	68fb      	ldr	r3, [r7, #12]
    82b4:	089b      	lsrs	r3, r3, #2
    82b6:	f003 0303 	and.w	r3, r3, #3
    82ba:	60fb      	str	r3, [r7, #12]
	return tmp;
    82bc:	68fb      	ldr	r3, [r7, #12]
}
    82be:	4618      	mov	r0, r3
    82c0:	3714      	adds	r7, #20
    82c2:	46bd      	mov	sp, r7
    82c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    82c8:	4770      	bx	lr
	...

000082cc <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    82cc:	b580      	push	{r7, lr}
    82ce:	b084      	sub	sp, #16
    82d0:	af00      	add	r7, sp, #0
    82d2:	6078      	str	r0, [r7, #4]
    82d4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    82d6:	2103      	movs	r1, #3
    82d8:	6878      	ldr	r0, [r7, #4]
    82da:	4b07      	ldr	r3, [pc, #28]	; (82f8 <hri_tc_get_CTRLA_reg+0x2c>)
    82dc:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    82de:	687b      	ldr	r3, [r7, #4]
    82e0:	681b      	ldr	r3, [r3, #0]
    82e2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    82e4:	68fa      	ldr	r2, [r7, #12]
    82e6:	683b      	ldr	r3, [r7, #0]
    82e8:	4013      	ands	r3, r2
    82ea:	60fb      	str	r3, [r7, #12]
	return tmp;
    82ec:	68fb      	ldr	r3, [r7, #12]
}
    82ee:	4618      	mov	r0, r3
    82f0:	3710      	adds	r7, #16
    82f2:	46bd      	mov	sp, r7
    82f4:	bd80      	pop	{r7, pc}
    82f6:	bf00      	nop
    82f8:	00008109 	.word	0x00008109

000082fc <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    82fc:	b580      	push	{r7, lr}
    82fe:	b082      	sub	sp, #8
    8300:	af00      	add	r7, sp, #0
    8302:	6078      	str	r0, [r7, #4]
    8304:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    8306:	687b      	ldr	r3, [r7, #4]
    8308:	683a      	ldr	r2, [r7, #0]
    830a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    830c:	2103      	movs	r1, #3
    830e:	6878      	ldr	r0, [r7, #4]
    8310:	4b02      	ldr	r3, [pc, #8]	; (831c <hri_tc_write_CTRLA_reg+0x20>)
    8312:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8314:	bf00      	nop
    8316:	3708      	adds	r7, #8
    8318:	46bd      	mov	sp, r7
    831a:	bd80      	pop	{r7, pc}
    831c:	00008109 	.word	0x00008109

00008320 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    8320:	b480      	push	{r7}
    8322:	b083      	sub	sp, #12
    8324:	af00      	add	r7, sp, #0
    8326:	6078      	str	r0, [r7, #4]
    8328:	460b      	mov	r3, r1
    832a:	807b      	strh	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    832c:	687b      	ldr	r3, [r7, #4]
    832e:	887a      	ldrh	r2, [r7, #2]
    8330:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    8332:	bf00      	nop
    8334:	370c      	adds	r7, #12
    8336:	46bd      	mov	sp, r7
    8338:	f85d 7b04 	ldr.w	r7, [sp], #4
    833c:	4770      	bx	lr

0000833e <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    833e:	b480      	push	{r7}
    8340:	b083      	sub	sp, #12
    8342:	af00      	add	r7, sp, #0
    8344:	6078      	str	r0, [r7, #4]
    8346:	460b      	mov	r3, r1
    8348:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    834a:	687b      	ldr	r3, [r7, #4]
    834c:	78fa      	ldrb	r2, [r7, #3]
    834e:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    8350:	bf00      	nop
    8352:	370c      	adds	r7, #12
    8354:	46bd      	mov	sp, r7
    8356:	f85d 7b04 	ldr.w	r7, [sp], #4
    835a:	4770      	bx	lr

0000835c <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    835c:	b480      	push	{r7}
    835e:	b083      	sub	sp, #12
    8360:	af00      	add	r7, sp, #0
    8362:	6078      	str	r0, [r7, #4]
    8364:	460b      	mov	r3, r1
    8366:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    8368:	687b      	ldr	r3, [r7, #4]
    836a:	78fa      	ldrb	r2, [r7, #3]
    836c:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    836e:	bf00      	nop
    8370:	370c      	adds	r7, #12
    8372:	46bd      	mov	sp, r7
    8374:	f85d 7b04 	ldr.w	r7, [sp], #4
    8378:	4770      	bx	lr
	...

0000837c <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    837c:	b580      	push	{r7, lr}
    837e:	b082      	sub	sp, #8
    8380:	af00      	add	r7, sp, #0
    8382:	6078      	str	r0, [r7, #4]
    8384:	460b      	mov	r3, r1
    8386:	70fb      	strb	r3, [r7, #3]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    8388:	687b      	ldr	r3, [r7, #4]
    838a:	78fa      	ldrb	r2, [r7, #3]
    838c:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    838e:	2120      	movs	r1, #32
    8390:	6878      	ldr	r0, [r7, #4]
    8392:	4b03      	ldr	r3, [pc, #12]	; (83a0 <hri_tccount8_write_PER_reg+0x24>)
    8394:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8396:	bf00      	nop
    8398:	3708      	adds	r7, #8
    839a:	46bd      	mov	sp, r7
    839c:	bd80      	pop	{r7, pc}
    839e:	bf00      	nop
    83a0:	00008109 	.word	0x00008109

000083a4 <hri_tccount8_read_PER_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount8_per_reg_t hri_tccount8_read_PER_reg(const void *const hw)
{
    83a4:	b580      	push	{r7, lr}
    83a6:	b082      	sub	sp, #8
    83a8:	af00      	add	r7, sp, #0
    83aa:	6078      	str	r0, [r7, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    83ac:	2120      	movs	r1, #32
    83ae:	6878      	ldr	r0, [r7, #4]
    83b0:	4b04      	ldr	r3, [pc, #16]	; (83c4 <hri_tccount8_read_PER_reg+0x20>)
    83b2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
    83b4:	687b      	ldr	r3, [r7, #4]
    83b6:	7edb      	ldrb	r3, [r3, #27]
    83b8:	b2db      	uxtb	r3, r3
}
    83ba:	4618      	mov	r0, r3
    83bc:	3708      	adds	r7, #8
    83be:	46bd      	mov	sp, r7
    83c0:	bd80      	pop	{r7, pc}
    83c2:	bf00      	nop
    83c4:	00008109 	.word	0x00008109

000083c8 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    83c8:	b580      	push	{r7, lr}
    83ca:	b082      	sub	sp, #8
    83cc:	af00      	add	r7, sp, #0
    83ce:	6078      	str	r0, [r7, #4]
    83d0:	460b      	mov	r3, r1
    83d2:	70fb      	strb	r3, [r7, #3]
    83d4:	4613      	mov	r3, r2
    83d6:	70bb      	strb	r3, [r7, #2]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    83d8:	78fb      	ldrb	r3, [r7, #3]
    83da:	687a      	ldr	r2, [r7, #4]
    83dc:	4413      	add	r3, r2
    83de:	78ba      	ldrb	r2, [r7, #2]
    83e0:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    83e2:	21c0      	movs	r1, #192	; 0xc0
    83e4:	6878      	ldr	r0, [r7, #4]
    83e6:	4b03      	ldr	r3, [pc, #12]	; (83f4 <hri_tccount8_write_CC_reg+0x2c>)
    83e8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    83ea:	bf00      	nop
    83ec:	3708      	adds	r7, #8
    83ee:	46bd      	mov	sp, r7
    83f0:	bd80      	pop	{r7, pc}
    83f2:	bf00      	nop
    83f4:	00008109 	.word	0x00008109

000083f8 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    83f8:	b580      	push	{r7, lr}
    83fa:	b082      	sub	sp, #8
    83fc:	af00      	add	r7, sp, #0
    83fe:	6078      	str	r0, [r7, #4]
    8400:	460b      	mov	r3, r1
    8402:	70fb      	strb	r3, [r7, #3]
    8404:	4613      	mov	r3, r2
    8406:	803b      	strh	r3, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    8408:	78fb      	ldrb	r3, [r7, #3]
    840a:	687a      	ldr	r2, [r7, #4]
    840c:	330c      	adds	r3, #12
    840e:	005b      	lsls	r3, r3, #1
    8410:	4413      	add	r3, r2
    8412:	883a      	ldrh	r2, [r7, #0]
    8414:	809a      	strh	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8416:	21c0      	movs	r1, #192	; 0xc0
    8418:	6878      	ldr	r0, [r7, #4]
    841a:	4b03      	ldr	r3, [pc, #12]	; (8428 <hri_tccount16_write_CC_reg+0x30>)
    841c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    841e:	bf00      	nop
    8420:	3708      	adds	r7, #8
    8422:	46bd      	mov	sp, r7
    8424:	bd80      	pop	{r7, pc}
    8426:	bf00      	nop
    8428:	00008109 	.word	0x00008109

0000842c <hri_tccount16_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount16_cc_reg_t hri_tccount16_read_CC_reg(const void *const hw, uint8_t index)
{
    842c:	b580      	push	{r7, lr}
    842e:	b082      	sub	sp, #8
    8430:	af00      	add	r7, sp, #0
    8432:	6078      	str	r0, [r7, #4]
    8434:	460b      	mov	r3, r1
    8436:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8438:	21c0      	movs	r1, #192	; 0xc0
    843a:	6878      	ldr	r0, [r7, #4]
    843c:	4b06      	ldr	r3, [pc, #24]	; (8458 <hri_tccount16_read_CC_reg+0x2c>)
    843e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    8440:	78fb      	ldrb	r3, [r7, #3]
    8442:	687a      	ldr	r2, [r7, #4]
    8444:	330c      	adds	r3, #12
    8446:	005b      	lsls	r3, r3, #1
    8448:	4413      	add	r3, r2
    844a:	889b      	ldrh	r3, [r3, #4]
    844c:	b29b      	uxth	r3, r3
}
    844e:	4618      	mov	r0, r3
    8450:	3708      	adds	r7, #8
    8452:	46bd      	mov	sp, r7
    8454:	bd80      	pop	{r7, pc}
    8456:	bf00      	nop
    8458:	00008109 	.word	0x00008109

0000845c <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    845c:	b580      	push	{r7, lr}
    845e:	b084      	sub	sp, #16
    8460:	af00      	add	r7, sp, #0
    8462:	60f8      	str	r0, [r7, #12]
    8464:	460b      	mov	r3, r1
    8466:	607a      	str	r2, [r7, #4]
    8468:	72fb      	strb	r3, [r7, #11]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    846a:	7afb      	ldrb	r3, [r7, #11]
    846c:	68fa      	ldr	r2, [r7, #12]
    846e:	3306      	adds	r3, #6
    8470:	009b      	lsls	r3, r3, #2
    8472:	4413      	add	r3, r2
    8474:	687a      	ldr	r2, [r7, #4]
    8476:	605a      	str	r2, [r3, #4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8478:	21c0      	movs	r1, #192	; 0xc0
    847a:	68f8      	ldr	r0, [r7, #12]
    847c:	4b02      	ldr	r3, [pc, #8]	; (8488 <hri_tccount32_write_CC_reg+0x2c>)
    847e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    8480:	bf00      	nop
    8482:	3710      	adds	r7, #16
    8484:	46bd      	mov	sp, r7
    8486:	bd80      	pop	{r7, pc}
    8488:	00008109 	.word	0x00008109

0000848c <hri_tccount32_read_CC_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
    848c:	b580      	push	{r7, lr}
    848e:	b082      	sub	sp, #8
    8490:	af00      	add	r7, sp, #0
    8492:	6078      	str	r0, [r7, #4]
    8494:	460b      	mov	r3, r1
    8496:	70fb      	strb	r3, [r7, #3]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    8498:	21c0      	movs	r1, #192	; 0xc0
    849a:	6878      	ldr	r0, [r7, #4]
    849c:	4b05      	ldr	r3, [pc, #20]	; (84b4 <hri_tccount32_read_CC_reg+0x28>)
    849e:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    84a0:	78fb      	ldrb	r3, [r7, #3]
    84a2:	687a      	ldr	r2, [r7, #4]
    84a4:	3306      	adds	r3, #6
    84a6:	009b      	lsls	r3, r3, #2
    84a8:	4413      	add	r3, r2
    84aa:	685b      	ldr	r3, [r3, #4]
}
    84ac:	4618      	mov	r0, r3
    84ae:	3708      	adds	r7, #8
    84b0:	46bd      	mov	sp, r7
    84b2:	bd80      	pop	{r7, pc}
    84b4:	00008109 	.word	0x00008109

000084b8 <_tc_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _tc_timer_init(struct _timer_device *const device, void *const hw)
{
    84b8:	b580      	push	{r7, lr}
    84ba:	b084      	sub	sp, #16
    84bc:	af00      	add	r7, sp, #0
    84be:	6078      	str	r0, [r7, #4]
    84c0:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    84c2:	6838      	ldr	r0, [r7, #0]
    84c4:	4b93      	ldr	r3, [pc, #588]	; (8714 <_tc_timer_init+0x25c>)
    84c6:	4798      	blx	r3
    84c8:	4603      	mov	r3, r0
    84ca:	73fb      	strb	r3, [r7, #15]

	device->hw = hw;
    84cc:	687b      	ldr	r3, [r7, #4]
    84ce:	683a      	ldr	r2, [r7, #0]
    84d0:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    84d2:	22a4      	movs	r2, #164	; 0xa4
    84d4:	4990      	ldr	r1, [pc, #576]	; (8718 <_tc_timer_init+0x260>)
    84d6:	2001      	movs	r0, #1
    84d8:	4b90      	ldr	r3, [pc, #576]	; (871c <_tc_timer_init+0x264>)
    84da:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    84dc:	2101      	movs	r1, #1
    84de:	6838      	ldr	r0, [r7, #0]
    84e0:	4b8f      	ldr	r3, [pc, #572]	; (8720 <_tc_timer_init+0x268>)
    84e2:	4798      	blx	r3
    84e4:	4603      	mov	r3, r0
    84e6:	f083 0301 	eor.w	r3, r3, #1
    84ea:	b2db      	uxtb	r3, r3
    84ec:	2b00      	cmp	r3, #0
    84ee:	d011      	beq.n	8514 <_tc_timer_init+0x5c>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    84f0:	2102      	movs	r1, #2
    84f2:	6838      	ldr	r0, [r7, #0]
    84f4:	4b8b      	ldr	r3, [pc, #556]	; (8724 <_tc_timer_init+0x26c>)
    84f6:	4798      	blx	r3
    84f8:	4603      	mov	r3, r0
    84fa:	2b00      	cmp	r3, #0
    84fc:	d006      	beq.n	850c <_tc_timer_init+0x54>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    84fe:	6838      	ldr	r0, [r7, #0]
    8500:	4b89      	ldr	r3, [pc, #548]	; (8728 <_tc_timer_init+0x270>)
    8502:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    8504:	2102      	movs	r1, #2
    8506:	6838      	ldr	r0, [r7, #0]
    8508:	4b88      	ldr	r3, [pc, #544]	; (872c <_tc_timer_init+0x274>)
    850a:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    850c:	2101      	movs	r1, #1
    850e:	6838      	ldr	r0, [r7, #0]
    8510:	4b87      	ldr	r3, [pc, #540]	; (8730 <_tc_timer_init+0x278>)
    8512:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    8514:	2101      	movs	r1, #1
    8516:	6838      	ldr	r0, [r7, #0]
    8518:	4b84      	ldr	r3, [pc, #528]	; (872c <_tc_timer_init+0x274>)
    851a:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    851c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8520:	4984      	ldr	r1, [pc, #528]	; (8734 <_tc_timer_init+0x27c>)
    8522:	4613      	mov	r3, r2
    8524:	009b      	lsls	r3, r3, #2
    8526:	4413      	add	r3, r2
    8528:	009b      	lsls	r3, r3, #2
    852a:	440b      	add	r3, r1
    852c:	3304      	adds	r3, #4
    852e:	681b      	ldr	r3, [r3, #0]
    8530:	4619      	mov	r1, r3
    8532:	6838      	ldr	r0, [r7, #0]
    8534:	4b7e      	ldr	r3, [pc, #504]	; (8730 <_tc_timer_init+0x278>)
    8536:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    8538:	f997 200f 	ldrsb.w	r2, [r7, #15]
    853c:	497d      	ldr	r1, [pc, #500]	; (8734 <_tc_timer_init+0x27c>)
    853e:	4613      	mov	r3, r2
    8540:	009b      	lsls	r3, r3, #2
    8542:	4413      	add	r3, r2
    8544:	009b      	lsls	r3, r3, #2
    8546:	440b      	add	r3, r1
    8548:	330a      	adds	r3, #10
    854a:	781b      	ldrb	r3, [r3, #0]
    854c:	4619      	mov	r1, r3
    854e:	6838      	ldr	r0, [r7, #0]
    8550:	4b79      	ldr	r3, [pc, #484]	; (8738 <_tc_timer_init+0x280>)
    8552:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    8554:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8558:	4976      	ldr	r1, [pc, #472]	; (8734 <_tc_timer_init+0x27c>)
    855a:	4613      	mov	r3, r2
    855c:	009b      	lsls	r3, r3, #2
    855e:	4413      	add	r3, r2
    8560:	009b      	lsls	r3, r3, #2
    8562:	440b      	add	r3, r1
    8564:	3308      	adds	r3, #8
    8566:	881b      	ldrh	r3, [r3, #0]
    8568:	4619      	mov	r1, r3
    856a:	6838      	ldr	r0, [r7, #0]
    856c:	4b73      	ldr	r3, [pc, #460]	; (873c <_tc_timer_init+0x284>)
    856e:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    8570:	2101      	movs	r1, #1
    8572:	6838      	ldr	r0, [r7, #0]
    8574:	4b72      	ldr	r3, [pc, #456]	; (8740 <_tc_timer_init+0x288>)
    8576:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    8578:	f997 200f 	ldrsb.w	r2, [r7, #15]
    857c:	496d      	ldr	r1, [pc, #436]	; (8734 <_tc_timer_init+0x27c>)
    857e:	4613      	mov	r3, r2
    8580:	009b      	lsls	r3, r3, #2
    8582:	4413      	add	r3, r2
    8584:	009b      	lsls	r3, r3, #2
    8586:	440b      	add	r3, r1
    8588:	3304      	adds	r3, #4
    858a:	681b      	ldr	r3, [r3, #0]
    858c:	f003 030c 	and.w	r3, r3, #12
    8590:	2b08      	cmp	r3, #8
    8592:	d11e      	bne.n	85d2 <_tc_timer_init+0x11a>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    8594:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8598:	4966      	ldr	r1, [pc, #408]	; (8734 <_tc_timer_init+0x27c>)
    859a:	4613      	mov	r3, r2
    859c:	009b      	lsls	r3, r3, #2
    859e:	4413      	add	r3, r2
    85a0:	009b      	lsls	r3, r3, #2
    85a2:	440b      	add	r3, r1
    85a4:	330c      	adds	r3, #12
    85a6:	681b      	ldr	r3, [r3, #0]
    85a8:	461a      	mov	r2, r3
    85aa:	2100      	movs	r1, #0
    85ac:	6838      	ldr	r0, [r7, #0]
    85ae:	4b65      	ldr	r3, [pc, #404]	; (8744 <_tc_timer_init+0x28c>)
    85b0:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    85b2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85b6:	495f      	ldr	r1, [pc, #380]	; (8734 <_tc_timer_init+0x27c>)
    85b8:	4613      	mov	r3, r2
    85ba:	009b      	lsls	r3, r3, #2
    85bc:	4413      	add	r3, r2
    85be:	009b      	lsls	r3, r3, #2
    85c0:	440b      	add	r3, r1
    85c2:	3310      	adds	r3, #16
    85c4:	681b      	ldr	r3, [r3, #0]
    85c6:	461a      	mov	r2, r3
    85c8:	2101      	movs	r1, #1
    85ca:	6838      	ldr	r0, [r7, #0]
    85cc:	4b5d      	ldr	r3, [pc, #372]	; (8744 <_tc_timer_init+0x28c>)
    85ce:	4798      	blx	r3
    85d0:	e06a      	b.n	86a8 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    85d2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85d6:	4957      	ldr	r1, [pc, #348]	; (8734 <_tc_timer_init+0x27c>)
    85d8:	4613      	mov	r3, r2
    85da:	009b      	lsls	r3, r3, #2
    85dc:	4413      	add	r3, r2
    85de:	009b      	lsls	r3, r3, #2
    85e0:	440b      	add	r3, r1
    85e2:	3304      	adds	r3, #4
    85e4:	681b      	ldr	r3, [r3, #0]
    85e6:	f003 030c 	and.w	r3, r3, #12
    85ea:	2b00      	cmp	r3, #0
    85ec:	d120      	bne.n	8630 <_tc_timer_init+0x178>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    85ee:	f997 200f 	ldrsb.w	r2, [r7, #15]
    85f2:	4950      	ldr	r1, [pc, #320]	; (8734 <_tc_timer_init+0x27c>)
    85f4:	4613      	mov	r3, r2
    85f6:	009b      	lsls	r3, r3, #2
    85f8:	4413      	add	r3, r2
    85fa:	009b      	lsls	r3, r3, #2
    85fc:	440b      	add	r3, r1
    85fe:	330c      	adds	r3, #12
    8600:	681b      	ldr	r3, [r3, #0]
    8602:	b29b      	uxth	r3, r3
    8604:	461a      	mov	r2, r3
    8606:	2100      	movs	r1, #0
    8608:	6838      	ldr	r0, [r7, #0]
    860a:	4b4f      	ldr	r3, [pc, #316]	; (8748 <_tc_timer_init+0x290>)
    860c:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    860e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8612:	4948      	ldr	r1, [pc, #288]	; (8734 <_tc_timer_init+0x27c>)
    8614:	4613      	mov	r3, r2
    8616:	009b      	lsls	r3, r3, #2
    8618:	4413      	add	r3, r2
    861a:	009b      	lsls	r3, r3, #2
    861c:	440b      	add	r3, r1
    861e:	3310      	adds	r3, #16
    8620:	681b      	ldr	r3, [r3, #0]
    8622:	b29b      	uxth	r3, r3
    8624:	461a      	mov	r2, r3
    8626:	2101      	movs	r1, #1
    8628:	6838      	ldr	r0, [r7, #0]
    862a:	4b47      	ldr	r3, [pc, #284]	; (8748 <_tc_timer_init+0x290>)
    862c:	4798      	blx	r3
    862e:	e03b      	b.n	86a8 <_tc_timer_init+0x1f0>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    8630:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8634:	493f      	ldr	r1, [pc, #252]	; (8734 <_tc_timer_init+0x27c>)
    8636:	4613      	mov	r3, r2
    8638:	009b      	lsls	r3, r3, #2
    863a:	4413      	add	r3, r2
    863c:	009b      	lsls	r3, r3, #2
    863e:	440b      	add	r3, r1
    8640:	3304      	adds	r3, #4
    8642:	681b      	ldr	r3, [r3, #0]
    8644:	f003 030c 	and.w	r3, r3, #12
    8648:	2b04      	cmp	r3, #4
    864a:	d12d      	bne.n	86a8 <_tc_timer_init+0x1f0>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    864c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8650:	4938      	ldr	r1, [pc, #224]	; (8734 <_tc_timer_init+0x27c>)
    8652:	4613      	mov	r3, r2
    8654:	009b      	lsls	r3, r3, #2
    8656:	4413      	add	r3, r2
    8658:	009b      	lsls	r3, r3, #2
    865a:	440b      	add	r3, r1
    865c:	330c      	adds	r3, #12
    865e:	681b      	ldr	r3, [r3, #0]
    8660:	b2db      	uxtb	r3, r3
    8662:	461a      	mov	r2, r3
    8664:	2100      	movs	r1, #0
    8666:	6838      	ldr	r0, [r7, #0]
    8668:	4b38      	ldr	r3, [pc, #224]	; (874c <_tc_timer_init+0x294>)
    866a:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    866c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8670:	4930      	ldr	r1, [pc, #192]	; (8734 <_tc_timer_init+0x27c>)
    8672:	4613      	mov	r3, r2
    8674:	009b      	lsls	r3, r3, #2
    8676:	4413      	add	r3, r2
    8678:	009b      	lsls	r3, r3, #2
    867a:	440b      	add	r3, r1
    867c:	3310      	adds	r3, #16
    867e:	681b      	ldr	r3, [r3, #0]
    8680:	b2db      	uxtb	r3, r3
    8682:	461a      	mov	r2, r3
    8684:	2101      	movs	r1, #1
    8686:	6838      	ldr	r0, [r7, #0]
    8688:	4b30      	ldr	r3, [pc, #192]	; (874c <_tc_timer_init+0x294>)
    868a:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    868c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8690:	4928      	ldr	r1, [pc, #160]	; (8734 <_tc_timer_init+0x27c>)
    8692:	4613      	mov	r3, r2
    8694:	009b      	lsls	r3, r3, #2
    8696:	4413      	add	r3, r2
    8698:	009b      	lsls	r3, r3, #2
    869a:	440b      	add	r3, r1
    869c:	330b      	adds	r3, #11
    869e:	781b      	ldrb	r3, [r3, #0]
    86a0:	4619      	mov	r1, r3
    86a2:	6838      	ldr	r0, [r7, #0]
    86a4:	4b2a      	ldr	r3, [pc, #168]	; (8750 <_tc_timer_init+0x298>)
    86a6:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    86a8:	6838      	ldr	r0, [r7, #0]
    86aa:	4b2a      	ldr	r3, [pc, #168]	; (8754 <_tc_timer_init+0x29c>)
    86ac:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    86ae:	6879      	ldr	r1, [r7, #4]
    86b0:	6838      	ldr	r0, [r7, #0]
    86b2:	4b29      	ldr	r3, [pc, #164]	; (8758 <_tc_timer_init+0x2a0>)
    86b4:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    86b6:	f997 200f 	ldrsb.w	r2, [r7, #15]
    86ba:	491e      	ldr	r1, [pc, #120]	; (8734 <_tc_timer_init+0x27c>)
    86bc:	4613      	mov	r3, r2
    86be:	009b      	lsls	r3, r3, #2
    86c0:	4413      	add	r3, r2
    86c2:	009b      	lsls	r3, r3, #2
    86c4:	440b      	add	r3, r1
    86c6:	3302      	adds	r3, #2
    86c8:	f9b3 3000 	ldrsh.w	r3, [r3]
    86cc:	4618      	mov	r0, r3
    86ce:	4b23      	ldr	r3, [pc, #140]	; (875c <_tc_timer_init+0x2a4>)
    86d0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    86d2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    86d6:	4917      	ldr	r1, [pc, #92]	; (8734 <_tc_timer_init+0x27c>)
    86d8:	4613      	mov	r3, r2
    86da:	009b      	lsls	r3, r3, #2
    86dc:	4413      	add	r3, r2
    86de:	009b      	lsls	r3, r3, #2
    86e0:	440b      	add	r3, r1
    86e2:	3302      	adds	r3, #2
    86e4:	f9b3 3000 	ldrsh.w	r3, [r3]
    86e8:	4618      	mov	r0, r3
    86ea:	4b1d      	ldr	r3, [pc, #116]	; (8760 <_tc_timer_init+0x2a8>)
    86ec:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    86ee:	f997 200f 	ldrsb.w	r2, [r7, #15]
    86f2:	4910      	ldr	r1, [pc, #64]	; (8734 <_tc_timer_init+0x27c>)
    86f4:	4613      	mov	r3, r2
    86f6:	009b      	lsls	r3, r3, #2
    86f8:	4413      	add	r3, r2
    86fa:	009b      	lsls	r3, r3, #2
    86fc:	440b      	add	r3, r1
    86fe:	3302      	adds	r3, #2
    8700:	f9b3 3000 	ldrsh.w	r3, [r3]
    8704:	4618      	mov	r0, r3
    8706:	4b17      	ldr	r3, [pc, #92]	; (8764 <_tc_timer_init+0x2ac>)
    8708:	4798      	blx	r3

	return ERR_NONE;
    870a:	2300      	movs	r3, #0
}
    870c:	4618      	mov	r0, r3
    870e:	3710      	adds	r7, #16
    8710:	46bd      	mov	sp, r7
    8712:	bd80      	pop	{r7, pc}
    8714:	00008d09 	.word	0x00008d09
    8718:	00013d40 	.word	0x00013d40
    871c:	0000405d 	.word	0x0000405d
    8720:	0000812d 	.word	0x0000812d
    8724:	000082cd 	.word	0x000082cd
    8728:	0000827d 	.word	0x0000827d
    872c:	00008109 	.word	0x00008109
    8730:	000082fd 	.word	0x000082fd
    8734:	20000110 	.word	0x20000110
    8738:	0000835d 	.word	0x0000835d
    873c:	00008321 	.word	0x00008321
    8740:	0000833f 	.word	0x0000833f
    8744:	0000845d 	.word	0x0000845d
    8748:	000083f9 	.word	0x000083f9
    874c:	000083c9 	.word	0x000083c9
    8750:	0000837d 	.word	0x0000837d
    8754:	000081b1 	.word	0x000081b1
    8758:	00008d71 	.word	0x00008d71
    875c:	00008089 	.word	0x00008089
    8760:	000080cd 	.word	0x000080cd
    8764:	0000804d 	.word	0x0000804d

00008768 <_pwm_init>:
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    8768:	b580      	push	{r7, lr}
    876a:	b084      	sub	sp, #16
    876c:	af00      	add	r7, sp, #0
    876e:	6078      	str	r0, [r7, #4]
    8770:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    8772:	6838      	ldr	r0, [r7, #0]
    8774:	4b73      	ldr	r3, [pc, #460]	; (8944 <_pwm_init+0x1dc>)
    8776:	4798      	blx	r3
    8778:	4603      	mov	r3, r0
    877a:	73fb      	strb	r3, [r7, #15]
	device->hw = hw;
    877c:	687b      	ldr	r3, [r7, #4]
    877e:	683a      	ldr	r2, [r7, #0]
    8780:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    8782:	2101      	movs	r1, #1
    8784:	6838      	ldr	r0, [r7, #0]
    8786:	4b70      	ldr	r3, [pc, #448]	; (8948 <_pwm_init+0x1e0>)
    8788:	4798      	blx	r3
    878a:	4603      	mov	r3, r0
    878c:	f083 0301 	eor.w	r3, r3, #1
    8790:	b2db      	uxtb	r3, r3
    8792:	2b00      	cmp	r3, #0
    8794:	d011      	beq.n	87ba <_pwm_init+0x52>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    8796:	2102      	movs	r1, #2
    8798:	6838      	ldr	r0, [r7, #0]
    879a:	4b6c      	ldr	r3, [pc, #432]	; (894c <_pwm_init+0x1e4>)
    879c:	4798      	blx	r3
    879e:	4603      	mov	r3, r0
    87a0:	2b00      	cmp	r3, #0
    87a2:	d006      	beq.n	87b2 <_pwm_init+0x4a>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    87a4:	6838      	ldr	r0, [r7, #0]
    87a6:	4b6a      	ldr	r3, [pc, #424]	; (8950 <_pwm_init+0x1e8>)
    87a8:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    87aa:	2102      	movs	r1, #2
    87ac:	6838      	ldr	r0, [r7, #0]
    87ae:	4b69      	ldr	r3, [pc, #420]	; (8954 <_pwm_init+0x1ec>)
    87b0:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    87b2:	2101      	movs	r1, #1
    87b4:	6838      	ldr	r0, [r7, #0]
    87b6:	4b68      	ldr	r3, [pc, #416]	; (8958 <_pwm_init+0x1f0>)
    87b8:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    87ba:	2101      	movs	r1, #1
    87bc:	6838      	ldr	r0, [r7, #0]
    87be:	4b65      	ldr	r3, [pc, #404]	; (8954 <_pwm_init+0x1ec>)
    87c0:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    87c2:	f997 200f 	ldrsb.w	r2, [r7, #15]
    87c6:	4965      	ldr	r1, [pc, #404]	; (895c <_pwm_init+0x1f4>)
    87c8:	4613      	mov	r3, r2
    87ca:	009b      	lsls	r3, r3, #2
    87cc:	4413      	add	r3, r2
    87ce:	009b      	lsls	r3, r3, #2
    87d0:	440b      	add	r3, r1
    87d2:	3304      	adds	r3, #4
    87d4:	681b      	ldr	r3, [r3, #0]
    87d6:	4619      	mov	r1, r3
    87d8:	6838      	ldr	r0, [r7, #0]
    87da:	4b5f      	ldr	r3, [pc, #380]	; (8958 <_pwm_init+0x1f0>)
    87dc:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    87de:	f997 200f 	ldrsb.w	r2, [r7, #15]
    87e2:	495e      	ldr	r1, [pc, #376]	; (895c <_pwm_init+0x1f4>)
    87e4:	4613      	mov	r3, r2
    87e6:	009b      	lsls	r3, r3, #2
    87e8:	4413      	add	r3, r2
    87ea:	009b      	lsls	r3, r3, #2
    87ec:	440b      	add	r3, r1
    87ee:	330a      	adds	r3, #10
    87f0:	781b      	ldrb	r3, [r3, #0]
    87f2:	4619      	mov	r1, r3
    87f4:	6838      	ldr	r0, [r7, #0]
    87f6:	4b5a      	ldr	r3, [pc, #360]	; (8960 <_pwm_init+0x1f8>)
    87f8:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    87fa:	f997 200f 	ldrsb.w	r2, [r7, #15]
    87fe:	4957      	ldr	r1, [pc, #348]	; (895c <_pwm_init+0x1f4>)
    8800:	4613      	mov	r3, r2
    8802:	009b      	lsls	r3, r3, #2
    8804:	4413      	add	r3, r2
    8806:	009b      	lsls	r3, r3, #2
    8808:	440b      	add	r3, r1
    880a:	3308      	adds	r3, #8
    880c:	881b      	ldrh	r3, [r3, #0]
    880e:	4619      	mov	r1, r3
    8810:	6838      	ldr	r0, [r7, #0]
    8812:	4b54      	ldr	r3, [pc, #336]	; (8964 <_pwm_init+0x1fc>)
    8814:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    8816:	2103      	movs	r1, #3
    8818:	6838      	ldr	r0, [r7, #0]
    881a:	4b53      	ldr	r3, [pc, #332]	; (8968 <_pwm_init+0x200>)
    881c:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    881e:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8822:	494e      	ldr	r1, [pc, #312]	; (895c <_pwm_init+0x1f4>)
    8824:	4613      	mov	r3, r2
    8826:	009b      	lsls	r3, r3, #2
    8828:	4413      	add	r3, r2
    882a:	009b      	lsls	r3, r3, #2
    882c:	440b      	add	r3, r1
    882e:	3304      	adds	r3, #4
    8830:	681b      	ldr	r3, [r3, #0]
    8832:	f003 030c 	and.w	r3, r3, #12
    8836:	2b08      	cmp	r3, #8
    8838:	d11e      	bne.n	8878 <_pwm_init+0x110>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    883a:	f997 200f 	ldrsb.w	r2, [r7, #15]
    883e:	4947      	ldr	r1, [pc, #284]	; (895c <_pwm_init+0x1f4>)
    8840:	4613      	mov	r3, r2
    8842:	009b      	lsls	r3, r3, #2
    8844:	4413      	add	r3, r2
    8846:	009b      	lsls	r3, r3, #2
    8848:	440b      	add	r3, r1
    884a:	330c      	adds	r3, #12
    884c:	681b      	ldr	r3, [r3, #0]
    884e:	461a      	mov	r2, r3
    8850:	2100      	movs	r1, #0
    8852:	6838      	ldr	r0, [r7, #0]
    8854:	4b45      	ldr	r3, [pc, #276]	; (896c <_pwm_init+0x204>)
    8856:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    8858:	f997 200f 	ldrsb.w	r2, [r7, #15]
    885c:	493f      	ldr	r1, [pc, #252]	; (895c <_pwm_init+0x1f4>)
    885e:	4613      	mov	r3, r2
    8860:	009b      	lsls	r3, r3, #2
    8862:	4413      	add	r3, r2
    8864:	009b      	lsls	r3, r3, #2
    8866:	440b      	add	r3, r1
    8868:	3310      	adds	r3, #16
    886a:	681b      	ldr	r3, [r3, #0]
    886c:	461a      	mov	r2, r3
    886e:	2101      	movs	r1, #1
    8870:	6838      	ldr	r0, [r7, #0]
    8872:	4b3e      	ldr	r3, [pc, #248]	; (896c <_pwm_init+0x204>)
    8874:	4798      	blx	r3
    8876:	e031      	b.n	88dc <_pwm_init+0x174>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    8878:	f997 200f 	ldrsb.w	r2, [r7, #15]
    887c:	4937      	ldr	r1, [pc, #220]	; (895c <_pwm_init+0x1f4>)
    887e:	4613      	mov	r3, r2
    8880:	009b      	lsls	r3, r3, #2
    8882:	4413      	add	r3, r2
    8884:	009b      	lsls	r3, r3, #2
    8886:	440b      	add	r3, r1
    8888:	3304      	adds	r3, #4
    888a:	681b      	ldr	r3, [r3, #0]
    888c:	f003 030c 	and.w	r3, r3, #12
    8890:	2b00      	cmp	r3, #0
    8892:	d120      	bne.n	88d6 <_pwm_init+0x16e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    8894:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8898:	4930      	ldr	r1, [pc, #192]	; (895c <_pwm_init+0x1f4>)
    889a:	4613      	mov	r3, r2
    889c:	009b      	lsls	r3, r3, #2
    889e:	4413      	add	r3, r2
    88a0:	009b      	lsls	r3, r3, #2
    88a2:	440b      	add	r3, r1
    88a4:	330c      	adds	r3, #12
    88a6:	681b      	ldr	r3, [r3, #0]
    88a8:	b29b      	uxth	r3, r3
    88aa:	461a      	mov	r2, r3
    88ac:	2100      	movs	r1, #0
    88ae:	6838      	ldr	r0, [r7, #0]
    88b0:	4b2f      	ldr	r3, [pc, #188]	; (8970 <_pwm_init+0x208>)
    88b2:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    88b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88b8:	4928      	ldr	r1, [pc, #160]	; (895c <_pwm_init+0x1f4>)
    88ba:	4613      	mov	r3, r2
    88bc:	009b      	lsls	r3, r3, #2
    88be:	4413      	add	r3, r2
    88c0:	009b      	lsls	r3, r3, #2
    88c2:	440b      	add	r3, r1
    88c4:	3310      	adds	r3, #16
    88c6:	681b      	ldr	r3, [r3, #0]
    88c8:	b29b      	uxth	r3, r3
    88ca:	461a      	mov	r2, r3
    88cc:	2101      	movs	r1, #1
    88ce:	6838      	ldr	r0, [r7, #0]
    88d0:	4b27      	ldr	r3, [pc, #156]	; (8970 <_pwm_init+0x208>)
    88d2:	4798      	blx	r3
    88d4:	e002      	b.n	88dc <_pwm_init+0x174>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    88d6:	f04f 33ff 	mov.w	r3, #4294967295
    88da:	e02e      	b.n	893a <_pwm_init+0x1d2>
	}

	_tc_init_irq_param(hw, (void *)device);
    88dc:	6879      	ldr	r1, [r7, #4]
    88de:	6838      	ldr	r0, [r7, #0]
    88e0:	4b24      	ldr	r3, [pc, #144]	; (8974 <_pwm_init+0x20c>)
    88e2:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    88e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
    88e8:	491c      	ldr	r1, [pc, #112]	; (895c <_pwm_init+0x1f4>)
    88ea:	4613      	mov	r3, r2
    88ec:	009b      	lsls	r3, r3, #2
    88ee:	4413      	add	r3, r2
    88f0:	009b      	lsls	r3, r3, #2
    88f2:	440b      	add	r3, r1
    88f4:	3302      	adds	r3, #2
    88f6:	f9b3 3000 	ldrsh.w	r3, [r3]
    88fa:	4618      	mov	r0, r3
    88fc:	4b1e      	ldr	r3, [pc, #120]	; (8978 <_pwm_init+0x210>)
    88fe:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    8900:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8904:	4915      	ldr	r1, [pc, #84]	; (895c <_pwm_init+0x1f4>)
    8906:	4613      	mov	r3, r2
    8908:	009b      	lsls	r3, r3, #2
    890a:	4413      	add	r3, r2
    890c:	009b      	lsls	r3, r3, #2
    890e:	440b      	add	r3, r1
    8910:	3302      	adds	r3, #2
    8912:	f9b3 3000 	ldrsh.w	r3, [r3]
    8916:	4618      	mov	r0, r3
    8918:	4b18      	ldr	r3, [pc, #96]	; (897c <_pwm_init+0x214>)
    891a:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    891c:	f997 200f 	ldrsb.w	r2, [r7, #15]
    8920:	490e      	ldr	r1, [pc, #56]	; (895c <_pwm_init+0x1f4>)
    8922:	4613      	mov	r3, r2
    8924:	009b      	lsls	r3, r3, #2
    8926:	4413      	add	r3, r2
    8928:	009b      	lsls	r3, r3, #2
    892a:	440b      	add	r3, r1
    892c:	3302      	adds	r3, #2
    892e:	f9b3 3000 	ldrsh.w	r3, [r3]
    8932:	4618      	mov	r0, r3
    8934:	4b12      	ldr	r3, [pc, #72]	; (8980 <_pwm_init+0x218>)
    8936:	4798      	blx	r3

	return 0;
    8938:	2300      	movs	r3, #0
}
    893a:	4618      	mov	r0, r3
    893c:	3710      	adds	r7, #16
    893e:	46bd      	mov	sp, r7
    8940:	bd80      	pop	{r7, pc}
    8942:	bf00      	nop
    8944:	00008d09 	.word	0x00008d09
    8948:	0000812d 	.word	0x0000812d
    894c:	000082cd 	.word	0x000082cd
    8950:	0000827d 	.word	0x0000827d
    8954:	00008109 	.word	0x00008109
    8958:	000082fd 	.word	0x000082fd
    895c:	20000110 	.word	0x20000110
    8960:	0000835d 	.word	0x0000835d
    8964:	00008321 	.word	0x00008321
    8968:	0000833f 	.word	0x0000833f
    896c:	0000845d 	.word	0x0000845d
    8970:	000083f9 	.word	0x000083f9
    8974:	00008d71 	.word	0x00008d71
    8978:	00008089 	.word	0x00008089
    897c:	000080cd 	.word	0x000080cd
    8980:	0000804d 	.word	0x0000804d

00008984 <_tc_timer_deinit>:
/**
 * \brief De-initialize TC
 */
void _tc_timer_deinit(struct _timer_device *const device)
{
    8984:	b580      	push	{r7, lr}
    8986:	b084      	sub	sp, #16
    8988:	af00      	add	r7, sp, #0
    898a:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    898c:	687b      	ldr	r3, [r7, #4]
    898e:	68db      	ldr	r3, [r3, #12]
    8990:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8992:	68f8      	ldr	r0, [r7, #12]
    8994:	4b10      	ldr	r3, [pc, #64]	; (89d8 <_tc_timer_deinit+0x54>)
    8996:	4798      	blx	r3
    8998:	4603      	mov	r3, r0
    899a:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    899c:	22f9      	movs	r2, #249	; 0xf9
    899e:	490f      	ldr	r1, [pc, #60]	; (89dc <_tc_timer_deinit+0x58>)
    89a0:	2001      	movs	r0, #1
    89a2:	4b0f      	ldr	r3, [pc, #60]	; (89e0 <_tc_timer_deinit+0x5c>)
    89a4:	4798      	blx	r3

	NVIC_DisableIRQ(_tcs[i].irq);
    89a6:	f997 200b 	ldrsb.w	r2, [r7, #11]
    89aa:	490e      	ldr	r1, [pc, #56]	; (89e4 <_tc_timer_deinit+0x60>)
    89ac:	4613      	mov	r3, r2
    89ae:	009b      	lsls	r3, r3, #2
    89b0:	4413      	add	r3, r2
    89b2:	009b      	lsls	r3, r3, #2
    89b4:	440b      	add	r3, r1
    89b6:	3302      	adds	r3, #2
    89b8:	f9b3 3000 	ldrsh.w	r3, [r3]
    89bc:	4618      	mov	r0, r3
    89be:	4b0a      	ldr	r3, [pc, #40]	; (89e8 <_tc_timer_deinit+0x64>)
    89c0:	4798      	blx	r3

	hri_tc_clear_CTRLA_ENABLE_bit(hw);
    89c2:	68f8      	ldr	r0, [r7, #12]
    89c4:	4b09      	ldr	r3, [pc, #36]	; (89ec <_tc_timer_deinit+0x68>)
    89c6:	4798      	blx	r3
	hri_tc_set_CTRLA_SWRST_bit(hw);
    89c8:	68f8      	ldr	r0, [r7, #12]
    89ca:	4b09      	ldr	r3, [pc, #36]	; (89f0 <_tc_timer_deinit+0x6c>)
    89cc:	4798      	blx	r3
}
    89ce:	bf00      	nop
    89d0:	3710      	adds	r7, #16
    89d2:	46bd      	mov	sp, r7
    89d4:	bd80      	pop	{r7, pc}
    89d6:	bf00      	nop
    89d8:	00008d09 	.word	0x00008d09
    89dc:	00013d40 	.word	0x00013d40
    89e0:	0000405d 	.word	0x0000405d
    89e4:	20000110 	.word	0x20000110
    89e8:	00008089 	.word	0x00008089
    89ec:	0000827d 	.word	0x0000827d
    89f0:	000081f5 	.word	0x000081f5

000089f4 <_tc_timer_start>:
}
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
    89f4:	b580      	push	{r7, lr}
    89f6:	b082      	sub	sp, #8
    89f8:	af00      	add	r7, sp, #0
    89fa:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    89fc:	687b      	ldr	r3, [r7, #4]
    89fe:	68db      	ldr	r3, [r3, #12]
    8a00:	4618      	mov	r0, r3
    8a02:	4b03      	ldr	r3, [pc, #12]	; (8a10 <_tc_timer_start+0x1c>)
    8a04:	4798      	blx	r3
}
    8a06:	bf00      	nop
    8a08:	3708      	adds	r7, #8
    8a0a:	46bd      	mov	sp, r7
    8a0c:	bd80      	pop	{r7, pc}
    8a0e:	bf00      	nop
    8a10:	0000821d 	.word	0x0000821d

00008a14 <_tc_timer_stop>:
}
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
    8a14:	b580      	push	{r7, lr}
    8a16:	b082      	sub	sp, #8
    8a18:	af00      	add	r7, sp, #0
    8a1a:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    8a1c:	687b      	ldr	r3, [r7, #4]
    8a1e:	68db      	ldr	r3, [r3, #12]
    8a20:	4618      	mov	r0, r3
    8a22:	4b03      	ldr	r3, [pc, #12]	; (8a30 <_tc_timer_stop+0x1c>)
    8a24:	4798      	blx	r3
}
    8a26:	bf00      	nop
    8a28:	3708      	adds	r7, #8
    8a2a:	46bd      	mov	sp, r7
    8a2c:	bd80      	pop	{r7, pc}
    8a2e:	bf00      	nop
    8a30:	0000827d 	.word	0x0000827d

00008a34 <_tc_timer_set_period>:
}
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
    8a34:	b580      	push	{r7, lr}
    8a36:	b084      	sub	sp, #16
    8a38:	af00      	add	r7, sp, #0
    8a3a:	6078      	str	r0, [r7, #4]
    8a3c:	6039      	str	r1, [r7, #0]
	void *const hw = device->hw;
    8a3e:	687b      	ldr	r3, [r7, #4]
    8a40:	68db      	ldr	r3, [r3, #12]
    8a42:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8a44:	68f8      	ldr	r0, [r7, #12]
    8a46:	4b14      	ldr	r3, [pc, #80]	; (8a98 <_tc_timer_set_period+0x64>)
    8a48:	4798      	blx	r3
    8a4a:	4603      	mov	r3, r0
    8a4c:	2b02      	cmp	r3, #2
    8a4e:	d105      	bne.n	8a5c <_tc_timer_set_period+0x28>
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
    8a50:	683a      	ldr	r2, [r7, #0]
    8a52:	2100      	movs	r1, #0
    8a54:	68f8      	ldr	r0, [r7, #12]
    8a56:	4b11      	ldr	r3, [pc, #68]	; (8a9c <_tc_timer_set_period+0x68>)
    8a58:	4798      	blx	r3
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		hri_tccount8_write_PER_reg(hw, clock_cycles);
	}
}
    8a5a:	e019      	b.n	8a90 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8a5c:	68f8      	ldr	r0, [r7, #12]
    8a5e:	4b0e      	ldr	r3, [pc, #56]	; (8a98 <_tc_timer_set_period+0x64>)
    8a60:	4798      	blx	r3
    8a62:	4603      	mov	r3, r0
    8a64:	2b00      	cmp	r3, #0
    8a66:	d107      	bne.n	8a78 <_tc_timer_set_period+0x44>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    8a68:	683b      	ldr	r3, [r7, #0]
    8a6a:	b29b      	uxth	r3, r3
    8a6c:	461a      	mov	r2, r3
    8a6e:	2100      	movs	r1, #0
    8a70:	68f8      	ldr	r0, [r7, #12]
    8a72:	4b0b      	ldr	r3, [pc, #44]	; (8aa0 <_tc_timer_set_period+0x6c>)
    8a74:	4798      	blx	r3
}
    8a76:	e00b      	b.n	8a90 <_tc_timer_set_period+0x5c>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8a78:	68f8      	ldr	r0, [r7, #12]
    8a7a:	4b07      	ldr	r3, [pc, #28]	; (8a98 <_tc_timer_set_period+0x64>)
    8a7c:	4798      	blx	r3
    8a7e:	4603      	mov	r3, r0
    8a80:	2b01      	cmp	r3, #1
    8a82:	d105      	bne.n	8a90 <_tc_timer_set_period+0x5c>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    8a84:	683b      	ldr	r3, [r7, #0]
    8a86:	b2db      	uxtb	r3, r3
    8a88:	4619      	mov	r1, r3
    8a8a:	68f8      	ldr	r0, [r7, #12]
    8a8c:	4b05      	ldr	r3, [pc, #20]	; (8aa4 <_tc_timer_set_period+0x70>)
    8a8e:	4798      	blx	r3
}
    8a90:	bf00      	nop
    8a92:	3710      	adds	r7, #16
    8a94:	46bd      	mov	sp, r7
    8a96:	bd80      	pop	{r7, pc}
    8a98:	000082a5 	.word	0x000082a5
    8a9c:	0000845d 	.word	0x0000845d
    8aa0:	000083f9 	.word	0x000083f9
    8aa4:	0000837d 	.word	0x0000837d

00008aa8 <_tc_timer_get_period>:
}
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
    8aa8:	b580      	push	{r7, lr}
    8aaa:	b084      	sub	sp, #16
    8aac:	af00      	add	r7, sp, #0
    8aae:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8ab0:	687b      	ldr	r3, [r7, #4]
    8ab2:	68db      	ldr	r3, [r3, #12]
    8ab4:	60fb      	str	r3, [r7, #12]

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8ab6:	68f8      	ldr	r0, [r7, #12]
    8ab8:	4b13      	ldr	r3, [pc, #76]	; (8b08 <_tc_timer_get_period+0x60>)
    8aba:	4798      	blx	r3
    8abc:	4603      	mov	r3, r0
    8abe:	2b02      	cmp	r3, #2
    8ac0:	d105      	bne.n	8ace <_tc_timer_get_period+0x26>
		return hri_tccount32_read_CC_reg(hw, 0);
    8ac2:	2100      	movs	r1, #0
    8ac4:	68f8      	ldr	r0, [r7, #12]
    8ac6:	4b11      	ldr	r3, [pc, #68]	; (8b0c <_tc_timer_get_period+0x64>)
    8ac8:	4798      	blx	r3
    8aca:	4603      	mov	r3, r0
    8acc:	e017      	b.n	8afe <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8ace:	68f8      	ldr	r0, [r7, #12]
    8ad0:	4b0d      	ldr	r3, [pc, #52]	; (8b08 <_tc_timer_get_period+0x60>)
    8ad2:	4798      	blx	r3
    8ad4:	4603      	mov	r3, r0
    8ad6:	2b00      	cmp	r3, #0
    8ad8:	d105      	bne.n	8ae6 <_tc_timer_get_period+0x3e>
		return hri_tccount16_read_CC_reg(hw, 0);
    8ada:	2100      	movs	r1, #0
    8adc:	68f8      	ldr	r0, [r7, #12]
    8ade:	4b0c      	ldr	r3, [pc, #48]	; (8b10 <_tc_timer_get_period+0x68>)
    8ae0:	4798      	blx	r3
    8ae2:	4603      	mov	r3, r0
    8ae4:	e00b      	b.n	8afe <_tc_timer_get_period+0x56>
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    8ae6:	68f8      	ldr	r0, [r7, #12]
    8ae8:	4b07      	ldr	r3, [pc, #28]	; (8b08 <_tc_timer_get_period+0x60>)
    8aea:	4798      	blx	r3
    8aec:	4603      	mov	r3, r0
    8aee:	2b01      	cmp	r3, #1
    8af0:	d104      	bne.n	8afc <_tc_timer_get_period+0x54>
		return hri_tccount8_read_PER_reg(hw);
    8af2:	68f8      	ldr	r0, [r7, #12]
    8af4:	4b07      	ldr	r3, [pc, #28]	; (8b14 <_tc_timer_get_period+0x6c>)
    8af6:	4798      	blx	r3
    8af8:	4603      	mov	r3, r0
    8afa:	e000      	b.n	8afe <_tc_timer_get_period+0x56>
	}

	return 0;
    8afc:	2300      	movs	r3, #0
}
    8afe:	4618      	mov	r0, r3
    8b00:	3710      	adds	r7, #16
    8b02:	46bd      	mov	sp, r7
    8b04:	bd80      	pop	{r7, pc}
    8b06:	bf00      	nop
    8b08:	000082a5 	.word	0x000082a5
    8b0c:	0000848d 	.word	0x0000848d
    8b10:	0000842d 	.word	0x0000842d
    8b14:	000083a5 	.word	0x000083a5

00008b18 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
    8b18:	b580      	push	{r7, lr}
    8b1a:	b082      	sub	sp, #8
    8b1c:	af00      	add	r7, sp, #0
    8b1e:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    8b20:	687b      	ldr	r3, [r7, #4]
    8b22:	68db      	ldr	r3, [r3, #12]
    8b24:	4618      	mov	r0, r3
    8b26:	4b03      	ldr	r3, [pc, #12]	; (8b34 <_tc_timer_is_started+0x1c>)
    8b28:	4798      	blx	r3
    8b2a:	4603      	mov	r3, r0
}
    8b2c:	4618      	mov	r0, r3
    8b2e:	3708      	adds	r7, #8
    8b30:	46bd      	mov	sp, r7
    8b32:	bd80      	pop	{r7, pc}
    8b34:	00008245 	.word	0x00008245

00008b38 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    8b38:	b480      	push	{r7}
    8b3a:	af00      	add	r7, sp, #0
	return &_tc_timer_functions;
    8b3c:	4b02      	ldr	r3, [pc, #8]	; (8b48 <_tc_get_timer+0x10>)
}
    8b3e:	4618      	mov	r0, r3
    8b40:	46bd      	mov	sp, r7
    8b42:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b46:	4770      	bx	lr
    8b48:	20000188 	.word	0x20000188

00008b4c <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    8b4c:	b480      	push	{r7}
    8b4e:	af00      	add	r7, sp, #0
	return NULL;
    8b50:	2300      	movs	r3, #0
}
    8b52:	4618      	mov	r0, r3
    8b54:	46bd      	mov	sp, r7
    8b56:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b5a:	4770      	bx	lr

00008b5c <_tc_timer_set_irq>:
 * \brief Set timer IRQ
 *
 * \param[in] hw The pointer to hardware instance
 */
void _tc_timer_set_irq(struct _timer_device *const device)
{
    8b5c:	b580      	push	{r7, lr}
    8b5e:	b084      	sub	sp, #16
    8b60:	af00      	add	r7, sp, #0
    8b62:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8b64:	687b      	ldr	r3, [r7, #4]
    8b66:	68db      	ldr	r3, [r3, #12]
    8b68:	60fb      	str	r3, [r7, #12]
	int8_t      i  = get_tc_index(hw);
    8b6a:	68f8      	ldr	r0, [r7, #12]
    8b6c:	4b0e      	ldr	r3, [pc, #56]	; (8ba8 <_tc_timer_set_irq+0x4c>)
    8b6e:	4798      	blx	r3
    8b70:	4603      	mov	r3, r0
    8b72:	72fb      	strb	r3, [r7, #11]
	ASSERT(ARRAY_SIZE(_tcs));
    8b74:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
    8b78:	490c      	ldr	r1, [pc, #48]	; (8bac <_tc_timer_set_irq+0x50>)
    8b7a:	2001      	movs	r0, #1
    8b7c:	4b0c      	ldr	r3, [pc, #48]	; (8bb0 <_tc_timer_set_irq+0x54>)
    8b7e:	4798      	blx	r3

	_irq_set(_tcs[i].irq);
    8b80:	f997 200b 	ldrsb.w	r2, [r7, #11]
    8b84:	490b      	ldr	r1, [pc, #44]	; (8bb4 <_tc_timer_set_irq+0x58>)
    8b86:	4613      	mov	r3, r2
    8b88:	009b      	lsls	r3, r3, #2
    8b8a:	4413      	add	r3, r2
    8b8c:	009b      	lsls	r3, r3, #2
    8b8e:	440b      	add	r3, r1
    8b90:	3302      	adds	r3, #2
    8b92:	f9b3 3000 	ldrsh.w	r3, [r3]
    8b96:	b2db      	uxtb	r3, r3
    8b98:	4618      	mov	r0, r3
    8b9a:	4b07      	ldr	r3, [pc, #28]	; (8bb8 <_tc_timer_set_irq+0x5c>)
    8b9c:	4798      	blx	r3
}
    8b9e:	bf00      	nop
    8ba0:	3710      	adds	r7, #16
    8ba2:	46bd      	mov	sp, r7
    8ba4:	bd80      	pop	{r7, pc}
    8ba6:	bf00      	nop
    8ba8:	00008d09 	.word	0x00008d09
    8bac:	00013d40 	.word	0x00013d40
    8bb0:	0000405d 	.word	0x0000405d
    8bb4:	20000110 	.word	0x20000110
    8bb8:	000048a5 	.word	0x000048a5

00008bbc <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    8bbc:	b580      	push	{r7, lr}
    8bbe:	b084      	sub	sp, #16
    8bc0:	af00      	add	r7, sp, #0
    8bc2:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8bc4:	687b      	ldr	r3, [r7, #4]
    8bc6:	68db      	ldr	r3, [r3, #12]
    8bc8:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8bca:	68f8      	ldr	r0, [r7, #12]
    8bcc:	4b07      	ldr	r3, [pc, #28]	; (8bec <tc_interrupt_handler+0x30>)
    8bce:	4798      	blx	r3
    8bd0:	4603      	mov	r3, r0
    8bd2:	2b00      	cmp	r3, #0
    8bd4:	d006      	beq.n	8be4 <tc_interrupt_handler+0x28>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8bd6:	68f8      	ldr	r0, [r7, #12]
    8bd8:	4b05      	ldr	r3, [pc, #20]	; (8bf0 <tc_interrupt_handler+0x34>)
    8bda:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    8bdc:	687b      	ldr	r3, [r7, #4]
    8bde:	681b      	ldr	r3, [r3, #0]
    8be0:	6878      	ldr	r0, [r7, #4]
    8be2:	4798      	blx	r3
	}
}
    8be4:	bf00      	nop
    8be6:	3710      	adds	r7, #16
    8be8:	46bd      	mov	sp, r7
    8bea:	bd80      	pop	{r7, pc}
    8bec:	00008155 	.word	0x00008155
    8bf0:	0000817d 	.word	0x0000817d

00008bf4 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    8bf4:	b580      	push	{r7, lr}
    8bf6:	b084      	sub	sp, #16
    8bf8:	af00      	add	r7, sp, #0
    8bfa:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    8bfc:	687b      	ldr	r3, [r7, #4]
    8bfe:	691b      	ldr	r3, [r3, #16]
    8c00:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    8c02:	68f8      	ldr	r0, [r7, #12]
    8c04:	4b12      	ldr	r3, [pc, #72]	; (8c50 <tc_pwm_interrupt_handler+0x5c>)
    8c06:	4798      	blx	r3
    8c08:	4603      	mov	r3, r0
    8c0a:	2b00      	cmp	r3, #0
    8c0c:	d00a      	beq.n	8c24 <tc_pwm_interrupt_handler+0x30>
		hri_tc_clear_interrupt_OVF_bit(hw);
    8c0e:	68f8      	ldr	r0, [r7, #12]
    8c10:	4b10      	ldr	r3, [pc, #64]	; (8c54 <tc_pwm_interrupt_handler+0x60>)
    8c12:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    8c14:	687b      	ldr	r3, [r7, #4]
    8c16:	681b      	ldr	r3, [r3, #0]
    8c18:	2b00      	cmp	r3, #0
    8c1a:	d003      	beq.n	8c24 <tc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    8c1c:	687b      	ldr	r3, [r7, #4]
    8c1e:	681b      	ldr	r3, [r3, #0]
    8c20:	6878      	ldr	r0, [r7, #4]
    8c22:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    8c24:	68f8      	ldr	r0, [r7, #12]
    8c26:	4b0c      	ldr	r3, [pc, #48]	; (8c58 <tc_pwm_interrupt_handler+0x64>)
    8c28:	4798      	blx	r3
    8c2a:	4603      	mov	r3, r0
    8c2c:	2b00      	cmp	r3, #0
    8c2e:	d00a      	beq.n	8c46 <tc_pwm_interrupt_handler+0x52>
		hri_tc_clear_interrupt_ERR_bit(hw);
    8c30:	68f8      	ldr	r0, [r7, #12]
    8c32:	4b0a      	ldr	r3, [pc, #40]	; (8c5c <tc_pwm_interrupt_handler+0x68>)
    8c34:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    8c36:	687b      	ldr	r3, [r7, #4]
    8c38:	685b      	ldr	r3, [r3, #4]
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	d003      	beq.n	8c46 <tc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    8c3e:	687b      	ldr	r3, [r7, #4]
    8c40:	685b      	ldr	r3, [r3, #4]
    8c42:	6878      	ldr	r0, [r7, #4]
    8c44:	4798      	blx	r3
		}
	}
}
    8c46:	bf00      	nop
    8c48:	3710      	adds	r7, #16
    8c4a:	46bd      	mov	sp, r7
    8c4c:	bd80      	pop	{r7, pc}
    8c4e:	bf00      	nop
    8c50:	00008155 	.word	0x00008155
    8c54:	0000817d 	.word	0x0000817d
    8c58:	000081cb 	.word	0x000081cb
    8c5c:	00008197 	.word	0x00008197

00008c60 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    8c60:	b580      	push	{r7, lr}
    8c62:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    8c64:	4b03      	ldr	r3, [pc, #12]	; (8c74 <TC0_Handler+0x14>)
    8c66:	681b      	ldr	r3, [r3, #0]
    8c68:	4618      	mov	r0, r3
    8c6a:	4b03      	ldr	r3, [pc, #12]	; (8c78 <TC0_Handler+0x18>)
    8c6c:	4798      	blx	r3
}
    8c6e:	bf00      	nop
    8c70:	bd80      	pop	{r7, pc}
    8c72:	bf00      	nop
    8c74:	20000cd8 	.word	0x20000cd8
    8c78:	00008bbd 	.word	0x00008bbd

00008c7c <TC2_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC2_Handler(void)
{
    8c7c:	b580      	push	{r7, lr}
    8c7e:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc2_dev);
    8c80:	4b03      	ldr	r3, [pc, #12]	; (8c90 <TC2_Handler+0x14>)
    8c82:	681b      	ldr	r3, [r3, #0]
    8c84:	4618      	mov	r0, r3
    8c86:	4b03      	ldr	r3, [pc, #12]	; (8c94 <TC2_Handler+0x18>)
    8c88:	4798      	blx	r3
}
    8c8a:	bf00      	nop
    8c8c:	bd80      	pop	{r7, pc}
    8c8e:	bf00      	nop
    8c90:	20000cdc 	.word	0x20000cdc
    8c94:	00008bbd 	.word	0x00008bbd

00008c98 <TC4_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC4_Handler(void)
{
    8c98:	b580      	push	{r7, lr}
    8c9a:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc4_dev);
    8c9c:	4b03      	ldr	r3, [pc, #12]	; (8cac <TC4_Handler+0x14>)
    8c9e:	681b      	ldr	r3, [r3, #0]
    8ca0:	4618      	mov	r0, r3
    8ca2:	4b03      	ldr	r3, [pc, #12]	; (8cb0 <TC4_Handler+0x18>)
    8ca4:	4798      	blx	r3
}
    8ca6:	bf00      	nop
    8ca8:	bd80      	pop	{r7, pc}
    8caa:	bf00      	nop
    8cac:	20000ce0 	.word	0x20000ce0
    8cb0:	00008bbd 	.word	0x00008bbd

00008cb4 <TC5_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC5_Handler(void)
{
    8cb4:	b580      	push	{r7, lr}
    8cb6:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc5_dev);
    8cb8:	4b03      	ldr	r3, [pc, #12]	; (8cc8 <TC5_Handler+0x14>)
    8cba:	681b      	ldr	r3, [r3, #0]
    8cbc:	4618      	mov	r0, r3
    8cbe:	4b03      	ldr	r3, [pc, #12]	; (8ccc <TC5_Handler+0x18>)
    8cc0:	4798      	blx	r3
}
    8cc2:	bf00      	nop
    8cc4:	bd80      	pop	{r7, pc}
    8cc6:	bf00      	nop
    8cc8:	20000ce4 	.word	0x20000ce4
    8ccc:	00008bbd 	.word	0x00008bbd

00008cd0 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    8cd0:	b580      	push	{r7, lr}
    8cd2:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc6_dev);
    8cd4:	4b03      	ldr	r3, [pc, #12]	; (8ce4 <TC6_Handler+0x14>)
    8cd6:	681b      	ldr	r3, [r3, #0]
    8cd8:	4618      	mov	r0, r3
    8cda:	4b03      	ldr	r3, [pc, #12]	; (8ce8 <TC6_Handler+0x18>)
    8cdc:	4798      	blx	r3
}
    8cde:	bf00      	nop
    8ce0:	bd80      	pop	{r7, pc}
    8ce2:	bf00      	nop
    8ce4:	20000ce8 	.word	0x20000ce8
    8ce8:	00008bbd 	.word	0x00008bbd

00008cec <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    8cec:	b580      	push	{r7, lr}
    8cee:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc7_dev);
    8cf0:	4b03      	ldr	r3, [pc, #12]	; (8d00 <TC7_Handler+0x14>)
    8cf2:	681b      	ldr	r3, [r3, #0]
    8cf4:	4618      	mov	r0, r3
    8cf6:	4b03      	ldr	r3, [pc, #12]	; (8d04 <TC7_Handler+0x18>)
    8cf8:	4798      	blx	r3
}
    8cfa:	bf00      	nop
    8cfc:	bd80      	pop	{r7, pc}
    8cfe:	bf00      	nop
    8d00:	20000cec 	.word	0x20000cec
    8d04:	00008bf5 	.word	0x00008bf5

00008d08 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    8d08:	b580      	push	{r7, lr}
    8d0a:	b084      	sub	sp, #16
    8d0c:	af00      	add	r7, sp, #0
    8d0e:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    8d10:	6878      	ldr	r0, [r7, #4]
    8d12:	4b13      	ldr	r3, [pc, #76]	; (8d60 <get_tc_index+0x58>)
    8d14:	4798      	blx	r3
    8d16:	4603      	mov	r3, r0
    8d18:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8d1a:	2300      	movs	r3, #0
    8d1c:	73fb      	strb	r3, [r7, #15]
    8d1e:	e010      	b.n	8d42 <get_tc_index+0x3a>
		if (_tcs[i].number == index) {
    8d20:	7bfa      	ldrb	r2, [r7, #15]
    8d22:	4910      	ldr	r1, [pc, #64]	; (8d64 <get_tc_index+0x5c>)
    8d24:	4613      	mov	r3, r2
    8d26:	009b      	lsls	r3, r3, #2
    8d28:	4413      	add	r3, r2
    8d2a:	009b      	lsls	r3, r3, #2
    8d2c:	440b      	add	r3, r1
    8d2e:	781b      	ldrb	r3, [r3, #0]
    8d30:	7bba      	ldrb	r2, [r7, #14]
    8d32:	429a      	cmp	r2, r3
    8d34:	d102      	bne.n	8d3c <get_tc_index+0x34>
			return i;
    8d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8d3a:	e00d      	b.n	8d58 <get_tc_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    8d3c:	7bfb      	ldrb	r3, [r7, #15]
    8d3e:	3301      	adds	r3, #1
    8d40:	73fb      	strb	r3, [r7, #15]
    8d42:	7bfb      	ldrb	r3, [r7, #15]
    8d44:	2b05      	cmp	r3, #5
    8d46:	d9eb      	bls.n	8d20 <get_tc_index+0x18>
		}
	}

	ASSERT(false);
    8d48:	f240 221d 	movw	r2, #541	; 0x21d
    8d4c:	4906      	ldr	r1, [pc, #24]	; (8d68 <get_tc_index+0x60>)
    8d4e:	2000      	movs	r0, #0
    8d50:	4b06      	ldr	r3, [pc, #24]	; (8d6c <get_tc_index+0x64>)
    8d52:	4798      	blx	r3
	return -1;
    8d54:	f04f 33ff 	mov.w	r3, #4294967295
}
    8d58:	4618      	mov	r0, r3
    8d5a:	3710      	adds	r7, #16
    8d5c:	46bd      	mov	sp, r7
    8d5e:	bd80      	pop	{r7, pc}
    8d60:	00008e0d 	.word	0x00008e0d
    8d64:	20000110 	.word	0x20000110
    8d68:	00013d40 	.word	0x00013d40
    8d6c:	0000405d 	.word	0x0000405d

00008d70 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    8d70:	b480      	push	{r7}
    8d72:	b083      	sub	sp, #12
    8d74:	af00      	add	r7, sp, #0
    8d76:	6078      	str	r0, [r7, #4]
    8d78:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    8d7a:	687b      	ldr	r3, [r7, #4]
    8d7c:	4a17      	ldr	r2, [pc, #92]	; (8ddc <_tc_init_irq_param+0x6c>)
    8d7e:	4293      	cmp	r3, r2
    8d80:	d102      	bne.n	8d88 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    8d82:	4a17      	ldr	r2, [pc, #92]	; (8de0 <_tc_init_irq_param+0x70>)
    8d84:	683b      	ldr	r3, [r7, #0]
    8d86:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC2) {
    8d88:	687b      	ldr	r3, [r7, #4]
    8d8a:	4a16      	ldr	r2, [pc, #88]	; (8de4 <_tc_init_irq_param+0x74>)
    8d8c:	4293      	cmp	r3, r2
    8d8e:	d102      	bne.n	8d96 <_tc_init_irq_param+0x26>
		_tc2_dev = (struct _timer_device *)dev;
    8d90:	4a15      	ldr	r2, [pc, #84]	; (8de8 <_tc_init_irq_param+0x78>)
    8d92:	683b      	ldr	r3, [r7, #0]
    8d94:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC4) {
    8d96:	687b      	ldr	r3, [r7, #4]
    8d98:	4a14      	ldr	r2, [pc, #80]	; (8dec <_tc_init_irq_param+0x7c>)
    8d9a:	4293      	cmp	r3, r2
    8d9c:	d102      	bne.n	8da4 <_tc_init_irq_param+0x34>
		_tc4_dev = (struct _timer_device *)dev;
    8d9e:	4a14      	ldr	r2, [pc, #80]	; (8df0 <_tc_init_irq_param+0x80>)
    8da0:	683b      	ldr	r3, [r7, #0]
    8da2:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC5) {
    8da4:	687b      	ldr	r3, [r7, #4]
    8da6:	4a13      	ldr	r2, [pc, #76]	; (8df4 <_tc_init_irq_param+0x84>)
    8da8:	4293      	cmp	r3, r2
    8daa:	d102      	bne.n	8db2 <_tc_init_irq_param+0x42>
		_tc5_dev = (struct _timer_device *)dev;
    8dac:	4a12      	ldr	r2, [pc, #72]	; (8df8 <_tc_init_irq_param+0x88>)
    8dae:	683b      	ldr	r3, [r7, #0]
    8db0:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC6) {
    8db2:	687b      	ldr	r3, [r7, #4]
    8db4:	4a11      	ldr	r2, [pc, #68]	; (8dfc <_tc_init_irq_param+0x8c>)
    8db6:	4293      	cmp	r3, r2
    8db8:	d102      	bne.n	8dc0 <_tc_init_irq_param+0x50>
		_tc6_dev = (struct _timer_device *)dev;
    8dba:	4a11      	ldr	r2, [pc, #68]	; (8e00 <_tc_init_irq_param+0x90>)
    8dbc:	683b      	ldr	r3, [r7, #0]
    8dbe:	6013      	str	r3, [r2, #0]
	}
	if (hw == TC7) {
    8dc0:	687b      	ldr	r3, [r7, #4]
    8dc2:	4a10      	ldr	r2, [pc, #64]	; (8e04 <_tc_init_irq_param+0x94>)
    8dc4:	4293      	cmp	r3, r2
    8dc6:	d102      	bne.n	8dce <_tc_init_irq_param+0x5e>
		_tc7_dev = (struct _pwm_device *)dev;
    8dc8:	4a0f      	ldr	r2, [pc, #60]	; (8e08 <_tc_init_irq_param+0x98>)
    8dca:	683b      	ldr	r3, [r7, #0]
    8dcc:	6013      	str	r3, [r2, #0]
	}
}
    8dce:	bf00      	nop
    8dd0:	370c      	adds	r7, #12
    8dd2:	46bd      	mov	sp, r7
    8dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8dd8:	4770      	bx	lr
    8dda:	bf00      	nop
    8ddc:	40003800 	.word	0x40003800
    8de0:	20000cd8 	.word	0x20000cd8
    8de4:	4101a000 	.word	0x4101a000
    8de8:	20000cdc 	.word	0x20000cdc
    8dec:	42001400 	.word	0x42001400
    8df0:	20000ce0 	.word	0x20000ce0
    8df4:	42001800 	.word	0x42001800
    8df8:	20000ce4 	.word	0x20000ce4
    8dfc:	43001400 	.word	0x43001400
    8e00:	20000ce8 	.word	0x20000ce8
    8e04:	43001800 	.word	0x43001800
    8e08:	20000cec 	.word	0x20000cec

00008e0c <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    8e0c:	b4b0      	push	{r4, r5, r7}
    8e0e:	b08d      	sub	sp, #52	; 0x34
    8e10:	af00      	add	r7, sp, #0
    8e12:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8e14:	4b13      	ldr	r3, [pc, #76]	; (8e64 <_get_hardware_offset+0x58>)
    8e16:	f107 040c 	add.w	r4, r7, #12
    8e1a:	461d      	mov	r5, r3
    8e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8e20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8e24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8e28:	2300      	movs	r3, #0
    8e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    8e2c:	e010      	b.n	8e50 <_get_hardware_offset+0x44>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    8e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8e30:	009b      	lsls	r3, r3, #2
    8e32:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8e36:	4413      	add	r3, r2
    8e38:	f853 3c24 	ldr.w	r3, [r3, #-36]
    8e3c:	461a      	mov	r2, r3
    8e3e:	687b      	ldr	r3, [r7, #4]
    8e40:	429a      	cmp	r2, r3
    8e42:	d102      	bne.n	8e4a <_get_hardware_offset+0x3e>
			return i;
    8e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8e46:	b2db      	uxtb	r3, r3
    8e48:	e006      	b.n	8e58 <_get_hardware_offset+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    8e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8e4c:	3301      	adds	r3, #1
    8e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    8e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8e52:	2b07      	cmp	r3, #7
    8e54:	d9eb      	bls.n	8e2e <_get_hardware_offset+0x22>
		}
	}
	return 0;
    8e56:	2300      	movs	r3, #0
}
    8e58:	4618      	mov	r0, r3
    8e5a:	3734      	adds	r7, #52	; 0x34
    8e5c:	46bd      	mov	sp, r7
    8e5e:	bcb0      	pop	{r4, r5, r7}
    8e60:	4770      	bx	lr
    8e62:	bf00      	nop
    8e64:	00013d54 	.word	0x00013d54

00008e68 <__NVIC_EnableIRQ>:
{
    8e68:	b480      	push	{r7}
    8e6a:	b083      	sub	sp, #12
    8e6c:	af00      	add	r7, sp, #0
    8e6e:	4603      	mov	r3, r0
    8e70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    8e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8e76:	2b00      	cmp	r3, #0
    8e78:	db0b      	blt.n	8e92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8e7a:	4909      	ldr	r1, [pc, #36]	; (8ea0 <__NVIC_EnableIRQ+0x38>)
    8e7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    8e80:	095b      	lsrs	r3, r3, #5
    8e82:	88fa      	ldrh	r2, [r7, #6]
    8e84:	f002 021f 	and.w	r2, r2, #31
    8e88:	2001      	movs	r0, #1
    8e8a:	fa00 f202 	lsl.w	r2, r0, r2
    8e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8e92:	bf00      	nop
    8e94:	370c      	adds	r7, #12
    8e96:	46bd      	mov	sp, r7
    8e98:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e9c:	4770      	bx	lr
    8e9e:	bf00      	nop
    8ea0:	e000e100 	.word	0xe000e100

00008ea4 <hri_oscctrl_get_DPLLSTATUS_reg>:
{
    8ea4:	b480      	push	{r7}
    8ea6:	b087      	sub	sp, #28
    8ea8:	af00      	add	r7, sp, #0
    8eaa:	60f8      	str	r0, [r7, #12]
    8eac:	460b      	mov	r3, r1
    8eae:	607a      	str	r2, [r7, #4]
    8eb0:	72fb      	strb	r3, [r7, #11]
	tmp = ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg;
    8eb2:	7afa      	ldrb	r2, [r7, #11]
    8eb4:	68f9      	ldr	r1, [r7, #12]
    8eb6:	4613      	mov	r3, r2
    8eb8:	009b      	lsls	r3, r3, #2
    8eba:	4413      	add	r3, r2
    8ebc:	009b      	lsls	r3, r3, #2
    8ebe:	440b      	add	r3, r1
    8ec0:	3340      	adds	r3, #64	; 0x40
    8ec2:	681b      	ldr	r3, [r3, #0]
    8ec4:	617b      	str	r3, [r7, #20]
	tmp &= mask;
    8ec6:	697a      	ldr	r2, [r7, #20]
    8ec8:	687b      	ldr	r3, [r7, #4]
    8eca:	4013      	ands	r3, r2
    8ecc:	617b      	str	r3, [r7, #20]
	return tmp;
    8ece:	697b      	ldr	r3, [r7, #20]
}
    8ed0:	4618      	mov	r0, r3
    8ed2:	371c      	adds	r7, #28
    8ed4:	46bd      	mov	sp, r7
    8ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eda:	4770      	bx	lr

00008edc <hri_oscctrl_get_STATUS_reg>:
{
    8edc:	b480      	push	{r7}
    8ede:	b085      	sub	sp, #20
    8ee0:	af00      	add	r7, sp, #0
    8ee2:	6078      	str	r0, [r7, #4]
    8ee4:	6039      	str	r1, [r7, #0]
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    8ee6:	687b      	ldr	r3, [r7, #4]
    8ee8:	691b      	ldr	r3, [r3, #16]
    8eea:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    8eec:	68fa      	ldr	r2, [r7, #12]
    8eee:	683b      	ldr	r3, [r7, #0]
    8ef0:	4013      	ands	r3, r2
    8ef2:	60fb      	str	r3, [r7, #12]
	return tmp;
    8ef4:	68fb      	ldr	r3, [r7, #12]
}
    8ef6:	4618      	mov	r0, r3
    8ef8:	3714      	adds	r7, #20
    8efa:	46bd      	mov	sp, r7
    8efc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f00:	4770      	bx	lr

00008f02 <hri_oscctrl_get_DFLLCTRLB_MODE_bit>:
{
    8f02:	b480      	push	{r7}
    8f04:	b085      	sub	sp, #20
    8f06:	af00      	add	r7, sp, #0
    8f08:	6078      	str	r0, [r7, #4]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    8f0a:	687b      	ldr	r3, [r7, #4]
    8f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
    8f10:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & OSCCTRL_DFLLCTRLB_MODE) >> OSCCTRL_DFLLCTRLB_MODE_Pos;
    8f12:	7bfb      	ldrb	r3, [r7, #15]
    8f14:	f003 0301 	and.w	r3, r3, #1
    8f18:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    8f1a:	7bfb      	ldrb	r3, [r7, #15]
    8f1c:	2b00      	cmp	r3, #0
    8f1e:	bf14      	ite	ne
    8f20:	2301      	movne	r3, #1
    8f22:	2300      	moveq	r3, #0
    8f24:	b2db      	uxtb	r3, r3
}
    8f26:	4618      	mov	r0, r3
    8f28:	3714      	adds	r7, #20
    8f2a:	46bd      	mov	sp, r7
    8f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f30:	4770      	bx	lr

00008f32 <hri_usb_wait_for_sync>:
typedef uint8_t  hri_usbpipe_pintenset_reg_t;
typedef uint8_t  hri_usbpipe_pintflag_reg_t;
typedef uint8_t  hri_usbpipe_pstatus_reg_t;

static inline void hri_usb_wait_for_sync(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8f32:	b480      	push	{r7}
    8f34:	b083      	sub	sp, #12
    8f36:	af00      	add	r7, sp, #0
    8f38:	6078      	str	r0, [r7, #4]
    8f3a:	460b      	mov	r3, r1
    8f3c:	70fb      	strb	r3, [r7, #3]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    8f3e:	bf00      	nop
    8f40:	687b      	ldr	r3, [r7, #4]
    8f42:	789b      	ldrb	r3, [r3, #2]
    8f44:	b2da      	uxtb	r2, r3
    8f46:	78fb      	ldrb	r3, [r7, #3]
    8f48:	4013      	ands	r3, r2
    8f4a:	b2db      	uxtb	r3, r3
    8f4c:	2b00      	cmp	r3, #0
    8f4e:	d1f7      	bne.n	8f40 <hri_usb_wait_for_sync+0xe>
	};
}
    8f50:	bf00      	nop
    8f52:	370c      	adds	r7, #12
    8f54:	46bd      	mov	sp, r7
    8f56:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f5a:	4770      	bx	lr

00008f5c <hri_usb_is_syncing>:

static inline bool hri_usb_is_syncing(const void *const hw, hri_usb_syncbusy_reg_t reg)
{
    8f5c:	b480      	push	{r7}
    8f5e:	b083      	sub	sp, #12
    8f60:	af00      	add	r7, sp, #0
    8f62:	6078      	str	r0, [r7, #4]
    8f64:	460b      	mov	r3, r1
    8f66:	70fb      	strb	r3, [r7, #3]
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    8f68:	687b      	ldr	r3, [r7, #4]
    8f6a:	789b      	ldrb	r3, [r3, #2]
    8f6c:	b2da      	uxtb	r2, r3
    8f6e:	78fb      	ldrb	r3, [r7, #3]
    8f70:	4013      	ands	r3, r2
    8f72:	b2db      	uxtb	r3, r3
    8f74:	2b00      	cmp	r3, #0
    8f76:	bf14      	ite	ne
    8f78:	2301      	movne	r3, #1
    8f7a:	2300      	moveq	r3, #0
    8f7c:	b2db      	uxtb	r3, r3
}
    8f7e:	4618      	mov	r0, r3
    8f80:	370c      	adds	r7, #12
    8f82:	46bd      	mov	sp, r7
    8f84:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f88:	4770      	bx	lr

00008f8a <hri_usbendpoint_get_EPINTFLAG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
}

static inline hri_usbendpoint_epintflag_reg_t
hri_usbendpoint_get_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index, hri_usbendpoint_epintflag_reg_t mask)
{
    8f8a:	b480      	push	{r7}
    8f8c:	b085      	sub	sp, #20
    8f8e:	af00      	add	r7, sp, #0
    8f90:	6078      	str	r0, [r7, #4]
    8f92:	460b      	mov	r3, r1
    8f94:	70fb      	strb	r3, [r7, #3]
    8f96:	4613      	mov	r3, r2
    8f98:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8f9a:	78fb      	ldrb	r3, [r7, #3]
    8f9c:	687a      	ldr	r2, [r7, #4]
    8f9e:	3308      	adds	r3, #8
    8fa0:	015b      	lsls	r3, r3, #5
    8fa2:	4413      	add	r3, r2
    8fa4:	3307      	adds	r3, #7
    8fa6:	781b      	ldrb	r3, [r3, #0]
    8fa8:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    8faa:	7bfa      	ldrb	r2, [r7, #15]
    8fac:	78bb      	ldrb	r3, [r7, #2]
    8fae:	4013      	ands	r3, r2
    8fb0:	73fb      	strb	r3, [r7, #15]
	return tmp;
    8fb2:	7bfb      	ldrb	r3, [r7, #15]
}
    8fb4:	4618      	mov	r0, r3
    8fb6:	3714      	adds	r7, #20
    8fb8:	46bd      	mov	sp, r7
    8fba:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fbe:	4770      	bx	lr

00008fc0 <hri_usbendpoint_read_EPINTFLAG_reg>:

static inline hri_usbendpoint_epintflag_reg_t hri_usbendpoint_read_EPINTFLAG_reg(const void *const hw,
                                                                                 uint8_t           submodule_index)
{
    8fc0:	b480      	push	{r7}
    8fc2:	b083      	sub	sp, #12
    8fc4:	af00      	add	r7, sp, #0
    8fc6:	6078      	str	r0, [r7, #4]
    8fc8:	460b      	mov	r3, r1
    8fca:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    8fcc:	78fb      	ldrb	r3, [r7, #3]
    8fce:	687a      	ldr	r2, [r7, #4]
    8fd0:	3308      	adds	r3, #8
    8fd2:	015b      	lsls	r3, r3, #5
    8fd4:	4413      	add	r3, r2
    8fd6:	3307      	adds	r3, #7
    8fd8:	781b      	ldrb	r3, [r3, #0]
    8fda:	b2db      	uxtb	r3, r3
}
    8fdc:	4618      	mov	r0, r3
    8fde:	370c      	adds	r7, #12
    8fe0:	46bd      	mov	sp, r7
    8fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fe6:	4770      	bx	lr

00008fe8 <hri_usbendpoint_clear_EPINTFLAG_reg>:

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
    8fe8:	b480      	push	{r7}
    8fea:	b083      	sub	sp, #12
    8fec:	af00      	add	r7, sp, #0
    8fee:	6078      	str	r0, [r7, #4]
    8ff0:	460b      	mov	r3, r1
    8ff2:	70fb      	strb	r3, [r7, #3]
    8ff4:	4613      	mov	r3, r2
    8ff6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    8ff8:	78fb      	ldrb	r3, [r7, #3]
    8ffa:	687a      	ldr	r2, [r7, #4]
    8ffc:	3308      	adds	r3, #8
    8ffe:	015b      	lsls	r3, r3, #5
    9000:	4413      	add	r3, r2
    9002:	3307      	adds	r3, #7
    9004:	78ba      	ldrb	r2, [r7, #2]
    9006:	701a      	strb	r2, [r3, #0]
}
    9008:	bf00      	nop
    900a:	370c      	adds	r7, #12
    900c:	46bd      	mov	sp, r7
    900e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9012:	4770      	bx	lr

00009014 <hri_usbendpoint_set_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUS_BK1RDY;
}

static inline void hri_usbendpoint_set_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                    hri_usbendpoint_epstatus_reg_t mask)
{
    9014:	b480      	push	{r7}
    9016:	b083      	sub	sp, #12
    9018:	af00      	add	r7, sp, #0
    901a:	6078      	str	r0, [r7, #4]
    901c:	460b      	mov	r3, r1
    901e:	70fb      	strb	r3, [r7, #3]
    9020:	4613      	mov	r3, r2
    9022:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    9024:	78fb      	ldrb	r3, [r7, #3]
    9026:	687a      	ldr	r2, [r7, #4]
    9028:	3308      	adds	r3, #8
    902a:	015b      	lsls	r3, r3, #5
    902c:	4413      	add	r3, r2
    902e:	3305      	adds	r3, #5
    9030:	78ba      	ldrb	r2, [r7, #2]
    9032:	701a      	strb	r2, [r3, #0]
}
    9034:	bf00      	nop
    9036:	370c      	adds	r7, #12
    9038:	46bd      	mov	sp, r7
    903a:	f85d 7b04 	ldr.w	r7, [sp], #4
    903e:	4770      	bx	lr

00009040 <hri_usbendpoint_read_EPSTATUS_reg>:
	return tmp;
}

static inline hri_usbendpoint_epstatus_reg_t hri_usbendpoint_read_EPSTATUS_reg(const void *const hw,
                                                                               uint8_t           submodule_index)
{
    9040:	b480      	push	{r7}
    9042:	b083      	sub	sp, #12
    9044:	af00      	add	r7, sp, #0
    9046:	6078      	str	r0, [r7, #4]
    9048:	460b      	mov	r3, r1
    904a:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    904c:	78fb      	ldrb	r3, [r7, #3]
    904e:	687a      	ldr	r2, [r7, #4]
    9050:	3308      	adds	r3, #8
    9052:	015b      	lsls	r3, r3, #5
    9054:	4413      	add	r3, r2
    9056:	3306      	adds	r3, #6
    9058:	781b      	ldrb	r3, [r3, #0]
    905a:	b2db      	uxtb	r3, r3
}
    905c:	4618      	mov	r0, r3
    905e:	370c      	adds	r7, #12
    9060:	46bd      	mov	sp, r7
    9062:	f85d 7b04 	ldr.w	r7, [sp], #4
    9066:	4770      	bx	lr

00009068 <hri_usbendpoint_clear_EPSTATUS_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPSTATUS_reg(const void *const hw, uint8_t submodule_index,
                                                      hri_usbendpoint_epstatus_reg_t mask)
{
    9068:	b480      	push	{r7}
    906a:	b083      	sub	sp, #12
    906c:	af00      	add	r7, sp, #0
    906e:	6078      	str	r0, [r7, #4]
    9070:	460b      	mov	r3, r1
    9072:	70fb      	strb	r3, [r7, #3]
    9074:	4613      	mov	r3, r2
    9076:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    9078:	78fb      	ldrb	r3, [r7, #3]
    907a:	687a      	ldr	r2, [r7, #4]
    907c:	3308      	adds	r3, #8
    907e:	015b      	lsls	r3, r3, #5
    9080:	4413      	add	r3, r2
    9082:	3304      	adds	r3, #4
    9084:	78ba      	ldrb	r2, [r7, #2]
    9086:	701a      	strb	r2, [r3, #0]
}
    9088:	bf00      	nop
    908a:	370c      	adds	r7, #12
    908c:	46bd      	mov	sp, r7
    908e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9092:	4770      	bx	lr

00009094 <hri_usbendpoint_clear_EPINTEN_RXSTP_bit>:
		((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
    9094:	b480      	push	{r7}
    9096:	b083      	sub	sp, #12
    9098:	af00      	add	r7, sp, #0
    909a:	6078      	str	r0, [r7, #4]
    909c:	460b      	mov	r3, r1
    909e:	70fb      	strb	r3, [r7, #3]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    90a0:	78fb      	ldrb	r3, [r7, #3]
    90a2:	687a      	ldr	r2, [r7, #4]
    90a4:	015b      	lsls	r3, r3, #5
    90a6:	4413      	add	r3, r2
    90a8:	f503 7384 	add.w	r3, r3, #264	; 0x108
    90ac:	2210      	movs	r2, #16
    90ae:	701a      	strb	r2, [r3, #0]
}
    90b0:	bf00      	nop
    90b2:	370c      	adds	r7, #12
    90b4:	46bd      	mov	sp, r7
    90b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    90ba:	4770      	bx	lr

000090bc <hri_usbendpoint_set_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_STALL1;
}

static inline void hri_usbendpoint_set_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epintenset_reg_t mask)
{
    90bc:	b480      	push	{r7}
    90be:	b083      	sub	sp, #12
    90c0:	af00      	add	r7, sp, #0
    90c2:	6078      	str	r0, [r7, #4]
    90c4:	460b      	mov	r3, r1
    90c6:	70fb      	strb	r3, [r7, #3]
    90c8:	4613      	mov	r3, r2
    90ca:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    90cc:	78fb      	ldrb	r3, [r7, #3]
    90ce:	687a      	ldr	r2, [r7, #4]
    90d0:	015b      	lsls	r3, r3, #5
    90d2:	4413      	add	r3, r2
    90d4:	f203 1309 	addw	r3, r3, #265	; 0x109
    90d8:	78ba      	ldrb	r2, [r7, #2]
    90da:	701a      	strb	r2, [r3, #0]
}
    90dc:	bf00      	nop
    90de:	370c      	adds	r7, #12
    90e0:	46bd      	mov	sp, r7
    90e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    90e6:	4770      	bx	lr

000090e8 <hri_usbendpoint_clear_EPINTEN_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = ~data;
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
    90e8:	b480      	push	{r7}
    90ea:	b083      	sub	sp, #12
    90ec:	af00      	add	r7, sp, #0
    90ee:	6078      	str	r0, [r7, #4]
    90f0:	460b      	mov	r3, r1
    90f2:	70fb      	strb	r3, [r7, #3]
    90f4:	4613      	mov	r3, r2
    90f6:	70bb      	strb	r3, [r7, #2]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    90f8:	78fb      	ldrb	r3, [r7, #3]
    90fa:	687a      	ldr	r2, [r7, #4]
    90fc:	015b      	lsls	r3, r3, #5
    90fe:	4413      	add	r3, r2
    9100:	f503 7384 	add.w	r3, r3, #264	; 0x108
    9104:	78ba      	ldrb	r2, [r7, #2]
    9106:	701a      	strb	r2, [r3, #0]
}
    9108:	bf00      	nop
    910a:	370c      	adds	r7, #12
    910c:	46bd      	mov	sp, r7
    910e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9112:	4770      	bx	lr

00009114 <hri_usbendpoint_read_EPCFG_EPTYPE0_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE0_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9114:	b480      	push	{r7}
    9116:	b085      	sub	sp, #20
    9118:	af00      	add	r7, sp, #0
    911a:	6078      	str	r0, [r7, #4]
    911c:	460b      	mov	r3, r1
    911e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9120:	78fb      	ldrb	r3, [r7, #3]
    9122:	687a      	ldr	r2, [r7, #4]
    9124:	3308      	adds	r3, #8
    9126:	015b      	lsls	r3, r3, #5
    9128:	4413      	add	r3, r2
    912a:	781b      	ldrb	r3, [r3, #0]
    912c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    912e:	7bfb      	ldrb	r3, [r7, #15]
    9130:	f003 0307 	and.w	r3, r3, #7
    9134:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9136:	7bfb      	ldrb	r3, [r7, #15]
}
    9138:	4618      	mov	r0, r3
    913a:	3714      	adds	r7, #20
    913c:	46bd      	mov	sp, r7
    913e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9142:	4770      	bx	lr

00009144 <hri_usbendpoint_read_EPCFG_EPTYPE1_bf>:
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
    9144:	b480      	push	{r7}
    9146:	b085      	sub	sp, #20
    9148:	af00      	add	r7, sp, #0
    914a:	6078      	str	r0, [r7, #4]
    914c:	460b      	mov	r3, r1
    914e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    9150:	78fb      	ldrb	r3, [r7, #3]
    9152:	687a      	ldr	r2, [r7, #4]
    9154:	3308      	adds	r3, #8
    9156:	015b      	lsls	r3, r3, #5
    9158:	4413      	add	r3, r2
    915a:	781b      	ldrb	r3, [r3, #0]
    915c:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    915e:	7bfb      	ldrb	r3, [r7, #15]
    9160:	091b      	lsrs	r3, r3, #4
    9162:	b2db      	uxtb	r3, r3
    9164:	f003 0307 	and.w	r3, r3, #7
    9168:	73fb      	strb	r3, [r7, #15]
	return tmp;
    916a:	7bfb      	ldrb	r3, [r7, #15]
}
    916c:	4618      	mov	r0, r3
    916e:	3714      	adds	r7, #20
    9170:	46bd      	mov	sp, r7
    9172:	f85d 7b04 	ldr.w	r7, [sp], #4
    9176:	4770      	bx	lr

00009178 <hri_usbendpoint_write_EPCFG_reg>:
	return tmp;
}

static inline void hri_usbendpoint_write_EPCFG_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_usbendpoint_epcfg_reg_t data)
{
    9178:	b480      	push	{r7}
    917a:	b083      	sub	sp, #12
    917c:	af00      	add	r7, sp, #0
    917e:	6078      	str	r0, [r7, #4]
    9180:	460b      	mov	r3, r1
    9182:	70fb      	strb	r3, [r7, #3]
    9184:	4613      	mov	r3, r2
    9186:	70bb      	strb	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    9188:	78fb      	ldrb	r3, [r7, #3]
    918a:	687a      	ldr	r2, [r7, #4]
    918c:	3308      	adds	r3, #8
    918e:	015b      	lsls	r3, r3, #5
    9190:	4413      	add	r3, r2
    9192:	78ba      	ldrb	r2, [r7, #2]
    9194:	701a      	strb	r2, [r3, #0]
	USB_CRITICAL_SECTION_LEAVE();
}
    9196:	bf00      	nop
    9198:	370c      	adds	r7, #12
    919a:	46bd      	mov	sp, r7
    919c:	f85d 7b04 	ldr.w	r7, [sp], #4
    91a0:	4770      	bx	lr

000091a2 <hri_usbendpoint_read_EPCFG_reg>:
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg ^= mask;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_reg(const void *const hw, uint8_t submodule_index)
{
    91a2:	b480      	push	{r7}
    91a4:	b083      	sub	sp, #12
    91a6:	af00      	add	r7, sp, #0
    91a8:	6078      	str	r0, [r7, #4]
    91aa:	460b      	mov	r3, r1
    91ac:	70fb      	strb	r3, [r7, #3]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    91ae:	78fb      	ldrb	r3, [r7, #3]
    91b0:	687a      	ldr	r2, [r7, #4]
    91b2:	3308      	adds	r3, #8
    91b4:	015b      	lsls	r3, r3, #5
    91b6:	4413      	add	r3, r2
    91b8:	781b      	ldrb	r3, [r3, #0]
    91ba:	b2db      	uxtb	r3, r3
}
    91bc:	4618      	mov	r0, r3
    91be:	370c      	adds	r7, #12
    91c0:	46bd      	mov	sp, r7
    91c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    91c6:	4770      	bx	lr

000091c8 <hri_usbdevice_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
    91c8:	b480      	push	{r7}
    91ca:	b083      	sub	sp, #12
    91cc:	af00      	add	r7, sp, #0
    91ce:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    91d0:	687b      	ldr	r3, [r7, #4]
    91d2:	8b9b      	ldrh	r3, [r3, #28]
    91d4:	b29b      	uxth	r3, r3
}
    91d6:	4618      	mov	r0, r3
    91d8:	370c      	adds	r7, #12
    91da:	46bd      	mov	sp, r7
    91dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    91e0:	4770      	bx	lr

000091e2 <hri_usbdevice_clear_INTFLAG_reg>:

static inline void hri_usbdevice_clear_INTFLAG_reg(const void *const hw, hri_usbdevice_intflag_reg_t mask)
{
    91e2:	b480      	push	{r7}
    91e4:	b083      	sub	sp, #12
    91e6:	af00      	add	r7, sp, #0
    91e8:	6078      	str	r0, [r7, #4]
    91ea:	460b      	mov	r3, r1
    91ec:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    91ee:	687b      	ldr	r3, [r7, #4]
    91f0:	887a      	ldrh	r2, [r7, #2]
    91f2:	839a      	strh	r2, [r3, #28]
}
    91f4:	bf00      	nop
    91f6:	370c      	adds	r7, #12
    91f8:	46bd      	mov	sp, r7
    91fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    91fe:	4770      	bx	lr

00009200 <hri_usbdevice_set_INTEN_reg>:
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = USB_DEVICE_INTENSET_LPMSUSP;
}

static inline void hri_usbdevice_set_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    9200:	b480      	push	{r7}
    9202:	b083      	sub	sp, #12
    9204:	af00      	add	r7, sp, #0
    9206:	6078      	str	r0, [r7, #4]
    9208:	460b      	mov	r3, r1
    920a:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    920c:	687b      	ldr	r3, [r7, #4]
    920e:	887a      	ldrh	r2, [r7, #2]
    9210:	831a      	strh	r2, [r3, #24]
}
    9212:	bf00      	nop
    9214:	370c      	adds	r7, #12
    9216:	46bd      	mov	sp, r7
    9218:	f85d 7b04 	ldr.w	r7, [sp], #4
    921c:	4770      	bx	lr

0000921e <hri_usbdevice_read_INTEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
    921e:	b480      	push	{r7}
    9220:	b083      	sub	sp, #12
    9222:	af00      	add	r7, sp, #0
    9224:	6078      	str	r0, [r7, #4]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    9226:	687b      	ldr	r3, [r7, #4]
    9228:	8b1b      	ldrh	r3, [r3, #24]
    922a:	b29b      	uxth	r3, r3
}
    922c:	4618      	mov	r0, r3
    922e:	370c      	adds	r7, #12
    9230:	46bd      	mov	sp, r7
    9232:	f85d 7b04 	ldr.w	r7, [sp], #4
    9236:	4770      	bx	lr

00009238 <hri_usbdevice_clear_INTEN_reg>:
	((Usb *)hw)->DEVICE.INTENSET.reg = data;
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
    9238:	b480      	push	{r7}
    923a:	b083      	sub	sp, #12
    923c:	af00      	add	r7, sp, #0
    923e:	6078      	str	r0, [r7, #4]
    9240:	460b      	mov	r3, r1
    9242:	807b      	strh	r3, [r7, #2]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    9244:	687b      	ldr	r3, [r7, #4]
    9246:	887a      	ldrh	r2, [r7, #2]
    9248:	829a      	strh	r2, [r3, #20]
}
    924a:	bf00      	nop
    924c:	370c      	adds	r7, #12
    924e:	46bd      	mov	sp, r7
    9250:	f85d 7b04 	ldr.w	r7, [sp], #4
    9254:	4770      	bx	lr

00009256 <hri_usb_get_SYNCBUSY_reg>:
{
	return (((Usb *)hw)->HOST.SYNCBUSY.reg & USB_SYNCBUSY_ENABLE) >> USB_SYNCBUSY_ENABLE_Pos;
}

static inline hri_usb_syncbusy_reg_t hri_usb_get_SYNCBUSY_reg(const void *const hw, hri_usb_syncbusy_reg_t mask)
{
    9256:	b480      	push	{r7}
    9258:	b085      	sub	sp, #20
    925a:	af00      	add	r7, sp, #0
    925c:	6078      	str	r0, [r7, #4]
    925e:	460b      	mov	r3, r1
    9260:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    9262:	687b      	ldr	r3, [r7, #4]
    9264:	789b      	ldrb	r3, [r3, #2]
    9266:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    9268:	7bfa      	ldrb	r2, [r7, #15]
    926a:	78fb      	ldrb	r3, [r7, #3]
    926c:	4013      	ands	r3, r2
    926e:	73fb      	strb	r3, [r7, #15]
	return tmp;
    9270:	7bfb      	ldrb	r3, [r7, #15]
}
    9272:	4618      	mov	r0, r3
    9274:	3714      	adds	r7, #20
    9276:	46bd      	mov	sp, r7
    9278:	f85d 7b04 	ldr.w	r7, [sp], #4
    927c:	4770      	bx	lr
	...

00009280 <hri_usb_clear_CTRLA_ENABLE_bit>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usb_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    9280:	b580      	push	{r7, lr}
    9282:	b082      	sub	sp, #8
    9284:	af00      	add	r7, sp, #0
    9286:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    9288:	687b      	ldr	r3, [r7, #4]
    928a:	781b      	ldrb	r3, [r3, #0]
    928c:	b2db      	uxtb	r3, r3
    928e:	f023 0302 	bic.w	r3, r3, #2
    9292:	b2da      	uxtb	r2, r3
    9294:	687b      	ldr	r3, [r7, #4]
    9296:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_SWRST | USB_SYNCBUSY_ENABLE);
    9298:	2103      	movs	r1, #3
    929a:	6878      	ldr	r0, [r7, #4]
    929c:	4b02      	ldr	r3, [pc, #8]	; (92a8 <hri_usb_clear_CTRLA_ENABLE_bit+0x28>)
    929e:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    92a0:	bf00      	nop
    92a2:	3708      	adds	r7, #8
    92a4:	46bd      	mov	sp, r7
    92a6:	bd80      	pop	{r7, pc}
    92a8:	00008f33 	.word	0x00008f33

000092ac <hri_usb_get_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
    92ac:	b580      	push	{r7, lr}
    92ae:	b084      	sub	sp, #16
    92b0:	af00      	add	r7, sp, #0
    92b2:	6078      	str	r0, [r7, #4]
    92b4:	460b      	mov	r3, r1
    92b6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    92b8:	2103      	movs	r1, #3
    92ba:	6878      	ldr	r0, [r7, #4]
    92bc:	4b06      	ldr	r3, [pc, #24]	; (92d8 <hri_usb_get_CTRLA_reg+0x2c>)
    92be:	4798      	blx	r3
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    92c0:	687b      	ldr	r3, [r7, #4]
    92c2:	781b      	ldrb	r3, [r3, #0]
    92c4:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    92c6:	7bfa      	ldrb	r2, [r7, #15]
    92c8:	78fb      	ldrb	r3, [r7, #3]
    92ca:	4013      	ands	r3, r2
    92cc:	73fb      	strb	r3, [r7, #15]
	return tmp;
    92ce:	7bfb      	ldrb	r3, [r7, #15]
}
    92d0:	4618      	mov	r0, r3
    92d2:	3710      	adds	r7, #16
    92d4:	46bd      	mov	sp, r7
    92d6:	bd80      	pop	{r7, pc}
    92d8:	00008f33 	.word	0x00008f33

000092dc <hri_usb_write_CTRLA_reg>:

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
    92dc:	b580      	push	{r7, lr}
    92de:	b082      	sub	sp, #8
    92e0:	af00      	add	r7, sp, #0
    92e2:	6078      	str	r0, [r7, #4]
    92e4:	460b      	mov	r3, r1
    92e6:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    92e8:	687b      	ldr	r3, [r7, #4]
    92ea:	78fa      	ldrb	r2, [r7, #3]
    92ec:	701a      	strb	r2, [r3, #0]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    92ee:	2103      	movs	r1, #3
    92f0:	6878      	ldr	r0, [r7, #4]
    92f2:	4b03      	ldr	r3, [pc, #12]	; (9300 <hri_usb_write_CTRLA_reg+0x24>)
    92f4:	4798      	blx	r3
	USB_CRITICAL_SECTION_LEAVE();
}
    92f6:	bf00      	nop
    92f8:	3708      	adds	r7, #8
    92fa:	46bd      	mov	sp, r7
    92fc:	bd80      	pop	{r7, pc}
    92fe:	bf00      	nop
    9300:	00008f33 	.word	0x00008f33

00009304 <hri_usb_read_CTRLA_reg>:
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	USB_CRITICAL_SECTION_LEAVE();
}

static inline hri_usb_ctrla_reg_t hri_usb_read_CTRLA_reg(const void *const hw)
{
    9304:	b580      	push	{r7, lr}
    9306:	b082      	sub	sp, #8
    9308:	af00      	add	r7, sp, #0
    930a:	6078      	str	r0, [r7, #4]
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
    930c:	2103      	movs	r1, #3
    930e:	6878      	ldr	r0, [r7, #4]
    9310:	4b04      	ldr	r3, [pc, #16]	; (9324 <hri_usb_read_CTRLA_reg+0x20>)
    9312:	4798      	blx	r3
	return ((Usb *)hw)->HOST.CTRLA.reg;
    9314:	687b      	ldr	r3, [r7, #4]
    9316:	781b      	ldrb	r3, [r3, #0]
    9318:	b2db      	uxtb	r3, r3
}
    931a:	4618      	mov	r0, r3
    931c:	3708      	adds	r7, #8
    931e:	46bd      	mov	sp, r7
    9320:	bd80      	pop	{r7, pc}
    9322:	bf00      	nop
    9324:	00008f33 	.word	0x00008f33

00009328 <hri_usbdevice_clear_CTRLB_DETACH_bit>:
	((Usb *)hw)->DEVICE.CTRLB.reg = tmp;
	USB_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbdevice_clear_CTRLB_DETACH_bit(const void *const hw)
{
    9328:	b480      	push	{r7}
    932a:	b083      	sub	sp, #12
    932c:	af00      	add	r7, sp, #0
    932e:	6078      	str	r0, [r7, #4]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    9330:	687b      	ldr	r3, [r7, #4]
    9332:	891b      	ldrh	r3, [r3, #8]
    9334:	b29b      	uxth	r3, r3
    9336:	f023 0301 	bic.w	r3, r3, #1
    933a:	b29a      	uxth	r2, r3
    933c:	687b      	ldr	r3, [r7, #4]
    933e:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    9340:	bf00      	nop
    9342:	370c      	adds	r7, #12
    9344:	46bd      	mov	sp, r7
    9346:	f85d 7b04 	ldr.w	r7, [sp], #4
    934a:	4770      	bx	lr

0000934c <hri_usbdevice_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_CTRLB_reg(const void *const hw, hri_usbdevice_ctrlb_reg_t data)
{
    934c:	b480      	push	{r7}
    934e:	b083      	sub	sp, #12
    9350:	af00      	add	r7, sp, #0
    9352:	6078      	str	r0, [r7, #4]
    9354:	460b      	mov	r3, r1
    9356:	807b      	strh	r3, [r7, #2]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    9358:	687b      	ldr	r3, [r7, #4]
    935a:	887a      	ldrh	r2, [r7, #2]
    935c:	811a      	strh	r2, [r3, #8]
	USB_CRITICAL_SECTION_LEAVE();
}
    935e:	bf00      	nop
    9360:	370c      	adds	r7, #12
    9362:	46bd      	mov	sp, r7
    9364:	f85d 7b04 	ldr.w	r7, [sp], #4
    9368:	4770      	bx	lr

0000936a <hri_usbdevice_write_DADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbdevice_write_DADD_reg(const void *const hw, hri_usbdevice_dadd_reg_t data)
{
    936a:	b480      	push	{r7}
    936c:	b083      	sub	sp, #12
    936e:	af00      	add	r7, sp, #0
    9370:	6078      	str	r0, [r7, #4]
    9372:	460b      	mov	r3, r1
    9374:	70fb      	strb	r3, [r7, #3]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DADD.reg = data;
    9376:	687b      	ldr	r3, [r7, #4]
    9378:	78fa      	ldrb	r2, [r7, #3]
    937a:	729a      	strb	r2, [r3, #10]
	USB_CRITICAL_SECTION_LEAVE();
}
    937c:	bf00      	nop
    937e:	370c      	adds	r7, #12
    9380:	46bd      	mov	sp, r7
    9382:	f85d 7b04 	ldr.w	r7, [sp], #4
    9386:	4770      	bx	lr

00009388 <hri_usb_write_DESCADD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
    9388:	b480      	push	{r7}
    938a:	b083      	sub	sp, #12
    938c:	af00      	add	r7, sp, #0
    938e:	6078      	str	r0, [r7, #4]
    9390:	6039      	str	r1, [r7, #0]
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    9392:	687b      	ldr	r3, [r7, #4]
    9394:	683a      	ldr	r2, [r7, #0]
    9396:	625a      	str	r2, [r3, #36]	; 0x24
	USB_CRITICAL_SECTION_LEAVE();
}
    9398:	bf00      	nop
    939a:	370c      	adds	r7, #12
    939c:	46bd      	mov	sp, r7
    939e:	f85d 7b04 	ldr.w	r7, [sp], #4
    93a2:	4770      	bx	lr

000093a4 <_dummy_func_no_return>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
    93a4:	b480      	push	{r7}
    93a6:	b083      	sub	sp, #12
    93a8:	af00      	add	r7, sp, #0
    93aa:	6078      	str	r0, [r7, #4]
    93ac:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
    93ae:	2300      	movs	r3, #0
}
    93b0:	4618      	mov	r0, r3
    93b2:	370c      	adds	r7, #12
    93b4:	46bd      	mov	sp, r7
    93b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    93ba:	4770      	bx	lr

000093bc <_usb_load_calib>:

/**
 * \brief Load USB calibration value from NVM
 */
static void _usb_load_calib(void)
{
    93bc:	b480      	push	{r7}
    93be:	b085      	sub	sp, #20
    93c0:	af00      	add	r7, sp, #0
#define NVM_USB_PAD_TRANSN_SIZE 5
#define NVM_USB_PAD_TRANSP_POS 37
#define NVM_USB_PAD_TRANSP_SIZE 5
#define NVM_USB_PAD_TRIM_POS 42
#define NVM_USB_PAD_TRIM_SIZE 3
	Usb *    hw = USB;
    93c2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    93c6:	603b      	str	r3, [r7, #0]
	uint32_t pad_transn
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    93c8:	4b28      	ldr	r3, [pc, #160]	; (946c <_usb_load_calib+0xb0>)
    93ca:	681b      	ldr	r3, [r3, #0]
	uint32_t pad_transn
    93cc:	f003 031f 	and.w	r3, r3, #31
    93d0:	60fb      	str	r3, [r7, #12]
	      & ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);
	uint32_t pad_transp
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    93d2:	4b26      	ldr	r3, [pc, #152]	; (946c <_usb_load_calib+0xb0>)
    93d4:	681b      	ldr	r3, [r3, #0]
    93d6:	095b      	lsrs	r3, r3, #5
	uint32_t pad_transp
    93d8:	f003 031f 	and.w	r3, r3, #31
    93dc:	60bb      	str	r3, [r7, #8]
	      & ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    93de:	4b23      	ldr	r3, [pc, #140]	; (946c <_usb_load_calib+0xb0>)
    93e0:	681b      	ldr	r3, [r3, #0]
    93e2:	0a9b      	lsrs	r3, r3, #10
    93e4:	f003 0307 	and.w	r3, r3, #7
    93e8:	607b      	str	r3, [r7, #4]
	                    & ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);
	if (pad_transn == 0 || pad_transn == 0x1F) {
    93ea:	68fb      	ldr	r3, [r7, #12]
    93ec:	2b00      	cmp	r3, #0
    93ee:	d002      	beq.n	93f6 <_usb_load_calib+0x3a>
    93f0:	68fb      	ldr	r3, [r7, #12]
    93f2:	2b1f      	cmp	r3, #31
    93f4:	d101      	bne.n	93fa <_usb_load_calib+0x3e>
		pad_transn = 9;
    93f6:	2309      	movs	r3, #9
    93f8:	60fb      	str	r3, [r7, #12]
	}
	if (pad_transp == 0 || pad_transp == 0x1F) {
    93fa:	68bb      	ldr	r3, [r7, #8]
    93fc:	2b00      	cmp	r3, #0
    93fe:	d002      	beq.n	9406 <_usb_load_calib+0x4a>
    9400:	68bb      	ldr	r3, [r7, #8]
    9402:	2b1f      	cmp	r3, #31
    9404:	d101      	bne.n	940a <_usb_load_calib+0x4e>
		pad_transp = 25;
    9406:	2319      	movs	r3, #25
    9408:	60bb      	str	r3, [r7, #8]
	}
	if (pad_trim == 0 || pad_trim == 0x7) {
    940a:	687b      	ldr	r3, [r7, #4]
    940c:	2b00      	cmp	r3, #0
    940e:	d002      	beq.n	9416 <_usb_load_calib+0x5a>
    9410:	687b      	ldr	r3, [r7, #4]
    9412:	2b07      	cmp	r3, #7
    9414:	d101      	bne.n	941a <_usb_load_calib+0x5e>
		pad_trim = 6;
    9416:	2306      	movs	r3, #6
    9418:	607b      	str	r3, [r7, #4]
	}

	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    941a:	68fb      	ldr	r3, [r7, #12]
    941c:	b29b      	uxth	r3, r3
    941e:	019b      	lsls	r3, r3, #6
    9420:	b29b      	uxth	r3, r3
    9422:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
    9426:	b29a      	uxth	r2, r3
    9428:	68bb      	ldr	r3, [r7, #8]
    942a:	b29b      	uxth	r3, r3
    942c:	f003 031f 	and.w	r3, r3, #31
    9430:	b29b      	uxth	r3, r3
    9432:	4313      	orrs	r3, r2
    9434:	b29a      	uxth	r2, r3
    9436:	687b      	ldr	r3, [r7, #4]
    9438:	b29b      	uxth	r3, r3
    943a:	031b      	lsls	r3, r3, #12
    943c:	b29b      	uxth	r3, r3
    943e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    9442:	b29b      	uxth	r3, r3
    9444:	4313      	orrs	r3, r2
    9446:	b29a      	uxth	r2, r3
    9448:	683b      	ldr	r3, [r7, #0]
    944a:	851a      	strh	r2, [r3, #40]	; 0x28

	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    944c:	683a      	ldr	r2, [r7, #0]
    944e:	78d3      	ldrb	r3, [r2, #3]
    9450:	f043 0303 	orr.w	r3, r3, #3
    9454:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    9456:	683a      	ldr	r2, [r7, #0]
    9458:	78d3      	ldrb	r3, [r2, #3]
    945a:	f043 030c 	orr.w	r3, r3, #12
    945e:	70d3      	strb	r3, [r2, #3]
}
    9460:	bf00      	nop
    9462:	3714      	adds	r7, #20
    9464:	46bd      	mov	sp, r7
    9466:	f85d 7b04 	ldr.w	r7, [sp], #4
    946a:	4770      	bx	lr
    946c:	00800084 	.word	0x00800084

00009470 <_usb_d_dev_wait_dpll_rdy>:

/**
 * \brief Wait DPLL clock to be ready
 */
static inline void _usb_d_dev_wait_dpll_rdy(void)
{
    9470:	b580      	push	{r7, lr}
    9472:	af00      	add	r7, sp, #0
#define DPLL_READY_FLAG (OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)
	while (hri_oscctrl_get_DPLLSTATUS_reg(OSCCTRL, 0, DPLL_READY_FLAG) != DPLL_READY_FLAG)
    9474:	bf00      	nop
    9476:	2203      	movs	r2, #3
    9478:	2100      	movs	r1, #0
    947a:	4804      	ldr	r0, [pc, #16]	; (948c <_usb_d_dev_wait_dpll_rdy+0x1c>)
    947c:	4b04      	ldr	r3, [pc, #16]	; (9490 <_usb_d_dev_wait_dpll_rdy+0x20>)
    947e:	4798      	blx	r3
    9480:	4603      	mov	r3, r0
    9482:	2b03      	cmp	r3, #3
    9484:	d1f7      	bne.n	9476 <_usb_d_dev_wait_dpll_rdy+0x6>
		;
}
    9486:	bf00      	nop
    9488:	bd80      	pop	{r7, pc}
    948a:	bf00      	nop
    948c:	40001000 	.word	0x40001000
    9490:	00008ea5 	.word	0x00008ea5

00009494 <_usb_d_dev_wait_dfll_rdy>:

/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
    9494:	b580      	push	{r7, lr}
    9496:	af00      	add	r7, sp, #0
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    9498:	480e      	ldr	r0, [pc, #56]	; (94d4 <_usb_d_dev_wait_dfll_rdy+0x40>)
    949a:	4b0f      	ldr	r3, [pc, #60]	; (94d8 <_usb_d_dev_wait_dfll_rdy+0x44>)
    949c:	4798      	blx	r3
    949e:	4603      	mov	r3, r0
    94a0:	2b00      	cmp	r3, #0
    94a2:	d00a      	beq.n	94ba <_usb_d_dev_wait_dfll_rdy+0x26>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    94a4:	bf00      	nop
    94a6:	f44f 6110 	mov.w	r1, #2304	; 0x900
    94aa:	480a      	ldr	r0, [pc, #40]	; (94d4 <_usb_d_dev_wait_dfll_rdy+0x40>)
    94ac:	4b0b      	ldr	r3, [pc, #44]	; (94dc <_usb_d_dev_wait_dfll_rdy+0x48>)
    94ae:	4798      	blx	r3
    94b0:	4603      	mov	r3, r0
    94b2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    94b6:	d1f6      	bne.n	94a6 <_usb_d_dev_wait_dfll_rdy+0x12>
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
			;
	}
}
    94b8:	e009      	b.n	94ce <_usb_d_dev_wait_dfll_rdy+0x3a>
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    94ba:	bf00      	nop
    94bc:	f44f 7180 	mov.w	r1, #256	; 0x100
    94c0:	4804      	ldr	r0, [pc, #16]	; (94d4 <_usb_d_dev_wait_dfll_rdy+0x40>)
    94c2:	4b06      	ldr	r3, [pc, #24]	; (94dc <_usb_d_dev_wait_dfll_rdy+0x48>)
    94c4:	4798      	blx	r3
    94c6:	4603      	mov	r3, r0
    94c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    94cc:	d1f6      	bne.n	94bc <_usb_d_dev_wait_dfll_rdy+0x28>
}
    94ce:	bf00      	nop
    94d0:	bd80      	pop	{r7, pc}
    94d2:	bf00      	nop
    94d4:	40001000 	.word	0x40001000
    94d8:	00008f03 	.word	0x00008f03
    94dc:	00008edd 	.word	0x00008edd

000094e0 <_usb_d_dev_wait_clk_rdy>:
 * \brief Wait USB source clock to be ready
 * \param[in] clk_src Clock source, could be \ref USB_CLK_SRC_DFLL or
 *                    \ref USB_CLK_SRC_DPLL.
 */
static inline void _usb_d_dev_wait_clk_rdy(const uint8_t clk_src)
{
    94e0:	b580      	push	{r7, lr}
    94e2:	b082      	sub	sp, #8
    94e4:	af00      	add	r7, sp, #0
    94e6:	4603      	mov	r3, r0
    94e8:	71fb      	strb	r3, [r7, #7]
	if (clk_src == USB_CLK_SRC_DFLL) {
    94ea:	79fb      	ldrb	r3, [r7, #7]
    94ec:	2b00      	cmp	r3, #0
    94ee:	d102      	bne.n	94f6 <_usb_d_dev_wait_clk_rdy+0x16>
		_usb_d_dev_wait_dfll_rdy();
    94f0:	4b05      	ldr	r3, [pc, #20]	; (9508 <_usb_d_dev_wait_clk_rdy+0x28>)
    94f2:	4798      	blx	r3
	} else if (clk_src == USB_CLK_SRC_DPLL) {
		_usb_d_dev_wait_dpll_rdy();
	}
}
    94f4:	e004      	b.n	9500 <_usb_d_dev_wait_clk_rdy+0x20>
	} else if (clk_src == USB_CLK_SRC_DPLL) {
    94f6:	79fb      	ldrb	r3, [r7, #7]
    94f8:	2b01      	cmp	r3, #1
    94fa:	d101      	bne.n	9500 <_usb_d_dev_wait_clk_rdy+0x20>
		_usb_d_dev_wait_dpll_rdy();
    94fc:	4b03      	ldr	r3, [pc, #12]	; (950c <_usb_d_dev_wait_clk_rdy+0x2c>)
    94fe:	4798      	blx	r3
}
    9500:	bf00      	nop
    9502:	3708      	adds	r7, #8
    9504:	46bd      	mov	sp, r7
    9506:	bd80      	pop	{r7, pc}
    9508:	00009495 	.word	0x00009495
    950c:	00009471 	.word	0x00009471

00009510 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
    9510:	b580      	push	{r7, lr}
    9512:	b082      	sub	sp, #8
    9514:	af00      	add	r7, sp, #0
    9516:	4603      	mov	r3, r0
    9518:	6039      	str	r1, [r7, #0]
    951a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTFLAG_reg(USB, epn, flags);
    951c:	683b      	ldr	r3, [r7, #0]
    951e:	b2da      	uxtb	r2, r3
    9520:	79fb      	ldrb	r3, [r7, #7]
    9522:	4619      	mov	r1, r3
    9524:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9528:	4b02      	ldr	r3, [pc, #8]	; (9534 <_usbd_ep_int_ack+0x24>)
    952a:	4798      	blx	r3
}
    952c:	bf00      	nop
    952e:	3708      	adds	r7, #8
    9530:	46bd      	mov	sp, r7
    9532:	bd80      	pop	{r7, pc}
    9534:	00008fe9 	.word	0x00008fe9

00009538 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
    9538:	b580      	push	{r7, lr}
    953a:	b082      	sub	sp, #8
    953c:	af00      	add	r7, sp, #0
    953e:	4603      	mov	r3, r0
    9540:	6039      	str	r1, [r7, #0]
    9542:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    9544:	683b      	ldr	r3, [r7, #0]
    9546:	b2da      	uxtb	r2, r3
    9548:	79fb      	ldrb	r3, [r7, #7]
    954a:	4619      	mov	r1, r3
    954c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9550:	4b02      	ldr	r3, [pc, #8]	; (955c <_usbd_ep_int_en+0x24>)
    9552:	4798      	blx	r3
}
    9554:	bf00      	nop
    9556:	3708      	adds	r7, #8
    9558:	46bd      	mov	sp, r7
    955a:	bd80      	pop	{r7, pc}
    955c:	000090bd 	.word	0x000090bd

00009560 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
    9560:	b580      	push	{r7, lr}
    9562:	b082      	sub	sp, #8
    9564:	af00      	add	r7, sp, #0
    9566:	4603      	mov	r3, r0
    9568:	6039      	str	r1, [r7, #0]
    956a:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    956c:	683b      	ldr	r3, [r7, #0]
    956e:	b2da      	uxtb	r2, r3
    9570:	79fb      	ldrb	r3, [r7, #7]
    9572:	4619      	mov	r1, r3
    9574:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9578:	4b02      	ldr	r3, [pc, #8]	; (9584 <_usbd_ep_int_dis+0x24>)
    957a:	4798      	blx	r3
}
    957c:	bf00      	nop
    957e:	3708      	adds	r7, #8
    9580:	46bd      	mov	sp, r7
    9582:	bd80      	pop	{r7, pc}
    9584:	000090e9 	.word	0x000090e9

00009588 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
    9588:	b580      	push	{r7, lr}
    958a:	b082      	sub	sp, #8
    958c:	af00      	add	r7, sp, #0
    958e:	4603      	mov	r3, r0
    9590:	71fb      	strb	r3, [r7, #7]
	return (hri_usbendpoint_read_EPCFG_reg(USB, epn) == USB_D_EPCFG_CTRL);
    9592:	79fb      	ldrb	r3, [r7, #7]
    9594:	4619      	mov	r1, r3
    9596:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    959a:	4b06      	ldr	r3, [pc, #24]	; (95b4 <_usbd_ep_is_ctrl+0x2c>)
    959c:	4798      	blx	r3
    959e:	4603      	mov	r3, r0
    95a0:	2b11      	cmp	r3, #17
    95a2:	bf0c      	ite	eq
    95a4:	2301      	moveq	r3, #1
    95a6:	2300      	movne	r3, #0
    95a8:	b2db      	uxtb	r3, r3
}
    95aa:	4618      	mov	r0, r3
    95ac:	3708      	adds	r7, #8
    95ae:	46bd      	mov	sp, r7
    95b0:	bd80      	pop	{r7, pc}
    95b2:	bf00      	nop
    95b4:	000091a3 	.word	0x000091a3

000095b8 <_usbd_ep_set_stall>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, uint8_t bank_n, bool st)
{
    95b8:	b580      	push	{r7, lr}
    95ba:	b082      	sub	sp, #8
    95bc:	af00      	add	r7, sp, #0
    95be:	4603      	mov	r3, r0
    95c0:	71fb      	strb	r3, [r7, #7]
    95c2:	460b      	mov	r3, r1
    95c4:	71bb      	strb	r3, [r7, #6]
    95c6:	4613      	mov	r3, r2
    95c8:	717b      	strb	r3, [r7, #5]
	if (st) {
    95ca:	797b      	ldrb	r3, [r7, #5]
    95cc:	2b00      	cmp	r3, #0
    95ce:	d00b      	beq.n	95e8 <_usbd_ep_set_stall+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    95d0:	79bb      	ldrb	r3, [r7, #6]
    95d2:	2210      	movs	r2, #16
    95d4:	fa02 f303 	lsl.w	r3, r2, r3
    95d8:	b2da      	uxtb	r2, r3
    95da:	79fb      	ldrb	r3, [r7, #7]
    95dc:	4619      	mov	r1, r3
    95de:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95e2:	4b09      	ldr	r3, [pc, #36]	; (9608 <_usbd_ep_set_stall+0x50>)
    95e4:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
	}
}
    95e6:	e00a      	b.n	95fe <_usbd_ep_set_stall+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    95e8:	79bb      	ldrb	r3, [r7, #6]
    95ea:	2210      	movs	r2, #16
    95ec:	fa02 f303 	lsl.w	r3, r2, r3
    95f0:	b2da      	uxtb	r2, r3
    95f2:	79fb      	ldrb	r3, [r7, #7]
    95f4:	4619      	mov	r1, r3
    95f6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    95fa:	4b04      	ldr	r3, [pc, #16]	; (960c <_usbd_ep_set_stall+0x54>)
    95fc:	4798      	blx	r3
}
    95fe:	bf00      	nop
    9600:	3708      	adds	r7, #8
    9602:	46bd      	mov	sp, r7
    9604:	bd80      	pop	{r7, pc}
    9606:	bf00      	nop
    9608:	00009015 	.word	0x00009015
    960c:	00009069 	.word	0x00009069

00009610 <_usbd_ep_is_stalled>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's stalled.
 */
static inline bool _usbd_ep_is_stalled(uint8_t epn, uint8_t bank_n)
{
    9610:	b580      	push	{r7, lr}
    9612:	b084      	sub	sp, #16
    9614:	af00      	add	r7, sp, #0
    9616:	4603      	mov	r3, r0
    9618:	460a      	mov	r2, r1
    961a:	71fb      	strb	r3, [r7, #7]
    961c:	4613      	mov	r3, r2
    961e:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9620:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9624:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    9626:	79fb      	ldrb	r3, [r7, #7]
    9628:	4619      	mov	r1, r3
    962a:	68f8      	ldr	r0, [r7, #12]
    962c:	4b08      	ldr	r3, [pc, #32]	; (9650 <_usbd_ep_is_stalled+0x40>)
    962e:	4798      	blx	r3
    9630:	4603      	mov	r3, r0
    9632:	4619      	mov	r1, r3
    9634:	79bb      	ldrb	r3, [r7, #6]
    9636:	2210      	movs	r2, #16
    9638:	fa02 f303 	lsl.w	r3, r2, r3
    963c:	400b      	ands	r3, r1
    963e:	2b00      	cmp	r3, #0
    9640:	bf14      	ite	ne
    9642:	2301      	movne	r3, #1
    9644:	2300      	moveq	r3, #0
    9646:	b2db      	uxtb	r3, r3
}
    9648:	4618      	mov	r0, r3
    964a:	3710      	adds	r7, #16
    964c:	46bd      	mov	sp, r7
    964e:	bd80      	pop	{r7, pc}
    9650:	00009041 	.word	0x00009041

00009654 <_usbd_ep_is_stall_sent>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn, uint8_t bank_n)
{
    9654:	b580      	push	{r7, lr}
    9656:	b084      	sub	sp, #16
    9658:	af00      	add	r7, sp, #0
    965a:	4603      	mov	r3, r0
    965c:	460a      	mov	r2, r1
    965e:	71fb      	strb	r3, [r7, #7]
    9660:	4613      	mov	r3, r2
    9662:	71bb      	strb	r3, [r7, #6]
	Usb *hw = USB;
    9664:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9668:	60fb      	str	r3, [r7, #12]
	return (hri_usbendpoint_read_EPINTFLAG_reg(hw, epn) & (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    966a:	79fb      	ldrb	r3, [r7, #7]
    966c:	4619      	mov	r1, r3
    966e:	68f8      	ldr	r0, [r7, #12]
    9670:	4b08      	ldr	r3, [pc, #32]	; (9694 <_usbd_ep_is_stall_sent+0x40>)
    9672:	4798      	blx	r3
    9674:	4603      	mov	r3, r0
    9676:	4619      	mov	r1, r3
    9678:	79bb      	ldrb	r3, [r7, #6]
    967a:	2220      	movs	r2, #32
    967c:	fa02 f303 	lsl.w	r3, r2, r3
    9680:	400b      	ands	r3, r1
    9682:	2b00      	cmp	r3, #0
    9684:	bf14      	ite	ne
    9686:	2301      	movne	r3, #1
    9688:	2300      	moveq	r3, #0
    968a:	b2db      	uxtb	r3, r3
}
    968c:	4618      	mov	r0, r3
    968e:	3710      	adds	r7, #16
    9690:	46bd      	mov	sp, r7
    9692:	bd80      	pop	{r7, pc}
    9694:	00008fc1 	.word	0x00008fc1

00009698 <_usbd_ep_ack_stall>:
/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn, uint8_t bank_n)
{
    9698:	b580      	push	{r7, lr}
    969a:	b082      	sub	sp, #8
    969c:	af00      	add	r7, sp, #0
    969e:	4603      	mov	r3, r0
    96a0:	460a      	mov	r2, r1
    96a2:	71fb      	strb	r3, [r7, #7]
    96a4:	4613      	mov	r3, r2
    96a6:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, (USB_DEVICE_EPINTFLAG_STALL0 << bank_n));
    96a8:	79bb      	ldrb	r3, [r7, #6]
    96aa:	2220      	movs	r2, #32
    96ac:	409a      	lsls	r2, r3
    96ae:	79fb      	ldrb	r3, [r7, #7]
    96b0:	4611      	mov	r1, r2
    96b2:	4618      	mov	r0, r3
    96b4:	4b02      	ldr	r3, [pc, #8]	; (96c0 <_usbd_ep_ack_stall+0x28>)
    96b6:	4798      	blx	r3
}
    96b8:	bf00      	nop
    96ba:	3708      	adds	r7, #8
    96bc:	46bd      	mov	sp, r7
    96be:	bd80      	pop	{r7, pc}
    96c0:	00009511 	.word	0x00009511

000096c4 <_usbd_ep_int_stall_en>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, uint8_t bank_n, const bool en)
{
    96c4:	b580      	push	{r7, lr}
    96c6:	b082      	sub	sp, #8
    96c8:	af00      	add	r7, sp, #0
    96ca:	4603      	mov	r3, r0
    96cc:	71fb      	strb	r3, [r7, #7]
    96ce:	460b      	mov	r3, r1
    96d0:	71bb      	strb	r3, [r7, #6]
    96d2:	4613      	mov	r3, r2
    96d4:	717b      	strb	r3, [r7, #5]
	if (en) {
    96d6:	797b      	ldrb	r3, [r7, #5]
    96d8:	2b00      	cmp	r3, #0
    96da:	d008      	beq.n	96ee <_usbd_ep_int_stall_en+0x2a>
		_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    96dc:	79bb      	ldrb	r3, [r7, #6]
    96de:	2220      	movs	r2, #32
    96e0:	409a      	lsls	r2, r3
    96e2:	79fb      	ldrb	r3, [r7, #7]
    96e4:	4611      	mov	r1, r2
    96e6:	4618      	mov	r0, r3
    96e8:	4b07      	ldr	r3, [pc, #28]	; (9708 <_usbd_ep_int_stall_en+0x44>)
    96ea:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
	}
}
    96ec:	e007      	b.n	96fe <_usbd_ep_int_stall_en+0x3a>
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    96ee:	79bb      	ldrb	r3, [r7, #6]
    96f0:	2220      	movs	r2, #32
    96f2:	409a      	lsls	r2, r3
    96f4:	79fb      	ldrb	r3, [r7, #7]
    96f6:	4611      	mov	r1, r2
    96f8:	4618      	mov	r0, r3
    96fa:	4b04      	ldr	r3, [pc, #16]	; (970c <_usbd_ep_int_stall_en+0x48>)
    96fc:	4798      	blx	r3
}
    96fe:	bf00      	nop
    9700:	3708      	adds	r7, #8
    9702:	46bd      	mov	sp, r7
    9704:	bd80      	pop	{r7, pc}
    9706:	bf00      	nop
    9708:	00009539 	.word	0x00009539
    970c:	00009561 	.word	0x00009561

00009710 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
    9710:	b580      	push	{r7, lr}
    9712:	b082      	sub	sp, #8
    9714:	af00      	add	r7, sp, #0
    9716:	4603      	mov	r3, r0
    9718:	71fb      	strb	r3, [r7, #7]
	hri_usbendpoint_clear_EPINTEN_RXSTP_bit(USB, epn);
    971a:	79fb      	ldrb	r3, [r7, #7]
    971c:	4619      	mov	r1, r3
    971e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9722:	4b03      	ldr	r3, [pc, #12]	; (9730 <_usbd_ep_stop_setup+0x20>)
    9724:	4798      	blx	r3
}
    9726:	bf00      	nop
    9728:	3708      	adds	r7, #8
    972a:	46bd      	mov	sp, r7
    972c:	bd80      	pop	{r7, pc}
    972e:	bf00      	nop
    9730:	00009095 	.word	0x00009095

00009734 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready in cache
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
    9734:	b580      	push	{r7, lr}
    9736:	b082      	sub	sp, #8
    9738:	af00      	add	r7, sp, #0
    973a:	4603      	mov	r3, r0
    973c:	71fb      	strb	r3, [r7, #7]
	return hri_usbendpoint_get_EPINTFLAG_reg(USB, epn, USB_DEVICE_EPINTFLAG_RXSTP);
    973e:	79fb      	ldrb	r3, [r7, #7]
    9740:	2210      	movs	r2, #16
    9742:	4619      	mov	r1, r3
    9744:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9748:	4b05      	ldr	r3, [pc, #20]	; (9760 <_usbd_ep_is_setup+0x2c>)
    974a:	4798      	blx	r3
    974c:	4603      	mov	r3, r0
    974e:	2b00      	cmp	r3, #0
    9750:	bf14      	ite	ne
    9752:	2301      	movne	r3, #1
    9754:	2300      	moveq	r3, #0
    9756:	b2db      	uxtb	r3, r3
}
    9758:	4618      	mov	r0, r3
    975a:	3708      	adds	r7, #8
    975c:	46bd      	mov	sp, r7
    975e:	bd80      	pop	{r7, pc}
    9760:	00008f8b 	.word	0x00008f8b

00009764 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
    9764:	b580      	push	{r7, lr}
    9766:	b082      	sub	sp, #8
    9768:	af00      	add	r7, sp, #0
    976a:	4603      	mov	r3, r0
    976c:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_RXSTP);
    976e:	79fb      	ldrb	r3, [r7, #7]
    9770:	2110      	movs	r1, #16
    9772:	4618      	mov	r0, r3
    9774:	4b02      	ldr	r3, [pc, #8]	; (9780 <_usbd_ep_ack_setup+0x1c>)
    9776:	4798      	blx	r3
}
    9778:	bf00      	nop
    977a:	3708      	adds	r7, #8
    977c:	46bd      	mov	sp, r7
    977e:	bd80      	pop	{r7, pc}
    9780:	00009511 	.word	0x00009511

00009784 <_usbd_ep_set_toggle>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] tgl Toggle value.
 */
static inline void _usbd_ep_set_toggle(uint8_t epn, uint8_t bank_n, uint8_t tgl)
{
    9784:	b580      	push	{r7, lr}
    9786:	b082      	sub	sp, #8
    9788:	af00      	add	r7, sp, #0
    978a:	4603      	mov	r3, r0
    978c:	71fb      	strb	r3, [r7, #7]
    978e:	460b      	mov	r3, r1
    9790:	71bb      	strb	r3, [r7, #6]
    9792:	4613      	mov	r3, r2
    9794:	717b      	strb	r3, [r7, #5]
	if (tgl) {
    9796:	797b      	ldrb	r3, [r7, #5]
    9798:	2b00      	cmp	r3, #0
    979a:	d00b      	beq.n	97b4 <_usbd_ep_set_toggle+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    979c:	79bb      	ldrb	r3, [r7, #6]
    979e:	2201      	movs	r2, #1
    97a0:	fa02 f303 	lsl.w	r3, r2, r3
    97a4:	b2da      	uxtb	r2, r3
    97a6:	79fb      	ldrb	r3, [r7, #7]
    97a8:	4619      	mov	r1, r3
    97aa:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97ae:	4b09      	ldr	r3, [pc, #36]	; (97d4 <_usbd_ep_set_toggle+0x50>)
    97b0:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
	}
}
    97b2:	e00a      	b.n	97ca <_usbd_ep_set_toggle+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    97b4:	79bb      	ldrb	r3, [r7, #6]
    97b6:	2201      	movs	r2, #1
    97b8:	fa02 f303 	lsl.w	r3, r2, r3
    97bc:	b2da      	uxtb	r2, r3
    97be:	79fb      	ldrb	r3, [r7, #7]
    97c0:	4619      	mov	r1, r3
    97c2:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    97c6:	4b04      	ldr	r3, [pc, #16]	; (97d8 <_usbd_ep_set_toggle+0x54>)
    97c8:	4798      	blx	r3
}
    97ca:	bf00      	nop
    97cc:	3708      	adds	r7, #8
    97ce:	46bd      	mov	sp, r7
    97d0:	bd80      	pop	{r7, pc}
    97d2:	bf00      	nop
    97d4:	00009015 	.word	0x00009015
    97d8:	00009069 	.word	0x00009069

000097dc <_usbd_ep_ack_io_cpt>:
/** \brief ACK IN/OUT complete interrupt
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_ack_io_cpt(uint8_t epn, uint8_t bank_n)
{
    97dc:	b580      	push	{r7, lr}
    97de:	b082      	sub	sp, #8
    97e0:	af00      	add	r7, sp, #0
    97e2:	4603      	mov	r3, r0
    97e4:	460a      	mov	r2, r1
    97e6:	71fb      	strb	r3, [r7, #7]
    97e8:	4613      	mov	r3, r2
    97ea:	71bb      	strb	r3, [r7, #6]
	_usbd_ep_int_ack(epn, USB_DEVICE_EPINTFLAG_TRCPT0 << bank_n);
    97ec:	79bb      	ldrb	r3, [r7, #6]
    97ee:	2201      	movs	r2, #1
    97f0:	409a      	lsls	r2, r3
    97f2:	79fb      	ldrb	r3, [r7, #7]
    97f4:	4611      	mov	r1, r2
    97f6:	4618      	mov	r0, r3
    97f8:	4b02      	ldr	r3, [pc, #8]	; (9804 <_usbd_ep_ack_io_cpt+0x28>)
    97fa:	4798      	blx	r3
}
    97fc:	bf00      	nop
    97fe:	3708      	adds	r7, #8
    9800:	46bd      	mov	sp, r7
    9802:	bd80      	pop	{r7, pc}
    9804:	00009511 	.word	0x00009511

00009808 <_usbd_ep_set_buf>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] addr DMA buffer address to set.
 */
static inline void _usbd_ep_set_buf(uint8_t epn, uint8_t bank_n, uint32_t addr)
{
    9808:	b480      	push	{r7}
    980a:	b085      	sub	sp, #20
    980c:	af00      	add	r7, sp, #0
    980e:	4603      	mov	r3, r0
    9810:	603a      	str	r2, [r7, #0]
    9812:	71fb      	strb	r3, [r7, #7]
    9814:	460b      	mov	r3, r1
    9816:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9818:	79fa      	ldrb	r2, [r7, #7]
    981a:	79bb      	ldrb	r3, [r7, #6]
    981c:	0052      	lsls	r2, r2, #1
    981e:	4413      	add	r3, r2
    9820:	011b      	lsls	r3, r3, #4
    9822:	4a06      	ldr	r2, [pc, #24]	; (983c <_usbd_ep_set_buf+0x34>)
    9824:	4413      	add	r3, r2
    9826:	60fb      	str	r3, [r7, #12]
	bank->ADDR.reg          = addr;
    9828:	68fb      	ldr	r3, [r7, #12]
    982a:	683a      	ldr	r2, [r7, #0]
    982c:	601a      	str	r2, [r3, #0]
}
    982e:	bf00      	nop
    9830:	3714      	adds	r7, #20
    9832:	46bd      	mov	sp, r7
    9834:	f85d 7b04 	ldr.w	r7, [sp], #4
    9838:	4770      	bx	lr
    983a:	bf00      	nop
    983c:	20000ff8 	.word	0x20000ff8

00009840 <_usbd_ep_set_in_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for IN.
 */
static inline void _usbd_ep_set_in_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    9840:	b480      	push	{r7}
    9842:	b085      	sub	sp, #20
    9844:	af00      	add	r7, sp, #0
    9846:	4603      	mov	r3, r0
    9848:	71fb      	strb	r3, [r7, #7]
    984a:	460b      	mov	r3, r1
    984c:	71bb      	strb	r3, [r7, #6]
    984e:	4613      	mov	r3, r2
    9850:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9852:	79fa      	ldrb	r2, [r7, #7]
    9854:	79bb      	ldrb	r3, [r7, #6]
    9856:	0052      	lsls	r2, r2, #1
    9858:	4413      	add	r3, r2
    985a:	011b      	lsls	r3, r3, #4
    985c:	4a08      	ldr	r2, [pc, #32]	; (9880 <_usbd_ep_set_in_count+0x40>)
    985e:	4413      	add	r3, r2
    9860:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    9862:	88bb      	ldrh	r3, [r7, #4]
    9864:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9868:	b299      	uxth	r1, r3
    986a:	68fa      	ldr	r2, [r7, #12]
    986c:	6853      	ldr	r3, [r2, #4]
    986e:	f361 339b 	bfi	r3, r1, #14, #14
    9872:	6053      	str	r3, [r2, #4]
}
    9874:	bf00      	nop
    9876:	3714      	adds	r7, #20
    9878:	46bd      	mov	sp, r7
    987a:	f85d 7b04 	ldr.w	r7, [sp], #4
    987e:	4770      	bx	lr
    9880:	20000ff8 	.word	0x20000ff8

00009884 <_usbd_ep_set_in_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for IN.
 */
static inline void _usbd_ep_set_in_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    9884:	b480      	push	{r7}
    9886:	b085      	sub	sp, #20
    9888:	af00      	add	r7, sp, #0
    988a:	4603      	mov	r3, r0
    988c:	71fb      	strb	r3, [r7, #7]
    988e:	460b      	mov	r3, r1
    9890:	71bb      	strb	r3, [r7, #6]
    9892:	4613      	mov	r3, r2
    9894:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    9896:	79fa      	ldrb	r2, [r7, #7]
    9898:	79bb      	ldrb	r3, [r7, #6]
    989a:	0052      	lsls	r2, r2, #1
    989c:	4413      	add	r3, r2
    989e:	011b      	lsls	r3, r3, #4
    98a0:	4a08      	ldr	r2, [pc, #32]	; (98c4 <_usbd_ep_set_in_size+0x40>)
    98a2:	4413      	add	r3, r2
    98a4:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    98a6:	88bb      	ldrh	r3, [r7, #4]
    98a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
    98ac:	b299      	uxth	r1, r3
    98ae:	68fa      	ldr	r2, [r7, #12]
    98b0:	6853      	ldr	r3, [r2, #4]
    98b2:	f361 030d 	bfi	r3, r1, #0, #14
    98b6:	6053      	str	r3, [r2, #4]
}
    98b8:	bf00      	nop
    98ba:	3714      	adds	r7, #20
    98bc:	46bd      	mov	sp, r7
    98be:	f85d 7b04 	ldr.w	r7, [sp], #4
    98c2:	4770      	bx	lr
    98c4:	20000ff8 	.word	0x20000ff8

000098c8 <_usbd_ep_set_out_count>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] count Data count for OUT.
 */
static inline void _usbd_ep_set_out_count(uint8_t epn, uint8_t bank_n, uint16_t count)
{
    98c8:	b480      	push	{r7}
    98ca:	b085      	sub	sp, #20
    98cc:	af00      	add	r7, sp, #0
    98ce:	4603      	mov	r3, r0
    98d0:	71fb      	strb	r3, [r7, #7]
    98d2:	460b      	mov	r3, r1
    98d4:	71bb      	strb	r3, [r7, #6]
    98d6:	4613      	mov	r3, r2
    98d8:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank      = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    98da:	79fa      	ldrb	r2, [r7, #7]
    98dc:	79bb      	ldrb	r3, [r7, #6]
    98de:	0052      	lsls	r2, r2, #1
    98e0:	4413      	add	r3, r2
    98e2:	011b      	lsls	r3, r3, #4
    98e4:	4a08      	ldr	r2, [pc, #32]	; (9908 <_usbd_ep_set_out_count+0x40>)
    98e6:	4413      	add	r3, r2
    98e8:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    98ea:	88bb      	ldrh	r3, [r7, #4]
    98ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
    98f0:	b299      	uxth	r1, r3
    98f2:	68fa      	ldr	r2, [r7, #12]
    98f4:	6853      	ldr	r3, [r2, #4]
    98f6:	f361 030d 	bfi	r3, r1, #0, #14
    98fa:	6053      	str	r3, [r2, #4]
}
    98fc:	bf00      	nop
    98fe:	3714      	adds	r7, #20
    9900:	46bd      	mov	sp, r7
    9902:	f85d 7b04 	ldr.w	r7, [sp], #4
    9906:	4770      	bx	lr
    9908:	20000ff8 	.word	0x20000ff8

0000990c <_usbd_ep_set_out_size>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size for OUT.
 */
static inline void _usbd_ep_set_out_size(uint8_t epn, uint8_t bank_n, uint16_t size)
{
    990c:	b480      	push	{r7}
    990e:	b085      	sub	sp, #20
    9910:	af00      	add	r7, sp, #0
    9912:	4603      	mov	r3, r0
    9914:	71fb      	strb	r3, [r7, #7]
    9916:	460b      	mov	r3, r1
    9918:	71bb      	strb	r3, [r7, #6]
    991a:	4613      	mov	r3, r2
    991c:	80bb      	strh	r3, [r7, #4]
	UsbDeviceDescBank *bank             = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    991e:	79fa      	ldrb	r2, [r7, #7]
    9920:	79bb      	ldrb	r3, [r7, #6]
    9922:	0052      	lsls	r2, r2, #1
    9924:	4413      	add	r3, r2
    9926:	011b      	lsls	r3, r3, #4
    9928:	4a08      	ldr	r2, [pc, #32]	; (994c <_usbd_ep_set_out_size+0x40>)
    992a:	4413      	add	r3, r2
    992c:	60fb      	str	r3, [r7, #12]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    992e:	88bb      	ldrh	r3, [r7, #4]
    9930:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9934:	b299      	uxth	r1, r3
    9936:	68fa      	ldr	r2, [r7, #12]
    9938:	6853      	ldr	r3, [r2, #4]
    993a:	f361 339b 	bfi	r3, r1, #14, #14
    993e:	6053      	str	r3, [r2, #4]
}
    9940:	bf00      	nop
    9942:	3714      	adds	r7, #20
    9944:	46bd      	mov	sp, r7
    9946:	f85d 7b04 	ldr.w	r7, [sp], #4
    994a:	4770      	bx	lr
    994c:	20000ff8 	.word	0x20000ff8

00009950 <_usbd_ep_set_in_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_in_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9950:	b580      	push	{r7, lr}
    9952:	b084      	sub	sp, #16
    9954:	af00      	add	r7, sp, #0
    9956:	60ba      	str	r2, [r7, #8]
    9958:	607b      	str	r3, [r7, #4]
    995a:	4603      	mov	r3, r0
    995c:	73fb      	strb	r3, [r7, #15]
    995e:	460b      	mov	r3, r1
    9960:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_in_size(epn, bank_n, size);
    9962:	68bb      	ldr	r3, [r7, #8]
    9964:	b29a      	uxth	r2, r3
    9966:	7bb9      	ldrb	r1, [r7, #14]
    9968:	7bfb      	ldrb	r3, [r7, #15]
    996a:	4618      	mov	r0, r3
    996c:	4b06      	ldr	r3, [pc, #24]	; (9988 <_usbd_ep_set_in_trans+0x38>)
    996e:	4798      	blx	r3
	_usbd_ep_set_in_count(epn, bank_n, count);
    9970:	687b      	ldr	r3, [r7, #4]
    9972:	b29a      	uxth	r2, r3
    9974:	7bb9      	ldrb	r1, [r7, #14]
    9976:	7bfb      	ldrb	r3, [r7, #15]
    9978:	4618      	mov	r0, r3
    997a:	4b04      	ldr	r3, [pc, #16]	; (998c <_usbd_ep_set_in_trans+0x3c>)
    997c:	4798      	blx	r3
}
    997e:	bf00      	nop
    9980:	3710      	adds	r7, #16
    9982:	46bd      	mov	sp, r7
    9984:	bd80      	pop	{r7, pc}
    9986:	bf00      	nop
    9988:	00009885 	.word	0x00009885
    998c:	00009841 	.word	0x00009841

00009990 <_usbd_ep_set_out_trans>:
 * \param[in] bank_n Endpoint bank number.
 * \param[in] size Data size.
 * \param[in] count Initial data count.
 */
static inline void _usbd_ep_set_out_trans(uint8_t epn, uint8_t bank_n, uint32_t size, uint32_t count)
{
    9990:	b580      	push	{r7, lr}
    9992:	b084      	sub	sp, #16
    9994:	af00      	add	r7, sp, #0
    9996:	60ba      	str	r2, [r7, #8]
    9998:	607b      	str	r3, [r7, #4]
    999a:	4603      	mov	r3, r0
    999c:	73fb      	strb	r3, [r7, #15]
    999e:	460b      	mov	r3, r1
    99a0:	73bb      	strb	r3, [r7, #14]
	_usbd_ep_set_out_size(epn, bank_n, size);
    99a2:	68bb      	ldr	r3, [r7, #8]
    99a4:	b29a      	uxth	r2, r3
    99a6:	7bb9      	ldrb	r1, [r7, #14]
    99a8:	7bfb      	ldrb	r3, [r7, #15]
    99aa:	4618      	mov	r0, r3
    99ac:	4b06      	ldr	r3, [pc, #24]	; (99c8 <_usbd_ep_set_out_trans+0x38>)
    99ae:	4798      	blx	r3
	_usbd_ep_set_out_count(epn, bank_n, count);
    99b0:	687b      	ldr	r3, [r7, #4]
    99b2:	b29a      	uxth	r2, r3
    99b4:	7bb9      	ldrb	r1, [r7, #14]
    99b6:	7bfb      	ldrb	r3, [r7, #15]
    99b8:	4618      	mov	r0, r3
    99ba:	4b04      	ldr	r3, [pc, #16]	; (99cc <_usbd_ep_set_out_trans+0x3c>)
    99bc:	4798      	blx	r3
}
    99be:	bf00      	nop
    99c0:	3710      	adds	r7, #16
    99c2:	46bd      	mov	sp, r7
    99c4:	bd80      	pop	{r7, pc}
    99c6:	bf00      	nop
    99c8:	0000990d 	.word	0x0000990d
    99cc:	000098c9 	.word	0x000098c9

000099d0 <_usbd_ep_clear_bank_status>:
/** \brief Clear bank status
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 */
static inline void _usbd_ep_clear_bank_status(uint8_t epn, uint8_t bank_n)
{
    99d0:	b480      	push	{r7}
    99d2:	b085      	sub	sp, #20
    99d4:	af00      	add	r7, sp, #0
    99d6:	4603      	mov	r3, r0
    99d8:	460a      	mov	r2, r1
    99da:	71fb      	strb	r3, [r7, #7]
    99dc:	4613      	mov	r3, r2
    99de:	71bb      	strb	r3, [r7, #6]
	UsbDeviceDescBank *bank = &prvt_inst.desc_table[epn].DeviceDescBank[bank_n];
    99e0:	79fa      	ldrb	r2, [r7, #7]
    99e2:	79bb      	ldrb	r3, [r7, #6]
    99e4:	0052      	lsls	r2, r2, #1
    99e6:	4413      	add	r3, r2
    99e8:	011b      	lsls	r3, r3, #4
    99ea:	4a06      	ldr	r2, [pc, #24]	; (9a04 <_usbd_ep_clear_bank_status+0x34>)
    99ec:	4413      	add	r3, r2
    99ee:	60fb      	str	r3, [r7, #12]
	bank->STATUS_BK.reg     = 0;
    99f0:	68fb      	ldr	r3, [r7, #12]
    99f2:	2200      	movs	r2, #0
    99f4:	729a      	strb	r2, [r3, #10]
}
    99f6:	bf00      	nop
    99f8:	3714      	adds	r7, #20
    99fa:	46bd      	mov	sp, r7
    99fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a00:	4770      	bx	lr
    9a02:	bf00      	nop
    9a04:	20000ff8 	.word	0x20000ff8

00009a08 <_usbd_ep_set_in_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9a08:	b580      	push	{r7, lr}
    9a0a:	b082      	sub	sp, #8
    9a0c:	af00      	add	r7, sp, #0
    9a0e:	4603      	mov	r3, r0
    9a10:	71fb      	strb	r3, [r7, #7]
    9a12:	460b      	mov	r3, r1
    9a14:	71bb      	strb	r3, [r7, #6]
    9a16:	4613      	mov	r3, r2
    9a18:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9a1a:	797b      	ldrb	r3, [r7, #5]
    9a1c:	2b00      	cmp	r3, #0
    9a1e:	d00b      	beq.n	9a38 <_usbd_ep_set_in_rdy+0x30>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9a20:	79bb      	ldrb	r3, [r7, #6]
    9a22:	2240      	movs	r2, #64	; 0x40
    9a24:	fa02 f303 	lsl.w	r3, r2, r3
    9a28:	b2da      	uxtb	r2, r3
    9a2a:	79fb      	ldrb	r3, [r7, #7]
    9a2c:	4619      	mov	r1, r3
    9a2e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a32:	4b09      	ldr	r3, [pc, #36]	; (9a58 <_usbd_ep_set_in_rdy+0x50>)
    9a34:	4798      	blx	r3
	} else {
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9a36:	e00a      	b.n	9a4e <_usbd_ep_set_in_rdy+0x46>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9a38:	79bb      	ldrb	r3, [r7, #6]
    9a3a:	2240      	movs	r2, #64	; 0x40
    9a3c:	fa02 f303 	lsl.w	r3, r2, r3
    9a40:	b2da      	uxtb	r2, r3
    9a42:	79fb      	ldrb	r3, [r7, #7]
    9a44:	4619      	mov	r1, r3
    9a46:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a4a:	4b04      	ldr	r3, [pc, #16]	; (9a5c <_usbd_ep_set_in_rdy+0x54>)
    9a4c:	4798      	blx	r3
}
    9a4e:	bf00      	nop
    9a50:	3708      	adds	r7, #8
    9a52:	46bd      	mov	sp, r7
    9a54:	bd80      	pop	{r7, pc}
    9a56:	bf00      	nop
    9a58:	00009015 	.word	0x00009015
    9a5c:	00009069 	.word	0x00009069

00009a60 <_usbd_ep_set_out_rdy>:
 * \param[in] epn Endpoint number.
 * \param[in] bank_n Endpoint bank number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, uint8_t bank_n, const bool rdy)
{
    9a60:	b580      	push	{r7, lr}
    9a62:	b082      	sub	sp, #8
    9a64:	af00      	add	r7, sp, #0
    9a66:	4603      	mov	r3, r0
    9a68:	71fb      	strb	r3, [r7, #7]
    9a6a:	460b      	mov	r3, r1
    9a6c:	71bb      	strb	r3, [r7, #6]
    9a6e:	4613      	mov	r3, r2
    9a70:	717b      	strb	r3, [r7, #5]
	if (rdy) {
    9a72:	797b      	ldrb	r3, [r7, #5]
    9a74:	2b00      	cmp	r3, #0
    9a76:	d00b      	beq.n	9a90 <_usbd_ep_set_out_rdy+0x30>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9a78:	79bb      	ldrb	r3, [r7, #6]
    9a7a:	2240      	movs	r2, #64	; 0x40
    9a7c:	fa02 f303 	lsl.w	r3, r2, r3
    9a80:	b2da      	uxtb	r2, r3
    9a82:	79fb      	ldrb	r3, [r7, #7]
    9a84:	4619      	mov	r1, r3
    9a86:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9a8a:	4b09      	ldr	r3, [pc, #36]	; (9ab0 <_usbd_ep_set_out_rdy+0x50>)
    9a8c:	4798      	blx	r3
	} else {
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
	}
}
    9a8e:	e00a      	b.n	9aa6 <_usbd_ep_set_out_rdy+0x46>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, USB_DEVICE_EPSTATUS_BK0RDY << bank_n);
    9a90:	79bb      	ldrb	r3, [r7, #6]
    9a92:	2240      	movs	r2, #64	; 0x40
    9a94:	fa02 f303 	lsl.w	r3, r2, r3
    9a98:	b2da      	uxtb	r2, r3
    9a9a:	79fb      	ldrb	r3, [r7, #7]
    9a9c:	4619      	mov	r1, r3
    9a9e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9aa2:	4b04      	ldr	r3, [pc, #16]	; (9ab4 <_usbd_ep_set_out_rdy+0x54>)
    9aa4:	4798      	blx	r3
}
    9aa6:	bf00      	nop
    9aa8:	3708      	adds	r7, #8
    9aaa:	46bd      	mov	sp, r7
    9aac:	bd80      	pop	{r7, pc}
    9aae:	bf00      	nop
    9ab0:	00009069 	.word	0x00009069
    9ab4:	00009015 	.word	0x00009015

00009ab8 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
    9ab8:	b480      	push	{r7}
    9aba:	b083      	sub	sp, #12
    9abc:	af00      	add	r7, sp, #0
    9abe:	4603      	mov	r3, r0
    9ac0:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    9ac2:	88fb      	ldrh	r3, [r7, #6]
    9ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9ac8:	d820      	bhi.n	9b0c <_usbd_ep_pcksize_size+0x54>
    9aca:	88fb      	ldrh	r3, [r7, #6]
    9acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9ad0:	d81a      	bhi.n	9b08 <_usbd_ep_pcksize_size+0x50>
    9ad2:	88fb      	ldrh	r3, [r7, #6]
    9ad4:	2b80      	cmp	r3, #128	; 0x80
    9ad6:	d815      	bhi.n	9b04 <_usbd_ep_pcksize_size+0x4c>
    9ad8:	88fb      	ldrh	r3, [r7, #6]
    9ada:	2b40      	cmp	r3, #64	; 0x40
    9adc:	d810      	bhi.n	9b00 <_usbd_ep_pcksize_size+0x48>
    9ade:	88fb      	ldrh	r3, [r7, #6]
    9ae0:	2b20      	cmp	r3, #32
    9ae2:	d80b      	bhi.n	9afc <_usbd_ep_pcksize_size+0x44>
    9ae4:	88fb      	ldrh	r3, [r7, #6]
    9ae6:	2b10      	cmp	r3, #16
    9ae8:	d806      	bhi.n	9af8 <_usbd_ep_pcksize_size+0x40>
    9aea:	88fb      	ldrh	r3, [r7, #6]
    9aec:	2b08      	cmp	r3, #8
    9aee:	bf8c      	ite	hi
    9af0:	2301      	movhi	r3, #1
    9af2:	2300      	movls	r3, #0
    9af4:	b2db      	uxtb	r3, r3
    9af6:	e00a      	b.n	9b0e <_usbd_ep_pcksize_size+0x56>
    9af8:	2302      	movs	r3, #2
    9afa:	e008      	b.n	9b0e <_usbd_ep_pcksize_size+0x56>
    9afc:	2303      	movs	r3, #3
    9afe:	e006      	b.n	9b0e <_usbd_ep_pcksize_size+0x56>
    9b00:	2304      	movs	r3, #4
    9b02:	e004      	b.n	9b0e <_usbd_ep_pcksize_size+0x56>
    9b04:	2305      	movs	r3, #5
    9b06:	e002      	b.n	9b0e <_usbd_ep_pcksize_size+0x56>
    9b08:	2306      	movs	r3, #6
    9b0a:	e000      	b.n	9b0e <_usbd_ep_pcksize_size+0x56>
    9b0c:	2307      	movs	r3, #7
}
    9b0e:	4618      	mov	r0, r3
    9b10:	370c      	adds	r7, #12
    9b12:	46bd      	mov	sp, r7
    9b14:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b18:	4770      	bx	lr
	...

00009b1c <_usb_d_dev_ept>:
 *  \brief Obtain endpoint descriptor pointer
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
    9b1c:	b480      	push	{r7}
    9b1e:	b085      	sub	sp, #20
    9b20:	af00      	add	r7, sp, #0
    9b22:	4603      	mov	r3, r0
    9b24:	460a      	mov	r2, r1
    9b26:	71fb      	strb	r3, [r7, #7]
    9b28:	4613      	mov	r3, r2
    9b2a:	71bb      	strb	r3, [r7, #6]
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    9b2c:	79fb      	ldrb	r3, [r7, #7]
    9b2e:	2b00      	cmp	r3, #0
    9b30:	d008      	beq.n	9b44 <_usb_d_dev_ept+0x28>
    9b32:	79bb      	ldrb	r3, [r7, #6]
    9b34:	2b00      	cmp	r3, #0
    9b36:	d003      	beq.n	9b40 <_usb_d_dev_ept+0x24>
    9b38:	79fb      	ldrb	r3, [r7, #7]
    9b3a:	3304      	adds	r3, #4
    9b3c:	b2db      	uxtb	r3, r3
    9b3e:	e002      	b.n	9b46 <_usb_d_dev_ept+0x2a>
    9b40:	79fb      	ldrb	r3, [r7, #7]
    9b42:	e000      	b.n	9b46 <_usb_d_dev_ept+0x2a>
    9b44:	2300      	movs	r3, #0
    9b46:	73fb      	strb	r3, [r7, #15]
	return &dev_inst.ep[ep_index];
    9b48:	7bfa      	ldrb	r2, [r7, #15]
    9b4a:	4613      	mov	r3, r2
    9b4c:	009b      	lsls	r3, r3, #2
    9b4e:	4413      	add	r3, r2
    9b50:	009b      	lsls	r3, r3, #2
    9b52:	3310      	adds	r3, #16
    9b54:	4a04      	ldr	r2, [pc, #16]	; (9b68 <_usb_d_dev_ept+0x4c>)
    9b56:	4413      	add	r3, r2
    9b58:	3304      	adds	r3, #4
}
    9b5a:	4618      	mov	r0, r3
    9b5c:	3714      	adds	r7, #20
    9b5e:	46bd      	mov	sp, r7
    9b60:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b64:	4770      	bx	lr
    9b66:	bf00      	nop
    9b68:	20000f30 	.word	0x20000f30

00009b6c <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
    9b6c:	b580      	push	{r7, lr}
    9b6e:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_SOF);
    9b70:	2104      	movs	r1, #4
    9b72:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b76:	4b03      	ldr	r3, [pc, #12]	; (9b84 <_usb_d_dev_sof+0x18>)
    9b78:	4798      	blx	r3
	dev_inst.callbacks.sof();
    9b7a:	4b03      	ldr	r3, [pc, #12]	; (9b88 <_usb_d_dev_sof+0x1c>)
    9b7c:	681b      	ldr	r3, [r3, #0]
    9b7e:	4798      	blx	r3
}
    9b80:	bf00      	nop
    9b82:	bd80      	pop	{r7, pc}
    9b84:	000091e3 	.word	0x000091e3
    9b88:	20000f30 	.word	0x20000f30

00009b8c <_usb_d_dev_lpmsusp>:

/**
 * \brief Handles USB LPM Suspend interrupt
 */
static inline void _usb_d_dev_lpmsusp(void)
{
    9b8c:	b580      	push	{r7, lr}
    9b8e:	b084      	sub	sp, #16
    9b90:	af00      	add	r7, sp, #0
	uint8_t  i;
	uint32_t lpm_variable = 0;
    9b92:	2300      	movs	r3, #0
    9b94:	60bb      	str	r3, [r7, #8]

	/* ACK LPMSUSP interrupt. */
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9b96:	f240 2101 	movw	r1, #513	; 0x201
    9b9a:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9b9e:	4b1a      	ldr	r3, [pc, #104]	; (9c08 <_usb_d_dev_lpmsusp+0x7c>)
    9ba0:	4798      	blx	r3
	/* Change interrupt masks */
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9ba2:	f240 2101 	movw	r1, #513	; 0x201
    9ba6:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9baa:	4b18      	ldr	r3, [pc, #96]	; (9c0c <_usb_d_dev_lpmsusp+0x80>)
    9bac:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9bae:	2170      	movs	r1, #112	; 0x70
    9bb0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9bb4:	4b16      	ldr	r3, [pc, #88]	; (9c10 <_usb_d_dev_lpmsusp+0x84>)
    9bb6:	4798      	blx	r3

	/* Find LPM data */
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9bb8:	2300      	movs	r3, #0
    9bba:	73fb      	strb	r3, [r7, #15]
    9bbc:	e018      	b.n	9bf0 <_usb_d_dev_lpmsusp+0x64>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    9bbe:	7bfb      	ldrb	r3, [r7, #15]
    9bc0:	015b      	lsls	r3, r3, #5
    9bc2:	4a14      	ldr	r2, [pc, #80]	; (9c14 <_usb_d_dev_lpmsusp+0x88>)
    9bc4:	4413      	add	r3, r2
    9bc6:	607b      	str	r3, [r7, #4]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    9bc8:	687b      	ldr	r3, [r7, #4]
    9bca:	891b      	ldrh	r3, [r3, #8]
    9bcc:	f3c3 0303 	ubfx	r3, r3, #0, #4
    9bd0:	b2db      	uxtb	r3, r3
    9bd2:	2b03      	cmp	r3, #3
    9bd4:	d109      	bne.n	9bea <_usb_d_dev_lpmsusp+0x5e>
			/* Save LPM variable */
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    9bd6:	687b      	ldr	r3, [r7, #4]
    9bd8:	891b      	ldrh	r3, [r3, #8]
    9bda:	f3c3 130a 	ubfx	r3, r3, #4, #11
    9bde:	b29b      	uxth	r3, r3
    9be0:	60bb      	str	r3, [r7, #8]
			/* Clear */
			bank->EXTREG.reg = 0;
    9be2:	687b      	ldr	r3, [r7, #4]
    9be4:	2200      	movs	r2, #0
    9be6:	811a      	strh	r2, [r3, #8]
			break;
    9be8:	e005      	b.n	9bf6 <_usb_d_dev_lpmsusp+0x6a>
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    9bea:	7bfb      	ldrb	r3, [r7, #15]
    9bec:	3301      	adds	r3, #1
    9bee:	73fb      	strb	r3, [r7, #15]
    9bf0:	7bfb      	ldrb	r3, [r7, #15]
    9bf2:	2b03      	cmp	r3, #3
    9bf4:	d9e3      	bls.n	9bbe <_usb_d_dev_lpmsusp+0x32>
		}
	}
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    9bf6:	4b08      	ldr	r3, [pc, #32]	; (9c18 <_usb_d_dev_lpmsusp+0x8c>)
    9bf8:	685b      	ldr	r3, [r3, #4]
    9bfa:	68b9      	ldr	r1, [r7, #8]
    9bfc:	2003      	movs	r0, #3
    9bfe:	4798      	blx	r3
}
    9c00:	bf00      	nop
    9c02:	3710      	adds	r7, #16
    9c04:	46bd      	mov	sp, r7
    9c06:	bd80      	pop	{r7, pc}
    9c08:	000091e3 	.word	0x000091e3
    9c0c:	00009239 	.word	0x00009239
    9c10:	00009201 	.word	0x00009201
    9c14:	20000ff8 	.word	0x20000ff8
    9c18:	20000f30 	.word	0x20000f30

00009c1c <_usb_d_dev_ramerr>:

/**
 * \brief Handles USB RAM Error interrupt
 */
static inline void _usb_d_dev_ramerr(void)
{
    9c1c:	b580      	push	{r7, lr}
    9c1e:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_RAMACER);
    9c20:	2180      	movs	r1, #128	; 0x80
    9c22:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c26:	4b04      	ldr	r3, [pc, #16]	; (9c38 <_usb_d_dev_ramerr+0x1c>)
    9c28:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    9c2a:	4b04      	ldr	r3, [pc, #16]	; (9c3c <_usb_d_dev_ramerr+0x20>)
    9c2c:	685b      	ldr	r3, [r3, #4]
    9c2e:	2100      	movs	r1, #0
    9c30:	2005      	movs	r0, #5
    9c32:	4798      	blx	r3
}
    9c34:	bf00      	nop
    9c36:	bd80      	pop	{r7, pc}
    9c38:	000091e3 	.word	0x000091e3
    9c3c:	20000f30 	.word	0x20000f30

00009c40 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
    9c40:	b580      	push	{r7, lr}
    9c42:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9c44:	2170      	movs	r1, #112	; 0x70
    9c46:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c4a:	4b0b      	ldr	r3, [pc, #44]	; (9c78 <_usb_d_dev_wakeup+0x38>)
    9c4c:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9c4e:	2170      	movs	r1, #112	; 0x70
    9c50:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c54:	4b09      	ldr	r3, [pc, #36]	; (9c7c <_usb_d_dev_wakeup+0x3c>)
    9c56:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9c58:	f240 2101 	movw	r1, #513	; 0x201
    9c5c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c60:	4b07      	ldr	r3, [pc, #28]	; (9c80 <_usb_d_dev_wakeup+0x40>)
    9c62:	4798      	blx	r3

	_usb_d_dev_wait_clk_rdy(CONF_USB_D_CLK_SRC);
    9c64:	2000      	movs	r0, #0
    9c66:	4b07      	ldr	r3, [pc, #28]	; (9c84 <_usb_d_dev_wakeup+0x44>)
    9c68:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    9c6a:	4b07      	ldr	r3, [pc, #28]	; (9c88 <_usb_d_dev_wakeup+0x48>)
    9c6c:	685b      	ldr	r3, [r3, #4]
    9c6e:	2100      	movs	r1, #0
    9c70:	2002      	movs	r0, #2
    9c72:	4798      	blx	r3
}
    9c74:	bf00      	nop
    9c76:	bd80      	pop	{r7, pc}
    9c78:	000091e3 	.word	0x000091e3
    9c7c:	00009239 	.word	0x00009239
    9c80:	00009201 	.word	0x00009201
    9c84:	000094e1 	.word	0x000094e1
    9c88:	20000f30 	.word	0x20000f30

00009c8c <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
    9c8c:	b580      	push	{r7, lr}
    9c8e:	af00      	add	r7, sp, #0
	/* EP0 will not be reseted by USB RESET, disable manually. */
	hri_usbendpoint_write_EPCFG_reg(USB, 0, 0);
    9c90:	2200      	movs	r2, #0
    9c92:	2100      	movs	r1, #0
    9c94:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9c98:	4b0d      	ldr	r3, [pc, #52]	; (9cd0 <_usb_d_dev_reset+0x44>)
    9c9a:	4798      	blx	r3

	hri_usbdevice_clear_INTFLAG_reg(USB, USB_DEVICE_INTFLAG_EORST);
    9c9c:	2108      	movs	r1, #8
    9c9e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9ca2:	4b0c      	ldr	r3, [pc, #48]	; (9cd4 <_usb_d_dev_reset+0x48>)
    9ca4:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9ca6:	2170      	movs	r1, #112	; 0x70
    9ca8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9cac:	4b0a      	ldr	r3, [pc, #40]	; (9cd8 <_usb_d_dev_reset+0x4c>)
    9cae:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9cb0:	f240 2101 	movw	r1, #513	; 0x201
    9cb4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9cb8:	4b08      	ldr	r3, [pc, #32]	; (9cdc <_usb_d_dev_reset+0x50>)
    9cba:	4798      	blx	r3

	_usb_d_dev_reset_epts();
    9cbc:	4b08      	ldr	r3, [pc, #32]	; (9ce0 <_usb_d_dev_reset+0x54>)
    9cbe:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    9cc0:	4b08      	ldr	r3, [pc, #32]	; (9ce4 <_usb_d_dev_reset+0x58>)
    9cc2:	685b      	ldr	r3, [r3, #4]
    9cc4:	2100      	movs	r1, #0
    9cc6:	2001      	movs	r0, #1
    9cc8:	4798      	blx	r3
}
    9cca:	bf00      	nop
    9ccc:	bd80      	pop	{r7, pc}
    9cce:	bf00      	nop
    9cd0:	00009179 	.word	0x00009179
    9cd4:	000091e3 	.word	0x000091e3
    9cd8:	00009239 	.word	0x00009239
    9cdc:	00009201 	.word	0x00009201
    9ce0:	0000a849 	.word	0x0000a849
    9ce4:	20000f30 	.word	0x20000f30

00009ce8 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
    9ce8:	b580      	push	{r7, lr}
    9cea:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_INTFLAG_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9cec:	f240 2101 	movw	r1, #513	; 0x201
    9cf0:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9cf4:	4b09      	ldr	r3, [pc, #36]	; (9d1c <_usb_d_dev_suspend+0x34>)
    9cf6:	4798      	blx	r3
	hri_usbdevice_clear_INTEN_reg(USB, USB_D_SUSPEND_INT_FLAGS);
    9cf8:	f240 2101 	movw	r1, #513	; 0x201
    9cfc:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d00:	4b07      	ldr	r3, [pc, #28]	; (9d20 <_usb_d_dev_suspend+0x38>)
    9d02:	4798      	blx	r3
	hri_usbdevice_set_INTEN_reg(USB, USB_D_WAKEUP_INT_FLAGS);
    9d04:	2170      	movs	r1, #112	; 0x70
    9d06:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d0a:	4b06      	ldr	r3, [pc, #24]	; (9d24 <_usb_d_dev_suspend+0x3c>)
    9d0c:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    9d0e:	4b06      	ldr	r3, [pc, #24]	; (9d28 <_usb_d_dev_suspend+0x40>)
    9d10:	685b      	ldr	r3, [r3, #4]
    9d12:	2100      	movs	r1, #0
    9d14:	2004      	movs	r0, #4
    9d16:	4798      	blx	r3
}
    9d18:	bf00      	nop
    9d1a:	bd80      	pop	{r7, pc}
    9d1c:	000091e3 	.word	0x000091e3
    9d20:	00009239 	.word	0x00009239
    9d24:	00009201 	.word	0x00009201
    9d28:	20000f30 	.word	0x20000f30

00009d2c <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
    9d2c:	b580      	push	{r7, lr}
    9d2e:	b082      	sub	sp, #8
    9d30:	af00      	add	r7, sp, #0
	bool     rc    = true;
    9d32:	2301      	movs	r3, #1
    9d34:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbdevice_read_INTFLAG_reg(USB);
    9d36:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d3a:	4b22      	ldr	r3, [pc, #136]	; (9dc4 <_usb_d_dev_handle_nep+0x98>)
    9d3c:	4798      	blx	r3
    9d3e:	4603      	mov	r3, r0
    9d40:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    9d42:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    9d46:	4b20      	ldr	r3, [pc, #128]	; (9dc8 <_usb_d_dev_handle_nep+0x9c>)
    9d48:	4798      	blx	r3
    9d4a:	4603      	mov	r3, r0
    9d4c:	461a      	mov	r2, r3
    9d4e:	88bb      	ldrh	r3, [r7, #4]
    9d50:	4013      	ands	r3, r2
    9d52:	80bb      	strh	r3, [r7, #4]

	if (flags & USB_DEVICE_INTFLAG_SOF) {
    9d54:	88bb      	ldrh	r3, [r7, #4]
    9d56:	f003 0304 	and.w	r3, r3, #4
    9d5a:	2b00      	cmp	r3, #0
    9d5c:	d003      	beq.n	9d66 <_usb_d_dev_handle_nep+0x3a>
		_usb_d_dev_sof();
    9d5e:	4b1b      	ldr	r3, [pc, #108]	; (9dcc <_usb_d_dev_handle_nep+0xa0>)
    9d60:	4798      	blx	r3
		return true;
    9d62:	2301      	movs	r3, #1
    9d64:	e02a      	b.n	9dbc <_usb_d_dev_handle_nep+0x90>
	}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    9d66:	88bb      	ldrh	r3, [r7, #4]
    9d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9d6c:	2b00      	cmp	r3, #0
    9d6e:	d002      	beq.n	9d76 <_usb_d_dev_handle_nep+0x4a>
		_usb_d_dev_lpmsusp();
    9d70:	4b17      	ldr	r3, [pc, #92]	; (9dd0 <_usb_d_dev_handle_nep+0xa4>)
    9d72:	4798      	blx	r3
    9d74:	e021      	b.n	9dba <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    9d76:	88bb      	ldrh	r3, [r7, #4]
    9d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9d7c:	2b00      	cmp	r3, #0
    9d7e:	d002      	beq.n	9d86 <_usb_d_dev_handle_nep+0x5a>
		_usb_d_dev_ramerr();
    9d80:	4b14      	ldr	r3, [pc, #80]	; (9dd4 <_usb_d_dev_handle_nep+0xa8>)
    9d82:	4798      	blx	r3
    9d84:	e019      	b.n	9dba <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    9d86:	88bb      	ldrh	r3, [r7, #4]
    9d88:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9d8c:	2b00      	cmp	r3, #0
    9d8e:	d002      	beq.n	9d96 <_usb_d_dev_handle_nep+0x6a>
		_usb_d_dev_wakeup();
    9d90:	4b11      	ldr	r3, [pc, #68]	; (9dd8 <_usb_d_dev_handle_nep+0xac>)
    9d92:	4798      	blx	r3
    9d94:	e011      	b.n	9dba <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    9d96:	88bb      	ldrh	r3, [r7, #4]
    9d98:	f003 0308 	and.w	r3, r3, #8
    9d9c:	2b00      	cmp	r3, #0
    9d9e:	d002      	beq.n	9da6 <_usb_d_dev_handle_nep+0x7a>
		_usb_d_dev_reset();
    9da0:	4b0e      	ldr	r3, [pc, #56]	; (9ddc <_usb_d_dev_handle_nep+0xb0>)
    9da2:	4798      	blx	r3
    9da4:	e009      	b.n	9dba <_usb_d_dev_handle_nep+0x8e>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    9da6:	88bb      	ldrh	r3, [r7, #4]
    9da8:	f003 0301 	and.w	r3, r3, #1
    9dac:	2b00      	cmp	r3, #0
    9dae:	d002      	beq.n	9db6 <_usb_d_dev_handle_nep+0x8a>
		_usb_d_dev_suspend();
    9db0:	4b0b      	ldr	r3, [pc, #44]	; (9de0 <_usb_d_dev_handle_nep+0xb4>)
    9db2:	4798      	blx	r3
    9db4:	e001      	b.n	9dba <_usb_d_dev_handle_nep+0x8e>
	} else {
		rc = false;
    9db6:	2300      	movs	r3, #0
    9db8:	71fb      	strb	r3, [r7, #7]
	}
	return rc;
    9dba:	79fb      	ldrb	r3, [r7, #7]
}
    9dbc:	4618      	mov	r0, r3
    9dbe:	3708      	adds	r7, #8
    9dc0:	46bd      	mov	sp, r7
    9dc2:	bd80      	pop	{r7, pc}
    9dc4:	000091c9 	.word	0x000091c9
    9dc8:	0000921f 	.word	0x0000921f
    9dcc:	00009b6d 	.word	0x00009b6d
    9dd0:	00009b8d 	.word	0x00009b8d
    9dd4:	00009c1d 	.word	0x00009c1d
    9dd8:	00009c41 	.word	0x00009c41
    9ddc:	00009c8d 	.word	0x00009c8d
    9de0:	00009ce9 	.word	0x00009ce9

00009de4 <_usb_d_dev_in_next>:
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9de4:	b590      	push	{r4, r7, lr}
    9de6:	b089      	sub	sp, #36	; 0x24
    9de8:	af00      	add	r7, sp, #0
    9dea:	6078      	str	r0, [r7, #4]
    9dec:	460b      	mov	r3, r1
    9dee:	70fb      	strb	r3, [r7, #3]
	Usb *              hw          = USB;
    9df0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    9df4:	61bb      	str	r3, [r7, #24]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    9df6:	687b      	ldr	r3, [r7, #4]
    9df8:	7c9b      	ldrb	r3, [r3, #18]
    9dfa:	f003 030f 	and.w	r3, r3, #15
    9dfe:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    9e00:	7dfb      	ldrb	r3, [r7, #23]
    9e02:	015b      	lsls	r3, r3, #5
    9e04:	4a73      	ldr	r2, [pc, #460]	; (9fd4 <_usb_d_dev_in_next+0x1f0>)
    9e06:	4413      	add	r3, r2
    9e08:	613b      	str	r3, [r7, #16]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    9e0a:	78fb      	ldrb	r3, [r7, #3]
    9e0c:	2b00      	cmp	r3, #0
    9e0e:	d006      	beq.n	9e1e <_usb_d_dev_in_next+0x3a>
    9e10:	693b      	ldr	r3, [r7, #16]
    9e12:	3310      	adds	r3, #16
    9e14:	685b      	ldr	r3, [r3, #4]
    9e16:	f3c3 030d 	ubfx	r3, r3, #0, #14
    9e1a:	b29b      	uxth	r3, r3
    9e1c:	e000      	b.n	9e20 <_usb_d_dev_in_next+0x3c>
    9e1e:	2300      	movs	r3, #0
    9e20:	81fb      	strh	r3, [r7, #14]
	uint16_t           trans_next;
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    9e22:	687b      	ldr	r3, [r7, #4]
    9e24:	8a1b      	ldrh	r3, [r3, #16]
    9e26:	f240 32ff 	movw	r2, #1023	; 0x3ff
    9e2a:	4293      	cmp	r3, r2
    9e2c:	d103      	bne.n	9e36 <_usb_d_dev_in_next+0x52>
    9e2e:	687b      	ldr	r3, [r7, #4]
    9e30:	8a1b      	ldrh	r3, [r3, #16]
    9e32:	b21b      	sxth	r3, r3
    9e34:	e004      	b.n	9e40 <_usb_d_dev_in_next+0x5c>
    9e36:	687b      	ldr	r3, [r7, #4]
    9e38:	8a1b      	ldrh	r3, [r3, #16]
    9e3a:	3b01      	subs	r3, #1
    9e3c:	b29b      	uxth	r3, r3
    9e3e:	b21b      	sxth	r3, r3
    9e40:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
    9e44:	4013      	ands	r3, r2
    9e46:	b21b      	sxth	r3, r3
    9e48:	81bb      	strh	r3, [r7, #12]
	uint8_t            inten    = 0;
    9e4a:	2300      	movs	r3, #0
    9e4c:	777b      	strb	r3, [r7, #29]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    9e4e:	687b      	ldr	r3, [r7, #4]
    9e50:	7cdb      	ldrb	r3, [r3, #19]
    9e52:	f003 0307 	and.w	r3, r3, #7
    9e56:	b2db      	uxtb	r3, r3
    9e58:	2b01      	cmp	r3, #1
    9e5a:	bf0c      	ite	eq
    9e5c:	2301      	moveq	r3, #1
    9e5e:	2300      	movne	r3, #0
    9e60:	72fb      	strb	r3, [r7, #11]

	if (isr) {
    9e62:	78fb      	ldrb	r3, [r7, #3]
    9e64:	2b00      	cmp	r3, #0
    9e66:	d004      	beq.n	9e72 <_usb_d_dev_in_next+0x8e>
		_usbd_ep_ack_io_cpt(epn, 1);
    9e68:	7dfb      	ldrb	r3, [r7, #23]
    9e6a:	2101      	movs	r1, #1
    9e6c:	4618      	mov	r0, r3
    9e6e:	4b5a      	ldr	r3, [pc, #360]	; (9fd8 <_usb_d_dev_in_next+0x1f4>)
    9e70:	4798      	blx	r3
	}

	ept->trans_count += trans_count;
    9e72:	687b      	ldr	r3, [r7, #4]
    9e74:	689a      	ldr	r2, [r3, #8]
    9e76:	89fb      	ldrh	r3, [r7, #14]
    9e78:	441a      	add	r2, r3
    9e7a:	687b      	ldr	r3, [r7, #4]
    9e7c:	609a      	str	r2, [r3, #8]
	/* Send more data. */
	if (ept->trans_count < ept->trans_size) {
    9e7e:	687b      	ldr	r3, [r7, #4]
    9e80:	689a      	ldr	r2, [r3, #8]
    9e82:	687b      	ldr	r3, [r7, #4]
    9e84:	685b      	ldr	r3, [r3, #4]
    9e86:	429a      	cmp	r2, r3
    9e88:	d243      	bcs.n	9f12 <_usb_d_dev_in_next+0x12e>
		trans_next = ept->trans_size - ept->trans_count;
    9e8a:	687b      	ldr	r3, [r7, #4]
    9e8c:	685b      	ldr	r3, [r3, #4]
    9e8e:	b29a      	uxth	r2, r3
    9e90:	687b      	ldr	r3, [r7, #4]
    9e92:	689b      	ldr	r3, [r3, #8]
    9e94:	b29b      	uxth	r3, r3
    9e96:	1ad3      	subs	r3, r2, r3
    9e98:	83fb      	strh	r3, [r7, #30]
		if (ept->flags.bits.use_cache) {
    9e9a:	687b      	ldr	r3, [r7, #4]
    9e9c:	7cdb      	ldrb	r3, [r3, #19]
    9e9e:	f003 0320 	and.w	r3, r3, #32
    9ea2:	b2db      	uxtb	r3, r3
    9ea4:	2b00      	cmp	r3, #0
    9ea6:	d01b      	beq.n	9ee0 <_usb_d_dev_in_next+0xfc>
			if (trans_next > ept->size) {
    9ea8:	687b      	ldr	r3, [r7, #4]
    9eaa:	8a1b      	ldrh	r3, [r3, #16]
    9eac:	8bfa      	ldrh	r2, [r7, #30]
    9eae:	429a      	cmp	r2, r3
    9eb0:	d902      	bls.n	9eb8 <_usb_d_dev_in_next+0xd4>
				trans_next = ept->size;
    9eb2:	687b      	ldr	r3, [r7, #4]
    9eb4:	8a1b      	ldrh	r3, [r3, #16]
    9eb6:	83fb      	strh	r3, [r7, #30]
			}
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    9eb8:	687b      	ldr	r3, [r7, #4]
    9eba:	68d8      	ldr	r0, [r3, #12]
    9ebc:	687b      	ldr	r3, [r7, #4]
    9ebe:	681a      	ldr	r2, [r3, #0]
    9ec0:	687b      	ldr	r3, [r7, #4]
    9ec2:	689b      	ldr	r3, [r3, #8]
    9ec4:	4413      	add	r3, r2
    9ec6:	8bfa      	ldrh	r2, [r7, #30]
    9ec8:	4619      	mov	r1, r3
    9eca:	4b44      	ldr	r3, [pc, #272]	; (9fdc <_usb_d_dev_in_next+0x1f8>)
    9ecc:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    9ece:	687b      	ldr	r3, [r7, #4]
    9ed0:	68db      	ldr	r3, [r3, #12]
    9ed2:	461a      	mov	r2, r3
    9ed4:	7dfb      	ldrb	r3, [r7, #23]
    9ed6:	2101      	movs	r1, #1
    9ed8:	4618      	mov	r0, r3
    9eda:	4b41      	ldr	r3, [pc, #260]	; (9fe0 <_usb_d_dev_in_next+0x1fc>)
    9edc:	4798      	blx	r3
    9ede:	e011      	b.n	9f04 <_usb_d_dev_in_next+0x120>
		} else {
			if (trans_next > USB_D_DEV_TRANS_MAX) {
    9ee0:	8bfb      	ldrh	r3, [r7, #30]
    9ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    9ee6:	d902      	bls.n	9eee <_usb_d_dev_in_next+0x10a>
				trans_next = USB_D_DEV_TRANS_MAX;
    9ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9eec:	83fb      	strh	r3, [r7, #30]
			}
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    9eee:	687b      	ldr	r3, [r7, #4]
    9ef0:	681a      	ldr	r2, [r3, #0]
    9ef2:	687b      	ldr	r3, [r7, #4]
    9ef4:	689b      	ldr	r3, [r3, #8]
    9ef6:	4413      	add	r3, r2
    9ef8:	461a      	mov	r2, r3
    9efa:	7dfb      	ldrb	r3, [r7, #23]
    9efc:	2101      	movs	r1, #1
    9efe:	4618      	mov	r0, r3
    9f00:	4b37      	ldr	r3, [pc, #220]	; (9fe0 <_usb_d_dev_in_next+0x1fc>)
    9f02:	4798      	blx	r3
		}
		_usbd_ep_set_in_trans(epn, 1, trans_next, 0);
    9f04:	8bfa      	ldrh	r2, [r7, #30]
    9f06:	7df8      	ldrb	r0, [r7, #23]
    9f08:	2300      	movs	r3, #0
    9f0a:	2101      	movs	r1, #1
    9f0c:	4c35      	ldr	r4, [pc, #212]	; (9fe4 <_usb_d_dev_in_next+0x200>)
    9f0e:	47a0      	blx	r4
		goto _in_tx_exec;
    9f10:	e041      	b.n	9f96 <_usb_d_dev_in_next+0x1b2>
	} else if (ept->flags.bits.need_zlp) {
    9f12:	687b      	ldr	r3, [r7, #4]
    9f14:	7cdb      	ldrb	r3, [r3, #19]
    9f16:	f003 0310 	and.w	r3, r3, #16
    9f1a:	b2db      	uxtb	r3, r3
    9f1c:	2b00      	cmp	r3, #0
    9f1e:	d00b      	beq.n	9f38 <_usb_d_dev_in_next+0x154>
		ept->flags.bits.need_zlp = 0;
    9f20:	687a      	ldr	r2, [r7, #4]
    9f22:	7cd3      	ldrb	r3, [r2, #19]
    9f24:	f36f 1304 	bfc	r3, #4, #1
    9f28:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_in_trans(epn, 1, 0, 0);
    9f2a:	7df8      	ldrb	r0, [r7, #23]
    9f2c:	2300      	movs	r3, #0
    9f2e:	2200      	movs	r2, #0
    9f30:	2101      	movs	r1, #1
    9f32:	4c2c      	ldr	r4, [pc, #176]	; (9fe4 <_usb_d_dev_in_next+0x200>)
    9f34:	47a0      	blx	r4
		goto _in_tx_exec;
    9f36:	e02e      	b.n	9f96 <_usb_d_dev_in_next+0x1b2>
	}
	/* Complete. */
	if (is_ctrl) {
    9f38:	7afb      	ldrb	r3, [r7, #11]
    9f3a:	2b00      	cmp	r3, #0
    9f3c:	d006      	beq.n	9f4c <_usb_d_dev_in_next+0x168>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRCPT0);
    9f3e:	7dfb      	ldrb	r3, [r7, #23]
    9f40:	224b      	movs	r2, #75	; 0x4b
    9f42:	4619      	mov	r1, r3
    9f44:	69b8      	ldr	r0, [r7, #24]
    9f46:	4b28      	ldr	r3, [pc, #160]	; (9fe8 <_usb_d_dev_in_next+0x204>)
    9f48:	4798      	blx	r3
    9f4a:	e005      	b.n	9f58 <_usb_d_dev_in_next+0x174>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK1_INT_FLAGS);
    9f4c:	7dfb      	ldrb	r3, [r7, #23]
    9f4e:	224a      	movs	r2, #74	; 0x4a
    9f50:	4619      	mov	r1, r3
    9f52:	69b8      	ldr	r0, [r7, #24]
    9f54:	4b24      	ldr	r3, [pc, #144]	; (9fe8 <_usb_d_dev_in_next+0x204>)
    9f56:	4798      	blx	r3
	}

	/* No ping-pong, so ask more data without background transfer. */
	if (last_pkt == ept->size) {
    9f58:	687b      	ldr	r3, [r7, #4]
    9f5a:	8a1b      	ldrh	r3, [r3, #16]
    9f5c:	89ba      	ldrh	r2, [r7, #12]
    9f5e:	429a      	cmp	r2, r3
    9f60:	d114      	bne.n	9f8c <_usb_d_dev_in_next+0x1a8>
		ept->flags.bits.is_busy = 0;
    9f62:	687a      	ldr	r2, [r7, #4]
    9f64:	7cd3      	ldrb	r3, [r2, #19]
    9f66:	f36f 1386 	bfc	r3, #6, #1
    9f6a:	74d3      	strb	r3, [r2, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    9f6c:	4b1f      	ldr	r3, [pc, #124]	; (9fec <_usb_d_dev_in_next+0x208>)
    9f6e:	68db      	ldr	r3, [r3, #12]
    9f70:	687a      	ldr	r2, [r7, #4]
    9f72:	7c90      	ldrb	r0, [r2, #18]
    9f74:	687a      	ldr	r2, [r7, #4]
    9f76:	6892      	ldr	r2, [r2, #8]
    9f78:	4611      	mov	r1, r2
    9f7a:	4798      	blx	r3
    9f7c:	4603      	mov	r3, r0
    9f7e:	2b00      	cmp	r3, #0
    9f80:	d124      	bne.n	9fcc <_usb_d_dev_in_next+0x1e8>
			/* More data added. */
			return;
		}
		ept->flags.bits.is_busy = 1;
    9f82:	687a      	ldr	r2, [r7, #4]
    9f84:	7cd3      	ldrb	r3, [r2, #19]
    9f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9f8a:	74d3      	strb	r3, [r2, #19]
	}
	/* Finish normally. */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    9f8c:	2100      	movs	r1, #0
    9f8e:	6878      	ldr	r0, [r7, #4]
    9f90:	4b17      	ldr	r3, [pc, #92]	; (9ff0 <_usb_d_dev_in_next+0x20c>)
    9f92:	4798      	blx	r3
	return;
    9f94:	e01b      	b.n	9fce <_usb_d_dev_in_next+0x1ea>

_in_tx_exec:
	if (!isr) {
    9f96:	78fb      	ldrb	r3, [r7, #3]
    9f98:	f083 0301 	eor.w	r3, r3, #1
    9f9c:	b2db      	uxtb	r3, r3
    9f9e:	2b00      	cmp	r3, #0
    9fa0:	d00d      	beq.n	9fbe <_usb_d_dev_in_next+0x1da>
		if (is_ctrl) {
    9fa2:	7afb      	ldrb	r3, [r7, #11]
    9fa4:	2b00      	cmp	r3, #0
    9fa6:	d002      	beq.n	9fae <_usb_d_dev_in_next+0x1ca>
			/* Control endpoint: SETUP or OUT will abort IN transaction.
			 * SETUP: terminate the IN without any notification. Trigger
			 *        SETUP callback.
			 * OUT NAK: terminate IN.
			 */
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    9fa8:	234e      	movs	r3, #78	; 0x4e
    9faa:	777b      	strb	r3, [r7, #29]
    9fac:	e001      	b.n	9fb2 <_usb_d_dev_in_next+0x1ce>
		} else {
			/* Initialize normal IN transaction. */
			inten = USB_D_BANK1_INT_FLAGS;
    9fae:	234a      	movs	r3, #74	; 0x4a
    9fb0:	777b      	strb	r3, [r7, #29]
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    9fb2:	7f7a      	ldrb	r2, [r7, #29]
    9fb4:	7dfb      	ldrb	r3, [r7, #23]
    9fb6:	4619      	mov	r1, r3
    9fb8:	69b8      	ldr	r0, [r7, #24]
    9fba:	4b0e      	ldr	r3, [pc, #56]	; (9ff4 <_usb_d_dev_in_next+0x210>)
    9fbc:	4798      	blx	r3
	}
	_usbd_ep_set_in_rdy(epn, 1, true);
    9fbe:	7dfb      	ldrb	r3, [r7, #23]
    9fc0:	2201      	movs	r2, #1
    9fc2:	2101      	movs	r1, #1
    9fc4:	4618      	mov	r0, r3
    9fc6:	4b0c      	ldr	r3, [pc, #48]	; (9ff8 <_usb_d_dev_in_next+0x214>)
    9fc8:	4798      	blx	r3
    9fca:	e000      	b.n	9fce <_usb_d_dev_in_next+0x1ea>
			return;
    9fcc:	bf00      	nop
}
    9fce:	3724      	adds	r7, #36	; 0x24
    9fd0:	46bd      	mov	sp, r7
    9fd2:	bd90      	pop	{r4, r7, pc}
    9fd4:	20000ff8 	.word	0x20000ff8
    9fd8:	000097dd 	.word	0x000097dd
    9fdc:	00013611 	.word	0x00013611
    9fe0:	00009809 	.word	0x00009809
    9fe4:	00009951 	.word	0x00009951
    9fe8:	000090e9 	.word	0x000090e9
    9fec:	20000f30 	.word	0x20000f30
    9ff0:	0000b10d 	.word	0x0000b10d
    9ff4:	000090bd 	.word	0x000090bd
    9ff8:	00009a09 	.word	0x00009a09

00009ffc <_usb_d_dev_out_next>:
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] isr Invoked from ISR.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept, bool isr)
{
    9ffc:	b590      	push	{r4, r7, lr}
    9ffe:	b08b      	sub	sp, #44	; 0x2c
    a000:	af00      	add	r7, sp, #0
    a002:	6078      	str	r0, [r7, #4]
    a004:	460b      	mov	r3, r1
    a006:	70fb      	strb	r3, [r7, #3]
	Usb *              hw         = USB;
    a008:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a00c:	623b      	str	r3, [r7, #32]
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    a00e:	687b      	ldr	r3, [r7, #4]
    a010:	7c9b      	ldrb	r3, [r3, #18]
    a012:	f003 030f 	and.w	r3, r3, #15
    a016:	77fb      	strb	r3, [r7, #31]
	UsbDeviceDescBank *bank       = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    a018:	7ffb      	ldrb	r3, [r7, #31]
    a01a:	015b      	lsls	r3, r3, #5
    a01c:	4a94      	ldr	r2, [pc, #592]	; (a270 <_usb_d_dev_out_next+0x274>)
    a01e:	4413      	add	r3, r2
    a020:	61bb      	str	r3, [r7, #24]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    a022:	78fb      	ldrb	r3, [r7, #3]
    a024:	2b00      	cmp	r3, #0
    a026:	d005      	beq.n	a034 <_usb_d_dev_out_next+0x38>
    a028:	69bb      	ldr	r3, [r7, #24]
    a02a:	685b      	ldr	r3, [r3, #4]
    a02c:	f3c3 338d 	ubfx	r3, r3, #14, #14
    a030:	b29b      	uxth	r3, r3
    a032:	e000      	b.n	a036 <_usb_d_dev_out_next+0x3a>
    a034:	2300      	movs	r3, #0
    a036:	82fb      	strh	r3, [r7, #22]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    a038:	78fb      	ldrb	r3, [r7, #3]
    a03a:	2b00      	cmp	r3, #0
    a03c:	d005      	beq.n	a04a <_usb_d_dev_out_next+0x4e>
    a03e:	69bb      	ldr	r3, [r7, #24]
    a040:	685b      	ldr	r3, [r3, #4]
    a042:	f3c3 030d 	ubfx	r3, r3, #0, #14
    a046:	b29b      	uxth	r3, r3
    a048:	e000      	b.n	a04c <_usb_d_dev_out_next+0x50>
    a04a:	2300      	movs	r3, #0
    a04c:	82bb      	strh	r3, [r7, #20]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    a04e:	687b      	ldr	r3, [r7, #4]
    a050:	8a1b      	ldrh	r3, [r3, #16]
    a052:	f240 32ff 	movw	r2, #1023	; 0x3ff
    a056:	4293      	cmp	r3, r2
    a058:	d004      	beq.n	a064 <_usb_d_dev_out_next+0x68>
    a05a:	687b      	ldr	r3, [r7, #4]
    a05c:	8a1b      	ldrh	r3, [r3, #16]
    a05e:	3b01      	subs	r3, #1
    a060:	b29b      	uxth	r3, r3
    a062:	e001      	b.n	a068 <_usb_d_dev_out_next+0x6c>
    a064:	f240 33ff 	movw	r3, #1023	; 0x3ff
    a068:	827b      	strh	r3, [r7, #18]
	uint16_t           last_pkt   = last_trans & size_mask;
    a06a:	8aba      	ldrh	r2, [r7, #20]
    a06c:	8a7b      	ldrh	r3, [r7, #18]
    a06e:	4013      	ands	r3, r2
    a070:	823b      	strh	r3, [r7, #16]
	uint16_t           trans_next;
	uint8_t            inten;
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a072:	687b      	ldr	r3, [r7, #4]
    a074:	7cdb      	ldrb	r3, [r3, #19]
    a076:	f003 0307 	and.w	r3, r3, #7
    a07a:	b2db      	uxtb	r3, r3
    a07c:	2b01      	cmp	r3, #1
    a07e:	bf0c      	ite	eq
    a080:	2301      	moveq	r3, #1
    a082:	2300      	movne	r3, #0
    a084:	73fb      	strb	r3, [r7, #15]

	if (isr) {
    a086:	78fb      	ldrb	r3, [r7, #3]
    a088:	2b00      	cmp	r3, #0
    a08a:	d004      	beq.n	a096 <_usb_d_dev_out_next+0x9a>
		_usbd_ep_ack_io_cpt(epn, 0);
    a08c:	7ffb      	ldrb	r3, [r7, #31]
    a08e:	2100      	movs	r1, #0
    a090:	4618      	mov	r0, r3
    a092:	4b78      	ldr	r3, [pc, #480]	; (a274 <_usb_d_dev_out_next+0x278>)
    a094:	4798      	blx	r3
	}

	/* If cache is used, copy data to buffer. */
	if (ept->flags.bits.use_cache && ept->trans_size) {
    a096:	687b      	ldr	r3, [r7, #4]
    a098:	7cdb      	ldrb	r3, [r3, #19]
    a09a:	f003 0320 	and.w	r3, r3, #32
    a09e:	b2db      	uxtb	r3, r3
    a0a0:	2b00      	cmp	r3, #0
    a0a2:	d01c      	beq.n	a0de <_usb_d_dev_out_next+0xe2>
    a0a4:	687b      	ldr	r3, [r7, #4]
    a0a6:	685b      	ldr	r3, [r3, #4]
    a0a8:	2b00      	cmp	r3, #0
    a0aa:	d018      	beq.n	a0de <_usb_d_dev_out_next+0xe2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    a0ac:	687b      	ldr	r3, [r7, #4]
    a0ae:	685b      	ldr	r3, [r3, #4]
    a0b0:	b29a      	uxth	r2, r3
    a0b2:	687b      	ldr	r3, [r7, #4]
    a0b4:	689b      	ldr	r3, [r3, #8]
    a0b6:	b29b      	uxth	r3, r3
    a0b8:	1ad3      	subs	r3, r2, r3
    a0ba:	81bb      	strh	r3, [r7, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    a0bc:	687b      	ldr	r3, [r7, #4]
    a0be:	681a      	ldr	r2, [r3, #0]
    a0c0:	687b      	ldr	r3, [r7, #4]
    a0c2:	689b      	ldr	r3, [r3, #8]
    a0c4:	18d0      	adds	r0, r2, r3
    a0c6:	687b      	ldr	r3, [r7, #4]
    a0c8:	68d9      	ldr	r1, [r3, #12]
    a0ca:	89ba      	ldrh	r2, [r7, #12]
    a0cc:	8a3b      	ldrh	r3, [r7, #16]
    a0ce:	429a      	cmp	r2, r3
    a0d0:	d901      	bls.n	a0d6 <_usb_d_dev_out_next+0xda>
    a0d2:	8a3b      	ldrh	r3, [r7, #16]
    a0d4:	e000      	b.n	a0d8 <_usb_d_dev_out_next+0xdc>
    a0d6:	89bb      	ldrh	r3, [r7, #12]
    a0d8:	461a      	mov	r2, r3
    a0da:	4b67      	ldr	r3, [pc, #412]	; (a278 <_usb_d_dev_out_next+0x27c>)
    a0dc:	4798      	blx	r3
	}

	/* Force wait ZLP */
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    a0de:	687b      	ldr	r3, [r7, #4]
    a0e0:	685b      	ldr	r3, [r3, #4]
    a0e2:	2b00      	cmp	r3, #0
    a0e4:	d121      	bne.n	a12a <_usb_d_dev_out_next+0x12e>
    a0e6:	687b      	ldr	r3, [r7, #4]
    a0e8:	7cdb      	ldrb	r3, [r3, #19]
    a0ea:	f003 0310 	and.w	r3, r3, #16
    a0ee:	b2db      	uxtb	r3, r3
    a0f0:	2b00      	cmp	r3, #0
    a0f2:	d01a      	beq.n	a12a <_usb_d_dev_out_next+0x12e>
		ept->flags.bits.need_zlp  = 0;
    a0f4:	687a      	ldr	r2, [r7, #4]
    a0f6:	7cd3      	ldrb	r3, [r2, #19]
    a0f8:	f36f 1304 	bfc	r3, #4, #1
    a0fc:	74d3      	strb	r3, [r2, #19]
		ept->flags.bits.use_cache = 1;
    a0fe:	687a      	ldr	r2, [r7, #4]
    a100:	7cd3      	ldrb	r3, [r2, #19]
    a102:	f043 0320 	orr.w	r3, r3, #32
    a106:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a108:	687b      	ldr	r3, [r7, #4]
    a10a:	68db      	ldr	r3, [r3, #12]
    a10c:	461a      	mov	r2, r3
    a10e:	7ffb      	ldrb	r3, [r7, #31]
    a110:	2100      	movs	r1, #0
    a112:	4618      	mov	r0, r3
    a114:	4b59      	ldr	r3, [pc, #356]	; (a27c <_usb_d_dev_out_next+0x280>)
    a116:	4798      	blx	r3
		_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    a118:	687b      	ldr	r3, [r7, #4]
    a11a:	8a1b      	ldrh	r3, [r3, #16]
    a11c:	461a      	mov	r2, r3
    a11e:	7ff8      	ldrb	r0, [r7, #31]
    a120:	2300      	movs	r3, #0
    a122:	2100      	movs	r1, #0
    a124:	4c56      	ldr	r4, [pc, #344]	; (a280 <_usb_d_dev_out_next+0x284>)
    a126:	47a0      	blx	r4
		goto _out_rx_exec;
    a128:	e090      	b.n	a24c <_usb_d_dev_out_next+0x250>
	} else if (isr && last_pkt < ept->size) {
    a12a:	78fb      	ldrb	r3, [r7, #3]
    a12c:	2b00      	cmp	r3, #0
    a12e:	d010      	beq.n	a152 <_usb_d_dev_out_next+0x156>
    a130:	687b      	ldr	r3, [r7, #4]
    a132:	8a1b      	ldrh	r3, [r3, #16]
    a134:	8a3a      	ldrh	r2, [r7, #16]
    a136:	429a      	cmp	r2, r3
    a138:	d20b      	bcs.n	a152 <_usb_d_dev_out_next+0x156>
		/* Short packet. */
		ept->flags.bits.need_zlp = 0;
    a13a:	687a      	ldr	r2, [r7, #4]
    a13c:	7cd3      	ldrb	r3, [r2, #19]
    a13e:	f36f 1304 	bfc	r3, #4, #1
    a142:	74d3      	strb	r3, [r2, #19]
		ept->trans_count += last_trans;
    a144:	687b      	ldr	r3, [r7, #4]
    a146:	689a      	ldr	r2, [r3, #8]
    a148:	8abb      	ldrh	r3, [r7, #20]
    a14a:	441a      	add	r2, r3
    a14c:	687b      	ldr	r3, [r7, #4]
    a14e:	609a      	str	r2, [r3, #8]
    a150:	e05c      	b.n	a20c <_usb_d_dev_out_next+0x210>
	} else {
		/* Full packets. */
		ept->trans_count += trans_size;
    a152:	687b      	ldr	r3, [r7, #4]
    a154:	689a      	ldr	r2, [r3, #8]
    a156:	8afb      	ldrh	r3, [r7, #22]
    a158:	441a      	add	r2, r3
    a15a:	687b      	ldr	r3, [r7, #4]
    a15c:	609a      	str	r2, [r3, #8]

		/* Wait more data */
		if (ept->trans_count < ept->trans_size) {
    a15e:	687b      	ldr	r3, [r7, #4]
    a160:	689a      	ldr	r2, [r3, #8]
    a162:	687b      	ldr	r3, [r7, #4]
    a164:	685b      	ldr	r3, [r3, #4]
    a166:	429a      	cmp	r2, r3
    a168:	d250      	bcs.n	a20c <_usb_d_dev_out_next+0x210>
			/* Continue OUT */
			trans_next = ept->trans_size - ept->trans_count;
    a16a:	687b      	ldr	r3, [r7, #4]
    a16c:	685b      	ldr	r3, [r3, #4]
    a16e:	b29a      	uxth	r2, r3
    a170:	687b      	ldr	r3, [r7, #4]
    a172:	689b      	ldr	r3, [r3, #8]
    a174:	b29b      	uxth	r3, r3
    a176:	1ad3      	subs	r3, r2, r3
    a178:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (ept->flags.bits.use_cache) {
    a17a:	687b      	ldr	r3, [r7, #4]
    a17c:	7cdb      	ldrb	r3, [r3, #19]
    a17e:	f003 0320 	and.w	r3, r3, #32
    a182:	b2db      	uxtb	r3, r3
    a184:	2b00      	cmp	r3, #0
    a186:	d010      	beq.n	a1aa <_usb_d_dev_out_next+0x1ae>
				/* Expect single packet each time. */
				if (trans_next > ept->size) {
    a188:	687b      	ldr	r3, [r7, #4]
    a18a:	8a1b      	ldrh	r3, [r3, #16]
    a18c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a18e:	429a      	cmp	r2, r3
    a190:	d902      	bls.n	a198 <_usb_d_dev_out_next+0x19c>
					trans_next = ept->size;
    a192:	687b      	ldr	r3, [r7, #4]
    a194:	8a1b      	ldrh	r3, [r3, #16]
    a196:	84fb      	strh	r3, [r7, #38]	; 0x26
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a198:	687b      	ldr	r3, [r7, #4]
    a19a:	68db      	ldr	r3, [r3, #12]
    a19c:	461a      	mov	r2, r3
    a19e:	7ffb      	ldrb	r3, [r7, #31]
    a1a0:	2100      	movs	r1, #0
    a1a2:	4618      	mov	r0, r3
    a1a4:	4b35      	ldr	r3, [pc, #212]	; (a27c <_usb_d_dev_out_next+0x280>)
    a1a6:	4798      	blx	r3
    a1a8:	e029      	b.n	a1fe <_usb_d_dev_out_next+0x202>
			} else {
				/* Multiple packets each time. */
				if (trans_next > ept->size) {
    a1aa:	687b      	ldr	r3, [r7, #4]
    a1ac:	8a1b      	ldrh	r3, [r3, #16]
    a1ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a1b0:	429a      	cmp	r2, r3
    a1b2:	d90f      	bls.n	a1d4 <_usb_d_dev_out_next+0x1d8>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    a1b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    a1b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    a1ba:	d903      	bls.n	a1c4 <_usb_d_dev_out_next+0x1c8>
						trans_next = USB_D_DEV_TRANS_MAX;
    a1bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a1c0:	84fb      	strh	r3, [r7, #38]	; 0x26
    a1c2:	e011      	b.n	a1e8 <_usb_d_dev_out_next+0x1ec>
					} else {
						/* Must expect multiple of ep size. */
						trans_next -= trans_next & size_mask;
    a1c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a1c6:	8a7b      	ldrh	r3, [r7, #18]
    a1c8:	4013      	ands	r3, r2
    a1ca:	b29b      	uxth	r3, r3
    a1cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a1ce:	1ad3      	subs	r3, r2, r3
    a1d0:	84fb      	strh	r3, [r7, #38]	; 0x26
    a1d2:	e009      	b.n	a1e8 <_usb_d_dev_out_next+0x1ec>
					}
				} else if (trans_next < ept->size) {
    a1d4:	687b      	ldr	r3, [r7, #4]
    a1d6:	8a1b      	ldrh	r3, [r3, #16]
    a1d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a1da:	429a      	cmp	r2, r3
    a1dc:	d204      	bcs.n	a1e8 <_usb_d_dev_out_next+0x1ec>
					/* Last un-aligned packet should be cached. */
					ept->flags.bits.use_cache = 1;
    a1de:	687a      	ldr	r2, [r7, #4]
    a1e0:	7cd3      	ldrb	r3, [r2, #19]
    a1e2:	f043 0320 	orr.w	r3, r3, #32
    a1e6:	74d3      	strb	r3, [r2, #19]
				}
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    a1e8:	687b      	ldr	r3, [r7, #4]
    a1ea:	681a      	ldr	r2, [r3, #0]
    a1ec:	687b      	ldr	r3, [r7, #4]
    a1ee:	689b      	ldr	r3, [r3, #8]
    a1f0:	4413      	add	r3, r2
    a1f2:	461a      	mov	r2, r3
    a1f4:	7ffb      	ldrb	r3, [r7, #31]
    a1f6:	2100      	movs	r1, #0
    a1f8:	4618      	mov	r0, r3
    a1fa:	4b20      	ldr	r3, [pc, #128]	; (a27c <_usb_d_dev_out_next+0x280>)
    a1fc:	4798      	blx	r3
			}
			_usbd_ep_set_out_trans(epn, 0, trans_next, 0);
    a1fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    a200:	7ff8      	ldrb	r0, [r7, #31]
    a202:	2300      	movs	r3, #0
    a204:	2100      	movs	r1, #0
    a206:	4c1e      	ldr	r4, [pc, #120]	; (a280 <_usb_d_dev_out_next+0x284>)
    a208:	47a0      	blx	r4
			goto _out_rx_exec;
    a20a:	e01f      	b.n	a24c <_usb_d_dev_out_next+0x250>
		}
	}
	/* Finish normally. */
	if (is_ctrl) {
    a20c:	7bfb      	ldrb	r3, [r7, #15]
    a20e:	2b00      	cmp	r3, #0
    a210:	d006      	beq.n	a220 <_usb_d_dev_out_next+0x224>
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1);
    a212:	7ffb      	ldrb	r3, [r7, #31]
    a214:	222d      	movs	r2, #45	; 0x2d
    a216:	4619      	mov	r1, r3
    a218:	6a38      	ldr	r0, [r7, #32]
    a21a:	4b1a      	ldr	r3, [pc, #104]	; (a284 <_usb_d_dev_out_next+0x288>)
    a21c:	4798      	blx	r3
    a21e:	e005      	b.n	a22c <_usb_d_dev_out_next+0x230>
	} else {
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, USB_D_BANK0_INT_FLAGS);
    a220:	7ffb      	ldrb	r3, [r7, #31]
    a222:	2225      	movs	r2, #37	; 0x25
    a224:	4619      	mov	r1, r3
    a226:	6a38      	ldr	r0, [r7, #32]
    a228:	4b16      	ldr	r3, [pc, #88]	; (a284 <_usb_d_dev_out_next+0x288>)
    a22a:	4798      	blx	r3
	}
	/* Use ep0 out cache for next setup packets */
	if (0 == epn) {
    a22c:	7ffb      	ldrb	r3, [r7, #31]
    a22e:	2b00      	cmp	r3, #0
    a230:	d107      	bne.n	a242 <_usb_d_dev_out_next+0x246>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    a232:	687b      	ldr	r3, [r7, #4]
    a234:	68db      	ldr	r3, [r3, #12]
    a236:	461a      	mov	r2, r3
    a238:	7ffb      	ldrb	r3, [r7, #31]
    a23a:	2100      	movs	r1, #0
    a23c:	4618      	mov	r0, r3
    a23e:	4b0f      	ldr	r3, [pc, #60]	; (a27c <_usb_d_dev_out_next+0x280>)
    a240:	4798      	blx	r3
	}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    a242:	2100      	movs	r1, #0
    a244:	6878      	ldr	r0, [r7, #4]
    a246:	4b10      	ldr	r3, [pc, #64]	; (a288 <_usb_d_dev_out_next+0x28c>)
    a248:	4798      	blx	r3
	return;
    a24a:	e031      	b.n	a2b0 <_usb_d_dev_out_next+0x2b4>

_out_rx_exec:
	if (!isr) {
    a24c:	78fb      	ldrb	r3, [r7, #3]
    a24e:	f083 0301 	eor.w	r3, r3, #1
    a252:	b2db      	uxtb	r3, r3
    a254:	2b00      	cmp	r3, #0
    a256:	d025      	beq.n	a2a4 <_usb_d_dev_out_next+0x2a8>
		if (is_ctrl) {
    a258:	7bfb      	ldrb	r3, [r7, #15]
    a25a:	2b00      	cmp	r3, #0
    a25c:	d018      	beq.n	a290 <_usb_d_dev_out_next+0x294>
			 *                   OUT transactions.
			 * SETUP: terminate OUT without any notification.
			 *        Trigger SETUP notification.
			 * IN NAK: finish OUT normally. Notify data done.
			 */
			_usbd_ep_clear_bank_status(epn, 1);
    a25e:	7ffb      	ldrb	r3, [r7, #31]
    a260:	2101      	movs	r1, #1
    a262:	4618      	mov	r0, r3
    a264:	4b09      	ldr	r3, [pc, #36]	; (a28c <_usb_d_dev_out_next+0x290>)
    a266:	4798      	blx	r3
			/* Detect OUT, SETUP, NAK IN */
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    a268:	232d      	movs	r3, #45	; 0x2d
    a26a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    a26e:	e012      	b.n	a296 <_usb_d_dev_out_next+0x29a>
    a270:	20000ff8 	.word	0x20000ff8
    a274:	000097dd 	.word	0x000097dd
    a278:	00013611 	.word	0x00013611
    a27c:	00009809 	.word	0x00009809
    a280:	00009991 	.word	0x00009991
    a284:	000090e9 	.word	0x000090e9
    a288:	0000b10d 	.word	0x0000b10d
    a28c:	000099d1 	.word	0x000099d1
		} else {
			/* Initialize normal OUT transaction. */
			inten = USB_D_BANK0_INT_FLAGS;
    a290:	2325      	movs	r3, #37	; 0x25
    a292:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}
		hri_usbendpoint_set_EPINTEN_reg(hw, epn, inten);
    a296:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
    a29a:	7ffb      	ldrb	r3, [r7, #31]
    a29c:	4619      	mov	r1, r3
    a29e:	6a38      	ldr	r0, [r7, #32]
    a2a0:	4b05      	ldr	r3, [pc, #20]	; (a2b8 <_usb_d_dev_out_next+0x2bc>)
    a2a2:	4798      	blx	r3
	}
	_usbd_ep_set_out_rdy(epn, 0, true);
    a2a4:	7ffb      	ldrb	r3, [r7, #31]
    a2a6:	2201      	movs	r2, #1
    a2a8:	2100      	movs	r1, #0
    a2aa:	4618      	mov	r0, r3
    a2ac:	4b03      	ldr	r3, [pc, #12]	; (a2bc <_usb_d_dev_out_next+0x2c0>)
    a2ae:	4798      	blx	r3
}
    a2b0:	372c      	adds	r7, #44	; 0x2c
    a2b2:	46bd      	mov	sp, r7
    a2b4:	bd90      	pop	{r4, r7, pc}
    a2b6:	bf00      	nop
    a2b8:	000090bd 	.word	0x000090bd
    a2bc:	00009a61 	.word	0x00009a61

0000a2c0 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    a2c0:	b580      	push	{r7, lr}
    a2c2:	b084      	sub	sp, #16
    a2c4:	af00      	add	r7, sp, #0
    a2c6:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    a2c8:	687b      	ldr	r3, [r7, #4]
    a2ca:	7c9b      	ldrb	r3, [r3, #18]
    a2cc:	f003 030f 	and.w	r3, r3, #15
    a2d0:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a2d2:	687b      	ldr	r3, [r7, #4]
    a2d4:	7cdb      	ldrb	r3, [r3, #19]
    a2d6:	f003 0307 	and.w	r3, r3, #7
    a2da:	b2db      	uxtb	r3, r3
    a2dc:	2b01      	cmp	r3, #1
    a2de:	bf0c      	ite	eq
    a2e0:	2301      	moveq	r3, #1
    a2e2:	2300      	movne	r3, #0
    a2e4:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
    a2e6:	7bbb      	ldrb	r3, [r7, #14]
    a2e8:	f083 0301 	eor.w	r3, r3, #1
    a2ec:	b2db      	uxtb	r3, r3
    a2ee:	2b00      	cmp	r3, #0
    a2f0:	d008      	beq.n	a304 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
    a2f2:	7bfb      	ldrb	r3, [r7, #15]
    a2f4:	4618      	mov	r0, r3
    a2f6:	4b20      	ldr	r3, [pc, #128]	; (a378 <_usb_d_dev_handle_setup+0xb8>)
    a2f8:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
    a2fa:	7bfb      	ldrb	r3, [r7, #15]
    a2fc:	4618      	mov	r0, r3
    a2fe:	4b1f      	ldr	r3, [pc, #124]	; (a37c <_usb_d_dev_handle_setup+0xbc>)
    a300:	4798      	blx	r3
		return;
    a302:	e036      	b.n	a372 <_usb_d_dev_handle_setup+0xb2>
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    a304:	687b      	ldr	r3, [r7, #4]
    a306:	7cdb      	ldrb	r3, [r3, #19]
    a308:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a30c:	b2db      	uxtb	r3, r3
    a30e:	2b00      	cmp	r3, #0
    a310:	d010      	beq.n	a334 <_usb_d_dev_handle_setup+0x74>
		ept->flags.bits.is_busy = 0;
    a312:	687a      	ldr	r2, [r7, #4]
    a314:	7cd3      	ldrb	r3, [r2, #19]
    a316:	f36f 1386 	bfc	r3, #6, #1
    a31a:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    a31c:	7bfb      	ldrb	r3, [r7, #15]
    a31e:	2200      	movs	r2, #0
    a320:	2101      	movs	r1, #1
    a322:	4618      	mov	r0, r3
    a324:	4b16      	ldr	r3, [pc, #88]	; (a380 <_usb_d_dev_handle_setup+0xc0>)
    a326:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, 0, false);
    a328:	7bfb      	ldrb	r3, [r7, #15]
    a32a:	2200      	movs	r2, #0
    a32c:	2100      	movs	r1, #0
    a32e:	4618      	mov	r0, r3
    a330:	4b14      	ldr	r3, [pc, #80]	; (a384 <_usb_d_dev_handle_setup+0xc4>)
    a332:	4798      	blx	r3
	}
	ept->flags.bits.is_stalled = 0;
    a334:	687a      	ldr	r2, [r7, #4]
    a336:	7cd3      	ldrb	r3, [r2, #19]
    a338:	f36f 03c3 	bfc	r3, #3, #1
    a33c:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_clear_bank_status(epn, 0);
    a33e:	7bfb      	ldrb	r3, [r7, #15]
    a340:	2100      	movs	r1, #0
    a342:	4618      	mov	r0, r3
    a344:	4b10      	ldr	r3, [pc, #64]	; (a388 <_usb_d_dev_handle_setup+0xc8>)
    a346:	4798      	blx	r3
	_usbd_ep_clear_bank_status(epn, 1);
    a348:	7bfb      	ldrb	r3, [r7, #15]
    a34a:	2101      	movs	r1, #1
    a34c:	4618      	mov	r0, r3
    a34e:	4b0e      	ldr	r3, [pc, #56]	; (a388 <_usb_d_dev_handle_setup+0xc8>)
    a350:	4798      	blx	r3
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a352:	7bfb      	ldrb	r3, [r7, #15]
    a354:	216f      	movs	r1, #111	; 0x6f
    a356:	4618      	mov	r0, r3
    a358:	4b0c      	ldr	r3, [pc, #48]	; (a38c <_usb_d_dev_handle_setup+0xcc>)
    a35a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
    a35c:	7bfb      	ldrb	r3, [r7, #15]
    a35e:	216f      	movs	r1, #111	; 0x6f
    a360:	4618      	mov	r0, r3
    a362:	4b0b      	ldr	r3, [pc, #44]	; (a390 <_usb_d_dev_handle_setup+0xd0>)
    a364:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    a366:	4b0b      	ldr	r3, [pc, #44]	; (a394 <_usb_d_dev_handle_setup+0xd4>)
    a368:	689b      	ldr	r3, [r3, #8]
    a36a:	687a      	ldr	r2, [r7, #4]
    a36c:	7c92      	ldrb	r2, [r2, #18]
    a36e:	4610      	mov	r0, r2
    a370:	4798      	blx	r3
}
    a372:	3710      	adds	r7, #16
    a374:	46bd      	mov	sp, r7
    a376:	bd80      	pop	{r7, pc}
    a378:	00009765 	.word	0x00009765
    a37c:	00009711 	.word	0x00009711
    a380:	00009a09 	.word	0x00009a09
    a384:	00009a61 	.word	0x00009a61
    a388:	000099d1 	.word	0x000099d1
    a38c:	00009511 	.word	0x00009511
    a390:	00009561 	.word	0x00009561
    a394:	20000f30 	.word	0x20000f30

0000a398 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a398:	b580      	push	{r7, lr}
    a39a:	b084      	sub	sp, #16
    a39c:	af00      	add	r7, sp, #0
    a39e:	6078      	str	r0, [r7, #4]
    a3a0:	460b      	mov	r3, r1
    a3a2:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a3a4:	687b      	ldr	r3, [r7, #4]
    a3a6:	7c9b      	ldrb	r3, [r3, #18]
    a3a8:	f003 030f 	and.w	r3, r3, #15
    a3ac:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
    a3ae:	78f9      	ldrb	r1, [r7, #3]
    a3b0:	7bfb      	ldrb	r3, [r7, #15]
    a3b2:	2200      	movs	r2, #0
    a3b4:	4618      	mov	r0, r3
    a3b6:	4b07      	ldr	r3, [pc, #28]	; (a3d4 <_usb_d_dev_handle_stall+0x3c>)
    a3b8:	4798      	blx	r3
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    a3ba:	4b07      	ldr	r3, [pc, #28]	; (a3d8 <_usb_d_dev_handle_stall+0x40>)
    a3bc:	691b      	ldr	r3, [r3, #16]
    a3be:	687a      	ldr	r2, [r7, #4]
    a3c0:	7c90      	ldrb	r0, [r2, #18]
    a3c2:	687a      	ldr	r2, [r7, #4]
    a3c4:	6892      	ldr	r2, [r2, #8]
    a3c6:	2101      	movs	r1, #1
    a3c8:	4798      	blx	r3
}
    a3ca:	bf00      	nop
    a3cc:	3710      	adds	r7, #16
    a3ce:	46bd      	mov	sp, r7
    a3d0:	bd80      	pop	{r7, pc}
    a3d2:	bf00      	nop
    a3d4:	000096c5 	.word	0x000096c5
    a3d8:	20000f30 	.word	0x20000f30

0000a3dc <_usb_d_dev_handle_trfail>:
 * \brief Handles transaction fail interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_trfail(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    a3dc:	b580      	push	{r7, lr}
    a3de:	b088      	sub	sp, #32
    a3e0:	af00      	add	r7, sp, #0
    a3e2:	6078      	str	r0, [r7, #4]
    a3e4:	460b      	mov	r3, r1
    a3e6:	70fb      	strb	r3, [r7, #3]
	Usb *              hw      = USB;
    a3e8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a3ec:	61fb      	str	r3, [r7, #28]
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    a3ee:	687b      	ldr	r3, [r7, #4]
    a3f0:	7c9b      	ldrb	r3, [r3, #18]
    a3f2:	f003 030f 	and.w	r3, r3, #15
    a3f6:	76fb      	strb	r3, [r7, #27]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    a3f8:	4b61      	ldr	r3, [pc, #388]	; (a580 <_usb_d_dev_handle_trfail+0x1a4>)
    a3fa:	881b      	ldrh	r3, [r3, #0]
    a3fc:	823b      	strh	r3, [r7, #16]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    a3fe:	7efb      	ldrb	r3, [r7, #27]
    a400:	015b      	lsls	r3, r3, #5
    a402:	4a60      	ldr	r2, [pc, #384]	; (a584 <_usb_d_dev_handle_trfail+0x1a8>)
    a404:	4413      	add	r3, r2
    a406:	617b      	str	r3, [r7, #20]
	uint8_t            eptype
    a408:	78fb      	ldrb	r3, [r7, #3]
    a40a:	2b00      	cmp	r3, #0
    a40c:	d006      	beq.n	a41c <_usb_d_dev_handle_trfail+0x40>
    a40e:	7efb      	ldrb	r3, [r7, #27]
    a410:	4619      	mov	r1, r3
    a412:	69f8      	ldr	r0, [r7, #28]
    a414:	4b5c      	ldr	r3, [pc, #368]	; (a588 <_usb_d_dev_handle_trfail+0x1ac>)
    a416:	4798      	blx	r3
    a418:	4603      	mov	r3, r0
    a41a:	e005      	b.n	a428 <_usb_d_dev_handle_trfail+0x4c>
    a41c:	7efb      	ldrb	r3, [r7, #27]
    a41e:	4619      	mov	r1, r3
    a420:	69f8      	ldr	r0, [r7, #28]
    a422:	4b5a      	ldr	r3, [pc, #360]	; (a58c <_usb_d_dev_handle_trfail+0x1b0>)
    a424:	4798      	blx	r3
    a426:	4603      	mov	r3, r0
    a428:	74fb      	strb	r3, [r7, #19]
	    = bank_n ? hri_usbendpoint_read_EPCFG_EPTYPE1_bf(hw, epn) : hri_usbendpoint_read_EPCFG_EPTYPE0_bf(hw, epn);
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    a42a:	687b      	ldr	r3, [r7, #4]
    a42c:	7cdb      	ldrb	r3, [r3, #19]
    a42e:	f003 0307 	and.w	r3, r3, #7
    a432:	b2db      	uxtb	r3, r3
    a434:	2b01      	cmp	r3, #1
    a436:	bf0c      	ite	eq
    a438:	2301      	moveq	r3, #1
    a43a:	2300      	movne	r3, #0
    a43c:	74bb      	strb	r3, [r7, #18]
	USB_DEVICE_STATUS_BK_Type st;
	st.reg = bank[bank_n].STATUS_BK.reg;
    a43e:	78fb      	ldrb	r3, [r7, #3]
    a440:	011b      	lsls	r3, r3, #4
    a442:	697a      	ldr	r2, [r7, #20]
    a444:	4413      	add	r3, r2
    a446:	7a9b      	ldrb	r3, [r3, #10]
    a448:	b2db      	uxtb	r3, r3
    a44a:	733b      	strb	r3, [r7, #12]

	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    a44c:	7cfb      	ldrb	r3, [r7, #19]
    a44e:	2b02      	cmp	r3, #2
    a450:	d12f      	bne.n	a4b2 <_usb_d_dev_handle_trfail+0xd6>
    a452:	7b3b      	ldrb	r3, [r7, #12]
    a454:	f003 0301 	and.w	r3, r3, #1
    a458:	b2db      	uxtb	r3, r3
    a45a:	2b00      	cmp	r3, #0
    a45c:	d029      	beq.n	a4b2 <_usb_d_dev_handle_trfail+0xd6>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    a45e:	78fb      	ldrb	r3, [r7, #3]
    a460:	011b      	lsls	r3, r3, #4
    a462:	697a      	ldr	r2, [r7, #20]
    a464:	441a      	add	r2, r3
    a466:	7a93      	ldrb	r3, [r2, #10]
    a468:	f36f 0300 	bfc	r3, #0, #1
    a46c:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a46e:	78fb      	ldrb	r3, [r7, #3]
    a470:	f107 0220 	add.w	r2, r7, #32
    a474:	4413      	add	r3, r2
    a476:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a47a:	7efb      	ldrb	r3, [r7, #27]
    a47c:	4619      	mov	r1, r3
    a47e:	69f8      	ldr	r0, [r7, #28]
    a480:	4b43      	ldr	r3, [pc, #268]	; (a590 <_usb_d_dev_handle_trfail+0x1b4>)
    a482:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a484:	78fb      	ldrb	r3, [r7, #3]
    a486:	f107 0220 	add.w	r2, r7, #32
    a48a:	4413      	add	r3, r2
    a48c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a490:	7efb      	ldrb	r3, [r7, #27]
    a492:	4619      	mov	r1, r3
    a494:	69f8      	ldr	r0, [r7, #28]
    a496:	4b3f      	ldr	r3, [pc, #252]	; (a594 <_usb_d_dev_handle_trfail+0x1b8>)
    a498:	4798      	blx	r3
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    a49a:	78fb      	ldrb	r3, [r7, #3]
    a49c:	2b00      	cmp	r3, #0
    a49e:	bf14      	ite	ne
    a4a0:	2301      	movne	r3, #1
    a4a2:	2300      	moveq	r3, #0
    a4a4:	b2db      	uxtb	r3, r3
    a4a6:	2204      	movs	r2, #4
    a4a8:	4619      	mov	r1, r3
    a4aa:	6878      	ldr	r0, [r7, #4]
    a4ac:	4b3a      	ldr	r3, [pc, #232]	; (a598 <_usb_d_dev_handle_trfail+0x1bc>)
    a4ae:	4798      	blx	r3
	} else {
		_usbd_ep_clear_bank_status(epn, bank_n);
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
	}
}
    a4b0:	e062      	b.n	a578 <_usb_d_dev_handle_trfail+0x19c>
	} else if (st.bit.ERRORFLOW) {
    a4b2:	7b3b      	ldrb	r3, [r7, #12]
    a4b4:	f003 0302 	and.w	r3, r3, #2
    a4b8:	b2db      	uxtb	r3, r3
    a4ba:	2b00      	cmp	r3, #0
    a4bc:	d040      	beq.n	a540 <_usb_d_dev_handle_trfail+0x164>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    a4be:	78fb      	ldrb	r3, [r7, #3]
    a4c0:	011b      	lsls	r3, r3, #4
    a4c2:	697a      	ldr	r2, [r7, #20]
    a4c4:	441a      	add	r2, r3
    a4c6:	7a93      	ldrb	r3, [r2, #10]
    a4c8:	f36f 0341 	bfc	r3, #1, #1
    a4cc:	7293      	strb	r3, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a4ce:	78fb      	ldrb	r3, [r7, #3]
    a4d0:	f107 0220 	add.w	r2, r7, #32
    a4d4:	4413      	add	r3, r2
    a4d6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a4da:	7efb      	ldrb	r3, [r7, #27]
    a4dc:	4619      	mov	r1, r3
    a4de:	69f8      	ldr	r0, [r7, #28]
    a4e0:	4b2b      	ldr	r3, [pc, #172]	; (a590 <_usb_d_dev_handle_trfail+0x1b4>)
    a4e2:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a4e4:	78fb      	ldrb	r3, [r7, #3]
    a4e6:	f107 0220 	add.w	r2, r7, #32
    a4ea:	4413      	add	r3, r2
    a4ec:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a4f0:	7efb      	ldrb	r3, [r7, #27]
    a4f2:	4619      	mov	r1, r3
    a4f4:	69f8      	ldr	r0, [r7, #28]
    a4f6:	4b27      	ldr	r3, [pc, #156]	; (a594 <_usb_d_dev_handle_trfail+0x1b8>)
    a4f8:	4798      	blx	r3
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    a4fa:	7cbb      	ldrb	r3, [r7, #18]
    a4fc:	2b00      	cmp	r3, #0
    a4fe:	d03b      	beq.n	a578 <_usb_d_dev_handle_trfail+0x19c>
    a500:	687b      	ldr	r3, [r7, #4]
    a502:	7cdb      	ldrb	r3, [r3, #19]
    a504:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a508:	b2db      	uxtb	r3, r3
    a50a:	2b00      	cmp	r3, #0
    a50c:	d034      	beq.n	a578 <_usb_d_dev_handle_trfail+0x19c>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    a50e:	687b      	ldr	r3, [r7, #4]
    a510:	7cdb      	ldrb	r3, [r3, #19]
    a512:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a516:	b2db      	uxtb	r3, r3
    a518:	461a      	mov	r2, r3
    a51a:	78fb      	ldrb	r3, [r7, #3]
    a51c:	4293      	cmp	r3, r2
    a51e:	d02b      	beq.n	a578 <_usb_d_dev_handle_trfail+0x19c>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    a520:	687b      	ldr	r3, [r7, #4]
    a522:	7cdb      	ldrb	r3, [r3, #19]
    a524:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    a528:	b2db      	uxtb	r3, r3
    a52a:	2b00      	cmp	r3, #0
    a52c:	bf14      	ite	ne
    a52e:	2301      	movne	r3, #1
    a530:	2300      	moveq	r3, #0
    a532:	b2db      	uxtb	r3, r3
    a534:	2200      	movs	r2, #0
    a536:	4619      	mov	r1, r3
    a538:	6878      	ldr	r0, [r7, #4]
    a53a:	4b17      	ldr	r3, [pc, #92]	; (a598 <_usb_d_dev_handle_trfail+0x1bc>)
    a53c:	4798      	blx	r3
}
    a53e:	e01b      	b.n	a578 <_usb_d_dev_handle_trfail+0x19c>
		_usbd_ep_clear_bank_status(epn, bank_n);
    a540:	78fa      	ldrb	r2, [r7, #3]
    a542:	7efb      	ldrb	r3, [r7, #27]
    a544:	4611      	mov	r1, r2
    a546:	4618      	mov	r0, r3
    a548:	4b14      	ldr	r3, [pc, #80]	; (a59c <_usb_d_dev_handle_trfail+0x1c0>)
    a54a:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    a54c:	78fb      	ldrb	r3, [r7, #3]
    a54e:	f107 0220 	add.w	r2, r7, #32
    a552:	4413      	add	r3, r2
    a554:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a558:	7efb      	ldrb	r3, [r7, #27]
    a55a:	4619      	mov	r1, r3
    a55c:	69f8      	ldr	r0, [r7, #28]
    a55e:	4b0c      	ldr	r3, [pc, #48]	; (a590 <_usb_d_dev_handle_trfail+0x1b4>)
    a560:	4798      	blx	r3
		hri_usbendpoint_clear_EPINTEN_reg(hw, epn, fail[bank_n]);
    a562:	78fb      	ldrb	r3, [r7, #3]
    a564:	f107 0220 	add.w	r2, r7, #32
    a568:	4413      	add	r3, r2
    a56a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
    a56e:	7efb      	ldrb	r3, [r7, #27]
    a570:	4619      	mov	r1, r3
    a572:	69f8      	ldr	r0, [r7, #28]
    a574:	4b07      	ldr	r3, [pc, #28]	; (a594 <_usb_d_dev_handle_trfail+0x1b8>)
    a576:	4798      	blx	r3
}
    a578:	bf00      	nop
    a57a:	3720      	adds	r7, #32
    a57c:	46bd      	mov	sp, r7
    a57e:	bd80      	pop	{r7, pc}
    a580:	00013db0 	.word	0x00013db0
    a584:	20000ff8 	.word	0x20000ff8
    a588:	00009145 	.word	0x00009145
    a58c:	00009115 	.word	0x00009115
    a590:	00008fe9 	.word	0x00008fe9
    a594:	000090e9 	.word	0x000090e9
    a598:	0000b155 	.word	0x0000b155
    a59c:	000099d1 	.word	0x000099d1

0000a5a0 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a5a0:	b580      	push	{r7, lr}
    a5a2:	b082      	sub	sp, #8
    a5a4:	af00      	add	r7, sp, #0
    a5a6:	6078      	str	r0, [r7, #4]
    a5a8:	460b      	mov	r3, r1
    a5aa:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a5ac:	78fb      	ldrb	r3, [r7, #3]
    a5ae:	f003 0310 	and.w	r3, r3, #16
    a5b2:	2b00      	cmp	r3, #0
    a5b4:	d003      	beq.n	a5be <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
    a5b6:	6878      	ldr	r0, [r7, #4]
    a5b8:	4b0c      	ldr	r3, [pc, #48]	; (a5ec <_usb_d_dev_trans_setup_isr+0x4c>)
    a5ba:	4798      	blx	r3
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
		_usb_d_dev_handle_stall(ept, 1);
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
		_usb_d_dev_handle_stall(ept, 0);
	}
}
    a5bc:	e012      	b.n	a5e4 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a5be:	78fb      	ldrb	r3, [r7, #3]
    a5c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a5c4:	2b00      	cmp	r3, #0
    a5c6:	d004      	beq.n	a5d2 <_usb_d_dev_trans_setup_isr+0x32>
		_usb_d_dev_handle_stall(ept, 1);
    a5c8:	2101      	movs	r1, #1
    a5ca:	6878      	ldr	r0, [r7, #4]
    a5cc:	4b08      	ldr	r3, [pc, #32]	; (a5f0 <_usb_d_dev_trans_setup_isr+0x50>)
    a5ce:	4798      	blx	r3
}
    a5d0:	e008      	b.n	a5e4 <_usb_d_dev_trans_setup_isr+0x44>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a5d2:	78fb      	ldrb	r3, [r7, #3]
    a5d4:	f003 0320 	and.w	r3, r3, #32
    a5d8:	2b00      	cmp	r3, #0
    a5da:	d003      	beq.n	a5e4 <_usb_d_dev_trans_setup_isr+0x44>
		_usb_d_dev_handle_stall(ept, 0);
    a5dc:	2100      	movs	r1, #0
    a5de:	6878      	ldr	r0, [r7, #4]
    a5e0:	4b03      	ldr	r3, [pc, #12]	; (a5f0 <_usb_d_dev_trans_setup_isr+0x50>)
    a5e2:	4798      	blx	r3
}
    a5e4:	bf00      	nop
    a5e6:	3708      	adds	r7, #8
    a5e8:	46bd      	mov	sp, r7
    a5ea:	bd80      	pop	{r7, pc}
    a5ec:	0000a2c1 	.word	0x0000a2c1
    a5f0:	0000a399 	.word	0x0000a399

0000a5f4 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a5f4:	b580      	push	{r7, lr}
    a5f6:	b082      	sub	sp, #8
    a5f8:	af00      	add	r7, sp, #0
    a5fa:	6078      	str	r0, [r7, #4]
    a5fc:	460b      	mov	r3, r1
    a5fe:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    a600:	78fb      	ldrb	r3, [r7, #3]
    a602:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a606:	2b00      	cmp	r3, #0
    a608:	d004      	beq.n	a614 <_usb_d_dev_trans_in_isr+0x20>
		_usb_d_dev_handle_stall(ept, 1);
    a60a:	2101      	movs	r1, #1
    a60c:	6878      	ldr	r0, [r7, #4]
    a60e:	4b1a      	ldr	r3, [pc, #104]	; (a678 <_usb_d_dev_trans_in_isr+0x84>)
    a610:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 0);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a612:	e02c      	b.n	a66e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a614:	78fb      	ldrb	r3, [r7, #3]
    a616:	f003 0308 	and.w	r3, r3, #8
    a61a:	2b00      	cmp	r3, #0
    a61c:	d004      	beq.n	a628 <_usb_d_dev_trans_in_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 1);
    a61e:	2101      	movs	r1, #1
    a620:	6878      	ldr	r0, [r7, #4]
    a622:	4b16      	ldr	r3, [pc, #88]	; (a67c <_usb_d_dev_trans_in_isr+0x88>)
    a624:	4798      	blx	r3
}
    a626:	e022      	b.n	a66e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    a628:	78fb      	ldrb	r3, [r7, #3]
    a62a:	f003 0302 	and.w	r3, r3, #2
    a62e:	2b00      	cmp	r3, #0
    a630:	d004      	beq.n	a63c <_usb_d_dev_trans_in_isr+0x48>
		_usb_d_dev_in_next(ept, true);
    a632:	2101      	movs	r1, #1
    a634:	6878      	ldr	r0, [r7, #4]
    a636:	4b12      	ldr	r3, [pc, #72]	; (a680 <_usb_d_dev_trans_in_isr+0x8c>)
    a638:	4798      	blx	r3
}
    a63a:	e018      	b.n	a66e <_usb_d_dev_trans_in_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a63c:	687b      	ldr	r3, [r7, #4]
    a63e:	7cdb      	ldrb	r3, [r3, #19]
    a640:	f003 0307 	and.w	r3, r3, #7
    a644:	b2db      	uxtb	r3, r3
    a646:	2b01      	cmp	r3, #1
    a648:	d111      	bne.n	a66e <_usb_d_dev_trans_in_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a64a:	78fb      	ldrb	r3, [r7, #3]
    a64c:	f003 0304 	and.w	r3, r3, #4
    a650:	2b00      	cmp	r3, #0
    a652:	d004      	beq.n	a65e <_usb_d_dev_trans_in_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 0);
    a654:	2100      	movs	r1, #0
    a656:	6878      	ldr	r0, [r7, #4]
    a658:	4b08      	ldr	r3, [pc, #32]	; (a67c <_usb_d_dev_trans_in_isr+0x88>)
    a65a:	4798      	blx	r3
}
    a65c:	e007      	b.n	a66e <_usb_d_dev_trans_in_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a65e:	78fb      	ldrb	r3, [r7, #3]
    a660:	f003 0310 	and.w	r3, r3, #16
    a664:	2b00      	cmp	r3, #0
    a666:	d002      	beq.n	a66e <_usb_d_dev_trans_in_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a668:	6878      	ldr	r0, [r7, #4]
    a66a:	4b06      	ldr	r3, [pc, #24]	; (a684 <_usb_d_dev_trans_in_isr+0x90>)
    a66c:	4798      	blx	r3
}
    a66e:	bf00      	nop
    a670:	3708      	adds	r7, #8
    a672:	46bd      	mov	sp, r7
    a674:	bd80      	pop	{r7, pc}
    a676:	bf00      	nop
    a678:	0000a399 	.word	0x0000a399
    a67c:	0000a3dd 	.word	0x0000a3dd
    a680:	00009de5 	.word	0x00009de5
    a684:	0000a2c1 	.word	0x0000a2c1

0000a688 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
    a688:	b580      	push	{r7, lr}
    a68a:	b082      	sub	sp, #8
    a68c:	af00      	add	r7, sp, #0
    a68e:	6078      	str	r0, [r7, #4]
    a690:	460b      	mov	r3, r1
    a692:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    a694:	78fb      	ldrb	r3, [r7, #3]
    a696:	f003 0320 	and.w	r3, r3, #32
    a69a:	2b00      	cmp	r3, #0
    a69c:	d004      	beq.n	a6a8 <_usb_d_dev_trans_out_isr+0x20>
		_usb_d_dev_handle_stall(ept, 0);
    a69e:	2100      	movs	r1, #0
    a6a0:	6878      	ldr	r0, [r7, #4]
    a6a2:	4b1a      	ldr	r3, [pc, #104]	; (a70c <_usb_d_dev_trans_out_isr+0x84>)
    a6a4:	4798      	blx	r3
			_usb_d_dev_handle_trfail(ept, 1);
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
    a6a6:	e02c      	b.n	a702 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    a6a8:	78fb      	ldrb	r3, [r7, #3]
    a6aa:	f003 0304 	and.w	r3, r3, #4
    a6ae:	2b00      	cmp	r3, #0
    a6b0:	d004      	beq.n	a6bc <_usb_d_dev_trans_out_isr+0x34>
		_usb_d_dev_handle_trfail(ept, 0);
    a6b2:	2100      	movs	r1, #0
    a6b4:	6878      	ldr	r0, [r7, #4]
    a6b6:	4b16      	ldr	r3, [pc, #88]	; (a710 <_usb_d_dev_trans_out_isr+0x88>)
    a6b8:	4798      	blx	r3
}
    a6ba:	e022      	b.n	a702 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    a6bc:	78fb      	ldrb	r3, [r7, #3]
    a6be:	f003 0301 	and.w	r3, r3, #1
    a6c2:	2b00      	cmp	r3, #0
    a6c4:	d004      	beq.n	a6d0 <_usb_d_dev_trans_out_isr+0x48>
		_usb_d_dev_out_next(ept, true);
    a6c6:	2101      	movs	r1, #1
    a6c8:	6878      	ldr	r0, [r7, #4]
    a6ca:	4b12      	ldr	r3, [pc, #72]	; (a714 <_usb_d_dev_trans_out_isr+0x8c>)
    a6cc:	4798      	blx	r3
}
    a6ce:	e018      	b.n	a702 <_usb_d_dev_trans_out_isr+0x7a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    a6d0:	687b      	ldr	r3, [r7, #4]
    a6d2:	7cdb      	ldrb	r3, [r3, #19]
    a6d4:	f003 0307 	and.w	r3, r3, #7
    a6d8:	b2db      	uxtb	r3, r3
    a6da:	2b01      	cmp	r3, #1
    a6dc:	d111      	bne.n	a702 <_usb_d_dev_trans_out_isr+0x7a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    a6de:	78fb      	ldrb	r3, [r7, #3]
    a6e0:	f003 0308 	and.w	r3, r3, #8
    a6e4:	2b00      	cmp	r3, #0
    a6e6:	d004      	beq.n	a6f2 <_usb_d_dev_trans_out_isr+0x6a>
			_usb_d_dev_handle_trfail(ept, 1);
    a6e8:	2101      	movs	r1, #1
    a6ea:	6878      	ldr	r0, [r7, #4]
    a6ec:	4b08      	ldr	r3, [pc, #32]	; (a710 <_usb_d_dev_trans_out_isr+0x88>)
    a6ee:	4798      	blx	r3
}
    a6f0:	e007      	b.n	a702 <_usb_d_dev_trans_out_isr+0x7a>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    a6f2:	78fb      	ldrb	r3, [r7, #3]
    a6f4:	f003 0310 	and.w	r3, r3, #16
    a6f8:	2b00      	cmp	r3, #0
    a6fa:	d002      	beq.n	a702 <_usb_d_dev_trans_out_isr+0x7a>
			_usb_d_dev_handle_setup(ept);
    a6fc:	6878      	ldr	r0, [r7, #4]
    a6fe:	4b06      	ldr	r3, [pc, #24]	; (a718 <_usb_d_dev_trans_out_isr+0x90>)
    a700:	4798      	blx	r3
}
    a702:	bf00      	nop
    a704:	3708      	adds	r7, #8
    a706:	46bd      	mov	sp, r7
    a708:	bd80      	pop	{r7, pc}
    a70a:	bf00      	nop
    a70c:	0000a399 	.word	0x0000a399
    a710:	0000a3dd 	.word	0x0000a3dd
    a714:	00009ffd 	.word	0x00009ffd
    a718:	0000a2c1 	.word	0x0000a2c1

0000a71c <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
    a71c:	b580      	push	{r7, lr}
    a71e:	b084      	sub	sp, #16
    a720:	af00      	add	r7, sp, #0
    a722:	6078      	str	r0, [r7, #4]
    a724:	6039      	str	r1, [r7, #0]
	Usb *hw = USB;
    a726:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a72a:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
    a72c:	683b      	ldr	r3, [r7, #0]
    a72e:	7c9b      	ldrb	r3, [r3, #18]
    a730:	f003 030f 	and.w	r3, r3, #15
    a734:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
    a736:	7afb      	ldrb	r3, [r7, #11]
    a738:	2201      	movs	r2, #1
    a73a:	409a      	lsls	r2, r3
    a73c:	687b      	ldr	r3, [r7, #4]
    a73e:	4013      	ands	r3, r2
    a740:	2b00      	cmp	r3, #0
    a742:	d03d      	beq.n	a7c0 <_usb_d_dev_handle_eps+0xa4>
		return;
	}
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    a744:	7afb      	ldrb	r3, [r7, #11]
    a746:	68fa      	ldr	r2, [r7, #12]
    a748:	3308      	adds	r3, #8
    a74a:	015b      	lsls	r3, r3, #5
    a74c:	4413      	add	r3, r2
    a74e:	3307      	adds	r3, #7
    a750:	781b      	ldrb	r3, [r3, #0]
    a752:	72bb      	strb	r3, [r7, #10]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    a754:	7afb      	ldrb	r3, [r7, #11]
    a756:	68fa      	ldr	r2, [r7, #12]
    a758:	015b      	lsls	r3, r3, #5
    a75a:	4413      	add	r3, r2
    a75c:	f203 1309 	addw	r3, r3, #265	; 0x109
    a760:	781b      	ldrb	r3, [r3, #0]
    a762:	727b      	strb	r3, [r7, #9]
	flags &= mask;
    a764:	7aba      	ldrb	r2, [r7, #10]
    a766:	7a7b      	ldrb	r3, [r7, #9]
    a768:	4013      	ands	r3, r2
    a76a:	72bb      	strb	r3, [r7, #10]
	if (flags) {
    a76c:	7abb      	ldrb	r3, [r7, #10]
    a76e:	2b00      	cmp	r3, #0
    a770:	d027      	beq.n	a7c2 <_usb_d_dev_handle_eps+0xa6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    a772:	683b      	ldr	r3, [r7, #0]
    a774:	7cdb      	ldrb	r3, [r3, #19]
    a776:	f003 0307 	and.w	r3, r3, #7
    a77a:	b2db      	uxtb	r3, r3
    a77c:	2b01      	cmp	r3, #1
    a77e:	d10c      	bne.n	a79a <_usb_d_dev_handle_eps+0x7e>
    a780:	683b      	ldr	r3, [r7, #0]
    a782:	7cdb      	ldrb	r3, [r3, #19]
    a784:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a788:	b2db      	uxtb	r3, r3
    a78a:	2b00      	cmp	r3, #0
    a78c:	d105      	bne.n	a79a <_usb_d_dev_handle_eps+0x7e>
			_usb_d_dev_trans_setup_isr(ept, flags);
    a78e:	7abb      	ldrb	r3, [r7, #10]
    a790:	4619      	mov	r1, r3
    a792:	6838      	ldr	r0, [r7, #0]
    a794:	4b0c      	ldr	r3, [pc, #48]	; (a7c8 <_usb_d_dev_handle_eps+0xac>)
    a796:	4798      	blx	r3
    a798:	e013      	b.n	a7c2 <_usb_d_dev_handle_eps+0xa6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    a79a:	683b      	ldr	r3, [r7, #0]
    a79c:	7cdb      	ldrb	r3, [r3, #19]
    a79e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a7a2:	b2db      	uxtb	r3, r3
    a7a4:	2b00      	cmp	r3, #0
    a7a6:	d005      	beq.n	a7b4 <_usb_d_dev_handle_eps+0x98>
			_usb_d_dev_trans_in_isr(ept, flags);
    a7a8:	7abb      	ldrb	r3, [r7, #10]
    a7aa:	4619      	mov	r1, r3
    a7ac:	6838      	ldr	r0, [r7, #0]
    a7ae:	4b07      	ldr	r3, [pc, #28]	; (a7cc <_usb_d_dev_handle_eps+0xb0>)
    a7b0:	4798      	blx	r3
    a7b2:	e006      	b.n	a7c2 <_usb_d_dev_handle_eps+0xa6>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
    a7b4:	7abb      	ldrb	r3, [r7, #10]
    a7b6:	4619      	mov	r1, r3
    a7b8:	6838      	ldr	r0, [r7, #0]
    a7ba:	4b05      	ldr	r3, [pc, #20]	; (a7d0 <_usb_d_dev_handle_eps+0xb4>)
    a7bc:	4798      	blx	r3
    a7be:	e000      	b.n	a7c2 <_usb_d_dev_handle_eps+0xa6>
		return;
    a7c0:	bf00      	nop
		}
	}
}
    a7c2:	3710      	adds	r7, #16
    a7c4:	46bd      	mov	sp, r7
    a7c6:	bd80      	pop	{r7, pc}
    a7c8:	0000a5a1 	.word	0x0000a5a1
    a7cc:	0000a5f5 	.word	0x0000a5f5
    a7d0:	0000a689 	.word	0x0000a689

0000a7d4 <_usb_d_dev_handler>:
/**
 * \brief USB device interrupt handler
 * \param[in] unused The parameter is not used
 */
static void _usb_d_dev_handler(void)
{
    a7d4:	b580      	push	{r7, lr}
    a7d6:	b084      	sub	sp, #16
    a7d8:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a7da:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a7de:	60bb      	str	r3, [r7, #8]
	uint8_t i;

	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    a7e0:	68bb      	ldr	r3, [r7, #8]
    a7e2:	8c1b      	ldrh	r3, [r3, #32]
    a7e4:	80fb      	strh	r3, [r7, #6]
	if (0 == epint) {
    a7e6:	88fb      	ldrh	r3, [r7, #6]
    a7e8:	2b00      	cmp	r3, #0
    a7ea:	d104      	bne.n	a7f6 <_usb_d_dev_handler+0x22>
		if (_usb_d_dev_handle_nep()) {
    a7ec:	4b13      	ldr	r3, [pc, #76]	; (a83c <_usb_d_dev_handler+0x68>)
    a7ee:	4798      	blx	r3
    a7f0:	4603      	mov	r3, r0
    a7f2:	2b00      	cmp	r3, #0
    a7f4:	d11e      	bne.n	a834 <_usb_d_dev_handler+0x60>
			return;
		}
	}
	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
    a7f6:	2300      	movs	r3, #0
    a7f8:	73fb      	strb	r3, [r7, #15]
    a7fa:	e017      	b.n	a82c <_usb_d_dev_handler+0x58>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
    a7fc:	7bfa      	ldrb	r2, [r7, #15]
    a7fe:	4613      	mov	r3, r2
    a800:	009b      	lsls	r3, r3, #2
    a802:	4413      	add	r3, r2
    a804:	009b      	lsls	r3, r3, #2
    a806:	3310      	adds	r3, #16
    a808:	4a0d      	ldr	r2, [pc, #52]	; (a840 <_usb_d_dev_handler+0x6c>)
    a80a:	4413      	add	r3, r2
    a80c:	3304      	adds	r3, #4
    a80e:	603b      	str	r3, [r7, #0]
		if (ept->ep == 0xFF) {
    a810:	683b      	ldr	r3, [r7, #0]
    a812:	7c9b      	ldrb	r3, [r3, #18]
    a814:	2bff      	cmp	r3, #255	; 0xff
    a816:	d005      	beq.n	a824 <_usb_d_dev_handler+0x50>
			continue;
		}
		_usb_d_dev_handle_eps(epint, ept);
    a818:	88fb      	ldrh	r3, [r7, #6]
    a81a:	6839      	ldr	r1, [r7, #0]
    a81c:	4618      	mov	r0, r3
    a81e:	4b09      	ldr	r3, [pc, #36]	; (a844 <_usb_d_dev_handler+0x70>)
    a820:	4798      	blx	r3
    a822:	e000      	b.n	a826 <_usb_d_dev_handler+0x52>
			continue;
    a824:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
    a826:	7bfb      	ldrb	r3, [r7, #15]
    a828:	3301      	adds	r3, #1
    a82a:	73fb      	strb	r3, [r7, #15]
    a82c:	7bfb      	ldrb	r3, [r7, #15]
    a82e:	2b08      	cmp	r3, #8
    a830:	d9e4      	bls.n	a7fc <_usb_d_dev_handler+0x28>
    a832:	e000      	b.n	a836 <_usb_d_dev_handler+0x62>
			return;
    a834:	bf00      	nop
	}
}
    a836:	3710      	adds	r7, #16
    a838:	46bd      	mov	sp, r7
    a83a:	bd80      	pop	{r7, pc}
    a83c:	00009d2d 	.word	0x00009d2d
    a840:	20000f30 	.word	0x20000f30
    a844:	0000a71d 	.word	0x0000a71d

0000a848 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
    a848:	b580      	push	{r7, lr}
    a84a:	b082      	sub	sp, #8
    a84c:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_D_N_EP; i++) {
    a84e:	2300      	movs	r3, #0
    a850:	71fb      	strb	r3, [r7, #7]
    a852:	e023      	b.n	a89c <_usb_d_dev_reset_epts+0x54>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    a854:	79fa      	ldrb	r2, [r7, #7]
    a856:	4613      	mov	r3, r2
    a858:	009b      	lsls	r3, r3, #2
    a85a:	4413      	add	r3, r2
    a85c:	009b      	lsls	r3, r3, #2
    a85e:	3310      	adds	r3, #16
    a860:	4a14      	ldr	r2, [pc, #80]	; (a8b4 <_usb_d_dev_reset_epts+0x6c>)
    a862:	4413      	add	r3, r2
    a864:	3304      	adds	r3, #4
    a866:	2103      	movs	r1, #3
    a868:	4618      	mov	r0, r3
    a86a:	4b13      	ldr	r3, [pc, #76]	; (a8b8 <_usb_d_dev_reset_epts+0x70>)
    a86c:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
    a86e:	79fa      	ldrb	r2, [r7, #7]
    a870:	4910      	ldr	r1, [pc, #64]	; (a8b4 <_usb_d_dev_reset_epts+0x6c>)
    a872:	4613      	mov	r3, r2
    a874:	009b      	lsls	r3, r3, #2
    a876:	4413      	add	r3, r2
    a878:	009b      	lsls	r3, r3, #2
    a87a:	440b      	add	r3, r1
    a87c:	3326      	adds	r3, #38	; 0x26
    a87e:	22ff      	movs	r2, #255	; 0xff
    a880:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
    a882:	79fa      	ldrb	r2, [r7, #7]
    a884:	490b      	ldr	r1, [pc, #44]	; (a8b4 <_usb_d_dev_reset_epts+0x6c>)
    a886:	4613      	mov	r3, r2
    a888:	009b      	lsls	r3, r3, #2
    a88a:	4413      	add	r3, r2
    a88c:	009b      	lsls	r3, r3, #2
    a88e:	440b      	add	r3, r1
    a890:	3327      	adds	r3, #39	; 0x27
    a892:	2200      	movs	r2, #0
    a894:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
    a896:	79fb      	ldrb	r3, [r7, #7]
    a898:	3301      	adds	r3, #1
    a89a:	71fb      	strb	r3, [r7, #7]
    a89c:	79fb      	ldrb	r3, [r7, #7]
    a89e:	2b08      	cmp	r3, #8
    a8a0:	d9d8      	bls.n	a854 <_usb_d_dev_reset_epts+0xc>
	}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    a8a2:	22a0      	movs	r2, #160	; 0xa0
    a8a4:	2100      	movs	r1, #0
    a8a6:	4805      	ldr	r0, [pc, #20]	; (a8bc <_usb_d_dev_reset_epts+0x74>)
    a8a8:	4b05      	ldr	r3, [pc, #20]	; (a8c0 <_usb_d_dev_reset_epts+0x78>)
    a8aa:	4798      	blx	r3
}
    a8ac:	bf00      	nop
    a8ae:	3708      	adds	r7, #8
    a8b0:	46bd      	mov	sp, r7
    a8b2:	bd80      	pop	{r7, pc}
    a8b4:	20000f30 	.word	0x20000f30
    a8b8:	0000b10d 	.word	0x0000b10d
    a8bc:	20000ff8 	.word	0x20000ff8
    a8c0:	00013745 	.word	0x00013745

0000a8c4 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
    a8c4:	b580      	push	{r7, lr}
    a8c6:	b084      	sub	sp, #16
    a8c8:	af00      	add	r7, sp, #0
	Usb *         hw         = USB;
    a8ca:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a8ce:	60fb      	str	r3, [r7, #12]
	uint8_t       speed      = CONF_USB_D_SPEED;
    a8d0:	2301      	movs	r3, #1
    a8d2:	72fb      	strb	r3, [r7, #11]
	const uint8_t spdconf[4] = {
    a8d4:	2304      	movs	r3, #4
    a8d6:	713b      	strb	r3, [r7, #4]
    a8d8:	2300      	movs	r3, #0
    a8da:	717b      	strb	r3, [r7, #5]
    a8dc:	2300      	movs	r3, #0
    a8de:	71bb      	strb	r3, [r7, #6]
    a8e0:	2300      	movs	r3, #0
    a8e2:	71fb      	strb	r3, [r7, #7]
	    USB_DEVICE_CTRLB_SPDCONF(0), /* FS */
	    0,
	    0 /* Reserved */
	};

	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    a8e4:	2101      	movs	r1, #1
    a8e6:	68f8      	ldr	r0, [r7, #12]
    a8e8:	4b26      	ldr	r3, [pc, #152]	; (a984 <_usb_d_dev_init+0xc0>)
    a8ea:	4798      	blx	r3
    a8ec:	4603      	mov	r3, r0
    a8ee:	f083 0301 	eor.w	r3, r3, #1
    a8f2:	b2db      	uxtb	r3, r3
    a8f4:	2b00      	cmp	r3, #0
    a8f6:	d011      	beq.n	a91c <_usb_d_dev_init+0x58>
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    a8f8:	2102      	movs	r1, #2
    a8fa:	68f8      	ldr	r0, [r7, #12]
    a8fc:	4b22      	ldr	r3, [pc, #136]	; (a988 <_usb_d_dev_init+0xc4>)
    a8fe:	4798      	blx	r3
    a900:	4603      	mov	r3, r0
    a902:	2b00      	cmp	r3, #0
    a904:	d006      	beq.n	a914 <_usb_d_dev_init+0x50>
			hri_usbdevice_clear_CTRLA_ENABLE_bit(hw);
    a906:	68f8      	ldr	r0, [r7, #12]
    a908:	4b20      	ldr	r3, [pc, #128]	; (a98c <_usb_d_dev_init+0xc8>)
    a90a:	4798      	blx	r3
			hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_ENABLE);
    a90c:	2102      	movs	r1, #2
    a90e:	68f8      	ldr	r0, [r7, #12]
    a910:	4b1f      	ldr	r3, [pc, #124]	; (a990 <_usb_d_dev_init+0xcc>)
    a912:	4798      	blx	r3
		}
		hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_SWRST);
    a914:	2101      	movs	r1, #1
    a916:	68f8      	ldr	r0, [r7, #12]
    a918:	4b1e      	ldr	r3, [pc, #120]	; (a994 <_usb_d_dev_init+0xd0>)
    a91a:	4798      	blx	r3
	}
	hri_usbdevice_wait_for_sync(hw, USB_SYNCBUSY_SWRST);
    a91c:	2101      	movs	r1, #1
    a91e:	68f8      	ldr	r0, [r7, #12]
    a920:	4b1b      	ldr	r3, [pc, #108]	; (a990 <_usb_d_dev_init+0xcc>)
    a922:	4798      	blx	r3

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    a924:	4b1c      	ldr	r3, [pc, #112]	; (a998 <_usb_d_dev_init+0xd4>)
    a926:	4a1d      	ldr	r2, [pc, #116]	; (a99c <_usb_d_dev_init+0xd8>)
    a928:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    a92a:	4b1b      	ldr	r3, [pc, #108]	; (a998 <_usb_d_dev_init+0xd4>)
    a92c:	4a1b      	ldr	r2, [pc, #108]	; (a99c <_usb_d_dev_init+0xd8>)
    a92e:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    a930:	4b19      	ldr	r3, [pc, #100]	; (a998 <_usb_d_dev_init+0xd4>)
    a932:	4a1a      	ldr	r2, [pc, #104]	; (a99c <_usb_d_dev_init+0xd8>)
    a934:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    a936:	4b18      	ldr	r3, [pc, #96]	; (a998 <_usb_d_dev_init+0xd4>)
    a938:	4a18      	ldr	r2, [pc, #96]	; (a99c <_usb_d_dev_init+0xd8>)
    a93a:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    a93c:	4b16      	ldr	r3, [pc, #88]	; (a998 <_usb_d_dev_init+0xd4>)
    a93e:	4a17      	ldr	r2, [pc, #92]	; (a99c <_usb_d_dev_init+0xd8>)
    a940:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
    a942:	4b17      	ldr	r3, [pc, #92]	; (a9a0 <_usb_d_dev_init+0xdc>)
    a944:	4798      	blx	r3

	_usb_load_calib();
    a946:	4b17      	ldr	r3, [pc, #92]	; (a9a4 <_usb_d_dev_init+0xe0>)
    a948:	4798      	blx	r3

	hri_usbdevice_write_CTRLA_reg(hw, USB_CTRLA_RUNSTDBY);
    a94a:	2104      	movs	r1, #4
    a94c:	68f8      	ldr	r0, [r7, #12]
    a94e:	4b11      	ldr	r3, [pc, #68]	; (a994 <_usb_d_dev_init+0xd0>)
    a950:	4798      	blx	r3
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    a952:	4b15      	ldr	r3, [pc, #84]	; (a9a8 <_usb_d_dev_init+0xe4>)
    a954:	4619      	mov	r1, r3
    a956:	68f8      	ldr	r0, [r7, #12]
    a958:	4b14      	ldr	r3, [pc, #80]	; (a9ac <_usb_d_dev_init+0xe8>)
    a95a:	4798      	blx	r3
	hri_usbdevice_write_CTRLB_reg(hw, spdconf[speed] | USB_DEVICE_CTRLB_DETACH);
    a95c:	7afb      	ldrb	r3, [r7, #11]
    a95e:	f107 0210 	add.w	r2, r7, #16
    a962:	4413      	add	r3, r2
    a964:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    a968:	f043 0301 	orr.w	r3, r3, #1
    a96c:	b2db      	uxtb	r3, r3
    a96e:	b29b      	uxth	r3, r3
    a970:	4619      	mov	r1, r3
    a972:	68f8      	ldr	r0, [r7, #12]
    a974:	4b0e      	ldr	r3, [pc, #56]	; (a9b0 <_usb_d_dev_init+0xec>)
    a976:	4798      	blx	r3

	return ERR_NONE;
    a978:	2300      	movs	r3, #0
}
    a97a:	4618      	mov	r0, r3
    a97c:	3710      	adds	r7, #16
    a97e:	46bd      	mov	sp, r7
    a980:	bd80      	pop	{r7, pc}
    a982:	bf00      	nop
    a984:	00008f5d 	.word	0x00008f5d
    a988:	000092ad 	.word	0x000092ad
    a98c:	00009281 	.word	0x00009281
    a990:	00008f33 	.word	0x00008f33
    a994:	000092dd 	.word	0x000092dd
    a998:	20000f30 	.word	0x20000f30
    a99c:	000093a5 	.word	0x000093a5
    a9a0:	0000a849 	.word	0x0000a849
    a9a4:	000093bd 	.word	0x000093bd
    a9a8:	20000ff8 	.word	0x20000ff8
    a9ac:	00009389 	.word	0x00009389
    a9b0:	0000934d 	.word	0x0000934d

0000a9b4 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USB_3_IRQn);
	NVIC_ClearPendingIRQ(USB_3_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
    a9b4:	b580      	push	{r7, lr}
    a9b6:	b082      	sub	sp, #8
    a9b8:	af00      	add	r7, sp, #0
	Usb *   hw = USB;
    a9ba:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    a9be:	607b      	str	r3, [r7, #4]
	uint8_t ctrla;

	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    a9c0:	2103      	movs	r1, #3
    a9c2:	6878      	ldr	r0, [r7, #4]
    a9c4:	4b17      	ldr	r3, [pc, #92]	; (aa24 <_usb_d_dev_enable+0x70>)
    a9c6:	4798      	blx	r3
    a9c8:	4603      	mov	r3, r0
    a9ca:	2b00      	cmp	r3, #0
    a9cc:	d002      	beq.n	a9d4 <_usb_d_dev_enable+0x20>
		return -USB_ERR_DENIED;
    a9ce:	f06f 0310 	mvn.w	r3, #16
    a9d2:	e023      	b.n	aa1c <_usb_d_dev_enable+0x68>
	}
	ctrla = hri_usbdevice_read_CTRLA_reg(hw);
    a9d4:	6878      	ldr	r0, [r7, #4]
    a9d6:	4b14      	ldr	r3, [pc, #80]	; (aa28 <_usb_d_dev_enable+0x74>)
    a9d8:	4798      	blx	r3
    a9da:	4603      	mov	r3, r0
    a9dc:	70fb      	strb	r3, [r7, #3]
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    a9de:	78fb      	ldrb	r3, [r7, #3]
    a9e0:	f003 0302 	and.w	r3, r3, #2
    a9e4:	2b00      	cmp	r3, #0
    a9e6:	d107      	bne.n	a9f8 <_usb_d_dev_enable+0x44>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    a9e8:	78fb      	ldrb	r3, [r7, #3]
    a9ea:	f043 0302 	orr.w	r3, r3, #2
    a9ee:	b2db      	uxtb	r3, r3
    a9f0:	4619      	mov	r1, r3
    a9f2:	6878      	ldr	r0, [r7, #4]
    a9f4:	4b0d      	ldr	r3, [pc, #52]	; (aa2c <_usb_d_dev_enable+0x78>)
    a9f6:	4798      	blx	r3
	}

	NVIC_EnableIRQ(USB_0_IRQn);
    a9f8:	2050      	movs	r0, #80	; 0x50
    a9fa:	4b0d      	ldr	r3, [pc, #52]	; (aa30 <_usb_d_dev_enable+0x7c>)
    a9fc:	4798      	blx	r3
	NVIC_EnableIRQ(USB_1_IRQn);
    a9fe:	2051      	movs	r0, #81	; 0x51
    aa00:	4b0b      	ldr	r3, [pc, #44]	; (aa30 <_usb_d_dev_enable+0x7c>)
    aa02:	4798      	blx	r3
	NVIC_EnableIRQ(USB_2_IRQn);
    aa04:	2052      	movs	r0, #82	; 0x52
    aa06:	4b0a      	ldr	r3, [pc, #40]	; (aa30 <_usb_d_dev_enable+0x7c>)
    aa08:	4798      	blx	r3
	NVIC_EnableIRQ(USB_3_IRQn);
    aa0a:	2053      	movs	r0, #83	; 0x53
    aa0c:	4b08      	ldr	r3, [pc, #32]	; (aa30 <_usb_d_dev_enable+0x7c>)
    aa0e:	4798      	blx	r3

	hri_usbdevice_set_INTEN_reg(hw,
    aa10:	f240 218d 	movw	r1, #653	; 0x28d
    aa14:	6878      	ldr	r0, [r7, #4]
    aa16:	4b07      	ldr	r3, [pc, #28]	; (aa34 <_usb_d_dev_enable+0x80>)
    aa18:	4798      	blx	r3
	                            USB_DEVICE_INTENSET_SOF | USB_DEVICE_INTENSET_EORST | USB_DEVICE_INTENSET_RAMACER
	                                | USB_D_SUSPEND_INT_FLAGS);

	return ERR_NONE;
    aa1a:	2300      	movs	r3, #0
}
    aa1c:	4618      	mov	r0, r3
    aa1e:	3708      	adds	r7, #8
    aa20:	46bd      	mov	sp, r7
    aa22:	bd80      	pop	{r7, pc}
    aa24:	00009257 	.word	0x00009257
    aa28:	00009305 	.word	0x00009305
    aa2c:	000092dd 	.word	0x000092dd
    aa30:	00008e69 	.word	0x00008e69
    aa34:	00009201 	.word	0x00009201

0000aa38 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
    aa38:	b580      	push	{r7, lr}
    aa3a:	af00      	add	r7, sp, #0
	hri_usbdevice_clear_CTRLB_DETACH_bit(USB);
    aa3c:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aa40:	4b01      	ldr	r3, [pc, #4]	; (aa48 <_usb_d_dev_attach+0x10>)
    aa42:	4798      	blx	r3
}
    aa44:	bf00      	nop
    aa46:	bd80      	pop	{r7, pc}
    aa48:	00009329 	.word	0x00009329

0000aa4c <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
    aa4c:	b580      	push	{r7, lr}
    aa4e:	b082      	sub	sp, #8
    aa50:	af00      	add	r7, sp, #0
    aa52:	4603      	mov	r3, r0
    aa54:	71fb      	strb	r3, [r7, #7]
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    aa56:	79fb      	ldrb	r3, [r7, #7]
    aa58:	f063 037f 	orn	r3, r3, #127	; 0x7f
    aa5c:	b2db      	uxtb	r3, r3
    aa5e:	4619      	mov	r1, r3
    aa60:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    aa64:	4b02      	ldr	r3, [pc, #8]	; (aa70 <_usb_d_dev_set_address+0x24>)
    aa66:	4798      	blx	r3
}
    aa68:	bf00      	nop
    aa6a:	3708      	adds	r7, #8
    aa6c:	46bd      	mov	sp, r7
    aa6e:	bd80      	pop	{r7, pc}
    aa70:	0000936b 	.word	0x0000936b

0000aa74 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
    aa74:	b590      	push	{r4, r7, lr}
    aa76:	b085      	sub	sp, #20
    aa78:	af00      	add	r7, sp, #0
    aa7a:	6078      	str	r0, [r7, #4]
	Usb *   hw  = USB;
    aa7c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    aa80:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    aa82:	687b      	ldr	r3, [r7, #4]
    aa84:	7c9b      	ldrb	r3, [r3, #18]
    aa86:	f003 030f 	and.w	r3, r3, #15
    aa8a:	72fb      	strb	r3, [r7, #11]

	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    aa8c:	687b      	ldr	r3, [r7, #4]
    aa8e:	68db      	ldr	r3, [r3, #12]
    aa90:	461a      	mov	r2, r3
    aa92:	7afb      	ldrb	r3, [r7, #11]
    aa94:	2100      	movs	r1, #0
    aa96:	4618      	mov	r0, r3
    aa98:	4b0f      	ldr	r3, [pc, #60]	; (aad8 <_usb_d_dev_trans_setup+0x64>)
    aa9a:	4798      	blx	r3
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    aa9c:	687b      	ldr	r3, [r7, #4]
    aa9e:	8a1b      	ldrh	r3, [r3, #16]
    aaa0:	461a      	mov	r2, r3
    aaa2:	7af8      	ldrb	r0, [r7, #11]
    aaa4:	2300      	movs	r3, #0
    aaa6:	2100      	movs	r1, #0
    aaa8:	4c0c      	ldr	r4, [pc, #48]	; (aadc <_usb_d_dev_trans_setup+0x68>)
    aaaa:	47a0      	blx	r4

	hri_usbendpoint_clear_EPSTATUS_reg(hw, epn, USB_DEVICE_EPSTATUS_STALLRQ(0x3) | USB_DEVICE_EPSTATUS_BK1RDY);
    aaac:	7afb      	ldrb	r3, [r7, #11]
    aaae:	22b0      	movs	r2, #176	; 0xb0
    aab0:	4619      	mov	r1, r3
    aab2:	68f8      	ldr	r0, [r7, #12]
    aab4:	4b0a      	ldr	r3, [pc, #40]	; (aae0 <_usb_d_dev_trans_setup+0x6c>)
    aab6:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, 0, false);
    aab8:	7afb      	ldrb	r3, [r7, #11]
    aaba:	2200      	movs	r2, #0
    aabc:	2100      	movs	r1, #0
    aabe:	4618      	mov	r0, r3
    aac0:	4b08      	ldr	r3, [pc, #32]	; (aae4 <_usb_d_dev_trans_setup+0x70>)
    aac2:	4798      	blx	r3

	hri_usbendpoint_set_EPINTEN_reg(hw, epn, USB_D_SETUP_INT_FLAGS);
    aac4:	7afb      	ldrb	r3, [r7, #11]
    aac6:	2210      	movs	r2, #16
    aac8:	4619      	mov	r1, r3
    aaca:	68f8      	ldr	r0, [r7, #12]
    aacc:	4b06      	ldr	r3, [pc, #24]	; (aae8 <_usb_d_dev_trans_setup+0x74>)
    aace:	4798      	blx	r3
}
    aad0:	bf00      	nop
    aad2:	3714      	adds	r7, #20
    aad4:	46bd      	mov	sp, r7
    aad6:	bd90      	pop	{r4, r7, pc}
    aad8:	00009809 	.word	0x00009809
    aadc:	00009991 	.word	0x00009991
    aae0:	00009069 	.word	0x00009069
    aae4:	00009a61 	.word	0x00009a61
    aae8:	000090bd 	.word	0x000090bd

0000aaec <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
    aaec:	b580      	push	{r7, lr}
    aaee:	b088      	sub	sp, #32
    aaf0:	af00      	add	r7, sp, #0
    aaf2:	4603      	mov	r3, r0
    aaf4:	71fb      	strb	r3, [r7, #7]
    aaf6:	460b      	mov	r3, r1
    aaf8:	71bb      	strb	r3, [r7, #6]
    aafa:	4613      	mov	r3, r2
    aafc:	80bb      	strh	r3, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(ep);
    aafe:	79fb      	ldrb	r3, [r7, #7]
    ab00:	f003 030f 	and.w	r3, r3, #15
    ab04:	77fb      	strb	r3, [r7, #31]
	bool                  dir = USB_EP_GET_DIR(ep);
    ab06:	79fb      	ldrb	r3, [r7, #7]
    ab08:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ab0c:	2b00      	cmp	r3, #0
    ab0e:	bf14      	ite	ne
    ab10:	2301      	movne	r3, #1
    ab12:	2300      	moveq	r3, #0
    ab14:	77bb      	strb	r3, [r7, #30]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ab16:	7fba      	ldrb	r2, [r7, #30]
    ab18:	7ffb      	ldrb	r3, [r7, #31]
    ab1a:	4611      	mov	r1, r2
    ab1c:	4618      	mov	r0, r3
    ab1e:	4b3e      	ldr	r3, [pc, #248]	; (ac18 <_usb_d_dev_ep_init+0x12c>)
    ab20:	4798      	blx	r3
    ab22:	61b8      	str	r0, [r7, #24]

	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    ab24:	79bb      	ldrb	r3, [r7, #6]
    ab26:	f003 0303 	and.w	r3, r3, #3
    ab2a:	75fb      	strb	r3, [r7, #23]
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    ab2c:	7ffa      	ldrb	r2, [r7, #31]
    ab2e:	4613      	mov	r3, r2
    ab30:	005b      	lsls	r3, r3, #1
    ab32:	4413      	add	r3, r2
    ab34:	009b      	lsls	r3, r3, #2
    ab36:	4a39      	ldr	r2, [pc, #228]	; (ac1c <_usb_d_dev_ep_init+0x130>)
    ab38:	4413      	add	r3, r2
    ab3a:	613b      	str	r3, [r7, #16]

	if (epn > CONF_USB_D_MAX_EP_N) {
    ab3c:	7ffb      	ldrb	r3, [r7, #31]
    ab3e:	2b04      	cmp	r3, #4
    ab40:	d902      	bls.n	ab48 <_usb_d_dev_ep_init+0x5c>
		return -USB_ERR_PARAM;
    ab42:	f06f 0311 	mvn.w	r3, #17
    ab46:	e063      	b.n	ac10 <_usb_d_dev_ep_init+0x124>
	}
	if (ept->ep != 0xFF) {
    ab48:	69bb      	ldr	r3, [r7, #24]
    ab4a:	7c9b      	ldrb	r3, [r3, #18]
    ab4c:	2bff      	cmp	r3, #255	; 0xff
    ab4e:	d002      	beq.n	ab56 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_REDO;
    ab50:	f06f 0313 	mvn.w	r3, #19
    ab54:	e05c      	b.n	ac10 <_usb_d_dev_ep_init+0x124>
	}
	if (ep_type == USB_EP_XTYPE_CTRL) {
    ab56:	7dfb      	ldrb	r3, [r7, #23]
    ab58:	2b00      	cmp	r3, #0
    ab5a:	d11f      	bne.n	ab9c <_usb_d_dev_ep_init+0xb0>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    ab5c:	7fbb      	ldrb	r3, [r7, #30]
    ab5e:	2b00      	cmp	r3, #0
    ab60:	bf14      	ite	ne
    ab62:	2301      	movne	r3, #1
    ab64:	2300      	moveq	r3, #0
    ab66:	b2db      	uxtb	r3, r3
    ab68:	f083 0301 	eor.w	r3, r3, #1
    ab6c:	b2db      	uxtb	r3, r3
    ab6e:	f003 0301 	and.w	r3, r3, #1
    ab72:	b2da      	uxtb	r2, r3
    ab74:	7ffb      	ldrb	r3, [r7, #31]
    ab76:	4611      	mov	r1, r2
    ab78:	4618      	mov	r0, r3
    ab7a:	4b27      	ldr	r3, [pc, #156]	; (ac18 <_usb_d_dev_ep_init+0x12c>)
    ab7c:	4798      	blx	r3
    ab7e:	60f8      	str	r0, [r7, #12]
		if (ept_in->ep != 0xFF) {
    ab80:	68fb      	ldr	r3, [r7, #12]
    ab82:	7c9b      	ldrb	r3, [r3, #18]
    ab84:	2bff      	cmp	r3, #255	; 0xff
    ab86:	d002      	beq.n	ab8e <_usb_d_dev_ep_init+0xa2>
			return -USB_ERR_REDO;
    ab88:	f06f 0313 	mvn.w	r3, #19
    ab8c:	e040      	b.n	ac10 <_usb_d_dev_ep_init+0x124>
		}
		if (pcfg->cache == NULL) {
    ab8e:	693b      	ldr	r3, [r7, #16]
    ab90:	681b      	ldr	r3, [r3, #0]
    ab92:	2b00      	cmp	r3, #0
    ab94:	d102      	bne.n	ab9c <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    ab96:	f06f 0312 	mvn.w	r3, #18
    ab9a:	e039      	b.n	ac10 <_usb_d_dev_ep_init+0x124>
		}
	}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    ab9c:	7fbb      	ldrb	r3, [r7, #30]
    ab9e:	2b00      	cmp	r3, #0
    aba0:	d007      	beq.n	abb2 <_usb_d_dev_ep_init+0xc6>
    aba2:	693b      	ldr	r3, [r7, #16]
    aba4:	685b      	ldr	r3, [r3, #4]
    aba6:	2b00      	cmp	r3, #0
    aba8:	bf14      	ite	ne
    abaa:	2301      	movne	r3, #1
    abac:	2300      	moveq	r3, #0
    abae:	b2db      	uxtb	r3, r3
    abb0:	e006      	b.n	abc0 <_usb_d_dev_ep_init+0xd4>
    abb2:	693b      	ldr	r3, [r7, #16]
    abb4:	681b      	ldr	r3, [r3, #0]
    abb6:	2b00      	cmp	r3, #0
    abb8:	bf14      	ite	ne
    abba:	2301      	movne	r3, #1
    abbc:	2300      	moveq	r3, #0
    abbe:	b2db      	uxtb	r3, r3
    abc0:	2b00      	cmp	r3, #0
    abc2:	d00f      	beq.n	abe4 <_usb_d_dev_ep_init+0xf8>
    abc4:	7fbb      	ldrb	r3, [r7, #30]
    abc6:	2b00      	cmp	r3, #0
    abc8:	d003      	beq.n	abd2 <_usb_d_dev_ep_init+0xe6>
    abca:	693b      	ldr	r3, [r7, #16]
    abcc:	895b      	ldrh	r3, [r3, #10]
    abce:	461a      	mov	r2, r3
    abd0:	e002      	b.n	abd8 <_usb_d_dev_ep_init+0xec>
    abd2:	693b      	ldr	r3, [r7, #16]
    abd4:	891b      	ldrh	r3, [r3, #8]
    abd6:	461a      	mov	r2, r3
    abd8:	88bb      	ldrh	r3, [r7, #4]
    abda:	429a      	cmp	r2, r3
    abdc:	da02      	bge.n	abe4 <_usb_d_dev_ep_init+0xf8>
		return -USB_ERR_FUNC;
    abde:	f06f 0312 	mvn.w	r3, #18
    abe2:	e015      	b.n	ac10 <_usb_d_dev_ep_init+0x124>
	}

	/* Initialize EP n settings */
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    abe4:	7fbb      	ldrb	r3, [r7, #30]
    abe6:	2b00      	cmp	r3, #0
    abe8:	d002      	beq.n	abf0 <_usb_d_dev_ep_init+0x104>
    abea:	693b      	ldr	r3, [r7, #16]
    abec:	685b      	ldr	r3, [r3, #4]
    abee:	e001      	b.n	abf4 <_usb_d_dev_ep_init+0x108>
    abf0:	693b      	ldr	r3, [r7, #16]
    abf2:	681b      	ldr	r3, [r3, #0]
    abf4:	69ba      	ldr	r2, [r7, #24]
    abf6:	60d3      	str	r3, [r2, #12]
	ept->size     = max_pkt_siz;
    abf8:	69bb      	ldr	r3, [r7, #24]
    abfa:	88ba      	ldrh	r2, [r7, #4]
    abfc:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
    abfe:	7dfb      	ldrb	r3, [r7, #23]
    ac00:	3301      	adds	r3, #1
    ac02:	b2da      	uxtb	r2, r3
    ac04:	69bb      	ldr	r3, [r7, #24]
    ac06:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
    ac08:	69bb      	ldr	r3, [r7, #24]
    ac0a:	79fa      	ldrb	r2, [r7, #7]
    ac0c:	749a      	strb	r2, [r3, #18]

	return USB_OK;
    ac0e:	2300      	movs	r3, #0
}
    ac10:	4618      	mov	r0, r3
    ac12:	3720      	adds	r7, #32
    ac14:	46bd      	mov	sp, r7
    ac16:	bd80      	pop	{r7, pc}
    ac18:	00009b1d 	.word	0x00009b1d
    ac1c:	00013d74 	.word	0x00013d74

0000ac20 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
    ac20:	b580      	push	{r7, lr}
    ac22:	b086      	sub	sp, #24
    ac24:	af00      	add	r7, sp, #0
    ac26:	4603      	mov	r3, r0
    ac28:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw  = USB;
    ac2a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ac2e:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
    ac30:	79fb      	ldrb	r3, [r7, #7]
    ac32:	f003 030f 	and.w	r3, r3, #15
    ac36:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    ac38:	79fb      	ldrb	r3, [r7, #7]
    ac3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ac3e:	2b00      	cmp	r3, #0
    ac40:	bf14      	ite	ne
    ac42:	2301      	movne	r3, #1
    ac44:	2300      	moveq	r3, #0
    ac46:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ac48:	7cba      	ldrb	r2, [r7, #18]
    ac4a:	7cfb      	ldrb	r3, [r7, #19]
    ac4c:	4611      	mov	r1, r2
    ac4e:	4618      	mov	r0, r3
    ac50:	4b2a      	ldr	r3, [pc, #168]	; (acfc <_usb_d_dev_ep_deinit+0xdc>)
    ac52:	4798      	blx	r3
    ac54:	60f8      	str	r0, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    ac56:	7cfb      	ldrb	r3, [r7, #19]
    ac58:	2b04      	cmp	r3, #4
    ac5a:	d84a      	bhi.n	acf2 <_usb_d_dev_ep_deinit+0xd2>
    ac5c:	68fb      	ldr	r3, [r7, #12]
    ac5e:	7c9b      	ldrb	r3, [r3, #18]
    ac60:	2bff      	cmp	r3, #255	; 0xff
    ac62:	d046      	beq.n	acf2 <_usb_d_dev_ep_deinit+0xd2>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    ac64:	7cbb      	ldrb	r3, [r7, #18]
    ac66:	2203      	movs	r2, #3
    ac68:	4619      	mov	r1, r3
    ac6a:	68f8      	ldr	r0, [r7, #12]
    ac6c:	4b24      	ldr	r3, [pc, #144]	; (ad00 <_usb_d_dev_ep_deinit+0xe0>)
    ac6e:	4798      	blx	r3

	/* Disable the endpoint. */
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    ac70:	68fb      	ldr	r3, [r7, #12]
    ac72:	7cdb      	ldrb	r3, [r3, #19]
    ac74:	f003 0307 	and.w	r3, r3, #7
    ac78:	b2db      	uxtb	r3, r3
    ac7a:	2b01      	cmp	r3, #1
    ac7c:	d107      	bne.n	ac8e <_usb_d_dev_ep_deinit+0x6e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    ac7e:	79fb      	ldrb	r3, [r7, #7]
    ac80:	697a      	ldr	r2, [r7, #20]
    ac82:	3308      	adds	r3, #8
    ac84:	015b      	lsls	r3, r3, #5
    ac86:	4413      	add	r3, r2
    ac88:	2200      	movs	r2, #0
    ac8a:	701a      	strb	r2, [r3, #0]
    ac8c:	e02a      	b.n	ace4 <_usb_d_dev_ep_deinit+0xc4>
	} else if (USB_EP_GET_DIR(ep)) {
    ac8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    ac92:	2b00      	cmp	r3, #0
    ac94:	da15      	bge.n	acc2 <_usb_d_dev_ep_deinit+0xa2>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    ac96:	79fb      	ldrb	r3, [r7, #7]
    ac98:	f003 030f 	and.w	r3, r3, #15
    ac9c:	79fa      	ldrb	r2, [r7, #7]
    ac9e:	f002 020f 	and.w	r2, r2, #15
    aca2:	6979      	ldr	r1, [r7, #20]
    aca4:	3208      	adds	r2, #8
    aca6:	0152      	lsls	r2, r2, #5
    aca8:	440a      	add	r2, r1
    acaa:	7812      	ldrb	r2, [r2, #0]
    acac:	b2d2      	uxtb	r2, r2
    acae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    acb2:	b2d1      	uxtb	r1, r2
    acb4:	697a      	ldr	r2, [r7, #20]
    acb6:	3308      	adds	r3, #8
    acb8:	015b      	lsls	r3, r3, #5
    acba:	4413      	add	r3, r2
    acbc:	460a      	mov	r2, r1
    acbe:	701a      	strb	r2, [r3, #0]
    acc0:	e010      	b.n	ace4 <_usb_d_dev_ep_deinit+0xc4>
	} else {
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    acc2:	79fb      	ldrb	r3, [r7, #7]
    acc4:	79fa      	ldrb	r2, [r7, #7]
    acc6:	6979      	ldr	r1, [r7, #20]
    acc8:	3208      	adds	r2, #8
    acca:	0152      	lsls	r2, r2, #5
    accc:	440a      	add	r2, r1
    acce:	7812      	ldrb	r2, [r2, #0]
    acd0:	b2d2      	uxtb	r2, r2
    acd2:	f022 0207 	bic.w	r2, r2, #7
    acd6:	b2d1      	uxtb	r1, r2
    acd8:	697a      	ldr	r2, [r7, #20]
    acda:	3308      	adds	r3, #8
    acdc:	015b      	lsls	r3, r3, #5
    acde:	4413      	add	r3, r2
    ace0:	460a      	mov	r2, r1
    ace2:	701a      	strb	r2, [r3, #0]
	}
	ept->flags.u8 = 0;
    ace4:	68fb      	ldr	r3, [r7, #12]
    ace6:	2200      	movs	r2, #0
    ace8:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
    acea:	68fb      	ldr	r3, [r7, #12]
    acec:	22ff      	movs	r2, #255	; 0xff
    acee:	749a      	strb	r2, [r3, #18]
    acf0:	e000      	b.n	acf4 <_usb_d_dev_ep_deinit+0xd4>
		return;
    acf2:	bf00      	nop
}
    acf4:	3718      	adds	r7, #24
    acf6:	46bd      	mov	sp, r7
    acf8:	bd80      	pop	{r7, pc}
    acfa:	bf00      	nop
    acfc:	00009b1d 	.word	0x00009b1d
    ad00:	0000b155 	.word	0x0000b155

0000ad04 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
    ad04:	b5b0      	push	{r4, r5, r7, lr}
    ad06:	b088      	sub	sp, #32
    ad08:	af00      	add	r7, sp, #0
    ad0a:	4603      	mov	r3, r0
    ad0c:	71fb      	strb	r3, [r7, #7]
	Usb *                 hw    = USB;
    ad0e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ad12:	61fb      	str	r3, [r7, #28]
	uint8_t               epn   = USB_EP_GET_N(ep);
    ad14:	79fb      	ldrb	r3, [r7, #7]
    ad16:	f003 030f 	and.w	r3, r3, #15
    ad1a:	76fb      	strb	r3, [r7, #27]
	bool                  dir   = USB_EP_GET_DIR(ep);
    ad1c:	79fb      	ldrb	r3, [r7, #7]
    ad1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ad22:	2b00      	cmp	r3, #0
    ad24:	bf14      	ite	ne
    ad26:	2301      	movne	r3, #1
    ad28:	2300      	moveq	r3, #0
    ad2a:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    ad2c:	7eba      	ldrb	r2, [r7, #26]
    ad2e:	7efb      	ldrb	r3, [r7, #27]
    ad30:	4611      	mov	r1, r2
    ad32:	4618      	mov	r0, r3
    ad34:	4b70      	ldr	r3, [pc, #448]	; (aef8 <_usb_d_dev_ep_enable+0x1f4>)
    ad36:	4798      	blx	r3
    ad38:	6178      	str	r0, [r7, #20]
	uint8_t               epcfg = hri_usbendpoint_read_EPCFG_reg(hw, epn);
    ad3a:	7efb      	ldrb	r3, [r7, #27]
    ad3c:	4619      	mov	r1, r3
    ad3e:	69f8      	ldr	r0, [r7, #28]
    ad40:	4b6e      	ldr	r3, [pc, #440]	; (aefc <_usb_d_dev_ep_enable+0x1f8>)
    ad42:	4798      	blx	r3
    ad44:	4603      	mov	r3, r0
    ad46:	74fb      	strb	r3, [r7, #19]
	UsbDeviceDescBank *   bank;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    ad48:	7efb      	ldrb	r3, [r7, #27]
    ad4a:	2b04      	cmp	r3, #4
    ad4c:	d803      	bhi.n	ad56 <_usb_d_dev_ep_enable+0x52>
    ad4e:	697b      	ldr	r3, [r7, #20]
    ad50:	7c9b      	ldrb	r3, [r3, #18]
    ad52:	2bff      	cmp	r3, #255	; 0xff
    ad54:	d102      	bne.n	ad5c <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
    ad56:	f06f 0311 	mvn.w	r3, #17
    ad5a:	e0c8      	b.n	aeee <_usb_d_dev_ep_enable+0x1ea>
	}

	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    ad5c:	7efb      	ldrb	r3, [r7, #27]
    ad5e:	015b      	lsls	r3, r3, #5
    ad60:	4a67      	ldr	r2, [pc, #412]	; (af00 <_usb_d_dev_ep_enable+0x1fc>)
    ad62:	4413      	add	r3, r2
    ad64:	60fb      	str	r3, [r7, #12]
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    ad66:	697b      	ldr	r3, [r7, #20]
    ad68:	7cdb      	ldrb	r3, [r3, #19]
    ad6a:	f003 0307 	and.w	r3, r3, #7
    ad6e:	b2db      	uxtb	r3, r3
    ad70:	2b01      	cmp	r3, #1
    ad72:	d14b      	bne.n	ae0c <_usb_d_dev_ep_enable+0x108>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    ad74:	7cfb      	ldrb	r3, [r7, #19]
    ad76:	f003 0377 	and.w	r3, r3, #119	; 0x77
    ad7a:	2b00      	cmp	r3, #0
    ad7c:	d002      	beq.n	ad84 <_usb_d_dev_ep_enable+0x80>
			return -USB_ERR_REDO;
    ad7e:	f06f 0313 	mvn.w	r3, #19
    ad82:	e0b4      	b.n	aeee <_usb_d_dev_ep_enable+0x1ea>
		}
		hri_usbendpoint_write_EPCFG_reg(hw, epn, USB_D_EPCFG_CTRL);
    ad84:	7efb      	ldrb	r3, [r7, #27]
    ad86:	2211      	movs	r2, #17
    ad88:	4619      	mov	r1, r3
    ad8a:	69f8      	ldr	r0, [r7, #28]
    ad8c:	4b5d      	ldr	r3, [pc, #372]	; (af04 <_usb_d_dev_ep_enable+0x200>)
    ad8e:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ad90:	697b      	ldr	r3, [r7, #20]
    ad92:	8a1b      	ldrh	r3, [r3, #16]
    ad94:	039b      	lsls	r3, r3, #14
    ad96:	4c5c      	ldr	r4, [pc, #368]	; (af08 <_usb_d_dev_ep_enable+0x204>)
    ad98:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ad9a:	697b      	ldr	r3, [r7, #20]
    ad9c:	8a1b      	ldrh	r3, [r3, #16]
    ad9e:	4618      	mov	r0, r3
    ada0:	4b5a      	ldr	r3, [pc, #360]	; (af0c <_usb_d_dev_ep_enable+0x208>)
    ada2:	4798      	blx	r3
    ada4:	4603      	mov	r3, r0
    ada6:	071b      	lsls	r3, r3, #28
    ada8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    adac:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    adb0:	68fb      	ldr	r3, [r7, #12]
    adb2:	605a      	str	r2, [r3, #4]
		bank[1].PCKSIZE.reg
    adb4:	68fb      	ldr	r3, [r7, #12]
    adb6:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    adba:	697b      	ldr	r3, [r7, #20]
    adbc:	8a1b      	ldrh	r3, [r3, #16]
    adbe:	f3c3 050d 	ubfx	r5, r3, #0, #14
    adc2:	697b      	ldr	r3, [r7, #20]
    adc4:	8a1b      	ldrh	r3, [r3, #16]
    adc6:	4618      	mov	r0, r3
    adc8:	4b50      	ldr	r3, [pc, #320]	; (af0c <_usb_d_dev_ep_enable+0x208>)
    adca:	4798      	blx	r3
    adcc:	4603      	mov	r3, r0
    adce:	071b      	lsls	r3, r3, #28
    add0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    add4:	432b      	orrs	r3, r5
    add6:	6063      	str	r3, [r4, #4]
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    add8:	7efb      	ldrb	r3, [r7, #27]
    adda:	2200      	movs	r2, #0
    addc:	2100      	movs	r1, #0
    adde:	4618      	mov	r0, r3
    ade0:	4b4b      	ldr	r3, [pc, #300]	; (af10 <_usb_d_dev_ep_enable+0x20c>)
    ade2:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, 1, false);
    ade4:	7efb      	ldrb	r3, [r7, #27]
    ade6:	2200      	movs	r2, #0
    ade8:	2101      	movs	r1, #1
    adea:	4618      	mov	r0, r3
    adec:	4b49      	ldr	r3, [pc, #292]	; (af14 <_usb_d_dev_ep_enable+0x210>)
    adee:	4798      	blx	r3

		_usbd_ep_clear_bank_status(epn, 0);
    adf0:	7efb      	ldrb	r3, [r7, #27]
    adf2:	2100      	movs	r1, #0
    adf4:	4618      	mov	r0, r3
    adf6:	4b48      	ldr	r3, [pc, #288]	; (af18 <_usb_d_dev_ep_enable+0x214>)
    adf8:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    adfa:	7efb      	ldrb	r3, [r7, #27]
    adfc:	2101      	movs	r1, #1
    adfe:	4618      	mov	r0, r3
    ae00:	4b45      	ldr	r3, [pc, #276]	; (af18 <_usb_d_dev_ep_enable+0x214>)
    ae02:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
    ae04:	6978      	ldr	r0, [r7, #20]
    ae06:	4b45      	ldr	r3, [pc, #276]	; (af1c <_usb_d_dev_ep_enable+0x218>)
    ae08:	4798      	blx	r3
    ae0a:	e06f      	b.n	aeec <_usb_d_dev_ep_enable+0x1e8>

	} else if (dir) {
    ae0c:	7ebb      	ldrb	r3, [r7, #26]
    ae0e:	2b00      	cmp	r3, #0
    ae10:	d038      	beq.n	ae84 <_usb_d_dev_ep_enable+0x180>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    ae12:	7cfb      	ldrb	r3, [r7, #19]
    ae14:	f003 0370 	and.w	r3, r3, #112	; 0x70
    ae18:	2b00      	cmp	r3, #0
    ae1a:	d002      	beq.n	ae22 <_usb_d_dev_ep_enable+0x11e>
			return -USB_ERR_REDO;
    ae1c:	f06f 0313 	mvn.w	r3, #19
    ae20:	e065      	b.n	aeee <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    ae22:	697b      	ldr	r3, [r7, #20]
    ae24:	7cdb      	ldrb	r3, [r3, #19]
    ae26:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae2a:	b2db      	uxtb	r3, r3
    ae2c:	011b      	lsls	r3, r3, #4
    ae2e:	b2db      	uxtb	r3, r3
    ae30:	f003 0370 	and.w	r3, r3, #112	; 0x70
    ae34:	b2da      	uxtb	r2, r3
    ae36:	7cfb      	ldrb	r3, [r7, #19]
    ae38:	4313      	orrs	r3, r2
    ae3a:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    ae3c:	7cfa      	ldrb	r2, [r7, #19]
    ae3e:	7efb      	ldrb	r3, [r7, #27]
    ae40:	4619      	mov	r1, r3
    ae42:	69f8      	ldr	r0, [r7, #28]
    ae44:	4b2f      	ldr	r3, [pc, #188]	; (af04 <_usb_d_dev_ep_enable+0x200>)
    ae46:	4798      	blx	r3

		bank[1].PCKSIZE.reg
    ae48:	68fb      	ldr	r3, [r7, #12]
    ae4a:	f103 0410 	add.w	r4, r3, #16
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ae4e:	697b      	ldr	r3, [r7, #20]
    ae50:	8a1b      	ldrh	r3, [r3, #16]
    ae52:	f3c3 050d 	ubfx	r5, r3, #0, #14
    ae56:	697b      	ldr	r3, [r7, #20]
    ae58:	8a1b      	ldrh	r3, [r3, #16]
    ae5a:	4618      	mov	r0, r3
    ae5c:	4b2b      	ldr	r3, [pc, #172]	; (af0c <_usb_d_dev_ep_enable+0x208>)
    ae5e:	4798      	blx	r3
    ae60:	4603      	mov	r3, r0
    ae62:	071b      	lsls	r3, r3, #28
    ae64:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    ae68:	432b      	orrs	r3, r5
    ae6a:	6063      	str	r3, [r4, #4]

		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, 1, false);
    ae6c:	7efb      	ldrb	r3, [r7, #27]
    ae6e:	2200      	movs	r2, #0
    ae70:	2101      	movs	r1, #1
    ae72:	4618      	mov	r0, r3
    ae74:	4b27      	ldr	r3, [pc, #156]	; (af14 <_usb_d_dev_ep_enable+0x210>)
    ae76:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 1);
    ae78:	7efb      	ldrb	r3, [r7, #27]
    ae7a:	2101      	movs	r1, #1
    ae7c:	4618      	mov	r0, r3
    ae7e:	4b26      	ldr	r3, [pc, #152]	; (af18 <_usb_d_dev_ep_enable+0x214>)
    ae80:	4798      	blx	r3
    ae82:	e033      	b.n	aeec <_usb_d_dev_ep_enable+0x1e8>

	} else {

		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    ae84:	7cfb      	ldrb	r3, [r7, #19]
    ae86:	f003 0307 	and.w	r3, r3, #7
    ae8a:	2b00      	cmp	r3, #0
    ae8c:	d002      	beq.n	ae94 <_usb_d_dev_ep_enable+0x190>
			return -USB_ERR_REDO;
    ae8e:	f06f 0313 	mvn.w	r3, #19
    ae92:	e02c      	b.n	aeee <_usb_d_dev_ep_enable+0x1ea>
		}
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    ae94:	697b      	ldr	r3, [r7, #20]
    ae96:	7cdb      	ldrb	r3, [r3, #19]
    ae98:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae9c:	b2db      	uxtb	r3, r3
    ae9e:	461a      	mov	r2, r3
    aea0:	7cfb      	ldrb	r3, [r7, #19]
    aea2:	4313      	orrs	r3, r2
    aea4:	74fb      	strb	r3, [r7, #19]
		hri_usbendpoint_write_EPCFG_reg(hw, epn, epcfg);
    aea6:	7cfa      	ldrb	r2, [r7, #19]
    aea8:	7efb      	ldrb	r3, [r7, #27]
    aeaa:	4619      	mov	r1, r3
    aeac:	69f8      	ldr	r0, [r7, #28]
    aeae:	4b15      	ldr	r3, [pc, #84]	; (af04 <_usb_d_dev_ep_enable+0x200>)
    aeb0:	4798      	blx	r3

		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    aeb2:	697b      	ldr	r3, [r7, #20]
    aeb4:	8a1b      	ldrh	r3, [r3, #16]
    aeb6:	039b      	lsls	r3, r3, #14
    aeb8:	4c13      	ldr	r4, [pc, #76]	; (af08 <_usb_d_dev_ep_enable+0x204>)
    aeba:	401c      	ands	r4, r3
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    aebc:	697b      	ldr	r3, [r7, #20]
    aebe:	8a1b      	ldrh	r3, [r3, #16]
    aec0:	4618      	mov	r0, r3
    aec2:	4b12      	ldr	r3, [pc, #72]	; (af0c <_usb_d_dev_ep_enable+0x208>)
    aec4:	4798      	blx	r3
    aec6:	4603      	mov	r3, r0
    aec8:	071b      	lsls	r3, r3, #28
    aeca:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    aece:	ea44 0203 	orr.w	r2, r4, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    aed2:	68fb      	ldr	r3, [r7, #12]
    aed4:	605a      	str	r2, [r3, #4]

		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, 0, false);
    aed6:	7efb      	ldrb	r3, [r7, #27]
    aed8:	2200      	movs	r2, #0
    aeda:	2100      	movs	r1, #0
    aedc:	4618      	mov	r0, r3
    aede:	4b0c      	ldr	r3, [pc, #48]	; (af10 <_usb_d_dev_ep_enable+0x20c>)
    aee0:	4798      	blx	r3
		_usbd_ep_clear_bank_status(epn, 0);
    aee2:	7efb      	ldrb	r3, [r7, #27]
    aee4:	2100      	movs	r1, #0
    aee6:	4618      	mov	r0, r3
    aee8:	4b0b      	ldr	r3, [pc, #44]	; (af18 <_usb_d_dev_ep_enable+0x214>)
    aeea:	4798      	blx	r3
	}

	return USB_OK;
    aeec:	2300      	movs	r3, #0
}
    aeee:	4618      	mov	r0, r3
    aef0:	3720      	adds	r7, #32
    aef2:	46bd      	mov	sp, r7
    aef4:	bdb0      	pop	{r4, r5, r7, pc}
    aef6:	bf00      	nop
    aef8:	00009b1d 	.word	0x00009b1d
    aefc:	000091a3 	.word	0x000091a3
    af00:	20000ff8 	.word	0x20000ff8
    af04:	00009179 	.word	0x00009179
    af08:	0fffc000 	.word	0x0fffc000
    af0c:	00009ab9 	.word	0x00009ab9
    af10:	00009a61 	.word	0x00009a61
    af14:	00009a09 	.word	0x00009a09
    af18:	000099d1 	.word	0x000099d1
    af1c:	0000aa75 	.word	0x0000aa75

0000af20 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept, bool dir)
{
    af20:	b580      	push	{r7, lr}
    af22:	b084      	sub	sp, #16
    af24:	af00      	add	r7, sp, #0
    af26:	6078      	str	r0, [r7, #4]
    af28:	460b      	mov	r3, r1
    af2a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    af2c:	687b      	ldr	r3, [r7, #4]
    af2e:	7c9b      	ldrb	r3, [r3, #18]
    af30:	f003 030f 	and.w	r3, r3, #15
    af34:	73fb      	strb	r3, [r7, #15]
	return _usbd_ep_is_stalled(epn, dir);
    af36:	78fa      	ldrb	r2, [r7, #3]
    af38:	7bfb      	ldrb	r3, [r7, #15]
    af3a:	4611      	mov	r1, r2
    af3c:	4618      	mov	r0, r3
    af3e:	4b03      	ldr	r3, [pc, #12]	; (af4c <_usb_d_dev_ep_stall_get+0x2c>)
    af40:	4798      	blx	r3
    af42:	4603      	mov	r3, r0
}
    af44:	4618      	mov	r0, r3
    af46:	3710      	adds	r7, #16
    af48:	46bd      	mov	sp, r7
    af4a:	bd80      	pop	{r7, pc}
    af4c:	00009611 	.word	0x00009611

0000af50 <_usb_d_dev_ep_stall_set>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept, bool dir)
{
    af50:	b580      	push	{r7, lr}
    af52:	b084      	sub	sp, #16
    af54:	af00      	add	r7, sp, #0
    af56:	6078      	str	r0, [r7, #4]
    af58:	460b      	mov	r3, r1
    af5a:	70fb      	strb	r3, [r7, #3]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    af5c:	687b      	ldr	r3, [r7, #4]
    af5e:	7c9b      	ldrb	r3, [r3, #18]
    af60:	f003 030f 	and.w	r3, r3, #15
    af64:	73fb      	strb	r3, [r7, #15]
	_usbd_ep_set_stall(epn, dir, true);
    af66:	78f9      	ldrb	r1, [r7, #3]
    af68:	7bfb      	ldrb	r3, [r7, #15]
    af6a:	2201      	movs	r2, #1
    af6c:	4618      	mov	r0, r3
    af6e:	4b0a      	ldr	r3, [pc, #40]	; (af98 <_usb_d_dev_ep_stall_set+0x48>)
    af70:	4798      	blx	r3
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    af72:	78fb      	ldrb	r3, [r7, #3]
    af74:	2220      	movs	r2, #32
    af76:	409a      	lsls	r2, r3
    af78:	7bfb      	ldrb	r3, [r7, #15]
    af7a:	4611      	mov	r1, r2
    af7c:	4618      	mov	r0, r3
    af7e:	4b07      	ldr	r3, [pc, #28]	; (af9c <_usb_d_dev_ep_stall_set+0x4c>)
    af80:	4798      	blx	r3
	ept->flags.bits.is_stalled = 1;
    af82:	687a      	ldr	r2, [r7, #4]
    af84:	7cd3      	ldrb	r3, [r2, #19]
    af86:	f043 0308 	orr.w	r3, r3, #8
    af8a:	74d3      	strb	r3, [r2, #19]
	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
    af8c:	2300      	movs	r3, #0
}
    af8e:	4618      	mov	r0, r3
    af90:	3710      	adds	r7, #16
    af92:	46bd      	mov	sp, r7
    af94:	bd80      	pop	{r7, pc}
    af96:	bf00      	nop
    af98:	000095b9 	.word	0x000095b9
    af9c:	00009539 	.word	0x00009539

0000afa0 <_usb_d_dev_ep_stall_clr>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept, bool dir)
{
    afa0:	b580      	push	{r7, lr}
    afa2:	b084      	sub	sp, #16
    afa4:	af00      	add	r7, sp, #0
    afa6:	6078      	str	r0, [r7, #4]
    afa8:	460b      	mov	r3, r1
    afaa:	70fb      	strb	r3, [r7, #3]
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    afac:	687b      	ldr	r3, [r7, #4]
    afae:	7c9b      	ldrb	r3, [r3, #18]
    afb0:	f003 030f 	and.w	r3, r3, #15
    afb4:	73fb      	strb	r3, [r7, #15]
	bool    is_stalled = _usbd_ep_is_stalled(epn, dir);
    afb6:	78fa      	ldrb	r2, [r7, #3]
    afb8:	7bfb      	ldrb	r3, [r7, #15]
    afba:	4611      	mov	r1, r2
    afbc:	4618      	mov	r0, r3
    afbe:	4b28      	ldr	r3, [pc, #160]	; (b060 <_usb_d_dev_ep_stall_clr+0xc0>)
    afc0:	4798      	blx	r3
    afc2:	4603      	mov	r3, r0
    afc4:	73bb      	strb	r3, [r7, #14]
	if (!is_stalled) {
    afc6:	7bbb      	ldrb	r3, [r7, #14]
    afc8:	f083 0301 	eor.w	r3, r3, #1
    afcc:	b2db      	uxtb	r3, r3
    afce:	2b00      	cmp	r3, #0
    afd0:	d001      	beq.n	afd6 <_usb_d_dev_ep_stall_clr+0x36>
		return ERR_NONE;
    afd2:	2300      	movs	r3, #0
    afd4:	e040      	b.n	b058 <_usb_d_dev_ep_stall_clr+0xb8>
	}
	_usbd_ep_set_stall(epn, dir, false);
    afd6:	78f9      	ldrb	r1, [r7, #3]
    afd8:	7bfb      	ldrb	r3, [r7, #15]
    afda:	2200      	movs	r2, #0
    afdc:	4618      	mov	r0, r3
    afde:	4b21      	ldr	r3, [pc, #132]	; (b064 <_usb_d_dev_ep_stall_clr+0xc4>)
    afe0:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    afe2:	78fb      	ldrb	r3, [r7, #3]
    afe4:	2220      	movs	r2, #32
    afe6:	409a      	lsls	r2, r3
    afe8:	7bfb      	ldrb	r3, [r7, #15]
    afea:	4611      	mov	r1, r2
    afec:	4618      	mov	r0, r3
    afee:	4b1e      	ldr	r3, [pc, #120]	; (b068 <_usb_d_dev_ep_stall_clr+0xc8>)
    aff0:	4798      	blx	r3
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    aff2:	78fa      	ldrb	r2, [r7, #3]
    aff4:	7bfb      	ldrb	r3, [r7, #15]
    aff6:	4611      	mov	r1, r2
    aff8:	4618      	mov	r0, r3
    affa:	4b1c      	ldr	r3, [pc, #112]	; (b06c <_usb_d_dev_ep_stall_clr+0xcc>)
    affc:	4798      	blx	r3
    affe:	4603      	mov	r3, r0
    b000:	2b00      	cmp	r3, #0
    b002:	d00b      	beq.n	b01c <_usb_d_dev_ep_stall_clr+0x7c>
		_usbd_ep_ack_stall(epn, dir);
    b004:	78fa      	ldrb	r2, [r7, #3]
    b006:	7bfb      	ldrb	r3, [r7, #15]
    b008:	4611      	mov	r1, r2
    b00a:	4618      	mov	r0, r3
    b00c:	4b18      	ldr	r3, [pc, #96]	; (b070 <_usb_d_dev_ep_stall_clr+0xd0>)
    b00e:	4798      	blx	r3
		_usbd_ep_set_toggle(epn, dir, 0);
    b010:	78f9      	ldrb	r1, [r7, #3]
    b012:	7bfb      	ldrb	r3, [r7, #15]
    b014:	2200      	movs	r2, #0
    b016:	4618      	mov	r0, r3
    b018:	4b16      	ldr	r3, [pc, #88]	; (b074 <_usb_d_dev_ep_stall_clr+0xd4>)
    b01a:	4798      	blx	r3
	}
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b01c:	687b      	ldr	r3, [r7, #4]
    b01e:	7cdb      	ldrb	r3, [r3, #19]
    b020:	f003 0307 	and.w	r3, r3, #7
    b024:	b2db      	uxtb	r3, r3
    b026:	2b01      	cmp	r3, #1
    b028:	d110      	bne.n	b04c <_usb_d_dev_ep_stall_clr+0xac>
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    b02a:	7bfb      	ldrb	r3, [r7, #15]
    b02c:	4619      	mov	r1, r3
    b02e:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
    b032:	4b11      	ldr	r3, [pc, #68]	; (b078 <_usb_d_dev_ep_stall_clr+0xd8>)
    b034:	4798      	blx	r3
    b036:	4603      	mov	r3, r0
    b038:	f003 0330 	and.w	r3, r3, #48	; 0x30
    b03c:	2b00      	cmp	r3, #0
    b03e:	d10a      	bne.n	b056 <_usb_d_dev_ep_stall_clr+0xb6>
			ept->flags.bits.is_stalled = 0;
    b040:	687a      	ldr	r2, [r7, #4]
    b042:	7cd3      	ldrb	r3, [r2, #19]
    b044:	f36f 03c3 	bfc	r3, #3, #1
    b048:	74d3      	strb	r3, [r2, #19]
    b04a:	e004      	b.n	b056 <_usb_d_dev_ep_stall_clr+0xb6>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
    b04c:	687a      	ldr	r2, [r7, #4]
    b04e:	7cd3      	ldrb	r3, [r2, #19]
    b050:	f36f 03c3 	bfc	r3, #3, #1
    b054:	74d3      	strb	r3, [r2, #19]
	}
	return ERR_NONE;
    b056:	2300      	movs	r3, #0
}
    b058:	4618      	mov	r0, r3
    b05a:	3710      	adds	r7, #16
    b05c:	46bd      	mov	sp, r7
    b05e:	bd80      	pop	{r7, pc}
    b060:	00009611 	.word	0x00009611
    b064:	000095b9 	.word	0x000095b9
    b068:	00009561 	.word	0x00009561
    b06c:	00009655 	.word	0x00009655
    b070:	00009699 	.word	0x00009699
    b074:	00009785 	.word	0x00009785
    b078:	00009041 	.word	0x00009041

0000b07c <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
    b07c:	b580      	push	{r7, lr}
    b07e:	b086      	sub	sp, #24
    b080:	af00      	add	r7, sp, #0
    b082:	4603      	mov	r3, r0
    b084:	460a      	mov	r2, r1
    b086:	71fb      	strb	r3, [r7, #7]
    b088:	4613      	mov	r3, r2
    b08a:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
    b08c:	79fb      	ldrb	r3, [r7, #7]
    b08e:	f003 030f 	and.w	r3, r3, #15
    b092:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
    b094:	79fb      	ldrb	r3, [r7, #7]
    b096:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b09a:	2b00      	cmp	r3, #0
    b09c:	bf14      	ite	ne
    b09e:	2301      	movne	r3, #1
    b0a0:	2300      	moveq	r3, #0
    b0a2:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b0a4:	7cba      	ldrb	r2, [r7, #18]
    b0a6:	7cfb      	ldrb	r3, [r7, #19]
    b0a8:	4611      	mov	r1, r2
    b0aa:	4618      	mov	r0, r3
    b0ac:	4b13      	ldr	r3, [pc, #76]	; (b0fc <_usb_d_dev_ep_stall+0x80>)
    b0ae:	4798      	blx	r3
    b0b0:	60f8      	str	r0, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b0b2:	7cfb      	ldrb	r3, [r7, #19]
    b0b4:	2b04      	cmp	r3, #4
    b0b6:	d902      	bls.n	b0be <_usb_d_dev_ep_stall+0x42>
		return -USB_ERR_PARAM;
    b0b8:	f06f 0311 	mvn.w	r3, #17
    b0bc:	e01a      	b.n	b0f4 <_usb_d_dev_ep_stall+0x78>
	}

	if (USB_EP_STALL_SET == ctrl) {
    b0be:	79bb      	ldrb	r3, [r7, #6]
    b0c0:	2b01      	cmp	r3, #1
    b0c2:	d106      	bne.n	b0d2 <_usb_d_dev_ep_stall+0x56>
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    b0c4:	7cbb      	ldrb	r3, [r7, #18]
    b0c6:	4619      	mov	r1, r3
    b0c8:	68f8      	ldr	r0, [r7, #12]
    b0ca:	4b0d      	ldr	r3, [pc, #52]	; (b100 <_usb_d_dev_ep_stall+0x84>)
    b0cc:	4798      	blx	r3
    b0ce:	6178      	str	r0, [r7, #20]
    b0d0:	e00f      	b.n	b0f2 <_usb_d_dev_ep_stall+0x76>
	} else if (USB_EP_STALL_CLR == ctrl) {
    b0d2:	79bb      	ldrb	r3, [r7, #6]
    b0d4:	2b00      	cmp	r3, #0
    b0d6:	d106      	bne.n	b0e6 <_usb_d_dev_ep_stall+0x6a>
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    b0d8:	7cbb      	ldrb	r3, [r7, #18]
    b0da:	4619      	mov	r1, r3
    b0dc:	68f8      	ldr	r0, [r7, #12]
    b0de:	4b09      	ldr	r3, [pc, #36]	; (b104 <_usb_d_dev_ep_stall+0x88>)
    b0e0:	4798      	blx	r3
    b0e2:	6178      	str	r0, [r7, #20]
    b0e4:	e005      	b.n	b0f2 <_usb_d_dev_ep_stall+0x76>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept, dir);
    b0e6:	7cbb      	ldrb	r3, [r7, #18]
    b0e8:	4619      	mov	r1, r3
    b0ea:	68f8      	ldr	r0, [r7, #12]
    b0ec:	4b06      	ldr	r3, [pc, #24]	; (b108 <_usb_d_dev_ep_stall+0x8c>)
    b0ee:	4798      	blx	r3
    b0f0:	6178      	str	r0, [r7, #20]
	}
	return rc;
    b0f2:	697b      	ldr	r3, [r7, #20]
}
    b0f4:	4618      	mov	r0, r3
    b0f6:	3718      	adds	r7, #24
    b0f8:	46bd      	mov	sp, r7
    b0fa:	bd80      	pop	{r7, pc}
    b0fc:	00009b1d 	.word	0x00009b1d
    b100:	0000af51 	.word	0x0000af51
    b104:	0000afa1 	.word	0x0000afa1
    b108:	0000af21 	.word	0x0000af21

0000b10c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    b10c:	b580      	push	{r7, lr}
    b10e:	b082      	sub	sp, #8
    b110:	af00      	add	r7, sp, #0
    b112:	6078      	str	r0, [r7, #4]
    b114:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b116:	687b      	ldr	r3, [r7, #4]
    b118:	7c9b      	ldrb	r3, [r3, #18]
    b11a:	2bff      	cmp	r3, #255	; 0xff
    b11c:	d014      	beq.n	b148 <_usb_d_dev_trans_done+0x3c>
    b11e:	687b      	ldr	r3, [r7, #4]
    b120:	7cdb      	ldrb	r3, [r3, #19]
    b122:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b126:	b2db      	uxtb	r3, r3
    b128:	2b00      	cmp	r3, #0
    b12a:	d00d      	beq.n	b148 <_usb_d_dev_trans_done+0x3c>
		return;
	}
	ept->flags.bits.is_busy = 0;
    b12c:	687a      	ldr	r2, [r7, #4]
    b12e:	7cd3      	ldrb	r3, [r2, #19]
    b130:	f36f 1386 	bfc	r3, #6, #1
    b134:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    b136:	4b06      	ldr	r3, [pc, #24]	; (b150 <_usb_d_dev_trans_done+0x44>)
    b138:	691b      	ldr	r3, [r3, #16]
    b13a:	687a      	ldr	r2, [r7, #4]
    b13c:	7c90      	ldrb	r0, [r2, #18]
    b13e:	687a      	ldr	r2, [r7, #4]
    b140:	6892      	ldr	r2, [r2, #8]
    b142:	6839      	ldr	r1, [r7, #0]
    b144:	4798      	blx	r3
    b146:	e000      	b.n	b14a <_usb_d_dev_trans_done+0x3e>
		return;
    b148:	bf00      	nop
}
    b14a:	3708      	adds	r7, #8
    b14c:	46bd      	mov	sp, r7
    b14e:	bd80      	pop	{r7, pc}
    b150:	20000f30 	.word	0x20000f30

0000b154 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    b154:	b580      	push	{r7, lr}
    b156:	b086      	sub	sp, #24
    b158:	af00      	add	r7, sp, #0
    b15a:	60f8      	str	r0, [r7, #12]
    b15c:	460b      	mov	r3, r1
    b15e:	607a      	str	r2, [r7, #4]
    b160:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b162:	68fb      	ldr	r3, [r7, #12]
    b164:	7c9b      	ldrb	r3, [r3, #18]
    b166:	f003 030f 	and.w	r3, r3, #15
    b16a:	75fb      	strb	r3, [r7, #23]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    b16c:	4b1f      	ldr	r3, [pc, #124]	; (b1ec <_usb_d_dev_trans_stop+0x98>)
    b16e:	881b      	ldrh	r3, [r3, #0]
    b170:	82bb      	strh	r3, [r7, #20]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    b172:	68fb      	ldr	r3, [r7, #12]
    b174:	7c9b      	ldrb	r3, [r3, #18]
    b176:	2bff      	cmp	r3, #255	; 0xff
    b178:	d033      	beq.n	b1e2 <_usb_d_dev_trans_stop+0x8e>
    b17a:	68fb      	ldr	r3, [r7, #12]
    b17c:	7cdb      	ldrb	r3, [r3, #19]
    b17e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b182:	b2db      	uxtb	r3, r3
    b184:	2b00      	cmp	r3, #0
    b186:	d02c      	beq.n	b1e2 <_usb_d_dev_trans_stop+0x8e>
		return;
	}
	/* Stop transfer */
	if (dir) {
    b188:	7afb      	ldrb	r3, [r7, #11]
    b18a:	2b00      	cmp	r3, #0
    b18c:	d006      	beq.n	b19c <_usb_d_dev_trans_stop+0x48>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, 1, false);
    b18e:	7dfb      	ldrb	r3, [r7, #23]
    b190:	2200      	movs	r2, #0
    b192:	2101      	movs	r1, #1
    b194:	4618      	mov	r0, r3
    b196:	4b16      	ldr	r3, [pc, #88]	; (b1f0 <_usb_d_dev_trans_stop+0x9c>)
    b198:	4798      	blx	r3
    b19a:	e005      	b.n	b1a8 <_usb_d_dev_trans_stop+0x54>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
    b19c:	7dfb      	ldrb	r3, [r7, #23]
    b19e:	2200      	movs	r2, #0
    b1a0:	2100      	movs	r1, #0
    b1a2:	4618      	mov	r0, r3
    b1a4:	4b13      	ldr	r3, [pc, #76]	; (b1f4 <_usb_d_dev_trans_stop+0xa0>)
    b1a6:	4798      	blx	r3
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    b1a8:	7afb      	ldrb	r3, [r7, #11]
    b1aa:	f107 0218 	add.w	r2, r7, #24
    b1ae:	4413      	add	r3, r2
    b1b0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b1b4:	461a      	mov	r2, r3
    b1b6:	7dfb      	ldrb	r3, [r7, #23]
    b1b8:	4611      	mov	r1, r2
    b1ba:	4618      	mov	r0, r3
    b1bc:	4b0e      	ldr	r3, [pc, #56]	; (b1f8 <_usb_d_dev_trans_stop+0xa4>)
    b1be:	4798      	blx	r3
	_usbd_ep_int_dis(epn, intflags[dir]);
    b1c0:	7afb      	ldrb	r3, [r7, #11]
    b1c2:	f107 0218 	add.w	r2, r7, #24
    b1c6:	4413      	add	r3, r2
    b1c8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    b1cc:	461a      	mov	r2, r3
    b1ce:	7dfb      	ldrb	r3, [r7, #23]
    b1d0:	4611      	mov	r1, r2
    b1d2:	4618      	mov	r0, r3
    b1d4:	4b09      	ldr	r3, [pc, #36]	; (b1fc <_usb_d_dev_trans_stop+0xa8>)
    b1d6:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, code);
    b1d8:	6879      	ldr	r1, [r7, #4]
    b1da:	68f8      	ldr	r0, [r7, #12]
    b1dc:	4b08      	ldr	r3, [pc, #32]	; (b200 <_usb_d_dev_trans_stop+0xac>)
    b1de:	4798      	blx	r3
    b1e0:	e000      	b.n	b1e4 <_usb_d_dev_trans_stop+0x90>
		return;
    b1e2:	bf00      	nop
}
    b1e4:	3718      	adds	r7, #24
    b1e6:	46bd      	mov	sp, r7
    b1e8:	bd80      	pop	{r7, pc}
    b1ea:	bf00      	nop
    b1ec:	00013db4 	.word	0x00013db4
    b1f0:	00009a09 	.word	0x00009a09
    b1f4:	00009a61 	.word	0x00009a61
    b1f8:	00009511 	.word	0x00009511
    b1fc:	00009561 	.word	0x00009561
    b200:	0000b10d 	.word	0x0000b10d

0000b204 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    b204:	b580      	push	{r7, lr}
    b206:	b086      	sub	sp, #24
    b208:	af00      	add	r7, sp, #0
    b20a:	4603      	mov	r3, r0
    b20c:	6039      	str	r1, [r7, #0]
    b20e:	71fb      	strb	r3, [r7, #7]
	uint8_t            epn   = USB_EP_GET_N(ep);
    b210:	79fb      	ldrb	r3, [r7, #7]
    b212:	f003 030f 	and.w	r3, r3, #15
    b216:	75fb      	strb	r3, [r7, #23]
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    b218:	7dfb      	ldrb	r3, [r7, #23]
    b21a:	015b      	lsls	r3, r3, #5
    b21c:	4a1e      	ldr	r2, [pc, #120]	; (b298 <_usb_d_dev_ep_read_req+0x94>)
    b21e:	4413      	add	r3, r2
    b220:	613b      	str	r3, [r7, #16]
	uint32_t           addr  = bank[0].ADDR.reg;
    b222:	693b      	ldr	r3, [r7, #16]
    b224:	681b      	ldr	r3, [r3, #0]
    b226:	60fb      	str	r3, [r7, #12]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    b228:	693b      	ldr	r3, [r7, #16]
    b22a:	685b      	ldr	r3, [r3, #4]
    b22c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    b230:	b29b      	uxth	r3, r3
    b232:	817b      	strh	r3, [r7, #10]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    b234:	7dfb      	ldrb	r3, [r7, #23]
    b236:	2b04      	cmp	r3, #4
    b238:	d802      	bhi.n	b240 <_usb_d_dev_ep_read_req+0x3c>
    b23a:	683b      	ldr	r3, [r7, #0]
    b23c:	2b00      	cmp	r3, #0
    b23e:	d102      	bne.n	b246 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_PARAM;
    b240:	f06f 0311 	mvn.w	r3, #17
    b244:	e023      	b.n	b28e <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    b246:	7dfb      	ldrb	r3, [r7, #23]
    b248:	4618      	mov	r0, r3
    b24a:	4b14      	ldr	r3, [pc, #80]	; (b29c <_usb_d_dev_ep_read_req+0x98>)
    b24c:	4798      	blx	r3
    b24e:	4603      	mov	r3, r0
    b250:	f083 0301 	eor.w	r3, r3, #1
    b254:	b2db      	uxtb	r3, r3
    b256:	2b00      	cmp	r3, #0
    b258:	d002      	beq.n	b260 <_usb_d_dev_ep_read_req+0x5c>
		return -USB_ERR_FUNC;
    b25a:	f06f 0312 	mvn.w	r3, #18
    b25e:	e016      	b.n	b28e <_usb_d_dev_ep_read_req+0x8a>
	}
	if (!_usbd_ep_is_setup(epn)) {
    b260:	7dfb      	ldrb	r3, [r7, #23]
    b262:	4618      	mov	r0, r3
    b264:	4b0e      	ldr	r3, [pc, #56]	; (b2a0 <_usb_d_dev_ep_read_req+0x9c>)
    b266:	4798      	blx	r3
    b268:	4603      	mov	r3, r0
    b26a:	f083 0301 	eor.w	r3, r3, #1
    b26e:	b2db      	uxtb	r3, r3
    b270:	2b00      	cmp	r3, #0
    b272:	d001      	beq.n	b278 <_usb_d_dev_ep_read_req+0x74>
		return ERR_NONE;
    b274:	2300      	movs	r3, #0
    b276:	e00a      	b.n	b28e <_usb_d_dev_ep_read_req+0x8a>
	}
	memcpy(req_buf, (void *)addr, 8);
    b278:	68fb      	ldr	r3, [r7, #12]
    b27a:	2208      	movs	r2, #8
    b27c:	4619      	mov	r1, r3
    b27e:	6838      	ldr	r0, [r7, #0]
    b280:	4b08      	ldr	r3, [pc, #32]	; (b2a4 <_usb_d_dev_ep_read_req+0xa0>)
    b282:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);
    b284:	7dfb      	ldrb	r3, [r7, #23]
    b286:	4618      	mov	r0, r3
    b288:	4b07      	ldr	r3, [pc, #28]	; (b2a8 <_usb_d_dev_ep_read_req+0xa4>)
    b28a:	4798      	blx	r3

	return bytes;
    b28c:	897b      	ldrh	r3, [r7, #10]
}
    b28e:	4618      	mov	r0, r3
    b290:	3718      	adds	r7, #24
    b292:	46bd      	mov	sp, r7
    b294:	bd80      	pop	{r7, pc}
    b296:	bf00      	nop
    b298:	20000ff8 	.word	0x20000ff8
    b29c:	00009589 	.word	0x00009589
    b2a0:	00009735 	.word	0x00009735
    b2a4:	00013611 	.word	0x00013611
    b2a8:	00009765 	.word	0x00009765

0000b2ac <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    b2ac:	b580      	push	{r7, lr}
    b2ae:	b086      	sub	sp, #24
    b2b0:	af00      	add	r7, sp, #0
    b2b2:	6078      	str	r0, [r7, #4]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    b2b4:	687b      	ldr	r3, [r7, #4]
    b2b6:	7a1b      	ldrb	r3, [r3, #8]
    b2b8:	f003 030f 	and.w	r3, r3, #15
    b2bc:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    b2be:	687b      	ldr	r3, [r7, #4]
    b2c0:	7a1b      	ldrb	r3, [r3, #8]
    b2c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b2c6:	2b00      	cmp	r3, #0
    b2c8:	bf14      	ite	ne
    b2ca:	2301      	movne	r3, #1
    b2cc:	2300      	moveq	r3, #0
    b2ce:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b2d0:	7d7a      	ldrb	r2, [r7, #21]
    b2d2:	7dbb      	ldrb	r3, [r7, #22]
    b2d4:	4611      	mov	r1, r2
    b2d6:	4618      	mov	r0, r3
    b2d8:	4b5f      	ldr	r3, [pc, #380]	; (b458 <_usb_d_dev_ep_trans+0x1ac>)
    b2da:	4798      	blx	r3
    b2dc:	6138      	str	r0, [r7, #16]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b2de:	693b      	ldr	r3, [r7, #16]
    b2e0:	8a1b      	ldrh	r3, [r3, #16]
    b2e2:	f240 32ff 	movw	r2, #1023	; 0x3ff
    b2e6:	4293      	cmp	r3, r2
    b2e8:	d004      	beq.n	b2f4 <_usb_d_dev_ep_trans+0x48>
    b2ea:	693b      	ldr	r3, [r7, #16]
    b2ec:	8a1b      	ldrh	r3, [r3, #16]
    b2ee:	3b01      	subs	r3, #1
    b2f0:	b29b      	uxth	r3, r3
    b2f2:	e001      	b.n	b2f8 <_usb_d_dev_ep_trans+0x4c>
    b2f4:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b2f8:	81fb      	strh	r3, [r7, #14]
	bool     size_n_aligned = (trans->size & size_mask);
    b2fa:	687b      	ldr	r3, [r7, #4]
    b2fc:	685a      	ldr	r2, [r3, #4]
    b2fe:	89fb      	ldrh	r3, [r7, #14]
    b300:	4013      	ands	r3, r2
    b302:	2b00      	cmp	r3, #0
    b304:	bf14      	ite	ne
    b306:	2301      	movne	r3, #1
    b308:	2300      	moveq	r3, #0
    b30a:	737b      	strb	r3, [r7, #13]

	bool use_cache = false;
    b30c:	2300      	movs	r3, #0
    b30e:	75fb      	strb	r3, [r7, #23]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    b310:	7dbb      	ldrb	r3, [r7, #22]
    b312:	2b04      	cmp	r3, #4
    b314:	d902      	bls.n	b31c <_usb_d_dev_ep_trans+0x70>
		return -USB_ERR_PARAM;
    b316:	f06f 0311 	mvn.w	r3, #17
    b31a:	e098      	b.n	b44e <_usb_d_dev_ep_trans+0x1a2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    b31c:	687b      	ldr	r3, [r7, #4]
    b31e:	681b      	ldr	r3, [r3, #0]
    b320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b324:	d31a      	bcc.n	b35c <_usb_d_dev_ep_trans+0xb0>
    b326:	687b      	ldr	r3, [r7, #4]
    b328:	681b      	ldr	r3, [r3, #0]
    b32a:	461a      	mov	r2, r3
    b32c:	687b      	ldr	r3, [r7, #4]
    b32e:	685b      	ldr	r3, [r3, #4]
    b330:	4413      	add	r3, r2
    b332:	4a4a      	ldr	r2, [pc, #296]	; (b45c <_usb_d_dev_ep_trans+0x1b0>)
    b334:	4293      	cmp	r3, r2
    b336:	d811      	bhi.n	b35c <_usb_d_dev_ep_trans+0xb0>
    b338:	687b      	ldr	r3, [r7, #4]
    b33a:	681b      	ldr	r3, [r3, #0]
    b33c:	f003 0303 	and.w	r3, r3, #3
    b340:	2b00      	cmp	r3, #0
    b342:	d10b      	bne.n	b35c <_usb_d_dev_ep_trans+0xb0>
	    || (!dir && (trans->size < ept->size))) {
    b344:	7d7b      	ldrb	r3, [r7, #21]
    b346:	f083 0301 	eor.w	r3, r3, #1
    b34a:	b2db      	uxtb	r3, r3
    b34c:	2b00      	cmp	r3, #0
    b34e:	d00e      	beq.n	b36e <_usb_d_dev_ep_trans+0xc2>
    b350:	687b      	ldr	r3, [r7, #4]
    b352:	685b      	ldr	r3, [r3, #4]
    b354:	693a      	ldr	r2, [r7, #16]
    b356:	8a12      	ldrh	r2, [r2, #16]
    b358:	4293      	cmp	r3, r2
    b35a:	d208      	bcs.n	b36e <_usb_d_dev_ep_trans+0xc2>
		if (!ept->cache) {
    b35c:	693b      	ldr	r3, [r7, #16]
    b35e:	68db      	ldr	r3, [r3, #12]
    b360:	2b00      	cmp	r3, #0
    b362:	d102      	bne.n	b36a <_usb_d_dev_ep_trans+0xbe>
			return -USB_ERR_FUNC;
    b364:	f06f 0312 	mvn.w	r3, #18
    b368:	e071      	b.n	b44e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Use cache all the time. */
		use_cache = true;
    b36a:	2301      	movs	r3, #1
    b36c:	75fb      	strb	r3, [r7, #23]
	}
	if (!dir && size_n_aligned) {
    b36e:	7d7b      	ldrb	r3, [r7, #21]
    b370:	f083 0301 	eor.w	r3, r3, #1
    b374:	b2db      	uxtb	r3, r3
    b376:	2b00      	cmp	r3, #0
    b378:	d009      	beq.n	b38e <_usb_d_dev_ep_trans+0xe2>
    b37a:	7b7b      	ldrb	r3, [r7, #13]
    b37c:	2b00      	cmp	r3, #0
    b37e:	d006      	beq.n	b38e <_usb_d_dev_ep_trans+0xe2>
		if (!ept->cache) {
    b380:	693b      	ldr	r3, [r7, #16]
    b382:	68db      	ldr	r3, [r3, #12]
    b384:	2b00      	cmp	r3, #0
    b386:	d102      	bne.n	b38e <_usb_d_dev_ep_trans+0xe2>
			return -USB_ERR_PARAM;
    b388:	f06f 0311 	mvn.w	r3, #17
    b38c:	e05f      	b.n	b44e <_usb_d_dev_ep_trans+0x1a2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    b38e:	693b      	ldr	r3, [r7, #16]
    b390:	7cdb      	ldrb	r3, [r3, #19]
    b392:	f003 0308 	and.w	r3, r3, #8
    b396:	b2db      	uxtb	r3, r3
    b398:	2b00      	cmp	r3, #0
    b39a:	d001      	beq.n	b3a0 <_usb_d_dev_ep_trans+0xf4>
		return USB_HALTED;
    b39c:	2302      	movs	r3, #2
    b39e:	e056      	b.n	b44e <_usb_d_dev_ep_trans+0x1a2>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    b3a0:	f107 0308 	add.w	r3, r7, #8
    b3a4:	4618      	mov	r0, r3
    b3a6:	4b2e      	ldr	r3, [pc, #184]	; (b460 <_usb_d_dev_ep_trans+0x1b4>)
    b3a8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    b3aa:	693b      	ldr	r3, [r7, #16]
    b3ac:	7cdb      	ldrb	r3, [r3, #19]
    b3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b3b2:	b2db      	uxtb	r3, r3
    b3b4:	2b00      	cmp	r3, #0
    b3b6:	d006      	beq.n	b3c6 <_usb_d_dev_ep_trans+0x11a>
		atomic_leave_critical(&flags);
    b3b8:	f107 0308 	add.w	r3, r7, #8
    b3bc:	4618      	mov	r0, r3
    b3be:	4b29      	ldr	r3, [pc, #164]	; (b464 <_usb_d_dev_ep_trans+0x1b8>)
    b3c0:	4798      	blx	r3
		return USB_BUSY;
    b3c2:	2301      	movs	r3, #1
    b3c4:	e043      	b.n	b44e <_usb_d_dev_ep_trans+0x1a2>
	}
	ept->flags.bits.is_busy = 1;
    b3c6:	693a      	ldr	r2, [r7, #16]
    b3c8:	7cd3      	ldrb	r3, [r2, #19]
    b3ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b3ce:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
    b3d0:	f107 0308 	add.w	r3, r7, #8
    b3d4:	4618      	mov	r0, r3
    b3d6:	4b23      	ldr	r3, [pc, #140]	; (b464 <_usb_d_dev_ep_trans+0x1b8>)
    b3d8:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
    b3da:	687b      	ldr	r3, [r7, #4]
    b3dc:	681a      	ldr	r2, [r3, #0]
    b3de:	693b      	ldr	r3, [r7, #16]
    b3e0:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
    b3e2:	687b      	ldr	r3, [r7, #4]
    b3e4:	685a      	ldr	r2, [r3, #4]
    b3e6:	693b      	ldr	r3, [r7, #16]
    b3e8:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
    b3ea:	693b      	ldr	r3, [r7, #16]
    b3ec:	2200      	movs	r2, #0
    b3ee:	609a      	str	r2, [r3, #8]

	ept->flags.bits.dir       = dir;
    b3f0:	693a      	ldr	r2, [r7, #16]
    b3f2:	7cd3      	ldrb	r3, [r2, #19]
    b3f4:	7d79      	ldrb	r1, [r7, #21]
    b3f6:	f361 13c7 	bfi	r3, r1, #7, #1
    b3fa:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.use_cache = use_cache;
    b3fc:	693a      	ldr	r2, [r7, #16]
    b3fe:	7cd3      	ldrb	r3, [r2, #19]
    b400:	7df9      	ldrb	r1, [r7, #23]
    b402:	f361 1345 	bfi	r3, r1, #5, #1
    b406:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    b408:	687b      	ldr	r3, [r7, #4]
    b40a:	7a5b      	ldrb	r3, [r3, #9]
    b40c:	2b00      	cmp	r3, #0
    b40e:	d007      	beq.n	b420 <_usb_d_dev_ep_trans+0x174>
    b410:	7b7b      	ldrb	r3, [r7, #13]
    b412:	f083 0301 	eor.w	r3, r3, #1
    b416:	b2db      	uxtb	r3, r3
    b418:	2b00      	cmp	r3, #0
    b41a:	d001      	beq.n	b420 <_usb_d_dev_ep_trans+0x174>
    b41c:	2301      	movs	r3, #1
    b41e:	e000      	b.n	b422 <_usb_d_dev_ep_trans+0x176>
    b420:	2300      	movs	r3, #0
    b422:	b2db      	uxtb	r3, r3
    b424:	f003 0301 	and.w	r3, r3, #1
    b428:	b2d9      	uxtb	r1, r3
    b42a:	693a      	ldr	r2, [r7, #16]
    b42c:	7cd3      	ldrb	r3, [r2, #19]
    b42e:	f361 1304 	bfi	r3, r1, #4, #1
    b432:	74d3      	strb	r3, [r2, #19]

	if (dir) {
    b434:	7d7b      	ldrb	r3, [r7, #21]
    b436:	2b00      	cmp	r3, #0
    b438:	d004      	beq.n	b444 <_usb_d_dev_ep_trans+0x198>
		_usb_d_dev_in_next(ept, false);
    b43a:	2100      	movs	r1, #0
    b43c:	6938      	ldr	r0, [r7, #16]
    b43e:	4b0a      	ldr	r3, [pc, #40]	; (b468 <_usb_d_dev_ep_trans+0x1bc>)
    b440:	4798      	blx	r3
    b442:	e003      	b.n	b44c <_usb_d_dev_ep_trans+0x1a0>
	} else {
		_usb_d_dev_out_next(ept, false);
    b444:	2100      	movs	r1, #0
    b446:	6938      	ldr	r0, [r7, #16]
    b448:	4b08      	ldr	r3, [pc, #32]	; (b46c <_usb_d_dev_ep_trans+0x1c0>)
    b44a:	4798      	blx	r3
	}

	return ERR_NONE;
    b44c:	2300      	movs	r3, #0
}
    b44e:	4618      	mov	r0, r3
    b450:	3718      	adds	r7, #24
    b452:	46bd      	mov	sp, r7
    b454:	bd80      	pop	{r7, pc}
    b456:	bf00      	nop
    b458:	00009b1d 	.word	0x00009b1d
    b45c:	20041fff 	.word	0x20041fff
    b460:	0000bc79 	.word	0x0000bc79
    b464:	0000bc9f 	.word	0x0000bc9f
    b468:	00009de5 	.word	0x00009de5
    b46c:	00009ffd 	.word	0x00009ffd

0000b470 <_usb_d_dev_ep_abort>:

void _usb_d_dev_ep_abort(const uint8_t ep)
{
    b470:	b580      	push	{r7, lr}
    b472:	b084      	sub	sp, #16
    b474:	af00      	add	r7, sp, #0
    b476:	4603      	mov	r3, r0
    b478:	71fb      	strb	r3, [r7, #7]
	uint8_t               epn = USB_EP_GET_N(ep);
    b47a:	79fb      	ldrb	r3, [r7, #7]
    b47c:	f003 030f 	and.w	r3, r3, #15
    b480:	73fb      	strb	r3, [r7, #15]
	bool                  dir = USB_EP_GET_DIR(ep);
    b482:	79fb      	ldrb	r3, [r7, #7]
    b484:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b488:	2b00      	cmp	r3, #0
    b48a:	bf14      	ite	ne
    b48c:	2301      	movne	r3, #1
    b48e:	2300      	moveq	r3, #0
    b490:	73bb      	strb	r3, [r7, #14]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    b492:	7bba      	ldrb	r2, [r7, #14]
    b494:	7bfb      	ldrb	r3, [r7, #15]
    b496:	4611      	mov	r1, r2
    b498:	4618      	mov	r0, r3
    b49a:	4b08      	ldr	r3, [pc, #32]	; (b4bc <_usb_d_dev_ep_abort+0x4c>)
    b49c:	4798      	blx	r3
    b49e:	60b8      	str	r0, [r7, #8]
	if (epn > CONF_USB_D_MAX_EP_N) {
    b4a0:	7bfb      	ldrb	r3, [r7, #15]
    b4a2:	2b04      	cmp	r3, #4
    b4a4:	d806      	bhi.n	b4b4 <_usb_d_dev_ep_abort+0x44>
		return;
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
    b4a6:	7bbb      	ldrb	r3, [r7, #14]
    b4a8:	2202      	movs	r2, #2
    b4aa:	4619      	mov	r1, r3
    b4ac:	68b8      	ldr	r0, [r7, #8]
    b4ae:	4b04      	ldr	r3, [pc, #16]	; (b4c0 <_usb_d_dev_ep_abort+0x50>)
    b4b0:	4798      	blx	r3
    b4b2:	e000      	b.n	b4b6 <_usb_d_dev_ep_abort+0x46>
		return;
    b4b4:	bf00      	nop
}
    b4b6:	3710      	adds	r7, #16
    b4b8:	46bd      	mov	sp, r7
    b4ba:	bd80      	pop	{r7, pc}
    b4bc:	00009b1d 	.word	0x00009b1d
    b4c0:	0000b155 	.word	0x0000b155

0000b4c4 <_usb_d_dev_register_callback>:
	}
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    b4c4:	b480      	push	{r7}
    b4c6:	b085      	sub	sp, #20
    b4c8:	af00      	add	r7, sp, #0
    b4ca:	4603      	mov	r3, r0
    b4cc:	6039      	str	r1, [r7, #0]
    b4ce:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b4d0:	683b      	ldr	r3, [r7, #0]
    b4d2:	2b00      	cmp	r3, #0
    b4d4:	d001      	beq.n	b4da <_usb_d_dev_register_callback+0x16>
    b4d6:	683b      	ldr	r3, [r7, #0]
    b4d8:	e000      	b.n	b4dc <_usb_d_dev_register_callback+0x18>
    b4da:	4b0a      	ldr	r3, [pc, #40]	; (b504 <_usb_d_dev_register_callback+0x40>)
    b4dc:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_CB_EVENT) {
    b4de:	79fb      	ldrb	r3, [r7, #7]
    b4e0:	2b01      	cmp	r3, #1
    b4e2:	d103      	bne.n	b4ec <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    b4e4:	4a08      	ldr	r2, [pc, #32]	; (b508 <_usb_d_dev_register_callback+0x44>)
    b4e6:	68fb      	ldr	r3, [r7, #12]
    b4e8:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    b4ea:	e005      	b.n	b4f8 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
    b4ec:	79fb      	ldrb	r3, [r7, #7]
    b4ee:	2b00      	cmp	r3, #0
    b4f0:	d102      	bne.n	b4f8 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    b4f2:	4a05      	ldr	r2, [pc, #20]	; (b508 <_usb_d_dev_register_callback+0x44>)
    b4f4:	68fb      	ldr	r3, [r7, #12]
    b4f6:	6013      	str	r3, [r2, #0]
}
    b4f8:	bf00      	nop
    b4fa:	3714      	adds	r7, #20
    b4fc:	46bd      	mov	sp, r7
    b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    b502:	4770      	bx	lr
    b504:	000093a5 	.word	0x000093a5
    b508:	20000f30 	.word	0x20000f30

0000b50c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
    b50c:	b480      	push	{r7}
    b50e:	b085      	sub	sp, #20
    b510:	af00      	add	r7, sp, #0
    b512:	4603      	mov	r3, r0
    b514:	6039      	str	r1, [r7, #0]
    b516:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    b518:	683b      	ldr	r3, [r7, #0]
    b51a:	2b00      	cmp	r3, #0
    b51c:	d001      	beq.n	b522 <_usb_d_dev_register_ep_callback+0x16>
    b51e:	683b      	ldr	r3, [r7, #0]
    b520:	e000      	b.n	b524 <_usb_d_dev_register_ep_callback+0x18>
    b522:	4b0e      	ldr	r3, [pc, #56]	; (b55c <_usb_d_dev_register_ep_callback+0x50>)
    b524:	60fb      	str	r3, [r7, #12]
	if (type == USB_D_DEV_EP_CB_SETUP) {
    b526:	79fb      	ldrb	r3, [r7, #7]
    b528:	2b00      	cmp	r3, #0
    b52a:	d103      	bne.n	b534 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    b52c:	4a0c      	ldr	r2, [pc, #48]	; (b560 <_usb_d_dev_register_ep_callback+0x54>)
    b52e:	68fb      	ldr	r3, [r7, #12]
    b530:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    b532:	e00c      	b.n	b54e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    b534:	79fb      	ldrb	r3, [r7, #7]
    b536:	2b01      	cmp	r3, #1
    b538:	d103      	bne.n	b542 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    b53a:	4a09      	ldr	r2, [pc, #36]	; (b560 <_usb_d_dev_register_ep_callback+0x54>)
    b53c:	68fb      	ldr	r3, [r7, #12]
    b53e:	60d3      	str	r3, [r2, #12]
}
    b540:	e005      	b.n	b54e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    b542:	79fb      	ldrb	r3, [r7, #7]
    b544:	2b02      	cmp	r3, #2
    b546:	d102      	bne.n	b54e <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    b548:	4a05      	ldr	r2, [pc, #20]	; (b560 <_usb_d_dev_register_ep_callback+0x54>)
    b54a:	68fb      	ldr	r3, [r7, #12]
    b54c:	6113      	str	r3, [r2, #16]
}
    b54e:	bf00      	nop
    b550:	3714      	adds	r7, #20
    b552:	46bd      	mov	sp, r7
    b554:	f85d 7b04 	ldr.w	r7, [sp], #4
    b558:	4770      	bx	lr
    b55a:	bf00      	nop
    b55c:	000093a5 	.word	0x000093a5
    b560:	20000f30 	.word	0x20000f30

0000b564 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    b564:	b580      	push	{r7, lr}
    b566:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b568:	4b01      	ldr	r3, [pc, #4]	; (b570 <USB_0_Handler+0xc>)
    b56a:	4798      	blx	r3
}
    b56c:	bf00      	nop
    b56e:	bd80      	pop	{r7, pc}
    b570:	0000a7d5 	.word	0x0000a7d5

0000b574 <USB_1_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    b574:	b580      	push	{r7, lr}
    b576:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b578:	4b01      	ldr	r3, [pc, #4]	; (b580 <USB_1_Handler+0xc>)
    b57a:	4798      	blx	r3
}
    b57c:	bf00      	nop
    b57e:	bd80      	pop	{r7, pc}
    b580:	0000a7d5 	.word	0x0000a7d5

0000b584 <USB_2_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    b584:	b580      	push	{r7, lr}
    b586:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b588:	4b01      	ldr	r3, [pc, #4]	; (b590 <USB_2_Handler+0xc>)
    b58a:	4798      	blx	r3
}
    b58c:	bf00      	nop
    b58e:	bd80      	pop	{r7, pc}
    b590:	0000a7d5 	.word	0x0000a7d5

0000b594 <USB_3_Handler>:
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    b594:	b580      	push	{r7, lr}
    b596:	af00      	add	r7, sp, #0

	_usb_d_dev_handler();
    b598:	4b01      	ldr	r3, [pc, #4]	; (b5a0 <USB_3_Handler+0xc>)
    b59a:	4798      	blx	r3
}
    b59c:	bf00      	nop
    b59e:	bd80      	pop	{r7, pc}
    b5a0:	0000a7d5 	.word	0x0000a7d5

0000b5a4 <hri_wdt_wait_for_sync>:
typedef uint8_t  hri_wdt_ewctrl_reg_t;
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
    b5a4:	b480      	push	{r7}
    b5a6:	b083      	sub	sp, #12
    b5a8:	af00      	add	r7, sp, #0
    b5aa:	6078      	str	r0, [r7, #4]
    b5ac:	6039      	str	r1, [r7, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b5ae:	bf00      	nop
    b5b0:	687b      	ldr	r3, [r7, #4]
    b5b2:	689a      	ldr	r2, [r3, #8]
    b5b4:	683b      	ldr	r3, [r7, #0]
    b5b6:	4013      	ands	r3, r2
    b5b8:	2b00      	cmp	r3, #0
    b5ba:	d1f9      	bne.n	b5b0 <hri_wdt_wait_for_sync+0xc>
	};
}
    b5bc:	bf00      	nop
    b5be:	370c      	adds	r7, #12
    b5c0:	46bd      	mov	sp, r7
    b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5c6:	4770      	bx	lr

0000b5c8 <hri_wdt_get_CTRLA_ENABLE_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ENABLE_bit(const void *const hw)
{
    b5c8:	b580      	push	{r7, lr}
    b5ca:	b084      	sub	sp, #16
    b5cc:	af00      	add	r7, sp, #0
    b5ce:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b5d0:	210e      	movs	r1, #14
    b5d2:	6878      	ldr	r0, [r7, #4]
    b5d4:	4b0a      	ldr	r3, [pc, #40]	; (b600 <hri_wdt_get_CTRLA_ENABLE_bit+0x38>)
    b5d6:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b5d8:	687b      	ldr	r3, [r7, #4]
    b5da:	781b      	ldrb	r3, [r3, #0]
    b5dc:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ENABLE) >> WDT_CTRLA_ENABLE_Pos;
    b5de:	7bfb      	ldrb	r3, [r7, #15]
    b5e0:	085b      	lsrs	r3, r3, #1
    b5e2:	b2db      	uxtb	r3, r3
    b5e4:	f003 0301 	and.w	r3, r3, #1
    b5e8:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b5ea:	7bfb      	ldrb	r3, [r7, #15]
    b5ec:	2b00      	cmp	r3, #0
    b5ee:	bf14      	ite	ne
    b5f0:	2301      	movne	r3, #1
    b5f2:	2300      	moveq	r3, #0
    b5f4:	b2db      	uxtb	r3, r3
}
    b5f6:	4618      	mov	r0, r3
    b5f8:	3710      	adds	r7, #16
    b5fa:	46bd      	mov	sp, r7
    b5fc:	bd80      	pop	{r7, pc}
    b5fe:	bf00      	nop
    b600:	0000b5a5 	.word	0x0000b5a5

0000b604 <hri_wdt_clear_CTRLA_WEN_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_clear_CTRLA_WEN_bit(const void *const hw)
{
    b604:	b580      	push	{r7, lr}
    b606:	b082      	sub	sp, #8
    b608:	af00      	add	r7, sp, #0
    b60a:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b60c:	687b      	ldr	r3, [r7, #4]
    b60e:	781b      	ldrb	r3, [r3, #0]
    b610:	b2db      	uxtb	r3, r3
    b612:	f023 0304 	bic.w	r3, r3, #4
    b616:	b2da      	uxtb	r2, r3
    b618:	687b      	ldr	r3, [r7, #4]
    b61a:	701a      	strb	r2, [r3, #0]
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b61c:	210e      	movs	r1, #14
    b61e:	6878      	ldr	r0, [r7, #4]
    b620:	4b02      	ldr	r3, [pc, #8]	; (b62c <hri_wdt_clear_CTRLA_WEN_bit+0x28>)
    b622:	4798      	blx	r3
	WDT_CRITICAL_SECTION_LEAVE();
}
    b624:	bf00      	nop
    b626:	3708      	adds	r7, #8
    b628:	46bd      	mov	sp, r7
    b62a:	bd80      	pop	{r7, pc}
    b62c:	0000b5a5 	.word	0x0000b5a5

0000b630 <hri_wdt_get_CTRLA_ALWAYSON_bit>:
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
    b630:	b580      	push	{r7, lr}
    b632:	b084      	sub	sp, #16
    b634:	af00      	add	r7, sp, #0
    b636:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
    b638:	210e      	movs	r1, #14
    b63a:	6878      	ldr	r0, [r7, #4]
    b63c:	4b08      	ldr	r3, [pc, #32]	; (b660 <hri_wdt_get_CTRLA_ALWAYSON_bit+0x30>)
    b63e:	4798      	blx	r3
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b640:	687b      	ldr	r3, [r7, #4]
    b642:	781b      	ldrb	r3, [r3, #0]
    b644:	73fb      	strb	r3, [r7, #15]
	tmp = (tmp & WDT_CTRLA_ALWAYSON) >> WDT_CTRLA_ALWAYSON_Pos;
    b646:	7bfb      	ldrb	r3, [r7, #15]
    b648:	09db      	lsrs	r3, r3, #7
    b64a:	73fb      	strb	r3, [r7, #15]
	return (bool)tmp;
    b64c:	7bfb      	ldrb	r3, [r7, #15]
    b64e:	2b00      	cmp	r3, #0
    b650:	bf14      	ite	ne
    b652:	2301      	movne	r3, #1
    b654:	2300      	moveq	r3, #0
    b656:	b2db      	uxtb	r3, r3
}
    b658:	4618      	mov	r0, r3
    b65a:	3710      	adds	r7, #16
    b65c:	46bd      	mov	sp, r7
    b65e:	bd80      	pop	{r7, pc}
    b660:	0000b5a5 	.word	0x0000b5a5

0000b664 <hri_wdt_write_CONFIG_PER_bf>:
	tmp = (tmp & WDT_CONFIG_PER(mask)) >> WDT_CONFIG_PER_Pos;
	return tmp;
}

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
    b664:	b480      	push	{r7}
    b666:	b085      	sub	sp, #20
    b668:	af00      	add	r7, sp, #0
    b66a:	6078      	str	r0, [r7, #4]
    b66c:	460b      	mov	r3, r1
    b66e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b670:	687b      	ldr	r3, [r7, #4]
    b672:	785b      	ldrb	r3, [r3, #1]
    b674:	73fb      	strb	r3, [r7, #15]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b676:	7bfb      	ldrb	r3, [r7, #15]
    b678:	f023 030f 	bic.w	r3, r3, #15
    b67c:	73fb      	strb	r3, [r7, #15]
	tmp |= WDT_CONFIG_PER(data);
    b67e:	78fb      	ldrb	r3, [r7, #3]
    b680:	f003 030f 	and.w	r3, r3, #15
    b684:	b2da      	uxtb	r2, r3
    b686:	7bfb      	ldrb	r3, [r7, #15]
    b688:	4313      	orrs	r3, r2
    b68a:	73fb      	strb	r3, [r7, #15]
	((Wdt *)hw)->CONFIG.reg = tmp;
    b68c:	687b      	ldr	r3, [r7, #4]
    b68e:	7bfa      	ldrb	r2, [r7, #15]
    b690:	705a      	strb	r2, [r3, #1]
	WDT_CRITICAL_SECTION_LEAVE();
}
    b692:	bf00      	nop
    b694:	3714      	adds	r7, #20
    b696:	46bd      	mov	sp, r7
    b698:	f85d 7b04 	ldr.w	r7, [sp], #4
    b69c:	4770      	bx	lr
	...

0000b6a0 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    b6a0:	b580      	push	{r7, lr}
    b6a2:	b082      	sub	sp, #8
    b6a4:	af00      	add	r7, sp, #0
    b6a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    b6a8:	687b      	ldr	r3, [r7, #4]
    b6aa:	2b00      	cmp	r3, #0
    b6ac:	d005      	beq.n	b6ba <_wdt_init+0x1a>
    b6ae:	687b      	ldr	r3, [r7, #4]
    b6b0:	681b      	ldr	r3, [r3, #0]
    b6b2:	2b00      	cmp	r3, #0
    b6b4:	d001      	beq.n	b6ba <_wdt_init+0x1a>
    b6b6:	2301      	movs	r3, #1
    b6b8:	e000      	b.n	b6bc <_wdt_init+0x1c>
    b6ba:	2300      	movs	r3, #0
    b6bc:	f003 0301 	and.w	r3, r3, #1
    b6c0:	b2db      	uxtb	r3, r3
    b6c2:	2250      	movs	r2, #80	; 0x50
    b6c4:	4913      	ldr	r1, [pc, #76]	; (b714 <_wdt_init+0x74>)
    b6c6:	4618      	mov	r0, r3
    b6c8:	4b13      	ldr	r3, [pc, #76]	; (b718 <_wdt_init+0x78>)
    b6ca:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    b6cc:	687b      	ldr	r3, [r7, #4]
    b6ce:	681b      	ldr	r3, [r3, #0]
    b6d0:	4618      	mov	r0, r3
    b6d2:	4b12      	ldr	r3, [pc, #72]	; (b71c <_wdt_init+0x7c>)
    b6d4:	4798      	blx	r3
    b6d6:	4603      	mov	r3, r0
    b6d8:	2b00      	cmp	r3, #0
    b6da:	d107      	bne.n	b6ec <_wdt_init+0x4c>
    b6dc:	687b      	ldr	r3, [r7, #4]
    b6de:	681b      	ldr	r3, [r3, #0]
    b6e0:	4618      	mov	r0, r3
    b6e2:	4b0f      	ldr	r3, [pc, #60]	; (b720 <_wdt_init+0x80>)
    b6e4:	4798      	blx	r3
    b6e6:	4603      	mov	r3, r0
    b6e8:	2b00      	cmp	r3, #0
    b6ea:	d002      	beq.n	b6f2 <_wdt_init+0x52>
		return ERR_DENIED;
    b6ec:	f06f 0310 	mvn.w	r3, #16
    b6f0:	e00b      	b.n	b70a <_wdt_init+0x6a>
	} else {
		if (CONF_WDT_WINDOW_EN) {
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
    b6f2:	687b      	ldr	r3, [r7, #4]
    b6f4:	681b      	ldr	r3, [r3, #0]
    b6f6:	4618      	mov	r0, r3
    b6f8:	4b0a      	ldr	r3, [pc, #40]	; (b724 <_wdt_init+0x84>)
    b6fa:	4798      	blx	r3
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    b6fc:	687b      	ldr	r3, [r7, #4]
    b6fe:	681b      	ldr	r3, [r3, #0]
    b700:	210b      	movs	r1, #11
    b702:	4618      	mov	r0, r3
    b704:	4b08      	ldr	r3, [pc, #32]	; (b728 <_wdt_init+0x88>)
    b706:	4798      	blx	r3
	}

	return ERR_NONE;
    b708:	2300      	movs	r3, #0
}
    b70a:	4618      	mov	r0, r3
    b70c:	3708      	adds	r7, #8
    b70e:	46bd      	mov	sp, r7
    b710:	bd80      	pop	{r7, pc}
    b712:	bf00      	nop
    b714:	00013db8 	.word	0x00013db8
    b718:	0000405d 	.word	0x0000405d
    b71c:	0000b631 	.word	0x0000b631
    b720:	0000b5c9 	.word	0x0000b5c9
    b724:	0000b605 	.word	0x0000b605
    b728:	0000b665 	.word	0x0000b665

0000b72c <hri_port_set_DIR_reg>:
{
    b72c:	b480      	push	{r7}
    b72e:	b085      	sub	sp, #20
    b730:	af00      	add	r7, sp, #0
    b732:	60f8      	str	r0, [r7, #12]
    b734:	460b      	mov	r3, r1
    b736:	607a      	str	r2, [r7, #4]
    b738:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    b73a:	7afb      	ldrb	r3, [r7, #11]
    b73c:	68fa      	ldr	r2, [r7, #12]
    b73e:	01db      	lsls	r3, r3, #7
    b740:	4413      	add	r3, r2
    b742:	3308      	adds	r3, #8
    b744:	687a      	ldr	r2, [r7, #4]
    b746:	601a      	str	r2, [r3, #0]
}
    b748:	bf00      	nop
    b74a:	3714      	adds	r7, #20
    b74c:	46bd      	mov	sp, r7
    b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b752:	4770      	bx	lr

0000b754 <hri_port_clear_DIR_reg>:
{
    b754:	b480      	push	{r7}
    b756:	b085      	sub	sp, #20
    b758:	af00      	add	r7, sp, #0
    b75a:	60f8      	str	r0, [r7, #12]
    b75c:	460b      	mov	r3, r1
    b75e:	607a      	str	r2, [r7, #4]
    b760:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    b762:	7afb      	ldrb	r3, [r7, #11]
    b764:	68fa      	ldr	r2, [r7, #12]
    b766:	01db      	lsls	r3, r3, #7
    b768:	4413      	add	r3, r2
    b76a:	3304      	adds	r3, #4
    b76c:	687a      	ldr	r2, [r7, #4]
    b76e:	601a      	str	r2, [r3, #0]
}
    b770:	bf00      	nop
    b772:	3714      	adds	r7, #20
    b774:	46bd      	mov	sp, r7
    b776:	f85d 7b04 	ldr.w	r7, [sp], #4
    b77a:	4770      	bx	lr

0000b77c <hri_port_set_OUT_reg>:
{
    b77c:	b480      	push	{r7}
    b77e:	b085      	sub	sp, #20
    b780:	af00      	add	r7, sp, #0
    b782:	60f8      	str	r0, [r7, #12]
    b784:	460b      	mov	r3, r1
    b786:	607a      	str	r2, [r7, #4]
    b788:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    b78a:	7afb      	ldrb	r3, [r7, #11]
    b78c:	68fa      	ldr	r2, [r7, #12]
    b78e:	01db      	lsls	r3, r3, #7
    b790:	4413      	add	r3, r2
    b792:	3318      	adds	r3, #24
    b794:	687a      	ldr	r2, [r7, #4]
    b796:	601a      	str	r2, [r3, #0]
}
    b798:	bf00      	nop
    b79a:	3714      	adds	r7, #20
    b79c:	46bd      	mov	sp, r7
    b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7a2:	4770      	bx	lr

0000b7a4 <hri_port_clear_OUT_reg>:
{
    b7a4:	b480      	push	{r7}
    b7a6:	b085      	sub	sp, #20
    b7a8:	af00      	add	r7, sp, #0
    b7aa:	60f8      	str	r0, [r7, #12]
    b7ac:	460b      	mov	r3, r1
    b7ae:	607a      	str	r2, [r7, #4]
    b7b0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    b7b2:	7afb      	ldrb	r3, [r7, #11]
    b7b4:	68fa      	ldr	r2, [r7, #12]
    b7b6:	01db      	lsls	r3, r3, #7
    b7b8:	4413      	add	r3, r2
    b7ba:	3314      	adds	r3, #20
    b7bc:	687a      	ldr	r2, [r7, #4]
    b7be:	601a      	str	r2, [r3, #0]
}
    b7c0:	bf00      	nop
    b7c2:	3714      	adds	r7, #20
    b7c4:	46bd      	mov	sp, r7
    b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7ca:	4770      	bx	lr

0000b7cc <hri_port_write_PMUX_PMUXE_bf>:
{
    b7cc:	b480      	push	{r7}
    b7ce:	b085      	sub	sp, #20
    b7d0:	af00      	add	r7, sp, #0
    b7d2:	6078      	str	r0, [r7, #4]
    b7d4:	4608      	mov	r0, r1
    b7d6:	4611      	mov	r1, r2
    b7d8:	461a      	mov	r2, r3
    b7da:	4603      	mov	r3, r0
    b7dc:	70fb      	strb	r3, [r7, #3]
    b7de:	460b      	mov	r3, r1
    b7e0:	70bb      	strb	r3, [r7, #2]
    b7e2:	4613      	mov	r3, r2
    b7e4:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b7e6:	78fa      	ldrb	r2, [r7, #3]
    b7e8:	78bb      	ldrb	r3, [r7, #2]
    b7ea:	6879      	ldr	r1, [r7, #4]
    b7ec:	01d2      	lsls	r2, r2, #7
    b7ee:	440a      	add	r2, r1
    b7f0:	4413      	add	r3, r2
    b7f2:	3330      	adds	r3, #48	; 0x30
    b7f4:	781b      	ldrb	r3, [r3, #0]
    b7f6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    b7f8:	7bfb      	ldrb	r3, [r7, #15]
    b7fa:	f023 030f 	bic.w	r3, r3, #15
    b7fe:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
    b800:	787b      	ldrb	r3, [r7, #1]
    b802:	f003 030f 	and.w	r3, r3, #15
    b806:	b2da      	uxtb	r2, r3
    b808:	7bfb      	ldrb	r3, [r7, #15]
    b80a:	4313      	orrs	r3, r2
    b80c:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b80e:	78fa      	ldrb	r2, [r7, #3]
    b810:	78bb      	ldrb	r3, [r7, #2]
    b812:	6879      	ldr	r1, [r7, #4]
    b814:	01d2      	lsls	r2, r2, #7
    b816:	440a      	add	r2, r1
    b818:	4413      	add	r3, r2
    b81a:	3330      	adds	r3, #48	; 0x30
    b81c:	7bfa      	ldrb	r2, [r7, #15]
    b81e:	701a      	strb	r2, [r3, #0]
}
    b820:	bf00      	nop
    b822:	3714      	adds	r7, #20
    b824:	46bd      	mov	sp, r7
    b826:	f85d 7b04 	ldr.w	r7, [sp], #4
    b82a:	4770      	bx	lr

0000b82c <hri_port_write_PMUX_PMUXO_bf>:
{
    b82c:	b480      	push	{r7}
    b82e:	b085      	sub	sp, #20
    b830:	af00      	add	r7, sp, #0
    b832:	6078      	str	r0, [r7, #4]
    b834:	4608      	mov	r0, r1
    b836:	4611      	mov	r1, r2
    b838:	461a      	mov	r2, r3
    b83a:	4603      	mov	r3, r0
    b83c:	70fb      	strb	r3, [r7, #3]
    b83e:	460b      	mov	r3, r1
    b840:	70bb      	strb	r3, [r7, #2]
    b842:	4613      	mov	r3, r2
    b844:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    b846:	78fa      	ldrb	r2, [r7, #3]
    b848:	78bb      	ldrb	r3, [r7, #2]
    b84a:	6879      	ldr	r1, [r7, #4]
    b84c:	01d2      	lsls	r2, r2, #7
    b84e:	440a      	add	r2, r1
    b850:	4413      	add	r3, r2
    b852:	3330      	adds	r3, #48	; 0x30
    b854:	781b      	ldrb	r3, [r3, #0]
    b856:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    b858:	7bfb      	ldrb	r3, [r7, #15]
    b85a:	f003 030f 	and.w	r3, r3, #15
    b85e:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
    b860:	787b      	ldrb	r3, [r7, #1]
    b862:	011b      	lsls	r3, r3, #4
    b864:	b2da      	uxtb	r2, r3
    b866:	7bfb      	ldrb	r3, [r7, #15]
    b868:	4313      	orrs	r3, r2
    b86a:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    b86c:	78fa      	ldrb	r2, [r7, #3]
    b86e:	78bb      	ldrb	r3, [r7, #2]
    b870:	6879      	ldr	r1, [r7, #4]
    b872:	01d2      	lsls	r2, r2, #7
    b874:	440a      	add	r2, r1
    b876:	4413      	add	r3, r2
    b878:	3330      	adds	r3, #48	; 0x30
    b87a:	7bfa      	ldrb	r2, [r7, #15]
    b87c:	701a      	strb	r2, [r3, #0]
}
    b87e:	bf00      	nop
    b880:	3714      	adds	r7, #20
    b882:	46bd      	mov	sp, r7
    b884:	f85d 7b04 	ldr.w	r7, [sp], #4
    b888:	4770      	bx	lr

0000b88a <hri_port_write_PINCFG_PMUXEN_bit>:
{
    b88a:	b480      	push	{r7}
    b88c:	b085      	sub	sp, #20
    b88e:	af00      	add	r7, sp, #0
    b890:	6078      	str	r0, [r7, #4]
    b892:	4608      	mov	r0, r1
    b894:	4611      	mov	r1, r2
    b896:	461a      	mov	r2, r3
    b898:	4603      	mov	r3, r0
    b89a:	70fb      	strb	r3, [r7, #3]
    b89c:	460b      	mov	r3, r1
    b89e:	70bb      	strb	r3, [r7, #2]
    b8a0:	4613      	mov	r3, r2
    b8a2:	707b      	strb	r3, [r7, #1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    b8a4:	78fa      	ldrb	r2, [r7, #3]
    b8a6:	78bb      	ldrb	r3, [r7, #2]
    b8a8:	6879      	ldr	r1, [r7, #4]
    b8aa:	01d2      	lsls	r2, r2, #7
    b8ac:	440a      	add	r2, r1
    b8ae:	4413      	add	r3, r2
    b8b0:	3340      	adds	r3, #64	; 0x40
    b8b2:	781b      	ldrb	r3, [r3, #0]
    b8b4:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
    b8b6:	7bfb      	ldrb	r3, [r7, #15]
    b8b8:	f023 0301 	bic.w	r3, r3, #1
    b8bc:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    b8be:	787a      	ldrb	r2, [r7, #1]
    b8c0:	7bfb      	ldrb	r3, [r7, #15]
    b8c2:	4313      	orrs	r3, r2
    b8c4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    b8c6:	78fa      	ldrb	r2, [r7, #3]
    b8c8:	78bb      	ldrb	r3, [r7, #2]
    b8ca:	6879      	ldr	r1, [r7, #4]
    b8cc:	01d2      	lsls	r2, r2, #7
    b8ce:	440a      	add	r2, r1
    b8d0:	4413      	add	r3, r2
    b8d2:	3340      	adds	r3, #64	; 0x40
    b8d4:	7bfa      	ldrb	r2, [r7, #15]
    b8d6:	701a      	strb	r2, [r3, #0]
}
    b8d8:	bf00      	nop
    b8da:	3714      	adds	r7, #20
    b8dc:	46bd      	mov	sp, r7
    b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8e2:	4770      	bx	lr

0000b8e4 <hri_port_write_WRCONFIG_reg>:
{
    b8e4:	b480      	push	{r7}
    b8e6:	b085      	sub	sp, #20
    b8e8:	af00      	add	r7, sp, #0
    b8ea:	60f8      	str	r0, [r7, #12]
    b8ec:	460b      	mov	r3, r1
    b8ee:	607a      	str	r2, [r7, #4]
    b8f0:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    b8f2:	7afb      	ldrb	r3, [r7, #11]
    b8f4:	68fa      	ldr	r2, [r7, #12]
    b8f6:	01db      	lsls	r3, r3, #7
    b8f8:	4413      	add	r3, r2
    b8fa:	3328      	adds	r3, #40	; 0x28
    b8fc:	687a      	ldr	r2, [r7, #4]
    b8fe:	601a      	str	r2, [r3, #0]
}
    b900:	bf00      	nop
    b902:	3714      	adds	r7, #20
    b904:	46bd      	mov	sp, r7
    b906:	f85d 7b04 	ldr.w	r7, [sp], #4
    b90a:	4770      	bx	lr

0000b90c <_gpio_set_direction>:
{
    b90c:	b580      	push	{r7, lr}
    b90e:	b082      	sub	sp, #8
    b910:	af00      	add	r7, sp, #0
    b912:	4603      	mov	r3, r0
    b914:	6039      	str	r1, [r7, #0]
    b916:	71fb      	strb	r3, [r7, #7]
    b918:	4613      	mov	r3, r2
    b91a:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
    b91c:	79bb      	ldrb	r3, [r7, #6]
    b91e:	2b01      	cmp	r3, #1
    b920:	d01c      	beq.n	b95c <_gpio_set_direction+0x50>
    b922:	2b02      	cmp	r3, #2
    b924:	d037      	beq.n	b996 <_gpio_set_direction+0x8a>
    b926:	2b00      	cmp	r3, #0
    b928:	d14e      	bne.n	b9c8 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b92a:	79fb      	ldrb	r3, [r7, #7]
    b92c:	683a      	ldr	r2, [r7, #0]
    b92e:	4619      	mov	r1, r3
    b930:	482a      	ldr	r0, [pc, #168]	; (b9dc <_gpio_set_direction+0xd0>)
    b932:	4b2b      	ldr	r3, [pc, #172]	; (b9e0 <_gpio_set_direction+0xd4>)
    b934:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b936:	683b      	ldr	r3, [r7, #0]
    b938:	b29b      	uxth	r3, r3
    b93a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b93e:	79fb      	ldrb	r3, [r7, #7]
    b940:	4619      	mov	r1, r3
    b942:	4826      	ldr	r0, [pc, #152]	; (b9dc <_gpio_set_direction+0xd0>)
    b944:	4b27      	ldr	r3, [pc, #156]	; (b9e4 <_gpio_set_direction+0xd8>)
    b946:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b948:	683b      	ldr	r3, [r7, #0]
    b94a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b94c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b950:	79fb      	ldrb	r3, [r7, #7]
    b952:	4619      	mov	r1, r3
    b954:	4821      	ldr	r0, [pc, #132]	; (b9dc <_gpio_set_direction+0xd0>)
    b956:	4b23      	ldr	r3, [pc, #140]	; (b9e4 <_gpio_set_direction+0xd8>)
    b958:	4798      	blx	r3
		break;
    b95a:	e03a      	b.n	b9d2 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
    b95c:	79fb      	ldrb	r3, [r7, #7]
    b95e:	683a      	ldr	r2, [r7, #0]
    b960:	4619      	mov	r1, r3
    b962:	481e      	ldr	r0, [pc, #120]	; (b9dc <_gpio_set_direction+0xd0>)
    b964:	4b1e      	ldr	r3, [pc, #120]	; (b9e0 <_gpio_set_direction+0xd4>)
    b966:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    b968:	683b      	ldr	r3, [r7, #0]
    b96a:	b29b      	uxth	r3, r3
    b96c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b974:	79f9      	ldrb	r1, [r7, #7]
    b976:	461a      	mov	r2, r3
    b978:	4818      	ldr	r0, [pc, #96]	; (b9dc <_gpio_set_direction+0xd0>)
    b97a:	4b1a      	ldr	r3, [pc, #104]	; (b9e4 <_gpio_set_direction+0xd8>)
    b97c:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
    b97e:	683b      	ldr	r3, [r7, #0]
    b980:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
    b982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    b986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b98a:	79f9      	ldrb	r1, [r7, #7]
    b98c:	461a      	mov	r2, r3
    b98e:	4813      	ldr	r0, [pc, #76]	; (b9dc <_gpio_set_direction+0xd0>)
    b990:	4b14      	ldr	r3, [pc, #80]	; (b9e4 <_gpio_set_direction+0xd8>)
    b992:	4798      	blx	r3
		break;
    b994:	e01d      	b.n	b9d2 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
    b996:	79fb      	ldrb	r3, [r7, #7]
    b998:	683a      	ldr	r2, [r7, #0]
    b99a:	4619      	mov	r1, r3
    b99c:	480f      	ldr	r0, [pc, #60]	; (b9dc <_gpio_set_direction+0xd0>)
    b99e:	4b12      	ldr	r3, [pc, #72]	; (b9e8 <_gpio_set_direction+0xdc>)
    b9a0:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    b9a2:	683b      	ldr	r3, [r7, #0]
    b9a4:	b29b      	uxth	r3, r3
    b9a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b9aa:	79fb      	ldrb	r3, [r7, #7]
    b9ac:	4619      	mov	r1, r3
    b9ae:	480b      	ldr	r0, [pc, #44]	; (b9dc <_gpio_set_direction+0xd0>)
    b9b0:	4b0c      	ldr	r3, [pc, #48]	; (b9e4 <_gpio_set_direction+0xd8>)
    b9b2:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    b9b4:	683b      	ldr	r3, [r7, #0]
    b9b6:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
    b9b8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
    b9bc:	79fb      	ldrb	r3, [r7, #7]
    b9be:	4619      	mov	r1, r3
    b9c0:	4806      	ldr	r0, [pc, #24]	; (b9dc <_gpio_set_direction+0xd0>)
    b9c2:	4b08      	ldr	r3, [pc, #32]	; (b9e4 <_gpio_set_direction+0xd8>)
    b9c4:	4798      	blx	r3
		break;
    b9c6:	e004      	b.n	b9d2 <_gpio_set_direction+0xc6>
		ASSERT(false);
    b9c8:	2246      	movs	r2, #70	; 0x46
    b9ca:	4908      	ldr	r1, [pc, #32]	; (b9ec <_gpio_set_direction+0xe0>)
    b9cc:	2000      	movs	r0, #0
    b9ce:	4b08      	ldr	r3, [pc, #32]	; (b9f0 <_gpio_set_direction+0xe4>)
    b9d0:	4798      	blx	r3
}
    b9d2:	bf00      	nop
    b9d4:	3708      	adds	r7, #8
    b9d6:	46bd      	mov	sp, r7
    b9d8:	bd80      	pop	{r7, pc}
    b9da:	bf00      	nop
    b9dc:	41008000 	.word	0x41008000
    b9e0:	0000b755 	.word	0x0000b755
    b9e4:	0000b8e5 	.word	0x0000b8e5
    b9e8:	0000b72d 	.word	0x0000b72d
    b9ec:	00013dd0 	.word	0x00013dd0
    b9f0:	0000405d 	.word	0x0000405d

0000b9f4 <_gpio_set_level>:
{
    b9f4:	b580      	push	{r7, lr}
    b9f6:	b082      	sub	sp, #8
    b9f8:	af00      	add	r7, sp, #0
    b9fa:	4603      	mov	r3, r0
    b9fc:	6039      	str	r1, [r7, #0]
    b9fe:	71fb      	strb	r3, [r7, #7]
    ba00:	4613      	mov	r3, r2
    ba02:	71bb      	strb	r3, [r7, #6]
	if (level) {
    ba04:	79bb      	ldrb	r3, [r7, #6]
    ba06:	2b00      	cmp	r3, #0
    ba08:	d006      	beq.n	ba18 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    ba0a:	79fb      	ldrb	r3, [r7, #7]
    ba0c:	683a      	ldr	r2, [r7, #0]
    ba0e:	4619      	mov	r1, r3
    ba10:	4806      	ldr	r0, [pc, #24]	; (ba2c <_gpio_set_level+0x38>)
    ba12:	4b07      	ldr	r3, [pc, #28]	; (ba30 <_gpio_set_level+0x3c>)
    ba14:	4798      	blx	r3
}
    ba16:	e005      	b.n	ba24 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    ba18:	79fb      	ldrb	r3, [r7, #7]
    ba1a:	683a      	ldr	r2, [r7, #0]
    ba1c:	4619      	mov	r1, r3
    ba1e:	4803      	ldr	r0, [pc, #12]	; (ba2c <_gpio_set_level+0x38>)
    ba20:	4b04      	ldr	r3, [pc, #16]	; (ba34 <_gpio_set_level+0x40>)
    ba22:	4798      	blx	r3
}
    ba24:	bf00      	nop
    ba26:	3708      	adds	r7, #8
    ba28:	46bd      	mov	sp, r7
    ba2a:	bd80      	pop	{r7, pc}
    ba2c:	41008000 	.word	0x41008000
    ba30:	0000b77d 	.word	0x0000b77d
    ba34:	0000b7a5 	.word	0x0000b7a5

0000ba38 <_gpio_set_pin_function>:
{
    ba38:	b590      	push	{r4, r7, lr}
    ba3a:	b085      	sub	sp, #20
    ba3c:	af00      	add	r7, sp, #0
    ba3e:	6078      	str	r0, [r7, #4]
    ba40:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
    ba42:	687b      	ldr	r3, [r7, #4]
    ba44:	095b      	lsrs	r3, r3, #5
    ba46:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
    ba48:	687b      	ldr	r3, [r7, #4]
    ba4a:	b2db      	uxtb	r3, r3
    ba4c:	f003 031f 	and.w	r3, r3, #31
    ba50:	73bb      	strb	r3, [r7, #14]
	if (function == GPIO_PIN_FUNCTION_OFF) {
    ba52:	683b      	ldr	r3, [r7, #0]
    ba54:	f1b3 3fff 	cmp.w	r3, #4294967295
    ba58:	d106      	bne.n	ba68 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
    ba5a:	7bba      	ldrb	r2, [r7, #14]
    ba5c:	7bf9      	ldrb	r1, [r7, #15]
    ba5e:	2300      	movs	r3, #0
    ba60:	4812      	ldr	r0, [pc, #72]	; (baac <_gpio_set_pin_function+0x74>)
    ba62:	4c13      	ldr	r4, [pc, #76]	; (bab0 <_gpio_set_pin_function+0x78>)
    ba64:	47a0      	blx	r4
}
    ba66:	e01d      	b.n	baa4 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
    ba68:	7bba      	ldrb	r2, [r7, #14]
    ba6a:	7bf9      	ldrb	r1, [r7, #15]
    ba6c:	2301      	movs	r3, #1
    ba6e:	480f      	ldr	r0, [pc, #60]	; (baac <_gpio_set_pin_function+0x74>)
    ba70:	4c0f      	ldr	r4, [pc, #60]	; (bab0 <_gpio_set_pin_function+0x78>)
    ba72:	47a0      	blx	r4
		if (pin & 1) {
    ba74:	7bbb      	ldrb	r3, [r7, #14]
    ba76:	f003 0301 	and.w	r3, r3, #1
    ba7a:	2b00      	cmp	r3, #0
    ba7c:	d009      	beq.n	ba92 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
    ba7e:	7bbb      	ldrb	r3, [r7, #14]
    ba80:	085b      	lsrs	r3, r3, #1
    ba82:	b2da      	uxtb	r2, r3
    ba84:	683b      	ldr	r3, [r7, #0]
    ba86:	b2db      	uxtb	r3, r3
    ba88:	7bf9      	ldrb	r1, [r7, #15]
    ba8a:	4808      	ldr	r0, [pc, #32]	; (baac <_gpio_set_pin_function+0x74>)
    ba8c:	4c09      	ldr	r4, [pc, #36]	; (bab4 <_gpio_set_pin_function+0x7c>)
    ba8e:	47a0      	blx	r4
}
    ba90:	e008      	b.n	baa4 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
    ba92:	7bbb      	ldrb	r3, [r7, #14]
    ba94:	085b      	lsrs	r3, r3, #1
    ba96:	b2da      	uxtb	r2, r3
    ba98:	683b      	ldr	r3, [r7, #0]
    ba9a:	b2db      	uxtb	r3, r3
    ba9c:	7bf9      	ldrb	r1, [r7, #15]
    ba9e:	4803      	ldr	r0, [pc, #12]	; (baac <_gpio_set_pin_function+0x74>)
    baa0:	4c05      	ldr	r4, [pc, #20]	; (bab8 <_gpio_set_pin_function+0x80>)
    baa2:	47a0      	blx	r4
}
    baa4:	bf00      	nop
    baa6:	3714      	adds	r7, #20
    baa8:	46bd      	mov	sp, r7
    baaa:	bd90      	pop	{r4, r7, pc}
    baac:	41008000 	.word	0x41008000
    bab0:	0000b88b 	.word	0x0000b88b
    bab4:	0000b82d 	.word	0x0000b82d
    bab8:	0000b7cd 	.word	0x0000b7cd

0000babc <gpio_set_pin_function>:
{
    babc:	b580      	push	{r7, lr}
    babe:	b082      	sub	sp, #8
    bac0:	af00      	add	r7, sp, #0
    bac2:	6078      	str	r0, [r7, #4]
    bac4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
    bac6:	6839      	ldr	r1, [r7, #0]
    bac8:	6878      	ldr	r0, [r7, #4]
    baca:	4b03      	ldr	r3, [pc, #12]	; (bad8 <gpio_set_pin_function+0x1c>)
    bacc:	4798      	blx	r3
}
    bace:	bf00      	nop
    bad0:	3708      	adds	r7, #8
    bad2:	46bd      	mov	sp, r7
    bad4:	bd80      	pop	{r7, pc}
    bad6:	bf00      	nop
    bad8:	0000ba39 	.word	0x0000ba39

0000badc <gpio_set_pin_direction>:
{
    badc:	b580      	push	{r7, lr}
    bade:	b082      	sub	sp, #8
    bae0:	af00      	add	r7, sp, #0
    bae2:	4603      	mov	r3, r0
    bae4:	460a      	mov	r2, r1
    bae6:	71fb      	strb	r3, [r7, #7]
    bae8:	4613      	mov	r3, r2
    baea:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    baec:	79fb      	ldrb	r3, [r7, #7]
    baee:	095b      	lsrs	r3, r3, #5
    baf0:	b2d8      	uxtb	r0, r3
    baf2:	79fb      	ldrb	r3, [r7, #7]
    baf4:	f003 031f 	and.w	r3, r3, #31
    baf8:	2201      	movs	r2, #1
    bafa:	fa02 f303 	lsl.w	r3, r2, r3
    bafe:	79ba      	ldrb	r2, [r7, #6]
    bb00:	4619      	mov	r1, r3
    bb02:	4b03      	ldr	r3, [pc, #12]	; (bb10 <gpio_set_pin_direction+0x34>)
    bb04:	4798      	blx	r3
}
    bb06:	bf00      	nop
    bb08:	3708      	adds	r7, #8
    bb0a:	46bd      	mov	sp, r7
    bb0c:	bd80      	pop	{r7, pc}
    bb0e:	bf00      	nop
    bb10:	0000b90d 	.word	0x0000b90d

0000bb14 <gpio_set_pin_level>:
{
    bb14:	b580      	push	{r7, lr}
    bb16:	b082      	sub	sp, #8
    bb18:	af00      	add	r7, sp, #0
    bb1a:	4603      	mov	r3, r0
    bb1c:	460a      	mov	r2, r1
    bb1e:	71fb      	strb	r3, [r7, #7]
    bb20:	4613      	mov	r3, r2
    bb22:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    bb24:	79fb      	ldrb	r3, [r7, #7]
    bb26:	095b      	lsrs	r3, r3, #5
    bb28:	b2d8      	uxtb	r0, r3
    bb2a:	79fb      	ldrb	r3, [r7, #7]
    bb2c:	f003 031f 	and.w	r3, r3, #31
    bb30:	2201      	movs	r2, #1
    bb32:	fa02 f303 	lsl.w	r3, r2, r3
    bb36:	79ba      	ldrb	r2, [r7, #6]
    bb38:	4619      	mov	r1, r3
    bb3a:	4b03      	ldr	r3, [pc, #12]	; (bb48 <gpio_set_pin_level+0x34>)
    bb3c:	4798      	blx	r3
}
    bb3e:	bf00      	nop
    bb40:	3708      	adds	r7, #8
    bb42:	46bd      	mov	sp, r7
    bb44:	bd80      	pop	{r7, pc}
    bb46:	bf00      	nop
    bb48:	0000b9f5 	.word	0x0000b9f5

0000bb4c <QSPI_N25Q256_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QSPI_N25Q256_exit_xip(void)
{
    bb4c:	b580      	push	{r7, lr}
    bb4e:	b082      	sub	sp, #8
    bb50:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
    bb52:	2100      	movs	r1, #0
    bb54:	2008      	movs	r0, #8
    bb56:	4b24      	ldr	r3, [pc, #144]	; (bbe8 <QSPI_N25Q256_exit_xip+0x9c>)
    bb58:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
    bb5a:	2100      	movs	r1, #0
    bb5c:	202b      	movs	r0, #43	; 0x2b
    bb5e:	4b22      	ldr	r3, [pc, #136]	; (bbe8 <QSPI_N25Q256_exit_xip+0x9c>)
    bb60:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
    bb62:	2100      	movs	r1, #0
    bb64:	202a      	movs	r0, #42	; 0x2a
    bb66:	4b20      	ldr	r3, [pc, #128]	; (bbe8 <QSPI_N25Q256_exit_xip+0x9c>)
    bb68:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
    bb6a:	2102      	movs	r1, #2
    bb6c:	2008      	movs	r0, #8
    bb6e:	4b1f      	ldr	r3, [pc, #124]	; (bbec <QSPI_N25Q256_exit_xip+0xa0>)
    bb70:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
    bb72:	2102      	movs	r1, #2
    bb74:	202b      	movs	r0, #43	; 0x2b
    bb76:	4b1d      	ldr	r3, [pc, #116]	; (bbec <QSPI_N25Q256_exit_xip+0xa0>)
    bb78:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
    bb7a:	2102      	movs	r1, #2
    bb7c:	202a      	movs	r0, #42	; 0x2a
    bb7e:	4b1b      	ldr	r3, [pc, #108]	; (bbec <QSPI_N25Q256_exit_xip+0xa0>)
    bb80:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
    bb82:	2101      	movs	r1, #1
    bb84:	2008      	movs	r0, #8
    bb86:	4b1a      	ldr	r3, [pc, #104]	; (bbf0 <QSPI_N25Q256_exit_xip+0xa4>)
    bb88:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
    bb8a:	2100      	movs	r1, #0
    bb8c:	202b      	movs	r0, #43	; 0x2b
    bb8e:	4b18      	ldr	r3, [pc, #96]	; (bbf0 <QSPI_N25Q256_exit_xip+0xa4>)
    bb90:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
    bb92:	2100      	movs	r1, #0
    bb94:	202a      	movs	r0, #42	; 0x2a
    bb96:	4b16      	ldr	r3, [pc, #88]	; (bbf0 <QSPI_N25Q256_exit_xip+0xa4>)
    bb98:	4798      	blx	r3

	delay_us(1);
    bb9a:	2001      	movs	r0, #1
    bb9c:	4b15      	ldr	r3, [pc, #84]	; (bbf4 <QSPI_N25Q256_exit_xip+0xa8>)
    bb9e:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
    bba0:	2300      	movs	r3, #0
    bba2:	607b      	str	r3, [r7, #4]
    bba4:	e010      	b.n	bbc8 <QSPI_N25Q256_exit_xip+0x7c>
		gpio_set_pin_level(FLASH_CLK, true);
    bba6:	2101      	movs	r1, #1
    bba8:	202a      	movs	r0, #42	; 0x2a
    bbaa:	4b11      	ldr	r3, [pc, #68]	; (bbf0 <QSPI_N25Q256_exit_xip+0xa4>)
    bbac:	4798      	blx	r3
		delay_us(1);
    bbae:	2001      	movs	r0, #1
    bbb0:	4b10      	ldr	r3, [pc, #64]	; (bbf4 <QSPI_N25Q256_exit_xip+0xa8>)
    bbb2:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
    bbb4:	2100      	movs	r1, #0
    bbb6:	202a      	movs	r0, #42	; 0x2a
    bbb8:	4b0d      	ldr	r3, [pc, #52]	; (bbf0 <QSPI_N25Q256_exit_xip+0xa4>)
    bbba:	4798      	blx	r3
		delay_us(1);
    bbbc:	2001      	movs	r0, #1
    bbbe:	4b0d      	ldr	r3, [pc, #52]	; (bbf4 <QSPI_N25Q256_exit_xip+0xa8>)
    bbc0:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
    bbc2:	687b      	ldr	r3, [r7, #4]
    bbc4:	3301      	adds	r3, #1
    bbc6:	607b      	str	r3, [r7, #4]
    bbc8:	687b      	ldr	r3, [r7, #4]
    bbca:	2b06      	cmp	r3, #6
    bbcc:	ddeb      	ble.n	bba6 <QSPI_N25Q256_exit_xip+0x5a>
	}

	gpio_set_pin_level(FLASH_CS, true);
    bbce:	2101      	movs	r1, #1
    bbd0:	202b      	movs	r0, #43	; 0x2b
    bbd2:	4b07      	ldr	r3, [pc, #28]	; (bbf0 <QSPI_N25Q256_exit_xip+0xa4>)
    bbd4:	4798      	blx	r3
	delay_us(1);
    bbd6:	2001      	movs	r0, #1
    bbd8:	4b06      	ldr	r3, [pc, #24]	; (bbf4 <QSPI_N25Q256_exit_xip+0xa8>)
    bbda:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
    bbdc:	4b06      	ldr	r3, [pc, #24]	; (bbf8 <QSPI_N25Q256_exit_xip+0xac>)
    bbde:	4798      	blx	r3
}
    bbe0:	bf00      	nop
    bbe2:	3708      	adds	r7, #8
    bbe4:	46bd      	mov	sp, r7
    bbe6:	bd80      	pop	{r7, pc}
    bbe8:	0000babd 	.word	0x0000babd
    bbec:	0000badd 	.word	0x0000badd
    bbf0:	0000bb15 	.word	0x0000bb15
    bbf4:	000029ed 	.word	0x000029ed
    bbf8:	00001d49 	.word	0x00001d49

0000bbfc <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    bbfc:	b598      	push	{r3, r4, r7, lr}
    bbfe:	af00      	add	r7, sp, #0

	qspi_sync_enable(&QSPI_N25Q256);
    bc00:	4806      	ldr	r0, [pc, #24]	; (bc1c <spi_nor_flash_init+0x20>)
    bc02:	4b07      	ldr	r3, [pc, #28]	; (bc20 <spi_nor_flash_init+0x24>)
    bc04:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    bc06:	2300      	movs	r3, #0
    bc08:	4a06      	ldr	r2, [pc, #24]	; (bc24 <spi_nor_flash_init+0x28>)
    bc0a:	4904      	ldr	r1, [pc, #16]	; (bc1c <spi_nor_flash_init+0x20>)
    bc0c:	4806      	ldr	r0, [pc, #24]	; (bc28 <spi_nor_flash_init+0x2c>)
    bc0e:	4c07      	ldr	r4, [pc, #28]	; (bc2c <spi_nor_flash_init+0x30>)
    bc10:	47a0      	blx	r4
    bc12:	4602      	mov	r2, r0
    bc14:	4b06      	ldr	r3, [pc, #24]	; (bc30 <spi_nor_flash_init+0x34>)
    bc16:	601a      	str	r2, [r3, #0]
	    &SPI_NOR_FLASH_0_descr.parent, &QSPI_N25Q256, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
}
    bc18:	bf00      	nop
    bc1a:	bd98      	pop	{r3, r4, r7, pc}
    bc1c:	20009e38 	.word	0x20009e38
    bc20:	00002f05 	.word	0x00002f05
    bc24:	0000bb4d 	.word	0x0000bb4d
    bc28:	20001098 	.word	0x20001098
    bc2c:	0000c069 	.word	0x0000c069
    bc30:	2000a038 	.word	0x2000a038

0000bc34 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    bc34:	b580      	push	{r7, lr}
    bc36:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    bc38:	4805      	ldr	r0, [pc, #20]	; (bc50 <cdc_device_acm_init+0x1c>)
    bc3a:	4b06      	ldr	r3, [pc, #24]	; (bc54 <cdc_device_acm_init+0x20>)
    bc3c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    bc3e:	4b06      	ldr	r3, [pc, #24]	; (bc58 <cdc_device_acm_init+0x24>)
    bc40:	4798      	blx	r3

	usbdc_start(single_desc);
    bc42:	4806      	ldr	r0, [pc, #24]	; (bc5c <cdc_device_acm_init+0x28>)
    bc44:	4b06      	ldr	r3, [pc, #24]	; (bc60 <cdc_device_acm_init+0x2c>)
    bc46:	4798      	blx	r3
	usbdc_attach();
    bc48:	4b06      	ldr	r3, [pc, #24]	; (bc64 <cdc_device_acm_init+0x30>)
    bc4a:	4798      	blx	r3
}
    bc4c:	bf00      	nop
    bc4e:	bd80      	pop	{r7, pc}
    bc50:	200010e8 	.word	0x200010e8
    bc54:	0000d791 	.word	0x0000d791
    bc58:	0000ca09 	.word	0x0000ca09
    bc5c:	20000200 	.word	0x20000200
    bc60:	0000d82d 	.word	0x0000d82d
    bc64:	0000d87d 	.word	0x0000d87d

0000bc68 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    bc68:	b580      	push	{r7, lr}
    bc6a:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
    bc6c:	4b01      	ldr	r3, [pc, #4]	; (bc74 <usb_init+0xc>)
    bc6e:	4798      	blx	r3
}
    bc70:	bf00      	nop
    bc72:	bd80      	pop	{r7, pc}
    bc74:	0000bc35 	.word	0x0000bc35

0000bc78 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    bc78:	b480      	push	{r7}
    bc7a:	b085      	sub	sp, #20
    bc7c:	af00      	add	r7, sp, #0
    bc7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    bc80:	f3ef 8310 	mrs	r3, PRIMASK
    bc84:	60fb      	str	r3, [r7, #12]
  return(result);
    bc86:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    bc88:	687b      	ldr	r3, [r7, #4]
    bc8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    bc8c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    bc8e:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    bc92:	bf00      	nop
    bc94:	3714      	adds	r7, #20
    bc96:	46bd      	mov	sp, r7
    bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc9c:	4770      	bx	lr

0000bc9e <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    bc9e:	b480      	push	{r7}
    bca0:	b085      	sub	sp, #20
    bca2:	af00      	add	r7, sp, #0
    bca4:	6078      	str	r0, [r7, #4]
    bca6:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    bcaa:	687b      	ldr	r3, [r7, #4]
    bcac:	681b      	ldr	r3, [r3, #0]
    bcae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    bcb0:	68fb      	ldr	r3, [r7, #12]
    bcb2:	f383 8810 	msr	PRIMASK, r3
}
    bcb6:	bf00      	nop
    bcb8:	3714      	adds	r7, #20
    bcba:	46bd      	mov	sp, r7
    bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
    bcc0:	4770      	bx	lr
	...

0000bcc4 <n25q256a_xip_confirm>:
    n25q256a_enable_xip,
    n25q256a_disable_xip,
};

int32_t n25q256a_xip_confirm(const struct spi_nor_flash *const me, const bool on_off)
{
    bcc4:	b580      	push	{r7, lr}
    bcc6:	b08c      	sub	sp, #48	; 0x30
    bcc8:	af00      	add	r7, sp, #0
    bcca:	6078      	str	r0, [r7, #4]
    bccc:	460b      	mov	r3, r1
    bcce:	70fb      	strb	r3, [r7, #3]
	uint8_t                      dummy;
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    bcd0:	687b      	ldr	r3, [r7, #4]
    bcd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bcd4:	687b      	ldr	r3, [r7, #4]
    bcd6:	681b      	ldr	r3, [r3, #0]
    bcd8:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd
    bcda:	f107 030c 	add.w	r3, r7, #12
    bcde:	2200      	movs	r2, #0
    bce0:	601a      	str	r2, [r3, #0]
    bce2:	605a      	str	r2, [r3, #4]
    bce4:	609a      	str	r2, [r3, #8]
    bce6:	60da      	str	r2, [r3, #12]
    bce8:	611a      	str	r2, [r3, #16]
    bcea:	615a      	str	r2, [r3, #20]
	    = {.inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    bcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bcee:	7b1b      	ldrb	r3, [r3, #12]
    bcf0:	2b00      	cmp	r3, #0
    bcf2:	d001      	beq.n	bcf8 <n25q256a_xip_confirm+0x34>
    bcf4:	2206      	movs	r2, #6
    bcf6:	e000      	b.n	bcfa <n25q256a_xip_confirm+0x36>
    bcf8:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    bcfa:	7b3b      	ldrb	r3, [r7, #12]
    bcfc:	f362 0302 	bfi	r3, r2, #0, #3
    bd00:	733b      	strb	r3, [r7, #12]
    bd02:	7b3b      	ldrb	r3, [r7, #12]
    bd04:	f043 0310 	orr.w	r3, r3, #16
    bd08:	733b      	strb	r3, [r7, #12]
    bd0a:	7b3b      	ldrb	r3, [r7, #12]
    bd0c:	f043 0320 	orr.w	r3, r3, #32
    bd10:	733b      	strb	r3, [r7, #12]
    bd12:	7b3b      	ldrb	r3, [r7, #12]
    bd14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bd18:	733b      	strb	r3, [r7, #12]
    bd1a:	7b3b      	ldrb	r3, [r7, #12]
    bd1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bd20:	733b      	strb	r3, [r7, #12]
    bd22:	7b7b      	ldrb	r3, [r7, #13]
    bd24:	f043 0303 	orr.w	r3, r3, #3
    bd28:	737b      	strb	r3, [r7, #13]
    bd2a:	7b7b      	ldrb	r3, [r7, #13]
    bd2c:	2201      	movs	r2, #1
    bd2e:	f362 1305 	bfi	r3, r2, #4, #2
    bd32:	737b      	strb	r3, [r7, #13]
	       .inst_frame.bits.inst_en      = 1,
	       .inst_frame.bits.data_en      = 1,
	       .inst_frame.bits.addr_en      = 1,
	       .inst_frame.bits.opt_en       = 1,
	       .inst_frame.bits.opt_len      = QSPI_OPT_8BIT,
	       .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 8 : 0,
    bd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd36:	7b1b      	ldrb	r3, [r3, #12]
    bd38:	2b00      	cmp	r3, #0
    bd3a:	d001      	beq.n	bd40 <n25q256a_xip_confirm+0x7c>
    bd3c:	2208      	movs	r2, #8
    bd3e:	e000      	b.n	bd42 <n25q256a_xip_confirm+0x7e>
    bd40:	2200      	movs	r2, #0
	struct _qspi_command         cmd
    bd42:	7bbb      	ldrb	r3, [r7, #14]
    bd44:	f362 0304 	bfi	r3, r2, #0, #5
    bd48:	73bb      	strb	r3, [r7, #14]
    bd4a:	230b      	movs	r3, #11
    bd4c:	743b      	strb	r3, [r7, #16]
    bd4e:	78fb      	ldrb	r3, [r7, #3]
    bd50:	2b00      	cmp	r3, #0
    bd52:	d001      	beq.n	bd58 <n25q256a_xip_confirm+0x94>
    bd54:	2300      	movs	r3, #0
    bd56:	e000      	b.n	bd5a <n25q256a_xip_confirm+0x96>
    bd58:	23ff      	movs	r3, #255	; 0xff
    bd5a:	747b      	strb	r3, [r7, #17]
    bd5c:	2301      	movs	r3, #1
    bd5e:	61bb      	str	r3, [r7, #24]
    bd60:	f107 0327 	add.w	r3, r7, #39	; 0x27
    bd64:	623b      	str	r3, [r7, #32]
	       .instruction                  = N25Q_FAST_READ,
	       .option                       = on_off ? 0x00 : 0xFF,
	       .address                      = 0,
	       .buf_len                      = 1,
	       .rx_buf                       = &dummy};
	qspi_sync_serial_run_command(descr, &cmd);
    bd66:	f107 030c 	add.w	r3, r7, #12
    bd6a:	4619      	mov	r1, r3
    bd6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bd6e:	4b07      	ldr	r3, [pc, #28]	; (bd8c <n25q256a_xip_confirm+0xc8>)
    bd70:	4798      	blx	r3
	n25q->xip_mode = on_off ? 2 : 1;
    bd72:	78fb      	ldrb	r3, [r7, #3]
    bd74:	2b00      	cmp	r3, #0
    bd76:	d001      	beq.n	bd7c <n25q256a_xip_confirm+0xb8>
    bd78:	2202      	movs	r2, #2
    bd7a:	e000      	b.n	bd7e <n25q256a_xip_confirm+0xba>
    bd7c:	2201      	movs	r2, #1
    bd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd80:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    bd82:	2300      	movs	r3, #0
}
    bd84:	4618      	mov	r0, r3
    bd86:	3730      	adds	r7, #48	; 0x30
    bd88:	46bd      	mov	sp, r7
    bd8a:	bd80      	pop	{r7, pc}
    bd8c:	00002f7d 	.word	0x00002f7d

0000bd90 <n25q256a_read_reg>:

uint32_t n25q256a_read_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst)
{
    bd90:	b580      	push	{r7, lr}
    bd92:	b08c      	sub	sp, #48	; 0x30
    bd94:	af00      	add	r7, sp, #0
    bd96:	6078      	str	r0, [r7, #4]
    bd98:	460b      	mov	r3, r1
    bd9a:	70fb      	strb	r3, [r7, #3]
    bd9c:	4613      	mov	r3, r2
    bd9e:	70bb      	strb	r3, [r7, #2]
	uint32_t                     status = 0;
    bda0:	2300      	movs	r3, #0
    bda2:	627b      	str	r3, [r7, #36]	; 0x24
	struct n25q256a *            n25q   = (struct n25q256a *)me;
    bda4:	687b      	ldr	r3, [r7, #4]
    bda6:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    bda8:	687b      	ldr	r3, [r7, #4]
    bdaa:	681b      	ldr	r3, [r3, #0]
    bdac:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd    = {.inst_frame.bits.width    = width,
    bdae:	f107 030c 	add.w	r3, r7, #12
    bdb2:	2200      	movs	r2, #0
    bdb4:	601a      	str	r2, [r3, #0]
    bdb6:	605a      	str	r2, [r3, #4]
    bdb8:	609a      	str	r2, [r3, #8]
    bdba:	60da      	str	r2, [r3, #12]
    bdbc:	611a      	str	r2, [r3, #16]
    bdbe:	615a      	str	r2, [r3, #20]
    bdc0:	78fb      	ldrb	r3, [r7, #3]
    bdc2:	f003 0307 	and.w	r3, r3, #7
    bdc6:	b2da      	uxtb	r2, r3
    bdc8:	7b3b      	ldrb	r3, [r7, #12]
    bdca:	f362 0302 	bfi	r3, r2, #0, #3
    bdce:	733b      	strb	r3, [r7, #12]
    bdd0:	7b3b      	ldrb	r3, [r7, #12]
    bdd2:	f043 0310 	orr.w	r3, r3, #16
    bdd6:	733b      	strb	r3, [r7, #12]
    bdd8:	7b3b      	ldrb	r3, [r7, #12]
    bdda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bdde:	733b      	strb	r3, [r7, #12]
    bde0:	78bb      	ldrb	r3, [r7, #2]
    bde2:	743b      	strb	r3, [r7, #16]
    bde4:	2301      	movs	r3, #1
    bde6:	61bb      	str	r3, [r7, #24]
    bde8:	f107 0324 	add.w	r3, r7, #36	; 0x24
    bdec:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_RD_REG_SIZE(inst),
                                .rx_buf                   = &status};
	if (n25q->xip_mode) {
    bdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bdf0:	7b5b      	ldrb	r3, [r3, #13]
    bdf2:	2b00      	cmp	r3, #0
    bdf4:	d003      	beq.n	bdfe <n25q256a_read_reg+0x6e>
		n25q256a_xip_confirm(me, false);
    bdf6:	2100      	movs	r1, #0
    bdf8:	6878      	ldr	r0, [r7, #4]
    bdfa:	4b0a      	ldr	r3, [pc, #40]	; (be24 <n25q256a_read_reg+0x94>)
    bdfc:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    bdfe:	f107 030c 	add.w	r3, r7, #12
    be02:	4619      	mov	r1, r3
    be04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    be06:	4b08      	ldr	r3, [pc, #32]	; (be28 <n25q256a_read_reg+0x98>)
    be08:	4798      	blx	r3
	if (n25q->xip_mode) {
    be0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be0c:	7b5b      	ldrb	r3, [r3, #13]
    be0e:	2b00      	cmp	r3, #0
    be10:	d003      	beq.n	be1a <n25q256a_read_reg+0x8a>
		n25q256a_xip_confirm(me, true);
    be12:	2101      	movs	r1, #1
    be14:	6878      	ldr	r0, [r7, #4]
    be16:	4b03      	ldr	r3, [pc, #12]	; (be24 <n25q256a_read_reg+0x94>)
    be18:	4798      	blx	r3
	}
	return status;
    be1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    be1c:	4618      	mov	r0, r3
    be1e:	3730      	adds	r7, #48	; 0x30
    be20:	46bd      	mov	sp, r7
    be22:	bd80      	pop	{r7, pc}
    be24:	0000bcc5 	.word	0x0000bcc5
    be28:	00002f7d 	.word	0x00002f7d

0000be2c <n25q256a_write_reg>:
void n25q256a_write_reg(const struct spi_nor_flash *const me, uint8_t width, uint8_t inst, uint32_t data)
{
    be2c:	b580      	push	{r7, lr}
    be2e:	b08c      	sub	sp, #48	; 0x30
    be30:	af00      	add	r7, sp, #0
    be32:	60f8      	str	r0, [r7, #12]
    be34:	607b      	str	r3, [r7, #4]
    be36:	460b      	mov	r3, r1
    be38:	72fb      	strb	r3, [r7, #11]
    be3a:	4613      	mov	r3, r2
    be3c:	72bb      	strb	r3, [r7, #10]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    be3e:	68fb      	ldr	r3, [r7, #12]
    be40:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    be42:	68fb      	ldr	r3, [r7, #12]
    be44:	681b      	ldr	r3, [r3, #0]
    be46:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {.inst_frame.bits.width    = width,
    be48:	f107 0310 	add.w	r3, r7, #16
    be4c:	2200      	movs	r2, #0
    be4e:	601a      	str	r2, [r3, #0]
    be50:	605a      	str	r2, [r3, #4]
    be52:	609a      	str	r2, [r3, #8]
    be54:	60da      	str	r2, [r3, #12]
    be56:	611a      	str	r2, [r3, #16]
    be58:	615a      	str	r2, [r3, #20]
    be5a:	7afb      	ldrb	r3, [r7, #11]
    be5c:	f003 0307 	and.w	r3, r3, #7
    be60:	b2da      	uxtb	r2, r3
    be62:	7c3b      	ldrb	r3, [r7, #16]
    be64:	f362 0302 	bfi	r3, r2, #0, #3
    be68:	743b      	strb	r3, [r7, #16]
    be6a:	7c3b      	ldrb	r3, [r7, #16]
    be6c:	f043 0310 	orr.w	r3, r3, #16
    be70:	743b      	strb	r3, [r7, #16]
    be72:	7c3b      	ldrb	r3, [r7, #16]
    be74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    be78:	743b      	strb	r3, [r7, #16]
    be7a:	7c7b      	ldrb	r3, [r7, #17]
    be7c:	2202      	movs	r2, #2
    be7e:	f362 1305 	bfi	r3, r2, #4, #2
    be82:	747b      	strb	r3, [r7, #17]
    be84:	7abb      	ldrb	r3, [r7, #10]
    be86:	753b      	strb	r3, [r7, #20]
    be88:	2301      	movs	r3, #1
    be8a:	61fb      	str	r3, [r7, #28]
    be8c:	1d3b      	adds	r3, r7, #4
    be8e:	623b      	str	r3, [r7, #32]
                                .inst_frame.bits.data_en  = 1,
                                .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
                                .instruction              = inst,
                                .buf_len                  = N25Q_WR_REG_SIZE(inst),
                                .tx_buf                   = &data};
	if (n25q->xip_mode) {
    be90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    be92:	7b5b      	ldrb	r3, [r3, #13]
    be94:	2b00      	cmp	r3, #0
    be96:	d003      	beq.n	bea0 <n25q256a_write_reg+0x74>
		n25q256a_xip_confirm(me, false);
    be98:	2100      	movs	r1, #0
    be9a:	68f8      	ldr	r0, [r7, #12]
    be9c:	4b09      	ldr	r3, [pc, #36]	; (bec4 <n25q256a_write_reg+0x98>)
    be9e:	4798      	blx	r3
	}
	qspi_sync_serial_run_command(descr, &cmd);
    bea0:	f107 0310 	add.w	r3, r7, #16
    bea4:	4619      	mov	r1, r3
    bea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bea8:	4b07      	ldr	r3, [pc, #28]	; (bec8 <n25q256a_write_reg+0x9c>)
    beaa:	4798      	blx	r3
	if (n25q->xip_mode) {
    beac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    beae:	7b5b      	ldrb	r3, [r3, #13]
    beb0:	2b00      	cmp	r3, #0
    beb2:	d003      	beq.n	bebc <n25q256a_write_reg+0x90>
		n25q256a_xip_confirm(me, true);
    beb4:	2101      	movs	r1, #1
    beb6:	68f8      	ldr	r0, [r7, #12]
    beb8:	4b02      	ldr	r3, [pc, #8]	; (bec4 <n25q256a_write_reg+0x98>)
    beba:	4798      	blx	r3
	}
}
    bebc:	bf00      	nop
    bebe:	3730      	adds	r7, #48	; 0x30
    bec0:	46bd      	mov	sp, r7
    bec2:	bd80      	pop	{r7, pc}
    bec4:	0000bcc5 	.word	0x0000bcc5
    bec8:	00002f7d 	.word	0x00002f7d

0000becc <n25q256a_write_enable>:

void n25q256a_write_enable(const struct spi_nor_flash *const me, uint8_t width, bool en)
{
    becc:	b580      	push	{r7, lr}
    bece:	b090      	sub	sp, #64	; 0x40
    bed0:	af00      	add	r7, sp, #0
    bed2:	6078      	str	r0, [r7, #4]
    bed4:	460b      	mov	r3, r1
    bed6:	70fb      	strb	r3, [r7, #3]
    bed8:	4613      	mov	r3, r2
    beda:	70bb      	strb	r3, [r7, #2]
	uint8_t                      status;
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    bedc:	687b      	ldr	r3, [r7, #4]
    bede:	681b      	ldr	r3, [r3, #0]
    bee0:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t                      inst  = (en == true ? N25Q_WRITE_ENABLE : N25Q_WRITE_DISABLE);
    bee2:	78bb      	ldrb	r3, [r7, #2]
    bee4:	2b00      	cmp	r3, #0
    bee6:	d001      	beq.n	beec <n25q256a_write_enable+0x20>
    bee8:	2306      	movs	r3, #6
    beea:	e000      	b.n	beee <n25q256a_write_enable+0x22>
    beec:	2304      	movs	r3, #4
    beee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	struct _qspi_command cmd_en = {.inst_frame.bits.width = width, .inst_frame.bits.inst_en = 1, .instruction = inst};
    bef2:	f107 0320 	add.w	r3, r7, #32
    bef6:	2200      	movs	r2, #0
    bef8:	601a      	str	r2, [r3, #0]
    befa:	605a      	str	r2, [r3, #4]
    befc:	609a      	str	r2, [r3, #8]
    befe:	60da      	str	r2, [r3, #12]
    bf00:	611a      	str	r2, [r3, #16]
    bf02:	615a      	str	r2, [r3, #20]
    bf04:	78fb      	ldrb	r3, [r7, #3]
    bf06:	f003 0307 	and.w	r3, r3, #7
    bf0a:	b2da      	uxtb	r2, r3
    bf0c:	f897 3020 	ldrb.w	r3, [r7, #32]
    bf10:	f362 0302 	bfi	r3, r2, #0, #3
    bf14:	f887 3020 	strb.w	r3, [r7, #32]
    bf18:	f897 3020 	ldrb.w	r3, [r7, #32]
    bf1c:	f043 0310 	orr.w	r3, r3, #16
    bf20:	f887 3020 	strb.w	r3, [r7, #32]
    bf24:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    bf28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	struct _qspi_command cmd_st = {.inst_frame.bits.width    = width,
    bf2c:	f107 0308 	add.w	r3, r7, #8
    bf30:	2200      	movs	r2, #0
    bf32:	601a      	str	r2, [r3, #0]
    bf34:	605a      	str	r2, [r3, #4]
    bf36:	609a      	str	r2, [r3, #8]
    bf38:	60da      	str	r2, [r3, #12]
    bf3a:	611a      	str	r2, [r3, #16]
    bf3c:	615a      	str	r2, [r3, #20]
    bf3e:	78fb      	ldrb	r3, [r7, #3]
    bf40:	f003 0307 	and.w	r3, r3, #7
    bf44:	b2da      	uxtb	r2, r3
    bf46:	7a3b      	ldrb	r3, [r7, #8]
    bf48:	f362 0302 	bfi	r3, r2, #0, #3
    bf4c:	723b      	strb	r3, [r7, #8]
    bf4e:	7a3b      	ldrb	r3, [r7, #8]
    bf50:	f043 0310 	orr.w	r3, r3, #16
    bf54:	723b      	strb	r3, [r7, #8]
    bf56:	7a3b      	ldrb	r3, [r7, #8]
    bf58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bf5c:	723b      	strb	r3, [r7, #8]
    bf5e:	2305      	movs	r3, #5
    bf60:	733b      	strb	r3, [r7, #12]
    bf62:	2301      	movs	r3, #1
    bf64:	617b      	str	r3, [r7, #20]
    bf66:	f107 033a 	add.w	r3, r7, #58	; 0x3a
    bf6a:	61fb      	str	r3, [r7, #28]
	                               .inst_frame.bits.tfr_type = QSPI_READ_ACCESS,
	                               .instruction              = N25Q_READ_STATUS_REGISTER,
	                               .buf_len                  = 1,
	                               .rx_buf                   = &status};
	do {
		qspi_sync_serial_run_command(descr, &cmd_en);
    bf6c:	f107 0320 	add.w	r3, r7, #32
    bf70:	4619      	mov	r1, r3
    bf72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    bf74:	4b08      	ldr	r3, [pc, #32]	; (bf98 <n25q256a_write_enable+0xcc>)
    bf76:	4798      	blx	r3
		qspi_sync_serial_run_command(descr, &cmd_st);
    bf78:	f107 0308 	add.w	r3, r7, #8
    bf7c:	4619      	mov	r1, r3
    bf7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    bf80:	4b05      	ldr	r3, [pc, #20]	; (bf98 <n25q256a_write_enable+0xcc>)
    bf82:	4798      	blx	r3
	} while ((status & (1 << 1)) == 0);
    bf84:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    bf88:	f003 0302 	and.w	r3, r3, #2
    bf8c:	2b00      	cmp	r3, #0
    bf8e:	d0ed      	beq.n	bf6c <n25q256a_write_enable+0xa0>
}
    bf90:	bf00      	nop
    bf92:	3740      	adds	r7, #64	; 0x40
    bf94:	46bd      	mov	sp, r7
    bf96:	bd80      	pop	{r7, pc}
    bf98:	00002f7d 	.word	0x00002f7d

0000bf9c <n25q256a_switch_mode>:

void n25q256a_switch_mode(const struct spi_nor_flash *const me, uint8_t mode)
{
    bf9c:	b590      	push	{r4, r7, lr}
    bf9e:	b087      	sub	sp, #28
    bfa0:	af00      	add	r7, sp, #0
    bfa2:	6078      	str	r0, [r7, #4]
    bfa4:	460b      	mov	r3, r1
    bfa6:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q   = (struct n25q256a *)me;
    bfa8:	687b      	ldr	r3, [r7, #4]
    bfaa:	60fb      	str	r3, [r7, #12]
	uint8_t          width  = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    bfac:	68fb      	ldr	r3, [r7, #12]
    bfae:	7b1b      	ldrb	r3, [r3, #12]
    bfb0:	2b00      	cmp	r3, #0
    bfb2:	d001      	beq.n	bfb8 <n25q256a_switch_mode+0x1c>
    bfb4:	2306      	movs	r3, #6
    bfb6:	e000      	b.n	bfba <n25q256a_switch_mode+0x1e>
    bfb8:	2300      	movs	r3, #0
    bfba:	72fb      	strb	r3, [r7, #11]
	uint32_t         evcfg  = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    bfbc:	7afb      	ldrb	r3, [r7, #11]
    bfbe:	2265      	movs	r2, #101	; 0x65
    bfc0:	4619      	mov	r1, r3
    bfc2:	6878      	ldr	r0, [r7, #4]
    bfc4:	4b25      	ldr	r3, [pc, #148]	; (c05c <n25q256a_switch_mode+0xc0>)
    bfc6:	4798      	blx	r3
    bfc8:	6178      	str	r0, [r7, #20]
	uint8_t          modify = 0;
    bfca:	2300      	movs	r3, #0
    bfcc:	74fb      	strb	r3, [r7, #19]
	if (n25q->quad_mode == mode) {
    bfce:	68fb      	ldr	r3, [r7, #12]
    bfd0:	7b1b      	ldrb	r3, [r3, #12]
    bfd2:	78fa      	ldrb	r2, [r7, #3]
    bfd4:	429a      	cmp	r2, r3
    bfd6:	d03d      	beq.n	c054 <n25q256a_switch_mode+0xb8>
		return;
	}
	if (mode) {
    bfd8:	78fb      	ldrb	r3, [r7, #3]
    bfda:	2b00      	cmp	r3, #0
    bfdc:	d00b      	beq.n	bff6 <n25q256a_switch_mode+0x5a>
		if (evcfg & 0x80) {
    bfde:	697b      	ldr	r3, [r7, #20]
    bfe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bfe4:	2b00      	cmp	r3, #0
    bfe6:	d011      	beq.n	c00c <n25q256a_switch_mode+0x70>
			evcfg &= 0x1F;
    bfe8:	697b      	ldr	r3, [r7, #20]
    bfea:	f003 031f 	and.w	r3, r3, #31
    bfee:	617b      	str	r3, [r7, #20]
			modify = 1;
    bff0:	2301      	movs	r3, #1
    bff2:	74fb      	strb	r3, [r7, #19]
    bff4:	e00a      	b.n	c00c <n25q256a_switch_mode+0x70>
		}
	} else {
		if (!(evcfg & 0x80)) {
    bff6:	697b      	ldr	r3, [r7, #20]
    bff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    bffc:	2b00      	cmp	r3, #0
    bffe:	d105      	bne.n	c00c <n25q256a_switch_mode+0x70>
			evcfg |= 0xC0;
    c000:	697b      	ldr	r3, [r7, #20]
    c002:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    c006:	617b      	str	r3, [r7, #20]
			modify = 1;
    c008:	2301      	movs	r3, #1
    c00a:	74fb      	strb	r3, [r7, #19]
		}
	}
	if (modify) {
    c00c:	7cfb      	ldrb	r3, [r7, #19]
    c00e:	2b00      	cmp	r3, #0
    c010:	d021      	beq.n	c056 <n25q256a_switch_mode+0xba>
		n25q->quad_mode = mode;
    c012:	68fb      	ldr	r3, [r7, #12]
    c014:	78fa      	ldrb	r2, [r7, #3]
    c016:	731a      	strb	r2, [r3, #12]
		n25q256a_write_enable(me, width, true);
    c018:	7afb      	ldrb	r3, [r7, #11]
    c01a:	2201      	movs	r2, #1
    c01c:	4619      	mov	r1, r3
    c01e:	6878      	ldr	r0, [r7, #4]
    c020:	4b0f      	ldr	r3, [pc, #60]	; (c060 <n25q256a_switch_mode+0xc4>)
    c022:	4798      	blx	r3
		n25q256a_write_reg(me, width, N25Q_WRITE_ENHANCED_VOLATILE_CONFIG_REGISTER, evcfg);
    c024:	7af9      	ldrb	r1, [r7, #11]
    c026:	697b      	ldr	r3, [r7, #20]
    c028:	2261      	movs	r2, #97	; 0x61
    c02a:	6878      	ldr	r0, [r7, #4]
    c02c:	4c0d      	ldr	r4, [pc, #52]	; (c064 <n25q256a_switch_mode+0xc8>)
    c02e:	47a0      	blx	r4
		width           = mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c030:	78fb      	ldrb	r3, [r7, #3]
    c032:	2b00      	cmp	r3, #0
    c034:	d001      	beq.n	c03a <n25q256a_switch_mode+0x9e>
    c036:	2306      	movs	r3, #6
    c038:	e000      	b.n	c03c <n25q256a_switch_mode+0xa0>
    c03a:	2300      	movs	r3, #0
    c03c:	72fb      	strb	r3, [r7, #11]
		evcfg           = n25q256a_read_reg(me, width, N25Q_READ_ENHANCED_VOLATILE_CONFIG_REGISTER);
    c03e:	7afb      	ldrb	r3, [r7, #11]
    c040:	2265      	movs	r2, #101	; 0x65
    c042:	4619      	mov	r1, r3
    c044:	6878      	ldr	r0, [r7, #4]
    c046:	4b05      	ldr	r3, [pc, #20]	; (c05c <n25q256a_switch_mode+0xc0>)
    c048:	4798      	blx	r3
    c04a:	6178      	str	r0, [r7, #20]
		n25q->quad_mode = mode;
    c04c:	68fb      	ldr	r3, [r7, #12]
    c04e:	78fa      	ldrb	r2, [r7, #3]
    c050:	731a      	strb	r2, [r3, #12]
    c052:	e000      	b.n	c056 <n25q256a_switch_mode+0xba>
		return;
    c054:	bf00      	nop
	}
}
    c056:	371c      	adds	r7, #28
    c058:	46bd      	mov	sp, r7
    c05a:	bd90      	pop	{r4, r7, pc}
    c05c:	0000bd91 	.word	0x0000bd91
    c060:	0000becd 	.word	0x0000becd
    c064:	0000be2d 	.word	0x0000be2d

0000c068 <n25q256a_construct>:
/**
 * \brief Construct n25q256a spi nor flash
 */
struct spi_nor_flash *n25q256a_construct(struct spi_nor_flash *const me, void *const io, func pin_exit_xip,
                                         const uint8_t quad_mode)
{
    c068:	b580      	push	{r7, lr}
    c06a:	b086      	sub	sp, #24
    c06c:	af00      	add	r7, sp, #0
    c06e:	60f8      	str	r0, [r7, #12]
    c070:	60b9      	str	r1, [r7, #8]
    c072:	607a      	str	r2, [r7, #4]
    c074:	70fb      	strb	r3, [r7, #3]
	struct n25q256a *n25q = (struct n25q256a *)me;
    c076:	68fb      	ldr	r3, [r7, #12]
    c078:	617b      	str	r3, [r7, #20]
	spi_nor_flash_construct(me, io, &n25q256a_interface);
    c07a:	4a0c      	ldr	r2, [pc, #48]	; (c0ac <n25q256a_construct+0x44>)
    c07c:	68b9      	ldr	r1, [r7, #8]
    c07e:	68f8      	ldr	r0, [r7, #12]
    c080:	4b0b      	ldr	r3, [pc, #44]	; (c0b0 <n25q256a_construct+0x48>)
    c082:	4798      	blx	r3
	n25q->quad_mode    = 0;
    c084:	697b      	ldr	r3, [r7, #20]
    c086:	2200      	movs	r2, #0
    c088:	731a      	strb	r2, [r3, #12]
	n25q->xip_mode     = false;
    c08a:	697b      	ldr	r3, [r7, #20]
    c08c:	2200      	movs	r2, #0
    c08e:	735a      	strb	r2, [r3, #13]
	n25q->pin_exit_xip = pin_exit_xip;
    c090:	697b      	ldr	r3, [r7, #20]
    c092:	687a      	ldr	r2, [r7, #4]
    c094:	609a      	str	r2, [r3, #8]
	n25q256a_switch_mode(me, quad_mode);
    c096:	78fb      	ldrb	r3, [r7, #3]
    c098:	4619      	mov	r1, r3
    c09a:	68f8      	ldr	r0, [r7, #12]
    c09c:	4b05      	ldr	r3, [pc, #20]	; (c0b4 <n25q256a_construct+0x4c>)
    c09e:	4798      	blx	r3
	return me;
    c0a0:	68fb      	ldr	r3, [r7, #12]
}
    c0a2:	4618      	mov	r0, r3
    c0a4:	3718      	adds	r7, #24
    c0a6:	46bd      	mov	sp, r7
    c0a8:	bd80      	pop	{r7, pc}
    c0aa:	bf00      	nop
    c0ac:	00013dec 	.word	0x00013dec
    c0b0:	0000c545 	.word	0x0000c545
    c0b4:	0000bf9d 	.word	0x0000bf9d

0000c0b8 <n25q256a_read>:

int32_t n25q256a_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c0b8:	b580      	push	{r7, lr}
    c0ba:	b08c      	sub	sp, #48	; 0x30
    c0bc:	af00      	add	r7, sp, #0
    c0be:	60f8      	str	r0, [r7, #12]
    c0c0:	60b9      	str	r1, [r7, #8]
    c0c2:	607a      	str	r2, [r7, #4]
    c0c4:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c0c6:	68fb      	ldr	r3, [r7, #12]
    c0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c0ca:	68fb      	ldr	r3, [r7, #12]
    c0cc:	681b      	ldr	r3, [r3, #0]
    c0ce:	62bb      	str	r3, [r7, #40]	; 0x28

	struct _qspi_command cmd = {
    c0d0:	f107 0310 	add.w	r3, r7, #16
    c0d4:	2200      	movs	r2, #0
    c0d6:	601a      	str	r2, [r3, #0]
    c0d8:	605a      	str	r2, [r3, #4]
    c0da:	609a      	str	r2, [r3, #8]
    c0dc:	60da      	str	r2, [r3, #12]
    c0de:	611a      	str	r2, [r3, #16]
    c0e0:	615a      	str	r2, [r3, #20]
	    .inst_frame.bits.width        = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c0e4:	7b1b      	ldrb	r3, [r3, #12]
    c0e6:	2b00      	cmp	r3, #0
    c0e8:	d001      	beq.n	c0ee <n25q256a_read+0x36>
    c0ea:	2206      	movs	r2, #6
    c0ec:	e000      	b.n	c0f0 <n25q256a_read+0x38>
    c0ee:	2200      	movs	r2, #0
	struct _qspi_command cmd = {
    c0f0:	7c3b      	ldrb	r3, [r7, #16]
    c0f2:	f362 0302 	bfi	r3, r2, #0, #3
    c0f6:	743b      	strb	r3, [r7, #16]
    c0f8:	7c3b      	ldrb	r3, [r7, #16]
    c0fa:	f043 0310 	orr.w	r3, r3, #16
    c0fe:	743b      	strb	r3, [r7, #16]
    c100:	7c3b      	ldrb	r3, [r7, #16]
    c102:	f043 0320 	orr.w	r3, r3, #32
    c106:	743b      	strb	r3, [r7, #16]
    c108:	7c3b      	ldrb	r3, [r7, #16]
    c10a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c10e:	743b      	strb	r3, [r7, #16]
    c110:	7c7b      	ldrb	r3, [r7, #17]
    c112:	2201      	movs	r2, #1
    c114:	f362 1305 	bfi	r3, r2, #4, #2
    c118:	747b      	strb	r3, [r7, #17]
	    .inst_frame.bits.inst_en      = 1,
	    .inst_frame.bits.data_en      = 1,
	    .inst_frame.bits.addr_en      = 1,
	    .inst_frame.bits.dummy_cycles = n25q->quad_mode ? 10 : 8,
    c11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c11c:	7b1b      	ldrb	r3, [r3, #12]
    c11e:	2b00      	cmp	r3, #0
    c120:	d001      	beq.n	c126 <n25q256a_read+0x6e>
    c122:	220a      	movs	r2, #10
    c124:	e000      	b.n	c128 <n25q256a_read+0x70>
    c126:	2208      	movs	r2, #8
	struct _qspi_command cmd = {
    c128:	7cbb      	ldrb	r3, [r7, #18]
    c12a:	f362 0304 	bfi	r3, r2, #0, #5
    c12e:	74bb      	strb	r3, [r7, #18]
    c130:	230b      	movs	r3, #11
    c132:	753b      	strb	r3, [r7, #20]
    c134:	687b      	ldr	r3, [r7, #4]
    c136:	61bb      	str	r3, [r7, #24]
    c138:	683b      	ldr	r3, [r7, #0]
    c13a:	61fb      	str	r3, [r7, #28]
    c13c:	68bb      	ldr	r3, [r7, #8]
    c13e:	627b      	str	r3, [r7, #36]	; 0x24
	//	.instruction                  = N25Q_READ_ARRAY_LF,
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};
	qspi_sync_serial_run_command(descr, &cmd);
    c140:	f107 0310 	add.w	r3, r7, #16
    c144:	4619      	mov	r1, r3
    c146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c148:	4b03      	ldr	r3, [pc, #12]	; (c158 <n25q256a_read+0xa0>)
    c14a:	4798      	blx	r3
	return ERR_NONE;
    c14c:	2300      	movs	r3, #0
}
    c14e:	4618      	mov	r0, r3
    c150:	3730      	adds	r7, #48	; 0x30
    c152:	46bd      	mov	sp, r7
    c154:	bd80      	pop	{r7, pc}
    c156:	bf00      	nop
    c158:	00002f7d 	.word	0x00002f7d

0000c15c <n25q256a_write>:

int32_t n25q256a_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    c15c:	b580      	push	{r7, lr}
    c15e:	b08c      	sub	sp, #48	; 0x30
    c160:	af00      	add	r7, sp, #0
    c162:	60f8      	str	r0, [r7, #12]
    c164:	60b9      	str	r1, [r7, #8]
    c166:	607a      	str	r2, [r7, #4]
    c168:	603b      	str	r3, [r7, #0]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c16a:	68fb      	ldr	r3, [r7, #12]
    c16c:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c16e:	68fb      	ldr	r3, [r7, #12]
    c170:	681b      	ldr	r3, [r3, #0]
    c172:	62bb      	str	r3, [r7, #40]	; 0x28
	struct _qspi_command         cmd   = {
    c174:	f107 0310 	add.w	r3, r7, #16
    c178:	2200      	movs	r2, #0
    c17a:	601a      	str	r2, [r3, #0]
    c17c:	605a      	str	r2, [r3, #4]
    c17e:	609a      	str	r2, [r3, #8]
    c180:	60da      	str	r2, [r3, #12]
    c182:	611a      	str	r2, [r3, #16]
    c184:	615a      	str	r2, [r3, #20]
    c186:	7c3b      	ldrb	r3, [r7, #16]
    c188:	f043 0310 	orr.w	r3, r3, #16
    c18c:	743b      	strb	r3, [r7, #16]
    c18e:	7c3b      	ldrb	r3, [r7, #16]
    c190:	f043 0320 	orr.w	r3, r3, #32
    c194:	743b      	strb	r3, [r7, #16]
    c196:	7c3b      	ldrb	r3, [r7, #16]
    c198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c19c:	743b      	strb	r3, [r7, #16]
    c19e:	7c7b      	ldrb	r3, [r7, #17]
    c1a0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    c1a4:	747b      	strb	r3, [r7, #17]
    c1a6:	2302      	movs	r3, #2
    c1a8:	753b      	strb	r3, [r7, #20]
    c1aa:	687b      	ldr	r3, [r7, #4]
    c1ac:	61bb      	str	r3, [r7, #24]
    c1ae:	683b      	ldr	r3, [r7, #0]
    c1b0:	61fb      	str	r3, [r7, #28]
    c1b2:	68bb      	ldr	r3, [r7, #8]
    c1b4:	623b      	str	r3, [r7, #32]
        .address                  = address,
        .buf_len                  = length,
        .tx_buf                   = buf,
    };
	/* Command, address, data width are different for different modes */
	cmd.inst_frame.bits.width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c1b8:	7b1b      	ldrb	r3, [r3, #12]
    c1ba:	2b00      	cmp	r3, #0
    c1bc:	d001      	beq.n	c1c2 <n25q256a_write+0x66>
    c1be:	2206      	movs	r2, #6
    c1c0:	e000      	b.n	c1c4 <n25q256a_write+0x68>
    c1c2:	2200      	movs	r2, #0
    c1c4:	7c3b      	ldrb	r3, [r7, #16]
    c1c6:	f362 0302 	bfi	r3, r2, #0, #3
    c1ca:	743b      	strb	r3, [r7, #16]
	while (length) {
    c1cc:	e035      	b.n	c23a <n25q256a_write+0xde>
		cmd.address = address;
    c1ce:	687b      	ldr	r3, [r7, #4]
    c1d0:	61bb      	str	r3, [r7, #24]
		if (length <= N25Q_PAGE_SIZE) {
    c1d2:	683b      	ldr	r3, [r7, #0]
    c1d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c1d8:	d802      	bhi.n	c1e0 <n25q256a_write+0x84>
			cmd.buf_len = length;
    c1da:	683b      	ldr	r3, [r7, #0]
    c1dc:	61fb      	str	r3, [r7, #28]
    c1de:	e002      	b.n	c1e6 <n25q256a_write+0x8a>
		} else {
			cmd.buf_len = N25Q_PAGE_SIZE;
    c1e0:	f44f 7380 	mov.w	r3, #256	; 0x100
    c1e4:	61fb      	str	r3, [r7, #28]
		}
		/* PROGRAM commands are initiated by first executing the
		 * WRITE ENABLE command to set the write enable latch bit to 1.
		 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c1e6:	7c3b      	ldrb	r3, [r7, #16]
    c1e8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c1ec:	b2db      	uxtb	r3, r3
    c1ee:	2201      	movs	r2, #1
    c1f0:	4619      	mov	r1, r3
    c1f2:	68f8      	ldr	r0, [r7, #12]
    c1f4:	4b19      	ldr	r3, [pc, #100]	; (c25c <n25q256a_write+0x100>)
    c1f6:	4798      	blx	r3
		/* Send PROGRAM command */
		qspi_sync_serial_run_command(descr, &cmd);
    c1f8:	f107 0310 	add.w	r3, r7, #16
    c1fc:	4619      	mov	r1, r3
    c1fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c200:	4b17      	ldr	r3, [pc, #92]	; (c260 <n25q256a_write+0x104>)
    c202:	4798      	blx	r3
		/* When the operation is in progress, the write in progress bit is set.
		 * The write enable latch bit is cleared.
		 * The flag status register is polled for the operation status.
		 */
		while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c204:	bf00      	nop
    c206:	7c3b      	ldrb	r3, [r7, #16]
    c208:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c20c:	b2db      	uxtb	r3, r3
    c20e:	2270      	movs	r2, #112	; 0x70
    c210:	4619      	mov	r1, r3
    c212:	68f8      	ldr	r0, [r7, #12]
    c214:	4b13      	ldr	r3, [pc, #76]	; (c264 <n25q256a_write+0x108>)
    c216:	4798      	blx	r3
    c218:	4603      	mov	r3, r0
    c21a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c21e:	2b00      	cmp	r3, #0
    c220:	d0f1      	beq.n	c206 <n25q256a_write+0xaa>
			;
		cmd.tx_buf += cmd.buf_len;
    c222:	6a3a      	ldr	r2, [r7, #32]
    c224:	69fb      	ldr	r3, [r7, #28]
    c226:	4413      	add	r3, r2
    c228:	623b      	str	r3, [r7, #32]
		length -= cmd.buf_len;
    c22a:	69fb      	ldr	r3, [r7, #28]
    c22c:	683a      	ldr	r2, [r7, #0]
    c22e:	1ad3      	subs	r3, r2, r3
    c230:	603b      	str	r3, [r7, #0]
		address += cmd.buf_len;
    c232:	69fb      	ldr	r3, [r7, #28]
    c234:	687a      	ldr	r2, [r7, #4]
    c236:	4413      	add	r3, r2
    c238:	607b      	str	r3, [r7, #4]
	while (length) {
    c23a:	683b      	ldr	r3, [r7, #0]
    c23c:	2b00      	cmp	r3, #0
    c23e:	d1c6      	bne.n	c1ce <n25q256a_write+0x72>
	}
	if (n25q->xip_mode) {
    c240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c242:	7b5b      	ldrb	r3, [r3, #13]
    c244:	2b00      	cmp	r3, #0
    c246:	d003      	beq.n	c250 <n25q256a_write+0xf4>
		n25q256a_xip_confirm(me, true);
    c248:	2101      	movs	r1, #1
    c24a:	68f8      	ldr	r0, [r7, #12]
    c24c:	4b06      	ldr	r3, [pc, #24]	; (c268 <n25q256a_write+0x10c>)
    c24e:	4798      	blx	r3
	}
	return ERR_NONE;
    c250:	2300      	movs	r3, #0
}
    c252:	4618      	mov	r0, r3
    c254:	3730      	adds	r7, #48	; 0x30
    c256:	46bd      	mov	sp, r7
    c258:	bd80      	pop	{r7, pc}
    c25a:	bf00      	nop
    c25c:	0000becd 	.word	0x0000becd
    c260:	00002f7d 	.word	0x00002f7d
    c264:	0000bd91 	.word	0x0000bd91
    c268:	0000bcc5 	.word	0x0000bcc5

0000c26c <n25q256a_erase>:

int32_t n25q256a_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    c26c:	b580      	push	{r7, lr}
    c26e:	b090      	sub	sp, #64	; 0x40
    c270:	af00      	add	r7, sp, #0
    c272:	60f8      	str	r0, [r7, #12]
    c274:	60b9      	str	r1, [r7, #8]
    c276:	607a      	str	r2, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c278:	68fb      	ldr	r3, [r7, #12]
    c27a:	633b      	str	r3, [r7, #48]	; 0x30
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c27c:	68fb      	ldr	r3, [r7, #12]
    c27e:	681b      	ldr	r3, [r3, #0]
    c280:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct _qspi_command         cmd   = {
    c282:	f107 0314 	add.w	r3, r7, #20
    c286:	2200      	movs	r2, #0
    c288:	601a      	str	r2, [r3, #0]
    c28a:	605a      	str	r2, [r3, #4]
    c28c:	609a      	str	r2, [r3, #8]
    c28e:	60da      	str	r2, [r3, #12]
    c290:	611a      	str	r2, [r3, #16]
    c292:	615a      	str	r2, [r3, #20]
        .inst_frame.bits.width    = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1,
    c294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c296:	7b1b      	ldrb	r3, [r3, #12]
    c298:	2b00      	cmp	r3, #0
    c29a:	d001      	beq.n	c2a0 <n25q256a_erase+0x34>
    c29c:	2206      	movs	r2, #6
    c29e:	e000      	b.n	c2a2 <n25q256a_erase+0x36>
    c2a0:	2200      	movs	r2, #0
	struct _qspi_command         cmd   = {
    c2a2:	7d3b      	ldrb	r3, [r7, #20]
    c2a4:	f362 0302 	bfi	r3, r2, #0, #3
    c2a8:	753b      	strb	r3, [r7, #20]
    c2aa:	7d3b      	ldrb	r3, [r7, #20]
    c2ac:	f043 0310 	orr.w	r3, r3, #16
    c2b0:	753b      	strb	r3, [r7, #20]
        .inst_frame.bits.inst_en  = 1,
        .inst_frame.bits.addr_en  = (length < N25Q_FLASH_SIZE) ? 1 : 0,
    c2b2:	687b      	ldr	r3, [r7, #4]
    c2b4:	4a56      	ldr	r2, [pc, #344]	; (c410 <n25q256a_erase+0x1a4>)
    c2b6:	4293      	cmp	r3, r2
    c2b8:	bf94      	ite	ls
    c2ba:	2301      	movls	r3, #1
    c2bc:	2300      	movhi	r3, #0
    c2be:	b2da      	uxtb	r2, r3
	struct _qspi_command         cmd   = {
    c2c0:	7d3b      	ldrb	r3, [r7, #20]
    c2c2:	f362 1345 	bfi	r3, r2, #5, #1
    c2c6:	753b      	strb	r3, [r7, #20]
    c2c8:	7d7b      	ldrb	r3, [r7, #21]
    c2ca:	2202      	movs	r2, #2
    c2cc:	f362 1305 	bfi	r3, r2, #4, #2
    c2d0:	757b      	strb	r3, [r7, #21]
        .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
    };
	uint32_t temp_addr = address;
    c2d2:	68bb      	ldr	r3, [r7, #8]
    c2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t temp_len  = length;
    c2d6:	687b      	ldr	r3, [r7, #4]
    c2d8:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  rc        = ERR_NONE;
    c2da:	2300      	movs	r3, #0
    c2dc:	637b      	str	r3, [r7, #52]	; 0x34

	if ((length % N25Q_SECTOR_SIZE) || (address % N25Q_SECTOR_SIZE)) {
    c2de:	687b      	ldr	r3, [r7, #4]
    c2e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c2e4:	2b00      	cmp	r3, #0
    c2e6:	d104      	bne.n	c2f2 <n25q256a_erase+0x86>
    c2e8:	68bb      	ldr	r3, [r7, #8]
    c2ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
    c2ee:	2b00      	cmp	r3, #0
    c2f0:	d002      	beq.n	c2f8 <n25q256a_erase+0x8c>
		return ERR_INVALID_ARG;
    c2f2:	f06f 030c 	mvn.w	r3, #12
    c2f6:	e087      	b.n	c408 <n25q256a_erase+0x19c>
	}

	if (length >= N25Q_FLASH_SIZE) {
    c2f8:	687b      	ldr	r3, [r7, #4]
    c2fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    c2fe:	d368      	bcc.n	c3d2 <n25q256a_erase+0x166>
		cmd.instruction = N25Q_BULK_ERASE;
    c300:	23c7      	movs	r3, #199	; 0xc7
    c302:	763b      	strb	r3, [r7, #24]
		/* WRITE ENABLE command must be issued to
		 * set the write enable latch bit to 1 */
		n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c304:	7d3b      	ldrb	r3, [r7, #20]
    c306:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c30a:	b2db      	uxtb	r3, r3
    c30c:	2201      	movs	r2, #1
    c30e:	4619      	mov	r1, r3
    c310:	68f8      	ldr	r0, [r7, #12]
    c312:	4b40      	ldr	r3, [pc, #256]	; (c414 <n25q256a_erase+0x1a8>)
    c314:	4798      	blx	r3
		/* Send specific erase command */
		qspi_sync_serial_run_command(descr, &cmd);
    c316:	f107 0314 	add.w	r3, r7, #20
    c31a:	4619      	mov	r1, r3
    c31c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c31e:	4b3e      	ldr	r3, [pc, #248]	; (c418 <n25q256a_erase+0x1ac>)
    c320:	4798      	blx	r3
    c322:	e059      	b.n	c3d8 <n25q256a_erase+0x16c>
	} else {
		while (temp_len > 0) {
			if (((temp_addr % N25Q_BLOCK_SIZE) == 0) && (temp_len >= N25Q_BLOCK_SIZE)) {
    c324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c326:	b29b      	uxth	r3, r3
    c328:	2b00      	cmp	r3, #0
    c32a:	d11f      	bne.n	c36c <n25q256a_erase+0x100>
    c32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c32e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c332:	d31b      	bcc.n	c36c <n25q256a_erase+0x100>
				cmd.address     = temp_addr;
    c334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c336:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_64K;
    c338:	23d8      	movs	r3, #216	; 0xd8
    c33a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c33c:	7d3b      	ldrb	r3, [r7, #20]
    c33e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c342:	b2db      	uxtb	r3, r3
    c344:	2201      	movs	r2, #1
    c346:	4619      	mov	r1, r3
    c348:	68f8      	ldr	r0, [r7, #12]
    c34a:	4b32      	ldr	r3, [pc, #200]	; (c414 <n25q256a_erase+0x1a8>)
    c34c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c34e:	f107 0314 	add.w	r3, r7, #20
    c352:	4619      	mov	r1, r3
    c354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c356:	4b30      	ldr	r3, [pc, #192]	; (c418 <n25q256a_erase+0x1ac>)
    c358:	4798      	blx	r3
				temp_addr += N25Q_BLOCK_SIZE;
    c35a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c35c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    c360:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_BLOCK_SIZE;
    c362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c364:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    c368:	63bb      	str	r3, [r7, #56]	; 0x38
    c36a:	e023      	b.n	c3b4 <n25q256a_erase+0x148>
			} else if (temp_len >= N25Q_SECTOR_SIZE) {
    c36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c36e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    c372:	d31b      	bcc.n	c3ac <n25q256a_erase+0x140>
				cmd.address     = temp_addr;
    c374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c376:	61fb      	str	r3, [r7, #28]
				cmd.instruction = N25Q_BLOCK_ERASE_4K;
    c378:	2320      	movs	r3, #32
    c37a:	763b      	strb	r3, [r7, #24]
				/* WRITE ENABLE command must be issued to
				 * set the write enable latch bit to 1 */
				n25q256a_write_enable(me, cmd.inst_frame.bits.width, true);
    c37c:	7d3b      	ldrb	r3, [r7, #20]
    c37e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c382:	b2db      	uxtb	r3, r3
    c384:	2201      	movs	r2, #1
    c386:	4619      	mov	r1, r3
    c388:	68f8      	ldr	r0, [r7, #12]
    c38a:	4b22      	ldr	r3, [pc, #136]	; (c414 <n25q256a_erase+0x1a8>)
    c38c:	4798      	blx	r3
				/* Send specific erase command */
				qspi_sync_serial_run_command(descr, &cmd);
    c38e:	f107 0314 	add.w	r3, r7, #20
    c392:	4619      	mov	r1, r3
    c394:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c396:	4b20      	ldr	r3, [pc, #128]	; (c418 <n25q256a_erase+0x1ac>)
    c398:	4798      	blx	r3
				temp_addr += N25Q_SECTOR_SIZE;
    c39a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c39c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
				temp_len -= N25Q_SECTOR_SIZE;
    c3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c3a4:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    c3a8:	63bb      	str	r3, [r7, #56]	; 0x38
    c3aa:	e003      	b.n	c3b4 <n25q256a_erase+0x148>
			} else {
				rc = ERR_INVALID_ARG;
    c3ac:	f06f 030c 	mvn.w	r3, #12
    c3b0:	637b      	str	r3, [r7, #52]	; 0x34
				break;
    c3b2:	e011      	b.n	c3d8 <n25q256a_erase+0x16c>
			/* When the operation is in progress,
			 * the write in progress bit is set.
			 * The write enable latch bit is cleared.
			 * The flag status register is polled for the operation status.
			 */
			while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c3b4:	bf00      	nop
    c3b6:	7d3b      	ldrb	r3, [r7, #20]
    c3b8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c3bc:	b2db      	uxtb	r3, r3
    c3be:	2270      	movs	r2, #112	; 0x70
    c3c0:	4619      	mov	r1, r3
    c3c2:	68f8      	ldr	r0, [r7, #12]
    c3c4:	4b15      	ldr	r3, [pc, #84]	; (c41c <n25q256a_erase+0x1b0>)
    c3c6:	4798      	blx	r3
    c3c8:	4603      	mov	r3, r0
    c3ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c3ce:	2b00      	cmp	r3, #0
    c3d0:	d0f1      	beq.n	c3b6 <n25q256a_erase+0x14a>
		while (temp_len > 0) {
    c3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c3d4:	2b00      	cmp	r3, #0
    c3d6:	d1a5      	bne.n	c324 <n25q256a_erase+0xb8>
				;
		}
	}
	/* The flag status register is polled for the final operation status. */
	while (!(n25q256a_read_reg(me, cmd.inst_frame.bits.width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c3d8:	bf00      	nop
    c3da:	7d3b      	ldrb	r3, [r7, #20]
    c3dc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c3e0:	b2db      	uxtb	r3, r3
    c3e2:	2270      	movs	r2, #112	; 0x70
    c3e4:	4619      	mov	r1, r3
    c3e6:	68f8      	ldr	r0, [r7, #12]
    c3e8:	4b0c      	ldr	r3, [pc, #48]	; (c41c <n25q256a_erase+0x1b0>)
    c3ea:	4798      	blx	r3
    c3ec:	4603      	mov	r3, r0
    c3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c3f2:	2b00      	cmp	r3, #0
    c3f4:	d0f1      	beq.n	c3da <n25q256a_erase+0x16e>
		;
	if (n25q->xip_mode) {
    c3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c3f8:	7b5b      	ldrb	r3, [r3, #13]
    c3fa:	2b00      	cmp	r3, #0
    c3fc:	d003      	beq.n	c406 <n25q256a_erase+0x19a>
		n25q256a_xip_confirm(me, true);
    c3fe:	2101      	movs	r1, #1
    c400:	68f8      	ldr	r0, [r7, #12]
    c402:	4b07      	ldr	r3, [pc, #28]	; (c420 <n25q256a_erase+0x1b4>)
    c404:	4798      	blx	r3
	}
	return rc;
    c406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    c408:	4618      	mov	r0, r3
    c40a:	3740      	adds	r7, #64	; 0x40
    c40c:	46bd      	mov	sp, r7
    c40e:	bd80      	pop	{r7, pc}
    c410:	001fffff 	.word	0x001fffff
    c414:	0000becd 	.word	0x0000becd
    c418:	00002f7d 	.word	0x00002f7d
    c41c:	0000bd91 	.word	0x0000bd91
    c420:	0000bcc5 	.word	0x0000bcc5

0000c424 <n25q256a_enable_xip>:

int32_t n25q256a_enable_xip(const struct spi_nor_flash *const me)
{
    c424:	b590      	push	{r4, r7, lr}
    c426:	b085      	sub	sp, #20
    c428:	af00      	add	r7, sp, #0
    c42a:	6078      	str	r0, [r7, #4]
	struct n25q256a *n25q  = (struct n25q256a *)me;
    c42c:	687b      	ldr	r3, [r7, #4]
    c42e:	60fb      	str	r3, [r7, #12]
	uint8_t          width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c430:	68fb      	ldr	r3, [r7, #12]
    c432:	7b1b      	ldrb	r3, [r3, #12]
    c434:	2b00      	cmp	r3, #0
    c436:	d001      	beq.n	c43c <n25q256a_enable_xip+0x18>
    c438:	2306      	movs	r3, #6
    c43a:	e000      	b.n	c43e <n25q256a_enable_xip+0x1a>
    c43c:	2300      	movs	r3, #0
    c43e:	72fb      	strb	r3, [r7, #11]
	if (!n25q->xip_mode) {
    c440:	68fb      	ldr	r3, [r7, #12]
    c442:	7b5b      	ldrb	r3, [r3, #13]
    c444:	2b00      	cmp	r3, #0
    c446:	d129      	bne.n	c49c <n25q256a_enable_xip+0x78>
		uint8_t vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c448:	7afb      	ldrb	r3, [r7, #11]
    c44a:	2285      	movs	r2, #133	; 0x85
    c44c:	4619      	mov	r1, r3
    c44e:	6878      	ldr	r0, [r7, #4]
    c450:	4b15      	ldr	r3, [pc, #84]	; (c4a8 <n25q256a_enable_xip+0x84>)
    c452:	4798      	blx	r3
    c454:	4603      	mov	r3, r0
    c456:	72bb      	strb	r3, [r7, #10]
		if (vcfg & (1u << 3)) {
    c458:	7abb      	ldrb	r3, [r7, #10]
    c45a:	f003 0308 	and.w	r3, r3, #8
    c45e:	2b00      	cmp	r3, #0
    c460:	d015      	beq.n	c48e <n25q256a_enable_xip+0x6a>
			vcfg &= ~(1u << 3);
    c462:	7abb      	ldrb	r3, [r7, #10]
    c464:	f023 0308 	bic.w	r3, r3, #8
    c468:	72bb      	strb	r3, [r7, #10]
			n25q256a_write_reg(me, width, N25Q_WRITE_VOLATILE_CONFIG_REGISTER, vcfg);
    c46a:	7abb      	ldrb	r3, [r7, #10]
    c46c:	7af9      	ldrb	r1, [r7, #11]
    c46e:	2281      	movs	r2, #129	; 0x81
    c470:	6878      	ldr	r0, [r7, #4]
    c472:	4c0e      	ldr	r4, [pc, #56]	; (c4ac <n25q256a_enable_xip+0x88>)
    c474:	47a0      	blx	r4
			while (!(n25q256a_read_reg(me, width, N25Q_READ_FLAG_STATUS_REGISTER) & (1 << 7)))
    c476:	bf00      	nop
    c478:	7afb      	ldrb	r3, [r7, #11]
    c47a:	2270      	movs	r2, #112	; 0x70
    c47c:	4619      	mov	r1, r3
    c47e:	6878      	ldr	r0, [r7, #4]
    c480:	4b09      	ldr	r3, [pc, #36]	; (c4a8 <n25q256a_enable_xip+0x84>)
    c482:	4798      	blx	r3
    c484:	4603      	mov	r3, r0
    c486:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c48a:	2b00      	cmp	r3, #0
    c48c:	d0f4      	beq.n	c478 <n25q256a_enable_xip+0x54>
				;
		}
		n25q->xip_mode = 1;
    c48e:	68fb      	ldr	r3, [r7, #12]
    c490:	2201      	movs	r2, #1
    c492:	735a      	strb	r2, [r3, #13]
		n25q256a_xip_confirm(me, true);
    c494:	2101      	movs	r1, #1
    c496:	6878      	ldr	r0, [r7, #4]
    c498:	4b05      	ldr	r3, [pc, #20]	; (c4b0 <n25q256a_enable_xip+0x8c>)
    c49a:	4798      	blx	r3
	}
	return ERR_NONE;
    c49c:	2300      	movs	r3, #0
}
    c49e:	4618      	mov	r0, r3
    c4a0:	3714      	adds	r7, #20
    c4a2:	46bd      	mov	sp, r7
    c4a4:	bd90      	pop	{r4, r7, pc}
    c4a6:	bf00      	nop
    c4a8:	0000bd91 	.word	0x0000bd91
    c4ac:	0000be2d 	.word	0x0000be2d
    c4b0:	0000bcc5 	.word	0x0000bcc5

0000c4b4 <n25q256a_disable_xip>:

int32_t n25q256a_disable_xip(const struct spi_nor_flash *const me)
{
    c4b4:	b580      	push	{r7, lr}
    c4b6:	b086      	sub	sp, #24
    c4b8:	af00      	add	r7, sp, #0
    c4ba:	6078      	str	r0, [r7, #4]
	struct n25q256a *            n25q  = (struct n25q256a *)me;
    c4bc:	687b      	ldr	r3, [r7, #4]
    c4be:	617b      	str	r3, [r7, #20]
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    c4c0:	687b      	ldr	r3, [r7, #4]
    c4c2:	681b      	ldr	r3, [r3, #0]
    c4c4:	613b      	str	r3, [r7, #16]
	uint8_t                      width = n25q->quad_mode ? QSPI_INST4_ADDR4_DATA4 : QSPI_INST1_ADDR1_DATA1;
    c4c6:	697b      	ldr	r3, [r7, #20]
    c4c8:	7b1b      	ldrb	r3, [r3, #12]
    c4ca:	2b00      	cmp	r3, #0
    c4cc:	d001      	beq.n	c4d2 <n25q256a_disable_xip+0x1e>
    c4ce:	2306      	movs	r3, #6
    c4d0:	e000      	b.n	c4d4 <n25q256a_disable_xip+0x20>
    c4d2:	2300      	movs	r3, #0
    c4d4:	73fb      	strb	r3, [r7, #15]
	uint8_t                      vcfg;
	/* XIP is terminated by driving the XIP confirmation bit to 1.
	 * The device automatically resets volatile configuration register bit 3 to 1.
	 */
	n25q256a_xip_confirm(me, false);
    c4d6:	2100      	movs	r1, #0
    c4d8:	6878      	ldr	r0, [r7, #4]
    c4da:	4b15      	ldr	r3, [pc, #84]	; (c530 <n25q256a_disable_xip+0x7c>)
    c4dc:	4798      	blx	r3
	vcfg = n25q256a_read_reg(me, width, N25Q_READ_VOLATILE_CONFIG_REGISTER);
    c4de:	7bfb      	ldrb	r3, [r7, #15]
    c4e0:	2285      	movs	r2, #133	; 0x85
    c4e2:	4619      	mov	r1, r3
    c4e4:	6878      	ldr	r0, [r7, #4]
    c4e6:	4b13      	ldr	r3, [pc, #76]	; (c534 <n25q256a_disable_xip+0x80>)
    c4e8:	4798      	blx	r3
    c4ea:	4603      	mov	r3, r0
    c4ec:	73bb      	strb	r3, [r7, #14]
	if (!(vcfg & (1u << 3))) {
    c4ee:	7bbb      	ldrb	r3, [r7, #14]
    c4f0:	f003 0308 	and.w	r3, r3, #8
    c4f4:	2b00      	cmp	r3, #0
    c4f6:	d113      	bne.n	c520 <n25q256a_disable_xip+0x6c>
		if (n25q->pin_exit_xip) {
    c4f8:	697b      	ldr	r3, [r7, #20]
    c4fa:	689b      	ldr	r3, [r3, #8]
    c4fc:	2b00      	cmp	r3, #0
    c4fe:	d00f      	beq.n	c520 <n25q256a_disable_xip+0x6c>
			/* Quad    : drive DQ0 = 1 with S# held LOW for  7 clock cycles
			 * Dual    : drive DQ0 = 1 with S# held LOW for 13 clock cycles
			 * Extended: drive DQ0 = 1 with S# held LOW for 25 clock cycles
			 */
			void *hw = descr->dev.prvt;
    c500:	693b      	ldr	r3, [r7, #16]
    c502:	681b      	ldr	r3, [r3, #0]
    c504:	60bb      	str	r3, [r7, #8]
			qspi_sync_disable(descr);
    c506:	6938      	ldr	r0, [r7, #16]
    c508:	4b0b      	ldr	r3, [pc, #44]	; (c538 <n25q256a_disable_xip+0x84>)
    c50a:	4798      	blx	r3
			n25q->pin_exit_xip();
    c50c:	697b      	ldr	r3, [r7, #20]
    c50e:	689b      	ldr	r3, [r3, #8]
    c510:	4798      	blx	r3

			qspi_sync_init(descr, hw);
    c512:	68b9      	ldr	r1, [r7, #8]
    c514:	6938      	ldr	r0, [r7, #16]
    c516:	4b09      	ldr	r3, [pc, #36]	; (c53c <n25q256a_disable_xip+0x88>)
    c518:	4798      	blx	r3
			qspi_sync_enable(descr);
    c51a:	6938      	ldr	r0, [r7, #16]
    c51c:	4b08      	ldr	r3, [pc, #32]	; (c540 <n25q256a_disable_xip+0x8c>)
    c51e:	4798      	blx	r3
		}
	}
	n25q->xip_mode = 0;
    c520:	697b      	ldr	r3, [r7, #20]
    c522:	2200      	movs	r2, #0
    c524:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    c526:	2300      	movs	r3, #0
}
    c528:	4618      	mov	r0, r3
    c52a:	3718      	adds	r7, #24
    c52c:	46bd      	mov	sp, r7
    c52e:	bd80      	pop	{r7, pc}
    c530:	0000bcc5 	.word	0x0000bcc5
    c534:	0000bd91 	.word	0x0000bd91
    c538:	00002f41 	.word	0x00002f41
    c53c:	00002eb9 	.word	0x00002eb9
    c540:	00002f05 	.word	0x00002f05

0000c544 <spi_nor_flash_construct>:

#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
    c544:	b480      	push	{r7}
    c546:	b085      	sub	sp, #20
    c548:	af00      	add	r7, sp, #0
    c54a:	60f8      	str	r0, [r7, #12]
    c54c:	60b9      	str	r1, [r7, #8]
    c54e:	607a      	str	r2, [r7, #4]
	me->io        = io;
    c550:	68fb      	ldr	r3, [r7, #12]
    c552:	68ba      	ldr	r2, [r7, #8]
    c554:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    c556:	68fb      	ldr	r3, [r7, #12]
    c558:	687a      	ldr	r2, [r7, #4]
    c55a:	605a      	str	r2, [r3, #4]

	return me;
    c55c:	68fb      	ldr	r3, [r7, #12]
}
    c55e:	4618      	mov	r0, r3
    c560:	3714      	adds	r7, #20
    c562:	46bd      	mov	sp, r7
    c564:	f85d 7b04 	ldr.w	r7, [sp], #4
    c568:	4770      	bx	lr

0000c56a <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
    c56a:	b480      	push	{r7}
    c56c:	b083      	sub	sp, #12
    c56e:	af00      	add	r7, sp, #0
    c570:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    c572:	687b      	ldr	r3, [r7, #4]
    c574:	781b      	ldrb	r3, [r3, #0]
    c576:	b29a      	uxth	r2, r3
    c578:	687b      	ldr	r3, [r7, #4]
    c57a:	3301      	adds	r3, #1
    c57c:	781b      	ldrb	r3, [r3, #0]
    c57e:	b29b      	uxth	r3, r3
    c580:	021b      	lsls	r3, r3, #8
    c582:	b29b      	uxth	r3, r3
    c584:	4413      	add	r3, r2
    c586:	b29b      	uxth	r3, r3
}
    c588:	4618      	mov	r0, r3
    c58a:	370c      	adds	r7, #12
    c58c:	46bd      	mov	sp, r7
    c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c592:	4770      	bx	lr

0000c594 <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
    c594:	b480      	push	{r7}
    c596:	b083      	sub	sp, #12
    c598:	af00      	add	r7, sp, #0
    c59a:	6078      	str	r0, [r7, #4]
	return desc[0];
    c59c:	687b      	ldr	r3, [r7, #4]
    c59e:	781b      	ldrb	r3, [r3, #0]
}
    c5a0:	4618      	mov	r0, r3
    c5a2:	370c      	adds	r7, #12
    c5a4:	46bd      	mov	sp, r7
    c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5aa:	4770      	bx	lr

0000c5ac <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
    c5ac:	b580      	push	{r7, lr}
    c5ae:	b082      	sub	sp, #8
    c5b0:	af00      	add	r7, sp, #0
    c5b2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    c5b4:	6878      	ldr	r0, [r7, #4]
    c5b6:	4b05      	ldr	r3, [pc, #20]	; (c5cc <usb_desc_next+0x20>)
    c5b8:	4798      	blx	r3
    c5ba:	4603      	mov	r3, r0
    c5bc:	461a      	mov	r2, r3
    c5be:	687b      	ldr	r3, [r7, #4]
    c5c0:	4413      	add	r3, r2
}
    c5c2:	4618      	mov	r0, r3
    c5c4:	3708      	adds	r7, #8
    c5c6:	46bd      	mov	sp, r7
    c5c8:	bd80      	pop	{r7, pc}
    c5ca:	bf00      	nop
    c5cc:	0000c595 	.word	0x0000c595

0000c5d0 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c5d0:	b580      	push	{r7, lr}
    c5d2:	b08c      	sub	sp, #48	; 0x30
    c5d4:	af00      	add	r7, sp, #0
    c5d6:	6078      	str	r0, [r7, #4]
    c5d8:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c5da:	687b      	ldr	r3, [r7, #4]
    c5dc:	689b      	ldr	r3, [r3, #8]
    c5de:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
    c5e0:	683b      	ldr	r3, [r7, #0]
    c5e2:	681b      	ldr	r3, [r3, #0]
    c5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c5e6:	2300      	movs	r3, #0
    c5e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c5ec:	e08f      	b.n	c70e <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
    c5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c5f0:	2b00      	cmp	r3, #0
    c5f2:	d102      	bne.n	c5fa <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
    c5f4:	f06f 0309 	mvn.w	r3, #9
    c5f8:	e092      	b.n	c720 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
    c5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c5fc:	789b      	ldrb	r3, [r3, #2]
    c5fe:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
    c600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c602:	795b      	ldrb	r3, [r3, #5]
    c604:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c606:	7c7b      	ldrb	r3, [r7, #17]
    c608:	2b02      	cmp	r3, #2
    c60a:	d002      	beq.n	c612 <cdcdf_acm_enable+0x42>
    c60c:	7c7b      	ldrb	r3, [r7, #17]
    c60e:	2b0a      	cmp	r3, #10
    c610:	d121      	bne.n	c656 <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c616:	6a3a      	ldr	r2, [r7, #32]
    c618:	5cd2      	ldrb	r2, [r2, r3]
    c61a:	7bbb      	ldrb	r3, [r7, #14]
    c61c:	429a      	cmp	r2, r3
    c61e:	d102      	bne.n	c626 <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
    c620:	f06f 0311 	mvn.w	r3, #17
    c624:	e07c      	b.n	c720 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c62a:	6a3a      	ldr	r2, [r7, #32]
    c62c:	5cd3      	ldrb	r3, [r2, r3]
    c62e:	2bff      	cmp	r3, #255	; 0xff
    c630:	d002      	beq.n	c638 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
    c632:	f06f 031b 	mvn.w	r3, #27
    c636:	e073      	b.n	c720 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c63c:	7bb9      	ldrb	r1, [r7, #14]
    c63e:	6a3a      	ldr	r2, [r7, #32]
    c640:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c642:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c644:	683b      	ldr	r3, [r7, #0]
    c646:	685b      	ldr	r3, [r3, #4]
    c648:	2205      	movs	r2, #5
    c64a:	4619      	mov	r1, r3
    c64c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    c64e:	4b36      	ldr	r3, [pc, #216]	; (c728 <cdcdf_acm_enable+0x158>)
    c650:	4798      	blx	r3
    c652:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c654:	e047      	b.n	c6e6 <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
    c656:	f06f 0309 	mvn.w	r3, #9
    c65a:	e061      	b.n	c720 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
    c65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c65e:	789b      	ldrb	r3, [r3, #2]
    c660:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
    c662:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c664:	78db      	ldrb	r3, [r3, #3]
    c666:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    c668:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c66a:	3304      	adds	r3, #4
    c66c:	4618      	mov	r0, r3
    c66e:	4b2f      	ldr	r3, [pc, #188]	; (c72c <cdcdf_acm_enable+0x15c>)
    c670:	4798      	blx	r3
    c672:	4603      	mov	r3, r0
    c674:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c676:	7ebb      	ldrb	r3, [r7, #26]
    c678:	7ef9      	ldrb	r1, [r7, #27]
    c67a:	8bba      	ldrh	r2, [r7, #28]
    c67c:	4618      	mov	r0, r3
    c67e:	4b2c      	ldr	r3, [pc, #176]	; (c730 <cdcdf_acm_enable+0x160>)
    c680:	4798      	blx	r3
    c682:	4603      	mov	r3, r0
    c684:	2b00      	cmp	r3, #0
    c686:	d002      	beq.n	c68e <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
    c688:	f06f 0313 	mvn.w	r3, #19
    c68c:	e048      	b.n	c720 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c68e:	7ebb      	ldrb	r3, [r7, #26]
    c690:	b25b      	sxtb	r3, r3
    c692:	2b00      	cmp	r3, #0
    c694:	da0f      	bge.n	c6b6 <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c69a:	7eb9      	ldrb	r1, [r7, #26]
    c69c:	6a3a      	ldr	r2, [r7, #32]
    c69e:	4413      	add	r3, r2
    c6a0:	460a      	mov	r2, r1
    c6a2:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    c6a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c6a8:	6a3a      	ldr	r2, [r7, #32]
    c6aa:	4413      	add	r3, r2
    c6ac:	789b      	ldrb	r3, [r3, #2]
    c6ae:	4618      	mov	r0, r3
    c6b0:	4b20      	ldr	r3, [pc, #128]	; (c734 <cdcdf_acm_enable+0x164>)
    c6b2:	4798      	blx	r3
    c6b4:	e007      	b.n	c6c6 <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c6b6:	7eba      	ldrb	r2, [r7, #26]
    c6b8:	6a3b      	ldr	r3, [r7, #32]
    c6ba:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c6bc:	6a3b      	ldr	r3, [r7, #32]
    c6be:	791b      	ldrb	r3, [r3, #4]
    c6c0:	4618      	mov	r0, r3
    c6c2:	4b1c      	ldr	r3, [pc, #112]	; (c734 <cdcdf_acm_enable+0x164>)
    c6c4:	4798      	blx	r3
			}
			desc->sod = ep;
    c6c6:	683b      	ldr	r3, [r7, #0]
    c6c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c6ca:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c6cc:	683b      	ldr	r3, [r7, #0]
    c6ce:	681b      	ldr	r3, [r3, #0]
    c6d0:	4618      	mov	r0, r3
    c6d2:	4b19      	ldr	r3, [pc, #100]	; (c738 <cdcdf_acm_enable+0x168>)
    c6d4:	4798      	blx	r3
    c6d6:	4602      	mov	r2, r0
    c6d8:	683b      	ldr	r3, [r7, #0]
    c6da:	685b      	ldr	r3, [r3, #4]
    c6dc:	4619      	mov	r1, r3
    c6de:	4610      	mov	r0, r2
    c6e0:	4b16      	ldr	r3, [pc, #88]	; (c73c <cdcdf_acm_enable+0x16c>)
    c6e2:	4798      	blx	r3
    c6e4:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
    c6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c6e8:	2b00      	cmp	r3, #0
    c6ea:	d1b7      	bne.n	c65c <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c6ec:	683b      	ldr	r3, [r7, #0]
    c6ee:	681b      	ldr	r3, [r3, #0]
    c6f0:	4618      	mov	r0, r3
    c6f2:	4b11      	ldr	r3, [pc, #68]	; (c738 <cdcdf_acm_enable+0x168>)
    c6f4:	4798      	blx	r3
    c6f6:	683b      	ldr	r3, [r7, #0]
    c6f8:	685b      	ldr	r3, [r3, #4]
    c6fa:	2204      	movs	r2, #4
    c6fc:	4619      	mov	r1, r3
    c6fe:	4b0a      	ldr	r3, [pc, #40]	; (c728 <cdcdf_acm_enable+0x158>)
    c700:	4798      	blx	r3
    c702:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
    c704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c708:	3301      	adds	r3, #1
    c70a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    c70e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    c712:	2b01      	cmp	r3, #1
    c714:	f67f af6b 	bls.w	c5ee <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
    c718:	4b09      	ldr	r3, [pc, #36]	; (c740 <cdcdf_acm_enable+0x170>)
    c71a:	2201      	movs	r2, #1
    c71c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c71e:	2300      	movs	r3, #0
}
    c720:	4618      	mov	r0, r3
    c722:	3730      	adds	r7, #48	; 0x30
    c724:	46bd      	mov	sp, r7
    c726:	bd80      	pop	{r7, pc}
    c728:	0000d991 	.word	0x0000d991
    c72c:	0000c56b 	.word	0x0000c56b
    c730:	00003bf1 	.word	0x00003bf1
    c734:	00003cdd 	.word	0x00003cdd
    c738:	0000c5ad 	.word	0x0000c5ad
    c73c:	0000d9ed 	.word	0x0000d9ed
    c740:	20001134 	.word	0x20001134

0000c744 <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
    c744:	b580      	push	{r7, lr}
    c746:	b088      	sub	sp, #32
    c748:	af00      	add	r7, sp, #0
    c74a:	6078      	str	r0, [r7, #4]
    c74c:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c74e:	687b      	ldr	r3, [r7, #4]
    c750:	689b      	ldr	r3, [r3, #8]
    c752:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
    c754:	683b      	ldr	r3, [r7, #0]
    c756:	2b00      	cmp	r3, #0
    c758:	d00c      	beq.n	c774 <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c75a:	683b      	ldr	r3, [r7, #0]
    c75c:	681b      	ldr	r3, [r3, #0]
    c75e:	795b      	ldrb	r3, [r3, #5]
    c760:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c762:	7c7b      	ldrb	r3, [r7, #17]
    c764:	2b02      	cmp	r3, #2
    c766:	d005      	beq.n	c774 <cdcdf_acm_disable+0x30>
    c768:	7c7b      	ldrb	r3, [r7, #17]
    c76a:	2b0a      	cmp	r3, #10
    c76c:	d002      	beq.n	c774 <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
    c76e:	f06f 0309 	mvn.w	r3, #9
    c772:	e035      	b.n	c7e0 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
    c774:	2300      	movs	r3, #0
    c776:	77fb      	strb	r3, [r7, #31]
    c778:	e01f      	b.n	c7ba <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
    c77a:	7ffb      	ldrb	r3, [r7, #31]
    c77c:	69ba      	ldr	r2, [r7, #24]
    c77e:	5cd3      	ldrb	r3, [r2, r3]
    c780:	2bff      	cmp	r3, #255	; 0xff
    c782:	d016      	beq.n	c7b2 <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
    c784:	7ffb      	ldrb	r3, [r7, #31]
    c786:	69ba      	ldr	r2, [r7, #24]
    c788:	21ff      	movs	r1, #255	; 0xff
    c78a:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
    c78c:	7ffb      	ldrb	r3, [r7, #31]
    c78e:	69ba      	ldr	r2, [r7, #24]
    c790:	4413      	add	r3, r2
    c792:	789b      	ldrb	r3, [r3, #2]
    c794:	2bff      	cmp	r3, #255	; 0xff
    c796:	d00d      	beq.n	c7b4 <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c798:	7ffb      	ldrb	r3, [r7, #31]
    c79a:	69ba      	ldr	r2, [r7, #24]
    c79c:	4413      	add	r3, r2
    c79e:	789b      	ldrb	r3, [r3, #2]
    c7a0:	4618      	mov	r0, r3
    c7a2:	4b11      	ldr	r3, [pc, #68]	; (c7e8 <cdcdf_acm_disable+0xa4>)
    c7a4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c7a6:	7ffb      	ldrb	r3, [r7, #31]
    c7a8:	69ba      	ldr	r2, [r7, #24]
    c7aa:	4413      	add	r3, r2
    c7ac:	22ff      	movs	r2, #255	; 0xff
    c7ae:	709a      	strb	r2, [r3, #2]
    c7b0:	e000      	b.n	c7b4 <cdcdf_acm_disable+0x70>
			continue;
    c7b2:	bf00      	nop
	for (i = 0; i < 2; i++) {
    c7b4:	7ffb      	ldrb	r3, [r7, #31]
    c7b6:	3301      	adds	r3, #1
    c7b8:	77fb      	strb	r3, [r7, #31]
    c7ba:	7ffb      	ldrb	r3, [r7, #31]
    c7bc:	2b01      	cmp	r3, #1
    c7be:	d9dc      	bls.n	c77a <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
    c7c0:	69bb      	ldr	r3, [r7, #24]
    c7c2:	791b      	ldrb	r3, [r3, #4]
    c7c4:	2bff      	cmp	r3, #255	; 0xff
    c7c6:	d007      	beq.n	c7d8 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
    c7c8:	69bb      	ldr	r3, [r7, #24]
    c7ca:	791b      	ldrb	r3, [r3, #4]
    c7cc:	4618      	mov	r0, r3
    c7ce:	4b06      	ldr	r3, [pc, #24]	; (c7e8 <cdcdf_acm_disable+0xa4>)
    c7d0:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c7d2:	69bb      	ldr	r3, [r7, #24]
    c7d4:	22ff      	movs	r2, #255	; 0xff
    c7d6:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
    c7d8:	4b04      	ldr	r3, [pc, #16]	; (c7ec <cdcdf_acm_disable+0xa8>)
    c7da:	2200      	movs	r2, #0
    c7dc:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c7de:	2300      	movs	r3, #0
}
    c7e0:	4618      	mov	r0, r3
    c7e2:	3720      	adds	r7, #32
    c7e4:	46bd      	mov	sp, r7
    c7e6:	bd80      	pop	{r7, pc}
    c7e8:	00003c8d 	.word	0x00003c8d
    c7ec:	20001134 	.word	0x20001134

0000c7f0 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
    c7f0:	b580      	push	{r7, lr}
    c7f2:	b084      	sub	sp, #16
    c7f4:	af00      	add	r7, sp, #0
    c7f6:	60f8      	str	r0, [r7, #12]
    c7f8:	460b      	mov	r3, r1
    c7fa:	607a      	str	r2, [r7, #4]
    c7fc:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
    c7fe:	7afb      	ldrb	r3, [r7, #11]
    c800:	2b01      	cmp	r3, #1
    c802:	d009      	beq.n	c818 <cdcdf_acm_ctrl+0x28>
    c804:	2b02      	cmp	r3, #2
    c806:	d00d      	beq.n	c824 <cdcdf_acm_ctrl+0x34>
    c808:	2b00      	cmp	r3, #0
    c80a:	d10e      	bne.n	c82a <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    c80c:	6879      	ldr	r1, [r7, #4]
    c80e:	68f8      	ldr	r0, [r7, #12]
    c810:	4b09      	ldr	r3, [pc, #36]	; (c838 <cdcdf_acm_ctrl+0x48>)
    c812:	4798      	blx	r3
    c814:	4603      	mov	r3, r0
    c816:	e00a      	b.n	c82e <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    c818:	6879      	ldr	r1, [r7, #4]
    c81a:	68f8      	ldr	r0, [r7, #12]
    c81c:	4b07      	ldr	r3, [pc, #28]	; (c83c <cdcdf_acm_ctrl+0x4c>)
    c81e:	4798      	blx	r3
    c820:	4603      	mov	r3, r0
    c822:	e004      	b.n	c82e <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
    c824:	f06f 031a 	mvn.w	r3, #26
    c828:	e001      	b.n	c82e <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
    c82a:	f06f 030c 	mvn.w	r3, #12
	}
}
    c82e:	4618      	mov	r0, r3
    c830:	3710      	adds	r7, #16
    c832:	46bd      	mov	sp, r7
    c834:	bd80      	pop	{r7, pc}
    c836:	bf00      	nop
    c838:	0000c5d1 	.word	0x0000c5d1
    c83c:	0000c745 	.word	0x0000c745

0000c840 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c840:	b590      	push	{r4, r7, lr}
    c842:	b087      	sub	sp, #28
    c844:	af00      	add	r7, sp, #0
    c846:	4603      	mov	r3, r0
    c848:	6039      	str	r1, [r7, #0]
    c84a:	71fb      	strb	r3, [r7, #7]
    c84c:	4613      	mov	r3, r2
    c84e:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
    c850:	683b      	ldr	r3, [r7, #0]
    c852:	799a      	ldrb	r2, [r3, #6]
    c854:	79db      	ldrb	r3, [r3, #7]
    c856:	021b      	lsls	r3, r3, #8
    c858:	4313      	orrs	r3, r2
    c85a:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c85c:	4b2b      	ldr	r3, [pc, #172]	; (c90c <cdcdf_acm_set_req+0xcc>)
    c85e:	4798      	blx	r3
    c860:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
    c862:	683b      	ldr	r3, [r7, #0]
    c864:	785b      	ldrb	r3, [r3, #1]
    c866:	2b20      	cmp	r3, #32
    c868:	d002      	beq.n	c870 <cdcdf_acm_set_req+0x30>
    c86a:	2b22      	cmp	r3, #34	; 0x22
    c86c:	d034      	beq.n	c8d8 <cdcdf_acm_set_req+0x98>
    c86e:	e046      	b.n	c8fe <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c870:	8afb      	ldrh	r3, [r7, #22]
    c872:	2b07      	cmp	r3, #7
    c874:	d002      	beq.n	c87c <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
    c876:	f04f 33ff 	mov.w	r3, #4294967295
    c87a:	e042      	b.n	c902 <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
    c87c:	79bb      	ldrb	r3, [r7, #6]
    c87e:	2b00      	cmp	r3, #0
    c880:	d107      	bne.n	c892 <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c882:	8afa      	ldrh	r2, [r7, #22]
    c884:	79f8      	ldrb	r0, [r7, #7]
    c886:	2300      	movs	r3, #0
    c888:	6939      	ldr	r1, [r7, #16]
    c88a:	4c21      	ldr	r4, [pc, #132]	; (c910 <cdcdf_acm_set_req+0xd0>)
    c88c:	47a0      	blx	r4
    c88e:	4603      	mov	r3, r0
    c890:	e037      	b.n	c902 <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c892:	693a      	ldr	r2, [r7, #16]
    c894:	f107 0308 	add.w	r3, r7, #8
    c898:	6810      	ldr	r0, [r2, #0]
    c89a:	6018      	str	r0, [r3, #0]
    c89c:	8891      	ldrh	r1, [r2, #4]
    c89e:	7992      	ldrb	r2, [r2, #6]
    c8a0:	8099      	strh	r1, [r3, #4]
    c8a2:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c8a4:	4b1b      	ldr	r3, [pc, #108]	; (c914 <cdcdf_acm_set_req+0xd4>)
    c8a6:	681b      	ldr	r3, [r3, #0]
    c8a8:	2b00      	cmp	r3, #0
    c8aa:	d008      	beq.n	c8be <cdcdf_acm_set_req+0x7e>
    c8ac:	4b19      	ldr	r3, [pc, #100]	; (c914 <cdcdf_acm_set_req+0xd4>)
    c8ae:	681b      	ldr	r3, [r3, #0]
    c8b0:	f107 0208 	add.w	r2, r7, #8
    c8b4:	4610      	mov	r0, r2
    c8b6:	4798      	blx	r3
    c8b8:	4603      	mov	r3, r0
    c8ba:	2b00      	cmp	r3, #0
    c8bc:	d00a      	beq.n	c8d4 <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
    c8be:	4b16      	ldr	r3, [pc, #88]	; (c918 <cdcdf_acm_set_req+0xd8>)
    c8c0:	f107 0208 	add.w	r2, r7, #8
    c8c4:	e892 0003 	ldmia.w	r2, {r0, r1}
    c8c8:	6018      	str	r0, [r3, #0]
    c8ca:	3304      	adds	r3, #4
    c8cc:	8019      	strh	r1, [r3, #0]
    c8ce:	3302      	adds	r3, #2
    c8d0:	0c0a      	lsrs	r2, r1, #16
    c8d2:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
    c8d4:	2300      	movs	r3, #0
    c8d6:	e014      	b.n	c902 <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
    c8d8:	2300      	movs	r3, #0
    c8da:	2200      	movs	r2, #0
    c8dc:	2100      	movs	r1, #0
    c8de:	2000      	movs	r0, #0
    c8e0:	4c0b      	ldr	r4, [pc, #44]	; (c910 <cdcdf_acm_set_req+0xd0>)
    c8e2:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
    c8e4:	4b0d      	ldr	r3, [pc, #52]	; (c91c <cdcdf_acm_set_req+0xdc>)
    c8e6:	681b      	ldr	r3, [r3, #0]
    c8e8:	2b00      	cmp	r3, #0
    c8ea:	d006      	beq.n	c8fa <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
    c8ec:	4b0b      	ldr	r3, [pc, #44]	; (c91c <cdcdf_acm_set_req+0xdc>)
    c8ee:	681b      	ldr	r3, [r3, #0]
    c8f0:	683a      	ldr	r2, [r7, #0]
    c8f2:	8852      	ldrh	r2, [r2, #2]
    c8f4:	b292      	uxth	r2, r2
    c8f6:	4610      	mov	r0, r2
    c8f8:	4798      	blx	r3
		}
		return ERR_NONE;
    c8fa:	2300      	movs	r3, #0
    c8fc:	e001      	b.n	c902 <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
    c8fe:	f06f 030c 	mvn.w	r3, #12
	}
}
    c902:	4618      	mov	r0, r3
    c904:	371c      	adds	r7, #28
    c906:	46bd      	mov	sp, r7
    c908:	bd90      	pop	{r4, r7, pc}
    c90a:	bf00      	nop
    c90c:	0000d88d 	.word	0x0000d88d
    c910:	0000d701 	.word	0x0000d701
    c914:	20001148 	.word	0x20001148
    c918:	2000113c 	.word	0x2000113c
    c91c:	20001144 	.word	0x20001144

0000c920 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c920:	b590      	push	{r4, r7, lr}
    c922:	b085      	sub	sp, #20
    c924:	af00      	add	r7, sp, #0
    c926:	4603      	mov	r3, r0
    c928:	6039      	str	r1, [r7, #0]
    c92a:	71fb      	strb	r3, [r7, #7]
    c92c:	4613      	mov	r3, r2
    c92e:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
    c930:	683b      	ldr	r3, [r7, #0]
    c932:	799a      	ldrb	r2, [r3, #6]
    c934:	79db      	ldrb	r3, [r3, #7]
    c936:	021b      	lsls	r3, r3, #8
    c938:	4313      	orrs	r3, r2
    c93a:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
    c93c:	79bb      	ldrb	r3, [r7, #6]
    c93e:	2b01      	cmp	r3, #1
    c940:	d101      	bne.n	c946 <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
    c942:	2300      	movs	r3, #0
    c944:	e013      	b.n	c96e <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
    c946:	683b      	ldr	r3, [r7, #0]
    c948:	785b      	ldrb	r3, [r3, #1]
    c94a:	2b21      	cmp	r3, #33	; 0x21
    c94c:	d10d      	bne.n	c96a <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c94e:	89fb      	ldrh	r3, [r7, #14]
    c950:	2b07      	cmp	r3, #7
    c952:	d002      	beq.n	c95a <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
    c954:	f04f 33ff 	mov.w	r3, #4294967295
    c958:	e009      	b.n	c96e <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c95a:	89fa      	ldrh	r2, [r7, #14]
    c95c:	79f8      	ldrb	r0, [r7, #7]
    c95e:	2300      	movs	r3, #0
    c960:	4905      	ldr	r1, [pc, #20]	; (c978 <cdcdf_acm_get_req+0x58>)
    c962:	4c06      	ldr	r4, [pc, #24]	; (c97c <cdcdf_acm_get_req+0x5c>)
    c964:	47a0      	blx	r4
    c966:	4603      	mov	r3, r0
    c968:	e001      	b.n	c96e <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
    c96a:	f06f 030c 	mvn.w	r3, #12
	}
}
    c96e:	4618      	mov	r0, r3
    c970:	3714      	adds	r7, #20
    c972:	46bd      	mov	sp, r7
    c974:	bd90      	pop	{r4, r7, pc}
    c976:	bf00      	nop
    c978:	2000113c 	.word	0x2000113c
    c97c:	0000d701 	.word	0x0000d701

0000c980 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c980:	b580      	push	{r7, lr}
    c982:	b082      	sub	sp, #8
    c984:	af00      	add	r7, sp, #0
    c986:	4603      	mov	r3, r0
    c988:	6039      	str	r1, [r7, #0]
    c98a:	71fb      	strb	r3, [r7, #7]
    c98c:	4613      	mov	r3, r2
    c98e:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c990:	683b      	ldr	r3, [r7, #0]
    c992:	781b      	ldrb	r3, [r3, #0]
    c994:	095b      	lsrs	r3, r3, #5
    c996:	b2db      	uxtb	r3, r3
    c998:	f003 0303 	and.w	r3, r3, #3
    c99c:	2b01      	cmp	r3, #1
    c99e:	d002      	beq.n	c9a6 <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
    c9a0:	f06f 0309 	mvn.w	r3, #9
    c9a4:	e026      	b.n	c9f4 <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c9a6:	683b      	ldr	r3, [r7, #0]
    c9a8:	889b      	ldrh	r3, [r3, #4]
    c9aa:	b29a      	uxth	r2, r3
    c9ac:	4b13      	ldr	r3, [pc, #76]	; (c9fc <cdcdf_acm_req+0x7c>)
    c9ae:	781b      	ldrb	r3, [r3, #0]
    c9b0:	b29b      	uxth	r3, r3
    c9b2:	429a      	cmp	r2, r3
    c9b4:	d007      	beq.n	c9c6 <cdcdf_acm_req+0x46>
    c9b6:	683b      	ldr	r3, [r7, #0]
    c9b8:	889b      	ldrh	r3, [r3, #4]
    c9ba:	b29a      	uxth	r2, r3
    c9bc:	4b0f      	ldr	r3, [pc, #60]	; (c9fc <cdcdf_acm_req+0x7c>)
    c9be:	785b      	ldrb	r3, [r3, #1]
    c9c0:	b29b      	uxth	r3, r3
    c9c2:	429a      	cmp	r2, r3
    c9c4:	d114      	bne.n	c9f0 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c9c6:	683b      	ldr	r3, [r7, #0]
    c9c8:	781b      	ldrb	r3, [r3, #0]
    c9ca:	b25b      	sxtb	r3, r3
    c9cc:	2b00      	cmp	r3, #0
    c9ce:	da07      	bge.n	c9e0 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
    c9d0:	79ba      	ldrb	r2, [r7, #6]
    c9d2:	79fb      	ldrb	r3, [r7, #7]
    c9d4:	6839      	ldr	r1, [r7, #0]
    c9d6:	4618      	mov	r0, r3
    c9d8:	4b09      	ldr	r3, [pc, #36]	; (ca00 <cdcdf_acm_req+0x80>)
    c9da:	4798      	blx	r3
    c9dc:	4603      	mov	r3, r0
    c9de:	e009      	b.n	c9f4 <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
    c9e0:	79ba      	ldrb	r2, [r7, #6]
    c9e2:	79fb      	ldrb	r3, [r7, #7]
    c9e4:	6839      	ldr	r1, [r7, #0]
    c9e6:	4618      	mov	r0, r3
    c9e8:	4b06      	ldr	r3, [pc, #24]	; (ca04 <cdcdf_acm_req+0x84>)
    c9ea:	4798      	blx	r3
    c9ec:	4603      	mov	r3, r0
    c9ee:	e001      	b.n	c9f4 <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
    c9f0:	f06f 0309 	mvn.w	r3, #9
	}
}
    c9f4:	4618      	mov	r0, r3
    c9f6:	3708      	adds	r7, #8
    c9f8:	46bd      	mov	sp, r7
    c9fa:	bd80      	pop	{r7, pc}
    c9fc:	20001134 	.word	0x20001134
    ca00:	0000c921 	.word	0x0000c921
    ca04:	0000c841 	.word	0x0000c841

0000ca08 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    ca08:	b580      	push	{r7, lr}
    ca0a:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
    ca0c:	4b0b      	ldr	r3, [pc, #44]	; (ca3c <cdcdf_acm_init+0x34>)
    ca0e:	4798      	blx	r3
    ca10:	4603      	mov	r3, r0
    ca12:	2b01      	cmp	r3, #1
    ca14:	d902      	bls.n	ca1c <cdcdf_acm_init+0x14>
		return ERR_DENIED;
    ca16:	f06f 0310 	mvn.w	r3, #16
    ca1a:	e00d      	b.n	ca38 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    ca1c:	4b08      	ldr	r3, [pc, #32]	; (ca40 <cdcdf_acm_init+0x38>)
    ca1e:	4a09      	ldr	r2, [pc, #36]	; (ca44 <cdcdf_acm_init+0x3c>)
    ca20:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    ca22:	4b07      	ldr	r3, [pc, #28]	; (ca40 <cdcdf_acm_init+0x38>)
    ca24:	4a08      	ldr	r2, [pc, #32]	; (ca48 <cdcdf_acm_init+0x40>)
    ca26:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
    ca28:	4805      	ldr	r0, [pc, #20]	; (ca40 <cdcdf_acm_init+0x38>)
    ca2a:	4b08      	ldr	r3, [pc, #32]	; (ca4c <cdcdf_acm_init+0x44>)
    ca2c:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    ca2e:	4908      	ldr	r1, [pc, #32]	; (ca50 <cdcdf_acm_init+0x48>)
    ca30:	2001      	movs	r0, #1
    ca32:	4b08      	ldr	r3, [pc, #32]	; (ca54 <cdcdf_acm_init+0x4c>)
    ca34:	4798      	blx	r3
	return ERR_NONE;
    ca36:	2300      	movs	r3, #0
}
    ca38:	4618      	mov	r0, r3
    ca3a:	bd80      	pop	{r7, pc}
    ca3c:	0000d8a5 	.word	0x0000d8a5
    ca40:	20001128 	.word	0x20001128
    ca44:	0000c7f1 	.word	0x0000c7f1
    ca48:	20001134 	.word	0x20001134
    ca4c:	0000d80d 	.word	0x0000d80d
    ca50:	20000208 	.word	0x20000208
    ca54:	0000d73d 	.word	0x0000d73d

0000ca58 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    ca58:	b590      	push	{r4, r7, lr}
    ca5a:	b083      	sub	sp, #12
    ca5c:	af00      	add	r7, sp, #0
    ca5e:	6078      	str	r0, [r7, #4]
    ca60:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    ca62:	4b0b      	ldr	r3, [pc, #44]	; (ca90 <cdcdf_acm_read+0x38>)
    ca64:	4798      	blx	r3
    ca66:	4603      	mov	r3, r0
    ca68:	f083 0301 	eor.w	r3, r3, #1
    ca6c:	b2db      	uxtb	r3, r3
    ca6e:	2b00      	cmp	r3, #0
    ca70:	d002      	beq.n	ca78 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
    ca72:	f06f 0310 	mvn.w	r3, #16
    ca76:	e007      	b.n	ca88 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    ca78:	4b06      	ldr	r3, [pc, #24]	; (ca94 <cdcdf_acm_read+0x3c>)
    ca7a:	7918      	ldrb	r0, [r3, #4]
    ca7c:	2300      	movs	r3, #0
    ca7e:	683a      	ldr	r2, [r7, #0]
    ca80:	6879      	ldr	r1, [r7, #4]
    ca82:	4c05      	ldr	r4, [pc, #20]	; (ca98 <cdcdf_acm_read+0x40>)
    ca84:	47a0      	blx	r4
    ca86:	4603      	mov	r3, r0
}
    ca88:	4618      	mov	r0, r3
    ca8a:	370c      	adds	r7, #12
    ca8c:	46bd      	mov	sp, r7
    ca8e:	bd90      	pop	{r4, r7, pc}
    ca90:	0000cb7d 	.word	0x0000cb7d
    ca94:	20001134 	.word	0x20001134
    ca98:	0000d701 	.word	0x0000d701

0000ca9c <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    ca9c:	b590      	push	{r4, r7, lr}
    ca9e:	b083      	sub	sp, #12
    caa0:	af00      	add	r7, sp, #0
    caa2:	6078      	str	r0, [r7, #4]
    caa4:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
    caa6:	4b0b      	ldr	r3, [pc, #44]	; (cad4 <cdcdf_acm_write+0x38>)
    caa8:	4798      	blx	r3
    caaa:	4603      	mov	r3, r0
    caac:	f083 0301 	eor.w	r3, r3, #1
    cab0:	b2db      	uxtb	r3, r3
    cab2:	2b00      	cmp	r3, #0
    cab4:	d002      	beq.n	cabc <cdcdf_acm_write+0x20>
		return ERR_DENIED;
    cab6:	f06f 0310 	mvn.w	r3, #16
    caba:	e007      	b.n	cacc <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    cabc:	4b06      	ldr	r3, [pc, #24]	; (cad8 <cdcdf_acm_write+0x3c>)
    cabe:	78d8      	ldrb	r0, [r3, #3]
    cac0:	2301      	movs	r3, #1
    cac2:	683a      	ldr	r2, [r7, #0]
    cac4:	6879      	ldr	r1, [r7, #4]
    cac6:	4c05      	ldr	r4, [pc, #20]	; (cadc <cdcdf_acm_write+0x40>)
    cac8:	47a0      	blx	r4
    caca:	4603      	mov	r3, r0
}
    cacc:	4618      	mov	r0, r3
    cace:	370c      	adds	r7, #12
    cad0:	46bd      	mov	sp, r7
    cad2:	bd90      	pop	{r4, r7, pc}
    cad4:	0000cb7d 	.word	0x0000cb7d
    cad8:	20001134 	.word	0x20001134
    cadc:	0000d701 	.word	0x0000d701

0000cae0 <cdcdf_acm_stop_xfer>:

/**
 * \brief USB CDC ACM Stop the data transfer
 */
void cdcdf_acm_stop_xfer(void)
{
    cae0:	b580      	push	{r7, lr}
    cae2:	af00      	add	r7, sp, #0
	/* Stop transfer. */
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX]);
    cae4:	4b05      	ldr	r3, [pc, #20]	; (cafc <cdcdf_acm_stop_xfer+0x1c>)
    cae6:	78db      	ldrb	r3, [r3, #3]
    cae8:	4618      	mov	r0, r3
    caea:	4b05      	ldr	r3, [pc, #20]	; (cb00 <cdcdf_acm_stop_xfer+0x20>)
    caec:	4798      	blx	r3
	usb_d_ep_abort(_cdcdf_acm_funcd.func_ep_out);
    caee:	4b03      	ldr	r3, [pc, #12]	; (cafc <cdcdf_acm_stop_xfer+0x1c>)
    caf0:	791b      	ldrb	r3, [r3, #4]
    caf2:	4618      	mov	r0, r3
    caf4:	4b02      	ldr	r3, [pc, #8]	; (cb00 <cdcdf_acm_stop_xfer+0x20>)
    caf6:	4798      	blx	r3
}
    caf8:	bf00      	nop
    cafa:	bd80      	pop	{r7, pc}
    cafc:	20001134 	.word	0x20001134
    cb00:	00003eb5 	.word	0x00003eb5

0000cb04 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
    cb04:	b580      	push	{r7, lr}
    cb06:	b082      	sub	sp, #8
    cb08:	af00      	add	r7, sp, #0
    cb0a:	4603      	mov	r3, r0
    cb0c:	6039      	str	r1, [r7, #0]
    cb0e:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
    cb10:	79fb      	ldrb	r3, [r7, #7]
    cb12:	2b03      	cmp	r3, #3
    cb14:	d822      	bhi.n	cb5c <cdcdf_acm_register_callback+0x58>
    cb16:	a201      	add	r2, pc, #4	; (adr r2, cb1c <cdcdf_acm_register_callback+0x18>)
    cb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cb1c:	0000cb2d 	.word	0x0000cb2d
    cb20:	0000cb3d 	.word	0x0000cb3d
    cb24:	0000cb4d 	.word	0x0000cb4d
    cb28:	0000cb55 	.word	0x0000cb55
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    cb2c:	4b0f      	ldr	r3, [pc, #60]	; (cb6c <cdcdf_acm_register_callback+0x68>)
    cb2e:	791b      	ldrb	r3, [r3, #4]
    cb30:	683a      	ldr	r2, [r7, #0]
    cb32:	2102      	movs	r1, #2
    cb34:	4618      	mov	r0, r3
    cb36:	4b0e      	ldr	r3, [pc, #56]	; (cb70 <cdcdf_acm_register_callback+0x6c>)
    cb38:	4798      	blx	r3
		break;
    cb3a:	e012      	b.n	cb62 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    cb3c:	4b0b      	ldr	r3, [pc, #44]	; (cb6c <cdcdf_acm_register_callback+0x68>)
    cb3e:	78db      	ldrb	r3, [r3, #3]
    cb40:	683a      	ldr	r2, [r7, #0]
    cb42:	2102      	movs	r1, #2
    cb44:	4618      	mov	r0, r3
    cb46:	4b0a      	ldr	r3, [pc, #40]	; (cb70 <cdcdf_acm_register_callback+0x6c>)
    cb48:	4798      	blx	r3
		break;
    cb4a:	e00a      	b.n	cb62 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    cb4c:	4a09      	ldr	r2, [pc, #36]	; (cb74 <cdcdf_acm_register_callback+0x70>)
    cb4e:	683b      	ldr	r3, [r7, #0]
    cb50:	6013      	str	r3, [r2, #0]
		break;
    cb52:	e006      	b.n	cb62 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    cb54:	4a08      	ldr	r2, [pc, #32]	; (cb78 <cdcdf_acm_register_callback+0x74>)
    cb56:	683b      	ldr	r3, [r7, #0]
    cb58:	6013      	str	r3, [r2, #0]
		break;
    cb5a:	e002      	b.n	cb62 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
    cb5c:	f06f 030c 	mvn.w	r3, #12
    cb60:	e000      	b.n	cb64 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
    cb62:	2300      	movs	r3, #0
}
    cb64:	4618      	mov	r0, r3
    cb66:	3708      	adds	r7, #8
    cb68:	46bd      	mov	sp, r7
    cb6a:	bd80      	pop	{r7, pc}
    cb6c:	20001134 	.word	0x20001134
    cb70:	00003fe1 	.word	0x00003fe1
    cb74:	20001148 	.word	0x20001148
    cb78:	20001144 	.word	0x20001144

0000cb7c <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
    cb7c:	b480      	push	{r7}
    cb7e:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
    cb80:	4b03      	ldr	r3, [pc, #12]	; (cb90 <cdcdf_acm_is_enabled+0x14>)
    cb82:	795b      	ldrb	r3, [r3, #5]
}
    cb84:	4618      	mov	r0, r3
    cb86:	46bd      	mov	sp, r7
    cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb8c:	4770      	bx	lr
    cb8e:	bf00      	nop
    cb90:	20001134 	.word	0x20001134

0000cb94 <usb_get_u16>:
{
    cb94:	b480      	push	{r7}
    cb96:	b083      	sub	sp, #12
    cb98:	af00      	add	r7, sp, #0
    cb9a:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    cb9c:	687b      	ldr	r3, [r7, #4]
    cb9e:	781b      	ldrb	r3, [r3, #0]
    cba0:	b29a      	uxth	r2, r3
    cba2:	687b      	ldr	r3, [r7, #4]
    cba4:	3301      	adds	r3, #1
    cba6:	781b      	ldrb	r3, [r3, #0]
    cba8:	b29b      	uxth	r3, r3
    cbaa:	021b      	lsls	r3, r3, #8
    cbac:	b29b      	uxth	r3, r3
    cbae:	4413      	add	r3, r2
    cbb0:	b29b      	uxth	r3, r3
}
    cbb2:	4618      	mov	r0, r3
    cbb4:	370c      	adds	r7, #12
    cbb6:	46bd      	mov	sp, r7
    cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbbc:	4770      	bx	lr

0000cbbe <usb_desc_len>:
{
    cbbe:	b480      	push	{r7}
    cbc0:	b083      	sub	sp, #12
    cbc2:	af00      	add	r7, sp, #0
    cbc4:	6078      	str	r0, [r7, #4]
	return desc[0];
    cbc6:	687b      	ldr	r3, [r7, #4]
    cbc8:	781b      	ldrb	r3, [r3, #0]
}
    cbca:	4618      	mov	r0, r3
    cbcc:	370c      	adds	r7, #12
    cbce:	46bd      	mov	sp, r7
    cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbd4:	4770      	bx	lr
	...

0000cbd8 <usb_desc_next>:
{
    cbd8:	b580      	push	{r7, lr}
    cbda:	b082      	sub	sp, #8
    cbdc:	af00      	add	r7, sp, #0
    cbde:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    cbe0:	6878      	ldr	r0, [r7, #4]
    cbe2:	4b05      	ldr	r3, [pc, #20]	; (cbf8 <usb_desc_next+0x20>)
    cbe4:	4798      	blx	r3
    cbe6:	4603      	mov	r3, r0
    cbe8:	461a      	mov	r2, r3
    cbea:	687b      	ldr	r3, [r7, #4]
    cbec:	4413      	add	r3, r2
}
    cbee:	4618      	mov	r0, r3
    cbf0:	3708      	adds	r7, #8
    cbf2:	46bd      	mov	sp, r7
    cbf4:	bd80      	pop	{r7, pc}
    cbf6:	bf00      	nop
    cbf8:	0000cbbf 	.word	0x0000cbbf

0000cbfc <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
    cbfc:	b580      	push	{r7, lr}
    cbfe:	b082      	sub	sp, #8
    cc00:	af00      	add	r7, sp, #0
    cc02:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    cc04:	687b      	ldr	r3, [r7, #4]
    cc06:	3302      	adds	r3, #2
    cc08:	4618      	mov	r0, r3
    cc0a:	4b03      	ldr	r3, [pc, #12]	; (cc18 <usb_cfg_desc_total_len+0x1c>)
    cc0c:	4798      	blx	r3
    cc0e:	4603      	mov	r3, r0
}
    cc10:	4618      	mov	r0, r3
    cc12:	3708      	adds	r7, #8
    cc14:	46bd      	mov	sp, r7
    cc16:	bd80      	pop	{r7, pc}
    cc18:	0000cb95 	.word	0x0000cb95

0000cc1c <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
    cc1c:	b590      	push	{r4, r7, lr}
    cc1e:	b085      	sub	sp, #20
    cc20:	af00      	add	r7, sp, #0
    cc22:	4603      	mov	r3, r0
    cc24:	6039      	str	r1, [r7, #0]
    cc26:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
    cc28:	2300      	movs	r3, #0
    cc2a:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
    cc2c:	683b      	ldr	r3, [r7, #0]
    cc2e:	799a      	ldrb	r2, [r3, #6]
    cc30:	79db      	ldrb	r3, [r3, #7]
    cc32:	021b      	lsls	r3, r3, #8
    cc34:	4313      	orrs	r3, r2
    cc36:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
    cc38:	897b      	ldrh	r3, [r7, #10]
    cc3a:	2b12      	cmp	r3, #18
    cc3c:	d901      	bls.n	cc42 <usbdc_get_dev_desc+0x26>
		length = 0x12;
    cc3e:	2312      	movs	r3, #18
    cc40:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
    cc42:	68fb      	ldr	r3, [r7, #12]
    cc44:	2b00      	cmp	r3, #0
    cc46:	d10a      	bne.n	cc5e <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    cc48:	4b0f      	ldr	r3, [pc, #60]	; (cc88 <usbdc_get_dev_desc+0x6c>)
    cc4a:	681b      	ldr	r3, [r3, #0]
    cc4c:	6818      	ldr	r0, [r3, #0]
    cc4e:	4b0e      	ldr	r3, [pc, #56]	; (cc88 <usbdc_get_dev_desc+0x6c>)
    cc50:	681b      	ldr	r3, [r3, #0]
    cc52:	685b      	ldr	r3, [r3, #4]
    cc54:	2201      	movs	r2, #1
    cc56:	4619      	mov	r1, r3
    cc58:	4b0c      	ldr	r3, [pc, #48]	; (cc8c <usbdc_get_dev_desc+0x70>)
    cc5a:	4798      	blx	r3
    cc5c:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
    cc5e:	68fb      	ldr	r3, [r7, #12]
    cc60:	2b00      	cmp	r3, #0
    cc62:	d101      	bne.n	cc68 <usbdc_get_dev_desc+0x4c>
		return false;
    cc64:	2300      	movs	r3, #0
    cc66:	e00b      	b.n	cc80 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    cc68:	897a      	ldrh	r2, [r7, #10]
    cc6a:	79f8      	ldrb	r0, [r7, #7]
    cc6c:	2300      	movs	r3, #0
    cc6e:	68f9      	ldr	r1, [r7, #12]
    cc70:	4c07      	ldr	r4, [pc, #28]	; (cc90 <usbdc_get_dev_desc+0x74>)
    cc72:	47a0      	blx	r4
    cc74:	4603      	mov	r3, r0
    cc76:	2b00      	cmp	r3, #0
    cc78:	d001      	beq.n	cc7e <usbdc_get_dev_desc+0x62>
		return false;
    cc7a:	2300      	movs	r3, #0
    cc7c:	e000      	b.n	cc80 <usbdc_get_dev_desc+0x64>
	}
	return true;
    cc7e:	2301      	movs	r3, #1
}
    cc80:	4618      	mov	r0, r3
    cc82:	3714      	adds	r7, #20
    cc84:	46bd      	mov	sp, r7
    cc86:	bd90      	pop	{r4, r7, pc}
    cc88:	2000114c 	.word	0x2000114c
    cc8c:	0000d991 	.word	0x0000d991
    cc90:	0000d701 	.word	0x0000d701

0000cc94 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
    cc94:	b590      	push	{r4, r7, lr}
    cc96:	b087      	sub	sp, #28
    cc98:	af00      	add	r7, sp, #0
    cc9a:	4603      	mov	r3, r0
    cc9c:	6039      	str	r1, [r7, #0]
    cc9e:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
    cca0:	2300      	movs	r3, #0
    cca2:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
    cca4:	683b      	ldr	r3, [r7, #0]
    cca6:	799a      	ldrb	r2, [r3, #6]
    cca8:	79db      	ldrb	r3, [r3, #7]
    ccaa:	021b      	lsls	r3, r3, #8
    ccac:	4313      	orrs	r3, r2
    ccae:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
    ccb0:	683b      	ldr	r3, [r7, #0]
    ccb2:	885b      	ldrh	r3, [r3, #2]
    ccb4:	b29b      	uxth	r3, r3
    ccb6:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    ccb8:	8a7a      	ldrh	r2, [r7, #18]
    ccba:	4b1e      	ldr	r3, [pc, #120]	; (cd34 <usbdc_get_cfg_desc+0xa0>)
    ccbc:	7f1b      	ldrb	r3, [r3, #28]
    ccbe:	3b01      	subs	r3, #1
    ccc0:	4013      	ands	r3, r2
    ccc2:	2b00      	cmp	r3, #0
    ccc4:	bf0c      	ite	eq
    ccc6:	2301      	moveq	r3, #1
    ccc8:	2300      	movne	r3, #0
    ccca:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    cccc:	697b      	ldr	r3, [r7, #20]
    ccce:	2b00      	cmp	r3, #0
    ccd0:	d10c      	bne.n	ccec <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    ccd2:	4b18      	ldr	r3, [pc, #96]	; (cd34 <usbdc_get_cfg_desc+0xa0>)
    ccd4:	681b      	ldr	r3, [r3, #0]
    ccd6:	6818      	ldr	r0, [r3, #0]
    ccd8:	4b16      	ldr	r3, [pc, #88]	; (cd34 <usbdc_get_cfg_desc+0xa0>)
    ccda:	681b      	ldr	r3, [r3, #0]
    ccdc:	6859      	ldr	r1, [r3, #4]
    ccde:	7c3b      	ldrb	r3, [r7, #16]
    cce0:	3301      	adds	r3, #1
    cce2:	b2db      	uxtb	r3, r3
    cce4:	461a      	mov	r2, r3
    cce6:	4b14      	ldr	r3, [pc, #80]	; (cd38 <usbdc_get_cfg_desc+0xa4>)
    cce8:	4798      	blx	r3
    ccea:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
    ccec:	697b      	ldr	r3, [r7, #20]
    ccee:	2b00      	cmp	r3, #0
    ccf0:	d101      	bne.n	ccf6 <usbdc_get_cfg_desc+0x62>
		return false;
    ccf2:	2300      	movs	r3, #0
    ccf4:	e019      	b.n	cd2a <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
    ccf6:	6978      	ldr	r0, [r7, #20]
    ccf8:	4b10      	ldr	r3, [pc, #64]	; (cd3c <usbdc_get_cfg_desc+0xa8>)
    ccfa:	4798      	blx	r3
    ccfc:	4603      	mov	r3, r0
    ccfe:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
    cd00:	8a7a      	ldrh	r2, [r7, #18]
    cd02:	89fb      	ldrh	r3, [r7, #14]
    cd04:	429a      	cmp	r2, r3
    cd06:	d802      	bhi.n	cd0e <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
    cd08:	2300      	movs	r3, #0
    cd0a:	747b      	strb	r3, [r7, #17]
    cd0c:	e001      	b.n	cd12 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
    cd0e:	89fb      	ldrh	r3, [r7, #14]
    cd10:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    cd12:	8a7a      	ldrh	r2, [r7, #18]
    cd14:	7c7b      	ldrb	r3, [r7, #17]
    cd16:	79f8      	ldrb	r0, [r7, #7]
    cd18:	6979      	ldr	r1, [r7, #20]
    cd1a:	4c09      	ldr	r4, [pc, #36]	; (cd40 <usbdc_get_cfg_desc+0xac>)
    cd1c:	47a0      	blx	r4
    cd1e:	4603      	mov	r3, r0
    cd20:	2b00      	cmp	r3, #0
    cd22:	d001      	beq.n	cd28 <usbdc_get_cfg_desc+0x94>
		return false;
    cd24:	2300      	movs	r3, #0
    cd26:	e000      	b.n	cd2a <usbdc_get_cfg_desc+0x96>
	}
	return true;
    cd28:	2301      	movs	r3, #1
}
    cd2a:	4618      	mov	r0, r3
    cd2c:	371c      	adds	r7, #28
    cd2e:	46bd      	mov	sp, r7
    cd30:	bd90      	pop	{r4, r7, pc}
    cd32:	bf00      	nop
    cd34:	2000114c 	.word	0x2000114c
    cd38:	0000da51 	.word	0x0000da51
    cd3c:	0000cbfd 	.word	0x0000cbfd
    cd40:	0000d701 	.word	0x0000d701

0000cd44 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
    cd44:	b590      	push	{r4, r7, lr}
    cd46:	b085      	sub	sp, #20
    cd48:	af00      	add	r7, sp, #0
    cd4a:	4603      	mov	r3, r0
    cd4c:	6039      	str	r1, [r7, #0]
    cd4e:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
    cd50:	683b      	ldr	r3, [r7, #0]
    cd52:	799a      	ldrb	r2, [r3, #6]
    cd54:	79db      	ldrb	r3, [r3, #7]
    cd56:	021b      	lsls	r3, r3, #8
    cd58:	4313      	orrs	r3, r2
    cd5a:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
    cd5c:	683b      	ldr	r3, [r7, #0]
    cd5e:	885b      	ldrh	r3, [r3, #2]
    cd60:	b29b      	uxth	r3, r3
    cd62:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    cd64:	89fa      	ldrh	r2, [r7, #14]
    cd66:	4b1a      	ldr	r3, [pc, #104]	; (cdd0 <usbdc_get_str_desc+0x8c>)
    cd68:	7f1b      	ldrb	r3, [r3, #28]
    cd6a:	3b01      	subs	r3, #1
    cd6c:	4013      	ands	r3, r2
    cd6e:	2b00      	cmp	r3, #0
    cd70:	bf0c      	ite	eq
    cd72:	2301      	moveq	r3, #1
    cd74:	2300      	movne	r3, #0
    cd76:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    cd78:	4b15      	ldr	r3, [pc, #84]	; (cdd0 <usbdc_get_str_desc+0x8c>)
    cd7a:	681b      	ldr	r3, [r3, #0]
    cd7c:	6818      	ldr	r0, [r3, #0]
    cd7e:	4b14      	ldr	r3, [pc, #80]	; (cdd0 <usbdc_get_str_desc+0x8c>)
    cd80:	681b      	ldr	r3, [r3, #0]
    cd82:	685b      	ldr	r3, [r3, #4]
    cd84:	7b3a      	ldrb	r2, [r7, #12]
    cd86:	4619      	mov	r1, r3
    cd88:	4b12      	ldr	r3, [pc, #72]	; (cdd4 <usbdc_get_str_desc+0x90>)
    cd8a:	4798      	blx	r3
    cd8c:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
    cd8e:	68bb      	ldr	r3, [r7, #8]
    cd90:	2b00      	cmp	r3, #0
    cd92:	d101      	bne.n	cd98 <usbdc_get_str_desc+0x54>
		return false;
    cd94:	2300      	movs	r3, #0
    cd96:	e017      	b.n	cdc8 <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
    cd98:	68bb      	ldr	r3, [r7, #8]
    cd9a:	781b      	ldrb	r3, [r3, #0]
    cd9c:	b29b      	uxth	r3, r3
    cd9e:	89fa      	ldrh	r2, [r7, #14]
    cda0:	429a      	cmp	r2, r3
    cda2:	d802      	bhi.n	cdaa <usbdc_get_str_desc+0x66>
		need_zlp = false;
    cda4:	2300      	movs	r3, #0
    cda6:	737b      	strb	r3, [r7, #13]
    cda8:	e002      	b.n	cdb0 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
    cdaa:	68bb      	ldr	r3, [r7, #8]
    cdac:	781b      	ldrb	r3, [r3, #0]
    cdae:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    cdb0:	89fa      	ldrh	r2, [r7, #14]
    cdb2:	7b7b      	ldrb	r3, [r7, #13]
    cdb4:	79f8      	ldrb	r0, [r7, #7]
    cdb6:	68b9      	ldr	r1, [r7, #8]
    cdb8:	4c07      	ldr	r4, [pc, #28]	; (cdd8 <usbdc_get_str_desc+0x94>)
    cdba:	47a0      	blx	r4
    cdbc:	4603      	mov	r3, r0
    cdbe:	2b00      	cmp	r3, #0
    cdc0:	d001      	beq.n	cdc6 <usbdc_get_str_desc+0x82>
		return false;
    cdc2:	2300      	movs	r3, #0
    cdc4:	e000      	b.n	cdc8 <usbdc_get_str_desc+0x84>
	}
	return true;
    cdc6:	2301      	movs	r3, #1
}
    cdc8:	4618      	mov	r0, r3
    cdca:	3714      	adds	r7, #20
    cdcc:	46bd      	mov	sp, r7
    cdce:	bd90      	pop	{r4, r7, pc}
    cdd0:	2000114c 	.word	0x2000114c
    cdd4:	0000dac9 	.word	0x0000dac9
    cdd8:	0000d701 	.word	0x0000d701

0000cddc <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
    cddc:	b580      	push	{r7, lr}
    cdde:	b084      	sub	sp, #16
    cde0:	af00      	add	r7, sp, #0
    cde2:	4603      	mov	r3, r0
    cde4:	6039      	str	r1, [r7, #0]
    cde6:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
    cde8:	683b      	ldr	r3, [r7, #0]
    cdea:	885b      	ldrh	r3, [r3, #2]
    cdec:	b29b      	uxth	r3, r3
    cdee:	0a1b      	lsrs	r3, r3, #8
    cdf0:	b29b      	uxth	r3, r3
    cdf2:	73fb      	strb	r3, [r7, #15]
	switch (type) {
    cdf4:	7bfb      	ldrb	r3, [r7, #15]
    cdf6:	2b02      	cmp	r3, #2
    cdf8:	d00d      	beq.n	ce16 <usbdc_get_desc_req+0x3a>
    cdfa:	2b03      	cmp	r3, #3
    cdfc:	d012      	beq.n	ce24 <usbdc_get_desc_req+0x48>
    cdfe:	2b01      	cmp	r3, #1
    ce00:	d002      	beq.n	ce08 <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
    ce02:	bf00      	nop
	}
	return false;
    ce04:	2300      	movs	r3, #0
    ce06:	e013      	b.n	ce30 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
    ce08:	79fb      	ldrb	r3, [r7, #7]
    ce0a:	6839      	ldr	r1, [r7, #0]
    ce0c:	4618      	mov	r0, r3
    ce0e:	4b0a      	ldr	r3, [pc, #40]	; (ce38 <usbdc_get_desc_req+0x5c>)
    ce10:	4798      	blx	r3
    ce12:	4603      	mov	r3, r0
    ce14:	e00c      	b.n	ce30 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
    ce16:	79fb      	ldrb	r3, [r7, #7]
    ce18:	6839      	ldr	r1, [r7, #0]
    ce1a:	4618      	mov	r0, r3
    ce1c:	4b07      	ldr	r3, [pc, #28]	; (ce3c <usbdc_get_desc_req+0x60>)
    ce1e:	4798      	blx	r3
    ce20:	4603      	mov	r3, r0
    ce22:	e005      	b.n	ce30 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
    ce24:	79fb      	ldrb	r3, [r7, #7]
    ce26:	6839      	ldr	r1, [r7, #0]
    ce28:	4618      	mov	r0, r3
    ce2a:	4b05      	ldr	r3, [pc, #20]	; (ce40 <usbdc_get_desc_req+0x64>)
    ce2c:	4798      	blx	r3
    ce2e:	4603      	mov	r3, r0
}
    ce30:	4618      	mov	r0, r3
    ce32:	3710      	adds	r7, #16
    ce34:	46bd      	mov	sp, r7
    ce36:	bd80      	pop	{r7, pc}
    ce38:	0000cc1d 	.word	0x0000cc1d
    ce3c:	0000cc95 	.word	0x0000cc95
    ce40:	0000cd45 	.word	0x0000cd45

0000ce44 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
    ce44:	b590      	push	{r4, r7, lr}
    ce46:	b085      	sub	sp, #20
    ce48:	af00      	add	r7, sp, #0
    ce4a:	4603      	mov	r3, r0
    ce4c:	6039      	str	r1, [r7, #0]
    ce4e:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    ce50:	683b      	ldr	r3, [r7, #0]
    ce52:	781b      	ldrb	r3, [r3, #0]
    ce54:	f003 031f 	and.w	r3, r3, #31
    ce58:	2b00      	cmp	r3, #0
    ce5a:	db1b      	blt.n	ce94 <usbdc_get_status_req+0x50>
    ce5c:	2b01      	cmp	r3, #1
    ce5e:	dd02      	ble.n	ce66 <usbdc_get_status_req+0x22>
    ce60:	2b02      	cmp	r3, #2
    ce62:	d003      	beq.n	ce6c <usbdc_get_status_req+0x28>
    ce64:	e016      	b.n	ce94 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
    ce66:	2300      	movs	r3, #0
    ce68:	60fb      	str	r3, [r7, #12]
		break;
    ce6a:	e015      	b.n	ce98 <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    ce6c:	683b      	ldr	r3, [r7, #0]
    ce6e:	889b      	ldrh	r3, [r3, #4]
    ce70:	b29b      	uxth	r3, r3
    ce72:	b2db      	uxtb	r3, r3
    ce74:	2102      	movs	r1, #2
    ce76:	4618      	mov	r0, r3
    ce78:	4b0f      	ldr	r3, [pc, #60]	; (ceb8 <usbdc_get_status_req+0x74>)
    ce7a:	4798      	blx	r3
    ce7c:	4603      	mov	r3, r0
    ce7e:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
    ce80:	68fb      	ldr	r3, [r7, #12]
    ce82:	2b00      	cmp	r3, #0
    ce84:	da01      	bge.n	ce8a <usbdc_get_status_req+0x46>
			return false;
    ce86:	2300      	movs	r3, #0
    ce88:	e012      	b.n	ceb0 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
    ce8a:	68fb      	ldr	r3, [r7, #12]
    ce8c:	f003 0301 	and.w	r3, r3, #1
    ce90:	60fb      	str	r3, [r7, #12]
		break;
    ce92:	e001      	b.n	ce98 <usbdc_get_status_req+0x54>
	default:
		return false;
    ce94:	2300      	movs	r3, #0
    ce96:	e00b      	b.n	ceb0 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
    ce98:	4b08      	ldr	r3, [pc, #32]	; (cebc <usbdc_get_status_req+0x78>)
    ce9a:	695b      	ldr	r3, [r3, #20]
    ce9c:	89ba      	ldrh	r2, [r7, #12]
    ce9e:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    cea0:	4b06      	ldr	r3, [pc, #24]	; (cebc <usbdc_get_status_req+0x78>)
    cea2:	6959      	ldr	r1, [r3, #20]
    cea4:	79f8      	ldrb	r0, [r7, #7]
    cea6:	2300      	movs	r3, #0
    cea8:	2202      	movs	r2, #2
    ceaa:	4c05      	ldr	r4, [pc, #20]	; (cec0 <usbdc_get_status_req+0x7c>)
    ceac:	47a0      	blx	r4
	return true;
    ceae:	2301      	movs	r3, #1
}
    ceb0:	4618      	mov	r0, r3
    ceb2:	3714      	adds	r7, #20
    ceb4:	46bd      	mov	sp, r7
    ceb6:	bd90      	pop	{r4, r7, pc}
    ceb8:	00003f8d 	.word	0x00003f8d
    cebc:	2000114c 	.word	0x2000114c
    cec0:	0000d701 	.word	0x0000d701

0000cec4 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
    cec4:	b590      	push	{r4, r7, lr}
    cec6:	b085      	sub	sp, #20
    cec8:	af00      	add	r7, sp, #0
    ceca:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    cecc:	4b1f      	ldr	r3, [pc, #124]	; (cf4c <usbdc_get_interface+0x88>)
    cece:	691b      	ldr	r3, [r3, #16]
    ced0:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    ced2:	4b1e      	ldr	r3, [pc, #120]	; (cf4c <usbdc_get_interface+0x88>)
    ced4:	7f5b      	ldrb	r3, [r3, #29]
    ced6:	461a      	mov	r2, r3
    ced8:	687b      	ldr	r3, [r7, #4]
    ceda:	889b      	ldrh	r3, [r3, #4]
    cedc:	b29b      	uxth	r3, r3
    cede:	fa42 f303 	asr.w	r3, r2, r3
    cee2:	f003 0301 	and.w	r3, r3, #1
    cee6:	2b00      	cmp	r3, #0
    cee8:	d128      	bne.n	cf3c <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
    ceea:	4b18      	ldr	r3, [pc, #96]	; (cf4c <usbdc_get_interface+0x88>)
    ceec:	695b      	ldr	r3, [r3, #20]
    ceee:	2200      	movs	r2, #0
    cef0:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    cef2:	4b16      	ldr	r3, [pc, #88]	; (cf4c <usbdc_get_interface+0x88>)
    cef4:	6959      	ldr	r1, [r3, #20]
    cef6:	2300      	movs	r3, #0
    cef8:	2201      	movs	r2, #1
    cefa:	2000      	movs	r0, #0
    cefc:	4c14      	ldr	r4, [pc, #80]	; (cf50 <usbdc_get_interface+0x8c>)
    cefe:	47a0      	blx	r4
		return true;
    cf00:	2301      	movs	r3, #1
    cf02:	e01f      	b.n	cf44 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    cf04:	68fb      	ldr	r3, [r7, #12]
    cf06:	685b      	ldr	r3, [r3, #4]
    cf08:	687a      	ldr	r2, [r7, #4]
    cf0a:	2102      	movs	r1, #2
    cf0c:	68f8      	ldr	r0, [r7, #12]
    cf0e:	4798      	blx	r3
    cf10:	60b8      	str	r0, [r7, #8]
    cf12:	68bb      	ldr	r3, [r7, #8]
    cf14:	2b00      	cmp	r3, #0
    cf16:	da03      	bge.n	cf20 <usbdc_get_interface+0x5c>
			func = func->next;
    cf18:	68fb      	ldr	r3, [r7, #12]
    cf1a:	681b      	ldr	r3, [r3, #0]
    cf1c:	60fb      	str	r3, [r7, #12]
    cf1e:	e00d      	b.n	cf3c <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    cf20:	4b0a      	ldr	r3, [pc, #40]	; (cf4c <usbdc_get_interface+0x88>)
    cf22:	695b      	ldr	r3, [r3, #20]
    cf24:	68ba      	ldr	r2, [r7, #8]
    cf26:	b2d2      	uxtb	r2, r2
    cf28:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    cf2a:	4b08      	ldr	r3, [pc, #32]	; (cf4c <usbdc_get_interface+0x88>)
    cf2c:	6959      	ldr	r1, [r3, #20]
    cf2e:	2300      	movs	r3, #0
    cf30:	2201      	movs	r2, #1
    cf32:	2000      	movs	r0, #0
    cf34:	4c06      	ldr	r4, [pc, #24]	; (cf50 <usbdc_get_interface+0x8c>)
    cf36:	47a0      	blx	r4
			return true;
    cf38:	2301      	movs	r3, #1
    cf3a:	e003      	b.n	cf44 <usbdc_get_interface+0x80>
	while (NULL != func) {
    cf3c:	68fb      	ldr	r3, [r7, #12]
    cf3e:	2b00      	cmp	r3, #0
    cf40:	d1e0      	bne.n	cf04 <usbdc_get_interface+0x40>
		}
	}
	return false;
    cf42:	2300      	movs	r3, #0
}
    cf44:	4618      	mov	r0, r3
    cf46:	3714      	adds	r7, #20
    cf48:	46bd      	mov	sp, r7
    cf4a:	bd90      	pop	{r4, r7, pc}
    cf4c:	2000114c 	.word	0x2000114c
    cf50:	0000d701 	.word	0x0000d701

0000cf54 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
    cf54:	b590      	push	{r4, r7, lr}
    cf56:	b083      	sub	sp, #12
    cf58:	af00      	add	r7, sp, #0
    cf5a:	4603      	mov	r3, r0
    cf5c:	6039      	str	r1, [r7, #0]
    cf5e:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    cf60:	683b      	ldr	r3, [r7, #0]
    cf62:	785b      	ldrb	r3, [r3, #1]
    cf64:	2b0a      	cmp	r3, #10
    cf66:	d83a      	bhi.n	cfde <usbdc_get_req+0x8a>
    cf68:	a201      	add	r2, pc, #4	; (adr r2, cf70 <usbdc_get_req+0x1c>)
    cf6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cf6e:	bf00      	nop
    cf70:	0000cfc7 	.word	0x0000cfc7
    cf74:	0000cfdf 	.word	0x0000cfdf
    cf78:	0000cfdf 	.word	0x0000cfdf
    cf7c:	0000cfdf 	.word	0x0000cfdf
    cf80:	0000cfdf 	.word	0x0000cfdf
    cf84:	0000cfdf 	.word	0x0000cfdf
    cf88:	0000cf9d 	.word	0x0000cf9d
    cf8c:	0000cfdf 	.word	0x0000cfdf
    cf90:	0000cfab 	.word	0x0000cfab
    cf94:	0000cfdf 	.word	0x0000cfdf
    cf98:	0000cfd5 	.word	0x0000cfd5
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
    cf9c:	79fb      	ldrb	r3, [r7, #7]
    cf9e:	6839      	ldr	r1, [r7, #0]
    cfa0:	4618      	mov	r0, r3
    cfa2:	4b11      	ldr	r3, [pc, #68]	; (cfe8 <usbdc_get_req+0x94>)
    cfa4:	4798      	blx	r3
    cfa6:	4603      	mov	r3, r0
    cfa8:	e01a      	b.n	cfe0 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    cfaa:	4b10      	ldr	r3, [pc, #64]	; (cfec <usbdc_get_req+0x98>)
    cfac:	695b      	ldr	r3, [r3, #20]
    cfae:	4a0f      	ldr	r2, [pc, #60]	; (cfec <usbdc_get_req+0x98>)
    cfb0:	7ed2      	ldrb	r2, [r2, #27]
    cfb2:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    cfb4:	4b0d      	ldr	r3, [pc, #52]	; (cfec <usbdc_get_req+0x98>)
    cfb6:	6959      	ldr	r1, [r3, #20]
    cfb8:	79f8      	ldrb	r0, [r7, #7]
    cfba:	2300      	movs	r3, #0
    cfbc:	2201      	movs	r2, #1
    cfbe:	4c0c      	ldr	r4, [pc, #48]	; (cff0 <usbdc_get_req+0x9c>)
    cfc0:	47a0      	blx	r4
		return true;
    cfc2:	2301      	movs	r3, #1
    cfc4:	e00c      	b.n	cfe0 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
    cfc6:	79fb      	ldrb	r3, [r7, #7]
    cfc8:	6839      	ldr	r1, [r7, #0]
    cfca:	4618      	mov	r0, r3
    cfcc:	4b09      	ldr	r3, [pc, #36]	; (cff4 <usbdc_get_req+0xa0>)
    cfce:	4798      	blx	r3
    cfd0:	4603      	mov	r3, r0
    cfd2:	e005      	b.n	cfe0 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
    cfd4:	6838      	ldr	r0, [r7, #0]
    cfd6:	4b08      	ldr	r3, [pc, #32]	; (cff8 <usbdc_get_req+0xa4>)
    cfd8:	4798      	blx	r3
    cfda:	4603      	mov	r3, r0
    cfdc:	e000      	b.n	cfe0 <usbdc_get_req+0x8c>
	default:
		return false;
    cfde:	2300      	movs	r3, #0
	}
}
    cfe0:	4618      	mov	r0, r3
    cfe2:	370c      	adds	r7, #12
    cfe4:	46bd      	mov	sp, r7
    cfe6:	bd90      	pop	{r4, r7, pc}
    cfe8:	0000cddd 	.word	0x0000cddd
    cfec:	2000114c 	.word	0x2000114c
    cff0:	0000d701 	.word	0x0000d701
    cff4:	0000ce45 	.word	0x0000ce45
    cff8:	0000cec5 	.word	0x0000cec5

0000cffc <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    cffc:	b590      	push	{r4, r7, lr}
    cffe:	b083      	sub	sp, #12
    d000:	af00      	add	r7, sp, #0
    d002:	4603      	mov	r3, r0
    d004:	6039      	str	r1, [r7, #0]
    d006:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d008:	683b      	ldr	r3, [r7, #0]
    d00a:	781b      	ldrb	r3, [r3, #0]
    d00c:	f003 031f 	and.w	r3, r3, #31
    d010:	2b02      	cmp	r3, #2
    d012:	d116      	bne.n	d042 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d014:	683b      	ldr	r3, [r7, #0]
    d016:	88db      	ldrh	r3, [r3, #6]
    d018:	b29b      	uxth	r3, r3
    d01a:	2b00      	cmp	r3, #0
    d01c:	d001      	beq.n	d022 <usbdc_clear_ftr_req+0x26>
			return false;
    d01e:	2300      	movs	r3, #0
    d020:	e010      	b.n	d044 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    d022:	683b      	ldr	r3, [r7, #0]
    d024:	889b      	ldrh	r3, [r3, #4]
    d026:	b29b      	uxth	r3, r3
    d028:	b2db      	uxtb	r3, r3
    d02a:	2100      	movs	r1, #0
    d02c:	4618      	mov	r0, r3
    d02e:	4b07      	ldr	r3, [pc, #28]	; (d04c <usbdc_clear_ftr_req+0x50>)
    d030:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d032:	79f8      	ldrb	r0, [r7, #7]
    d034:	2301      	movs	r3, #1
    d036:	2200      	movs	r2, #0
    d038:	2100      	movs	r1, #0
    d03a:	4c05      	ldr	r4, [pc, #20]	; (d050 <usbdc_clear_ftr_req+0x54>)
    d03c:	47a0      	blx	r4
		return true;
    d03e:	2301      	movs	r3, #1
    d040:	e000      	b.n	d044 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
    d042:	2300      	movs	r3, #0
	}
}
    d044:	4618      	mov	r0, r3
    d046:	370c      	adds	r7, #12
    d048:	46bd      	mov	sp, r7
    d04a:	bd90      	pop	{r4, r7, pc}
    d04c:	00003f8d 	.word	0x00003f8d
    d050:	0000d701 	.word	0x0000d701

0000d054 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
    d054:	b590      	push	{r4, r7, lr}
    d056:	b083      	sub	sp, #12
    d058:	af00      	add	r7, sp, #0
    d05a:	4603      	mov	r3, r0
    d05c:	6039      	str	r1, [r7, #0]
    d05e:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    d060:	683b      	ldr	r3, [r7, #0]
    d062:	781b      	ldrb	r3, [r3, #0]
    d064:	f003 031f 	and.w	r3, r3, #31
    d068:	2b02      	cmp	r3, #2
    d06a:	d116      	bne.n	d09a <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
    d06c:	683b      	ldr	r3, [r7, #0]
    d06e:	88db      	ldrh	r3, [r3, #6]
    d070:	b29b      	uxth	r3, r3
    d072:	2b00      	cmp	r3, #0
    d074:	d001      	beq.n	d07a <usbdc_set_ftr_req+0x26>
			return false;
    d076:	2300      	movs	r3, #0
    d078:	e010      	b.n	d09c <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    d07a:	683b      	ldr	r3, [r7, #0]
    d07c:	889b      	ldrh	r3, [r3, #4]
    d07e:	b29b      	uxth	r3, r3
    d080:	b2db      	uxtb	r3, r3
    d082:	2101      	movs	r1, #1
    d084:	4618      	mov	r0, r3
    d086:	4b07      	ldr	r3, [pc, #28]	; (d0a4 <usbdc_set_ftr_req+0x50>)
    d088:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    d08a:	79f8      	ldrb	r0, [r7, #7]
    d08c:	2301      	movs	r3, #1
    d08e:	2200      	movs	r2, #0
    d090:	2100      	movs	r1, #0
    d092:	4c05      	ldr	r4, [pc, #20]	; (d0a8 <usbdc_set_ftr_req+0x54>)
    d094:	47a0      	blx	r4
		return true;
    d096:	2301      	movs	r3, #1
    d098:	e000      	b.n	d09c <usbdc_set_ftr_req+0x48>
	default:
		return false;
    d09a:	2300      	movs	r3, #0
	}
}
    d09c:	4618      	mov	r0, r3
    d09e:	370c      	adds	r7, #12
    d0a0:	46bd      	mov	sp, r7
    d0a2:	bd90      	pop	{r4, r7, pc}
    d0a4:	00003f8d 	.word	0x00003f8d
    d0a8:	0000d701 	.word	0x0000d701

0000d0ac <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    d0ac:	b580      	push	{r7, lr}
    d0ae:	b082      	sub	sp, #8
    d0b0:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    d0b2:	4b0a      	ldr	r3, [pc, #40]	; (d0dc <usbdc_unconfig+0x30>)
    d0b4:	691b      	ldr	r3, [r3, #16]
    d0b6:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d0b8:	e008      	b.n	d0cc <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
    d0ba:	687b      	ldr	r3, [r7, #4]
    d0bc:	685b      	ldr	r3, [r3, #4]
    d0be:	2200      	movs	r2, #0
    d0c0:	2101      	movs	r1, #1
    d0c2:	6878      	ldr	r0, [r7, #4]
    d0c4:	4798      	blx	r3
		func = func->next;
    d0c6:	687b      	ldr	r3, [r7, #4]
    d0c8:	681b      	ldr	r3, [r3, #0]
    d0ca:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
    d0cc:	687b      	ldr	r3, [r7, #4]
    d0ce:	2b00      	cmp	r3, #0
    d0d0:	d1f3      	bne.n	d0ba <usbdc_unconfig+0xe>
	}
}
    d0d2:	bf00      	nop
    d0d4:	3708      	adds	r7, #8
    d0d6:	46bd      	mov	sp, r7
    d0d8:	bd80      	pop	{r7, pc}
    d0da:	bf00      	nop
    d0dc:	2000114c 	.word	0x2000114c

0000d0e0 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
    d0e0:	b580      	push	{r7, lr}
    d0e2:	b088      	sub	sp, #32
    d0e4:	af00      	add	r7, sp, #0
    d0e6:	4603      	mov	r3, r0
    d0e8:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
    d0ea:	2300      	movs	r3, #0
    d0ec:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
    d0ee:	23ff      	movs	r3, #255	; 0xff
    d0f0:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
    d0f2:	79fb      	ldrb	r3, [r7, #7]
    d0f4:	2b00      	cmp	r3, #0
    d0f6:	d103      	bne.n	d100 <usbdc_set_config+0x20>
		usbdc_unconfig();
    d0f8:	4b2e      	ldr	r3, [pc, #184]	; (d1b4 <usbdc_set_config+0xd4>)
    d0fa:	4798      	blx	r3
		return true;
    d0fc:	2301      	movs	r3, #1
    d0fe:	e055      	b.n	d1ac <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
    d100:	69bb      	ldr	r3, [r7, #24]
    d102:	2b00      	cmp	r3, #0
    d104:	d10a      	bne.n	d11c <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    d106:	4b2c      	ldr	r3, [pc, #176]	; (d1b8 <usbdc_set_config+0xd8>)
    d108:	681b      	ldr	r3, [r3, #0]
    d10a:	6818      	ldr	r0, [r3, #0]
    d10c:	4b2a      	ldr	r3, [pc, #168]	; (d1b8 <usbdc_set_config+0xd8>)
    d10e:	681b      	ldr	r3, [r3, #0]
    d110:	685b      	ldr	r3, [r3, #4]
    d112:	79fa      	ldrb	r2, [r7, #7]
    d114:	4619      	mov	r1, r3
    d116:	4b29      	ldr	r3, [pc, #164]	; (d1bc <usbdc_set_config+0xdc>)
    d118:	4798      	blx	r3
    d11a:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
    d11c:	69bb      	ldr	r3, [r7, #24]
    d11e:	2b00      	cmp	r3, #0
    d120:	d101      	bne.n	d126 <usbdc_set_config+0x46>
		return false;
    d122:	2300      	movs	r3, #0
    d124:	e042      	b.n	d1ac <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
    d126:	69b8      	ldr	r0, [r7, #24]
    d128:	4b25      	ldr	r3, [pc, #148]	; (d1c0 <usbdc_set_config+0xe0>)
    d12a:	4798      	blx	r3
    d12c:	4603      	mov	r3, r0
    d12e:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
    d130:	8abb      	ldrh	r3, [r7, #20]
    d132:	69ba      	ldr	r2, [r7, #24]
    d134:	4413      	add	r3, r2
    d136:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    d138:	693b      	ldr	r3, [r7, #16]
    d13a:	2204      	movs	r2, #4
    d13c:	4619      	mov	r1, r3
    d13e:	69b8      	ldr	r0, [r7, #24]
    d140:	4b20      	ldr	r3, [pc, #128]	; (d1c4 <usbdc_set_config+0xe4>)
    d142:	4798      	blx	r3
    d144:	4603      	mov	r3, r0
    d146:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
    d148:	e02c      	b.n	d1a4 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    d14a:	68fb      	ldr	r3, [r7, #12]
    d14c:	3302      	adds	r3, #2
    d14e:	781b      	ldrb	r3, [r3, #0]
    d150:	7dfa      	ldrb	r2, [r7, #23]
    d152:	429a      	cmp	r2, r3
    d154:	d018      	beq.n	d188 <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
    d156:	68fb      	ldr	r3, [r7, #12]
    d158:	789b      	ldrb	r3, [r3, #2]
    d15a:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    d15c:	4b16      	ldr	r3, [pc, #88]	; (d1b8 <usbdc_set_config+0xd8>)
    d15e:	691b      	ldr	r3, [r3, #16]
    d160:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d162:	e00c      	b.n	d17e <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    d164:	69fb      	ldr	r3, [r7, #28]
    d166:	685b      	ldr	r3, [r3, #4]
    d168:	f107 020c 	add.w	r2, r7, #12
    d16c:	2100      	movs	r1, #0
    d16e:	69f8      	ldr	r0, [r7, #28]
    d170:	4798      	blx	r3
    d172:	4603      	mov	r3, r0
    d174:	2b00      	cmp	r3, #0
    d176:	d006      	beq.n	d186 <usbdc_set_config+0xa6>
					func = func->next;
    d178:	69fb      	ldr	r3, [r7, #28]
    d17a:	681b      	ldr	r3, [r3, #0]
    d17c:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
    d17e:	69fb      	ldr	r3, [r7, #28]
    d180:	2b00      	cmp	r3, #0
    d182:	d1ef      	bne.n	d164 <usbdc_set_config+0x84>
    d184:	e000      	b.n	d188 <usbdc_set_config+0xa8>
				} else {
					break;
    d186:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
    d188:	68fb      	ldr	r3, [r7, #12]
    d18a:	4618      	mov	r0, r3
    d18c:	4b0e      	ldr	r3, [pc, #56]	; (d1c8 <usbdc_set_config+0xe8>)
    d18e:	4798      	blx	r3
    d190:	4603      	mov	r3, r0
    d192:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d194:	68fb      	ldr	r3, [r7, #12]
    d196:	6939      	ldr	r1, [r7, #16]
    d198:	2204      	movs	r2, #4
    d19a:	4618      	mov	r0, r3
    d19c:	4b09      	ldr	r3, [pc, #36]	; (d1c4 <usbdc_set_config+0xe4>)
    d19e:	4798      	blx	r3
    d1a0:	4603      	mov	r3, r0
    d1a2:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
    d1a4:	68fb      	ldr	r3, [r7, #12]
    d1a6:	2b00      	cmp	r3, #0
    d1a8:	d1cf      	bne.n	d14a <usbdc_set_config+0x6a>
	}
	return true;
    d1aa:	2301      	movs	r3, #1
}
    d1ac:	4618      	mov	r0, r3
    d1ae:	3720      	adds	r7, #32
    d1b0:	46bd      	mov	sp, r7
    d1b2:	bd80      	pop	{r7, pc}
    d1b4:	0000d0ad 	.word	0x0000d0ad
    d1b8:	2000114c 	.word	0x2000114c
    d1bc:	0000da51 	.word	0x0000da51
    d1c0:	0000cbfd 	.word	0x0000cbfd
    d1c4:	0000d991 	.word	0x0000d991
    d1c8:	0000cbd9 	.word	0x0000cbd9

0000d1cc <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
    d1cc:	b580      	push	{r7, lr}
    d1ce:	b082      	sub	sp, #8
    d1d0:	af00      	add	r7, sp, #0
    d1d2:	4603      	mov	r3, r0
    d1d4:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
    d1d6:	79fb      	ldrb	r3, [r7, #7]
    d1d8:	4618      	mov	r0, r3
    d1da:	4b03      	ldr	r3, [pc, #12]	; (d1e8 <usbdc_set_address+0x1c>)
    d1dc:	4798      	blx	r3
}
    d1de:	bf00      	nop
    d1e0:	3708      	adds	r7, #8
    d1e2:	46bd      	mov	sp, r7
    d1e4:	bd80      	pop	{r7, pc}
    d1e6:	bf00      	nop
    d1e8:	00003ba9 	.word	0x00003ba9

0000d1ec <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
    d1ec:	b590      	push	{r4, r7, lr}
    d1ee:	b087      	sub	sp, #28
    d1f0:	af00      	add	r7, sp, #0
    d1f2:	4603      	mov	r3, r0
    d1f4:	460a      	mov	r2, r1
    d1f6:	80fb      	strh	r3, [r7, #6]
    d1f8:	4613      	mov	r3, r2
    d1fa:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
    d1fc:	2300      	movs	r3, #0
    d1fe:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
    d200:	693b      	ldr	r3, [r7, #16]
    d202:	2b00      	cmp	r3, #0
    d204:	d10b      	bne.n	d21e <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    d206:	4b43      	ldr	r3, [pc, #268]	; (d314 <usbdc_set_interface+0x128>)
    d208:	681b      	ldr	r3, [r3, #0]
    d20a:	6818      	ldr	r0, [r3, #0]
    d20c:	4b41      	ldr	r3, [pc, #260]	; (d314 <usbdc_set_interface+0x128>)
    d20e:	681b      	ldr	r3, [r3, #0]
    d210:	6859      	ldr	r1, [r3, #4]
    d212:	4b40      	ldr	r3, [pc, #256]	; (d314 <usbdc_set_interface+0x128>)
    d214:	7edb      	ldrb	r3, [r3, #27]
    d216:	461a      	mov	r2, r3
    d218:	4b3f      	ldr	r3, [pc, #252]	; (d318 <usbdc_set_interface+0x12c>)
    d21a:	4798      	blx	r3
    d21c:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
    d21e:	693b      	ldr	r3, [r7, #16]
    d220:	2b00      	cmp	r3, #0
    d222:	d101      	bne.n	d228 <usbdc_set_interface+0x3c>
		return false;
    d224:	2300      	movs	r3, #0
    d226:	e071      	b.n	d30c <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
    d228:	693b      	ldr	r3, [r7, #16]
    d22a:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    d22c:	6938      	ldr	r0, [r7, #16]
    d22e:	4b3b      	ldr	r3, [pc, #236]	; (d31c <usbdc_set_interface+0x130>)
    d230:	4798      	blx	r3
    d232:	4603      	mov	r3, r0
    d234:	461a      	mov	r2, r3
    d236:	693b      	ldr	r3, [r7, #16]
    d238:	4413      	add	r3, r2
    d23a:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    d23c:	68bb      	ldr	r3, [r7, #8]
    d23e:	68f9      	ldr	r1, [r7, #12]
    d240:	2204      	movs	r2, #4
    d242:	4618      	mov	r0, r3
    d244:	4b36      	ldr	r3, [pc, #216]	; (d320 <usbdc_set_interface+0x134>)
    d246:	4798      	blx	r3
    d248:	6138      	str	r0, [r7, #16]
    d24a:	693b      	ldr	r3, [r7, #16]
    d24c:	2b00      	cmp	r3, #0
    d24e:	d113      	bne.n	d278 <usbdc_set_interface+0x8c>
		return false;
    d250:	2300      	movs	r3, #0
    d252:	e05b      	b.n	d30c <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
    d254:	68bb      	ldr	r3, [r7, #8]
    d256:	4618      	mov	r0, r3
    d258:	4b32      	ldr	r3, [pc, #200]	; (d324 <usbdc_set_interface+0x138>)
    d25a:	4798      	blx	r3
    d25c:	4603      	mov	r3, r0
    d25e:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    d260:	68bb      	ldr	r3, [r7, #8]
    d262:	68f9      	ldr	r1, [r7, #12]
    d264:	2204      	movs	r2, #4
    d266:	4618      	mov	r0, r3
    d268:	4b2d      	ldr	r3, [pc, #180]	; (d320 <usbdc_set_interface+0x134>)
    d26a:	4798      	blx	r3
    d26c:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
    d26e:	693b      	ldr	r3, [r7, #16]
    d270:	2b00      	cmp	r3, #0
    d272:	d101      	bne.n	d278 <usbdc_set_interface+0x8c>
			return false;
    d274:	2300      	movs	r3, #0
    d276:	e049      	b.n	d30c <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    d278:	693b      	ldr	r3, [r7, #16]
    d27a:	3302      	adds	r3, #2
    d27c:	781b      	ldrb	r3, [r3, #0]
    d27e:	b29b      	uxth	r3, r3
    d280:	88ba      	ldrh	r2, [r7, #4]
    d282:	429a      	cmp	r2, r3
    d284:	d1e6      	bne.n	d254 <usbdc_set_interface+0x68>
    d286:	693b      	ldr	r3, [r7, #16]
    d288:	3303      	adds	r3, #3
    d28a:	781b      	ldrb	r3, [r3, #0]
    d28c:	b29b      	uxth	r3, r3
    d28e:	88fa      	ldrh	r2, [r7, #6]
    d290:	429a      	cmp	r2, r3
    d292:	d1df      	bne.n	d254 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
    d294:	693b      	ldr	r3, [r7, #16]
    d296:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    d298:	4b1e      	ldr	r3, [pc, #120]	; (d314 <usbdc_set_interface+0x128>)
    d29a:	691b      	ldr	r3, [r3, #16]
    d29c:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
    d29e:	e031      	b.n	d304 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    d2a0:	697b      	ldr	r3, [r7, #20]
    d2a2:	685b      	ldr	r3, [r3, #4]
    d2a4:	f107 0208 	add.w	r2, r7, #8
    d2a8:	2101      	movs	r1, #1
    d2aa:	6978      	ldr	r0, [r7, #20]
    d2ac:	4798      	blx	r3
    d2ae:	4603      	mov	r3, r0
    d2b0:	2b00      	cmp	r3, #0
    d2b2:	d003      	beq.n	d2bc <usbdc_set_interface+0xd0>
			func = func->next;
    d2b4:	697b      	ldr	r3, [r7, #20]
    d2b6:	681b      	ldr	r3, [r3, #0]
    d2b8:	617b      	str	r3, [r7, #20]
    d2ba:	e023      	b.n	d304 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    d2bc:	697b      	ldr	r3, [r7, #20]
    d2be:	685b      	ldr	r3, [r3, #4]
    d2c0:	f107 0208 	add.w	r2, r7, #8
    d2c4:	2100      	movs	r1, #0
    d2c6:	6978      	ldr	r0, [r7, #20]
    d2c8:	4798      	blx	r3
    d2ca:	4603      	mov	r3, r0
    d2cc:	2b00      	cmp	r3, #0
    d2ce:	d117      	bne.n	d300 <usbdc_set_interface+0x114>
			if (alt_set) {
    d2d0:	88fb      	ldrh	r3, [r7, #6]
    d2d2:	2b00      	cmp	r3, #0
    d2d4:	d00c      	beq.n	d2f0 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
    d2d6:	4b0f      	ldr	r3, [pc, #60]	; (d314 <usbdc_set_interface+0x128>)
    d2d8:	7f5b      	ldrb	r3, [r3, #29]
    d2da:	b25a      	sxtb	r2, r3
    d2dc:	88bb      	ldrh	r3, [r7, #4]
    d2de:	2101      	movs	r1, #1
    d2e0:	fa01 f303 	lsl.w	r3, r1, r3
    d2e4:	b25b      	sxtb	r3, r3
    d2e6:	4313      	orrs	r3, r2
    d2e8:	b25b      	sxtb	r3, r3
    d2ea:	b2da      	uxtb	r2, r3
    d2ec:	4b09      	ldr	r3, [pc, #36]	; (d314 <usbdc_set_interface+0x128>)
    d2ee:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
    d2f0:	2300      	movs	r3, #0
    d2f2:	2200      	movs	r2, #0
    d2f4:	2100      	movs	r1, #0
    d2f6:	2000      	movs	r0, #0
    d2f8:	4c0b      	ldr	r4, [pc, #44]	; (d328 <usbdc_set_interface+0x13c>)
    d2fa:	47a0      	blx	r4
			return true;
    d2fc:	2301      	movs	r3, #1
    d2fe:	e005      	b.n	d30c <usbdc_set_interface+0x120>
		} else {
			return false;
    d300:	2300      	movs	r3, #0
    d302:	e003      	b.n	d30c <usbdc_set_interface+0x120>
	while (NULL != func) {
    d304:	697b      	ldr	r3, [r7, #20]
    d306:	2b00      	cmp	r3, #0
    d308:	d1ca      	bne.n	d2a0 <usbdc_set_interface+0xb4>
		}
	}

	return false;
    d30a:	2300      	movs	r3, #0
}
    d30c:	4618      	mov	r0, r3
    d30e:	371c      	adds	r7, #28
    d310:	46bd      	mov	sp, r7
    d312:	bd90      	pop	{r4, r7, pc}
    d314:	2000114c 	.word	0x2000114c
    d318:	0000da51 	.word	0x0000da51
    d31c:	0000cbfd 	.word	0x0000cbfd
    d320:	0000d991 	.word	0x0000d991
    d324:	0000cbd9 	.word	0x0000cbd9
    d328:	0000d701 	.word	0x0000d701

0000d32c <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
    d32c:	b590      	push	{r4, r7, lr}
    d32e:	b083      	sub	sp, #12
    d330:	af00      	add	r7, sp, #0
    d332:	4603      	mov	r3, r0
    d334:	6039      	str	r1, [r7, #0]
    d336:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
    d338:	683b      	ldr	r3, [r7, #0]
    d33a:	785b      	ldrb	r3, [r3, #1]
    d33c:	3b01      	subs	r3, #1
    d33e:	2b0a      	cmp	r3, #10
    d340:	d85b      	bhi.n	d3fa <usbdc_set_req+0xce>
    d342:	a201      	add	r2, pc, #4	; (adr r2, d348 <usbdc_set_req+0x1c>)
    d344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d348:	0000d3c7 	.word	0x0000d3c7
    d34c:	0000d3fb 	.word	0x0000d3fb
    d350:	0000d3d5 	.word	0x0000d3d5
    d354:	0000d3fb 	.word	0x0000d3fb
    d358:	0000d375 	.word	0x0000d375
    d35c:	0000d3fb 	.word	0x0000d3fb
    d360:	0000d3fb 	.word	0x0000d3fb
    d364:	0000d3fb 	.word	0x0000d3fb
    d368:	0000d38f 	.word	0x0000d38f
    d36c:	0000d3fb 	.word	0x0000d3fb
    d370:	0000d3e3 	.word	0x0000d3e3
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d374:	79f8      	ldrb	r0, [r7, #7]
    d376:	2301      	movs	r3, #1
    d378:	2200      	movs	r2, #0
    d37a:	2100      	movs	r1, #0
    d37c:	4c21      	ldr	r4, [pc, #132]	; (d404 <usbdc_set_req+0xd8>)
    d37e:	47a0      	blx	r4
    d380:	4603      	mov	r3, r0
    d382:	2b00      	cmp	r3, #0
    d384:	bf0c      	ite	eq
    d386:	2301      	moveq	r3, #1
    d388:	2300      	movne	r3, #0
    d38a:	b2db      	uxtb	r3, r3
    d38c:	e036      	b.n	d3fc <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
    d38e:	683b      	ldr	r3, [r7, #0]
    d390:	885b      	ldrh	r3, [r3, #2]
    d392:	b29b      	uxth	r3, r3
    d394:	b2db      	uxtb	r3, r3
    d396:	4618      	mov	r0, r3
    d398:	4b1b      	ldr	r3, [pc, #108]	; (d408 <usbdc_set_req+0xdc>)
    d39a:	4798      	blx	r3
    d39c:	4603      	mov	r3, r0
    d39e:	f083 0301 	eor.w	r3, r3, #1
    d3a2:	b2db      	uxtb	r3, r3
    d3a4:	2b00      	cmp	r3, #0
    d3a6:	d001      	beq.n	d3ac <usbdc_set_req+0x80>
			return false;
    d3a8:	2300      	movs	r3, #0
    d3aa:	e027      	b.n	d3fc <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    d3ac:	79f8      	ldrb	r0, [r7, #7]
    d3ae:	2301      	movs	r3, #1
    d3b0:	2200      	movs	r2, #0
    d3b2:	2100      	movs	r1, #0
    d3b4:	4c13      	ldr	r4, [pc, #76]	; (d404 <usbdc_set_req+0xd8>)
    d3b6:	47a0      	blx	r4
    d3b8:	4603      	mov	r3, r0
    d3ba:	2b00      	cmp	r3, #0
    d3bc:	bf0c      	ite	eq
    d3be:	2301      	moveq	r3, #1
    d3c0:	2300      	movne	r3, #0
    d3c2:	b2db      	uxtb	r3, r3
    d3c4:	e01a      	b.n	d3fc <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
    d3c6:	79fb      	ldrb	r3, [r7, #7]
    d3c8:	6839      	ldr	r1, [r7, #0]
    d3ca:	4618      	mov	r0, r3
    d3cc:	4b0f      	ldr	r3, [pc, #60]	; (d40c <usbdc_set_req+0xe0>)
    d3ce:	4798      	blx	r3
    d3d0:	4603      	mov	r3, r0
    d3d2:	e013      	b.n	d3fc <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
    d3d4:	79fb      	ldrb	r3, [r7, #7]
    d3d6:	6839      	ldr	r1, [r7, #0]
    d3d8:	4618      	mov	r0, r3
    d3da:	4b0d      	ldr	r3, [pc, #52]	; (d410 <usbdc_set_req+0xe4>)
    d3dc:	4798      	blx	r3
    d3de:	4603      	mov	r3, r0
    d3e0:	e00c      	b.n	d3fc <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
    d3e2:	683b      	ldr	r3, [r7, #0]
    d3e4:	885b      	ldrh	r3, [r3, #2]
    d3e6:	b29a      	uxth	r2, r3
    d3e8:	683b      	ldr	r3, [r7, #0]
    d3ea:	889b      	ldrh	r3, [r3, #4]
    d3ec:	b29b      	uxth	r3, r3
    d3ee:	4619      	mov	r1, r3
    d3f0:	4610      	mov	r0, r2
    d3f2:	4b08      	ldr	r3, [pc, #32]	; (d414 <usbdc_set_req+0xe8>)
    d3f4:	4798      	blx	r3
    d3f6:	4603      	mov	r3, r0
    d3f8:	e000      	b.n	d3fc <usbdc_set_req+0xd0>
	default:
		return false;
    d3fa:	2300      	movs	r3, #0
	}
}
    d3fc:	4618      	mov	r0, r3
    d3fe:	370c      	adds	r7, #12
    d400:	46bd      	mov	sp, r7
    d402:	bd90      	pop	{r4, r7, pc}
    d404:	0000d701 	.word	0x0000d701
    d408:	0000d0e1 	.word	0x0000d0e1
    d40c:	0000cffd 	.word	0x0000cffd
    d410:	0000d055 	.word	0x0000d055
    d414:	0000d1ed 	.word	0x0000d1ed

0000d418 <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
    d418:	b580      	push	{r7, lr}
    d41a:	b082      	sub	sp, #8
    d41c:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    d41e:	4b0a      	ldr	r3, [pc, #40]	; (d448 <usbdc_sof_notify+0x30>)
    d420:	685b      	ldr	r3, [r3, #4]
    d422:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
    d424:	e009      	b.n	d43a <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
    d426:	687b      	ldr	r3, [r7, #4]
    d428:	685b      	ldr	r3, [r3, #4]
    d42a:	2b00      	cmp	r3, #0
    d42c:	d002      	beq.n	d434 <usbdc_sof_notify+0x1c>
			sof->cb();
    d42e:	687b      	ldr	r3, [r7, #4]
    d430:	685b      	ldr	r3, [r3, #4]
    d432:	4798      	blx	r3
		}
		sof = sof->next;
    d434:	687b      	ldr	r3, [r7, #4]
    d436:	681b      	ldr	r3, [r3, #0]
    d438:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
    d43a:	687b      	ldr	r3, [r7, #4]
    d43c:	2b00      	cmp	r3, #0
    d43e:	d1f2      	bne.n	d426 <usbdc_sof_notify+0xe>
	}
}
    d440:	bf00      	nop
    d442:	3708      	adds	r7, #8
    d444:	46bd      	mov	sp, r7
    d446:	bd80      	pop	{r7, pc}
    d448:	2000114c 	.word	0x2000114c

0000d44c <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    d44c:	b580      	push	{r7, lr}
    d44e:	b084      	sub	sp, #16
    d450:	af00      	add	r7, sp, #0
    d452:	4603      	mov	r3, r0
    d454:	6039      	str	r1, [r7, #0]
    d456:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    d458:	4b0b      	ldr	r3, [pc, #44]	; (d488 <usbdc_change_notify+0x3c>)
    d45a:	68db      	ldr	r3, [r3, #12]
    d45c:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
    d45e:	e00c      	b.n	d47a <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
    d460:	68fb      	ldr	r3, [r7, #12]
    d462:	685b      	ldr	r3, [r3, #4]
    d464:	2b00      	cmp	r3, #0
    d466:	d005      	beq.n	d474 <usbdc_change_notify+0x28>
			cg->cb(change, value);
    d468:	68fb      	ldr	r3, [r7, #12]
    d46a:	685b      	ldr	r3, [r3, #4]
    d46c:	79fa      	ldrb	r2, [r7, #7]
    d46e:	6839      	ldr	r1, [r7, #0]
    d470:	4610      	mov	r0, r2
    d472:	4798      	blx	r3
		}
		cg = cg->next;
    d474:	68fb      	ldr	r3, [r7, #12]
    d476:	681b      	ldr	r3, [r3, #0]
    d478:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
    d47a:	68fb      	ldr	r3, [r7, #12]
    d47c:	2b00      	cmp	r3, #0
    d47e:	d1ef      	bne.n	d460 <usbdc_change_notify+0x14>
	}
}
    d480:	bf00      	nop
    d482:	3710      	adds	r7, #16
    d484:	46bd      	mov	sp, r7
    d486:	bd80      	pop	{r7, pc}
    d488:	2000114c 	.word	0x2000114c

0000d48c <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d48c:	b580      	push	{r7, lr}
    d48e:	b084      	sub	sp, #16
    d490:	af00      	add	r7, sp, #0
    d492:	4603      	mov	r3, r0
    d494:	6039      	str	r1, [r7, #0]
    d496:	71fb      	strb	r3, [r7, #7]
    d498:	4613      	mov	r3, r2
    d49a:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    d49c:	4b12      	ldr	r3, [pc, #72]	; (d4e8 <usbdc_request_handler+0x5c>)
    d49e:	689b      	ldr	r3, [r3, #8]
    d4a0:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
    d4a2:	e019      	b.n	d4d8 <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
    d4a4:	68fb      	ldr	r3, [r7, #12]
    d4a6:	685b      	ldr	r3, [r3, #4]
    d4a8:	2b00      	cmp	r3, #0
    d4aa:	d012      	beq.n	d4d2 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
    d4ac:	68fb      	ldr	r3, [r7, #12]
    d4ae:	685b      	ldr	r3, [r3, #4]
    d4b0:	79ba      	ldrb	r2, [r7, #6]
    d4b2:	79f8      	ldrb	r0, [r7, #7]
    d4b4:	6839      	ldr	r1, [r7, #0]
    d4b6:	4798      	blx	r3
    d4b8:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
    d4ba:	68bb      	ldr	r3, [r7, #8]
    d4bc:	2b00      	cmp	r3, #0
    d4be:	d101      	bne.n	d4c4 <usbdc_request_handler+0x38>
				return true;
    d4c0:	2301      	movs	r3, #1
    d4c2:	e00d      	b.n	d4e0 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
    d4c4:	68bb      	ldr	r3, [r7, #8]
    d4c6:	f113 0f0a 	cmn.w	r3, #10
    d4ca:	d002      	beq.n	d4d2 <usbdc_request_handler+0x46>
				return -1;
    d4cc:	f04f 33ff 	mov.w	r3, #4294967295
    d4d0:	e006      	b.n	d4e0 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
    d4d2:	68fb      	ldr	r3, [r7, #12]
    d4d4:	681b      	ldr	r3, [r3, #0]
    d4d6:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
    d4d8:	68fb      	ldr	r3, [r7, #12]
    d4da:	2b00      	cmp	r3, #0
    d4dc:	d1e2      	bne.n	d4a4 <usbdc_request_handler+0x18>
	}
	return false;
    d4de:	2300      	movs	r3, #0
}
    d4e0:	4618      	mov	r0, r3
    d4e2:	3710      	adds	r7, #16
    d4e4:	46bd      	mov	sp, r7
    d4e6:	bd80      	pop	{r7, pc}
    d4e8:	2000114c 	.word	0x2000114c

0000d4ec <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    d4ec:	b580      	push	{r7, lr}
    d4ee:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
    d4f0:	4b01      	ldr	r3, [pc, #4]	; (d4f8 <usbd_sof_cb+0xc>)
    d4f2:	4798      	blx	r3
}
    d4f4:	bf00      	nop
    d4f6:	bd80      	pop	{r7, pc}
    d4f8:	0000d419 	.word	0x0000d419

0000d4fc <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
    d4fc:	b580      	push	{r7, lr}
    d4fe:	b082      	sub	sp, #8
    d500:	af00      	add	r7, sp, #0
    d502:	4603      	mov	r3, r0
    d504:	6039      	str	r1, [r7, #0]
    d506:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    d508:	79fb      	ldrb	r3, [r7, #7]
    d50a:	2200      	movs	r2, #0
    d50c:	6839      	ldr	r1, [r7, #0]
    d50e:	4618      	mov	r0, r3
    d510:	4b14      	ldr	r3, [pc, #80]	; (d564 <usbdc_cb_ctl_req+0x68>)
    d512:	4798      	blx	r3
    d514:	4603      	mov	r3, r0
    d516:	f1b3 3fff 	cmp.w	r3, #4294967295
    d51a:	d00b      	beq.n	d534 <usbdc_cb_ctl_req+0x38>
    d51c:	2b01      	cmp	r3, #1
    d51e:	d007      	beq.n	d530 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
    d520:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d522:	683b      	ldr	r3, [r7, #0]
    d524:	781b      	ldrb	r3, [r3, #0]
    d526:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    d52a:	2b00      	cmp	r3, #0
    d52c:	d007      	beq.n	d53e <usbdc_cb_ctl_req+0x42>
    d52e:	e003      	b.n	d538 <usbdc_cb_ctl_req+0x3c>
		return true;
    d530:	2301      	movs	r3, #1
    d532:	e013      	b.n	d55c <usbdc_cb_ctl_req+0x60>
		return false;
    d534:	2300      	movs	r3, #0
    d536:	e011      	b.n	d55c <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    d538:	2b80      	cmp	r3, #128	; 0x80
    d53a:	d007      	beq.n	d54c <usbdc_cb_ctl_req+0x50>
    d53c:	e00d      	b.n	d55a <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
    d53e:	79fb      	ldrb	r3, [r7, #7]
    d540:	6839      	ldr	r1, [r7, #0]
    d542:	4618      	mov	r0, r3
    d544:	4b08      	ldr	r3, [pc, #32]	; (d568 <usbdc_cb_ctl_req+0x6c>)
    d546:	4798      	blx	r3
    d548:	4603      	mov	r3, r0
    d54a:	e007      	b.n	d55c <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
    d54c:	79fb      	ldrb	r3, [r7, #7]
    d54e:	6839      	ldr	r1, [r7, #0]
    d550:	4618      	mov	r0, r3
    d552:	4b06      	ldr	r3, [pc, #24]	; (d56c <usbdc_cb_ctl_req+0x70>)
    d554:	4798      	blx	r3
    d556:	4603      	mov	r3, r0
    d558:	e000      	b.n	d55c <usbdc_cb_ctl_req+0x60>
	default:
		return false;
    d55a:	2300      	movs	r3, #0
	}
}
    d55c:	4618      	mov	r0, r3
    d55e:	3708      	adds	r7, #8
    d560:	46bd      	mov	sp, r7
    d562:	bd80      	pop	{r7, pc}
    d564:	0000d48d 	.word	0x0000d48d
    d568:	0000d32d 	.word	0x0000d32d
    d56c:	0000cf55 	.word	0x0000cf55

0000d570 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
    d570:	b580      	push	{r7, lr}
    d572:	b082      	sub	sp, #8
    d574:	af00      	add	r7, sp, #0
    d576:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    d578:	687b      	ldr	r3, [r7, #4]
    d57a:	781b      	ldrb	r3, [r3, #0]
    d57c:	2b00      	cmp	r3, #0
    d57e:	d135      	bne.n	d5ec <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
    d580:	687b      	ldr	r3, [r7, #4]
    d582:	785b      	ldrb	r3, [r3, #1]
    d584:	2b05      	cmp	r3, #5
    d586:	d019      	beq.n	d5bc <usbdc_ctrl_status_end+0x4c>
    d588:	2b09      	cmp	r3, #9
    d58a:	d000      	beq.n	d58e <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
    d58c:	e02f      	b.n	d5ee <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
    d58e:	687b      	ldr	r3, [r7, #4]
    d590:	885b      	ldrh	r3, [r3, #2]
    d592:	b29b      	uxth	r3, r3
    d594:	b2da      	uxtb	r2, r3
    d596:	4b17      	ldr	r3, [pc, #92]	; (d5f4 <usbdc_ctrl_status_end+0x84>)
    d598:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    d59a:	687b      	ldr	r3, [r7, #4]
    d59c:	885b      	ldrh	r3, [r3, #2]
    d59e:	b29b      	uxth	r3, r3
    d5a0:	2b00      	cmp	r3, #0
    d5a2:	d001      	beq.n	d5a8 <usbdc_ctrl_status_end+0x38>
    d5a4:	2204      	movs	r2, #4
    d5a6:	e000      	b.n	d5aa <usbdc_ctrl_status_end+0x3a>
    d5a8:	2203      	movs	r2, #3
    d5aa:	4b12      	ldr	r3, [pc, #72]	; (d5f4 <usbdc_ctrl_status_end+0x84>)
    d5ac:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d5ae:	4b11      	ldr	r3, [pc, #68]	; (d5f4 <usbdc_ctrl_status_end+0x84>)
    d5b0:	7e9b      	ldrb	r3, [r3, #26]
    d5b2:	4619      	mov	r1, r3
    d5b4:	2001      	movs	r0, #1
    d5b6:	4b10      	ldr	r3, [pc, #64]	; (d5f8 <usbdc_ctrl_status_end+0x88>)
    d5b8:	4798      	blx	r3
		break;
    d5ba:	e018      	b.n	d5ee <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
    d5bc:	687b      	ldr	r3, [r7, #4]
    d5be:	885b      	ldrh	r3, [r3, #2]
    d5c0:	b29b      	uxth	r3, r3
    d5c2:	b2db      	uxtb	r3, r3
    d5c4:	4618      	mov	r0, r3
    d5c6:	4b0d      	ldr	r3, [pc, #52]	; (d5fc <usbdc_ctrl_status_end+0x8c>)
    d5c8:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    d5ca:	687b      	ldr	r3, [r7, #4]
    d5cc:	885b      	ldrh	r3, [r3, #2]
    d5ce:	b29b      	uxth	r3, r3
    d5d0:	2b00      	cmp	r3, #0
    d5d2:	d001      	beq.n	d5d8 <usbdc_ctrl_status_end+0x68>
    d5d4:	2203      	movs	r2, #3
    d5d6:	e000      	b.n	d5da <usbdc_ctrl_status_end+0x6a>
    d5d8:	2202      	movs	r2, #2
    d5da:	4b06      	ldr	r3, [pc, #24]	; (d5f4 <usbdc_ctrl_status_end+0x84>)
    d5dc:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    d5de:	4b05      	ldr	r3, [pc, #20]	; (d5f4 <usbdc_ctrl_status_end+0x84>)
    d5e0:	7e9b      	ldrb	r3, [r3, #26]
    d5e2:	4619      	mov	r1, r3
    d5e4:	2001      	movs	r0, #1
    d5e6:	4b04      	ldr	r3, [pc, #16]	; (d5f8 <usbdc_ctrl_status_end+0x88>)
    d5e8:	4798      	blx	r3
		break;
    d5ea:	e000      	b.n	d5ee <usbdc_ctrl_status_end+0x7e>
		return;
    d5ec:	bf00      	nop
	}
}
    d5ee:	3708      	adds	r7, #8
    d5f0:	46bd      	mov	sp, r7
    d5f2:	bd80      	pop	{r7, pc}
    d5f4:	2000114c 	.word	0x2000114c
    d5f8:	0000d44d 	.word	0x0000d44d
    d5fc:	0000d1cd 	.word	0x0000d1cd

0000d600 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
    d600:	b580      	push	{r7, lr}
    d602:	b082      	sub	sp, #8
    d604:	af00      	add	r7, sp, #0
    d606:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    d608:	2201      	movs	r2, #1
    d60a:	6879      	ldr	r1, [r7, #4]
    d60c:	2000      	movs	r0, #0
    d60e:	4b03      	ldr	r3, [pc, #12]	; (d61c <usbdc_ctrl_data_end+0x1c>)
    d610:	4798      	blx	r3
	return false;
    d612:	2300      	movs	r3, #0
}
    d614:	4618      	mov	r0, r3
    d616:	3708      	adds	r7, #8
    d618:	46bd      	mov	sp, r7
    d61a:	bd80      	pop	{r7, pc}
    d61c:	0000d48d 	.word	0x0000d48d

0000d620 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    d620:	b580      	push	{r7, lr}
    d622:	b082      	sub	sp, #8
    d624:	af00      	add	r7, sp, #0
    d626:	4603      	mov	r3, r0
    d628:	603a      	str	r2, [r7, #0]
    d62a:	71fb      	strb	r3, [r7, #7]
    d62c:	460b      	mov	r3, r1
    d62e:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
    d630:	79bb      	ldrb	r3, [r7, #6]
    d632:	2b00      	cmp	r3, #0
    d634:	d002      	beq.n	d63c <usbdc_cb_ctl_done+0x1c>
    d636:	2b01      	cmp	r3, #1
    d638:	d004      	beq.n	d644 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
    d63a:	e008      	b.n	d64e <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
    d63c:	6838      	ldr	r0, [r7, #0]
    d63e:	4b06      	ldr	r3, [pc, #24]	; (d658 <usbdc_cb_ctl_done+0x38>)
    d640:	4798      	blx	r3
		break;
    d642:	e004      	b.n	d64e <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
    d644:	6838      	ldr	r0, [r7, #0]
    d646:	4b05      	ldr	r3, [pc, #20]	; (d65c <usbdc_cb_ctl_done+0x3c>)
    d648:	4798      	blx	r3
    d64a:	4603      	mov	r3, r0
    d64c:	e000      	b.n	d650 <usbdc_cb_ctl_done+0x30>
	}
	return false;
    d64e:	2300      	movs	r3, #0
}
    d650:	4618      	mov	r0, r3
    d652:	3708      	adds	r7, #8
    d654:	46bd      	mov	sp, r7
    d656:	bd80      	pop	{r7, pc}
    d658:	0000d571 	.word	0x0000d571
    d65c:	0000d601 	.word	0x0000d601

0000d660 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    d660:	b580      	push	{r7, lr}
    d662:	af00      	add	r7, sp, #0
	usbdc_unconfig();
    d664:	4b10      	ldr	r3, [pc, #64]	; (d6a8 <usbdc_reset+0x48>)
    d666:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    d668:	4b10      	ldr	r3, [pc, #64]	; (d6ac <usbdc_reset+0x4c>)
    d66a:	2202      	movs	r2, #2
    d66c:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
    d66e:	4b0f      	ldr	r3, [pc, #60]	; (d6ac <usbdc_reset+0x4c>)
    d670:	2200      	movs	r2, #0
    d672:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
    d674:	4b0d      	ldr	r3, [pc, #52]	; (d6ac <usbdc_reset+0x4c>)
    d676:	2200      	movs	r2, #0
    d678:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    d67a:	2000      	movs	r0, #0
    d67c:	4b0c      	ldr	r3, [pc, #48]	; (d6b0 <usbdc_reset+0x50>)
    d67e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    d680:	4b0a      	ldr	r3, [pc, #40]	; (d6ac <usbdc_reset+0x4c>)
    d682:	7f1b      	ldrb	r3, [r3, #28]
    d684:	4618      	mov	r0, r3
    d686:	4b0b      	ldr	r3, [pc, #44]	; (d6b4 <usbdc_reset+0x54>)
    d688:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    d68a:	4a0b      	ldr	r2, [pc, #44]	; (d6b8 <usbdc_reset+0x58>)
    d68c:	2100      	movs	r1, #0
    d68e:	2000      	movs	r0, #0
    d690:	4b0a      	ldr	r3, [pc, #40]	; (d6bc <usbdc_reset+0x5c>)
    d692:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    d694:	4a0a      	ldr	r2, [pc, #40]	; (d6c0 <usbdc_reset+0x60>)
    d696:	2102      	movs	r1, #2
    d698:	2000      	movs	r0, #0
    d69a:	4b08      	ldr	r3, [pc, #32]	; (d6bc <usbdc_reset+0x5c>)
    d69c:	4798      	blx	r3
	usb_d_ep_enable(0);
    d69e:	2000      	movs	r0, #0
    d6a0:	4b08      	ldr	r3, [pc, #32]	; (d6c4 <usbdc_reset+0x64>)
    d6a2:	4798      	blx	r3
}
    d6a4:	bf00      	nop
    d6a6:	bd80      	pop	{r7, pc}
    d6a8:	0000d0ad 	.word	0x0000d0ad
    d6ac:	2000114c 	.word	0x2000114c
    d6b0:	00003c8d 	.word	0x00003c8d
    d6b4:	00003bc9 	.word	0x00003bc9
    d6b8:	0000d4fd 	.word	0x0000d4fd
    d6bc:	00003fe1 	.word	0x00003fe1
    d6c0:	0000d621 	.word	0x0000d621
    d6c4:	00003cdd 	.word	0x00003cdd

0000d6c8 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    d6c8:	b580      	push	{r7, lr}
    d6ca:	b082      	sub	sp, #8
    d6cc:	af00      	add	r7, sp, #0
    d6ce:	4603      	mov	r3, r0
    d6d0:	6039      	str	r1, [r7, #0]
    d6d2:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
    d6d4:	79fb      	ldrb	r3, [r7, #7]
    d6d6:	2b00      	cmp	r3, #0
    d6d8:	d002      	beq.n	d6e0 <usbd_event_cb+0x18>
    d6da:	2b01      	cmp	r3, #1
    d6dc:	d005      	beq.n	d6ea <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
    d6de:	e007      	b.n	d6f0 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
    d6e0:	6839      	ldr	r1, [r7, #0]
    d6e2:	2000      	movs	r0, #0
    d6e4:	4b04      	ldr	r3, [pc, #16]	; (d6f8 <usbd_event_cb+0x30>)
    d6e6:	4798      	blx	r3
		break;
    d6e8:	e002      	b.n	d6f0 <usbd_event_cb+0x28>
		usbdc_reset();
    d6ea:	4b04      	ldr	r3, [pc, #16]	; (d6fc <usbd_event_cb+0x34>)
    d6ec:	4798      	blx	r3
		break;
    d6ee:	bf00      	nop
	}
}
    d6f0:	bf00      	nop
    d6f2:	3708      	adds	r7, #8
    d6f4:	46bd      	mov	sp, r7
    d6f6:	bd80      	pop	{r7, pc}
    d6f8:	0000d44d 	.word	0x0000d44d
    d6fc:	0000d661 	.word	0x0000d661

0000d700 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    d700:	b580      	push	{r7, lr}
    d702:	b088      	sub	sp, #32
    d704:	af00      	add	r7, sp, #0
    d706:	60b9      	str	r1, [r7, #8]
    d708:	607a      	str	r2, [r7, #4]
    d70a:	461a      	mov	r2, r3
    d70c:	4603      	mov	r3, r0
    d70e:	73fb      	strb	r3, [r7, #15]
    d710:	4613      	mov	r3, r2
    d712:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    d714:	68bb      	ldr	r3, [r7, #8]
    d716:	617b      	str	r3, [r7, #20]
    d718:	687b      	ldr	r3, [r7, #4]
    d71a:	61bb      	str	r3, [r7, #24]
    d71c:	7bfb      	ldrb	r3, [r7, #15]
    d71e:	773b      	strb	r3, [r7, #28]
    d720:	7bbb      	ldrb	r3, [r7, #14]
    d722:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
    d724:	f107 0314 	add.w	r3, r7, #20
    d728:	4618      	mov	r0, r3
    d72a:	4b03      	ldr	r3, [pc, #12]	; (d738 <usbdc_xfer+0x38>)
    d72c:	4798      	blx	r3
    d72e:	4603      	mov	r3, r0
}
    d730:	4618      	mov	r0, r3
    d732:	3720      	adds	r7, #32
    d734:	46bd      	mov	sp, r7
    d736:	bd80      	pop	{r7, pc}
    d738:	00003d4d 	.word	0x00003d4d

0000d73c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    d73c:	b580      	push	{r7, lr}
    d73e:	b082      	sub	sp, #8
    d740:	af00      	add	r7, sp, #0
    d742:	4603      	mov	r3, r0
    d744:	6039      	str	r1, [r7, #0]
    d746:	71fb      	strb	r3, [r7, #7]
	switch (type) {
    d748:	79fb      	ldrb	r3, [r7, #7]
    d74a:	2b01      	cmp	r3, #1
    d74c:	d009      	beq.n	d762 <usbdc_register_handler+0x26>
    d74e:	2b02      	cmp	r3, #2
    d750:	d00c      	beq.n	d76c <usbdc_register_handler+0x30>
    d752:	2b00      	cmp	r3, #0
    d754:	d000      	beq.n	d758 <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
    d756:	e00e      	b.n	d776 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    d758:	6839      	ldr	r1, [r7, #0]
    d75a:	4809      	ldr	r0, [pc, #36]	; (d780 <usbdc_register_handler+0x44>)
    d75c:	4b09      	ldr	r3, [pc, #36]	; (d784 <usbdc_register_handler+0x48>)
    d75e:	4798      	blx	r3
		break;
    d760:	e009      	b.n	d776 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    d762:	6839      	ldr	r1, [r7, #0]
    d764:	4808      	ldr	r0, [pc, #32]	; (d788 <usbdc_register_handler+0x4c>)
    d766:	4b07      	ldr	r3, [pc, #28]	; (d784 <usbdc_register_handler+0x48>)
    d768:	4798      	blx	r3
		break;
    d76a:	e004      	b.n	d776 <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    d76c:	6839      	ldr	r1, [r7, #0]
    d76e:	4807      	ldr	r0, [pc, #28]	; (d78c <usbdc_register_handler+0x50>)
    d770:	4b04      	ldr	r3, [pc, #16]	; (d784 <usbdc_register_handler+0x48>)
    d772:	4798      	blx	r3
		break;
    d774:	bf00      	nop
	}
}
    d776:	bf00      	nop
    d778:	3708      	adds	r7, #8
    d77a:	46bd      	mov	sp, r7
    d77c:	bd80      	pop	{r7, pc}
    d77e:	bf00      	nop
    d780:	20001150 	.word	0x20001150
    d784:	00004139 	.word	0x00004139
    d788:	20001154 	.word	0x20001154
    d78c:	20001158 	.word	0x20001158

0000d790 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    d790:	b580      	push	{r7, lr}
    d792:	b084      	sub	sp, #16
    d794:	af00      	add	r7, sp, #0
    d796:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
    d798:	687b      	ldr	r3, [r7, #4]
    d79a:	2b00      	cmp	r3, #0
    d79c:	bf14      	ite	ne
    d79e:	2301      	movne	r3, #1
    d7a0:	2300      	moveq	r3, #0
    d7a2:	b2db      	uxtb	r3, r3
    d7a4:	f240 3255 	movw	r2, #853	; 0x355
    d7a8:	4910      	ldr	r1, [pc, #64]	; (d7ec <usbdc_init+0x5c>)
    d7aa:	4618      	mov	r0, r3
    d7ac:	4b10      	ldr	r3, [pc, #64]	; (d7f0 <usbdc_init+0x60>)
    d7ae:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    d7b0:	4b10      	ldr	r3, [pc, #64]	; (d7f4 <usbdc_init+0x64>)
    d7b2:	4798      	blx	r3
    d7b4:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
    d7b6:	68fb      	ldr	r3, [r7, #12]
    d7b8:	2b00      	cmp	r3, #0
    d7ba:	da01      	bge.n	d7c0 <usbdc_init+0x30>
		return rc;
    d7bc:	68fb      	ldr	r3, [r7, #12]
    d7be:	e010      	b.n	d7e2 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
    d7c0:	2220      	movs	r2, #32
    d7c2:	2100      	movs	r1, #0
    d7c4:	480c      	ldr	r0, [pc, #48]	; (d7f8 <usbdc_init+0x68>)
    d7c6:	4b0d      	ldr	r3, [pc, #52]	; (d7fc <usbdc_init+0x6c>)
    d7c8:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    d7ca:	4a0b      	ldr	r2, [pc, #44]	; (d7f8 <usbdc_init+0x68>)
    d7cc:	687b      	ldr	r3, [r7, #4]
    d7ce:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    d7d0:	490b      	ldr	r1, [pc, #44]	; (d800 <usbdc_init+0x70>)
    d7d2:	2000      	movs	r0, #0
    d7d4:	4b0b      	ldr	r3, [pc, #44]	; (d804 <usbdc_init+0x74>)
    d7d6:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    d7d8:	490b      	ldr	r1, [pc, #44]	; (d808 <usbdc_init+0x78>)
    d7da:	2001      	movs	r0, #1
    d7dc:	4b09      	ldr	r3, [pc, #36]	; (d804 <usbdc_init+0x74>)
    d7de:	4798      	blx	r3

	return 0;
    d7e0:	2300      	movs	r3, #0
}
    d7e2:	4618      	mov	r0, r3
    d7e4:	3710      	adds	r7, #16
    d7e6:	46bd      	mov	sp, r7
    d7e8:	bd80      	pop	{r7, pc}
    d7ea:	bf00      	nop
    d7ec:	00013e00 	.word	0x00013e00
    d7f0:	0000405d 	.word	0x0000405d
    d7f4:	00003ab5 	.word	0x00003ab5
    d7f8:	2000114c 	.word	0x2000114c
    d7fc:	00013745 	.word	0x00013745
    d800:	0000d4ed 	.word	0x0000d4ed
    d804:	00003b61 	.word	0x00003b61
    d808:	0000d6c9 	.word	0x0000d6c9

0000d80c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    d80c:	b580      	push	{r7, lr}
    d80e:	b082      	sub	sp, #8
    d810:	af00      	add	r7, sp, #0
    d812:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
    d814:	6879      	ldr	r1, [r7, #4]
    d816:	4803      	ldr	r0, [pc, #12]	; (d824 <usbdc_register_function+0x18>)
    d818:	4b03      	ldr	r3, [pc, #12]	; (d828 <usbdc_register_function+0x1c>)
    d81a:	4798      	blx	r3
}
    d81c:	bf00      	nop
    d81e:	3708      	adds	r7, #8
    d820:	46bd      	mov	sp, r7
    d822:	bd80      	pop	{r7, pc}
    d824:	2000115c 	.word	0x2000115c
    d828:	00004139 	.word	0x00004139

0000d82c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    d82c:	b580      	push	{r7, lr}
    d82e:	b082      	sub	sp, #8
    d830:	af00      	add	r7, sp, #0
    d832:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
    d834:	4b0f      	ldr	r3, [pc, #60]	; (d874 <usbdc_start+0x48>)
    d836:	7e9b      	ldrb	r3, [r3, #26]
    d838:	2b00      	cmp	r3, #0
    d83a:	d002      	beq.n	d842 <usbdc_start+0x16>
		return ERR_BUSY;
    d83c:	f06f 0303 	mvn.w	r3, #3
    d840:	e013      	b.n	d86a <usbdc_start+0x3e>
	}

	if (desces) {
    d842:	687b      	ldr	r3, [r7, #4]
    d844:	2b00      	cmp	r3, #0
    d846:	d00e      	beq.n	d866 <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
    d848:	4a0a      	ldr	r2, [pc, #40]	; (d874 <usbdc_start+0x48>)
    d84a:	687b      	ldr	r3, [r7, #4]
    d84c:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    d84e:	687b      	ldr	r3, [r7, #4]
    d850:	681b      	ldr	r3, [r3, #0]
    d852:	79da      	ldrb	r2, [r3, #7]
    d854:	4b07      	ldr	r3, [pc, #28]	; (d874 <usbdc_start+0x48>)
    d856:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    d858:	4b06      	ldr	r3, [pc, #24]	; (d874 <usbdc_start+0x48>)
    d85a:	2201      	movs	r2, #1
    d85c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    d85e:	4b06      	ldr	r3, [pc, #24]	; (d878 <usbdc_start+0x4c>)
    d860:	4798      	blx	r3
	return ERR_NONE;
    d862:	2300      	movs	r3, #0
    d864:	e001      	b.n	d86a <usbdc_start+0x3e>
		return ERR_BAD_DATA;
    d866:	f06f 0308 	mvn.w	r3, #8
}
    d86a:	4618      	mov	r0, r3
    d86c:	3708      	adds	r7, #8
    d86e:	46bd      	mov	sp, r7
    d870:	bd80      	pop	{r7, pc}
    d872:	bf00      	nop
    d874:	2000114c 	.word	0x2000114c
    d878:	00003b85 	.word	0x00003b85

0000d87c <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    d87c:	b580      	push	{r7, lr}
    d87e:	af00      	add	r7, sp, #0
	usb_d_attach();
    d880:	4b01      	ldr	r3, [pc, #4]	; (d888 <usbdc_attach+0xc>)
    d882:	4798      	blx	r3
}
    d884:	bf00      	nop
    d886:	bd80      	pop	{r7, pc}
    d888:	00003b99 	.word	0x00003b99

0000d88c <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
    d88c:	b480      	push	{r7}
    d88e:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
    d890:	4b03      	ldr	r3, [pc, #12]	; (d8a0 <usbdc_get_ctrl_buffer+0x14>)
    d892:	695b      	ldr	r3, [r3, #20]
}
    d894:	4618      	mov	r0, r3
    d896:	46bd      	mov	sp, r7
    d898:	f85d 7b04 	ldr.w	r7, [sp], #4
    d89c:	4770      	bx	lr
    d89e:	bf00      	nop
    d8a0:	2000114c 	.word	0x2000114c

0000d8a4 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
    d8a4:	b480      	push	{r7}
    d8a6:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
    d8a8:	4b07      	ldr	r3, [pc, #28]	; (d8c8 <usbdc_get_state+0x24>)
    d8aa:	7e9b      	ldrb	r3, [r3, #26]
    d8ac:	f003 0310 	and.w	r3, r3, #16
    d8b0:	2b00      	cmp	r3, #0
    d8b2:	d001      	beq.n	d8b8 <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
    d8b4:	2310      	movs	r3, #16
    d8b6:	e001      	b.n	d8bc <usbdc_get_state+0x18>
	}
	return usbdc.state;
    d8b8:	4b03      	ldr	r3, [pc, #12]	; (d8c8 <usbdc_get_state+0x24>)
    d8ba:	7e9b      	ldrb	r3, [r3, #26]
}
    d8bc:	4618      	mov	r0, r3
    d8be:	46bd      	mov	sp, r7
    d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8c4:	4770      	bx	lr
    d8c6:	bf00      	nop
    d8c8:	2000114c 	.word	0x2000114c

0000d8cc <usb_get_u16>:
{
    d8cc:	b480      	push	{r7}
    d8ce:	b083      	sub	sp, #12
    d8d0:	af00      	add	r7, sp, #0
    d8d2:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
    d8d4:	687b      	ldr	r3, [r7, #4]
    d8d6:	781b      	ldrb	r3, [r3, #0]
    d8d8:	b29a      	uxth	r2, r3
    d8da:	687b      	ldr	r3, [r7, #4]
    d8dc:	3301      	adds	r3, #1
    d8de:	781b      	ldrb	r3, [r3, #0]
    d8e0:	b29b      	uxth	r3, r3
    d8e2:	021b      	lsls	r3, r3, #8
    d8e4:	b29b      	uxth	r3, r3
    d8e6:	4413      	add	r3, r2
    d8e8:	b29b      	uxth	r3, r3
}
    d8ea:	4618      	mov	r0, r3
    d8ec:	370c      	adds	r7, #12
    d8ee:	46bd      	mov	sp, r7
    d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    d8f4:	4770      	bx	lr

0000d8f6 <usb_desc_len>:
{
    d8f6:	b480      	push	{r7}
    d8f8:	b083      	sub	sp, #12
    d8fa:	af00      	add	r7, sp, #0
    d8fc:	6078      	str	r0, [r7, #4]
	return desc[0];
    d8fe:	687b      	ldr	r3, [r7, #4]
    d900:	781b      	ldrb	r3, [r3, #0]
}
    d902:	4618      	mov	r0, r3
    d904:	370c      	adds	r7, #12
    d906:	46bd      	mov	sp, r7
    d908:	f85d 7b04 	ldr.w	r7, [sp], #4
    d90c:	4770      	bx	lr

0000d90e <usb_desc_type>:
{
    d90e:	b480      	push	{r7}
    d910:	b083      	sub	sp, #12
    d912:	af00      	add	r7, sp, #0
    d914:	6078      	str	r0, [r7, #4]
	return desc[1];
    d916:	687b      	ldr	r3, [r7, #4]
    d918:	3301      	adds	r3, #1
    d91a:	781b      	ldrb	r3, [r3, #0]
}
    d91c:	4618      	mov	r0, r3
    d91e:	370c      	adds	r7, #12
    d920:	46bd      	mov	sp, r7
    d922:	f85d 7b04 	ldr.w	r7, [sp], #4
    d926:	4770      	bx	lr

0000d928 <usb_desc_next>:
{
    d928:	b580      	push	{r7, lr}
    d92a:	b082      	sub	sp, #8
    d92c:	af00      	add	r7, sp, #0
    d92e:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
    d930:	6878      	ldr	r0, [r7, #4]
    d932:	4b05      	ldr	r3, [pc, #20]	; (d948 <usb_desc_next+0x20>)
    d934:	4798      	blx	r3
    d936:	4603      	mov	r3, r0
    d938:	461a      	mov	r2, r3
    d93a:	687b      	ldr	r3, [r7, #4]
    d93c:	4413      	add	r3, r2
}
    d93e:	4618      	mov	r0, r3
    d940:	3708      	adds	r7, #8
    d942:	46bd      	mov	sp, r7
    d944:	bd80      	pop	{r7, pc}
    d946:	bf00      	nop
    d948:	0000d8f7 	.word	0x0000d8f7

0000d94c <usb_cfg_desc_total_len>:
{
    d94c:	b580      	push	{r7, lr}
    d94e:	b082      	sub	sp, #8
    d950:	af00      	add	r7, sp, #0
    d952:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
    d954:	687b      	ldr	r3, [r7, #4]
    d956:	3302      	adds	r3, #2
    d958:	4618      	mov	r0, r3
    d95a:	4b03      	ldr	r3, [pc, #12]	; (d968 <usb_cfg_desc_total_len+0x1c>)
    d95c:	4798      	blx	r3
    d95e:	4603      	mov	r3, r0
}
    d960:	4618      	mov	r0, r3
    d962:	3708      	adds	r7, #8
    d964:	46bd      	mov	sp, r7
    d966:	bd80      	pop	{r7, pc}
    d968:	0000d8cd 	.word	0x0000d8cd

0000d96c <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
    d96c:	b580      	push	{r7, lr}
    d96e:	b082      	sub	sp, #8
    d970:	af00      	add	r7, sp, #0
    d972:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    d974:	6878      	ldr	r0, [r7, #4]
    d976:	4b05      	ldr	r3, [pc, #20]	; (d98c <usb_cfg_desc_next+0x20>)
    d978:	4798      	blx	r3
    d97a:	4603      	mov	r3, r0
    d97c:	461a      	mov	r2, r3
    d97e:	687b      	ldr	r3, [r7, #4]
    d980:	4413      	add	r3, r2
}
    d982:	4618      	mov	r0, r3
    d984:	3708      	adds	r7, #8
    d986:	46bd      	mov	sp, r7
    d988:	bd80      	pop	{r7, pc}
    d98a:	bf00      	nop
    d98c:	0000d94d 	.word	0x0000d94d

0000d990 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    d990:	b580      	push	{r7, lr}
    d992:	b084      	sub	sp, #16
    d994:	af00      	add	r7, sp, #0
    d996:	60f8      	str	r0, [r7, #12]
    d998:	60b9      	str	r1, [r7, #8]
    d99a:	4613      	mov	r3, r2
    d99c:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d99e:	e015      	b.n	d9cc <usb_find_desc+0x3c>
		_desc_len_check();
    d9a0:	68f8      	ldr	r0, [r7, #12]
    d9a2:	4b0f      	ldr	r3, [pc, #60]	; (d9e0 <usb_find_desc+0x50>)
    d9a4:	4798      	blx	r3
    d9a6:	4603      	mov	r3, r0
    d9a8:	2b01      	cmp	r3, #1
    d9aa:	d801      	bhi.n	d9b0 <usb_find_desc+0x20>
    d9ac:	2300      	movs	r3, #0
    d9ae:	e012      	b.n	d9d6 <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
    d9b0:	68f8      	ldr	r0, [r7, #12]
    d9b2:	4b0c      	ldr	r3, [pc, #48]	; (d9e4 <usb_find_desc+0x54>)
    d9b4:	4798      	blx	r3
    d9b6:	4603      	mov	r3, r0
    d9b8:	461a      	mov	r2, r3
    d9ba:	79fb      	ldrb	r3, [r7, #7]
    d9bc:	4293      	cmp	r3, r2
    d9be:	d101      	bne.n	d9c4 <usb_find_desc+0x34>
			return desc;
    d9c0:	68fb      	ldr	r3, [r7, #12]
    d9c2:	e008      	b.n	d9d6 <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
    d9c4:	68f8      	ldr	r0, [r7, #12]
    d9c6:	4b08      	ldr	r3, [pc, #32]	; (d9e8 <usb_find_desc+0x58>)
    d9c8:	4798      	blx	r3
    d9ca:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    d9cc:	68fa      	ldr	r2, [r7, #12]
    d9ce:	68bb      	ldr	r3, [r7, #8]
    d9d0:	429a      	cmp	r2, r3
    d9d2:	d3e5      	bcc.n	d9a0 <usb_find_desc+0x10>
	}
	return NULL;
    d9d4:	2300      	movs	r3, #0
}
    d9d6:	4618      	mov	r0, r3
    d9d8:	3710      	adds	r7, #16
    d9da:	46bd      	mov	sp, r7
    d9dc:	bd80      	pop	{r7, pc}
    d9de:	bf00      	nop
    d9e0:	0000d8f7 	.word	0x0000d8f7
    d9e4:	0000d90f 	.word	0x0000d90f
    d9e8:	0000d929 	.word	0x0000d929

0000d9ec <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
    d9ec:	b580      	push	{r7, lr}
    d9ee:	b082      	sub	sp, #8
    d9f0:	af00      	add	r7, sp, #0
    d9f2:	6078      	str	r0, [r7, #4]
    d9f4:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    d9f6:	e019      	b.n	da2c <usb_find_ep_desc+0x40>
		_desc_len_check();
    d9f8:	6878      	ldr	r0, [r7, #4]
    d9fa:	4b12      	ldr	r3, [pc, #72]	; (da44 <usb_find_ep_desc+0x58>)
    d9fc:	4798      	blx	r3
    d9fe:	4603      	mov	r3, r0
    da00:	2b01      	cmp	r3, #1
    da02:	d801      	bhi.n	da08 <usb_find_ep_desc+0x1c>
    da04:	2300      	movs	r3, #0
    da06:	e018      	b.n	da3a <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    da08:	6878      	ldr	r0, [r7, #4]
    da0a:	4b0f      	ldr	r3, [pc, #60]	; (da48 <usb_find_ep_desc+0x5c>)
    da0c:	4798      	blx	r3
    da0e:	4603      	mov	r3, r0
    da10:	2b04      	cmp	r3, #4
    da12:	d010      	beq.n	da36 <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    da14:	6878      	ldr	r0, [r7, #4]
    da16:	4b0c      	ldr	r3, [pc, #48]	; (da48 <usb_find_ep_desc+0x5c>)
    da18:	4798      	blx	r3
    da1a:	4603      	mov	r3, r0
    da1c:	2b05      	cmp	r3, #5
    da1e:	d101      	bne.n	da24 <usb_find_ep_desc+0x38>
			return desc;
    da20:	687b      	ldr	r3, [r7, #4]
    da22:	e00a      	b.n	da3a <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
    da24:	6878      	ldr	r0, [r7, #4]
    da26:	4b09      	ldr	r3, [pc, #36]	; (da4c <usb_find_ep_desc+0x60>)
    da28:	4798      	blx	r3
    da2a:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
    da2c:	687a      	ldr	r2, [r7, #4]
    da2e:	683b      	ldr	r3, [r7, #0]
    da30:	429a      	cmp	r2, r3
    da32:	d3e1      	bcc.n	d9f8 <usb_find_ep_desc+0xc>
    da34:	e000      	b.n	da38 <usb_find_ep_desc+0x4c>
			break;
    da36:	bf00      	nop
	}
	return NULL;
    da38:	2300      	movs	r3, #0
}
    da3a:	4618      	mov	r0, r3
    da3c:	3708      	adds	r7, #8
    da3e:	46bd      	mov	sp, r7
    da40:	bd80      	pop	{r7, pc}
    da42:	bf00      	nop
    da44:	0000d8f7 	.word	0x0000d8f7
    da48:	0000d90f 	.word	0x0000d90f
    da4c:	0000d929 	.word	0x0000d929

0000da50 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    da50:	b580      	push	{r7, lr}
    da52:	b084      	sub	sp, #16
    da54:	af00      	add	r7, sp, #0
    da56:	60f8      	str	r0, [r7, #12]
    da58:	60b9      	str	r1, [r7, #8]
    da5a:	4613      	mov	r3, r2
    da5c:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    da5e:	2202      	movs	r2, #2
    da60:	68b9      	ldr	r1, [r7, #8]
    da62:	68f8      	ldr	r0, [r7, #12]
    da64:	4b15      	ldr	r3, [pc, #84]	; (dabc <usb_find_cfg_desc+0x6c>)
    da66:	4798      	blx	r3
    da68:	60f8      	str	r0, [r7, #12]
	if (!desc) {
    da6a:	68fb      	ldr	r3, [r7, #12]
    da6c:	2b00      	cmp	r3, #0
    da6e:	d11a      	bne.n	daa6 <usb_find_cfg_desc+0x56>
		return NULL;
    da70:	2300      	movs	r3, #0
    da72:	e01f      	b.n	dab4 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
    da74:	68f8      	ldr	r0, [r7, #12]
    da76:	4b12      	ldr	r3, [pc, #72]	; (dac0 <usb_find_cfg_desc+0x70>)
    da78:	4798      	blx	r3
    da7a:	4603      	mov	r3, r0
    da7c:	2b01      	cmp	r3, #1
    da7e:	d801      	bhi.n	da84 <usb_find_cfg_desc+0x34>
    da80:	2300      	movs	r3, #0
    da82:	e017      	b.n	dab4 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
    da84:	68fb      	ldr	r3, [r7, #12]
    da86:	3301      	adds	r3, #1
    da88:	781b      	ldrb	r3, [r3, #0]
    da8a:	2b02      	cmp	r3, #2
    da8c:	d110      	bne.n	dab0 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
    da8e:	68fb      	ldr	r3, [r7, #12]
    da90:	3305      	adds	r3, #5
    da92:	781b      	ldrb	r3, [r3, #0]
    da94:	79fa      	ldrb	r2, [r7, #7]
    da96:	429a      	cmp	r2, r3
    da98:	d101      	bne.n	da9e <usb_find_cfg_desc+0x4e>
			return desc;
    da9a:	68fb      	ldr	r3, [r7, #12]
    da9c:	e00a      	b.n	dab4 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
    da9e:	68f8      	ldr	r0, [r7, #12]
    daa0:	4b08      	ldr	r3, [pc, #32]	; (dac4 <usb_find_cfg_desc+0x74>)
    daa2:	4798      	blx	r3
    daa4:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
    daa6:	68fa      	ldr	r2, [r7, #12]
    daa8:	68bb      	ldr	r3, [r7, #8]
    daaa:	429a      	cmp	r2, r3
    daac:	d3e2      	bcc.n	da74 <usb_find_cfg_desc+0x24>
    daae:	e000      	b.n	dab2 <usb_find_cfg_desc+0x62>
			break;
    dab0:	bf00      	nop
	}
	return NULL;
    dab2:	2300      	movs	r3, #0
}
    dab4:	4618      	mov	r0, r3
    dab6:	3710      	adds	r7, #16
    dab8:	46bd      	mov	sp, r7
    daba:	bd80      	pop	{r7, pc}
    dabc:	0000d991 	.word	0x0000d991
    dac0:	0000d8f7 	.word	0x0000d8f7
    dac4:	0000d96d 	.word	0x0000d96d

0000dac8 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    dac8:	b580      	push	{r7, lr}
    daca:	b086      	sub	sp, #24
    dacc:	af00      	add	r7, sp, #0
    dace:	60f8      	str	r0, [r7, #12]
    dad0:	60b9      	str	r1, [r7, #8]
    dad2:	4613      	mov	r3, r2
    dad4:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    dad6:	2300      	movs	r3, #0
    dad8:	75fb      	strb	r3, [r7, #23]
    dada:	e020      	b.n	db1e <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    dadc:	2203      	movs	r2, #3
    dade:	68b9      	ldr	r1, [r7, #8]
    dae0:	68f8      	ldr	r0, [r7, #12]
    dae2:	4b13      	ldr	r3, [pc, #76]	; (db30 <usb_find_str_desc+0x68>)
    dae4:	4798      	blx	r3
    dae6:	60f8      	str	r0, [r7, #12]
		if (desc) {
    dae8:	68fb      	ldr	r3, [r7, #12]
    daea:	2b00      	cmp	r3, #0
    daec:	d015      	beq.n	db1a <usb_find_str_desc+0x52>
			_desc_len_check();
    daee:	68f8      	ldr	r0, [r7, #12]
    daf0:	4b10      	ldr	r3, [pc, #64]	; (db34 <usb_find_str_desc+0x6c>)
    daf2:	4798      	blx	r3
    daf4:	4603      	mov	r3, r0
    daf6:	2b01      	cmp	r3, #1
    daf8:	d801      	bhi.n	dafe <usb_find_str_desc+0x36>
    dafa:	2300      	movs	r3, #0
    dafc:	e014      	b.n	db28 <usb_find_str_desc+0x60>
			if (i == str_index) {
    dafe:	7dfa      	ldrb	r2, [r7, #23]
    db00:	79fb      	ldrb	r3, [r7, #7]
    db02:	429a      	cmp	r2, r3
    db04:	d101      	bne.n	db0a <usb_find_str_desc+0x42>
				return desc;
    db06:	68fb      	ldr	r3, [r7, #12]
    db08:	e00e      	b.n	db28 <usb_find_str_desc+0x60>
			}
			i++;
    db0a:	7dfb      	ldrb	r3, [r7, #23]
    db0c:	3301      	adds	r3, #1
    db0e:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
    db10:	68f8      	ldr	r0, [r7, #12]
    db12:	4b09      	ldr	r3, [pc, #36]	; (db38 <usb_find_str_desc+0x70>)
    db14:	4798      	blx	r3
    db16:	60f8      	str	r0, [r7, #12]
    db18:	e001      	b.n	db1e <usb_find_str_desc+0x56>
		} else {
			return NULL;
    db1a:	2300      	movs	r3, #0
    db1c:	e004      	b.n	db28 <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
    db1e:	68fa      	ldr	r2, [r7, #12]
    db20:	68bb      	ldr	r3, [r7, #8]
    db22:	429a      	cmp	r2, r3
    db24:	d3da      	bcc.n	dadc <usb_find_str_desc+0x14>
		}
	}
	return NULL;
    db26:	2300      	movs	r3, #0
}
    db28:	4618      	mov	r0, r3
    db2a:	3718      	adds	r7, #24
    db2c:	46bd      	mov	sp, r7
    db2e:	bd80      	pop	{r7, pc}
    db30:	0000d991 	.word	0x0000d991
    db34:	0000d8f7 	.word	0x0000d8f7
    db38:	0000d929 	.word	0x0000d929

0000db3c <_ZN14I2C_Sync_ClassC1EP15i2c_m_sync_desc>:
// default constructor
I2C_Sync_Class::I2C_Sync_Class()
{
	i2c_initiated=false;
} //I2C_Sync_Class
I2C_Sync_Class::I2C_Sync_Class(i2c_m_sync_desc * des)
    db3c:	b480      	push	{r7}
    db3e:	b083      	sub	sp, #12
    db40:	af00      	add	r7, sp, #0
    db42:	6078      	str	r0, [r7, #4]
    db44:	6039      	str	r1, [r7, #0]
{
	ptrI2CDescr=des;
    db46:	687b      	ldr	r3, [r7, #4]
    db48:	683a      	ldr	r2, [r7, #0]
    db4a:	611a      	str	r2, [r3, #16]
} //I2C_Sync_Class
    db4c:	687b      	ldr	r3, [r7, #4]
    db4e:	4618      	mov	r0, r3
    db50:	370c      	adds	r7, #12
    db52:	46bd      	mov	sp, r7
    db54:	bc80      	pop	{r7}
    db56:	4770      	bx	lr

0000db58 <_ZN14I2C_Sync_ClassD1Ev>:

// default destructor
I2C_Sync_Class::~I2C_Sync_Class()
    db58:	b480      	push	{r7}
    db5a:	b083      	sub	sp, #12
    db5c:	af00      	add	r7, sp, #0
    db5e:	6078      	str	r0, [r7, #4]
{
} //~I2C_Sync_Class
    db60:	687b      	ldr	r3, [r7, #4]
    db62:	4618      	mov	r0, r3
    db64:	370c      	adds	r7, #12
    db66:	46bd      	mov	sp, r7
    db68:	bc80      	pop	{r7}
    db6a:	4770      	bx	lr

0000db6c <_ZN14I2C_Sync_Class4InitEv>:
void	I2C_Sync_Class::SetDescriptor(i2c_m_sync_desc * i2c_a){
	ptrI2CDescr=i2c_a;
	asm("nop");

}
bool	I2C_Sync_Class::Init(void){
    db6c:	b580      	push	{r7, lr}
    db6e:	b084      	sub	sp, #16
    db70:	af00      	add	r7, sp, #0
    db72:	6078      	str	r0, [r7, #4]
	txBuffer=txI2CStaticBuffer;
    db74:	687b      	ldr	r3, [r7, #4]
    db76:	4a14      	ldr	r2, [pc, #80]	; (dbc8 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    db78:	601a      	str	r2, [r3, #0]
	rxBuffer=txI2CStaticBuffer;
    db7a:	687b      	ldr	r3, [r7, #4]
    db7c:	4a12      	ldr	r2, [pc, #72]	; (dbc8 <_ZN14I2C_Sync_Class4InitEv+0x5c>)
    db7e:	605a      	str	r2, [r3, #4]

	i2c_m_sync_get_io_descriptor(ptrI2CDescr, &I2C_io);
    db80:	687b      	ldr	r3, [r7, #4]
    db82:	691a      	ldr	r2, [r3, #16]
    db84:	687b      	ldr	r3, [r7, #4]
    db86:	330c      	adds	r3, #12
    db88:	4619      	mov	r1, r3
    db8a:	4610      	mov	r0, r2
    db8c:	4b0f      	ldr	r3, [pc, #60]	; (dbcc <_ZN14I2C_Sync_Class4InitEv+0x60>)
    db8e:	4798      	blx	r3
	uint8_t	ena=(uint8_t)i2c_m_sync_enable(ptrI2CDescr);
    db90:	687b      	ldr	r3, [r7, #4]
    db92:	691b      	ldr	r3, [r3, #16]
    db94:	4618      	mov	r0, r3
    db96:	4b0e      	ldr	r3, [pc, #56]	; (dbd0 <_ZN14I2C_Sync_Class4InitEv+0x64>)
    db98:	4798      	blx	r3
    db9a:	4603      	mov	r3, r0
    db9c:	73fb      	strb	r3, [r7, #15]
	isOK=ena==0;
    db9e:	7bfb      	ldrb	r3, [r7, #15]
    dba0:	2b00      	cmp	r3, #0
    dba2:	bf0c      	ite	eq
    dba4:	2301      	moveq	r3, #1
    dba6:	2300      	movne	r3, #0
    dba8:	b2da      	uxtb	r2, r3
    dbaa:	687b      	ldr	r3, [r7, #4]
    dbac:	725a      	strb	r2, [r3, #9]
	i2c_initiated=isOK;
    dbae:	687b      	ldr	r3, [r7, #4]
    dbb0:	7a5b      	ldrb	r3, [r3, #9]
    dbb2:	b2da      	uxtb	r2, r3
    dbb4:	687b      	ldr	r3, [r7, #4]
    dbb6:	721a      	strb	r2, [r3, #8]
	return isOK;
    dbb8:	687b      	ldr	r3, [r7, #4]
    dbba:	7a5b      	ldrb	r3, [r3, #9]
    dbbc:	b2db      	uxtb	r3, r3
	
}
    dbbe:	4618      	mov	r0, r3
    dbc0:	3710      	adds	r7, #16
    dbc2:	46bd      	mov	sp, r7
    dbc4:	bd80      	pop	{r7, pc}
    dbc6:	bf00      	nop
    dbc8:	2000116c 	.word	0x2000116c
    dbcc:	00002deb 	.word	0x00002deb
    dbd0:	00002d91 	.word	0x00002d91

0000dbd4 <_ZN14I2C_Sync_Class15SetSlaveAddressEh>:
	i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);

	return isOK;
}

int32_t I2C_Sync_Class::SetSlaveAddress(uint8_t add){
    dbd4:	b580      	push	{r7, lr}
    dbd6:	b082      	sub	sp, #8
    dbd8:	af00      	add	r7, sp, #0
    dbda:	6078      	str	r0, [r7, #4]
    dbdc:	460b      	mov	r3, r1
    dbde:	70fb      	strb	r3, [r7, #3]
	return i2c_m_sync_set_slaveaddr(ptrI2CDescr,(int16_t)add, I2C_M_SEVEN);
    dbe0:	687b      	ldr	r3, [r7, #4]
    dbe2:	691b      	ldr	r3, [r3, #16]
    dbe4:	78fa      	ldrb	r2, [r7, #3]
    dbe6:	b211      	sxth	r1, r2
    dbe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    dbec:	4618      	mov	r0, r3
    dbee:	4b03      	ldr	r3, [pc, #12]	; (dbfc <_ZN14I2C_Sync_Class15SetSlaveAddressEh+0x28>)
    dbf0:	4798      	blx	r3
    dbf2:	4603      	mov	r3, r0
}
    dbf4:	4618      	mov	r0, r3
    dbf6:	3708      	adds	r7, #8
    dbf8:	46bd      	mov	sp, r7
    dbfa:	bd80      	pop	{r7, pc}
    dbfc:	00002db1 	.word	0x00002db1

0000dc00 <_ZN14I2C_Sync_Class5WriteEPht>:

int32_t I2C_Sync_Class::Write(uint8_t* buffer, uint16_t lenght){
    dc00:	b580      	push	{r7, lr}
    dc02:	b086      	sub	sp, #24
    dc04:	af00      	add	r7, sp, #0
    dc06:	60f8      	str	r0, [r7, #12]
    dc08:	60b9      	str	r1, [r7, #8]
    dc0a:	4613      	mov	r3, r2
    dc0c:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t w= io_write(I2C_io, buffer, lenght);
    dc0e:	68fb      	ldr	r3, [r7, #12]
    dc10:	68db      	ldr	r3, [r3, #12]
    dc12:	88fa      	ldrh	r2, [r7, #6]
    dc14:	68b9      	ldr	r1, [r7, #8]
    dc16:	4618      	mov	r0, r3
    dc18:	4b03      	ldr	r3, [pc, #12]	; (dc28 <_ZN14I2C_Sync_Class5WriteEPht+0x28>)
    dc1a:	4798      	blx	r3
    dc1c:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return w;
    dc1e:	697b      	ldr	r3, [r7, #20]
}
    dc20:	4618      	mov	r0, r3
    dc22:	3718      	adds	r7, #24
    dc24:	46bd      	mov	sp, r7
    dc26:	bd80      	pop	{r7, pc}
    dc28:	00011459 	.word	0x00011459

0000dc2c <_ZN14I2C_Sync_Class4ReadEPht>:
int32_t I2C_Sync_Class::Read(uint8_t* buffer, uint16_t lenght){
    dc2c:	b580      	push	{r7, lr}
    dc2e:	b086      	sub	sp, #24
    dc30:	af00      	add	r7, sp, #0
    dc32:	60f8      	str	r0, [r7, #12]
    dc34:	60b9      	str	r1, [r7, #8]
    dc36:	4613      	mov	r3, r2
    dc38:	80fb      	strh	r3, [r7, #6]
//	Irq_Disable();
	int32_t r= io_read(I2C_io, buffer, lenght);
    dc3a:	68fb      	ldr	r3, [r7, #12]
    dc3c:	68db      	ldr	r3, [r3, #12]
    dc3e:	88fa      	ldrh	r2, [r7, #6]
    dc40:	68b9      	ldr	r1, [r7, #8]
    dc42:	4618      	mov	r0, r3
    dc44:	4b03      	ldr	r3, [pc, #12]	; (dc54 <_ZN14I2C_Sync_Class4ReadEPht+0x28>)
    dc46:	4798      	blx	r3
    dc48:	6178      	str	r0, [r7, #20]
//	Irq_Enable();
	return r;
    dc4a:	697b      	ldr	r3, [r7, #20]
}
    dc4c:	4618      	mov	r0, r3
    dc4e:	3718      	adds	r7, #24
    dc50:	46bd      	mov	sp, r7
    dc52:	bd80      	pop	{r7, pc}
    dc54:	000114a9 	.word	0x000114a9

0000dc58 <_ZN11Timer_ClassC1EP16timer_descriptor>:
	task->cb=task_cb;
	lastTaskIndex=0;
} //Timer_Class

// default constructor
Timer_Class::Timer_Class( timer_descriptor * descr)
    dc58:	b480      	push	{r7}
    dc5a:	b083      	sub	sp, #12
    dc5c:	af00      	add	r7, sp, #0
    dc5e:	6078      	str	r0, [r7, #4]
    dc60:	6039      	str	r1, [r7, #0]
{
	timer_descr=descr;
    dc62:	687b      	ldr	r3, [r7, #4]
    dc64:	683a      	ldr	r2, [r7, #0]
    dc66:	60da      	str	r2, [r3, #12]
	timer_descr->tasks.head=NULL;
    dc68:	687b      	ldr	r3, [r7, #4]
    dc6a:	68db      	ldr	r3, [r3, #12]
    dc6c:	2200      	movs	r2, #0
    dc6e:	619a      	str	r2, [r3, #24]
	ptrTimerClass=this;
    dc70:	4a06      	ldr	r2, [pc, #24]	; (dc8c <_ZN11Timer_ClassC1EP16timer_descriptor+0x34>)
    dc72:	687b      	ldr	r3, [r7, #4]
    dc74:	6013      	str	r3, [r2, #0]
	clockCycles=1024;
    dc76:	687b      	ldr	r3, [r7, #4]
    dc78:	f44f 6280 	mov.w	r2, #1024	; 0x400
    dc7c:	615a      	str	r2, [r3, #20]

	//task->cb=task_cb;
} //Timer_Class
    dc7e:	687b      	ldr	r3, [r7, #4]
    dc80:	4618      	mov	r0, r3
    dc82:	370c      	adds	r7, #12
    dc84:	46bd      	mov	sp, r7
    dc86:	bc80      	pop	{r7}
    dc88:	4770      	bx	lr
    dc8a:	bf00      	nop
    dc8c:	200012ec 	.word	0x200012ec

0000dc90 <_ZN11Timer_ClassD1Ev>:
		timer_descr->tasks.head=NULL;
		ptrTimerClass=this;
}

// default destructor
Timer_Class::~Timer_Class()
    dc90:	b480      	push	{r7}
    dc92:	b083      	sub	sp, #12
    dc94:	af00      	add	r7, sp, #0
    dc96:	6078      	str	r0, [r7, #4]
{
	timeout=0;
    dc98:	687b      	ldr	r3, [r7, #4]
    dc9a:	2200      	movs	r2, #0
    dc9c:	705a      	strb	r2, [r3, #1]
} //~Timer_Class
    dc9e:	687b      	ldr	r3, [r7, #4]
    dca0:	4618      	mov	r0, r3
    dca2:	370c      	adds	r7, #12
    dca4:	46bd      	mov	sp, r7
    dca6:	bc80      	pop	{r7}
    dca8:	4770      	bx	lr
	...

0000dcac <_ZL9InitArrayv>:


static void InitArray(){
    dcac:	b480      	push	{r7}
    dcae:	b083      	sub	sp, #12
    dcb0:	af00      	add	r7, sp, #0
	for (int i=1; i<TASK_NUMBER	; i++)
    dcb2:	2301      	movs	r3, #1
    dcb4:	607b      	str	r3, [r7, #4]
    dcb6:	687b      	ldr	r3, [r7, #4]
    dcb8:	2b1f      	cmp	r3, #31
    dcba:	dc34      	bgt.n	dd26 <_ZL9InitArrayv+0x7a>
	{
		taskArray[i].elem.next = (list_element*)NULL;
    dcbc:	491e      	ldr	r1, [pc, #120]	; (dd38 <_ZL9InitArrayv+0x8c>)
    dcbe:	687a      	ldr	r2, [r7, #4]
    dcc0:	4613      	mov	r3, r2
    dcc2:	009b      	lsls	r3, r3, #2
    dcc4:	4413      	add	r3, r2
    dcc6:	009b      	lsls	r3, r3, #2
    dcc8:	440b      	add	r3, r1
    dcca:	2200      	movs	r2, #0
    dccc:	601a      	str	r2, [r3, #0]
		taskArray[i].cb=NULL;
    dcce:	491a      	ldr	r1, [pc, #104]	; (dd38 <_ZL9InitArrayv+0x8c>)
    dcd0:	687a      	ldr	r2, [r7, #4]
    dcd2:	4613      	mov	r3, r2
    dcd4:	009b      	lsls	r3, r3, #2
    dcd6:	4413      	add	r3, r2
    dcd8:	009b      	lsls	r3, r3, #2
    dcda:	440b      	add	r3, r1
    dcdc:	330c      	adds	r3, #12
    dcde:	2200      	movs	r2, #0
    dce0:	601a      	str	r2, [r3, #0]
		taskArray[i-1].elem.next = &taskArray[i].elem;
    dce2:	687b      	ldr	r3, [r7, #4]
    dce4:	1e5a      	subs	r2, r3, #1
    dce6:	6879      	ldr	r1, [r7, #4]
    dce8:	460b      	mov	r3, r1
    dcea:	009b      	lsls	r3, r3, #2
    dcec:	440b      	add	r3, r1
    dcee:	009b      	lsls	r3, r3, #2
    dcf0:	4911      	ldr	r1, [pc, #68]	; (dd38 <_ZL9InitArrayv+0x8c>)
    dcf2:	4419      	add	r1, r3
    dcf4:	4810      	ldr	r0, [pc, #64]	; (dd38 <_ZL9InitArrayv+0x8c>)
    dcf6:	4613      	mov	r3, r2
    dcf8:	009b      	lsls	r3, r3, #2
    dcfa:	4413      	add	r3, r2
    dcfc:	009b      	lsls	r3, r3, #2
    dcfe:	4403      	add	r3, r0
    dd00:	6019      	str	r1, [r3, #0]
		listTimerElements[i].next = (list_element*)NULL;
    dd02:	4a0e      	ldr	r2, [pc, #56]	; (dd3c <_ZL9InitArrayv+0x90>)
    dd04:	687b      	ldr	r3, [r7, #4]
    dd06:	2100      	movs	r1, #0
    dd08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		listTimerElements[i-1].next = &listTimerElements[i];
    dd0c:	687b      	ldr	r3, [r7, #4]
    dd0e:	3b01      	subs	r3, #1
    dd10:	687a      	ldr	r2, [r7, #4]
    dd12:	0092      	lsls	r2, r2, #2
    dd14:	4909      	ldr	r1, [pc, #36]	; (dd3c <_ZL9InitArrayv+0x90>)
    dd16:	440a      	add	r2, r1
    dd18:	4908      	ldr	r1, [pc, #32]	; (dd3c <_ZL9InitArrayv+0x90>)
    dd1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=1; i<TASK_NUMBER	; i++)
    dd1e:	687b      	ldr	r3, [r7, #4]
    dd20:	3301      	adds	r3, #1
    dd22:	607b      	str	r3, [r7, #4]
    dd24:	e7c7      	b.n	dcb6 <_ZL9InitArrayv+0xa>
	}
	
	arrayInitiated=true;
    dd26:	4b06      	ldr	r3, [pc, #24]	; (dd40 <_ZL9InitArrayv+0x94>)
    dd28:	2201      	movs	r2, #1
    dd2a:	701a      	strb	r2, [r3, #0]
		
}
    dd2c:	bf00      	nop
    dd2e:	370c      	adds	r7, #12
    dd30:	46bd      	mov	sp, r7
    dd32:	bc80      	pop	{r7}
    dd34:	4770      	bx	lr
    dd36:	bf00      	nop
    dd38:	200012f0 	.word	0x200012f0
    dd3c:	20001570 	.word	0x20001570
    dd40:	200015f0 	.word	0x200015f0

0000dd44 <_ZN11Timer_Class4InitEv>:

void Timer_Class::Init(timer_descriptor * descr){
	Set_descriptor(descr);
	ticks=0;
}
bool Timer_Class::Init(void){
    dd44:	b580      	push	{r7, lr}
    dd46:	b082      	sub	sp, #8
    dd48:	af00      	add	r7, sp, #0
    dd4a:	6078      	str	r0, [r7, #4]
	ticks=0;
    dd4c:	687b      	ldr	r3, [r7, #4]
    dd4e:	2200      	movs	r2, #0
    dd50:	609a      	str	r2, [r3, #8]
	if (!arrayInitiated)
    dd52:	4b0d      	ldr	r3, [pc, #52]	; (dd88 <_ZN11Timer_Class4InitEv+0x44>)
    dd54:	781b      	ldrb	r3, [r3, #0]
    dd56:	f083 0301 	eor.w	r3, r3, #1
    dd5a:	b2db      	uxtb	r3, r3
    dd5c:	2b00      	cmp	r3, #0
    dd5e:	d001      	beq.n	dd64 <_ZN11Timer_Class4InitEv+0x20>
	{
		InitArray();
    dd60:	4b0a      	ldr	r3, [pc, #40]	; (dd8c <_ZN11Timer_Class4InitEv+0x48>)
    dd62:	4798      	blx	r3
	}
	//add_periodic_task(FUNC_PTR(CountTicks),1);
	isOK=Start()==ERR_NONE;
    dd64:	6878      	ldr	r0, [r7, #4]
    dd66:	4b0a      	ldr	r3, [pc, #40]	; (dd90 <_ZN11Timer_Class4InitEv+0x4c>)
    dd68:	4798      	blx	r3
    dd6a:	4603      	mov	r3, r0
    dd6c:	2b00      	cmp	r3, #0
    dd6e:	bf0c      	ite	eq
    dd70:	2301      	moveq	r3, #1
    dd72:	2300      	movne	r3, #0
    dd74:	b2da      	uxtb	r2, r3
    dd76:	687b      	ldr	r3, [r7, #4]
    dd78:	709a      	strb	r2, [r3, #2]
	return isOK;
    dd7a:	687b      	ldr	r3, [r7, #4]
    dd7c:	789b      	ldrb	r3, [r3, #2]
    dd7e:	b2db      	uxtb	r3, r3
}
    dd80:	4618      	mov	r0, r3
    dd82:	3708      	adds	r7, #8
    dd84:	46bd      	mov	sp, r7
    dd86:	bd80      	pop	{r7, pc}
    dd88:	200015f0 	.word	0x200015f0
    dd8c:	0000dcad 	.word	0x0000dcad
    dd90:	0000dd95 	.word	0x0000dd95

0000dd94 <_ZN11Timer_Class5StartEv>:
	
	status=timer_start(timer_descr);
	return status;
	
}
int32_t Timer_Class::Start(void){
    dd94:	b580      	push	{r7, lr}
    dd96:	b084      	sub	sp, #16
    dd98:	af00      	add	r7, sp, #0
    dd9a:	6078      	str	r0, [r7, #4]
	int32_t	status;
		
	status=timer_start(timer_descr);
    dd9c:	687b      	ldr	r3, [r7, #4]
    dd9e:	68db      	ldr	r3, [r3, #12]
    dda0:	4618      	mov	r0, r3
    dda2:	4b04      	ldr	r3, [pc, #16]	; (ddb4 <_ZN11Timer_Class5StartEv+0x20>)
    dda4:	4798      	blx	r3
    dda6:	60f8      	str	r0, [r7, #12]
	return status;
    dda8:	68fb      	ldr	r3, [r7, #12]
	
}
    ddaa:	4618      	mov	r0, r3
    ddac:	3710      	adds	r7, #16
    ddae:	46bd      	mov	sp, r7
    ddb0:	bd80      	pop	{r7, pc}
    ddb2:	bf00      	nop
    ddb4:	000032c5 	.word	0x000032c5

0000ddb8 <_ZN11Timer_Class4StopEv>:

int32_t Timer_Class::Stop(void){
    ddb8:	b580      	push	{r7, lr}
    ddba:	b084      	sub	sp, #16
    ddbc:	af00      	add	r7, sp, #0
    ddbe:	6078      	str	r0, [r7, #4]
	int32_t status;	
	status=timer_stop(timer_descr);
    ddc0:	687b      	ldr	r3, [r7, #4]
    ddc2:	68db      	ldr	r3, [r3, #12]
    ddc4:	4618      	mov	r0, r3
    ddc6:	4b05      	ldr	r3, [pc, #20]	; (dddc <_ZN11Timer_Class4StopEv+0x24>)
    ddc8:	4798      	blx	r3
    ddca:	60f8      	str	r0, [r7, #12]
	timeout=0;
    ddcc:	687b      	ldr	r3, [r7, #4]
    ddce:	2200      	movs	r2, #0
    ddd0:	705a      	strb	r2, [r3, #1]
	return status;
    ddd2:	68fb      	ldr	r3, [r7, #12]
}
    ddd4:	4618      	mov	r0, r3
    ddd6:	3710      	adds	r7, #16
    ddd8:	46bd      	mov	sp, r7
    ddda:	bd80      	pop	{r7, pc}
    dddc:	0000332d 	.word	0x0000332d

0000dde0 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode>:
	task->mode     = TIMER_TASK_REPEAT;
	status=timer_add_task(timer_descr, task);
	
	return status;
}
int32_t Timer_Class::Add_task(FUNC_PTR func,uint32_t interval,timer_task_mode modeTask){
    dde0:	b580      	push	{r7, lr}
    dde2:	b086      	sub	sp, #24
    dde4:	af00      	add	r7, sp, #0
    dde6:	60f8      	str	r0, [r7, #12]
    dde8:	60b9      	str	r1, [r7, #8]
    ddea:	607a      	str	r2, [r7, #4]
    ddec:	70fb      	strb	r3, [r7, #3]
	int32_t	status;
	ChooseAvailableTimerTask(func);
    ddee:	68b9      	ldr	r1, [r7, #8]
    ddf0:	68f8      	ldr	r0, [r7, #12]
    ddf2:	4b0e      	ldr	r3, [pc, #56]	; (de2c <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x4c>)
    ddf4:	4798      	blx	r3
//	ChooseAvailableTimerTask();
	task->interval = interval;
    ddf6:	68fb      	ldr	r3, [r7, #12]
    ddf8:	699b      	ldr	r3, [r3, #24]
    ddfa:	687a      	ldr	r2, [r7, #4]
    ddfc:	609a      	str	r2, [r3, #8]
	task->cb       = (timer_cb_t)func;
    ddfe:	68fb      	ldr	r3, [r7, #12]
    de00:	699b      	ldr	r3, [r3, #24]
    de02:	68ba      	ldr	r2, [r7, #8]
    de04:	60da      	str	r2, [r3, #12]
	task->mode     = modeTask;
    de06:	68fb      	ldr	r3, [r7, #12]
    de08:	699b      	ldr	r3, [r3, #24]
    de0a:	78fa      	ldrb	r2, [r7, #3]
    de0c:	741a      	strb	r2, [r3, #16]
	status=timer_add_task(timer_descr, task);
    de0e:	68fb      	ldr	r3, [r7, #12]
    de10:	68da      	ldr	r2, [r3, #12]
    de12:	68fb      	ldr	r3, [r7, #12]
    de14:	699b      	ldr	r3, [r3, #24]
    de16:	4619      	mov	r1, r3
    de18:	4610      	mov	r0, r2
    de1a:	4b05      	ldr	r3, [pc, #20]	; (de30 <_ZN11Timer_Class8Add_taskEPFvvEm15timer_task_mode+0x50>)
    de1c:	4798      	blx	r3
    de1e:	6178      	str	r0, [r7, #20]
	
	return status;
    de20:	697b      	ldr	r3, [r7, #20]
}
    de22:	4618      	mov	r0, r3
    de24:	3718      	adds	r7, #24
    de26:	46bd      	mov	sp, r7
    de28:	bd80      	pop	{r7, pc}
    de2a:	bf00      	nop
    de2c:	0000df9d 	.word	0x0000df9d
    de30:	00003399 	.word	0x00003399

0000de34 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm>:
		status=timer_start(timer_descr);
	}
	return status;
}

int32_t Timer_Class::Add_periodic_task(FUNC_PTR func,uint32_t interval){
    de34:	b590      	push	{r4, r7, lr}
    de36:	b087      	sub	sp, #28
    de38:	af00      	add	r7, sp, #0
    de3a:	60f8      	str	r0, [r7, #12]
    de3c:	60b9      	str	r1, [r7, #8]
    de3e:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_REPEAT);
    de40:	2301      	movs	r3, #1
    de42:	687a      	ldr	r2, [r7, #4]
    de44:	68b9      	ldr	r1, [r7, #8]
    de46:	68f8      	ldr	r0, [r7, #12]
    de48:	4c03      	ldr	r4, [pc, #12]	; (de58 <_ZN11Timer_Class17Add_periodic_taskEPFvvEm+0x24>)
    de4a:	47a0      	blx	r4
    de4c:	6178      	str	r0, [r7, #20]
		return status;
    de4e:	697b      	ldr	r3, [r7, #20]
}
    de50:	4618      	mov	r0, r3
    de52:	371c      	adds	r7, #28
    de54:	46bd      	mov	sp, r7
    de56:	bd90      	pop	{r4, r7, pc}
    de58:	0000dde1 	.word	0x0000dde1

0000de5c <_ZN11Timer_Class11Remove_taskEv>:
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
	status=timer_start(timer_descr);
	return status;
}

void	Timer_Class::Remove_task(void){
    de5c:	b580      	push	{r7, lr}
    de5e:	b082      	sub	sp, #8
    de60:	af00      	add	r7, sp, #0
    de62:	6078      	str	r0, [r7, #4]
	
	timer_remove_task(timer_descr, task);
    de64:	687b      	ldr	r3, [r7, #4]
    de66:	68da      	ldr	r2, [r3, #12]
    de68:	687b      	ldr	r3, [r7, #4]
    de6a:	699b      	ldr	r3, [r3, #24]
    de6c:	4619      	mov	r1, r3
    de6e:	4610      	mov	r0, r2
    de70:	4b04      	ldr	r3, [pc, #16]	; (de84 <_ZN11Timer_Class11Remove_taskEv+0x28>)
    de72:	4798      	blx	r3
	task->cb=NULL;
    de74:	687b      	ldr	r3, [r7, #4]
    de76:	699b      	ldr	r3, [r3, #24]
    de78:	2200      	movs	r2, #0
    de7a:	60da      	str	r2, [r3, #12]
}
    de7c:	bf00      	nop
    de7e:	3708      	adds	r7, #8
    de80:	46bd      	mov	sp, r7
    de82:	bd80      	pop	{r7, pc}
    de84:	0000349d 	.word	0x0000349d

0000de88 <_ZN11Timer_Class11Remove_taskEPFvvE>:

void	Timer_Class::Remove_task(FUNC_PTR func){
    de88:	b580      	push	{r7, lr}
    de8a:	b082      	sub	sp, #8
    de8c:	af00      	add	r7, sp, #0
    de8e:	6078      	str	r0, [r7, #4]
    de90:	6039      	str	r1, [r7, #0]
	GetTaskFunction(func);
    de92:	6839      	ldr	r1, [r7, #0]
    de94:	6878      	ldr	r0, [r7, #4]
    de96:	4b0f      	ldr	r3, [pc, #60]	; (ded4 <_ZN11Timer_Class11Remove_taskEPFvvE+0x4c>)
    de98:	4798      	blx	r3
	
	if (is_list_element(&timer_descr->tasks, task))
    de9a:	687b      	ldr	r3, [r7, #4]
    de9c:	68db      	ldr	r3, [r3, #12]
    de9e:	f103 0218 	add.w	r2, r3, #24
    dea2:	687b      	ldr	r3, [r7, #4]
    dea4:	699b      	ldr	r3, [r3, #24]
    dea6:	4619      	mov	r1, r3
    dea8:	4610      	mov	r0, r2
    deaa:	4b0b      	ldr	r3, [pc, #44]	; (ded8 <_ZN11Timer_Class11Remove_taskEPFvvE+0x50>)
    deac:	4798      	blx	r3
    deae:	4603      	mov	r3, r0
    deb0:	2b00      	cmp	r3, #0
    deb2:	d007      	beq.n	dec4 <_ZN11Timer_Class11Remove_taskEPFvvE+0x3c>
	{
		timer_remove_task(timer_descr, task);
    deb4:	687b      	ldr	r3, [r7, #4]
    deb6:	68da      	ldr	r2, [r3, #12]
    deb8:	687b      	ldr	r3, [r7, #4]
    deba:	699b      	ldr	r3, [r3, #24]
    debc:	4619      	mov	r1, r3
    debe:	4610      	mov	r0, r2
    dec0:	4b06      	ldr	r3, [pc, #24]	; (dedc <_ZN11Timer_Class11Remove_taskEPFvvE+0x54>)
    dec2:	4798      	blx	r3
	else
	{
		
	}

	task->cb=NULL;
    dec4:	687b      	ldr	r3, [r7, #4]
    dec6:	699b      	ldr	r3, [r3, #24]
    dec8:	2200      	movs	r2, #0
    deca:	60da      	str	r2, [r3, #12]
}
    decc:	bf00      	nop
    dece:	3708      	adds	r7, #8
    ded0:	46bd      	mov	sp, r7
    ded2:	bd80      	pop	{r7, pc}
    ded4:	0000e01d 	.word	0x0000e01d
    ded8:	00004085 	.word	0x00004085
    dedc:	0000349d 	.word	0x0000349d

0000dee0 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm>:

uint32_t	Timer_Class::Get_ticks(void){
	
		return ticks;
}
int32_t Timer_Class::Start_oneShot_task(FUNC_PTR func,uint32_t interval){
    dee0:	b590      	push	{r4, r7, lr}
    dee2:	b087      	sub	sp, #28
    dee4:	af00      	add	r7, sp, #0
    dee6:	60f8      	str	r0, [r7, #12]
    dee8:	60b9      	str	r1, [r7, #8]
    deea:	607a      	str	r2, [r7, #4]
	int32_t	status;
	status=Add_task(func,interval,TIMER_TASK_ONE_SHOT);
    deec:	2300      	movs	r3, #0
    deee:	687a      	ldr	r2, [r7, #4]
    def0:	68b9      	ldr	r1, [r7, #8]
    def2:	68f8      	ldr	r0, [r7, #12]
    def4:	4c0c      	ldr	r4, [pc, #48]	; (df28 <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x48>)
    def6:	47a0      	blx	r4
    def8:	6178      	str	r0, [r7, #20]
	if (timer_descr->func->is_timer_started(&timer_descr->device))
    defa:	68fb      	ldr	r3, [r7, #12]
    defc:	68db      	ldr	r3, [r3, #12]
    defe:	681b      	ldr	r3, [r3, #0]
    df00:	699b      	ldr	r3, [r3, #24]
    df02:	68fa      	ldr	r2, [r7, #12]
    df04:	68d2      	ldr	r2, [r2, #12]
    df06:	3204      	adds	r2, #4
    df08:	4610      	mov	r0, r2
    df0a:	4798      	blx	r3
    df0c:	4603      	mov	r3, r0
    df0e:	2b00      	cmp	r3, #0
    df10:	d105      	bne.n	df1e <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x3e>
	{
	}else{
		status=timer_start(timer_descr);
    df12:	68fb      	ldr	r3, [r7, #12]
    df14:	68db      	ldr	r3, [r3, #12]
    df16:	4618      	mov	r0, r3
    df18:	4b04      	ldr	r3, [pc, #16]	; (df2c <_ZN11Timer_Class18Start_oneShot_taskEPFvvEm+0x4c>)
    df1a:	4798      	blx	r3
    df1c:	6178      	str	r0, [r7, #20]
	}
	
	return status;
    df1e:	697b      	ldr	r3, [r7, #20]
}
    df20:	4618      	mov	r0, r3
    df22:	371c      	adds	r7, #28
    df24:	46bd      	mov	sp, r7
    df26:	bd90      	pop	{r4, r7, pc}
    df28:	0000dde1 	.word	0x0000dde1
    df2c:	000032c5 	.word	0x000032c5

0000df30 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv>:
void	Timer_Class::ChooseAvailableTimerTask(void){
    df30:	b480      	push	{r7}
    df32:	b085      	sub	sp, #20
    df34:	af00      	add	r7, sp, #0
    df36:	6078      	str	r0, [r7, #4]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    df38:	2300      	movs	r3, #0
    df3a:	73fb      	strb	r3, [r7, #15]
    df3c:	7bfb      	ldrb	r3, [r7, #15]
    df3e:	2b1f      	cmp	r3, #31
    df40:	dc23      	bgt.n	df8a <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x5a>
	{	
				
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    df42:	687b      	ldr	r3, [r7, #4]
    df44:	7f1a      	ldrb	r2, [r3, #28]
    df46:	7bfb      	ldrb	r3, [r7, #15]
    df48:	4413      	add	r3, r2
    df4a:	b2db      	uxtb	r3, r3
    df4c:	f003 031f 	and.w	r3, r3, #31
    df50:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==NULL)
    df52:	7bba      	ldrb	r2, [r7, #14]
    df54:	4910      	ldr	r1, [pc, #64]	; (df98 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    df56:	4613      	mov	r3, r2
    df58:	009b      	lsls	r3, r3, #2
    df5a:	4413      	add	r3, r2
    df5c:	009b      	lsls	r3, r3, #2
    df5e:	440b      	add	r3, r1
    df60:	330c      	adds	r3, #12
    df62:	681b      	ldr	r3, [r3, #0]
    df64:	2b00      	cmp	r3, #0
    df66:	d10c      	bne.n	df82 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x52>
		{
			
			task=&taskArray[j];
    df68:	7bba      	ldrb	r2, [r7, #14]
    df6a:	4613      	mov	r3, r2
    df6c:	009b      	lsls	r3, r3, #2
    df6e:	4413      	add	r3, r2
    df70:	009b      	lsls	r3, r3, #2
    df72:	4a09      	ldr	r2, [pc, #36]	; (df98 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    df74:	441a      	add	r2, r3
    df76:	687b      	ldr	r3, [r7, #4]
    df78:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    df7a:	687b      	ldr	r3, [r7, #4]
    df7c:	7bba      	ldrb	r2, [r7, #14]
    df7e:	771a      	strb	r2, [r3, #28]
			return;
    df80:	e006      	b.n	df90 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x60>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    df82:	7bfb      	ldrb	r3, [r7, #15]
    df84:	3301      	adds	r3, #1
    df86:	73fb      	strb	r3, [r7, #15]
    df88:	e7d8      	b.n	df3c <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0xc>
			
		}
	}
	task=&taskArray[0];
    df8a:	687b      	ldr	r3, [r7, #4]
    df8c:	4a02      	ldr	r2, [pc, #8]	; (df98 <_ZN11Timer_Class24ChooseAvailableTimerTaskEv+0x68>)
    df8e:	619a      	str	r2, [r3, #24]

}
    df90:	3714      	adds	r7, #20
    df92:	46bd      	mov	sp, r7
    df94:	bc80      	pop	{r7}
    df96:	4770      	bx	lr
    df98:	200012f0 	.word	0x200012f0

0000df9c <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE>:
void	Timer_Class::ChooseAvailableTimerTask(FUNC_PTR func){
    df9c:	b580      	push	{r7, lr}
    df9e:	b084      	sub	sp, #16
    dfa0:	af00      	add	r7, sp, #0
    dfa2:	6078      	str	r0, [r7, #4]
    dfa4:	6039      	str	r1, [r7, #0]
	uint8_t j;
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dfa6:	2300      	movs	r3, #0
    dfa8:	73fb      	strb	r3, [r7, #15]
    dfaa:	7bfb      	ldrb	r3, [r7, #15]
    dfac:	2b1f      	cmp	r3, #31
    dfae:	dc28      	bgt.n	e002 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x66>
	{
		
		j=(ii+lastTaskIndex)%TASK_NUMBER;
    dfb0:	687b      	ldr	r3, [r7, #4]
    dfb2:	7f1a      	ldrb	r2, [r3, #28]
    dfb4:	7bfb      	ldrb	r3, [r7, #15]
    dfb6:	4413      	add	r3, r2
    dfb8:	b2db      	uxtb	r3, r3
    dfba:	f003 031f 	and.w	r3, r3, #31
    dfbe:	73bb      	strb	r3, [r7, #14]
		if (taskArray[j].cb==(timer_cb_t)func)
    dfc0:	7bba      	ldrb	r2, [r7, #14]
    dfc2:	4913      	ldr	r1, [pc, #76]	; (e010 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    dfc4:	4613      	mov	r3, r2
    dfc6:	009b      	lsls	r3, r3, #2
    dfc8:	4413      	add	r3, r2
    dfca:	009b      	lsls	r3, r3, #2
    dfcc:	440b      	add	r3, r1
    dfce:	330c      	adds	r3, #12
    dfd0:	681a      	ldr	r2, [r3, #0]
    dfd2:	683b      	ldr	r3, [r7, #0]
    dfd4:	429a      	cmp	r2, r3
    dfd6:	d110      	bne.n	dffa <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x5e>
		{
			Remove_task(func);
    dfd8:	6839      	ldr	r1, [r7, #0]
    dfda:	6878      	ldr	r0, [r7, #4]
    dfdc:	4b0d      	ldr	r3, [pc, #52]	; (e014 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x78>)
    dfde:	4798      	blx	r3
			task=&taskArray[j];
    dfe0:	7bba      	ldrb	r2, [r7, #14]
    dfe2:	4613      	mov	r3, r2
    dfe4:	009b      	lsls	r3, r3, #2
    dfe6:	4413      	add	r3, r2
    dfe8:	009b      	lsls	r3, r3, #2
    dfea:	4a09      	ldr	r2, [pc, #36]	; (e010 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x74>)
    dfec:	441a      	add	r2, r3
    dfee:	687b      	ldr	r3, [r7, #4]
    dff0:	619a      	str	r2, [r3, #24]
			lastTaskIndex=j;
    dff2:	687b      	ldr	r3, [r7, #4]
    dff4:	7bba      	ldrb	r2, [r7, #14]
    dff6:	771a      	strb	r2, [r3, #28]
			return;
    dff8:	e006      	b.n	e008 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x6c>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    dffa:	7bfb      	ldrb	r3, [r7, #15]
    dffc:	3301      	adds	r3, #1
    dffe:	73fb      	strb	r3, [r7, #15]
    e000:	e7d3      	b.n	dfaa <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0xe>
			
		}
	}
	ChooseAvailableTimerTask();
    e002:	6878      	ldr	r0, [r7, #4]
    e004:	4b04      	ldr	r3, [pc, #16]	; (e018 <_ZN11Timer_Class24ChooseAvailableTimerTaskEPFvvE+0x7c>)
    e006:	4798      	blx	r3
	//task=&taskArray[0];

}
    e008:	3710      	adds	r7, #16
    e00a:	46bd      	mov	sp, r7
    e00c:	bd80      	pop	{r7, pc}
    e00e:	bf00      	nop
    e010:	200012f0 	.word	0x200012f0
    e014:	0000de89 	.word	0x0000de89
    e018:	0000df31 	.word	0x0000df31

0000e01c <_ZN11Timer_Class15GetTaskFunctionEPFvvE>:
void	Timer_Class::GetTaskFunction(FUNC_PTR func){
    e01c:	b480      	push	{r7}
    e01e:	b085      	sub	sp, #20
    e020:	af00      	add	r7, sp, #0
    e022:	6078      	str	r0, [r7, #4]
    e024:	6039      	str	r1, [r7, #0]
	
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e026:	2300      	movs	r3, #0
    e028:	73fb      	strb	r3, [r7, #15]
    e02a:	7bfb      	ldrb	r3, [r7, #15]
    e02c:	2b1f      	cmp	r3, #31
    e02e:	dc19      	bgt.n	e064 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x48>
	{
		if (taskArray[ii].cb==(timer_cb_t)func)
    e030:	7bfa      	ldrb	r2, [r7, #15]
    e032:	490f      	ldr	r1, [pc, #60]	; (e070 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    e034:	4613      	mov	r3, r2
    e036:	009b      	lsls	r3, r3, #2
    e038:	4413      	add	r3, r2
    e03a:	009b      	lsls	r3, r3, #2
    e03c:	440b      	add	r3, r1
    e03e:	330c      	adds	r3, #12
    e040:	681a      	ldr	r2, [r3, #0]
    e042:	683b      	ldr	r3, [r7, #0]
    e044:	429a      	cmp	r2, r3
    e046:	d109      	bne.n	e05c <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x40>
		{
			
			task=&taskArray[ii];
    e048:	7bfa      	ldrb	r2, [r7, #15]
    e04a:	4613      	mov	r3, r2
    e04c:	009b      	lsls	r3, r3, #2
    e04e:	4413      	add	r3, r2
    e050:	009b      	lsls	r3, r3, #2
    e052:	4a07      	ldr	r2, [pc, #28]	; (e070 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x54>)
    e054:	441a      	add	r2, r3
    e056:	687b      	ldr	r3, [r7, #4]
    e058:	619a      	str	r2, [r3, #24]
			return;
    e05a:	e004      	b.n	e066 <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0x4a>
	for (uint8_t ii = 0; ii < TASK_NUMBER; ii++)
    e05c:	7bfb      	ldrb	r3, [r7, #15]
    e05e:	3301      	adds	r3, #1
    e060:	73fb      	strb	r3, [r7, #15]
    e062:	e7e2      	b.n	e02a <_ZN11Timer_Class15GetTaskFunctionEPFvvE+0xe>
			
		}
	}

	asm("nop");
    e064:	bf00      	nop
}
    e066:	3714      	adds	r7, #20
    e068:	46bd      	mov	sp, r7
    e06a:	bc80      	pop	{r7}
    e06c:	4770      	bx	lr
    e06e:	bf00      	nop
    e070:	200012f0 	.word	0x200012f0

0000e074 <_Z41__static_initialization_and_destruction_0ii>:
    e074:	b580      	push	{r7, lr}
    e076:	b082      	sub	sp, #8
    e078:	af00      	add	r7, sp, #0
    e07a:	6078      	str	r0, [r7, #4]
    e07c:	6039      	str	r1, [r7, #0]
    e07e:	687b      	ldr	r3, [r7, #4]
    e080:	2b01      	cmp	r3, #1
    e082:	d14c      	bne.n	e11e <_Z41__static_initialization_and_destruction_0ii+0xaa>
    e084:	683b      	ldr	r3, [r7, #0]
    e086:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e08a:	4293      	cmp	r3, r2
    e08c:	d147      	bne.n	e11e <_Z41__static_initialization_and_destruction_0ii+0xaa>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e08e:	4926      	ldr	r1, [pc, #152]	; (e128 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    e090:	4826      	ldr	r0, [pc, #152]	; (e12c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e092:	4b27      	ldr	r3, [pc, #156]	; (e130 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e094:	4798      	blx	r3
    e096:	4a27      	ldr	r2, [pc, #156]	; (e134 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e098:	4927      	ldr	r1, [pc, #156]	; (e138 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e09a:	4824      	ldr	r0, [pc, #144]	; (e12c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    e09c:	4b27      	ldr	r3, [pc, #156]	; (e13c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e09e:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e0a0:	4927      	ldr	r1, [pc, #156]	; (e140 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e0a2:	4828      	ldr	r0, [pc, #160]	; (e144 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e0a4:	4b22      	ldr	r3, [pc, #136]	; (e130 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e0a6:	4798      	blx	r3
    e0a8:	4a22      	ldr	r2, [pc, #136]	; (e134 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e0aa:	4923      	ldr	r1, [pc, #140]	; (e138 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e0ac:	4825      	ldr	r0, [pc, #148]	; (e144 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e0ae:	4b23      	ldr	r3, [pc, #140]	; (e13c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e0b0:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e0b2:	4925      	ldr	r1, [pc, #148]	; (e148 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e0b4:	4825      	ldr	r0, [pc, #148]	; (e14c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e0b6:	4b1e      	ldr	r3, [pc, #120]	; (e130 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e0b8:	4798      	blx	r3
    e0ba:	4a1e      	ldr	r2, [pc, #120]	; (e134 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e0bc:	491e      	ldr	r1, [pc, #120]	; (e138 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e0be:	4823      	ldr	r0, [pc, #140]	; (e14c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e0c0:	4b1e      	ldr	r3, [pc, #120]	; (e13c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e0c2:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e0c4:	4922      	ldr	r1, [pc, #136]	; (e150 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e0c6:	4823      	ldr	r0, [pc, #140]	; (e154 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e0c8:	4b19      	ldr	r3, [pc, #100]	; (e130 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e0ca:	4798      	blx	r3
    e0cc:	4a19      	ldr	r2, [pc, #100]	; (e134 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e0ce:	491a      	ldr	r1, [pc, #104]	; (e138 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e0d0:	4820      	ldr	r0, [pc, #128]	; (e154 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e0d2:	4b1a      	ldr	r3, [pc, #104]	; (e13c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e0d4:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e0d6:	4920      	ldr	r1, [pc, #128]	; (e158 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e0d8:	4820      	ldr	r0, [pc, #128]	; (e15c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e0da:	4b15      	ldr	r3, [pc, #84]	; (e130 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e0dc:	4798      	blx	r3
    e0de:	4a15      	ldr	r2, [pc, #84]	; (e134 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e0e0:	4915      	ldr	r1, [pc, #84]	; (e138 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e0e2:	481e      	ldr	r0, [pc, #120]	; (e15c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e0e4:	4b15      	ldr	r3, [pc, #84]	; (e13c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e0e6:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e0e8:	491d      	ldr	r1, [pc, #116]	; (e160 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e0ea:	481e      	ldr	r0, [pc, #120]	; (e164 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e0ec:	4b10      	ldr	r3, [pc, #64]	; (e130 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e0ee:	4798      	blx	r3
    e0f0:	4a10      	ldr	r2, [pc, #64]	; (e134 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e0f2:	4911      	ldr	r1, [pc, #68]	; (e138 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e0f4:	481b      	ldr	r0, [pc, #108]	; (e164 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e0f6:	4b11      	ldr	r3, [pc, #68]	; (e13c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e0f8:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e0fa:	491b      	ldr	r1, [pc, #108]	; (e168 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e0fc:	481b      	ldr	r0, [pc, #108]	; (e16c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e0fe:	4b0c      	ldr	r3, [pc, #48]	; (e130 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e100:	4798      	blx	r3
    e102:	4a0c      	ldr	r2, [pc, #48]	; (e134 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e104:	490c      	ldr	r1, [pc, #48]	; (e138 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e106:	4819      	ldr	r0, [pc, #100]	; (e16c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e108:	4b0c      	ldr	r3, [pc, #48]	; (e13c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e10a:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    e10c:	4918      	ldr	r1, [pc, #96]	; (e170 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e10e:	4819      	ldr	r0, [pc, #100]	; (e174 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e110:	4b07      	ldr	r3, [pc, #28]	; (e130 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    e112:	4798      	blx	r3
    e114:	4a07      	ldr	r2, [pc, #28]	; (e134 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    e116:	4908      	ldr	r1, [pc, #32]	; (e138 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e118:	4816      	ldr	r0, [pc, #88]	; (e174 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e11a:	4b08      	ldr	r3, [pc, #32]	; (e13c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e11c:	4798      	blx	r3
    e11e:	bf00      	nop
    e120:	3708      	adds	r7, #8
    e122:	46bd      	mov	sp, r7
    e124:	bd80      	pop	{r7, pc}
    e126:	bf00      	nop
    e128:	20009da8 	.word	0x20009da8
    e12c:	200011ec 	.word	0x200011ec
    e130:	0000dc59 	.word	0x0000dc59
    e134:	20000000 	.word	0x20000000
    e138:	0000dc91 	.word	0x0000dc91
    e13c:	00013091 	.word	0x00013091
    e140:	20009e3c 	.word	0x20009e3c
    e144:	2000120c 	.word	0x2000120c
    e148:	20009f60 	.word	0x20009f60
    e14c:	2000122c 	.word	0x2000122c
    e150:	20009e5c 	.word	0x20009e5c
    e154:	2000124c 	.word	0x2000124c
    e158:	20009f20 	.word	0x20009f20
    e15c:	2000126c 	.word	0x2000126c
    e160:	20009f40 	.word	0x20009f40
    e164:	2000128c 	.word	0x2000128c
    e168:	20009e18 	.word	0x20009e18
    e16c:	200012ac 	.word	0x200012ac
    e170:	20009eb8 	.word	0x20009eb8
    e174:	200012cc 	.word	0x200012cc

0000e178 <_GLOBAL__sub_I_ptrTimerClass>:
    e178:	b580      	push	{r7, lr}
    e17a:	af00      	add	r7, sp, #0
    e17c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e180:	2001      	movs	r0, #1
    e182:	4b01      	ldr	r3, [pc, #4]	; (e188 <_GLOBAL__sub_I_ptrTimerClass+0x10>)
    e184:	4798      	blx	r3
    e186:	bd80      	pop	{r7, pc}
    e188:	0000e075 	.word	0x0000e075

0000e18c <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    e18c:	b480      	push	{r7}
    e18e:	b083      	sub	sp, #12
    e190:	af00      	add	r7, sp, #0
    e192:	6078      	str	r0, [r7, #4]
    e194:	4a05      	ldr	r2, [pc, #20]	; (e1ac <_ZN5PrintC1Ev+0x20>)
    e196:	687b      	ldr	r3, [r7, #4]
    e198:	601a      	str	r2, [r3, #0]
    e19a:	687b      	ldr	r3, [r7, #4]
    e19c:	2200      	movs	r2, #0
    e19e:	605a      	str	r2, [r3, #4]
    e1a0:	687b      	ldr	r3, [r7, #4]
    e1a2:	4618      	mov	r0, r3
    e1a4:	370c      	adds	r7, #12
    e1a6:	46bd      	mov	sp, r7
    e1a8:	bc80      	pop	{r7}
    e1aa:	4770      	bx	lr
    e1ac:	00013e8c 	.word	0x00013e8c

0000e1b0 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    e1b0:	b480      	push	{r7}
    e1b2:	b083      	sub	sp, #12
    e1b4:	af00      	add	r7, sp, #0
    e1b6:	6078      	str	r0, [r7, #4]
    e1b8:	2300      	movs	r3, #0
    e1ba:	4618      	mov	r0, r3
    e1bc:	370c      	adds	r7, #12
    e1be:	46bd      	mov	sp, r7
    e1c0:	bc80      	pop	{r7}
    e1c2:	4770      	bx	lr

0000e1c4 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    e1c4:	b480      	push	{r7}
    e1c6:	b083      	sub	sp, #12
    e1c8:	af00      	add	r7, sp, #0
    e1ca:	6078      	str	r0, [r7, #4]
    e1cc:	bf00      	nop
    e1ce:	370c      	adds	r7, #12
    e1d0:	46bd      	mov	sp, r7
    e1d2:	bc80      	pop	{r7}
    e1d4:	4770      	bx	lr
	...

0000e1d8 <_ZN6StreamC1Ev>:
  public:
    virtual bool available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
	//virtual	uint32_t get_ticks() = 0;
    Stream() {_timeout=1000;}
    e1d8:	b580      	push	{r7, lr}
    e1da:	b082      	sub	sp, #8
    e1dc:	af00      	add	r7, sp, #0
    e1de:	6078      	str	r0, [r7, #4]
    e1e0:	687b      	ldr	r3, [r7, #4]
    e1e2:	4618      	mov	r0, r3
    e1e4:	4b06      	ldr	r3, [pc, #24]	; (e200 <_ZN6StreamC1Ev+0x28>)
    e1e6:	4798      	blx	r3
    e1e8:	4a06      	ldr	r2, [pc, #24]	; (e204 <_ZN6StreamC1Ev+0x2c>)
    e1ea:	687b      	ldr	r3, [r7, #4]
    e1ec:	601a      	str	r2, [r3, #0]
    e1ee:	687b      	ldr	r3, [r7, #4]
    e1f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e1f4:	609a      	str	r2, [r3, #8]
    e1f6:	687b      	ldr	r3, [r7, #4]
    e1f8:	4618      	mov	r0, r3
    e1fa:	3708      	adds	r7, #8
    e1fc:	46bd      	mov	sp, r7
    e1fe:	bd80      	pop	{r7, pc}
    e200:	0000e18d 	.word	0x0000e18d
    e204:	00013e50 	.word	0x00013e50

0000e208 <_ZL10USBTimeoutPK10timer_task>:
/*#include "TimerSerial_Class.h"*/
#include "Timer_Class.h"

CDC_Class	*ptrCDCClass;

static void	USBTimeout(const struct timer_task *const timer_task){
    e208:	b480      	push	{r7}
    e20a:	b083      	sub	sp, #12
    e20c:	af00      	add	r7, sp, #0
    e20e:	6078      	str	r0, [r7, #4]
	ptrCDCClass->timeout=true;
    e210:	4b06      	ldr	r3, [pc, #24]	; (e22c <_ZL10USBTimeoutPK10timer_task+0x24>)
    e212:	681b      	ldr	r3, [r3, #0]
    e214:	2201      	movs	r2, #1
    e216:	749a      	strb	r2, [r3, #18]
	ptrCDCClass->connected=false;
    e218:	4b04      	ldr	r3, [pc, #16]	; (e22c <_ZL10USBTimeoutPK10timer_task+0x24>)
    e21a:	681b      	ldr	r3, [r3, #0]
    e21c:	2200      	movs	r2, #0
    e21e:	741a      	strb	r2, [r3, #16]
	
}
    e220:	bf00      	nop
    e222:	370c      	adds	r7, #12
    e224:	46bd      	mov	sp, r7
    e226:	bc80      	pop	{r7}
    e228:	4770      	bx	lr
    e22a:	bf00      	nop
    e22c:	200016f4 	.word	0x200016f4

0000e230 <_ZL12cb_bulk_readh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool cb_bulk_read(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    e230:	b480      	push	{r7}
    e232:	b083      	sub	sp, #12
    e234:	af00      	add	r7, sp, #0
    e236:	4603      	mov	r3, r0
    e238:	603a      	str	r2, [r7, #0]
    e23a:	71fb      	strb	r3, [r7, #7]
    e23c:	460b      	mov	r3, r1
    e23e:	71bb      	strb	r3, [r7, #6]
	
	ptrCDCClass->rxReady=true;
    e240:	4b08      	ldr	r3, [pc, #32]	; (e264 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e242:	681b      	ldr	r3, [r3, #0]
    e244:	2201      	movs	r2, #1
    e246:	755a      	strb	r2, [r3, #21]
	ptrCDCClass->plugged=true;
    e248:	4b06      	ldr	r3, [pc, #24]	; (e264 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e24a:	681b      	ldr	r3, [r3, #0]
    e24c:	2201      	movs	r2, #1
    e24e:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    e250:	4b04      	ldr	r3, [pc, #16]	; (e264 <_ZL12cb_bulk_readh13usb_xfer_codem+0x34>)
    e252:	681b      	ldr	r3, [r3, #0]
    e254:	2201      	movs	r2, #1
    e256:	741a      	strb	r2, [r3, #16]


	return false;
    e258:	2300      	movs	r3, #0
}
    e25a:	4618      	mov	r0, r3
    e25c:	370c      	adds	r7, #12
    e25e:	46bd      	mov	sp, r7
    e260:	bc80      	pop	{r7}
    e262:	4770      	bx	lr
    e264:	200016f4 	.word	0x200016f4

0000e268 <_ZL13cb_bulk_writeh13usb_xfer_codem>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cb_bulk_write(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    e268:	b480      	push	{r7}
    e26a:	b083      	sub	sp, #12
    e26c:	af00      	add	r7, sp, #0
    e26e:	4603      	mov	r3, r0
    e270:	603a      	str	r2, [r7, #0]
    e272:	71fb      	strb	r3, [r7, #7]
    e274:	460b      	mov	r3, r1
    e276:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	
	ptrCDCClass->txReady=true;
    e278:	4b08      	ldr	r3, [pc, #32]	; (e29c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e27a:	681b      	ldr	r3, [r3, #0]
    e27c:	2201      	movs	r2, #1
    e27e:	751a      	strb	r2, [r3, #20]
	ptrCDCClass->plugged=true;
    e280:	4b06      	ldr	r3, [pc, #24]	; (e29c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e282:	681b      	ldr	r3, [r3, #0]
    e284:	2201      	movs	r2, #1
    e286:	745a      	strb	r2, [r3, #17]
	ptrCDCClass->connected=true;
    e288:	4b04      	ldr	r3, [pc, #16]	; (e29c <_ZL13cb_bulk_writeh13usb_xfer_codem+0x34>)
    e28a:	681b      	ldr	r3, [r3, #0]
    e28c:	2201      	movs	r2, #1
    e28e:	741a      	strb	r2, [r3, #16]

	/* No error. */
	return false;
    e290:	2300      	movs	r3, #0
}
    e292:	4618      	mov	r0, r3
    e294:	370c      	adds	r7, #12
    e296:	46bd      	mov	sp, r7
    e298:	bc80      	pop	{r7}
    e29a:	4770      	bx	lr
    e29c:	200016f4 	.word	0x200016f4

0000e2a0 <_ZL10cb_state_c22usb_cdc_control_signal>:

static bool cb_state_c(usb_cdc_control_signal_t state)
{
    e2a0:	b580      	push	{r7, lr}
    e2a2:	b082      	sub	sp, #8
    e2a4:	af00      	add	r7, sp, #0
    e2a6:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
    e2a8:	793b      	ldrb	r3, [r7, #4]
    e2aa:	f003 0301 	and.w	r3, r3, #1
    e2ae:	b2db      	uxtb	r3, r3
    e2b0:	2b00      	cmp	r3, #0
    e2b2:	d013      	beq.n	e2dc <_ZL10cb_state_c22usb_cdc_control_signal+0x3c>
		/* Callbacks must be registered after endpoint allocation */
	
	cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cb_bulk_read);
    e2b4:	490c      	ldr	r1, [pc, #48]	; (e2e8 <_ZL10cb_state_c22usb_cdc_control_signal+0x48>)
    e2b6:	2000      	movs	r0, #0
    e2b8:	4b0c      	ldr	r3, [pc, #48]	; (e2ec <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    e2ba:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cb_bulk_write);
    e2bc:	490c      	ldr	r1, [pc, #48]	; (e2f0 <_ZL10cb_state_c22usb_cdc_control_signal+0x50>)
    e2be:	2001      	movs	r0, #1
    e2c0:	4b0a      	ldr	r3, [pc, #40]	; (e2ec <_ZL10cb_state_c22usb_cdc_control_signal+0x4c>)
    e2c2:	4798      	blx	r3
		ptrCDCClass->txReady=true;
    e2c4:	4b0b      	ldr	r3, [pc, #44]	; (e2f4 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e2c6:	681b      	ldr	r3, [r3, #0]
    e2c8:	2201      	movs	r2, #1
    e2ca:	751a      	strb	r2, [r3, #20]
		ptrCDCClass->rxReady=true;
    e2cc:	4b09      	ldr	r3, [pc, #36]	; (e2f4 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e2ce:	681b      	ldr	r3, [r3, #0]
    e2d0:	2201      	movs	r2, #1
    e2d2:	755a      	strb	r2, [r3, #21]
		ptrCDCClass->connected=true;
    e2d4:	4b07      	ldr	r3, [pc, #28]	; (e2f4 <_ZL10cb_state_c22usb_cdc_control_signal+0x54>)
    e2d6:	681b      	ldr	r3, [r3, #0]
    e2d8:	2201      	movs	r2, #1
    e2da:	741a      	strb	r2, [r3, #16]
		//ptrCDCClass->terminalStarted=true;
		
	}

	/* No error. */
	return false;
    e2dc:	2300      	movs	r3, #0
}
    e2de:	4618      	mov	r0, r3
    e2e0:	3708      	adds	r7, #8
    e2e2:	46bd      	mov	sp, r7
    e2e4:	bd80      	pop	{r7, pc}
    e2e6:	bf00      	nop
    e2e8:	0000e231 	.word	0x0000e231
    e2ec:	0000cb05 	.word	0x0000cb05
    e2f0:	0000e269 	.word	0x0000e269
    e2f4:	200016f4 	.word	0x200016f4

0000e2f8 <_ZN9CDC_ClassC1Ev>:

// default constructor
CDC_Class::CDC_Class()
    e2f8:	b580      	push	{r7, lr}
    e2fa:	b082      	sub	sp, #8
    e2fc:	af00      	add	r7, sp, #0
    e2fe:	6078      	str	r0, [r7, #4]
    e300:	687b      	ldr	r3, [r7, #4]
    e302:	4618      	mov	r0, r3
    e304:	4b0a      	ldr	r3, [pc, #40]	; (e330 <_ZN9CDC_ClassC1Ev+0x38>)
    e306:	4798      	blx	r3
    e308:	687b      	ldr	r3, [r7, #4]
    e30a:	3310      	adds	r3, #16
    e30c:	4618      	mov	r0, r3
    e30e:	4b09      	ldr	r3, [pc, #36]	; (e334 <_ZN9CDC_ClassC1Ev+0x3c>)
    e310:	4798      	blx	r3
    e312:	4a09      	ldr	r2, [pc, #36]	; (e338 <_ZN9CDC_ClassC1Ev+0x40>)
    e314:	687b      	ldr	r3, [r7, #4]
    e316:	601a      	str	r2, [r3, #0]
{
	_serialPeek=-1;
    e318:	687b      	ldr	r3, [r7, #4]
    e31a:	f04f 32ff 	mov.w	r2, #4294967295
    e31e:	619a      	str	r2, [r3, #24]
	ptrCDCClass=this;
    e320:	4a06      	ldr	r2, [pc, #24]	; (e33c <_ZN9CDC_ClassC1Ev+0x44>)
    e322:	687b      	ldr	r3, [r7, #4]
    e324:	6013      	str	r3, [r2, #0]
	//usb_desc=&single_desc;
} //CDC_Class
    e326:	687b      	ldr	r3, [r7, #4]
    e328:	4618      	mov	r0, r3
    e32a:	3708      	adds	r7, #8
    e32c:	46bd      	mov	sp, r7
    e32e:	bd80      	pop	{r7, pc}
    e330:	0000e1d9 	.word	0x0000e1d9
    e334:	0000ea71 	.word	0x0000ea71
    e338:	00013e20 	.word	0x00013e20
    e33c:	200016f4 	.word	0x200016f4

0000e340 <_ZN9CDC_ClassD1Ev>:
	ptrCDCClass=this;
	usb_desc=usb_d;
} //CDC_Class

// default destructor
CDC_Class::~CDC_Class()
    e340:	b580      	push	{r7, lr}
    e342:	b082      	sub	sp, #8
    e344:	af00      	add	r7, sp, #0
    e346:	6078      	str	r0, [r7, #4]
    e348:	4a06      	ldr	r2, [pc, #24]	; (e364 <_ZN9CDC_ClassD1Ev+0x24>)
    e34a:	687b      	ldr	r3, [r7, #4]
    e34c:	601a      	str	r2, [r3, #0]
    e34e:	687b      	ldr	r3, [r7, #4]
    e350:	3310      	adds	r3, #16
    e352:	4618      	mov	r0, r3
    e354:	4b04      	ldr	r3, [pc, #16]	; (e368 <_ZN9CDC_ClassD1Ev+0x28>)
    e356:	4798      	blx	r3
{
} //~CDC_Class
    e358:	687b      	ldr	r3, [r7, #4]
    e35a:	4618      	mov	r0, r3
    e35c:	3708      	adds	r7, #8
    e35e:	46bd      	mov	sp, r7
    e360:	bd80      	pop	{r7, pc}
    e362:	bf00      	nop
    e364:	00013e20 	.word	0x00013e20
    e368:	0000ea91 	.word	0x0000ea91

0000e36c <_ZN9CDC_Class4InitEv>:

void CDC_Class::Init(void){
    e36c:	b580      	push	{r7, lr}
    e36e:	b082      	sub	sp, #8
    e370:	af00      	add	r7, sp, #0
    e372:	6078      	str	r0, [r7, #4]
	
	OnInit();
    e374:	687b      	ldr	r3, [r7, #4]
    e376:	3310      	adds	r3, #16
    e378:	4618      	mov	r0, r3
    e37a:	4b09      	ldr	r3, [pc, #36]	; (e3a0 <_ZN9CDC_Class4InitEv+0x34>)
    e37c:	4798      	blx	r3
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cb_state_c);
    e37e:	4909      	ldr	r1, [pc, #36]	; (e3a4 <_ZN9CDC_Class4InitEv+0x38>)
    e380:	2003      	movs	r0, #3
    e382:	4b09      	ldr	r3, [pc, #36]	; (e3a8 <_ZN9CDC_Class4InitEv+0x3c>)
    e384:	4798      	blx	r3
	delay_ms(100);
    e386:	2064      	movs	r0, #100	; 0x64
    e388:	4b08      	ldr	r3, [pc, #32]	; (e3ac <_ZN9CDC_Class4InitEv+0x40>)
    e38a:	4798      	blx	r3
		
	if (connected)
    e38c:	687b      	ldr	r3, [r7, #4]
    e38e:	7c1b      	ldrb	r3, [r3, #16]
	{
		//serial<<"*** USB CDC Driver Version: "<<USBSERIALCLASSVERSION<<"."<<USBSERIALCLASSSUBVERSION<<" ***"<<NEWLINE;
	}

	delay_ms(100);
    e390:	2064      	movs	r0, #100	; 0x64
    e392:	4b06      	ldr	r3, [pc, #24]	; (e3ac <_ZN9CDC_Class4InitEv+0x40>)
    e394:	4798      	blx	r3

	

}
    e396:	bf00      	nop
    e398:	3708      	adds	r7, #8
    e39a:	46bd      	mov	sp, r7
    e39c:	bd80      	pop	{r7, pc}
    e39e:	bf00      	nop
    e3a0:	0000eaa5 	.word	0x0000eaa5
    e3a4:	0000e2a1 	.word	0x0000e2a1
    e3a8:	0000cb05 	.word	0x0000cb05
    e3ac:	00002a21 	.word	0x00002a21

0000e3b0 <_ZN9CDC_Class9IsEnabledEv>:

bool CDC_Class::IsEnabled(void){
    e3b0:	b580      	push	{r7, lr}
    e3b2:	b082      	sub	sp, #8
    e3b4:	af00      	add	r7, sp, #0
    e3b6:	6078      	str	r0, [r7, #4]

	return cdcdf_acm_is_enabled();
    e3b8:	4b03      	ldr	r3, [pc, #12]	; (e3c8 <_ZN9CDC_Class9IsEnabledEv+0x18>)
    e3ba:	4798      	blx	r3
    e3bc:	4603      	mov	r3, r0
	
}
    e3be:	4618      	mov	r0, r3
    e3c0:	3708      	adds	r7, #8
    e3c2:	46bd      	mov	sp, r7
    e3c4:	bd80      	pop	{r7, pc}
    e3c6:	bf00      	nop
    e3c8:	0000cb7d 	.word	0x0000cb7d

0000e3cc <_ZN9CDC_Class4peekEv>:

int CDC_Class::peek(void)
{
    e3cc:	b580      	push	{r7, lr}
    e3ce:	b084      	sub	sp, #16
    e3d0:	af00      	add	r7, sp, #0
    e3d2:	6078      	str	r0, [r7, #4]
	uint8_t	r;
	if (_serialPeek != -1)
    e3d4:	687b      	ldr	r3, [r7, #4]
    e3d6:	699b      	ldr	r3, [r3, #24]
    e3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
    e3dc:	bf14      	ite	ne
    e3de:	2301      	movne	r3, #1
    e3e0:	2300      	moveq	r3, #0
    e3e2:	b2db      	uxtb	r3, r3
    e3e4:	2b00      	cmp	r3, #0
    e3e6:	d002      	beq.n	e3ee <_ZN9CDC_Class4peekEv+0x22>
	return _serialPeek;
    e3e8:	687b      	ldr	r3, [r7, #4]
    e3ea:	699b      	ldr	r3, [r3, #24]
    e3ec:	e011      	b.n	e412 <_ZN9CDC_Class4peekEv+0x46>
	_serialPeek = readData(&r,1);
    e3ee:	687b      	ldr	r3, [r7, #4]
    e3f0:	681b      	ldr	r3, [r3, #0]
    e3f2:	331c      	adds	r3, #28
    e3f4:	681b      	ldr	r3, [r3, #0]
    e3f6:	f107 010f 	add.w	r1, r7, #15
    e3fa:	2201      	movs	r2, #1
    e3fc:	6878      	ldr	r0, [r7, #4]
    e3fe:	4798      	blx	r3
    e400:	4602      	mov	r2, r0
    e402:	687b      	ldr	r3, [r7, #4]
    e404:	619a      	str	r2, [r3, #24]
	_serialPeek=(int)r;
    e406:	7bfb      	ldrb	r3, [r7, #15]
    e408:	461a      	mov	r2, r3
    e40a:	687b      	ldr	r3, [r7, #4]
    e40c:	619a      	str	r2, [r3, #24]
	return _serialPeek;
    e40e:	687b      	ldr	r3, [r7, #4]
    e410:	699b      	ldr	r3, [r3, #24]
}
    e412:	4618      	mov	r0, r3
    e414:	3710      	adds	r7, #16
    e416:	46bd      	mov	sp, r7
    e418:	bd80      	pop	{r7, pc}
	...

0000e41c <_ZN9CDC_Class8readDataEPvl>:

int32_t CDC_Class::readData(void* p, int32_t size)
{
    e41c:	b580      	push	{r7, lr}
    e41e:	b086      	sub	sp, #24
    e420:	af00      	add	r7, sp, #0
    e422:	60f8      	str	r0, [r7, #12]
    e424:	60b9      	str	r1, [r7, #8]
    e426:	607a      	str	r2, [r7, #4]
	uint8_t	r;
	if (connected)
    e428:	68fb      	ldr	r3, [r7, #12]
    e42a:	7c1b      	ldrb	r3, [r3, #16]
    e42c:	b2db      	uxtb	r3, r3
    e42e:	2b00      	cmp	r3, #0
    e430:	d02e      	beq.n	e490 <_ZN9CDC_Class8readDataEPvl+0x74>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e432:	687a      	ldr	r2, [r7, #4]
    e434:	4613      	mov	r3, r2
    e436:	009b      	lsls	r3, r3, #2
    e438:	4413      	add	r3, r2
    e43a:	005b      	lsls	r3, r3, #1
    e43c:	461a      	mov	r2, r3
    e43e:	4918      	ldr	r1, [pc, #96]	; (e4a0 <_ZN9CDC_Class8readDataEPvl+0x84>)
    e440:	4818      	ldr	r0, [pc, #96]	; (e4a4 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e442:	4b19      	ldr	r3, [pc, #100]	; (e4a8 <_ZN9CDC_Class8readDataEPvl+0x8c>)
    e444:	4798      	blx	r3
		rxReady=false;
    e446:	68fb      	ldr	r3, [r7, #12]
    e448:	2200      	movs	r2, #0
    e44a:	755a      	strb	r2, [r3, #21]
		r=cdcdf_acm_read((uint8_t *)p, size);
    e44c:	687b      	ldr	r3, [r7, #4]
    e44e:	4619      	mov	r1, r3
    e450:	68b8      	ldr	r0, [r7, #8]
    e452:	4b16      	ldr	r3, [pc, #88]	; (e4ac <_ZN9CDC_Class8readDataEPvl+0x90>)
    e454:	4798      	blx	r3
    e456:	4603      	mov	r3, r0
    e458:	75fb      	strb	r3, [r7, #23]
		while((!rxReady)&&(connected));
    e45a:	68fb      	ldr	r3, [r7, #12]
    e45c:	7d5b      	ldrb	r3, [r3, #21]
    e45e:	b2db      	uxtb	r3, r3
    e460:	f083 0301 	eor.w	r3, r3, #1
    e464:	b2db      	uxtb	r3, r3
    e466:	2b00      	cmp	r3, #0
    e468:	d006      	beq.n	e478 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e46a:	68fb      	ldr	r3, [r7, #12]
    e46c:	7c1b      	ldrb	r3, [r3, #16]
    e46e:	b2db      	uxtb	r3, r3
    e470:	2b00      	cmp	r3, #0
    e472:	d001      	beq.n	e478 <_ZN9CDC_Class8readDataEPvl+0x5c>
    e474:	2301      	movs	r3, #1
    e476:	e000      	b.n	e47a <_ZN9CDC_Class8readDataEPvl+0x5e>
    e478:	2300      	movs	r3, #0
    e47a:	2b00      	cmp	r3, #0
    e47c:	d000      	beq.n	e480 <_ZN9CDC_Class8readDataEPvl+0x64>
    e47e:	e7ec      	b.n	e45a <_ZN9CDC_Class8readDataEPvl+0x3e>
		usbTerminalTimer.Stop();
    e480:	4808      	ldr	r0, [pc, #32]	; (e4a4 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e482:	4b0b      	ldr	r3, [pc, #44]	; (e4b0 <_ZN9CDC_Class8readDataEPvl+0x94>)
    e484:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e486:	4906      	ldr	r1, [pc, #24]	; (e4a0 <_ZN9CDC_Class8readDataEPvl+0x84>)
    e488:	4806      	ldr	r0, [pc, #24]	; (e4a4 <_ZN9CDC_Class8readDataEPvl+0x88>)
    e48a:	4b0a      	ldr	r3, [pc, #40]	; (e4b4 <_ZN9CDC_Class8readDataEPvl+0x98>)
    e48c:	4798      	blx	r3
    e48e:	e001      	b.n	e494 <_ZN9CDC_Class8readDataEPvl+0x78>
	} 
	else
	{
		r=0;
    e490:	2300      	movs	r3, #0
    e492:	75fb      	strb	r3, [r7, #23]
	}

	return r;
    e494:	7dfb      	ldrb	r3, [r7, #23]
}
    e496:	4618      	mov	r0, r3
    e498:	3718      	adds	r7, #24
    e49a:	46bd      	mov	sp, r7
    e49c:	bd80      	pop	{r7, pc}
    e49e:	bf00      	nop
    e4a0:	0000e209 	.word	0x0000e209
    e4a4:	20001694 	.word	0x20001694
    e4a8:	0000dee1 	.word	0x0000dee1
    e4ac:	0000ca59 	.word	0x0000ca59
    e4b0:	0000ddb9 	.word	0x0000ddb9
    e4b4:	0000de89 	.word	0x0000de89

0000e4b8 <_ZN9CDC_Class12readDataAsynEPvl>:
int32_t CDC_Class::readDataAsyn(void* p, int32_t size)
{
    e4b8:	b580      	push	{r7, lr}
    e4ba:	b086      	sub	sp, #24
    e4bc:	af00      	add	r7, sp, #0
    e4be:	60f8      	str	r0, [r7, #12]
    e4c0:	60b9      	str	r1, [r7, #8]
    e4c2:	607a      	str	r2, [r7, #4]
	uint32_t	r;
	rxReady=false;
    e4c4:	68fb      	ldr	r3, [r7, #12]
    e4c6:	2200      	movs	r2, #0
    e4c8:	755a      	strb	r2, [r3, #21]
	r=cdcdf_acm_read((uint8_t *)p, size);
    e4ca:	687b      	ldr	r3, [r7, #4]
    e4cc:	4619      	mov	r1, r3
    e4ce:	68b8      	ldr	r0, [r7, #8]
    e4d0:	4b04      	ldr	r3, [pc, #16]	; (e4e4 <_ZN9CDC_Class12readDataAsynEPvl+0x2c>)
    e4d2:	4798      	blx	r3
    e4d4:	4603      	mov	r3, r0
    e4d6:	617b      	str	r3, [r7, #20]
	return r;
    e4d8:	697b      	ldr	r3, [r7, #20]
}
    e4da:	4618      	mov	r0, r3
    e4dc:	3718      	adds	r7, #24
    e4de:	46bd      	mov	sp, r7
    e4e0:	bd80      	pop	{r7, pc}
    e4e2:	bf00      	nop
    e4e4:	0000ca59 	.word	0x0000ca59

0000e4e8 <_ZN9CDC_Class4readEv>:
int CDC_Class::read(void)
{
    e4e8:	b580      	push	{r7, lr}
    e4ea:	b084      	sub	sp, #16
    e4ec:	af00      	add	r7, sp, #0
    e4ee:	6078      	str	r0, [r7, #4]
	uint8_t	p;
	rxReady=false;
    e4f0:	687b      	ldr	r3, [r7, #4]
    e4f2:	2200      	movs	r2, #0
    e4f4:	755a      	strb	r2, [r3, #21]
	cdcdf_acm_read(&p, 1);
    e4f6:	f107 030f 	add.w	r3, r7, #15
    e4fa:	2101      	movs	r1, #1
    e4fc:	4618      	mov	r0, r3
    e4fe:	4b08      	ldr	r3, [pc, #32]	; (e520 <_ZN9CDC_Class4readEv+0x38>)
    e500:	4798      	blx	r3
	while(!rxReady);
    e502:	687b      	ldr	r3, [r7, #4]
    e504:	7d5b      	ldrb	r3, [r3, #21]
    e506:	b2db      	uxtb	r3, r3
    e508:	f083 0301 	eor.w	r3, r3, #1
    e50c:	b2db      	uxtb	r3, r3
    e50e:	2b00      	cmp	r3, #0
    e510:	d000      	beq.n	e514 <_ZN9CDC_Class4readEv+0x2c>
    e512:	e7f6      	b.n	e502 <_ZN9CDC_Class4readEv+0x1a>
	return (int)p;
    e514:	7bfb      	ldrb	r3, [r7, #15]
}
    e516:	4618      	mov	r0, r3
    e518:	3710      	adds	r7, #16
    e51a:	46bd      	mov	sp, r7
    e51c:	bd80      	pop	{r7, pc}
    e51e:	bf00      	nop
    e520:	0000ca59 	.word	0x0000ca59

0000e524 <_ZN9CDC_Class5flushEv>:
	{
		r=0;
	}
	return r;
}
void	CDC_Class::flush(void){
    e524:	b580      	push	{r7, lr}
    e526:	b082      	sub	sp, #8
    e528:	af00      	add	r7, sp, #0
    e52a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_write((uint8_t *)cdc_buffer, sizeof(cdc_buffer));
    e52c:	687b      	ldr	r3, [r7, #4]
    e52e:	331c      	adds	r3, #28
    e530:	2140      	movs	r1, #64	; 0x40
    e532:	4618      	mov	r0, r3
    e534:	4b02      	ldr	r3, [pc, #8]	; (e540 <_ZN9CDC_Class5flushEv+0x1c>)
    e536:	4798      	blx	r3
}
    e538:	bf00      	nop
    e53a:	3708      	adds	r7, #8
    e53c:	46bd      	mov	sp, r7
    e53e:	bd80      	pop	{r7, pc}
    e540:	0000ca9d 	.word	0x0000ca9d

0000e544 <_ZN9CDC_Class5clearEv>:

void	CDC_Class::clear(void){
    e544:	b580      	push	{r7, lr}
    e546:	b082      	sub	sp, #8
    e548:	af00      	add	r7, sp, #0
    e54a:	6078      	str	r0, [r7, #4]
	cdcdf_acm_stop_xfer();
    e54c:	4b02      	ldr	r3, [pc, #8]	; (e558 <_ZN9CDC_Class5clearEv+0x14>)
    e54e:	4798      	blx	r3
}
    e550:	bf00      	nop
    e552:	3708      	adds	r7, #8
    e554:	46bd      	mov	sp, r7
    e556:	bd80      	pop	{r7, pc}
    e558:	0000cae1 	.word	0x0000cae1

0000e55c <_ZN9CDC_Class5writeEh>:
size_t CDC_Class::write(uint8_t c) {
    e55c:	b580      	push	{r7, lr}
    e55e:	b082      	sub	sp, #8
    e560:	af00      	add	r7, sp, #0
    e562:	6078      	str	r0, [r7, #4]
    e564:	460b      	mov	r3, r1
    e566:	70fb      	strb	r3, [r7, #3]
	if (connected){
    e568:	687b      	ldr	r3, [r7, #4]
    e56a:	7c1b      	ldrb	r3, [r3, #16]
    e56c:	b2db      	uxtb	r3, r3
    e56e:	2b00      	cmp	r3, #0
    e570:	d012      	beq.n	e598 <_ZN9CDC_Class5writeEh+0x3c>
		while(!txReady);
    e572:	687b      	ldr	r3, [r7, #4]
    e574:	7d1b      	ldrb	r3, [r3, #20]
    e576:	b2db      	uxtb	r3, r3
    e578:	f083 0301 	eor.w	r3, r3, #1
    e57c:	b2db      	uxtb	r3, r3
    e57e:	2b00      	cmp	r3, #0
    e580:	d000      	beq.n	e584 <_ZN9CDC_Class5writeEh+0x28>
    e582:	e7f6      	b.n	e572 <_ZN9CDC_Class5writeEh+0x16>
		return writeData(&c, 1);
    e584:	687b      	ldr	r3, [r7, #4]
    e586:	681b      	ldr	r3, [r3, #0]
    e588:	3324      	adds	r3, #36	; 0x24
    e58a:	681b      	ldr	r3, [r3, #0]
    e58c:	1cf9      	adds	r1, r7, #3
    e58e:	2201      	movs	r2, #1
    e590:	6878      	ldr	r0, [r7, #4]
    e592:	4798      	blx	r3
    e594:	4603      	mov	r3, r0
    e596:	e000      	b.n	e59a <_ZN9CDC_Class5writeEh+0x3e>
	}else{
		return 0;
    e598:	2300      	movs	r3, #0
	}
		
}
    e59a:	4618      	mov	r0, r3
    e59c:	3708      	adds	r7, #8
    e59e:	46bd      	mov	sp, r7
    e5a0:	bd80      	pop	{r7, pc}
	...

0000e5a4 <_ZN9CDC_Class9writeDataEPKvl>:
int32_t CDC_Class::writeData(const void *buffer, int32_t size)
{
    e5a4:	b580      	push	{r7, lr}
    e5a6:	b086      	sub	sp, #24
    e5a8:	af00      	add	r7, sp, #0
    e5aa:	60f8      	str	r0, [r7, #12]
    e5ac:	60b9      	str	r1, [r7, #8]
    e5ae:	607a      	str	r2, [r7, #4]
	
	
	if (connected)
    e5b0:	68fb      	ldr	r3, [r7, #12]
    e5b2:	7c1b      	ldrb	r3, [r3, #16]
    e5b4:	b2db      	uxtb	r3, r3
    e5b6:	2b00      	cmp	r3, #0
    e5b8:	d02f      	beq.n	e61a <_ZN9CDC_Class9writeDataEPKvl+0x76>
	{
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e5ba:	687a      	ldr	r2, [r7, #4]
    e5bc:	4613      	mov	r3, r2
    e5be:	009b      	lsls	r3, r3, #2
    e5c0:	4413      	add	r3, r2
    e5c2:	005b      	lsls	r3, r3, #1
    e5c4:	461a      	mov	r2, r3
    e5c6:	4917      	ldr	r1, [pc, #92]	; (e624 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e5c8:	4817      	ldr	r0, [pc, #92]	; (e628 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e5ca:	4b18      	ldr	r3, [pc, #96]	; (e62c <_ZN9CDC_Class9writeDataEPKvl+0x88>)
    e5cc:	4798      	blx	r3
		txReady=false;
    e5ce:	68fb      	ldr	r3, [r7, #12]
    e5d0:	2200      	movs	r2, #0
    e5d2:	751a      	strb	r2, [r3, #20]
		uint32_t r = (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e5d4:	687b      	ldr	r3, [r7, #4]
    e5d6:	4619      	mov	r1, r3
    e5d8:	68b8      	ldr	r0, [r7, #8]
    e5da:	4b15      	ldr	r3, [pc, #84]	; (e630 <_ZN9CDC_Class9writeDataEPKvl+0x8c>)
    e5dc:	4798      	blx	r3
    e5de:	4603      	mov	r3, r0
    e5e0:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected)){
    e5e2:	68fb      	ldr	r3, [r7, #12]
    e5e4:	7d1b      	ldrb	r3, [r3, #20]
    e5e6:	b2db      	uxtb	r3, r3
    e5e8:	f083 0301 	eor.w	r3, r3, #1
    e5ec:	b2db      	uxtb	r3, r3
    e5ee:	2b00      	cmp	r3, #0
    e5f0:	d006      	beq.n	e600 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e5f2:	68fb      	ldr	r3, [r7, #12]
    e5f4:	7c1b      	ldrb	r3, [r3, #16]
    e5f6:	b2db      	uxtb	r3, r3
    e5f8:	2b00      	cmp	r3, #0
    e5fa:	d001      	beq.n	e600 <_ZN9CDC_Class9writeDataEPKvl+0x5c>
    e5fc:	2301      	movs	r3, #1
    e5fe:	e000      	b.n	e602 <_ZN9CDC_Class9writeDataEPKvl+0x5e>
    e600:	2300      	movs	r3, #0
    e602:	2b00      	cmp	r3, #0
    e604:	d000      	beq.n	e608 <_ZN9CDC_Class9writeDataEPKvl+0x64>
    e606:	e7ec      	b.n	e5e2 <_ZN9CDC_Class9writeDataEPKvl+0x3e>
			;
			};
			
			usbTerminalTimer.Stop();
    e608:	4807      	ldr	r0, [pc, #28]	; (e628 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e60a:	4b0a      	ldr	r3, [pc, #40]	; (e634 <_ZN9CDC_Class9writeDataEPKvl+0x90>)
    e60c:	4798      	blx	r3
			usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e60e:	4905      	ldr	r1, [pc, #20]	; (e624 <_ZN9CDC_Class9writeDataEPKvl+0x80>)
    e610:	4805      	ldr	r0, [pc, #20]	; (e628 <_ZN9CDC_Class9writeDataEPKvl+0x84>)
    e612:	4b09      	ldr	r3, [pc, #36]	; (e638 <_ZN9CDC_Class9writeDataEPKvl+0x94>)
    e614:	4798      	blx	r3
		return r;
    e616:	697b      	ldr	r3, [r7, #20]
    e618:	e000      	b.n	e61c <_ZN9CDC_Class9writeDataEPKvl+0x78>
	} 
	else
	{
		return 0;
    e61a:	2300      	movs	r3, #0
	}
	

}
    e61c:	4618      	mov	r0, r3
    e61e:	3718      	adds	r7, #24
    e620:	46bd      	mov	sp, r7
    e622:	bd80      	pop	{r7, pc}
    e624:	0000e209 	.word	0x0000e209
    e628:	20001694 	.word	0x20001694
    e62c:	0000dee1 	.word	0x0000dee1
    e630:	0000ca9d 	.word	0x0000ca9d
    e634:	0000ddb9 	.word	0x0000ddb9
    e638:	0000de89 	.word	0x0000de89

0000e63c <_ZN9CDC_Class5writeEPKhj>:
size_t CDC_Class::write(const uint8_t *buffer, size_t size)
{
    e63c:	b580      	push	{r7, lr}
    e63e:	b086      	sub	sp, #24
    e640:	af00      	add	r7, sp, #0
    e642:	60f8      	str	r0, [r7, #12]
    e644:	60b9      	str	r1, [r7, #8]
    e646:	607a      	str	r2, [r7, #4]
	uint32_t r;
	txReady=false;
    e648:	68fb      	ldr	r3, [r7, #12]
    e64a:	2200      	movs	r2, #0
    e64c:	751a      	strb	r2, [r3, #20]

 	if (connected){
    e64e:	68fb      	ldr	r3, [r7, #12]
    e650:	7c1b      	ldrb	r3, [r3, #16]
    e652:	b2db      	uxtb	r3, r3
    e654:	2b00      	cmp	r3, #0
    e656:	d02a      	beq.n	e6ae <_ZN9CDC_Class5writeEPKhj+0x72>
		usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeout,USB_TIMEOUT*size);
    e658:	687a      	ldr	r2, [r7, #4]
    e65a:	4613      	mov	r3, r2
    e65c:	009b      	lsls	r3, r3, #2
    e65e:	4413      	add	r3, r2
    e660:	005b      	lsls	r3, r3, #1
    e662:	461a      	mov	r2, r3
    e664:	4915      	ldr	r1, [pc, #84]	; (e6bc <_ZN9CDC_Class5writeEPKhj+0x80>)
    e666:	4816      	ldr	r0, [pc, #88]	; (e6c0 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e668:	4b16      	ldr	r3, [pc, #88]	; (e6c4 <_ZN9CDC_Class5writeEPKhj+0x88>)
    e66a:	4798      	blx	r3
 		r= (uint32_t)cdcdf_acm_write((uint8_t *)buffer,(uint32_t)size);
    e66c:	6879      	ldr	r1, [r7, #4]
    e66e:	68b8      	ldr	r0, [r7, #8]
    e670:	4b15      	ldr	r3, [pc, #84]	; (e6c8 <_ZN9CDC_Class5writeEPKhj+0x8c>)
    e672:	4798      	blx	r3
    e674:	4603      	mov	r3, r0
    e676:	617b      	str	r3, [r7, #20]
		while((!txReady)&&(connected));
    e678:	68fb      	ldr	r3, [r7, #12]
    e67a:	7d1b      	ldrb	r3, [r3, #20]
    e67c:	b2db      	uxtb	r3, r3
    e67e:	f083 0301 	eor.w	r3, r3, #1
    e682:	b2db      	uxtb	r3, r3
    e684:	2b00      	cmp	r3, #0
    e686:	d006      	beq.n	e696 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e688:	68fb      	ldr	r3, [r7, #12]
    e68a:	7c1b      	ldrb	r3, [r3, #16]
    e68c:	b2db      	uxtb	r3, r3
    e68e:	2b00      	cmp	r3, #0
    e690:	d001      	beq.n	e696 <_ZN9CDC_Class5writeEPKhj+0x5a>
    e692:	2301      	movs	r3, #1
    e694:	e000      	b.n	e698 <_ZN9CDC_Class5writeEPKhj+0x5c>
    e696:	2300      	movs	r3, #0
    e698:	2b00      	cmp	r3, #0
    e69a:	d000      	beq.n	e69e <_ZN9CDC_Class5writeEPKhj+0x62>
    e69c:	e7ec      	b.n	e678 <_ZN9CDC_Class5writeEPKhj+0x3c>

		usbTerminalTimer.Stop();
    e69e:	4808      	ldr	r0, [pc, #32]	; (e6c0 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e6a0:	4b0a      	ldr	r3, [pc, #40]	; (e6cc <_ZN9CDC_Class5writeEPKhj+0x90>)
    e6a2:	4798      	blx	r3
		usbTerminalTimer.Remove_task((FUNC_PTR)USBTimeout);
    e6a4:	4905      	ldr	r1, [pc, #20]	; (e6bc <_ZN9CDC_Class5writeEPKhj+0x80>)
    e6a6:	4806      	ldr	r0, [pc, #24]	; (e6c0 <_ZN9CDC_Class5writeEPKhj+0x84>)
    e6a8:	4b09      	ldr	r3, [pc, #36]	; (e6d0 <_ZN9CDC_Class5writeEPKhj+0x94>)
    e6aa:	4798      	blx	r3
    e6ac:	e001      	b.n	e6b2 <_ZN9CDC_Class5writeEPKhj+0x76>
	}else{
 		r=0;
    e6ae:	2300      	movs	r3, #0
    e6b0:	617b      	str	r3, [r7, #20]
	 }
	return r;		
    e6b2:	697b      	ldr	r3, [r7, #20]
}
    e6b4:	4618      	mov	r0, r3
    e6b6:	3718      	adds	r7, #24
    e6b8:	46bd      	mov	sp, r7
    e6ba:	bd80      	pop	{r7, pc}
    e6bc:	0000e209 	.word	0x0000e209
    e6c0:	20001694 	.word	0x20001694
    e6c4:	0000dee1 	.word	0x0000dee1
    e6c8:	0000ca9d 	.word	0x0000ca9d
    e6cc:	0000ddb9 	.word	0x0000ddb9
    e6d0:	0000de89 	.word	0x0000de89

0000e6d4 <_ZN9CDC_Class9availableEv>:


bool	CDC_Class::available(void){
    e6d4:	b480      	push	{r7}
    e6d6:	b083      	sub	sp, #12
    e6d8:	af00      	add	r7, sp, #0
    e6da:	6078      	str	r0, [r7, #4]
	if (rxReady && txReady)
    e6dc:	687b      	ldr	r3, [r7, #4]
    e6de:	7d5b      	ldrb	r3, [r3, #21]
    e6e0:	b2db      	uxtb	r3, r3
    e6e2:	2b00      	cmp	r3, #0
    e6e4:	d006      	beq.n	e6f4 <_ZN9CDC_Class9availableEv+0x20>
    e6e6:	687b      	ldr	r3, [r7, #4]
    e6e8:	7d1b      	ldrb	r3, [r3, #20]
    e6ea:	b2db      	uxtb	r3, r3
    e6ec:	2b00      	cmp	r3, #0
    e6ee:	d001      	beq.n	e6f4 <_ZN9CDC_Class9availableEv+0x20>
    e6f0:	2301      	movs	r3, #1
    e6f2:	e000      	b.n	e6f6 <_ZN9CDC_Class9availableEv+0x22>
    e6f4:	2300      	movs	r3, #0
    e6f6:	2b00      	cmp	r3, #0
    e6f8:	d001      	beq.n	e6fe <_ZN9CDC_Class9availableEv+0x2a>
	{
		return true;
    e6fa:	2301      	movs	r3, #1
    e6fc:	e000      	b.n	e700 <_ZN9CDC_Class9availableEv+0x2c>
	}else
	{
		
	return false;
    e6fe:	2300      	movs	r3, #0
	}
	
}
    e700:	4618      	mov	r0, r3
    e702:	370c      	adds	r7, #12
    e704:	46bd      	mov	sp, r7
    e706:	bc80      	pop	{r7}
    e708:	4770      	bx	lr
	...

0000e70c <_Z41__static_initialization_and_destruction_0ii>:

	delay_us(10);
	return result;
}

 CDC_Class	usb;
    e70c:	b580      	push	{r7, lr}
    e70e:	b082      	sub	sp, #8
    e710:	af00      	add	r7, sp, #0
    e712:	6078      	str	r0, [r7, #4]
    e714:	6039      	str	r1, [r7, #0]
    e716:	687b      	ldr	r3, [r7, #4]
    e718:	2b01      	cmp	r3, #1
    e71a:	d154      	bne.n	e7c6 <_Z41__static_initialization_and_destruction_0ii+0xba>
    e71c:	683b      	ldr	r3, [r7, #0]
    e71e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e722:	4293      	cmp	r3, r2
    e724:	d14f      	bne.n	e7c6 <_Z41__static_initialization_and_destruction_0ii+0xba>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    e726:	492a      	ldr	r1, [pc, #168]	; (e7d0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    e728:	482a      	ldr	r0, [pc, #168]	; (e7d4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e72a:	4b2b      	ldr	r3, [pc, #172]	; (e7d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e72c:	4798      	blx	r3
    e72e:	4a2b      	ldr	r2, [pc, #172]	; (e7dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e730:	492b      	ldr	r1, [pc, #172]	; (e7e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e732:	4828      	ldr	r0, [pc, #160]	; (e7d4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    e734:	4b2b      	ldr	r3, [pc, #172]	; (e7e4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e736:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    e738:	492b      	ldr	r1, [pc, #172]	; (e7e8 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    e73a:	482c      	ldr	r0, [pc, #176]	; (e7ec <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e73c:	4b26      	ldr	r3, [pc, #152]	; (e7d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e73e:	4798      	blx	r3
    e740:	4a26      	ldr	r2, [pc, #152]	; (e7dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e742:	4927      	ldr	r1, [pc, #156]	; (e7e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e744:	4829      	ldr	r0, [pc, #164]	; (e7ec <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    e746:	4b27      	ldr	r3, [pc, #156]	; (e7e4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e748:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    e74a:	4929      	ldr	r1, [pc, #164]	; (e7f0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    e74c:	4829      	ldr	r0, [pc, #164]	; (e7f4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e74e:	4b22      	ldr	r3, [pc, #136]	; (e7d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e750:	4798      	blx	r3
    e752:	4a22      	ldr	r2, [pc, #136]	; (e7dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e754:	4922      	ldr	r1, [pc, #136]	; (e7e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e756:	4827      	ldr	r0, [pc, #156]	; (e7f4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    e758:	4b22      	ldr	r3, [pc, #136]	; (e7e4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e75a:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    e75c:	4926      	ldr	r1, [pc, #152]	; (e7f8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
    e75e:	4827      	ldr	r0, [pc, #156]	; (e7fc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e760:	4b1d      	ldr	r3, [pc, #116]	; (e7d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e762:	4798      	blx	r3
    e764:	4a1d      	ldr	r2, [pc, #116]	; (e7dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e766:	491e      	ldr	r1, [pc, #120]	; (e7e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e768:	4824      	ldr	r0, [pc, #144]	; (e7fc <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    e76a:	4b1e      	ldr	r3, [pc, #120]	; (e7e4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e76c:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    e76e:	4924      	ldr	r1, [pc, #144]	; (e800 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    e770:	4824      	ldr	r0, [pc, #144]	; (e804 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e772:	4b19      	ldr	r3, [pc, #100]	; (e7d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e774:	4798      	blx	r3
    e776:	4a19      	ldr	r2, [pc, #100]	; (e7dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e778:	4919      	ldr	r1, [pc, #100]	; (e7e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e77a:	4822      	ldr	r0, [pc, #136]	; (e804 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    e77c:	4b19      	ldr	r3, [pc, #100]	; (e7e4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e77e:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    e780:	4921      	ldr	r1, [pc, #132]	; (e808 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    e782:	4822      	ldr	r0, [pc, #136]	; (e80c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e784:	4b14      	ldr	r3, [pc, #80]	; (e7d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e786:	4798      	blx	r3
    e788:	4a14      	ldr	r2, [pc, #80]	; (e7dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e78a:	4915      	ldr	r1, [pc, #84]	; (e7e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e78c:	481f      	ldr	r0, [pc, #124]	; (e80c <_Z41__static_initialization_and_destruction_0ii+0x100>)
    e78e:	4b15      	ldr	r3, [pc, #84]	; (e7e4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e790:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    e792:	491f      	ldr	r1, [pc, #124]	; (e810 <_Z41__static_initialization_and_destruction_0ii+0x104>)
    e794:	481f      	ldr	r0, [pc, #124]	; (e814 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    e796:	4b10      	ldr	r3, [pc, #64]	; (e7d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e798:	4798      	blx	r3
    e79a:	4a10      	ldr	r2, [pc, #64]	; (e7dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e79c:	4910      	ldr	r1, [pc, #64]	; (e7e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e79e:	481d      	ldr	r0, [pc, #116]	; (e814 <_Z41__static_initialization_and_destruction_0ii+0x108>)
    e7a0:	4b10      	ldr	r3, [pc, #64]	; (e7e4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e7a2:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    e7a4:	491c      	ldr	r1, [pc, #112]	; (e818 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
    e7a6:	481d      	ldr	r0, [pc, #116]	; (e81c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    e7a8:	4b0b      	ldr	r3, [pc, #44]	; (e7d8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    e7aa:	4798      	blx	r3
    e7ac:	4a0b      	ldr	r2, [pc, #44]	; (e7dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e7ae:	490c      	ldr	r1, [pc, #48]	; (e7e0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    e7b0:	481a      	ldr	r0, [pc, #104]	; (e81c <_Z41__static_initialization_and_destruction_0ii+0x110>)
    e7b2:	4b0c      	ldr	r3, [pc, #48]	; (e7e4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e7b4:	4798      	blx	r3
    e7b6:	481a      	ldr	r0, [pc, #104]	; (e820 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    e7b8:	4b1a      	ldr	r3, [pc, #104]	; (e824 <_Z41__static_initialization_and_destruction_0ii+0x118>)
    e7ba:	4798      	blx	r3
    e7bc:	4a07      	ldr	r2, [pc, #28]	; (e7dc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    e7be:	491a      	ldr	r1, [pc, #104]	; (e828 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
    e7c0:	4817      	ldr	r0, [pc, #92]	; (e820 <_Z41__static_initialization_and_destruction_0ii+0x114>)
    e7c2:	4b08      	ldr	r3, [pc, #32]	; (e7e4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    e7c4:	4798      	blx	r3
    e7c6:	bf00      	nop
    e7c8:	3708      	adds	r7, #8
    e7ca:	46bd      	mov	sp, r7
    e7cc:	bd80      	pop	{r7, pc}
    e7ce:	bf00      	nop
    e7d0:	20009da8 	.word	0x20009da8
    e7d4:	200015f4 	.word	0x200015f4
    e7d8:	0000dc59 	.word	0x0000dc59
    e7dc:	20000000 	.word	0x20000000
    e7e0:	0000dc91 	.word	0x0000dc91
    e7e4:	00013091 	.word	0x00013091
    e7e8:	20009e3c 	.word	0x20009e3c
    e7ec:	20001614 	.word	0x20001614
    e7f0:	20009f60 	.word	0x20009f60
    e7f4:	20001634 	.word	0x20001634
    e7f8:	20009e5c 	.word	0x20009e5c
    e7fc:	20001654 	.word	0x20001654
    e800:	20009f20 	.word	0x20009f20
    e804:	20001674 	.word	0x20001674
    e808:	20009f40 	.word	0x20009f40
    e80c:	20001694 	.word	0x20001694
    e810:	20009e18 	.word	0x20009e18
    e814:	200016b4 	.word	0x200016b4
    e818:	20009eb8 	.word	0x20009eb8
    e81c:	200016d4 	.word	0x200016d4
    e820:	200016f8 	.word	0x200016f8
    e824:	0000e2f9 	.word	0x0000e2f9
    e828:	0000e341 	.word	0x0000e341

0000e82c <_GLOBAL__sub_I_ptrCDCClass>:
    e82c:	b580      	push	{r7, lr}
    e82e:	af00      	add	r7, sp, #0
    e830:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e834:	2001      	movs	r0, #1
    e836:	4b01      	ldr	r3, [pc, #4]	; (e83c <_GLOBAL__sub_I_ptrCDCClass+0x10>)
    e838:	4798      	blx	r3
    e83a:	bd80      	pop	{r7, pc}
    e83c:	0000e70d 	.word	0x0000e70d

0000e840 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
    e840:	b590      	push	{r4, r7, lr}
    e842:	b083      	sub	sp, #12
    e844:	af00      	add	r7, sp, #0
    e846:	6078      	str	r0, [r7, #4]
    e848:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
    e84a:	683b      	ldr	r3, [r7, #0]
    e84c:	2b00      	cmp	r3, #0
    e84e:	d101      	bne.n	e854 <_ZN5Print5writeEPKc+0x14>
    e850:	2300      	movs	r3, #0
    e852:	e00c      	b.n	e86e <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
    e854:	687b      	ldr	r3, [r7, #4]
    e856:	681b      	ldr	r3, [r3, #0]
    e858:	3304      	adds	r3, #4
    e85a:	681c      	ldr	r4, [r3, #0]
    e85c:	6838      	ldr	r0, [r7, #0]
    e85e:	4b06      	ldr	r3, [pc, #24]	; (e878 <_ZN5Print5writeEPKc+0x38>)
    e860:	4798      	blx	r3
    e862:	4603      	mov	r3, r0
    e864:	461a      	mov	r2, r3
    e866:	6839      	ldr	r1, [r7, #0]
    e868:	6878      	ldr	r0, [r7, #4]
    e86a:	47a0      	blx	r4
    e86c:	4603      	mov	r3, r0
    }
    e86e:	4618      	mov	r0, r3
    e870:	370c      	adds	r7, #12
    e872:	46bd      	mov	sp, r7
    e874:	bd90      	pop	{r4, r7, pc}
    e876:	bf00      	nop
    e878:	00013801 	.word	0x00013801

0000e87c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    e87c:	b580      	push	{r7, lr}
    e87e:	b086      	sub	sp, #24
    e880:	af00      	add	r7, sp, #0
    e882:	60f8      	str	r0, [r7, #12]
    e884:	60b9      	str	r1, [r7, #8]
    e886:	607a      	str	r2, [r7, #4]
  size_t n = 0;
    e888:	2300      	movs	r3, #0
    e88a:	617b      	str	r3, [r7, #20]
  while (size--) {
    e88c:	687b      	ldr	r3, [r7, #4]
    e88e:	1e5a      	subs	r2, r3, #1
    e890:	607a      	str	r2, [r7, #4]
    e892:	2b00      	cmp	r3, #0
    e894:	bf14      	ite	ne
    e896:	2301      	movne	r3, #1
    e898:	2300      	moveq	r3, #0
    e89a:	b2db      	uxtb	r3, r3
    e89c:	2b00      	cmp	r3, #0
    e89e:	d016      	beq.n	e8ce <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
    e8a0:	68fb      	ldr	r3, [r7, #12]
    e8a2:	681b      	ldr	r3, [r3, #0]
    e8a4:	681a      	ldr	r2, [r3, #0]
    e8a6:	68bb      	ldr	r3, [r7, #8]
    e8a8:	1c59      	adds	r1, r3, #1
    e8aa:	60b9      	str	r1, [r7, #8]
    e8ac:	781b      	ldrb	r3, [r3, #0]
    e8ae:	4619      	mov	r1, r3
    e8b0:	68f8      	ldr	r0, [r7, #12]
    e8b2:	4790      	blx	r2
    e8b4:	4603      	mov	r3, r0
    e8b6:	2b00      	cmp	r3, #0
    e8b8:	bf14      	ite	ne
    e8ba:	2301      	movne	r3, #1
    e8bc:	2300      	moveq	r3, #0
    e8be:	b2db      	uxtb	r3, r3
    e8c0:	2b00      	cmp	r3, #0
    e8c2:	d003      	beq.n	e8cc <_ZN5Print5writeEPKhj+0x50>
    e8c4:	697b      	ldr	r3, [r7, #20]
    e8c6:	3301      	adds	r3, #1
    e8c8:	617b      	str	r3, [r7, #20]
  while (size--) {
    e8ca:	e7df      	b.n	e88c <_ZN5Print5writeEPKhj+0x10>
    else break;
    e8cc:	bf00      	nop
  }
  return n;
    e8ce:	697b      	ldr	r3, [r7, #20]
}
    e8d0:	4618      	mov	r0, r3
    e8d2:	3718      	adds	r7, #24
    e8d4:	46bd      	mov	sp, r7
    e8d6:	bd80      	pop	{r7, pc}

0000e8d8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    e8d8:	b580      	push	{r7, lr}
    e8da:	b082      	sub	sp, #8
    e8dc:	af00      	add	r7, sp, #0
    e8de:	6078      	str	r0, [r7, #4]
    e8e0:	6039      	str	r1, [r7, #0]
  return write(str);
    e8e2:	6839      	ldr	r1, [r7, #0]
    e8e4:	6878      	ldr	r0, [r7, #4]
    e8e6:	4b03      	ldr	r3, [pc, #12]	; (e8f4 <_ZN5Print5printEPKc+0x1c>)
    e8e8:	4798      	blx	r3
    e8ea:	4603      	mov	r3, r0
}
    e8ec:	4618      	mov	r0, r3
    e8ee:	3708      	adds	r7, #8
    e8f0:	46bd      	mov	sp, r7
    e8f2:	bd80      	pop	{r7, pc}
    e8f4:	0000e841 	.word	0x0000e841

0000e8f8 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    e8f8:	b480      	push	{r7}
    e8fa:	b083      	sub	sp, #12
    e8fc:	af00      	add	r7, sp, #0
    e8fe:	6078      	str	r0, [r7, #4]
    e900:	460b      	mov	r3, r1
    e902:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    e904:	78fb      	ldrb	r3, [r7, #3]
    e906:	687a      	ldr	r2, [r7, #4]
    e908:	01db      	lsls	r3, r3, #7
    e90a:	4413      	add	r3, r2
    e90c:	681b      	ldr	r3, [r3, #0]
}
    e90e:	4618      	mov	r0, r3
    e910:	370c      	adds	r7, #12
    e912:	46bd      	mov	sp, r7
    e914:	bc80      	pop	{r7}
    e916:	4770      	bx	lr

0000e918 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    e918:	b480      	push	{r7}
    e91a:	b083      	sub	sp, #12
    e91c:	af00      	add	r7, sp, #0
    e91e:	6078      	str	r0, [r7, #4]
    e920:	460b      	mov	r3, r1
    e922:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    e924:	78fb      	ldrb	r3, [r7, #3]
    e926:	687a      	ldr	r2, [r7, #4]
    e928:	01db      	lsls	r3, r3, #7
    e92a:	4413      	add	r3, r2
    e92c:	3310      	adds	r3, #16
    e92e:	681b      	ldr	r3, [r3, #0]
}
    e930:	4618      	mov	r0, r3
    e932:	370c      	adds	r7, #12
    e934:	46bd      	mov	sp, r7
    e936:	bc80      	pop	{r7}
    e938:	4770      	bx	lr

0000e93a <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    e93a:	b480      	push	{r7}
    e93c:	b083      	sub	sp, #12
    e93e:	af00      	add	r7, sp, #0
    e940:	6078      	str	r0, [r7, #4]
    e942:	460b      	mov	r3, r1
    e944:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    e946:	78fb      	ldrb	r3, [r7, #3]
    e948:	687a      	ldr	r2, [r7, #4]
    e94a:	01db      	lsls	r3, r3, #7
    e94c:	4413      	add	r3, r2
    e94e:	3320      	adds	r3, #32
    e950:	681b      	ldr	r3, [r3, #0]
}
    e952:	4618      	mov	r0, r3
    e954:	370c      	adds	r7, #12
    e956:	46bd      	mov	sp, r7
    e958:	bc80      	pop	{r7}
    e95a:	4770      	bx	lr

0000e95c <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    e95c:	b580      	push	{r7, lr}
    e95e:	b086      	sub	sp, #24
    e960:	af00      	add	r7, sp, #0
    e962:	4603      	mov	r3, r0
    e964:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    e966:	f107 030c 	add.w	r3, r7, #12
    e96a:	4618      	mov	r0, r3
    e96c:	4b13      	ldr	r3, [pc, #76]	; (e9bc <_gpio_get_level+0x60>)
    e96e:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    e970:	79fb      	ldrb	r3, [r7, #7]
    e972:	4619      	mov	r1, r3
    e974:	4812      	ldr	r0, [pc, #72]	; (e9c0 <_gpio_get_level+0x64>)
    e976:	4b13      	ldr	r3, [pc, #76]	; (e9c4 <_gpio_get_level+0x68>)
    e978:	4798      	blx	r3
    e97a:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    e97c:	79fb      	ldrb	r3, [r7, #7]
    e97e:	4619      	mov	r1, r3
    e980:	480f      	ldr	r0, [pc, #60]	; (e9c0 <_gpio_get_level+0x64>)
    e982:	4b11      	ldr	r3, [pc, #68]	; (e9c8 <_gpio_get_level+0x6c>)
    e984:	4798      	blx	r3
    e986:	4602      	mov	r2, r0
    e988:	697b      	ldr	r3, [r7, #20]
    e98a:	43db      	mvns	r3, r3
    e98c:	4013      	ands	r3, r2
    e98e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e990:	79fb      	ldrb	r3, [r7, #7]
    e992:	4619      	mov	r1, r3
    e994:	480a      	ldr	r0, [pc, #40]	; (e9c0 <_gpio_get_level+0x64>)
    e996:	4b0d      	ldr	r3, [pc, #52]	; (e9cc <_gpio_get_level+0x70>)
    e998:	4798      	blx	r3
    e99a:	4602      	mov	r2, r0
    e99c:	697b      	ldr	r3, [r7, #20]
    e99e:	4013      	ands	r3, r2
    e9a0:	693a      	ldr	r2, [r7, #16]
    e9a2:	4313      	orrs	r3, r2
    e9a4:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    e9a6:	f107 030c 	add.w	r3, r7, #12
    e9aa:	4618      	mov	r0, r3
    e9ac:	4b08      	ldr	r3, [pc, #32]	; (e9d0 <_gpio_get_level+0x74>)
    e9ae:	4798      	blx	r3

	return tmp;
    e9b0:	693b      	ldr	r3, [r7, #16]
}
    e9b2:	4618      	mov	r0, r3
    e9b4:	3718      	adds	r7, #24
    e9b6:	46bd      	mov	sp, r7
    e9b8:	bd80      	pop	{r7, pc}
    e9ba:	bf00      	nop
    e9bc:	0000bc79 	.word	0x0000bc79
    e9c0:	41008000 	.word	0x41008000
    e9c4:	0000e8f9 	.word	0x0000e8f9
    e9c8:	0000e93b 	.word	0x0000e93b
    e9cc:	0000e919 	.word	0x0000e919
    e9d0:	0000bc9f 	.word	0x0000bc9f

0000e9d4 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    e9d4:	b580      	push	{r7, lr}
    e9d6:	b082      	sub	sp, #8
    e9d8:	af00      	add	r7, sp, #0
    e9da:	4603      	mov	r3, r0
    e9dc:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    e9de:	79fb      	ldrb	r3, [r7, #7]
    e9e0:	115b      	asrs	r3, r3, #5
    e9e2:	b2db      	uxtb	r3, r3
    e9e4:	4618      	mov	r0, r3
    e9e6:	4b09      	ldr	r3, [pc, #36]	; (ea0c <gpio_get_pin_level+0x38>)
    e9e8:	4798      	blx	r3
    e9ea:	4601      	mov	r1, r0
    e9ec:	79fb      	ldrb	r3, [r7, #7]
    e9ee:	f003 031f 	and.w	r3, r3, #31
    e9f2:	2201      	movs	r2, #1
    e9f4:	fa02 f303 	lsl.w	r3, r2, r3
    e9f8:	400b      	ands	r3, r1
    e9fa:	2b00      	cmp	r3, #0
    e9fc:	bf14      	ite	ne
    e9fe:	2301      	movne	r3, #1
    ea00:	2300      	moveq	r3, #0
    ea02:	b2db      	uxtb	r3, r3
}
    ea04:	4618      	mov	r0, r3
    ea06:	3708      	adds	r7, #8
    ea08:	46bd      	mov	sp, r7
    ea0a:	bd80      	pop	{r7, pc}
    ea0c:	0000e95d 	.word	0x0000e95d

0000ea10 <_ZL14USBTimeoutTaskPK10timer_task>:
#include "Timer_Class.h"
#include "CDC_Class.h"

SerialTerminal_Class	*ptrSerialTerminalClass;

static void	USBTimeoutTask(const struct timer_task *const timer_task){
    ea10:	b480      	push	{r7}
    ea12:	b083      	sub	sp, #12
    ea14:	af00      	add	r7, sp, #0
    ea16:	6078      	str	r0, [r7, #4]
	ptrSerialTerminalClass->timeout=true;
    ea18:	4b06      	ldr	r3, [pc, #24]	; (ea34 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    ea1a:	681b      	ldr	r3, [r3, #0]
    ea1c:	2201      	movs	r2, #1
    ea1e:	709a      	strb	r2, [r3, #2]
	ptrSerialTerminalClass->plugged=false;
    ea20:	4b04      	ldr	r3, [pc, #16]	; (ea34 <_ZL14USBTimeoutTaskPK10timer_task+0x24>)
    ea22:	681b      	ldr	r3, [r3, #0]
    ea24:	2200      	movs	r2, #0
    ea26:	705a      	strb	r2, [r3, #1]
}
    ea28:	bf00      	nop
    ea2a:	370c      	adds	r7, #12
    ea2c:	46bd      	mov	sp, r7
    ea2e:	bc80      	pop	{r7}
    ea30:	4770      	bx	lr
    ea32:	bf00      	nop
    ea34:	20001858 	.word	0x20001858

0000ea38 <_ZL10USBPluggedv>:

static void USBPlugged(void){
    ea38:	b580      	push	{r7, lr}
    ea3a:	af00      	add	r7, sp, #0
	if (gpio_get_pin_level(PIN_PC00))
    ea3c:	2040      	movs	r0, #64	; 0x40
    ea3e:	4b0a      	ldr	r3, [pc, #40]	; (ea68 <_ZL10USBPluggedv+0x30>)
    ea40:	4798      	blx	r3
    ea42:	4603      	mov	r3, r0
    ea44:	2b00      	cmp	r3, #0
    ea46:	d004      	beq.n	ea52 <_ZL10USBPluggedv+0x1a>
	{
		ptrSerialTerminalClass->plugged=true;
    ea48:	4b08      	ldr	r3, [pc, #32]	; (ea6c <_ZL10USBPluggedv+0x34>)
    ea4a:	681b      	ldr	r3, [r3, #0]
    ea4c:	2201      	movs	r2, #1
    ea4e:	705a      	strb	r2, [r3, #1]
	{
		ptrSerialTerminalClass->plugged=false;
		ptrSerialTerminalClass->connected=false;
	}
	
}
    ea50:	e007      	b.n	ea62 <_ZL10USBPluggedv+0x2a>
		ptrSerialTerminalClass->plugged=false;
    ea52:	4b06      	ldr	r3, [pc, #24]	; (ea6c <_ZL10USBPluggedv+0x34>)
    ea54:	681b      	ldr	r3, [r3, #0]
    ea56:	2200      	movs	r2, #0
    ea58:	705a      	strb	r2, [r3, #1]
		ptrSerialTerminalClass->connected=false;
    ea5a:	4b04      	ldr	r3, [pc, #16]	; (ea6c <_ZL10USBPluggedv+0x34>)
    ea5c:	681b      	ldr	r3, [r3, #0]
    ea5e:	2200      	movs	r2, #0
    ea60:	701a      	strb	r2, [r3, #0]
}
    ea62:	bf00      	nop
    ea64:	bd80      	pop	{r7, pc}
    ea66:	bf00      	nop
    ea68:	0000e9d5 	.word	0x0000e9d5
    ea6c:	20001858 	.word	0x20001858

0000ea70 <_ZN20SerialTerminal_ClassC1Ev>:
{
	usbTerminalTimer.ticks++;
}

// default constructor
SerialTerminal_Class::SerialTerminal_Class()
    ea70:	b480      	push	{r7}
    ea72:	b083      	sub	sp, #12
    ea74:	af00      	add	r7, sp, #0
    ea76:	6078      	str	r0, [r7, #4]
{
	ptrSerialTerminalClass=this;
    ea78:	4a04      	ldr	r2, [pc, #16]	; (ea8c <_ZN20SerialTerminal_ClassC1Ev+0x1c>)
    ea7a:	687b      	ldr	r3, [r7, #4]
    ea7c:	6013      	str	r3, [r2, #0]
	
} //SerialTerminal_Class
    ea7e:	687b      	ldr	r3, [r7, #4]
    ea80:	4618      	mov	r0, r3
    ea82:	370c      	adds	r7, #12
    ea84:	46bd      	mov	sp, r7
    ea86:	bc80      	pop	{r7}
    ea88:	4770      	bx	lr
    ea8a:	bf00      	nop
    ea8c:	20001858 	.word	0x20001858

0000ea90 <_ZN20SerialTerminal_ClassD1Ev>:

// default destructor
SerialTerminal_Class::~SerialTerminal_Class()
    ea90:	b480      	push	{r7}
    ea92:	b083      	sub	sp, #12
    ea94:	af00      	add	r7, sp, #0
    ea96:	6078      	str	r0, [r7, #4]
{
} //~SerialTerminal_Class
    ea98:	687b      	ldr	r3, [r7, #4]
    ea9a:	4618      	mov	r0, r3
    ea9c:	370c      	adds	r7, #12
    ea9e:	46bd      	mov	sp, r7
    eaa0:	bc80      	pop	{r7}
    eaa2:	4770      	bx	lr

0000eaa4 <_ZN20SerialTerminal_Class6OnInitEv>:

void	SerialTerminal_Class::OnInit(void){
    eaa4:	b580      	push	{r7, lr}
    eaa6:	b082      	sub	sp, #8
    eaa8:	af00      	add	r7, sp, #0
    eaaa:	6078      	str	r0, [r7, #4]
		ext_irq_register(PIN_PC00, USBPlugged);
    eaac:	491e      	ldr	r1, [pc, #120]	; (eb28 <_ZN20SerialTerminal_Class6OnInitEv+0x84>)
    eaae:	2040      	movs	r0, #64	; 0x40
    eab0:	4b1e      	ldr	r3, [pc, #120]	; (eb2c <_ZN20SerialTerminal_Class6OnInitEv+0x88>)
    eab2:	4798      	blx	r3
		if (usbTerminalTimer.Init())
    eab4:	481e      	ldr	r0, [pc, #120]	; (eb30 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    eab6:	4b1f      	ldr	r3, [pc, #124]	; (eb34 <_ZN20SerialTerminal_Class6OnInitEv+0x90>)
    eab8:	4798      	blx	r3
		{
		//	usbTerminalTimer.Start_periodic_task((FUNC_PTR)USBTimerTicks,1);
		}
		vbusDetected=gpio_get_pin_level(VBUS_DETECTED);
    eaba:	2040      	movs	r0, #64	; 0x40
    eabc:	4b1e      	ldr	r3, [pc, #120]	; (eb38 <_ZN20SerialTerminal_Class6OnInitEv+0x94>)
    eabe:	4798      	blx	r3
    eac0:	4603      	mov	r3, r0
    eac2:	461a      	mov	r2, r3
    eac4:	687b      	ldr	r3, [r7, #4]
    eac6:	70da      	strb	r2, [r3, #3]
		if (vbusDetected)
    eac8:	687b      	ldr	r3, [r7, #4]
    eaca:	78db      	ldrb	r3, [r3, #3]
    eacc:	2b00      	cmp	r3, #0
    eace:	d021      	beq.n	eb14 <_ZN20SerialTerminal_Class6OnInitEv+0x70>
		{
			timeout=false;
    ead0:	687b      	ldr	r3, [r7, #4]
    ead2:	2200      	movs	r2, #0
    ead4:	709a      	strb	r2, [r3, #2]
			plugged=true;
    ead6:	687b      	ldr	r3, [r7, #4]
    ead8:	2201      	movs	r2, #1
    eada:	705a      	strb	r2, [r3, #1]
			usbTerminalTimer.Start_oneShot_task((FUNC_PTR)USBTimeoutTask,USB_TIMEOUT*60);
    eadc:	f44f 7216 	mov.w	r2, #600	; 0x258
    eae0:	4916      	ldr	r1, [pc, #88]	; (eb3c <_ZN20SerialTerminal_Class6OnInitEv+0x98>)
    eae2:	4813      	ldr	r0, [pc, #76]	; (eb30 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    eae4:	4b16      	ldr	r3, [pc, #88]	; (eb40 <_ZN20SerialTerminal_Class6OnInitEv+0x9c>)
    eae6:	4798      	blx	r3
		
			//while ((!usb.IsEnabled())||(!plugged)){
			while ((!usb.IsEnabled())){
    eae8:	4816      	ldr	r0, [pc, #88]	; (eb44 <_ZN20SerialTerminal_Class6OnInitEv+0xa0>)
    eaea:	4b17      	ldr	r3, [pc, #92]	; (eb48 <_ZN20SerialTerminal_Class6OnInitEv+0xa4>)
    eaec:	4798      	blx	r3
    eaee:	4603      	mov	r3, r0
    eaf0:	f083 0301 	eor.w	r3, r3, #1
    eaf4:	b2db      	uxtb	r3, r3
    eaf6:	2b00      	cmp	r3, #0
    eaf8:	d008      	beq.n	eb0c <_ZN20SerialTerminal_Class6OnInitEv+0x68>
				if (timeout)
    eafa:	687b      	ldr	r3, [r7, #4]
    eafc:	789b      	ldrb	r3, [r3, #2]
    eafe:	b2db      	uxtb	r3, r3
    eb00:	2b00      	cmp	r3, #0
    eb02:	d0f1      	beq.n	eae8 <_ZN20SerialTerminal_Class6OnInitEv+0x44>
				{
					connected=false;
    eb04:	687b      	ldr	r3, [r7, #4]
    eb06:	2200      	movs	r2, #0
    eb08:	701a      	strb	r2, [r3, #0]
					return;
    eb0a:	e009      	b.n	eb20 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
				else
				{
				}
			}
			
			usbTerminalTimer.Stop();
    eb0c:	4808      	ldr	r0, [pc, #32]	; (eb30 <_ZN20SerialTerminal_Class6OnInitEv+0x8c>)
    eb0e:	4b0f      	ldr	r3, [pc, #60]	; (eb4c <_ZN20SerialTerminal_Class6OnInitEv+0xa8>)
    eb10:	4798      	blx	r3
    eb12:	e005      	b.n	eb20 <_ZN20SerialTerminal_Class6OnInitEv+0x7c>
		} 
		else
		{
			connected=false;
    eb14:	687b      	ldr	r3, [r7, #4]
    eb16:	2200      	movs	r2, #0
    eb18:	701a      	strb	r2, [r3, #0]
			plugged=false;
    eb1a:	687b      	ldr	r3, [r7, #4]
    eb1c:	2200      	movs	r2, #0
    eb1e:	705a      	strb	r2, [r3, #1]
		}
		
}
    eb20:	3708      	adds	r7, #8
    eb22:	46bd      	mov	sp, r7
    eb24:	bd80      	pop	{r7, pc}
    eb26:	bf00      	nop
    eb28:	0000ea39 	.word	0x0000ea39
    eb2c:	00002ab5 	.word	0x00002ab5
    eb30:	200017f8 	.word	0x200017f8
    eb34:	0000dd45 	.word	0x0000dd45
    eb38:	0000e9d5 	.word	0x0000e9d5
    eb3c:	0000ea11 	.word	0x0000ea11
    eb40:	0000dee1 	.word	0x0000dee1
    eb44:	200016f8 	.word	0x200016f8
    eb48:	0000e3b1 	.word	0x0000e3b1
    eb4c:	0000ddb9 	.word	0x0000ddb9

0000eb50 <_Z41__static_initialization_and_destruction_0ii>:
	{
		return	plugged;
	}
	
	return	plugged;
    eb50:	b580      	push	{r7, lr}
    eb52:	b082      	sub	sp, #8
    eb54:	af00      	add	r7, sp, #0
    eb56:	6078      	str	r0, [r7, #4]
    eb58:	6039      	str	r1, [r7, #0]
    eb5a:	687b      	ldr	r3, [r7, #4]
    eb5c:	2b01      	cmp	r3, #1
    eb5e:	d14c      	bne.n	ebfa <_Z41__static_initialization_and_destruction_0ii+0xaa>
    eb60:	683b      	ldr	r3, [r7, #0]
    eb62:	f64f 72ff 	movw	r2, #65535	; 0xffff
    eb66:	4293      	cmp	r3, r2
    eb68:	d147      	bne.n	ebfa <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
    eb6a:	4926      	ldr	r1, [pc, #152]	; (ec04 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
    eb6c:	4826      	ldr	r0, [pc, #152]	; (ec08 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    eb6e:	4b27      	ldr	r3, [pc, #156]	; (ec0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    eb70:	4798      	blx	r3
    eb72:	4a27      	ldr	r2, [pc, #156]	; (ec10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    eb74:	4927      	ldr	r1, [pc, #156]	; (ec14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    eb76:	4824      	ldr	r0, [pc, #144]	; (ec08 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
    eb78:	4b27      	ldr	r3, [pc, #156]	; (ec18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    eb7a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
    eb7c:	4927      	ldr	r1, [pc, #156]	; (ec1c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
    eb7e:	4828      	ldr	r0, [pc, #160]	; (ec20 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    eb80:	4b22      	ldr	r3, [pc, #136]	; (ec0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    eb82:	4798      	blx	r3
    eb84:	4a22      	ldr	r2, [pc, #136]	; (ec10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    eb86:	4923      	ldr	r1, [pc, #140]	; (ec14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    eb88:	4825      	ldr	r0, [pc, #148]	; (ec20 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
    eb8a:	4b23      	ldr	r3, [pc, #140]	; (ec18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    eb8c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
    eb8e:	4925      	ldr	r1, [pc, #148]	; (ec24 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
    eb90:	4825      	ldr	r0, [pc, #148]	; (ec28 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    eb92:	4b1e      	ldr	r3, [pc, #120]	; (ec0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    eb94:	4798      	blx	r3
    eb96:	4a1e      	ldr	r2, [pc, #120]	; (ec10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    eb98:	491e      	ldr	r1, [pc, #120]	; (ec14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    eb9a:	4823      	ldr	r0, [pc, #140]	; (ec28 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
    eb9c:	4b1e      	ldr	r3, [pc, #120]	; (ec18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    eb9e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
    eba0:	4922      	ldr	r1, [pc, #136]	; (ec2c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
    eba2:	4823      	ldr	r0, [pc, #140]	; (ec30 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    eba4:	4b19      	ldr	r3, [pc, #100]	; (ec0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    eba6:	4798      	blx	r3
    eba8:	4a19      	ldr	r2, [pc, #100]	; (ec10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ebaa:	491a      	ldr	r1, [pc, #104]	; (ec14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ebac:	4820      	ldr	r0, [pc, #128]	; (ec30 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
    ebae:	4b1a      	ldr	r3, [pc, #104]	; (ec18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ebb0:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
    ebb2:	4920      	ldr	r1, [pc, #128]	; (ec34 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
    ebb4:	4820      	ldr	r0, [pc, #128]	; (ec38 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    ebb6:	4b15      	ldr	r3, [pc, #84]	; (ec0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ebb8:	4798      	blx	r3
    ebba:	4a15      	ldr	r2, [pc, #84]	; (ec10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ebbc:	4915      	ldr	r1, [pc, #84]	; (ec14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ebbe:	481e      	ldr	r0, [pc, #120]	; (ec38 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
    ebc0:	4b15      	ldr	r3, [pc, #84]	; (ec18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ebc2:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
    ebc4:	491d      	ldr	r1, [pc, #116]	; (ec3c <_Z41__static_initialization_and_destruction_0ii+0xec>)
    ebc6:	481e      	ldr	r0, [pc, #120]	; (ec40 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    ebc8:	4b10      	ldr	r3, [pc, #64]	; (ec0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ebca:	4798      	blx	r3
    ebcc:	4a10      	ldr	r2, [pc, #64]	; (ec10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ebce:	4911      	ldr	r1, [pc, #68]	; (ec14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ebd0:	481b      	ldr	r0, [pc, #108]	; (ec40 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
    ebd2:	4b11      	ldr	r3, [pc, #68]	; (ec18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ebd4:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
    ebd6:	491b      	ldr	r1, [pc, #108]	; (ec44 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
    ebd8:	481b      	ldr	r0, [pc, #108]	; (ec48 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    ebda:	4b0c      	ldr	r3, [pc, #48]	; (ec0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ebdc:	4798      	blx	r3
    ebde:	4a0c      	ldr	r2, [pc, #48]	; (ec10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ebe0:	490c      	ldr	r1, [pc, #48]	; (ec14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ebe2:	4819      	ldr	r0, [pc, #100]	; (ec48 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
    ebe4:	4b0c      	ldr	r3, [pc, #48]	; (ec18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ebe6:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
    ebe8:	4918      	ldr	r1, [pc, #96]	; (ec4c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
    ebea:	4819      	ldr	r0, [pc, #100]	; (ec50 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    ebec:	4b07      	ldr	r3, [pc, #28]	; (ec0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
    ebee:	4798      	blx	r3
    ebf0:	4a07      	ldr	r2, [pc, #28]	; (ec10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
    ebf2:	4908      	ldr	r1, [pc, #32]	; (ec14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
    ebf4:	4816      	ldr	r0, [pc, #88]	; (ec50 <_Z41__static_initialization_and_destruction_0ii+0x100>)
    ebf6:	4b08      	ldr	r3, [pc, #32]	; (ec18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
    ebf8:	4798      	blx	r3
    ebfa:	bf00      	nop
    ebfc:	3708      	adds	r7, #8
    ebfe:	46bd      	mov	sp, r7
    ec00:	bd80      	pop	{r7, pc}
    ec02:	bf00      	nop
    ec04:	20009da8 	.word	0x20009da8
    ec08:	20001758 	.word	0x20001758
    ec0c:	0000dc59 	.word	0x0000dc59
    ec10:	20000000 	.word	0x20000000
    ec14:	0000dc91 	.word	0x0000dc91
    ec18:	00013091 	.word	0x00013091
    ec1c:	20009e3c 	.word	0x20009e3c
    ec20:	20001778 	.word	0x20001778
    ec24:	20009f60 	.word	0x20009f60
    ec28:	20001798 	.word	0x20001798
    ec2c:	20009e5c 	.word	0x20009e5c
    ec30:	200017b8 	.word	0x200017b8
    ec34:	20009f20 	.word	0x20009f20
    ec38:	200017d8 	.word	0x200017d8
    ec3c:	20009f40 	.word	0x20009f40
    ec40:	200017f8 	.word	0x200017f8
    ec44:	20009e18 	.word	0x20009e18
    ec48:	20001818 	.word	0x20001818
    ec4c:	20009eb8 	.word	0x20009eb8
    ec50:	20001838 	.word	0x20001838

0000ec54 <_GLOBAL__sub_I_ptrSerialTerminalClass>:
    ec54:	b580      	push	{r7, lr}
    ec56:	af00      	add	r7, sp, #0
    ec58:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ec5c:	2001      	movs	r0, #1
    ec5e:	4b01      	ldr	r3, [pc, #4]	; (ec64 <_GLOBAL__sub_I_ptrSerialTerminalClass+0x10>)
    ec60:	4798      	blx	r3
    ec62:	bd80      	pop	{r7, pc}
    ec64:	0000eb51 	.word	0x0000eb51

0000ec68 <malloc>:

#include "eLib.h"

//............................................................................
extern "C" void *malloc(size_t)
	{
    ec68:	b480      	push	{r7}
    ec6a:	b083      	sub	sp, #12
    ec6c:	af00      	add	r7, sp, #0
    ec6e:	6078      	str	r0, [r7, #4]
    return (void *)0;
    ec70:	2300      	movs	r3, #0
	}
    ec72:	4618      	mov	r0, r3
    ec74:	370c      	adds	r7, #12
    ec76:	46bd      	mov	sp, r7
    ec78:	bc80      	pop	{r7}
    ec7a:	4770      	bx	lr

0000ec7c <__cxa_pure_virtual>:
	}

extern "C"
	{
	void __cxa_pure_virtual(void)
		{
    ec7c:	b480      	push	{r7}
    ec7e:	af00      	add	r7, sp, #0
		}
    ec80:	bf00      	nop
    ec82:	46bd      	mov	sp, r7
    ec84:	bc80      	pop	{r7}
    ec86:	4770      	bx	lr

0000ec88 <_ZN19CondesatorFan_ClassC1Ev>:
#include "CondesatorFan_Class.h"

// default constructor
CondesatorFan_Class::CondesatorFan_Class()
{
} //CondesatorFan_Class
    ec88:	4770      	bx	lr

0000ec8a <_ZN19CondesatorFan_ClassD1Ev>:

// default destructor
CondesatorFan_Class::~CondesatorFan_Class()
{
} //~CondesatorFan_Class
    ec8a:	4770      	bx	lr

0000ec8c <_ZN19CondesatorFan_Class9SetEnableEb>:
}
uint8_t	CondesatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(2,true);
	return uint8_t(enabled);
}
uint8_t	CondesatorFan_Class::SetEnable(bool state){
    ec8c:	b510      	push	{r4, lr}
    ec8e:	4604      	mov	r4, r0
	enabled=expanders[0]->WriteDigit(0,state);
    ec90:	460a      	mov	r2, r1
    ec92:	2100      	movs	r1, #0
    ec94:	68c0      	ldr	r0, [r0, #12]
    ec96:	4b02      	ldr	r3, [pc, #8]	; (eca0 <_ZN19CondesatorFan_Class9SetEnableEb+0x14>)
    ec98:	4798      	blx	r3
    ec9a:	7060      	strb	r0, [r4, #1]
	
	return uint8_t(enabled);
}
    ec9c:	bd10      	pop	{r4, pc}
    ec9e:	bf00      	nop
    eca0:	00011a6d 	.word	0x00011a6d

0000eca4 <_ZN19CondesatorFan_Class6SetPWMEh>:
	enabled=(value&0x01);
	return enabled;
}


uint8_t	CondesatorFan_Class::SetPWM(uint8_t pwm){
    eca4:	b510      	push	{r4, lr}
    eca6:	4604      	mov	r4, r0
	pwmValue= expanders[6]->WriteGPIORegister(pwm);
    eca8:	6a40      	ldr	r0, [r0, #36]	; 0x24
    ecaa:	4b02      	ldr	r3, [pc, #8]	; (ecb4 <_ZN19CondesatorFan_Class6SetPWMEh+0x10>)
    ecac:	4798      	blx	r3
    ecae:	7120      	strb	r0, [r4, #4]
	return pwmValue;
}
    ecb0:	bd10      	pop	{r4, pc}
    ecb2:	bf00      	nop
    ecb4:	00011881 	.word	0x00011881

0000ecb8 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev>:
	somethingChanged=false;
	
} //EvaporatorAndCondesatorFans_Class

// default destructor
EvaporatorAndCondesatorFans_Class::~EvaporatorAndCondesatorFans_Class()
    ecb8:	b510      	push	{r4, lr}
    ecba:	4604      	mov	r4, r0
    ecbc:	302c      	adds	r0, #44	; 0x2c
    ecbe:	4b03      	ldr	r3, [pc, #12]	; (eccc <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x14>)
    ecc0:	4798      	blx	r3
    ecc2:	4620      	mov	r0, r4
    ecc4:	4b02      	ldr	r3, [pc, #8]	; (ecd0 <_ZN33EvaporatorAndCondesatorFans_ClassD1Ev+0x18>)
    ecc6:	4798      	blx	r3
{
} //~EvaporatorAndCondesatorFans_Class
    ecc8:	4620      	mov	r0, r4
    ecca:	bd10      	pop	{r4, pc}
    eccc:	0000ec8b 	.word	0x0000ec8b
    ecd0:	0000ee49 	.word	0x0000ee49

0000ecd4 <__tcf_1>:
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    ecd4:	b570      	push	{r4, r5, r6, lr}
    ecd6:	4c05      	ldr	r4, [pc, #20]	; (ecec <__tcf_1+0x18>)
    ecd8:	4e05      	ldr	r6, [pc, #20]	; (ecf0 <__tcf_1+0x1c>)
    ecda:	f1a4 05c4 	sub.w	r5, r4, #196	; 0xc4
    ecde:	3c1c      	subs	r4, #28
    ece0:	4620      	mov	r0, r4
    ece2:	47b0      	blx	r6
    ece4:	42ac      	cmp	r4, r5
    ece6:	d1fa      	bne.n	ecde <__tcf_1+0xa>
    ece8:	bd70      	pop	{r4, r5, r6, pc}
    ecea:	bf00      	nop
    ecec:	20001920 	.word	0x20001920
    ecf0:	00011703 	.word	0x00011703

0000ecf4 <__tcf_0>:
static EvaporatorFan_Class	evaporatorFan[2];
    ecf4:	b510      	push	{r4, lr}
    ecf6:	4803      	ldr	r0, [pc, #12]	; (ed04 <__tcf_0+0x10>)
    ecf8:	4c03      	ldr	r4, [pc, #12]	; (ed08 <__tcf_0+0x14>)
    ecfa:	47a0      	blx	r4
    ecfc:	4803      	ldr	r0, [pc, #12]	; (ed0c <__tcf_0+0x18>)
    ecfe:	47a0      	blx	r4
    ed00:	bd10      	pop	{r4, pc}
    ed02:	bf00      	nop
    ed04:	2000194c 	.word	0x2000194c
    ed08:	0000ee49 	.word	0x0000ee49
    ed0c:	20001920 	.word	0x20001920

0000ed10 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev>:
EvaporatorAndCondesatorFans_Class::EvaporatorAndCondesatorFans_Class()
    ed10:	b510      	push	{r4, lr}
    ed12:	4604      	mov	r4, r0
    ed14:	4b0d      	ldr	r3, [pc, #52]	; (ed4c <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x3c>)
    ed16:	4798      	blx	r3
    ed18:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ed1c:	4b0c      	ldr	r3, [pc, #48]	; (ed50 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x40>)
    ed1e:	4798      	blx	r3
	i2c=&i2cSharedStatic;
    ed20:	4b0c      	ldr	r3, [pc, #48]	; (ed54 <_ZN33EvaporatorAndCondesatorFans_ClassC1Ev+0x44>)
    ed22:	f503 728e 	add.w	r2, r3, #284	; 0x11c
    ed26:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	evaporator[0]=&evaporatorFan[0];
    ed2a:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
    ed2e:	65e2      	str	r2, [r4, #92]	; 0x5c
	evaporator[1]=&evaporatorFan[1];
    ed30:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
    ed34:	6622      	str	r2, [r4, #96]	; 0x60
	condesator=&condesatorFan;
    ed36:	f503 7298 	add.w	r2, r3, #304	; 0x130
    ed3a:	6662      	str	r2, [r4, #100]	; 0x64
	ptrFansClass=this;
    ed3c:	f8c3 415c 	str.w	r4, [r3, #348]	; 0x15c
	somethingChanged=false;
    ed40:	2300      	movs	r3, #0
    ed42:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
} //EvaporatorAndCondesatorFans_Class
    ed46:	4620      	mov	r0, r4
    ed48:	bd10      	pop	{r4, pc}
    ed4a:	bf00      	nop
    ed4c:	0000ee31 	.word	0x0000ee31
    ed50:	0000ec89 	.word	0x0000ec89
    ed54:	2000185c 	.word	0x2000185c

0000ed58 <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh>:
		currentExpander=expanders[i];
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
	}
	return 0;
}
void EvaporatorAndCondesatorFans_Class::GetGPIOSValues(uint8_t * gpios){
    ed58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed5a:	f100 0468 	add.w	r4, r0, #104	; 0x68
    ed5e:	1e4d      	subs	r5, r1, #1
    ed60:	f100 0684 	add.w	r6, r0, #132	; 0x84
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
	{
		gpios[i]=expanders[i]->ReadGPIORegister();
    ed64:	4f04      	ldr	r7, [pc, #16]	; (ed78 <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0x20>)
    ed66:	f854 0b04 	ldr.w	r0, [r4], #4
    ed6a:	47b8      	blx	r7
    ed6c:	f805 0f01 	strb.w	r0, [r5, #1]!
	for (uint8_t  i= 0; i < EVAPORATOR_AND_CONDESATOR_EXPANDERS; i++)
    ed70:	42b4      	cmp	r4, r6
    ed72:	d1f8      	bne.n	ed66 <_ZN33EvaporatorAndCondesatorFans_Class14GetGPIOSValuesEPh+0xe>
	}
	

}
    ed74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ed76:	bf00      	nop
    ed78:	000117fd 	.word	0x000117fd

0000ed7c <_GLOBAL__sub_I_ptrFansClass>:

EvaporatorAndCondesatorFans_Class  fans;
    ed7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static I2C_Sync_Class	i2cSharedStatic(&I2C_FANS);
    ed80:	4c1c      	ldr	r4, [pc, #112]	; (edf4 <_GLOBAL__sub_I_ptrFansClass+0x78>)
    ed82:	f504 758e 	add.w	r5, r4, #284	; 0x11c
    ed86:	491c      	ldr	r1, [pc, #112]	; (edf8 <_GLOBAL__sub_I_ptrFansClass+0x7c>)
    ed88:	4628      	mov	r0, r5
    ed8a:	4b1c      	ldr	r3, [pc, #112]	; (edfc <_GLOBAL__sub_I_ptrFansClass+0x80>)
    ed8c:	4798      	blx	r3
    ed8e:	4f1c      	ldr	r7, [pc, #112]	; (ee00 <_GLOBAL__sub_I_ptrFansClass+0x84>)
    ed90:	463a      	mov	r2, r7
    ed92:	491c      	ldr	r1, [pc, #112]	; (ee04 <_GLOBAL__sub_I_ptrFansClass+0x88>)
    ed94:	4628      	mov	r0, r5
    ed96:	4e1c      	ldr	r6, [pc, #112]	; (ee08 <_GLOBAL__sub_I_ptrFansClass+0x8c>)
    ed98:	47b0      	blx	r6
static EvaporatorFan_Class	evaporatorFan[2];
    ed9a:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
    ed9e:	4628      	mov	r0, r5
    eda0:	f8df 8088 	ldr.w	r8, [pc, #136]	; ee2c <_GLOBAL__sub_I_ptrFansClass+0xb0>
    eda4:	47c0      	blx	r8
    eda6:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    edaa:	47c0      	blx	r8
    edac:	463a      	mov	r2, r7
    edae:	4917      	ldr	r1, [pc, #92]	; (ee0c <_GLOBAL__sub_I_ptrFansClass+0x90>)
    edb0:	2000      	movs	r0, #0
    edb2:	47b0      	blx	r6
static CondesatorFan_Class	condesatorFan;
    edb4:	f504 7898 	add.w	r8, r4, #304	; 0x130
    edb8:	4640      	mov	r0, r8
    edba:	4b15      	ldr	r3, [pc, #84]	; (ee10 <_GLOBAL__sub_I_ptrFansClass+0x94>)
    edbc:	4798      	blx	r3
    edbe:	463a      	mov	r2, r7
    edc0:	4914      	ldr	r1, [pc, #80]	; (ee14 <_GLOBAL__sub_I_ptrFansClass+0x98>)
    edc2:	4640      	mov	r0, r8
    edc4:	47b0      	blx	r6
static	MCP23008_Class expandersStatic[EVAPORATOR_AND_CONDESATOR_EXPANDERS];
    edc6:	4e14      	ldr	r6, [pc, #80]	; (ee18 <_GLOBAL__sub_I_ptrFansClass+0x9c>)
    edc8:	4620      	mov	r0, r4
    edca:	47b0      	blx	r6
    edcc:	341c      	adds	r4, #28
    edce:	42a5      	cmp	r5, r4
    edd0:	d1fa      	bne.n	edc8 <_GLOBAL__sub_I_ptrFansClass+0x4c>
    edd2:	4e0b      	ldr	r6, [pc, #44]	; (ee00 <_GLOBAL__sub_I_ptrFansClass+0x84>)
    edd4:	4632      	mov	r2, r6
    edd6:	4911      	ldr	r1, [pc, #68]	; (ee1c <_GLOBAL__sub_I_ptrFansClass+0xa0>)
    edd8:	2000      	movs	r0, #0
    edda:	4c0b      	ldr	r4, [pc, #44]	; (ee08 <_GLOBAL__sub_I_ptrFansClass+0x8c>)
    eddc:	47a0      	blx	r4
EvaporatorAndCondesatorFans_Class  fans;
    edde:	4d10      	ldr	r5, [pc, #64]	; (ee20 <_GLOBAL__sub_I_ptrFansClass+0xa4>)
    ede0:	4628      	mov	r0, r5
    ede2:	4b10      	ldr	r3, [pc, #64]	; (ee24 <_GLOBAL__sub_I_ptrFansClass+0xa8>)
    ede4:	4798      	blx	r3
    ede6:	4632      	mov	r2, r6
    ede8:	490f      	ldr	r1, [pc, #60]	; (ee28 <_GLOBAL__sub_I_ptrFansClass+0xac>)
    edea:	4628      	mov	r0, r5
    edec:	47a0      	blx	r4
    edee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    edf2:	bf00      	nop
    edf4:	2000185c 	.word	0x2000185c
    edf8:	20009df8 	.word	0x20009df8
    edfc:	0000db3d 	.word	0x0000db3d
    ee00:	20000000 	.word	0x20000000
    ee04:	0000db59 	.word	0x0000db59
    ee08:	00013091 	.word	0x00013091
    ee0c:	0000ecf5 	.word	0x0000ecf5
    ee10:	0000ec89 	.word	0x0000ec89
    ee14:	0000ec8b 	.word	0x0000ec8b
    ee18:	000116ef 	.word	0x000116ef
    ee1c:	0000ecd5 	.word	0x0000ecd5
    ee20:	200019bc 	.word	0x200019bc
    ee24:	0000ed11 	.word	0x0000ed11
    ee28:	0000ecb9 	.word	0x0000ecb9
    ee2c:	0000ee31 	.word	0x0000ee31

0000ee30 <_ZN19EvaporatorFan_ClassC1Ev>:




// default constructor
EvaporatorFan_Class::EvaporatorFan_Class()
    ee30:	b510      	push	{r4, lr}
    ee32:	4604      	mov	r4, r0
    ee34:	4b02      	ldr	r3, [pc, #8]	; (ee40 <_ZN19EvaporatorFan_ClassC1Ev+0x10>)
    ee36:	4798      	blx	r3
{
	
	ptrEvaFanClass=this;
    ee38:	4b02      	ldr	r3, [pc, #8]	; (ee44 <_ZN19EvaporatorFan_ClassC1Ev+0x14>)
    ee3a:	601c      	str	r4, [r3, #0]
	
} //EvaporatorFan_Class
    ee3c:	4620      	mov	r0, r4
    ee3e:	bd10      	pop	{r4, pc}
    ee40:	0000ee99 	.word	0x0000ee99
    ee44:	20001a48 	.word	0x20001a48

0000ee48 <_ZN19EvaporatorFan_ClassD1Ev>:

// default destructor
EvaporatorFan_Class::~EvaporatorFan_Class()
    ee48:	b510      	push	{r4, lr}
    ee4a:	4604      	mov	r4, r0
    ee4c:	4b01      	ldr	r3, [pc, #4]	; (ee54 <_ZN19EvaporatorFan_ClassD1Ev+0xc>)
    ee4e:	4798      	blx	r3
{
} //~EvaporatorFan_Class
    ee50:	4620      	mov	r0, r4
    ee52:	bd10      	pop	{r4, pc}
    ee54:	0000ee9b 	.word	0x0000ee9b

0000ee58 <_ZN19EvaporatorFan_Class9SetEnableEb>:
}
uint8_t	EvaporatorFan_Class::Enable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,true);
	return uint8_t(enabled);
}
uint8_t	EvaporatorFan_Class::SetEnable(bool state){
    ee58:	b510      	push	{r4, lr}
    ee5a:	4604      	mov	r4, r0
	uint8_t fanCorrrection=fanNumber==1?2:1;
    ee5c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ee60:	2b01      	cmp	r3, #1
	enabled=expanders[0]->WriteDigit(fanCorrrection,!state);
    ee62:	f081 0201 	eor.w	r2, r1, #1
    ee66:	bf0c      	ite	eq
    ee68:	2102      	moveq	r1, #2
    ee6a:	2101      	movne	r1, #1
    ee6c:	68c0      	ldr	r0, [r0, #12]
    ee6e:	4b02      	ldr	r3, [pc, #8]	; (ee78 <_ZN19EvaporatorFan_Class9SetEnableEb+0x20>)
    ee70:	4798      	blx	r3
    ee72:	70e0      	strb	r0, [r4, #3]
	return uint8_t(enabled);
}
    ee74:	bd10      	pop	{r4, pc}
    ee76:	bf00      	nop
    ee78:	00011a6d 	.word	0x00011a6d

0000ee7c <_ZN19EvaporatorFan_Class6SetPWMEh>:
uint8_t	EvaporatorFan_Class::Disable(void){
	enabled=expanders[0]->WriteDigit(fanNumber,false)?false:true;
	return uint8_t(enabled);
}

uint8_t	EvaporatorFan_Class::SetPWM(uint8_t pwm){
    ee7c:	b510      	push	{r4, lr}
    ee7e:	4604      	mov	r4, r0
	pwmValue= expanders[4+fanNumber]->WriteGPIORegister(pwm);
    ee80:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ee84:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ee88:	69d8      	ldr	r0, [r3, #28]
    ee8a:	4b02      	ldr	r3, [pc, #8]	; (ee94 <_ZN19EvaporatorFan_Class6SetPWMEh+0x18>)
    ee8c:	4798      	blx	r3
    ee8e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	
	return pwmValue;
}
    ee92:	bd10      	pop	{r4, pc}
    ee94:	00011881 	.word	0x00011881

0000ee98 <_ZN29EvaporatorFanDataStruct_ClassC1Ev>:
#include "EvaporatorFanDataStruct_Class.h"

// default constructor
EvaporatorFanDataStruct_Class::EvaporatorFanDataStruct_Class()
{
} //EvaporatorFanDataStruct_Class
    ee98:	4770      	bx	lr

0000ee9a <_ZN29EvaporatorFanDataStruct_ClassD1Ev>:

// default destructor
EvaporatorFanDataStruct_Class::~EvaporatorFanDataStruct_Class()
{
} //~EvaporatorFanDataStruct_Class
    ee9a:	4770      	bx	lr

0000ee9c <_ZN29Dual_Flapper_Valve_ControllerD1Ev>:
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
{
} //Dual_Flapper_Valve_Controller

// default destructor
Dual_Flapper_Valve_Controller::~Dual_Flapper_Valve_Controller()
    ee9c:	b510      	push	{r4, lr}
    ee9e:	4604      	mov	r4, r0
    eea0:	4b01      	ldr	r3, [pc, #4]	; (eea8 <_ZN29Dual_Flapper_Valve_ControllerD1Ev+0xc>)
    eea2:	4798      	blx	r3
{
} //~Dual_Flapper_Valve_Controller
    eea4:	4620      	mov	r0, r4
    eea6:	bd10      	pop	{r4, pc}
    eea8:	0000f331 	.word	0x0000f331

0000eeac <__tcf_0>:
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
    eeac:	b538      	push	{r3, r4, r5, lr}
    eeae:	4d04      	ldr	r5, [pc, #16]	; (eec0 <__tcf_0+0x14>)
    eeb0:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
    eeb4:	4c03      	ldr	r4, [pc, #12]	; (eec4 <__tcf_0+0x18>)
    eeb6:	47a0      	blx	r4
    eeb8:	4628      	mov	r0, r5
    eeba:	47a0      	blx	r4
    eebc:	bd38      	pop	{r3, r4, r5, pc}
    eebe:	bf00      	nop
    eec0:	20001a4c 	.word	0x20001a4c
    eec4:	0000f331 	.word	0x0000f331

0000eec8 <_ZN29Dual_Flapper_Valve_Controller4InitEv>:

bool Dual_Flapper_Valve_Controller::Init(){
    eec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eeca:	4604      	mov	r4, r0
	for (uint8_t i = 0; i < FLAPPER_VALVE_QUANTITY; i++)
	{
		fvx[i]=&staticFVController[i];
    eecc:	4d12      	ldr	r5, [pc, #72]	; (ef18 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x50>)
    eece:	f8c0 50dc 	str.w	r5, [r0, #220]	; 0xdc
		fvx[i]->InitController(i);
    eed2:	2100      	movs	r1, #0
    eed4:	4628      	mov	r0, r5
    eed6:	4f11      	ldr	r7, [pc, #68]	; (ef1c <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x54>)
    eed8:	47b8      	blx	r7
		fvx[i]->SetPartner(fvx[1-i]);
    eeda:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
    eede:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
    eee2:	4e0f      	ldr	r6, [pc, #60]	; (ef20 <_ZN29Dual_Flapper_Valve_Controller4InitEv+0x58>)
    eee4:	47b0      	blx	r6
		fvx[i]=&staticFVController[i];
    eee6:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
    eeea:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
		fvx[i]->InitController(i);
    eeee:	2101      	movs	r1, #1
    eef0:	47b8      	blx	r7
		fvx[i]->SetPartner(fvx[1-i]);
    eef2:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
    eef6:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    eefa:	47b0      	blx	r6
	
	}
	fv1=fvx[0]; 
    eefc:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
    ef00:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
	fv2=fvx[1]; 
    ef04:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    ef08:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	return (fv1->isOK)&(fv2->isOK);
    ef0c:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
    ef10:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    ef14:	4010      	ands	r0, r2
    ef16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ef18:	20001a4c 	.word	0x20001a4c
    ef1c:	0000f351 	.word	0x0000f351
    ef20:	0000f6d5 	.word	0x0000f6d5

0000ef24 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev>:
		boolResult=	!fv1->dataStruct.controlOutputs.iAlcFvStandAloneOut;
	}
	return boolResult;
}

Dual_Flapper_Valve_Controller fv;
    ef24:	b570      	push	{r4, r5, r6, lr}
static FlapperValveController staticFVController[FLAPPER_VALVE_QUANTITY];
    ef26:	4c0b      	ldr	r4, [pc, #44]	; (ef54 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x30>)
    ef28:	4620      	mov	r0, r4
    ef2a:	4d0b      	ldr	r5, [pc, #44]	; (ef58 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x34>)
    ef2c:	47a8      	blx	r5
    ef2e:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
    ef32:	47a8      	blx	r5
    ef34:	4e09      	ldr	r6, [pc, #36]	; (ef5c <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x38>)
    ef36:	4632      	mov	r2, r6
    ef38:	4909      	ldr	r1, [pc, #36]	; (ef60 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x3c>)
    ef3a:	2000      	movs	r0, #0
    ef3c:	4d09      	ldr	r5, [pc, #36]	; (ef64 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x40>)
    ef3e:	47a8      	blx	r5
Dual_Flapper_Valve_Controller::Dual_Flapper_Valve_Controller()
    ef40:	f504 74d4 	add.w	r4, r4, #424	; 0x1a8
    ef44:	4620      	mov	r0, r4
    ef46:	4b08      	ldr	r3, [pc, #32]	; (ef68 <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x44>)
    ef48:	4798      	blx	r3
Dual_Flapper_Valve_Controller fv;
    ef4a:	4632      	mov	r2, r6
    ef4c:	4907      	ldr	r1, [pc, #28]	; (ef6c <_GLOBAL__sub_I__ZN29Dual_Flapper_Valve_ControllerC2Ev+0x48>)
    ef4e:	4620      	mov	r0, r4
    ef50:	47a8      	blx	r5
    ef52:	bd70      	pop	{r4, r5, r6, pc}
    ef54:	20001a4c 	.word	0x20001a4c
    ef58:	0000f2a9 	.word	0x0000f2a9
    ef5c:	20000000 	.word	0x20000000
    ef60:	0000eead 	.word	0x0000eead
    ef64:	00013091 	.word	0x00013091
    ef68:	0000f2a9 	.word	0x0000f2a9
    ef6c:	0000ee9d 	.word	0x0000ee9d

0000ef70 <hri_port_read_DIR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_dir_reg_t hri_port_read_DIR_reg(const void *const hw, uint8_t submodule_index)
{
    ef70:	b480      	push	{r7}
    ef72:	b083      	sub	sp, #12
    ef74:	af00      	add	r7, sp, #0
    ef76:	6078      	str	r0, [r7, #4]
    ef78:	460b      	mov	r3, r1
    ef7a:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    ef7c:	78fb      	ldrb	r3, [r7, #3]
    ef7e:	687a      	ldr	r2, [r7, #4]
    ef80:	01db      	lsls	r3, r3, #7
    ef82:	4413      	add	r3, r2
    ef84:	681b      	ldr	r3, [r3, #0]
}
    ef86:	4618      	mov	r0, r3
    ef88:	370c      	adds	r7, #12
    ef8a:	46bd      	mov	sp, r7
    ef8c:	bc80      	pop	{r7}
    ef8e:	4770      	bx	lr

0000ef90 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    ef90:	b480      	push	{r7}
    ef92:	b085      	sub	sp, #20
    ef94:	af00      	add	r7, sp, #0
    ef96:	60f8      	str	r0, [r7, #12]
    ef98:	460b      	mov	r3, r1
    ef9a:	607a      	str	r2, [r7, #4]
    ef9c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    ef9e:	7afb      	ldrb	r3, [r7, #11]
    efa0:	68fa      	ldr	r2, [r7, #12]
    efa2:	01db      	lsls	r3, r3, #7
    efa4:	4413      	add	r3, r2
    efa6:	3318      	adds	r3, #24
    efa8:	687a      	ldr	r2, [r7, #4]
    efaa:	601a      	str	r2, [r3, #0]
}
    efac:	bf00      	nop
    efae:	3714      	adds	r7, #20
    efb0:	46bd      	mov	sp, r7
    efb2:	bc80      	pop	{r7}
    efb4:	4770      	bx	lr

0000efb6 <hri_port_read_OUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_out_reg_t hri_port_read_OUT_reg(const void *const hw, uint8_t submodule_index)
{
    efb6:	b480      	push	{r7}
    efb8:	b083      	sub	sp, #12
    efba:	af00      	add	r7, sp, #0
    efbc:	6078      	str	r0, [r7, #4]
    efbe:	460b      	mov	r3, r1
    efc0:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    efc2:	78fb      	ldrb	r3, [r7, #3]
    efc4:	687a      	ldr	r2, [r7, #4]
    efc6:	01db      	lsls	r3, r3, #7
    efc8:	4413      	add	r3, r2
    efca:	3310      	adds	r3, #16
    efcc:	681b      	ldr	r3, [r3, #0]
}
    efce:	4618      	mov	r0, r3
    efd0:	370c      	adds	r7, #12
    efd2:	46bd      	mov	sp, r7
    efd4:	bc80      	pop	{r7}
    efd6:	4770      	bx	lr

0000efd8 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    efd8:	b480      	push	{r7}
    efda:	b085      	sub	sp, #20
    efdc:	af00      	add	r7, sp, #0
    efde:	60f8      	str	r0, [r7, #12]
    efe0:	460b      	mov	r3, r1
    efe2:	607a      	str	r2, [r7, #4]
    efe4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    efe6:	7afb      	ldrb	r3, [r7, #11]
    efe8:	68fa      	ldr	r2, [r7, #12]
    efea:	01db      	lsls	r3, r3, #7
    efec:	4413      	add	r3, r2
    efee:	3314      	adds	r3, #20
    eff0:	687a      	ldr	r2, [r7, #4]
    eff2:	601a      	str	r2, [r3, #0]
}
    eff4:	bf00      	nop
    eff6:	3714      	adds	r7, #20
    eff8:	46bd      	mov	sp, r7
    effa:	bc80      	pop	{r7}
    effc:	4770      	bx	lr

0000effe <hri_port_toggle_OUT_reg>:

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
    effe:	b480      	push	{r7}
    f000:	b085      	sub	sp, #20
    f002:	af00      	add	r7, sp, #0
    f004:	60f8      	str	r0, [r7, #12]
    f006:	460b      	mov	r3, r1
    f008:	607a      	str	r2, [r7, #4]
    f00a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    f00c:	7afb      	ldrb	r3, [r7, #11]
    f00e:	68fa      	ldr	r2, [r7, #12]
    f010:	01db      	lsls	r3, r3, #7
    f012:	4413      	add	r3, r2
    f014:	331c      	adds	r3, #28
    f016:	687a      	ldr	r2, [r7, #4]
    f018:	601a      	str	r2, [r3, #0]
}
    f01a:	bf00      	nop
    f01c:	3714      	adds	r7, #20
    f01e:	46bd      	mov	sp, r7
    f020:	bc80      	pop	{r7}
    f022:	4770      	bx	lr

0000f024 <hri_port_read_IN_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
    f024:	b480      	push	{r7}
    f026:	b083      	sub	sp, #12
    f028:	af00      	add	r7, sp, #0
    f02a:	6078      	str	r0, [r7, #4]
    f02c:	460b      	mov	r3, r1
    f02e:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    f030:	78fb      	ldrb	r3, [r7, #3]
    f032:	687a      	ldr	r2, [r7, #4]
    f034:	01db      	lsls	r3, r3, #7
    f036:	4413      	add	r3, r2
    f038:	3320      	adds	r3, #32
    f03a:	681b      	ldr	r3, [r3, #0]
}
    f03c:	4618      	mov	r0, r3
    f03e:	370c      	adds	r7, #12
    f040:	46bd      	mov	sp, r7
    f042:	bc80      	pop	{r7}
    f044:	4770      	bx	lr
	...

0000f048 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
    f048:	b580      	push	{r7, lr}
    f04a:	b082      	sub	sp, #8
    f04c:	af00      	add	r7, sp, #0
    f04e:	4603      	mov	r3, r0
    f050:	6039      	str	r1, [r7, #0]
    f052:	71fb      	strb	r3, [r7, #7]
    f054:	4613      	mov	r3, r2
    f056:	71bb      	strb	r3, [r7, #6]
	if (level) {
    f058:	79bb      	ldrb	r3, [r7, #6]
    f05a:	2b00      	cmp	r3, #0
    f05c:	d006      	beq.n	f06c <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    f05e:	79fb      	ldrb	r3, [r7, #7]
    f060:	683a      	ldr	r2, [r7, #0]
    f062:	4619      	mov	r1, r3
    f064:	4806      	ldr	r0, [pc, #24]	; (f080 <_gpio_set_level+0x38>)
    f066:	4b07      	ldr	r3, [pc, #28]	; (f084 <_gpio_set_level+0x3c>)
    f068:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
    f06a:	e005      	b.n	f078 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    f06c:	79fb      	ldrb	r3, [r7, #7]
    f06e:	683a      	ldr	r2, [r7, #0]
    f070:	4619      	mov	r1, r3
    f072:	4803      	ldr	r0, [pc, #12]	; (f080 <_gpio_set_level+0x38>)
    f074:	4b04      	ldr	r3, [pc, #16]	; (f088 <_gpio_set_level+0x40>)
    f076:	4798      	blx	r3
}
    f078:	bf00      	nop
    f07a:	3708      	adds	r7, #8
    f07c:	46bd      	mov	sp, r7
    f07e:	bd80      	pop	{r7, pc}
    f080:	41008000 	.word	0x41008000
    f084:	0000ef91 	.word	0x0000ef91
    f088:	0000efd9 	.word	0x0000efd9

0000f08c <_gpio_toggle_level>:

/**
 * \brief Change output level to the opposite with mask
 */
static inline void _gpio_toggle_level(const enum gpio_port port, const uint32_t mask)
{
    f08c:	b580      	push	{r7, lr}
    f08e:	b082      	sub	sp, #8
    f090:	af00      	add	r7, sp, #0
    f092:	4603      	mov	r3, r0
    f094:	6039      	str	r1, [r7, #0]
    f096:	71fb      	strb	r3, [r7, #7]
	hri_port_toggle_OUT_reg(PORT, port, mask);
    f098:	79fb      	ldrb	r3, [r7, #7]
    f09a:	683a      	ldr	r2, [r7, #0]
    f09c:	4619      	mov	r1, r3
    f09e:	4803      	ldr	r0, [pc, #12]	; (f0ac <_gpio_toggle_level+0x20>)
    f0a0:	4b03      	ldr	r3, [pc, #12]	; (f0b0 <_gpio_toggle_level+0x24>)
    f0a2:	4798      	blx	r3
}
    f0a4:	bf00      	nop
    f0a6:	3708      	adds	r7, #8
    f0a8:	46bd      	mov	sp, r7
    f0aa:	bd80      	pop	{r7, pc}
    f0ac:	41008000 	.word	0x41008000
    f0b0:	0000efff 	.word	0x0000efff

0000f0b4 <_gpio_get_level>:

/**
 * \brief Get input levels on all port pins
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
    f0b4:	b580      	push	{r7, lr}
    f0b6:	b086      	sub	sp, #24
    f0b8:	af00      	add	r7, sp, #0
    f0ba:	4603      	mov	r3, r0
    f0bc:	71fb      	strb	r3, [r7, #7]
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    f0be:	f107 030c 	add.w	r3, r7, #12
    f0c2:	4618      	mov	r0, r3
    f0c4:	4b13      	ldr	r3, [pc, #76]	; (f114 <_gpio_get_level+0x60>)
    f0c6:	4798      	blx	r3

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    f0c8:	79fb      	ldrb	r3, [r7, #7]
    f0ca:	4619      	mov	r1, r3
    f0cc:	4812      	ldr	r0, [pc, #72]	; (f118 <_gpio_get_level+0x64>)
    f0ce:	4b13      	ldr	r3, [pc, #76]	; (f11c <_gpio_get_level+0x68>)
    f0d0:	4798      	blx	r3
    f0d2:	6178      	str	r0, [r7, #20]

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    f0d4:	79fb      	ldrb	r3, [r7, #7]
    f0d6:	4619      	mov	r1, r3
    f0d8:	480f      	ldr	r0, [pc, #60]	; (f118 <_gpio_get_level+0x64>)
    f0da:	4b11      	ldr	r3, [pc, #68]	; (f120 <_gpio_get_level+0x6c>)
    f0dc:	4798      	blx	r3
    f0de:	4602      	mov	r2, r0
    f0e0:	697b      	ldr	r3, [r7, #20]
    f0e2:	43db      	mvns	r3, r3
    f0e4:	4013      	ands	r3, r2
    f0e6:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    f0e8:	79fb      	ldrb	r3, [r7, #7]
    f0ea:	4619      	mov	r1, r3
    f0ec:	480a      	ldr	r0, [pc, #40]	; (f118 <_gpio_get_level+0x64>)
    f0ee:	4b0d      	ldr	r3, [pc, #52]	; (f124 <_gpio_get_level+0x70>)
    f0f0:	4798      	blx	r3
    f0f2:	4602      	mov	r2, r0
    f0f4:	697b      	ldr	r3, [r7, #20]
    f0f6:	4013      	ands	r3, r2
    f0f8:	693a      	ldr	r2, [r7, #16]
    f0fa:	4313      	orrs	r3, r2
    f0fc:	613b      	str	r3, [r7, #16]

	CRITICAL_SECTION_LEAVE();
    f0fe:	f107 030c 	add.w	r3, r7, #12
    f102:	4618      	mov	r0, r3
    f104:	4b08      	ldr	r3, [pc, #32]	; (f128 <_gpio_get_level+0x74>)
    f106:	4798      	blx	r3

	return tmp;
    f108:	693b      	ldr	r3, [r7, #16]
}
    f10a:	4618      	mov	r0, r3
    f10c:	3718      	adds	r7, #24
    f10e:	46bd      	mov	sp, r7
    f110:	bd80      	pop	{r7, pc}
    f112:	bf00      	nop
    f114:	0000bc79 	.word	0x0000bc79
    f118:	41008000 	.word	0x41008000
    f11c:	0000ef71 	.word	0x0000ef71
    f120:	0000f025 	.word	0x0000f025
    f124:	0000efb7 	.word	0x0000efb7
    f128:	0000bc9f 	.word	0x0000bc9f

0000f12c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
    f12c:	b580      	push	{r7, lr}
    f12e:	b082      	sub	sp, #8
    f130:	af00      	add	r7, sp, #0
    f132:	4603      	mov	r3, r0
    f134:	460a      	mov	r2, r1
    f136:	71fb      	strb	r3, [r7, #7]
    f138:	4613      	mov	r3, r2
    f13a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    f13c:	79fb      	ldrb	r3, [r7, #7]
    f13e:	115b      	asrs	r3, r3, #5
    f140:	b2d8      	uxtb	r0, r3
    f142:	79fb      	ldrb	r3, [r7, #7]
    f144:	f003 031f 	and.w	r3, r3, #31
    f148:	2201      	movs	r2, #1
    f14a:	fa02 f303 	lsl.w	r3, r2, r3
    f14e:	79ba      	ldrb	r2, [r7, #6]
    f150:	4619      	mov	r1, r3
    f152:	4b03      	ldr	r3, [pc, #12]	; (f160 <gpio_set_pin_level+0x34>)
    f154:	4798      	blx	r3
}
    f156:	bf00      	nop
    f158:	3708      	adds	r7, #8
    f15a:	46bd      	mov	sp, r7
    f15c:	bd80      	pop	{r7, pc}
    f15e:	bf00      	nop
    f160:	0000f049 	.word	0x0000f049

0000f164 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
    f164:	b580      	push	{r7, lr}
    f166:	b082      	sub	sp, #8
    f168:	af00      	add	r7, sp, #0
    f16a:	4603      	mov	r3, r0
    f16c:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
    f16e:	79fb      	ldrb	r3, [r7, #7]
    f170:	115b      	asrs	r3, r3, #5
    f172:	b2d8      	uxtb	r0, r3
    f174:	79fb      	ldrb	r3, [r7, #7]
    f176:	f003 031f 	and.w	r3, r3, #31
    f17a:	2201      	movs	r2, #1
    f17c:	fa02 f303 	lsl.w	r3, r2, r3
    f180:	4619      	mov	r1, r3
    f182:	4b03      	ldr	r3, [pc, #12]	; (f190 <gpio_toggle_pin_level+0x2c>)
    f184:	4798      	blx	r3
}
    f186:	bf00      	nop
    f188:	3708      	adds	r7, #8
    f18a:	46bd      	mov	sp, r7
    f18c:	bd80      	pop	{r7, pc}
    f18e:	bf00      	nop
    f190:	0000f08d 	.word	0x0000f08d

0000f194 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    f194:	b580      	push	{r7, lr}
    f196:	b082      	sub	sp, #8
    f198:	af00      	add	r7, sp, #0
    f19a:	4603      	mov	r3, r0
    f19c:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    f19e:	79fb      	ldrb	r3, [r7, #7]
    f1a0:	115b      	asrs	r3, r3, #5
    f1a2:	b2db      	uxtb	r3, r3
    f1a4:	4618      	mov	r0, r3
    f1a6:	4b09      	ldr	r3, [pc, #36]	; (f1cc <gpio_get_pin_level+0x38>)
    f1a8:	4798      	blx	r3
    f1aa:	4601      	mov	r1, r0
    f1ac:	79fb      	ldrb	r3, [r7, #7]
    f1ae:	f003 031f 	and.w	r3, r3, #31
    f1b2:	2201      	movs	r2, #1
    f1b4:	fa02 f303 	lsl.w	r3, r2, r3
    f1b8:	400b      	ands	r3, r1
    f1ba:	2b00      	cmp	r3, #0
    f1bc:	bf14      	ite	ne
    f1be:	2301      	movne	r3, #1
    f1c0:	2300      	moveq	r3, #0
    f1c2:	b2db      	uxtb	r3, r3
}
    f1c4:	4618      	mov	r0, r3
    f1c6:	3708      	adds	r7, #8
    f1c8:	46bd      	mov	sp, r7
    f1ca:	bd80      	pop	{r7, pc}
    f1cc:	0000f0b5 	.word	0x0000f0b5

0000f1d0 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task>:
FlapperValveController	*ptrFlapperValveController[FLAPPER_VALVE_QUANTITY];

static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];

static void TimeoutFlapperValve1Controller(const struct timer_task *const timer_task)
{
    f1d0:	b480      	push	{r7}
    f1d2:	b083      	sub	sp, #12
    f1d4:	af00      	add	r7, sp, #0
    f1d6:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[0]->timeoutFlapperValveController=true;
    f1d8:	4b07      	ldr	r3, [pc, #28]	; (f1f8 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
    f1da:	681b      	ldr	r3, [r3, #0]
    f1dc:	2201      	movs	r2, #1
    f1de:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	//ptrFlapperValveController->timeoutKeepControlling=true;
		ptrFlapperValveController[0]->unLockTimeout=true;
    f1e2:	4b05      	ldr	r3, [pc, #20]	; (f1f8 <_ZL30TimeoutFlapperValve1ControllerPK10timer_task+0x28>)
    f1e4:	681b      	ldr	r3, [r3, #0]
    f1e6:	2201      	movs	r2, #1
    f1e8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	
}
    f1ec:	bf00      	nop
    f1ee:	370c      	adds	r7, #12
    f1f0:	46bd      	mov	sp, r7
    f1f2:	bc80      	pop	{r7}
    f1f4:	4770      	bx	lr
    f1f6:	bf00      	nop
    f1f8:	20001dfc 	.word	0x20001dfc

0000f1fc <_ZL30TimeoutFlapperValve2ControllerPK10timer_task>:
static void TimeoutFlapperValve2Controller(const struct timer_task *const timer_task)
{
    f1fc:	b480      	push	{r7}
    f1fe:	b083      	sub	sp, #12
    f200:	af00      	add	r7, sp, #0
    f202:	6078      	str	r0, [r7, #4]
	ptrFlapperValveController[1]->timeoutFlapperValveController=true;
    f204:	4b07      	ldr	r3, [pc, #28]	; (f224 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
    f206:	685b      	ldr	r3, [r3, #4]
    f208:	2201      	movs	r2, #1
    f20a:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->unLockTimeout=true;
    f20e:	4b05      	ldr	r3, [pc, #20]	; (f224 <_ZL30TimeoutFlapperValve2ControllerPK10timer_task+0x28>)
    f210:	685b      	ldr	r3, [r3, #4]
    f212:	2201      	movs	r2, #1
    f214:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	
}
    f218:	bf00      	nop
    f21a:	370c      	adds	r7, #12
    f21c:	46bd      	mov	sp, r7
    f21e:	bc80      	pop	{r7}
    f220:	4770      	bx	lr
    f222:	bf00      	nop
    f224:	20001dfc 	.word	0x20001dfc

0000f228 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task>:
static void TimeoutFlapperValve1FullyClossed(const struct timer_task *const timer_task)
{
    f228:	b480      	push	{r7}
    f22a:	b083      	sub	sp, #12
    f22c:	af00      	add	r7, sp, #0
    f22e:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[0]->fullClosedTimeout=true;
    f230:	4b04      	ldr	r3, [pc, #16]	; (f244 <_ZL32TimeoutFlapperValve1FullyClossedPK10timer_task+0x1c>)
    f232:	681b      	ldr	r3, [r3, #0]
    f234:	2201      	movs	r2, #1
    f236:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	
}
    f23a:	bf00      	nop
    f23c:	370c      	adds	r7, #12
    f23e:	46bd      	mov	sp, r7
    f240:	bc80      	pop	{r7}
    f242:	4770      	bx	lr
    f244:	20001dfc 	.word	0x20001dfc

0000f248 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task>:
static void TimeoutFlapperValve2FullyClossed(const struct timer_task *const timer_task)
{
    f248:	b480      	push	{r7}
    f24a:	b083      	sub	sp, #12
    f24c:	af00      	add	r7, sp, #0
    f24e:	6078      	str	r0, [r7, #4]
	//	ptrFlapperValveController->timeoutFlapperValveController=true;
	//ptrFlapperValveController->timeoutKeepControlling=true;
	ptrFlapperValveController[1]->fullClosedTimeout=true;
    f250:	4b04      	ldr	r3, [pc, #16]	; (f264 <_ZL32TimeoutFlapperValve2FullyClossedPK10timer_task+0x1c>)
    f252:	685b      	ldr	r3, [r3, #4]
    f254:	2201      	movs	r2, #1
    f256:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	
}
    f25a:	bf00      	nop
    f25c:	370c      	adds	r7, #12
    f25e:	46bd      	mov	sp, r7
    f260:	bc80      	pop	{r7}
    f262:	4770      	bx	lr
    f264:	20001dfc 	.word	0x20001dfc

0000f268 <_ZL18ResetValve1TimeoutPK10timer_task>:

static void ResetValve1Timeout(const struct timer_task *const timer_task)
{
    f268:	b480      	push	{r7}
    f26a:	b083      	sub	sp, #12
    f26c:	af00      	add	r7, sp, #0
    f26e:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[0]->resetTimeout=true;
    f270:	4b04      	ldr	r3, [pc, #16]	; (f284 <_ZL18ResetValve1TimeoutPK10timer_task+0x1c>)
    f272:	681b      	ldr	r3, [r3, #0]
    f274:	2201      	movs	r2, #1
    f276:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
}
    f27a:	bf00      	nop
    f27c:	370c      	adds	r7, #12
    f27e:	46bd      	mov	sp, r7
    f280:	bc80      	pop	{r7}
    f282:	4770      	bx	lr
    f284:	20001dfc 	.word	0x20001dfc

0000f288 <_ZL18ResetValve2TimeoutPK10timer_task>:
static void ResetValve2Timeout(const struct timer_task *const timer_task)
{
    f288:	b480      	push	{r7}
    f28a:	b083      	sub	sp, #12
    f28c:	af00      	add	r7, sp, #0
    f28e:	6078      	str	r0, [r7, #4]

	ptrFlapperValveController[1]->resetTimeout=true;
    f290:	4b04      	ldr	r3, [pc, #16]	; (f2a4 <_ZL18ResetValve2TimeoutPK10timer_task+0x1c>)
    f292:	685b      	ldr	r3, [r3, #4]
    f294:	2201      	movs	r2, #1
    f296:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
}
    f29a:	bf00      	nop
    f29c:	370c      	adds	r7, #12
    f29e:	46bd      	mov	sp, r7
    f2a0:	bc80      	pop	{r7}
    f2a2:	4770      	bx	lr
    f2a4:	20001dfc 	.word	0x20001dfc

0000f2a8 <_ZN22FlapperValveControllerC1Ev>:


// default constructor
FlapperValveController::FlapperValveController()
    f2a8:	b580      	push	{r7, lr}
    f2aa:	b082      	sub	sp, #8
    f2ac:	af00      	add	r7, sp, #0
    f2ae:	6078      	str	r0, [r7, #4]
    f2b0:	687b      	ldr	r3, [r7, #4]
    f2b2:	4618      	mov	r0, r3
    f2b4:	4b1c      	ldr	r3, [pc, #112]	; (f328 <_ZN22FlapperValveControllerC1Ev+0x80>)
    f2b6:	4798      	blx	r3
{
	singlefv=&fvStatic[0];
    f2b8:	687b      	ldr	r3, [r7, #4]
    f2ba:	4a1c      	ldr	r2, [pc, #112]	; (f32c <_ZN22FlapperValveControllerC1Ev+0x84>)
    f2bc:	67da      	str	r2, [r3, #124]	; 0x7c
//	ptrFlapperValveController=this;
	doPeriodicTask=false;
    f2be:	687b      	ldr	r3, [r7, #4]
    f2c0:	2200      	movs	r2, #0
    f2c2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	isControlling=false;
    f2c6:	687b      	ldr	r3, [r7, #4]
    f2c8:	2200      	movs	r2, #0
    f2ca:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	gotSetpoint=false;
    f2ce:	687b      	ldr	r3, [r7, #4]
    f2d0:	2200      	movs	r2, #0
    f2d2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	controllerEnabled=false;
    f2d6:	687b      	ldr	r3, [r7, #4]
    f2d8:	2200      	movs	r2, #0
    f2da:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	closing=false;
    f2de:	687b      	ldr	r3, [r7, #4]
    f2e0:	2200      	movs	r2, #0
    f2e2:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
	dataStruct.controllerStatus.minimunAir=FLAPPER_VALVE_MINIMUM_AIR;
    f2e6:	687b      	ldr	r3, [r7, #4]
    f2e8:	22da      	movs	r2, #218	; 0xda
    f2ea:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	NBC_Mode=false;
    f2ee:	687b      	ldr	r3, [r7, #4]
    f2f0:	2200      	movs	r2, #0
    f2f2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	NBC_Activated=false;
    f2f6:	687b      	ldr	r3, [r7, #4]
    f2f8:	2200      	movs	r2, #0
    f2fa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	standAloneActivated=false;
    f2fe:	687b      	ldr	r3, [r7, #4]
    f300:	2200      	movs	r2, #0
    f302:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	standAloneMode=false;
    f306:	687b      	ldr	r3, [r7, #4]
    f308:	2200      	movs	r2, #0
    f30a:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	resetTimeout=false;
    f30e:	687b      	ldr	r3, [r7, #4]
    f310:	2200      	movs	r2, #0
    f312:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	standAloneReturning=false;
    f316:	687b      	ldr	r3, [r7, #4]
    f318:	2200      	movs	r2, #0
    f31a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	
	
} //FlapperValveController
    f31e:	687b      	ldr	r3, [r7, #4]
    f320:	4618      	mov	r0, r3
    f322:	3708      	adds	r7, #8
    f324:	46bd      	mov	sp, r7
    f326:	bd80      	pop	{r7, pc}
    f328:	00010551 	.word	0x00010551
    f32c:	20001e04 	.word	0x20001e04

0000f330 <_ZN22FlapperValveControllerD1Ev>:

// default destructor
FlapperValveController::~FlapperValveController()
    f330:	b580      	push	{r7, lr}
    f332:	b082      	sub	sp, #8
    f334:	af00      	add	r7, sp, #0
    f336:	6078      	str	r0, [r7, #4]
    f338:	687b      	ldr	r3, [r7, #4]
    f33a:	4618      	mov	r0, r3
    f33c:	4b03      	ldr	r3, [pc, #12]	; (f34c <_ZN22FlapperValveControllerD1Ev+0x1c>)
    f33e:	4798      	blx	r3
{
} //~FlapperValveController
    f340:	687b      	ldr	r3, [r7, #4]
    f342:	4618      	mov	r0, r3
    f344:	3708      	adds	r7, #8
    f346:	46bd      	mov	sp, r7
    f348:	bd80      	pop	{r7, pc}
    f34a:	bf00      	nop
    f34c:	0001059d 	.word	0x0001059d

0000f350 <_ZN22FlapperValveController14InitControllerEh>:
	{
		isOK=Selftest();
	}
	return	isOK;	
}
bool FlapperValveController::InitController(uint8_t valve_id){
    f350:	b580      	push	{r7, lr}
    f352:	b082      	sub	sp, #8
    f354:	af00      	add	r7, sp, #0
    f356:	6078      	str	r0, [r7, #4]
    f358:	460b      	mov	r3, r1
    f35a:	70fb      	strb	r3, [r7, #3]
	ptrFlapperValveController[valve_id]=this;
    f35c:	78fb      	ldrb	r3, [r7, #3]
    f35e:	491a      	ldr	r1, [pc, #104]	; (f3c8 <_ZN22FlapperValveController14InitControllerEh+0x78>)
    f360:	687a      	ldr	r2, [r7, #4]
    f362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		valve_ID=valve_id;
    f366:	687b      	ldr	r3, [r7, #4]
    f368:	78fa      	ldrb	r2, [r7, #3]
    f36a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		singlefv=&fvStatic[valve_id];
    f36e:	78fb      	ldrb	r3, [r7, #3]
    f370:	2274      	movs	r2, #116	; 0x74
    f372:	fb02 f303 	mul.w	r3, r2, r3
    f376:	4a15      	ldr	r2, [pc, #84]	; (f3cc <_ZN22FlapperValveController14InitControllerEh+0x7c>)
    f378:	441a      	add	r2, r3
    f37a:	687b      	ldr	r3, [r7, #4]
    f37c:	67da      	str	r2, [r3, #124]	; 0x7c
		positions[valve_id]=position_array_static[valve_id];
    f37e:	78fb      	ldrb	r3, [r7, #3]
    f380:	78fa      	ldrb	r2, [r7, #3]
    f382:	0112      	lsls	r2, r2, #4
    f384:	4912      	ldr	r1, [pc, #72]	; (f3d0 <_ZN22FlapperValveController14InitControllerEh+0x80>)
    f386:	440a      	add	r2, r1
    f388:	6879      	ldr	r1, [r7, #4]
    f38a:	3330      	adds	r3, #48	; 0x30
    f38c:	009b      	lsls	r3, r3, #2
    f38e:	440b      	add	r3, r1
    f390:	605a      	str	r2, [r3, #4]
		if (singlefv->Init(valve_id))
    f392:	687b      	ldr	r3, [r7, #4]
    f394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f396:	78fa      	ldrb	r2, [r7, #3]
    f398:	4611      	mov	r1, r2
    f39a:	4618      	mov	r0, r3
    f39c:	4b0d      	ldr	r3, [pc, #52]	; (f3d4 <_ZN22FlapperValveController14InitControllerEh+0x84>)
    f39e:	4798      	blx	r3
    f3a0:	4603      	mov	r3, r0
    f3a2:	2b00      	cmp	r3, #0
    f3a4:	d007      	beq.n	f3b6 <_ZN22FlapperValveController14InitControllerEh+0x66>
		{
			isOK=Selftest();
    f3a6:	6878      	ldr	r0, [r7, #4]
    f3a8:	4b0b      	ldr	r3, [pc, #44]	; (f3d8 <_ZN22FlapperValveController14InitControllerEh+0x88>)
    f3aa:	4798      	blx	r3
    f3ac:	4603      	mov	r3, r0
    f3ae:	461a      	mov	r2, r3
    f3b0:	687b      	ldr	r3, [r7, #4]
    f3b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		}
		return	isOK;
    f3b6:	687b      	ldr	r3, [r7, #4]
    f3b8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    f3bc:	b2db      	uxtb	r3, r3
}
    f3be:	4618      	mov	r0, r3
    f3c0:	3708      	adds	r7, #8
    f3c2:	46bd      	mov	sp, r7
    f3c4:	bd80      	pop	{r7, pc}
    f3c6:	bf00      	nop
    f3c8:	20001dfc 	.word	0x20001dfc
    f3cc:	20001e04 	.word	0x20001e04
    f3d0:	20001ddc 	.word	0x20001ddc
    f3d4:	00010651 	.word	0x00010651
    f3d8:	000101f9 	.word	0x000101f9

0000f3dc <_ZN22FlapperValveController18CalculateDirectionEh>:
bool FlapperValveController::IsEnabled(){
	return	singlefv->controlOutputs.niAlcFvMotorEnable==true;
}


bool	FlapperValveController::CalculateDirection(uint8_t sp){
    f3dc:	b480      	push	{r7}
    f3de:	b083      	sub	sp, #12
    f3e0:	af00      	add	r7, sp, #0
    f3e2:	6078      	str	r0, [r7, #4]
    f3e4:	460b      	mov	r3, r1
    f3e6:	70fb      	strb	r3, [r7, #3]
	lastDirection=direction;
    f3e8:	687b      	ldr	r3, [r7, #4]
    f3ea:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
    f3ee:	687b      	ldr	r3, [r7, #4]
    f3f0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	direction=currentPosition>sp;
    f3f4:	687b      	ldr	r3, [r7, #4]
    f3f6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f3fa:	461a      	mov	r2, r3
    f3fc:	78fb      	ldrb	r3, [r7, #3]
    f3fe:	429a      	cmp	r2, r3
    f400:	bfcc      	ite	gt
    f402:	2301      	movgt	r3, #1
    f404:	2300      	movle	r3, #0
    f406:	b2da      	uxtb	r2, r3
    f408:	687b      	ldr	r3, [r7, #4]
    f40a:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	return direction;
    f40e:	687b      	ldr	r3, [r7, #4]
    f410:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
	
}
    f414:	4618      	mov	r0, r3
    f416:	370c      	adds	r7, #12
    f418:	46bd      	mov	sp, r7
    f41a:	bc80      	pop	{r7}
    f41c:	4770      	bx	lr
	...

0000f420 <_ZN22FlapperValveController18CalculateDirectionEv>:

bool	FlapperValveController::CalculateDirection(){
    f420:	b580      	push	{r7, lr}
    f422:	b082      	sub	sp, #8
    f424:	af00      	add	r7, sp, #0
    f426:	6078      	str	r0, [r7, #4]

	//floatSetpoint=(float)setpoint;
	return CalculateDirection(setpoint);
    f428:	687b      	ldr	r3, [r7, #4]
    f42a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    f42e:	4619      	mov	r1, r3
    f430:	6878      	ldr	r0, [r7, #4]
    f432:	4b03      	ldr	r3, [pc, #12]	; (f440 <_ZN22FlapperValveController18CalculateDirectionEv+0x20>)
    f434:	4798      	blx	r3
    f436:	4603      	mov	r3, r0
	
}
    f438:	4618      	mov	r0, r3
    f43a:	3708      	adds	r7, #8
    f43c:	46bd      	mov	sp, r7
    f43e:	bd80      	pop	{r7, pc}
    f440:	0000f3dd 	.word	0x0000f3dd

0000f444 <_ZN22FlapperValveController22StartMovingOnDirectionEv>:
bool	FlapperValveController::StatusHadChanged(){
	return	singlefv->fv1StatusChanged;
}

uint8_t FlapperValveController::StartMovingOnDirection(){
    f444:	b590      	push	{r4, r7, lr}
    f446:	b083      	sub	sp, #12
    f448:	af00      	add	r7, sp, #0
    f44a:	6078      	str	r0, [r7, #4]

	lastPosition=currentPosition;
    f44c:	687b      	ldr	r3, [r7, #4]
    f44e:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
    f452:	687b      	ldr	r3, [r7, #4]
    f454:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
//	floatLastPosition=(float)lastPosition;
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
    f458:	687b      	ldr	r3, [r7, #4]
    f45a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f45c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    f460:	2b00      	cmp	r3, #0
    f462:	d008      	beq.n	f476 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x32>
	{
		singlefv->SetEnable(false);
    f464:	687b      	ldr	r3, [r7, #4]
    f466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f468:	2100      	movs	r1, #0
    f46a:	4618      	mov	r0, r3
    f46c:	4b0b      	ldr	r3, [pc, #44]	; (f49c <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x58>)
    f46e:	4798      	blx	r3
		delay_ms(10);
    f470:	200a      	movs	r0, #10
    f472:	4b0b      	ldr	r3, [pc, #44]	; (f4a0 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x5c>)
    f474:	4798      	blx	r3
	} 
	else
	{
	}
	singlefv->SetDirection(CalculateDirection());
    f476:	687b      	ldr	r3, [r7, #4]
    f478:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
    f47a:	6878      	ldr	r0, [r7, #4]
    f47c:	4b09      	ldr	r3, [pc, #36]	; (f4a4 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x60>)
    f47e:	4798      	blx	r3
    f480:	4603      	mov	r3, r0
    f482:	4619      	mov	r1, r3
    f484:	4620      	mov	r0, r4
    f486:	4b08      	ldr	r3, [pc, #32]	; (f4a8 <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x64>)
    f488:	4798      	blx	r3
	StartMotor();
    f48a:	6878      	ldr	r0, [r7, #4]
    f48c:	4b07      	ldr	r3, [pc, #28]	; (f4ac <_ZN22FlapperValveController22StartMovingOnDirectionEv+0x68>)
    f48e:	4798      	blx	r3
	return 0;
    f490:	2300      	movs	r3, #0
}
    f492:	4618      	mov	r0, r3
    f494:	370c      	adds	r7, #12
    f496:	46bd      	mov	sp, r7
    f498:	bd90      	pop	{r4, r7, pc}
    f49a:	bf00      	nop
    f49c:	000107b9 	.word	0x000107b9
    f4a0:	00002a21 	.word	0x00002a21
    f4a4:	0000f421 	.word	0x0000f421
    f4a8:	00010839 	.word	0x00010839
    f4ac:	0000fe15 	.word	0x0000fe15

0000f4b0 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv>:

bool FlapperValveController::ControlMovement_AND_NBC(void){
    f4b0:	b580      	push	{r7, lr}
    f4b2:	b082      	sub	sp, #8
    f4b4:	af00      	add	r7, sp, #0
    f4b6:	6078      	str	r0, [r7, #4]

	if (IsNBCMode())
    f4b8:	6878      	ldr	r0, [r7, #4]
    f4ba:	4b13      	ldr	r3, [pc, #76]	; (f508 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x58>)
    f4bc:	4798      	blx	r3
    f4be:	4603      	mov	r3, r0
    f4c0:	2b00      	cmp	r3, #0
    f4c2:	d003      	beq.n	f4cc <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x1c>
	{
		CommandNBC_Mode();
    f4c4:	6878      	ldr	r0, [r7, #4]
    f4c6:	4b11      	ldr	r3, [pc, #68]	; (f50c <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x5c>)
    f4c8:	4798      	blx	r3
    f4ca:	e013      	b.n	f4f4 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
	} 
	else
	{
		if (NBC_Activated)
    f4cc:	687b      	ldr	r3, [r7, #4]
    f4ce:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
    f4d2:	2b00      	cmp	r3, #0
    f4d4:	d00b      	beq.n	f4ee <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x3e>
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
    f4d6:	687b      	ldr	r3, [r7, #4]
    f4d8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
    f4dc:	4619      	mov	r1, r3
    f4de:	6878      	ldr	r0, [r7, #4]
    f4e0:	4b0b      	ldr	r3, [pc, #44]	; (f510 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x60>)
    f4e2:	4798      	blx	r3
			NBC_Activated=false;
    f4e4:	687b      	ldr	r3, [r7, #4]
    f4e6:	2200      	movs	r2, #0
    f4e8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    f4ec:	e002      	b.n	f4f4 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x44>
		} 
		else
		{
			ControlMovement();
    f4ee:	6878      	ldr	r0, [r7, #4]
    f4f0:	4b08      	ldr	r3, [pc, #32]	; (f514 <_ZN22FlapperValveController23ControlMovement_AND_NBCEv+0x64>)
    f4f2:	4798      	blx	r3
		}
		
	}
	return !NBC_Mode;
    f4f4:	687b      	ldr	r3, [r7, #4]
    f4f6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    f4fa:	f083 0301 	eor.w	r3, r3, #1
    f4fe:	b2db      	uxtb	r3, r3
}
    f500:	4618      	mov	r0, r3
    f502:	3708      	adds	r7, #8
    f504:	46bd      	mov	sp, r7
    f506:	bd80      	pop	{r7, pc}
    f508:	0000fbad 	.word	0x0000fbad
    f50c:	0000fb4d 	.word	0x0000fb4d
    f510:	0000fea5 	.word	0x0000fea5
    f514:	0000f7cd 	.word	0x0000f7cd

0000f518 <_ZN22FlapperValveController17IsInvalidPositionEv>:

bool FlapperValveController::IsInvalidPosition(){
    f518:	b590      	push	{r4, r7, lr}
    f51a:	b085      	sub	sp, #20
    f51c:	af00      	add	r7, sp, #0
    f51e:	6078      	str	r0, [r7, #4]
	bool result=false;
    f520:	2300      	movs	r3, #0
    f522:	73fb      	strb	r3, [r7, #15]
	memory.ReadParameters(parameters);
    f524:	687b      	ldr	r3, [r7, #4]
    f526:	33bf      	adds	r3, #191	; 0xbf
    f528:	4619      	mov	r1, r3
    f52a:	4817      	ldr	r0, [pc, #92]	; (f588 <_ZN22FlapperValveController17IsInvalidPositionEv+0x70>)
    f52c:	4b17      	ldr	r3, [pc, #92]	; (f58c <_ZN22FlapperValveController17IsInvalidPositionEv+0x74>)
    f52e:	4798      	blx	r3
	UpdateFlapperValveData();
    f530:	6878      	ldr	r0, [r7, #4]
    f532:	4b17      	ldr	r3, [pc, #92]	; (f590 <_ZN22FlapperValveController17IsInvalidPositionEv+0x78>)
    f534:	4798      	blx	r3
	if ((!standAloneReturning)&(!IsNBCMode()))
    f536:	687b      	ldr	r3, [r7, #4]
    f538:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
    f53c:	f083 0301 	eor.w	r3, r3, #1
    f540:	b2db      	uxtb	r3, r3
    f542:	461c      	mov	r4, r3
    f544:	6878      	ldr	r0, [r7, #4]
    f546:	4b13      	ldr	r3, [pc, #76]	; (f594 <_ZN22FlapperValveController17IsInvalidPositionEv+0x7c>)
    f548:	4798      	blx	r3
    f54a:	4603      	mov	r3, r0
    f54c:	f083 0301 	eor.w	r3, r3, #1
    f550:	b2db      	uxtb	r3, r3
    f552:	4023      	ands	r3, r4
    f554:	2b00      	cmp	r3, #0
    f556:	bf14      	ite	ne
    f558:	2301      	movne	r3, #1
    f55a:	2300      	moveq	r3, #0
    f55c:	b2db      	uxtb	r3, r3
    f55e:	2b00      	cmp	r3, #0
    f560:	d00d      	beq.n	f57e <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
	{
		if (currentPosition>currentMaximum)
    f562:	687b      	ldr	r3, [r7, #4]
    f564:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f568:	461a      	mov	r2, r3
    f56a:	687b      	ldr	r3, [r7, #4]
    f56c:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
    f570:	429a      	cmp	r2, r3
    f572:	dd02      	ble.n	f57a <_ZN22FlapperValveController17IsInvalidPositionEv+0x62>
		{
			result=true;
    f574:	2301      	movs	r3, #1
    f576:	73fb      	strb	r3, [r7, #15]
    f578:	e001      	b.n	f57e <_ZN22FlapperValveController17IsInvalidPositionEv+0x66>
		}
		else
		{
			result=false;
    f57a:	2300      	movs	r3, #0
    f57c:	73fb      	strb	r3, [r7, #15]
		}
	}

	return result;
    f57e:	7bfb      	ldrb	r3, [r7, #15]
}
    f580:	4618      	mov	r0, r3
    f582:	3714      	adds	r7, #20
    f584:	46bd      	mov	sp, r7
    f586:	bd90      	pop	{r4, r7, pc}
    f588:	20003330 	.word	0x20003330
    f58c:	00010e31 	.word	0x00010e31
    f590:	000100a1 	.word	0x000100a1
    f594:	0000fbad 	.word	0x0000fbad

0000f598 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv>:

bool FlapperValveController::Control_NBC_StandAlone_Reset(void){
    f598:	b580      	push	{r7, lr}
    f59a:	b082      	sub	sp, #8
    f59c:	af00      	add	r7, sp, #0
    f59e:	6078      	str	r0, [r7, #4]
	
	if ((IsInvalidPosition()&(!flapperValveIsMoving)))
    f5a0:	6878      	ldr	r0, [r7, #4]
    f5a2:	4b11      	ldr	r3, [pc, #68]	; (f5e8 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x50>)
    f5a4:	4798      	blx	r3
    f5a6:	4603      	mov	r3, r0
    f5a8:	461a      	mov	r2, r3
    f5aa:	687b      	ldr	r3, [r7, #4]
    f5ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    f5b0:	b2db      	uxtb	r3, r3
    f5b2:	f083 0301 	eor.w	r3, r3, #1
    f5b6:	b2db      	uxtb	r3, r3
    f5b8:	4013      	ands	r3, r2
    f5ba:	2b00      	cmp	r3, #0
    f5bc:	bf14      	ite	ne
    f5be:	2301      	movne	r3, #1
    f5c0:	2300      	moveq	r3, #0
    f5c2:	b2db      	uxtb	r3, r3
    f5c4:	2b00      	cmp	r3, #0
    f5c6:	d003      	beq.n	f5d0 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x38>
	{
		ResetValvePosition();
    f5c8:	6878      	ldr	r0, [r7, #4]
    f5ca:	4b08      	ldr	r3, [pc, #32]	; (f5ec <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x54>)
    f5cc:	4798      	blx	r3
    f5ce:	e002      	b.n	f5d6 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x3e>
	} 
	else
	{
		Control_NBC_StandAlone();
    f5d0:	6878      	ldr	r0, [r7, #4]
    f5d2:	4b07      	ldr	r3, [pc, #28]	; (f5f0 <_ZN22FlapperValveController28Control_NBC_StandAlone_ResetEv+0x58>)
    f5d4:	4798      	blx	r3
	}
	return resetTimeout;
    f5d6:	687b      	ldr	r3, [r7, #4]
    f5d8:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
    f5dc:	b2db      	uxtb	r3, r3
}
    f5de:	4618      	mov	r0, r3
    f5e0:	3708      	adds	r7, #8
    f5e2:	46bd      	mov	sp, r7
    f5e4:	bd80      	pop	{r7, pc}
    f5e6:	bf00      	nop
    f5e8:	0000f519 	.word	0x0000f519
    f5ec:	0000f99d 	.word	0x0000f99d
    f5f0:	0000f5f5 	.word	0x0000f5f5

0000f5f4 <_ZN22FlapperValveController22Control_NBC_StandAloneEv>:

bool FlapperValveController::Control_NBC_StandAlone(void){
    f5f4:	b580      	push	{r7, lr}
    f5f6:	b082      	sub	sp, #8
    f5f8:	af00      	add	r7, sp, #0
    f5fa:	6078      	str	r0, [r7, #4]

	if (IsStandAloneMode())
    f5fc:	6878      	ldr	r0, [r7, #4]
    f5fe:	4b29      	ldr	r3, [pc, #164]	; (f6a4 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb0>)
    f600:	4798      	blx	r3
    f602:	4603      	mov	r3, r0
    f604:	2b00      	cmp	r3, #0
    f606:	d031      	beq.n	f66c <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x78>
	{	

			standAloneMode=true;
    f608:	687b      	ldr	r3, [r7, #4]
    f60a:	2201      	movs	r2, #1
    f60c:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
			if (standAloneActivated)
    f610:	687b      	ldr	r3, [r7, #4]
    f612:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
    f616:	2b00      	cmp	r3, #0
    f618:	d003      	beq.n	f622 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x2e>
			{
				ControlMovement_AND_NBC();
    f61a:	6878      	ldr	r0, [r7, #4]
    f61c:	4b22      	ldr	r3, [pc, #136]	; (f6a8 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
    f61e:	4798      	blx	r3
    f620:	e038      	b.n	f694 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
			}
			else
			{
				
				if ((currentPosition>0xff-parameters.flapperValveStandAloneMinimumPosition))
    f622:	687b      	ldr	r3, [r7, #4]
    f624:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f628:	461a      	mov	r2, r3
    f62a:	687b      	ldr	r3, [r7, #4]
    f62c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    f630:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    f634:	429a      	cmp	r2, r3
    f636:	dd0c      	ble.n	f652 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x5e>
				{
					StartControlling(0xff-parameters.flapperValveStandAloneMinimumPosition);
    f638:	687b      	ldr	r3, [r7, #4]
    f63a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    f63e:	43db      	mvns	r3, r3
    f640:	b2db      	uxtb	r3, r3
    f642:	4619      	mov	r1, r3
    f644:	6878      	ldr	r0, [r7, #4]
    f646:	4b19      	ldr	r3, [pc, #100]	; (f6ac <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb8>)
    f648:	4798      	blx	r3
					standAloneReturning=true;
    f64a:	687b      	ldr	r3, [r7, #4]
    f64c:	2201      	movs	r2, #1
    f64e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
				}
				else
				{
					
				}
				currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
    f652:	687b      	ldr	r3, [r7, #4]
    f654:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    f658:	43db      	mvns	r3, r3
    f65a:	b2da      	uxtb	r2, r3
    f65c:	687b      	ldr	r3, [r7, #4]
    f65e:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
				standAloneActivated=true;
    f662:	687b      	ldr	r3, [r7, #4]
    f664:	2201      	movs	r2, #1
    f666:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
    f66a:	e013      	b.n	f694 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xa0>
		
		
	} 
	else
	{
		standAloneMode=false;
    f66c:	687b      	ldr	r3, [r7, #4]
    f66e:	2200      	movs	r2, #0
    f670:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
		if (standAloneActivated)
    f674:	687b      	ldr	r3, [r7, #4]
    f676:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
    f67a:	2b00      	cmp	r3, #0
    f67c:	d007      	beq.n	f68e <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0x9a>
		{
		//	StartControlling(parameters.flapperValveMinimumPosition);
			standAloneActivated=false;
    f67e:	687b      	ldr	r3, [r7, #4]
    f680:	2200      	movs	r2, #0
    f682:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
			standAloneReturning=false;
    f686:	687b      	ldr	r3, [r7, #4]
    f688:	2200      	movs	r2, #0
    f68a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		} 
		else
		{
		
		}
			ControlMovement_AND_NBC();
    f68e:	6878      	ldr	r0, [r7, #4]
    f690:	4b05      	ldr	r3, [pc, #20]	; (f6a8 <_ZN22FlapperValveController22Control_NBC_StandAloneEv+0xb4>)
    f692:	4798      	blx	r3
		
	}
	return standAloneMode;
    f694:	687b      	ldr	r3, [r7, #4]
    f696:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
}
    f69a:	4618      	mov	r0, r3
    f69c:	3708      	adds	r7, #8
    f69e:	46bd      	mov	sp, r7
    f6a0:	bd80      	pop	{r7, pc}
    f6a2:	bf00      	nop
    f6a4:	0000f6b1 	.word	0x0000f6b1
    f6a8:	0000f4b1 	.word	0x0000f4b1
    f6ac:	0000fea5 	.word	0x0000fea5

0000f6b0 <_ZN22FlapperValveController16IsStandAloneModeEv>:

bool	FlapperValveController::IsStandAloneMode(){
    f6b0:	b480      	push	{r7}
    f6b2:	b085      	sub	sp, #20
    f6b4:	af00      	add	r7, sp, #0
    f6b6:	6078      	str	r0, [r7, #4]
	
	bool result=false;
    f6b8:	2300      	movs	r3, #0
    f6ba:	73fb      	strb	r3, [r7, #15]
	result=partner->dataStruct.controlOutputs.iAlcFvStandAloneOut;
    f6bc:	687b      	ldr	r3, [r7, #4]
    f6be:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    f6c2:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
    f6c6:	73fb      	strb	r3, [r7, #15]

	return result;
    f6c8:	7bfb      	ldrb	r3, [r7, #15]
}
    f6ca:	4618      	mov	r0, r3
    f6cc:	3714      	adds	r7, #20
    f6ce:	46bd      	mov	sp, r7
    f6d0:	bc80      	pop	{r7}
    f6d2:	4770      	bx	lr

0000f6d4 <_ZN22FlapperValveController10SetPartnerEPS_>:



void FlapperValveController::SetPartner(FlapperValveController *part){
    f6d4:	b480      	push	{r7}
    f6d6:	b083      	sub	sp, #12
    f6d8:	af00      	add	r7, sp, #0
    f6da:	6078      	str	r0, [r7, #4]
    f6dc:	6039      	str	r1, [r7, #0]
	partner=part;
    f6de:	687b      	ldr	r3, [r7, #4]
    f6e0:	683a      	ldr	r2, [r7, #0]
    f6e2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
}
    f6e6:	bf00      	nop
    f6e8:	370c      	adds	r7, #12
    f6ea:	46bd      	mov	sp, r7
    f6ec:	bc80      	pop	{r7}
    f6ee:	4770      	bx	lr

0000f6f0 <_ZN22FlapperValveController14CheckIsClosingEv>:
bool FlapperValveController::CheckIsClosing(void){
    f6f0:	b580      	push	{r7, lr}
    f6f2:	b082      	sub	sp, #8
    f6f4:	af00      	add	r7, sp, #0
    f6f6:	6078      	str	r0, [r7, #4]
		if ((((setpoint<6)&(currentPosition<6))|((setpoint>250)&(currentPosition>245)))&((!closing)&(flapperValveIsMoving)))
    f6f8:	687b      	ldr	r3, [r7, #4]
    f6fa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    f6fe:	2b05      	cmp	r3, #5
    f700:	bfd4      	ite	le
    f702:	2301      	movle	r3, #1
    f704:	2300      	movgt	r3, #0
    f706:	b2da      	uxtb	r2, r3
    f708:	687b      	ldr	r3, [r7, #4]
    f70a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f70e:	2b05      	cmp	r3, #5
    f710:	bfd4      	ite	le
    f712:	2301      	movle	r3, #1
    f714:	2300      	movgt	r3, #0
    f716:	b2db      	uxtb	r3, r3
    f718:	4013      	ands	r3, r2
    f71a:	b2da      	uxtb	r2, r3
    f71c:	687b      	ldr	r3, [r7, #4]
    f71e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    f722:	2bfa      	cmp	r3, #250	; 0xfa
    f724:	bfcc      	ite	gt
    f726:	2301      	movgt	r3, #1
    f728:	2300      	movle	r3, #0
    f72a:	b2d9      	uxtb	r1, r3
    f72c:	687b      	ldr	r3, [r7, #4]
    f72e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f732:	2bf5      	cmp	r3, #245	; 0xf5
    f734:	bfcc      	ite	gt
    f736:	2301      	movgt	r3, #1
    f738:	2300      	movle	r3, #0
    f73a:	b2db      	uxtb	r3, r3
    f73c:	400b      	ands	r3, r1
    f73e:	b2db      	uxtb	r3, r3
    f740:	4313      	orrs	r3, r2
    f742:	b2db      	uxtb	r3, r3
    f744:	461a      	mov	r2, r3
    f746:	687b      	ldr	r3, [r7, #4]
    f748:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    f74c:	f083 0301 	eor.w	r3, r3, #1
    f750:	b2db      	uxtb	r3, r3
    f752:	4619      	mov	r1, r3
    f754:	687b      	ldr	r3, [r7, #4]
    f756:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    f75a:	b2db      	uxtb	r3, r3
    f75c:	400b      	ands	r3, r1
    f75e:	4013      	ands	r3, r2
    f760:	2b00      	cmp	r3, #0
    f762:	bf14      	ite	ne
    f764:	2301      	movne	r3, #1
    f766:	2300      	moveq	r3, #0
    f768:	b2db      	uxtb	r3, r3
    f76a:	2b00      	cmp	r3, #0
    f76c:	d01f      	beq.n	f7ae <_ZN22FlapperValveController14CheckIsClosingEv+0xbe>
		{
			if (valve_ID==0)
    f76e:	687b      	ldr	r3, [r7, #4]
    f770:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    f774:	2b00      	cmp	r3, #0
    f776:	d105      	bne.n	f784 <_ZN22FlapperValveController14CheckIsClosingEv+0x94>
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
    f778:	22c8      	movs	r2, #200	; 0xc8
    f77a:	4910      	ldr	r1, [pc, #64]	; (f7bc <_ZN22FlapperValveController14CheckIsClosingEv+0xcc>)
    f77c:	4810      	ldr	r0, [pc, #64]	; (f7c0 <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
    f77e:	4b11      	ldr	r3, [pc, #68]	; (f7c4 <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
    f780:	4798      	blx	r3
    f782:	e004      	b.n	f78e <_ZN22FlapperValveController14CheckIsClosingEv+0x9e>
			} 
			else
			{
				hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed),FLAPPER_VALVE_CLOSING_TIMEOUT);
    f784:	22c8      	movs	r2, #200	; 0xc8
    f786:	4910      	ldr	r1, [pc, #64]	; (f7c8 <_ZN22FlapperValveController14CheckIsClosingEv+0xd8>)
    f788:	480d      	ldr	r0, [pc, #52]	; (f7c0 <_ZN22FlapperValveController14CheckIsClosingEv+0xd0>)
    f78a:	4b0e      	ldr	r3, [pc, #56]	; (f7c4 <_ZN22FlapperValveController14CheckIsClosingEv+0xd4>)
    f78c:	4798      	blx	r3
			}
		
			fullClosedTimeout=false;
    f78e:	687b      	ldr	r3, [r7, #4]
    f790:	2200      	movs	r2, #0
    f792:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
			gotSetpoint=false;
    f796:	687b      	ldr	r3, [r7, #4]
    f798:	2200      	movs	r2, #0
    f79a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			closing=true;
    f79e:	687b      	ldr	r3, [r7, #4]
    f7a0:	2201      	movs	r2, #1
    f7a2:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
			unLockTimeout=true;
    f7a6:	687b      	ldr	r3, [r7, #4]
    f7a8:	2201      	movs	r2, #1
    f7aa:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		}
		return closing;
    f7ae:	687b      	ldr	r3, [r7, #4]
    f7b0:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
	
}
    f7b4:	4618      	mov	r0, r3
    f7b6:	3708      	adds	r7, #8
    f7b8:	46bd      	mov	sp, r7
    f7ba:	bd80      	pop	{r7, pc}
    f7bc:	0000f229 	.word	0x0000f229
    f7c0:	20001d1c 	.word	0x20001d1c
    f7c4:	0000dee1 	.word	0x0000dee1
    f7c8:	0000f249 	.word	0x0000f249

0000f7cc <_ZN22FlapperValveController15ControlMovementEv>:

uint8_t FlapperValveController::ControlMovement(){
    f7cc:	b590      	push	{r4, r7, lr}
    f7ce:	b083      	sub	sp, #12
    f7d0:	af00      	add	r7, sp, #0
    f7d2:	6078      	str	r0, [r7, #4]
	if (isControlling)
    f7d4:	687b      	ldr	r3, [r7, #4]
    f7d6:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
    f7da:	2b00      	cmp	r3, #0
    f7dc:	f000 80c9 	beq.w	f972 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
	{	
		if (((dataStruct.inputStatus.limit[0]|dataStruct.inputStatus.limit[1])&(closing))&(unLockTimeout))
    f7e0:	687b      	ldr	r3, [r7, #4]
    f7e2:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
    f7e6:	687b      	ldr	r3, [r7, #4]
    f7e8:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
    f7ec:	4313      	orrs	r3, r2
    f7ee:	b2db      	uxtb	r3, r3
    f7f0:	461a      	mov	r2, r3
    f7f2:	687b      	ldr	r3, [r7, #4]
    f7f4:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    f7f8:	4013      	ands	r3, r2
    f7fa:	687a      	ldr	r2, [r7, #4]
    f7fc:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
    f800:	b2d2      	uxtb	r2, r2
    f802:	4013      	ands	r3, r2
    f804:	2b00      	cmp	r3, #0
    f806:	bf14      	ite	ne
    f808:	2301      	movne	r3, #1
    f80a:	2300      	moveq	r3, #0
    f80c:	b2db      	uxtb	r3, r3
    f80e:	2b00      	cmp	r3, #0
    f810:	d003      	beq.n	f81a <_ZN22FlapperValveController15ControlMovementEv+0x4e>
		{
				StopValveAtLimit();
    f812:	6878      	ldr	r0, [r7, #4]
    f814:	4b59      	ldr	r3, [pc, #356]	; (f97c <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
    f816:	4798      	blx	r3
    f818:	e0ab      	b.n	f972 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>

		} 
		else
		{
			
			CheckIsClosing();
    f81a:	6878      	ldr	r0, [r7, #4]
    f81c:	4b58      	ldr	r3, [pc, #352]	; (f980 <_ZN22FlapperValveController15ControlMovementEv+0x1b4>)
    f81e:	4798      	blx	r3
			if ((abs(currentPosition-setpoint)>tolerance)|(closing))
    f820:	687b      	ldr	r3, [r7, #4]
    f822:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f826:	461a      	mov	r2, r3
    f828:	687b      	ldr	r3, [r7, #4]
    f82a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    f82e:	1ad3      	subs	r3, r2, r3
    f830:	2b00      	cmp	r3, #0
    f832:	bfb8      	it	lt
    f834:	425b      	neglt	r3, r3
    f836:	687a      	ldr	r2, [r7, #4]
    f838:	f892 209b 	ldrb.w	r2, [r2, #155]	; 0x9b
    f83c:	4293      	cmp	r3, r2
    f83e:	bfcc      	ite	gt
    f840:	2301      	movgt	r3, #1
    f842:	2300      	movle	r3, #0
    f844:	b2db      	uxtb	r3, r3
    f846:	461a      	mov	r2, r3
    f848:	687b      	ldr	r3, [r7, #4]
    f84a:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    f84e:	4313      	orrs	r3, r2
    f850:	2b00      	cmp	r3, #0
    f852:	d078      	beq.n	f946 <_ZN22FlapperValveController15ControlMovementEv+0x17a>
			{
				if (IsFlapperMoving())
    f854:	6878      	ldr	r0, [r7, #4]
    f856:	4b4b      	ldr	r3, [pc, #300]	; (f984 <_ZN22FlapperValveController15ControlMovementEv+0x1b8>)
    f858:	4798      	blx	r3
    f85a:	4603      	mov	r3, r0
    f85c:	2b00      	cmp	r3, #0
    f85e:	d04a      	beq.n	f8f6 <_ZN22FlapperValveController15ControlMovementEv+0x12a>
				{
					if (closing)
    f860:	687b      	ldr	r3, [r7, #4]
    f862:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    f866:	2b00      	cmp	r3, #0
    f868:	d00e      	beq.n	f888 <_ZN22FlapperValveController15ControlMovementEv+0xbc>
					{
						if (keepControlling)
    f86a:	687b      	ldr	r3, [r7, #4]
    f86c:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
    f870:	2b00      	cmp	r3, #0
    f872:	d053      	beq.n	f91c <_ZN22FlapperValveController15ControlMovementEv+0x150>
						{
							if (fullClosedTimeout)
    f874:	687b      	ldr	r3, [r7, #4]
    f876:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
    f87a:	b2db      	uxtb	r3, r3
    f87c:	2b00      	cmp	r3, #0
    f87e:	d04d      	beq.n	f91c <_ZN22FlapperValveController15ControlMovementEv+0x150>
							{
								StopValveAtLimit();
    f880:	6878      	ldr	r0, [r7, #4]
    f882:	4b3e      	ldr	r3, [pc, #248]	; (f97c <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
    f884:	4798      	blx	r3
    f886:	e049      	b.n	f91c <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
					} 
					else
					{
						
						if (lastDirection!=CalculateDirection())
    f888:	687b      	ldr	r3, [r7, #4]
    f88a:	f893 40ac 	ldrb.w	r4, [r3, #172]	; 0xac
    f88e:	6878      	ldr	r0, [r7, #4]
    f890:	4b3d      	ldr	r3, [pc, #244]	; (f988 <_ZN22FlapperValveController15ControlMovementEv+0x1bc>)
    f892:	4798      	blx	r3
    f894:	4603      	mov	r3, r0
    f896:	429c      	cmp	r4, r3
    f898:	bf14      	ite	ne
    f89a:	2301      	movne	r3, #1
    f89c:	2300      	moveq	r3, #0
    f89e:	b2db      	uxtb	r3, r3
    f8a0:	2b00      	cmp	r3, #0
    f8a2:	d00a      	beq.n	f8ba <_ZN22FlapperValveController15ControlMovementEv+0xee>
						{
							StopMotor();
    f8a4:	6878      	ldr	r0, [r7, #4]
    f8a6:	4b39      	ldr	r3, [pc, #228]	; (f98c <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
    f8a8:	4798      	blx	r3
							RemoveTimeoutTask();
    f8aa:	6878      	ldr	r0, [r7, #4]
    f8ac:	4b38      	ldr	r3, [pc, #224]	; (f990 <_ZN22FlapperValveController15ControlMovementEv+0x1c4>)
    f8ae:	4798      	blx	r3
							keepControlling=true;
    f8b0:	687b      	ldr	r3, [r7, #4]
    f8b2:	2201      	movs	r2, #1
    f8b4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    f8b8:	e030      	b.n	f91c <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							if (timeoutFlapperValveController)
    f8ba:	687b      	ldr	r3, [r7, #4]
    f8bc:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
    f8c0:	b2db      	uxtb	r3, r3
    f8c2:	2b00      	cmp	r3, #0
    f8c4:	d003      	beq.n	f8ce <_ZN22FlapperValveController15ControlMovementEv+0x102>
							{
								StopMotor();
    f8c6:	6878      	ldr	r0, [r7, #4]
    f8c8:	4b30      	ldr	r3, [pc, #192]	; (f98c <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
    f8ca:	4798      	blx	r3
    f8cc:	e026      	b.n	f91c <_ZN22FlapperValveController15ControlMovementEv+0x150>
								
							}
							else
							{
								if (keepControlling)
    f8ce:	687b      	ldr	r3, [r7, #4]
    f8d0:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
    f8d4:	2b00      	cmp	r3, #0
    f8d6:	d021      	beq.n	f91c <_ZN22FlapperValveController15ControlMovementEv+0x150>
								{
									if (timeoutKeepControlling)
    f8d8:	687b      	ldr	r3, [r7, #4]
    f8da:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    f8de:	b2db      	uxtb	r3, r3
    f8e0:	2b00      	cmp	r3, #0
    f8e2:	d003      	beq.n	f8ec <_ZN22FlapperValveController15ControlMovementEv+0x120>
									{
										StopMotor();
    f8e4:	6878      	ldr	r0, [r7, #4]
    f8e6:	4b29      	ldr	r3, [pc, #164]	; (f98c <_ZN22FlapperValveController15ControlMovementEv+0x1c0>)
    f8e8:	4798      	blx	r3
    f8ea:	e017      	b.n	f91c <_ZN22FlapperValveController15ControlMovementEv+0x150>
									}
									else
									{
										KeepControlling();
    f8ec:	2100      	movs	r1, #0
    f8ee:	6878      	ldr	r0, [r7, #4]
    f8f0:	4b28      	ldr	r3, [pc, #160]	; (f994 <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
    f8f2:	4798      	blx	r3
    f8f4:	e012      	b.n	f91c <_ZN22FlapperValveController15ControlMovementEv+0x150>
					}
					
				}
				else
				{
					if (keepControlling)
    f8f6:	687b      	ldr	r3, [r7, #4]
    f8f8:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
    f8fc:	2b00      	cmp	r3, #0
    f8fe:	d00d      	beq.n	f91c <_ZN22FlapperValveController15ControlMovementEv+0x150>
					{
						if (timeoutKeepControlling)
    f900:	687b      	ldr	r3, [r7, #4]
    f902:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    f906:	b2db      	uxtb	r3, r3
    f908:	2b00      	cmp	r3, #0
    f90a:	d003      	beq.n	f914 <_ZN22FlapperValveController15ControlMovementEv+0x148>
						{
							StopValveinBetween();
    f90c:	6878      	ldr	r0, [r7, #4]
    f90e:	4b22      	ldr	r3, [pc, #136]	; (f998 <_ZN22FlapperValveController15ControlMovementEv+0x1cc>)
    f910:	4798      	blx	r3
    f912:	e003      	b.n	f91c <_ZN22FlapperValveController15ControlMovementEv+0x150>
						}
						else
						{
							KeepControlling();
    f914:	2100      	movs	r1, #0
    f916:	6878      	ldr	r0, [r7, #4]
    f918:	4b1e      	ldr	r3, [pc, #120]	; (f994 <_ZN22FlapperValveController15ControlMovementEv+0x1c8>)
    f91a:	4798      	blx	r3
						
					}
					
				}
				
				if ((abs(currentPosition-setpoint)>tolerance))
    f91c:	687b      	ldr	r3, [r7, #4]
    f91e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f922:	461a      	mov	r2, r3
    f924:	687b      	ldr	r3, [r7, #4]
    f926:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    f92a:	1ad3      	subs	r3, r2, r3
    f92c:	2b00      	cmp	r3, #0
    f92e:	bfb8      	it	lt
    f930:	425b      	neglt	r3, r3
    f932:	687a      	ldr	r2, [r7, #4]
    f934:	f892 209b 	ldrb.w	r2, [r2, #155]	; 0x9b
    f938:	4293      	cmp	r3, r2
    f93a:	dd1a      	ble.n	f972 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				{
					gotSetpoint=false;
    f93c:	687b      	ldr	r3, [r7, #4]
    f93e:	2200      	movs	r2, #0
    f940:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
    f944:	e015      	b.n	f972 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
				
				
			}
			else
			{
				if (closing)
    f946:	687b      	ldr	r3, [r7, #4]
    f948:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    f94c:	2b00      	cmp	r3, #0
    f94e:	d009      	beq.n	f964 <_ZN22FlapperValveController15ControlMovementEv+0x198>
				{
					if (fullClosedTimeout)
    f950:	687b      	ldr	r3, [r7, #4]
    f952:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
    f956:	b2db      	uxtb	r3, r3
    f958:	2b00      	cmp	r3, #0
    f95a:	d00a      	beq.n	f972 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
						StopValveAtLimit();
    f95c:	6878      	ldr	r0, [r7, #4]
    f95e:	4b07      	ldr	r3, [pc, #28]	; (f97c <_ZN22FlapperValveController15ControlMovementEv+0x1b0>)
    f960:	4798      	blx	r3
    f962:	e006      	b.n	f972 <_ZN22FlapperValveController15ControlMovementEv+0x1a6>
					{
					}
				} 
				else
				{
					StopValveinBetween();
    f964:	6878      	ldr	r0, [r7, #4]
    f966:	4b0c      	ldr	r3, [pc, #48]	; (f998 <_ZN22FlapperValveController15ControlMovementEv+0x1cc>)
    f968:	4798      	blx	r3
					gotSetpoint=true;
    f96a:	687b      	ldr	r3, [r7, #4]
    f96c:	2201      	movs	r2, #1
    f96e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
		
	} 
	else
	{
	}
	return 0;
    f972:	2300      	movs	r3, #0
	
}
    f974:	4618      	mov	r0, r3
    f976:	370c      	adds	r7, #12
    f978:	46bd      	mov	sp, r7
    f97a:	bd90      	pop	{r4, r7, pc}
    f97c:	0000fcc9 	.word	0x0000fcc9
    f980:	0000f6f1 	.word	0x0000f6f1
    f984:	0000fc21 	.word	0x0000fc21
    f988:	0000f421 	.word	0x0000f421
    f98c:	0000fbf5 	.word	0x0000fbf5
    f990:	00010389 	.word	0x00010389
    f994:	00010069 	.word	0x00010069
    f998:	0000fd61 	.word	0x0000fd61

0000f99c <_ZN22FlapperValveController18ResetValvePositionEv>:
void FlapperValveController::ResetValvePosition(void){
    f99c:	b580      	push	{r7, lr}
    f99e:	b084      	sub	sp, #16
    f9a0:	af00      	add	r7, sp, #0
    f9a2:	6078      	str	r0, [r7, #4]
	uint8_t localSetpoint,localPosition;
	bool pinLevel=gpio_get_pin_level(LED0);
    f9a4:	2052      	movs	r0, #82	; 0x52
    f9a6:	4b5a      	ldr	r3, [pc, #360]	; (fb10 <_ZN22FlapperValveController18ResetValvePositionEv+0x174>)
    f9a8:	4798      	blx	r3
    f9aa:	4603      	mov	r3, r0
    f9ac:	73fb      	strb	r3, [r7, #15]
	if (IsInvalidPosition())
    f9ae:	6878      	ldr	r0, [r7, #4]
    f9b0:	4b58      	ldr	r3, [pc, #352]	; (fb14 <_ZN22FlapperValveController18ResetValvePositionEv+0x178>)
    f9b2:	4798      	blx	r3
    f9b4:	4603      	mov	r3, r0
    f9b6:	2b00      	cmp	r3, #0
    f9b8:	f000 80a5 	beq.w	fb06 <_ZN22FlapperValveController18ResetValvePositionEv+0x16a>
	{
		
		localSetpoint=currentMaximum;
    f9bc:	687b      	ldr	r3, [r7, #4]
    f9be:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
    f9c2:	73bb      	strb	r3, [r7, #14]
		
		singlefv->SetEnable(false);
    f9c4:	687b      	ldr	r3, [r7, #4]
    f9c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f9c8:	2100      	movs	r1, #0
    f9ca:	4618      	mov	r0, r3
    f9cc:	4b52      	ldr	r3, [pc, #328]	; (fb18 <_ZN22FlapperValveController18ResetValvePositionEv+0x17c>)
    f9ce:	4798      	blx	r3
		singlefv->SetInvalidPosition(false);
    f9d0:	687b      	ldr	r3, [r7, #4]
    f9d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f9d4:	2100      	movs	r1, #0
    f9d6:	4618      	mov	r0, r3
    f9d8:	4b50      	ldr	r3, [pc, #320]	; (fb1c <_ZN22FlapperValveController18ResetValvePositionEv+0x180>)
    f9da:	4798      	blx	r3
		singlefv->ClearMoveFault(false);
    f9dc:	687b      	ldr	r3, [r7, #4]
    f9de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f9e0:	2100      	movs	r1, #0
    f9e2:	4618      	mov	r0, r3
    f9e4:	4b4e      	ldr	r3, [pc, #312]	; (fb20 <_ZN22FlapperValveController18ResetValvePositionEv+0x184>)
    f9e6:	4798      	blx	r3
		delay_ms(100);
    f9e8:	2064      	movs	r0, #100	; 0x64
    f9ea:	4b4e      	ldr	r3, [pc, #312]	; (fb24 <_ZN22FlapperValveController18ResetValvePositionEv+0x188>)
    f9ec:	4798      	blx	r3
		if (singlefv->ReadActualPosition()>localSetpoint)
    f9ee:	687b      	ldr	r3, [r7, #4]
    f9f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f9f2:	4618      	mov	r0, r3
    f9f4:	4b4c      	ldr	r3, [pc, #304]	; (fb28 <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
    f9f6:	4798      	blx	r3
    f9f8:	4603      	mov	r3, r0
    f9fa:	461a      	mov	r2, r3
    f9fc:	7bbb      	ldrb	r3, [r7, #14]
    f9fe:	429a      	cmp	r2, r3
    fa00:	bfcc      	ite	gt
    fa02:	2301      	movgt	r3, #1
    fa04:	2300      	movle	r3, #0
    fa06:	b2db      	uxtb	r3, r3
    fa08:	2b00      	cmp	r3, #0
    fa0a:	d006      	beq.n	fa1a <_ZN22FlapperValveController18ResetValvePositionEv+0x7e>
		{
			singlefv->SetDirection(true);
    fa0c:	687b      	ldr	r3, [r7, #4]
    fa0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fa10:	2101      	movs	r1, #1
    fa12:	4618      	mov	r0, r3
    fa14:	4b45      	ldr	r3, [pc, #276]	; (fb2c <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
    fa16:	4798      	blx	r3
    fa18:	e005      	b.n	fa26 <_ZN22FlapperValveController18ResetValvePositionEv+0x8a>
		}
		else
		{
			singlefv->SetDirection(false);
    fa1a:	687b      	ldr	r3, [r7, #4]
    fa1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fa1e:	2100      	movs	r1, #0
    fa20:	4618      	mov	r0, r3
    fa22:	4b42      	ldr	r3, [pc, #264]	; (fb2c <_ZN22FlapperValveController18ResetValvePositionEv+0x190>)
    fa24:	4798      	blx	r3
		}
		singlefv->SetInvalidPosition(true);
    fa26:	687b      	ldr	r3, [r7, #4]
    fa28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fa2a:	2101      	movs	r1, #1
    fa2c:	4618      	mov	r0, r3
    fa2e:	4b3b      	ldr	r3, [pc, #236]	; (fb1c <_ZN22FlapperValveController18ResetValvePositionEv+0x180>)
    fa30:	4798      	blx	r3
		singlefv->ClearMoveFault(true);
    fa32:	687b      	ldr	r3, [r7, #4]
    fa34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fa36:	2101      	movs	r1, #1
    fa38:	4618      	mov	r0, r3
    fa3a:	4b39      	ldr	r3, [pc, #228]	; (fb20 <_ZN22FlapperValveController18ResetValvePositionEv+0x184>)
    fa3c:	4798      	blx	r3
		singlefv->WriteSetpoint(localSetpoint);
    fa3e:	687b      	ldr	r3, [r7, #4]
    fa40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fa42:	7bba      	ldrb	r2, [r7, #14]
    fa44:	4611      	mov	r1, r2
    fa46:	4618      	mov	r0, r3
    fa48:	4b39      	ldr	r3, [pc, #228]	; (fb30 <_ZN22FlapperValveController18ResetValvePositionEv+0x194>)
    fa4a:	4798      	blx	r3
		

		currentPosition=singlefv->ReadActualPosition();
    fa4c:	687b      	ldr	r3, [r7, #4]
    fa4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fa50:	4618      	mov	r0, r3
    fa52:	4b35      	ldr	r3, [pc, #212]	; (fb28 <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
    fa54:	4798      	blx	r3
    fa56:	4603      	mov	r3, r0
    fa58:	461a      	mov	r2, r3
    fa5a:	687b      	ldr	r3, [r7, #4]
    fa5c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		
		resetTimeout=false;
    fa60:	687b      	ldr	r3, [r7, #4]
    fa62:	2200      	movs	r2, #0
    fa64:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
		if (valve_ID==0)
    fa68:	687b      	ldr	r3, [r7, #4]
    fa6a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    fa6e:	2b00      	cmp	r3, #0
    fa70:	d106      	bne.n	fa80 <_ZN22FlapperValveController18ResetValvePositionEv+0xe4>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve1Timeout),1000);
    fa72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fa76:	492f      	ldr	r1, [pc, #188]	; (fb34 <_ZN22FlapperValveController18ResetValvePositionEv+0x198>)
    fa78:	482f      	ldr	r0, [pc, #188]	; (fb38 <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
    fa7a:	4b30      	ldr	r3, [pc, #192]	; (fb3c <_ZN22FlapperValveController18ResetValvePositionEv+0x1a0>)
    fa7c:	4798      	blx	r3
    fa7e:	e005      	b.n	fa8c <_ZN22FlapperValveController18ResetValvePositionEv+0xf0>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(ResetValve2Timeout),1000);
    fa80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fa84:	492e      	ldr	r1, [pc, #184]	; (fb40 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a4>)
    fa86:	482c      	ldr	r0, [pc, #176]	; (fb38 <_ZN22FlapperValveController18ResetValvePositionEv+0x19c>)
    fa88:	4b2c      	ldr	r3, [pc, #176]	; (fb3c <_ZN22FlapperValveController18ResetValvePositionEv+0x1a0>)
    fa8a:	4798      	blx	r3
		}
	
		
		singlefv->SetEnable(true);
    fa8c:	687b      	ldr	r3, [r7, #4]
    fa8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fa90:	2101      	movs	r1, #1
    fa92:	4618      	mov	r0, r3
    fa94:	4b20      	ldr	r3, [pc, #128]	; (fb18 <_ZN22FlapperValveController18ResetValvePositionEv+0x17c>)
    fa96:	4798      	blx	r3
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
    fa98:	687b      	ldr	r3, [r7, #4]
    fa9a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    fa9e:	461a      	mov	r2, r3
    faa0:	7bbb      	ldrb	r3, [r7, #14]
    faa2:	1ad3      	subs	r3, r2, r3
    faa4:	2b00      	cmp	r3, #0
    faa6:	bfb8      	it	lt
    faa8:	425b      	neglt	r3, r3
    faaa:	2b06      	cmp	r3, #6
    faac:	bfcc      	ite	gt
    faae:	2301      	movgt	r3, #1
    fab0:	2300      	movle	r3, #0
    fab2:	b2db      	uxtb	r3, r3
    fab4:	461a      	mov	r2, r3
    fab6:	687b      	ldr	r3, [r7, #4]
    fab8:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
    fabc:	b2db      	uxtb	r3, r3
    fabe:	f083 0301 	eor.w	r3, r3, #1
    fac2:	b2db      	uxtb	r3, r3
    fac4:	4013      	ands	r3, r2
    fac6:	2b00      	cmp	r3, #0
    fac8:	bf14      	ite	ne
    faca:	2301      	movne	r3, #1
    facc:	2300      	moveq	r3, #0
    face:	b2db      	uxtb	r3, r3
    fad0:	2b00      	cmp	r3, #0
    fad2:	d00d      	beq.n	faf0 <_ZN22FlapperValveController18ResetValvePositionEv+0x154>

		{
			gpio_toggle_pin_level(LED0);
    fad4:	2052      	movs	r0, #82	; 0x52
    fad6:	4b1b      	ldr	r3, [pc, #108]	; (fb44 <_ZN22FlapperValveController18ResetValvePositionEv+0x1a8>)
    fad8:	4798      	blx	r3
			currentPosition=singlefv->ReadActualPosition();
    fada:	687b      	ldr	r3, [r7, #4]
    fadc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fade:	4618      	mov	r0, r3
    fae0:	4b11      	ldr	r3, [pc, #68]	; (fb28 <_ZN22FlapperValveController18ResetValvePositionEv+0x18c>)
    fae2:	4798      	blx	r3
    fae4:	4603      	mov	r3, r0
    fae6:	461a      	mov	r2, r3
    fae8:	687b      	ldr	r3, [r7, #4]
    faea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		while ((abs(currentPosition-localSetpoint)>6)&(!resetTimeout))
    faee:	e7d3      	b.n	fa98 <_ZN22FlapperValveController18ResetValvePositionEv+0xfc>

		}
		singlefv->SetEnable(false);
    faf0:	687b      	ldr	r3, [r7, #4]
    faf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    faf4:	2100      	movs	r1, #0
    faf6:	4618      	mov	r0, r3
    faf8:	4b07      	ldr	r3, [pc, #28]	; (fb18 <_ZN22FlapperValveController18ResetValvePositionEv+0x17c>)
    fafa:	4798      	blx	r3
		gpio_set_pin_level(LED0,pinLevel);
    fafc:	7bfb      	ldrb	r3, [r7, #15]
    fafe:	4619      	mov	r1, r3
    fb00:	2052      	movs	r0, #82	; 0x52
    fb02:	4b11      	ldr	r3, [pc, #68]	; (fb48 <_ZN22FlapperValveController18ResetValvePositionEv+0x1ac>)
    fb04:	4798      	blx	r3
	} 
	else
	{
	}
}
    fb06:	bf00      	nop
    fb08:	3710      	adds	r7, #16
    fb0a:	46bd      	mov	sp, r7
    fb0c:	bd80      	pop	{r7, pc}
    fb0e:	bf00      	nop
    fb10:	0000f195 	.word	0x0000f195
    fb14:	0000f519 	.word	0x0000f519
    fb18:	000107b9 	.word	0x000107b9
    fb1c:	00010929 	.word	0x00010929
    fb20:	000108b1 	.word	0x000108b1
    fb24:	00002a21 	.word	0x00002a21
    fb28:	000109d9 	.word	0x000109d9
    fb2c:	00010839 	.word	0x00010839
    fb30:	000109a1 	.word	0x000109a1
    fb34:	0000f269 	.word	0x0000f269
    fb38:	20001d1c 	.word	0x20001d1c
    fb3c:	0000dee1 	.word	0x0000dee1
    fb40:	0000f289 	.word	0x0000f289
    fb44:	0000f165 	.word	0x0000f165
    fb48:	0000f12d 	.word	0x0000f12d

0000fb4c <_ZN22FlapperValveController15CommandNBC_ModeEv>:

uint8_t FlapperValveController::CommandNBC_Mode(void){
    fb4c:	b580      	push	{r7, lr}
    fb4e:	b082      	sub	sp, #8
    fb50:	af00      	add	r7, sp, #0
    fb52:	6078      	str	r0, [r7, #4]
	if (NBC_Activated)
    fb54:	687b      	ldr	r3, [r7, #4]
    fb56:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
    fb5a:	2b00      	cmp	r3, #0
    fb5c:	d014      	beq.n	fb88 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x3c>
	{
		if (NBC_Mode)
    fb5e:	687b      	ldr	r3, [r7, #4]
    fb60:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    fb64:	2b00      	cmp	r3, #0
    fb66:	d003      	beq.n	fb70 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x24>
		{
			ControlMovement();
    fb68:	6878      	ldr	r0, [r7, #4]
    fb6a:	4b0e      	ldr	r3, [pc, #56]	; (fba4 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x58>)
    fb6c:	4798      	blx	r3
    fb6e:	e013      	b.n	fb98 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
		else
		{
			StartControlling(dataStruct.controllerStatus.minimunAir);
    fb70:	687b      	ldr	r3, [r7, #4]
    fb72:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
    fb76:	4619      	mov	r1, r3
    fb78:	6878      	ldr	r0, [r7, #4]
    fb7a:	4b0b      	ldr	r3, [pc, #44]	; (fba8 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
    fb7c:	4798      	blx	r3
			NBC_Activated=false;
    fb7e:	687b      	ldr	r3, [r7, #4]
    fb80:	2200      	movs	r2, #0
    fb82:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    fb86:	e007      	b.n	fb98 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x4c>
		}
	} 
	else
	{
			StartControlling(255);
    fb88:	21ff      	movs	r1, #255	; 0xff
    fb8a:	6878      	ldr	r0, [r7, #4]
    fb8c:	4b06      	ldr	r3, [pc, #24]	; (fba8 <_ZN22FlapperValveController15CommandNBC_ModeEv+0x5c>)
    fb8e:	4798      	blx	r3
			NBC_Activated=true;
    fb90:	687b      	ldr	r3, [r7, #4]
    fb92:	2201      	movs	r2, #1
    fb94:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	}

	return 0;
    fb98:	2300      	movs	r3, #0
	
}
    fb9a:	4618      	mov	r0, r3
    fb9c:	3708      	adds	r7, #8
    fb9e:	46bd      	mov	sp, r7
    fba0:	bd80      	pop	{r7, pc}
    fba2:	bf00      	nop
    fba4:	0000f7cd 	.word	0x0000f7cd
    fba8:	0000fea5 	.word	0x0000fea5

0000fbac <_ZN22FlapperValveController9IsNBCModeEv>:

bool FlapperValveController::IsNBCMode(){
    fbac:	b480      	push	{r7}
    fbae:	b083      	sub	sp, #12
    fbb0:	af00      	add	r7, sp, #0
    fbb2:	6078      	str	r0, [r7, #4]
	NBC_Mode=((dataStruct.inputStatus.cabin[0]&dataStruct.inputStatus.cabin[1])|NBC_Remote);
    fbb4:	687b      	ldr	r3, [r7, #4]
    fbb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
    fbba:	461a      	mov	r2, r3
    fbbc:	687b      	ldr	r3, [r7, #4]
    fbbe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
    fbc2:	4013      	ands	r3, r2
    fbc4:	687a      	ldr	r2, [r7, #4]
    fbc6:	f892 20b5 	ldrb.w	r2, [r2, #181]	; 0xb5
    fbca:	4313      	orrs	r3, r2
    fbcc:	2b00      	cmp	r3, #0
    fbce:	bf14      	ite	ne
    fbd0:	2301      	movne	r3, #1
    fbd2:	2300      	moveq	r3, #0
    fbd4:	b2da      	uxtb	r2, r3
    fbd6:	687b      	ldr	r3, [r7, #4]
    fbd8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	currentMaximum=255;
    fbdc:	687b      	ldr	r3, [r7, #4]
    fbde:	22ff      	movs	r2, #255	; 0xff
    fbe0:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	return NBC_Mode;
    fbe4:	687b      	ldr	r3, [r7, #4]
    fbe6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
}
    fbea:	4618      	mov	r0, r3
    fbec:	370c      	adds	r7, #12
    fbee:	46bd      	mov	sp, r7
    fbf0:	bc80      	pop	{r7}
    fbf2:	4770      	bx	lr

0000fbf4 <_ZN22FlapperValveController9StopMotorEv>:
	}
	return NBC_Remote;
}


uint8_t	FlapperValveController::StopMotor(){
    fbf4:	b580      	push	{r7, lr}
    fbf6:	b082      	sub	sp, #8
    fbf8:	af00      	add	r7, sp, #0
    fbfa:	6078      	str	r0, [r7, #4]
	singlefv->SetEnable(false);
    fbfc:	687b      	ldr	r3, [r7, #4]
    fbfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fc00:	2100      	movs	r1, #0
    fc02:	4618      	mov	r0, r3
    fc04:	4b05      	ldr	r3, [pc, #20]	; (fc1c <_ZN22FlapperValveController9StopMotorEv+0x28>)
    fc06:	4798      	blx	r3
	flapperValveIsMoving=false;
    fc08:	687b      	ldr	r3, [r7, #4]
    fc0a:	2200      	movs	r2, #0
    fc0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	
	return 0;
    fc10:	2300      	movs	r3, #0
}
    fc12:	4618      	mov	r0, r3
    fc14:	3708      	adds	r7, #8
    fc16:	46bd      	mov	sp, r7
    fc18:	bd80      	pop	{r7, pc}
    fc1a:	bf00      	nop
    fc1c:	000107b9 	.word	0x000107b9

0000fc20 <_ZN22FlapperValveController15IsFlapperMovingEv>:

bool FlapperValveController::IsFlapperMoving(void){
    fc20:	b480      	push	{r7}
    fc22:	b085      	sub	sp, #20
    fc24:	af00      	add	r7, sp, #0
    fc26:	6078      	str	r0, [r7, #4]
	bool_result=true;
    fc28:	687b      	ldr	r3, [r7, #4]
    fc2a:	2201      	movs	r2, #1
    fc2c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	if (flapperValveIsMoving)
    fc30:	687b      	ldr	r3, [r7, #4]
    fc32:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    fc36:	b2db      	uxtb	r3, r3
    fc38:	2b00      	cmp	r3, #0
    fc3a:	d03c      	beq.n	fcb6 <_ZN22FlapperValveController15IsFlapperMovingEv+0x96>
	{
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
    fc3c:	2300      	movs	r3, #0
    fc3e:	73fb      	strb	r3, [r7, #15]
    fc40:	7bfb      	ldrb	r3, [r7, #15]
    fc42:	2b0e      	cmp	r3, #14
    fc44:	dc26      	bgt.n	fc94 <_ZN22FlapperValveController15IsFlapperMovingEv+0x74>
		{
			if (positions[valve_ID][i]==positions[valve_ID][i+1])
    fc46:	687b      	ldr	r3, [r7, #4]
    fc48:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    fc4c:	687a      	ldr	r2, [r7, #4]
    fc4e:	3330      	adds	r3, #48	; 0x30
    fc50:	009b      	lsls	r3, r3, #2
    fc52:	4413      	add	r3, r2
    fc54:	685a      	ldr	r2, [r3, #4]
    fc56:	7bfb      	ldrb	r3, [r7, #15]
    fc58:	4413      	add	r3, r2
    fc5a:	781a      	ldrb	r2, [r3, #0]
    fc5c:	687b      	ldr	r3, [r7, #4]
    fc5e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    fc62:	6879      	ldr	r1, [r7, #4]
    fc64:	3330      	adds	r3, #48	; 0x30
    fc66:	009b      	lsls	r3, r3, #2
    fc68:	440b      	add	r3, r1
    fc6a:	6859      	ldr	r1, [r3, #4]
    fc6c:	7bfb      	ldrb	r3, [r7, #15]
    fc6e:	3301      	adds	r3, #1
    fc70:	440b      	add	r3, r1
    fc72:	781b      	ldrb	r3, [r3, #0]
    fc74:	429a      	cmp	r2, r3
    fc76:	d104      	bne.n	fc82 <_ZN22FlapperValveController15IsFlapperMovingEv+0x62>
			{
				bool_result=false;
    fc78:	687b      	ldr	r3, [r7, #4]
    fc7a:	2200      	movs	r2, #0
    fc7c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
    fc80:	e004      	b.n	fc8c <_ZN22FlapperValveController15IsFlapperMovingEv+0x6c>
			}
			else
			{
				bool_result=true;
    fc82:	687b      	ldr	r3, [r7, #4]
    fc84:	2201      	movs	r2, #1
    fc86:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				break;
    fc8a:	e003      	b.n	fc94 <_ZN22FlapperValveController15IsFlapperMovingEv+0x74>
		for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
    fc8c:	7bfb      	ldrb	r3, [r7, #15]
    fc8e:	3301      	adds	r3, #1
    fc90:	73fb      	strb	r3, [r7, #15]
    fc92:	e7d5      	b.n	fc40 <_ZN22FlapperValveController15IsFlapperMovingEv+0x20>
			}
			
		}
		flapperValveIsMoving&=bool_result;
    fc94:	687b      	ldr	r3, [r7, #4]
    fc96:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    fc9a:	b2db      	uxtb	r3, r3
    fc9c:	461a      	mov	r2, r3
    fc9e:	687b      	ldr	r3, [r7, #4]
    fca0:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    fca4:	4013      	ands	r3, r2
    fca6:	2b00      	cmp	r3, #0
    fca8:	bf14      	ite	ne
    fcaa:	2301      	movne	r3, #1
    fcac:	2300      	moveq	r3, #0
    fcae:	b2da      	uxtb	r2, r3
    fcb0:	687b      	ldr	r3, [r7, #4]
    fcb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	} 
	else
	{
	}
	return flapperValveIsMoving;
    fcb6:	687b      	ldr	r3, [r7, #4]
    fcb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
    fcbc:	b2db      	uxtb	r3, r3
	
}
    fcbe:	4618      	mov	r0, r3
    fcc0:	3714      	adds	r7, #20
    fcc2:	46bd      	mov	sp, r7
    fcc4:	bc80      	pop	{r7}
    fcc6:	4770      	bx	lr

0000fcc8 <_ZN22FlapperValveController16StopValveAtLimitEv>:

void	FlapperValveController::StopValveAtLimit(void){
    fcc8:	b580      	push	{r7, lr}
    fcca:	b082      	sub	sp, #8
    fccc:	af00      	add	r7, sp, #0
    fcce:	6078      	str	r0, [r7, #4]
		if (closing)
    fcd0:	687b      	ldr	r3, [r7, #4]
    fcd2:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
    fcd6:	2b00      	cmp	r3, #0
    fcd8:	d003      	beq.n	fce2 <_ZN22FlapperValveController16StopValveAtLimitEv+0x1a>
		{
			closing=false;
    fcda:	687b      	ldr	r3, [r7, #4]
    fcdc:	2200      	movs	r2, #0
    fcde:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
		}
	
		StopMotor();
    fce2:	6878      	ldr	r0, [r7, #4]
    fce4:	4b17      	ldr	r3, [pc, #92]	; (fd44 <_ZN22FlapperValveController16StopValveAtLimitEv+0x7c>)
    fce6:	4798      	blx	r3
		if (valve_ID==0)
    fce8:	687b      	ldr	r3, [r7, #4]
    fcea:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    fcee:	2b00      	cmp	r3, #0
    fcf0:	d108      	bne.n	fd04 <_ZN22FlapperValveController16StopValveAtLimitEv+0x3c>
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
    fcf2:	4915      	ldr	r1, [pc, #84]	; (fd48 <_ZN22FlapperValveController16StopValveAtLimitEv+0x80>)
    fcf4:	4815      	ldr	r0, [pc, #84]	; (fd4c <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
    fcf6:	4b16      	ldr	r3, [pc, #88]	; (fd50 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
    fcf8:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1FullyClossed));
    fcfa:	4916      	ldr	r1, [pc, #88]	; (fd54 <_ZN22FlapperValveController16StopValveAtLimitEv+0x8c>)
    fcfc:	4813      	ldr	r0, [pc, #76]	; (fd4c <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
    fcfe:	4b14      	ldr	r3, [pc, #80]	; (fd50 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
    fd00:	4798      	blx	r3
    fd02:	e007      	b.n	fd14 <_ZN22FlapperValveController16StopValveAtLimitEv+0x4c>
		} 
		else
		{
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
    fd04:	4914      	ldr	r1, [pc, #80]	; (fd58 <_ZN22FlapperValveController16StopValveAtLimitEv+0x90>)
    fd06:	4811      	ldr	r0, [pc, #68]	; (fd4c <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
    fd08:	4b11      	ldr	r3, [pc, #68]	; (fd50 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
    fd0a:	4798      	blx	r3
					hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2FullyClossed));
    fd0c:	4913      	ldr	r1, [pc, #76]	; (fd5c <_ZN22FlapperValveController16StopValveAtLimitEv+0x94>)
    fd0e:	480f      	ldr	r0, [pc, #60]	; (fd4c <_ZN22FlapperValveController16StopValveAtLimitEv+0x84>)
    fd10:	4b0f      	ldr	r3, [pc, #60]	; (fd50 <_ZN22FlapperValveController16StopValveAtLimitEv+0x88>)
    fd12:	4798      	blx	r3
		}
	
		timeoutFlapperValveController=false;
    fd14:	687b      	ldr	r3, [r7, #4]
    fd16:	2200      	movs	r2, #0
    fd18:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		timeoutKeepControlling=false;
    fd1c:	687b      	ldr	r3, [r7, #4]
    fd1e:	2200      	movs	r2, #0
    fd20:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		unLockTimeout=false;
    fd24:	687b      	ldr	r3, [r7, #4]
    fd26:	2200      	movs	r2, #0
    fd28:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		paused=false;
    fd2c:	687b      	ldr	r3, [r7, #4]
    fd2e:	2200      	movs	r2, #0
    fd30:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		keepControlling=false;
    fd34:	687b      	ldr	r3, [r7, #4]
    fd36:	2200      	movs	r2, #0
    fd38:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
}
    fd3c:	bf00      	nop
    fd3e:	3708      	adds	r7, #8
    fd40:	46bd      	mov	sp, r7
    fd42:	bd80      	pop	{r7, pc}
    fd44:	0000fbf5 	.word	0x0000fbf5
    fd48:	0000f1d1 	.word	0x0000f1d1
    fd4c:	20001d1c 	.word	0x20001d1c
    fd50:	0000de89 	.word	0x0000de89
    fd54:	0000f229 	.word	0x0000f229
    fd58:	0000f1fd 	.word	0x0000f1fd
    fd5c:	0000f249 	.word	0x0000f249

0000fd60 <_ZN22FlapperValveController18StopValveinBetweenEv>:

void FlapperValveController::StopValveinBetween(void){
    fd60:	b580      	push	{r7, lr}
    fd62:	b082      	sub	sp, #8
    fd64:	af00      	add	r7, sp, #0
    fd66:	6078      	str	r0, [r7, #4]
		StopMotor();
    fd68:	6878      	ldr	r0, [r7, #4]
    fd6a:	4b0c      	ldr	r3, [pc, #48]	; (fd9c <_ZN22FlapperValveController18StopValveinBetweenEv+0x3c>)
    fd6c:	4798      	blx	r3
		RemoveTimeoutTask();
    fd6e:	6878      	ldr	r0, [r7, #4]
    fd70:	4b0b      	ldr	r3, [pc, #44]	; (fda0 <_ZN22FlapperValveController18StopValveinBetweenEv+0x40>)
    fd72:	4798      	blx	r3
		timeoutFlapperValveController=false;
    fd74:	687b      	ldr	r3, [r7, #4]
    fd76:	2200      	movs	r2, #0
    fd78:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		paused=false;
    fd7c:	687b      	ldr	r3, [r7, #4]
    fd7e:	2200      	movs	r2, #0
    fd80:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		timeoutKeepControlling=false;
    fd84:	687b      	ldr	r3, [r7, #4]
    fd86:	2200      	movs	r2, #0
    fd88:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		keepControlling=true;
    fd8c:	687b      	ldr	r3, [r7, #4]
    fd8e:	2201      	movs	r2, #1
    fd90:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
}
    fd94:	bf00      	nop
    fd96:	3708      	adds	r7, #8
    fd98:	46bd      	mov	sp, r7
    fd9a:	bd80      	pop	{r7, pc}
    fd9c:	0000fbf5 	.word	0x0000fbf5
    fda0:	00010389 	.word	0x00010389

0000fda4 <_ZN22FlapperValveController16CorrectToleranceEh>:



uint8_t	FlapperValveController::CorrectTolerance(uint8_t sp){
    fda4:	b580      	push	{r7, lr}
    fda6:	b084      	sub	sp, #16
    fda8:	af00      	add	r7, sp, #0
    fdaa:	6078      	str	r0, [r7, #4]
    fdac:	460b      	mov	r3, r1
    fdae:	70fb      	strb	r3, [r7, #3]
	float floatTolerance=FLAPPER_VALVE_CONTROL_LIMIT*((abs(127-sp)-128))/256;
    fdb0:	78fb      	ldrb	r3, [r7, #3]
    fdb2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
    fdb6:	2b00      	cmp	r3, #0
    fdb8:	dd0c      	ble.n	fdd4 <_ZN22FlapperValveController16CorrectToleranceEh+0x30>
    fdba:	78fb      	ldrb	r3, [r7, #3]
    fdbc:	43db      	mvns	r3, r3
    fdbe:	009b      	lsls	r3, r3, #2
    fdc0:	2b00      	cmp	r3, #0
    fdc2:	da00      	bge.n	fdc6 <_ZN22FlapperValveController16CorrectToleranceEh+0x22>
    fdc4:	33ff      	adds	r3, #255	; 0xff
    fdc6:	121b      	asrs	r3, r3, #8
    fdc8:	461a      	mov	r2, r3
    fdca:	4b10      	ldr	r3, [pc, #64]	; (fe0c <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
    fdcc:	4610      	mov	r0, r2
    fdce:	4798      	blx	r3
    fdd0:	4603      	mov	r3, r0
    fdd2:	e00b      	b.n	fdec <_ZN22FlapperValveController16CorrectToleranceEh+0x48>
    fdd4:	78fb      	ldrb	r3, [r7, #3]
    fdd6:	3bff      	subs	r3, #255	; 0xff
    fdd8:	009b      	lsls	r3, r3, #2
    fdda:	2b00      	cmp	r3, #0
    fddc:	da00      	bge.n	fde0 <_ZN22FlapperValveController16CorrectToleranceEh+0x3c>
    fdde:	33ff      	adds	r3, #255	; 0xff
    fde0:	121b      	asrs	r3, r3, #8
    fde2:	461a      	mov	r2, r3
    fde4:	4b09      	ldr	r3, [pc, #36]	; (fe0c <_ZN22FlapperValveController16CorrectToleranceEh+0x68>)
    fde6:	4610      	mov	r0, r2
    fde8:	4798      	blx	r3
    fdea:	4603      	mov	r3, r0
    fdec:	60fb      	str	r3, [r7, #12]
	tolerance=(uint8_t)floatTolerance;
    fdee:	4b08      	ldr	r3, [pc, #32]	; (fe10 <_ZN22FlapperValveController16CorrectToleranceEh+0x6c>)
    fdf0:	68f8      	ldr	r0, [r7, #12]
    fdf2:	4798      	blx	r3
    fdf4:	4603      	mov	r3, r0
    fdf6:	b2da      	uxtb	r2, r3
    fdf8:	687b      	ldr	r3, [r7, #4]
    fdfa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	return tolerance;
    fdfe:	687b      	ldr	r3, [r7, #4]
    fe00:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
}
    fe04:	4618      	mov	r0, r3
    fe06:	3710      	adds	r7, #16
    fe08:	46bd      	mov	sp, r7
    fe0a:	bd80      	pop	{r7, pc}
    fe0c:	00013211 	.word	0x00013211
    fe10:	00013559 	.word	0x00013559

0000fe14 <_ZN22FlapperValveController10StartMotorEv>:
uint8_t	FlapperValveController::StartMotor(){
    fe14:	b580      	push	{r7, lr}
    fe16:	b082      	sub	sp, #8
    fe18:	af00      	add	r7, sp, #0
    fe1a:	6078      	str	r0, [r7, #4]
	if (singlefv->controlOutputs.niAlcFvMotorEnable)
    fe1c:	687b      	ldr	r3, [r7, #4]
    fe1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fe20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    fe24:	2b00      	cmp	r3, #0
    fe26:	d008      	beq.n	fe3a <_ZN22FlapperValveController10StartMotorEv+0x26>
	{
		singlefv->SetEnable(false);
    fe28:	687b      	ldr	r3, [r7, #4]
    fe2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fe2c:	2100      	movs	r1, #0
    fe2e:	4618      	mov	r0, r3
    fe30:	4b09      	ldr	r3, [pc, #36]	; (fe58 <_ZN22FlapperValveController10StartMotorEv+0x44>)
    fe32:	4798      	blx	r3
		delay_ms(10);
    fe34:	200a      	movs	r0, #10
    fe36:	4b09      	ldr	r3, [pc, #36]	; (fe5c <_ZN22FlapperValveController10StartMotorEv+0x48>)
    fe38:	4798      	blx	r3
	}
	
		
	singlefv->SetEnable(true);
    fe3a:	687b      	ldr	r3, [r7, #4]
    fe3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    fe3e:	2101      	movs	r1, #1
    fe40:	4618      	mov	r0, r3
    fe42:	4b05      	ldr	r3, [pc, #20]	; (fe58 <_ZN22FlapperValveController10StartMotorEv+0x44>)
    fe44:	4798      	blx	r3
	flapperValveIsMoving=true;
    fe46:	687b      	ldr	r3, [r7, #4]
    fe48:	2201      	movs	r2, #1
    fe4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	return 0;
    fe4e:	2300      	movs	r3, #0
}
    fe50:	4618      	mov	r0, r3
    fe52:	3708      	adds	r7, #8
    fe54:	46bd      	mov	sp, r7
    fe56:	bd80      	pop	{r7, pc}
    fe58:	000107b9 	.word	0x000107b9
    fe5c:	00002a21 	.word	0x00002a21

0000fe60 <_ZN22FlapperValveController15StopControllingEv>:
uint8_t FlapperValveController::StopControlling(void){
    fe60:	b580      	push	{r7, lr}
    fe62:	b082      	sub	sp, #8
    fe64:	af00      	add	r7, sp, #0
    fe66:	6078      	str	r0, [r7, #4]
	StopMotor();
    fe68:	6878      	ldr	r0, [r7, #4]
    fe6a:	4b0d      	ldr	r3, [pc, #52]	; (fea0 <_ZN22FlapperValveController15StopControllingEv+0x40>)
    fe6c:	4798      	blx	r3
	timeoutKeepControlling=false;
    fe6e:	687b      	ldr	r3, [r7, #4]
    fe70:	2200      	movs	r2, #0
    fe72:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	timeoutFlapperValveController=false;
    fe76:	687b      	ldr	r3, [r7, #4]
    fe78:	2200      	movs	r2, #0
    fe7a:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	isControlling=false;
    fe7e:	687b      	ldr	r3, [r7, #4]
    fe80:	2200      	movs	r2, #0
    fe82:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
	keepControlling=false;
    fe86:	687b      	ldr	r3, [r7, #4]
    fe88:	2200      	movs	r2, #0
    fe8a:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	controllerEnabled=false;
    fe8e:	687b      	ldr	r3, [r7, #4]
    fe90:	2200      	movs	r2, #0
    fe92:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	return 0;
    fe96:	2300      	movs	r3, #0
}
    fe98:	4618      	mov	r0, r3
    fe9a:	3708      	adds	r7, #8
    fe9c:	46bd      	mov	sp, r7
    fe9e:	bd80      	pop	{r7, pc}
    fea0:	0000fbf5 	.word	0x0000fbf5

0000fea4 <_ZN22FlapperValveController16StartControllingEh>:

uint8_t	FlapperValveController::StartControlling(uint8_t sp){
    fea4:	b580      	push	{r7, lr}
    fea6:	b082      	sub	sp, #8
    fea8:	af00      	add	r7, sp, #0
    feaa:	6078      	str	r0, [r7, #4]
    feac:	460b      	mov	r3, r1
    feae:	70fb      	strb	r3, [r7, #3]
		setpoint=VerifySetpoint(sp);
    feb0:	78fb      	ldrb	r3, [r7, #3]
    feb2:	4619      	mov	r1, r3
    feb4:	6878      	ldr	r0, [r7, #4]
    feb6:	4b2b      	ldr	r3, [pc, #172]	; (ff64 <_ZN22FlapperValveController16StartControllingEh+0xc0>)
    feb8:	4798      	blx	r3
    feba:	4603      	mov	r3, r0
    febc:	461a      	mov	r2, r3
    febe:	687b      	ldr	r3, [r7, #4]
    fec0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
		CorrectTolerance(setpoint);
    fec4:	687b      	ldr	r3, [r7, #4]
    fec6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    feca:	4619      	mov	r1, r3
    fecc:	6878      	ldr	r0, [r7, #4]
    fece:	4b26      	ldr	r3, [pc, #152]	; (ff68 <_ZN22FlapperValveController16StartControllingEh+0xc4>)
    fed0:	4798      	blx	r3
		floatSetpoint=(float)setpoint;
    fed2:	687b      	ldr	r3, [r7, #4]
    fed4:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
    fed8:	4b24      	ldr	r3, [pc, #144]	; (ff6c <_ZN22FlapperValveController16StartControllingEh+0xc8>)
    feda:	4610      	mov	r0, r2
    fedc:	4798      	blx	r3
    fede:	4602      	mov	r2, r0
    fee0:	687b      	ldr	r3, [r7, #4]
    fee2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		timeoutFlapperValveController=false;
    fee6:	687b      	ldr	r3, [r7, #4]
    fee8:	2200      	movs	r2, #0
    feea:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		timeoutKeepControlling=false;
    feee:	687b      	ldr	r3, [r7, #4]
    fef0:	2200      	movs	r2, #0
    fef2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		keepControlling=false;
    fef6:	687b      	ldr	r3, [r7, #4]
    fef8:	2200      	movs	r2, #0
    fefa:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
		controllerEnabled=true;
    fefe:	687b      	ldr	r3, [r7, #4]
    ff00:	2201      	movs	r2, #1
    ff02:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		unLockTimeout=false;
    ff06:	687b      	ldr	r3, [r7, #4]
    ff08:	2200      	movs	r2, #0
    ff0a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
		if (valve_ID==0)
    ff0e:	687b      	ldr	r3, [r7, #4]
    ff10:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    ff14:	2b00      	cmp	r3, #0
    ff16:	d106      	bne.n	ff26 <_ZN22FlapperValveController16StartControllingEh+0x82>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
    ff18:	f242 7210 	movw	r2, #10000	; 0x2710
    ff1c:	4914      	ldr	r1, [pc, #80]	; (ff70 <_ZN22FlapperValveController16StartControllingEh+0xcc>)
    ff1e:	4815      	ldr	r0, [pc, #84]	; (ff74 <_ZN22FlapperValveController16StartControllingEh+0xd0>)
    ff20:	4b15      	ldr	r3, [pc, #84]	; (ff78 <_ZN22FlapperValveController16StartControllingEh+0xd4>)
    ff22:	4798      	blx	r3
    ff24:	e005      	b.n	ff32 <_ZN22FlapperValveController16StartControllingEh+0x8e>
		} 
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
    ff26:	f242 7210 	movw	r2, #10000	; 0x2710
    ff2a:	4914      	ldr	r1, [pc, #80]	; (ff7c <_ZN22FlapperValveController16StartControllingEh+0xd8>)
    ff2c:	4811      	ldr	r0, [pc, #68]	; (ff74 <_ZN22FlapperValveController16StartControllingEh+0xd0>)
    ff2e:	4b12      	ldr	r3, [pc, #72]	; (ff78 <_ZN22FlapperValveController16StartControllingEh+0xd4>)
    ff30:	4798      	blx	r3
		}
		
		isControlling=true;
    ff32:	687b      	ldr	r3, [r7, #4]
    ff34:	2201      	movs	r2, #1
    ff36:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		StartMovingOnDirection();
    ff3a:	6878      	ldr	r0, [r7, #4]
    ff3c:	4b10      	ldr	r3, [pc, #64]	; (ff80 <_ZN22FlapperValveController16StartControllingEh+0xdc>)
    ff3e:	4798      	blx	r3
	//	while(!gotSetpoint&(!doPeriodicTask)){
			ControlMovement();
    ff40:	6878      	ldr	r0, [r7, #4]
    ff42:	4b10      	ldr	r3, [pc, #64]	; (ff84 <_ZN22FlapperValveController16StartControllingEh+0xe0>)
    ff44:	4798      	blx	r3
	//	}	
		if (doPeriodicTask)
    ff46:	687b      	ldr	r3, [r7, #4]
    ff48:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
    ff4c:	b2db      	uxtb	r3, r3
    ff4e:	2b00      	cmp	r3, #0
    ff50:	d003      	beq.n	ff5a <_ZN22FlapperValveController16StartControllingEh+0xb6>
		{
			paused=true;
    ff52:	687b      	ldr	r3, [r7, #4]
    ff54:	2201      	movs	r2, #1
    ff56:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		}
		return 0;
    ff5a:	2300      	movs	r3, #0
	
}
    ff5c:	4618      	mov	r0, r3
    ff5e:	3708      	adds	r7, #8
    ff60:	46bd      	mov	sp, r7
    ff62:	bd80      	pop	{r7, pc}
    ff64:	0000ff89 	.word	0x0000ff89
    ff68:	0000fda5 	.word	0x0000fda5
    ff6c:	00013209 	.word	0x00013209
    ff70:	0000f1d1 	.word	0x0000f1d1
    ff74:	20001d1c 	.word	0x20001d1c
    ff78:	0000dee1 	.word	0x0000dee1
    ff7c:	0000f1fd 	.word	0x0000f1fd
    ff80:	0000f445 	.word	0x0000f445
    ff84:	0000f7cd 	.word	0x0000f7cd

0000ff88 <_ZN22FlapperValveController14VerifySetpointEh>:
uint8_t FlapperValveController::VerifySetpoint(uint8_t sp){
    ff88:	b580      	push	{r7, lr}
    ff8a:	b082      	sub	sp, #8
    ff8c:	af00      	add	r7, sp, #0
    ff8e:	6078      	str	r0, [r7, #4]
    ff90:	460b      	mov	r3, r1
    ff92:	70fb      	strb	r3, [r7, #3]
	
	if (IsNBCMode())
    ff94:	6878      	ldr	r0, [r7, #4]
    ff96:	4b2a      	ldr	r3, [pc, #168]	; (10040 <STACK_SIZE+0x40>)
    ff98:	4798      	blx	r3
    ff9a:	4603      	mov	r3, r0
    ff9c:	2b00      	cmp	r3, #0
    ff9e:	d004      	beq.n	ffaa <_ZN22FlapperValveController14VerifySetpointEh+0x22>
	{
		setpoint=sp;
    ffa0:	687b      	ldr	r3, [r7, #4]
    ffa2:	78fa      	ldrb	r2, [r7, #3]
    ffa4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    ffa8:	e043      	b.n	10032 <STACK_SIZE+0x32>
	} 
	else
	{
		if (standAloneActivated)
    ffaa:	687b      	ldr	r3, [r7, #4]
    ffac:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
    ffb0:	2b00      	cmp	r3, #0
    ffb2:	d01f      	beq.n	fff4 <_ZN22FlapperValveController14VerifySetpointEh+0x6c>
		{
			standAlonePosition=0xff-parameters.flapperValveStandAloneMinimumPosition;
    ffb4:	687b      	ldr	r3, [r7, #4]
    ffb6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
    ffba:	43db      	mvns	r3, r3
    ffbc:	b2da      	uxtb	r2, r3
    ffbe:	687b      	ldr	r3, [r7, #4]
    ffc0:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			if (sp>(standAlonePosition))
    ffc4:	78fb      	ldrb	r3, [r7, #3]
    ffc6:	687a      	ldr	r2, [r7, #4]
    ffc8:	f892 20bd 	ldrb.w	r2, [r2, #189]	; 0xbd
    ffcc:	4293      	cmp	r3, r2
    ffce:	dd0c      	ble.n	ffea <_ZN22FlapperValveController14VerifySetpointEh+0x62>
			{
				setpoint=standAlonePosition;
    ffd0:	687b      	ldr	r3, [r7, #4]
    ffd2:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
    ffd6:	687b      	ldr	r3, [r7, #4]
    ffd8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
				currentMaximum=standAlonePosition;
    ffdc:	687b      	ldr	r3, [r7, #4]
    ffde:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
    ffe2:	687b      	ldr	r3, [r7, #4]
    ffe4:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
    ffe8:	e023      	b.n	10032 <STACK_SIZE+0x32>
			}
			else
			{
				setpoint=sp;
    ffea:	687b      	ldr	r3, [r7, #4]
    ffec:	78fa      	ldrb	r2, [r7, #3]
    ffee:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    fff2:	e01e      	b.n	10032 <STACK_SIZE+0x32>
			}
		}
		else
		{
			maximumPosition=0xff-parameters.flapperValveMinimumPosition;
    fff4:	687b      	ldr	r3, [r7, #4]
    fff6:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
    fffa:	43db      	mvns	r3, r3
    fffc:	b2da      	uxtb	r2, r3
    fffe:	687b      	ldr	r3, [r7, #4]
   10000:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
			if (sp>maximumPosition)
   10004:	78fb      	ldrb	r3, [r7, #3]
   10006:	687a      	ldr	r2, [r7, #4]
   10008:	f892 20bc 	ldrb.w	r2, [r2, #188]	; 0xbc
   1000c:	4293      	cmp	r3, r2
   1000e:	dd0c      	ble.n	1002a <STACK_SIZE+0x2a>
			{
				setpoint=maximumPosition;
   10010:	687b      	ldr	r3, [r7, #4]
   10012:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
   10016:	687b      	ldr	r3, [r7, #4]
   10018:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
				currentMaximum=maximumPosition;
   1001c:	687b      	ldr	r3, [r7, #4]
   1001e:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
   10022:	687b      	ldr	r3, [r7, #4]
   10024:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
   10028:	e003      	b.n	10032 <STACK_SIZE+0x32>
			}
			else
			{
				setpoint=sp;
   1002a:	687b      	ldr	r3, [r7, #4]
   1002c:	78fa      	ldrb	r2, [r7, #3]
   1002e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			}
		}
	}
	
	return setpoint;
   10032:	687b      	ldr	r3, [r7, #4]
   10034:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
	
}
   10038:	4618      	mov	r0, r3
   1003a:	3708      	adds	r7, #8
   1003c:	46bd      	mov	sp, r7
   1003e:	bd80      	pop	{r7, pc}
   10040:	0000fbad 	.word	0x0000fbad

00010044 <_ZN22FlapperValveController16StartControllingEv>:
	currentPosition=singlefv->ReadActualPosition();
	//floatCurrentPosition=(float)currentPosition;
	return currentPosition;
}
	
uint8_t	FlapperValveController::StartControlling(void){
   10044:	b580      	push	{r7, lr}
   10046:	b082      	sub	sp, #8
   10048:	af00      	add	r7, sp, #0
   1004a:	6078      	str	r0, [r7, #4]
	return	StartControlling(currentPosition);
   1004c:	687b      	ldr	r3, [r7, #4]
   1004e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   10052:	4619      	mov	r1, r3
   10054:	6878      	ldr	r0, [r7, #4]
   10056:	4b03      	ldr	r3, [pc, #12]	; (10064 <_ZN22FlapperValveController16StartControllingEv+0x20>)
   10058:	4798      	blx	r3
   1005a:	4603      	mov	r3, r0
	
}
   1005c:	4618      	mov	r0, r3
   1005e:	3708      	adds	r7, #8
   10060:	46bd      	mov	sp, r7
   10062:	bd80      	pop	{r7, pc}
   10064:	0000fea5 	.word	0x0000fea5

00010068 <_ZN22FlapperValveController15KeepControllingEh>:
uint8_t	FlapperValveController::KeepControlling(uint8_t restart){
   10068:	b580      	push	{r7, lr}
   1006a:	b082      	sub	sp, #8
   1006c:	af00      	add	r7, sp, #0
   1006e:	6078      	str	r0, [r7, #4]
   10070:	460b      	mov	r3, r1
   10072:	70fb      	strb	r3, [r7, #3]

	//setpoint=lastPosition;

		timeoutKeepControlling=false;
   10074:	687b      	ldr	r3, [r7, #4]
   10076:	2200      	movs	r2, #0
   10078:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	//	hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValveController),FLAPPER_VALVE_TIMEOUT/2);
		isControlling=true;
   1007c:	687b      	ldr	r3, [r7, #4]
   1007e:	2201      	movs	r2, #1
   10080:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		StartMovingOnDirection();
   10084:	6878      	ldr	r0, [r7, #4]
   10086:	4b05      	ldr	r3, [pc, #20]	; (1009c <_ZN22FlapperValveController15KeepControllingEh+0x34>)
   10088:	4798      	blx	r3
		keepControlling=false;
   1008a:	687b      	ldr	r3, [r7, #4]
   1008c:	2200      	movs	r2, #0
   1008e:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

	return 0;
   10092:	2300      	movs	r3, #0
	
}
   10094:	4618      	mov	r0, r3
   10096:	3708      	adds	r7, #8
   10098:	46bd      	mov	sp, r7
   1009a:	bd80      	pop	{r7, pc}
   1009c:	0000f445 	.word	0x0000f445

000100a0 <_ZN22FlapperValveController22UpdateFlapperValveDataEv>:

void	FlapperValveController::UpdateFlapperValveData(void){
   100a0:	b590      	push	{r4, r7, lr}
   100a2:	b085      	sub	sp, #20
   100a4:	af00      	add	r7, sp, #0
   100a6:	60f8      	str	r0, [r7, #12]
	currentPosition=singlefv->ReadActualPosition();
   100a8:	68fb      	ldr	r3, [r7, #12]
   100aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   100ac:	4618      	mov	r0, r3
   100ae:	4b32      	ldr	r3, [pc, #200]	; (10178 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xd8>)
   100b0:	4798      	blx	r3
   100b2:	4603      	mov	r3, r0
   100b4:	461a      	mov	r2, r3
   100b6:	68fb      	ldr	r3, [r7, #12]
   100b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	dataStruct.actualPosition=currentPosition;
   100bc:	68fb      	ldr	r3, [r7, #12]
   100be:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
   100c2:	68fb      	ldr	r3, [r7, #12]
   100c4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	dataStruct.setPointPosition=setpoint;
   100c8:	68fb      	ldr	r3, [r7, #12]
   100ca:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
   100ce:	68fb      	ldr	r3, [r7, #12]
   100d0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	dataStruct.inputStatus=singlefv->ReadStatusInputs();
   100d4:	68fb      	ldr	r3, [r7, #12]
   100d6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   100d8:	68fc      	ldr	r4, [r7, #12]
   100da:	463b      	mov	r3, r7
   100dc:	4611      	mov	r1, r2
   100de:	4618      	mov	r0, r3
   100e0:	4b26      	ldr	r3, [pc, #152]	; (1017c <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xdc>)
   100e2:	4798      	blx	r3
   100e4:	f104 0380 	add.w	r3, r4, #128	; 0x80
   100e8:	463a      	mov	r2, r7
   100ea:	6810      	ldr	r0, [r2, #0]
   100ec:	6018      	str	r0, [r3, #0]
   100ee:	8892      	ldrh	r2, [r2, #4]
   100f0:	809a      	strh	r2, [r3, #4]
	dataStruct.controlOutputs=singlefv->ReadControlStatus();
   100f2:	68fb      	ldr	r3, [r7, #12]
   100f4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   100f6:	68fc      	ldr	r4, [r7, #12]
   100f8:	463b      	mov	r3, r7
   100fa:	4611      	mov	r1, r2
   100fc:	4618      	mov	r0, r3
   100fe:	4b20      	ldr	r3, [pc, #128]	; (10180 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xe0>)
   10100:	4798      	blx	r3
   10102:	f104 0386 	add.w	r3, r4, #134	; 0x86
   10106:	463a      	mov	r2, r7
   10108:	6811      	ldr	r1, [r2, #0]
   1010a:	6852      	ldr	r2, [r2, #4]
   1010c:	6019      	str	r1, [r3, #0]
   1010e:	605a      	str	r2, [r3, #4]
	
	dataStruct.controllerStatus.isMoving=flapperValveIsMoving;
   10110:	68fb      	ldr	r3, [r7, #12]
   10112:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   10116:	b2da      	uxtb	r2, r3
   10118:	68fb      	ldr	r3, [r7, #12]
   1011a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	dataStruct.controllerStatus.isControlling=isControlling;
   1011e:	68fb      	ldr	r3, [r7, #12]
   10120:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
   10124:	68fb      	ldr	r3, [r7, #12]
   10126:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	dataStruct.controllerStatus.NBC_Mode=NBC_Activated;
   1012a:	68fb      	ldr	r3, [r7, #12]
   1012c:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
   10130:	68fb      	ldr	r3, [r7, #12]
   10132:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	
	if (standAloneActivated)
   10136:	68fb      	ldr	r3, [r7, #12]
   10138:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
   1013c:	2b00      	cmp	r3, #0
   1013e:	d008      	beq.n	10152 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xb2>
	{
		currentMaximum=0xff-parameters.flapperValveStandAloneMinimumPosition;
   10140:	68fb      	ldr	r3, [r7, #12]
   10142:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
   10146:	43db      	mvns	r3, r3
   10148:	b2da      	uxtb	r2, r3
   1014a:	68fb      	ldr	r3, [r7, #12]
   1014c:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
   10150:	e007      	b.n	10162 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xc2>
	} 
	else
	{
		currentMaximum=0xff-parameters.flapperValveMinimumPosition;
   10152:	68fb      	ldr	r3, [r7, #12]
   10154:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
   10158:	43db      	mvns	r3, r3
   1015a:	b2da      	uxtb	r2, r3
   1015c:	68fb      	ldr	r3, [r7, #12]
   1015e:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
	}
	FillPositionsFIFO(currentPosition);
   10162:	68fb      	ldr	r3, [r7, #12]
   10164:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   10168:	4619      	mov	r1, r3
   1016a:	68f8      	ldr	r0, [r7, #12]
   1016c:	4b05      	ldr	r3, [pc, #20]	; (10184 <_ZN22FlapperValveController22UpdateFlapperValveDataEv+0xe4>)
   1016e:	4798      	blx	r3
}
   10170:	bf00      	nop
   10172:	3714      	adds	r7, #20
   10174:	46bd      	mov	sp, r7
   10176:	bd90      	pop	{r4, r7, pc}
   10178:	000109d9 	.word	0x000109d9
   1017c:	0001075d 	.word	0x0001075d
   10180:	00010701 	.word	0x00010701
   10184:	00010189 	.word	0x00010189

00010188 <_ZN22FlapperValveController17FillPositionsFIFOEh>:
void FlapperValveController::FillPositionsFIFO(uint8_t cp){
   10188:	b480      	push	{r7}
   1018a:	b085      	sub	sp, #20
   1018c:	af00      	add	r7, sp, #0
   1018e:	6078      	str	r0, [r7, #4]
   10190:	460b      	mov	r3, r1
   10192:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   10194:	2300      	movs	r3, #0
   10196:	73fb      	strb	r3, [r7, #15]
   10198:	7bfb      	ldrb	r3, [r7, #15]
   1019a:	2b0e      	cmp	r3, #14
   1019c:	dc1d      	bgt.n	101da <_ZN22FlapperValveController17FillPositionsFIFOEh+0x52>
	{
		positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-1-i]=positions[valve_ID][FLAPPER_VALVE_POSITIONS_BUFFER-2-i];
   1019e:	687b      	ldr	r3, [r7, #4]
   101a0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   101a4:	687a      	ldr	r2, [r7, #4]
   101a6:	3330      	adds	r3, #48	; 0x30
   101a8:	009b      	lsls	r3, r3, #2
   101aa:	4413      	add	r3, r2
   101ac:	685b      	ldr	r3, [r3, #4]
   101ae:	7bfa      	ldrb	r2, [r7, #15]
   101b0:	f1c2 020f 	rsb	r2, r2, #15
   101b4:	441a      	add	r2, r3
   101b6:	687b      	ldr	r3, [r7, #4]
   101b8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   101bc:	6879      	ldr	r1, [r7, #4]
   101be:	3330      	adds	r3, #48	; 0x30
   101c0:	009b      	lsls	r3, r3, #2
   101c2:	440b      	add	r3, r1
   101c4:	685b      	ldr	r3, [r3, #4]
   101c6:	7bf9      	ldrb	r1, [r7, #15]
   101c8:	f1c1 010e 	rsb	r1, r1, #14
   101cc:	440b      	add	r3, r1
   101ce:	781b      	ldrb	r3, [r3, #0]
   101d0:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < FLAPPER_VALVE_POSITIONS_BUFFER-1; i++)
   101d2:	7bfb      	ldrb	r3, [r7, #15]
   101d4:	3301      	adds	r3, #1
   101d6:	73fb      	strb	r3, [r7, #15]
   101d8:	e7de      	b.n	10198 <_ZN22FlapperValveController17FillPositionsFIFOEh+0x10>
	}
	positions[valve_ID][0]=cp;
   101da:	687b      	ldr	r3, [r7, #4]
   101dc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   101e0:	687a      	ldr	r2, [r7, #4]
   101e2:	3330      	adds	r3, #48	; 0x30
   101e4:	009b      	lsls	r3, r3, #2
   101e6:	4413      	add	r3, r2
   101e8:	685b      	ldr	r3, [r3, #4]
   101ea:	78fa      	ldrb	r2, [r7, #3]
   101ec:	701a      	strb	r2, [r3, #0]
}
   101ee:	bf00      	nop
   101f0:	3714      	adds	r7, #20
   101f2:	46bd      	mov	sp, r7
   101f4:	bc80      	pop	{r7}
   101f6:	4770      	bx	lr

000101f8 <_ZN22FlapperValveController8SelftestEv>:

uint8_t	 FlapperValveController::GetCurrentPosition(){
	return singlefv->ReadActualPosition();
}

bool	FlapperValveController::Selftest(void){
   101f8:	b580      	push	{r7, lr}
   101fa:	b084      	sub	sp, #16
   101fc:	af00      	add	r7, sp, #0
   101fe:	6078      	str	r0, [r7, #4]
		uint8_t localSetpoint=180;
   10200:	23b4      	movs	r3, #180	; 0xb4
   10202:	73bb      	strb	r3, [r7, #14]
		parameters=defaultParameters;
   10204:	687b      	ldr	r3, [r7, #4]
   10206:	4a52      	ldr	r2, [pc, #328]	; (10350 <_ZN22FlapperValveController8SelftestEv+0x158>)
   10208:	33bf      	adds	r3, #191	; 0xbf
   1020a:	8812      	ldrh	r2, [r2, #0]
   1020c:	801a      	strh	r2, [r3, #0]
		uint8_t localPosition;
	UpdateFlapperValveData();
   1020e:	6878      	ldr	r0, [r7, #4]
   10210:	4b50      	ldr	r3, [pc, #320]	; (10354 <_ZN22FlapperValveController8SelftestEv+0x15c>)
   10212:	4798      	blx	r3
	singlefv->SetEnable(false);
   10214:	687b      	ldr	r3, [r7, #4]
   10216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10218:	2100      	movs	r1, #0
   1021a:	4618      	mov	r0, r3
   1021c:	4b4e      	ldr	r3, [pc, #312]	; (10358 <_ZN22FlapperValveController8SelftestEv+0x160>)
   1021e:	4798      	blx	r3
	singlefv->SetInvalidPosition(false);
   10220:	687b      	ldr	r3, [r7, #4]
   10222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10224:	2100      	movs	r1, #0
   10226:	4618      	mov	r0, r3
   10228:	4b4c      	ldr	r3, [pc, #304]	; (1035c <_ZN22FlapperValveController8SelftestEv+0x164>)
   1022a:	4798      	blx	r3
	singlefv->ClearMoveFault(false);
   1022c:	687b      	ldr	r3, [r7, #4]
   1022e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10230:	2100      	movs	r1, #0
   10232:	4618      	mov	r0, r3
   10234:	4b4a      	ldr	r3, [pc, #296]	; (10360 <_ZN22FlapperValveController8SelftestEv+0x168>)
   10236:	4798      	blx	r3
	delay_ms(10);
   10238:	200a      	movs	r0, #10
   1023a:	4b4a      	ldr	r3, [pc, #296]	; (10364 <_ZN22FlapperValveController8SelftestEv+0x16c>)
   1023c:	4798      	blx	r3
	singlefv->ClearMoveFault(true);
   1023e:	687b      	ldr	r3, [r7, #4]
   10240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10242:	2101      	movs	r1, #1
   10244:	4618      	mov	r0, r3
   10246:	4b46      	ldr	r3, [pc, #280]	; (10360 <_ZN22FlapperValveController8SelftestEv+0x168>)
   10248:	4798      	blx	r3
	singlefv->WriteSetpoint(localSetpoint);
   1024a:	687b      	ldr	r3, [r7, #4]
   1024c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1024e:	7bba      	ldrb	r2, [r7, #14]
   10250:	4611      	mov	r1, r2
   10252:	4618      	mov	r0, r3
   10254:	4b44      	ldr	r3, [pc, #272]	; (10368 <_ZN22FlapperValveController8SelftestEv+0x170>)
   10256:	4798      	blx	r3
	singlefv->SetDirection(false);
   10258:	687b      	ldr	r3, [r7, #4]
   1025a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1025c:	2100      	movs	r1, #0
   1025e:	4618      	mov	r0, r3
   10260:	4b42      	ldr	r3, [pc, #264]	; (1036c <_ZN22FlapperValveController8SelftestEv+0x174>)
   10262:	4798      	blx	r3
	if (singlefv->ReadActualPosition()>localSetpoint)
   10264:	687b      	ldr	r3, [r7, #4]
   10266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10268:	4618      	mov	r0, r3
   1026a:	4b41      	ldr	r3, [pc, #260]	; (10370 <_ZN22FlapperValveController8SelftestEv+0x178>)
   1026c:	4798      	blx	r3
   1026e:	4603      	mov	r3, r0
   10270:	461a      	mov	r2, r3
   10272:	7bbb      	ldrb	r3, [r7, #14]
   10274:	429a      	cmp	r2, r3
   10276:	bfcc      	ite	gt
   10278:	2301      	movgt	r3, #1
   1027a:	2300      	movle	r3, #0
   1027c:	b2db      	uxtb	r3, r3
   1027e:	2b00      	cmp	r3, #0
   10280:	d006      	beq.n	10290 <_ZN22FlapperValveController8SelftestEv+0x98>
	{
		singlefv->SetDirection(true);
   10282:	687b      	ldr	r3, [r7, #4]
   10284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10286:	2101      	movs	r1, #1
   10288:	4618      	mov	r0, r3
   1028a:	4b38      	ldr	r3, [pc, #224]	; (1036c <_ZN22FlapperValveController8SelftestEv+0x174>)
   1028c:	4798      	blx	r3
   1028e:	e005      	b.n	1029c <_ZN22FlapperValveController8SelftestEv+0xa4>
	}
	else
	{
		singlefv->SetDirection(false);
   10290:	687b      	ldr	r3, [r7, #4]
   10292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10294:	2100      	movs	r1, #0
   10296:	4618      	mov	r0, r3
   10298:	4b34      	ldr	r3, [pc, #208]	; (1036c <_ZN22FlapperValveController8SelftestEv+0x174>)
   1029a:	4798      	blx	r3
	}
		if (valve_ID==0)
   1029c:	687b      	ldr	r3, [r7, #4]
   1029e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   102a2:	2b00      	cmp	r3, #0
   102a4:	d106      	bne.n	102b4 <_ZN22FlapperValveController8SelftestEv+0xbc>
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve1Controller),FLAPPER_VALVE_TIMEOUT);
   102a6:	f242 7210 	movw	r2, #10000	; 0x2710
   102aa:	4932      	ldr	r1, [pc, #200]	; (10374 <_ZN22FlapperValveController8SelftestEv+0x17c>)
   102ac:	4832      	ldr	r0, [pc, #200]	; (10378 <_ZN22FlapperValveController8SelftestEv+0x180>)
   102ae:	4b33      	ldr	r3, [pc, #204]	; (1037c <_ZN22FlapperValveController8SelftestEv+0x184>)
   102b0:	4798      	blx	r3
   102b2:	e005      	b.n	102c0 <_ZN22FlapperValveController8SelftestEv+0xc8>
		}
		else
		{
			hvacTimer.Start_oneShot_task(FUNC_PTR(TimeoutFlapperValve2Controller),FLAPPER_VALVE_TIMEOUT);
   102b4:	f242 7210 	movw	r2, #10000	; 0x2710
   102b8:	4931      	ldr	r1, [pc, #196]	; (10380 <_ZN22FlapperValveController8SelftestEv+0x188>)
   102ba:	482f      	ldr	r0, [pc, #188]	; (10378 <_ZN22FlapperValveController8SelftestEv+0x180>)
   102bc:	4b2f      	ldr	r3, [pc, #188]	; (1037c <_ZN22FlapperValveController8SelftestEv+0x184>)
   102be:	4798      	blx	r3
		}
	singlefv->SetEnable(true);
   102c0:	687b      	ldr	r3, [r7, #4]
   102c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   102c4:	2101      	movs	r1, #1
   102c6:	4618      	mov	r0, r3
   102c8:	4b23      	ldr	r3, [pc, #140]	; (10358 <_ZN22FlapperValveController8SelftestEv+0x160>)
   102ca:	4798      	blx	r3

	localPosition=singlefv->ReadActualPosition();
   102cc:	687b      	ldr	r3, [r7, #4]
   102ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   102d0:	4618      	mov	r0, r3
   102d2:	4b27      	ldr	r3, [pc, #156]	; (10370 <_ZN22FlapperValveController8SelftestEv+0x178>)
   102d4:	4798      	blx	r3
   102d6:	4603      	mov	r3, r0
   102d8:	73fb      	strb	r3, [r7, #15]
	timeoutFlapperValveController=false;
   102da:	687b      	ldr	r3, [r7, #4]
   102dc:	2200      	movs	r2, #0
   102de:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
   102e2:	7bfa      	ldrb	r2, [r7, #15]
   102e4:	7bbb      	ldrb	r3, [r7, #14]
   102e6:	1ad3      	subs	r3, r2, r3
   102e8:	2b00      	cmp	r3, #0
   102ea:	bfb8      	it	lt
   102ec:	425b      	neglt	r3, r3
   102ee:	2b0c      	cmp	r3, #12
   102f0:	bfcc      	ite	gt
   102f2:	2301      	movgt	r3, #1
   102f4:	2300      	movle	r3, #0
   102f6:	b2db      	uxtb	r3, r3
   102f8:	461a      	mov	r2, r3
   102fa:	687b      	ldr	r3, [r7, #4]
   102fc:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   10300:	b2db      	uxtb	r3, r3
   10302:	f083 0301 	eor.w	r3, r3, #1
   10306:	b2db      	uxtb	r3, r3
   10308:	4013      	ands	r3, r2
   1030a:	2b00      	cmp	r3, #0
   1030c:	bf14      	ite	ne
   1030e:	2301      	movne	r3, #1
   10310:	2300      	moveq	r3, #0
   10312:	b2db      	uxtb	r3, r3
   10314:	2b00      	cmp	r3, #0
   10316:	d007      	beq.n	10328 <_ZN22FlapperValveController8SelftestEv+0x130>

	{

		localPosition=singlefv->ReadActualPosition();
   10318:	687b      	ldr	r3, [r7, #4]
   1031a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1031c:	4618      	mov	r0, r3
   1031e:	4b14      	ldr	r3, [pc, #80]	; (10370 <_ZN22FlapperValveController8SelftestEv+0x178>)
   10320:	4798      	blx	r3
   10322:	4603      	mov	r3, r0
   10324:	73fb      	strb	r3, [r7, #15]
	while ((abs(localPosition-localSetpoint)>12)&(!timeoutFlapperValveController))
   10326:	e7dc      	b.n	102e2 <_ZN22FlapperValveController8SelftestEv+0xea>

	}
	RemoveTimeoutTask();
   10328:	6878      	ldr	r0, [r7, #4]
   1032a:	4b16      	ldr	r3, [pc, #88]	; (10384 <_ZN22FlapperValveController8SelftestEv+0x18c>)
   1032c:	4798      	blx	r3

	singlefv->SetEnable(false);
   1032e:	687b      	ldr	r3, [r7, #4]
   10330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10332:	2100      	movs	r1, #0
   10334:	4618      	mov	r0, r3
   10336:	4b08      	ldr	r3, [pc, #32]	; (10358 <_ZN22FlapperValveController8SelftestEv+0x160>)
   10338:	4798      	blx	r3
	return !timeoutFlapperValveController;
   1033a:	687b      	ldr	r3, [r7, #4]
   1033c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
   10340:	b2db      	uxtb	r3, r3
   10342:	f083 0301 	eor.w	r3, r3, #1
   10346:	b2db      	uxtb	r3, r3
}
   10348:	4618      	mov	r0, r3
   1034a:	3710      	adds	r7, #16
   1034c:	46bd      	mov	sp, r7
   1034e:	bd80      	pop	{r7, pc}
   10350:	00013f2c 	.word	0x00013f2c
   10354:	000100a1 	.word	0x000100a1
   10358:	000107b9 	.word	0x000107b9
   1035c:	00010929 	.word	0x00010929
   10360:	000108b1 	.word	0x000108b1
   10364:	00002a21 	.word	0x00002a21
   10368:	000109a1 	.word	0x000109a1
   1036c:	00010839 	.word	0x00010839
   10370:	000109d9 	.word	0x000109d9
   10374:	0000f1d1 	.word	0x0000f1d1
   10378:	20001d1c 	.word	0x20001d1c
   1037c:	0000dee1 	.word	0x0000dee1
   10380:	0000f1fd 	.word	0x0000f1fd
   10384:	00010389 	.word	0x00010389

00010388 <_ZN22FlapperValveController17RemoveTimeoutTaskEv>:

void	FlapperValveController::RemoveTimeoutTask(void){
   10388:	b580      	push	{r7, lr}
   1038a:	b082      	sub	sp, #8
   1038c:	af00      	add	r7, sp, #0
   1038e:	6078      	str	r0, [r7, #4]
	if (valve_ID==0)
   10390:	687b      	ldr	r3, [r7, #4]
   10392:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   10396:	2b00      	cmp	r3, #0
   10398:	d104      	bne.n	103a4 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x1c>
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve1Controller));
   1039a:	4906      	ldr	r1, [pc, #24]	; (103b4 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x2c>)
   1039c:	4806      	ldr	r0, [pc, #24]	; (103b8 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
   1039e:	4b07      	ldr	r3, [pc, #28]	; (103bc <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
   103a0:	4798      	blx	r3
	}
	else
	{
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
	}
}
   103a2:	e003      	b.n	103ac <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x24>
		hvacTimer.Remove_task(FUNC_PTR(TimeoutFlapperValve2Controller));
   103a4:	4906      	ldr	r1, [pc, #24]	; (103c0 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x38>)
   103a6:	4804      	ldr	r0, [pc, #16]	; (103b8 <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x30>)
   103a8:	4b04      	ldr	r3, [pc, #16]	; (103bc <_ZN22FlapperValveController17RemoveTimeoutTaskEv+0x34>)
   103aa:	4798      	blx	r3
}
   103ac:	bf00      	nop
   103ae:	3708      	adds	r7, #8
   103b0:	46bd      	mov	sp, r7
   103b2:	bd80      	pop	{r7, pc}
   103b4:	0000f1d1 	.word	0x0000f1d1
   103b8:	20001d1c 	.word	0x20001d1c
   103bc:	0000de89 	.word	0x0000de89
   103c0:	0000f1fd 	.word	0x0000f1fd

000103c4 <__tcf_0>:
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
   103c4:	b590      	push	{r4, r7, lr}
   103c6:	b083      	sub	sp, #12
   103c8:	af00      	add	r7, sp, #0
   103ca:	6078      	str	r0, [r7, #4]
   103cc:	4c05      	ldr	r4, [pc, #20]	; (103e4 <__tcf_0+0x20>)
   103ce:	4b06      	ldr	r3, [pc, #24]	; (103e8 <__tcf_0+0x24>)
   103d0:	429c      	cmp	r4, r3
   103d2:	d004      	beq.n	103de <__tcf_0+0x1a>
   103d4:	3c74      	subs	r4, #116	; 0x74
   103d6:	4620      	mov	r0, r4
   103d8:	4b04      	ldr	r3, [pc, #16]	; (103ec <__tcf_0+0x28>)
   103da:	4798      	blx	r3
   103dc:	e7f7      	b.n	103ce <__tcf_0+0xa>
   103de:	370c      	adds	r7, #12
   103e0:	46bd      	mov	sp, r7
   103e2:	bd90      	pop	{r4, r7, pc}
   103e4:	20001eec 	.word	0x20001eec
   103e8:	20001e04 	.word	0x20001e04
   103ec:	0001059d 	.word	0x0001059d

000103f0 <_Z41__static_initialization_and_destruction_0ii>:

   103f0:	b5b0      	push	{r4, r5, r7, lr}
   103f2:	b082      	sub	sp, #8
   103f4:	af00      	add	r7, sp, #0
   103f6:	6078      	str	r0, [r7, #4]
   103f8:	6039      	str	r1, [r7, #0]
   103fa:	687b      	ldr	r3, [r7, #4]
   103fc:	2b01      	cmp	r3, #1
   103fe:	d164      	bne.n	104ca <_Z41__static_initialization_and_destruction_0ii+0xda>
   10400:	683b      	ldr	r3, [r7, #0]
   10402:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10406:	4293      	cmp	r3, r2
   10408:	d15f      	bne.n	104ca <_Z41__static_initialization_and_destruction_0ii+0xda>
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   1040a:	4932      	ldr	r1, [pc, #200]	; (104d4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   1040c:	4832      	ldr	r0, [pc, #200]	; (104d8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   1040e:	4b33      	ldr	r3, [pc, #204]	; (104dc <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10410:	4798      	blx	r3
   10412:	4a33      	ldr	r2, [pc, #204]	; (104e0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10414:	4933      	ldr	r1, [pc, #204]	; (104e4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   10416:	4830      	ldr	r0, [pc, #192]	; (104d8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   10418:	4b33      	ldr	r3, [pc, #204]	; (104e8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   1041a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   1041c:	4933      	ldr	r1, [pc, #204]	; (104ec <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   1041e:	4834      	ldr	r0, [pc, #208]	; (104f0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   10420:	4b2e      	ldr	r3, [pc, #184]	; (104dc <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10422:	4798      	blx	r3
   10424:	4a2e      	ldr	r2, [pc, #184]	; (104e0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10426:	492f      	ldr	r1, [pc, #188]	; (104e4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   10428:	4831      	ldr	r0, [pc, #196]	; (104f0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   1042a:	4b2f      	ldr	r3, [pc, #188]	; (104e8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   1042c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   1042e:	4931      	ldr	r1, [pc, #196]	; (104f4 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10430:	4831      	ldr	r0, [pc, #196]	; (104f8 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10432:	4b2a      	ldr	r3, [pc, #168]	; (104dc <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10434:	4798      	blx	r3
   10436:	4a2a      	ldr	r2, [pc, #168]	; (104e0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10438:	492a      	ldr	r1, [pc, #168]	; (104e4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   1043a:	482f      	ldr	r0, [pc, #188]	; (104f8 <_Z41__static_initialization_and_destruction_0ii+0x108>)
   1043c:	4b2a      	ldr	r3, [pc, #168]	; (104e8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   1043e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   10440:	492e      	ldr	r1, [pc, #184]	; (104fc <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10442:	482f      	ldr	r0, [pc, #188]	; (10500 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10444:	4b25      	ldr	r3, [pc, #148]	; (104dc <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10446:	4798      	blx	r3
   10448:	4a25      	ldr	r2, [pc, #148]	; (104e0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1044a:	4926      	ldr	r1, [pc, #152]	; (104e4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   1044c:	482c      	ldr	r0, [pc, #176]	; (10500 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   1044e:	4b26      	ldr	r3, [pc, #152]	; (104e8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10450:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   10452:	492c      	ldr	r1, [pc, #176]	; (10504 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   10454:	482c      	ldr	r0, [pc, #176]	; (10508 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10456:	4b21      	ldr	r3, [pc, #132]	; (104dc <_Z41__static_initialization_and_destruction_0ii+0xec>)
   10458:	4798      	blx	r3
   1045a:	4a21      	ldr	r2, [pc, #132]	; (104e0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1045c:	4921      	ldr	r1, [pc, #132]	; (104e4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   1045e:	482a      	ldr	r0, [pc, #168]	; (10508 <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10460:	4b21      	ldr	r3, [pc, #132]	; (104e8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10462:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   10464:	4929      	ldr	r1, [pc, #164]	; (1050c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   10466:	482a      	ldr	r0, [pc, #168]	; (10510 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   10468:	4b1c      	ldr	r3, [pc, #112]	; (104dc <_Z41__static_initialization_and_destruction_0ii+0xec>)
   1046a:	4798      	blx	r3
   1046c:	4a1c      	ldr	r2, [pc, #112]	; (104e0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   1046e:	491d      	ldr	r1, [pc, #116]	; (104e4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   10470:	4827      	ldr	r0, [pc, #156]	; (10510 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   10472:	4b1d      	ldr	r3, [pc, #116]	; (104e8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10474:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   10476:	4927      	ldr	r1, [pc, #156]	; (10514 <_Z41__static_initialization_and_destruction_0ii+0x124>)
   10478:	4827      	ldr	r0, [pc, #156]	; (10518 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   1047a:	4b18      	ldr	r3, [pc, #96]	; (104dc <_Z41__static_initialization_and_destruction_0ii+0xec>)
   1047c:	4798      	blx	r3
   1047e:	4a18      	ldr	r2, [pc, #96]	; (104e0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10480:	4918      	ldr	r1, [pc, #96]	; (104e4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   10482:	4825      	ldr	r0, [pc, #148]	; (10518 <_Z41__static_initialization_and_destruction_0ii+0x128>)
   10484:	4b18      	ldr	r3, [pc, #96]	; (104e8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10486:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   10488:	4924      	ldr	r1, [pc, #144]	; (1051c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   1048a:	4825      	ldr	r0, [pc, #148]	; (10520 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   1048c:	4b13      	ldr	r3, [pc, #76]	; (104dc <_Z41__static_initialization_and_destruction_0ii+0xec>)
   1048e:	4798      	blx	r3
   10490:	4a13      	ldr	r2, [pc, #76]	; (104e0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   10492:	4914      	ldr	r1, [pc, #80]	; (104e4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   10494:	4822      	ldr	r0, [pc, #136]	; (10520 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   10496:	4b14      	ldr	r3, [pc, #80]	; (104e8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   10498:	4798      	blx	r3
static SingleFlapperValve_Class fvStatic[FLAPPER_VALVE_QUANTITY];
   1049a:	4b22      	ldr	r3, [pc, #136]	; (10524 <_Z41__static_initialization_and_destruction_0ii+0x134>)
   1049c:	2401      	movs	r4, #1
   1049e:	461d      	mov	r5, r3
   104a0:	2c00      	cmp	r4, #0
   104a2:	db05      	blt.n	104b0 <_Z41__static_initialization_and_destruction_0ii+0xc0>
   104a4:	4628      	mov	r0, r5
   104a6:	4b20      	ldr	r3, [pc, #128]	; (10528 <_Z41__static_initialization_and_destruction_0ii+0x138>)
   104a8:	4798      	blx	r3
   104aa:	3574      	adds	r5, #116	; 0x74
   104ac:	3c01      	subs	r4, #1
   104ae:	e7f7      	b.n	104a0 <_Z41__static_initialization_and_destruction_0ii+0xb0>
   104b0:	4a0b      	ldr	r2, [pc, #44]	; (104e0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   104b2:	491e      	ldr	r1, [pc, #120]	; (1052c <_Z41__static_initialization_and_destruction_0ii+0x13c>)
   104b4:	2000      	movs	r0, #0
   104b6:	4b0c      	ldr	r3, [pc, #48]	; (104e8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   104b8:	4798      	blx	r3
   104ba:	481d      	ldr	r0, [pc, #116]	; (10530 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   104bc:	4b1d      	ldr	r3, [pc, #116]	; (10534 <_Z41__static_initialization_and_destruction_0ii+0x144>)
   104be:	4798      	blx	r3
   104c0:	4a07      	ldr	r2, [pc, #28]	; (104e0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   104c2:	491d      	ldr	r1, [pc, #116]	; (10538 <_Z41__static_initialization_and_destruction_0ii+0x148>)
   104c4:	481a      	ldr	r0, [pc, #104]	; (10530 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   104c6:	4b08      	ldr	r3, [pc, #32]	; (104e8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   104c8:	4798      	blx	r3
   104ca:	bf00      	nop
   104cc:	3708      	adds	r7, #8
   104ce:	46bd      	mov	sp, r7
   104d0:	bdb0      	pop	{r4, r5, r7, pc}
   104d2:	bf00      	nop
   104d4:	20009da8 	.word	0x20009da8
   104d8:	20001cdc 	.word	0x20001cdc
   104dc:	0000dc59 	.word	0x0000dc59
   104e0:	20000000 	.word	0x20000000
   104e4:	0000dc91 	.word	0x0000dc91
   104e8:	00013091 	.word	0x00013091
   104ec:	20009e3c 	.word	0x20009e3c
   104f0:	20001cfc 	.word	0x20001cfc
   104f4:	20009f60 	.word	0x20009f60
   104f8:	20001d1c 	.word	0x20001d1c
   104fc:	20009e5c 	.word	0x20009e5c
   10500:	20001d3c 	.word	0x20001d3c
   10504:	20009f20 	.word	0x20009f20
   10508:	20001d5c 	.word	0x20001d5c
   1050c:	20009f40 	.word	0x20009f40
   10510:	20001d7c 	.word	0x20001d7c
   10514:	20009e18 	.word	0x20009e18
   10518:	20001d9c 	.word	0x20001d9c
   1051c:	20009eb8 	.word	0x20009eb8
   10520:	20001dbc 	.word	0x20001dbc
   10524:	20001e04 	.word	0x20001e04
   10528:	00010551 	.word	0x00010551
   1052c:	000103c5 	.word	0x000103c5
   10530:	20001eec 	.word	0x20001eec
   10534:	0000f2a9 	.word	0x0000f2a9
   10538:	0000f331 	.word	0x0000f331

0001053c <_GLOBAL__sub_I_ptrFlapperValveController>:
   1053c:	b580      	push	{r7, lr}
   1053e:	af00      	add	r7, sp, #0
   10540:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10544:	2001      	movs	r0, #1
   10546:	4b01      	ldr	r3, [pc, #4]	; (1054c <_GLOBAL__sub_I_ptrFlapperValveController+0x10>)
   10548:	4798      	blx	r3
   1054a:	bd80      	pop	{r7, pc}
   1054c:	000103f1 	.word	0x000103f1

00010550 <_ZN24SingleFlapperValve_ClassC1Ev>:




// default constructor
SingleFlapperValve_Class::SingleFlapperValve_Class()
   10550:	b580      	push	{r7, lr}
   10552:	b082      	sub	sp, #8
   10554:	af00      	add	r7, sp, #0
   10556:	6078      	str	r0, [r7, #4]
   10558:	687b      	ldr	r3, [r7, #4]
   1055a:	4618      	mov	r0, r3
   1055c:	4b0c      	ldr	r3, [pc, #48]	; (10590 <_ZN24SingleFlapperValve_ClassC1Ev+0x40>)
   1055e:	4798      	blx	r3
{
	valveID=0;
   10560:	687b      	ldr	r3, [r7, #4]
   10562:	2200      	movs	r2, #0
   10564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	i2c=&i2cStatic;
   10568:	687b      	ldr	r3, [r7, #4]
   1056a:	4a0a      	ldr	r2, [pc, #40]	; (10594 <_ZN24SingleFlapperValve_ClassC1Ev+0x44>)
   1056c:	649a      	str	r2, [r3, #72]	; 0x48
	fv1StatusChanged=false;
   1056e:	687b      	ldr	r3, [r7, #4]
   10570:	2200      	movs	r2, #0
   10572:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ptrSingleFlapperValveClass=this;
   10576:	4a08      	ldr	r2, [pc, #32]	; (10598 <_ZN24SingleFlapperValve_ClassC1Ev+0x48>)
   10578:	687b      	ldr	r3, [r7, #4]
   1057a:	6013      	str	r3, [r2, #0]
	isOK=false;
   1057c:	687b      	ldr	r3, [r7, #4]
   1057e:	2200      	movs	r2, #0
   10580:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
} //FlapperValve_Class
   10584:	687b      	ldr	r3, [r7, #4]
   10586:	4618      	mov	r0, r3
   10588:	3708      	adds	r7, #8
   1058a:	46bd      	mov	sp, r7
   1058c:	bd80      	pop	{r7, pc}
   1058e:	bf00      	nop
   10590:	000114f9 	.word	0x000114f9
   10594:	200020c4 	.word	0x200020c4
   10598:	200020c0 	.word	0x200020c0

0001059c <_ZN24SingleFlapperValve_ClassD1Ev>:

// default destructor
SingleFlapperValve_Class::~SingleFlapperValve_Class()
   1059c:	b580      	push	{r7, lr}
   1059e:	b082      	sub	sp, #8
   105a0:	af00      	add	r7, sp, #0
   105a2:	6078      	str	r0, [r7, #4]
   105a4:	687b      	ldr	r3, [r7, #4]
   105a6:	4618      	mov	r0, r3
   105a8:	4b03      	ldr	r3, [pc, #12]	; (105b8 <_ZN24SingleFlapperValve_ClassD1Ev+0x1c>)
   105aa:	4798      	blx	r3
{
} //~FlapperValve_Class
   105ac:	687b      	ldr	r3, [r7, #4]
   105ae:	4618      	mov	r0, r3
   105b0:	3708      	adds	r7, #8
   105b2:	46bd      	mov	sp, r7
   105b4:	bd80      	pop	{r7, pc}
   105b6:	bf00      	nop
   105b8:	0001150d 	.word	0x0001150d

000105bc <_ZN24SingleFlapperValve_Class4InitEv>:


bool	SingleFlapperValve_Class::Init(void){
   105bc:	b580      	push	{r7, lr}
   105be:	b082      	sub	sp, #8
   105c0:	af00      	add	r7, sp, #0
   105c2:	6078      	str	r0, [r7, #4]
	if (i2c->i2c_initiated)
   105c4:	687b      	ldr	r3, [r7, #4]
   105c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   105c8:	7a1b      	ldrb	r3, [r3, #8]
   105ca:	b2db      	uxtb	r3, r3
   105cc:	2b00      	cmp	r3, #0
   105ce:	d104      	bne.n	105da <_ZN24SingleFlapperValve_Class4InitEv+0x1e>
	{
	} 
	else
	{
		i2c->Init();
   105d0:	687b      	ldr	r3, [r7, #4]
   105d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   105d4:	4618      	mov	r0, r3
   105d6:	4b19      	ldr	r3, [pc, #100]	; (1063c <_ZN24SingleFlapperValve_Class4InitEv+0x80>)
   105d8:	4798      	blx	r3
	}
		

		if (i2c->isOK)
   105da:	687b      	ldr	r3, [r7, #4]
   105dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   105de:	7a5b      	ldrb	r3, [r3, #9]
   105e0:	b2db      	uxtb	r3, r3
   105e2:	2b00      	cmp	r3, #0
   105e4:	d01b      	beq.n	1061e <_ZN24SingleFlapperValve_Class4InitEv+0x62>
		{
		//	ext_irq_register(PIN_PA04,FUNC_PTR(Fv1StatusChanged));
			InitExpanderArray(valveID);
   105e6:	687b      	ldr	r3, [r7, #4]
   105e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
   105ec:	4619      	mov	r1, r3
   105ee:	6878      	ldr	r0, [r7, #4]
   105f0:	4b13      	ldr	r3, [pc, #76]	; (10640 <_ZN24SingleFlapperValve_Class4InitEv+0x84>)
   105f2:	4798      	blx	r3
			expanders[0]->SetPortInput();
   105f4:	687b      	ldr	r3, [r7, #4]
   105f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   105f8:	4618      	mov	r0, r3
   105fa:	4b12      	ldr	r3, [pc, #72]	; (10644 <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
   105fc:	4798      	blx	r3
			expanders[1]->SetPortInput(0x80);
   105fe:	687b      	ldr	r3, [r7, #4]
   10600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10602:	2180      	movs	r1, #128	; 0x80
   10604:	4618      	mov	r0, r3
   10606:	4b10      	ldr	r3, [pc, #64]	; (10648 <_ZN24SingleFlapperValve_Class4InitEv+0x8c>)
   10608:	4798      	blx	r3
			expanders[2]->SetPortOutput();
   1060a:	687b      	ldr	r3, [r7, #4]
   1060c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1060e:	4618      	mov	r0, r3
   10610:	4b0e      	ldr	r3, [pc, #56]	; (1064c <_ZN24SingleFlapperValve_Class4InitEv+0x90>)
   10612:	4798      	blx	r3
			expanders[3]->SetPortInput();
   10614:	687b      	ldr	r3, [r7, #4]
   10616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   10618:	4618      	mov	r0, r3
   1061a:	4b0a      	ldr	r3, [pc, #40]	; (10644 <_ZN24SingleFlapperValve_Class4InitEv+0x88>)
   1061c:	4798      	blx	r3
							
		}
		isOK=i2c->isOK;
   1061e:	687b      	ldr	r3, [r7, #4]
   10620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10622:	7a5b      	ldrb	r3, [r3, #9]
   10624:	b2da      	uxtb	r2, r3
   10626:	687b      	ldr	r3, [r7, #4]
   10628:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		
		return isOK;
   1062c:	687b      	ldr	r3, [r7, #4]
   1062e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   10632:	b2db      	uxtb	r3, r3


}
   10634:	4618      	mov	r0, r3
   10636:	3708      	adds	r7, #8
   10638:	46bd      	mov	sp, r7
   1063a:	bd80      	pop	{r7, pc}
   1063c:	0000db6d 	.word	0x0000db6d
   10640:	00010679 	.word	0x00010679
   10644:	000118bd 	.word	0x000118bd
   10648:	00011901 	.word	0x00011901
   1064c:	00011975 	.word	0x00011975

00010650 <_ZN24SingleFlapperValve_Class4InitEh>:

bool	SingleFlapperValve_Class::Init(uint8_t valve_id){
   10650:	b580      	push	{r7, lr}
   10652:	b082      	sub	sp, #8
   10654:	af00      	add	r7, sp, #0
   10656:	6078      	str	r0, [r7, #4]
   10658:	460b      	mov	r3, r1
   1065a:	70fb      	strb	r3, [r7, #3]
	valveID=valve_id;
   1065c:	687b      	ldr	r3, [r7, #4]
   1065e:	78fa      	ldrb	r2, [r7, #3]
   10660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	return Init();
   10664:	6878      	ldr	r0, [r7, #4]
   10666:	4b03      	ldr	r3, [pc, #12]	; (10674 <_ZN24SingleFlapperValve_Class4InitEh+0x24>)
   10668:	4798      	blx	r3
   1066a:	4603      	mov	r3, r0
}
   1066c:	4618      	mov	r0, r3
   1066e:	3708      	adds	r7, #8
   10670:	46bd      	mov	sp, r7
   10672:	bd80      	pop	{r7, pc}
   10674:	000105bd 	.word	0x000105bd

00010678 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh>:
uint8_t SingleFlapperValve_Class::InitExpanderArray(uint8_t fvID){
   10678:	b580      	push	{r7, lr}
   1067a:	b084      	sub	sp, #16
   1067c:	af00      	add	r7, sp, #0
   1067e:	6078      	str	r0, [r7, #4]
   10680:	460b      	mov	r3, r1
   10682:	70fb      	strb	r3, [r7, #3]
	
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   10684:	2300      	movs	r3, #0
   10686:	60fb      	str	r3, [r7, #12]
   10688:	68fb      	ldr	r3, [r7, #12]
   1068a:	2b03      	cmp	r3, #3
   1068c:	dc2e      	bgt.n	106ec <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x74>
	{
		currentExpander=&(expandersStatic[valveID][i]);
   1068e:	687b      	ldr	r3, [r7, #4]
   10690:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
   10694:	4619      	mov	r1, r3
   10696:	68fb      	ldr	r3, [r7, #12]
   10698:	461a      	mov	r2, r3
   1069a:	00d2      	lsls	r2, r2, #3
   1069c:	1ad2      	subs	r2, r2, r3
   1069e:	0093      	lsls	r3, r2, #2
   106a0:	461a      	mov	r2, r3
   106a2:	460b      	mov	r3, r1
   106a4:	00db      	lsls	r3, r3, #3
   106a6:	1a5b      	subs	r3, r3, r1
   106a8:	011b      	lsls	r3, r3, #4
   106aa:	4413      	add	r3, r2
   106ac:	4a12      	ldr	r2, [pc, #72]	; (106f8 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x80>)
   106ae:	441a      	add	r2, r3
   106b0:	687b      	ldr	r3, [r7, #4]
   106b2:	665a      	str	r2, [r3, #100]	; 0x64
		
		currentExpander->Init(MCP23008_ADDRESS+i+(fvID)*FLAPPER_VALVE_EXPANDERS,i2c);
   106b4:	687b      	ldr	r3, [r7, #4]
   106b6:	6e58      	ldr	r0, [r3, #100]	; 0x64
   106b8:	68fb      	ldr	r3, [r7, #12]
   106ba:	b2da      	uxtb	r2, r3
   106bc:	78fb      	ldrb	r3, [r7, #3]
   106be:	009b      	lsls	r3, r3, #2
   106c0:	b2db      	uxtb	r3, r3
   106c2:	4413      	add	r3, r2
   106c4:	b2db      	uxtb	r3, r3
   106c6:	3320      	adds	r3, #32
   106c8:	b2d9      	uxtb	r1, r3
   106ca:	687b      	ldr	r3, [r7, #4]
   106cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   106ce:	461a      	mov	r2, r3
   106d0:	4b0a      	ldr	r3, [pc, #40]	; (106fc <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x84>)
   106d2:	4798      	blx	r3
		expanders[i]=currentExpander;
   106d4:	687b      	ldr	r3, [r7, #4]
   106d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   106d8:	6879      	ldr	r1, [r7, #4]
   106da:	68fb      	ldr	r3, [r7, #12]
   106dc:	3314      	adds	r3, #20
   106de:	009b      	lsls	r3, r3, #2
   106e0:	440b      	add	r3, r1
   106e2:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < FLAPPER_VALVE_EXPANDERS; i++)
   106e4:	68fb      	ldr	r3, [r7, #12]
   106e6:	3301      	adds	r3, #1
   106e8:	60fb      	str	r3, [r7, #12]
   106ea:	e7cd      	b.n	10688 <_ZN24SingleFlapperValve_Class17InitExpanderArrayEh+0x10>
	}
	return 0;
   106ec:	2300      	movs	r3, #0
}
   106ee:	4618      	mov	r0, r3
   106f0:	3710      	adds	r7, #16
   106f2:	46bd      	mov	sp, r7
   106f4:	bd80      	pop	{r7, pc}
   106f6:	bf00      	nop
   106f8:	200020d8 	.word	0x200020d8
   106fc:	00011717 	.word	0x00011717

00010700 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv>:

ControlStatus SingleFlapperValve_Class::ReadControlStatus(void){
   10700:	b590      	push	{r4, r7, lr}
   10702:	b085      	sub	sp, #20
   10704:	af00      	add	r7, sp, #0
   10706:	60f8      	str	r0, [r7, #12]
   10708:	60b9      	str	r1, [r7, #8]
	value=expanders[1]->ReadGPIORegister();
   1070a:	68bb      	ldr	r3, [r7, #8]
   1070c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1070e:	4618      	mov	r0, r3
   10710:	4b10      	ldr	r3, [pc, #64]	; (10754 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x54>)
   10712:	4798      	blx	r3
   10714:	4603      	mov	r3, r0
   10716:	461a      	mov	r2, r3
   10718:	68bb      	ldr	r3, [r7, #8]
   1071a:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	controlOutputs=FillControlOutputs(value);
   1071e:	68b9      	ldr	r1, [r7, #8]
   10720:	68bb      	ldr	r3, [r7, #8]
   10722:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
   10726:	68bc      	ldr	r4, [r7, #8]
   10728:	463b      	mov	r3, r7
   1072a:	4618      	mov	r0, r3
   1072c:	4b0a      	ldr	r3, [pc, #40]	; (10758 <_ZN24SingleFlapperValve_Class17ReadControlStatusEv+0x58>)
   1072e:	4798      	blx	r3
   10730:	f104 033a 	add.w	r3, r4, #58	; 0x3a
   10734:	463a      	mov	r2, r7
   10736:	6811      	ldr	r1, [r2, #0]
   10738:	6852      	ldr	r2, [r2, #4]
   1073a:	6019      	str	r1, [r3, #0]
   1073c:	605a      	str	r2, [r3, #4]
	return controlOutputs;
   1073e:	68fa      	ldr	r2, [r7, #12]
   10740:	68bb      	ldr	r3, [r7, #8]
   10742:	333a      	adds	r3, #58	; 0x3a
   10744:	6819      	ldr	r1, [r3, #0]
   10746:	685b      	ldr	r3, [r3, #4]
   10748:	6011      	str	r1, [r2, #0]
   1074a:	6053      	str	r3, [r2, #4]
}
   1074c:	68f8      	ldr	r0, [r7, #12]
   1074e:	3714      	adds	r7, #20
   10750:	46bd      	mov	sp, r7
   10752:	bd90      	pop	{r4, r7, pc}
   10754:	000117fd 	.word	0x000117fd
   10758:	00011609 	.word	0x00011609

0001075c <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv>:
InputStatus SingleFlapperValve_Class::ReadStatusInputs(void){
   1075c:	b590      	push	{r4, r7, lr}
   1075e:	b085      	sub	sp, #20
   10760:	af00      	add	r7, sp, #0
   10762:	60f8      	str	r0, [r7, #12]
   10764:	60b9      	str	r1, [r7, #8]
	value=expanders[0]->ReadGPIORegister();
   10766:	68bb      	ldr	r3, [r7, #8]
   10768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1076a:	4618      	mov	r0, r3
   1076c:	4b10      	ldr	r3, [pc, #64]	; (107b0 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x54>)
   1076e:	4798      	blx	r3
   10770:	4603      	mov	r3, r0
   10772:	461a      	mov	r2, r3
   10774:	68bb      	ldr	r3, [r7, #8]
   10776:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	statusInputs=FillInputStatus(value);
   1077a:	68b9      	ldr	r1, [r7, #8]
   1077c:	68bb      	ldr	r3, [r7, #8]
   1077e:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
   10782:	68bc      	ldr	r4, [r7, #8]
   10784:	463b      	mov	r3, r7
   10786:	4618      	mov	r0, r3
   10788:	4b0a      	ldr	r3, [pc, #40]	; (107b4 <_ZN24SingleFlapperValve_Class16ReadStatusInputsEv+0x58>)
   1078a:	4798      	blx	r3
   1078c:	f104 0342 	add.w	r3, r4, #66	; 0x42
   10790:	463a      	mov	r2, r7
   10792:	6811      	ldr	r1, [r2, #0]
   10794:	6019      	str	r1, [r3, #0]
   10796:	8892      	ldrh	r2, [r2, #4]
   10798:	809a      	strh	r2, [r3, #4]
	return statusInputs;
   1079a:	68fa      	ldr	r2, [r7, #12]
   1079c:	68bb      	ldr	r3, [r7, #8]
   1079e:	3342      	adds	r3, #66	; 0x42
   107a0:	6819      	ldr	r1, [r3, #0]
   107a2:	6011      	str	r1, [r2, #0]
   107a4:	889b      	ldrh	r3, [r3, #4]
   107a6:	8093      	strh	r3, [r2, #4]
}
   107a8:	68f8      	ldr	r0, [r7, #12]
   107aa:	3714      	adds	r7, #20
   107ac:	46bd      	mov	sp, r7
   107ae:	bd90      	pop	{r4, r7, pc}
   107b0:	000117fd 	.word	0x000117fd
   107b4:	000115b5 	.word	0x000115b5

000107b8 <_ZN24SingleFlapperValve_Class9SetEnableEb>:
uint8_t SingleFlapperValve_Class::WriteControlStatus(uint8_t controlByte){
	value=expanders[1]->WriteGPIORegister(controlByte);
	return value;
}

uint8_t SingleFlapperValve_Class::SetEnable(bool b){
   107b8:	b580      	push	{r7, lr}
   107ba:	b082      	sub	sp, #8
   107bc:	af00      	add	r7, sp, #0
   107be:	6078      	str	r0, [r7, #4]
   107c0:	460b      	mov	r3, r1
   107c2:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   107c4:	687b      	ldr	r3, [r7, #4]
   107c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   107c8:	4618      	mov	r0, r3
   107ca:	4b19      	ldr	r3, [pc, #100]	; (10830 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x78>)
   107cc:	4798      	blx	r3
   107ce:	4603      	mov	r3, r0
   107d0:	461a      	mov	r2, r3
   107d2:	687b      	ldr	r3, [r7, #4]
   107d4:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x01:value&0xfe;
   107d8:	78fb      	ldrb	r3, [r7, #3]
   107da:	2b00      	cmp	r3, #0
   107dc:	d006      	beq.n	107ec <_ZN24SingleFlapperValve_Class9SetEnableEb+0x34>
   107de:	687b      	ldr	r3, [r7, #4]
   107e0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   107e4:	f043 0301 	orr.w	r3, r3, #1
   107e8:	b2db      	uxtb	r3, r3
   107ea:	e005      	b.n	107f8 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x40>
   107ec:	687b      	ldr	r3, [r7, #4]
   107ee:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   107f2:	f023 0301 	bic.w	r3, r3, #1
   107f6:	b2db      	uxtb	r3, r3
   107f8:	687a      	ldr	r2, [r7, #4]
   107fa:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	controlOutputs.niAlcFvMotorEnable=b;
   107fe:	687b      	ldr	r3, [r7, #4]
   10800:	78fa      	ldrb	r2, [r7, #3]
   10802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	value=expanders[1]->WriteGPIORegister(value);
   10806:	687b      	ldr	r3, [r7, #4]
   10808:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   1080a:	687b      	ldr	r3, [r7, #4]
   1080c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10810:	4619      	mov	r1, r3
   10812:	4610      	mov	r0, r2
   10814:	4b07      	ldr	r3, [pc, #28]	; (10834 <_ZN24SingleFlapperValve_Class9SetEnableEb+0x7c>)
   10816:	4798      	blx	r3
   10818:	4603      	mov	r3, r0
   1081a:	461a      	mov	r2, r3
   1081c:	687b      	ldr	r3, [r7, #4]
   1081e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   10822:	687b      	ldr	r3, [r7, #4]
   10824:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   10828:	4618      	mov	r0, r3
   1082a:	3708      	adds	r7, #8
   1082c:	46bd      	mov	sp, r7
   1082e:	bd80      	pop	{r7, pc}
   10830:	000117fd 	.word	0x000117fd
   10834:	00011881 	.word	0x00011881

00010838 <_ZN24SingleFlapperValve_Class12SetDirectionEb>:
uint8_t SingleFlapperValve_Class::SetDirection(bool b){
   10838:	b580      	push	{r7, lr}
   1083a:	b082      	sub	sp, #8
   1083c:	af00      	add	r7, sp, #0
   1083e:	6078      	str	r0, [r7, #4]
   10840:	460b      	mov	r3, r1
   10842:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   10844:	687b      	ldr	r3, [r7, #4]
   10846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10848:	4618      	mov	r0, r3
   1084a:	4b17      	ldr	r3, [pc, #92]	; (108a8 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x70>)
   1084c:	4798      	blx	r3
   1084e:	4603      	mov	r3, r0
   10850:	461a      	mov	r2, r3
   10852:	687b      	ldr	r3, [r7, #4]
   10854:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x20:value&0xdf;
   10858:	78fb      	ldrb	r3, [r7, #3]
   1085a:	2b00      	cmp	r3, #0
   1085c:	d006      	beq.n	1086c <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x34>
   1085e:	687b      	ldr	r3, [r7, #4]
   10860:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10864:	f043 0320 	orr.w	r3, r3, #32
   10868:	b2db      	uxtb	r3, r3
   1086a:	e005      	b.n	10878 <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x40>
   1086c:	687b      	ldr	r3, [r7, #4]
   1086e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10872:	f023 0320 	bic.w	r3, r3, #32
   10876:	b2db      	uxtb	r3, r3
   10878:	687a      	ldr	r2, [r7, #4]
   1087a:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
   1087e:	687b      	ldr	r3, [r7, #4]
   10880:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   10882:	687b      	ldr	r3, [r7, #4]
   10884:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10888:	4619      	mov	r1, r3
   1088a:	4610      	mov	r0, r2
   1088c:	4b07      	ldr	r3, [pc, #28]	; (108ac <_ZN24SingleFlapperValve_Class12SetDirectionEb+0x74>)
   1088e:	4798      	blx	r3
   10890:	4603      	mov	r3, r0
   10892:	461a      	mov	r2, r3
   10894:	687b      	ldr	r3, [r7, #4]
   10896:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   1089a:	687b      	ldr	r3, [r7, #4]
   1089c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   108a0:	4618      	mov	r0, r3
   108a2:	3708      	adds	r7, #8
   108a4:	46bd      	mov	sp, r7
   108a6:	bd80      	pop	{r7, pc}
   108a8:	000117fd 	.word	0x000117fd
   108ac:	00011881 	.word	0x00011881

000108b0 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb>:
uint8_t SingleFlapperValve_Class::ClearMoveFault(bool b){
   108b0:	b580      	push	{r7, lr}
   108b2:	b082      	sub	sp, #8
   108b4:	af00      	add	r7, sp, #0
   108b6:	6078      	str	r0, [r7, #4]
   108b8:	460b      	mov	r3, r1
   108ba:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   108bc:	687b      	ldr	r3, [r7, #4]
   108be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   108c0:	4618      	mov	r0, r3
   108c2:	4b17      	ldr	r3, [pc, #92]	; (10920 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x70>)
   108c4:	4798      	blx	r3
   108c6:	4603      	mov	r3, r0
   108c8:	461a      	mov	r2, r3
   108ca:	687b      	ldr	r3, [r7, #4]
   108cc:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x40:value&0xbf;
   108d0:	78fb      	ldrb	r3, [r7, #3]
   108d2:	2b00      	cmp	r3, #0
   108d4:	d006      	beq.n	108e4 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x34>
   108d6:	687b      	ldr	r3, [r7, #4]
   108d8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   108dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   108e0:	b2db      	uxtb	r3, r3
   108e2:	e005      	b.n	108f0 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x40>
   108e4:	687b      	ldr	r3, [r7, #4]
   108e6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   108ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   108ee:	b2db      	uxtb	r3, r3
   108f0:	687a      	ldr	r2, [r7, #4]
   108f2:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
   108f6:	687b      	ldr	r3, [r7, #4]
   108f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   108fa:	687b      	ldr	r3, [r7, #4]
   108fc:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10900:	4619      	mov	r1, r3
   10902:	4610      	mov	r0, r2
   10904:	4b07      	ldr	r3, [pc, #28]	; (10924 <_ZN24SingleFlapperValve_Class14ClearMoveFaultEb+0x74>)
   10906:	4798      	blx	r3
   10908:	4603      	mov	r3, r0
   1090a:	461a      	mov	r2, r3
   1090c:	687b      	ldr	r3, [r7, #4]
   1090e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   10912:	687b      	ldr	r3, [r7, #4]
   10914:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   10918:	4618      	mov	r0, r3
   1091a:	3708      	adds	r7, #8
   1091c:	46bd      	mov	sp, r7
   1091e:	bd80      	pop	{r7, pc}
   10920:	000117fd 	.word	0x000117fd
   10924:	00011881 	.word	0x00011881

00010928 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb>:

uint8_t SingleFlapperValve_Class::SetInvalidPosition(bool b){
   10928:	b580      	push	{r7, lr}
   1092a:	b082      	sub	sp, #8
   1092c:	af00      	add	r7, sp, #0
   1092e:	6078      	str	r0, [r7, #4]
   10930:	460b      	mov	r3, r1
   10932:	70fb      	strb	r3, [r7, #3]
	value=expanders[1]->ReadGPIORegister();
   10934:	687b      	ldr	r3, [r7, #4]
   10936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10938:	4618      	mov	r0, r3
   1093a:	4b17      	ldr	r3, [pc, #92]	; (10998 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x70>)
   1093c:	4798      	blx	r3
   1093e:	4603      	mov	r3, r0
   10940:	461a      	mov	r2, r3
   10942:	687b      	ldr	r3, [r7, #4]
   10944:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	value=b?value|0x04:value&0xfb;
   10948:	78fb      	ldrb	r3, [r7, #3]
   1094a:	2b00      	cmp	r3, #0
   1094c:	d006      	beq.n	1095c <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x34>
   1094e:	687b      	ldr	r3, [r7, #4]
   10950:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10954:	f043 0304 	orr.w	r3, r3, #4
   10958:	b2db      	uxtb	r3, r3
   1095a:	e005      	b.n	10968 <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x40>
   1095c:	687b      	ldr	r3, [r7, #4]
   1095e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10962:	f023 0304 	bic.w	r3, r3, #4
   10966:	b2db      	uxtb	r3, r3
   10968:	687a      	ldr	r2, [r7, #4]
   1096a:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	value=expanders[1]->WriteGPIORegister(value);
   1096e:	687b      	ldr	r3, [r7, #4]
   10970:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   10972:	687b      	ldr	r3, [r7, #4]
   10974:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
   10978:	4619      	mov	r1, r3
   1097a:	4610      	mov	r0, r2
   1097c:	4b07      	ldr	r3, [pc, #28]	; (1099c <_ZN24SingleFlapperValve_Class18SetInvalidPositionEb+0x74>)
   1097e:	4798      	blx	r3
   10980:	4603      	mov	r3, r0
   10982:	461a      	mov	r2, r3
   10984:	687b      	ldr	r3, [r7, #4]
   10986:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	return value;
   1098a:	687b      	ldr	r3, [r7, #4]
   1098c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
}
   10990:	4618      	mov	r0, r3
   10992:	3708      	adds	r7, #8
   10994:	46bd      	mov	sp, r7
   10996:	bd80      	pop	{r7, pc}
   10998:	000117fd 	.word	0x000117fd
   1099c:	00011881 	.word	0x00011881

000109a0 <_ZN24SingleFlapperValve_Class13WriteSetpointEh>:

uint8_t SingleFlapperValve_Class::WriteSetpoint(uint8_t sp){
   109a0:	b580      	push	{r7, lr}
   109a2:	b082      	sub	sp, #8
   109a4:	af00      	add	r7, sp, #0
   109a6:	6078      	str	r0, [r7, #4]
   109a8:	460b      	mov	r3, r1
   109aa:	70fb      	strb	r3, [r7, #3]
	setpointPosition= expanders[2]->WriteGPIORegister(sp);
   109ac:	687b      	ldr	r3, [r7, #4]
   109ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   109b0:	78fa      	ldrb	r2, [r7, #3]
   109b2:	4611      	mov	r1, r2
   109b4:	4618      	mov	r0, r3
   109b6:	4b07      	ldr	r3, [pc, #28]	; (109d4 <_ZN24SingleFlapperValve_Class13WriteSetpointEh+0x34>)
   109b8:	4798      	blx	r3
   109ba:	4603      	mov	r3, r0
   109bc:	461a      	mov	r2, r3
   109be:	687b      	ldr	r3, [r7, #4]
   109c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
//	setpointPosition= simpleExpander->WriteRegisterB(sp);
	return setpointPosition;
   109c4:	687b      	ldr	r3, [r7, #4]
   109c6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
}
   109ca:	4618      	mov	r0, r3
   109cc:	3708      	adds	r7, #8
   109ce:	46bd      	mov	sp, r7
   109d0:	bd80      	pop	{r7, pc}
   109d2:	bf00      	nop
   109d4:	00011881 	.word	0x00011881

000109d8 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv>:
	return setpointPosition;
}
uint8_t SingleFlapperValve_Class::GetCurrentAngle(void){
	return actualPosition;
}
uint8_t SingleFlapperValve_Class::ReadActualPosition(void){
   109d8:	b580      	push	{r7, lr}
   109da:	b082      	sub	sp, #8
   109dc:	af00      	add	r7, sp, #0
   109de:	6078      	str	r0, [r7, #4]

	lastPosition=actualPosition;
   109e0:	687b      	ldr	r3, [r7, #4]
   109e2:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
   109e6:	687b      	ldr	r3, [r7, #4]
   109e8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
//	actualPosition= simpleExpander->ReadRegister(MCP23017_GPIOA);
	actualPosition= expanders[3]->ReadGPIORegister();
   109ec:	687b      	ldr	r3, [r7, #4]
   109ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   109f0:	4618      	mov	r0, r3
   109f2:	4b18      	ldr	r3, [pc, #96]	; (10a54 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x7c>)
   109f4:	4798      	blx	r3
   109f6:	4603      	mov	r3, r0
   109f8:	461a      	mov	r2, r3
   109fa:	687b      	ldr	r3, [r7, #4]
   109fc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR)
   10a00:	687b      	ldr	r3, [r7, #4]
   10a02:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   10a06:	2bda      	cmp	r3, #218	; 0xda
   10a08:	dd04      	ble.n	10a14 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x3c>
	{
		statusFlapperValve=NBC_MODE;
   10a0a:	687b      	ldr	r3, [r7, #4]
   10a0c:	2203      	movs	r2, #3
   10a0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   10a12:	e017      	b.n	10a44 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/2)
   10a14:	687b      	ldr	r3, [r7, #4]
   10a16:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   10a1a:	2b6d      	cmp	r3, #109	; 0x6d
   10a1c:	dd04      	ble.n	10a28 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x50>
	{
		statusFlapperValve=RECYCLE_MODE;
   10a1e:	687b      	ldr	r3, [r7, #4]
   10a20:	2202      	movs	r2, #2
   10a22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   10a26:	e00d      	b.n	10a44 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	}else if (actualPosition>FLAPPER_VALVE_MINIMUM_AIR/4)
   10a28:	687b      	ldr	r3, [r7, #4]
   10a2a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
   10a2e:	2b36      	cmp	r3, #54	; 0x36
   10a30:	dd04      	ble.n	10a3c <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x64>
	{
		statusFlapperValve=INTERM_MODE;
   10a32:	687b      	ldr	r3, [r7, #4]
   10a34:	2201      	movs	r2, #1
   10a36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   10a3a:	e003      	b.n	10a44 <_ZN24SingleFlapperValve_Class18ReadActualPositionEv+0x6c>
	} 
	else
	{
		statusFlapperValve=FRESHAIR_MODE;
   10a3c:	687b      	ldr	r3, [r7, #4]
   10a3e:	2200      	movs	r2, #0
   10a40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}
	return actualPosition;
   10a44:	687b      	ldr	r3, [r7, #4]
   10a46:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
}
   10a4a:	4618      	mov	r0, r3
   10a4c:	3708      	adds	r7, #8
   10a4e:	46bd      	mov	sp, r7
   10a50:	bd80      	pop	{r7, pc}
   10a52:	bf00      	nop
   10a54:	000117fd 	.word	0x000117fd

00010a58 <__tcf_0>:
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
   10a58:	b590      	push	{r4, r7, lr}
   10a5a:	b083      	sub	sp, #12
   10a5c:	af00      	add	r7, sp, #0
   10a5e:	6078      	str	r0, [r7, #4]
   10a60:	4c05      	ldr	r4, [pc, #20]	; (10a78 <__tcf_0+0x20>)
   10a62:	4b06      	ldr	r3, [pc, #24]	; (10a7c <__tcf_0+0x24>)
   10a64:	429c      	cmp	r4, r3
   10a66:	d004      	beq.n	10a72 <__tcf_0+0x1a>
   10a68:	3c1c      	subs	r4, #28
   10a6a:	4620      	mov	r0, r4
   10a6c:	4b04      	ldr	r3, [pc, #16]	; (10a80 <__tcf_0+0x28>)
   10a6e:	4798      	blx	r3
   10a70:	e7f7      	b.n	10a62 <__tcf_0+0xa>
   10a72:	370c      	adds	r7, #12
   10a74:	46bd      	mov	sp, r7
   10a76:	bd90      	pop	{r4, r7, pc}
   10a78:	200021b8 	.word	0x200021b8
   10a7c:	200020d8 	.word	0x200020d8
   10a80:	00011703 	.word	0x00011703

00010a84 <_Z41__static_initialization_and_destruction_0ii>:
	return true;
}

SingleFlapperValve_Class::operator bool(){
	return	isOK;
}
   10a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a88:	b082      	sub	sp, #8
   10a8a:	af00      	add	r7, sp, #0
   10a8c:	6078      	str	r0, [r7, #4]
   10a8e:	6039      	str	r1, [r7, #0]
   10a90:	687b      	ldr	r3, [r7, #4]
   10a92:	2b01      	cmp	r3, #1
   10a94:	d16e      	bne.n	10b74 <_Z41__static_initialization_and_destruction_0ii+0xf0>
   10a96:	683b      	ldr	r3, [r7, #0]
   10a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10a9c:	4293      	cmp	r3, r2
   10a9e:	d169      	bne.n	10b74 <_Z41__static_initialization_and_destruction_0ii+0xf0>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   10aa0:	4937      	ldr	r1, [pc, #220]	; (10b80 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   10aa2:	4838      	ldr	r0, [pc, #224]	; (10b84 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   10aa4:	4b38      	ldr	r3, [pc, #224]	; (10b88 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10aa6:	4798      	blx	r3
   10aa8:	4a38      	ldr	r2, [pc, #224]	; (10b8c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10aaa:	4939      	ldr	r1, [pc, #228]	; (10b90 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10aac:	4835      	ldr	r0, [pc, #212]	; (10b84 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   10aae:	4b39      	ldr	r3, [pc, #228]	; (10b94 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10ab0:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   10ab2:	4939      	ldr	r1, [pc, #228]	; (10b98 <_Z41__static_initialization_and_destruction_0ii+0x114>)
   10ab4:	4839      	ldr	r0, [pc, #228]	; (10b9c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10ab6:	4b34      	ldr	r3, [pc, #208]	; (10b88 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10ab8:	4798      	blx	r3
   10aba:	4a34      	ldr	r2, [pc, #208]	; (10b8c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10abc:	4934      	ldr	r1, [pc, #208]	; (10b90 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10abe:	4837      	ldr	r0, [pc, #220]	; (10b9c <_Z41__static_initialization_and_destruction_0ii+0x118>)
   10ac0:	4b34      	ldr	r3, [pc, #208]	; (10b94 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10ac2:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   10ac4:	4936      	ldr	r1, [pc, #216]	; (10ba0 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
   10ac6:	4837      	ldr	r0, [pc, #220]	; (10ba4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   10ac8:	4b2f      	ldr	r3, [pc, #188]	; (10b88 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10aca:	4798      	blx	r3
   10acc:	4a2f      	ldr	r2, [pc, #188]	; (10b8c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10ace:	4930      	ldr	r1, [pc, #192]	; (10b90 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10ad0:	4834      	ldr	r0, [pc, #208]	; (10ba4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
   10ad2:	4b30      	ldr	r3, [pc, #192]	; (10b94 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10ad4:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   10ad6:	4934      	ldr	r1, [pc, #208]	; (10ba8 <_Z41__static_initialization_and_destruction_0ii+0x124>)
   10ad8:	4834      	ldr	r0, [pc, #208]	; (10bac <_Z41__static_initialization_and_destruction_0ii+0x128>)
   10ada:	4b2b      	ldr	r3, [pc, #172]	; (10b88 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10adc:	4798      	blx	r3
   10ade:	4a2b      	ldr	r2, [pc, #172]	; (10b8c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10ae0:	492b      	ldr	r1, [pc, #172]	; (10b90 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10ae2:	4832      	ldr	r0, [pc, #200]	; (10bac <_Z41__static_initialization_and_destruction_0ii+0x128>)
   10ae4:	4b2b      	ldr	r3, [pc, #172]	; (10b94 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10ae6:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   10ae8:	4931      	ldr	r1, [pc, #196]	; (10bb0 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
   10aea:	4832      	ldr	r0, [pc, #200]	; (10bb4 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   10aec:	4b26      	ldr	r3, [pc, #152]	; (10b88 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10aee:	4798      	blx	r3
   10af0:	4a26      	ldr	r2, [pc, #152]	; (10b8c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10af2:	4927      	ldr	r1, [pc, #156]	; (10b90 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10af4:	482f      	ldr	r0, [pc, #188]	; (10bb4 <_Z41__static_initialization_and_destruction_0ii+0x130>)
   10af6:	4b27      	ldr	r3, [pc, #156]	; (10b94 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10af8:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   10afa:	492f      	ldr	r1, [pc, #188]	; (10bb8 <_Z41__static_initialization_and_destruction_0ii+0x134>)
   10afc:	482f      	ldr	r0, [pc, #188]	; (10bbc <_Z41__static_initialization_and_destruction_0ii+0x138>)
   10afe:	4b22      	ldr	r3, [pc, #136]	; (10b88 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10b00:	4798      	blx	r3
   10b02:	4a22      	ldr	r2, [pc, #136]	; (10b8c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10b04:	4922      	ldr	r1, [pc, #136]	; (10b90 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10b06:	482d      	ldr	r0, [pc, #180]	; (10bbc <_Z41__static_initialization_and_destruction_0ii+0x138>)
   10b08:	4b22      	ldr	r3, [pc, #136]	; (10b94 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10b0a:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   10b0c:	492c      	ldr	r1, [pc, #176]	; (10bc0 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
   10b0e:	482d      	ldr	r0, [pc, #180]	; (10bc4 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   10b10:	4b1d      	ldr	r3, [pc, #116]	; (10b88 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10b12:	4798      	blx	r3
   10b14:	4a1d      	ldr	r2, [pc, #116]	; (10b8c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10b16:	491e      	ldr	r1, [pc, #120]	; (10b90 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10b18:	482a      	ldr	r0, [pc, #168]	; (10bc4 <_Z41__static_initialization_and_destruction_0ii+0x140>)
   10b1a:	4b1e      	ldr	r3, [pc, #120]	; (10b94 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10b1c:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   10b1e:	492a      	ldr	r1, [pc, #168]	; (10bc8 <_Z41__static_initialization_and_destruction_0ii+0x144>)
   10b20:	482a      	ldr	r0, [pc, #168]	; (10bcc <_Z41__static_initialization_and_destruction_0ii+0x148>)
   10b22:	4b19      	ldr	r3, [pc, #100]	; (10b88 <_Z41__static_initialization_and_destruction_0ii+0x104>)
   10b24:	4798      	blx	r3
   10b26:	4a19      	ldr	r2, [pc, #100]	; (10b8c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10b28:	4919      	ldr	r1, [pc, #100]	; (10b90 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
   10b2a:	4828      	ldr	r0, [pc, #160]	; (10bcc <_Z41__static_initialization_and_destruction_0ii+0x148>)
   10b2c:	4b19      	ldr	r3, [pc, #100]	; (10b94 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10b2e:	4798      	blx	r3
static I2C_Sync_Class		i2cStatic(&I2C_FLAPPER_VALVE);
   10b30:	4927      	ldr	r1, [pc, #156]	; (10bd0 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
   10b32:	4828      	ldr	r0, [pc, #160]	; (10bd4 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   10b34:	4b28      	ldr	r3, [pc, #160]	; (10bd8 <_Z41__static_initialization_and_destruction_0ii+0x154>)
   10b36:	4798      	blx	r3
   10b38:	4a14      	ldr	r2, [pc, #80]	; (10b8c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10b3a:	4928      	ldr	r1, [pc, #160]	; (10bdc <_Z41__static_initialization_and_destruction_0ii+0x158>)
   10b3c:	4825      	ldr	r0, [pc, #148]	; (10bd4 <_Z41__static_initialization_and_destruction_0ii+0x150>)
   10b3e:	4b15      	ldr	r3, [pc, #84]	; (10b94 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10b40:	4798      	blx	r3
static	MCP23008_Class expandersStatic[FLAPPER_VALVE_QUANTITY][FLAPPER_VALVE_EXPANDERS];
   10b42:	4b27      	ldr	r3, [pc, #156]	; (10be0 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
   10b44:	2401      	movs	r4, #1
   10b46:	461e      	mov	r6, r3
   10b48:	2c00      	cmp	r4, #0
   10b4a:	db0e      	blt.n	10b6a <_Z41__static_initialization_and_destruction_0ii+0xe6>
   10b4c:	4633      	mov	r3, r6
   10b4e:	2503      	movs	r5, #3
   10b50:	4698      	mov	r8, r3
   10b52:	2d00      	cmp	r5, #0
   10b54:	db06      	blt.n	10b64 <_Z41__static_initialization_and_destruction_0ii+0xe0>
   10b56:	4640      	mov	r0, r8
   10b58:	4b22      	ldr	r3, [pc, #136]	; (10be4 <_Z41__static_initialization_and_destruction_0ii+0x160>)
   10b5a:	4798      	blx	r3
   10b5c:	f108 081c 	add.w	r8, r8, #28
   10b60:	3d01      	subs	r5, #1
   10b62:	e7f6      	b.n	10b52 <_Z41__static_initialization_and_destruction_0ii+0xce>
   10b64:	3670      	adds	r6, #112	; 0x70
   10b66:	3c01      	subs	r4, #1
   10b68:	e7ee      	b.n	10b48 <_Z41__static_initialization_and_destruction_0ii+0xc4>
   10b6a:	4a08      	ldr	r2, [pc, #32]	; (10b8c <_Z41__static_initialization_and_destruction_0ii+0x108>)
   10b6c:	491e      	ldr	r1, [pc, #120]	; (10be8 <_Z41__static_initialization_and_destruction_0ii+0x164>)
   10b6e:	2000      	movs	r0, #0
   10b70:	4b08      	ldr	r3, [pc, #32]	; (10b94 <_Z41__static_initialization_and_destruction_0ii+0x110>)
   10b72:	4798      	blx	r3
}
   10b74:	bf00      	nop
   10b76:	3708      	adds	r7, #8
   10b78:	46bd      	mov	sp, r7
   10b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b7e:	bf00      	nop
   10b80:	20009da8 	.word	0x20009da8
   10b84:	20001fc0 	.word	0x20001fc0
   10b88:	0000dc59 	.word	0x0000dc59
   10b8c:	20000000 	.word	0x20000000
   10b90:	0000dc91 	.word	0x0000dc91
   10b94:	00013091 	.word	0x00013091
   10b98:	20009e3c 	.word	0x20009e3c
   10b9c:	20001fe0 	.word	0x20001fe0
   10ba0:	20009f60 	.word	0x20009f60
   10ba4:	20002000 	.word	0x20002000
   10ba8:	20009e5c 	.word	0x20009e5c
   10bac:	20002020 	.word	0x20002020
   10bb0:	20009f20 	.word	0x20009f20
   10bb4:	20002040 	.word	0x20002040
   10bb8:	20009f40 	.word	0x20009f40
   10bbc:	20002060 	.word	0x20002060
   10bc0:	20009e18 	.word	0x20009e18
   10bc4:	20002080 	.word	0x20002080
   10bc8:	20009eb8 	.word	0x20009eb8
   10bcc:	200020a0 	.word	0x200020a0
   10bd0:	20009e7c 	.word	0x20009e7c
   10bd4:	200020c4 	.word	0x200020c4
   10bd8:	0000db3d 	.word	0x0000db3d
   10bdc:	0000db59 	.word	0x0000db59
   10be0:	200020d8 	.word	0x200020d8
   10be4:	000116ef 	.word	0x000116ef
   10be8:	00010a59 	.word	0x00010a59

00010bec <_GLOBAL__sub_I_ptrSingleFlapperValveClass>:
   10bec:	b580      	push	{r7, lr}
   10bee:	af00      	add	r7, sp, #0
   10bf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10bf4:	2001      	movs	r0, #1
   10bf6:	4b01      	ldr	r3, [pc, #4]	; (10bfc <_GLOBAL__sub_I_ptrSingleFlapperValveClass+0x10>)
   10bf8:	4798      	blx	r3
   10bfa:	bd80      	pop	{r7, pc}
   10bfc:	00010a85 	.word	0x00010a85

00010c00 <_ZN18SingleHeater_ClassC1Ev>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];



// default constructor
SingleHeater_Class::SingleHeater_Class()
   10c00:	b480      	push	{r7}
   10c02:	b083      	sub	sp, #12
   10c04:	af00      	add	r7, sp, #0
   10c06:	6078      	str	r0, [r7, #4]
{
	ptrSingleHeaterClass=this;
   10c08:	4a07      	ldr	r2, [pc, #28]	; (10c28 <_ZN18SingleHeater_ClassC1Ev+0x28>)
   10c0a:	687b      	ldr	r3, [r7, #4]
   10c0c:	6013      	str	r3, [r2, #0]
	i2c=&i2cSharedStatic;
   10c0e:	687b      	ldr	r3, [r7, #4]
   10c10:	4a06      	ldr	r2, [pc, #24]	; (10c2c <_ZN18SingleHeater_ClassC1Ev+0x2c>)
   10c12:	619a      	str	r2, [r3, #24]
	heaterStatusChanged=false;
   10c14:	687b      	ldr	r3, [r7, #4]
   10c16:	2200      	movs	r2, #0
   10c18:	705a      	strb	r2, [r3, #1]
} //SingleHeater_Class
   10c1a:	687b      	ldr	r3, [r7, #4]
   10c1c:	4618      	mov	r0, r3
   10c1e:	370c      	adds	r7, #12
   10c20:	46bd      	mov	sp, r7
   10c22:	bc80      	pop	{r7}
   10c24:	4770      	bx	lr
   10c26:	bf00      	nop
   10c28:	200021cc 	.word	0x200021cc
   10c2c:	200021b8 	.word	0x200021b8

00010c30 <_ZN18SingleHeater_ClassD1Ev>:
	heaterStatusChanged=false;
} //SingleHeater_Class


// default destructor
SingleHeater_Class::~SingleHeater_Class()
   10c30:	b480      	push	{r7}
   10c32:	b083      	sub	sp, #12
   10c34:	af00      	add	r7, sp, #0
   10c36:	6078      	str	r0, [r7, #4]
{
} //~SingleHeater_Class
   10c38:	687b      	ldr	r3, [r7, #4]
   10c3a:	4618      	mov	r0, r3
   10c3c:	370c      	adds	r7, #12
   10c3e:	46bd      	mov	sp, r7
   10c40:	bc80      	pop	{r7}
   10c42:	4770      	bx	lr

00010c44 <_ZN18SingleHeater_Class10ReadStatusEv>:
		currentExpander->Init(i|MCP23008_ADDRESS,i2c);
	}
	
}

uint8_t	SingleHeater_Class::ReadStatus(void){
   10c44:	b580      	push	{r7, lr}
   10c46:	b084      	sub	sp, #16
   10c48:	af00      	add	r7, sp, #0
   10c4a:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[0]->ReadGPIORegister();
   10c4c:	687b      	ldr	r3, [r7, #4]
   10c4e:	68db      	ldr	r3, [r3, #12]
   10c50:	4618      	mov	r0, r3
   10c52:	4b16      	ldr	r3, [pc, #88]	; (10cac <_ZN18SingleHeater_Class10ReadStatusEv+0x68>)
   10c54:	4798      	blx	r3
   10c56:	4603      	mov	r3, r0
   10c58:	73bb      	strb	r3, [r7, #14]
	heaterGPIO.inputs.niAlcHeaterOverTemp=r&0x01;
   10c5a:	7bbb      	ldrb	r3, [r7, #14]
   10c5c:	f003 0301 	and.w	r3, r3, #1
   10c60:	2b00      	cmp	r3, #0
   10c62:	bf14      	ite	ne
   10c64:	2301      	movne	r3, #1
   10c66:	2300      	moveq	r3, #0
   10c68:	b2da      	uxtb	r2, r3
   10c6a:	687b      	ldr	r3, [r7, #4]
   10c6c:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = 0; i < 4; i++)
   10c6e:	2300      	movs	r3, #0
   10c70:	73fb      	strb	r3, [r7, #15]
   10c72:	7bfb      	ldrb	r3, [r7, #15]
   10c74:	2b03      	cmp	r3, #3
   10c76:	dc14      	bgt.n	10ca2 <_ZN18SingleHeater_Class10ReadStatusEv+0x5e>
	{
		heaterGPIO.inputs.niAlcHeaterRelayFault[i]=r&(0x01<<(i+1));
   10c78:	7bfb      	ldrb	r3, [r7, #15]
   10c7a:	7bb9      	ldrb	r1, [r7, #14]
   10c7c:	7bfa      	ldrb	r2, [r7, #15]
   10c7e:	3201      	adds	r2, #1
   10c80:	fa41 f202 	asr.w	r2, r1, r2
   10c84:	f002 0201 	and.w	r2, r2, #1
   10c88:	2a00      	cmp	r2, #0
   10c8a:	bf14      	ite	ne
   10c8c:	2201      	movne	r2, #1
   10c8e:	2200      	moveq	r2, #0
   10c90:	b2d1      	uxtb	r1, r2
   10c92:	687a      	ldr	r2, [r7, #4]
   10c94:	4413      	add	r3, r2
   10c96:	460a      	mov	r2, r1
   10c98:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < 4; i++)
   10c9a:	7bfb      	ldrb	r3, [r7, #15]
   10c9c:	3301      	adds	r3, #1
   10c9e:	73fb      	strb	r3, [r7, #15]
   10ca0:	e7e7      	b.n	10c72 <_ZN18SingleHeater_Class10ReadStatusEv+0x2e>
	}
	return r;
   10ca2:	7bbb      	ldrb	r3, [r7, #14]
}
   10ca4:	4618      	mov	r0, r3
   10ca6:	3710      	adds	r7, #16
   10ca8:	46bd      	mov	sp, r7
   10caa:	bd80      	pop	{r7, pc}
   10cac:	000117fd 	.word	0x000117fd

00010cb0 <_ZN18SingleHeater_Class14ReadEnableGIPOEv>:

uint8_t	SingleHeater_Class::ReadEnableGIPO(void){
   10cb0:	b580      	push	{r7, lr}
   10cb2:	b084      	sub	sp, #16
   10cb4:	af00      	add	r7, sp, #0
   10cb6:	6078      	str	r0, [r7, #4]
	uint8_t r=expanders[1]->ReadGPIORegister();
   10cb8:	687b      	ldr	r3, [r7, #4]
   10cba:	691b      	ldr	r3, [r3, #16]
   10cbc:	4618      	mov	r0, r3
   10cbe:	4b11      	ldr	r3, [pc, #68]	; (10d04 <_ZN18SingleHeater_Class14ReadEnableGIPOEv+0x54>)
   10cc0:	4798      	blx	r3
   10cc2:	4603      	mov	r3, r0
   10cc4:	73bb      	strb	r3, [r7, #14]

	for (uint8_t i = 0; i < 4; i++)
   10cc6:	2300      	movs	r3, #0
   10cc8:	73fb      	strb	r3, [r7, #15]
   10cca:	7bfb      	ldrb	r3, [r7, #15]
   10ccc:	2b03      	cmp	r3, #3
   10cce:	dc13      	bgt.n	10cf8 <_ZN18SingleHeater_Class14ReadEnableGIPOEv+0x48>
	{
		enables[i]=!(r&(0x01<<i));
   10cd0:	7bfb      	ldrb	r3, [r7, #15]
   10cd2:	7bb9      	ldrb	r1, [r7, #14]
   10cd4:	7bfa      	ldrb	r2, [r7, #15]
   10cd6:	fa41 f202 	asr.w	r2, r1, r2
   10cda:	f002 0201 	and.w	r2, r2, #1
   10cde:	2a00      	cmp	r2, #0
   10ce0:	bf0c      	ite	eq
   10ce2:	2201      	moveq	r2, #1
   10ce4:	2200      	movne	r2, #0
   10ce6:	b2d1      	uxtb	r1, r2
   10ce8:	687a      	ldr	r2, [r7, #4]
   10cea:	4413      	add	r3, r2
   10cec:	460a      	mov	r2, r1
   10cee:	771a      	strb	r2, [r3, #28]
	for (uint8_t i = 0; i < 4; i++)
   10cf0:	7bfb      	ldrb	r3, [r7, #15]
   10cf2:	3301      	adds	r3, #1
   10cf4:	73fb      	strb	r3, [r7, #15]
   10cf6:	e7e8      	b.n	10cca <_ZN18SingleHeater_Class14ReadEnableGIPOEv+0x1a>
	}
	return r;
   10cf8:	7bbb      	ldrb	r3, [r7, #14]
}
   10cfa:	4618      	mov	r0, r3
   10cfc:	3710      	adds	r7, #16
   10cfe:	46bd      	mov	sp, r7
   10d00:	bd80      	pop	{r7, pc}
   10d02:	bf00      	nop
   10d04:	000117fd 	.word	0x000117fd

00010d08 <_ZN18SingleHeater_Class8SetRelayEhb>:
uint8_t	SingleHeater_Class::EnableIndex(uint8_t indexHeater){
	enabled=expanders[1]->WriteDigit(indexHeater,false);
	return uint8_t(enabled);
}
uint8_t	SingleHeater_Class::SetRelay(uint8_t indexHeater, bool state){
   10d08:	b580      	push	{r7, lr}
   10d0a:	b082      	sub	sp, #8
   10d0c:	af00      	add	r7, sp, #0
   10d0e:	6078      	str	r0, [r7, #4]
   10d10:	460b      	mov	r3, r1
   10d12:	70fb      	strb	r3, [r7, #3]
   10d14:	4613      	mov	r3, r2
   10d16:	70bb      	strb	r3, [r7, #2]
	enabled=expanders[1]->WriteDigit(indexHeater,!state);
   10d18:	687b      	ldr	r3, [r7, #4]
   10d1a:	6918      	ldr	r0, [r3, #16]
   10d1c:	78bb      	ldrb	r3, [r7, #2]
   10d1e:	f083 0301 	eor.w	r3, r3, #1
   10d22:	b2da      	uxtb	r2, r3
   10d24:	78fb      	ldrb	r3, [r7, #3]
   10d26:	4619      	mov	r1, r3
   10d28:	4b05      	ldr	r3, [pc, #20]	; (10d40 <_ZN18SingleHeater_Class8SetRelayEhb+0x38>)
   10d2a:	4798      	blx	r3
   10d2c:	4603      	mov	r3, r0
   10d2e:	461a      	mov	r2, r3
   10d30:	687b      	ldr	r3, [r7, #4]
   10d32:	72da      	strb	r2, [r3, #11]
	return uint8_t(enabled);
   10d34:	687b      	ldr	r3, [r7, #4]
   10d36:	7adb      	ldrb	r3, [r3, #11]
}
   10d38:	4618      	mov	r0, r3
   10d3a:	3708      	adds	r7, #8
   10d3c:	46bd      	mov	sp, r7
   10d3e:	bd80      	pop	{r7, pc}
   10d40:	00011a6d 	.word	0x00011a6d

00010d44 <__tcf_0>:
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   10d44:	b590      	push	{r4, r7, lr}
   10d46:	b083      	sub	sp, #12
   10d48:	af00      	add	r7, sp, #0
   10d4a:	6078      	str	r0, [r7, #4]
   10d4c:	4c05      	ldr	r4, [pc, #20]	; (10d64 <__tcf_0+0x20>)
   10d4e:	4b06      	ldr	r3, [pc, #24]	; (10d68 <__tcf_0+0x24>)
   10d50:	429c      	cmp	r4, r3
   10d52:	d004      	beq.n	10d5e <__tcf_0+0x1a>
   10d54:	3c1c      	subs	r4, #28
   10d56:	4620      	mov	r0, r4
   10d58:	4b04      	ldr	r3, [pc, #16]	; (10d6c <__tcf_0+0x28>)
   10d5a:	4798      	blx	r3
   10d5c:	e7f7      	b.n	10d4e <__tcf_0+0xa>
   10d5e:	370c      	adds	r7, #12
   10d60:	46bd      	mov	sp, r7
   10d62:	bd90      	pop	{r4, r7, pc}
   10d64:	20002208 	.word	0x20002208
   10d68:	200021d0 	.word	0x200021d0
   10d6c:	00011703 	.word	0x00011703

00010d70 <_Z41__static_initialization_and_destruction_0ii>:
	}
	
	return result;
}

   10d70:	b5b0      	push	{r4, r5, r7, lr}
   10d72:	b082      	sub	sp, #8
   10d74:	af00      	add	r7, sp, #0
   10d76:	6078      	str	r0, [r7, #4]
   10d78:	6039      	str	r1, [r7, #0]
   10d7a:	687b      	ldr	r3, [r7, #4]
   10d7c:	2b01      	cmp	r3, #1
   10d7e:	d125      	bne.n	10dcc <_Z41__static_initialization_and_destruction_0ii+0x5c>
   10d80:	683b      	ldr	r3, [r7, #0]
   10d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10d86:	4293      	cmp	r3, r2
   10d88:	d120      	bne.n	10dcc <_Z41__static_initialization_and_destruction_0ii+0x5c>
	SingleHeater_Class( const SingleHeater_Class &c );
	SingleHeater_Class& operator=( const SingleHeater_Class &c );
	uint8_t InitExpanderArray(void);
	bool SelfTest(void);
}; //SingleHeater_Class
static I2C_Sync_Class	i2cSharedStatic(&I2C_HEATERS);
   10d8a:	4912      	ldr	r1, [pc, #72]	; (10dd4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
   10d8c:	4812      	ldr	r0, [pc, #72]	; (10dd8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   10d8e:	4b13      	ldr	r3, [pc, #76]	; (10ddc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
   10d90:	4798      	blx	r3
   10d92:	4a13      	ldr	r2, [pc, #76]	; (10de0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   10d94:	4913      	ldr	r1, [pc, #76]	; (10de4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
   10d96:	4810      	ldr	r0, [pc, #64]	; (10dd8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
   10d98:	4b13      	ldr	r3, [pc, #76]	; (10de8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   10d9a:	4798      	blx	r3
static	MCP23008_Class expandersStatic[SINGLE_HEATER_EXPANDERS];
   10d9c:	4b13      	ldr	r3, [pc, #76]	; (10dec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
   10d9e:	2401      	movs	r4, #1
   10da0:	461d      	mov	r5, r3
   10da2:	2c00      	cmp	r4, #0
   10da4:	db05      	blt.n	10db2 <_Z41__static_initialization_and_destruction_0ii+0x42>
   10da6:	4628      	mov	r0, r5
   10da8:	4b11      	ldr	r3, [pc, #68]	; (10df0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
   10daa:	4798      	blx	r3
   10dac:	351c      	adds	r5, #28
   10dae:	3c01      	subs	r4, #1
   10db0:	e7f7      	b.n	10da2 <_Z41__static_initialization_and_destruction_0ii+0x32>
   10db2:	4a0b      	ldr	r2, [pc, #44]	; (10de0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   10db4:	490f      	ldr	r1, [pc, #60]	; (10df4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
   10db6:	2000      	movs	r0, #0
   10db8:	4b0b      	ldr	r3, [pc, #44]	; (10de8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   10dba:	4798      	blx	r3
   10dbc:	480e      	ldr	r0, [pc, #56]	; (10df8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   10dbe:	4b0f      	ldr	r3, [pc, #60]	; (10dfc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
   10dc0:	4798      	blx	r3
   10dc2:	4a07      	ldr	r2, [pc, #28]	; (10de0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
   10dc4:	490e      	ldr	r1, [pc, #56]	; (10e00 <_Z41__static_initialization_and_destruction_0ii+0x90>)
   10dc6:	480c      	ldr	r0, [pc, #48]	; (10df8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
   10dc8:	4b07      	ldr	r3, [pc, #28]	; (10de8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
   10dca:	4798      	blx	r3
   10dcc:	bf00      	nop
   10dce:	3708      	adds	r7, #8
   10dd0:	46bd      	mov	sp, r7
   10dd2:	bdb0      	pop	{r4, r5, r7, pc}
   10dd4:	20009ed8 	.word	0x20009ed8
   10dd8:	200021b8 	.word	0x200021b8
   10ddc:	0000db3d 	.word	0x0000db3d
   10de0:	20000000 	.word	0x20000000
   10de4:	0000db59 	.word	0x0000db59
   10de8:	00013091 	.word	0x00013091
   10dec:	200021d0 	.word	0x200021d0
   10df0:	000116ef 	.word	0x000116ef
   10df4:	00010d45 	.word	0x00010d45
   10df8:	20002208 	.word	0x20002208
   10dfc:	00010c01 	.word	0x00010c01
   10e00:	00010c31 	.word	0x00010c31

00010e04 <_GLOBAL__sub_I_ptrSingleHeaterClass>:
   10e04:	b580      	push	{r7, lr}
   10e06:	af00      	add	r7, sp, #0
   10e08:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10e0c:	2001      	movs	r0, #1
   10e0e:	4b01      	ldr	r3, [pc, #4]	; (10e14 <_GLOBAL__sub_I_ptrSingleHeaterClass+0x10>)
   10e10:	4798      	blx	r3
   10e12:	bd80      	pop	{r7, pc}
   10e14:	00010d71 	.word	0x00010d71

00010e18 <_ZN18FlashHandler_ClassC1Ev>:
MemoryFlashStruct	*flashMap=NULL;

// default constructor
FlashHandler_Class::FlashHandler_Class()
{
} //MemoryStruct_Class
   10e18:	4770      	bx	lr

00010e1a <_ZN18FlashHandler_ClassD1Ev>:

// default destructor
FlashHandler_Class::~FlashHandler_Class()
{
} //~MemoryStruct_Class
   10e1a:	4770      	bx	lr

00010e1c <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm>:
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	r;
}

uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up,uint32_t add){
   10e1c:	b510      	push	{r4, lr}

	uint32_t	r=qspiFlash.ReadAddress((uint8_t*)&up,add,sizeof(UserParameters));
   10e1e:	2302      	movs	r3, #2
   10e20:	4801      	ldr	r0, [pc, #4]	; (10e28 <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0xc>)
   10e22:	4c02      	ldr	r4, [pc, #8]	; (10e2c <_ZN18FlashHandler_Class14ReadParametersER14UserParametersm+0x10>)
   10e24:	47a0      	blx	r4
	return	r;
}
   10e26:	bd10      	pop	{r4, pc}
   10e28:	20009b78 	.word	0x20009b78
   10e2c:	00012db9 	.word	0x00012db9

00010e30 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters>:
uint32_t	FlashHandler_Class::ReadParameters(UserParameters& up){
   10e30:	b508      	push	{r3, lr}
	uint32_t	add=(uint32_t)&flashMap->parametersSector.parameters;
   10e32:	4b03      	ldr	r3, [pc, #12]	; (10e40 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x10>)
   10e34:	681a      	ldr	r2, [r3, #0]
	uint32_t	r=ReadParameters(up,add);
   10e36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   10e3a:	4b02      	ldr	r3, [pc, #8]	; (10e44 <_ZN18FlashHandler_Class14ReadParametersER14UserParameters+0x14>)
   10e3c:	4798      	blx	r3
}
   10e3e:	bd08      	pop	{r3, pc}
   10e40:	2000222c 	.word	0x2000222c
   10e44:	00010e1d 	.word	0x00010e1d

00010e48 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm>:
uint32_t	FlashHandler_Class::WriteConfigurationData(ConfigurationData& cd,uint32_t add){
	handlerConfigData=PTR_CONFIG_DATA(&cd);
	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)handlerConfigData,add,sizeof(ConfigurationData));
	return	w;
}
uint32_t	FlashHandler_Class::WriteParameters(UserParameters& up,uint32_t add){
   10e48:	b510      	push	{r4, lr}

	uint32_t	w=qspiFlash.WriteAddress((uint8_t*)&up,add,sizeof(UserParameters));
   10e4a:	2302      	movs	r3, #2
   10e4c:	4801      	ldr	r0, [pc, #4]	; (10e54 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0xc>)
   10e4e:	4c02      	ldr	r4, [pc, #8]	; (10e58 <_ZN18FlashHandler_Class15WriteParametersER14UserParametersm+0x10>)
   10e50:	47a0      	blx	r4
	return	w;
}
   10e52:	bd10      	pop	{r4, pc}
   10e54:	20009b78 	.word	0x20009b78
   10e58:	00012d85 	.word	0x00012d85

00010e5c <_ZN18FlashHandler_Class22WriteDefaultParametersEv>:
	ConfigurationData cd=factoryDefaultsConfiguration;
	uint32_t	add=(uint32_t)&flashMap->configurationSector.defaultConfiguration;
	uint32_t	w=WriteConfigurationData(cd,add);
	return	w;
}
uint32_t	FlashHandler_Class::WriteDefaultParameters(void){
   10e5c:	b500      	push	{lr}
   10e5e:	b083      	sub	sp, #12
	UserParameters up=defaultParameters;
   10e60:	4b07      	ldr	r3, [pc, #28]	; (10e80 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x24>)
   10e62:	881b      	ldrh	r3, [r3, #0]
   10e64:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint32_t	add=(uint32_t)&flashMap->parametersSector.defaultParameters;
   10e68:	4b06      	ldr	r3, [pc, #24]	; (10e84 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x28>)
   10e6a:	681a      	ldr	r2, [r3, #0]
	uint32_t	w=WriteParameters(up,add);
   10e6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   10e70:	3202      	adds	r2, #2
   10e72:	a901      	add	r1, sp, #4
   10e74:	4b04      	ldr	r3, [pc, #16]	; (10e88 <_ZN18FlashHandler_Class22WriteDefaultParametersEv+0x2c>)
   10e76:	4798      	blx	r3
	return	w;
}
   10e78:	b003      	add	sp, #12
   10e7a:	f85d fb04 	ldr.w	pc, [sp], #4
   10e7e:	bf00      	nop
   10e80:	00013f2c 	.word	0x00013f2c
   10e84:	2000222c 	.word	0x2000222c
   10e88:	00010e49 	.word	0x00010e49

00010e8c <_ZN17MemoryFlash_ClassD1Ev>:
} //MemoryManagment_Class



// default destructor
MemoryFlash_Class::~MemoryFlash_Class()
   10e8c:	b510      	push	{r4, lr}
   10e8e:	4604      	mov	r4, r0
   10e90:	30b8      	adds	r0, #184	; 0xb8
   10e92:	4b03      	ldr	r3, [pc, #12]	; (10ea0 <_ZN17MemoryFlash_ClassD1Ev+0x14>)
   10e94:	4798      	blx	r3
   10e96:	4620      	mov	r0, r4
   10e98:	4b02      	ldr	r3, [pc, #8]	; (10ea4 <_ZN17MemoryFlash_ClassD1Ev+0x18>)
   10e9a:	4798      	blx	r3
{
} //~MemoryManagment_Class
   10e9c:	4620      	mov	r0, r4
   10e9e:	bd10      	pop	{r4, pc}
   10ea0:	000110af 	.word	0x000110af
   10ea4:	00010e1b 	.word	0x00010e1b

00010ea8 <_ZN17MemoryFlash_ClassC1Ev>:
MemoryFlash_Class::MemoryFlash_Class()
   10ea8:	b538      	push	{r3, r4, r5, lr}
   10eaa:	4604      	mov	r4, r0
   10eac:	4b14      	ldr	r3, [pc, #80]	; (10f00 <_ZN17MemoryFlash_ClassC1Ev+0x58>)
   10eae:	4798      	blx	r3
   10eb0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   10eb4:	4b13      	ldr	r3, [pc, #76]	; (10f04 <_ZN17MemoryFlash_ClassC1Ev+0x5c>)
   10eb6:	4798      	blx	r3
typedef		void	(*PTR_RINGBUFFER)(RingBuffer*);

template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
   10eb8:	f44f 7500 	mov.w	r5, #512	; 0x200
   10ebc:	462a      	mov	r2, r5
   10ebe:	2100      	movs	r1, #0
   10ec0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   10ec4:	4b10      	ldr	r3, [pc, #64]	; (10f08 <_ZN17MemoryFlash_ClassC1Ev+0x60>)
   10ec6:	4798      	blx	r3
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
   10ec8:	2300      	movs	r3, #0
   10eca:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  _iTail = 0;
   10ece:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
   10ed2:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
	_currentAddress=0;
   10ed6:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
	head=512;
   10eda:	f8c4 52f8 	str.w	r5, [r4, #760]	; 0x2f8
	tail=0;
   10ede:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
	flashBuffer=&flashBufferStatic[0];
   10ee2:	4a0a      	ldr	r2, [pc, #40]	; (10f0c <_ZN17MemoryFlash_ClassC1Ev+0x64>)
   10ee4:	f246 33b4 	movw	r3, #25524	; 0x63b4
   10ee8:	50e2      	str	r2, [r4, r3]
	stackpointerEventloger=(uint32_t)&flashMap->EventsLogStateSector;
   10eea:	4b09      	ldr	r3, [pc, #36]	; (10f10 <_ZN17MemoryFlash_ClassC1Ev+0x68>)
   10eec:	681b      	ldr	r3, [r3, #0]
   10eee:	f503 43a1 	add.w	r3, r3, #20608	; 0x5080
   10ef2:	332c      	adds	r3, #44	; 0x2c
   10ef4:	f246 32b8 	movw	r2, #25528	; 0x63b8
   10ef8:	50a3      	str	r3, [r4, r2]
} //MemoryManagment_Class
   10efa:	4620      	mov	r0, r4
   10efc:	bd38      	pop	{r3, r4, r5, pc}
   10efe:	bf00      	nop
   10f00:	00010e19 	.word	0x00010e19
   10f04:	000110ad 	.word	0x000110ad
   10f08:	00013745 	.word	0x00013745
   10f0c:	20002230 	.word	0x20002230
   10f10:	2000222c 	.word	0x2000222c

00010f14 <_ZN17MemoryFlash_Class4InitEm>:

bool	MemoryFlash_Class::Init(uint32_t flashChipSize){
   10f14:	b538      	push	{r3, r4, r5, lr}
		if (qspiFlash.Init())
   10f16:	480b      	ldr	r0, [pc, #44]	; (10f44 <_ZN17MemoryFlash_Class4InitEm+0x30>)
   10f18:	4b0b      	ldr	r3, [pc, #44]	; (10f48 <_ZN17MemoryFlash_Class4InitEm+0x34>)
   10f1a:	4798      	blx	r3
   10f1c:	b948      	cbnz	r0, 10f32 <_ZN17MemoryFlash_Class4InitEm+0x1e>
	return *this;
}

template<class T>
inline Print &operator <<(Print &stream, const T &arg)
{ stream.print(arg); return stream; }
   10f1e:	4d0b      	ldr	r5, [pc, #44]	; (10f4c <_ZN17MemoryFlash_Class4InitEm+0x38>)
   10f20:	490b      	ldr	r1, [pc, #44]	; (10f50 <_ZN17MemoryFlash_Class4InitEm+0x3c>)
   10f22:	4628      	mov	r0, r5
   10f24:	4c0b      	ldr	r4, [pc, #44]	; (10f54 <_ZN17MemoryFlash_Class4InitEm+0x40>)
   10f26:	47a0      	blx	r4
   10f28:	490b      	ldr	r1, [pc, #44]	; (10f58 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   10f2a:	4628      	mov	r0, r5
   10f2c:	47a0      	blx	r4
			usb<<"Flash Memory SelfTest FAILED"<<NEWLINE;
		}
				
		SetChipID(flashChipSize);
		return true;
}
   10f2e:	2001      	movs	r0, #1
   10f30:	bd38      	pop	{r3, r4, r5, pc}
   10f32:	4d06      	ldr	r5, [pc, #24]	; (10f4c <_ZN17MemoryFlash_Class4InitEm+0x38>)
   10f34:	4909      	ldr	r1, [pc, #36]	; (10f5c <_ZN17MemoryFlash_Class4InitEm+0x48>)
   10f36:	4628      	mov	r0, r5
   10f38:	4c06      	ldr	r4, [pc, #24]	; (10f54 <_ZN17MemoryFlash_Class4InitEm+0x40>)
   10f3a:	47a0      	blx	r4
   10f3c:	4906      	ldr	r1, [pc, #24]	; (10f58 <_ZN17MemoryFlash_Class4InitEm+0x44>)
   10f3e:	4628      	mov	r0, r5
   10f40:	47a0      	blx	r4
   10f42:	e7f4      	b.n	10f2e <_ZN17MemoryFlash_Class4InitEm+0x1a>
   10f44:	20009b78 	.word	0x20009b78
   10f48:	00012ce9 	.word	0x00012ce9
   10f4c:	200016f8 	.word	0x200016f8
   10f50:	00013ec0 	.word	0x00013ec0
   10f54:	0000e8d9 	.word	0x0000e8d9
   10f58:	00013ebc 	.word	0x00013ebc
   10f5c:	00013e9c 	.word	0x00013e9c

00010f60 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters>:
		  return	w;
	 }

	 return	r;
 }
 uint32_t	MemoryFlash_Class::SaveParameters(UserParameters& up){
   10f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f62:	460f      	mov	r7, r1
	  uint32_t	add=(uint32_t)&flashMap->parametersSector;
   10f64:	4b10      	ldr	r3, [pc, #64]	; (10fa8 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x48>)
   10f66:	681c      	ldr	r4, [r3, #0]
   10f68:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	  ParametersSector	*pss=(ParametersSector*)&flashBuffer[0];
   10f6c:	f246 33b4 	movw	r3, #25524	; 0x63b4
   10f70:	58c5      	ldr	r5, [r0, r3]
	  uint32_t r=qspiFlash.ReadAddress((uint8_t*)pss,add,QSPI_ERBLK);
   10f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   10f76:	4622      	mov	r2, r4
   10f78:	4629      	mov	r1, r5
   10f7a:	480c      	ldr	r0, [pc, #48]	; (10fac <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   10f7c:	4e0c      	ldr	r6, [pc, #48]	; (10fb0 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x50>)
   10f7e:	47b0      	blx	r6
	  if (r==0)
   10f80:	4603      	mov	r3, r0
   10f82:	b108      	cbz	r0, 10f88 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x28>
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
		  return	w;
	  }

	  return	r;
  }
   10f84:	4618      	mov	r0, r3
   10f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  memcpy((void*)&(pss->parameters),(void*)&up,sizeof(UserParameters));
   10f88:	883b      	ldrh	r3, [r7, #0]
   10f8a:	802b      	strh	r3, [r5, #0]
		  qspiFlash.Erase(add);
   10f8c:	4e07      	ldr	r6, [pc, #28]	; (10fac <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x4c>)
   10f8e:	4621      	mov	r1, r4
   10f90:	4630      	mov	r0, r6
   10f92:	4b08      	ldr	r3, [pc, #32]	; (10fb4 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x54>)
   10f94:	4798      	blx	r3
		  uint32_t w=qspiFlash.WriteAddress((uint8_t*)pss,add,QSPI_ERBLK);
   10f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   10f9a:	4622      	mov	r2, r4
   10f9c:	4629      	mov	r1, r5
   10f9e:	4630      	mov	r0, r6
   10fa0:	4c05      	ldr	r4, [pc, #20]	; (10fb8 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x58>)
   10fa2:	47a0      	blx	r4
   10fa4:	4603      	mov	r3, r0
		  return	w;
   10fa6:	e7ed      	b.n	10f84 <_ZN17MemoryFlash_Class14SaveParametersER14UserParameters+0x24>
   10fa8:	2000222c 	.word	0x2000222c
   10fac:	20009b78 	.word	0x20009b78
   10fb0:	00012db9 	.word	0x00012db9
   10fb4:	00012d55 	.word	0x00012d55
   10fb8:	00012d85 	.word	0x00012d85

00010fbc <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev>:
// 	memcpy((void*)bufferAddres,&crc,sizeof(uint32_t));
// 	return	bufferAddres;
	return WriteCRCAppState(crc);
}
 
   10fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   10fc0:	4c2b      	ldr	r4, [pc, #172]	; (11070 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb4>)
   10fc2:	f1a4 05f8 	sub.w	r5, r4, #248	; 0xf8
   10fc6:	492b      	ldr	r1, [pc, #172]	; (11074 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xb8>)
   10fc8:	4628      	mov	r0, r5
   10fca:	4f2b      	ldr	r7, [pc, #172]	; (11078 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xbc>)
   10fcc:	47b8      	blx	r7
   10fce:	4e2b      	ldr	r6, [pc, #172]	; (1107c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc0>)
   10fd0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 110a8 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xec>
   10fd4:	4632      	mov	r2, r6
   10fd6:	4641      	mov	r1, r8
   10fd8:	4628      	mov	r0, r5
   10fda:	4d29      	ldr	r5, [pc, #164]	; (11080 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc4>)
   10fdc:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   10fde:	f1a4 09d8 	sub.w	r9, r4, #216	; 0xd8
   10fe2:	4928      	ldr	r1, [pc, #160]	; (11084 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xc8>)
   10fe4:	4648      	mov	r0, r9
   10fe6:	47b8      	blx	r7
   10fe8:	4632      	mov	r2, r6
   10fea:	4641      	mov	r1, r8
   10fec:	4648      	mov	r0, r9
   10fee:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   10ff0:	f1a4 09b8 	sub.w	r9, r4, #184	; 0xb8
   10ff4:	4924      	ldr	r1, [pc, #144]	; (11088 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xcc>)
   10ff6:	4648      	mov	r0, r9
   10ff8:	47b8      	blx	r7
   10ffa:	4632      	mov	r2, r6
   10ffc:	4641      	mov	r1, r8
   10ffe:	4648      	mov	r0, r9
   11000:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   11002:	f1a4 0998 	sub.w	r9, r4, #152	; 0x98
   11006:	4921      	ldr	r1, [pc, #132]	; (1108c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd0>)
   11008:	4648      	mov	r0, r9
   1100a:	47b8      	blx	r7
   1100c:	4632      	mov	r2, r6
   1100e:	4641      	mov	r1, r8
   11010:	4648      	mov	r0, r9
   11012:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   11014:	f1a4 0978 	sub.w	r9, r4, #120	; 0x78
   11018:	491d      	ldr	r1, [pc, #116]	; (11090 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd4>)
   1101a:	4648      	mov	r0, r9
   1101c:	47b8      	blx	r7
   1101e:	4632      	mov	r2, r6
   11020:	4641      	mov	r1, r8
   11022:	4648      	mov	r0, r9
   11024:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   11026:	f1a4 0958 	sub.w	r9, r4, #88	; 0x58
   1102a:	491a      	ldr	r1, [pc, #104]	; (11094 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xd8>)
   1102c:	4648      	mov	r0, r9
   1102e:	47b8      	blx	r7
   11030:	4632      	mov	r2, r6
   11032:	4641      	mov	r1, r8
   11034:	4648      	mov	r0, r9
   11036:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   11038:	f1a4 0938 	sub.w	r9, r4, #56	; 0x38
   1103c:	4916      	ldr	r1, [pc, #88]	; (11098 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xdc>)
   1103e:	4648      	mov	r0, r9
   11040:	47b8      	blx	r7
   11042:	4632      	mov	r2, r6
   11044:	4641      	mov	r1, r8
   11046:	4648      	mov	r0, r9
   11048:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   1104a:	f1a4 0918 	sub.w	r9, r4, #24
   1104e:	4913      	ldr	r1, [pc, #76]	; (1109c <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe0>)
   11050:	4648      	mov	r0, r9
   11052:	47b8      	blx	r7
   11054:	4632      	mov	r2, r6
   11056:	4641      	mov	r1, r8
   11058:	4648      	mov	r0, r9
   1105a:	47a8      	blx	r5
   1105c:	3408      	adds	r4, #8
   1105e:	4620      	mov	r0, r4
   11060:	4b0f      	ldr	r3, [pc, #60]	; (110a0 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe4>)
   11062:	4798      	blx	r3
   11064:	4632      	mov	r2, r6
   11066:	490f      	ldr	r1, [pc, #60]	; (110a4 <_GLOBAL__sub_I__ZN17MemoryFlash_ClassC2Ev+0xe8>)
   11068:	4620      	mov	r0, r4
   1106a:	47a8      	blx	r5
   1106c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11070:	20003328 	.word	0x20003328
   11074:	20009da8 	.word	0x20009da8
   11078:	0000dc59 	.word	0x0000dc59
   1107c:	20000000 	.word	0x20000000
   11080:	00013091 	.word	0x00013091
   11084:	20009e3c 	.word	0x20009e3c
   11088:	20009f60 	.word	0x20009f60
   1108c:	20009e5c 	.word	0x20009e5c
   11090:	20009f20 	.word	0x20009f20
   11094:	20009f40 	.word	0x20009f40
   11098:	20009e18 	.word	0x20009e18
   1109c:	20009eb8 	.word	0x20009eb8
   110a0:	00010ea9 	.word	0x00010ea9
   110a4:	00010e8d 	.word	0x00010e8d
   110a8:	0000dc91 	.word	0x0000dc91

000110ac <_ZN11CRC32_ClassC1Ev>:
#include "math.h"

// default constructor
CRC32_Class::CRC32_Class()
{
} //CRC32_Class
   110ac:	4770      	bx	lr

000110ae <_ZN11CRC32_ClassD1Ev>:

// default destructor
CRC32_Class::~CRC32_Class()
{
} //~CRC32_Class
   110ae:	4770      	bx	lr

000110b0 <_ZL17ConversionTimeoutPK10timer_task>:
	ptrTemperaturesClass->converterReady[2]=true;
	ptrTemperaturesClass->SetModuleReady(2);
	ptrTemperaturesClass->converterTimeout=false;
}
static void	ConversionTimeout(const struct timer_task *const timer_task){
	ptrTemperaturesClass->converterTimeout=true;
   110b0:	4b03      	ldr	r3, [pc, #12]	; (110c0 <_ZL17ConversionTimeoutPK10timer_task+0x10>)
   110b2:	681b      	ldr	r3, [r3, #0]
   110b4:	2201      	movs	r2, #1
   110b6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	asm("nop");
   110ba:	bf00      	nop
   110bc:	4770      	bx	lr
   110be:	bf00      	nop
   110c0:	200096ec 	.word	0x200096ec

000110c4 <_ZN24TemperatureSensors_ClassD1Ev>:
		SPIA=SPI_LTC;
		
} //TemperatureSensors_Class

// default destructor
TemperatureSensors_Class::~TemperatureSensors_Class()
   110c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110c6:	4607      	mov	r7, r0
   110c8:	f110 05a8 	adds.w	r5, r0, #168	; 0xa8
   110cc:	d007      	beq.n	110de <_ZN24TemperatureSensors_ClassD1Ev+0x1a>
   110ce:	f500 74f0 	add.w	r4, r0, #480	; 0x1e0
   110d2:	4e05      	ldr	r6, [pc, #20]	; (110e8 <_ZN24TemperatureSensors_ClassD1Ev+0x24>)
   110d4:	3c68      	subs	r4, #104	; 0x68
   110d6:	4620      	mov	r0, r4
   110d8:	47b0      	blx	r6
   110da:	42a5      	cmp	r5, r4
   110dc:	d1fa      	bne.n	110d4 <_ZN24TemperatureSensors_ClassD1Ev+0x10>
   110de:	4638      	mov	r0, r7
   110e0:	4b02      	ldr	r3, [pc, #8]	; (110ec <_ZN24TemperatureSensors_ClassD1Ev+0x28>)
   110e2:	4798      	blx	r3
{
} //~TemperatureSensors_Class
   110e4:	4638      	mov	r0, r7
   110e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   110e8:	00011b79 	.word	0x00011b79
   110ec:	00011b79 	.word	0x00011b79

000110f0 <_ZL15Converter1Readyv>:
	ptrTemperaturesClass->converterReady[0]=true;
   110f0:	4b06      	ldr	r3, [pc, #24]	; (1110c <_ZL15Converter1Readyv+0x1c>)
   110f2:	681b      	ldr	r3, [r3, #0]
   110f4:	2201      	movs	r2, #1
   110f6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
bool	TemperatureSensors_Class::IsConversionFinished(){
	return converterReady[0]&converterReady[1]&converterReady[2];
}
bool	TemperatureSensors_Class::SetModuleReady(uint8_t m){
	module[m].ready=true;
   110fa:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	return module[m].ready;
   110fe:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	ptrTemperaturesClass->converterTimeout=false;
   11102:	2200      	movs	r2, #0
   11104:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   11108:	4770      	bx	lr
   1110a:	bf00      	nop
   1110c:	200096ec 	.word	0x200096ec

00011110 <_ZL15Converter2Readyv>:
	ptrTemperaturesClass->converterReady[1]=true;
   11110:	4b06      	ldr	r3, [pc, #24]	; (1112c <_ZL15Converter2Readyv+0x1c>)
   11112:	681b      	ldr	r3, [r3, #0]
   11114:	2201      	movs	r2, #1
   11116:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	module[m].ready=true;
   1111a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	return module[m].ready;
   1111e:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
	ptrTemperaturesClass->converterTimeout=false;
   11122:	2200      	movs	r2, #0
   11124:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   11128:	4770      	bx	lr
   1112a:	bf00      	nop
   1112c:	200096ec 	.word	0x200096ec

00011130 <_ZL15Converter3Readyv>:
	ptrTemperaturesClass->converterReady[2]=true;
   11130:	4b06      	ldr	r3, [pc, #24]	; (1114c <_ZL15Converter3Readyv+0x1c>)
   11132:	681b      	ldr	r3, [r3, #0]
   11134:	2201      	movs	r2, #1
   11136:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	module[m].ready=true;
   1113a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	return module[m].ready;
   1113e:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
	ptrTemperaturesClass->converterTimeout=false;
   11142:	2200      	movs	r2, #0
   11144:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
   11148:	4770      	bx	lr
   1114a:	bf00      	nop
   1114c:	200096ec 	.word	0x200096ec

00011150 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor>:
TemperatureSensors_Class::TemperatureSensors_Class(spi_m_sync_descriptor *SPI_LTC)
   11150:	b570      	push	{r4, r5, r6, lr}
   11152:	4604      	mov	r4, r0
   11154:	460e      	mov	r6, r1
   11156:	4b0a      	ldr	r3, [pc, #40]	; (11180 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x30>)
   11158:	4798      	blx	r3
   1115a:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   1115e:	4d09      	ldr	r5, [pc, #36]	; (11184 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x34>)
   11160:	47a8      	blx	r5
   11162:	f504 7088 	add.w	r0, r4, #272	; 0x110
   11166:	47a8      	blx	r5
   11168:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   1116c:	47a8      	blx	r5
		spiLite=&ltSPI;
   1116e:	4b06      	ldr	r3, [pc, #24]	; (11188 <_ZN24TemperatureSensors_ClassC1EP21spi_m_sync_descriptor+0x38>)
   11170:	1d1a      	adds	r2, r3, #4
   11172:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
		ptrTemperaturesClass=this;
   11176:	601c      	str	r4, [r3, #0]
		SPIA=SPI_LTC;
   11178:	f8c4 61ec 	str.w	r6, [r4, #492]	; 0x1ec
} //TemperatureSensors_Class
   1117c:	4620      	mov	r0, r4
   1117e:	bd70      	pop	{r4, r5, r6, pc}
   11180:	00011b65 	.word	0x00011b65
   11184:	00011b65 	.word	0x00011b65
   11188:	200096ec 	.word	0x200096ec

0001118c <_ZN24TemperatureSensors_Class11InitModulesEv>:
bool TemperatureSensors_Class::InitModules(void){
   1118c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11190:	4604      	mov	r4, r0
	csPins[0]=CS_TEMP1;  csPins[1]=CS_TEMP2; csPins[2]=CS_TEMP3;
   11192:	233d      	movs	r3, #61	; 0x3d
   11194:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
   11198:	231b      	movs	r3, #27
   1119a:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
   1119e:	2327      	movs	r3, #39	; 0x27
   111a0:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
   111a4:	f500 76f0 	add.w	r6, r0, #480	; 0x1e0
   111a8:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
   111ac:	f500 78f6 	add.w	r8, r0, #492	; 0x1ec
		module[ii].Init(csPins[ii],spiLite);
   111b0:	4f06      	ldr	r7, [pc, #24]	; (111cc <_ZN24TemperatureSensors_Class11InitModulesEv+0x40>)
   111b2:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   111b6:	f856 1b04 	ldr.w	r1, [r6], #4
   111ba:	4628      	mov	r0, r5
   111bc:	47b8      	blx	r7
   111be:	3568      	adds	r5, #104	; 0x68
	for (uint8_t  ii = 0; ii < NUMBER_LTC2983_MODULES; ii++)
   111c0:	4546      	cmp	r6, r8
   111c2:	d1f6      	bne.n	111b2 <_ZN24TemperatureSensors_Class11InitModulesEv+0x26>
}
   111c4:	2001      	movs	r0, #1
   111c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   111ca:	bf00      	nop
   111cc:	00011b8d 	.word	0x00011b8d

000111d0 <_ZN24TemperatureSensors_Class4InitEv>:
bool	TemperatureSensors_Class::Init(void){
   111d0:	b538      	push	{r3, r4, r5, lr}
   111d2:	4604      	mov	r4, r0
	spiLite->set_descriptor(SPIA);
   111d4:	f8d0 11ec 	ldr.w	r1, [r0, #492]	; 0x1ec
   111d8:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   111dc:	4b16      	ldr	r3, [pc, #88]	; (11238 <_ZN24TemperatureSensors_Class4InitEv+0x68>)
   111de:	4798      	blx	r3
	spiLite->init();
   111e0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   111e4:	4b15      	ldr	r3, [pc, #84]	; (1123c <_ZN24TemperatureSensors_Class4InitEv+0x6c>)
   111e6:	4798      	blx	r3
	ptrTemperaturesClass=this;
   111e8:	4b15      	ldr	r3, [pc, #84]	; (11240 <_ZN24TemperatureSensors_Class4InitEv+0x70>)
   111ea:	601c      	str	r4, [r3, #0]
	ext_irq_register(PIN_PB08, Converter1Ready);
   111ec:	4915      	ldr	r1, [pc, #84]	; (11244 <_ZN24TemperatureSensors_Class4InitEv+0x74>)
   111ee:	2028      	movs	r0, #40	; 0x28
   111f0:	4d15      	ldr	r5, [pc, #84]	; (11248 <_ZN24TemperatureSensors_Class4InitEv+0x78>)
   111f2:	47a8      	blx	r5
	ext_irq_register(PIN_PB09, Converter2Ready);
   111f4:	4915      	ldr	r1, [pc, #84]	; (1124c <_ZN24TemperatureSensors_Class4InitEv+0x7c>)
   111f6:	2029      	movs	r0, #41	; 0x29
   111f8:	47a8      	blx	r5
	ext_irq_register(PIN_PB01, Converter3Ready);
   111fa:	4915      	ldr	r1, [pc, #84]	; (11250 <_ZN24TemperatureSensors_Class4InitEv+0x80>)
   111fc:	2021      	movs	r0, #33	; 0x21
   111fe:	47a8      	blx	r5
	InitModules();
   11200:	4620      	mov	r0, r4
   11202:	4b14      	ldr	r3, [pc, #80]	; (11254 <_ZN24TemperatureSensors_Class4InitEv+0x84>)
   11204:	4798      	blx	r3
	converterReady[0]=true;converterReady[1]=true;converterReady[3]=true;
   11206:	2301      	movs	r3, #1
   11208:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
   1120c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   11210:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	currentModule=0; currentChannelIndex=0;
   11214:	2300      	movs	r3, #0
   11216:	f884 31f3 	strb.w	r3, [r4, #499]	; 0x1f3
   1121a:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
   1121e:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
   11222:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
   11226:	4013      	ands	r3, r2
   11228:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   1122c:	4013      	ands	r3, r2
	isOK=(module[0].isOK)&(module[1].isOK)&(module[2].isOK);
   1122e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
	return isOK;
   11232:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
}
   11236:	bd38      	pop	{r3, r4, r5, pc}
   11238:	00012499 	.word	0x00012499
   1123c:	0001243d 	.word	0x0001243d
   11240:	200096ec 	.word	0x200096ec
   11244:	000110f1 	.word	0x000110f1
   11248:	00002ab5 	.word	0x00002ab5
   1124c:	00011111 	.word	0x00011111
   11250:	00011131 	.word	0x00011131
   11254:	0001118d 	.word	0x0001118d

00011258 <_ZN24TemperatureSensors_Class18StartOneConversionEv>:
void	TemperatureSensors_Class::StartOneConversion(void){
   11258:	b510      	push	{r4, lr}
   1125a:	4604      	mov	r4, r0
	converterTimeout=false;
   1125c:	2200      	movs	r2, #0
   1125e:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	converterReady[currentModule]=false;
   11262:	f890 31f3 	ldrb.w	r3, [r0, #499]	; 0x1f3
   11266:	4403      	add	r3, r0
   11268:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	temperatureTimer.Start_oneShot_task((FUNC_PTR)ConversionTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   1126c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11270:	4907      	ldr	r1, [pc, #28]	; (11290 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x38>)
   11272:	4808      	ldr	r0, [pc, #32]	; (11294 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x3c>)
   11274:	4b08      	ldr	r3, [pc, #32]	; (11298 <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x40>)
   11276:	4798      	blx	r3
	module[currentModule].ConvertAsyncChannelIndex(currentChannelIndex);
   11278:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
   1127c:	2368      	movs	r3, #104	; 0x68
   1127e:	fb03 4000 	mla	r0, r3, r0, r4
   11282:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
   11286:	30a8      	adds	r0, #168	; 0xa8
   11288:	4b04      	ldr	r3, [pc, #16]	; (1129c <_ZN24TemperatureSensors_Class18StartOneConversionEv+0x44>)
   1128a:	4798      	blx	r3
   1128c:	bd10      	pop	{r4, pc}
   1128e:	bf00      	nop
   11290:	000110b1 	.word	0x000110b1
   11294:	20009704 	.word	0x20009704
   11298:	0000dee1 	.word	0x0000dee1
   1129c:	00011c81 	.word	0x00011c81

000112a0 <_ZN24TemperatureSensors_Class19GetConversionResultEv>:
float TemperatureSensors_Class::GetConversionResult(void){
   112a0:	b538      	push	{r3, r4, r5, lr}
   112a2:	4604      	mov	r4, r0
	temperatureTimer.Remove_task(FUNC_PTR(ConversionTimeout));
   112a4:	491e      	ldr	r1, [pc, #120]	; (11320 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x80>)
   112a6:	481f      	ldr	r0, [pc, #124]	; (11324 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x84>)
   112a8:	4b1f      	ldr	r3, [pc, #124]	; (11328 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x88>)
   112aa:	4798      	blx	r3
	lastValue=module[currentModule].GetSingleChannelResultIndex(currentChannelIndex);
   112ac:	f894 01f3 	ldrb.w	r0, [r4, #499]	; 0x1f3
   112b0:	2568      	movs	r5, #104	; 0x68
   112b2:	fb05 4000 	mla	r0, r5, r0, r4
   112b6:	f894 11f4 	ldrb.w	r1, [r4, #500]	; 0x1f4
   112ba:	30a8      	adds	r0, #168	; 0xa8
   112bc:	4b1b      	ldr	r3, [pc, #108]	; (1132c <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x8c>)
   112be:	4798      	blx	r3
   112c0:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	faultData=module[currentModule].fault_data;
   112c4:	f894 21f3 	ldrb.w	r2, [r4, #499]	; 0x1f3
   112c8:	fb05 4502 	mla	r5, r5, r2, r4
   112cc:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
   112d0:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
		if (faultData==VALID_TEMPERATURE)
   112d4:	2b01      	cmp	r3, #1
   112d6:	d00d      	beq.n	112f4 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x54>
			lastValue=-999;
   112d8:	4b15      	ldr	r3, [pc, #84]	; (11330 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x90>)
   112da:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	currentChannelIndex++;
   112de:	f894 31f4 	ldrb.w	r3, [r4, #500]	; 0x1f4
   112e2:	3301      	adds	r3, #1
   112e4:	b2db      	uxtb	r3, r3
	if (currentChannelIndex==NUMBER_TEMPERATURE_CHANNELS)
   112e6:	2b04      	cmp	r3, #4
   112e8:	d00c      	beq.n	11304 <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x64>
	currentChannelIndex++;
   112ea:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
}
   112ee:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   112f2:	bd38      	pop	{r3, r4, r5, pc}
			values[currentModule][currentChannelIndex]=lastValue;
   112f4:	f894 31f4 	ldrb.w	r3, [r4, #500]	; 0x1f4
   112f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   112fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   11300:	66d8      	str	r0, [r3, #108]	; 0x6c
   11302:	e7ec      	b.n	112de <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x3e>
		currentChannelIndex=0;
   11304:	2300      	movs	r3, #0
   11306:	f884 31f4 	strb.w	r3, [r4, #500]	; 0x1f4
		currentModule++;
   1130a:	3201      	adds	r2, #1
   1130c:	b2d2      	uxtb	r2, r2
		if (currentModule==NUMBER_LTC2983_MODULES)
   1130e:	2a03      	cmp	r2, #3
		currentModule++;
   11310:	bf12      	itee	ne
   11312:	f884 21f3 	strbne.w	r2, [r4, #499]	; 0x1f3
			currentModule=0;
   11316:	2300      	moveq	r3, #0
   11318:	f884 31f3 	strbeq.w	r3, [r4, #499]	; 0x1f3
   1131c:	e7e7      	b.n	112ee <_ZN24TemperatureSensors_Class19GetConversionResultEv+0x4e>
   1131e:	bf00      	nop
   11320:	000110b1 	.word	0x000110b1
   11324:	20009704 	.word	0x20009704
   11328:	0000de89 	.word	0x0000de89
   1132c:	00011d89 	.word	0x00011d89
   11330:	c479c000 	.word	0xc479c000

00011334 <_ZN24TemperatureSensors_Class20IsConversionFinishedEv>:
	return converterReady[0]&converterReady[1]&converterReady[2];
   11334:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
   11338:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
   1133c:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
   11340:	4013      	ands	r3, r2
}
   11342:	4018      	ands	r0, r3
   11344:	4770      	bx	lr
	...

00011348 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev>:
}

TemperatureSensors_Class temperatures(&SPI_TEMP);
   11348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	void	ChooseAvailableTimerTask(void);

}; //Timer_Class
// 
// extern	Timer_Class eventTimer;
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   1134c:	4c30      	ldr	r4, [pc, #192]	; (11410 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xc8>)
   1134e:	f104 0518 	add.w	r5, r4, #24
   11352:	4930      	ldr	r1, [pc, #192]	; (11414 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xcc>)
   11354:	4628      	mov	r0, r5
   11356:	4f30      	ldr	r7, [pc, #192]	; (11418 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xd0>)
   11358:	47b8      	blx	r7
   1135a:	4e30      	ldr	r6, [pc, #192]	; (1141c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xd4>)
   1135c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 11454 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x10c>
   11360:	4632      	mov	r2, r6
   11362:	4641      	mov	r1, r8
   11364:	4628      	mov	r0, r5
   11366:	4d2e      	ldr	r5, [pc, #184]	; (11420 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xd8>)
   11368:	47a8      	blx	r5
static Timer_Class eventTimer(&TIMER_EVENT);
   1136a:	f104 0938 	add.w	r9, r4, #56	; 0x38
   1136e:	492d      	ldr	r1, [pc, #180]	; (11424 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xdc>)
   11370:	4648      	mov	r0, r9
   11372:	47b8      	blx	r7
   11374:	4632      	mov	r2, r6
   11376:	4641      	mov	r1, r8
   11378:	4648      	mov	r0, r9
   1137a:	47a8      	blx	r5
static Timer_Class hvacTimer(&TIMER_HVAC);
   1137c:	f104 0958 	add.w	r9, r4, #88	; 0x58
   11380:	4929      	ldr	r1, [pc, #164]	; (11428 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xe0>)
   11382:	4648      	mov	r0, r9
   11384:	47b8      	blx	r7
   11386:	4632      	mov	r2, r6
   11388:	4641      	mov	r1, r8
   1138a:	4648      	mov	r0, r9
   1138c:	47a8      	blx	r5
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   1138e:	f104 0978 	add.w	r9, r4, #120	; 0x78
   11392:	4926      	ldr	r1, [pc, #152]	; (1142c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xe4>)
   11394:	4648      	mov	r0, r9
   11396:	47b8      	blx	r7
   11398:	4632      	mov	r2, r6
   1139a:	4641      	mov	r1, r8
   1139c:	4648      	mov	r0, r9
   1139e:	47a8      	blx	r5
static Timer_Class arincTimer(&TIMER_ARINC);
   113a0:	f104 0998 	add.w	r9, r4, #152	; 0x98
   113a4:	4922      	ldr	r1, [pc, #136]	; (11430 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xe8>)
   113a6:	4648      	mov	r0, r9
   113a8:	47b8      	blx	r7
   113aa:	4632      	mov	r2, r6
   113ac:	4641      	mov	r1, r8
   113ae:	4648      	mov	r0, r9
   113b0:	47a8      	blx	r5
static Timer_Class usbTerminalTimer(&TIMER_USB);
   113b2:	f104 09b8 	add.w	r9, r4, #184	; 0xb8
   113b6:	491f      	ldr	r1, [pc, #124]	; (11434 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xec>)
   113b8:	4648      	mov	r0, r9
   113ba:	47b8      	blx	r7
   113bc:	4632      	mov	r2, r6
   113be:	4641      	mov	r1, r8
   113c0:	4648      	mov	r0, r9
   113c2:	47a8      	blx	r5
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   113c4:	f104 09d8 	add.w	r9, r4, #216	; 0xd8
   113c8:	491b      	ldr	r1, [pc, #108]	; (11438 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xf0>)
   113ca:	4648      	mov	r0, r9
   113cc:	47b8      	blx	r7
   113ce:	4632      	mov	r2, r6
   113d0:	4641      	mov	r1, r8
   113d2:	4648      	mov	r0, r9
   113d4:	47a8      	blx	r5
static Timer_Class canoTimer(&TIMER_CCU);
   113d6:	f104 09f8 	add.w	r9, r4, #248	; 0xf8
   113da:	4918      	ldr	r1, [pc, #96]	; (1143c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xf4>)
   113dc:	4648      	mov	r0, r9
   113de:	47b8      	blx	r7
   113e0:	4632      	mov	r2, r6
   113e2:	4641      	mov	r1, r8
   113e4:	4648      	mov	r0, r9
   113e6:	47a8      	blx	r5
static LT_SPI	ltSPI;
   113e8:	1d27      	adds	r7, r4, #4
   113ea:	4638      	mov	r0, r7
   113ec:	4b14      	ldr	r3, [pc, #80]	; (11440 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xf8>)
   113ee:	4798      	blx	r3
   113f0:	4632      	mov	r2, r6
   113f2:	4914      	ldr	r1, [pc, #80]	; (11444 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0xfc>)
   113f4:	4638      	mov	r0, r7
   113f6:	47a8      	blx	r5
TemperatureSensors_Class temperatures(&SPI_TEMP);
   113f8:	f504 748c 	add.w	r4, r4, #280	; 0x118
   113fc:	4912      	ldr	r1, [pc, #72]	; (11448 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x100>)
   113fe:	4620      	mov	r0, r4
   11400:	4b12      	ldr	r3, [pc, #72]	; (1144c <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x104>)
   11402:	4798      	blx	r3
   11404:	4632      	mov	r2, r6
   11406:	4912      	ldr	r1, [pc, #72]	; (11450 <_GLOBAL__sub_I__ZN24TemperatureSensors_ClassC2Ev+0x108>)
   11408:	4620      	mov	r0, r4
   1140a:	47a8      	blx	r5
   1140c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11410:	200096ec 	.word	0x200096ec
   11414:	20009da8 	.word	0x20009da8
   11418:	0000dc59 	.word	0x0000dc59
   1141c:	20000000 	.word	0x20000000
   11420:	00013091 	.word	0x00013091
   11424:	20009e3c 	.word	0x20009e3c
   11428:	20009f60 	.word	0x20009f60
   1142c:	20009e5c 	.word	0x20009e5c
   11430:	20009f20 	.word	0x20009f20
   11434:	20009f40 	.word	0x20009f40
   11438:	20009e18 	.word	0x20009e18
   1143c:	20009eb8 	.word	0x20009eb8
   11440:	00012401 	.word	0x00012401
   11444:	00012429 	.word	0x00012429
   11448:	20009de0 	.word	0x20009de0
   1144c:	00011151 	.word	0x00011151
   11450:	000110c5 	.word	0x000110c5
   11454:	0000dc91 	.word	0x0000dc91

00011458 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
   11458:	b580      	push	{r7, lr}
   1145a:	b084      	sub	sp, #16
   1145c:	af00      	add	r7, sp, #0
   1145e:	60f8      	str	r0, [r7, #12]
   11460:	60b9      	str	r1, [r7, #8]
   11462:	4613      	mov	r3, r2
   11464:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   11466:	68fb      	ldr	r3, [r7, #12]
   11468:	2b00      	cmp	r3, #0
   1146a:	d004      	beq.n	11476 <io_write+0x1e>
   1146c:	68bb      	ldr	r3, [r7, #8]
   1146e:	2b00      	cmp	r3, #0
   11470:	d001      	beq.n	11476 <io_write+0x1e>
   11472:	2301      	movs	r3, #1
   11474:	e000      	b.n	11478 <io_write+0x20>
   11476:	2300      	movs	r3, #0
   11478:	f003 0301 	and.w	r3, r3, #1
   1147c:	b2db      	uxtb	r3, r3
   1147e:	2234      	movs	r2, #52	; 0x34
   11480:	4907      	ldr	r1, [pc, #28]	; (114a0 <io_write+0x48>)
   11482:	4618      	mov	r0, r3
   11484:	4b07      	ldr	r3, [pc, #28]	; (114a4 <io_write+0x4c>)
   11486:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
   11488:	68fb      	ldr	r3, [r7, #12]
   1148a:	681b      	ldr	r3, [r3, #0]
   1148c:	88fa      	ldrh	r2, [r7, #6]
   1148e:	68b9      	ldr	r1, [r7, #8]
   11490:	68f8      	ldr	r0, [r7, #12]
   11492:	4798      	blx	r3
   11494:	4603      	mov	r3, r0
}
   11496:	4618      	mov	r0, r3
   11498:	3710      	adds	r7, #16
   1149a:	46bd      	mov	sp, r7
   1149c:	bd80      	pop	{r7, pc}
   1149e:	bf00      	nop
   114a0:	00013ee0 	.word	0x00013ee0
   114a4:	0000405d 	.word	0x0000405d

000114a8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
   114a8:	b580      	push	{r7, lr}
   114aa:	b084      	sub	sp, #16
   114ac:	af00      	add	r7, sp, #0
   114ae:	60f8      	str	r0, [r7, #12]
   114b0:	60b9      	str	r1, [r7, #8]
   114b2:	4613      	mov	r3, r2
   114b4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
   114b6:	68fb      	ldr	r3, [r7, #12]
   114b8:	2b00      	cmp	r3, #0
   114ba:	d004      	beq.n	114c6 <io_read+0x1e>
   114bc:	68bb      	ldr	r3, [r7, #8]
   114be:	2b00      	cmp	r3, #0
   114c0:	d001      	beq.n	114c6 <io_read+0x1e>
   114c2:	2301      	movs	r3, #1
   114c4:	e000      	b.n	114c8 <io_read+0x20>
   114c6:	2300      	movs	r3, #0
   114c8:	f003 0301 	and.w	r3, r3, #1
   114cc:	b2db      	uxtb	r3, r3
   114ce:	223d      	movs	r2, #61	; 0x3d
   114d0:	4907      	ldr	r1, [pc, #28]	; (114f0 <io_read+0x48>)
   114d2:	4618      	mov	r0, r3
   114d4:	4b07      	ldr	r3, [pc, #28]	; (114f4 <io_read+0x4c>)
   114d6:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
   114d8:	68fb      	ldr	r3, [r7, #12]
   114da:	685b      	ldr	r3, [r3, #4]
   114dc:	88fa      	ldrh	r2, [r7, #6]
   114de:	68b9      	ldr	r1, [r7, #8]
   114e0:	68f8      	ldr	r0, [r7, #12]
   114e2:	4798      	blx	r3
   114e4:	4603      	mov	r3, r0
}
   114e6:	4618      	mov	r0, r3
   114e8:	3710      	adds	r7, #16
   114ea:	46bd      	mov	sp, r7
   114ec:	bd80      	pop	{r7, pc}
   114ee:	bf00      	nop
   114f0:	00013ee0 	.word	0x00013ee0
   114f4:	0000405d 	.word	0x0000405d

000114f8 <_ZN22FlapperValveDataStructC1Ev>:


#include "FlapperValveDataStruct.h"

// default constructor
FlapperValveDataStruct::FlapperValveDataStruct()
   114f8:	b480      	push	{r7}
   114fa:	b083      	sub	sp, #12
   114fc:	af00      	add	r7, sp, #0
   114fe:	6078      	str	r0, [r7, #4]
{
} //FlapperValveDataStruct
   11500:	687b      	ldr	r3, [r7, #4]
   11502:	4618      	mov	r0, r3
   11504:	370c      	adds	r7, #12
   11506:	46bd      	mov	sp, r7
   11508:	bc80      	pop	{r7}
   1150a:	4770      	bx	lr

0001150c <_ZN22FlapperValveDataStructD1Ev>:

// default destructor
FlapperValveDataStruct::~FlapperValveDataStruct()
   1150c:	b480      	push	{r7}
   1150e:	b083      	sub	sp, #12
   11510:	af00      	add	r7, sp, #0
   11512:	6078      	str	r0, [r7, #4]
{
} //~FlapperValveDataStruct
   11514:	687b      	ldr	r3, [r7, #4]
   11516:	4618      	mov	r0, r3
   11518:	370c      	adds	r7, #12
   1151a:	46bd      	mov	sp, r7
   1151c:	bc80      	pop	{r7}
   1151e:	4770      	bx	lr

00011520 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh>:

void FlapperValveDataStruct::FillCabinSwitch(uint8_t v){
   11520:	b480      	push	{r7}
   11522:	b085      	sub	sp, #20
   11524:	af00      	add	r7, sp, #0
   11526:	6078      	str	r0, [r7, #4]
   11528:	460b      	mov	r3, r1
   1152a:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 2; ii++)
   1152c:	2300      	movs	r3, #0
   1152e:	73fb      	strb	r3, [r7, #15]
   11530:	7bfb      	ldrb	r3, [r7, #15]
   11532:	2b01      	cmp	r3, #1
   11534:	dc13      	bgt.n	1155e <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x3e>
	{
		controlStatus.cabin[ii]=(v&(0x80>>ii))>0;
   11536:	7bfb      	ldrb	r3, [r7, #15]
   11538:	78f9      	ldrb	r1, [r7, #3]
   1153a:	7bfa      	ldrb	r2, [r7, #15]
   1153c:	2080      	movs	r0, #128	; 0x80
   1153e:	fa40 f202 	asr.w	r2, r0, r2
   11542:	400a      	ands	r2, r1
   11544:	2a00      	cmp	r2, #0
   11546:	bfcc      	ite	gt
   11548:	2201      	movgt	r2, #1
   1154a:	2200      	movle	r2, #0
   1154c:	b2d1      	uxtb	r1, r2
   1154e:	687a      	ldr	r2, [r7, #4]
   11550:	4413      	add	r3, r2
   11552:	460a      	mov	r2, r1
   11554:	751a      	strb	r2, [r3, #20]
	for (uint8_t ii = 0; ii < 2; ii++)
   11556:	7bfb      	ldrb	r3, [r7, #15]
   11558:	3301      	adds	r3, #1
   1155a:	73fb      	strb	r3, [r7, #15]
   1155c:	e7e8      	b.n	11530 <_ZN22FlapperValveDataStruct15FillCabinSwitchEh+0x10>
	}
}
   1155e:	bf00      	nop
   11560:	3714      	adds	r7, #20
   11562:	46bd      	mov	sp, r7
   11564:	bc80      	pop	{r7}
   11566:	4770      	bx	lr

00011568 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh>:
void FlapperValveDataStruct::FillLimitSwitch(uint8_t v){
   11568:	b480      	push	{r7}
   1156a:	b085      	sub	sp, #20
   1156c:	af00      	add	r7, sp, #0
   1156e:	6078      	str	r0, [r7, #4]
   11570:	460b      	mov	r3, r1
   11572:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < 3; ii++)
   11574:	2300      	movs	r3, #0
   11576:	73fb      	strb	r3, [r7, #15]
   11578:	7bfb      	ldrb	r3, [r7, #15]
   1157a:	2b02      	cmp	r3, #2
   1157c:	dc15      	bgt.n	115aa <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x42>
	{
		controlStatus.limit[2-ii]=(v&(0x20>>ii))>0;
   1157e:	7bfb      	ldrb	r3, [r7, #15]
   11580:	f1c3 0302 	rsb	r3, r3, #2
   11584:	78f9      	ldrb	r1, [r7, #3]
   11586:	7bfa      	ldrb	r2, [r7, #15]
   11588:	2020      	movs	r0, #32
   1158a:	fa40 f202 	asr.w	r2, r0, r2
   1158e:	400a      	ands	r2, r1
   11590:	2a00      	cmp	r2, #0
   11592:	bfcc      	ite	gt
   11594:	2201      	movgt	r2, #1
   11596:	2200      	movle	r2, #0
   11598:	b2d1      	uxtb	r1, r2
   1159a:	687a      	ldr	r2, [r7, #4]
   1159c:	4413      	add	r3, r2
   1159e:	460a      	mov	r2, r1
   115a0:	759a      	strb	r2, [r3, #22]
	for (uint8_t ii = 0; ii < 3; ii++)
   115a2:	7bfb      	ldrb	r3, [r7, #15]
   115a4:	3301      	adds	r3, #1
   115a6:	73fb      	strb	r3, [r7, #15]
   115a8:	e7e6      	b.n	11578 <_ZN22FlapperValveDataStruct15FillLimitSwitchEh+0x10>
	}
}
   115aa:	bf00      	nop
   115ac:	3714      	adds	r7, #20
   115ae:	46bd      	mov	sp, r7
   115b0:	bc80      	pop	{r7}
   115b2:	4770      	bx	lr

000115b4 <_ZN22FlapperValveDataStruct15FillInputStatusEh>:
InputStatus FlapperValveDataStruct::FillInputStatus(uint8_t v){
   115b4:	b580      	push	{r7, lr}
   115b6:	b084      	sub	sp, #16
   115b8:	af00      	add	r7, sp, #0
   115ba:	60f8      	str	r0, [r7, #12]
   115bc:	60b9      	str	r1, [r7, #8]
   115be:	4613      	mov	r3, r2
   115c0:	71fb      	strb	r3, [r7, #7]
	FillCabinSwitch(v);
   115c2:	79fb      	ldrb	r3, [r7, #7]
   115c4:	4619      	mov	r1, r3
   115c6:	68b8      	ldr	r0, [r7, #8]
   115c8:	4b0d      	ldr	r3, [pc, #52]	; (11600 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x4c>)
   115ca:	4798      	blx	r3
	FillLimitSwitch(v);
   115cc:	79fb      	ldrb	r3, [r7, #7]
   115ce:	4619      	mov	r1, r3
   115d0:	68b8      	ldr	r0, [r7, #8]
   115d2:	4b0c      	ldr	r3, [pc, #48]	; (11604 <_ZN22FlapperValveDataStruct15FillInputStatusEh+0x50>)
   115d4:	4798      	blx	r3
	controlStatus.niAlcFVMotorFault=((v&(0x01))>0);
   115d6:	79fb      	ldrb	r3, [r7, #7]
   115d8:	f003 0301 	and.w	r3, r3, #1
   115dc:	2b00      	cmp	r3, #0
   115de:	bfcc      	ite	gt
   115e0:	2301      	movgt	r3, #1
   115e2:	2300      	movle	r3, #0
   115e4:	b2da      	uxtb	r2, r3
   115e6:	68bb      	ldr	r3, [r7, #8]
   115e8:	765a      	strb	r2, [r3, #25]
	return controlStatus;
   115ea:	68fa      	ldr	r2, [r7, #12]
   115ec:	68bb      	ldr	r3, [r7, #8]
   115ee:	3314      	adds	r3, #20
   115f0:	6819      	ldr	r1, [r3, #0]
   115f2:	6011      	str	r1, [r2, #0]
   115f4:	889b      	ldrh	r3, [r3, #4]
   115f6:	8093      	strh	r3, [r2, #4]
}
   115f8:	68f8      	ldr	r0, [r7, #12]
   115fa:	3710      	adds	r7, #16
   115fc:	46bd      	mov	sp, r7
   115fe:	bd80      	pop	{r7, pc}
   11600:	00011521 	.word	0x00011521
   11604:	00011569 	.word	0x00011569

00011608 <_ZN22FlapperValveDataStruct18FillControlOutputsEh>:


ControlStatus FlapperValveDataStruct::FillControlOutputs(uint8_t v){
   11608:	b480      	push	{r7}
   1160a:	b085      	sub	sp, #20
   1160c:	af00      	add	r7, sp, #0
   1160e:	60f8      	str	r0, [r7, #12]
   11610:	60b9      	str	r1, [r7, #8]
   11612:	4613      	mov	r3, r2
   11614:	71fb      	strb	r3, [r7, #7]
	
	if ( (STANDALONE > 0 )&(!controlStatus.cabin[1]))
   11616:	68bb      	ldr	r3, [r7, #8]
   11618:	7d5b      	ldrb	r3, [r3, #21]
   1161a:	f083 0301 	eor.w	r3, r3, #1
   1161e:	b2db      	uxtb	r3, r3
   11620:	f003 0301 	and.w	r3, r3, #1
   11624:	2b00      	cmp	r3, #0
   11626:	d004      	beq.n	11632 <_ZN22FlapperValveDataStruct18FillControlOutputsEh+0x2a>
	{
		controlOutputs.iAlcFvStandAloneOut=controlStatus.cabin[0];
   11628:	68bb      	ldr	r3, [r7, #8]
   1162a:	7d1a      	ldrb	r2, [r3, #20]
   1162c:	68bb      	ldr	r3, [r7, #8]
   1162e:	769a      	strb	r2, [r3, #26]
   11630:	e009      	b.n	11646 <_ZN22FlapperValveDataStruct18FillControlOutputsEh+0x3e>
	} 
	else
	{
		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
   11632:	79fb      	ldrb	r3, [r7, #7]
   11634:	f003 0380 	and.w	r3, r3, #128	; 0x80
   11638:	2b00      	cmp	r3, #0
   1163a:	bfcc      	ite	gt
   1163c:	2301      	movgt	r3, #1
   1163e:	2300      	movle	r3, #0
   11640:	b2da      	uxtb	r2, r3
   11642:	68bb      	ldr	r3, [r7, #8]
   11644:	769a      	strb	r2, [r3, #26]

// 	#else
// 		controlOutputs.iAlcFvStandAloneOut=((v&(0x80))>0);
// 	#endif
	
	controlOutputs.niAlcFvClearMoveFault=((v&(0x40))>0);
   11646:	79fb      	ldrb	r3, [r7, #7]
   11648:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1164c:	2b00      	cmp	r3, #0
   1164e:	bfcc      	ite	gt
   11650:	2301      	movgt	r3, #1
   11652:	2300      	movle	r3, #0
   11654:	b2da      	uxtb	r2, r3
   11656:	68bb      	ldr	r3, [r7, #8]
   11658:	76da      	strb	r2, [r3, #27]
	controlOutputs.iFvMotorPhaset=((v&(0x20))>0);
   1165a:	79fb      	ldrb	r3, [r7, #7]
   1165c:	f003 0320 	and.w	r3, r3, #32
   11660:	2b00      	cmp	r3, #0
   11662:	bfcc      	ite	gt
   11664:	2301      	movgt	r3, #1
   11666:	2300      	movle	r3, #0
   11668:	b2da      	uxtb	r2, r3
   1166a:	68bb      	ldr	r3, [r7, #8]
   1166c:	775a      	strb	r2, [r3, #29]
	controlOutputs.iAlcFvMoveTimer=((v&(0x10))>0);
   1166e:	79fb      	ldrb	r3, [r7, #7]
   11670:	f003 0310 	and.w	r3, r3, #16
   11674:	2b00      	cmp	r3, #0
   11676:	bfcc      	ite	gt
   11678:	2301      	movgt	r3, #1
   1167a:	2300      	movle	r3, #0
   1167c:	b2da      	uxtb	r2, r3
   1167e:	68bb      	ldr	r3, [r7, #8]
   11680:	771a      	strb	r2, [r3, #28]
	controlOutputs.iAlcFvPositionChanged=((v&(0x08))>0);
   11682:	79fb      	ldrb	r3, [r7, #7]
   11684:	f003 0308 	and.w	r3, r3, #8
   11688:	2b00      	cmp	r3, #0
   1168a:	bfcc      	ite	gt
   1168c:	2301      	movgt	r3, #1
   1168e:	2300      	movle	r3, #0
   11690:	b2da      	uxtb	r2, r3
   11692:	68bb      	ldr	r3, [r7, #8]
   11694:	779a      	strb	r2, [r3, #30]
	controlOutputs.iAlcFvInvalidPosition=((v&(0x04))>0);
   11696:	79fb      	ldrb	r3, [r7, #7]
   11698:	f003 0304 	and.w	r3, r3, #4
   1169c:	2b00      	cmp	r3, #0
   1169e:	bfcc      	ite	gt
   116a0:	2301      	movgt	r3, #1
   116a2:	2300      	movle	r3, #0
   116a4:	b2da      	uxtb	r2, r3
   116a6:	68bb      	ldr	r3, [r7, #8]
   116a8:	77da      	strb	r2, [r3, #31]
	controlOutputs.iAlcFvFailsToMove=((v&(0x2))>0);
   116aa:	79fb      	ldrb	r3, [r7, #7]
   116ac:	f003 0302 	and.w	r3, r3, #2
   116b0:	2b00      	cmp	r3, #0
   116b2:	bfcc      	ite	gt
   116b4:	2301      	movgt	r3, #1
   116b6:	2300      	movle	r3, #0
   116b8:	b2da      	uxtb	r2, r3
   116ba:	68bb      	ldr	r3, [r7, #8]
   116bc:	f883 2020 	strb.w	r2, [r3, #32]
	controlOutputs.niAlcFvMotorEnable=((v&(0x1))>0);
   116c0:	79fb      	ldrb	r3, [r7, #7]
   116c2:	f003 0301 	and.w	r3, r3, #1
   116c6:	2b00      	cmp	r3, #0
   116c8:	bfcc      	ite	gt
   116ca:	2301      	movgt	r3, #1
   116cc:	2300      	movle	r3, #0
   116ce:	b2da      	uxtb	r2, r3
   116d0:	68bb      	ldr	r3, [r7, #8]
   116d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	return controlOutputs;
   116d6:	68fa      	ldr	r2, [r7, #12]
   116d8:	68bb      	ldr	r3, [r7, #8]
   116da:	331a      	adds	r3, #26
   116dc:	6819      	ldr	r1, [r3, #0]
   116de:	685b      	ldr	r3, [r3, #4]
   116e0:	6011      	str	r1, [r2, #0]
   116e2:	6053      	str	r3, [r2, #4]
   116e4:	68f8      	ldr	r0, [r7, #12]
   116e6:	3714      	adds	r7, #20
   116e8:	46bd      	mov	sp, r7
   116ea:	bc80      	pop	{r7}
   116ec:	4770      	bx	lr

000116ee <_ZN14MCP23008_ClassC1Ev>:
*/


#include "MCP23008_Class.h"

MCP23008_Class::MCP23008_Class()
   116ee:	b480      	push	{r7}
   116f0:	b083      	sub	sp, #12
   116f2:	af00      	add	r7, sp, #0
   116f4:	6078      	str	r0, [r7, #4]
{
	
} //MCP23008_Class
   116f6:	687b      	ldr	r3, [r7, #4]
   116f8:	4618      	mov	r0, r3
   116fa:	370c      	adds	r7, #12
   116fc:	46bd      	mov	sp, r7
   116fe:	bc80      	pop	{r7}
   11700:	4770      	bx	lr

00011702 <_ZN14MCP23008_ClassD1Ev>:
{
	i2cAddress=add;
} //MCP23008_Class

// default destructor
MCP23008_Class::~MCP23008_Class()
   11702:	b480      	push	{r7}
   11704:	b083      	sub	sp, #12
   11706:	af00      	add	r7, sp, #0
   11708:	6078      	str	r0, [r7, #4]
{
} //~MCP23008_Class
   1170a:	687b      	ldr	r3, [r7, #4]
   1170c:	4618      	mov	r0, r3
   1170e:	370c      	adds	r7, #12
   11710:	46bd      	mov	sp, r7
   11712:	bc80      	pop	{r7}
   11714:	4770      	bx	lr

00011716 <_ZN14MCP23008_Class4InitEhP14I2C_Sync_Class>:
// 	//i2cClass=i2c;
// 	isOK=i2cClass->isOK;
// 	return isOK;
// 	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
// }
bool MCP23008_Class::Init(uint8_t addr,I2C_Sync_Class *i2c){
   11716:	b480      	push	{r7}
   11718:	b085      	sub	sp, #20
   1171a:	af00      	add	r7, sp, #0
   1171c:	60f8      	str	r0, [r7, #12]
   1171e:	460b      	mov	r3, r1
   11720:	607a      	str	r2, [r7, #4]
   11722:	72fb      	strb	r3, [r7, #11]
	txBuffer=i2c->txBuffer;
   11724:	687b      	ldr	r3, [r7, #4]
   11726:	681a      	ldr	r2, [r3, #0]
   11728:	68fb      	ldr	r3, [r7, #12]
   1172a:	611a      	str	r2, [r3, #16]
	rxBuffer=i2c->rxBuffer;
   1172c:	687b      	ldr	r3, [r7, #4]
   1172e:	685a      	ldr	r2, [r3, #4]
   11730:	68fb      	ldr	r3, [r7, #12]
   11732:	615a      	str	r2, [r3, #20]
	i2cAddress=addr;
   11734:	68fb      	ldr	r3, [r7, #12]
   11736:	7afa      	ldrb	r2, [r7, #11]
   11738:	721a      	strb	r2, [r3, #8]
	i2cClass=i2c;
   1173a:	68fb      	ldr	r3, [r7, #12]
   1173c:	687a      	ldr	r2, [r7, #4]
   1173e:	60da      	str	r2, [r3, #12]
	isOK=i2cClass->isOK;
   11740:	68fb      	ldr	r3, [r7, #12]
   11742:	68db      	ldr	r3, [r3, #12]
   11744:	7a5b      	ldrb	r3, [r3, #9]
   11746:	b2da      	uxtb	r2, r3
   11748:	68fb      	ldr	r3, [r7, #12]
   1174a:	719a      	strb	r2, [r3, #6]
	return isOK;
   1174c:	68fb      	ldr	r3, [r7, #12]
   1174e:	799b      	ldrb	r3, [r3, #6]
   11750:	b2db      	uxtb	r3, r3
	//ext_irq_register(PIN_PA05,FUNC_PTR(MCPHadChanged));
}
   11752:	4618      	mov	r0, r3
   11754:	3714      	adds	r7, #20
   11756:	46bd      	mov	sp, r7
   11758:	bc80      	pop	{r7}
   1175a:	4770      	bx	lr

0001175c <_ZN14MCP23008_Class9bitForPinEh>:
	return	SelfTest();	
}
/**
 * Bit number associated to a give Pin
 */
uint8_t MCP23008_Class::bitForPin(uint8_t pin){
   1175c:	b480      	push	{r7}
   1175e:	b083      	sub	sp, #12
   11760:	af00      	add	r7, sp, #0
   11762:	6078      	str	r0, [r7, #4]
   11764:	460b      	mov	r3, r1
   11766:	70fb      	strb	r3, [r7, #3]
    return pin%8;
   11768:	78fb      	ldrb	r3, [r7, #3]
   1176a:	f003 0307 	and.w	r3, r3, #7
   1176e:	b2db      	uxtb	r3, r3
}
   11770:	4618      	mov	r0, r3
   11772:	370c      	adds	r7, #12
   11774:	46bd      	mov	sp, r7
   11776:	bc80      	pop	{r7}
   11778:	4770      	bx	lr

0001177a <_ZN14MCP23008_Class9regForPinEhhh>:


/**
 * Register address, port dependent, for a given PIN
 */
uint8_t MCP23008_Class::regForPin(uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
   1177a:	b480      	push	{r7}
   1177c:	b083      	sub	sp, #12
   1177e:	af00      	add	r7, sp, #0
   11780:	6078      	str	r0, [r7, #4]
   11782:	4608      	mov	r0, r1
   11784:	4611      	mov	r1, r2
   11786:	461a      	mov	r2, r3
   11788:	4603      	mov	r3, r0
   1178a:	70fb      	strb	r3, [r7, #3]
   1178c:	460b      	mov	r3, r1
   1178e:	70bb      	strb	r3, [r7, #2]
   11790:	4613      	mov	r3, r2
   11792:	707b      	strb	r3, [r7, #1]
    return (pin<8)?portAaddr:portBaddr;
   11794:	78fb      	ldrb	r3, [r7, #3]
   11796:	2b07      	cmp	r3, #7
   11798:	dc01      	bgt.n	1179e <_ZN14MCP23008_Class9regForPinEhhh+0x24>
   1179a:	78bb      	ldrb	r3, [r7, #2]
   1179c:	e000      	b.n	117a0 <_ZN14MCP23008_Class9regForPinEhhh+0x26>
   1179e:	787b      	ldrb	r3, [r7, #1]
}
   117a0:	4618      	mov	r0, r3
   117a2:	370c      	adds	r7, #12
   117a4:	46bd      	mov	sp, r7
   117a6:	bc80      	pop	{r7}
   117a8:	4770      	bx	lr
	...

000117ac <_ZN14MCP23008_Class12readRegisterEh>:


/**
 * Reads a given register
 */
uint8_t MCP23008_Class::readRegister(uint8_t addr){
   117ac:	b580      	push	{r7, lr}
   117ae:	b082      	sub	sp, #8
   117b0:	af00      	add	r7, sp, #0
   117b2:	6078      	str	r0, [r7, #4]
   117b4:	460b      	mov	r3, r1
   117b6:	70fb      	strb	r3, [r7, #3]
	// read the current GPINTEN
	//i2ca.read_cmd(addr,&value);
	i2cClass->SetSlaveAddress(i2cAddress);
   117b8:	687b      	ldr	r3, [r7, #4]
   117ba:	68da      	ldr	r2, [r3, #12]
   117bc:	687b      	ldr	r3, [r7, #4]
   117be:	7a1b      	ldrb	r3, [r3, #8]
   117c0:	4619      	mov	r1, r3
   117c2:	4610      	mov	r0, r2
   117c4:	4b0a      	ldr	r3, [pc, #40]	; (117f0 <_ZN14MCP23008_Class12readRegisterEh+0x44>)
   117c6:	4798      	blx	r3
	i2cClass->Write(&addr,1);
   117c8:	687b      	ldr	r3, [r7, #4]
   117ca:	68db      	ldr	r3, [r3, #12]
   117cc:	1cf9      	adds	r1, r7, #3
   117ce:	2201      	movs	r2, #1
   117d0:	4618      	mov	r0, r3
   117d2:	4b08      	ldr	r3, [pc, #32]	; (117f4 <_ZN14MCP23008_Class12readRegisterEh+0x48>)
   117d4:	4798      	blx	r3

	i2cClass->Read(&registerValue,1);
   117d6:	687b      	ldr	r3, [r7, #4]
   117d8:	68db      	ldr	r3, [r3, #12]
   117da:	6879      	ldr	r1, [r7, #4]
   117dc:	2201      	movs	r2, #1
   117de:	4618      	mov	r0, r3
   117e0:	4b05      	ldr	r3, [pc, #20]	; (117f8 <_ZN14MCP23008_Class12readRegisterEh+0x4c>)
   117e2:	4798      	blx	r3

	return registerValue;
   117e4:	687b      	ldr	r3, [r7, #4]
   117e6:	781b      	ldrb	r3, [r3, #0]
}
   117e8:	4618      	mov	r0, r3
   117ea:	3708      	adds	r7, #8
   117ec:	46bd      	mov	sp, r7
   117ee:	bd80      	pop	{r7, pc}
   117f0:	0000dbd5 	.word	0x0000dbd5
   117f4:	0000dc01 	.word	0x0000dc01
   117f8:	0000dc2d 	.word	0x0000dc2d

000117fc <_ZN14MCP23008_Class16ReadGPIORegisterEv>:
uint8_t MCP23008_Class::ReadGPIORegister(uint8_t add){
	i2cClass->SetSlaveAddress(i2cAddress);
	return readRegister(MCP23008_GPIOA);
}
uint8_t MCP23008_Class::ReadGPIORegister(void){
   117fc:	b580      	push	{r7, lr}
   117fe:	b084      	sub	sp, #16
   11800:	af00      	add	r7, sp, #0
   11802:	6078      	str	r0, [r7, #4]
	uint8_t r;
	//i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   11804:	687b      	ldr	r3, [r7, #4]
   11806:	68da      	ldr	r2, [r3, #12]
   11808:	687b      	ldr	r3, [r7, #4]
   1180a:	7a1b      	ldrb	r3, [r3, #8]
   1180c:	4619      	mov	r1, r3
   1180e:	4610      	mov	r0, r2
   11810:	4b06      	ldr	r3, [pc, #24]	; (1182c <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x30>)
   11812:	4798      	blx	r3
	r= readRegister(MCP23008_GPIOA);
   11814:	2109      	movs	r1, #9
   11816:	6878      	ldr	r0, [r7, #4]
   11818:	4b05      	ldr	r3, [pc, #20]	; (11830 <_ZN14MCP23008_Class16ReadGPIORegisterEv+0x34>)
   1181a:	4798      	blx	r3
   1181c:	4603      	mov	r3, r0
   1181e:	73fb      	strb	r3, [r7, #15]
	//i2cClass->Irq_Enable();
	return	r;
   11820:	7bfb      	ldrb	r3, [r7, #15]
}
   11822:	4618      	mov	r0, r3
   11824:	3710      	adds	r7, #16
   11826:	46bd      	mov	sp, r7
   11828:	bd80      	pop	{r7, pc}
   1182a:	bf00      	nop
   1182c:	0000dbd5 	.word	0x0000dbd5
   11830:	000117ad 	.word	0x000117ad

00011834 <_ZN14MCP23008_Class13writeRegisterEhh>:


/**
 * Writes a given register
 */
uint32_t MCP23008_Class::writeRegister(uint8_t addr, uint8_t value){
   11834:	b580      	push	{r7, lr}
   11836:	b084      	sub	sp, #16
   11838:	af00      	add	r7, sp, #0
   1183a:	6078      	str	r0, [r7, #4]
   1183c:	460b      	mov	r3, r1
   1183e:	70fb      	strb	r3, [r7, #3]
   11840:	4613      	mov	r3, r2
   11842:	70bb      	strb	r3, [r7, #2]
	// Write the register
	i2cClass->SetSlaveAddress(i2cAddress);
   11844:	687b      	ldr	r3, [r7, #4]
   11846:	68da      	ldr	r2, [r3, #12]
   11848:	687b      	ldr	r3, [r7, #4]
   1184a:	7a1b      	ldrb	r3, [r3, #8]
   1184c:	4619      	mov	r1, r3
   1184e:	4610      	mov	r0, r2
   11850:	4b09      	ldr	r3, [pc, #36]	; (11878 <_ZN14MCP23008_Class13writeRegisterEhh+0x44>)
   11852:	4798      	blx	r3
	uint8_t array[2];
	array[0]=addr;
   11854:	78fb      	ldrb	r3, [r7, #3]
   11856:	733b      	strb	r3, [r7, #12]
	array[1]=value;
   11858:	78bb      	ldrb	r3, [r7, #2]
   1185a:	737b      	strb	r3, [r7, #13]
	return	i2cClass->Write(array,2);
   1185c:	687b      	ldr	r3, [r7, #4]
   1185e:	68db      	ldr	r3, [r3, #12]
   11860:	f107 010c 	add.w	r1, r7, #12
   11864:	2202      	movs	r2, #2
   11866:	4618      	mov	r0, r3
   11868:	4b04      	ldr	r3, [pc, #16]	; (1187c <_ZN14MCP23008_Class13writeRegisterEhh+0x48>)
   1186a:	4798      	blx	r3
   1186c:	4603      	mov	r3, r0
	//while(!(i2cClass->txReady));
}
   1186e:	4618      	mov	r0, r3
   11870:	3710      	adds	r7, #16
   11872:	46bd      	mov	sp, r7
   11874:	bd80      	pop	{r7, pc}
   11876:	bf00      	nop
   11878:	0000dbd5 	.word	0x0000dbd5
   1187c:	0000dc01 	.word	0x0000dc01

00011880 <_ZN14MCP23008_Class17WriteGPIORegisterEh>:
uint8_t MCP23008_Class::WriteGPIORegister(uint8_t v){
   11880:	b580      	push	{r7, lr}
   11882:	b082      	sub	sp, #8
   11884:	af00      	add	r7, sp, #0
   11886:	6078      	str	r0, [r7, #4]
   11888:	460b      	mov	r3, r1
   1188a:	70fb      	strb	r3, [r7, #3]
	
//	i2cClass->Irq_Disable();
	i2cClass->SetSlaveAddress(i2cAddress);
   1188c:	687b      	ldr	r3, [r7, #4]
   1188e:	68da      	ldr	r2, [r3, #12]
   11890:	687b      	ldr	r3, [r7, #4]
   11892:	7a1b      	ldrb	r3, [r3, #8]
   11894:	4619      	mov	r1, r3
   11896:	4610      	mov	r0, r2
   11898:	4b06      	ldr	r3, [pc, #24]	; (118b4 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x34>)
   1189a:	4798      	blx	r3
	writeRegister(MCP23008_GPIOA,v);
   1189c:	78fb      	ldrb	r3, [r7, #3]
   1189e:	461a      	mov	r2, r3
   118a0:	2109      	movs	r1, #9
   118a2:	6878      	ldr	r0, [r7, #4]
   118a4:	4b04      	ldr	r3, [pc, #16]	; (118b8 <_ZN14MCP23008_Class17WriteGPIORegisterEh+0x38>)
   118a6:	4798      	blx	r3
	//i2cClass->Irq_Enable();
	return v;
   118a8:	78fb      	ldrb	r3, [r7, #3]
}
   118aa:	4618      	mov	r0, r3
   118ac:	3708      	adds	r7, #8
   118ae:	46bd      	mov	sp, r7
   118b0:	bd80      	pop	{r7, pc}
   118b2:	bf00      	nop
   118b4:	0000dbd5 	.word	0x0000dbd5
   118b8:	00011835 	.word	0x00011835

000118bc <_ZN14MCP23008_Class12SetPortInputEv>:


void	MCP23008_Class::SetPortInput(void){
   118bc:	b580      	push	{r7, lr}
   118be:	b084      	sub	sp, #16
   118c0:	af00      	add	r7, sp, #0
   118c2:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   118c4:	2300      	movs	r3, #0
   118c6:	73fb      	strb	r3, [r7, #15]
   118c8:	7bfb      	ldrb	r3, [r7, #15]
   118ca:	2b07      	cmp	r3, #7
   118cc:	dc0f      	bgt.n	118ee <_ZN14MCP23008_Class12SetPortInputEv+0x32>
	{
		pinMode(i,MCP23008_INPUT);
   118ce:	7bfb      	ldrb	r3, [r7, #15]
   118d0:	2201      	movs	r2, #1
   118d2:	4619      	mov	r1, r3
   118d4:	6878      	ldr	r0, [r7, #4]
   118d6:	4b08      	ldr	r3, [pc, #32]	; (118f8 <_ZN14MCP23008_Class12SetPortInputEv+0x3c>)
   118d8:	4798      	blx	r3
		pullUp(i,MCP23008_HIGH);
   118da:	7bfb      	ldrb	r3, [r7, #15]
   118dc:	2201      	movs	r2, #1
   118de:	4619      	mov	r1, r3
   118e0:	6878      	ldr	r0, [r7, #4]
   118e2:	4b06      	ldr	r3, [pc, #24]	; (118fc <_ZN14MCP23008_Class12SetPortInputEv+0x40>)
   118e4:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   118e6:	7bfb      	ldrb	r3, [r7, #15]
   118e8:	3301      	adds	r3, #1
   118ea:	73fb      	strb	r3, [r7, #15]
   118ec:	e7ec      	b.n	118c8 <_ZN14MCP23008_Class12SetPortInputEv+0xc>
	}
}
   118ee:	bf00      	nop
   118f0:	3710      	adds	r7, #16
   118f2:	46bd      	mov	sp, r7
   118f4:	bd80      	pop	{r7, pc}
   118f6:	bf00      	nop
   118f8:	00011a35 	.word	0x00011a35
   118fc:	00011b19 	.word	0x00011b19

00011900 <_ZN14MCP23008_Class12SetPortInputEh>:
void	MCP23008_Class::SetPortInput(uint8_t inputs){
   11900:	b580      	push	{r7, lr}
   11902:	b084      	sub	sp, #16
   11904:	af00      	add	r7, sp, #0
   11906:	6078      	str	r0, [r7, #4]
   11908:	460b      	mov	r3, r1
   1190a:	70fb      	strb	r3, [r7, #3]
	if (inputs>0)
   1190c:	78fb      	ldrb	r3, [r7, #3]
   1190e:	2b00      	cmp	r3, #0
   11910:	dd23      	ble.n	1195a <_ZN14MCP23008_Class12SetPortInputEh+0x5a>
	{
		for (uint8_t i=0;i<8;i++)
   11912:	2300      	movs	r3, #0
   11914:	73fb      	strb	r3, [r7, #15]
   11916:	7bfb      	ldrb	r3, [r7, #15]
   11918:	2b07      	cmp	r3, #7
   1191a:	dc21      	bgt.n	11960 <_ZN14MCP23008_Class12SetPortInputEh+0x60>
		{
			if (inputs&(0x01<<i))
   1191c:	78fa      	ldrb	r2, [r7, #3]
   1191e:	7bfb      	ldrb	r3, [r7, #15]
   11920:	fa42 f303 	asr.w	r3, r2, r3
   11924:	f003 0301 	and.w	r3, r3, #1
   11928:	2b00      	cmp	r3, #0
   1192a:	d00c      	beq.n	11946 <_ZN14MCP23008_Class12SetPortInputEh+0x46>
			{
				pinMode(i,MCP23008_INPUT);
   1192c:	7bfb      	ldrb	r3, [r7, #15]
   1192e:	2201      	movs	r2, #1
   11930:	4619      	mov	r1, r3
   11932:	6878      	ldr	r0, [r7, #4]
   11934:	4b0c      	ldr	r3, [pc, #48]	; (11968 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   11936:	4798      	blx	r3
				pullUp(i,MCP23008_HIGH);
   11938:	7bfb      	ldrb	r3, [r7, #15]
   1193a:	2201      	movs	r2, #1
   1193c:	4619      	mov	r1, r3
   1193e:	6878      	ldr	r0, [r7, #4]
   11940:	4b0a      	ldr	r3, [pc, #40]	; (1196c <_ZN14MCP23008_Class12SetPortInputEh+0x6c>)
   11942:	4798      	blx	r3
   11944:	e005      	b.n	11952 <_ZN14MCP23008_Class12SetPortInputEh+0x52>
			}else{
				pinMode(i,MCP23008_OUTPUT);
   11946:	7bfb      	ldrb	r3, [r7, #15]
   11948:	2200      	movs	r2, #0
   1194a:	4619      	mov	r1, r3
   1194c:	6878      	ldr	r0, [r7, #4]
   1194e:	4b06      	ldr	r3, [pc, #24]	; (11968 <_ZN14MCP23008_Class12SetPortInputEh+0x68>)
   11950:	4798      	blx	r3
		for (uint8_t i=0;i<8;i++)
   11952:	7bfb      	ldrb	r3, [r7, #15]
   11954:	3301      	adds	r3, #1
   11956:	73fb      	strb	r3, [r7, #15]
   11958:	e7dd      	b.n	11916 <_ZN14MCP23008_Class12SetPortInputEh+0x16>

		}
	}
	else
	{
		SetPortOutput();
   1195a:	6878      	ldr	r0, [r7, #4]
   1195c:	4b04      	ldr	r3, [pc, #16]	; (11970 <_ZN14MCP23008_Class12SetPortInputEh+0x70>)
   1195e:	4798      	blx	r3
	}
	
}
   11960:	bf00      	nop
   11962:	3710      	adds	r7, #16
   11964:	46bd      	mov	sp, r7
   11966:	bd80      	pop	{r7, pc}
   11968:	00011a35 	.word	0x00011a35
   1196c:	00011b19 	.word	0x00011b19
   11970:	00011975 	.word	0x00011975

00011974 <_ZN14MCP23008_Class13SetPortOutputEv>:
void	MCP23008_Class::SetPortOutput(void){
   11974:	b580      	push	{r7, lr}
   11976:	b084      	sub	sp, #16
   11978:	af00      	add	r7, sp, #0
   1197a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<8;i++)
   1197c:	2300      	movs	r3, #0
   1197e:	73fb      	strb	r3, [r7, #15]
   11980:	7bfb      	ldrb	r3, [r7, #15]
   11982:	2b07      	cmp	r3, #7
   11984:	dc09      	bgt.n	1199a <_ZN14MCP23008_Class13SetPortOutputEv+0x26>
	{
		pinMode(i,MCP23008_OUTPUT);
   11986:	7bfb      	ldrb	r3, [r7, #15]
   11988:	2200      	movs	r2, #0
   1198a:	4619      	mov	r1, r3
   1198c:	6878      	ldr	r0, [r7, #4]
   1198e:	4b05      	ldr	r3, [pc, #20]	; (119a4 <_ZN14MCP23008_Class13SetPortOutputEv+0x30>)
   11990:	4798      	blx	r3
	for (uint8_t i=0;i<8;i++)
   11992:	7bfb      	ldrb	r3, [r7, #15]
   11994:	3301      	adds	r3, #1
   11996:	73fb      	strb	r3, [r7, #15]
   11998:	e7f2      	b.n	11980 <_ZN14MCP23008_Class13SetPortOutputEv+0xc>
	}
}
   1199a:	bf00      	nop
   1199c:	3710      	adds	r7, #16
   1199e:	46bd      	mov	sp, r7
   119a0:	bd80      	pop	{r7, pc}
   119a2:	bf00      	nop
   119a4:	00011a35 	.word	0x00011a35

000119a8 <_ZN14MCP23008_Class17updateRegisterBitEhhhh>:
/**
 * Helper to update a single bit of an A/B register.
 * - Reads the current register value
 * - Writes the new register value
 */
void MCP23008_Class::updateRegisterBit(uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
   119a8:	b580      	push	{r7, lr}
   119aa:	b084      	sub	sp, #16
   119ac:	af00      	add	r7, sp, #0
   119ae:	6078      	str	r0, [r7, #4]
   119b0:	4608      	mov	r0, r1
   119b2:	4611      	mov	r1, r2
   119b4:	461a      	mov	r2, r3
   119b6:	4603      	mov	r3, r0
   119b8:	70fb      	strb	r3, [r7, #3]
   119ba:	460b      	mov	r3, r1
   119bc:	70bb      	strb	r3, [r7, #2]
   119be:	4613      	mov	r3, r2
   119c0:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr=portAaddr;
   119c2:	787b      	ldrb	r3, [r7, #1]
   119c4:	73fb      	strb	r3, [r7, #15]
	uint8_t bit=bitForPin(pin);
   119c6:	78fb      	ldrb	r3, [r7, #3]
   119c8:	4619      	mov	r1, r3
   119ca:	6878      	ldr	r0, [r7, #4]
   119cc:	4b16      	ldr	r3, [pc, #88]	; (11a28 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x80>)
   119ce:	4798      	blx	r3
   119d0:	4603      	mov	r3, r0
   119d2:	737b      	strb	r3, [r7, #13]
	regValue = readRegister(regAddr);
   119d4:	7bfb      	ldrb	r3, [r7, #15]
   119d6:	4619      	mov	r1, r3
   119d8:	6878      	ldr	r0, [r7, #4]
   119da:	4b14      	ldr	r3, [pc, #80]	; (11a2c <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x84>)
   119dc:	4798      	blx	r3
   119de:	4603      	mov	r3, r0
   119e0:	73bb      	strb	r3, [r7, #14]

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
   119e2:	78bb      	ldrb	r3, [r7, #2]
   119e4:	2b00      	cmp	r3, #0
   119e6:	d009      	beq.n	119fc <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x54>
   119e8:	7bba      	ldrb	r2, [r7, #14]
   119ea:	7b7b      	ldrb	r3, [r7, #13]
   119ec:	4619      	mov	r1, r3
   119ee:	2301      	movs	r3, #1
   119f0:	408b      	lsls	r3, r1
   119f2:	b2db      	uxtb	r3, r3
   119f4:	4313      	orrs	r3, r2
   119f6:	b2db      	uxtb	r3, r3
   119f8:	73bb      	strb	r3, [r7, #14]
   119fa:	e00a      	b.n	11a12 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x6a>
   119fc:	7bba      	ldrb	r2, [r7, #14]
   119fe:	7b7b      	ldrb	r3, [r7, #13]
   11a00:	4619      	mov	r1, r3
   11a02:	2301      	movs	r3, #1
   11a04:	408b      	lsls	r3, r1
   11a06:	b2db      	uxtb	r3, r3
   11a08:	43db      	mvns	r3, r3
   11a0a:	b2db      	uxtb	r3, r3
   11a0c:	4013      	ands	r3, r2
   11a0e:	b2db      	uxtb	r3, r3
   11a10:	73bb      	strb	r3, [r7, #14]

	writeRegister(regAddr,regValue);
   11a12:	7bba      	ldrb	r2, [r7, #14]
   11a14:	7bfb      	ldrb	r3, [r7, #15]
   11a16:	4619      	mov	r1, r3
   11a18:	6878      	ldr	r0, [r7, #4]
   11a1a:	4b05      	ldr	r3, [pc, #20]	; (11a30 <_ZN14MCP23008_Class17updateRegisterBitEhhhh+0x88>)
   11a1c:	4798      	blx	r3
}
   11a1e:	bf00      	nop
   11a20:	3710      	adds	r7, #16
   11a22:	46bd      	mov	sp, r7
   11a24:	bd80      	pop	{r7, pc}
   11a26:	bf00      	nop
   11a28:	0001175d 	.word	0x0001175d
   11a2c:	000117ad 	.word	0x000117ad
   11a30:	00011835 	.word	0x00011835

00011a34 <_ZN14MCP23008_Class7pinModeEhh>:


/**
 * Sets the pin mode to either INPUT or OUTPUT
 */
void MCP23008_Class::pinMode(uint8_t p, uint8_t d) {
   11a34:	b590      	push	{r4, r7, lr}
   11a36:	b085      	sub	sp, #20
   11a38:	af02      	add	r7, sp, #8
   11a3a:	6078      	str	r0, [r7, #4]
   11a3c:	460b      	mov	r3, r1
   11a3e:	70fb      	strb	r3, [r7, #3]
   11a40:	4613      	mov	r3, r2
   11a42:	70bb      	strb	r3, [r7, #2]
    updateRegisterBit(p,(d==MCP23008_INPUT),MCP23008_IODIRA,MCP23008_IODIRA);
   11a44:	78bb      	ldrb	r3, [r7, #2]
   11a46:	2b01      	cmp	r3, #1
   11a48:	bf0c      	ite	eq
   11a4a:	2301      	moveq	r3, #1
   11a4c:	2300      	movne	r3, #0
   11a4e:	b2db      	uxtb	r3, r3
   11a50:	461a      	mov	r2, r3
   11a52:	78f9      	ldrb	r1, [r7, #3]
   11a54:	2300      	movs	r3, #0
   11a56:	9300      	str	r3, [sp, #0]
   11a58:	2300      	movs	r3, #0
   11a5a:	6878      	ldr	r0, [r7, #4]
   11a5c:	4c02      	ldr	r4, [pc, #8]	; (11a68 <_ZN14MCP23008_Class7pinModeEhh+0x34>)
   11a5e:	47a0      	blx	r4
}
   11a60:	bf00      	nop
   11a62:	370c      	adds	r7, #12
   11a64:	46bd      	mov	sp, r7
   11a66:	bd90      	pop	{r4, r7, pc}
   11a68:	000119a9 	.word	0x000119a9

00011a6c <_ZN14MCP23008_Class10WriteDigitEhb>:

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
	writeRegister(regAddr,gpio);
}
bool MCP23008_Class::WriteDigit(uint8_t pin, bool b) {
   11a6c:	b590      	push	{r4, r7, lr}
   11a6e:	b085      	sub	sp, #20
   11a70:	af00      	add	r7, sp, #0
   11a72:	6078      	str	r0, [r7, #4]
   11a74:	460b      	mov	r3, r1
   11a76:	70fb      	strb	r3, [r7, #3]
   11a78:	4613      	mov	r3, r2
   11a7a:	70bb      	strb	r3, [r7, #2]
	uint8_t gpio;
	uint8_t bit=bitForPin(pin);
   11a7c:	78fb      	ldrb	r3, [r7, #3]
   11a7e:	4619      	mov	r1, r3
   11a80:	6878      	ldr	r0, [r7, #4]
   11a82:	4b21      	ldr	r3, [pc, #132]	; (11b08 <_ZN14MCP23008_Class10WriteDigitEhb+0x9c>)
   11a84:	4798      	blx	r3
   11a86:	4603      	mov	r3, r0
   11a88:	737b      	strb	r3, [r7, #13]


	// read the current GPIO output latches
	uint8_t regAddr=regForPin(pin,MCP23008_OLATA,MCP23008_OLATA);
   11a8a:	78f9      	ldrb	r1, [r7, #3]
   11a8c:	230a      	movs	r3, #10
   11a8e:	220a      	movs	r2, #10
   11a90:	6878      	ldr	r0, [r7, #4]
   11a92:	4c1e      	ldr	r4, [pc, #120]	; (11b0c <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   11a94:	47a0      	blx	r4
   11a96:	4603      	mov	r3, r0
   11a98:	73fb      	strb	r3, [r7, #15]
	gpio = readRegister(regAddr);
   11a9a:	7bfb      	ldrb	r3, [r7, #15]
   11a9c:	4619      	mov	r1, r3
   11a9e:	6878      	ldr	r0, [r7, #4]
   11aa0:	4b1b      	ldr	r3, [pc, #108]	; (11b10 <_ZN14MCP23008_Class10WriteDigitEhb+0xa4>)
   11aa2:	4798      	blx	r3
   11aa4:	4603      	mov	r3, r0
   11aa6:	73bb      	strb	r3, [r7, #14]

	// set the pin and direction
	bitWrite(gpio,bit,b);
   11aa8:	78bb      	ldrb	r3, [r7, #2]
   11aaa:	2b00      	cmp	r3, #0
   11aac:	d009      	beq.n	11ac2 <_ZN14MCP23008_Class10WriteDigitEhb+0x56>
   11aae:	7bba      	ldrb	r2, [r7, #14]
   11ab0:	7b7b      	ldrb	r3, [r7, #13]
   11ab2:	4619      	mov	r1, r3
   11ab4:	2301      	movs	r3, #1
   11ab6:	408b      	lsls	r3, r1
   11ab8:	b2db      	uxtb	r3, r3
   11aba:	4313      	orrs	r3, r2
   11abc:	b2db      	uxtb	r3, r3
   11abe:	73bb      	strb	r3, [r7, #14]
   11ac0:	e00a      	b.n	11ad8 <_ZN14MCP23008_Class10WriteDigitEhb+0x6c>
   11ac2:	7bba      	ldrb	r2, [r7, #14]
   11ac4:	7b7b      	ldrb	r3, [r7, #13]
   11ac6:	4619      	mov	r1, r3
   11ac8:	2301      	movs	r3, #1
   11aca:	408b      	lsls	r3, r1
   11acc:	b2db      	uxtb	r3, r3
   11ace:	43db      	mvns	r3, r3
   11ad0:	b2db      	uxtb	r3, r3
   11ad2:	4013      	ands	r3, r2
   11ad4:	b2db      	uxtb	r3, r3
   11ad6:	73bb      	strb	r3, [r7, #14]

	// write the new GPIO
	regAddr=regForPin(pin,MCP23008_GPIOA,MCP23008_GPIOA);
   11ad8:	78f9      	ldrb	r1, [r7, #3]
   11ada:	2309      	movs	r3, #9
   11adc:	2209      	movs	r2, #9
   11ade:	6878      	ldr	r0, [r7, #4]
   11ae0:	4c0a      	ldr	r4, [pc, #40]	; (11b0c <_ZN14MCP23008_Class10WriteDigitEhb+0xa0>)
   11ae2:	47a0      	blx	r4
   11ae4:	4603      	mov	r3, r0
   11ae6:	73fb      	strb	r3, [r7, #15]
	return	writeRegister(regAddr,gpio)==0;
   11ae8:	7bba      	ldrb	r2, [r7, #14]
   11aea:	7bfb      	ldrb	r3, [r7, #15]
   11aec:	4619      	mov	r1, r3
   11aee:	6878      	ldr	r0, [r7, #4]
   11af0:	4b08      	ldr	r3, [pc, #32]	; (11b14 <_ZN14MCP23008_Class10WriteDigitEhb+0xa8>)
   11af2:	4798      	blx	r3
   11af4:	4603      	mov	r3, r0
   11af6:	2b00      	cmp	r3, #0
   11af8:	bf0c      	ite	eq
   11afa:	2301      	moveq	r3, #1
   11afc:	2300      	movne	r3, #0
   11afe:	b2db      	uxtb	r3, r3
}
   11b00:	4618      	mov	r0, r3
   11b02:	3714      	adds	r7, #20
   11b04:	46bd      	mov	sp, r7
   11b06:	bd90      	pop	{r4, r7, pc}
   11b08:	0001175d 	.word	0x0001175d
   11b0c:	0001177b 	.word	0x0001177b
   11b10:	000117ad 	.word	0x000117ad
   11b14:	00011835 	.word	0x00011835

00011b18 <_ZN14MCP23008_Class6pullUpEhh>:

void MCP23008_Class::pullUp(uint8_t p, uint8_t d) {
   11b18:	b590      	push	{r4, r7, lr}
   11b1a:	b085      	sub	sp, #20
   11b1c:	af02      	add	r7, sp, #8
   11b1e:	6078      	str	r0, [r7, #4]
   11b20:	460b      	mov	r3, r1
   11b22:	70fb      	strb	r3, [r7, #3]
   11b24:	4613      	mov	r3, r2
   11b26:	70bb      	strb	r3, [r7, #2]
	updateRegisterBit(p,d,MCP23008_GPPUA,MCP23008_GPPUA);
   11b28:	78ba      	ldrb	r2, [r7, #2]
   11b2a:	78f9      	ldrb	r1, [r7, #3]
   11b2c:	2306      	movs	r3, #6
   11b2e:	9300      	str	r3, [sp, #0]
   11b30:	2306      	movs	r3, #6
   11b32:	6878      	ldr	r0, [r7, #4]
   11b34:	4c02      	ldr	r4, [pc, #8]	; (11b40 <_ZN14MCP23008_Class6pullUpEhh+0x28>)
   11b36:	47a0      	blx	r4
}
   11b38:	bf00      	nop
   11b3a:	370c      	adds	r7, #12
   11b3c:	46bd      	mov	sp, r7
   11b3e:	bd90      	pop	{r4, r7, pc}
   11b40:	000119a9 	.word	0x000119a9

00011b44 <_ZL15MeassureTimeoutPK10timer_task>:
#include "LTC2983_Class.h"
#include "CDC_Class.h"


LTC2983_Class	*ptrLTCClass;
static void	MeassureTimeout(const struct timer_task *const timer_task){
   11b44:	b480      	push	{r7}
   11b46:	b083      	sub	sp, #12
   11b48:	af00      	add	r7, sp, #0
   11b4a:	6078      	str	r0, [r7, #4]
	ptrLTCClass->meassureTimeout=true;
   11b4c:	4b04      	ldr	r3, [pc, #16]	; (11b60 <_ZL15MeassureTimeoutPK10timer_task+0x1c>)
   11b4e:	681b      	ldr	r3, [r3, #0]
   11b50:	2201      	movs	r2, #1
   11b52:	709a      	strb	r2, [r3, #2]
	asm("nop");
   11b54:	bf00      	nop
}
   11b56:	bf00      	nop
   11b58:	370c      	adds	r7, #12
   11b5a:	46bd      	mov	sp, r7
   11b5c:	bc80      	pop	{r7}
   11b5e:	4770      	bx	lr
   11b60:	20009afc 	.word	0x20009afc

00011b64 <_ZN13LTC2983_ClassC1Ev>:
static void ConverterReady(void){
	ptrLTCClass->ready=true;
}

// default constructor
LTC2983_Class::LTC2983_Class()
   11b64:	b480      	push	{r7}
   11b66:	b083      	sub	sp, #12
   11b68:	af00      	add	r7, sp, #0
   11b6a:	6078      	str	r0, [r7, #4]
{
} //LTC2983_Class
   11b6c:	687b      	ldr	r3, [r7, #4]
   11b6e:	4618      	mov	r0, r3
   11b70:	370c      	adds	r7, #12
   11b72:	46bd      	mov	sp, r7
   11b74:	bc80      	pop	{r7}
   11b76:	4770      	bx	lr

00011b78 <_ZN13LTC2983_ClassD1Ev>:

// default destructor
LTC2983_Class::~LTC2983_Class()
   11b78:	b480      	push	{r7}
   11b7a:	b083      	sub	sp, #12
   11b7c:	af00      	add	r7, sp, #0
   11b7e:	6078      	str	r0, [r7, #4]
{
} //~LTC2983_Class
   11b80:	687b      	ldr	r3, [r7, #4]
   11b82:	4618      	mov	r0, r3
   11b84:	370c      	adds	r7, #12
   11b86:	46bd      	mov	sp, r7
   11b88:	bc80      	pop	{r7}
   11b8a:	4770      	bx	lr

00011b8c <_ZN13LTC2983_Class4InitEmP6LT_SPI>:
	ready=true;	
	
	return	SelfTest();
}

bool LTC2983_Class::Init(uint32_t csPin,LT_SPI* spiLite){
   11b8c:	b580      	push	{r7, lr}
   11b8e:	b084      	sub	sp, #16
   11b90:	af00      	add	r7, sp, #0
   11b92:	60f8      	str	r0, [r7, #12]
   11b94:	60b9      	str	r1, [r7, #8]
   11b96:	607a      	str	r2, [r7, #4]
	
	ptrLTCClass=this;
   11b98:	4a1c      	ldr	r2, [pc, #112]	; (11c0c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x80>)
   11b9a:	68fb      	ldr	r3, [r7, #12]
   11b9c:	6013      	str	r3, [r2, #0]
	chipSelect=csPin;
   11b9e:	68fb      	ldr	r3, [r7, #12]
   11ba0:	68ba      	ldr	r2, [r7, #8]
   11ba2:	659a      	str	r2, [r3, #88]	; 0x58
	spiLT=spiLite;
   11ba4:	68fb      	ldr	r3, [r7, #12]
   11ba6:	687a      	ldr	r2, [r7, #4]
   11ba8:	621a      	str	r2, [r3, #32]
	rx=spiLT->rxLiteBuffer;
   11baa:	68fb      	ldr	r3, [r7, #12]
   11bac:	6a1b      	ldr	r3, [r3, #32]
   11bae:	68da      	ldr	r2, [r3, #12]
   11bb0:	68fb      	ldr	r3, [r7, #12]
   11bb2:	62da      	str	r2, [r3, #44]	; 0x2c
	tx=spiLT->txLiteBuffer;
   11bb4:	68fb      	ldr	r3, [r7, #12]
   11bb6:	6a1b      	ldr	r3, [r3, #32]
   11bb8:	689a      	ldr	r2, [r3, #8]
   11bba:	68fb      	ldr	r3, [r7, #12]
   11bbc:	629a      	str	r2, [r3, #40]	; 0x28
	auxTimer=&hvacTimer;
   11bbe:	68fb      	ldr	r3, [r7, #12]
   11bc0:	4a13      	ldr	r2, [pc, #76]	; (11c10 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x84>)
   11bc2:	631a      	str	r2, [r3, #48]	; 0x30
	activeChannels[0]=4;
   11bc4:	68fb      	ldr	r3, [r7, #12]
   11bc6:	2204      	movs	r2, #4
   11bc8:	70da      	strb	r2, [r3, #3]
	activeChannels[1]=9;
   11bca:	68fb      	ldr	r3, [r7, #12]
   11bcc:	2209      	movs	r2, #9
   11bce:	711a      	strb	r2, [r3, #4]
	activeChannels[2]=14;
   11bd0:	68fb      	ldr	r3, [r7, #12]
   11bd2:	220e      	movs	r2, #14
   11bd4:	715a      	strb	r2, [r3, #5]
	activeChannels[3]=19;
   11bd6:	68fb      	ldr	r3, [r7, #12]
   11bd8:	2213      	movs	r2, #19
   11bda:	719a      	strb	r2, [r3, #6]
	delay_ms(200);
   11bdc:	20c8      	movs	r0, #200	; 0xc8
   11bde:	4b0d      	ldr	r3, [pc, #52]	; (11c14 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x88>)
   11be0:	4798      	blx	r3
	temperatureTimer.Init();
   11be2:	480d      	ldr	r0, [pc, #52]	; (11c18 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x8c>)
   11be4:	4b0d      	ldr	r3, [pc, #52]	; (11c1c <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x90>)
   11be6:	4798      	blx	r3
	configure_channels();
   11be8:	68f8      	ldr	r0, [r7, #12]
   11bea:	4b0d      	ldr	r3, [pc, #52]	; (11c20 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x94>)
   11bec:	4798      	blx	r3
	configure_global_parameters();
   11bee:	68f8      	ldr	r0, [r7, #12]
   11bf0:	4b0c      	ldr	r3, [pc, #48]	; (11c24 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x98>)
   11bf2:	4798      	blx	r3
	//while(!IsConverterDone());
	ready=true;
   11bf4:	68fb      	ldr	r3, [r7, #12]
   11bf6:	2201      	movs	r2, #1
   11bf8:	701a      	strb	r2, [r3, #0]
	
	return	SelfTest();
   11bfa:	68f8      	ldr	r0, [r7, #12]
   11bfc:	4b0a      	ldr	r3, [pc, #40]	; (11c28 <_ZN13LTC2983_Class4InitEmP6LT_SPI+0x9c>)
   11bfe:	4798      	blx	r3
   11c00:	4603      	mov	r3, r0
}
   11c02:	4618      	mov	r0, r3
   11c04:	3710      	adds	r7, #16
   11c06:	46bd      	mov	sp, r7
   11c08:	bd80      	pop	{r7, pc}
   11c0a:	bf00      	nop
   11c0c:	20009afc 	.word	0x20009afc
   11c10:	20009a3c 	.word	0x20009a3c
   11c14:	00002a21 	.word	0x00002a21
   11c18:	200099fc 	.word	0x200099fc
   11c1c:	0000dd45 	.word	0x0000dd45
   11c20:	00012035 	.word	0x00012035
   11c24:	000120ed 	.word	0x000120ed
   11c28:	00012125 	.word	0x00012125

00011c2c <_ZN13LTC2983_Class14assign_channelEmhm>:

// ***********************
// Program the part
// ***********************
void LTC2983_Class::assign_channel(uint32_t chip_select, uint8_t channel_number, uint32_t channel_assignment_data)
{
   11c2c:	b590      	push	{r4, r7, lr}
   11c2e:	b089      	sub	sp, #36	; 0x24
   11c30:	af02      	add	r7, sp, #8
   11c32:	60f8      	str	r0, [r7, #12]
   11c34:	60b9      	str	r1, [r7, #8]
   11c36:	603b      	str	r3, [r7, #0]
   11c38:	4613      	mov	r3, r2
   11c3a:	71fb      	strb	r3, [r7, #7]
	uint16_t start_address = get_start_address(CH_ADDRESS_BASE, channel_number);
   11c3c:	79fb      	ldrb	r3, [r7, #7]
   11c3e:	461a      	mov	r2, r3
   11c40:	f44f 7100 	mov.w	r1, #512	; 0x200
   11c44:	68f8      	ldr	r0, [r7, #12]
   11c46:	4b0b      	ldr	r3, [pc, #44]	; (11c74 <_ZN13LTC2983_Class14assign_channelEmhm+0x48>)
   11c48:	4798      	blx	r3
   11c4a:	4603      	mov	r3, r0
   11c4c:	82fb      	strh	r3, [r7, #22]
	transfer_four_bytes(chip_select, WRITE_TO_RAM, start_address, channel_assignment_data);
   11c4e:	8afa      	ldrh	r2, [r7, #22]
   11c50:	683b      	ldr	r3, [r7, #0]
   11c52:	9300      	str	r3, [sp, #0]
   11c54:	4613      	mov	r3, r2
   11c56:	2202      	movs	r2, #2
   11c58:	68b9      	ldr	r1, [r7, #8]
   11c5a:	68f8      	ldr	r0, [r7, #12]
   11c5c:	4c06      	ldr	r4, [pc, #24]	; (11c78 <_ZN13LTC2983_Class14assign_channelEmhm+0x4c>)
   11c5e:	47a0      	blx	r4
	print_config_channel(chip_select,channel_number,start_address);
   11c60:	8afb      	ldrh	r3, [r7, #22]
   11c62:	79fa      	ldrb	r2, [r7, #7]
   11c64:	68b9      	ldr	r1, [r7, #8]
   11c66:	68f8      	ldr	r0, [r7, #12]
   11c68:	4c04      	ldr	r4, [pc, #16]	; (11c7c <_ZN13LTC2983_Class14assign_channelEmhm+0x50>)
   11c6a:	47a0      	blx	r4
}
   11c6c:	bf00      	nop
   11c6e:	371c      	adds	r7, #28
   11c70:	46bd      	mov	sp, r7
   11c72:	bd90      	pop	{r4, r7, pc}
   11c74:	00012009 	.word	0x00012009
   11c78:	00011ec9 	.word	0x00011ec9
   11c7c:	00011ccd 	.word	0x00011ccd

00011c80 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh>:
	channelOnProcess=channel_number;
	wait_for_process_to_finish(chip_select);
}

void LTC2983_Class::ConvertAsyncChannelIndex( uint8_t channel_index)
{
   11c80:	b590      	push	{r4, r7, lr}
   11c82:	b087      	sub	sp, #28
   11c84:	af02      	add	r7, sp, #8
   11c86:	6078      	str	r0, [r7, #4]
   11c88:	460b      	mov	r3, r1
   11c8a:	70fb      	strb	r3, [r7, #3]
	// Start conversion
	uint8_t channel_number=activeChannels[channel_index];
   11c8c:	78fb      	ldrb	r3, [r7, #3]
   11c8e:	687a      	ldr	r2, [r7, #4]
   11c90:	4413      	add	r3, r2
   11c92:	78db      	ldrb	r3, [r3, #3]
   11c94:	73fb      	strb	r3, [r7, #15]
	conversionFinished=0;
   11c96:	687b      	ldr	r3, [r7, #4]
   11c98:	2200      	movs	r2, #0
   11c9a:	705a      	strb	r2, [r3, #1]
	ready=false;
   11c9c:	687b      	ldr	r3, [r7, #4]
   11c9e:	2200      	movs	r2, #0
   11ca0:	701a      	strb	r2, [r3, #0]
	transfer_byte(chipSelect, WRITE_TO_RAM, COMMAND_STATUS_REGISTER, CONVERSION_CONTROL_BYTE | channel_number);
   11ca2:	687b      	ldr	r3, [r7, #4]
   11ca4:	6d99      	ldr	r1, [r3, #88]	; 0x58
   11ca6:	7bfb      	ldrb	r3, [r7, #15]
   11ca8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11cac:	b2db      	uxtb	r3, r3
   11cae:	9300      	str	r3, [sp, #0]
   11cb0:	2300      	movs	r3, #0
   11cb2:	2202      	movs	r2, #2
   11cb4:	6878      	ldr	r0, [r7, #4]
   11cb6:	4c04      	ldr	r4, [pc, #16]	; (11cc8 <_ZN13LTC2983_Class24ConvertAsyncChannelIndexEh+0x48>)
   11cb8:	47a0      	blx	r4
	channelOnProcess=channel_number;
   11cba:	687b      	ldr	r3, [r7, #4]
   11cbc:	7bfa      	ldrb	r2, [r7, #15]
   11cbe:	721a      	strb	r2, [r3, #8]
	//wait_for_process_to_finish(chip_select);
}
   11cc0:	bf00      	nop
   11cc2:	3714      	adds	r7, #20
   11cc4:	46bd      	mov	sp, r7
   11cc6:	bd90      	pop	{r4, r7, pc}
   11cc8:	00011f99 	.word	0x00011f99

00011ccc <_ZN13LTC2983_Class20print_config_channelEmht>:

// *********************************
// Get results
// *********************************
void LTC2983_Class::print_config_channel(uint32_t chip_select, uint8_t channel_number, uint16_t start_address)
{
   11ccc:	b590      	push	{r4, r7, lr}
   11cce:	b089      	sub	sp, #36	; 0x24
   11cd0:	af02      	add	r7, sp, #8
   11cd2:	60f8      	str	r0, [r7, #12]
   11cd4:	60b9      	str	r1, [r7, #8]
   11cd6:	4611      	mov	r1, r2
   11cd8:	461a      	mov	r2, r3
   11cda:	460b      	mov	r3, r1
   11cdc:	71fb      	strb	r3, [r7, #7]
   11cde:	4613      	mov	r3, r2
   11ce0:	80bb      	strh	r3, [r7, #4]
	uint32_t raw_data;
	raw_data = transfer_four_bytes(chip_select, READ_FROM_RAM, start_address, 0);
   11ce2:	88ba      	ldrh	r2, [r7, #4]
   11ce4:	2300      	movs	r3, #0
   11ce6:	9300      	str	r3, [sp, #0]
   11ce8:	4613      	mov	r3, r2
   11cea:	2203      	movs	r2, #3
   11cec:	68b9      	ldr	r1, [r7, #8]
   11cee:	68f8      	ldr	r0, [r7, #12]
   11cf0:	4c03      	ldr	r4, [pc, #12]	; (11d00 <_ZN13LTC2983_Class20print_config_channelEmht+0x34>)
   11cf2:	47a0      	blx	r4
   11cf4:	6178      	str	r0, [r7, #20]
	// 24 LSB's are conversion result
	
// 	usb<<"register value: ";
// 	usb.println(raw_data,HEX);
	
}
   11cf6:	bf00      	nop
   11cf8:	371c      	adds	r7, #28
   11cfa:	46bd      	mov	sp, r7
   11cfc:	bd90      	pop	{r4, r7, pc}
   11cfe:	bf00      	nop
   11d00:	00011ec9 	.word	0x00011ec9

00011d04 <_ZN13LTC2983_Class22GetSingleChannelResultEhh>:
	fault_data = raw_data >> 24;
	print_fault_data(fault_data);
}

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number, uint8_t channel_output)
{
   11d04:	b590      	push	{r4, r7, lr}
   11d06:	b085      	sub	sp, #20
   11d08:	af02      	add	r7, sp, #8
   11d0a:	6078      	str	r0, [r7, #4]
   11d0c:	460b      	mov	r3, r1
   11d0e:	70fb      	strb	r3, [r7, #3]
   11d10:	4613      	mov	r3, r2
   11d12:	70bb      	strb	r3, [r7, #2]
	start_address = get_start_address(CONVERSION_RESULT_MEMORY_BASE, channel_number);
   11d14:	78fb      	ldrb	r3, [r7, #3]
   11d16:	461a      	mov	r2, r3
   11d18:	2110      	movs	r1, #16
   11d1a:	6878      	ldr	r0, [r7, #4]
   11d1c:	4b17      	ldr	r3, [pc, #92]	; (11d7c <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x78>)
   11d1e:	4798      	blx	r3
   11d20:	4603      	mov	r3, r0
   11d22:	461a      	mov	r2, r3
   11d24:	687b      	ldr	r3, [r7, #4]
   11d26:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	raw_data = transfer_four_bytes(chipSelect, READ_FROM_RAM, start_address, 0);
   11d2a:	687b      	ldr	r3, [r7, #4]
   11d2c:	6d99      	ldr	r1, [r3, #88]	; 0x58
   11d2e:	687b      	ldr	r3, [r7, #4]
   11d30:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   11d34:	2300      	movs	r3, #0
   11d36:	9300      	str	r3, [sp, #0]
   11d38:	4613      	mov	r3, r2
   11d3a:	2203      	movs	r2, #3
   11d3c:	6878      	ldr	r0, [r7, #4]
   11d3e:	4c10      	ldr	r4, [pc, #64]	; (11d80 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x7c>)
   11d40:	47a0      	blx	r4
   11d42:	4602      	mov	r2, r0
   11d44:	687b      	ldr	r3, [r7, #4]
   11d46:	655a      	str	r2, [r3, #84]	; 0x54


	// 24 LSB's are conversion result
	raw_conversion_result = raw_data & 0xFFFFFF;
   11d48:	687b      	ldr	r3, [r7, #4]
   11d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   11d4c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   11d50:	687b      	ldr	r3, [r7, #4]
   11d52:	651a      	str	r2, [r3, #80]	; 0x50
	ConvertResult(raw_conversion_result, channel_number, channel_output);
   11d54:	687b      	ldr	r3, [r7, #4]
   11d56:	6d19      	ldr	r1, [r3, #80]	; 0x50
   11d58:	78bb      	ldrb	r3, [r7, #2]
   11d5a:	78fa      	ldrb	r2, [r7, #3]
   11d5c:	6878      	ldr	r0, [r7, #4]
   11d5e:	4c09      	ldr	r4, [pc, #36]	; (11d84 <_ZN13LTC2983_Class22GetSingleChannelResultEhh+0x80>)
   11d60:	47a0      	blx	r4
	{
		//read_voltage_or_resistance_results(chipSelect, channel_number);
	}

	// 8 MSB's show the fault data
	fault_data = raw_data >> 24;
   11d62:	687b      	ldr	r3, [r7, #4]
   11d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   11d66:	0e1b      	lsrs	r3, r3, #24
   11d68:	b2da      	uxtb	r2, r3
   11d6a:	687b      	ldr	r3, [r7, #4]
   11d6c:	71da      	strb	r2, [r3, #7]
	return scaled_result;
   11d6e:	687b      	ldr	r3, [r7, #4]
   11d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
}
   11d72:	4618      	mov	r0, r3
   11d74:	370c      	adds	r7, #12
   11d76:	46bd      	mov	sp, r7
   11d78:	bd90      	pop	{r4, r7, pc}
   11d7a:	bf00      	nop
   11d7c:	00012009 	.word	0x00012009
   11d80:	00011ec9 	.word	0x00011ec9
   11d84:	00011ddd 	.word	0x00011ddd

00011d88 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh>:

float LTC2983_Class::GetSingleChannelResultIndex( uint8_t channel_index){
   11d88:	b580      	push	{r7, lr}
   11d8a:	b082      	sub	sp, #8
   11d8c:	af00      	add	r7, sp, #0
   11d8e:	6078      	str	r0, [r7, #4]
   11d90:	460b      	mov	r3, r1
   11d92:	70fb      	strb	r3, [r7, #3]
	return GetSingleChannelResult(activeChannels[channel_index]);
   11d94:	78fb      	ldrb	r3, [r7, #3]
   11d96:	687a      	ldr	r2, [r7, #4]
   11d98:	4413      	add	r3, r2
   11d9a:	78db      	ldrb	r3, [r3, #3]
   11d9c:	4619      	mov	r1, r3
   11d9e:	6878      	ldr	r0, [r7, #4]
   11da0:	4b03      	ldr	r3, [pc, #12]	; (11db0 <_ZN13LTC2983_Class27GetSingleChannelResultIndexEh+0x28>)
   11da2:	4798      	blx	r3
   11da4:	4603      	mov	r3, r0
}
   11da6:	4618      	mov	r0, r3
   11da8:	3708      	adds	r7, #8
   11daa:	46bd      	mov	sp, r7
   11dac:	bd80      	pop	{r7, pc}
   11dae:	bf00      	nop
   11db0:	00011db5 	.word	0x00011db5

00011db4 <_ZN13LTC2983_Class22GetSingleChannelResultEh>:

float LTC2983_Class::GetSingleChannelResult( uint8_t channel_number){
   11db4:	b580      	push	{r7, lr}
   11db6:	b082      	sub	sp, #8
   11db8:	af00      	add	r7, sp, #0
   11dba:	6078      	str	r0, [r7, #4]
   11dbc:	460b      	mov	r3, r1
   11dbe:	70fb      	strb	r3, [r7, #3]
	
	return GetSingleChannelResult(channel_number,TEMPERATURE);
   11dc0:	78fb      	ldrb	r3, [r7, #3]
   11dc2:	2202      	movs	r2, #2
   11dc4:	4619      	mov	r1, r3
   11dc6:	6878      	ldr	r0, [r7, #4]
   11dc8:	4b03      	ldr	r3, [pc, #12]	; (11dd8 <_ZN13LTC2983_Class22GetSingleChannelResultEh+0x24>)
   11dca:	4798      	blx	r3
   11dcc:	4603      	mov	r3, r0
}
   11dce:	4618      	mov	r0, r3
   11dd0:	3708      	adds	r7, #8
   11dd2:	46bd      	mov	sp, r7
   11dd4:	bd80      	pop	{r7, pc}
   11dd6:	bf00      	nop
   11dd8:	00011d05 	.word	0x00011d05

00011ddc <_ZN13LTC2983_Class13ConvertResultEmhh>:
// 		usb.println(scaled_result);
	}
	
}
void LTC2983_Class::ConvertResult(uint32_t raw_conversion_result,uint8_t channel_number, uint8_t channel_output)
{
   11ddc:	b580      	push	{r7, lr}
   11dde:	b084      	sub	sp, #16
   11de0:	af00      	add	r7, sp, #0
   11de2:	60f8      	str	r0, [r7, #12]
   11de4:	60b9      	str	r1, [r7, #8]
   11de6:	4611      	mov	r1, r2
   11de8:	461a      	mov	r2, r3
   11dea:	460b      	mov	r3, r1
   11dec:	71fb      	strb	r3, [r7, #7]
   11dee:	4613      	mov	r3, r2
   11df0:	71bb      	strb	r3, [r7, #6]
	signed_data = raw_conversion_result;
   11df2:	68ba      	ldr	r2, [r7, #8]
   11df4:	68fb      	ldr	r3, [r7, #12]
   11df6:	661a      	str	r2, [r3, #96]	; 0x60
	// Convert the 24 LSB's into a signed 32-bit integer
	if(signed_data & 0x800000)
   11df8:	68fb      	ldr	r3, [r7, #12]
   11dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11dfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   11e00:	2b00      	cmp	r3, #0
   11e02:	d006      	beq.n	11e12 <_ZN13LTC2983_Class13ConvertResultEmhh+0x36>
	signed_data = signed_data | 0xFF000000;
   11e04:	68fb      	ldr	r3, [r7, #12]
   11e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   11e0c:	461a      	mov	r2, r3
   11e0e:	68fb      	ldr	r3, [r7, #12]
   11e10:	661a      	str	r2, [r3, #96]	; 0x60

	// Translate and print result
	if (channel_output == TEMPERATURE)
   11e12:	79bb      	ldrb	r3, [r7, #6]
   11e14:	2b02      	cmp	r3, #2
   11e16:	d11d      	bne.n	11e54 <_ZN13LTC2983_Class13ConvertResultEmhh+0x78>
	{
		scaled_result= float(signed_data) / 1024;
   11e18:	68fb      	ldr	r3, [r7, #12]
   11e1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   11e1c:	4b18      	ldr	r3, [pc, #96]	; (11e80 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   11e1e:	4610      	mov	r0, r2
   11e20:	4798      	blx	r3
   11e22:	4602      	mov	r2, r0
   11e24:	4b17      	ldr	r3, [pc, #92]	; (11e84 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   11e26:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
   11e2a:	4610      	mov	r0, r2
   11e2c:	4798      	blx	r3
   11e2e:	4603      	mov	r3, r0
   11e30:	461a      	mov	r2, r3
   11e32:	68fb      	ldr	r3, [r7, #12]
   11e34:	65da      	str	r2, [r3, #92]	; 0x5c
		meassuredValues[GetAtiveChannelNumeration(channel_number)] = scaled_result;
   11e36:	79fb      	ldrb	r3, [r7, #7]
   11e38:	4619      	mov	r1, r3
   11e3a:	68f8      	ldr	r0, [r7, #12]
   11e3c:	4b12      	ldr	r3, [pc, #72]	; (11e88 <_ZN13LTC2983_Class13ConvertResultEmhh+0xac>)
   11e3e:	4798      	blx	r3
   11e40:	4603      	mov	r3, r0
   11e42:	4618      	mov	r0, r3
   11e44:	68fb      	ldr	r3, [r7, #12]
   11e46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   11e48:	68f9      	ldr	r1, [r7, #12]
   11e4a:	1c83      	adds	r3, r0, #2
   11e4c:	009b      	lsls	r3, r3, #2
   11e4e:	440b      	add	r3, r1
   11e50:	605a      	str	r2, [r3, #4]
	{
		scaled_result = float(signed_data) / 2097152;

	}
	
}
   11e52:	e011      	b.n	11e78 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
	else if (channel_output == VOLTAGE)
   11e54:	79bb      	ldrb	r3, [r7, #6]
   11e56:	2b01      	cmp	r3, #1
   11e58:	d10e      	bne.n	11e78 <_ZN13LTC2983_Class13ConvertResultEmhh+0x9c>
		scaled_result = float(signed_data) / 2097152;
   11e5a:	68fb      	ldr	r3, [r7, #12]
   11e5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   11e5e:	4b08      	ldr	r3, [pc, #32]	; (11e80 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa4>)
   11e60:	4610      	mov	r0, r2
   11e62:	4798      	blx	r3
   11e64:	4602      	mov	r2, r0
   11e66:	4b07      	ldr	r3, [pc, #28]	; (11e84 <_ZN13LTC2983_Class13ConvertResultEmhh+0xa8>)
   11e68:	f04f 4194 	mov.w	r1, #1241513984	; 0x4a000000
   11e6c:	4610      	mov	r0, r2
   11e6e:	4798      	blx	r3
   11e70:	4603      	mov	r3, r0
   11e72:	461a      	mov	r2, r3
   11e74:	68fb      	ldr	r3, [r7, #12]
   11e76:	65da      	str	r2, [r3, #92]	; 0x5c
}
   11e78:	bf00      	nop
   11e7a:	3710      	adds	r7, #16
   11e7c:	46bd      	mov	sp, r7
   11e7e:	bd80      	pop	{r7, pc}
   11e80:	00013211 	.word	0x00013211
   11e84:	00013421 	.word	0x00013421
   11e88:	00011e8d 	.word	0x00011e8d

00011e8c <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh>:
uint8_t LTC2983_Class::GetAtiveChannelNumeration(uint8_t chn){
   11e8c:	b480      	push	{r7}
   11e8e:	b085      	sub	sp, #20
   11e90:	af00      	add	r7, sp, #0
   11e92:	6078      	str	r0, [r7, #4]
   11e94:	460b      	mov	r3, r1
   11e96:	70fb      	strb	r3, [r7, #3]
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   11e98:	2300      	movs	r3, #0
   11e9a:	73fb      	strb	r3, [r7, #15]
   11e9c:	7bfb      	ldrb	r3, [r7, #15]
   11e9e:	2b03      	cmp	r3, #3
   11ea0:	dc0c      	bgt.n	11ebc <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x30>
	{
		if (activeChannels[ii]==chn)
   11ea2:	7bfb      	ldrb	r3, [r7, #15]
   11ea4:	687a      	ldr	r2, [r7, #4]
   11ea6:	4413      	add	r3, r2
   11ea8:	78db      	ldrb	r3, [r3, #3]
   11eaa:	78fa      	ldrb	r2, [r7, #3]
   11eac:	429a      	cmp	r2, r3
   11eae:	d101      	bne.n	11eb4 <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x28>
		{
			return ii;
   11eb0:	7bfb      	ldrb	r3, [r7, #15]
   11eb2:	e004      	b.n	11ebe <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x32>
	for (uint8_t ii = 0; ii < NUMBER_TEMPERATURE_CHANNELS; ii++)
   11eb4:	7bfb      	ldrb	r3, [r7, #15]
   11eb6:	3301      	adds	r3, #1
   11eb8:	73fb      	strb	r3, [r7, #15]
   11eba:	e7ef      	b.n	11e9c <_ZN13LTC2983_Class25GetAtiveChannelNumerationEh+0x10>
		}
	}
	return 0;
   11ebc:	2300      	movs	r3, #0
}
   11ebe:	4618      	mov	r0, r3
   11ec0:	3714      	adds	r7, #20
   11ec2:	46bd      	mov	sp, r7
   11ec4:	bc80      	pop	{r7}
   11ec6:	4770      	bx	lr

00011ec8 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm>:
// To write to the RAM, set ram_read_or_write = WRITE_TO_RAM.
// To read from the RAM, set ram_read_or_write = READ_FROM_RAM.
// input_data is the data to send into the RAM. If you are reading from the part, set input_data = 0.

uint32_t LTC2983_Class::transfer_four_bytes(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint32_t input_data)
{
   11ec8:	b590      	push	{r4, r7, lr}
   11eca:	b089      	sub	sp, #36	; 0x24
   11ecc:	af02      	add	r7, sp, #8
   11ece:	60f8      	str	r0, [r7, #12]
   11ed0:	60b9      	str	r1, [r7, #8]
   11ed2:	4611      	mov	r1, r2
   11ed4:	461a      	mov	r2, r3
   11ed6:	460b      	mov	r3, r1
   11ed8:	71fb      	strb	r3, [r7, #7]
   11eda:	4613      	mov	r3, r2
   11edc:	80bb      	strh	r3, [r7, #4]

	uint8_t i,rx2[LTC2983_SPI_BUFFER_SIZE];
	
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   11ede:	2300      	movs	r3, #0
   11ee0:	75fb      	strb	r3, [r7, #23]
   11ee2:	7dfb      	ldrb	r3, [r7, #23]
   11ee4:	2b06      	cmp	r3, #6
   11ee6:	dc09      	bgt.n	11efc <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x34>
	{
		rx[i]=0;
   11ee8:	68fb      	ldr	r3, [r7, #12]
   11eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   11eec:	7dfb      	ldrb	r3, [r7, #23]
   11eee:	4413      	add	r3, r2
   11ef0:	2200      	movs	r2, #0
   11ef2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LTC2983_SPI_BUFFER_SIZE; i++)
   11ef4:	7dfb      	ldrb	r3, [r7, #23]
   11ef6:	3301      	adds	r3, #1
   11ef8:	75fb      	strb	r3, [r7, #23]
   11efa:	e7f2      	b.n	11ee2 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0x1a>
	}

	tx[0] = ram_read_or_write;
   11efc:	68fb      	ldr	r3, [r7, #12]
   11efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11f00:	79fa      	ldrb	r2, [r7, #7]
   11f02:	701a      	strb	r2, [r3, #0]
	tx[1] = highByte(start_address);
   11f04:	68fb      	ldr	r3, [r7, #12]
   11f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11f08:	3301      	adds	r3, #1
   11f0a:	88ba      	ldrh	r2, [r7, #4]
   11f0c:	1212      	asrs	r2, r2, #8
   11f0e:	b2d2      	uxtb	r2, r2
   11f10:	701a      	strb	r2, [r3, #0]
	tx[2] = lowByte(start_address);
   11f12:	68fb      	ldr	r3, [r7, #12]
   11f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11f16:	3302      	adds	r3, #2
   11f18:	88ba      	ldrh	r2, [r7, #4]
   11f1a:	b2d2      	uxtb	r2, r2
   11f1c:	701a      	strb	r2, [r3, #0]
	tx[3] = (uint8_t)(input_data >> 24);
   11f1e:	68fb      	ldr	r3, [r7, #12]
   11f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11f22:	3303      	adds	r3, #3
   11f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11f26:	0e12      	lsrs	r2, r2, #24
   11f28:	b2d2      	uxtb	r2, r2
   11f2a:	701a      	strb	r2, [r3, #0]
	tx[4] = (uint8_t)(input_data >> 16);
   11f2c:	68fb      	ldr	r3, [r7, #12]
   11f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11f30:	3304      	adds	r3, #4
   11f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11f34:	0c12      	lsrs	r2, r2, #16
   11f36:	b2d2      	uxtb	r2, r2
   11f38:	701a      	strb	r2, [r3, #0]
	tx[5] = (uint8_t)(input_data >> 8);
   11f3a:	68fb      	ldr	r3, [r7, #12]
   11f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11f3e:	3305      	adds	r3, #5
   11f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11f42:	0a12      	lsrs	r2, r2, #8
   11f44:	b2d2      	uxtb	r2, r2
   11f46:	701a      	strb	r2, [r3, #0]
	tx[6] = (uint8_t) input_data;
   11f48:	68fb      	ldr	r3, [r7, #12]
   11f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11f4c:	3306      	adds	r3, #6
   11f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11f50:	b2d2      	uxtb	r2, r2
   11f52:	701a      	strb	r2, [r3, #0]

	spiLT->spi_transfer_block(chip_select,tx,rx2, LTC2983_SPI_BUFFER_SIZE);
   11f54:	68fb      	ldr	r3, [r7, #12]
   11f56:	6a18      	ldr	r0, [r3, #32]
   11f58:	68fb      	ldr	r3, [r7, #12]
   11f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11f5c:	f107 0110 	add.w	r1, r7, #16
   11f60:	2307      	movs	r3, #7
   11f62:	9300      	str	r3, [sp, #0]
   11f64:	460b      	mov	r3, r1
   11f66:	68b9      	ldr	r1, [r7, #8]
   11f68:	4c0a      	ldr	r4, [pc, #40]	; (11f94 <_ZN13LTC2983_Class19transfer_four_bytesEmhtm+0xcc>)
   11f6a:	47a0      	blx	r4

	output_data = (uint32_t) rx2[0] << 24 |
   11f6c:	7c3b      	ldrb	r3, [r7, #16]
   11f6e:	061a      	lsls	r2, r3, #24
	(uint32_t) rx2[1] << 16 |
   11f70:	7c7b      	ldrb	r3, [r7, #17]
   11f72:	041b      	lsls	r3, r3, #16
	output_data = (uint32_t) rx2[0] << 24 |
   11f74:	431a      	orrs	r2, r3
	(uint32_t) rx2[2] << 8  |
   11f76:	7cbb      	ldrb	r3, [r7, #18]
   11f78:	021b      	lsls	r3, r3, #8
	(uint32_t) rx2[1] << 16 |
   11f7a:	4313      	orrs	r3, r2
	(uint32_t) rx2[3];
   11f7c:	7cfa      	ldrb	r2, [r7, #19]
	(uint32_t) rx2[2] << 8  |
   11f7e:	431a      	orrs	r2, r3
	output_data = (uint32_t) rx2[0] << 24 |
   11f80:	68fb      	ldr	r3, [r7, #12]
   11f82:	625a      	str	r2, [r3, #36]	; 0x24
	asm("nop");
   11f84:	bf00      	nop
	return output_data;
   11f86:	68fb      	ldr	r3, [r7, #12]
   11f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   11f8a:	4618      	mov	r0, r3
   11f8c:	371c      	adds	r7, #28
   11f8e:	46bd      	mov	sp, r7
   11f90:	bd90      	pop	{r4, r7, pc}
   11f92:	bf00      	nop
   11f94:	000124bd 	.word	0x000124bd

00011f98 <_ZN13LTC2983_Class13transfer_byteEmhth>:


uint8_t LTC2983_Class::transfer_byte(uint32_t chip_select, uint8_t ram_read_or_write, uint16_t start_address, uint8_t input_data)
{
   11f98:	b590      	push	{r4, r7, lr}
   11f9a:	b087      	sub	sp, #28
   11f9c:	af02      	add	r7, sp, #8
   11f9e:	60f8      	str	r0, [r7, #12]
   11fa0:	60b9      	str	r1, [r7, #8]
   11fa2:	4611      	mov	r1, r2
   11fa4:	461a      	mov	r2, r3
   11fa6:	460b      	mov	r3, r1
   11fa8:	71fb      	strb	r3, [r7, #7]
   11faa:	4613      	mov	r3, r2
   11fac:	80bb      	strh	r3, [r7, #4]

	tx[0] = ram_read_or_write;
   11fae:	68fb      	ldr	r3, [r7, #12]
   11fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11fb2:	79fa      	ldrb	r2, [r7, #7]
   11fb4:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t)(start_address >> 8);
   11fb6:	68fb      	ldr	r3, [r7, #12]
   11fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11fba:	3301      	adds	r3, #1
   11fbc:	88ba      	ldrh	r2, [r7, #4]
   11fbe:	1212      	asrs	r2, r2, #8
   11fc0:	b2d2      	uxtb	r2, r2
   11fc2:	701a      	strb	r2, [r3, #0]
	tx[2] = (uint8_t)start_address;
   11fc4:	68fb      	ldr	r3, [r7, #12]
   11fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11fc8:	3302      	adds	r3, #2
   11fca:	88ba      	ldrh	r2, [r7, #4]
   11fcc:	b2d2      	uxtb	r2, r2
   11fce:	701a      	strb	r2, [r3, #0]
	tx[3] = input_data;
   11fd0:	68fb      	ldr	r3, [r7, #12]
   11fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11fd4:	3303      	adds	r3, #3
   11fd6:	f897 2020 	ldrb.w	r2, [r7, #32]
   11fda:	701a      	strb	r2, [r3, #0]
	spiLT->spi_transfer_block(chip_select,tx, rx, 4);
   11fdc:	68fb      	ldr	r3, [r7, #12]
   11fde:	6a18      	ldr	r0, [r3, #32]
   11fe0:	68fb      	ldr	r3, [r7, #12]
   11fe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11fe4:	68fb      	ldr	r3, [r7, #12]
   11fe6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   11fe8:	2304      	movs	r3, #4
   11fea:	9300      	str	r3, [sp, #0]
   11fec:	460b      	mov	r3, r1
   11fee:	68b9      	ldr	r1, [r7, #8]
   11ff0:	4c04      	ldr	r4, [pc, #16]	; (12004 <_ZN13LTC2983_Class13transfer_byteEmhth+0x6c>)
   11ff2:	47a0      	blx	r4
	return rx[0];
   11ff4:	68fb      	ldr	r3, [r7, #12]
   11ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   11ff8:	781b      	ldrb	r3, [r3, #0]
}
   11ffa:	4618      	mov	r0, r3
   11ffc:	3714      	adds	r7, #20
   11ffe:	46bd      	mov	sp, r7
   12000:	bd90      	pop	{r4, r7, pc}
   12002:	bf00      	nop
   12004:	000124bd 	.word	0x000124bd

00012008 <_ZN13LTC2983_Class17get_start_addressEth>:

// ******************************
// Misc support functions
// ******************************
uint16_t LTC2983_Class::get_start_address(uint16_t base_address, uint8_t channel_number)
{
   12008:	b480      	push	{r7}
   1200a:	b083      	sub	sp, #12
   1200c:	af00      	add	r7, sp, #0
   1200e:	6078      	str	r0, [r7, #4]
   12010:	460b      	mov	r3, r1
   12012:	807b      	strh	r3, [r7, #2]
   12014:	4613      	mov	r3, r2
   12016:	707b      	strb	r3, [r7, #1]
	return base_address + 4 * (channel_number-1);
   12018:	787b      	ldrb	r3, [r7, #1]
   1201a:	3b01      	subs	r3, #1
   1201c:	b29b      	uxth	r3, r3
   1201e:	009b      	lsls	r3, r3, #2
   12020:	b29a      	uxth	r2, r3
   12022:	887b      	ldrh	r3, [r7, #2]
   12024:	4413      	add	r3, r2
   12026:	b29b      	uxth	r3, r3
}
   12028:	4618      	mov	r0, r3
   1202a:	370c      	adds	r7, #12
   1202c:	46bd      	mov	sp, r7
   1202e:	bc80      	pop	{r7}
   12030:	4770      	bx	lr
	...

00012034 <_ZN13LTC2983_Class18configure_channelsEv>:
	}
	return found;
}

void LTC2983_Class::configure_channels()
{
   12034:	b590      	push	{r4, r7, lr}
   12036:	b085      	sub	sp, #20
   12038:	af00      	add	r7, sp, #0
   1203a:	6078      	str	r0, [r7, #4]
	
	uint32_t channel_assignment_data;

	
	  // ----- Channel 2: Assign Sense Resistor -----
	  channel_assignment_data =
   1203c:	4b25      	ldr	r3, [pc, #148]	; (120d4 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   1203e:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 2, channel_assignment_data);
   12040:	687b      	ldr	r3, [r7, #4]
   12042:	6d99      	ldr	r1, [r3, #88]	; 0x58
   12044:	68fb      	ldr	r3, [r7, #12]
   12046:	2202      	movs	r2, #2
   12048:	6878      	ldr	r0, [r7, #4]
   1204a:	4c23      	ldr	r4, [pc, #140]	; (120d8 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   1204c:	47a0      	blx	r4
	  // ----- Channel 4: Assign RTD PT-100 -----
	  channel_assignment_data =
   1204e:	4b23      	ldr	r3, [pc, #140]	; (120dc <_ZN13LTC2983_Class18configure_channelsEv+0xa8>)
   12050:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__2 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 4, channel_assignment_data);
   12052:	687b      	ldr	r3, [r7, #4]
   12054:	6d99      	ldr	r1, [r3, #88]	; 0x58
   12056:	68fb      	ldr	r3, [r7, #12]
   12058:	2204      	movs	r2, #4
   1205a:	6878      	ldr	r0, [r7, #4]
   1205c:	4c1e      	ldr	r4, [pc, #120]	; (120d8 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   1205e:	47a0      	blx	r4
	  // ----- Channel 7: Assign Sense Resistor -----
	  channel_assignment_data =
   12060:	4b1c      	ldr	r3, [pc, #112]	; (120d4 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   12062:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 7, channel_assignment_data);
   12064:	687b      	ldr	r3, [r7, #4]
   12066:	6d99      	ldr	r1, [r3, #88]	; 0x58
   12068:	68fb      	ldr	r3, [r7, #12]
   1206a:	2207      	movs	r2, #7
   1206c:	6878      	ldr	r0, [r7, #4]
   1206e:	4c1a      	ldr	r4, [pc, #104]	; (120d8 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   12070:	47a0      	blx	r4
	  // ----- Channel 9: Assign RTD PT-100 -----
	  channel_assignment_data =
   12072:	4b1b      	ldr	r3, [pc, #108]	; (120e0 <_ZN13LTC2983_Class18configure_channelsEv+0xac>)
   12074:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__7 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 9, channel_assignment_data);
   12076:	687b      	ldr	r3, [r7, #4]
   12078:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1207a:	68fb      	ldr	r3, [r7, #12]
   1207c:	2209      	movs	r2, #9
   1207e:	6878      	ldr	r0, [r7, #4]
   12080:	4c15      	ldr	r4, [pc, #84]	; (120d8 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   12082:	47a0      	blx	r4
	  // ----- Channel 12: Assign Sense Resistor -----
	  channel_assignment_data =
   12084:	4b13      	ldr	r3, [pc, #76]	; (120d4 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   12086:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 12, channel_assignment_data);
   12088:	687b      	ldr	r3, [r7, #4]
   1208a:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1208c:	68fb      	ldr	r3, [r7, #12]
   1208e:	220c      	movs	r2, #12
   12090:	6878      	ldr	r0, [r7, #4]
   12092:	4c11      	ldr	r4, [pc, #68]	; (120d8 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   12094:	47a0      	blx	r4
	  // ----- Channel 14: Assign RTD PT-100 -----
	  channel_assignment_data =
   12096:	4b13      	ldr	r3, [pc, #76]	; (120e4 <_ZN13LTC2983_Class18configure_channelsEv+0xb0>)
   12098:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__12 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 14, channel_assignment_data);
   1209a:	687b      	ldr	r3, [r7, #4]
   1209c:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1209e:	68fb      	ldr	r3, [r7, #12]
   120a0:	220e      	movs	r2, #14
   120a2:	6878      	ldr	r0, [r7, #4]
   120a4:	4c0c      	ldr	r4, [pc, #48]	; (120d8 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   120a6:	47a0      	blx	r4
	  // ----- Channel 17: Assign Sense Resistor -----
	  channel_assignment_data =
   120a8:	4b0a      	ldr	r3, [pc, #40]	; (120d4 <_ZN13LTC2983_Class18configure_channelsEv+0xa0>)
   120aa:	60fb      	str	r3, [r7, #12]
	  SENSOR_TYPE__SENSE_RESISTOR |
	  (uint32_t) 0x9C4000 << SENSE_RESISTOR_VALUE_LSB;		// sense resistor - value: 10000.
	  assign_channel(chipSelect, 17, channel_assignment_data);
   120ac:	687b      	ldr	r3, [r7, #4]
   120ae:	6d99      	ldr	r1, [r3, #88]	; 0x58
   120b0:	68fb      	ldr	r3, [r7, #12]
   120b2:	2211      	movs	r2, #17
   120b4:	6878      	ldr	r0, [r7, #4]
   120b6:	4c08      	ldr	r4, [pc, #32]	; (120d8 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   120b8:	47a0      	blx	r4
	  // ----- Channel 19: Assign RTD PT-100 -----
	  channel_assignment_data =
   120ba:	4b0b      	ldr	r3, [pc, #44]	; (120e8 <_ZN13LTC2983_Class18configure_channelsEv+0xb4>)
   120bc:	60fb      	str	r3, [r7, #12]
	  RTD_RSENSE_CHANNEL__17 |
	  RTD_NUM_WIRES__4_WIRE |
	  RTD_EXCITATION_MODE__ROTATION_SHARING |
	  RTD_EXCITATION_CURRENT__50UA |
	  RTD_STANDARD__AMERICAN;
	  assign_channel(chipSelect, 19, channel_assignment_data);
   120be:	687b      	ldr	r3, [r7, #4]
   120c0:	6d99      	ldr	r1, [r3, #88]	; 0x58
   120c2:	68fb      	ldr	r3, [r7, #12]
   120c4:	2213      	movs	r2, #19
   120c6:	6878      	ldr	r0, [r7, #4]
   120c8:	4c03      	ldr	r4, [pc, #12]	; (120d8 <_ZN13LTC2983_Class18configure_channelsEv+0xa4>)
   120ca:	47a0      	blx	r4

}
   120cc:	bf00      	nop
   120ce:	3714      	adds	r7, #20
   120d0:	46bd      	mov	sp, r7
   120d2:	bd90      	pop	{r4, r7, pc}
   120d4:	e89c4000 	.word	0xe89c4000
   120d8:	00011c2d 	.word	0x00011c2d
   120dc:	60a91000 	.word	0x60a91000
   120e0:	61e91000 	.word	0x61e91000
   120e4:	63291000 	.word	0x63291000
   120e8:	64691000 	.word	0x64691000

000120ec <_ZN13LTC2983_Class27configure_global_parametersEv>:




void LTC2983_Class::configure_global_parameters()
{
   120ec:	b590      	push	{r4, r7, lr}
   120ee:	b085      	sub	sp, #20
   120f0:	af02      	add	r7, sp, #8
   120f2:	6078      	str	r0, [r7, #4]
	// -- Set global parameters
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xF0, TEMP_UNIT__C |
   120f4:	687b      	ldr	r3, [r7, #4]
   120f6:	6d99      	ldr	r1, [r3, #88]	; 0x58
	REJECTION__50_60_HZ);
   120f8:	2300      	movs	r3, #0
   120fa:	9300      	str	r3, [sp, #0]
   120fc:	23f0      	movs	r3, #240	; 0xf0
   120fe:	2202      	movs	r2, #2
   12100:	6878      	ldr	r0, [r7, #4]
   12102:	4c07      	ldr	r4, [pc, #28]	; (12120 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   12104:	47a0      	blx	r4
	// -- Set any extra delay between conversions (in this case, 0*100us)
	transfer_byte(chipSelect, WRITE_TO_RAM, 0xFF, 0);
   12106:	687b      	ldr	r3, [r7, #4]
   12108:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1210a:	2300      	movs	r3, #0
   1210c:	9300      	str	r3, [sp, #0]
   1210e:	23ff      	movs	r3, #255	; 0xff
   12110:	2202      	movs	r2, #2
   12112:	6878      	ldr	r0, [r7, #4]
   12114:	4c02      	ldr	r4, [pc, #8]	; (12120 <_ZN13LTC2983_Class27configure_global_parametersEv+0x34>)
   12116:	47a0      	blx	r4
}
   12118:	bf00      	nop
   1211a:	370c      	adds	r7, #12
   1211c:	46bd      	mov	sp, r7
   1211e:	bd90      	pop	{r4, r7, pc}
   12120:	00011f99 	.word	0x00011f99

00012124 <_ZN13LTC2983_Class8SelfTestEv>:
bool	LTC2983_Class::SelfTest(void){
   12124:	b580      	push	{r7, lr}
   12126:	b082      	sub	sp, #8
   12128:	af00      	add	r7, sp, #0
   1212a:	6078      	str	r0, [r7, #4]
	process_finished = 0;
   1212c:	687b      	ldr	r3, [r7, #4]
   1212e:	2200      	movs	r2, #0
   12130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	meassureTimeout=false;
   12134:	687b      	ldr	r3, [r7, #4]
   12136:	2200      	movs	r2, #0
   12138:	709a      	strb	r2, [r3, #2]
	ptrLTCClass=this;	
   1213a:	4a31      	ldr	r2, [pc, #196]	; (12200 <_ZN13LTC2983_Class8SelfTestEv+0xdc>)
   1213c:	687b      	ldr	r3, [r7, #4]
   1213e:	6013      	str	r3, [r2, #0]
	temperatureTimer.Start_oneShot_task((FUNC_PTR)MeassureTimeout,TEMPERATURE_MEASSURE_TIMEOUT);
   12140:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12144:	492f      	ldr	r1, [pc, #188]	; (12204 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   12146:	4830      	ldr	r0, [pc, #192]	; (12208 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   12148:	4b30      	ldr	r3, [pc, #192]	; (1220c <_ZN13LTC2983_Class8SelfTestEv+0xe8>)
   1214a:	4798      	blx	r3

		
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   1214c:	687b      	ldr	r3, [r7, #4]
   1214e:	79db      	ldrb	r3, [r3, #7]
   12150:	2b01      	cmp	r3, #1
   12152:	d009      	beq.n	12168 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   12154:	687b      	ldr	r3, [r7, #4]
   12156:	789b      	ldrb	r3, [r3, #2]
   12158:	b2db      	uxtb	r3, r3
   1215a:	f083 0301 	eor.w	r3, r3, #1
   1215e:	b2db      	uxtb	r3, r3
   12160:	2b00      	cmp	r3, #0
   12162:	d001      	beq.n	12168 <_ZN13LTC2983_Class8SelfTestEv+0x44>
   12164:	2301      	movs	r3, #1
   12166:	e000      	b.n	1216a <_ZN13LTC2983_Class8SelfTestEv+0x46>
   12168:	2300      	movs	r3, #0
   1216a:	2b00      	cmp	r3, #0
   1216c:	d034      	beq.n	121d8 <_ZN13LTC2983_Class8SelfTestEv+0xb4>

		ConvertAsyncChannelIndex(0);
   1216e:	2100      	movs	r1, #0
   12170:	6878      	ldr	r0, [r7, #4]
   12172:	4b27      	ldr	r3, [pc, #156]	; (12210 <_ZN13LTC2983_Class8SelfTestEv+0xec>)
   12174:	4798      	blx	r3
		delay_ms(1);
   12176:	2001      	movs	r0, #1
   12178:	4b26      	ldr	r3, [pc, #152]	; (12214 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   1217a:	4798      	blx	r3
		//while(!IsConverterDone());
		while((!ready)&&(!meassureTimeout));
   1217c:	687b      	ldr	r3, [r7, #4]
   1217e:	781b      	ldrb	r3, [r3, #0]
   12180:	b2db      	uxtb	r3, r3
   12182:	f083 0301 	eor.w	r3, r3, #1
   12186:	b2db      	uxtb	r3, r3
   12188:	2b00      	cmp	r3, #0
   1218a:	d009      	beq.n	121a0 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   1218c:	687b      	ldr	r3, [r7, #4]
   1218e:	789b      	ldrb	r3, [r3, #2]
   12190:	b2db      	uxtb	r3, r3
   12192:	f083 0301 	eor.w	r3, r3, #1
   12196:	b2db      	uxtb	r3, r3
   12198:	2b00      	cmp	r3, #0
   1219a:	d001      	beq.n	121a0 <_ZN13LTC2983_Class8SelfTestEv+0x7c>
   1219c:	2301      	movs	r3, #1
   1219e:	e000      	b.n	121a2 <_ZN13LTC2983_Class8SelfTestEv+0x7e>
   121a0:	2300      	movs	r3, #0
   121a2:	2b00      	cmp	r3, #0
   121a4:	d000      	beq.n	121a8 <_ZN13LTC2983_Class8SelfTestEv+0x84>
   121a6:	e7e9      	b.n	1217c <_ZN13LTC2983_Class8SelfTestEv+0x58>
		if (!meassureTimeout)
   121a8:	687b      	ldr	r3, [r7, #4]
   121aa:	789b      	ldrb	r3, [r3, #2]
   121ac:	b2db      	uxtb	r3, r3
   121ae:	f083 0301 	eor.w	r3, r3, #1
   121b2:	b2db      	uxtb	r3, r3
   121b4:	2b00      	cmp	r3, #0
   121b6:	d0c9      	beq.n	1214c <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			
			if (ready)
   121b8:	687b      	ldr	r3, [r7, #4]
   121ba:	781b      	ldrb	r3, [r3, #0]
   121bc:	b2db      	uxtb	r3, r3
   121be:	2b00      	cmp	r3, #0
   121c0:	d006      	beq.n	121d0 <_ZN13LTC2983_Class8SelfTestEv+0xac>
			{
			GetSingleChannelResult(activeChannels[0]);
   121c2:	687b      	ldr	r3, [r7, #4]
   121c4:	78db      	ldrb	r3, [r3, #3]
   121c6:	4619      	mov	r1, r3
   121c8:	6878      	ldr	r0, [r7, #4]
   121ca:	4b13      	ldr	r3, [pc, #76]	; (12218 <_ZN13LTC2983_Class8SelfTestEv+0xf4>)
   121cc:	4798      	blx	r3
   121ce:	e7bd      	b.n	1214c <_ZN13LTC2983_Class8SelfTestEv+0x28>
	
			}else{
				delay_ms(1);
   121d0:	2001      	movs	r0, #1
   121d2:	4b10      	ldr	r3, [pc, #64]	; (12214 <_ZN13LTC2983_Class8SelfTestEv+0xf0>)
   121d4:	4798      	blx	r3
	while((fault_data!=VALID_TEMPERATURE)&&(!meassureTimeout)){
   121d6:	e7b9      	b.n	1214c <_ZN13LTC2983_Class8SelfTestEv+0x28>
		{
			//delay_ms(1);
		}

	}
	temperatureTimer.Remove_task(FUNC_PTR(MeassureTimeout));
   121d8:	490a      	ldr	r1, [pc, #40]	; (12204 <_ZN13LTC2983_Class8SelfTestEv+0xe0>)
   121da:	480b      	ldr	r0, [pc, #44]	; (12208 <_ZN13LTC2983_Class8SelfTestEv+0xe4>)
   121dc:	4b0f      	ldr	r3, [pc, #60]	; (1221c <_ZN13LTC2983_Class8SelfTestEv+0xf8>)
   121de:	4798      	blx	r3
	

	isOK=fault_data==VALID_TEMPERATURE;
   121e0:	687b      	ldr	r3, [r7, #4]
   121e2:	79db      	ldrb	r3, [r3, #7]
   121e4:	2b01      	cmp	r3, #1
   121e6:	bf0c      	ite	eq
   121e8:	2301      	moveq	r3, #1
   121ea:	2300      	movne	r3, #0
   121ec:	b2da      	uxtb	r2, r3
   121ee:	687b      	ldr	r3, [r7, #4]
   121f0:	771a      	strb	r2, [r3, #28]
	return	isOK;
   121f2:	687b      	ldr	r3, [r7, #4]
   121f4:	7f1b      	ldrb	r3, [r3, #28]
	}
   121f6:	4618      	mov	r0, r3
   121f8:	3708      	adds	r7, #8
   121fa:	46bd      	mov	sp, r7
   121fc:	bd80      	pop	{r7, pc}
   121fe:	bf00      	nop
   12200:	20009afc 	.word	0x20009afc
   12204:	00011b45 	.word	0x00011b45
   12208:	200099fc 	.word	0x200099fc
   1220c:	0000dee1 	.word	0x0000dee1
   12210:	00011c81 	.word	0x00011c81
   12214:	00002a21 	.word	0x00002a21
   12218:	00011db5 	.word	0x00011db5
   1221c:	0000de89 	.word	0x0000de89

00012220 <_Z41__static_initialization_and_destruction_0ii>:
   12220:	b580      	push	{r7, lr}
   12222:	b082      	sub	sp, #8
   12224:	af00      	add	r7, sp, #0
   12226:	6078      	str	r0, [r7, #4]
   12228:	6039      	str	r1, [r7, #0]
   1222a:	687b      	ldr	r3, [r7, #4]
   1222c:	2b01      	cmp	r3, #1
   1222e:	d14c      	bne.n	122ca <_Z41__static_initialization_and_destruction_0ii+0xaa>
   12230:	683b      	ldr	r3, [r7, #0]
   12232:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12236:	4293      	cmp	r3, r2
   12238:	d147      	bne.n	122ca <_Z41__static_initialization_and_destruction_0ii+0xaa>
static Timer_Class temperatureTimer(&TIMER_TEMPERATURES);
   1223a:	4926      	ldr	r1, [pc, #152]	; (122d4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
   1223c:	4826      	ldr	r0, [pc, #152]	; (122d8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   1223e:	4b27      	ldr	r3, [pc, #156]	; (122dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12240:	4798      	blx	r3
   12242:	4a27      	ldr	r2, [pc, #156]	; (122e0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   12244:	4927      	ldr	r1, [pc, #156]	; (122e4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   12246:	4824      	ldr	r0, [pc, #144]	; (122d8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
   12248:	4b27      	ldr	r3, [pc, #156]	; (122e8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1224a:	4798      	blx	r3
static Timer_Class eventTimer(&TIMER_EVENT);
   1224c:	4927      	ldr	r1, [pc, #156]	; (122ec <_Z41__static_initialization_and_destruction_0ii+0xcc>)
   1224e:	4828      	ldr	r0, [pc, #160]	; (122f0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   12250:	4b22      	ldr	r3, [pc, #136]	; (122dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12252:	4798      	blx	r3
   12254:	4a22      	ldr	r2, [pc, #136]	; (122e0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   12256:	4923      	ldr	r1, [pc, #140]	; (122e4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   12258:	4825      	ldr	r0, [pc, #148]	; (122f0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
   1225a:	4b23      	ldr	r3, [pc, #140]	; (122e8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1225c:	4798      	blx	r3
static Timer_Class hvacTimer(&TIMER_HVAC);
   1225e:	4925      	ldr	r1, [pc, #148]	; (122f4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
   12260:	4825      	ldr	r0, [pc, #148]	; (122f8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   12262:	4b1e      	ldr	r3, [pc, #120]	; (122dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12264:	4798      	blx	r3
   12266:	4a1e      	ldr	r2, [pc, #120]	; (122e0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   12268:	491e      	ldr	r1, [pc, #120]	; (122e4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1226a:	4823      	ldr	r0, [pc, #140]	; (122f8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
   1226c:	4b1e      	ldr	r3, [pc, #120]	; (122e8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   1226e:	4798      	blx	r3
static Timer_Class connectionTimer(&TIMER_INTERFACE);
   12270:	4922      	ldr	r1, [pc, #136]	; (122fc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
   12272:	4823      	ldr	r0, [pc, #140]	; (12300 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   12274:	4b19      	ldr	r3, [pc, #100]	; (122dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12276:	4798      	blx	r3
   12278:	4a19      	ldr	r2, [pc, #100]	; (122e0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1227a:	491a      	ldr	r1, [pc, #104]	; (122e4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1227c:	4820      	ldr	r0, [pc, #128]	; (12300 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
   1227e:	4b1a      	ldr	r3, [pc, #104]	; (122e8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   12280:	4798      	blx	r3
static Timer_Class arincTimer(&TIMER_ARINC);
   12282:	4920      	ldr	r1, [pc, #128]	; (12304 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
   12284:	4820      	ldr	r0, [pc, #128]	; (12308 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   12286:	4b15      	ldr	r3, [pc, #84]	; (122dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   12288:	4798      	blx	r3
   1228a:	4a15      	ldr	r2, [pc, #84]	; (122e0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1228c:	4915      	ldr	r1, [pc, #84]	; (122e4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   1228e:	481e      	ldr	r0, [pc, #120]	; (12308 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
   12290:	4b15      	ldr	r3, [pc, #84]	; (122e8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   12292:	4798      	blx	r3
static Timer_Class usbTerminalTimer(&TIMER_USB);
   12294:	491d      	ldr	r1, [pc, #116]	; (1230c <_Z41__static_initialization_and_destruction_0ii+0xec>)
   12296:	481e      	ldr	r0, [pc, #120]	; (12310 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   12298:	4b10      	ldr	r3, [pc, #64]	; (122dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   1229a:	4798      	blx	r3
   1229c:	4a10      	ldr	r2, [pc, #64]	; (122e0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   1229e:	4911      	ldr	r1, [pc, #68]	; (122e4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   122a0:	481b      	ldr	r0, [pc, #108]	; (12310 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
   122a2:	4b11      	ldr	r3, [pc, #68]	; (122e8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   122a4:	4798      	blx	r3
static Timer_Class interfaceTimer(&TIMER_MAINTENANCE);
   122a6:	491b      	ldr	r1, [pc, #108]	; (12314 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
   122a8:	481b      	ldr	r0, [pc, #108]	; (12318 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   122aa:	4b0c      	ldr	r3, [pc, #48]	; (122dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   122ac:	4798      	blx	r3
   122ae:	4a0c      	ldr	r2, [pc, #48]	; (122e0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   122b0:	490c      	ldr	r1, [pc, #48]	; (122e4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   122b2:	4819      	ldr	r0, [pc, #100]	; (12318 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
   122b4:	4b0c      	ldr	r3, [pc, #48]	; (122e8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   122b6:	4798      	blx	r3
static Timer_Class canoTimer(&TIMER_CCU);
   122b8:	4918      	ldr	r1, [pc, #96]	; (1231c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
   122ba:	4819      	ldr	r0, [pc, #100]	; (12320 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   122bc:	4b07      	ldr	r3, [pc, #28]	; (122dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
   122be:	4798      	blx	r3
   122c0:	4a07      	ldr	r2, [pc, #28]	; (122e0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
   122c2:	4908      	ldr	r1, [pc, #32]	; (122e4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
   122c4:	4816      	ldr	r0, [pc, #88]	; (12320 <_Z41__static_initialization_and_destruction_0ii+0x100>)
   122c6:	4b08      	ldr	r3, [pc, #32]	; (122e8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
   122c8:	4798      	blx	r3
   122ca:	bf00      	nop
   122cc:	3708      	adds	r7, #8
   122ce:	46bd      	mov	sp, r7
   122d0:	bd80      	pop	{r7, pc}
   122d2:	bf00      	nop
   122d4:	20009da8 	.word	0x20009da8
   122d8:	200099fc 	.word	0x200099fc
   122dc:	0000dc59 	.word	0x0000dc59
   122e0:	20000000 	.word	0x20000000
   122e4:	0000dc91 	.word	0x0000dc91
   122e8:	00013091 	.word	0x00013091
   122ec:	20009e3c 	.word	0x20009e3c
   122f0:	20009a1c 	.word	0x20009a1c
   122f4:	20009f60 	.word	0x20009f60
   122f8:	20009a3c 	.word	0x20009a3c
   122fc:	20009e5c 	.word	0x20009e5c
   12300:	20009a5c 	.word	0x20009a5c
   12304:	20009f20 	.word	0x20009f20
   12308:	20009a7c 	.word	0x20009a7c
   1230c:	20009f40 	.word	0x20009f40
   12310:	20009a9c 	.word	0x20009a9c
   12314:	20009e18 	.word	0x20009e18
   12318:	20009abc 	.word	0x20009abc
   1231c:	20009eb8 	.word	0x20009eb8
   12320:	20009adc 	.word	0x20009adc

00012324 <_GLOBAL__sub_I_ptrLTCClass>:
   12324:	b580      	push	{r7, lr}
   12326:	af00      	add	r7, sp, #0
   12328:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1232c:	2001      	movs	r0, #1
   1232e:	4b01      	ldr	r3, [pc, #4]	; (12334 <_GLOBAL__sub_I_ptrLTCClass+0x10>)
   12330:	4798      	blx	r3
   12332:	bd80      	pop	{r7, pc}
   12334:	00012221 	.word	0x00012221

00012338 <hri_port_set_OUT_reg>:
{
   12338:	b480      	push	{r7}
   1233a:	b085      	sub	sp, #20
   1233c:	af00      	add	r7, sp, #0
   1233e:	60f8      	str	r0, [r7, #12]
   12340:	460b      	mov	r3, r1
   12342:	607a      	str	r2, [r7, #4]
   12344:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   12346:	7afb      	ldrb	r3, [r7, #11]
   12348:	68fa      	ldr	r2, [r7, #12]
   1234a:	01db      	lsls	r3, r3, #7
   1234c:	4413      	add	r3, r2
   1234e:	3318      	adds	r3, #24
   12350:	687a      	ldr	r2, [r7, #4]
   12352:	601a      	str	r2, [r3, #0]
}
   12354:	bf00      	nop
   12356:	3714      	adds	r7, #20
   12358:	46bd      	mov	sp, r7
   1235a:	bc80      	pop	{r7}
   1235c:	4770      	bx	lr

0001235e <hri_port_clear_OUT_reg>:
{
   1235e:	b480      	push	{r7}
   12360:	b085      	sub	sp, #20
   12362:	af00      	add	r7, sp, #0
   12364:	60f8      	str	r0, [r7, #12]
   12366:	460b      	mov	r3, r1
   12368:	607a      	str	r2, [r7, #4]
   1236a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   1236c:	7afb      	ldrb	r3, [r7, #11]
   1236e:	68fa      	ldr	r2, [r7, #12]
   12370:	01db      	lsls	r3, r3, #7
   12372:	4413      	add	r3, r2
   12374:	3314      	adds	r3, #20
   12376:	687a      	ldr	r2, [r7, #4]
   12378:	601a      	str	r2, [r3, #0]
}
   1237a:	bf00      	nop
   1237c:	3714      	adds	r7, #20
   1237e:	46bd      	mov	sp, r7
   12380:	bc80      	pop	{r7}
   12382:	4770      	bx	lr

00012384 <_gpio_set_level>:
{
   12384:	b580      	push	{r7, lr}
   12386:	b082      	sub	sp, #8
   12388:	af00      	add	r7, sp, #0
   1238a:	4603      	mov	r3, r0
   1238c:	6039      	str	r1, [r7, #0]
   1238e:	71fb      	strb	r3, [r7, #7]
   12390:	4613      	mov	r3, r2
   12392:	71bb      	strb	r3, [r7, #6]
	if (level) {
   12394:	79bb      	ldrb	r3, [r7, #6]
   12396:	2b00      	cmp	r3, #0
   12398:	d006      	beq.n	123a8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   1239a:	79fb      	ldrb	r3, [r7, #7]
   1239c:	683a      	ldr	r2, [r7, #0]
   1239e:	4619      	mov	r1, r3
   123a0:	4806      	ldr	r0, [pc, #24]	; (123bc <_gpio_set_level+0x38>)
   123a2:	4b07      	ldr	r3, [pc, #28]	; (123c0 <_gpio_set_level+0x3c>)
   123a4:	4798      	blx	r3
}
   123a6:	e005      	b.n	123b4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   123a8:	79fb      	ldrb	r3, [r7, #7]
   123aa:	683a      	ldr	r2, [r7, #0]
   123ac:	4619      	mov	r1, r3
   123ae:	4803      	ldr	r0, [pc, #12]	; (123bc <_gpio_set_level+0x38>)
   123b0:	4b04      	ldr	r3, [pc, #16]	; (123c4 <_gpio_set_level+0x40>)
   123b2:	4798      	blx	r3
}
   123b4:	bf00      	nop
   123b6:	3708      	adds	r7, #8
   123b8:	46bd      	mov	sp, r7
   123ba:	bd80      	pop	{r7, pc}
   123bc:	41008000 	.word	0x41008000
   123c0:	00012339 	.word	0x00012339
   123c4:	0001235f 	.word	0x0001235f

000123c8 <gpio_set_pin_level>:
{
   123c8:	b580      	push	{r7, lr}
   123ca:	b082      	sub	sp, #8
   123cc:	af00      	add	r7, sp, #0
   123ce:	4603      	mov	r3, r0
   123d0:	460a      	mov	r2, r1
   123d2:	71fb      	strb	r3, [r7, #7]
   123d4:	4613      	mov	r3, r2
   123d6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   123d8:	79fb      	ldrb	r3, [r7, #7]
   123da:	115b      	asrs	r3, r3, #5
   123dc:	b2d8      	uxtb	r0, r3
   123de:	79fb      	ldrb	r3, [r7, #7]
   123e0:	f003 031f 	and.w	r3, r3, #31
   123e4:	2201      	movs	r2, #1
   123e6:	fa02 f303 	lsl.w	r3, r2, r3
   123ea:	79ba      	ldrb	r2, [r7, #6]
   123ec:	4619      	mov	r1, r3
   123ee:	4b03      	ldr	r3, [pc, #12]	; (123fc <gpio_set_pin_level+0x34>)
   123f0:	4798      	blx	r3
}
   123f2:	bf00      	nop
   123f4:	3708      	adds	r7, #8
   123f6:	46bd      	mov	sp, r7
   123f8:	bd80      	pop	{r7, pc}
   123fa:	bf00      	nop
   123fc:	00012385 	.word	0x00012385

00012400 <_ZN6LT_SPIC1Ev>:
LT_SPI	*ptrLTSPIClass;

static  SPI_Syn_Class spiStaticTemp;

// default constructor
LT_SPI::LT_SPI()
   12400:	b480      	push	{r7}
   12402:	b083      	sub	sp, #12
   12404:	af00      	add	r7, sp, #0
   12406:	6078      	str	r0, [r7, #4]
{
	ptrLTSPIClass=this;
   12408:	4a05      	ldr	r2, [pc, #20]	; (12420 <_ZN6LT_SPIC1Ev+0x20>)
   1240a:	687b      	ldr	r3, [r7, #4]
   1240c:	6013      	str	r3, [r2, #0]
	spiTemp=&spiStaticTemp;
   1240e:	687b      	ldr	r3, [r7, #4]
   12410:	4a04      	ldr	r2, [pc, #16]	; (12424 <_ZN6LT_SPIC1Ev+0x24>)
   12412:	605a      	str	r2, [r3, #4]
} //LT_SPI
   12414:	687b      	ldr	r3, [r7, #4]
   12416:	4618      	mov	r0, r3
   12418:	370c      	adds	r7, #12
   1241a:	46bd      	mov	sp, r7
   1241c:	bc80      	pop	{r7}
   1241e:	4770      	bx	lr
   12420:	20009b00 	.word	0x20009b00
   12424:	20009b04 	.word	0x20009b04

00012428 <_ZN6LT_SPID1Ev>:

// default destructor
LT_SPI::~LT_SPI()
   12428:	b480      	push	{r7}
   1242a:	b083      	sub	sp, #12
   1242c:	af00      	add	r7, sp, #0
   1242e:	6078      	str	r0, [r7, #4]
{
} //~LT_SPI
   12430:	687b      	ldr	r3, [r7, #4]
   12432:	4618      	mov	r0, r3
   12434:	370c      	adds	r7, #12
   12436:	46bd      	mov	sp, r7
   12438:	bc80      	pop	{r7}
   1243a:	4770      	bx	lr

0001243c <_ZN6LT_SPI4initEv>:

void LT_SPI::init(){
   1243c:	b580      	push	{r7, lr}
   1243e:	b082      	sub	sp, #8
   12440:	af00      	add	r7, sp, #0
   12442:	6078      	str	r0, [r7, #4]
	spiTemp->SetDescriptor(SPIA);
   12444:	687b      	ldr	r3, [r7, #4]
   12446:	685a      	ldr	r2, [r3, #4]
   12448:	687b      	ldr	r3, [r7, #4]
   1244a:	691b      	ldr	r3, [r3, #16]
   1244c:	4619      	mov	r1, r3
   1244e:	4610      	mov	r0, r2
   12450:	4b0e      	ldr	r3, [pc, #56]	; (1248c <_ZN6LT_SPI4initEv+0x50>)
   12452:	4798      	blx	r3
	spiTemp->init();
   12454:	687b      	ldr	r3, [r7, #4]
   12456:	685b      	ldr	r3, [r3, #4]
   12458:	4618      	mov	r0, r3
   1245a:	4b0d      	ldr	r3, [pc, #52]	; (12490 <_ZN6LT_SPI4initEv+0x54>)
   1245c:	4798      	blx	r3
	txLiteBuffer=spiTemp->txBuffer;
   1245e:	687b      	ldr	r3, [r7, #4]
   12460:	685b      	ldr	r3, [r3, #4]
   12462:	685a      	ldr	r2, [r3, #4]
   12464:	687b      	ldr	r3, [r7, #4]
   12466:	609a      	str	r2, [r3, #8]
	rxLiteBuffer=spiTemp->rxBuffer;
   12468:	687b      	ldr	r3, [r7, #4]
   1246a:	685b      	ldr	r3, [r3, #4]
   1246c:	689a      	ldr	r2, [r3, #8]
   1246e:	687b      	ldr	r3, [r7, #4]
   12470:	60da      	str	r2, [r3, #12]
	spiTemp->Enable();
   12472:	687b      	ldr	r3, [r7, #4]
   12474:	685b      	ldr	r3, [r3, #4]
   12476:	4618      	mov	r0, r3
   12478:	4b06      	ldr	r3, [pc, #24]	; (12494 <_ZN6LT_SPI4initEv+0x58>)
   1247a:	4798      	blx	r3
	ready=true;
   1247c:	687b      	ldr	r3, [r7, #4]
   1247e:	2201      	movs	r2, #1
   12480:	701a      	strb	r2, [r3, #0]
}
   12482:	bf00      	nop
   12484:	3708      	adds	r7, #8
   12486:	46bd      	mov	sp, r7
   12488:	bd80      	pop	{r7, pc}
   1248a:	bf00      	nop
   1248c:	000126e5 	.word	0x000126e5
   12490:	0001269d 	.word	0x0001269d
   12494:	00012709 	.word	0x00012709

00012498 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor>:
void	LT_SPI::set_descriptor(spi_m_sync_descriptor * i2c_a){
   12498:	b480      	push	{r7}
   1249a:	b083      	sub	sp, #12
   1249c:	af00      	add	r7, sp, #0
   1249e:	6078      	str	r0, [r7, #4]
   124a0:	6039      	str	r1, [r7, #0]
	SPIA=i2c_a;
   124a2:	687b      	ldr	r3, [r7, #4]
   124a4:	683a      	ldr	r2, [r7, #0]
   124a6:	611a      	str	r2, [r3, #16]
	ptrLTSPIClass=this;
   124a8:	4a03      	ldr	r2, [pc, #12]	; (124b8 <_ZN6LT_SPI14set_descriptorEP21spi_m_sync_descriptor+0x20>)
   124aa:	687b      	ldr	r3, [r7, #4]
   124ac:	6013      	str	r3, [r2, #0]
}
   124ae:	bf00      	nop
   124b0:	370c      	adds	r7, #12
   124b2:	46bd      	mov	sp, r7
   124b4:	bc80      	pop	{r7}
   124b6:	4770      	bx	lr
   124b8:	20009b00 	.word	0x20009b00

000124bc <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h>:
// Return 0 if successful, 1 if failed


// Reads and sends a byte array
void LT_SPI::spi_transfer_block(uint32_t cs_pin, uint8_t *tx, uint8_t *rx, uint8_t length)
{
   124bc:	b580      	push	{r7, lr}
   124be:	b086      	sub	sp, #24
   124c0:	af00      	add	r7, sp, #0
   124c2:	60f8      	str	r0, [r7, #12]
   124c4:	60b9      	str	r1, [r7, #8]
   124c6:	607a      	str	r2, [r7, #4]
   124c8:	603b      	str	r3, [r7, #0]
	uint8_t rOrw=*tx;
   124ca:	687b      	ldr	r3, [r7, #4]
   124cc:	781b      	ldrb	r3, [r3, #0]
   124ce:	75fb      	strb	r3, [r7, #23]
	Open(cs_pin);               //! 1) Pull CS low
   124d0:	68b9      	ldr	r1, [r7, #8]
   124d2:	68f8      	ldr	r0, [r7, #12]
   124d4:	4b25      	ldr	r3, [pc, #148]	; (1256c <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb0>)
   124d6:	4798      	blx	r3
	
	switch(rOrw){
   124d8:	7dfb      	ldrb	r3, [r7, #23]
   124da:	2b02      	cmp	r3, #2
   124dc:	d002      	beq.n	124e4 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x28>
   124de:	2b03      	cmp	r3, #3
   124e0:	d009      	beq.n	124f6 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x3a>
   124e2:	e028      	b.n	12536 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x7a>
		case WRITE_TO_RAM:
			spiTemp->Write(tx,length);				//! 2) Read byte and send byte
   124e4:	68fb      	ldr	r3, [r7, #12]
   124e6:	685b      	ldr	r3, [r3, #4]
   124e8:	f897 2020 	ldrb.w	r2, [r7, #32]
   124ec:	6879      	ldr	r1, [r7, #4]
   124ee:	4618      	mov	r0, r3
   124f0:	4b1f      	ldr	r3, [pc, #124]	; (12570 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   124f2:	4798      	blx	r3
			//while(!spiTemp->xferDone);
			break;
   124f4:	e031      	b.n	1255a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		case READ_FROM_RAM:
			spiTemp->Write(tx,3); 
   124f6:	68fb      	ldr	r3, [r7, #12]
   124f8:	685b      	ldr	r3, [r3, #4]
   124fa:	2203      	movs	r2, #3
   124fc:	6879      	ldr	r1, [r7, #4]
   124fe:	4618      	mov	r0, r3
   12500:	4b1b      	ldr	r3, [pc, #108]	; (12570 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   12502:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
		//	gpio_set_pin_level(cs_pin,true) ;
			if (length>4)
   12504:	f897 3020 	ldrb.w	r3, [r7, #32]
   12508:	2b04      	cmp	r3, #4
   1250a:	dd0b      	ble.n	12524 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x68>
			{
			//	delay_ms(1);
			//	gpio_set_pin_level(cs_pin,false);
				spiTemp->Read(rx,length-3);
   1250c:	68fb      	ldr	r3, [r7, #12]
   1250e:	6858      	ldr	r0, [r3, #4]
   12510:	f897 3020 	ldrb.w	r3, [r7, #32]
   12514:	3b03      	subs	r3, #3
   12516:	461a      	mov	r2, r3
   12518:	6839      	ldr	r1, [r7, #0]
   1251a:	4b16      	ldr	r3, [pc, #88]	; (12574 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   1251c:	4798      	blx	r3
					asm("nop");
   1251e:	bf00      	nop
			//	while (!spiTemp->xferDone);
				asm("nop");
   12520:	bf00      	nop
			{
				spiTemp->Read(rx,1);
				asm("nop");
			}
	
			break;
   12522:	e01a      	b.n	1255a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
				spiTemp->Read(rx,1);
   12524:	68fb      	ldr	r3, [r7, #12]
   12526:	685b      	ldr	r3, [r3, #4]
   12528:	2201      	movs	r2, #1
   1252a:	6839      	ldr	r1, [r7, #0]
   1252c:	4618      	mov	r0, r3
   1252e:	4b11      	ldr	r3, [pc, #68]	; (12574 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   12530:	4798      	blx	r3
				asm("nop");
   12532:	bf00      	nop
			break;
   12534:	e011      	b.n	1255a <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0x9e>
		default:
			spiTemp->Write(tx,length);             //! 2) Read byte and send byte
   12536:	68fb      	ldr	r3, [r7, #12]
   12538:	685b      	ldr	r3, [r3, #4]
   1253a:	f897 2020 	ldrb.w	r2, [r7, #32]
   1253e:	6879      	ldr	r1, [r7, #4]
   12540:	4618      	mov	r0, r3
   12542:	4b0b      	ldr	r3, [pc, #44]	; (12570 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb4>)
   12544:	4798      	blx	r3
		//	while(!spiTemp->xferDone);
			spiTemp->Read(rx,length-3);
   12546:	68fb      	ldr	r3, [r7, #12]
   12548:	6858      	ldr	r0, [r3, #4]
   1254a:	f897 3020 	ldrb.w	r3, [r7, #32]
   1254e:	3b03      	subs	r3, #3
   12550:	461a      	mov	r2, r3
   12552:	6839      	ldr	r1, [r7, #0]
   12554:	4b07      	ldr	r3, [pc, #28]	; (12574 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xb8>)
   12556:	4798      	blx	r3
			break;
   12558:	bf00      	nop


	

	//while (!spiTemp->xferDone);
	Close(cs_pin) ;              //! 3) Pull CS high
   1255a:	68b9      	ldr	r1, [r7, #8]
   1255c:	68f8      	ldr	r0, [r7, #12]
   1255e:	4b06      	ldr	r3, [pc, #24]	; (12578 <_ZN6LT_SPI18spi_transfer_blockEmPhS0_h+0xbc>)
   12560:	4798      	blx	r3
	asm("nop");
   12562:	bf00      	nop
	
}
   12564:	bf00      	nop
   12566:	3718      	adds	r7, #24
   12568:	46bd      	mov	sp, r7
   1256a:	bd80      	pop	{r7, pc}
   1256c:	0001257d 	.word	0x0001257d
   12570:	00012745 	.word	0x00012745
   12574:	00012789 	.word	0x00012789
   12578:	000125c5 	.word	0x000125c5

0001257c <_ZN6LT_SPI4OpenEm>:





 void LT_SPI::Open(uint32_t cs_pin){
   1257c:	b580      	push	{r7, lr}
   1257e:	b082      	sub	sp, #8
   12580:	af00      	add	r7, sp, #0
   12582:	6078      	str	r0, [r7, #4]
   12584:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   12586:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsid i" : : : "memory");
   1258a:	b672      	cpsid	i
	 __DMB();
	 __disable_irq();

	gpio_set_pin_level(cs_pin,false);
   1258c:	683b      	ldr	r3, [r7, #0]
   1258e:	b2db      	uxtb	r3, r3
   12590:	2100      	movs	r1, #0
   12592:	4618      	mov	r0, r3
   12594:	4b08      	ldr	r3, [pc, #32]	; (125b8 <_ZN6LT_SPI4OpenEm+0x3c>)
   12596:	4798      	blx	r3
	 delay_us(10);
   12598:	200a      	movs	r0, #10
   1259a:	4b08      	ldr	r3, [pc, #32]	; (125bc <_ZN6LT_SPI4OpenEm+0x40>)
   1259c:	4798      	blx	r3
	spiTemp->Enable();
   1259e:	687b      	ldr	r3, [r7, #4]
   125a0:	685b      	ldr	r3, [r3, #4]
   125a2:	4618      	mov	r0, r3
   125a4:	4b06      	ldr	r3, [pc, #24]	; (125c0 <_ZN6LT_SPI4OpenEm+0x44>)
   125a6:	4798      	blx	r3
	 delay_us(10);
   125a8:	200a      	movs	r0, #10
   125aa:	4b04      	ldr	r3, [pc, #16]	; (125bc <_ZN6LT_SPI4OpenEm+0x40>)
   125ac:	4798      	blx	r3
 }
   125ae:	bf00      	nop
   125b0:	3708      	adds	r7, #8
   125b2:	46bd      	mov	sp, r7
   125b4:	bd80      	pop	{r7, pc}
   125b6:	bf00      	nop
   125b8:	000123c9 	.word	0x000123c9
   125bc:	000029ed 	.word	0x000029ed
   125c0:	00012709 	.word	0x00012709

000125c4 <_ZN6LT_SPI5CloseEm>:

 void LT_SPI::Close(uint32_t cs_pin){
   125c4:	b580      	push	{r7, lr}
   125c6:	b082      	sub	sp, #8
   125c8:	af00      	add	r7, sp, #0
   125ca:	6078      	str	r0, [r7, #4]
   125cc:	6039      	str	r1, [r7, #0]

	  delay_us(10);
   125ce:	200a      	movs	r0, #10
   125d0:	4b0b      	ldr	r3, [pc, #44]	; (12600 <_ZN6LT_SPI5CloseEm+0x3c>)
   125d2:	4798      	blx	r3
	 spiTemp->Disable();
   125d4:	687b      	ldr	r3, [r7, #4]
   125d6:	685b      	ldr	r3, [r3, #4]
   125d8:	4618      	mov	r0, r3
   125da:	4b0a      	ldr	r3, [pc, #40]	; (12604 <_ZN6LT_SPI5CloseEm+0x40>)
   125dc:	4798      	blx	r3
	delay_us(10);
   125de:	200a      	movs	r0, #10
   125e0:	4b07      	ldr	r3, [pc, #28]	; (12600 <_ZN6LT_SPI5CloseEm+0x3c>)
   125e2:	4798      	blx	r3
	gpio_set_pin_level(cs_pin,true);
   125e4:	683b      	ldr	r3, [r7, #0]
   125e6:	b2db      	uxtb	r3, r3
   125e8:	2101      	movs	r1, #1
   125ea:	4618      	mov	r0, r3
   125ec:	4b06      	ldr	r3, [pc, #24]	; (12608 <_ZN6LT_SPI5CloseEm+0x44>)
   125ee:	4798      	blx	r3
  __ASM volatile ("dmb 0xF":::"memory");
   125f0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   125f4:	b662      	cpsie	i
	__DMB();
	__enable_irq();
	 
   125f6:	bf00      	nop
   125f8:	3708      	adds	r7, #8
   125fa:	46bd      	mov	sp, r7
   125fc:	bd80      	pop	{r7, pc}
   125fe:	bf00      	nop
   12600:	000029ed 	.word	0x000029ed
   12604:	000127cd 	.word	0x000127cd
   12608:	000123c9 	.word	0x000123c9

0001260c <_Z41__static_initialization_and_destruction_0ii>:
   1260c:	b580      	push	{r7, lr}
   1260e:	b082      	sub	sp, #8
   12610:	af00      	add	r7, sp, #0
   12612:	6078      	str	r0, [r7, #4]
   12614:	6039      	str	r1, [r7, #0]
   12616:	687b      	ldr	r3, [r7, #4]
   12618:	2b01      	cmp	r3, #1
   1261a:	d10c      	bne.n	12636 <_Z41__static_initialization_and_destruction_0ii+0x2a>
   1261c:	683b      	ldr	r3, [r7, #0]
   1261e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12622:	4293      	cmp	r3, r2
   12624:	d107      	bne.n	12636 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static  SPI_Syn_Class spiStaticTemp;
   12626:	4806      	ldr	r0, [pc, #24]	; (12640 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   12628:	4b06      	ldr	r3, [pc, #24]	; (12644 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1262a:	4798      	blx	r3
   1262c:	4a06      	ldr	r2, [pc, #24]	; (12648 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   1262e:	4907      	ldr	r1, [pc, #28]	; (1264c <_Z41__static_initialization_and_destruction_0ii+0x40>)
   12630:	4803      	ldr	r0, [pc, #12]	; (12640 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   12632:	4b07      	ldr	r3, [pc, #28]	; (12650 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   12634:	4798      	blx	r3
   12636:	bf00      	nop
   12638:	3708      	adds	r7, #8
   1263a:	46bd      	mov	sp, r7
   1263c:	bd80      	pop	{r7, pc}
   1263e:	bf00      	nop
   12640:	20009b04 	.word	0x20009b04
   12644:	00012669 	.word	0x00012669
   12648:	20000000 	.word	0x20000000
   1264c:	00012689 	.word	0x00012689
   12650:	00013091 	.word	0x00013091

00012654 <_GLOBAL__sub_I_ptrLTSPIClass>:
   12654:	b580      	push	{r7, lr}
   12656:	af00      	add	r7, sp, #0
   12658:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1265c:	2001      	movs	r0, #1
   1265e:	4b01      	ldr	r3, [pc, #4]	; (12664 <_GLOBAL__sub_I_ptrLTSPIClass+0x10>)
   12660:	4798      	blx	r3
   12662:	bd80      	pop	{r7, pc}
   12664:	0001260d 	.word	0x0001260d

00012668 <_ZN13SPI_Syn_ClassC1Ev>:
SPI_Syn_Class	*ptrSPISync;
static	uint8_t	txStaticBuffer[SPI_SYN_BUFFER_SIZE];
static	uint8_t	rxStaticBuffer[SPI_SYN_BUFFER_SIZE];

// default constructor
SPI_Syn_Class::SPI_Syn_Class()
   12668:	b480      	push	{r7}
   1266a:	b083      	sub	sp, #12
   1266c:	af00      	add	r7, sp, #0
   1266e:	6078      	str	r0, [r7, #4]
{
		ptrSPISync=this;
   12670:	4a04      	ldr	r2, [pc, #16]	; (12684 <_ZN13SPI_Syn_ClassC1Ev+0x1c>)
   12672:	687b      	ldr	r3, [r7, #4]
   12674:	6013      	str	r3, [r2, #0]
//	SPI=SPI_1;
} //SPI_Syn_Class
   12676:	687b      	ldr	r3, [r7, #4]
   12678:	4618      	mov	r0, r3
   1267a:	370c      	adds	r7, #12
   1267c:	46bd      	mov	sp, r7
   1267e:	bc80      	pop	{r7}
   12680:	4770      	bx	lr
   12682:	bf00      	nop
   12684:	20009b20 	.word	0x20009b20

00012688 <_ZN13SPI_Syn_ClassD1Ev>:
	SPI=spiDesc;
	ptrSPISync=this;
} //SPI_Syn_Class

// default destructor
SPI_Syn_Class::~SPI_Syn_Class()
   12688:	b480      	push	{r7}
   1268a:	b083      	sub	sp, #12
   1268c:	af00      	add	r7, sp, #0
   1268e:	6078      	str	r0, [r7, #4]
{
} //~SPI_Syn_Class
   12690:	687b      	ldr	r3, [r7, #4]
   12692:	4618      	mov	r0, r3
   12694:	370c      	adds	r7, #12
   12696:	46bd      	mov	sp, r7
   12698:	bc80      	pop	{r7}
   1269a:	4770      	bx	lr

0001269c <_ZN13SPI_Syn_Class4initEv>:

void SPI_Syn_Class::init(){
   1269c:	b580      	push	{r7, lr}
   1269e:	b082      	sub	sp, #8
   126a0:	af00      	add	r7, sp, #0
   126a2:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   126a4:	687b      	ldr	r3, [r7, #4]
   126a6:	68da      	ldr	r2, [r3, #12]
   126a8:	687b      	ldr	r3, [r7, #4]
   126aa:	3310      	adds	r3, #16
   126ac:	4619      	mov	r1, r3
   126ae:	4610      	mov	r0, r2
   126b0:	4b09      	ldr	r3, [pc, #36]	; (126d8 <_ZN13SPI_Syn_Class4initEv+0x3c>)
   126b2:	4798      	blx	r3

	spi_m_sync_enable(SPI);
   126b4:	687b      	ldr	r3, [r7, #4]
   126b6:	68db      	ldr	r3, [r3, #12]
   126b8:	4618      	mov	r0, r3
   126ba:	4b08      	ldr	r3, [pc, #32]	; (126dc <_ZN13SPI_Syn_Class4initEv+0x40>)
   126bc:	4798      	blx	r3
		txBuffer=txStaticBuffer;
   126be:	687b      	ldr	r3, [r7, #4]
   126c0:	4a07      	ldr	r2, [pc, #28]	; (126e0 <_ZN13SPI_Syn_Class4initEv+0x44>)
   126c2:	605a      	str	r2, [r3, #4]
		rxBuffer=txStaticBuffer;
   126c4:	687b      	ldr	r3, [r7, #4]
   126c6:	4a06      	ldr	r2, [pc, #24]	; (126e0 <_ZN13SPI_Syn_Class4initEv+0x44>)
   126c8:	609a      	str	r2, [r3, #8]
	ready=true;
   126ca:	687b      	ldr	r3, [r7, #4]
   126cc:	2201      	movs	r2, #1
   126ce:	701a      	strb	r2, [r3, #0]
	
}
   126d0:	bf00      	nop
   126d2:	3708      	adds	r7, #8
   126d4:	46bd      	mov	sp, r7
   126d6:	bd80      	pop	{r7, pc}
   126d8:	000031d5 	.word	0x000031d5
   126dc:	00003049 	.word	0x00003049
   126e0:	20009b24 	.word	0x20009b24

000126e4 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor>:
void SPI_Syn_Class::SetDescriptor(spi_m_sync_descriptor *spiDesc){
   126e4:	b480      	push	{r7}
   126e6:	b083      	sub	sp, #12
   126e8:	af00      	add	r7, sp, #0
   126ea:	6078      	str	r0, [r7, #4]
   126ec:	6039      	str	r1, [r7, #0]
	ptrSPISync=this;
   126ee:	4a05      	ldr	r2, [pc, #20]	; (12704 <_ZN13SPI_Syn_Class13SetDescriptorEP21spi_m_sync_descriptor+0x20>)
   126f0:	687b      	ldr	r3, [r7, #4]
   126f2:	6013      	str	r3, [r2, #0]
	SPI=spiDesc;
   126f4:	687b      	ldr	r3, [r7, #4]
   126f6:	683a      	ldr	r2, [r7, #0]
   126f8:	60da      	str	r2, [r3, #12]
}
   126fa:	bf00      	nop
   126fc:	370c      	adds	r7, #12
   126fe:	46bd      	mov	sp, r7
   12700:	bc80      	pop	{r7}
   12702:	4770      	bx	lr
   12704:	20009b20 	.word	0x20009b20

00012708 <_ZN13SPI_Syn_Class6EnableEv>:


int32_t SPI_Syn_Class::Enable(){
   12708:	b580      	push	{r7, lr}
   1270a:	b082      	sub	sp, #8
   1270c:	af00      	add	r7, sp, #0
   1270e:	6078      	str	r0, [r7, #4]
	spi_m_sync_get_io_descriptor(SPI, &spio);
   12710:	687b      	ldr	r3, [r7, #4]
   12712:	68da      	ldr	r2, [r3, #12]
   12714:	687b      	ldr	r3, [r7, #4]
   12716:	3310      	adds	r3, #16
   12718:	4619      	mov	r1, r3
   1271a:	4610      	mov	r0, r2
   1271c:	4b07      	ldr	r3, [pc, #28]	; (1273c <_ZN13SPI_Syn_Class6EnableEv+0x34>)
   1271e:	4798      	blx	r3
	spi_m_sync_enable(SPI);
   12720:	687b      	ldr	r3, [r7, #4]
   12722:	68db      	ldr	r3, [r3, #12]
   12724:	4618      	mov	r0, r3
   12726:	4b06      	ldr	r3, [pc, #24]	; (12740 <_ZN13SPI_Syn_Class6EnableEv+0x38>)
   12728:	4798      	blx	r3
	ready=true;
   1272a:	687b      	ldr	r3, [r7, #4]
   1272c:	2201      	movs	r2, #1
   1272e:	701a      	strb	r2, [r3, #0]
	return 0;
   12730:	2300      	movs	r3, #0
}
   12732:	4618      	mov	r0, r3
   12734:	3708      	adds	r7, #8
   12736:	46bd      	mov	sp, r7
   12738:	bd80      	pop	{r7, pc}
   1273a:	bf00      	nop
   1273c:	000031d5 	.word	0x000031d5
   12740:	00003049 	.word	0x00003049

00012744 <_ZN13SPI_Syn_Class5WriteEPKhl>:

int32_t  SPI_Syn_Class::Write(const uint8_t * p, int32_t n){
   12744:	b580      	push	{r7, lr}
   12746:	b086      	sub	sp, #24
   12748:	af00      	add	r7, sp, #0
   1274a:	60f8      	str	r0, [r7, #12]
   1274c:	60b9      	str	r1, [r7, #8]
   1274e:	607a      	str	r2, [r7, #4]
	int32_t w;
	wFlag=true;
   12750:	68fb      	ldr	r3, [r7, #12]
   12752:	2201      	movs	r2, #1
   12754:	761a      	strb	r2, [r3, #24]
	w= io_write(spio,p,(uint16_t)n);
   12756:	68fb      	ldr	r3, [r7, #12]
   12758:	691b      	ldr	r3, [r3, #16]
   1275a:	687a      	ldr	r2, [r7, #4]
   1275c:	b292      	uxth	r2, r2
   1275e:	68b9      	ldr	r1, [r7, #8]
   12760:	4618      	mov	r0, r3
   12762:	4b08      	ldr	r3, [pc, #32]	; (12784 <_ZN13SPI_Syn_Class5WriteEPKhl+0x40>)
   12764:	4798      	blx	r3
   12766:	6178      	str	r0, [r7, #20]
	wFlag=(bool)w;
   12768:	697b      	ldr	r3, [r7, #20]
   1276a:	2b00      	cmp	r3, #0
   1276c:	bf14      	ite	ne
   1276e:	2301      	movne	r3, #1
   12770:	2300      	moveq	r3, #0
   12772:	b2da      	uxtb	r2, r3
   12774:	68fb      	ldr	r3, [r7, #12]
   12776:	761a      	strb	r2, [r3, #24]
	 return w;
   12778:	697b      	ldr	r3, [r7, #20]
	
}
   1277a:	4618      	mov	r0, r3
   1277c:	3718      	adds	r7, #24
   1277e:	46bd      	mov	sp, r7
   12780:	bd80      	pop	{r7, pc}
   12782:	bf00      	nop
   12784:	00011459 	.word	0x00011459

00012788 <_ZN13SPI_Syn_Class4ReadEPhl>:
int32_t  SPI_Syn_Class::Read(uint8_t * p, int32_t n){
   12788:	b580      	push	{r7, lr}
   1278a:	b086      	sub	sp, #24
   1278c:	af00      	add	r7, sp, #0
   1278e:	60f8      	str	r0, [r7, #12]
   12790:	60b9      	str	r1, [r7, #8]
   12792:	607a      	str	r2, [r7, #4]
	int32_t r;
	rFlag=true;
   12794:	68fb      	ldr	r3, [r7, #12]
   12796:	2201      	movs	r2, #1
   12798:	765a      	strb	r2, [r3, #25]
	r=io_read(spio,p,(uint16_t)n);
   1279a:	68fb      	ldr	r3, [r7, #12]
   1279c:	691b      	ldr	r3, [r3, #16]
   1279e:	687a      	ldr	r2, [r7, #4]
   127a0:	b292      	uxth	r2, r2
   127a2:	68b9      	ldr	r1, [r7, #8]
   127a4:	4618      	mov	r0, r3
   127a6:	4b08      	ldr	r3, [pc, #32]	; (127c8 <_ZN13SPI_Syn_Class4ReadEPhl+0x40>)
   127a8:	4798      	blx	r3
   127aa:	6178      	str	r0, [r7, #20]
	rFlag=(bool)r;
   127ac:	697b      	ldr	r3, [r7, #20]
   127ae:	2b00      	cmp	r3, #0
   127b0:	bf14      	ite	ne
   127b2:	2301      	movne	r3, #1
   127b4:	2300      	moveq	r3, #0
   127b6:	b2da      	uxtb	r2, r3
   127b8:	68fb      	ldr	r3, [r7, #12]
   127ba:	765a      	strb	r2, [r3, #25]
	return  r;
   127bc:	697b      	ldr	r3, [r7, #20]
}
   127be:	4618      	mov	r0, r3
   127c0:	3718      	adds	r7, #24
   127c2:	46bd      	mov	sp, r7
   127c4:	bd80      	pop	{r7, pc}
   127c6:	bf00      	nop
   127c8:	000114a9 	.word	0x000114a9

000127cc <_ZN13SPI_Syn_Class7DisableEv>:
void SPI_Syn_Class::Disable(void){
   127cc:	b580      	push	{r7, lr}
   127ce:	b082      	sub	sp, #8
   127d0:	af00      	add	r7, sp, #0
   127d2:	6078      	str	r0, [r7, #4]
	spi_m_sync_disable(SPI);
   127d4:	687b      	ldr	r3, [r7, #4]
   127d6:	68db      	ldr	r3, [r3, #12]
   127d8:	4618      	mov	r0, r3
   127da:	4b03      	ldr	r3, [pc, #12]	; (127e8 <_ZN13SPI_Syn_Class7DisableEv+0x1c>)
   127dc:	4798      	blx	r3
	
}
   127de:	bf00      	nop
   127e0:	3708      	adds	r7, #8
   127e2:	46bd      	mov	sp, r7
   127e4:	bd80      	pop	{r7, pc}
   127e6:	bf00      	nop
   127e8:	00003085 	.word	0x00003085

000127ec <hri_port_set_DIR_reg>:
{
   127ec:	b480      	push	{r7}
   127ee:	b085      	sub	sp, #20
   127f0:	af00      	add	r7, sp, #0
   127f2:	60f8      	str	r0, [r7, #12]
   127f4:	460b      	mov	r3, r1
   127f6:	607a      	str	r2, [r7, #4]
   127f8:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
   127fa:	7afb      	ldrb	r3, [r7, #11]
   127fc:	68fa      	ldr	r2, [r7, #12]
   127fe:	01db      	lsls	r3, r3, #7
   12800:	4413      	add	r3, r2
   12802:	3308      	adds	r3, #8
   12804:	687a      	ldr	r2, [r7, #4]
   12806:	601a      	str	r2, [r3, #0]
}
   12808:	bf00      	nop
   1280a:	3714      	adds	r7, #20
   1280c:	46bd      	mov	sp, r7
   1280e:	bc80      	pop	{r7}
   12810:	4770      	bx	lr

00012812 <hri_port_clear_DIR_reg>:
{
   12812:	b480      	push	{r7}
   12814:	b085      	sub	sp, #20
   12816:	af00      	add	r7, sp, #0
   12818:	60f8      	str	r0, [r7, #12]
   1281a:	460b      	mov	r3, r1
   1281c:	607a      	str	r2, [r7, #4]
   1281e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
   12820:	7afb      	ldrb	r3, [r7, #11]
   12822:	68fa      	ldr	r2, [r7, #12]
   12824:	01db      	lsls	r3, r3, #7
   12826:	4413      	add	r3, r2
   12828:	3304      	adds	r3, #4
   1282a:	687a      	ldr	r2, [r7, #4]
   1282c:	601a      	str	r2, [r3, #0]
}
   1282e:	bf00      	nop
   12830:	3714      	adds	r7, #20
   12832:	46bd      	mov	sp, r7
   12834:	bc80      	pop	{r7}
   12836:	4770      	bx	lr

00012838 <hri_port_set_OUT_reg>:
{
   12838:	b480      	push	{r7}
   1283a:	b085      	sub	sp, #20
   1283c:	af00      	add	r7, sp, #0
   1283e:	60f8      	str	r0, [r7, #12]
   12840:	460b      	mov	r3, r1
   12842:	607a      	str	r2, [r7, #4]
   12844:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
   12846:	7afb      	ldrb	r3, [r7, #11]
   12848:	68fa      	ldr	r2, [r7, #12]
   1284a:	01db      	lsls	r3, r3, #7
   1284c:	4413      	add	r3, r2
   1284e:	3318      	adds	r3, #24
   12850:	687a      	ldr	r2, [r7, #4]
   12852:	601a      	str	r2, [r3, #0]
}
   12854:	bf00      	nop
   12856:	3714      	adds	r7, #20
   12858:	46bd      	mov	sp, r7
   1285a:	bc80      	pop	{r7}
   1285c:	4770      	bx	lr

0001285e <hri_port_clear_OUT_reg>:
{
   1285e:	b480      	push	{r7}
   12860:	b085      	sub	sp, #20
   12862:	af00      	add	r7, sp, #0
   12864:	60f8      	str	r0, [r7, #12]
   12866:	460b      	mov	r3, r1
   12868:	607a      	str	r2, [r7, #4]
   1286a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
   1286c:	7afb      	ldrb	r3, [r7, #11]
   1286e:	68fa      	ldr	r2, [r7, #12]
   12870:	01db      	lsls	r3, r3, #7
   12872:	4413      	add	r3, r2
   12874:	3314      	adds	r3, #20
   12876:	687a      	ldr	r2, [r7, #4]
   12878:	601a      	str	r2, [r3, #0]
}
   1287a:	bf00      	nop
   1287c:	3714      	adds	r7, #20
   1287e:	46bd      	mov	sp, r7
   12880:	bc80      	pop	{r7}
   12882:	4770      	bx	lr

00012884 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   12884:	b480      	push	{r7}
   12886:	b085      	sub	sp, #20
   12888:	af00      	add	r7, sp, #0
   1288a:	6078      	str	r0, [r7, #4]
   1288c:	4608      	mov	r0, r1
   1288e:	4611      	mov	r1, r2
   12890:	461a      	mov	r2, r3
   12892:	4603      	mov	r3, r0
   12894:	70fb      	strb	r3, [r7, #3]
   12896:	460b      	mov	r3, r1
   12898:	70bb      	strb	r3, [r7, #2]
   1289a:	4613      	mov	r3, r2
   1289c:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   1289e:	78fa      	ldrb	r2, [r7, #3]
   128a0:	78bb      	ldrb	r3, [r7, #2]
   128a2:	6879      	ldr	r1, [r7, #4]
   128a4:	01d2      	lsls	r2, r2, #7
   128a6:	440a      	add	r2, r1
   128a8:	4413      	add	r3, r2
   128aa:	3330      	adds	r3, #48	; 0x30
   128ac:	781b      	ldrb	r3, [r3, #0]
   128ae:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
   128b0:	7bfb      	ldrb	r3, [r7, #15]
   128b2:	f023 030f 	bic.w	r3, r3, #15
   128b6:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
   128b8:	787b      	ldrb	r3, [r7, #1]
   128ba:	f003 030f 	and.w	r3, r3, #15
   128be:	b2da      	uxtb	r2, r3
   128c0:	7bfb      	ldrb	r3, [r7, #15]
   128c2:	4313      	orrs	r3, r2
   128c4:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   128c6:	78fa      	ldrb	r2, [r7, #3]
   128c8:	78bb      	ldrb	r3, [r7, #2]
   128ca:	6879      	ldr	r1, [r7, #4]
   128cc:	01d2      	lsls	r2, r2, #7
   128ce:	440a      	add	r2, r1
   128d0:	4413      	add	r3, r2
   128d2:	3330      	adds	r3, #48	; 0x30
   128d4:	7bfa      	ldrb	r2, [r7, #15]
   128d6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   128d8:	bf00      	nop
   128da:	3714      	adds	r7, #20
   128dc:	46bd      	mov	sp, r7
   128de:	bc80      	pop	{r7}
   128e0:	4770      	bx	lr

000128e2 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
   128e2:	b480      	push	{r7}
   128e4:	b085      	sub	sp, #20
   128e6:	af00      	add	r7, sp, #0
   128e8:	6078      	str	r0, [r7, #4]
   128ea:	4608      	mov	r0, r1
   128ec:	4611      	mov	r1, r2
   128ee:	461a      	mov	r2, r3
   128f0:	4603      	mov	r3, r0
   128f2:	70fb      	strb	r3, [r7, #3]
   128f4:	460b      	mov	r3, r1
   128f6:	70bb      	strb	r3, [r7, #2]
   128f8:	4613      	mov	r3, r2
   128fa:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
   128fc:	78fa      	ldrb	r2, [r7, #3]
   128fe:	78bb      	ldrb	r3, [r7, #2]
   12900:	6879      	ldr	r1, [r7, #4]
   12902:	01d2      	lsls	r2, r2, #7
   12904:	440a      	add	r2, r1
   12906:	4413      	add	r3, r2
   12908:	3330      	adds	r3, #48	; 0x30
   1290a:	781b      	ldrb	r3, [r3, #0]
   1290c:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
   1290e:	7bfb      	ldrb	r3, [r7, #15]
   12910:	f003 030f 	and.w	r3, r3, #15
   12914:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
   12916:	787b      	ldrb	r3, [r7, #1]
   12918:	011b      	lsls	r3, r3, #4
   1291a:	b2da      	uxtb	r2, r3
   1291c:	7bfb      	ldrb	r3, [r7, #15]
   1291e:	4313      	orrs	r3, r2
   12920:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
   12922:	78fa      	ldrb	r2, [r7, #3]
   12924:	78bb      	ldrb	r3, [r7, #2]
   12926:	6879      	ldr	r1, [r7, #4]
   12928:	01d2      	lsls	r2, r2, #7
   1292a:	440a      	add	r2, r1
   1292c:	4413      	add	r3, r2
   1292e:	3330      	adds	r3, #48	; 0x30
   12930:	7bfa      	ldrb	r2, [r7, #15]
   12932:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   12934:	bf00      	nop
   12936:	3714      	adds	r7, #20
   12938:	46bd      	mov	sp, r7
   1293a:	bc80      	pop	{r7}
   1293c:	4770      	bx	lr

0001293e <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
   1293e:	b480      	push	{r7}
   12940:	b085      	sub	sp, #20
   12942:	af00      	add	r7, sp, #0
   12944:	6078      	str	r0, [r7, #4]
   12946:	4608      	mov	r0, r1
   12948:	4611      	mov	r1, r2
   1294a:	461a      	mov	r2, r3
   1294c:	4603      	mov	r3, r0
   1294e:	70fb      	strb	r3, [r7, #3]
   12950:	460b      	mov	r3, r1
   12952:	70bb      	strb	r3, [r7, #2]
   12954:	4613      	mov	r3, r2
   12956:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
   12958:	78fa      	ldrb	r2, [r7, #3]
   1295a:	78bb      	ldrb	r3, [r7, #2]
   1295c:	6879      	ldr	r1, [r7, #4]
   1295e:	01d2      	lsls	r2, r2, #7
   12960:	440a      	add	r2, r1
   12962:	4413      	add	r3, r2
   12964:	3340      	adds	r3, #64	; 0x40
   12966:	781b      	ldrb	r3, [r3, #0]
   12968:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
   1296a:	7bfb      	ldrb	r3, [r7, #15]
   1296c:	f023 0301 	bic.w	r3, r3, #1
   12970:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
   12972:	787a      	ldrb	r2, [r7, #1]
   12974:	7bfb      	ldrb	r3, [r7, #15]
   12976:	4313      	orrs	r3, r2
   12978:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   1297a:	78fa      	ldrb	r2, [r7, #3]
   1297c:	78bb      	ldrb	r3, [r7, #2]
   1297e:	6879      	ldr	r1, [r7, #4]
   12980:	01d2      	lsls	r2, r2, #7
   12982:	440a      	add	r2, r1
   12984:	4413      	add	r3, r2
   12986:	3340      	adds	r3, #64	; 0x40
   12988:	7bfa      	ldrb	r2, [r7, #15]
   1298a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   1298c:	bf00      	nop
   1298e:	3714      	adds	r7, #20
   12990:	46bd      	mov	sp, r7
   12992:	bc80      	pop	{r7}
   12994:	4770      	bx	lr

00012996 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
   12996:	b480      	push	{r7}
   12998:	b085      	sub	sp, #20
   1299a:	af00      	add	r7, sp, #0
   1299c:	60f8      	str	r0, [r7, #12]
   1299e:	460b      	mov	r3, r1
   129a0:	607a      	str	r2, [r7, #4]
   129a2:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
   129a4:	7afb      	ldrb	r3, [r7, #11]
   129a6:	68fa      	ldr	r2, [r7, #12]
   129a8:	01db      	lsls	r3, r3, #7
   129aa:	4413      	add	r3, r2
   129ac:	3328      	adds	r3, #40	; 0x28
   129ae:	687a      	ldr	r2, [r7, #4]
   129b0:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
   129b2:	bf00      	nop
   129b4:	3714      	adds	r7, #20
   129b6:	46bd      	mov	sp, r7
   129b8:	bc80      	pop	{r7}
   129ba:	4770      	bx	lr

000129bc <_gpio_set_direction>:
{
   129bc:	b580      	push	{r7, lr}
   129be:	b082      	sub	sp, #8
   129c0:	af00      	add	r7, sp, #0
   129c2:	4603      	mov	r3, r0
   129c4:	6039      	str	r1, [r7, #0]
   129c6:	71fb      	strb	r3, [r7, #7]
   129c8:	4613      	mov	r3, r2
   129ca:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
   129cc:	79bb      	ldrb	r3, [r7, #6]
   129ce:	2b01      	cmp	r3, #1
   129d0:	d01c      	beq.n	12a0c <_gpio_set_direction+0x50>
   129d2:	2b02      	cmp	r3, #2
   129d4:	d037      	beq.n	12a46 <_gpio_set_direction+0x8a>
   129d6:	2b00      	cmp	r3, #0
   129d8:	d14e      	bne.n	12a78 <_gpio_set_direction+0xbc>
		hri_port_clear_DIR_reg(PORT, port, mask);
   129da:	79fb      	ldrb	r3, [r7, #7]
   129dc:	683a      	ldr	r2, [r7, #0]
   129de:	4619      	mov	r1, r3
   129e0:	482a      	ldr	r0, [pc, #168]	; (12a8c <_gpio_set_direction+0xd0>)
   129e2:	4b2b      	ldr	r3, [pc, #172]	; (12a90 <_gpio_set_direction+0xd4>)
   129e4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   129e6:	683b      	ldr	r3, [r7, #0]
   129e8:	b29b      	uxth	r3, r3
   129ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   129ee:	79fb      	ldrb	r3, [r7, #7]
   129f0:	4619      	mov	r1, r3
   129f2:	4826      	ldr	r0, [pc, #152]	; (12a8c <_gpio_set_direction+0xd0>)
   129f4:	4b27      	ldr	r3, [pc, #156]	; (12a94 <_gpio_set_direction+0xd8>)
   129f6:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   129f8:	683b      	ldr	r3, [r7, #0]
   129fa:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   129fc:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12a00:	79fb      	ldrb	r3, [r7, #7]
   12a02:	4619      	mov	r1, r3
   12a04:	4821      	ldr	r0, [pc, #132]	; (12a8c <_gpio_set_direction+0xd0>)
   12a06:	4b23      	ldr	r3, [pc, #140]	; (12a94 <_gpio_set_direction+0xd8>)
   12a08:	4798      	blx	r3
		break;
   12a0a:	e03a      	b.n	12a82 <_gpio_set_direction+0xc6>
		hri_port_clear_DIR_reg(PORT, port, mask);
   12a0c:	79fb      	ldrb	r3, [r7, #7]
   12a0e:	683a      	ldr	r2, [r7, #0]
   12a10:	4619      	mov	r1, r3
   12a12:	481e      	ldr	r0, [pc, #120]	; (12a8c <_gpio_set_direction+0xd0>)
   12a14:	4b1e      	ldr	r3, [pc, #120]	; (12a90 <_gpio_set_direction+0xd4>)
   12a16:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
   12a18:	683b      	ldr	r3, [r7, #0]
   12a1a:	b29b      	uxth	r3, r3
   12a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   12a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   12a24:	79f9      	ldrb	r1, [r7, #7]
   12a26:	461a      	mov	r2, r3
   12a28:	4818      	ldr	r0, [pc, #96]	; (12a8c <_gpio_set_direction+0xd0>)
   12a2a:	4b1a      	ldr	r3, [pc, #104]	; (12a94 <_gpio_set_direction+0xd8>)
   12a2c:	4798      	blx	r3
		                                | ((mask & 0xffff0000) >> 16));
   12a2e:	683b      	ldr	r3, [r7, #0]
   12a30:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
   12a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   12a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		                                | ((mask & 0xffff0000) >> 16));
   12a3a:	79f9      	ldrb	r1, [r7, #7]
   12a3c:	461a      	mov	r2, r3
   12a3e:	4813      	ldr	r0, [pc, #76]	; (12a8c <_gpio_set_direction+0xd0>)
   12a40:	4b14      	ldr	r3, [pc, #80]	; (12a94 <_gpio_set_direction+0xd8>)
   12a42:	4798      	blx	r3
		break;
   12a44:	e01d      	b.n	12a82 <_gpio_set_direction+0xc6>
		hri_port_set_DIR_reg(PORT, port, mask);
   12a46:	79fb      	ldrb	r3, [r7, #7]
   12a48:	683a      	ldr	r2, [r7, #0]
   12a4a:	4619      	mov	r1, r3
   12a4c:	480f      	ldr	r0, [pc, #60]	; (12a8c <_gpio_set_direction+0xd0>)
   12a4e:	4b12      	ldr	r3, [pc, #72]	; (12a98 <_gpio_set_direction+0xdc>)
   12a50:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
   12a52:	683b      	ldr	r3, [r7, #0]
   12a54:	b29b      	uxth	r3, r3
   12a56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
   12a5a:	79fb      	ldrb	r3, [r7, #7]
   12a5c:	4619      	mov	r1, r3
   12a5e:	480b      	ldr	r0, [pc, #44]	; (12a8c <_gpio_set_direction+0xd0>)
   12a60:	4b0c      	ldr	r3, [pc, #48]	; (12a94 <_gpio_set_direction+0xd8>)
   12a62:	4798      	blx	r3
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12a64:	683b      	ldr	r3, [r7, #0]
   12a66:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
   12a68:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
   12a6c:	79fb      	ldrb	r3, [r7, #7]
   12a6e:	4619      	mov	r1, r3
   12a70:	4806      	ldr	r0, [pc, #24]	; (12a8c <_gpio_set_direction+0xd0>)
   12a72:	4b08      	ldr	r3, [pc, #32]	; (12a94 <_gpio_set_direction+0xd8>)
   12a74:	4798      	blx	r3
		break;
   12a76:	e004      	b.n	12a82 <_gpio_set_direction+0xc6>
		ASSERT(false);
   12a78:	2246      	movs	r2, #70	; 0x46
   12a7a:	4908      	ldr	r1, [pc, #32]	; (12a9c <_gpio_set_direction+0xe0>)
   12a7c:	2000      	movs	r0, #0
   12a7e:	4b08      	ldr	r3, [pc, #32]	; (12aa0 <_gpio_set_direction+0xe4>)
   12a80:	4798      	blx	r3
}
   12a82:	bf00      	nop
   12a84:	3708      	adds	r7, #8
   12a86:	46bd      	mov	sp, r7
   12a88:	bd80      	pop	{r7, pc}
   12a8a:	bf00      	nop
   12a8c:	41008000 	.word	0x41008000
   12a90:	00012813 	.word	0x00012813
   12a94:	00012997 	.word	0x00012997
   12a98:	000127ed 	.word	0x000127ed
   12a9c:	00013ef4 	.word	0x00013ef4
   12aa0:	0000405d 	.word	0x0000405d

00012aa4 <_gpio_set_level>:
{
   12aa4:	b580      	push	{r7, lr}
   12aa6:	b082      	sub	sp, #8
   12aa8:	af00      	add	r7, sp, #0
   12aaa:	4603      	mov	r3, r0
   12aac:	6039      	str	r1, [r7, #0]
   12aae:	71fb      	strb	r3, [r7, #7]
   12ab0:	4613      	mov	r3, r2
   12ab2:	71bb      	strb	r3, [r7, #6]
	if (level) {
   12ab4:	79bb      	ldrb	r3, [r7, #6]
   12ab6:	2b00      	cmp	r3, #0
   12ab8:	d006      	beq.n	12ac8 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
   12aba:	79fb      	ldrb	r3, [r7, #7]
   12abc:	683a      	ldr	r2, [r7, #0]
   12abe:	4619      	mov	r1, r3
   12ac0:	4806      	ldr	r0, [pc, #24]	; (12adc <_gpio_set_level+0x38>)
   12ac2:	4b07      	ldr	r3, [pc, #28]	; (12ae0 <_gpio_set_level+0x3c>)
   12ac4:	4798      	blx	r3
}
   12ac6:	e005      	b.n	12ad4 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
   12ac8:	79fb      	ldrb	r3, [r7, #7]
   12aca:	683a      	ldr	r2, [r7, #0]
   12acc:	4619      	mov	r1, r3
   12ace:	4803      	ldr	r0, [pc, #12]	; (12adc <_gpio_set_level+0x38>)
   12ad0:	4b04      	ldr	r3, [pc, #16]	; (12ae4 <_gpio_set_level+0x40>)
   12ad2:	4798      	blx	r3
}
   12ad4:	bf00      	nop
   12ad6:	3708      	adds	r7, #8
   12ad8:	46bd      	mov	sp, r7
   12ada:	bd80      	pop	{r7, pc}
   12adc:	41008000 	.word	0x41008000
   12ae0:	00012839 	.word	0x00012839
   12ae4:	0001285f 	.word	0x0001285f

00012ae8 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
   12ae8:	b590      	push	{r4, r7, lr}
   12aea:	b085      	sub	sp, #20
   12aec:	af00      	add	r7, sp, #0
   12aee:	6078      	str	r0, [r7, #4]
   12af0:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	095b      	lsrs	r3, r3, #5
   12af6:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
   12af8:	687b      	ldr	r3, [r7, #4]
   12afa:	b2db      	uxtb	r3, r3
   12afc:	f003 031f 	and.w	r3, r3, #31
   12b00:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
   12b02:	683b      	ldr	r3, [r7, #0]
   12b04:	f1b3 3fff 	cmp.w	r3, #4294967295
   12b08:	d106      	bne.n	12b18 <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
   12b0a:	7bba      	ldrb	r2, [r7, #14]
   12b0c:	7bf9      	ldrb	r1, [r7, #15]
   12b0e:	2300      	movs	r3, #0
   12b10:	4812      	ldr	r0, [pc, #72]	; (12b5c <_gpio_set_pin_function+0x74>)
   12b12:	4c13      	ldr	r4, [pc, #76]	; (12b60 <_gpio_set_pin_function+0x78>)
   12b14:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
   12b16:	e01d      	b.n	12b54 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
   12b18:	7bba      	ldrb	r2, [r7, #14]
   12b1a:	7bf9      	ldrb	r1, [r7, #15]
   12b1c:	2301      	movs	r3, #1
   12b1e:	480f      	ldr	r0, [pc, #60]	; (12b5c <_gpio_set_pin_function+0x74>)
   12b20:	4c0f      	ldr	r4, [pc, #60]	; (12b60 <_gpio_set_pin_function+0x78>)
   12b22:	47a0      	blx	r4
		if (pin & 1) {
   12b24:	7bbb      	ldrb	r3, [r7, #14]
   12b26:	f003 0301 	and.w	r3, r3, #1
   12b2a:	2b00      	cmp	r3, #0
   12b2c:	d009      	beq.n	12b42 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
   12b2e:	7bbb      	ldrb	r3, [r7, #14]
   12b30:	105b      	asrs	r3, r3, #1
   12b32:	b2da      	uxtb	r2, r3
   12b34:	683b      	ldr	r3, [r7, #0]
   12b36:	b2db      	uxtb	r3, r3
   12b38:	7bf9      	ldrb	r1, [r7, #15]
   12b3a:	4808      	ldr	r0, [pc, #32]	; (12b5c <_gpio_set_pin_function+0x74>)
   12b3c:	4c09      	ldr	r4, [pc, #36]	; (12b64 <_gpio_set_pin_function+0x7c>)
   12b3e:	47a0      	blx	r4
}
   12b40:	e008      	b.n	12b54 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
   12b42:	7bbb      	ldrb	r3, [r7, #14]
   12b44:	105b      	asrs	r3, r3, #1
   12b46:	b2da      	uxtb	r2, r3
   12b48:	683b      	ldr	r3, [r7, #0]
   12b4a:	b2db      	uxtb	r3, r3
   12b4c:	7bf9      	ldrb	r1, [r7, #15]
   12b4e:	4803      	ldr	r0, [pc, #12]	; (12b5c <_gpio_set_pin_function+0x74>)
   12b50:	4c05      	ldr	r4, [pc, #20]	; (12b68 <_gpio_set_pin_function+0x80>)
   12b52:	47a0      	blx	r4
}
   12b54:	bf00      	nop
   12b56:	3714      	adds	r7, #20
   12b58:	46bd      	mov	sp, r7
   12b5a:	bd90      	pop	{r4, r7, pc}
   12b5c:	41008000 	.word	0x41008000
   12b60:	0001293f 	.word	0x0001293f
   12b64:	000128e3 	.word	0x000128e3
   12b68:	00012885 	.word	0x00012885

00012b6c <gpio_set_pin_function>:
{
   12b6c:	b580      	push	{r7, lr}
   12b6e:	b082      	sub	sp, #8
   12b70:	af00      	add	r7, sp, #0
   12b72:	6078      	str	r0, [r7, #4]
   12b74:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
   12b76:	6839      	ldr	r1, [r7, #0]
   12b78:	6878      	ldr	r0, [r7, #4]
   12b7a:	4b03      	ldr	r3, [pc, #12]	; (12b88 <gpio_set_pin_function+0x1c>)
   12b7c:	4798      	blx	r3
}
   12b7e:	bf00      	nop
   12b80:	3708      	adds	r7, #8
   12b82:	46bd      	mov	sp, r7
   12b84:	bd80      	pop	{r7, pc}
   12b86:	bf00      	nop
   12b88:	00012ae9 	.word	0x00012ae9

00012b8c <gpio_set_pin_direction>:
{
   12b8c:	b580      	push	{r7, lr}
   12b8e:	b082      	sub	sp, #8
   12b90:	af00      	add	r7, sp, #0
   12b92:	4603      	mov	r3, r0
   12b94:	460a      	mov	r2, r1
   12b96:	71fb      	strb	r3, [r7, #7]
   12b98:	4613      	mov	r3, r2
   12b9a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
   12b9c:	79fb      	ldrb	r3, [r7, #7]
   12b9e:	115b      	asrs	r3, r3, #5
   12ba0:	b2d8      	uxtb	r0, r3
   12ba2:	79fb      	ldrb	r3, [r7, #7]
   12ba4:	f003 031f 	and.w	r3, r3, #31
   12ba8:	2201      	movs	r2, #1
   12baa:	fa02 f303 	lsl.w	r3, r2, r3
   12bae:	79ba      	ldrb	r2, [r7, #6]
   12bb0:	4619      	mov	r1, r3
   12bb2:	4b03      	ldr	r3, [pc, #12]	; (12bc0 <gpio_set_pin_direction+0x34>)
   12bb4:	4798      	blx	r3
}
   12bb6:	bf00      	nop
   12bb8:	3708      	adds	r7, #8
   12bba:	46bd      	mov	sp, r7
   12bbc:	bd80      	pop	{r7, pc}
   12bbe:	bf00      	nop
   12bc0:	000129bd 	.word	0x000129bd

00012bc4 <gpio_set_pin_level>:
{
   12bc4:	b580      	push	{r7, lr}
   12bc6:	b082      	sub	sp, #8
   12bc8:	af00      	add	r7, sp, #0
   12bca:	4603      	mov	r3, r0
   12bcc:	460a      	mov	r2, r1
   12bce:	71fb      	strb	r3, [r7, #7]
   12bd0:	4613      	mov	r3, r2
   12bd2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
   12bd4:	79fb      	ldrb	r3, [r7, #7]
   12bd6:	115b      	asrs	r3, r3, #5
   12bd8:	b2d8      	uxtb	r0, r3
   12bda:	79fb      	ldrb	r3, [r7, #7]
   12bdc:	f003 031f 	and.w	r3, r3, #31
   12be0:	2201      	movs	r2, #1
   12be2:	fa02 f303 	lsl.w	r3, r2, r3
   12be6:	79ba      	ldrb	r2, [r7, #6]
   12be8:	4619      	mov	r1, r3
   12bea:	4b03      	ldr	r3, [pc, #12]	; (12bf8 <gpio_set_pin_level+0x34>)
   12bec:	4798      	blx	r3
}
   12bee:	bf00      	nop
   12bf0:	3708      	adds	r7, #8
   12bf2:	46bd      	mov	sp, r7
   12bf4:	bd80      	pop	{r7, pc}
   12bf6:	bf00      	nop
   12bf8:	00012aa5 	.word	0x00012aa5

00012bfc <_Z21QSPI_N25Q256_exit_xipv>:
N25Q256_Class	*ptrN25Q256Class;

n25q256a  N25Q256_Class::SPI_NOR_FLASH_descr;

void QSPI_N25Q256_exit_xip(void)
{
   12bfc:	b580      	push	{r7, lr}
   12bfe:	b082      	sub	sp, #8
   12c00:	af00      	add	r7, sp, #0
	gpio_set_pin_function(FLASH_IO0, 0);
   12c02:	2100      	movs	r1, #0
   12c04:	2008      	movs	r0, #8
   12c06:	4b24      	ldr	r3, [pc, #144]	; (12c98 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   12c08:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CS, 0);
   12c0a:	2100      	movs	r1, #0
   12c0c:	202b      	movs	r0, #43	; 0x2b
   12c0e:	4b22      	ldr	r3, [pc, #136]	; (12c98 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   12c10:	4798      	blx	r3
	gpio_set_pin_function(FLASH_CLK, 0);
   12c12:	2100      	movs	r1, #0
   12c14:	202a      	movs	r0, #42	; 0x2a
   12c16:	4b20      	ldr	r3, [pc, #128]	; (12c98 <_Z21QSPI_N25Q256_exit_xipv+0x9c>)
   12c18:	4798      	blx	r3

	gpio_set_pin_direction(FLASH_IO0, GPIO_DIRECTION_OUT);
   12c1a:	2102      	movs	r1, #2
   12c1c:	2008      	movs	r0, #8
   12c1e:	4b1f      	ldr	r3, [pc, #124]	; (12c9c <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   12c20:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CS, GPIO_DIRECTION_OUT);
   12c22:	2102      	movs	r1, #2
   12c24:	202b      	movs	r0, #43	; 0x2b
   12c26:	4b1d      	ldr	r3, [pc, #116]	; (12c9c <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   12c28:	4798      	blx	r3
	gpio_set_pin_direction(FLASH_CLK, GPIO_DIRECTION_OUT);
   12c2a:	2102      	movs	r1, #2
   12c2c:	202a      	movs	r0, #42	; 0x2a
   12c2e:	4b1b      	ldr	r3, [pc, #108]	; (12c9c <_Z21QSPI_N25Q256_exit_xipv+0xa0>)
   12c30:	4798      	blx	r3

	gpio_set_pin_level(FLASH_IO0, true);
   12c32:	2101      	movs	r1, #1
   12c34:	2008      	movs	r0, #8
   12c36:	4b1a      	ldr	r3, [pc, #104]	; (12ca0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12c38:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CS, false);
   12c3a:	2100      	movs	r1, #0
   12c3c:	202b      	movs	r0, #43	; 0x2b
   12c3e:	4b18      	ldr	r3, [pc, #96]	; (12ca0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12c40:	4798      	blx	r3
	gpio_set_pin_level(FLASH_CLK, false);
   12c42:	2100      	movs	r1, #0
   12c44:	202a      	movs	r0, #42	; 0x2a
   12c46:	4b16      	ldr	r3, [pc, #88]	; (12ca0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12c48:	4798      	blx	r3

	delay_us(1);
   12c4a:	2001      	movs	r0, #1
   12c4c:	4b15      	ldr	r3, [pc, #84]	; (12ca4 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   12c4e:	4798      	blx	r3

	for (int i = 0; i < 7; i++) {
   12c50:	2300      	movs	r3, #0
   12c52:	607b      	str	r3, [r7, #4]
   12c54:	687b      	ldr	r3, [r7, #4]
   12c56:	2b06      	cmp	r3, #6
   12c58:	dc11      	bgt.n	12c7e <_Z21QSPI_N25Q256_exit_xipv+0x82>
		gpio_set_pin_level(FLASH_CLK, true);
   12c5a:	2101      	movs	r1, #1
   12c5c:	202a      	movs	r0, #42	; 0x2a
   12c5e:	4b10      	ldr	r3, [pc, #64]	; (12ca0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12c60:	4798      	blx	r3
		delay_us(1);
   12c62:	2001      	movs	r0, #1
   12c64:	4b0f      	ldr	r3, [pc, #60]	; (12ca4 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   12c66:	4798      	blx	r3
		gpio_set_pin_level(FLASH_CLK, false);
   12c68:	2100      	movs	r1, #0
   12c6a:	202a      	movs	r0, #42	; 0x2a
   12c6c:	4b0c      	ldr	r3, [pc, #48]	; (12ca0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12c6e:	4798      	blx	r3
		delay_us(1);
   12c70:	2001      	movs	r0, #1
   12c72:	4b0c      	ldr	r3, [pc, #48]	; (12ca4 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   12c74:	4798      	blx	r3
	for (int i = 0; i < 7; i++) {
   12c76:	687b      	ldr	r3, [r7, #4]
   12c78:	3301      	adds	r3, #1
   12c7a:	607b      	str	r3, [r7, #4]
   12c7c:	e7ea      	b.n	12c54 <_Z21QSPI_N25Q256_exit_xipv+0x58>
	}

	gpio_set_pin_level(FLASH_CS, true);
   12c7e:	2101      	movs	r1, #1
   12c80:	202b      	movs	r0, #43	; 0x2b
   12c82:	4b07      	ldr	r3, [pc, #28]	; (12ca0 <_Z21QSPI_N25Q256_exit_xipv+0xa4>)
   12c84:	4798      	blx	r3
	delay_us(1);
   12c86:	2001      	movs	r0, #1
   12c88:	4b06      	ldr	r3, [pc, #24]	; (12ca4 <_Z21QSPI_N25Q256_exit_xipv+0xa8>)
   12c8a:	4798      	blx	r3
	QSPI_N25Q256_PORT_init();
   12c8c:	4b06      	ldr	r3, [pc, #24]	; (12ca8 <_Z21QSPI_N25Q256_exit_xipv+0xac>)
   12c8e:	4798      	blx	r3
}
   12c90:	bf00      	nop
   12c92:	3708      	adds	r7, #8
   12c94:	46bd      	mov	sp, r7
   12c96:	bd80      	pop	{r7, pc}
   12c98:	00012b6d 	.word	0x00012b6d
   12c9c:	00012b8d 	.word	0x00012b8d
   12ca0:	00012bc5 	.word	0x00012bc5
   12ca4:	000029ed 	.word	0x000029ed
   12ca8:	00001d49 	.word	0x00001d49

00012cac <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor>:
// default constructor
N25Q256_Class::N25Q256_Class()
{

} //N25Q256_Class
N25Q256_Class::N25Q256_Class(qspi_sync_descriptor *d)
   12cac:	b480      	push	{r7}
   12cae:	b083      	sub	sp, #12
   12cb0:	af00      	add	r7, sp, #0
   12cb2:	6078      	str	r0, [r7, #4]
   12cb4:	6039      	str	r1, [r7, #0]
{
	ptrQSPIDescriptor=d;
   12cb6:	687b      	ldr	r3, [r7, #4]
   12cb8:	683a      	ldr	r2, [r7, #0]
   12cba:	605a      	str	r2, [r3, #4]

	memoryCapacity=N25Q_FLASH_SIZE-QSPI_BUFFER_SIZE;
   12cbc:	687b      	ldr	r3, [r7, #4]
   12cbe:	4a04      	ldr	r2, [pc, #16]	; (12cd0 <_ZN13N25Q256_ClassC1EP20qspi_sync_descriptor+0x24>)
   12cc0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	
	//tx_buffer = {0};
	//rx_buffer = {0};
} //N25Q256_Class
   12cc4:	687b      	ldr	r3, [r7, #4]
   12cc6:	4618      	mov	r0, r3
   12cc8:	370c      	adds	r7, #12
   12cca:	46bd      	mov	sp, r7
   12ccc:	bc80      	pop	{r7}
   12cce:	4770      	bx	lr
   12cd0:	001fff00 	.word	0x001fff00

00012cd4 <_ZN13N25Q256_ClassD1Ev>:

// default destructor
N25Q256_Class::~N25Q256_Class()
   12cd4:	b480      	push	{r7}
   12cd6:	b083      	sub	sp, #12
   12cd8:	af00      	add	r7, sp, #0
   12cda:	6078      	str	r0, [r7, #4]
{
} //~N25Q256_Class
   12cdc:	687b      	ldr	r3, [r7, #4]
   12cde:	4618      	mov	r0, r3
   12ce0:	370c      	adds	r7, #12
   12ce2:	46bd      	mov	sp, r7
   12ce4:	bc80      	pop	{r7}
   12ce6:	4770      	bx	lr

00012ce8 <_ZN13N25Q256_Class4InitEv>:

bool N25Q256_Class::Init(void){
   12ce8:	b580      	push	{r7, lr}
   12cea:	b082      	sub	sp, #8
   12cec:	af00      	add	r7, sp, #0
   12cee:	6078      	str	r0, [r7, #4]
	xferDone=false;
   12cf0:	687b      	ldr	r3, [r7, #4]
   12cf2:	2200      	movs	r2, #0
   12cf4:	701a      	strb	r2, [r3, #0]
	spi_nor_flash_init();
   12cf6:	6878      	ldr	r0, [r7, #4]
   12cf8:	4b04      	ldr	r3, [pc, #16]	; (12d0c <_ZN13N25Q256_Class4InitEv+0x24>)
   12cfa:	4798      	blx	r3
	return SelfTest();
   12cfc:	6878      	ldr	r0, [r7, #4]
   12cfe:	4b04      	ldr	r3, [pc, #16]	; (12d10 <_ZN13N25Q256_Class4InitEv+0x28>)
   12d00:	4798      	blx	r3
   12d02:	4603      	mov	r3, r0
}
   12d04:	4618      	mov	r0, r3
   12d06:	3708      	adds	r7, #8
   12d08:	46bd      	mov	sp, r7
   12d0a:	bd80      	pop	{r7, pc}
   12d0c:	00012d15 	.word	0x00012d15
   12d10:	00012eb1 	.word	0x00012eb1

00012d14 <_ZN13N25Q256_Class18spi_nor_flash_initEv>:
	ptrQSPIDescriptor=d;
	Init();
}

void N25Q256_Class::spi_nor_flash_init(void)
{
   12d14:	b590      	push	{r4, r7, lr}
   12d16:	b083      	sub	sp, #12
   12d18:	af00      	add	r7, sp, #0
   12d1a:	6078      	str	r0, [r7, #4]
	qspi_sync_enable(ptrQSPIDescriptor);
   12d1c:	687b      	ldr	r3, [r7, #4]
   12d1e:	685b      	ldr	r3, [r3, #4]
   12d20:	4618      	mov	r0, r3
   12d22:	4b08      	ldr	r3, [pc, #32]	; (12d44 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x30>)
   12d24:	4798      	blx	r3
	SPI_NOR_FLASH = n25q256a_construct(
	&SPI_NOR_FLASH_descr.parent, ptrQSPIDescriptor, QSPI_N25Q256_exit_xip, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
   12d26:	687b      	ldr	r3, [r7, #4]
   12d28:	6859      	ldr	r1, [r3, #4]
	SPI_NOR_FLASH = n25q256a_construct(
   12d2a:	2300      	movs	r3, #0
   12d2c:	4a06      	ldr	r2, [pc, #24]	; (12d48 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x34>)
   12d2e:	4807      	ldr	r0, [pc, #28]	; (12d4c <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x38>)
   12d30:	4c07      	ldr	r4, [pc, #28]	; (12d50 <_ZN13N25Q256_Class18spi_nor_flash_initEv+0x3c>)
   12d32:	47a0      	blx	r4
   12d34:	4602      	mov	r2, r0
   12d36:	687b      	ldr	r3, [r7, #4]
   12d38:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
   12d3c:	bf00      	nop
   12d3e:	370c      	adds	r7, #12
   12d40:	46bd      	mov	sp, r7
   12d42:	bd90      	pop	{r4, r7, pc}
   12d44:	00002f05 	.word	0x00002f05
   12d48:	00012bfd 	.word	0x00012bfd
   12d4c:	20009b68 	.word	0x20009b68
   12d50:	0000c069 	.word	0x0000c069

00012d54 <_ZN13N25Q256_Class5EraseEm>:

uint32_t	N25Q256_Class::Erase(uint32_t add){
   12d54:	b580      	push	{r7, lr}
   12d56:	b084      	sub	sp, #16
   12d58:	af00      	add	r7, sp, #0
   12d5a:	6078      	str	r0, [r7, #4]
   12d5c:	6039      	str	r1, [r7, #0]
	uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, add, QSPI_ERBLK));
   12d5e:	687b      	ldr	r3, [r7, #4]
   12d60:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   12d64:	685b      	ldr	r3, [r3, #4]
   12d66:	689b      	ldr	r3, [r3, #8]
   12d68:	687a      	ldr	r2, [r7, #4]
   12d6a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
   12d6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   12d72:	6839      	ldr	r1, [r7, #0]
   12d74:	4798      	blx	r3
   12d76:	4603      	mov	r3, r0
   12d78:	60fb      	str	r3, [r7, #12]
	return	e;
   12d7a:	68fb      	ldr	r3, [r7, #12]
}
   12d7c:	4618      	mov	r0, r3
   12d7e:	3710      	adds	r7, #16
   12d80:	46bd      	mov	sp, r7
   12d82:	bd80      	pop	{r7, pc}

00012d84 <_ZN13N25Q256_Class12WriteAddressEPhmm>:


uint32_t	N25Q256_Class::WriteAddress(uint8_t *p,uint32_t addr, uint32_t size){
   12d84:	b590      	push	{r4, r7, lr}
   12d86:	b087      	sub	sp, #28
   12d88:	af00      	add	r7, sp, #0
   12d8a:	60f8      	str	r0, [r7, #12]
   12d8c:	60b9      	str	r1, [r7, #8]
   12d8e:	607a      	str	r2, [r7, #4]
   12d90:	603b      	str	r3, [r7, #0]
	//uint32_t e=(uint32_t)(SPI_NOR_FLASH->interface->erase(SPI_NOR_FLASH, addr, size));
	uint32_t w=(uint32_t)(SPI_NOR_FLASH->interface->write(SPI_NOR_FLASH, p,addr, size));
   12d92:	68fb      	ldr	r3, [r7, #12]
   12d94:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   12d98:	685b      	ldr	r3, [r3, #4]
   12d9a:	685c      	ldr	r4, [r3, #4]
   12d9c:	68fb      	ldr	r3, [r7, #12]
   12d9e:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   12da2:	683b      	ldr	r3, [r7, #0]
   12da4:	687a      	ldr	r2, [r7, #4]
   12da6:	68b9      	ldr	r1, [r7, #8]
   12da8:	47a0      	blx	r4
   12daa:	4603      	mov	r3, r0
   12dac:	617b      	str	r3, [r7, #20]
	return	w;
   12dae:	697b      	ldr	r3, [r7, #20]
}
   12db0:	4618      	mov	r0, r3
   12db2:	371c      	adds	r7, #28
   12db4:	46bd      	mov	sp, r7
   12db6:	bd90      	pop	{r4, r7, pc}

00012db8 <_ZN13N25Q256_Class11ReadAddressEPhmm>:
uint32_t	N25Q256_Class::ReadAddress(uint8_t *p,uint32_t addr, uint32_t size){
   12db8:	b590      	push	{r4, r7, lr}
   12dba:	b087      	sub	sp, #28
   12dbc:	af00      	add	r7, sp, #0
   12dbe:	60f8      	str	r0, [r7, #12]
   12dc0:	60b9      	str	r1, [r7, #8]
   12dc2:	607a      	str	r2, [r7, #4]
   12dc4:	603b      	str	r3, [r7, #0]
	xferDone=false;
   12dc6:	68fb      	ldr	r3, [r7, #12]
   12dc8:	2200      	movs	r2, #0
   12dca:	701a      	strb	r2, [r3, #0]
	uint32_t r=(uint32_t)(SPI_NOR_FLASH->interface->read(SPI_NOR_FLASH,p, addr, size));
   12dcc:	68fb      	ldr	r3, [r7, #12]
   12dce:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   12dd2:	685b      	ldr	r3, [r3, #4]
   12dd4:	681c      	ldr	r4, [r3, #0]
   12dd6:	68fb      	ldr	r3, [r7, #12]
   12dd8:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
   12ddc:	683b      	ldr	r3, [r7, #0]
   12dde:	687a      	ldr	r2, [r7, #4]
   12de0:	68b9      	ldr	r1, [r7, #8]
   12de2:	47a0      	blx	r4
   12de4:	4603      	mov	r3, r0
   12de6:	617b      	str	r3, [r7, #20]
	return	r;
   12de8:	697b      	ldr	r3, [r7, #20]
}
   12dea:	4618      	mov	r0, r3
   12dec:	371c      	adds	r7, #28
   12dee:	46bd      	mov	sp, r7
   12df0:	bd90      	pop	{r4, r7, pc}
	...

00012df4 <_ZN13N25Q256_Class9GetStatusEv>:

uint8_t	N25Q256_Class::GetStatus(void){
   12df4:	b580      	push	{r7, lr}
   12df6:	b082      	sub	sp, #8
   12df8:	af00      	add	r7, sp, #0
   12dfa:	6078      	str	r0, [r7, #4]
		cmd.inst_frame.bits.inst_en  = 1;
   12dfc:	687a      	ldr	r2, [r7, #4]
   12dfe:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   12e02:	f043 0310 	orr.w	r3, r3, #16
   12e06:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.data_en  = 1;
   12e0a:	687a      	ldr	r2, [r7, #4]
   12e0c:	f892 3214 	ldrb.w	r3, [r2, #532]	; 0x214
   12e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12e14:	f882 3214 	strb.w	r3, [r2, #532]	; 0x214
		cmd.inst_frame.bits.tfr_type = QSPI_READ_ACCESS;
   12e18:	687a      	ldr	r2, [r7, #4]
   12e1a:	f892 3215 	ldrb.w	r3, [r2, #533]	; 0x215
   12e1e:	f36f 1305 	bfc	r3, #4, #2
   12e22:	f882 3215 	strb.w	r3, [r2, #533]	; 0x215
		cmd.instruction              = N25Q_READ_STATUS_REGISTER;
   12e26:	687b      	ldr	r3, [r7, #4]
   12e28:	2205      	movs	r2, #5
   12e2a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
		cmd.buf_len                  = 1;
   12e2e:	687b      	ldr	r3, [r7, #4]
   12e30:	2201      	movs	r2, #1
   12e32:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		cmd.rx_buf                   = &status;
   12e36:	687b      	ldr	r3, [r7, #4]
   12e38:	f203 2212 	addw	r2, r3, #530	; 0x212
   12e3c:	687b      	ldr	r3, [r7, #4]
   12e3e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		
		qspi_sync_serial_run_command(ptrQSPIDescriptor, &cmd);
   12e42:	687b      	ldr	r3, [r7, #4]
   12e44:	685a      	ldr	r2, [r3, #4]
   12e46:	687b      	ldr	r3, [r7, #4]
   12e48:	f503 7305 	add.w	r3, r3, #532	; 0x214
   12e4c:	4619      	mov	r1, r3
   12e4e:	4610      	mov	r0, r2
   12e50:	4b04      	ldr	r3, [pc, #16]	; (12e64 <_ZN13N25Q256_Class9GetStatusEv+0x70>)
   12e52:	4798      	blx	r3
		return status;
   12e54:	687b      	ldr	r3, [r7, #4]
   12e56:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
	}
   12e5a:	4618      	mov	r0, r3
   12e5c:	3708      	adds	r7, #8
   12e5e:	46bd      	mov	sp, r7
   12e60:	bd80      	pop	{r7, pc}
   12e62:	bf00      	nop
   12e64:	00002f7d 	.word	0x00002f7d

00012e68 <_ZN13N25Q256_Class10WaitOnBusyEv>:
}
bool	N25Q256_Class::IsReady(){
	return	((GetStatus())&(0x01))==0;
}

bool	N25Q256_Class::WaitOnBusy(void){
   12e68:	b580      	push	{r7, lr}
   12e6a:	b082      	sub	sp, #8
   12e6c:	af00      	add	r7, sp, #0
   12e6e:	6078      	str	r0, [r7, #4]
		do{
			status=GetStatus();
   12e70:	6878      	ldr	r0, [r7, #4]
   12e72:	4b0e      	ldr	r3, [pc, #56]	; (12eac <_ZN13N25Q256_Class10WaitOnBusyEv+0x44>)
   12e74:	4798      	blx	r3
   12e76:	4603      	mov	r3, r0
   12e78:	461a      	mov	r2, r3
   12e7a:	687b      	ldr	r3, [r7, #4]
   12e7c:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}while(status & (1 << 0));
   12e80:	687b      	ldr	r3, [r7, #4]
   12e82:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   12e86:	f003 0301 	and.w	r3, r3, #1
   12e8a:	2b00      	cmp	r3, #0
   12e8c:	d000      	beq.n	12e90 <_ZN13N25Q256_Class10WaitOnBusyEv+0x28>
		do{
   12e8e:	e7ef      	b.n	12e70 <_ZN13N25Q256_Class10WaitOnBusyEv+0x8>
		return	(status&(0x01))==0;
   12e90:	687b      	ldr	r3, [r7, #4]
   12e92:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
   12e96:	f003 0301 	and.w	r3, r3, #1
   12e9a:	2b00      	cmp	r3, #0
   12e9c:	bf0c      	ite	eq
   12e9e:	2301      	moveq	r3, #1
   12ea0:	2300      	movne	r3, #0
   12ea2:	b2db      	uxtb	r3, r3
}
   12ea4:	4618      	mov	r0, r3
   12ea6:	3708      	adds	r7, #8
   12ea8:	46bd      	mov	sp, r7
   12eaa:	bd80      	pop	{r7, pc}
   12eac:	00012df5 	.word	0x00012df5

00012eb0 <_ZN13N25Q256_Class8SelfTestEv>:
bool	N25Q256_Class::SelfTest(void){
   12eb0:	b590      	push	{r4, r7, lr}
   12eb2:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
   12eb6:	b085      	sub	sp, #20
   12eb8:	af00      	add	r7, sp, #0
   12eba:	f107 0310 	add.w	r3, r7, #16
   12ebe:	3b0c      	subs	r3, #12
   12ec0:	6018      	str	r0, [r3, #0]
	currentAddress=2*QSPI_ERBLK;
   12ec2:	f107 0310 	add.w	r3, r7, #16
   12ec6:	3b0c      	subs	r3, #12
   12ec8:	681b      	ldr	r3, [r3, #0]
   12eca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   12ece:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
// 		tx_buffer[i] = (uint8_t)rand();
// 		rx_buffer[i] = (uint8_t)(QSPI_BUFFER_SIZE-i);
// 	}
	uint8_t	testRXBuffer[QSPI_ERBLK];
	uint8_t	testTXBuffer[QSPI_ERBLK];
	ReadAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   12ed2:	f107 0310 	add.w	r3, r7, #16
   12ed6:	3b0c      	subs	r3, #12
   12ed8:	681b      	ldr	r3, [r3, #0]
   12eda:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   12ede:	f107 0110 	add.w	r1, r7, #16
   12ee2:	3904      	subs	r1, #4
   12ee4:	f107 0010 	add.w	r0, r7, #16
   12ee8:	380c      	subs	r0, #12
   12eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   12eee:	6800      	ldr	r0, [r0, #0]
   12ef0:	4c4b      	ldr	r4, [pc, #300]	; (13020 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   12ef2:	47a0      	blx	r4
	WaitOnBusy();
   12ef4:	f107 0310 	add.w	r3, r7, #16
   12ef8:	3b0c      	subs	r3, #12
   12efa:	6818      	ldr	r0, [r3, #0]
   12efc:	4b49      	ldr	r3, [pc, #292]	; (13024 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   12efe:	4798      	blx	r3
	Erase(currentAddress);
   12f00:	f107 0310 	add.w	r3, r7, #16
   12f04:	3b0c      	subs	r3, #12
   12f06:	681b      	ldr	r3, [r3, #0]
   12f08:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   12f0c:	f107 0310 	add.w	r3, r7, #16
   12f10:	3b0c      	subs	r3, #12
   12f12:	4611      	mov	r1, r2
   12f14:	6818      	ldr	r0, [r3, #0]
   12f16:	4b44      	ldr	r3, [pc, #272]	; (13028 <_ZN13N25Q256_Class8SelfTestEv+0x178>)
   12f18:	4798      	blx	r3
	WaitOnBusy();
   12f1a:	f107 0310 	add.w	r3, r7, #16
   12f1e:	3b0c      	subs	r3, #12
   12f20:	6818      	ldr	r0, [r3, #0]
   12f22:	4b40      	ldr	r3, [pc, #256]	; (13024 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   12f24:	4798      	blx	r3
	WriteAddress(testTXBuffer,currentAddress,QSPI_ERBLK);
   12f26:	f107 0310 	add.w	r3, r7, #16
   12f2a:	3b0c      	subs	r3, #12
   12f2c:	681b      	ldr	r3, [r3, #0]
   12f2e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   12f32:	f107 0110 	add.w	r1, r7, #16
   12f36:	3904      	subs	r1, #4
   12f38:	f107 0010 	add.w	r0, r7, #16
   12f3c:	380c      	subs	r0, #12
   12f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   12f42:	6800      	ldr	r0, [r0, #0]
   12f44:	4c39      	ldr	r4, [pc, #228]	; (1302c <_ZN13N25Q256_Class8SelfTestEv+0x17c>)
   12f46:	47a0      	blx	r4
	WaitOnBusy();
   12f48:	f107 0310 	add.w	r3, r7, #16
   12f4c:	3b0c      	subs	r3, #12
   12f4e:	6818      	ldr	r0, [r3, #0]
   12f50:	4b34      	ldr	r3, [pc, #208]	; (13024 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   12f52:	4798      	blx	r3
	ReadAddress(testRXBuffer,currentAddress,QSPI_ERBLK);
   12f54:	f107 0310 	add.w	r3, r7, #16
   12f58:	3b0c      	subs	r3, #12
   12f5a:	681b      	ldr	r3, [r3, #0]
   12f5c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
   12f60:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
   12f64:	f101 0110 	add.w	r1, r1, #16
   12f68:	3904      	subs	r1, #4
   12f6a:	f107 0010 	add.w	r0, r7, #16
   12f6e:	380c      	subs	r0, #12
   12f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   12f74:	6800      	ldr	r0, [r0, #0]
   12f76:	4c2a      	ldr	r4, [pc, #168]	; (13020 <_ZN13N25Q256_Class8SelfTestEv+0x170>)
   12f78:	47a0      	blx	r4
	WaitOnBusy();
   12f7a:	f107 0310 	add.w	r3, r7, #16
   12f7e:	3b0c      	subs	r3, #12
   12f80:	6818      	ldr	r0, [r3, #0]
   12f82:	4b28      	ldr	r3, [pc, #160]	; (13024 <_ZN13N25Q256_Class8SelfTestEv+0x174>)
   12f84:	4798      	blx	r3
	isOK	 = true;
   12f86:	f107 0310 	add.w	r3, r7, #16
   12f8a:	3b0c      	subs	r3, #12
   12f8c:	681b      	ldr	r3, [r3, #0]
   12f8e:	2201      	movs	r2, #1
   12f90:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
	for (int i = 0; i < QSPI_ERBLK; i++) {
   12f94:	2300      	movs	r3, #0
   12f96:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   12f9a:	f102 020c 	add.w	r2, r2, #12
   12f9e:	6013      	str	r3, [r2, #0]
   12fa0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   12fa4:	f103 030c 	add.w	r3, r3, #12
   12fa8:	681b      	ldr	r3, [r3, #0]
   12faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   12fae:	da2b      	bge.n	13008 <_ZN13N25Q256_Class8SelfTestEv+0x158>
		if (testRXBuffer[i] != testTXBuffer[i]) {
   12fb0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
   12fb4:	f103 0310 	add.w	r3, r3, #16
   12fb8:	3b04      	subs	r3, #4
   12fba:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   12fbe:	f102 020c 	add.w	r2, r2, #12
   12fc2:	6812      	ldr	r2, [r2, #0]
   12fc4:	4413      	add	r3, r2
   12fc6:	781a      	ldrb	r2, [r3, #0]
   12fc8:	f107 0310 	add.w	r3, r7, #16
   12fcc:	3b04      	subs	r3, #4
   12fce:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
   12fd2:	f101 010c 	add.w	r1, r1, #12
   12fd6:	6809      	ldr	r1, [r1, #0]
   12fd8:	440b      	add	r3, r1
   12fda:	781b      	ldrb	r3, [r3, #0]
   12fdc:	429a      	cmp	r2, r3
   12fde:	d007      	beq.n	12ff0 <_ZN13N25Q256_Class8SelfTestEv+0x140>
			isOK = false;
   12fe0:	f107 0310 	add.w	r3, r7, #16
   12fe4:	3b0c      	subs	r3, #12
   12fe6:	681b      	ldr	r3, [r3, #0]
   12fe8:	2200      	movs	r2, #0
   12fea:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
			//usb.print("Flash data verification failed.\n\r");
		//	usb<<"bit :"<<i<<NEWLINE;
			break;
   12fee:	e00b      	b.n	13008 <_ZN13N25Q256_Class8SelfTestEv+0x158>
	for (int i = 0; i < QSPI_ERBLK; i++) {
   12ff0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
   12ff4:	f103 030c 	add.w	r3, r3, #12
   12ff8:	681b      	ldr	r3, [r3, #0]
   12ffa:	3301      	adds	r3, #1
   12ffc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
   13000:	f102 020c 	add.w	r2, r2, #12
   13004:	6013      	str	r3, [r2, #0]
   13006:	e7cb      	b.n	12fa0 <_ZN13N25Q256_Class8SelfTestEv+0xf0>
		}
					
	}
	return	isOK;
   13008:	f107 0310 	add.w	r3, r7, #16
   1300c:	3b0c      	subs	r3, #12
   1300e:	681b      	ldr	r3, [r3, #0]
   13010:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
}
   13014:	4618      	mov	r0, r3
   13016:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   1301a:	3714      	adds	r7, #20
   1301c:	46bd      	mov	sp, r7
   1301e:	bd90      	pop	{r4, r7, pc}
   13020:	00012db9 	.word	0x00012db9
   13024:	00012e69 	.word	0x00012e69
   13028:	00012d55 	.word	0x00012d55
   1302c:	00012d85 	.word	0x00012d85

00013030 <_Z41__static_initialization_and_destruction_0ii>:
 N25Q256_Class	qspiFlash(&QSPI_N25Q256);
   13030:	b580      	push	{r7, lr}
   13032:	b082      	sub	sp, #8
   13034:	af00      	add	r7, sp, #0
   13036:	6078      	str	r0, [r7, #4]
   13038:	6039      	str	r1, [r7, #0]
   1303a:	687b      	ldr	r3, [r7, #4]
   1303c:	2b01      	cmp	r3, #1
   1303e:	d10d      	bne.n	1305c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   13040:	683b      	ldr	r3, [r7, #0]
   13042:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13046:	4293      	cmp	r3, r2
   13048:	d108      	bne.n	1305c <_Z41__static_initialization_and_destruction_0ii+0x2c>
   1304a:	4906      	ldr	r1, [pc, #24]	; (13064 <_Z41__static_initialization_and_destruction_0ii+0x34>)
   1304c:	4806      	ldr	r0, [pc, #24]	; (13068 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   1304e:	4b07      	ldr	r3, [pc, #28]	; (1306c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
   13050:	4798      	blx	r3
   13052:	4a07      	ldr	r2, [pc, #28]	; (13070 <_Z41__static_initialization_and_destruction_0ii+0x40>)
   13054:	4907      	ldr	r1, [pc, #28]	; (13074 <_Z41__static_initialization_and_destruction_0ii+0x44>)
   13056:	4804      	ldr	r0, [pc, #16]	; (13068 <_Z41__static_initialization_and_destruction_0ii+0x38>)
   13058:	4b07      	ldr	r3, [pc, #28]	; (13078 <_Z41__static_initialization_and_destruction_0ii+0x48>)
   1305a:	4798      	blx	r3
   1305c:	bf00      	nop
   1305e:	3708      	adds	r7, #8
   13060:	46bd      	mov	sp, r7
   13062:	bd80      	pop	{r7, pc}
   13064:	20009e38 	.word	0x20009e38
   13068:	20009b78 	.word	0x20009b78
   1306c:	00012cad 	.word	0x00012cad
   13070:	20000000 	.word	0x20000000
   13074:	00012cd5 	.word	0x00012cd5
   13078:	00013091 	.word	0x00013091

0001307c <_GLOBAL__sub_I_ptrN25Q256Class>:
   1307c:	b580      	push	{r7, lr}
   1307e:	af00      	add	r7, sp, #0
   13080:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13084:	2001      	movs	r0, #1
   13086:	4b01      	ldr	r3, [pc, #4]	; (1308c <_GLOBAL__sub_I_ptrN25Q256Class+0x10>)
   13088:	4798      	blx	r3
   1308a:	bd80      	pop	{r7, pc}
   1308c:	00013031 	.word	0x00013031

00013090 <__aeabi_atexit>:
   13090:	460b      	mov	r3, r1
   13092:	4601      	mov	r1, r0
   13094:	4618      	mov	r0, r3
   13096:	f000 ba7f 	b.w	13598 <__cxa_atexit>
   1309a:	bf00      	nop

0001309c <__aeabi_frsub>:
   1309c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   130a0:	e002      	b.n	130a8 <__addsf3>
   130a2:	bf00      	nop

000130a4 <__aeabi_fsub>:
   130a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000130a8 <__addsf3>:
   130a8:	0042      	lsls	r2, r0, #1
   130aa:	bf1f      	itttt	ne
   130ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   130b0:	ea92 0f03 	teqne	r2, r3
   130b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   130b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   130bc:	d06a      	beq.n	13194 <__addsf3+0xec>
   130be:	ea4f 6212 	mov.w	r2, r2, lsr #24
   130c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   130c6:	bfc1      	itttt	gt
   130c8:	18d2      	addgt	r2, r2, r3
   130ca:	4041      	eorgt	r1, r0
   130cc:	4048      	eorgt	r0, r1
   130ce:	4041      	eorgt	r1, r0
   130d0:	bfb8      	it	lt
   130d2:	425b      	neglt	r3, r3
   130d4:	2b19      	cmp	r3, #25
   130d6:	bf88      	it	hi
   130d8:	4770      	bxhi	lr
   130da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   130de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   130e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   130e6:	bf18      	it	ne
   130e8:	4240      	negne	r0, r0
   130ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   130ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   130f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   130f6:	bf18      	it	ne
   130f8:	4249      	negne	r1, r1
   130fa:	ea92 0f03 	teq	r2, r3
   130fe:	d03f      	beq.n	13180 <__addsf3+0xd8>
   13100:	f1a2 0201 	sub.w	r2, r2, #1
   13104:	fa41 fc03 	asr.w	ip, r1, r3
   13108:	eb10 000c 	adds.w	r0, r0, ip
   1310c:	f1c3 0320 	rsb	r3, r3, #32
   13110:	fa01 f103 	lsl.w	r1, r1, r3
   13114:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   13118:	d502      	bpl.n	13120 <__addsf3+0x78>
   1311a:	4249      	negs	r1, r1
   1311c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   13120:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13124:	d313      	bcc.n	1314e <__addsf3+0xa6>
   13126:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1312a:	d306      	bcc.n	1313a <__addsf3+0x92>
   1312c:	0840      	lsrs	r0, r0, #1
   1312e:	ea4f 0131 	mov.w	r1, r1, rrx
   13132:	f102 0201 	add.w	r2, r2, #1
   13136:	2afe      	cmp	r2, #254	; 0xfe
   13138:	d251      	bcs.n	131de <__addsf3+0x136>
   1313a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1313e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   13142:	bf08      	it	eq
   13144:	f020 0001 	biceq.w	r0, r0, #1
   13148:	ea40 0003 	orr.w	r0, r0, r3
   1314c:	4770      	bx	lr
   1314e:	0049      	lsls	r1, r1, #1
   13150:	eb40 0000 	adc.w	r0, r0, r0
   13154:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   13158:	f1a2 0201 	sub.w	r2, r2, #1
   1315c:	d1ed      	bne.n	1313a <__addsf3+0x92>
   1315e:	fab0 fc80 	clz	ip, r0
   13162:	f1ac 0c08 	sub.w	ip, ip, #8
   13166:	ebb2 020c 	subs.w	r2, r2, ip
   1316a:	fa00 f00c 	lsl.w	r0, r0, ip
   1316e:	bfaa      	itet	ge
   13170:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   13174:	4252      	neglt	r2, r2
   13176:	4318      	orrge	r0, r3
   13178:	bfbc      	itt	lt
   1317a:	40d0      	lsrlt	r0, r2
   1317c:	4318      	orrlt	r0, r3
   1317e:	4770      	bx	lr
   13180:	f092 0f00 	teq	r2, #0
   13184:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   13188:	bf06      	itte	eq
   1318a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1318e:	3201      	addeq	r2, #1
   13190:	3b01      	subne	r3, #1
   13192:	e7b5      	b.n	13100 <__addsf3+0x58>
   13194:	ea4f 0341 	mov.w	r3, r1, lsl #1
   13198:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1319c:	bf18      	it	ne
   1319e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   131a2:	d021      	beq.n	131e8 <__addsf3+0x140>
   131a4:	ea92 0f03 	teq	r2, r3
   131a8:	d004      	beq.n	131b4 <__addsf3+0x10c>
   131aa:	f092 0f00 	teq	r2, #0
   131ae:	bf08      	it	eq
   131b0:	4608      	moveq	r0, r1
   131b2:	4770      	bx	lr
   131b4:	ea90 0f01 	teq	r0, r1
   131b8:	bf1c      	itt	ne
   131ba:	2000      	movne	r0, #0
   131bc:	4770      	bxne	lr
   131be:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   131c2:	d104      	bne.n	131ce <__addsf3+0x126>
   131c4:	0040      	lsls	r0, r0, #1
   131c6:	bf28      	it	cs
   131c8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   131cc:	4770      	bx	lr
   131ce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   131d2:	bf3c      	itt	cc
   131d4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   131d8:	4770      	bxcc	lr
   131da:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   131de:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   131e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   131e6:	4770      	bx	lr
   131e8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   131ec:	bf16      	itet	ne
   131ee:	4608      	movne	r0, r1
   131f0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   131f4:	4601      	movne	r1, r0
   131f6:	0242      	lsls	r2, r0, #9
   131f8:	bf06      	itte	eq
   131fa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   131fe:	ea90 0f01 	teqeq	r0, r1
   13202:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   13206:	4770      	bx	lr

00013208 <__aeabi_ui2f>:
   13208:	f04f 0300 	mov.w	r3, #0
   1320c:	e004      	b.n	13218 <__aeabi_i2f+0x8>
   1320e:	bf00      	nop

00013210 <__aeabi_i2f>:
   13210:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   13214:	bf48      	it	mi
   13216:	4240      	negmi	r0, r0
   13218:	ea5f 0c00 	movs.w	ip, r0
   1321c:	bf08      	it	eq
   1321e:	4770      	bxeq	lr
   13220:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   13224:	4601      	mov	r1, r0
   13226:	f04f 0000 	mov.w	r0, #0
   1322a:	e01c      	b.n	13266 <__aeabi_l2f+0x2a>

0001322c <__aeabi_ul2f>:
   1322c:	ea50 0201 	orrs.w	r2, r0, r1
   13230:	bf08      	it	eq
   13232:	4770      	bxeq	lr
   13234:	f04f 0300 	mov.w	r3, #0
   13238:	e00a      	b.n	13250 <__aeabi_l2f+0x14>
   1323a:	bf00      	nop

0001323c <__aeabi_l2f>:
   1323c:	ea50 0201 	orrs.w	r2, r0, r1
   13240:	bf08      	it	eq
   13242:	4770      	bxeq	lr
   13244:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   13248:	d502      	bpl.n	13250 <__aeabi_l2f+0x14>
   1324a:	4240      	negs	r0, r0
   1324c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13250:	ea5f 0c01 	movs.w	ip, r1
   13254:	bf02      	ittt	eq
   13256:	4684      	moveq	ip, r0
   13258:	4601      	moveq	r1, r0
   1325a:	2000      	moveq	r0, #0
   1325c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   13260:	bf08      	it	eq
   13262:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   13266:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1326a:	fabc f28c 	clz	r2, ip
   1326e:	3a08      	subs	r2, #8
   13270:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   13274:	db10      	blt.n	13298 <__aeabi_l2f+0x5c>
   13276:	fa01 fc02 	lsl.w	ip, r1, r2
   1327a:	4463      	add	r3, ip
   1327c:	fa00 fc02 	lsl.w	ip, r0, r2
   13280:	f1c2 0220 	rsb	r2, r2, #32
   13284:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   13288:	fa20 f202 	lsr.w	r2, r0, r2
   1328c:	eb43 0002 	adc.w	r0, r3, r2
   13290:	bf08      	it	eq
   13292:	f020 0001 	biceq.w	r0, r0, #1
   13296:	4770      	bx	lr
   13298:	f102 0220 	add.w	r2, r2, #32
   1329c:	fa01 fc02 	lsl.w	ip, r1, r2
   132a0:	f1c2 0220 	rsb	r2, r2, #32
   132a4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   132a8:	fa21 f202 	lsr.w	r2, r1, r2
   132ac:	eb43 0002 	adc.w	r0, r3, r2
   132b0:	bf08      	it	eq
   132b2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   132b6:	4770      	bx	lr

000132b8 <__aeabi_fmul>:
   132b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   132bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   132c0:	bf1e      	ittt	ne
   132c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   132c6:	ea92 0f0c 	teqne	r2, ip
   132ca:	ea93 0f0c 	teqne	r3, ip
   132ce:	d06f      	beq.n	133b0 <__aeabi_fmul+0xf8>
   132d0:	441a      	add	r2, r3
   132d2:	ea80 0c01 	eor.w	ip, r0, r1
   132d6:	0240      	lsls	r0, r0, #9
   132d8:	bf18      	it	ne
   132da:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   132de:	d01e      	beq.n	1331e <__aeabi_fmul+0x66>
   132e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   132e4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   132e8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   132ec:	fba0 3101 	umull	r3, r1, r0, r1
   132f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   132f4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   132f8:	bf3e      	ittt	cc
   132fa:	0049      	lslcc	r1, r1, #1
   132fc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   13300:	005b      	lslcc	r3, r3, #1
   13302:	ea40 0001 	orr.w	r0, r0, r1
   13306:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1330a:	2afd      	cmp	r2, #253	; 0xfd
   1330c:	d81d      	bhi.n	1334a <__aeabi_fmul+0x92>
   1330e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   13312:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   13316:	bf08      	it	eq
   13318:	f020 0001 	biceq.w	r0, r0, #1
   1331c:	4770      	bx	lr
   1331e:	f090 0f00 	teq	r0, #0
   13322:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   13326:	bf08      	it	eq
   13328:	0249      	lsleq	r1, r1, #9
   1332a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1332e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   13332:	3a7f      	subs	r2, #127	; 0x7f
   13334:	bfc2      	ittt	gt
   13336:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1333a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1333e:	4770      	bxgt	lr
   13340:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13344:	f04f 0300 	mov.w	r3, #0
   13348:	3a01      	subs	r2, #1
   1334a:	dc5d      	bgt.n	13408 <__aeabi_fmul+0x150>
   1334c:	f112 0f19 	cmn.w	r2, #25
   13350:	bfdc      	itt	le
   13352:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   13356:	4770      	bxle	lr
   13358:	f1c2 0200 	rsb	r2, r2, #0
   1335c:	0041      	lsls	r1, r0, #1
   1335e:	fa21 f102 	lsr.w	r1, r1, r2
   13362:	f1c2 0220 	rsb	r2, r2, #32
   13366:	fa00 fc02 	lsl.w	ip, r0, r2
   1336a:	ea5f 0031 	movs.w	r0, r1, rrx
   1336e:	f140 0000 	adc.w	r0, r0, #0
   13372:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   13376:	bf08      	it	eq
   13378:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1337c:	4770      	bx	lr
   1337e:	f092 0f00 	teq	r2, #0
   13382:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   13386:	bf02      	ittt	eq
   13388:	0040      	lsleq	r0, r0, #1
   1338a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1338e:	3a01      	subeq	r2, #1
   13390:	d0f9      	beq.n	13386 <__aeabi_fmul+0xce>
   13392:	ea40 000c 	orr.w	r0, r0, ip
   13396:	f093 0f00 	teq	r3, #0
   1339a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1339e:	bf02      	ittt	eq
   133a0:	0049      	lsleq	r1, r1, #1
   133a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   133a6:	3b01      	subeq	r3, #1
   133a8:	d0f9      	beq.n	1339e <__aeabi_fmul+0xe6>
   133aa:	ea41 010c 	orr.w	r1, r1, ip
   133ae:	e78f      	b.n	132d0 <__aeabi_fmul+0x18>
   133b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   133b4:	ea92 0f0c 	teq	r2, ip
   133b8:	bf18      	it	ne
   133ba:	ea93 0f0c 	teqne	r3, ip
   133be:	d00a      	beq.n	133d6 <__aeabi_fmul+0x11e>
   133c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   133c4:	bf18      	it	ne
   133c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   133ca:	d1d8      	bne.n	1337e <__aeabi_fmul+0xc6>
   133cc:	ea80 0001 	eor.w	r0, r0, r1
   133d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   133d4:	4770      	bx	lr
   133d6:	f090 0f00 	teq	r0, #0
   133da:	bf17      	itett	ne
   133dc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   133e0:	4608      	moveq	r0, r1
   133e2:	f091 0f00 	teqne	r1, #0
   133e6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   133ea:	d014      	beq.n	13416 <__aeabi_fmul+0x15e>
   133ec:	ea92 0f0c 	teq	r2, ip
   133f0:	d101      	bne.n	133f6 <__aeabi_fmul+0x13e>
   133f2:	0242      	lsls	r2, r0, #9
   133f4:	d10f      	bne.n	13416 <__aeabi_fmul+0x15e>
   133f6:	ea93 0f0c 	teq	r3, ip
   133fa:	d103      	bne.n	13404 <__aeabi_fmul+0x14c>
   133fc:	024b      	lsls	r3, r1, #9
   133fe:	bf18      	it	ne
   13400:	4608      	movne	r0, r1
   13402:	d108      	bne.n	13416 <__aeabi_fmul+0x15e>
   13404:	ea80 0001 	eor.w	r0, r0, r1
   13408:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1340c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   13410:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13414:	4770      	bx	lr
   13416:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1341a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1341e:	4770      	bx	lr

00013420 <__aeabi_fdiv>:
   13420:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13424:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   13428:	bf1e      	ittt	ne
   1342a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1342e:	ea92 0f0c 	teqne	r2, ip
   13432:	ea93 0f0c 	teqne	r3, ip
   13436:	d069      	beq.n	1350c <__aeabi_fdiv+0xec>
   13438:	eba2 0203 	sub.w	r2, r2, r3
   1343c:	ea80 0c01 	eor.w	ip, r0, r1
   13440:	0249      	lsls	r1, r1, #9
   13442:	ea4f 2040 	mov.w	r0, r0, lsl #9
   13446:	d037      	beq.n	134b8 <__aeabi_fdiv+0x98>
   13448:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1344c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   13450:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   13454:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   13458:	428b      	cmp	r3, r1
   1345a:	bf38      	it	cc
   1345c:	005b      	lslcc	r3, r3, #1
   1345e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   13462:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   13466:	428b      	cmp	r3, r1
   13468:	bf24      	itt	cs
   1346a:	1a5b      	subcs	r3, r3, r1
   1346c:	ea40 000c 	orrcs.w	r0, r0, ip
   13470:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   13474:	bf24      	itt	cs
   13476:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1347a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1347e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   13482:	bf24      	itt	cs
   13484:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   13488:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1348c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   13490:	bf24      	itt	cs
   13492:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   13496:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1349a:	011b      	lsls	r3, r3, #4
   1349c:	bf18      	it	ne
   1349e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   134a2:	d1e0      	bne.n	13466 <__aeabi_fdiv+0x46>
   134a4:	2afd      	cmp	r2, #253	; 0xfd
   134a6:	f63f af50 	bhi.w	1334a <__aeabi_fmul+0x92>
   134aa:	428b      	cmp	r3, r1
   134ac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   134b0:	bf08      	it	eq
   134b2:	f020 0001 	biceq.w	r0, r0, #1
   134b6:	4770      	bx	lr
   134b8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   134bc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   134c0:	327f      	adds	r2, #127	; 0x7f
   134c2:	bfc2      	ittt	gt
   134c4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   134c8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   134cc:	4770      	bxgt	lr
   134ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   134d2:	f04f 0300 	mov.w	r3, #0
   134d6:	3a01      	subs	r2, #1
   134d8:	e737      	b.n	1334a <__aeabi_fmul+0x92>
   134da:	f092 0f00 	teq	r2, #0
   134de:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   134e2:	bf02      	ittt	eq
   134e4:	0040      	lsleq	r0, r0, #1
   134e6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   134ea:	3a01      	subeq	r2, #1
   134ec:	d0f9      	beq.n	134e2 <__aeabi_fdiv+0xc2>
   134ee:	ea40 000c 	orr.w	r0, r0, ip
   134f2:	f093 0f00 	teq	r3, #0
   134f6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   134fa:	bf02      	ittt	eq
   134fc:	0049      	lsleq	r1, r1, #1
   134fe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   13502:	3b01      	subeq	r3, #1
   13504:	d0f9      	beq.n	134fa <__aeabi_fdiv+0xda>
   13506:	ea41 010c 	orr.w	r1, r1, ip
   1350a:	e795      	b.n	13438 <__aeabi_fdiv+0x18>
   1350c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   13510:	ea92 0f0c 	teq	r2, ip
   13514:	d108      	bne.n	13528 <__aeabi_fdiv+0x108>
   13516:	0242      	lsls	r2, r0, #9
   13518:	f47f af7d 	bne.w	13416 <__aeabi_fmul+0x15e>
   1351c:	ea93 0f0c 	teq	r3, ip
   13520:	f47f af70 	bne.w	13404 <__aeabi_fmul+0x14c>
   13524:	4608      	mov	r0, r1
   13526:	e776      	b.n	13416 <__aeabi_fmul+0x15e>
   13528:	ea93 0f0c 	teq	r3, ip
   1352c:	d104      	bne.n	13538 <__aeabi_fdiv+0x118>
   1352e:	024b      	lsls	r3, r1, #9
   13530:	f43f af4c 	beq.w	133cc <__aeabi_fmul+0x114>
   13534:	4608      	mov	r0, r1
   13536:	e76e      	b.n	13416 <__aeabi_fmul+0x15e>
   13538:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1353c:	bf18      	it	ne
   1353e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   13542:	d1ca      	bne.n	134da <__aeabi_fdiv+0xba>
   13544:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   13548:	f47f af5c 	bne.w	13404 <__aeabi_fmul+0x14c>
   1354c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   13550:	f47f af3c 	bne.w	133cc <__aeabi_fmul+0x114>
   13554:	e75f      	b.n	13416 <__aeabi_fmul+0x15e>
   13556:	bf00      	nop

00013558 <__aeabi_f2uiz>:
   13558:	0042      	lsls	r2, r0, #1
   1355a:	d20e      	bcs.n	1357a <__aeabi_f2uiz+0x22>
   1355c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   13560:	d30b      	bcc.n	1357a <__aeabi_f2uiz+0x22>
   13562:	f04f 039e 	mov.w	r3, #158	; 0x9e
   13566:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1356a:	d409      	bmi.n	13580 <__aeabi_f2uiz+0x28>
   1356c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   13570:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13574:	fa23 f002 	lsr.w	r0, r3, r2
   13578:	4770      	bx	lr
   1357a:	f04f 0000 	mov.w	r0, #0
   1357e:	4770      	bx	lr
   13580:	f112 0f61 	cmn.w	r2, #97	; 0x61
   13584:	d101      	bne.n	1358a <__aeabi_f2uiz+0x32>
   13586:	0242      	lsls	r2, r0, #9
   13588:	d102      	bne.n	13590 <__aeabi_f2uiz+0x38>
   1358a:	f04f 30ff 	mov.w	r0, #4294967295
   1358e:	4770      	bx	lr
   13590:	f04f 0000 	mov.w	r0, #0
   13594:	4770      	bx	lr
   13596:	bf00      	nop

00013598 <__cxa_atexit>:
   13598:	4613      	mov	r3, r2
   1359a:	460a      	mov	r2, r1
   1359c:	4601      	mov	r1, r0
   1359e:	2002      	movs	r0, #2
   135a0:	f000 b99c 	b.w	138dc <__register_exitproc>

000135a4 <ffs>:
   135a4:	b140      	cbz	r0, 135b8 <ffs+0x14>
   135a6:	2300      	movs	r3, #0
   135a8:	fa40 f103 	asr.w	r1, r0, r3
   135ac:	1c5a      	adds	r2, r3, #1
   135ae:	07c9      	lsls	r1, r1, #31
   135b0:	4613      	mov	r3, r2
   135b2:	d5f9      	bpl.n	135a8 <ffs+0x4>
   135b4:	4610      	mov	r0, r2
   135b6:	4770      	bx	lr
   135b8:	4602      	mov	r2, r0
   135ba:	4610      	mov	r0, r2
   135bc:	4770      	bx	lr
   135be:	bf00      	nop

000135c0 <__libc_init_array>:
   135c0:	b570      	push	{r4, r5, r6, lr}
   135c2:	4e0f      	ldr	r6, [pc, #60]	; (13600 <__libc_init_array+0x40>)
   135c4:	4d0f      	ldr	r5, [pc, #60]	; (13604 <__libc_init_array+0x44>)
   135c6:	1b76      	subs	r6, r6, r5
   135c8:	10b6      	asrs	r6, r6, #2
   135ca:	bf18      	it	ne
   135cc:	2400      	movne	r4, #0
   135ce:	d005      	beq.n	135dc <__libc_init_array+0x1c>
   135d0:	3401      	adds	r4, #1
   135d2:	f855 3b04 	ldr.w	r3, [r5], #4
   135d6:	4798      	blx	r3
   135d8:	42a6      	cmp	r6, r4
   135da:	d1f9      	bne.n	135d0 <__libc_init_array+0x10>
   135dc:	4e0a      	ldr	r6, [pc, #40]	; (13608 <__libc_init_array+0x48>)
   135de:	4d0b      	ldr	r5, [pc, #44]	; (1360c <__libc_init_array+0x4c>)
   135e0:	1b76      	subs	r6, r6, r5
   135e2:	f000 fcab 	bl	13f3c <_init>
   135e6:	10b6      	asrs	r6, r6, #2
   135e8:	bf18      	it	ne
   135ea:	2400      	movne	r4, #0
   135ec:	d006      	beq.n	135fc <__libc_init_array+0x3c>
   135ee:	3401      	adds	r4, #1
   135f0:	f855 3b04 	ldr.w	r3, [r5], #4
   135f4:	4798      	blx	r3
   135f6:	42a6      	cmp	r6, r4
   135f8:	d1f9      	bne.n	135ee <__libc_init_array+0x2e>
   135fa:	bd70      	pop	{r4, r5, r6, pc}
   135fc:	bd70      	pop	{r4, r5, r6, pc}
   135fe:	bf00      	nop
   13600:	00013f48 	.word	0x00013f48
   13604:	00013f48 	.word	0x00013f48
   13608:	00013f90 	.word	0x00013f90
   1360c:	00013f48 	.word	0x00013f48

00013610 <memcpy>:
   13610:	4684      	mov	ip, r0
   13612:	ea41 0300 	orr.w	r3, r1, r0
   13616:	f013 0303 	ands.w	r3, r3, #3
   1361a:	d16d      	bne.n	136f8 <memcpy+0xe8>
   1361c:	3a40      	subs	r2, #64	; 0x40
   1361e:	d341      	bcc.n	136a4 <memcpy+0x94>
   13620:	f851 3b04 	ldr.w	r3, [r1], #4
   13624:	f840 3b04 	str.w	r3, [r0], #4
   13628:	f851 3b04 	ldr.w	r3, [r1], #4
   1362c:	f840 3b04 	str.w	r3, [r0], #4
   13630:	f851 3b04 	ldr.w	r3, [r1], #4
   13634:	f840 3b04 	str.w	r3, [r0], #4
   13638:	f851 3b04 	ldr.w	r3, [r1], #4
   1363c:	f840 3b04 	str.w	r3, [r0], #4
   13640:	f851 3b04 	ldr.w	r3, [r1], #4
   13644:	f840 3b04 	str.w	r3, [r0], #4
   13648:	f851 3b04 	ldr.w	r3, [r1], #4
   1364c:	f840 3b04 	str.w	r3, [r0], #4
   13650:	f851 3b04 	ldr.w	r3, [r1], #4
   13654:	f840 3b04 	str.w	r3, [r0], #4
   13658:	f851 3b04 	ldr.w	r3, [r1], #4
   1365c:	f840 3b04 	str.w	r3, [r0], #4
   13660:	f851 3b04 	ldr.w	r3, [r1], #4
   13664:	f840 3b04 	str.w	r3, [r0], #4
   13668:	f851 3b04 	ldr.w	r3, [r1], #4
   1366c:	f840 3b04 	str.w	r3, [r0], #4
   13670:	f851 3b04 	ldr.w	r3, [r1], #4
   13674:	f840 3b04 	str.w	r3, [r0], #4
   13678:	f851 3b04 	ldr.w	r3, [r1], #4
   1367c:	f840 3b04 	str.w	r3, [r0], #4
   13680:	f851 3b04 	ldr.w	r3, [r1], #4
   13684:	f840 3b04 	str.w	r3, [r0], #4
   13688:	f851 3b04 	ldr.w	r3, [r1], #4
   1368c:	f840 3b04 	str.w	r3, [r0], #4
   13690:	f851 3b04 	ldr.w	r3, [r1], #4
   13694:	f840 3b04 	str.w	r3, [r0], #4
   13698:	f851 3b04 	ldr.w	r3, [r1], #4
   1369c:	f840 3b04 	str.w	r3, [r0], #4
   136a0:	3a40      	subs	r2, #64	; 0x40
   136a2:	d2bd      	bcs.n	13620 <memcpy+0x10>
   136a4:	3230      	adds	r2, #48	; 0x30
   136a6:	d311      	bcc.n	136cc <memcpy+0xbc>
   136a8:	f851 3b04 	ldr.w	r3, [r1], #4
   136ac:	f840 3b04 	str.w	r3, [r0], #4
   136b0:	f851 3b04 	ldr.w	r3, [r1], #4
   136b4:	f840 3b04 	str.w	r3, [r0], #4
   136b8:	f851 3b04 	ldr.w	r3, [r1], #4
   136bc:	f840 3b04 	str.w	r3, [r0], #4
   136c0:	f851 3b04 	ldr.w	r3, [r1], #4
   136c4:	f840 3b04 	str.w	r3, [r0], #4
   136c8:	3a10      	subs	r2, #16
   136ca:	d2ed      	bcs.n	136a8 <memcpy+0x98>
   136cc:	320c      	adds	r2, #12
   136ce:	d305      	bcc.n	136dc <memcpy+0xcc>
   136d0:	f851 3b04 	ldr.w	r3, [r1], #4
   136d4:	f840 3b04 	str.w	r3, [r0], #4
   136d8:	3a04      	subs	r2, #4
   136da:	d2f9      	bcs.n	136d0 <memcpy+0xc0>
   136dc:	3204      	adds	r2, #4
   136de:	d008      	beq.n	136f2 <memcpy+0xe2>
   136e0:	07d2      	lsls	r2, r2, #31
   136e2:	bf1c      	itt	ne
   136e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   136e8:	f800 3b01 	strbne.w	r3, [r0], #1
   136ec:	d301      	bcc.n	136f2 <memcpy+0xe2>
   136ee:	880b      	ldrh	r3, [r1, #0]
   136f0:	8003      	strh	r3, [r0, #0]
   136f2:	4660      	mov	r0, ip
   136f4:	4770      	bx	lr
   136f6:	bf00      	nop
   136f8:	2a08      	cmp	r2, #8
   136fa:	d313      	bcc.n	13724 <memcpy+0x114>
   136fc:	078b      	lsls	r3, r1, #30
   136fe:	d08d      	beq.n	1361c <memcpy+0xc>
   13700:	f010 0303 	ands.w	r3, r0, #3
   13704:	d08a      	beq.n	1361c <memcpy+0xc>
   13706:	f1c3 0304 	rsb	r3, r3, #4
   1370a:	1ad2      	subs	r2, r2, r3
   1370c:	07db      	lsls	r3, r3, #31
   1370e:	bf1c      	itt	ne
   13710:	f811 3b01 	ldrbne.w	r3, [r1], #1
   13714:	f800 3b01 	strbne.w	r3, [r0], #1
   13718:	d380      	bcc.n	1361c <memcpy+0xc>
   1371a:	f831 3b02 	ldrh.w	r3, [r1], #2
   1371e:	f820 3b02 	strh.w	r3, [r0], #2
   13722:	e77b      	b.n	1361c <memcpy+0xc>
   13724:	3a04      	subs	r2, #4
   13726:	d3d9      	bcc.n	136dc <memcpy+0xcc>
   13728:	3a01      	subs	r2, #1
   1372a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1372e:	f800 3b01 	strb.w	r3, [r0], #1
   13732:	d2f9      	bcs.n	13728 <memcpy+0x118>
   13734:	780b      	ldrb	r3, [r1, #0]
   13736:	7003      	strb	r3, [r0, #0]
   13738:	784b      	ldrb	r3, [r1, #1]
   1373a:	7043      	strb	r3, [r0, #1]
   1373c:	788b      	ldrb	r3, [r1, #2]
   1373e:	7083      	strb	r3, [r0, #2]
   13740:	4660      	mov	r0, ip
   13742:	4770      	bx	lr

00013744 <memset>:
   13744:	b470      	push	{r4, r5, r6}
   13746:	0786      	lsls	r6, r0, #30
   13748:	d046      	beq.n	137d8 <memset+0x94>
   1374a:	1e54      	subs	r4, r2, #1
   1374c:	2a00      	cmp	r2, #0
   1374e:	d041      	beq.n	137d4 <memset+0x90>
   13750:	b2ca      	uxtb	r2, r1
   13752:	4603      	mov	r3, r0
   13754:	e002      	b.n	1375c <memset+0x18>
   13756:	f114 34ff 	adds.w	r4, r4, #4294967295
   1375a:	d33b      	bcc.n	137d4 <memset+0x90>
   1375c:	f803 2b01 	strb.w	r2, [r3], #1
   13760:	079d      	lsls	r5, r3, #30
   13762:	d1f8      	bne.n	13756 <memset+0x12>
   13764:	2c03      	cmp	r4, #3
   13766:	d92e      	bls.n	137c6 <memset+0x82>
   13768:	b2cd      	uxtb	r5, r1
   1376a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1376e:	2c0f      	cmp	r4, #15
   13770:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   13774:	d919      	bls.n	137aa <memset+0x66>
   13776:	f103 0210 	add.w	r2, r3, #16
   1377a:	4626      	mov	r6, r4
   1377c:	3e10      	subs	r6, #16
   1377e:	2e0f      	cmp	r6, #15
   13780:	f842 5c10 	str.w	r5, [r2, #-16]
   13784:	f842 5c0c 	str.w	r5, [r2, #-12]
   13788:	f842 5c08 	str.w	r5, [r2, #-8]
   1378c:	f842 5c04 	str.w	r5, [r2, #-4]
   13790:	f102 0210 	add.w	r2, r2, #16
   13794:	d8f2      	bhi.n	1377c <memset+0x38>
   13796:	f1a4 0210 	sub.w	r2, r4, #16
   1379a:	f022 020f 	bic.w	r2, r2, #15
   1379e:	f004 040f 	and.w	r4, r4, #15
   137a2:	3210      	adds	r2, #16
   137a4:	2c03      	cmp	r4, #3
   137a6:	4413      	add	r3, r2
   137a8:	d90d      	bls.n	137c6 <memset+0x82>
   137aa:	461e      	mov	r6, r3
   137ac:	4622      	mov	r2, r4
   137ae:	3a04      	subs	r2, #4
   137b0:	2a03      	cmp	r2, #3
   137b2:	f846 5b04 	str.w	r5, [r6], #4
   137b6:	d8fa      	bhi.n	137ae <memset+0x6a>
   137b8:	1f22      	subs	r2, r4, #4
   137ba:	f022 0203 	bic.w	r2, r2, #3
   137be:	3204      	adds	r2, #4
   137c0:	4413      	add	r3, r2
   137c2:	f004 0403 	and.w	r4, r4, #3
   137c6:	b12c      	cbz	r4, 137d4 <memset+0x90>
   137c8:	b2c9      	uxtb	r1, r1
   137ca:	441c      	add	r4, r3
   137cc:	f803 1b01 	strb.w	r1, [r3], #1
   137d0:	429c      	cmp	r4, r3
   137d2:	d1fb      	bne.n	137cc <memset+0x88>
   137d4:	bc70      	pop	{r4, r5, r6}
   137d6:	4770      	bx	lr
   137d8:	4614      	mov	r4, r2
   137da:	4603      	mov	r3, r0
   137dc:	e7c2      	b.n	13764 <memset+0x20>
   137de:	bf00      	nop
	...

00013800 <strlen>:
   13800:	f890 f000 	pld	[r0]
   13804:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   13808:	f020 0107 	bic.w	r1, r0, #7
   1380c:	f06f 0c00 	mvn.w	ip, #0
   13810:	f010 0407 	ands.w	r4, r0, #7
   13814:	f891 f020 	pld	[r1, #32]
   13818:	f040 8049 	bne.w	138ae <strlen+0xae>
   1381c:	f04f 0400 	mov.w	r4, #0
   13820:	f06f 0007 	mvn.w	r0, #7
   13824:	e9d1 2300 	ldrd	r2, r3, [r1]
   13828:	f891 f040 	pld	[r1, #64]	; 0x40
   1382c:	f100 0008 	add.w	r0, r0, #8
   13830:	fa82 f24c 	uadd8	r2, r2, ip
   13834:	faa4 f28c 	sel	r2, r4, ip
   13838:	fa83 f34c 	uadd8	r3, r3, ip
   1383c:	faa2 f38c 	sel	r3, r2, ip
   13840:	bb4b      	cbnz	r3, 13896 <strlen+0x96>
   13842:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   13846:	fa82 f24c 	uadd8	r2, r2, ip
   1384a:	f100 0008 	add.w	r0, r0, #8
   1384e:	faa4 f28c 	sel	r2, r4, ip
   13852:	fa83 f34c 	uadd8	r3, r3, ip
   13856:	faa2 f38c 	sel	r3, r2, ip
   1385a:	b9e3      	cbnz	r3, 13896 <strlen+0x96>
   1385c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   13860:	fa82 f24c 	uadd8	r2, r2, ip
   13864:	f100 0008 	add.w	r0, r0, #8
   13868:	faa4 f28c 	sel	r2, r4, ip
   1386c:	fa83 f34c 	uadd8	r3, r3, ip
   13870:	faa2 f38c 	sel	r3, r2, ip
   13874:	b97b      	cbnz	r3, 13896 <strlen+0x96>
   13876:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1387a:	f101 0120 	add.w	r1, r1, #32
   1387e:	fa82 f24c 	uadd8	r2, r2, ip
   13882:	f100 0008 	add.w	r0, r0, #8
   13886:	faa4 f28c 	sel	r2, r4, ip
   1388a:	fa83 f34c 	uadd8	r3, r3, ip
   1388e:	faa2 f38c 	sel	r3, r2, ip
   13892:	2b00      	cmp	r3, #0
   13894:	d0c6      	beq.n	13824 <strlen+0x24>
   13896:	2a00      	cmp	r2, #0
   13898:	bf04      	itt	eq
   1389a:	3004      	addeq	r0, #4
   1389c:	461a      	moveq	r2, r3
   1389e:	ba12      	rev	r2, r2
   138a0:	fab2 f282 	clz	r2, r2
   138a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   138a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   138ac:	4770      	bx	lr
   138ae:	e9d1 2300 	ldrd	r2, r3, [r1]
   138b2:	f004 0503 	and.w	r5, r4, #3
   138b6:	f1c4 0000 	rsb	r0, r4, #0
   138ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   138be:	f014 0f04 	tst.w	r4, #4
   138c2:	f891 f040 	pld	[r1, #64]	; 0x40
   138c6:	fa0c f505 	lsl.w	r5, ip, r5
   138ca:	ea62 0205 	orn	r2, r2, r5
   138ce:	bf1c      	itt	ne
   138d0:	ea63 0305 	ornne	r3, r3, r5
   138d4:	4662      	movne	r2, ip
   138d6:	f04f 0400 	mov.w	r4, #0
   138da:	e7a9      	b.n	13830 <strlen+0x30>

000138dc <__register_exitproc>:
   138dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   138e0:	4d2c      	ldr	r5, [pc, #176]	; (13994 <__register_exitproc+0xb8>)
   138e2:	4606      	mov	r6, r0
   138e4:	6828      	ldr	r0, [r5, #0]
   138e6:	4698      	mov	r8, r3
   138e8:	460f      	mov	r7, r1
   138ea:	4691      	mov	r9, r2
   138ec:	f000 f882 	bl	139f4 <__retarget_lock_acquire_recursive>
   138f0:	4b29      	ldr	r3, [pc, #164]	; (13998 <__register_exitproc+0xbc>)
   138f2:	681c      	ldr	r4, [r3, #0]
   138f4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   138f8:	2b00      	cmp	r3, #0
   138fa:	d03e      	beq.n	1397a <__register_exitproc+0x9e>
   138fc:	685a      	ldr	r2, [r3, #4]
   138fe:	2a1f      	cmp	r2, #31
   13900:	dc1c      	bgt.n	1393c <__register_exitproc+0x60>
   13902:	f102 0e01 	add.w	lr, r2, #1
   13906:	b176      	cbz	r6, 13926 <__register_exitproc+0x4a>
   13908:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1390c:	2401      	movs	r4, #1
   1390e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   13912:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   13916:	4094      	lsls	r4, r2
   13918:	4320      	orrs	r0, r4
   1391a:	2e02      	cmp	r6, #2
   1391c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   13920:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   13924:	d023      	beq.n	1396e <__register_exitproc+0x92>
   13926:	3202      	adds	r2, #2
   13928:	f8c3 e004 	str.w	lr, [r3, #4]
   1392c:	6828      	ldr	r0, [r5, #0]
   1392e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   13932:	f000 f861 	bl	139f8 <__retarget_lock_release_recursive>
   13936:	2000      	movs	r0, #0
   13938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1393c:	4b17      	ldr	r3, [pc, #92]	; (1399c <__register_exitproc+0xc0>)
   1393e:	b30b      	cbz	r3, 13984 <__register_exitproc+0xa8>
   13940:	f44f 70c8 	mov.w	r0, #400	; 0x190
   13944:	f7fb f990 	bl	ec68 <malloc>
   13948:	4603      	mov	r3, r0
   1394a:	b1d8      	cbz	r0, 13984 <__register_exitproc+0xa8>
   1394c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   13950:	6002      	str	r2, [r0, #0]
   13952:	2100      	movs	r1, #0
   13954:	6041      	str	r1, [r0, #4]
   13956:	460a      	mov	r2, r1
   13958:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   1395c:	f04f 0e01 	mov.w	lr, #1
   13960:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   13964:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
   13968:	2e00      	cmp	r6, #0
   1396a:	d0dc      	beq.n	13926 <__register_exitproc+0x4a>
   1396c:	e7cc      	b.n	13908 <__register_exitproc+0x2c>
   1396e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   13972:	430c      	orrs	r4, r1
   13974:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   13978:	e7d5      	b.n	13926 <__register_exitproc+0x4a>
   1397a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   1397e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   13982:	e7bb      	b.n	138fc <__register_exitproc+0x20>
   13984:	6828      	ldr	r0, [r5, #0]
   13986:	f000 f837 	bl	139f8 <__retarget_lock_release_recursive>
   1398a:	f04f 30ff 	mov.w	r0, #4294967295
   1398e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13992:	bf00      	nop
   13994:	20000638 	.word	0x20000638
   13998:	00013f38 	.word	0x00013f38
   1399c:	0000ec69 	.word	0x0000ec69

000139a0 <register_fini>:
   139a0:	4b02      	ldr	r3, [pc, #8]	; (139ac <register_fini+0xc>)
   139a2:	b113      	cbz	r3, 139aa <register_fini+0xa>
   139a4:	4802      	ldr	r0, [pc, #8]	; (139b0 <register_fini+0x10>)
   139a6:	f000 b805 	b.w	139b4 <atexit>
   139aa:	4770      	bx	lr
   139ac:	00000000 	.word	0x00000000
   139b0:	000139c1 	.word	0x000139c1

000139b4 <atexit>:
   139b4:	2300      	movs	r3, #0
   139b6:	4601      	mov	r1, r0
   139b8:	461a      	mov	r2, r3
   139ba:	4618      	mov	r0, r3
   139bc:	f7ff bf8e 	b.w	138dc <__register_exitproc>

000139c0 <__libc_fini_array>:
   139c0:	b538      	push	{r3, r4, r5, lr}
   139c2:	4c0a      	ldr	r4, [pc, #40]	; (139ec <__libc_fini_array+0x2c>)
   139c4:	4d0a      	ldr	r5, [pc, #40]	; (139f0 <__libc_fini_array+0x30>)
   139c6:	1b64      	subs	r4, r4, r5
   139c8:	10a4      	asrs	r4, r4, #2
   139ca:	d00a      	beq.n	139e2 <__libc_fini_array+0x22>
   139cc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   139d0:	3b01      	subs	r3, #1
   139d2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   139d6:	3c01      	subs	r4, #1
   139d8:	f855 3904 	ldr.w	r3, [r5], #-4
   139dc:	4798      	blx	r3
   139de:	2c00      	cmp	r4, #0
   139e0:	d1f9      	bne.n	139d6 <__libc_fini_array+0x16>
   139e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   139e6:	f000 bad3 	b.w	13f90 <_fini>
   139ea:	bf00      	nop
   139ec:	00013fa0 	.word	0x00013fa0
   139f0:	00013f9c 	.word	0x00013f9c

000139f4 <__retarget_lock_acquire_recursive>:
   139f4:	4770      	bx	lr
   139f6:	bf00      	nop

000139f8 <__retarget_lock_release_recursive>:
   139f8:	4770      	bx	lr
   139fa:	bf00      	nop

000139fc <_ZTC16Maintenance_Tool0_16Commands_Handler>:
   139fc:	0140 0000 0000 0000 0000 0000               @...........

00013a08 <_ZTT16Maintenance_Tool>:
   13a08:	3a1c 0001 3a08 0001                         .:...:..

00013a10 <_ZTV16Maintenance_Tool>:
   13a10:	0140 0000 0000 0000 0000 0000 2e2e 682f     @............./h
   13a20:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   13a30:	625f 7361 2e65 0068 2e2e 682f 6c61 692f     _base.h.../hal/i
   13a40:	636e 756c 6564 682f 6c61 775f 7464 682e     nclude/hal_wdt.h
   13a50:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   13a60:	6c61 635f 6c61 6e65 6164 2e72 0063 0000     al_calendar.c...
   13a70:	2e2e 682f 6c61 732f 6372 682f 6c61 635f     ../hal/src/hal_c
   13a80:	6e61 615f 7973 636e 632e 0000 2e2e 682f     an_async.c..../h
   13a90:	6c61 732f 6372 682f 6c61 635f 6372 735f     al/src/hal_crc_s
   13aa0:	6e79 2e63 0063 0000 2e2e 682f 6c61 732f     ync.c...../hal/s
   13ab0:	6372 682f 6c61 695f 6332 6d5f 735f 6e79     rc/hal_i2c_m_syn
   13ac0:	2e63 0063 2e2e 682f 6c61 732f 6372 682f     c.c.../hal/src/h
   13ad0:	6c61 705f 6d77 632e 0000 0000 2e2e 682f     al_pwm.c....../h
   13ae0:	6c61 732f 6372 682f 6c61 715f 7073 5f69     al/src/hal_qspi_
   13af0:	7973 636e 632e 0000 2e2e 682f 6c61 732f     sync.c..../hal/s
   13b00:	6372 682f 6c61 735f 6970 6d5f 735f 6e79     rc/hal_spi_m_syn
   13b10:	2e63 0063 2e2e 682f 6c61 732f 6372 682f     c.c.../hal/src/h
   13b20:	6c61 745f 6d69 7265 632e 0000 2e2e 682f     al_timer.c..../h
   13b30:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
   13b40:	736c 6c5f 7369 2e74 0063 0000               ls_list.c...

00013b4c <_map>:
   13b4c:	0000 0000 0040 0000 0001 0000 0021 0000     ....@.......!...
   13b5c:	0003 0000 0003 0000 0004 0000 0004 0000     ................
   13b6c:	0005 0000 0005 0000 0006 0000 0056 0000     ............V...
   13b7c:	0007 0000 0057 0000 0008 0000 0028 0000     ....W.......(...
   13b8c:	0009 0000 0029 0000 2e2e 682f 6c70 652f     ....)...../hpl/e
   13b9c:	6369 682f 6c70 655f 6369 632e 0000 0000     ic/hpl_eic.c....

00013bac <user_mux_confs>:
   13bac:	0100 0002 0000 0000 0000 0000 0000 0000     ................
	...

00013bf0 <channel_confs>:
   13bf0:	065f 0660 0000 0000 0000 0000 0000 0000     _.`.............
	...

00013c30 <interrupt_cfg>:
	...
   13cb0:	2e2e 682f 6c70 712f 7073 2f69 7068 5f6c     ../hpl/qspi/hpl_
   13cc0:	7371 6970 632e 0000 2e2e 682f 6c70 722f     qspi.c..../hpl/r
   13cd0:	6374 682f 6c70 725f 6374 632e 0000 0000     tc/hpl_rtc.c....
   13ce0:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
   13cf0:	5f6c 6573 6372 6d6f 632e 0000 3000 4000     l_sercom.c...0.@
   13d00:	3400 4000 2000 4101 4000 4101 0000 4300     .4.@. .A.@.A...C
   13d10:	0400 4300 0800 4300 0c00 4300               ...C...C...C

00013d1c <sercomspi_regs>:
   13d1c:	000c 0020 0000 0002 0000 0000 0001 01ff     .. .............
   13d2c:	0c04 3000 0000 0200 0000 0000 1700 ff00     ...0............
   13d3c:	0601 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
   13d4c:	5f6c 6374 632e 0000 3800 4000 3c00 4000     l_tc.c...8.@.<.@
   13d5c:	a000 4101 c000 4101 1400 4200 1800 4200     ...A...A...B...B
   13d6c:	1400 4300 1800 4300                         ...C...C

00013d74 <_usb_ep_cfgs>:
   13d74:	0cf0 2000 0000 0000 0040 0000 0d30 2000     ... ....@...0.. 
   13d84:	0d70 2000 0040 0040 0db0 2000 0df0 2000     p.. @.@.... ... 
   13d94:	0040 0040 0e30 2000 0e70 2000 0040 0040     @.@.0.. p.. @.@.
   13da4:	0eb0 2000 0ef0 2000 0040 0040 0804 0000     ... ... @.@.....
   13db4:	4a25 0000 2e2e 682f 6c70 772f 7464 682f     %J..../hpl/wdt/h
   13dc4:	6c70 775f 7464 632e 0000 0000 2e2e 682f     pl_wdt.c....../h
   13dd4:	6c70 702f 726f 2f74 7068 5f6c 7067 6f69     pl/port/hpl_gpio
   13de4:	625f 7361 2e65 0068                         _base.h.

00013dec <n25q256a_interface>:
   13dec:	c0b9 0000 c15d 0000 c26d 0000 c425 0000     ....]...m...%...
   13dfc:	c4b5 0000 2e2e 752f 6273 642f 7665 6369     ....../usb/devic
   13e0c:	2f65 7375 6462 2e63 0063 0000               e/usbdc.c...

00013e18 <_ZTV9CDC_Class>:
	...
   13e20:	e55d 0000 e63d 0000 e1b1 0000 e525 0000     ]...=.......%...
   13e30:	e6d5 0000 e4e9 0000 e3cd 0000 e41d 0000     ................
   13e40:	e545 0000 e5a5 0000                         E.......

00013e48 <_ZTV6Stream>:
	...
   13e50:	ec7d 0000 e87d 0000 e1b1 0000 e1c5 0000     }...}...........
   13e60:	ec7d 0000 ec7d 0000 ec7d 0000 7830 2e25     }...}...}...0x%.
   13e70:	5838 0000 0a0d 0000 616e 006e 6e69 0066     8X......nan.inf.
   13e80:	766f 0066                                   ovf.

00013e84 <_ZTV5Print>:
	...
   13e8c:	ec7d 0000 e87d 0000 e1b1 0000 e1c5 0000     }...}...........
   13e9c:	6c46 7361 2068 654d 6f6d 7972 5320 6c65     Flash Memory Sel
   13eac:	5466 7365 2074 4150 5353 4445 0000 0000     fTest PASSED....
   13ebc:	0a0d 0000 6c46 7361 2068 654d 6f6d 7972     ....Flash Memory
   13ecc:	5320 6c65 5466 7365 2074 4146 4c49 4445      SelfTest FAILED
   13edc:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
   13eec:	6c61 695f 2e6f 0063 2e2e 2e2f 2f2e 2e2e     al_io.c.../../..
   13efc:	412f 554c 445f 6972 6576 2f72 4c41 5f55     /ALU_Driver/ALU_
   13f0c:	7244 7669 7265 682f 6c70 702f 726f 2f74     Driver/hpl/port/
   13f1c:	7068 5f6c 7067 6f69 625f 7361 2e65 0068     hpl_gpio_base.h.

00013f2c <defaultParameters>:
   13f2c:	4020 0000                                    @..

00013f30 <defaultPreferences>:
   13f30:	00fa 0000 0032 0000                         ....2...

00013f38 <_global_impure_ptr>:
   13f38:	0210 2000                                   ... 

00013f3c <_init>:
   13f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f3e:	bf00      	nop
   13f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13f42:	bc08      	pop	{r3}
   13f44:	469e      	mov	lr, r3
   13f46:	4770      	bx	lr

00013f48 <__init_array_start>:
   13f48:	000139a1 	.word	0x000139a1

00013f4c <__frame_dummy_init_array_entry>:
   13f4c:	00000289 000004e9 00000895 00000d45     ............E...
   13f5c:	0000e179 0000e82d 0000ec55 0000ed7d     y...-...U...}...
   13f6c:	0000ef25 0001053d 00010bed 00010e05     %...=...........
   13f7c:	00010fbd 00011349 00012325 00012655     ....I...%#..U&..
   13f8c:	0001307d                                }0..

00013f90 <_fini>:
   13f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f92:	bf00      	nop
   13f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13f96:	bc08      	pop	{r3}
   13f98:	469e      	mov	lr, r3
   13f9a:	4770      	bx	lr

00013f9c <__fini_array_start>:
   13f9c:	00000265 	.word	0x00000265
